// megafunction wizard: %FIFO%
// GENERATION: STANDARD
// VERSION: WM1.0
// MODULE: scfifo 

// ============================================================
// File Name: masking_machine_sc_fifo.v
// Megafunction Name(s):
// 			scfifo
//
// Simulation Library Files(s):
// 			altera_mf
// ============================================================
// ************************************************************
// THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
//
// 16.1.0 Build 196 10/24/2016 SJ Standard Edition
// ************************************************************


//Copyright (C) 2016  Intel Corporation. All rights reserved.
//Your use of Intel Corporation's design tools, logic functions 
//and other software and tools, and its AMPP partner logic 
//functions, and any output files from any of the foregoing 
//(including device programming or simulation files), and any 
//associated documentation or information are expressly subject 
//to the terms and conditions of the Intel Program License 
//Subscription Agreement, the Intel Quartus Prime License Agreement,
//the Intel MegaCore Function License Agreement, or other 
//applicable license agreement, including, without limitation, 
//that your use is for the sole purpose of programming logic 
//devices manufactured by Intel and sold by Intel or its 
//authorized distributors.  Please refer to the applicable 
//agreement for further details.


//scfifo ADD_RAM_OUTPUT_REGISTER="ON" DEVICE_FAMILY="Stratix IV" LPM_NUMWORDS=256 LPM_SHOWAHEAD="OFF" LPM_WIDTH=8 LPM_WIDTHU=8 OVERFLOW_CHECKING="ON" RAM_BLOCK_TYPE="MLAB" UNDERFLOW_CHECKING="ON" USE_EAB="ON" aclr clock data empty full q rdreq sclr usedw wrreq INTENDED_DEVICE_FAMILY="Stratix IV" lpm_hint="RAM_BLOCK_TYPE=MLAB"
//VERSION_BEGIN 16.1 cbx_altdpram 2016:10:24:15:04:16:SJ cbx_altera_counter 2016:10:24:15:04:16:SJ cbx_altera_syncram 2016:10:24:15:04:16:SJ cbx_altera_syncram_nd_impl 2016:10:24:15:04:16:SJ cbx_altsyncram 2016:10:24:15:04:16:SJ cbx_cycloneii 2016:10:24:15:04:16:SJ cbx_fifo_common 2016:10:24:15:04:16:SJ cbx_lpm_add_sub 2016:10:24:15:04:16:SJ cbx_lpm_compare 2016:10:24:15:04:16:SJ cbx_lpm_counter 2016:10:24:15:04:16:SJ cbx_lpm_decode 2016:10:24:15:04:16:SJ cbx_lpm_mux 2016:10:24:15:04:16:SJ cbx_mgl 2016:10:24:15:05:03:SJ cbx_nadder 2016:10:24:15:04:16:SJ cbx_scfifo 2016:10:24:15:04:16:SJ cbx_stratix 2016:10:24:15:04:16:SJ cbx_stratixii 2016:10:24:15:04:16:SJ cbx_stratixiii 2016:10:24:15:04:16:SJ cbx_stratixv 2016:10:24:15:04:16:SJ cbx_util_mgl 2016:10:24:15:04:16:SJ  VERSION_END
// synthesis VERILOG_INPUT_VERSION VERILOG_2001
// altera message_off 10463



//a_dpfifo ADD_RAM_OUTPUT_REGISTER="ON" ALLOW_RWCYCLE_WHEN_FULL="OFF" DEVICE_FAMILY="Stratix IV" LPM_NUMWORDS=256 LPM_SHOWAHEAD="OFF" lpm_width=8 lpm_widthu=8 OVERFLOW_CHECKING="ON" UNDERFLOW_CHECKING="ON" aclr clock data empty full q rreq sclr usedw wreq INTENDED_DEVICE_FAMILY="Stratix IV" lpm_hint="RAM_BLOCK_TYPE=MLAB"
//VERSION_BEGIN 16.1 cbx_altdpram 2016:10:24:15:04:16:SJ cbx_altera_counter 2016:10:24:15:04:16:SJ cbx_altera_syncram 2016:10:24:15:04:16:SJ cbx_altera_syncram_nd_impl 2016:10:24:15:04:16:SJ cbx_altsyncram 2016:10:24:15:04:16:SJ cbx_cycloneii 2016:10:24:15:04:16:SJ cbx_fifo_common 2016:10:24:15:04:16:SJ cbx_lpm_add_sub 2016:10:24:15:04:16:SJ cbx_lpm_compare 2016:10:24:15:04:16:SJ cbx_lpm_counter 2016:10:24:15:04:16:SJ cbx_lpm_decode 2016:10:24:15:04:16:SJ cbx_lpm_mux 2016:10:24:15:04:16:SJ cbx_mgl 2016:10:24:15:05:03:SJ cbx_nadder 2016:10:24:15:04:16:SJ cbx_scfifo 2016:10:24:15:04:16:SJ cbx_stratix 2016:10:24:15:04:16:SJ cbx_stratixii 2016:10:24:15:04:16:SJ cbx_stratixiii 2016:10:24:15:04:16:SJ cbx_stratixv 2016:10:24:15:04:16:SJ cbx_util_mgl 2016:10:24:15:04:16:SJ  VERSION_END


//a_fefifo ALLOW_RWCYCLE_WHEN_FULL="OFF" LPM_NUMWORDS=256 lpm_widthad=8 OVERFLOW_CHECKING="ON" UNDERFLOW_CHECKING="ON" aclr clock empty full rreq sclr usedw_out wreq
//VERSION_BEGIN 16.1 cbx_cycloneii 2016:10:24:15:04:16:SJ cbx_fifo_common 2016:10:24:15:04:16:SJ cbx_lpm_add_sub 2016:10:24:15:04:16:SJ cbx_lpm_compare 2016:10:24:15:04:16:SJ cbx_lpm_counter 2016:10:24:15:04:16:SJ cbx_lpm_decode 2016:10:24:15:04:16:SJ cbx_mgl 2016:10:24:15:05:03:SJ cbx_nadder 2016:10:24:15:04:16:SJ cbx_stratix 2016:10:24:15:04:16:SJ cbx_stratixii 2016:10:24:15:04:16:SJ  VERSION_END


//lpm_counter DEVICE_FAMILY="Stratix IV" lpm_width=8 aclr clock cnt_en q sclr updown
//VERSION_BEGIN 16.1 cbx_cycloneii 2016:10:24:15:04:16:SJ cbx_lpm_add_sub 2016:10:24:15:04:16:SJ cbx_lpm_compare 2016:10:24:15:04:16:SJ cbx_lpm_counter 2016:10:24:15:04:16:SJ cbx_lpm_decode 2016:10:24:15:04:16:SJ cbx_mgl 2016:10:24:15:05:03:SJ cbx_nadder 2016:10:24:15:04:16:SJ cbx_stratix 2016:10:24:15:04:16:SJ cbx_stratixii 2016:10:24:15:04:16:SJ  VERSION_END

//synthesis_resources = lut 8 reg 8 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  masking_machine_sc_fifo_cntr
	( 
	aclr,
	clock,
	cnt_en,
	q,
	sclr,
	updown) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clock;
	input   cnt_en;
	output   [7:0]  q;
	input   sclr;
	input   updown;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   cnt_en;
	tri0   sclr;
	tri1   updown;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire	[7:0]	wire_counter_reg_bit_d;
	wire	[7:0]	wire_counter_reg_bit_asdata;
	reg	[7:0]	counter_reg_bit;
	wire	[7:0]	wire_counter_reg_bit_ena;
	wire	[7:0]	wire_counter_reg_bit_sload;
	wire  [0:0]   wire_counter_comb_bita_0cout;
	wire  [0:0]   wire_counter_comb_bita_1cout;
	wire  [0:0]   wire_counter_comb_bita_2cout;
	wire  [0:0]   wire_counter_comb_bita_3cout;
	wire  [0:0]   wire_counter_comb_bita_4cout;
	wire  [0:0]   wire_counter_comb_bita_5cout;
	wire  [0:0]   wire_counter_comb_bita_6cout;
	wire  [0:0]   wire_counter_comb_bita_0sumout;
	wire  [0:0]   wire_counter_comb_bita_1sumout;
	wire  [0:0]   wire_counter_comb_bita_2sumout;
	wire  [0:0]   wire_counter_comb_bita_3sumout;
	wire  [0:0]   wire_counter_comb_bita_4sumout;
	wire  [0:0]   wire_counter_comb_bita_5sumout;
	wire  [0:0]   wire_counter_comb_bita_6sumout;
	wire  [0:0]   wire_counter_comb_bita_7sumout;
	wire  aclr_actual;
	wire clk_en;
	wire [7:0]  data;
	wire  external_cin;
	wire  lsb_cin;
	wire  [7:0]  s_val;
	wire  [7:0]  safe_q;
	wire sload;
	wire sset;
	wire  updown_dir;
	wire  updown_lsb;
	wire  updown_other_bits;

	// synopsys translate_off
	initial
		counter_reg_bit[0:0] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[0:0] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[0:0] == 1'b1) 
			if (sclr == 1'b1) counter_reg_bit[0:0] <= 1'b0;
			else if (wire_counter_reg_bit_sload[0:0] == 1'b1) counter_reg_bit[0:0] <= wire_counter_reg_bit_asdata[0:0];
			else  counter_reg_bit[0:0] <= wire_counter_reg_bit_d[0:0];
	// synopsys translate_off
	initial
		counter_reg_bit[1:1] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[1:1] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[1:1] == 1'b1) 
			if (sclr == 1'b1) counter_reg_bit[1:1] <= 1'b0;
			else if (wire_counter_reg_bit_sload[1:1] == 1'b1) counter_reg_bit[1:1] <= wire_counter_reg_bit_asdata[1:1];
			else  counter_reg_bit[1:1] <= wire_counter_reg_bit_d[1:1];
	// synopsys translate_off
	initial
		counter_reg_bit[2:2] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[2:2] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[2:2] == 1'b1) 
			if (sclr == 1'b1) counter_reg_bit[2:2] <= 1'b0;
			else if (wire_counter_reg_bit_sload[2:2] == 1'b1) counter_reg_bit[2:2] <= wire_counter_reg_bit_asdata[2:2];
			else  counter_reg_bit[2:2] <= wire_counter_reg_bit_d[2:2];
	// synopsys translate_off
	initial
		counter_reg_bit[3:3] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[3:3] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[3:3] == 1'b1) 
			if (sclr == 1'b1) counter_reg_bit[3:3] <= 1'b0;
			else if (wire_counter_reg_bit_sload[3:3] == 1'b1) counter_reg_bit[3:3] <= wire_counter_reg_bit_asdata[3:3];
			else  counter_reg_bit[3:3] <= wire_counter_reg_bit_d[3:3];
	// synopsys translate_off
	initial
		counter_reg_bit[4:4] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[4:4] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[4:4] == 1'b1) 
			if (sclr == 1'b1) counter_reg_bit[4:4] <= 1'b0;
			else if (wire_counter_reg_bit_sload[4:4] == 1'b1) counter_reg_bit[4:4] <= wire_counter_reg_bit_asdata[4:4];
			else  counter_reg_bit[4:4] <= wire_counter_reg_bit_d[4:4];
	// synopsys translate_off
	initial
		counter_reg_bit[5:5] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[5:5] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[5:5] == 1'b1) 
			if (sclr == 1'b1) counter_reg_bit[5:5] <= 1'b0;
			else if (wire_counter_reg_bit_sload[5:5] == 1'b1) counter_reg_bit[5:5] <= wire_counter_reg_bit_asdata[5:5];
			else  counter_reg_bit[5:5] <= wire_counter_reg_bit_d[5:5];
	// synopsys translate_off
	initial
		counter_reg_bit[6:6] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[6:6] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[6:6] == 1'b1) 
			if (sclr == 1'b1) counter_reg_bit[6:6] <= 1'b0;
			else if (wire_counter_reg_bit_sload[6:6] == 1'b1) counter_reg_bit[6:6] <= wire_counter_reg_bit_asdata[6:6];
			else  counter_reg_bit[6:6] <= wire_counter_reg_bit_d[6:6];
	// synopsys translate_off
	initial
		counter_reg_bit[7:7] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[7:7] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[7:7] == 1'b1) 
			if (sclr == 1'b1) counter_reg_bit[7:7] <= 1'b0;
			else if (wire_counter_reg_bit_sload[7:7] == 1'b1) counter_reg_bit[7:7] <= wire_counter_reg_bit_asdata[7:7];
			else  counter_reg_bit[7:7] <= wire_counter_reg_bit_d[7:7];
	assign
		wire_counter_reg_bit_asdata = (({8{sset}} & s_val) | ({8{(~ sset)}} & data)),
		wire_counter_reg_bit_d = {wire_counter_comb_bita_7sumout[0:0], wire_counter_comb_bita_6sumout[0:0], wire_counter_comb_bita_5sumout[0:0], wire_counter_comb_bita_4sumout[0:0], wire_counter_comb_bita_3sumout[0:0], wire_counter_comb_bita_2sumout[0:0], wire_counter_comb_bita_1sumout[0:0], wire_counter_comb_bita_0sumout[0:0]};
	assign
		wire_counter_reg_bit_ena = {8{(clk_en & (((cnt_en | sclr) | sset) | sload))}},
		wire_counter_reg_bit_sload = {8{(sset | sload)}};
	stratixiv_lcell_comb   counter_comb_bita_0
	( 
	.cin(lsb_cin),
	.combout(),
	.cout(wire_counter_comb_bita_0cout[0:0]),
	.datad(counter_reg_bit[0]),
	.dataf(updown_lsb),
	.shareout(),
	.sumout(wire_counter_comb_bita_0sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		counter_comb_bita_0.extended_lut = "off",
		counter_comb_bita_0.lut_mask = 64'h000000000000FF00,
		counter_comb_bita_0.shared_arith = "off",
		counter_comb_bita_0.lpm_type = "stratixiv_lcell_comb";
	stratixiv_lcell_comb   counter_comb_bita_1
	( 
	.cin(wire_counter_comb_bita_0cout[0:0]),
	.combout(),
	.cout(wire_counter_comb_bita_1cout[0:0]),
	.datad(counter_reg_bit[1]),
	.dataf(updown_other_bits),
	.shareout(),
	.sumout(wire_counter_comb_bita_1sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		counter_comb_bita_1.extended_lut = "off",
		counter_comb_bita_1.lut_mask = 64'h0000FF000000FF00,
		counter_comb_bita_1.shared_arith = "off",
		counter_comb_bita_1.lpm_type = "stratixiv_lcell_comb";
	stratixiv_lcell_comb   counter_comb_bita_2
	( 
	.cin(wire_counter_comb_bita_1cout[0:0]),
	.combout(),
	.cout(wire_counter_comb_bita_2cout[0:0]),
	.datad(counter_reg_bit[2]),
	.dataf(updown_other_bits),
	.shareout(),
	.sumout(wire_counter_comb_bita_2sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		counter_comb_bita_2.extended_lut = "off",
		counter_comb_bita_2.lut_mask = 64'h0000FF000000FF00,
		counter_comb_bita_2.shared_arith = "off",
		counter_comb_bita_2.lpm_type = "stratixiv_lcell_comb";
	stratixiv_lcell_comb   counter_comb_bita_3
	( 
	.cin(wire_counter_comb_bita_2cout[0:0]),
	.combout(),
	.cout(wire_counter_comb_bita_3cout[0:0]),
	.datad(counter_reg_bit[3]),
	.dataf(updown_other_bits),
	.shareout(),
	.sumout(wire_counter_comb_bita_3sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		counter_comb_bita_3.extended_lut = "off",
		counter_comb_bita_3.lut_mask = 64'h0000FF000000FF00,
		counter_comb_bita_3.shared_arith = "off",
		counter_comb_bita_3.lpm_type = "stratixiv_lcell_comb";
	stratixiv_lcell_comb   counter_comb_bita_4
	( 
	.cin(wire_counter_comb_bita_3cout[0:0]),
	.combout(),
	.cout(wire_counter_comb_bita_4cout[0:0]),
	.datad(counter_reg_bit[4]),
	.dataf(updown_other_bits),
	.shareout(),
	.sumout(wire_counter_comb_bita_4sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		counter_comb_bita_4.extended_lut = "off",
		counter_comb_bita_4.lut_mask = 64'h0000FF000000FF00,
		counter_comb_bita_4.shared_arith = "off",
		counter_comb_bita_4.lpm_type = "stratixiv_lcell_comb";
	stratixiv_lcell_comb   counter_comb_bita_5
	( 
	.cin(wire_counter_comb_bita_4cout[0:0]),
	.combout(),
	.cout(wire_counter_comb_bita_5cout[0:0]),
	.datad(counter_reg_bit[5]),
	.dataf(updown_other_bits),
	.shareout(),
	.sumout(wire_counter_comb_bita_5sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		counter_comb_bita_5.extended_lut = "off",
		counter_comb_bita_5.lut_mask = 64'h0000FF000000FF00,
		counter_comb_bita_5.shared_arith = "off",
		counter_comb_bita_5.lpm_type = "stratixiv_lcell_comb";
	stratixiv_lcell_comb   counter_comb_bita_6
	( 
	.cin(wire_counter_comb_bita_5cout[0:0]),
	.combout(),
	.cout(wire_counter_comb_bita_6cout[0:0]),
	.datad(counter_reg_bit[6]),
	.dataf(updown_other_bits),
	.shareout(),
	.sumout(wire_counter_comb_bita_6sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		counter_comb_bita_6.extended_lut = "off",
		counter_comb_bita_6.lut_mask = 64'h0000FF000000FF00,
		counter_comb_bita_6.shared_arith = "off",
		counter_comb_bita_6.lpm_type = "stratixiv_lcell_comb";
	stratixiv_lcell_comb   counter_comb_bita_7
	( 
	.cin(wire_counter_comb_bita_6cout[0:0]),
	.combout(),
	.cout(),
	.datad(counter_reg_bit[7]),
	.dataf(updown_other_bits),
	.shareout(),
	.sumout(wire_counter_comb_bita_7sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		counter_comb_bita_7.extended_lut = "off",
		counter_comb_bita_7.lut_mask = 64'h0000FF000000FF00,
		counter_comb_bita_7.shared_arith = "off",
		counter_comb_bita_7.lpm_type = "stratixiv_lcell_comb";
	assign
		aclr_actual = aclr,
		clk_en = 1'b1,
		data = {8{1'b0}},
		external_cin = 1'b1,
		lsb_cin = 1'b0,
		q = safe_q,
		s_val = {8{1'b1}},
		safe_q = counter_reg_bit,
		sload = 1'b0,
		sset = 1'b0,
		updown_dir = updown,
		updown_lsb = updown_dir,
		updown_other_bits = ((~ external_cin) | updown_dir);
endmodule //masking_machine_sc_fifo_cntr

//synthesis_resources = lut 8 reg 10 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  masking_machine_sc_fifo_a_fefifo
	( 
	aclr,
	clock,
	empty,
	full,
	rreq,
	sclr,
	usedw_out,
	wreq) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clock;
	output   empty;
	output   full;
	input   rreq;
	input   sclr;
	output   [7:0]  usedw_out;
	input   wreq;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri0   rreq;
	tri0   sclr;
	tri0   wreq;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	reg	b_full;
	reg	b_non_empty;
	wire  [7:0]   wire_count_usedw_q;
	wire  [7:0]  equal_af1;
	wire  [7:0]  equal_one;
	wire  is_almost_empty0;
	wire  is_almost_empty1;
	wire  is_almost_empty2;
	wire  is_almost_empty3;
	wire  is_almost_empty4;
	wire  is_almost_empty5;
	wire  is_almost_empty6;
	wire  is_almost_empty7;
	wire  is_almost_full0;
	wire  is_almost_full1;
	wire  is_almost_full2;
	wire  is_almost_full3;
	wire  is_almost_full4;
	wire  is_almost_full5;
	wire  is_almost_full6;
	wire  is_almost_full7;
	wire  [7:0]  usedw;
	wire  valid_rreq;
	wire  valid_wreq;

	// synopsys translate_off
	initial
		b_full = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) b_full <= 1'b0;
		else  b_full <= ((b_full & (b_full ^ (sclr | rreq))) | (((~ b_full) & b_non_empty) & ((~ sclr) & ((is_almost_full7 & wreq) & (~ rreq)))));
	// synopsys translate_off
	initial
		b_non_empty = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) b_non_empty <= 1'b0;
		else  b_non_empty <= (((b_full & (b_full ^ sclr)) | (((~ b_non_empty) & wreq) & (~ sclr))) | (((~ b_full) & b_non_empty) & (((~ b_full) & b_non_empty) ^ (sclr | ((is_almost_empty7 & rreq) & (~ wreq))))));
	masking_machine_sc_fifo_cntr   count_usedw
	( 
	.aclr(aclr),
	.clock(clock),
	.cnt_en((valid_wreq ^ valid_rreq)),
	.q(wire_count_usedw_q),
	.sclr(sclr),
	.updown(valid_wreq));
	assign
		empty = (~ b_non_empty),
		equal_af1 = {8{1'b0}},
		equal_one = {{7{1'b1}}, 1'b0},
		full = b_full,
		is_almost_empty0 = (usedw[0] ^ equal_one[0]),
		is_almost_empty1 = ((usedw[1] ^ equal_one[1]) & is_almost_empty0),
		is_almost_empty2 = ((usedw[2] ^ equal_one[2]) & is_almost_empty1),
		is_almost_empty3 = ((usedw[3] ^ equal_one[3]) & is_almost_empty2),
		is_almost_empty4 = ((usedw[4] ^ equal_one[4]) & is_almost_empty3),
		is_almost_empty5 = ((usedw[5] ^ equal_one[5]) & is_almost_empty4),
		is_almost_empty6 = ((usedw[6] ^ equal_one[6]) & is_almost_empty5),
		is_almost_empty7 = ((usedw[7] ^ equal_one[7]) & is_almost_empty6),
		is_almost_full0 = (usedw[0] ^ equal_af1[0]),
		is_almost_full1 = ((usedw[1] ^ equal_af1[1]) & is_almost_full0),
		is_almost_full2 = ((usedw[2] ^ equal_af1[2]) & is_almost_full1),
		is_almost_full3 = ((usedw[3] ^ equal_af1[3]) & is_almost_full2),
		is_almost_full4 = ((usedw[4] ^ equal_af1[4]) & is_almost_full3),
		is_almost_full5 = ((usedw[5] ^ equal_af1[5]) & is_almost_full4),
		is_almost_full6 = ((usedw[6] ^ equal_af1[6]) & is_almost_full5),
		is_almost_full7 = ((usedw[7] ^ equal_af1[7]) & is_almost_full6),
		usedw = wire_count_usedw_q,
		usedw_out = usedw,
		valid_rreq = (rreq & b_non_empty),
		valid_wreq = (wreq & (~ b_full));
endmodule //masking_machine_sc_fifo_a_fefifo


//altsyncram ADDRESS_ACLR_A="NONE" ADDRESS_ACLR_B="NONE" ADDRESS_REG_B="CLOCK1" DEVICE_FAMILY="Stratix IV" ENABLE_ECC="FALSE" INDATA_ACLR_A="NONE" NUMWORDS_A=256 NUMWORDS_B=256 OPERATION_MODE="DUAL_PORT" OUTDATA_ACLR_B="NONE" OUTDATA_REG_B="UNREGISTERED" RAM_BLOCK_TYPE="MLAB" RDCONTROL_ACLR_B="NONE" RDCONTROL_REG_B="CLOCK0" READ_DURING_WRITE_MODE_MIXED_PORTS="DONT_CARE" WIDTH_A=8 WIDTH_B=8 WIDTH_ECCSTATUS=2 WIDTHAD_A=8 WIDTHAD_B=8 WRCONTROL_ACLR_A="NONE" address_a address_b clock0 clock1 clocken1 data_a q_b wren_a
//VERSION_BEGIN 16.1 cbx_altera_syncram_nd_impl 2016:10:24:15:04:16:SJ cbx_altsyncram 2016:10:24:15:04:16:SJ cbx_cycloneii 2016:10:24:15:04:16:SJ cbx_lpm_add_sub 2016:10:24:15:04:16:SJ cbx_lpm_compare 2016:10:24:15:04:16:SJ cbx_lpm_decode 2016:10:24:15:04:16:SJ cbx_lpm_mux 2016:10:24:15:04:16:SJ cbx_mgl 2016:10:24:15:05:03:SJ cbx_nadder 2016:10:24:15:04:16:SJ cbx_stratix 2016:10:24:15:04:16:SJ cbx_stratixii 2016:10:24:15:04:16:SJ cbx_stratixiii 2016:10:24:15:04:16:SJ cbx_stratixv 2016:10:24:15:04:16:SJ cbx_util_mgl 2016:10:24:15:04:16:SJ  VERSION_END


//lpm_decode DEVICE_FAMILY="Stratix IV" LPM_DECODES=4 LPM_WIDTH=2 data enable eq
//VERSION_BEGIN 16.1 cbx_cycloneii 2016:10:24:15:04:16:SJ cbx_lpm_add_sub 2016:10:24:15:04:16:SJ cbx_lpm_compare 2016:10:24:15:04:16:SJ cbx_lpm_decode 2016:10:24:15:04:16:SJ cbx_mgl 2016:10:24:15:05:03:SJ cbx_nadder 2016:10:24:15:04:16:SJ cbx_stratix 2016:10:24:15:04:16:SJ cbx_stratixii 2016:10:24:15:04:16:SJ  VERSION_END

//synthesis_resources = lut 4 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  masking_machine_sc_fifo_decode
	( 
	data,
	enable,
	eq) /* synthesis synthesis_clearbox=1 */;
	input   [1:0]  data;
	input   enable;
	output   [3:0]  eq;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   [1:0]  data;
	tri1   enable;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [1:0]  data_wire;
	wire  enable_wire;
	wire  [3:0]  eq_node;
	wire  [3:0]  eq_wire;
	wire  [2:0]  w_anode187w;
	wire  [2:0]  w_anode200w;
	wire  [2:0]  w_anode208w;
	wire  [2:0]  w_anode216w;

	assign
		data_wire = data,
		enable_wire = enable,
		eq = eq_node,
		eq_node = eq_wire[3:0],
		eq_wire = {w_anode216w[2], w_anode208w[2], w_anode200w[2], w_anode187w[2]},
		w_anode187w = {(w_anode187w[1] & (~ data_wire[1])), (w_anode187w[0] & (~ data_wire[0])), enable_wire},
		w_anode200w = {(w_anode200w[1] & (~ data_wire[1])), (w_anode200w[0] & data_wire[0]), enable_wire},
		w_anode208w = {(w_anode208w[1] & data_wire[1]), (w_anode208w[0] & (~ data_wire[0])), enable_wire},
		w_anode216w = {(w_anode216w[1] & data_wire[1]), (w_anode216w[0] & data_wire[0]), enable_wire};
endmodule //masking_machine_sc_fifo_decode


//lpm_mux DEVICE_FAMILY="Stratix IV" LPM_SIZE=4 LPM_WIDTH=8 LPM_WIDTHS=2 data result sel
//VERSION_BEGIN 16.1 cbx_lpm_mux 2016:10:24:15:04:16:SJ cbx_mgl 2016:10:24:15:05:03:SJ  VERSION_END

//synthesis_resources = lut 8 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  masking_machine_sc_fifo_mux
	( 
	data,
	result,
	sel) /* synthesis synthesis_clearbox=1 */;
	input   [31:0]  data;
	output   [7:0]  result;
	input   [1:0]  sel;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   [31:0]  data;
	tri0   [1:0]  sel;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire	wire_l1_w0_n0_mux_dataout;
	wire	wire_l1_w0_n1_mux_dataout;
	wire	wire_l1_w1_n0_mux_dataout;
	wire	wire_l1_w1_n1_mux_dataout;
	wire	wire_l1_w2_n0_mux_dataout;
	wire	wire_l1_w2_n1_mux_dataout;
	wire	wire_l1_w3_n0_mux_dataout;
	wire	wire_l1_w3_n1_mux_dataout;
	wire	wire_l1_w4_n0_mux_dataout;
	wire	wire_l1_w4_n1_mux_dataout;
	wire	wire_l1_w5_n0_mux_dataout;
	wire	wire_l1_w5_n1_mux_dataout;
	wire	wire_l1_w6_n0_mux_dataout;
	wire	wire_l1_w6_n1_mux_dataout;
	wire	wire_l1_w7_n0_mux_dataout;
	wire	wire_l1_w7_n1_mux_dataout;
	wire	wire_l2_w0_n0_mux_dataout;
	wire	wire_l2_w1_n0_mux_dataout;
	wire	wire_l2_w2_n0_mux_dataout;
	wire	wire_l2_w3_n0_mux_dataout;
	wire	wire_l2_w4_n0_mux_dataout;
	wire	wire_l2_w5_n0_mux_dataout;
	wire	wire_l2_w6_n0_mux_dataout;
	wire	wire_l2_w7_n0_mux_dataout;
	wire  [47:0]  data_wire;
	wire  [7:0]  result_wire_ext;
	wire  [3:0]  sel_wire;

	assign		wire_l1_w0_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[8] : data_wire[0];
	assign		wire_l1_w0_n1_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[24] : data_wire[16];
	assign		wire_l1_w1_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[9] : data_wire[1];
	assign		wire_l1_w1_n1_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[25] : data_wire[17];
	assign		wire_l1_w2_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[10] : data_wire[2];
	assign		wire_l1_w2_n1_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[26] : data_wire[18];
	assign		wire_l1_w3_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[11] : data_wire[3];
	assign		wire_l1_w3_n1_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[27] : data_wire[19];
	assign		wire_l1_w4_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[12] : data_wire[4];
	assign		wire_l1_w4_n1_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[28] : data_wire[20];
	assign		wire_l1_w5_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[13] : data_wire[5];
	assign		wire_l1_w5_n1_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[29] : data_wire[21];
	assign		wire_l1_w6_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[14] : data_wire[6];
	assign		wire_l1_w6_n1_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[30] : data_wire[22];
	assign		wire_l1_w7_n0_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[15] : data_wire[7];
	assign		wire_l1_w7_n1_mux_dataout = (sel_wire[0] === 1'b1) ? data_wire[31] : data_wire[23];
	assign		wire_l2_w0_n0_mux_dataout = (sel_wire[3] === 1'b1) ? data_wire[33] : data_wire[32];
	assign		wire_l2_w1_n0_mux_dataout = (sel_wire[3] === 1'b1) ? data_wire[35] : data_wire[34];
	assign		wire_l2_w2_n0_mux_dataout = (sel_wire[3] === 1'b1) ? data_wire[37] : data_wire[36];
	assign		wire_l2_w3_n0_mux_dataout = (sel_wire[3] === 1'b1) ? data_wire[39] : data_wire[38];
	assign		wire_l2_w4_n0_mux_dataout = (sel_wire[3] === 1'b1) ? data_wire[41] : data_wire[40];
	assign		wire_l2_w5_n0_mux_dataout = (sel_wire[3] === 1'b1) ? data_wire[43] : data_wire[42];
	assign		wire_l2_w6_n0_mux_dataout = (sel_wire[3] === 1'b1) ? data_wire[45] : data_wire[44];
	assign		wire_l2_w7_n0_mux_dataout = (sel_wire[3] === 1'b1) ? data_wire[47] : data_wire[46];
	assign
		data_wire = {wire_l1_w7_n1_mux_dataout, wire_l1_w7_n0_mux_dataout, wire_l1_w6_n1_mux_dataout, wire_l1_w6_n0_mux_dataout, wire_l1_w5_n1_mux_dataout, wire_l1_w5_n0_mux_dataout, wire_l1_w4_n1_mux_dataout, wire_l1_w4_n0_mux_dataout, wire_l1_w3_n1_mux_dataout, wire_l1_w3_n0_mux_dataout, wire_l1_w2_n1_mux_dataout, wire_l1_w2_n0_mux_dataout, wire_l1_w1_n1_mux_dataout, wire_l1_w1_n0_mux_dataout, wire_l1_w0_n1_mux_dataout, wire_l1_w0_n0_mux_dataout, data},
		result = result_wire_ext,
		result_wire_ext = {wire_l2_w7_n0_mux_dataout, wire_l2_w6_n0_mux_dataout, wire_l2_w5_n0_mux_dataout, wire_l2_w4_n0_mux_dataout, wire_l2_w3_n0_mux_dataout, wire_l2_w2_n0_mux_dataout, wire_l2_w1_n0_mux_dataout, wire_l2_w0_n0_mux_dataout},
		sel_wire = {sel[1], {2{1'b0}}, sel[0]};
endmodule //masking_machine_sc_fifo_mux

//synthesis_resources = lut 12 MLAB 4 reg 24 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"ADV_NETLIST_OPT_ALLOWED=\"NEVER_ALLOW\";OPTIMIZE_POWER_DURING_SYNTHESIS=NORMAL_COMPILATION"} *)
module  masking_machine_sc_fifo_altsyncram
	( 
	address_a,
	address_b,
	clock0,
	clock1,
	clocken1,
	data_a,
	q_b,
	wren_a) /* synthesis synthesis_clearbox=1 */;
	input   [7:0]  address_a;
	input   [7:0]  address_b;
	input   clock0;
	input   clock1;
	input   clocken1;
	input   [7:0]  data_a;
	output   [7:0]  q_b;
	input   wren_a;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri1   [7:0]  address_b;
	tri1   clock0;
	tri1   clock1;
	tri1   clocken1;
	tri1   [7:0]  data_a;
	tri0   wren_a;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	(* ALTERA_ATTRIBUTE = {"PRESERVE_REGISTER=ON;ALLOW_SYNCH_CTRL_USAGE=OFF;DONT_MERGE_REGISTER=ON"} *)
	reg	[7:0]	datain_reg;
	(* ALTERA_ATTRIBUTE = {"PRESERVE_REGISTER=ON"} *)
	reg	[7:0]	rdaddr_reg;
	(* ALTERA_ATTRIBUTE = {"PRESERVE_REGISTER=ON;DONT_MERGE_REGISTER=ON"} *)
	reg	[7:0]	wraddr_reg;
	wire  [3:0]   wire_wr_decode_eq;
	wire  [7:0]   wire_rd_mux_result;
	wire  [0:0]   wire_lutrama_0portbdataout;
	wire  [0:0]   wire_lutrama_1portbdataout;
	wire  [0:0]   wire_lutrama_2portbdataout;
	wire  [0:0]   wire_lutrama_3portbdataout;
	wire  [0:0]   wire_lutrama_4portbdataout;
	wire  [0:0]   wire_lutrama_5portbdataout;
	wire  [0:0]   wire_lutrama_6portbdataout;
	wire  [0:0]   wire_lutrama_7portbdataout;
	wire  [0:0]   wire_lutrama_8portbdataout;
	wire  [0:0]   wire_lutrama_9portbdataout;
	wire  [0:0]   wire_lutrama_10portbdataout;
	wire  [0:0]   wire_lutrama_11portbdataout;
	wire  [0:0]   wire_lutrama_12portbdataout;
	wire  [0:0]   wire_lutrama_13portbdataout;
	wire  [0:0]   wire_lutrama_14portbdataout;
	wire  [0:0]   wire_lutrama_15portbdataout;
	wire  [0:0]   wire_lutrama_16portbdataout;
	wire  [0:0]   wire_lutrama_17portbdataout;
	wire  [0:0]   wire_lutrama_18portbdataout;
	wire  [0:0]   wire_lutrama_19portbdataout;
	wire  [0:0]   wire_lutrama_20portbdataout;
	wire  [0:0]   wire_lutrama_21portbdataout;
	wire  [0:0]   wire_lutrama_22portbdataout;
	wire  [0:0]   wire_lutrama_23portbdataout;
	wire  [0:0]   wire_lutrama_24portbdataout;
	wire  [0:0]   wire_lutrama_25portbdataout;
	wire  [0:0]   wire_lutrama_26portbdataout;
	wire  [0:0]   wire_lutrama_27portbdataout;
	wire  [0:0]   wire_lutrama_28portbdataout;
	wire  [0:0]   wire_lutrama_29portbdataout;
	wire  [0:0]   wire_lutrama_30portbdataout;
	wire  [0:0]   wire_lutrama_31portbdataout;
	wire  [7:0]  datain_wire;
	wire  [7:0]  dataout_wire;
	wire  [7:0]  rdaddr_wire;
	wire  wr_en;
	wire  [7:0]  wraddr_wire;

	// synopsys translate_off
	initial
		datain_reg = 0;
	// synopsys translate_on
	always @ ( posedge clock0)
		  datain_reg <= data_a;
	// synopsys translate_off
	initial
		rdaddr_reg = 0;
	// synopsys translate_on
	always @ ( posedge clock1)
		if (clocken1 == 1'b1)   rdaddr_reg <= address_b;
	// synopsys translate_off
	initial
		wraddr_reg = 0;
	// synopsys translate_on
	always @ ( posedge clock0)
		  wraddr_reg <= address_a;
	masking_machine_sc_fifo_decode   wr_decode
	( 
	.data(address_a[7:6]),
	.enable(wr_en),
	.eq(wire_wr_decode_eq));
	masking_machine_sc_fifo_mux   rd_mux
	( 
	.data({wire_lutrama_31portbdataout[0:0], wire_lutrama_30portbdataout[0:0], wire_lutrama_29portbdataout[0:0], wire_lutrama_28portbdataout[0:0], wire_lutrama_27portbdataout[0:0], wire_lutrama_26portbdataout[0:0], wire_lutrama_25portbdataout[0:0], wire_lutrama_24portbdataout[0:0], wire_lutrama_23portbdataout[0:0], wire_lutrama_22portbdataout[0:0], wire_lutrama_21portbdataout[0:0], wire_lutrama_20portbdataout[0:0], wire_lutrama_19portbdataout[0:0], wire_lutrama_18portbdataout[0:0], wire_lutrama_17portbdataout[0:0], wire_lutrama_16portbdataout[0:0], wire_lutrama_15portbdataout[0:0], wire_lutrama_14portbdataout[0:0], wire_lutrama_13portbdataout[0:0], wire_lutrama_12portbdataout[0:0], wire_lutrama_11portbdataout[0:0], wire_lutrama_10portbdataout[0:0], wire_lutrama_9portbdataout[0:0], wire_lutrama_8portbdataout[0:0], wire_lutrama_7portbdataout[0:0], wire_lutrama_6portbdataout[0:0], wire_lutrama_5portbdataout[0:0], wire_lutrama_4portbdataout[0:0], wire_lutrama_3portbdataout[0:0], wire_lutrama_2portbdataout[0:0], wire_lutrama_1portbdataout[0:0], wire_lutrama_0portbdataout[0:0]}),
	.result(wire_rd_mux_result),
	.sel(rdaddr_wire[7:6]));
	stratixiv_mlab_cell   lutrama_0
	( 
	.clk0(clock0),
	.ena0(wire_wr_decode_eq[0]),
	.portaaddr(wraddr_wire[5:0]),
	.portadatain(datain_wire[0]),
	.portbaddr(rdaddr_wire[5:0]),
	.portbdataout(wire_lutrama_0portbdataout[0:0])
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.portabyteenamasks({2{1'b1}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		lutrama_0.address_width = 6,
		lutrama_0.data_width = 1,
		lutrama_0.first_address = 0,
		lutrama_0.first_bit_number = 0,
		lutrama_0.last_address = 63,
		lutrama_0.logical_ram_depth = 256,
		lutrama_0.logical_ram_name = "altdpram_instance",
		lutrama_0.logical_ram_width = 8,
		lutrama_0.mixed_port_feed_through_mode = "dont_care",
		lutrama_0.lpm_type = "stratixiv_mlab_cell";
	stratixiv_mlab_cell   lutrama_1
	( 
	.clk0(clock0),
	.ena0(wire_wr_decode_eq[0]),
	.portaaddr(wraddr_wire[5:0]),
	.portadatain(datain_wire[1]),
	.portbaddr(rdaddr_wire[5:0]),
	.portbdataout(wire_lutrama_1portbdataout[0:0])
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.portabyteenamasks({2{1'b1}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		lutrama_1.address_width = 6,
		lutrama_1.data_width = 1,
		lutrama_1.first_address = 0,
		lutrama_1.first_bit_number = 1,
		lutrama_1.last_address = 63,
		lutrama_1.logical_ram_depth = 256,
		lutrama_1.logical_ram_name = "altdpram_instance",
		lutrama_1.logical_ram_width = 8,
		lutrama_1.mixed_port_feed_through_mode = "dont_care",
		lutrama_1.lpm_type = "stratixiv_mlab_cell";
	stratixiv_mlab_cell   lutrama_2
	( 
	.clk0(clock0),
	.ena0(wire_wr_decode_eq[0]),
	.portaaddr(wraddr_wire[5:0]),
	.portadatain(datain_wire[2]),
	.portbaddr(rdaddr_wire[5:0]),
	.portbdataout(wire_lutrama_2portbdataout[0:0])
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.portabyteenamasks({2{1'b1}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		lutrama_2.address_width = 6,
		lutrama_2.data_width = 1,
		lutrama_2.first_address = 0,
		lutrama_2.first_bit_number = 2,
		lutrama_2.last_address = 63,
		lutrama_2.logical_ram_depth = 256,
		lutrama_2.logical_ram_name = "altdpram_instance",
		lutrama_2.logical_ram_width = 8,
		lutrama_2.mixed_port_feed_through_mode = "dont_care",
		lutrama_2.lpm_type = "stratixiv_mlab_cell";
	stratixiv_mlab_cell   lutrama_3
	( 
	.clk0(clock0),
	.ena0(wire_wr_decode_eq[0]),
	.portaaddr(wraddr_wire[5:0]),
	.portadatain(datain_wire[3]),
	.portbaddr(rdaddr_wire[5:0]),
	.portbdataout(wire_lutrama_3portbdataout[0:0])
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.portabyteenamasks({2{1'b1}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		lutrama_3.address_width = 6,
		lutrama_3.data_width = 1,
		lutrama_3.first_address = 0,
		lutrama_3.first_bit_number = 3,
		lutrama_3.last_address = 63,
		lutrama_3.logical_ram_depth = 256,
		lutrama_3.logical_ram_name = "altdpram_instance",
		lutrama_3.logical_ram_width = 8,
		lutrama_3.mixed_port_feed_through_mode = "dont_care",
		lutrama_3.lpm_type = "stratixiv_mlab_cell";
	stratixiv_mlab_cell   lutrama_4
	( 
	.clk0(clock0),
	.ena0(wire_wr_decode_eq[0]),
	.portaaddr(wraddr_wire[5:0]),
	.portadatain(datain_wire[4]),
	.portbaddr(rdaddr_wire[5:0]),
	.portbdataout(wire_lutrama_4portbdataout[0:0])
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.portabyteenamasks({2{1'b1}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		lutrama_4.address_width = 6,
		lutrama_4.data_width = 1,
		lutrama_4.first_address = 0,
		lutrama_4.first_bit_number = 4,
		lutrama_4.last_address = 63,
		lutrama_4.logical_ram_depth = 256,
		lutrama_4.logical_ram_name = "altdpram_instance",
		lutrama_4.logical_ram_width = 8,
		lutrama_4.mixed_port_feed_through_mode = "dont_care",
		lutrama_4.lpm_type = "stratixiv_mlab_cell";
	stratixiv_mlab_cell   lutrama_5
	( 
	.clk0(clock0),
	.ena0(wire_wr_decode_eq[0]),
	.portaaddr(wraddr_wire[5:0]),
	.portadatain(datain_wire[5]),
	.portbaddr(rdaddr_wire[5:0]),
	.portbdataout(wire_lutrama_5portbdataout[0:0])
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.portabyteenamasks({2{1'b1}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		lutrama_5.address_width = 6,
		lutrama_5.data_width = 1,
		lutrama_5.first_address = 0,
		lutrama_5.first_bit_number = 5,
		lutrama_5.last_address = 63,
		lutrama_5.logical_ram_depth = 256,
		lutrama_5.logical_ram_name = "altdpram_instance",
		lutrama_5.logical_ram_width = 8,
		lutrama_5.mixed_port_feed_through_mode = "dont_care",
		lutrama_5.lpm_type = "stratixiv_mlab_cell";
	stratixiv_mlab_cell   lutrama_6
	( 
	.clk0(clock0),
	.ena0(wire_wr_decode_eq[0]),
	.portaaddr(wraddr_wire[5:0]),
	.portadatain(datain_wire[6]),
	.portbaddr(rdaddr_wire[5:0]),
	.portbdataout(wire_lutrama_6portbdataout[0:0])
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.portabyteenamasks({2{1'b1}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		lutrama_6.address_width = 6,
		lutrama_6.data_width = 1,
		lutrama_6.first_address = 0,
		lutrama_6.first_bit_number = 6,
		lutrama_6.last_address = 63,
		lutrama_6.logical_ram_depth = 256,
		lutrama_6.logical_ram_name = "altdpram_instance",
		lutrama_6.logical_ram_width = 8,
		lutrama_6.mixed_port_feed_through_mode = "dont_care",
		lutrama_6.lpm_type = "stratixiv_mlab_cell";
	stratixiv_mlab_cell   lutrama_7
	( 
	.clk0(clock0),
	.ena0(wire_wr_decode_eq[0]),
	.portaaddr(wraddr_wire[5:0]),
	.portadatain(datain_wire[7]),
	.portbaddr(rdaddr_wire[5:0]),
	.portbdataout(wire_lutrama_7portbdataout[0:0])
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.portabyteenamasks({2{1'b1}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		lutrama_7.address_width = 6,
		lutrama_7.data_width = 1,
		lutrama_7.first_address = 0,
		lutrama_7.first_bit_number = 7,
		lutrama_7.last_address = 63,
		lutrama_7.logical_ram_depth = 256,
		lutrama_7.logical_ram_name = "altdpram_instance",
		lutrama_7.logical_ram_width = 8,
		lutrama_7.mixed_port_feed_through_mode = "dont_care",
		lutrama_7.lpm_type = "stratixiv_mlab_cell";
	stratixiv_mlab_cell   lutrama_8
	( 
	.clk0(clock0),
	.ena0(wire_wr_decode_eq[1]),
	.portaaddr(wraddr_wire[5:0]),
	.portadatain(datain_wire[0]),
	.portbaddr(rdaddr_wire[5:0]),
	.portbdataout(wire_lutrama_8portbdataout[0:0])
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.portabyteenamasks({2{1'b1}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		lutrama_8.address_width = 6,
		lutrama_8.data_width = 1,
		lutrama_8.first_address = 64,
		lutrama_8.first_bit_number = 0,
		lutrama_8.last_address = 127,
		lutrama_8.logical_ram_depth = 256,
		lutrama_8.logical_ram_name = "altdpram_instance",
		lutrama_8.logical_ram_width = 8,
		lutrama_8.mixed_port_feed_through_mode = "dont_care",
		lutrama_8.lpm_type = "stratixiv_mlab_cell";
	stratixiv_mlab_cell   lutrama_9
	( 
	.clk0(clock0),
	.ena0(wire_wr_decode_eq[1]),
	.portaaddr(wraddr_wire[5:0]),
	.portadatain(datain_wire[1]),
	.portbaddr(rdaddr_wire[5:0]),
	.portbdataout(wire_lutrama_9portbdataout[0:0])
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.portabyteenamasks({2{1'b1}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		lutrama_9.address_width = 6,
		lutrama_9.data_width = 1,
		lutrama_9.first_address = 64,
		lutrama_9.first_bit_number = 1,
		lutrama_9.last_address = 127,
		lutrama_9.logical_ram_depth = 256,
		lutrama_9.logical_ram_name = "altdpram_instance",
		lutrama_9.logical_ram_width = 8,
		lutrama_9.mixed_port_feed_through_mode = "dont_care",
		lutrama_9.lpm_type = "stratixiv_mlab_cell";
	stratixiv_mlab_cell   lutrama_10
	( 
	.clk0(clock0),
	.ena0(wire_wr_decode_eq[1]),
	.portaaddr(wraddr_wire[5:0]),
	.portadatain(datain_wire[2]),
	.portbaddr(rdaddr_wire[5:0]),
	.portbdataout(wire_lutrama_10portbdataout[0:0])
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.portabyteenamasks({2{1'b1}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		lutrama_10.address_width = 6,
		lutrama_10.data_width = 1,
		lutrama_10.first_address = 64,
		lutrama_10.first_bit_number = 2,
		lutrama_10.last_address = 127,
		lutrama_10.logical_ram_depth = 256,
		lutrama_10.logical_ram_name = "altdpram_instance",
		lutrama_10.logical_ram_width = 8,
		lutrama_10.mixed_port_feed_through_mode = "dont_care",
		lutrama_10.lpm_type = "stratixiv_mlab_cell";
	stratixiv_mlab_cell   lutrama_11
	( 
	.clk0(clock0),
	.ena0(wire_wr_decode_eq[1]),
	.portaaddr(wraddr_wire[5:0]),
	.portadatain(datain_wire[3]),
	.portbaddr(rdaddr_wire[5:0]),
	.portbdataout(wire_lutrama_11portbdataout[0:0])
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.portabyteenamasks({2{1'b1}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		lutrama_11.address_width = 6,
		lutrama_11.data_width = 1,
		lutrama_11.first_address = 64,
		lutrama_11.first_bit_number = 3,
		lutrama_11.last_address = 127,
		lutrama_11.logical_ram_depth = 256,
		lutrama_11.logical_ram_name = "altdpram_instance",
		lutrama_11.logical_ram_width = 8,
		lutrama_11.mixed_port_feed_through_mode = "dont_care",
		lutrama_11.lpm_type = "stratixiv_mlab_cell";
	stratixiv_mlab_cell   lutrama_12
	( 
	.clk0(clock0),
	.ena0(wire_wr_decode_eq[1]),
	.portaaddr(wraddr_wire[5:0]),
	.portadatain(datain_wire[4]),
	.portbaddr(rdaddr_wire[5:0]),
	.portbdataout(wire_lutrama_12portbdataout[0:0])
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.portabyteenamasks({2{1'b1}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		lutrama_12.address_width = 6,
		lutrama_12.data_width = 1,
		lutrama_12.first_address = 64,
		lutrama_12.first_bit_number = 4,
		lutrama_12.last_address = 127,
		lutrama_12.logical_ram_depth = 256,
		lutrama_12.logical_ram_name = "altdpram_instance",
		lutrama_12.logical_ram_width = 8,
		lutrama_12.mixed_port_feed_through_mode = "dont_care",
		lutrama_12.lpm_type = "stratixiv_mlab_cell";
	stratixiv_mlab_cell   lutrama_13
	( 
	.clk0(clock0),
	.ena0(wire_wr_decode_eq[1]),
	.portaaddr(wraddr_wire[5:0]),
	.portadatain(datain_wire[5]),
	.portbaddr(rdaddr_wire[5:0]),
	.portbdataout(wire_lutrama_13portbdataout[0:0])
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.portabyteenamasks({2{1'b1}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		lutrama_13.address_width = 6,
		lutrama_13.data_width = 1,
		lutrama_13.first_address = 64,
		lutrama_13.first_bit_number = 5,
		lutrama_13.last_address = 127,
		lutrama_13.logical_ram_depth = 256,
		lutrama_13.logical_ram_name = "altdpram_instance",
		lutrama_13.logical_ram_width = 8,
		lutrama_13.mixed_port_feed_through_mode = "dont_care",
		lutrama_13.lpm_type = "stratixiv_mlab_cell";
	stratixiv_mlab_cell   lutrama_14
	( 
	.clk0(clock0),
	.ena0(wire_wr_decode_eq[1]),
	.portaaddr(wraddr_wire[5:0]),
	.portadatain(datain_wire[6]),
	.portbaddr(rdaddr_wire[5:0]),
	.portbdataout(wire_lutrama_14portbdataout[0:0])
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.portabyteenamasks({2{1'b1}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		lutrama_14.address_width = 6,
		lutrama_14.data_width = 1,
		lutrama_14.first_address = 64,
		lutrama_14.first_bit_number = 6,
		lutrama_14.last_address = 127,
		lutrama_14.logical_ram_depth = 256,
		lutrama_14.logical_ram_name = "altdpram_instance",
		lutrama_14.logical_ram_width = 8,
		lutrama_14.mixed_port_feed_through_mode = "dont_care",
		lutrama_14.lpm_type = "stratixiv_mlab_cell";
	stratixiv_mlab_cell   lutrama_15
	( 
	.clk0(clock0),
	.ena0(wire_wr_decode_eq[1]),
	.portaaddr(wraddr_wire[5:0]),
	.portadatain(datain_wire[7]),
	.portbaddr(rdaddr_wire[5:0]),
	.portbdataout(wire_lutrama_15portbdataout[0:0])
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.portabyteenamasks({2{1'b1}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		lutrama_15.address_width = 6,
		lutrama_15.data_width = 1,
		lutrama_15.first_address = 64,
		lutrama_15.first_bit_number = 7,
		lutrama_15.last_address = 127,
		lutrama_15.logical_ram_depth = 256,
		lutrama_15.logical_ram_name = "altdpram_instance",
		lutrama_15.logical_ram_width = 8,
		lutrama_15.mixed_port_feed_through_mode = "dont_care",
		lutrama_15.lpm_type = "stratixiv_mlab_cell";
	stratixiv_mlab_cell   lutrama_16
	( 
	.clk0(clock0),
	.ena0(wire_wr_decode_eq[2]),
	.portaaddr(wraddr_wire[5:0]),
	.portadatain(datain_wire[0]),
	.portbaddr(rdaddr_wire[5:0]),
	.portbdataout(wire_lutrama_16portbdataout[0:0])
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.portabyteenamasks({2{1'b1}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		lutrama_16.address_width = 6,
		lutrama_16.data_width = 1,
		lutrama_16.first_address = 128,
		lutrama_16.first_bit_number = 0,
		lutrama_16.last_address = 191,
		lutrama_16.logical_ram_depth = 256,
		lutrama_16.logical_ram_name = "altdpram_instance",
		lutrama_16.logical_ram_width = 8,
		lutrama_16.mixed_port_feed_through_mode = "dont_care",
		lutrama_16.lpm_type = "stratixiv_mlab_cell";
	stratixiv_mlab_cell   lutrama_17
	( 
	.clk0(clock0),
	.ena0(wire_wr_decode_eq[2]),
	.portaaddr(wraddr_wire[5:0]),
	.portadatain(datain_wire[1]),
	.portbaddr(rdaddr_wire[5:0]),
	.portbdataout(wire_lutrama_17portbdataout[0:0])
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.portabyteenamasks({2{1'b1}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		lutrama_17.address_width = 6,
		lutrama_17.data_width = 1,
		lutrama_17.first_address = 128,
		lutrama_17.first_bit_number = 1,
		lutrama_17.last_address = 191,
		lutrama_17.logical_ram_depth = 256,
		lutrama_17.logical_ram_name = "altdpram_instance",
		lutrama_17.logical_ram_width = 8,
		lutrama_17.mixed_port_feed_through_mode = "dont_care",
		lutrama_17.lpm_type = "stratixiv_mlab_cell";
	stratixiv_mlab_cell   lutrama_18
	( 
	.clk0(clock0),
	.ena0(wire_wr_decode_eq[2]),
	.portaaddr(wraddr_wire[5:0]),
	.portadatain(datain_wire[2]),
	.portbaddr(rdaddr_wire[5:0]),
	.portbdataout(wire_lutrama_18portbdataout[0:0])
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.portabyteenamasks({2{1'b1}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		lutrama_18.address_width = 6,
		lutrama_18.data_width = 1,
		lutrama_18.first_address = 128,
		lutrama_18.first_bit_number = 2,
		lutrama_18.last_address = 191,
		lutrama_18.logical_ram_depth = 256,
		lutrama_18.logical_ram_name = "altdpram_instance",
		lutrama_18.logical_ram_width = 8,
		lutrama_18.mixed_port_feed_through_mode = "dont_care",
		lutrama_18.lpm_type = "stratixiv_mlab_cell";
	stratixiv_mlab_cell   lutrama_19
	( 
	.clk0(clock0),
	.ena0(wire_wr_decode_eq[2]),
	.portaaddr(wraddr_wire[5:0]),
	.portadatain(datain_wire[3]),
	.portbaddr(rdaddr_wire[5:0]),
	.portbdataout(wire_lutrama_19portbdataout[0:0])
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.portabyteenamasks({2{1'b1}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		lutrama_19.address_width = 6,
		lutrama_19.data_width = 1,
		lutrama_19.first_address = 128,
		lutrama_19.first_bit_number = 3,
		lutrama_19.last_address = 191,
		lutrama_19.logical_ram_depth = 256,
		lutrama_19.logical_ram_name = "altdpram_instance",
		lutrama_19.logical_ram_width = 8,
		lutrama_19.mixed_port_feed_through_mode = "dont_care",
		lutrama_19.lpm_type = "stratixiv_mlab_cell";
	stratixiv_mlab_cell   lutrama_20
	( 
	.clk0(clock0),
	.ena0(wire_wr_decode_eq[2]),
	.portaaddr(wraddr_wire[5:0]),
	.portadatain(datain_wire[4]),
	.portbaddr(rdaddr_wire[5:0]),
	.portbdataout(wire_lutrama_20portbdataout[0:0])
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.portabyteenamasks({2{1'b1}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		lutrama_20.address_width = 6,
		lutrama_20.data_width = 1,
		lutrama_20.first_address = 128,
		lutrama_20.first_bit_number = 4,
		lutrama_20.last_address = 191,
		lutrama_20.logical_ram_depth = 256,
		lutrama_20.logical_ram_name = "altdpram_instance",
		lutrama_20.logical_ram_width = 8,
		lutrama_20.mixed_port_feed_through_mode = "dont_care",
		lutrama_20.lpm_type = "stratixiv_mlab_cell";
	stratixiv_mlab_cell   lutrama_21
	( 
	.clk0(clock0),
	.ena0(wire_wr_decode_eq[2]),
	.portaaddr(wraddr_wire[5:0]),
	.portadatain(datain_wire[5]),
	.portbaddr(rdaddr_wire[5:0]),
	.portbdataout(wire_lutrama_21portbdataout[0:0])
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.portabyteenamasks({2{1'b1}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		lutrama_21.address_width = 6,
		lutrama_21.data_width = 1,
		lutrama_21.first_address = 128,
		lutrama_21.first_bit_number = 5,
		lutrama_21.last_address = 191,
		lutrama_21.logical_ram_depth = 256,
		lutrama_21.logical_ram_name = "altdpram_instance",
		lutrama_21.logical_ram_width = 8,
		lutrama_21.mixed_port_feed_through_mode = "dont_care",
		lutrama_21.lpm_type = "stratixiv_mlab_cell";
	stratixiv_mlab_cell   lutrama_22
	( 
	.clk0(clock0),
	.ena0(wire_wr_decode_eq[2]),
	.portaaddr(wraddr_wire[5:0]),
	.portadatain(datain_wire[6]),
	.portbaddr(rdaddr_wire[5:0]),
	.portbdataout(wire_lutrama_22portbdataout[0:0])
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.portabyteenamasks({2{1'b1}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		lutrama_22.address_width = 6,
		lutrama_22.data_width = 1,
		lutrama_22.first_address = 128,
		lutrama_22.first_bit_number = 6,
		lutrama_22.last_address = 191,
		lutrama_22.logical_ram_depth = 256,
		lutrama_22.logical_ram_name = "altdpram_instance",
		lutrama_22.logical_ram_width = 8,
		lutrama_22.mixed_port_feed_through_mode = "dont_care",
		lutrama_22.lpm_type = "stratixiv_mlab_cell";
	stratixiv_mlab_cell   lutrama_23
	( 
	.clk0(clock0),
	.ena0(wire_wr_decode_eq[2]),
	.portaaddr(wraddr_wire[5:0]),
	.portadatain(datain_wire[7]),
	.portbaddr(rdaddr_wire[5:0]),
	.portbdataout(wire_lutrama_23portbdataout[0:0])
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.portabyteenamasks({2{1'b1}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		lutrama_23.address_width = 6,
		lutrama_23.data_width = 1,
		lutrama_23.first_address = 128,
		lutrama_23.first_bit_number = 7,
		lutrama_23.last_address = 191,
		lutrama_23.logical_ram_depth = 256,
		lutrama_23.logical_ram_name = "altdpram_instance",
		lutrama_23.logical_ram_width = 8,
		lutrama_23.mixed_port_feed_through_mode = "dont_care",
		lutrama_23.lpm_type = "stratixiv_mlab_cell";
	stratixiv_mlab_cell   lutrama_24
	( 
	.clk0(clock0),
	.ena0(wire_wr_decode_eq[3]),
	.portaaddr(wraddr_wire[5:0]),
	.portadatain(datain_wire[0]),
	.portbaddr(rdaddr_wire[5:0]),
	.portbdataout(wire_lutrama_24portbdataout[0:0])
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.portabyteenamasks({2{1'b1}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		lutrama_24.address_width = 6,
		lutrama_24.data_width = 1,
		lutrama_24.first_address = 192,
		lutrama_24.first_bit_number = 0,
		lutrama_24.last_address = 255,
		lutrama_24.logical_ram_depth = 256,
		lutrama_24.logical_ram_name = "altdpram_instance",
		lutrama_24.logical_ram_width = 8,
		lutrama_24.mixed_port_feed_through_mode = "dont_care",
		lutrama_24.lpm_type = "stratixiv_mlab_cell";
	stratixiv_mlab_cell   lutrama_25
	( 
	.clk0(clock0),
	.ena0(wire_wr_decode_eq[3]),
	.portaaddr(wraddr_wire[5:0]),
	.portadatain(datain_wire[1]),
	.portbaddr(rdaddr_wire[5:0]),
	.portbdataout(wire_lutrama_25portbdataout[0:0])
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.portabyteenamasks({2{1'b1}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		lutrama_25.address_width = 6,
		lutrama_25.data_width = 1,
		lutrama_25.first_address = 192,
		lutrama_25.first_bit_number = 1,
		lutrama_25.last_address = 255,
		lutrama_25.logical_ram_depth = 256,
		lutrama_25.logical_ram_name = "altdpram_instance",
		lutrama_25.logical_ram_width = 8,
		lutrama_25.mixed_port_feed_through_mode = "dont_care",
		lutrama_25.lpm_type = "stratixiv_mlab_cell";
	stratixiv_mlab_cell   lutrama_26
	( 
	.clk0(clock0),
	.ena0(wire_wr_decode_eq[3]),
	.portaaddr(wraddr_wire[5:0]),
	.portadatain(datain_wire[2]),
	.portbaddr(rdaddr_wire[5:0]),
	.portbdataout(wire_lutrama_26portbdataout[0:0])
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.portabyteenamasks({2{1'b1}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		lutrama_26.address_width = 6,
		lutrama_26.data_width = 1,
		lutrama_26.first_address = 192,
		lutrama_26.first_bit_number = 2,
		lutrama_26.last_address = 255,
		lutrama_26.logical_ram_depth = 256,
		lutrama_26.logical_ram_name = "altdpram_instance",
		lutrama_26.logical_ram_width = 8,
		lutrama_26.mixed_port_feed_through_mode = "dont_care",
		lutrama_26.lpm_type = "stratixiv_mlab_cell";
	stratixiv_mlab_cell   lutrama_27
	( 
	.clk0(clock0),
	.ena0(wire_wr_decode_eq[3]),
	.portaaddr(wraddr_wire[5:0]),
	.portadatain(datain_wire[3]),
	.portbaddr(rdaddr_wire[5:0]),
	.portbdataout(wire_lutrama_27portbdataout[0:0])
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.portabyteenamasks({2{1'b1}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		lutrama_27.address_width = 6,
		lutrama_27.data_width = 1,
		lutrama_27.first_address = 192,
		lutrama_27.first_bit_number = 3,
		lutrama_27.last_address = 255,
		lutrama_27.logical_ram_depth = 256,
		lutrama_27.logical_ram_name = "altdpram_instance",
		lutrama_27.logical_ram_width = 8,
		lutrama_27.mixed_port_feed_through_mode = "dont_care",
		lutrama_27.lpm_type = "stratixiv_mlab_cell";
	stratixiv_mlab_cell   lutrama_28
	( 
	.clk0(clock0),
	.ena0(wire_wr_decode_eq[3]),
	.portaaddr(wraddr_wire[5:0]),
	.portadatain(datain_wire[4]),
	.portbaddr(rdaddr_wire[5:0]),
	.portbdataout(wire_lutrama_28portbdataout[0:0])
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.portabyteenamasks({2{1'b1}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		lutrama_28.address_width = 6,
		lutrama_28.data_width = 1,
		lutrama_28.first_address = 192,
		lutrama_28.first_bit_number = 4,
		lutrama_28.last_address = 255,
		lutrama_28.logical_ram_depth = 256,
		lutrama_28.logical_ram_name = "altdpram_instance",
		lutrama_28.logical_ram_width = 8,
		lutrama_28.mixed_port_feed_through_mode = "dont_care",
		lutrama_28.lpm_type = "stratixiv_mlab_cell";
	stratixiv_mlab_cell   lutrama_29
	( 
	.clk0(clock0),
	.ena0(wire_wr_decode_eq[3]),
	.portaaddr(wraddr_wire[5:0]),
	.portadatain(datain_wire[5]),
	.portbaddr(rdaddr_wire[5:0]),
	.portbdataout(wire_lutrama_29portbdataout[0:0])
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.portabyteenamasks({2{1'b1}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		lutrama_29.address_width = 6,
		lutrama_29.data_width = 1,
		lutrama_29.first_address = 192,
		lutrama_29.first_bit_number = 5,
		lutrama_29.last_address = 255,
		lutrama_29.logical_ram_depth = 256,
		lutrama_29.logical_ram_name = "altdpram_instance",
		lutrama_29.logical_ram_width = 8,
		lutrama_29.mixed_port_feed_through_mode = "dont_care",
		lutrama_29.lpm_type = "stratixiv_mlab_cell";
	stratixiv_mlab_cell   lutrama_30
	( 
	.clk0(clock0),
	.ena0(wire_wr_decode_eq[3]),
	.portaaddr(wraddr_wire[5:0]),
	.portadatain(datain_wire[6]),
	.portbaddr(rdaddr_wire[5:0]),
	.portbdataout(wire_lutrama_30portbdataout[0:0])
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.portabyteenamasks({2{1'b1}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		lutrama_30.address_width = 6,
		lutrama_30.data_width = 1,
		lutrama_30.first_address = 192,
		lutrama_30.first_bit_number = 6,
		lutrama_30.last_address = 255,
		lutrama_30.logical_ram_depth = 256,
		lutrama_30.logical_ram_name = "altdpram_instance",
		lutrama_30.logical_ram_width = 8,
		lutrama_30.mixed_port_feed_through_mode = "dont_care",
		lutrama_30.lpm_type = "stratixiv_mlab_cell";
	stratixiv_mlab_cell   lutrama_31
	( 
	.clk0(clock0),
	.ena0(wire_wr_decode_eq[3]),
	.portaaddr(wraddr_wire[5:0]),
	.portadatain(datain_wire[7]),
	.portbaddr(rdaddr_wire[5:0]),
	.portbdataout(wire_lutrama_31portbdataout[0:0])
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.portabyteenamasks({2{1'b1}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		lutrama_31.address_width = 6,
		lutrama_31.data_width = 1,
		lutrama_31.first_address = 192,
		lutrama_31.first_bit_number = 7,
		lutrama_31.last_address = 255,
		lutrama_31.logical_ram_depth = 256,
		lutrama_31.logical_ram_name = "altdpram_instance",
		lutrama_31.logical_ram_width = 8,
		lutrama_31.mixed_port_feed_through_mode = "dont_care",
		lutrama_31.lpm_type = "stratixiv_mlab_cell";
	assign
		datain_wire = datain_reg,
		dataout_wire = wire_rd_mux_result,
		q_b = dataout_wire,
		rdaddr_wire = rdaddr_reg,
		wr_en = wren_a,
		wraddr_wire = wraddr_reg;
endmodule //masking_machine_sc_fifo_altsyncram


//lpm_counter DEVICE_FAMILY="Stratix IV" lpm_direction="UP" lpm_port_updown="PORT_UNUSED" lpm_width=8 aclr clock cnt_en q sclr
//VERSION_BEGIN 16.1 cbx_cycloneii 2016:10:24:15:04:16:SJ cbx_lpm_add_sub 2016:10:24:15:04:16:SJ cbx_lpm_compare 2016:10:24:15:04:16:SJ cbx_lpm_counter 2016:10:24:15:04:16:SJ cbx_lpm_decode 2016:10:24:15:04:16:SJ cbx_mgl 2016:10:24:15:05:03:SJ cbx_nadder 2016:10:24:15:04:16:SJ cbx_stratix 2016:10:24:15:04:16:SJ cbx_stratixii 2016:10:24:15:04:16:SJ  VERSION_END

//synthesis_resources = lut 8 reg 8 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  masking_machine_sc_fifo_cntr1
	( 
	aclr,
	clock,
	cnt_en,
	q,
	sclr) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clock;
	input   cnt_en;
	output   [7:0]  q;
	input   sclr;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   cnt_en;
	tri0   sclr;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire	[7:0]	wire_counter_reg_bit_d;
	wire	[7:0]	wire_counter_reg_bit_asdata;
	reg	[7:0]	counter_reg_bit;
	wire	[7:0]	wire_counter_reg_bit_ena;
	wire	[7:0]	wire_counter_reg_bit_sload;
	wire  [0:0]   wire_counter_comb_bita_0cout;
	wire  [0:0]   wire_counter_comb_bita_1cout;
	wire  [0:0]   wire_counter_comb_bita_2cout;
	wire  [0:0]   wire_counter_comb_bita_3cout;
	wire  [0:0]   wire_counter_comb_bita_4cout;
	wire  [0:0]   wire_counter_comb_bita_5cout;
	wire  [0:0]   wire_counter_comb_bita_6cout;
	wire  [0:0]   wire_counter_comb_bita_0sumout;
	wire  [0:0]   wire_counter_comb_bita_1sumout;
	wire  [0:0]   wire_counter_comb_bita_2sumout;
	wire  [0:0]   wire_counter_comb_bita_3sumout;
	wire  [0:0]   wire_counter_comb_bita_4sumout;
	wire  [0:0]   wire_counter_comb_bita_5sumout;
	wire  [0:0]   wire_counter_comb_bita_6sumout;
	wire  [0:0]   wire_counter_comb_bita_7sumout;
	wire  aclr_actual;
	wire clk_en;
	wire [7:0]  data;
	wire  external_cin;
	wire  lsb_cin;
	wire  [7:0]  s_val;
	wire  [7:0]  safe_q;
	wire sload;
	wire sset;
	wire  updown_dir;
	wire  updown_lsb;
	wire  updown_other_bits;

	// synopsys translate_off
	initial
		counter_reg_bit[0:0] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[0:0] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[0:0] == 1'b1) 
			if (sclr == 1'b1) counter_reg_bit[0:0] <= 1'b0;
			else if (wire_counter_reg_bit_sload[0:0] == 1'b1) counter_reg_bit[0:0] <= wire_counter_reg_bit_asdata[0:0];
			else  counter_reg_bit[0:0] <= wire_counter_reg_bit_d[0:0];
	// synopsys translate_off
	initial
		counter_reg_bit[1:1] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[1:1] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[1:1] == 1'b1) 
			if (sclr == 1'b1) counter_reg_bit[1:1] <= 1'b0;
			else if (wire_counter_reg_bit_sload[1:1] == 1'b1) counter_reg_bit[1:1] <= wire_counter_reg_bit_asdata[1:1];
			else  counter_reg_bit[1:1] <= wire_counter_reg_bit_d[1:1];
	// synopsys translate_off
	initial
		counter_reg_bit[2:2] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[2:2] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[2:2] == 1'b1) 
			if (sclr == 1'b1) counter_reg_bit[2:2] <= 1'b0;
			else if (wire_counter_reg_bit_sload[2:2] == 1'b1) counter_reg_bit[2:2] <= wire_counter_reg_bit_asdata[2:2];
			else  counter_reg_bit[2:2] <= wire_counter_reg_bit_d[2:2];
	// synopsys translate_off
	initial
		counter_reg_bit[3:3] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[3:3] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[3:3] == 1'b1) 
			if (sclr == 1'b1) counter_reg_bit[3:3] <= 1'b0;
			else if (wire_counter_reg_bit_sload[3:3] == 1'b1) counter_reg_bit[3:3] <= wire_counter_reg_bit_asdata[3:3];
			else  counter_reg_bit[3:3] <= wire_counter_reg_bit_d[3:3];
	// synopsys translate_off
	initial
		counter_reg_bit[4:4] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[4:4] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[4:4] == 1'b1) 
			if (sclr == 1'b1) counter_reg_bit[4:4] <= 1'b0;
			else if (wire_counter_reg_bit_sload[4:4] == 1'b1) counter_reg_bit[4:4] <= wire_counter_reg_bit_asdata[4:4];
			else  counter_reg_bit[4:4] <= wire_counter_reg_bit_d[4:4];
	// synopsys translate_off
	initial
		counter_reg_bit[5:5] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[5:5] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[5:5] == 1'b1) 
			if (sclr == 1'b1) counter_reg_bit[5:5] <= 1'b0;
			else if (wire_counter_reg_bit_sload[5:5] == 1'b1) counter_reg_bit[5:5] <= wire_counter_reg_bit_asdata[5:5];
			else  counter_reg_bit[5:5] <= wire_counter_reg_bit_d[5:5];
	// synopsys translate_off
	initial
		counter_reg_bit[6:6] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[6:6] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[6:6] == 1'b1) 
			if (sclr == 1'b1) counter_reg_bit[6:6] <= 1'b0;
			else if (wire_counter_reg_bit_sload[6:6] == 1'b1) counter_reg_bit[6:6] <= wire_counter_reg_bit_asdata[6:6];
			else  counter_reg_bit[6:6] <= wire_counter_reg_bit_d[6:6];
	// synopsys translate_off
	initial
		counter_reg_bit[7:7] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[7:7] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[7:7] == 1'b1) 
			if (sclr == 1'b1) counter_reg_bit[7:7] <= 1'b0;
			else if (wire_counter_reg_bit_sload[7:7] == 1'b1) counter_reg_bit[7:7] <= wire_counter_reg_bit_asdata[7:7];
			else  counter_reg_bit[7:7] <= wire_counter_reg_bit_d[7:7];
	assign
		wire_counter_reg_bit_asdata = (({8{sset}} & s_val) | ({8{(~ sset)}} & data)),
		wire_counter_reg_bit_d = {wire_counter_comb_bita_7sumout[0:0], wire_counter_comb_bita_6sumout[0:0], wire_counter_comb_bita_5sumout[0:0], wire_counter_comb_bita_4sumout[0:0], wire_counter_comb_bita_3sumout[0:0], wire_counter_comb_bita_2sumout[0:0], wire_counter_comb_bita_1sumout[0:0], wire_counter_comb_bita_0sumout[0:0]};
	assign
		wire_counter_reg_bit_ena = {8{(clk_en & (((cnt_en | sclr) | sset) | sload))}},
		wire_counter_reg_bit_sload = {8{(sset | sload)}};
	stratixiv_lcell_comb   counter_comb_bita_0
	( 
	.cin(lsb_cin),
	.combout(),
	.cout(wire_counter_comb_bita_0cout[0:0]),
	.datad(counter_reg_bit[0]),
	.dataf(updown_lsb),
	.shareout(),
	.sumout(wire_counter_comb_bita_0sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		counter_comb_bita_0.extended_lut = "off",
		counter_comb_bita_0.lut_mask = 64'h000000000000FF00,
		counter_comb_bita_0.shared_arith = "off",
		counter_comb_bita_0.lpm_type = "stratixiv_lcell_comb";
	stratixiv_lcell_comb   counter_comb_bita_1
	( 
	.cin(wire_counter_comb_bita_0cout[0:0]),
	.combout(),
	.cout(wire_counter_comb_bita_1cout[0:0]),
	.datad(counter_reg_bit[1]),
	.dataf(updown_other_bits),
	.shareout(),
	.sumout(wire_counter_comb_bita_1sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		counter_comb_bita_1.extended_lut = "off",
		counter_comb_bita_1.lut_mask = 64'h0000FF000000FF00,
		counter_comb_bita_1.shared_arith = "off",
		counter_comb_bita_1.lpm_type = "stratixiv_lcell_comb";
	stratixiv_lcell_comb   counter_comb_bita_2
	( 
	.cin(wire_counter_comb_bita_1cout[0:0]),
	.combout(),
	.cout(wire_counter_comb_bita_2cout[0:0]),
	.datad(counter_reg_bit[2]),
	.dataf(updown_other_bits),
	.shareout(),
	.sumout(wire_counter_comb_bita_2sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		counter_comb_bita_2.extended_lut = "off",
		counter_comb_bita_2.lut_mask = 64'h0000FF000000FF00,
		counter_comb_bita_2.shared_arith = "off",
		counter_comb_bita_2.lpm_type = "stratixiv_lcell_comb";
	stratixiv_lcell_comb   counter_comb_bita_3
	( 
	.cin(wire_counter_comb_bita_2cout[0:0]),
	.combout(),
	.cout(wire_counter_comb_bita_3cout[0:0]),
	.datad(counter_reg_bit[3]),
	.dataf(updown_other_bits),
	.shareout(),
	.sumout(wire_counter_comb_bita_3sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		counter_comb_bita_3.extended_lut = "off",
		counter_comb_bita_3.lut_mask = 64'h0000FF000000FF00,
		counter_comb_bita_3.shared_arith = "off",
		counter_comb_bita_3.lpm_type = "stratixiv_lcell_comb";
	stratixiv_lcell_comb   counter_comb_bita_4
	( 
	.cin(wire_counter_comb_bita_3cout[0:0]),
	.combout(),
	.cout(wire_counter_comb_bita_4cout[0:0]),
	.datad(counter_reg_bit[4]),
	.dataf(updown_other_bits),
	.shareout(),
	.sumout(wire_counter_comb_bita_4sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		counter_comb_bita_4.extended_lut = "off",
		counter_comb_bita_4.lut_mask = 64'h0000FF000000FF00,
		counter_comb_bita_4.shared_arith = "off",
		counter_comb_bita_4.lpm_type = "stratixiv_lcell_comb";
	stratixiv_lcell_comb   counter_comb_bita_5
	( 
	.cin(wire_counter_comb_bita_4cout[0:0]),
	.combout(),
	.cout(wire_counter_comb_bita_5cout[0:0]),
	.datad(counter_reg_bit[5]),
	.dataf(updown_other_bits),
	.shareout(),
	.sumout(wire_counter_comb_bita_5sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		counter_comb_bita_5.extended_lut = "off",
		counter_comb_bita_5.lut_mask = 64'h0000FF000000FF00,
		counter_comb_bita_5.shared_arith = "off",
		counter_comb_bita_5.lpm_type = "stratixiv_lcell_comb";
	stratixiv_lcell_comb   counter_comb_bita_6
	( 
	.cin(wire_counter_comb_bita_5cout[0:0]),
	.combout(),
	.cout(wire_counter_comb_bita_6cout[0:0]),
	.datad(counter_reg_bit[6]),
	.dataf(updown_other_bits),
	.shareout(),
	.sumout(wire_counter_comb_bita_6sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		counter_comb_bita_6.extended_lut = "off",
		counter_comb_bita_6.lut_mask = 64'h0000FF000000FF00,
		counter_comb_bita_6.shared_arith = "off",
		counter_comb_bita_6.lpm_type = "stratixiv_lcell_comb";
	stratixiv_lcell_comb   counter_comb_bita_7
	( 
	.cin(wire_counter_comb_bita_6cout[0:0]),
	.combout(),
	.cout(),
	.datad(counter_reg_bit[7]),
	.dataf(updown_other_bits),
	.shareout(),
	.sumout(wire_counter_comb_bita_7sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datac(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		counter_comb_bita_7.extended_lut = "off",
		counter_comb_bita_7.lut_mask = 64'h0000FF000000FF00,
		counter_comb_bita_7.shared_arith = "off",
		counter_comb_bita_7.lpm_type = "stratixiv_lcell_comb";
	assign
		aclr_actual = aclr,
		clk_en = 1'b1,
		data = {8{1'b0}},
		external_cin = 1'b1,
		lsb_cin = 1'b0,
		q = safe_q,
		s_val = {8{1'b1}},
		safe_q = counter_reg_bit,
		sload = 1'b0,
		sset = 1'b0,
		updown_dir = 1'b1,
		updown_lsb = updown_dir,
		updown_other_bits = ((~ external_cin) | updown_dir);
endmodule //masking_machine_sc_fifo_cntr1

//synthesis_resources = lut 36 MLAB 4 reg 50 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  masking_machine_sc_fifo_a_dpfifo
	( 
	aclr,
	clock,
	data,
	empty,
	full,
	q,
	rreq,
	sclr,
	usedw,
	wreq) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clock;
	input   [7:0]  data;
	output   empty;
	output   full;
	output   [7:0]  q;
	input   rreq;
	input   sclr;
	output   [7:0]  usedw;
	input   wreq;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri0   sclr;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  wire_fifo_state_empty;
	wire  wire_fifo_state_full;
	wire  [7:0]   wire_fifo_state_usedw_out;
	wire  [7:0]   wire_FIFOram_q_b;
	wire  [7:0]   wire_rd_ptr_count_q;
	wire  [7:0]   wire_wr_ptr_q;
	wire  [7:0]  rd_ptr;
	wire  valid_rreq;
	wire  valid_wreq;

	masking_machine_sc_fifo_a_fefifo   fifo_state
	( 
	.aclr(aclr),
	.clock(clock),
	.empty(wire_fifo_state_empty),
	.full(wire_fifo_state_full),
	.rreq(rreq),
	.sclr(sclr),
	.usedw_out(wire_fifo_state_usedw_out),
	.wreq(wreq));
	masking_machine_sc_fifo_altsyncram   FIFOram
	( 
	.address_a(wire_wr_ptr_q),
	.address_b(({8{(~ sclr)}} & rd_ptr)),
	.clock0(clock),
	.clock1(clock),
	.clocken1((valid_rreq | sclr)),
	.data_a(data),
	.q_b(wire_FIFOram_q_b),
	.wren_a(valid_wreq));
	masking_machine_sc_fifo_cntr1   rd_ptr_count
	( 
	.aclr(aclr),
	.clock(clock),
	.cnt_en(valid_rreq),
	.q(wire_rd_ptr_count_q),
	.sclr(sclr));
	masking_machine_sc_fifo_cntr1   wr_ptr
	( 
	.aclr(aclr),
	.clock(clock),
	.cnt_en(valid_wreq),
	.q(wire_wr_ptr_q),
	.sclr(sclr));
	assign
		empty = wire_fifo_state_empty,
		full = wire_fifo_state_full,
		q = wire_FIFOram_q_b,
		rd_ptr = wire_rd_ptr_count_q,
		usedw = wire_fifo_state_usedw_out,
		valid_rreq = (rreq & (~ wire_fifo_state_empty)),
		valid_wreq = (wreq & (~ wire_fifo_state_full));
endmodule //masking_machine_sc_fifo_a_dpfifo

//synthesis_resources = lut 36 MLAB 4 reg 50 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  masking_machine_sc_fifo_scfifo
	( 
	aclr,
	clock,
	data,
	empty,
	full,
	q,
	rdreq,
	sclr,
	usedw,
	wrreq) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clock;
	input   [7:0]  data;
	output   empty;
	output   full;
	output   [7:0]  q;
	input   rdreq;
	input   sclr;
	output   [7:0]  usedw;
	input   wrreq;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri0   sclr;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  wire_dpfifo_empty;
	wire  wire_dpfifo_full;
	wire  [7:0]   wire_dpfifo_q;
	wire  [7:0]   wire_dpfifo_usedw;

	masking_machine_sc_fifo_a_dpfifo   dpfifo
	( 
	.aclr(aclr),
	.clock(clock),
	.data(data),
	.empty(wire_dpfifo_empty),
	.full(wire_dpfifo_full),
	.q(wire_dpfifo_q),
	.rreq(rdreq),
	.sclr(sclr),
	.usedw(wire_dpfifo_usedw),
	.wreq(wrreq));
	assign
		empty = wire_dpfifo_empty,
		full = wire_dpfifo_full,
		q = wire_dpfifo_q,
		usedw = wire_dpfifo_usedw;
endmodule //masking_machine_sc_fifo_scfifo
//VALID FILE


// synopsys translate_off
`timescale 1 ps / 1 ps
// synopsys translate_on
module masking_machine_sc_fifo (
	aclr,
	clock,
	data,
	rdreq,
	sclr,
	wrreq,
	empty,
	full,
	q,
	usedw)/* synthesis synthesis_clearbox = 1 */;

	input	  aclr;
	input	  clock;
	input	[7:0]  data;
	input	  rdreq;
	input	  sclr;
	input	  wrreq;
	output	  empty;
	output	  full;
	output	[7:0]  q;
	output	[7:0]  usedw;

	wire  sub_wire0;
	wire  sub_wire1;
	wire [7:0] sub_wire2;
	wire [7:0] sub_wire3;
	wire  empty = sub_wire0;
	wire  full = sub_wire1;
	wire [7:0] q = sub_wire2[7:0];
	wire [7:0] usedw = sub_wire3[7:0];

	masking_machine_sc_fifo_scfifo	masking_machine_sc_fifo_scfifo_component (
				.aclr (aclr),
				.clock (clock),
				.data (data),
				.rdreq (rdreq),
				.sclr (sclr),
				.wrreq (wrreq),
				.empty (sub_wire0),
				.full (sub_wire1),
				.q (sub_wire2),
				.usedw (sub_wire3));

endmodule

// ============================================================
// CNX file retrieval info
// ============================================================
// Retrieval info: PRIVATE: AlmostEmpty NUMERIC "0"
// Retrieval info: PRIVATE: AlmostEmptyThr NUMERIC "-1"
// Retrieval info: PRIVATE: AlmostFull NUMERIC "0"
// Retrieval info: PRIVATE: AlmostFullThr NUMERIC "-1"
// Retrieval info: PRIVATE: CLOCKS_ARE_SYNCHRONIZED NUMERIC "0"
// Retrieval info: PRIVATE: Clock NUMERIC "0"
// Retrieval info: PRIVATE: Depth NUMERIC "256"
// Retrieval info: PRIVATE: Empty NUMERIC "1"
// Retrieval info: PRIVATE: Full NUMERIC "1"
// Retrieval info: PRIVATE: INTENDED_DEVICE_FAMILY STRING "Stratix IV"
// Retrieval info: PRIVATE: LE_BasedFIFO NUMERIC "0"
// Retrieval info: PRIVATE: LegacyRREQ NUMERIC "1"
// Retrieval info: PRIVATE: MAX_DEPTH_BY_9 NUMERIC "0"
// Retrieval info: PRIVATE: OVERFLOW_CHECKING NUMERIC "0"
// Retrieval info: PRIVATE: Optimize NUMERIC "0"
// Retrieval info: PRIVATE: RAM_BLOCK_TYPE NUMERIC "1"
// Retrieval info: PRIVATE: SYNTH_WRAPPER_GEN_POSTFIX STRING "1"
// Retrieval info: PRIVATE: UNDERFLOW_CHECKING NUMERIC "0"
// Retrieval info: PRIVATE: UsedW NUMERIC "1"
// Retrieval info: PRIVATE: Width NUMERIC "8"
// Retrieval info: PRIVATE: dc_aclr NUMERIC "0"
// Retrieval info: PRIVATE: diff_widths NUMERIC "0"
// Retrieval info: PRIVATE: msb_usedw NUMERIC "0"
// Retrieval info: PRIVATE: output_width NUMERIC "8"
// Retrieval info: PRIVATE: rsEmpty NUMERIC "1"
// Retrieval info: PRIVATE: rsFull NUMERIC "0"
// Retrieval info: PRIVATE: rsUsedW NUMERIC "0"
// Retrieval info: PRIVATE: sc_aclr NUMERIC "1"
// Retrieval info: PRIVATE: sc_sclr NUMERIC "1"
// Retrieval info: PRIVATE: wsEmpty NUMERIC "0"
// Retrieval info: PRIVATE: wsFull NUMERIC "1"
// Retrieval info: PRIVATE: wsUsedW NUMERIC "0"
// Retrieval info: LIBRARY: altera_mf altera_mf.altera_mf_components.all
// Retrieval info: CONSTANT: ADD_RAM_OUTPUT_REGISTER STRING "OFF"
// Retrieval info: CONSTANT: INTENDED_DEVICE_FAMILY STRING "Stratix IV"
// Retrieval info: CONSTANT: LPM_HINT STRING "RAM_BLOCK_TYPE=MLAB"
// Retrieval info: CONSTANT: LPM_NUMWORDS NUMERIC "256"
// Retrieval info: CONSTANT: LPM_SHOWAHEAD STRING "OFF"
// Retrieval info: CONSTANT: LPM_TYPE STRING "scfifo"
// Retrieval info: CONSTANT: LPM_WIDTH NUMERIC "8"
// Retrieval info: CONSTANT: LPM_WIDTHU NUMERIC "8"
// Retrieval info: CONSTANT: OVERFLOW_CHECKING STRING "ON"
// Retrieval info: CONSTANT: UNDERFLOW_CHECKING STRING "ON"
// Retrieval info: CONSTANT: USE_EAB STRING "ON"
// Retrieval info: USED_PORT: aclr 0 0 0 0 INPUT NODEFVAL "aclr"
// Retrieval info: USED_PORT: clock 0 0 0 0 INPUT NODEFVAL "clock"
// Retrieval info: USED_PORT: data 0 0 8 0 INPUT NODEFVAL "data[7..0]"
// Retrieval info: USED_PORT: empty 0 0 0 0 OUTPUT NODEFVAL "empty"
// Retrieval info: USED_PORT: full 0 0 0 0 OUTPUT NODEFVAL "full"
// Retrieval info: USED_PORT: q 0 0 8 0 OUTPUT NODEFVAL "q[7..0]"
// Retrieval info: USED_PORT: rdreq 0 0 0 0 INPUT NODEFVAL "rdreq"
// Retrieval info: USED_PORT: sclr 0 0 0 0 INPUT NODEFVAL "sclr"
// Retrieval info: USED_PORT: usedw 0 0 8 0 OUTPUT NODEFVAL "usedw[7..0]"
// Retrieval info: USED_PORT: wrreq 0 0 0 0 INPUT NODEFVAL "wrreq"
// Retrieval info: CONNECT: @aclr 0 0 0 0 aclr 0 0 0 0
// Retrieval info: CONNECT: @clock 0 0 0 0 clock 0 0 0 0
// Retrieval info: CONNECT: @data 0 0 8 0 data 0 0 8 0
// Retrieval info: CONNECT: @rdreq 0 0 0 0 rdreq 0 0 0 0
// Retrieval info: CONNECT: @sclr 0 0 0 0 sclr 0 0 0 0
// Retrieval info: CONNECT: @wrreq 0 0 0 0 wrreq 0 0 0 0
// Retrieval info: CONNECT: empty 0 0 0 0 @empty 0 0 0 0
// Retrieval info: CONNECT: full 0 0 0 0 @full 0 0 0 0
// Retrieval info: CONNECT: q 0 0 8 0 @q 0 0 8 0
// Retrieval info: CONNECT: usedw 0 0 8 0 @usedw 0 0 8 0
// Retrieval info: GEN_FILE: TYPE_NORMAL masking_machine_sc_fifo.vhd TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL masking_machine_sc_fifo.inc TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL masking_machine_sc_fifo.cmp TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL masking_machine_sc_fifo.bsf TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL masking_machine_sc_fifo_inst.vhd TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL masking_machine_sc_fifo_syn.v TRUE
// Retrieval info: LIB_FILE: altera_mf
