// MebX_Qsys_Project_Burst_mm_interconnect_2.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 16.1 196

`timescale 1 ps / 1 ps
module MebX_Qsys_Project_Burst_mm_interconnect_2 (
		input  wire        clk_100_clk_clk,                                           //                                 clk_100_clk.clk
		input  wire        dma_DDR_M_reset_n_reset_bridge_in_reset_reset,             //     dma_DDR_M_reset_n_reset_bridge_in_reset.reset
		input  wire [63:0] dma_DDR_M_mm_read_address,                                 //                           dma_DDR_M_mm_read.address
		output wire        dma_DDR_M_mm_read_waitrequest,                             //                                            .waitrequest
		input  wire [4:0]  dma_DDR_M_mm_read_burstcount,                              //                                            .burstcount
		input  wire [7:0]  dma_DDR_M_mm_read_byteenable,                              //                                            .byteenable
		input  wire        dma_DDR_M_mm_read_read,                                    //                                            .read
		output wire [63:0] dma_DDR_M_mm_read_readdata,                                //                                            .readdata
		output wire        dma_DDR_M_mm_read_readdatavalid,                           //                                            .readdatavalid
		input  wire [63:0] dma_DDR_M_mm_write_address,                                //                          dma_DDR_M_mm_write.address
		output wire        dma_DDR_M_mm_write_waitrequest,                            //                                            .waitrequest
		input  wire [4:0]  dma_DDR_M_mm_write_burstcount,                             //                                            .burstcount
		input  wire [7:0]  dma_DDR_M_mm_write_byteenable,                             //                                            .byteenable
		input  wire        dma_DDR_M_mm_write_write,                                  //                                            .write
		input  wire [63:0] dma_DDR_M_mm_write_writedata,                              //                                            .writedata
		output wire [25:0] Communication_Module_A_avalon_mm_data_slave_address,       // Communication_Module_A_avalon_mm_data_slave.address
		output wire        Communication_Module_A_avalon_mm_data_slave_write,         //                                            .write
		output wire        Communication_Module_A_avalon_mm_data_slave_read,          //                                            .read
		input  wire [63:0] Communication_Module_A_avalon_mm_data_slave_readdata,      //                                            .readdata
		output wire [63:0] Communication_Module_A_avalon_mm_data_slave_writedata,     //                                            .writedata
		output wire [7:0]  Communication_Module_A_avalon_mm_data_slave_burstcount,    //                                            .burstcount
		output wire [7:0]  Communication_Module_A_avalon_mm_data_slave_byteenable,    //                                            .byteenable
		input  wire        Communication_Module_A_avalon_mm_data_slave_readdatavalid, //                                            .readdatavalid
		input  wire        Communication_Module_A_avalon_mm_data_slave_waitrequest,   //                                            .waitrequest
		output wire [25:0] Pattern_Generator_A_avalon_mm_data_slave_address,          //    Pattern_Generator_A_avalon_mm_data_slave.address
		output wire        Pattern_Generator_A_avalon_mm_data_slave_read,             //                                            .read
		input  wire [63:0] Pattern_Generator_A_avalon_mm_data_slave_readdata,         //                                            .readdata
		output wire [7:0]  Pattern_Generator_A_avalon_mm_data_slave_burstcount,       //                                            .burstcount
		output wire [7:0]  Pattern_Generator_A_avalon_mm_data_slave_byteenable,       //                                            .byteenable
		input  wire        Pattern_Generator_A_avalon_mm_data_slave_readdatavalid,    //                                            .readdatavalid
		input  wire        Pattern_Generator_A_avalon_mm_data_slave_waitrequest       //                                            .waitrequest
	);

	wire          dma_ddr_m_mm_read_translator_avalon_universal_master_0_waitrequest;           // dma_DDR_M_mm_read_agent:av_waitrequest -> dma_DDR_M_mm_read_translator:uav_waitrequest
	wire   [63:0] dma_ddr_m_mm_read_translator_avalon_universal_master_0_readdata;              // dma_DDR_M_mm_read_agent:av_readdata -> dma_DDR_M_mm_read_translator:uav_readdata
	wire          dma_ddr_m_mm_read_translator_avalon_universal_master_0_debugaccess;           // dma_DDR_M_mm_read_translator:uav_debugaccess -> dma_DDR_M_mm_read_agent:av_debugaccess
	wire   [63:0] dma_ddr_m_mm_read_translator_avalon_universal_master_0_address;               // dma_DDR_M_mm_read_translator:uav_address -> dma_DDR_M_mm_read_agent:av_address
	wire          dma_ddr_m_mm_read_translator_avalon_universal_master_0_read;                  // dma_DDR_M_mm_read_translator:uav_read -> dma_DDR_M_mm_read_agent:av_read
	wire    [7:0] dma_ddr_m_mm_read_translator_avalon_universal_master_0_byteenable;            // dma_DDR_M_mm_read_translator:uav_byteenable -> dma_DDR_M_mm_read_agent:av_byteenable
	wire          dma_ddr_m_mm_read_translator_avalon_universal_master_0_readdatavalid;         // dma_DDR_M_mm_read_agent:av_readdatavalid -> dma_DDR_M_mm_read_translator:uav_readdatavalid
	wire          dma_ddr_m_mm_read_translator_avalon_universal_master_0_lock;                  // dma_DDR_M_mm_read_translator:uav_lock -> dma_DDR_M_mm_read_agent:av_lock
	wire          dma_ddr_m_mm_read_translator_avalon_universal_master_0_write;                 // dma_DDR_M_mm_read_translator:uav_write -> dma_DDR_M_mm_read_agent:av_write
	wire   [63:0] dma_ddr_m_mm_read_translator_avalon_universal_master_0_writedata;             // dma_DDR_M_mm_read_translator:uav_writedata -> dma_DDR_M_mm_read_agent:av_writedata
	wire    [7:0] dma_ddr_m_mm_read_translator_avalon_universal_master_0_burstcount;            // dma_DDR_M_mm_read_translator:uav_burstcount -> dma_DDR_M_mm_read_agent:av_burstcount
	wire          dma_ddr_m_mm_write_translator_avalon_universal_master_0_waitrequest;          // dma_DDR_M_mm_write_agent:av_waitrequest -> dma_DDR_M_mm_write_translator:uav_waitrequest
	wire   [63:0] dma_ddr_m_mm_write_translator_avalon_universal_master_0_readdata;             // dma_DDR_M_mm_write_agent:av_readdata -> dma_DDR_M_mm_write_translator:uav_readdata
	wire          dma_ddr_m_mm_write_translator_avalon_universal_master_0_debugaccess;          // dma_DDR_M_mm_write_translator:uav_debugaccess -> dma_DDR_M_mm_write_agent:av_debugaccess
	wire   [63:0] dma_ddr_m_mm_write_translator_avalon_universal_master_0_address;              // dma_DDR_M_mm_write_translator:uav_address -> dma_DDR_M_mm_write_agent:av_address
	wire          dma_ddr_m_mm_write_translator_avalon_universal_master_0_read;                 // dma_DDR_M_mm_write_translator:uav_read -> dma_DDR_M_mm_write_agent:av_read
	wire    [7:0] dma_ddr_m_mm_write_translator_avalon_universal_master_0_byteenable;           // dma_DDR_M_mm_write_translator:uav_byteenable -> dma_DDR_M_mm_write_agent:av_byteenable
	wire          dma_ddr_m_mm_write_translator_avalon_universal_master_0_readdatavalid;        // dma_DDR_M_mm_write_agent:av_readdatavalid -> dma_DDR_M_mm_write_translator:uav_readdatavalid
	wire          dma_ddr_m_mm_write_translator_avalon_universal_master_0_lock;                 // dma_DDR_M_mm_write_translator:uav_lock -> dma_DDR_M_mm_write_agent:av_lock
	wire          dma_ddr_m_mm_write_translator_avalon_universal_master_0_write;                // dma_DDR_M_mm_write_translator:uav_write -> dma_DDR_M_mm_write_agent:av_write
	wire   [63:0] dma_ddr_m_mm_write_translator_avalon_universal_master_0_writedata;            // dma_DDR_M_mm_write_translator:uav_writedata -> dma_DDR_M_mm_write_agent:av_writedata
	wire    [7:0] dma_ddr_m_mm_write_translator_avalon_universal_master_0_burstcount;           // dma_DDR_M_mm_write_translator:uav_burstcount -> dma_DDR_M_mm_write_agent:av_burstcount
	wire          rsp_mux_001_src_valid;                                                        // rsp_mux_001:src_valid -> dma_DDR_M_mm_write_agent:rp_valid
	wire  [177:0] rsp_mux_001_src_data;                                                         // rsp_mux_001:src_data -> dma_DDR_M_mm_write_agent:rp_data
	wire          rsp_mux_001_src_ready;                                                        // dma_DDR_M_mm_write_agent:rp_ready -> rsp_mux_001:src_ready
	wire    [1:0] rsp_mux_001_src_channel;                                                      // rsp_mux_001:src_channel -> dma_DDR_M_mm_write_agent:rp_channel
	wire          rsp_mux_001_src_startofpacket;                                                // rsp_mux_001:src_startofpacket -> dma_DDR_M_mm_write_agent:rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                  // rsp_mux_001:src_endofpacket -> dma_DDR_M_mm_write_agent:rp_endofpacket
	wire   [63:0] communication_module_a_avalon_mm_data_slave_agent_m0_readdata;                // Communication_Module_A_avalon_mm_data_slave_translator:uav_readdata -> Communication_Module_A_avalon_mm_data_slave_agent:m0_readdata
	wire          communication_module_a_avalon_mm_data_slave_agent_m0_waitrequest;             // Communication_Module_A_avalon_mm_data_slave_translator:uav_waitrequest -> Communication_Module_A_avalon_mm_data_slave_agent:m0_waitrequest
	wire          communication_module_a_avalon_mm_data_slave_agent_m0_debugaccess;             // Communication_Module_A_avalon_mm_data_slave_agent:m0_debugaccess -> Communication_Module_A_avalon_mm_data_slave_translator:uav_debugaccess
	wire   [63:0] communication_module_a_avalon_mm_data_slave_agent_m0_address;                 // Communication_Module_A_avalon_mm_data_slave_agent:m0_address -> Communication_Module_A_avalon_mm_data_slave_translator:uav_address
	wire    [7:0] communication_module_a_avalon_mm_data_slave_agent_m0_byteenable;              // Communication_Module_A_avalon_mm_data_slave_agent:m0_byteenable -> Communication_Module_A_avalon_mm_data_slave_translator:uav_byteenable
	wire          communication_module_a_avalon_mm_data_slave_agent_m0_read;                    // Communication_Module_A_avalon_mm_data_slave_agent:m0_read -> Communication_Module_A_avalon_mm_data_slave_translator:uav_read
	wire          communication_module_a_avalon_mm_data_slave_agent_m0_readdatavalid;           // Communication_Module_A_avalon_mm_data_slave_translator:uav_readdatavalid -> Communication_Module_A_avalon_mm_data_slave_agent:m0_readdatavalid
	wire          communication_module_a_avalon_mm_data_slave_agent_m0_lock;                    // Communication_Module_A_avalon_mm_data_slave_agent:m0_lock -> Communication_Module_A_avalon_mm_data_slave_translator:uav_lock
	wire   [63:0] communication_module_a_avalon_mm_data_slave_agent_m0_writedata;               // Communication_Module_A_avalon_mm_data_slave_agent:m0_writedata -> Communication_Module_A_avalon_mm_data_slave_translator:uav_writedata
	wire          communication_module_a_avalon_mm_data_slave_agent_m0_write;                   // Communication_Module_A_avalon_mm_data_slave_agent:m0_write -> Communication_Module_A_avalon_mm_data_slave_translator:uav_write
	wire   [10:0] communication_module_a_avalon_mm_data_slave_agent_m0_burstcount;              // Communication_Module_A_avalon_mm_data_slave_agent:m0_burstcount -> Communication_Module_A_avalon_mm_data_slave_translator:uav_burstcount
	wire          communication_module_a_avalon_mm_data_slave_agent_rf_source_valid;            // Communication_Module_A_avalon_mm_data_slave_agent:rf_source_valid -> Communication_Module_A_avalon_mm_data_slave_agent_rsp_fifo:in_valid
	wire  [178:0] communication_module_a_avalon_mm_data_slave_agent_rf_source_data;             // Communication_Module_A_avalon_mm_data_slave_agent:rf_source_data -> Communication_Module_A_avalon_mm_data_slave_agent_rsp_fifo:in_data
	wire          communication_module_a_avalon_mm_data_slave_agent_rf_source_ready;            // Communication_Module_A_avalon_mm_data_slave_agent_rsp_fifo:in_ready -> Communication_Module_A_avalon_mm_data_slave_agent:rf_source_ready
	wire          communication_module_a_avalon_mm_data_slave_agent_rf_source_startofpacket;    // Communication_Module_A_avalon_mm_data_slave_agent:rf_source_startofpacket -> Communication_Module_A_avalon_mm_data_slave_agent_rsp_fifo:in_startofpacket
	wire          communication_module_a_avalon_mm_data_slave_agent_rf_source_endofpacket;      // Communication_Module_A_avalon_mm_data_slave_agent:rf_source_endofpacket -> Communication_Module_A_avalon_mm_data_slave_agent_rsp_fifo:in_endofpacket
	wire          communication_module_a_avalon_mm_data_slave_agent_rsp_fifo_out_valid;         // Communication_Module_A_avalon_mm_data_slave_agent_rsp_fifo:out_valid -> Communication_Module_A_avalon_mm_data_slave_agent:rf_sink_valid
	wire  [178:0] communication_module_a_avalon_mm_data_slave_agent_rsp_fifo_out_data;          // Communication_Module_A_avalon_mm_data_slave_agent_rsp_fifo:out_data -> Communication_Module_A_avalon_mm_data_slave_agent:rf_sink_data
	wire          communication_module_a_avalon_mm_data_slave_agent_rsp_fifo_out_ready;         // Communication_Module_A_avalon_mm_data_slave_agent:rf_sink_ready -> Communication_Module_A_avalon_mm_data_slave_agent_rsp_fifo:out_ready
	wire          communication_module_a_avalon_mm_data_slave_agent_rsp_fifo_out_startofpacket; // Communication_Module_A_avalon_mm_data_slave_agent_rsp_fifo:out_startofpacket -> Communication_Module_A_avalon_mm_data_slave_agent:rf_sink_startofpacket
	wire          communication_module_a_avalon_mm_data_slave_agent_rsp_fifo_out_endofpacket;   // Communication_Module_A_avalon_mm_data_slave_agent_rsp_fifo:out_endofpacket -> Communication_Module_A_avalon_mm_data_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_src_valid;                                                            // cmd_mux:src_valid -> Communication_Module_A_avalon_mm_data_slave_agent:cp_valid
	wire  [177:0] cmd_mux_src_data;                                                             // cmd_mux:src_data -> Communication_Module_A_avalon_mm_data_slave_agent:cp_data
	wire          cmd_mux_src_ready;                                                            // Communication_Module_A_avalon_mm_data_slave_agent:cp_ready -> cmd_mux:src_ready
	wire    [1:0] cmd_mux_src_channel;                                                          // cmd_mux:src_channel -> Communication_Module_A_avalon_mm_data_slave_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                                    // cmd_mux:src_startofpacket -> Communication_Module_A_avalon_mm_data_slave_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                      // cmd_mux:src_endofpacket -> Communication_Module_A_avalon_mm_data_slave_agent:cp_endofpacket
	wire   [63:0] pattern_generator_a_avalon_mm_data_slave_agent_m0_readdata;                   // Pattern_Generator_A_avalon_mm_data_slave_translator:uav_readdata -> Pattern_Generator_A_avalon_mm_data_slave_agent:m0_readdata
	wire          pattern_generator_a_avalon_mm_data_slave_agent_m0_waitrequest;                // Pattern_Generator_A_avalon_mm_data_slave_translator:uav_waitrequest -> Pattern_Generator_A_avalon_mm_data_slave_agent:m0_waitrequest
	wire          pattern_generator_a_avalon_mm_data_slave_agent_m0_debugaccess;                // Pattern_Generator_A_avalon_mm_data_slave_agent:m0_debugaccess -> Pattern_Generator_A_avalon_mm_data_slave_translator:uav_debugaccess
	wire   [63:0] pattern_generator_a_avalon_mm_data_slave_agent_m0_address;                    // Pattern_Generator_A_avalon_mm_data_slave_agent:m0_address -> Pattern_Generator_A_avalon_mm_data_slave_translator:uav_address
	wire    [7:0] pattern_generator_a_avalon_mm_data_slave_agent_m0_byteenable;                 // Pattern_Generator_A_avalon_mm_data_slave_agent:m0_byteenable -> Pattern_Generator_A_avalon_mm_data_slave_translator:uav_byteenable
	wire          pattern_generator_a_avalon_mm_data_slave_agent_m0_read;                       // Pattern_Generator_A_avalon_mm_data_slave_agent:m0_read -> Pattern_Generator_A_avalon_mm_data_slave_translator:uav_read
	wire          pattern_generator_a_avalon_mm_data_slave_agent_m0_readdatavalid;              // Pattern_Generator_A_avalon_mm_data_slave_translator:uav_readdatavalid -> Pattern_Generator_A_avalon_mm_data_slave_agent:m0_readdatavalid
	wire          pattern_generator_a_avalon_mm_data_slave_agent_m0_lock;                       // Pattern_Generator_A_avalon_mm_data_slave_agent:m0_lock -> Pattern_Generator_A_avalon_mm_data_slave_translator:uav_lock
	wire   [63:0] pattern_generator_a_avalon_mm_data_slave_agent_m0_writedata;                  // Pattern_Generator_A_avalon_mm_data_slave_agent:m0_writedata -> Pattern_Generator_A_avalon_mm_data_slave_translator:uav_writedata
	wire          pattern_generator_a_avalon_mm_data_slave_agent_m0_write;                      // Pattern_Generator_A_avalon_mm_data_slave_agent:m0_write -> Pattern_Generator_A_avalon_mm_data_slave_translator:uav_write
	wire   [10:0] pattern_generator_a_avalon_mm_data_slave_agent_m0_burstcount;                 // Pattern_Generator_A_avalon_mm_data_slave_agent:m0_burstcount -> Pattern_Generator_A_avalon_mm_data_slave_translator:uav_burstcount
	wire          pattern_generator_a_avalon_mm_data_slave_agent_rf_source_valid;               // Pattern_Generator_A_avalon_mm_data_slave_agent:rf_source_valid -> Pattern_Generator_A_avalon_mm_data_slave_agent_rsp_fifo:in_valid
	wire  [178:0] pattern_generator_a_avalon_mm_data_slave_agent_rf_source_data;                // Pattern_Generator_A_avalon_mm_data_slave_agent:rf_source_data -> Pattern_Generator_A_avalon_mm_data_slave_agent_rsp_fifo:in_data
	wire          pattern_generator_a_avalon_mm_data_slave_agent_rf_source_ready;               // Pattern_Generator_A_avalon_mm_data_slave_agent_rsp_fifo:in_ready -> Pattern_Generator_A_avalon_mm_data_slave_agent:rf_source_ready
	wire          pattern_generator_a_avalon_mm_data_slave_agent_rf_source_startofpacket;       // Pattern_Generator_A_avalon_mm_data_slave_agent:rf_source_startofpacket -> Pattern_Generator_A_avalon_mm_data_slave_agent_rsp_fifo:in_startofpacket
	wire          pattern_generator_a_avalon_mm_data_slave_agent_rf_source_endofpacket;         // Pattern_Generator_A_avalon_mm_data_slave_agent:rf_source_endofpacket -> Pattern_Generator_A_avalon_mm_data_slave_agent_rsp_fifo:in_endofpacket
	wire          pattern_generator_a_avalon_mm_data_slave_agent_rsp_fifo_out_valid;            // Pattern_Generator_A_avalon_mm_data_slave_agent_rsp_fifo:out_valid -> Pattern_Generator_A_avalon_mm_data_slave_agent:rf_sink_valid
	wire  [178:0] pattern_generator_a_avalon_mm_data_slave_agent_rsp_fifo_out_data;             // Pattern_Generator_A_avalon_mm_data_slave_agent_rsp_fifo:out_data -> Pattern_Generator_A_avalon_mm_data_slave_agent:rf_sink_data
	wire          pattern_generator_a_avalon_mm_data_slave_agent_rsp_fifo_out_ready;            // Pattern_Generator_A_avalon_mm_data_slave_agent:rf_sink_ready -> Pattern_Generator_A_avalon_mm_data_slave_agent_rsp_fifo:out_ready
	wire          pattern_generator_a_avalon_mm_data_slave_agent_rsp_fifo_out_startofpacket;    // Pattern_Generator_A_avalon_mm_data_slave_agent_rsp_fifo:out_startofpacket -> Pattern_Generator_A_avalon_mm_data_slave_agent:rf_sink_startofpacket
	wire          pattern_generator_a_avalon_mm_data_slave_agent_rsp_fifo_out_endofpacket;      // Pattern_Generator_A_avalon_mm_data_slave_agent_rsp_fifo:out_endofpacket -> Pattern_Generator_A_avalon_mm_data_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_001_src_valid;                                                        // cmd_mux_001:src_valid -> Pattern_Generator_A_avalon_mm_data_slave_agent:cp_valid
	wire  [177:0] cmd_mux_001_src_data;                                                         // cmd_mux_001:src_data -> Pattern_Generator_A_avalon_mm_data_slave_agent:cp_data
	wire          cmd_mux_001_src_ready;                                                        // Pattern_Generator_A_avalon_mm_data_slave_agent:cp_ready -> cmd_mux_001:src_ready
	wire    [1:0] cmd_mux_001_src_channel;                                                      // cmd_mux_001:src_channel -> Pattern_Generator_A_avalon_mm_data_slave_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                                // cmd_mux_001:src_startofpacket -> Pattern_Generator_A_avalon_mm_data_slave_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                  // cmd_mux_001:src_endofpacket -> Pattern_Generator_A_avalon_mm_data_slave_agent:cp_endofpacket
	wire          dma_ddr_m_mm_read_agent_cp_valid;                                             // dma_DDR_M_mm_read_agent:cp_valid -> router:sink_valid
	wire  [177:0] dma_ddr_m_mm_read_agent_cp_data;                                              // dma_DDR_M_mm_read_agent:cp_data -> router:sink_data
	wire          dma_ddr_m_mm_read_agent_cp_ready;                                             // router:sink_ready -> dma_DDR_M_mm_read_agent:cp_ready
	wire          dma_ddr_m_mm_read_agent_cp_startofpacket;                                     // dma_DDR_M_mm_read_agent:cp_startofpacket -> router:sink_startofpacket
	wire          dma_ddr_m_mm_read_agent_cp_endofpacket;                                       // dma_DDR_M_mm_read_agent:cp_endofpacket -> router:sink_endofpacket
	wire          dma_ddr_m_mm_write_agent_cp_valid;                                            // dma_DDR_M_mm_write_agent:cp_valid -> router_001:sink_valid
	wire  [177:0] dma_ddr_m_mm_write_agent_cp_data;                                             // dma_DDR_M_mm_write_agent:cp_data -> router_001:sink_data
	wire          dma_ddr_m_mm_write_agent_cp_ready;                                            // router_001:sink_ready -> dma_DDR_M_mm_write_agent:cp_ready
	wire          dma_ddr_m_mm_write_agent_cp_startofpacket;                                    // dma_DDR_M_mm_write_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          dma_ddr_m_mm_write_agent_cp_endofpacket;                                      // dma_DDR_M_mm_write_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                         // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [177:0] router_001_src_data;                                                          // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                                         // cmd_demux_001:sink_ready -> router_001:src_ready
	wire    [1:0] router_001_src_channel;                                                       // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                                 // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                                   // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          communication_module_a_avalon_mm_data_slave_agent_rp_valid;                   // Communication_Module_A_avalon_mm_data_slave_agent:rp_valid -> router_002:sink_valid
	wire  [177:0] communication_module_a_avalon_mm_data_slave_agent_rp_data;                    // Communication_Module_A_avalon_mm_data_slave_agent:rp_data -> router_002:sink_data
	wire          communication_module_a_avalon_mm_data_slave_agent_rp_ready;                   // router_002:sink_ready -> Communication_Module_A_avalon_mm_data_slave_agent:rp_ready
	wire          communication_module_a_avalon_mm_data_slave_agent_rp_startofpacket;           // Communication_Module_A_avalon_mm_data_slave_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          communication_module_a_avalon_mm_data_slave_agent_rp_endofpacket;             // Communication_Module_A_avalon_mm_data_slave_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                         // router_002:src_valid -> rsp_demux:sink_valid
	wire  [177:0] router_002_src_data;                                                          // router_002:src_data -> rsp_demux:sink_data
	wire          router_002_src_ready;                                                         // rsp_demux:sink_ready -> router_002:src_ready
	wire    [1:0] router_002_src_channel;                                                       // router_002:src_channel -> rsp_demux:sink_channel
	wire          router_002_src_startofpacket;                                                 // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_002_src_endofpacket;                                                   // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          pattern_generator_a_avalon_mm_data_slave_agent_rp_valid;                      // Pattern_Generator_A_avalon_mm_data_slave_agent:rp_valid -> router_003:sink_valid
	wire  [177:0] pattern_generator_a_avalon_mm_data_slave_agent_rp_data;                       // Pattern_Generator_A_avalon_mm_data_slave_agent:rp_data -> router_003:sink_data
	wire          pattern_generator_a_avalon_mm_data_slave_agent_rp_ready;                      // router_003:sink_ready -> Pattern_Generator_A_avalon_mm_data_slave_agent:rp_ready
	wire          pattern_generator_a_avalon_mm_data_slave_agent_rp_startofpacket;              // Pattern_Generator_A_avalon_mm_data_slave_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          pattern_generator_a_avalon_mm_data_slave_agent_rp_endofpacket;                // Pattern_Generator_A_avalon_mm_data_slave_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                         // router_003:src_valid -> rsp_demux_001:sink_valid
	wire  [177:0] router_003_src_data;                                                          // router_003:src_data -> rsp_demux_001:sink_data
	wire          router_003_src_ready;                                                         // rsp_demux_001:sink_ready -> router_003:src_ready
	wire    [1:0] router_003_src_channel;                                                       // router_003:src_channel -> rsp_demux_001:sink_channel
	wire          router_003_src_startofpacket;                                                 // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_003_src_endofpacket;                                                   // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          router_src_valid;                                                             // router:src_valid -> dma_DDR_M_mm_read_limiter:cmd_sink_valid
	wire  [177:0] router_src_data;                                                              // router:src_data -> dma_DDR_M_mm_read_limiter:cmd_sink_data
	wire          router_src_ready;                                                             // dma_DDR_M_mm_read_limiter:cmd_sink_ready -> router:src_ready
	wire    [1:0] router_src_channel;                                                           // router:src_channel -> dma_DDR_M_mm_read_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                     // router:src_startofpacket -> dma_DDR_M_mm_read_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                       // router:src_endofpacket -> dma_DDR_M_mm_read_limiter:cmd_sink_endofpacket
	wire  [177:0] dma_ddr_m_mm_read_limiter_cmd_src_data;                                       // dma_DDR_M_mm_read_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          dma_ddr_m_mm_read_limiter_cmd_src_ready;                                      // cmd_demux:sink_ready -> dma_DDR_M_mm_read_limiter:cmd_src_ready
	wire    [1:0] dma_ddr_m_mm_read_limiter_cmd_src_channel;                                    // dma_DDR_M_mm_read_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          dma_ddr_m_mm_read_limiter_cmd_src_startofpacket;                              // dma_DDR_M_mm_read_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          dma_ddr_m_mm_read_limiter_cmd_src_endofpacket;                                // dma_DDR_M_mm_read_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                            // rsp_mux:src_valid -> dma_DDR_M_mm_read_limiter:rsp_sink_valid
	wire  [177:0] rsp_mux_src_data;                                                             // rsp_mux:src_data -> dma_DDR_M_mm_read_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                            // dma_DDR_M_mm_read_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire    [1:0] rsp_mux_src_channel;                                                          // rsp_mux:src_channel -> dma_DDR_M_mm_read_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                                    // rsp_mux:src_startofpacket -> dma_DDR_M_mm_read_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                                      // rsp_mux:src_endofpacket -> dma_DDR_M_mm_read_limiter:rsp_sink_endofpacket
	wire          dma_ddr_m_mm_read_limiter_rsp_src_valid;                                      // dma_DDR_M_mm_read_limiter:rsp_src_valid -> dma_DDR_M_mm_read_agent:rp_valid
	wire  [177:0] dma_ddr_m_mm_read_limiter_rsp_src_data;                                       // dma_DDR_M_mm_read_limiter:rsp_src_data -> dma_DDR_M_mm_read_agent:rp_data
	wire          dma_ddr_m_mm_read_limiter_rsp_src_ready;                                      // dma_DDR_M_mm_read_agent:rp_ready -> dma_DDR_M_mm_read_limiter:rsp_src_ready
	wire    [1:0] dma_ddr_m_mm_read_limiter_rsp_src_channel;                                    // dma_DDR_M_mm_read_limiter:rsp_src_channel -> dma_DDR_M_mm_read_agent:rp_channel
	wire          dma_ddr_m_mm_read_limiter_rsp_src_startofpacket;                              // dma_DDR_M_mm_read_limiter:rsp_src_startofpacket -> dma_DDR_M_mm_read_agent:rp_startofpacket
	wire          dma_ddr_m_mm_read_limiter_rsp_src_endofpacket;                                // dma_DDR_M_mm_read_limiter:rsp_src_endofpacket -> dma_DDR_M_mm_read_agent:rp_endofpacket
	wire          cmd_demux_src0_valid;                                                         // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [177:0] cmd_demux_src0_data;                                                          // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                         // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [1:0] cmd_demux_src0_channel;                                                       // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                 // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                   // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                         // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [177:0] cmd_demux_src1_data;                                                          // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                         // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire    [1:0] cmd_demux_src1_channel;                                                       // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                                 // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                   // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                     // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [177:0] cmd_demux_001_src0_data;                                                      // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                                     // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire    [1:0] cmd_demux_001_src0_channel;                                                   // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                             // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                               // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                                         // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [177:0] rsp_demux_src0_data;                                                          // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                         // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [1:0] rsp_demux_src0_channel;                                                       // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                 // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                   // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                         // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [177:0] rsp_demux_src1_data;                                                          // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                                         // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire    [1:0] rsp_demux_src1_channel;                                                       // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                                 // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                   // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                     // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [177:0] rsp_demux_001_src0_data;                                                      // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                     // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire    [1:0] rsp_demux_001_src0_channel;                                                   // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                             // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                               // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire    [1:0] dma_ddr_m_mm_read_limiter_cmd_valid_data;                                     // dma_DDR_M_mm_read_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire          communication_module_a_avalon_mm_data_slave_agent_rdata_fifo_src_valid;       // Communication_Module_A_avalon_mm_data_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire   [65:0] communication_module_a_avalon_mm_data_slave_agent_rdata_fifo_src_data;        // Communication_Module_A_avalon_mm_data_slave_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire          communication_module_a_avalon_mm_data_slave_agent_rdata_fifo_src_ready;       // avalon_st_adapter:in_0_ready -> Communication_Module_A_avalon_mm_data_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_out_0_valid;                                                // avalon_st_adapter:out_0_valid -> Communication_Module_A_avalon_mm_data_slave_agent:rdata_fifo_sink_valid
	wire   [65:0] avalon_st_adapter_out_0_data;                                                 // avalon_st_adapter:out_0_data -> Communication_Module_A_avalon_mm_data_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                // Communication_Module_A_avalon_mm_data_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                // avalon_st_adapter:out_0_error -> Communication_Module_A_avalon_mm_data_slave_agent:rdata_fifo_sink_error
	wire          pattern_generator_a_avalon_mm_data_slave_agent_rdata_fifo_src_valid;          // Pattern_Generator_A_avalon_mm_data_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire   [65:0] pattern_generator_a_avalon_mm_data_slave_agent_rdata_fifo_src_data;           // Pattern_Generator_A_avalon_mm_data_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire          pattern_generator_a_avalon_mm_data_slave_agent_rdata_fifo_src_ready;          // avalon_st_adapter_001:in_0_ready -> Pattern_Generator_A_avalon_mm_data_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_001_out_0_valid;                                            // avalon_st_adapter_001:out_0_valid -> Pattern_Generator_A_avalon_mm_data_slave_agent:rdata_fifo_sink_valid
	wire   [65:0] avalon_st_adapter_001_out_0_data;                                             // avalon_st_adapter_001:out_0_data -> Pattern_Generator_A_avalon_mm_data_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                            // Pattern_Generator_A_avalon_mm_data_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                            // avalon_st_adapter_001:out_0_error -> Pattern_Generator_A_avalon_mm_data_slave_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (64),
		.AV_DATA_W                   (64),
		.AV_BURSTCOUNT_W             (5),
		.AV_BYTEENABLE_W             (8),
		.UAV_ADDRESS_W               (64),
		.UAV_BURSTCOUNT_W            (8),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (8),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) dma_ddr_m_mm_read_translator (
		.clk                    (clk_100_clk_clk),                                                      //                       clk.clk
		.reset                  (dma_DDR_M_reset_n_reset_bridge_in_reset_reset),                        //                     reset.reset
		.uav_address            (dma_ddr_m_mm_read_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (dma_ddr_m_mm_read_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (dma_ddr_m_mm_read_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (dma_ddr_m_mm_read_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (dma_ddr_m_mm_read_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (dma_ddr_m_mm_read_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (dma_ddr_m_mm_read_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (dma_ddr_m_mm_read_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (dma_ddr_m_mm_read_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (dma_ddr_m_mm_read_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (dma_ddr_m_mm_read_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (dma_DDR_M_mm_read_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (dma_DDR_M_mm_read_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (dma_DDR_M_mm_read_burstcount),                                         //                          .burstcount
		.av_byteenable          (dma_DDR_M_mm_read_byteenable),                                         //                          .byteenable
		.av_read                (dma_DDR_M_mm_read_read),                                               //                          .read
		.av_readdata            (dma_DDR_M_mm_read_readdata),                                           //                          .readdata
		.av_readdatavalid       (dma_DDR_M_mm_read_readdatavalid),                                      //                          .readdatavalid
		.av_beginbursttransfer  (1'b0),                                                                 //               (terminated)
		.av_begintransfer       (1'b0),                                                                 //               (terminated)
		.av_chipselect          (1'b0),                                                                 //               (terminated)
		.av_write               (1'b0),                                                                 //               (terminated)
		.av_writedata           (64'b0000000000000000000000000000000000000000000000000000000000000000), //               (terminated)
		.av_lock                (1'b0),                                                                 //               (terminated)
		.av_debugaccess         (1'b0),                                                                 //               (terminated)
		.uav_clken              (),                                                                     //               (terminated)
		.av_clken               (1'b1),                                                                 //               (terminated)
		.uav_response           (2'b00),                                                                //               (terminated)
		.av_response            (),                                                                     //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                 //               (terminated)
		.av_writeresponsevalid  ()                                                                      //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (64),
		.AV_DATA_W                   (64),
		.AV_BURSTCOUNT_W             (5),
		.AV_BYTEENABLE_W             (8),
		.UAV_ADDRESS_W               (64),
		.UAV_BURSTCOUNT_W            (8),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (8),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) dma_ddr_m_mm_write_translator (
		.clk                    (clk_100_clk_clk),                                                       //                       clk.clk
		.reset                  (dma_DDR_M_reset_n_reset_bridge_in_reset_reset),                         //                     reset.reset
		.uav_address            (dma_ddr_m_mm_write_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (dma_ddr_m_mm_write_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (dma_ddr_m_mm_write_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (dma_ddr_m_mm_write_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (dma_ddr_m_mm_write_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (dma_ddr_m_mm_write_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (dma_ddr_m_mm_write_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (dma_ddr_m_mm_write_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (dma_ddr_m_mm_write_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (dma_ddr_m_mm_write_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (dma_ddr_m_mm_write_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (dma_DDR_M_mm_write_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (dma_DDR_M_mm_write_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (dma_DDR_M_mm_write_burstcount),                                         //                          .burstcount
		.av_byteenable          (dma_DDR_M_mm_write_byteenable),                                         //                          .byteenable
		.av_write               (dma_DDR_M_mm_write_write),                                              //                          .write
		.av_writedata           (dma_DDR_M_mm_write_writedata),                                          //                          .writedata
		.av_beginbursttransfer  (1'b0),                                                                  //               (terminated)
		.av_begintransfer       (1'b0),                                                                  //               (terminated)
		.av_chipselect          (1'b0),                                                                  //               (terminated)
		.av_read                (1'b0),                                                                  //               (terminated)
		.av_readdata            (),                                                                      //               (terminated)
		.av_readdatavalid       (),                                                                      //               (terminated)
		.av_lock                (1'b0),                                                                  //               (terminated)
		.av_debugaccess         (1'b0),                                                                  //               (terminated)
		.uav_clken              (),                                                                      //               (terminated)
		.av_clken               (1'b1),                                                                  //               (terminated)
		.uav_response           (2'b00),                                                                 //               (terminated)
		.av_response            (),                                                                      //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                  //               (terminated)
		.av_writeresponsevalid  ()                                                                       //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (26),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (8),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (64),
		.UAV_BURSTCOUNT_W               (11),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) communication_module_a_avalon_mm_data_slave_translator (
		.clk                    (clk_100_clk_clk),                                                    //                      clk.clk
		.reset                  (dma_DDR_M_reset_n_reset_bridge_in_reset_reset),                      //                    reset.reset
		.uav_address            (communication_module_a_avalon_mm_data_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (communication_module_a_avalon_mm_data_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (communication_module_a_avalon_mm_data_slave_agent_m0_read),          //                         .read
		.uav_write              (communication_module_a_avalon_mm_data_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (communication_module_a_avalon_mm_data_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (communication_module_a_avalon_mm_data_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (communication_module_a_avalon_mm_data_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (communication_module_a_avalon_mm_data_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (communication_module_a_avalon_mm_data_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (communication_module_a_avalon_mm_data_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (communication_module_a_avalon_mm_data_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Communication_Module_A_avalon_mm_data_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (Communication_Module_A_avalon_mm_data_slave_write),                  //                         .write
		.av_read                (Communication_Module_A_avalon_mm_data_slave_read),                   //                         .read
		.av_readdata            (Communication_Module_A_avalon_mm_data_slave_readdata),               //                         .readdata
		.av_writedata           (Communication_Module_A_avalon_mm_data_slave_writedata),              //                         .writedata
		.av_burstcount          (Communication_Module_A_avalon_mm_data_slave_burstcount),             //                         .burstcount
		.av_byteenable          (Communication_Module_A_avalon_mm_data_slave_byteenable),             //                         .byteenable
		.av_readdatavalid       (Communication_Module_A_avalon_mm_data_slave_readdatavalid),          //                         .readdatavalid
		.av_waitrequest         (Communication_Module_A_avalon_mm_data_slave_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                                   //              (terminated)
		.av_writebyteenable     (),                                                                   //              (terminated)
		.av_lock                (),                                                                   //              (terminated)
		.av_chipselect          (),                                                                   //              (terminated)
		.av_clken               (),                                                                   //              (terminated)
		.uav_clken              (1'b0),                                                               //              (terminated)
		.av_debugaccess         (),                                                                   //              (terminated)
		.av_outputenable        (),                                                                   //              (terminated)
		.uav_response           (),                                                                   //              (terminated)
		.av_response            (2'b00),                                                              //              (terminated)
		.uav_writeresponsevalid (),                                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (26),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (8),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (64),
		.UAV_BURSTCOUNT_W               (11),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pattern_generator_a_avalon_mm_data_slave_translator (
		.clk                    (clk_100_clk_clk),                                                 //                      clk.clk
		.reset                  (dma_DDR_M_reset_n_reset_bridge_in_reset_reset),                   //                    reset.reset
		.uav_address            (pattern_generator_a_avalon_mm_data_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (pattern_generator_a_avalon_mm_data_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (pattern_generator_a_avalon_mm_data_slave_agent_m0_read),          //                         .read
		.uav_write              (pattern_generator_a_avalon_mm_data_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (pattern_generator_a_avalon_mm_data_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (pattern_generator_a_avalon_mm_data_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (pattern_generator_a_avalon_mm_data_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (pattern_generator_a_avalon_mm_data_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (pattern_generator_a_avalon_mm_data_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (pattern_generator_a_avalon_mm_data_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (pattern_generator_a_avalon_mm_data_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Pattern_Generator_A_avalon_mm_data_slave_address),                //      avalon_anti_slave_0.address
		.av_read                (Pattern_Generator_A_avalon_mm_data_slave_read),                   //                         .read
		.av_readdata            (Pattern_Generator_A_avalon_mm_data_slave_readdata),               //                         .readdata
		.av_burstcount          (Pattern_Generator_A_avalon_mm_data_slave_burstcount),             //                         .burstcount
		.av_byteenable          (Pattern_Generator_A_avalon_mm_data_slave_byteenable),             //                         .byteenable
		.av_readdatavalid       (Pattern_Generator_A_avalon_mm_data_slave_readdatavalid),          //                         .readdatavalid
		.av_waitrequest         (Pattern_Generator_A_avalon_mm_data_slave_waitrequest),            //                         .waitrequest
		.av_write               (),                                                                //              (terminated)
		.av_writedata           (),                                                                //              (terminated)
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_chipselect          (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (177),
		.PKT_ORI_BURST_SIZE_L      (175),
		.PKT_RESPONSE_STATUS_H     (174),
		.PKT_RESPONSE_STATUS_L     (173),
		.PKT_QOS_H                 (162),
		.PKT_QOS_L                 (162),
		.PKT_DATA_SIDEBAND_H       (160),
		.PKT_DATA_SIDEBAND_L       (160),
		.PKT_ADDR_SIDEBAND_H       (159),
		.PKT_ADDR_SIDEBAND_L       (159),
		.PKT_BURST_TYPE_H          (158),
		.PKT_BURST_TYPE_L          (157),
		.PKT_CACHE_H               (172),
		.PKT_CACHE_L               (169),
		.PKT_THREAD_ID_H           (165),
		.PKT_THREAD_ID_L           (165),
		.PKT_BURST_SIZE_H          (156),
		.PKT_BURST_SIZE_L          (154),
		.PKT_TRANS_EXCLUSIVE       (141),
		.PKT_TRANS_LOCK            (140),
		.PKT_BEGIN_BURST           (161),
		.PKT_PROTECTION_H          (168),
		.PKT_PROTECTION_L          (166),
		.PKT_BURSTWRAP_H           (153),
		.PKT_BURSTWRAP_L           (153),
		.PKT_BYTE_CNT_H            (152),
		.PKT_BYTE_CNT_L            (142),
		.PKT_ADDR_H                (135),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (136),
		.PKT_TRANS_POSTED          (137),
		.PKT_TRANS_WRITE           (138),
		.PKT_TRANS_READ            (139),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (163),
		.PKT_SRC_ID_L              (163),
		.PKT_DEST_ID_H             (164),
		.PKT_DEST_ID_L             (164),
		.ST_DATA_W                 (178),
		.ST_CHANNEL_W              (2),
		.AV_BURSTCOUNT_W           (8),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) dma_ddr_m_mm_read_agent (
		.clk                   (clk_100_clk_clk),                                                      //       clk.clk
		.reset                 (dma_DDR_M_reset_n_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.av_address            (dma_ddr_m_mm_read_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (dma_ddr_m_mm_read_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (dma_ddr_m_mm_read_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (dma_ddr_m_mm_read_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (dma_ddr_m_mm_read_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (dma_ddr_m_mm_read_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (dma_ddr_m_mm_read_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (dma_ddr_m_mm_read_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (dma_ddr_m_mm_read_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (dma_ddr_m_mm_read_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (dma_ddr_m_mm_read_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (dma_ddr_m_mm_read_agent_cp_valid),                                     //        cp.valid
		.cp_data               (dma_ddr_m_mm_read_agent_cp_data),                                      //          .data
		.cp_startofpacket      (dma_ddr_m_mm_read_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (dma_ddr_m_mm_read_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (dma_ddr_m_mm_read_agent_cp_ready),                                     //          .ready
		.rp_valid              (dma_ddr_m_mm_read_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (dma_ddr_m_mm_read_limiter_rsp_src_data),                               //          .data
		.rp_channel            (dma_ddr_m_mm_read_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (dma_ddr_m_mm_read_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (dma_ddr_m_mm_read_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (dma_ddr_m_mm_read_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                     // (terminated)
		.av_writeresponsevalid ()                                                                      // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (177),
		.PKT_ORI_BURST_SIZE_L      (175),
		.PKT_RESPONSE_STATUS_H     (174),
		.PKT_RESPONSE_STATUS_L     (173),
		.PKT_QOS_H                 (162),
		.PKT_QOS_L                 (162),
		.PKT_DATA_SIDEBAND_H       (160),
		.PKT_DATA_SIDEBAND_L       (160),
		.PKT_ADDR_SIDEBAND_H       (159),
		.PKT_ADDR_SIDEBAND_L       (159),
		.PKT_BURST_TYPE_H          (158),
		.PKT_BURST_TYPE_L          (157),
		.PKT_CACHE_H               (172),
		.PKT_CACHE_L               (169),
		.PKT_THREAD_ID_H           (165),
		.PKT_THREAD_ID_L           (165),
		.PKT_BURST_SIZE_H          (156),
		.PKT_BURST_SIZE_L          (154),
		.PKT_TRANS_EXCLUSIVE       (141),
		.PKT_TRANS_LOCK            (140),
		.PKT_BEGIN_BURST           (161),
		.PKT_PROTECTION_H          (168),
		.PKT_PROTECTION_L          (166),
		.PKT_BURSTWRAP_H           (153),
		.PKT_BURSTWRAP_L           (153),
		.PKT_BYTE_CNT_H            (152),
		.PKT_BYTE_CNT_L            (142),
		.PKT_ADDR_H                (135),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (136),
		.PKT_TRANS_POSTED          (137),
		.PKT_TRANS_WRITE           (138),
		.PKT_TRANS_READ            (139),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (163),
		.PKT_SRC_ID_L              (163),
		.PKT_DEST_ID_H             (164),
		.PKT_DEST_ID_L             (164),
		.ST_DATA_W                 (178),
		.ST_CHANNEL_W              (2),
		.AV_BURSTCOUNT_W           (8),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) dma_ddr_m_mm_write_agent (
		.clk                   (clk_100_clk_clk),                                                       //       clk.clk
		.reset                 (dma_DDR_M_reset_n_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.av_address            (dma_ddr_m_mm_write_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (dma_ddr_m_mm_write_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (dma_ddr_m_mm_write_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (dma_ddr_m_mm_write_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (dma_ddr_m_mm_write_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (dma_ddr_m_mm_write_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (dma_ddr_m_mm_write_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (dma_ddr_m_mm_write_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (dma_ddr_m_mm_write_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (dma_ddr_m_mm_write_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (dma_ddr_m_mm_write_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (dma_ddr_m_mm_write_agent_cp_valid),                                     //        cp.valid
		.cp_data               (dma_ddr_m_mm_write_agent_cp_data),                                      //          .data
		.cp_startofpacket      (dma_ddr_m_mm_write_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (dma_ddr_m_mm_write_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (dma_ddr_m_mm_write_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_001_src_valid),                                                 //        rp.valid
		.rp_data               (rsp_mux_001_src_data),                                                  //          .data
		.rp_channel            (rsp_mux_001_src_channel),                                               //          .channel
		.rp_startofpacket      (rsp_mux_001_src_startofpacket),                                         //          .startofpacket
		.rp_endofpacket        (rsp_mux_001_src_endofpacket),                                           //          .endofpacket
		.rp_ready              (rsp_mux_001_src_ready),                                                 //          .ready
		.av_response           (),                                                                      // (terminated)
		.av_writeresponsevalid ()                                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (177),
		.PKT_ORI_BURST_SIZE_L      (175),
		.PKT_RESPONSE_STATUS_H     (174),
		.PKT_RESPONSE_STATUS_L     (173),
		.PKT_BURST_SIZE_H          (156),
		.PKT_BURST_SIZE_L          (154),
		.PKT_TRANS_LOCK            (140),
		.PKT_BEGIN_BURST           (161),
		.PKT_PROTECTION_H          (168),
		.PKT_PROTECTION_L          (166),
		.PKT_BURSTWRAP_H           (153),
		.PKT_BURSTWRAP_L           (153),
		.PKT_BYTE_CNT_H            (152),
		.PKT_BYTE_CNT_L            (142),
		.PKT_ADDR_H                (135),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (136),
		.PKT_TRANS_POSTED          (137),
		.PKT_TRANS_WRITE           (138),
		.PKT_TRANS_READ            (139),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (163),
		.PKT_SRC_ID_L              (163),
		.PKT_DEST_ID_H             (164),
		.PKT_DEST_ID_L             (164),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (2),
		.ST_DATA_W                 (178),
		.AVS_BURSTCOUNT_W          (11),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) communication_module_a_avalon_mm_data_slave_agent (
		.clk                     (clk_100_clk_clk),                                                              //             clk.clk
		.reset                   (dma_DDR_M_reset_n_reset_bridge_in_reset_reset),                                //       clk_reset.reset
		.m0_address              (communication_module_a_avalon_mm_data_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (communication_module_a_avalon_mm_data_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (communication_module_a_avalon_mm_data_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (communication_module_a_avalon_mm_data_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (communication_module_a_avalon_mm_data_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (communication_module_a_avalon_mm_data_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (communication_module_a_avalon_mm_data_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (communication_module_a_avalon_mm_data_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (communication_module_a_avalon_mm_data_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (communication_module_a_avalon_mm_data_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (communication_module_a_avalon_mm_data_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (communication_module_a_avalon_mm_data_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (communication_module_a_avalon_mm_data_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (communication_module_a_avalon_mm_data_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (communication_module_a_avalon_mm_data_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (communication_module_a_avalon_mm_data_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                                            //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                                            //                .valid
		.cp_data                 (cmd_mux_src_data),                                                             //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                                      //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                                          //                .channel
		.rf_sink_ready           (communication_module_a_avalon_mm_data_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (communication_module_a_avalon_mm_data_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (communication_module_a_avalon_mm_data_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (communication_module_a_avalon_mm_data_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (communication_module_a_avalon_mm_data_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (communication_module_a_avalon_mm_data_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (communication_module_a_avalon_mm_data_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (communication_module_a_avalon_mm_data_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (communication_module_a_avalon_mm_data_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (communication_module_a_avalon_mm_data_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                                //                .error
		.rdata_fifo_src_ready    (communication_module_a_avalon_mm_data_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (communication_module_a_avalon_mm_data_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (communication_module_a_avalon_mm_data_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (179),
		.FIFO_DEPTH          (17),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) communication_module_a_avalon_mm_data_slave_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                                              //       clk.clk
		.reset             (dma_DDR_M_reset_n_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.in_data           (communication_module_a_avalon_mm_data_slave_agent_rf_source_data),             //        in.data
		.in_valid          (communication_module_a_avalon_mm_data_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (communication_module_a_avalon_mm_data_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (communication_module_a_avalon_mm_data_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (communication_module_a_avalon_mm_data_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (communication_module_a_avalon_mm_data_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (communication_module_a_avalon_mm_data_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (communication_module_a_avalon_mm_data_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (communication_module_a_avalon_mm_data_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (communication_module_a_avalon_mm_data_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                        // (terminated)
		.csr_read          (1'b0),                                                                         // (terminated)
		.csr_write         (1'b0),                                                                         // (terminated)
		.csr_readdata      (),                                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                         // (terminated)
		.almost_full_data  (),                                                                             // (terminated)
		.almost_empty_data (),                                                                             // (terminated)
		.in_empty          (1'b0),                                                                         // (terminated)
		.out_empty         (),                                                                             // (terminated)
		.in_error          (1'b0),                                                                         // (terminated)
		.out_error         (),                                                                             // (terminated)
		.in_channel        (1'b0),                                                                         // (terminated)
		.out_channel       ()                                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (177),
		.PKT_ORI_BURST_SIZE_L      (175),
		.PKT_RESPONSE_STATUS_H     (174),
		.PKT_RESPONSE_STATUS_L     (173),
		.PKT_BURST_SIZE_H          (156),
		.PKT_BURST_SIZE_L          (154),
		.PKT_TRANS_LOCK            (140),
		.PKT_BEGIN_BURST           (161),
		.PKT_PROTECTION_H          (168),
		.PKT_PROTECTION_L          (166),
		.PKT_BURSTWRAP_H           (153),
		.PKT_BURSTWRAP_L           (153),
		.PKT_BYTE_CNT_H            (152),
		.PKT_BYTE_CNT_L            (142),
		.PKT_ADDR_H                (135),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (136),
		.PKT_TRANS_POSTED          (137),
		.PKT_TRANS_WRITE           (138),
		.PKT_TRANS_READ            (139),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (163),
		.PKT_SRC_ID_L              (163),
		.PKT_DEST_ID_H             (164),
		.PKT_DEST_ID_L             (164),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (2),
		.ST_DATA_W                 (178),
		.AVS_BURSTCOUNT_W          (11),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pattern_generator_a_avalon_mm_data_slave_agent (
		.clk                     (clk_100_clk_clk),                                                           //             clk.clk
		.reset                   (dma_DDR_M_reset_n_reset_bridge_in_reset_reset),                             //       clk_reset.reset
		.m0_address              (pattern_generator_a_avalon_mm_data_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (pattern_generator_a_avalon_mm_data_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (pattern_generator_a_avalon_mm_data_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (pattern_generator_a_avalon_mm_data_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (pattern_generator_a_avalon_mm_data_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (pattern_generator_a_avalon_mm_data_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (pattern_generator_a_avalon_mm_data_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (pattern_generator_a_avalon_mm_data_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (pattern_generator_a_avalon_mm_data_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (pattern_generator_a_avalon_mm_data_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (pattern_generator_a_avalon_mm_data_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (pattern_generator_a_avalon_mm_data_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (pattern_generator_a_avalon_mm_data_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (pattern_generator_a_avalon_mm_data_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (pattern_generator_a_avalon_mm_data_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (pattern_generator_a_avalon_mm_data_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                                     //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                                     //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                                      //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                                             //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                                               //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                                   //                .channel
		.rf_sink_ready           (pattern_generator_a_avalon_mm_data_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (pattern_generator_a_avalon_mm_data_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (pattern_generator_a_avalon_mm_data_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (pattern_generator_a_avalon_mm_data_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (pattern_generator_a_avalon_mm_data_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (pattern_generator_a_avalon_mm_data_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (pattern_generator_a_avalon_mm_data_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (pattern_generator_a_avalon_mm_data_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (pattern_generator_a_avalon_mm_data_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (pattern_generator_a_avalon_mm_data_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                                         //                .error
		.rdata_fifo_src_ready    (pattern_generator_a_avalon_mm_data_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pattern_generator_a_avalon_mm_data_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (pattern_generator_a_avalon_mm_data_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (179),
		.FIFO_DEPTH          (17),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pattern_generator_a_avalon_mm_data_slave_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                                           //       clk.clk
		.reset             (dma_DDR_M_reset_n_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.in_data           (pattern_generator_a_avalon_mm_data_slave_agent_rf_source_data),             //        in.data
		.in_valid          (pattern_generator_a_avalon_mm_data_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (pattern_generator_a_avalon_mm_data_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pattern_generator_a_avalon_mm_data_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pattern_generator_a_avalon_mm_data_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pattern_generator_a_avalon_mm_data_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pattern_generator_a_avalon_mm_data_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pattern_generator_a_avalon_mm_data_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pattern_generator_a_avalon_mm_data_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pattern_generator_a_avalon_mm_data_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                     // (terminated)
		.csr_read          (1'b0),                                                                      // (terminated)
		.csr_write         (1'b0),                                                                      // (terminated)
		.csr_readdata      (),                                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                      // (terminated)
		.almost_full_data  (),                                                                          // (terminated)
		.almost_empty_data (),                                                                          // (terminated)
		.in_empty          (1'b0),                                                                      // (terminated)
		.out_empty         (),                                                                          // (terminated)
		.in_error          (1'b0),                                                                      // (terminated)
		.out_error         (),                                                                          // (terminated)
		.in_channel        (1'b0),                                                                      // (terminated)
		.out_channel       ()                                                                           // (terminated)
	);

	MebX_Qsys_Project_Burst_mm_interconnect_2_router router (
		.sink_ready         (dma_ddr_m_mm_read_agent_cp_ready),              //      sink.ready
		.sink_valid         (dma_ddr_m_mm_read_agent_cp_valid),              //          .valid
		.sink_data          (dma_ddr_m_mm_read_agent_cp_data),               //          .data
		.sink_startofpacket (dma_ddr_m_mm_read_agent_cp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (dma_ddr_m_mm_read_agent_cp_endofpacket),        //          .endofpacket
		.clk                (clk_100_clk_clk),                               //       clk.clk
		.reset              (dma_DDR_M_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                              //       src.ready
		.src_valid          (router_src_valid),                              //          .valid
		.src_data           (router_src_data),                               //          .data
		.src_channel        (router_src_channel),                            //          .channel
		.src_startofpacket  (router_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                         //          .endofpacket
	);

	MebX_Qsys_Project_Burst_mm_interconnect_2_router_001 router_001 (
		.sink_ready         (dma_ddr_m_mm_write_agent_cp_ready),             //      sink.ready
		.sink_valid         (dma_ddr_m_mm_write_agent_cp_valid),             //          .valid
		.sink_data          (dma_ddr_m_mm_write_agent_cp_data),              //          .data
		.sink_startofpacket (dma_ddr_m_mm_write_agent_cp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (dma_ddr_m_mm_write_agent_cp_endofpacket),       //          .endofpacket
		.clk                (clk_100_clk_clk),                               //       clk.clk
		.reset              (dma_DDR_M_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                          //       src.ready
		.src_valid          (router_001_src_valid),                          //          .valid
		.src_data           (router_001_src_data),                           //          .data
		.src_channel        (router_001_src_channel),                        //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                     //          .endofpacket
	);

	MebX_Qsys_Project_Burst_mm_interconnect_2_router_002 router_002 (
		.sink_ready         (communication_module_a_avalon_mm_data_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (communication_module_a_avalon_mm_data_slave_agent_rp_valid),         //          .valid
		.sink_data          (communication_module_a_avalon_mm_data_slave_agent_rp_data),          //          .data
		.sink_startofpacket (communication_module_a_avalon_mm_data_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (communication_module_a_avalon_mm_data_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                                    //       clk.clk
		.reset              (dma_DDR_M_reset_n_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.src_ready          (router_002_src_ready),                                               //       src.ready
		.src_valid          (router_002_src_valid),                                               //          .valid
		.src_data           (router_002_src_data),                                                //          .data
		.src_channel        (router_002_src_channel),                                             //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                          //          .endofpacket
	);

	MebX_Qsys_Project_Burst_mm_interconnect_2_router_003 router_003 (
		.sink_ready         (pattern_generator_a_avalon_mm_data_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (pattern_generator_a_avalon_mm_data_slave_agent_rp_valid),         //          .valid
		.sink_data          (pattern_generator_a_avalon_mm_data_slave_agent_rp_data),          //          .data
		.sink_startofpacket (pattern_generator_a_avalon_mm_data_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (pattern_generator_a_avalon_mm_data_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                                 //       clk.clk
		.reset              (dma_DDR_M_reset_n_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.src_ready          (router_003_src_ready),                                            //       src.ready
		.src_valid          (router_003_src_valid),                                            //          .valid
		.src_data           (router_003_src_data),                                             //          .data
		.src_channel        (router_003_src_channel),                                          //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                       //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (164),
		.PKT_DEST_ID_L             (164),
		.PKT_SRC_ID_H              (163),
		.PKT_SRC_ID_L              (163),
		.PKT_BYTE_CNT_H            (152),
		.PKT_BYTE_CNT_L            (142),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_TRANS_POSTED          (137),
		.PKT_TRANS_WRITE           (138),
		.MAX_OUTSTANDING_RESPONSES (16),
		.PIPELINED                 (0),
		.ST_DATA_W                 (178),
		.ST_CHANNEL_W              (2),
		.VALID_WIDTH               (2),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) dma_ddr_m_mm_read_limiter (
		.clk                    (clk_100_clk_clk),                                 //       clk.clk
		.reset                  (dma_DDR_M_reset_n_reset_bridge_in_reset_reset),   // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                //          .valid
		.cmd_sink_data          (router_src_data),                                 //          .data
		.cmd_sink_channel       (router_src_channel),                              //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                        //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                          //          .endofpacket
		.cmd_src_ready          (dma_ddr_m_mm_read_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (dma_ddr_m_mm_read_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (dma_ddr_m_mm_read_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (dma_ddr_m_mm_read_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (dma_ddr_m_mm_read_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                               //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                               //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                             //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                       //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                         //          .endofpacket
		.rsp_src_ready          (dma_ddr_m_mm_read_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (dma_ddr_m_mm_read_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (dma_ddr_m_mm_read_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (dma_ddr_m_mm_read_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (dma_ddr_m_mm_read_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (dma_ddr_m_mm_read_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (dma_ddr_m_mm_read_limiter_cmd_valid_data)         // cmd_valid.data
	);

	MebX_Qsys_Project_Burst_mm_interconnect_2_cmd_demux cmd_demux (
		.clk                (clk_100_clk_clk),                                 //        clk.clk
		.reset              (dma_DDR_M_reset_n_reset_bridge_in_reset_reset),   //  clk_reset.reset
		.sink_ready         (dma_ddr_m_mm_read_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (dma_ddr_m_mm_read_limiter_cmd_src_channel),       //           .channel
		.sink_data          (dma_ddr_m_mm_read_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (dma_ddr_m_mm_read_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (dma_ddr_m_mm_read_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (dma_ddr_m_mm_read_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                            //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                            //           .valid
		.src0_data          (cmd_demux_src0_data),                             //           .data
		.src0_channel       (cmd_demux_src0_channel),                          //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                    //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                      //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                            //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                            //           .valid
		.src1_data          (cmd_demux_src1_data),                             //           .data
		.src1_channel       (cmd_demux_src1_channel),                          //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                    //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket)                       //           .endofpacket
	);

	MebX_Qsys_Project_Burst_mm_interconnect_2_cmd_demux_001 cmd_demux_001 (
		.clk                (clk_100_clk_clk),                               //       clk.clk
		.reset              (dma_DDR_M_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                          //      sink.ready
		.sink_channel       (router_001_src_channel),                        //          .channel
		.sink_data          (router_001_src_data),                           //          .data
		.sink_startofpacket (router_001_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_001_src_valid),                          //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                      //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                      //          .valid
		.src0_data          (cmd_demux_001_src0_data),                       //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                    //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket)                 //          .endofpacket
	);

	MebX_Qsys_Project_Burst_mm_interconnect_2_cmd_mux cmd_mux (
		.clk                 (clk_100_clk_clk),                               //       clk.clk
		.reset               (dma_DDR_M_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_src_valid),                             //          .valid
		.src_data            (cmd_mux_src_data),                              //          .data
		.src_channel         (cmd_mux_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                        //          .channel
		.sink0_data          (cmd_demux_src0_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                    //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                      //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                      //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                    //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                       //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                 //          .endofpacket
	);

	MebX_Qsys_Project_Burst_mm_interconnect_2_cmd_mux_001 cmd_mux_001 (
		.clk                 (clk_100_clk_clk),                               //       clk.clk
		.reset               (dma_DDR_M_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                         //          .valid
		.src_data            (cmd_mux_001_src_data),                          //          .data
		.src_channel         (cmd_mux_001_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                        //          .channel
		.sink0_data          (cmd_demux_src1_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                     //          .endofpacket
	);

	MebX_Qsys_Project_Burst_mm_interconnect_2_rsp_demux rsp_demux (
		.clk                (clk_100_clk_clk),                               //       clk.clk
		.reset              (dma_DDR_M_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                          //      sink.ready
		.sink_channel       (router_002_src_channel),                        //          .channel
		.sink_data          (router_002_src_data),                           //          .data
		.sink_startofpacket (router_002_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_002_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_src0_data),                           //          .data
		.src0_channel       (rsp_demux_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                    //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                          //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                          //          .valid
		.src1_data          (rsp_demux_src1_data),                           //          .data
		.src1_channel       (rsp_demux_src1_channel),                        //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                  //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                     //          .endofpacket
	);

	MebX_Qsys_Project_Burst_mm_interconnect_2_cmd_demux_001 rsp_demux_001 (
		.clk                (clk_100_clk_clk),                               //       clk.clk
		.reset              (dma_DDR_M_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                          //      sink.ready
		.sink_channel       (router_003_src_channel),                        //          .channel
		.sink_data          (router_003_src_data),                           //          .data
		.sink_startofpacket (router_003_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_003_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_001_src0_data),                       //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                 //          .endofpacket
	);

	MebX_Qsys_Project_Burst_mm_interconnect_2_rsp_mux rsp_mux (
		.clk                 (clk_100_clk_clk),                               //       clk.clk
		.reset               (dma_DDR_M_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                             //       src.ready
		.src_valid           (rsp_mux_src_valid),                             //          .valid
		.src_data            (rsp_mux_src_data),                              //          .data
		.src_channel         (rsp_mux_src_channel),                           //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                          //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                          //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                        //          .channel
		.sink0_data          (rsp_demux_src0_data),                           //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                    //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                      //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                      //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                    //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                       //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket)                 //          .endofpacket
	);

	MebX_Qsys_Project_Burst_mm_interconnect_2_rsp_mux_001 rsp_mux_001 (
		.clk                 (clk_100_clk_clk),                               //       clk.clk
		.reset               (dma_DDR_M_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                         //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                         //          .valid
		.src_data            (rsp_mux_001_src_data),                          //          .data
		.src_channel         (rsp_mux_001_src_channel),                       //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                          //     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                          //          .valid
		.sink0_channel       (rsp_demux_src1_channel),                        //          .channel
		.sink0_data          (rsp_demux_src1_data),                           //          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket)                     //          .endofpacket
	);

	MebX_Qsys_Project_Burst_mm_interconnect_2_avalon_st_adapter #(
		.inBitsPerSymbol (66),
		.inUsePackets    (0),
		.inDataWidth     (66),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (66),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_100_clk_clk),                                                        // in_clk_0.clk
		.in_rst_0_reset (dma_DDR_M_reset_n_reset_bridge_in_reset_reset),                          // in_rst_0.reset
		.in_0_data      (communication_module_a_avalon_mm_data_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (communication_module_a_avalon_mm_data_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (communication_module_a_avalon_mm_data_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                                           //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                                          //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                                          //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                                           //         .error
	);

	MebX_Qsys_Project_Burst_mm_interconnect_2_avalon_st_adapter #(
		.inBitsPerSymbol (66),
		.inUsePackets    (0),
		.inDataWidth     (66),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (66),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_100_clk_clk),                                                     // in_clk_0.clk
		.in_rst_0_reset (dma_DDR_M_reset_n_reset_bridge_in_reset_reset),                       // in_rst_0.reset
		.in_0_data      (pattern_generator_a_avalon_mm_data_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (pattern_generator_a_avalon_mm_data_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (pattern_generator_a_avalon_mm_data_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                                   //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                                   //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                                    //         .error
	);

endmodule
