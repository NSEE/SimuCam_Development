
MemTest.elf:     file format elf32-littlenios2
MemTest.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x81100244

Program Header:
    LOAD off    0x00001020 vaddr 0x81100020 paddr 0x81100020 align 2**12
         filesz 0x0001bc88 memsz 0x0001c328 flags rwx
    LOAD off    0x0001d000 vaddr 0x86020000 paddr 0x86020000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  86020000  86020000  0001d000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  81100020  81100020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00018910  81100244  81100244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001410  81118b54  81118b54  00019b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001d44  81119f64  81119f64  0001af64  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000006a0  8111bca8  8111bca8  0001cca8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  8111c348  8111c348  0001d000  2**0
                  CONTENTS
  7 .ext_flash    00000000  86020020  86020020  0001d000  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001d000  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001150  00000000  00000000  0001d028  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002c794  00000000  00000000  0001e178  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000b1c1  00000000  00000000  0004a90c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000edf8  00000000  00000000  00055acd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002fb4  00000000  00000000  000648c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004eaf  00000000  00000000  0006787c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001d71c  00000000  00000000  0006c72b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00089e48  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001be8  00000000  00000000  00089e88  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0008ffa5  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0008ffa8  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0008ffb4  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0008ffb5  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0008ffb6  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0008ffba  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0008ffbe  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0008ffc2  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0008ffcd  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0008ffd8  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000011  00000000  00000000  0008ffe3  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000053  00000000  00000000  0008fff4  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00245bca  00000000  00000000  00090047  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
86020000 l    d  .entry	00000000 .entry
81100020 l    d  .exceptions	00000000 .exceptions
81100244 l    d  .text	00000000 .text
81118b54 l    d  .rodata	00000000 .rodata
81119f64 l    d  .rwdata	00000000 .rwdata
8111bca8 l    d  .bss	00000000 .bss
8111c348 l    d  .onchip_memory	00000000 .onchip_memory
86020020 l    d  .ext_flash	00000000 .ext_flash
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../MemTest_bsp//obj/HAL/src/crt0.o
811002e8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 ddr2.c
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
81119816 l     O .rodata	00000010 zeroes.4389
81119826 l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 vfprintf.c
81119836 l     O .rodata	00000010 zeroes.4404
81107340 l     F .text	000000bc __sbprintf
81119846 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
81107550 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
81109080 l     F .text	00000008 __fp_unlock
81109094 l     F .text	0000019c __sinit.part.1
81109230 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
81119f64 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
8111a3a8 l     O .rwdata	00000020 lc_ctype_charset
8111a388 l     O .rwdata	00000020 lc_message_charset
8111a3c8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
81119878 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
811199ac l     O .rodata	00000010 blanks.4332
8111999c l     O .rodata	00000010 zeroes.4333
00000000 l    df *ABS*	00000000 vfprintf.c
8110da58 l     F .text	000000fc __sprint_r.part.0
811199cc l     O .rodata	00000010 blanks.4348
811199bc l     O .rodata	00000010 zeroes.4349
8110efe4 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
81112c3c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
81112d68 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
81112d94 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
81112e80 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_log_macro.o
81112f68 l       .text	00000000 tx_next_char
81112f90 l       .text	00000000 end_tx
81112f70 l       .text	00000000 wait_tx_ready_loop
00000000 l    df *ABS*	00000000 alt_log_printf.c
00000000 l    df *ABS*	00000000 alt_lseek.c
81113a1c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
81113cc8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
8111bc90 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
811140e8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
81114228 l     F .text	00000034 alt_dev_reg
8111aa4c l     O .rwdata	00001060 jtag_uart_0
8111baac l     O .rwdata	000000c4 rs232_uart
8111bb70 l     O .rwdata	00000060 dma_DDR_M1
8111bbd0 l     O .rwdata	00000060 dma_DDR_M2
8111bc30 l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
81114620 l     F .text	00000224 altera_avalon_jtag_uart_irq
81114844 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
81114e7c l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
81115130 l     F .text	0000009c altera_avalon_uart_irq
811151cc l     F .text	000000e4 altera_avalon_uart_rxirq
811152b0 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
8111544c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
81115664 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_msgdma.c
8111584c l     F .text	0000003c alt_get_errno
81115888 l     F .text	00000094 alt_msgdma_write_standard_descriptor
8111591c l     F .text	0000012c alt_msgdma_write_extended_descriptor
81115a48 l     F .text	00000184 alt_msgdma_irq
81115bcc l     F .text	0000008c alt_msgdma_construct_standard_descriptor
81115c58 l     F .text	00000154 alt_msgdma_construct_extended_descriptor
81115dac l     F .text	000002d0 alt_msgdma_descriptor_async_transfer
8111607c l     F .text	00000378 alt_msgdma_descriptor_sync_transfer
811166c4 l     F .text	000000a4 alt_msgdma_construct_prefetcher_standard_descriptor
81116768 l     F .text	00000194 alt_msgdma_construct_prefetcher_extended_descriptor
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
8111791c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
81117dec l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
81117f2c l     F .text	0000003c alt_get_errno
81117f68 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
8111bcf0 g     O .bss	00000004 alt_instruction_exception_handler
811175d8 g     F .text	0000003c alt_msgdma_standard_descriptor_async_transfer
81102d0c g     F .text	00000018 putchar
8110bb28 g     F .text	00000074 _mprec_log10
81101d28 g     F .text	00000100 I2C_Read
8110bc14 g     F .text	0000008c __any_on
8110f6d8 g     F .text	00000054 _isatty_r
81119884 g     O .rodata	00000028 __mprec_tinytens
81113b2c g     F .text	00000154 alt_main
81102d24 g     F .text	000000c0 _puts_r
8111c248 g     O .bss	00000100 alt_irq
8110f72c g     F .text	00000060 _lseek_r
811117cc g     F .text	00000088 .hidden __eqdf2
811164a4 g     F .text	00000058 alt_msgdma_construct_standard_mm_to_mm_descriptor
8111c348 g       *ABS*	00000000 __alt_heap_start
81102cc8 g     F .text	0000003c printf
8110f7ec g     F .text	0000009c _wcrtomb_r
8110c50c g     F .text	0000005c __sseek
811093d0 g     F .text	00000010 __sinit
8110f0a0 g     F .text	00000140 __swbuf_r
81109e98 g     F .text	0000007c _setlocale_r
8111bd1c g     O .bss	00000100 cDebugBuffer
81109238 g     F .text	00000068 __sfmoreglue
81113ca4 g     F .text	00000024 __malloc_unlock
81101b58 g     F .text	00000078 uliXorshift32
81102388 g     F .text	00000440 .hidden __divsf3
8111381c g     F .text	0000005c alt_log_jtag_uart_isr_proc
8110aa20 g     F .text	0000015c memmove
811093b8 g     F .text	00000018 _cleanup
8110aca4 g     F .text	000000a8 _Balloc
811163f4 g     F .text	00000058 alt_msgdma_construct_standard_st_to_mm_descriptor
8111bcc8 g     O .bss	00000001 alt_log_write_on_flag
81111854 g     F .text	000000dc .hidden __gtdf2
811183e8 g     F .text	00000024 altera_nios2_gen2_irq_init
8111bccb g     O .bss	00000001 alt_log_jtag_uart_isr_on_flag
81102084 g     F .text	00000130 i2c_write
86020000 g     F .entry	00000000 __reset
8110f67c g     F .text	0000005c _fstat_r
8111bcc4 g     O .bss	00000004 errno
8110c488 g     F .text	00000008 __seofread
8111c21c g     O .bss	00000011 alt_log_write_buf
8110c81c g     F .text	0000123c ___svfiprintf_internal_r
8111bcdc g     O .bss	00000004 alt_argv
81123c5c g       *ABS*	00000000 _gp
811140b8 g     F .text	00000030 usleep
81116f14 g     F .text	000000d4 alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits
8111a830 g     O .rwdata	00000180 alt_fd_list
8111a9cc g     O .rwdata	0000001d alt_log_msg_alt_main
81102d04 g     F .text	00000008 _putchar_r
8111bcca g     O .bss	00000001 alt_log_jtag_uart_alarm_on_flag
81117abc g     F .text	00000090 alt_find_dev
81102b50 g     F .text	00000148 memcpy
81109088 g     F .text	0000000c _cleanup_r
81112ab8 g     F .text	000000dc .hidden __floatsidf
81117eb0 g     F .text	0000007c alt_io_redirect
81111930 g     F .text	000000f4 .hidden __ltdf2
81118b54 g       *ABS*	00000000 __DTOR_END__
81117334 g     F .text	0000008c alt_msgdma_start_prefetcher_with_extd_desc_list
81117614 g     F .text	0000003c alt_msgdma_extended_descriptor_async_transfer
81117584 g     F .text	00000054 alt_msgdma_register_callback
81102de4 g     F .text	00000014 puts
811185b8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
8110c36c g     F .text	00000074 __fpclassifyd
8110ba84 g     F .text	000000a4 __ratio
8110efc8 g     F .text	0000001c __vfiprintf_internal
81114a3c g     F .text	0000021c altera_avalon_jtag_uart_read
81116bf4 g     F .text	000000f0 alt_msgdma_prefetcher_add_standard_desc_to_list
81102c98 g     F .text	00000030 _printf_r
8111057c g     F .text	00000064 .hidden __udivsi3
81112ebc g     F .text	000000a4 isatty
811198d4 g     O .rodata	000000c8 __mprec_tens
81109f14 g     F .text	0000000c __locale_charset
81101e28 g     F .text	00000158 I2C_MultipleRead
811139b0 g     F .text	0000006c alt_log_system_clock
8111bcc0 g     O .bss	00000004 __malloc_top_pad
8111bc64 g     O .rwdata	00000004 __mb_cur_max
81109f44 g     F .text	0000000c _localeconv_r
8110b0b0 g     F .text	0000003c __i2b
81109854 g     F .text	000004bc __sfvwrite_r
811135f0 g     F .text	00000058 alt_log_printf_proc
8110c3e0 g     F .text	00000054 _sbrk_r
8111bccc g     O .bss	00000001 alt_log_jtag_uart_startup_info_on_flag
8110f78c g     F .text	00000060 _read_r
81101858 g     F .text	00000300 bDdr2MemoryRandomReadTest
8111bc84 g     O .rwdata	00000004 alt_max_fd
8110f370 g     F .text	000000f0 _fclose_r
81109050 g     F .text	00000030 fflush
8111bcbc g     O .bss	00000004 __malloc_max_sbrked_mem
811029dc g     F .text	00000110 .hidden __extendsfdf2
81101bd0 g     F .text	00000080 I2C_TestAdress
81110638 g     F .text	000008ac .hidden __adddf3
8111c230 g     O .bss	00000018 alt_log_jtag_uart_alarm_1
8110b82c g     F .text	0000010c __b2d
81116954 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor
8110ff4c g     F .text	00000538 .hidden __umoddi3
81113a58 g     F .text	000000d4 lseek
8111bc5c g     O .rwdata	00000004 _global_impure_ptr
8110be08 g     F .text	00000564 _realloc_r
8111c348 g       *ABS*	00000000 __bss_end
81117cfc g     F .text	000000f0 alt_iic_isr_register
81113fb0 g     F .text	00000108 alt_tick
81117418 g     F .text	0000016c alt_msgdma_init
8110f9d4 g     F .text	00000578 .hidden __udivdi3
8110f5d8 g     F .text	00000024 _fputwc_r
811198ac g     O .rodata	00000028 __mprec_bigtens
8110ae94 g     F .text	00000104 __s2b
81112b94 g     F .text	000000a8 .hidden __floatunsidf
8111bcd0 g     O .bss	00000004 alt_system_clock_in_sec
811137d0 g     F .text	0000004c alt_log_jtag_uart_startup_info
8110b56c g     F .text	00000060 __mcmp
81115084 g     F .text	000000ac altera_avalon_uart_init
8111768c g     F .text	0000003c alt_msgdma_extended_descriptor_sync_transfer
811093f0 g     F .text	00000018 __fp_lock_all
81117cb0 g     F .text	0000004c alt_ic_irq_enabled
81101c50 g     F .text	000000d8 I2C_Write
81113f14 g     F .text	0000009c alt_alarm_stop
8111bcc9 g     O .bss	00000001 alt_log_sys_clk_on_flag
8111bcec g     O .bss	00000004 alt_irq_active
811000fc g     F .exceptions	000000d4 alt_irq_handler
81113040 g     F .text	000005b0 alt_log_private_printf
8111a808 g     O .rwdata	00000028 alt_dev_null
8111658c g     F .text	00000090 alt_msgdma_construct_extended_mm_to_st_descriptor
8111a9b0 g     O .rwdata	00000019 alt_log_msg_bss
81101f80 g     F .text	0000008c i2c_start
811172a8 g     F .text	0000008c alt_msgdma_start_prefetcher_with_std_desc_list
81112d48 g     F .text	00000020 alt_dcache_flush_all
8110af98 g     F .text	00000068 __hi0bits
81112a38 g     F .text	00000080 .hidden __fixdfsi
81100000 g       *ABS*	00000000 __alt_mem_onchip_memory
8111bc7c g     O .rwdata	00000008 alt_dev_list
81114124 g     F .text	00000104 write
8110bca0 g     F .text	000000a0 _putc_r
81112dd0 g     F .text	000000b0 fstat
81111930 g     F .text	000000f4 .hidden __ledf2
8110b2e4 g     F .text	00000140 __pow5mult
8110db6c g     F .text	0000145c ___vfiprintf_internal_r
8111bcb4 g     O .bss	00000004 __nlocale_changed
811105e0 g     F .text	00000058 .hidden __umodsi3
811169ac g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor
8111c348 g       *ABS*	00000000 end
811156a0 g     F .text	000001ac altera_avalon_uart_write
81112f94 g     F .text	0000004c alt_log_txchar
811144e0 g     F .text	00000140 altera_avalon_jtag_uart_init
811001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
81118b54 g       *ABS*	00000000 __CTOR_LIST__
811e0000 g       *ABS*	00000000 __alt_stack_pointer
81101568 g     F .text	000002f0 bDdr2MemoryRandomWriteTest
81114ef8 g     F .text	0000007c alt_avalon_timer_sc_init
81114fd4 g     F .text	00000060 altera_avalon_uart_write_fd
81102aec g     F .text	00000064 .hidden __clzsi2
81115034 g     F .text	00000050 altera_avalon_uart_close_fd
81114c58 g     F .text	00000224 altera_avalon_jtag_uart_write
811093e0 g     F .text	00000004 __sfp_lock_acquire
8110a93c g     F .text	000000e4 memchr
8110512c g     F .text	000021f8 ___vfprintf_internal_r
81102df8 g     F .text	00000058 _sprintf_r
81109544 g     F .text	00000310 _free_r
81118180 g     F .text	0000022c alt_printf
81109f20 g     F .text	00000010 __locale_mb_cur_max
81118920 g     F .text	00000180 __call_exitprocs
8111bcb0 g     O .bss	00000004 __mlocale_changed
8111bc68 g     O .rwdata	00000004 __malloc_sbrk_base
81100244 g     F .text	000000a8 _start
8111bce4 g     O .bss	00000004 _alt_tick_rate
8110b424 g     F .text	00000148 __lshift
8111644c g     F .text	00000058 alt_msgdma_construct_standard_mm_to_st_descriptor
8111bce8 g     O .bss	00000004 _alt_nticks
81113d04 g     F .text	000000fc read
81114294 g     F .text	000000e8 alt_sys_init
811027c8 g     F .text	00000124 .hidden __floatsisf
8110c64c g     F .text	000001d0 __ssprint_r
811005a0 g     F .text	0000075c bDdr2EepromDump
81118808 g     F .text	00000118 __register_exitproc
81112f60 g       .text	00000000 tx_log_str
8110b0ec g     F .text	000001f8 __multiply
811148e4 g     F .text	00000068 altera_avalon_jtag_uart_close
8111871c g     F .text	000000ec strncpy
8111bcf4 g     O .bss	00000028 __malloc_current_mallinfo
8110b938 g     F .text	0000014c __d2b
8111bc8c g     O .rwdata	00000004 alt_log_boot_on_flag
8111437c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
81118514 g     F .text	000000a4 alt_get_fd
811177f4 g     F .text	00000128 alt_busy_sleep
8110f258 g     F .text	00000054 _close_r
811136e0 g     F .text	000000f0 alt_log_jtag_uart_print_control_reg
811168fc g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor
811186a0 g     F .text	0000007c memcmp
8111443c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
8111c348 g       *ABS*	00000000 __alt_stack_base
8111448c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
81116a04 g     F .text	000000a0 alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor
811073fc g     F .text	00000154 __swsetup_r
81110ee4 g     F .text	000008e8 .hidden __divdf3
811092a0 g     F .text	00000118 __sfp
8110bb9c g     F .text	00000078 __copybits
8111a400 g     O .rwdata	00000408 __malloc_av_
811093ec g     F .text	00000004 __sinit_lock_release
8111bca8 g     O .bss	00000004 uliInitialState
8110200c g     F .text	00000078 i2c_stop
81111a24 g     F .text	00000718 .hidden __muldf3
8110c434 g     F .text	00000054 __sread
8111840c g     F .text	00000108 alt_find_file
81117958 g     F .text	000000a4 alt_dev_llist_insert
81113c80 g     F .text	00000024 __malloc_lock
81113e64 g     F .text	000000b0 sbrk
81102f54 g     F .text	000021d8 ___svfprintf_internal_r
81108ff4 g     F .text	0000005c _fflush_r
8110f2ac g     F .text	000000c4 _calloc_r
8111bca8 g       *ABS*	00000000 __bss_start
8110ab7c g     F .text	00000128 memset
811173c0 g     F .text	00000058 alt_msgdma_open
8110230c g     F .text	0000007c main
8111bce0 g     O .bss	00000004 alt_envp
8111bcb8 g     O .bss	00000004 __malloc_max_total_mem
81116ce4 g     F .text	00000198 alt_msgdma_prefetcher_add_extended_desc_to_list
811143dc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
811021b4 g     F .text	00000158 i2c_read
8110f1e0 g     F .text	00000018 __swbuf
8110c568 g     F .text	00000008 __sclose
811e0000 g       *ABS*	00000000 __alt_heap_limit
8110f460 g     F .text	00000014 fclose
81107750 g     F .text	00001688 _dtoa_r
81116fe8 g     F .text	000002c0 alt_msgdma_start_prefetcher_with_list_addr
8110a130 g     F .text	0000080c _malloc_r
8110f948 g     F .text	00000030 __ascii_wctomb
8111bc88 g     O .rwdata	00000004 alt_errno
81116b3c g     F .text	000000b8 alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor
81113648 g     F .text	00000098 altera_avalon_jtag_uart_report_log
81109d10 g     F .text	000000c4 _fwalk
8110bd40 g     F .text	000000c8 putc
81110484 g     F .text	00000084 .hidden __divsi3
8111aa20 g     O .rwdata	0000002a alt_log_msg_cache
81109420 g     F .text	00000124 _malloc_trim_r
81118b54 g       *ABS*	00000000 __CTOR_END__
811002ec g     F .text	000002b4 bDdr2EepromTest
8110c570 g     F .text	000000dc strcmp
81118b54 g       *ABS*	00000000 __DTOR_LIST__
811117cc g     F .text	00000088 .hidden __nedf2
8111425c g     F .text	00000038 alt_irq_init
81113e00 g     F .text	00000064 alt_release_fd
81117650 g     F .text	0000003c alt_msgdma_standard_descriptor_sync_transfer
8111a9ec g     O .rwdata	00000031 alt_log_msg_stackpointer
81102e50 g     F .text	0000006c sprintf
811196ce g     O .rodata	00000100 .hidden __clz_tab
81100d8c g     F .text	00000434 bDdr2MemoryWriteTest
8111bcac g     O .bss	00000004 _PathLocale
81118654 g     F .text	00000014 atexit
8110f1f8 g     F .text	00000060 _write_r
81109f50 g     F .text	00000018 setlocale
81116aa4 g     F .text	00000098 alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor
8111bc60 g     O .rwdata	00000004 _impure_ptr
8111bcd8 g     O .bss	00000004 alt_argc
81108dd8 g     F .text	0000021c __sflush_r
81117a5c g     F .text	00000060 _do_dtors
81109f3c g     F .text	00000008 __locale_cjk_lang
81100020 g       .exceptions	00000000 alt_irq_entry
8110b7c8 g     F .text	00000064 __ulp
81109408 g     F .text	00000018 __fp_unlock_all
8111bc74 g     O .rwdata	00000008 alt_fs_list
8111be1c g     O .bss	00000400 xSZData
81109f68 g     F .text	0000000c localeconv
8111bcd4 g     O .bss	00000004 alt_log_sys_clk_count
81113878 g     F .text	00000138 alt_log_write
81117b4c g     F .text	00000050 alt_ic_isr_register
8111bca8 g       *ABS*	00000000 _edata
81114f74 g     F .text	00000060 altera_avalon_uart_read_fd
8111c348 g       *ABS*	00000000 _end
81100cfc g     F .text	00000090 bDdr2SwitchMemory
8110f474 g     F .text	00000164 __fputwc
8111494c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
81117c24 g     F .text	0000008c alt_ic_irq_disable
8110c490 g     F .text	0000007c __swrite
8111bc6c g     O .rwdata	00000004 __malloc_trim_threshold
81109f30 g     F .text	0000000c __locale_msgcharset
81118668 g     F .text	00000038 exit
81109dd4 g     F .text	000000c4 _fwalk_reent
81116e7c g     F .text	00000098 alt_msgdma_prefetcher_set_std_list_own_by_hw_bits
811028ec g     F .text	000000f0 .hidden __floatunsisf
8110b5cc g     F .text	000001fc __mdiff
81110508 g     F .text	00000074 .hidden __modsi3
811e0000 g       *ABS*	00000000 __alt_data_end
81100020 g     F .exceptions	00000000 alt_exception
811093e4 g     F .text	00000004 __sfp_lock_release
8111661c g     F .text	000000a8 alt_msgdma_construct_extended_mm_to_mm_descriptor
811011c0 g     F .text	000003a8 bDdr2MemoryReadTest
84000000 g       *ABS*	00000000 __alt_mem_ext_flash
811164fc g     F .text	00000090 alt_msgdma_construct_extended_st_to_mm_descriptor
811153f8 g     F .text	00000054 altera_avalon_uart_close
81118aa0 g     F .text	000000b4 _exit
811176c8 g     F .text	0000012c alt_alarm_start
81109f74 g     F .text	000001bc __smakebuf_r
8111bc9c g     O .rwdata	00000008 alt_msgdma_list
81102ebc g     F .text	00000098 strlen
8111802c g     F .text	00000154 open
81111854 g     F .text	000000dc .hidden __gedf2
811183ac g     F .text	0000003c alt_putchar
8111bc70 g     O .rwdata	00000004 __wctomb
8110db54 g     F .text	00000018 __sprint_r
8111bca4 g     O .rwdata	00000004 alt_priority_mask
81117b9c g     F .text	00000088 alt_ic_irq_enable
81107324 g     F .text	0000001c __vfprintf_internal
81115488 g     F .text	000001dc altera_avalon_uart_read
8110f978 g     F .text	0000005c _wctomb_r
8111213c g     F .text	000008fc .hidden __subdf3
8110b000 g     F .text	000000b0 __lo0bits
8111bc94 g     O .rwdata	00000008 alt_alarm_list
811179fc g     F .text	00000060 _do_ctors
8110f888 g     F .text	000000c0 wcrtomb
81112c78 g     F .text	000000d0 close
81112fe0 g     F .text	00000060 alt_log_repchar
8110f5fc g     F .text	00000080 fputwc
811093e8 g     F .text	00000004 __sinit_lock_acquire
8110ad74 g     F .text	00000120 __multadd
8110ad4c g     F .text	00000028 _Bfree



Disassembly of section .exceptions:

81100020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
81100020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
81100024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
81100028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
8110002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
81100030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
81100034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
81100038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
8110003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
81100040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
81100044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
81100048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
8110004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
81100050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
81100054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
81100058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
8110005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
81100060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
81100064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
81100068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
8110006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
81100070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
81100074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
81100078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
8110007c:	10000326 	beq	r2,zero,8110008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
81100080:	20000226 	beq	r4,zero,8110008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
81100084:	11000fc0 	call	811000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
81100088:	00000706 	br	811000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
8110008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
81100090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
81100094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
81100098:	11001d00 	call	811001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
8110009c:	1000021e 	bne	r2,zero,811000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
811000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
811000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
811000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
811000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
811000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
811000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
811000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
811000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
811000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
811000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
811000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
811000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
811000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
811000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
811000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
811000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
811000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
811000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
811000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
811000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
811000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
811000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
811000f8:	ef80083a 	eret

811000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
811000fc:	defff904 	addi	sp,sp,-28
81100100:	dfc00615 	stw	ra,24(sp)
81100104:	df000515 	stw	fp,20(sp)
81100108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
8110010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
81100110:	0005313a 	rdctl	r2,ipending
81100114:	e0bffe15 	stw	r2,-8(fp)

  return active;
81100118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
8110011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
81100120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
81100124:	00800044 	movi	r2,1
81100128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
8110012c:	e0fffb17 	ldw	r3,-20(fp)
81100130:	e0bffc17 	ldw	r2,-16(fp)
81100134:	1884703a 	and	r2,r3,r2
81100138:	10001426 	beq	r2,zero,8110018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
8110013c:	00a044b4 	movhi	r2,33042
81100140:	10b09204 	addi	r2,r2,-15800
81100144:	e0fffd17 	ldw	r3,-12(fp)
81100148:	180690fa 	slli	r3,r3,3
8110014c:	10c5883a 	add	r2,r2,r3
81100150:	10c00017 	ldw	r3,0(r2)
81100154:	00a044b4 	movhi	r2,33042
81100158:	10b09204 	addi	r2,r2,-15800
8110015c:	e13ffd17 	ldw	r4,-12(fp)
81100160:	200890fa 	slli	r4,r4,3
81100164:	1105883a 	add	r2,r2,r4
81100168:	10800104 	addi	r2,r2,4
8110016c:	10800017 	ldw	r2,0(r2)
81100170:	1009883a 	mov	r4,r2
81100174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
81100178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
8110017c:	0005313a 	rdctl	r2,ipending
81100180:	e0bfff15 	stw	r2,-4(fp)

  return active;
81100184:	e0bfff17 	ldw	r2,-4(fp)
81100188:	00000706 	br	811001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
8110018c:	e0bffc17 	ldw	r2,-16(fp)
81100190:	1085883a 	add	r2,r2,r2
81100194:	e0bffc15 	stw	r2,-16(fp)
      i++;
81100198:	e0bffd17 	ldw	r2,-12(fp)
8110019c:	10800044 	addi	r2,r2,1
811001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
811001a4:	003fe106 	br	8110012c <__reset+0xfb0e012c>

    active = alt_irq_pending ();
811001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
811001ac:	e0bffb17 	ldw	r2,-20(fp)
811001b0:	103fdb1e 	bne	r2,zero,81100120 <__reset+0xfb0e0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
811001b4:	0001883a 	nop
}
811001b8:	0001883a 	nop
811001bc:	e037883a 	mov	sp,fp
811001c0:	dfc00117 	ldw	ra,4(sp)
811001c4:	df000017 	ldw	fp,0(sp)
811001c8:	dec00204 	addi	sp,sp,8
811001cc:	f800283a 	ret

811001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
811001d0:	defffb04 	addi	sp,sp,-20
811001d4:	dfc00415 	stw	ra,16(sp)
811001d8:	df000315 	stw	fp,12(sp)
811001dc:	df000304 	addi	fp,sp,12
811001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
811001e4:	000531fa 	rdctl	r2,exception
811001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
811001ec:	e0bffd17 	ldw	r2,-12(fp)
811001f0:	10801f0c 	andi	r2,r2,124
811001f4:	1004d0ba 	srli	r2,r2,2
811001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
811001fc:	0005333a 	rdctl	r2,badaddr
81100200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
81100204:	d0a02517 	ldw	r2,-32620(gp)
81100208:	10000726 	beq	r2,zero,81100228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
8110020c:	d0a02517 	ldw	r2,-32620(gp)
81100210:	e0fffd17 	ldw	r3,-12(fp)
81100214:	e1bffe17 	ldw	r6,-8(fp)
81100218:	e17fff17 	ldw	r5,-4(fp)
8110021c:	1809883a 	mov	r4,r3
81100220:	103ee83a 	callr	r2
81100224:	00000206 	br	81100230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
81100228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
8110022c:	0005883a 	mov	r2,zero
}
81100230:	e037883a 	mov	sp,fp
81100234:	dfc00117 	ldw	ra,4(sp)
81100238:	df000017 	ldw	fp,0(sp)
8110023c:	dec00204 	addi	sp,sp,8
81100240:	f800283a 	ret

Disassembly of section .text:

81100244 <_start>:
    .int 2, 1, 0b, 1b
    .popsection
#endif /* Initialize Data Cache */

    /* Log that caches have been initialized. */
    ALT_LOG_PUTS(alt_log_msg_cache)
81100244:	012044b4 	movhi	r4,33042
81100248:	212f2304 	addi	r4,r4,-17268
8110024c:	21400037 	ldwio	r5,0(r4)
81100250:	01400326 	beq	zero,r5,81100260 <_start+0x1c>
81100254:	012044b4 	movhi	r4,33042
81100258:	212a8804 	addi	r4,r4,-21984
8110025c:	1112f600 	call	81112f60 <tx_log_str>

    /* Log that the stack pointer is about to be setup. */
    ALT_LOG_PUTS(alt_log_msg_stackpointer)
81100260:	012044b4 	movhi	r4,33042
81100264:	212f2304 	addi	r4,r4,-17268
81100268:	21400037 	ldwio	r5,0(r4)
8110026c:	01400326 	beq	zero,r5,8110027c <_start+0x38>
81100270:	012044b4 	movhi	r4,33042
81100274:	212a7b04 	addi	r4,r4,-22036
81100278:	1112f600 	call	81112f60 <tx_log_str>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
8110027c:	06e047b4 	movhi	sp,33054
    ori sp, sp, %lo(__alt_stack_pointer)
81100280:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
81100284:	06a044b4 	movhi	gp,33042
    ori gp, gp, %lo(_gp)
81100288:	d68f1714 	ori	gp,gp,15452
 * by the linker script. They mark the begining and the end of the bss
 * region. The linker script guarantees that these values are word aligned.
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)
8110028c:	012044b4 	movhi	r4,33042
81100290:	212f2304 	addi	r4,r4,-17268
81100294:	21400037 	ldwio	r5,0(r4)
81100298:	01400326 	beq	zero,r5,811002a8 <_start+0x64>
8110029c:	012044b4 	movhi	r4,33042
811002a0:	212a6c04 	addi	r4,r4,-22096
811002a4:	1112f600 	call	81112f60 <tx_log_str>

    movhi r2, %hi(__bss_start)
811002a8:	00a04474 	movhi	r2,33041
    ori r2, r2, %lo(__bss_start)
811002ac:	10af2a14 	ori	r2,r2,48296

    movhi r3, %hi(__bss_end)
811002b0:	00e04474 	movhi	r3,33041
    ori r3, r3, %lo(__bss_end)
811002b4:	18f0d214 	ori	r3,r3,49992

    beq r2, r3, 1f
811002b8:	10c00326 	beq	r2,r3,811002c8 <_start+0x84>

0:
    stw zero, (r2)
811002bc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
811002c0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
811002c4:	10fffd36 	bltu	r2,r3,811002bc <__reset+0xfb0e02bc>

    ldw   et, %gprel(alt_stack_limit_value)(gp)
#endif

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)
811002c8:	012044b4 	movhi	r4,33042
811002cc:	212f2304 	addi	r4,r4,-17268
811002d0:	21400037 	ldwio	r5,0(r4)
811002d4:	01400326 	beq	zero,r5,811002e4 <_start+0xa0>
811002d8:	012044b4 	movhi	r4,33042
811002dc:	212a7304 	addi	r4,r4,-22068
811002e0:	1112f600 	call	81112f60 <tx_log_str>

    /* Call the C entry point. It should never return. */
    call alt_main
811002e4:	1113b2c0 	call	81113b2c <alt_main>

811002e8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
811002e8:	003fff06 	br	811002e8 <__reset+0xfb0e02e8>

811002ec <bDdr2EepromTest>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2EepromTest(alt_u8 ucMemoryId) {
811002ec:	defff604 	addi	sp,sp,-40
811002f0:	dfc00915 	stw	ra,36(sp)
811002f4:	df000815 	stw	fp,32(sp)
811002f8:	df000804 	addi	fp,sp,32
811002fc:	2005883a 	mov	r2,r4
81100300:	e0bfff05 	stb	r2,-4(fp)

	printf("===== DE4 DDR2 EEPROM Test =====\n");
81100304:	012044b4 	movhi	r4,33042
81100308:	2122d504 	addi	r4,r4,-29868
8110030c:	1102de40 	call	81102de4 <puts>

	const alt_u8 cucDeviceAddr = DDR2_EEPROM_I2C_ADDRESS;
81100310:	00bfe804 	movi	r2,-96
81100314:	e0bffd05 	stb	r2,-12(fp)
	bool bSuccess = FALSE;
81100318:	e03ff915 	stw	zero,-28(fp)
	alt_u32 uliI2cSclBase;
	alt_u32 uliI2cSdaBase;
	int iI;

	switch (ucMemoryId) {
8110031c:	e0bfff03 	ldbu	r2,-4(fp)
81100320:	10000326 	beq	r2,zero,81100330 <bDdr2EepromTest+0x44>
81100324:	10800060 	cmpeqi	r2,r2,1
81100328:	10000a1e 	bne	r2,zero,81100354 <bDdr2EepromTest+0x68>
8110032c:	00001206 	br	81100378 <bDdr2EepromTest+0x8c>
	case DDR2_M1_ID:
		uliI2cSclBase = DDR2_M1_EEPROM_I2C_SCL_BASE;
81100330:	00a00034 	movhi	r2,32768
81100334:	10827c04 	addi	r2,r2,2544
81100338:	e0bffa15 	stw	r2,-24(fp)
		uliI2cSdaBase = DDR2_M1_EEPROM_I2C_SDA_BASE;
8110033c:	00a00034 	movhi	r2,32768
81100340:	10828004 	addi	r2,r2,2560
81100344:	e0bffb15 	stw	r2,-20(fp)
		bSuccess = TRUE;
81100348:	00800044 	movi	r2,1
8110034c:	e0bff915 	stw	r2,-28(fp)
		break;
81100350:	00000f06 	br	81100390 <bDdr2EepromTest+0xa4>
	case DDR2_M2_ID:
		uliI2cSclBase = DDR2_M2_EEPROM_I2C_SCL_BASE;
81100354:	00a00034 	movhi	r2,32768
81100358:	10825804 	addi	r2,r2,2400
8110035c:	e0bffa15 	stw	r2,-24(fp)
		uliI2cSdaBase = DDR2_M2_EEPROM_I2C_SDA_BASE;
81100360:	00a00034 	movhi	r2,32768
81100364:	10825c04 	addi	r2,r2,2416
81100368:	e0bffb15 	stw	r2,-20(fp)
		bSuccess = TRUE;
8110036c:	00800044 	movi	r2,1
81100370:	e0bff915 	stw	r2,-28(fp)
		break;
81100374:	00000606 	br	81100390 <bDdr2EepromTest+0xa4>
	default:
		bSuccess = FALSE;
81100378:	e03ff915 	stw	zero,-28(fp)

		printf("DR2 Memory ID not identified!! Aborting Test \n");
8110037c:	012044b4 	movhi	r4,33042
81100380:	2122de04 	addi	r4,r4,-29832
81100384:	1102de40 	call	81102de4 <puts>

		return bSuccess;
81100388:	e0bff917 	ldw	r2,-28(fp)
8110038c:	00007f06 	br	8110058c <bDdr2EepromTest+0x2a0>
	}

	alt_u8 ucControlAddr, ucValue;

	printf("DDR2 EEPROM Read Test\n");
81100390:	012044b4 	movhi	r4,33042
81100394:	2122ea04 	addi	r4,r4,-29784
81100398:	1102de40 	call	81102de4 <puts>

	usleep(20 * 1000);
8110039c:	01138804 	movi	r4,20000
811003a0:	11140b80 	call	811140b8 <usleep>
	for (iI = 0; iI < 256 && bSuccess; iI++) {
811003a4:	e03ffc15 	stw	zero,-16(fp)
811003a8:	00002006 	br	8110042c <bDdr2EepromTest+0x140>
		ucControlAddr = iI;
811003ac:	e0bffc17 	ldw	r2,-16(fp)
811003b0:	e0bffd45 	stb	r2,-11(fp)
		bSuccess = I2C_Read(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
811003b4:	e0bffd03 	ldbu	r2,-12(fp)
811003b8:	10c03fcc 	andi	r3,r2,255
811003bc:	18c0201c 	xori	r3,r3,128
811003c0:	18ffe004 	addi	r3,r3,-128
811003c4:	e13ffd43 	ldbu	r4,-11(fp)
811003c8:	e0bffe04 	addi	r2,fp,-8
811003cc:	d8800015 	stw	r2,0(sp)
811003d0:	200f883a 	mov	r7,r4
811003d4:	180d883a 	mov	r6,r3
811003d8:	e17ffb17 	ldw	r5,-20(fp)
811003dc:	e13ffa17 	ldw	r4,-24(fp)
811003e0:	1101d280 	call	81101d28 <I2C_Read>
811003e4:	e0bff915 	stw	r2,-28(fp)
				ucControlAddr, &ucValue);
		if (bSuccess) {
811003e8:	e0bff917 	ldw	r2,-28(fp)
811003ec:	10000926 	beq	r2,zero,81100414 <bDdr2EepromTest+0x128>

			printf("EEPROM[%03d]=%02Xh\n", ucControlAddr, ucValue);
811003f0:	e0bffd43 	ldbu	r2,-11(fp)
811003f4:	e0fffe03 	ldbu	r3,-8(fp)
811003f8:	18c03fcc 	andi	r3,r3,255
811003fc:	180d883a 	mov	r6,r3
81100400:	100b883a 	mov	r5,r2
81100404:	012044b4 	movhi	r4,33042
81100408:	2122f004 	addi	r4,r4,-29760
8110040c:	1102cc80 	call	81102cc8 <printf>
81100410:	00000306 	br	81100420 <bDdr2EepromTest+0x134>

		} else {

			printf("Failed to read EEPROM\n");
81100414:	012044b4 	movhi	r4,33042
81100418:	2122f504 	addi	r4,r4,-29740
8110041c:	1102de40 	call	81102de4 <puts>
	alt_u8 ucControlAddr, ucValue;

	printf("DDR2 EEPROM Read Test\n");

	usleep(20 * 1000);
	for (iI = 0; iI < 256 && bSuccess; iI++) {
81100420:	e0bffc17 	ldw	r2,-16(fp)
81100424:	10800044 	addi	r2,r2,1
81100428:	e0bffc15 	stw	r2,-16(fp)
8110042c:	e0bffc17 	ldw	r2,-16(fp)
81100430:	10804008 	cmpgei	r2,r2,256
81100434:	1000021e 	bne	r2,zero,81100440 <bDdr2EepromTest+0x154>
81100438:	e0bff917 	ldw	r2,-28(fp)
8110043c:	103fdb1e 	bne	r2,zero,811003ac <__reset+0xfb0e03ac>

			printf("Failed to read EEPROM\n");

		}
	}
	if (bSuccess) {
81100440:	e0bff917 	ldw	r2,-28(fp)
81100444:	10000426 	beq	r2,zero,81100458 <bDdr2EepromTest+0x16c>

		printf("DDR2 EEPROM Read Test Completed\n\n");
81100448:	012044b4 	movhi	r4,33042
8110044c:	2122fb04 	addi	r4,r4,-29716
81100450:	1102de40 	call	81102de4 <puts>
81100454:	00000306 	br	81100464 <bDdr2EepromTest+0x178>

	} else {

		printf("DDR2 EEPROM Read Test Failed\n\n");
81100458:	012044b4 	movhi	r4,33042
8110045c:	21230404 	addi	r4,r4,-29680
81100460:	1102de40 	call	81102de4 <puts>

	}

	printf("DDR2 EEPROM Write Test\n");
81100464:	012044b4 	movhi	r4,33042
81100468:	21230c04 	addi	r4,r4,-29648
8110046c:	1102de40 	call	81102de4 <puts>

	alt_u8 ucWriteData = 0x12, ucTestAddr = 128;
81100470:	00800484 	movi	r2,18
81100474:	e0bffd85 	stb	r2,-10(fp)
81100478:	00bfe004 	movi	r2,-128
8110047c:	e0bffdc5 	stb	r2,-9(fp)
	alt_u8 ucReadData;
	usleep(20 * 1000);
81100480:	01138804 	movi	r4,20000
81100484:	11140b80 	call	811140b8 <usleep>
	bSuccess = I2C_Write(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
81100488:	e0bffd03 	ldbu	r2,-12(fp)
8110048c:	10c03fcc 	andi	r3,r2,255
81100490:	18c0201c 	xori	r3,r3,128
81100494:	18ffe004 	addi	r3,r3,-128
81100498:	e13ffdc3 	ldbu	r4,-9(fp)
8110049c:	e0bffd83 	ldbu	r2,-10(fp)
811004a0:	d8800015 	stw	r2,0(sp)
811004a4:	200f883a 	mov	r7,r4
811004a8:	180d883a 	mov	r6,r3
811004ac:	e17ffb17 	ldw	r5,-20(fp)
811004b0:	e13ffa17 	ldw	r4,-24(fp)
811004b4:	1101c500 	call	81101c50 <I2C_Write>
811004b8:	e0bff915 	stw	r2,-28(fp)
			ucTestAddr, ucWriteData);
	if (!bSuccess) {
811004bc:	e0bff917 	ldw	r2,-28(fp)
811004c0:	1000041e 	bne	r2,zero,811004d4 <bDdr2EepromTest+0x1e8>

		printf("Failed to write EEPROM\n");
811004c4:	012044b4 	movhi	r4,33042
811004c8:	21231204 	addi	r4,r4,-29624
811004cc:	1102de40 	call	81102de4 <puts>
811004d0:	00002206 	br	8110055c <bDdr2EepromTest+0x270>

	} else {
		bSuccess = I2C_Read(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
811004d4:	e0bffd03 	ldbu	r2,-12(fp)
811004d8:	10c03fcc 	andi	r3,r2,255
811004dc:	18c0201c 	xori	r3,r3,128
811004e0:	18ffe004 	addi	r3,r3,-128
811004e4:	e13ffdc3 	ldbu	r4,-9(fp)
811004e8:	e0bffe44 	addi	r2,fp,-7
811004ec:	d8800015 	stw	r2,0(sp)
811004f0:	200f883a 	mov	r7,r4
811004f4:	180d883a 	mov	r6,r3
811004f8:	e17ffb17 	ldw	r5,-20(fp)
811004fc:	e13ffa17 	ldw	r4,-24(fp)
81100500:	1101d280 	call	81101d28 <I2C_Read>
81100504:	e0bff915 	stw	r2,-28(fp)
				ucTestAddr, &ucReadData);
		if (!bSuccess) {
81100508:	e0bff917 	ldw	r2,-28(fp)
8110050c:	1000041e 	bne	r2,zero,81100520 <bDdr2EepromTest+0x234>

			printf("Failed to read EEPROM for verify\n");
81100510:	012044b4 	movhi	r4,33042
81100514:	21231804 	addi	r4,r4,-29600
81100518:	1102de40 	call	81102de4 <puts>
8110051c:	00000f06 	br	8110055c <bDdr2EepromTest+0x270>

		} else {
			if (ucReadData != ucWriteData) {
81100520:	e0bffe43 	ldbu	r2,-7(fp)
81100524:	10c03fcc 	andi	r3,r2,255
81100528:	e0bffd83 	ldbu	r2,-10(fp)
8110052c:	18800b26 	beq	r3,r2,8110055c <bDdr2EepromTest+0x270>
				bSuccess = FALSE;
81100530:	e03ff915 	stw	zero,-28(fp)

				sprintf(cDebugBuffer,
81100534:	e0bffe43 	ldbu	r2,-7(fp)
81100538:	10803fcc 	andi	r2,r2,255
8110053c:	e0fffd83 	ldbu	r3,-10(fp)
81100540:	180f883a 	mov	r7,r3
81100544:	100d883a 	mov	r6,r2
81100548:	016044b4 	movhi	r5,33042
8110054c:	29632104 	addi	r5,r5,-29564
81100550:	012044b4 	movhi	r4,33042
81100554:	212f4704 	addi	r4,r4,-17124
81100558:	1102e500 	call	81102e50 <sprintf>
						ucReadData, ucWriteData);

			}
		}
	}
	if (bSuccess) {
8110055c:	e0bff917 	ldw	r2,-28(fp)
81100560:	10000426 	beq	r2,zero,81100574 <bDdr2EepromTest+0x288>

		printf("DDR2 EEPROM Write Test Completed\n\n");
81100564:	012044b4 	movhi	r4,33042
81100568:	21233004 	addi	r4,r4,-29504
8110056c:	1102de40 	call	81102de4 <puts>
81100570:	00000306 	br	81100580 <bDdr2EepromTest+0x294>

	} else {

		printf("DDR2 EEPROM Write Test Failed\n\n");
81100574:	012044b4 	movhi	r4,33042
81100578:	21233904 	addi	r4,r4,-29468
8110057c:	1102de40 	call	81102de4 <puts>

	}

	printf("\n");
81100580:	01000284 	movi	r4,10
81100584:	1102d0c0 	call	81102d0c <putchar>

	return bSuccess;
81100588:	e0bff917 	ldw	r2,-28(fp)
}
8110058c:	e037883a 	mov	sp,fp
81100590:	dfc00117 	ldw	ra,4(sp)
81100594:	df000017 	ldw	fp,0(sp)
81100598:	dec00204 	addi	sp,sp,8
8110059c:	f800283a 	ret

811005a0 <bDdr2EepromDump>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2EepromDump(alt_u8 ucMemoryId) {
811005a0:	deffb704 	addi	sp,sp,-292
811005a4:	dfc04815 	stw	ra,288(sp)
811005a8:	df004715 	stw	fp,284(sp)
811005ac:	df004704 	addi	fp,sp,284
811005b0:	2005883a 	mov	r2,r4
811005b4:	e0bfff05 	stb	r2,-4(fp)

	printf("===== DE4 DDR2 EEPROM Dump =====\n");
811005b8:	012044b4 	movhi	r4,33042
811005bc:	21234104 	addi	r4,r4,-29436
811005c0:	1102de40 	call	81102de4 <puts>

	const alt_u8 cucDeviceAddr = DDR2_EEPROM_I2C_ADDRESS;
811005c4:	00bfe804 	movi	r2,-96
811005c8:	e0bfbd05 	stb	r2,-268(fp)
	bool bSuccess = FALSE;
811005cc:	e03fbe15 	stw	zero,-264(fp)
	alt_u32 uliI2cSclBase;
	alt_u32 uliI2cSdaBase;
	int iI;

	switch (ucMemoryId) {
811005d0:	e0bfff03 	ldbu	r2,-4(fp)
811005d4:	10000326 	beq	r2,zero,811005e4 <bDdr2EepromDump+0x44>
811005d8:	10800060 	cmpeqi	r2,r2,1
811005dc:	10000a1e 	bne	r2,zero,81100608 <bDdr2EepromDump+0x68>
811005e0:	00001206 	br	8110062c <bDdr2EepromDump+0x8c>
	case DDR2_M1_ID:
		uliI2cSclBase = DDR2_M1_EEPROM_I2C_SCL_BASE;
811005e4:	00a00034 	movhi	r2,32768
811005e8:	10827c04 	addi	r2,r2,2544
811005ec:	e0bfba15 	stw	r2,-280(fp)
		uliI2cSdaBase = DDR2_M1_EEPROM_I2C_SDA_BASE;
811005f0:	00a00034 	movhi	r2,32768
811005f4:	10828004 	addi	r2,r2,2560
811005f8:	e0bfbb15 	stw	r2,-276(fp)
		bSuccess = TRUE;
811005fc:	00800044 	movi	r2,1
81100600:	e0bfbe15 	stw	r2,-264(fp)
		break;
81100604:	00000f06 	br	81100644 <bDdr2EepromDump+0xa4>
	case DDR2_M2_ID:
		uliI2cSclBase = DDR2_M2_EEPROM_I2C_SCL_BASE;
81100608:	00a00034 	movhi	r2,32768
8110060c:	10825804 	addi	r2,r2,2400
81100610:	e0bfba15 	stw	r2,-280(fp)
		uliI2cSdaBase = DDR2_M2_EEPROM_I2C_SDA_BASE;
81100614:	00a00034 	movhi	r2,32768
81100618:	10825c04 	addi	r2,r2,2416
8110061c:	e0bfbb15 	stw	r2,-276(fp)
		bSuccess = TRUE;
81100620:	00800044 	movi	r2,1
81100624:	e0bfbe15 	stw	r2,-264(fp)
		break;
81100628:	00000606 	br	81100644 <bDdr2EepromDump+0xa4>
	default:
		bSuccess = FALSE;
8110062c:	e03fbe15 	stw	zero,-264(fp)

		printf("DR2 Memory ID not identified!! Aborting Dump \n");
81100630:	012044b4 	movhi	r4,33042
81100634:	21234a04 	addi	r4,r4,-29400
81100638:	1102de40 	call	81102de4 <puts>

		return bSuccess;
8110063c:	e0bfbe17 	ldw	r2,-264(fp)
81100640:	0001a906 	br	81100ce8 <bDdr2EepromDump+0x748>
	}

	alt_u8 ucSZData[256];
	bSuccess = I2C_MultipleRead(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
81100644:	e0bfbd03 	ldbu	r2,-268(fp)
81100648:	10c03fcc 	andi	r3,r2,255
8110064c:	18c0201c 	xori	r3,r3,128
81100650:	18ffe004 	addi	r3,r3,-128
81100654:	e13fbf04 	addi	r4,fp,-260
81100658:	00804004 	movi	r2,256
8110065c:	d8800015 	stw	r2,0(sp)
81100660:	200f883a 	mov	r7,r4
81100664:	180d883a 	mov	r6,r3
81100668:	e17fbb17 	ldw	r5,-276(fp)
8110066c:	e13fba17 	ldw	r4,-280(fp)
81100670:	1101e280 	call	81101e28 <I2C_MultipleRead>
81100674:	e0bfbe15 	stw	r2,-264(fp)
			ucSZData, sizeof(ucSZData));
	if (bSuccess) {
81100678:	e0bfbe17 	ldw	r2,-264(fp)
8110067c:	10019426 	beq	r2,zero,81100cd0 <bDdr2EepromDump+0x730>
		for (iI = 0; iI < 256 && bSuccess; iI++) {
81100680:	e03fbc15 	stw	zero,-272(fp)
81100684:	00018c06 	br	81100cb8 <bDdr2EepromDump+0x718>
			if (iI == 0) {
81100688:	e0bfbc17 	ldw	r2,-272(fp)
8110068c:	10000b1e 	bne	r2,zero,811006bc <bDdr2EepromDump+0x11c>

				printf("(Number of SPD Bytes Used)\n" "EEPROM[%03d]=%02Xh ", iI, ucSZData[iI]);
81100690:	e0ffbf04 	addi	r3,fp,-260
81100694:	e0bfbc17 	ldw	r2,-272(fp)
81100698:	1885883a 	add	r2,r3,r2
8110069c:	10800003 	ldbu	r2,0(r2)
811006a0:	10803fcc 	andi	r2,r2,255
811006a4:	100d883a 	mov	r6,r2
811006a8:	e17fbc17 	ldw	r5,-272(fp)
811006ac:	012044b4 	movhi	r4,33042
811006b0:	21235604 	addi	r4,r4,-29352
811006b4:	1102cc80 	call	81102cc8 <printf>
811006b8:	00017c06 	br	81100cac <bDdr2EepromDump+0x70c>

			} else if (iI == 1) {
811006bc:	e0bfbc17 	ldw	r2,-272(fp)
811006c0:	10800058 	cmpnei	r2,r2,1
811006c4:	10000b1e 	bne	r2,zero,811006f4 <bDdr2EepromDump+0x154>

				sprintf(cDebugBuffer,
811006c8:	00e044b4 	movhi	r3,33042
811006cc:	18ef4704 	addi	r3,r3,-17124
811006d0:	00a044b4 	movhi	r2,33042
811006d4:	10a36204 	addi	r2,r2,-29304
811006d8:	1009883a 	mov	r4,r2
811006dc:	00800c04 	movi	r2,48
811006e0:	100d883a 	mov	r6,r2
811006e4:	200b883a 	mov	r5,r4
811006e8:	1809883a 	mov	r4,r3
811006ec:	1102b500 	call	81102b50 <memcpy>
811006f0:	00016e06 	br	81100cac <bDdr2EepromDump+0x70c>
						"(Total Number of Bytes in SPD Device, Log2(N))\n");

			} else if (iI == 2) {
811006f4:	e0bfbc17 	ldw	r2,-272(fp)
811006f8:	10800098 	cmpnei	r2,r2,2
811006fc:	1000041e 	bne	r2,zero,81100710 <bDdr2EepromDump+0x170>

				printf("(Basic Memory Type[08h:DDR2])\n");
81100700:	012044b4 	movhi	r4,33042
81100704:	21236e04 	addi	r4,r4,-29256
81100708:	1102de40 	call	81102de4 <puts>
8110070c:	00016706 	br	81100cac <bDdr2EepromDump+0x70c>

			} else if (iI == 3) {
81100710:	e0bfbc17 	ldw	r2,-272(fp)
81100714:	108000d8 	cmpnei	r2,r2,3
81100718:	10000b1e 	bne	r2,zero,81100748 <bDdr2EepromDump+0x1a8>

				sprintf(cDebugBuffer,
8110071c:	00e044b4 	movhi	r3,33042
81100720:	18ef4704 	addi	r3,r3,-17124
81100724:	00a044b4 	movhi	r2,33042
81100728:	10a37604 	addi	r2,r2,-29224
8110072c:	1009883a 	mov	r4,r2
81100730:	008009c4 	movi	r2,39
81100734:	100d883a 	mov	r6,r2
81100738:	200b883a 	mov	r5,r4
8110073c:	1809883a 	mov	r4,r3
81100740:	1102b500 	call	81102b50 <memcpy>
81100744:	00015906 	br	81100cac <bDdr2EepromDump+0x70c>
						"(Number of Row Addresses on Assembly)\n");

			} else if (iI == 4) {
81100748:	e0bfbc17 	ldw	r2,-272(fp)
8110074c:	10800118 	cmpnei	r2,r2,4
81100750:	10000b1e 	bne	r2,zero,81100780 <bDdr2EepromDump+0x1e0>

				sprintf(cDebugBuffer,
81100754:	00e044b4 	movhi	r3,33042
81100758:	18ef4704 	addi	r3,r3,-17124
8110075c:	00a044b4 	movhi	r2,33042
81100760:	10a38004 	addi	r2,r2,-29184
81100764:	1009883a 	mov	r4,r2
81100768:	00800a84 	movi	r2,42
8110076c:	100d883a 	mov	r6,r2
81100770:	200b883a 	mov	r5,r4
81100774:	1809883a 	mov	r4,r3
81100778:	1102b500 	call	81102b50 <memcpy>
8110077c:	00014b06 	br	81100cac <bDdr2EepromDump+0x70c>
						"(Number of Column Addresses on Assembly)\n");

			} else if (iI == 5) {
81100780:	e0bfbc17 	ldw	r2,-272(fp)
81100784:	10800158 	cmpnei	r2,r2,5
81100788:	10000b1e 	bne	r2,zero,811007b8 <bDdr2EepromDump+0x218>

				sprintf(cDebugBuffer,
8110078c:	00e044b4 	movhi	r3,33042
81100790:	18ef4704 	addi	r3,r3,-17124
81100794:	00a044b4 	movhi	r2,33042
81100798:	10a38b04 	addi	r2,r2,-29140
8110079c:	1009883a 	mov	r4,r2
811007a0:	00800c04 	movi	r2,48
811007a4:	100d883a 	mov	r6,r2
811007a8:	200b883a 	mov	r5,r4
811007ac:	1809883a 	mov	r4,r3
811007b0:	1102b500 	call	81102b50 <memcpy>
811007b4:	00013d06 	br	81100cac <bDdr2EepromDump+0x70c>
						"(DIMM Height and Module Rank Number[b2b1b0+1])\n");

			} else if (iI == 6) {
811007b8:	e0bfbc17 	ldw	r2,-272(fp)
811007bc:	10800198 	cmpnei	r2,r2,6
811007c0:	1000041e 	bne	r2,zero,811007d4 <bDdr2EepromDump+0x234>

				printf("(Module Data Width)\n");
811007c4:	012044b4 	movhi	r4,33042
811007c8:	21239704 	addi	r4,r4,-29092
811007cc:	1102de40 	call	81102de4 <puts>
811007d0:	00013606 	br	81100cac <bDdr2EepromDump+0x70c>

			} else if (iI == 7) {
811007d4:	e0bfbc17 	ldw	r2,-272(fp)
811007d8:	108001d8 	cmpnei	r2,r2,7
811007dc:	1000041e 	bne	r2,zero,811007f0 <bDdr2EepromDump+0x250>

				printf("(Module Data Width, Continued)\n");
811007e0:	012044b4 	movhi	r4,33042
811007e4:	21239c04 	addi	r4,r4,-29072
811007e8:	1102de40 	call	81102de4 <puts>
811007ec:	00012f06 	br	81100cac <bDdr2EepromDump+0x70c>

			} else if (iI == 16) {
811007f0:	e0bfbc17 	ldw	r2,-272(fp)
811007f4:	10800418 	cmpnei	r2,r2,16
811007f8:	10000b1e 	bne	r2,zero,81100828 <bDdr2EepromDump+0x288>

				sprintf(cDebugBuffer,
811007fc:	00e044b4 	movhi	r3,33042
81100800:	18ef4704 	addi	r3,r3,-17124
81100804:	00a044b4 	movhi	r2,33042
81100808:	10a3a404 	addi	r2,r2,-29040
8110080c:	1009883a 	mov	r4,r2
81100810:	00800d04 	movi	r2,52
81100814:	100d883a 	mov	r6,r2
81100818:	200b883a 	mov	r5,r4
8110081c:	1809883a 	mov	r4,r3
81100820:	1102b500 	call	81102b50 <memcpy>
81100824:	00012106 	br	81100cac <bDdr2EepromDump+0x70c>
						"(Burst Lengths Supported[bitmap: x x x x 8 4 x x])\n");

			} else if (iI == 13) {
81100828:	e0bfbc17 	ldw	r2,-272(fp)
8110082c:	10800358 	cmpnei	r2,r2,13
81100830:	1000041e 	bne	r2,zero,81100844 <bDdr2EepromDump+0x2a4>

				printf("(Primary SDRAM width)\n");
81100834:	012044b4 	movhi	r4,33042
81100838:	2123b104 	addi	r4,r4,-28988
8110083c:	1102de40 	call	81102de4 <puts>
81100840:	00011a06 	br	81100cac <bDdr2EepromDump+0x70c>

			} else if (iI == 14) {
81100844:	e0bfbc17 	ldw	r2,-272(fp)
81100848:	10800398 	cmpnei	r2,r2,14
8110084c:	1000041e 	bne	r2,zero,81100860 <bDdr2EepromDump+0x2c0>

				printf("(ECC SDRAM width)\n");
81100850:	012044b4 	movhi	r4,33042
81100854:	2123b704 	addi	r4,r4,-28964
81100858:	1102de40 	call	81102de4 <puts>
8110085c:	00011306 	br	81100cac <bDdr2EepromDump+0x70c>

			} else if (iI == 17) {
81100860:	e0bfbc17 	ldw	r2,-272(fp)
81100864:	10800458 	cmpnei	r2,r2,17
81100868:	1000041e 	bne	r2,zero,8110087c <bDdr2EepromDump+0x2dc>

				printf("(Banks per SDRAM device)\n");
8110086c:	012044b4 	movhi	r4,33042
81100870:	2123bc04 	addi	r4,r4,-28944
81100874:	1102de40 	call	81102de4 <puts>
81100878:	00010c06 	br	81100cac <bDdr2EepromDump+0x70c>

			} else if (iI == 18) {
8110087c:	e0bfbc17 	ldw	r2,-272(fp)
81100880:	10800498 	cmpnei	r2,r2,18
81100884:	10000b1e 	bne	r2,zero,811008b4 <bDdr2EepromDump+0x314>

				sprintf(cDebugBuffer,
81100888:	00e044b4 	movhi	r3,33042
8110088c:	18ef4704 	addi	r3,r3,-17124
81100890:	00a044b4 	movhi	r2,33042
81100894:	10a3c304 	addi	r2,r2,-28916
81100898:	1009883a 	mov	r4,r2
8110089c:	00800d44 	movi	r2,53
811008a0:	100d883a 	mov	r6,r2
811008a4:	200b883a 	mov	r5,r4
811008a8:	1809883a 	mov	r4,r3
811008ac:	1102b500 	call	81102b50 <memcpy>
811008b0:	0000fe06 	br	81100cac <bDdr2EepromDump+0x70c>
						"(CAS lantencies supported[bitmap: x x 5 4 3 2 x x])\n");

			} else if (iI == 20) {
811008b4:	e0bfbc17 	ldw	r2,-272(fp)
811008b8:	10800518 	cmpnei	r2,r2,20
811008bc:	10000b1e 	bne	r2,zero,811008ec <bDdr2EepromDump+0x34c>

				sprintf(cDebugBuffer,
811008c0:	00e044b4 	movhi	r3,33042
811008c4:	18ef4704 	addi	r3,r3,-17124
811008c8:	00a044b4 	movhi	r2,33042
811008cc:	10a3d104 	addi	r2,r2,-28860
811008d0:	1009883a 	mov	r4,r2
811008d4:	00801204 	movi	r2,72
811008d8:	100d883a 	mov	r6,r2
811008dc:	200b883a 	mov	r5,r4
811008e0:	1809883a 	mov	r4,r3
811008e4:	1102b500 	call	81102b50 <memcpy>
811008e8:	0000f006 	br	81100cac <bDdr2EepromDump+0x70c>
						"(DIMM Type: x x Mini-UDIMM Mini-RDIMM Micro-DIMM SO-DIMM UDIMMM RDIMM)\n");

			} else if (iI == 22) {
811008ec:	e0bfbc17 	ldw	r2,-272(fp)
811008f0:	10800598 	cmpnei	r2,r2,22
811008f4:	1000041e 	bne	r2,zero,81100908 <bDdr2EepromDump+0x368>

				printf("(Memory Chip feature bitmap)\n");
811008f8:	012044b4 	movhi	r4,33042
811008fc:	2123e304 	addi	r4,r4,-28788
81100900:	1102de40 	call	81102de4 <puts>
81100904:	0000e906 	br	81100cac <bDdr2EepromDump+0x70c>

			} else if (iI == 27) {
81100908:	e0bfbc17 	ldw	r2,-272(fp)
8110090c:	108006d8 	cmpnei	r2,r2,27
81100910:	10000b1e 	bne	r2,zero,81100940 <bDdr2EepromDump+0x3a0>

				sprintf(cDebugBuffer,
81100914:	00e044b4 	movhi	r3,33042
81100918:	18ef4704 	addi	r3,r3,-17124
8110091c:	00a044b4 	movhi	r2,33042
81100920:	10a3eb04 	addi	r2,r2,-28756
81100924:	1009883a 	mov	r4,r2
81100928:	00800a04 	movi	r2,40
8110092c:	100d883a 	mov	r6,r2
81100930:	200b883a 	mov	r5,r4
81100934:	1809883a 	mov	r4,r3
81100938:	1102b500 	call	81102b50 <memcpy>
8110093c:	0000db06 	br	81100cac <bDdr2EepromDump+0x70c>
						"(Minimun row precharge time[tRP;nsx4])\n");

			} else if (iI == 28) {
81100940:	e0bfbc17 	ldw	r2,-272(fp)
81100944:	10800718 	cmpnei	r2,r2,28
81100948:	10000b1e 	bne	r2,zero,81100978 <bDdr2EepromDump+0x3d8>

				sprintf(cDebugBuffer,
8110094c:	00e044b4 	movhi	r3,33042
81100950:	18ef4704 	addi	r3,r3,-17124
81100954:	00a044b4 	movhi	r2,33042
81100958:	10a3f504 	addi	r2,r2,-28716
8110095c:	1009883a 	mov	r4,r2
81100960:	00800cc4 	movi	r2,51
81100964:	100d883a 	mov	r6,r2
81100968:	200b883a 	mov	r5,r4
8110096c:	1809883a 	mov	r4,r3
81100970:	1102b500 	call	81102b50 <memcpy>
81100974:	0000cd06 	br	81100cac <bDdr2EepromDump+0x70c>
						"(Minimun row active-row activce delay[tRRD;nsx4])\n");

			} else if (iI == 29) {
81100978:	e0bfbc17 	ldw	r2,-272(fp)
8110097c:	10800758 	cmpnei	r2,r2,29
81100980:	10000b1e 	bne	r2,zero,811009b0 <bDdr2EepromDump+0x410>

				sprintf(cDebugBuffer,
81100984:	00e044b4 	movhi	r3,33042
81100988:	18ef4704 	addi	r3,r3,-17124
8110098c:	00a044b4 	movhi	r2,33042
81100990:	10a40204 	addi	r2,r2,-28664
81100994:	1009883a 	mov	r4,r2
81100998:	008009c4 	movi	r2,39
8110099c:	100d883a 	mov	r6,r2
811009a0:	200b883a 	mov	r5,r4
811009a4:	1809883a 	mov	r4,r3
811009a8:	1102b500 	call	81102b50 <memcpy>
811009ac:	0000bf06 	br	81100cac <bDdr2EepromDump+0x70c>
						"(Minimun RAS to CAS delay[tRCD;nsx4])\n");

			} else if (iI == 30) {
811009b0:	e0bfbc17 	ldw	r2,-272(fp)
811009b4:	10800798 	cmpnei	r2,r2,30
811009b8:	10000b1e 	bne	r2,zero,811009e8 <bDdr2EepromDump+0x448>

				sprintf(cDebugBuffer,
811009bc:	00e044b4 	movhi	r3,33042
811009c0:	18ef4704 	addi	r3,r3,-17124
811009c4:	00a044b4 	movhi	r2,33042
811009c8:	10a40c04 	addi	r2,r2,-28624
811009cc:	1009883a 	mov	r4,r2
811009d0:	00800b04 	movi	r2,44
811009d4:	100d883a 	mov	r6,r2
811009d8:	200b883a 	mov	r5,r4
811009dc:	1809883a 	mov	r4,r3
811009e0:	1102b500 	call	81102b50 <memcpy>
811009e4:	0000b106 	br	81100cac <bDdr2EepromDump+0x70c>
						"(Minimun acive to precharge time[tRAS;ns])\n");

			} else if (iI == 31) {
811009e8:	e0bfbc17 	ldw	r2,-272(fp)
811009ec:	108007d8 	cmpnei	r2,r2,31
811009f0:	10000b1e 	bne	r2,zero,81100a20 <bDdr2EepromDump+0x480>

				sprintf(cDebugBuffer,
811009f4:	00e044b4 	movhi	r3,33042
811009f8:	18ef4704 	addi	r3,r3,-17124
811009fc:	00a044b4 	movhi	r2,33042
81100a00:	10a41704 	addi	r2,r2,-28580
81100a04:	1009883a 	mov	r4,r2
81100a08:	008010c4 	movi	r2,67
81100a0c:	100d883a 	mov	r6,r2
81100a10:	200b883a 	mov	r5,r4
81100a14:	1809883a 	mov	r4,r3
81100a18:	1102b500 	call	81102b50 <memcpy>
81100a1c:	0000a306 	br	81100cac <bDdr2EepromDump+0x70c>
						"(Size of each rank[bitmap:512MB,256MB,128MB,16GB,8GB,4GB,2GB,1GB)\n");

			} else if (iI == 36) {
81100a20:	e0bfbc17 	ldw	r2,-272(fp)
81100a24:	10800918 	cmpnei	r2,r2,36
81100a28:	10000b1e 	bne	r2,zero,81100a58 <bDdr2EepromDump+0x4b8>

				sprintf(cDebugBuffer,
81100a2c:	00e044b4 	movhi	r3,33042
81100a30:	18ef4704 	addi	r3,r3,-17124
81100a34:	00a044b4 	movhi	r2,33042
81100a38:	10a42804 	addi	r2,r2,-28512
81100a3c:	1009883a 	mov	r4,r2
81100a40:	00800a84 	movi	r2,42
81100a44:	100d883a 	mov	r6,r2
81100a48:	200b883a 	mov	r5,r4
81100a4c:	1809883a 	mov	r4,r3
81100a50:	1102b500 	call	81102b50 <memcpy>
81100a54:	00009506 	br	81100cac <bDdr2EepromDump+0x70c>
						"(Minimun write receovery time[tWR;nsx4])\n");

			} else if (iI == 37) {
81100a58:	e0bfbc17 	ldw	r2,-272(fp)
81100a5c:	10800958 	cmpnei	r2,r2,37
81100a60:	10000b1e 	bne	r2,zero,81100a90 <bDdr2EepromDump+0x4f0>

				sprintf(cDebugBuffer,
81100a64:	00e044b4 	movhi	r3,33042
81100a68:	18ef4704 	addi	r3,r3,-17124
81100a6c:	00a044b4 	movhi	r2,33042
81100a70:	10a43304 	addi	r2,r2,-28468
81100a74:	1009883a 	mov	r4,r2
81100a78:	00800cc4 	movi	r2,51
81100a7c:	100d883a 	mov	r6,r2
81100a80:	200b883a 	mov	r5,r4
81100a84:	1809883a 	mov	r4,r3
81100a88:	1102b500 	call	81102b50 <memcpy>
81100a8c:	00008706 	br	81100cac <bDdr2EepromDump+0x70c>
						"(Internal write to read command delay[tWTR;nsx4])\n");

			} else if (iI == 38) {
81100a90:	e0bfbc17 	ldw	r2,-272(fp)
81100a94:	10800998 	cmpnei	r2,r2,38
81100a98:	10000b1e 	bne	r2,zero,81100ac8 <bDdr2EepromDump+0x528>

				sprintf(cDebugBuffer,
81100a9c:	00e044b4 	movhi	r3,33042
81100aa0:	18ef4704 	addi	r3,r3,-17124
81100aa4:	00a044b4 	movhi	r2,33042
81100aa8:	10a44004 	addi	r2,r2,-28416
81100aac:	1009883a 	mov	r4,r2
81100ab0:	00800dc4 	movi	r2,55
81100ab4:	100d883a 	mov	r6,r2
81100ab8:	200b883a 	mov	r5,r4
81100abc:	1809883a 	mov	r4,r3
81100ac0:	1102b500 	call	81102b50 <memcpy>
81100ac4:	00007906 	br	81100cac <bDdr2EepromDump+0x70c>
						"(Internal read to precharge command delay[tRTP;nsx4])\n");

			} else if (iI == 41) {
81100ac8:	e0bfbc17 	ldw	r2,-272(fp)
81100acc:	10800a58 	cmpnei	r2,r2,41
81100ad0:	10000b1e 	bne	r2,zero,81100b00 <bDdr2EepromDump+0x560>

				sprintf(cDebugBuffer,
81100ad4:	00e044b4 	movhi	r3,33042
81100ad8:	18ef4704 	addi	r3,r3,-17124
81100adc:	00a044b4 	movhi	r2,33042
81100ae0:	10a44e04 	addi	r2,r2,-28360
81100ae4:	1009883a 	mov	r4,r2
81100ae8:	00800c84 	movi	r2,50
81100aec:	100d883a 	mov	r6,r2
81100af0:	200b883a 	mov	r5,r4
81100af4:	1809883a 	mov	r4,r3
81100af8:	1102b500 	call	81102b50 <memcpy>
81100afc:	00006b06 	br	81100cac <bDdr2EepromDump+0x70c>
						"(Minimun activce to active/refresh time[tRC;ns])\n");

			} else if (iI == 42) {
81100b00:	e0bfbc17 	ldw	r2,-272(fp)
81100b04:	10800a98 	cmpnei	r2,r2,42
81100b08:	10000b1e 	bne	r2,zero,81100b38 <bDdr2EepromDump+0x598>

				sprintf(cDebugBuffer,
81100b0c:	00e044b4 	movhi	r3,33042
81100b10:	18ef4704 	addi	r3,r3,-17124
81100b14:	00a044b4 	movhi	r2,33042
81100b18:	10a45b04 	addi	r2,r2,-28308
81100b1c:	1009883a 	mov	r4,r2
81100b20:	00800cc4 	movi	r2,51
81100b24:	100d883a 	mov	r6,r2
81100b28:	200b883a 	mov	r5,r4
81100b2c:	1809883a 	mov	r4,r3
81100b30:	1102b500 	call	81102b50 <memcpy>
81100b34:	00005d06 	br	81100cac <bDdr2EepromDump+0x70c>
						"(Minimun refresh to active/refresh time[tRFC;ns])\n");

			} else if (iI == 62) {
81100b38:	e0bfbc17 	ldw	r2,-272(fp)
81100b3c:	10800f98 	cmpnei	r2,r2,62
81100b40:	1000041e 	bne	r2,zero,81100b54 <bDdr2EepromDump+0x5b4>

				printf("(SPD Revision)\n");
81100b44:	012044b4 	movhi	r4,33042
81100b48:	21246804 	addi	r4,r4,-28256
81100b4c:	1102de40 	call	81102de4 <puts>
81100b50:	00005606 	br	81100cac <bDdr2EepromDump+0x70c>

			} else if (iI == 63) {
81100b54:	e0bfbc17 	ldw	r2,-272(fp)
81100b58:	10800fd8 	cmpnei	r2,r2,63
81100b5c:	1000041e 	bne	r2,zero,81100b70 <bDdr2EepromDump+0x5d0>

				printf("(Checksum)\n");
81100b60:	012044b4 	movhi	r4,33042
81100b64:	21246c04 	addi	r4,r4,-28240
81100b68:	1102de40 	call	81102de4 <puts>
81100b6c:	00004f06 	br	81100cac <bDdr2EepromDump+0x70c>

			} else if (iI == 64) {
81100b70:	e0bfbc17 	ldw	r2,-272(fp)
81100b74:	10801018 	cmpnei	r2,r2,64
81100b78:	1000041e 	bne	r2,zero,81100b8c <bDdr2EepromDump+0x5ec>

				printf("(64~71: Manufacturer JEDEC ID)\n");
81100b7c:	012044b4 	movhi	r4,33042
81100b80:	21246f04 	addi	r4,r4,-28228
81100b84:	1102de40 	call	81102de4 <puts>
81100b88:	00004806 	br	81100cac <bDdr2EepromDump+0x70c>

			} else if (iI == 72) {
81100b8c:	e0bfbc17 	ldw	r2,-272(fp)
81100b90:	10801218 	cmpnei	r2,r2,72
81100b94:	10000b1e 	bne	r2,zero,81100bc4 <bDdr2EepromDump+0x624>

				sprintf(cDebugBuffer,
81100b98:	00e044b4 	movhi	r3,33042
81100b9c:	18ef4704 	addi	r3,r3,-17124
81100ba0:	00a044b4 	movhi	r2,33042
81100ba4:	10a47704 	addi	r2,r2,-28196
81100ba8:	1009883a 	mov	r4,r2
81100bac:	00800dc4 	movi	r2,55
81100bb0:	100d883a 	mov	r6,r2
81100bb4:	200b883a 	mov	r5,r4
81100bb8:	1809883a 	mov	r4,r3
81100bbc:	1102b500 	call	81102b50 <memcpy>
81100bc0:	00003a06 	br	81100cac <bDdr2EepromDump+0x70c>
						"(Module manufacturing location[Vendor-specific code])\n");

			} else if (iI == 73) {
81100bc4:	e0bfbc17 	ldw	r2,-272(fp)
81100bc8:	10801258 	cmpnei	r2,r2,73
81100bcc:	1000041e 	bne	r2,zero,81100be0 <bDdr2EepromDump+0x640>

				printf("(73~90: Moduloe part number)\n");
81100bd0:	012044b4 	movhi	r4,33042
81100bd4:	21248504 	addi	r4,r4,-28140
81100bd8:	1102de40 	call	81102de4 <puts>
81100bdc:	00003306 	br	81100cac <bDdr2EepromDump+0x70c>

			} else if (iI == 91) {
81100be0:	e0bfbc17 	ldw	r2,-272(fp)
81100be4:	108016d8 	cmpnei	r2,r2,91
81100be8:	1000041e 	bne	r2,zero,81100bfc <bDdr2EepromDump+0x65c>

				printf("(91~92: Moduloe revision code)\n");
81100bec:	012044b4 	movhi	r4,33042
81100bf0:	21248d04 	addi	r4,r4,-28108
81100bf4:	1102de40 	call	81102de4 <puts>
81100bf8:	00002c06 	br	81100cac <bDdr2EepromDump+0x70c>

			} else if (iI == 93) {
81100bfc:	e0bfbc17 	ldw	r2,-272(fp)
81100c00:	10801758 	cmpnei	r2,r2,93
81100c04:	10000b1e 	bne	r2,zero,81100c34 <bDdr2EepromDump+0x694>

				sprintf(cDebugBuffer,
81100c08:	00e044b4 	movhi	r3,33042
81100c0c:	18ef4704 	addi	r3,r3,-17124
81100c10:	00a044b4 	movhi	r2,33042
81100c14:	10a49504 	addi	r2,r2,-28076
81100c18:	1009883a 	mov	r4,r2
81100c1c:	008009c4 	movi	r2,39
81100c20:	100d883a 	mov	r6,r2
81100c24:	200b883a 	mov	r5,r4
81100c28:	1809883a 	mov	r4,r3
81100c2c:	1102b500 	call	81102b50 <memcpy>
81100c30:	00001e06 	br	81100cac <bDdr2EepromDump+0x70c>
						"(Manufacture Years since 2000[0-255])\n");

			} else if (iI == 94) {
81100c34:	e0bfbc17 	ldw	r2,-272(fp)
81100c38:	10801798 	cmpnei	r2,r2,94
81100c3c:	1000041e 	bne	r2,zero,81100c50 <bDdr2EepromDump+0x6b0>

				printf("(Manufacture Weeks[1-52])\n");
81100c40:	012044b4 	movhi	r4,33042
81100c44:	21249f04 	addi	r4,r4,-28036
81100c48:	1102de40 	call	81102de4 <puts>
81100c4c:	00001706 	br	81100cac <bDdr2EepromDump+0x70c>

			} else if (iI == 95) {
81100c50:	e0bfbc17 	ldw	r2,-272(fp)
81100c54:	108017d8 	cmpnei	r2,r2,95
81100c58:	10000b1e 	bne	r2,zero,81100c88 <bDdr2EepromDump+0x6e8>

				sprintf(cDebugBuffer,
81100c5c:	00e044b4 	movhi	r3,33042
81100c60:	18ef4704 	addi	r3,r3,-17124
81100c64:	00a044b4 	movhi	r2,33042
81100c68:	10a4a604 	addi	r2,r2,-28008
81100c6c:	1009883a 	mov	r4,r2
81100c70:	00800a04 	movi	r2,40
81100c74:	100d883a 	mov	r6,r2
81100c78:	200b883a 	mov	r5,r4
81100c7c:	1809883a 	mov	r4,r3
81100c80:	1102b500 	call	81102b50 <memcpy>
81100c84:	00000906 	br	81100cac <bDdr2EepromDump+0x70c>
						"(95~98[4-bytes]: Module serial number)\n");

			} else if (iI == 99) {
81100c88:	e0bfbc17 	ldw	r2,-272(fp)
81100c8c:	108018d8 	cmpnei	r2,r2,99
81100c90:	1000041e 	bne	r2,zero,81100ca4 <bDdr2EepromDump+0x704>

				printf("(99~128: Manufacturer-specific data)\n");
81100c94:	012044b4 	movhi	r4,33042
81100c98:	2124b004 	addi	r4,r4,-27968
81100c9c:	1102de40 	call	81102de4 <puts>
81100ca0:	00000206 	br	81100cac <bDdr2EepromDump+0x70c>

			} else {

				printf("\n");
81100ca4:	01000284 	movi	r4,10
81100ca8:	1102d0c0 	call	81102d0c <putchar>

	alt_u8 ucSZData[256];
	bSuccess = I2C_MultipleRead(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
			ucSZData, sizeof(ucSZData));
	if (bSuccess) {
		for (iI = 0; iI < 256 && bSuccess; iI++) {
81100cac:	e0bfbc17 	ldw	r2,-272(fp)
81100cb0:	10800044 	addi	r2,r2,1
81100cb4:	e0bfbc15 	stw	r2,-272(fp)
81100cb8:	e0bfbc17 	ldw	r2,-272(fp)
81100cbc:	10804008 	cmpgei	r2,r2,256
81100cc0:	1000061e 	bne	r2,zero,81100cdc <bDdr2EepromDump+0x73c>
81100cc4:	e0bfbe17 	ldw	r2,-264(fp)
81100cc8:	103e6f1e 	bne	r2,zero,81100688 <__reset+0xfb0e0688>
81100ccc:	00000306 	br	81100cdc <bDdr2EepromDump+0x73c>

			}
		}
	} else {

		printf("Failed to dump EEPROM\n");
81100cd0:	012044b4 	movhi	r4,33042
81100cd4:	2124ba04 	addi	r4,r4,-27928
81100cd8:	1102de40 	call	81102de4 <puts>

	}

	printf("\n");
81100cdc:	01000284 	movi	r4,10
81100ce0:	1102d0c0 	call	81102d0c <putchar>

	return bSuccess;
81100ce4:	e0bfbe17 	ldw	r2,-264(fp)
}
81100ce8:	e037883a 	mov	sp,fp
81100cec:	dfc00117 	ldw	ra,4(sp)
81100cf0:	df000017 	ldw	fp,0(sp)
81100cf4:	dec00204 	addi	sp,sp,8
81100cf8:	f800283a 	ret

81100cfc <bDdr2SwitchMemory>:

bool bDdr2SwitchMemory(alt_u8 ucMemoryId) {
81100cfc:	defffb04 	addi	sp,sp,-20
81100d00:	dfc00415 	stw	ra,16(sp)
81100d04:	df000315 	stw	fp,12(sp)
81100d08:	df000304 	addi	fp,sp,12
81100d0c:	2005883a 	mov	r2,r4
81100d10:	e0bfff05 	stb	r2,-4(fp)

	bool bSuccess = FALSE;
81100d14:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 *puliDdr2MemAddr = (alt_u32 *) DDR2_EXT_ADDR_CONTROL_BASE;
81100d18:	00a04834 	movhi	r2,33056
81100d1c:	10882204 	addi	r2,r2,8328
81100d20:	e0bffe15 	stw	r2,-8(fp)

	switch (ucMemoryId) {
81100d24:	e0bfff03 	ldbu	r2,-4(fp)
81100d28:	10000326 	beq	r2,zero,81100d38 <bDdr2SwitchMemory+0x3c>
81100d2c:	10800060 	cmpeqi	r2,r2,1
81100d30:	1000061e 	bne	r2,zero,81100d4c <bDdr2SwitchMemory+0x50>
81100d34:	00000b06 	br	81100d64 <bDdr2SwitchMemory+0x68>
	case DDR2_M1_ID:
		*(puliDdr2MemAddr) = (alt_u32) DDR2_M1_MEMORY_WINDOWED_OFFSET;
81100d38:	e0bffe17 	ldw	r2,-8(fp)
81100d3c:	10000015 	stw	zero,0(r2)
		bSuccess = TRUE;
81100d40:	00800044 	movi	r2,1
81100d44:	e0bffd15 	stw	r2,-12(fp)
		break;
81100d48:	00000a06 	br	81100d74 <bDdr2SwitchMemory+0x78>
	case DDR2_M2_ID:
		*(puliDdr2MemAddr) = (alt_u32) DDR2_M2_MEMORY_WINDOWED_OFFSET;
81100d4c:	e0bffe17 	ldw	r2,-8(fp)
81100d50:	00e00034 	movhi	r3,32768
81100d54:	10c00015 	stw	r3,0(r2)
		bSuccess = TRUE;
81100d58:	00800044 	movi	r2,1
81100d5c:	e0bffd15 	stw	r2,-12(fp)
		break;
81100d60:	00000406 	br	81100d74 <bDdr2SwitchMemory+0x78>
	default:
		bSuccess = FALSE;
81100d64:	e03ffd15 	stw	zero,-12(fp)

		printf("DR2 Memory ID not identified!! Error switching memories!! \n");
81100d68:	012044b4 	movhi	r4,33042
81100d6c:	2124c004 	addi	r4,r4,-27904
81100d70:	1102de40 	call	81102de4 <puts>

	}

	return bSuccess;
81100d74:	e0bffd17 	ldw	r2,-12(fp)
}
81100d78:	e037883a 	mov	sp,fp
81100d7c:	dfc00117 	ldw	ra,4(sp)
81100d80:	df000017 	ldw	fp,0(sp)
81100d84:	dec00204 	addi	sp,sp,8
81100d88:	f800283a 	ret

81100d8c <bDdr2MemoryWriteTest>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryWriteTest(alt_u8 ucMemoryId) {
81100d8c:	deffe204 	addi	sp,sp,-120
81100d90:	dfc01d15 	stw	ra,116(sp)
81100d94:	df001c15 	stw	fp,112(sp)
81100d98:	dc401b15 	stw	r17,108(sp)
81100d9c:	dc001a15 	stw	r16,104(sp)
81100da0:	df001c04 	addi	fp,sp,112
81100da4:	2005883a 	mov	r2,r4
81100da8:	e0bffd05 	stb	r2,-12(fp)

	printf("===== DE4 DDR2 Memory Write Test =====\n");
81100dac:	012044b4 	movhi	r4,33042
81100db0:	2124cf04 	addi	r4,r4,-27844
81100db4:	1102de40 	call	81102de4 <puts>

	bool bSuccess = FALSE;
81100db8:	e03fe515 	stw	zero,-108(fp)
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	switch (ucMemoryId) {
81100dbc:	e0bffd03 	ldbu	r2,-12(fp)
81100dc0:	10000326 	beq	r2,zero,81100dd0 <bDdr2MemoryWriteTest+0x44>
81100dc4:	10800060 	cmpeqi	r2,r2,1
81100dc8:	10000a1e 	bne	r2,zero,81100df4 <bDdr2MemoryWriteTest+0x68>
81100dcc:	00001206 	br	81100e18 <bDdr2MemoryWriteTest+0x8c>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
81100dd0:	e0bffd03 	ldbu	r2,-12(fp)
81100dd4:	1009883a 	mov	r4,r2
81100dd8:	1100cfc0 	call	81100cfc <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
81100ddc:	e03fe615 	stw	zero,-104(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
81100de0:	00a00034 	movhi	r2,32768
81100de4:	e0bfe715 	stw	r2,-100(fp)
		bSuccess = TRUE;
81100de8:	00800044 	movi	r2,1
81100dec:	e0bfe515 	stw	r2,-108(fp)
		break;
81100df0:	00000f06 	br	81100e30 <bDdr2MemoryWriteTest+0xa4>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
81100df4:	e0bffd03 	ldbu	r2,-12(fp)
81100df8:	1009883a 	mov	r4,r2
81100dfc:	1100cfc0 	call	81100cfc <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
81100e00:	e03fe615 	stw	zero,-104(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
81100e04:	00a00034 	movhi	r2,32768
81100e08:	e0bfe715 	stw	r2,-100(fp)
		bSuccess = TRUE;
81100e0c:	00800044 	movi	r2,1
81100e10:	e0bfe515 	stw	r2,-108(fp)
		break;
81100e14:	00000606 	br	81100e30 <bDdr2MemoryWriteTest+0xa4>
	default:
		bSuccess = FALSE;
81100e18:	e03fe515 	stw	zero,-108(fp)

		printf(	"DR2 Memory ID not identified!! Aborting Test \n");
81100e1c:	012044b4 	movhi	r4,33042
81100e20:	2122de04 	addi	r4,r4,-29832
81100e24:	1102de40 	call	81102de4 <puts>

		return bSuccess;
81100e28:	e0bfe517 	ldw	r2,-108(fp)
81100e2c:	0000dd06 	br	811011a4 <bDdr2MemoryWriteTest+0x418>
	}

	printf("DDR2 Size: %ld MBytes\n", uliByteLen / 1024 / 1024);
81100e30:	e0bfe717 	ldw	r2,-100(fp)
81100e34:	1004d53a 	srli	r2,r2,20
81100e38:	100b883a 	mov	r5,r2
81100e3c:	012044b4 	movhi	r4,33042
81100e40:	2124d904 	addi	r4,r4,-27804
81100e44:	1102cc80 	call	81102cc8 <printf>

	int iI, iNRemainedLen, iNAccessLen;
	TMyData *pxDes;

	int iNItemNum, iNPos;
	const int ciMyDataSize = sizeof(TMyData);
81100e48:	00800104 	movi	r2,4
81100e4c:	e0bfee15 	stw	r2,-72(fp)
	int iNProgressIndex = 0;
81100e50:	e03fed15 	stw	zero,-76(fp)
	alt_u32 uliInitValue;
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;
81100e54:	e03fef15 	stw	zero,-68(fp)

	for (iI = 0; iI < 10; iI++) {
81100e58:	e03fe815 	stw	zero,-96(fp)
81100e5c:	00001506 	br	81100eb4 <bDdr2MemoryWriteTest+0x128>
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
81100e60:	e0ffe717 	ldw	r3,-100(fp)
81100e64:	00b33374 	movhi	r2,52429
81100e68:	10b33344 	addi	r2,r2,-13107
81100e6c:	1888383a 	mulxuu	r4,r3,r2
81100e70:	1885383a 	mul	r2,r3,r2
81100e74:	1021883a 	mov	r16,r2
81100e78:	2023883a 	mov	r17,r4
81100e7c:	8804d0fa 	srli	r2,r17,3
81100e80:	e0ffe817 	ldw	r3,-96(fp)
81100e84:	18c00044 	addi	r3,r3,1
81100e88:	10c7383a 	mul	r3,r2,r3
81100e8c:	e0bfe817 	ldw	r2,-96(fp)
81100e90:	1085883a 	add	r2,r2,r2
81100e94:	1085883a 	add	r2,r2,r2
81100e98:	e13fe504 	addi	r4,fp,-108
81100e9c:	2085883a 	add	r2,r4,r2
81100ea0:	10800e04 	addi	r2,r2,56
81100ea4:	10c00015 	stw	r3,0(r2)
	int iNProgressIndex = 0;
	alt_u32 uliInitValue;
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;

	for (iI = 0; iI < 10; iI++) {
81100ea8:	e0bfe817 	ldw	r2,-96(fp)
81100eac:	10800044 	addi	r2,r2,1
81100eb0:	e0bfe815 	stw	r2,-96(fp)
81100eb4:	e0bfe817 	ldw	r2,-96(fp)
81100eb8:	10800290 	cmplti	r2,r2,10
81100ebc:	103fe81e 	bne	r2,zero,81100e60 <__reset+0xfb0e0e60>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81100ec0:	d0a02317 	ldw	r2,-32628(gp)
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
	}
	uliInitValue = alt_nticks();
81100ec4:	e0bff015 	stw	r2,-64(fp)
	iNItemNum = sizeof(xSZData) / sizeof(xSZData[0]);
81100ec8:	00804004 	movi	r2,256
81100ecc:	e0bfeb15 	stw	r2,-84(fp)
	for (iI = 0; iI < iNItemNum; iI++) {
81100ed0:	e03fe815 	stw	zero,-96(fp)
81100ed4:	00001e06 	br	81100f50 <bDdr2MemoryWriteTest+0x1c4>
		if (iI == 0) {
81100ed8:	e0bfe817 	ldw	r2,-96(fp)
81100edc:	1000091e 	bne	r2,zero,81100f04 <bDdr2MemoryWriteTest+0x178>
			xSZData[iI] = uliInitValue;
81100ee0:	00a044b4 	movhi	r2,33042
81100ee4:	10af8704 	addi	r2,r2,-16868
81100ee8:	e0ffe817 	ldw	r3,-96(fp)
81100eec:	18c7883a 	add	r3,r3,r3
81100ef0:	18c7883a 	add	r3,r3,r3
81100ef4:	10c5883a 	add	r2,r2,r3
81100ef8:	e0fff017 	ldw	r3,-64(fp)
81100efc:	10c00015 	stw	r3,0(r2)
81100f00:	00001006 	br	81100f44 <bDdr2MemoryWriteTest+0x1b8>
		} else {
			xSZData[iI] = xSZData[iI - 1] * 13;
81100f04:	e0bfe817 	ldw	r2,-96(fp)
81100f08:	10ffffc4 	addi	r3,r2,-1
81100f0c:	00a044b4 	movhi	r2,33042
81100f10:	10af8704 	addi	r2,r2,-16868
81100f14:	18c7883a 	add	r3,r3,r3
81100f18:	18c7883a 	add	r3,r3,r3
81100f1c:	10c5883a 	add	r2,r2,r3
81100f20:	10800017 	ldw	r2,0(r2)
81100f24:	11000364 	muli	r4,r2,13
81100f28:	00a044b4 	movhi	r2,33042
81100f2c:	10af8704 	addi	r2,r2,-16868
81100f30:	e0ffe817 	ldw	r3,-96(fp)
81100f34:	18c7883a 	add	r3,r3,r3
81100f38:	18c7883a 	add	r3,r3,r3
81100f3c:	10c5883a 	add	r2,r2,r3
81100f40:	11000015 	stw	r4,0(r2)
	for (iI = 0; iI < 10; iI++) {
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
	}
	uliInitValue = alt_nticks();
	iNItemNum = sizeof(xSZData) / sizeof(xSZData[0]);
	for (iI = 0; iI < iNItemNum; iI++) {
81100f44:	e0bfe817 	ldw	r2,-96(fp)
81100f48:	10800044 	addi	r2,r2,1
81100f4c:	e0bfe815 	stw	r2,-96(fp)
81100f50:	e0ffe817 	ldw	r3,-96(fp)
81100f54:	e0bfeb17 	ldw	r2,-84(fp)
81100f58:	18bfdf16 	blt	r3,r2,81100ed8 <__reset+0xfb0e0ed8>
			xSZData[iI] = uliInitValue;
		} else {
			xSZData[iI] = xSZData[iI - 1] * 13;
		}
	}
	xSZData[iNItemNum - 1] = 0xAAAAAAAA;
81100f5c:	e0bfeb17 	ldw	r2,-84(fp)
81100f60:	10ffffc4 	addi	r3,r2,-1
81100f64:	00a044b4 	movhi	r2,33042
81100f68:	10af8704 	addi	r2,r2,-16868
81100f6c:	18c7883a 	add	r3,r3,r3
81100f70:	18c7883a 	add	r3,r3,r3
81100f74:	10c7883a 	add	r3,r2,r3
81100f78:	00aaaaf4 	movhi	r2,43691
81100f7c:	10aaaa84 	addi	r2,r2,-21846
81100f80:	18800015 	stw	r2,0(r3)
	xSZData[iNItemNum - 2] = 0x55555555;
81100f84:	e0bfeb17 	ldw	r2,-84(fp)
81100f88:	10ffff84 	addi	r3,r2,-2
81100f8c:	00a044b4 	movhi	r2,33042
81100f90:	10af8704 	addi	r2,r2,-16868
81100f94:	18c7883a 	add	r3,r3,r3
81100f98:	18c7883a 	add	r3,r3,r3
81100f9c:	10c7883a 	add	r3,r2,r3
81100fa0:	00955574 	movhi	r2,21845
81100fa4:	10955544 	addi	r2,r2,21845
81100fa8:	18800015 	stw	r2,0(r3)
	xSZData[iNItemNum - 3] = 0x00000000;
81100fac:	e0bfeb17 	ldw	r2,-84(fp)
81100fb0:	10ffff44 	addi	r3,r2,-3
81100fb4:	00a044b4 	movhi	r2,33042
81100fb8:	10af8704 	addi	r2,r2,-16868
81100fbc:	18c7883a 	add	r3,r3,r3
81100fc0:	18c7883a 	add	r3,r3,r3
81100fc4:	10c5883a 	add	r2,r2,r3
81100fc8:	10000015 	stw	zero,0(r2)
	xSZData[iNItemNum - 4] = 0xFFFFFFFF;
81100fcc:	e0bfeb17 	ldw	r2,-84(fp)
81100fd0:	10ffff04 	addi	r3,r2,-4
81100fd4:	00a044b4 	movhi	r2,33042
81100fd8:	10af8704 	addi	r2,r2,-16868
81100fdc:	18c7883a 	add	r3,r3,r3
81100fe0:	18c7883a 	add	r3,r3,r3
81100fe4:	10c5883a 	add	r2,r2,r3
81100fe8:	00ffffc4 	movi	r3,-1
81100fec:	10c00015 	stw	r3,0(r2)

	printf("Writing data...\n");
81100ff0:	012044b4 	movhi	r4,33042
81100ff4:	2124df04 	addi	r4,r4,-27780
81100ff8:	1102de40 	call	81102de4 <puts>
81100ffc:	d0a02317 	ldw	r2,-32628(gp)

	iTimeStart = alt_nticks();
81101000:	e0bff115 	stw	r2,-60(fp)
	pxDes = (TMyData *) uliDdr2Base;
81101004:	e0bfe617 	ldw	r2,-104(fp)
81101008:	e0bfea15 	stw	r2,-88(fp)
	iNAccessLen = sizeof(xSZData);
8110100c:	00810004 	movi	r2,1024
81101010:	e0bfe915 	stw	r2,-92(fp)
	iNItemNum = iNAccessLen / ciMyDataSize;
81101014:	e0ffe917 	ldw	r3,-92(fp)
81101018:	e0bfee17 	ldw	r2,-72(fp)
8110101c:	1885283a 	div	r2,r3,r2
81101020:	e0bfeb15 	stw	r2,-84(fp)
	iNPos = 0;
81101024:	e03fec15 	stw	zero,-80(fp)
	while (iNPos < uliByteLen) {
81101028:	00003306 	br	811010f8 <bDdr2MemoryWriteTest+0x36c>
		iNRemainedLen = uliByteLen - iNPos;
8110102c:	e0bfec17 	ldw	r2,-80(fp)
81101030:	e0ffe717 	ldw	r3,-100(fp)
81101034:	1885c83a 	sub	r2,r3,r2
81101038:	e0bff215 	stw	r2,-56(fp)
		if (iNAccessLen > iNRemainedLen) {
8110103c:	e0bfe917 	ldw	r2,-92(fp)
81101040:	e0fff217 	ldw	r3,-56(fp)
81101044:	1880060e 	bge	r3,r2,81101060 <bDdr2MemoryWriteTest+0x2d4>
			iNAccessLen = iNRemainedLen;
81101048:	e0bff217 	ldw	r2,-56(fp)
8110104c:	e0bfe915 	stw	r2,-92(fp)
			iNItemNum = iNAccessLen / ciMyDataSize;
81101050:	e0ffe917 	ldw	r3,-92(fp)
81101054:	e0bfee17 	ldw	r2,-72(fp)
81101058:	1885283a 	div	r2,r3,r2
8110105c:	e0bfeb15 	stw	r2,-84(fp)
		}
		memcpy(pxDes, xSZData, iNAccessLen);
81101060:	e0bfe917 	ldw	r2,-92(fp)
81101064:	100d883a 	mov	r6,r2
81101068:	016044b4 	movhi	r5,33042
8110106c:	296f8704 	addi	r5,r5,-16868
81101070:	e13fea17 	ldw	r4,-88(fp)
81101074:	1102b500 	call	81102b50 <memcpy>
		pxDes += iNItemNum;
81101078:	e0bfeb17 	ldw	r2,-84(fp)
8110107c:	1085883a 	add	r2,r2,r2
81101080:	1085883a 	add	r2,r2,r2
81101084:	1007883a 	mov	r3,r2
81101088:	e0bfea17 	ldw	r2,-88(fp)
8110108c:	10c5883a 	add	r2,r2,r3
81101090:	e0bfea15 	stw	r2,-88(fp)
		iNPos += iNAccessLen;
81101094:	e0ffec17 	ldw	r3,-80(fp)
81101098:	e0bfe917 	ldw	r2,-92(fp)
8110109c:	1885883a 	add	r2,r3,r2
811010a0:	e0bfec15 	stw	r2,-80(fp)
		if (iNProgressIndex <= 9 && iNPos >= uliSZProgress[iNProgressIndex]) {
811010a4:	e0bfed17 	ldw	r2,-76(fp)
811010a8:	10800288 	cmpgei	r2,r2,10
811010ac:	1000121e 	bne	r2,zero,811010f8 <bDdr2MemoryWriteTest+0x36c>
811010b0:	e0bfed17 	ldw	r2,-76(fp)
811010b4:	1085883a 	add	r2,r2,r2
811010b8:	1085883a 	add	r2,r2,r2
811010bc:	e0ffe504 	addi	r3,fp,-108
811010c0:	1885883a 	add	r2,r3,r2
811010c4:	10800e04 	addi	r2,r2,56
811010c8:	10800017 	ldw	r2,0(r2)
811010cc:	e0ffec17 	ldw	r3,-80(fp)
811010d0:	18800936 	bltu	r3,r2,811010f8 <bDdr2MemoryWriteTest+0x36c>
			iNProgressIndex++;
811010d4:	e0bfed17 	ldw	r2,-76(fp)
811010d8:	10800044 	addi	r2,r2,1
811010dc:	e0bfed15 	stw	r2,-76(fp)

			printf("%02d%% ", iNProgressIndex * 10);
811010e0:	e0bfed17 	ldw	r2,-76(fp)
811010e4:	108002a4 	muli	r2,r2,10
811010e8:	100b883a 	mov	r5,r2
811010ec:	012044b4 	movhi	r4,33042
811010f0:	2124e304 	addi	r4,r4,-27764
811010f4:	1102cc80 	call	81102cc8 <printf>
	iTimeStart = alt_nticks();
	pxDes = (TMyData *) uliDdr2Base;
	iNAccessLen = sizeof(xSZData);
	iNItemNum = iNAccessLen / ciMyDataSize;
	iNPos = 0;
	while (iNPos < uliByteLen) {
811010f8:	e0ffec17 	ldw	r3,-80(fp)
811010fc:	e0bfe717 	ldw	r2,-100(fp)
81101100:	18bfca36 	bltu	r3,r2,8110102c <__reset+0xfb0e102c>

			printf("%02d%% ", iNProgressIndex * 10);

		}
	}
	alt_dcache_flush_all();
81101104:	1112d480 	call	81112d48 <alt_dcache_flush_all>

	printf("\n");
81101108:	01000284 	movi	r4,10
8110110c:	1102d0c0 	call	81102d0c <putchar>
81101110:	d0e02317 	ldw	r3,-32628(gp)

	iTimeElapsed = alt_nticks() - iTimeStart;
81101114:	e0bff117 	ldw	r2,-60(fp)
81101118:	1885c83a 	sub	r2,r3,r2
8110111c:	e0bfef15 	stw	r2,-68(fp)
	if (bSuccess) {
81101120:	e0bfe517 	ldw	r2,-108(fp)
81101124:	10001926 	beq	r2,zero,8110118c <bDdr2MemoryWriteTest+0x400>

		sprintf(cDebugBuffer,
				"DDR2 write test pass, size=%lu bytes, %.3f sec\n", uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
81101128:	e13fef17 	ldw	r4,-68(fp)
8110112c:	11027c80 	call	811027c8 <__floatsisf>
81101130:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81101134:	d0a02217 	ldw	r2,-32632(gp)
81101138:	1009883a 	mov	r4,r2
8110113c:	11028ec0 	call	811028ec <__floatunsisf>
81101140:	1007883a 	mov	r3,r2
81101144:	180b883a 	mov	r5,r3
81101148:	8009883a 	mov	r4,r16
8110114c:	11023880 	call	81102388 <__divsf3>
81101150:	1007883a 	mov	r3,r2
81101154:	1805883a 	mov	r2,r3
	printf("\n");

	iTimeElapsed = alt_nticks() - iTimeStart;
	if (bSuccess) {

		sprintf(cDebugBuffer,
81101158:	1009883a 	mov	r4,r2
8110115c:	11029dc0 	call	811029dc <__extendsfdf2>
81101160:	1009883a 	mov	r4,r2
81101164:	180b883a 	mov	r5,r3
81101168:	d9400015 	stw	r5,0(sp)
8110116c:	200f883a 	mov	r7,r4
81101170:	e1bfe717 	ldw	r6,-100(fp)
81101174:	016044b4 	movhi	r5,33042
81101178:	2964e504 	addi	r5,r5,-27756
8110117c:	012044b4 	movhi	r4,33042
81101180:	212f4704 	addi	r4,r4,-17124
81101184:	1102e500 	call	81102e50 <sprintf>
81101188:	00000306 	br	81101198 <bDdr2MemoryWriteTest+0x40c>
				"DDR2 write test pass, size=%lu bytes, %.3f sec\n", uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());

	} else {

		printf("DDR2 write test fail\n");
8110118c:	012044b4 	movhi	r4,33042
81101190:	2124f104 	addi	r4,r4,-27708
81101194:	1102de40 	call	81102de4 <puts>

	}

	printf("\n");
81101198:	01000284 	movi	r4,10
8110119c:	1102d0c0 	call	81102d0c <putchar>

	return bSuccess;
811011a0:	e0bfe517 	ldw	r2,-108(fp)
}
811011a4:	e6fffe04 	addi	sp,fp,-8
811011a8:	dfc00317 	ldw	ra,12(sp)
811011ac:	df000217 	ldw	fp,8(sp)
811011b0:	dc400117 	ldw	r17,4(sp)
811011b4:	dc000017 	ldw	r16,0(sp)
811011b8:	dec00404 	addi	sp,sp,16
811011bc:	f800283a 	ret

811011c0 <bDdr2MemoryReadTest>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryReadTest(alt_u8 ucMemoryId) {
811011c0:	deffe204 	addi	sp,sp,-120
811011c4:	dfc01d15 	stw	ra,116(sp)
811011c8:	df001c15 	stw	fp,112(sp)
811011cc:	dc401b15 	stw	r17,108(sp)
811011d0:	dc001a15 	stw	r16,104(sp)
811011d4:	df001c04 	addi	fp,sp,112
811011d8:	2005883a 	mov	r2,r4
811011dc:	e0bffd05 	stb	r2,-12(fp)

	printf("===== DE4 DDR2 Memory Read Test =====\n");
811011e0:	012044b4 	movhi	r4,33042
811011e4:	2124f704 	addi	r4,r4,-27684
811011e8:	1102de40 	call	81102de4 <puts>

	bool bSuccess = FALSE;
811011ec:	e03fe515 	stw	zero,-108(fp)
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	switch (ucMemoryId) {
811011f0:	e0bffd03 	ldbu	r2,-12(fp)
811011f4:	10000326 	beq	r2,zero,81101204 <bDdr2MemoryReadTest+0x44>
811011f8:	10800060 	cmpeqi	r2,r2,1
811011fc:	10000a1e 	bne	r2,zero,81101228 <bDdr2MemoryReadTest+0x68>
81101200:	00001206 	br	8110124c <bDdr2MemoryReadTest+0x8c>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
81101204:	e0bffd03 	ldbu	r2,-12(fp)
81101208:	1009883a 	mov	r4,r2
8110120c:	1100cfc0 	call	81100cfc <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
81101210:	e03fe615 	stw	zero,-104(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
81101214:	00a00034 	movhi	r2,32768
81101218:	e0bfe715 	stw	r2,-100(fp)
		bSuccess = TRUE;
8110121c:	00800044 	movi	r2,1
81101220:	e0bfe515 	stw	r2,-108(fp)
		break;
81101224:	00000f06 	br	81101264 <bDdr2MemoryReadTest+0xa4>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
81101228:	e0bffd03 	ldbu	r2,-12(fp)
8110122c:	1009883a 	mov	r4,r2
81101230:	1100cfc0 	call	81100cfc <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
81101234:	e03fe615 	stw	zero,-104(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
81101238:	00a00034 	movhi	r2,32768
8110123c:	e0bfe715 	stw	r2,-100(fp)
		bSuccess = TRUE;
81101240:	00800044 	movi	r2,1
81101244:	e0bfe515 	stw	r2,-108(fp)
		break;
81101248:	00000606 	br	81101264 <bDdr2MemoryReadTest+0xa4>
	default:
		bSuccess = FALSE;
8110124c:	e03fe515 	stw	zero,-108(fp)

		printf(
81101250:	012044b4 	movhi	r4,33042
81101254:	2122de04 	addi	r4,r4,-29832
81101258:	1102de40 	call	81102de4 <puts>
				"DR2 Memory ID not identified!! Aborting Test \n");

		return bSuccess;
8110125c:	e0bfe517 	ldw	r2,-108(fp)
81101260:	0000ba06 	br	8110154c <bDdr2MemoryReadTest+0x38c>
	}

	printf("DDR2 Size: %lu MBytes\n", uliByteLen / 1024 / 1024);
81101264:	e0bfe717 	ldw	r2,-100(fp)
81101268:	1004d53a 	srli	r2,r2,20
8110126c:	100b883a 	mov	r5,r2
81101270:	012044b4 	movhi	r4,33042
81101274:	21250104 	addi	r4,r4,-27644
81101278:	1102cc80 	call	81102cc8 <printf>

	int iI, iNRemainedLen, iNAccessLen;
	TMyData *pxDes, *pxSrc;
	int iNItemNum, iNPos;
	iNItemNum = sizeof(xSZData) / sizeof(xSZData[0]);
8110127c:	00804004 	movi	r2,256
81101280:	e0bfec15 	stw	r2,-80(fp)
	const int ciMyDataSize = sizeof(TMyData);
81101284:	00800104 	movi	r2,4
81101288:	e0bfef15 	stw	r2,-68(fp)
	iNAccessLen = iNItemNum * ciMyDataSize;
8110128c:	e0ffec17 	ldw	r3,-80(fp)
81101290:	e0bfef17 	ldw	r2,-68(fp)
81101294:	1885383a 	mul	r2,r3,r2
81101298:	e0bfe915 	stw	r2,-92(fp)
	int iNProgressIndex = 0;
8110129c:	e03fee15 	stw	zero,-72(fp)
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;
811012a0:	e03ff015 	stw	zero,-64(fp)

	for (iI = 0; iI < 10; iI++) {
811012a4:	e03fe815 	stw	zero,-96(fp)
811012a8:	00001506 	br	81101300 <bDdr2MemoryReadTest+0x140>
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
811012ac:	e0ffe717 	ldw	r3,-100(fp)
811012b0:	00b33374 	movhi	r2,52429
811012b4:	10b33344 	addi	r2,r2,-13107
811012b8:	1888383a 	mulxuu	r4,r3,r2
811012bc:	1885383a 	mul	r2,r3,r2
811012c0:	1021883a 	mov	r16,r2
811012c4:	2023883a 	mov	r17,r4
811012c8:	8804d0fa 	srli	r2,r17,3
811012cc:	e0ffe817 	ldw	r3,-96(fp)
811012d0:	18c00044 	addi	r3,r3,1
811012d4:	10c7383a 	mul	r3,r2,r3
811012d8:	e0bfe817 	ldw	r2,-96(fp)
811012dc:	1085883a 	add	r2,r2,r2
811012e0:	1085883a 	add	r2,r2,r2
811012e4:	e13fe504 	addi	r4,fp,-108
811012e8:	2085883a 	add	r2,r4,r2
811012ec:	10800e04 	addi	r2,r2,56
811012f0:	10c00015 	stw	r3,0(r2)
	iNAccessLen = iNItemNum * ciMyDataSize;
	int iNProgressIndex = 0;
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;

	for (iI = 0; iI < 10; iI++) {
811012f4:	e0bfe817 	ldw	r2,-96(fp)
811012f8:	10800044 	addi	r2,r2,1
811012fc:	e0bfe815 	stw	r2,-96(fp)
81101300:	e0bfe817 	ldw	r2,-96(fp)
81101304:	10800290 	cmplti	r2,r2,10
81101308:	103fe81e 	bne	r2,zero,811012ac <__reset+0xfb0e12ac>
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
	}

	iNProgressIndex = 0;
8110130c:	e03fee15 	stw	zero,-72(fp)

	printf("Reading/Verifying Data...\n");
81101310:	012044b4 	movhi	r4,33042
81101314:	21250704 	addi	r4,r4,-27620
81101318:	1102de40 	call	81102de4 <puts>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
8110131c:	d0a02317 	ldw	r2,-32628(gp)

	iTimeStart = alt_nticks();
81101320:	e0bff115 	stw	r2,-60(fp)

	pxSrc = (TMyData *) uliDdr2Base;
81101324:	e0bfe617 	ldw	r2,-104(fp)
81101328:	e0bfeb15 	stw	r2,-84(fp)
	iNAccessLen = sizeof(xSZData);
8110132c:	00810004 	movi	r2,1024
81101330:	e0bfe915 	stw	r2,-92(fp)
	iNItemNum = iNAccessLen / ciMyDataSize;
81101334:	e0ffe917 	ldw	r3,-92(fp)
81101338:	e0bfef17 	ldw	r2,-68(fp)
8110133c:	1885283a 	div	r2,r3,r2
81101340:	e0bfec15 	stw	r2,-80(fp)
	iNPos = 0;
81101344:	e03fed15 	stw	zero,-76(fp)
	while (bSuccess && iNPos < uliByteLen) {
81101348:	00005606 	br	811014a4 <bDdr2MemoryReadTest+0x2e4>
		iNRemainedLen = uliByteLen - iNPos;
8110134c:	e0bfed17 	ldw	r2,-76(fp)
81101350:	e0ffe717 	ldw	r3,-100(fp)
81101354:	1885c83a 	sub	r2,r3,r2
81101358:	e0bff215 	stw	r2,-56(fp)
		if (iNAccessLen > iNRemainedLen) {
8110135c:	e0bfe917 	ldw	r2,-92(fp)
81101360:	e0fff217 	ldw	r3,-56(fp)
81101364:	1880060e 	bge	r3,r2,81101380 <bDdr2MemoryReadTest+0x1c0>
			iNAccessLen = iNRemainedLen;
81101368:	e0bff217 	ldw	r2,-56(fp)
8110136c:	e0bfe915 	stw	r2,-92(fp)
			iNItemNum = iNAccessLen / ciMyDataSize;
81101370:	e0ffe917 	ldw	r3,-92(fp)
81101374:	e0bfef17 	ldw	r2,-68(fp)
81101378:	1885283a 	div	r2,r3,r2
8110137c:	e0bfec15 	stw	r2,-80(fp)
		}
		pxDes = xSZData;
81101380:	00a044b4 	movhi	r2,33042
81101384:	10af8704 	addi	r2,r2,-16868
81101388:	e0bfea15 	stw	r2,-88(fp)
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
8110138c:	e03fe815 	stw	zero,-96(fp)
81101390:	00002606 	br	8110142c <bDdr2MemoryReadTest+0x26c>
			if (*pxSrc++ != *pxDes++) {
81101394:	e0bfeb17 	ldw	r2,-84(fp)
81101398:	10c00104 	addi	r3,r2,4
8110139c:	e0ffeb15 	stw	r3,-84(fp)
811013a0:	10c00017 	ldw	r3,0(r2)
811013a4:	e0bfea17 	ldw	r2,-88(fp)
811013a8:	11000104 	addi	r4,r2,4
811013ac:	e13fea15 	stw	r4,-88(fp)
811013b0:	10800017 	ldw	r2,0(r2)
811013b4:	18801a26 	beq	r3,r2,81101420 <bDdr2MemoryReadTest+0x260>

				sprintf(cDebugBuffer,
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
811013b8:	e0bfeb17 	ldw	r2,-84(fp)
811013bc:	10bfff04 	addi	r2,r2,-4
811013c0:	10800017 	ldw	r2,0(r2)
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
			if (*pxSrc++ != *pxDes++) {

				sprintf(cDebugBuffer,
811013c4:	1009883a 	mov	r4,r2
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
811013c8:	00a044b4 	movhi	r2,33042
811013cc:	10af8704 	addi	r2,r2,-16868
811013d0:	e0ffe817 	ldw	r3,-96(fp)
811013d4:	18c7883a 	add	r3,r3,r3
811013d8:	18c7883a 	add	r3,r3,r3
811013dc:	10c5883a 	add	r2,r2,r3
811013e0:	10800017 	ldw	r2,0(r2)
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
			if (*pxSrc++ != *pxDes++) {

				sprintf(cDebugBuffer,
811013e4:	100b883a 	mov	r5,r2
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
						(iNPos / ciMyDataSize) + iI);
811013e8:	e0ffed17 	ldw	r3,-76(fp)
811013ec:	e0bfef17 	ldw	r2,-68(fp)
811013f0:	1887283a 	div	r3,r3,r2
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
			if (*pxSrc++ != *pxDes++) {

				sprintf(cDebugBuffer,
811013f4:	e0bfe817 	ldw	r2,-96(fp)
811013f8:	1885883a 	add	r2,r3,r2
811013fc:	d8800015 	stw	r2,0(sp)
81101400:	280f883a 	mov	r7,r5
81101404:	200d883a 	mov	r6,r4
81101408:	016044b4 	movhi	r5,33042
8110140c:	29650e04 	addi	r5,r5,-27592
81101410:	012044b4 	movhi	r4,33042
81101414:	212f4704 	addi	r4,r4,-17124
81101418:	1102e500 	call	81102e50 <sprintf>
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
						(iNPos / ciMyDataSize) + iI);

				bSuccess = FALSE;
8110141c:	e03fe515 	stw	zero,-108(fp)
		if (iNAccessLen > iNRemainedLen) {
			iNAccessLen = iNRemainedLen;
			iNItemNum = iNAccessLen / ciMyDataSize;
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
81101420:	e0bfe817 	ldw	r2,-96(fp)
81101424:	10800044 	addi	r2,r2,1
81101428:	e0bfe815 	stw	r2,-96(fp)
8110142c:	e0ffe817 	ldw	r3,-96(fp)
81101430:	e0bfec17 	ldw	r2,-80(fp)
81101434:	1880020e 	bge	r3,r2,81101440 <bDdr2MemoryReadTest+0x280>
81101438:	e0bfe517 	ldw	r2,-108(fp)
8110143c:	103fd51e 	bne	r2,zero,81101394 <__reset+0xfb0e1394>
						(iNPos / ciMyDataSize) + iI);

				bSuccess = FALSE;
			}
		}
		iNPos += iNAccessLen;
81101440:	e0ffed17 	ldw	r3,-76(fp)
81101444:	e0bfe917 	ldw	r2,-92(fp)
81101448:	1885883a 	add	r2,r3,r2
8110144c:	e0bfed15 	stw	r2,-76(fp)
		if (iNProgressIndex <= 9 && iNPos >= uliSZProgress[iNProgressIndex]) {
81101450:	e0bfee17 	ldw	r2,-72(fp)
81101454:	10800288 	cmpgei	r2,r2,10
81101458:	1000121e 	bne	r2,zero,811014a4 <bDdr2MemoryReadTest+0x2e4>
8110145c:	e0bfee17 	ldw	r2,-72(fp)
81101460:	1085883a 	add	r2,r2,r2
81101464:	1085883a 	add	r2,r2,r2
81101468:	e0ffe504 	addi	r3,fp,-108
8110146c:	1885883a 	add	r2,r3,r2
81101470:	10800e04 	addi	r2,r2,56
81101474:	10800017 	ldw	r2,0(r2)
81101478:	e0ffed17 	ldw	r3,-76(fp)
8110147c:	18800936 	bltu	r3,r2,811014a4 <bDdr2MemoryReadTest+0x2e4>
			iNProgressIndex++;
81101480:	e0bfee17 	ldw	r2,-72(fp)
81101484:	10800044 	addi	r2,r2,1
81101488:	e0bfee15 	stw	r2,-72(fp)

			printf("%02d%% ", iNProgressIndex * 10);
8110148c:	e0bfee17 	ldw	r2,-72(fp)
81101490:	108002a4 	muli	r2,r2,10
81101494:	100b883a 	mov	r5,r2
81101498:	012044b4 	movhi	r4,33042
8110149c:	2124e304 	addi	r4,r4,-27764
811014a0:	1102cc80 	call	81102cc8 <printf>

	pxSrc = (TMyData *) uliDdr2Base;
	iNAccessLen = sizeof(xSZData);
	iNItemNum = iNAccessLen / ciMyDataSize;
	iNPos = 0;
	while (bSuccess && iNPos < uliByteLen) {
811014a4:	e0bfe517 	ldw	r2,-108(fp)
811014a8:	10000326 	beq	r2,zero,811014b8 <bDdr2MemoryReadTest+0x2f8>
811014ac:	e0ffed17 	ldw	r3,-76(fp)
811014b0:	e0bfe717 	ldw	r2,-100(fp)
811014b4:	18bfa536 	bltu	r3,r2,8110134c <__reset+0xfb0e134c>
			printf("%02d%% ", iNProgressIndex * 10);

		}
	}

	printf("\n");
811014b8:	01000284 	movi	r4,10
811014bc:	1102d0c0 	call	81102d0c <putchar>
811014c0:	d0e02317 	ldw	r3,-32628(gp)

	iTimeElapsed = alt_nticks() - iTimeStart;
811014c4:	e0bff117 	ldw	r2,-60(fp)
811014c8:	1885c83a 	sub	r2,r3,r2
811014cc:	e0bff015 	stw	r2,-64(fp)
	if (bSuccess) {
811014d0:	e0bfe517 	ldw	r2,-108(fp)
811014d4:	10001726 	beq	r2,zero,81101534 <bDdr2MemoryReadTest+0x374>

		printf("DDR2 read test pass, size=%ld bytes, %.3f sec\n", uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
811014d8:	e13ff017 	ldw	r4,-64(fp)
811014dc:	11027c80 	call	811027c8 <__floatsisf>
811014e0:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
811014e4:	d0a02217 	ldw	r2,-32632(gp)
811014e8:	1009883a 	mov	r4,r2
811014ec:	11028ec0 	call	811028ec <__floatunsisf>
811014f0:	1007883a 	mov	r3,r2
811014f4:	180b883a 	mov	r5,r3
811014f8:	8009883a 	mov	r4,r16
811014fc:	11023880 	call	81102388 <__divsf3>
81101500:	1007883a 	mov	r3,r2
81101504:	1805883a 	mov	r2,r3
	printf("\n");

	iTimeElapsed = alt_nticks() - iTimeStart;
	if (bSuccess) {

		printf("DDR2 read test pass, size=%ld bytes, %.3f sec\n", uliByteLen,
81101508:	1009883a 	mov	r4,r2
8110150c:	11029dc0 	call	811029dc <__extendsfdf2>
81101510:	1009883a 	mov	r4,r2
81101514:	180b883a 	mov	r5,r3
81101518:	200d883a 	mov	r6,r4
8110151c:	280f883a 	mov	r7,r5
81101520:	e17fe717 	ldw	r5,-100(fp)
81101524:	012044b4 	movhi	r4,33042
81101528:	21251c04 	addi	r4,r4,-27536
8110152c:	1102cc80 	call	81102cc8 <printf>
81101530:	00000306 	br	81101540 <bDdr2MemoryReadTest+0x380>
				(float) iTimeElapsed / (float) alt_ticks_per_second());

	} else {

		printf("DDR2 read test fail\n");
81101534:	012044b4 	movhi	r4,33042
81101538:	21252804 	addi	r4,r4,-27488
8110153c:	1102de40 	call	81102de4 <puts>

	}

	printf("\n");
81101540:	01000284 	movi	r4,10
81101544:	1102d0c0 	call	81102d0c <putchar>

	return bSuccess;
81101548:	e0bfe517 	ldw	r2,-108(fp)
}
8110154c:	e6fffe04 	addi	sp,fp,-8
81101550:	dfc00317 	ldw	ra,12(sp)
81101554:	df000217 	ldw	fp,8(sp)
81101558:	dc400117 	ldw	r17,4(sp)
8110155c:	dc000017 	ldw	r16,0(sp)
81101560:	dec00404 	addi	sp,sp,16
81101564:	f800283a 	ret

81101568 <bDdr2MemoryRandomWriteTest>:
 * @param [in] bTime  Controla se a duração da função será medida
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryRandomWriteTest(alt_u8 ucMemoryId, bool bVerbose, bool bTime) {
81101568:	deffec04 	addi	sp,sp,-80
8110156c:	dfc01315 	stw	ra,76(sp)
81101570:	df001215 	stw	fp,72(sp)
81101574:	dcc01115 	stw	r19,68(sp)
81101578:	dc801015 	stw	r18,64(sp)
8110157c:	dc400f15 	stw	r17,60(sp)
81101580:	dc000e15 	stw	r16,56(sp)
81101584:	df001204 	addi	fp,sp,72
81101588:	2005883a 	mov	r2,r4
8110158c:	e17ffa15 	stw	r5,-24(fp)
81101590:	e1bffb15 	stw	r6,-20(fp)
81101594:	e0bff905 	stb	r2,-28(fp)

	printf("===== DE4 DDR2 Memory Random Write Test =====\n");
81101598:	012044b4 	movhi	r4,33042
8110159c:	21252d04 	addi	r4,r4,-27468
811015a0:	1102de40 	call	81102de4 <puts>

	bool bSuccess = FALSE;
811015a4:	e03fef15 	stw	zero,-68(fp)
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	switch (ucMemoryId) {
811015a8:	e0bff903 	ldbu	r2,-28(fp)
811015ac:	10000326 	beq	r2,zero,811015bc <bDdr2MemoryRandomWriteTest+0x54>
811015b0:	10800060 	cmpeqi	r2,r2,1
811015b4:	10000a1e 	bne	r2,zero,811015e0 <bDdr2MemoryRandomWriteTest+0x78>
811015b8:	00001206 	br	81101604 <bDdr2MemoryRandomWriteTest+0x9c>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
811015bc:	e0bff903 	ldbu	r2,-28(fp)
811015c0:	1009883a 	mov	r4,r2
811015c4:	1100cfc0 	call	81100cfc <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
811015c8:	e03ff015 	stw	zero,-64(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
811015cc:	00a00034 	movhi	r2,32768
811015d0:	e0bff115 	stw	r2,-60(fp)
		bSuccess = TRUE;
811015d4:	00800044 	movi	r2,1
811015d8:	e0bfef15 	stw	r2,-68(fp)
		break;
811015dc:	00000f06 	br	8110161c <bDdr2MemoryRandomWriteTest+0xb4>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
811015e0:	e0bff903 	ldbu	r2,-28(fp)
811015e4:	1009883a 	mov	r4,r2
811015e8:	1100cfc0 	call	81100cfc <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
811015ec:	e03ff015 	stw	zero,-64(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
811015f0:	00a00034 	movhi	r2,32768
811015f4:	e0bff115 	stw	r2,-60(fp)
		bSuccess = TRUE;
811015f8:	00800044 	movi	r2,1
811015fc:	e0bfef15 	stw	r2,-68(fp)
		break;
81101600:	00000606 	br	8110161c <bDdr2MemoryRandomWriteTest+0xb4>
	default:
		bSuccess = FALSE;
81101604:	e03fef15 	stw	zero,-68(fp)

		printf(
81101608:	012044b4 	movhi	r4,33042
8110160c:	2122de04 	addi	r4,r4,-29832
81101610:	1102de40 	call	81102de4 <puts>
				"DR2 Memory ID not identified!! Aborting Test \n");

		return bSuccess;
81101614:	e0bfef17 	ldw	r2,-68(fp)
81101618:	00008606 	br	81101834 <bDdr2MemoryRandomWriteTest+0x2cc>
	}

	printf("DDR2 Size: %ld MBytes\n", uliByteLen / 1024 / 1024);
8110161c:	e0bff117 	ldw	r2,-60(fp)
81101620:	1004d53a 	srli	r2,r2,20
81101624:	100b883a 	mov	r5,r2
81101628:	012044b4 	movhi	r4,33042
8110162c:	2124d904 	addi	r4,r4,-27804
81101630:	1102cc80 	call	81102cc8 <printf>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81101634:	d0a02317 	ldw	r2,-32628(gp)
	alt_u32 uliCurrentState;
	alt_u32 uliMemoryEndAddress;
	alt_u32 uliNextMilestone;
	alt_u8 ucPercentage;

	uliInitialState = alt_nticks();
81101638:	d0a01315 	stw	r2,-32692(gp)
	uliCurrentState = uliInitialState;
8110163c:	d0a01317 	ldw	r2,-32692(gp)
81101640:	e0bff815 	stw	r2,-32(fp)
	uliMemoryEndAddress = uliDdr2Base + uliByteLen;
81101644:	e0fff017 	ldw	r3,-64(fp)
81101648:	e0bff117 	ldw	r2,-60(fp)
8110164c:	1885883a 	add	r2,r3,r2
81101650:	e0bff515 	stw	r2,-44(fp)
	uliNextMilestone = uliDdr2Base + uliByteLen / 20;
81101654:	e0fff117 	ldw	r3,-60(fp)
81101658:	00b33374 	movhi	r2,52429
8110165c:	10b33344 	addi	r2,r2,-13107
81101660:	1888383a 	mulxuu	r4,r3,r2
81101664:	1885383a 	mul	r2,r3,r2
81101668:	1025883a 	mov	r18,r2
8110166c:	2027883a 	mov	r19,r4
81101670:	9806d13a 	srli	r3,r19,4
81101674:	e0bff017 	ldw	r2,-64(fp)
81101678:	1885883a 	add	r2,r3,r2
8110167c:	e0bff315 	stw	r2,-52(fp)
	ucPercentage = 5;
81101680:	00800144 	movi	r2,5
81101684:	e0bff405 	stb	r2,-48(fp)

	printf("Writing to memory...\n");
81101688:	012044b4 	movhi	r4,33042
8110168c:	21253904 	addi	r4,r4,-27420
81101690:	1102de40 	call	81102de4 <puts>

	if (bVerbose == DDR2_VERBOSE) {
81101694:	e0bffa17 	ldw	r2,-24(fp)
81101698:	10800058 	cmpnei	r2,r2,1
8110169c:	1000031e 	bne	r2,zero,811016ac <bDdr2MemoryRandomWriteTest+0x144>

		printf("00%%..");
811016a0:	012044b4 	movhi	r4,33042
811016a4:	21253f04 	addi	r4,r4,-27396
811016a8:	1102cc80 	call	81102cc8 <printf>

	}
	int TimeStart, TimeElapsed = 0;
811016ac:	e03ff615 	stw	zero,-40(fp)
811016b0:	d0a02317 	ldw	r2,-32628(gp)

	TimeStart = alt_nticks();
811016b4:	e0bff715 	stw	r2,-36(fp)
	for (puliDestination = (alt_u32*) uliDdr2Base;
811016b8:	e0bff017 	ldw	r2,-64(fp)
811016bc:	e0bff215 	stw	r2,-56(fp)
811016c0:	00002506 	br	81101758 <bDdr2MemoryRandomWriteTest+0x1f0>
			(alt_u32) puliDestination < uliMemoryEndAddress;
			puliDestination++) {
		*puliDestination = uliXorshift32(&uliCurrentState);
811016c4:	e0bff804 	addi	r2,fp,-32
811016c8:	1009883a 	mov	r4,r2
811016cc:	1101b580 	call	81101b58 <uliXorshift32>
811016d0:	1007883a 	mov	r3,r2
811016d4:	e0bff217 	ldw	r2,-56(fp)
811016d8:	10c00015 	stw	r3,0(r2)
		if ((bVerbose == DDR2_VERBOSE)
				& ((alt_u32) puliDestination > uliNextMilestone)) {
811016dc:	e0bffa17 	ldw	r2,-24(fp)
811016e0:	10800060 	cmpeqi	r2,r2,1
811016e4:	1009883a 	mov	r4,r2
811016e8:	e0bff217 	ldw	r2,-56(fp)
811016ec:	e0fff317 	ldw	r3,-52(fp)
811016f0:	1885803a 	cmpltu	r2,r3,r2
811016f4:	2084703a 	and	r2,r4,r2
	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
			(alt_u32) puliDestination < uliMemoryEndAddress;
			puliDestination++) {
		*puliDestination = uliXorshift32(&uliCurrentState);
		if ((bVerbose == DDR2_VERBOSE)
811016f8:	10803fcc 	andi	r2,r2,255
811016fc:	10001326 	beq	r2,zero,8110174c <bDdr2MemoryRandomWriteTest+0x1e4>
				& ((alt_u32) puliDestination > uliNextMilestone)) {

			printf("..%02d%%..", ucPercentage);
81101700:	e0bff403 	ldbu	r2,-48(fp)
81101704:	100b883a 	mov	r5,r2
81101708:	012044b4 	movhi	r4,33042
8110170c:	21254104 	addi	r4,r4,-27388
81101710:	1102cc80 	call	81102cc8 <printf>

			uliNextMilestone += uliByteLen / 20;
81101714:	e0fff117 	ldw	r3,-60(fp)
81101718:	00b33374 	movhi	r2,52429
8110171c:	10b33344 	addi	r2,r2,-13107
81101720:	1888383a 	mulxuu	r4,r3,r2
81101724:	1885383a 	mul	r2,r3,r2
81101728:	1021883a 	mov	r16,r2
8110172c:	2023883a 	mov	r17,r4
81101730:	8804d13a 	srli	r2,r17,4
81101734:	e0fff317 	ldw	r3,-52(fp)
81101738:	1885883a 	add	r2,r3,r2
8110173c:	e0bff315 	stw	r2,-52(fp)
			ucPercentage += 5;
81101740:	e0bff403 	ldbu	r2,-48(fp)
81101744:	10800144 	addi	r2,r2,5
81101748:	e0bff405 	stb	r2,-48(fp)
	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
			(alt_u32) puliDestination < uliMemoryEndAddress;
			puliDestination++) {
8110174c:	e0bff217 	ldw	r2,-56(fp)
81101750:	10800104 	addi	r2,r2,4
81101754:	e0bff215 	stw	r2,-56(fp)
	}
	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
			(alt_u32) puliDestination < uliMemoryEndAddress;
81101758:	e0fff217 	ldw	r3,-56(fp)

	}
	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
8110175c:	e0bff517 	ldw	r2,-44(fp)
81101760:	18bfd836 	bltu	r3,r2,811016c4 <__reset+0xfb0e16c4>

			uliNextMilestone += uliByteLen / 20;
			ucPercentage += 5;
		}
	}
	alt_dcache_flush_all();
81101764:	1112d480 	call	81112d48 <alt_dcache_flush_all>
	if (bVerbose == DDR2_VERBOSE) {
81101768:	e0bffa17 	ldw	r2,-24(fp)
8110176c:	10800058 	cmpnei	r2,r2,1
81101770:	1000031e 	bne	r2,zero,81101780 <bDdr2MemoryRandomWriteTest+0x218>

		printf("..100%%\n");
81101774:	012044b4 	movhi	r4,33042
81101778:	21254404 	addi	r4,r4,-27376
8110177c:	1102cc80 	call	81102cc8 <printf>

	}

	if (bSuccess) {
81101780:	e0bfef17 	ldw	r2,-68(fp)
81101784:	10002526 	beq	r2,zero,8110181c <bDdr2MemoryRandomWriteTest+0x2b4>
		if (bTime == TRUE) {
81101788:	e0bffb17 	ldw	r2,-20(fp)
8110178c:	10800058 	cmpnei	r2,r2,1
81101790:	10001d1e 	bne	r2,zero,81101808 <bDdr2MemoryRandomWriteTest+0x2a0>
81101794:	d0e02317 	ldw	r3,-32628(gp)
			TimeElapsed = alt_nticks() - TimeStart;
81101798:	e0bff717 	ldw	r2,-36(fp)
8110179c:	1885c83a 	sub	r2,r3,r2
811017a0:	e0bff615 	stw	r2,-40(fp)

			sprintf(cDebugBuffer,
					"DDR2 write test pass, size=%ld bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
811017a4:	e13ff617 	ldw	r4,-40(fp)
811017a8:	11027c80 	call	811027c8 <__floatsisf>
811017ac:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
811017b0:	d0a02217 	ldw	r2,-32632(gp)
811017b4:	1009883a 	mov	r4,r2
811017b8:	11028ec0 	call	811028ec <__floatunsisf>
811017bc:	1007883a 	mov	r3,r2
811017c0:	180b883a 	mov	r5,r3
811017c4:	8009883a 	mov	r4,r16
811017c8:	11023880 	call	81102388 <__divsf3>
811017cc:	1007883a 	mov	r3,r2
811017d0:	1805883a 	mov	r2,r3

	if (bSuccess) {
		if (bTime == TRUE) {
			TimeElapsed = alt_nticks() - TimeStart;

			sprintf(cDebugBuffer,
811017d4:	1009883a 	mov	r4,r2
811017d8:	11029dc0 	call	811029dc <__extendsfdf2>
811017dc:	1009883a 	mov	r4,r2
811017e0:	180b883a 	mov	r5,r3
811017e4:	d9400015 	stw	r5,0(sp)
811017e8:	200f883a 	mov	r7,r4
811017ec:	e1bff117 	ldw	r6,-60(fp)
811017f0:	016044b4 	movhi	r5,33042
811017f4:	29654704 	addi	r5,r5,-27364
811017f8:	012044b4 	movhi	r4,33042
811017fc:	212f4704 	addi	r4,r4,-17124
81101800:	1102e500 	call	81102e50 <sprintf>
81101804:	00000806 	br	81101828 <bDdr2MemoryRandomWriteTest+0x2c0>
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());

		} else {

			printf("DDR2 write test pass, size=%ld bytes\n", uliByteLen);
81101808:	e17ff117 	ldw	r5,-60(fp)
8110180c:	012044b4 	movhi	r4,33042
81101810:	21255304 	addi	r4,r4,-27316
81101814:	1102cc80 	call	81102cc8 <printf>
81101818:	00000306 	br	81101828 <bDdr2MemoryRandomWriteTest+0x2c0>

		}
	} else {

		printf("DDR2 write test fail\n");
8110181c:	012044b4 	movhi	r4,33042
81101820:	2124f104 	addi	r4,r4,-27708
81101824:	1102de40 	call	81102de4 <puts>

	}

	printf("\n");
81101828:	01000284 	movi	r4,10
8110182c:	1102d0c0 	call	81102d0c <putchar>

	return bSuccess;
81101830:	e0bfef17 	ldw	r2,-68(fp)
}
81101834:	e6fffc04 	addi	sp,fp,-16
81101838:	dfc00517 	ldw	ra,20(sp)
8110183c:	df000417 	ldw	fp,16(sp)
81101840:	dcc00317 	ldw	r19,12(sp)
81101844:	dc800217 	ldw	r18,8(sp)
81101848:	dc400117 	ldw	r17,4(sp)
8110184c:	dc000017 	ldw	r16,0(sp)
81101850:	dec00604 	addi	sp,sp,24
81101854:	f800283a 	ret

81101858 <bDdr2MemoryRandomReadTest>:
 * @param [in] bTime  Controla se a duração da função será medida
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryRandomReadTest(alt_u8 ucMemoryId, bool bVerbose, bool bTime) {
81101858:	deffec04 	addi	sp,sp,-80
8110185c:	dfc01315 	stw	ra,76(sp)
81101860:	df001215 	stw	fp,72(sp)
81101864:	dcc01115 	stw	r19,68(sp)
81101868:	dc801015 	stw	r18,64(sp)
8110186c:	dc400f15 	stw	r17,60(sp)
81101870:	dc000e15 	stw	r16,56(sp)
81101874:	df001204 	addi	fp,sp,72
81101878:	2005883a 	mov	r2,r4
8110187c:	e17ffa15 	stw	r5,-24(fp)
81101880:	e1bffb15 	stw	r6,-20(fp)
81101884:	e0bff905 	stb	r2,-28(fp)

	printf("===== DE4 DDR2 Memory Random Read Test =====\n");
81101888:	012044b4 	movhi	r4,33042
8110188c:	21255d04 	addi	r4,r4,-27276
81101890:	1102de40 	call	81102de4 <puts>

	bool bSuccess = FALSE;
81101894:	e03fef15 	stw	zero,-68(fp)
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	switch (ucMemoryId) {
81101898:	e0bff903 	ldbu	r2,-28(fp)
8110189c:	10000326 	beq	r2,zero,811018ac <bDdr2MemoryRandomReadTest+0x54>
811018a0:	10800060 	cmpeqi	r2,r2,1
811018a4:	10000a1e 	bne	r2,zero,811018d0 <bDdr2MemoryRandomReadTest+0x78>
811018a8:	00001206 	br	811018f4 <bDdr2MemoryRandomReadTest+0x9c>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
811018ac:	e0bff903 	ldbu	r2,-28(fp)
811018b0:	1009883a 	mov	r4,r2
811018b4:	1100cfc0 	call	81100cfc <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
811018b8:	e03ff015 	stw	zero,-64(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
811018bc:	00a00034 	movhi	r2,32768
811018c0:	e0bff115 	stw	r2,-60(fp)
		bSuccess = TRUE;
811018c4:	00800044 	movi	r2,1
811018c8:	e0bfef15 	stw	r2,-68(fp)
		break;
811018cc:	00000f06 	br	8110190c <bDdr2MemoryRandomReadTest+0xb4>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
811018d0:	e0bff903 	ldbu	r2,-28(fp)
811018d4:	1009883a 	mov	r4,r2
811018d8:	1100cfc0 	call	81100cfc <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
811018dc:	e03ff015 	stw	zero,-64(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
811018e0:	00a00034 	movhi	r2,32768
811018e4:	e0bff115 	stw	r2,-60(fp)
		bSuccess = TRUE;
811018e8:	00800044 	movi	r2,1
811018ec:	e0bfef15 	stw	r2,-68(fp)
		break;
811018f0:	00000606 	br	8110190c <bDdr2MemoryRandomReadTest+0xb4>
	default:
		bSuccess = FALSE;
811018f4:	e03fef15 	stw	zero,-68(fp)

		printf(
811018f8:	012044b4 	movhi	r4,33042
811018fc:	2122de04 	addi	r4,r4,-29832
81101900:	1102de40 	call	81102de4 <puts>
				"DR2 Memory ID not identified!! Aborting Test \n");

		return bSuccess;
81101904:	e0bfef17 	ldw	r2,-68(fp)
81101908:	00008a06 	br	81101b34 <bDdr2MemoryRandomReadTest+0x2dc>
	}

	printf("DDR2 Size: %ld MBytes\n", uliByteLen / 1024 / 1024);
8110190c:	e0bff117 	ldw	r2,-60(fp)
81101910:	1004d53a 	srli	r2,r2,20
81101914:	100b883a 	mov	r5,r2
81101918:	012044b4 	movhi	r4,33042
8110191c:	2124d904 	addi	r4,r4,-27804
81101920:	1102cc80 	call	81102cc8 <printf>
	alt_u32 uliCurrentState;
	alt_u32 uliMemoryEndAddress;
	alt_u32 uliNextMilestone;
	alt_u8 ucPercentage;

	uliCurrentState = uliInitialState;
81101924:	d0a01317 	ldw	r2,-32692(gp)
81101928:	e0bff815 	stw	r2,-32(fp)
	uliMemoryEndAddress = uliDdr2Base + uliByteLen;
8110192c:	e0fff017 	ldw	r3,-64(fp)
81101930:	e0bff117 	ldw	r2,-60(fp)
81101934:	1885883a 	add	r2,r3,r2
81101938:	e0bff515 	stw	r2,-44(fp)
	uliNextMilestone = uliDdr2Base + uliByteLen / 20;
8110193c:	e0fff117 	ldw	r3,-60(fp)
81101940:	00b33374 	movhi	r2,52429
81101944:	10b33344 	addi	r2,r2,-13107
81101948:	1888383a 	mulxuu	r4,r3,r2
8110194c:	1885383a 	mul	r2,r3,r2
81101950:	1025883a 	mov	r18,r2
81101954:	2027883a 	mov	r19,r4
81101958:	9806d13a 	srli	r3,r19,4
8110195c:	e0bff017 	ldw	r2,-64(fp)
81101960:	1885883a 	add	r2,r3,r2
81101964:	e0bff315 	stw	r2,-52(fp)
	ucPercentage = 5;
81101968:	00800144 	movi	r2,5
8110196c:	e0bff405 	stb	r2,-48(fp)

	printf("Reading from memory...\n");
81101970:	012044b4 	movhi	r4,33042
81101974:	21256904 	addi	r4,r4,-27228
81101978:	1102de40 	call	81102de4 <puts>

	if (bVerbose == DDR2_VERBOSE) {
8110197c:	e0bffa17 	ldw	r2,-24(fp)
81101980:	10800058 	cmpnei	r2,r2,1
81101984:	1000031e 	bne	r2,zero,81101994 <bDdr2MemoryRandomReadTest+0x13c>

		printf("00%%..");
81101988:	012044b4 	movhi	r4,33042
8110198c:	21253f04 	addi	r4,r4,-27396
81101990:	1102cc80 	call	81102cc8 <printf>

	}

	int TimeStart, TimeElapsed = 0;
81101994:	e03ff615 	stw	zero,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81101998:	d0a02317 	ldw	r2,-32628(gp)

	TimeStart = alt_nticks();
8110199c:	e0bff715 	stw	r2,-36(fp)
	for (puliSource = (alt_u32*) uliDdr2Base;
811019a0:	e0bff017 	ldw	r2,-64(fp)
811019a4:	e0bff215 	stw	r2,-56(fp)
811019a8:	00002c06 	br	81101a5c <bDdr2MemoryRandomReadTest+0x204>
			(alt_u32) puliSource < uliMemoryEndAddress; puliSource++) {
		if (uliXorshift32(&uliCurrentState) != *puliSource) {
811019ac:	e0bff804 	addi	r2,fp,-32
811019b0:	1009883a 	mov	r4,r2
811019b4:	1101b580 	call	81101b58 <uliXorshift32>
811019b8:	1007883a 	mov	r3,r2
811019bc:	e0bff217 	ldw	r2,-56(fp)
811019c0:	10800017 	ldw	r2,0(r2)
811019c4:	18800926 	beq	r3,r2,811019ec <bDdr2MemoryRandomReadTest+0x194>
			bSuccess = FALSE;
811019c8:	e03fef15 	stw	zero,-68(fp)
			if (bVerbose == DDR2_VERBOSE) {
811019cc:	e0bffa17 	ldw	r2,-24(fp)
811019d0:	10800058 	cmpnei	r2,r2,1
811019d4:	1000051e 	bne	r2,zero,811019ec <bDdr2MemoryRandomReadTest+0x194>

				printf("Failed to read adress 0x%08lX\n", (alt_u32) puliSource);
811019d8:	e0bff217 	ldw	r2,-56(fp)
811019dc:	100b883a 	mov	r5,r2
811019e0:	012044b4 	movhi	r4,33042
811019e4:	21256f04 	addi	r4,r4,-27204
811019e8:	1102cc80 	call	81102cc8 <printf>

			}
		}
		if ((bVerbose == DDR2_VERBOSE)
811019ec:	e0bffa17 	ldw	r2,-24(fp)
811019f0:	10800058 	cmpnei	r2,r2,1
811019f4:	1000161e 	bne	r2,zero,81101a50 <bDdr2MemoryRandomReadTest+0x1f8>
				&& ((alt_u32) puliSource > uliNextMilestone)) {
811019f8:	e0bff217 	ldw	r2,-56(fp)
811019fc:	e0fff317 	ldw	r3,-52(fp)
81101a00:	1880132e 	bgeu	r3,r2,81101a50 <bDdr2MemoryRandomReadTest+0x1f8>

			printf("..%02d%%..", ucPercentage);
81101a04:	e0bff403 	ldbu	r2,-48(fp)
81101a08:	100b883a 	mov	r5,r2
81101a0c:	012044b4 	movhi	r4,33042
81101a10:	21254104 	addi	r4,r4,-27388
81101a14:	1102cc80 	call	81102cc8 <printf>

			uliNextMilestone += uliByteLen / 20;
81101a18:	e0fff117 	ldw	r3,-60(fp)
81101a1c:	00b33374 	movhi	r2,52429
81101a20:	10b33344 	addi	r2,r2,-13107
81101a24:	1888383a 	mulxuu	r4,r3,r2
81101a28:	1885383a 	mul	r2,r3,r2
81101a2c:	1021883a 	mov	r16,r2
81101a30:	2023883a 	mov	r17,r4
81101a34:	8804d13a 	srli	r2,r17,4
81101a38:	e0fff317 	ldw	r3,-52(fp)
81101a3c:	1885883a 	add	r2,r3,r2
81101a40:	e0bff315 	stw	r2,-52(fp)
			ucPercentage += 5;
81101a44:	e0bff403 	ldbu	r2,-48(fp)
81101a48:	10800144 	addi	r2,r2,5
81101a4c:	e0bff405 	stb	r2,-48(fp)

	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliSource = (alt_u32*) uliDdr2Base;
			(alt_u32) puliSource < uliMemoryEndAddress; puliSource++) {
81101a50:	e0bff217 	ldw	r2,-56(fp)
81101a54:	10800104 	addi	r2,r2,4
81101a58:	e0bff215 	stw	r2,-56(fp)
81101a5c:	e0fff217 	ldw	r3,-56(fp)
	}

	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliSource = (alt_u32*) uliDdr2Base;
81101a60:	e0bff517 	ldw	r2,-44(fp)
81101a64:	18bfd136 	bltu	r3,r2,811019ac <__reset+0xfb0e19ac>

			uliNextMilestone += uliByteLen / 20;
			ucPercentage += 5;
		}
	}
	if (bVerbose == DDR2_VERBOSE) {
81101a68:	e0bffa17 	ldw	r2,-24(fp)
81101a6c:	10800058 	cmpnei	r2,r2,1
81101a70:	1000031e 	bne	r2,zero,81101a80 <bDdr2MemoryRandomReadTest+0x228>

		printf("..100%%\n");
81101a74:	012044b4 	movhi	r4,33042
81101a78:	21254404 	addi	r4,r4,-27376
81101a7c:	1102cc80 	call	81102cc8 <printf>

	}

	if (bSuccess) {
81101a80:	e0bfef17 	ldw	r2,-68(fp)
81101a84:	10002526 	beq	r2,zero,81101b1c <bDdr2MemoryRandomReadTest+0x2c4>
		if (bTime == TRUE) {
81101a88:	e0bffb17 	ldw	r2,-20(fp)
81101a8c:	10800058 	cmpnei	r2,r2,1
81101a90:	10001d1e 	bne	r2,zero,81101b08 <bDdr2MemoryRandomReadTest+0x2b0>
81101a94:	d0e02317 	ldw	r3,-32628(gp)
			TimeElapsed = alt_nticks() - TimeStart;
81101a98:	e0bff717 	ldw	r2,-36(fp)
81101a9c:	1885c83a 	sub	r2,r3,r2
81101aa0:	e0bff615 	stw	r2,-40(fp)

			sprintf(cDebugBuffer,
					"DDR2 read test pass, size=%lu bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
81101aa4:	e13ff617 	ldw	r4,-40(fp)
81101aa8:	11027c80 	call	811027c8 <__floatsisf>
81101aac:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81101ab0:	d0a02217 	ldw	r2,-32632(gp)
81101ab4:	1009883a 	mov	r4,r2
81101ab8:	11028ec0 	call	811028ec <__floatunsisf>
81101abc:	1007883a 	mov	r3,r2
81101ac0:	180b883a 	mov	r5,r3
81101ac4:	8009883a 	mov	r4,r16
81101ac8:	11023880 	call	81102388 <__divsf3>
81101acc:	1007883a 	mov	r3,r2
81101ad0:	1805883a 	mov	r2,r3

	if (bSuccess) {
		if (bTime == TRUE) {
			TimeElapsed = alt_nticks() - TimeStart;

			sprintf(cDebugBuffer,
81101ad4:	1009883a 	mov	r4,r2
81101ad8:	11029dc0 	call	811029dc <__extendsfdf2>
81101adc:	1009883a 	mov	r4,r2
81101ae0:	180b883a 	mov	r5,r3
81101ae4:	d9400015 	stw	r5,0(sp)
81101ae8:	200f883a 	mov	r7,r4
81101aec:	e1bff117 	ldw	r6,-60(fp)
81101af0:	016044b4 	movhi	r5,33042
81101af4:	29657704 	addi	r5,r5,-27172
81101af8:	012044b4 	movhi	r4,33042
81101afc:	212f4704 	addi	r4,r4,-17124
81101b00:	1102e500 	call	81102e50 <sprintf>
81101b04:	00000806 	br	81101b28 <bDdr2MemoryRandomReadTest+0x2d0>
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());

		} else {

			printf("DDR2 read test pass, size=%lu bytes\n", uliByteLen);
81101b08:	e17ff117 	ldw	r5,-60(fp)
81101b0c:	012044b4 	movhi	r4,33042
81101b10:	21258304 	addi	r4,r4,-27124
81101b14:	1102cc80 	call	81102cc8 <printf>
81101b18:	00000306 	br	81101b28 <bDdr2MemoryRandomReadTest+0x2d0>

		}
	} else {

		printf("DDR2 read test fail\n");
81101b1c:	012044b4 	movhi	r4,33042
81101b20:	21252804 	addi	r4,r4,-27488
81101b24:	1102de40 	call	81102de4 <puts>

	}

	printf("\n");
81101b28:	01000284 	movi	r4,10
81101b2c:	1102d0c0 	call	81102d0c <putchar>

	return bSuccess;
81101b30:	e0bfef17 	ldw	r2,-68(fp)
}
81101b34:	e6fffc04 	addi	sp,fp,-16
81101b38:	dfc00517 	ldw	ra,20(sp)
81101b3c:	df000417 	ldw	fp,16(sp)
81101b40:	dcc00317 	ldw	r19,12(sp)
81101b44:	dc800217 	ldw	r18,8(sp)
81101b48:	dc400117 	ldw	r17,4(sp)
81101b4c:	dc000017 	ldw	r16,0(sp)
81101b50:	dec00604 	addi	sp,sp,24
81101b54:	f800283a 	ret

81101b58 <uliXorshift32>:
 * @param [in] bDRIVE  Estado atual do RNG
 *
 * @retval Número aleatório resultate do RNG
 *
 */
alt_u32 uliXorshift32(alt_u32 *puliState) {
81101b58:	defffd04 	addi	sp,sp,-12
81101b5c:	df000215 	stw	fp,8(sp)
81101b60:	df000204 	addi	fp,sp,8
81101b64:	e13fff15 	stw	r4,-4(fp)

	alt_u32 uliX = *puliState;
81101b68:	e0bfff17 	ldw	r2,-4(fp)
81101b6c:	10800017 	ldw	r2,0(r2)
81101b70:	e0bffe15 	stw	r2,-8(fp)
	uliX ^= uliX << 13;
81101b74:	e0bffe17 	ldw	r2,-8(fp)
81101b78:	1004937a 	slli	r2,r2,13
81101b7c:	e0fffe17 	ldw	r3,-8(fp)
81101b80:	1884f03a 	xor	r2,r3,r2
81101b84:	e0bffe15 	stw	r2,-8(fp)
	uliX ^= uliX >> 17;
81101b88:	e0bffe17 	ldw	r2,-8(fp)
81101b8c:	1004d47a 	srli	r2,r2,17
81101b90:	e0fffe17 	ldw	r3,-8(fp)
81101b94:	1884f03a 	xor	r2,r3,r2
81101b98:	e0bffe15 	stw	r2,-8(fp)
	uliX ^= uliX << 5;
81101b9c:	e0bffe17 	ldw	r2,-8(fp)
81101ba0:	1004917a 	slli	r2,r2,5
81101ba4:	e0fffe17 	ldw	r3,-8(fp)
81101ba8:	1884f03a 	xor	r2,r3,r2
81101bac:	e0bffe15 	stw	r2,-8(fp)
	*puliState = uliX;
81101bb0:	e0bfff17 	ldw	r2,-4(fp)
81101bb4:	e0fffe17 	ldw	r3,-8(fp)
81101bb8:	10c00015 	stw	r3,0(r2)

	return uliX;
81101bbc:	e0bffe17 	ldw	r2,-8(fp)
}
81101bc0:	e037883a 	mov	sp,fp
81101bc4:	df000017 	ldw	fp,0(sp)
81101bc8:	dec00104 	addi	sp,sp,4
81101bcc:	f800283a 	ret

81101bd0 <I2C_TestAdress>:
void i2c_start(alt_u32 clk_base, alt_u32 data_base);
void i2c_stop(alt_u32 clk_base, alt_u32 data_base);
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);

bool I2C_TestAdress(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr){
81101bd0:	defffa04 	addi	sp,sp,-24
81101bd4:	dfc00515 	stw	ra,20(sp)
81101bd8:	df000415 	stw	fp,16(sp)
81101bdc:	df000404 	addi	fp,sp,16
81101be0:	e13ffd15 	stw	r4,-12(fp)
81101be4:	e17ffe15 	stw	r5,-8(fp)
81101be8:	3005883a 	mov	r2,r6
81101bec:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
81101bf0:	00800044 	movi	r2,1
81101bf4:	e0bffc15 	stw	r2,-16(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
81101bf8:	e17ffe17 	ldw	r5,-8(fp)
81101bfc:	e13ffd17 	ldw	r4,-12(fp)
81101c00:	1101f800 	call	81101f80 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81101c04:	e0bfff03 	ldbu	r2,-4(fp)
81101c08:	10803fcc 	andi	r2,r2,255
81101c0c:	100d883a 	mov	r6,r2
81101c10:	e17ffe17 	ldw	r5,-8(fp)
81101c14:	e13ffd17 	ldw	r4,-12(fp)
81101c18:	11020840 	call	81102084 <i2c_write>
81101c1c:	1000011e 	bne	r2,zero,81101c24 <I2C_TestAdress+0x54>
        bSuccess = FALSE;
81101c20:	e03ffc15 	stw	zero,-16(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
81101c24:	e17ffe17 	ldw	r5,-8(fp)
81101c28:	e13ffd17 	ldw	r4,-12(fp)
81101c2c:	110200c0 	call	8110200c <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
81101c30:	0106d604 	movi	r4,7000
81101c34:	11140b80 	call	811140b8 <usleep>
    
    return bSuccess;
81101c38:	e0bffc17 	ldw	r2,-16(fp)

}
81101c3c:	e037883a 	mov	sp,fp
81101c40:	dfc00117 	ldw	ra,4(sp)
81101c44:	df000017 	ldw	fp,0(sp)
81101c48:	dec00204 	addi	sp,sp,8
81101c4c:	f800283a 	ret

81101c50 <I2C_Write>:

bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
81101c50:	defff804 	addi	sp,sp,-32
81101c54:	dfc00715 	stw	ra,28(sp)
81101c58:	df000615 	stw	fp,24(sp)
81101c5c:	df000604 	addi	fp,sp,24
81101c60:	e13ffb15 	stw	r4,-20(fp)
81101c64:	e17ffc15 	stw	r5,-16(fp)
81101c68:	3009883a 	mov	r4,r6
81101c6c:	3807883a 	mov	r3,r7
81101c70:	e0800217 	ldw	r2,8(fp)
81101c74:	e13ffd05 	stb	r4,-12(fp)
81101c78:	e0fffe05 	stb	r3,-8(fp)
81101c7c:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
81101c80:	00800044 	movi	r2,1
81101c84:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
81101c88:	e17ffc17 	ldw	r5,-16(fp)
81101c8c:	e13ffb17 	ldw	r4,-20(fp)
81101c90:	1101f800 	call	81101f80 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81101c94:	e0bffd03 	ldbu	r2,-12(fp)
81101c98:	10803fcc 	andi	r2,r2,255
81101c9c:	100d883a 	mov	r6,r2
81101ca0:	e17ffc17 	ldw	r5,-16(fp)
81101ca4:	e13ffb17 	ldw	r4,-20(fp)
81101ca8:	11020840 	call	81102084 <i2c_write>
81101cac:	1000011e 	bne	r2,zero,81101cb4 <I2C_Write+0x64>
        bSuccess = FALSE;
81101cb0:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
81101cb4:	e0bffa17 	ldw	r2,-24(fp)
81101cb8:	10000726 	beq	r2,zero,81101cd8 <I2C_Write+0x88>
81101cbc:	e0bffe03 	ldbu	r2,-8(fp)
81101cc0:	100d883a 	mov	r6,r2
81101cc4:	e17ffc17 	ldw	r5,-16(fp)
81101cc8:	e13ffb17 	ldw	r4,-20(fp)
81101ccc:	11020840 	call	81102084 <i2c_write>
81101cd0:	1000011e 	bne	r2,zero,81101cd8 <I2C_Write+0x88>
        bSuccess = FALSE;
81101cd4:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
81101cd8:	e0bffa17 	ldw	r2,-24(fp)
81101cdc:	10000726 	beq	r2,zero,81101cfc <I2C_Write+0xac>
81101ce0:	e0bfff03 	ldbu	r2,-4(fp)
81101ce4:	100d883a 	mov	r6,r2
81101ce8:	e17ffc17 	ldw	r5,-16(fp)
81101cec:	e13ffb17 	ldw	r4,-20(fp)
81101cf0:	11020840 	call	81102084 <i2c_write>
81101cf4:	1000011e 	bne	r2,zero,81101cfc <I2C_Write+0xac>
        bSuccess = FALSE;
81101cf8:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
81101cfc:	e17ffc17 	ldw	r5,-16(fp)
81101d00:	e13ffb17 	ldw	r4,-20(fp)
81101d04:	110200c0 	call	8110200c <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
81101d08:	0106d604 	movi	r4,7000
81101d0c:	11140b80 	call	811140b8 <usleep>
    
    return bSuccess;
81101d10:	e0bffa17 	ldw	r2,-24(fp)

}
81101d14:	e037883a 	mov	sp,fp
81101d18:	dfc00117 	ldw	ra,4(sp)
81101d1c:	df000017 	ldw	fp,0(sp)
81101d20:	dec00204 	addi	sp,sp,8
81101d24:	f800283a 	ret

81101d28 <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
81101d28:	defff904 	addi	sp,sp,-28
81101d2c:	dfc00615 	stw	ra,24(sp)
81101d30:	df000515 	stw	fp,20(sp)
81101d34:	df000504 	addi	fp,sp,20
81101d38:	e13ffc15 	stw	r4,-16(fp)
81101d3c:	e17ffd15 	stw	r5,-12(fp)
81101d40:	3007883a 	mov	r3,r6
81101d44:	3805883a 	mov	r2,r7
81101d48:	e0fffe05 	stb	r3,-8(fp)
81101d4c:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
81101d50:	00800044 	movi	r2,1
81101d54:	e0bffb15 	stw	r2,-20(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
81101d58:	e17ffd17 	ldw	r5,-12(fp)
81101d5c:	e13ffc17 	ldw	r4,-16(fp)
81101d60:	1101f800 	call	81101f80 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81101d64:	e0bffe03 	ldbu	r2,-8(fp)
81101d68:	10803fcc 	andi	r2,r2,255
81101d6c:	100d883a 	mov	r6,r2
81101d70:	e17ffd17 	ldw	r5,-12(fp)
81101d74:	e13ffc17 	ldw	r4,-16(fp)
81101d78:	11020840 	call	81102084 <i2c_write>
81101d7c:	1000011e 	bne	r2,zero,81101d84 <I2C_Read+0x5c>
        bSuccess = FALSE;
81101d80:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
81101d84:	e0bffb17 	ldw	r2,-20(fp)
81101d88:	10000726 	beq	r2,zero,81101da8 <I2C_Read+0x80>
81101d8c:	e0bfff03 	ldbu	r2,-4(fp)
81101d90:	100d883a 	mov	r6,r2
81101d94:	e17ffd17 	ldw	r5,-12(fp)
81101d98:	e13ffc17 	ldw	r4,-16(fp)
81101d9c:	11020840 	call	81102084 <i2c_write>
81101da0:	1000011e 	bne	r2,zero,81101da8 <I2C_Read+0x80>
        bSuccess = FALSE;
81101da4:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    i2c_start(clk_base, data_base);  // restart
81101da8:	e17ffd17 	ldw	r5,-12(fp)
81101dac:	e13ffc17 	ldw	r4,-16(fp)
81101db0:	1101f800 	call	81101f80 <i2c_start>
    DeviceAddr |= 1; // Read
81101db4:	e0bffe03 	ldbu	r2,-8(fp)
81101db8:	10800054 	ori	r2,r2,1
81101dbc:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
81101dc0:	e0bffb17 	ldw	r2,-20(fp)
81101dc4:	10000826 	beq	r2,zero,81101de8 <I2C_Read+0xc0>
81101dc8:	e0bffe03 	ldbu	r2,-8(fp)
81101dcc:	10803fcc 	andi	r2,r2,255
81101dd0:	100d883a 	mov	r6,r2
81101dd4:	e17ffd17 	ldw	r5,-12(fp)
81101dd8:	e13ffc17 	ldw	r4,-16(fp)
81101ddc:	11020840 	call	81102084 <i2c_write>
81101de0:	1000011e 	bne	r2,zero,81101de8 <I2C_Read+0xc0>
        bSuccess = FALSE;
81101de4:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
81101de8:	e0bffb17 	ldw	r2,-20(fp)
81101dec:	10000526 	beq	r2,zero,81101e04 <I2C_Read+0xdc>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
81101df0:	000f883a 	mov	r7,zero
81101df4:	e1800217 	ldw	r6,8(fp)
81101df8:	e17ffd17 	ldw	r5,-12(fp)
81101dfc:	e13ffc17 	ldw	r4,-16(fp)
81101e00:	11021b40 	call	811021b4 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
81101e04:	e17ffd17 	ldw	r5,-12(fp)
81101e08:	e13ffc17 	ldw	r4,-16(fp)
81101e0c:	110200c0 	call	8110200c <i2c_stop>
    
    return bSuccess;
81101e10:	e0bffb17 	ldw	r2,-20(fp)
}
81101e14:	e037883a 	mov	sp,fp
81101e18:	dfc00117 	ldw	ra,4(sp)
81101e1c:	df000017 	ldw	fp,0(sp)
81101e20:	dec00204 	addi	sp,sp,8
81101e24:	f800283a 	ret

81101e28 <I2C_MultipleRead>:

bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 szData[], alt_u16 len){
81101e28:	defff604 	addi	sp,sp,-40
81101e2c:	dfc00915 	stw	ra,36(sp)
81101e30:	df000815 	stw	fp,32(sp)
81101e34:	df000804 	addi	fp,sp,32
81101e38:	e13ffb15 	stw	r4,-20(fp)
81101e3c:	e17ffc15 	stw	r5,-16(fp)
81101e40:	3007883a 	mov	r3,r6
81101e44:	e1fffe15 	stw	r7,-8(fp)
81101e48:	e0800217 	ldw	r2,8(fp)
81101e4c:	e0fffd05 	stb	r3,-12(fp)
81101e50:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
81101e54:	00800044 	movi	r2,1
81101e58:	e0bff915 	stw	r2,-28(fp)
    //alt_u8 DeviceAddr, 
    alt_u8 ControlAddr = 0;
81101e5c:	e03ffa05 	stb	zero,-24(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
81101e60:	e17ffc17 	ldw	r5,-16(fp)
81101e64:	e13ffb17 	ldw	r4,-20(fp)
81101e68:	1101f800 	call	81101f80 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81101e6c:	e0bffd03 	ldbu	r2,-12(fp)
81101e70:	10803fcc 	andi	r2,r2,255
81101e74:	100d883a 	mov	r6,r2
81101e78:	e17ffc17 	ldw	r5,-16(fp)
81101e7c:	e13ffb17 	ldw	r4,-20(fp)
81101e80:	11020840 	call	81102084 <i2c_write>
81101e84:	1000011e 	bne	r2,zero,81101e8c <I2C_MultipleRead+0x64>
        bSuccess = FALSE;
81101e88:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
81101e8c:	e0bff917 	ldw	r2,-28(fp)
81101e90:	10000726 	beq	r2,zero,81101eb0 <I2C_MultipleRead+0x88>
81101e94:	e0bffa03 	ldbu	r2,-24(fp)
81101e98:	100d883a 	mov	r6,r2
81101e9c:	e17ffc17 	ldw	r5,-16(fp)
81101ea0:	e13ffb17 	ldw	r4,-20(fp)
81101ea4:	11020840 	call	81102084 <i2c_write>
81101ea8:	1000011e 	bne	r2,zero,81101eb0 <I2C_MultipleRead+0x88>
        bSuccess = FALSE;
81101eac:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }    
    if (bSuccess)        
81101eb0:	e0bff917 	ldw	r2,-28(fp)
81101eb4:	10000326 	beq	r2,zero,81101ec4 <I2C_MultipleRead+0x9c>
        i2c_start(clk_base, data_base);  // restart
81101eb8:	e17ffc17 	ldw	r5,-16(fp)
81101ebc:	e13ffb17 	ldw	r4,-20(fp)
81101ec0:	1101f800 	call	81101f80 <i2c_start>
    DeviceAddr |= 1; // Read
81101ec4:	e0bffd03 	ldbu	r2,-12(fp)
81101ec8:	10800054 	ori	r2,r2,1
81101ecc:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
81101ed0:	e0bff917 	ldw	r2,-28(fp)
81101ed4:	10000826 	beq	r2,zero,81101ef8 <I2C_MultipleRead+0xd0>
81101ed8:	e0bffd03 	ldbu	r2,-12(fp)
81101edc:	10803fcc 	andi	r2,r2,255
81101ee0:	100d883a 	mov	r6,r2
81101ee4:	e17ffc17 	ldw	r5,-16(fp)
81101ee8:	e13ffb17 	ldw	r4,-20(fp)
81101eec:	11020840 	call	81102084 <i2c_write>
81101ef0:	1000011e 	bne	r2,zero,81101ef8 <I2C_MultipleRead+0xd0>
        bSuccess = FALSE;
81101ef4:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
81101ef8:	e0bff917 	ldw	r2,-28(fp)
81101efc:	10001726 	beq	r2,zero,81101f5c <I2C_MultipleRead+0x134>
        for(i=0;i<len && bSuccess;i++){
81101f00:	e03ff815 	stw	zero,-32(fp)
81101f04:	00001006 	br	81101f48 <I2C_MultipleRead+0x120>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
81101f08:	e0bff817 	ldw	r2,-32(fp)
81101f0c:	e0fffe17 	ldw	r3,-8(fp)
81101f10:	1889883a 	add	r4,r3,r2
81101f14:	e0bfff0b 	ldhu	r2,-4(fp)
81101f18:	10ffffc4 	addi	r3,r2,-1
81101f1c:	e0bff817 	ldw	r2,-32(fp)
81101f20:	1884c03a 	cmpne	r2,r3,r2
81101f24:	10803fcc 	andi	r2,r2,255
81101f28:	100f883a 	mov	r7,r2
81101f2c:	200d883a 	mov	r6,r4
81101f30:	e17ffc17 	ldw	r5,-16(fp)
81101f34:	e13ffb17 	ldw	r4,-20(fp)
81101f38:	11021b40 	call	811021b4 <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
81101f3c:	e0bff817 	ldw	r2,-32(fp)
81101f40:	10800044 	addi	r2,r2,1
81101f44:	e0bff815 	stw	r2,-32(fp)
81101f48:	e0bfff0b 	ldhu	r2,-4(fp)
81101f4c:	e0fff817 	ldw	r3,-32(fp)
81101f50:	1880020e 	bge	r3,r2,81101f5c <I2C_MultipleRead+0x134>
81101f54:	e0bff917 	ldw	r2,-28(fp)
81101f58:	103feb1e 	bne	r2,zero,81101f08 <__reset+0xfb0e1f08>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }            
    }        
    i2c_stop(clk_base, data_base);
81101f5c:	e17ffc17 	ldw	r5,-16(fp)
81101f60:	e13ffb17 	ldw	r4,-20(fp)
81101f64:	110200c0 	call	8110200c <i2c_stop>
    
    return bSuccess;    
81101f68:	e0bff917 	ldw	r2,-28(fp)
    
}
81101f6c:	e037883a 	mov	sp,fp
81101f70:	dfc00117 	ldw	ra,4(sp)
81101f74:	df000017 	ldw	fp,0(sp)
81101f78:	dec00204 	addi	sp,sp,8
81101f7c:	f800283a 	ret

81101f80 <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
81101f80:	defffc04 	addi	sp,sp,-16
81101f84:	dfc00315 	stw	ra,12(sp)
81101f88:	df000215 	stw	fp,8(sp)
81101f8c:	df000204 	addi	fp,sp,8
81101f90:	e13ffe15 	stw	r4,-8(fp)
81101f94:	e17fff15 	stw	r5,-4(fp)
    
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
81101f98:	e0bfff17 	ldw	r2,-4(fp)
81101f9c:	10800104 	addi	r2,r2,4
81101fa0:	1007883a 	mov	r3,r2
81101fa4:	00800044 	movi	r2,1
81101fa8:	18800035 	stwio	r2,0(r3)
    
    
    
    // start condition
    SDA_HIGH(data_base); // data high
81101fac:	e0bfff17 	ldw	r2,-4(fp)
81101fb0:	00c00044 	movi	r3,1
81101fb4:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base);
81101fb8:	e0bffe17 	ldw	r2,-8(fp)
81101fbc:	00c00044 	movi	r3,1
81101fc0:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
81101fc4:	01000044 	movi	r4,1
81101fc8:	11140b80 	call	811140b8 <usleep>
     
    SDA_LOW(data_base); // data low
81101fcc:	e0bfff17 	ldw	r2,-4(fp)
81101fd0:	0007883a 	mov	r3,zero
81101fd4:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; 
81101fd8:	01000044 	movi	r4,1
81101fdc:	11140b80 	call	811140b8 <usleep>
    SCL_LOW(clk_base); // clock low
81101fe0:	e0bffe17 	ldw	r2,-8(fp)
81101fe4:	0007883a 	mov	r3,zero
81101fe8:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
81101fec:	01000044 	movi	r4,1
81101ff0:	11140b80 	call	811140b8 <usleep>
}
81101ff4:	0001883a 	nop
81101ff8:	e037883a 	mov	sp,fp
81101ffc:	dfc00117 	ldw	ra,4(sp)
81102000:	df000017 	ldw	fp,0(sp)
81102004:	dec00204 	addi	sp,sp,8
81102008:	f800283a 	ret

8110200c <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
8110200c:	defffc04 	addi	sp,sp,-16
81102010:	dfc00315 	stw	ra,12(sp)
81102014:	df000215 	stw	fp,8(sp)
81102018:	df000204 	addi	fp,sp,8
8110201c:	e13ffe15 	stw	r4,-8(fp)
81102020:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
81102024:	e0bfff17 	ldw	r2,-4(fp)
81102028:	10800104 	addi	r2,r2,4
8110202c:	1007883a 	mov	r3,r2
81102030:	00800044 	movi	r2,1
81102034:	18800035 	stwio	r2,0(r3)
    SDA_LOW(data_base); // Data Low
81102038:	e0bfff17 	ldw	r2,-4(fp)
8110203c:	0007883a 	mov	r3,zero
81102040:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY; 
    SCL_HIGH(clk_base);  // clock high
81102044:	e0bffe17 	ldw	r2,-8(fp)
81102048:	00c00044 	movi	r3,1
8110204c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high long delay
81102050:	01000044 	movi	r4,1
81102054:	11140b80 	call	811140b8 <usleep>
    SDA_HIGH(data_base); // data high
81102058:	e0bfff17 	ldw	r2,-4(fp)
8110205c:	00c00044 	movi	r3,1
81102060:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data high delay
81102064:	01000044 	movi	r4,1
81102068:	11140b80 	call	811140b8 <usleep>
    

    
}
8110206c:	0001883a 	nop
81102070:	e037883a 	mov	sp,fp
81102074:	dfc00117 	ldw	ra,4(sp)
81102078:	df000017 	ldw	fp,0(sp)
8110207c:	dec00204 	addi	sp,sp,8
81102080:	f800283a 	ret

81102084 <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
81102084:	defff804 	addi	sp,sp,-32
81102088:	dfc00715 	stw	ra,28(sp)
8110208c:	df000615 	stw	fp,24(sp)
81102090:	df000604 	addi	fp,sp,24
81102094:	e13ffd15 	stw	r4,-12(fp)
81102098:	e17ffe15 	stw	r5,-8(fp)
8110209c:	3005883a 	mov	r2,r6
811020a0:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 Mask = 0x80;
811020a4:	00bfe004 	movi	r2,-128
811020a8:	e0bffa05 	stb	r2,-24(fp)
    bool bAck;
    int i;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
811020ac:	e0bffe17 	ldw	r2,-8(fp)
811020b0:	10800104 	addi	r2,r2,4
811020b4:	1007883a 	mov	r3,r2
811020b8:	00800044 	movi	r2,1
811020bc:	18800035 	stwio	r2,0(r3)
    
    for(i=0;i<8;i++){
811020c0:	e03ffb15 	stw	zero,-20(fp)
811020c4:	00001f06 	br	81102144 <i2c_write+0xc0>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
811020c8:	e0bffd17 	ldw	r2,-12(fp)
811020cc:	0007883a 	mov	r3,zero
811020d0:	10c00035 	stwio	r3,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
811020d4:	e0ffff03 	ldbu	r3,-4(fp)
811020d8:	e0bffa03 	ldbu	r2,-24(fp)
811020dc:	1884703a 	and	r2,r3,r2
811020e0:	10803fcc 	andi	r2,r2,255
811020e4:	10000426 	beq	r2,zero,811020f8 <i2c_write+0x74>
            SDA_HIGH(data_base);
811020e8:	e0bffe17 	ldw	r2,-8(fp)
811020ec:	00c00044 	movi	r3,1
811020f0:	10c00035 	stwio	r3,0(r2)
811020f4:	00000306 	br	81102104 <i2c_write+0x80>
        }else{    
            SDA_LOW(data_base);
811020f8:	e0bffe17 	ldw	r2,-8(fp)
811020fc:	0007883a 	mov	r3,zero
81102100:	10c00035 	stwio	r3,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
81102104:	e0bffa03 	ldbu	r2,-24(fp)
81102108:	1004d07a 	srli	r2,r2,1
8110210c:	e0bffa05 	stb	r2,-24(fp)
        // clock high
        SCL_HIGH(clk_base);
81102110:	e0bffd17 	ldw	r2,-12(fp)
81102114:	00c00044 	movi	r3,1
81102118:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
8110211c:	01000044 	movi	r4,1
81102120:	11140b80 	call	811140b8 <usleep>
        SCL_LOW(clk_base);
81102124:	e0bffd17 	ldw	r2,-12(fp)
81102128:	0007883a 	mov	r3,zero
8110212c:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
81102130:	01000044 	movi	r4,1
81102134:	11140b80 	call	811140b8 <usleep>
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for(i=0;i<8;i++){
81102138:	e0bffb17 	ldw	r2,-20(fp)
8110213c:	10800044 	addi	r2,r2,1
81102140:	e0bffb15 	stw	r2,-20(fp)
81102144:	e0bffb17 	ldw	r2,-20(fp)
81102148:	10800210 	cmplti	r2,r2,8
8110214c:	103fde1e 	bne	r2,zero,811020c8 <__reset+0xfb0e20c8>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
81102150:	e0bffe17 	ldw	r2,-8(fp)
81102154:	10800104 	addi	r2,r2,4
81102158:	0007883a 	mov	r3,zero
8110215c:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
81102160:	e0bffd17 	ldw	r2,-12(fp)
81102164:	00c00044 	movi	r3,1
81102168:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;  // clock high delay
8110216c:	01000044 	movi	r4,1
81102170:	11140b80 	call	811140b8 <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
81102174:	e0bffe17 	ldw	r2,-8(fp)
81102178:	10800037 	ldwio	r2,0(r2)
8110217c:	1005003a 	cmpeq	r2,r2,zero
81102180:	10803fcc 	andi	r2,r2,255
81102184:	e0bffc15 	stw	r2,-16(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
81102188:	e0bffd17 	ldw	r2,-12(fp)
8110218c:	0007883a 	mov	r3,zero
81102190:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
81102194:	01000044 	movi	r4,1
81102198:	11140b80 	call	811140b8 <usleep>
    return bAck;
8110219c:	e0bffc17 	ldw	r2,-16(fp)
}    
811021a0:	e037883a 	mov	sp,fp
811021a4:	dfc00117 	ldw	ra,4(sp)
811021a8:	df000017 	ldw	fp,0(sp)
811021ac:	dec00204 	addi	sp,sp,8
811021b0:	f800283a 	ret

811021b4 <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
811021b4:	defff804 	addi	sp,sp,-32
811021b8:	dfc00715 	stw	ra,28(sp)
811021bc:	df000615 	stw	fp,24(sp)
811021c0:	df000604 	addi	fp,sp,24
811021c4:	e13ffc15 	stw	r4,-16(fp)
811021c8:	e17ffd15 	stw	r5,-12(fp)
811021cc:	e1bffe15 	stw	r6,-8(fp)
811021d0:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
811021d4:	e03ffa05 	stb	zero,-24(fp)
    int i;
    
    // assume SCL = low
    
    SDA_DIR_IN(data_base);  // set data read mode
811021d8:	e0bffd17 	ldw	r2,-12(fp)
811021dc:	10800104 	addi	r2,r2,4
811021e0:	0007883a 	mov	r3,zero
811021e4:	10c00035 	stwio	r3,0(r2)
    SCL_LOW(clk_base); // clock low
811021e8:	e0bffc17 	ldw	r2,-16(fp)
811021ec:	0007883a 	mov	r3,zero
811021f0:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
811021f4:	01000044 	movi	r4,1
811021f8:	11140b80 	call	811140b8 <usleep>

    for(i=0;i<8;i++){
811021fc:	e03ffb15 	stw	zero,-20(fp)
81102200:	00001606 	br	8110225c <i2c_read+0xa8>
        Data <<= 1;
81102204:	e0bffa03 	ldbu	r2,-24(fp)
81102208:	1085883a 	add	r2,r2,r2
8110220c:	e0bffa05 	stb	r2,-24(fp)
        SCL_HIGH(clk_base);  // clock high
81102210:	e0bffc17 	ldw	r2,-16(fp)
81102214:	00c00044 	movi	r3,1
81102218:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
8110221c:	01000044 	movi	r4,1
81102220:	11140b80 	call	811140b8 <usleep>
        if (SDA_READ(data_base))  // read data   
81102224:	e0bffd17 	ldw	r2,-12(fp)
81102228:	10800037 	ldwio	r2,0(r2)
8110222c:	10000326 	beq	r2,zero,8110223c <i2c_read+0x88>
            Data |= 0x01;
81102230:	e0bffa03 	ldbu	r2,-24(fp)
81102234:	10800054 	ori	r2,r2,1
81102238:	e0bffa05 	stb	r2,-24(fp)
        SCL_LOW(clk_base);  // clock log  
8110223c:	e0bffc17 	ldw	r2,-16(fp)
81102240:	0007883a 	mov	r3,zero
81102244:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
81102248:	01000044 	movi	r4,1
8110224c:	11140b80 	call	811140b8 <usleep>
    
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
81102250:	e0bffb17 	ldw	r2,-20(fp)
81102254:	10800044 	addi	r2,r2,1
81102258:	e0bffb15 	stw	r2,-20(fp)
8110225c:	e0bffb17 	ldw	r2,-20(fp)
81102260:	10800210 	cmplti	r2,r2,8
81102264:	103fe71e 	bne	r2,zero,81102204 <__reset+0xfb0e2204>
        SCL_LOW(clk_base);  // clock log  
        SCL_DELAY;
    }
    
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
81102268:	e0bffc17 	ldw	r2,-16(fp)
8110226c:	0007883a 	mov	r3,zero
81102270:	10c00035 	stwio	r3,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
81102274:	e0bffd17 	ldw	r2,-12(fp)
81102278:	10800104 	addi	r2,r2,4
8110227c:	1007883a 	mov	r3,r2
81102280:	00800044 	movi	r2,1
81102284:	18800035 	stwio	r2,0(r3)
    if (bAck)
81102288:	e0bfff17 	ldw	r2,-4(fp)
8110228c:	10000426 	beq	r2,zero,811022a0 <i2c_read+0xec>
        SDA_LOW(data_base);
81102290:	e0bffd17 	ldw	r2,-12(fp)
81102294:	0007883a 	mov	r3,zero
81102298:	10c00035 	stwio	r3,0(r2)
8110229c:	00000306 	br	811022ac <i2c_read+0xf8>
    else
        SDA_HIGH(data_base);
811022a0:	e0bffd17 	ldw	r2,-12(fp)
811022a4:	00c00044 	movi	r3,1
811022a8:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base); // clock high
811022ac:	e0bffc17 	ldw	r2,-16(fp)
811022b0:	00c00044 	movi	r3,1
811022b4:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high  delay
811022b8:	01000044 	movi	r4,1
811022bc:	11140b80 	call	811140b8 <usleep>
    SCL_LOW(clk_base); // clock low
811022c0:	e0bffc17 	ldw	r2,-16(fp)
811022c4:	0007883a 	mov	r3,zero
811022c8:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
811022cc:	01000044 	movi	r4,1
811022d0:	11140b80 	call	811140b8 <usleep>
    SDA_LOW(data_base);  // data low
811022d4:	e0bffd17 	ldw	r2,-12(fp)
811022d8:	0007883a 	mov	r3,zero
811022dc:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data low delay
811022e0:	01000044 	movi	r4,1
811022e4:	11140b80 	call	811140b8 <usleep>
//    SDA_DIR_IN;  // set data read mode
    
    *pData = Data;
811022e8:	e0bffe17 	ldw	r2,-8(fp)
811022ec:	e0fffa03 	ldbu	r3,-24(fp)
811022f0:	10c00005 	stb	r3,0(r2)
}
811022f4:	0001883a 	nop
811022f8:	e037883a 	mov	sp,fp
811022fc:	dfc00117 	ldw	ra,4(sp)
81102300:	df000017 	ldw	fp,0(sp)
81102304:	dec00204 	addi	sp,sp,8
81102308:	f800283a 	ret

8110230c <main>:

#include <stdio.h>
#include "api_driver/ddr2/ddr2.h"

int main()
{
8110230c:	defffe04 	addi	sp,sp,-8
81102310:	dfc00115 	stw	ra,4(sp)
81102314:	df000015 	stw	fp,0(sp)
81102318:	d839883a 	mov	fp,sp
  printf("Memory EEPROM dumper application\n\n");
8110231c:	012044b4 	movhi	r4,33042
81102320:	21258d04 	addi	r4,r4,-27084
81102324:	1102de40 	call	81102de4 <puts>

  printf("Memory M1 EEPROM Test:\n");
81102328:	012044b4 	movhi	r4,33042
8110232c:	21259604 	addi	r4,r4,-27048
81102330:	1102de40 	call	81102de4 <puts>
  bDdr2EepromTest(DDR2_M1_ID);
81102334:	0009883a 	mov	r4,zero
81102338:	11002ec0 	call	811002ec <bDdr2EepromTest>

  printf("Memory M2 EEPROM Test:\n");
8110233c:	012044b4 	movhi	r4,33042
81102340:	21259c04 	addi	r4,r4,-27024
81102344:	1102de40 	call	81102de4 <puts>
  bDdr2EepromTest(DDR2_M2_ID);
81102348:	01000044 	movi	r4,1
8110234c:	11002ec0 	call	811002ec <bDdr2EepromTest>

  printf("Memory M1 EEPROM Dump:\n");
81102350:	012044b4 	movhi	r4,33042
81102354:	2125a204 	addi	r4,r4,-27000
81102358:	1102de40 	call	81102de4 <puts>
  bDdr2EepromDump(DDR2_M1_ID);
8110235c:	0009883a 	mov	r4,zero
81102360:	11005a00 	call	811005a0 <bDdr2EepromDump>

  printf("Memory M2 EEPROM Dump:\n");
81102364:	012044b4 	movhi	r4,33042
81102368:	2125a804 	addi	r4,r4,-26976
8110236c:	1102de40 	call	81102de4 <puts>
  bDdr2EepromDump(DDR2_M2_ID);
81102370:	01000044 	movi	r4,1
81102374:	11005a00 	call	811005a0 <bDdr2EepromDump>

  printf("EEPROM Dump complete!\n");
81102378:	012044b4 	movhi	r4,33042
8110237c:	2125ae04 	addi	r4,r4,-26952
81102380:	1102de40 	call	81102de4 <puts>

  while (1) {}
81102384:	003fff06 	br	81102384 <__reset+0xfb0e2384>

81102388 <__divsf3>:
81102388:	defff504 	addi	sp,sp,-44
8110238c:	200cd5fa 	srli	r6,r4,23
81102390:	dcc00415 	stw	r19,16(sp)
81102394:	2026d7fa 	srli	r19,r4,31
81102398:	00c02034 	movhi	r3,128
8110239c:	dd800715 	stw	r22,28(sp)
811023a0:	dd000515 	stw	r20,20(sp)
811023a4:	dc800315 	stw	r18,12(sp)
811023a8:	18ffffc4 	addi	r3,r3,-1
811023ac:	dfc00a15 	stw	ra,40(sp)
811023b0:	df000915 	stw	fp,36(sp)
811023b4:	ddc00815 	stw	r23,32(sp)
811023b8:	dd400615 	stw	r21,24(sp)
811023bc:	dc400215 	stw	r17,8(sp)
811023c0:	dc000115 	stw	r16,4(sp)
811023c4:	35003fcc 	andi	r20,r6,255
811023c8:	1924703a 	and	r18,r3,r4
811023cc:	9d803fcc 	andi	r22,r19,255
811023d0:	a0005226 	beq	r20,zero,8110251c <__divsf3+0x194>
811023d4:	00803fc4 	movi	r2,255
811023d8:	a0802e26 	beq	r20,r2,81102494 <__divsf3+0x10c>
811023dc:	91002034 	orhi	r4,r18,128
811023e0:	202490fa 	slli	r18,r4,3
811023e4:	a53fe044 	addi	r20,r20,-127
811023e8:	0021883a 	mov	r16,zero
811023ec:	002f883a 	mov	r23,zero
811023f0:	280cd5fa 	srli	r6,r5,23
811023f4:	282ad7fa 	srli	r21,r5,31
811023f8:	00c02034 	movhi	r3,128
811023fc:	18ffffc4 	addi	r3,r3,-1
81102400:	31803fcc 	andi	r6,r6,255
81102404:	1962703a 	and	r17,r3,r5
81102408:	af003fcc 	andi	fp,r21,255
8110240c:	30004a26 	beq	r6,zero,81102538 <__divsf3+0x1b0>
81102410:	00803fc4 	movi	r2,255
81102414:	30804526 	beq	r6,r2,8110252c <__divsf3+0x1a4>
81102418:	89402034 	orhi	r5,r17,128
8110241c:	282290fa 	slli	r17,r5,3
81102420:	31bfe044 	addi	r6,r6,-127
81102424:	000b883a 	mov	r5,zero
81102428:	2c20b03a 	or	r16,r5,r16
8110242c:	802090ba 	slli	r16,r16,2
81102430:	00a04434 	movhi	r2,33040
81102434:	10891504 	addi	r2,r2,9300
81102438:	80a1883a 	add	r16,r16,r2
8110243c:	81000017 	ldw	r4,0(r16)
81102440:	9d46f03a 	xor	r3,r19,r21
81102444:	180f883a 	mov	r7,r3
81102448:	18803fcc 	andi	r2,r3,255
8110244c:	a18dc83a 	sub	r6,r20,r6
81102450:	2000683a 	jmp	r4
81102454:	81102638 	rdprs	r4,r16,16536
81102458:	811024bc 	xorhi	r4,r16,16530
8110245c:	8110262c 	andhi	r4,r16,16536
81102460:	811024a8 	cmpgeui	r4,r16,16530
81102464:	8110262c 	andhi	r4,r16,16536
81102468:	81102604 	addi	r4,r16,16536
8110246c:	8110262c 	andhi	r4,r16,16536
81102470:	811024a8 	cmpgeui	r4,r16,16530
81102474:	811024bc 	xorhi	r4,r16,16530
81102478:	811024bc 	xorhi	r4,r16,16530
8110247c:	81102604 	addi	r4,r16,16536
81102480:	811024a8 	cmpgeui	r4,r16,16530
81102484:	81102718 	cmpnei	r4,r16,16540
81102488:	81102718 	cmpnei	r4,r16,16540
8110248c:	81102718 	cmpnei	r4,r16,16540
81102490:	811026cc 	andi	r4,r16,16539
81102494:	9000581e 	bne	r18,zero,811025f8 <__divsf3+0x270>
81102498:	04000204 	movi	r16,8
8110249c:	05c00084 	movi	r23,2
811024a0:	003fd306 	br	811023f0 <__reset+0xfb0e23f0>
811024a4:	0023883a 	mov	r17,zero
811024a8:	e02d883a 	mov	r22,fp
811024ac:	282f883a 	mov	r23,r5
811024b0:	00800084 	movi	r2,2
811024b4:	b8808f1e 	bne	r23,r2,811026f4 <__divsf3+0x36c>
811024b8:	b005883a 	mov	r2,r22
811024bc:	11c0004c 	andi	r7,r2,1
811024c0:	013fffc4 	movi	r4,-1
811024c4:	000d883a 	mov	r6,zero
811024c8:	21003fcc 	andi	r4,r4,255
811024cc:	200895fa 	slli	r4,r4,23
811024d0:	38803fcc 	andi	r2,r7,255
811024d4:	00c02034 	movhi	r3,128
811024d8:	100497fa 	slli	r2,r2,31
811024dc:	18ffffc4 	addi	r3,r3,-1
811024e0:	30c6703a 	and	r3,r6,r3
811024e4:	1906b03a 	or	r3,r3,r4
811024e8:	1884b03a 	or	r2,r3,r2
811024ec:	dfc00a17 	ldw	ra,40(sp)
811024f0:	df000917 	ldw	fp,36(sp)
811024f4:	ddc00817 	ldw	r23,32(sp)
811024f8:	dd800717 	ldw	r22,28(sp)
811024fc:	dd400617 	ldw	r21,24(sp)
81102500:	dd000517 	ldw	r20,20(sp)
81102504:	dcc00417 	ldw	r19,16(sp)
81102508:	dc800317 	ldw	r18,12(sp)
8110250c:	dc400217 	ldw	r17,8(sp)
81102510:	dc000117 	ldw	r16,4(sp)
81102514:	dec00b04 	addi	sp,sp,44
81102518:	f800283a 	ret
8110251c:	90002b1e 	bne	r18,zero,811025cc <__divsf3+0x244>
81102520:	04000104 	movi	r16,4
81102524:	05c00044 	movi	r23,1
81102528:	003fb106 	br	811023f0 <__reset+0xfb0e23f0>
8110252c:	8800251e 	bne	r17,zero,811025c4 <__divsf3+0x23c>
81102530:	01400084 	movi	r5,2
81102534:	00000206 	br	81102540 <__divsf3+0x1b8>
81102538:	88001a1e 	bne	r17,zero,811025a4 <__divsf3+0x21c>
8110253c:	01400044 	movi	r5,1
81102540:	8160b03a 	or	r16,r16,r5
81102544:	802090ba 	slli	r16,r16,2
81102548:	00e04434 	movhi	r3,33040
8110254c:	18c95904 	addi	r3,r3,9572
81102550:	80e1883a 	add	r16,r16,r3
81102554:	80c00017 	ldw	r3,0(r16)
81102558:	9d44f03a 	xor	r2,r19,r21
8110255c:	a18dc83a 	sub	r6,r20,r6
81102560:	1800683a 	jmp	r3
81102564:	811024bc 	xorhi	r4,r16,16530
81102568:	811024bc 	xorhi	r4,r16,16530
8110256c:	81102708 	cmpgei	r4,r16,16540
81102570:	811024a4 	muli	r4,r16,16530
81102574:	81102708 	cmpgei	r4,r16,16540
81102578:	81102604 	addi	r4,r16,16536
8110257c:	81102708 	cmpgei	r4,r16,16540
81102580:	811024a4 	muli	r4,r16,16530
81102584:	811024bc 	xorhi	r4,r16,16530
81102588:	811024bc 	xorhi	r4,r16,16530
8110258c:	81102604 	addi	r4,r16,16536
81102590:	811024a4 	muli	r4,r16,16530
81102594:	81102718 	cmpnei	r4,r16,16540
81102598:	81102718 	cmpnei	r4,r16,16540
8110259c:	81102718 	cmpnei	r4,r16,16540
811025a0:	81102730 	cmpltui	r4,r16,16540
811025a4:	8809883a 	mov	r4,r17
811025a8:	1102aec0 	call	81102aec <__clzsi2>
811025ac:	10fffec4 	addi	r3,r2,-5
811025b0:	10801d84 	addi	r2,r2,118
811025b4:	88e2983a 	sll	r17,r17,r3
811025b8:	008dc83a 	sub	r6,zero,r2
811025bc:	000b883a 	mov	r5,zero
811025c0:	003f9906 	br	81102428 <__reset+0xfb0e2428>
811025c4:	014000c4 	movi	r5,3
811025c8:	003f9706 	br	81102428 <__reset+0xfb0e2428>
811025cc:	9009883a 	mov	r4,r18
811025d0:	d9400015 	stw	r5,0(sp)
811025d4:	1102aec0 	call	81102aec <__clzsi2>
811025d8:	10fffec4 	addi	r3,r2,-5
811025dc:	11801d84 	addi	r6,r2,118
811025e0:	90e4983a 	sll	r18,r18,r3
811025e4:	01a9c83a 	sub	r20,zero,r6
811025e8:	0021883a 	mov	r16,zero
811025ec:	002f883a 	mov	r23,zero
811025f0:	d9400017 	ldw	r5,0(sp)
811025f4:	003f7e06 	br	811023f0 <__reset+0xfb0e23f0>
811025f8:	04000304 	movi	r16,12
811025fc:	05c000c4 	movi	r23,3
81102600:	003f7b06 	br	811023f0 <__reset+0xfb0e23f0>
81102604:	01802034 	movhi	r6,128
81102608:	000f883a 	mov	r7,zero
8110260c:	31bfffc4 	addi	r6,r6,-1
81102610:	013fffc4 	movi	r4,-1
81102614:	003fac06 	br	811024c8 <__reset+0xfb0e24c8>
81102618:	01400044 	movi	r5,1
8110261c:	2909c83a 	sub	r4,r5,r4
81102620:	00c006c4 	movi	r3,27
81102624:	19004b0e 	bge	r3,r4,81102754 <__divsf3+0x3cc>
81102628:	114e703a 	and	r7,r2,r5
8110262c:	0009883a 	mov	r4,zero
81102630:	000d883a 	mov	r6,zero
81102634:	003fa406 	br	811024c8 <__reset+0xfb0e24c8>
81102638:	9006917a 	slli	r3,r18,5
8110263c:	8822917a 	slli	r17,r17,5
81102640:	1c40372e 	bgeu	r3,r17,81102720 <__divsf3+0x398>
81102644:	31bfffc4 	addi	r6,r6,-1
81102648:	010006c4 	movi	r4,27
8110264c:	000b883a 	mov	r5,zero
81102650:	180f883a 	mov	r7,r3
81102654:	294b883a 	add	r5,r5,r5
81102658:	18c7883a 	add	r3,r3,r3
8110265c:	38000116 	blt	r7,zero,81102664 <__divsf3+0x2dc>
81102660:	1c400236 	bltu	r3,r17,8110266c <__divsf3+0x2e4>
81102664:	1c47c83a 	sub	r3,r3,r17
81102668:	29400054 	ori	r5,r5,1
8110266c:	213fffc4 	addi	r4,r4,-1
81102670:	203ff71e 	bne	r4,zero,81102650 <__reset+0xfb0e2650>
81102674:	1806c03a 	cmpne	r3,r3,zero
81102678:	1962b03a 	or	r17,r3,r5
8110267c:	31001fc4 	addi	r4,r6,127
81102680:	013fe50e 	bge	zero,r4,81102618 <__reset+0xfb0e2618>
81102684:	88c001cc 	andi	r3,r17,7
81102688:	18000426 	beq	r3,zero,8110269c <__divsf3+0x314>
8110268c:	88c003cc 	andi	r3,r17,15
81102690:	01400104 	movi	r5,4
81102694:	19400126 	beq	r3,r5,8110269c <__divsf3+0x314>
81102698:	8963883a 	add	r17,r17,r5
8110269c:	88c2002c 	andhi	r3,r17,2048
811026a0:	18000426 	beq	r3,zero,811026b4 <__divsf3+0x32c>
811026a4:	00fe0034 	movhi	r3,63488
811026a8:	18ffffc4 	addi	r3,r3,-1
811026ac:	31002004 	addi	r4,r6,128
811026b0:	88e2703a 	and	r17,r17,r3
811026b4:	00c03f84 	movi	r3,254
811026b8:	193f8016 	blt	r3,r4,811024bc <__reset+0xfb0e24bc>
811026bc:	880c91ba 	slli	r6,r17,6
811026c0:	11c0004c 	andi	r7,r2,1
811026c4:	300cd27a 	srli	r6,r6,9
811026c8:	003f7f06 	br	811024c8 <__reset+0xfb0e24c8>
811026cc:	9080102c 	andhi	r2,r18,64
811026d0:	10000226 	beq	r2,zero,811026dc <__divsf3+0x354>
811026d4:	8880102c 	andhi	r2,r17,64
811026d8:	10001826 	beq	r2,zero,8110273c <__divsf3+0x3b4>
811026dc:	00802034 	movhi	r2,128
811026e0:	91801034 	orhi	r6,r18,64
811026e4:	10bfffc4 	addi	r2,r2,-1
811026e8:	980f883a 	mov	r7,r19
811026ec:	308c703a 	and	r6,r6,r2
811026f0:	003fc706 	br	81102610 <__reset+0xfb0e2610>
811026f4:	008000c4 	movi	r2,3
811026f8:	b8802d26 	beq	r23,r2,811027b0 <__divsf3+0x428>
811026fc:	00c00044 	movi	r3,1
81102700:	b005883a 	mov	r2,r22
81102704:	b8ffdd1e 	bne	r23,r3,8110267c <__reset+0xfb0e267c>
81102708:	11c0004c 	andi	r7,r2,1
8110270c:	0009883a 	mov	r4,zero
81102710:	000d883a 	mov	r6,zero
81102714:	003f6c06 	br	811024c8 <__reset+0xfb0e24c8>
81102718:	9023883a 	mov	r17,r18
8110271c:	003f6406 	br	811024b0 <__reset+0xfb0e24b0>
81102720:	1c47c83a 	sub	r3,r3,r17
81102724:	01000684 	movi	r4,26
81102728:	01400044 	movi	r5,1
8110272c:	003fc806 	br	81102650 <__reset+0xfb0e2650>
81102730:	9080102c 	andhi	r2,r18,64
81102734:	103fe926 	beq	r2,zero,811026dc <__reset+0xfb0e26dc>
81102738:	0023883a 	mov	r17,zero
8110273c:	00802034 	movhi	r2,128
81102740:	89801034 	orhi	r6,r17,64
81102744:	10bfffc4 	addi	r2,r2,-1
81102748:	a80f883a 	mov	r7,r21
8110274c:	308c703a 	and	r6,r6,r2
81102750:	003faf06 	br	81102610 <__reset+0xfb0e2610>
81102754:	01c00804 	movi	r7,32
81102758:	390fc83a 	sub	r7,r7,r4
8110275c:	89ce983a 	sll	r7,r17,r7
81102760:	890ad83a 	srl	r5,r17,r4
81102764:	380ec03a 	cmpne	r7,r7,zero
81102768:	29cab03a 	or	r5,r5,r7
8110276c:	28c001cc 	andi	r3,r5,7
81102770:	18000426 	beq	r3,zero,81102784 <__divsf3+0x3fc>
81102774:	28c003cc 	andi	r3,r5,15
81102778:	01000104 	movi	r4,4
8110277c:	19000126 	beq	r3,r4,81102784 <__divsf3+0x3fc>
81102780:	290b883a 	add	r5,r5,r4
81102784:	28c1002c 	andhi	r3,r5,1024
81102788:	18000426 	beq	r3,zero,8110279c <__divsf3+0x414>
8110278c:	11c0004c 	andi	r7,r2,1
81102790:	01000044 	movi	r4,1
81102794:	000d883a 	mov	r6,zero
81102798:	003f4b06 	br	811024c8 <__reset+0xfb0e24c8>
8110279c:	280a91ba 	slli	r5,r5,6
811027a0:	11c0004c 	andi	r7,r2,1
811027a4:	0009883a 	mov	r4,zero
811027a8:	280cd27a 	srli	r6,r5,9
811027ac:	003f4606 	br	811024c8 <__reset+0xfb0e24c8>
811027b0:	00802034 	movhi	r2,128
811027b4:	89801034 	orhi	r6,r17,64
811027b8:	10bfffc4 	addi	r2,r2,-1
811027bc:	b00f883a 	mov	r7,r22
811027c0:	308c703a 	and	r6,r6,r2
811027c4:	003f9206 	br	81102610 <__reset+0xfb0e2610>

811027c8 <__floatsisf>:
811027c8:	defffd04 	addi	sp,sp,-12
811027cc:	dfc00215 	stw	ra,8(sp)
811027d0:	dc400115 	stw	r17,4(sp)
811027d4:	dc000015 	stw	r16,0(sp)
811027d8:	20003526 	beq	r4,zero,811028b0 <__floatsisf+0xe8>
811027dc:	2021883a 	mov	r16,r4
811027e0:	2022d7fa 	srli	r17,r4,31
811027e4:	20003616 	blt	r4,zero,811028c0 <__floatsisf+0xf8>
811027e8:	8009883a 	mov	r4,r16
811027ec:	1102aec0 	call	81102aec <__clzsi2>
811027f0:	00c02784 	movi	r3,158
811027f4:	1887c83a 	sub	r3,r3,r2
811027f8:	01002584 	movi	r4,150
811027fc:	20c01416 	blt	r4,r3,81102850 <__floatsisf+0x88>
81102800:	20c9c83a 	sub	r4,r4,r3
81102804:	8120983a 	sll	r16,r16,r4
81102808:	00802034 	movhi	r2,128
8110280c:	10bfffc4 	addi	r2,r2,-1
81102810:	8809883a 	mov	r4,r17
81102814:	80a0703a 	and	r16,r16,r2
81102818:	18803fcc 	andi	r2,r3,255
8110281c:	100695fa 	slli	r3,r2,23
81102820:	20803fcc 	andi	r2,r4,255
81102824:	100897fa 	slli	r4,r2,31
81102828:	00802034 	movhi	r2,128
8110282c:	10bfffc4 	addi	r2,r2,-1
81102830:	8084703a 	and	r2,r16,r2
81102834:	10c4b03a 	or	r2,r2,r3
81102838:	1104b03a 	or	r2,r2,r4
8110283c:	dfc00217 	ldw	ra,8(sp)
81102840:	dc400117 	ldw	r17,4(sp)
81102844:	dc000017 	ldw	r16,0(sp)
81102848:	dec00304 	addi	sp,sp,12
8110284c:	f800283a 	ret
81102850:	01002644 	movi	r4,153
81102854:	20c01c16 	blt	r4,r3,811028c8 <__floatsisf+0x100>
81102858:	20c9c83a 	sub	r4,r4,r3
8110285c:	8120983a 	sll	r16,r16,r4
81102860:	013f0034 	movhi	r4,64512
81102864:	213fffc4 	addi	r4,r4,-1
81102868:	814001cc 	andi	r5,r16,7
8110286c:	8108703a 	and	r4,r16,r4
81102870:	28000426 	beq	r5,zero,81102884 <__floatsisf+0xbc>
81102874:	840003cc 	andi	r16,r16,15
81102878:	01400104 	movi	r5,4
8110287c:	81400126 	beq	r16,r5,81102884 <__floatsisf+0xbc>
81102880:	2149883a 	add	r4,r4,r5
81102884:	2141002c 	andhi	r5,r4,1024
81102888:	28000526 	beq	r5,zero,811028a0 <__floatsisf+0xd8>
8110288c:	00c027c4 	movi	r3,159
81102890:	1887c83a 	sub	r3,r3,r2
81102894:	00bf0034 	movhi	r2,64512
81102898:	10bfffc4 	addi	r2,r2,-1
8110289c:	2088703a 	and	r4,r4,r2
811028a0:	202091ba 	slli	r16,r4,6
811028a4:	8809883a 	mov	r4,r17
811028a8:	8020d27a 	srli	r16,r16,9
811028ac:	003fda06 	br	81102818 <__reset+0xfb0e2818>
811028b0:	0009883a 	mov	r4,zero
811028b4:	0007883a 	mov	r3,zero
811028b8:	0021883a 	mov	r16,zero
811028bc:	003fd606 	br	81102818 <__reset+0xfb0e2818>
811028c0:	0121c83a 	sub	r16,zero,r4
811028c4:	003fc806 	br	811027e8 <__reset+0xfb0e27e8>
811028c8:	01002e44 	movi	r4,185
811028cc:	20c9c83a 	sub	r4,r4,r3
811028d0:	01400144 	movi	r5,5
811028d4:	8108983a 	sll	r4,r16,r4
811028d8:	288bc83a 	sub	r5,r5,r2
811028dc:	8160d83a 	srl	r16,r16,r5
811028e0:	2008c03a 	cmpne	r4,r4,zero
811028e4:	8120b03a 	or	r16,r16,r4
811028e8:	003fdd06 	br	81102860 <__reset+0xfb0e2860>

811028ec <__floatunsisf>:
811028ec:	defffe04 	addi	sp,sp,-8
811028f0:	dfc00115 	stw	ra,4(sp)
811028f4:	dc000015 	stw	r16,0(sp)
811028f8:	20002c26 	beq	r4,zero,811029ac <__floatunsisf+0xc0>
811028fc:	2021883a 	mov	r16,r4
81102900:	1102aec0 	call	81102aec <__clzsi2>
81102904:	00c02784 	movi	r3,158
81102908:	1887c83a 	sub	r3,r3,r2
8110290c:	01002584 	movi	r4,150
81102910:	20c00f16 	blt	r4,r3,81102950 <__floatunsisf+0x64>
81102914:	20c9c83a 	sub	r4,r4,r3
81102918:	8108983a 	sll	r4,r16,r4
8110291c:	00802034 	movhi	r2,128
81102920:	10bfffc4 	addi	r2,r2,-1
81102924:	2088703a 	and	r4,r4,r2
81102928:	18803fcc 	andi	r2,r3,255
8110292c:	100695fa 	slli	r3,r2,23
81102930:	00802034 	movhi	r2,128
81102934:	10bfffc4 	addi	r2,r2,-1
81102938:	2084703a 	and	r2,r4,r2
8110293c:	10c4b03a 	or	r2,r2,r3
81102940:	dfc00117 	ldw	ra,4(sp)
81102944:	dc000017 	ldw	r16,0(sp)
81102948:	dec00204 	addi	sp,sp,8
8110294c:	f800283a 	ret
81102950:	01002644 	movi	r4,153
81102954:	20c01816 	blt	r4,r3,811029b8 <__floatunsisf+0xcc>
81102958:	20c9c83a 	sub	r4,r4,r3
8110295c:	8108983a 	sll	r4,r16,r4
81102960:	017f0034 	movhi	r5,64512
81102964:	297fffc4 	addi	r5,r5,-1
81102968:	218001cc 	andi	r6,r4,7
8110296c:	214a703a 	and	r5,r4,r5
81102970:	30000426 	beq	r6,zero,81102984 <__floatunsisf+0x98>
81102974:	210003cc 	andi	r4,r4,15
81102978:	01800104 	movi	r6,4
8110297c:	21800126 	beq	r4,r6,81102984 <__floatunsisf+0x98>
81102980:	298b883a 	add	r5,r5,r6
81102984:	2901002c 	andhi	r4,r5,1024
81102988:	20000526 	beq	r4,zero,811029a0 <__floatunsisf+0xb4>
8110298c:	00c027c4 	movi	r3,159
81102990:	1887c83a 	sub	r3,r3,r2
81102994:	00bf0034 	movhi	r2,64512
81102998:	10bfffc4 	addi	r2,r2,-1
8110299c:	288a703a 	and	r5,r5,r2
811029a0:	280891ba 	slli	r4,r5,6
811029a4:	2008d27a 	srli	r4,r4,9
811029a8:	003fdf06 	br	81102928 <__reset+0xfb0e2928>
811029ac:	0007883a 	mov	r3,zero
811029b0:	0009883a 	mov	r4,zero
811029b4:	003fdc06 	br	81102928 <__reset+0xfb0e2928>
811029b8:	01402e44 	movi	r5,185
811029bc:	28cbc83a 	sub	r5,r5,r3
811029c0:	01000144 	movi	r4,5
811029c4:	2089c83a 	sub	r4,r4,r2
811029c8:	814a983a 	sll	r5,r16,r5
811029cc:	8108d83a 	srl	r4,r16,r4
811029d0:	2820c03a 	cmpne	r16,r5,zero
811029d4:	2408b03a 	or	r4,r4,r16
811029d8:	003fe106 	br	81102960 <__reset+0xfb0e2960>

811029dc <__extendsfdf2>:
811029dc:	200ad5fa 	srli	r5,r4,23
811029e0:	defffd04 	addi	sp,sp,-12
811029e4:	dc400115 	stw	r17,4(sp)
811029e8:	29403fcc 	andi	r5,r5,255
811029ec:	29800044 	addi	r6,r5,1
811029f0:	04402034 	movhi	r17,128
811029f4:	dc000015 	stw	r16,0(sp)
811029f8:	8c7fffc4 	addi	r17,r17,-1
811029fc:	dfc00215 	stw	ra,8(sp)
81102a00:	31803fcc 	andi	r6,r6,255
81102a04:	00800044 	movi	r2,1
81102a08:	8922703a 	and	r17,r17,r4
81102a0c:	2020d7fa 	srli	r16,r4,31
81102a10:	1180110e 	bge	r2,r6,81102a58 <__extendsfdf2+0x7c>
81102a14:	880cd0fa 	srli	r6,r17,3
81102a18:	8822977a 	slli	r17,r17,29
81102a1c:	2940e004 	addi	r5,r5,896
81102a20:	2941ffcc 	andi	r5,r5,2047
81102a24:	2804953a 	slli	r2,r5,20
81102a28:	01400434 	movhi	r5,16
81102a2c:	800697fa 	slli	r3,r16,31
81102a30:	297fffc4 	addi	r5,r5,-1
81102a34:	314a703a 	and	r5,r6,r5
81102a38:	288ab03a 	or	r5,r5,r2
81102a3c:	28c6b03a 	or	r3,r5,r3
81102a40:	8805883a 	mov	r2,r17
81102a44:	dfc00217 	ldw	ra,8(sp)
81102a48:	dc400117 	ldw	r17,4(sp)
81102a4c:	dc000017 	ldw	r16,0(sp)
81102a50:	dec00304 	addi	sp,sp,12
81102a54:	f800283a 	ret
81102a58:	2800111e 	bne	r5,zero,81102aa0 <__extendsfdf2+0xc4>
81102a5c:	88001c26 	beq	r17,zero,81102ad0 <__extendsfdf2+0xf4>
81102a60:	8809883a 	mov	r4,r17
81102a64:	1102aec0 	call	81102aec <__clzsi2>
81102a68:	00c00284 	movi	r3,10
81102a6c:	18801b16 	blt	r3,r2,81102adc <__extendsfdf2+0x100>
81102a70:	018002c4 	movi	r6,11
81102a74:	308dc83a 	sub	r6,r6,r2
81102a78:	11000544 	addi	r4,r2,21
81102a7c:	8986d83a 	srl	r3,r17,r6
81102a80:	8922983a 	sll	r17,r17,r4
81102a84:	0180e244 	movi	r6,905
81102a88:	01400434 	movhi	r5,16
81102a8c:	3085c83a 	sub	r2,r6,r2
81102a90:	297fffc4 	addi	r5,r5,-1
81102a94:	194c703a 	and	r6,r3,r5
81102a98:	1141ffcc 	andi	r5,r2,2047
81102a9c:	003fe006 	br	81102a20 <__reset+0xfb0e2a20>
81102aa0:	88000826 	beq	r17,zero,81102ac4 <__extendsfdf2+0xe8>
81102aa4:	880cd0fa 	srli	r6,r17,3
81102aa8:	00800434 	movhi	r2,16
81102aac:	10bfffc4 	addi	r2,r2,-1
81102ab0:	31800234 	orhi	r6,r6,8
81102ab4:	8822977a 	slli	r17,r17,29
81102ab8:	308c703a 	and	r6,r6,r2
81102abc:	0141ffc4 	movi	r5,2047
81102ac0:	003fd706 	br	81102a20 <__reset+0xfb0e2a20>
81102ac4:	0141ffc4 	movi	r5,2047
81102ac8:	000d883a 	mov	r6,zero
81102acc:	003fd406 	br	81102a20 <__reset+0xfb0e2a20>
81102ad0:	000b883a 	mov	r5,zero
81102ad4:	000d883a 	mov	r6,zero
81102ad8:	003fd106 	br	81102a20 <__reset+0xfb0e2a20>
81102adc:	11bffd44 	addi	r6,r2,-11
81102ae0:	8986983a 	sll	r3,r17,r6
81102ae4:	0023883a 	mov	r17,zero
81102ae8:	003fe606 	br	81102a84 <__reset+0xfb0e2a84>

81102aec <__clzsi2>:
81102aec:	00bfffd4 	movui	r2,65535
81102af0:	11000536 	bltu	r2,r4,81102b08 <__clzsi2+0x1c>
81102af4:	00803fc4 	movi	r2,255
81102af8:	11000f36 	bltu	r2,r4,81102b38 <__clzsi2+0x4c>
81102afc:	00800804 	movi	r2,32
81102b00:	0007883a 	mov	r3,zero
81102b04:	00000506 	br	81102b1c <__clzsi2+0x30>
81102b08:	00804034 	movhi	r2,256
81102b0c:	10bfffc4 	addi	r2,r2,-1
81102b10:	11000c2e 	bgeu	r2,r4,81102b44 <__clzsi2+0x58>
81102b14:	00800204 	movi	r2,8
81102b18:	00c00604 	movi	r3,24
81102b1c:	20c8d83a 	srl	r4,r4,r3
81102b20:	00e044b4 	movhi	r3,33042
81102b24:	18e5b384 	addi	r3,r3,-26930
81102b28:	1909883a 	add	r4,r3,r4
81102b2c:	20c00003 	ldbu	r3,0(r4)
81102b30:	10c5c83a 	sub	r2,r2,r3
81102b34:	f800283a 	ret
81102b38:	00800604 	movi	r2,24
81102b3c:	00c00204 	movi	r3,8
81102b40:	003ff606 	br	81102b1c <__reset+0xfb0e2b1c>
81102b44:	00800404 	movi	r2,16
81102b48:	1007883a 	mov	r3,r2
81102b4c:	003ff306 	br	81102b1c <__reset+0xfb0e2b1c>

81102b50 <memcpy>:
81102b50:	defffd04 	addi	sp,sp,-12
81102b54:	dfc00215 	stw	ra,8(sp)
81102b58:	dc400115 	stw	r17,4(sp)
81102b5c:	dc000015 	stw	r16,0(sp)
81102b60:	00c003c4 	movi	r3,15
81102b64:	2005883a 	mov	r2,r4
81102b68:	1980452e 	bgeu	r3,r6,81102c80 <memcpy+0x130>
81102b6c:	2906b03a 	or	r3,r5,r4
81102b70:	18c000cc 	andi	r3,r3,3
81102b74:	1800441e 	bne	r3,zero,81102c88 <memcpy+0x138>
81102b78:	347ffc04 	addi	r17,r6,-16
81102b7c:	8822d13a 	srli	r17,r17,4
81102b80:	28c00104 	addi	r3,r5,4
81102b84:	23400104 	addi	r13,r4,4
81102b88:	8820913a 	slli	r16,r17,4
81102b8c:	2b000204 	addi	r12,r5,8
81102b90:	22c00204 	addi	r11,r4,8
81102b94:	84000504 	addi	r16,r16,20
81102b98:	2a800304 	addi	r10,r5,12
81102b9c:	22400304 	addi	r9,r4,12
81102ba0:	2c21883a 	add	r16,r5,r16
81102ba4:	2811883a 	mov	r8,r5
81102ba8:	200f883a 	mov	r7,r4
81102bac:	41000017 	ldw	r4,0(r8)
81102bb0:	1fc00017 	ldw	ra,0(r3)
81102bb4:	63c00017 	ldw	r15,0(r12)
81102bb8:	39000015 	stw	r4,0(r7)
81102bbc:	53800017 	ldw	r14,0(r10)
81102bc0:	6fc00015 	stw	ra,0(r13)
81102bc4:	5bc00015 	stw	r15,0(r11)
81102bc8:	4b800015 	stw	r14,0(r9)
81102bcc:	18c00404 	addi	r3,r3,16
81102bd0:	39c00404 	addi	r7,r7,16
81102bd4:	42000404 	addi	r8,r8,16
81102bd8:	6b400404 	addi	r13,r13,16
81102bdc:	63000404 	addi	r12,r12,16
81102be0:	5ac00404 	addi	r11,r11,16
81102be4:	52800404 	addi	r10,r10,16
81102be8:	4a400404 	addi	r9,r9,16
81102bec:	1c3fef1e 	bne	r3,r16,81102bac <__reset+0xfb0e2bac>
81102bf0:	89c00044 	addi	r7,r17,1
81102bf4:	380e913a 	slli	r7,r7,4
81102bf8:	310003cc 	andi	r4,r6,15
81102bfc:	02c000c4 	movi	r11,3
81102c00:	11c7883a 	add	r3,r2,r7
81102c04:	29cb883a 	add	r5,r5,r7
81102c08:	5900212e 	bgeu	r11,r4,81102c90 <memcpy+0x140>
81102c0c:	1813883a 	mov	r9,r3
81102c10:	2811883a 	mov	r8,r5
81102c14:	200f883a 	mov	r7,r4
81102c18:	42800017 	ldw	r10,0(r8)
81102c1c:	4a400104 	addi	r9,r9,4
81102c20:	39ffff04 	addi	r7,r7,-4
81102c24:	4abfff15 	stw	r10,-4(r9)
81102c28:	42000104 	addi	r8,r8,4
81102c2c:	59fffa36 	bltu	r11,r7,81102c18 <__reset+0xfb0e2c18>
81102c30:	213fff04 	addi	r4,r4,-4
81102c34:	2008d0ba 	srli	r4,r4,2
81102c38:	318000cc 	andi	r6,r6,3
81102c3c:	21000044 	addi	r4,r4,1
81102c40:	2109883a 	add	r4,r4,r4
81102c44:	2109883a 	add	r4,r4,r4
81102c48:	1907883a 	add	r3,r3,r4
81102c4c:	290b883a 	add	r5,r5,r4
81102c50:	30000626 	beq	r6,zero,81102c6c <memcpy+0x11c>
81102c54:	198d883a 	add	r6,r3,r6
81102c58:	29c00003 	ldbu	r7,0(r5)
81102c5c:	18c00044 	addi	r3,r3,1
81102c60:	29400044 	addi	r5,r5,1
81102c64:	19ffffc5 	stb	r7,-1(r3)
81102c68:	19bffb1e 	bne	r3,r6,81102c58 <__reset+0xfb0e2c58>
81102c6c:	dfc00217 	ldw	ra,8(sp)
81102c70:	dc400117 	ldw	r17,4(sp)
81102c74:	dc000017 	ldw	r16,0(sp)
81102c78:	dec00304 	addi	sp,sp,12
81102c7c:	f800283a 	ret
81102c80:	2007883a 	mov	r3,r4
81102c84:	003ff206 	br	81102c50 <__reset+0xfb0e2c50>
81102c88:	2007883a 	mov	r3,r4
81102c8c:	003ff106 	br	81102c54 <__reset+0xfb0e2c54>
81102c90:	200d883a 	mov	r6,r4
81102c94:	003fee06 	br	81102c50 <__reset+0xfb0e2c50>

81102c98 <_printf_r>:
81102c98:	defffd04 	addi	sp,sp,-12
81102c9c:	2805883a 	mov	r2,r5
81102ca0:	dfc00015 	stw	ra,0(sp)
81102ca4:	d9800115 	stw	r6,4(sp)
81102ca8:	d9c00215 	stw	r7,8(sp)
81102cac:	21400217 	ldw	r5,8(r4)
81102cb0:	d9c00104 	addi	r7,sp,4
81102cb4:	100d883a 	mov	r6,r2
81102cb8:	110512c0 	call	8110512c <___vfprintf_internal_r>
81102cbc:	dfc00017 	ldw	ra,0(sp)
81102cc0:	dec00304 	addi	sp,sp,12
81102cc4:	f800283a 	ret

81102cc8 <printf>:
81102cc8:	defffc04 	addi	sp,sp,-16
81102ccc:	dfc00015 	stw	ra,0(sp)
81102cd0:	d9400115 	stw	r5,4(sp)
81102cd4:	d9800215 	stw	r6,8(sp)
81102cd8:	d9c00315 	stw	r7,12(sp)
81102cdc:	00a044b4 	movhi	r2,33042
81102ce0:	10af1804 	addi	r2,r2,-17312
81102ce4:	10800017 	ldw	r2,0(r2)
81102ce8:	200b883a 	mov	r5,r4
81102cec:	d9800104 	addi	r6,sp,4
81102cf0:	11000217 	ldw	r4,8(r2)
81102cf4:	11073240 	call	81107324 <__vfprintf_internal>
81102cf8:	dfc00017 	ldw	ra,0(sp)
81102cfc:	dec00404 	addi	sp,sp,16
81102d00:	f800283a 	ret

81102d04 <_putchar_r>:
81102d04:	21800217 	ldw	r6,8(r4)
81102d08:	110bca01 	jmpi	8110bca0 <_putc_r>

81102d0c <putchar>:
81102d0c:	00a044b4 	movhi	r2,33042
81102d10:	10af1804 	addi	r2,r2,-17312
81102d14:	200b883a 	mov	r5,r4
81102d18:	11000017 	ldw	r4,0(r2)
81102d1c:	21800217 	ldw	r6,8(r4)
81102d20:	110bca01 	jmpi	8110bca0 <_putc_r>

81102d24 <_puts_r>:
81102d24:	defff604 	addi	sp,sp,-40
81102d28:	dc000715 	stw	r16,28(sp)
81102d2c:	2021883a 	mov	r16,r4
81102d30:	2809883a 	mov	r4,r5
81102d34:	dc400815 	stw	r17,32(sp)
81102d38:	dfc00915 	stw	ra,36(sp)
81102d3c:	2823883a 	mov	r17,r5
81102d40:	1102ebc0 	call	81102ebc <strlen>
81102d44:	10c00044 	addi	r3,r2,1
81102d48:	d8800115 	stw	r2,4(sp)
81102d4c:	00a044b4 	movhi	r2,33042
81102d50:	10a5f404 	addi	r2,r2,-26672
81102d54:	d8800215 	stw	r2,8(sp)
81102d58:	00800044 	movi	r2,1
81102d5c:	d8800315 	stw	r2,12(sp)
81102d60:	00800084 	movi	r2,2
81102d64:	dc400015 	stw	r17,0(sp)
81102d68:	d8c00615 	stw	r3,24(sp)
81102d6c:	dec00415 	stw	sp,16(sp)
81102d70:	d8800515 	stw	r2,20(sp)
81102d74:	80000226 	beq	r16,zero,81102d80 <_puts_r+0x5c>
81102d78:	80800e17 	ldw	r2,56(r16)
81102d7c:	10001426 	beq	r2,zero,81102dd0 <_puts_r+0xac>
81102d80:	81400217 	ldw	r5,8(r16)
81102d84:	2880030b 	ldhu	r2,12(r5)
81102d88:	10c8000c 	andi	r3,r2,8192
81102d8c:	1800061e 	bne	r3,zero,81102da8 <_puts_r+0x84>
81102d90:	29001917 	ldw	r4,100(r5)
81102d94:	00f7ffc4 	movi	r3,-8193
81102d98:	10880014 	ori	r2,r2,8192
81102d9c:	20c6703a 	and	r3,r4,r3
81102da0:	2880030d 	sth	r2,12(r5)
81102da4:	28c01915 	stw	r3,100(r5)
81102da8:	d9800404 	addi	r6,sp,16
81102dac:	8009883a 	mov	r4,r16
81102db0:	11098540 	call	81109854 <__sfvwrite_r>
81102db4:	1000091e 	bne	r2,zero,81102ddc <_puts_r+0xb8>
81102db8:	00800284 	movi	r2,10
81102dbc:	dfc00917 	ldw	ra,36(sp)
81102dc0:	dc400817 	ldw	r17,32(sp)
81102dc4:	dc000717 	ldw	r16,28(sp)
81102dc8:	dec00a04 	addi	sp,sp,40
81102dcc:	f800283a 	ret
81102dd0:	8009883a 	mov	r4,r16
81102dd4:	11093d00 	call	811093d0 <__sinit>
81102dd8:	003fe906 	br	81102d80 <__reset+0xfb0e2d80>
81102ddc:	00bfffc4 	movi	r2,-1
81102de0:	003ff606 	br	81102dbc <__reset+0xfb0e2dbc>

81102de4 <puts>:
81102de4:	00a044b4 	movhi	r2,33042
81102de8:	10af1804 	addi	r2,r2,-17312
81102dec:	200b883a 	mov	r5,r4
81102df0:	11000017 	ldw	r4,0(r2)
81102df4:	1102d241 	jmpi	81102d24 <_puts_r>

81102df8 <_sprintf_r>:
81102df8:	deffe404 	addi	sp,sp,-112
81102dfc:	2807883a 	mov	r3,r5
81102e00:	dfc01a15 	stw	ra,104(sp)
81102e04:	d9c01b15 	stw	r7,108(sp)
81102e08:	00a00034 	movhi	r2,32768
81102e0c:	10bfffc4 	addi	r2,r2,-1
81102e10:	02008204 	movi	r8,520
81102e14:	d8800215 	stw	r2,8(sp)
81102e18:	d8800515 	stw	r2,20(sp)
81102e1c:	d9c01b04 	addi	r7,sp,108
81102e20:	d80b883a 	mov	r5,sp
81102e24:	00bfffc4 	movi	r2,-1
81102e28:	d8c00015 	stw	r3,0(sp)
81102e2c:	d8c00415 	stw	r3,16(sp)
81102e30:	da00030d 	sth	r8,12(sp)
81102e34:	d880038d 	sth	r2,14(sp)
81102e38:	1102f540 	call	81102f54 <___svfprintf_internal_r>
81102e3c:	d8c00017 	ldw	r3,0(sp)
81102e40:	18000005 	stb	zero,0(r3)
81102e44:	dfc01a17 	ldw	ra,104(sp)
81102e48:	dec01c04 	addi	sp,sp,112
81102e4c:	f800283a 	ret

81102e50 <sprintf>:
81102e50:	deffe304 	addi	sp,sp,-116
81102e54:	2007883a 	mov	r3,r4
81102e58:	dfc01a15 	stw	ra,104(sp)
81102e5c:	d9801b15 	stw	r6,108(sp)
81102e60:	d9c01c15 	stw	r7,112(sp)
81102e64:	012044b4 	movhi	r4,33042
81102e68:	212f1804 	addi	r4,r4,-17312
81102e6c:	21000017 	ldw	r4,0(r4)
81102e70:	00a00034 	movhi	r2,32768
81102e74:	10bfffc4 	addi	r2,r2,-1
81102e78:	280d883a 	mov	r6,r5
81102e7c:	02008204 	movi	r8,520
81102e80:	d8800215 	stw	r2,8(sp)
81102e84:	d8800515 	stw	r2,20(sp)
81102e88:	d9c01b04 	addi	r7,sp,108
81102e8c:	d80b883a 	mov	r5,sp
81102e90:	00bfffc4 	movi	r2,-1
81102e94:	d8c00015 	stw	r3,0(sp)
81102e98:	d8c00415 	stw	r3,16(sp)
81102e9c:	da00030d 	sth	r8,12(sp)
81102ea0:	d880038d 	sth	r2,14(sp)
81102ea4:	1102f540 	call	81102f54 <___svfprintf_internal_r>
81102ea8:	d8c00017 	ldw	r3,0(sp)
81102eac:	18000005 	stb	zero,0(r3)
81102eb0:	dfc01a17 	ldw	ra,104(sp)
81102eb4:	dec01d04 	addi	sp,sp,116
81102eb8:	f800283a 	ret

81102ebc <strlen>:
81102ebc:	208000cc 	andi	r2,r4,3
81102ec0:	10002026 	beq	r2,zero,81102f44 <strlen+0x88>
81102ec4:	20800007 	ldb	r2,0(r4)
81102ec8:	10002026 	beq	r2,zero,81102f4c <strlen+0x90>
81102ecc:	2005883a 	mov	r2,r4
81102ed0:	00000206 	br	81102edc <strlen+0x20>
81102ed4:	10c00007 	ldb	r3,0(r2)
81102ed8:	18001826 	beq	r3,zero,81102f3c <strlen+0x80>
81102edc:	10800044 	addi	r2,r2,1
81102ee0:	10c000cc 	andi	r3,r2,3
81102ee4:	183ffb1e 	bne	r3,zero,81102ed4 <__reset+0xfb0e2ed4>
81102ee8:	10c00017 	ldw	r3,0(r2)
81102eec:	01ffbff4 	movhi	r7,65279
81102ef0:	39ffbfc4 	addi	r7,r7,-257
81102ef4:	00ca303a 	nor	r5,zero,r3
81102ef8:	01a02074 	movhi	r6,32897
81102efc:	19c7883a 	add	r3,r3,r7
81102f00:	31a02004 	addi	r6,r6,-32640
81102f04:	1946703a 	and	r3,r3,r5
81102f08:	1986703a 	and	r3,r3,r6
81102f0c:	1800091e 	bne	r3,zero,81102f34 <strlen+0x78>
81102f10:	10800104 	addi	r2,r2,4
81102f14:	10c00017 	ldw	r3,0(r2)
81102f18:	19cb883a 	add	r5,r3,r7
81102f1c:	00c6303a 	nor	r3,zero,r3
81102f20:	28c6703a 	and	r3,r5,r3
81102f24:	1986703a 	and	r3,r3,r6
81102f28:	183ff926 	beq	r3,zero,81102f10 <__reset+0xfb0e2f10>
81102f2c:	00000106 	br	81102f34 <strlen+0x78>
81102f30:	10800044 	addi	r2,r2,1
81102f34:	10c00007 	ldb	r3,0(r2)
81102f38:	183ffd1e 	bne	r3,zero,81102f30 <__reset+0xfb0e2f30>
81102f3c:	1105c83a 	sub	r2,r2,r4
81102f40:	f800283a 	ret
81102f44:	2005883a 	mov	r2,r4
81102f48:	003fe706 	br	81102ee8 <__reset+0xfb0e2ee8>
81102f4c:	0005883a 	mov	r2,zero
81102f50:	f800283a 	ret

81102f54 <___svfprintf_internal_r>:
81102f54:	deffb704 	addi	sp,sp,-292
81102f58:	dfc04815 	stw	ra,288(sp)
81102f5c:	ddc04615 	stw	r23,280(sp)
81102f60:	d9402c15 	stw	r5,176(sp)
81102f64:	d9003915 	stw	r4,228(sp)
81102f68:	302f883a 	mov	r23,r6
81102f6c:	d9c02d15 	stw	r7,180(sp)
81102f70:	df004715 	stw	fp,284(sp)
81102f74:	dd804515 	stw	r22,276(sp)
81102f78:	dd404415 	stw	r21,272(sp)
81102f7c:	dd004315 	stw	r20,268(sp)
81102f80:	dcc04215 	stw	r19,264(sp)
81102f84:	dc804115 	stw	r18,260(sp)
81102f88:	dc404015 	stw	r17,256(sp)
81102f8c:	dc003f15 	stw	r16,252(sp)
81102f90:	1109f440 	call	81109f44 <_localeconv_r>
81102f94:	10800017 	ldw	r2,0(r2)
81102f98:	1009883a 	mov	r4,r2
81102f9c:	d8803415 	stw	r2,208(sp)
81102fa0:	1102ebc0 	call	81102ebc <strlen>
81102fa4:	d8c02c17 	ldw	r3,176(sp)
81102fa8:	d8803815 	stw	r2,224(sp)
81102fac:	1880030b 	ldhu	r2,12(r3)
81102fb0:	1080200c 	andi	r2,r2,128
81102fb4:	10000226 	beq	r2,zero,81102fc0 <___svfprintf_internal_r+0x6c>
81102fb8:	18800417 	ldw	r2,16(r3)
81102fbc:	10067f26 	beq	r2,zero,811049bc <___svfprintf_internal_r+0x1a68>
81102fc0:	dcc03917 	ldw	r19,228(sp)
81102fc4:	d8c00404 	addi	r3,sp,16
81102fc8:	056044b4 	movhi	r21,33042
81102fcc:	d9001e04 	addi	r4,sp,120
81102fd0:	ad660584 	addi	r21,r21,-26602
81102fd4:	d8c01e15 	stw	r3,120(sp)
81102fd8:	d8002015 	stw	zero,128(sp)
81102fdc:	d8001f15 	stw	zero,124(sp)
81102fe0:	d8003315 	stw	zero,204(sp)
81102fe4:	d8003615 	stw	zero,216(sp)
81102fe8:	d8003715 	stw	zero,220(sp)
81102fec:	1811883a 	mov	r8,r3
81102ff0:	d8003a15 	stw	zero,232(sp)
81102ff4:	d8003b15 	stw	zero,236(sp)
81102ff8:	d8002f15 	stw	zero,188(sp)
81102ffc:	d9002815 	stw	r4,160(sp)
81103000:	b8800007 	ldb	r2,0(r23)
81103004:	10026726 	beq	r2,zero,811039a4 <___svfprintf_internal_r+0xa50>
81103008:	00c00944 	movi	r3,37
8110300c:	b821883a 	mov	r16,r23
81103010:	10c0021e 	bne	r2,r3,8110301c <___svfprintf_internal_r+0xc8>
81103014:	00001406 	br	81103068 <___svfprintf_internal_r+0x114>
81103018:	10c00326 	beq	r2,r3,81103028 <___svfprintf_internal_r+0xd4>
8110301c:	84000044 	addi	r16,r16,1
81103020:	80800007 	ldb	r2,0(r16)
81103024:	103ffc1e 	bne	r2,zero,81103018 <__reset+0xfb0e3018>
81103028:	85e3c83a 	sub	r17,r16,r23
8110302c:	88000e26 	beq	r17,zero,81103068 <___svfprintf_internal_r+0x114>
81103030:	d8c02017 	ldw	r3,128(sp)
81103034:	d8801f17 	ldw	r2,124(sp)
81103038:	45c00015 	stw	r23,0(r8)
8110303c:	1c47883a 	add	r3,r3,r17
81103040:	10800044 	addi	r2,r2,1
81103044:	d8c02015 	stw	r3,128(sp)
81103048:	44400115 	stw	r17,4(r8)
8110304c:	d8801f15 	stw	r2,124(sp)
81103050:	00c001c4 	movi	r3,7
81103054:	18809716 	blt	r3,r2,811032b4 <___svfprintf_internal_r+0x360>
81103058:	42000204 	addi	r8,r8,8
8110305c:	d9402f17 	ldw	r5,188(sp)
81103060:	2c4b883a 	add	r5,r5,r17
81103064:	d9402f15 	stw	r5,188(sp)
81103068:	80800007 	ldb	r2,0(r16)
8110306c:	10009826 	beq	r2,zero,811032d0 <___svfprintf_internal_r+0x37c>
81103070:	84400047 	ldb	r17,1(r16)
81103074:	00bfffc4 	movi	r2,-1
81103078:	85c00044 	addi	r23,r16,1
8110307c:	d8002785 	stb	zero,158(sp)
81103080:	0007883a 	mov	r3,zero
81103084:	000f883a 	mov	r7,zero
81103088:	d8802915 	stw	r2,164(sp)
8110308c:	d8003115 	stw	zero,196(sp)
81103090:	0025883a 	mov	r18,zero
81103094:	01401604 	movi	r5,88
81103098:	01800244 	movi	r6,9
8110309c:	02800a84 	movi	r10,42
811030a0:	02401b04 	movi	r9,108
811030a4:	bdc00044 	addi	r23,r23,1
811030a8:	88bff804 	addi	r2,r17,-32
811030ac:	2882f036 	bltu	r5,r2,81103c70 <___svfprintf_internal_r+0xd1c>
811030b0:	100490ba 	slli	r2,r2,2
811030b4:	01204434 	movhi	r4,33040
811030b8:	210c3204 	addi	r4,r4,12488
811030bc:	1105883a 	add	r2,r2,r4
811030c0:	10800017 	ldw	r2,0(r2)
811030c4:	1000683a 	jmp	r2
811030c8:	81103bd8 	cmpnei	r4,r16,16623
811030cc:	81103c70 	cmpltui	r4,r16,16625
811030d0:	81103c70 	cmpltui	r4,r16,16625
811030d4:	81103bcc 	andi	r4,r16,16623
811030d8:	81103c70 	cmpltui	r4,r16,16625
811030dc:	81103c70 	cmpltui	r4,r16,16625
811030e0:	81103c70 	cmpltui	r4,r16,16625
811030e4:	81103c70 	cmpltui	r4,r16,16625
811030e8:	81103c70 	cmpltui	r4,r16,16625
811030ec:	81103c70 	cmpltui	r4,r16,16625
811030f0:	8110332c 	andhi	r4,r16,16588
811030f4:	81103b08 	cmpgei	r4,r16,16620
811030f8:	81103c70 	cmpltui	r4,r16,16625
811030fc:	8110323c 	xorhi	r4,r16,16584
81103100:	81103354 	ori	r4,r16,16589
81103104:	81103c70 	cmpltui	r4,r16,16625
81103108:	811033c8 	cmpgei	r4,r16,16591
8110310c:	81103394 	ori	r4,r16,16590
81103110:	81103394 	ori	r4,r16,16590
81103114:	81103394 	ori	r4,r16,16590
81103118:	81103394 	ori	r4,r16,16590
8110311c:	81103394 	ori	r4,r16,16590
81103120:	81103394 	ori	r4,r16,16590
81103124:	81103394 	ori	r4,r16,16590
81103128:	81103394 	ori	r4,r16,16590
8110312c:	81103394 	ori	r4,r16,16590
81103130:	81103c70 	cmpltui	r4,r16,16625
81103134:	81103c70 	cmpltui	r4,r16,16625
81103138:	81103c70 	cmpltui	r4,r16,16625
8110313c:	81103c70 	cmpltui	r4,r16,16625
81103140:	81103c70 	cmpltui	r4,r16,16625
81103144:	81103c70 	cmpltui	r4,r16,16625
81103148:	81103c70 	cmpltui	r4,r16,16625
8110314c:	81103c70 	cmpltui	r4,r16,16625
81103150:	81103c70 	cmpltui	r4,r16,16625
81103154:	81103c70 	cmpltui	r4,r16,16625
81103158:	81103480 	call	88110348 <__reset+0x20f0348>
8110315c:	811033d4 	ori	r4,r16,16591
81103160:	81103c70 	cmpltui	r4,r16,16625
81103164:	811033d4 	ori	r4,r16,16591
81103168:	81103c70 	cmpltui	r4,r16,16625
8110316c:	81103c70 	cmpltui	r4,r16,16625
81103170:	81103c70 	cmpltui	r4,r16,16625
81103174:	81103c70 	cmpltui	r4,r16,16625
81103178:	81103474 	orhi	r4,r16,16593
8110317c:	81103c70 	cmpltui	r4,r16,16625
81103180:	81103c70 	cmpltui	r4,r16,16625
81103184:	8110353c 	xorhi	r4,r16,16596
81103188:	81103c70 	cmpltui	r4,r16,16625
8110318c:	81103c70 	cmpltui	r4,r16,16625
81103190:	81103c70 	cmpltui	r4,r16,16625
81103194:	81103c70 	cmpltui	r4,r16,16625
81103198:	81103c70 	cmpltui	r4,r16,16625
8110319c:	811039ac 	andhi	r4,r16,16614
811031a0:	81103c70 	cmpltui	r4,r16,16625
811031a4:	81103c70 	cmpltui	r4,r16,16625
811031a8:	81103a0c 	andi	r4,r16,16616
811031ac:	81103c70 	cmpltui	r4,r16,16625
811031b0:	81103c70 	cmpltui	r4,r16,16625
811031b4:	81103c70 	cmpltui	r4,r16,16625
811031b8:	81103c70 	cmpltui	r4,r16,16625
811031bc:	81103c70 	cmpltui	r4,r16,16625
811031c0:	81103c70 	cmpltui	r4,r16,16625
811031c4:	81103c70 	cmpltui	r4,r16,16625
811031c8:	81103c70 	cmpltui	r4,r16,16625
811031cc:	81103c70 	cmpltui	r4,r16,16625
811031d0:	81103c70 	cmpltui	r4,r16,16625
811031d4:	81103abc 	xorhi	r4,r16,16618
811031d8:	81103bf8 	rdprs	r4,r16,16623
811031dc:	811033d4 	ori	r4,r16,16591
811031e0:	811033d4 	ori	r4,r16,16591
811031e4:	811033d4 	ori	r4,r16,16591
811031e8:	81103c4c 	andi	r4,r16,16625
811031ec:	81103bf8 	rdprs	r4,r16,16623
811031f0:	81103c70 	cmpltui	r4,r16,16625
811031f4:	81103c70 	cmpltui	r4,r16,16625
811031f8:	81103c08 	cmpgei	r4,r16,16624
811031fc:	81103c70 	cmpltui	r4,r16,16625
81103200:	81103c18 	cmpnei	r4,r16,16624
81103204:	81103af8 	rdprs	r4,r16,16619
81103208:	81103248 	cmpgei	r4,r16,16585
8110320c:	81103b18 	cmpnei	r4,r16,16620
81103210:	81103c70 	cmpltui	r4,r16,16625
81103214:	81103b24 	muli	r4,r16,16620
81103218:	81103c70 	cmpltui	r4,r16,16625
8110321c:	81103b80 	call	881103b8 <__reset+0x20f03b8>
81103220:	81103c70 	cmpltui	r4,r16,16625
81103224:	81103c70 	cmpltui	r4,r16,16625
81103228:	81103b90 	cmplti	r4,r16,16622
8110322c:	d9003117 	ldw	r4,196(sp)
81103230:	d8802d15 	stw	r2,180(sp)
81103234:	0109c83a 	sub	r4,zero,r4
81103238:	d9003115 	stw	r4,196(sp)
8110323c:	94800114 	ori	r18,r18,4
81103240:	bc400007 	ldb	r17,0(r23)
81103244:	003f9706 	br	811030a4 <__reset+0xfb0e30a4>
81103248:	00800c04 	movi	r2,48
8110324c:	d9002d17 	ldw	r4,180(sp)
81103250:	d9402917 	ldw	r5,164(sp)
81103254:	d8802705 	stb	r2,156(sp)
81103258:	00801e04 	movi	r2,120
8110325c:	d8802745 	stb	r2,157(sp)
81103260:	d8002785 	stb	zero,158(sp)
81103264:	20c00104 	addi	r3,r4,4
81103268:	25000017 	ldw	r20,0(r4)
8110326c:	002d883a 	mov	r22,zero
81103270:	90800094 	ori	r2,r18,2
81103274:	28028616 	blt	r5,zero,81103c90 <___svfprintf_internal_r+0xd3c>
81103278:	00bfdfc4 	movi	r2,-129
8110327c:	90a4703a 	and	r18,r18,r2
81103280:	d8c02d15 	stw	r3,180(sp)
81103284:	94800094 	ori	r18,r18,2
81103288:	a002731e 	bne	r20,zero,81103c58 <___svfprintf_internal_r+0xd04>
8110328c:	00a044b4 	movhi	r2,33042
81103290:	10a5fe04 	addi	r2,r2,-26632
81103294:	d8803a15 	stw	r2,232(sp)
81103298:	04401e04 	movi	r17,120
8110329c:	d8c02917 	ldw	r3,164(sp)
811032a0:	0039883a 	mov	fp,zero
811032a4:	1801d526 	beq	r3,zero,811039fc <___svfprintf_internal_r+0xaa8>
811032a8:	0029883a 	mov	r20,zero
811032ac:	002d883a 	mov	r22,zero
811032b0:	0001f106 	br	81103a78 <___svfprintf_internal_r+0xb24>
811032b4:	d9402c17 	ldw	r5,176(sp)
811032b8:	d9801e04 	addi	r6,sp,120
811032bc:	9809883a 	mov	r4,r19
811032c0:	110c64c0 	call	8110c64c <__ssprint_r>
811032c4:	1000081e 	bne	r2,zero,811032e8 <___svfprintf_internal_r+0x394>
811032c8:	da000404 	addi	r8,sp,16
811032cc:	003f6306 	br	8110305c <__reset+0xfb0e305c>
811032d0:	d8802017 	ldw	r2,128(sp)
811032d4:	10000426 	beq	r2,zero,811032e8 <___svfprintf_internal_r+0x394>
811032d8:	d9402c17 	ldw	r5,176(sp)
811032dc:	d9003917 	ldw	r4,228(sp)
811032e0:	d9801e04 	addi	r6,sp,120
811032e4:	110c64c0 	call	8110c64c <__ssprint_r>
811032e8:	d8802c17 	ldw	r2,176(sp)
811032ec:	10c0030b 	ldhu	r3,12(r2)
811032f0:	d8802f17 	ldw	r2,188(sp)
811032f4:	18c0100c 	andi	r3,r3,64
811032f8:	1805f51e 	bne	r3,zero,81104ad0 <___svfprintf_internal_r+0x1b7c>
811032fc:	dfc04817 	ldw	ra,288(sp)
81103300:	df004717 	ldw	fp,284(sp)
81103304:	ddc04617 	ldw	r23,280(sp)
81103308:	dd804517 	ldw	r22,276(sp)
8110330c:	dd404417 	ldw	r21,272(sp)
81103310:	dd004317 	ldw	r20,268(sp)
81103314:	dcc04217 	ldw	r19,264(sp)
81103318:	dc804117 	ldw	r18,260(sp)
8110331c:	dc404017 	ldw	r17,256(sp)
81103320:	dc003f17 	ldw	r16,252(sp)
81103324:	dec04904 	addi	sp,sp,292
81103328:	f800283a 	ret
8110332c:	d8802d17 	ldw	r2,180(sp)
81103330:	d9002d17 	ldw	r4,180(sp)
81103334:	10800017 	ldw	r2,0(r2)
81103338:	d8803115 	stw	r2,196(sp)
8110333c:	20800104 	addi	r2,r4,4
81103340:	d9003117 	ldw	r4,196(sp)
81103344:	203fb916 	blt	r4,zero,8110322c <__reset+0xfb0e322c>
81103348:	d8802d15 	stw	r2,180(sp)
8110334c:	bc400007 	ldb	r17,0(r23)
81103350:	003f5406 	br	811030a4 <__reset+0xfb0e30a4>
81103354:	bc400007 	ldb	r17,0(r23)
81103358:	bac00044 	addi	r11,r23,1
8110335c:	8a873926 	beq	r17,r10,81105044 <___svfprintf_internal_r+0x20f0>
81103360:	88bff404 	addi	r2,r17,-48
81103364:	0009883a 	mov	r4,zero
81103368:	30868836 	bltu	r6,r2,81104d8c <___svfprintf_internal_r+0x1e38>
8110336c:	5c400007 	ldb	r17,0(r11)
81103370:	210002a4 	muli	r4,r4,10
81103374:	5dc00044 	addi	r23,r11,1
81103378:	b817883a 	mov	r11,r23
8110337c:	2089883a 	add	r4,r4,r2
81103380:	88bff404 	addi	r2,r17,-48
81103384:	30bff92e 	bgeu	r6,r2,8110336c <__reset+0xfb0e336c>
81103388:	2005d716 	blt	r4,zero,81104ae8 <___svfprintf_internal_r+0x1b94>
8110338c:	d9002915 	stw	r4,164(sp)
81103390:	003f4506 	br	811030a8 <__reset+0xfb0e30a8>
81103394:	b809883a 	mov	r4,r23
81103398:	d8003115 	stw	zero,196(sp)
8110339c:	88bff404 	addi	r2,r17,-48
811033a0:	0017883a 	mov	r11,zero
811033a4:	24400007 	ldb	r17,0(r4)
811033a8:	5ac002a4 	muli	r11,r11,10
811033ac:	bdc00044 	addi	r23,r23,1
811033b0:	b809883a 	mov	r4,r23
811033b4:	12d7883a 	add	r11,r2,r11
811033b8:	88bff404 	addi	r2,r17,-48
811033bc:	30bff92e 	bgeu	r6,r2,811033a4 <__reset+0xfb0e33a4>
811033c0:	dac03115 	stw	r11,196(sp)
811033c4:	003f3806 	br	811030a8 <__reset+0xfb0e30a8>
811033c8:	94802014 	ori	r18,r18,128
811033cc:	bc400007 	ldb	r17,0(r23)
811033d0:	003f3406 	br	811030a4 <__reset+0xfb0e30a4>
811033d4:	18c03fcc 	andi	r3,r3,255
811033d8:	1807471e 	bne	r3,zero,811050f8 <___svfprintf_internal_r+0x21a4>
811033dc:	9080020c 	andi	r2,r18,8
811033e0:	10047d26 	beq	r2,zero,811045d8 <___svfprintf_internal_r+0x1684>
811033e4:	d8c02d17 	ldw	r3,180(sp)
811033e8:	d9002d17 	ldw	r4,180(sp)
811033ec:	d9402d17 	ldw	r5,180(sp)
811033f0:	18c00017 	ldw	r3,0(r3)
811033f4:	21000117 	ldw	r4,4(r4)
811033f8:	29400204 	addi	r5,r5,8
811033fc:	d8c03615 	stw	r3,216(sp)
81103400:	d9003715 	stw	r4,220(sp)
81103404:	d9402d15 	stw	r5,180(sp)
81103408:	d9003617 	ldw	r4,216(sp)
8110340c:	d9403717 	ldw	r5,220(sp)
81103410:	da003e15 	stw	r8,248(sp)
81103414:	04000044 	movi	r16,1
81103418:	110c36c0 	call	8110c36c <__fpclassifyd>
8110341c:	da003e17 	ldw	r8,248(sp)
81103420:	14044b1e 	bne	r2,r16,81104550 <___svfprintf_internal_r+0x15fc>
81103424:	d9003617 	ldw	r4,216(sp)
81103428:	d9403717 	ldw	r5,220(sp)
8110342c:	000d883a 	mov	r6,zero
81103430:	000f883a 	mov	r7,zero
81103434:	11119300 	call	81111930 <__ledf2>
81103438:	da003e17 	ldw	r8,248(sp)
8110343c:	1005f316 	blt	r2,zero,81104c0c <___svfprintf_internal_r+0x1cb8>
81103440:	df002783 	ldbu	fp,158(sp)
81103444:	008011c4 	movi	r2,71
81103448:	1445590e 	bge	r2,r17,811049b0 <___svfprintf_internal_r+0x1a5c>
8110344c:	042044b4 	movhi	r16,33042
81103450:	8425f604 	addi	r16,r16,-26664
81103454:	00c000c4 	movi	r3,3
81103458:	00bfdfc4 	movi	r2,-129
8110345c:	d8c02a15 	stw	r3,168(sp)
81103460:	90a4703a 	and	r18,r18,r2
81103464:	d8c02e15 	stw	r3,184(sp)
81103468:	d8002915 	stw	zero,164(sp)
8110346c:	d8003215 	stw	zero,200(sp)
81103470:	00006606 	br	8110360c <___svfprintf_internal_r+0x6b8>
81103474:	94800214 	ori	r18,r18,8
81103478:	bc400007 	ldb	r17,0(r23)
8110347c:	003f0906 	br	811030a4 <__reset+0xfb0e30a4>
81103480:	18c03fcc 	andi	r3,r3,255
81103484:	1807181e 	bne	r3,zero,811050e8 <___svfprintf_internal_r+0x2194>
81103488:	94800414 	ori	r18,r18,16
8110348c:	9080080c 	andi	r2,r18,32
81103490:	10039626 	beq	r2,zero,811042ec <___svfprintf_internal_r+0x1398>
81103494:	d9402d17 	ldw	r5,180(sp)
81103498:	28800117 	ldw	r2,4(r5)
8110349c:	2d000017 	ldw	r20,0(r5)
811034a0:	29400204 	addi	r5,r5,8
811034a4:	d9402d15 	stw	r5,180(sp)
811034a8:	102d883a 	mov	r22,r2
811034ac:	10039816 	blt	r2,zero,81104310 <___svfprintf_internal_r+0x13bc>
811034b0:	d9402917 	ldw	r5,164(sp)
811034b4:	df002783 	ldbu	fp,158(sp)
811034b8:	2803ab16 	blt	r5,zero,81104368 <___svfprintf_internal_r+0x1414>
811034bc:	00ffdfc4 	movi	r3,-129
811034c0:	a584b03a 	or	r2,r20,r22
811034c4:	90e4703a 	and	r18,r18,r3
811034c8:	10014a26 	beq	r2,zero,811039f4 <___svfprintf_internal_r+0xaa0>
811034cc:	b0034b26 	beq	r22,zero,811041fc <___svfprintf_internal_r+0x12a8>
811034d0:	dc402a15 	stw	r17,168(sp)
811034d4:	dc001e04 	addi	r16,sp,120
811034d8:	b023883a 	mov	r17,r22
811034dc:	402d883a 	mov	r22,r8
811034e0:	a009883a 	mov	r4,r20
811034e4:	880b883a 	mov	r5,r17
811034e8:	01800284 	movi	r6,10
811034ec:	000f883a 	mov	r7,zero
811034f0:	110ff4c0 	call	8110ff4c <__umoddi3>
811034f4:	10800c04 	addi	r2,r2,48
811034f8:	843fffc4 	addi	r16,r16,-1
811034fc:	a009883a 	mov	r4,r20
81103500:	880b883a 	mov	r5,r17
81103504:	80800005 	stb	r2,0(r16)
81103508:	01800284 	movi	r6,10
8110350c:	000f883a 	mov	r7,zero
81103510:	110f9d40 	call	8110f9d4 <__udivdi3>
81103514:	1029883a 	mov	r20,r2
81103518:	10c4b03a 	or	r2,r2,r3
8110351c:	1823883a 	mov	r17,r3
81103520:	103fef1e 	bne	r2,zero,811034e0 <__reset+0xfb0e34e0>
81103524:	d8c02817 	ldw	r3,160(sp)
81103528:	dc402a17 	ldw	r17,168(sp)
8110352c:	b011883a 	mov	r8,r22
81103530:	1c07c83a 	sub	r3,r3,r16
81103534:	d8c02e15 	stw	r3,184(sp)
81103538:	00002e06 	br	811035f4 <___svfprintf_internal_r+0x6a0>
8110353c:	18c03fcc 	andi	r3,r3,255
81103540:	1806e71e 	bne	r3,zero,811050e0 <___svfprintf_internal_r+0x218c>
81103544:	94800414 	ori	r18,r18,16
81103548:	9080080c 	andi	r2,r18,32
8110354c:	1002d426 	beq	r2,zero,811040a0 <___svfprintf_internal_r+0x114c>
81103550:	d9402d17 	ldw	r5,180(sp)
81103554:	d8c02917 	ldw	r3,164(sp)
81103558:	d8002785 	stb	zero,158(sp)
8110355c:	28800204 	addi	r2,r5,8
81103560:	2d000017 	ldw	r20,0(r5)
81103564:	2d800117 	ldw	r22,4(r5)
81103568:	18041516 	blt	r3,zero,811045c0 <___svfprintf_internal_r+0x166c>
8110356c:	013fdfc4 	movi	r4,-129
81103570:	a586b03a 	or	r3,r20,r22
81103574:	d8802d15 	stw	r2,180(sp)
81103578:	9124703a 	and	r18,r18,r4
8110357c:	1802d51e 	bne	r3,zero,811040d4 <___svfprintf_internal_r+0x1180>
81103580:	d9402917 	ldw	r5,164(sp)
81103584:	0039883a 	mov	fp,zero
81103588:	2806be26 	beq	r5,zero,81105084 <___svfprintf_internal_r+0x2130>
8110358c:	0029883a 	mov	r20,zero
81103590:	002d883a 	mov	r22,zero
81103594:	dc001e04 	addi	r16,sp,120
81103598:	a006d0fa 	srli	r3,r20,3
8110359c:	b008977a 	slli	r4,r22,29
811035a0:	b02cd0fa 	srli	r22,r22,3
811035a4:	a50001cc 	andi	r20,r20,7
811035a8:	a0800c04 	addi	r2,r20,48
811035ac:	843fffc4 	addi	r16,r16,-1
811035b0:	20e8b03a 	or	r20,r4,r3
811035b4:	80800005 	stb	r2,0(r16)
811035b8:	a586b03a 	or	r3,r20,r22
811035bc:	183ff61e 	bne	r3,zero,81103598 <__reset+0xfb0e3598>
811035c0:	90c0004c 	andi	r3,r18,1
811035c4:	18013926 	beq	r3,zero,81103aac <___svfprintf_internal_r+0xb58>
811035c8:	10803fcc 	andi	r2,r2,255
811035cc:	1080201c 	xori	r2,r2,128
811035d0:	10bfe004 	addi	r2,r2,-128
811035d4:	00c00c04 	movi	r3,48
811035d8:	10c13426 	beq	r2,r3,81103aac <___svfprintf_internal_r+0xb58>
811035dc:	80ffffc5 	stb	r3,-1(r16)
811035e0:	d8c02817 	ldw	r3,160(sp)
811035e4:	80bfffc4 	addi	r2,r16,-1
811035e8:	1021883a 	mov	r16,r2
811035ec:	1887c83a 	sub	r3,r3,r2
811035f0:	d8c02e15 	stw	r3,184(sp)
811035f4:	d8802e17 	ldw	r2,184(sp)
811035f8:	d9002917 	ldw	r4,164(sp)
811035fc:	1100010e 	bge	r2,r4,81103604 <___svfprintf_internal_r+0x6b0>
81103600:	2005883a 	mov	r2,r4
81103604:	d8802a15 	stw	r2,168(sp)
81103608:	d8003215 	stw	zero,200(sp)
8110360c:	e7003fcc 	andi	fp,fp,255
81103610:	e700201c 	xori	fp,fp,128
81103614:	e73fe004 	addi	fp,fp,-128
81103618:	e0000326 	beq	fp,zero,81103628 <___svfprintf_internal_r+0x6d4>
8110361c:	d8c02a17 	ldw	r3,168(sp)
81103620:	18c00044 	addi	r3,r3,1
81103624:	d8c02a15 	stw	r3,168(sp)
81103628:	90c0008c 	andi	r3,r18,2
8110362c:	d8c02b15 	stw	r3,172(sp)
81103630:	18000326 	beq	r3,zero,81103640 <___svfprintf_internal_r+0x6ec>
81103634:	d8c02a17 	ldw	r3,168(sp)
81103638:	18c00084 	addi	r3,r3,2
8110363c:	d8c02a15 	stw	r3,168(sp)
81103640:	90c0210c 	andi	r3,r18,132
81103644:	d8c03015 	stw	r3,192(sp)
81103648:	1801a11e 	bne	r3,zero,81103cd0 <___svfprintf_internal_r+0xd7c>
8110364c:	d9003117 	ldw	r4,196(sp)
81103650:	d8c02a17 	ldw	r3,168(sp)
81103654:	20e9c83a 	sub	r20,r4,r3
81103658:	05019d0e 	bge	zero,r20,81103cd0 <___svfprintf_internal_r+0xd7c>
8110365c:	02400404 	movi	r9,16
81103660:	d8c02017 	ldw	r3,128(sp)
81103664:	d8801f17 	ldw	r2,124(sp)
81103668:	4d051b0e 	bge	r9,r20,81104ad8 <___svfprintf_internal_r+0x1b84>
8110366c:	016044b4 	movhi	r5,33042
81103670:	29660984 	addi	r5,r5,-26586
81103674:	dc403c15 	stw	r17,240(sp)
81103678:	d9403515 	stw	r5,212(sp)
8110367c:	a023883a 	mov	r17,r20
81103680:	482d883a 	mov	r22,r9
81103684:	9029883a 	mov	r20,r18
81103688:	070001c4 	movi	fp,7
8110368c:	8025883a 	mov	r18,r16
81103690:	dc002c17 	ldw	r16,176(sp)
81103694:	00000306 	br	811036a4 <___svfprintf_internal_r+0x750>
81103698:	8c7ffc04 	addi	r17,r17,-16
8110369c:	42000204 	addi	r8,r8,8
811036a0:	b440130e 	bge	r22,r17,811036f0 <___svfprintf_internal_r+0x79c>
811036a4:	012044b4 	movhi	r4,33042
811036a8:	18c00404 	addi	r3,r3,16
811036ac:	10800044 	addi	r2,r2,1
811036b0:	21260984 	addi	r4,r4,-26586
811036b4:	41000015 	stw	r4,0(r8)
811036b8:	45800115 	stw	r22,4(r8)
811036bc:	d8c02015 	stw	r3,128(sp)
811036c0:	d8801f15 	stw	r2,124(sp)
811036c4:	e0bff40e 	bge	fp,r2,81103698 <__reset+0xfb0e3698>
811036c8:	d9801e04 	addi	r6,sp,120
811036cc:	800b883a 	mov	r5,r16
811036d0:	9809883a 	mov	r4,r19
811036d4:	110c64c0 	call	8110c64c <__ssprint_r>
811036d8:	103f031e 	bne	r2,zero,811032e8 <__reset+0xfb0e32e8>
811036dc:	8c7ffc04 	addi	r17,r17,-16
811036e0:	d8c02017 	ldw	r3,128(sp)
811036e4:	d8801f17 	ldw	r2,124(sp)
811036e8:	da000404 	addi	r8,sp,16
811036ec:	b47fed16 	blt	r22,r17,811036a4 <__reset+0xfb0e36a4>
811036f0:	9021883a 	mov	r16,r18
811036f4:	a025883a 	mov	r18,r20
811036f8:	8829883a 	mov	r20,r17
811036fc:	dc403c17 	ldw	r17,240(sp)
81103700:	d9403517 	ldw	r5,212(sp)
81103704:	a0c7883a 	add	r3,r20,r3
81103708:	10800044 	addi	r2,r2,1
8110370c:	41400015 	stw	r5,0(r8)
81103710:	45000115 	stw	r20,4(r8)
81103714:	d8c02015 	stw	r3,128(sp)
81103718:	d8801f15 	stw	r2,124(sp)
8110371c:	010001c4 	movi	r4,7
81103720:	20829f16 	blt	r4,r2,811041a0 <___svfprintf_internal_r+0x124c>
81103724:	df002787 	ldb	fp,158(sp)
81103728:	42000204 	addi	r8,r8,8
8110372c:	e0000c26 	beq	fp,zero,81103760 <___svfprintf_internal_r+0x80c>
81103730:	d8801f17 	ldw	r2,124(sp)
81103734:	d9002784 	addi	r4,sp,158
81103738:	18c00044 	addi	r3,r3,1
8110373c:	10800044 	addi	r2,r2,1
81103740:	41000015 	stw	r4,0(r8)
81103744:	01000044 	movi	r4,1
81103748:	41000115 	stw	r4,4(r8)
8110374c:	d8c02015 	stw	r3,128(sp)
81103750:	d8801f15 	stw	r2,124(sp)
81103754:	010001c4 	movi	r4,7
81103758:	20823816 	blt	r4,r2,8110403c <___svfprintf_internal_r+0x10e8>
8110375c:	42000204 	addi	r8,r8,8
81103760:	d8802b17 	ldw	r2,172(sp)
81103764:	10000c26 	beq	r2,zero,81103798 <___svfprintf_internal_r+0x844>
81103768:	d8801f17 	ldw	r2,124(sp)
8110376c:	d9002704 	addi	r4,sp,156
81103770:	18c00084 	addi	r3,r3,2
81103774:	10800044 	addi	r2,r2,1
81103778:	41000015 	stw	r4,0(r8)
8110377c:	01000084 	movi	r4,2
81103780:	41000115 	stw	r4,4(r8)
81103784:	d8c02015 	stw	r3,128(sp)
81103788:	d8801f15 	stw	r2,124(sp)
8110378c:	010001c4 	movi	r4,7
81103790:	20823216 	blt	r4,r2,8110405c <___svfprintf_internal_r+0x1108>
81103794:	42000204 	addi	r8,r8,8
81103798:	d9003017 	ldw	r4,192(sp)
8110379c:	00802004 	movi	r2,128
811037a0:	20819726 	beq	r4,r2,81103e00 <___svfprintf_internal_r+0xeac>
811037a4:	d9402917 	ldw	r5,164(sp)
811037a8:	d8802e17 	ldw	r2,184(sp)
811037ac:	28adc83a 	sub	r22,r5,r2
811037b0:	05802f0e 	bge	zero,r22,81103870 <___svfprintf_internal_r+0x91c>
811037b4:	07000404 	movi	fp,16
811037b8:	d8801f17 	ldw	r2,124(sp)
811037bc:	e583c00e 	bge	fp,r22,811046c0 <___svfprintf_internal_r+0x176c>
811037c0:	016044b4 	movhi	r5,33042
811037c4:	29660584 	addi	r5,r5,-26602
811037c8:	dc402915 	stw	r17,164(sp)
811037cc:	d9402b15 	stw	r5,172(sp)
811037d0:	b023883a 	mov	r17,r22
811037d4:	050001c4 	movi	r20,7
811037d8:	902d883a 	mov	r22,r18
811037dc:	8025883a 	mov	r18,r16
811037e0:	dc002c17 	ldw	r16,176(sp)
811037e4:	00000306 	br	811037f4 <___svfprintf_internal_r+0x8a0>
811037e8:	8c7ffc04 	addi	r17,r17,-16
811037ec:	42000204 	addi	r8,r8,8
811037f0:	e440110e 	bge	fp,r17,81103838 <___svfprintf_internal_r+0x8e4>
811037f4:	18c00404 	addi	r3,r3,16
811037f8:	10800044 	addi	r2,r2,1
811037fc:	45400015 	stw	r21,0(r8)
81103800:	47000115 	stw	fp,4(r8)
81103804:	d8c02015 	stw	r3,128(sp)
81103808:	d8801f15 	stw	r2,124(sp)
8110380c:	a0bff60e 	bge	r20,r2,811037e8 <__reset+0xfb0e37e8>
81103810:	d9801e04 	addi	r6,sp,120
81103814:	800b883a 	mov	r5,r16
81103818:	9809883a 	mov	r4,r19
8110381c:	110c64c0 	call	8110c64c <__ssprint_r>
81103820:	103eb11e 	bne	r2,zero,811032e8 <__reset+0xfb0e32e8>
81103824:	8c7ffc04 	addi	r17,r17,-16
81103828:	d8c02017 	ldw	r3,128(sp)
8110382c:	d8801f17 	ldw	r2,124(sp)
81103830:	da000404 	addi	r8,sp,16
81103834:	e47fef16 	blt	fp,r17,811037f4 <__reset+0xfb0e37f4>
81103838:	9021883a 	mov	r16,r18
8110383c:	b025883a 	mov	r18,r22
81103840:	882d883a 	mov	r22,r17
81103844:	dc402917 	ldw	r17,164(sp)
81103848:	d9002b17 	ldw	r4,172(sp)
8110384c:	1d87883a 	add	r3,r3,r22
81103850:	10800044 	addi	r2,r2,1
81103854:	41000015 	stw	r4,0(r8)
81103858:	45800115 	stw	r22,4(r8)
8110385c:	d8c02015 	stw	r3,128(sp)
81103860:	d8801f15 	stw	r2,124(sp)
81103864:	010001c4 	movi	r4,7
81103868:	2081ec16 	blt	r4,r2,8110401c <___svfprintf_internal_r+0x10c8>
8110386c:	42000204 	addi	r8,r8,8
81103870:	9080400c 	andi	r2,r18,256
81103874:	1001181e 	bne	r2,zero,81103cd8 <___svfprintf_internal_r+0xd84>
81103878:	d9402e17 	ldw	r5,184(sp)
8110387c:	d8801f17 	ldw	r2,124(sp)
81103880:	44000015 	stw	r16,0(r8)
81103884:	1947883a 	add	r3,r3,r5
81103888:	10800044 	addi	r2,r2,1
8110388c:	41400115 	stw	r5,4(r8)
81103890:	d8c02015 	stw	r3,128(sp)
81103894:	d8801f15 	stw	r2,124(sp)
81103898:	010001c4 	movi	r4,7
8110389c:	2081d116 	blt	r4,r2,81103fe4 <___svfprintf_internal_r+0x1090>
811038a0:	42000204 	addi	r8,r8,8
811038a4:	9480010c 	andi	r18,r18,4
811038a8:	90003226 	beq	r18,zero,81103974 <___svfprintf_internal_r+0xa20>
811038ac:	d9403117 	ldw	r5,196(sp)
811038b0:	d8802a17 	ldw	r2,168(sp)
811038b4:	28a1c83a 	sub	r16,r5,r2
811038b8:	04002e0e 	bge	zero,r16,81103974 <___svfprintf_internal_r+0xa20>
811038bc:	04400404 	movi	r17,16
811038c0:	d8801f17 	ldw	r2,124(sp)
811038c4:	8c04b90e 	bge	r17,r16,81104bac <___svfprintf_internal_r+0x1c58>
811038c8:	016044b4 	movhi	r5,33042
811038cc:	29660984 	addi	r5,r5,-26586
811038d0:	d9403515 	stw	r5,212(sp)
811038d4:	048001c4 	movi	r18,7
811038d8:	dd002c17 	ldw	r20,176(sp)
811038dc:	00000306 	br	811038ec <___svfprintf_internal_r+0x998>
811038e0:	843ffc04 	addi	r16,r16,-16
811038e4:	42000204 	addi	r8,r8,8
811038e8:	8c00130e 	bge	r17,r16,81103938 <___svfprintf_internal_r+0x9e4>
811038ec:	012044b4 	movhi	r4,33042
811038f0:	18c00404 	addi	r3,r3,16
811038f4:	10800044 	addi	r2,r2,1
811038f8:	21260984 	addi	r4,r4,-26586
811038fc:	41000015 	stw	r4,0(r8)
81103900:	44400115 	stw	r17,4(r8)
81103904:	d8c02015 	stw	r3,128(sp)
81103908:	d8801f15 	stw	r2,124(sp)
8110390c:	90bff40e 	bge	r18,r2,811038e0 <__reset+0xfb0e38e0>
81103910:	d9801e04 	addi	r6,sp,120
81103914:	a00b883a 	mov	r5,r20
81103918:	9809883a 	mov	r4,r19
8110391c:	110c64c0 	call	8110c64c <__ssprint_r>
81103920:	103e711e 	bne	r2,zero,811032e8 <__reset+0xfb0e32e8>
81103924:	843ffc04 	addi	r16,r16,-16
81103928:	d8c02017 	ldw	r3,128(sp)
8110392c:	d8801f17 	ldw	r2,124(sp)
81103930:	da000404 	addi	r8,sp,16
81103934:	8c3fed16 	blt	r17,r16,811038ec <__reset+0xfb0e38ec>
81103938:	d9403517 	ldw	r5,212(sp)
8110393c:	1c07883a 	add	r3,r3,r16
81103940:	10800044 	addi	r2,r2,1
81103944:	41400015 	stw	r5,0(r8)
81103948:	44000115 	stw	r16,4(r8)
8110394c:	d8c02015 	stw	r3,128(sp)
81103950:	d8801f15 	stw	r2,124(sp)
81103954:	010001c4 	movi	r4,7
81103958:	2080060e 	bge	r4,r2,81103974 <___svfprintf_internal_r+0xa20>
8110395c:	d9402c17 	ldw	r5,176(sp)
81103960:	d9801e04 	addi	r6,sp,120
81103964:	9809883a 	mov	r4,r19
81103968:	110c64c0 	call	8110c64c <__ssprint_r>
8110396c:	103e5e1e 	bne	r2,zero,811032e8 <__reset+0xfb0e32e8>
81103970:	d8c02017 	ldw	r3,128(sp)
81103974:	d8803117 	ldw	r2,196(sp)
81103978:	d9002a17 	ldw	r4,168(sp)
8110397c:	1100010e 	bge	r2,r4,81103984 <___svfprintf_internal_r+0xa30>
81103980:	2005883a 	mov	r2,r4
81103984:	d9402f17 	ldw	r5,188(sp)
81103988:	288b883a 	add	r5,r5,r2
8110398c:	d9402f15 	stw	r5,188(sp)
81103990:	18019c1e 	bne	r3,zero,81104004 <___svfprintf_internal_r+0x10b0>
81103994:	b8800007 	ldb	r2,0(r23)
81103998:	d8001f15 	stw	zero,124(sp)
8110399c:	da000404 	addi	r8,sp,16
811039a0:	103d991e 	bne	r2,zero,81103008 <__reset+0xfb0e3008>
811039a4:	b821883a 	mov	r16,r23
811039a8:	003daf06 	br	81103068 <__reset+0xfb0e3068>
811039ac:	18c03fcc 	andi	r3,r3,255
811039b0:	1805c71e 	bne	r3,zero,811050d0 <___svfprintf_internal_r+0x217c>
811039b4:	94800414 	ori	r18,r18,16
811039b8:	9080080c 	andi	r2,r18,32
811039bc:	10020126 	beq	r2,zero,811041c4 <___svfprintf_internal_r+0x1270>
811039c0:	d8802d17 	ldw	r2,180(sp)
811039c4:	d9002917 	ldw	r4,164(sp)
811039c8:	d8002785 	stb	zero,158(sp)
811039cc:	10c00204 	addi	r3,r2,8
811039d0:	15000017 	ldw	r20,0(r2)
811039d4:	15800117 	ldw	r22,4(r2)
811039d8:	20038e16 	blt	r4,zero,81104814 <___svfprintf_internal_r+0x18c0>
811039dc:	013fdfc4 	movi	r4,-129
811039e0:	a584b03a 	or	r2,r20,r22
811039e4:	d8c02d15 	stw	r3,180(sp)
811039e8:	9124703a 	and	r18,r18,r4
811039ec:	0039883a 	mov	fp,zero
811039f0:	103eb61e 	bne	r2,zero,811034cc <__reset+0xfb0e34cc>
811039f4:	d8802917 	ldw	r2,164(sp)
811039f8:	1002c81e 	bne	r2,zero,8110451c <___svfprintf_internal_r+0x15c8>
811039fc:	d8002915 	stw	zero,164(sp)
81103a00:	d8002e15 	stw	zero,184(sp)
81103a04:	dc001e04 	addi	r16,sp,120
81103a08:	003efa06 	br	811035f4 <__reset+0xfb0e35f4>
81103a0c:	18c03fcc 	andi	r3,r3,255
81103a10:	1805ad1e 	bne	r3,zero,811050c8 <___svfprintf_internal_r+0x2174>
81103a14:	016044b4 	movhi	r5,33042
81103a18:	2965f904 	addi	r5,r5,-26652
81103a1c:	d9403a15 	stw	r5,232(sp)
81103a20:	9080080c 	andi	r2,r18,32
81103a24:	10006126 	beq	r2,zero,81103bac <___svfprintf_internal_r+0xc58>
81103a28:	d8802d17 	ldw	r2,180(sp)
81103a2c:	15000017 	ldw	r20,0(r2)
81103a30:	15800117 	ldw	r22,4(r2)
81103a34:	10800204 	addi	r2,r2,8
81103a38:	d8802d15 	stw	r2,180(sp)
81103a3c:	9080004c 	andi	r2,r18,1
81103a40:	10018e26 	beq	r2,zero,8110407c <___svfprintf_internal_r+0x1128>
81103a44:	a584b03a 	or	r2,r20,r22
81103a48:	10030926 	beq	r2,zero,81104670 <___svfprintf_internal_r+0x171c>
81103a4c:	d8c02917 	ldw	r3,164(sp)
81103a50:	00800c04 	movi	r2,48
81103a54:	d8802705 	stb	r2,156(sp)
81103a58:	dc402745 	stb	r17,157(sp)
81103a5c:	d8002785 	stb	zero,158(sp)
81103a60:	90800094 	ori	r2,r18,2
81103a64:	18048716 	blt	r3,zero,81104c84 <___svfprintf_internal_r+0x1d30>
81103a68:	00bfdfc4 	movi	r2,-129
81103a6c:	90a4703a 	and	r18,r18,r2
81103a70:	94800094 	ori	r18,r18,2
81103a74:	0039883a 	mov	fp,zero
81103a78:	d9003a17 	ldw	r4,232(sp)
81103a7c:	dc001e04 	addi	r16,sp,120
81103a80:	a08003cc 	andi	r2,r20,15
81103a84:	b006973a 	slli	r3,r22,28
81103a88:	2085883a 	add	r2,r4,r2
81103a8c:	a028d13a 	srli	r20,r20,4
81103a90:	10800003 	ldbu	r2,0(r2)
81103a94:	b02cd13a 	srli	r22,r22,4
81103a98:	843fffc4 	addi	r16,r16,-1
81103a9c:	1d28b03a 	or	r20,r3,r20
81103aa0:	80800005 	stb	r2,0(r16)
81103aa4:	a584b03a 	or	r2,r20,r22
81103aa8:	103ff51e 	bne	r2,zero,81103a80 <__reset+0xfb0e3a80>
81103aac:	d8c02817 	ldw	r3,160(sp)
81103ab0:	1c07c83a 	sub	r3,r3,r16
81103ab4:	d8c02e15 	stw	r3,184(sp)
81103ab8:	003ece06 	br	811035f4 <__reset+0xfb0e35f4>
81103abc:	d8c02d17 	ldw	r3,180(sp)
81103ac0:	d9002d17 	ldw	r4,180(sp)
81103ac4:	d8002785 	stb	zero,158(sp)
81103ac8:	18800017 	ldw	r2,0(r3)
81103acc:	21000104 	addi	r4,r4,4
81103ad0:	00c00044 	movi	r3,1
81103ad4:	d8c02a15 	stw	r3,168(sp)
81103ad8:	d8801405 	stb	r2,80(sp)
81103adc:	d9002d15 	stw	r4,180(sp)
81103ae0:	d8c02e15 	stw	r3,184(sp)
81103ae4:	d8002915 	stw	zero,164(sp)
81103ae8:	d8003215 	stw	zero,200(sp)
81103aec:	dc001404 	addi	r16,sp,80
81103af0:	0039883a 	mov	fp,zero
81103af4:	003ecc06 	br	81103628 <__reset+0xfb0e3628>
81103af8:	18c03fcc 	andi	r3,r3,255
81103afc:	183e9226 	beq	r3,zero,81103548 <__reset+0xfb0e3548>
81103b00:	d9c02785 	stb	r7,158(sp)
81103b04:	003e9006 	br	81103548 <__reset+0xfb0e3548>
81103b08:	00c00044 	movi	r3,1
81103b0c:	01c00ac4 	movi	r7,43
81103b10:	bc400007 	ldb	r17,0(r23)
81103b14:	003d6306 	br	811030a4 <__reset+0xfb0e30a4>
81103b18:	94800814 	ori	r18,r18,32
81103b1c:	bc400007 	ldb	r17,0(r23)
81103b20:	003d6006 	br	811030a4 <__reset+0xfb0e30a4>
81103b24:	d8c02d17 	ldw	r3,180(sp)
81103b28:	d8002785 	stb	zero,158(sp)
81103b2c:	1c000017 	ldw	r16,0(r3)
81103b30:	1d000104 	addi	r20,r3,4
81103b34:	80040f26 	beq	r16,zero,81104b74 <___svfprintf_internal_r+0x1c20>
81103b38:	d9002917 	ldw	r4,164(sp)
81103b3c:	2003dc16 	blt	r4,zero,81104ab0 <___svfprintf_internal_r+0x1b5c>
81103b40:	200d883a 	mov	r6,r4
81103b44:	000b883a 	mov	r5,zero
81103b48:	8009883a 	mov	r4,r16
81103b4c:	da003e15 	stw	r8,248(sp)
81103b50:	110a93c0 	call	8110a93c <memchr>
81103b54:	da003e17 	ldw	r8,248(sp)
81103b58:	10045826 	beq	r2,zero,81104cbc <___svfprintf_internal_r+0x1d68>
81103b5c:	1405c83a 	sub	r2,r2,r16
81103b60:	d8802e15 	stw	r2,184(sp)
81103b64:	1003d816 	blt	r2,zero,81104ac8 <___svfprintf_internal_r+0x1b74>
81103b68:	df002783 	ldbu	fp,158(sp)
81103b6c:	d8802a15 	stw	r2,168(sp)
81103b70:	dd002d15 	stw	r20,180(sp)
81103b74:	d8002915 	stw	zero,164(sp)
81103b78:	d8003215 	stw	zero,200(sp)
81103b7c:	003ea306 	br	8110360c <__reset+0xfb0e360c>
81103b80:	18c03fcc 	andi	r3,r3,255
81103b84:	183f8c26 	beq	r3,zero,811039b8 <__reset+0xfb0e39b8>
81103b88:	d9c02785 	stb	r7,158(sp)
81103b8c:	003f8a06 	br	811039b8 <__reset+0xfb0e39b8>
81103b90:	18c03fcc 	andi	r3,r3,255
81103b94:	1805631e 	bne	r3,zero,81105124 <___svfprintf_internal_r+0x21d0>
81103b98:	016044b4 	movhi	r5,33042
81103b9c:	2965fe04 	addi	r5,r5,-26632
81103ba0:	d9403a15 	stw	r5,232(sp)
81103ba4:	9080080c 	andi	r2,r18,32
81103ba8:	103f9f1e 	bne	r2,zero,81103a28 <__reset+0xfb0e3a28>
81103bac:	9080040c 	andi	r2,r18,16
81103bb0:	10029c26 	beq	r2,zero,81104624 <___svfprintf_internal_r+0x16d0>
81103bb4:	d8c02d17 	ldw	r3,180(sp)
81103bb8:	002d883a 	mov	r22,zero
81103bbc:	1d000017 	ldw	r20,0(r3)
81103bc0:	18c00104 	addi	r3,r3,4
81103bc4:	d8c02d15 	stw	r3,180(sp)
81103bc8:	003f9c06 	br	81103a3c <__reset+0xfb0e3a3c>
81103bcc:	94800054 	ori	r18,r18,1
81103bd0:	bc400007 	ldb	r17,0(r23)
81103bd4:	003d3306 	br	811030a4 <__reset+0xfb0e30a4>
81103bd8:	38803fcc 	andi	r2,r7,255
81103bdc:	1080201c 	xori	r2,r2,128
81103be0:	10bfe004 	addi	r2,r2,-128
81103be4:	1002971e 	bne	r2,zero,81104644 <___svfprintf_internal_r+0x16f0>
81103be8:	00c00044 	movi	r3,1
81103bec:	01c00804 	movi	r7,32
81103bf0:	bc400007 	ldb	r17,0(r23)
81103bf4:	003d2b06 	br	811030a4 <__reset+0xfb0e30a4>
81103bf8:	18c03fcc 	andi	r3,r3,255
81103bfc:	183e2326 	beq	r3,zero,8110348c <__reset+0xfb0e348c>
81103c00:	d9c02785 	stb	r7,158(sp)
81103c04:	003e2106 	br	8110348c <__reset+0xfb0e348c>
81103c08:	bc400007 	ldb	r17,0(r23)
81103c0c:	8a430426 	beq	r17,r9,81104820 <___svfprintf_internal_r+0x18cc>
81103c10:	94800414 	ori	r18,r18,16
81103c14:	003d2306 	br	811030a4 <__reset+0xfb0e30a4>
81103c18:	18c03fcc 	andi	r3,r3,255
81103c1c:	18053f1e 	bne	r3,zero,8110511c <___svfprintf_internal_r+0x21c8>
81103c20:	9080080c 	andi	r2,r18,32
81103c24:	10028926 	beq	r2,zero,8110464c <___svfprintf_internal_r+0x16f8>
81103c28:	d9402d17 	ldw	r5,180(sp)
81103c2c:	d9002f17 	ldw	r4,188(sp)
81103c30:	28800017 	ldw	r2,0(r5)
81103c34:	2007d7fa 	srai	r3,r4,31
81103c38:	29400104 	addi	r5,r5,4
81103c3c:	d9402d15 	stw	r5,180(sp)
81103c40:	11000015 	stw	r4,0(r2)
81103c44:	10c00115 	stw	r3,4(r2)
81103c48:	003ced06 	br	81103000 <__reset+0xfb0e3000>
81103c4c:	94801014 	ori	r18,r18,64
81103c50:	bc400007 	ldb	r17,0(r23)
81103c54:	003d1306 	br	811030a4 <__reset+0xfb0e30a4>
81103c58:	012044b4 	movhi	r4,33042
81103c5c:	2125fe04 	addi	r4,r4,-26632
81103c60:	0039883a 	mov	fp,zero
81103c64:	d9003a15 	stw	r4,232(sp)
81103c68:	04401e04 	movi	r17,120
81103c6c:	003f8206 	br	81103a78 <__reset+0xfb0e3a78>
81103c70:	18c03fcc 	andi	r3,r3,255
81103c74:	1805221e 	bne	r3,zero,81105100 <___svfprintf_internal_r+0x21ac>
81103c78:	883d9526 	beq	r17,zero,811032d0 <__reset+0xfb0e32d0>
81103c7c:	00c00044 	movi	r3,1
81103c80:	d8c02a15 	stw	r3,168(sp)
81103c84:	dc401405 	stb	r17,80(sp)
81103c88:	d8002785 	stb	zero,158(sp)
81103c8c:	003f9406 	br	81103ae0 <__reset+0xfb0e3ae0>
81103c90:	012044b4 	movhi	r4,33042
81103c94:	2125fe04 	addi	r4,r4,-26632
81103c98:	d9003a15 	stw	r4,232(sp)
81103c9c:	d8c02d15 	stw	r3,180(sp)
81103ca0:	1025883a 	mov	r18,r2
81103ca4:	04401e04 	movi	r17,120
81103ca8:	a584b03a 	or	r2,r20,r22
81103cac:	1000fa1e 	bne	r2,zero,81104098 <___svfprintf_internal_r+0x1144>
81103cb0:	0039883a 	mov	fp,zero
81103cb4:	00800084 	movi	r2,2
81103cb8:	10803fcc 	andi	r2,r2,255
81103cbc:	00c00044 	movi	r3,1
81103cc0:	10c21626 	beq	r2,r3,8110451c <___svfprintf_internal_r+0x15c8>
81103cc4:	00c00084 	movi	r3,2
81103cc8:	10fe301e 	bne	r2,r3,8110358c <__reset+0xfb0e358c>
81103ccc:	003d7606 	br	811032a8 <__reset+0xfb0e32a8>
81103cd0:	d8c02017 	ldw	r3,128(sp)
81103cd4:	003e9506 	br	8110372c <__reset+0xfb0e372c>
81103cd8:	00801944 	movi	r2,101
81103cdc:	14407c0e 	bge	r2,r17,81103ed0 <___svfprintf_internal_r+0xf7c>
81103ce0:	d9003617 	ldw	r4,216(sp)
81103ce4:	d9403717 	ldw	r5,220(sp)
81103ce8:	000d883a 	mov	r6,zero
81103cec:	000f883a 	mov	r7,zero
81103cf0:	d8c03d15 	stw	r3,244(sp)
81103cf4:	da003e15 	stw	r8,248(sp)
81103cf8:	11117cc0 	call	811117cc <__eqdf2>
81103cfc:	d8c03d17 	ldw	r3,244(sp)
81103d00:	da003e17 	ldw	r8,248(sp)
81103d04:	1000f51e 	bne	r2,zero,811040dc <___svfprintf_internal_r+0x1188>
81103d08:	d8801f17 	ldw	r2,124(sp)
81103d0c:	012044b4 	movhi	r4,33042
81103d10:	21260504 	addi	r4,r4,-26604
81103d14:	18c00044 	addi	r3,r3,1
81103d18:	10800044 	addi	r2,r2,1
81103d1c:	41000015 	stw	r4,0(r8)
81103d20:	01000044 	movi	r4,1
81103d24:	41000115 	stw	r4,4(r8)
81103d28:	d8c02015 	stw	r3,128(sp)
81103d2c:	d8801f15 	stw	r2,124(sp)
81103d30:	010001c4 	movi	r4,7
81103d34:	20826616 	blt	r4,r2,811046d0 <___svfprintf_internal_r+0x177c>
81103d38:	42000204 	addi	r8,r8,8
81103d3c:	d8802617 	ldw	r2,152(sp)
81103d40:	d9403317 	ldw	r5,204(sp)
81103d44:	11400216 	blt	r2,r5,81103d50 <___svfprintf_internal_r+0xdfc>
81103d48:	9080004c 	andi	r2,r18,1
81103d4c:	103ed526 	beq	r2,zero,811038a4 <__reset+0xfb0e38a4>
81103d50:	d8803817 	ldw	r2,224(sp)
81103d54:	d9003417 	ldw	r4,208(sp)
81103d58:	d9403817 	ldw	r5,224(sp)
81103d5c:	1887883a 	add	r3,r3,r2
81103d60:	d8801f17 	ldw	r2,124(sp)
81103d64:	41000015 	stw	r4,0(r8)
81103d68:	41400115 	stw	r5,4(r8)
81103d6c:	10800044 	addi	r2,r2,1
81103d70:	d8c02015 	stw	r3,128(sp)
81103d74:	d8801f15 	stw	r2,124(sp)
81103d78:	010001c4 	movi	r4,7
81103d7c:	2082af16 	blt	r4,r2,8110483c <___svfprintf_internal_r+0x18e8>
81103d80:	42000204 	addi	r8,r8,8
81103d84:	d8803317 	ldw	r2,204(sp)
81103d88:	143fffc4 	addi	r16,r2,-1
81103d8c:	043ec50e 	bge	zero,r16,811038a4 <__reset+0xfb0e38a4>
81103d90:	04400404 	movi	r17,16
81103d94:	d8801f17 	ldw	r2,124(sp)
81103d98:	8c00860e 	bge	r17,r16,81103fb4 <___svfprintf_internal_r+0x1060>
81103d9c:	016044b4 	movhi	r5,33042
81103da0:	29660584 	addi	r5,r5,-26602
81103da4:	d9402b15 	stw	r5,172(sp)
81103da8:	058001c4 	movi	r22,7
81103dac:	dd002c17 	ldw	r20,176(sp)
81103db0:	00000306 	br	81103dc0 <___svfprintf_internal_r+0xe6c>
81103db4:	42000204 	addi	r8,r8,8
81103db8:	843ffc04 	addi	r16,r16,-16
81103dbc:	8c00800e 	bge	r17,r16,81103fc0 <___svfprintf_internal_r+0x106c>
81103dc0:	18c00404 	addi	r3,r3,16
81103dc4:	10800044 	addi	r2,r2,1
81103dc8:	45400015 	stw	r21,0(r8)
81103dcc:	44400115 	stw	r17,4(r8)
81103dd0:	d8c02015 	stw	r3,128(sp)
81103dd4:	d8801f15 	stw	r2,124(sp)
81103dd8:	b0bff60e 	bge	r22,r2,81103db4 <__reset+0xfb0e3db4>
81103ddc:	d9801e04 	addi	r6,sp,120
81103de0:	a00b883a 	mov	r5,r20
81103de4:	9809883a 	mov	r4,r19
81103de8:	110c64c0 	call	8110c64c <__ssprint_r>
81103dec:	103d3e1e 	bne	r2,zero,811032e8 <__reset+0xfb0e32e8>
81103df0:	d8c02017 	ldw	r3,128(sp)
81103df4:	d8801f17 	ldw	r2,124(sp)
81103df8:	da000404 	addi	r8,sp,16
81103dfc:	003fee06 	br	81103db8 <__reset+0xfb0e3db8>
81103e00:	d9403117 	ldw	r5,196(sp)
81103e04:	d8802a17 	ldw	r2,168(sp)
81103e08:	28adc83a 	sub	r22,r5,r2
81103e0c:	05be650e 	bge	zero,r22,811037a4 <__reset+0xfb0e37a4>
81103e10:	07000404 	movi	fp,16
81103e14:	d8801f17 	ldw	r2,124(sp)
81103e18:	e583a20e 	bge	fp,r22,81104ca4 <___svfprintf_internal_r+0x1d50>
81103e1c:	016044b4 	movhi	r5,33042
81103e20:	29660584 	addi	r5,r5,-26602
81103e24:	dc403015 	stw	r17,192(sp)
81103e28:	d9402b15 	stw	r5,172(sp)
81103e2c:	b023883a 	mov	r17,r22
81103e30:	050001c4 	movi	r20,7
81103e34:	902d883a 	mov	r22,r18
81103e38:	8025883a 	mov	r18,r16
81103e3c:	dc002c17 	ldw	r16,176(sp)
81103e40:	00000306 	br	81103e50 <___svfprintf_internal_r+0xefc>
81103e44:	8c7ffc04 	addi	r17,r17,-16
81103e48:	42000204 	addi	r8,r8,8
81103e4c:	e440110e 	bge	fp,r17,81103e94 <___svfprintf_internal_r+0xf40>
81103e50:	18c00404 	addi	r3,r3,16
81103e54:	10800044 	addi	r2,r2,1
81103e58:	45400015 	stw	r21,0(r8)
81103e5c:	47000115 	stw	fp,4(r8)
81103e60:	d8c02015 	stw	r3,128(sp)
81103e64:	d8801f15 	stw	r2,124(sp)
81103e68:	a0bff60e 	bge	r20,r2,81103e44 <__reset+0xfb0e3e44>
81103e6c:	d9801e04 	addi	r6,sp,120
81103e70:	800b883a 	mov	r5,r16
81103e74:	9809883a 	mov	r4,r19
81103e78:	110c64c0 	call	8110c64c <__ssprint_r>
81103e7c:	103d1a1e 	bne	r2,zero,811032e8 <__reset+0xfb0e32e8>
81103e80:	8c7ffc04 	addi	r17,r17,-16
81103e84:	d8c02017 	ldw	r3,128(sp)
81103e88:	d8801f17 	ldw	r2,124(sp)
81103e8c:	da000404 	addi	r8,sp,16
81103e90:	e47fef16 	blt	fp,r17,81103e50 <__reset+0xfb0e3e50>
81103e94:	9021883a 	mov	r16,r18
81103e98:	b025883a 	mov	r18,r22
81103e9c:	882d883a 	mov	r22,r17
81103ea0:	dc403017 	ldw	r17,192(sp)
81103ea4:	d9002b17 	ldw	r4,172(sp)
81103ea8:	1d87883a 	add	r3,r3,r22
81103eac:	10800044 	addi	r2,r2,1
81103eb0:	41000015 	stw	r4,0(r8)
81103eb4:	45800115 	stw	r22,4(r8)
81103eb8:	d8c02015 	stw	r3,128(sp)
81103ebc:	d8801f15 	stw	r2,124(sp)
81103ec0:	010001c4 	movi	r4,7
81103ec4:	20819a16 	blt	r4,r2,81104530 <___svfprintf_internal_r+0x15dc>
81103ec8:	42000204 	addi	r8,r8,8
81103ecc:	003e3506 	br	811037a4 <__reset+0xfb0e37a4>
81103ed0:	d9403317 	ldw	r5,204(sp)
81103ed4:	00800044 	movi	r2,1
81103ed8:	18c00044 	addi	r3,r3,1
81103edc:	1141710e 	bge	r2,r5,811044a4 <___svfprintf_internal_r+0x1550>
81103ee0:	dc401f17 	ldw	r17,124(sp)
81103ee4:	00800044 	movi	r2,1
81103ee8:	40800115 	stw	r2,4(r8)
81103eec:	8c400044 	addi	r17,r17,1
81103ef0:	44000015 	stw	r16,0(r8)
81103ef4:	d8c02015 	stw	r3,128(sp)
81103ef8:	dc401f15 	stw	r17,124(sp)
81103efc:	008001c4 	movi	r2,7
81103f00:	14417416 	blt	r2,r17,811044d4 <___svfprintf_internal_r+0x1580>
81103f04:	42000204 	addi	r8,r8,8
81103f08:	d8803817 	ldw	r2,224(sp)
81103f0c:	d9003417 	ldw	r4,208(sp)
81103f10:	8c400044 	addi	r17,r17,1
81103f14:	10c7883a 	add	r3,r2,r3
81103f18:	40800115 	stw	r2,4(r8)
81103f1c:	41000015 	stw	r4,0(r8)
81103f20:	d8c02015 	stw	r3,128(sp)
81103f24:	dc401f15 	stw	r17,124(sp)
81103f28:	008001c4 	movi	r2,7
81103f2c:	14417216 	blt	r2,r17,811044f8 <___svfprintf_internal_r+0x15a4>
81103f30:	45800204 	addi	r22,r8,8
81103f34:	d9003617 	ldw	r4,216(sp)
81103f38:	d9403717 	ldw	r5,220(sp)
81103f3c:	000d883a 	mov	r6,zero
81103f40:	000f883a 	mov	r7,zero
81103f44:	d8c03d15 	stw	r3,244(sp)
81103f48:	11117cc0 	call	811117cc <__eqdf2>
81103f4c:	d8c03d17 	ldw	r3,244(sp)
81103f50:	1000b326 	beq	r2,zero,81104220 <___svfprintf_internal_r+0x12cc>
81103f54:	d9403317 	ldw	r5,204(sp)
81103f58:	84000044 	addi	r16,r16,1
81103f5c:	8c400044 	addi	r17,r17,1
81103f60:	28bfffc4 	addi	r2,r5,-1
81103f64:	1887883a 	add	r3,r3,r2
81103f68:	b0800115 	stw	r2,4(r22)
81103f6c:	b4000015 	stw	r16,0(r22)
81103f70:	d8c02015 	stw	r3,128(sp)
81103f74:	dc401f15 	stw	r17,124(sp)
81103f78:	008001c4 	movi	r2,7
81103f7c:	1440d216 	blt	r2,r17,811042c8 <___svfprintf_internal_r+0x1374>
81103f80:	b5800204 	addi	r22,r22,8
81103f84:	d9003b17 	ldw	r4,236(sp)
81103f88:	df0022c4 	addi	fp,sp,139
81103f8c:	8c400044 	addi	r17,r17,1
81103f90:	20c7883a 	add	r3,r4,r3
81103f94:	b7000015 	stw	fp,0(r22)
81103f98:	b1000115 	stw	r4,4(r22)
81103f9c:	d8c02015 	stw	r3,128(sp)
81103fa0:	dc401f15 	stw	r17,124(sp)
81103fa4:	008001c4 	movi	r2,7
81103fa8:	14400e16 	blt	r2,r17,81103fe4 <___svfprintf_internal_r+0x1090>
81103fac:	b2000204 	addi	r8,r22,8
81103fb0:	003e3c06 	br	811038a4 <__reset+0xfb0e38a4>
81103fb4:	012044b4 	movhi	r4,33042
81103fb8:	21260584 	addi	r4,r4,-26602
81103fbc:	d9002b15 	stw	r4,172(sp)
81103fc0:	d9002b17 	ldw	r4,172(sp)
81103fc4:	1c07883a 	add	r3,r3,r16
81103fc8:	44000115 	stw	r16,4(r8)
81103fcc:	41000015 	stw	r4,0(r8)
81103fd0:	10800044 	addi	r2,r2,1
81103fd4:	d8c02015 	stw	r3,128(sp)
81103fd8:	d8801f15 	stw	r2,124(sp)
81103fdc:	010001c4 	movi	r4,7
81103fe0:	20be2f0e 	bge	r4,r2,811038a0 <__reset+0xfb0e38a0>
81103fe4:	d9402c17 	ldw	r5,176(sp)
81103fe8:	d9801e04 	addi	r6,sp,120
81103fec:	9809883a 	mov	r4,r19
81103ff0:	110c64c0 	call	8110c64c <__ssprint_r>
81103ff4:	103cbc1e 	bne	r2,zero,811032e8 <__reset+0xfb0e32e8>
81103ff8:	d8c02017 	ldw	r3,128(sp)
81103ffc:	da000404 	addi	r8,sp,16
81104000:	003e2806 	br	811038a4 <__reset+0xfb0e38a4>
81104004:	d9402c17 	ldw	r5,176(sp)
81104008:	d9801e04 	addi	r6,sp,120
8110400c:	9809883a 	mov	r4,r19
81104010:	110c64c0 	call	8110c64c <__ssprint_r>
81104014:	103e5f26 	beq	r2,zero,81103994 <__reset+0xfb0e3994>
81104018:	003cb306 	br	811032e8 <__reset+0xfb0e32e8>
8110401c:	d9402c17 	ldw	r5,176(sp)
81104020:	d9801e04 	addi	r6,sp,120
81104024:	9809883a 	mov	r4,r19
81104028:	110c64c0 	call	8110c64c <__ssprint_r>
8110402c:	103cae1e 	bne	r2,zero,811032e8 <__reset+0xfb0e32e8>
81104030:	d8c02017 	ldw	r3,128(sp)
81104034:	da000404 	addi	r8,sp,16
81104038:	003e0d06 	br	81103870 <__reset+0xfb0e3870>
8110403c:	d9402c17 	ldw	r5,176(sp)
81104040:	d9801e04 	addi	r6,sp,120
81104044:	9809883a 	mov	r4,r19
81104048:	110c64c0 	call	8110c64c <__ssprint_r>
8110404c:	103ca61e 	bne	r2,zero,811032e8 <__reset+0xfb0e32e8>
81104050:	d8c02017 	ldw	r3,128(sp)
81104054:	da000404 	addi	r8,sp,16
81104058:	003dc106 	br	81103760 <__reset+0xfb0e3760>
8110405c:	d9402c17 	ldw	r5,176(sp)
81104060:	d9801e04 	addi	r6,sp,120
81104064:	9809883a 	mov	r4,r19
81104068:	110c64c0 	call	8110c64c <__ssprint_r>
8110406c:	103c9e1e 	bne	r2,zero,811032e8 <__reset+0xfb0e32e8>
81104070:	d8c02017 	ldw	r3,128(sp)
81104074:	da000404 	addi	r8,sp,16
81104078:	003dc706 	br	81103798 <__reset+0xfb0e3798>
8110407c:	d8802917 	ldw	r2,164(sp)
81104080:	d8002785 	stb	zero,158(sp)
81104084:	103f0816 	blt	r2,zero,81103ca8 <__reset+0xfb0e3ca8>
81104088:	00ffdfc4 	movi	r3,-129
8110408c:	a584b03a 	or	r2,r20,r22
81104090:	90e4703a 	and	r18,r18,r3
81104094:	103c8126 	beq	r2,zero,8110329c <__reset+0xfb0e329c>
81104098:	0039883a 	mov	fp,zero
8110409c:	003e7606 	br	81103a78 <__reset+0xfb0e3a78>
811040a0:	9080040c 	andi	r2,r18,16
811040a4:	10013d26 	beq	r2,zero,8110459c <___svfprintf_internal_r+0x1648>
811040a8:	d9002d17 	ldw	r4,180(sp)
811040ac:	d9402917 	ldw	r5,164(sp)
811040b0:	d8002785 	stb	zero,158(sp)
811040b4:	20800104 	addi	r2,r4,4
811040b8:	25000017 	ldw	r20,0(r4)
811040bc:	002d883a 	mov	r22,zero
811040c0:	28013f16 	blt	r5,zero,811045c0 <___svfprintf_internal_r+0x166c>
811040c4:	00ffdfc4 	movi	r3,-129
811040c8:	d8802d15 	stw	r2,180(sp)
811040cc:	90e4703a 	and	r18,r18,r3
811040d0:	a03d2b26 	beq	r20,zero,81103580 <__reset+0xfb0e3580>
811040d4:	0039883a 	mov	fp,zero
811040d8:	003d2e06 	br	81103594 <__reset+0xfb0e3594>
811040dc:	dc402617 	ldw	r17,152(sp)
811040e0:	0441830e 	bge	zero,r17,811046f0 <___svfprintf_internal_r+0x179c>
811040e4:	dc403217 	ldw	r17,200(sp)
811040e8:	d8803317 	ldw	r2,204(sp)
811040ec:	1440010e 	bge	r2,r17,811040f4 <___svfprintf_internal_r+0x11a0>
811040f0:	1023883a 	mov	r17,r2
811040f4:	04400a0e 	bge	zero,r17,81104120 <___svfprintf_internal_r+0x11cc>
811040f8:	d8801f17 	ldw	r2,124(sp)
811040fc:	1c47883a 	add	r3,r3,r17
81104100:	44000015 	stw	r16,0(r8)
81104104:	10800044 	addi	r2,r2,1
81104108:	44400115 	stw	r17,4(r8)
8110410c:	d8c02015 	stw	r3,128(sp)
81104110:	d8801f15 	stw	r2,124(sp)
81104114:	010001c4 	movi	r4,7
81104118:	20827516 	blt	r4,r2,81104af0 <___svfprintf_internal_r+0x1b9c>
8110411c:	42000204 	addi	r8,r8,8
81104120:	88027b16 	blt	r17,zero,81104b10 <___svfprintf_internal_r+0x1bbc>
81104124:	d9003217 	ldw	r4,200(sp)
81104128:	2463c83a 	sub	r17,r4,r17
8110412c:	0440990e 	bge	zero,r17,81104394 <___svfprintf_internal_r+0x1440>
81104130:	05800404 	movi	r22,16
81104134:	d8801f17 	ldw	r2,124(sp)
81104138:	b441530e 	bge	r22,r17,81104688 <___svfprintf_internal_r+0x1734>
8110413c:	012044b4 	movhi	r4,33042
81104140:	21260584 	addi	r4,r4,-26602
81104144:	d9002b15 	stw	r4,172(sp)
81104148:	070001c4 	movi	fp,7
8110414c:	dd002c17 	ldw	r20,176(sp)
81104150:	00000306 	br	81104160 <___svfprintf_internal_r+0x120c>
81104154:	42000204 	addi	r8,r8,8
81104158:	8c7ffc04 	addi	r17,r17,-16
8110415c:	b4414d0e 	bge	r22,r17,81104694 <___svfprintf_internal_r+0x1740>
81104160:	18c00404 	addi	r3,r3,16
81104164:	10800044 	addi	r2,r2,1
81104168:	45400015 	stw	r21,0(r8)
8110416c:	45800115 	stw	r22,4(r8)
81104170:	d8c02015 	stw	r3,128(sp)
81104174:	d8801f15 	stw	r2,124(sp)
81104178:	e0bff60e 	bge	fp,r2,81104154 <__reset+0xfb0e4154>
8110417c:	d9801e04 	addi	r6,sp,120
81104180:	a00b883a 	mov	r5,r20
81104184:	9809883a 	mov	r4,r19
81104188:	110c64c0 	call	8110c64c <__ssprint_r>
8110418c:	103c561e 	bne	r2,zero,811032e8 <__reset+0xfb0e32e8>
81104190:	d8c02017 	ldw	r3,128(sp)
81104194:	d8801f17 	ldw	r2,124(sp)
81104198:	da000404 	addi	r8,sp,16
8110419c:	003fee06 	br	81104158 <__reset+0xfb0e4158>
811041a0:	d9402c17 	ldw	r5,176(sp)
811041a4:	d9801e04 	addi	r6,sp,120
811041a8:	9809883a 	mov	r4,r19
811041ac:	110c64c0 	call	8110c64c <__ssprint_r>
811041b0:	103c4d1e 	bne	r2,zero,811032e8 <__reset+0xfb0e32e8>
811041b4:	d8c02017 	ldw	r3,128(sp)
811041b8:	df002787 	ldb	fp,158(sp)
811041bc:	da000404 	addi	r8,sp,16
811041c0:	003d5a06 	br	8110372c <__reset+0xfb0e372c>
811041c4:	9080040c 	andi	r2,r18,16
811041c8:	10005c26 	beq	r2,zero,8110433c <___svfprintf_internal_r+0x13e8>
811041cc:	d9402d17 	ldw	r5,180(sp)
811041d0:	d8c02917 	ldw	r3,164(sp)
811041d4:	d8002785 	stb	zero,158(sp)
811041d8:	28800104 	addi	r2,r5,4
811041dc:	2d000017 	ldw	r20,0(r5)
811041e0:	002d883a 	mov	r22,zero
811041e4:	18005e16 	blt	r3,zero,81104360 <___svfprintf_internal_r+0x140c>
811041e8:	00ffdfc4 	movi	r3,-129
811041ec:	d8802d15 	stw	r2,180(sp)
811041f0:	90e4703a 	and	r18,r18,r3
811041f4:	0039883a 	mov	fp,zero
811041f8:	a03dfe26 	beq	r20,zero,811039f4 <__reset+0xfb0e39f4>
811041fc:	00800244 	movi	r2,9
81104200:	153cb336 	bltu	r2,r20,811034d0 <__reset+0xfb0e34d0>
81104204:	a5000c04 	addi	r20,r20,48
81104208:	dc001dc4 	addi	r16,sp,119
8110420c:	dd001dc5 	stb	r20,119(sp)
81104210:	d8c02817 	ldw	r3,160(sp)
81104214:	1c07c83a 	sub	r3,r3,r16
81104218:	d8c02e15 	stw	r3,184(sp)
8110421c:	003cf506 	br	811035f4 <__reset+0xfb0e35f4>
81104220:	d8803317 	ldw	r2,204(sp)
81104224:	143fffc4 	addi	r16,r2,-1
81104228:	043f560e 	bge	zero,r16,81103f84 <__reset+0xfb0e3f84>
8110422c:	07000404 	movi	fp,16
81104230:	e403530e 	bge	fp,r16,81104f80 <___svfprintf_internal_r+0x202c>
81104234:	016044b4 	movhi	r5,33042
81104238:	29660584 	addi	r5,r5,-26602
8110423c:	d9402b15 	stw	r5,172(sp)
81104240:	01c001c4 	movi	r7,7
81104244:	dd002c17 	ldw	r20,176(sp)
81104248:	00000306 	br	81104258 <___svfprintf_internal_r+0x1304>
8110424c:	843ffc04 	addi	r16,r16,-16
81104250:	b5800204 	addi	r22,r22,8
81104254:	e400130e 	bge	fp,r16,811042a4 <___svfprintf_internal_r+0x1350>
81104258:	18c00404 	addi	r3,r3,16
8110425c:	8c400044 	addi	r17,r17,1
81104260:	b5400015 	stw	r21,0(r22)
81104264:	b7000115 	stw	fp,4(r22)
81104268:	d8c02015 	stw	r3,128(sp)
8110426c:	dc401f15 	stw	r17,124(sp)
81104270:	3c7ff60e 	bge	r7,r17,8110424c <__reset+0xfb0e424c>
81104274:	d9801e04 	addi	r6,sp,120
81104278:	a00b883a 	mov	r5,r20
8110427c:	9809883a 	mov	r4,r19
81104280:	d9c03d15 	stw	r7,244(sp)
81104284:	110c64c0 	call	8110c64c <__ssprint_r>
81104288:	d9c03d17 	ldw	r7,244(sp)
8110428c:	103c161e 	bne	r2,zero,811032e8 <__reset+0xfb0e32e8>
81104290:	843ffc04 	addi	r16,r16,-16
81104294:	d8c02017 	ldw	r3,128(sp)
81104298:	dc401f17 	ldw	r17,124(sp)
8110429c:	dd800404 	addi	r22,sp,16
811042a0:	e43fed16 	blt	fp,r16,81104258 <__reset+0xfb0e4258>
811042a4:	d8802b17 	ldw	r2,172(sp)
811042a8:	1c07883a 	add	r3,r3,r16
811042ac:	8c400044 	addi	r17,r17,1
811042b0:	b0800015 	stw	r2,0(r22)
811042b4:	b4000115 	stw	r16,4(r22)
811042b8:	d8c02015 	stw	r3,128(sp)
811042bc:	dc401f15 	stw	r17,124(sp)
811042c0:	008001c4 	movi	r2,7
811042c4:	147f2e0e 	bge	r2,r17,81103f80 <__reset+0xfb0e3f80>
811042c8:	d9402c17 	ldw	r5,176(sp)
811042cc:	d9801e04 	addi	r6,sp,120
811042d0:	9809883a 	mov	r4,r19
811042d4:	110c64c0 	call	8110c64c <__ssprint_r>
811042d8:	103c031e 	bne	r2,zero,811032e8 <__reset+0xfb0e32e8>
811042dc:	d8c02017 	ldw	r3,128(sp)
811042e0:	dc401f17 	ldw	r17,124(sp)
811042e4:	dd800404 	addi	r22,sp,16
811042e8:	003f2606 	br	81103f84 <__reset+0xfb0e3f84>
811042ec:	9080040c 	andi	r2,r18,16
811042f0:	1000c326 	beq	r2,zero,81104600 <___svfprintf_internal_r+0x16ac>
811042f4:	d8802d17 	ldw	r2,180(sp)
811042f8:	15000017 	ldw	r20,0(r2)
811042fc:	10800104 	addi	r2,r2,4
81104300:	d8802d15 	stw	r2,180(sp)
81104304:	a02dd7fa 	srai	r22,r20,31
81104308:	b005883a 	mov	r2,r22
8110430c:	103c680e 	bge	r2,zero,811034b0 <__reset+0xfb0e34b0>
81104310:	0529c83a 	sub	r20,zero,r20
81104314:	a004c03a 	cmpne	r2,r20,zero
81104318:	05adc83a 	sub	r22,zero,r22
8110431c:	b0adc83a 	sub	r22,r22,r2
81104320:	d8802917 	ldw	r2,164(sp)
81104324:	07000b44 	movi	fp,45
81104328:	df002785 	stb	fp,158(sp)
8110432c:	10022e16 	blt	r2,zero,81104be8 <___svfprintf_internal_r+0x1c94>
81104330:	00bfdfc4 	movi	r2,-129
81104334:	90a4703a 	and	r18,r18,r2
81104338:	003c6406 	br	811034cc <__reset+0xfb0e34cc>
8110433c:	9080100c 	andi	r2,r18,64
81104340:	d8002785 	stb	zero,158(sp)
81104344:	10012526 	beq	r2,zero,811047dc <___svfprintf_internal_r+0x1888>
81104348:	d9002d17 	ldw	r4,180(sp)
8110434c:	d9402917 	ldw	r5,164(sp)
81104350:	002d883a 	mov	r22,zero
81104354:	20800104 	addi	r2,r4,4
81104358:	2500000b 	ldhu	r20,0(r4)
8110435c:	283fa20e 	bge	r5,zero,811041e8 <__reset+0xfb0e41e8>
81104360:	d8802d15 	stw	r2,180(sp)
81104364:	0039883a 	mov	fp,zero
81104368:	a584b03a 	or	r2,r20,r22
8110436c:	103c571e 	bne	r2,zero,811034cc <__reset+0xfb0e34cc>
81104370:	00800044 	movi	r2,1
81104374:	003e5006 	br	81103cb8 <__reset+0xfb0e3cb8>
81104378:	d9402c17 	ldw	r5,176(sp)
8110437c:	d9801e04 	addi	r6,sp,120
81104380:	9809883a 	mov	r4,r19
81104384:	110c64c0 	call	8110c64c <__ssprint_r>
81104388:	103bd71e 	bne	r2,zero,811032e8 <__reset+0xfb0e32e8>
8110438c:	d8c02017 	ldw	r3,128(sp)
81104390:	da000404 	addi	r8,sp,16
81104394:	d9003217 	ldw	r4,200(sp)
81104398:	d8802617 	ldw	r2,152(sp)
8110439c:	d9403317 	ldw	r5,204(sp)
811043a0:	8123883a 	add	r17,r16,r4
811043a4:	11400216 	blt	r2,r5,811043b0 <___svfprintf_internal_r+0x145c>
811043a8:	9100004c 	andi	r4,r18,1
811043ac:	20000d26 	beq	r4,zero,811043e4 <___svfprintf_internal_r+0x1490>
811043b0:	d9003817 	ldw	r4,224(sp)
811043b4:	d9403417 	ldw	r5,208(sp)
811043b8:	1907883a 	add	r3,r3,r4
811043bc:	d9001f17 	ldw	r4,124(sp)
811043c0:	41400015 	stw	r5,0(r8)
811043c4:	d9403817 	ldw	r5,224(sp)
811043c8:	21000044 	addi	r4,r4,1
811043cc:	d8c02015 	stw	r3,128(sp)
811043d0:	41400115 	stw	r5,4(r8)
811043d4:	d9001f15 	stw	r4,124(sp)
811043d8:	014001c4 	movi	r5,7
811043dc:	2901dc16 	blt	r5,r4,81104b50 <___svfprintf_internal_r+0x1bfc>
811043e0:	42000204 	addi	r8,r8,8
811043e4:	d9003317 	ldw	r4,204(sp)
811043e8:	8121883a 	add	r16,r16,r4
811043ec:	2085c83a 	sub	r2,r4,r2
811043f0:	8461c83a 	sub	r16,r16,r17
811043f4:	1400010e 	bge	r2,r16,811043fc <___svfprintf_internal_r+0x14a8>
811043f8:	1021883a 	mov	r16,r2
811043fc:	04000a0e 	bge	zero,r16,81104428 <___svfprintf_internal_r+0x14d4>
81104400:	d9001f17 	ldw	r4,124(sp)
81104404:	1c07883a 	add	r3,r3,r16
81104408:	44400015 	stw	r17,0(r8)
8110440c:	21000044 	addi	r4,r4,1
81104410:	44000115 	stw	r16,4(r8)
81104414:	d8c02015 	stw	r3,128(sp)
81104418:	d9001f15 	stw	r4,124(sp)
8110441c:	014001c4 	movi	r5,7
81104420:	2901e616 	blt	r5,r4,81104bbc <___svfprintf_internal_r+0x1c68>
81104424:	42000204 	addi	r8,r8,8
81104428:	8001f616 	blt	r16,zero,81104c04 <___svfprintf_internal_r+0x1cb0>
8110442c:	1421c83a 	sub	r16,r2,r16
81104430:	043d1c0e 	bge	zero,r16,811038a4 <__reset+0xfb0e38a4>
81104434:	04400404 	movi	r17,16
81104438:	d8801f17 	ldw	r2,124(sp)
8110443c:	8c3edd0e 	bge	r17,r16,81103fb4 <__reset+0xfb0e3fb4>
81104440:	016044b4 	movhi	r5,33042
81104444:	29660584 	addi	r5,r5,-26602
81104448:	d9402b15 	stw	r5,172(sp)
8110444c:	058001c4 	movi	r22,7
81104450:	dd002c17 	ldw	r20,176(sp)
81104454:	00000306 	br	81104464 <___svfprintf_internal_r+0x1510>
81104458:	42000204 	addi	r8,r8,8
8110445c:	843ffc04 	addi	r16,r16,-16
81104460:	8c3ed70e 	bge	r17,r16,81103fc0 <__reset+0xfb0e3fc0>
81104464:	18c00404 	addi	r3,r3,16
81104468:	10800044 	addi	r2,r2,1
8110446c:	45400015 	stw	r21,0(r8)
81104470:	44400115 	stw	r17,4(r8)
81104474:	d8c02015 	stw	r3,128(sp)
81104478:	d8801f15 	stw	r2,124(sp)
8110447c:	b0bff60e 	bge	r22,r2,81104458 <__reset+0xfb0e4458>
81104480:	d9801e04 	addi	r6,sp,120
81104484:	a00b883a 	mov	r5,r20
81104488:	9809883a 	mov	r4,r19
8110448c:	110c64c0 	call	8110c64c <__ssprint_r>
81104490:	103b951e 	bne	r2,zero,811032e8 <__reset+0xfb0e32e8>
81104494:	d8c02017 	ldw	r3,128(sp)
81104498:	d8801f17 	ldw	r2,124(sp)
8110449c:	da000404 	addi	r8,sp,16
811044a0:	003fee06 	br	8110445c <__reset+0xfb0e445c>
811044a4:	9088703a 	and	r4,r18,r2
811044a8:	203e8d1e 	bne	r4,zero,81103ee0 <__reset+0xfb0e3ee0>
811044ac:	dc401f17 	ldw	r17,124(sp)
811044b0:	40800115 	stw	r2,4(r8)
811044b4:	44000015 	stw	r16,0(r8)
811044b8:	8c400044 	addi	r17,r17,1
811044bc:	d8c02015 	stw	r3,128(sp)
811044c0:	dc401f15 	stw	r17,124(sp)
811044c4:	008001c4 	movi	r2,7
811044c8:	147f7f16 	blt	r2,r17,811042c8 <__reset+0xfb0e42c8>
811044cc:	45800204 	addi	r22,r8,8
811044d0:	003eac06 	br	81103f84 <__reset+0xfb0e3f84>
811044d4:	d9402c17 	ldw	r5,176(sp)
811044d8:	d9801e04 	addi	r6,sp,120
811044dc:	9809883a 	mov	r4,r19
811044e0:	110c64c0 	call	8110c64c <__ssprint_r>
811044e4:	103b801e 	bne	r2,zero,811032e8 <__reset+0xfb0e32e8>
811044e8:	d8c02017 	ldw	r3,128(sp)
811044ec:	dc401f17 	ldw	r17,124(sp)
811044f0:	da000404 	addi	r8,sp,16
811044f4:	003e8406 	br	81103f08 <__reset+0xfb0e3f08>
811044f8:	d9402c17 	ldw	r5,176(sp)
811044fc:	d9801e04 	addi	r6,sp,120
81104500:	9809883a 	mov	r4,r19
81104504:	110c64c0 	call	8110c64c <__ssprint_r>
81104508:	103b771e 	bne	r2,zero,811032e8 <__reset+0xfb0e32e8>
8110450c:	d8c02017 	ldw	r3,128(sp)
81104510:	dc401f17 	ldw	r17,124(sp)
81104514:	dd800404 	addi	r22,sp,16
81104518:	003e8606 	br	81103f34 <__reset+0xfb0e3f34>
8110451c:	0029883a 	mov	r20,zero
81104520:	a5000c04 	addi	r20,r20,48
81104524:	dc001dc4 	addi	r16,sp,119
81104528:	dd001dc5 	stb	r20,119(sp)
8110452c:	003f3806 	br	81104210 <__reset+0xfb0e4210>
81104530:	d9402c17 	ldw	r5,176(sp)
81104534:	d9801e04 	addi	r6,sp,120
81104538:	9809883a 	mov	r4,r19
8110453c:	110c64c0 	call	8110c64c <__ssprint_r>
81104540:	103b691e 	bne	r2,zero,811032e8 <__reset+0xfb0e32e8>
81104544:	d8c02017 	ldw	r3,128(sp)
81104548:	da000404 	addi	r8,sp,16
8110454c:	003c9506 	br	811037a4 <__reset+0xfb0e37a4>
81104550:	d9003617 	ldw	r4,216(sp)
81104554:	d9403717 	ldw	r5,220(sp)
81104558:	da003e15 	stw	r8,248(sp)
8110455c:	110c36c0 	call	8110c36c <__fpclassifyd>
81104560:	da003e17 	ldw	r8,248(sp)
81104564:	1000bd1e 	bne	r2,zero,8110485c <___svfprintf_internal_r+0x1908>
81104568:	008011c4 	movi	r2,71
8110456c:	14411e0e 	bge	r2,r17,811049e8 <___svfprintf_internal_r+0x1a94>
81104570:	042044b4 	movhi	r16,33042
81104574:	8425f804 	addi	r16,r16,-26656
81104578:	00c000c4 	movi	r3,3
8110457c:	00bfdfc4 	movi	r2,-129
81104580:	d8c02a15 	stw	r3,168(sp)
81104584:	90a4703a 	and	r18,r18,r2
81104588:	df002783 	ldbu	fp,158(sp)
8110458c:	d8c02e15 	stw	r3,184(sp)
81104590:	d8002915 	stw	zero,164(sp)
81104594:	d8003215 	stw	zero,200(sp)
81104598:	003c1c06 	br	8110360c <__reset+0xfb0e360c>
8110459c:	9080100c 	andi	r2,r18,64
811045a0:	d8002785 	stb	zero,158(sp)
811045a4:	10009426 	beq	r2,zero,811047f8 <___svfprintf_internal_r+0x18a4>
811045a8:	d8c02d17 	ldw	r3,180(sp)
811045ac:	d9002917 	ldw	r4,164(sp)
811045b0:	002d883a 	mov	r22,zero
811045b4:	18800104 	addi	r2,r3,4
811045b8:	1d00000b 	ldhu	r20,0(r3)
811045bc:	203ec10e 	bge	r4,zero,811040c4 <__reset+0xfb0e40c4>
811045c0:	a586b03a 	or	r3,r20,r22
811045c4:	d8802d15 	stw	r2,180(sp)
811045c8:	183ec21e 	bne	r3,zero,811040d4 <__reset+0xfb0e40d4>
811045cc:	0039883a 	mov	fp,zero
811045d0:	0005883a 	mov	r2,zero
811045d4:	003db806 	br	81103cb8 <__reset+0xfb0e3cb8>
811045d8:	d8802d17 	ldw	r2,180(sp)
811045dc:	d8c02d17 	ldw	r3,180(sp)
811045e0:	d9002d17 	ldw	r4,180(sp)
811045e4:	10800017 	ldw	r2,0(r2)
811045e8:	18c00117 	ldw	r3,4(r3)
811045ec:	21000204 	addi	r4,r4,8
811045f0:	d8803615 	stw	r2,216(sp)
811045f4:	d8c03715 	stw	r3,220(sp)
811045f8:	d9002d15 	stw	r4,180(sp)
811045fc:	003b8206 	br	81103408 <__reset+0xfb0e3408>
81104600:	9080100c 	andi	r2,r18,64
81104604:	10010726 	beq	r2,zero,81104a24 <___svfprintf_internal_r+0x1ad0>
81104608:	d8c02d17 	ldw	r3,180(sp)
8110460c:	1d00000f 	ldh	r20,0(r3)
81104610:	18c00104 	addi	r3,r3,4
81104614:	d8c02d15 	stw	r3,180(sp)
81104618:	a02dd7fa 	srai	r22,r20,31
8110461c:	b005883a 	mov	r2,r22
81104620:	003ba206 	br	811034ac <__reset+0xfb0e34ac>
81104624:	9080100c 	andi	r2,r18,64
81104628:	10010526 	beq	r2,zero,81104a40 <___svfprintf_internal_r+0x1aec>
8110462c:	d9002d17 	ldw	r4,180(sp)
81104630:	002d883a 	mov	r22,zero
81104634:	2500000b 	ldhu	r20,0(r4)
81104638:	21000104 	addi	r4,r4,4
8110463c:	d9002d15 	stw	r4,180(sp)
81104640:	003cfe06 	br	81103a3c <__reset+0xfb0e3a3c>
81104644:	bc400007 	ldb	r17,0(r23)
81104648:	003a9606 	br	811030a4 <__reset+0xfb0e30a4>
8110464c:	9080040c 	andi	r2,r18,16
81104650:	10010126 	beq	r2,zero,81104a58 <___svfprintf_internal_r+0x1b04>
81104654:	d9402d17 	ldw	r5,180(sp)
81104658:	d8c02f17 	ldw	r3,188(sp)
8110465c:	28800017 	ldw	r2,0(r5)
81104660:	29400104 	addi	r5,r5,4
81104664:	d9402d15 	stw	r5,180(sp)
81104668:	10c00015 	stw	r3,0(r2)
8110466c:	003a6406 	br	81103000 <__reset+0xfb0e3000>
81104670:	d9002917 	ldw	r4,164(sp)
81104674:	d8002785 	stb	zero,158(sp)
81104678:	203d8d16 	blt	r4,zero,81103cb0 <__reset+0xfb0e3cb0>
8110467c:	00bfdfc4 	movi	r2,-129
81104680:	90a4703a 	and	r18,r18,r2
81104684:	003b0506 	br	8110329c <__reset+0xfb0e329c>
81104688:	016044b4 	movhi	r5,33042
8110468c:	29660584 	addi	r5,r5,-26602
81104690:	d9402b15 	stw	r5,172(sp)
81104694:	d9402b17 	ldw	r5,172(sp)
81104698:	1c47883a 	add	r3,r3,r17
8110469c:	10800044 	addi	r2,r2,1
811046a0:	41400015 	stw	r5,0(r8)
811046a4:	44400115 	stw	r17,4(r8)
811046a8:	d8c02015 	stw	r3,128(sp)
811046ac:	d8801f15 	stw	r2,124(sp)
811046b0:	010001c4 	movi	r4,7
811046b4:	20bf3016 	blt	r4,r2,81104378 <__reset+0xfb0e4378>
811046b8:	42000204 	addi	r8,r8,8
811046bc:	003f3506 	br	81104394 <__reset+0xfb0e4394>
811046c0:	012044b4 	movhi	r4,33042
811046c4:	21260584 	addi	r4,r4,-26602
811046c8:	d9002b15 	stw	r4,172(sp)
811046cc:	003c5e06 	br	81103848 <__reset+0xfb0e3848>
811046d0:	d9402c17 	ldw	r5,176(sp)
811046d4:	d9801e04 	addi	r6,sp,120
811046d8:	9809883a 	mov	r4,r19
811046dc:	110c64c0 	call	8110c64c <__ssprint_r>
811046e0:	103b011e 	bne	r2,zero,811032e8 <__reset+0xfb0e32e8>
811046e4:	d8c02017 	ldw	r3,128(sp)
811046e8:	da000404 	addi	r8,sp,16
811046ec:	003d9306 	br	81103d3c <__reset+0xfb0e3d3c>
811046f0:	d8801f17 	ldw	r2,124(sp)
811046f4:	016044b4 	movhi	r5,33042
811046f8:	01000044 	movi	r4,1
811046fc:	18c00044 	addi	r3,r3,1
81104700:	10800044 	addi	r2,r2,1
81104704:	29660504 	addi	r5,r5,-26604
81104708:	41000115 	stw	r4,4(r8)
8110470c:	41400015 	stw	r5,0(r8)
81104710:	d8c02015 	stw	r3,128(sp)
81104714:	d8801f15 	stw	r2,124(sp)
81104718:	010001c4 	movi	r4,7
8110471c:	2080b516 	blt	r4,r2,811049f4 <___svfprintf_internal_r+0x1aa0>
81104720:	42000204 	addi	r8,r8,8
81104724:	8800041e 	bne	r17,zero,81104738 <___svfprintf_internal_r+0x17e4>
81104728:	d8803317 	ldw	r2,204(sp)
8110472c:	1000021e 	bne	r2,zero,81104738 <___svfprintf_internal_r+0x17e4>
81104730:	9080004c 	andi	r2,r18,1
81104734:	103c5b26 	beq	r2,zero,811038a4 <__reset+0xfb0e38a4>
81104738:	d9003817 	ldw	r4,224(sp)
8110473c:	d8801f17 	ldw	r2,124(sp)
81104740:	d9403417 	ldw	r5,208(sp)
81104744:	20c7883a 	add	r3,r4,r3
81104748:	10800044 	addi	r2,r2,1
8110474c:	41000115 	stw	r4,4(r8)
81104750:	41400015 	stw	r5,0(r8)
81104754:	d8c02015 	stw	r3,128(sp)
81104758:	d8801f15 	stw	r2,124(sp)
8110475c:	010001c4 	movi	r4,7
81104760:	20818016 	blt	r4,r2,81104d64 <___svfprintf_internal_r+0x1e10>
81104764:	42000204 	addi	r8,r8,8
81104768:	0463c83a 	sub	r17,zero,r17
8110476c:	0440cb0e 	bge	zero,r17,81104a9c <___svfprintf_internal_r+0x1b48>
81104770:	05800404 	movi	r22,16
81104774:	b440e80e 	bge	r22,r17,81104b18 <___svfprintf_internal_r+0x1bc4>
81104778:	016044b4 	movhi	r5,33042
8110477c:	29660584 	addi	r5,r5,-26602
81104780:	d9402b15 	stw	r5,172(sp)
81104784:	070001c4 	movi	fp,7
81104788:	dd002c17 	ldw	r20,176(sp)
8110478c:	00000306 	br	8110479c <___svfprintf_internal_r+0x1848>
81104790:	42000204 	addi	r8,r8,8
81104794:	8c7ffc04 	addi	r17,r17,-16
81104798:	b440e20e 	bge	r22,r17,81104b24 <___svfprintf_internal_r+0x1bd0>
8110479c:	18c00404 	addi	r3,r3,16
811047a0:	10800044 	addi	r2,r2,1
811047a4:	45400015 	stw	r21,0(r8)
811047a8:	45800115 	stw	r22,4(r8)
811047ac:	d8c02015 	stw	r3,128(sp)
811047b0:	d8801f15 	stw	r2,124(sp)
811047b4:	e0bff60e 	bge	fp,r2,81104790 <__reset+0xfb0e4790>
811047b8:	d9801e04 	addi	r6,sp,120
811047bc:	a00b883a 	mov	r5,r20
811047c0:	9809883a 	mov	r4,r19
811047c4:	110c64c0 	call	8110c64c <__ssprint_r>
811047c8:	103ac71e 	bne	r2,zero,811032e8 <__reset+0xfb0e32e8>
811047cc:	d8c02017 	ldw	r3,128(sp)
811047d0:	d8801f17 	ldw	r2,124(sp)
811047d4:	da000404 	addi	r8,sp,16
811047d8:	003fee06 	br	81104794 <__reset+0xfb0e4794>
811047dc:	d8c02d17 	ldw	r3,180(sp)
811047e0:	d9002917 	ldw	r4,164(sp)
811047e4:	002d883a 	mov	r22,zero
811047e8:	18800104 	addi	r2,r3,4
811047ec:	1d000017 	ldw	r20,0(r3)
811047f0:	203e7d0e 	bge	r4,zero,811041e8 <__reset+0xfb0e41e8>
811047f4:	003eda06 	br	81104360 <__reset+0xfb0e4360>
811047f8:	d9402d17 	ldw	r5,180(sp)
811047fc:	d8c02917 	ldw	r3,164(sp)
81104800:	002d883a 	mov	r22,zero
81104804:	28800104 	addi	r2,r5,4
81104808:	2d000017 	ldw	r20,0(r5)
8110480c:	183e2d0e 	bge	r3,zero,811040c4 <__reset+0xfb0e40c4>
81104810:	003f6b06 	br	811045c0 <__reset+0xfb0e45c0>
81104814:	d8c02d15 	stw	r3,180(sp)
81104818:	0039883a 	mov	fp,zero
8110481c:	003ed206 	br	81104368 <__reset+0xfb0e4368>
81104820:	bc400043 	ldbu	r17,1(r23)
81104824:	94800814 	ori	r18,r18,32
81104828:	bdc00044 	addi	r23,r23,1
8110482c:	8c403fcc 	andi	r17,r17,255
81104830:	8c40201c 	xori	r17,r17,128
81104834:	8c7fe004 	addi	r17,r17,-128
81104838:	003a1a06 	br	811030a4 <__reset+0xfb0e30a4>
8110483c:	d9402c17 	ldw	r5,176(sp)
81104840:	d9801e04 	addi	r6,sp,120
81104844:	9809883a 	mov	r4,r19
81104848:	110c64c0 	call	8110c64c <__ssprint_r>
8110484c:	103aa61e 	bne	r2,zero,811032e8 <__reset+0xfb0e32e8>
81104850:	d8c02017 	ldw	r3,128(sp)
81104854:	da000404 	addi	r8,sp,16
81104858:	003d4a06 	br	81103d84 <__reset+0xfb0e3d84>
8110485c:	d9002917 	ldw	r4,164(sp)
81104860:	05bff7c4 	movi	r22,-33
81104864:	00bfffc4 	movi	r2,-1
81104868:	8dac703a 	and	r22,r17,r22
8110486c:	20806a26 	beq	r4,r2,81104a18 <___svfprintf_internal_r+0x1ac4>
81104870:	008011c4 	movi	r2,71
81104874:	b0813726 	beq	r22,r2,81104d54 <___svfprintf_internal_r+0x1e00>
81104878:	d9003717 	ldw	r4,220(sp)
8110487c:	90c04014 	ori	r3,r18,256
81104880:	d8c02b15 	stw	r3,172(sp)
81104884:	20015d16 	blt	r4,zero,81104dfc <___svfprintf_internal_r+0x1ea8>
81104888:	dd003717 	ldw	r20,220(sp)
8110488c:	d8002a05 	stb	zero,168(sp)
81104890:	00801984 	movi	r2,102
81104894:	88814026 	beq	r17,r2,81104d98 <___svfprintf_internal_r+0x1e44>
81104898:	00801184 	movi	r2,70
8110489c:	88817126 	beq	r17,r2,81104e64 <___svfprintf_internal_r+0x1f10>
811048a0:	00801144 	movi	r2,69
811048a4:	b0816226 	beq	r22,r2,81104e30 <___svfprintf_internal_r+0x1edc>
811048a8:	d8c02917 	ldw	r3,164(sp)
811048ac:	d8802104 	addi	r2,sp,132
811048b0:	d8800315 	stw	r2,12(sp)
811048b4:	d9403617 	ldw	r5,216(sp)
811048b8:	d8802504 	addi	r2,sp,148
811048bc:	d8800215 	stw	r2,8(sp)
811048c0:	d8802604 	addi	r2,sp,152
811048c4:	d8c00015 	stw	r3,0(sp)
811048c8:	d8800115 	stw	r2,4(sp)
811048cc:	01c00084 	movi	r7,2
811048d0:	a00d883a 	mov	r6,r20
811048d4:	9809883a 	mov	r4,r19
811048d8:	d8c03d15 	stw	r3,244(sp)
811048dc:	da003e15 	stw	r8,248(sp)
811048e0:	11077500 	call	81107750 <_dtoa_r>
811048e4:	1021883a 	mov	r16,r2
811048e8:	008019c4 	movi	r2,103
811048ec:	d8c03d17 	ldw	r3,244(sp)
811048f0:	da003e17 	ldw	r8,248(sp)
811048f4:	8880e726 	beq	r17,r2,81104c94 <___svfprintf_internal_r+0x1d40>
811048f8:	008011c4 	movi	r2,71
811048fc:	8880d426 	beq	r17,r2,81104c50 <___svfprintf_internal_r+0x1cfc>
81104900:	80f9883a 	add	fp,r16,r3
81104904:	d9003617 	ldw	r4,216(sp)
81104908:	000d883a 	mov	r6,zero
8110490c:	000f883a 	mov	r7,zero
81104910:	a00b883a 	mov	r5,r20
81104914:	da003e15 	stw	r8,248(sp)
81104918:	11117cc0 	call	811117cc <__eqdf2>
8110491c:	da003e17 	ldw	r8,248(sp)
81104920:	1000e426 	beq	r2,zero,81104cb4 <___svfprintf_internal_r+0x1d60>
81104924:	d8802117 	ldw	r2,132(sp)
81104928:	1700062e 	bgeu	r2,fp,81104944 <___svfprintf_internal_r+0x19f0>
8110492c:	01000c04 	movi	r4,48
81104930:	10c00044 	addi	r3,r2,1
81104934:	d8c02115 	stw	r3,132(sp)
81104938:	11000005 	stb	r4,0(r2)
8110493c:	d8802117 	ldw	r2,132(sp)
81104940:	173ffb36 	bltu	r2,fp,81104930 <__reset+0xfb0e4930>
81104944:	1405c83a 	sub	r2,r2,r16
81104948:	d8803315 	stw	r2,204(sp)
8110494c:	008011c4 	movi	r2,71
81104950:	b080c526 	beq	r22,r2,81104c68 <___svfprintf_internal_r+0x1d14>
81104954:	00801944 	movi	r2,101
81104958:	1441d90e 	bge	r2,r17,811050c0 <___svfprintf_internal_r+0x216c>
8110495c:	d8c02617 	ldw	r3,152(sp)
81104960:	00801984 	movi	r2,102
81104964:	d8c03215 	stw	r3,200(sp)
81104968:	88813426 	beq	r17,r2,81104e3c <___svfprintf_internal_r+0x1ee8>
8110496c:	d8c03217 	ldw	r3,200(sp)
81104970:	d9003317 	ldw	r4,204(sp)
81104974:	19012516 	blt	r3,r4,81104e0c <___svfprintf_internal_r+0x1eb8>
81104978:	9480004c 	andi	r18,r18,1
8110497c:	9001841e 	bne	r18,zero,81104f90 <___svfprintf_internal_r+0x203c>
81104980:	1805883a 	mov	r2,r3
81104984:	1801cc16 	blt	r3,zero,811050b8 <___svfprintf_internal_r+0x2164>
81104988:	d8c03217 	ldw	r3,200(sp)
8110498c:	044019c4 	movi	r17,103
81104990:	d8c02e15 	stw	r3,184(sp)
81104994:	df002a07 	ldb	fp,168(sp)
81104998:	e000a61e 	bne	fp,zero,81104c34 <___svfprintf_internal_r+0x1ce0>
8110499c:	df002783 	ldbu	fp,158(sp)
811049a0:	d8802a15 	stw	r2,168(sp)
811049a4:	dc802b17 	ldw	r18,172(sp)
811049a8:	d8002915 	stw	zero,164(sp)
811049ac:	003b1706 	br	8110360c <__reset+0xfb0e360c>
811049b0:	042044b4 	movhi	r16,33042
811049b4:	8425f504 	addi	r16,r16,-26668
811049b8:	003aa606 	br	81103454 <__reset+0xfb0e3454>
811049bc:	d9003917 	ldw	r4,228(sp)
811049c0:	04001004 	movi	r16,64
811049c4:	800b883a 	mov	r5,r16
811049c8:	110a1300 	call	8110a130 <_malloc_r>
811049cc:	d9002c17 	ldw	r4,176(sp)
811049d0:	20800015 	stw	r2,0(r4)
811049d4:	20800415 	stw	r2,16(r4)
811049d8:	1001cb26 	beq	r2,zero,81105108 <___svfprintf_internal_r+0x21b4>
811049dc:	d8802c17 	ldw	r2,176(sp)
811049e0:	14000515 	stw	r16,20(r2)
811049e4:	00397606 	br	81102fc0 <__reset+0xfb0e2fc0>
811049e8:	042044b4 	movhi	r16,33042
811049ec:	8425f704 	addi	r16,r16,-26660
811049f0:	003ee106 	br	81104578 <__reset+0xfb0e4578>
811049f4:	d9402c17 	ldw	r5,176(sp)
811049f8:	d9801e04 	addi	r6,sp,120
811049fc:	9809883a 	mov	r4,r19
81104a00:	110c64c0 	call	8110c64c <__ssprint_r>
81104a04:	103a381e 	bne	r2,zero,811032e8 <__reset+0xfb0e32e8>
81104a08:	dc402617 	ldw	r17,152(sp)
81104a0c:	d8c02017 	ldw	r3,128(sp)
81104a10:	da000404 	addi	r8,sp,16
81104a14:	003f4306 	br	81104724 <__reset+0xfb0e4724>
81104a18:	01400184 	movi	r5,6
81104a1c:	d9402915 	stw	r5,164(sp)
81104a20:	003f9506 	br	81104878 <__reset+0xfb0e4878>
81104a24:	d9002d17 	ldw	r4,180(sp)
81104a28:	25000017 	ldw	r20,0(r4)
81104a2c:	21000104 	addi	r4,r4,4
81104a30:	d9002d15 	stw	r4,180(sp)
81104a34:	a02dd7fa 	srai	r22,r20,31
81104a38:	b005883a 	mov	r2,r22
81104a3c:	003a9b06 	br	811034ac <__reset+0xfb0e34ac>
81104a40:	d9402d17 	ldw	r5,180(sp)
81104a44:	002d883a 	mov	r22,zero
81104a48:	2d000017 	ldw	r20,0(r5)
81104a4c:	29400104 	addi	r5,r5,4
81104a50:	d9402d15 	stw	r5,180(sp)
81104a54:	003bf906 	br	81103a3c <__reset+0xfb0e3a3c>
81104a58:	9480100c 	andi	r18,r18,64
81104a5c:	90006e26 	beq	r18,zero,81104c18 <___svfprintf_internal_r+0x1cc4>
81104a60:	d9002d17 	ldw	r4,180(sp)
81104a64:	d9402f17 	ldw	r5,188(sp)
81104a68:	20800017 	ldw	r2,0(r4)
81104a6c:	21000104 	addi	r4,r4,4
81104a70:	d9002d15 	stw	r4,180(sp)
81104a74:	1140000d 	sth	r5,0(r2)
81104a78:	00396106 	br	81103000 <__reset+0xfb0e3000>
81104a7c:	d9402c17 	ldw	r5,176(sp)
81104a80:	d9801e04 	addi	r6,sp,120
81104a84:	9809883a 	mov	r4,r19
81104a88:	110c64c0 	call	8110c64c <__ssprint_r>
81104a8c:	103a161e 	bne	r2,zero,811032e8 <__reset+0xfb0e32e8>
81104a90:	d8c02017 	ldw	r3,128(sp)
81104a94:	d8801f17 	ldw	r2,124(sp)
81104a98:	da000404 	addi	r8,sp,16
81104a9c:	d9403317 	ldw	r5,204(sp)
81104aa0:	10800044 	addi	r2,r2,1
81104aa4:	44000015 	stw	r16,0(r8)
81104aa8:	28c7883a 	add	r3,r5,r3
81104aac:	003b7706 	br	8110388c <__reset+0xfb0e388c>
81104ab0:	8009883a 	mov	r4,r16
81104ab4:	da003e15 	stw	r8,248(sp)
81104ab8:	1102ebc0 	call	81102ebc <strlen>
81104abc:	d8802e15 	stw	r2,184(sp)
81104ac0:	da003e17 	ldw	r8,248(sp)
81104ac4:	103c280e 	bge	r2,zero,81103b68 <__reset+0xfb0e3b68>
81104ac8:	0005883a 	mov	r2,zero
81104acc:	003c2606 	br	81103b68 <__reset+0xfb0e3b68>
81104ad0:	00bfffc4 	movi	r2,-1
81104ad4:	003a0906 	br	811032fc <__reset+0xfb0e32fc>
81104ad8:	012044b4 	movhi	r4,33042
81104adc:	21260984 	addi	r4,r4,-26586
81104ae0:	d9003515 	stw	r4,212(sp)
81104ae4:	003b0606 	br	81103700 <__reset+0xfb0e3700>
81104ae8:	013fffc4 	movi	r4,-1
81104aec:	003a2706 	br	8110338c <__reset+0xfb0e338c>
81104af0:	d9402c17 	ldw	r5,176(sp)
81104af4:	d9801e04 	addi	r6,sp,120
81104af8:	9809883a 	mov	r4,r19
81104afc:	110c64c0 	call	8110c64c <__ssprint_r>
81104b00:	1039f91e 	bne	r2,zero,811032e8 <__reset+0xfb0e32e8>
81104b04:	d8c02017 	ldw	r3,128(sp)
81104b08:	da000404 	addi	r8,sp,16
81104b0c:	003d8406 	br	81104120 <__reset+0xfb0e4120>
81104b10:	0023883a 	mov	r17,zero
81104b14:	003d8306 	br	81104124 <__reset+0xfb0e4124>
81104b18:	012044b4 	movhi	r4,33042
81104b1c:	21260584 	addi	r4,r4,-26602
81104b20:	d9002b15 	stw	r4,172(sp)
81104b24:	d9002b17 	ldw	r4,172(sp)
81104b28:	1c47883a 	add	r3,r3,r17
81104b2c:	10800044 	addi	r2,r2,1
81104b30:	41000015 	stw	r4,0(r8)
81104b34:	44400115 	stw	r17,4(r8)
81104b38:	d8c02015 	stw	r3,128(sp)
81104b3c:	d8801f15 	stw	r2,124(sp)
81104b40:	010001c4 	movi	r4,7
81104b44:	20bfcd16 	blt	r4,r2,81104a7c <__reset+0xfb0e4a7c>
81104b48:	42000204 	addi	r8,r8,8
81104b4c:	003fd306 	br	81104a9c <__reset+0xfb0e4a9c>
81104b50:	d9402c17 	ldw	r5,176(sp)
81104b54:	d9801e04 	addi	r6,sp,120
81104b58:	9809883a 	mov	r4,r19
81104b5c:	110c64c0 	call	8110c64c <__ssprint_r>
81104b60:	1039e11e 	bne	r2,zero,811032e8 <__reset+0xfb0e32e8>
81104b64:	d8802617 	ldw	r2,152(sp)
81104b68:	d8c02017 	ldw	r3,128(sp)
81104b6c:	da000404 	addi	r8,sp,16
81104b70:	003e1c06 	br	811043e4 <__reset+0xfb0e43e4>
81104b74:	d8802917 	ldw	r2,164(sp)
81104b78:	00c00184 	movi	r3,6
81104b7c:	1880012e 	bgeu	r3,r2,81104b84 <___svfprintf_internal_r+0x1c30>
81104b80:	1805883a 	mov	r2,r3
81104b84:	d8802e15 	stw	r2,184(sp)
81104b88:	1000f316 	blt	r2,zero,81104f58 <___svfprintf_internal_r+0x2004>
81104b8c:	042044b4 	movhi	r16,33042
81104b90:	d8802a15 	stw	r2,168(sp)
81104b94:	dd002d15 	stw	r20,180(sp)
81104b98:	d8002915 	stw	zero,164(sp)
81104b9c:	d8003215 	stw	zero,200(sp)
81104ba0:	84260304 	addi	r16,r16,-26612
81104ba4:	0039883a 	mov	fp,zero
81104ba8:	003a9f06 	br	81103628 <__reset+0xfb0e3628>
81104bac:	012044b4 	movhi	r4,33042
81104bb0:	21260984 	addi	r4,r4,-26586
81104bb4:	d9003515 	stw	r4,212(sp)
81104bb8:	003b5f06 	br	81103938 <__reset+0xfb0e3938>
81104bbc:	d9402c17 	ldw	r5,176(sp)
81104bc0:	d9801e04 	addi	r6,sp,120
81104bc4:	9809883a 	mov	r4,r19
81104bc8:	110c64c0 	call	8110c64c <__ssprint_r>
81104bcc:	1039c61e 	bne	r2,zero,811032e8 <__reset+0xfb0e32e8>
81104bd0:	d8802617 	ldw	r2,152(sp)
81104bd4:	d9403317 	ldw	r5,204(sp)
81104bd8:	d8c02017 	ldw	r3,128(sp)
81104bdc:	da000404 	addi	r8,sp,16
81104be0:	2885c83a 	sub	r2,r5,r2
81104be4:	003e1006 	br	81104428 <__reset+0xfb0e4428>
81104be8:	00800044 	movi	r2,1
81104bec:	10803fcc 	andi	r2,r2,255
81104bf0:	00c00044 	movi	r3,1
81104bf4:	10fa3526 	beq	r2,r3,811034cc <__reset+0xfb0e34cc>
81104bf8:	00c00084 	movi	r3,2
81104bfc:	10fb9e26 	beq	r2,r3,81103a78 <__reset+0xfb0e3a78>
81104c00:	003a6406 	br	81103594 <__reset+0xfb0e3594>
81104c04:	0021883a 	mov	r16,zero
81104c08:	003e0806 	br	8110442c <__reset+0xfb0e442c>
81104c0c:	07000b44 	movi	fp,45
81104c10:	df002785 	stb	fp,158(sp)
81104c14:	003a0b06 	br	81103444 <__reset+0xfb0e3444>
81104c18:	d8c02d17 	ldw	r3,180(sp)
81104c1c:	d9002f17 	ldw	r4,188(sp)
81104c20:	18800017 	ldw	r2,0(r3)
81104c24:	18c00104 	addi	r3,r3,4
81104c28:	d8c02d15 	stw	r3,180(sp)
81104c2c:	11000015 	stw	r4,0(r2)
81104c30:	0038f306 	br	81103000 <__reset+0xfb0e3000>
81104c34:	00c00b44 	movi	r3,45
81104c38:	d8c02785 	stb	r3,158(sp)
81104c3c:	d8802a15 	stw	r2,168(sp)
81104c40:	dc802b17 	ldw	r18,172(sp)
81104c44:	d8002915 	stw	zero,164(sp)
81104c48:	07000b44 	movi	fp,45
81104c4c:	003a7306 	br	8110361c <__reset+0xfb0e361c>
81104c50:	9080004c 	andi	r2,r18,1
81104c54:	1000941e 	bne	r2,zero,81104ea8 <___svfprintf_internal_r+0x1f54>
81104c58:	d8802117 	ldw	r2,132(sp)
81104c5c:	1405c83a 	sub	r2,r2,r16
81104c60:	d8803315 	stw	r2,204(sp)
81104c64:	b441161e 	bne	r22,r17,811050c0 <___svfprintf_internal_r+0x216c>
81104c68:	dd802617 	ldw	r22,152(sp)
81104c6c:	00bfff44 	movi	r2,-3
81104c70:	b0801a16 	blt	r22,r2,81104cdc <___svfprintf_internal_r+0x1d88>
81104c74:	d9402917 	ldw	r5,164(sp)
81104c78:	2d801816 	blt	r5,r22,81104cdc <___svfprintf_internal_r+0x1d88>
81104c7c:	dd803215 	stw	r22,200(sp)
81104c80:	003f3a06 	br	8110496c <__reset+0xfb0e496c>
81104c84:	1025883a 	mov	r18,r2
81104c88:	0039883a 	mov	fp,zero
81104c8c:	00800084 	movi	r2,2
81104c90:	003fd606 	br	81104bec <__reset+0xfb0e4bec>
81104c94:	9080004c 	andi	r2,r18,1
81104c98:	103f191e 	bne	r2,zero,81104900 <__reset+0xfb0e4900>
81104c9c:	d8802117 	ldw	r2,132(sp)
81104ca0:	003f2806 	br	81104944 <__reset+0xfb0e4944>
81104ca4:	012044b4 	movhi	r4,33042
81104ca8:	21260584 	addi	r4,r4,-26602
81104cac:	d9002b15 	stw	r4,172(sp)
81104cb0:	003c7c06 	br	81103ea4 <__reset+0xfb0e3ea4>
81104cb4:	e005883a 	mov	r2,fp
81104cb8:	003f2206 	br	81104944 <__reset+0xfb0e4944>
81104cbc:	d9402917 	ldw	r5,164(sp)
81104cc0:	df002783 	ldbu	fp,158(sp)
81104cc4:	dd002d15 	stw	r20,180(sp)
81104cc8:	d9402a15 	stw	r5,168(sp)
81104ccc:	d9402e15 	stw	r5,184(sp)
81104cd0:	d8002915 	stw	zero,164(sp)
81104cd4:	d8003215 	stw	zero,200(sp)
81104cd8:	003a4c06 	br	8110360c <__reset+0xfb0e360c>
81104cdc:	8c7fff84 	addi	r17,r17,-2
81104ce0:	b5bfffc4 	addi	r22,r22,-1
81104ce4:	dd802615 	stw	r22,152(sp)
81104ce8:	dc4022c5 	stb	r17,139(sp)
81104cec:	b000c316 	blt	r22,zero,81104ffc <___svfprintf_internal_r+0x20a8>
81104cf0:	00800ac4 	movi	r2,43
81104cf4:	d8802305 	stb	r2,140(sp)
81104cf8:	00800244 	movi	r2,9
81104cfc:	15806e16 	blt	r2,r22,81104eb8 <___svfprintf_internal_r+0x1f64>
81104d00:	00800c04 	movi	r2,48
81104d04:	b5800c04 	addi	r22,r22,48
81104d08:	d8802345 	stb	r2,141(sp)
81104d0c:	dd802385 	stb	r22,142(sp)
81104d10:	d88023c4 	addi	r2,sp,143
81104d14:	df0022c4 	addi	fp,sp,139
81104d18:	d8c03317 	ldw	r3,204(sp)
81104d1c:	1739c83a 	sub	fp,r2,fp
81104d20:	d9003317 	ldw	r4,204(sp)
81104d24:	e0c7883a 	add	r3,fp,r3
81104d28:	df003b15 	stw	fp,236(sp)
81104d2c:	d8c02e15 	stw	r3,184(sp)
81104d30:	00800044 	movi	r2,1
81104d34:	1100b70e 	bge	r2,r4,81105014 <___svfprintf_internal_r+0x20c0>
81104d38:	d8c02e17 	ldw	r3,184(sp)
81104d3c:	18c00044 	addi	r3,r3,1
81104d40:	d8c02e15 	stw	r3,184(sp)
81104d44:	1805883a 	mov	r2,r3
81104d48:	1800b016 	blt	r3,zero,8110500c <___svfprintf_internal_r+0x20b8>
81104d4c:	d8003215 	stw	zero,200(sp)
81104d50:	003f1006 	br	81104994 <__reset+0xfb0e4994>
81104d54:	d8802917 	ldw	r2,164(sp)
81104d58:	103ec71e 	bne	r2,zero,81104878 <__reset+0xfb0e4878>
81104d5c:	dc002915 	stw	r16,164(sp)
81104d60:	003ec506 	br	81104878 <__reset+0xfb0e4878>
81104d64:	d9402c17 	ldw	r5,176(sp)
81104d68:	d9801e04 	addi	r6,sp,120
81104d6c:	9809883a 	mov	r4,r19
81104d70:	110c64c0 	call	8110c64c <__ssprint_r>
81104d74:	10395c1e 	bne	r2,zero,811032e8 <__reset+0xfb0e32e8>
81104d78:	dc402617 	ldw	r17,152(sp)
81104d7c:	d8c02017 	ldw	r3,128(sp)
81104d80:	d8801f17 	ldw	r2,124(sp)
81104d84:	da000404 	addi	r8,sp,16
81104d88:	003e7706 	br	81104768 <__reset+0xfb0e4768>
81104d8c:	582f883a 	mov	r23,r11
81104d90:	d8002915 	stw	zero,164(sp)
81104d94:	0038c406 	br	811030a8 <__reset+0xfb0e30a8>
81104d98:	d8c02917 	ldw	r3,164(sp)
81104d9c:	d8802104 	addi	r2,sp,132
81104da0:	d8800315 	stw	r2,12(sp)
81104da4:	d9403617 	ldw	r5,216(sp)
81104da8:	d8802504 	addi	r2,sp,148
81104dac:	d8800215 	stw	r2,8(sp)
81104db0:	d8802604 	addi	r2,sp,152
81104db4:	d8c00015 	stw	r3,0(sp)
81104db8:	9809883a 	mov	r4,r19
81104dbc:	d8800115 	stw	r2,4(sp)
81104dc0:	01c000c4 	movi	r7,3
81104dc4:	a00d883a 	mov	r6,r20
81104dc8:	da003e15 	stw	r8,248(sp)
81104dcc:	11077500 	call	81107750 <_dtoa_r>
81104dd0:	d9002917 	ldw	r4,164(sp)
81104dd4:	da003e17 	ldw	r8,248(sp)
81104dd8:	1021883a 	mov	r16,r2
81104ddc:	1139883a 	add	fp,r2,r4
81104de0:	2007883a 	mov	r3,r4
81104de4:	81000007 	ldb	r4,0(r16)
81104de8:	00800c04 	movi	r2,48
81104dec:	20806f26 	beq	r4,r2,81104fac <___svfprintf_internal_r+0x2058>
81104df0:	d8c02617 	ldw	r3,152(sp)
81104df4:	e0f9883a 	add	fp,fp,r3
81104df8:	003ec206 	br	81104904 <__reset+0xfb0e4904>
81104dfc:	00c00b44 	movi	r3,45
81104e00:	2520003c 	xorhi	r20,r4,32768
81104e04:	d8c02a05 	stb	r3,168(sp)
81104e08:	003ea106 	br	81104890 <__reset+0xfb0e4890>
81104e0c:	d8c03217 	ldw	r3,200(sp)
81104e10:	00c0890e 	bge	zero,r3,81105038 <___svfprintf_internal_r+0x20e4>
81104e14:	00800044 	movi	r2,1
81104e18:	d9003317 	ldw	r4,204(sp)
81104e1c:	1105883a 	add	r2,r2,r4
81104e20:	d8802e15 	stw	r2,184(sp)
81104e24:	10005f16 	blt	r2,zero,81104fa4 <___svfprintf_internal_r+0x2050>
81104e28:	044019c4 	movi	r17,103
81104e2c:	003ed906 	br	81104994 <__reset+0xfb0e4994>
81104e30:	d9002917 	ldw	r4,164(sp)
81104e34:	20c00044 	addi	r3,r4,1
81104e38:	003e9c06 	br	811048ac <__reset+0xfb0e48ac>
81104e3c:	d9002917 	ldw	r4,164(sp)
81104e40:	00c0680e 	bge	zero,r3,81104fe4 <___svfprintf_internal_r+0x2090>
81104e44:	2000461e 	bne	r4,zero,81104f60 <___svfprintf_internal_r+0x200c>
81104e48:	9480004c 	andi	r18,r18,1
81104e4c:	9000441e 	bne	r18,zero,81104f60 <___svfprintf_internal_r+0x200c>
81104e50:	1805883a 	mov	r2,r3
81104e54:	1800a016 	blt	r3,zero,811050d8 <___svfprintf_internal_r+0x2184>
81104e58:	d8c03217 	ldw	r3,200(sp)
81104e5c:	d8c02e15 	stw	r3,184(sp)
81104e60:	003ecc06 	br	81104994 <__reset+0xfb0e4994>
81104e64:	d9402917 	ldw	r5,164(sp)
81104e68:	d8802104 	addi	r2,sp,132
81104e6c:	d8800315 	stw	r2,12(sp)
81104e70:	d9400015 	stw	r5,0(sp)
81104e74:	d8802504 	addi	r2,sp,148
81104e78:	d9403617 	ldw	r5,216(sp)
81104e7c:	d8800215 	stw	r2,8(sp)
81104e80:	d8802604 	addi	r2,sp,152
81104e84:	d8800115 	stw	r2,4(sp)
81104e88:	01c000c4 	movi	r7,3
81104e8c:	a00d883a 	mov	r6,r20
81104e90:	9809883a 	mov	r4,r19
81104e94:	da003e15 	stw	r8,248(sp)
81104e98:	11077500 	call	81107750 <_dtoa_r>
81104e9c:	d8c02917 	ldw	r3,164(sp)
81104ea0:	da003e17 	ldw	r8,248(sp)
81104ea4:	1021883a 	mov	r16,r2
81104ea8:	00801184 	movi	r2,70
81104eac:	80f9883a 	add	fp,r16,r3
81104eb0:	88bfcc26 	beq	r17,r2,81104de4 <__reset+0xfb0e4de4>
81104eb4:	003e9306 	br	81104904 <__reset+0xfb0e4904>
81104eb8:	df0022c4 	addi	fp,sp,139
81104ebc:	dc002915 	stw	r16,164(sp)
81104ec0:	9829883a 	mov	r20,r19
81104ec4:	e021883a 	mov	r16,fp
81104ec8:	4027883a 	mov	r19,r8
81104ecc:	b009883a 	mov	r4,r22
81104ed0:	01400284 	movi	r5,10
81104ed4:	11105080 	call	81110508 <__modsi3>
81104ed8:	10800c04 	addi	r2,r2,48
81104edc:	843fffc4 	addi	r16,r16,-1
81104ee0:	b009883a 	mov	r4,r22
81104ee4:	01400284 	movi	r5,10
81104ee8:	80800005 	stb	r2,0(r16)
81104eec:	11104840 	call	81110484 <__divsi3>
81104ef0:	102d883a 	mov	r22,r2
81104ef4:	00800244 	movi	r2,9
81104ef8:	15bff416 	blt	r2,r22,81104ecc <__reset+0xfb0e4ecc>
81104efc:	9811883a 	mov	r8,r19
81104f00:	b0800c04 	addi	r2,r22,48
81104f04:	a027883a 	mov	r19,r20
81104f08:	8029883a 	mov	r20,r16
81104f0c:	a17fffc4 	addi	r5,r20,-1
81104f10:	a0bfffc5 	stb	r2,-1(r20)
81104f14:	dc002917 	ldw	r16,164(sp)
81104f18:	2f00752e 	bgeu	r5,fp,811050f0 <___svfprintf_internal_r+0x219c>
81104f1c:	d9c02384 	addi	r7,sp,142
81104f20:	3d0fc83a 	sub	r7,r7,r20
81104f24:	d9002344 	addi	r4,sp,141
81104f28:	e1cf883a 	add	r7,fp,r7
81104f2c:	00000106 	br	81104f34 <___svfprintf_internal_r+0x1fe0>
81104f30:	28800003 	ldbu	r2,0(r5)
81104f34:	20800005 	stb	r2,0(r4)
81104f38:	21000044 	addi	r4,r4,1
81104f3c:	29400044 	addi	r5,r5,1
81104f40:	21fffb1e 	bne	r4,r7,81104f30 <__reset+0xfb0e4f30>
81104f44:	d8802304 	addi	r2,sp,140
81104f48:	1505c83a 	sub	r2,r2,r20
81104f4c:	d8c02344 	addi	r3,sp,141
81104f50:	1885883a 	add	r2,r3,r2
81104f54:	003f7006 	br	81104d18 <__reset+0xfb0e4d18>
81104f58:	0005883a 	mov	r2,zero
81104f5c:	003f0b06 	br	81104b8c <__reset+0xfb0e4b8c>
81104f60:	d9002917 	ldw	r4,164(sp)
81104f64:	d8c03217 	ldw	r3,200(sp)
81104f68:	20800044 	addi	r2,r4,1
81104f6c:	1885883a 	add	r2,r3,r2
81104f70:	d8802e15 	stw	r2,184(sp)
81104f74:	103e870e 	bge	r2,zero,81104994 <__reset+0xfb0e4994>
81104f78:	0005883a 	mov	r2,zero
81104f7c:	003e8506 	br	81104994 <__reset+0xfb0e4994>
81104f80:	012044b4 	movhi	r4,33042
81104f84:	21260584 	addi	r4,r4,-26602
81104f88:	d9002b15 	stw	r4,172(sp)
81104f8c:	003cc506 	br	811042a4 <__reset+0xfb0e42a4>
81104f90:	d8c03217 	ldw	r3,200(sp)
81104f94:	18c00044 	addi	r3,r3,1
81104f98:	d8c02e15 	stw	r3,184(sp)
81104f9c:	1805883a 	mov	r2,r3
81104fa0:	183fa10e 	bge	r3,zero,81104e28 <__reset+0xfb0e4e28>
81104fa4:	0005883a 	mov	r2,zero
81104fa8:	003f9f06 	br	81104e28 <__reset+0xfb0e4e28>
81104fac:	d9003617 	ldw	r4,216(sp)
81104fb0:	000d883a 	mov	r6,zero
81104fb4:	000f883a 	mov	r7,zero
81104fb8:	a00b883a 	mov	r5,r20
81104fbc:	d8c03d15 	stw	r3,244(sp)
81104fc0:	da003e15 	stw	r8,248(sp)
81104fc4:	11117cc0 	call	811117cc <__eqdf2>
81104fc8:	d8c03d17 	ldw	r3,244(sp)
81104fcc:	da003e17 	ldw	r8,248(sp)
81104fd0:	103f8726 	beq	r2,zero,81104df0 <__reset+0xfb0e4df0>
81104fd4:	00800044 	movi	r2,1
81104fd8:	10c7c83a 	sub	r3,r2,r3
81104fdc:	d8c02615 	stw	r3,152(sp)
81104fe0:	003f8406 	br	81104df4 <__reset+0xfb0e4df4>
81104fe4:	20000e1e 	bne	r4,zero,81105020 <___svfprintf_internal_r+0x20cc>
81104fe8:	9480004c 	andi	r18,r18,1
81104fec:	90000c1e 	bne	r18,zero,81105020 <___svfprintf_internal_r+0x20cc>
81104ff0:	00800044 	movi	r2,1
81104ff4:	d8802e15 	stw	r2,184(sp)
81104ff8:	003e6606 	br	81104994 <__reset+0xfb0e4994>
81104ffc:	00800b44 	movi	r2,45
81105000:	05adc83a 	sub	r22,zero,r22
81105004:	d8802305 	stb	r2,140(sp)
81105008:	003f3b06 	br	81104cf8 <__reset+0xfb0e4cf8>
8110500c:	0005883a 	mov	r2,zero
81105010:	003f4e06 	br	81104d4c <__reset+0xfb0e4d4c>
81105014:	90a4703a 	and	r18,r18,r2
81105018:	903f4a26 	beq	r18,zero,81104d44 <__reset+0xfb0e4d44>
8110501c:	003f4606 	br	81104d38 <__reset+0xfb0e4d38>
81105020:	d8c02917 	ldw	r3,164(sp)
81105024:	18c00084 	addi	r3,r3,2
81105028:	d8c02e15 	stw	r3,184(sp)
8110502c:	1805883a 	mov	r2,r3
81105030:	183e580e 	bge	r3,zero,81104994 <__reset+0xfb0e4994>
81105034:	003fd006 	br	81104f78 <__reset+0xfb0e4f78>
81105038:	00800084 	movi	r2,2
8110503c:	10c5c83a 	sub	r2,r2,r3
81105040:	003f7506 	br	81104e18 <__reset+0xfb0e4e18>
81105044:	d8802d17 	ldw	r2,180(sp)
81105048:	d9002d17 	ldw	r4,180(sp)
8110504c:	bc400043 	ldbu	r17,1(r23)
81105050:	10800017 	ldw	r2,0(r2)
81105054:	582f883a 	mov	r23,r11
81105058:	d8802915 	stw	r2,164(sp)
8110505c:	20800104 	addi	r2,r4,4
81105060:	d9002917 	ldw	r4,164(sp)
81105064:	d8802d15 	stw	r2,180(sp)
81105068:	203df00e 	bge	r4,zero,8110482c <__reset+0xfb0e482c>
8110506c:	8c403fcc 	andi	r17,r17,255
81105070:	00bfffc4 	movi	r2,-1
81105074:	8c40201c 	xori	r17,r17,128
81105078:	d8802915 	stw	r2,164(sp)
8110507c:	8c7fe004 	addi	r17,r17,-128
81105080:	00380806 	br	811030a4 <__reset+0xfb0e30a4>
81105084:	9080004c 	andi	r2,r18,1
81105088:	0039883a 	mov	fp,zero
8110508c:	10000726 	beq	r2,zero,811050ac <___svfprintf_internal_r+0x2158>
81105090:	d8c02817 	ldw	r3,160(sp)
81105094:	dc001dc4 	addi	r16,sp,119
81105098:	00800c04 	movi	r2,48
8110509c:	1c07c83a 	sub	r3,r3,r16
811050a0:	d8801dc5 	stb	r2,119(sp)
811050a4:	d8c02e15 	stw	r3,184(sp)
811050a8:	00395206 	br	811035f4 <__reset+0xfb0e35f4>
811050ac:	d8002e15 	stw	zero,184(sp)
811050b0:	dc001e04 	addi	r16,sp,120
811050b4:	00394f06 	br	811035f4 <__reset+0xfb0e35f4>
811050b8:	0005883a 	mov	r2,zero
811050bc:	003e3206 	br	81104988 <__reset+0xfb0e4988>
811050c0:	dd802617 	ldw	r22,152(sp)
811050c4:	003f0606 	br	81104ce0 <__reset+0xfb0e4ce0>
811050c8:	d9c02785 	stb	r7,158(sp)
811050cc:	003a5106 	br	81103a14 <__reset+0xfb0e3a14>
811050d0:	d9c02785 	stb	r7,158(sp)
811050d4:	003a3706 	br	811039b4 <__reset+0xfb0e39b4>
811050d8:	0005883a 	mov	r2,zero
811050dc:	003f5e06 	br	81104e58 <__reset+0xfb0e4e58>
811050e0:	d9c02785 	stb	r7,158(sp)
811050e4:	00391706 	br	81103544 <__reset+0xfb0e3544>
811050e8:	d9c02785 	stb	r7,158(sp)
811050ec:	0038e606 	br	81103488 <__reset+0xfb0e3488>
811050f0:	d8802344 	addi	r2,sp,141
811050f4:	003f0806 	br	81104d18 <__reset+0xfb0e4d18>
811050f8:	d9c02785 	stb	r7,158(sp)
811050fc:	0038b706 	br	811033dc <__reset+0xfb0e33dc>
81105100:	d9c02785 	stb	r7,158(sp)
81105104:	003adc06 	br	81103c78 <__reset+0xfb0e3c78>
81105108:	d9403917 	ldw	r5,228(sp)
8110510c:	00800304 	movi	r2,12
81105110:	28800015 	stw	r2,0(r5)
81105114:	00bfffc4 	movi	r2,-1
81105118:	00387806 	br	811032fc <__reset+0xfb0e32fc>
8110511c:	d9c02785 	stb	r7,158(sp)
81105120:	003abf06 	br	81103c20 <__reset+0xfb0e3c20>
81105124:	d9c02785 	stb	r7,158(sp)
81105128:	003a9b06 	br	81103b98 <__reset+0xfb0e3b98>

8110512c <___vfprintf_internal_r>:
8110512c:	deffb804 	addi	sp,sp,-288
81105130:	dfc04715 	stw	ra,284(sp)
81105134:	ddc04515 	stw	r23,276(sp)
81105138:	dd404315 	stw	r21,268(sp)
8110513c:	d9002c15 	stw	r4,176(sp)
81105140:	282f883a 	mov	r23,r5
81105144:	302b883a 	mov	r21,r6
81105148:	d9c02d15 	stw	r7,180(sp)
8110514c:	df004615 	stw	fp,280(sp)
81105150:	dd804415 	stw	r22,272(sp)
81105154:	dd004215 	stw	r20,264(sp)
81105158:	dcc04115 	stw	r19,260(sp)
8110515c:	dc804015 	stw	r18,256(sp)
81105160:	dc403f15 	stw	r17,252(sp)
81105164:	dc003e15 	stw	r16,248(sp)
81105168:	1109f440 	call	81109f44 <_localeconv_r>
8110516c:	10800017 	ldw	r2,0(r2)
81105170:	1009883a 	mov	r4,r2
81105174:	d8803415 	stw	r2,208(sp)
81105178:	1102ebc0 	call	81102ebc <strlen>
8110517c:	d8803715 	stw	r2,220(sp)
81105180:	d8802c17 	ldw	r2,176(sp)
81105184:	10000226 	beq	r2,zero,81105190 <___vfprintf_internal_r+0x64>
81105188:	10800e17 	ldw	r2,56(r2)
8110518c:	1000f926 	beq	r2,zero,81105574 <___vfprintf_internal_r+0x448>
81105190:	b880030b 	ldhu	r2,12(r23)
81105194:	10c8000c 	andi	r3,r2,8192
81105198:	1800061e 	bne	r3,zero,811051b4 <___vfprintf_internal_r+0x88>
8110519c:	b9001917 	ldw	r4,100(r23)
811051a0:	00f7ffc4 	movi	r3,-8193
811051a4:	10880014 	ori	r2,r2,8192
811051a8:	20c6703a 	and	r3,r4,r3
811051ac:	b880030d 	sth	r2,12(r23)
811051b0:	b8c01915 	stw	r3,100(r23)
811051b4:	10c0020c 	andi	r3,r2,8
811051b8:	1800c126 	beq	r3,zero,811054c0 <___vfprintf_internal_r+0x394>
811051bc:	b8c00417 	ldw	r3,16(r23)
811051c0:	1800bf26 	beq	r3,zero,811054c0 <___vfprintf_internal_r+0x394>
811051c4:	1080068c 	andi	r2,r2,26
811051c8:	00c00284 	movi	r3,10
811051cc:	10c0c426 	beq	r2,r3,811054e0 <___vfprintf_internal_r+0x3b4>
811051d0:	d8c00404 	addi	r3,sp,16
811051d4:	052044b4 	movhi	r20,33042
811051d8:	d9001e04 	addi	r4,sp,120
811051dc:	a5260d84 	addi	r20,r20,-26570
811051e0:	d8c01e15 	stw	r3,120(sp)
811051e4:	d8002015 	stw	zero,128(sp)
811051e8:	d8001f15 	stw	zero,124(sp)
811051ec:	d8003315 	stw	zero,204(sp)
811051f0:	d8003615 	stw	zero,216(sp)
811051f4:	d8003815 	stw	zero,224(sp)
811051f8:	1811883a 	mov	r8,r3
811051fc:	d8003915 	stw	zero,228(sp)
81105200:	d8003a15 	stw	zero,232(sp)
81105204:	d8002f15 	stw	zero,188(sp)
81105208:	d9002815 	stw	r4,160(sp)
8110520c:	a8800007 	ldb	r2,0(r21)
81105210:	10027b26 	beq	r2,zero,81105c00 <___vfprintf_internal_r+0xad4>
81105214:	00c00944 	movi	r3,37
81105218:	a821883a 	mov	r16,r21
8110521c:	10c0021e 	bne	r2,r3,81105228 <___vfprintf_internal_r+0xfc>
81105220:	00001406 	br	81105274 <___vfprintf_internal_r+0x148>
81105224:	10c00326 	beq	r2,r3,81105234 <___vfprintf_internal_r+0x108>
81105228:	84000044 	addi	r16,r16,1
8110522c:	80800007 	ldb	r2,0(r16)
81105230:	103ffc1e 	bne	r2,zero,81105224 <__reset+0xfb0e5224>
81105234:	8563c83a 	sub	r17,r16,r21
81105238:	88000e26 	beq	r17,zero,81105274 <___vfprintf_internal_r+0x148>
8110523c:	d8c02017 	ldw	r3,128(sp)
81105240:	d8801f17 	ldw	r2,124(sp)
81105244:	45400015 	stw	r21,0(r8)
81105248:	1c47883a 	add	r3,r3,r17
8110524c:	10800044 	addi	r2,r2,1
81105250:	d8c02015 	stw	r3,128(sp)
81105254:	44400115 	stw	r17,4(r8)
81105258:	d8801f15 	stw	r2,124(sp)
8110525c:	00c001c4 	movi	r3,7
81105260:	1880a716 	blt	r3,r2,81105500 <___vfprintf_internal_r+0x3d4>
81105264:	42000204 	addi	r8,r8,8
81105268:	d9402f17 	ldw	r5,188(sp)
8110526c:	2c4b883a 	add	r5,r5,r17
81105270:	d9402f15 	stw	r5,188(sp)
81105274:	80800007 	ldb	r2,0(r16)
81105278:	1000a826 	beq	r2,zero,8110551c <___vfprintf_internal_r+0x3f0>
8110527c:	84400047 	ldb	r17,1(r16)
81105280:	00bfffc4 	movi	r2,-1
81105284:	85400044 	addi	r21,r16,1
81105288:	d8002785 	stb	zero,158(sp)
8110528c:	0007883a 	mov	r3,zero
81105290:	000f883a 	mov	r7,zero
81105294:	d8802915 	stw	r2,164(sp)
81105298:	d8003115 	stw	zero,196(sp)
8110529c:	0025883a 	mov	r18,zero
811052a0:	01401604 	movi	r5,88
811052a4:	01800244 	movi	r6,9
811052a8:	02800a84 	movi	r10,42
811052ac:	02401b04 	movi	r9,108
811052b0:	ad400044 	addi	r21,r21,1
811052b4:	88bff804 	addi	r2,r17,-32
811052b8:	28830436 	bltu	r5,r2,81105ecc <___vfprintf_internal_r+0xda0>
811052bc:	100490ba 	slli	r2,r2,2
811052c0:	01204434 	movhi	r4,33040
811052c4:	2114b504 	addi	r4,r4,21204
811052c8:	1105883a 	add	r2,r2,r4
811052cc:	10800017 	ldw	r2,0(r2)
811052d0:	1000683a 	jmp	r2
811052d4:	81105dec 	andhi	r4,r16,16759
811052d8:	81105ecc 	andi	r4,r16,16763
811052dc:	81105ecc 	andi	r4,r16,16763
811052e0:	81105e0c 	andi	r4,r16,16760
811052e4:	81105ecc 	andi	r4,r16,16763
811052e8:	81105ecc 	andi	r4,r16,16763
811052ec:	81105ecc 	andi	r4,r16,16763
811052f0:	81105ecc 	andi	r4,r16,16763
811052f4:	81105ecc 	andi	r4,r16,16763
811052f8:	81105ecc 	andi	r4,r16,16763
811052fc:	81105580 	call	88110558 <__reset+0x20f0558>
81105300:	81105d28 	cmpgeui	r4,r16,16756
81105304:	81105ecc 	andi	r4,r16,16763
81105308:	81105448 	cmpgei	r4,r16,16721
8110530c:	811055a8 	cmpgeui	r4,r16,16726
81105310:	81105ecc 	andi	r4,r16,16763
81105314:	811055e8 	cmpgeui	r4,r16,16727
81105318:	811055f4 	orhi	r4,r16,16727
8110531c:	811055f4 	orhi	r4,r16,16727
81105320:	811055f4 	orhi	r4,r16,16727
81105324:	811055f4 	orhi	r4,r16,16727
81105328:	811055f4 	orhi	r4,r16,16727
8110532c:	811055f4 	orhi	r4,r16,16727
81105330:	811055f4 	orhi	r4,r16,16727
81105334:	811055f4 	orhi	r4,r16,16727
81105338:	811055f4 	orhi	r4,r16,16727
8110533c:	81105ecc 	andi	r4,r16,16763
81105340:	81105ecc 	andi	r4,r16,16763
81105344:	81105ecc 	andi	r4,r16,16763
81105348:	81105ecc 	andi	r4,r16,16763
8110534c:	81105ecc 	andi	r4,r16,16763
81105350:	81105ecc 	andi	r4,r16,16763
81105354:	81105ecc 	andi	r4,r16,16763
81105358:	81105ecc 	andi	r4,r16,16763
8110535c:	81105ecc 	andi	r4,r16,16763
81105360:	81105ecc 	andi	r4,r16,16763
81105364:	81105628 	cmpgeui	r4,r16,16728
81105368:	811056e4 	muli	r4,r16,16731
8110536c:	81105ecc 	andi	r4,r16,16763
81105370:	811056e4 	muli	r4,r16,16731
81105374:	81105ecc 	andi	r4,r16,16763
81105378:	81105ecc 	andi	r4,r16,16763
8110537c:	81105ecc 	andi	r4,r16,16763
81105380:	81105ecc 	andi	r4,r16,16763
81105384:	81105784 	addi	r4,r16,16734
81105388:	81105ecc 	andi	r4,r16,16763
8110538c:	81105ecc 	andi	r4,r16,16763
81105390:	81105790 	cmplti	r4,r16,16734
81105394:	81105ecc 	andi	r4,r16,16763
81105398:	81105ecc 	andi	r4,r16,16763
8110539c:	81105ecc 	andi	r4,r16,16763
811053a0:	81105ecc 	andi	r4,r16,16763
811053a4:	81105ecc 	andi	r4,r16,16763
811053a8:	81105c08 	cmpgei	r4,r16,16752
811053ac:	81105ecc 	andi	r4,r16,16763
811053b0:	81105ecc 	andi	r4,r16,16763
811053b4:	81105c68 	cmpgeui	r4,r16,16753
811053b8:	81105ecc 	andi	r4,r16,16763
811053bc:	81105ecc 	andi	r4,r16,16763
811053c0:	81105ecc 	andi	r4,r16,16763
811053c4:	81105ecc 	andi	r4,r16,16763
811053c8:	81105ecc 	andi	r4,r16,16763
811053cc:	81105ecc 	andi	r4,r16,16763
811053d0:	81105ecc 	andi	r4,r16,16763
811053d4:	81105ecc 	andi	r4,r16,16763
811053d8:	81105ecc 	andi	r4,r16,16763
811053dc:	81105ecc 	andi	r4,r16,16763
811053e0:	81105e78 	rdprs	r4,r16,16761
811053e4:	81105e18 	cmpnei	r4,r16,16760
811053e8:	811056e4 	muli	r4,r16,16731
811053ec:	811056e4 	muli	r4,r16,16731
811053f0:	811056e4 	muli	r4,r16,16731
811053f4:	81105e28 	cmpgeui	r4,r16,16760
811053f8:	81105e18 	cmpnei	r4,r16,16760
811053fc:	81105ecc 	andi	r4,r16,16763
81105400:	81105ecc 	andi	r4,r16,16763
81105404:	81105e34 	orhi	r4,r16,16760
81105408:	81105ecc 	andi	r4,r16,16763
8110540c:	81105e44 	addi	r4,r16,16761
81105410:	81105d18 	cmpnei	r4,r16,16756
81105414:	81105454 	ori	r4,r16,16721
81105418:	81105d38 	rdprs	r4,r16,16756
8110541c:	81105ecc 	andi	r4,r16,16763
81105420:	81105d44 	addi	r4,r16,16757
81105424:	81105ecc 	andi	r4,r16,16763
81105428:	81105da0 	cmpeqi	r4,r16,16758
8110542c:	81105ecc 	andi	r4,r16,16763
81105430:	81105ecc 	andi	r4,r16,16763
81105434:	81105db0 	cmpltui	r4,r16,16758
81105438:	d9003117 	ldw	r4,196(sp)
8110543c:	d8802d15 	stw	r2,180(sp)
81105440:	0109c83a 	sub	r4,zero,r4
81105444:	d9003115 	stw	r4,196(sp)
81105448:	94800114 	ori	r18,r18,4
8110544c:	ac400007 	ldb	r17,0(r21)
81105450:	003f9706 	br	811052b0 <__reset+0xfb0e52b0>
81105454:	00800c04 	movi	r2,48
81105458:	d9002d17 	ldw	r4,180(sp)
8110545c:	d9402917 	ldw	r5,164(sp)
81105460:	d8802705 	stb	r2,156(sp)
81105464:	00801e04 	movi	r2,120
81105468:	d8802745 	stb	r2,157(sp)
8110546c:	d8002785 	stb	zero,158(sp)
81105470:	20c00104 	addi	r3,r4,4
81105474:	24c00017 	ldw	r19,0(r4)
81105478:	002d883a 	mov	r22,zero
8110547c:	90800094 	ori	r2,r18,2
81105480:	28029a16 	blt	r5,zero,81105eec <___vfprintf_internal_r+0xdc0>
81105484:	00bfdfc4 	movi	r2,-129
81105488:	90a4703a 	and	r18,r18,r2
8110548c:	d8c02d15 	stw	r3,180(sp)
81105490:	94800094 	ori	r18,r18,2
81105494:	9802871e 	bne	r19,zero,81105eb4 <___vfprintf_internal_r+0xd88>
81105498:	00a044b4 	movhi	r2,33042
8110549c:	10a5fe04 	addi	r2,r2,-26632
811054a0:	d8803915 	stw	r2,228(sp)
811054a4:	04401e04 	movi	r17,120
811054a8:	d8802917 	ldw	r2,164(sp)
811054ac:	0039883a 	mov	fp,zero
811054b0:	1001e926 	beq	r2,zero,81105c58 <___vfprintf_internal_r+0xb2c>
811054b4:	0027883a 	mov	r19,zero
811054b8:	002d883a 	mov	r22,zero
811054bc:	00020506 	br	81105cd4 <___vfprintf_internal_r+0xba8>
811054c0:	d9002c17 	ldw	r4,176(sp)
811054c4:	b80b883a 	mov	r5,r23
811054c8:	11073fc0 	call	811073fc <__swsetup_r>
811054cc:	1005ac1e 	bne	r2,zero,81106b80 <___vfprintf_internal_r+0x1a54>
811054d0:	b880030b 	ldhu	r2,12(r23)
811054d4:	00c00284 	movi	r3,10
811054d8:	1080068c 	andi	r2,r2,26
811054dc:	10ff3c1e 	bne	r2,r3,811051d0 <__reset+0xfb0e51d0>
811054e0:	b880038f 	ldh	r2,14(r23)
811054e4:	103f3a16 	blt	r2,zero,811051d0 <__reset+0xfb0e51d0>
811054e8:	d9c02d17 	ldw	r7,180(sp)
811054ec:	d9002c17 	ldw	r4,176(sp)
811054f0:	a80d883a 	mov	r6,r21
811054f4:	b80b883a 	mov	r5,r23
811054f8:	11073400 	call	81107340 <__sbprintf>
811054fc:	00001106 	br	81105544 <___vfprintf_internal_r+0x418>
81105500:	d9002c17 	ldw	r4,176(sp)
81105504:	d9801e04 	addi	r6,sp,120
81105508:	b80b883a 	mov	r5,r23
8110550c:	110db540 	call	8110db54 <__sprint_r>
81105510:	1000081e 	bne	r2,zero,81105534 <___vfprintf_internal_r+0x408>
81105514:	da000404 	addi	r8,sp,16
81105518:	003f5306 	br	81105268 <__reset+0xfb0e5268>
8110551c:	d8802017 	ldw	r2,128(sp)
81105520:	10000426 	beq	r2,zero,81105534 <___vfprintf_internal_r+0x408>
81105524:	d9002c17 	ldw	r4,176(sp)
81105528:	d9801e04 	addi	r6,sp,120
8110552c:	b80b883a 	mov	r5,r23
81105530:	110db540 	call	8110db54 <__sprint_r>
81105534:	b880030b 	ldhu	r2,12(r23)
81105538:	1080100c 	andi	r2,r2,64
8110553c:	1005901e 	bne	r2,zero,81106b80 <___vfprintf_internal_r+0x1a54>
81105540:	d8802f17 	ldw	r2,188(sp)
81105544:	dfc04717 	ldw	ra,284(sp)
81105548:	df004617 	ldw	fp,280(sp)
8110554c:	ddc04517 	ldw	r23,276(sp)
81105550:	dd804417 	ldw	r22,272(sp)
81105554:	dd404317 	ldw	r21,268(sp)
81105558:	dd004217 	ldw	r20,264(sp)
8110555c:	dcc04117 	ldw	r19,260(sp)
81105560:	dc804017 	ldw	r18,256(sp)
81105564:	dc403f17 	ldw	r17,252(sp)
81105568:	dc003e17 	ldw	r16,248(sp)
8110556c:	dec04804 	addi	sp,sp,288
81105570:	f800283a 	ret
81105574:	d9002c17 	ldw	r4,176(sp)
81105578:	11093d00 	call	811093d0 <__sinit>
8110557c:	003f0406 	br	81105190 <__reset+0xfb0e5190>
81105580:	d8802d17 	ldw	r2,180(sp)
81105584:	d9002d17 	ldw	r4,180(sp)
81105588:	10800017 	ldw	r2,0(r2)
8110558c:	d8803115 	stw	r2,196(sp)
81105590:	20800104 	addi	r2,r4,4
81105594:	d9003117 	ldw	r4,196(sp)
81105598:	203fa716 	blt	r4,zero,81105438 <__reset+0xfb0e5438>
8110559c:	d8802d15 	stw	r2,180(sp)
811055a0:	ac400007 	ldb	r17,0(r21)
811055a4:	003f4206 	br	811052b0 <__reset+0xfb0e52b0>
811055a8:	ac400007 	ldb	r17,0(r21)
811055ac:	aac00044 	addi	r11,r21,1
811055b0:	8a872826 	beq	r17,r10,81107254 <___vfprintf_internal_r+0x2128>
811055b4:	88bff404 	addi	r2,r17,-48
811055b8:	0009883a 	mov	r4,zero
811055bc:	30867d36 	bltu	r6,r2,81106fb4 <___vfprintf_internal_r+0x1e88>
811055c0:	5c400007 	ldb	r17,0(r11)
811055c4:	210002a4 	muli	r4,r4,10
811055c8:	5d400044 	addi	r21,r11,1
811055cc:	a817883a 	mov	r11,r21
811055d0:	2089883a 	add	r4,r4,r2
811055d4:	88bff404 	addi	r2,r17,-48
811055d8:	30bff92e 	bgeu	r6,r2,811055c0 <__reset+0xfb0e55c0>
811055dc:	2005c916 	blt	r4,zero,81106d04 <___vfprintf_internal_r+0x1bd8>
811055e0:	d9002915 	stw	r4,164(sp)
811055e4:	003f3306 	br	811052b4 <__reset+0xfb0e52b4>
811055e8:	94802014 	ori	r18,r18,128
811055ec:	ac400007 	ldb	r17,0(r21)
811055f0:	003f2f06 	br	811052b0 <__reset+0xfb0e52b0>
811055f4:	a809883a 	mov	r4,r21
811055f8:	d8003115 	stw	zero,196(sp)
811055fc:	88bff404 	addi	r2,r17,-48
81105600:	0017883a 	mov	r11,zero
81105604:	24400007 	ldb	r17,0(r4)
81105608:	5ac002a4 	muli	r11,r11,10
8110560c:	ad400044 	addi	r21,r21,1
81105610:	a809883a 	mov	r4,r21
81105614:	12d7883a 	add	r11,r2,r11
81105618:	88bff404 	addi	r2,r17,-48
8110561c:	30bff92e 	bgeu	r6,r2,81105604 <__reset+0xfb0e5604>
81105620:	dac03115 	stw	r11,196(sp)
81105624:	003f2306 	br	811052b4 <__reset+0xfb0e52b4>
81105628:	18c03fcc 	andi	r3,r3,255
8110562c:	18072b1e 	bne	r3,zero,811072dc <___vfprintf_internal_r+0x21b0>
81105630:	94800414 	ori	r18,r18,16
81105634:	9080080c 	andi	r2,r18,32
81105638:	10037b26 	beq	r2,zero,81106428 <___vfprintf_internal_r+0x12fc>
8110563c:	d9402d17 	ldw	r5,180(sp)
81105640:	28800117 	ldw	r2,4(r5)
81105644:	2cc00017 	ldw	r19,0(r5)
81105648:	29400204 	addi	r5,r5,8
8110564c:	d9402d15 	stw	r5,180(sp)
81105650:	102d883a 	mov	r22,r2
81105654:	10044b16 	blt	r2,zero,81106784 <___vfprintf_internal_r+0x1658>
81105658:	d9402917 	ldw	r5,164(sp)
8110565c:	df002783 	ldbu	fp,158(sp)
81105660:	2803bc16 	blt	r5,zero,81106554 <___vfprintf_internal_r+0x1428>
81105664:	00ffdfc4 	movi	r3,-129
81105668:	9d84b03a 	or	r2,r19,r22
8110566c:	90e4703a 	and	r18,r18,r3
81105670:	10017726 	beq	r2,zero,81105c50 <___vfprintf_internal_r+0xb24>
81105674:	b0038326 	beq	r22,zero,81106484 <___vfprintf_internal_r+0x1358>
81105678:	dc402a15 	stw	r17,168(sp)
8110567c:	dc001e04 	addi	r16,sp,120
81105680:	b023883a 	mov	r17,r22
81105684:	402d883a 	mov	r22,r8
81105688:	9809883a 	mov	r4,r19
8110568c:	880b883a 	mov	r5,r17
81105690:	01800284 	movi	r6,10
81105694:	000f883a 	mov	r7,zero
81105698:	110ff4c0 	call	8110ff4c <__umoddi3>
8110569c:	10800c04 	addi	r2,r2,48
811056a0:	843fffc4 	addi	r16,r16,-1
811056a4:	9809883a 	mov	r4,r19
811056a8:	880b883a 	mov	r5,r17
811056ac:	80800005 	stb	r2,0(r16)
811056b0:	01800284 	movi	r6,10
811056b4:	000f883a 	mov	r7,zero
811056b8:	110f9d40 	call	8110f9d4 <__udivdi3>
811056bc:	1027883a 	mov	r19,r2
811056c0:	10c4b03a 	or	r2,r2,r3
811056c4:	1823883a 	mov	r17,r3
811056c8:	103fef1e 	bne	r2,zero,81105688 <__reset+0xfb0e5688>
811056cc:	d8c02817 	ldw	r3,160(sp)
811056d0:	dc402a17 	ldw	r17,168(sp)
811056d4:	b011883a 	mov	r8,r22
811056d8:	1c07c83a 	sub	r3,r3,r16
811056dc:	d8c02e15 	stw	r3,184(sp)
811056e0:	00005906 	br	81105848 <___vfprintf_internal_r+0x71c>
811056e4:	18c03fcc 	andi	r3,r3,255
811056e8:	1806fa1e 	bne	r3,zero,811072d4 <___vfprintf_internal_r+0x21a8>
811056ec:	9080020c 	andi	r2,r18,8
811056f0:	10048a26 	beq	r2,zero,8110691c <___vfprintf_internal_r+0x17f0>
811056f4:	d8c02d17 	ldw	r3,180(sp)
811056f8:	d9002d17 	ldw	r4,180(sp)
811056fc:	d9402d17 	ldw	r5,180(sp)
81105700:	18c00017 	ldw	r3,0(r3)
81105704:	21000117 	ldw	r4,4(r4)
81105708:	29400204 	addi	r5,r5,8
8110570c:	d8c03615 	stw	r3,216(sp)
81105710:	d9003815 	stw	r4,224(sp)
81105714:	d9402d15 	stw	r5,180(sp)
81105718:	d9003617 	ldw	r4,216(sp)
8110571c:	d9403817 	ldw	r5,224(sp)
81105720:	da003d15 	stw	r8,244(sp)
81105724:	04000044 	movi	r16,1
81105728:	110c36c0 	call	8110c36c <__fpclassifyd>
8110572c:	da003d17 	ldw	r8,244(sp)
81105730:	14041f1e 	bne	r2,r16,811067b0 <___vfprintf_internal_r+0x1684>
81105734:	d9003617 	ldw	r4,216(sp)
81105738:	d9403817 	ldw	r5,224(sp)
8110573c:	000d883a 	mov	r6,zero
81105740:	000f883a 	mov	r7,zero
81105744:	11119300 	call	81111930 <__ledf2>
81105748:	da003d17 	ldw	r8,244(sp)
8110574c:	1005be16 	blt	r2,zero,81106e48 <___vfprintf_internal_r+0x1d1c>
81105750:	df002783 	ldbu	fp,158(sp)
81105754:	008011c4 	movi	r2,71
81105758:	1445330e 	bge	r2,r17,81106c28 <___vfprintf_internal_r+0x1afc>
8110575c:	042044b4 	movhi	r16,33042
81105760:	8425f604 	addi	r16,r16,-26664
81105764:	00c000c4 	movi	r3,3
81105768:	00bfdfc4 	movi	r2,-129
8110576c:	d8c02a15 	stw	r3,168(sp)
81105770:	90a4703a 	and	r18,r18,r2
81105774:	d8c02e15 	stw	r3,184(sp)
81105778:	d8002915 	stw	zero,164(sp)
8110577c:	d8003215 	stw	zero,200(sp)
81105780:	00003706 	br	81105860 <___vfprintf_internal_r+0x734>
81105784:	94800214 	ori	r18,r18,8
81105788:	ac400007 	ldb	r17,0(r21)
8110578c:	003ec806 	br	811052b0 <__reset+0xfb0e52b0>
81105790:	18c03fcc 	andi	r3,r3,255
81105794:	1806db1e 	bne	r3,zero,81107304 <___vfprintf_internal_r+0x21d8>
81105798:	94800414 	ori	r18,r18,16
8110579c:	9080080c 	andi	r2,r18,32
811057a0:	1002d826 	beq	r2,zero,81106304 <___vfprintf_internal_r+0x11d8>
811057a4:	d9402d17 	ldw	r5,180(sp)
811057a8:	d8c02917 	ldw	r3,164(sp)
811057ac:	d8002785 	stb	zero,158(sp)
811057b0:	28800204 	addi	r2,r5,8
811057b4:	2cc00017 	ldw	r19,0(r5)
811057b8:	2d800117 	ldw	r22,4(r5)
811057bc:	18048f16 	blt	r3,zero,811069fc <___vfprintf_internal_r+0x18d0>
811057c0:	013fdfc4 	movi	r4,-129
811057c4:	9d86b03a 	or	r3,r19,r22
811057c8:	d8802d15 	stw	r2,180(sp)
811057cc:	9124703a 	and	r18,r18,r4
811057d0:	1802d91e 	bne	r3,zero,81106338 <___vfprintf_internal_r+0x120c>
811057d4:	d8c02917 	ldw	r3,164(sp)
811057d8:	0039883a 	mov	fp,zero
811057dc:	1805c326 	beq	r3,zero,81106eec <___vfprintf_internal_r+0x1dc0>
811057e0:	0027883a 	mov	r19,zero
811057e4:	002d883a 	mov	r22,zero
811057e8:	dc001e04 	addi	r16,sp,120
811057ec:	9806d0fa 	srli	r3,r19,3
811057f0:	b008977a 	slli	r4,r22,29
811057f4:	b02cd0fa 	srli	r22,r22,3
811057f8:	9cc001cc 	andi	r19,r19,7
811057fc:	98800c04 	addi	r2,r19,48
81105800:	843fffc4 	addi	r16,r16,-1
81105804:	20e6b03a 	or	r19,r4,r3
81105808:	80800005 	stb	r2,0(r16)
8110580c:	9d86b03a 	or	r3,r19,r22
81105810:	183ff61e 	bne	r3,zero,811057ec <__reset+0xfb0e57ec>
81105814:	90c0004c 	andi	r3,r18,1
81105818:	18013b26 	beq	r3,zero,81105d08 <___vfprintf_internal_r+0xbdc>
8110581c:	10803fcc 	andi	r2,r2,255
81105820:	1080201c 	xori	r2,r2,128
81105824:	10bfe004 	addi	r2,r2,-128
81105828:	00c00c04 	movi	r3,48
8110582c:	10c13626 	beq	r2,r3,81105d08 <___vfprintf_internal_r+0xbdc>
81105830:	80ffffc5 	stb	r3,-1(r16)
81105834:	d8c02817 	ldw	r3,160(sp)
81105838:	80bfffc4 	addi	r2,r16,-1
8110583c:	1021883a 	mov	r16,r2
81105840:	1887c83a 	sub	r3,r3,r2
81105844:	d8c02e15 	stw	r3,184(sp)
81105848:	d8802e17 	ldw	r2,184(sp)
8110584c:	d9002917 	ldw	r4,164(sp)
81105850:	1100010e 	bge	r2,r4,81105858 <___vfprintf_internal_r+0x72c>
81105854:	2005883a 	mov	r2,r4
81105858:	d8802a15 	stw	r2,168(sp)
8110585c:	d8003215 	stw	zero,200(sp)
81105860:	e7003fcc 	andi	fp,fp,255
81105864:	e700201c 	xori	fp,fp,128
81105868:	e73fe004 	addi	fp,fp,-128
8110586c:	e0000326 	beq	fp,zero,8110587c <___vfprintf_internal_r+0x750>
81105870:	d8c02a17 	ldw	r3,168(sp)
81105874:	18c00044 	addi	r3,r3,1
81105878:	d8c02a15 	stw	r3,168(sp)
8110587c:	90c0008c 	andi	r3,r18,2
81105880:	d8c02b15 	stw	r3,172(sp)
81105884:	18000326 	beq	r3,zero,81105894 <___vfprintf_internal_r+0x768>
81105888:	d8c02a17 	ldw	r3,168(sp)
8110588c:	18c00084 	addi	r3,r3,2
81105890:	d8c02a15 	stw	r3,168(sp)
81105894:	90c0210c 	andi	r3,r18,132
81105898:	d8c03015 	stw	r3,192(sp)
8110589c:	1801a31e 	bne	r3,zero,81105f2c <___vfprintf_internal_r+0xe00>
811058a0:	d9003117 	ldw	r4,196(sp)
811058a4:	d8c02a17 	ldw	r3,168(sp)
811058a8:	20e7c83a 	sub	r19,r4,r3
811058ac:	04c19f0e 	bge	zero,r19,81105f2c <___vfprintf_internal_r+0xe00>
811058b0:	02400404 	movi	r9,16
811058b4:	d8c02017 	ldw	r3,128(sp)
811058b8:	d8801f17 	ldw	r2,124(sp)
811058bc:	4cc50d0e 	bge	r9,r19,81106cf4 <___vfprintf_internal_r+0x1bc8>
811058c0:	016044b4 	movhi	r5,33042
811058c4:	29661184 	addi	r5,r5,-26554
811058c8:	dc403b15 	stw	r17,236(sp)
811058cc:	d9403515 	stw	r5,212(sp)
811058d0:	9823883a 	mov	r17,r19
811058d4:	482d883a 	mov	r22,r9
811058d8:	9027883a 	mov	r19,r18
811058dc:	070001c4 	movi	fp,7
811058e0:	8025883a 	mov	r18,r16
811058e4:	dc002c17 	ldw	r16,176(sp)
811058e8:	00000306 	br	811058f8 <___vfprintf_internal_r+0x7cc>
811058ec:	8c7ffc04 	addi	r17,r17,-16
811058f0:	42000204 	addi	r8,r8,8
811058f4:	b440130e 	bge	r22,r17,81105944 <___vfprintf_internal_r+0x818>
811058f8:	012044b4 	movhi	r4,33042
811058fc:	18c00404 	addi	r3,r3,16
81105900:	10800044 	addi	r2,r2,1
81105904:	21261184 	addi	r4,r4,-26554
81105908:	41000015 	stw	r4,0(r8)
8110590c:	45800115 	stw	r22,4(r8)
81105910:	d8c02015 	stw	r3,128(sp)
81105914:	d8801f15 	stw	r2,124(sp)
81105918:	e0bff40e 	bge	fp,r2,811058ec <__reset+0xfb0e58ec>
8110591c:	d9801e04 	addi	r6,sp,120
81105920:	b80b883a 	mov	r5,r23
81105924:	8009883a 	mov	r4,r16
81105928:	110db540 	call	8110db54 <__sprint_r>
8110592c:	103f011e 	bne	r2,zero,81105534 <__reset+0xfb0e5534>
81105930:	8c7ffc04 	addi	r17,r17,-16
81105934:	d8c02017 	ldw	r3,128(sp)
81105938:	d8801f17 	ldw	r2,124(sp)
8110593c:	da000404 	addi	r8,sp,16
81105940:	b47fed16 	blt	r22,r17,811058f8 <__reset+0xfb0e58f8>
81105944:	9021883a 	mov	r16,r18
81105948:	9825883a 	mov	r18,r19
8110594c:	8827883a 	mov	r19,r17
81105950:	dc403b17 	ldw	r17,236(sp)
81105954:	d9403517 	ldw	r5,212(sp)
81105958:	98c7883a 	add	r3,r19,r3
8110595c:	10800044 	addi	r2,r2,1
81105960:	41400015 	stw	r5,0(r8)
81105964:	44c00115 	stw	r19,4(r8)
81105968:	d8c02015 	stw	r3,128(sp)
8110596c:	d8801f15 	stw	r2,124(sp)
81105970:	010001c4 	movi	r4,7
81105974:	2082a316 	blt	r4,r2,81106404 <___vfprintf_internal_r+0x12d8>
81105978:	df002787 	ldb	fp,158(sp)
8110597c:	42000204 	addi	r8,r8,8
81105980:	e0000c26 	beq	fp,zero,811059b4 <___vfprintf_internal_r+0x888>
81105984:	d8801f17 	ldw	r2,124(sp)
81105988:	d9002784 	addi	r4,sp,158
8110598c:	18c00044 	addi	r3,r3,1
81105990:	10800044 	addi	r2,r2,1
81105994:	41000015 	stw	r4,0(r8)
81105998:	01000044 	movi	r4,1
8110599c:	41000115 	stw	r4,4(r8)
811059a0:	d8c02015 	stw	r3,128(sp)
811059a4:	d8801f15 	stw	r2,124(sp)
811059a8:	010001c4 	movi	r4,7
811059ac:	20823c16 	blt	r4,r2,811062a0 <___vfprintf_internal_r+0x1174>
811059b0:	42000204 	addi	r8,r8,8
811059b4:	d8802b17 	ldw	r2,172(sp)
811059b8:	10000c26 	beq	r2,zero,811059ec <___vfprintf_internal_r+0x8c0>
811059bc:	d8801f17 	ldw	r2,124(sp)
811059c0:	d9002704 	addi	r4,sp,156
811059c4:	18c00084 	addi	r3,r3,2
811059c8:	10800044 	addi	r2,r2,1
811059cc:	41000015 	stw	r4,0(r8)
811059d0:	01000084 	movi	r4,2
811059d4:	41000115 	stw	r4,4(r8)
811059d8:	d8c02015 	stw	r3,128(sp)
811059dc:	d8801f15 	stw	r2,124(sp)
811059e0:	010001c4 	movi	r4,7
811059e4:	20823616 	blt	r4,r2,811062c0 <___vfprintf_internal_r+0x1194>
811059e8:	42000204 	addi	r8,r8,8
811059ec:	d9003017 	ldw	r4,192(sp)
811059f0:	00802004 	movi	r2,128
811059f4:	20819926 	beq	r4,r2,8110605c <___vfprintf_internal_r+0xf30>
811059f8:	d9402917 	ldw	r5,164(sp)
811059fc:	d8802e17 	ldw	r2,184(sp)
81105a00:	28adc83a 	sub	r22,r5,r2
81105a04:	0580310e 	bge	zero,r22,81105acc <___vfprintf_internal_r+0x9a0>
81105a08:	07000404 	movi	fp,16
81105a0c:	d8801f17 	ldw	r2,124(sp)
81105a10:	e584140e 	bge	fp,r22,81106a64 <___vfprintf_internal_r+0x1938>
81105a14:	016044b4 	movhi	r5,33042
81105a18:	29660d84 	addi	r5,r5,-26570
81105a1c:	dc402915 	stw	r17,164(sp)
81105a20:	d9402b15 	stw	r5,172(sp)
81105a24:	b023883a 	mov	r17,r22
81105a28:	04c001c4 	movi	r19,7
81105a2c:	a82d883a 	mov	r22,r21
81105a30:	902b883a 	mov	r21,r18
81105a34:	8025883a 	mov	r18,r16
81105a38:	dc002c17 	ldw	r16,176(sp)
81105a3c:	00000306 	br	81105a4c <___vfprintf_internal_r+0x920>
81105a40:	8c7ffc04 	addi	r17,r17,-16
81105a44:	42000204 	addi	r8,r8,8
81105a48:	e440110e 	bge	fp,r17,81105a90 <___vfprintf_internal_r+0x964>
81105a4c:	18c00404 	addi	r3,r3,16
81105a50:	10800044 	addi	r2,r2,1
81105a54:	45000015 	stw	r20,0(r8)
81105a58:	47000115 	stw	fp,4(r8)
81105a5c:	d8c02015 	stw	r3,128(sp)
81105a60:	d8801f15 	stw	r2,124(sp)
81105a64:	98bff60e 	bge	r19,r2,81105a40 <__reset+0xfb0e5a40>
81105a68:	d9801e04 	addi	r6,sp,120
81105a6c:	b80b883a 	mov	r5,r23
81105a70:	8009883a 	mov	r4,r16
81105a74:	110db540 	call	8110db54 <__sprint_r>
81105a78:	103eae1e 	bne	r2,zero,81105534 <__reset+0xfb0e5534>
81105a7c:	8c7ffc04 	addi	r17,r17,-16
81105a80:	d8c02017 	ldw	r3,128(sp)
81105a84:	d8801f17 	ldw	r2,124(sp)
81105a88:	da000404 	addi	r8,sp,16
81105a8c:	e47fef16 	blt	fp,r17,81105a4c <__reset+0xfb0e5a4c>
81105a90:	9021883a 	mov	r16,r18
81105a94:	a825883a 	mov	r18,r21
81105a98:	b02b883a 	mov	r21,r22
81105a9c:	882d883a 	mov	r22,r17
81105aa0:	dc402917 	ldw	r17,164(sp)
81105aa4:	d9002b17 	ldw	r4,172(sp)
81105aa8:	1d87883a 	add	r3,r3,r22
81105aac:	10800044 	addi	r2,r2,1
81105ab0:	41000015 	stw	r4,0(r8)
81105ab4:	45800115 	stw	r22,4(r8)
81105ab8:	d8c02015 	stw	r3,128(sp)
81105abc:	d8801f15 	stw	r2,124(sp)
81105ac0:	010001c4 	movi	r4,7
81105ac4:	2081ee16 	blt	r4,r2,81106280 <___vfprintf_internal_r+0x1154>
81105ac8:	42000204 	addi	r8,r8,8
81105acc:	9080400c 	andi	r2,r18,256
81105ad0:	1001181e 	bne	r2,zero,81105f34 <___vfprintf_internal_r+0xe08>
81105ad4:	d9402e17 	ldw	r5,184(sp)
81105ad8:	d8801f17 	ldw	r2,124(sp)
81105adc:	44000015 	stw	r16,0(r8)
81105ae0:	1947883a 	add	r3,r3,r5
81105ae4:	10800044 	addi	r2,r2,1
81105ae8:	41400115 	stw	r5,4(r8)
81105aec:	d8c02015 	stw	r3,128(sp)
81105af0:	d8801f15 	stw	r2,124(sp)
81105af4:	010001c4 	movi	r4,7
81105af8:	2081d316 	blt	r4,r2,81106248 <___vfprintf_internal_r+0x111c>
81105afc:	42000204 	addi	r8,r8,8
81105b00:	9480010c 	andi	r18,r18,4
81105b04:	90003226 	beq	r18,zero,81105bd0 <___vfprintf_internal_r+0xaa4>
81105b08:	d9403117 	ldw	r5,196(sp)
81105b0c:	d8802a17 	ldw	r2,168(sp)
81105b10:	28a1c83a 	sub	r16,r5,r2
81105b14:	04002e0e 	bge	zero,r16,81105bd0 <___vfprintf_internal_r+0xaa4>
81105b18:	04400404 	movi	r17,16
81105b1c:	d8801f17 	ldw	r2,124(sp)
81105b20:	8c04a20e 	bge	r17,r16,81106dac <___vfprintf_internal_r+0x1c80>
81105b24:	016044b4 	movhi	r5,33042
81105b28:	29661184 	addi	r5,r5,-26554
81105b2c:	d9403515 	stw	r5,212(sp)
81105b30:	048001c4 	movi	r18,7
81105b34:	dcc02c17 	ldw	r19,176(sp)
81105b38:	00000306 	br	81105b48 <___vfprintf_internal_r+0xa1c>
81105b3c:	843ffc04 	addi	r16,r16,-16
81105b40:	42000204 	addi	r8,r8,8
81105b44:	8c00130e 	bge	r17,r16,81105b94 <___vfprintf_internal_r+0xa68>
81105b48:	012044b4 	movhi	r4,33042
81105b4c:	18c00404 	addi	r3,r3,16
81105b50:	10800044 	addi	r2,r2,1
81105b54:	21261184 	addi	r4,r4,-26554
81105b58:	41000015 	stw	r4,0(r8)
81105b5c:	44400115 	stw	r17,4(r8)
81105b60:	d8c02015 	stw	r3,128(sp)
81105b64:	d8801f15 	stw	r2,124(sp)
81105b68:	90bff40e 	bge	r18,r2,81105b3c <__reset+0xfb0e5b3c>
81105b6c:	d9801e04 	addi	r6,sp,120
81105b70:	b80b883a 	mov	r5,r23
81105b74:	9809883a 	mov	r4,r19
81105b78:	110db540 	call	8110db54 <__sprint_r>
81105b7c:	103e6d1e 	bne	r2,zero,81105534 <__reset+0xfb0e5534>
81105b80:	843ffc04 	addi	r16,r16,-16
81105b84:	d8c02017 	ldw	r3,128(sp)
81105b88:	d8801f17 	ldw	r2,124(sp)
81105b8c:	da000404 	addi	r8,sp,16
81105b90:	8c3fed16 	blt	r17,r16,81105b48 <__reset+0xfb0e5b48>
81105b94:	d9403517 	ldw	r5,212(sp)
81105b98:	1c07883a 	add	r3,r3,r16
81105b9c:	10800044 	addi	r2,r2,1
81105ba0:	41400015 	stw	r5,0(r8)
81105ba4:	44000115 	stw	r16,4(r8)
81105ba8:	d8c02015 	stw	r3,128(sp)
81105bac:	d8801f15 	stw	r2,124(sp)
81105bb0:	010001c4 	movi	r4,7
81105bb4:	2080060e 	bge	r4,r2,81105bd0 <___vfprintf_internal_r+0xaa4>
81105bb8:	d9002c17 	ldw	r4,176(sp)
81105bbc:	d9801e04 	addi	r6,sp,120
81105bc0:	b80b883a 	mov	r5,r23
81105bc4:	110db540 	call	8110db54 <__sprint_r>
81105bc8:	103e5a1e 	bne	r2,zero,81105534 <__reset+0xfb0e5534>
81105bcc:	d8c02017 	ldw	r3,128(sp)
81105bd0:	d8803117 	ldw	r2,196(sp)
81105bd4:	d9002a17 	ldw	r4,168(sp)
81105bd8:	1100010e 	bge	r2,r4,81105be0 <___vfprintf_internal_r+0xab4>
81105bdc:	2005883a 	mov	r2,r4
81105be0:	d9402f17 	ldw	r5,188(sp)
81105be4:	288b883a 	add	r5,r5,r2
81105be8:	d9402f15 	stw	r5,188(sp)
81105bec:	18019e1e 	bne	r3,zero,81106268 <___vfprintf_internal_r+0x113c>
81105bf0:	a8800007 	ldb	r2,0(r21)
81105bf4:	d8001f15 	stw	zero,124(sp)
81105bf8:	da000404 	addi	r8,sp,16
81105bfc:	103d851e 	bne	r2,zero,81105214 <__reset+0xfb0e5214>
81105c00:	a821883a 	mov	r16,r21
81105c04:	003d9b06 	br	81105274 <__reset+0xfb0e5274>
81105c08:	18c03fcc 	andi	r3,r3,255
81105c0c:	1805c11e 	bne	r3,zero,81107314 <___vfprintf_internal_r+0x21e8>
81105c10:	94800414 	ori	r18,r18,16
81105c14:	9080080c 	andi	r2,r18,32
81105c18:	10020c26 	beq	r2,zero,8110644c <___vfprintf_internal_r+0x1320>
81105c1c:	d8802d17 	ldw	r2,180(sp)
81105c20:	d9002917 	ldw	r4,164(sp)
81105c24:	d8002785 	stb	zero,158(sp)
81105c28:	10c00204 	addi	r3,r2,8
81105c2c:	14c00017 	ldw	r19,0(r2)
81105c30:	15800117 	ldw	r22,4(r2)
81105c34:	20040f16 	blt	r4,zero,81106c74 <___vfprintf_internal_r+0x1b48>
81105c38:	013fdfc4 	movi	r4,-129
81105c3c:	9d84b03a 	or	r2,r19,r22
81105c40:	d8c02d15 	stw	r3,180(sp)
81105c44:	9124703a 	and	r18,r18,r4
81105c48:	0039883a 	mov	fp,zero
81105c4c:	103e891e 	bne	r2,zero,81105674 <__reset+0xfb0e5674>
81105c50:	d9002917 	ldw	r4,164(sp)
81105c54:	2002c11e 	bne	r4,zero,8110675c <___vfprintf_internal_r+0x1630>
81105c58:	d8002915 	stw	zero,164(sp)
81105c5c:	d8002e15 	stw	zero,184(sp)
81105c60:	dc001e04 	addi	r16,sp,120
81105c64:	003ef806 	br	81105848 <__reset+0xfb0e5848>
81105c68:	18c03fcc 	andi	r3,r3,255
81105c6c:	18059d1e 	bne	r3,zero,811072e4 <___vfprintf_internal_r+0x21b8>
81105c70:	016044b4 	movhi	r5,33042
81105c74:	2965f904 	addi	r5,r5,-26652
81105c78:	d9403915 	stw	r5,228(sp)
81105c7c:	9080080c 	andi	r2,r18,32
81105c80:	10005226 	beq	r2,zero,81105dcc <___vfprintf_internal_r+0xca0>
81105c84:	d8802d17 	ldw	r2,180(sp)
81105c88:	14c00017 	ldw	r19,0(r2)
81105c8c:	15800117 	ldw	r22,4(r2)
81105c90:	10800204 	addi	r2,r2,8
81105c94:	d8802d15 	stw	r2,180(sp)
81105c98:	9080004c 	andi	r2,r18,1
81105c9c:	10019026 	beq	r2,zero,811062e0 <___vfprintf_internal_r+0x11b4>
81105ca0:	9d84b03a 	or	r2,r19,r22
81105ca4:	10036926 	beq	r2,zero,81106a4c <___vfprintf_internal_r+0x1920>
81105ca8:	d8c02917 	ldw	r3,164(sp)
81105cac:	00800c04 	movi	r2,48
81105cb0:	d8802705 	stb	r2,156(sp)
81105cb4:	dc402745 	stb	r17,157(sp)
81105cb8:	d8002785 	stb	zero,158(sp)
81105cbc:	90800094 	ori	r2,r18,2
81105cc0:	18045d16 	blt	r3,zero,81106e38 <___vfprintf_internal_r+0x1d0c>
81105cc4:	00bfdfc4 	movi	r2,-129
81105cc8:	90a4703a 	and	r18,r18,r2
81105ccc:	94800094 	ori	r18,r18,2
81105cd0:	0039883a 	mov	fp,zero
81105cd4:	d9003917 	ldw	r4,228(sp)
81105cd8:	dc001e04 	addi	r16,sp,120
81105cdc:	988003cc 	andi	r2,r19,15
81105ce0:	b006973a 	slli	r3,r22,28
81105ce4:	2085883a 	add	r2,r4,r2
81105ce8:	9826d13a 	srli	r19,r19,4
81105cec:	10800003 	ldbu	r2,0(r2)
81105cf0:	b02cd13a 	srli	r22,r22,4
81105cf4:	843fffc4 	addi	r16,r16,-1
81105cf8:	1ce6b03a 	or	r19,r3,r19
81105cfc:	80800005 	stb	r2,0(r16)
81105d00:	9d84b03a 	or	r2,r19,r22
81105d04:	103ff51e 	bne	r2,zero,81105cdc <__reset+0xfb0e5cdc>
81105d08:	d8c02817 	ldw	r3,160(sp)
81105d0c:	1c07c83a 	sub	r3,r3,r16
81105d10:	d8c02e15 	stw	r3,184(sp)
81105d14:	003ecc06 	br	81105848 <__reset+0xfb0e5848>
81105d18:	18c03fcc 	andi	r3,r3,255
81105d1c:	183e9f26 	beq	r3,zero,8110579c <__reset+0xfb0e579c>
81105d20:	d9c02785 	stb	r7,158(sp)
81105d24:	003e9d06 	br	8110579c <__reset+0xfb0e579c>
81105d28:	00c00044 	movi	r3,1
81105d2c:	01c00ac4 	movi	r7,43
81105d30:	ac400007 	ldb	r17,0(r21)
81105d34:	003d5e06 	br	811052b0 <__reset+0xfb0e52b0>
81105d38:	94800814 	ori	r18,r18,32
81105d3c:	ac400007 	ldb	r17,0(r21)
81105d40:	003d5b06 	br	811052b0 <__reset+0xfb0e52b0>
81105d44:	d8c02d17 	ldw	r3,180(sp)
81105d48:	d8002785 	stb	zero,158(sp)
81105d4c:	1c000017 	ldw	r16,0(r3)
81105d50:	1cc00104 	addi	r19,r3,4
81105d54:	80041926 	beq	r16,zero,81106dbc <___vfprintf_internal_r+0x1c90>
81105d58:	d9002917 	ldw	r4,164(sp)
81105d5c:	2003d016 	blt	r4,zero,81106ca0 <___vfprintf_internal_r+0x1b74>
81105d60:	200d883a 	mov	r6,r4
81105d64:	000b883a 	mov	r5,zero
81105d68:	8009883a 	mov	r4,r16
81105d6c:	da003d15 	stw	r8,244(sp)
81105d70:	110a93c0 	call	8110a93c <memchr>
81105d74:	da003d17 	ldw	r8,244(sp)
81105d78:	10045426 	beq	r2,zero,81106ecc <___vfprintf_internal_r+0x1da0>
81105d7c:	1405c83a 	sub	r2,r2,r16
81105d80:	d8802e15 	stw	r2,184(sp)
81105d84:	1003cc16 	blt	r2,zero,81106cb8 <___vfprintf_internal_r+0x1b8c>
81105d88:	df002783 	ldbu	fp,158(sp)
81105d8c:	d8802a15 	stw	r2,168(sp)
81105d90:	dcc02d15 	stw	r19,180(sp)
81105d94:	d8002915 	stw	zero,164(sp)
81105d98:	d8003215 	stw	zero,200(sp)
81105d9c:	003eb006 	br	81105860 <__reset+0xfb0e5860>
81105da0:	18c03fcc 	andi	r3,r3,255
81105da4:	183f9b26 	beq	r3,zero,81105c14 <__reset+0xfb0e5c14>
81105da8:	d9c02785 	stb	r7,158(sp)
81105dac:	003f9906 	br	81105c14 <__reset+0xfb0e5c14>
81105db0:	18c03fcc 	andi	r3,r3,255
81105db4:	1805551e 	bne	r3,zero,8110730c <___vfprintf_internal_r+0x21e0>
81105db8:	016044b4 	movhi	r5,33042
81105dbc:	2965fe04 	addi	r5,r5,-26632
81105dc0:	d9403915 	stw	r5,228(sp)
81105dc4:	9080080c 	andi	r2,r18,32
81105dc8:	103fae1e 	bne	r2,zero,81105c84 <__reset+0xfb0e5c84>
81105dcc:	9080040c 	andi	r2,r18,16
81105dd0:	1002de26 	beq	r2,zero,8110694c <___vfprintf_internal_r+0x1820>
81105dd4:	d8c02d17 	ldw	r3,180(sp)
81105dd8:	002d883a 	mov	r22,zero
81105ddc:	1cc00017 	ldw	r19,0(r3)
81105de0:	18c00104 	addi	r3,r3,4
81105de4:	d8c02d15 	stw	r3,180(sp)
81105de8:	003fab06 	br	81105c98 <__reset+0xfb0e5c98>
81105dec:	38803fcc 	andi	r2,r7,255
81105df0:	1080201c 	xori	r2,r2,128
81105df4:	10bfe004 	addi	r2,r2,-128
81105df8:	1002d21e 	bne	r2,zero,81106944 <___vfprintf_internal_r+0x1818>
81105dfc:	00c00044 	movi	r3,1
81105e00:	01c00804 	movi	r7,32
81105e04:	ac400007 	ldb	r17,0(r21)
81105e08:	003d2906 	br	811052b0 <__reset+0xfb0e52b0>
81105e0c:	94800054 	ori	r18,r18,1
81105e10:	ac400007 	ldb	r17,0(r21)
81105e14:	003d2606 	br	811052b0 <__reset+0xfb0e52b0>
81105e18:	18c03fcc 	andi	r3,r3,255
81105e1c:	183e0526 	beq	r3,zero,81105634 <__reset+0xfb0e5634>
81105e20:	d9c02785 	stb	r7,158(sp)
81105e24:	003e0306 	br	81105634 <__reset+0xfb0e5634>
81105e28:	94801014 	ori	r18,r18,64
81105e2c:	ac400007 	ldb	r17,0(r21)
81105e30:	003d1f06 	br	811052b0 <__reset+0xfb0e52b0>
81105e34:	ac400007 	ldb	r17,0(r21)
81105e38:	8a438726 	beq	r17,r9,81106c58 <___vfprintf_internal_r+0x1b2c>
81105e3c:	94800414 	ori	r18,r18,16
81105e40:	003d1b06 	br	811052b0 <__reset+0xfb0e52b0>
81105e44:	18c03fcc 	andi	r3,r3,255
81105e48:	1805341e 	bne	r3,zero,8110731c <___vfprintf_internal_r+0x21f0>
81105e4c:	9080080c 	andi	r2,r18,32
81105e50:	1002cd26 	beq	r2,zero,81106988 <___vfprintf_internal_r+0x185c>
81105e54:	d9402d17 	ldw	r5,180(sp)
81105e58:	d9002f17 	ldw	r4,188(sp)
81105e5c:	28800017 	ldw	r2,0(r5)
81105e60:	2007d7fa 	srai	r3,r4,31
81105e64:	29400104 	addi	r5,r5,4
81105e68:	d9402d15 	stw	r5,180(sp)
81105e6c:	11000015 	stw	r4,0(r2)
81105e70:	10c00115 	stw	r3,4(r2)
81105e74:	003ce506 	br	8110520c <__reset+0xfb0e520c>
81105e78:	d8c02d17 	ldw	r3,180(sp)
81105e7c:	d9002d17 	ldw	r4,180(sp)
81105e80:	d8002785 	stb	zero,158(sp)
81105e84:	18800017 	ldw	r2,0(r3)
81105e88:	21000104 	addi	r4,r4,4
81105e8c:	00c00044 	movi	r3,1
81105e90:	d8c02a15 	stw	r3,168(sp)
81105e94:	d8801405 	stb	r2,80(sp)
81105e98:	d9002d15 	stw	r4,180(sp)
81105e9c:	d8c02e15 	stw	r3,184(sp)
81105ea0:	d8002915 	stw	zero,164(sp)
81105ea4:	d8003215 	stw	zero,200(sp)
81105ea8:	dc001404 	addi	r16,sp,80
81105eac:	0039883a 	mov	fp,zero
81105eb0:	003e7206 	br	8110587c <__reset+0xfb0e587c>
81105eb4:	012044b4 	movhi	r4,33042
81105eb8:	2125fe04 	addi	r4,r4,-26632
81105ebc:	0039883a 	mov	fp,zero
81105ec0:	d9003915 	stw	r4,228(sp)
81105ec4:	04401e04 	movi	r17,120
81105ec8:	003f8206 	br	81105cd4 <__reset+0xfb0e5cd4>
81105ecc:	18c03fcc 	andi	r3,r3,255
81105ed0:	1805061e 	bne	r3,zero,811072ec <___vfprintf_internal_r+0x21c0>
81105ed4:	883d9126 	beq	r17,zero,8110551c <__reset+0xfb0e551c>
81105ed8:	00c00044 	movi	r3,1
81105edc:	d8c02a15 	stw	r3,168(sp)
81105ee0:	dc401405 	stb	r17,80(sp)
81105ee4:	d8002785 	stb	zero,158(sp)
81105ee8:	003fec06 	br	81105e9c <__reset+0xfb0e5e9c>
81105eec:	016044b4 	movhi	r5,33042
81105ef0:	2965fe04 	addi	r5,r5,-26632
81105ef4:	d9403915 	stw	r5,228(sp)
81105ef8:	d8c02d15 	stw	r3,180(sp)
81105efc:	1025883a 	mov	r18,r2
81105f00:	04401e04 	movi	r17,120
81105f04:	9d84b03a 	or	r2,r19,r22
81105f08:	1000fc1e 	bne	r2,zero,811062fc <___vfprintf_internal_r+0x11d0>
81105f0c:	0039883a 	mov	fp,zero
81105f10:	00800084 	movi	r2,2
81105f14:	10803fcc 	andi	r2,r2,255
81105f18:	00c00044 	movi	r3,1
81105f1c:	10c20f26 	beq	r2,r3,8110675c <___vfprintf_internal_r+0x1630>
81105f20:	00c00084 	movi	r3,2
81105f24:	10fd6326 	beq	r2,r3,811054b4 <__reset+0xfb0e54b4>
81105f28:	003e2d06 	br	811057e0 <__reset+0xfb0e57e0>
81105f2c:	d8c02017 	ldw	r3,128(sp)
81105f30:	003e9306 	br	81105980 <__reset+0xfb0e5980>
81105f34:	00801944 	movi	r2,101
81105f38:	14407e0e 	bge	r2,r17,81106134 <___vfprintf_internal_r+0x1008>
81105f3c:	d9003617 	ldw	r4,216(sp)
81105f40:	d9403817 	ldw	r5,224(sp)
81105f44:	000d883a 	mov	r6,zero
81105f48:	000f883a 	mov	r7,zero
81105f4c:	d8c03c15 	stw	r3,240(sp)
81105f50:	da003d15 	stw	r8,244(sp)
81105f54:	11117cc0 	call	811117cc <__eqdf2>
81105f58:	d8c03c17 	ldw	r3,240(sp)
81105f5c:	da003d17 	ldw	r8,244(sp)
81105f60:	1000f71e 	bne	r2,zero,81106340 <___vfprintf_internal_r+0x1214>
81105f64:	d8801f17 	ldw	r2,124(sp)
81105f68:	012044b4 	movhi	r4,33042
81105f6c:	21260504 	addi	r4,r4,-26604
81105f70:	18c00044 	addi	r3,r3,1
81105f74:	10800044 	addi	r2,r2,1
81105f78:	41000015 	stw	r4,0(r8)
81105f7c:	01000044 	movi	r4,1
81105f80:	41000115 	stw	r4,4(r8)
81105f84:	d8c02015 	stw	r3,128(sp)
81105f88:	d8801f15 	stw	r2,124(sp)
81105f8c:	010001c4 	movi	r4,7
81105f90:	2082b816 	blt	r4,r2,81106a74 <___vfprintf_internal_r+0x1948>
81105f94:	42000204 	addi	r8,r8,8
81105f98:	d8802617 	ldw	r2,152(sp)
81105f9c:	d9403317 	ldw	r5,204(sp)
81105fa0:	11400216 	blt	r2,r5,81105fac <___vfprintf_internal_r+0xe80>
81105fa4:	9080004c 	andi	r2,r18,1
81105fa8:	103ed526 	beq	r2,zero,81105b00 <__reset+0xfb0e5b00>
81105fac:	d8803717 	ldw	r2,220(sp)
81105fb0:	d9003417 	ldw	r4,208(sp)
81105fb4:	d9403717 	ldw	r5,220(sp)
81105fb8:	1887883a 	add	r3,r3,r2
81105fbc:	d8801f17 	ldw	r2,124(sp)
81105fc0:	41000015 	stw	r4,0(r8)
81105fc4:	41400115 	stw	r5,4(r8)
81105fc8:	10800044 	addi	r2,r2,1
81105fcc:	d8c02015 	stw	r3,128(sp)
81105fd0:	d8801f15 	stw	r2,124(sp)
81105fd4:	010001c4 	movi	r4,7
81105fd8:	20832916 	blt	r4,r2,81106c80 <___vfprintf_internal_r+0x1b54>
81105fdc:	42000204 	addi	r8,r8,8
81105fe0:	d8803317 	ldw	r2,204(sp)
81105fe4:	143fffc4 	addi	r16,r2,-1
81105fe8:	043ec50e 	bge	zero,r16,81105b00 <__reset+0xfb0e5b00>
81105fec:	04400404 	movi	r17,16
81105ff0:	d8801f17 	ldw	r2,124(sp)
81105ff4:	8c00880e 	bge	r17,r16,81106218 <___vfprintf_internal_r+0x10ec>
81105ff8:	016044b4 	movhi	r5,33042
81105ffc:	29660d84 	addi	r5,r5,-26570
81106000:	d9402b15 	stw	r5,172(sp)
81106004:	058001c4 	movi	r22,7
81106008:	dcc02c17 	ldw	r19,176(sp)
8110600c:	00000306 	br	8110601c <___vfprintf_internal_r+0xef0>
81106010:	42000204 	addi	r8,r8,8
81106014:	843ffc04 	addi	r16,r16,-16
81106018:	8c00820e 	bge	r17,r16,81106224 <___vfprintf_internal_r+0x10f8>
8110601c:	18c00404 	addi	r3,r3,16
81106020:	10800044 	addi	r2,r2,1
81106024:	45000015 	stw	r20,0(r8)
81106028:	44400115 	stw	r17,4(r8)
8110602c:	d8c02015 	stw	r3,128(sp)
81106030:	d8801f15 	stw	r2,124(sp)
81106034:	b0bff60e 	bge	r22,r2,81106010 <__reset+0xfb0e6010>
81106038:	d9801e04 	addi	r6,sp,120
8110603c:	b80b883a 	mov	r5,r23
81106040:	9809883a 	mov	r4,r19
81106044:	110db540 	call	8110db54 <__sprint_r>
81106048:	103d3a1e 	bne	r2,zero,81105534 <__reset+0xfb0e5534>
8110604c:	d8c02017 	ldw	r3,128(sp)
81106050:	d8801f17 	ldw	r2,124(sp)
81106054:	da000404 	addi	r8,sp,16
81106058:	003fee06 	br	81106014 <__reset+0xfb0e6014>
8110605c:	d9403117 	ldw	r5,196(sp)
81106060:	d8802a17 	ldw	r2,168(sp)
81106064:	28adc83a 	sub	r22,r5,r2
81106068:	05be630e 	bge	zero,r22,811059f8 <__reset+0xfb0e59f8>
8110606c:	07000404 	movi	fp,16
81106070:	d8801f17 	ldw	r2,124(sp)
81106074:	e5838f0e 	bge	fp,r22,81106eb4 <___vfprintf_internal_r+0x1d88>
81106078:	016044b4 	movhi	r5,33042
8110607c:	29660d84 	addi	r5,r5,-26570
81106080:	dc403015 	stw	r17,192(sp)
81106084:	d9402b15 	stw	r5,172(sp)
81106088:	b023883a 	mov	r17,r22
8110608c:	04c001c4 	movi	r19,7
81106090:	a82d883a 	mov	r22,r21
81106094:	902b883a 	mov	r21,r18
81106098:	8025883a 	mov	r18,r16
8110609c:	dc002c17 	ldw	r16,176(sp)
811060a0:	00000306 	br	811060b0 <___vfprintf_internal_r+0xf84>
811060a4:	8c7ffc04 	addi	r17,r17,-16
811060a8:	42000204 	addi	r8,r8,8
811060ac:	e440110e 	bge	fp,r17,811060f4 <___vfprintf_internal_r+0xfc8>
811060b0:	18c00404 	addi	r3,r3,16
811060b4:	10800044 	addi	r2,r2,1
811060b8:	45000015 	stw	r20,0(r8)
811060bc:	47000115 	stw	fp,4(r8)
811060c0:	d8c02015 	stw	r3,128(sp)
811060c4:	d8801f15 	stw	r2,124(sp)
811060c8:	98bff60e 	bge	r19,r2,811060a4 <__reset+0xfb0e60a4>
811060cc:	d9801e04 	addi	r6,sp,120
811060d0:	b80b883a 	mov	r5,r23
811060d4:	8009883a 	mov	r4,r16
811060d8:	110db540 	call	8110db54 <__sprint_r>
811060dc:	103d151e 	bne	r2,zero,81105534 <__reset+0xfb0e5534>
811060e0:	8c7ffc04 	addi	r17,r17,-16
811060e4:	d8c02017 	ldw	r3,128(sp)
811060e8:	d8801f17 	ldw	r2,124(sp)
811060ec:	da000404 	addi	r8,sp,16
811060f0:	e47fef16 	blt	fp,r17,811060b0 <__reset+0xfb0e60b0>
811060f4:	9021883a 	mov	r16,r18
811060f8:	a825883a 	mov	r18,r21
811060fc:	b02b883a 	mov	r21,r22
81106100:	882d883a 	mov	r22,r17
81106104:	dc403017 	ldw	r17,192(sp)
81106108:	d9002b17 	ldw	r4,172(sp)
8110610c:	1d87883a 	add	r3,r3,r22
81106110:	10800044 	addi	r2,r2,1
81106114:	41000015 	stw	r4,0(r8)
81106118:	45800115 	stw	r22,4(r8)
8110611c:	d8c02015 	stw	r3,128(sp)
81106120:	d8801f15 	stw	r2,124(sp)
81106124:	010001c4 	movi	r4,7
81106128:	20818e16 	blt	r4,r2,81106764 <___vfprintf_internal_r+0x1638>
8110612c:	42000204 	addi	r8,r8,8
81106130:	003e3106 	br	811059f8 <__reset+0xfb0e59f8>
81106134:	d9403317 	ldw	r5,204(sp)
81106138:	00800044 	movi	r2,1
8110613c:	18c00044 	addi	r3,r3,1
81106140:	1141530e 	bge	r2,r5,81106690 <___vfprintf_internal_r+0x1564>
81106144:	dc401f17 	ldw	r17,124(sp)
81106148:	00800044 	movi	r2,1
8110614c:	40800115 	stw	r2,4(r8)
81106150:	8c400044 	addi	r17,r17,1
81106154:	44000015 	stw	r16,0(r8)
81106158:	d8c02015 	stw	r3,128(sp)
8110615c:	dc401f15 	stw	r17,124(sp)
81106160:	008001c4 	movi	r2,7
81106164:	14416b16 	blt	r2,r17,81106714 <___vfprintf_internal_r+0x15e8>
81106168:	42000204 	addi	r8,r8,8
8110616c:	d8803717 	ldw	r2,220(sp)
81106170:	d9003417 	ldw	r4,208(sp)
81106174:	8c400044 	addi	r17,r17,1
81106178:	10c7883a 	add	r3,r2,r3
8110617c:	40800115 	stw	r2,4(r8)
81106180:	41000015 	stw	r4,0(r8)
81106184:	d8c02015 	stw	r3,128(sp)
81106188:	dc401f15 	stw	r17,124(sp)
8110618c:	008001c4 	movi	r2,7
81106190:	14416916 	blt	r2,r17,81106738 <___vfprintf_internal_r+0x160c>
81106194:	45800204 	addi	r22,r8,8
81106198:	d9003617 	ldw	r4,216(sp)
8110619c:	d9403817 	ldw	r5,224(sp)
811061a0:	000d883a 	mov	r6,zero
811061a4:	000f883a 	mov	r7,zero
811061a8:	d8c03c15 	stw	r3,240(sp)
811061ac:	11117cc0 	call	811117cc <__eqdf2>
811061b0:	d8c03c17 	ldw	r3,240(sp)
811061b4:	1000bc26 	beq	r2,zero,811064a8 <___vfprintf_internal_r+0x137c>
811061b8:	d9403317 	ldw	r5,204(sp)
811061bc:	84000044 	addi	r16,r16,1
811061c0:	8c400044 	addi	r17,r17,1
811061c4:	28bfffc4 	addi	r2,r5,-1
811061c8:	1887883a 	add	r3,r3,r2
811061cc:	b0800115 	stw	r2,4(r22)
811061d0:	b4000015 	stw	r16,0(r22)
811061d4:	d8c02015 	stw	r3,128(sp)
811061d8:	dc401f15 	stw	r17,124(sp)
811061dc:	008001c4 	movi	r2,7
811061e0:	14414316 	blt	r2,r17,811066f0 <___vfprintf_internal_r+0x15c4>
811061e4:	b5800204 	addi	r22,r22,8
811061e8:	d9003a17 	ldw	r4,232(sp)
811061ec:	df0022c4 	addi	fp,sp,139
811061f0:	8c400044 	addi	r17,r17,1
811061f4:	20c7883a 	add	r3,r4,r3
811061f8:	b7000015 	stw	fp,0(r22)
811061fc:	b1000115 	stw	r4,4(r22)
81106200:	d8c02015 	stw	r3,128(sp)
81106204:	dc401f15 	stw	r17,124(sp)
81106208:	008001c4 	movi	r2,7
8110620c:	14400e16 	blt	r2,r17,81106248 <___vfprintf_internal_r+0x111c>
81106210:	b2000204 	addi	r8,r22,8
81106214:	003e3a06 	br	81105b00 <__reset+0xfb0e5b00>
81106218:	012044b4 	movhi	r4,33042
8110621c:	21260d84 	addi	r4,r4,-26570
81106220:	d9002b15 	stw	r4,172(sp)
81106224:	d9002b17 	ldw	r4,172(sp)
81106228:	1c07883a 	add	r3,r3,r16
8110622c:	44000115 	stw	r16,4(r8)
81106230:	41000015 	stw	r4,0(r8)
81106234:	10800044 	addi	r2,r2,1
81106238:	d8c02015 	stw	r3,128(sp)
8110623c:	d8801f15 	stw	r2,124(sp)
81106240:	010001c4 	movi	r4,7
81106244:	20be2d0e 	bge	r4,r2,81105afc <__reset+0xfb0e5afc>
81106248:	d9002c17 	ldw	r4,176(sp)
8110624c:	d9801e04 	addi	r6,sp,120
81106250:	b80b883a 	mov	r5,r23
81106254:	110db540 	call	8110db54 <__sprint_r>
81106258:	103cb61e 	bne	r2,zero,81105534 <__reset+0xfb0e5534>
8110625c:	d8c02017 	ldw	r3,128(sp)
81106260:	da000404 	addi	r8,sp,16
81106264:	003e2606 	br	81105b00 <__reset+0xfb0e5b00>
81106268:	d9002c17 	ldw	r4,176(sp)
8110626c:	d9801e04 	addi	r6,sp,120
81106270:	b80b883a 	mov	r5,r23
81106274:	110db540 	call	8110db54 <__sprint_r>
81106278:	103e5d26 	beq	r2,zero,81105bf0 <__reset+0xfb0e5bf0>
8110627c:	003cad06 	br	81105534 <__reset+0xfb0e5534>
81106280:	d9002c17 	ldw	r4,176(sp)
81106284:	d9801e04 	addi	r6,sp,120
81106288:	b80b883a 	mov	r5,r23
8110628c:	110db540 	call	8110db54 <__sprint_r>
81106290:	103ca81e 	bne	r2,zero,81105534 <__reset+0xfb0e5534>
81106294:	d8c02017 	ldw	r3,128(sp)
81106298:	da000404 	addi	r8,sp,16
8110629c:	003e0b06 	br	81105acc <__reset+0xfb0e5acc>
811062a0:	d9002c17 	ldw	r4,176(sp)
811062a4:	d9801e04 	addi	r6,sp,120
811062a8:	b80b883a 	mov	r5,r23
811062ac:	110db540 	call	8110db54 <__sprint_r>
811062b0:	103ca01e 	bne	r2,zero,81105534 <__reset+0xfb0e5534>
811062b4:	d8c02017 	ldw	r3,128(sp)
811062b8:	da000404 	addi	r8,sp,16
811062bc:	003dbd06 	br	811059b4 <__reset+0xfb0e59b4>
811062c0:	d9002c17 	ldw	r4,176(sp)
811062c4:	d9801e04 	addi	r6,sp,120
811062c8:	b80b883a 	mov	r5,r23
811062cc:	110db540 	call	8110db54 <__sprint_r>
811062d0:	103c981e 	bne	r2,zero,81105534 <__reset+0xfb0e5534>
811062d4:	d8c02017 	ldw	r3,128(sp)
811062d8:	da000404 	addi	r8,sp,16
811062dc:	003dc306 	br	811059ec <__reset+0xfb0e59ec>
811062e0:	d8802917 	ldw	r2,164(sp)
811062e4:	d8002785 	stb	zero,158(sp)
811062e8:	103f0616 	blt	r2,zero,81105f04 <__reset+0xfb0e5f04>
811062ec:	00ffdfc4 	movi	r3,-129
811062f0:	9d84b03a 	or	r2,r19,r22
811062f4:	90e4703a 	and	r18,r18,r3
811062f8:	103c6b26 	beq	r2,zero,811054a8 <__reset+0xfb0e54a8>
811062fc:	0039883a 	mov	fp,zero
81106300:	003e7406 	br	81105cd4 <__reset+0xfb0e5cd4>
81106304:	9080040c 	andi	r2,r18,16
81106308:	1001b326 	beq	r2,zero,811069d8 <___vfprintf_internal_r+0x18ac>
8110630c:	d9002d17 	ldw	r4,180(sp)
81106310:	d9402917 	ldw	r5,164(sp)
81106314:	d8002785 	stb	zero,158(sp)
81106318:	20800104 	addi	r2,r4,4
8110631c:	24c00017 	ldw	r19,0(r4)
81106320:	002d883a 	mov	r22,zero
81106324:	2801b516 	blt	r5,zero,811069fc <___vfprintf_internal_r+0x18d0>
81106328:	00ffdfc4 	movi	r3,-129
8110632c:	d8802d15 	stw	r2,180(sp)
81106330:	90e4703a 	and	r18,r18,r3
81106334:	983d2726 	beq	r19,zero,811057d4 <__reset+0xfb0e57d4>
81106338:	0039883a 	mov	fp,zero
8110633c:	003d2a06 	br	811057e8 <__reset+0xfb0e57e8>
81106340:	dc402617 	ldw	r17,152(sp)
81106344:	0441d30e 	bge	zero,r17,81106a94 <___vfprintf_internal_r+0x1968>
81106348:	dc403217 	ldw	r17,200(sp)
8110634c:	d8803317 	ldw	r2,204(sp)
81106350:	1440010e 	bge	r2,r17,81106358 <___vfprintf_internal_r+0x122c>
81106354:	1023883a 	mov	r17,r2
81106358:	04400a0e 	bge	zero,r17,81106384 <___vfprintf_internal_r+0x1258>
8110635c:	d8801f17 	ldw	r2,124(sp)
81106360:	1c47883a 	add	r3,r3,r17
81106364:	44000015 	stw	r16,0(r8)
81106368:	10800044 	addi	r2,r2,1
8110636c:	44400115 	stw	r17,4(r8)
81106370:	d8c02015 	stw	r3,128(sp)
81106374:	d8801f15 	stw	r2,124(sp)
81106378:	010001c4 	movi	r4,7
8110637c:	20826516 	blt	r4,r2,81106d14 <___vfprintf_internal_r+0x1be8>
81106380:	42000204 	addi	r8,r8,8
81106384:	88026116 	blt	r17,zero,81106d0c <___vfprintf_internal_r+0x1be0>
81106388:	d9003217 	ldw	r4,200(sp)
8110638c:	2463c83a 	sub	r17,r4,r17
81106390:	04407b0e 	bge	zero,r17,81106580 <___vfprintf_internal_r+0x1454>
81106394:	05800404 	movi	r22,16
81106398:	d8801f17 	ldw	r2,124(sp)
8110639c:	b4419d0e 	bge	r22,r17,81106a14 <___vfprintf_internal_r+0x18e8>
811063a0:	012044b4 	movhi	r4,33042
811063a4:	21260d84 	addi	r4,r4,-26570
811063a8:	d9002b15 	stw	r4,172(sp)
811063ac:	070001c4 	movi	fp,7
811063b0:	dcc02c17 	ldw	r19,176(sp)
811063b4:	00000306 	br	811063c4 <___vfprintf_internal_r+0x1298>
811063b8:	42000204 	addi	r8,r8,8
811063bc:	8c7ffc04 	addi	r17,r17,-16
811063c0:	b441970e 	bge	r22,r17,81106a20 <___vfprintf_internal_r+0x18f4>
811063c4:	18c00404 	addi	r3,r3,16
811063c8:	10800044 	addi	r2,r2,1
811063cc:	45000015 	stw	r20,0(r8)
811063d0:	45800115 	stw	r22,4(r8)
811063d4:	d8c02015 	stw	r3,128(sp)
811063d8:	d8801f15 	stw	r2,124(sp)
811063dc:	e0bff60e 	bge	fp,r2,811063b8 <__reset+0xfb0e63b8>
811063e0:	d9801e04 	addi	r6,sp,120
811063e4:	b80b883a 	mov	r5,r23
811063e8:	9809883a 	mov	r4,r19
811063ec:	110db540 	call	8110db54 <__sprint_r>
811063f0:	103c501e 	bne	r2,zero,81105534 <__reset+0xfb0e5534>
811063f4:	d8c02017 	ldw	r3,128(sp)
811063f8:	d8801f17 	ldw	r2,124(sp)
811063fc:	da000404 	addi	r8,sp,16
81106400:	003fee06 	br	811063bc <__reset+0xfb0e63bc>
81106404:	d9002c17 	ldw	r4,176(sp)
81106408:	d9801e04 	addi	r6,sp,120
8110640c:	b80b883a 	mov	r5,r23
81106410:	110db540 	call	8110db54 <__sprint_r>
81106414:	103c471e 	bne	r2,zero,81105534 <__reset+0xfb0e5534>
81106418:	d8c02017 	ldw	r3,128(sp)
8110641c:	df002787 	ldb	fp,158(sp)
81106420:	da000404 	addi	r8,sp,16
81106424:	003d5606 	br	81105980 <__reset+0xfb0e5980>
81106428:	9080040c 	andi	r2,r18,16
8110642c:	10016126 	beq	r2,zero,811069b4 <___vfprintf_internal_r+0x1888>
81106430:	d8802d17 	ldw	r2,180(sp)
81106434:	14c00017 	ldw	r19,0(r2)
81106438:	10800104 	addi	r2,r2,4
8110643c:	d8802d15 	stw	r2,180(sp)
81106440:	982dd7fa 	srai	r22,r19,31
81106444:	b005883a 	mov	r2,r22
81106448:	003c8206 	br	81105654 <__reset+0xfb0e5654>
8110644c:	9080040c 	andi	r2,r18,16
81106450:	10003526 	beq	r2,zero,81106528 <___vfprintf_internal_r+0x13fc>
81106454:	d9402d17 	ldw	r5,180(sp)
81106458:	d8c02917 	ldw	r3,164(sp)
8110645c:	d8002785 	stb	zero,158(sp)
81106460:	28800104 	addi	r2,r5,4
81106464:	2cc00017 	ldw	r19,0(r5)
81106468:	002d883a 	mov	r22,zero
8110646c:	18003716 	blt	r3,zero,8110654c <___vfprintf_internal_r+0x1420>
81106470:	00ffdfc4 	movi	r3,-129
81106474:	d8802d15 	stw	r2,180(sp)
81106478:	90e4703a 	and	r18,r18,r3
8110647c:	0039883a 	mov	fp,zero
81106480:	983df326 	beq	r19,zero,81105c50 <__reset+0xfb0e5c50>
81106484:	00800244 	movi	r2,9
81106488:	14fc7b36 	bltu	r2,r19,81105678 <__reset+0xfb0e5678>
8110648c:	d8c02817 	ldw	r3,160(sp)
81106490:	dc001dc4 	addi	r16,sp,119
81106494:	9cc00c04 	addi	r19,r19,48
81106498:	1c07c83a 	sub	r3,r3,r16
8110649c:	dcc01dc5 	stb	r19,119(sp)
811064a0:	d8c02e15 	stw	r3,184(sp)
811064a4:	003ce806 	br	81105848 <__reset+0xfb0e5848>
811064a8:	d8803317 	ldw	r2,204(sp)
811064ac:	143fffc4 	addi	r16,r2,-1
811064b0:	043f4d0e 	bge	zero,r16,811061e8 <__reset+0xfb0e61e8>
811064b4:	07000404 	movi	fp,16
811064b8:	e400810e 	bge	fp,r16,811066c0 <___vfprintf_internal_r+0x1594>
811064bc:	016044b4 	movhi	r5,33042
811064c0:	29660d84 	addi	r5,r5,-26570
811064c4:	d9402b15 	stw	r5,172(sp)
811064c8:	01c001c4 	movi	r7,7
811064cc:	dcc02c17 	ldw	r19,176(sp)
811064d0:	00000306 	br	811064e0 <___vfprintf_internal_r+0x13b4>
811064d4:	b5800204 	addi	r22,r22,8
811064d8:	843ffc04 	addi	r16,r16,-16
811064dc:	e4007b0e 	bge	fp,r16,811066cc <___vfprintf_internal_r+0x15a0>
811064e0:	18c00404 	addi	r3,r3,16
811064e4:	8c400044 	addi	r17,r17,1
811064e8:	b5000015 	stw	r20,0(r22)
811064ec:	b7000115 	stw	fp,4(r22)
811064f0:	d8c02015 	stw	r3,128(sp)
811064f4:	dc401f15 	stw	r17,124(sp)
811064f8:	3c7ff60e 	bge	r7,r17,811064d4 <__reset+0xfb0e64d4>
811064fc:	d9801e04 	addi	r6,sp,120
81106500:	b80b883a 	mov	r5,r23
81106504:	9809883a 	mov	r4,r19
81106508:	d9c03c15 	stw	r7,240(sp)
8110650c:	110db540 	call	8110db54 <__sprint_r>
81106510:	d9c03c17 	ldw	r7,240(sp)
81106514:	103c071e 	bne	r2,zero,81105534 <__reset+0xfb0e5534>
81106518:	d8c02017 	ldw	r3,128(sp)
8110651c:	dc401f17 	ldw	r17,124(sp)
81106520:	dd800404 	addi	r22,sp,16
81106524:	003fec06 	br	811064d8 <__reset+0xfb0e64d8>
81106528:	9080100c 	andi	r2,r18,64
8110652c:	d8002785 	stb	zero,158(sp)
81106530:	10010e26 	beq	r2,zero,8110696c <___vfprintf_internal_r+0x1840>
81106534:	d9002d17 	ldw	r4,180(sp)
81106538:	d9402917 	ldw	r5,164(sp)
8110653c:	002d883a 	mov	r22,zero
81106540:	20800104 	addi	r2,r4,4
81106544:	24c0000b 	ldhu	r19,0(r4)
81106548:	283fc90e 	bge	r5,zero,81106470 <__reset+0xfb0e6470>
8110654c:	d8802d15 	stw	r2,180(sp)
81106550:	0039883a 	mov	fp,zero
81106554:	9d84b03a 	or	r2,r19,r22
81106558:	103c461e 	bne	r2,zero,81105674 <__reset+0xfb0e5674>
8110655c:	00800044 	movi	r2,1
81106560:	003e6c06 	br	81105f14 <__reset+0xfb0e5f14>
81106564:	d9002c17 	ldw	r4,176(sp)
81106568:	d9801e04 	addi	r6,sp,120
8110656c:	b80b883a 	mov	r5,r23
81106570:	110db540 	call	8110db54 <__sprint_r>
81106574:	103bef1e 	bne	r2,zero,81105534 <__reset+0xfb0e5534>
81106578:	d8c02017 	ldw	r3,128(sp)
8110657c:	da000404 	addi	r8,sp,16
81106580:	d9003217 	ldw	r4,200(sp)
81106584:	d8802617 	ldw	r2,152(sp)
81106588:	d9403317 	ldw	r5,204(sp)
8110658c:	8123883a 	add	r17,r16,r4
81106590:	11400216 	blt	r2,r5,8110659c <___vfprintf_internal_r+0x1470>
81106594:	9100004c 	andi	r4,r18,1
81106598:	20000d26 	beq	r4,zero,811065d0 <___vfprintf_internal_r+0x14a4>
8110659c:	d9003717 	ldw	r4,220(sp)
811065a0:	d9403417 	ldw	r5,208(sp)
811065a4:	1907883a 	add	r3,r3,r4
811065a8:	d9001f17 	ldw	r4,124(sp)
811065ac:	41400015 	stw	r5,0(r8)
811065b0:	d9403717 	ldw	r5,220(sp)
811065b4:	21000044 	addi	r4,r4,1
811065b8:	d8c02015 	stw	r3,128(sp)
811065bc:	41400115 	stw	r5,4(r8)
811065c0:	d9001f15 	stw	r4,124(sp)
811065c4:	014001c4 	movi	r5,7
811065c8:	2901e816 	blt	r5,r4,81106d6c <___vfprintf_internal_r+0x1c40>
811065cc:	42000204 	addi	r8,r8,8
811065d0:	d9003317 	ldw	r4,204(sp)
811065d4:	8121883a 	add	r16,r16,r4
811065d8:	2085c83a 	sub	r2,r4,r2
811065dc:	8461c83a 	sub	r16,r16,r17
811065e0:	1400010e 	bge	r2,r16,811065e8 <___vfprintf_internal_r+0x14bc>
811065e4:	1021883a 	mov	r16,r2
811065e8:	04000a0e 	bge	zero,r16,81106614 <___vfprintf_internal_r+0x14e8>
811065ec:	d9001f17 	ldw	r4,124(sp)
811065f0:	1c07883a 	add	r3,r3,r16
811065f4:	44400015 	stw	r17,0(r8)
811065f8:	21000044 	addi	r4,r4,1
811065fc:	44000115 	stw	r16,4(r8)
81106600:	d8c02015 	stw	r3,128(sp)
81106604:	d9001f15 	stw	r4,124(sp)
81106608:	014001c4 	movi	r5,7
8110660c:	2901fb16 	blt	r5,r4,81106dfc <___vfprintf_internal_r+0x1cd0>
81106610:	42000204 	addi	r8,r8,8
81106614:	8001f716 	blt	r16,zero,81106df4 <___vfprintf_internal_r+0x1cc8>
81106618:	1421c83a 	sub	r16,r2,r16
8110661c:	043d380e 	bge	zero,r16,81105b00 <__reset+0xfb0e5b00>
81106620:	04400404 	movi	r17,16
81106624:	d8801f17 	ldw	r2,124(sp)
81106628:	8c3efb0e 	bge	r17,r16,81106218 <__reset+0xfb0e6218>
8110662c:	016044b4 	movhi	r5,33042
81106630:	29660d84 	addi	r5,r5,-26570
81106634:	d9402b15 	stw	r5,172(sp)
81106638:	058001c4 	movi	r22,7
8110663c:	dcc02c17 	ldw	r19,176(sp)
81106640:	00000306 	br	81106650 <___vfprintf_internal_r+0x1524>
81106644:	42000204 	addi	r8,r8,8
81106648:	843ffc04 	addi	r16,r16,-16
8110664c:	8c3ef50e 	bge	r17,r16,81106224 <__reset+0xfb0e6224>
81106650:	18c00404 	addi	r3,r3,16
81106654:	10800044 	addi	r2,r2,1
81106658:	45000015 	stw	r20,0(r8)
8110665c:	44400115 	stw	r17,4(r8)
81106660:	d8c02015 	stw	r3,128(sp)
81106664:	d8801f15 	stw	r2,124(sp)
81106668:	b0bff60e 	bge	r22,r2,81106644 <__reset+0xfb0e6644>
8110666c:	d9801e04 	addi	r6,sp,120
81106670:	b80b883a 	mov	r5,r23
81106674:	9809883a 	mov	r4,r19
81106678:	110db540 	call	8110db54 <__sprint_r>
8110667c:	103bad1e 	bne	r2,zero,81105534 <__reset+0xfb0e5534>
81106680:	d8c02017 	ldw	r3,128(sp)
81106684:	d8801f17 	ldw	r2,124(sp)
81106688:	da000404 	addi	r8,sp,16
8110668c:	003fee06 	br	81106648 <__reset+0xfb0e6648>
81106690:	9088703a 	and	r4,r18,r2
81106694:	203eab1e 	bne	r4,zero,81106144 <__reset+0xfb0e6144>
81106698:	dc401f17 	ldw	r17,124(sp)
8110669c:	40800115 	stw	r2,4(r8)
811066a0:	44000015 	stw	r16,0(r8)
811066a4:	8c400044 	addi	r17,r17,1
811066a8:	d8c02015 	stw	r3,128(sp)
811066ac:	dc401f15 	stw	r17,124(sp)
811066b0:	008001c4 	movi	r2,7
811066b4:	14400e16 	blt	r2,r17,811066f0 <___vfprintf_internal_r+0x15c4>
811066b8:	45800204 	addi	r22,r8,8
811066bc:	003eca06 	br	811061e8 <__reset+0xfb0e61e8>
811066c0:	012044b4 	movhi	r4,33042
811066c4:	21260d84 	addi	r4,r4,-26570
811066c8:	d9002b15 	stw	r4,172(sp)
811066cc:	d8802b17 	ldw	r2,172(sp)
811066d0:	1c07883a 	add	r3,r3,r16
811066d4:	8c400044 	addi	r17,r17,1
811066d8:	b0800015 	stw	r2,0(r22)
811066dc:	b4000115 	stw	r16,4(r22)
811066e0:	d8c02015 	stw	r3,128(sp)
811066e4:	dc401f15 	stw	r17,124(sp)
811066e8:	008001c4 	movi	r2,7
811066ec:	147ebd0e 	bge	r2,r17,811061e4 <__reset+0xfb0e61e4>
811066f0:	d9002c17 	ldw	r4,176(sp)
811066f4:	d9801e04 	addi	r6,sp,120
811066f8:	b80b883a 	mov	r5,r23
811066fc:	110db540 	call	8110db54 <__sprint_r>
81106700:	103b8c1e 	bne	r2,zero,81105534 <__reset+0xfb0e5534>
81106704:	d8c02017 	ldw	r3,128(sp)
81106708:	dc401f17 	ldw	r17,124(sp)
8110670c:	dd800404 	addi	r22,sp,16
81106710:	003eb506 	br	811061e8 <__reset+0xfb0e61e8>
81106714:	d9002c17 	ldw	r4,176(sp)
81106718:	d9801e04 	addi	r6,sp,120
8110671c:	b80b883a 	mov	r5,r23
81106720:	110db540 	call	8110db54 <__sprint_r>
81106724:	103b831e 	bne	r2,zero,81105534 <__reset+0xfb0e5534>
81106728:	d8c02017 	ldw	r3,128(sp)
8110672c:	dc401f17 	ldw	r17,124(sp)
81106730:	da000404 	addi	r8,sp,16
81106734:	003e8d06 	br	8110616c <__reset+0xfb0e616c>
81106738:	d9002c17 	ldw	r4,176(sp)
8110673c:	d9801e04 	addi	r6,sp,120
81106740:	b80b883a 	mov	r5,r23
81106744:	110db540 	call	8110db54 <__sprint_r>
81106748:	103b7a1e 	bne	r2,zero,81105534 <__reset+0xfb0e5534>
8110674c:	d8c02017 	ldw	r3,128(sp)
81106750:	dc401f17 	ldw	r17,124(sp)
81106754:	dd800404 	addi	r22,sp,16
81106758:	003e8f06 	br	81106198 <__reset+0xfb0e6198>
8110675c:	0027883a 	mov	r19,zero
81106760:	003f4a06 	br	8110648c <__reset+0xfb0e648c>
81106764:	d9002c17 	ldw	r4,176(sp)
81106768:	d9801e04 	addi	r6,sp,120
8110676c:	b80b883a 	mov	r5,r23
81106770:	110db540 	call	8110db54 <__sprint_r>
81106774:	103b6f1e 	bne	r2,zero,81105534 <__reset+0xfb0e5534>
81106778:	d8c02017 	ldw	r3,128(sp)
8110677c:	da000404 	addi	r8,sp,16
81106780:	003c9d06 	br	811059f8 <__reset+0xfb0e59f8>
81106784:	04e7c83a 	sub	r19,zero,r19
81106788:	9804c03a 	cmpne	r2,r19,zero
8110678c:	05adc83a 	sub	r22,zero,r22
81106790:	b0adc83a 	sub	r22,r22,r2
81106794:	d8802917 	ldw	r2,164(sp)
81106798:	07000b44 	movi	fp,45
8110679c:	df002785 	stb	fp,158(sp)
811067a0:	10017b16 	blt	r2,zero,81106d90 <___vfprintf_internal_r+0x1c64>
811067a4:	00bfdfc4 	movi	r2,-129
811067a8:	90a4703a 	and	r18,r18,r2
811067ac:	003bb106 	br	81105674 <__reset+0xfb0e5674>
811067b0:	d9003617 	ldw	r4,216(sp)
811067b4:	d9403817 	ldw	r5,224(sp)
811067b8:	da003d15 	stw	r8,244(sp)
811067bc:	110c36c0 	call	8110c36c <__fpclassifyd>
811067c0:	da003d17 	ldw	r8,244(sp)
811067c4:	1000f026 	beq	r2,zero,81106b88 <___vfprintf_internal_r+0x1a5c>
811067c8:	d9002917 	ldw	r4,164(sp)
811067cc:	05bff7c4 	movi	r22,-33
811067d0:	00bfffc4 	movi	r2,-1
811067d4:	8dac703a 	and	r22,r17,r22
811067d8:	20820026 	beq	r4,r2,81106fdc <___vfprintf_internal_r+0x1eb0>
811067dc:	008011c4 	movi	r2,71
811067e0:	b081f726 	beq	r22,r2,81106fc0 <___vfprintf_internal_r+0x1e94>
811067e4:	d9003817 	ldw	r4,224(sp)
811067e8:	90c04014 	ori	r3,r18,256
811067ec:	d8c02b15 	stw	r3,172(sp)
811067f0:	20021516 	blt	r4,zero,81107048 <___vfprintf_internal_r+0x1f1c>
811067f4:	dcc03817 	ldw	r19,224(sp)
811067f8:	d8002a05 	stb	zero,168(sp)
811067fc:	00801984 	movi	r2,102
81106800:	8881f926 	beq	r17,r2,81106fe8 <___vfprintf_internal_r+0x1ebc>
81106804:	00801184 	movi	r2,70
81106808:	88821c26 	beq	r17,r2,8110707c <___vfprintf_internal_r+0x1f50>
8110680c:	00801144 	movi	r2,69
81106810:	b081ef26 	beq	r22,r2,81106fd0 <___vfprintf_internal_r+0x1ea4>
81106814:	d8c02917 	ldw	r3,164(sp)
81106818:	d8802104 	addi	r2,sp,132
8110681c:	d8800315 	stw	r2,12(sp)
81106820:	d9403617 	ldw	r5,216(sp)
81106824:	d8802504 	addi	r2,sp,148
81106828:	d9002c17 	ldw	r4,176(sp)
8110682c:	d8800215 	stw	r2,8(sp)
81106830:	d8802604 	addi	r2,sp,152
81106834:	d8c00015 	stw	r3,0(sp)
81106838:	d8800115 	stw	r2,4(sp)
8110683c:	01c00084 	movi	r7,2
81106840:	980d883a 	mov	r6,r19
81106844:	d8c03c15 	stw	r3,240(sp)
81106848:	da003d15 	stw	r8,244(sp)
8110684c:	11077500 	call	81107750 <_dtoa_r>
81106850:	1021883a 	mov	r16,r2
81106854:	008019c4 	movi	r2,103
81106858:	d8c03c17 	ldw	r3,240(sp)
8110685c:	da003d17 	ldw	r8,244(sp)
81106860:	88817126 	beq	r17,r2,81106e28 <___vfprintf_internal_r+0x1cfc>
81106864:	008011c4 	movi	r2,71
81106868:	88829226 	beq	r17,r2,811072b4 <___vfprintf_internal_r+0x2188>
8110686c:	80f9883a 	add	fp,r16,r3
81106870:	d9003617 	ldw	r4,216(sp)
81106874:	000d883a 	mov	r6,zero
81106878:	000f883a 	mov	r7,zero
8110687c:	980b883a 	mov	r5,r19
81106880:	da003d15 	stw	r8,244(sp)
81106884:	11117cc0 	call	811117cc <__eqdf2>
81106888:	da003d17 	ldw	r8,244(sp)
8110688c:	10018d26 	beq	r2,zero,81106ec4 <___vfprintf_internal_r+0x1d98>
81106890:	d8802117 	ldw	r2,132(sp)
81106894:	1700062e 	bgeu	r2,fp,811068b0 <___vfprintf_internal_r+0x1784>
81106898:	01000c04 	movi	r4,48
8110689c:	10c00044 	addi	r3,r2,1
811068a0:	d8c02115 	stw	r3,132(sp)
811068a4:	11000005 	stb	r4,0(r2)
811068a8:	d8802117 	ldw	r2,132(sp)
811068ac:	173ffb36 	bltu	r2,fp,8110689c <__reset+0xfb0e689c>
811068b0:	1405c83a 	sub	r2,r2,r16
811068b4:	d8803315 	stw	r2,204(sp)
811068b8:	008011c4 	movi	r2,71
811068bc:	b0817626 	beq	r22,r2,81106e98 <___vfprintf_internal_r+0x1d6c>
811068c0:	00801944 	movi	r2,101
811068c4:	1442810e 	bge	r2,r17,811072cc <___vfprintf_internal_r+0x21a0>
811068c8:	d8c02617 	ldw	r3,152(sp)
811068cc:	00801984 	movi	r2,102
811068d0:	d8c03215 	stw	r3,200(sp)
811068d4:	8881fe26 	beq	r17,r2,811070d0 <___vfprintf_internal_r+0x1fa4>
811068d8:	d8c03217 	ldw	r3,200(sp)
811068dc:	d9003317 	ldw	r4,204(sp)
811068e0:	1901dd16 	blt	r3,r4,81107058 <___vfprintf_internal_r+0x1f2c>
811068e4:	9480004c 	andi	r18,r18,1
811068e8:	90022b1e 	bne	r18,zero,81107198 <___vfprintf_internal_r+0x206c>
811068ec:	1805883a 	mov	r2,r3
811068f0:	18028016 	blt	r3,zero,811072f4 <___vfprintf_internal_r+0x21c8>
811068f4:	d8c03217 	ldw	r3,200(sp)
811068f8:	044019c4 	movi	r17,103
811068fc:	d8c02e15 	stw	r3,184(sp)
81106900:	df002a07 	ldb	fp,168(sp)
81106904:	e001531e 	bne	fp,zero,81106e54 <___vfprintf_internal_r+0x1d28>
81106908:	df002783 	ldbu	fp,158(sp)
8110690c:	d8802a15 	stw	r2,168(sp)
81106910:	dc802b17 	ldw	r18,172(sp)
81106914:	d8002915 	stw	zero,164(sp)
81106918:	003bd106 	br	81105860 <__reset+0xfb0e5860>
8110691c:	d8802d17 	ldw	r2,180(sp)
81106920:	d8c02d17 	ldw	r3,180(sp)
81106924:	d9002d17 	ldw	r4,180(sp)
81106928:	10800017 	ldw	r2,0(r2)
8110692c:	18c00117 	ldw	r3,4(r3)
81106930:	21000204 	addi	r4,r4,8
81106934:	d8803615 	stw	r2,216(sp)
81106938:	d8c03815 	stw	r3,224(sp)
8110693c:	d9002d15 	stw	r4,180(sp)
81106940:	003b7506 	br	81105718 <__reset+0xfb0e5718>
81106944:	ac400007 	ldb	r17,0(r21)
81106948:	003a5906 	br	811052b0 <__reset+0xfb0e52b0>
8110694c:	9080100c 	andi	r2,r18,64
81106950:	1000a826 	beq	r2,zero,81106bf4 <___vfprintf_internal_r+0x1ac8>
81106954:	d9002d17 	ldw	r4,180(sp)
81106958:	002d883a 	mov	r22,zero
8110695c:	24c0000b 	ldhu	r19,0(r4)
81106960:	21000104 	addi	r4,r4,4
81106964:	d9002d15 	stw	r4,180(sp)
81106968:	003ccb06 	br	81105c98 <__reset+0xfb0e5c98>
8110696c:	d8c02d17 	ldw	r3,180(sp)
81106970:	d9002917 	ldw	r4,164(sp)
81106974:	002d883a 	mov	r22,zero
81106978:	18800104 	addi	r2,r3,4
8110697c:	1cc00017 	ldw	r19,0(r3)
81106980:	203ebb0e 	bge	r4,zero,81106470 <__reset+0xfb0e6470>
81106984:	003ef106 	br	8110654c <__reset+0xfb0e654c>
81106988:	9080040c 	andi	r2,r18,16
8110698c:	1000921e 	bne	r2,zero,81106bd8 <___vfprintf_internal_r+0x1aac>
81106990:	9480100c 	andi	r18,r18,64
81106994:	90013926 	beq	r18,zero,81106e7c <___vfprintf_internal_r+0x1d50>
81106998:	d9002d17 	ldw	r4,180(sp)
8110699c:	d9402f17 	ldw	r5,188(sp)
811069a0:	20800017 	ldw	r2,0(r4)
811069a4:	21000104 	addi	r4,r4,4
811069a8:	d9002d15 	stw	r4,180(sp)
811069ac:	1140000d 	sth	r5,0(r2)
811069b0:	003a1606 	br	8110520c <__reset+0xfb0e520c>
811069b4:	9080100c 	andi	r2,r18,64
811069b8:	10008026 	beq	r2,zero,81106bbc <___vfprintf_internal_r+0x1a90>
811069bc:	d8c02d17 	ldw	r3,180(sp)
811069c0:	1cc0000f 	ldh	r19,0(r3)
811069c4:	18c00104 	addi	r3,r3,4
811069c8:	d8c02d15 	stw	r3,180(sp)
811069cc:	982dd7fa 	srai	r22,r19,31
811069d0:	b005883a 	mov	r2,r22
811069d4:	003b1f06 	br	81105654 <__reset+0xfb0e5654>
811069d8:	9080100c 	andi	r2,r18,64
811069dc:	d8002785 	stb	zero,158(sp)
811069e0:	10008a1e 	bne	r2,zero,81106c0c <___vfprintf_internal_r+0x1ae0>
811069e4:	d9402d17 	ldw	r5,180(sp)
811069e8:	d8c02917 	ldw	r3,164(sp)
811069ec:	002d883a 	mov	r22,zero
811069f0:	28800104 	addi	r2,r5,4
811069f4:	2cc00017 	ldw	r19,0(r5)
811069f8:	183e4b0e 	bge	r3,zero,81106328 <__reset+0xfb0e6328>
811069fc:	9d86b03a 	or	r3,r19,r22
81106a00:	d8802d15 	stw	r2,180(sp)
81106a04:	183e4c1e 	bne	r3,zero,81106338 <__reset+0xfb0e6338>
81106a08:	0039883a 	mov	fp,zero
81106a0c:	0005883a 	mov	r2,zero
81106a10:	003d4006 	br	81105f14 <__reset+0xfb0e5f14>
81106a14:	016044b4 	movhi	r5,33042
81106a18:	29660d84 	addi	r5,r5,-26570
81106a1c:	d9402b15 	stw	r5,172(sp)
81106a20:	d9402b17 	ldw	r5,172(sp)
81106a24:	1c47883a 	add	r3,r3,r17
81106a28:	10800044 	addi	r2,r2,1
81106a2c:	41400015 	stw	r5,0(r8)
81106a30:	44400115 	stw	r17,4(r8)
81106a34:	d8c02015 	stw	r3,128(sp)
81106a38:	d8801f15 	stw	r2,124(sp)
81106a3c:	010001c4 	movi	r4,7
81106a40:	20bec816 	blt	r4,r2,81106564 <__reset+0xfb0e6564>
81106a44:	42000204 	addi	r8,r8,8
81106a48:	003ecd06 	br	81106580 <__reset+0xfb0e6580>
81106a4c:	d9002917 	ldw	r4,164(sp)
81106a50:	d8002785 	stb	zero,158(sp)
81106a54:	203d2d16 	blt	r4,zero,81105f0c <__reset+0xfb0e5f0c>
81106a58:	00bfdfc4 	movi	r2,-129
81106a5c:	90a4703a 	and	r18,r18,r2
81106a60:	003a9106 	br	811054a8 <__reset+0xfb0e54a8>
81106a64:	012044b4 	movhi	r4,33042
81106a68:	21260d84 	addi	r4,r4,-26570
81106a6c:	d9002b15 	stw	r4,172(sp)
81106a70:	003c0c06 	br	81105aa4 <__reset+0xfb0e5aa4>
81106a74:	d9002c17 	ldw	r4,176(sp)
81106a78:	d9801e04 	addi	r6,sp,120
81106a7c:	b80b883a 	mov	r5,r23
81106a80:	110db540 	call	8110db54 <__sprint_r>
81106a84:	103aab1e 	bne	r2,zero,81105534 <__reset+0xfb0e5534>
81106a88:	d8c02017 	ldw	r3,128(sp)
81106a8c:	da000404 	addi	r8,sp,16
81106a90:	003d4106 	br	81105f98 <__reset+0xfb0e5f98>
81106a94:	d8801f17 	ldw	r2,124(sp)
81106a98:	016044b4 	movhi	r5,33042
81106a9c:	01000044 	movi	r4,1
81106aa0:	18c00044 	addi	r3,r3,1
81106aa4:	10800044 	addi	r2,r2,1
81106aa8:	29660504 	addi	r5,r5,-26604
81106aac:	41000115 	stw	r4,4(r8)
81106ab0:	41400015 	stw	r5,0(r8)
81106ab4:	d8c02015 	stw	r3,128(sp)
81106ab8:	d8801f15 	stw	r2,124(sp)
81106abc:	010001c4 	movi	r4,7
81106ac0:	20805c16 	blt	r4,r2,81106c34 <___vfprintf_internal_r+0x1b08>
81106ac4:	42000204 	addi	r8,r8,8
81106ac8:	8800041e 	bne	r17,zero,81106adc <___vfprintf_internal_r+0x19b0>
81106acc:	d8803317 	ldw	r2,204(sp)
81106ad0:	1000021e 	bne	r2,zero,81106adc <___vfprintf_internal_r+0x19b0>
81106ad4:	9080004c 	andi	r2,r18,1
81106ad8:	103c0926 	beq	r2,zero,81105b00 <__reset+0xfb0e5b00>
81106adc:	d9003717 	ldw	r4,220(sp)
81106ae0:	d8801f17 	ldw	r2,124(sp)
81106ae4:	d9403417 	ldw	r5,208(sp)
81106ae8:	20c7883a 	add	r3,r4,r3
81106aec:	10800044 	addi	r2,r2,1
81106af0:	41000115 	stw	r4,4(r8)
81106af4:	41400015 	stw	r5,0(r8)
81106af8:	d8c02015 	stw	r3,128(sp)
81106afc:	d8801f15 	stw	r2,124(sp)
81106b00:	010001c4 	movi	r4,7
81106b04:	20812116 	blt	r4,r2,81106f8c <___vfprintf_internal_r+0x1e60>
81106b08:	42000204 	addi	r8,r8,8
81106b0c:	0463c83a 	sub	r17,zero,r17
81106b10:	0440730e 	bge	zero,r17,81106ce0 <___vfprintf_internal_r+0x1bb4>
81106b14:	05800404 	movi	r22,16
81106b18:	b440860e 	bge	r22,r17,81106d34 <___vfprintf_internal_r+0x1c08>
81106b1c:	016044b4 	movhi	r5,33042
81106b20:	29660d84 	addi	r5,r5,-26570
81106b24:	d9402b15 	stw	r5,172(sp)
81106b28:	070001c4 	movi	fp,7
81106b2c:	dcc02c17 	ldw	r19,176(sp)
81106b30:	00000306 	br	81106b40 <___vfprintf_internal_r+0x1a14>
81106b34:	42000204 	addi	r8,r8,8
81106b38:	8c7ffc04 	addi	r17,r17,-16
81106b3c:	b440800e 	bge	r22,r17,81106d40 <___vfprintf_internal_r+0x1c14>
81106b40:	18c00404 	addi	r3,r3,16
81106b44:	10800044 	addi	r2,r2,1
81106b48:	45000015 	stw	r20,0(r8)
81106b4c:	45800115 	stw	r22,4(r8)
81106b50:	d8c02015 	stw	r3,128(sp)
81106b54:	d8801f15 	stw	r2,124(sp)
81106b58:	e0bff60e 	bge	fp,r2,81106b34 <__reset+0xfb0e6b34>
81106b5c:	d9801e04 	addi	r6,sp,120
81106b60:	b80b883a 	mov	r5,r23
81106b64:	9809883a 	mov	r4,r19
81106b68:	110db540 	call	8110db54 <__sprint_r>
81106b6c:	103a711e 	bne	r2,zero,81105534 <__reset+0xfb0e5534>
81106b70:	d8c02017 	ldw	r3,128(sp)
81106b74:	d8801f17 	ldw	r2,124(sp)
81106b78:	da000404 	addi	r8,sp,16
81106b7c:	003fee06 	br	81106b38 <__reset+0xfb0e6b38>
81106b80:	00bfffc4 	movi	r2,-1
81106b84:	003a6f06 	br	81105544 <__reset+0xfb0e5544>
81106b88:	008011c4 	movi	r2,71
81106b8c:	1440b816 	blt	r2,r17,81106e70 <___vfprintf_internal_r+0x1d44>
81106b90:	042044b4 	movhi	r16,33042
81106b94:	8425f704 	addi	r16,r16,-26660
81106b98:	00c000c4 	movi	r3,3
81106b9c:	00bfdfc4 	movi	r2,-129
81106ba0:	d8c02a15 	stw	r3,168(sp)
81106ba4:	90a4703a 	and	r18,r18,r2
81106ba8:	df002783 	ldbu	fp,158(sp)
81106bac:	d8c02e15 	stw	r3,184(sp)
81106bb0:	d8002915 	stw	zero,164(sp)
81106bb4:	d8003215 	stw	zero,200(sp)
81106bb8:	003b2906 	br	81105860 <__reset+0xfb0e5860>
81106bbc:	d9002d17 	ldw	r4,180(sp)
81106bc0:	24c00017 	ldw	r19,0(r4)
81106bc4:	21000104 	addi	r4,r4,4
81106bc8:	d9002d15 	stw	r4,180(sp)
81106bcc:	982dd7fa 	srai	r22,r19,31
81106bd0:	b005883a 	mov	r2,r22
81106bd4:	003a9f06 	br	81105654 <__reset+0xfb0e5654>
81106bd8:	d9402d17 	ldw	r5,180(sp)
81106bdc:	d8c02f17 	ldw	r3,188(sp)
81106be0:	28800017 	ldw	r2,0(r5)
81106be4:	29400104 	addi	r5,r5,4
81106be8:	d9402d15 	stw	r5,180(sp)
81106bec:	10c00015 	stw	r3,0(r2)
81106bf0:	00398606 	br	8110520c <__reset+0xfb0e520c>
81106bf4:	d9402d17 	ldw	r5,180(sp)
81106bf8:	002d883a 	mov	r22,zero
81106bfc:	2cc00017 	ldw	r19,0(r5)
81106c00:	29400104 	addi	r5,r5,4
81106c04:	d9402d15 	stw	r5,180(sp)
81106c08:	003c2306 	br	81105c98 <__reset+0xfb0e5c98>
81106c0c:	d8c02d17 	ldw	r3,180(sp)
81106c10:	d9002917 	ldw	r4,164(sp)
81106c14:	002d883a 	mov	r22,zero
81106c18:	18800104 	addi	r2,r3,4
81106c1c:	1cc0000b 	ldhu	r19,0(r3)
81106c20:	203dc10e 	bge	r4,zero,81106328 <__reset+0xfb0e6328>
81106c24:	003f7506 	br	811069fc <__reset+0xfb0e69fc>
81106c28:	042044b4 	movhi	r16,33042
81106c2c:	8425f504 	addi	r16,r16,-26668
81106c30:	003acc06 	br	81105764 <__reset+0xfb0e5764>
81106c34:	d9002c17 	ldw	r4,176(sp)
81106c38:	d9801e04 	addi	r6,sp,120
81106c3c:	b80b883a 	mov	r5,r23
81106c40:	110db540 	call	8110db54 <__sprint_r>
81106c44:	103a3b1e 	bne	r2,zero,81105534 <__reset+0xfb0e5534>
81106c48:	dc402617 	ldw	r17,152(sp)
81106c4c:	d8c02017 	ldw	r3,128(sp)
81106c50:	da000404 	addi	r8,sp,16
81106c54:	003f9c06 	br	81106ac8 <__reset+0xfb0e6ac8>
81106c58:	ac400043 	ldbu	r17,1(r21)
81106c5c:	94800814 	ori	r18,r18,32
81106c60:	ad400044 	addi	r21,r21,1
81106c64:	8c403fcc 	andi	r17,r17,255
81106c68:	8c40201c 	xori	r17,r17,128
81106c6c:	8c7fe004 	addi	r17,r17,-128
81106c70:	00398f06 	br	811052b0 <__reset+0xfb0e52b0>
81106c74:	d8c02d15 	stw	r3,180(sp)
81106c78:	0039883a 	mov	fp,zero
81106c7c:	003e3506 	br	81106554 <__reset+0xfb0e6554>
81106c80:	d9002c17 	ldw	r4,176(sp)
81106c84:	d9801e04 	addi	r6,sp,120
81106c88:	b80b883a 	mov	r5,r23
81106c8c:	110db540 	call	8110db54 <__sprint_r>
81106c90:	103a281e 	bne	r2,zero,81105534 <__reset+0xfb0e5534>
81106c94:	d8c02017 	ldw	r3,128(sp)
81106c98:	da000404 	addi	r8,sp,16
81106c9c:	003cd006 	br	81105fe0 <__reset+0xfb0e5fe0>
81106ca0:	8009883a 	mov	r4,r16
81106ca4:	da003d15 	stw	r8,244(sp)
81106ca8:	1102ebc0 	call	81102ebc <strlen>
81106cac:	d8802e15 	stw	r2,184(sp)
81106cb0:	da003d17 	ldw	r8,244(sp)
81106cb4:	103c340e 	bge	r2,zero,81105d88 <__reset+0xfb0e5d88>
81106cb8:	0005883a 	mov	r2,zero
81106cbc:	003c3206 	br	81105d88 <__reset+0xfb0e5d88>
81106cc0:	d9002c17 	ldw	r4,176(sp)
81106cc4:	d9801e04 	addi	r6,sp,120
81106cc8:	b80b883a 	mov	r5,r23
81106ccc:	110db540 	call	8110db54 <__sprint_r>
81106cd0:	103a181e 	bne	r2,zero,81105534 <__reset+0xfb0e5534>
81106cd4:	d8c02017 	ldw	r3,128(sp)
81106cd8:	d8801f17 	ldw	r2,124(sp)
81106cdc:	da000404 	addi	r8,sp,16
81106ce0:	d9403317 	ldw	r5,204(sp)
81106ce4:	10800044 	addi	r2,r2,1
81106ce8:	44000015 	stw	r16,0(r8)
81106cec:	28c7883a 	add	r3,r5,r3
81106cf0:	003b7d06 	br	81105ae8 <__reset+0xfb0e5ae8>
81106cf4:	012044b4 	movhi	r4,33042
81106cf8:	21261184 	addi	r4,r4,-26554
81106cfc:	d9003515 	stw	r4,212(sp)
81106d00:	003b1406 	br	81105954 <__reset+0xfb0e5954>
81106d04:	013fffc4 	movi	r4,-1
81106d08:	003a3506 	br	811055e0 <__reset+0xfb0e55e0>
81106d0c:	0023883a 	mov	r17,zero
81106d10:	003d9d06 	br	81106388 <__reset+0xfb0e6388>
81106d14:	d9002c17 	ldw	r4,176(sp)
81106d18:	d9801e04 	addi	r6,sp,120
81106d1c:	b80b883a 	mov	r5,r23
81106d20:	110db540 	call	8110db54 <__sprint_r>
81106d24:	103a031e 	bne	r2,zero,81105534 <__reset+0xfb0e5534>
81106d28:	d8c02017 	ldw	r3,128(sp)
81106d2c:	da000404 	addi	r8,sp,16
81106d30:	003d9406 	br	81106384 <__reset+0xfb0e6384>
81106d34:	012044b4 	movhi	r4,33042
81106d38:	21260d84 	addi	r4,r4,-26570
81106d3c:	d9002b15 	stw	r4,172(sp)
81106d40:	d9002b17 	ldw	r4,172(sp)
81106d44:	1c47883a 	add	r3,r3,r17
81106d48:	10800044 	addi	r2,r2,1
81106d4c:	41000015 	stw	r4,0(r8)
81106d50:	44400115 	stw	r17,4(r8)
81106d54:	d8c02015 	stw	r3,128(sp)
81106d58:	d8801f15 	stw	r2,124(sp)
81106d5c:	010001c4 	movi	r4,7
81106d60:	20bfd716 	blt	r4,r2,81106cc0 <__reset+0xfb0e6cc0>
81106d64:	42000204 	addi	r8,r8,8
81106d68:	003fdd06 	br	81106ce0 <__reset+0xfb0e6ce0>
81106d6c:	d9002c17 	ldw	r4,176(sp)
81106d70:	d9801e04 	addi	r6,sp,120
81106d74:	b80b883a 	mov	r5,r23
81106d78:	110db540 	call	8110db54 <__sprint_r>
81106d7c:	1039ed1e 	bne	r2,zero,81105534 <__reset+0xfb0e5534>
81106d80:	d8802617 	ldw	r2,152(sp)
81106d84:	d8c02017 	ldw	r3,128(sp)
81106d88:	da000404 	addi	r8,sp,16
81106d8c:	003e1006 	br	811065d0 <__reset+0xfb0e65d0>
81106d90:	00800044 	movi	r2,1
81106d94:	10803fcc 	andi	r2,r2,255
81106d98:	00c00044 	movi	r3,1
81106d9c:	10fa3526 	beq	r2,r3,81105674 <__reset+0xfb0e5674>
81106da0:	00c00084 	movi	r3,2
81106da4:	10fbcb26 	beq	r2,r3,81105cd4 <__reset+0xfb0e5cd4>
81106da8:	003a8f06 	br	811057e8 <__reset+0xfb0e57e8>
81106dac:	012044b4 	movhi	r4,33042
81106db0:	21261184 	addi	r4,r4,-26554
81106db4:	d9003515 	stw	r4,212(sp)
81106db8:	003b7606 	br	81105b94 <__reset+0xfb0e5b94>
81106dbc:	d8802917 	ldw	r2,164(sp)
81106dc0:	00c00184 	movi	r3,6
81106dc4:	1880012e 	bgeu	r3,r2,81106dcc <___vfprintf_internal_r+0x1ca0>
81106dc8:	1805883a 	mov	r2,r3
81106dcc:	d8802e15 	stw	r2,184(sp)
81106dd0:	1000ef16 	blt	r2,zero,81107190 <___vfprintf_internal_r+0x2064>
81106dd4:	042044b4 	movhi	r16,33042
81106dd8:	d8802a15 	stw	r2,168(sp)
81106ddc:	dcc02d15 	stw	r19,180(sp)
81106de0:	d8002915 	stw	zero,164(sp)
81106de4:	d8003215 	stw	zero,200(sp)
81106de8:	84260304 	addi	r16,r16,-26612
81106dec:	0039883a 	mov	fp,zero
81106df0:	003aa206 	br	8110587c <__reset+0xfb0e587c>
81106df4:	0021883a 	mov	r16,zero
81106df8:	003e0706 	br	81106618 <__reset+0xfb0e6618>
81106dfc:	d9002c17 	ldw	r4,176(sp)
81106e00:	d9801e04 	addi	r6,sp,120
81106e04:	b80b883a 	mov	r5,r23
81106e08:	110db540 	call	8110db54 <__sprint_r>
81106e0c:	1039c91e 	bne	r2,zero,81105534 <__reset+0xfb0e5534>
81106e10:	d8802617 	ldw	r2,152(sp)
81106e14:	d9403317 	ldw	r5,204(sp)
81106e18:	d8c02017 	ldw	r3,128(sp)
81106e1c:	da000404 	addi	r8,sp,16
81106e20:	2885c83a 	sub	r2,r5,r2
81106e24:	003dfb06 	br	81106614 <__reset+0xfb0e6614>
81106e28:	9080004c 	andi	r2,r18,1
81106e2c:	103e8f1e 	bne	r2,zero,8110686c <__reset+0xfb0e686c>
81106e30:	d8802117 	ldw	r2,132(sp)
81106e34:	003e9e06 	br	811068b0 <__reset+0xfb0e68b0>
81106e38:	1025883a 	mov	r18,r2
81106e3c:	0039883a 	mov	fp,zero
81106e40:	00800084 	movi	r2,2
81106e44:	003fd306 	br	81106d94 <__reset+0xfb0e6d94>
81106e48:	07000b44 	movi	fp,45
81106e4c:	df002785 	stb	fp,158(sp)
81106e50:	003a4006 	br	81105754 <__reset+0xfb0e5754>
81106e54:	00c00b44 	movi	r3,45
81106e58:	d8c02785 	stb	r3,158(sp)
81106e5c:	d8802a15 	stw	r2,168(sp)
81106e60:	dc802b17 	ldw	r18,172(sp)
81106e64:	d8002915 	stw	zero,164(sp)
81106e68:	07000b44 	movi	fp,45
81106e6c:	003a8006 	br	81105870 <__reset+0xfb0e5870>
81106e70:	042044b4 	movhi	r16,33042
81106e74:	8425f804 	addi	r16,r16,-26656
81106e78:	003f4706 	br	81106b98 <__reset+0xfb0e6b98>
81106e7c:	d8c02d17 	ldw	r3,180(sp)
81106e80:	d9002f17 	ldw	r4,188(sp)
81106e84:	18800017 	ldw	r2,0(r3)
81106e88:	18c00104 	addi	r3,r3,4
81106e8c:	d8c02d15 	stw	r3,180(sp)
81106e90:	11000015 	stw	r4,0(r2)
81106e94:	0038dd06 	br	8110520c <__reset+0xfb0e520c>
81106e98:	dd802617 	ldw	r22,152(sp)
81106e9c:	00bfff44 	movi	r2,-3
81106ea0:	b0801c16 	blt	r22,r2,81106f14 <___vfprintf_internal_r+0x1de8>
81106ea4:	d9402917 	ldw	r5,164(sp)
81106ea8:	2d801a16 	blt	r5,r22,81106f14 <___vfprintf_internal_r+0x1de8>
81106eac:	dd803215 	stw	r22,200(sp)
81106eb0:	003e8906 	br	811068d8 <__reset+0xfb0e68d8>
81106eb4:	012044b4 	movhi	r4,33042
81106eb8:	21260d84 	addi	r4,r4,-26570
81106ebc:	d9002b15 	stw	r4,172(sp)
81106ec0:	003c9106 	br	81106108 <__reset+0xfb0e6108>
81106ec4:	e005883a 	mov	r2,fp
81106ec8:	003e7906 	br	811068b0 <__reset+0xfb0e68b0>
81106ecc:	d9402917 	ldw	r5,164(sp)
81106ed0:	df002783 	ldbu	fp,158(sp)
81106ed4:	dcc02d15 	stw	r19,180(sp)
81106ed8:	d9402a15 	stw	r5,168(sp)
81106edc:	d9402e15 	stw	r5,184(sp)
81106ee0:	d8002915 	stw	zero,164(sp)
81106ee4:	d8003215 	stw	zero,200(sp)
81106ee8:	003a5d06 	br	81105860 <__reset+0xfb0e5860>
81106eec:	9080004c 	andi	r2,r18,1
81106ef0:	0039883a 	mov	fp,zero
81106ef4:	10000426 	beq	r2,zero,81106f08 <___vfprintf_internal_r+0x1ddc>
81106ef8:	00800c04 	movi	r2,48
81106efc:	dc001dc4 	addi	r16,sp,119
81106f00:	d8801dc5 	stb	r2,119(sp)
81106f04:	003b8006 	br	81105d08 <__reset+0xfb0e5d08>
81106f08:	d8002e15 	stw	zero,184(sp)
81106f0c:	dc001e04 	addi	r16,sp,120
81106f10:	003a4d06 	br	81105848 <__reset+0xfb0e5848>
81106f14:	8c7fff84 	addi	r17,r17,-2
81106f18:	b5bfffc4 	addi	r22,r22,-1
81106f1c:	dd802615 	stw	r22,152(sp)
81106f20:	dc4022c5 	stb	r17,139(sp)
81106f24:	b000bf16 	blt	r22,zero,81107224 <___vfprintf_internal_r+0x20f8>
81106f28:	00800ac4 	movi	r2,43
81106f2c:	d8802305 	stb	r2,140(sp)
81106f30:	00800244 	movi	r2,9
81106f34:	15807016 	blt	r2,r22,811070f8 <___vfprintf_internal_r+0x1fcc>
81106f38:	00800c04 	movi	r2,48
81106f3c:	b5800c04 	addi	r22,r22,48
81106f40:	d8802345 	stb	r2,141(sp)
81106f44:	dd802385 	stb	r22,142(sp)
81106f48:	d88023c4 	addi	r2,sp,143
81106f4c:	df0022c4 	addi	fp,sp,139
81106f50:	d8c03317 	ldw	r3,204(sp)
81106f54:	1739c83a 	sub	fp,r2,fp
81106f58:	d9003317 	ldw	r4,204(sp)
81106f5c:	e0c7883a 	add	r3,fp,r3
81106f60:	df003a15 	stw	fp,232(sp)
81106f64:	d8c02e15 	stw	r3,184(sp)
81106f68:	00800044 	movi	r2,1
81106f6c:	1100b30e 	bge	r2,r4,8110723c <___vfprintf_internal_r+0x2110>
81106f70:	d8c02e17 	ldw	r3,184(sp)
81106f74:	18c00044 	addi	r3,r3,1
81106f78:	d8c02e15 	stw	r3,184(sp)
81106f7c:	1805883a 	mov	r2,r3
81106f80:	1800ac16 	blt	r3,zero,81107234 <___vfprintf_internal_r+0x2108>
81106f84:	d8003215 	stw	zero,200(sp)
81106f88:	003e5d06 	br	81106900 <__reset+0xfb0e6900>
81106f8c:	d9002c17 	ldw	r4,176(sp)
81106f90:	d9801e04 	addi	r6,sp,120
81106f94:	b80b883a 	mov	r5,r23
81106f98:	110db540 	call	8110db54 <__sprint_r>
81106f9c:	1039651e 	bne	r2,zero,81105534 <__reset+0xfb0e5534>
81106fa0:	dc402617 	ldw	r17,152(sp)
81106fa4:	d8c02017 	ldw	r3,128(sp)
81106fa8:	d8801f17 	ldw	r2,124(sp)
81106fac:	da000404 	addi	r8,sp,16
81106fb0:	003ed606 	br	81106b0c <__reset+0xfb0e6b0c>
81106fb4:	582b883a 	mov	r21,r11
81106fb8:	d8002915 	stw	zero,164(sp)
81106fbc:	0038bd06 	br	811052b4 <__reset+0xfb0e52b4>
81106fc0:	d8802917 	ldw	r2,164(sp)
81106fc4:	103e071e 	bne	r2,zero,811067e4 <__reset+0xfb0e67e4>
81106fc8:	dc002915 	stw	r16,164(sp)
81106fcc:	003e0506 	br	811067e4 <__reset+0xfb0e67e4>
81106fd0:	d9002917 	ldw	r4,164(sp)
81106fd4:	20c00044 	addi	r3,r4,1
81106fd8:	003e0f06 	br	81106818 <__reset+0xfb0e6818>
81106fdc:	01400184 	movi	r5,6
81106fe0:	d9402915 	stw	r5,164(sp)
81106fe4:	003dff06 	br	811067e4 <__reset+0xfb0e67e4>
81106fe8:	d8802104 	addi	r2,sp,132
81106fec:	d8800315 	stw	r2,12(sp)
81106ff0:	d8802504 	addi	r2,sp,148
81106ff4:	d8800215 	stw	r2,8(sp)
81106ff8:	d8802604 	addi	r2,sp,152
81106ffc:	d8800115 	stw	r2,4(sp)
81107000:	d8802917 	ldw	r2,164(sp)
81107004:	d9403617 	ldw	r5,216(sp)
81107008:	d9002c17 	ldw	r4,176(sp)
8110700c:	d8800015 	stw	r2,0(sp)
81107010:	01c000c4 	movi	r7,3
81107014:	980d883a 	mov	r6,r19
81107018:	da003d15 	stw	r8,244(sp)
8110701c:	11077500 	call	81107750 <_dtoa_r>
81107020:	d8c02917 	ldw	r3,164(sp)
81107024:	da003d17 	ldw	r8,244(sp)
81107028:	1021883a 	mov	r16,r2
8110702c:	10f9883a 	add	fp,r2,r3
81107030:	81000007 	ldb	r4,0(r16)
81107034:	00800c04 	movi	r2,48
81107038:	20805e26 	beq	r4,r2,811071b4 <___vfprintf_internal_r+0x2088>
8110703c:	d8c02617 	ldw	r3,152(sp)
81107040:	e0f9883a 	add	fp,fp,r3
81107044:	003e0a06 	br	81106870 <__reset+0xfb0e6870>
81107048:	00c00b44 	movi	r3,45
8110704c:	24e0003c 	xorhi	r19,r4,32768
81107050:	d8c02a05 	stb	r3,168(sp)
81107054:	003de906 	br	811067fc <__reset+0xfb0e67fc>
81107058:	d8c03217 	ldw	r3,200(sp)
8110705c:	00c07a0e 	bge	zero,r3,81107248 <___vfprintf_internal_r+0x211c>
81107060:	00800044 	movi	r2,1
81107064:	d9003317 	ldw	r4,204(sp)
81107068:	1105883a 	add	r2,r2,r4
8110706c:	d8802e15 	stw	r2,184(sp)
81107070:	10004e16 	blt	r2,zero,811071ac <___vfprintf_internal_r+0x2080>
81107074:	044019c4 	movi	r17,103
81107078:	003e2106 	br	81106900 <__reset+0xfb0e6900>
8110707c:	d9002917 	ldw	r4,164(sp)
81107080:	d8802104 	addi	r2,sp,132
81107084:	d8800315 	stw	r2,12(sp)
81107088:	d9000015 	stw	r4,0(sp)
8110708c:	d8802504 	addi	r2,sp,148
81107090:	d9403617 	ldw	r5,216(sp)
81107094:	d9002c17 	ldw	r4,176(sp)
81107098:	d8800215 	stw	r2,8(sp)
8110709c:	d8802604 	addi	r2,sp,152
811070a0:	d8800115 	stw	r2,4(sp)
811070a4:	01c000c4 	movi	r7,3
811070a8:	980d883a 	mov	r6,r19
811070ac:	da003d15 	stw	r8,244(sp)
811070b0:	11077500 	call	81107750 <_dtoa_r>
811070b4:	d8c02917 	ldw	r3,164(sp)
811070b8:	da003d17 	ldw	r8,244(sp)
811070bc:	1021883a 	mov	r16,r2
811070c0:	00801184 	movi	r2,70
811070c4:	80f9883a 	add	fp,r16,r3
811070c8:	88bfd926 	beq	r17,r2,81107030 <__reset+0xfb0e7030>
811070cc:	003de806 	br	81106870 <__reset+0xfb0e6870>
811070d0:	d9002917 	ldw	r4,164(sp)
811070d4:	00c04d0e 	bge	zero,r3,8110720c <___vfprintf_internal_r+0x20e0>
811070d8:	2000441e 	bne	r4,zero,811071ec <___vfprintf_internal_r+0x20c0>
811070dc:	9480004c 	andi	r18,r18,1
811070e0:	9000421e 	bne	r18,zero,811071ec <___vfprintf_internal_r+0x20c0>
811070e4:	1805883a 	mov	r2,r3
811070e8:	18007016 	blt	r3,zero,811072ac <___vfprintf_internal_r+0x2180>
811070ec:	d8c03217 	ldw	r3,200(sp)
811070f0:	d8c02e15 	stw	r3,184(sp)
811070f4:	003e0206 	br	81106900 <__reset+0xfb0e6900>
811070f8:	df0022c4 	addi	fp,sp,139
811070fc:	dc002915 	stw	r16,164(sp)
81107100:	4027883a 	mov	r19,r8
81107104:	e021883a 	mov	r16,fp
81107108:	b009883a 	mov	r4,r22
8110710c:	01400284 	movi	r5,10
81107110:	11105080 	call	81110508 <__modsi3>
81107114:	10800c04 	addi	r2,r2,48
81107118:	843fffc4 	addi	r16,r16,-1
8110711c:	b009883a 	mov	r4,r22
81107120:	01400284 	movi	r5,10
81107124:	80800005 	stb	r2,0(r16)
81107128:	11104840 	call	81110484 <__divsi3>
8110712c:	102d883a 	mov	r22,r2
81107130:	00800244 	movi	r2,9
81107134:	15bff416 	blt	r2,r22,81107108 <__reset+0xfb0e7108>
81107138:	9811883a 	mov	r8,r19
8110713c:	b0800c04 	addi	r2,r22,48
81107140:	8027883a 	mov	r19,r16
81107144:	997fffc4 	addi	r5,r19,-1
81107148:	98bfffc5 	stb	r2,-1(r19)
8110714c:	dc002917 	ldw	r16,164(sp)
81107150:	2f006a2e 	bgeu	r5,fp,811072fc <___vfprintf_internal_r+0x21d0>
81107154:	d9c02384 	addi	r7,sp,142
81107158:	3ccfc83a 	sub	r7,r7,r19
8110715c:	d9002344 	addi	r4,sp,141
81107160:	e1cf883a 	add	r7,fp,r7
81107164:	00000106 	br	8110716c <___vfprintf_internal_r+0x2040>
81107168:	28800003 	ldbu	r2,0(r5)
8110716c:	20800005 	stb	r2,0(r4)
81107170:	21000044 	addi	r4,r4,1
81107174:	29400044 	addi	r5,r5,1
81107178:	393ffb1e 	bne	r7,r4,81107168 <__reset+0xfb0e7168>
8110717c:	d8802304 	addi	r2,sp,140
81107180:	14c5c83a 	sub	r2,r2,r19
81107184:	d8c02344 	addi	r3,sp,141
81107188:	1885883a 	add	r2,r3,r2
8110718c:	003f7006 	br	81106f50 <__reset+0xfb0e6f50>
81107190:	0005883a 	mov	r2,zero
81107194:	003f0f06 	br	81106dd4 <__reset+0xfb0e6dd4>
81107198:	d8c03217 	ldw	r3,200(sp)
8110719c:	18c00044 	addi	r3,r3,1
811071a0:	d8c02e15 	stw	r3,184(sp)
811071a4:	1805883a 	mov	r2,r3
811071a8:	183fb20e 	bge	r3,zero,81107074 <__reset+0xfb0e7074>
811071ac:	0005883a 	mov	r2,zero
811071b0:	003fb006 	br	81107074 <__reset+0xfb0e7074>
811071b4:	d9003617 	ldw	r4,216(sp)
811071b8:	000d883a 	mov	r6,zero
811071bc:	000f883a 	mov	r7,zero
811071c0:	980b883a 	mov	r5,r19
811071c4:	d8c03c15 	stw	r3,240(sp)
811071c8:	da003d15 	stw	r8,244(sp)
811071cc:	11117cc0 	call	811117cc <__eqdf2>
811071d0:	d8c03c17 	ldw	r3,240(sp)
811071d4:	da003d17 	ldw	r8,244(sp)
811071d8:	103f9826 	beq	r2,zero,8110703c <__reset+0xfb0e703c>
811071dc:	00800044 	movi	r2,1
811071e0:	10c7c83a 	sub	r3,r2,r3
811071e4:	d8c02615 	stw	r3,152(sp)
811071e8:	003f9506 	br	81107040 <__reset+0xfb0e7040>
811071ec:	d9002917 	ldw	r4,164(sp)
811071f0:	d8c03217 	ldw	r3,200(sp)
811071f4:	20800044 	addi	r2,r4,1
811071f8:	1885883a 	add	r2,r3,r2
811071fc:	d8802e15 	stw	r2,184(sp)
81107200:	103dbf0e 	bge	r2,zero,81106900 <__reset+0xfb0e6900>
81107204:	0005883a 	mov	r2,zero
81107208:	003dbd06 	br	81106900 <__reset+0xfb0e6900>
8110720c:	2000211e 	bne	r4,zero,81107294 <___vfprintf_internal_r+0x2168>
81107210:	9480004c 	andi	r18,r18,1
81107214:	90001f1e 	bne	r18,zero,81107294 <___vfprintf_internal_r+0x2168>
81107218:	00800044 	movi	r2,1
8110721c:	d8802e15 	stw	r2,184(sp)
81107220:	003db706 	br	81106900 <__reset+0xfb0e6900>
81107224:	00800b44 	movi	r2,45
81107228:	05adc83a 	sub	r22,zero,r22
8110722c:	d8802305 	stb	r2,140(sp)
81107230:	003f3f06 	br	81106f30 <__reset+0xfb0e6f30>
81107234:	0005883a 	mov	r2,zero
81107238:	003f5206 	br	81106f84 <__reset+0xfb0e6f84>
8110723c:	90a4703a 	and	r18,r18,r2
81107240:	903f4e26 	beq	r18,zero,81106f7c <__reset+0xfb0e6f7c>
81107244:	003f4a06 	br	81106f70 <__reset+0xfb0e6f70>
81107248:	00800084 	movi	r2,2
8110724c:	10c5c83a 	sub	r2,r2,r3
81107250:	003f8406 	br	81107064 <__reset+0xfb0e7064>
81107254:	d8802d17 	ldw	r2,180(sp)
81107258:	d9002d17 	ldw	r4,180(sp)
8110725c:	ac400043 	ldbu	r17,1(r21)
81107260:	10800017 	ldw	r2,0(r2)
81107264:	582b883a 	mov	r21,r11
81107268:	d8802915 	stw	r2,164(sp)
8110726c:	20800104 	addi	r2,r4,4
81107270:	d9002917 	ldw	r4,164(sp)
81107274:	d8802d15 	stw	r2,180(sp)
81107278:	203e7a0e 	bge	r4,zero,81106c64 <__reset+0xfb0e6c64>
8110727c:	8c403fcc 	andi	r17,r17,255
81107280:	00bfffc4 	movi	r2,-1
81107284:	8c40201c 	xori	r17,r17,128
81107288:	d8802915 	stw	r2,164(sp)
8110728c:	8c7fe004 	addi	r17,r17,-128
81107290:	00380706 	br	811052b0 <__reset+0xfb0e52b0>
81107294:	d8c02917 	ldw	r3,164(sp)
81107298:	18c00084 	addi	r3,r3,2
8110729c:	d8c02e15 	stw	r3,184(sp)
811072a0:	1805883a 	mov	r2,r3
811072a4:	183d960e 	bge	r3,zero,81106900 <__reset+0xfb0e6900>
811072a8:	003fd606 	br	81107204 <__reset+0xfb0e7204>
811072ac:	0005883a 	mov	r2,zero
811072b0:	003f8e06 	br	811070ec <__reset+0xfb0e70ec>
811072b4:	9080004c 	andi	r2,r18,1
811072b8:	103f811e 	bne	r2,zero,811070c0 <__reset+0xfb0e70c0>
811072bc:	d8802117 	ldw	r2,132(sp)
811072c0:	1405c83a 	sub	r2,r2,r16
811072c4:	d8803315 	stw	r2,204(sp)
811072c8:	b47ef326 	beq	r22,r17,81106e98 <__reset+0xfb0e6e98>
811072cc:	dd802617 	ldw	r22,152(sp)
811072d0:	003f1106 	br	81106f18 <__reset+0xfb0e6f18>
811072d4:	d9c02785 	stb	r7,158(sp)
811072d8:	00390406 	br	811056ec <__reset+0xfb0e56ec>
811072dc:	d9c02785 	stb	r7,158(sp)
811072e0:	0038d306 	br	81105630 <__reset+0xfb0e5630>
811072e4:	d9c02785 	stb	r7,158(sp)
811072e8:	003a6106 	br	81105c70 <__reset+0xfb0e5c70>
811072ec:	d9c02785 	stb	r7,158(sp)
811072f0:	003af806 	br	81105ed4 <__reset+0xfb0e5ed4>
811072f4:	0005883a 	mov	r2,zero
811072f8:	003d7e06 	br	811068f4 <__reset+0xfb0e68f4>
811072fc:	d8802344 	addi	r2,sp,141
81107300:	003f1306 	br	81106f50 <__reset+0xfb0e6f50>
81107304:	d9c02785 	stb	r7,158(sp)
81107308:	00392306 	br	81105798 <__reset+0xfb0e5798>
8110730c:	d9c02785 	stb	r7,158(sp)
81107310:	003aa906 	br	81105db8 <__reset+0xfb0e5db8>
81107314:	d9c02785 	stb	r7,158(sp)
81107318:	003a3d06 	br	81105c10 <__reset+0xfb0e5c10>
8110731c:	d9c02785 	stb	r7,158(sp)
81107320:	003aca06 	br	81105e4c <__reset+0xfb0e5e4c>

81107324 <__vfprintf_internal>:
81107324:	00a044b4 	movhi	r2,33042
81107328:	10af1804 	addi	r2,r2,-17312
8110732c:	300f883a 	mov	r7,r6
81107330:	280d883a 	mov	r6,r5
81107334:	200b883a 	mov	r5,r4
81107338:	11000017 	ldw	r4,0(r2)
8110733c:	110512c1 	jmpi	8110512c <___vfprintf_internal_r>

81107340 <__sbprintf>:
81107340:	2880030b 	ldhu	r2,12(r5)
81107344:	2ac01917 	ldw	r11,100(r5)
81107348:	2a80038b 	ldhu	r10,14(r5)
8110734c:	2a400717 	ldw	r9,28(r5)
81107350:	2a000917 	ldw	r8,36(r5)
81107354:	defee204 	addi	sp,sp,-1144
81107358:	00c10004 	movi	r3,1024
8110735c:	dc011a15 	stw	r16,1128(sp)
81107360:	10bfff4c 	andi	r2,r2,65533
81107364:	2821883a 	mov	r16,r5
81107368:	d8cb883a 	add	r5,sp,r3
8110736c:	dc811c15 	stw	r18,1136(sp)
81107370:	dc411b15 	stw	r17,1132(sp)
81107374:	dfc11d15 	stw	ra,1140(sp)
81107378:	2025883a 	mov	r18,r4
8110737c:	d881030d 	sth	r2,1036(sp)
81107380:	dac11915 	stw	r11,1124(sp)
81107384:	da81038d 	sth	r10,1038(sp)
81107388:	da410715 	stw	r9,1052(sp)
8110738c:	da010915 	stw	r8,1060(sp)
81107390:	dec10015 	stw	sp,1024(sp)
81107394:	dec10415 	stw	sp,1040(sp)
81107398:	d8c10215 	stw	r3,1032(sp)
8110739c:	d8c10515 	stw	r3,1044(sp)
811073a0:	d8010615 	stw	zero,1048(sp)
811073a4:	110512c0 	call	8110512c <___vfprintf_internal_r>
811073a8:	1023883a 	mov	r17,r2
811073ac:	10000416 	blt	r2,zero,811073c0 <__sbprintf+0x80>
811073b0:	d9410004 	addi	r5,sp,1024
811073b4:	9009883a 	mov	r4,r18
811073b8:	1108ff40 	call	81108ff4 <_fflush_r>
811073bc:	10000d1e 	bne	r2,zero,811073f4 <__sbprintf+0xb4>
811073c0:	d881030b 	ldhu	r2,1036(sp)
811073c4:	1080100c 	andi	r2,r2,64
811073c8:	10000326 	beq	r2,zero,811073d8 <__sbprintf+0x98>
811073cc:	8080030b 	ldhu	r2,12(r16)
811073d0:	10801014 	ori	r2,r2,64
811073d4:	8080030d 	sth	r2,12(r16)
811073d8:	8805883a 	mov	r2,r17
811073dc:	dfc11d17 	ldw	ra,1140(sp)
811073e0:	dc811c17 	ldw	r18,1136(sp)
811073e4:	dc411b17 	ldw	r17,1132(sp)
811073e8:	dc011a17 	ldw	r16,1128(sp)
811073ec:	dec11e04 	addi	sp,sp,1144
811073f0:	f800283a 	ret
811073f4:	047fffc4 	movi	r17,-1
811073f8:	003ff106 	br	811073c0 <__reset+0xfb0e73c0>

811073fc <__swsetup_r>:
811073fc:	00a044b4 	movhi	r2,33042
81107400:	defffd04 	addi	sp,sp,-12
81107404:	10af1804 	addi	r2,r2,-17312
81107408:	dc400115 	stw	r17,4(sp)
8110740c:	2023883a 	mov	r17,r4
81107410:	11000017 	ldw	r4,0(r2)
81107414:	dc000015 	stw	r16,0(sp)
81107418:	dfc00215 	stw	ra,8(sp)
8110741c:	2821883a 	mov	r16,r5
81107420:	20000226 	beq	r4,zero,8110742c <__swsetup_r+0x30>
81107424:	20800e17 	ldw	r2,56(r4)
81107428:	10003126 	beq	r2,zero,811074f0 <__swsetup_r+0xf4>
8110742c:	8080030b 	ldhu	r2,12(r16)
81107430:	10c0020c 	andi	r3,r2,8
81107434:	1009883a 	mov	r4,r2
81107438:	18000f26 	beq	r3,zero,81107478 <__swsetup_r+0x7c>
8110743c:	80c00417 	ldw	r3,16(r16)
81107440:	18001526 	beq	r3,zero,81107498 <__swsetup_r+0x9c>
81107444:	1100004c 	andi	r4,r2,1
81107448:	20001c1e 	bne	r4,zero,811074bc <__swsetup_r+0xc0>
8110744c:	1080008c 	andi	r2,r2,2
81107450:	1000291e 	bne	r2,zero,811074f8 <__swsetup_r+0xfc>
81107454:	80800517 	ldw	r2,20(r16)
81107458:	80800215 	stw	r2,8(r16)
8110745c:	18001c26 	beq	r3,zero,811074d0 <__swsetup_r+0xd4>
81107460:	0005883a 	mov	r2,zero
81107464:	dfc00217 	ldw	ra,8(sp)
81107468:	dc400117 	ldw	r17,4(sp)
8110746c:	dc000017 	ldw	r16,0(sp)
81107470:	dec00304 	addi	sp,sp,12
81107474:	f800283a 	ret
81107478:	2080040c 	andi	r2,r4,16
8110747c:	10002e26 	beq	r2,zero,81107538 <__swsetup_r+0x13c>
81107480:	2080010c 	andi	r2,r4,4
81107484:	10001e1e 	bne	r2,zero,81107500 <__swsetup_r+0x104>
81107488:	80c00417 	ldw	r3,16(r16)
8110748c:	20800214 	ori	r2,r4,8
81107490:	8080030d 	sth	r2,12(r16)
81107494:	183feb1e 	bne	r3,zero,81107444 <__reset+0xfb0e7444>
81107498:	1100a00c 	andi	r4,r2,640
8110749c:	01408004 	movi	r5,512
811074a0:	217fe826 	beq	r4,r5,81107444 <__reset+0xfb0e7444>
811074a4:	800b883a 	mov	r5,r16
811074a8:	8809883a 	mov	r4,r17
811074ac:	1109f740 	call	81109f74 <__smakebuf_r>
811074b0:	8080030b 	ldhu	r2,12(r16)
811074b4:	80c00417 	ldw	r3,16(r16)
811074b8:	003fe206 	br	81107444 <__reset+0xfb0e7444>
811074bc:	80800517 	ldw	r2,20(r16)
811074c0:	80000215 	stw	zero,8(r16)
811074c4:	0085c83a 	sub	r2,zero,r2
811074c8:	80800615 	stw	r2,24(r16)
811074cc:	183fe41e 	bne	r3,zero,81107460 <__reset+0xfb0e7460>
811074d0:	80c0030b 	ldhu	r3,12(r16)
811074d4:	0005883a 	mov	r2,zero
811074d8:	1900200c 	andi	r4,r3,128
811074dc:	203fe126 	beq	r4,zero,81107464 <__reset+0xfb0e7464>
811074e0:	18c01014 	ori	r3,r3,64
811074e4:	80c0030d 	sth	r3,12(r16)
811074e8:	00bfffc4 	movi	r2,-1
811074ec:	003fdd06 	br	81107464 <__reset+0xfb0e7464>
811074f0:	11093d00 	call	811093d0 <__sinit>
811074f4:	003fcd06 	br	8110742c <__reset+0xfb0e742c>
811074f8:	0005883a 	mov	r2,zero
811074fc:	003fd606 	br	81107458 <__reset+0xfb0e7458>
81107500:	81400c17 	ldw	r5,48(r16)
81107504:	28000626 	beq	r5,zero,81107520 <__swsetup_r+0x124>
81107508:	80801004 	addi	r2,r16,64
8110750c:	28800326 	beq	r5,r2,8110751c <__swsetup_r+0x120>
81107510:	8809883a 	mov	r4,r17
81107514:	11095440 	call	81109544 <_free_r>
81107518:	8100030b 	ldhu	r4,12(r16)
8110751c:	80000c15 	stw	zero,48(r16)
81107520:	80c00417 	ldw	r3,16(r16)
81107524:	00bff6c4 	movi	r2,-37
81107528:	1108703a 	and	r4,r2,r4
8110752c:	80000115 	stw	zero,4(r16)
81107530:	80c00015 	stw	r3,0(r16)
81107534:	003fd506 	br	8110748c <__reset+0xfb0e748c>
81107538:	00800244 	movi	r2,9
8110753c:	88800015 	stw	r2,0(r17)
81107540:	20801014 	ori	r2,r4,64
81107544:	8080030d 	sth	r2,12(r16)
81107548:	00bfffc4 	movi	r2,-1
8110754c:	003fc506 	br	81107464 <__reset+0xfb0e7464>

81107550 <quorem>:
81107550:	defff704 	addi	sp,sp,-36
81107554:	dc800215 	stw	r18,8(sp)
81107558:	20800417 	ldw	r2,16(r4)
8110755c:	2c800417 	ldw	r18,16(r5)
81107560:	dfc00815 	stw	ra,32(sp)
81107564:	ddc00715 	stw	r23,28(sp)
81107568:	dd800615 	stw	r22,24(sp)
8110756c:	dd400515 	stw	r21,20(sp)
81107570:	dd000415 	stw	r20,16(sp)
81107574:	dcc00315 	stw	r19,12(sp)
81107578:	dc400115 	stw	r17,4(sp)
8110757c:	dc000015 	stw	r16,0(sp)
81107580:	14807116 	blt	r2,r18,81107748 <quorem+0x1f8>
81107584:	94bfffc4 	addi	r18,r18,-1
81107588:	94ad883a 	add	r22,r18,r18
8110758c:	b5ad883a 	add	r22,r22,r22
81107590:	2c400504 	addi	r17,r5,20
81107594:	8da9883a 	add	r20,r17,r22
81107598:	25400504 	addi	r21,r4,20
8110759c:	282f883a 	mov	r23,r5
811075a0:	adad883a 	add	r22,r21,r22
811075a4:	a1400017 	ldw	r5,0(r20)
811075a8:	2021883a 	mov	r16,r4
811075ac:	b1000017 	ldw	r4,0(r22)
811075b0:	29400044 	addi	r5,r5,1
811075b4:	111057c0 	call	8111057c <__udivsi3>
811075b8:	1027883a 	mov	r19,r2
811075bc:	10002c26 	beq	r2,zero,81107670 <quorem+0x120>
811075c0:	a813883a 	mov	r9,r21
811075c4:	880b883a 	mov	r5,r17
811075c8:	0009883a 	mov	r4,zero
811075cc:	000d883a 	mov	r6,zero
811075d0:	2a000017 	ldw	r8,0(r5)
811075d4:	49c00017 	ldw	r7,0(r9)
811075d8:	29400104 	addi	r5,r5,4
811075dc:	40bfffcc 	andi	r2,r8,65535
811075e0:	14c5383a 	mul	r2,r2,r19
811075e4:	4010d43a 	srli	r8,r8,16
811075e8:	38ffffcc 	andi	r3,r7,65535
811075ec:	1105883a 	add	r2,r2,r4
811075f0:	1008d43a 	srli	r4,r2,16
811075f4:	44d1383a 	mul	r8,r8,r19
811075f8:	198d883a 	add	r6,r3,r6
811075fc:	10ffffcc 	andi	r3,r2,65535
81107600:	30c7c83a 	sub	r3,r6,r3
81107604:	380ed43a 	srli	r7,r7,16
81107608:	4105883a 	add	r2,r8,r4
8110760c:	180dd43a 	srai	r6,r3,16
81107610:	113fffcc 	andi	r4,r2,65535
81107614:	390fc83a 	sub	r7,r7,r4
81107618:	398d883a 	add	r6,r7,r6
8110761c:	300e943a 	slli	r7,r6,16
81107620:	18ffffcc 	andi	r3,r3,65535
81107624:	1008d43a 	srli	r4,r2,16
81107628:	38ceb03a 	or	r7,r7,r3
8110762c:	49c00015 	stw	r7,0(r9)
81107630:	300dd43a 	srai	r6,r6,16
81107634:	4a400104 	addi	r9,r9,4
81107638:	a17fe52e 	bgeu	r20,r5,811075d0 <__reset+0xfb0e75d0>
8110763c:	b0800017 	ldw	r2,0(r22)
81107640:	10000b1e 	bne	r2,zero,81107670 <quorem+0x120>
81107644:	b0bfff04 	addi	r2,r22,-4
81107648:	a880082e 	bgeu	r21,r2,8110766c <quorem+0x11c>
8110764c:	b0ffff17 	ldw	r3,-4(r22)
81107650:	18000326 	beq	r3,zero,81107660 <quorem+0x110>
81107654:	00000506 	br	8110766c <quorem+0x11c>
81107658:	10c00017 	ldw	r3,0(r2)
8110765c:	1800031e 	bne	r3,zero,8110766c <quorem+0x11c>
81107660:	10bfff04 	addi	r2,r2,-4
81107664:	94bfffc4 	addi	r18,r18,-1
81107668:	a8bffb36 	bltu	r21,r2,81107658 <__reset+0xfb0e7658>
8110766c:	84800415 	stw	r18,16(r16)
81107670:	b80b883a 	mov	r5,r23
81107674:	8009883a 	mov	r4,r16
81107678:	110b56c0 	call	8110b56c <__mcmp>
8110767c:	10002616 	blt	r2,zero,81107718 <quorem+0x1c8>
81107680:	9cc00044 	addi	r19,r19,1
81107684:	a805883a 	mov	r2,r21
81107688:	000b883a 	mov	r5,zero
8110768c:	11000017 	ldw	r4,0(r2)
81107690:	89800017 	ldw	r6,0(r17)
81107694:	10800104 	addi	r2,r2,4
81107698:	20ffffcc 	andi	r3,r4,65535
8110769c:	194b883a 	add	r5,r3,r5
811076a0:	30ffffcc 	andi	r3,r6,65535
811076a4:	28c7c83a 	sub	r3,r5,r3
811076a8:	300cd43a 	srli	r6,r6,16
811076ac:	2008d43a 	srli	r4,r4,16
811076b0:	180bd43a 	srai	r5,r3,16
811076b4:	18ffffcc 	andi	r3,r3,65535
811076b8:	2189c83a 	sub	r4,r4,r6
811076bc:	2149883a 	add	r4,r4,r5
811076c0:	200c943a 	slli	r6,r4,16
811076c4:	8c400104 	addi	r17,r17,4
811076c8:	200bd43a 	srai	r5,r4,16
811076cc:	30c6b03a 	or	r3,r6,r3
811076d0:	10ffff15 	stw	r3,-4(r2)
811076d4:	a47fed2e 	bgeu	r20,r17,8110768c <__reset+0xfb0e768c>
811076d8:	9485883a 	add	r2,r18,r18
811076dc:	1085883a 	add	r2,r2,r2
811076e0:	a887883a 	add	r3,r21,r2
811076e4:	18800017 	ldw	r2,0(r3)
811076e8:	10000b1e 	bne	r2,zero,81107718 <quorem+0x1c8>
811076ec:	18bfff04 	addi	r2,r3,-4
811076f0:	a880082e 	bgeu	r21,r2,81107714 <quorem+0x1c4>
811076f4:	18ffff17 	ldw	r3,-4(r3)
811076f8:	18000326 	beq	r3,zero,81107708 <quorem+0x1b8>
811076fc:	00000506 	br	81107714 <quorem+0x1c4>
81107700:	10c00017 	ldw	r3,0(r2)
81107704:	1800031e 	bne	r3,zero,81107714 <quorem+0x1c4>
81107708:	10bfff04 	addi	r2,r2,-4
8110770c:	94bfffc4 	addi	r18,r18,-1
81107710:	a8bffb36 	bltu	r21,r2,81107700 <__reset+0xfb0e7700>
81107714:	84800415 	stw	r18,16(r16)
81107718:	9805883a 	mov	r2,r19
8110771c:	dfc00817 	ldw	ra,32(sp)
81107720:	ddc00717 	ldw	r23,28(sp)
81107724:	dd800617 	ldw	r22,24(sp)
81107728:	dd400517 	ldw	r21,20(sp)
8110772c:	dd000417 	ldw	r20,16(sp)
81107730:	dcc00317 	ldw	r19,12(sp)
81107734:	dc800217 	ldw	r18,8(sp)
81107738:	dc400117 	ldw	r17,4(sp)
8110773c:	dc000017 	ldw	r16,0(sp)
81107740:	dec00904 	addi	sp,sp,36
81107744:	f800283a 	ret
81107748:	0005883a 	mov	r2,zero
8110774c:	003ff306 	br	8110771c <__reset+0xfb0e771c>

81107750 <_dtoa_r>:
81107750:	20801017 	ldw	r2,64(r4)
81107754:	deffde04 	addi	sp,sp,-136
81107758:	df002015 	stw	fp,128(sp)
8110775c:	dcc01b15 	stw	r19,108(sp)
81107760:	dc801a15 	stw	r18,104(sp)
81107764:	dc401915 	stw	r17,100(sp)
81107768:	dc001815 	stw	r16,96(sp)
8110776c:	dfc02115 	stw	ra,132(sp)
81107770:	ddc01f15 	stw	r23,124(sp)
81107774:	dd801e15 	stw	r22,120(sp)
81107778:	dd401d15 	stw	r21,116(sp)
8110777c:	dd001c15 	stw	r20,112(sp)
81107780:	d9c00315 	stw	r7,12(sp)
81107784:	2039883a 	mov	fp,r4
81107788:	3023883a 	mov	r17,r6
8110778c:	2825883a 	mov	r18,r5
81107790:	dc002417 	ldw	r16,144(sp)
81107794:	3027883a 	mov	r19,r6
81107798:	10000826 	beq	r2,zero,811077bc <_dtoa_r+0x6c>
8110779c:	21801117 	ldw	r6,68(r4)
811077a0:	00c00044 	movi	r3,1
811077a4:	100b883a 	mov	r5,r2
811077a8:	1986983a 	sll	r3,r3,r6
811077ac:	11800115 	stw	r6,4(r2)
811077b0:	10c00215 	stw	r3,8(r2)
811077b4:	110ad4c0 	call	8110ad4c <_Bfree>
811077b8:	e0001015 	stw	zero,64(fp)
811077bc:	88002e16 	blt	r17,zero,81107878 <_dtoa_r+0x128>
811077c0:	80000015 	stw	zero,0(r16)
811077c4:	889ffc2c 	andhi	r2,r17,32752
811077c8:	00dffc34 	movhi	r3,32752
811077cc:	10c01c26 	beq	r2,r3,81107840 <_dtoa_r+0xf0>
811077d0:	000d883a 	mov	r6,zero
811077d4:	000f883a 	mov	r7,zero
811077d8:	9009883a 	mov	r4,r18
811077dc:	980b883a 	mov	r5,r19
811077e0:	11117cc0 	call	811117cc <__eqdf2>
811077e4:	10002b1e 	bne	r2,zero,81107894 <_dtoa_r+0x144>
811077e8:	d9c02317 	ldw	r7,140(sp)
811077ec:	00800044 	movi	r2,1
811077f0:	38800015 	stw	r2,0(r7)
811077f4:	d8802517 	ldw	r2,148(sp)
811077f8:	10019e26 	beq	r2,zero,81107e74 <_dtoa_r+0x724>
811077fc:	d8c02517 	ldw	r3,148(sp)
81107800:	00a044b4 	movhi	r2,33042
81107804:	10a60544 	addi	r2,r2,-26603
81107808:	18800015 	stw	r2,0(r3)
8110780c:	10bfffc4 	addi	r2,r2,-1
81107810:	dfc02117 	ldw	ra,132(sp)
81107814:	df002017 	ldw	fp,128(sp)
81107818:	ddc01f17 	ldw	r23,124(sp)
8110781c:	dd801e17 	ldw	r22,120(sp)
81107820:	dd401d17 	ldw	r21,116(sp)
81107824:	dd001c17 	ldw	r20,112(sp)
81107828:	dcc01b17 	ldw	r19,108(sp)
8110782c:	dc801a17 	ldw	r18,104(sp)
81107830:	dc401917 	ldw	r17,100(sp)
81107834:	dc001817 	ldw	r16,96(sp)
81107838:	dec02204 	addi	sp,sp,136
8110783c:	f800283a 	ret
81107840:	d8c02317 	ldw	r3,140(sp)
81107844:	0089c3c4 	movi	r2,9999
81107848:	18800015 	stw	r2,0(r3)
8110784c:	90017726 	beq	r18,zero,81107e2c <_dtoa_r+0x6dc>
81107850:	00a044b4 	movhi	r2,33042
81107854:	10a61904 	addi	r2,r2,-26524
81107858:	d9002517 	ldw	r4,148(sp)
8110785c:	203fec26 	beq	r4,zero,81107810 <__reset+0xfb0e7810>
81107860:	10c000c7 	ldb	r3,3(r2)
81107864:	1801781e 	bne	r3,zero,81107e48 <_dtoa_r+0x6f8>
81107868:	10c000c4 	addi	r3,r2,3
8110786c:	d9802517 	ldw	r6,148(sp)
81107870:	30c00015 	stw	r3,0(r6)
81107874:	003fe606 	br	81107810 <__reset+0xfb0e7810>
81107878:	04e00034 	movhi	r19,32768
8110787c:	9cffffc4 	addi	r19,r19,-1
81107880:	00800044 	movi	r2,1
81107884:	8ce6703a 	and	r19,r17,r19
81107888:	80800015 	stw	r2,0(r16)
8110788c:	9823883a 	mov	r17,r19
81107890:	003fcc06 	br	811077c4 <__reset+0xfb0e77c4>
81107894:	d8800204 	addi	r2,sp,8
81107898:	d8800015 	stw	r2,0(sp)
8110789c:	d9c00104 	addi	r7,sp,4
811078a0:	900b883a 	mov	r5,r18
811078a4:	980d883a 	mov	r6,r19
811078a8:	e009883a 	mov	r4,fp
811078ac:	8820d53a 	srli	r16,r17,20
811078b0:	110b9380 	call	8110b938 <__d2b>
811078b4:	d8800915 	stw	r2,36(sp)
811078b8:	8001651e 	bne	r16,zero,81107e50 <_dtoa_r+0x700>
811078bc:	dd800217 	ldw	r22,8(sp)
811078c0:	dc000117 	ldw	r16,4(sp)
811078c4:	00800804 	movi	r2,32
811078c8:	b421883a 	add	r16,r22,r16
811078cc:	80c10c84 	addi	r3,r16,1074
811078d0:	10c2d10e 	bge	r2,r3,81108418 <_dtoa_r+0xcc8>
811078d4:	00801004 	movi	r2,64
811078d8:	81010484 	addi	r4,r16,1042
811078dc:	10c7c83a 	sub	r3,r2,r3
811078e0:	9108d83a 	srl	r4,r18,r4
811078e4:	88e2983a 	sll	r17,r17,r3
811078e8:	2448b03a 	or	r4,r4,r17
811078ec:	1112b940 	call	81112b94 <__floatunsidf>
811078f0:	017f8434 	movhi	r5,65040
811078f4:	01800044 	movi	r6,1
811078f8:	1009883a 	mov	r4,r2
811078fc:	194b883a 	add	r5,r3,r5
81107900:	843fffc4 	addi	r16,r16,-1
81107904:	d9801115 	stw	r6,68(sp)
81107908:	000d883a 	mov	r6,zero
8110790c:	01cffe34 	movhi	r7,16376
81107910:	111213c0 	call	8111213c <__subdf3>
81107914:	0198dbf4 	movhi	r6,25455
81107918:	01cff4f4 	movhi	r7,16339
8110791c:	3190d844 	addi	r6,r6,17249
81107920:	39e1e9c4 	addi	r7,r7,-30809
81107924:	1009883a 	mov	r4,r2
81107928:	180b883a 	mov	r5,r3
8110792c:	1111a240 	call	81111a24 <__muldf3>
81107930:	01a2d874 	movhi	r6,35681
81107934:	01cff1f4 	movhi	r7,16327
81107938:	31b22cc4 	addi	r6,r6,-14157
8110793c:	39e28a04 	addi	r7,r7,-30168
81107940:	180b883a 	mov	r5,r3
81107944:	1009883a 	mov	r4,r2
81107948:	11106380 	call	81110638 <__adddf3>
8110794c:	8009883a 	mov	r4,r16
81107950:	1029883a 	mov	r20,r2
81107954:	1823883a 	mov	r17,r3
81107958:	1112ab80 	call	81112ab8 <__floatsidf>
8110795c:	019427f4 	movhi	r6,20639
81107960:	01cff4f4 	movhi	r7,16339
81107964:	319e7ec4 	addi	r6,r6,31227
81107968:	39d104c4 	addi	r7,r7,17427
8110796c:	1009883a 	mov	r4,r2
81107970:	180b883a 	mov	r5,r3
81107974:	1111a240 	call	81111a24 <__muldf3>
81107978:	100d883a 	mov	r6,r2
8110797c:	180f883a 	mov	r7,r3
81107980:	a009883a 	mov	r4,r20
81107984:	880b883a 	mov	r5,r17
81107988:	11106380 	call	81110638 <__adddf3>
8110798c:	1009883a 	mov	r4,r2
81107990:	180b883a 	mov	r5,r3
81107994:	1029883a 	mov	r20,r2
81107998:	1823883a 	mov	r17,r3
8110799c:	1112a380 	call	81112a38 <__fixdfsi>
811079a0:	000d883a 	mov	r6,zero
811079a4:	000f883a 	mov	r7,zero
811079a8:	a009883a 	mov	r4,r20
811079ac:	880b883a 	mov	r5,r17
811079b0:	d8800515 	stw	r2,20(sp)
811079b4:	11119300 	call	81111930 <__ledf2>
811079b8:	10028716 	blt	r2,zero,811083d8 <_dtoa_r+0xc88>
811079bc:	d8c00517 	ldw	r3,20(sp)
811079c0:	00800584 	movi	r2,22
811079c4:	10c27536 	bltu	r2,r3,8110839c <_dtoa_r+0xc4c>
811079c8:	180490fa 	slli	r2,r3,3
811079cc:	00e044b4 	movhi	r3,33042
811079d0:	18e63504 	addi	r3,r3,-26412
811079d4:	1885883a 	add	r2,r3,r2
811079d8:	11000017 	ldw	r4,0(r2)
811079dc:	11400117 	ldw	r5,4(r2)
811079e0:	900d883a 	mov	r6,r18
811079e4:	980f883a 	mov	r7,r19
811079e8:	11118540 	call	81111854 <__gedf2>
811079ec:	00828d0e 	bge	zero,r2,81108424 <_dtoa_r+0xcd4>
811079f0:	d9000517 	ldw	r4,20(sp)
811079f4:	d8000e15 	stw	zero,56(sp)
811079f8:	213fffc4 	addi	r4,r4,-1
811079fc:	d9000515 	stw	r4,20(sp)
81107a00:	b42dc83a 	sub	r22,r22,r16
81107a04:	b5bfffc4 	addi	r22,r22,-1
81107a08:	b0026f16 	blt	r22,zero,811083c8 <_dtoa_r+0xc78>
81107a0c:	d8000815 	stw	zero,32(sp)
81107a10:	d9c00517 	ldw	r7,20(sp)
81107a14:	38026416 	blt	r7,zero,811083a8 <_dtoa_r+0xc58>
81107a18:	b1ed883a 	add	r22,r22,r7
81107a1c:	d9c00d15 	stw	r7,52(sp)
81107a20:	d8000a15 	stw	zero,40(sp)
81107a24:	d9800317 	ldw	r6,12(sp)
81107a28:	00800244 	movi	r2,9
81107a2c:	11811436 	bltu	r2,r6,81107e80 <_dtoa_r+0x730>
81107a30:	00800144 	movi	r2,5
81107a34:	1184e10e 	bge	r2,r6,81108dbc <_dtoa_r+0x166c>
81107a38:	31bfff04 	addi	r6,r6,-4
81107a3c:	d9800315 	stw	r6,12(sp)
81107a40:	0023883a 	mov	r17,zero
81107a44:	d9800317 	ldw	r6,12(sp)
81107a48:	008000c4 	movi	r2,3
81107a4c:	30836726 	beq	r6,r2,811087ec <_dtoa_r+0x109c>
81107a50:	1183410e 	bge	r2,r6,81108758 <_dtoa_r+0x1008>
81107a54:	d9c00317 	ldw	r7,12(sp)
81107a58:	00800104 	movi	r2,4
81107a5c:	38827c26 	beq	r7,r2,81108450 <_dtoa_r+0xd00>
81107a60:	00800144 	movi	r2,5
81107a64:	3884c41e 	bne	r7,r2,81108d78 <_dtoa_r+0x1628>
81107a68:	00800044 	movi	r2,1
81107a6c:	d8800b15 	stw	r2,44(sp)
81107a70:	d8c00517 	ldw	r3,20(sp)
81107a74:	d9002217 	ldw	r4,136(sp)
81107a78:	1907883a 	add	r3,r3,r4
81107a7c:	19800044 	addi	r6,r3,1
81107a80:	d8c00c15 	stw	r3,48(sp)
81107a84:	d9800615 	stw	r6,24(sp)
81107a88:	0183a40e 	bge	zero,r6,8110891c <_dtoa_r+0x11cc>
81107a8c:	d9800617 	ldw	r6,24(sp)
81107a90:	3021883a 	mov	r16,r6
81107a94:	e0001115 	stw	zero,68(fp)
81107a98:	008005c4 	movi	r2,23
81107a9c:	1184c92e 	bgeu	r2,r6,81108dc4 <_dtoa_r+0x1674>
81107aa0:	00c00044 	movi	r3,1
81107aa4:	00800104 	movi	r2,4
81107aa8:	1085883a 	add	r2,r2,r2
81107aac:	11000504 	addi	r4,r2,20
81107ab0:	180b883a 	mov	r5,r3
81107ab4:	18c00044 	addi	r3,r3,1
81107ab8:	313ffb2e 	bgeu	r6,r4,81107aa8 <__reset+0xfb0e7aa8>
81107abc:	e1401115 	stw	r5,68(fp)
81107ac0:	e009883a 	mov	r4,fp
81107ac4:	110aca40 	call	8110aca4 <_Balloc>
81107ac8:	d8800715 	stw	r2,28(sp)
81107acc:	e0801015 	stw	r2,64(fp)
81107ad0:	00800384 	movi	r2,14
81107ad4:	1400f736 	bltu	r2,r16,81107eb4 <_dtoa_r+0x764>
81107ad8:	8800f626 	beq	r17,zero,81107eb4 <_dtoa_r+0x764>
81107adc:	d9c00517 	ldw	r7,20(sp)
81107ae0:	01c39a0e 	bge	zero,r7,8110894c <_dtoa_r+0x11fc>
81107ae4:	388003cc 	andi	r2,r7,15
81107ae8:	100490fa 	slli	r2,r2,3
81107aec:	382bd13a 	srai	r21,r7,4
81107af0:	00e044b4 	movhi	r3,33042
81107af4:	18e63504 	addi	r3,r3,-26412
81107af8:	1885883a 	add	r2,r3,r2
81107afc:	a8c0040c 	andi	r3,r21,16
81107b00:	12400017 	ldw	r9,0(r2)
81107b04:	12000117 	ldw	r8,4(r2)
81107b08:	18037926 	beq	r3,zero,811088f0 <_dtoa_r+0x11a0>
81107b0c:	00a044b4 	movhi	r2,33042
81107b10:	10a62b04 	addi	r2,r2,-26452
81107b14:	11800817 	ldw	r6,32(r2)
81107b18:	11c00917 	ldw	r7,36(r2)
81107b1c:	9009883a 	mov	r4,r18
81107b20:	980b883a 	mov	r5,r19
81107b24:	da001715 	stw	r8,92(sp)
81107b28:	da401615 	stw	r9,88(sp)
81107b2c:	1110ee40 	call	81110ee4 <__divdf3>
81107b30:	da001717 	ldw	r8,92(sp)
81107b34:	da401617 	ldw	r9,88(sp)
81107b38:	ad4003cc 	andi	r21,r21,15
81107b3c:	040000c4 	movi	r16,3
81107b40:	1023883a 	mov	r17,r2
81107b44:	1829883a 	mov	r20,r3
81107b48:	a8001126 	beq	r21,zero,81107b90 <_dtoa_r+0x440>
81107b4c:	05e044b4 	movhi	r23,33042
81107b50:	bde62b04 	addi	r23,r23,-26452
81107b54:	4805883a 	mov	r2,r9
81107b58:	4007883a 	mov	r3,r8
81107b5c:	a980004c 	andi	r6,r21,1
81107b60:	1009883a 	mov	r4,r2
81107b64:	a82bd07a 	srai	r21,r21,1
81107b68:	180b883a 	mov	r5,r3
81107b6c:	30000426 	beq	r6,zero,81107b80 <_dtoa_r+0x430>
81107b70:	b9800017 	ldw	r6,0(r23)
81107b74:	b9c00117 	ldw	r7,4(r23)
81107b78:	84000044 	addi	r16,r16,1
81107b7c:	1111a240 	call	81111a24 <__muldf3>
81107b80:	bdc00204 	addi	r23,r23,8
81107b84:	a83ff51e 	bne	r21,zero,81107b5c <__reset+0xfb0e7b5c>
81107b88:	1013883a 	mov	r9,r2
81107b8c:	1811883a 	mov	r8,r3
81107b90:	480d883a 	mov	r6,r9
81107b94:	400f883a 	mov	r7,r8
81107b98:	8809883a 	mov	r4,r17
81107b9c:	a00b883a 	mov	r5,r20
81107ba0:	1110ee40 	call	81110ee4 <__divdf3>
81107ba4:	d8800f15 	stw	r2,60(sp)
81107ba8:	d8c01015 	stw	r3,64(sp)
81107bac:	d8c00e17 	ldw	r3,56(sp)
81107bb0:	18000626 	beq	r3,zero,81107bcc <_dtoa_r+0x47c>
81107bb4:	d9000f17 	ldw	r4,60(sp)
81107bb8:	d9401017 	ldw	r5,64(sp)
81107bbc:	000d883a 	mov	r6,zero
81107bc0:	01cffc34 	movhi	r7,16368
81107bc4:	11119300 	call	81111930 <__ledf2>
81107bc8:	10040b16 	blt	r2,zero,81108bf8 <_dtoa_r+0x14a8>
81107bcc:	8009883a 	mov	r4,r16
81107bd0:	1112ab80 	call	81112ab8 <__floatsidf>
81107bd4:	d9800f17 	ldw	r6,60(sp)
81107bd8:	d9c01017 	ldw	r7,64(sp)
81107bdc:	1009883a 	mov	r4,r2
81107be0:	180b883a 	mov	r5,r3
81107be4:	1111a240 	call	81111a24 <__muldf3>
81107be8:	000d883a 	mov	r6,zero
81107bec:	01d00734 	movhi	r7,16412
81107bf0:	1009883a 	mov	r4,r2
81107bf4:	180b883a 	mov	r5,r3
81107bf8:	11106380 	call	81110638 <__adddf3>
81107bfc:	1021883a 	mov	r16,r2
81107c00:	d8800617 	ldw	r2,24(sp)
81107c04:	047f3034 	movhi	r17,64704
81107c08:	1c63883a 	add	r17,r3,r17
81107c0c:	10031826 	beq	r2,zero,81108870 <_dtoa_r+0x1120>
81107c10:	d8c00517 	ldw	r3,20(sp)
81107c14:	db000617 	ldw	r12,24(sp)
81107c18:	d8c01315 	stw	r3,76(sp)
81107c1c:	d9000b17 	ldw	r4,44(sp)
81107c20:	20038f26 	beq	r4,zero,81108a60 <_dtoa_r+0x1310>
81107c24:	60bfffc4 	addi	r2,r12,-1
81107c28:	100490fa 	slli	r2,r2,3
81107c2c:	00e044b4 	movhi	r3,33042
81107c30:	18e63504 	addi	r3,r3,-26412
81107c34:	1885883a 	add	r2,r3,r2
81107c38:	11800017 	ldw	r6,0(r2)
81107c3c:	11c00117 	ldw	r7,4(r2)
81107c40:	d8800717 	ldw	r2,28(sp)
81107c44:	0009883a 	mov	r4,zero
81107c48:	014ff834 	movhi	r5,16352
81107c4c:	db001615 	stw	r12,88(sp)
81107c50:	15c00044 	addi	r23,r2,1
81107c54:	1110ee40 	call	81110ee4 <__divdf3>
81107c58:	800d883a 	mov	r6,r16
81107c5c:	880f883a 	mov	r7,r17
81107c60:	1009883a 	mov	r4,r2
81107c64:	180b883a 	mov	r5,r3
81107c68:	111213c0 	call	8111213c <__subdf3>
81107c6c:	d9401017 	ldw	r5,64(sp)
81107c70:	d9000f17 	ldw	r4,60(sp)
81107c74:	102b883a 	mov	r21,r2
81107c78:	d8c01215 	stw	r3,72(sp)
81107c7c:	1112a380 	call	81112a38 <__fixdfsi>
81107c80:	1009883a 	mov	r4,r2
81107c84:	1029883a 	mov	r20,r2
81107c88:	1112ab80 	call	81112ab8 <__floatsidf>
81107c8c:	d9000f17 	ldw	r4,60(sp)
81107c90:	d9401017 	ldw	r5,64(sp)
81107c94:	100d883a 	mov	r6,r2
81107c98:	180f883a 	mov	r7,r3
81107c9c:	111213c0 	call	8111213c <__subdf3>
81107ca0:	1823883a 	mov	r17,r3
81107ca4:	d8c00717 	ldw	r3,28(sp)
81107ca8:	d9401217 	ldw	r5,72(sp)
81107cac:	a2000c04 	addi	r8,r20,48
81107cb0:	1021883a 	mov	r16,r2
81107cb4:	1a000005 	stb	r8,0(r3)
81107cb8:	800d883a 	mov	r6,r16
81107cbc:	880f883a 	mov	r7,r17
81107cc0:	a809883a 	mov	r4,r21
81107cc4:	4029883a 	mov	r20,r8
81107cc8:	11118540 	call	81111854 <__gedf2>
81107ccc:	00841d16 	blt	zero,r2,81108d44 <_dtoa_r+0x15f4>
81107cd0:	800d883a 	mov	r6,r16
81107cd4:	880f883a 	mov	r7,r17
81107cd8:	0009883a 	mov	r4,zero
81107cdc:	014ffc34 	movhi	r5,16368
81107ce0:	111213c0 	call	8111213c <__subdf3>
81107ce4:	d9401217 	ldw	r5,72(sp)
81107ce8:	100d883a 	mov	r6,r2
81107cec:	180f883a 	mov	r7,r3
81107cf0:	a809883a 	mov	r4,r21
81107cf4:	11118540 	call	81111854 <__gedf2>
81107cf8:	db001617 	ldw	r12,88(sp)
81107cfc:	00840e16 	blt	zero,r2,81108d38 <_dtoa_r+0x15e8>
81107d00:	00800044 	movi	r2,1
81107d04:	13006b0e 	bge	r2,r12,81107eb4 <_dtoa_r+0x764>
81107d08:	d9000717 	ldw	r4,28(sp)
81107d0c:	dd800f15 	stw	r22,60(sp)
81107d10:	dcc01015 	stw	r19,64(sp)
81107d14:	2319883a 	add	r12,r4,r12
81107d18:	dcc01217 	ldw	r19,72(sp)
81107d1c:	602d883a 	mov	r22,r12
81107d20:	dc801215 	stw	r18,72(sp)
81107d24:	b825883a 	mov	r18,r23
81107d28:	00000906 	br	81107d50 <_dtoa_r+0x600>
81107d2c:	111213c0 	call	8111213c <__subdf3>
81107d30:	a80d883a 	mov	r6,r21
81107d34:	980f883a 	mov	r7,r19
81107d38:	1009883a 	mov	r4,r2
81107d3c:	180b883a 	mov	r5,r3
81107d40:	11119300 	call	81111930 <__ledf2>
81107d44:	1003e816 	blt	r2,zero,81108ce8 <_dtoa_r+0x1598>
81107d48:	b825883a 	mov	r18,r23
81107d4c:	bd83e926 	beq	r23,r22,81108cf4 <_dtoa_r+0x15a4>
81107d50:	a809883a 	mov	r4,r21
81107d54:	980b883a 	mov	r5,r19
81107d58:	000d883a 	mov	r6,zero
81107d5c:	01d00934 	movhi	r7,16420
81107d60:	1111a240 	call	81111a24 <__muldf3>
81107d64:	000d883a 	mov	r6,zero
81107d68:	01d00934 	movhi	r7,16420
81107d6c:	8009883a 	mov	r4,r16
81107d70:	880b883a 	mov	r5,r17
81107d74:	102b883a 	mov	r21,r2
81107d78:	1827883a 	mov	r19,r3
81107d7c:	1111a240 	call	81111a24 <__muldf3>
81107d80:	180b883a 	mov	r5,r3
81107d84:	1009883a 	mov	r4,r2
81107d88:	1821883a 	mov	r16,r3
81107d8c:	1023883a 	mov	r17,r2
81107d90:	1112a380 	call	81112a38 <__fixdfsi>
81107d94:	1009883a 	mov	r4,r2
81107d98:	1029883a 	mov	r20,r2
81107d9c:	1112ab80 	call	81112ab8 <__floatsidf>
81107da0:	8809883a 	mov	r4,r17
81107da4:	800b883a 	mov	r5,r16
81107da8:	100d883a 	mov	r6,r2
81107dac:	180f883a 	mov	r7,r3
81107db0:	111213c0 	call	8111213c <__subdf3>
81107db4:	a5000c04 	addi	r20,r20,48
81107db8:	a80d883a 	mov	r6,r21
81107dbc:	980f883a 	mov	r7,r19
81107dc0:	1009883a 	mov	r4,r2
81107dc4:	180b883a 	mov	r5,r3
81107dc8:	95000005 	stb	r20,0(r18)
81107dcc:	1021883a 	mov	r16,r2
81107dd0:	1823883a 	mov	r17,r3
81107dd4:	11119300 	call	81111930 <__ledf2>
81107dd8:	bdc00044 	addi	r23,r23,1
81107ddc:	800d883a 	mov	r6,r16
81107de0:	880f883a 	mov	r7,r17
81107de4:	0009883a 	mov	r4,zero
81107de8:	014ffc34 	movhi	r5,16368
81107dec:	103fcf0e 	bge	r2,zero,81107d2c <__reset+0xfb0e7d2c>
81107df0:	d8c01317 	ldw	r3,76(sp)
81107df4:	d8c00515 	stw	r3,20(sp)
81107df8:	d9400917 	ldw	r5,36(sp)
81107dfc:	e009883a 	mov	r4,fp
81107e00:	110ad4c0 	call	8110ad4c <_Bfree>
81107e04:	d9000517 	ldw	r4,20(sp)
81107e08:	d9802317 	ldw	r6,140(sp)
81107e0c:	d9c02517 	ldw	r7,148(sp)
81107e10:	b8000005 	stb	zero,0(r23)
81107e14:	20800044 	addi	r2,r4,1
81107e18:	30800015 	stw	r2,0(r6)
81107e1c:	3802aa26 	beq	r7,zero,811088c8 <_dtoa_r+0x1178>
81107e20:	3dc00015 	stw	r23,0(r7)
81107e24:	d8800717 	ldw	r2,28(sp)
81107e28:	003e7906 	br	81107810 <__reset+0xfb0e7810>
81107e2c:	00800434 	movhi	r2,16
81107e30:	10bfffc4 	addi	r2,r2,-1
81107e34:	88a2703a 	and	r17,r17,r2
81107e38:	883e851e 	bne	r17,zero,81107850 <__reset+0xfb0e7850>
81107e3c:	00a044b4 	movhi	r2,33042
81107e40:	10a61604 	addi	r2,r2,-26536
81107e44:	003e8406 	br	81107858 <__reset+0xfb0e7858>
81107e48:	10c00204 	addi	r3,r2,8
81107e4c:	003e8706 	br	8110786c <__reset+0xfb0e786c>
81107e50:	01400434 	movhi	r5,16
81107e54:	297fffc4 	addi	r5,r5,-1
81107e58:	994a703a 	and	r5,r19,r5
81107e5c:	9009883a 	mov	r4,r18
81107e60:	843f0044 	addi	r16,r16,-1023
81107e64:	294ffc34 	orhi	r5,r5,16368
81107e68:	dd800217 	ldw	r22,8(sp)
81107e6c:	d8001115 	stw	zero,68(sp)
81107e70:	003ea506 	br	81107908 <__reset+0xfb0e7908>
81107e74:	00a044b4 	movhi	r2,33042
81107e78:	10a60504 	addi	r2,r2,-26604
81107e7c:	003e6406 	br	81107810 <__reset+0xfb0e7810>
81107e80:	e0001115 	stw	zero,68(fp)
81107e84:	000b883a 	mov	r5,zero
81107e88:	e009883a 	mov	r4,fp
81107e8c:	110aca40 	call	8110aca4 <_Balloc>
81107e90:	01bfffc4 	movi	r6,-1
81107e94:	01c00044 	movi	r7,1
81107e98:	d8800715 	stw	r2,28(sp)
81107e9c:	d9800c15 	stw	r6,48(sp)
81107ea0:	e0801015 	stw	r2,64(fp)
81107ea4:	d8000315 	stw	zero,12(sp)
81107ea8:	d9c00b15 	stw	r7,44(sp)
81107eac:	d9800615 	stw	r6,24(sp)
81107eb0:	d8002215 	stw	zero,136(sp)
81107eb4:	d8800117 	ldw	r2,4(sp)
81107eb8:	10008916 	blt	r2,zero,811080e0 <_dtoa_r+0x990>
81107ebc:	d9000517 	ldw	r4,20(sp)
81107ec0:	00c00384 	movi	r3,14
81107ec4:	19008616 	blt	r3,r4,811080e0 <_dtoa_r+0x990>
81107ec8:	200490fa 	slli	r2,r4,3
81107ecc:	00e044b4 	movhi	r3,33042
81107ed0:	d9802217 	ldw	r6,136(sp)
81107ed4:	18e63504 	addi	r3,r3,-26412
81107ed8:	1885883a 	add	r2,r3,r2
81107edc:	14000017 	ldw	r16,0(r2)
81107ee0:	14400117 	ldw	r17,4(r2)
81107ee4:	30016316 	blt	r6,zero,81108474 <_dtoa_r+0xd24>
81107ee8:	800d883a 	mov	r6,r16
81107eec:	880f883a 	mov	r7,r17
81107ef0:	9009883a 	mov	r4,r18
81107ef4:	980b883a 	mov	r5,r19
81107ef8:	1110ee40 	call	81110ee4 <__divdf3>
81107efc:	180b883a 	mov	r5,r3
81107f00:	1009883a 	mov	r4,r2
81107f04:	1112a380 	call	81112a38 <__fixdfsi>
81107f08:	1009883a 	mov	r4,r2
81107f0c:	102b883a 	mov	r21,r2
81107f10:	1112ab80 	call	81112ab8 <__floatsidf>
81107f14:	800d883a 	mov	r6,r16
81107f18:	880f883a 	mov	r7,r17
81107f1c:	1009883a 	mov	r4,r2
81107f20:	180b883a 	mov	r5,r3
81107f24:	1111a240 	call	81111a24 <__muldf3>
81107f28:	100d883a 	mov	r6,r2
81107f2c:	180f883a 	mov	r7,r3
81107f30:	9009883a 	mov	r4,r18
81107f34:	980b883a 	mov	r5,r19
81107f38:	111213c0 	call	8111213c <__subdf3>
81107f3c:	d9c00717 	ldw	r7,28(sp)
81107f40:	1009883a 	mov	r4,r2
81107f44:	a8800c04 	addi	r2,r21,48
81107f48:	38800005 	stb	r2,0(r7)
81107f4c:	3dc00044 	addi	r23,r7,1
81107f50:	d9c00617 	ldw	r7,24(sp)
81107f54:	01800044 	movi	r6,1
81107f58:	180b883a 	mov	r5,r3
81107f5c:	2005883a 	mov	r2,r4
81107f60:	39803826 	beq	r7,r6,81108044 <_dtoa_r+0x8f4>
81107f64:	000d883a 	mov	r6,zero
81107f68:	01d00934 	movhi	r7,16420
81107f6c:	1111a240 	call	81111a24 <__muldf3>
81107f70:	000d883a 	mov	r6,zero
81107f74:	000f883a 	mov	r7,zero
81107f78:	1009883a 	mov	r4,r2
81107f7c:	180b883a 	mov	r5,r3
81107f80:	1025883a 	mov	r18,r2
81107f84:	1827883a 	mov	r19,r3
81107f88:	11117cc0 	call	811117cc <__eqdf2>
81107f8c:	103f9a26 	beq	r2,zero,81107df8 <__reset+0xfb0e7df8>
81107f90:	d9c00617 	ldw	r7,24(sp)
81107f94:	d8c00717 	ldw	r3,28(sp)
81107f98:	b829883a 	mov	r20,r23
81107f9c:	38bfffc4 	addi	r2,r7,-1
81107fa0:	18ad883a 	add	r22,r3,r2
81107fa4:	00000a06 	br	81107fd0 <_dtoa_r+0x880>
81107fa8:	1111a240 	call	81111a24 <__muldf3>
81107fac:	000d883a 	mov	r6,zero
81107fb0:	000f883a 	mov	r7,zero
81107fb4:	1009883a 	mov	r4,r2
81107fb8:	180b883a 	mov	r5,r3
81107fbc:	1025883a 	mov	r18,r2
81107fc0:	1827883a 	mov	r19,r3
81107fc4:	b829883a 	mov	r20,r23
81107fc8:	11117cc0 	call	811117cc <__eqdf2>
81107fcc:	103f8a26 	beq	r2,zero,81107df8 <__reset+0xfb0e7df8>
81107fd0:	800d883a 	mov	r6,r16
81107fd4:	880f883a 	mov	r7,r17
81107fd8:	9009883a 	mov	r4,r18
81107fdc:	980b883a 	mov	r5,r19
81107fe0:	1110ee40 	call	81110ee4 <__divdf3>
81107fe4:	180b883a 	mov	r5,r3
81107fe8:	1009883a 	mov	r4,r2
81107fec:	1112a380 	call	81112a38 <__fixdfsi>
81107ff0:	1009883a 	mov	r4,r2
81107ff4:	102b883a 	mov	r21,r2
81107ff8:	1112ab80 	call	81112ab8 <__floatsidf>
81107ffc:	800d883a 	mov	r6,r16
81108000:	880f883a 	mov	r7,r17
81108004:	1009883a 	mov	r4,r2
81108008:	180b883a 	mov	r5,r3
8110800c:	1111a240 	call	81111a24 <__muldf3>
81108010:	100d883a 	mov	r6,r2
81108014:	180f883a 	mov	r7,r3
81108018:	9009883a 	mov	r4,r18
8110801c:	980b883a 	mov	r5,r19
81108020:	111213c0 	call	8111213c <__subdf3>
81108024:	aa000c04 	addi	r8,r21,48
81108028:	a2000005 	stb	r8,0(r20)
8110802c:	000d883a 	mov	r6,zero
81108030:	01d00934 	movhi	r7,16420
81108034:	1009883a 	mov	r4,r2
81108038:	180b883a 	mov	r5,r3
8110803c:	a5c00044 	addi	r23,r20,1
81108040:	b53fd91e 	bne	r22,r20,81107fa8 <__reset+0xfb0e7fa8>
81108044:	100d883a 	mov	r6,r2
81108048:	180f883a 	mov	r7,r3
8110804c:	1009883a 	mov	r4,r2
81108050:	180b883a 	mov	r5,r3
81108054:	11106380 	call	81110638 <__adddf3>
81108058:	100d883a 	mov	r6,r2
8110805c:	180f883a 	mov	r7,r3
81108060:	8009883a 	mov	r4,r16
81108064:	880b883a 	mov	r5,r17
81108068:	1027883a 	mov	r19,r2
8110806c:	1825883a 	mov	r18,r3
81108070:	11119300 	call	81111930 <__ledf2>
81108074:	10000816 	blt	r2,zero,81108098 <_dtoa_r+0x948>
81108078:	980d883a 	mov	r6,r19
8110807c:	900f883a 	mov	r7,r18
81108080:	8009883a 	mov	r4,r16
81108084:	880b883a 	mov	r5,r17
81108088:	11117cc0 	call	811117cc <__eqdf2>
8110808c:	103f5a1e 	bne	r2,zero,81107df8 <__reset+0xfb0e7df8>
81108090:	ad40004c 	andi	r21,r21,1
81108094:	a83f5826 	beq	r21,zero,81107df8 <__reset+0xfb0e7df8>
81108098:	bd3fffc3 	ldbu	r20,-1(r23)
8110809c:	b8bfffc4 	addi	r2,r23,-1
811080a0:	1007883a 	mov	r3,r2
811080a4:	01400e44 	movi	r5,57
811080a8:	d9800717 	ldw	r6,28(sp)
811080ac:	00000506 	br	811080c4 <_dtoa_r+0x974>
811080b0:	18ffffc4 	addi	r3,r3,-1
811080b4:	11824726 	beq	r2,r6,811089d4 <_dtoa_r+0x1284>
811080b8:	1d000003 	ldbu	r20,0(r3)
811080bc:	102f883a 	mov	r23,r2
811080c0:	10bfffc4 	addi	r2,r2,-1
811080c4:	a1003fcc 	andi	r4,r20,255
811080c8:	2100201c 	xori	r4,r4,128
811080cc:	213fe004 	addi	r4,r4,-128
811080d0:	217ff726 	beq	r4,r5,811080b0 <__reset+0xfb0e80b0>
811080d4:	a2000044 	addi	r8,r20,1
811080d8:	12000005 	stb	r8,0(r2)
811080dc:	003f4606 	br	81107df8 <__reset+0xfb0e7df8>
811080e0:	d9000b17 	ldw	r4,44(sp)
811080e4:	2000c826 	beq	r4,zero,81108408 <_dtoa_r+0xcb8>
811080e8:	d9800317 	ldw	r6,12(sp)
811080ec:	00c00044 	movi	r3,1
811080f0:	1980f90e 	bge	r3,r6,811084d8 <_dtoa_r+0xd88>
811080f4:	d8800617 	ldw	r2,24(sp)
811080f8:	d8c00a17 	ldw	r3,40(sp)
811080fc:	157fffc4 	addi	r21,r2,-1
81108100:	1d41f316 	blt	r3,r21,811088d0 <_dtoa_r+0x1180>
81108104:	1d6bc83a 	sub	r21,r3,r21
81108108:	d9c00617 	ldw	r7,24(sp)
8110810c:	3802aa16 	blt	r7,zero,81108bb8 <_dtoa_r+0x1468>
81108110:	dd000817 	ldw	r20,32(sp)
81108114:	d8800617 	ldw	r2,24(sp)
81108118:	d8c00817 	ldw	r3,32(sp)
8110811c:	01400044 	movi	r5,1
81108120:	e009883a 	mov	r4,fp
81108124:	1887883a 	add	r3,r3,r2
81108128:	d8c00815 	stw	r3,32(sp)
8110812c:	b0ad883a 	add	r22,r22,r2
81108130:	110b0b00 	call	8110b0b0 <__i2b>
81108134:	1023883a 	mov	r17,r2
81108138:	a0000826 	beq	r20,zero,8110815c <_dtoa_r+0xa0c>
8110813c:	0580070e 	bge	zero,r22,8110815c <_dtoa_r+0xa0c>
81108140:	a005883a 	mov	r2,r20
81108144:	b500b916 	blt	r22,r20,8110842c <_dtoa_r+0xcdc>
81108148:	d9000817 	ldw	r4,32(sp)
8110814c:	a0a9c83a 	sub	r20,r20,r2
81108150:	b0adc83a 	sub	r22,r22,r2
81108154:	2089c83a 	sub	r4,r4,r2
81108158:	d9000815 	stw	r4,32(sp)
8110815c:	d9800a17 	ldw	r6,40(sp)
81108160:	0181810e 	bge	zero,r6,81108768 <_dtoa_r+0x1018>
81108164:	d9c00b17 	ldw	r7,44(sp)
81108168:	3800b326 	beq	r7,zero,81108438 <_dtoa_r+0xce8>
8110816c:	a800b226 	beq	r21,zero,81108438 <_dtoa_r+0xce8>
81108170:	880b883a 	mov	r5,r17
81108174:	a80d883a 	mov	r6,r21
81108178:	e009883a 	mov	r4,fp
8110817c:	110b2e40 	call	8110b2e4 <__pow5mult>
81108180:	d9800917 	ldw	r6,36(sp)
81108184:	100b883a 	mov	r5,r2
81108188:	e009883a 	mov	r4,fp
8110818c:	1023883a 	mov	r17,r2
81108190:	110b0ec0 	call	8110b0ec <__multiply>
81108194:	1021883a 	mov	r16,r2
81108198:	d8800a17 	ldw	r2,40(sp)
8110819c:	d9400917 	ldw	r5,36(sp)
811081a0:	e009883a 	mov	r4,fp
811081a4:	1545c83a 	sub	r2,r2,r21
811081a8:	d8800a15 	stw	r2,40(sp)
811081ac:	110ad4c0 	call	8110ad4c <_Bfree>
811081b0:	d8c00a17 	ldw	r3,40(sp)
811081b4:	18009f1e 	bne	r3,zero,81108434 <_dtoa_r+0xce4>
811081b8:	05c00044 	movi	r23,1
811081bc:	e009883a 	mov	r4,fp
811081c0:	b80b883a 	mov	r5,r23
811081c4:	110b0b00 	call	8110b0b0 <__i2b>
811081c8:	d9000d17 	ldw	r4,52(sp)
811081cc:	102b883a 	mov	r21,r2
811081d0:	2000ce26 	beq	r4,zero,8110850c <_dtoa_r+0xdbc>
811081d4:	200d883a 	mov	r6,r4
811081d8:	100b883a 	mov	r5,r2
811081dc:	e009883a 	mov	r4,fp
811081e0:	110b2e40 	call	8110b2e4 <__pow5mult>
811081e4:	d9800317 	ldw	r6,12(sp)
811081e8:	102b883a 	mov	r21,r2
811081ec:	b981810e 	bge	r23,r6,811087f4 <_dtoa_r+0x10a4>
811081f0:	0027883a 	mov	r19,zero
811081f4:	a8800417 	ldw	r2,16(r21)
811081f8:	05c00804 	movi	r23,32
811081fc:	10800104 	addi	r2,r2,4
81108200:	1085883a 	add	r2,r2,r2
81108204:	1085883a 	add	r2,r2,r2
81108208:	a885883a 	add	r2,r21,r2
8110820c:	11000017 	ldw	r4,0(r2)
81108210:	110af980 	call	8110af98 <__hi0bits>
81108214:	b885c83a 	sub	r2,r23,r2
81108218:	1585883a 	add	r2,r2,r22
8110821c:	108007cc 	andi	r2,r2,31
81108220:	1000b326 	beq	r2,zero,811084f0 <_dtoa_r+0xda0>
81108224:	00c00804 	movi	r3,32
81108228:	1887c83a 	sub	r3,r3,r2
8110822c:	01000104 	movi	r4,4
81108230:	20c2cd0e 	bge	r4,r3,81108d68 <_dtoa_r+0x1618>
81108234:	00c00704 	movi	r3,28
81108238:	1885c83a 	sub	r2,r3,r2
8110823c:	d8c00817 	ldw	r3,32(sp)
81108240:	a0a9883a 	add	r20,r20,r2
81108244:	b0ad883a 	add	r22,r22,r2
81108248:	1887883a 	add	r3,r3,r2
8110824c:	d8c00815 	stw	r3,32(sp)
81108250:	d9800817 	ldw	r6,32(sp)
81108254:	0180040e 	bge	zero,r6,81108268 <_dtoa_r+0xb18>
81108258:	800b883a 	mov	r5,r16
8110825c:	e009883a 	mov	r4,fp
81108260:	110b4240 	call	8110b424 <__lshift>
81108264:	1021883a 	mov	r16,r2
81108268:	0580050e 	bge	zero,r22,81108280 <_dtoa_r+0xb30>
8110826c:	a80b883a 	mov	r5,r21
81108270:	b00d883a 	mov	r6,r22
81108274:	e009883a 	mov	r4,fp
81108278:	110b4240 	call	8110b424 <__lshift>
8110827c:	102b883a 	mov	r21,r2
81108280:	d9c00e17 	ldw	r7,56(sp)
81108284:	3801211e 	bne	r7,zero,8110870c <_dtoa_r+0xfbc>
81108288:	d9800617 	ldw	r6,24(sp)
8110828c:	0181380e 	bge	zero,r6,81108770 <_dtoa_r+0x1020>
81108290:	d8c00b17 	ldw	r3,44(sp)
81108294:	1800ab1e 	bne	r3,zero,81108544 <_dtoa_r+0xdf4>
81108298:	dc800717 	ldw	r18,28(sp)
8110829c:	dcc00617 	ldw	r19,24(sp)
811082a0:	9029883a 	mov	r20,r18
811082a4:	00000206 	br	811082b0 <_dtoa_r+0xb60>
811082a8:	110ad740 	call	8110ad74 <__multadd>
811082ac:	1021883a 	mov	r16,r2
811082b0:	a80b883a 	mov	r5,r21
811082b4:	8009883a 	mov	r4,r16
811082b8:	11075500 	call	81107550 <quorem>
811082bc:	10800c04 	addi	r2,r2,48
811082c0:	90800005 	stb	r2,0(r18)
811082c4:	94800044 	addi	r18,r18,1
811082c8:	9507c83a 	sub	r3,r18,r20
811082cc:	000f883a 	mov	r7,zero
811082d0:	01800284 	movi	r6,10
811082d4:	800b883a 	mov	r5,r16
811082d8:	e009883a 	mov	r4,fp
811082dc:	1cfff216 	blt	r3,r19,811082a8 <__reset+0xfb0e82a8>
811082e0:	1011883a 	mov	r8,r2
811082e4:	d8800617 	ldw	r2,24(sp)
811082e8:	0082370e 	bge	zero,r2,81108bc8 <_dtoa_r+0x1478>
811082ec:	d9000717 	ldw	r4,28(sp)
811082f0:	0025883a 	mov	r18,zero
811082f4:	20af883a 	add	r23,r4,r2
811082f8:	01800044 	movi	r6,1
811082fc:	800b883a 	mov	r5,r16
81108300:	e009883a 	mov	r4,fp
81108304:	da001715 	stw	r8,92(sp)
81108308:	110b4240 	call	8110b424 <__lshift>
8110830c:	a80b883a 	mov	r5,r21
81108310:	1009883a 	mov	r4,r2
81108314:	d8800915 	stw	r2,36(sp)
81108318:	110b56c0 	call	8110b56c <__mcmp>
8110831c:	da001717 	ldw	r8,92(sp)
81108320:	0081800e 	bge	zero,r2,81108924 <_dtoa_r+0x11d4>
81108324:	b93fffc3 	ldbu	r4,-1(r23)
81108328:	b8bfffc4 	addi	r2,r23,-1
8110832c:	1007883a 	mov	r3,r2
81108330:	01800e44 	movi	r6,57
81108334:	d9c00717 	ldw	r7,28(sp)
81108338:	00000506 	br	81108350 <_dtoa_r+0xc00>
8110833c:	18ffffc4 	addi	r3,r3,-1
81108340:	11c12326 	beq	r2,r7,811087d0 <_dtoa_r+0x1080>
81108344:	19000003 	ldbu	r4,0(r3)
81108348:	102f883a 	mov	r23,r2
8110834c:	10bfffc4 	addi	r2,r2,-1
81108350:	21403fcc 	andi	r5,r4,255
81108354:	2940201c 	xori	r5,r5,128
81108358:	297fe004 	addi	r5,r5,-128
8110835c:	29bff726 	beq	r5,r6,8110833c <__reset+0xfb0e833c>
81108360:	21000044 	addi	r4,r4,1
81108364:	11000005 	stb	r4,0(r2)
81108368:	a80b883a 	mov	r5,r21
8110836c:	e009883a 	mov	r4,fp
81108370:	110ad4c0 	call	8110ad4c <_Bfree>
81108374:	883ea026 	beq	r17,zero,81107df8 <__reset+0xfb0e7df8>
81108378:	90000426 	beq	r18,zero,8110838c <_dtoa_r+0xc3c>
8110837c:	94400326 	beq	r18,r17,8110838c <_dtoa_r+0xc3c>
81108380:	900b883a 	mov	r5,r18
81108384:	e009883a 	mov	r4,fp
81108388:	110ad4c0 	call	8110ad4c <_Bfree>
8110838c:	880b883a 	mov	r5,r17
81108390:	e009883a 	mov	r4,fp
81108394:	110ad4c0 	call	8110ad4c <_Bfree>
81108398:	003e9706 	br	81107df8 <__reset+0xfb0e7df8>
8110839c:	01800044 	movi	r6,1
811083a0:	d9800e15 	stw	r6,56(sp)
811083a4:	003d9606 	br	81107a00 <__reset+0xfb0e7a00>
811083a8:	d8800817 	ldw	r2,32(sp)
811083ac:	d8c00517 	ldw	r3,20(sp)
811083b0:	d8000d15 	stw	zero,52(sp)
811083b4:	10c5c83a 	sub	r2,r2,r3
811083b8:	00c9c83a 	sub	r4,zero,r3
811083bc:	d8800815 	stw	r2,32(sp)
811083c0:	d9000a15 	stw	r4,40(sp)
811083c4:	003d9706 	br	81107a24 <__reset+0xfb0e7a24>
811083c8:	05adc83a 	sub	r22,zero,r22
811083cc:	dd800815 	stw	r22,32(sp)
811083d0:	002d883a 	mov	r22,zero
811083d4:	003d8e06 	br	81107a10 <__reset+0xfb0e7a10>
811083d8:	d9000517 	ldw	r4,20(sp)
811083dc:	1112ab80 	call	81112ab8 <__floatsidf>
811083e0:	100d883a 	mov	r6,r2
811083e4:	180f883a 	mov	r7,r3
811083e8:	a009883a 	mov	r4,r20
811083ec:	880b883a 	mov	r5,r17
811083f0:	11117cc0 	call	811117cc <__eqdf2>
811083f4:	103d7126 	beq	r2,zero,811079bc <__reset+0xfb0e79bc>
811083f8:	d9c00517 	ldw	r7,20(sp)
811083fc:	39ffffc4 	addi	r7,r7,-1
81108400:	d9c00515 	stw	r7,20(sp)
81108404:	003d6d06 	br	811079bc <__reset+0xfb0e79bc>
81108408:	dd400a17 	ldw	r21,40(sp)
8110840c:	dd000817 	ldw	r20,32(sp)
81108410:	0023883a 	mov	r17,zero
81108414:	003f4806 	br	81108138 <__reset+0xfb0e8138>
81108418:	10e3c83a 	sub	r17,r2,r3
8110841c:	9448983a 	sll	r4,r18,r17
81108420:	003d3206 	br	811078ec <__reset+0xfb0e78ec>
81108424:	d8000e15 	stw	zero,56(sp)
81108428:	003d7506 	br	81107a00 <__reset+0xfb0e7a00>
8110842c:	b005883a 	mov	r2,r22
81108430:	003f4506 	br	81108148 <__reset+0xfb0e8148>
81108434:	dc000915 	stw	r16,36(sp)
81108438:	d9800a17 	ldw	r6,40(sp)
8110843c:	d9400917 	ldw	r5,36(sp)
81108440:	e009883a 	mov	r4,fp
81108444:	110b2e40 	call	8110b2e4 <__pow5mult>
81108448:	1021883a 	mov	r16,r2
8110844c:	003f5a06 	br	811081b8 <__reset+0xfb0e81b8>
81108450:	01c00044 	movi	r7,1
81108454:	d9c00b15 	stw	r7,44(sp)
81108458:	d8802217 	ldw	r2,136(sp)
8110845c:	0081280e 	bge	zero,r2,81108900 <_dtoa_r+0x11b0>
81108460:	100d883a 	mov	r6,r2
81108464:	1021883a 	mov	r16,r2
81108468:	d8800c15 	stw	r2,48(sp)
8110846c:	d8800615 	stw	r2,24(sp)
81108470:	003d8806 	br	81107a94 <__reset+0xfb0e7a94>
81108474:	d8800617 	ldw	r2,24(sp)
81108478:	00be9b16 	blt	zero,r2,81107ee8 <__reset+0xfb0e7ee8>
8110847c:	10010f1e 	bne	r2,zero,811088bc <_dtoa_r+0x116c>
81108480:	880b883a 	mov	r5,r17
81108484:	000d883a 	mov	r6,zero
81108488:	01d00534 	movhi	r7,16404
8110848c:	8009883a 	mov	r4,r16
81108490:	1111a240 	call	81111a24 <__muldf3>
81108494:	900d883a 	mov	r6,r18
81108498:	980f883a 	mov	r7,r19
8110849c:	1009883a 	mov	r4,r2
811084a0:	180b883a 	mov	r5,r3
811084a4:	11118540 	call	81111854 <__gedf2>
811084a8:	002b883a 	mov	r21,zero
811084ac:	0023883a 	mov	r17,zero
811084b0:	1000bf16 	blt	r2,zero,811087b0 <_dtoa_r+0x1060>
811084b4:	d9802217 	ldw	r6,136(sp)
811084b8:	ddc00717 	ldw	r23,28(sp)
811084bc:	018c303a 	nor	r6,zero,r6
811084c0:	d9800515 	stw	r6,20(sp)
811084c4:	a80b883a 	mov	r5,r21
811084c8:	e009883a 	mov	r4,fp
811084cc:	110ad4c0 	call	8110ad4c <_Bfree>
811084d0:	883e4926 	beq	r17,zero,81107df8 <__reset+0xfb0e7df8>
811084d4:	003fad06 	br	8110838c <__reset+0xfb0e838c>
811084d8:	d9c01117 	ldw	r7,68(sp)
811084dc:	3801bc26 	beq	r7,zero,81108bd0 <_dtoa_r+0x1480>
811084e0:	10810cc4 	addi	r2,r2,1075
811084e4:	dd400a17 	ldw	r21,40(sp)
811084e8:	dd000817 	ldw	r20,32(sp)
811084ec:	003f0a06 	br	81108118 <__reset+0xfb0e8118>
811084f0:	00800704 	movi	r2,28
811084f4:	d9000817 	ldw	r4,32(sp)
811084f8:	a0a9883a 	add	r20,r20,r2
811084fc:	b0ad883a 	add	r22,r22,r2
81108500:	2089883a 	add	r4,r4,r2
81108504:	d9000815 	stw	r4,32(sp)
81108508:	003f5106 	br	81108250 <__reset+0xfb0e8250>
8110850c:	d8c00317 	ldw	r3,12(sp)
81108510:	b8c1fc0e 	bge	r23,r3,81108d04 <_dtoa_r+0x15b4>
81108514:	0027883a 	mov	r19,zero
81108518:	b805883a 	mov	r2,r23
8110851c:	003f3e06 	br	81108218 <__reset+0xfb0e8218>
81108520:	880b883a 	mov	r5,r17
81108524:	e009883a 	mov	r4,fp
81108528:	000f883a 	mov	r7,zero
8110852c:	01800284 	movi	r6,10
81108530:	110ad740 	call	8110ad74 <__multadd>
81108534:	d9000c17 	ldw	r4,48(sp)
81108538:	1023883a 	mov	r17,r2
8110853c:	0102040e 	bge	zero,r4,81108d50 <_dtoa_r+0x1600>
81108540:	d9000615 	stw	r4,24(sp)
81108544:	0500050e 	bge	zero,r20,8110855c <_dtoa_r+0xe0c>
81108548:	880b883a 	mov	r5,r17
8110854c:	a00d883a 	mov	r6,r20
81108550:	e009883a 	mov	r4,fp
81108554:	110b4240 	call	8110b424 <__lshift>
81108558:	1023883a 	mov	r17,r2
8110855c:	9801241e 	bne	r19,zero,811089f0 <_dtoa_r+0x12a0>
81108560:	8829883a 	mov	r20,r17
81108564:	d9000617 	ldw	r4,24(sp)
81108568:	dcc00717 	ldw	r19,28(sp)
8110856c:	9480004c 	andi	r18,r18,1
81108570:	20bfffc4 	addi	r2,r4,-1
81108574:	9885883a 	add	r2,r19,r2
81108578:	d8800415 	stw	r2,16(sp)
8110857c:	dc800615 	stw	r18,24(sp)
81108580:	a80b883a 	mov	r5,r21
81108584:	8009883a 	mov	r4,r16
81108588:	11075500 	call	81107550 <quorem>
8110858c:	880b883a 	mov	r5,r17
81108590:	8009883a 	mov	r4,r16
81108594:	102f883a 	mov	r23,r2
81108598:	110b56c0 	call	8110b56c <__mcmp>
8110859c:	a80b883a 	mov	r5,r21
811085a0:	a00d883a 	mov	r6,r20
811085a4:	e009883a 	mov	r4,fp
811085a8:	102d883a 	mov	r22,r2
811085ac:	110b5cc0 	call	8110b5cc <__mdiff>
811085b0:	1007883a 	mov	r3,r2
811085b4:	10800317 	ldw	r2,12(r2)
811085b8:	bc800c04 	addi	r18,r23,48
811085bc:	180b883a 	mov	r5,r3
811085c0:	10004e1e 	bne	r2,zero,811086fc <_dtoa_r+0xfac>
811085c4:	8009883a 	mov	r4,r16
811085c8:	d8c01615 	stw	r3,88(sp)
811085cc:	110b56c0 	call	8110b56c <__mcmp>
811085d0:	d8c01617 	ldw	r3,88(sp)
811085d4:	e009883a 	mov	r4,fp
811085d8:	d8801615 	stw	r2,88(sp)
811085dc:	180b883a 	mov	r5,r3
811085e0:	110ad4c0 	call	8110ad4c <_Bfree>
811085e4:	d8801617 	ldw	r2,88(sp)
811085e8:	1000041e 	bne	r2,zero,811085fc <_dtoa_r+0xeac>
811085ec:	d9800317 	ldw	r6,12(sp)
811085f0:	3000021e 	bne	r6,zero,811085fc <_dtoa_r+0xeac>
811085f4:	d8c00617 	ldw	r3,24(sp)
811085f8:	18003726 	beq	r3,zero,811086d8 <_dtoa_r+0xf88>
811085fc:	b0002016 	blt	r22,zero,81108680 <_dtoa_r+0xf30>
81108600:	b000041e 	bne	r22,zero,81108614 <_dtoa_r+0xec4>
81108604:	d9000317 	ldw	r4,12(sp)
81108608:	2000021e 	bne	r4,zero,81108614 <_dtoa_r+0xec4>
8110860c:	d8c00617 	ldw	r3,24(sp)
81108610:	18001b26 	beq	r3,zero,81108680 <_dtoa_r+0xf30>
81108614:	00810716 	blt	zero,r2,81108a34 <_dtoa_r+0x12e4>
81108618:	d8c00417 	ldw	r3,16(sp)
8110861c:	9d800044 	addi	r22,r19,1
81108620:	9c800005 	stb	r18,0(r19)
81108624:	b02f883a 	mov	r23,r22
81108628:	98c10626 	beq	r19,r3,81108a44 <_dtoa_r+0x12f4>
8110862c:	800b883a 	mov	r5,r16
81108630:	000f883a 	mov	r7,zero
81108634:	01800284 	movi	r6,10
81108638:	e009883a 	mov	r4,fp
8110863c:	110ad740 	call	8110ad74 <__multadd>
81108640:	1021883a 	mov	r16,r2
81108644:	000f883a 	mov	r7,zero
81108648:	01800284 	movi	r6,10
8110864c:	880b883a 	mov	r5,r17
81108650:	e009883a 	mov	r4,fp
81108654:	8d002526 	beq	r17,r20,811086ec <_dtoa_r+0xf9c>
81108658:	110ad740 	call	8110ad74 <__multadd>
8110865c:	a00b883a 	mov	r5,r20
81108660:	000f883a 	mov	r7,zero
81108664:	01800284 	movi	r6,10
81108668:	e009883a 	mov	r4,fp
8110866c:	1023883a 	mov	r17,r2
81108670:	110ad740 	call	8110ad74 <__multadd>
81108674:	1029883a 	mov	r20,r2
81108678:	b027883a 	mov	r19,r22
8110867c:	003fc006 	br	81108580 <__reset+0xfb0e8580>
81108680:	9011883a 	mov	r8,r18
81108684:	00800e0e 	bge	zero,r2,811086c0 <_dtoa_r+0xf70>
81108688:	800b883a 	mov	r5,r16
8110868c:	01800044 	movi	r6,1
81108690:	e009883a 	mov	r4,fp
81108694:	da001715 	stw	r8,92(sp)
81108698:	110b4240 	call	8110b424 <__lshift>
8110869c:	a80b883a 	mov	r5,r21
811086a0:	1009883a 	mov	r4,r2
811086a4:	1021883a 	mov	r16,r2
811086a8:	110b56c0 	call	8110b56c <__mcmp>
811086ac:	da001717 	ldw	r8,92(sp)
811086b0:	0081960e 	bge	zero,r2,81108d0c <_dtoa_r+0x15bc>
811086b4:	00800e44 	movi	r2,57
811086b8:	40817026 	beq	r8,r2,81108c7c <_dtoa_r+0x152c>
811086bc:	ba000c44 	addi	r8,r23,49
811086c0:	8825883a 	mov	r18,r17
811086c4:	9dc00044 	addi	r23,r19,1
811086c8:	9a000005 	stb	r8,0(r19)
811086cc:	a023883a 	mov	r17,r20
811086d0:	dc000915 	stw	r16,36(sp)
811086d4:	003f2406 	br	81108368 <__reset+0xfb0e8368>
811086d8:	00800e44 	movi	r2,57
811086dc:	9011883a 	mov	r8,r18
811086e0:	90816626 	beq	r18,r2,81108c7c <_dtoa_r+0x152c>
811086e4:	05bff516 	blt	zero,r22,811086bc <__reset+0xfb0e86bc>
811086e8:	003ff506 	br	811086c0 <__reset+0xfb0e86c0>
811086ec:	110ad740 	call	8110ad74 <__multadd>
811086f0:	1023883a 	mov	r17,r2
811086f4:	1029883a 	mov	r20,r2
811086f8:	003fdf06 	br	81108678 <__reset+0xfb0e8678>
811086fc:	e009883a 	mov	r4,fp
81108700:	110ad4c0 	call	8110ad4c <_Bfree>
81108704:	00800044 	movi	r2,1
81108708:	003fbc06 	br	811085fc <__reset+0xfb0e85fc>
8110870c:	a80b883a 	mov	r5,r21
81108710:	8009883a 	mov	r4,r16
81108714:	110b56c0 	call	8110b56c <__mcmp>
81108718:	103edb0e 	bge	r2,zero,81108288 <__reset+0xfb0e8288>
8110871c:	800b883a 	mov	r5,r16
81108720:	000f883a 	mov	r7,zero
81108724:	01800284 	movi	r6,10
81108728:	e009883a 	mov	r4,fp
8110872c:	110ad740 	call	8110ad74 <__multadd>
81108730:	1021883a 	mov	r16,r2
81108734:	d8800517 	ldw	r2,20(sp)
81108738:	d8c00b17 	ldw	r3,44(sp)
8110873c:	10bfffc4 	addi	r2,r2,-1
81108740:	d8800515 	stw	r2,20(sp)
81108744:	183f761e 	bne	r3,zero,81108520 <__reset+0xfb0e8520>
81108748:	d9000c17 	ldw	r4,48(sp)
8110874c:	0101730e 	bge	zero,r4,81108d1c <_dtoa_r+0x15cc>
81108750:	d9000615 	stw	r4,24(sp)
81108754:	003ed006 	br	81108298 <__reset+0xfb0e8298>
81108758:	00800084 	movi	r2,2
8110875c:	3081861e 	bne	r6,r2,81108d78 <_dtoa_r+0x1628>
81108760:	d8000b15 	stw	zero,44(sp)
81108764:	003f3c06 	br	81108458 <__reset+0xfb0e8458>
81108768:	dc000917 	ldw	r16,36(sp)
8110876c:	003e9206 	br	811081b8 <__reset+0xfb0e81b8>
81108770:	d9c00317 	ldw	r7,12(sp)
81108774:	00800084 	movi	r2,2
81108778:	11fec50e 	bge	r2,r7,81108290 <__reset+0xfb0e8290>
8110877c:	d9000617 	ldw	r4,24(sp)
81108780:	20013c1e 	bne	r4,zero,81108c74 <_dtoa_r+0x1524>
81108784:	a80b883a 	mov	r5,r21
81108788:	000f883a 	mov	r7,zero
8110878c:	01800144 	movi	r6,5
81108790:	e009883a 	mov	r4,fp
81108794:	110ad740 	call	8110ad74 <__multadd>
81108798:	100b883a 	mov	r5,r2
8110879c:	8009883a 	mov	r4,r16
811087a0:	102b883a 	mov	r21,r2
811087a4:	110b56c0 	call	8110b56c <__mcmp>
811087a8:	dc000915 	stw	r16,36(sp)
811087ac:	00bf410e 	bge	zero,r2,811084b4 <__reset+0xfb0e84b4>
811087b0:	d9c00717 	ldw	r7,28(sp)
811087b4:	00800c44 	movi	r2,49
811087b8:	38800005 	stb	r2,0(r7)
811087bc:	d8800517 	ldw	r2,20(sp)
811087c0:	3dc00044 	addi	r23,r7,1
811087c4:	10800044 	addi	r2,r2,1
811087c8:	d8800515 	stw	r2,20(sp)
811087cc:	003f3d06 	br	811084c4 <__reset+0xfb0e84c4>
811087d0:	d9800517 	ldw	r6,20(sp)
811087d4:	d9c00717 	ldw	r7,28(sp)
811087d8:	00800c44 	movi	r2,49
811087dc:	31800044 	addi	r6,r6,1
811087e0:	d9800515 	stw	r6,20(sp)
811087e4:	38800005 	stb	r2,0(r7)
811087e8:	003edf06 	br	81108368 <__reset+0xfb0e8368>
811087ec:	d8000b15 	stw	zero,44(sp)
811087f0:	003c9f06 	br	81107a70 <__reset+0xfb0e7a70>
811087f4:	903e7e1e 	bne	r18,zero,811081f0 <__reset+0xfb0e81f0>
811087f8:	00800434 	movhi	r2,16
811087fc:	10bfffc4 	addi	r2,r2,-1
81108800:	9884703a 	and	r2,r19,r2
81108804:	1000ea1e 	bne	r2,zero,81108bb0 <_dtoa_r+0x1460>
81108808:	9cdffc2c 	andhi	r19,r19,32752
8110880c:	9800e826 	beq	r19,zero,81108bb0 <_dtoa_r+0x1460>
81108810:	d9c00817 	ldw	r7,32(sp)
81108814:	b5800044 	addi	r22,r22,1
81108818:	04c00044 	movi	r19,1
8110881c:	39c00044 	addi	r7,r7,1
81108820:	d9c00815 	stw	r7,32(sp)
81108824:	d8800d17 	ldw	r2,52(sp)
81108828:	103e721e 	bne	r2,zero,811081f4 <__reset+0xfb0e81f4>
8110882c:	00800044 	movi	r2,1
81108830:	003e7906 	br	81108218 <__reset+0xfb0e8218>
81108834:	8009883a 	mov	r4,r16
81108838:	1112ab80 	call	81112ab8 <__floatsidf>
8110883c:	d9800f17 	ldw	r6,60(sp)
81108840:	d9c01017 	ldw	r7,64(sp)
81108844:	1009883a 	mov	r4,r2
81108848:	180b883a 	mov	r5,r3
8110884c:	1111a240 	call	81111a24 <__muldf3>
81108850:	000d883a 	mov	r6,zero
81108854:	01d00734 	movhi	r7,16412
81108858:	1009883a 	mov	r4,r2
8110885c:	180b883a 	mov	r5,r3
81108860:	11106380 	call	81110638 <__adddf3>
81108864:	047f3034 	movhi	r17,64704
81108868:	1021883a 	mov	r16,r2
8110886c:	1c63883a 	add	r17,r3,r17
81108870:	d9000f17 	ldw	r4,60(sp)
81108874:	d9401017 	ldw	r5,64(sp)
81108878:	000d883a 	mov	r6,zero
8110887c:	01d00534 	movhi	r7,16404
81108880:	111213c0 	call	8111213c <__subdf3>
81108884:	800d883a 	mov	r6,r16
81108888:	880f883a 	mov	r7,r17
8110888c:	1009883a 	mov	r4,r2
81108890:	180b883a 	mov	r5,r3
81108894:	102b883a 	mov	r21,r2
81108898:	1829883a 	mov	r20,r3
8110889c:	11118540 	call	81111854 <__gedf2>
811088a0:	00806c16 	blt	zero,r2,81108a54 <_dtoa_r+0x1304>
811088a4:	89e0003c 	xorhi	r7,r17,32768
811088a8:	800d883a 	mov	r6,r16
811088ac:	a809883a 	mov	r4,r21
811088b0:	a00b883a 	mov	r5,r20
811088b4:	11119300 	call	81111930 <__ledf2>
811088b8:	103d7e0e 	bge	r2,zero,81107eb4 <__reset+0xfb0e7eb4>
811088bc:	002b883a 	mov	r21,zero
811088c0:	0023883a 	mov	r17,zero
811088c4:	003efb06 	br	811084b4 <__reset+0xfb0e84b4>
811088c8:	d8800717 	ldw	r2,28(sp)
811088cc:	003bd006 	br	81107810 <__reset+0xfb0e7810>
811088d0:	d9000a17 	ldw	r4,40(sp)
811088d4:	d9800d17 	ldw	r6,52(sp)
811088d8:	dd400a15 	stw	r21,40(sp)
811088dc:	a905c83a 	sub	r2,r21,r4
811088e0:	308d883a 	add	r6,r6,r2
811088e4:	d9800d15 	stw	r6,52(sp)
811088e8:	002b883a 	mov	r21,zero
811088ec:	003e0606 	br	81108108 <__reset+0xfb0e8108>
811088f0:	9023883a 	mov	r17,r18
811088f4:	9829883a 	mov	r20,r19
811088f8:	04000084 	movi	r16,2
811088fc:	003c9206 	br	81107b48 <__reset+0xfb0e7b48>
81108900:	04000044 	movi	r16,1
81108904:	dc000c15 	stw	r16,48(sp)
81108908:	dc000615 	stw	r16,24(sp)
8110890c:	dc002215 	stw	r16,136(sp)
81108910:	e0001115 	stw	zero,68(fp)
81108914:	000b883a 	mov	r5,zero
81108918:	003c6906 	br	81107ac0 <__reset+0xfb0e7ac0>
8110891c:	3021883a 	mov	r16,r6
81108920:	003ffb06 	br	81108910 <__reset+0xfb0e8910>
81108924:	1000021e 	bne	r2,zero,81108930 <_dtoa_r+0x11e0>
81108928:	4200004c 	andi	r8,r8,1
8110892c:	403e7d1e 	bne	r8,zero,81108324 <__reset+0xfb0e8324>
81108930:	01000c04 	movi	r4,48
81108934:	00000106 	br	8110893c <_dtoa_r+0x11ec>
81108938:	102f883a 	mov	r23,r2
8110893c:	b8bfffc4 	addi	r2,r23,-1
81108940:	10c00007 	ldb	r3,0(r2)
81108944:	193ffc26 	beq	r3,r4,81108938 <__reset+0xfb0e8938>
81108948:	003e8706 	br	81108368 <__reset+0xfb0e8368>
8110894c:	d8800517 	ldw	r2,20(sp)
81108950:	00a3c83a 	sub	r17,zero,r2
81108954:	8800a426 	beq	r17,zero,81108be8 <_dtoa_r+0x1498>
81108958:	888003cc 	andi	r2,r17,15
8110895c:	100490fa 	slli	r2,r2,3
81108960:	00e044b4 	movhi	r3,33042
81108964:	18e63504 	addi	r3,r3,-26412
81108968:	1885883a 	add	r2,r3,r2
8110896c:	11800017 	ldw	r6,0(r2)
81108970:	11c00117 	ldw	r7,4(r2)
81108974:	9009883a 	mov	r4,r18
81108978:	980b883a 	mov	r5,r19
8110897c:	8823d13a 	srai	r17,r17,4
81108980:	1111a240 	call	81111a24 <__muldf3>
81108984:	d8800f15 	stw	r2,60(sp)
81108988:	d8c01015 	stw	r3,64(sp)
8110898c:	8800e826 	beq	r17,zero,81108d30 <_dtoa_r+0x15e0>
81108990:	052044b4 	movhi	r20,33042
81108994:	a5262b04 	addi	r20,r20,-26452
81108998:	04000084 	movi	r16,2
8110899c:	8980004c 	andi	r6,r17,1
811089a0:	1009883a 	mov	r4,r2
811089a4:	8823d07a 	srai	r17,r17,1
811089a8:	180b883a 	mov	r5,r3
811089ac:	30000426 	beq	r6,zero,811089c0 <_dtoa_r+0x1270>
811089b0:	a1800017 	ldw	r6,0(r20)
811089b4:	a1c00117 	ldw	r7,4(r20)
811089b8:	84000044 	addi	r16,r16,1
811089bc:	1111a240 	call	81111a24 <__muldf3>
811089c0:	a5000204 	addi	r20,r20,8
811089c4:	883ff51e 	bne	r17,zero,8110899c <__reset+0xfb0e899c>
811089c8:	d8800f15 	stw	r2,60(sp)
811089cc:	d8c01015 	stw	r3,64(sp)
811089d0:	003c7606 	br	81107bac <__reset+0xfb0e7bac>
811089d4:	00c00c04 	movi	r3,48
811089d8:	10c00005 	stb	r3,0(r2)
811089dc:	d8c00517 	ldw	r3,20(sp)
811089e0:	bd3fffc3 	ldbu	r20,-1(r23)
811089e4:	18c00044 	addi	r3,r3,1
811089e8:	d8c00515 	stw	r3,20(sp)
811089ec:	003db906 	br	811080d4 <__reset+0xfb0e80d4>
811089f0:	89400117 	ldw	r5,4(r17)
811089f4:	e009883a 	mov	r4,fp
811089f8:	110aca40 	call	8110aca4 <_Balloc>
811089fc:	89800417 	ldw	r6,16(r17)
81108a00:	89400304 	addi	r5,r17,12
81108a04:	11000304 	addi	r4,r2,12
81108a08:	31800084 	addi	r6,r6,2
81108a0c:	318d883a 	add	r6,r6,r6
81108a10:	318d883a 	add	r6,r6,r6
81108a14:	1027883a 	mov	r19,r2
81108a18:	1102b500 	call	81102b50 <memcpy>
81108a1c:	01800044 	movi	r6,1
81108a20:	980b883a 	mov	r5,r19
81108a24:	e009883a 	mov	r4,fp
81108a28:	110b4240 	call	8110b424 <__lshift>
81108a2c:	1029883a 	mov	r20,r2
81108a30:	003ecc06 	br	81108564 <__reset+0xfb0e8564>
81108a34:	00800e44 	movi	r2,57
81108a38:	90809026 	beq	r18,r2,81108c7c <_dtoa_r+0x152c>
81108a3c:	92000044 	addi	r8,r18,1
81108a40:	003f1f06 	br	811086c0 <__reset+0xfb0e86c0>
81108a44:	9011883a 	mov	r8,r18
81108a48:	8825883a 	mov	r18,r17
81108a4c:	a023883a 	mov	r17,r20
81108a50:	003e2906 	br	811082f8 <__reset+0xfb0e82f8>
81108a54:	002b883a 	mov	r21,zero
81108a58:	0023883a 	mov	r17,zero
81108a5c:	003f5406 	br	811087b0 <__reset+0xfb0e87b0>
81108a60:	61bfffc4 	addi	r6,r12,-1
81108a64:	300490fa 	slli	r2,r6,3
81108a68:	00e044b4 	movhi	r3,33042
81108a6c:	18e63504 	addi	r3,r3,-26412
81108a70:	1885883a 	add	r2,r3,r2
81108a74:	11000017 	ldw	r4,0(r2)
81108a78:	11400117 	ldw	r5,4(r2)
81108a7c:	d8800717 	ldw	r2,28(sp)
81108a80:	880f883a 	mov	r7,r17
81108a84:	d9801215 	stw	r6,72(sp)
81108a88:	800d883a 	mov	r6,r16
81108a8c:	db001615 	stw	r12,88(sp)
81108a90:	15c00044 	addi	r23,r2,1
81108a94:	1111a240 	call	81111a24 <__muldf3>
81108a98:	d9401017 	ldw	r5,64(sp)
81108a9c:	d9000f17 	ldw	r4,60(sp)
81108aa0:	d8c01515 	stw	r3,84(sp)
81108aa4:	d8801415 	stw	r2,80(sp)
81108aa8:	1112a380 	call	81112a38 <__fixdfsi>
81108aac:	1009883a 	mov	r4,r2
81108ab0:	1021883a 	mov	r16,r2
81108ab4:	1112ab80 	call	81112ab8 <__floatsidf>
81108ab8:	d9000f17 	ldw	r4,60(sp)
81108abc:	d9401017 	ldw	r5,64(sp)
81108ac0:	100d883a 	mov	r6,r2
81108ac4:	180f883a 	mov	r7,r3
81108ac8:	111213c0 	call	8111213c <__subdf3>
81108acc:	1829883a 	mov	r20,r3
81108ad0:	d8c00717 	ldw	r3,28(sp)
81108ad4:	84000c04 	addi	r16,r16,48
81108ad8:	1023883a 	mov	r17,r2
81108adc:	1c000005 	stb	r16,0(r3)
81108ae0:	db001617 	ldw	r12,88(sp)
81108ae4:	00800044 	movi	r2,1
81108ae8:	60802226 	beq	r12,r2,81108b74 <_dtoa_r+0x1424>
81108aec:	d9c00717 	ldw	r7,28(sp)
81108af0:	8805883a 	mov	r2,r17
81108af4:	b82b883a 	mov	r21,r23
81108af8:	3b19883a 	add	r12,r7,r12
81108afc:	6023883a 	mov	r17,r12
81108b00:	a007883a 	mov	r3,r20
81108b04:	dc800f15 	stw	r18,60(sp)
81108b08:	000d883a 	mov	r6,zero
81108b0c:	01d00934 	movhi	r7,16420
81108b10:	1009883a 	mov	r4,r2
81108b14:	180b883a 	mov	r5,r3
81108b18:	1111a240 	call	81111a24 <__muldf3>
81108b1c:	180b883a 	mov	r5,r3
81108b20:	1009883a 	mov	r4,r2
81108b24:	1829883a 	mov	r20,r3
81108b28:	1025883a 	mov	r18,r2
81108b2c:	1112a380 	call	81112a38 <__fixdfsi>
81108b30:	1009883a 	mov	r4,r2
81108b34:	1021883a 	mov	r16,r2
81108b38:	1112ab80 	call	81112ab8 <__floatsidf>
81108b3c:	100d883a 	mov	r6,r2
81108b40:	180f883a 	mov	r7,r3
81108b44:	9009883a 	mov	r4,r18
81108b48:	a00b883a 	mov	r5,r20
81108b4c:	84000c04 	addi	r16,r16,48
81108b50:	111213c0 	call	8111213c <__subdf3>
81108b54:	ad400044 	addi	r21,r21,1
81108b58:	ac3fffc5 	stb	r16,-1(r21)
81108b5c:	ac7fea1e 	bne	r21,r17,81108b08 <__reset+0xfb0e8b08>
81108b60:	1023883a 	mov	r17,r2
81108b64:	d8801217 	ldw	r2,72(sp)
81108b68:	dc800f17 	ldw	r18,60(sp)
81108b6c:	1829883a 	mov	r20,r3
81108b70:	b8af883a 	add	r23,r23,r2
81108b74:	d9001417 	ldw	r4,80(sp)
81108b78:	d9401517 	ldw	r5,84(sp)
81108b7c:	000d883a 	mov	r6,zero
81108b80:	01cff834 	movhi	r7,16352
81108b84:	11106380 	call	81110638 <__adddf3>
81108b88:	880d883a 	mov	r6,r17
81108b8c:	a00f883a 	mov	r7,r20
81108b90:	1009883a 	mov	r4,r2
81108b94:	180b883a 	mov	r5,r3
81108b98:	11119300 	call	81111930 <__ledf2>
81108b9c:	10003e0e 	bge	r2,zero,81108c98 <_dtoa_r+0x1548>
81108ba0:	d9001317 	ldw	r4,76(sp)
81108ba4:	bd3fffc3 	ldbu	r20,-1(r23)
81108ba8:	d9000515 	stw	r4,20(sp)
81108bac:	003d3b06 	br	8110809c <__reset+0xfb0e809c>
81108bb0:	0027883a 	mov	r19,zero
81108bb4:	003f1b06 	br	81108824 <__reset+0xfb0e8824>
81108bb8:	d8800817 	ldw	r2,32(sp)
81108bbc:	11e9c83a 	sub	r20,r2,r7
81108bc0:	0005883a 	mov	r2,zero
81108bc4:	003d5406 	br	81108118 <__reset+0xfb0e8118>
81108bc8:	00800044 	movi	r2,1
81108bcc:	003dc706 	br	811082ec <__reset+0xfb0e82ec>
81108bd0:	d8c00217 	ldw	r3,8(sp)
81108bd4:	00800d84 	movi	r2,54
81108bd8:	dd400a17 	ldw	r21,40(sp)
81108bdc:	10c5c83a 	sub	r2,r2,r3
81108be0:	dd000817 	ldw	r20,32(sp)
81108be4:	003d4c06 	br	81108118 <__reset+0xfb0e8118>
81108be8:	dc800f15 	stw	r18,60(sp)
81108bec:	dcc01015 	stw	r19,64(sp)
81108bf0:	04000084 	movi	r16,2
81108bf4:	003bed06 	br	81107bac <__reset+0xfb0e7bac>
81108bf8:	d9000617 	ldw	r4,24(sp)
81108bfc:	203f0d26 	beq	r4,zero,81108834 <__reset+0xfb0e8834>
81108c00:	d9800c17 	ldw	r6,48(sp)
81108c04:	01bcab0e 	bge	zero,r6,81107eb4 <__reset+0xfb0e7eb4>
81108c08:	d9401017 	ldw	r5,64(sp)
81108c0c:	d9000f17 	ldw	r4,60(sp)
81108c10:	000d883a 	mov	r6,zero
81108c14:	01d00934 	movhi	r7,16420
81108c18:	1111a240 	call	81111a24 <__muldf3>
81108c1c:	81000044 	addi	r4,r16,1
81108c20:	d8800f15 	stw	r2,60(sp)
81108c24:	d8c01015 	stw	r3,64(sp)
81108c28:	1112ab80 	call	81112ab8 <__floatsidf>
81108c2c:	d9800f17 	ldw	r6,60(sp)
81108c30:	d9c01017 	ldw	r7,64(sp)
81108c34:	1009883a 	mov	r4,r2
81108c38:	180b883a 	mov	r5,r3
81108c3c:	1111a240 	call	81111a24 <__muldf3>
81108c40:	01d00734 	movhi	r7,16412
81108c44:	000d883a 	mov	r6,zero
81108c48:	1009883a 	mov	r4,r2
81108c4c:	180b883a 	mov	r5,r3
81108c50:	11106380 	call	81110638 <__adddf3>
81108c54:	d9c00517 	ldw	r7,20(sp)
81108c58:	047f3034 	movhi	r17,64704
81108c5c:	1021883a 	mov	r16,r2
81108c60:	39ffffc4 	addi	r7,r7,-1
81108c64:	d9c01315 	stw	r7,76(sp)
81108c68:	1c63883a 	add	r17,r3,r17
81108c6c:	db000c17 	ldw	r12,48(sp)
81108c70:	003bea06 	br	81107c1c <__reset+0xfb0e7c1c>
81108c74:	dc000915 	stw	r16,36(sp)
81108c78:	003e0e06 	br	811084b4 <__reset+0xfb0e84b4>
81108c7c:	01000e44 	movi	r4,57
81108c80:	8825883a 	mov	r18,r17
81108c84:	9dc00044 	addi	r23,r19,1
81108c88:	99000005 	stb	r4,0(r19)
81108c8c:	a023883a 	mov	r17,r20
81108c90:	dc000915 	stw	r16,36(sp)
81108c94:	003da406 	br	81108328 <__reset+0xfb0e8328>
81108c98:	d9801417 	ldw	r6,80(sp)
81108c9c:	d9c01517 	ldw	r7,84(sp)
81108ca0:	0009883a 	mov	r4,zero
81108ca4:	014ff834 	movhi	r5,16352
81108ca8:	111213c0 	call	8111213c <__subdf3>
81108cac:	880d883a 	mov	r6,r17
81108cb0:	a00f883a 	mov	r7,r20
81108cb4:	1009883a 	mov	r4,r2
81108cb8:	180b883a 	mov	r5,r3
81108cbc:	11118540 	call	81111854 <__gedf2>
81108cc0:	00bc7c0e 	bge	zero,r2,81107eb4 <__reset+0xfb0e7eb4>
81108cc4:	01000c04 	movi	r4,48
81108cc8:	00000106 	br	81108cd0 <_dtoa_r+0x1580>
81108ccc:	102f883a 	mov	r23,r2
81108cd0:	b8bfffc4 	addi	r2,r23,-1
81108cd4:	10c00007 	ldb	r3,0(r2)
81108cd8:	193ffc26 	beq	r3,r4,81108ccc <__reset+0xfb0e8ccc>
81108cdc:	d9801317 	ldw	r6,76(sp)
81108ce0:	d9800515 	stw	r6,20(sp)
81108ce4:	003c4406 	br	81107df8 <__reset+0xfb0e7df8>
81108ce8:	d9801317 	ldw	r6,76(sp)
81108cec:	d9800515 	stw	r6,20(sp)
81108cf0:	003cea06 	br	8110809c <__reset+0xfb0e809c>
81108cf4:	dd800f17 	ldw	r22,60(sp)
81108cf8:	dcc01017 	ldw	r19,64(sp)
81108cfc:	dc801217 	ldw	r18,72(sp)
81108d00:	003c6c06 	br	81107eb4 <__reset+0xfb0e7eb4>
81108d04:	903e031e 	bne	r18,zero,81108514 <__reset+0xfb0e8514>
81108d08:	003ebb06 	br	811087f8 <__reset+0xfb0e87f8>
81108d0c:	103e6c1e 	bne	r2,zero,811086c0 <__reset+0xfb0e86c0>
81108d10:	4080004c 	andi	r2,r8,1
81108d14:	103e6a26 	beq	r2,zero,811086c0 <__reset+0xfb0e86c0>
81108d18:	003e6606 	br	811086b4 <__reset+0xfb0e86b4>
81108d1c:	d8c00317 	ldw	r3,12(sp)
81108d20:	00800084 	movi	r2,2
81108d24:	10c02916 	blt	r2,r3,81108dcc <_dtoa_r+0x167c>
81108d28:	d9000c17 	ldw	r4,48(sp)
81108d2c:	003e8806 	br	81108750 <__reset+0xfb0e8750>
81108d30:	04000084 	movi	r16,2
81108d34:	003b9d06 	br	81107bac <__reset+0xfb0e7bac>
81108d38:	d9001317 	ldw	r4,76(sp)
81108d3c:	d9000515 	stw	r4,20(sp)
81108d40:	003cd606 	br	8110809c <__reset+0xfb0e809c>
81108d44:	d8801317 	ldw	r2,76(sp)
81108d48:	d8800515 	stw	r2,20(sp)
81108d4c:	003c2a06 	br	81107df8 <__reset+0xfb0e7df8>
81108d50:	d9800317 	ldw	r6,12(sp)
81108d54:	00800084 	movi	r2,2
81108d58:	11801516 	blt	r2,r6,81108db0 <_dtoa_r+0x1660>
81108d5c:	d9c00c17 	ldw	r7,48(sp)
81108d60:	d9c00615 	stw	r7,24(sp)
81108d64:	003df706 	br	81108544 <__reset+0xfb0e8544>
81108d68:	193d3926 	beq	r3,r4,81108250 <__reset+0xfb0e8250>
81108d6c:	00c00f04 	movi	r3,60
81108d70:	1885c83a 	sub	r2,r3,r2
81108d74:	003ddf06 	br	811084f4 <__reset+0xfb0e84f4>
81108d78:	e009883a 	mov	r4,fp
81108d7c:	e0001115 	stw	zero,68(fp)
81108d80:	000b883a 	mov	r5,zero
81108d84:	110aca40 	call	8110aca4 <_Balloc>
81108d88:	d8800715 	stw	r2,28(sp)
81108d8c:	d8c00717 	ldw	r3,28(sp)
81108d90:	00bfffc4 	movi	r2,-1
81108d94:	01000044 	movi	r4,1
81108d98:	d8800c15 	stw	r2,48(sp)
81108d9c:	e0c01015 	stw	r3,64(fp)
81108da0:	d9000b15 	stw	r4,44(sp)
81108da4:	d8800615 	stw	r2,24(sp)
81108da8:	d8002215 	stw	zero,136(sp)
81108dac:	003c4106 	br	81107eb4 <__reset+0xfb0e7eb4>
81108db0:	d8c00c17 	ldw	r3,48(sp)
81108db4:	d8c00615 	stw	r3,24(sp)
81108db8:	003e7006 	br	8110877c <__reset+0xfb0e877c>
81108dbc:	04400044 	movi	r17,1
81108dc0:	003b2006 	br	81107a44 <__reset+0xfb0e7a44>
81108dc4:	000b883a 	mov	r5,zero
81108dc8:	003b3d06 	br	81107ac0 <__reset+0xfb0e7ac0>
81108dcc:	d8800c17 	ldw	r2,48(sp)
81108dd0:	d8800615 	stw	r2,24(sp)
81108dd4:	003e6906 	br	8110877c <__reset+0xfb0e877c>

81108dd8 <__sflush_r>:
81108dd8:	2880030b 	ldhu	r2,12(r5)
81108ddc:	defffb04 	addi	sp,sp,-20
81108de0:	dcc00315 	stw	r19,12(sp)
81108de4:	dc400115 	stw	r17,4(sp)
81108de8:	dfc00415 	stw	ra,16(sp)
81108dec:	dc800215 	stw	r18,8(sp)
81108df0:	dc000015 	stw	r16,0(sp)
81108df4:	10c0020c 	andi	r3,r2,8
81108df8:	2823883a 	mov	r17,r5
81108dfc:	2027883a 	mov	r19,r4
81108e00:	1800311e 	bne	r3,zero,81108ec8 <__sflush_r+0xf0>
81108e04:	28c00117 	ldw	r3,4(r5)
81108e08:	10820014 	ori	r2,r2,2048
81108e0c:	2880030d 	sth	r2,12(r5)
81108e10:	00c04b0e 	bge	zero,r3,81108f40 <__sflush_r+0x168>
81108e14:	8a000a17 	ldw	r8,40(r17)
81108e18:	40002326 	beq	r8,zero,81108ea8 <__sflush_r+0xd0>
81108e1c:	9c000017 	ldw	r16,0(r19)
81108e20:	10c4000c 	andi	r3,r2,4096
81108e24:	98000015 	stw	zero,0(r19)
81108e28:	18004826 	beq	r3,zero,81108f4c <__sflush_r+0x174>
81108e2c:	89801417 	ldw	r6,80(r17)
81108e30:	10c0010c 	andi	r3,r2,4
81108e34:	18000626 	beq	r3,zero,81108e50 <__sflush_r+0x78>
81108e38:	88c00117 	ldw	r3,4(r17)
81108e3c:	88800c17 	ldw	r2,48(r17)
81108e40:	30cdc83a 	sub	r6,r6,r3
81108e44:	10000226 	beq	r2,zero,81108e50 <__sflush_r+0x78>
81108e48:	88800f17 	ldw	r2,60(r17)
81108e4c:	308dc83a 	sub	r6,r6,r2
81108e50:	89400717 	ldw	r5,28(r17)
81108e54:	000f883a 	mov	r7,zero
81108e58:	9809883a 	mov	r4,r19
81108e5c:	403ee83a 	callr	r8
81108e60:	00ffffc4 	movi	r3,-1
81108e64:	10c04426 	beq	r2,r3,81108f78 <__sflush_r+0x1a0>
81108e68:	88c0030b 	ldhu	r3,12(r17)
81108e6c:	89000417 	ldw	r4,16(r17)
81108e70:	88000115 	stw	zero,4(r17)
81108e74:	197dffcc 	andi	r5,r3,63487
81108e78:	8940030d 	sth	r5,12(r17)
81108e7c:	89000015 	stw	r4,0(r17)
81108e80:	18c4000c 	andi	r3,r3,4096
81108e84:	18002c1e 	bne	r3,zero,81108f38 <__sflush_r+0x160>
81108e88:	89400c17 	ldw	r5,48(r17)
81108e8c:	9c000015 	stw	r16,0(r19)
81108e90:	28000526 	beq	r5,zero,81108ea8 <__sflush_r+0xd0>
81108e94:	88801004 	addi	r2,r17,64
81108e98:	28800226 	beq	r5,r2,81108ea4 <__sflush_r+0xcc>
81108e9c:	9809883a 	mov	r4,r19
81108ea0:	11095440 	call	81109544 <_free_r>
81108ea4:	88000c15 	stw	zero,48(r17)
81108ea8:	0005883a 	mov	r2,zero
81108eac:	dfc00417 	ldw	ra,16(sp)
81108eb0:	dcc00317 	ldw	r19,12(sp)
81108eb4:	dc800217 	ldw	r18,8(sp)
81108eb8:	dc400117 	ldw	r17,4(sp)
81108ebc:	dc000017 	ldw	r16,0(sp)
81108ec0:	dec00504 	addi	sp,sp,20
81108ec4:	f800283a 	ret
81108ec8:	2c800417 	ldw	r18,16(r5)
81108ecc:	903ff626 	beq	r18,zero,81108ea8 <__reset+0xfb0e8ea8>
81108ed0:	2c000017 	ldw	r16,0(r5)
81108ed4:	108000cc 	andi	r2,r2,3
81108ed8:	2c800015 	stw	r18,0(r5)
81108edc:	84a1c83a 	sub	r16,r16,r18
81108ee0:	1000131e 	bne	r2,zero,81108f30 <__sflush_r+0x158>
81108ee4:	28800517 	ldw	r2,20(r5)
81108ee8:	88800215 	stw	r2,8(r17)
81108eec:	04000316 	blt	zero,r16,81108efc <__sflush_r+0x124>
81108ef0:	003fed06 	br	81108ea8 <__reset+0xfb0e8ea8>
81108ef4:	90a5883a 	add	r18,r18,r2
81108ef8:	043feb0e 	bge	zero,r16,81108ea8 <__reset+0xfb0e8ea8>
81108efc:	88800917 	ldw	r2,36(r17)
81108f00:	89400717 	ldw	r5,28(r17)
81108f04:	800f883a 	mov	r7,r16
81108f08:	900d883a 	mov	r6,r18
81108f0c:	9809883a 	mov	r4,r19
81108f10:	103ee83a 	callr	r2
81108f14:	80a1c83a 	sub	r16,r16,r2
81108f18:	00bff616 	blt	zero,r2,81108ef4 <__reset+0xfb0e8ef4>
81108f1c:	88c0030b 	ldhu	r3,12(r17)
81108f20:	00bfffc4 	movi	r2,-1
81108f24:	18c01014 	ori	r3,r3,64
81108f28:	88c0030d 	sth	r3,12(r17)
81108f2c:	003fdf06 	br	81108eac <__reset+0xfb0e8eac>
81108f30:	0005883a 	mov	r2,zero
81108f34:	003fec06 	br	81108ee8 <__reset+0xfb0e8ee8>
81108f38:	88801415 	stw	r2,80(r17)
81108f3c:	003fd206 	br	81108e88 <__reset+0xfb0e8e88>
81108f40:	28c00f17 	ldw	r3,60(r5)
81108f44:	00ffb316 	blt	zero,r3,81108e14 <__reset+0xfb0e8e14>
81108f48:	003fd706 	br	81108ea8 <__reset+0xfb0e8ea8>
81108f4c:	89400717 	ldw	r5,28(r17)
81108f50:	000d883a 	mov	r6,zero
81108f54:	01c00044 	movi	r7,1
81108f58:	9809883a 	mov	r4,r19
81108f5c:	403ee83a 	callr	r8
81108f60:	100d883a 	mov	r6,r2
81108f64:	00bfffc4 	movi	r2,-1
81108f68:	30801426 	beq	r6,r2,81108fbc <__sflush_r+0x1e4>
81108f6c:	8880030b 	ldhu	r2,12(r17)
81108f70:	8a000a17 	ldw	r8,40(r17)
81108f74:	003fae06 	br	81108e30 <__reset+0xfb0e8e30>
81108f78:	98c00017 	ldw	r3,0(r19)
81108f7c:	183fba26 	beq	r3,zero,81108e68 <__reset+0xfb0e8e68>
81108f80:	01000744 	movi	r4,29
81108f84:	19000626 	beq	r3,r4,81108fa0 <__sflush_r+0x1c8>
81108f88:	01000584 	movi	r4,22
81108f8c:	19000426 	beq	r3,r4,81108fa0 <__sflush_r+0x1c8>
81108f90:	88c0030b 	ldhu	r3,12(r17)
81108f94:	18c01014 	ori	r3,r3,64
81108f98:	88c0030d 	sth	r3,12(r17)
81108f9c:	003fc306 	br	81108eac <__reset+0xfb0e8eac>
81108fa0:	8880030b 	ldhu	r2,12(r17)
81108fa4:	88c00417 	ldw	r3,16(r17)
81108fa8:	88000115 	stw	zero,4(r17)
81108fac:	10bdffcc 	andi	r2,r2,63487
81108fb0:	8880030d 	sth	r2,12(r17)
81108fb4:	88c00015 	stw	r3,0(r17)
81108fb8:	003fb306 	br	81108e88 <__reset+0xfb0e8e88>
81108fbc:	98800017 	ldw	r2,0(r19)
81108fc0:	103fea26 	beq	r2,zero,81108f6c <__reset+0xfb0e8f6c>
81108fc4:	00c00744 	movi	r3,29
81108fc8:	10c00226 	beq	r2,r3,81108fd4 <__sflush_r+0x1fc>
81108fcc:	00c00584 	movi	r3,22
81108fd0:	10c0031e 	bne	r2,r3,81108fe0 <__sflush_r+0x208>
81108fd4:	9c000015 	stw	r16,0(r19)
81108fd8:	0005883a 	mov	r2,zero
81108fdc:	003fb306 	br	81108eac <__reset+0xfb0e8eac>
81108fe0:	88c0030b 	ldhu	r3,12(r17)
81108fe4:	3005883a 	mov	r2,r6
81108fe8:	18c01014 	ori	r3,r3,64
81108fec:	88c0030d 	sth	r3,12(r17)
81108ff0:	003fae06 	br	81108eac <__reset+0xfb0e8eac>

81108ff4 <_fflush_r>:
81108ff4:	defffd04 	addi	sp,sp,-12
81108ff8:	dc000115 	stw	r16,4(sp)
81108ffc:	dfc00215 	stw	ra,8(sp)
81109000:	2021883a 	mov	r16,r4
81109004:	20000226 	beq	r4,zero,81109010 <_fflush_r+0x1c>
81109008:	20800e17 	ldw	r2,56(r4)
8110900c:	10000c26 	beq	r2,zero,81109040 <_fflush_r+0x4c>
81109010:	2880030f 	ldh	r2,12(r5)
81109014:	1000051e 	bne	r2,zero,8110902c <_fflush_r+0x38>
81109018:	0005883a 	mov	r2,zero
8110901c:	dfc00217 	ldw	ra,8(sp)
81109020:	dc000117 	ldw	r16,4(sp)
81109024:	dec00304 	addi	sp,sp,12
81109028:	f800283a 	ret
8110902c:	8009883a 	mov	r4,r16
81109030:	dfc00217 	ldw	ra,8(sp)
81109034:	dc000117 	ldw	r16,4(sp)
81109038:	dec00304 	addi	sp,sp,12
8110903c:	1108dd81 	jmpi	81108dd8 <__sflush_r>
81109040:	d9400015 	stw	r5,0(sp)
81109044:	11093d00 	call	811093d0 <__sinit>
81109048:	d9400017 	ldw	r5,0(sp)
8110904c:	003ff006 	br	81109010 <__reset+0xfb0e9010>

81109050 <fflush>:
81109050:	20000526 	beq	r4,zero,81109068 <fflush+0x18>
81109054:	00a044b4 	movhi	r2,33042
81109058:	10af1804 	addi	r2,r2,-17312
8110905c:	200b883a 	mov	r5,r4
81109060:	11000017 	ldw	r4,0(r2)
81109064:	1108ff41 	jmpi	81108ff4 <_fflush_r>
81109068:	00a044b4 	movhi	r2,33042
8110906c:	10af1704 	addi	r2,r2,-17316
81109070:	11000017 	ldw	r4,0(r2)
81109074:	01604474 	movhi	r5,33041
81109078:	2963fd04 	addi	r5,r5,-28684
8110907c:	1109dd41 	jmpi	81109dd4 <_fwalk_reent>

81109080 <__fp_unlock>:
81109080:	0005883a 	mov	r2,zero
81109084:	f800283a 	ret

81109088 <_cleanup_r>:
81109088:	01604474 	movhi	r5,33041
8110908c:	297cdc04 	addi	r5,r5,-3216
81109090:	1109dd41 	jmpi	81109dd4 <_fwalk_reent>

81109094 <__sinit.part.1>:
81109094:	defff704 	addi	sp,sp,-36
81109098:	00e04474 	movhi	r3,33041
8110909c:	dfc00815 	stw	ra,32(sp)
811090a0:	ddc00715 	stw	r23,28(sp)
811090a4:	dd800615 	stw	r22,24(sp)
811090a8:	dd400515 	stw	r21,20(sp)
811090ac:	dd000415 	stw	r20,16(sp)
811090b0:	dcc00315 	stw	r19,12(sp)
811090b4:	dc800215 	stw	r18,8(sp)
811090b8:	dc400115 	stw	r17,4(sp)
811090bc:	dc000015 	stw	r16,0(sp)
811090c0:	18e42204 	addi	r3,r3,-28536
811090c4:	24000117 	ldw	r16,4(r4)
811090c8:	20c00f15 	stw	r3,60(r4)
811090cc:	2080bb04 	addi	r2,r4,748
811090d0:	00c000c4 	movi	r3,3
811090d4:	20c0b915 	stw	r3,740(r4)
811090d8:	2080ba15 	stw	r2,744(r4)
811090dc:	2000b815 	stw	zero,736(r4)
811090e0:	05c00204 	movi	r23,8
811090e4:	00800104 	movi	r2,4
811090e8:	2025883a 	mov	r18,r4
811090ec:	b80d883a 	mov	r6,r23
811090f0:	81001704 	addi	r4,r16,92
811090f4:	000b883a 	mov	r5,zero
811090f8:	80000015 	stw	zero,0(r16)
811090fc:	80000115 	stw	zero,4(r16)
81109100:	80000215 	stw	zero,8(r16)
81109104:	8080030d 	sth	r2,12(r16)
81109108:	80001915 	stw	zero,100(r16)
8110910c:	8000038d 	sth	zero,14(r16)
81109110:	80000415 	stw	zero,16(r16)
81109114:	80000515 	stw	zero,20(r16)
81109118:	80000615 	stw	zero,24(r16)
8110911c:	110ab7c0 	call	8110ab7c <memset>
81109120:	05a04474 	movhi	r22,33041
81109124:	94400217 	ldw	r17,8(r18)
81109128:	05604474 	movhi	r21,33041
8110912c:	05204474 	movhi	r20,33041
81109130:	04e04474 	movhi	r19,33041
81109134:	b5b10d04 	addi	r22,r22,-15308
81109138:	ad712404 	addi	r21,r21,-15216
8110913c:	a5314304 	addi	r20,r20,-15092
81109140:	9cf15a04 	addi	r19,r19,-15000
81109144:	85800815 	stw	r22,32(r16)
81109148:	85400915 	stw	r21,36(r16)
8110914c:	85000a15 	stw	r20,40(r16)
81109150:	84c00b15 	stw	r19,44(r16)
81109154:	84000715 	stw	r16,28(r16)
81109158:	00800284 	movi	r2,10
8110915c:	8880030d 	sth	r2,12(r17)
81109160:	00800044 	movi	r2,1
81109164:	b80d883a 	mov	r6,r23
81109168:	89001704 	addi	r4,r17,92
8110916c:	000b883a 	mov	r5,zero
81109170:	88000015 	stw	zero,0(r17)
81109174:	88000115 	stw	zero,4(r17)
81109178:	88000215 	stw	zero,8(r17)
8110917c:	88001915 	stw	zero,100(r17)
81109180:	8880038d 	sth	r2,14(r17)
81109184:	88000415 	stw	zero,16(r17)
81109188:	88000515 	stw	zero,20(r17)
8110918c:	88000615 	stw	zero,24(r17)
81109190:	110ab7c0 	call	8110ab7c <memset>
81109194:	94000317 	ldw	r16,12(r18)
81109198:	00800484 	movi	r2,18
8110919c:	8c400715 	stw	r17,28(r17)
811091a0:	8d800815 	stw	r22,32(r17)
811091a4:	8d400915 	stw	r21,36(r17)
811091a8:	8d000a15 	stw	r20,40(r17)
811091ac:	8cc00b15 	stw	r19,44(r17)
811091b0:	8080030d 	sth	r2,12(r16)
811091b4:	00800084 	movi	r2,2
811091b8:	80000015 	stw	zero,0(r16)
811091bc:	80000115 	stw	zero,4(r16)
811091c0:	80000215 	stw	zero,8(r16)
811091c4:	80001915 	stw	zero,100(r16)
811091c8:	8080038d 	sth	r2,14(r16)
811091cc:	80000415 	stw	zero,16(r16)
811091d0:	80000515 	stw	zero,20(r16)
811091d4:	80000615 	stw	zero,24(r16)
811091d8:	b80d883a 	mov	r6,r23
811091dc:	000b883a 	mov	r5,zero
811091e0:	81001704 	addi	r4,r16,92
811091e4:	110ab7c0 	call	8110ab7c <memset>
811091e8:	00800044 	movi	r2,1
811091ec:	84000715 	stw	r16,28(r16)
811091f0:	85800815 	stw	r22,32(r16)
811091f4:	85400915 	stw	r21,36(r16)
811091f8:	85000a15 	stw	r20,40(r16)
811091fc:	84c00b15 	stw	r19,44(r16)
81109200:	90800e15 	stw	r2,56(r18)
81109204:	dfc00817 	ldw	ra,32(sp)
81109208:	ddc00717 	ldw	r23,28(sp)
8110920c:	dd800617 	ldw	r22,24(sp)
81109210:	dd400517 	ldw	r21,20(sp)
81109214:	dd000417 	ldw	r20,16(sp)
81109218:	dcc00317 	ldw	r19,12(sp)
8110921c:	dc800217 	ldw	r18,8(sp)
81109220:	dc400117 	ldw	r17,4(sp)
81109224:	dc000017 	ldw	r16,0(sp)
81109228:	dec00904 	addi	sp,sp,36
8110922c:	f800283a 	ret

81109230 <__fp_lock>:
81109230:	0005883a 	mov	r2,zero
81109234:	f800283a 	ret

81109238 <__sfmoreglue>:
81109238:	defffc04 	addi	sp,sp,-16
8110923c:	dc400115 	stw	r17,4(sp)
81109240:	2c7fffc4 	addi	r17,r5,-1
81109244:	8c401a24 	muli	r17,r17,104
81109248:	dc800215 	stw	r18,8(sp)
8110924c:	2825883a 	mov	r18,r5
81109250:	89401d04 	addi	r5,r17,116
81109254:	dc000015 	stw	r16,0(sp)
81109258:	dfc00315 	stw	ra,12(sp)
8110925c:	110a1300 	call	8110a130 <_malloc_r>
81109260:	1021883a 	mov	r16,r2
81109264:	10000726 	beq	r2,zero,81109284 <__sfmoreglue+0x4c>
81109268:	11000304 	addi	r4,r2,12
8110926c:	10000015 	stw	zero,0(r2)
81109270:	14800115 	stw	r18,4(r2)
81109274:	11000215 	stw	r4,8(r2)
81109278:	89801a04 	addi	r6,r17,104
8110927c:	000b883a 	mov	r5,zero
81109280:	110ab7c0 	call	8110ab7c <memset>
81109284:	8005883a 	mov	r2,r16
81109288:	dfc00317 	ldw	ra,12(sp)
8110928c:	dc800217 	ldw	r18,8(sp)
81109290:	dc400117 	ldw	r17,4(sp)
81109294:	dc000017 	ldw	r16,0(sp)
81109298:	dec00404 	addi	sp,sp,16
8110929c:	f800283a 	ret

811092a0 <__sfp>:
811092a0:	defffb04 	addi	sp,sp,-20
811092a4:	dc000015 	stw	r16,0(sp)
811092a8:	042044b4 	movhi	r16,33042
811092ac:	842f1704 	addi	r16,r16,-17316
811092b0:	dcc00315 	stw	r19,12(sp)
811092b4:	2027883a 	mov	r19,r4
811092b8:	81000017 	ldw	r4,0(r16)
811092bc:	dfc00415 	stw	ra,16(sp)
811092c0:	dc800215 	stw	r18,8(sp)
811092c4:	20800e17 	ldw	r2,56(r4)
811092c8:	dc400115 	stw	r17,4(sp)
811092cc:	1000021e 	bne	r2,zero,811092d8 <__sfp+0x38>
811092d0:	11090940 	call	81109094 <__sinit.part.1>
811092d4:	81000017 	ldw	r4,0(r16)
811092d8:	2480b804 	addi	r18,r4,736
811092dc:	047fffc4 	movi	r17,-1
811092e0:	91000117 	ldw	r4,4(r18)
811092e4:	94000217 	ldw	r16,8(r18)
811092e8:	213fffc4 	addi	r4,r4,-1
811092ec:	20000a16 	blt	r4,zero,81109318 <__sfp+0x78>
811092f0:	8080030f 	ldh	r2,12(r16)
811092f4:	10000c26 	beq	r2,zero,81109328 <__sfp+0x88>
811092f8:	80c01d04 	addi	r3,r16,116
811092fc:	00000206 	br	81109308 <__sfp+0x68>
81109300:	18bfe60f 	ldh	r2,-104(r3)
81109304:	10000826 	beq	r2,zero,81109328 <__sfp+0x88>
81109308:	213fffc4 	addi	r4,r4,-1
8110930c:	1c3ffd04 	addi	r16,r3,-12
81109310:	18c01a04 	addi	r3,r3,104
81109314:	247ffa1e 	bne	r4,r17,81109300 <__reset+0xfb0e9300>
81109318:	90800017 	ldw	r2,0(r18)
8110931c:	10001d26 	beq	r2,zero,81109394 <__sfp+0xf4>
81109320:	1025883a 	mov	r18,r2
81109324:	003fee06 	br	811092e0 <__reset+0xfb0e92e0>
81109328:	00bfffc4 	movi	r2,-1
8110932c:	8080038d 	sth	r2,14(r16)
81109330:	00800044 	movi	r2,1
81109334:	8080030d 	sth	r2,12(r16)
81109338:	80001915 	stw	zero,100(r16)
8110933c:	80000015 	stw	zero,0(r16)
81109340:	80000215 	stw	zero,8(r16)
81109344:	80000115 	stw	zero,4(r16)
81109348:	80000415 	stw	zero,16(r16)
8110934c:	80000515 	stw	zero,20(r16)
81109350:	80000615 	stw	zero,24(r16)
81109354:	01800204 	movi	r6,8
81109358:	000b883a 	mov	r5,zero
8110935c:	81001704 	addi	r4,r16,92
81109360:	110ab7c0 	call	8110ab7c <memset>
81109364:	8005883a 	mov	r2,r16
81109368:	80000c15 	stw	zero,48(r16)
8110936c:	80000d15 	stw	zero,52(r16)
81109370:	80001115 	stw	zero,68(r16)
81109374:	80001215 	stw	zero,72(r16)
81109378:	dfc00417 	ldw	ra,16(sp)
8110937c:	dcc00317 	ldw	r19,12(sp)
81109380:	dc800217 	ldw	r18,8(sp)
81109384:	dc400117 	ldw	r17,4(sp)
81109388:	dc000017 	ldw	r16,0(sp)
8110938c:	dec00504 	addi	sp,sp,20
81109390:	f800283a 	ret
81109394:	01400104 	movi	r5,4
81109398:	9809883a 	mov	r4,r19
8110939c:	11092380 	call	81109238 <__sfmoreglue>
811093a0:	90800015 	stw	r2,0(r18)
811093a4:	103fde1e 	bne	r2,zero,81109320 <__reset+0xfb0e9320>
811093a8:	00800304 	movi	r2,12
811093ac:	98800015 	stw	r2,0(r19)
811093b0:	0005883a 	mov	r2,zero
811093b4:	003ff006 	br	81109378 <__reset+0xfb0e9378>

811093b8 <_cleanup>:
811093b8:	00a044b4 	movhi	r2,33042
811093bc:	10af1704 	addi	r2,r2,-17316
811093c0:	11000017 	ldw	r4,0(r2)
811093c4:	01604474 	movhi	r5,33041
811093c8:	297cdc04 	addi	r5,r5,-3216
811093cc:	1109dd41 	jmpi	81109dd4 <_fwalk_reent>

811093d0 <__sinit>:
811093d0:	20800e17 	ldw	r2,56(r4)
811093d4:	10000126 	beq	r2,zero,811093dc <__sinit+0xc>
811093d8:	f800283a 	ret
811093dc:	11090941 	jmpi	81109094 <__sinit.part.1>

811093e0 <__sfp_lock_acquire>:
811093e0:	f800283a 	ret

811093e4 <__sfp_lock_release>:
811093e4:	f800283a 	ret

811093e8 <__sinit_lock_acquire>:
811093e8:	f800283a 	ret

811093ec <__sinit_lock_release>:
811093ec:	f800283a 	ret

811093f0 <__fp_lock_all>:
811093f0:	00a044b4 	movhi	r2,33042
811093f4:	10af1804 	addi	r2,r2,-17312
811093f8:	11000017 	ldw	r4,0(r2)
811093fc:	01604474 	movhi	r5,33041
81109400:	29648c04 	addi	r5,r5,-28112
81109404:	1109d101 	jmpi	81109d10 <_fwalk>

81109408 <__fp_unlock_all>:
81109408:	00a044b4 	movhi	r2,33042
8110940c:	10af1804 	addi	r2,r2,-17312
81109410:	11000017 	ldw	r4,0(r2)
81109414:	01604474 	movhi	r5,33041
81109418:	29642004 	addi	r5,r5,-28544
8110941c:	1109d101 	jmpi	81109d10 <_fwalk>

81109420 <_malloc_trim_r>:
81109420:	defffb04 	addi	sp,sp,-20
81109424:	dcc00315 	stw	r19,12(sp)
81109428:	04e044b4 	movhi	r19,33042
8110942c:	dc800215 	stw	r18,8(sp)
81109430:	dc400115 	stw	r17,4(sp)
81109434:	dc000015 	stw	r16,0(sp)
81109438:	dfc00415 	stw	ra,16(sp)
8110943c:	2821883a 	mov	r16,r5
81109440:	9ce90004 	addi	r19,r19,-23552
81109444:	2025883a 	mov	r18,r4
81109448:	1113c800 	call	81113c80 <__malloc_lock>
8110944c:	98800217 	ldw	r2,8(r19)
81109450:	14400117 	ldw	r17,4(r2)
81109454:	00bfff04 	movi	r2,-4
81109458:	88a2703a 	and	r17,r17,r2
8110945c:	8c21c83a 	sub	r16,r17,r16
81109460:	8403fbc4 	addi	r16,r16,4079
81109464:	8020d33a 	srli	r16,r16,12
81109468:	0083ffc4 	movi	r2,4095
8110946c:	843fffc4 	addi	r16,r16,-1
81109470:	8020933a 	slli	r16,r16,12
81109474:	1400060e 	bge	r2,r16,81109490 <_malloc_trim_r+0x70>
81109478:	000b883a 	mov	r5,zero
8110947c:	9009883a 	mov	r4,r18
81109480:	110c3e00 	call	8110c3e0 <_sbrk_r>
81109484:	98c00217 	ldw	r3,8(r19)
81109488:	1c47883a 	add	r3,r3,r17
8110948c:	10c00a26 	beq	r2,r3,811094b8 <_malloc_trim_r+0x98>
81109490:	9009883a 	mov	r4,r18
81109494:	1113ca40 	call	81113ca4 <__malloc_unlock>
81109498:	0005883a 	mov	r2,zero
8110949c:	dfc00417 	ldw	ra,16(sp)
811094a0:	dcc00317 	ldw	r19,12(sp)
811094a4:	dc800217 	ldw	r18,8(sp)
811094a8:	dc400117 	ldw	r17,4(sp)
811094ac:	dc000017 	ldw	r16,0(sp)
811094b0:	dec00504 	addi	sp,sp,20
811094b4:	f800283a 	ret
811094b8:	040bc83a 	sub	r5,zero,r16
811094bc:	9009883a 	mov	r4,r18
811094c0:	110c3e00 	call	8110c3e0 <_sbrk_r>
811094c4:	00ffffc4 	movi	r3,-1
811094c8:	10c00d26 	beq	r2,r3,81109500 <_malloc_trim_r+0xe0>
811094cc:	00e044b4 	movhi	r3,33042
811094d0:	18ef3d04 	addi	r3,r3,-17164
811094d4:	18800017 	ldw	r2,0(r3)
811094d8:	99000217 	ldw	r4,8(r19)
811094dc:	8c23c83a 	sub	r17,r17,r16
811094e0:	8c400054 	ori	r17,r17,1
811094e4:	1421c83a 	sub	r16,r2,r16
811094e8:	24400115 	stw	r17,4(r4)
811094ec:	9009883a 	mov	r4,r18
811094f0:	1c000015 	stw	r16,0(r3)
811094f4:	1113ca40 	call	81113ca4 <__malloc_unlock>
811094f8:	00800044 	movi	r2,1
811094fc:	003fe706 	br	8110949c <__reset+0xfb0e949c>
81109500:	000b883a 	mov	r5,zero
81109504:	9009883a 	mov	r4,r18
81109508:	110c3e00 	call	8110c3e0 <_sbrk_r>
8110950c:	99000217 	ldw	r4,8(r19)
81109510:	014003c4 	movi	r5,15
81109514:	1107c83a 	sub	r3,r2,r4
81109518:	28ffdd0e 	bge	r5,r3,81109490 <__reset+0xfb0e9490>
8110951c:	016044b4 	movhi	r5,33042
81109520:	296f1a04 	addi	r5,r5,-17304
81109524:	29400017 	ldw	r5,0(r5)
81109528:	18c00054 	ori	r3,r3,1
8110952c:	20c00115 	stw	r3,4(r4)
81109530:	00e044b4 	movhi	r3,33042
81109534:	1145c83a 	sub	r2,r2,r5
81109538:	18ef3d04 	addi	r3,r3,-17164
8110953c:	18800015 	stw	r2,0(r3)
81109540:	003fd306 	br	81109490 <__reset+0xfb0e9490>

81109544 <_free_r>:
81109544:	28004126 	beq	r5,zero,8110964c <_free_r+0x108>
81109548:	defffd04 	addi	sp,sp,-12
8110954c:	dc400115 	stw	r17,4(sp)
81109550:	dc000015 	stw	r16,0(sp)
81109554:	2023883a 	mov	r17,r4
81109558:	2821883a 	mov	r16,r5
8110955c:	dfc00215 	stw	ra,8(sp)
81109560:	1113c800 	call	81113c80 <__malloc_lock>
81109564:	81ffff17 	ldw	r7,-4(r16)
81109568:	00bfff84 	movi	r2,-2
8110956c:	012044b4 	movhi	r4,33042
81109570:	81bffe04 	addi	r6,r16,-8
81109574:	3884703a 	and	r2,r7,r2
81109578:	21290004 	addi	r4,r4,-23552
8110957c:	308b883a 	add	r5,r6,r2
81109580:	2a400117 	ldw	r9,4(r5)
81109584:	22000217 	ldw	r8,8(r4)
81109588:	00ffff04 	movi	r3,-4
8110958c:	48c6703a 	and	r3,r9,r3
81109590:	2a005726 	beq	r5,r8,811096f0 <_free_r+0x1ac>
81109594:	28c00115 	stw	r3,4(r5)
81109598:	39c0004c 	andi	r7,r7,1
8110959c:	3800091e 	bne	r7,zero,811095c4 <_free_r+0x80>
811095a0:	823ffe17 	ldw	r8,-8(r16)
811095a4:	22400204 	addi	r9,r4,8
811095a8:	320dc83a 	sub	r6,r6,r8
811095ac:	31c00217 	ldw	r7,8(r6)
811095b0:	1205883a 	add	r2,r2,r8
811095b4:	3a406526 	beq	r7,r9,8110974c <_free_r+0x208>
811095b8:	32000317 	ldw	r8,12(r6)
811095bc:	3a000315 	stw	r8,12(r7)
811095c0:	41c00215 	stw	r7,8(r8)
811095c4:	28cf883a 	add	r7,r5,r3
811095c8:	39c00117 	ldw	r7,4(r7)
811095cc:	39c0004c 	andi	r7,r7,1
811095d0:	38003a26 	beq	r7,zero,811096bc <_free_r+0x178>
811095d4:	10c00054 	ori	r3,r2,1
811095d8:	30c00115 	stw	r3,4(r6)
811095dc:	3087883a 	add	r3,r6,r2
811095e0:	18800015 	stw	r2,0(r3)
811095e4:	00c07fc4 	movi	r3,511
811095e8:	18801936 	bltu	r3,r2,81109650 <_free_r+0x10c>
811095ec:	1004d0fa 	srli	r2,r2,3
811095f0:	01c00044 	movi	r7,1
811095f4:	21400117 	ldw	r5,4(r4)
811095f8:	10c00044 	addi	r3,r2,1
811095fc:	18c7883a 	add	r3,r3,r3
81109600:	1005d0ba 	srai	r2,r2,2
81109604:	18c7883a 	add	r3,r3,r3
81109608:	18c7883a 	add	r3,r3,r3
8110960c:	1907883a 	add	r3,r3,r4
81109610:	3884983a 	sll	r2,r7,r2
81109614:	19c00017 	ldw	r7,0(r3)
81109618:	1a3ffe04 	addi	r8,r3,-8
8110961c:	1144b03a 	or	r2,r2,r5
81109620:	32000315 	stw	r8,12(r6)
81109624:	31c00215 	stw	r7,8(r6)
81109628:	20800115 	stw	r2,4(r4)
8110962c:	19800015 	stw	r6,0(r3)
81109630:	39800315 	stw	r6,12(r7)
81109634:	8809883a 	mov	r4,r17
81109638:	dfc00217 	ldw	ra,8(sp)
8110963c:	dc400117 	ldw	r17,4(sp)
81109640:	dc000017 	ldw	r16,0(sp)
81109644:	dec00304 	addi	sp,sp,12
81109648:	1113ca41 	jmpi	81113ca4 <__malloc_unlock>
8110964c:	f800283a 	ret
81109650:	100ad27a 	srli	r5,r2,9
81109654:	00c00104 	movi	r3,4
81109658:	19404a36 	bltu	r3,r5,81109784 <_free_r+0x240>
8110965c:	100ad1ba 	srli	r5,r2,6
81109660:	28c00e44 	addi	r3,r5,57
81109664:	18c7883a 	add	r3,r3,r3
81109668:	29400e04 	addi	r5,r5,56
8110966c:	18c7883a 	add	r3,r3,r3
81109670:	18c7883a 	add	r3,r3,r3
81109674:	1909883a 	add	r4,r3,r4
81109678:	20c00017 	ldw	r3,0(r4)
8110967c:	01e044b4 	movhi	r7,33042
81109680:	213ffe04 	addi	r4,r4,-8
81109684:	39e90004 	addi	r7,r7,-23552
81109688:	20c04426 	beq	r4,r3,8110979c <_free_r+0x258>
8110968c:	01ffff04 	movi	r7,-4
81109690:	19400117 	ldw	r5,4(r3)
81109694:	29ca703a 	and	r5,r5,r7
81109698:	1140022e 	bgeu	r2,r5,811096a4 <_free_r+0x160>
8110969c:	18c00217 	ldw	r3,8(r3)
811096a0:	20fffb1e 	bne	r4,r3,81109690 <__reset+0xfb0e9690>
811096a4:	19000317 	ldw	r4,12(r3)
811096a8:	31000315 	stw	r4,12(r6)
811096ac:	30c00215 	stw	r3,8(r6)
811096b0:	21800215 	stw	r6,8(r4)
811096b4:	19800315 	stw	r6,12(r3)
811096b8:	003fde06 	br	81109634 <__reset+0xfb0e9634>
811096bc:	29c00217 	ldw	r7,8(r5)
811096c0:	10c5883a 	add	r2,r2,r3
811096c4:	00e044b4 	movhi	r3,33042
811096c8:	18e90204 	addi	r3,r3,-23544
811096cc:	38c03b26 	beq	r7,r3,811097bc <_free_r+0x278>
811096d0:	2a000317 	ldw	r8,12(r5)
811096d4:	11400054 	ori	r5,r2,1
811096d8:	3087883a 	add	r3,r6,r2
811096dc:	3a000315 	stw	r8,12(r7)
811096e0:	41c00215 	stw	r7,8(r8)
811096e4:	31400115 	stw	r5,4(r6)
811096e8:	18800015 	stw	r2,0(r3)
811096ec:	003fbd06 	br	811095e4 <__reset+0xfb0e95e4>
811096f0:	39c0004c 	andi	r7,r7,1
811096f4:	10c5883a 	add	r2,r2,r3
811096f8:	3800071e 	bne	r7,zero,81109718 <_free_r+0x1d4>
811096fc:	81fffe17 	ldw	r7,-8(r16)
81109700:	31cdc83a 	sub	r6,r6,r7
81109704:	30c00317 	ldw	r3,12(r6)
81109708:	31400217 	ldw	r5,8(r6)
8110970c:	11c5883a 	add	r2,r2,r7
81109710:	28c00315 	stw	r3,12(r5)
81109714:	19400215 	stw	r5,8(r3)
81109718:	10c00054 	ori	r3,r2,1
8110971c:	30c00115 	stw	r3,4(r6)
81109720:	00e044b4 	movhi	r3,33042
81109724:	18ef1b04 	addi	r3,r3,-17300
81109728:	18c00017 	ldw	r3,0(r3)
8110972c:	21800215 	stw	r6,8(r4)
81109730:	10ffc036 	bltu	r2,r3,81109634 <__reset+0xfb0e9634>
81109734:	00a044b4 	movhi	r2,33042
81109738:	10af3004 	addi	r2,r2,-17216
8110973c:	11400017 	ldw	r5,0(r2)
81109740:	8809883a 	mov	r4,r17
81109744:	11094200 	call	81109420 <_malloc_trim_r>
81109748:	003fba06 	br	81109634 <__reset+0xfb0e9634>
8110974c:	28c9883a 	add	r4,r5,r3
81109750:	21000117 	ldw	r4,4(r4)
81109754:	2100004c 	andi	r4,r4,1
81109758:	2000391e 	bne	r4,zero,81109840 <_free_r+0x2fc>
8110975c:	29c00217 	ldw	r7,8(r5)
81109760:	29000317 	ldw	r4,12(r5)
81109764:	1885883a 	add	r2,r3,r2
81109768:	10c00054 	ori	r3,r2,1
8110976c:	39000315 	stw	r4,12(r7)
81109770:	21c00215 	stw	r7,8(r4)
81109774:	30c00115 	stw	r3,4(r6)
81109778:	308d883a 	add	r6,r6,r2
8110977c:	30800015 	stw	r2,0(r6)
81109780:	003fac06 	br	81109634 <__reset+0xfb0e9634>
81109784:	00c00504 	movi	r3,20
81109788:	19401536 	bltu	r3,r5,811097e0 <_free_r+0x29c>
8110978c:	28c01704 	addi	r3,r5,92
81109790:	18c7883a 	add	r3,r3,r3
81109794:	294016c4 	addi	r5,r5,91
81109798:	003fb406 	br	8110966c <__reset+0xfb0e966c>
8110979c:	280bd0ba 	srai	r5,r5,2
811097a0:	00c00044 	movi	r3,1
811097a4:	38800117 	ldw	r2,4(r7)
811097a8:	194a983a 	sll	r5,r3,r5
811097ac:	2007883a 	mov	r3,r4
811097b0:	2884b03a 	or	r2,r5,r2
811097b4:	38800115 	stw	r2,4(r7)
811097b8:	003fbb06 	br	811096a8 <__reset+0xfb0e96a8>
811097bc:	21800515 	stw	r6,20(r4)
811097c0:	21800415 	stw	r6,16(r4)
811097c4:	10c00054 	ori	r3,r2,1
811097c8:	31c00315 	stw	r7,12(r6)
811097cc:	31c00215 	stw	r7,8(r6)
811097d0:	30c00115 	stw	r3,4(r6)
811097d4:	308d883a 	add	r6,r6,r2
811097d8:	30800015 	stw	r2,0(r6)
811097dc:	003f9506 	br	81109634 <__reset+0xfb0e9634>
811097e0:	00c01504 	movi	r3,84
811097e4:	19400536 	bltu	r3,r5,811097fc <_free_r+0x2b8>
811097e8:	100ad33a 	srli	r5,r2,12
811097ec:	28c01bc4 	addi	r3,r5,111
811097f0:	18c7883a 	add	r3,r3,r3
811097f4:	29401b84 	addi	r5,r5,110
811097f8:	003f9c06 	br	8110966c <__reset+0xfb0e966c>
811097fc:	00c05504 	movi	r3,340
81109800:	19400536 	bltu	r3,r5,81109818 <_free_r+0x2d4>
81109804:	100ad3fa 	srli	r5,r2,15
81109808:	28c01e04 	addi	r3,r5,120
8110980c:	18c7883a 	add	r3,r3,r3
81109810:	29401dc4 	addi	r5,r5,119
81109814:	003f9506 	br	8110966c <__reset+0xfb0e966c>
81109818:	00c15504 	movi	r3,1364
8110981c:	19400536 	bltu	r3,r5,81109834 <_free_r+0x2f0>
81109820:	100ad4ba 	srli	r5,r2,18
81109824:	28c01f44 	addi	r3,r5,125
81109828:	18c7883a 	add	r3,r3,r3
8110982c:	29401f04 	addi	r5,r5,124
81109830:	003f8e06 	br	8110966c <__reset+0xfb0e966c>
81109834:	00c03f84 	movi	r3,254
81109838:	01401f84 	movi	r5,126
8110983c:	003f8b06 	br	8110966c <__reset+0xfb0e966c>
81109840:	10c00054 	ori	r3,r2,1
81109844:	30c00115 	stw	r3,4(r6)
81109848:	308d883a 	add	r6,r6,r2
8110984c:	30800015 	stw	r2,0(r6)
81109850:	003f7806 	br	81109634 <__reset+0xfb0e9634>

81109854 <__sfvwrite_r>:
81109854:	30800217 	ldw	r2,8(r6)
81109858:	10006726 	beq	r2,zero,811099f8 <__sfvwrite_r+0x1a4>
8110985c:	28c0030b 	ldhu	r3,12(r5)
81109860:	defff404 	addi	sp,sp,-48
81109864:	dd400715 	stw	r21,28(sp)
81109868:	dd000615 	stw	r20,24(sp)
8110986c:	dc000215 	stw	r16,8(sp)
81109870:	dfc00b15 	stw	ra,44(sp)
81109874:	df000a15 	stw	fp,40(sp)
81109878:	ddc00915 	stw	r23,36(sp)
8110987c:	dd800815 	stw	r22,32(sp)
81109880:	dcc00515 	stw	r19,20(sp)
81109884:	dc800415 	stw	r18,16(sp)
81109888:	dc400315 	stw	r17,12(sp)
8110988c:	1880020c 	andi	r2,r3,8
81109890:	2821883a 	mov	r16,r5
81109894:	202b883a 	mov	r21,r4
81109898:	3029883a 	mov	r20,r6
8110989c:	10002726 	beq	r2,zero,8110993c <__sfvwrite_r+0xe8>
811098a0:	28800417 	ldw	r2,16(r5)
811098a4:	10002526 	beq	r2,zero,8110993c <__sfvwrite_r+0xe8>
811098a8:	1880008c 	andi	r2,r3,2
811098ac:	a4400017 	ldw	r17,0(r20)
811098b0:	10002a26 	beq	r2,zero,8110995c <__sfvwrite_r+0x108>
811098b4:	05a00034 	movhi	r22,32768
811098b8:	0027883a 	mov	r19,zero
811098bc:	0025883a 	mov	r18,zero
811098c0:	b5bf0004 	addi	r22,r22,-1024
811098c4:	980d883a 	mov	r6,r19
811098c8:	a809883a 	mov	r4,r21
811098cc:	90004626 	beq	r18,zero,811099e8 <__sfvwrite_r+0x194>
811098d0:	900f883a 	mov	r7,r18
811098d4:	b480022e 	bgeu	r22,r18,811098e0 <__sfvwrite_r+0x8c>
811098d8:	01e00034 	movhi	r7,32768
811098dc:	39ff0004 	addi	r7,r7,-1024
811098e0:	80800917 	ldw	r2,36(r16)
811098e4:	81400717 	ldw	r5,28(r16)
811098e8:	103ee83a 	callr	r2
811098ec:	0080570e 	bge	zero,r2,81109a4c <__sfvwrite_r+0x1f8>
811098f0:	a0c00217 	ldw	r3,8(r20)
811098f4:	98a7883a 	add	r19,r19,r2
811098f8:	90a5c83a 	sub	r18,r18,r2
811098fc:	1885c83a 	sub	r2,r3,r2
81109900:	a0800215 	stw	r2,8(r20)
81109904:	103fef1e 	bne	r2,zero,811098c4 <__reset+0xfb0e98c4>
81109908:	0005883a 	mov	r2,zero
8110990c:	dfc00b17 	ldw	ra,44(sp)
81109910:	df000a17 	ldw	fp,40(sp)
81109914:	ddc00917 	ldw	r23,36(sp)
81109918:	dd800817 	ldw	r22,32(sp)
8110991c:	dd400717 	ldw	r21,28(sp)
81109920:	dd000617 	ldw	r20,24(sp)
81109924:	dcc00517 	ldw	r19,20(sp)
81109928:	dc800417 	ldw	r18,16(sp)
8110992c:	dc400317 	ldw	r17,12(sp)
81109930:	dc000217 	ldw	r16,8(sp)
81109934:	dec00c04 	addi	sp,sp,48
81109938:	f800283a 	ret
8110993c:	800b883a 	mov	r5,r16
81109940:	a809883a 	mov	r4,r21
81109944:	11073fc0 	call	811073fc <__swsetup_r>
81109948:	1000eb1e 	bne	r2,zero,81109cf8 <__sfvwrite_r+0x4a4>
8110994c:	80c0030b 	ldhu	r3,12(r16)
81109950:	a4400017 	ldw	r17,0(r20)
81109954:	1880008c 	andi	r2,r3,2
81109958:	103fd61e 	bne	r2,zero,811098b4 <__reset+0xfb0e98b4>
8110995c:	1880004c 	andi	r2,r3,1
81109960:	10003f1e 	bne	r2,zero,81109a60 <__sfvwrite_r+0x20c>
81109964:	0039883a 	mov	fp,zero
81109968:	0025883a 	mov	r18,zero
8110996c:	90001a26 	beq	r18,zero,811099d8 <__sfvwrite_r+0x184>
81109970:	1880800c 	andi	r2,r3,512
81109974:	84c00217 	ldw	r19,8(r16)
81109978:	10002126 	beq	r2,zero,81109a00 <__sfvwrite_r+0x1ac>
8110997c:	982f883a 	mov	r23,r19
81109980:	94c09336 	bltu	r18,r19,81109bd0 <__sfvwrite_r+0x37c>
81109984:	1881200c 	andi	r2,r3,1152
81109988:	10009e1e 	bne	r2,zero,81109c04 <__sfvwrite_r+0x3b0>
8110998c:	81000017 	ldw	r4,0(r16)
81109990:	b80d883a 	mov	r6,r23
81109994:	e00b883a 	mov	r5,fp
81109998:	110aa200 	call	8110aa20 <memmove>
8110999c:	80c00217 	ldw	r3,8(r16)
811099a0:	81000017 	ldw	r4,0(r16)
811099a4:	9005883a 	mov	r2,r18
811099a8:	1ce7c83a 	sub	r19,r3,r19
811099ac:	25cf883a 	add	r7,r4,r23
811099b0:	84c00215 	stw	r19,8(r16)
811099b4:	81c00015 	stw	r7,0(r16)
811099b8:	a0c00217 	ldw	r3,8(r20)
811099bc:	e0b9883a 	add	fp,fp,r2
811099c0:	90a5c83a 	sub	r18,r18,r2
811099c4:	18a7c83a 	sub	r19,r3,r2
811099c8:	a4c00215 	stw	r19,8(r20)
811099cc:	983fce26 	beq	r19,zero,81109908 <__reset+0xfb0e9908>
811099d0:	80c0030b 	ldhu	r3,12(r16)
811099d4:	903fe61e 	bne	r18,zero,81109970 <__reset+0xfb0e9970>
811099d8:	8f000017 	ldw	fp,0(r17)
811099dc:	8c800117 	ldw	r18,4(r17)
811099e0:	8c400204 	addi	r17,r17,8
811099e4:	003fe106 	br	8110996c <__reset+0xfb0e996c>
811099e8:	8cc00017 	ldw	r19,0(r17)
811099ec:	8c800117 	ldw	r18,4(r17)
811099f0:	8c400204 	addi	r17,r17,8
811099f4:	003fb306 	br	811098c4 <__reset+0xfb0e98c4>
811099f8:	0005883a 	mov	r2,zero
811099fc:	f800283a 	ret
81109a00:	81000017 	ldw	r4,0(r16)
81109a04:	80800417 	ldw	r2,16(r16)
81109a08:	11005736 	bltu	r2,r4,81109b68 <__sfvwrite_r+0x314>
81109a0c:	85c00517 	ldw	r23,20(r16)
81109a10:	95c05536 	bltu	r18,r23,81109b68 <__sfvwrite_r+0x314>
81109a14:	00a00034 	movhi	r2,32768
81109a18:	10bfffc4 	addi	r2,r2,-1
81109a1c:	9009883a 	mov	r4,r18
81109a20:	1480012e 	bgeu	r2,r18,81109a28 <__sfvwrite_r+0x1d4>
81109a24:	1009883a 	mov	r4,r2
81109a28:	b80b883a 	mov	r5,r23
81109a2c:	11104840 	call	81110484 <__divsi3>
81109a30:	15cf383a 	mul	r7,r2,r23
81109a34:	81400717 	ldw	r5,28(r16)
81109a38:	80800917 	ldw	r2,36(r16)
81109a3c:	e00d883a 	mov	r6,fp
81109a40:	a809883a 	mov	r4,r21
81109a44:	103ee83a 	callr	r2
81109a48:	00bfdb16 	blt	zero,r2,811099b8 <__reset+0xfb0e99b8>
81109a4c:	8080030b 	ldhu	r2,12(r16)
81109a50:	10801014 	ori	r2,r2,64
81109a54:	8080030d 	sth	r2,12(r16)
81109a58:	00bfffc4 	movi	r2,-1
81109a5c:	003fab06 	br	8110990c <__reset+0xfb0e990c>
81109a60:	0027883a 	mov	r19,zero
81109a64:	0011883a 	mov	r8,zero
81109a68:	0039883a 	mov	fp,zero
81109a6c:	0025883a 	mov	r18,zero
81109a70:	90001f26 	beq	r18,zero,81109af0 <__sfvwrite_r+0x29c>
81109a74:	40005a26 	beq	r8,zero,81109be0 <__sfvwrite_r+0x38c>
81109a78:	982d883a 	mov	r22,r19
81109a7c:	94c0012e 	bgeu	r18,r19,81109a84 <__sfvwrite_r+0x230>
81109a80:	902d883a 	mov	r22,r18
81109a84:	81000017 	ldw	r4,0(r16)
81109a88:	80800417 	ldw	r2,16(r16)
81109a8c:	b02f883a 	mov	r23,r22
81109a90:	81c00517 	ldw	r7,20(r16)
81109a94:	1100032e 	bgeu	r2,r4,81109aa4 <__sfvwrite_r+0x250>
81109a98:	80c00217 	ldw	r3,8(r16)
81109a9c:	38c7883a 	add	r3,r7,r3
81109aa0:	1d801816 	blt	r3,r22,81109b04 <__sfvwrite_r+0x2b0>
81109aa4:	b1c03e16 	blt	r22,r7,81109ba0 <__sfvwrite_r+0x34c>
81109aa8:	80800917 	ldw	r2,36(r16)
81109aac:	81400717 	ldw	r5,28(r16)
81109ab0:	e00d883a 	mov	r6,fp
81109ab4:	da000115 	stw	r8,4(sp)
81109ab8:	a809883a 	mov	r4,r21
81109abc:	103ee83a 	callr	r2
81109ac0:	102f883a 	mov	r23,r2
81109ac4:	da000117 	ldw	r8,4(sp)
81109ac8:	00bfe00e 	bge	zero,r2,81109a4c <__reset+0xfb0e9a4c>
81109acc:	9de7c83a 	sub	r19,r19,r23
81109ad0:	98001f26 	beq	r19,zero,81109b50 <__sfvwrite_r+0x2fc>
81109ad4:	a0800217 	ldw	r2,8(r20)
81109ad8:	e5f9883a 	add	fp,fp,r23
81109adc:	95e5c83a 	sub	r18,r18,r23
81109ae0:	15efc83a 	sub	r23,r2,r23
81109ae4:	a5c00215 	stw	r23,8(r20)
81109ae8:	b83f8726 	beq	r23,zero,81109908 <__reset+0xfb0e9908>
81109aec:	903fe11e 	bne	r18,zero,81109a74 <__reset+0xfb0e9a74>
81109af0:	8f000017 	ldw	fp,0(r17)
81109af4:	8c800117 	ldw	r18,4(r17)
81109af8:	0011883a 	mov	r8,zero
81109afc:	8c400204 	addi	r17,r17,8
81109b00:	003fdb06 	br	81109a70 <__reset+0xfb0e9a70>
81109b04:	180d883a 	mov	r6,r3
81109b08:	e00b883a 	mov	r5,fp
81109b0c:	da000115 	stw	r8,4(sp)
81109b10:	d8c00015 	stw	r3,0(sp)
81109b14:	110aa200 	call	8110aa20 <memmove>
81109b18:	d8c00017 	ldw	r3,0(sp)
81109b1c:	80800017 	ldw	r2,0(r16)
81109b20:	800b883a 	mov	r5,r16
81109b24:	a809883a 	mov	r4,r21
81109b28:	10c5883a 	add	r2,r2,r3
81109b2c:	80800015 	stw	r2,0(r16)
81109b30:	d8c00015 	stw	r3,0(sp)
81109b34:	1108ff40 	call	81108ff4 <_fflush_r>
81109b38:	d8c00017 	ldw	r3,0(sp)
81109b3c:	da000117 	ldw	r8,4(sp)
81109b40:	103fc21e 	bne	r2,zero,81109a4c <__reset+0xfb0e9a4c>
81109b44:	182f883a 	mov	r23,r3
81109b48:	9de7c83a 	sub	r19,r19,r23
81109b4c:	983fe11e 	bne	r19,zero,81109ad4 <__reset+0xfb0e9ad4>
81109b50:	800b883a 	mov	r5,r16
81109b54:	a809883a 	mov	r4,r21
81109b58:	1108ff40 	call	81108ff4 <_fflush_r>
81109b5c:	103fbb1e 	bne	r2,zero,81109a4c <__reset+0xfb0e9a4c>
81109b60:	0011883a 	mov	r8,zero
81109b64:	003fdb06 	br	81109ad4 <__reset+0xfb0e9ad4>
81109b68:	94c0012e 	bgeu	r18,r19,81109b70 <__sfvwrite_r+0x31c>
81109b6c:	9027883a 	mov	r19,r18
81109b70:	980d883a 	mov	r6,r19
81109b74:	e00b883a 	mov	r5,fp
81109b78:	110aa200 	call	8110aa20 <memmove>
81109b7c:	80800217 	ldw	r2,8(r16)
81109b80:	80c00017 	ldw	r3,0(r16)
81109b84:	14c5c83a 	sub	r2,r2,r19
81109b88:	1cc7883a 	add	r3,r3,r19
81109b8c:	80800215 	stw	r2,8(r16)
81109b90:	80c00015 	stw	r3,0(r16)
81109b94:	10004326 	beq	r2,zero,81109ca4 <__sfvwrite_r+0x450>
81109b98:	9805883a 	mov	r2,r19
81109b9c:	003f8606 	br	811099b8 <__reset+0xfb0e99b8>
81109ba0:	b00d883a 	mov	r6,r22
81109ba4:	e00b883a 	mov	r5,fp
81109ba8:	da000115 	stw	r8,4(sp)
81109bac:	110aa200 	call	8110aa20 <memmove>
81109bb0:	80800217 	ldw	r2,8(r16)
81109bb4:	80c00017 	ldw	r3,0(r16)
81109bb8:	da000117 	ldw	r8,4(sp)
81109bbc:	1585c83a 	sub	r2,r2,r22
81109bc0:	1dad883a 	add	r22,r3,r22
81109bc4:	80800215 	stw	r2,8(r16)
81109bc8:	85800015 	stw	r22,0(r16)
81109bcc:	003fbf06 	br	81109acc <__reset+0xfb0e9acc>
81109bd0:	81000017 	ldw	r4,0(r16)
81109bd4:	9027883a 	mov	r19,r18
81109bd8:	902f883a 	mov	r23,r18
81109bdc:	003f6c06 	br	81109990 <__reset+0xfb0e9990>
81109be0:	900d883a 	mov	r6,r18
81109be4:	01400284 	movi	r5,10
81109be8:	e009883a 	mov	r4,fp
81109bec:	110a93c0 	call	8110a93c <memchr>
81109bf0:	10003e26 	beq	r2,zero,81109cec <__sfvwrite_r+0x498>
81109bf4:	10800044 	addi	r2,r2,1
81109bf8:	1727c83a 	sub	r19,r2,fp
81109bfc:	02000044 	movi	r8,1
81109c00:	003f9d06 	br	81109a78 <__reset+0xfb0e9a78>
81109c04:	80800517 	ldw	r2,20(r16)
81109c08:	81400417 	ldw	r5,16(r16)
81109c0c:	81c00017 	ldw	r7,0(r16)
81109c10:	10a7883a 	add	r19,r2,r2
81109c14:	9885883a 	add	r2,r19,r2
81109c18:	1026d7fa 	srli	r19,r2,31
81109c1c:	396dc83a 	sub	r22,r7,r5
81109c20:	b1000044 	addi	r4,r22,1
81109c24:	9885883a 	add	r2,r19,r2
81109c28:	1027d07a 	srai	r19,r2,1
81109c2c:	2485883a 	add	r2,r4,r18
81109c30:	980d883a 	mov	r6,r19
81109c34:	9880022e 	bgeu	r19,r2,81109c40 <__sfvwrite_r+0x3ec>
81109c38:	1027883a 	mov	r19,r2
81109c3c:	100d883a 	mov	r6,r2
81109c40:	18c1000c 	andi	r3,r3,1024
81109c44:	18001c26 	beq	r3,zero,81109cb8 <__sfvwrite_r+0x464>
81109c48:	300b883a 	mov	r5,r6
81109c4c:	a809883a 	mov	r4,r21
81109c50:	110a1300 	call	8110a130 <_malloc_r>
81109c54:	102f883a 	mov	r23,r2
81109c58:	10002926 	beq	r2,zero,81109d00 <__sfvwrite_r+0x4ac>
81109c5c:	81400417 	ldw	r5,16(r16)
81109c60:	b00d883a 	mov	r6,r22
81109c64:	1009883a 	mov	r4,r2
81109c68:	1102b500 	call	81102b50 <memcpy>
81109c6c:	8080030b 	ldhu	r2,12(r16)
81109c70:	00fedfc4 	movi	r3,-1153
81109c74:	10c4703a 	and	r2,r2,r3
81109c78:	10802014 	ori	r2,r2,128
81109c7c:	8080030d 	sth	r2,12(r16)
81109c80:	bd89883a 	add	r4,r23,r22
81109c84:	9d8fc83a 	sub	r7,r19,r22
81109c88:	85c00415 	stw	r23,16(r16)
81109c8c:	84c00515 	stw	r19,20(r16)
81109c90:	81000015 	stw	r4,0(r16)
81109c94:	9027883a 	mov	r19,r18
81109c98:	81c00215 	stw	r7,8(r16)
81109c9c:	902f883a 	mov	r23,r18
81109ca0:	003f3b06 	br	81109990 <__reset+0xfb0e9990>
81109ca4:	800b883a 	mov	r5,r16
81109ca8:	a809883a 	mov	r4,r21
81109cac:	1108ff40 	call	81108ff4 <_fflush_r>
81109cb0:	103fb926 	beq	r2,zero,81109b98 <__reset+0xfb0e9b98>
81109cb4:	003f6506 	br	81109a4c <__reset+0xfb0e9a4c>
81109cb8:	a809883a 	mov	r4,r21
81109cbc:	110be080 	call	8110be08 <_realloc_r>
81109cc0:	102f883a 	mov	r23,r2
81109cc4:	103fee1e 	bne	r2,zero,81109c80 <__reset+0xfb0e9c80>
81109cc8:	81400417 	ldw	r5,16(r16)
81109ccc:	a809883a 	mov	r4,r21
81109cd0:	11095440 	call	81109544 <_free_r>
81109cd4:	8080030b 	ldhu	r2,12(r16)
81109cd8:	00ffdfc4 	movi	r3,-129
81109cdc:	1884703a 	and	r2,r3,r2
81109ce0:	00c00304 	movi	r3,12
81109ce4:	a8c00015 	stw	r3,0(r21)
81109ce8:	003f5906 	br	81109a50 <__reset+0xfb0e9a50>
81109cec:	94c00044 	addi	r19,r18,1
81109cf0:	02000044 	movi	r8,1
81109cf4:	003f6006 	br	81109a78 <__reset+0xfb0e9a78>
81109cf8:	00bfffc4 	movi	r2,-1
81109cfc:	003f0306 	br	8110990c <__reset+0xfb0e990c>
81109d00:	00800304 	movi	r2,12
81109d04:	a8800015 	stw	r2,0(r21)
81109d08:	8080030b 	ldhu	r2,12(r16)
81109d0c:	003f5006 	br	81109a50 <__reset+0xfb0e9a50>

81109d10 <_fwalk>:
81109d10:	defff704 	addi	sp,sp,-36
81109d14:	dd000415 	stw	r20,16(sp)
81109d18:	dfc00815 	stw	ra,32(sp)
81109d1c:	ddc00715 	stw	r23,28(sp)
81109d20:	dd800615 	stw	r22,24(sp)
81109d24:	dd400515 	stw	r21,20(sp)
81109d28:	dcc00315 	stw	r19,12(sp)
81109d2c:	dc800215 	stw	r18,8(sp)
81109d30:	dc400115 	stw	r17,4(sp)
81109d34:	dc000015 	stw	r16,0(sp)
81109d38:	2500b804 	addi	r20,r4,736
81109d3c:	a0002326 	beq	r20,zero,81109dcc <_fwalk+0xbc>
81109d40:	282b883a 	mov	r21,r5
81109d44:	002f883a 	mov	r23,zero
81109d48:	05800044 	movi	r22,1
81109d4c:	04ffffc4 	movi	r19,-1
81109d50:	a4400117 	ldw	r17,4(r20)
81109d54:	a4800217 	ldw	r18,8(r20)
81109d58:	8c7fffc4 	addi	r17,r17,-1
81109d5c:	88000d16 	blt	r17,zero,81109d94 <_fwalk+0x84>
81109d60:	94000304 	addi	r16,r18,12
81109d64:	94800384 	addi	r18,r18,14
81109d68:	8080000b 	ldhu	r2,0(r16)
81109d6c:	8c7fffc4 	addi	r17,r17,-1
81109d70:	813ffd04 	addi	r4,r16,-12
81109d74:	b080042e 	bgeu	r22,r2,81109d88 <_fwalk+0x78>
81109d78:	9080000f 	ldh	r2,0(r18)
81109d7c:	14c00226 	beq	r2,r19,81109d88 <_fwalk+0x78>
81109d80:	a83ee83a 	callr	r21
81109d84:	b8aeb03a 	or	r23,r23,r2
81109d88:	84001a04 	addi	r16,r16,104
81109d8c:	94801a04 	addi	r18,r18,104
81109d90:	8cfff51e 	bne	r17,r19,81109d68 <__reset+0xfb0e9d68>
81109d94:	a5000017 	ldw	r20,0(r20)
81109d98:	a03fed1e 	bne	r20,zero,81109d50 <__reset+0xfb0e9d50>
81109d9c:	b805883a 	mov	r2,r23
81109da0:	dfc00817 	ldw	ra,32(sp)
81109da4:	ddc00717 	ldw	r23,28(sp)
81109da8:	dd800617 	ldw	r22,24(sp)
81109dac:	dd400517 	ldw	r21,20(sp)
81109db0:	dd000417 	ldw	r20,16(sp)
81109db4:	dcc00317 	ldw	r19,12(sp)
81109db8:	dc800217 	ldw	r18,8(sp)
81109dbc:	dc400117 	ldw	r17,4(sp)
81109dc0:	dc000017 	ldw	r16,0(sp)
81109dc4:	dec00904 	addi	sp,sp,36
81109dc8:	f800283a 	ret
81109dcc:	002f883a 	mov	r23,zero
81109dd0:	003ff206 	br	81109d9c <__reset+0xfb0e9d9c>

81109dd4 <_fwalk_reent>:
81109dd4:	defff704 	addi	sp,sp,-36
81109dd8:	dd000415 	stw	r20,16(sp)
81109ddc:	dfc00815 	stw	ra,32(sp)
81109de0:	ddc00715 	stw	r23,28(sp)
81109de4:	dd800615 	stw	r22,24(sp)
81109de8:	dd400515 	stw	r21,20(sp)
81109dec:	dcc00315 	stw	r19,12(sp)
81109df0:	dc800215 	stw	r18,8(sp)
81109df4:	dc400115 	stw	r17,4(sp)
81109df8:	dc000015 	stw	r16,0(sp)
81109dfc:	2500b804 	addi	r20,r4,736
81109e00:	a0002326 	beq	r20,zero,81109e90 <_fwalk_reent+0xbc>
81109e04:	282b883a 	mov	r21,r5
81109e08:	2027883a 	mov	r19,r4
81109e0c:	002f883a 	mov	r23,zero
81109e10:	05800044 	movi	r22,1
81109e14:	04bfffc4 	movi	r18,-1
81109e18:	a4400117 	ldw	r17,4(r20)
81109e1c:	a4000217 	ldw	r16,8(r20)
81109e20:	8c7fffc4 	addi	r17,r17,-1
81109e24:	88000c16 	blt	r17,zero,81109e58 <_fwalk_reent+0x84>
81109e28:	84000304 	addi	r16,r16,12
81109e2c:	8080000b 	ldhu	r2,0(r16)
81109e30:	8c7fffc4 	addi	r17,r17,-1
81109e34:	817ffd04 	addi	r5,r16,-12
81109e38:	b080052e 	bgeu	r22,r2,81109e50 <_fwalk_reent+0x7c>
81109e3c:	8080008f 	ldh	r2,2(r16)
81109e40:	9809883a 	mov	r4,r19
81109e44:	14800226 	beq	r2,r18,81109e50 <_fwalk_reent+0x7c>
81109e48:	a83ee83a 	callr	r21
81109e4c:	b8aeb03a 	or	r23,r23,r2
81109e50:	84001a04 	addi	r16,r16,104
81109e54:	8cbff51e 	bne	r17,r18,81109e2c <__reset+0xfb0e9e2c>
81109e58:	a5000017 	ldw	r20,0(r20)
81109e5c:	a03fee1e 	bne	r20,zero,81109e18 <__reset+0xfb0e9e18>
81109e60:	b805883a 	mov	r2,r23
81109e64:	dfc00817 	ldw	ra,32(sp)
81109e68:	ddc00717 	ldw	r23,28(sp)
81109e6c:	dd800617 	ldw	r22,24(sp)
81109e70:	dd400517 	ldw	r21,20(sp)
81109e74:	dd000417 	ldw	r20,16(sp)
81109e78:	dcc00317 	ldw	r19,12(sp)
81109e7c:	dc800217 	ldw	r18,8(sp)
81109e80:	dc400117 	ldw	r17,4(sp)
81109e84:	dc000017 	ldw	r16,0(sp)
81109e88:	dec00904 	addi	sp,sp,36
81109e8c:	f800283a 	ret
81109e90:	002f883a 	mov	r23,zero
81109e94:	003ff206 	br	81109e60 <__reset+0xfb0e9e60>

81109e98 <_setlocale_r>:
81109e98:	30001b26 	beq	r6,zero,81109f08 <_setlocale_r+0x70>
81109e9c:	016044b4 	movhi	r5,33042
81109ea0:	defffe04 	addi	sp,sp,-8
81109ea4:	29661b04 	addi	r5,r5,-26516
81109ea8:	3009883a 	mov	r4,r6
81109eac:	dc000015 	stw	r16,0(sp)
81109eb0:	dfc00115 	stw	ra,4(sp)
81109eb4:	3021883a 	mov	r16,r6
81109eb8:	110c5700 	call	8110c570 <strcmp>
81109ebc:	1000061e 	bne	r2,zero,81109ed8 <_setlocale_r+0x40>
81109ec0:	00a044b4 	movhi	r2,33042
81109ec4:	10a61a04 	addi	r2,r2,-26520
81109ec8:	dfc00117 	ldw	ra,4(sp)
81109ecc:	dc000017 	ldw	r16,0(sp)
81109ed0:	dec00204 	addi	sp,sp,8
81109ed4:	f800283a 	ret
81109ed8:	016044b4 	movhi	r5,33042
81109edc:	29661a04 	addi	r5,r5,-26520
81109ee0:	8009883a 	mov	r4,r16
81109ee4:	110c5700 	call	8110c570 <strcmp>
81109ee8:	103ff526 	beq	r2,zero,81109ec0 <__reset+0xfb0e9ec0>
81109eec:	016044b4 	movhi	r5,33042
81109ef0:	2965fd04 	addi	r5,r5,-26636
81109ef4:	8009883a 	mov	r4,r16
81109ef8:	110c5700 	call	8110c570 <strcmp>
81109efc:	103ff026 	beq	r2,zero,81109ec0 <__reset+0xfb0e9ec0>
81109f00:	0005883a 	mov	r2,zero
81109f04:	003ff006 	br	81109ec8 <__reset+0xfb0e9ec8>
81109f08:	00a044b4 	movhi	r2,33042
81109f0c:	10a61a04 	addi	r2,r2,-26520
81109f10:	f800283a 	ret

81109f14 <__locale_charset>:
81109f14:	00a044b4 	movhi	r2,33042
81109f18:	10a8ea04 	addi	r2,r2,-23640
81109f1c:	f800283a 	ret

81109f20 <__locale_mb_cur_max>:
81109f20:	00a044b4 	movhi	r2,33042
81109f24:	10af1904 	addi	r2,r2,-17308
81109f28:	10800017 	ldw	r2,0(r2)
81109f2c:	f800283a 	ret

81109f30 <__locale_msgcharset>:
81109f30:	00a044b4 	movhi	r2,33042
81109f34:	10a8e204 	addi	r2,r2,-23672
81109f38:	f800283a 	ret

81109f3c <__locale_cjk_lang>:
81109f3c:	0005883a 	mov	r2,zero
81109f40:	f800283a 	ret

81109f44 <_localeconv_r>:
81109f44:	00a044b4 	movhi	r2,33042
81109f48:	10a8f204 	addi	r2,r2,-23608
81109f4c:	f800283a 	ret

81109f50 <setlocale>:
81109f50:	00a044b4 	movhi	r2,33042
81109f54:	10af1804 	addi	r2,r2,-17312
81109f58:	280d883a 	mov	r6,r5
81109f5c:	200b883a 	mov	r5,r4
81109f60:	11000017 	ldw	r4,0(r2)
81109f64:	1109e981 	jmpi	81109e98 <_setlocale_r>

81109f68 <localeconv>:
81109f68:	00a044b4 	movhi	r2,33042
81109f6c:	10a8f204 	addi	r2,r2,-23608
81109f70:	f800283a 	ret

81109f74 <__smakebuf_r>:
81109f74:	2880030b 	ldhu	r2,12(r5)
81109f78:	10c0008c 	andi	r3,r2,2
81109f7c:	1800411e 	bne	r3,zero,8110a084 <__smakebuf_r+0x110>
81109f80:	deffec04 	addi	sp,sp,-80
81109f84:	dc000f15 	stw	r16,60(sp)
81109f88:	2821883a 	mov	r16,r5
81109f8c:	2940038f 	ldh	r5,14(r5)
81109f90:	dc401015 	stw	r17,64(sp)
81109f94:	dfc01315 	stw	ra,76(sp)
81109f98:	dcc01215 	stw	r19,72(sp)
81109f9c:	dc801115 	stw	r18,68(sp)
81109fa0:	2023883a 	mov	r17,r4
81109fa4:	28001c16 	blt	r5,zero,8110a018 <__smakebuf_r+0xa4>
81109fa8:	d80d883a 	mov	r6,sp
81109fac:	110f67c0 	call	8110f67c <_fstat_r>
81109fb0:	10001816 	blt	r2,zero,8110a014 <__smakebuf_r+0xa0>
81109fb4:	d8800117 	ldw	r2,4(sp)
81109fb8:	00e00014 	movui	r3,32768
81109fbc:	10bc000c 	andi	r2,r2,61440
81109fc0:	14c80020 	cmpeqi	r19,r2,8192
81109fc4:	10c03726 	beq	r2,r3,8110a0a4 <__smakebuf_r+0x130>
81109fc8:	80c0030b 	ldhu	r3,12(r16)
81109fcc:	18c20014 	ori	r3,r3,2048
81109fd0:	80c0030d 	sth	r3,12(r16)
81109fd4:	00c80004 	movi	r3,8192
81109fd8:	10c0521e 	bne	r2,r3,8110a124 <__smakebuf_r+0x1b0>
81109fdc:	8140038f 	ldh	r5,14(r16)
81109fe0:	8809883a 	mov	r4,r17
81109fe4:	110f6d80 	call	8110f6d8 <_isatty_r>
81109fe8:	10004c26 	beq	r2,zero,8110a11c <__smakebuf_r+0x1a8>
81109fec:	8080030b 	ldhu	r2,12(r16)
81109ff0:	80c010c4 	addi	r3,r16,67
81109ff4:	80c00015 	stw	r3,0(r16)
81109ff8:	10800054 	ori	r2,r2,1
81109ffc:	8080030d 	sth	r2,12(r16)
8110a000:	00800044 	movi	r2,1
8110a004:	80c00415 	stw	r3,16(r16)
8110a008:	80800515 	stw	r2,20(r16)
8110a00c:	04810004 	movi	r18,1024
8110a010:	00000706 	br	8110a030 <__smakebuf_r+0xbc>
8110a014:	8080030b 	ldhu	r2,12(r16)
8110a018:	10c0200c 	andi	r3,r2,128
8110a01c:	18001f1e 	bne	r3,zero,8110a09c <__smakebuf_r+0x128>
8110a020:	04810004 	movi	r18,1024
8110a024:	10820014 	ori	r2,r2,2048
8110a028:	8080030d 	sth	r2,12(r16)
8110a02c:	0027883a 	mov	r19,zero
8110a030:	900b883a 	mov	r5,r18
8110a034:	8809883a 	mov	r4,r17
8110a038:	110a1300 	call	8110a130 <_malloc_r>
8110a03c:	10002c26 	beq	r2,zero,8110a0f0 <__smakebuf_r+0x17c>
8110a040:	80c0030b 	ldhu	r3,12(r16)
8110a044:	01204474 	movhi	r4,33041
8110a048:	21242204 	addi	r4,r4,-28536
8110a04c:	89000f15 	stw	r4,60(r17)
8110a050:	18c02014 	ori	r3,r3,128
8110a054:	80c0030d 	sth	r3,12(r16)
8110a058:	80800015 	stw	r2,0(r16)
8110a05c:	80800415 	stw	r2,16(r16)
8110a060:	84800515 	stw	r18,20(r16)
8110a064:	98001a1e 	bne	r19,zero,8110a0d0 <__smakebuf_r+0x15c>
8110a068:	dfc01317 	ldw	ra,76(sp)
8110a06c:	dcc01217 	ldw	r19,72(sp)
8110a070:	dc801117 	ldw	r18,68(sp)
8110a074:	dc401017 	ldw	r17,64(sp)
8110a078:	dc000f17 	ldw	r16,60(sp)
8110a07c:	dec01404 	addi	sp,sp,80
8110a080:	f800283a 	ret
8110a084:	288010c4 	addi	r2,r5,67
8110a088:	28800015 	stw	r2,0(r5)
8110a08c:	28800415 	stw	r2,16(r5)
8110a090:	00800044 	movi	r2,1
8110a094:	28800515 	stw	r2,20(r5)
8110a098:	f800283a 	ret
8110a09c:	04801004 	movi	r18,64
8110a0a0:	003fe006 	br	8110a024 <__reset+0xfb0ea024>
8110a0a4:	81000a17 	ldw	r4,40(r16)
8110a0a8:	00e04474 	movhi	r3,33041
8110a0ac:	18f14304 	addi	r3,r3,-15092
8110a0b0:	20ffc51e 	bne	r4,r3,81109fc8 <__reset+0xfb0e9fc8>
8110a0b4:	8080030b 	ldhu	r2,12(r16)
8110a0b8:	04810004 	movi	r18,1024
8110a0bc:	84801315 	stw	r18,76(r16)
8110a0c0:	1484b03a 	or	r2,r2,r18
8110a0c4:	8080030d 	sth	r2,12(r16)
8110a0c8:	0027883a 	mov	r19,zero
8110a0cc:	003fd806 	br	8110a030 <__reset+0xfb0ea030>
8110a0d0:	8140038f 	ldh	r5,14(r16)
8110a0d4:	8809883a 	mov	r4,r17
8110a0d8:	110f6d80 	call	8110f6d8 <_isatty_r>
8110a0dc:	103fe226 	beq	r2,zero,8110a068 <__reset+0xfb0ea068>
8110a0e0:	8080030b 	ldhu	r2,12(r16)
8110a0e4:	10800054 	ori	r2,r2,1
8110a0e8:	8080030d 	sth	r2,12(r16)
8110a0ec:	003fde06 	br	8110a068 <__reset+0xfb0ea068>
8110a0f0:	8080030b 	ldhu	r2,12(r16)
8110a0f4:	10c0800c 	andi	r3,r2,512
8110a0f8:	183fdb1e 	bne	r3,zero,8110a068 <__reset+0xfb0ea068>
8110a0fc:	10800094 	ori	r2,r2,2
8110a100:	80c010c4 	addi	r3,r16,67
8110a104:	8080030d 	sth	r2,12(r16)
8110a108:	00800044 	movi	r2,1
8110a10c:	80c00015 	stw	r3,0(r16)
8110a110:	80c00415 	stw	r3,16(r16)
8110a114:	80800515 	stw	r2,20(r16)
8110a118:	003fd306 	br	8110a068 <__reset+0xfb0ea068>
8110a11c:	04810004 	movi	r18,1024
8110a120:	003fc306 	br	8110a030 <__reset+0xfb0ea030>
8110a124:	0027883a 	mov	r19,zero
8110a128:	04810004 	movi	r18,1024
8110a12c:	003fc006 	br	8110a030 <__reset+0xfb0ea030>

8110a130 <_malloc_r>:
8110a130:	defff504 	addi	sp,sp,-44
8110a134:	dc800315 	stw	r18,12(sp)
8110a138:	dfc00a15 	stw	ra,40(sp)
8110a13c:	df000915 	stw	fp,36(sp)
8110a140:	ddc00815 	stw	r23,32(sp)
8110a144:	dd800715 	stw	r22,28(sp)
8110a148:	dd400615 	stw	r21,24(sp)
8110a14c:	dd000515 	stw	r20,20(sp)
8110a150:	dcc00415 	stw	r19,16(sp)
8110a154:	dc400215 	stw	r17,8(sp)
8110a158:	dc000115 	stw	r16,4(sp)
8110a15c:	288002c4 	addi	r2,r5,11
8110a160:	00c00584 	movi	r3,22
8110a164:	2025883a 	mov	r18,r4
8110a168:	18807f2e 	bgeu	r3,r2,8110a368 <_malloc_r+0x238>
8110a16c:	047ffe04 	movi	r17,-8
8110a170:	1462703a 	and	r17,r2,r17
8110a174:	8800a316 	blt	r17,zero,8110a404 <_malloc_r+0x2d4>
8110a178:	8940a236 	bltu	r17,r5,8110a404 <_malloc_r+0x2d4>
8110a17c:	1113c800 	call	81113c80 <__malloc_lock>
8110a180:	00807dc4 	movi	r2,503
8110a184:	1441e92e 	bgeu	r2,r17,8110a92c <_malloc_r+0x7fc>
8110a188:	8804d27a 	srli	r2,r17,9
8110a18c:	1000a126 	beq	r2,zero,8110a414 <_malloc_r+0x2e4>
8110a190:	00c00104 	movi	r3,4
8110a194:	18811e36 	bltu	r3,r2,8110a610 <_malloc_r+0x4e0>
8110a198:	8804d1ba 	srli	r2,r17,6
8110a19c:	12000e44 	addi	r8,r2,57
8110a1a0:	11c00e04 	addi	r7,r2,56
8110a1a4:	4209883a 	add	r4,r8,r8
8110a1a8:	04e044b4 	movhi	r19,33042
8110a1ac:	2109883a 	add	r4,r4,r4
8110a1b0:	9ce90004 	addi	r19,r19,-23552
8110a1b4:	2109883a 	add	r4,r4,r4
8110a1b8:	9909883a 	add	r4,r19,r4
8110a1bc:	24000117 	ldw	r16,4(r4)
8110a1c0:	213ffe04 	addi	r4,r4,-8
8110a1c4:	24009726 	beq	r4,r16,8110a424 <_malloc_r+0x2f4>
8110a1c8:	80800117 	ldw	r2,4(r16)
8110a1cc:	01bfff04 	movi	r6,-4
8110a1d0:	014003c4 	movi	r5,15
8110a1d4:	1184703a 	and	r2,r2,r6
8110a1d8:	1447c83a 	sub	r3,r2,r17
8110a1dc:	28c00716 	blt	r5,r3,8110a1fc <_malloc_r+0xcc>
8110a1e0:	1800920e 	bge	r3,zero,8110a42c <_malloc_r+0x2fc>
8110a1e4:	84000317 	ldw	r16,12(r16)
8110a1e8:	24008e26 	beq	r4,r16,8110a424 <_malloc_r+0x2f4>
8110a1ec:	80800117 	ldw	r2,4(r16)
8110a1f0:	1184703a 	and	r2,r2,r6
8110a1f4:	1447c83a 	sub	r3,r2,r17
8110a1f8:	28fff90e 	bge	r5,r3,8110a1e0 <__reset+0xfb0ea1e0>
8110a1fc:	3809883a 	mov	r4,r7
8110a200:	01a044b4 	movhi	r6,33042
8110a204:	9c000417 	ldw	r16,16(r19)
8110a208:	31a90004 	addi	r6,r6,-23552
8110a20c:	32000204 	addi	r8,r6,8
8110a210:	82013426 	beq	r16,r8,8110a6e4 <_malloc_r+0x5b4>
8110a214:	80c00117 	ldw	r3,4(r16)
8110a218:	00bfff04 	movi	r2,-4
8110a21c:	188e703a 	and	r7,r3,r2
8110a220:	3c45c83a 	sub	r2,r7,r17
8110a224:	00c003c4 	movi	r3,15
8110a228:	18811f16 	blt	r3,r2,8110a6a8 <_malloc_r+0x578>
8110a22c:	32000515 	stw	r8,20(r6)
8110a230:	32000415 	stw	r8,16(r6)
8110a234:	10007f0e 	bge	r2,zero,8110a434 <_malloc_r+0x304>
8110a238:	00807fc4 	movi	r2,511
8110a23c:	11c0fd36 	bltu	r2,r7,8110a634 <_malloc_r+0x504>
8110a240:	3806d0fa 	srli	r3,r7,3
8110a244:	01c00044 	movi	r7,1
8110a248:	30800117 	ldw	r2,4(r6)
8110a24c:	19400044 	addi	r5,r3,1
8110a250:	294b883a 	add	r5,r5,r5
8110a254:	1807d0ba 	srai	r3,r3,2
8110a258:	294b883a 	add	r5,r5,r5
8110a25c:	294b883a 	add	r5,r5,r5
8110a260:	298b883a 	add	r5,r5,r6
8110a264:	38c6983a 	sll	r3,r7,r3
8110a268:	29c00017 	ldw	r7,0(r5)
8110a26c:	2a7ffe04 	addi	r9,r5,-8
8110a270:	1886b03a 	or	r3,r3,r2
8110a274:	82400315 	stw	r9,12(r16)
8110a278:	81c00215 	stw	r7,8(r16)
8110a27c:	30c00115 	stw	r3,4(r6)
8110a280:	2c000015 	stw	r16,0(r5)
8110a284:	3c000315 	stw	r16,12(r7)
8110a288:	2005d0ba 	srai	r2,r4,2
8110a28c:	01400044 	movi	r5,1
8110a290:	288a983a 	sll	r5,r5,r2
8110a294:	19406f36 	bltu	r3,r5,8110a454 <_malloc_r+0x324>
8110a298:	28c4703a 	and	r2,r5,r3
8110a29c:	10000a1e 	bne	r2,zero,8110a2c8 <_malloc_r+0x198>
8110a2a0:	00bfff04 	movi	r2,-4
8110a2a4:	294b883a 	add	r5,r5,r5
8110a2a8:	2088703a 	and	r4,r4,r2
8110a2ac:	28c4703a 	and	r2,r5,r3
8110a2b0:	21000104 	addi	r4,r4,4
8110a2b4:	1000041e 	bne	r2,zero,8110a2c8 <_malloc_r+0x198>
8110a2b8:	294b883a 	add	r5,r5,r5
8110a2bc:	28c4703a 	and	r2,r5,r3
8110a2c0:	21000104 	addi	r4,r4,4
8110a2c4:	103ffc26 	beq	r2,zero,8110a2b8 <__reset+0xfb0ea2b8>
8110a2c8:	02bfff04 	movi	r10,-4
8110a2cc:	024003c4 	movi	r9,15
8110a2d0:	21800044 	addi	r6,r4,1
8110a2d4:	318d883a 	add	r6,r6,r6
8110a2d8:	318d883a 	add	r6,r6,r6
8110a2dc:	318d883a 	add	r6,r6,r6
8110a2e0:	998d883a 	add	r6,r19,r6
8110a2e4:	333ffe04 	addi	r12,r6,-8
8110a2e8:	2017883a 	mov	r11,r4
8110a2ec:	31800104 	addi	r6,r6,4
8110a2f0:	34000017 	ldw	r16,0(r6)
8110a2f4:	31fffd04 	addi	r7,r6,-12
8110a2f8:	81c0041e 	bne	r16,r7,8110a30c <_malloc_r+0x1dc>
8110a2fc:	0000fb06 	br	8110a6ec <_malloc_r+0x5bc>
8110a300:	1801030e 	bge	r3,zero,8110a710 <_malloc_r+0x5e0>
8110a304:	84000317 	ldw	r16,12(r16)
8110a308:	81c0f826 	beq	r16,r7,8110a6ec <_malloc_r+0x5bc>
8110a30c:	80800117 	ldw	r2,4(r16)
8110a310:	1284703a 	and	r2,r2,r10
8110a314:	1447c83a 	sub	r3,r2,r17
8110a318:	48fff90e 	bge	r9,r3,8110a300 <__reset+0xfb0ea300>
8110a31c:	80800317 	ldw	r2,12(r16)
8110a320:	81000217 	ldw	r4,8(r16)
8110a324:	89400054 	ori	r5,r17,1
8110a328:	81400115 	stw	r5,4(r16)
8110a32c:	20800315 	stw	r2,12(r4)
8110a330:	11000215 	stw	r4,8(r2)
8110a334:	8463883a 	add	r17,r16,r17
8110a338:	9c400515 	stw	r17,20(r19)
8110a33c:	9c400415 	stw	r17,16(r19)
8110a340:	18800054 	ori	r2,r3,1
8110a344:	88800115 	stw	r2,4(r17)
8110a348:	8a000315 	stw	r8,12(r17)
8110a34c:	8a000215 	stw	r8,8(r17)
8110a350:	88e3883a 	add	r17,r17,r3
8110a354:	88c00015 	stw	r3,0(r17)
8110a358:	9009883a 	mov	r4,r18
8110a35c:	1113ca40 	call	81113ca4 <__malloc_unlock>
8110a360:	80800204 	addi	r2,r16,8
8110a364:	00001b06 	br	8110a3d4 <_malloc_r+0x2a4>
8110a368:	04400404 	movi	r17,16
8110a36c:	89402536 	bltu	r17,r5,8110a404 <_malloc_r+0x2d4>
8110a370:	1113c800 	call	81113c80 <__malloc_lock>
8110a374:	00800184 	movi	r2,6
8110a378:	01000084 	movi	r4,2
8110a37c:	04e044b4 	movhi	r19,33042
8110a380:	1085883a 	add	r2,r2,r2
8110a384:	9ce90004 	addi	r19,r19,-23552
8110a388:	1085883a 	add	r2,r2,r2
8110a38c:	9885883a 	add	r2,r19,r2
8110a390:	14000117 	ldw	r16,4(r2)
8110a394:	10fffe04 	addi	r3,r2,-8
8110a398:	80c0d926 	beq	r16,r3,8110a700 <_malloc_r+0x5d0>
8110a39c:	80c00117 	ldw	r3,4(r16)
8110a3a0:	81000317 	ldw	r4,12(r16)
8110a3a4:	00bfff04 	movi	r2,-4
8110a3a8:	1884703a 	and	r2,r3,r2
8110a3ac:	81400217 	ldw	r5,8(r16)
8110a3b0:	8085883a 	add	r2,r16,r2
8110a3b4:	10c00117 	ldw	r3,4(r2)
8110a3b8:	29000315 	stw	r4,12(r5)
8110a3bc:	21400215 	stw	r5,8(r4)
8110a3c0:	18c00054 	ori	r3,r3,1
8110a3c4:	10c00115 	stw	r3,4(r2)
8110a3c8:	9009883a 	mov	r4,r18
8110a3cc:	1113ca40 	call	81113ca4 <__malloc_unlock>
8110a3d0:	80800204 	addi	r2,r16,8
8110a3d4:	dfc00a17 	ldw	ra,40(sp)
8110a3d8:	df000917 	ldw	fp,36(sp)
8110a3dc:	ddc00817 	ldw	r23,32(sp)
8110a3e0:	dd800717 	ldw	r22,28(sp)
8110a3e4:	dd400617 	ldw	r21,24(sp)
8110a3e8:	dd000517 	ldw	r20,20(sp)
8110a3ec:	dcc00417 	ldw	r19,16(sp)
8110a3f0:	dc800317 	ldw	r18,12(sp)
8110a3f4:	dc400217 	ldw	r17,8(sp)
8110a3f8:	dc000117 	ldw	r16,4(sp)
8110a3fc:	dec00b04 	addi	sp,sp,44
8110a400:	f800283a 	ret
8110a404:	00800304 	movi	r2,12
8110a408:	90800015 	stw	r2,0(r18)
8110a40c:	0005883a 	mov	r2,zero
8110a410:	003ff006 	br	8110a3d4 <__reset+0xfb0ea3d4>
8110a414:	01002004 	movi	r4,128
8110a418:	02001004 	movi	r8,64
8110a41c:	01c00fc4 	movi	r7,63
8110a420:	003f6106 	br	8110a1a8 <__reset+0xfb0ea1a8>
8110a424:	4009883a 	mov	r4,r8
8110a428:	003f7506 	br	8110a200 <__reset+0xfb0ea200>
8110a42c:	81000317 	ldw	r4,12(r16)
8110a430:	003fde06 	br	8110a3ac <__reset+0xfb0ea3ac>
8110a434:	81c5883a 	add	r2,r16,r7
8110a438:	11400117 	ldw	r5,4(r2)
8110a43c:	9009883a 	mov	r4,r18
8110a440:	29400054 	ori	r5,r5,1
8110a444:	11400115 	stw	r5,4(r2)
8110a448:	1113ca40 	call	81113ca4 <__malloc_unlock>
8110a44c:	80800204 	addi	r2,r16,8
8110a450:	003fe006 	br	8110a3d4 <__reset+0xfb0ea3d4>
8110a454:	9c000217 	ldw	r16,8(r19)
8110a458:	00bfff04 	movi	r2,-4
8110a45c:	85800117 	ldw	r22,4(r16)
8110a460:	b0ac703a 	and	r22,r22,r2
8110a464:	b4400336 	bltu	r22,r17,8110a474 <_malloc_r+0x344>
8110a468:	b445c83a 	sub	r2,r22,r17
8110a46c:	00c003c4 	movi	r3,15
8110a470:	18805d16 	blt	r3,r2,8110a5e8 <_malloc_r+0x4b8>
8110a474:	05e044b4 	movhi	r23,33042
8110a478:	00a044b4 	movhi	r2,33042
8110a47c:	10af3004 	addi	r2,r2,-17216
8110a480:	bdef1a04 	addi	r23,r23,-17304
8110a484:	15400017 	ldw	r21,0(r2)
8110a488:	b8c00017 	ldw	r3,0(r23)
8110a48c:	00bfffc4 	movi	r2,-1
8110a490:	858d883a 	add	r6,r16,r22
8110a494:	8d6b883a 	add	r21,r17,r21
8110a498:	1880ea26 	beq	r3,r2,8110a844 <_malloc_r+0x714>
8110a49c:	ad4403c4 	addi	r21,r21,4111
8110a4a0:	00bc0004 	movi	r2,-4096
8110a4a4:	a8aa703a 	and	r21,r21,r2
8110a4a8:	a80b883a 	mov	r5,r21
8110a4ac:	9009883a 	mov	r4,r18
8110a4b0:	d9800015 	stw	r6,0(sp)
8110a4b4:	110c3e00 	call	8110c3e0 <_sbrk_r>
8110a4b8:	1029883a 	mov	r20,r2
8110a4bc:	00bfffc4 	movi	r2,-1
8110a4c0:	d9800017 	ldw	r6,0(sp)
8110a4c4:	a080e826 	beq	r20,r2,8110a868 <_malloc_r+0x738>
8110a4c8:	a180a636 	bltu	r20,r6,8110a764 <_malloc_r+0x634>
8110a4cc:	072044b4 	movhi	fp,33042
8110a4d0:	e72f3d04 	addi	fp,fp,-17164
8110a4d4:	e0800017 	ldw	r2,0(fp)
8110a4d8:	a887883a 	add	r3,r21,r2
8110a4dc:	e0c00015 	stw	r3,0(fp)
8110a4e0:	3500e626 	beq	r6,r20,8110a87c <_malloc_r+0x74c>
8110a4e4:	b9000017 	ldw	r4,0(r23)
8110a4e8:	00bfffc4 	movi	r2,-1
8110a4ec:	2080ee26 	beq	r4,r2,8110a8a8 <_malloc_r+0x778>
8110a4f0:	a185c83a 	sub	r2,r20,r6
8110a4f4:	10c5883a 	add	r2,r2,r3
8110a4f8:	e0800015 	stw	r2,0(fp)
8110a4fc:	a0c001cc 	andi	r3,r20,7
8110a500:	1800bc26 	beq	r3,zero,8110a7f4 <_malloc_r+0x6c4>
8110a504:	a0e9c83a 	sub	r20,r20,r3
8110a508:	00840204 	movi	r2,4104
8110a50c:	a5000204 	addi	r20,r20,8
8110a510:	10c7c83a 	sub	r3,r2,r3
8110a514:	a545883a 	add	r2,r20,r21
8110a518:	1083ffcc 	andi	r2,r2,4095
8110a51c:	18abc83a 	sub	r21,r3,r2
8110a520:	a80b883a 	mov	r5,r21
8110a524:	9009883a 	mov	r4,r18
8110a528:	110c3e00 	call	8110c3e0 <_sbrk_r>
8110a52c:	00ffffc4 	movi	r3,-1
8110a530:	10c0e126 	beq	r2,r3,8110a8b8 <_malloc_r+0x788>
8110a534:	1505c83a 	sub	r2,r2,r20
8110a538:	1545883a 	add	r2,r2,r21
8110a53c:	10800054 	ori	r2,r2,1
8110a540:	e0c00017 	ldw	r3,0(fp)
8110a544:	9d000215 	stw	r20,8(r19)
8110a548:	a0800115 	stw	r2,4(r20)
8110a54c:	a8c7883a 	add	r3,r21,r3
8110a550:	e0c00015 	stw	r3,0(fp)
8110a554:	84c00e26 	beq	r16,r19,8110a590 <_malloc_r+0x460>
8110a558:	018003c4 	movi	r6,15
8110a55c:	3580a72e 	bgeu	r6,r22,8110a7fc <_malloc_r+0x6cc>
8110a560:	81400117 	ldw	r5,4(r16)
8110a564:	013ffe04 	movi	r4,-8
8110a568:	b0bffd04 	addi	r2,r22,-12
8110a56c:	1104703a 	and	r2,r2,r4
8110a570:	2900004c 	andi	r4,r5,1
8110a574:	2088b03a 	or	r4,r4,r2
8110a578:	81000115 	stw	r4,4(r16)
8110a57c:	01400144 	movi	r5,5
8110a580:	8089883a 	add	r4,r16,r2
8110a584:	21400115 	stw	r5,4(r4)
8110a588:	21400215 	stw	r5,8(r4)
8110a58c:	3080cd36 	bltu	r6,r2,8110a8c4 <_malloc_r+0x794>
8110a590:	00a044b4 	movhi	r2,33042
8110a594:	10af2f04 	addi	r2,r2,-17220
8110a598:	11000017 	ldw	r4,0(r2)
8110a59c:	20c0012e 	bgeu	r4,r3,8110a5a4 <_malloc_r+0x474>
8110a5a0:	10c00015 	stw	r3,0(r2)
8110a5a4:	00a044b4 	movhi	r2,33042
8110a5a8:	10af2e04 	addi	r2,r2,-17224
8110a5ac:	11000017 	ldw	r4,0(r2)
8110a5b0:	9c000217 	ldw	r16,8(r19)
8110a5b4:	20c0012e 	bgeu	r4,r3,8110a5bc <_malloc_r+0x48c>
8110a5b8:	10c00015 	stw	r3,0(r2)
8110a5bc:	80c00117 	ldw	r3,4(r16)
8110a5c0:	00bfff04 	movi	r2,-4
8110a5c4:	1886703a 	and	r3,r3,r2
8110a5c8:	1c45c83a 	sub	r2,r3,r17
8110a5cc:	1c400236 	bltu	r3,r17,8110a5d8 <_malloc_r+0x4a8>
8110a5d0:	00c003c4 	movi	r3,15
8110a5d4:	18800416 	blt	r3,r2,8110a5e8 <_malloc_r+0x4b8>
8110a5d8:	9009883a 	mov	r4,r18
8110a5dc:	1113ca40 	call	81113ca4 <__malloc_unlock>
8110a5e0:	0005883a 	mov	r2,zero
8110a5e4:	003f7b06 	br	8110a3d4 <__reset+0xfb0ea3d4>
8110a5e8:	88c00054 	ori	r3,r17,1
8110a5ec:	80c00115 	stw	r3,4(r16)
8110a5f0:	8463883a 	add	r17,r16,r17
8110a5f4:	10800054 	ori	r2,r2,1
8110a5f8:	9c400215 	stw	r17,8(r19)
8110a5fc:	88800115 	stw	r2,4(r17)
8110a600:	9009883a 	mov	r4,r18
8110a604:	1113ca40 	call	81113ca4 <__malloc_unlock>
8110a608:	80800204 	addi	r2,r16,8
8110a60c:	003f7106 	br	8110a3d4 <__reset+0xfb0ea3d4>
8110a610:	00c00504 	movi	r3,20
8110a614:	18804a2e 	bgeu	r3,r2,8110a740 <_malloc_r+0x610>
8110a618:	00c01504 	movi	r3,84
8110a61c:	18806e36 	bltu	r3,r2,8110a7d8 <_malloc_r+0x6a8>
8110a620:	8804d33a 	srli	r2,r17,12
8110a624:	12001bc4 	addi	r8,r2,111
8110a628:	11c01b84 	addi	r7,r2,110
8110a62c:	4209883a 	add	r4,r8,r8
8110a630:	003edd06 	br	8110a1a8 <__reset+0xfb0ea1a8>
8110a634:	3804d27a 	srli	r2,r7,9
8110a638:	00c00104 	movi	r3,4
8110a63c:	1880442e 	bgeu	r3,r2,8110a750 <_malloc_r+0x620>
8110a640:	00c00504 	movi	r3,20
8110a644:	18808136 	bltu	r3,r2,8110a84c <_malloc_r+0x71c>
8110a648:	11401704 	addi	r5,r2,92
8110a64c:	10c016c4 	addi	r3,r2,91
8110a650:	294b883a 	add	r5,r5,r5
8110a654:	294b883a 	add	r5,r5,r5
8110a658:	294b883a 	add	r5,r5,r5
8110a65c:	994b883a 	add	r5,r19,r5
8110a660:	28800017 	ldw	r2,0(r5)
8110a664:	01a044b4 	movhi	r6,33042
8110a668:	297ffe04 	addi	r5,r5,-8
8110a66c:	31a90004 	addi	r6,r6,-23552
8110a670:	28806526 	beq	r5,r2,8110a808 <_malloc_r+0x6d8>
8110a674:	01bfff04 	movi	r6,-4
8110a678:	10c00117 	ldw	r3,4(r2)
8110a67c:	1986703a 	and	r3,r3,r6
8110a680:	38c0022e 	bgeu	r7,r3,8110a68c <_malloc_r+0x55c>
8110a684:	10800217 	ldw	r2,8(r2)
8110a688:	28bffb1e 	bne	r5,r2,8110a678 <__reset+0xfb0ea678>
8110a68c:	11400317 	ldw	r5,12(r2)
8110a690:	98c00117 	ldw	r3,4(r19)
8110a694:	81400315 	stw	r5,12(r16)
8110a698:	80800215 	stw	r2,8(r16)
8110a69c:	2c000215 	stw	r16,8(r5)
8110a6a0:	14000315 	stw	r16,12(r2)
8110a6a4:	003ef806 	br	8110a288 <__reset+0xfb0ea288>
8110a6a8:	88c00054 	ori	r3,r17,1
8110a6ac:	80c00115 	stw	r3,4(r16)
8110a6b0:	8463883a 	add	r17,r16,r17
8110a6b4:	34400515 	stw	r17,20(r6)
8110a6b8:	34400415 	stw	r17,16(r6)
8110a6bc:	10c00054 	ori	r3,r2,1
8110a6c0:	8a000315 	stw	r8,12(r17)
8110a6c4:	8a000215 	stw	r8,8(r17)
8110a6c8:	88c00115 	stw	r3,4(r17)
8110a6cc:	88a3883a 	add	r17,r17,r2
8110a6d0:	88800015 	stw	r2,0(r17)
8110a6d4:	9009883a 	mov	r4,r18
8110a6d8:	1113ca40 	call	81113ca4 <__malloc_unlock>
8110a6dc:	80800204 	addi	r2,r16,8
8110a6e0:	003f3c06 	br	8110a3d4 <__reset+0xfb0ea3d4>
8110a6e4:	30c00117 	ldw	r3,4(r6)
8110a6e8:	003ee706 	br	8110a288 <__reset+0xfb0ea288>
8110a6ec:	5ac00044 	addi	r11,r11,1
8110a6f0:	588000cc 	andi	r2,r11,3
8110a6f4:	31800204 	addi	r6,r6,8
8110a6f8:	103efd1e 	bne	r2,zero,8110a2f0 <__reset+0xfb0ea2f0>
8110a6fc:	00002406 	br	8110a790 <_malloc_r+0x660>
8110a700:	14000317 	ldw	r16,12(r2)
8110a704:	143f251e 	bne	r2,r16,8110a39c <__reset+0xfb0ea39c>
8110a708:	21000084 	addi	r4,r4,2
8110a70c:	003ebc06 	br	8110a200 <__reset+0xfb0ea200>
8110a710:	8085883a 	add	r2,r16,r2
8110a714:	10c00117 	ldw	r3,4(r2)
8110a718:	81000317 	ldw	r4,12(r16)
8110a71c:	81400217 	ldw	r5,8(r16)
8110a720:	18c00054 	ori	r3,r3,1
8110a724:	10c00115 	stw	r3,4(r2)
8110a728:	29000315 	stw	r4,12(r5)
8110a72c:	21400215 	stw	r5,8(r4)
8110a730:	9009883a 	mov	r4,r18
8110a734:	1113ca40 	call	81113ca4 <__malloc_unlock>
8110a738:	80800204 	addi	r2,r16,8
8110a73c:	003f2506 	br	8110a3d4 <__reset+0xfb0ea3d4>
8110a740:	12001704 	addi	r8,r2,92
8110a744:	11c016c4 	addi	r7,r2,91
8110a748:	4209883a 	add	r4,r8,r8
8110a74c:	003e9606 	br	8110a1a8 <__reset+0xfb0ea1a8>
8110a750:	3804d1ba 	srli	r2,r7,6
8110a754:	11400e44 	addi	r5,r2,57
8110a758:	10c00e04 	addi	r3,r2,56
8110a75c:	294b883a 	add	r5,r5,r5
8110a760:	003fbc06 	br	8110a654 <__reset+0xfb0ea654>
8110a764:	84ff5926 	beq	r16,r19,8110a4cc <__reset+0xfb0ea4cc>
8110a768:	00a044b4 	movhi	r2,33042
8110a76c:	10a90004 	addi	r2,r2,-23552
8110a770:	14000217 	ldw	r16,8(r2)
8110a774:	00bfff04 	movi	r2,-4
8110a778:	80c00117 	ldw	r3,4(r16)
8110a77c:	1886703a 	and	r3,r3,r2
8110a780:	003f9106 	br	8110a5c8 <__reset+0xfb0ea5c8>
8110a784:	60800217 	ldw	r2,8(r12)
8110a788:	213fffc4 	addi	r4,r4,-1
8110a78c:	1300651e 	bne	r2,r12,8110a924 <_malloc_r+0x7f4>
8110a790:	208000cc 	andi	r2,r4,3
8110a794:	633ffe04 	addi	r12,r12,-8
8110a798:	103ffa1e 	bne	r2,zero,8110a784 <__reset+0xfb0ea784>
8110a79c:	98800117 	ldw	r2,4(r19)
8110a7a0:	0146303a 	nor	r3,zero,r5
8110a7a4:	1884703a 	and	r2,r3,r2
8110a7a8:	98800115 	stw	r2,4(r19)
8110a7ac:	294b883a 	add	r5,r5,r5
8110a7b0:	117f2836 	bltu	r2,r5,8110a454 <__reset+0xfb0ea454>
8110a7b4:	283f2726 	beq	r5,zero,8110a454 <__reset+0xfb0ea454>
8110a7b8:	2886703a 	and	r3,r5,r2
8110a7bc:	5809883a 	mov	r4,r11
8110a7c0:	183ec31e 	bne	r3,zero,8110a2d0 <__reset+0xfb0ea2d0>
8110a7c4:	294b883a 	add	r5,r5,r5
8110a7c8:	2886703a 	and	r3,r5,r2
8110a7cc:	21000104 	addi	r4,r4,4
8110a7d0:	183ffc26 	beq	r3,zero,8110a7c4 <__reset+0xfb0ea7c4>
8110a7d4:	003ebe06 	br	8110a2d0 <__reset+0xfb0ea2d0>
8110a7d8:	00c05504 	movi	r3,340
8110a7dc:	18801236 	bltu	r3,r2,8110a828 <_malloc_r+0x6f8>
8110a7e0:	8804d3fa 	srli	r2,r17,15
8110a7e4:	12001e04 	addi	r8,r2,120
8110a7e8:	11c01dc4 	addi	r7,r2,119
8110a7ec:	4209883a 	add	r4,r8,r8
8110a7f0:	003e6d06 	br	8110a1a8 <__reset+0xfb0ea1a8>
8110a7f4:	00c40004 	movi	r3,4096
8110a7f8:	003f4606 	br	8110a514 <__reset+0xfb0ea514>
8110a7fc:	00800044 	movi	r2,1
8110a800:	a0800115 	stw	r2,4(r20)
8110a804:	003f7406 	br	8110a5d8 <__reset+0xfb0ea5d8>
8110a808:	1805d0ba 	srai	r2,r3,2
8110a80c:	01c00044 	movi	r7,1
8110a810:	30c00117 	ldw	r3,4(r6)
8110a814:	388e983a 	sll	r7,r7,r2
8110a818:	2805883a 	mov	r2,r5
8110a81c:	38c6b03a 	or	r3,r7,r3
8110a820:	30c00115 	stw	r3,4(r6)
8110a824:	003f9b06 	br	8110a694 <__reset+0xfb0ea694>
8110a828:	00c15504 	movi	r3,1364
8110a82c:	18801a36 	bltu	r3,r2,8110a898 <_malloc_r+0x768>
8110a830:	8804d4ba 	srli	r2,r17,18
8110a834:	12001f44 	addi	r8,r2,125
8110a838:	11c01f04 	addi	r7,r2,124
8110a83c:	4209883a 	add	r4,r8,r8
8110a840:	003e5906 	br	8110a1a8 <__reset+0xfb0ea1a8>
8110a844:	ad400404 	addi	r21,r21,16
8110a848:	003f1706 	br	8110a4a8 <__reset+0xfb0ea4a8>
8110a84c:	00c01504 	movi	r3,84
8110a850:	18802336 	bltu	r3,r2,8110a8e0 <_malloc_r+0x7b0>
8110a854:	3804d33a 	srli	r2,r7,12
8110a858:	11401bc4 	addi	r5,r2,111
8110a85c:	10c01b84 	addi	r3,r2,110
8110a860:	294b883a 	add	r5,r5,r5
8110a864:	003f7b06 	br	8110a654 <__reset+0xfb0ea654>
8110a868:	9c000217 	ldw	r16,8(r19)
8110a86c:	00bfff04 	movi	r2,-4
8110a870:	80c00117 	ldw	r3,4(r16)
8110a874:	1886703a 	and	r3,r3,r2
8110a878:	003f5306 	br	8110a5c8 <__reset+0xfb0ea5c8>
8110a87c:	3083ffcc 	andi	r2,r6,4095
8110a880:	103f181e 	bne	r2,zero,8110a4e4 <__reset+0xfb0ea4e4>
8110a884:	99000217 	ldw	r4,8(r19)
8110a888:	b545883a 	add	r2,r22,r21
8110a88c:	10800054 	ori	r2,r2,1
8110a890:	20800115 	stw	r2,4(r4)
8110a894:	003f3e06 	br	8110a590 <__reset+0xfb0ea590>
8110a898:	01003f84 	movi	r4,254
8110a89c:	02001fc4 	movi	r8,127
8110a8a0:	01c01f84 	movi	r7,126
8110a8a4:	003e4006 	br	8110a1a8 <__reset+0xfb0ea1a8>
8110a8a8:	00a044b4 	movhi	r2,33042
8110a8ac:	10af1a04 	addi	r2,r2,-17304
8110a8b0:	15000015 	stw	r20,0(r2)
8110a8b4:	003f1106 	br	8110a4fc <__reset+0xfb0ea4fc>
8110a8b8:	00800044 	movi	r2,1
8110a8bc:	002b883a 	mov	r21,zero
8110a8c0:	003f1f06 	br	8110a540 <__reset+0xfb0ea540>
8110a8c4:	81400204 	addi	r5,r16,8
8110a8c8:	9009883a 	mov	r4,r18
8110a8cc:	11095440 	call	81109544 <_free_r>
8110a8d0:	00a044b4 	movhi	r2,33042
8110a8d4:	10af3d04 	addi	r2,r2,-17164
8110a8d8:	10c00017 	ldw	r3,0(r2)
8110a8dc:	003f2c06 	br	8110a590 <__reset+0xfb0ea590>
8110a8e0:	00c05504 	movi	r3,340
8110a8e4:	18800536 	bltu	r3,r2,8110a8fc <_malloc_r+0x7cc>
8110a8e8:	3804d3fa 	srli	r2,r7,15
8110a8ec:	11401e04 	addi	r5,r2,120
8110a8f0:	10c01dc4 	addi	r3,r2,119
8110a8f4:	294b883a 	add	r5,r5,r5
8110a8f8:	003f5606 	br	8110a654 <__reset+0xfb0ea654>
8110a8fc:	00c15504 	movi	r3,1364
8110a900:	18800536 	bltu	r3,r2,8110a918 <_malloc_r+0x7e8>
8110a904:	3804d4ba 	srli	r2,r7,18
8110a908:	11401f44 	addi	r5,r2,125
8110a90c:	10c01f04 	addi	r3,r2,124
8110a910:	294b883a 	add	r5,r5,r5
8110a914:	003f4f06 	br	8110a654 <__reset+0xfb0ea654>
8110a918:	01403f84 	movi	r5,254
8110a91c:	00c01f84 	movi	r3,126
8110a920:	003f4c06 	br	8110a654 <__reset+0xfb0ea654>
8110a924:	98800117 	ldw	r2,4(r19)
8110a928:	003fa006 	br	8110a7ac <__reset+0xfb0ea7ac>
8110a92c:	8808d0fa 	srli	r4,r17,3
8110a930:	20800044 	addi	r2,r4,1
8110a934:	1085883a 	add	r2,r2,r2
8110a938:	003e9006 	br	8110a37c <__reset+0xfb0ea37c>

8110a93c <memchr>:
8110a93c:	208000cc 	andi	r2,r4,3
8110a940:	280f883a 	mov	r7,r5
8110a944:	10003426 	beq	r2,zero,8110aa18 <memchr+0xdc>
8110a948:	30bfffc4 	addi	r2,r6,-1
8110a94c:	30001a26 	beq	r6,zero,8110a9b8 <memchr+0x7c>
8110a950:	20c00003 	ldbu	r3,0(r4)
8110a954:	29803fcc 	andi	r6,r5,255
8110a958:	30c0051e 	bne	r6,r3,8110a970 <memchr+0x34>
8110a95c:	00001806 	br	8110a9c0 <memchr+0x84>
8110a960:	10001526 	beq	r2,zero,8110a9b8 <memchr+0x7c>
8110a964:	20c00003 	ldbu	r3,0(r4)
8110a968:	10bfffc4 	addi	r2,r2,-1
8110a96c:	30c01426 	beq	r6,r3,8110a9c0 <memchr+0x84>
8110a970:	21000044 	addi	r4,r4,1
8110a974:	20c000cc 	andi	r3,r4,3
8110a978:	183ff91e 	bne	r3,zero,8110a960 <__reset+0xfb0ea960>
8110a97c:	020000c4 	movi	r8,3
8110a980:	40801136 	bltu	r8,r2,8110a9c8 <memchr+0x8c>
8110a984:	10000c26 	beq	r2,zero,8110a9b8 <memchr+0x7c>
8110a988:	20c00003 	ldbu	r3,0(r4)
8110a98c:	29403fcc 	andi	r5,r5,255
8110a990:	28c00b26 	beq	r5,r3,8110a9c0 <memchr+0x84>
8110a994:	20c00044 	addi	r3,r4,1
8110a998:	39803fcc 	andi	r6,r7,255
8110a99c:	2089883a 	add	r4,r4,r2
8110a9a0:	00000306 	br	8110a9b0 <memchr+0x74>
8110a9a4:	18c00044 	addi	r3,r3,1
8110a9a8:	197fffc3 	ldbu	r5,-1(r3)
8110a9ac:	31400526 	beq	r6,r5,8110a9c4 <memchr+0x88>
8110a9b0:	1805883a 	mov	r2,r3
8110a9b4:	20fffb1e 	bne	r4,r3,8110a9a4 <__reset+0xfb0ea9a4>
8110a9b8:	0005883a 	mov	r2,zero
8110a9bc:	f800283a 	ret
8110a9c0:	2005883a 	mov	r2,r4
8110a9c4:	f800283a 	ret
8110a9c8:	28c03fcc 	andi	r3,r5,255
8110a9cc:	1812923a 	slli	r9,r3,8
8110a9d0:	02ffbff4 	movhi	r11,65279
8110a9d4:	02a02074 	movhi	r10,32897
8110a9d8:	48d2b03a 	or	r9,r9,r3
8110a9dc:	4806943a 	slli	r3,r9,16
8110a9e0:	5affbfc4 	addi	r11,r11,-257
8110a9e4:	52a02004 	addi	r10,r10,-32640
8110a9e8:	48d2b03a 	or	r9,r9,r3
8110a9ec:	20c00017 	ldw	r3,0(r4)
8110a9f0:	48c6f03a 	xor	r3,r9,r3
8110a9f4:	1acd883a 	add	r6,r3,r11
8110a9f8:	00c6303a 	nor	r3,zero,r3
8110a9fc:	30c6703a 	and	r3,r6,r3
8110aa00:	1a86703a 	and	r3,r3,r10
8110aa04:	183fe01e 	bne	r3,zero,8110a988 <__reset+0xfb0ea988>
8110aa08:	10bfff04 	addi	r2,r2,-4
8110aa0c:	21000104 	addi	r4,r4,4
8110aa10:	40bff636 	bltu	r8,r2,8110a9ec <__reset+0xfb0ea9ec>
8110aa14:	003fdb06 	br	8110a984 <__reset+0xfb0ea984>
8110aa18:	3005883a 	mov	r2,r6
8110aa1c:	003fd706 	br	8110a97c <__reset+0xfb0ea97c>

8110aa20 <memmove>:
8110aa20:	2005883a 	mov	r2,r4
8110aa24:	29000b2e 	bgeu	r5,r4,8110aa54 <memmove+0x34>
8110aa28:	298f883a 	add	r7,r5,r6
8110aa2c:	21c0092e 	bgeu	r4,r7,8110aa54 <memmove+0x34>
8110aa30:	2187883a 	add	r3,r4,r6
8110aa34:	198bc83a 	sub	r5,r3,r6
8110aa38:	30004826 	beq	r6,zero,8110ab5c <memmove+0x13c>
8110aa3c:	39ffffc4 	addi	r7,r7,-1
8110aa40:	39000003 	ldbu	r4,0(r7)
8110aa44:	18ffffc4 	addi	r3,r3,-1
8110aa48:	19000005 	stb	r4,0(r3)
8110aa4c:	28fffb1e 	bne	r5,r3,8110aa3c <__reset+0xfb0eaa3c>
8110aa50:	f800283a 	ret
8110aa54:	00c003c4 	movi	r3,15
8110aa58:	1980412e 	bgeu	r3,r6,8110ab60 <memmove+0x140>
8110aa5c:	2886b03a 	or	r3,r5,r2
8110aa60:	18c000cc 	andi	r3,r3,3
8110aa64:	1800401e 	bne	r3,zero,8110ab68 <memmove+0x148>
8110aa68:	33fffc04 	addi	r15,r6,-16
8110aa6c:	781ed13a 	srli	r15,r15,4
8110aa70:	28c00104 	addi	r3,r5,4
8110aa74:	13400104 	addi	r13,r2,4
8110aa78:	781c913a 	slli	r14,r15,4
8110aa7c:	2b000204 	addi	r12,r5,8
8110aa80:	12c00204 	addi	r11,r2,8
8110aa84:	73800504 	addi	r14,r14,20
8110aa88:	2a800304 	addi	r10,r5,12
8110aa8c:	12400304 	addi	r9,r2,12
8110aa90:	2b9d883a 	add	r14,r5,r14
8110aa94:	2811883a 	mov	r8,r5
8110aa98:	100f883a 	mov	r7,r2
8110aa9c:	41000017 	ldw	r4,0(r8)
8110aaa0:	39c00404 	addi	r7,r7,16
8110aaa4:	18c00404 	addi	r3,r3,16
8110aaa8:	393ffc15 	stw	r4,-16(r7)
8110aaac:	193ffc17 	ldw	r4,-16(r3)
8110aab0:	6b400404 	addi	r13,r13,16
8110aab4:	5ac00404 	addi	r11,r11,16
8110aab8:	693ffc15 	stw	r4,-16(r13)
8110aabc:	61000017 	ldw	r4,0(r12)
8110aac0:	4a400404 	addi	r9,r9,16
8110aac4:	42000404 	addi	r8,r8,16
8110aac8:	593ffc15 	stw	r4,-16(r11)
8110aacc:	51000017 	ldw	r4,0(r10)
8110aad0:	63000404 	addi	r12,r12,16
8110aad4:	52800404 	addi	r10,r10,16
8110aad8:	493ffc15 	stw	r4,-16(r9)
8110aadc:	1bbfef1e 	bne	r3,r14,8110aa9c <__reset+0xfb0eaa9c>
8110aae0:	79000044 	addi	r4,r15,1
8110aae4:	2008913a 	slli	r4,r4,4
8110aae8:	328003cc 	andi	r10,r6,15
8110aaec:	02c000c4 	movi	r11,3
8110aaf0:	1107883a 	add	r3,r2,r4
8110aaf4:	290b883a 	add	r5,r5,r4
8110aaf8:	5a801e2e 	bgeu	r11,r10,8110ab74 <memmove+0x154>
8110aafc:	1813883a 	mov	r9,r3
8110ab00:	2811883a 	mov	r8,r5
8110ab04:	500f883a 	mov	r7,r10
8110ab08:	41000017 	ldw	r4,0(r8)
8110ab0c:	4a400104 	addi	r9,r9,4
8110ab10:	39ffff04 	addi	r7,r7,-4
8110ab14:	493fff15 	stw	r4,-4(r9)
8110ab18:	42000104 	addi	r8,r8,4
8110ab1c:	59fffa36 	bltu	r11,r7,8110ab08 <__reset+0xfb0eab08>
8110ab20:	513fff04 	addi	r4,r10,-4
8110ab24:	2008d0ba 	srli	r4,r4,2
8110ab28:	318000cc 	andi	r6,r6,3
8110ab2c:	21000044 	addi	r4,r4,1
8110ab30:	2109883a 	add	r4,r4,r4
8110ab34:	2109883a 	add	r4,r4,r4
8110ab38:	1907883a 	add	r3,r3,r4
8110ab3c:	290b883a 	add	r5,r5,r4
8110ab40:	30000b26 	beq	r6,zero,8110ab70 <memmove+0x150>
8110ab44:	198d883a 	add	r6,r3,r6
8110ab48:	29c00003 	ldbu	r7,0(r5)
8110ab4c:	18c00044 	addi	r3,r3,1
8110ab50:	29400044 	addi	r5,r5,1
8110ab54:	19ffffc5 	stb	r7,-1(r3)
8110ab58:	19bffb1e 	bne	r3,r6,8110ab48 <__reset+0xfb0eab48>
8110ab5c:	f800283a 	ret
8110ab60:	1007883a 	mov	r3,r2
8110ab64:	003ff606 	br	8110ab40 <__reset+0xfb0eab40>
8110ab68:	1007883a 	mov	r3,r2
8110ab6c:	003ff506 	br	8110ab44 <__reset+0xfb0eab44>
8110ab70:	f800283a 	ret
8110ab74:	500d883a 	mov	r6,r10
8110ab78:	003ff106 	br	8110ab40 <__reset+0xfb0eab40>

8110ab7c <memset>:
8110ab7c:	20c000cc 	andi	r3,r4,3
8110ab80:	2005883a 	mov	r2,r4
8110ab84:	18004426 	beq	r3,zero,8110ac98 <memset+0x11c>
8110ab88:	31ffffc4 	addi	r7,r6,-1
8110ab8c:	30004026 	beq	r6,zero,8110ac90 <memset+0x114>
8110ab90:	2813883a 	mov	r9,r5
8110ab94:	200d883a 	mov	r6,r4
8110ab98:	2007883a 	mov	r3,r4
8110ab9c:	00000406 	br	8110abb0 <memset+0x34>
8110aba0:	3a3fffc4 	addi	r8,r7,-1
8110aba4:	31800044 	addi	r6,r6,1
8110aba8:	38003926 	beq	r7,zero,8110ac90 <memset+0x114>
8110abac:	400f883a 	mov	r7,r8
8110abb0:	18c00044 	addi	r3,r3,1
8110abb4:	32400005 	stb	r9,0(r6)
8110abb8:	1a0000cc 	andi	r8,r3,3
8110abbc:	403ff81e 	bne	r8,zero,8110aba0 <__reset+0xfb0eaba0>
8110abc0:	010000c4 	movi	r4,3
8110abc4:	21c02d2e 	bgeu	r4,r7,8110ac7c <memset+0x100>
8110abc8:	29003fcc 	andi	r4,r5,255
8110abcc:	200c923a 	slli	r6,r4,8
8110abd0:	3108b03a 	or	r4,r6,r4
8110abd4:	200c943a 	slli	r6,r4,16
8110abd8:	218cb03a 	or	r6,r4,r6
8110abdc:	010003c4 	movi	r4,15
8110abe0:	21c0182e 	bgeu	r4,r7,8110ac44 <memset+0xc8>
8110abe4:	3b3ffc04 	addi	r12,r7,-16
8110abe8:	6018d13a 	srli	r12,r12,4
8110abec:	1a000104 	addi	r8,r3,4
8110abf0:	1ac00204 	addi	r11,r3,8
8110abf4:	6008913a 	slli	r4,r12,4
8110abf8:	1a800304 	addi	r10,r3,12
8110abfc:	1813883a 	mov	r9,r3
8110ac00:	21000504 	addi	r4,r4,20
8110ac04:	1909883a 	add	r4,r3,r4
8110ac08:	49800015 	stw	r6,0(r9)
8110ac0c:	41800015 	stw	r6,0(r8)
8110ac10:	59800015 	stw	r6,0(r11)
8110ac14:	51800015 	stw	r6,0(r10)
8110ac18:	42000404 	addi	r8,r8,16
8110ac1c:	4a400404 	addi	r9,r9,16
8110ac20:	5ac00404 	addi	r11,r11,16
8110ac24:	52800404 	addi	r10,r10,16
8110ac28:	413ff71e 	bne	r8,r4,8110ac08 <__reset+0xfb0eac08>
8110ac2c:	63000044 	addi	r12,r12,1
8110ac30:	6018913a 	slli	r12,r12,4
8110ac34:	39c003cc 	andi	r7,r7,15
8110ac38:	010000c4 	movi	r4,3
8110ac3c:	1b07883a 	add	r3,r3,r12
8110ac40:	21c00e2e 	bgeu	r4,r7,8110ac7c <memset+0x100>
8110ac44:	1813883a 	mov	r9,r3
8110ac48:	3811883a 	mov	r8,r7
8110ac4c:	010000c4 	movi	r4,3
8110ac50:	49800015 	stw	r6,0(r9)
8110ac54:	423fff04 	addi	r8,r8,-4
8110ac58:	4a400104 	addi	r9,r9,4
8110ac5c:	223ffc36 	bltu	r4,r8,8110ac50 <__reset+0xfb0eac50>
8110ac60:	393fff04 	addi	r4,r7,-4
8110ac64:	2008d0ba 	srli	r4,r4,2
8110ac68:	39c000cc 	andi	r7,r7,3
8110ac6c:	21000044 	addi	r4,r4,1
8110ac70:	2109883a 	add	r4,r4,r4
8110ac74:	2109883a 	add	r4,r4,r4
8110ac78:	1907883a 	add	r3,r3,r4
8110ac7c:	38000526 	beq	r7,zero,8110ac94 <memset+0x118>
8110ac80:	19cf883a 	add	r7,r3,r7
8110ac84:	19400005 	stb	r5,0(r3)
8110ac88:	18c00044 	addi	r3,r3,1
8110ac8c:	38fffd1e 	bne	r7,r3,8110ac84 <__reset+0xfb0eac84>
8110ac90:	f800283a 	ret
8110ac94:	f800283a 	ret
8110ac98:	2007883a 	mov	r3,r4
8110ac9c:	300f883a 	mov	r7,r6
8110aca0:	003fc706 	br	8110abc0 <__reset+0xfb0eabc0>

8110aca4 <_Balloc>:
8110aca4:	20801317 	ldw	r2,76(r4)
8110aca8:	defffc04 	addi	sp,sp,-16
8110acac:	dc400115 	stw	r17,4(sp)
8110acb0:	dc000015 	stw	r16,0(sp)
8110acb4:	dfc00315 	stw	ra,12(sp)
8110acb8:	dc800215 	stw	r18,8(sp)
8110acbc:	2023883a 	mov	r17,r4
8110acc0:	2821883a 	mov	r16,r5
8110acc4:	10000f26 	beq	r2,zero,8110ad04 <_Balloc+0x60>
8110acc8:	8407883a 	add	r3,r16,r16
8110accc:	18c7883a 	add	r3,r3,r3
8110acd0:	10c7883a 	add	r3,r2,r3
8110acd4:	18800017 	ldw	r2,0(r3)
8110acd8:	10001126 	beq	r2,zero,8110ad20 <_Balloc+0x7c>
8110acdc:	11000017 	ldw	r4,0(r2)
8110ace0:	19000015 	stw	r4,0(r3)
8110ace4:	10000415 	stw	zero,16(r2)
8110ace8:	10000315 	stw	zero,12(r2)
8110acec:	dfc00317 	ldw	ra,12(sp)
8110acf0:	dc800217 	ldw	r18,8(sp)
8110acf4:	dc400117 	ldw	r17,4(sp)
8110acf8:	dc000017 	ldw	r16,0(sp)
8110acfc:	dec00404 	addi	sp,sp,16
8110ad00:	f800283a 	ret
8110ad04:	01800844 	movi	r6,33
8110ad08:	01400104 	movi	r5,4
8110ad0c:	110f2ac0 	call	8110f2ac <_calloc_r>
8110ad10:	88801315 	stw	r2,76(r17)
8110ad14:	103fec1e 	bne	r2,zero,8110acc8 <__reset+0xfb0eacc8>
8110ad18:	0005883a 	mov	r2,zero
8110ad1c:	003ff306 	br	8110acec <__reset+0xfb0eacec>
8110ad20:	01400044 	movi	r5,1
8110ad24:	2c24983a 	sll	r18,r5,r16
8110ad28:	8809883a 	mov	r4,r17
8110ad2c:	91800144 	addi	r6,r18,5
8110ad30:	318d883a 	add	r6,r6,r6
8110ad34:	318d883a 	add	r6,r6,r6
8110ad38:	110f2ac0 	call	8110f2ac <_calloc_r>
8110ad3c:	103ff626 	beq	r2,zero,8110ad18 <__reset+0xfb0ead18>
8110ad40:	14000115 	stw	r16,4(r2)
8110ad44:	14800215 	stw	r18,8(r2)
8110ad48:	003fe606 	br	8110ace4 <__reset+0xfb0eace4>

8110ad4c <_Bfree>:
8110ad4c:	28000826 	beq	r5,zero,8110ad70 <_Bfree+0x24>
8110ad50:	28c00117 	ldw	r3,4(r5)
8110ad54:	20801317 	ldw	r2,76(r4)
8110ad58:	18c7883a 	add	r3,r3,r3
8110ad5c:	18c7883a 	add	r3,r3,r3
8110ad60:	10c5883a 	add	r2,r2,r3
8110ad64:	10c00017 	ldw	r3,0(r2)
8110ad68:	28c00015 	stw	r3,0(r5)
8110ad6c:	11400015 	stw	r5,0(r2)
8110ad70:	f800283a 	ret

8110ad74 <__multadd>:
8110ad74:	defffa04 	addi	sp,sp,-24
8110ad78:	dc800315 	stw	r18,12(sp)
8110ad7c:	dc400215 	stw	r17,8(sp)
8110ad80:	dc000115 	stw	r16,4(sp)
8110ad84:	2823883a 	mov	r17,r5
8110ad88:	2c000417 	ldw	r16,16(r5)
8110ad8c:	dfc00515 	stw	ra,20(sp)
8110ad90:	dcc00415 	stw	r19,16(sp)
8110ad94:	2025883a 	mov	r18,r4
8110ad98:	29400504 	addi	r5,r5,20
8110ad9c:	0011883a 	mov	r8,zero
8110ada0:	28c00017 	ldw	r3,0(r5)
8110ada4:	29400104 	addi	r5,r5,4
8110ada8:	42000044 	addi	r8,r8,1
8110adac:	18bfffcc 	andi	r2,r3,65535
8110adb0:	1185383a 	mul	r2,r2,r6
8110adb4:	1806d43a 	srli	r3,r3,16
8110adb8:	11cf883a 	add	r7,r2,r7
8110adbc:	3808d43a 	srli	r4,r7,16
8110adc0:	1987383a 	mul	r3,r3,r6
8110adc4:	38bfffcc 	andi	r2,r7,65535
8110adc8:	1907883a 	add	r3,r3,r4
8110adcc:	1808943a 	slli	r4,r3,16
8110add0:	180ed43a 	srli	r7,r3,16
8110add4:	2085883a 	add	r2,r4,r2
8110add8:	28bfff15 	stw	r2,-4(r5)
8110addc:	443ff016 	blt	r8,r16,8110ada0 <__reset+0xfb0eada0>
8110ade0:	38000926 	beq	r7,zero,8110ae08 <__multadd+0x94>
8110ade4:	88800217 	ldw	r2,8(r17)
8110ade8:	80800f0e 	bge	r16,r2,8110ae28 <__multadd+0xb4>
8110adec:	80800144 	addi	r2,r16,5
8110adf0:	1085883a 	add	r2,r2,r2
8110adf4:	1085883a 	add	r2,r2,r2
8110adf8:	8885883a 	add	r2,r17,r2
8110adfc:	11c00015 	stw	r7,0(r2)
8110ae00:	84000044 	addi	r16,r16,1
8110ae04:	8c000415 	stw	r16,16(r17)
8110ae08:	8805883a 	mov	r2,r17
8110ae0c:	dfc00517 	ldw	ra,20(sp)
8110ae10:	dcc00417 	ldw	r19,16(sp)
8110ae14:	dc800317 	ldw	r18,12(sp)
8110ae18:	dc400217 	ldw	r17,8(sp)
8110ae1c:	dc000117 	ldw	r16,4(sp)
8110ae20:	dec00604 	addi	sp,sp,24
8110ae24:	f800283a 	ret
8110ae28:	89400117 	ldw	r5,4(r17)
8110ae2c:	9009883a 	mov	r4,r18
8110ae30:	d9c00015 	stw	r7,0(sp)
8110ae34:	29400044 	addi	r5,r5,1
8110ae38:	110aca40 	call	8110aca4 <_Balloc>
8110ae3c:	89800417 	ldw	r6,16(r17)
8110ae40:	89400304 	addi	r5,r17,12
8110ae44:	11000304 	addi	r4,r2,12
8110ae48:	31800084 	addi	r6,r6,2
8110ae4c:	318d883a 	add	r6,r6,r6
8110ae50:	318d883a 	add	r6,r6,r6
8110ae54:	1027883a 	mov	r19,r2
8110ae58:	1102b500 	call	81102b50 <memcpy>
8110ae5c:	d9c00017 	ldw	r7,0(sp)
8110ae60:	88000a26 	beq	r17,zero,8110ae8c <__multadd+0x118>
8110ae64:	88c00117 	ldw	r3,4(r17)
8110ae68:	90801317 	ldw	r2,76(r18)
8110ae6c:	18c7883a 	add	r3,r3,r3
8110ae70:	18c7883a 	add	r3,r3,r3
8110ae74:	10c5883a 	add	r2,r2,r3
8110ae78:	10c00017 	ldw	r3,0(r2)
8110ae7c:	88c00015 	stw	r3,0(r17)
8110ae80:	14400015 	stw	r17,0(r2)
8110ae84:	9823883a 	mov	r17,r19
8110ae88:	003fd806 	br	8110adec <__reset+0xfb0eadec>
8110ae8c:	9823883a 	mov	r17,r19
8110ae90:	003fd606 	br	8110adec <__reset+0xfb0eadec>

8110ae94 <__s2b>:
8110ae94:	defff904 	addi	sp,sp,-28
8110ae98:	dc400115 	stw	r17,4(sp)
8110ae9c:	dc000015 	stw	r16,0(sp)
8110aea0:	2023883a 	mov	r17,r4
8110aea4:	2821883a 	mov	r16,r5
8110aea8:	39000204 	addi	r4,r7,8
8110aeac:	01400244 	movi	r5,9
8110aeb0:	dcc00315 	stw	r19,12(sp)
8110aeb4:	dc800215 	stw	r18,8(sp)
8110aeb8:	dfc00615 	stw	ra,24(sp)
8110aebc:	dd400515 	stw	r21,20(sp)
8110aec0:	dd000415 	stw	r20,16(sp)
8110aec4:	3825883a 	mov	r18,r7
8110aec8:	3027883a 	mov	r19,r6
8110aecc:	11104840 	call	81110484 <__divsi3>
8110aed0:	00c00044 	movi	r3,1
8110aed4:	000b883a 	mov	r5,zero
8110aed8:	1880030e 	bge	r3,r2,8110aee8 <__s2b+0x54>
8110aedc:	18c7883a 	add	r3,r3,r3
8110aee0:	29400044 	addi	r5,r5,1
8110aee4:	18bffd16 	blt	r3,r2,8110aedc <__reset+0xfb0eaedc>
8110aee8:	8809883a 	mov	r4,r17
8110aeec:	110aca40 	call	8110aca4 <_Balloc>
8110aef0:	d8c00717 	ldw	r3,28(sp)
8110aef4:	10c00515 	stw	r3,20(r2)
8110aef8:	00c00044 	movi	r3,1
8110aefc:	10c00415 	stw	r3,16(r2)
8110af00:	00c00244 	movi	r3,9
8110af04:	1cc0210e 	bge	r3,r19,8110af8c <__s2b+0xf8>
8110af08:	80eb883a 	add	r21,r16,r3
8110af0c:	a829883a 	mov	r20,r21
8110af10:	84e1883a 	add	r16,r16,r19
8110af14:	a1c00007 	ldb	r7,0(r20)
8110af18:	01800284 	movi	r6,10
8110af1c:	a5000044 	addi	r20,r20,1
8110af20:	100b883a 	mov	r5,r2
8110af24:	39fff404 	addi	r7,r7,-48
8110af28:	8809883a 	mov	r4,r17
8110af2c:	110ad740 	call	8110ad74 <__multadd>
8110af30:	a43ff81e 	bne	r20,r16,8110af14 <__reset+0xfb0eaf14>
8110af34:	ace1883a 	add	r16,r21,r19
8110af38:	843ffe04 	addi	r16,r16,-8
8110af3c:	9c800a0e 	bge	r19,r18,8110af68 <__s2b+0xd4>
8110af40:	94e5c83a 	sub	r18,r18,r19
8110af44:	84a5883a 	add	r18,r16,r18
8110af48:	81c00007 	ldb	r7,0(r16)
8110af4c:	01800284 	movi	r6,10
8110af50:	84000044 	addi	r16,r16,1
8110af54:	100b883a 	mov	r5,r2
8110af58:	39fff404 	addi	r7,r7,-48
8110af5c:	8809883a 	mov	r4,r17
8110af60:	110ad740 	call	8110ad74 <__multadd>
8110af64:	84bff81e 	bne	r16,r18,8110af48 <__reset+0xfb0eaf48>
8110af68:	dfc00617 	ldw	ra,24(sp)
8110af6c:	dd400517 	ldw	r21,20(sp)
8110af70:	dd000417 	ldw	r20,16(sp)
8110af74:	dcc00317 	ldw	r19,12(sp)
8110af78:	dc800217 	ldw	r18,8(sp)
8110af7c:	dc400117 	ldw	r17,4(sp)
8110af80:	dc000017 	ldw	r16,0(sp)
8110af84:	dec00704 	addi	sp,sp,28
8110af88:	f800283a 	ret
8110af8c:	84000284 	addi	r16,r16,10
8110af90:	1827883a 	mov	r19,r3
8110af94:	003fe906 	br	8110af3c <__reset+0xfb0eaf3c>

8110af98 <__hi0bits>:
8110af98:	20bfffec 	andhi	r2,r4,65535
8110af9c:	1000141e 	bne	r2,zero,8110aff0 <__hi0bits+0x58>
8110afa0:	2008943a 	slli	r4,r4,16
8110afa4:	00800404 	movi	r2,16
8110afa8:	20ffc02c 	andhi	r3,r4,65280
8110afac:	1800021e 	bne	r3,zero,8110afb8 <__hi0bits+0x20>
8110afb0:	2008923a 	slli	r4,r4,8
8110afb4:	10800204 	addi	r2,r2,8
8110afb8:	20fc002c 	andhi	r3,r4,61440
8110afbc:	1800021e 	bne	r3,zero,8110afc8 <__hi0bits+0x30>
8110afc0:	2008913a 	slli	r4,r4,4
8110afc4:	10800104 	addi	r2,r2,4
8110afc8:	20f0002c 	andhi	r3,r4,49152
8110afcc:	1800031e 	bne	r3,zero,8110afdc <__hi0bits+0x44>
8110afd0:	2109883a 	add	r4,r4,r4
8110afd4:	10800084 	addi	r2,r2,2
8110afd8:	2109883a 	add	r4,r4,r4
8110afdc:	20000316 	blt	r4,zero,8110afec <__hi0bits+0x54>
8110afe0:	2110002c 	andhi	r4,r4,16384
8110afe4:	2000041e 	bne	r4,zero,8110aff8 <__hi0bits+0x60>
8110afe8:	00800804 	movi	r2,32
8110afec:	f800283a 	ret
8110aff0:	0005883a 	mov	r2,zero
8110aff4:	003fec06 	br	8110afa8 <__reset+0xfb0eafa8>
8110aff8:	10800044 	addi	r2,r2,1
8110affc:	f800283a 	ret

8110b000 <__lo0bits>:
8110b000:	20c00017 	ldw	r3,0(r4)
8110b004:	188001cc 	andi	r2,r3,7
8110b008:	10000826 	beq	r2,zero,8110b02c <__lo0bits+0x2c>
8110b00c:	1880004c 	andi	r2,r3,1
8110b010:	1000211e 	bne	r2,zero,8110b098 <__lo0bits+0x98>
8110b014:	1880008c 	andi	r2,r3,2
8110b018:	1000211e 	bne	r2,zero,8110b0a0 <__lo0bits+0xa0>
8110b01c:	1806d0ba 	srli	r3,r3,2
8110b020:	00800084 	movi	r2,2
8110b024:	20c00015 	stw	r3,0(r4)
8110b028:	f800283a 	ret
8110b02c:	18bfffcc 	andi	r2,r3,65535
8110b030:	10001326 	beq	r2,zero,8110b080 <__lo0bits+0x80>
8110b034:	0005883a 	mov	r2,zero
8110b038:	19403fcc 	andi	r5,r3,255
8110b03c:	2800021e 	bne	r5,zero,8110b048 <__lo0bits+0x48>
8110b040:	1806d23a 	srli	r3,r3,8
8110b044:	10800204 	addi	r2,r2,8
8110b048:	194003cc 	andi	r5,r3,15
8110b04c:	2800021e 	bne	r5,zero,8110b058 <__lo0bits+0x58>
8110b050:	1806d13a 	srli	r3,r3,4
8110b054:	10800104 	addi	r2,r2,4
8110b058:	194000cc 	andi	r5,r3,3
8110b05c:	2800021e 	bne	r5,zero,8110b068 <__lo0bits+0x68>
8110b060:	1806d0ba 	srli	r3,r3,2
8110b064:	10800084 	addi	r2,r2,2
8110b068:	1940004c 	andi	r5,r3,1
8110b06c:	2800081e 	bne	r5,zero,8110b090 <__lo0bits+0x90>
8110b070:	1806d07a 	srli	r3,r3,1
8110b074:	1800051e 	bne	r3,zero,8110b08c <__lo0bits+0x8c>
8110b078:	00800804 	movi	r2,32
8110b07c:	f800283a 	ret
8110b080:	1806d43a 	srli	r3,r3,16
8110b084:	00800404 	movi	r2,16
8110b088:	003feb06 	br	8110b038 <__reset+0xfb0eb038>
8110b08c:	10800044 	addi	r2,r2,1
8110b090:	20c00015 	stw	r3,0(r4)
8110b094:	f800283a 	ret
8110b098:	0005883a 	mov	r2,zero
8110b09c:	f800283a 	ret
8110b0a0:	1806d07a 	srli	r3,r3,1
8110b0a4:	00800044 	movi	r2,1
8110b0a8:	20c00015 	stw	r3,0(r4)
8110b0ac:	f800283a 	ret

8110b0b0 <__i2b>:
8110b0b0:	defffd04 	addi	sp,sp,-12
8110b0b4:	dc000015 	stw	r16,0(sp)
8110b0b8:	04000044 	movi	r16,1
8110b0bc:	dc400115 	stw	r17,4(sp)
8110b0c0:	2823883a 	mov	r17,r5
8110b0c4:	800b883a 	mov	r5,r16
8110b0c8:	dfc00215 	stw	ra,8(sp)
8110b0cc:	110aca40 	call	8110aca4 <_Balloc>
8110b0d0:	14400515 	stw	r17,20(r2)
8110b0d4:	14000415 	stw	r16,16(r2)
8110b0d8:	dfc00217 	ldw	ra,8(sp)
8110b0dc:	dc400117 	ldw	r17,4(sp)
8110b0e0:	dc000017 	ldw	r16,0(sp)
8110b0e4:	dec00304 	addi	sp,sp,12
8110b0e8:	f800283a 	ret

8110b0ec <__multiply>:
8110b0ec:	defffa04 	addi	sp,sp,-24
8110b0f0:	dcc00315 	stw	r19,12(sp)
8110b0f4:	dc800215 	stw	r18,8(sp)
8110b0f8:	34c00417 	ldw	r19,16(r6)
8110b0fc:	2c800417 	ldw	r18,16(r5)
8110b100:	dd000415 	stw	r20,16(sp)
8110b104:	dc400115 	stw	r17,4(sp)
8110b108:	dfc00515 	stw	ra,20(sp)
8110b10c:	dc000015 	stw	r16,0(sp)
8110b110:	2829883a 	mov	r20,r5
8110b114:	3023883a 	mov	r17,r6
8110b118:	94c0050e 	bge	r18,r19,8110b130 <__multiply+0x44>
8110b11c:	9007883a 	mov	r3,r18
8110b120:	3029883a 	mov	r20,r6
8110b124:	9825883a 	mov	r18,r19
8110b128:	2823883a 	mov	r17,r5
8110b12c:	1827883a 	mov	r19,r3
8110b130:	a0800217 	ldw	r2,8(r20)
8110b134:	94e1883a 	add	r16,r18,r19
8110b138:	a1400117 	ldw	r5,4(r20)
8110b13c:	1400010e 	bge	r2,r16,8110b144 <__multiply+0x58>
8110b140:	29400044 	addi	r5,r5,1
8110b144:	110aca40 	call	8110aca4 <_Balloc>
8110b148:	8415883a 	add	r10,r16,r16
8110b14c:	12c00504 	addi	r11,r2,20
8110b150:	5295883a 	add	r10,r10,r10
8110b154:	5a95883a 	add	r10,r11,r10
8110b158:	5807883a 	mov	r3,r11
8110b15c:	5a80032e 	bgeu	r11,r10,8110b16c <__multiply+0x80>
8110b160:	18000015 	stw	zero,0(r3)
8110b164:	18c00104 	addi	r3,r3,4
8110b168:	1abffd36 	bltu	r3,r10,8110b160 <__reset+0xfb0eb160>
8110b16c:	9ce7883a 	add	r19,r19,r19
8110b170:	94a5883a 	add	r18,r18,r18
8110b174:	89800504 	addi	r6,r17,20
8110b178:	9ce7883a 	add	r19,r19,r19
8110b17c:	a3400504 	addi	r13,r20,20
8110b180:	94a5883a 	add	r18,r18,r18
8110b184:	34d9883a 	add	r12,r6,r19
8110b188:	6c93883a 	add	r9,r13,r18
8110b18c:	3300422e 	bgeu	r6,r12,8110b298 <__multiply+0x1ac>
8110b190:	37c00017 	ldw	ra,0(r6)
8110b194:	fbffffcc 	andi	r15,ra,65535
8110b198:	78001b26 	beq	r15,zero,8110b208 <__multiply+0x11c>
8110b19c:	5811883a 	mov	r8,r11
8110b1a0:	681d883a 	mov	r14,r13
8110b1a4:	000f883a 	mov	r7,zero
8110b1a8:	71000017 	ldw	r4,0(r14)
8110b1ac:	40c00017 	ldw	r3,0(r8)
8110b1b0:	73800104 	addi	r14,r14,4
8110b1b4:	217fffcc 	andi	r5,r4,65535
8110b1b8:	2bcb383a 	mul	r5,r5,r15
8110b1bc:	2008d43a 	srli	r4,r4,16
8110b1c0:	1c7fffcc 	andi	r17,r3,65535
8110b1c4:	2c4b883a 	add	r5,r5,r17
8110b1c8:	29cb883a 	add	r5,r5,r7
8110b1cc:	23c9383a 	mul	r4,r4,r15
8110b1d0:	1806d43a 	srli	r3,r3,16
8110b1d4:	280ed43a 	srli	r7,r5,16
8110b1d8:	297fffcc 	andi	r5,r5,65535
8110b1dc:	20c7883a 	add	r3,r4,r3
8110b1e0:	19c7883a 	add	r3,r3,r7
8110b1e4:	1808943a 	slli	r4,r3,16
8110b1e8:	4023883a 	mov	r17,r8
8110b1ec:	180ed43a 	srli	r7,r3,16
8110b1f0:	214ab03a 	or	r5,r4,r5
8110b1f4:	41400015 	stw	r5,0(r8)
8110b1f8:	42000104 	addi	r8,r8,4
8110b1fc:	727fea36 	bltu	r14,r9,8110b1a8 <__reset+0xfb0eb1a8>
8110b200:	89c00115 	stw	r7,4(r17)
8110b204:	37c00017 	ldw	ra,0(r6)
8110b208:	f83ed43a 	srli	ra,ra,16
8110b20c:	f8001f26 	beq	ra,zero,8110b28c <__multiply+0x1a0>
8110b210:	58c00017 	ldw	r3,0(r11)
8110b214:	681d883a 	mov	r14,r13
8110b218:	581f883a 	mov	r15,r11
8110b21c:	1811883a 	mov	r8,r3
8110b220:	5825883a 	mov	r18,r11
8110b224:	000f883a 	mov	r7,zero
8110b228:	00000106 	br	8110b230 <__multiply+0x144>
8110b22c:	8825883a 	mov	r18,r17
8110b230:	7140000b 	ldhu	r5,0(r14)
8110b234:	4010d43a 	srli	r8,r8,16
8110b238:	193fffcc 	andi	r4,r3,65535
8110b23c:	2fcb383a 	mul	r5,r5,ra
8110b240:	7bc00104 	addi	r15,r15,4
8110b244:	73800104 	addi	r14,r14,4
8110b248:	2a0b883a 	add	r5,r5,r8
8110b24c:	29cb883a 	add	r5,r5,r7
8110b250:	2806943a 	slli	r3,r5,16
8110b254:	94400104 	addi	r17,r18,4
8110b258:	280ad43a 	srli	r5,r5,16
8110b25c:	1908b03a 	or	r4,r3,r4
8110b260:	793fff15 	stw	r4,-4(r15)
8110b264:	70ffff17 	ldw	r3,-4(r14)
8110b268:	8a000017 	ldw	r8,0(r17)
8110b26c:	1806d43a 	srli	r3,r3,16
8110b270:	413fffcc 	andi	r4,r8,65535
8110b274:	1fc7383a 	mul	r3,r3,ra
8110b278:	1907883a 	add	r3,r3,r4
8110b27c:	1947883a 	add	r3,r3,r5
8110b280:	180ed43a 	srli	r7,r3,16
8110b284:	727fe936 	bltu	r14,r9,8110b22c <__reset+0xfb0eb22c>
8110b288:	90c00115 	stw	r3,4(r18)
8110b28c:	31800104 	addi	r6,r6,4
8110b290:	5ac00104 	addi	r11,r11,4
8110b294:	333fbe36 	bltu	r6,r12,8110b190 <__reset+0xfb0eb190>
8110b298:	0400090e 	bge	zero,r16,8110b2c0 <__multiply+0x1d4>
8110b29c:	50ffff17 	ldw	r3,-4(r10)
8110b2a0:	52bfff04 	addi	r10,r10,-4
8110b2a4:	18000326 	beq	r3,zero,8110b2b4 <__multiply+0x1c8>
8110b2a8:	00000506 	br	8110b2c0 <__multiply+0x1d4>
8110b2ac:	50c00017 	ldw	r3,0(r10)
8110b2b0:	1800031e 	bne	r3,zero,8110b2c0 <__multiply+0x1d4>
8110b2b4:	843fffc4 	addi	r16,r16,-1
8110b2b8:	52bfff04 	addi	r10,r10,-4
8110b2bc:	803ffb1e 	bne	r16,zero,8110b2ac <__reset+0xfb0eb2ac>
8110b2c0:	14000415 	stw	r16,16(r2)
8110b2c4:	dfc00517 	ldw	ra,20(sp)
8110b2c8:	dd000417 	ldw	r20,16(sp)
8110b2cc:	dcc00317 	ldw	r19,12(sp)
8110b2d0:	dc800217 	ldw	r18,8(sp)
8110b2d4:	dc400117 	ldw	r17,4(sp)
8110b2d8:	dc000017 	ldw	r16,0(sp)
8110b2dc:	dec00604 	addi	sp,sp,24
8110b2e0:	f800283a 	ret

8110b2e4 <__pow5mult>:
8110b2e4:	defffa04 	addi	sp,sp,-24
8110b2e8:	dcc00315 	stw	r19,12(sp)
8110b2ec:	dc000015 	stw	r16,0(sp)
8110b2f0:	dfc00515 	stw	ra,20(sp)
8110b2f4:	dd000415 	stw	r20,16(sp)
8110b2f8:	dc800215 	stw	r18,8(sp)
8110b2fc:	dc400115 	stw	r17,4(sp)
8110b300:	308000cc 	andi	r2,r6,3
8110b304:	3021883a 	mov	r16,r6
8110b308:	2027883a 	mov	r19,r4
8110b30c:	10002f1e 	bne	r2,zero,8110b3cc <__pow5mult+0xe8>
8110b310:	2825883a 	mov	r18,r5
8110b314:	8021d0ba 	srai	r16,r16,2
8110b318:	80001a26 	beq	r16,zero,8110b384 <__pow5mult+0xa0>
8110b31c:	9c401217 	ldw	r17,72(r19)
8110b320:	8800061e 	bne	r17,zero,8110b33c <__pow5mult+0x58>
8110b324:	00003406 	br	8110b3f8 <__pow5mult+0x114>
8110b328:	8021d07a 	srai	r16,r16,1
8110b32c:	80001526 	beq	r16,zero,8110b384 <__pow5mult+0xa0>
8110b330:	88800017 	ldw	r2,0(r17)
8110b334:	10001c26 	beq	r2,zero,8110b3a8 <__pow5mult+0xc4>
8110b338:	1023883a 	mov	r17,r2
8110b33c:	8080004c 	andi	r2,r16,1
8110b340:	103ff926 	beq	r2,zero,8110b328 <__reset+0xfb0eb328>
8110b344:	880d883a 	mov	r6,r17
8110b348:	900b883a 	mov	r5,r18
8110b34c:	9809883a 	mov	r4,r19
8110b350:	110b0ec0 	call	8110b0ec <__multiply>
8110b354:	90001b26 	beq	r18,zero,8110b3c4 <__pow5mult+0xe0>
8110b358:	91000117 	ldw	r4,4(r18)
8110b35c:	98c01317 	ldw	r3,76(r19)
8110b360:	8021d07a 	srai	r16,r16,1
8110b364:	2109883a 	add	r4,r4,r4
8110b368:	2109883a 	add	r4,r4,r4
8110b36c:	1907883a 	add	r3,r3,r4
8110b370:	19000017 	ldw	r4,0(r3)
8110b374:	91000015 	stw	r4,0(r18)
8110b378:	1c800015 	stw	r18,0(r3)
8110b37c:	1025883a 	mov	r18,r2
8110b380:	803feb1e 	bne	r16,zero,8110b330 <__reset+0xfb0eb330>
8110b384:	9005883a 	mov	r2,r18
8110b388:	dfc00517 	ldw	ra,20(sp)
8110b38c:	dd000417 	ldw	r20,16(sp)
8110b390:	dcc00317 	ldw	r19,12(sp)
8110b394:	dc800217 	ldw	r18,8(sp)
8110b398:	dc400117 	ldw	r17,4(sp)
8110b39c:	dc000017 	ldw	r16,0(sp)
8110b3a0:	dec00604 	addi	sp,sp,24
8110b3a4:	f800283a 	ret
8110b3a8:	880d883a 	mov	r6,r17
8110b3ac:	880b883a 	mov	r5,r17
8110b3b0:	9809883a 	mov	r4,r19
8110b3b4:	110b0ec0 	call	8110b0ec <__multiply>
8110b3b8:	88800015 	stw	r2,0(r17)
8110b3bc:	10000015 	stw	zero,0(r2)
8110b3c0:	003fdd06 	br	8110b338 <__reset+0xfb0eb338>
8110b3c4:	1025883a 	mov	r18,r2
8110b3c8:	003fd706 	br	8110b328 <__reset+0xfb0eb328>
8110b3cc:	10bfffc4 	addi	r2,r2,-1
8110b3d0:	1085883a 	add	r2,r2,r2
8110b3d4:	00e044b4 	movhi	r3,33042
8110b3d8:	18e61e04 	addi	r3,r3,-26504
8110b3dc:	1085883a 	add	r2,r2,r2
8110b3e0:	1885883a 	add	r2,r3,r2
8110b3e4:	11800017 	ldw	r6,0(r2)
8110b3e8:	000f883a 	mov	r7,zero
8110b3ec:	110ad740 	call	8110ad74 <__multadd>
8110b3f0:	1025883a 	mov	r18,r2
8110b3f4:	003fc706 	br	8110b314 <__reset+0xfb0eb314>
8110b3f8:	05000044 	movi	r20,1
8110b3fc:	a00b883a 	mov	r5,r20
8110b400:	9809883a 	mov	r4,r19
8110b404:	110aca40 	call	8110aca4 <_Balloc>
8110b408:	1023883a 	mov	r17,r2
8110b40c:	00809c44 	movi	r2,625
8110b410:	88800515 	stw	r2,20(r17)
8110b414:	8d000415 	stw	r20,16(r17)
8110b418:	9c401215 	stw	r17,72(r19)
8110b41c:	88000015 	stw	zero,0(r17)
8110b420:	003fc606 	br	8110b33c <__reset+0xfb0eb33c>

8110b424 <__lshift>:
8110b424:	defff904 	addi	sp,sp,-28
8110b428:	dd400515 	stw	r21,20(sp)
8110b42c:	dcc00315 	stw	r19,12(sp)
8110b430:	302bd17a 	srai	r21,r6,5
8110b434:	2cc00417 	ldw	r19,16(r5)
8110b438:	28800217 	ldw	r2,8(r5)
8110b43c:	dd000415 	stw	r20,16(sp)
8110b440:	ace7883a 	add	r19,r21,r19
8110b444:	dc800215 	stw	r18,8(sp)
8110b448:	dc400115 	stw	r17,4(sp)
8110b44c:	dc000015 	stw	r16,0(sp)
8110b450:	dfc00615 	stw	ra,24(sp)
8110b454:	9c000044 	addi	r16,r19,1
8110b458:	2823883a 	mov	r17,r5
8110b45c:	3029883a 	mov	r20,r6
8110b460:	2025883a 	mov	r18,r4
8110b464:	29400117 	ldw	r5,4(r5)
8110b468:	1400030e 	bge	r2,r16,8110b478 <__lshift+0x54>
8110b46c:	1085883a 	add	r2,r2,r2
8110b470:	29400044 	addi	r5,r5,1
8110b474:	143ffd16 	blt	r2,r16,8110b46c <__reset+0xfb0eb46c>
8110b478:	9009883a 	mov	r4,r18
8110b47c:	110aca40 	call	8110aca4 <_Balloc>
8110b480:	10c00504 	addi	r3,r2,20
8110b484:	0540070e 	bge	zero,r21,8110b4a4 <__lshift+0x80>
8110b488:	ad6b883a 	add	r21,r21,r21
8110b48c:	ad6b883a 	add	r21,r21,r21
8110b490:	1809883a 	mov	r4,r3
8110b494:	1d47883a 	add	r3,r3,r21
8110b498:	20000015 	stw	zero,0(r4)
8110b49c:	21000104 	addi	r4,r4,4
8110b4a0:	193ffd1e 	bne	r3,r4,8110b498 <__reset+0xfb0eb498>
8110b4a4:	8a000417 	ldw	r8,16(r17)
8110b4a8:	89000504 	addi	r4,r17,20
8110b4ac:	a18007cc 	andi	r6,r20,31
8110b4b0:	4211883a 	add	r8,r8,r8
8110b4b4:	4211883a 	add	r8,r8,r8
8110b4b8:	2211883a 	add	r8,r4,r8
8110b4bc:	30002326 	beq	r6,zero,8110b54c <__lshift+0x128>
8110b4c0:	02400804 	movi	r9,32
8110b4c4:	4993c83a 	sub	r9,r9,r6
8110b4c8:	000b883a 	mov	r5,zero
8110b4cc:	21c00017 	ldw	r7,0(r4)
8110b4d0:	1815883a 	mov	r10,r3
8110b4d4:	18c00104 	addi	r3,r3,4
8110b4d8:	398e983a 	sll	r7,r7,r6
8110b4dc:	21000104 	addi	r4,r4,4
8110b4e0:	394ab03a 	or	r5,r7,r5
8110b4e4:	197fff15 	stw	r5,-4(r3)
8110b4e8:	217fff17 	ldw	r5,-4(r4)
8110b4ec:	2a4ad83a 	srl	r5,r5,r9
8110b4f0:	223ff636 	bltu	r4,r8,8110b4cc <__reset+0xfb0eb4cc>
8110b4f4:	51400115 	stw	r5,4(r10)
8110b4f8:	28001a1e 	bne	r5,zero,8110b564 <__lshift+0x140>
8110b4fc:	843fffc4 	addi	r16,r16,-1
8110b500:	14000415 	stw	r16,16(r2)
8110b504:	88000826 	beq	r17,zero,8110b528 <__lshift+0x104>
8110b508:	89000117 	ldw	r4,4(r17)
8110b50c:	90c01317 	ldw	r3,76(r18)
8110b510:	2109883a 	add	r4,r4,r4
8110b514:	2109883a 	add	r4,r4,r4
8110b518:	1907883a 	add	r3,r3,r4
8110b51c:	19000017 	ldw	r4,0(r3)
8110b520:	89000015 	stw	r4,0(r17)
8110b524:	1c400015 	stw	r17,0(r3)
8110b528:	dfc00617 	ldw	ra,24(sp)
8110b52c:	dd400517 	ldw	r21,20(sp)
8110b530:	dd000417 	ldw	r20,16(sp)
8110b534:	dcc00317 	ldw	r19,12(sp)
8110b538:	dc800217 	ldw	r18,8(sp)
8110b53c:	dc400117 	ldw	r17,4(sp)
8110b540:	dc000017 	ldw	r16,0(sp)
8110b544:	dec00704 	addi	sp,sp,28
8110b548:	f800283a 	ret
8110b54c:	21400017 	ldw	r5,0(r4)
8110b550:	18c00104 	addi	r3,r3,4
8110b554:	21000104 	addi	r4,r4,4
8110b558:	197fff15 	stw	r5,-4(r3)
8110b55c:	223ffb36 	bltu	r4,r8,8110b54c <__reset+0xfb0eb54c>
8110b560:	003fe606 	br	8110b4fc <__reset+0xfb0eb4fc>
8110b564:	9c000084 	addi	r16,r19,2
8110b568:	003fe406 	br	8110b4fc <__reset+0xfb0eb4fc>

8110b56c <__mcmp>:
8110b56c:	20800417 	ldw	r2,16(r4)
8110b570:	28c00417 	ldw	r3,16(r5)
8110b574:	10c5c83a 	sub	r2,r2,r3
8110b578:	1000111e 	bne	r2,zero,8110b5c0 <__mcmp+0x54>
8110b57c:	18c7883a 	add	r3,r3,r3
8110b580:	18c7883a 	add	r3,r3,r3
8110b584:	21000504 	addi	r4,r4,20
8110b588:	29400504 	addi	r5,r5,20
8110b58c:	20c5883a 	add	r2,r4,r3
8110b590:	28cb883a 	add	r5,r5,r3
8110b594:	00000106 	br	8110b59c <__mcmp+0x30>
8110b598:	20800a2e 	bgeu	r4,r2,8110b5c4 <__mcmp+0x58>
8110b59c:	10bfff04 	addi	r2,r2,-4
8110b5a0:	297fff04 	addi	r5,r5,-4
8110b5a4:	11800017 	ldw	r6,0(r2)
8110b5a8:	28c00017 	ldw	r3,0(r5)
8110b5ac:	30fffa26 	beq	r6,r3,8110b598 <__reset+0xfb0eb598>
8110b5b0:	30c00236 	bltu	r6,r3,8110b5bc <__mcmp+0x50>
8110b5b4:	00800044 	movi	r2,1
8110b5b8:	f800283a 	ret
8110b5bc:	00bfffc4 	movi	r2,-1
8110b5c0:	f800283a 	ret
8110b5c4:	0005883a 	mov	r2,zero
8110b5c8:	f800283a 	ret

8110b5cc <__mdiff>:
8110b5cc:	28c00417 	ldw	r3,16(r5)
8110b5d0:	30800417 	ldw	r2,16(r6)
8110b5d4:	defffa04 	addi	sp,sp,-24
8110b5d8:	dcc00315 	stw	r19,12(sp)
8110b5dc:	dc800215 	stw	r18,8(sp)
8110b5e0:	dfc00515 	stw	ra,20(sp)
8110b5e4:	dd000415 	stw	r20,16(sp)
8110b5e8:	dc400115 	stw	r17,4(sp)
8110b5ec:	dc000015 	stw	r16,0(sp)
8110b5f0:	1887c83a 	sub	r3,r3,r2
8110b5f4:	2825883a 	mov	r18,r5
8110b5f8:	3027883a 	mov	r19,r6
8110b5fc:	1800141e 	bne	r3,zero,8110b650 <__mdiff+0x84>
8110b600:	1085883a 	add	r2,r2,r2
8110b604:	1085883a 	add	r2,r2,r2
8110b608:	2a000504 	addi	r8,r5,20
8110b60c:	34000504 	addi	r16,r6,20
8110b610:	4087883a 	add	r3,r8,r2
8110b614:	8085883a 	add	r2,r16,r2
8110b618:	00000106 	br	8110b620 <__mdiff+0x54>
8110b61c:	40c0592e 	bgeu	r8,r3,8110b784 <__mdiff+0x1b8>
8110b620:	18ffff04 	addi	r3,r3,-4
8110b624:	10bfff04 	addi	r2,r2,-4
8110b628:	19c00017 	ldw	r7,0(r3)
8110b62c:	11400017 	ldw	r5,0(r2)
8110b630:	397ffa26 	beq	r7,r5,8110b61c <__reset+0xfb0eb61c>
8110b634:	3940592e 	bgeu	r7,r5,8110b79c <__mdiff+0x1d0>
8110b638:	9005883a 	mov	r2,r18
8110b63c:	4023883a 	mov	r17,r8
8110b640:	9825883a 	mov	r18,r19
8110b644:	05000044 	movi	r20,1
8110b648:	1027883a 	mov	r19,r2
8110b64c:	00000406 	br	8110b660 <__mdiff+0x94>
8110b650:	18005616 	blt	r3,zero,8110b7ac <__mdiff+0x1e0>
8110b654:	34400504 	addi	r17,r6,20
8110b658:	2c000504 	addi	r16,r5,20
8110b65c:	0029883a 	mov	r20,zero
8110b660:	91400117 	ldw	r5,4(r18)
8110b664:	110aca40 	call	8110aca4 <_Balloc>
8110b668:	92400417 	ldw	r9,16(r18)
8110b66c:	9b000417 	ldw	r12,16(r19)
8110b670:	12c00504 	addi	r11,r2,20
8110b674:	4a51883a 	add	r8,r9,r9
8110b678:	6319883a 	add	r12,r12,r12
8110b67c:	4211883a 	add	r8,r8,r8
8110b680:	6319883a 	add	r12,r12,r12
8110b684:	15000315 	stw	r20,12(r2)
8110b688:	8211883a 	add	r8,r16,r8
8110b68c:	8b19883a 	add	r12,r17,r12
8110b690:	0007883a 	mov	r3,zero
8110b694:	81400017 	ldw	r5,0(r16)
8110b698:	89c00017 	ldw	r7,0(r17)
8110b69c:	59800104 	addi	r6,r11,4
8110b6a0:	293fffcc 	andi	r4,r5,65535
8110b6a4:	20c7883a 	add	r3,r4,r3
8110b6a8:	393fffcc 	andi	r4,r7,65535
8110b6ac:	1909c83a 	sub	r4,r3,r4
8110b6b0:	280ad43a 	srli	r5,r5,16
8110b6b4:	380ed43a 	srli	r7,r7,16
8110b6b8:	2007d43a 	srai	r3,r4,16
8110b6bc:	213fffcc 	andi	r4,r4,65535
8110b6c0:	29cbc83a 	sub	r5,r5,r7
8110b6c4:	28c7883a 	add	r3,r5,r3
8110b6c8:	180a943a 	slli	r5,r3,16
8110b6cc:	8c400104 	addi	r17,r17,4
8110b6d0:	84000104 	addi	r16,r16,4
8110b6d4:	2908b03a 	or	r4,r5,r4
8110b6d8:	59000015 	stw	r4,0(r11)
8110b6dc:	1807d43a 	srai	r3,r3,16
8110b6e0:	3015883a 	mov	r10,r6
8110b6e4:	3017883a 	mov	r11,r6
8110b6e8:	8b3fea36 	bltu	r17,r12,8110b694 <__reset+0xfb0eb694>
8110b6ec:	8200162e 	bgeu	r16,r8,8110b748 <__mdiff+0x17c>
8110b6f0:	8017883a 	mov	r11,r16
8110b6f4:	59400017 	ldw	r5,0(r11)
8110b6f8:	31800104 	addi	r6,r6,4
8110b6fc:	5ac00104 	addi	r11,r11,4
8110b700:	293fffcc 	andi	r4,r5,65535
8110b704:	20c7883a 	add	r3,r4,r3
8110b708:	280ed43a 	srli	r7,r5,16
8110b70c:	180bd43a 	srai	r5,r3,16
8110b710:	193fffcc 	andi	r4,r3,65535
8110b714:	3947883a 	add	r3,r7,r5
8110b718:	180a943a 	slli	r5,r3,16
8110b71c:	1807d43a 	srai	r3,r3,16
8110b720:	2908b03a 	or	r4,r5,r4
8110b724:	313fff15 	stw	r4,-4(r6)
8110b728:	5a3ff236 	bltu	r11,r8,8110b6f4 <__reset+0xfb0eb6f4>
8110b72c:	0406303a 	nor	r3,zero,r16
8110b730:	1a07883a 	add	r3,r3,r8
8110b734:	1806d0ba 	srli	r3,r3,2
8110b738:	18c00044 	addi	r3,r3,1
8110b73c:	18c7883a 	add	r3,r3,r3
8110b740:	18c7883a 	add	r3,r3,r3
8110b744:	50d5883a 	add	r10,r10,r3
8110b748:	50ffff04 	addi	r3,r10,-4
8110b74c:	2000041e 	bne	r4,zero,8110b760 <__mdiff+0x194>
8110b750:	18ffff04 	addi	r3,r3,-4
8110b754:	19000017 	ldw	r4,0(r3)
8110b758:	4a7fffc4 	addi	r9,r9,-1
8110b75c:	203ffc26 	beq	r4,zero,8110b750 <__reset+0xfb0eb750>
8110b760:	12400415 	stw	r9,16(r2)
8110b764:	dfc00517 	ldw	ra,20(sp)
8110b768:	dd000417 	ldw	r20,16(sp)
8110b76c:	dcc00317 	ldw	r19,12(sp)
8110b770:	dc800217 	ldw	r18,8(sp)
8110b774:	dc400117 	ldw	r17,4(sp)
8110b778:	dc000017 	ldw	r16,0(sp)
8110b77c:	dec00604 	addi	sp,sp,24
8110b780:	f800283a 	ret
8110b784:	000b883a 	mov	r5,zero
8110b788:	110aca40 	call	8110aca4 <_Balloc>
8110b78c:	00c00044 	movi	r3,1
8110b790:	10c00415 	stw	r3,16(r2)
8110b794:	10000515 	stw	zero,20(r2)
8110b798:	003ff206 	br	8110b764 <__reset+0xfb0eb764>
8110b79c:	8023883a 	mov	r17,r16
8110b7a0:	0029883a 	mov	r20,zero
8110b7a4:	4021883a 	mov	r16,r8
8110b7a8:	003fad06 	br	8110b660 <__reset+0xfb0eb660>
8110b7ac:	9005883a 	mov	r2,r18
8110b7b0:	94400504 	addi	r17,r18,20
8110b7b4:	9c000504 	addi	r16,r19,20
8110b7b8:	9825883a 	mov	r18,r19
8110b7bc:	05000044 	movi	r20,1
8110b7c0:	1027883a 	mov	r19,r2
8110b7c4:	003fa606 	br	8110b660 <__reset+0xfb0eb660>

8110b7c8 <__ulp>:
8110b7c8:	295ffc2c 	andhi	r5,r5,32752
8110b7cc:	00bf3034 	movhi	r2,64704
8110b7d0:	2887883a 	add	r3,r5,r2
8110b7d4:	00c0020e 	bge	zero,r3,8110b7e0 <__ulp+0x18>
8110b7d8:	0005883a 	mov	r2,zero
8110b7dc:	f800283a 	ret
8110b7e0:	00c7c83a 	sub	r3,zero,r3
8110b7e4:	1807d53a 	srai	r3,r3,20
8110b7e8:	008004c4 	movi	r2,19
8110b7ec:	10c00b0e 	bge	r2,r3,8110b81c <__ulp+0x54>
8110b7f0:	18bffb04 	addi	r2,r3,-20
8110b7f4:	01000784 	movi	r4,30
8110b7f8:	0007883a 	mov	r3,zero
8110b7fc:	20800516 	blt	r4,r2,8110b814 <__ulp+0x4c>
8110b800:	010007c4 	movi	r4,31
8110b804:	2089c83a 	sub	r4,r4,r2
8110b808:	00800044 	movi	r2,1
8110b80c:	1104983a 	sll	r2,r2,r4
8110b810:	f800283a 	ret
8110b814:	00800044 	movi	r2,1
8110b818:	f800283a 	ret
8110b81c:	01400234 	movhi	r5,8
8110b820:	28c7d83a 	sra	r3,r5,r3
8110b824:	0005883a 	mov	r2,zero
8110b828:	f800283a 	ret

8110b82c <__b2d>:
8110b82c:	defffa04 	addi	sp,sp,-24
8110b830:	dc000015 	stw	r16,0(sp)
8110b834:	24000417 	ldw	r16,16(r4)
8110b838:	dc400115 	stw	r17,4(sp)
8110b83c:	24400504 	addi	r17,r4,20
8110b840:	8421883a 	add	r16,r16,r16
8110b844:	8421883a 	add	r16,r16,r16
8110b848:	8c21883a 	add	r16,r17,r16
8110b84c:	dc800215 	stw	r18,8(sp)
8110b850:	84bfff17 	ldw	r18,-4(r16)
8110b854:	dd000415 	stw	r20,16(sp)
8110b858:	dcc00315 	stw	r19,12(sp)
8110b85c:	9009883a 	mov	r4,r18
8110b860:	2829883a 	mov	r20,r5
8110b864:	dfc00515 	stw	ra,20(sp)
8110b868:	110af980 	call	8110af98 <__hi0bits>
8110b86c:	00c00804 	movi	r3,32
8110b870:	1889c83a 	sub	r4,r3,r2
8110b874:	a1000015 	stw	r4,0(r20)
8110b878:	01000284 	movi	r4,10
8110b87c:	84ffff04 	addi	r19,r16,-4
8110b880:	20801216 	blt	r4,r2,8110b8cc <__b2d+0xa0>
8110b884:	018002c4 	movi	r6,11
8110b888:	308dc83a 	sub	r6,r6,r2
8110b88c:	9186d83a 	srl	r3,r18,r6
8110b890:	18cffc34 	orhi	r3,r3,16368
8110b894:	8cc0212e 	bgeu	r17,r19,8110b91c <__b2d+0xf0>
8110b898:	813ffe17 	ldw	r4,-8(r16)
8110b89c:	218cd83a 	srl	r6,r4,r6
8110b8a0:	10800544 	addi	r2,r2,21
8110b8a4:	9084983a 	sll	r2,r18,r2
8110b8a8:	1184b03a 	or	r2,r2,r6
8110b8ac:	dfc00517 	ldw	ra,20(sp)
8110b8b0:	dd000417 	ldw	r20,16(sp)
8110b8b4:	dcc00317 	ldw	r19,12(sp)
8110b8b8:	dc800217 	ldw	r18,8(sp)
8110b8bc:	dc400117 	ldw	r17,4(sp)
8110b8c0:	dc000017 	ldw	r16,0(sp)
8110b8c4:	dec00604 	addi	sp,sp,24
8110b8c8:	f800283a 	ret
8110b8cc:	8cc00f2e 	bgeu	r17,r19,8110b90c <__b2d+0xe0>
8110b8d0:	117ffd44 	addi	r5,r2,-11
8110b8d4:	80bffe17 	ldw	r2,-8(r16)
8110b8d8:	28000e26 	beq	r5,zero,8110b914 <__b2d+0xe8>
8110b8dc:	1949c83a 	sub	r4,r3,r5
8110b8e0:	9164983a 	sll	r18,r18,r5
8110b8e4:	1106d83a 	srl	r3,r2,r4
8110b8e8:	81bffe04 	addi	r6,r16,-8
8110b8ec:	948ffc34 	orhi	r18,r18,16368
8110b8f0:	90c6b03a 	or	r3,r18,r3
8110b8f4:	89800e2e 	bgeu	r17,r6,8110b930 <__b2d+0x104>
8110b8f8:	81bffd17 	ldw	r6,-12(r16)
8110b8fc:	1144983a 	sll	r2,r2,r5
8110b900:	310ad83a 	srl	r5,r6,r4
8110b904:	2884b03a 	or	r2,r5,r2
8110b908:	003fe806 	br	8110b8ac <__reset+0xfb0eb8ac>
8110b90c:	10bffd44 	addi	r2,r2,-11
8110b910:	1000041e 	bne	r2,zero,8110b924 <__b2d+0xf8>
8110b914:	90cffc34 	orhi	r3,r18,16368
8110b918:	003fe406 	br	8110b8ac <__reset+0xfb0eb8ac>
8110b91c:	000d883a 	mov	r6,zero
8110b920:	003fdf06 	br	8110b8a0 <__reset+0xfb0eb8a0>
8110b924:	90a4983a 	sll	r18,r18,r2
8110b928:	0005883a 	mov	r2,zero
8110b92c:	003ff906 	br	8110b914 <__reset+0xfb0eb914>
8110b930:	1144983a 	sll	r2,r2,r5
8110b934:	003fdd06 	br	8110b8ac <__reset+0xfb0eb8ac>

8110b938 <__d2b>:
8110b938:	defff804 	addi	sp,sp,-32
8110b93c:	dc000215 	stw	r16,8(sp)
8110b940:	3021883a 	mov	r16,r6
8110b944:	dc400315 	stw	r17,12(sp)
8110b948:	8022907a 	slli	r17,r16,1
8110b94c:	dd000615 	stw	r20,24(sp)
8110b950:	2829883a 	mov	r20,r5
8110b954:	01400044 	movi	r5,1
8110b958:	dcc00515 	stw	r19,20(sp)
8110b95c:	dc800415 	stw	r18,16(sp)
8110b960:	dfc00715 	stw	ra,28(sp)
8110b964:	3825883a 	mov	r18,r7
8110b968:	8822d57a 	srli	r17,r17,21
8110b96c:	110aca40 	call	8110aca4 <_Balloc>
8110b970:	1027883a 	mov	r19,r2
8110b974:	00800434 	movhi	r2,16
8110b978:	10bfffc4 	addi	r2,r2,-1
8110b97c:	808c703a 	and	r6,r16,r2
8110b980:	88000126 	beq	r17,zero,8110b988 <__d2b+0x50>
8110b984:	31800434 	orhi	r6,r6,16
8110b988:	d9800015 	stw	r6,0(sp)
8110b98c:	a0002426 	beq	r20,zero,8110ba20 <__d2b+0xe8>
8110b990:	d9000104 	addi	r4,sp,4
8110b994:	dd000115 	stw	r20,4(sp)
8110b998:	110b0000 	call	8110b000 <__lo0bits>
8110b99c:	d8c00017 	ldw	r3,0(sp)
8110b9a0:	10002f1e 	bne	r2,zero,8110ba60 <__d2b+0x128>
8110b9a4:	d9000117 	ldw	r4,4(sp)
8110b9a8:	99000515 	stw	r4,20(r19)
8110b9ac:	1821003a 	cmpeq	r16,r3,zero
8110b9b0:	01000084 	movi	r4,2
8110b9b4:	2421c83a 	sub	r16,r4,r16
8110b9b8:	98c00615 	stw	r3,24(r19)
8110b9bc:	9c000415 	stw	r16,16(r19)
8110b9c0:	88001f1e 	bne	r17,zero,8110ba40 <__d2b+0x108>
8110b9c4:	10bef384 	addi	r2,r2,-1074
8110b9c8:	90800015 	stw	r2,0(r18)
8110b9cc:	00900034 	movhi	r2,16384
8110b9d0:	10bfffc4 	addi	r2,r2,-1
8110b9d4:	8085883a 	add	r2,r16,r2
8110b9d8:	1085883a 	add	r2,r2,r2
8110b9dc:	1085883a 	add	r2,r2,r2
8110b9e0:	9885883a 	add	r2,r19,r2
8110b9e4:	11000517 	ldw	r4,20(r2)
8110b9e8:	8020917a 	slli	r16,r16,5
8110b9ec:	110af980 	call	8110af98 <__hi0bits>
8110b9f0:	d8c00817 	ldw	r3,32(sp)
8110b9f4:	8085c83a 	sub	r2,r16,r2
8110b9f8:	18800015 	stw	r2,0(r3)
8110b9fc:	9805883a 	mov	r2,r19
8110ba00:	dfc00717 	ldw	ra,28(sp)
8110ba04:	dd000617 	ldw	r20,24(sp)
8110ba08:	dcc00517 	ldw	r19,20(sp)
8110ba0c:	dc800417 	ldw	r18,16(sp)
8110ba10:	dc400317 	ldw	r17,12(sp)
8110ba14:	dc000217 	ldw	r16,8(sp)
8110ba18:	dec00804 	addi	sp,sp,32
8110ba1c:	f800283a 	ret
8110ba20:	d809883a 	mov	r4,sp
8110ba24:	110b0000 	call	8110b000 <__lo0bits>
8110ba28:	d8c00017 	ldw	r3,0(sp)
8110ba2c:	04000044 	movi	r16,1
8110ba30:	9c000415 	stw	r16,16(r19)
8110ba34:	98c00515 	stw	r3,20(r19)
8110ba38:	10800804 	addi	r2,r2,32
8110ba3c:	883fe126 	beq	r17,zero,8110b9c4 <__reset+0xfb0eb9c4>
8110ba40:	00c00d44 	movi	r3,53
8110ba44:	8c7ef344 	addi	r17,r17,-1075
8110ba48:	88a3883a 	add	r17,r17,r2
8110ba4c:	1885c83a 	sub	r2,r3,r2
8110ba50:	d8c00817 	ldw	r3,32(sp)
8110ba54:	94400015 	stw	r17,0(r18)
8110ba58:	18800015 	stw	r2,0(r3)
8110ba5c:	003fe706 	br	8110b9fc <__reset+0xfb0eb9fc>
8110ba60:	01000804 	movi	r4,32
8110ba64:	2089c83a 	sub	r4,r4,r2
8110ba68:	1908983a 	sll	r4,r3,r4
8110ba6c:	d9400117 	ldw	r5,4(sp)
8110ba70:	1886d83a 	srl	r3,r3,r2
8110ba74:	2148b03a 	or	r4,r4,r5
8110ba78:	99000515 	stw	r4,20(r19)
8110ba7c:	d8c00015 	stw	r3,0(sp)
8110ba80:	003fca06 	br	8110b9ac <__reset+0xfb0eb9ac>

8110ba84 <__ratio>:
8110ba84:	defff904 	addi	sp,sp,-28
8110ba88:	dc400315 	stw	r17,12(sp)
8110ba8c:	2823883a 	mov	r17,r5
8110ba90:	d9400104 	addi	r5,sp,4
8110ba94:	dfc00615 	stw	ra,24(sp)
8110ba98:	dcc00515 	stw	r19,20(sp)
8110ba9c:	dc800415 	stw	r18,16(sp)
8110baa0:	2027883a 	mov	r19,r4
8110baa4:	dc000215 	stw	r16,8(sp)
8110baa8:	110b82c0 	call	8110b82c <__b2d>
8110baac:	d80b883a 	mov	r5,sp
8110bab0:	8809883a 	mov	r4,r17
8110bab4:	1025883a 	mov	r18,r2
8110bab8:	1821883a 	mov	r16,r3
8110babc:	110b82c0 	call	8110b82c <__b2d>
8110bac0:	8a000417 	ldw	r8,16(r17)
8110bac4:	99000417 	ldw	r4,16(r19)
8110bac8:	d9400117 	ldw	r5,4(sp)
8110bacc:	2209c83a 	sub	r4,r4,r8
8110bad0:	2010917a 	slli	r8,r4,5
8110bad4:	d9000017 	ldw	r4,0(sp)
8110bad8:	2909c83a 	sub	r4,r5,r4
8110badc:	4109883a 	add	r4,r8,r4
8110bae0:	01000e0e 	bge	zero,r4,8110bb1c <__ratio+0x98>
8110bae4:	2008953a 	slli	r4,r4,20
8110bae8:	2421883a 	add	r16,r4,r16
8110baec:	100d883a 	mov	r6,r2
8110baf0:	180f883a 	mov	r7,r3
8110baf4:	9009883a 	mov	r4,r18
8110baf8:	800b883a 	mov	r5,r16
8110bafc:	1110ee40 	call	81110ee4 <__divdf3>
8110bb00:	dfc00617 	ldw	ra,24(sp)
8110bb04:	dcc00517 	ldw	r19,20(sp)
8110bb08:	dc800417 	ldw	r18,16(sp)
8110bb0c:	dc400317 	ldw	r17,12(sp)
8110bb10:	dc000217 	ldw	r16,8(sp)
8110bb14:	dec00704 	addi	sp,sp,28
8110bb18:	f800283a 	ret
8110bb1c:	2008953a 	slli	r4,r4,20
8110bb20:	1907c83a 	sub	r3,r3,r4
8110bb24:	003ff106 	br	8110baec <__reset+0xfb0ebaec>

8110bb28 <_mprec_log10>:
8110bb28:	defffe04 	addi	sp,sp,-8
8110bb2c:	dc000015 	stw	r16,0(sp)
8110bb30:	dfc00115 	stw	ra,4(sp)
8110bb34:	008005c4 	movi	r2,23
8110bb38:	2021883a 	mov	r16,r4
8110bb3c:	11000d0e 	bge	r2,r4,8110bb74 <_mprec_log10+0x4c>
8110bb40:	0005883a 	mov	r2,zero
8110bb44:	00cffc34 	movhi	r3,16368
8110bb48:	843fffc4 	addi	r16,r16,-1
8110bb4c:	000d883a 	mov	r6,zero
8110bb50:	01d00934 	movhi	r7,16420
8110bb54:	1009883a 	mov	r4,r2
8110bb58:	180b883a 	mov	r5,r3
8110bb5c:	1111a240 	call	81111a24 <__muldf3>
8110bb60:	803ff91e 	bne	r16,zero,8110bb48 <__reset+0xfb0ebb48>
8110bb64:	dfc00117 	ldw	ra,4(sp)
8110bb68:	dc000017 	ldw	r16,0(sp)
8110bb6c:	dec00204 	addi	sp,sp,8
8110bb70:	f800283a 	ret
8110bb74:	202090fa 	slli	r16,r4,3
8110bb78:	00a044b4 	movhi	r2,33042
8110bb7c:	10a63504 	addi	r2,r2,-26412
8110bb80:	1421883a 	add	r16,r2,r16
8110bb84:	80800017 	ldw	r2,0(r16)
8110bb88:	80c00117 	ldw	r3,4(r16)
8110bb8c:	dfc00117 	ldw	ra,4(sp)
8110bb90:	dc000017 	ldw	r16,0(sp)
8110bb94:	dec00204 	addi	sp,sp,8
8110bb98:	f800283a 	ret

8110bb9c <__copybits>:
8110bb9c:	297fffc4 	addi	r5,r5,-1
8110bba0:	280fd17a 	srai	r7,r5,5
8110bba4:	30c00417 	ldw	r3,16(r6)
8110bba8:	30800504 	addi	r2,r6,20
8110bbac:	39c00044 	addi	r7,r7,1
8110bbb0:	18c7883a 	add	r3,r3,r3
8110bbb4:	39cf883a 	add	r7,r7,r7
8110bbb8:	18c7883a 	add	r3,r3,r3
8110bbbc:	39cf883a 	add	r7,r7,r7
8110bbc0:	10c7883a 	add	r3,r2,r3
8110bbc4:	21cf883a 	add	r7,r4,r7
8110bbc8:	10c00d2e 	bgeu	r2,r3,8110bc00 <__copybits+0x64>
8110bbcc:	200b883a 	mov	r5,r4
8110bbd0:	12000017 	ldw	r8,0(r2)
8110bbd4:	29400104 	addi	r5,r5,4
8110bbd8:	10800104 	addi	r2,r2,4
8110bbdc:	2a3fff15 	stw	r8,-4(r5)
8110bbe0:	10fffb36 	bltu	r2,r3,8110bbd0 <__reset+0xfb0ebbd0>
8110bbe4:	1985c83a 	sub	r2,r3,r6
8110bbe8:	10bffac4 	addi	r2,r2,-21
8110bbec:	1004d0ba 	srli	r2,r2,2
8110bbf0:	10800044 	addi	r2,r2,1
8110bbf4:	1085883a 	add	r2,r2,r2
8110bbf8:	1085883a 	add	r2,r2,r2
8110bbfc:	2089883a 	add	r4,r4,r2
8110bc00:	21c0032e 	bgeu	r4,r7,8110bc10 <__copybits+0x74>
8110bc04:	20000015 	stw	zero,0(r4)
8110bc08:	21000104 	addi	r4,r4,4
8110bc0c:	21fffd36 	bltu	r4,r7,8110bc04 <__reset+0xfb0ebc04>
8110bc10:	f800283a 	ret

8110bc14 <__any_on>:
8110bc14:	20c00417 	ldw	r3,16(r4)
8110bc18:	2805d17a 	srai	r2,r5,5
8110bc1c:	21000504 	addi	r4,r4,20
8110bc20:	18800d0e 	bge	r3,r2,8110bc58 <__any_on+0x44>
8110bc24:	18c7883a 	add	r3,r3,r3
8110bc28:	18c7883a 	add	r3,r3,r3
8110bc2c:	20c7883a 	add	r3,r4,r3
8110bc30:	20c0192e 	bgeu	r4,r3,8110bc98 <__any_on+0x84>
8110bc34:	18bfff17 	ldw	r2,-4(r3)
8110bc38:	18ffff04 	addi	r3,r3,-4
8110bc3c:	1000041e 	bne	r2,zero,8110bc50 <__any_on+0x3c>
8110bc40:	20c0142e 	bgeu	r4,r3,8110bc94 <__any_on+0x80>
8110bc44:	18ffff04 	addi	r3,r3,-4
8110bc48:	19400017 	ldw	r5,0(r3)
8110bc4c:	283ffc26 	beq	r5,zero,8110bc40 <__reset+0xfb0ebc40>
8110bc50:	00800044 	movi	r2,1
8110bc54:	f800283a 	ret
8110bc58:	10c00a0e 	bge	r2,r3,8110bc84 <__any_on+0x70>
8110bc5c:	1085883a 	add	r2,r2,r2
8110bc60:	1085883a 	add	r2,r2,r2
8110bc64:	294007cc 	andi	r5,r5,31
8110bc68:	2087883a 	add	r3,r4,r2
8110bc6c:	283ff026 	beq	r5,zero,8110bc30 <__reset+0xfb0ebc30>
8110bc70:	19800017 	ldw	r6,0(r3)
8110bc74:	3144d83a 	srl	r2,r6,r5
8110bc78:	114a983a 	sll	r5,r2,r5
8110bc7c:	317ff41e 	bne	r6,r5,8110bc50 <__reset+0xfb0ebc50>
8110bc80:	003feb06 	br	8110bc30 <__reset+0xfb0ebc30>
8110bc84:	1085883a 	add	r2,r2,r2
8110bc88:	1085883a 	add	r2,r2,r2
8110bc8c:	2087883a 	add	r3,r4,r2
8110bc90:	003fe706 	br	8110bc30 <__reset+0xfb0ebc30>
8110bc94:	f800283a 	ret
8110bc98:	0005883a 	mov	r2,zero
8110bc9c:	f800283a 	ret

8110bca0 <_putc_r>:
8110bca0:	defffc04 	addi	sp,sp,-16
8110bca4:	dc000215 	stw	r16,8(sp)
8110bca8:	dfc00315 	stw	ra,12(sp)
8110bcac:	2021883a 	mov	r16,r4
8110bcb0:	20000226 	beq	r4,zero,8110bcbc <_putc_r+0x1c>
8110bcb4:	20800e17 	ldw	r2,56(r4)
8110bcb8:	10001b26 	beq	r2,zero,8110bd28 <_putc_r+0x88>
8110bcbc:	30800217 	ldw	r2,8(r6)
8110bcc0:	10bfffc4 	addi	r2,r2,-1
8110bcc4:	30800215 	stw	r2,8(r6)
8110bcc8:	10000a16 	blt	r2,zero,8110bcf4 <_putc_r+0x54>
8110bccc:	30800017 	ldw	r2,0(r6)
8110bcd0:	11400005 	stb	r5,0(r2)
8110bcd4:	30800017 	ldw	r2,0(r6)
8110bcd8:	10c00044 	addi	r3,r2,1
8110bcdc:	30c00015 	stw	r3,0(r6)
8110bce0:	10800003 	ldbu	r2,0(r2)
8110bce4:	dfc00317 	ldw	ra,12(sp)
8110bce8:	dc000217 	ldw	r16,8(sp)
8110bcec:	dec00404 	addi	sp,sp,16
8110bcf0:	f800283a 	ret
8110bcf4:	30c00617 	ldw	r3,24(r6)
8110bcf8:	10c00616 	blt	r2,r3,8110bd14 <_putc_r+0x74>
8110bcfc:	30800017 	ldw	r2,0(r6)
8110bd00:	00c00284 	movi	r3,10
8110bd04:	11400005 	stb	r5,0(r2)
8110bd08:	30800017 	ldw	r2,0(r6)
8110bd0c:	11400003 	ldbu	r5,0(r2)
8110bd10:	28fff11e 	bne	r5,r3,8110bcd8 <__reset+0xfb0ebcd8>
8110bd14:	8009883a 	mov	r4,r16
8110bd18:	dfc00317 	ldw	ra,12(sp)
8110bd1c:	dc000217 	ldw	r16,8(sp)
8110bd20:	dec00404 	addi	sp,sp,16
8110bd24:	110f0a01 	jmpi	8110f0a0 <__swbuf_r>
8110bd28:	d9400015 	stw	r5,0(sp)
8110bd2c:	d9800115 	stw	r6,4(sp)
8110bd30:	11093d00 	call	811093d0 <__sinit>
8110bd34:	d9800117 	ldw	r6,4(sp)
8110bd38:	d9400017 	ldw	r5,0(sp)
8110bd3c:	003fdf06 	br	8110bcbc <__reset+0xfb0ebcbc>

8110bd40 <putc>:
8110bd40:	00a044b4 	movhi	r2,33042
8110bd44:	defffc04 	addi	sp,sp,-16
8110bd48:	10af1804 	addi	r2,r2,-17312
8110bd4c:	dc000115 	stw	r16,4(sp)
8110bd50:	14000017 	ldw	r16,0(r2)
8110bd54:	dc400215 	stw	r17,8(sp)
8110bd58:	dfc00315 	stw	ra,12(sp)
8110bd5c:	2023883a 	mov	r17,r4
8110bd60:	80000226 	beq	r16,zero,8110bd6c <putc+0x2c>
8110bd64:	80800e17 	ldw	r2,56(r16)
8110bd68:	10001a26 	beq	r2,zero,8110bdd4 <putc+0x94>
8110bd6c:	28800217 	ldw	r2,8(r5)
8110bd70:	10bfffc4 	addi	r2,r2,-1
8110bd74:	28800215 	stw	r2,8(r5)
8110bd78:	10000b16 	blt	r2,zero,8110bda8 <putc+0x68>
8110bd7c:	28800017 	ldw	r2,0(r5)
8110bd80:	14400005 	stb	r17,0(r2)
8110bd84:	28800017 	ldw	r2,0(r5)
8110bd88:	10c00044 	addi	r3,r2,1
8110bd8c:	28c00015 	stw	r3,0(r5)
8110bd90:	10800003 	ldbu	r2,0(r2)
8110bd94:	dfc00317 	ldw	ra,12(sp)
8110bd98:	dc400217 	ldw	r17,8(sp)
8110bd9c:	dc000117 	ldw	r16,4(sp)
8110bda0:	dec00404 	addi	sp,sp,16
8110bda4:	f800283a 	ret
8110bda8:	28c00617 	ldw	r3,24(r5)
8110bdac:	10c00e16 	blt	r2,r3,8110bde8 <putc+0xa8>
8110bdb0:	28800017 	ldw	r2,0(r5)
8110bdb4:	01000284 	movi	r4,10
8110bdb8:	14400005 	stb	r17,0(r2)
8110bdbc:	28800017 	ldw	r2,0(r5)
8110bdc0:	10c00003 	ldbu	r3,0(r2)
8110bdc4:	193ff01e 	bne	r3,r4,8110bd88 <__reset+0xfb0ebd88>
8110bdc8:	280d883a 	mov	r6,r5
8110bdcc:	180b883a 	mov	r5,r3
8110bdd0:	00000706 	br	8110bdf0 <putc+0xb0>
8110bdd4:	8009883a 	mov	r4,r16
8110bdd8:	d9400015 	stw	r5,0(sp)
8110bddc:	11093d00 	call	811093d0 <__sinit>
8110bde0:	d9400017 	ldw	r5,0(sp)
8110bde4:	003fe106 	br	8110bd6c <__reset+0xfb0ebd6c>
8110bde8:	280d883a 	mov	r6,r5
8110bdec:	880b883a 	mov	r5,r17
8110bdf0:	8009883a 	mov	r4,r16
8110bdf4:	dfc00317 	ldw	ra,12(sp)
8110bdf8:	dc400217 	ldw	r17,8(sp)
8110bdfc:	dc000117 	ldw	r16,4(sp)
8110be00:	dec00404 	addi	sp,sp,16
8110be04:	110f0a01 	jmpi	8110f0a0 <__swbuf_r>

8110be08 <_realloc_r>:
8110be08:	defff604 	addi	sp,sp,-40
8110be0c:	dc800215 	stw	r18,8(sp)
8110be10:	dfc00915 	stw	ra,36(sp)
8110be14:	df000815 	stw	fp,32(sp)
8110be18:	ddc00715 	stw	r23,28(sp)
8110be1c:	dd800615 	stw	r22,24(sp)
8110be20:	dd400515 	stw	r21,20(sp)
8110be24:	dd000415 	stw	r20,16(sp)
8110be28:	dcc00315 	stw	r19,12(sp)
8110be2c:	dc400115 	stw	r17,4(sp)
8110be30:	dc000015 	stw	r16,0(sp)
8110be34:	3025883a 	mov	r18,r6
8110be38:	2800b726 	beq	r5,zero,8110c118 <_realloc_r+0x310>
8110be3c:	282b883a 	mov	r21,r5
8110be40:	2029883a 	mov	r20,r4
8110be44:	1113c800 	call	81113c80 <__malloc_lock>
8110be48:	a8bfff17 	ldw	r2,-4(r21)
8110be4c:	043fff04 	movi	r16,-4
8110be50:	90c002c4 	addi	r3,r18,11
8110be54:	01000584 	movi	r4,22
8110be58:	acfffe04 	addi	r19,r21,-8
8110be5c:	1420703a 	and	r16,r2,r16
8110be60:	20c0332e 	bgeu	r4,r3,8110bf30 <_realloc_r+0x128>
8110be64:	047ffe04 	movi	r17,-8
8110be68:	1c62703a 	and	r17,r3,r17
8110be6c:	8807883a 	mov	r3,r17
8110be70:	88005816 	blt	r17,zero,8110bfd4 <_realloc_r+0x1cc>
8110be74:	8c805736 	bltu	r17,r18,8110bfd4 <_realloc_r+0x1cc>
8110be78:	80c0300e 	bge	r16,r3,8110bf3c <_realloc_r+0x134>
8110be7c:	072044b4 	movhi	fp,33042
8110be80:	e7290004 	addi	fp,fp,-23552
8110be84:	e1c00217 	ldw	r7,8(fp)
8110be88:	9c09883a 	add	r4,r19,r16
8110be8c:	22000117 	ldw	r8,4(r4)
8110be90:	21c06326 	beq	r4,r7,8110c020 <_realloc_r+0x218>
8110be94:	017fff84 	movi	r5,-2
8110be98:	414a703a 	and	r5,r8,r5
8110be9c:	214b883a 	add	r5,r4,r5
8110bea0:	29800117 	ldw	r6,4(r5)
8110bea4:	3180004c 	andi	r6,r6,1
8110bea8:	30003f26 	beq	r6,zero,8110bfa8 <_realloc_r+0x1a0>
8110beac:	1080004c 	andi	r2,r2,1
8110beb0:	10008326 	beq	r2,zero,8110c0c0 <_realloc_r+0x2b8>
8110beb4:	900b883a 	mov	r5,r18
8110beb8:	a009883a 	mov	r4,r20
8110bebc:	110a1300 	call	8110a130 <_malloc_r>
8110bec0:	1025883a 	mov	r18,r2
8110bec4:	10011e26 	beq	r2,zero,8110c340 <_realloc_r+0x538>
8110bec8:	a93fff17 	ldw	r4,-4(r21)
8110becc:	10fffe04 	addi	r3,r2,-8
8110bed0:	00bfff84 	movi	r2,-2
8110bed4:	2084703a 	and	r2,r4,r2
8110bed8:	9885883a 	add	r2,r19,r2
8110bedc:	1880ee26 	beq	r3,r2,8110c298 <_realloc_r+0x490>
8110bee0:	81bfff04 	addi	r6,r16,-4
8110bee4:	00800904 	movi	r2,36
8110bee8:	1180b836 	bltu	r2,r6,8110c1cc <_realloc_r+0x3c4>
8110beec:	00c004c4 	movi	r3,19
8110bef0:	19809636 	bltu	r3,r6,8110c14c <_realloc_r+0x344>
8110bef4:	9005883a 	mov	r2,r18
8110bef8:	a807883a 	mov	r3,r21
8110befc:	19000017 	ldw	r4,0(r3)
8110bf00:	11000015 	stw	r4,0(r2)
8110bf04:	19000117 	ldw	r4,4(r3)
8110bf08:	11000115 	stw	r4,4(r2)
8110bf0c:	18c00217 	ldw	r3,8(r3)
8110bf10:	10c00215 	stw	r3,8(r2)
8110bf14:	a80b883a 	mov	r5,r21
8110bf18:	a009883a 	mov	r4,r20
8110bf1c:	11095440 	call	81109544 <_free_r>
8110bf20:	a009883a 	mov	r4,r20
8110bf24:	1113ca40 	call	81113ca4 <__malloc_unlock>
8110bf28:	9005883a 	mov	r2,r18
8110bf2c:	00001206 	br	8110bf78 <_realloc_r+0x170>
8110bf30:	00c00404 	movi	r3,16
8110bf34:	1823883a 	mov	r17,r3
8110bf38:	003fce06 	br	8110be74 <__reset+0xfb0ebe74>
8110bf3c:	a825883a 	mov	r18,r21
8110bf40:	8445c83a 	sub	r2,r16,r17
8110bf44:	00c003c4 	movi	r3,15
8110bf48:	18802636 	bltu	r3,r2,8110bfe4 <_realloc_r+0x1dc>
8110bf4c:	99800117 	ldw	r6,4(r19)
8110bf50:	9c07883a 	add	r3,r19,r16
8110bf54:	3180004c 	andi	r6,r6,1
8110bf58:	3420b03a 	or	r16,r6,r16
8110bf5c:	9c000115 	stw	r16,4(r19)
8110bf60:	18800117 	ldw	r2,4(r3)
8110bf64:	10800054 	ori	r2,r2,1
8110bf68:	18800115 	stw	r2,4(r3)
8110bf6c:	a009883a 	mov	r4,r20
8110bf70:	1113ca40 	call	81113ca4 <__malloc_unlock>
8110bf74:	9005883a 	mov	r2,r18
8110bf78:	dfc00917 	ldw	ra,36(sp)
8110bf7c:	df000817 	ldw	fp,32(sp)
8110bf80:	ddc00717 	ldw	r23,28(sp)
8110bf84:	dd800617 	ldw	r22,24(sp)
8110bf88:	dd400517 	ldw	r21,20(sp)
8110bf8c:	dd000417 	ldw	r20,16(sp)
8110bf90:	dcc00317 	ldw	r19,12(sp)
8110bf94:	dc800217 	ldw	r18,8(sp)
8110bf98:	dc400117 	ldw	r17,4(sp)
8110bf9c:	dc000017 	ldw	r16,0(sp)
8110bfa0:	dec00a04 	addi	sp,sp,40
8110bfa4:	f800283a 	ret
8110bfa8:	017fff04 	movi	r5,-4
8110bfac:	414a703a 	and	r5,r8,r5
8110bfb0:	814d883a 	add	r6,r16,r5
8110bfb4:	30c01f16 	blt	r6,r3,8110c034 <_realloc_r+0x22c>
8110bfb8:	20800317 	ldw	r2,12(r4)
8110bfbc:	20c00217 	ldw	r3,8(r4)
8110bfc0:	a825883a 	mov	r18,r21
8110bfc4:	3021883a 	mov	r16,r6
8110bfc8:	18800315 	stw	r2,12(r3)
8110bfcc:	10c00215 	stw	r3,8(r2)
8110bfd0:	003fdb06 	br	8110bf40 <__reset+0xfb0ebf40>
8110bfd4:	00800304 	movi	r2,12
8110bfd8:	a0800015 	stw	r2,0(r20)
8110bfdc:	0005883a 	mov	r2,zero
8110bfe0:	003fe506 	br	8110bf78 <__reset+0xfb0ebf78>
8110bfe4:	98c00117 	ldw	r3,4(r19)
8110bfe8:	9c4b883a 	add	r5,r19,r17
8110bfec:	11000054 	ori	r4,r2,1
8110bff0:	18c0004c 	andi	r3,r3,1
8110bff4:	1c62b03a 	or	r17,r3,r17
8110bff8:	9c400115 	stw	r17,4(r19)
8110bffc:	29000115 	stw	r4,4(r5)
8110c000:	2885883a 	add	r2,r5,r2
8110c004:	10c00117 	ldw	r3,4(r2)
8110c008:	29400204 	addi	r5,r5,8
8110c00c:	a009883a 	mov	r4,r20
8110c010:	18c00054 	ori	r3,r3,1
8110c014:	10c00115 	stw	r3,4(r2)
8110c018:	11095440 	call	81109544 <_free_r>
8110c01c:	003fd306 	br	8110bf6c <__reset+0xfb0ebf6c>
8110c020:	017fff04 	movi	r5,-4
8110c024:	414a703a 	and	r5,r8,r5
8110c028:	89800404 	addi	r6,r17,16
8110c02c:	8151883a 	add	r8,r16,r5
8110c030:	4180590e 	bge	r8,r6,8110c198 <_realloc_r+0x390>
8110c034:	1080004c 	andi	r2,r2,1
8110c038:	103f9e1e 	bne	r2,zero,8110beb4 <__reset+0xfb0ebeb4>
8110c03c:	adbffe17 	ldw	r22,-8(r21)
8110c040:	00bfff04 	movi	r2,-4
8110c044:	9dadc83a 	sub	r22,r19,r22
8110c048:	b1800117 	ldw	r6,4(r22)
8110c04c:	3084703a 	and	r2,r6,r2
8110c050:	20002026 	beq	r4,zero,8110c0d4 <_realloc_r+0x2cc>
8110c054:	80af883a 	add	r23,r16,r2
8110c058:	b96f883a 	add	r23,r23,r5
8110c05c:	21c05f26 	beq	r4,r7,8110c1dc <_realloc_r+0x3d4>
8110c060:	b8c01c16 	blt	r23,r3,8110c0d4 <_realloc_r+0x2cc>
8110c064:	20800317 	ldw	r2,12(r4)
8110c068:	20c00217 	ldw	r3,8(r4)
8110c06c:	81bfff04 	addi	r6,r16,-4
8110c070:	01000904 	movi	r4,36
8110c074:	18800315 	stw	r2,12(r3)
8110c078:	10c00215 	stw	r3,8(r2)
8110c07c:	b0c00217 	ldw	r3,8(r22)
8110c080:	b0800317 	ldw	r2,12(r22)
8110c084:	b4800204 	addi	r18,r22,8
8110c088:	18800315 	stw	r2,12(r3)
8110c08c:	10c00215 	stw	r3,8(r2)
8110c090:	21801b36 	bltu	r4,r6,8110c100 <_realloc_r+0x2f8>
8110c094:	008004c4 	movi	r2,19
8110c098:	1180352e 	bgeu	r2,r6,8110c170 <_realloc_r+0x368>
8110c09c:	a8800017 	ldw	r2,0(r21)
8110c0a0:	b0800215 	stw	r2,8(r22)
8110c0a4:	a8800117 	ldw	r2,4(r21)
8110c0a8:	b0800315 	stw	r2,12(r22)
8110c0ac:	008006c4 	movi	r2,27
8110c0b0:	11807f36 	bltu	r2,r6,8110c2b0 <_realloc_r+0x4a8>
8110c0b4:	b0800404 	addi	r2,r22,16
8110c0b8:	ad400204 	addi	r21,r21,8
8110c0bc:	00002d06 	br	8110c174 <_realloc_r+0x36c>
8110c0c0:	adbffe17 	ldw	r22,-8(r21)
8110c0c4:	00bfff04 	movi	r2,-4
8110c0c8:	9dadc83a 	sub	r22,r19,r22
8110c0cc:	b1000117 	ldw	r4,4(r22)
8110c0d0:	2084703a 	and	r2,r4,r2
8110c0d4:	b03f7726 	beq	r22,zero,8110beb4 <__reset+0xfb0ebeb4>
8110c0d8:	80af883a 	add	r23,r16,r2
8110c0dc:	b8ff7516 	blt	r23,r3,8110beb4 <__reset+0xfb0ebeb4>
8110c0e0:	b0800317 	ldw	r2,12(r22)
8110c0e4:	b0c00217 	ldw	r3,8(r22)
8110c0e8:	81bfff04 	addi	r6,r16,-4
8110c0ec:	01000904 	movi	r4,36
8110c0f0:	18800315 	stw	r2,12(r3)
8110c0f4:	10c00215 	stw	r3,8(r2)
8110c0f8:	b4800204 	addi	r18,r22,8
8110c0fc:	21bfe52e 	bgeu	r4,r6,8110c094 <__reset+0xfb0ec094>
8110c100:	a80b883a 	mov	r5,r21
8110c104:	9009883a 	mov	r4,r18
8110c108:	110aa200 	call	8110aa20 <memmove>
8110c10c:	b821883a 	mov	r16,r23
8110c110:	b027883a 	mov	r19,r22
8110c114:	003f8a06 	br	8110bf40 <__reset+0xfb0ebf40>
8110c118:	300b883a 	mov	r5,r6
8110c11c:	dfc00917 	ldw	ra,36(sp)
8110c120:	df000817 	ldw	fp,32(sp)
8110c124:	ddc00717 	ldw	r23,28(sp)
8110c128:	dd800617 	ldw	r22,24(sp)
8110c12c:	dd400517 	ldw	r21,20(sp)
8110c130:	dd000417 	ldw	r20,16(sp)
8110c134:	dcc00317 	ldw	r19,12(sp)
8110c138:	dc800217 	ldw	r18,8(sp)
8110c13c:	dc400117 	ldw	r17,4(sp)
8110c140:	dc000017 	ldw	r16,0(sp)
8110c144:	dec00a04 	addi	sp,sp,40
8110c148:	110a1301 	jmpi	8110a130 <_malloc_r>
8110c14c:	a8c00017 	ldw	r3,0(r21)
8110c150:	90c00015 	stw	r3,0(r18)
8110c154:	a8c00117 	ldw	r3,4(r21)
8110c158:	90c00115 	stw	r3,4(r18)
8110c15c:	00c006c4 	movi	r3,27
8110c160:	19804536 	bltu	r3,r6,8110c278 <_realloc_r+0x470>
8110c164:	90800204 	addi	r2,r18,8
8110c168:	a8c00204 	addi	r3,r21,8
8110c16c:	003f6306 	br	8110befc <__reset+0xfb0ebefc>
8110c170:	9005883a 	mov	r2,r18
8110c174:	a8c00017 	ldw	r3,0(r21)
8110c178:	b821883a 	mov	r16,r23
8110c17c:	b027883a 	mov	r19,r22
8110c180:	10c00015 	stw	r3,0(r2)
8110c184:	a8c00117 	ldw	r3,4(r21)
8110c188:	10c00115 	stw	r3,4(r2)
8110c18c:	a8c00217 	ldw	r3,8(r21)
8110c190:	10c00215 	stw	r3,8(r2)
8110c194:	003f6a06 	br	8110bf40 <__reset+0xfb0ebf40>
8110c198:	9c67883a 	add	r19,r19,r17
8110c19c:	4445c83a 	sub	r2,r8,r17
8110c1a0:	e4c00215 	stw	r19,8(fp)
8110c1a4:	10800054 	ori	r2,r2,1
8110c1a8:	98800115 	stw	r2,4(r19)
8110c1ac:	a8bfff17 	ldw	r2,-4(r21)
8110c1b0:	a009883a 	mov	r4,r20
8110c1b4:	1080004c 	andi	r2,r2,1
8110c1b8:	1462b03a 	or	r17,r2,r17
8110c1bc:	ac7fff15 	stw	r17,-4(r21)
8110c1c0:	1113ca40 	call	81113ca4 <__malloc_unlock>
8110c1c4:	a805883a 	mov	r2,r21
8110c1c8:	003f6b06 	br	8110bf78 <__reset+0xfb0ebf78>
8110c1cc:	a80b883a 	mov	r5,r21
8110c1d0:	9009883a 	mov	r4,r18
8110c1d4:	110aa200 	call	8110aa20 <memmove>
8110c1d8:	003f4e06 	br	8110bf14 <__reset+0xfb0ebf14>
8110c1dc:	89000404 	addi	r4,r17,16
8110c1e0:	b93fbc16 	blt	r23,r4,8110c0d4 <__reset+0xfb0ec0d4>
8110c1e4:	b0800317 	ldw	r2,12(r22)
8110c1e8:	b0c00217 	ldw	r3,8(r22)
8110c1ec:	81bfff04 	addi	r6,r16,-4
8110c1f0:	01000904 	movi	r4,36
8110c1f4:	18800315 	stw	r2,12(r3)
8110c1f8:	10c00215 	stw	r3,8(r2)
8110c1fc:	b4800204 	addi	r18,r22,8
8110c200:	21804336 	bltu	r4,r6,8110c310 <_realloc_r+0x508>
8110c204:	008004c4 	movi	r2,19
8110c208:	11803f2e 	bgeu	r2,r6,8110c308 <_realloc_r+0x500>
8110c20c:	a8800017 	ldw	r2,0(r21)
8110c210:	b0800215 	stw	r2,8(r22)
8110c214:	a8800117 	ldw	r2,4(r21)
8110c218:	b0800315 	stw	r2,12(r22)
8110c21c:	008006c4 	movi	r2,27
8110c220:	11803f36 	bltu	r2,r6,8110c320 <_realloc_r+0x518>
8110c224:	b0800404 	addi	r2,r22,16
8110c228:	ad400204 	addi	r21,r21,8
8110c22c:	a8c00017 	ldw	r3,0(r21)
8110c230:	10c00015 	stw	r3,0(r2)
8110c234:	a8c00117 	ldw	r3,4(r21)
8110c238:	10c00115 	stw	r3,4(r2)
8110c23c:	a8c00217 	ldw	r3,8(r21)
8110c240:	10c00215 	stw	r3,8(r2)
8110c244:	b447883a 	add	r3,r22,r17
8110c248:	bc45c83a 	sub	r2,r23,r17
8110c24c:	e0c00215 	stw	r3,8(fp)
8110c250:	10800054 	ori	r2,r2,1
8110c254:	18800115 	stw	r2,4(r3)
8110c258:	b0800117 	ldw	r2,4(r22)
8110c25c:	a009883a 	mov	r4,r20
8110c260:	1080004c 	andi	r2,r2,1
8110c264:	1462b03a 	or	r17,r2,r17
8110c268:	b4400115 	stw	r17,4(r22)
8110c26c:	1113ca40 	call	81113ca4 <__malloc_unlock>
8110c270:	9005883a 	mov	r2,r18
8110c274:	003f4006 	br	8110bf78 <__reset+0xfb0ebf78>
8110c278:	a8c00217 	ldw	r3,8(r21)
8110c27c:	90c00215 	stw	r3,8(r18)
8110c280:	a8c00317 	ldw	r3,12(r21)
8110c284:	90c00315 	stw	r3,12(r18)
8110c288:	30801126 	beq	r6,r2,8110c2d0 <_realloc_r+0x4c8>
8110c28c:	90800404 	addi	r2,r18,16
8110c290:	a8c00404 	addi	r3,r21,16
8110c294:	003f1906 	br	8110befc <__reset+0xfb0ebefc>
8110c298:	90ffff17 	ldw	r3,-4(r18)
8110c29c:	00bfff04 	movi	r2,-4
8110c2a0:	a825883a 	mov	r18,r21
8110c2a4:	1884703a 	and	r2,r3,r2
8110c2a8:	80a1883a 	add	r16,r16,r2
8110c2ac:	003f2406 	br	8110bf40 <__reset+0xfb0ebf40>
8110c2b0:	a8800217 	ldw	r2,8(r21)
8110c2b4:	b0800415 	stw	r2,16(r22)
8110c2b8:	a8800317 	ldw	r2,12(r21)
8110c2bc:	b0800515 	stw	r2,20(r22)
8110c2c0:	31000a26 	beq	r6,r4,8110c2ec <_realloc_r+0x4e4>
8110c2c4:	b0800604 	addi	r2,r22,24
8110c2c8:	ad400404 	addi	r21,r21,16
8110c2cc:	003fa906 	br	8110c174 <__reset+0xfb0ec174>
8110c2d0:	a9000417 	ldw	r4,16(r21)
8110c2d4:	90800604 	addi	r2,r18,24
8110c2d8:	a8c00604 	addi	r3,r21,24
8110c2dc:	91000415 	stw	r4,16(r18)
8110c2e0:	a9000517 	ldw	r4,20(r21)
8110c2e4:	91000515 	stw	r4,20(r18)
8110c2e8:	003f0406 	br	8110befc <__reset+0xfb0ebefc>
8110c2ec:	a8c00417 	ldw	r3,16(r21)
8110c2f0:	ad400604 	addi	r21,r21,24
8110c2f4:	b0800804 	addi	r2,r22,32
8110c2f8:	b0c00615 	stw	r3,24(r22)
8110c2fc:	a8ffff17 	ldw	r3,-4(r21)
8110c300:	b0c00715 	stw	r3,28(r22)
8110c304:	003f9b06 	br	8110c174 <__reset+0xfb0ec174>
8110c308:	9005883a 	mov	r2,r18
8110c30c:	003fc706 	br	8110c22c <__reset+0xfb0ec22c>
8110c310:	a80b883a 	mov	r5,r21
8110c314:	9009883a 	mov	r4,r18
8110c318:	110aa200 	call	8110aa20 <memmove>
8110c31c:	003fc906 	br	8110c244 <__reset+0xfb0ec244>
8110c320:	a8800217 	ldw	r2,8(r21)
8110c324:	b0800415 	stw	r2,16(r22)
8110c328:	a8800317 	ldw	r2,12(r21)
8110c32c:	b0800515 	stw	r2,20(r22)
8110c330:	31000726 	beq	r6,r4,8110c350 <_realloc_r+0x548>
8110c334:	b0800604 	addi	r2,r22,24
8110c338:	ad400404 	addi	r21,r21,16
8110c33c:	003fbb06 	br	8110c22c <__reset+0xfb0ec22c>
8110c340:	a009883a 	mov	r4,r20
8110c344:	1113ca40 	call	81113ca4 <__malloc_unlock>
8110c348:	0005883a 	mov	r2,zero
8110c34c:	003f0a06 	br	8110bf78 <__reset+0xfb0ebf78>
8110c350:	a8c00417 	ldw	r3,16(r21)
8110c354:	ad400604 	addi	r21,r21,24
8110c358:	b0800804 	addi	r2,r22,32
8110c35c:	b0c00615 	stw	r3,24(r22)
8110c360:	a8ffff17 	ldw	r3,-4(r21)
8110c364:	b0c00715 	stw	r3,28(r22)
8110c368:	003fb006 	br	8110c22c <__reset+0xfb0ec22c>

8110c36c <__fpclassifyd>:
8110c36c:	00a00034 	movhi	r2,32768
8110c370:	10bfffc4 	addi	r2,r2,-1
8110c374:	2884703a 	and	r2,r5,r2
8110c378:	10000726 	beq	r2,zero,8110c398 <__fpclassifyd+0x2c>
8110c37c:	00fffc34 	movhi	r3,65520
8110c380:	019ff834 	movhi	r6,32736
8110c384:	28c7883a 	add	r3,r5,r3
8110c388:	31bfffc4 	addi	r6,r6,-1
8110c38c:	30c00536 	bltu	r6,r3,8110c3a4 <__fpclassifyd+0x38>
8110c390:	00800104 	movi	r2,4
8110c394:	f800283a 	ret
8110c398:	2000021e 	bne	r4,zero,8110c3a4 <__fpclassifyd+0x38>
8110c39c:	00800084 	movi	r2,2
8110c3a0:	f800283a 	ret
8110c3a4:	00dffc34 	movhi	r3,32752
8110c3a8:	019ff834 	movhi	r6,32736
8110c3ac:	28cb883a 	add	r5,r5,r3
8110c3b0:	31bfffc4 	addi	r6,r6,-1
8110c3b4:	317ff62e 	bgeu	r6,r5,8110c390 <__reset+0xfb0ec390>
8110c3b8:	01400434 	movhi	r5,16
8110c3bc:	297fffc4 	addi	r5,r5,-1
8110c3c0:	28800236 	bltu	r5,r2,8110c3cc <__fpclassifyd+0x60>
8110c3c4:	008000c4 	movi	r2,3
8110c3c8:	f800283a 	ret
8110c3cc:	10c00226 	beq	r2,r3,8110c3d8 <__fpclassifyd+0x6c>
8110c3d0:	0005883a 	mov	r2,zero
8110c3d4:	f800283a 	ret
8110c3d8:	2005003a 	cmpeq	r2,r4,zero
8110c3dc:	f800283a 	ret

8110c3e0 <_sbrk_r>:
8110c3e0:	defffd04 	addi	sp,sp,-12
8110c3e4:	dc000015 	stw	r16,0(sp)
8110c3e8:	042044b4 	movhi	r16,33042
8110c3ec:	dc400115 	stw	r17,4(sp)
8110c3f0:	842f3104 	addi	r16,r16,-17212
8110c3f4:	2023883a 	mov	r17,r4
8110c3f8:	2809883a 	mov	r4,r5
8110c3fc:	dfc00215 	stw	ra,8(sp)
8110c400:	80000015 	stw	zero,0(r16)
8110c404:	1113e640 	call	81113e64 <sbrk>
8110c408:	00ffffc4 	movi	r3,-1
8110c40c:	10c00526 	beq	r2,r3,8110c424 <_sbrk_r+0x44>
8110c410:	dfc00217 	ldw	ra,8(sp)
8110c414:	dc400117 	ldw	r17,4(sp)
8110c418:	dc000017 	ldw	r16,0(sp)
8110c41c:	dec00304 	addi	sp,sp,12
8110c420:	f800283a 	ret
8110c424:	80c00017 	ldw	r3,0(r16)
8110c428:	183ff926 	beq	r3,zero,8110c410 <__reset+0xfb0ec410>
8110c42c:	88c00015 	stw	r3,0(r17)
8110c430:	003ff706 	br	8110c410 <__reset+0xfb0ec410>

8110c434 <__sread>:
8110c434:	defffe04 	addi	sp,sp,-8
8110c438:	dc000015 	stw	r16,0(sp)
8110c43c:	2821883a 	mov	r16,r5
8110c440:	2940038f 	ldh	r5,14(r5)
8110c444:	dfc00115 	stw	ra,4(sp)
8110c448:	110f78c0 	call	8110f78c <_read_r>
8110c44c:	10000716 	blt	r2,zero,8110c46c <__sread+0x38>
8110c450:	80c01417 	ldw	r3,80(r16)
8110c454:	1887883a 	add	r3,r3,r2
8110c458:	80c01415 	stw	r3,80(r16)
8110c45c:	dfc00117 	ldw	ra,4(sp)
8110c460:	dc000017 	ldw	r16,0(sp)
8110c464:	dec00204 	addi	sp,sp,8
8110c468:	f800283a 	ret
8110c46c:	80c0030b 	ldhu	r3,12(r16)
8110c470:	18fbffcc 	andi	r3,r3,61439
8110c474:	80c0030d 	sth	r3,12(r16)
8110c478:	dfc00117 	ldw	ra,4(sp)
8110c47c:	dc000017 	ldw	r16,0(sp)
8110c480:	dec00204 	addi	sp,sp,8
8110c484:	f800283a 	ret

8110c488 <__seofread>:
8110c488:	0005883a 	mov	r2,zero
8110c48c:	f800283a 	ret

8110c490 <__swrite>:
8110c490:	2880030b 	ldhu	r2,12(r5)
8110c494:	defffb04 	addi	sp,sp,-20
8110c498:	dcc00315 	stw	r19,12(sp)
8110c49c:	dc800215 	stw	r18,8(sp)
8110c4a0:	dc400115 	stw	r17,4(sp)
8110c4a4:	dc000015 	stw	r16,0(sp)
8110c4a8:	dfc00415 	stw	ra,16(sp)
8110c4ac:	10c0400c 	andi	r3,r2,256
8110c4b0:	2821883a 	mov	r16,r5
8110c4b4:	2023883a 	mov	r17,r4
8110c4b8:	3025883a 	mov	r18,r6
8110c4bc:	3827883a 	mov	r19,r7
8110c4c0:	18000526 	beq	r3,zero,8110c4d8 <__swrite+0x48>
8110c4c4:	2940038f 	ldh	r5,14(r5)
8110c4c8:	01c00084 	movi	r7,2
8110c4cc:	000d883a 	mov	r6,zero
8110c4d0:	110f72c0 	call	8110f72c <_lseek_r>
8110c4d4:	8080030b 	ldhu	r2,12(r16)
8110c4d8:	8140038f 	ldh	r5,14(r16)
8110c4dc:	10bbffcc 	andi	r2,r2,61439
8110c4e0:	980f883a 	mov	r7,r19
8110c4e4:	900d883a 	mov	r6,r18
8110c4e8:	8809883a 	mov	r4,r17
8110c4ec:	8080030d 	sth	r2,12(r16)
8110c4f0:	dfc00417 	ldw	ra,16(sp)
8110c4f4:	dcc00317 	ldw	r19,12(sp)
8110c4f8:	dc800217 	ldw	r18,8(sp)
8110c4fc:	dc400117 	ldw	r17,4(sp)
8110c500:	dc000017 	ldw	r16,0(sp)
8110c504:	dec00504 	addi	sp,sp,20
8110c508:	110f1f81 	jmpi	8110f1f8 <_write_r>

8110c50c <__sseek>:
8110c50c:	defffe04 	addi	sp,sp,-8
8110c510:	dc000015 	stw	r16,0(sp)
8110c514:	2821883a 	mov	r16,r5
8110c518:	2940038f 	ldh	r5,14(r5)
8110c51c:	dfc00115 	stw	ra,4(sp)
8110c520:	110f72c0 	call	8110f72c <_lseek_r>
8110c524:	00ffffc4 	movi	r3,-1
8110c528:	10c00826 	beq	r2,r3,8110c54c <__sseek+0x40>
8110c52c:	80c0030b 	ldhu	r3,12(r16)
8110c530:	80801415 	stw	r2,80(r16)
8110c534:	18c40014 	ori	r3,r3,4096
8110c538:	80c0030d 	sth	r3,12(r16)
8110c53c:	dfc00117 	ldw	ra,4(sp)
8110c540:	dc000017 	ldw	r16,0(sp)
8110c544:	dec00204 	addi	sp,sp,8
8110c548:	f800283a 	ret
8110c54c:	80c0030b 	ldhu	r3,12(r16)
8110c550:	18fbffcc 	andi	r3,r3,61439
8110c554:	80c0030d 	sth	r3,12(r16)
8110c558:	dfc00117 	ldw	ra,4(sp)
8110c55c:	dc000017 	ldw	r16,0(sp)
8110c560:	dec00204 	addi	sp,sp,8
8110c564:	f800283a 	ret

8110c568 <__sclose>:
8110c568:	2940038f 	ldh	r5,14(r5)
8110c56c:	110f2581 	jmpi	8110f258 <_close_r>

8110c570 <strcmp>:
8110c570:	2144b03a 	or	r2,r4,r5
8110c574:	108000cc 	andi	r2,r2,3
8110c578:	1000171e 	bne	r2,zero,8110c5d8 <strcmp+0x68>
8110c57c:	20800017 	ldw	r2,0(r4)
8110c580:	28c00017 	ldw	r3,0(r5)
8110c584:	10c0141e 	bne	r2,r3,8110c5d8 <strcmp+0x68>
8110c588:	027fbff4 	movhi	r9,65279
8110c58c:	4a7fbfc4 	addi	r9,r9,-257
8110c590:	0086303a 	nor	r3,zero,r2
8110c594:	02202074 	movhi	r8,32897
8110c598:	1245883a 	add	r2,r2,r9
8110c59c:	42202004 	addi	r8,r8,-32640
8110c5a0:	10c4703a 	and	r2,r2,r3
8110c5a4:	1204703a 	and	r2,r2,r8
8110c5a8:	10000226 	beq	r2,zero,8110c5b4 <strcmp+0x44>
8110c5ac:	00002306 	br	8110c63c <strcmp+0xcc>
8110c5b0:	1000221e 	bne	r2,zero,8110c63c <strcmp+0xcc>
8110c5b4:	21000104 	addi	r4,r4,4
8110c5b8:	20c00017 	ldw	r3,0(r4)
8110c5bc:	29400104 	addi	r5,r5,4
8110c5c0:	29800017 	ldw	r6,0(r5)
8110c5c4:	1a4f883a 	add	r7,r3,r9
8110c5c8:	00c4303a 	nor	r2,zero,r3
8110c5cc:	3884703a 	and	r2,r7,r2
8110c5d0:	1204703a 	and	r2,r2,r8
8110c5d4:	19bff626 	beq	r3,r6,8110c5b0 <__reset+0xfb0ec5b0>
8110c5d8:	20800003 	ldbu	r2,0(r4)
8110c5dc:	10c03fcc 	andi	r3,r2,255
8110c5e0:	18c0201c 	xori	r3,r3,128
8110c5e4:	18ffe004 	addi	r3,r3,-128
8110c5e8:	18000c26 	beq	r3,zero,8110c61c <strcmp+0xac>
8110c5ec:	29800007 	ldb	r6,0(r5)
8110c5f0:	19800326 	beq	r3,r6,8110c600 <strcmp+0x90>
8110c5f4:	00001306 	br	8110c644 <strcmp+0xd4>
8110c5f8:	29800007 	ldb	r6,0(r5)
8110c5fc:	11800b1e 	bne	r2,r6,8110c62c <strcmp+0xbc>
8110c600:	21000044 	addi	r4,r4,1
8110c604:	20c00003 	ldbu	r3,0(r4)
8110c608:	29400044 	addi	r5,r5,1
8110c60c:	18803fcc 	andi	r2,r3,255
8110c610:	1080201c 	xori	r2,r2,128
8110c614:	10bfe004 	addi	r2,r2,-128
8110c618:	103ff71e 	bne	r2,zero,8110c5f8 <__reset+0xfb0ec5f8>
8110c61c:	0007883a 	mov	r3,zero
8110c620:	28800003 	ldbu	r2,0(r5)
8110c624:	1885c83a 	sub	r2,r3,r2
8110c628:	f800283a 	ret
8110c62c:	28800003 	ldbu	r2,0(r5)
8110c630:	18c03fcc 	andi	r3,r3,255
8110c634:	1885c83a 	sub	r2,r3,r2
8110c638:	f800283a 	ret
8110c63c:	0005883a 	mov	r2,zero
8110c640:	f800283a 	ret
8110c644:	10c03fcc 	andi	r3,r2,255
8110c648:	003ff506 	br	8110c620 <__reset+0xfb0ec620>

8110c64c <__ssprint_r>:
8110c64c:	30800217 	ldw	r2,8(r6)
8110c650:	defff604 	addi	sp,sp,-40
8110c654:	dc800215 	stw	r18,8(sp)
8110c658:	dfc00915 	stw	ra,36(sp)
8110c65c:	df000815 	stw	fp,32(sp)
8110c660:	ddc00715 	stw	r23,28(sp)
8110c664:	dd800615 	stw	r22,24(sp)
8110c668:	dd400515 	stw	r21,20(sp)
8110c66c:	dd000415 	stw	r20,16(sp)
8110c670:	dcc00315 	stw	r19,12(sp)
8110c674:	dc400115 	stw	r17,4(sp)
8110c678:	dc000015 	stw	r16,0(sp)
8110c67c:	3025883a 	mov	r18,r6
8110c680:	10005826 	beq	r2,zero,8110c7e4 <__ssprint_r+0x198>
8110c684:	2027883a 	mov	r19,r4
8110c688:	35c00017 	ldw	r23,0(r6)
8110c68c:	29000017 	ldw	r4,0(r5)
8110c690:	28800217 	ldw	r2,8(r5)
8110c694:	2823883a 	mov	r17,r5
8110c698:	0039883a 	mov	fp,zero
8110c69c:	0021883a 	mov	r16,zero
8110c6a0:	80003926 	beq	r16,zero,8110c788 <__ssprint_r+0x13c>
8110c6a4:	102b883a 	mov	r21,r2
8110c6a8:	102d883a 	mov	r22,r2
8110c6ac:	80803a36 	bltu	r16,r2,8110c798 <__ssprint_r+0x14c>
8110c6b0:	88c0030b 	ldhu	r3,12(r17)
8110c6b4:	1881200c 	andi	r2,r3,1152
8110c6b8:	10002626 	beq	r2,zero,8110c754 <__ssprint_r+0x108>
8110c6bc:	88800517 	ldw	r2,20(r17)
8110c6c0:	89400417 	ldw	r5,16(r17)
8110c6c4:	81800044 	addi	r6,r16,1
8110c6c8:	108f883a 	add	r7,r2,r2
8110c6cc:	3885883a 	add	r2,r7,r2
8110c6d0:	100ed7fa 	srli	r7,r2,31
8110c6d4:	216dc83a 	sub	r22,r4,r5
8110c6d8:	3589883a 	add	r4,r6,r22
8110c6dc:	3885883a 	add	r2,r7,r2
8110c6e0:	102bd07a 	srai	r21,r2,1
8110c6e4:	a80d883a 	mov	r6,r21
8110c6e8:	a900022e 	bgeu	r21,r4,8110c6f4 <__ssprint_r+0xa8>
8110c6ec:	202b883a 	mov	r21,r4
8110c6f0:	200d883a 	mov	r6,r4
8110c6f4:	18c1000c 	andi	r3,r3,1024
8110c6f8:	18002a26 	beq	r3,zero,8110c7a4 <__ssprint_r+0x158>
8110c6fc:	300b883a 	mov	r5,r6
8110c700:	9809883a 	mov	r4,r19
8110c704:	110a1300 	call	8110a130 <_malloc_r>
8110c708:	1029883a 	mov	r20,r2
8110c70c:	10002c26 	beq	r2,zero,8110c7c0 <__ssprint_r+0x174>
8110c710:	89400417 	ldw	r5,16(r17)
8110c714:	b00d883a 	mov	r6,r22
8110c718:	1009883a 	mov	r4,r2
8110c71c:	1102b500 	call	81102b50 <memcpy>
8110c720:	8880030b 	ldhu	r2,12(r17)
8110c724:	00fedfc4 	movi	r3,-1153
8110c728:	10c4703a 	and	r2,r2,r3
8110c72c:	10802014 	ori	r2,r2,128
8110c730:	8880030d 	sth	r2,12(r17)
8110c734:	a589883a 	add	r4,r20,r22
8110c738:	adadc83a 	sub	r22,r21,r22
8110c73c:	8d400515 	stw	r21,20(r17)
8110c740:	8d800215 	stw	r22,8(r17)
8110c744:	8d000415 	stw	r20,16(r17)
8110c748:	89000015 	stw	r4,0(r17)
8110c74c:	802b883a 	mov	r21,r16
8110c750:	802d883a 	mov	r22,r16
8110c754:	b00d883a 	mov	r6,r22
8110c758:	e00b883a 	mov	r5,fp
8110c75c:	110aa200 	call	8110aa20 <memmove>
8110c760:	88800217 	ldw	r2,8(r17)
8110c764:	89000017 	ldw	r4,0(r17)
8110c768:	90c00217 	ldw	r3,8(r18)
8110c76c:	1545c83a 	sub	r2,r2,r21
8110c770:	2589883a 	add	r4,r4,r22
8110c774:	88800215 	stw	r2,8(r17)
8110c778:	89000015 	stw	r4,0(r17)
8110c77c:	1c21c83a 	sub	r16,r3,r16
8110c780:	94000215 	stw	r16,8(r18)
8110c784:	80001726 	beq	r16,zero,8110c7e4 <__ssprint_r+0x198>
8110c788:	bf000017 	ldw	fp,0(r23)
8110c78c:	bc000117 	ldw	r16,4(r23)
8110c790:	bdc00204 	addi	r23,r23,8
8110c794:	003fc206 	br	8110c6a0 <__reset+0xfb0ec6a0>
8110c798:	802b883a 	mov	r21,r16
8110c79c:	802d883a 	mov	r22,r16
8110c7a0:	003fec06 	br	8110c754 <__reset+0xfb0ec754>
8110c7a4:	9809883a 	mov	r4,r19
8110c7a8:	110be080 	call	8110be08 <_realloc_r>
8110c7ac:	1029883a 	mov	r20,r2
8110c7b0:	103fe01e 	bne	r2,zero,8110c734 <__reset+0xfb0ec734>
8110c7b4:	89400417 	ldw	r5,16(r17)
8110c7b8:	9809883a 	mov	r4,r19
8110c7bc:	11095440 	call	81109544 <_free_r>
8110c7c0:	88c0030b 	ldhu	r3,12(r17)
8110c7c4:	00800304 	movi	r2,12
8110c7c8:	98800015 	stw	r2,0(r19)
8110c7cc:	18c01014 	ori	r3,r3,64
8110c7d0:	88c0030d 	sth	r3,12(r17)
8110c7d4:	00bfffc4 	movi	r2,-1
8110c7d8:	90000215 	stw	zero,8(r18)
8110c7dc:	90000115 	stw	zero,4(r18)
8110c7e0:	00000206 	br	8110c7ec <__ssprint_r+0x1a0>
8110c7e4:	90000115 	stw	zero,4(r18)
8110c7e8:	0005883a 	mov	r2,zero
8110c7ec:	dfc00917 	ldw	ra,36(sp)
8110c7f0:	df000817 	ldw	fp,32(sp)
8110c7f4:	ddc00717 	ldw	r23,28(sp)
8110c7f8:	dd800617 	ldw	r22,24(sp)
8110c7fc:	dd400517 	ldw	r21,20(sp)
8110c800:	dd000417 	ldw	r20,16(sp)
8110c804:	dcc00317 	ldw	r19,12(sp)
8110c808:	dc800217 	ldw	r18,8(sp)
8110c80c:	dc400117 	ldw	r17,4(sp)
8110c810:	dc000017 	ldw	r16,0(sp)
8110c814:	dec00a04 	addi	sp,sp,40
8110c818:	f800283a 	ret

8110c81c <___svfiprintf_internal_r>:
8110c81c:	2880030b 	ldhu	r2,12(r5)
8110c820:	deffc804 	addi	sp,sp,-224
8110c824:	dcc03115 	stw	r19,196(sp)
8110c828:	dfc03715 	stw	ra,220(sp)
8110c82c:	df003615 	stw	fp,216(sp)
8110c830:	ddc03515 	stw	r23,212(sp)
8110c834:	dd803415 	stw	r22,208(sp)
8110c838:	dd403315 	stw	r21,204(sp)
8110c83c:	dd003215 	stw	r20,200(sp)
8110c840:	dc803015 	stw	r18,192(sp)
8110c844:	dc402f15 	stw	r17,188(sp)
8110c848:	dc002e15 	stw	r16,184(sp)
8110c84c:	d9402715 	stw	r5,156(sp)
8110c850:	d9002a15 	stw	r4,168(sp)
8110c854:	1080200c 	andi	r2,r2,128
8110c858:	d9c02315 	stw	r7,140(sp)
8110c85c:	3027883a 	mov	r19,r6
8110c860:	10000226 	beq	r2,zero,8110c86c <___svfiprintf_internal_r+0x50>
8110c864:	28800417 	ldw	r2,16(r5)
8110c868:	10041d26 	beq	r2,zero,8110d8e0 <___svfiprintf_internal_r+0x10c4>
8110c86c:	dac01a04 	addi	r11,sp,104
8110c870:	dac01e15 	stw	r11,120(sp)
8110c874:	d8801e17 	ldw	r2,120(sp)
8110c878:	dac019c4 	addi	r11,sp,103
8110c87c:	dd402a17 	ldw	r21,168(sp)
8110c880:	ddc02717 	ldw	r23,156(sp)
8110c884:	05a044b4 	movhi	r22,33042
8110c888:	052044b4 	movhi	r20,33042
8110c88c:	dac01f15 	stw	r11,124(sp)
8110c890:	12d7c83a 	sub	r11,r2,r11
8110c894:	b5a66b04 	addi	r22,r22,-26196
8110c898:	a5266704 	addi	r20,r20,-26212
8110c89c:	dec01a15 	stw	sp,104(sp)
8110c8a0:	d8001c15 	stw	zero,112(sp)
8110c8a4:	d8001b15 	stw	zero,108(sp)
8110c8a8:	d811883a 	mov	r8,sp
8110c8ac:	d8002915 	stw	zero,164(sp)
8110c8b0:	d8002515 	stw	zero,148(sp)
8110c8b4:	dac02b15 	stw	r11,172(sp)
8110c8b8:	98800007 	ldb	r2,0(r19)
8110c8bc:	1002dd26 	beq	r2,zero,8110d434 <___svfiprintf_internal_r+0xc18>
8110c8c0:	00c00944 	movi	r3,37
8110c8c4:	9823883a 	mov	r17,r19
8110c8c8:	10c0021e 	bne	r2,r3,8110c8d4 <___svfiprintf_internal_r+0xb8>
8110c8cc:	00001406 	br	8110c920 <___svfiprintf_internal_r+0x104>
8110c8d0:	10c00326 	beq	r2,r3,8110c8e0 <___svfiprintf_internal_r+0xc4>
8110c8d4:	8c400044 	addi	r17,r17,1
8110c8d8:	88800007 	ldb	r2,0(r17)
8110c8dc:	103ffc1e 	bne	r2,zero,8110c8d0 <__reset+0xfb0ec8d0>
8110c8e0:	8ce1c83a 	sub	r16,r17,r19
8110c8e4:	80000e26 	beq	r16,zero,8110c920 <___svfiprintf_internal_r+0x104>
8110c8e8:	d8c01c17 	ldw	r3,112(sp)
8110c8ec:	d8801b17 	ldw	r2,108(sp)
8110c8f0:	44c00015 	stw	r19,0(r8)
8110c8f4:	1c07883a 	add	r3,r3,r16
8110c8f8:	10800044 	addi	r2,r2,1
8110c8fc:	d8c01c15 	stw	r3,112(sp)
8110c900:	44000115 	stw	r16,4(r8)
8110c904:	d8801b15 	stw	r2,108(sp)
8110c908:	00c001c4 	movi	r3,7
8110c90c:	18831e16 	blt	r3,r2,8110d588 <___svfiprintf_internal_r+0xd6c>
8110c910:	42000204 	addi	r8,r8,8
8110c914:	dac02517 	ldw	r11,148(sp)
8110c918:	5c17883a 	add	r11,r11,r16
8110c91c:	dac02515 	stw	r11,148(sp)
8110c920:	88800007 	ldb	r2,0(r17)
8110c924:	1002c526 	beq	r2,zero,8110d43c <___svfiprintf_internal_r+0xc20>
8110c928:	88c00047 	ldb	r3,1(r17)
8110c92c:	8cc00044 	addi	r19,r17,1
8110c930:	d8001d85 	stb	zero,118(sp)
8110c934:	0009883a 	mov	r4,zero
8110c938:	000f883a 	mov	r7,zero
8110c93c:	043fffc4 	movi	r16,-1
8110c940:	d8002415 	stw	zero,144(sp)
8110c944:	0025883a 	mov	r18,zero
8110c948:	01401604 	movi	r5,88
8110c94c:	01800244 	movi	r6,9
8110c950:	02800a84 	movi	r10,42
8110c954:	02401b04 	movi	r9,108
8110c958:	9cc00044 	addi	r19,r19,1
8110c95c:	18bff804 	addi	r2,r3,-32
8110c960:	2881dd36 	bltu	r5,r2,8110d0d8 <___svfiprintf_internal_r+0x8bc>
8110c964:	100490ba 	slli	r2,r2,2
8110c968:	02e04474 	movhi	r11,33041
8110c96c:	5af25f04 	addi	r11,r11,-13956
8110c970:	12c5883a 	add	r2,r2,r11
8110c974:	10800017 	ldw	r2,0(r2)
8110c978:	1000683a 	jmp	r2
8110c97c:	8110cb78 	rdprs	r4,r16,17197
8110c980:	8110d0d8 	cmpnei	r4,r16,17219
8110c984:	8110d0d8 	cmpnei	r4,r16,17219
8110c988:	8110cb6c 	andhi	r4,r16,17197
8110c98c:	8110d0d8 	cmpnei	r4,r16,17219
8110c990:	8110d0d8 	cmpnei	r4,r16,17219
8110c994:	8110d0d8 	cmpnei	r4,r16,17219
8110c998:	8110d0d8 	cmpnei	r4,r16,17219
8110c99c:	8110d0d8 	cmpnei	r4,r16,17219
8110c9a0:	8110d0d8 	cmpnei	r4,r16,17219
8110c9a4:	8110cae0 	cmpeqi	r4,r16,17195
8110c9a8:	8110ccbc 	xorhi	r4,r16,17202
8110c9ac:	8110d0d8 	cmpnei	r4,r16,17219
8110c9b0:	8110cb0c 	andi	r4,r16,17196
8110c9b4:	8110d10c 	andi	r4,r16,17220
8110c9b8:	8110d0d8 	cmpnei	r4,r16,17219
8110c9bc:	8110d100 	call	88110d10 <__reset+0x20f0d10>
8110c9c0:	8110d0a0 	cmpeqi	r4,r16,17218
8110c9c4:	8110d0a0 	cmpeqi	r4,r16,17218
8110c9c8:	8110d0a0 	cmpeqi	r4,r16,17218
8110c9cc:	8110d0a0 	cmpeqi	r4,r16,17218
8110c9d0:	8110d0a0 	cmpeqi	r4,r16,17218
8110c9d4:	8110d0a0 	cmpeqi	r4,r16,17218
8110c9d8:	8110d0a0 	cmpeqi	r4,r16,17218
8110c9dc:	8110d0a0 	cmpeqi	r4,r16,17218
8110c9e0:	8110d0a0 	cmpeqi	r4,r16,17218
8110c9e4:	8110d0d8 	cmpnei	r4,r16,17219
8110c9e8:	8110d0d8 	cmpnei	r4,r16,17219
8110c9ec:	8110d0d8 	cmpnei	r4,r16,17219
8110c9f0:	8110d0d8 	cmpnei	r4,r16,17219
8110c9f4:	8110d0d8 	cmpnei	r4,r16,17219
8110c9f8:	8110d0d8 	cmpnei	r4,r16,17219
8110c9fc:	8110d0d8 	cmpnei	r4,r16,17219
8110ca00:	8110d0d8 	cmpnei	r4,r16,17219
8110ca04:	8110d0d8 	cmpnei	r4,r16,17219
8110ca08:	8110d0d8 	cmpnei	r4,r16,17219
8110ca0c:	8110d03c 	xorhi	r4,r16,17216
8110ca10:	8110d0d8 	cmpnei	r4,r16,17219
8110ca14:	8110d0d8 	cmpnei	r4,r16,17219
8110ca18:	8110d0d8 	cmpnei	r4,r16,17219
8110ca1c:	8110d0d8 	cmpnei	r4,r16,17219
8110ca20:	8110d0d8 	cmpnei	r4,r16,17219
8110ca24:	8110d0d8 	cmpnei	r4,r16,17219
8110ca28:	8110d0d8 	cmpnei	r4,r16,17219
8110ca2c:	8110d0d8 	cmpnei	r4,r16,17219
8110ca30:	8110d0d8 	cmpnei	r4,r16,17219
8110ca34:	8110d0d8 	cmpnei	r4,r16,17219
8110ca38:	8110d1b4 	orhi	r4,r16,17222
8110ca3c:	8110d0d8 	cmpnei	r4,r16,17219
8110ca40:	8110d0d8 	cmpnei	r4,r16,17219
8110ca44:	8110d0d8 	cmpnei	r4,r16,17219
8110ca48:	8110d0d8 	cmpnei	r4,r16,17219
8110ca4c:	8110d0d8 	cmpnei	r4,r16,17219
8110ca50:	8110d14c 	andi	r4,r16,17221
8110ca54:	8110d0d8 	cmpnei	r4,r16,17219
8110ca58:	8110d0d8 	cmpnei	r4,r16,17219
8110ca5c:	8110ce80 	call	88110ce8 <__reset+0x20f0ce8>
8110ca60:	8110d0d8 	cmpnei	r4,r16,17219
8110ca64:	8110d0d8 	cmpnei	r4,r16,17219
8110ca68:	8110d0d8 	cmpnei	r4,r16,17219
8110ca6c:	8110d0d8 	cmpnei	r4,r16,17219
8110ca70:	8110d0d8 	cmpnei	r4,r16,17219
8110ca74:	8110d0d8 	cmpnei	r4,r16,17219
8110ca78:	8110d0d8 	cmpnei	r4,r16,17219
8110ca7c:	8110d0d8 	cmpnei	r4,r16,17219
8110ca80:	8110d0d8 	cmpnei	r4,r16,17219
8110ca84:	8110d0d8 	cmpnei	r4,r16,17219
8110ca88:	8110cd70 	cmpltui	r4,r16,17205
8110ca8c:	8110cf1c 	xori	r4,r16,17212
8110ca90:	8110d0d8 	cmpnei	r4,r16,17219
8110ca94:	8110d0d8 	cmpnei	r4,r16,17219
8110ca98:	8110d0d8 	cmpnei	r4,r16,17219
8110ca9c:	8110cf10 	cmplti	r4,r16,17212
8110caa0:	8110cf1c 	xori	r4,r16,17212
8110caa4:	8110d0d8 	cmpnei	r4,r16,17219
8110caa8:	8110d0d8 	cmpnei	r4,r16,17219
8110caac:	8110cf00 	call	88110cf0 <__reset+0x20f0cf0>
8110cab0:	8110d0d8 	cmpnei	r4,r16,17219
8110cab4:	8110cec4 	addi	r4,r16,17211
8110cab8:	8110cccc 	andi	r4,r16,17203
8110cabc:	8110cb18 	cmpnei	r4,r16,17196
8110cac0:	8110d030 	cmpltui	r4,r16,17216
8110cac4:	8110d0d8 	cmpnei	r4,r16,17219
8110cac8:	8110cfe4 	muli	r4,r16,17215
8110cacc:	8110d0d8 	cmpnei	r4,r16,17219
8110cad0:	8110cc3c 	xorhi	r4,r16,17200
8110cad4:	8110d0d8 	cmpnei	r4,r16,17219
8110cad8:	8110d0d8 	cmpnei	r4,r16,17219
8110cadc:	8110cb98 	cmpnei	r4,r16,17198
8110cae0:	dac02317 	ldw	r11,140(sp)
8110cae4:	5ac00017 	ldw	r11,0(r11)
8110cae8:	dac02415 	stw	r11,144(sp)
8110caec:	dac02317 	ldw	r11,140(sp)
8110caf0:	58800104 	addi	r2,r11,4
8110caf4:	dac02417 	ldw	r11,144(sp)
8110caf8:	5802e90e 	bge	r11,zero,8110d6a0 <___svfiprintf_internal_r+0xe84>
8110cafc:	dac02417 	ldw	r11,144(sp)
8110cb00:	d8802315 	stw	r2,140(sp)
8110cb04:	02d7c83a 	sub	r11,zero,r11
8110cb08:	dac02415 	stw	r11,144(sp)
8110cb0c:	94800114 	ori	r18,r18,4
8110cb10:	98c00007 	ldb	r3,0(r19)
8110cb14:	003f9006 	br	8110c958 <__reset+0xfb0ec958>
8110cb18:	00800c04 	movi	r2,48
8110cb1c:	dac02317 	ldw	r11,140(sp)
8110cb20:	d8801d05 	stb	r2,116(sp)
8110cb24:	00801e04 	movi	r2,120
8110cb28:	d8801d45 	stb	r2,117(sp)
8110cb2c:	d8001d85 	stb	zero,118(sp)
8110cb30:	58c00104 	addi	r3,r11,4
8110cb34:	5f000017 	ldw	fp,0(r11)
8110cb38:	0013883a 	mov	r9,zero
8110cb3c:	90800094 	ori	r2,r18,2
8110cb40:	80032b16 	blt	r16,zero,8110d7f0 <___svfiprintf_internal_r+0xfd4>
8110cb44:	00bfdfc4 	movi	r2,-129
8110cb48:	90a4703a 	and	r18,r18,r2
8110cb4c:	d8c02315 	stw	r3,140(sp)
8110cb50:	94800094 	ori	r18,r18,2
8110cb54:	e002dc26 	beq	fp,zero,8110d6c8 <___svfiprintf_internal_r+0xeac>
8110cb58:	012044b4 	movhi	r4,33042
8110cb5c:	2125fe04 	addi	r4,r4,-26632
8110cb60:	0015883a 	mov	r10,zero
8110cb64:	d9002915 	stw	r4,164(sp)
8110cb68:	00002306 	br	8110cbf8 <___svfiprintf_internal_r+0x3dc>
8110cb6c:	94800054 	ori	r18,r18,1
8110cb70:	98c00007 	ldb	r3,0(r19)
8110cb74:	003f7806 	br	8110c958 <__reset+0xfb0ec958>
8110cb78:	38803fcc 	andi	r2,r7,255
8110cb7c:	1080201c 	xori	r2,r2,128
8110cb80:	10bfe004 	addi	r2,r2,-128
8110cb84:	1002f31e 	bne	r2,zero,8110d754 <___svfiprintf_internal_r+0xf38>
8110cb88:	01000044 	movi	r4,1
8110cb8c:	01c00804 	movi	r7,32
8110cb90:	98c00007 	ldb	r3,0(r19)
8110cb94:	003f7006 	br	8110c958 <__reset+0xfb0ec958>
8110cb98:	21003fcc 	andi	r4,r4,255
8110cb9c:	2003aa1e 	bne	r4,zero,8110da48 <___svfiprintf_internal_r+0x122c>
8110cba0:	00a044b4 	movhi	r2,33042
8110cba4:	10a5fe04 	addi	r2,r2,-26632
8110cba8:	d8802915 	stw	r2,164(sp)
8110cbac:	9080080c 	andi	r2,r18,32
8110cbb0:	1000ba26 	beq	r2,zero,8110ce9c <___svfiprintf_internal_r+0x680>
8110cbb4:	dac02317 	ldw	r11,140(sp)
8110cbb8:	5f000017 	ldw	fp,0(r11)
8110cbbc:	5a400117 	ldw	r9,4(r11)
8110cbc0:	5ac00204 	addi	r11,r11,8
8110cbc4:	dac02315 	stw	r11,140(sp)
8110cbc8:	9080004c 	andi	r2,r18,1
8110cbcc:	10029026 	beq	r2,zero,8110d610 <___svfiprintf_internal_r+0xdf4>
8110cbd0:	e244b03a 	or	r2,fp,r9
8110cbd4:	1002d41e 	bne	r2,zero,8110d728 <___svfiprintf_internal_r+0xf0c>
8110cbd8:	d8001d85 	stb	zero,118(sp)
8110cbdc:	80030b16 	blt	r16,zero,8110d80c <___svfiprintf_internal_r+0xff0>
8110cbe0:	00bfdfc4 	movi	r2,-129
8110cbe4:	90a4703a 	and	r18,r18,r2
8110cbe8:	0015883a 	mov	r10,zero
8110cbec:	80002426 	beq	r16,zero,8110cc80 <___svfiprintf_internal_r+0x464>
8110cbf0:	0039883a 	mov	fp,zero
8110cbf4:	0013883a 	mov	r9,zero
8110cbf8:	d9002917 	ldw	r4,164(sp)
8110cbfc:	dc401a04 	addi	r17,sp,104
8110cc00:	e08003cc 	andi	r2,fp,15
8110cc04:	4806973a 	slli	r3,r9,28
8110cc08:	2085883a 	add	r2,r4,r2
8110cc0c:	e038d13a 	srli	fp,fp,4
8110cc10:	10800003 	ldbu	r2,0(r2)
8110cc14:	4812d13a 	srli	r9,r9,4
8110cc18:	8c7fffc4 	addi	r17,r17,-1
8110cc1c:	1f38b03a 	or	fp,r3,fp
8110cc20:	88800005 	stb	r2,0(r17)
8110cc24:	e244b03a 	or	r2,fp,r9
8110cc28:	103ff51e 	bne	r2,zero,8110cc00 <__reset+0xfb0ecc00>
8110cc2c:	dac01e17 	ldw	r11,120(sp)
8110cc30:	5c57c83a 	sub	r11,r11,r17
8110cc34:	dac02115 	stw	r11,132(sp)
8110cc38:	00001406 	br	8110cc8c <___svfiprintf_internal_r+0x470>
8110cc3c:	21003fcc 	andi	r4,r4,255
8110cc40:	2003741e 	bne	r4,zero,8110da14 <___svfiprintf_internal_r+0x11f8>
8110cc44:	9080080c 	andi	r2,r18,32
8110cc48:	10014526 	beq	r2,zero,8110d160 <___svfiprintf_internal_r+0x944>
8110cc4c:	dac02317 	ldw	r11,140(sp)
8110cc50:	d8001d85 	stb	zero,118(sp)
8110cc54:	58c00204 	addi	r3,r11,8
8110cc58:	5f000017 	ldw	fp,0(r11)
8110cc5c:	5a400117 	ldw	r9,4(r11)
8110cc60:	8002d916 	blt	r16,zero,8110d7c8 <___svfiprintf_internal_r+0xfac>
8110cc64:	013fdfc4 	movi	r4,-129
8110cc68:	e244b03a 	or	r2,fp,r9
8110cc6c:	d8c02315 	stw	r3,140(sp)
8110cc70:	9124703a 	and	r18,r18,r4
8110cc74:	0015883a 	mov	r10,zero
8110cc78:	1000b91e 	bne	r2,zero,8110cf60 <___svfiprintf_internal_r+0x744>
8110cc7c:	8002e61e 	bne	r16,zero,8110d818 <___svfiprintf_internal_r+0xffc>
8110cc80:	0021883a 	mov	r16,zero
8110cc84:	d8002115 	stw	zero,132(sp)
8110cc88:	dc401a04 	addi	r17,sp,104
8110cc8c:	d8c02117 	ldw	r3,132(sp)
8110cc90:	dc002015 	stw	r16,128(sp)
8110cc94:	80c0010e 	bge	r16,r3,8110cc9c <___svfiprintf_internal_r+0x480>
8110cc98:	d8c02015 	stw	r3,128(sp)
8110cc9c:	52803fcc 	andi	r10,r10,255
8110cca0:	5280201c 	xori	r10,r10,128
8110cca4:	52bfe004 	addi	r10,r10,-128
8110cca8:	50003c26 	beq	r10,zero,8110cd9c <___svfiprintf_internal_r+0x580>
8110ccac:	dac02017 	ldw	r11,128(sp)
8110ccb0:	5ac00044 	addi	r11,r11,1
8110ccb4:	dac02015 	stw	r11,128(sp)
8110ccb8:	00003806 	br	8110cd9c <___svfiprintf_internal_r+0x580>
8110ccbc:	01000044 	movi	r4,1
8110ccc0:	01c00ac4 	movi	r7,43
8110ccc4:	98c00007 	ldb	r3,0(r19)
8110ccc8:	003f2306 	br	8110c958 <__reset+0xfb0ec958>
8110cccc:	21003fcc 	andi	r4,r4,255
8110ccd0:	2003481e 	bne	r4,zero,8110d9f4 <___svfiprintf_internal_r+0x11d8>
8110ccd4:	9080080c 	andi	r2,r18,32
8110ccd8:	10013b26 	beq	r2,zero,8110d1c8 <___svfiprintf_internal_r+0x9ac>
8110ccdc:	dac02317 	ldw	r11,140(sp)
8110cce0:	d8001d85 	stb	zero,118(sp)
8110cce4:	58800204 	addi	r2,r11,8
8110cce8:	5f000017 	ldw	fp,0(r11)
8110ccec:	5a400117 	ldw	r9,4(r11)
8110ccf0:	8002a816 	blt	r16,zero,8110d794 <___svfiprintf_internal_r+0xf78>
8110ccf4:	013fdfc4 	movi	r4,-129
8110ccf8:	e246b03a 	or	r3,fp,r9
8110ccfc:	d8802315 	stw	r2,140(sp)
8110cd00:	9124703a 	and	r18,r18,r4
8110cd04:	18013c26 	beq	r3,zero,8110d1f8 <___svfiprintf_internal_r+0x9dc>
8110cd08:	0015883a 	mov	r10,zero
8110cd0c:	dc401a04 	addi	r17,sp,104
8110cd10:	e006d0fa 	srli	r3,fp,3
8110cd14:	4808977a 	slli	r4,r9,29
8110cd18:	4812d0fa 	srli	r9,r9,3
8110cd1c:	e70001cc 	andi	fp,fp,7
8110cd20:	e0800c04 	addi	r2,fp,48
8110cd24:	8c7fffc4 	addi	r17,r17,-1
8110cd28:	20f8b03a 	or	fp,r4,r3
8110cd2c:	88800005 	stb	r2,0(r17)
8110cd30:	e246b03a 	or	r3,fp,r9
8110cd34:	183ff61e 	bne	r3,zero,8110cd10 <__reset+0xfb0ecd10>
8110cd38:	90c0004c 	andi	r3,r18,1
8110cd3c:	1800a526 	beq	r3,zero,8110cfd4 <___svfiprintf_internal_r+0x7b8>
8110cd40:	10803fcc 	andi	r2,r2,255
8110cd44:	1080201c 	xori	r2,r2,128
8110cd48:	10bfe004 	addi	r2,r2,-128
8110cd4c:	00c00c04 	movi	r3,48
8110cd50:	10ffb626 	beq	r2,r3,8110cc2c <__reset+0xfb0ecc2c>
8110cd54:	88ffffc5 	stb	r3,-1(r17)
8110cd58:	d8c01e17 	ldw	r3,120(sp)
8110cd5c:	88bfffc4 	addi	r2,r17,-1
8110cd60:	1023883a 	mov	r17,r2
8110cd64:	1887c83a 	sub	r3,r3,r2
8110cd68:	d8c02115 	stw	r3,132(sp)
8110cd6c:	003fc706 	br	8110cc8c <__reset+0xfb0ecc8c>
8110cd70:	dac02317 	ldw	r11,140(sp)
8110cd74:	00c00044 	movi	r3,1
8110cd78:	d8c02015 	stw	r3,128(sp)
8110cd7c:	58800017 	ldw	r2,0(r11)
8110cd80:	5ac00104 	addi	r11,r11,4
8110cd84:	d8001d85 	stb	zero,118(sp)
8110cd88:	d8801005 	stb	r2,64(sp)
8110cd8c:	dac02315 	stw	r11,140(sp)
8110cd90:	d8c02115 	stw	r3,132(sp)
8110cd94:	dc401004 	addi	r17,sp,64
8110cd98:	0021883a 	mov	r16,zero
8110cd9c:	90c0008c 	andi	r3,r18,2
8110cda0:	d8c02215 	stw	r3,136(sp)
8110cda4:	18000326 	beq	r3,zero,8110cdb4 <___svfiprintf_internal_r+0x598>
8110cda8:	dac02017 	ldw	r11,128(sp)
8110cdac:	5ac00084 	addi	r11,r11,2
8110cdb0:	dac02015 	stw	r11,128(sp)
8110cdb4:	90c0210c 	andi	r3,r18,132
8110cdb8:	d8c02615 	stw	r3,152(sp)
8110cdbc:	1801131e 	bne	r3,zero,8110d20c <___svfiprintf_internal_r+0x9f0>
8110cdc0:	dac02417 	ldw	r11,144(sp)
8110cdc4:	d8c02017 	ldw	r3,128(sp)
8110cdc8:	58f9c83a 	sub	fp,r11,r3
8110cdcc:	07010f0e 	bge	zero,fp,8110d20c <___svfiprintf_internal_r+0x9f0>
8110cdd0:	02400404 	movi	r9,16
8110cdd4:	d8c01c17 	ldw	r3,112(sp)
8110cdd8:	d8801b17 	ldw	r2,108(sp)
8110cddc:	4f02d60e 	bge	r9,fp,8110d938 <___svfiprintf_internal_r+0x111c>
8110cde0:	016044b4 	movhi	r5,33042
8110cde4:	29666b04 	addi	r5,r5,-26196
8110cde8:	d9402815 	stw	r5,160(sp)
8110cdec:	028001c4 	movi	r10,7
8110cdf0:	00000306 	br	8110ce00 <___svfiprintf_internal_r+0x5e4>
8110cdf4:	e73ffc04 	addi	fp,fp,-16
8110cdf8:	42000204 	addi	r8,r8,8
8110cdfc:	4f00150e 	bge	r9,fp,8110ce54 <___svfiprintf_internal_r+0x638>
8110ce00:	18c00404 	addi	r3,r3,16
8110ce04:	10800044 	addi	r2,r2,1
8110ce08:	45800015 	stw	r22,0(r8)
8110ce0c:	42400115 	stw	r9,4(r8)
8110ce10:	d8c01c15 	stw	r3,112(sp)
8110ce14:	d8801b15 	stw	r2,108(sp)
8110ce18:	50bff60e 	bge	r10,r2,8110cdf4 <__reset+0xfb0ecdf4>
8110ce1c:	d9801a04 	addi	r6,sp,104
8110ce20:	b80b883a 	mov	r5,r23
8110ce24:	a809883a 	mov	r4,r21
8110ce28:	da402c15 	stw	r9,176(sp)
8110ce2c:	da802d15 	stw	r10,180(sp)
8110ce30:	110c64c0 	call	8110c64c <__ssprint_r>
8110ce34:	da402c17 	ldw	r9,176(sp)
8110ce38:	da802d17 	ldw	r10,180(sp)
8110ce3c:	1001851e 	bne	r2,zero,8110d454 <___svfiprintf_internal_r+0xc38>
8110ce40:	e73ffc04 	addi	fp,fp,-16
8110ce44:	d8c01c17 	ldw	r3,112(sp)
8110ce48:	d8801b17 	ldw	r2,108(sp)
8110ce4c:	d811883a 	mov	r8,sp
8110ce50:	4f3feb16 	blt	r9,fp,8110ce00 <__reset+0xfb0ece00>
8110ce54:	dac02817 	ldw	r11,160(sp)
8110ce58:	e0c7883a 	add	r3,fp,r3
8110ce5c:	10800044 	addi	r2,r2,1
8110ce60:	42c00015 	stw	r11,0(r8)
8110ce64:	47000115 	stw	fp,4(r8)
8110ce68:	d8c01c15 	stw	r3,112(sp)
8110ce6c:	d8801b15 	stw	r2,108(sp)
8110ce70:	010001c4 	movi	r4,7
8110ce74:	2081ee16 	blt	r4,r2,8110d630 <___svfiprintf_internal_r+0xe14>
8110ce78:	42000204 	addi	r8,r8,8
8110ce7c:	0000e506 	br	8110d214 <___svfiprintf_internal_r+0x9f8>
8110ce80:	21003fcc 	andi	r4,r4,255
8110ce84:	2002dd1e 	bne	r4,zero,8110d9fc <___svfiprintf_internal_r+0x11e0>
8110ce88:	00a044b4 	movhi	r2,33042
8110ce8c:	10a5f904 	addi	r2,r2,-26652
8110ce90:	d8802915 	stw	r2,164(sp)
8110ce94:	9080080c 	andi	r2,r18,32
8110ce98:	103f461e 	bne	r2,zero,8110cbb4 <__reset+0xfb0ecbb4>
8110ce9c:	9080040c 	andi	r2,r18,16
8110cea0:	10022e1e 	bne	r2,zero,8110d75c <___svfiprintf_internal_r+0xf40>
8110cea4:	9080100c 	andi	r2,r18,64
8110cea8:	dac02317 	ldw	r11,140(sp)
8110ceac:	10027326 	beq	r2,zero,8110d87c <___svfiprintf_internal_r+0x1060>
8110ceb0:	5f00000b 	ldhu	fp,0(r11)
8110ceb4:	5ac00104 	addi	r11,r11,4
8110ceb8:	0013883a 	mov	r9,zero
8110cebc:	dac02315 	stw	r11,140(sp)
8110cec0:	003f4106 	br	8110cbc8 <__reset+0xfb0ecbc8>
8110cec4:	21003fcc 	andi	r4,r4,255
8110cec8:	2002e11e 	bne	r4,zero,8110da50 <___svfiprintf_internal_r+0x1234>
8110cecc:	9080080c 	andi	r2,r18,32
8110ced0:	1002011e 	bne	r2,zero,8110d6d8 <___svfiprintf_internal_r+0xebc>
8110ced4:	9080040c 	andi	r2,r18,16
8110ced8:	10023e1e 	bne	r2,zero,8110d7d4 <___svfiprintf_internal_r+0xfb8>
8110cedc:	9480100c 	andi	r18,r18,64
8110cee0:	90023c26 	beq	r18,zero,8110d7d4 <___svfiprintf_internal_r+0xfb8>
8110cee4:	dac02317 	ldw	r11,140(sp)
8110cee8:	58800017 	ldw	r2,0(r11)
8110ceec:	5ac00104 	addi	r11,r11,4
8110cef0:	dac02315 	stw	r11,140(sp)
8110cef4:	dac02517 	ldw	r11,148(sp)
8110cef8:	12c0000d 	sth	r11,0(r2)
8110cefc:	003e6e06 	br	8110c8b8 <__reset+0xfb0ec8b8>
8110cf00:	98c00007 	ldb	r3,0(r19)
8110cf04:	1a422926 	beq	r3,r9,8110d7ac <___svfiprintf_internal_r+0xf90>
8110cf08:	94800414 	ori	r18,r18,16
8110cf0c:	003e9206 	br	8110c958 <__reset+0xfb0ec958>
8110cf10:	94801014 	ori	r18,r18,64
8110cf14:	98c00007 	ldb	r3,0(r19)
8110cf18:	003e8f06 	br	8110c958 <__reset+0xfb0ec958>
8110cf1c:	21003fcc 	andi	r4,r4,255
8110cf20:	2002c71e 	bne	r4,zero,8110da40 <___svfiprintf_internal_r+0x1224>
8110cf24:	9080080c 	andi	r2,r18,32
8110cf28:	10004926 	beq	r2,zero,8110d050 <___svfiprintf_internal_r+0x834>
8110cf2c:	dac02317 	ldw	r11,140(sp)
8110cf30:	58800117 	ldw	r2,4(r11)
8110cf34:	5f000017 	ldw	fp,0(r11)
8110cf38:	5ac00204 	addi	r11,r11,8
8110cf3c:	dac02315 	stw	r11,140(sp)
8110cf40:	1013883a 	mov	r9,r2
8110cf44:	10004b16 	blt	r2,zero,8110d074 <___svfiprintf_internal_r+0x858>
8110cf48:	da801d83 	ldbu	r10,118(sp)
8110cf4c:	8001cb16 	blt	r16,zero,8110d67c <___svfiprintf_internal_r+0xe60>
8110cf50:	00ffdfc4 	movi	r3,-129
8110cf54:	e244b03a 	or	r2,fp,r9
8110cf58:	90e4703a 	and	r18,r18,r3
8110cf5c:	103f4726 	beq	r2,zero,8110cc7c <__reset+0xfb0ecc7c>
8110cf60:	48008c26 	beq	r9,zero,8110d194 <___svfiprintf_internal_r+0x978>
8110cf64:	dc802015 	stw	r18,128(sp)
8110cf68:	dc002115 	stw	r16,132(sp)
8110cf6c:	dc401a04 	addi	r17,sp,104
8110cf70:	e021883a 	mov	r16,fp
8110cf74:	da002215 	stw	r8,136(sp)
8110cf78:	5039883a 	mov	fp,r10
8110cf7c:	4825883a 	mov	r18,r9
8110cf80:	8009883a 	mov	r4,r16
8110cf84:	900b883a 	mov	r5,r18
8110cf88:	01800284 	movi	r6,10
8110cf8c:	000f883a 	mov	r7,zero
8110cf90:	110ff4c0 	call	8110ff4c <__umoddi3>
8110cf94:	10800c04 	addi	r2,r2,48
8110cf98:	8c7fffc4 	addi	r17,r17,-1
8110cf9c:	8009883a 	mov	r4,r16
8110cfa0:	900b883a 	mov	r5,r18
8110cfa4:	88800005 	stb	r2,0(r17)
8110cfa8:	01800284 	movi	r6,10
8110cfac:	000f883a 	mov	r7,zero
8110cfb0:	110f9d40 	call	8110f9d4 <__udivdi3>
8110cfb4:	1021883a 	mov	r16,r2
8110cfb8:	10c4b03a 	or	r2,r2,r3
8110cfbc:	1825883a 	mov	r18,r3
8110cfc0:	103fef1e 	bne	r2,zero,8110cf80 <__reset+0xfb0ecf80>
8110cfc4:	dc802017 	ldw	r18,128(sp)
8110cfc8:	dc002117 	ldw	r16,132(sp)
8110cfcc:	da002217 	ldw	r8,136(sp)
8110cfd0:	e015883a 	mov	r10,fp
8110cfd4:	d8c01e17 	ldw	r3,120(sp)
8110cfd8:	1c47c83a 	sub	r3,r3,r17
8110cfdc:	d8c02115 	stw	r3,132(sp)
8110cfe0:	003f2a06 	br	8110cc8c <__reset+0xfb0ecc8c>
8110cfe4:	dac02317 	ldw	r11,140(sp)
8110cfe8:	d8001d85 	stb	zero,118(sp)
8110cfec:	5c400017 	ldw	r17,0(r11)
8110cff0:	5f000104 	addi	fp,r11,4
8110cff4:	88022f26 	beq	r17,zero,8110d8b4 <___svfiprintf_internal_r+0x1098>
8110cff8:	80022516 	blt	r16,zero,8110d890 <___svfiprintf_internal_r+0x1074>
8110cffc:	800d883a 	mov	r6,r16
8110d000:	000b883a 	mov	r5,zero
8110d004:	8809883a 	mov	r4,r17
8110d008:	da002c15 	stw	r8,176(sp)
8110d00c:	110a93c0 	call	8110a93c <memchr>
8110d010:	da002c17 	ldw	r8,176(sp)
8110d014:	10026426 	beq	r2,zero,8110d9a8 <___svfiprintf_internal_r+0x118c>
8110d018:	1445c83a 	sub	r2,r2,r17
8110d01c:	d8802115 	stw	r2,132(sp)
8110d020:	da801d83 	ldbu	r10,118(sp)
8110d024:	df002315 	stw	fp,140(sp)
8110d028:	0021883a 	mov	r16,zero
8110d02c:	003f1706 	br	8110cc8c <__reset+0xfb0ecc8c>
8110d030:	94800814 	ori	r18,r18,32
8110d034:	98c00007 	ldb	r3,0(r19)
8110d038:	003e4706 	br	8110c958 <__reset+0xfb0ec958>
8110d03c:	21003fcc 	andi	r4,r4,255
8110d040:	2002701e 	bne	r4,zero,8110da04 <___svfiprintf_internal_r+0x11e8>
8110d044:	94800414 	ori	r18,r18,16
8110d048:	9080080c 	andi	r2,r18,32
8110d04c:	103fb71e 	bne	r2,zero,8110cf2c <__reset+0xfb0ecf2c>
8110d050:	9080040c 	andi	r2,r18,16
8110d054:	1001ab26 	beq	r2,zero,8110d704 <___svfiprintf_internal_r+0xee8>
8110d058:	dac02317 	ldw	r11,140(sp)
8110d05c:	5f000017 	ldw	fp,0(r11)
8110d060:	5ac00104 	addi	r11,r11,4
8110d064:	dac02315 	stw	r11,140(sp)
8110d068:	e013d7fa 	srai	r9,fp,31
8110d06c:	4805883a 	mov	r2,r9
8110d070:	103fb50e 	bge	r2,zero,8110cf48 <__reset+0xfb0ecf48>
8110d074:	0739c83a 	sub	fp,zero,fp
8110d078:	02800b44 	movi	r10,45
8110d07c:	e004c03a 	cmpne	r2,fp,zero
8110d080:	0253c83a 	sub	r9,zero,r9
8110d084:	da801d85 	stb	r10,118(sp)
8110d088:	4893c83a 	sub	r9,r9,r2
8110d08c:	80023016 	blt	r16,zero,8110d950 <___svfiprintf_internal_r+0x1134>
8110d090:	00bfdfc4 	movi	r2,-129
8110d094:	90a4703a 	and	r18,r18,r2
8110d098:	483fb21e 	bne	r9,zero,8110cf64 <__reset+0xfb0ecf64>
8110d09c:	00003d06 	br	8110d194 <___svfiprintf_internal_r+0x978>
8110d0a0:	9817883a 	mov	r11,r19
8110d0a4:	d8002415 	stw	zero,144(sp)
8110d0a8:	18bff404 	addi	r2,r3,-48
8110d0ac:	0019883a 	mov	r12,zero
8110d0b0:	58c00007 	ldb	r3,0(r11)
8110d0b4:	630002a4 	muli	r12,r12,10
8110d0b8:	9cc00044 	addi	r19,r19,1
8110d0bc:	9817883a 	mov	r11,r19
8110d0c0:	1319883a 	add	r12,r2,r12
8110d0c4:	18bff404 	addi	r2,r3,-48
8110d0c8:	30bff92e 	bgeu	r6,r2,8110d0b0 <__reset+0xfb0ed0b0>
8110d0cc:	db002415 	stw	r12,144(sp)
8110d0d0:	18bff804 	addi	r2,r3,-32
8110d0d4:	28be232e 	bgeu	r5,r2,8110c964 <__reset+0xfb0ec964>
8110d0d8:	21003fcc 	andi	r4,r4,255
8110d0dc:	20024b1e 	bne	r4,zero,8110da0c <___svfiprintf_internal_r+0x11f0>
8110d0e0:	1800d626 	beq	r3,zero,8110d43c <___svfiprintf_internal_r+0xc20>
8110d0e4:	02c00044 	movi	r11,1
8110d0e8:	dac02015 	stw	r11,128(sp)
8110d0ec:	d8c01005 	stb	r3,64(sp)
8110d0f0:	d8001d85 	stb	zero,118(sp)
8110d0f4:	dac02115 	stw	r11,132(sp)
8110d0f8:	dc401004 	addi	r17,sp,64
8110d0fc:	003f2606 	br	8110cd98 <__reset+0xfb0ecd98>
8110d100:	94802014 	ori	r18,r18,128
8110d104:	98c00007 	ldb	r3,0(r19)
8110d108:	003e1306 	br	8110c958 <__reset+0xfb0ec958>
8110d10c:	98c00007 	ldb	r3,0(r19)
8110d110:	9ac00044 	addi	r11,r19,1
8110d114:	1a822b26 	beq	r3,r10,8110d9c4 <___svfiprintf_internal_r+0x11a8>
8110d118:	18bff404 	addi	r2,r3,-48
8110d11c:	0021883a 	mov	r16,zero
8110d120:	30821e36 	bltu	r6,r2,8110d99c <___svfiprintf_internal_r+0x1180>
8110d124:	58c00007 	ldb	r3,0(r11)
8110d128:	840002a4 	muli	r16,r16,10
8110d12c:	5cc00044 	addi	r19,r11,1
8110d130:	9817883a 	mov	r11,r19
8110d134:	80a1883a 	add	r16,r16,r2
8110d138:	18bff404 	addi	r2,r3,-48
8110d13c:	30bff92e 	bgeu	r6,r2,8110d124 <__reset+0xfb0ed124>
8110d140:	803e060e 	bge	r16,zero,8110c95c <__reset+0xfb0ec95c>
8110d144:	043fffc4 	movi	r16,-1
8110d148:	003e0406 	br	8110c95c <__reset+0xfb0ec95c>
8110d14c:	21003fcc 	andi	r4,r4,255
8110d150:	2002371e 	bne	r4,zero,8110da30 <___svfiprintf_internal_r+0x1214>
8110d154:	94800414 	ori	r18,r18,16
8110d158:	9080080c 	andi	r2,r18,32
8110d15c:	103ebb1e 	bne	r2,zero,8110cc4c <__reset+0xfb0ecc4c>
8110d160:	9080040c 	andi	r2,r18,16
8110d164:	10013b26 	beq	r2,zero,8110d654 <___svfiprintf_internal_r+0xe38>
8110d168:	dac02317 	ldw	r11,140(sp)
8110d16c:	d8001d85 	stb	zero,118(sp)
8110d170:	0013883a 	mov	r9,zero
8110d174:	58800104 	addi	r2,r11,4
8110d178:	5f000017 	ldw	fp,0(r11)
8110d17c:	80013d16 	blt	r16,zero,8110d674 <___svfiprintf_internal_r+0xe58>
8110d180:	00ffdfc4 	movi	r3,-129
8110d184:	d8802315 	stw	r2,140(sp)
8110d188:	90e4703a 	and	r18,r18,r3
8110d18c:	0015883a 	mov	r10,zero
8110d190:	e03eba26 	beq	fp,zero,8110cc7c <__reset+0xfb0ecc7c>
8110d194:	00800244 	movi	r2,9
8110d198:	173f7236 	bltu	r2,fp,8110cf64 <__reset+0xfb0ecf64>
8110d19c:	dac02b17 	ldw	r11,172(sp)
8110d1a0:	e7000c04 	addi	fp,fp,48
8110d1a4:	df0019c5 	stb	fp,103(sp)
8110d1a8:	dac02115 	stw	r11,132(sp)
8110d1ac:	dc4019c4 	addi	r17,sp,103
8110d1b0:	003eb606 	br	8110cc8c <__reset+0xfb0ecc8c>
8110d1b4:	21003fcc 	andi	r4,r4,255
8110d1b8:	20021f1e 	bne	r4,zero,8110da38 <___svfiprintf_internal_r+0x121c>
8110d1bc:	94800414 	ori	r18,r18,16
8110d1c0:	9080080c 	andi	r2,r18,32
8110d1c4:	103ec51e 	bne	r2,zero,8110ccdc <__reset+0xfb0eccdc>
8110d1c8:	9080040c 	andi	r2,r18,16
8110d1cc:	10016926 	beq	r2,zero,8110d774 <___svfiprintf_internal_r+0xf58>
8110d1d0:	dac02317 	ldw	r11,140(sp)
8110d1d4:	d8001d85 	stb	zero,118(sp)
8110d1d8:	0013883a 	mov	r9,zero
8110d1dc:	58800104 	addi	r2,r11,4
8110d1e0:	5f000017 	ldw	fp,0(r11)
8110d1e4:	80016b16 	blt	r16,zero,8110d794 <___svfiprintf_internal_r+0xf78>
8110d1e8:	00ffdfc4 	movi	r3,-129
8110d1ec:	d8802315 	stw	r2,140(sp)
8110d1f0:	90e4703a 	and	r18,r18,r3
8110d1f4:	e03ec41e 	bne	fp,zero,8110cd08 <__reset+0xfb0ecd08>
8110d1f8:	0015883a 	mov	r10,zero
8110d1fc:	8001c226 	beq	r16,zero,8110d908 <___svfiprintf_internal_r+0x10ec>
8110d200:	0039883a 	mov	fp,zero
8110d204:	0013883a 	mov	r9,zero
8110d208:	003ec006 	br	8110cd0c <__reset+0xfb0ecd0c>
8110d20c:	d8c01c17 	ldw	r3,112(sp)
8110d210:	d8801b17 	ldw	r2,108(sp)
8110d214:	d9001d87 	ldb	r4,118(sp)
8110d218:	20000b26 	beq	r4,zero,8110d248 <___svfiprintf_internal_r+0xa2c>
8110d21c:	d9001d84 	addi	r4,sp,118
8110d220:	18c00044 	addi	r3,r3,1
8110d224:	10800044 	addi	r2,r2,1
8110d228:	41000015 	stw	r4,0(r8)
8110d22c:	01000044 	movi	r4,1
8110d230:	41000115 	stw	r4,4(r8)
8110d234:	d8c01c15 	stw	r3,112(sp)
8110d238:	d8801b15 	stw	r2,108(sp)
8110d23c:	010001c4 	movi	r4,7
8110d240:	2080e116 	blt	r4,r2,8110d5c8 <___svfiprintf_internal_r+0xdac>
8110d244:	42000204 	addi	r8,r8,8
8110d248:	dac02217 	ldw	r11,136(sp)
8110d24c:	58000b26 	beq	r11,zero,8110d27c <___svfiprintf_internal_r+0xa60>
8110d250:	d9001d04 	addi	r4,sp,116
8110d254:	18c00084 	addi	r3,r3,2
8110d258:	10800044 	addi	r2,r2,1
8110d25c:	41000015 	stw	r4,0(r8)
8110d260:	01000084 	movi	r4,2
8110d264:	41000115 	stw	r4,4(r8)
8110d268:	d8c01c15 	stw	r3,112(sp)
8110d26c:	d8801b15 	stw	r2,108(sp)
8110d270:	010001c4 	movi	r4,7
8110d274:	2080dd16 	blt	r4,r2,8110d5ec <___svfiprintf_internal_r+0xdd0>
8110d278:	42000204 	addi	r8,r8,8
8110d27c:	dac02617 	ldw	r11,152(sp)
8110d280:	01002004 	movi	r4,128
8110d284:	59008426 	beq	r11,r4,8110d498 <___svfiprintf_internal_r+0xc7c>
8110d288:	dac02117 	ldw	r11,132(sp)
8110d28c:	82e1c83a 	sub	r16,r16,r11
8110d290:	0400270e 	bge	zero,r16,8110d330 <___svfiprintf_internal_r+0xb14>
8110d294:	01c00404 	movi	r7,16
8110d298:	3c016a0e 	bge	r7,r16,8110d844 <___svfiprintf_internal_r+0x1028>
8110d29c:	016044b4 	movhi	r5,33042
8110d2a0:	29666704 	addi	r5,r5,-26212
8110d2a4:	d9402215 	stw	r5,136(sp)
8110d2a8:	070001c4 	movi	fp,7
8110d2ac:	00000306 	br	8110d2bc <___svfiprintf_internal_r+0xaa0>
8110d2b0:	843ffc04 	addi	r16,r16,-16
8110d2b4:	42000204 	addi	r8,r8,8
8110d2b8:	3c00130e 	bge	r7,r16,8110d308 <___svfiprintf_internal_r+0xaec>
8110d2bc:	18c00404 	addi	r3,r3,16
8110d2c0:	10800044 	addi	r2,r2,1
8110d2c4:	45000015 	stw	r20,0(r8)
8110d2c8:	41c00115 	stw	r7,4(r8)
8110d2cc:	d8c01c15 	stw	r3,112(sp)
8110d2d0:	d8801b15 	stw	r2,108(sp)
8110d2d4:	e0bff60e 	bge	fp,r2,8110d2b0 <__reset+0xfb0ed2b0>
8110d2d8:	d9801a04 	addi	r6,sp,104
8110d2dc:	b80b883a 	mov	r5,r23
8110d2e0:	a809883a 	mov	r4,r21
8110d2e4:	d9c02c15 	stw	r7,176(sp)
8110d2e8:	110c64c0 	call	8110c64c <__ssprint_r>
8110d2ec:	d9c02c17 	ldw	r7,176(sp)
8110d2f0:	1000581e 	bne	r2,zero,8110d454 <___svfiprintf_internal_r+0xc38>
8110d2f4:	843ffc04 	addi	r16,r16,-16
8110d2f8:	d8c01c17 	ldw	r3,112(sp)
8110d2fc:	d8801b17 	ldw	r2,108(sp)
8110d300:	d811883a 	mov	r8,sp
8110d304:	3c3fed16 	blt	r7,r16,8110d2bc <__reset+0xfb0ed2bc>
8110d308:	dac02217 	ldw	r11,136(sp)
8110d30c:	1c07883a 	add	r3,r3,r16
8110d310:	10800044 	addi	r2,r2,1
8110d314:	42c00015 	stw	r11,0(r8)
8110d318:	44000115 	stw	r16,4(r8)
8110d31c:	d8c01c15 	stw	r3,112(sp)
8110d320:	d8801b15 	stw	r2,108(sp)
8110d324:	010001c4 	movi	r4,7
8110d328:	20809e16 	blt	r4,r2,8110d5a4 <___svfiprintf_internal_r+0xd88>
8110d32c:	42000204 	addi	r8,r8,8
8110d330:	dac02117 	ldw	r11,132(sp)
8110d334:	10800044 	addi	r2,r2,1
8110d338:	44400015 	stw	r17,0(r8)
8110d33c:	58c7883a 	add	r3,r11,r3
8110d340:	42c00115 	stw	r11,4(r8)
8110d344:	d8c01c15 	stw	r3,112(sp)
8110d348:	d8801b15 	stw	r2,108(sp)
8110d34c:	010001c4 	movi	r4,7
8110d350:	20807f16 	blt	r4,r2,8110d550 <___svfiprintf_internal_r+0xd34>
8110d354:	42000204 	addi	r8,r8,8
8110d358:	9480010c 	andi	r18,r18,4
8110d35c:	90002926 	beq	r18,zero,8110d404 <___svfiprintf_internal_r+0xbe8>
8110d360:	dac02417 	ldw	r11,144(sp)
8110d364:	d8802017 	ldw	r2,128(sp)
8110d368:	58a1c83a 	sub	r16,r11,r2
8110d36c:	0400250e 	bge	zero,r16,8110d404 <___svfiprintf_internal_r+0xbe8>
8110d370:	04400404 	movi	r17,16
8110d374:	d8801b17 	ldw	r2,108(sp)
8110d378:	8c017c0e 	bge	r17,r16,8110d96c <___svfiprintf_internal_r+0x1150>
8110d37c:	016044b4 	movhi	r5,33042
8110d380:	29666b04 	addi	r5,r5,-26196
8110d384:	d9402815 	stw	r5,160(sp)
8110d388:	048001c4 	movi	r18,7
8110d38c:	00000306 	br	8110d39c <___svfiprintf_internal_r+0xb80>
8110d390:	843ffc04 	addi	r16,r16,-16
8110d394:	42000204 	addi	r8,r8,8
8110d398:	8c00110e 	bge	r17,r16,8110d3e0 <___svfiprintf_internal_r+0xbc4>
8110d39c:	18c00404 	addi	r3,r3,16
8110d3a0:	10800044 	addi	r2,r2,1
8110d3a4:	45800015 	stw	r22,0(r8)
8110d3a8:	44400115 	stw	r17,4(r8)
8110d3ac:	d8c01c15 	stw	r3,112(sp)
8110d3b0:	d8801b15 	stw	r2,108(sp)
8110d3b4:	90bff60e 	bge	r18,r2,8110d390 <__reset+0xfb0ed390>
8110d3b8:	d9801a04 	addi	r6,sp,104
8110d3bc:	b80b883a 	mov	r5,r23
8110d3c0:	a809883a 	mov	r4,r21
8110d3c4:	110c64c0 	call	8110c64c <__ssprint_r>
8110d3c8:	1000221e 	bne	r2,zero,8110d454 <___svfiprintf_internal_r+0xc38>
8110d3cc:	843ffc04 	addi	r16,r16,-16
8110d3d0:	d8c01c17 	ldw	r3,112(sp)
8110d3d4:	d8801b17 	ldw	r2,108(sp)
8110d3d8:	d811883a 	mov	r8,sp
8110d3dc:	8c3fef16 	blt	r17,r16,8110d39c <__reset+0xfb0ed39c>
8110d3e0:	dac02817 	ldw	r11,160(sp)
8110d3e4:	1c07883a 	add	r3,r3,r16
8110d3e8:	10800044 	addi	r2,r2,1
8110d3ec:	42c00015 	stw	r11,0(r8)
8110d3f0:	44000115 	stw	r16,4(r8)
8110d3f4:	d8c01c15 	stw	r3,112(sp)
8110d3f8:	d8801b15 	stw	r2,108(sp)
8110d3fc:	010001c4 	movi	r4,7
8110d400:	2080aa16 	blt	r4,r2,8110d6ac <___svfiprintf_internal_r+0xe90>
8110d404:	d8802417 	ldw	r2,144(sp)
8110d408:	dac02017 	ldw	r11,128(sp)
8110d40c:	12c0010e 	bge	r2,r11,8110d414 <___svfiprintf_internal_r+0xbf8>
8110d410:	5805883a 	mov	r2,r11
8110d414:	dac02517 	ldw	r11,148(sp)
8110d418:	5897883a 	add	r11,r11,r2
8110d41c:	dac02515 	stw	r11,148(sp)
8110d420:	1800531e 	bne	r3,zero,8110d570 <___svfiprintf_internal_r+0xd54>
8110d424:	98800007 	ldb	r2,0(r19)
8110d428:	d8001b15 	stw	zero,108(sp)
8110d42c:	d811883a 	mov	r8,sp
8110d430:	103d231e 	bne	r2,zero,8110c8c0 <__reset+0xfb0ec8c0>
8110d434:	9823883a 	mov	r17,r19
8110d438:	003d3906 	br	8110c920 <__reset+0xfb0ec920>
8110d43c:	d8801c17 	ldw	r2,112(sp)
8110d440:	10000426 	beq	r2,zero,8110d454 <___svfiprintf_internal_r+0xc38>
8110d444:	d9402717 	ldw	r5,156(sp)
8110d448:	d9002a17 	ldw	r4,168(sp)
8110d44c:	d9801a04 	addi	r6,sp,104
8110d450:	110c64c0 	call	8110c64c <__ssprint_r>
8110d454:	dac02717 	ldw	r11,156(sp)
8110d458:	d8802517 	ldw	r2,148(sp)
8110d45c:	58c0030b 	ldhu	r3,12(r11)
8110d460:	18c0100c 	andi	r3,r3,64
8110d464:	1801381e 	bne	r3,zero,8110d948 <___svfiprintf_internal_r+0x112c>
8110d468:	dfc03717 	ldw	ra,220(sp)
8110d46c:	df003617 	ldw	fp,216(sp)
8110d470:	ddc03517 	ldw	r23,212(sp)
8110d474:	dd803417 	ldw	r22,208(sp)
8110d478:	dd403317 	ldw	r21,204(sp)
8110d47c:	dd003217 	ldw	r20,200(sp)
8110d480:	dcc03117 	ldw	r19,196(sp)
8110d484:	dc803017 	ldw	r18,192(sp)
8110d488:	dc402f17 	ldw	r17,188(sp)
8110d48c:	dc002e17 	ldw	r16,184(sp)
8110d490:	dec03804 	addi	sp,sp,224
8110d494:	f800283a 	ret
8110d498:	dac02417 	ldw	r11,144(sp)
8110d49c:	d9002017 	ldw	r4,128(sp)
8110d4a0:	5939c83a 	sub	fp,r11,r4
8110d4a4:	073f780e 	bge	zero,fp,8110d288 <__reset+0xfb0ed288>
8110d4a8:	02400404 	movi	r9,16
8110d4ac:	4f01370e 	bge	r9,fp,8110d98c <___svfiprintf_internal_r+0x1170>
8110d4b0:	02e044b4 	movhi	r11,33042
8110d4b4:	5ae66704 	addi	r11,r11,-26212
8110d4b8:	dac02215 	stw	r11,136(sp)
8110d4bc:	028001c4 	movi	r10,7
8110d4c0:	00000306 	br	8110d4d0 <___svfiprintf_internal_r+0xcb4>
8110d4c4:	e73ffc04 	addi	fp,fp,-16
8110d4c8:	42000204 	addi	r8,r8,8
8110d4cc:	4f00150e 	bge	r9,fp,8110d524 <___svfiprintf_internal_r+0xd08>
8110d4d0:	18c00404 	addi	r3,r3,16
8110d4d4:	10800044 	addi	r2,r2,1
8110d4d8:	45000015 	stw	r20,0(r8)
8110d4dc:	42400115 	stw	r9,4(r8)
8110d4e0:	d8c01c15 	stw	r3,112(sp)
8110d4e4:	d8801b15 	stw	r2,108(sp)
8110d4e8:	50bff60e 	bge	r10,r2,8110d4c4 <__reset+0xfb0ed4c4>
8110d4ec:	d9801a04 	addi	r6,sp,104
8110d4f0:	b80b883a 	mov	r5,r23
8110d4f4:	a809883a 	mov	r4,r21
8110d4f8:	da402c15 	stw	r9,176(sp)
8110d4fc:	da802d15 	stw	r10,180(sp)
8110d500:	110c64c0 	call	8110c64c <__ssprint_r>
8110d504:	da402c17 	ldw	r9,176(sp)
8110d508:	da802d17 	ldw	r10,180(sp)
8110d50c:	103fd11e 	bne	r2,zero,8110d454 <__reset+0xfb0ed454>
8110d510:	e73ffc04 	addi	fp,fp,-16
8110d514:	d8c01c17 	ldw	r3,112(sp)
8110d518:	d8801b17 	ldw	r2,108(sp)
8110d51c:	d811883a 	mov	r8,sp
8110d520:	4f3feb16 	blt	r9,fp,8110d4d0 <__reset+0xfb0ed4d0>
8110d524:	dac02217 	ldw	r11,136(sp)
8110d528:	1f07883a 	add	r3,r3,fp
8110d52c:	10800044 	addi	r2,r2,1
8110d530:	42c00015 	stw	r11,0(r8)
8110d534:	47000115 	stw	fp,4(r8)
8110d538:	d8c01c15 	stw	r3,112(sp)
8110d53c:	d8801b15 	stw	r2,108(sp)
8110d540:	010001c4 	movi	r4,7
8110d544:	2080b616 	blt	r4,r2,8110d820 <___svfiprintf_internal_r+0x1004>
8110d548:	42000204 	addi	r8,r8,8
8110d54c:	003f4e06 	br	8110d288 <__reset+0xfb0ed288>
8110d550:	d9801a04 	addi	r6,sp,104
8110d554:	b80b883a 	mov	r5,r23
8110d558:	a809883a 	mov	r4,r21
8110d55c:	110c64c0 	call	8110c64c <__ssprint_r>
8110d560:	103fbc1e 	bne	r2,zero,8110d454 <__reset+0xfb0ed454>
8110d564:	d8c01c17 	ldw	r3,112(sp)
8110d568:	d811883a 	mov	r8,sp
8110d56c:	003f7a06 	br	8110d358 <__reset+0xfb0ed358>
8110d570:	d9801a04 	addi	r6,sp,104
8110d574:	b80b883a 	mov	r5,r23
8110d578:	a809883a 	mov	r4,r21
8110d57c:	110c64c0 	call	8110c64c <__ssprint_r>
8110d580:	103fa826 	beq	r2,zero,8110d424 <__reset+0xfb0ed424>
8110d584:	003fb306 	br	8110d454 <__reset+0xfb0ed454>
8110d588:	d9801a04 	addi	r6,sp,104
8110d58c:	b80b883a 	mov	r5,r23
8110d590:	a809883a 	mov	r4,r21
8110d594:	110c64c0 	call	8110c64c <__ssprint_r>
8110d598:	103fae1e 	bne	r2,zero,8110d454 <__reset+0xfb0ed454>
8110d59c:	d811883a 	mov	r8,sp
8110d5a0:	003cdc06 	br	8110c914 <__reset+0xfb0ec914>
8110d5a4:	d9801a04 	addi	r6,sp,104
8110d5a8:	b80b883a 	mov	r5,r23
8110d5ac:	a809883a 	mov	r4,r21
8110d5b0:	110c64c0 	call	8110c64c <__ssprint_r>
8110d5b4:	103fa71e 	bne	r2,zero,8110d454 <__reset+0xfb0ed454>
8110d5b8:	d8c01c17 	ldw	r3,112(sp)
8110d5bc:	d8801b17 	ldw	r2,108(sp)
8110d5c0:	d811883a 	mov	r8,sp
8110d5c4:	003f5a06 	br	8110d330 <__reset+0xfb0ed330>
8110d5c8:	d9801a04 	addi	r6,sp,104
8110d5cc:	b80b883a 	mov	r5,r23
8110d5d0:	a809883a 	mov	r4,r21
8110d5d4:	110c64c0 	call	8110c64c <__ssprint_r>
8110d5d8:	103f9e1e 	bne	r2,zero,8110d454 <__reset+0xfb0ed454>
8110d5dc:	d8c01c17 	ldw	r3,112(sp)
8110d5e0:	d8801b17 	ldw	r2,108(sp)
8110d5e4:	d811883a 	mov	r8,sp
8110d5e8:	003f1706 	br	8110d248 <__reset+0xfb0ed248>
8110d5ec:	d9801a04 	addi	r6,sp,104
8110d5f0:	b80b883a 	mov	r5,r23
8110d5f4:	a809883a 	mov	r4,r21
8110d5f8:	110c64c0 	call	8110c64c <__ssprint_r>
8110d5fc:	103f951e 	bne	r2,zero,8110d454 <__reset+0xfb0ed454>
8110d600:	d8c01c17 	ldw	r3,112(sp)
8110d604:	d8801b17 	ldw	r2,108(sp)
8110d608:	d811883a 	mov	r8,sp
8110d60c:	003f1b06 	br	8110d27c <__reset+0xfb0ed27c>
8110d610:	d8001d85 	stb	zero,118(sp)
8110d614:	80007b16 	blt	r16,zero,8110d804 <___svfiprintf_internal_r+0xfe8>
8110d618:	00ffdfc4 	movi	r3,-129
8110d61c:	e244b03a 	or	r2,fp,r9
8110d620:	90e4703a 	and	r18,r18,r3
8110d624:	103d7026 	beq	r2,zero,8110cbe8 <__reset+0xfb0ecbe8>
8110d628:	0015883a 	mov	r10,zero
8110d62c:	003d7206 	br	8110cbf8 <__reset+0xfb0ecbf8>
8110d630:	d9801a04 	addi	r6,sp,104
8110d634:	b80b883a 	mov	r5,r23
8110d638:	a809883a 	mov	r4,r21
8110d63c:	110c64c0 	call	8110c64c <__ssprint_r>
8110d640:	103f841e 	bne	r2,zero,8110d454 <__reset+0xfb0ed454>
8110d644:	d8c01c17 	ldw	r3,112(sp)
8110d648:	d8801b17 	ldw	r2,108(sp)
8110d64c:	d811883a 	mov	r8,sp
8110d650:	003ef006 	br	8110d214 <__reset+0xfb0ed214>
8110d654:	9080100c 	andi	r2,r18,64
8110d658:	d8001d85 	stb	zero,118(sp)
8110d65c:	dac02317 	ldw	r11,140(sp)
8110d660:	10008126 	beq	r2,zero,8110d868 <___svfiprintf_internal_r+0x104c>
8110d664:	58800104 	addi	r2,r11,4
8110d668:	5f00000b 	ldhu	fp,0(r11)
8110d66c:	0013883a 	mov	r9,zero
8110d670:	803ec30e 	bge	r16,zero,8110d180 <__reset+0xfb0ed180>
8110d674:	d8802315 	stw	r2,140(sp)
8110d678:	0015883a 	mov	r10,zero
8110d67c:	e244b03a 	or	r2,fp,r9
8110d680:	103e371e 	bne	r2,zero,8110cf60 <__reset+0xfb0ecf60>
8110d684:	00800044 	movi	r2,1
8110d688:	10803fcc 	andi	r2,r2,255
8110d68c:	00c00044 	movi	r3,1
8110d690:	10c06126 	beq	r2,r3,8110d818 <___svfiprintf_internal_r+0xffc>
8110d694:	00c00084 	movi	r3,2
8110d698:	10fd5526 	beq	r2,r3,8110cbf0 <__reset+0xfb0ecbf0>
8110d69c:	003ed806 	br	8110d200 <__reset+0xfb0ed200>
8110d6a0:	d8802315 	stw	r2,140(sp)
8110d6a4:	98c00007 	ldb	r3,0(r19)
8110d6a8:	003cab06 	br	8110c958 <__reset+0xfb0ec958>
8110d6ac:	d9801a04 	addi	r6,sp,104
8110d6b0:	b80b883a 	mov	r5,r23
8110d6b4:	a809883a 	mov	r4,r21
8110d6b8:	110c64c0 	call	8110c64c <__ssprint_r>
8110d6bc:	103f651e 	bne	r2,zero,8110d454 <__reset+0xfb0ed454>
8110d6c0:	d8c01c17 	ldw	r3,112(sp)
8110d6c4:	003f4f06 	br	8110d404 <__reset+0xfb0ed404>
8110d6c8:	00a044b4 	movhi	r2,33042
8110d6cc:	10a5fe04 	addi	r2,r2,-26632
8110d6d0:	d8802915 	stw	r2,164(sp)
8110d6d4:	003d4406 	br	8110cbe8 <__reset+0xfb0ecbe8>
8110d6d8:	dac02317 	ldw	r11,140(sp)
8110d6dc:	58800017 	ldw	r2,0(r11)
8110d6e0:	dac02517 	ldw	r11,148(sp)
8110d6e4:	5807d7fa 	srai	r3,r11,31
8110d6e8:	dac02317 	ldw	r11,140(sp)
8110d6ec:	10c00115 	stw	r3,4(r2)
8110d6f0:	5ac00104 	addi	r11,r11,4
8110d6f4:	dac02315 	stw	r11,140(sp)
8110d6f8:	dac02517 	ldw	r11,148(sp)
8110d6fc:	12c00015 	stw	r11,0(r2)
8110d700:	003c6d06 	br	8110c8b8 <__reset+0xfb0ec8b8>
8110d704:	9080100c 	andi	r2,r18,64
8110d708:	dac02317 	ldw	r11,140(sp)
8110d70c:	103e5326 	beq	r2,zero,8110d05c <__reset+0xfb0ed05c>
8110d710:	5f00000f 	ldh	fp,0(r11)
8110d714:	5ac00104 	addi	r11,r11,4
8110d718:	dac02315 	stw	r11,140(sp)
8110d71c:	e013d7fa 	srai	r9,fp,31
8110d720:	4805883a 	mov	r2,r9
8110d724:	003e0706 	br	8110cf44 <__reset+0xfb0ecf44>
8110d728:	00800c04 	movi	r2,48
8110d72c:	d8801d05 	stb	r2,116(sp)
8110d730:	d8c01d45 	stb	r3,117(sp)
8110d734:	d8001d85 	stb	zero,118(sp)
8110d738:	90800094 	ori	r2,r18,2
8110d73c:	80008f16 	blt	r16,zero,8110d97c <___svfiprintf_internal_r+0x1160>
8110d740:	00bfdfc4 	movi	r2,-129
8110d744:	90a4703a 	and	r18,r18,r2
8110d748:	94800094 	ori	r18,r18,2
8110d74c:	0015883a 	mov	r10,zero
8110d750:	003d2906 	br	8110cbf8 <__reset+0xfb0ecbf8>
8110d754:	98c00007 	ldb	r3,0(r19)
8110d758:	003c7f06 	br	8110c958 <__reset+0xfb0ec958>
8110d75c:	dac02317 	ldw	r11,140(sp)
8110d760:	0013883a 	mov	r9,zero
8110d764:	5f000017 	ldw	fp,0(r11)
8110d768:	5ac00104 	addi	r11,r11,4
8110d76c:	dac02315 	stw	r11,140(sp)
8110d770:	003d1506 	br	8110cbc8 <__reset+0xfb0ecbc8>
8110d774:	9080100c 	andi	r2,r18,64
8110d778:	d8001d85 	stb	zero,118(sp)
8110d77c:	dac02317 	ldw	r11,140(sp)
8110d780:	10003426 	beq	r2,zero,8110d854 <___svfiprintf_internal_r+0x1038>
8110d784:	58800104 	addi	r2,r11,4
8110d788:	5f00000b 	ldhu	fp,0(r11)
8110d78c:	0013883a 	mov	r9,zero
8110d790:	803e950e 	bge	r16,zero,8110d1e8 <__reset+0xfb0ed1e8>
8110d794:	e246b03a 	or	r3,fp,r9
8110d798:	d8802315 	stw	r2,140(sp)
8110d79c:	183d5a1e 	bne	r3,zero,8110cd08 <__reset+0xfb0ecd08>
8110d7a0:	0015883a 	mov	r10,zero
8110d7a4:	0005883a 	mov	r2,zero
8110d7a8:	003fb706 	br	8110d688 <__reset+0xfb0ed688>
8110d7ac:	98c00043 	ldbu	r3,1(r19)
8110d7b0:	94800814 	ori	r18,r18,32
8110d7b4:	9cc00044 	addi	r19,r19,1
8110d7b8:	18c03fcc 	andi	r3,r3,255
8110d7bc:	18c0201c 	xori	r3,r3,128
8110d7c0:	18ffe004 	addi	r3,r3,-128
8110d7c4:	003c6406 	br	8110c958 <__reset+0xfb0ec958>
8110d7c8:	d8c02315 	stw	r3,140(sp)
8110d7cc:	0015883a 	mov	r10,zero
8110d7d0:	003faa06 	br	8110d67c <__reset+0xfb0ed67c>
8110d7d4:	dac02317 	ldw	r11,140(sp)
8110d7d8:	58800017 	ldw	r2,0(r11)
8110d7dc:	5ac00104 	addi	r11,r11,4
8110d7e0:	dac02315 	stw	r11,140(sp)
8110d7e4:	dac02517 	ldw	r11,148(sp)
8110d7e8:	12c00015 	stw	r11,0(r2)
8110d7ec:	003c3206 	br	8110c8b8 <__reset+0xfb0ec8b8>
8110d7f0:	012044b4 	movhi	r4,33042
8110d7f4:	2125fe04 	addi	r4,r4,-26632
8110d7f8:	d9002915 	stw	r4,164(sp)
8110d7fc:	d8c02315 	stw	r3,140(sp)
8110d800:	1025883a 	mov	r18,r2
8110d804:	e244b03a 	or	r2,fp,r9
8110d808:	103f871e 	bne	r2,zero,8110d628 <__reset+0xfb0ed628>
8110d80c:	0015883a 	mov	r10,zero
8110d810:	00800084 	movi	r2,2
8110d814:	003f9c06 	br	8110d688 <__reset+0xfb0ed688>
8110d818:	0039883a 	mov	fp,zero
8110d81c:	003e5f06 	br	8110d19c <__reset+0xfb0ed19c>
8110d820:	d9801a04 	addi	r6,sp,104
8110d824:	b80b883a 	mov	r5,r23
8110d828:	a809883a 	mov	r4,r21
8110d82c:	110c64c0 	call	8110c64c <__ssprint_r>
8110d830:	103f081e 	bne	r2,zero,8110d454 <__reset+0xfb0ed454>
8110d834:	d8c01c17 	ldw	r3,112(sp)
8110d838:	d8801b17 	ldw	r2,108(sp)
8110d83c:	d811883a 	mov	r8,sp
8110d840:	003e9106 	br	8110d288 <__reset+0xfb0ed288>
8110d844:	012044b4 	movhi	r4,33042
8110d848:	21266704 	addi	r4,r4,-26212
8110d84c:	d9002215 	stw	r4,136(sp)
8110d850:	003ead06 	br	8110d308 <__reset+0xfb0ed308>
8110d854:	58800104 	addi	r2,r11,4
8110d858:	5f000017 	ldw	fp,0(r11)
8110d85c:	0013883a 	mov	r9,zero
8110d860:	803e610e 	bge	r16,zero,8110d1e8 <__reset+0xfb0ed1e8>
8110d864:	003fcb06 	br	8110d794 <__reset+0xfb0ed794>
8110d868:	58800104 	addi	r2,r11,4
8110d86c:	5f000017 	ldw	fp,0(r11)
8110d870:	0013883a 	mov	r9,zero
8110d874:	803e420e 	bge	r16,zero,8110d180 <__reset+0xfb0ed180>
8110d878:	003f7e06 	br	8110d674 <__reset+0xfb0ed674>
8110d87c:	5f000017 	ldw	fp,0(r11)
8110d880:	5ac00104 	addi	r11,r11,4
8110d884:	0013883a 	mov	r9,zero
8110d888:	dac02315 	stw	r11,140(sp)
8110d88c:	003cce06 	br	8110cbc8 <__reset+0xfb0ecbc8>
8110d890:	8809883a 	mov	r4,r17
8110d894:	da002c15 	stw	r8,176(sp)
8110d898:	1102ebc0 	call	81102ebc <strlen>
8110d89c:	d8802115 	stw	r2,132(sp)
8110d8a0:	da801d83 	ldbu	r10,118(sp)
8110d8a4:	df002315 	stw	fp,140(sp)
8110d8a8:	0021883a 	mov	r16,zero
8110d8ac:	da002c17 	ldw	r8,176(sp)
8110d8b0:	003cf606 	br	8110cc8c <__reset+0xfb0ecc8c>
8110d8b4:	00800184 	movi	r2,6
8110d8b8:	1400012e 	bgeu	r2,r16,8110d8c0 <___svfiprintf_internal_r+0x10a4>
8110d8bc:	1021883a 	mov	r16,r2
8110d8c0:	dc002115 	stw	r16,132(sp)
8110d8c4:	8005883a 	mov	r2,r16
8110d8c8:	80003c16 	blt	r16,zero,8110d9bc <___svfiprintf_internal_r+0x11a0>
8110d8cc:	046044b4 	movhi	r17,33042
8110d8d0:	d8802015 	stw	r2,128(sp)
8110d8d4:	df002315 	stw	fp,140(sp)
8110d8d8:	8c660304 	addi	r17,r17,-26612
8110d8dc:	003d2e06 	br	8110cd98 <__reset+0xfb0ecd98>
8110d8e0:	04001004 	movi	r16,64
8110d8e4:	800b883a 	mov	r5,r16
8110d8e8:	110a1300 	call	8110a130 <_malloc_r>
8110d8ec:	dac02717 	ldw	r11,156(sp)
8110d8f0:	58800015 	stw	r2,0(r11)
8110d8f4:	58800415 	stw	r2,16(r11)
8110d8f8:	10004826 	beq	r2,zero,8110da1c <___svfiprintf_internal_r+0x1200>
8110d8fc:	dac02717 	ldw	r11,156(sp)
8110d900:	5c000515 	stw	r16,20(r11)
8110d904:	003bd906 	br	8110c86c <__reset+0xfb0ec86c>
8110d908:	9080004c 	andi	r2,r18,1
8110d90c:	0015883a 	mov	r10,zero
8110d910:	10000626 	beq	r2,zero,8110d92c <___svfiprintf_internal_r+0x1110>
8110d914:	dac02b17 	ldw	r11,172(sp)
8110d918:	00800c04 	movi	r2,48
8110d91c:	d88019c5 	stb	r2,103(sp)
8110d920:	dac02115 	stw	r11,132(sp)
8110d924:	dc4019c4 	addi	r17,sp,103
8110d928:	003cd806 	br	8110cc8c <__reset+0xfb0ecc8c>
8110d92c:	d8002115 	stw	zero,132(sp)
8110d930:	dc401a04 	addi	r17,sp,104
8110d934:	003cd506 	br	8110cc8c <__reset+0xfb0ecc8c>
8110d938:	012044b4 	movhi	r4,33042
8110d93c:	21266b04 	addi	r4,r4,-26196
8110d940:	d9002815 	stw	r4,160(sp)
8110d944:	003d4306 	br	8110ce54 <__reset+0xfb0ece54>
8110d948:	00bfffc4 	movi	r2,-1
8110d94c:	003ec606 	br	8110d468 <__reset+0xfb0ed468>
8110d950:	00800044 	movi	r2,1
8110d954:	10803fcc 	andi	r2,r2,255
8110d958:	00c00044 	movi	r3,1
8110d95c:	10fd8026 	beq	r2,r3,8110cf60 <__reset+0xfb0ecf60>
8110d960:	00c00084 	movi	r3,2
8110d964:	10fca426 	beq	r2,r3,8110cbf8 <__reset+0xfb0ecbf8>
8110d968:	003ce806 	br	8110cd0c <__reset+0xfb0ecd0c>
8110d96c:	012044b4 	movhi	r4,33042
8110d970:	21266b04 	addi	r4,r4,-26196
8110d974:	d9002815 	stw	r4,160(sp)
8110d978:	003e9906 	br	8110d3e0 <__reset+0xfb0ed3e0>
8110d97c:	1025883a 	mov	r18,r2
8110d980:	0015883a 	mov	r10,zero
8110d984:	00800084 	movi	r2,2
8110d988:	003ff206 	br	8110d954 <__reset+0xfb0ed954>
8110d98c:	016044b4 	movhi	r5,33042
8110d990:	29666704 	addi	r5,r5,-26212
8110d994:	d9402215 	stw	r5,136(sp)
8110d998:	003ee206 	br	8110d524 <__reset+0xfb0ed524>
8110d99c:	5827883a 	mov	r19,r11
8110d9a0:	0021883a 	mov	r16,zero
8110d9a4:	003bed06 	br	8110c95c <__reset+0xfb0ec95c>
8110d9a8:	dc002115 	stw	r16,132(sp)
8110d9ac:	da801d83 	ldbu	r10,118(sp)
8110d9b0:	df002315 	stw	fp,140(sp)
8110d9b4:	0021883a 	mov	r16,zero
8110d9b8:	003cb406 	br	8110cc8c <__reset+0xfb0ecc8c>
8110d9bc:	0005883a 	mov	r2,zero
8110d9c0:	003fc206 	br	8110d8cc <__reset+0xfb0ed8cc>
8110d9c4:	d8802317 	ldw	r2,140(sp)
8110d9c8:	98c00043 	ldbu	r3,1(r19)
8110d9cc:	5827883a 	mov	r19,r11
8110d9d0:	14000017 	ldw	r16,0(r2)
8110d9d4:	10800104 	addi	r2,r2,4
8110d9d8:	d8802315 	stw	r2,140(sp)
8110d9dc:	803f760e 	bge	r16,zero,8110d7b8 <__reset+0xfb0ed7b8>
8110d9e0:	18c03fcc 	andi	r3,r3,255
8110d9e4:	18c0201c 	xori	r3,r3,128
8110d9e8:	043fffc4 	movi	r16,-1
8110d9ec:	18ffe004 	addi	r3,r3,-128
8110d9f0:	003bd906 	br	8110c958 <__reset+0xfb0ec958>
8110d9f4:	d9c01d85 	stb	r7,118(sp)
8110d9f8:	003cb606 	br	8110ccd4 <__reset+0xfb0eccd4>
8110d9fc:	d9c01d85 	stb	r7,118(sp)
8110da00:	003d2106 	br	8110ce88 <__reset+0xfb0ece88>
8110da04:	d9c01d85 	stb	r7,118(sp)
8110da08:	003d8e06 	br	8110d044 <__reset+0xfb0ed044>
8110da0c:	d9c01d85 	stb	r7,118(sp)
8110da10:	003db306 	br	8110d0e0 <__reset+0xfb0ed0e0>
8110da14:	d9c01d85 	stb	r7,118(sp)
8110da18:	003c8a06 	br	8110cc44 <__reset+0xfb0ecc44>
8110da1c:	dac02a17 	ldw	r11,168(sp)
8110da20:	00800304 	movi	r2,12
8110da24:	58800015 	stw	r2,0(r11)
8110da28:	00bfffc4 	movi	r2,-1
8110da2c:	003e8e06 	br	8110d468 <__reset+0xfb0ed468>
8110da30:	d9c01d85 	stb	r7,118(sp)
8110da34:	003dc706 	br	8110d154 <__reset+0xfb0ed154>
8110da38:	d9c01d85 	stb	r7,118(sp)
8110da3c:	003ddf06 	br	8110d1bc <__reset+0xfb0ed1bc>
8110da40:	d9c01d85 	stb	r7,118(sp)
8110da44:	003d3706 	br	8110cf24 <__reset+0xfb0ecf24>
8110da48:	d9c01d85 	stb	r7,118(sp)
8110da4c:	003c5406 	br	8110cba0 <__reset+0xfb0ecba0>
8110da50:	d9c01d85 	stb	r7,118(sp)
8110da54:	003d1d06 	br	8110cecc <__reset+0xfb0ececc>

8110da58 <__sprint_r.part.0>:
8110da58:	28801917 	ldw	r2,100(r5)
8110da5c:	defff604 	addi	sp,sp,-40
8110da60:	dd400515 	stw	r21,20(sp)
8110da64:	dfc00915 	stw	ra,36(sp)
8110da68:	df000815 	stw	fp,32(sp)
8110da6c:	ddc00715 	stw	r23,28(sp)
8110da70:	dd800615 	stw	r22,24(sp)
8110da74:	dd000415 	stw	r20,16(sp)
8110da78:	dcc00315 	stw	r19,12(sp)
8110da7c:	dc800215 	stw	r18,8(sp)
8110da80:	dc400115 	stw	r17,4(sp)
8110da84:	dc000015 	stw	r16,0(sp)
8110da88:	1088000c 	andi	r2,r2,8192
8110da8c:	302b883a 	mov	r21,r6
8110da90:	10002e26 	beq	r2,zero,8110db4c <__sprint_r.part.0+0xf4>
8110da94:	30800217 	ldw	r2,8(r6)
8110da98:	35800017 	ldw	r22,0(r6)
8110da9c:	10002926 	beq	r2,zero,8110db44 <__sprint_r.part.0+0xec>
8110daa0:	2827883a 	mov	r19,r5
8110daa4:	2029883a 	mov	r20,r4
8110daa8:	b5c00104 	addi	r23,r22,4
8110daac:	04bfffc4 	movi	r18,-1
8110dab0:	bc400017 	ldw	r17,0(r23)
8110dab4:	b4000017 	ldw	r16,0(r22)
8110dab8:	0039883a 	mov	fp,zero
8110dabc:	8822d0ba 	srli	r17,r17,2
8110dac0:	8800031e 	bne	r17,zero,8110dad0 <__sprint_r.part.0+0x78>
8110dac4:	00001806 	br	8110db28 <__sprint_r.part.0+0xd0>
8110dac8:	84000104 	addi	r16,r16,4
8110dacc:	8f001526 	beq	r17,fp,8110db24 <__sprint_r.part.0+0xcc>
8110dad0:	81400017 	ldw	r5,0(r16)
8110dad4:	980d883a 	mov	r6,r19
8110dad8:	a009883a 	mov	r4,r20
8110dadc:	110f5d80 	call	8110f5d8 <_fputwc_r>
8110dae0:	e7000044 	addi	fp,fp,1
8110dae4:	14bff81e 	bne	r2,r18,8110dac8 <__reset+0xfb0edac8>
8110dae8:	9005883a 	mov	r2,r18
8110daec:	a8000215 	stw	zero,8(r21)
8110daf0:	a8000115 	stw	zero,4(r21)
8110daf4:	dfc00917 	ldw	ra,36(sp)
8110daf8:	df000817 	ldw	fp,32(sp)
8110dafc:	ddc00717 	ldw	r23,28(sp)
8110db00:	dd800617 	ldw	r22,24(sp)
8110db04:	dd400517 	ldw	r21,20(sp)
8110db08:	dd000417 	ldw	r20,16(sp)
8110db0c:	dcc00317 	ldw	r19,12(sp)
8110db10:	dc800217 	ldw	r18,8(sp)
8110db14:	dc400117 	ldw	r17,4(sp)
8110db18:	dc000017 	ldw	r16,0(sp)
8110db1c:	dec00a04 	addi	sp,sp,40
8110db20:	f800283a 	ret
8110db24:	a8800217 	ldw	r2,8(r21)
8110db28:	8c63883a 	add	r17,r17,r17
8110db2c:	8c63883a 	add	r17,r17,r17
8110db30:	1445c83a 	sub	r2,r2,r17
8110db34:	a8800215 	stw	r2,8(r21)
8110db38:	b5800204 	addi	r22,r22,8
8110db3c:	bdc00204 	addi	r23,r23,8
8110db40:	103fdb1e 	bne	r2,zero,8110dab0 <__reset+0xfb0edab0>
8110db44:	0005883a 	mov	r2,zero
8110db48:	003fe806 	br	8110daec <__reset+0xfb0edaec>
8110db4c:	11098540 	call	81109854 <__sfvwrite_r>
8110db50:	003fe606 	br	8110daec <__reset+0xfb0edaec>

8110db54 <__sprint_r>:
8110db54:	30c00217 	ldw	r3,8(r6)
8110db58:	18000126 	beq	r3,zero,8110db60 <__sprint_r+0xc>
8110db5c:	110da581 	jmpi	8110da58 <__sprint_r.part.0>
8110db60:	30000115 	stw	zero,4(r6)
8110db64:	0005883a 	mov	r2,zero
8110db68:	f800283a 	ret

8110db6c <___vfiprintf_internal_r>:
8110db6c:	deffc904 	addi	sp,sp,-220
8110db70:	df003515 	stw	fp,212(sp)
8110db74:	dd003115 	stw	r20,196(sp)
8110db78:	dfc03615 	stw	ra,216(sp)
8110db7c:	ddc03415 	stw	r23,208(sp)
8110db80:	dd803315 	stw	r22,204(sp)
8110db84:	dd403215 	stw	r21,200(sp)
8110db88:	dcc03015 	stw	r19,192(sp)
8110db8c:	dc802f15 	stw	r18,188(sp)
8110db90:	dc402e15 	stw	r17,184(sp)
8110db94:	dc002d15 	stw	r16,180(sp)
8110db98:	d9002015 	stw	r4,128(sp)
8110db9c:	d9c02215 	stw	r7,136(sp)
8110dba0:	2829883a 	mov	r20,r5
8110dba4:	3039883a 	mov	fp,r6
8110dba8:	20000226 	beq	r4,zero,8110dbb4 <___vfiprintf_internal_r+0x48>
8110dbac:	20800e17 	ldw	r2,56(r4)
8110dbb0:	1000cf26 	beq	r2,zero,8110def0 <___vfiprintf_internal_r+0x384>
8110dbb4:	a080030b 	ldhu	r2,12(r20)
8110dbb8:	10c8000c 	andi	r3,r2,8192
8110dbbc:	1800061e 	bne	r3,zero,8110dbd8 <___vfiprintf_internal_r+0x6c>
8110dbc0:	a1001917 	ldw	r4,100(r20)
8110dbc4:	00f7ffc4 	movi	r3,-8193
8110dbc8:	10880014 	ori	r2,r2,8192
8110dbcc:	20c6703a 	and	r3,r4,r3
8110dbd0:	a080030d 	sth	r2,12(r20)
8110dbd4:	a0c01915 	stw	r3,100(r20)
8110dbd8:	10c0020c 	andi	r3,r2,8
8110dbdc:	1800a926 	beq	r3,zero,8110de84 <___vfiprintf_internal_r+0x318>
8110dbe0:	a0c00417 	ldw	r3,16(r20)
8110dbe4:	1800a726 	beq	r3,zero,8110de84 <___vfiprintf_internal_r+0x318>
8110dbe8:	1080068c 	andi	r2,r2,26
8110dbec:	00c00284 	movi	r3,10
8110dbf0:	10c0ac26 	beq	r2,r3,8110dea4 <___vfiprintf_internal_r+0x338>
8110dbf4:	da801a04 	addi	r10,sp,104
8110dbf8:	da801e15 	stw	r10,120(sp)
8110dbfc:	d8801e17 	ldw	r2,120(sp)
8110dc00:	da8019c4 	addi	r10,sp,103
8110dc04:	05a044b4 	movhi	r22,33042
8110dc08:	05e044b4 	movhi	r23,33042
8110dc0c:	da801f15 	stw	r10,124(sp)
8110dc10:	1295c83a 	sub	r10,r2,r10
8110dc14:	b5a67304 	addi	r22,r22,-26164
8110dc18:	bde66f04 	addi	r23,r23,-26180
8110dc1c:	dec01a15 	stw	sp,104(sp)
8110dc20:	d8001c15 	stw	zero,112(sp)
8110dc24:	d8001b15 	stw	zero,108(sp)
8110dc28:	d8002615 	stw	zero,152(sp)
8110dc2c:	d8002315 	stw	zero,140(sp)
8110dc30:	da802715 	stw	r10,156(sp)
8110dc34:	d811883a 	mov	r8,sp
8110dc38:	dd002115 	stw	r20,132(sp)
8110dc3c:	e021883a 	mov	r16,fp
8110dc40:	80800007 	ldb	r2,0(r16)
8110dc44:	1003ea26 	beq	r2,zero,8110ebf0 <___vfiprintf_internal_r+0x1084>
8110dc48:	00c00944 	movi	r3,37
8110dc4c:	8025883a 	mov	r18,r16
8110dc50:	10c0021e 	bne	r2,r3,8110dc5c <___vfiprintf_internal_r+0xf0>
8110dc54:	00001606 	br	8110dcb0 <___vfiprintf_internal_r+0x144>
8110dc58:	10c00326 	beq	r2,r3,8110dc68 <___vfiprintf_internal_r+0xfc>
8110dc5c:	94800044 	addi	r18,r18,1
8110dc60:	90800007 	ldb	r2,0(r18)
8110dc64:	103ffc1e 	bne	r2,zero,8110dc58 <__reset+0xfb0edc58>
8110dc68:	9423c83a 	sub	r17,r18,r16
8110dc6c:	88001026 	beq	r17,zero,8110dcb0 <___vfiprintf_internal_r+0x144>
8110dc70:	d8c01c17 	ldw	r3,112(sp)
8110dc74:	d8801b17 	ldw	r2,108(sp)
8110dc78:	44000015 	stw	r16,0(r8)
8110dc7c:	88c7883a 	add	r3,r17,r3
8110dc80:	10800044 	addi	r2,r2,1
8110dc84:	44400115 	stw	r17,4(r8)
8110dc88:	d8c01c15 	stw	r3,112(sp)
8110dc8c:	d8801b15 	stw	r2,108(sp)
8110dc90:	010001c4 	movi	r4,7
8110dc94:	2080760e 	bge	r4,r2,8110de70 <___vfiprintf_internal_r+0x304>
8110dc98:	1803821e 	bne	r3,zero,8110eaa4 <___vfiprintf_internal_r+0xf38>
8110dc9c:	da802317 	ldw	r10,140(sp)
8110dca0:	d8001b15 	stw	zero,108(sp)
8110dca4:	d811883a 	mov	r8,sp
8110dca8:	5455883a 	add	r10,r10,r17
8110dcac:	da802315 	stw	r10,140(sp)
8110dcb0:	90800007 	ldb	r2,0(r18)
8110dcb4:	10044626 	beq	r2,zero,8110edd0 <___vfiprintf_internal_r+0x1264>
8110dcb8:	90c00047 	ldb	r3,1(r18)
8110dcbc:	94000044 	addi	r16,r18,1
8110dcc0:	d8001d85 	stb	zero,118(sp)
8110dcc4:	0009883a 	mov	r4,zero
8110dcc8:	000f883a 	mov	r7,zero
8110dccc:	027fffc4 	movi	r9,-1
8110dcd0:	0023883a 	mov	r17,zero
8110dcd4:	0029883a 	mov	r20,zero
8110dcd8:	01401604 	movi	r5,88
8110dcdc:	01800244 	movi	r6,9
8110dce0:	03400a84 	movi	r13,42
8110dce4:	03001b04 	movi	r12,108
8110dce8:	84000044 	addi	r16,r16,1
8110dcec:	18bff804 	addi	r2,r3,-32
8110dcf0:	28827336 	bltu	r5,r2,8110e6c0 <___vfiprintf_internal_r+0xb54>
8110dcf4:	100490ba 	slli	r2,r2,2
8110dcf8:	02a04474 	movhi	r10,33041
8110dcfc:	52b74304 	addi	r10,r10,-8948
8110dd00:	1285883a 	add	r2,r2,r10
8110dd04:	10800017 	ldw	r2,0(r2)
8110dd08:	1000683a 	jmp	r2
8110dd0c:	8110e3f4 	orhi	r4,r16,17295
8110dd10:	8110e6c0 	call	88110e6c <__reset+0x20f0e6c>
8110dd14:	8110e6c0 	call	88110e6c <__reset+0x20f0e6c>
8110dd18:	8110e414 	ori	r4,r16,17296
8110dd1c:	8110e6c0 	call	88110e6c <__reset+0x20f0e6c>
8110dd20:	8110e6c0 	call	88110e6c <__reset+0x20f0e6c>
8110dd24:	8110e6c0 	call	88110e6c <__reset+0x20f0e6c>
8110dd28:	8110e6c0 	call	88110e6c <__reset+0x20f0e6c>
8110dd2c:	8110e6c0 	call	88110e6c <__reset+0x20f0e6c>
8110dd30:	8110e6c0 	call	88110e6c <__reset+0x20f0e6c>
8110dd34:	8110e5fc 	xorhi	r4,r16,17303
8110dd38:	8110e618 	cmpnei	r4,r16,17304
8110dd3c:	8110e6c0 	call	88110e6c <__reset+0x20f0e6c>
8110dd40:	8110df00 	call	88110df0 <__reset+0x20f0df0>
8110dd44:	8110e628 	cmpgeui	r4,r16,17304
8110dd48:	8110e6c0 	call	88110e6c <__reset+0x20f0e6c>
8110dd4c:	8110e420 	cmpeqi	r4,r16,17296
8110dd50:	8110e42c 	andhi	r4,r16,17296
8110dd54:	8110e42c 	andhi	r4,r16,17296
8110dd58:	8110e42c 	andhi	r4,r16,17296
8110dd5c:	8110e42c 	andhi	r4,r16,17296
8110dd60:	8110e42c 	andhi	r4,r16,17296
8110dd64:	8110e42c 	andhi	r4,r16,17296
8110dd68:	8110e42c 	andhi	r4,r16,17296
8110dd6c:	8110e42c 	andhi	r4,r16,17296
8110dd70:	8110e42c 	andhi	r4,r16,17296
8110dd74:	8110e6c0 	call	88110e6c <__reset+0x20f0e6c>
8110dd78:	8110e6c0 	call	88110e6c <__reset+0x20f0e6c>
8110dd7c:	8110e6c0 	call	88110e6c <__reset+0x20f0e6c>
8110dd80:	8110e6c0 	call	88110e6c <__reset+0x20f0e6c>
8110dd84:	8110e6c0 	call	88110e6c <__reset+0x20f0e6c>
8110dd88:	8110e6c0 	call	88110e6c <__reset+0x20f0e6c>
8110dd8c:	8110e6c0 	call	88110e6c <__reset+0x20f0e6c>
8110dd90:	8110e6c0 	call	88110e6c <__reset+0x20f0e6c>
8110dd94:	8110e6c0 	call	88110e6c <__reset+0x20f0e6c>
8110dd98:	8110e6c0 	call	88110e6c <__reset+0x20f0e6c>
8110dd9c:	8110e458 	cmpnei	r4,r16,17297
8110dda0:	8110e6c0 	call	88110e6c <__reset+0x20f0e6c>
8110dda4:	8110e6c0 	call	88110e6c <__reset+0x20f0e6c>
8110dda8:	8110e6c0 	call	88110e6c <__reset+0x20f0e6c>
8110ddac:	8110e6c0 	call	88110e6c <__reset+0x20f0e6c>
8110ddb0:	8110e6c0 	call	88110e6c <__reset+0x20f0e6c>
8110ddb4:	8110e6c0 	call	88110e6c <__reset+0x20f0e6c>
8110ddb8:	8110e6c0 	call	88110e6c <__reset+0x20f0e6c>
8110ddbc:	8110e6c0 	call	88110e6c <__reset+0x20f0e6c>
8110ddc0:	8110e6c0 	call	88110e6c <__reset+0x20f0e6c>
8110ddc4:	8110e6c0 	call	88110e6c <__reset+0x20f0e6c>
8110ddc8:	8110e490 	cmplti	r4,r16,17298
8110ddcc:	8110e6c0 	call	88110e6c <__reset+0x20f0e6c>
8110ddd0:	8110e6c0 	call	88110e6c <__reset+0x20f0e6c>
8110ddd4:	8110e6c0 	call	88110e6c <__reset+0x20f0e6c>
8110ddd8:	8110e6c0 	call	88110e6c <__reset+0x20f0e6c>
8110dddc:	8110e6c0 	call	88110e6c <__reset+0x20f0e6c>
8110dde0:	8110e4e8 	cmpgeui	r4,r16,17299
8110dde4:	8110e6c0 	call	88110e6c <__reset+0x20f0e6c>
8110dde8:	8110e6c0 	call	88110e6c <__reset+0x20f0e6c>
8110ddec:	8110e558 	cmpnei	r4,r16,17301
8110ddf0:	8110e6c0 	call	88110e6c <__reset+0x20f0e6c>
8110ddf4:	8110e6c0 	call	88110e6c <__reset+0x20f0e6c>
8110ddf8:	8110e6c0 	call	88110e6c <__reset+0x20f0e6c>
8110ddfc:	8110e6c0 	call	88110e6c <__reset+0x20f0e6c>
8110de00:	8110e6c0 	call	88110e6c <__reset+0x20f0e6c>
8110de04:	8110e6c0 	call	88110e6c <__reset+0x20f0e6c>
8110de08:	8110e6c0 	call	88110e6c <__reset+0x20f0e6c>
8110de0c:	8110e6c0 	call	88110e6c <__reset+0x20f0e6c>
8110de10:	8110e6c0 	call	88110e6c <__reset+0x20f0e6c>
8110de14:	8110e6c0 	call	88110e6c <__reset+0x20f0e6c>
8110de18:	8110e304 	addi	r4,r16,17292
8110de1c:	8110e330 	cmpltui	r4,r16,17292
8110de20:	8110e6c0 	call	88110e6c <__reset+0x20f0e6c>
8110de24:	8110e6c0 	call	88110e6c <__reset+0x20f0e6c>
8110de28:	8110e6c0 	call	88110e6c <__reset+0x20f0e6c>
8110de2c:	8110e668 	cmpgeui	r4,r16,17305
8110de30:	8110e330 	cmpltui	r4,r16,17292
8110de34:	8110e6c0 	call	88110e6c <__reset+0x20f0e6c>
8110de38:	8110e6c0 	call	88110e6c <__reset+0x20f0e6c>
8110de3c:	8110e1c4 	addi	r4,r16,17287
8110de40:	8110e6c0 	call	88110e6c <__reset+0x20f0e6c>
8110de44:	8110e1d4 	ori	r4,r16,17287
8110de48:	8110e210 	cmplti	r4,r16,17288
8110de4c:	8110df0c 	andi	r4,r16,17276
8110de50:	8110e1b8 	rdprs	r4,r16,17286
8110de54:	8110e6c0 	call	88110e6c <__reset+0x20f0e6c>
8110de58:	8110e594 	ori	r4,r16,17302
8110de5c:	8110e6c0 	call	88110e6c <__reset+0x20f0e6c>
8110de60:	8110e5ec 	andhi	r4,r16,17303
8110de64:	8110e6c0 	call	88110e6c <__reset+0x20f0e6c>
8110de68:	8110e6c0 	call	88110e6c <__reset+0x20f0e6c>
8110de6c:	8110e2b0 	cmpltui	r4,r16,17290
8110de70:	42000204 	addi	r8,r8,8
8110de74:	da802317 	ldw	r10,140(sp)
8110de78:	5455883a 	add	r10,r10,r17
8110de7c:	da802315 	stw	r10,140(sp)
8110de80:	003f8b06 	br	8110dcb0 <__reset+0xfb0edcb0>
8110de84:	d9002017 	ldw	r4,128(sp)
8110de88:	a00b883a 	mov	r5,r20
8110de8c:	11073fc0 	call	811073fc <__swsetup_r>
8110de90:	1003b11e 	bne	r2,zero,8110ed58 <___vfiprintf_internal_r+0x11ec>
8110de94:	a080030b 	ldhu	r2,12(r20)
8110de98:	00c00284 	movi	r3,10
8110de9c:	1080068c 	andi	r2,r2,26
8110dea0:	10ff541e 	bne	r2,r3,8110dbf4 <__reset+0xfb0edbf4>
8110dea4:	a080038f 	ldh	r2,14(r20)
8110dea8:	103f5216 	blt	r2,zero,8110dbf4 <__reset+0xfb0edbf4>
8110deac:	d9c02217 	ldw	r7,136(sp)
8110deb0:	d9002017 	ldw	r4,128(sp)
8110deb4:	e00d883a 	mov	r6,fp
8110deb8:	a00b883a 	mov	r5,r20
8110debc:	110efe40 	call	8110efe4 <__sbprintf>
8110dec0:	dfc03617 	ldw	ra,216(sp)
8110dec4:	df003517 	ldw	fp,212(sp)
8110dec8:	ddc03417 	ldw	r23,208(sp)
8110decc:	dd803317 	ldw	r22,204(sp)
8110ded0:	dd403217 	ldw	r21,200(sp)
8110ded4:	dd003117 	ldw	r20,196(sp)
8110ded8:	dcc03017 	ldw	r19,192(sp)
8110dedc:	dc802f17 	ldw	r18,188(sp)
8110dee0:	dc402e17 	ldw	r17,184(sp)
8110dee4:	dc002d17 	ldw	r16,180(sp)
8110dee8:	dec03704 	addi	sp,sp,220
8110deec:	f800283a 	ret
8110def0:	11093d00 	call	811093d0 <__sinit>
8110def4:	003f2f06 	br	8110dbb4 <__reset+0xfb0edbb4>
8110def8:	0463c83a 	sub	r17,zero,r17
8110defc:	d8802215 	stw	r2,136(sp)
8110df00:	a5000114 	ori	r20,r20,4
8110df04:	80c00007 	ldb	r3,0(r16)
8110df08:	003f7706 	br	8110dce8 <__reset+0xfb0edce8>
8110df0c:	00800c04 	movi	r2,48
8110df10:	da802217 	ldw	r10,136(sp)
8110df14:	d8801d05 	stb	r2,116(sp)
8110df18:	00801e04 	movi	r2,120
8110df1c:	d8801d45 	stb	r2,117(sp)
8110df20:	d8001d85 	stb	zero,118(sp)
8110df24:	50c00104 	addi	r3,r10,4
8110df28:	54800017 	ldw	r18,0(r10)
8110df2c:	0027883a 	mov	r19,zero
8110df30:	a0800094 	ori	r2,r20,2
8110df34:	48030b16 	blt	r9,zero,8110eb64 <___vfiprintf_internal_r+0xff8>
8110df38:	00bfdfc4 	movi	r2,-129
8110df3c:	a096703a 	and	r11,r20,r2
8110df40:	d8c02215 	stw	r3,136(sp)
8110df44:	5d000094 	ori	r20,r11,2
8110df48:	90032b1e 	bne	r18,zero,8110ebf8 <___vfiprintf_internal_r+0x108c>
8110df4c:	00a044b4 	movhi	r2,33042
8110df50:	10a5fe04 	addi	r2,r2,-26632
8110df54:	d8802615 	stw	r2,152(sp)
8110df58:	0039883a 	mov	fp,zero
8110df5c:	48017b1e 	bne	r9,zero,8110e54c <___vfiprintf_internal_r+0x9e0>
8110df60:	0013883a 	mov	r9,zero
8110df64:	0027883a 	mov	r19,zero
8110df68:	dd401a04 	addi	r21,sp,104
8110df6c:	4825883a 	mov	r18,r9
8110df70:	4cc0010e 	bge	r9,r19,8110df78 <___vfiprintf_internal_r+0x40c>
8110df74:	9825883a 	mov	r18,r19
8110df78:	e7003fcc 	andi	fp,fp,255
8110df7c:	e700201c 	xori	fp,fp,128
8110df80:	e73fe004 	addi	fp,fp,-128
8110df84:	e0000126 	beq	fp,zero,8110df8c <___vfiprintf_internal_r+0x420>
8110df88:	94800044 	addi	r18,r18,1
8110df8c:	a380008c 	andi	r14,r20,2
8110df90:	70000126 	beq	r14,zero,8110df98 <___vfiprintf_internal_r+0x42c>
8110df94:	94800084 	addi	r18,r18,2
8110df98:	a700210c 	andi	fp,r20,132
8110df9c:	e001df1e 	bne	fp,zero,8110e71c <___vfiprintf_internal_r+0xbb0>
8110dfa0:	8c87c83a 	sub	r3,r17,r18
8110dfa4:	00c1dd0e 	bge	zero,r3,8110e71c <___vfiprintf_internal_r+0xbb0>
8110dfa8:	01c00404 	movi	r7,16
8110dfac:	d8801c17 	ldw	r2,112(sp)
8110dfb0:	38c3ad0e 	bge	r7,r3,8110ee68 <___vfiprintf_internal_r+0x12fc>
8110dfb4:	02a044b4 	movhi	r10,33042
8110dfb8:	52a67304 	addi	r10,r10,-26164
8110dfbc:	dc002915 	stw	r16,164(sp)
8110dfc0:	d9801b17 	ldw	r6,108(sp)
8110dfc4:	da802415 	stw	r10,144(sp)
8110dfc8:	03c001c4 	movi	r15,7
8110dfcc:	da402515 	stw	r9,148(sp)
8110dfd0:	db802815 	stw	r14,160(sp)
8110dfd4:	1821883a 	mov	r16,r3
8110dfd8:	00000506 	br	8110dff0 <___vfiprintf_internal_r+0x484>
8110dfdc:	31400084 	addi	r5,r6,2
8110dfe0:	42000204 	addi	r8,r8,8
8110dfe4:	200d883a 	mov	r6,r4
8110dfe8:	843ffc04 	addi	r16,r16,-16
8110dfec:	3c000d0e 	bge	r7,r16,8110e024 <___vfiprintf_internal_r+0x4b8>
8110dff0:	10800404 	addi	r2,r2,16
8110dff4:	31000044 	addi	r4,r6,1
8110dff8:	45800015 	stw	r22,0(r8)
8110dffc:	41c00115 	stw	r7,4(r8)
8110e000:	d8801c15 	stw	r2,112(sp)
8110e004:	d9001b15 	stw	r4,108(sp)
8110e008:	793ff40e 	bge	r15,r4,8110dfdc <__reset+0xfb0edfdc>
8110e00c:	1001b51e 	bne	r2,zero,8110e6e4 <___vfiprintf_internal_r+0xb78>
8110e010:	843ffc04 	addi	r16,r16,-16
8110e014:	000d883a 	mov	r6,zero
8110e018:	01400044 	movi	r5,1
8110e01c:	d811883a 	mov	r8,sp
8110e020:	3c3ff316 	blt	r7,r16,8110dff0 <__reset+0xfb0edff0>
8110e024:	8007883a 	mov	r3,r16
8110e028:	da402517 	ldw	r9,148(sp)
8110e02c:	db802817 	ldw	r14,160(sp)
8110e030:	dc002917 	ldw	r16,164(sp)
8110e034:	da802417 	ldw	r10,144(sp)
8110e038:	1885883a 	add	r2,r3,r2
8110e03c:	40c00115 	stw	r3,4(r8)
8110e040:	42800015 	stw	r10,0(r8)
8110e044:	d8801c15 	stw	r2,112(sp)
8110e048:	d9401b15 	stw	r5,108(sp)
8110e04c:	00c001c4 	movi	r3,7
8110e050:	19426016 	blt	r3,r5,8110e9d4 <___vfiprintf_internal_r+0xe68>
8110e054:	d8c01d87 	ldb	r3,118(sp)
8110e058:	42000204 	addi	r8,r8,8
8110e05c:	29000044 	addi	r4,r5,1
8110e060:	1801b31e 	bne	r3,zero,8110e730 <___vfiprintf_internal_r+0xbc4>
8110e064:	7001c026 	beq	r14,zero,8110e768 <___vfiprintf_internal_r+0xbfc>
8110e068:	d8c01d04 	addi	r3,sp,116
8110e06c:	10800084 	addi	r2,r2,2
8110e070:	40c00015 	stw	r3,0(r8)
8110e074:	00c00084 	movi	r3,2
8110e078:	40c00115 	stw	r3,4(r8)
8110e07c:	d8801c15 	stw	r2,112(sp)
8110e080:	d9001b15 	stw	r4,108(sp)
8110e084:	00c001c4 	movi	r3,7
8110e088:	1902650e 	bge	r3,r4,8110ea20 <___vfiprintf_internal_r+0xeb4>
8110e08c:	10029a1e 	bne	r2,zero,8110eaf8 <___vfiprintf_internal_r+0xf8c>
8110e090:	00c02004 	movi	r3,128
8110e094:	01000044 	movi	r4,1
8110e098:	000b883a 	mov	r5,zero
8110e09c:	d811883a 	mov	r8,sp
8110e0a0:	e0c1b31e 	bne	fp,r3,8110e770 <___vfiprintf_internal_r+0xc04>
8110e0a4:	8cb9c83a 	sub	fp,r17,r18
8110e0a8:	0701b10e 	bge	zero,fp,8110e770 <___vfiprintf_internal_r+0xc04>
8110e0ac:	01c00404 	movi	r7,16
8110e0b0:	3f03890e 	bge	r7,fp,8110eed8 <___vfiprintf_internal_r+0x136c>
8110e0b4:	00e044b4 	movhi	r3,33042
8110e0b8:	18e66f04 	addi	r3,r3,-26180
8110e0bc:	d8c02415 	stw	r3,144(sp)
8110e0c0:	8007883a 	mov	r3,r16
8110e0c4:	034001c4 	movi	r13,7
8110e0c8:	e021883a 	mov	r16,fp
8110e0cc:	da402515 	stw	r9,148(sp)
8110e0d0:	1839883a 	mov	fp,r3
8110e0d4:	00000506 	br	8110e0ec <___vfiprintf_internal_r+0x580>
8110e0d8:	29800084 	addi	r6,r5,2
8110e0dc:	42000204 	addi	r8,r8,8
8110e0e0:	180b883a 	mov	r5,r3
8110e0e4:	843ffc04 	addi	r16,r16,-16
8110e0e8:	3c000d0e 	bge	r7,r16,8110e120 <___vfiprintf_internal_r+0x5b4>
8110e0ec:	10800404 	addi	r2,r2,16
8110e0f0:	28c00044 	addi	r3,r5,1
8110e0f4:	45c00015 	stw	r23,0(r8)
8110e0f8:	41c00115 	stw	r7,4(r8)
8110e0fc:	d8801c15 	stw	r2,112(sp)
8110e100:	d8c01b15 	stw	r3,108(sp)
8110e104:	68fff40e 	bge	r13,r3,8110e0d8 <__reset+0xfb0ee0d8>
8110e108:	1002241e 	bne	r2,zero,8110e99c <___vfiprintf_internal_r+0xe30>
8110e10c:	843ffc04 	addi	r16,r16,-16
8110e110:	01800044 	movi	r6,1
8110e114:	000b883a 	mov	r5,zero
8110e118:	d811883a 	mov	r8,sp
8110e11c:	3c3ff316 	blt	r7,r16,8110e0ec <__reset+0xfb0ee0ec>
8110e120:	da402517 	ldw	r9,148(sp)
8110e124:	e007883a 	mov	r3,fp
8110e128:	8039883a 	mov	fp,r16
8110e12c:	1821883a 	mov	r16,r3
8110e130:	d8c02417 	ldw	r3,144(sp)
8110e134:	1705883a 	add	r2,r2,fp
8110e138:	47000115 	stw	fp,4(r8)
8110e13c:	40c00015 	stw	r3,0(r8)
8110e140:	d8801c15 	stw	r2,112(sp)
8110e144:	d9801b15 	stw	r6,108(sp)
8110e148:	00c001c4 	movi	r3,7
8110e14c:	19827616 	blt	r3,r6,8110eb28 <___vfiprintf_internal_r+0xfbc>
8110e150:	4cf9c83a 	sub	fp,r9,r19
8110e154:	42000204 	addi	r8,r8,8
8110e158:	31000044 	addi	r4,r6,1
8110e15c:	300b883a 	mov	r5,r6
8110e160:	07018516 	blt	zero,fp,8110e778 <___vfiprintf_internal_r+0xc0c>
8110e164:	9885883a 	add	r2,r19,r2
8110e168:	45400015 	stw	r21,0(r8)
8110e16c:	44c00115 	stw	r19,4(r8)
8110e170:	d8801c15 	stw	r2,112(sp)
8110e174:	d9001b15 	stw	r4,108(sp)
8110e178:	00c001c4 	movi	r3,7
8110e17c:	1901dd0e 	bge	r3,r4,8110e8f4 <___vfiprintf_internal_r+0xd88>
8110e180:	1002401e 	bne	r2,zero,8110ea84 <___vfiprintf_internal_r+0xf18>
8110e184:	d8001b15 	stw	zero,108(sp)
8110e188:	a2c0010c 	andi	r11,r20,4
8110e18c:	58000226 	beq	r11,zero,8110e198 <___vfiprintf_internal_r+0x62c>
8110e190:	8ca7c83a 	sub	r19,r17,r18
8110e194:	04c2f216 	blt	zero,r19,8110ed60 <___vfiprintf_internal_r+0x11f4>
8110e198:	8c80010e 	bge	r17,r18,8110e1a0 <___vfiprintf_internal_r+0x634>
8110e19c:	9023883a 	mov	r17,r18
8110e1a0:	da802317 	ldw	r10,140(sp)
8110e1a4:	5455883a 	add	r10,r10,r17
8110e1a8:	da802315 	stw	r10,140(sp)
8110e1ac:	d8001b15 	stw	zero,108(sp)
8110e1b0:	d811883a 	mov	r8,sp
8110e1b4:	003ea206 	br	8110dc40 <__reset+0xfb0edc40>
8110e1b8:	a5000814 	ori	r20,r20,32
8110e1bc:	80c00007 	ldb	r3,0(r16)
8110e1c0:	003ec906 	br	8110dce8 <__reset+0xfb0edce8>
8110e1c4:	80c00007 	ldb	r3,0(r16)
8110e1c8:	1b030926 	beq	r3,r12,8110edf0 <___vfiprintf_internal_r+0x1284>
8110e1cc:	a5000414 	ori	r20,r20,16
8110e1d0:	003ec506 	br	8110dce8 <__reset+0xfb0edce8>
8110e1d4:	21003fcc 	andi	r4,r4,255
8110e1d8:	20035e1e 	bne	r4,zero,8110ef54 <___vfiprintf_internal_r+0x13e8>
8110e1dc:	a080080c 	andi	r2,r20,32
8110e1e0:	1002a526 	beq	r2,zero,8110ec78 <___vfiprintf_internal_r+0x110c>
8110e1e4:	da802217 	ldw	r10,136(sp)
8110e1e8:	50800017 	ldw	r2,0(r10)
8110e1ec:	da802317 	ldw	r10,140(sp)
8110e1f0:	5007d7fa 	srai	r3,r10,31
8110e1f4:	da802217 	ldw	r10,136(sp)
8110e1f8:	10c00115 	stw	r3,4(r2)
8110e1fc:	52800104 	addi	r10,r10,4
8110e200:	da802215 	stw	r10,136(sp)
8110e204:	da802317 	ldw	r10,140(sp)
8110e208:	12800015 	stw	r10,0(r2)
8110e20c:	003e8c06 	br	8110dc40 <__reset+0xfb0edc40>
8110e210:	21003fcc 	andi	r4,r4,255
8110e214:	2003511e 	bne	r4,zero,8110ef5c <___vfiprintf_internal_r+0x13f0>
8110e218:	a080080c 	andi	r2,r20,32
8110e21c:	1000a126 	beq	r2,zero,8110e4a4 <___vfiprintf_internal_r+0x938>
8110e220:	da802217 	ldw	r10,136(sp)
8110e224:	d8001d85 	stb	zero,118(sp)
8110e228:	50800204 	addi	r2,r10,8
8110e22c:	54800017 	ldw	r18,0(r10)
8110e230:	54c00117 	ldw	r19,4(r10)
8110e234:	4802b416 	blt	r9,zero,8110ed08 <___vfiprintf_internal_r+0x119c>
8110e238:	013fdfc4 	movi	r4,-129
8110e23c:	94c6b03a 	or	r3,r18,r19
8110e240:	d8802215 	stw	r2,136(sp)
8110e244:	a128703a 	and	r20,r20,r4
8110e248:	1800a226 	beq	r3,zero,8110e4d4 <___vfiprintf_internal_r+0x968>
8110e24c:	0039883a 	mov	fp,zero
8110e250:	dd401a04 	addi	r21,sp,104
8110e254:	9006d0fa 	srli	r3,r18,3
8110e258:	9808977a 	slli	r4,r19,29
8110e25c:	9826d0fa 	srli	r19,r19,3
8110e260:	948001cc 	andi	r18,r18,7
8110e264:	90800c04 	addi	r2,r18,48
8110e268:	ad7fffc4 	addi	r21,r21,-1
8110e26c:	20e4b03a 	or	r18,r4,r3
8110e270:	a8800005 	stb	r2,0(r21)
8110e274:	94c6b03a 	or	r3,r18,r19
8110e278:	183ff61e 	bne	r3,zero,8110e254 <__reset+0xfb0ee254>
8110e27c:	a0c0004c 	andi	r3,r20,1
8110e280:	18005926 	beq	r3,zero,8110e3e8 <___vfiprintf_internal_r+0x87c>
8110e284:	10803fcc 	andi	r2,r2,255
8110e288:	1080201c 	xori	r2,r2,128
8110e28c:	10bfe004 	addi	r2,r2,-128
8110e290:	00c00c04 	movi	r3,48
8110e294:	10c05426 	beq	r2,r3,8110e3e8 <___vfiprintf_internal_r+0x87c>
8110e298:	da801e17 	ldw	r10,120(sp)
8110e29c:	a8bfffc4 	addi	r2,r21,-1
8110e2a0:	a8ffffc5 	stb	r3,-1(r21)
8110e2a4:	50a7c83a 	sub	r19,r10,r2
8110e2a8:	102b883a 	mov	r21,r2
8110e2ac:	003f2f06 	br	8110df6c <__reset+0xfb0edf6c>
8110e2b0:	21003fcc 	andi	r4,r4,255
8110e2b4:	2003421e 	bne	r4,zero,8110efc0 <___vfiprintf_internal_r+0x1454>
8110e2b8:	00a044b4 	movhi	r2,33042
8110e2bc:	10a5fe04 	addi	r2,r2,-26632
8110e2c0:	d8802615 	stw	r2,152(sp)
8110e2c4:	a080080c 	andi	r2,r20,32
8110e2c8:	1000aa26 	beq	r2,zero,8110e574 <___vfiprintf_internal_r+0xa08>
8110e2cc:	da802217 	ldw	r10,136(sp)
8110e2d0:	54800017 	ldw	r18,0(r10)
8110e2d4:	54c00117 	ldw	r19,4(r10)
8110e2d8:	52800204 	addi	r10,r10,8
8110e2dc:	da802215 	stw	r10,136(sp)
8110e2e0:	a080004c 	andi	r2,r20,1
8110e2e4:	1001d226 	beq	r2,zero,8110ea30 <___vfiprintf_internal_r+0xec4>
8110e2e8:	94c4b03a 	or	r2,r18,r19
8110e2ec:	1002351e 	bne	r2,zero,8110ebc4 <___vfiprintf_internal_r+0x1058>
8110e2f0:	d8001d85 	stb	zero,118(sp)
8110e2f4:	48022216 	blt	r9,zero,8110eb80 <___vfiprintf_internal_r+0x1014>
8110e2f8:	00bfdfc4 	movi	r2,-129
8110e2fc:	a0a8703a 	and	r20,r20,r2
8110e300:	003f1506 	br	8110df58 <__reset+0xfb0edf58>
8110e304:	da802217 	ldw	r10,136(sp)
8110e308:	04800044 	movi	r18,1
8110e30c:	d8001d85 	stb	zero,118(sp)
8110e310:	50800017 	ldw	r2,0(r10)
8110e314:	52800104 	addi	r10,r10,4
8110e318:	da802215 	stw	r10,136(sp)
8110e31c:	d8801005 	stb	r2,64(sp)
8110e320:	9027883a 	mov	r19,r18
8110e324:	dd401004 	addi	r21,sp,64
8110e328:	0013883a 	mov	r9,zero
8110e32c:	003f1706 	br	8110df8c <__reset+0xfb0edf8c>
8110e330:	21003fcc 	andi	r4,r4,255
8110e334:	2003201e 	bne	r4,zero,8110efb8 <___vfiprintf_internal_r+0x144c>
8110e338:	a080080c 	andi	r2,r20,32
8110e33c:	10004b26 	beq	r2,zero,8110e46c <___vfiprintf_internal_r+0x900>
8110e340:	da802217 	ldw	r10,136(sp)
8110e344:	50800117 	ldw	r2,4(r10)
8110e348:	54800017 	ldw	r18,0(r10)
8110e34c:	52800204 	addi	r10,r10,8
8110e350:	da802215 	stw	r10,136(sp)
8110e354:	1027883a 	mov	r19,r2
8110e358:	10022c16 	blt	r2,zero,8110ec0c <___vfiprintf_internal_r+0x10a0>
8110e35c:	df001d83 	ldbu	fp,118(sp)
8110e360:	48007216 	blt	r9,zero,8110e52c <___vfiprintf_internal_r+0x9c0>
8110e364:	00ffdfc4 	movi	r3,-129
8110e368:	94c4b03a 	or	r2,r18,r19
8110e36c:	a0e8703a 	and	r20,r20,r3
8110e370:	1000cc26 	beq	r2,zero,8110e6a4 <___vfiprintf_internal_r+0xb38>
8110e374:	98021026 	beq	r19,zero,8110ebb8 <___vfiprintf_internal_r+0x104c>
8110e378:	dc402415 	stw	r17,144(sp)
8110e37c:	dc002515 	stw	r16,148(sp)
8110e380:	9823883a 	mov	r17,r19
8110e384:	9021883a 	mov	r16,r18
8110e388:	dd401a04 	addi	r21,sp,104
8110e38c:	4825883a 	mov	r18,r9
8110e390:	4027883a 	mov	r19,r8
8110e394:	8009883a 	mov	r4,r16
8110e398:	880b883a 	mov	r5,r17
8110e39c:	01800284 	movi	r6,10
8110e3a0:	000f883a 	mov	r7,zero
8110e3a4:	110ff4c0 	call	8110ff4c <__umoddi3>
8110e3a8:	10800c04 	addi	r2,r2,48
8110e3ac:	ad7fffc4 	addi	r21,r21,-1
8110e3b0:	8009883a 	mov	r4,r16
8110e3b4:	880b883a 	mov	r5,r17
8110e3b8:	a8800005 	stb	r2,0(r21)
8110e3bc:	01800284 	movi	r6,10
8110e3c0:	000f883a 	mov	r7,zero
8110e3c4:	110f9d40 	call	8110f9d4 <__udivdi3>
8110e3c8:	1021883a 	mov	r16,r2
8110e3cc:	10c4b03a 	or	r2,r2,r3
8110e3d0:	1823883a 	mov	r17,r3
8110e3d4:	103fef1e 	bne	r2,zero,8110e394 <__reset+0xfb0ee394>
8110e3d8:	dc402417 	ldw	r17,144(sp)
8110e3dc:	dc002517 	ldw	r16,148(sp)
8110e3e0:	9013883a 	mov	r9,r18
8110e3e4:	9811883a 	mov	r8,r19
8110e3e8:	da801e17 	ldw	r10,120(sp)
8110e3ec:	5567c83a 	sub	r19,r10,r21
8110e3f0:	003ede06 	br	8110df6c <__reset+0xfb0edf6c>
8110e3f4:	38803fcc 	andi	r2,r7,255
8110e3f8:	1080201c 	xori	r2,r2,128
8110e3fc:	10bfe004 	addi	r2,r2,-128
8110e400:	1002371e 	bne	r2,zero,8110ece0 <___vfiprintf_internal_r+0x1174>
8110e404:	01000044 	movi	r4,1
8110e408:	01c00804 	movi	r7,32
8110e40c:	80c00007 	ldb	r3,0(r16)
8110e410:	003e3506 	br	8110dce8 <__reset+0xfb0edce8>
8110e414:	a5000054 	ori	r20,r20,1
8110e418:	80c00007 	ldb	r3,0(r16)
8110e41c:	003e3206 	br	8110dce8 <__reset+0xfb0edce8>
8110e420:	a5002014 	ori	r20,r20,128
8110e424:	80c00007 	ldb	r3,0(r16)
8110e428:	003e2f06 	br	8110dce8 <__reset+0xfb0edce8>
8110e42c:	8015883a 	mov	r10,r16
8110e430:	0023883a 	mov	r17,zero
8110e434:	18bff404 	addi	r2,r3,-48
8110e438:	50c00007 	ldb	r3,0(r10)
8110e43c:	8c4002a4 	muli	r17,r17,10
8110e440:	84000044 	addi	r16,r16,1
8110e444:	8015883a 	mov	r10,r16
8110e448:	1463883a 	add	r17,r2,r17
8110e44c:	18bff404 	addi	r2,r3,-48
8110e450:	30bff92e 	bgeu	r6,r2,8110e438 <__reset+0xfb0ee438>
8110e454:	003e2506 	br	8110dcec <__reset+0xfb0edcec>
8110e458:	21003fcc 	andi	r4,r4,255
8110e45c:	2002d41e 	bne	r4,zero,8110efb0 <___vfiprintf_internal_r+0x1444>
8110e460:	a5000414 	ori	r20,r20,16
8110e464:	a080080c 	andi	r2,r20,32
8110e468:	103fb51e 	bne	r2,zero,8110e340 <__reset+0xfb0ee340>
8110e46c:	a080040c 	andi	r2,r20,16
8110e470:	1001f826 	beq	r2,zero,8110ec54 <___vfiprintf_internal_r+0x10e8>
8110e474:	da802217 	ldw	r10,136(sp)
8110e478:	54800017 	ldw	r18,0(r10)
8110e47c:	52800104 	addi	r10,r10,4
8110e480:	da802215 	stw	r10,136(sp)
8110e484:	9027d7fa 	srai	r19,r18,31
8110e488:	9805883a 	mov	r2,r19
8110e48c:	003fb206 	br	8110e358 <__reset+0xfb0ee358>
8110e490:	21003fcc 	andi	r4,r4,255
8110e494:	2002c41e 	bne	r4,zero,8110efa8 <___vfiprintf_internal_r+0x143c>
8110e498:	a5000414 	ori	r20,r20,16
8110e49c:	a080080c 	andi	r2,r20,32
8110e4a0:	103f5f1e 	bne	r2,zero,8110e220 <__reset+0xfb0ee220>
8110e4a4:	a080040c 	andi	r2,r20,16
8110e4a8:	10020f26 	beq	r2,zero,8110ece8 <___vfiprintf_internal_r+0x117c>
8110e4ac:	da802217 	ldw	r10,136(sp)
8110e4b0:	d8001d85 	stb	zero,118(sp)
8110e4b4:	0027883a 	mov	r19,zero
8110e4b8:	50800104 	addi	r2,r10,4
8110e4bc:	54800017 	ldw	r18,0(r10)
8110e4c0:	48021116 	blt	r9,zero,8110ed08 <___vfiprintf_internal_r+0x119c>
8110e4c4:	00ffdfc4 	movi	r3,-129
8110e4c8:	d8802215 	stw	r2,136(sp)
8110e4cc:	a0e8703a 	and	r20,r20,r3
8110e4d0:	903f5e1e 	bne	r18,zero,8110e24c <__reset+0xfb0ee24c>
8110e4d4:	0039883a 	mov	fp,zero
8110e4d8:	4802a626 	beq	r9,zero,8110ef74 <___vfiprintf_internal_r+0x1408>
8110e4dc:	0025883a 	mov	r18,zero
8110e4e0:	0027883a 	mov	r19,zero
8110e4e4:	003f5a06 	br	8110e250 <__reset+0xfb0ee250>
8110e4e8:	21003fcc 	andi	r4,r4,255
8110e4ec:	20029f1e 	bne	r4,zero,8110ef6c <___vfiprintf_internal_r+0x1400>
8110e4f0:	a5000414 	ori	r20,r20,16
8110e4f4:	a080080c 	andi	r2,r20,32
8110e4f8:	10005e1e 	bne	r2,zero,8110e674 <___vfiprintf_internal_r+0xb08>
8110e4fc:	a080040c 	andi	r2,r20,16
8110e500:	1001a21e 	bne	r2,zero,8110eb8c <___vfiprintf_internal_r+0x1020>
8110e504:	a080100c 	andi	r2,r20,64
8110e508:	d8001d85 	stb	zero,118(sp)
8110e50c:	da802217 	ldw	r10,136(sp)
8110e510:	1002231e 	bne	r2,zero,8110eda0 <___vfiprintf_internal_r+0x1234>
8110e514:	50800104 	addi	r2,r10,4
8110e518:	54800017 	ldw	r18,0(r10)
8110e51c:	0027883a 	mov	r19,zero
8110e520:	4801a00e 	bge	r9,zero,8110eba4 <___vfiprintf_internal_r+0x1038>
8110e524:	d8802215 	stw	r2,136(sp)
8110e528:	0039883a 	mov	fp,zero
8110e52c:	94c4b03a 	or	r2,r18,r19
8110e530:	103f901e 	bne	r2,zero,8110e374 <__reset+0xfb0ee374>
8110e534:	00800044 	movi	r2,1
8110e538:	10803fcc 	andi	r2,r2,255
8110e53c:	00c00044 	movi	r3,1
8110e540:	10c05926 	beq	r2,r3,8110e6a8 <___vfiprintf_internal_r+0xb3c>
8110e544:	00c00084 	movi	r3,2
8110e548:	10ffe41e 	bne	r2,r3,8110e4dc <__reset+0xfb0ee4dc>
8110e54c:	0025883a 	mov	r18,zero
8110e550:	0027883a 	mov	r19,zero
8110e554:	00013d06 	br	8110ea4c <___vfiprintf_internal_r+0xee0>
8110e558:	21003fcc 	andi	r4,r4,255
8110e55c:	2002811e 	bne	r4,zero,8110ef64 <___vfiprintf_internal_r+0x13f8>
8110e560:	00a044b4 	movhi	r2,33042
8110e564:	10a5f904 	addi	r2,r2,-26652
8110e568:	d8802615 	stw	r2,152(sp)
8110e56c:	a080080c 	andi	r2,r20,32
8110e570:	103f561e 	bne	r2,zero,8110e2cc <__reset+0xfb0ee2cc>
8110e574:	a080040c 	andi	r2,r20,16
8110e578:	1001d126 	beq	r2,zero,8110ecc0 <___vfiprintf_internal_r+0x1154>
8110e57c:	da802217 	ldw	r10,136(sp)
8110e580:	0027883a 	mov	r19,zero
8110e584:	54800017 	ldw	r18,0(r10)
8110e588:	52800104 	addi	r10,r10,4
8110e58c:	da802215 	stw	r10,136(sp)
8110e590:	003f5306 	br	8110e2e0 <__reset+0xfb0ee2e0>
8110e594:	da802217 	ldw	r10,136(sp)
8110e598:	d8001d85 	stb	zero,118(sp)
8110e59c:	55400017 	ldw	r21,0(r10)
8110e5a0:	50c00104 	addi	r3,r10,4
8110e5a4:	a8024226 	beq	r21,zero,8110eeb0 <___vfiprintf_internal_r+0x1344>
8110e5a8:	48021816 	blt	r9,zero,8110ee0c <___vfiprintf_internal_r+0x12a0>
8110e5ac:	480d883a 	mov	r6,r9
8110e5b0:	000b883a 	mov	r5,zero
8110e5b4:	a809883a 	mov	r4,r21
8110e5b8:	d8c02a15 	stw	r3,168(sp)
8110e5bc:	da002b15 	stw	r8,172(sp)
8110e5c0:	da402c15 	stw	r9,176(sp)
8110e5c4:	110a93c0 	call	8110a93c <memchr>
8110e5c8:	d8c02a17 	ldw	r3,168(sp)
8110e5cc:	da002b17 	ldw	r8,172(sp)
8110e5d0:	da402c17 	ldw	r9,176(sp)
8110e5d4:	10024826 	beq	r2,zero,8110eef8 <___vfiprintf_internal_r+0x138c>
8110e5d8:	1567c83a 	sub	r19,r2,r21
8110e5dc:	df001d83 	ldbu	fp,118(sp)
8110e5e0:	d8c02215 	stw	r3,136(sp)
8110e5e4:	0013883a 	mov	r9,zero
8110e5e8:	003e6006 	br	8110df6c <__reset+0xfb0edf6c>
8110e5ec:	21003fcc 	andi	r4,r4,255
8110e5f0:	203fc026 	beq	r4,zero,8110e4f4 <__reset+0xfb0ee4f4>
8110e5f4:	d9c01d85 	stb	r7,118(sp)
8110e5f8:	003fbe06 	br	8110e4f4 <__reset+0xfb0ee4f4>
8110e5fc:	da802217 	ldw	r10,136(sp)
8110e600:	54400017 	ldw	r17,0(r10)
8110e604:	50800104 	addi	r2,r10,4
8110e608:	883e3b16 	blt	r17,zero,8110def8 <__reset+0xfb0edef8>
8110e60c:	d8802215 	stw	r2,136(sp)
8110e610:	80c00007 	ldb	r3,0(r16)
8110e614:	003db406 	br	8110dce8 <__reset+0xfb0edce8>
8110e618:	01000044 	movi	r4,1
8110e61c:	01c00ac4 	movi	r7,43
8110e620:	80c00007 	ldb	r3,0(r16)
8110e624:	003db006 	br	8110dce8 <__reset+0xfb0edce8>
8110e628:	80c00007 	ldb	r3,0(r16)
8110e62c:	82800044 	addi	r10,r16,1
8110e630:	1b423c26 	beq	r3,r13,8110ef24 <___vfiprintf_internal_r+0x13b8>
8110e634:	18bff404 	addi	r2,r3,-48
8110e638:	0013883a 	mov	r9,zero
8110e63c:	30822b36 	bltu	r6,r2,8110eeec <___vfiprintf_internal_r+0x1380>
8110e640:	50c00007 	ldb	r3,0(r10)
8110e644:	4a4002a4 	muli	r9,r9,10
8110e648:	54000044 	addi	r16,r10,1
8110e64c:	8015883a 	mov	r10,r16
8110e650:	4893883a 	add	r9,r9,r2
8110e654:	18bff404 	addi	r2,r3,-48
8110e658:	30bff92e 	bgeu	r6,r2,8110e640 <__reset+0xfb0ee640>
8110e65c:	483da30e 	bge	r9,zero,8110dcec <__reset+0xfb0edcec>
8110e660:	027fffc4 	movi	r9,-1
8110e664:	003da106 	br	8110dcec <__reset+0xfb0edcec>
8110e668:	a5001014 	ori	r20,r20,64
8110e66c:	80c00007 	ldb	r3,0(r16)
8110e670:	003d9d06 	br	8110dce8 <__reset+0xfb0edce8>
8110e674:	da802217 	ldw	r10,136(sp)
8110e678:	d8001d85 	stb	zero,118(sp)
8110e67c:	50c00204 	addi	r3,r10,8
8110e680:	54800017 	ldw	r18,0(r10)
8110e684:	54c00117 	ldw	r19,4(r10)
8110e688:	4801ca16 	blt	r9,zero,8110edb4 <___vfiprintf_internal_r+0x1248>
8110e68c:	013fdfc4 	movi	r4,-129
8110e690:	94c4b03a 	or	r2,r18,r19
8110e694:	d8c02215 	stw	r3,136(sp)
8110e698:	a128703a 	and	r20,r20,r4
8110e69c:	0039883a 	mov	fp,zero
8110e6a0:	103f341e 	bne	r2,zero,8110e374 <__reset+0xfb0ee374>
8110e6a4:	483e2e26 	beq	r9,zero,8110df60 <__reset+0xfb0edf60>
8110e6a8:	0025883a 	mov	r18,zero
8110e6ac:	94800c04 	addi	r18,r18,48
8110e6b0:	dc8019c5 	stb	r18,103(sp)
8110e6b4:	dcc02717 	ldw	r19,156(sp)
8110e6b8:	dd4019c4 	addi	r21,sp,103
8110e6bc:	003e2b06 	br	8110df6c <__reset+0xfb0edf6c>
8110e6c0:	21003fcc 	andi	r4,r4,255
8110e6c4:	2002361e 	bne	r4,zero,8110efa0 <___vfiprintf_internal_r+0x1434>
8110e6c8:	1801c126 	beq	r3,zero,8110edd0 <___vfiprintf_internal_r+0x1264>
8110e6cc:	04800044 	movi	r18,1
8110e6d0:	d8c01005 	stb	r3,64(sp)
8110e6d4:	d8001d85 	stb	zero,118(sp)
8110e6d8:	9027883a 	mov	r19,r18
8110e6dc:	dd401004 	addi	r21,sp,64
8110e6e0:	003f1106 	br	8110e328 <__reset+0xfb0ee328>
8110e6e4:	d9402117 	ldw	r5,132(sp)
8110e6e8:	d9002017 	ldw	r4,128(sp)
8110e6ec:	d9801a04 	addi	r6,sp,104
8110e6f0:	d9c02b15 	stw	r7,172(sp)
8110e6f4:	dbc02a15 	stw	r15,168(sp)
8110e6f8:	110da580 	call	8110da58 <__sprint_r.part.0>
8110e6fc:	d9c02b17 	ldw	r7,172(sp)
8110e700:	dbc02a17 	ldw	r15,168(sp)
8110e704:	10006d1e 	bne	r2,zero,8110e8bc <___vfiprintf_internal_r+0xd50>
8110e708:	d9801b17 	ldw	r6,108(sp)
8110e70c:	d8801c17 	ldw	r2,112(sp)
8110e710:	d811883a 	mov	r8,sp
8110e714:	31400044 	addi	r5,r6,1
8110e718:	003e3306 	br	8110dfe8 <__reset+0xfb0edfe8>
8110e71c:	d9401b17 	ldw	r5,108(sp)
8110e720:	d8801c17 	ldw	r2,112(sp)
8110e724:	29000044 	addi	r4,r5,1
8110e728:	d8c01d87 	ldb	r3,118(sp)
8110e72c:	183e4d26 	beq	r3,zero,8110e064 <__reset+0xfb0ee064>
8110e730:	00c00044 	movi	r3,1
8110e734:	d9401d84 	addi	r5,sp,118
8110e738:	10c5883a 	add	r2,r2,r3
8110e73c:	41400015 	stw	r5,0(r8)
8110e740:	40c00115 	stw	r3,4(r8)
8110e744:	d8801c15 	stw	r2,112(sp)
8110e748:	d9001b15 	stw	r4,108(sp)
8110e74c:	014001c4 	movi	r5,7
8110e750:	2900a90e 	bge	r5,r4,8110e9f8 <___vfiprintf_internal_r+0xe8c>
8110e754:	1000da1e 	bne	r2,zero,8110eac0 <___vfiprintf_internal_r+0xf54>
8110e758:	7000ab1e 	bne	r14,zero,8110ea08 <___vfiprintf_internal_r+0xe9c>
8110e75c:	000b883a 	mov	r5,zero
8110e760:	1809883a 	mov	r4,r3
8110e764:	d811883a 	mov	r8,sp
8110e768:	00c02004 	movi	r3,128
8110e76c:	e0fe4d26 	beq	fp,r3,8110e0a4 <__reset+0xfb0ee0a4>
8110e770:	4cf9c83a 	sub	fp,r9,r19
8110e774:	073e7b0e 	bge	zero,fp,8110e164 <__reset+0xfb0ee164>
8110e778:	01c00404 	movi	r7,16
8110e77c:	3f01900e 	bge	r7,fp,8110edc0 <___vfiprintf_internal_r+0x1254>
8110e780:	00e044b4 	movhi	r3,33042
8110e784:	18e66f04 	addi	r3,r3,-26180
8110e788:	d8c02415 	stw	r3,144(sp)
8110e78c:	034001c4 	movi	r13,7
8110e790:	00000506 	br	8110e7a8 <___vfiprintf_internal_r+0xc3c>
8110e794:	29000084 	addi	r4,r5,2
8110e798:	42000204 	addi	r8,r8,8
8110e79c:	180b883a 	mov	r5,r3
8110e7a0:	e73ffc04 	addi	fp,fp,-16
8110e7a4:	3f000d0e 	bge	r7,fp,8110e7dc <___vfiprintf_internal_r+0xc70>
8110e7a8:	10800404 	addi	r2,r2,16
8110e7ac:	28c00044 	addi	r3,r5,1
8110e7b0:	45c00015 	stw	r23,0(r8)
8110e7b4:	41c00115 	stw	r7,4(r8)
8110e7b8:	d8801c15 	stw	r2,112(sp)
8110e7bc:	d8c01b15 	stw	r3,108(sp)
8110e7c0:	68fff40e 	bge	r13,r3,8110e794 <__reset+0xfb0ee794>
8110e7c4:	1000101e 	bne	r2,zero,8110e808 <___vfiprintf_internal_r+0xc9c>
8110e7c8:	e73ffc04 	addi	fp,fp,-16
8110e7cc:	01000044 	movi	r4,1
8110e7d0:	000b883a 	mov	r5,zero
8110e7d4:	d811883a 	mov	r8,sp
8110e7d8:	3f3ff316 	blt	r7,fp,8110e7a8 <__reset+0xfb0ee7a8>
8110e7dc:	da802417 	ldw	r10,144(sp)
8110e7e0:	1705883a 	add	r2,r2,fp
8110e7e4:	47000115 	stw	fp,4(r8)
8110e7e8:	42800015 	stw	r10,0(r8)
8110e7ec:	d8801c15 	stw	r2,112(sp)
8110e7f0:	d9001b15 	stw	r4,108(sp)
8110e7f4:	00c001c4 	movi	r3,7
8110e7f8:	19003616 	blt	r3,r4,8110e8d4 <___vfiprintf_internal_r+0xd68>
8110e7fc:	42000204 	addi	r8,r8,8
8110e800:	21000044 	addi	r4,r4,1
8110e804:	003e5706 	br	8110e164 <__reset+0xfb0ee164>
8110e808:	d9402117 	ldw	r5,132(sp)
8110e80c:	d9002017 	ldw	r4,128(sp)
8110e810:	d9801a04 	addi	r6,sp,104
8110e814:	d9c02b15 	stw	r7,172(sp)
8110e818:	db402a15 	stw	r13,168(sp)
8110e81c:	110da580 	call	8110da58 <__sprint_r.part.0>
8110e820:	d9c02b17 	ldw	r7,172(sp)
8110e824:	db402a17 	ldw	r13,168(sp)
8110e828:	1000241e 	bne	r2,zero,8110e8bc <___vfiprintf_internal_r+0xd50>
8110e82c:	d9401b17 	ldw	r5,108(sp)
8110e830:	d8801c17 	ldw	r2,112(sp)
8110e834:	d811883a 	mov	r8,sp
8110e838:	29000044 	addi	r4,r5,1
8110e83c:	003fd806 	br	8110e7a0 <__reset+0xfb0ee7a0>
8110e840:	d9401b17 	ldw	r5,108(sp)
8110e844:	00e044b4 	movhi	r3,33042
8110e848:	18e67304 	addi	r3,r3,-26164
8110e84c:	d8c02415 	stw	r3,144(sp)
8110e850:	29400044 	addi	r5,r5,1
8110e854:	d8c02417 	ldw	r3,144(sp)
8110e858:	14c5883a 	add	r2,r2,r19
8110e85c:	44c00115 	stw	r19,4(r8)
8110e860:	40c00015 	stw	r3,0(r8)
8110e864:	d8801c15 	stw	r2,112(sp)
8110e868:	d9401b15 	stw	r5,108(sp)
8110e86c:	00c001c4 	movi	r3,7
8110e870:	1940070e 	bge	r3,r5,8110e890 <___vfiprintf_internal_r+0xd24>
8110e874:	103e4826 	beq	r2,zero,8110e198 <__reset+0xfb0ee198>
8110e878:	d9402117 	ldw	r5,132(sp)
8110e87c:	d9002017 	ldw	r4,128(sp)
8110e880:	d9801a04 	addi	r6,sp,104
8110e884:	110da580 	call	8110da58 <__sprint_r.part.0>
8110e888:	10000c1e 	bne	r2,zero,8110e8bc <___vfiprintf_internal_r+0xd50>
8110e88c:	d8801c17 	ldw	r2,112(sp)
8110e890:	8c80010e 	bge	r17,r18,8110e898 <___vfiprintf_internal_r+0xd2c>
8110e894:	9023883a 	mov	r17,r18
8110e898:	da802317 	ldw	r10,140(sp)
8110e89c:	5455883a 	add	r10,r10,r17
8110e8a0:	da802315 	stw	r10,140(sp)
8110e8a4:	103e4126 	beq	r2,zero,8110e1ac <__reset+0xfb0ee1ac>
8110e8a8:	d9402117 	ldw	r5,132(sp)
8110e8ac:	d9002017 	ldw	r4,128(sp)
8110e8b0:	d9801a04 	addi	r6,sp,104
8110e8b4:	110da580 	call	8110da58 <__sprint_r.part.0>
8110e8b8:	103e3c26 	beq	r2,zero,8110e1ac <__reset+0xfb0ee1ac>
8110e8bc:	dd002117 	ldw	r20,132(sp)
8110e8c0:	a080030b 	ldhu	r2,12(r20)
8110e8c4:	1080100c 	andi	r2,r2,64
8110e8c8:	1001231e 	bne	r2,zero,8110ed58 <___vfiprintf_internal_r+0x11ec>
8110e8cc:	d8802317 	ldw	r2,140(sp)
8110e8d0:	003d7b06 	br	8110dec0 <__reset+0xfb0edec0>
8110e8d4:	1000991e 	bne	r2,zero,8110eb3c <___vfiprintf_internal_r+0xfd0>
8110e8d8:	00c00044 	movi	r3,1
8110e8dc:	9805883a 	mov	r2,r19
8110e8e0:	dd400015 	stw	r21,0(sp)
8110e8e4:	dcc00115 	stw	r19,4(sp)
8110e8e8:	dcc01c15 	stw	r19,112(sp)
8110e8ec:	d8c01b15 	stw	r3,108(sp)
8110e8f0:	d811883a 	mov	r8,sp
8110e8f4:	42000204 	addi	r8,r8,8
8110e8f8:	a2c0010c 	andi	r11,r20,4
8110e8fc:	583fe426 	beq	r11,zero,8110e890 <__reset+0xfb0ee890>
8110e900:	8ca7c83a 	sub	r19,r17,r18
8110e904:	04ffe20e 	bge	zero,r19,8110e890 <__reset+0xfb0ee890>
8110e908:	01c00404 	movi	r7,16
8110e90c:	3cffcc0e 	bge	r7,r19,8110e840 <__reset+0xfb0ee840>
8110e910:	02a044b4 	movhi	r10,33042
8110e914:	52a67304 	addi	r10,r10,-26164
8110e918:	d9001b17 	ldw	r4,108(sp)
8110e91c:	da802415 	stw	r10,144(sp)
8110e920:	382b883a 	mov	r21,r7
8110e924:	050001c4 	movi	r20,7
8110e928:	df002017 	ldw	fp,128(sp)
8110e92c:	00000506 	br	8110e944 <___vfiprintf_internal_r+0xdd8>
8110e930:	21400084 	addi	r5,r4,2
8110e934:	42000204 	addi	r8,r8,8
8110e938:	1809883a 	mov	r4,r3
8110e93c:	9cfffc04 	addi	r19,r19,-16
8110e940:	acffc40e 	bge	r21,r19,8110e854 <__reset+0xfb0ee854>
8110e944:	10800404 	addi	r2,r2,16
8110e948:	20c00044 	addi	r3,r4,1
8110e94c:	45800015 	stw	r22,0(r8)
8110e950:	45400115 	stw	r21,4(r8)
8110e954:	d8801c15 	stw	r2,112(sp)
8110e958:	d8c01b15 	stw	r3,108(sp)
8110e95c:	a0fff40e 	bge	r20,r3,8110e930 <__reset+0xfb0ee930>
8110e960:	1000041e 	bne	r2,zero,8110e974 <___vfiprintf_internal_r+0xe08>
8110e964:	01400044 	movi	r5,1
8110e968:	0009883a 	mov	r4,zero
8110e96c:	d811883a 	mov	r8,sp
8110e970:	003ff206 	br	8110e93c <__reset+0xfb0ee93c>
8110e974:	d9402117 	ldw	r5,132(sp)
8110e978:	d9801a04 	addi	r6,sp,104
8110e97c:	e009883a 	mov	r4,fp
8110e980:	110da580 	call	8110da58 <__sprint_r.part.0>
8110e984:	103fcd1e 	bne	r2,zero,8110e8bc <__reset+0xfb0ee8bc>
8110e988:	d9001b17 	ldw	r4,108(sp)
8110e98c:	d8801c17 	ldw	r2,112(sp)
8110e990:	d811883a 	mov	r8,sp
8110e994:	21400044 	addi	r5,r4,1
8110e998:	003fe806 	br	8110e93c <__reset+0xfb0ee93c>
8110e99c:	d9402117 	ldw	r5,132(sp)
8110e9a0:	d9002017 	ldw	r4,128(sp)
8110e9a4:	d9801a04 	addi	r6,sp,104
8110e9a8:	d9c02b15 	stw	r7,172(sp)
8110e9ac:	db402a15 	stw	r13,168(sp)
8110e9b0:	110da580 	call	8110da58 <__sprint_r.part.0>
8110e9b4:	d9c02b17 	ldw	r7,172(sp)
8110e9b8:	db402a17 	ldw	r13,168(sp)
8110e9bc:	103fbf1e 	bne	r2,zero,8110e8bc <__reset+0xfb0ee8bc>
8110e9c0:	d9401b17 	ldw	r5,108(sp)
8110e9c4:	d8801c17 	ldw	r2,112(sp)
8110e9c8:	d811883a 	mov	r8,sp
8110e9cc:	29800044 	addi	r6,r5,1
8110e9d0:	003dc406 	br	8110e0e4 <__reset+0xfb0ee0e4>
8110e9d4:	1000d21e 	bne	r2,zero,8110ed20 <___vfiprintf_internal_r+0x11b4>
8110e9d8:	d8c01d87 	ldb	r3,118(sp)
8110e9dc:	18009526 	beq	r3,zero,8110ec34 <___vfiprintf_internal_r+0x10c8>
8110e9e0:	00800044 	movi	r2,1
8110e9e4:	d8c01d84 	addi	r3,sp,118
8110e9e8:	1009883a 	mov	r4,r2
8110e9ec:	d8c00015 	stw	r3,0(sp)
8110e9f0:	d8800115 	stw	r2,4(sp)
8110e9f4:	d811883a 	mov	r8,sp
8110e9f8:	200b883a 	mov	r5,r4
8110e9fc:	42000204 	addi	r8,r8,8
8110ea00:	21000044 	addi	r4,r4,1
8110ea04:	003d9706 	br	8110e064 <__reset+0xfb0ee064>
8110ea08:	d9001d04 	addi	r4,sp,116
8110ea0c:	00800084 	movi	r2,2
8110ea10:	d9000015 	stw	r4,0(sp)
8110ea14:	d8800115 	stw	r2,4(sp)
8110ea18:	1809883a 	mov	r4,r3
8110ea1c:	d811883a 	mov	r8,sp
8110ea20:	200b883a 	mov	r5,r4
8110ea24:	42000204 	addi	r8,r8,8
8110ea28:	21000044 	addi	r4,r4,1
8110ea2c:	003f4e06 	br	8110e768 <__reset+0xfb0ee768>
8110ea30:	d8001d85 	stb	zero,118(sp)
8110ea34:	48005016 	blt	r9,zero,8110eb78 <___vfiprintf_internal_r+0x100c>
8110ea38:	00ffdfc4 	movi	r3,-129
8110ea3c:	94c4b03a 	or	r2,r18,r19
8110ea40:	a0e8703a 	and	r20,r20,r3
8110ea44:	103d4426 	beq	r2,zero,8110df58 <__reset+0xfb0edf58>
8110ea48:	0039883a 	mov	fp,zero
8110ea4c:	d9002617 	ldw	r4,152(sp)
8110ea50:	dd401a04 	addi	r21,sp,104
8110ea54:	908003cc 	andi	r2,r18,15
8110ea58:	9806973a 	slli	r3,r19,28
8110ea5c:	2085883a 	add	r2,r4,r2
8110ea60:	9024d13a 	srli	r18,r18,4
8110ea64:	10800003 	ldbu	r2,0(r2)
8110ea68:	9826d13a 	srli	r19,r19,4
8110ea6c:	ad7fffc4 	addi	r21,r21,-1
8110ea70:	1ca4b03a 	or	r18,r3,r18
8110ea74:	a8800005 	stb	r2,0(r21)
8110ea78:	94c4b03a 	or	r2,r18,r19
8110ea7c:	103ff51e 	bne	r2,zero,8110ea54 <__reset+0xfb0eea54>
8110ea80:	003e5906 	br	8110e3e8 <__reset+0xfb0ee3e8>
8110ea84:	d9402117 	ldw	r5,132(sp)
8110ea88:	d9002017 	ldw	r4,128(sp)
8110ea8c:	d9801a04 	addi	r6,sp,104
8110ea90:	110da580 	call	8110da58 <__sprint_r.part.0>
8110ea94:	103f891e 	bne	r2,zero,8110e8bc <__reset+0xfb0ee8bc>
8110ea98:	d8801c17 	ldw	r2,112(sp)
8110ea9c:	d811883a 	mov	r8,sp
8110eaa0:	003f9506 	br	8110e8f8 <__reset+0xfb0ee8f8>
8110eaa4:	d9402117 	ldw	r5,132(sp)
8110eaa8:	d9002017 	ldw	r4,128(sp)
8110eaac:	d9801a04 	addi	r6,sp,104
8110eab0:	110da580 	call	8110da58 <__sprint_r.part.0>
8110eab4:	103f811e 	bne	r2,zero,8110e8bc <__reset+0xfb0ee8bc>
8110eab8:	d811883a 	mov	r8,sp
8110eabc:	003ced06 	br	8110de74 <__reset+0xfb0ede74>
8110eac0:	d9402117 	ldw	r5,132(sp)
8110eac4:	d9002017 	ldw	r4,128(sp)
8110eac8:	d9801a04 	addi	r6,sp,104
8110eacc:	da402c15 	stw	r9,176(sp)
8110ead0:	db802a15 	stw	r14,168(sp)
8110ead4:	110da580 	call	8110da58 <__sprint_r.part.0>
8110ead8:	da402c17 	ldw	r9,176(sp)
8110eadc:	db802a17 	ldw	r14,168(sp)
8110eae0:	103f761e 	bne	r2,zero,8110e8bc <__reset+0xfb0ee8bc>
8110eae4:	d9401b17 	ldw	r5,108(sp)
8110eae8:	d8801c17 	ldw	r2,112(sp)
8110eaec:	d811883a 	mov	r8,sp
8110eaf0:	29000044 	addi	r4,r5,1
8110eaf4:	003d5b06 	br	8110e064 <__reset+0xfb0ee064>
8110eaf8:	d9402117 	ldw	r5,132(sp)
8110eafc:	d9002017 	ldw	r4,128(sp)
8110eb00:	d9801a04 	addi	r6,sp,104
8110eb04:	da402c15 	stw	r9,176(sp)
8110eb08:	110da580 	call	8110da58 <__sprint_r.part.0>
8110eb0c:	da402c17 	ldw	r9,176(sp)
8110eb10:	103f6a1e 	bne	r2,zero,8110e8bc <__reset+0xfb0ee8bc>
8110eb14:	d9401b17 	ldw	r5,108(sp)
8110eb18:	d8801c17 	ldw	r2,112(sp)
8110eb1c:	d811883a 	mov	r8,sp
8110eb20:	29000044 	addi	r4,r5,1
8110eb24:	003f1006 	br	8110e768 <__reset+0xfb0ee768>
8110eb28:	1000c31e 	bne	r2,zero,8110ee38 <___vfiprintf_internal_r+0x12cc>
8110eb2c:	01000044 	movi	r4,1
8110eb30:	000b883a 	mov	r5,zero
8110eb34:	d811883a 	mov	r8,sp
8110eb38:	003f0d06 	br	8110e770 <__reset+0xfb0ee770>
8110eb3c:	d9402117 	ldw	r5,132(sp)
8110eb40:	d9002017 	ldw	r4,128(sp)
8110eb44:	d9801a04 	addi	r6,sp,104
8110eb48:	110da580 	call	8110da58 <__sprint_r.part.0>
8110eb4c:	103f5b1e 	bne	r2,zero,8110e8bc <__reset+0xfb0ee8bc>
8110eb50:	d9001b17 	ldw	r4,108(sp)
8110eb54:	d8801c17 	ldw	r2,112(sp)
8110eb58:	d811883a 	mov	r8,sp
8110eb5c:	21000044 	addi	r4,r4,1
8110eb60:	003d8006 	br	8110e164 <__reset+0xfb0ee164>
8110eb64:	012044b4 	movhi	r4,33042
8110eb68:	2125fe04 	addi	r4,r4,-26632
8110eb6c:	d9002615 	stw	r4,152(sp)
8110eb70:	d8c02215 	stw	r3,136(sp)
8110eb74:	1029883a 	mov	r20,r2
8110eb78:	94c4b03a 	or	r2,r18,r19
8110eb7c:	103fb21e 	bne	r2,zero,8110ea48 <__reset+0xfb0eea48>
8110eb80:	0039883a 	mov	fp,zero
8110eb84:	00800084 	movi	r2,2
8110eb88:	003e6b06 	br	8110e538 <__reset+0xfb0ee538>
8110eb8c:	da802217 	ldw	r10,136(sp)
8110eb90:	d8001d85 	stb	zero,118(sp)
8110eb94:	0027883a 	mov	r19,zero
8110eb98:	50800104 	addi	r2,r10,4
8110eb9c:	54800017 	ldw	r18,0(r10)
8110eba0:	483e6016 	blt	r9,zero,8110e524 <__reset+0xfb0ee524>
8110eba4:	00ffdfc4 	movi	r3,-129
8110eba8:	d8802215 	stw	r2,136(sp)
8110ebac:	a0e8703a 	and	r20,r20,r3
8110ebb0:	0039883a 	mov	fp,zero
8110ebb4:	903ebb26 	beq	r18,zero,8110e6a4 <__reset+0xfb0ee6a4>
8110ebb8:	00800244 	movi	r2,9
8110ebbc:	14bdee36 	bltu	r2,r18,8110e378 <__reset+0xfb0ee378>
8110ebc0:	003eba06 	br	8110e6ac <__reset+0xfb0ee6ac>
8110ebc4:	00800c04 	movi	r2,48
8110ebc8:	d8c01d45 	stb	r3,117(sp)
8110ebcc:	d8801d05 	stb	r2,116(sp)
8110ebd0:	d8001d85 	stb	zero,118(sp)
8110ebd4:	a0c00094 	ori	r3,r20,2
8110ebd8:	4800a916 	blt	r9,zero,8110ee80 <___vfiprintf_internal_r+0x1314>
8110ebdc:	00bfdfc4 	movi	r2,-129
8110ebe0:	a096703a 	and	r11,r20,r2
8110ebe4:	5d000094 	ori	r20,r11,2
8110ebe8:	0039883a 	mov	fp,zero
8110ebec:	003f9706 	br	8110ea4c <__reset+0xfb0eea4c>
8110ebf0:	8025883a 	mov	r18,r16
8110ebf4:	003c2e06 	br	8110dcb0 <__reset+0xfb0edcb0>
8110ebf8:	00a044b4 	movhi	r2,33042
8110ebfc:	10a5fe04 	addi	r2,r2,-26632
8110ec00:	0039883a 	mov	fp,zero
8110ec04:	d8802615 	stw	r2,152(sp)
8110ec08:	003f9006 	br	8110ea4c <__reset+0xfb0eea4c>
8110ec0c:	04a5c83a 	sub	r18,zero,r18
8110ec10:	07000b44 	movi	fp,45
8110ec14:	9004c03a 	cmpne	r2,r18,zero
8110ec18:	04e7c83a 	sub	r19,zero,r19
8110ec1c:	df001d85 	stb	fp,118(sp)
8110ec20:	98a7c83a 	sub	r19,r19,r2
8110ec24:	48009f16 	blt	r9,zero,8110eea4 <___vfiprintf_internal_r+0x1338>
8110ec28:	00bfdfc4 	movi	r2,-129
8110ec2c:	a0a8703a 	and	r20,r20,r2
8110ec30:	003dd006 	br	8110e374 <__reset+0xfb0ee374>
8110ec34:	70004c26 	beq	r14,zero,8110ed68 <___vfiprintf_internal_r+0x11fc>
8110ec38:	00800084 	movi	r2,2
8110ec3c:	d8c01d04 	addi	r3,sp,116
8110ec40:	d8c00015 	stw	r3,0(sp)
8110ec44:	d8800115 	stw	r2,4(sp)
8110ec48:	01000044 	movi	r4,1
8110ec4c:	d811883a 	mov	r8,sp
8110ec50:	003f7306 	br	8110ea20 <__reset+0xfb0eea20>
8110ec54:	a080100c 	andi	r2,r20,64
8110ec58:	da802217 	ldw	r10,136(sp)
8110ec5c:	103e0626 	beq	r2,zero,8110e478 <__reset+0xfb0ee478>
8110ec60:	5480000f 	ldh	r18,0(r10)
8110ec64:	52800104 	addi	r10,r10,4
8110ec68:	da802215 	stw	r10,136(sp)
8110ec6c:	9027d7fa 	srai	r19,r18,31
8110ec70:	9805883a 	mov	r2,r19
8110ec74:	003db806 	br	8110e358 <__reset+0xfb0ee358>
8110ec78:	a080040c 	andi	r2,r20,16
8110ec7c:	1000091e 	bne	r2,zero,8110eca4 <___vfiprintf_internal_r+0x1138>
8110ec80:	a2c0100c 	andi	r11,r20,64
8110ec84:	58000726 	beq	r11,zero,8110eca4 <___vfiprintf_internal_r+0x1138>
8110ec88:	da802217 	ldw	r10,136(sp)
8110ec8c:	50800017 	ldw	r2,0(r10)
8110ec90:	52800104 	addi	r10,r10,4
8110ec94:	da802215 	stw	r10,136(sp)
8110ec98:	da802317 	ldw	r10,140(sp)
8110ec9c:	1280000d 	sth	r10,0(r2)
8110eca0:	003be706 	br	8110dc40 <__reset+0xfb0edc40>
8110eca4:	da802217 	ldw	r10,136(sp)
8110eca8:	50800017 	ldw	r2,0(r10)
8110ecac:	52800104 	addi	r10,r10,4
8110ecb0:	da802215 	stw	r10,136(sp)
8110ecb4:	da802317 	ldw	r10,140(sp)
8110ecb8:	12800015 	stw	r10,0(r2)
8110ecbc:	003be006 	br	8110dc40 <__reset+0xfb0edc40>
8110ecc0:	a080100c 	andi	r2,r20,64
8110ecc4:	da802217 	ldw	r10,136(sp)
8110ecc8:	10003026 	beq	r2,zero,8110ed8c <___vfiprintf_internal_r+0x1220>
8110eccc:	5480000b 	ldhu	r18,0(r10)
8110ecd0:	52800104 	addi	r10,r10,4
8110ecd4:	0027883a 	mov	r19,zero
8110ecd8:	da802215 	stw	r10,136(sp)
8110ecdc:	003d8006 	br	8110e2e0 <__reset+0xfb0ee2e0>
8110ece0:	80c00007 	ldb	r3,0(r16)
8110ece4:	003c0006 	br	8110dce8 <__reset+0xfb0edce8>
8110ece8:	a080100c 	andi	r2,r20,64
8110ecec:	d8001d85 	stb	zero,118(sp)
8110ecf0:	da802217 	ldw	r10,136(sp)
8110ecf4:	1000201e 	bne	r2,zero,8110ed78 <___vfiprintf_internal_r+0x120c>
8110ecf8:	50800104 	addi	r2,r10,4
8110ecfc:	54800017 	ldw	r18,0(r10)
8110ed00:	0027883a 	mov	r19,zero
8110ed04:	483def0e 	bge	r9,zero,8110e4c4 <__reset+0xfb0ee4c4>
8110ed08:	94c6b03a 	or	r3,r18,r19
8110ed0c:	d8802215 	stw	r2,136(sp)
8110ed10:	183d4e1e 	bne	r3,zero,8110e24c <__reset+0xfb0ee24c>
8110ed14:	0039883a 	mov	fp,zero
8110ed18:	0005883a 	mov	r2,zero
8110ed1c:	003e0606 	br	8110e538 <__reset+0xfb0ee538>
8110ed20:	d9402117 	ldw	r5,132(sp)
8110ed24:	d9002017 	ldw	r4,128(sp)
8110ed28:	d9801a04 	addi	r6,sp,104
8110ed2c:	da402c15 	stw	r9,176(sp)
8110ed30:	db802a15 	stw	r14,168(sp)
8110ed34:	110da580 	call	8110da58 <__sprint_r.part.0>
8110ed38:	da402c17 	ldw	r9,176(sp)
8110ed3c:	db802a17 	ldw	r14,168(sp)
8110ed40:	103ede1e 	bne	r2,zero,8110e8bc <__reset+0xfb0ee8bc>
8110ed44:	d9401b17 	ldw	r5,108(sp)
8110ed48:	d8801c17 	ldw	r2,112(sp)
8110ed4c:	d811883a 	mov	r8,sp
8110ed50:	29000044 	addi	r4,r5,1
8110ed54:	003e7406 	br	8110e728 <__reset+0xfb0ee728>
8110ed58:	00bfffc4 	movi	r2,-1
8110ed5c:	003c5806 	br	8110dec0 <__reset+0xfb0edec0>
8110ed60:	d811883a 	mov	r8,sp
8110ed64:	003ee806 	br	8110e908 <__reset+0xfb0ee908>
8110ed68:	000b883a 	mov	r5,zero
8110ed6c:	01000044 	movi	r4,1
8110ed70:	d811883a 	mov	r8,sp
8110ed74:	003e7c06 	br	8110e768 <__reset+0xfb0ee768>
8110ed78:	50800104 	addi	r2,r10,4
8110ed7c:	5480000b 	ldhu	r18,0(r10)
8110ed80:	0027883a 	mov	r19,zero
8110ed84:	483dcf0e 	bge	r9,zero,8110e4c4 <__reset+0xfb0ee4c4>
8110ed88:	003fdf06 	br	8110ed08 <__reset+0xfb0eed08>
8110ed8c:	54800017 	ldw	r18,0(r10)
8110ed90:	52800104 	addi	r10,r10,4
8110ed94:	0027883a 	mov	r19,zero
8110ed98:	da802215 	stw	r10,136(sp)
8110ed9c:	003d5006 	br	8110e2e0 <__reset+0xfb0ee2e0>
8110eda0:	50800104 	addi	r2,r10,4
8110eda4:	5480000b 	ldhu	r18,0(r10)
8110eda8:	0027883a 	mov	r19,zero
8110edac:	483f7d0e 	bge	r9,zero,8110eba4 <__reset+0xfb0eeba4>
8110edb0:	003ddc06 	br	8110e524 <__reset+0xfb0ee524>
8110edb4:	d8c02215 	stw	r3,136(sp)
8110edb8:	0039883a 	mov	fp,zero
8110edbc:	003ddb06 	br	8110e52c <__reset+0xfb0ee52c>
8110edc0:	02a044b4 	movhi	r10,33042
8110edc4:	52a66f04 	addi	r10,r10,-26180
8110edc8:	da802415 	stw	r10,144(sp)
8110edcc:	003e8306 	br	8110e7dc <__reset+0xfb0ee7dc>
8110edd0:	d8801c17 	ldw	r2,112(sp)
8110edd4:	dd002117 	ldw	r20,132(sp)
8110edd8:	103eb926 	beq	r2,zero,8110e8c0 <__reset+0xfb0ee8c0>
8110eddc:	d9002017 	ldw	r4,128(sp)
8110ede0:	d9801a04 	addi	r6,sp,104
8110ede4:	a00b883a 	mov	r5,r20
8110ede8:	110da580 	call	8110da58 <__sprint_r.part.0>
8110edec:	003eb406 	br	8110e8c0 <__reset+0xfb0ee8c0>
8110edf0:	80c00043 	ldbu	r3,1(r16)
8110edf4:	a5000814 	ori	r20,r20,32
8110edf8:	84000044 	addi	r16,r16,1
8110edfc:	18c03fcc 	andi	r3,r3,255
8110ee00:	18c0201c 	xori	r3,r3,128
8110ee04:	18ffe004 	addi	r3,r3,-128
8110ee08:	003bb706 	br	8110dce8 <__reset+0xfb0edce8>
8110ee0c:	a809883a 	mov	r4,r21
8110ee10:	d8c02a15 	stw	r3,168(sp)
8110ee14:	da002b15 	stw	r8,172(sp)
8110ee18:	1102ebc0 	call	81102ebc <strlen>
8110ee1c:	d8c02a17 	ldw	r3,168(sp)
8110ee20:	1027883a 	mov	r19,r2
8110ee24:	df001d83 	ldbu	fp,118(sp)
8110ee28:	d8c02215 	stw	r3,136(sp)
8110ee2c:	0013883a 	mov	r9,zero
8110ee30:	da002b17 	ldw	r8,172(sp)
8110ee34:	003c4d06 	br	8110df6c <__reset+0xfb0edf6c>
8110ee38:	d9402117 	ldw	r5,132(sp)
8110ee3c:	d9002017 	ldw	r4,128(sp)
8110ee40:	d9801a04 	addi	r6,sp,104
8110ee44:	da402c15 	stw	r9,176(sp)
8110ee48:	110da580 	call	8110da58 <__sprint_r.part.0>
8110ee4c:	da402c17 	ldw	r9,176(sp)
8110ee50:	103e9a1e 	bne	r2,zero,8110e8bc <__reset+0xfb0ee8bc>
8110ee54:	d9401b17 	ldw	r5,108(sp)
8110ee58:	d8801c17 	ldw	r2,112(sp)
8110ee5c:	d811883a 	mov	r8,sp
8110ee60:	29000044 	addi	r4,r5,1
8110ee64:	003e4206 	br	8110e770 <__reset+0xfb0ee770>
8110ee68:	d9401b17 	ldw	r5,108(sp)
8110ee6c:	012044b4 	movhi	r4,33042
8110ee70:	21267304 	addi	r4,r4,-26164
8110ee74:	d9002415 	stw	r4,144(sp)
8110ee78:	29400044 	addi	r5,r5,1
8110ee7c:	003c6d06 	br	8110e034 <__reset+0xfb0ee034>
8110ee80:	0039883a 	mov	fp,zero
8110ee84:	00800084 	movi	r2,2
8110ee88:	10803fcc 	andi	r2,r2,255
8110ee8c:	01000044 	movi	r4,1
8110ee90:	11001e26 	beq	r2,r4,8110ef0c <___vfiprintf_internal_r+0x13a0>
8110ee94:	01000084 	movi	r4,2
8110ee98:	11001e1e 	bne	r2,r4,8110ef14 <___vfiprintf_internal_r+0x13a8>
8110ee9c:	1829883a 	mov	r20,r3
8110eea0:	003eea06 	br	8110ea4c <__reset+0xfb0eea4c>
8110eea4:	a007883a 	mov	r3,r20
8110eea8:	00800044 	movi	r2,1
8110eeac:	003ff606 	br	8110ee88 <__reset+0xfb0eee88>
8110eeb0:	00800184 	movi	r2,6
8110eeb4:	1240012e 	bgeu	r2,r9,8110eebc <___vfiprintf_internal_r+0x1350>
8110eeb8:	1013883a 	mov	r9,r2
8110eebc:	4827883a 	mov	r19,r9
8110eec0:	4825883a 	mov	r18,r9
8110eec4:	48001516 	blt	r9,zero,8110ef1c <___vfiprintf_internal_r+0x13b0>
8110eec8:	056044b4 	movhi	r21,33042
8110eecc:	d8c02215 	stw	r3,136(sp)
8110eed0:	ad660304 	addi	r21,r21,-26612
8110eed4:	003d1406 	br	8110e328 <__reset+0xfb0ee328>
8110eed8:	02a044b4 	movhi	r10,33042
8110eedc:	52a66f04 	addi	r10,r10,-26180
8110eee0:	da802415 	stw	r10,144(sp)
8110eee4:	200d883a 	mov	r6,r4
8110eee8:	003c9106 	br	8110e130 <__reset+0xfb0ee130>
8110eeec:	5021883a 	mov	r16,r10
8110eef0:	0013883a 	mov	r9,zero
8110eef4:	003b7d06 	br	8110dcec <__reset+0xfb0edcec>
8110eef8:	4827883a 	mov	r19,r9
8110eefc:	df001d83 	ldbu	fp,118(sp)
8110ef00:	d8c02215 	stw	r3,136(sp)
8110ef04:	0013883a 	mov	r9,zero
8110ef08:	003c1806 	br	8110df6c <__reset+0xfb0edf6c>
8110ef0c:	1829883a 	mov	r20,r3
8110ef10:	003d1806 	br	8110e374 <__reset+0xfb0ee374>
8110ef14:	1829883a 	mov	r20,r3
8110ef18:	003ccd06 	br	8110e250 <__reset+0xfb0ee250>
8110ef1c:	0025883a 	mov	r18,zero
8110ef20:	003fe906 	br	8110eec8 <__reset+0xfb0eeec8>
8110ef24:	d8802217 	ldw	r2,136(sp)
8110ef28:	80c00043 	ldbu	r3,1(r16)
8110ef2c:	5021883a 	mov	r16,r10
8110ef30:	12400017 	ldw	r9,0(r2)
8110ef34:	10800104 	addi	r2,r2,4
8110ef38:	d8802215 	stw	r2,136(sp)
8110ef3c:	483faf0e 	bge	r9,zero,8110edfc <__reset+0xfb0eedfc>
8110ef40:	18c03fcc 	andi	r3,r3,255
8110ef44:	18c0201c 	xori	r3,r3,128
8110ef48:	027fffc4 	movi	r9,-1
8110ef4c:	18ffe004 	addi	r3,r3,-128
8110ef50:	003b6506 	br	8110dce8 <__reset+0xfb0edce8>
8110ef54:	d9c01d85 	stb	r7,118(sp)
8110ef58:	003ca006 	br	8110e1dc <__reset+0xfb0ee1dc>
8110ef5c:	d9c01d85 	stb	r7,118(sp)
8110ef60:	003cad06 	br	8110e218 <__reset+0xfb0ee218>
8110ef64:	d9c01d85 	stb	r7,118(sp)
8110ef68:	003d7d06 	br	8110e560 <__reset+0xfb0ee560>
8110ef6c:	d9c01d85 	stb	r7,118(sp)
8110ef70:	003d5f06 	br	8110e4f0 <__reset+0xfb0ee4f0>
8110ef74:	a080004c 	andi	r2,r20,1
8110ef78:	0039883a 	mov	fp,zero
8110ef7c:	10000526 	beq	r2,zero,8110ef94 <___vfiprintf_internal_r+0x1428>
8110ef80:	00800c04 	movi	r2,48
8110ef84:	d88019c5 	stb	r2,103(sp)
8110ef88:	dcc02717 	ldw	r19,156(sp)
8110ef8c:	dd4019c4 	addi	r21,sp,103
8110ef90:	003bf606 	br	8110df6c <__reset+0xfb0edf6c>
8110ef94:	0027883a 	mov	r19,zero
8110ef98:	dd401a04 	addi	r21,sp,104
8110ef9c:	003bf306 	br	8110df6c <__reset+0xfb0edf6c>
8110efa0:	d9c01d85 	stb	r7,118(sp)
8110efa4:	003dc806 	br	8110e6c8 <__reset+0xfb0ee6c8>
8110efa8:	d9c01d85 	stb	r7,118(sp)
8110efac:	003d3a06 	br	8110e498 <__reset+0xfb0ee498>
8110efb0:	d9c01d85 	stb	r7,118(sp)
8110efb4:	003d2a06 	br	8110e460 <__reset+0xfb0ee460>
8110efb8:	d9c01d85 	stb	r7,118(sp)
8110efbc:	003cde06 	br	8110e338 <__reset+0xfb0ee338>
8110efc0:	d9c01d85 	stb	r7,118(sp)
8110efc4:	003cbc06 	br	8110e2b8 <__reset+0xfb0ee2b8>

8110efc8 <__vfiprintf_internal>:
8110efc8:	00a044b4 	movhi	r2,33042
8110efcc:	10af1804 	addi	r2,r2,-17312
8110efd0:	300f883a 	mov	r7,r6
8110efd4:	280d883a 	mov	r6,r5
8110efd8:	200b883a 	mov	r5,r4
8110efdc:	11000017 	ldw	r4,0(r2)
8110efe0:	110db6c1 	jmpi	8110db6c <___vfiprintf_internal_r>

8110efe4 <__sbprintf>:
8110efe4:	2880030b 	ldhu	r2,12(r5)
8110efe8:	2ac01917 	ldw	r11,100(r5)
8110efec:	2a80038b 	ldhu	r10,14(r5)
8110eff0:	2a400717 	ldw	r9,28(r5)
8110eff4:	2a000917 	ldw	r8,36(r5)
8110eff8:	defee204 	addi	sp,sp,-1144
8110effc:	00c10004 	movi	r3,1024
8110f000:	dc011a15 	stw	r16,1128(sp)
8110f004:	10bfff4c 	andi	r2,r2,65533
8110f008:	2821883a 	mov	r16,r5
8110f00c:	d8cb883a 	add	r5,sp,r3
8110f010:	dc811c15 	stw	r18,1136(sp)
8110f014:	dc411b15 	stw	r17,1132(sp)
8110f018:	dfc11d15 	stw	ra,1140(sp)
8110f01c:	2025883a 	mov	r18,r4
8110f020:	d881030d 	sth	r2,1036(sp)
8110f024:	dac11915 	stw	r11,1124(sp)
8110f028:	da81038d 	sth	r10,1038(sp)
8110f02c:	da410715 	stw	r9,1052(sp)
8110f030:	da010915 	stw	r8,1060(sp)
8110f034:	dec10015 	stw	sp,1024(sp)
8110f038:	dec10415 	stw	sp,1040(sp)
8110f03c:	d8c10215 	stw	r3,1032(sp)
8110f040:	d8c10515 	stw	r3,1044(sp)
8110f044:	d8010615 	stw	zero,1048(sp)
8110f048:	110db6c0 	call	8110db6c <___vfiprintf_internal_r>
8110f04c:	1023883a 	mov	r17,r2
8110f050:	10000416 	blt	r2,zero,8110f064 <__sbprintf+0x80>
8110f054:	d9410004 	addi	r5,sp,1024
8110f058:	9009883a 	mov	r4,r18
8110f05c:	1108ff40 	call	81108ff4 <_fflush_r>
8110f060:	10000d1e 	bne	r2,zero,8110f098 <__sbprintf+0xb4>
8110f064:	d881030b 	ldhu	r2,1036(sp)
8110f068:	1080100c 	andi	r2,r2,64
8110f06c:	10000326 	beq	r2,zero,8110f07c <__sbprintf+0x98>
8110f070:	8080030b 	ldhu	r2,12(r16)
8110f074:	10801014 	ori	r2,r2,64
8110f078:	8080030d 	sth	r2,12(r16)
8110f07c:	8805883a 	mov	r2,r17
8110f080:	dfc11d17 	ldw	ra,1140(sp)
8110f084:	dc811c17 	ldw	r18,1136(sp)
8110f088:	dc411b17 	ldw	r17,1132(sp)
8110f08c:	dc011a17 	ldw	r16,1128(sp)
8110f090:	dec11e04 	addi	sp,sp,1144
8110f094:	f800283a 	ret
8110f098:	047fffc4 	movi	r17,-1
8110f09c:	003ff106 	br	8110f064 <__reset+0xfb0ef064>

8110f0a0 <__swbuf_r>:
8110f0a0:	defffb04 	addi	sp,sp,-20
8110f0a4:	dcc00315 	stw	r19,12(sp)
8110f0a8:	dc800215 	stw	r18,8(sp)
8110f0ac:	dc000015 	stw	r16,0(sp)
8110f0b0:	dfc00415 	stw	ra,16(sp)
8110f0b4:	dc400115 	stw	r17,4(sp)
8110f0b8:	2025883a 	mov	r18,r4
8110f0bc:	2827883a 	mov	r19,r5
8110f0c0:	3021883a 	mov	r16,r6
8110f0c4:	20000226 	beq	r4,zero,8110f0d0 <__swbuf_r+0x30>
8110f0c8:	20800e17 	ldw	r2,56(r4)
8110f0cc:	10004226 	beq	r2,zero,8110f1d8 <__swbuf_r+0x138>
8110f0d0:	80800617 	ldw	r2,24(r16)
8110f0d4:	8100030b 	ldhu	r4,12(r16)
8110f0d8:	80800215 	stw	r2,8(r16)
8110f0dc:	2080020c 	andi	r2,r4,8
8110f0e0:	10003626 	beq	r2,zero,8110f1bc <__swbuf_r+0x11c>
8110f0e4:	80c00417 	ldw	r3,16(r16)
8110f0e8:	18003426 	beq	r3,zero,8110f1bc <__swbuf_r+0x11c>
8110f0ec:	2088000c 	andi	r2,r4,8192
8110f0f0:	9c403fcc 	andi	r17,r19,255
8110f0f4:	10001a26 	beq	r2,zero,8110f160 <__swbuf_r+0xc0>
8110f0f8:	80800017 	ldw	r2,0(r16)
8110f0fc:	81000517 	ldw	r4,20(r16)
8110f100:	10c7c83a 	sub	r3,r2,r3
8110f104:	1900200e 	bge	r3,r4,8110f188 <__swbuf_r+0xe8>
8110f108:	18c00044 	addi	r3,r3,1
8110f10c:	81000217 	ldw	r4,8(r16)
8110f110:	11400044 	addi	r5,r2,1
8110f114:	81400015 	stw	r5,0(r16)
8110f118:	213fffc4 	addi	r4,r4,-1
8110f11c:	81000215 	stw	r4,8(r16)
8110f120:	14c00005 	stb	r19,0(r2)
8110f124:	80800517 	ldw	r2,20(r16)
8110f128:	10c01e26 	beq	r2,r3,8110f1a4 <__swbuf_r+0x104>
8110f12c:	8080030b 	ldhu	r2,12(r16)
8110f130:	1080004c 	andi	r2,r2,1
8110f134:	10000226 	beq	r2,zero,8110f140 <__swbuf_r+0xa0>
8110f138:	00800284 	movi	r2,10
8110f13c:	88801926 	beq	r17,r2,8110f1a4 <__swbuf_r+0x104>
8110f140:	8805883a 	mov	r2,r17
8110f144:	dfc00417 	ldw	ra,16(sp)
8110f148:	dcc00317 	ldw	r19,12(sp)
8110f14c:	dc800217 	ldw	r18,8(sp)
8110f150:	dc400117 	ldw	r17,4(sp)
8110f154:	dc000017 	ldw	r16,0(sp)
8110f158:	dec00504 	addi	sp,sp,20
8110f15c:	f800283a 	ret
8110f160:	81401917 	ldw	r5,100(r16)
8110f164:	00b7ffc4 	movi	r2,-8193
8110f168:	21080014 	ori	r4,r4,8192
8110f16c:	2884703a 	and	r2,r5,r2
8110f170:	80801915 	stw	r2,100(r16)
8110f174:	80800017 	ldw	r2,0(r16)
8110f178:	8100030d 	sth	r4,12(r16)
8110f17c:	81000517 	ldw	r4,20(r16)
8110f180:	10c7c83a 	sub	r3,r2,r3
8110f184:	193fe016 	blt	r3,r4,8110f108 <__reset+0xfb0ef108>
8110f188:	800b883a 	mov	r5,r16
8110f18c:	9009883a 	mov	r4,r18
8110f190:	1108ff40 	call	81108ff4 <_fflush_r>
8110f194:	1000071e 	bne	r2,zero,8110f1b4 <__swbuf_r+0x114>
8110f198:	80800017 	ldw	r2,0(r16)
8110f19c:	00c00044 	movi	r3,1
8110f1a0:	003fda06 	br	8110f10c <__reset+0xfb0ef10c>
8110f1a4:	800b883a 	mov	r5,r16
8110f1a8:	9009883a 	mov	r4,r18
8110f1ac:	1108ff40 	call	81108ff4 <_fflush_r>
8110f1b0:	103fe326 	beq	r2,zero,8110f140 <__reset+0xfb0ef140>
8110f1b4:	00bfffc4 	movi	r2,-1
8110f1b8:	003fe206 	br	8110f144 <__reset+0xfb0ef144>
8110f1bc:	800b883a 	mov	r5,r16
8110f1c0:	9009883a 	mov	r4,r18
8110f1c4:	11073fc0 	call	811073fc <__swsetup_r>
8110f1c8:	103ffa1e 	bne	r2,zero,8110f1b4 <__reset+0xfb0ef1b4>
8110f1cc:	8100030b 	ldhu	r4,12(r16)
8110f1d0:	80c00417 	ldw	r3,16(r16)
8110f1d4:	003fc506 	br	8110f0ec <__reset+0xfb0ef0ec>
8110f1d8:	11093d00 	call	811093d0 <__sinit>
8110f1dc:	003fbc06 	br	8110f0d0 <__reset+0xfb0ef0d0>

8110f1e0 <__swbuf>:
8110f1e0:	00a044b4 	movhi	r2,33042
8110f1e4:	10af1804 	addi	r2,r2,-17312
8110f1e8:	280d883a 	mov	r6,r5
8110f1ec:	200b883a 	mov	r5,r4
8110f1f0:	11000017 	ldw	r4,0(r2)
8110f1f4:	110f0a01 	jmpi	8110f0a0 <__swbuf_r>

8110f1f8 <_write_r>:
8110f1f8:	defffd04 	addi	sp,sp,-12
8110f1fc:	2805883a 	mov	r2,r5
8110f200:	dc000015 	stw	r16,0(sp)
8110f204:	042044b4 	movhi	r16,33042
8110f208:	dc400115 	stw	r17,4(sp)
8110f20c:	300b883a 	mov	r5,r6
8110f210:	842f3104 	addi	r16,r16,-17212
8110f214:	2023883a 	mov	r17,r4
8110f218:	380d883a 	mov	r6,r7
8110f21c:	1009883a 	mov	r4,r2
8110f220:	dfc00215 	stw	ra,8(sp)
8110f224:	80000015 	stw	zero,0(r16)
8110f228:	11141240 	call	81114124 <write>
8110f22c:	00ffffc4 	movi	r3,-1
8110f230:	10c00526 	beq	r2,r3,8110f248 <_write_r+0x50>
8110f234:	dfc00217 	ldw	ra,8(sp)
8110f238:	dc400117 	ldw	r17,4(sp)
8110f23c:	dc000017 	ldw	r16,0(sp)
8110f240:	dec00304 	addi	sp,sp,12
8110f244:	f800283a 	ret
8110f248:	80c00017 	ldw	r3,0(r16)
8110f24c:	183ff926 	beq	r3,zero,8110f234 <__reset+0xfb0ef234>
8110f250:	88c00015 	stw	r3,0(r17)
8110f254:	003ff706 	br	8110f234 <__reset+0xfb0ef234>

8110f258 <_close_r>:
8110f258:	defffd04 	addi	sp,sp,-12
8110f25c:	dc000015 	stw	r16,0(sp)
8110f260:	042044b4 	movhi	r16,33042
8110f264:	dc400115 	stw	r17,4(sp)
8110f268:	842f3104 	addi	r16,r16,-17212
8110f26c:	2023883a 	mov	r17,r4
8110f270:	2809883a 	mov	r4,r5
8110f274:	dfc00215 	stw	ra,8(sp)
8110f278:	80000015 	stw	zero,0(r16)
8110f27c:	1112c780 	call	81112c78 <close>
8110f280:	00ffffc4 	movi	r3,-1
8110f284:	10c00526 	beq	r2,r3,8110f29c <_close_r+0x44>
8110f288:	dfc00217 	ldw	ra,8(sp)
8110f28c:	dc400117 	ldw	r17,4(sp)
8110f290:	dc000017 	ldw	r16,0(sp)
8110f294:	dec00304 	addi	sp,sp,12
8110f298:	f800283a 	ret
8110f29c:	80c00017 	ldw	r3,0(r16)
8110f2a0:	183ff926 	beq	r3,zero,8110f288 <__reset+0xfb0ef288>
8110f2a4:	88c00015 	stw	r3,0(r17)
8110f2a8:	003ff706 	br	8110f288 <__reset+0xfb0ef288>

8110f2ac <_calloc_r>:
8110f2ac:	298b383a 	mul	r5,r5,r6
8110f2b0:	defffe04 	addi	sp,sp,-8
8110f2b4:	dfc00115 	stw	ra,4(sp)
8110f2b8:	dc000015 	stw	r16,0(sp)
8110f2bc:	110a1300 	call	8110a130 <_malloc_r>
8110f2c0:	10002926 	beq	r2,zero,8110f368 <_calloc_r+0xbc>
8110f2c4:	11bfff17 	ldw	r6,-4(r2)
8110f2c8:	1021883a 	mov	r16,r2
8110f2cc:	00bfff04 	movi	r2,-4
8110f2d0:	308c703a 	and	r6,r6,r2
8110f2d4:	00c00904 	movi	r3,36
8110f2d8:	308d883a 	add	r6,r6,r2
8110f2dc:	19801636 	bltu	r3,r6,8110f338 <_calloc_r+0x8c>
8110f2e0:	008004c4 	movi	r2,19
8110f2e4:	11800b2e 	bgeu	r2,r6,8110f314 <_calloc_r+0x68>
8110f2e8:	80000015 	stw	zero,0(r16)
8110f2ec:	80000115 	stw	zero,4(r16)
8110f2f0:	008006c4 	movi	r2,27
8110f2f4:	11801a2e 	bgeu	r2,r6,8110f360 <_calloc_r+0xb4>
8110f2f8:	80000215 	stw	zero,8(r16)
8110f2fc:	80000315 	stw	zero,12(r16)
8110f300:	30c0151e 	bne	r6,r3,8110f358 <_calloc_r+0xac>
8110f304:	80000415 	stw	zero,16(r16)
8110f308:	80800604 	addi	r2,r16,24
8110f30c:	80000515 	stw	zero,20(r16)
8110f310:	00000106 	br	8110f318 <_calloc_r+0x6c>
8110f314:	8005883a 	mov	r2,r16
8110f318:	10000015 	stw	zero,0(r2)
8110f31c:	10000115 	stw	zero,4(r2)
8110f320:	10000215 	stw	zero,8(r2)
8110f324:	8005883a 	mov	r2,r16
8110f328:	dfc00117 	ldw	ra,4(sp)
8110f32c:	dc000017 	ldw	r16,0(sp)
8110f330:	dec00204 	addi	sp,sp,8
8110f334:	f800283a 	ret
8110f338:	000b883a 	mov	r5,zero
8110f33c:	8009883a 	mov	r4,r16
8110f340:	110ab7c0 	call	8110ab7c <memset>
8110f344:	8005883a 	mov	r2,r16
8110f348:	dfc00117 	ldw	ra,4(sp)
8110f34c:	dc000017 	ldw	r16,0(sp)
8110f350:	dec00204 	addi	sp,sp,8
8110f354:	f800283a 	ret
8110f358:	80800404 	addi	r2,r16,16
8110f35c:	003fee06 	br	8110f318 <__reset+0xfb0ef318>
8110f360:	80800204 	addi	r2,r16,8
8110f364:	003fec06 	br	8110f318 <__reset+0xfb0ef318>
8110f368:	0005883a 	mov	r2,zero
8110f36c:	003fee06 	br	8110f328 <__reset+0xfb0ef328>

8110f370 <_fclose_r>:
8110f370:	28003926 	beq	r5,zero,8110f458 <_fclose_r+0xe8>
8110f374:	defffc04 	addi	sp,sp,-16
8110f378:	dc400115 	stw	r17,4(sp)
8110f37c:	dc000015 	stw	r16,0(sp)
8110f380:	dfc00315 	stw	ra,12(sp)
8110f384:	dc800215 	stw	r18,8(sp)
8110f388:	2023883a 	mov	r17,r4
8110f38c:	2821883a 	mov	r16,r5
8110f390:	20000226 	beq	r4,zero,8110f39c <_fclose_r+0x2c>
8110f394:	20800e17 	ldw	r2,56(r4)
8110f398:	10002726 	beq	r2,zero,8110f438 <_fclose_r+0xc8>
8110f39c:	8080030f 	ldh	r2,12(r16)
8110f3a0:	1000071e 	bne	r2,zero,8110f3c0 <_fclose_r+0x50>
8110f3a4:	0005883a 	mov	r2,zero
8110f3a8:	dfc00317 	ldw	ra,12(sp)
8110f3ac:	dc800217 	ldw	r18,8(sp)
8110f3b0:	dc400117 	ldw	r17,4(sp)
8110f3b4:	dc000017 	ldw	r16,0(sp)
8110f3b8:	dec00404 	addi	sp,sp,16
8110f3bc:	f800283a 	ret
8110f3c0:	800b883a 	mov	r5,r16
8110f3c4:	8809883a 	mov	r4,r17
8110f3c8:	1108dd80 	call	81108dd8 <__sflush_r>
8110f3cc:	1025883a 	mov	r18,r2
8110f3d0:	80800b17 	ldw	r2,44(r16)
8110f3d4:	10000426 	beq	r2,zero,8110f3e8 <_fclose_r+0x78>
8110f3d8:	81400717 	ldw	r5,28(r16)
8110f3dc:	8809883a 	mov	r4,r17
8110f3e0:	103ee83a 	callr	r2
8110f3e4:	10001616 	blt	r2,zero,8110f440 <_fclose_r+0xd0>
8110f3e8:	8080030b 	ldhu	r2,12(r16)
8110f3ec:	1080200c 	andi	r2,r2,128
8110f3f0:	1000151e 	bne	r2,zero,8110f448 <_fclose_r+0xd8>
8110f3f4:	81400c17 	ldw	r5,48(r16)
8110f3f8:	28000526 	beq	r5,zero,8110f410 <_fclose_r+0xa0>
8110f3fc:	80801004 	addi	r2,r16,64
8110f400:	28800226 	beq	r5,r2,8110f40c <_fclose_r+0x9c>
8110f404:	8809883a 	mov	r4,r17
8110f408:	11095440 	call	81109544 <_free_r>
8110f40c:	80000c15 	stw	zero,48(r16)
8110f410:	81401117 	ldw	r5,68(r16)
8110f414:	28000326 	beq	r5,zero,8110f424 <_fclose_r+0xb4>
8110f418:	8809883a 	mov	r4,r17
8110f41c:	11095440 	call	81109544 <_free_r>
8110f420:	80001115 	stw	zero,68(r16)
8110f424:	11093e00 	call	811093e0 <__sfp_lock_acquire>
8110f428:	8000030d 	sth	zero,12(r16)
8110f42c:	11093e40 	call	811093e4 <__sfp_lock_release>
8110f430:	9005883a 	mov	r2,r18
8110f434:	003fdc06 	br	8110f3a8 <__reset+0xfb0ef3a8>
8110f438:	11093d00 	call	811093d0 <__sinit>
8110f43c:	003fd706 	br	8110f39c <__reset+0xfb0ef39c>
8110f440:	04bfffc4 	movi	r18,-1
8110f444:	003fe806 	br	8110f3e8 <__reset+0xfb0ef3e8>
8110f448:	81400417 	ldw	r5,16(r16)
8110f44c:	8809883a 	mov	r4,r17
8110f450:	11095440 	call	81109544 <_free_r>
8110f454:	003fe706 	br	8110f3f4 <__reset+0xfb0ef3f4>
8110f458:	0005883a 	mov	r2,zero
8110f45c:	f800283a 	ret

8110f460 <fclose>:
8110f460:	00a044b4 	movhi	r2,33042
8110f464:	10af1804 	addi	r2,r2,-17312
8110f468:	200b883a 	mov	r5,r4
8110f46c:	11000017 	ldw	r4,0(r2)
8110f470:	110f3701 	jmpi	8110f370 <_fclose_r>

8110f474 <__fputwc>:
8110f474:	defff804 	addi	sp,sp,-32
8110f478:	dcc00415 	stw	r19,16(sp)
8110f47c:	dc800315 	stw	r18,12(sp)
8110f480:	dc000115 	stw	r16,4(sp)
8110f484:	dfc00715 	stw	ra,28(sp)
8110f488:	dd400615 	stw	r21,24(sp)
8110f48c:	dd000515 	stw	r20,20(sp)
8110f490:	dc400215 	stw	r17,8(sp)
8110f494:	2027883a 	mov	r19,r4
8110f498:	2825883a 	mov	r18,r5
8110f49c:	3021883a 	mov	r16,r6
8110f4a0:	1109f200 	call	81109f20 <__locale_mb_cur_max>
8110f4a4:	00c00044 	movi	r3,1
8110f4a8:	10c03e26 	beq	r2,r3,8110f5a4 <__fputwc+0x130>
8110f4ac:	81c01704 	addi	r7,r16,92
8110f4b0:	900d883a 	mov	r6,r18
8110f4b4:	d80b883a 	mov	r5,sp
8110f4b8:	9809883a 	mov	r4,r19
8110f4bc:	110f7ec0 	call	8110f7ec <_wcrtomb_r>
8110f4c0:	1029883a 	mov	r20,r2
8110f4c4:	00bfffc4 	movi	r2,-1
8110f4c8:	a0802026 	beq	r20,r2,8110f54c <__fputwc+0xd8>
8110f4cc:	d9400003 	ldbu	r5,0(sp)
8110f4d0:	a0001c26 	beq	r20,zero,8110f544 <__fputwc+0xd0>
8110f4d4:	0023883a 	mov	r17,zero
8110f4d8:	05400284 	movi	r21,10
8110f4dc:	00000906 	br	8110f504 <__fputwc+0x90>
8110f4e0:	80800017 	ldw	r2,0(r16)
8110f4e4:	11400005 	stb	r5,0(r2)
8110f4e8:	80c00017 	ldw	r3,0(r16)
8110f4ec:	18c00044 	addi	r3,r3,1
8110f4f0:	80c00015 	stw	r3,0(r16)
8110f4f4:	8c400044 	addi	r17,r17,1
8110f4f8:	dc45883a 	add	r2,sp,r17
8110f4fc:	8d00112e 	bgeu	r17,r20,8110f544 <__fputwc+0xd0>
8110f500:	11400003 	ldbu	r5,0(r2)
8110f504:	80c00217 	ldw	r3,8(r16)
8110f508:	18ffffc4 	addi	r3,r3,-1
8110f50c:	80c00215 	stw	r3,8(r16)
8110f510:	183ff30e 	bge	r3,zero,8110f4e0 <__reset+0xfb0ef4e0>
8110f514:	80800617 	ldw	r2,24(r16)
8110f518:	18801916 	blt	r3,r2,8110f580 <__fputwc+0x10c>
8110f51c:	80800017 	ldw	r2,0(r16)
8110f520:	11400005 	stb	r5,0(r2)
8110f524:	80800017 	ldw	r2,0(r16)
8110f528:	10c00003 	ldbu	r3,0(r2)
8110f52c:	10800044 	addi	r2,r2,1
8110f530:	1d402326 	beq	r3,r21,8110f5c0 <__fputwc+0x14c>
8110f534:	80800015 	stw	r2,0(r16)
8110f538:	8c400044 	addi	r17,r17,1
8110f53c:	dc45883a 	add	r2,sp,r17
8110f540:	8d3fef36 	bltu	r17,r20,8110f500 <__reset+0xfb0ef500>
8110f544:	9005883a 	mov	r2,r18
8110f548:	00000406 	br	8110f55c <__fputwc+0xe8>
8110f54c:	80c0030b 	ldhu	r3,12(r16)
8110f550:	a005883a 	mov	r2,r20
8110f554:	18c01014 	ori	r3,r3,64
8110f558:	80c0030d 	sth	r3,12(r16)
8110f55c:	dfc00717 	ldw	ra,28(sp)
8110f560:	dd400617 	ldw	r21,24(sp)
8110f564:	dd000517 	ldw	r20,20(sp)
8110f568:	dcc00417 	ldw	r19,16(sp)
8110f56c:	dc800317 	ldw	r18,12(sp)
8110f570:	dc400217 	ldw	r17,8(sp)
8110f574:	dc000117 	ldw	r16,4(sp)
8110f578:	dec00804 	addi	sp,sp,32
8110f57c:	f800283a 	ret
8110f580:	800d883a 	mov	r6,r16
8110f584:	29403fcc 	andi	r5,r5,255
8110f588:	9809883a 	mov	r4,r19
8110f58c:	110f0a00 	call	8110f0a0 <__swbuf_r>
8110f590:	10bfffe0 	cmpeqi	r2,r2,-1
8110f594:	10803fcc 	andi	r2,r2,255
8110f598:	103fd626 	beq	r2,zero,8110f4f4 <__reset+0xfb0ef4f4>
8110f59c:	00bfffc4 	movi	r2,-1
8110f5a0:	003fee06 	br	8110f55c <__reset+0xfb0ef55c>
8110f5a4:	90ffffc4 	addi	r3,r18,-1
8110f5a8:	01003f84 	movi	r4,254
8110f5ac:	20ffbf36 	bltu	r4,r3,8110f4ac <__reset+0xfb0ef4ac>
8110f5b0:	900b883a 	mov	r5,r18
8110f5b4:	dc800005 	stb	r18,0(sp)
8110f5b8:	1029883a 	mov	r20,r2
8110f5bc:	003fc506 	br	8110f4d4 <__reset+0xfb0ef4d4>
8110f5c0:	800d883a 	mov	r6,r16
8110f5c4:	a80b883a 	mov	r5,r21
8110f5c8:	9809883a 	mov	r4,r19
8110f5cc:	110f0a00 	call	8110f0a0 <__swbuf_r>
8110f5d0:	10bfffe0 	cmpeqi	r2,r2,-1
8110f5d4:	003fef06 	br	8110f594 <__reset+0xfb0ef594>

8110f5d8 <_fputwc_r>:
8110f5d8:	3080030b 	ldhu	r2,12(r6)
8110f5dc:	10c8000c 	andi	r3,r2,8192
8110f5e0:	1800051e 	bne	r3,zero,8110f5f8 <_fputwc_r+0x20>
8110f5e4:	30c01917 	ldw	r3,100(r6)
8110f5e8:	10880014 	ori	r2,r2,8192
8110f5ec:	3080030d 	sth	r2,12(r6)
8110f5f0:	18880014 	ori	r2,r3,8192
8110f5f4:	30801915 	stw	r2,100(r6)
8110f5f8:	110f4741 	jmpi	8110f474 <__fputwc>

8110f5fc <fputwc>:
8110f5fc:	00a044b4 	movhi	r2,33042
8110f600:	defffc04 	addi	sp,sp,-16
8110f604:	10af1804 	addi	r2,r2,-17312
8110f608:	dc000115 	stw	r16,4(sp)
8110f60c:	14000017 	ldw	r16,0(r2)
8110f610:	dc400215 	stw	r17,8(sp)
8110f614:	dfc00315 	stw	ra,12(sp)
8110f618:	2023883a 	mov	r17,r4
8110f61c:	80000226 	beq	r16,zero,8110f628 <fputwc+0x2c>
8110f620:	80800e17 	ldw	r2,56(r16)
8110f624:	10001026 	beq	r2,zero,8110f668 <fputwc+0x6c>
8110f628:	2880030b 	ldhu	r2,12(r5)
8110f62c:	10c8000c 	andi	r3,r2,8192
8110f630:	1800051e 	bne	r3,zero,8110f648 <fputwc+0x4c>
8110f634:	28c01917 	ldw	r3,100(r5)
8110f638:	10880014 	ori	r2,r2,8192
8110f63c:	2880030d 	sth	r2,12(r5)
8110f640:	18880014 	ori	r2,r3,8192
8110f644:	28801915 	stw	r2,100(r5)
8110f648:	280d883a 	mov	r6,r5
8110f64c:	8009883a 	mov	r4,r16
8110f650:	880b883a 	mov	r5,r17
8110f654:	dfc00317 	ldw	ra,12(sp)
8110f658:	dc400217 	ldw	r17,8(sp)
8110f65c:	dc000117 	ldw	r16,4(sp)
8110f660:	dec00404 	addi	sp,sp,16
8110f664:	110f4741 	jmpi	8110f474 <__fputwc>
8110f668:	8009883a 	mov	r4,r16
8110f66c:	d9400015 	stw	r5,0(sp)
8110f670:	11093d00 	call	811093d0 <__sinit>
8110f674:	d9400017 	ldw	r5,0(sp)
8110f678:	003feb06 	br	8110f628 <__reset+0xfb0ef628>

8110f67c <_fstat_r>:
8110f67c:	defffd04 	addi	sp,sp,-12
8110f680:	2805883a 	mov	r2,r5
8110f684:	dc000015 	stw	r16,0(sp)
8110f688:	042044b4 	movhi	r16,33042
8110f68c:	dc400115 	stw	r17,4(sp)
8110f690:	842f3104 	addi	r16,r16,-17212
8110f694:	2023883a 	mov	r17,r4
8110f698:	300b883a 	mov	r5,r6
8110f69c:	1009883a 	mov	r4,r2
8110f6a0:	dfc00215 	stw	ra,8(sp)
8110f6a4:	80000015 	stw	zero,0(r16)
8110f6a8:	1112dd00 	call	81112dd0 <fstat>
8110f6ac:	00ffffc4 	movi	r3,-1
8110f6b0:	10c00526 	beq	r2,r3,8110f6c8 <_fstat_r+0x4c>
8110f6b4:	dfc00217 	ldw	ra,8(sp)
8110f6b8:	dc400117 	ldw	r17,4(sp)
8110f6bc:	dc000017 	ldw	r16,0(sp)
8110f6c0:	dec00304 	addi	sp,sp,12
8110f6c4:	f800283a 	ret
8110f6c8:	80c00017 	ldw	r3,0(r16)
8110f6cc:	183ff926 	beq	r3,zero,8110f6b4 <__reset+0xfb0ef6b4>
8110f6d0:	88c00015 	stw	r3,0(r17)
8110f6d4:	003ff706 	br	8110f6b4 <__reset+0xfb0ef6b4>

8110f6d8 <_isatty_r>:
8110f6d8:	defffd04 	addi	sp,sp,-12
8110f6dc:	dc000015 	stw	r16,0(sp)
8110f6e0:	042044b4 	movhi	r16,33042
8110f6e4:	dc400115 	stw	r17,4(sp)
8110f6e8:	842f3104 	addi	r16,r16,-17212
8110f6ec:	2023883a 	mov	r17,r4
8110f6f0:	2809883a 	mov	r4,r5
8110f6f4:	dfc00215 	stw	ra,8(sp)
8110f6f8:	80000015 	stw	zero,0(r16)
8110f6fc:	1112ebc0 	call	81112ebc <isatty>
8110f700:	00ffffc4 	movi	r3,-1
8110f704:	10c00526 	beq	r2,r3,8110f71c <_isatty_r+0x44>
8110f708:	dfc00217 	ldw	ra,8(sp)
8110f70c:	dc400117 	ldw	r17,4(sp)
8110f710:	dc000017 	ldw	r16,0(sp)
8110f714:	dec00304 	addi	sp,sp,12
8110f718:	f800283a 	ret
8110f71c:	80c00017 	ldw	r3,0(r16)
8110f720:	183ff926 	beq	r3,zero,8110f708 <__reset+0xfb0ef708>
8110f724:	88c00015 	stw	r3,0(r17)
8110f728:	003ff706 	br	8110f708 <__reset+0xfb0ef708>

8110f72c <_lseek_r>:
8110f72c:	defffd04 	addi	sp,sp,-12
8110f730:	2805883a 	mov	r2,r5
8110f734:	dc000015 	stw	r16,0(sp)
8110f738:	042044b4 	movhi	r16,33042
8110f73c:	dc400115 	stw	r17,4(sp)
8110f740:	300b883a 	mov	r5,r6
8110f744:	842f3104 	addi	r16,r16,-17212
8110f748:	2023883a 	mov	r17,r4
8110f74c:	380d883a 	mov	r6,r7
8110f750:	1009883a 	mov	r4,r2
8110f754:	dfc00215 	stw	ra,8(sp)
8110f758:	80000015 	stw	zero,0(r16)
8110f75c:	1113a580 	call	81113a58 <lseek>
8110f760:	00ffffc4 	movi	r3,-1
8110f764:	10c00526 	beq	r2,r3,8110f77c <_lseek_r+0x50>
8110f768:	dfc00217 	ldw	ra,8(sp)
8110f76c:	dc400117 	ldw	r17,4(sp)
8110f770:	dc000017 	ldw	r16,0(sp)
8110f774:	dec00304 	addi	sp,sp,12
8110f778:	f800283a 	ret
8110f77c:	80c00017 	ldw	r3,0(r16)
8110f780:	183ff926 	beq	r3,zero,8110f768 <__reset+0xfb0ef768>
8110f784:	88c00015 	stw	r3,0(r17)
8110f788:	003ff706 	br	8110f768 <__reset+0xfb0ef768>

8110f78c <_read_r>:
8110f78c:	defffd04 	addi	sp,sp,-12
8110f790:	2805883a 	mov	r2,r5
8110f794:	dc000015 	stw	r16,0(sp)
8110f798:	042044b4 	movhi	r16,33042
8110f79c:	dc400115 	stw	r17,4(sp)
8110f7a0:	300b883a 	mov	r5,r6
8110f7a4:	842f3104 	addi	r16,r16,-17212
8110f7a8:	2023883a 	mov	r17,r4
8110f7ac:	380d883a 	mov	r6,r7
8110f7b0:	1009883a 	mov	r4,r2
8110f7b4:	dfc00215 	stw	ra,8(sp)
8110f7b8:	80000015 	stw	zero,0(r16)
8110f7bc:	1113d040 	call	81113d04 <read>
8110f7c0:	00ffffc4 	movi	r3,-1
8110f7c4:	10c00526 	beq	r2,r3,8110f7dc <_read_r+0x50>
8110f7c8:	dfc00217 	ldw	ra,8(sp)
8110f7cc:	dc400117 	ldw	r17,4(sp)
8110f7d0:	dc000017 	ldw	r16,0(sp)
8110f7d4:	dec00304 	addi	sp,sp,12
8110f7d8:	f800283a 	ret
8110f7dc:	80c00017 	ldw	r3,0(r16)
8110f7e0:	183ff926 	beq	r3,zero,8110f7c8 <__reset+0xfb0ef7c8>
8110f7e4:	88c00015 	stw	r3,0(r17)
8110f7e8:	003ff706 	br	8110f7c8 <__reset+0xfb0ef7c8>

8110f7ec <_wcrtomb_r>:
8110f7ec:	defff604 	addi	sp,sp,-40
8110f7f0:	00a044b4 	movhi	r2,33042
8110f7f4:	dc800815 	stw	r18,32(sp)
8110f7f8:	dc400715 	stw	r17,28(sp)
8110f7fc:	dc000615 	stw	r16,24(sp)
8110f800:	10af1c04 	addi	r2,r2,-17296
8110f804:	dfc00915 	stw	ra,36(sp)
8110f808:	2021883a 	mov	r16,r4
8110f80c:	3823883a 	mov	r17,r7
8110f810:	14800017 	ldw	r18,0(r2)
8110f814:	28001426 	beq	r5,zero,8110f868 <_wcrtomb_r+0x7c>
8110f818:	d9400415 	stw	r5,16(sp)
8110f81c:	d9800515 	stw	r6,20(sp)
8110f820:	1109f140 	call	81109f14 <__locale_charset>
8110f824:	d9800517 	ldw	r6,20(sp)
8110f828:	d9400417 	ldw	r5,16(sp)
8110f82c:	100f883a 	mov	r7,r2
8110f830:	dc400015 	stw	r17,0(sp)
8110f834:	8009883a 	mov	r4,r16
8110f838:	903ee83a 	callr	r18
8110f83c:	00ffffc4 	movi	r3,-1
8110f840:	10c0031e 	bne	r2,r3,8110f850 <_wcrtomb_r+0x64>
8110f844:	88000015 	stw	zero,0(r17)
8110f848:	00c02284 	movi	r3,138
8110f84c:	80c00015 	stw	r3,0(r16)
8110f850:	dfc00917 	ldw	ra,36(sp)
8110f854:	dc800817 	ldw	r18,32(sp)
8110f858:	dc400717 	ldw	r17,28(sp)
8110f85c:	dc000617 	ldw	r16,24(sp)
8110f860:	dec00a04 	addi	sp,sp,40
8110f864:	f800283a 	ret
8110f868:	1109f140 	call	81109f14 <__locale_charset>
8110f86c:	100f883a 	mov	r7,r2
8110f870:	dc400015 	stw	r17,0(sp)
8110f874:	000d883a 	mov	r6,zero
8110f878:	d9400104 	addi	r5,sp,4
8110f87c:	8009883a 	mov	r4,r16
8110f880:	903ee83a 	callr	r18
8110f884:	003fed06 	br	8110f83c <__reset+0xfb0ef83c>

8110f888 <wcrtomb>:
8110f888:	defff604 	addi	sp,sp,-40
8110f88c:	00a044b4 	movhi	r2,33042
8110f890:	dc800615 	stw	r18,24(sp)
8110f894:	dc400515 	stw	r17,20(sp)
8110f898:	10af1804 	addi	r2,r2,-17312
8110f89c:	dfc00915 	stw	ra,36(sp)
8110f8a0:	dd000815 	stw	r20,32(sp)
8110f8a4:	dcc00715 	stw	r19,28(sp)
8110f8a8:	dc000415 	stw	r16,16(sp)
8110f8ac:	3025883a 	mov	r18,r6
8110f8b0:	14400017 	ldw	r17,0(r2)
8110f8b4:	20001926 	beq	r4,zero,8110f91c <wcrtomb+0x94>
8110f8b8:	00a044b4 	movhi	r2,33042
8110f8bc:	10af1c04 	addi	r2,r2,-17296
8110f8c0:	15000017 	ldw	r20,0(r2)
8110f8c4:	2021883a 	mov	r16,r4
8110f8c8:	2827883a 	mov	r19,r5
8110f8cc:	1109f140 	call	81109f14 <__locale_charset>
8110f8d0:	100f883a 	mov	r7,r2
8110f8d4:	dc800015 	stw	r18,0(sp)
8110f8d8:	980d883a 	mov	r6,r19
8110f8dc:	800b883a 	mov	r5,r16
8110f8e0:	8809883a 	mov	r4,r17
8110f8e4:	a03ee83a 	callr	r20
8110f8e8:	00ffffc4 	movi	r3,-1
8110f8ec:	10c0031e 	bne	r2,r3,8110f8fc <wcrtomb+0x74>
8110f8f0:	90000015 	stw	zero,0(r18)
8110f8f4:	00c02284 	movi	r3,138
8110f8f8:	88c00015 	stw	r3,0(r17)
8110f8fc:	dfc00917 	ldw	ra,36(sp)
8110f900:	dd000817 	ldw	r20,32(sp)
8110f904:	dcc00717 	ldw	r19,28(sp)
8110f908:	dc800617 	ldw	r18,24(sp)
8110f90c:	dc400517 	ldw	r17,20(sp)
8110f910:	dc000417 	ldw	r16,16(sp)
8110f914:	dec00a04 	addi	sp,sp,40
8110f918:	f800283a 	ret
8110f91c:	00a044b4 	movhi	r2,33042
8110f920:	10af1c04 	addi	r2,r2,-17296
8110f924:	14000017 	ldw	r16,0(r2)
8110f928:	1109f140 	call	81109f14 <__locale_charset>
8110f92c:	100f883a 	mov	r7,r2
8110f930:	dc800015 	stw	r18,0(sp)
8110f934:	000d883a 	mov	r6,zero
8110f938:	d9400104 	addi	r5,sp,4
8110f93c:	8809883a 	mov	r4,r17
8110f940:	803ee83a 	callr	r16
8110f944:	003fe806 	br	8110f8e8 <__reset+0xfb0ef8e8>

8110f948 <__ascii_wctomb>:
8110f948:	28000526 	beq	r5,zero,8110f960 <__ascii_wctomb+0x18>
8110f94c:	00803fc4 	movi	r2,255
8110f950:	11800536 	bltu	r2,r6,8110f968 <__ascii_wctomb+0x20>
8110f954:	29800005 	stb	r6,0(r5)
8110f958:	00800044 	movi	r2,1
8110f95c:	f800283a 	ret
8110f960:	0005883a 	mov	r2,zero
8110f964:	f800283a 	ret
8110f968:	00802284 	movi	r2,138
8110f96c:	20800015 	stw	r2,0(r4)
8110f970:	00bfffc4 	movi	r2,-1
8110f974:	f800283a 	ret

8110f978 <_wctomb_r>:
8110f978:	00a044b4 	movhi	r2,33042
8110f97c:	defff904 	addi	sp,sp,-28
8110f980:	10af1c04 	addi	r2,r2,-17296
8110f984:	dfc00615 	stw	ra,24(sp)
8110f988:	dc400515 	stw	r17,20(sp)
8110f98c:	dc000415 	stw	r16,16(sp)
8110f990:	3823883a 	mov	r17,r7
8110f994:	14000017 	ldw	r16,0(r2)
8110f998:	d9000115 	stw	r4,4(sp)
8110f99c:	d9400215 	stw	r5,8(sp)
8110f9a0:	d9800315 	stw	r6,12(sp)
8110f9a4:	1109f140 	call	81109f14 <__locale_charset>
8110f9a8:	d9800317 	ldw	r6,12(sp)
8110f9ac:	d9400217 	ldw	r5,8(sp)
8110f9b0:	d9000117 	ldw	r4,4(sp)
8110f9b4:	100f883a 	mov	r7,r2
8110f9b8:	dc400015 	stw	r17,0(sp)
8110f9bc:	803ee83a 	callr	r16
8110f9c0:	dfc00617 	ldw	ra,24(sp)
8110f9c4:	dc400517 	ldw	r17,20(sp)
8110f9c8:	dc000417 	ldw	r16,16(sp)
8110f9cc:	dec00704 	addi	sp,sp,28
8110f9d0:	f800283a 	ret

8110f9d4 <__udivdi3>:
8110f9d4:	defff504 	addi	sp,sp,-44
8110f9d8:	dcc00415 	stw	r19,16(sp)
8110f9dc:	dc000115 	stw	r16,4(sp)
8110f9e0:	dfc00a15 	stw	ra,40(sp)
8110f9e4:	df000915 	stw	fp,36(sp)
8110f9e8:	ddc00815 	stw	r23,32(sp)
8110f9ec:	dd800715 	stw	r22,28(sp)
8110f9f0:	dd400615 	stw	r21,24(sp)
8110f9f4:	dd000515 	stw	r20,20(sp)
8110f9f8:	dc800315 	stw	r18,12(sp)
8110f9fc:	dc400215 	stw	r17,8(sp)
8110fa00:	2027883a 	mov	r19,r4
8110fa04:	2821883a 	mov	r16,r5
8110fa08:	3800411e 	bne	r7,zero,8110fb10 <__udivdi3+0x13c>
8110fa0c:	3023883a 	mov	r17,r6
8110fa10:	2025883a 	mov	r18,r4
8110fa14:	2980522e 	bgeu	r5,r6,8110fb60 <__udivdi3+0x18c>
8110fa18:	00bfffd4 	movui	r2,65535
8110fa1c:	282d883a 	mov	r22,r5
8110fa20:	1180a836 	bltu	r2,r6,8110fcc4 <__udivdi3+0x2f0>
8110fa24:	00803fc4 	movi	r2,255
8110fa28:	1185803a 	cmpltu	r2,r2,r6
8110fa2c:	100490fa 	slli	r2,r2,3
8110fa30:	3086d83a 	srl	r3,r6,r2
8110fa34:	012044b4 	movhi	r4,33042
8110fa38:	2125b384 	addi	r4,r4,-26930
8110fa3c:	20c7883a 	add	r3,r4,r3
8110fa40:	18c00003 	ldbu	r3,0(r3)
8110fa44:	1885883a 	add	r2,r3,r2
8110fa48:	00c00804 	movi	r3,32
8110fa4c:	1887c83a 	sub	r3,r3,r2
8110fa50:	18000526 	beq	r3,zero,8110fa68 <__udivdi3+0x94>
8110fa54:	80e0983a 	sll	r16,r16,r3
8110fa58:	9884d83a 	srl	r2,r19,r2
8110fa5c:	30e2983a 	sll	r17,r6,r3
8110fa60:	98e4983a 	sll	r18,r19,r3
8110fa64:	142cb03a 	or	r22,r2,r16
8110fa68:	882ad43a 	srli	r21,r17,16
8110fa6c:	b009883a 	mov	r4,r22
8110fa70:	8d3fffcc 	andi	r20,r17,65535
8110fa74:	a80b883a 	mov	r5,r21
8110fa78:	11105e00 	call	811105e0 <__umodsi3>
8110fa7c:	b009883a 	mov	r4,r22
8110fa80:	a80b883a 	mov	r5,r21
8110fa84:	1027883a 	mov	r19,r2
8110fa88:	111057c0 	call	8111057c <__udivsi3>
8110fa8c:	102d883a 	mov	r22,r2
8110fa90:	9826943a 	slli	r19,r19,16
8110fa94:	9004d43a 	srli	r2,r18,16
8110fa98:	a5a1383a 	mul	r16,r20,r22
8110fa9c:	14c4b03a 	or	r2,r2,r19
8110faa0:	1400052e 	bgeu	r2,r16,8110fab8 <__udivdi3+0xe4>
8110faa4:	1445883a 	add	r2,r2,r17
8110faa8:	b0ffffc4 	addi	r3,r22,-1
8110faac:	14400136 	bltu	r2,r17,8110fab4 <__udivdi3+0xe0>
8110fab0:	14012336 	bltu	r2,r16,8110ff40 <__udivdi3+0x56c>
8110fab4:	182d883a 	mov	r22,r3
8110fab8:	1421c83a 	sub	r16,r2,r16
8110fabc:	a80b883a 	mov	r5,r21
8110fac0:	8009883a 	mov	r4,r16
8110fac4:	11105e00 	call	811105e0 <__umodsi3>
8110fac8:	1027883a 	mov	r19,r2
8110facc:	a80b883a 	mov	r5,r21
8110fad0:	8009883a 	mov	r4,r16
8110fad4:	111057c0 	call	8111057c <__udivsi3>
8110fad8:	9826943a 	slli	r19,r19,16
8110fadc:	a0a9383a 	mul	r20,r20,r2
8110fae0:	94bfffcc 	andi	r18,r18,65535
8110fae4:	94e4b03a 	or	r18,r18,r19
8110fae8:	9500052e 	bgeu	r18,r20,8110fb00 <__udivdi3+0x12c>
8110faec:	8ca5883a 	add	r18,r17,r18
8110faf0:	10ffffc4 	addi	r3,r2,-1
8110faf4:	9440f136 	bltu	r18,r17,8110febc <__udivdi3+0x4e8>
8110faf8:	9500f02e 	bgeu	r18,r20,8110febc <__udivdi3+0x4e8>
8110fafc:	10bfff84 	addi	r2,r2,-2
8110fb00:	b00c943a 	slli	r6,r22,16
8110fb04:	0007883a 	mov	r3,zero
8110fb08:	3084b03a 	or	r2,r6,r2
8110fb0c:	00005906 	br	8110fc74 <__udivdi3+0x2a0>
8110fb10:	29c05636 	bltu	r5,r7,8110fc6c <__udivdi3+0x298>
8110fb14:	00bfffd4 	movui	r2,65535
8110fb18:	11c0622e 	bgeu	r2,r7,8110fca4 <__udivdi3+0x2d0>
8110fb1c:	00804034 	movhi	r2,256
8110fb20:	10bfffc4 	addi	r2,r2,-1
8110fb24:	11c0ee36 	bltu	r2,r7,8110fee0 <__udivdi3+0x50c>
8110fb28:	00800404 	movi	r2,16
8110fb2c:	3886d83a 	srl	r3,r7,r2
8110fb30:	012044b4 	movhi	r4,33042
8110fb34:	2125b384 	addi	r4,r4,-26930
8110fb38:	20c7883a 	add	r3,r4,r3
8110fb3c:	18c00003 	ldbu	r3,0(r3)
8110fb40:	05400804 	movi	r21,32
8110fb44:	1885883a 	add	r2,r3,r2
8110fb48:	a8abc83a 	sub	r21,r21,r2
8110fb4c:	a800621e 	bne	r21,zero,8110fcd8 <__udivdi3+0x304>
8110fb50:	3c00e936 	bltu	r7,r16,8110fef8 <__udivdi3+0x524>
8110fb54:	9985403a 	cmpgeu	r2,r19,r6
8110fb58:	0007883a 	mov	r3,zero
8110fb5c:	00004506 	br	8110fc74 <__udivdi3+0x2a0>
8110fb60:	3000041e 	bne	r6,zero,8110fb74 <__udivdi3+0x1a0>
8110fb64:	000b883a 	mov	r5,zero
8110fb68:	01000044 	movi	r4,1
8110fb6c:	111057c0 	call	8111057c <__udivsi3>
8110fb70:	1023883a 	mov	r17,r2
8110fb74:	00bfffd4 	movui	r2,65535
8110fb78:	14404e2e 	bgeu	r2,r17,8110fcb4 <__udivdi3+0x2e0>
8110fb7c:	00804034 	movhi	r2,256
8110fb80:	10bfffc4 	addi	r2,r2,-1
8110fb84:	1440d836 	bltu	r2,r17,8110fee8 <__udivdi3+0x514>
8110fb88:	00800404 	movi	r2,16
8110fb8c:	8886d83a 	srl	r3,r17,r2
8110fb90:	012044b4 	movhi	r4,33042
8110fb94:	2125b384 	addi	r4,r4,-26930
8110fb98:	20c7883a 	add	r3,r4,r3
8110fb9c:	18c00003 	ldbu	r3,0(r3)
8110fba0:	1885883a 	add	r2,r3,r2
8110fba4:	00c00804 	movi	r3,32
8110fba8:	1887c83a 	sub	r3,r3,r2
8110fbac:	18008f1e 	bne	r3,zero,8110fdec <__udivdi3+0x418>
8110fbb0:	882ad43a 	srli	r21,r17,16
8110fbb4:	8461c83a 	sub	r16,r16,r17
8110fbb8:	8d3fffcc 	andi	r20,r17,65535
8110fbbc:	00c00044 	movi	r3,1
8110fbc0:	8009883a 	mov	r4,r16
8110fbc4:	a80b883a 	mov	r5,r21
8110fbc8:	d8c00015 	stw	r3,0(sp)
8110fbcc:	11105e00 	call	811105e0 <__umodsi3>
8110fbd0:	8009883a 	mov	r4,r16
8110fbd4:	a80b883a 	mov	r5,r21
8110fbd8:	1027883a 	mov	r19,r2
8110fbdc:	111057c0 	call	8111057c <__udivsi3>
8110fbe0:	9826943a 	slli	r19,r19,16
8110fbe4:	9008d43a 	srli	r4,r18,16
8110fbe8:	1521383a 	mul	r16,r2,r20
8110fbec:	102d883a 	mov	r22,r2
8110fbf0:	24c8b03a 	or	r4,r4,r19
8110fbf4:	d8c00017 	ldw	r3,0(sp)
8110fbf8:	2400052e 	bgeu	r4,r16,8110fc10 <__udivdi3+0x23c>
8110fbfc:	2449883a 	add	r4,r4,r17
8110fc00:	b0bfffc4 	addi	r2,r22,-1
8110fc04:	24400136 	bltu	r4,r17,8110fc0c <__udivdi3+0x238>
8110fc08:	2400ca36 	bltu	r4,r16,8110ff34 <__udivdi3+0x560>
8110fc0c:	102d883a 	mov	r22,r2
8110fc10:	2421c83a 	sub	r16,r4,r16
8110fc14:	a80b883a 	mov	r5,r21
8110fc18:	8009883a 	mov	r4,r16
8110fc1c:	d8c00015 	stw	r3,0(sp)
8110fc20:	11105e00 	call	811105e0 <__umodsi3>
8110fc24:	1027883a 	mov	r19,r2
8110fc28:	a80b883a 	mov	r5,r21
8110fc2c:	8009883a 	mov	r4,r16
8110fc30:	111057c0 	call	8111057c <__udivsi3>
8110fc34:	9826943a 	slli	r19,r19,16
8110fc38:	1529383a 	mul	r20,r2,r20
8110fc3c:	94bfffcc 	andi	r18,r18,65535
8110fc40:	94e4b03a 	or	r18,r18,r19
8110fc44:	d8c00017 	ldw	r3,0(sp)
8110fc48:	9500052e 	bgeu	r18,r20,8110fc60 <__udivdi3+0x28c>
8110fc4c:	8ca5883a 	add	r18,r17,r18
8110fc50:	113fffc4 	addi	r4,r2,-1
8110fc54:	94409736 	bltu	r18,r17,8110feb4 <__udivdi3+0x4e0>
8110fc58:	9500962e 	bgeu	r18,r20,8110feb4 <__udivdi3+0x4e0>
8110fc5c:	10bfff84 	addi	r2,r2,-2
8110fc60:	b00c943a 	slli	r6,r22,16
8110fc64:	3084b03a 	or	r2,r6,r2
8110fc68:	00000206 	br	8110fc74 <__udivdi3+0x2a0>
8110fc6c:	0007883a 	mov	r3,zero
8110fc70:	0005883a 	mov	r2,zero
8110fc74:	dfc00a17 	ldw	ra,40(sp)
8110fc78:	df000917 	ldw	fp,36(sp)
8110fc7c:	ddc00817 	ldw	r23,32(sp)
8110fc80:	dd800717 	ldw	r22,28(sp)
8110fc84:	dd400617 	ldw	r21,24(sp)
8110fc88:	dd000517 	ldw	r20,20(sp)
8110fc8c:	dcc00417 	ldw	r19,16(sp)
8110fc90:	dc800317 	ldw	r18,12(sp)
8110fc94:	dc400217 	ldw	r17,8(sp)
8110fc98:	dc000117 	ldw	r16,4(sp)
8110fc9c:	dec00b04 	addi	sp,sp,44
8110fca0:	f800283a 	ret
8110fca4:	00803fc4 	movi	r2,255
8110fca8:	11c5803a 	cmpltu	r2,r2,r7
8110fcac:	100490fa 	slli	r2,r2,3
8110fcb0:	003f9e06 	br	8110fb2c <__reset+0xfb0efb2c>
8110fcb4:	00803fc4 	movi	r2,255
8110fcb8:	1445803a 	cmpltu	r2,r2,r17
8110fcbc:	100490fa 	slli	r2,r2,3
8110fcc0:	003fb206 	br	8110fb8c <__reset+0xfb0efb8c>
8110fcc4:	00804034 	movhi	r2,256
8110fcc8:	10bfffc4 	addi	r2,r2,-1
8110fccc:	11808836 	bltu	r2,r6,8110fef0 <__udivdi3+0x51c>
8110fcd0:	00800404 	movi	r2,16
8110fcd4:	003f5606 	br	8110fa30 <__reset+0xfb0efa30>
8110fcd8:	30aed83a 	srl	r23,r6,r2
8110fcdc:	3d4e983a 	sll	r7,r7,r21
8110fce0:	80acd83a 	srl	r22,r16,r2
8110fce4:	9884d83a 	srl	r2,r19,r2
8110fce8:	3deeb03a 	or	r23,r7,r23
8110fcec:	b824d43a 	srli	r18,r23,16
8110fcf0:	8560983a 	sll	r16,r16,r21
8110fcf4:	b009883a 	mov	r4,r22
8110fcf8:	900b883a 	mov	r5,r18
8110fcfc:	3568983a 	sll	r20,r6,r21
8110fd00:	1420b03a 	or	r16,r2,r16
8110fd04:	11105e00 	call	811105e0 <__umodsi3>
8110fd08:	b009883a 	mov	r4,r22
8110fd0c:	900b883a 	mov	r5,r18
8110fd10:	1023883a 	mov	r17,r2
8110fd14:	111057c0 	call	8111057c <__udivsi3>
8110fd18:	8808943a 	slli	r4,r17,16
8110fd1c:	bf3fffcc 	andi	fp,r23,65535
8110fd20:	8006d43a 	srli	r3,r16,16
8110fd24:	e0a3383a 	mul	r17,fp,r2
8110fd28:	100d883a 	mov	r6,r2
8110fd2c:	1906b03a 	or	r3,r3,r4
8110fd30:	1c40042e 	bgeu	r3,r17,8110fd44 <__udivdi3+0x370>
8110fd34:	1dc7883a 	add	r3,r3,r23
8110fd38:	10bfffc4 	addi	r2,r2,-1
8110fd3c:	1dc0752e 	bgeu	r3,r23,8110ff14 <__udivdi3+0x540>
8110fd40:	100d883a 	mov	r6,r2
8110fd44:	1c63c83a 	sub	r17,r3,r17
8110fd48:	900b883a 	mov	r5,r18
8110fd4c:	8809883a 	mov	r4,r17
8110fd50:	d9800015 	stw	r6,0(sp)
8110fd54:	11105e00 	call	811105e0 <__umodsi3>
8110fd58:	102d883a 	mov	r22,r2
8110fd5c:	8809883a 	mov	r4,r17
8110fd60:	900b883a 	mov	r5,r18
8110fd64:	111057c0 	call	8111057c <__udivsi3>
8110fd68:	b02c943a 	slli	r22,r22,16
8110fd6c:	e089383a 	mul	r4,fp,r2
8110fd70:	843fffcc 	andi	r16,r16,65535
8110fd74:	85a0b03a 	or	r16,r16,r22
8110fd78:	d9800017 	ldw	r6,0(sp)
8110fd7c:	8100042e 	bgeu	r16,r4,8110fd90 <__udivdi3+0x3bc>
8110fd80:	85e1883a 	add	r16,r16,r23
8110fd84:	10ffffc4 	addi	r3,r2,-1
8110fd88:	85c05e2e 	bgeu	r16,r23,8110ff04 <__udivdi3+0x530>
8110fd8c:	1805883a 	mov	r2,r3
8110fd90:	300c943a 	slli	r6,r6,16
8110fd94:	a17fffcc 	andi	r5,r20,65535
8110fd98:	a028d43a 	srli	r20,r20,16
8110fd9c:	3084b03a 	or	r2,r6,r2
8110fda0:	10ffffcc 	andi	r3,r2,65535
8110fda4:	100cd43a 	srli	r6,r2,16
8110fda8:	194f383a 	mul	r7,r3,r5
8110fdac:	1d07383a 	mul	r3,r3,r20
8110fdb0:	314b383a 	mul	r5,r6,r5
8110fdb4:	3810d43a 	srli	r8,r7,16
8110fdb8:	8121c83a 	sub	r16,r16,r4
8110fdbc:	1947883a 	add	r3,r3,r5
8110fdc0:	40c7883a 	add	r3,r8,r3
8110fdc4:	350d383a 	mul	r6,r6,r20
8110fdc8:	1940022e 	bgeu	r3,r5,8110fdd4 <__udivdi3+0x400>
8110fdcc:	01000074 	movhi	r4,1
8110fdd0:	310d883a 	add	r6,r6,r4
8110fdd4:	1828d43a 	srli	r20,r3,16
8110fdd8:	a18d883a 	add	r6,r20,r6
8110fddc:	81803e36 	bltu	r16,r6,8110fed8 <__udivdi3+0x504>
8110fde0:	81803826 	beq	r16,r6,8110fec4 <__udivdi3+0x4f0>
8110fde4:	0007883a 	mov	r3,zero
8110fde8:	003fa206 	br	8110fc74 <__reset+0xfb0efc74>
8110fdec:	88e2983a 	sll	r17,r17,r3
8110fdf0:	80a8d83a 	srl	r20,r16,r2
8110fdf4:	80e0983a 	sll	r16,r16,r3
8110fdf8:	882ad43a 	srli	r21,r17,16
8110fdfc:	9884d83a 	srl	r2,r19,r2
8110fe00:	a009883a 	mov	r4,r20
8110fe04:	a80b883a 	mov	r5,r21
8110fe08:	142eb03a 	or	r23,r2,r16
8110fe0c:	98e4983a 	sll	r18,r19,r3
8110fe10:	11105e00 	call	811105e0 <__umodsi3>
8110fe14:	a009883a 	mov	r4,r20
8110fe18:	a80b883a 	mov	r5,r21
8110fe1c:	1021883a 	mov	r16,r2
8110fe20:	111057c0 	call	8111057c <__udivsi3>
8110fe24:	1039883a 	mov	fp,r2
8110fe28:	8d3fffcc 	andi	r20,r17,65535
8110fe2c:	8020943a 	slli	r16,r16,16
8110fe30:	b804d43a 	srli	r2,r23,16
8110fe34:	a72d383a 	mul	r22,r20,fp
8110fe38:	1404b03a 	or	r2,r2,r16
8110fe3c:	1580062e 	bgeu	r2,r22,8110fe58 <__udivdi3+0x484>
8110fe40:	1445883a 	add	r2,r2,r17
8110fe44:	e0ffffc4 	addi	r3,fp,-1
8110fe48:	14403836 	bltu	r2,r17,8110ff2c <__udivdi3+0x558>
8110fe4c:	1580372e 	bgeu	r2,r22,8110ff2c <__udivdi3+0x558>
8110fe50:	e73fff84 	addi	fp,fp,-2
8110fe54:	1445883a 	add	r2,r2,r17
8110fe58:	15adc83a 	sub	r22,r2,r22
8110fe5c:	a80b883a 	mov	r5,r21
8110fe60:	b009883a 	mov	r4,r22
8110fe64:	11105e00 	call	811105e0 <__umodsi3>
8110fe68:	1027883a 	mov	r19,r2
8110fe6c:	b009883a 	mov	r4,r22
8110fe70:	a80b883a 	mov	r5,r21
8110fe74:	111057c0 	call	8111057c <__udivsi3>
8110fe78:	9826943a 	slli	r19,r19,16
8110fe7c:	a0a1383a 	mul	r16,r20,r2
8110fe80:	b93fffcc 	andi	r4,r23,65535
8110fe84:	24c8b03a 	or	r4,r4,r19
8110fe88:	2400062e 	bgeu	r4,r16,8110fea4 <__udivdi3+0x4d0>
8110fe8c:	2449883a 	add	r4,r4,r17
8110fe90:	10ffffc4 	addi	r3,r2,-1
8110fe94:	24402336 	bltu	r4,r17,8110ff24 <__udivdi3+0x550>
8110fe98:	2400222e 	bgeu	r4,r16,8110ff24 <__udivdi3+0x550>
8110fe9c:	10bfff84 	addi	r2,r2,-2
8110fea0:	2449883a 	add	r4,r4,r17
8110fea4:	e038943a 	slli	fp,fp,16
8110fea8:	2421c83a 	sub	r16,r4,r16
8110feac:	e086b03a 	or	r3,fp,r2
8110feb0:	003f4306 	br	8110fbc0 <__reset+0xfb0efbc0>
8110feb4:	2005883a 	mov	r2,r4
8110feb8:	003f6906 	br	8110fc60 <__reset+0xfb0efc60>
8110febc:	1805883a 	mov	r2,r3
8110fec0:	003f0f06 	br	8110fb00 <__reset+0xfb0efb00>
8110fec4:	1806943a 	slli	r3,r3,16
8110fec8:	9d66983a 	sll	r19,r19,r21
8110fecc:	39ffffcc 	andi	r7,r7,65535
8110fed0:	19c7883a 	add	r3,r3,r7
8110fed4:	98ffc32e 	bgeu	r19,r3,8110fde4 <__reset+0xfb0efde4>
8110fed8:	10bfffc4 	addi	r2,r2,-1
8110fedc:	003fc106 	br	8110fde4 <__reset+0xfb0efde4>
8110fee0:	00800604 	movi	r2,24
8110fee4:	003f1106 	br	8110fb2c <__reset+0xfb0efb2c>
8110fee8:	00800604 	movi	r2,24
8110feec:	003f2706 	br	8110fb8c <__reset+0xfb0efb8c>
8110fef0:	00800604 	movi	r2,24
8110fef4:	003ece06 	br	8110fa30 <__reset+0xfb0efa30>
8110fef8:	0007883a 	mov	r3,zero
8110fefc:	00800044 	movi	r2,1
8110ff00:	003f5c06 	br	8110fc74 <__reset+0xfb0efc74>
8110ff04:	813fa12e 	bgeu	r16,r4,8110fd8c <__reset+0xfb0efd8c>
8110ff08:	10bfff84 	addi	r2,r2,-2
8110ff0c:	85e1883a 	add	r16,r16,r23
8110ff10:	003f9f06 	br	8110fd90 <__reset+0xfb0efd90>
8110ff14:	1c7f8a2e 	bgeu	r3,r17,8110fd40 <__reset+0xfb0efd40>
8110ff18:	31bfff84 	addi	r6,r6,-2
8110ff1c:	1dc7883a 	add	r3,r3,r23
8110ff20:	003f8806 	br	8110fd44 <__reset+0xfb0efd44>
8110ff24:	1805883a 	mov	r2,r3
8110ff28:	003fde06 	br	8110fea4 <__reset+0xfb0efea4>
8110ff2c:	1839883a 	mov	fp,r3
8110ff30:	003fc906 	br	8110fe58 <__reset+0xfb0efe58>
8110ff34:	b5bfff84 	addi	r22,r22,-2
8110ff38:	2449883a 	add	r4,r4,r17
8110ff3c:	003f3406 	br	8110fc10 <__reset+0xfb0efc10>
8110ff40:	b5bfff84 	addi	r22,r22,-2
8110ff44:	1445883a 	add	r2,r2,r17
8110ff48:	003edb06 	br	8110fab8 <__reset+0xfb0efab8>

8110ff4c <__umoddi3>:
8110ff4c:	defff404 	addi	sp,sp,-48
8110ff50:	df000a15 	stw	fp,40(sp)
8110ff54:	dc400315 	stw	r17,12(sp)
8110ff58:	dc000215 	stw	r16,8(sp)
8110ff5c:	dfc00b15 	stw	ra,44(sp)
8110ff60:	ddc00915 	stw	r23,36(sp)
8110ff64:	dd800815 	stw	r22,32(sp)
8110ff68:	dd400715 	stw	r21,28(sp)
8110ff6c:	dd000615 	stw	r20,24(sp)
8110ff70:	dcc00515 	stw	r19,20(sp)
8110ff74:	dc800415 	stw	r18,16(sp)
8110ff78:	2021883a 	mov	r16,r4
8110ff7c:	2823883a 	mov	r17,r5
8110ff80:	2839883a 	mov	fp,r5
8110ff84:	38003c1e 	bne	r7,zero,81110078 <__umoddi3+0x12c>
8110ff88:	3027883a 	mov	r19,r6
8110ff8c:	2029883a 	mov	r20,r4
8110ff90:	2980512e 	bgeu	r5,r6,811100d8 <__umoddi3+0x18c>
8110ff94:	00bfffd4 	movui	r2,65535
8110ff98:	11809a36 	bltu	r2,r6,81110204 <__umoddi3+0x2b8>
8110ff9c:	01003fc4 	movi	r4,255
8110ffa0:	2189803a 	cmpltu	r4,r4,r6
8110ffa4:	200890fa 	slli	r4,r4,3
8110ffa8:	3104d83a 	srl	r2,r6,r4
8110ffac:	00e044b4 	movhi	r3,33042
8110ffb0:	18e5b384 	addi	r3,r3,-26930
8110ffb4:	1885883a 	add	r2,r3,r2
8110ffb8:	10c00003 	ldbu	r3,0(r2)
8110ffbc:	00800804 	movi	r2,32
8110ffc0:	1909883a 	add	r4,r3,r4
8110ffc4:	1125c83a 	sub	r18,r2,r4
8110ffc8:	90000526 	beq	r18,zero,8110ffe0 <__umoddi3+0x94>
8110ffcc:	8ca2983a 	sll	r17,r17,r18
8110ffd0:	8108d83a 	srl	r4,r16,r4
8110ffd4:	34a6983a 	sll	r19,r6,r18
8110ffd8:	84a8983a 	sll	r20,r16,r18
8110ffdc:	2478b03a 	or	fp,r4,r17
8110ffe0:	982ed43a 	srli	r23,r19,16
8110ffe4:	e009883a 	mov	r4,fp
8110ffe8:	9dbfffcc 	andi	r22,r19,65535
8110ffec:	b80b883a 	mov	r5,r23
8110fff0:	11105e00 	call	811105e0 <__umodsi3>
8110fff4:	e009883a 	mov	r4,fp
8110fff8:	b80b883a 	mov	r5,r23
8110fffc:	102b883a 	mov	r21,r2
81110000:	111057c0 	call	8111057c <__udivsi3>
81110004:	a806943a 	slli	r3,r21,16
81110008:	a008d43a 	srli	r4,r20,16
8111000c:	b085383a 	mul	r2,r22,r2
81110010:	20c8b03a 	or	r4,r4,r3
81110014:	2080032e 	bgeu	r4,r2,81110024 <__umoddi3+0xd8>
81110018:	24c9883a 	add	r4,r4,r19
8111001c:	24c00136 	bltu	r4,r19,81110024 <__umoddi3+0xd8>
81110020:	20811036 	bltu	r4,r2,81110464 <__umoddi3+0x518>
81110024:	20abc83a 	sub	r21,r4,r2
81110028:	b80b883a 	mov	r5,r23
8111002c:	a809883a 	mov	r4,r21
81110030:	11105e00 	call	811105e0 <__umodsi3>
81110034:	1023883a 	mov	r17,r2
81110038:	b80b883a 	mov	r5,r23
8111003c:	a809883a 	mov	r4,r21
81110040:	111057c0 	call	8111057c <__udivsi3>
81110044:	8822943a 	slli	r17,r17,16
81110048:	b085383a 	mul	r2,r22,r2
8111004c:	a0ffffcc 	andi	r3,r20,65535
81110050:	1c46b03a 	or	r3,r3,r17
81110054:	1880042e 	bgeu	r3,r2,81110068 <__umoddi3+0x11c>
81110058:	1cc7883a 	add	r3,r3,r19
8111005c:	1cc00236 	bltu	r3,r19,81110068 <__umoddi3+0x11c>
81110060:	1880012e 	bgeu	r3,r2,81110068 <__umoddi3+0x11c>
81110064:	1cc7883a 	add	r3,r3,r19
81110068:	1885c83a 	sub	r2,r3,r2
8111006c:	1484d83a 	srl	r2,r2,r18
81110070:	0007883a 	mov	r3,zero
81110074:	00004f06 	br	811101b4 <__umoddi3+0x268>
81110078:	29c04c36 	bltu	r5,r7,811101ac <__umoddi3+0x260>
8111007c:	00bfffd4 	movui	r2,65535
81110080:	11c0582e 	bgeu	r2,r7,811101e4 <__umoddi3+0x298>
81110084:	00804034 	movhi	r2,256
81110088:	10bfffc4 	addi	r2,r2,-1
8111008c:	11c0e736 	bltu	r2,r7,8111042c <__umoddi3+0x4e0>
81110090:	01000404 	movi	r4,16
81110094:	3904d83a 	srl	r2,r7,r4
81110098:	00e044b4 	movhi	r3,33042
8111009c:	18e5b384 	addi	r3,r3,-26930
811100a0:	1885883a 	add	r2,r3,r2
811100a4:	14c00003 	ldbu	r19,0(r2)
811100a8:	00c00804 	movi	r3,32
811100ac:	9927883a 	add	r19,r19,r4
811100b0:	1ce9c83a 	sub	r20,r3,r19
811100b4:	a000581e 	bne	r20,zero,81110218 <__umoddi3+0x2cc>
811100b8:	3c400136 	bltu	r7,r17,811100c0 <__umoddi3+0x174>
811100bc:	8180eb36 	bltu	r16,r6,8111046c <__umoddi3+0x520>
811100c0:	8185c83a 	sub	r2,r16,r6
811100c4:	89e3c83a 	sub	r17,r17,r7
811100c8:	8089803a 	cmpltu	r4,r16,r2
811100cc:	8939c83a 	sub	fp,r17,r4
811100d0:	e007883a 	mov	r3,fp
811100d4:	00003706 	br	811101b4 <__umoddi3+0x268>
811100d8:	3000041e 	bne	r6,zero,811100ec <__umoddi3+0x1a0>
811100dc:	000b883a 	mov	r5,zero
811100e0:	01000044 	movi	r4,1
811100e4:	111057c0 	call	8111057c <__udivsi3>
811100e8:	1027883a 	mov	r19,r2
811100ec:	00bfffd4 	movui	r2,65535
811100f0:	14c0402e 	bgeu	r2,r19,811101f4 <__umoddi3+0x2a8>
811100f4:	00804034 	movhi	r2,256
811100f8:	10bfffc4 	addi	r2,r2,-1
811100fc:	14c0cd36 	bltu	r2,r19,81110434 <__umoddi3+0x4e8>
81110100:	00800404 	movi	r2,16
81110104:	9886d83a 	srl	r3,r19,r2
81110108:	012044b4 	movhi	r4,33042
8111010c:	2125b384 	addi	r4,r4,-26930
81110110:	20c7883a 	add	r3,r4,r3
81110114:	18c00003 	ldbu	r3,0(r3)
81110118:	1887883a 	add	r3,r3,r2
8111011c:	00800804 	movi	r2,32
81110120:	10e5c83a 	sub	r18,r2,r3
81110124:	9000901e 	bne	r18,zero,81110368 <__umoddi3+0x41c>
81110128:	982cd43a 	srli	r22,r19,16
8111012c:	8ce3c83a 	sub	r17,r17,r19
81110130:	9d7fffcc 	andi	r21,r19,65535
81110134:	b00b883a 	mov	r5,r22
81110138:	8809883a 	mov	r4,r17
8111013c:	11105e00 	call	811105e0 <__umodsi3>
81110140:	8809883a 	mov	r4,r17
81110144:	b00b883a 	mov	r5,r22
81110148:	1021883a 	mov	r16,r2
8111014c:	111057c0 	call	8111057c <__udivsi3>
81110150:	8006943a 	slli	r3,r16,16
81110154:	a008d43a 	srli	r4,r20,16
81110158:	1545383a 	mul	r2,r2,r21
8111015c:	20c8b03a 	or	r4,r4,r3
81110160:	2080042e 	bgeu	r4,r2,81110174 <__umoddi3+0x228>
81110164:	24c9883a 	add	r4,r4,r19
81110168:	24c00236 	bltu	r4,r19,81110174 <__umoddi3+0x228>
8111016c:	2080012e 	bgeu	r4,r2,81110174 <__umoddi3+0x228>
81110170:	24c9883a 	add	r4,r4,r19
81110174:	20a1c83a 	sub	r16,r4,r2
81110178:	b00b883a 	mov	r5,r22
8111017c:	8009883a 	mov	r4,r16
81110180:	11105e00 	call	811105e0 <__umodsi3>
81110184:	1023883a 	mov	r17,r2
81110188:	b00b883a 	mov	r5,r22
8111018c:	8009883a 	mov	r4,r16
81110190:	111057c0 	call	8111057c <__udivsi3>
81110194:	8822943a 	slli	r17,r17,16
81110198:	1545383a 	mul	r2,r2,r21
8111019c:	a53fffcc 	andi	r20,r20,65535
811101a0:	a446b03a 	or	r3,r20,r17
811101a4:	18bfb02e 	bgeu	r3,r2,81110068 <__reset+0xfb0f0068>
811101a8:	003fab06 	br	81110058 <__reset+0xfb0f0058>
811101ac:	2005883a 	mov	r2,r4
811101b0:	2807883a 	mov	r3,r5
811101b4:	dfc00b17 	ldw	ra,44(sp)
811101b8:	df000a17 	ldw	fp,40(sp)
811101bc:	ddc00917 	ldw	r23,36(sp)
811101c0:	dd800817 	ldw	r22,32(sp)
811101c4:	dd400717 	ldw	r21,28(sp)
811101c8:	dd000617 	ldw	r20,24(sp)
811101cc:	dcc00517 	ldw	r19,20(sp)
811101d0:	dc800417 	ldw	r18,16(sp)
811101d4:	dc400317 	ldw	r17,12(sp)
811101d8:	dc000217 	ldw	r16,8(sp)
811101dc:	dec00c04 	addi	sp,sp,48
811101e0:	f800283a 	ret
811101e4:	04c03fc4 	movi	r19,255
811101e8:	99c9803a 	cmpltu	r4,r19,r7
811101ec:	200890fa 	slli	r4,r4,3
811101f0:	003fa806 	br	81110094 <__reset+0xfb0f0094>
811101f4:	00803fc4 	movi	r2,255
811101f8:	14c5803a 	cmpltu	r2,r2,r19
811101fc:	100490fa 	slli	r2,r2,3
81110200:	003fc006 	br	81110104 <__reset+0xfb0f0104>
81110204:	00804034 	movhi	r2,256
81110208:	10bfffc4 	addi	r2,r2,-1
8111020c:	11808b36 	bltu	r2,r6,8111043c <__umoddi3+0x4f0>
81110210:	01000404 	movi	r4,16
81110214:	003f6406 	br	8110ffa8 <__reset+0xfb0effa8>
81110218:	34c4d83a 	srl	r2,r6,r19
8111021c:	3d0e983a 	sll	r7,r7,r20
81110220:	8cf8d83a 	srl	fp,r17,r19
81110224:	8d10983a 	sll	r8,r17,r20
81110228:	38aab03a 	or	r21,r7,r2
8111022c:	a82cd43a 	srli	r22,r21,16
81110230:	84e2d83a 	srl	r17,r16,r19
81110234:	e009883a 	mov	r4,fp
81110238:	b00b883a 	mov	r5,r22
8111023c:	8a22b03a 	or	r17,r17,r8
81110240:	3524983a 	sll	r18,r6,r20
81110244:	11105e00 	call	811105e0 <__umodsi3>
81110248:	e009883a 	mov	r4,fp
8111024c:	b00b883a 	mov	r5,r22
81110250:	102f883a 	mov	r23,r2
81110254:	111057c0 	call	8111057c <__udivsi3>
81110258:	100d883a 	mov	r6,r2
8111025c:	b808943a 	slli	r4,r23,16
81110260:	aa3fffcc 	andi	r8,r21,65535
81110264:	8804d43a 	srli	r2,r17,16
81110268:	41af383a 	mul	r23,r8,r6
8111026c:	8520983a 	sll	r16,r16,r20
81110270:	1104b03a 	or	r2,r2,r4
81110274:	15c0042e 	bgeu	r2,r23,81110288 <__umoddi3+0x33c>
81110278:	1545883a 	add	r2,r2,r21
8111027c:	30ffffc4 	addi	r3,r6,-1
81110280:	1540742e 	bgeu	r2,r21,81110454 <__umoddi3+0x508>
81110284:	180d883a 	mov	r6,r3
81110288:	15efc83a 	sub	r23,r2,r23
8111028c:	b00b883a 	mov	r5,r22
81110290:	b809883a 	mov	r4,r23
81110294:	d9800115 	stw	r6,4(sp)
81110298:	da000015 	stw	r8,0(sp)
8111029c:	11105e00 	call	811105e0 <__umodsi3>
811102a0:	b00b883a 	mov	r5,r22
811102a4:	b809883a 	mov	r4,r23
811102a8:	1039883a 	mov	fp,r2
811102ac:	111057c0 	call	8111057c <__udivsi3>
811102b0:	da000017 	ldw	r8,0(sp)
811102b4:	e038943a 	slli	fp,fp,16
811102b8:	100b883a 	mov	r5,r2
811102bc:	4089383a 	mul	r4,r8,r2
811102c0:	8a3fffcc 	andi	r8,r17,65535
811102c4:	4710b03a 	or	r8,r8,fp
811102c8:	d9800117 	ldw	r6,4(sp)
811102cc:	4100042e 	bgeu	r8,r4,811102e0 <__umoddi3+0x394>
811102d0:	4551883a 	add	r8,r8,r21
811102d4:	10bfffc4 	addi	r2,r2,-1
811102d8:	45405a2e 	bgeu	r8,r21,81110444 <__umoddi3+0x4f8>
811102dc:	100b883a 	mov	r5,r2
811102e0:	300c943a 	slli	r6,r6,16
811102e4:	91ffffcc 	andi	r7,r18,65535
811102e8:	9004d43a 	srli	r2,r18,16
811102ec:	314cb03a 	or	r6,r6,r5
811102f0:	317fffcc 	andi	r5,r6,65535
811102f4:	300cd43a 	srli	r6,r6,16
811102f8:	29d3383a 	mul	r9,r5,r7
811102fc:	288b383a 	mul	r5,r5,r2
81110300:	31cf383a 	mul	r7,r6,r7
81110304:	4806d43a 	srli	r3,r9,16
81110308:	4111c83a 	sub	r8,r8,r4
8111030c:	29cb883a 	add	r5,r5,r7
81110310:	194b883a 	add	r5,r3,r5
81110314:	3085383a 	mul	r2,r6,r2
81110318:	29c0022e 	bgeu	r5,r7,81110324 <__umoddi3+0x3d8>
8111031c:	00c00074 	movhi	r3,1
81110320:	10c5883a 	add	r2,r2,r3
81110324:	2808d43a 	srli	r4,r5,16
81110328:	280a943a 	slli	r5,r5,16
8111032c:	4a7fffcc 	andi	r9,r9,65535
81110330:	2085883a 	add	r2,r4,r2
81110334:	2a4b883a 	add	r5,r5,r9
81110338:	40803636 	bltu	r8,r2,81110414 <__umoddi3+0x4c8>
8111033c:	40804d26 	beq	r8,r2,81110474 <__umoddi3+0x528>
81110340:	4089c83a 	sub	r4,r8,r2
81110344:	280f883a 	mov	r7,r5
81110348:	81cfc83a 	sub	r7,r16,r7
8111034c:	81c7803a 	cmpltu	r3,r16,r7
81110350:	20c7c83a 	sub	r3,r4,r3
81110354:	1cc4983a 	sll	r2,r3,r19
81110358:	3d0ed83a 	srl	r7,r7,r20
8111035c:	1d06d83a 	srl	r3,r3,r20
81110360:	11c4b03a 	or	r2,r2,r7
81110364:	003f9306 	br	811101b4 <__reset+0xfb0f01b4>
81110368:	9ca6983a 	sll	r19,r19,r18
8111036c:	88e8d83a 	srl	r20,r17,r3
81110370:	80c4d83a 	srl	r2,r16,r3
81110374:	982cd43a 	srli	r22,r19,16
81110378:	8ca2983a 	sll	r17,r17,r18
8111037c:	a009883a 	mov	r4,r20
81110380:	b00b883a 	mov	r5,r22
81110384:	1478b03a 	or	fp,r2,r17
81110388:	11105e00 	call	811105e0 <__umodsi3>
8111038c:	a009883a 	mov	r4,r20
81110390:	b00b883a 	mov	r5,r22
81110394:	1023883a 	mov	r17,r2
81110398:	111057c0 	call	8111057c <__udivsi3>
8111039c:	9d7fffcc 	andi	r21,r19,65535
811103a0:	880a943a 	slli	r5,r17,16
811103a4:	e008d43a 	srli	r4,fp,16
811103a8:	a885383a 	mul	r2,r21,r2
811103ac:	84a8983a 	sll	r20,r16,r18
811103b0:	2148b03a 	or	r4,r4,r5
811103b4:	2080042e 	bgeu	r4,r2,811103c8 <__umoddi3+0x47c>
811103b8:	24c9883a 	add	r4,r4,r19
811103bc:	24c00236 	bltu	r4,r19,811103c8 <__umoddi3+0x47c>
811103c0:	2080012e 	bgeu	r4,r2,811103c8 <__umoddi3+0x47c>
811103c4:	24c9883a 	add	r4,r4,r19
811103c8:	20a3c83a 	sub	r17,r4,r2
811103cc:	b00b883a 	mov	r5,r22
811103d0:	8809883a 	mov	r4,r17
811103d4:	11105e00 	call	811105e0 <__umodsi3>
811103d8:	102f883a 	mov	r23,r2
811103dc:	8809883a 	mov	r4,r17
811103e0:	b00b883a 	mov	r5,r22
811103e4:	111057c0 	call	8111057c <__udivsi3>
811103e8:	b82e943a 	slli	r23,r23,16
811103ec:	a885383a 	mul	r2,r21,r2
811103f0:	e13fffcc 	andi	r4,fp,65535
811103f4:	25c8b03a 	or	r4,r4,r23
811103f8:	2080042e 	bgeu	r4,r2,8111040c <__umoddi3+0x4c0>
811103fc:	24c9883a 	add	r4,r4,r19
81110400:	24c00236 	bltu	r4,r19,8111040c <__umoddi3+0x4c0>
81110404:	2080012e 	bgeu	r4,r2,8111040c <__umoddi3+0x4c0>
81110408:	24c9883a 	add	r4,r4,r19
8111040c:	20a3c83a 	sub	r17,r4,r2
81110410:	003f4806 	br	81110134 <__reset+0xfb0f0134>
81110414:	2c8fc83a 	sub	r7,r5,r18
81110418:	1545c83a 	sub	r2,r2,r21
8111041c:	29cb803a 	cmpltu	r5,r5,r7
81110420:	1145c83a 	sub	r2,r2,r5
81110424:	4089c83a 	sub	r4,r8,r2
81110428:	003fc706 	br	81110348 <__reset+0xfb0f0348>
8111042c:	01000604 	movi	r4,24
81110430:	003f1806 	br	81110094 <__reset+0xfb0f0094>
81110434:	00800604 	movi	r2,24
81110438:	003f3206 	br	81110104 <__reset+0xfb0f0104>
8111043c:	01000604 	movi	r4,24
81110440:	003ed906 	br	8110ffa8 <__reset+0xfb0effa8>
81110444:	413fa52e 	bgeu	r8,r4,811102dc <__reset+0xfb0f02dc>
81110448:	297fff84 	addi	r5,r5,-2
8111044c:	4551883a 	add	r8,r8,r21
81110450:	003fa306 	br	811102e0 <__reset+0xfb0f02e0>
81110454:	15ff8b2e 	bgeu	r2,r23,81110284 <__reset+0xfb0f0284>
81110458:	31bfff84 	addi	r6,r6,-2
8111045c:	1545883a 	add	r2,r2,r21
81110460:	003f8906 	br	81110288 <__reset+0xfb0f0288>
81110464:	24c9883a 	add	r4,r4,r19
81110468:	003eee06 	br	81110024 <__reset+0xfb0f0024>
8111046c:	8005883a 	mov	r2,r16
81110470:	003f1706 	br	811100d0 <__reset+0xfb0f00d0>
81110474:	817fe736 	bltu	r16,r5,81110414 <__reset+0xfb0f0414>
81110478:	280f883a 	mov	r7,r5
8111047c:	0009883a 	mov	r4,zero
81110480:	003fb106 	br	81110348 <__reset+0xfb0f0348>

81110484 <__divsi3>:
81110484:	20001b16 	blt	r4,zero,811104f4 <__divsi3+0x70>
81110488:	000f883a 	mov	r7,zero
8111048c:	28001616 	blt	r5,zero,811104e8 <__divsi3+0x64>
81110490:	200d883a 	mov	r6,r4
81110494:	29001a2e 	bgeu	r5,r4,81110500 <__divsi3+0x7c>
81110498:	00800804 	movi	r2,32
8111049c:	00c00044 	movi	r3,1
811104a0:	00000106 	br	811104a8 <__divsi3+0x24>
811104a4:	10000d26 	beq	r2,zero,811104dc <__divsi3+0x58>
811104a8:	294b883a 	add	r5,r5,r5
811104ac:	10bfffc4 	addi	r2,r2,-1
811104b0:	18c7883a 	add	r3,r3,r3
811104b4:	293ffb36 	bltu	r5,r4,811104a4 <__reset+0xfb0f04a4>
811104b8:	0005883a 	mov	r2,zero
811104bc:	18000726 	beq	r3,zero,811104dc <__divsi3+0x58>
811104c0:	0005883a 	mov	r2,zero
811104c4:	31400236 	bltu	r6,r5,811104d0 <__divsi3+0x4c>
811104c8:	314dc83a 	sub	r6,r6,r5
811104cc:	10c4b03a 	or	r2,r2,r3
811104d0:	1806d07a 	srli	r3,r3,1
811104d4:	280ad07a 	srli	r5,r5,1
811104d8:	183ffa1e 	bne	r3,zero,811104c4 <__reset+0xfb0f04c4>
811104dc:	38000126 	beq	r7,zero,811104e4 <__divsi3+0x60>
811104e0:	0085c83a 	sub	r2,zero,r2
811104e4:	f800283a 	ret
811104e8:	014bc83a 	sub	r5,zero,r5
811104ec:	39c0005c 	xori	r7,r7,1
811104f0:	003fe706 	br	81110490 <__reset+0xfb0f0490>
811104f4:	0109c83a 	sub	r4,zero,r4
811104f8:	01c00044 	movi	r7,1
811104fc:	003fe306 	br	8111048c <__reset+0xfb0f048c>
81110500:	00c00044 	movi	r3,1
81110504:	003fee06 	br	811104c0 <__reset+0xfb0f04c0>

81110508 <__modsi3>:
81110508:	20001716 	blt	r4,zero,81110568 <__modsi3+0x60>
8111050c:	000f883a 	mov	r7,zero
81110510:	2005883a 	mov	r2,r4
81110514:	28001216 	blt	r5,zero,81110560 <__modsi3+0x58>
81110518:	2900162e 	bgeu	r5,r4,81110574 <__modsi3+0x6c>
8111051c:	01800804 	movi	r6,32
81110520:	00c00044 	movi	r3,1
81110524:	00000106 	br	8111052c <__modsi3+0x24>
81110528:	30000a26 	beq	r6,zero,81110554 <__modsi3+0x4c>
8111052c:	294b883a 	add	r5,r5,r5
81110530:	31bfffc4 	addi	r6,r6,-1
81110534:	18c7883a 	add	r3,r3,r3
81110538:	293ffb36 	bltu	r5,r4,81110528 <__reset+0xfb0f0528>
8111053c:	18000526 	beq	r3,zero,81110554 <__modsi3+0x4c>
81110540:	1806d07a 	srli	r3,r3,1
81110544:	11400136 	bltu	r2,r5,8111054c <__modsi3+0x44>
81110548:	1145c83a 	sub	r2,r2,r5
8111054c:	280ad07a 	srli	r5,r5,1
81110550:	183ffb1e 	bne	r3,zero,81110540 <__reset+0xfb0f0540>
81110554:	38000126 	beq	r7,zero,8111055c <__modsi3+0x54>
81110558:	0085c83a 	sub	r2,zero,r2
8111055c:	f800283a 	ret
81110560:	014bc83a 	sub	r5,zero,r5
81110564:	003fec06 	br	81110518 <__reset+0xfb0f0518>
81110568:	0109c83a 	sub	r4,zero,r4
8111056c:	01c00044 	movi	r7,1
81110570:	003fe706 	br	81110510 <__reset+0xfb0f0510>
81110574:	00c00044 	movi	r3,1
81110578:	003ff106 	br	81110540 <__reset+0xfb0f0540>

8111057c <__udivsi3>:
8111057c:	200d883a 	mov	r6,r4
81110580:	2900152e 	bgeu	r5,r4,811105d8 <__udivsi3+0x5c>
81110584:	28001416 	blt	r5,zero,811105d8 <__udivsi3+0x5c>
81110588:	00800804 	movi	r2,32
8111058c:	00c00044 	movi	r3,1
81110590:	00000206 	br	8111059c <__udivsi3+0x20>
81110594:	10000e26 	beq	r2,zero,811105d0 <__udivsi3+0x54>
81110598:	28000516 	blt	r5,zero,811105b0 <__udivsi3+0x34>
8111059c:	294b883a 	add	r5,r5,r5
811105a0:	10bfffc4 	addi	r2,r2,-1
811105a4:	18c7883a 	add	r3,r3,r3
811105a8:	293ffa36 	bltu	r5,r4,81110594 <__reset+0xfb0f0594>
811105ac:	18000826 	beq	r3,zero,811105d0 <__udivsi3+0x54>
811105b0:	0005883a 	mov	r2,zero
811105b4:	31400236 	bltu	r6,r5,811105c0 <__udivsi3+0x44>
811105b8:	314dc83a 	sub	r6,r6,r5
811105bc:	10c4b03a 	or	r2,r2,r3
811105c0:	1806d07a 	srli	r3,r3,1
811105c4:	280ad07a 	srli	r5,r5,1
811105c8:	183ffa1e 	bne	r3,zero,811105b4 <__reset+0xfb0f05b4>
811105cc:	f800283a 	ret
811105d0:	0005883a 	mov	r2,zero
811105d4:	f800283a 	ret
811105d8:	00c00044 	movi	r3,1
811105dc:	003ff406 	br	811105b0 <__reset+0xfb0f05b0>

811105e0 <__umodsi3>:
811105e0:	2005883a 	mov	r2,r4
811105e4:	2900122e 	bgeu	r5,r4,81110630 <__umodsi3+0x50>
811105e8:	28001116 	blt	r5,zero,81110630 <__umodsi3+0x50>
811105ec:	01800804 	movi	r6,32
811105f0:	00c00044 	movi	r3,1
811105f4:	00000206 	br	81110600 <__umodsi3+0x20>
811105f8:	30000c26 	beq	r6,zero,8111062c <__umodsi3+0x4c>
811105fc:	28000516 	blt	r5,zero,81110614 <__umodsi3+0x34>
81110600:	294b883a 	add	r5,r5,r5
81110604:	31bfffc4 	addi	r6,r6,-1
81110608:	18c7883a 	add	r3,r3,r3
8111060c:	293ffa36 	bltu	r5,r4,811105f8 <__reset+0xfb0f05f8>
81110610:	18000626 	beq	r3,zero,8111062c <__umodsi3+0x4c>
81110614:	1806d07a 	srli	r3,r3,1
81110618:	11400136 	bltu	r2,r5,81110620 <__umodsi3+0x40>
8111061c:	1145c83a 	sub	r2,r2,r5
81110620:	280ad07a 	srli	r5,r5,1
81110624:	183ffb1e 	bne	r3,zero,81110614 <__reset+0xfb0f0614>
81110628:	f800283a 	ret
8111062c:	f800283a 	ret
81110630:	00c00044 	movi	r3,1
81110634:	003ff706 	br	81110614 <__reset+0xfb0f0614>

81110638 <__adddf3>:
81110638:	02c00434 	movhi	r11,16
8111063c:	5affffc4 	addi	r11,r11,-1
81110640:	2806d7fa 	srli	r3,r5,31
81110644:	2ad4703a 	and	r10,r5,r11
81110648:	3ad2703a 	and	r9,r7,r11
8111064c:	3804d53a 	srli	r2,r7,20
81110650:	3018d77a 	srli	r12,r6,29
81110654:	280ad53a 	srli	r5,r5,20
81110658:	501490fa 	slli	r10,r10,3
8111065c:	2010d77a 	srli	r8,r4,29
81110660:	481290fa 	slli	r9,r9,3
81110664:	380ed7fa 	srli	r7,r7,31
81110668:	defffb04 	addi	sp,sp,-20
8111066c:	dc800215 	stw	r18,8(sp)
81110670:	dc400115 	stw	r17,4(sp)
81110674:	dc000015 	stw	r16,0(sp)
81110678:	dfc00415 	stw	ra,16(sp)
8111067c:	dcc00315 	stw	r19,12(sp)
81110680:	1c803fcc 	andi	r18,r3,255
81110684:	2c01ffcc 	andi	r16,r5,2047
81110688:	5210b03a 	or	r8,r10,r8
8111068c:	202290fa 	slli	r17,r4,3
81110690:	1081ffcc 	andi	r2,r2,2047
81110694:	4b12b03a 	or	r9,r9,r12
81110698:	300c90fa 	slli	r6,r6,3
8111069c:	91c07526 	beq	r18,r7,81110874 <__adddf3+0x23c>
811106a0:	8087c83a 	sub	r3,r16,r2
811106a4:	00c0ab0e 	bge	zero,r3,81110954 <__adddf3+0x31c>
811106a8:	10002a1e 	bne	r2,zero,81110754 <__adddf3+0x11c>
811106ac:	4984b03a 	or	r2,r9,r6
811106b0:	1000961e 	bne	r2,zero,8111090c <__adddf3+0x2d4>
811106b4:	888001cc 	andi	r2,r17,7
811106b8:	10000726 	beq	r2,zero,811106d8 <__adddf3+0xa0>
811106bc:	888003cc 	andi	r2,r17,15
811106c0:	00c00104 	movi	r3,4
811106c4:	10c00426 	beq	r2,r3,811106d8 <__adddf3+0xa0>
811106c8:	88c7883a 	add	r3,r17,r3
811106cc:	1c63803a 	cmpltu	r17,r3,r17
811106d0:	4451883a 	add	r8,r8,r17
811106d4:	1823883a 	mov	r17,r3
811106d8:	4080202c 	andhi	r2,r8,128
811106dc:	10005926 	beq	r2,zero,81110844 <__adddf3+0x20c>
811106e0:	84000044 	addi	r16,r16,1
811106e4:	0081ffc4 	movi	r2,2047
811106e8:	8080ba26 	beq	r16,r2,811109d4 <__adddf3+0x39c>
811106ec:	00bfe034 	movhi	r2,65408
811106f0:	10bfffc4 	addi	r2,r2,-1
811106f4:	4090703a 	and	r8,r8,r2
811106f8:	4004977a 	slli	r2,r8,29
811106fc:	4010927a 	slli	r8,r8,9
81110700:	8822d0fa 	srli	r17,r17,3
81110704:	8401ffcc 	andi	r16,r16,2047
81110708:	4010d33a 	srli	r8,r8,12
8111070c:	9007883a 	mov	r3,r18
81110710:	1444b03a 	or	r2,r2,r17
81110714:	8401ffcc 	andi	r16,r16,2047
81110718:	8020953a 	slli	r16,r16,20
8111071c:	18c03fcc 	andi	r3,r3,255
81110720:	01000434 	movhi	r4,16
81110724:	213fffc4 	addi	r4,r4,-1
81110728:	180697fa 	slli	r3,r3,31
8111072c:	4110703a 	and	r8,r8,r4
81110730:	4410b03a 	or	r8,r8,r16
81110734:	40c6b03a 	or	r3,r8,r3
81110738:	dfc00417 	ldw	ra,16(sp)
8111073c:	dcc00317 	ldw	r19,12(sp)
81110740:	dc800217 	ldw	r18,8(sp)
81110744:	dc400117 	ldw	r17,4(sp)
81110748:	dc000017 	ldw	r16,0(sp)
8111074c:	dec00504 	addi	sp,sp,20
81110750:	f800283a 	ret
81110754:	0081ffc4 	movi	r2,2047
81110758:	80bfd626 	beq	r16,r2,811106b4 <__reset+0xfb0f06b4>
8111075c:	4a402034 	orhi	r9,r9,128
81110760:	00800e04 	movi	r2,56
81110764:	10c09f16 	blt	r2,r3,811109e4 <__adddf3+0x3ac>
81110768:	008007c4 	movi	r2,31
8111076c:	10c0c216 	blt	r2,r3,81110a78 <__adddf3+0x440>
81110770:	00800804 	movi	r2,32
81110774:	10c5c83a 	sub	r2,r2,r3
81110778:	488a983a 	sll	r5,r9,r2
8111077c:	30c8d83a 	srl	r4,r6,r3
81110780:	3084983a 	sll	r2,r6,r2
81110784:	48c6d83a 	srl	r3,r9,r3
81110788:	290cb03a 	or	r6,r5,r4
8111078c:	1004c03a 	cmpne	r2,r2,zero
81110790:	308cb03a 	or	r6,r6,r2
81110794:	898dc83a 	sub	r6,r17,r6
81110798:	89a3803a 	cmpltu	r17,r17,r6
8111079c:	40d1c83a 	sub	r8,r8,r3
811107a0:	4451c83a 	sub	r8,r8,r17
811107a4:	3023883a 	mov	r17,r6
811107a8:	4080202c 	andhi	r2,r8,128
811107ac:	10002326 	beq	r2,zero,8111083c <__adddf3+0x204>
811107b0:	04c02034 	movhi	r19,128
811107b4:	9cffffc4 	addi	r19,r19,-1
811107b8:	44e6703a 	and	r19,r8,r19
811107bc:	98007626 	beq	r19,zero,81110998 <__adddf3+0x360>
811107c0:	9809883a 	mov	r4,r19
811107c4:	1102aec0 	call	81102aec <__clzsi2>
811107c8:	10fffe04 	addi	r3,r2,-8
811107cc:	010007c4 	movi	r4,31
811107d0:	20c07716 	blt	r4,r3,811109b0 <__adddf3+0x378>
811107d4:	00800804 	movi	r2,32
811107d8:	10c5c83a 	sub	r2,r2,r3
811107dc:	8884d83a 	srl	r2,r17,r2
811107e0:	98d0983a 	sll	r8,r19,r3
811107e4:	88e2983a 	sll	r17,r17,r3
811107e8:	1204b03a 	or	r2,r2,r8
811107ec:	1c007416 	blt	r3,r16,811109c0 <__adddf3+0x388>
811107f0:	1c21c83a 	sub	r16,r3,r16
811107f4:	82000044 	addi	r8,r16,1
811107f8:	00c007c4 	movi	r3,31
811107fc:	1a009116 	blt	r3,r8,81110a44 <__adddf3+0x40c>
81110800:	00c00804 	movi	r3,32
81110804:	1a07c83a 	sub	r3,r3,r8
81110808:	8a08d83a 	srl	r4,r17,r8
8111080c:	88e2983a 	sll	r17,r17,r3
81110810:	10c6983a 	sll	r3,r2,r3
81110814:	1210d83a 	srl	r8,r2,r8
81110818:	8804c03a 	cmpne	r2,r17,zero
8111081c:	1906b03a 	or	r3,r3,r4
81110820:	18a2b03a 	or	r17,r3,r2
81110824:	0021883a 	mov	r16,zero
81110828:	003fa206 	br	811106b4 <__reset+0xfb0f06b4>
8111082c:	1890b03a 	or	r8,r3,r2
81110830:	40017d26 	beq	r8,zero,81110e28 <__adddf3+0x7f0>
81110834:	1011883a 	mov	r8,r2
81110838:	1823883a 	mov	r17,r3
8111083c:	888001cc 	andi	r2,r17,7
81110840:	103f9e1e 	bne	r2,zero,811106bc <__reset+0xfb0f06bc>
81110844:	4004977a 	slli	r2,r8,29
81110848:	8822d0fa 	srli	r17,r17,3
8111084c:	4010d0fa 	srli	r8,r8,3
81110850:	9007883a 	mov	r3,r18
81110854:	1444b03a 	or	r2,r2,r17
81110858:	0101ffc4 	movi	r4,2047
8111085c:	81002426 	beq	r16,r4,811108f0 <__adddf3+0x2b8>
81110860:	8120703a 	and	r16,r16,r4
81110864:	01000434 	movhi	r4,16
81110868:	213fffc4 	addi	r4,r4,-1
8111086c:	4110703a 	and	r8,r8,r4
81110870:	003fa806 	br	81110714 <__reset+0xfb0f0714>
81110874:	8089c83a 	sub	r4,r16,r2
81110878:	01005e0e 	bge	zero,r4,811109f4 <__adddf3+0x3bc>
8111087c:	10002b26 	beq	r2,zero,8111092c <__adddf3+0x2f4>
81110880:	0081ffc4 	movi	r2,2047
81110884:	80bf8b26 	beq	r16,r2,811106b4 <__reset+0xfb0f06b4>
81110888:	4a402034 	orhi	r9,r9,128
8111088c:	00800e04 	movi	r2,56
81110890:	1100a40e 	bge	r2,r4,81110b24 <__adddf3+0x4ec>
81110894:	498cb03a 	or	r6,r9,r6
81110898:	300ac03a 	cmpne	r5,r6,zero
8111089c:	0013883a 	mov	r9,zero
811108a0:	2c4b883a 	add	r5,r5,r17
811108a4:	2c63803a 	cmpltu	r17,r5,r17
811108a8:	4a11883a 	add	r8,r9,r8
811108ac:	8a11883a 	add	r8,r17,r8
811108b0:	2823883a 	mov	r17,r5
811108b4:	4080202c 	andhi	r2,r8,128
811108b8:	103fe026 	beq	r2,zero,8111083c <__reset+0xfb0f083c>
811108bc:	84000044 	addi	r16,r16,1
811108c0:	0081ffc4 	movi	r2,2047
811108c4:	8080d226 	beq	r16,r2,81110c10 <__adddf3+0x5d8>
811108c8:	00bfe034 	movhi	r2,65408
811108cc:	10bfffc4 	addi	r2,r2,-1
811108d0:	4090703a 	and	r8,r8,r2
811108d4:	880ad07a 	srli	r5,r17,1
811108d8:	400897fa 	slli	r4,r8,31
811108dc:	88c0004c 	andi	r3,r17,1
811108e0:	28e2b03a 	or	r17,r5,r3
811108e4:	4010d07a 	srli	r8,r8,1
811108e8:	2462b03a 	or	r17,r4,r17
811108ec:	003f7106 	br	811106b4 <__reset+0xfb0f06b4>
811108f0:	4088b03a 	or	r4,r8,r2
811108f4:	20014526 	beq	r4,zero,81110e0c <__adddf3+0x7d4>
811108f8:	01000434 	movhi	r4,16
811108fc:	42000234 	orhi	r8,r8,8
81110900:	213fffc4 	addi	r4,r4,-1
81110904:	4110703a 	and	r8,r8,r4
81110908:	003f8206 	br	81110714 <__reset+0xfb0f0714>
8111090c:	18ffffc4 	addi	r3,r3,-1
81110910:	1800491e 	bne	r3,zero,81110a38 <__adddf3+0x400>
81110914:	898bc83a 	sub	r5,r17,r6
81110918:	8963803a 	cmpltu	r17,r17,r5
8111091c:	4251c83a 	sub	r8,r8,r9
81110920:	4451c83a 	sub	r8,r8,r17
81110924:	2823883a 	mov	r17,r5
81110928:	003f9f06 	br	811107a8 <__reset+0xfb0f07a8>
8111092c:	4984b03a 	or	r2,r9,r6
81110930:	103f6026 	beq	r2,zero,811106b4 <__reset+0xfb0f06b4>
81110934:	213fffc4 	addi	r4,r4,-1
81110938:	2000931e 	bne	r4,zero,81110b88 <__adddf3+0x550>
8111093c:	898d883a 	add	r6,r17,r6
81110940:	3463803a 	cmpltu	r17,r6,r17
81110944:	4251883a 	add	r8,r8,r9
81110948:	8a11883a 	add	r8,r17,r8
8111094c:	3023883a 	mov	r17,r6
81110950:	003fd806 	br	811108b4 <__reset+0xfb0f08b4>
81110954:	1800541e 	bne	r3,zero,81110aa8 <__adddf3+0x470>
81110958:	80800044 	addi	r2,r16,1
8111095c:	1081ffcc 	andi	r2,r2,2047
81110960:	00c00044 	movi	r3,1
81110964:	1880a00e 	bge	r3,r2,81110be8 <__adddf3+0x5b0>
81110968:	8989c83a 	sub	r4,r17,r6
8111096c:	8905803a 	cmpltu	r2,r17,r4
81110970:	4267c83a 	sub	r19,r8,r9
81110974:	98a7c83a 	sub	r19,r19,r2
81110978:	9880202c 	andhi	r2,r19,128
8111097c:	10006326 	beq	r2,zero,81110b0c <__adddf3+0x4d4>
81110980:	3463c83a 	sub	r17,r6,r17
81110984:	4a07c83a 	sub	r3,r9,r8
81110988:	344d803a 	cmpltu	r6,r6,r17
8111098c:	19a7c83a 	sub	r19,r3,r6
81110990:	3825883a 	mov	r18,r7
81110994:	983f8a1e 	bne	r19,zero,811107c0 <__reset+0xfb0f07c0>
81110998:	8809883a 	mov	r4,r17
8111099c:	1102aec0 	call	81102aec <__clzsi2>
811109a0:	10800804 	addi	r2,r2,32
811109a4:	10fffe04 	addi	r3,r2,-8
811109a8:	010007c4 	movi	r4,31
811109ac:	20ff890e 	bge	r4,r3,811107d4 <__reset+0xfb0f07d4>
811109b0:	10bff604 	addi	r2,r2,-40
811109b4:	8884983a 	sll	r2,r17,r2
811109b8:	0023883a 	mov	r17,zero
811109bc:	1c3f8c0e 	bge	r3,r16,811107f0 <__reset+0xfb0f07f0>
811109c0:	023fe034 	movhi	r8,65408
811109c4:	423fffc4 	addi	r8,r8,-1
811109c8:	80e1c83a 	sub	r16,r16,r3
811109cc:	1210703a 	and	r8,r2,r8
811109d0:	003f3806 	br	811106b4 <__reset+0xfb0f06b4>
811109d4:	9007883a 	mov	r3,r18
811109d8:	0011883a 	mov	r8,zero
811109dc:	0005883a 	mov	r2,zero
811109e0:	003f4c06 	br	81110714 <__reset+0xfb0f0714>
811109e4:	498cb03a 	or	r6,r9,r6
811109e8:	300cc03a 	cmpne	r6,r6,zero
811109ec:	0007883a 	mov	r3,zero
811109f0:	003f6806 	br	81110794 <__reset+0xfb0f0794>
811109f4:	20009c1e 	bne	r4,zero,81110c68 <__adddf3+0x630>
811109f8:	80800044 	addi	r2,r16,1
811109fc:	1141ffcc 	andi	r5,r2,2047
81110a00:	01000044 	movi	r4,1
81110a04:	2140670e 	bge	r4,r5,81110ba4 <__adddf3+0x56c>
81110a08:	0101ffc4 	movi	r4,2047
81110a0c:	11007f26 	beq	r2,r4,81110c0c <__adddf3+0x5d4>
81110a10:	898d883a 	add	r6,r17,r6
81110a14:	4247883a 	add	r3,r8,r9
81110a18:	3451803a 	cmpltu	r8,r6,r17
81110a1c:	40d1883a 	add	r8,r8,r3
81110a20:	402297fa 	slli	r17,r8,31
81110a24:	300cd07a 	srli	r6,r6,1
81110a28:	4010d07a 	srli	r8,r8,1
81110a2c:	1021883a 	mov	r16,r2
81110a30:	89a2b03a 	or	r17,r17,r6
81110a34:	003f1f06 	br	811106b4 <__reset+0xfb0f06b4>
81110a38:	0081ffc4 	movi	r2,2047
81110a3c:	80bf481e 	bne	r16,r2,81110760 <__reset+0xfb0f0760>
81110a40:	003f1c06 	br	811106b4 <__reset+0xfb0f06b4>
81110a44:	843ff844 	addi	r16,r16,-31
81110a48:	01000804 	movi	r4,32
81110a4c:	1406d83a 	srl	r3,r2,r16
81110a50:	41005026 	beq	r8,r4,81110b94 <__adddf3+0x55c>
81110a54:	01001004 	movi	r4,64
81110a58:	2211c83a 	sub	r8,r4,r8
81110a5c:	1204983a 	sll	r2,r2,r8
81110a60:	88a2b03a 	or	r17,r17,r2
81110a64:	8822c03a 	cmpne	r17,r17,zero
81110a68:	1c62b03a 	or	r17,r3,r17
81110a6c:	0011883a 	mov	r8,zero
81110a70:	0021883a 	mov	r16,zero
81110a74:	003f7106 	br	8111083c <__reset+0xfb0f083c>
81110a78:	193ff804 	addi	r4,r3,-32
81110a7c:	00800804 	movi	r2,32
81110a80:	4908d83a 	srl	r4,r9,r4
81110a84:	18804526 	beq	r3,r2,81110b9c <__adddf3+0x564>
81110a88:	00801004 	movi	r2,64
81110a8c:	10c5c83a 	sub	r2,r2,r3
81110a90:	4886983a 	sll	r3,r9,r2
81110a94:	198cb03a 	or	r6,r3,r6
81110a98:	300cc03a 	cmpne	r6,r6,zero
81110a9c:	218cb03a 	or	r6,r4,r6
81110aa0:	0007883a 	mov	r3,zero
81110aa4:	003f3b06 	br	81110794 <__reset+0xfb0f0794>
81110aa8:	80002a26 	beq	r16,zero,81110b54 <__adddf3+0x51c>
81110aac:	0101ffc4 	movi	r4,2047
81110ab0:	11006826 	beq	r2,r4,81110c54 <__adddf3+0x61c>
81110ab4:	00c7c83a 	sub	r3,zero,r3
81110ab8:	42002034 	orhi	r8,r8,128
81110abc:	01000e04 	movi	r4,56
81110ac0:	20c07c16 	blt	r4,r3,81110cb4 <__adddf3+0x67c>
81110ac4:	010007c4 	movi	r4,31
81110ac8:	20c0da16 	blt	r4,r3,81110e34 <__adddf3+0x7fc>
81110acc:	01000804 	movi	r4,32
81110ad0:	20c9c83a 	sub	r4,r4,r3
81110ad4:	4114983a 	sll	r10,r8,r4
81110ad8:	88cad83a 	srl	r5,r17,r3
81110adc:	8908983a 	sll	r4,r17,r4
81110ae0:	40c6d83a 	srl	r3,r8,r3
81110ae4:	5162b03a 	or	r17,r10,r5
81110ae8:	2008c03a 	cmpne	r4,r4,zero
81110aec:	8922b03a 	or	r17,r17,r4
81110af0:	3463c83a 	sub	r17,r6,r17
81110af4:	48c7c83a 	sub	r3,r9,r3
81110af8:	344d803a 	cmpltu	r6,r6,r17
81110afc:	1991c83a 	sub	r8,r3,r6
81110b00:	1021883a 	mov	r16,r2
81110b04:	3825883a 	mov	r18,r7
81110b08:	003f2706 	br	811107a8 <__reset+0xfb0f07a8>
81110b0c:	24d0b03a 	or	r8,r4,r19
81110b10:	40001b1e 	bne	r8,zero,81110b80 <__adddf3+0x548>
81110b14:	0005883a 	mov	r2,zero
81110b18:	0007883a 	mov	r3,zero
81110b1c:	0021883a 	mov	r16,zero
81110b20:	003f4d06 	br	81110858 <__reset+0xfb0f0858>
81110b24:	008007c4 	movi	r2,31
81110b28:	11003c16 	blt	r2,r4,81110c1c <__adddf3+0x5e4>
81110b2c:	00800804 	movi	r2,32
81110b30:	1105c83a 	sub	r2,r2,r4
81110b34:	488e983a 	sll	r7,r9,r2
81110b38:	310ad83a 	srl	r5,r6,r4
81110b3c:	3084983a 	sll	r2,r6,r2
81110b40:	4912d83a 	srl	r9,r9,r4
81110b44:	394ab03a 	or	r5,r7,r5
81110b48:	1004c03a 	cmpne	r2,r2,zero
81110b4c:	288ab03a 	or	r5,r5,r2
81110b50:	003f5306 	br	811108a0 <__reset+0xfb0f08a0>
81110b54:	4448b03a 	or	r4,r8,r17
81110b58:	20003e26 	beq	r4,zero,81110c54 <__adddf3+0x61c>
81110b5c:	00c6303a 	nor	r3,zero,r3
81110b60:	18003a1e 	bne	r3,zero,81110c4c <__adddf3+0x614>
81110b64:	3463c83a 	sub	r17,r6,r17
81110b68:	4a07c83a 	sub	r3,r9,r8
81110b6c:	344d803a 	cmpltu	r6,r6,r17
81110b70:	1991c83a 	sub	r8,r3,r6
81110b74:	1021883a 	mov	r16,r2
81110b78:	3825883a 	mov	r18,r7
81110b7c:	003f0a06 	br	811107a8 <__reset+0xfb0f07a8>
81110b80:	2023883a 	mov	r17,r4
81110b84:	003f0d06 	br	811107bc <__reset+0xfb0f07bc>
81110b88:	0081ffc4 	movi	r2,2047
81110b8c:	80bf3f1e 	bne	r16,r2,8111088c <__reset+0xfb0f088c>
81110b90:	003ec806 	br	811106b4 <__reset+0xfb0f06b4>
81110b94:	0005883a 	mov	r2,zero
81110b98:	003fb106 	br	81110a60 <__reset+0xfb0f0a60>
81110b9c:	0007883a 	mov	r3,zero
81110ba0:	003fbc06 	br	81110a94 <__reset+0xfb0f0a94>
81110ba4:	4444b03a 	or	r2,r8,r17
81110ba8:	8000871e 	bne	r16,zero,81110dc8 <__adddf3+0x790>
81110bac:	1000ba26 	beq	r2,zero,81110e98 <__adddf3+0x860>
81110bb0:	4984b03a 	or	r2,r9,r6
81110bb4:	103ebf26 	beq	r2,zero,811106b4 <__reset+0xfb0f06b4>
81110bb8:	8985883a 	add	r2,r17,r6
81110bbc:	4247883a 	add	r3,r8,r9
81110bc0:	1451803a 	cmpltu	r8,r2,r17
81110bc4:	40d1883a 	add	r8,r8,r3
81110bc8:	40c0202c 	andhi	r3,r8,128
81110bcc:	1023883a 	mov	r17,r2
81110bd0:	183f1a26 	beq	r3,zero,8111083c <__reset+0xfb0f083c>
81110bd4:	00bfe034 	movhi	r2,65408
81110bd8:	10bfffc4 	addi	r2,r2,-1
81110bdc:	2021883a 	mov	r16,r4
81110be0:	4090703a 	and	r8,r8,r2
81110be4:	003eb306 	br	811106b4 <__reset+0xfb0f06b4>
81110be8:	4444b03a 	or	r2,r8,r17
81110bec:	8000291e 	bne	r16,zero,81110c94 <__adddf3+0x65c>
81110bf0:	10004b1e 	bne	r2,zero,81110d20 <__adddf3+0x6e8>
81110bf4:	4990b03a 	or	r8,r9,r6
81110bf8:	40008b26 	beq	r8,zero,81110e28 <__adddf3+0x7f0>
81110bfc:	4811883a 	mov	r8,r9
81110c00:	3023883a 	mov	r17,r6
81110c04:	3825883a 	mov	r18,r7
81110c08:	003eaa06 	br	811106b4 <__reset+0xfb0f06b4>
81110c0c:	1021883a 	mov	r16,r2
81110c10:	0011883a 	mov	r8,zero
81110c14:	0005883a 	mov	r2,zero
81110c18:	003f0f06 	br	81110858 <__reset+0xfb0f0858>
81110c1c:	217ff804 	addi	r5,r4,-32
81110c20:	00800804 	movi	r2,32
81110c24:	494ad83a 	srl	r5,r9,r5
81110c28:	20807d26 	beq	r4,r2,81110e20 <__adddf3+0x7e8>
81110c2c:	00801004 	movi	r2,64
81110c30:	1109c83a 	sub	r4,r2,r4
81110c34:	4912983a 	sll	r9,r9,r4
81110c38:	498cb03a 	or	r6,r9,r6
81110c3c:	300cc03a 	cmpne	r6,r6,zero
81110c40:	298ab03a 	or	r5,r5,r6
81110c44:	0013883a 	mov	r9,zero
81110c48:	003f1506 	br	811108a0 <__reset+0xfb0f08a0>
81110c4c:	0101ffc4 	movi	r4,2047
81110c50:	113f9a1e 	bne	r2,r4,81110abc <__reset+0xfb0f0abc>
81110c54:	4811883a 	mov	r8,r9
81110c58:	3023883a 	mov	r17,r6
81110c5c:	1021883a 	mov	r16,r2
81110c60:	3825883a 	mov	r18,r7
81110c64:	003e9306 	br	811106b4 <__reset+0xfb0f06b4>
81110c68:	8000161e 	bne	r16,zero,81110cc4 <__adddf3+0x68c>
81110c6c:	444ab03a 	or	r5,r8,r17
81110c70:	28005126 	beq	r5,zero,81110db8 <__adddf3+0x780>
81110c74:	0108303a 	nor	r4,zero,r4
81110c78:	20004d1e 	bne	r4,zero,81110db0 <__adddf3+0x778>
81110c7c:	89a3883a 	add	r17,r17,r6
81110c80:	4253883a 	add	r9,r8,r9
81110c84:	898d803a 	cmpltu	r6,r17,r6
81110c88:	3251883a 	add	r8,r6,r9
81110c8c:	1021883a 	mov	r16,r2
81110c90:	003f0806 	br	811108b4 <__reset+0xfb0f08b4>
81110c94:	1000301e 	bne	r2,zero,81110d58 <__adddf3+0x720>
81110c98:	4984b03a 	or	r2,r9,r6
81110c9c:	10007126 	beq	r2,zero,81110e64 <__adddf3+0x82c>
81110ca0:	4811883a 	mov	r8,r9
81110ca4:	3023883a 	mov	r17,r6
81110ca8:	3825883a 	mov	r18,r7
81110cac:	0401ffc4 	movi	r16,2047
81110cb0:	003e8006 	br	811106b4 <__reset+0xfb0f06b4>
81110cb4:	4462b03a 	or	r17,r8,r17
81110cb8:	8822c03a 	cmpne	r17,r17,zero
81110cbc:	0007883a 	mov	r3,zero
81110cc0:	003f8b06 	br	81110af0 <__reset+0xfb0f0af0>
81110cc4:	0141ffc4 	movi	r5,2047
81110cc8:	11403b26 	beq	r2,r5,81110db8 <__adddf3+0x780>
81110ccc:	0109c83a 	sub	r4,zero,r4
81110cd0:	42002034 	orhi	r8,r8,128
81110cd4:	01400e04 	movi	r5,56
81110cd8:	29006716 	blt	r5,r4,81110e78 <__adddf3+0x840>
81110cdc:	014007c4 	movi	r5,31
81110ce0:	29007016 	blt	r5,r4,81110ea4 <__adddf3+0x86c>
81110ce4:	01400804 	movi	r5,32
81110ce8:	290bc83a 	sub	r5,r5,r4
81110cec:	4154983a 	sll	r10,r8,r5
81110cf0:	890ed83a 	srl	r7,r17,r4
81110cf4:	894a983a 	sll	r5,r17,r5
81110cf8:	4108d83a 	srl	r4,r8,r4
81110cfc:	51e2b03a 	or	r17,r10,r7
81110d00:	280ac03a 	cmpne	r5,r5,zero
81110d04:	8962b03a 	or	r17,r17,r5
81110d08:	89a3883a 	add	r17,r17,r6
81110d0c:	2253883a 	add	r9,r4,r9
81110d10:	898d803a 	cmpltu	r6,r17,r6
81110d14:	3251883a 	add	r8,r6,r9
81110d18:	1021883a 	mov	r16,r2
81110d1c:	003ee506 	br	811108b4 <__reset+0xfb0f08b4>
81110d20:	4984b03a 	or	r2,r9,r6
81110d24:	103e6326 	beq	r2,zero,811106b4 <__reset+0xfb0f06b4>
81110d28:	8987c83a 	sub	r3,r17,r6
81110d2c:	88c9803a 	cmpltu	r4,r17,r3
81110d30:	4245c83a 	sub	r2,r8,r9
81110d34:	1105c83a 	sub	r2,r2,r4
81110d38:	1100202c 	andhi	r4,r2,128
81110d3c:	203ebb26 	beq	r4,zero,8111082c <__reset+0xfb0f082c>
81110d40:	3463c83a 	sub	r17,r6,r17
81110d44:	4a07c83a 	sub	r3,r9,r8
81110d48:	344d803a 	cmpltu	r6,r6,r17
81110d4c:	1991c83a 	sub	r8,r3,r6
81110d50:	3825883a 	mov	r18,r7
81110d54:	003e5706 	br	811106b4 <__reset+0xfb0f06b4>
81110d58:	4984b03a 	or	r2,r9,r6
81110d5c:	10002e26 	beq	r2,zero,81110e18 <__adddf3+0x7e0>
81110d60:	4004d0fa 	srli	r2,r8,3
81110d64:	8822d0fa 	srli	r17,r17,3
81110d68:	4010977a 	slli	r8,r8,29
81110d6c:	10c0022c 	andhi	r3,r2,8
81110d70:	4462b03a 	or	r17,r8,r17
81110d74:	18000826 	beq	r3,zero,81110d98 <__adddf3+0x760>
81110d78:	4808d0fa 	srli	r4,r9,3
81110d7c:	20c0022c 	andhi	r3,r4,8
81110d80:	1800051e 	bne	r3,zero,81110d98 <__adddf3+0x760>
81110d84:	300cd0fa 	srli	r6,r6,3
81110d88:	4806977a 	slli	r3,r9,29
81110d8c:	2005883a 	mov	r2,r4
81110d90:	3825883a 	mov	r18,r7
81110d94:	19a2b03a 	or	r17,r3,r6
81110d98:	8810d77a 	srli	r8,r17,29
81110d9c:	100490fa 	slli	r2,r2,3
81110da0:	882290fa 	slli	r17,r17,3
81110da4:	0401ffc4 	movi	r16,2047
81110da8:	4090b03a 	or	r8,r8,r2
81110dac:	003e4106 	br	811106b4 <__reset+0xfb0f06b4>
81110db0:	0141ffc4 	movi	r5,2047
81110db4:	117fc71e 	bne	r2,r5,81110cd4 <__reset+0xfb0f0cd4>
81110db8:	4811883a 	mov	r8,r9
81110dbc:	3023883a 	mov	r17,r6
81110dc0:	1021883a 	mov	r16,r2
81110dc4:	003e3b06 	br	811106b4 <__reset+0xfb0f06b4>
81110dc8:	10002f26 	beq	r2,zero,81110e88 <__adddf3+0x850>
81110dcc:	4984b03a 	or	r2,r9,r6
81110dd0:	10001126 	beq	r2,zero,81110e18 <__adddf3+0x7e0>
81110dd4:	4004d0fa 	srli	r2,r8,3
81110dd8:	8822d0fa 	srli	r17,r17,3
81110ddc:	4010977a 	slli	r8,r8,29
81110de0:	10c0022c 	andhi	r3,r2,8
81110de4:	4462b03a 	or	r17,r8,r17
81110de8:	183feb26 	beq	r3,zero,81110d98 <__reset+0xfb0f0d98>
81110dec:	4808d0fa 	srli	r4,r9,3
81110df0:	20c0022c 	andhi	r3,r4,8
81110df4:	183fe81e 	bne	r3,zero,81110d98 <__reset+0xfb0f0d98>
81110df8:	300cd0fa 	srli	r6,r6,3
81110dfc:	4806977a 	slli	r3,r9,29
81110e00:	2005883a 	mov	r2,r4
81110e04:	19a2b03a 	or	r17,r3,r6
81110e08:	003fe306 	br	81110d98 <__reset+0xfb0f0d98>
81110e0c:	0011883a 	mov	r8,zero
81110e10:	0005883a 	mov	r2,zero
81110e14:	003e3f06 	br	81110714 <__reset+0xfb0f0714>
81110e18:	0401ffc4 	movi	r16,2047
81110e1c:	003e2506 	br	811106b4 <__reset+0xfb0f06b4>
81110e20:	0013883a 	mov	r9,zero
81110e24:	003f8406 	br	81110c38 <__reset+0xfb0f0c38>
81110e28:	0005883a 	mov	r2,zero
81110e2c:	0007883a 	mov	r3,zero
81110e30:	003e8906 	br	81110858 <__reset+0xfb0f0858>
81110e34:	197ff804 	addi	r5,r3,-32
81110e38:	01000804 	movi	r4,32
81110e3c:	414ad83a 	srl	r5,r8,r5
81110e40:	19002426 	beq	r3,r4,81110ed4 <__adddf3+0x89c>
81110e44:	01001004 	movi	r4,64
81110e48:	20c7c83a 	sub	r3,r4,r3
81110e4c:	40c6983a 	sll	r3,r8,r3
81110e50:	1c46b03a 	or	r3,r3,r17
81110e54:	1806c03a 	cmpne	r3,r3,zero
81110e58:	28e2b03a 	or	r17,r5,r3
81110e5c:	0007883a 	mov	r3,zero
81110e60:	003f2306 	br	81110af0 <__reset+0xfb0f0af0>
81110e64:	0007883a 	mov	r3,zero
81110e68:	5811883a 	mov	r8,r11
81110e6c:	00bfffc4 	movi	r2,-1
81110e70:	0401ffc4 	movi	r16,2047
81110e74:	003e7806 	br	81110858 <__reset+0xfb0f0858>
81110e78:	4462b03a 	or	r17,r8,r17
81110e7c:	8822c03a 	cmpne	r17,r17,zero
81110e80:	0009883a 	mov	r4,zero
81110e84:	003fa006 	br	81110d08 <__reset+0xfb0f0d08>
81110e88:	4811883a 	mov	r8,r9
81110e8c:	3023883a 	mov	r17,r6
81110e90:	0401ffc4 	movi	r16,2047
81110e94:	003e0706 	br	811106b4 <__reset+0xfb0f06b4>
81110e98:	4811883a 	mov	r8,r9
81110e9c:	3023883a 	mov	r17,r6
81110ea0:	003e0406 	br	811106b4 <__reset+0xfb0f06b4>
81110ea4:	21fff804 	addi	r7,r4,-32
81110ea8:	01400804 	movi	r5,32
81110eac:	41ced83a 	srl	r7,r8,r7
81110eb0:	21400a26 	beq	r4,r5,81110edc <__adddf3+0x8a4>
81110eb4:	01401004 	movi	r5,64
81110eb8:	2909c83a 	sub	r4,r5,r4
81110ebc:	4108983a 	sll	r4,r8,r4
81110ec0:	2448b03a 	or	r4,r4,r17
81110ec4:	2008c03a 	cmpne	r4,r4,zero
81110ec8:	3922b03a 	or	r17,r7,r4
81110ecc:	0009883a 	mov	r4,zero
81110ed0:	003f8d06 	br	81110d08 <__reset+0xfb0f0d08>
81110ed4:	0007883a 	mov	r3,zero
81110ed8:	003fdd06 	br	81110e50 <__reset+0xfb0f0e50>
81110edc:	0009883a 	mov	r4,zero
81110ee0:	003ff706 	br	81110ec0 <__reset+0xfb0f0ec0>

81110ee4 <__divdf3>:
81110ee4:	defff204 	addi	sp,sp,-56
81110ee8:	dd400915 	stw	r21,36(sp)
81110eec:	282ad53a 	srli	r21,r5,20
81110ef0:	dd000815 	stw	r20,32(sp)
81110ef4:	2828d7fa 	srli	r20,r5,31
81110ef8:	dc000415 	stw	r16,16(sp)
81110efc:	04000434 	movhi	r16,16
81110f00:	df000c15 	stw	fp,48(sp)
81110f04:	843fffc4 	addi	r16,r16,-1
81110f08:	dfc00d15 	stw	ra,52(sp)
81110f0c:	ddc00b15 	stw	r23,44(sp)
81110f10:	dd800a15 	stw	r22,40(sp)
81110f14:	dcc00715 	stw	r19,28(sp)
81110f18:	dc800615 	stw	r18,24(sp)
81110f1c:	dc400515 	stw	r17,20(sp)
81110f20:	ad41ffcc 	andi	r21,r21,2047
81110f24:	2c20703a 	and	r16,r5,r16
81110f28:	a7003fcc 	andi	fp,r20,255
81110f2c:	a8006126 	beq	r21,zero,811110b4 <__divdf3+0x1d0>
81110f30:	0081ffc4 	movi	r2,2047
81110f34:	2025883a 	mov	r18,r4
81110f38:	a8803726 	beq	r21,r2,81111018 <__divdf3+0x134>
81110f3c:	80800434 	orhi	r2,r16,16
81110f40:	100490fa 	slli	r2,r2,3
81110f44:	2020d77a 	srli	r16,r4,29
81110f48:	202490fa 	slli	r18,r4,3
81110f4c:	ad7f0044 	addi	r21,r21,-1023
81110f50:	80a0b03a 	or	r16,r16,r2
81110f54:	0027883a 	mov	r19,zero
81110f58:	0013883a 	mov	r9,zero
81110f5c:	3804d53a 	srli	r2,r7,20
81110f60:	382cd7fa 	srli	r22,r7,31
81110f64:	04400434 	movhi	r17,16
81110f68:	8c7fffc4 	addi	r17,r17,-1
81110f6c:	1081ffcc 	andi	r2,r2,2047
81110f70:	3011883a 	mov	r8,r6
81110f74:	3c62703a 	and	r17,r7,r17
81110f78:	b5c03fcc 	andi	r23,r22,255
81110f7c:	10006c26 	beq	r2,zero,81111130 <__divdf3+0x24c>
81110f80:	00c1ffc4 	movi	r3,2047
81110f84:	10c06426 	beq	r2,r3,81111118 <__divdf3+0x234>
81110f88:	88c00434 	orhi	r3,r17,16
81110f8c:	180690fa 	slli	r3,r3,3
81110f90:	3022d77a 	srli	r17,r6,29
81110f94:	301090fa 	slli	r8,r6,3
81110f98:	10bf0044 	addi	r2,r2,-1023
81110f9c:	88e2b03a 	or	r17,r17,r3
81110fa0:	000f883a 	mov	r7,zero
81110fa4:	a58cf03a 	xor	r6,r20,r22
81110fa8:	3cc8b03a 	or	r4,r7,r19
81110fac:	a8abc83a 	sub	r21,r21,r2
81110fb0:	008003c4 	movi	r2,15
81110fb4:	3007883a 	mov	r3,r6
81110fb8:	34c03fcc 	andi	r19,r6,255
81110fbc:	11009036 	bltu	r2,r4,81111200 <__divdf3+0x31c>
81110fc0:	200890ba 	slli	r4,r4,2
81110fc4:	00a04474 	movhi	r2,33041
81110fc8:	1083f604 	addi	r2,r2,4056
81110fcc:	2089883a 	add	r4,r4,r2
81110fd0:	20800017 	ldw	r2,0(r4)
81110fd4:	1000683a 	jmp	r2
81110fd8:	81111200 	call	88111120 <__reset+0x20f1120>
81110fdc:	81111050 	cmplti	r4,r16,17473
81110fe0:	811111f0 	cmpltui	r4,r16,17479
81110fe4:	81111044 	addi	r4,r16,17473
81110fe8:	811111f0 	cmpltui	r4,r16,17479
81110fec:	811111c4 	addi	r4,r16,17479
81110ff0:	811111f0 	cmpltui	r4,r16,17479
81110ff4:	81111044 	addi	r4,r16,17473
81110ff8:	81111050 	cmplti	r4,r16,17473
81110ffc:	81111050 	cmplti	r4,r16,17473
81111000:	811111c4 	addi	r4,r16,17479
81111004:	81111044 	addi	r4,r16,17473
81111008:	81111034 	orhi	r4,r16,17472
8111100c:	81111034 	orhi	r4,r16,17472
81111010:	81111034 	orhi	r4,r16,17472
81111014:	811114e4 	muli	r4,r16,17491
81111018:	2404b03a 	or	r2,r4,r16
8111101c:	1000661e 	bne	r2,zero,811111b8 <__divdf3+0x2d4>
81111020:	04c00204 	movi	r19,8
81111024:	0021883a 	mov	r16,zero
81111028:	0025883a 	mov	r18,zero
8111102c:	02400084 	movi	r9,2
81111030:	003fca06 	br	81110f5c <__reset+0xfb0f0f5c>
81111034:	8023883a 	mov	r17,r16
81111038:	9011883a 	mov	r8,r18
8111103c:	e02f883a 	mov	r23,fp
81111040:	480f883a 	mov	r7,r9
81111044:	00800084 	movi	r2,2
81111048:	3881311e 	bne	r7,r2,81111510 <__divdf3+0x62c>
8111104c:	b827883a 	mov	r19,r23
81111050:	98c0004c 	andi	r3,r19,1
81111054:	0081ffc4 	movi	r2,2047
81111058:	000b883a 	mov	r5,zero
8111105c:	0025883a 	mov	r18,zero
81111060:	1004953a 	slli	r2,r2,20
81111064:	18c03fcc 	andi	r3,r3,255
81111068:	04400434 	movhi	r17,16
8111106c:	8c7fffc4 	addi	r17,r17,-1
81111070:	180697fa 	slli	r3,r3,31
81111074:	2c4a703a 	and	r5,r5,r17
81111078:	288ab03a 	or	r5,r5,r2
8111107c:	28c6b03a 	or	r3,r5,r3
81111080:	9005883a 	mov	r2,r18
81111084:	dfc00d17 	ldw	ra,52(sp)
81111088:	df000c17 	ldw	fp,48(sp)
8111108c:	ddc00b17 	ldw	r23,44(sp)
81111090:	dd800a17 	ldw	r22,40(sp)
81111094:	dd400917 	ldw	r21,36(sp)
81111098:	dd000817 	ldw	r20,32(sp)
8111109c:	dcc00717 	ldw	r19,28(sp)
811110a0:	dc800617 	ldw	r18,24(sp)
811110a4:	dc400517 	ldw	r17,20(sp)
811110a8:	dc000417 	ldw	r16,16(sp)
811110ac:	dec00e04 	addi	sp,sp,56
811110b0:	f800283a 	ret
811110b4:	2404b03a 	or	r2,r4,r16
811110b8:	2027883a 	mov	r19,r4
811110bc:	10003926 	beq	r2,zero,811111a4 <__divdf3+0x2c0>
811110c0:	80012e26 	beq	r16,zero,8111157c <__divdf3+0x698>
811110c4:	8009883a 	mov	r4,r16
811110c8:	d9800315 	stw	r6,12(sp)
811110cc:	d9c00215 	stw	r7,8(sp)
811110d0:	1102aec0 	call	81102aec <__clzsi2>
811110d4:	d9800317 	ldw	r6,12(sp)
811110d8:	d9c00217 	ldw	r7,8(sp)
811110dc:	113ffd44 	addi	r4,r2,-11
811110e0:	00c00704 	movi	r3,28
811110e4:	19012116 	blt	r3,r4,8111156c <__divdf3+0x688>
811110e8:	00c00744 	movi	r3,29
811110ec:	147ffe04 	addi	r17,r2,-8
811110f0:	1907c83a 	sub	r3,r3,r4
811110f4:	8460983a 	sll	r16,r16,r17
811110f8:	98c6d83a 	srl	r3,r19,r3
811110fc:	9c64983a 	sll	r18,r19,r17
81111100:	1c20b03a 	or	r16,r3,r16
81111104:	1080fcc4 	addi	r2,r2,1011
81111108:	00abc83a 	sub	r21,zero,r2
8111110c:	0027883a 	mov	r19,zero
81111110:	0013883a 	mov	r9,zero
81111114:	003f9106 	br	81110f5c <__reset+0xfb0f0f5c>
81111118:	3446b03a 	or	r3,r6,r17
8111111c:	18001f1e 	bne	r3,zero,8111119c <__divdf3+0x2b8>
81111120:	0023883a 	mov	r17,zero
81111124:	0011883a 	mov	r8,zero
81111128:	01c00084 	movi	r7,2
8111112c:	003f9d06 	br	81110fa4 <__reset+0xfb0f0fa4>
81111130:	3446b03a 	or	r3,r6,r17
81111134:	18001526 	beq	r3,zero,8111118c <__divdf3+0x2a8>
81111138:	88011b26 	beq	r17,zero,811115a8 <__divdf3+0x6c4>
8111113c:	8809883a 	mov	r4,r17
81111140:	d9800315 	stw	r6,12(sp)
81111144:	da400115 	stw	r9,4(sp)
81111148:	1102aec0 	call	81102aec <__clzsi2>
8111114c:	d9800317 	ldw	r6,12(sp)
81111150:	da400117 	ldw	r9,4(sp)
81111154:	113ffd44 	addi	r4,r2,-11
81111158:	00c00704 	movi	r3,28
8111115c:	19010e16 	blt	r3,r4,81111598 <__divdf3+0x6b4>
81111160:	00c00744 	movi	r3,29
81111164:	123ffe04 	addi	r8,r2,-8
81111168:	1907c83a 	sub	r3,r3,r4
8111116c:	8a22983a 	sll	r17,r17,r8
81111170:	30c6d83a 	srl	r3,r6,r3
81111174:	3210983a 	sll	r8,r6,r8
81111178:	1c62b03a 	or	r17,r3,r17
8111117c:	1080fcc4 	addi	r2,r2,1011
81111180:	0085c83a 	sub	r2,zero,r2
81111184:	000f883a 	mov	r7,zero
81111188:	003f8606 	br	81110fa4 <__reset+0xfb0f0fa4>
8111118c:	0023883a 	mov	r17,zero
81111190:	0011883a 	mov	r8,zero
81111194:	01c00044 	movi	r7,1
81111198:	003f8206 	br	81110fa4 <__reset+0xfb0f0fa4>
8111119c:	01c000c4 	movi	r7,3
811111a0:	003f8006 	br	81110fa4 <__reset+0xfb0f0fa4>
811111a4:	04c00104 	movi	r19,4
811111a8:	0021883a 	mov	r16,zero
811111ac:	0025883a 	mov	r18,zero
811111b0:	02400044 	movi	r9,1
811111b4:	003f6906 	br	81110f5c <__reset+0xfb0f0f5c>
811111b8:	04c00304 	movi	r19,12
811111bc:	024000c4 	movi	r9,3
811111c0:	003f6606 	br	81110f5c <__reset+0xfb0f0f5c>
811111c4:	01400434 	movhi	r5,16
811111c8:	0007883a 	mov	r3,zero
811111cc:	297fffc4 	addi	r5,r5,-1
811111d0:	04bfffc4 	movi	r18,-1
811111d4:	0081ffc4 	movi	r2,2047
811111d8:	003fa106 	br	81111060 <__reset+0xfb0f1060>
811111dc:	00c00044 	movi	r3,1
811111e0:	1887c83a 	sub	r3,r3,r2
811111e4:	01000e04 	movi	r4,56
811111e8:	20c1210e 	bge	r4,r3,81111670 <__divdf3+0x78c>
811111ec:	98c0004c 	andi	r3,r19,1
811111f0:	0005883a 	mov	r2,zero
811111f4:	000b883a 	mov	r5,zero
811111f8:	0025883a 	mov	r18,zero
811111fc:	003f9806 	br	81111060 <__reset+0xfb0f1060>
81111200:	8c00fd36 	bltu	r17,r16,811115f8 <__divdf3+0x714>
81111204:	8440fb26 	beq	r16,r17,811115f4 <__divdf3+0x710>
81111208:	8007883a 	mov	r3,r16
8111120c:	ad7fffc4 	addi	r21,r21,-1
81111210:	0021883a 	mov	r16,zero
81111214:	4004d63a 	srli	r2,r8,24
81111218:	8822923a 	slli	r17,r17,8
8111121c:	1809883a 	mov	r4,r3
81111220:	402c923a 	slli	r22,r8,8
81111224:	88b8b03a 	or	fp,r17,r2
81111228:	e028d43a 	srli	r20,fp,16
8111122c:	d8c00015 	stw	r3,0(sp)
81111230:	e5ffffcc 	andi	r23,fp,65535
81111234:	a00b883a 	mov	r5,r20
81111238:	111057c0 	call	8111057c <__udivsi3>
8111123c:	d8c00017 	ldw	r3,0(sp)
81111240:	a00b883a 	mov	r5,r20
81111244:	d8800315 	stw	r2,12(sp)
81111248:	1809883a 	mov	r4,r3
8111124c:	11105e00 	call	811105e0 <__umodsi3>
81111250:	d9800317 	ldw	r6,12(sp)
81111254:	1006943a 	slli	r3,r2,16
81111258:	9004d43a 	srli	r2,r18,16
8111125c:	b9a3383a 	mul	r17,r23,r6
81111260:	10c4b03a 	or	r2,r2,r3
81111264:	1440062e 	bgeu	r2,r17,81111280 <__divdf3+0x39c>
81111268:	1705883a 	add	r2,r2,fp
8111126c:	30ffffc4 	addi	r3,r6,-1
81111270:	1700ee36 	bltu	r2,fp,8111162c <__divdf3+0x748>
81111274:	1440ed2e 	bgeu	r2,r17,8111162c <__divdf3+0x748>
81111278:	31bfff84 	addi	r6,r6,-2
8111127c:	1705883a 	add	r2,r2,fp
81111280:	1463c83a 	sub	r17,r2,r17
81111284:	a00b883a 	mov	r5,r20
81111288:	8809883a 	mov	r4,r17
8111128c:	d9800315 	stw	r6,12(sp)
81111290:	111057c0 	call	8111057c <__udivsi3>
81111294:	a00b883a 	mov	r5,r20
81111298:	8809883a 	mov	r4,r17
8111129c:	d8800215 	stw	r2,8(sp)
811112a0:	11105e00 	call	811105e0 <__umodsi3>
811112a4:	d9c00217 	ldw	r7,8(sp)
811112a8:	1004943a 	slli	r2,r2,16
811112ac:	94bfffcc 	andi	r18,r18,65535
811112b0:	b9d1383a 	mul	r8,r23,r7
811112b4:	90a4b03a 	or	r18,r18,r2
811112b8:	d9800317 	ldw	r6,12(sp)
811112bc:	9200062e 	bgeu	r18,r8,811112d8 <__divdf3+0x3f4>
811112c0:	9725883a 	add	r18,r18,fp
811112c4:	38bfffc4 	addi	r2,r7,-1
811112c8:	9700d636 	bltu	r18,fp,81111624 <__divdf3+0x740>
811112cc:	9200d52e 	bgeu	r18,r8,81111624 <__divdf3+0x740>
811112d0:	39ffff84 	addi	r7,r7,-2
811112d4:	9725883a 	add	r18,r18,fp
811112d8:	3004943a 	slli	r2,r6,16
811112dc:	b012d43a 	srli	r9,r22,16
811112e0:	b1bfffcc 	andi	r6,r22,65535
811112e4:	11e2b03a 	or	r17,r2,r7
811112e8:	8806d43a 	srli	r3,r17,16
811112ec:	893fffcc 	andi	r4,r17,65535
811112f0:	218b383a 	mul	r5,r4,r6
811112f4:	30c5383a 	mul	r2,r6,r3
811112f8:	2249383a 	mul	r4,r4,r9
811112fc:	280ed43a 	srli	r7,r5,16
81111300:	9225c83a 	sub	r18,r18,r8
81111304:	2089883a 	add	r4,r4,r2
81111308:	3909883a 	add	r4,r7,r4
8111130c:	1a47383a 	mul	r3,r3,r9
81111310:	2080022e 	bgeu	r4,r2,8111131c <__divdf3+0x438>
81111314:	00800074 	movhi	r2,1
81111318:	1887883a 	add	r3,r3,r2
8111131c:	2004d43a 	srli	r2,r4,16
81111320:	2008943a 	slli	r4,r4,16
81111324:	297fffcc 	andi	r5,r5,65535
81111328:	10c7883a 	add	r3,r2,r3
8111132c:	2149883a 	add	r4,r4,r5
81111330:	90c0a536 	bltu	r18,r3,811115c8 <__divdf3+0x6e4>
81111334:	90c0bf26 	beq	r18,r3,81111634 <__divdf3+0x750>
81111338:	90c7c83a 	sub	r3,r18,r3
8111133c:	810fc83a 	sub	r7,r16,r4
81111340:	81e5803a 	cmpltu	r18,r16,r7
81111344:	1ca5c83a 	sub	r18,r3,r18
81111348:	e480c126 	beq	fp,r18,81111650 <__divdf3+0x76c>
8111134c:	a00b883a 	mov	r5,r20
81111350:	9009883a 	mov	r4,r18
81111354:	d9800315 	stw	r6,12(sp)
81111358:	d9c00215 	stw	r7,8(sp)
8111135c:	da400115 	stw	r9,4(sp)
81111360:	111057c0 	call	8111057c <__udivsi3>
81111364:	a00b883a 	mov	r5,r20
81111368:	9009883a 	mov	r4,r18
8111136c:	d8800015 	stw	r2,0(sp)
81111370:	11105e00 	call	811105e0 <__umodsi3>
81111374:	d9c00217 	ldw	r7,8(sp)
81111378:	da000017 	ldw	r8,0(sp)
8111137c:	1006943a 	slli	r3,r2,16
81111380:	3804d43a 	srli	r2,r7,16
81111384:	ba21383a 	mul	r16,r23,r8
81111388:	d9800317 	ldw	r6,12(sp)
8111138c:	10c4b03a 	or	r2,r2,r3
81111390:	da400117 	ldw	r9,4(sp)
81111394:	1400062e 	bgeu	r2,r16,811113b0 <__divdf3+0x4cc>
81111398:	1705883a 	add	r2,r2,fp
8111139c:	40ffffc4 	addi	r3,r8,-1
811113a0:	1700ad36 	bltu	r2,fp,81111658 <__divdf3+0x774>
811113a4:	1400ac2e 	bgeu	r2,r16,81111658 <__divdf3+0x774>
811113a8:	423fff84 	addi	r8,r8,-2
811113ac:	1705883a 	add	r2,r2,fp
811113b0:	1421c83a 	sub	r16,r2,r16
811113b4:	a00b883a 	mov	r5,r20
811113b8:	8009883a 	mov	r4,r16
811113bc:	d9800315 	stw	r6,12(sp)
811113c0:	d9c00215 	stw	r7,8(sp)
811113c4:	da000015 	stw	r8,0(sp)
811113c8:	da400115 	stw	r9,4(sp)
811113cc:	111057c0 	call	8111057c <__udivsi3>
811113d0:	8009883a 	mov	r4,r16
811113d4:	a00b883a 	mov	r5,r20
811113d8:	1025883a 	mov	r18,r2
811113dc:	11105e00 	call	811105e0 <__umodsi3>
811113e0:	d9c00217 	ldw	r7,8(sp)
811113e4:	1004943a 	slli	r2,r2,16
811113e8:	bcaf383a 	mul	r23,r23,r18
811113ec:	393fffcc 	andi	r4,r7,65535
811113f0:	2088b03a 	or	r4,r4,r2
811113f4:	d9800317 	ldw	r6,12(sp)
811113f8:	da000017 	ldw	r8,0(sp)
811113fc:	da400117 	ldw	r9,4(sp)
81111400:	25c0062e 	bgeu	r4,r23,8111141c <__divdf3+0x538>
81111404:	2709883a 	add	r4,r4,fp
81111408:	90bfffc4 	addi	r2,r18,-1
8111140c:	27009436 	bltu	r4,fp,81111660 <__divdf3+0x77c>
81111410:	25c0932e 	bgeu	r4,r23,81111660 <__divdf3+0x77c>
81111414:	94bfff84 	addi	r18,r18,-2
81111418:	2709883a 	add	r4,r4,fp
8111141c:	4004943a 	slli	r2,r8,16
81111420:	25efc83a 	sub	r23,r4,r23
81111424:	1490b03a 	or	r8,r2,r18
81111428:	4008d43a 	srli	r4,r8,16
8111142c:	40ffffcc 	andi	r3,r8,65535
81111430:	30c5383a 	mul	r2,r6,r3
81111434:	1a47383a 	mul	r3,r3,r9
81111438:	310d383a 	mul	r6,r6,r4
8111143c:	100ad43a 	srli	r5,r2,16
81111440:	4913383a 	mul	r9,r9,r4
81111444:	1987883a 	add	r3,r3,r6
81111448:	28c7883a 	add	r3,r5,r3
8111144c:	1980022e 	bgeu	r3,r6,81111458 <__divdf3+0x574>
81111450:	01000074 	movhi	r4,1
81111454:	4913883a 	add	r9,r9,r4
81111458:	1808d43a 	srli	r4,r3,16
8111145c:	1806943a 	slli	r3,r3,16
81111460:	10bfffcc 	andi	r2,r2,65535
81111464:	2253883a 	add	r9,r4,r9
81111468:	1887883a 	add	r3,r3,r2
8111146c:	ba403836 	bltu	r23,r9,81111550 <__divdf3+0x66c>
81111470:	ba403626 	beq	r23,r9,8111154c <__divdf3+0x668>
81111474:	42000054 	ori	r8,r8,1
81111478:	a880ffc4 	addi	r2,r21,1023
8111147c:	00bf570e 	bge	zero,r2,811111dc <__reset+0xfb0f11dc>
81111480:	40c001cc 	andi	r3,r8,7
81111484:	18000726 	beq	r3,zero,811114a4 <__divdf3+0x5c0>
81111488:	40c003cc 	andi	r3,r8,15
8111148c:	01000104 	movi	r4,4
81111490:	19000426 	beq	r3,r4,811114a4 <__divdf3+0x5c0>
81111494:	4107883a 	add	r3,r8,r4
81111498:	1a11803a 	cmpltu	r8,r3,r8
8111149c:	8a23883a 	add	r17,r17,r8
811114a0:	1811883a 	mov	r8,r3
811114a4:	88c0402c 	andhi	r3,r17,256
811114a8:	18000426 	beq	r3,zero,811114bc <__divdf3+0x5d8>
811114ac:	00ffc034 	movhi	r3,65280
811114b0:	18ffffc4 	addi	r3,r3,-1
811114b4:	a8810004 	addi	r2,r21,1024
811114b8:	88e2703a 	and	r17,r17,r3
811114bc:	00c1ff84 	movi	r3,2046
811114c0:	18bee316 	blt	r3,r2,81111050 <__reset+0xfb0f1050>
811114c4:	8824977a 	slli	r18,r17,29
811114c8:	4010d0fa 	srli	r8,r8,3
811114cc:	8822927a 	slli	r17,r17,9
811114d0:	1081ffcc 	andi	r2,r2,2047
811114d4:	9224b03a 	or	r18,r18,r8
811114d8:	880ad33a 	srli	r5,r17,12
811114dc:	98c0004c 	andi	r3,r19,1
811114e0:	003edf06 	br	81111060 <__reset+0xfb0f1060>
811114e4:	8080022c 	andhi	r2,r16,8
811114e8:	10001226 	beq	r2,zero,81111534 <__divdf3+0x650>
811114ec:	8880022c 	andhi	r2,r17,8
811114f0:	1000101e 	bne	r2,zero,81111534 <__divdf3+0x650>
811114f4:	00800434 	movhi	r2,16
811114f8:	89400234 	orhi	r5,r17,8
811114fc:	10bfffc4 	addi	r2,r2,-1
81111500:	b007883a 	mov	r3,r22
81111504:	288a703a 	and	r5,r5,r2
81111508:	4025883a 	mov	r18,r8
8111150c:	003f3106 	br	811111d4 <__reset+0xfb0f11d4>
81111510:	008000c4 	movi	r2,3
81111514:	3880a626 	beq	r7,r2,811117b0 <__divdf3+0x8cc>
81111518:	00800044 	movi	r2,1
8111151c:	3880521e 	bne	r7,r2,81111668 <__divdf3+0x784>
81111520:	b807883a 	mov	r3,r23
81111524:	0005883a 	mov	r2,zero
81111528:	000b883a 	mov	r5,zero
8111152c:	0025883a 	mov	r18,zero
81111530:	003ecb06 	br	81111060 <__reset+0xfb0f1060>
81111534:	00800434 	movhi	r2,16
81111538:	81400234 	orhi	r5,r16,8
8111153c:	10bfffc4 	addi	r2,r2,-1
81111540:	a007883a 	mov	r3,r20
81111544:	288a703a 	and	r5,r5,r2
81111548:	003f2206 	br	811111d4 <__reset+0xfb0f11d4>
8111154c:	183fca26 	beq	r3,zero,81111478 <__reset+0xfb0f1478>
81111550:	e5ef883a 	add	r23,fp,r23
81111554:	40bfffc4 	addi	r2,r8,-1
81111558:	bf00392e 	bgeu	r23,fp,81111640 <__divdf3+0x75c>
8111155c:	1011883a 	mov	r8,r2
81111560:	ba7fc41e 	bne	r23,r9,81111474 <__reset+0xfb0f1474>
81111564:	b0ffc31e 	bne	r22,r3,81111474 <__reset+0xfb0f1474>
81111568:	003fc306 	br	81111478 <__reset+0xfb0f1478>
8111156c:	143ff604 	addi	r16,r2,-40
81111570:	9c20983a 	sll	r16,r19,r16
81111574:	0025883a 	mov	r18,zero
81111578:	003ee206 	br	81111104 <__reset+0xfb0f1104>
8111157c:	d9800315 	stw	r6,12(sp)
81111580:	d9c00215 	stw	r7,8(sp)
81111584:	1102aec0 	call	81102aec <__clzsi2>
81111588:	10800804 	addi	r2,r2,32
8111158c:	d9c00217 	ldw	r7,8(sp)
81111590:	d9800317 	ldw	r6,12(sp)
81111594:	003ed106 	br	811110dc <__reset+0xfb0f10dc>
81111598:	147ff604 	addi	r17,r2,-40
8111159c:	3462983a 	sll	r17,r6,r17
811115a0:	0011883a 	mov	r8,zero
811115a4:	003ef506 	br	8111117c <__reset+0xfb0f117c>
811115a8:	3009883a 	mov	r4,r6
811115ac:	d9800315 	stw	r6,12(sp)
811115b0:	da400115 	stw	r9,4(sp)
811115b4:	1102aec0 	call	81102aec <__clzsi2>
811115b8:	10800804 	addi	r2,r2,32
811115bc:	da400117 	ldw	r9,4(sp)
811115c0:	d9800317 	ldw	r6,12(sp)
811115c4:	003ee306 	br	81111154 <__reset+0xfb0f1154>
811115c8:	85a1883a 	add	r16,r16,r22
811115cc:	8585803a 	cmpltu	r2,r16,r22
811115d0:	1705883a 	add	r2,r2,fp
811115d4:	14a5883a 	add	r18,r2,r18
811115d8:	88bfffc4 	addi	r2,r17,-1
811115dc:	e4800c2e 	bgeu	fp,r18,81111610 <__divdf3+0x72c>
811115e0:	90c03e36 	bltu	r18,r3,811116dc <__divdf3+0x7f8>
811115e4:	1c806926 	beq	r3,r18,8111178c <__divdf3+0x8a8>
811115e8:	90c7c83a 	sub	r3,r18,r3
811115ec:	1023883a 	mov	r17,r2
811115f0:	003f5206 	br	8111133c <__reset+0xfb0f133c>
811115f4:	923f0436 	bltu	r18,r8,81111208 <__reset+0xfb0f1208>
811115f8:	800897fa 	slli	r4,r16,31
811115fc:	9004d07a 	srli	r2,r18,1
81111600:	8006d07a 	srli	r3,r16,1
81111604:	902097fa 	slli	r16,r18,31
81111608:	20a4b03a 	or	r18,r4,r2
8111160c:	003f0106 	br	81111214 <__reset+0xfb0f1214>
81111610:	e4bff51e 	bne	fp,r18,811115e8 <__reset+0xfb0f15e8>
81111614:	85bff22e 	bgeu	r16,r22,811115e0 <__reset+0xfb0f15e0>
81111618:	e0c7c83a 	sub	r3,fp,r3
8111161c:	1023883a 	mov	r17,r2
81111620:	003f4606 	br	8111133c <__reset+0xfb0f133c>
81111624:	100f883a 	mov	r7,r2
81111628:	003f2b06 	br	811112d8 <__reset+0xfb0f12d8>
8111162c:	180d883a 	mov	r6,r3
81111630:	003f1306 	br	81111280 <__reset+0xfb0f1280>
81111634:	813fe436 	bltu	r16,r4,811115c8 <__reset+0xfb0f15c8>
81111638:	0007883a 	mov	r3,zero
8111163c:	003f3f06 	br	8111133c <__reset+0xfb0f133c>
81111640:	ba402c36 	bltu	r23,r9,811116f4 <__divdf3+0x810>
81111644:	4dc05426 	beq	r9,r23,81111798 <__divdf3+0x8b4>
81111648:	1011883a 	mov	r8,r2
8111164c:	003f8906 	br	81111474 <__reset+0xfb0f1474>
81111650:	023fffc4 	movi	r8,-1
81111654:	003f8806 	br	81111478 <__reset+0xfb0f1478>
81111658:	1811883a 	mov	r8,r3
8111165c:	003f5406 	br	811113b0 <__reset+0xfb0f13b0>
81111660:	1025883a 	mov	r18,r2
81111664:	003f6d06 	br	8111141c <__reset+0xfb0f141c>
81111668:	b827883a 	mov	r19,r23
8111166c:	003f8206 	br	81111478 <__reset+0xfb0f1478>
81111670:	010007c4 	movi	r4,31
81111674:	20c02616 	blt	r4,r3,81111710 <__divdf3+0x82c>
81111678:	00800804 	movi	r2,32
8111167c:	10c5c83a 	sub	r2,r2,r3
81111680:	888a983a 	sll	r5,r17,r2
81111684:	40c8d83a 	srl	r4,r8,r3
81111688:	4084983a 	sll	r2,r8,r2
8111168c:	88e2d83a 	srl	r17,r17,r3
81111690:	2906b03a 	or	r3,r5,r4
81111694:	1004c03a 	cmpne	r2,r2,zero
81111698:	1886b03a 	or	r3,r3,r2
8111169c:	188001cc 	andi	r2,r3,7
811116a0:	10000726 	beq	r2,zero,811116c0 <__divdf3+0x7dc>
811116a4:	188003cc 	andi	r2,r3,15
811116a8:	01000104 	movi	r4,4
811116ac:	11000426 	beq	r2,r4,811116c0 <__divdf3+0x7dc>
811116b0:	1805883a 	mov	r2,r3
811116b4:	10c00104 	addi	r3,r2,4
811116b8:	1885803a 	cmpltu	r2,r3,r2
811116bc:	88a3883a 	add	r17,r17,r2
811116c0:	8880202c 	andhi	r2,r17,128
811116c4:	10002726 	beq	r2,zero,81111764 <__divdf3+0x880>
811116c8:	98c0004c 	andi	r3,r19,1
811116cc:	00800044 	movi	r2,1
811116d0:	000b883a 	mov	r5,zero
811116d4:	0025883a 	mov	r18,zero
811116d8:	003e6106 	br	81111060 <__reset+0xfb0f1060>
811116dc:	85a1883a 	add	r16,r16,r22
811116e0:	8585803a 	cmpltu	r2,r16,r22
811116e4:	1705883a 	add	r2,r2,fp
811116e8:	14a5883a 	add	r18,r2,r18
811116ec:	8c7fff84 	addi	r17,r17,-2
811116f0:	003f1106 	br	81111338 <__reset+0xfb0f1338>
811116f4:	b589883a 	add	r4,r22,r22
811116f8:	25ad803a 	cmpltu	r22,r4,r22
811116fc:	b739883a 	add	fp,r22,fp
81111700:	40bfff84 	addi	r2,r8,-2
81111704:	bf2f883a 	add	r23,r23,fp
81111708:	202d883a 	mov	r22,r4
8111170c:	003f9306 	br	8111155c <__reset+0xfb0f155c>
81111710:	013ff844 	movi	r4,-31
81111714:	2085c83a 	sub	r2,r4,r2
81111718:	8888d83a 	srl	r4,r17,r2
8111171c:	00800804 	movi	r2,32
81111720:	18802126 	beq	r3,r2,811117a8 <__divdf3+0x8c4>
81111724:	00801004 	movi	r2,64
81111728:	10c5c83a 	sub	r2,r2,r3
8111172c:	8884983a 	sll	r2,r17,r2
81111730:	1204b03a 	or	r2,r2,r8
81111734:	1004c03a 	cmpne	r2,r2,zero
81111738:	2084b03a 	or	r2,r4,r2
8111173c:	144001cc 	andi	r17,r2,7
81111740:	88000d1e 	bne	r17,zero,81111778 <__divdf3+0x894>
81111744:	000b883a 	mov	r5,zero
81111748:	1024d0fa 	srli	r18,r2,3
8111174c:	98c0004c 	andi	r3,r19,1
81111750:	0005883a 	mov	r2,zero
81111754:	9464b03a 	or	r18,r18,r17
81111758:	003e4106 	br	81111060 <__reset+0xfb0f1060>
8111175c:	1007883a 	mov	r3,r2
81111760:	0023883a 	mov	r17,zero
81111764:	880a927a 	slli	r5,r17,9
81111768:	1805883a 	mov	r2,r3
8111176c:	8822977a 	slli	r17,r17,29
81111770:	280ad33a 	srli	r5,r5,12
81111774:	003ff406 	br	81111748 <__reset+0xfb0f1748>
81111778:	10c003cc 	andi	r3,r2,15
8111177c:	01000104 	movi	r4,4
81111780:	193ff626 	beq	r3,r4,8111175c <__reset+0xfb0f175c>
81111784:	0023883a 	mov	r17,zero
81111788:	003fca06 	br	811116b4 <__reset+0xfb0f16b4>
8111178c:	813fd336 	bltu	r16,r4,811116dc <__reset+0xfb0f16dc>
81111790:	1023883a 	mov	r17,r2
81111794:	003fa806 	br	81111638 <__reset+0xfb0f1638>
81111798:	b0ffd636 	bltu	r22,r3,811116f4 <__reset+0xfb0f16f4>
8111179c:	1011883a 	mov	r8,r2
811117a0:	b0ff341e 	bne	r22,r3,81111474 <__reset+0xfb0f1474>
811117a4:	003f3406 	br	81111478 <__reset+0xfb0f1478>
811117a8:	0005883a 	mov	r2,zero
811117ac:	003fe006 	br	81111730 <__reset+0xfb0f1730>
811117b0:	00800434 	movhi	r2,16
811117b4:	89400234 	orhi	r5,r17,8
811117b8:	10bfffc4 	addi	r2,r2,-1
811117bc:	b807883a 	mov	r3,r23
811117c0:	288a703a 	and	r5,r5,r2
811117c4:	4025883a 	mov	r18,r8
811117c8:	003e8206 	br	811111d4 <__reset+0xfb0f11d4>

811117cc <__eqdf2>:
811117cc:	2804d53a 	srli	r2,r5,20
811117d0:	3806d53a 	srli	r3,r7,20
811117d4:	02000434 	movhi	r8,16
811117d8:	423fffc4 	addi	r8,r8,-1
811117dc:	1081ffcc 	andi	r2,r2,2047
811117e0:	0281ffc4 	movi	r10,2047
811117e4:	2a12703a 	and	r9,r5,r8
811117e8:	18c1ffcc 	andi	r3,r3,2047
811117ec:	3a10703a 	and	r8,r7,r8
811117f0:	280ad7fa 	srli	r5,r5,31
811117f4:	380ed7fa 	srli	r7,r7,31
811117f8:	12801026 	beq	r2,r10,8111183c <__eqdf2+0x70>
811117fc:	0281ffc4 	movi	r10,2047
81111800:	1a800a26 	beq	r3,r10,8111182c <__eqdf2+0x60>
81111804:	10c00226 	beq	r2,r3,81111810 <__eqdf2+0x44>
81111808:	00800044 	movi	r2,1
8111180c:	f800283a 	ret
81111810:	4a3ffd1e 	bne	r9,r8,81111808 <__reset+0xfb0f1808>
81111814:	21bffc1e 	bne	r4,r6,81111808 <__reset+0xfb0f1808>
81111818:	29c00c26 	beq	r5,r7,8111184c <__eqdf2+0x80>
8111181c:	103ffa1e 	bne	r2,zero,81111808 <__reset+0xfb0f1808>
81111820:	2244b03a 	or	r2,r4,r9
81111824:	1004c03a 	cmpne	r2,r2,zero
81111828:	f800283a 	ret
8111182c:	3214b03a 	or	r10,r6,r8
81111830:	503ff426 	beq	r10,zero,81111804 <__reset+0xfb0f1804>
81111834:	00800044 	movi	r2,1
81111838:	f800283a 	ret
8111183c:	2254b03a 	or	r10,r4,r9
81111840:	503fee26 	beq	r10,zero,811117fc <__reset+0xfb0f17fc>
81111844:	00800044 	movi	r2,1
81111848:	f800283a 	ret
8111184c:	0005883a 	mov	r2,zero
81111850:	f800283a 	ret

81111854 <__gedf2>:
81111854:	2804d53a 	srli	r2,r5,20
81111858:	3806d53a 	srli	r3,r7,20
8111185c:	02000434 	movhi	r8,16
81111860:	423fffc4 	addi	r8,r8,-1
81111864:	1081ffcc 	andi	r2,r2,2047
81111868:	0241ffc4 	movi	r9,2047
8111186c:	2a14703a 	and	r10,r5,r8
81111870:	18c1ffcc 	andi	r3,r3,2047
81111874:	3a10703a 	and	r8,r7,r8
81111878:	280ad7fa 	srli	r5,r5,31
8111187c:	380ed7fa 	srli	r7,r7,31
81111880:	12401d26 	beq	r2,r9,811118f8 <__gedf2+0xa4>
81111884:	0241ffc4 	movi	r9,2047
81111888:	1a401226 	beq	r3,r9,811118d4 <__gedf2+0x80>
8111188c:	1000081e 	bne	r2,zero,811118b0 <__gedf2+0x5c>
81111890:	2296b03a 	or	r11,r4,r10
81111894:	5813003a 	cmpeq	r9,r11,zero
81111898:	1800091e 	bne	r3,zero,811118c0 <__gedf2+0x6c>
8111189c:	3218b03a 	or	r12,r6,r8
811118a0:	6000071e 	bne	r12,zero,811118c0 <__gedf2+0x6c>
811118a4:	0005883a 	mov	r2,zero
811118a8:	5800101e 	bne	r11,zero,811118ec <__gedf2+0x98>
811118ac:	f800283a 	ret
811118b0:	18000c1e 	bne	r3,zero,811118e4 <__gedf2+0x90>
811118b4:	3212b03a 	or	r9,r6,r8
811118b8:	48000c26 	beq	r9,zero,811118ec <__gedf2+0x98>
811118bc:	0013883a 	mov	r9,zero
811118c0:	39c03fcc 	andi	r7,r7,255
811118c4:	48000826 	beq	r9,zero,811118e8 <__gedf2+0x94>
811118c8:	38000926 	beq	r7,zero,811118f0 <__gedf2+0x9c>
811118cc:	00800044 	movi	r2,1
811118d0:	f800283a 	ret
811118d4:	3212b03a 	or	r9,r6,r8
811118d8:	483fec26 	beq	r9,zero,8111188c <__reset+0xfb0f188c>
811118dc:	00bfff84 	movi	r2,-2
811118e0:	f800283a 	ret
811118e4:	39c03fcc 	andi	r7,r7,255
811118e8:	29c00626 	beq	r5,r7,81111904 <__gedf2+0xb0>
811118ec:	283ff726 	beq	r5,zero,811118cc <__reset+0xfb0f18cc>
811118f0:	00bfffc4 	movi	r2,-1
811118f4:	f800283a 	ret
811118f8:	2292b03a 	or	r9,r4,r10
811118fc:	483fe126 	beq	r9,zero,81111884 <__reset+0xfb0f1884>
81111900:	003ff606 	br	811118dc <__reset+0xfb0f18dc>
81111904:	18bff916 	blt	r3,r2,811118ec <__reset+0xfb0f18ec>
81111908:	10c00316 	blt	r2,r3,81111918 <__gedf2+0xc4>
8111190c:	42bff736 	bltu	r8,r10,811118ec <__reset+0xfb0f18ec>
81111910:	52000326 	beq	r10,r8,81111920 <__gedf2+0xcc>
81111914:	5200042e 	bgeu	r10,r8,81111928 <__gedf2+0xd4>
81111918:	283fec1e 	bne	r5,zero,811118cc <__reset+0xfb0f18cc>
8111191c:	003ff406 	br	811118f0 <__reset+0xfb0f18f0>
81111920:	313ff236 	bltu	r6,r4,811118ec <__reset+0xfb0f18ec>
81111924:	21bffc36 	bltu	r4,r6,81111918 <__reset+0xfb0f1918>
81111928:	0005883a 	mov	r2,zero
8111192c:	f800283a 	ret

81111930 <__ledf2>:
81111930:	2804d53a 	srli	r2,r5,20
81111934:	3810d53a 	srli	r8,r7,20
81111938:	00c00434 	movhi	r3,16
8111193c:	18ffffc4 	addi	r3,r3,-1
81111940:	1081ffcc 	andi	r2,r2,2047
81111944:	0241ffc4 	movi	r9,2047
81111948:	28d4703a 	and	r10,r5,r3
8111194c:	4201ffcc 	andi	r8,r8,2047
81111950:	38c6703a 	and	r3,r7,r3
81111954:	280ad7fa 	srli	r5,r5,31
81111958:	380ed7fa 	srli	r7,r7,31
8111195c:	12401f26 	beq	r2,r9,811119dc <__ledf2+0xac>
81111960:	0241ffc4 	movi	r9,2047
81111964:	42401426 	beq	r8,r9,811119b8 <__ledf2+0x88>
81111968:	1000091e 	bne	r2,zero,81111990 <__ledf2+0x60>
8111196c:	2296b03a 	or	r11,r4,r10
81111970:	5813003a 	cmpeq	r9,r11,zero
81111974:	29403fcc 	andi	r5,r5,255
81111978:	40000a1e 	bne	r8,zero,811119a4 <__ledf2+0x74>
8111197c:	30d8b03a 	or	r12,r6,r3
81111980:	6000081e 	bne	r12,zero,811119a4 <__ledf2+0x74>
81111984:	0005883a 	mov	r2,zero
81111988:	5800111e 	bne	r11,zero,811119d0 <__ledf2+0xa0>
8111198c:	f800283a 	ret
81111990:	29403fcc 	andi	r5,r5,255
81111994:	40000c1e 	bne	r8,zero,811119c8 <__ledf2+0x98>
81111998:	30d2b03a 	or	r9,r6,r3
8111199c:	48000c26 	beq	r9,zero,811119d0 <__ledf2+0xa0>
811119a0:	0013883a 	mov	r9,zero
811119a4:	39c03fcc 	andi	r7,r7,255
811119a8:	48000826 	beq	r9,zero,811119cc <__ledf2+0x9c>
811119ac:	38001126 	beq	r7,zero,811119f4 <__ledf2+0xc4>
811119b0:	00800044 	movi	r2,1
811119b4:	f800283a 	ret
811119b8:	30d2b03a 	or	r9,r6,r3
811119bc:	483fea26 	beq	r9,zero,81111968 <__reset+0xfb0f1968>
811119c0:	00800084 	movi	r2,2
811119c4:	f800283a 	ret
811119c8:	39c03fcc 	andi	r7,r7,255
811119cc:	39400726 	beq	r7,r5,811119ec <__ledf2+0xbc>
811119d0:	2800081e 	bne	r5,zero,811119f4 <__ledf2+0xc4>
811119d4:	00800044 	movi	r2,1
811119d8:	f800283a 	ret
811119dc:	2292b03a 	or	r9,r4,r10
811119e0:	483fdf26 	beq	r9,zero,81111960 <__reset+0xfb0f1960>
811119e4:	00800084 	movi	r2,2
811119e8:	f800283a 	ret
811119ec:	4080030e 	bge	r8,r2,811119fc <__ledf2+0xcc>
811119f0:	383fef26 	beq	r7,zero,811119b0 <__reset+0xfb0f19b0>
811119f4:	00bfffc4 	movi	r2,-1
811119f8:	f800283a 	ret
811119fc:	123feb16 	blt	r2,r8,811119ac <__reset+0xfb0f19ac>
81111a00:	1abff336 	bltu	r3,r10,811119d0 <__reset+0xfb0f19d0>
81111a04:	50c00326 	beq	r10,r3,81111a14 <__ledf2+0xe4>
81111a08:	50c0042e 	bgeu	r10,r3,81111a1c <__ledf2+0xec>
81111a0c:	283fe81e 	bne	r5,zero,811119b0 <__reset+0xfb0f19b0>
81111a10:	003ff806 	br	811119f4 <__reset+0xfb0f19f4>
81111a14:	313fee36 	bltu	r6,r4,811119d0 <__reset+0xfb0f19d0>
81111a18:	21bffc36 	bltu	r4,r6,81111a0c <__reset+0xfb0f1a0c>
81111a1c:	0005883a 	mov	r2,zero
81111a20:	f800283a 	ret

81111a24 <__muldf3>:
81111a24:	defff304 	addi	sp,sp,-52
81111a28:	2804d53a 	srli	r2,r5,20
81111a2c:	dd800915 	stw	r22,36(sp)
81111a30:	282cd7fa 	srli	r22,r5,31
81111a34:	dc000315 	stw	r16,12(sp)
81111a38:	04000434 	movhi	r16,16
81111a3c:	dd400815 	stw	r21,32(sp)
81111a40:	dc800515 	stw	r18,20(sp)
81111a44:	843fffc4 	addi	r16,r16,-1
81111a48:	dfc00c15 	stw	ra,48(sp)
81111a4c:	df000b15 	stw	fp,44(sp)
81111a50:	ddc00a15 	stw	r23,40(sp)
81111a54:	dd000715 	stw	r20,28(sp)
81111a58:	dcc00615 	stw	r19,24(sp)
81111a5c:	dc400415 	stw	r17,16(sp)
81111a60:	1481ffcc 	andi	r18,r2,2047
81111a64:	2c20703a 	and	r16,r5,r16
81111a68:	b02b883a 	mov	r21,r22
81111a6c:	b2403fcc 	andi	r9,r22,255
81111a70:	90006026 	beq	r18,zero,81111bf4 <__muldf3+0x1d0>
81111a74:	0081ffc4 	movi	r2,2047
81111a78:	2029883a 	mov	r20,r4
81111a7c:	90803626 	beq	r18,r2,81111b58 <__muldf3+0x134>
81111a80:	80800434 	orhi	r2,r16,16
81111a84:	100490fa 	slli	r2,r2,3
81111a88:	2020d77a 	srli	r16,r4,29
81111a8c:	202890fa 	slli	r20,r4,3
81111a90:	94bf0044 	addi	r18,r18,-1023
81111a94:	80a0b03a 	or	r16,r16,r2
81111a98:	0027883a 	mov	r19,zero
81111a9c:	0039883a 	mov	fp,zero
81111aa0:	3804d53a 	srli	r2,r7,20
81111aa4:	382ed7fa 	srli	r23,r7,31
81111aa8:	04400434 	movhi	r17,16
81111aac:	8c7fffc4 	addi	r17,r17,-1
81111ab0:	1081ffcc 	andi	r2,r2,2047
81111ab4:	3011883a 	mov	r8,r6
81111ab8:	3c62703a 	and	r17,r7,r17
81111abc:	ba803fcc 	andi	r10,r23,255
81111ac0:	10006d26 	beq	r2,zero,81111c78 <__muldf3+0x254>
81111ac4:	00c1ffc4 	movi	r3,2047
81111ac8:	10c06526 	beq	r2,r3,81111c60 <__muldf3+0x23c>
81111acc:	88c00434 	orhi	r3,r17,16
81111ad0:	180690fa 	slli	r3,r3,3
81111ad4:	3022d77a 	srli	r17,r6,29
81111ad8:	301090fa 	slli	r8,r6,3
81111adc:	10bf0044 	addi	r2,r2,-1023
81111ae0:	88e2b03a 	or	r17,r17,r3
81111ae4:	000b883a 	mov	r5,zero
81111ae8:	9085883a 	add	r2,r18,r2
81111aec:	2cc8b03a 	or	r4,r5,r19
81111af0:	00c003c4 	movi	r3,15
81111af4:	bdacf03a 	xor	r22,r23,r22
81111af8:	12c00044 	addi	r11,r2,1
81111afc:	19009936 	bltu	r3,r4,81111d64 <__muldf3+0x340>
81111b00:	200890ba 	slli	r4,r4,2
81111b04:	00e04474 	movhi	r3,33041
81111b08:	18c6c604 	addi	r3,r3,6936
81111b0c:	20c9883a 	add	r4,r4,r3
81111b10:	20c00017 	ldw	r3,0(r4)
81111b14:	1800683a 	jmp	r3
81111b18:	81111d64 	muli	r4,r16,17525
81111b1c:	81111b78 	rdprs	r4,r16,17517
81111b20:	81111b78 	rdprs	r4,r16,17517
81111b24:	81111b74 	orhi	r4,r16,17517
81111b28:	81111d40 	call	881111d4 <__reset+0x20f11d4>
81111b2c:	81111d40 	call	881111d4 <__reset+0x20f11d4>
81111b30:	81111d28 	cmpgeui	r4,r16,17524
81111b34:	81111b74 	orhi	r4,r16,17517
81111b38:	81111d40 	call	881111d4 <__reset+0x20f11d4>
81111b3c:	81111d28 	cmpgeui	r4,r16,17524
81111b40:	81111d40 	call	881111d4 <__reset+0x20f11d4>
81111b44:	81111b74 	orhi	r4,r16,17517
81111b48:	81111d50 	cmplti	r4,r16,17525
81111b4c:	81111d50 	cmplti	r4,r16,17525
81111b50:	81111d50 	cmplti	r4,r16,17525
81111b54:	81111f6c 	andhi	r4,r16,17533
81111b58:	2404b03a 	or	r2,r4,r16
81111b5c:	10006f1e 	bne	r2,zero,81111d1c <__muldf3+0x2f8>
81111b60:	04c00204 	movi	r19,8
81111b64:	0021883a 	mov	r16,zero
81111b68:	0029883a 	mov	r20,zero
81111b6c:	07000084 	movi	fp,2
81111b70:	003fcb06 	br	81111aa0 <__reset+0xfb0f1aa0>
81111b74:	502d883a 	mov	r22,r10
81111b78:	00800084 	movi	r2,2
81111b7c:	28805726 	beq	r5,r2,81111cdc <__muldf3+0x2b8>
81111b80:	008000c4 	movi	r2,3
81111b84:	28816626 	beq	r5,r2,81112120 <__muldf3+0x6fc>
81111b88:	00800044 	movi	r2,1
81111b8c:	2881411e 	bne	r5,r2,81112094 <__muldf3+0x670>
81111b90:	b02b883a 	mov	r21,r22
81111b94:	0005883a 	mov	r2,zero
81111b98:	000b883a 	mov	r5,zero
81111b9c:	0029883a 	mov	r20,zero
81111ba0:	1004953a 	slli	r2,r2,20
81111ba4:	a8c03fcc 	andi	r3,r21,255
81111ba8:	04400434 	movhi	r17,16
81111bac:	8c7fffc4 	addi	r17,r17,-1
81111bb0:	180697fa 	slli	r3,r3,31
81111bb4:	2c4a703a 	and	r5,r5,r17
81111bb8:	288ab03a 	or	r5,r5,r2
81111bbc:	28c6b03a 	or	r3,r5,r3
81111bc0:	a005883a 	mov	r2,r20
81111bc4:	dfc00c17 	ldw	ra,48(sp)
81111bc8:	df000b17 	ldw	fp,44(sp)
81111bcc:	ddc00a17 	ldw	r23,40(sp)
81111bd0:	dd800917 	ldw	r22,36(sp)
81111bd4:	dd400817 	ldw	r21,32(sp)
81111bd8:	dd000717 	ldw	r20,28(sp)
81111bdc:	dcc00617 	ldw	r19,24(sp)
81111be0:	dc800517 	ldw	r18,20(sp)
81111be4:	dc400417 	ldw	r17,16(sp)
81111be8:	dc000317 	ldw	r16,12(sp)
81111bec:	dec00d04 	addi	sp,sp,52
81111bf0:	f800283a 	ret
81111bf4:	2404b03a 	or	r2,r4,r16
81111bf8:	2027883a 	mov	r19,r4
81111bfc:	10004226 	beq	r2,zero,81111d08 <__muldf3+0x2e4>
81111c00:	8000fc26 	beq	r16,zero,81111ff4 <__muldf3+0x5d0>
81111c04:	8009883a 	mov	r4,r16
81111c08:	d9800215 	stw	r6,8(sp)
81111c0c:	d9c00015 	stw	r7,0(sp)
81111c10:	da400115 	stw	r9,4(sp)
81111c14:	1102aec0 	call	81102aec <__clzsi2>
81111c18:	d9800217 	ldw	r6,8(sp)
81111c1c:	d9c00017 	ldw	r7,0(sp)
81111c20:	da400117 	ldw	r9,4(sp)
81111c24:	113ffd44 	addi	r4,r2,-11
81111c28:	00c00704 	movi	r3,28
81111c2c:	1900ed16 	blt	r3,r4,81111fe4 <__muldf3+0x5c0>
81111c30:	00c00744 	movi	r3,29
81111c34:	147ffe04 	addi	r17,r2,-8
81111c38:	1907c83a 	sub	r3,r3,r4
81111c3c:	8460983a 	sll	r16,r16,r17
81111c40:	98c6d83a 	srl	r3,r19,r3
81111c44:	9c68983a 	sll	r20,r19,r17
81111c48:	1c20b03a 	or	r16,r3,r16
81111c4c:	1080fcc4 	addi	r2,r2,1011
81111c50:	00a5c83a 	sub	r18,zero,r2
81111c54:	0027883a 	mov	r19,zero
81111c58:	0039883a 	mov	fp,zero
81111c5c:	003f9006 	br	81111aa0 <__reset+0xfb0f1aa0>
81111c60:	3446b03a 	or	r3,r6,r17
81111c64:	1800261e 	bne	r3,zero,81111d00 <__muldf3+0x2dc>
81111c68:	0023883a 	mov	r17,zero
81111c6c:	0011883a 	mov	r8,zero
81111c70:	01400084 	movi	r5,2
81111c74:	003f9c06 	br	81111ae8 <__reset+0xfb0f1ae8>
81111c78:	3446b03a 	or	r3,r6,r17
81111c7c:	18001c26 	beq	r3,zero,81111cf0 <__muldf3+0x2cc>
81111c80:	8800ce26 	beq	r17,zero,81111fbc <__muldf3+0x598>
81111c84:	8809883a 	mov	r4,r17
81111c88:	d9800215 	stw	r6,8(sp)
81111c8c:	da400115 	stw	r9,4(sp)
81111c90:	da800015 	stw	r10,0(sp)
81111c94:	1102aec0 	call	81102aec <__clzsi2>
81111c98:	d9800217 	ldw	r6,8(sp)
81111c9c:	da400117 	ldw	r9,4(sp)
81111ca0:	da800017 	ldw	r10,0(sp)
81111ca4:	113ffd44 	addi	r4,r2,-11
81111ca8:	00c00704 	movi	r3,28
81111cac:	1900bf16 	blt	r3,r4,81111fac <__muldf3+0x588>
81111cb0:	00c00744 	movi	r3,29
81111cb4:	123ffe04 	addi	r8,r2,-8
81111cb8:	1907c83a 	sub	r3,r3,r4
81111cbc:	8a22983a 	sll	r17,r17,r8
81111cc0:	30c6d83a 	srl	r3,r6,r3
81111cc4:	3210983a 	sll	r8,r6,r8
81111cc8:	1c62b03a 	or	r17,r3,r17
81111ccc:	1080fcc4 	addi	r2,r2,1011
81111cd0:	0085c83a 	sub	r2,zero,r2
81111cd4:	000b883a 	mov	r5,zero
81111cd8:	003f8306 	br	81111ae8 <__reset+0xfb0f1ae8>
81111cdc:	b02b883a 	mov	r21,r22
81111ce0:	0081ffc4 	movi	r2,2047
81111ce4:	000b883a 	mov	r5,zero
81111ce8:	0029883a 	mov	r20,zero
81111cec:	003fac06 	br	81111ba0 <__reset+0xfb0f1ba0>
81111cf0:	0023883a 	mov	r17,zero
81111cf4:	0011883a 	mov	r8,zero
81111cf8:	01400044 	movi	r5,1
81111cfc:	003f7a06 	br	81111ae8 <__reset+0xfb0f1ae8>
81111d00:	014000c4 	movi	r5,3
81111d04:	003f7806 	br	81111ae8 <__reset+0xfb0f1ae8>
81111d08:	04c00104 	movi	r19,4
81111d0c:	0021883a 	mov	r16,zero
81111d10:	0029883a 	mov	r20,zero
81111d14:	07000044 	movi	fp,1
81111d18:	003f6106 	br	81111aa0 <__reset+0xfb0f1aa0>
81111d1c:	04c00304 	movi	r19,12
81111d20:	070000c4 	movi	fp,3
81111d24:	003f5e06 	br	81111aa0 <__reset+0xfb0f1aa0>
81111d28:	01400434 	movhi	r5,16
81111d2c:	002b883a 	mov	r21,zero
81111d30:	297fffc4 	addi	r5,r5,-1
81111d34:	053fffc4 	movi	r20,-1
81111d38:	0081ffc4 	movi	r2,2047
81111d3c:	003f9806 	br	81111ba0 <__reset+0xfb0f1ba0>
81111d40:	8023883a 	mov	r17,r16
81111d44:	a011883a 	mov	r8,r20
81111d48:	e00b883a 	mov	r5,fp
81111d4c:	003f8a06 	br	81111b78 <__reset+0xfb0f1b78>
81111d50:	8023883a 	mov	r17,r16
81111d54:	a011883a 	mov	r8,r20
81111d58:	482d883a 	mov	r22,r9
81111d5c:	e00b883a 	mov	r5,fp
81111d60:	003f8506 	br	81111b78 <__reset+0xfb0f1b78>
81111d64:	a00ad43a 	srli	r5,r20,16
81111d68:	401ad43a 	srli	r13,r8,16
81111d6c:	a53fffcc 	andi	r20,r20,65535
81111d70:	423fffcc 	andi	r8,r8,65535
81111d74:	4519383a 	mul	r12,r8,r20
81111d78:	4147383a 	mul	r3,r8,r5
81111d7c:	6d09383a 	mul	r4,r13,r20
81111d80:	600cd43a 	srli	r6,r12,16
81111d84:	2b5d383a 	mul	r14,r5,r13
81111d88:	20c9883a 	add	r4,r4,r3
81111d8c:	310d883a 	add	r6,r6,r4
81111d90:	30c0022e 	bgeu	r6,r3,81111d9c <__muldf3+0x378>
81111d94:	00c00074 	movhi	r3,1
81111d98:	70dd883a 	add	r14,r14,r3
81111d9c:	8826d43a 	srli	r19,r17,16
81111da0:	8bffffcc 	andi	r15,r17,65535
81111da4:	7d23383a 	mul	r17,r15,r20
81111da8:	7949383a 	mul	r4,r15,r5
81111dac:	9d29383a 	mul	r20,r19,r20
81111db0:	8814d43a 	srli	r10,r17,16
81111db4:	3012943a 	slli	r9,r6,16
81111db8:	a129883a 	add	r20,r20,r4
81111dbc:	633fffcc 	andi	r12,r12,65535
81111dc0:	5515883a 	add	r10,r10,r20
81111dc4:	3006d43a 	srli	r3,r6,16
81111dc8:	4b13883a 	add	r9,r9,r12
81111dcc:	2ccb383a 	mul	r5,r5,r19
81111dd0:	5100022e 	bgeu	r10,r4,81111ddc <__muldf3+0x3b8>
81111dd4:	01000074 	movhi	r4,1
81111dd8:	290b883a 	add	r5,r5,r4
81111ddc:	802ad43a 	srli	r21,r16,16
81111de0:	843fffcc 	andi	r16,r16,65535
81111de4:	440d383a 	mul	r6,r8,r16
81111de8:	4565383a 	mul	r18,r8,r21
81111dec:	8349383a 	mul	r4,r16,r13
81111df0:	500e943a 	slli	r7,r10,16
81111df4:	3010d43a 	srli	r8,r6,16
81111df8:	5028d43a 	srli	r20,r10,16
81111dfc:	2489883a 	add	r4,r4,r18
81111e00:	8abfffcc 	andi	r10,r17,65535
81111e04:	3a95883a 	add	r10,r7,r10
81111e08:	4119883a 	add	r12,r8,r4
81111e0c:	a169883a 	add	r20,r20,r5
81111e10:	1a87883a 	add	r3,r3,r10
81111e14:	6d5b383a 	mul	r13,r13,r21
81111e18:	6480022e 	bgeu	r12,r18,81111e24 <__muldf3+0x400>
81111e1c:	01000074 	movhi	r4,1
81111e20:	691b883a 	add	r13,r13,r4
81111e24:	7c25383a 	mul	r18,r15,r16
81111e28:	7d4b383a 	mul	r5,r15,r21
81111e2c:	84cf383a 	mul	r7,r16,r19
81111e30:	901ed43a 	srli	r15,r18,16
81111e34:	6008d43a 	srli	r4,r12,16
81111e38:	6010943a 	slli	r8,r12,16
81111e3c:	394f883a 	add	r7,r7,r5
81111e40:	333fffcc 	andi	r12,r6,65535
81111e44:	79df883a 	add	r15,r15,r7
81111e48:	235b883a 	add	r13,r4,r13
81111e4c:	9d63383a 	mul	r17,r19,r21
81111e50:	4309883a 	add	r4,r8,r12
81111e54:	7940022e 	bgeu	r15,r5,81111e60 <__muldf3+0x43c>
81111e58:	01400074 	movhi	r5,1
81111e5c:	8963883a 	add	r17,r17,r5
81111e60:	780a943a 	slli	r5,r15,16
81111e64:	91bfffcc 	andi	r6,r18,65535
81111e68:	70c7883a 	add	r3,r14,r3
81111e6c:	298d883a 	add	r6,r5,r6
81111e70:	1a8f803a 	cmpltu	r7,r3,r10
81111e74:	350b883a 	add	r5,r6,r20
81111e78:	20c7883a 	add	r3,r4,r3
81111e7c:	3955883a 	add	r10,r7,r5
81111e80:	1909803a 	cmpltu	r4,r3,r4
81111e84:	6a91883a 	add	r8,r13,r10
81111e88:	780cd43a 	srli	r6,r15,16
81111e8c:	2219883a 	add	r12,r4,r8
81111e90:	2d0b803a 	cmpltu	r5,r5,r20
81111e94:	51cf803a 	cmpltu	r7,r10,r7
81111e98:	29ceb03a 	or	r7,r5,r7
81111e9c:	4351803a 	cmpltu	r8,r8,r13
81111ea0:	610b803a 	cmpltu	r5,r12,r4
81111ea4:	4148b03a 	or	r4,r8,r5
81111ea8:	398f883a 	add	r7,r7,r6
81111eac:	3909883a 	add	r4,r7,r4
81111eb0:	1810927a 	slli	r8,r3,9
81111eb4:	2449883a 	add	r4,r4,r17
81111eb8:	2008927a 	slli	r4,r4,9
81111ebc:	6022d5fa 	srli	r17,r12,23
81111ec0:	1806d5fa 	srli	r3,r3,23
81111ec4:	4252b03a 	or	r9,r8,r9
81111ec8:	600a927a 	slli	r5,r12,9
81111ecc:	4810c03a 	cmpne	r8,r9,zero
81111ed0:	2462b03a 	or	r17,r4,r17
81111ed4:	40c6b03a 	or	r3,r8,r3
81111ed8:	8900402c 	andhi	r4,r17,256
81111edc:	1950b03a 	or	r8,r3,r5
81111ee0:	20000726 	beq	r4,zero,81111f00 <__muldf3+0x4dc>
81111ee4:	4006d07a 	srli	r3,r8,1
81111ee8:	880497fa 	slli	r2,r17,31
81111eec:	4200004c 	andi	r8,r8,1
81111ef0:	8822d07a 	srli	r17,r17,1
81111ef4:	1a10b03a 	or	r8,r3,r8
81111ef8:	1210b03a 	or	r8,r2,r8
81111efc:	5805883a 	mov	r2,r11
81111f00:	1140ffc4 	addi	r5,r2,1023
81111f04:	0140440e 	bge	zero,r5,81112018 <__muldf3+0x5f4>
81111f08:	40c001cc 	andi	r3,r8,7
81111f0c:	18000726 	beq	r3,zero,81111f2c <__muldf3+0x508>
81111f10:	40c003cc 	andi	r3,r8,15
81111f14:	01000104 	movi	r4,4
81111f18:	19000426 	beq	r3,r4,81111f2c <__muldf3+0x508>
81111f1c:	4107883a 	add	r3,r8,r4
81111f20:	1a11803a 	cmpltu	r8,r3,r8
81111f24:	8a23883a 	add	r17,r17,r8
81111f28:	1811883a 	mov	r8,r3
81111f2c:	88c0402c 	andhi	r3,r17,256
81111f30:	18000426 	beq	r3,zero,81111f44 <__muldf3+0x520>
81111f34:	11410004 	addi	r5,r2,1024
81111f38:	00bfc034 	movhi	r2,65280
81111f3c:	10bfffc4 	addi	r2,r2,-1
81111f40:	88a2703a 	and	r17,r17,r2
81111f44:	0081ff84 	movi	r2,2046
81111f48:	117f6416 	blt	r2,r5,81111cdc <__reset+0xfb0f1cdc>
81111f4c:	8828977a 	slli	r20,r17,29
81111f50:	4010d0fa 	srli	r8,r8,3
81111f54:	8822927a 	slli	r17,r17,9
81111f58:	2881ffcc 	andi	r2,r5,2047
81111f5c:	a228b03a 	or	r20,r20,r8
81111f60:	880ad33a 	srli	r5,r17,12
81111f64:	b02b883a 	mov	r21,r22
81111f68:	003f0d06 	br	81111ba0 <__reset+0xfb0f1ba0>
81111f6c:	8080022c 	andhi	r2,r16,8
81111f70:	10000926 	beq	r2,zero,81111f98 <__muldf3+0x574>
81111f74:	8880022c 	andhi	r2,r17,8
81111f78:	1000071e 	bne	r2,zero,81111f98 <__muldf3+0x574>
81111f7c:	00800434 	movhi	r2,16
81111f80:	89400234 	orhi	r5,r17,8
81111f84:	10bfffc4 	addi	r2,r2,-1
81111f88:	b82b883a 	mov	r21,r23
81111f8c:	288a703a 	and	r5,r5,r2
81111f90:	4029883a 	mov	r20,r8
81111f94:	003f6806 	br	81111d38 <__reset+0xfb0f1d38>
81111f98:	00800434 	movhi	r2,16
81111f9c:	81400234 	orhi	r5,r16,8
81111fa0:	10bfffc4 	addi	r2,r2,-1
81111fa4:	288a703a 	and	r5,r5,r2
81111fa8:	003f6306 	br	81111d38 <__reset+0xfb0f1d38>
81111fac:	147ff604 	addi	r17,r2,-40
81111fb0:	3462983a 	sll	r17,r6,r17
81111fb4:	0011883a 	mov	r8,zero
81111fb8:	003f4406 	br	81111ccc <__reset+0xfb0f1ccc>
81111fbc:	3009883a 	mov	r4,r6
81111fc0:	d9800215 	stw	r6,8(sp)
81111fc4:	da400115 	stw	r9,4(sp)
81111fc8:	da800015 	stw	r10,0(sp)
81111fcc:	1102aec0 	call	81102aec <__clzsi2>
81111fd0:	10800804 	addi	r2,r2,32
81111fd4:	da800017 	ldw	r10,0(sp)
81111fd8:	da400117 	ldw	r9,4(sp)
81111fdc:	d9800217 	ldw	r6,8(sp)
81111fe0:	003f3006 	br	81111ca4 <__reset+0xfb0f1ca4>
81111fe4:	143ff604 	addi	r16,r2,-40
81111fe8:	9c20983a 	sll	r16,r19,r16
81111fec:	0029883a 	mov	r20,zero
81111ff0:	003f1606 	br	81111c4c <__reset+0xfb0f1c4c>
81111ff4:	d9800215 	stw	r6,8(sp)
81111ff8:	d9c00015 	stw	r7,0(sp)
81111ffc:	da400115 	stw	r9,4(sp)
81112000:	1102aec0 	call	81102aec <__clzsi2>
81112004:	10800804 	addi	r2,r2,32
81112008:	da400117 	ldw	r9,4(sp)
8111200c:	d9c00017 	ldw	r7,0(sp)
81112010:	d9800217 	ldw	r6,8(sp)
81112014:	003f0306 	br	81111c24 <__reset+0xfb0f1c24>
81112018:	00c00044 	movi	r3,1
8111201c:	1947c83a 	sub	r3,r3,r5
81112020:	00800e04 	movi	r2,56
81112024:	10feda16 	blt	r2,r3,81111b90 <__reset+0xfb0f1b90>
81112028:	008007c4 	movi	r2,31
8111202c:	10c01b16 	blt	r2,r3,8111209c <__muldf3+0x678>
81112030:	00800804 	movi	r2,32
81112034:	10c5c83a 	sub	r2,r2,r3
81112038:	888a983a 	sll	r5,r17,r2
8111203c:	40c8d83a 	srl	r4,r8,r3
81112040:	4084983a 	sll	r2,r8,r2
81112044:	88e2d83a 	srl	r17,r17,r3
81112048:	2906b03a 	or	r3,r5,r4
8111204c:	1004c03a 	cmpne	r2,r2,zero
81112050:	1886b03a 	or	r3,r3,r2
81112054:	188001cc 	andi	r2,r3,7
81112058:	10000726 	beq	r2,zero,81112078 <__muldf3+0x654>
8111205c:	188003cc 	andi	r2,r3,15
81112060:	01000104 	movi	r4,4
81112064:	11000426 	beq	r2,r4,81112078 <__muldf3+0x654>
81112068:	1805883a 	mov	r2,r3
8111206c:	10c00104 	addi	r3,r2,4
81112070:	1885803a 	cmpltu	r2,r3,r2
81112074:	88a3883a 	add	r17,r17,r2
81112078:	8880202c 	andhi	r2,r17,128
8111207c:	10001c26 	beq	r2,zero,811120f0 <__muldf3+0x6cc>
81112080:	b02b883a 	mov	r21,r22
81112084:	00800044 	movi	r2,1
81112088:	000b883a 	mov	r5,zero
8111208c:	0029883a 	mov	r20,zero
81112090:	003ec306 	br	81111ba0 <__reset+0xfb0f1ba0>
81112094:	5805883a 	mov	r2,r11
81112098:	003f9906 	br	81111f00 <__reset+0xfb0f1f00>
8111209c:	00bff844 	movi	r2,-31
811120a0:	1145c83a 	sub	r2,r2,r5
811120a4:	8888d83a 	srl	r4,r17,r2
811120a8:	00800804 	movi	r2,32
811120ac:	18801a26 	beq	r3,r2,81112118 <__muldf3+0x6f4>
811120b0:	00801004 	movi	r2,64
811120b4:	10c5c83a 	sub	r2,r2,r3
811120b8:	8884983a 	sll	r2,r17,r2
811120bc:	1204b03a 	or	r2,r2,r8
811120c0:	1004c03a 	cmpne	r2,r2,zero
811120c4:	2084b03a 	or	r2,r4,r2
811120c8:	144001cc 	andi	r17,r2,7
811120cc:	88000d1e 	bne	r17,zero,81112104 <__muldf3+0x6e0>
811120d0:	000b883a 	mov	r5,zero
811120d4:	1028d0fa 	srli	r20,r2,3
811120d8:	b02b883a 	mov	r21,r22
811120dc:	0005883a 	mov	r2,zero
811120e0:	a468b03a 	or	r20,r20,r17
811120e4:	003eae06 	br	81111ba0 <__reset+0xfb0f1ba0>
811120e8:	1007883a 	mov	r3,r2
811120ec:	0023883a 	mov	r17,zero
811120f0:	880a927a 	slli	r5,r17,9
811120f4:	1805883a 	mov	r2,r3
811120f8:	8822977a 	slli	r17,r17,29
811120fc:	280ad33a 	srli	r5,r5,12
81112100:	003ff406 	br	811120d4 <__reset+0xfb0f20d4>
81112104:	10c003cc 	andi	r3,r2,15
81112108:	01000104 	movi	r4,4
8111210c:	193ff626 	beq	r3,r4,811120e8 <__reset+0xfb0f20e8>
81112110:	0023883a 	mov	r17,zero
81112114:	003fd506 	br	8111206c <__reset+0xfb0f206c>
81112118:	0005883a 	mov	r2,zero
8111211c:	003fe706 	br	811120bc <__reset+0xfb0f20bc>
81112120:	00800434 	movhi	r2,16
81112124:	89400234 	orhi	r5,r17,8
81112128:	10bfffc4 	addi	r2,r2,-1
8111212c:	b02b883a 	mov	r21,r22
81112130:	288a703a 	and	r5,r5,r2
81112134:	4029883a 	mov	r20,r8
81112138:	003eff06 	br	81111d38 <__reset+0xfb0f1d38>

8111213c <__subdf3>:
8111213c:	02000434 	movhi	r8,16
81112140:	423fffc4 	addi	r8,r8,-1
81112144:	defffb04 	addi	sp,sp,-20
81112148:	2a14703a 	and	r10,r5,r8
8111214c:	3812d53a 	srli	r9,r7,20
81112150:	3a10703a 	and	r8,r7,r8
81112154:	2006d77a 	srli	r3,r4,29
81112158:	3004d77a 	srli	r2,r6,29
8111215c:	dc000015 	stw	r16,0(sp)
81112160:	501490fa 	slli	r10,r10,3
81112164:	2820d53a 	srli	r16,r5,20
81112168:	401090fa 	slli	r8,r8,3
8111216c:	dc800215 	stw	r18,8(sp)
81112170:	dc400115 	stw	r17,4(sp)
81112174:	dfc00415 	stw	ra,16(sp)
81112178:	202290fa 	slli	r17,r4,3
8111217c:	dcc00315 	stw	r19,12(sp)
81112180:	4a41ffcc 	andi	r9,r9,2047
81112184:	0101ffc4 	movi	r4,2047
81112188:	2824d7fa 	srli	r18,r5,31
8111218c:	8401ffcc 	andi	r16,r16,2047
81112190:	50c6b03a 	or	r3,r10,r3
81112194:	380ed7fa 	srli	r7,r7,31
81112198:	408ab03a 	or	r5,r8,r2
8111219c:	300c90fa 	slli	r6,r6,3
811121a0:	49009626 	beq	r9,r4,811123fc <__subdf3+0x2c0>
811121a4:	39c0005c 	xori	r7,r7,1
811121a8:	8245c83a 	sub	r2,r16,r9
811121ac:	3c807426 	beq	r7,r18,81112380 <__subdf3+0x244>
811121b0:	0080af0e 	bge	zero,r2,81112470 <__subdf3+0x334>
811121b4:	48002a1e 	bne	r9,zero,81112260 <__subdf3+0x124>
811121b8:	2988b03a 	or	r4,r5,r6
811121bc:	20009a1e 	bne	r4,zero,81112428 <__subdf3+0x2ec>
811121c0:	888001cc 	andi	r2,r17,7
811121c4:	10000726 	beq	r2,zero,811121e4 <__subdf3+0xa8>
811121c8:	888003cc 	andi	r2,r17,15
811121cc:	01000104 	movi	r4,4
811121d0:	11000426 	beq	r2,r4,811121e4 <__subdf3+0xa8>
811121d4:	890b883a 	add	r5,r17,r4
811121d8:	2c63803a 	cmpltu	r17,r5,r17
811121dc:	1c47883a 	add	r3,r3,r17
811121e0:	2823883a 	mov	r17,r5
811121e4:	1880202c 	andhi	r2,r3,128
811121e8:	10005926 	beq	r2,zero,81112350 <__subdf3+0x214>
811121ec:	84000044 	addi	r16,r16,1
811121f0:	0081ffc4 	movi	r2,2047
811121f4:	8080be26 	beq	r16,r2,811124f0 <__subdf3+0x3b4>
811121f8:	017fe034 	movhi	r5,65408
811121fc:	297fffc4 	addi	r5,r5,-1
81112200:	1946703a 	and	r3,r3,r5
81112204:	1804977a 	slli	r2,r3,29
81112208:	1806927a 	slli	r3,r3,9
8111220c:	8822d0fa 	srli	r17,r17,3
81112210:	8401ffcc 	andi	r16,r16,2047
81112214:	180ad33a 	srli	r5,r3,12
81112218:	9100004c 	andi	r4,r18,1
8111221c:	1444b03a 	or	r2,r2,r17
81112220:	80c1ffcc 	andi	r3,r16,2047
81112224:	1820953a 	slli	r16,r3,20
81112228:	20c03fcc 	andi	r3,r4,255
8111222c:	180897fa 	slli	r4,r3,31
81112230:	00c00434 	movhi	r3,16
81112234:	18ffffc4 	addi	r3,r3,-1
81112238:	28c6703a 	and	r3,r5,r3
8111223c:	1c06b03a 	or	r3,r3,r16
81112240:	1906b03a 	or	r3,r3,r4
81112244:	dfc00417 	ldw	ra,16(sp)
81112248:	dcc00317 	ldw	r19,12(sp)
8111224c:	dc800217 	ldw	r18,8(sp)
81112250:	dc400117 	ldw	r17,4(sp)
81112254:	dc000017 	ldw	r16,0(sp)
81112258:	dec00504 	addi	sp,sp,20
8111225c:	f800283a 	ret
81112260:	0101ffc4 	movi	r4,2047
81112264:	813fd626 	beq	r16,r4,811121c0 <__reset+0xfb0f21c0>
81112268:	29402034 	orhi	r5,r5,128
8111226c:	01000e04 	movi	r4,56
81112270:	2080a316 	blt	r4,r2,81112500 <__subdf3+0x3c4>
81112274:	010007c4 	movi	r4,31
81112278:	2080c616 	blt	r4,r2,81112594 <__subdf3+0x458>
8111227c:	01000804 	movi	r4,32
81112280:	2089c83a 	sub	r4,r4,r2
81112284:	2910983a 	sll	r8,r5,r4
81112288:	308ed83a 	srl	r7,r6,r2
8111228c:	3108983a 	sll	r4,r6,r4
81112290:	2884d83a 	srl	r2,r5,r2
81112294:	41ccb03a 	or	r6,r8,r7
81112298:	2008c03a 	cmpne	r4,r4,zero
8111229c:	310cb03a 	or	r6,r6,r4
811122a0:	898dc83a 	sub	r6,r17,r6
811122a4:	89a3803a 	cmpltu	r17,r17,r6
811122a8:	1887c83a 	sub	r3,r3,r2
811122ac:	1c47c83a 	sub	r3,r3,r17
811122b0:	3023883a 	mov	r17,r6
811122b4:	1880202c 	andhi	r2,r3,128
811122b8:	10002326 	beq	r2,zero,81112348 <__subdf3+0x20c>
811122bc:	04c02034 	movhi	r19,128
811122c0:	9cffffc4 	addi	r19,r19,-1
811122c4:	1ce6703a 	and	r19,r3,r19
811122c8:	98007a26 	beq	r19,zero,811124b4 <__subdf3+0x378>
811122cc:	9809883a 	mov	r4,r19
811122d0:	1102aec0 	call	81102aec <__clzsi2>
811122d4:	113ffe04 	addi	r4,r2,-8
811122d8:	00c007c4 	movi	r3,31
811122dc:	19007b16 	blt	r3,r4,811124cc <__subdf3+0x390>
811122e0:	00800804 	movi	r2,32
811122e4:	1105c83a 	sub	r2,r2,r4
811122e8:	8884d83a 	srl	r2,r17,r2
811122ec:	9906983a 	sll	r3,r19,r4
811122f0:	8922983a 	sll	r17,r17,r4
811122f4:	10c4b03a 	or	r2,r2,r3
811122f8:	24007816 	blt	r4,r16,811124dc <__subdf3+0x3a0>
811122fc:	2421c83a 	sub	r16,r4,r16
81112300:	80c00044 	addi	r3,r16,1
81112304:	010007c4 	movi	r4,31
81112308:	20c09516 	blt	r4,r3,81112560 <__subdf3+0x424>
8111230c:	01400804 	movi	r5,32
81112310:	28cbc83a 	sub	r5,r5,r3
81112314:	88c8d83a 	srl	r4,r17,r3
81112318:	8962983a 	sll	r17,r17,r5
8111231c:	114a983a 	sll	r5,r2,r5
81112320:	10c6d83a 	srl	r3,r2,r3
81112324:	8804c03a 	cmpne	r2,r17,zero
81112328:	290ab03a 	or	r5,r5,r4
8111232c:	28a2b03a 	or	r17,r5,r2
81112330:	0021883a 	mov	r16,zero
81112334:	003fa206 	br	811121c0 <__reset+0xfb0f21c0>
81112338:	2090b03a 	or	r8,r4,r2
8111233c:	40018e26 	beq	r8,zero,81112978 <__subdf3+0x83c>
81112340:	1007883a 	mov	r3,r2
81112344:	2023883a 	mov	r17,r4
81112348:	888001cc 	andi	r2,r17,7
8111234c:	103f9e1e 	bne	r2,zero,811121c8 <__reset+0xfb0f21c8>
81112350:	1804977a 	slli	r2,r3,29
81112354:	8822d0fa 	srli	r17,r17,3
81112358:	1810d0fa 	srli	r8,r3,3
8111235c:	9100004c 	andi	r4,r18,1
81112360:	1444b03a 	or	r2,r2,r17
81112364:	00c1ffc4 	movi	r3,2047
81112368:	80c02826 	beq	r16,r3,8111240c <__subdf3+0x2d0>
8111236c:	01400434 	movhi	r5,16
81112370:	297fffc4 	addi	r5,r5,-1
81112374:	80e0703a 	and	r16,r16,r3
81112378:	414a703a 	and	r5,r8,r5
8111237c:	003fa806 	br	81112220 <__reset+0xfb0f2220>
81112380:	0080630e 	bge	zero,r2,81112510 <__subdf3+0x3d4>
81112384:	48003026 	beq	r9,zero,81112448 <__subdf3+0x30c>
81112388:	0101ffc4 	movi	r4,2047
8111238c:	813f8c26 	beq	r16,r4,811121c0 <__reset+0xfb0f21c0>
81112390:	29402034 	orhi	r5,r5,128
81112394:	01000e04 	movi	r4,56
81112398:	2080a90e 	bge	r4,r2,81112640 <__subdf3+0x504>
8111239c:	298cb03a 	or	r6,r5,r6
811123a0:	3012c03a 	cmpne	r9,r6,zero
811123a4:	0005883a 	mov	r2,zero
811123a8:	4c53883a 	add	r9,r9,r17
811123ac:	4c63803a 	cmpltu	r17,r9,r17
811123b0:	10c7883a 	add	r3,r2,r3
811123b4:	88c7883a 	add	r3,r17,r3
811123b8:	4823883a 	mov	r17,r9
811123bc:	1880202c 	andhi	r2,r3,128
811123c0:	1000d026 	beq	r2,zero,81112704 <__subdf3+0x5c8>
811123c4:	84000044 	addi	r16,r16,1
811123c8:	0081ffc4 	movi	r2,2047
811123cc:	8080fe26 	beq	r16,r2,811127c8 <__subdf3+0x68c>
811123d0:	00bfe034 	movhi	r2,65408
811123d4:	10bfffc4 	addi	r2,r2,-1
811123d8:	1886703a 	and	r3,r3,r2
811123dc:	880ad07a 	srli	r5,r17,1
811123e0:	180497fa 	slli	r2,r3,31
811123e4:	8900004c 	andi	r4,r17,1
811123e8:	2922b03a 	or	r17,r5,r4
811123ec:	1806d07a 	srli	r3,r3,1
811123f0:	1462b03a 	or	r17,r2,r17
811123f4:	3825883a 	mov	r18,r7
811123f8:	003f7106 	br	811121c0 <__reset+0xfb0f21c0>
811123fc:	2984b03a 	or	r2,r5,r6
81112400:	103f6826 	beq	r2,zero,811121a4 <__reset+0xfb0f21a4>
81112404:	39c03fcc 	andi	r7,r7,255
81112408:	003f6706 	br	811121a8 <__reset+0xfb0f21a8>
8111240c:	4086b03a 	or	r3,r8,r2
81112410:	18015226 	beq	r3,zero,8111295c <__subdf3+0x820>
81112414:	00c00434 	movhi	r3,16
81112418:	41400234 	orhi	r5,r8,8
8111241c:	18ffffc4 	addi	r3,r3,-1
81112420:	28ca703a 	and	r5,r5,r3
81112424:	003f7e06 	br	81112220 <__reset+0xfb0f2220>
81112428:	10bfffc4 	addi	r2,r2,-1
8111242c:	1000491e 	bne	r2,zero,81112554 <__subdf3+0x418>
81112430:	898fc83a 	sub	r7,r17,r6
81112434:	89e3803a 	cmpltu	r17,r17,r7
81112438:	1947c83a 	sub	r3,r3,r5
8111243c:	1c47c83a 	sub	r3,r3,r17
81112440:	3823883a 	mov	r17,r7
81112444:	003f9b06 	br	811122b4 <__reset+0xfb0f22b4>
81112448:	2988b03a 	or	r4,r5,r6
8111244c:	203f5c26 	beq	r4,zero,811121c0 <__reset+0xfb0f21c0>
81112450:	10bfffc4 	addi	r2,r2,-1
81112454:	1000931e 	bne	r2,zero,811126a4 <__subdf3+0x568>
81112458:	898d883a 	add	r6,r17,r6
8111245c:	3463803a 	cmpltu	r17,r6,r17
81112460:	1947883a 	add	r3,r3,r5
81112464:	88c7883a 	add	r3,r17,r3
81112468:	3023883a 	mov	r17,r6
8111246c:	003fd306 	br	811123bc <__reset+0xfb0f23bc>
81112470:	1000541e 	bne	r2,zero,811125c4 <__subdf3+0x488>
81112474:	80800044 	addi	r2,r16,1
81112478:	1081ffcc 	andi	r2,r2,2047
8111247c:	01000044 	movi	r4,1
81112480:	2080a20e 	bge	r4,r2,8111270c <__subdf3+0x5d0>
81112484:	8989c83a 	sub	r4,r17,r6
81112488:	8905803a 	cmpltu	r2,r17,r4
8111248c:	1967c83a 	sub	r19,r3,r5
81112490:	98a7c83a 	sub	r19,r19,r2
81112494:	9880202c 	andhi	r2,r19,128
81112498:	10006326 	beq	r2,zero,81112628 <__subdf3+0x4ec>
8111249c:	3463c83a 	sub	r17,r6,r17
811124a0:	28c7c83a 	sub	r3,r5,r3
811124a4:	344d803a 	cmpltu	r6,r6,r17
811124a8:	19a7c83a 	sub	r19,r3,r6
811124ac:	3825883a 	mov	r18,r7
811124b0:	983f861e 	bne	r19,zero,811122cc <__reset+0xfb0f22cc>
811124b4:	8809883a 	mov	r4,r17
811124b8:	1102aec0 	call	81102aec <__clzsi2>
811124bc:	10800804 	addi	r2,r2,32
811124c0:	113ffe04 	addi	r4,r2,-8
811124c4:	00c007c4 	movi	r3,31
811124c8:	193f850e 	bge	r3,r4,811122e0 <__reset+0xfb0f22e0>
811124cc:	10bff604 	addi	r2,r2,-40
811124d0:	8884983a 	sll	r2,r17,r2
811124d4:	0023883a 	mov	r17,zero
811124d8:	243f880e 	bge	r4,r16,811122fc <__reset+0xfb0f22fc>
811124dc:	00ffe034 	movhi	r3,65408
811124e0:	18ffffc4 	addi	r3,r3,-1
811124e4:	8121c83a 	sub	r16,r16,r4
811124e8:	10c6703a 	and	r3,r2,r3
811124ec:	003f3406 	br	811121c0 <__reset+0xfb0f21c0>
811124f0:	9100004c 	andi	r4,r18,1
811124f4:	000b883a 	mov	r5,zero
811124f8:	0005883a 	mov	r2,zero
811124fc:	003f4806 	br	81112220 <__reset+0xfb0f2220>
81112500:	298cb03a 	or	r6,r5,r6
81112504:	300cc03a 	cmpne	r6,r6,zero
81112508:	0005883a 	mov	r2,zero
8111250c:	003f6406 	br	811122a0 <__reset+0xfb0f22a0>
81112510:	10009a1e 	bne	r2,zero,8111277c <__subdf3+0x640>
81112514:	82400044 	addi	r9,r16,1
81112518:	4881ffcc 	andi	r2,r9,2047
8111251c:	02800044 	movi	r10,1
81112520:	5080670e 	bge	r10,r2,811126c0 <__subdf3+0x584>
81112524:	0081ffc4 	movi	r2,2047
81112528:	4880af26 	beq	r9,r2,811127e8 <__subdf3+0x6ac>
8111252c:	898d883a 	add	r6,r17,r6
81112530:	1945883a 	add	r2,r3,r5
81112534:	3447803a 	cmpltu	r3,r6,r17
81112538:	1887883a 	add	r3,r3,r2
8111253c:	182297fa 	slli	r17,r3,31
81112540:	300cd07a 	srli	r6,r6,1
81112544:	1806d07a 	srli	r3,r3,1
81112548:	4821883a 	mov	r16,r9
8111254c:	89a2b03a 	or	r17,r17,r6
81112550:	003f1b06 	br	811121c0 <__reset+0xfb0f21c0>
81112554:	0101ffc4 	movi	r4,2047
81112558:	813f441e 	bne	r16,r4,8111226c <__reset+0xfb0f226c>
8111255c:	003f1806 	br	811121c0 <__reset+0xfb0f21c0>
81112560:	843ff844 	addi	r16,r16,-31
81112564:	01400804 	movi	r5,32
81112568:	1408d83a 	srl	r4,r2,r16
8111256c:	19405026 	beq	r3,r5,811126b0 <__subdf3+0x574>
81112570:	01401004 	movi	r5,64
81112574:	28c7c83a 	sub	r3,r5,r3
81112578:	10c4983a 	sll	r2,r2,r3
8111257c:	88a2b03a 	or	r17,r17,r2
81112580:	8822c03a 	cmpne	r17,r17,zero
81112584:	2462b03a 	or	r17,r4,r17
81112588:	0007883a 	mov	r3,zero
8111258c:	0021883a 	mov	r16,zero
81112590:	003f6d06 	br	81112348 <__reset+0xfb0f2348>
81112594:	11fff804 	addi	r7,r2,-32
81112598:	01000804 	movi	r4,32
8111259c:	29ced83a 	srl	r7,r5,r7
811125a0:	11004526 	beq	r2,r4,811126b8 <__subdf3+0x57c>
811125a4:	01001004 	movi	r4,64
811125a8:	2089c83a 	sub	r4,r4,r2
811125ac:	2904983a 	sll	r2,r5,r4
811125b0:	118cb03a 	or	r6,r2,r6
811125b4:	300cc03a 	cmpne	r6,r6,zero
811125b8:	398cb03a 	or	r6,r7,r6
811125bc:	0005883a 	mov	r2,zero
811125c0:	003f3706 	br	811122a0 <__reset+0xfb0f22a0>
811125c4:	80002a26 	beq	r16,zero,81112670 <__subdf3+0x534>
811125c8:	0101ffc4 	movi	r4,2047
811125cc:	49006626 	beq	r9,r4,81112768 <__subdf3+0x62c>
811125d0:	0085c83a 	sub	r2,zero,r2
811125d4:	18c02034 	orhi	r3,r3,128
811125d8:	01000e04 	movi	r4,56
811125dc:	20807e16 	blt	r4,r2,811127d8 <__subdf3+0x69c>
811125e0:	010007c4 	movi	r4,31
811125e4:	2080e716 	blt	r4,r2,81112984 <__subdf3+0x848>
811125e8:	01000804 	movi	r4,32
811125ec:	2089c83a 	sub	r4,r4,r2
811125f0:	1914983a 	sll	r10,r3,r4
811125f4:	8890d83a 	srl	r8,r17,r2
811125f8:	8908983a 	sll	r4,r17,r4
811125fc:	1884d83a 	srl	r2,r3,r2
81112600:	5222b03a 	or	r17,r10,r8
81112604:	2006c03a 	cmpne	r3,r4,zero
81112608:	88e2b03a 	or	r17,r17,r3
8111260c:	3463c83a 	sub	r17,r6,r17
81112610:	2885c83a 	sub	r2,r5,r2
81112614:	344d803a 	cmpltu	r6,r6,r17
81112618:	1187c83a 	sub	r3,r2,r6
8111261c:	4821883a 	mov	r16,r9
81112620:	3825883a 	mov	r18,r7
81112624:	003f2306 	br	811122b4 <__reset+0xfb0f22b4>
81112628:	24d0b03a 	or	r8,r4,r19
8111262c:	40001b1e 	bne	r8,zero,8111269c <__subdf3+0x560>
81112630:	0005883a 	mov	r2,zero
81112634:	0009883a 	mov	r4,zero
81112638:	0021883a 	mov	r16,zero
8111263c:	003f4906 	br	81112364 <__reset+0xfb0f2364>
81112640:	010007c4 	movi	r4,31
81112644:	20803a16 	blt	r4,r2,81112730 <__subdf3+0x5f4>
81112648:	01000804 	movi	r4,32
8111264c:	2089c83a 	sub	r4,r4,r2
81112650:	2912983a 	sll	r9,r5,r4
81112654:	3090d83a 	srl	r8,r6,r2
81112658:	3108983a 	sll	r4,r6,r4
8111265c:	2884d83a 	srl	r2,r5,r2
81112660:	4a12b03a 	or	r9,r9,r8
81112664:	2008c03a 	cmpne	r4,r4,zero
81112668:	4912b03a 	or	r9,r9,r4
8111266c:	003f4e06 	br	811123a8 <__reset+0xfb0f23a8>
81112670:	1c48b03a 	or	r4,r3,r17
81112674:	20003c26 	beq	r4,zero,81112768 <__subdf3+0x62c>
81112678:	0084303a 	nor	r2,zero,r2
8111267c:	1000381e 	bne	r2,zero,81112760 <__subdf3+0x624>
81112680:	3463c83a 	sub	r17,r6,r17
81112684:	28c5c83a 	sub	r2,r5,r3
81112688:	344d803a 	cmpltu	r6,r6,r17
8111268c:	1187c83a 	sub	r3,r2,r6
81112690:	4821883a 	mov	r16,r9
81112694:	3825883a 	mov	r18,r7
81112698:	003f0606 	br	811122b4 <__reset+0xfb0f22b4>
8111269c:	2023883a 	mov	r17,r4
811126a0:	003f0906 	br	811122c8 <__reset+0xfb0f22c8>
811126a4:	0101ffc4 	movi	r4,2047
811126a8:	813f3a1e 	bne	r16,r4,81112394 <__reset+0xfb0f2394>
811126ac:	003ec406 	br	811121c0 <__reset+0xfb0f21c0>
811126b0:	0005883a 	mov	r2,zero
811126b4:	003fb106 	br	8111257c <__reset+0xfb0f257c>
811126b8:	0005883a 	mov	r2,zero
811126bc:	003fbc06 	br	811125b0 <__reset+0xfb0f25b0>
811126c0:	1c44b03a 	or	r2,r3,r17
811126c4:	80008e1e 	bne	r16,zero,81112900 <__subdf3+0x7c4>
811126c8:	1000c826 	beq	r2,zero,811129ec <__subdf3+0x8b0>
811126cc:	2984b03a 	or	r2,r5,r6
811126d0:	103ebb26 	beq	r2,zero,811121c0 <__reset+0xfb0f21c0>
811126d4:	8989883a 	add	r4,r17,r6
811126d8:	1945883a 	add	r2,r3,r5
811126dc:	2447803a 	cmpltu	r3,r4,r17
811126e0:	1887883a 	add	r3,r3,r2
811126e4:	1880202c 	andhi	r2,r3,128
811126e8:	2023883a 	mov	r17,r4
811126ec:	103f1626 	beq	r2,zero,81112348 <__reset+0xfb0f2348>
811126f0:	00bfe034 	movhi	r2,65408
811126f4:	10bfffc4 	addi	r2,r2,-1
811126f8:	5021883a 	mov	r16,r10
811126fc:	1886703a 	and	r3,r3,r2
81112700:	003eaf06 	br	811121c0 <__reset+0xfb0f21c0>
81112704:	3825883a 	mov	r18,r7
81112708:	003f0f06 	br	81112348 <__reset+0xfb0f2348>
8111270c:	1c44b03a 	or	r2,r3,r17
81112710:	8000251e 	bne	r16,zero,811127a8 <__subdf3+0x66c>
81112714:	1000661e 	bne	r2,zero,811128b0 <__subdf3+0x774>
81112718:	2990b03a 	or	r8,r5,r6
8111271c:	40009626 	beq	r8,zero,81112978 <__subdf3+0x83c>
81112720:	2807883a 	mov	r3,r5
81112724:	3023883a 	mov	r17,r6
81112728:	3825883a 	mov	r18,r7
8111272c:	003ea406 	br	811121c0 <__reset+0xfb0f21c0>
81112730:	127ff804 	addi	r9,r2,-32
81112734:	01000804 	movi	r4,32
81112738:	2a52d83a 	srl	r9,r5,r9
8111273c:	11008c26 	beq	r2,r4,81112970 <__subdf3+0x834>
81112740:	01001004 	movi	r4,64
81112744:	2085c83a 	sub	r2,r4,r2
81112748:	2884983a 	sll	r2,r5,r2
8111274c:	118cb03a 	or	r6,r2,r6
81112750:	300cc03a 	cmpne	r6,r6,zero
81112754:	4992b03a 	or	r9,r9,r6
81112758:	0005883a 	mov	r2,zero
8111275c:	003f1206 	br	811123a8 <__reset+0xfb0f23a8>
81112760:	0101ffc4 	movi	r4,2047
81112764:	493f9c1e 	bne	r9,r4,811125d8 <__reset+0xfb0f25d8>
81112768:	2807883a 	mov	r3,r5
8111276c:	3023883a 	mov	r17,r6
81112770:	4821883a 	mov	r16,r9
81112774:	3825883a 	mov	r18,r7
81112778:	003e9106 	br	811121c0 <__reset+0xfb0f21c0>
8111277c:	80001f1e 	bne	r16,zero,811127fc <__subdf3+0x6c0>
81112780:	1c48b03a 	or	r4,r3,r17
81112784:	20005a26 	beq	r4,zero,811128f0 <__subdf3+0x7b4>
81112788:	0084303a 	nor	r2,zero,r2
8111278c:	1000561e 	bne	r2,zero,811128e8 <__subdf3+0x7ac>
81112790:	89a3883a 	add	r17,r17,r6
81112794:	1945883a 	add	r2,r3,r5
81112798:	898d803a 	cmpltu	r6,r17,r6
8111279c:	3087883a 	add	r3,r6,r2
811127a0:	4821883a 	mov	r16,r9
811127a4:	003f0506 	br	811123bc <__reset+0xfb0f23bc>
811127a8:	10002b1e 	bne	r2,zero,81112858 <__subdf3+0x71c>
811127ac:	2984b03a 	or	r2,r5,r6
811127b0:	10008026 	beq	r2,zero,811129b4 <__subdf3+0x878>
811127b4:	2807883a 	mov	r3,r5
811127b8:	3023883a 	mov	r17,r6
811127bc:	3825883a 	mov	r18,r7
811127c0:	0401ffc4 	movi	r16,2047
811127c4:	003e7e06 	br	811121c0 <__reset+0xfb0f21c0>
811127c8:	3809883a 	mov	r4,r7
811127cc:	0011883a 	mov	r8,zero
811127d0:	0005883a 	mov	r2,zero
811127d4:	003ee306 	br	81112364 <__reset+0xfb0f2364>
811127d8:	1c62b03a 	or	r17,r3,r17
811127dc:	8822c03a 	cmpne	r17,r17,zero
811127e0:	0005883a 	mov	r2,zero
811127e4:	003f8906 	br	8111260c <__reset+0xfb0f260c>
811127e8:	3809883a 	mov	r4,r7
811127ec:	4821883a 	mov	r16,r9
811127f0:	0011883a 	mov	r8,zero
811127f4:	0005883a 	mov	r2,zero
811127f8:	003eda06 	br	81112364 <__reset+0xfb0f2364>
811127fc:	0101ffc4 	movi	r4,2047
81112800:	49003b26 	beq	r9,r4,811128f0 <__subdf3+0x7b4>
81112804:	0085c83a 	sub	r2,zero,r2
81112808:	18c02034 	orhi	r3,r3,128
8111280c:	01000e04 	movi	r4,56
81112810:	20806e16 	blt	r4,r2,811129cc <__subdf3+0x890>
81112814:	010007c4 	movi	r4,31
81112818:	20807716 	blt	r4,r2,811129f8 <__subdf3+0x8bc>
8111281c:	01000804 	movi	r4,32
81112820:	2089c83a 	sub	r4,r4,r2
81112824:	1914983a 	sll	r10,r3,r4
81112828:	8890d83a 	srl	r8,r17,r2
8111282c:	8908983a 	sll	r4,r17,r4
81112830:	1884d83a 	srl	r2,r3,r2
81112834:	5222b03a 	or	r17,r10,r8
81112838:	2006c03a 	cmpne	r3,r4,zero
8111283c:	88e2b03a 	or	r17,r17,r3
81112840:	89a3883a 	add	r17,r17,r6
81112844:	1145883a 	add	r2,r2,r5
81112848:	898d803a 	cmpltu	r6,r17,r6
8111284c:	3087883a 	add	r3,r6,r2
81112850:	4821883a 	mov	r16,r9
81112854:	003ed906 	br	811123bc <__reset+0xfb0f23bc>
81112858:	2984b03a 	or	r2,r5,r6
8111285c:	10004226 	beq	r2,zero,81112968 <__subdf3+0x82c>
81112860:	1808d0fa 	srli	r4,r3,3
81112864:	8822d0fa 	srli	r17,r17,3
81112868:	1806977a 	slli	r3,r3,29
8111286c:	2080022c 	andhi	r2,r4,8
81112870:	1c62b03a 	or	r17,r3,r17
81112874:	10000826 	beq	r2,zero,81112898 <__subdf3+0x75c>
81112878:	2812d0fa 	srli	r9,r5,3
8111287c:	4880022c 	andhi	r2,r9,8
81112880:	1000051e 	bne	r2,zero,81112898 <__subdf3+0x75c>
81112884:	300cd0fa 	srli	r6,r6,3
81112888:	2804977a 	slli	r2,r5,29
8111288c:	4809883a 	mov	r4,r9
81112890:	3825883a 	mov	r18,r7
81112894:	11a2b03a 	or	r17,r2,r6
81112898:	8806d77a 	srli	r3,r17,29
8111289c:	200890fa 	slli	r4,r4,3
811128a0:	882290fa 	slli	r17,r17,3
811128a4:	0401ffc4 	movi	r16,2047
811128a8:	1906b03a 	or	r3,r3,r4
811128ac:	003e4406 	br	811121c0 <__reset+0xfb0f21c0>
811128b0:	2984b03a 	or	r2,r5,r6
811128b4:	103e4226 	beq	r2,zero,811121c0 <__reset+0xfb0f21c0>
811128b8:	8989c83a 	sub	r4,r17,r6
811128bc:	8911803a 	cmpltu	r8,r17,r4
811128c0:	1945c83a 	sub	r2,r3,r5
811128c4:	1205c83a 	sub	r2,r2,r8
811128c8:	1200202c 	andhi	r8,r2,128
811128cc:	403e9a26 	beq	r8,zero,81112338 <__reset+0xfb0f2338>
811128d0:	3463c83a 	sub	r17,r6,r17
811128d4:	28c5c83a 	sub	r2,r5,r3
811128d8:	344d803a 	cmpltu	r6,r6,r17
811128dc:	1187c83a 	sub	r3,r2,r6
811128e0:	3825883a 	mov	r18,r7
811128e4:	003e3606 	br	811121c0 <__reset+0xfb0f21c0>
811128e8:	0101ffc4 	movi	r4,2047
811128ec:	493fc71e 	bne	r9,r4,8111280c <__reset+0xfb0f280c>
811128f0:	2807883a 	mov	r3,r5
811128f4:	3023883a 	mov	r17,r6
811128f8:	4821883a 	mov	r16,r9
811128fc:	003e3006 	br	811121c0 <__reset+0xfb0f21c0>
81112900:	10003626 	beq	r2,zero,811129dc <__subdf3+0x8a0>
81112904:	2984b03a 	or	r2,r5,r6
81112908:	10001726 	beq	r2,zero,81112968 <__subdf3+0x82c>
8111290c:	1808d0fa 	srli	r4,r3,3
81112910:	8822d0fa 	srli	r17,r17,3
81112914:	1806977a 	slli	r3,r3,29
81112918:	2080022c 	andhi	r2,r4,8
8111291c:	1c62b03a 	or	r17,r3,r17
81112920:	10000726 	beq	r2,zero,81112940 <__subdf3+0x804>
81112924:	2812d0fa 	srli	r9,r5,3
81112928:	4880022c 	andhi	r2,r9,8
8111292c:	1000041e 	bne	r2,zero,81112940 <__subdf3+0x804>
81112930:	300cd0fa 	srli	r6,r6,3
81112934:	2804977a 	slli	r2,r5,29
81112938:	4809883a 	mov	r4,r9
8111293c:	11a2b03a 	or	r17,r2,r6
81112940:	8806d77a 	srli	r3,r17,29
81112944:	200890fa 	slli	r4,r4,3
81112948:	882290fa 	slli	r17,r17,3
8111294c:	3825883a 	mov	r18,r7
81112950:	1906b03a 	or	r3,r3,r4
81112954:	0401ffc4 	movi	r16,2047
81112958:	003e1906 	br	811121c0 <__reset+0xfb0f21c0>
8111295c:	000b883a 	mov	r5,zero
81112960:	0005883a 	mov	r2,zero
81112964:	003e2e06 	br	81112220 <__reset+0xfb0f2220>
81112968:	0401ffc4 	movi	r16,2047
8111296c:	003e1406 	br	811121c0 <__reset+0xfb0f21c0>
81112970:	0005883a 	mov	r2,zero
81112974:	003f7506 	br	8111274c <__reset+0xfb0f274c>
81112978:	0005883a 	mov	r2,zero
8111297c:	0009883a 	mov	r4,zero
81112980:	003e7806 	br	81112364 <__reset+0xfb0f2364>
81112984:	123ff804 	addi	r8,r2,-32
81112988:	01000804 	movi	r4,32
8111298c:	1a10d83a 	srl	r8,r3,r8
81112990:	11002526 	beq	r2,r4,81112a28 <__subdf3+0x8ec>
81112994:	01001004 	movi	r4,64
81112998:	2085c83a 	sub	r2,r4,r2
8111299c:	1884983a 	sll	r2,r3,r2
811129a0:	1444b03a 	or	r2,r2,r17
811129a4:	1004c03a 	cmpne	r2,r2,zero
811129a8:	40a2b03a 	or	r17,r8,r2
811129ac:	0005883a 	mov	r2,zero
811129b0:	003f1606 	br	8111260c <__reset+0xfb0f260c>
811129b4:	02000434 	movhi	r8,16
811129b8:	0009883a 	mov	r4,zero
811129bc:	423fffc4 	addi	r8,r8,-1
811129c0:	00bfffc4 	movi	r2,-1
811129c4:	0401ffc4 	movi	r16,2047
811129c8:	003e6606 	br	81112364 <__reset+0xfb0f2364>
811129cc:	1c62b03a 	or	r17,r3,r17
811129d0:	8822c03a 	cmpne	r17,r17,zero
811129d4:	0005883a 	mov	r2,zero
811129d8:	003f9906 	br	81112840 <__reset+0xfb0f2840>
811129dc:	2807883a 	mov	r3,r5
811129e0:	3023883a 	mov	r17,r6
811129e4:	0401ffc4 	movi	r16,2047
811129e8:	003df506 	br	811121c0 <__reset+0xfb0f21c0>
811129ec:	2807883a 	mov	r3,r5
811129f0:	3023883a 	mov	r17,r6
811129f4:	003df206 	br	811121c0 <__reset+0xfb0f21c0>
811129f8:	123ff804 	addi	r8,r2,-32
811129fc:	01000804 	movi	r4,32
81112a00:	1a10d83a 	srl	r8,r3,r8
81112a04:	11000a26 	beq	r2,r4,81112a30 <__subdf3+0x8f4>
81112a08:	01001004 	movi	r4,64
81112a0c:	2085c83a 	sub	r2,r4,r2
81112a10:	1884983a 	sll	r2,r3,r2
81112a14:	1444b03a 	or	r2,r2,r17
81112a18:	1004c03a 	cmpne	r2,r2,zero
81112a1c:	40a2b03a 	or	r17,r8,r2
81112a20:	0005883a 	mov	r2,zero
81112a24:	003f8606 	br	81112840 <__reset+0xfb0f2840>
81112a28:	0005883a 	mov	r2,zero
81112a2c:	003fdc06 	br	811129a0 <__reset+0xfb0f29a0>
81112a30:	0005883a 	mov	r2,zero
81112a34:	003ff706 	br	81112a14 <__reset+0xfb0f2a14>

81112a38 <__fixdfsi>:
81112a38:	280cd53a 	srli	r6,r5,20
81112a3c:	00c00434 	movhi	r3,16
81112a40:	18ffffc4 	addi	r3,r3,-1
81112a44:	3181ffcc 	andi	r6,r6,2047
81112a48:	01c0ff84 	movi	r7,1022
81112a4c:	28c6703a 	and	r3,r5,r3
81112a50:	280ad7fa 	srli	r5,r5,31
81112a54:	3980120e 	bge	r7,r6,81112aa0 <__fixdfsi+0x68>
81112a58:	00810744 	movi	r2,1053
81112a5c:	11800c16 	blt	r2,r6,81112a90 <__fixdfsi+0x58>
81112a60:	00810cc4 	movi	r2,1075
81112a64:	1185c83a 	sub	r2,r2,r6
81112a68:	01c007c4 	movi	r7,31
81112a6c:	18c00434 	orhi	r3,r3,16
81112a70:	38800d16 	blt	r7,r2,81112aa8 <__fixdfsi+0x70>
81112a74:	31befb44 	addi	r6,r6,-1043
81112a78:	2084d83a 	srl	r2,r4,r2
81112a7c:	1986983a 	sll	r3,r3,r6
81112a80:	1884b03a 	or	r2,r3,r2
81112a84:	28000726 	beq	r5,zero,81112aa4 <__fixdfsi+0x6c>
81112a88:	0085c83a 	sub	r2,zero,r2
81112a8c:	f800283a 	ret
81112a90:	00a00034 	movhi	r2,32768
81112a94:	10bfffc4 	addi	r2,r2,-1
81112a98:	2885883a 	add	r2,r5,r2
81112a9c:	f800283a 	ret
81112aa0:	0005883a 	mov	r2,zero
81112aa4:	f800283a 	ret
81112aa8:	008104c4 	movi	r2,1043
81112aac:	1185c83a 	sub	r2,r2,r6
81112ab0:	1884d83a 	srl	r2,r3,r2
81112ab4:	003ff306 	br	81112a84 <__reset+0xfb0f2a84>

81112ab8 <__floatsidf>:
81112ab8:	defffd04 	addi	sp,sp,-12
81112abc:	dfc00215 	stw	ra,8(sp)
81112ac0:	dc400115 	stw	r17,4(sp)
81112ac4:	dc000015 	stw	r16,0(sp)
81112ac8:	20002b26 	beq	r4,zero,81112b78 <__floatsidf+0xc0>
81112acc:	2023883a 	mov	r17,r4
81112ad0:	2020d7fa 	srli	r16,r4,31
81112ad4:	20002d16 	blt	r4,zero,81112b8c <__floatsidf+0xd4>
81112ad8:	8809883a 	mov	r4,r17
81112adc:	1102aec0 	call	81102aec <__clzsi2>
81112ae0:	01410784 	movi	r5,1054
81112ae4:	288bc83a 	sub	r5,r5,r2
81112ae8:	01010cc4 	movi	r4,1075
81112aec:	2149c83a 	sub	r4,r4,r5
81112af0:	00c007c4 	movi	r3,31
81112af4:	1900160e 	bge	r3,r4,81112b50 <__floatsidf+0x98>
81112af8:	00c104c4 	movi	r3,1043
81112afc:	1947c83a 	sub	r3,r3,r5
81112b00:	88c6983a 	sll	r3,r17,r3
81112b04:	00800434 	movhi	r2,16
81112b08:	10bfffc4 	addi	r2,r2,-1
81112b0c:	1886703a 	and	r3,r3,r2
81112b10:	2941ffcc 	andi	r5,r5,2047
81112b14:	800d883a 	mov	r6,r16
81112b18:	0005883a 	mov	r2,zero
81112b1c:	280a953a 	slli	r5,r5,20
81112b20:	31803fcc 	andi	r6,r6,255
81112b24:	01000434 	movhi	r4,16
81112b28:	300c97fa 	slli	r6,r6,31
81112b2c:	213fffc4 	addi	r4,r4,-1
81112b30:	1906703a 	and	r3,r3,r4
81112b34:	1946b03a 	or	r3,r3,r5
81112b38:	1986b03a 	or	r3,r3,r6
81112b3c:	dfc00217 	ldw	ra,8(sp)
81112b40:	dc400117 	ldw	r17,4(sp)
81112b44:	dc000017 	ldw	r16,0(sp)
81112b48:	dec00304 	addi	sp,sp,12
81112b4c:	f800283a 	ret
81112b50:	00c002c4 	movi	r3,11
81112b54:	1887c83a 	sub	r3,r3,r2
81112b58:	88c6d83a 	srl	r3,r17,r3
81112b5c:	8904983a 	sll	r2,r17,r4
81112b60:	01000434 	movhi	r4,16
81112b64:	213fffc4 	addi	r4,r4,-1
81112b68:	2941ffcc 	andi	r5,r5,2047
81112b6c:	1906703a 	and	r3,r3,r4
81112b70:	800d883a 	mov	r6,r16
81112b74:	003fe906 	br	81112b1c <__reset+0xfb0f2b1c>
81112b78:	000d883a 	mov	r6,zero
81112b7c:	000b883a 	mov	r5,zero
81112b80:	0007883a 	mov	r3,zero
81112b84:	0005883a 	mov	r2,zero
81112b88:	003fe406 	br	81112b1c <__reset+0xfb0f2b1c>
81112b8c:	0123c83a 	sub	r17,zero,r4
81112b90:	003fd106 	br	81112ad8 <__reset+0xfb0f2ad8>

81112b94 <__floatunsidf>:
81112b94:	defffe04 	addi	sp,sp,-8
81112b98:	dc000015 	stw	r16,0(sp)
81112b9c:	dfc00115 	stw	ra,4(sp)
81112ba0:	2021883a 	mov	r16,r4
81112ba4:	20002226 	beq	r4,zero,81112c30 <__floatunsidf+0x9c>
81112ba8:	1102aec0 	call	81102aec <__clzsi2>
81112bac:	01010784 	movi	r4,1054
81112bb0:	2089c83a 	sub	r4,r4,r2
81112bb4:	01810cc4 	movi	r6,1075
81112bb8:	310dc83a 	sub	r6,r6,r4
81112bbc:	00c007c4 	movi	r3,31
81112bc0:	1980120e 	bge	r3,r6,81112c0c <__floatunsidf+0x78>
81112bc4:	00c104c4 	movi	r3,1043
81112bc8:	1907c83a 	sub	r3,r3,r4
81112bcc:	80ca983a 	sll	r5,r16,r3
81112bd0:	00800434 	movhi	r2,16
81112bd4:	10bfffc4 	addi	r2,r2,-1
81112bd8:	2101ffcc 	andi	r4,r4,2047
81112bdc:	0021883a 	mov	r16,zero
81112be0:	288a703a 	and	r5,r5,r2
81112be4:	2008953a 	slli	r4,r4,20
81112be8:	00c00434 	movhi	r3,16
81112bec:	18ffffc4 	addi	r3,r3,-1
81112bf0:	28c6703a 	and	r3,r5,r3
81112bf4:	8005883a 	mov	r2,r16
81112bf8:	1906b03a 	or	r3,r3,r4
81112bfc:	dfc00117 	ldw	ra,4(sp)
81112c00:	dc000017 	ldw	r16,0(sp)
81112c04:	dec00204 	addi	sp,sp,8
81112c08:	f800283a 	ret
81112c0c:	00c002c4 	movi	r3,11
81112c10:	188bc83a 	sub	r5,r3,r2
81112c14:	814ad83a 	srl	r5,r16,r5
81112c18:	00c00434 	movhi	r3,16
81112c1c:	18ffffc4 	addi	r3,r3,-1
81112c20:	81a0983a 	sll	r16,r16,r6
81112c24:	2101ffcc 	andi	r4,r4,2047
81112c28:	28ca703a 	and	r5,r5,r3
81112c2c:	003fed06 	br	81112be4 <__reset+0xfb0f2be4>
81112c30:	0009883a 	mov	r4,zero
81112c34:	000b883a 	mov	r5,zero
81112c38:	003fea06 	br	81112be4 <__reset+0xfb0f2be4>

81112c3c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81112c3c:	defffe04 	addi	sp,sp,-8
81112c40:	dfc00115 	stw	ra,4(sp)
81112c44:	df000015 	stw	fp,0(sp)
81112c48:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81112c4c:	d0a00b17 	ldw	r2,-32724(gp)
81112c50:	10000326 	beq	r2,zero,81112c60 <alt_get_errno+0x24>
81112c54:	d0a00b17 	ldw	r2,-32724(gp)
81112c58:	103ee83a 	callr	r2
81112c5c:	00000106 	br	81112c64 <alt_get_errno+0x28>
81112c60:	d0a01a04 	addi	r2,gp,-32664
}
81112c64:	e037883a 	mov	sp,fp
81112c68:	dfc00117 	ldw	ra,4(sp)
81112c6c:	df000017 	ldw	fp,0(sp)
81112c70:	dec00204 	addi	sp,sp,8
81112c74:	f800283a 	ret

81112c78 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
81112c78:	defffb04 	addi	sp,sp,-20
81112c7c:	dfc00415 	stw	ra,16(sp)
81112c80:	df000315 	stw	fp,12(sp)
81112c84:	df000304 	addi	fp,sp,12
81112c88:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
81112c8c:	e0bfff17 	ldw	r2,-4(fp)
81112c90:	10000616 	blt	r2,zero,81112cac <close+0x34>
81112c94:	e0bfff17 	ldw	r2,-4(fp)
81112c98:	10c00324 	muli	r3,r2,12
81112c9c:	00a044b4 	movhi	r2,33042
81112ca0:	10aa0c04 	addi	r2,r2,-22480
81112ca4:	1885883a 	add	r2,r3,r2
81112ca8:	00000106 	br	81112cb0 <close+0x38>
81112cac:	0005883a 	mov	r2,zero
81112cb0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
81112cb4:	e0bffd17 	ldw	r2,-12(fp)
81112cb8:	10001926 	beq	r2,zero,81112d20 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
81112cbc:	e0bffd17 	ldw	r2,-12(fp)
81112cc0:	10800017 	ldw	r2,0(r2)
81112cc4:	10800417 	ldw	r2,16(r2)
81112cc8:	10000626 	beq	r2,zero,81112ce4 <close+0x6c>
81112ccc:	e0bffd17 	ldw	r2,-12(fp)
81112cd0:	10800017 	ldw	r2,0(r2)
81112cd4:	10800417 	ldw	r2,16(r2)
81112cd8:	e13ffd17 	ldw	r4,-12(fp)
81112cdc:	103ee83a 	callr	r2
81112ce0:	00000106 	br	81112ce8 <close+0x70>
81112ce4:	0005883a 	mov	r2,zero
81112ce8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
81112cec:	e13fff17 	ldw	r4,-4(fp)
81112cf0:	1113e000 	call	81113e00 <alt_release_fd>
    if (rval < 0)
81112cf4:	e0bffe17 	ldw	r2,-8(fp)
81112cf8:	1000070e 	bge	r2,zero,81112d18 <close+0xa0>
    {
      ALT_ERRNO = -rval;
81112cfc:	1112c3c0 	call	81112c3c <alt_get_errno>
81112d00:	1007883a 	mov	r3,r2
81112d04:	e0bffe17 	ldw	r2,-8(fp)
81112d08:	0085c83a 	sub	r2,zero,r2
81112d0c:	18800015 	stw	r2,0(r3)
      return -1;
81112d10:	00bfffc4 	movi	r2,-1
81112d14:	00000706 	br	81112d34 <close+0xbc>
    }
    return 0;
81112d18:	0005883a 	mov	r2,zero
81112d1c:	00000506 	br	81112d34 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
81112d20:	1112c3c0 	call	81112c3c <alt_get_errno>
81112d24:	1007883a 	mov	r3,r2
81112d28:	00801444 	movi	r2,81
81112d2c:	18800015 	stw	r2,0(r3)
    return -1;
81112d30:	00bfffc4 	movi	r2,-1
  }
}
81112d34:	e037883a 	mov	sp,fp
81112d38:	dfc00117 	ldw	ra,4(sp)
81112d3c:	df000017 	ldw	fp,0(sp)
81112d40:	dec00204 	addi	sp,sp,8
81112d44:	f800283a 	ret

81112d48 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
81112d48:	deffff04 	addi	sp,sp,-4
81112d4c:	df000015 	stw	fp,0(sp)
81112d50:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
81112d54:	0001883a 	nop
81112d58:	e037883a 	mov	sp,fp
81112d5c:	df000017 	ldw	fp,0(sp)
81112d60:	dec00104 	addi	sp,sp,4
81112d64:	f800283a 	ret

81112d68 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
81112d68:	defffc04 	addi	sp,sp,-16
81112d6c:	df000315 	stw	fp,12(sp)
81112d70:	df000304 	addi	fp,sp,12
81112d74:	e13ffd15 	stw	r4,-12(fp)
81112d78:	e17ffe15 	stw	r5,-8(fp)
81112d7c:	e1bfff15 	stw	r6,-4(fp)
  return len;
81112d80:	e0bfff17 	ldw	r2,-4(fp)
}
81112d84:	e037883a 	mov	sp,fp
81112d88:	df000017 	ldw	fp,0(sp)
81112d8c:	dec00104 	addi	sp,sp,4
81112d90:	f800283a 	ret

81112d94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81112d94:	defffe04 	addi	sp,sp,-8
81112d98:	dfc00115 	stw	ra,4(sp)
81112d9c:	df000015 	stw	fp,0(sp)
81112da0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81112da4:	d0a00b17 	ldw	r2,-32724(gp)
81112da8:	10000326 	beq	r2,zero,81112db8 <alt_get_errno+0x24>
81112dac:	d0a00b17 	ldw	r2,-32724(gp)
81112db0:	103ee83a 	callr	r2
81112db4:	00000106 	br	81112dbc <alt_get_errno+0x28>
81112db8:	d0a01a04 	addi	r2,gp,-32664
}
81112dbc:	e037883a 	mov	sp,fp
81112dc0:	dfc00117 	ldw	ra,4(sp)
81112dc4:	df000017 	ldw	fp,0(sp)
81112dc8:	dec00204 	addi	sp,sp,8
81112dcc:	f800283a 	ret

81112dd0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
81112dd0:	defffb04 	addi	sp,sp,-20
81112dd4:	dfc00415 	stw	ra,16(sp)
81112dd8:	df000315 	stw	fp,12(sp)
81112ddc:	df000304 	addi	fp,sp,12
81112de0:	e13ffe15 	stw	r4,-8(fp)
81112de4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
81112de8:	e0bffe17 	ldw	r2,-8(fp)
81112dec:	10000616 	blt	r2,zero,81112e08 <fstat+0x38>
81112df0:	e0bffe17 	ldw	r2,-8(fp)
81112df4:	10c00324 	muli	r3,r2,12
81112df8:	00a044b4 	movhi	r2,33042
81112dfc:	10aa0c04 	addi	r2,r2,-22480
81112e00:	1885883a 	add	r2,r3,r2
81112e04:	00000106 	br	81112e0c <fstat+0x3c>
81112e08:	0005883a 	mov	r2,zero
81112e0c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
81112e10:	e0bffd17 	ldw	r2,-12(fp)
81112e14:	10001026 	beq	r2,zero,81112e58 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
81112e18:	e0bffd17 	ldw	r2,-12(fp)
81112e1c:	10800017 	ldw	r2,0(r2)
81112e20:	10800817 	ldw	r2,32(r2)
81112e24:	10000726 	beq	r2,zero,81112e44 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
81112e28:	e0bffd17 	ldw	r2,-12(fp)
81112e2c:	10800017 	ldw	r2,0(r2)
81112e30:	10800817 	ldw	r2,32(r2)
81112e34:	e17fff17 	ldw	r5,-4(fp)
81112e38:	e13ffd17 	ldw	r4,-12(fp)
81112e3c:	103ee83a 	callr	r2
81112e40:	00000a06 	br	81112e6c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
81112e44:	e0bfff17 	ldw	r2,-4(fp)
81112e48:	00c80004 	movi	r3,8192
81112e4c:	10c00115 	stw	r3,4(r2)
      return 0;
81112e50:	0005883a 	mov	r2,zero
81112e54:	00000506 	br	81112e6c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
81112e58:	1112d940 	call	81112d94 <alt_get_errno>
81112e5c:	1007883a 	mov	r3,r2
81112e60:	00801444 	movi	r2,81
81112e64:	18800015 	stw	r2,0(r3)
    return -1;
81112e68:	00bfffc4 	movi	r2,-1
  }
}
81112e6c:	e037883a 	mov	sp,fp
81112e70:	dfc00117 	ldw	ra,4(sp)
81112e74:	df000017 	ldw	fp,0(sp)
81112e78:	dec00204 	addi	sp,sp,8
81112e7c:	f800283a 	ret

81112e80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81112e80:	defffe04 	addi	sp,sp,-8
81112e84:	dfc00115 	stw	ra,4(sp)
81112e88:	df000015 	stw	fp,0(sp)
81112e8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81112e90:	d0a00b17 	ldw	r2,-32724(gp)
81112e94:	10000326 	beq	r2,zero,81112ea4 <alt_get_errno+0x24>
81112e98:	d0a00b17 	ldw	r2,-32724(gp)
81112e9c:	103ee83a 	callr	r2
81112ea0:	00000106 	br	81112ea8 <alt_get_errno+0x28>
81112ea4:	d0a01a04 	addi	r2,gp,-32664
}
81112ea8:	e037883a 	mov	sp,fp
81112eac:	dfc00117 	ldw	ra,4(sp)
81112eb0:	df000017 	ldw	fp,0(sp)
81112eb4:	dec00204 	addi	sp,sp,8
81112eb8:	f800283a 	ret

81112ebc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
81112ebc:	deffed04 	addi	sp,sp,-76
81112ec0:	dfc01215 	stw	ra,72(sp)
81112ec4:	df001115 	stw	fp,68(sp)
81112ec8:	df001104 	addi	fp,sp,68
81112ecc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
81112ed0:	e0bfff17 	ldw	r2,-4(fp)
81112ed4:	10000616 	blt	r2,zero,81112ef0 <isatty+0x34>
81112ed8:	e0bfff17 	ldw	r2,-4(fp)
81112edc:	10c00324 	muli	r3,r2,12
81112ee0:	00a044b4 	movhi	r2,33042
81112ee4:	10aa0c04 	addi	r2,r2,-22480
81112ee8:	1885883a 	add	r2,r3,r2
81112eec:	00000106 	br	81112ef4 <isatty+0x38>
81112ef0:	0005883a 	mov	r2,zero
81112ef4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
81112ef8:	e0bfef17 	ldw	r2,-68(fp)
81112efc:	10000e26 	beq	r2,zero,81112f38 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
81112f00:	e0bfef17 	ldw	r2,-68(fp)
81112f04:	10800017 	ldw	r2,0(r2)
81112f08:	10800817 	ldw	r2,32(r2)
81112f0c:	1000021e 	bne	r2,zero,81112f18 <isatty+0x5c>
    {
      return 1;
81112f10:	00800044 	movi	r2,1
81112f14:	00000d06 	br	81112f4c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
81112f18:	e0bff004 	addi	r2,fp,-64
81112f1c:	100b883a 	mov	r5,r2
81112f20:	e13fff17 	ldw	r4,-4(fp)
81112f24:	1112dd00 	call	81112dd0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
81112f28:	e0bff117 	ldw	r2,-60(fp)
81112f2c:	10880020 	cmpeqi	r2,r2,8192
81112f30:	10803fcc 	andi	r2,r2,255
81112f34:	00000506 	br	81112f4c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
81112f38:	1112e800 	call	81112e80 <alt_get_errno>
81112f3c:	1007883a 	mov	r3,r2
81112f40:	00801444 	movi	r2,81
81112f44:	18800015 	stw	r2,0(r3)
    return 0;
81112f48:	0005883a 	mov	r2,zero
  }
}
81112f4c:	e037883a 	mov	sp,fp
81112f50:	dfc00117 	ldw	ra,4(sp)
81112f54:	df000017 	ldw	fp,0(sp)
81112f58:	dec00204 	addi	sp,sp,8
81112f5c:	f800283a 	ret

81112f60 <tx_log_str>:
	#include "sys/alt_log_printf.h"

        .global tx_log_str
tx_log_str:
	/* load base uart / jtag uart address into r6 */
	movhi r6, %hiadj(ALT_LOG_PORT_BASE)
81112f60:	01a04834 	movhi	r6,33056
	addi r6, r6, %lo(ALT_LOG_PORT_BASE)
81112f64:	31882404 	addi	r6,r6,8336

81112f68 <tx_next_char>:
tx_next_char:
        /* if pointer points to null, return 
         * r4 is the pointer to the str to be printed, set by ALT_LOG_PUTS */
	ldb r7, (r4)
81112f68:	21c00007 	ldb	r7,0(r4)
	beq r0, r7, end_tx
81112f6c:	01c00826 	beq	zero,r7,81112f90 <end_tx>

81112f70 <wait_tx_ready_loop>:

	/* check device transmit ready  */
wait_tx_ready_loop:
        ldwio   r8, ALT_LOG_PRINT_REG_OFFSET(r6)
81112f70:	32000137 	ldwio	r8,4(r6)
        /*UART, ALT_LOG_PRINT_MSK == 0x40
          JTAG UART, ALT_LOG_PRINT_MSK == 0xFFFF0000 */
        andhi   r5, r8, %hi(ALT_LOG_PRINT_MSK)
81112f74:	417fffec 	andhi	r5,r8,65535
        andi    r8, r8, %lo(ALT_LOG_PRINT_MSK)
81112f78:	4200000c 	andi	r8,r8,0
        or      r5, r5, r8
81112f7c:	2a0ab03a 	or	r5,r5,r8
        beq     r5, r0, wait_tx_ready_loop	
81112f80:	283ffb26 	beq	r5,zero,81112f70 <__reset+0xfb0f2f70>
	/* write char */
	stwio   r7, ALT_LOG_PRINT_TXDATA_REG_OFFSET (r6)		
81112f84:	31c00035 	stwio	r7,0(r6)
	/* advance string pointer */
	addi r4, r4, 1
81112f88:	21000044 	addi	r4,r4,1
	br tx_next_char
81112f8c:	003ff606 	br	81112f68 <__reset+0xfb0f2f68>

81112f90 <end_tx>:
end_tx:	
        ret
81112f90:	f800283a 	ret

81112f94 <alt_log_txchar>:



/* Function to put one char onto the UART/JTAG UART txdata register. */
void alt_log_txchar(int c,char *base)
{
81112f94:	defffd04 	addi	sp,sp,-12
81112f98:	df000215 	stw	fp,8(sp)
81112f9c:	df000204 	addi	fp,sp,8
81112fa0:	e13ffe15 	stw	r4,-8(fp)
81112fa4:	e17fff15 	stw	r5,-4(fp)
  /* Wait until the device is ready for a character */
  while((ALT_LOG_PRINT_REG_RD(base) & ALT_LOG_PRINT_MSK) == 0)
81112fa8:	0001883a 	nop
81112fac:	e0bfff17 	ldw	r2,-4(fp)
81112fb0:	10800104 	addi	r2,r2,4
81112fb4:	10800037 	ldwio	r2,0(r2)
81112fb8:	10bfffec 	andhi	r2,r2,65535
81112fbc:	103ffb26 	beq	r2,zero,81112fac <__reset+0xfb0f2fac>
    ;
  /* And pop the character into the register */
  ALT_LOG_PRINT_TXDATA_WR(base,c);
81112fc0:	e0bfff17 	ldw	r2,-4(fp)
81112fc4:	e0fffe17 	ldw	r3,-8(fp)
81112fc8:	10c00035 	stwio	r3,0(r2)
}
81112fcc:	0001883a 	nop
81112fd0:	e037883a 	mov	sp,fp
81112fd4:	df000017 	ldw	fp,0(sp)
81112fd8:	dec00104 	addi	sp,sp,4
81112fdc:	f800283a 	ret

81112fe0 <alt_log_repchar>:


/* Called by alt_log_private_printf to print out characters repeatedly */
void alt_log_repchar(char c,int r,int base)
{
81112fe0:	defffb04 	addi	sp,sp,-20
81112fe4:	dfc00415 	stw	ra,16(sp)
81112fe8:	df000315 	stw	fp,12(sp)
81112fec:	df000304 	addi	fp,sp,12
81112ff0:	2005883a 	mov	r2,r4
81112ff4:	e17ffe15 	stw	r5,-8(fp)
81112ff8:	e1bfff15 	stw	r6,-4(fp)
81112ffc:	e0bffd05 	stb	r2,-12(fp)
  while(r-- > 0)
81113000:	00000506 	br	81113018 <alt_log_repchar+0x38>
    alt_log_txchar(c,(char*) base);
81113004:	e0bffd07 	ldb	r2,-12(fp)
81113008:	e0ffff17 	ldw	r3,-4(fp)
8111300c:	180b883a 	mov	r5,r3
81113010:	1009883a 	mov	r4,r2
81113014:	1112f940 	call	81112f94 <alt_log_txchar>


/* Called by alt_log_private_printf to print out characters repeatedly */
void alt_log_repchar(char c,int r,int base)
{
  while(r-- > 0)
81113018:	e0bffe17 	ldw	r2,-8(fp)
8111301c:	10ffffc4 	addi	r3,r2,-1
81113020:	e0fffe15 	stw	r3,-8(fp)
81113024:	00bff716 	blt	zero,r2,81113004 <__reset+0xfb0f3004>
    alt_log_txchar(c,(char*) base);
}
81113028:	0001883a 	nop
8111302c:	e037883a 	mov	sp,fp
81113030:	dfc00117 	ldw	ra,4(sp)
81113034:	df000017 	ldw	fp,0(sp)
81113038:	dec00204 	addi	sp,sp,8
8111303c:	f800283a 	ret

81113040 <alt_log_private_printf>:


/* Stripped down printf function */
void alt_log_private_printf(const char *fmt,int base,va_list args)
  {
81113040:	deffe904 	addi	sp,sp,-92
81113044:	dfc01615 	stw	ra,88(sp)
81113048:	df001515 	stw	fp,84(sp)
8111304c:	dc001415 	stw	r16,80(sp)
81113050:	df001504 	addi	fp,sp,84
81113054:	e13ffc15 	stw	r4,-16(fp)
81113058:	e17ffd15 	stw	r5,-12(fp)
8111305c:	e1bffe15 	stw	r6,-8(fp)
  const char *w;
  char c;
  int state;
  int fmtLeadingZero = 0; /* init these all to 0 for -W warnings. */
81113060:	e03fed15 	stw	zero,-76(fp)
  int fmtLong = 0;
81113064:	e03fee15 	stw	zero,-72(fp)
  int fmtBeforeDecimal = 0;
81113068:	e03fef15 	stw	zero,-68(fp)
  int fmtAfterDecimal = 0;
8111306c:	e03ff015 	stw	zero,-64(fp)
  int fmtBase = 0;
81113070:	e03ff115 	stw	zero,-60(fp)
  int fmtSigned = 0;
81113074:	e03ff215 	stw	zero,-56(fp)
  int fmtCase = 0; /* For hex format, if 1, A-F, else a-f. */
81113078:	e03ff315 	stw	zero,-52(fp)

  w = fmt;
8111307c:	e0bffc17 	ldw	r2,-16(fp)
81113080:	e0bfeb15 	stw	r2,-84(fp)
  state = pfState_chars;
81113084:	e03fec15 	stw	zero,-80(fp)

  while(0 != (c = *w++))
81113088:	00014b06 	br	811135b8 <alt_log_private_printf+0x578>
    {
    switch(state)
8111308c:	e0bfec17 	ldw	r2,-80(fp)
81113090:	10c00060 	cmpeqi	r3,r2,1
81113094:	18001b1e 	bne	r3,zero,81113104 <alt_log_private_printf+0xc4>
81113098:	10c000a0 	cmpeqi	r3,r2,2
8111309c:	18002d1e 	bne	r3,zero,81113154 <alt_log_private_printf+0x114>
811130a0:	10000126 	beq	r2,zero,811130a8 <alt_log_private_printf+0x68>
811130a4:	00014406 	br	811135b8 <alt_log_private_printf+0x578>
      {
      case pfState_chars:
        if(c == '%')
811130a8:	e0bffb07 	ldb	r2,-20(fp)
811130ac:	10800958 	cmpnei	r2,r2,37
811130b0:	10000e1e 	bne	r2,zero,811130ec <alt_log_private_printf+0xac>
        {
          fmtLeadingZero = 0;
811130b4:	e03fed15 	stw	zero,-76(fp)
          fmtLong = 0;
811130b8:	e03fee15 	stw	zero,-72(fp)
          fmtBase = 10;
811130bc:	00800284 	movi	r2,10
811130c0:	e0bff115 	stw	r2,-60(fp)
          fmtSigned = 1;
811130c4:	00800044 	movi	r2,1
811130c8:	e0bff215 	stw	r2,-56(fp)
          fmtCase = 0; /* Only %X sets this. */
811130cc:	e03ff315 	stw	zero,-52(fp)
          fmtBeforeDecimal = -1;
811130d0:	00bfffc4 	movi	r2,-1
811130d4:	e0bfef15 	stw	r2,-68(fp)
          fmtAfterDecimal = -1;
811130d8:	00bfffc4 	movi	r2,-1
811130dc:	e0bff015 	stw	r2,-64(fp)
          state = pfState_firstFmtChar;
811130e0:	00800044 	movi	r2,1
811130e4:	e0bfec15 	stw	r2,-80(fp)
811130e8:	00013306 	br	811135b8 <alt_log_private_printf+0x578>
        }
        else
        {
          alt_log_txchar(c,(char*)base);
811130ec:	e0bffb07 	ldb	r2,-20(fp)
811130f0:	e0fffd17 	ldw	r3,-12(fp)
811130f4:	180b883a 	mov	r5,r3
811130f8:	1009883a 	mov	r4,r2
811130fc:	1112f940 	call	81112f94 <alt_log_txchar>
        }
        break;
81113100:	00012d06 	br	811135b8 <alt_log_private_printf+0x578>

      case pfState_firstFmtChar:
        if(c == '0')
81113104:	e0bffb07 	ldb	r2,-20(fp)
81113108:	10800c18 	cmpnei	r2,r2,48
8111310c:	1000051e 	bne	r2,zero,81113124 <alt_log_private_printf+0xe4>
        {
          fmtLeadingZero = 1;
81113110:	00800044 	movi	r2,1
81113114:	e0bfed15 	stw	r2,-76(fp)
          state = pfState_otherFmtChar;
81113118:	00800084 	movi	r2,2
8111311c:	e0bfec15 	stw	r2,-80(fp)
81113120:	00012506 	br	811135b8 <alt_log_private_printf+0x578>
        }
        else if(c == '%')
81113124:	e0bffb07 	ldb	r2,-20(fp)
81113128:	10800958 	cmpnei	r2,r2,37
8111312c:	1000071e 	bne	r2,zero,8111314c <alt_log_private_printf+0x10c>
        {
          alt_log_txchar(c,(char*)base);
81113130:	e0bffb07 	ldb	r2,-20(fp)
81113134:	e0fffd17 	ldw	r3,-12(fp)
81113138:	180b883a 	mov	r5,r3
8111313c:	1009883a 	mov	r4,r2
81113140:	1112f940 	call	81112f94 <alt_log_txchar>
          state = pfState_chars;
81113144:	e03fec15 	stw	zero,-80(fp)
81113148:	00011b06 	br	811135b8 <alt_log_private_printf+0x578>
        }
        else
        {
          state = pfState_otherFmtChar;
8111314c:	00800084 	movi	r2,2
81113150:	e0bfec15 	stw	r2,-80(fp)
        }
        break;

      case pfState_otherFmtChar:
otherFmtChar:
        if(c == '.')
81113154:	e0bffb07 	ldb	r2,-20(fp)
81113158:	10800b98 	cmpnei	r2,r2,46
8111315c:	1000021e 	bne	r2,zero,81113168 <alt_log_private_printf+0x128>
        {
          fmtAfterDecimal = 0;
81113160:	e03ff015 	stw	zero,-64(fp)
81113164:	00011306 	br	811135b4 <alt_log_private_printf+0x574>
        }
        else if('0' <= c && c <= '9')
81113168:	e0bffb07 	ldb	r2,-20(fp)
8111316c:	10800c10 	cmplti	r2,r2,48
81113170:	10001a1e 	bne	r2,zero,811131dc <alt_log_private_printf+0x19c>
81113174:	e0bffb07 	ldb	r2,-20(fp)
81113178:	10800e88 	cmpgei	r2,r2,58
8111317c:	1000171e 	bne	r2,zero,811131dc <alt_log_private_printf+0x19c>
        {
          c -= '0';
81113180:	e0bffb03 	ldbu	r2,-20(fp)
81113184:	10bff404 	addi	r2,r2,-48
81113188:	e0bffb05 	stb	r2,-20(fp)
          if(fmtAfterDecimal < 0)     /* still before decimal */
8111318c:	e0bff017 	ldw	r2,-64(fp)
81113190:	10000c0e 	bge	r2,zero,811131c4 <alt_log_private_printf+0x184>
          {
            if(fmtBeforeDecimal < 0)
81113194:	e0bfef17 	ldw	r2,-68(fp)
81113198:	1000020e 	bge	r2,zero,811131a4 <alt_log_private_printf+0x164>
            {
              fmtBeforeDecimal = 0;
8111319c:	e03fef15 	stw	zero,-68(fp)
811131a0:	00000306 	br	811131b0 <alt_log_private_printf+0x170>
            }
            else
            {
              fmtBeforeDecimal *= 10;
811131a4:	e0bfef17 	ldw	r2,-68(fp)
811131a8:	108002a4 	muli	r2,r2,10
811131ac:	e0bfef15 	stw	r2,-68(fp)
            }
            fmtBeforeDecimal += c;
811131b0:	e0bffb07 	ldb	r2,-20(fp)
811131b4:	e0ffef17 	ldw	r3,-68(fp)
811131b8:	1885883a 	add	r2,r3,r2
811131bc:	e0bfef15 	stw	r2,-68(fp)
          fmtAfterDecimal = 0;
        }
        else if('0' <= c && c <= '9')
        {
          c -= '0';
          if(fmtAfterDecimal < 0)     /* still before decimal */
811131c0:	0000fc06 	br	811135b4 <alt_log_private_printf+0x574>
            }
            fmtBeforeDecimal += c;
          }
          else
          {
            fmtAfterDecimal = (fmtAfterDecimal * 10) + c;
811131c4:	e0bff017 	ldw	r2,-64(fp)
811131c8:	10c002a4 	muli	r3,r2,10
811131cc:	e0bffb07 	ldb	r2,-20(fp)
811131d0:	1885883a 	add	r2,r3,r2
811131d4:	e0bff015 	stw	r2,-64(fp)
          fmtAfterDecimal = 0;
        }
        else if('0' <= c && c <= '9')
        {
          c -= '0';
          if(fmtAfterDecimal < 0)     /* still before decimal */
811131d8:	0000f606 	br	811135b4 <alt_log_private_printf+0x574>
          else
          {
            fmtAfterDecimal = (fmtAfterDecimal * 10) + c;
          }
        }
        else if(c == 'l')
811131dc:	e0bffb07 	ldb	r2,-20(fp)
811131e0:	10801b18 	cmpnei	r2,r2,108
811131e4:	1000031e 	bne	r2,zero,811131f4 <alt_log_private_printf+0x1b4>
        {
          fmtLong = 1;
811131e8:	00800044 	movi	r2,1
811131ec:	e0bfee15 	stw	r2,-72(fp)
811131f0:	0000f006 	br	811135b4 <alt_log_private_printf+0x574>
        }
        else                  /* we're up to the letter which determines type */
        {
          switch(c)
811131f4:	e0bffb07 	ldb	r2,-20(fp)
811131f8:	10bfea04 	addi	r2,r2,-88
811131fc:	10c00868 	cmpgeui	r3,r2,33
81113200:	1800eb1e 	bne	r3,zero,811135b0 <alt_log_private_printf+0x570>
81113204:	100690ba 	slli	r3,r2,2
81113208:	00a04474 	movhi	r2,33041
8111320c:	108c8704 	addi	r2,r2,12828
81113210:	1885883a 	add	r2,r3,r2
81113214:	10800017 	ldw	r2,0(r2)
81113218:	1000683a 	jmp	r2
8111321c:	811134dc 	xori	r4,r16,17619
81113220:	811135b0 	cmpltui	r4,r16,17622
81113224:	811135b0 	cmpltui	r4,r16,17622
81113228:	811135b0 	cmpltui	r4,r16,17622
8111322c:	811135b0 	cmpltui	r4,r16,17622
81113230:	811135b0 	cmpltui	r4,r16,17622
81113234:	811135b0 	cmpltui	r4,r16,17622
81113238:	811135b0 	cmpltui	r4,r16,17622
8111323c:	811135b0 	cmpltui	r4,r16,17622
81113240:	811135b0 	cmpltui	r4,r16,17622
81113244:	811135b0 	cmpltui	r4,r16,17622
81113248:	811134f4 	orhi	r4,r16,17619
8111324c:	811132a0 	cmpeqi	r4,r16,17610
81113250:	811135b0 	cmpltui	r4,r16,17622
81113254:	811135b0 	cmpltui	r4,r16,17622
81113258:	811135b0 	cmpltui	r4,r16,17622
8111325c:	811135b0 	cmpltui	r4,r16,17622
81113260:	811132a0 	cmpeqi	r4,r16,17610
81113264:	811135b0 	cmpltui	r4,r16,17622
81113268:	811135b0 	cmpltui	r4,r16,17622
8111326c:	811135b0 	cmpltui	r4,r16,17622
81113270:	811135b0 	cmpltui	r4,r16,17622
81113274:	811135b0 	cmpltui	r4,r16,17622
81113278:	811134bc 	xorhi	r4,r16,17618
8111327c:	811135b0 	cmpltui	r4,r16,17622
81113280:	811135b0 	cmpltui	r4,r16,17622
81113284:	811135b0 	cmpltui	r4,r16,17622
81113288:	81113530 	cmpltui	r4,r16,17620
8111328c:	811135b0 	cmpltui	r4,r16,17622
81113290:	811134b4 	orhi	r4,r16,17618
81113294:	811135b0 	cmpltui	r4,r16,17622
81113298:	811135b0 	cmpltui	r4,r16,17622
8111329c:	811134cc 	andi	r4,r16,17619
                unsigned long vShrink;  /* used to count digits */
                int sign;
                int digitCount;

                /* Get the value */
                if(fmtLong)
811132a0:	e0bfee17 	ldw	r2,-72(fp)
811132a4:	10000e26 	beq	r2,zero,811132e0 <alt_log_private_printf+0x2a0>
                {
                  if (fmtSigned)
811132a8:	e0bff217 	ldw	r2,-56(fp)
811132ac:	10000626 	beq	r2,zero,811132c8 <alt_log_private_printf+0x288>
                  {
                    v = va_arg(args,long);
811132b0:	e0bffe17 	ldw	r2,-8(fp)
811132b4:	10c00104 	addi	r3,r2,4
811132b8:	e0fffe15 	stw	r3,-8(fp)
811132bc:	10800017 	ldw	r2,0(r2)
811132c0:	e0bff415 	stw	r2,-48(fp)
811132c4:	00001306 	br	81113314 <alt_log_private_printf+0x2d4>
                  }
                  else
                  {
                    v = va_arg(args,unsigned long);
811132c8:	e0bffe17 	ldw	r2,-8(fp)
811132cc:	10c00104 	addi	r3,r2,4
811132d0:	e0fffe15 	stw	r3,-8(fp)
811132d4:	10800017 	ldw	r2,0(r2)
811132d8:	e0bff415 	stw	r2,-48(fp)
811132dc:	00000d06 	br	81113314 <alt_log_private_printf+0x2d4>
                  }
                }
                else
                {
                  if (fmtSigned)
811132e0:	e0bff217 	ldw	r2,-56(fp)
811132e4:	10000626 	beq	r2,zero,81113300 <alt_log_private_printf+0x2c0>
                  {
                    v = va_arg(args,int);
811132e8:	e0bffe17 	ldw	r2,-8(fp)
811132ec:	10c00104 	addi	r3,r2,4
811132f0:	e0fffe15 	stw	r3,-8(fp)
811132f4:	10800017 	ldw	r2,0(r2)
811132f8:	e0bff415 	stw	r2,-48(fp)
811132fc:	00000506 	br	81113314 <alt_log_private_printf+0x2d4>
                  }
                  else
                  {
                    v = va_arg(args,unsigned int);
81113300:	e0bffe17 	ldw	r2,-8(fp)
81113304:	10c00104 	addi	r3,r2,4
81113308:	e0fffe15 	stw	r3,-8(fp)
8111330c:	10800017 	ldw	r2,0(r2)
81113310:	e0bff415 	stw	r2,-48(fp)
                  }
                }

                /* Strip sign */
                sign = 0;
81113314:	e03ff715 	stw	zero,-36(fp)
                  /* (assumes sign bit is #31) */
                if( fmtSigned && (v & (0x80000000)) )
81113318:	e0bff217 	ldw	r2,-56(fp)
8111331c:	10000726 	beq	r2,zero,8111333c <alt_log_private_printf+0x2fc>
81113320:	e0bff417 	ldw	r2,-48(fp)
81113324:	1000050e 	bge	r2,zero,8111333c <alt_log_private_printf+0x2fc>
                  {
                  v = ~v + 1;
81113328:	e0bff417 	ldw	r2,-48(fp)
8111332c:	0085c83a 	sub	r2,zero,r2
81113330:	e0bff415 	stw	r2,-48(fp)
                  sign = 1;
81113334:	00800044 	movi	r2,1
81113338:	e0bff715 	stw	r2,-36(fp)
                  }

                /* Count digits, and get largest place value */
                vShrink = v;
8111333c:	e0bff417 	ldw	r2,-48(fp)
81113340:	e0bff615 	stw	r2,-40(fp)
                p = 1;
81113344:	00800044 	movi	r2,1
81113348:	e0bff515 	stw	r2,-44(fp)
                digitCount = 1;
8111334c:	00800044 	movi	r2,1
81113350:	e0bff815 	stw	r2,-32(fp)
                while( (vShrink = vShrink / fmtBase) > 0 )
81113354:	00000706 	br	81113374 <alt_log_private_printf+0x334>
                  {
                  digitCount++;
81113358:	e0bff817 	ldw	r2,-32(fp)
8111335c:	10800044 	addi	r2,r2,1
81113360:	e0bff815 	stw	r2,-32(fp)
                  p *= fmtBase;
81113364:	e0bff117 	ldw	r2,-60(fp)
81113368:	e0fff517 	ldw	r3,-44(fp)
8111336c:	1885383a 	mul	r2,r3,r2
81113370:	e0bff515 	stw	r2,-44(fp)

                /* Count digits, and get largest place value */
                vShrink = v;
                p = 1;
                digitCount = 1;
                while( (vShrink = vShrink / fmtBase) > 0 )
81113374:	e0bff117 	ldw	r2,-60(fp)
81113378:	e0fff617 	ldw	r3,-40(fp)
8111337c:	1885203a 	divu	r2,r3,r2
81113380:	e0bff615 	stw	r2,-40(fp)
81113384:	e0bff617 	ldw	r2,-40(fp)
81113388:	103ff31e 	bne	r2,zero,81113358 <__reset+0xfb0f3358>
                  digitCount++;
                  p *= fmtBase;
                  }

                /* Print leading characters & sign */
                fmtBeforeDecimal -= digitCount;
8111338c:	e0ffef17 	ldw	r3,-68(fp)
81113390:	e0bff817 	ldw	r2,-32(fp)
81113394:	1885c83a 	sub	r2,r3,r2
81113398:	e0bfef15 	stw	r2,-68(fp)
                if(fmtLeadingZero)
8111339c:	e0bfed17 	ldw	r2,-76(fp)
811133a0:	10000e26 	beq	r2,zero,811133dc <alt_log_private_printf+0x39c>
                  {
                  if(sign)
811133a4:	e0bff717 	ldw	r2,-36(fp)
811133a8:	10000726 	beq	r2,zero,811133c8 <alt_log_private_printf+0x388>
                    {
                    alt_log_txchar('-',(char*)base);
811133ac:	e0bffd17 	ldw	r2,-12(fp)
811133b0:	100b883a 	mov	r5,r2
811133b4:	01000b44 	movi	r4,45
811133b8:	1112f940 	call	81112f94 <alt_log_txchar>
                    fmtBeforeDecimal--;
811133bc:	e0bfef17 	ldw	r2,-68(fp)
811133c0:	10bfffc4 	addi	r2,r2,-1
811133c4:	e0bfef15 	stw	r2,-68(fp)
                    }
                  alt_log_repchar('0',fmtBeforeDecimal,base);
811133c8:	e1bffd17 	ldw	r6,-12(fp)
811133cc:	e17fef17 	ldw	r5,-68(fp)
811133d0:	01000c04 	movi	r4,48
811133d4:	1112fe00 	call	81112fe0 <alt_log_repchar>
811133d8:	00003206 	br	811134a4 <alt_log_private_printf+0x464>
                  }
                else
                  {
                    if(sign)
811133dc:	e0bff717 	ldw	r2,-36(fp)
811133e0:	10000326 	beq	r2,zero,811133f0 <alt_log_private_printf+0x3b0>
                    {
                      fmtBeforeDecimal--;
811133e4:	e0bfef17 	ldw	r2,-68(fp)
811133e8:	10bfffc4 	addi	r2,r2,-1
811133ec:	e0bfef15 	stw	r2,-68(fp)
                    }
                    alt_log_repchar(' ',fmtBeforeDecimal,base);
811133f0:	e1bffd17 	ldw	r6,-12(fp)
811133f4:	e17fef17 	ldw	r5,-68(fp)
811133f8:	01000804 	movi	r4,32
811133fc:	1112fe00 	call	81112fe0 <alt_log_repchar>
                    if(sign)
81113400:	e0bff717 	ldw	r2,-36(fp)
81113404:	10002726 	beq	r2,zero,811134a4 <alt_log_private_printf+0x464>
                    {
                      alt_log_txchar('-',(char*)base);
81113408:	e0bffd17 	ldw	r2,-12(fp)
8111340c:	100b883a 	mov	r5,r2
81113410:	01000b44 	movi	r4,45
81113414:	1112f940 	call	81112f94 <alt_log_txchar>
                    }
                  }

                /* Print numbery parts */
                while(p)
81113418:	00002206 	br	811134a4 <alt_log_private_printf+0x464>
                  {
                  unsigned char d;

                  d = v / p;
8111341c:	e0fff417 	ldw	r3,-48(fp)
81113420:	e0bff517 	ldw	r2,-44(fp)
81113424:	1885203a 	divu	r2,r3,r2
81113428:	e0bff905 	stb	r2,-28(fp)
                  d += '0';
8111342c:	e0bff903 	ldbu	r2,-28(fp)
81113430:	10800c04 	addi	r2,r2,48
81113434:	e0bff905 	stb	r2,-28(fp)
                  if(d > '9')
81113438:	e0bff903 	ldbu	r2,-28(fp)
8111343c:	10800eb0 	cmpltui	r2,r2,58
81113440:	1000081e 	bne	r2,zero,81113464 <alt_log_private_printf+0x424>
                  {
                    d += (fmtCase ? 'A' : 'a') - '0' - 10;
81113444:	e0bff317 	ldw	r2,-52(fp)
81113448:	10000226 	beq	r2,zero,81113454 <alt_log_private_printf+0x414>
8111344c:	008001c4 	movi	r2,7
81113450:	00000106 	br	81113458 <alt_log_private_printf+0x418>
81113454:	008009c4 	movi	r2,39
81113458:	e0fff903 	ldbu	r3,-28(fp)
8111345c:	10c5883a 	add	r2,r2,r3
81113460:	e0bff905 	stb	r2,-28(fp)
                  }
                  alt_log_txchar(d,(char*)base);
81113464:	e0bff903 	ldbu	r2,-28(fp)
81113468:	e0fffd17 	ldw	r3,-12(fp)
8111346c:	180b883a 	mov	r5,r3
81113470:	1009883a 	mov	r4,r2
81113474:	1112f940 	call	81112f94 <alt_log_txchar>

                  v = v % p;
81113478:	e0bff417 	ldw	r2,-48(fp)
8111347c:	e0fff517 	ldw	r3,-44(fp)
81113480:	10c9203a 	divu	r4,r2,r3
81113484:	e0fff517 	ldw	r3,-44(fp)
81113488:	20c7383a 	mul	r3,r4,r3
8111348c:	10c5c83a 	sub	r2,r2,r3
81113490:	e0bff415 	stw	r2,-48(fp)
                  p = p / fmtBase;
81113494:	e0bff117 	ldw	r2,-60(fp)
81113498:	e0fff517 	ldw	r3,-44(fp)
8111349c:	1885203a 	divu	r2,r3,r2
811134a0:	e0bff515 	stw	r2,-44(fp)
                      alt_log_txchar('-',(char*)base);
                    }
                  }

                /* Print numbery parts */
                while(p)
811134a4:	e0bff517 	ldw	r2,-44(fp)
811134a8:	103fdc1e 	bne	r2,zero,8111341c <__reset+0xfb0f341c>
                  v = v % p;
                  p = p / fmtBase;
                  }
                }

              state = pfState_chars;
811134ac:	e03fec15 	stw	zero,-80(fp)
              break;
811134b0:	00003f06 	br	811135b0 <alt_log_private_printf+0x570>

            case 'u':
              fmtSigned = 0;
811134b4:	e03ff215 	stw	zero,-56(fp)
              goto doIntegerPrint;
811134b8:	003f7906 	br	811132a0 <__reset+0xfb0f32a0>
            case 'o':
              fmtSigned = 0;
811134bc:	e03ff215 	stw	zero,-56(fp)
              fmtBase = 8;
811134c0:	00800204 	movi	r2,8
811134c4:	e0bff115 	stw	r2,-60(fp)
              goto doIntegerPrint;
811134c8:	003f7506 	br	811132a0 <__reset+0xfb0f32a0>
            case 'x':
              fmtSigned = 0;
811134cc:	e03ff215 	stw	zero,-56(fp)
              fmtBase = 16;
811134d0:	00800404 	movi	r2,16
811134d4:	e0bff115 	stw	r2,-60(fp)
              goto doIntegerPrint;
811134d8:	003f7106 	br	811132a0 <__reset+0xfb0f32a0>
            case 'X':
              fmtSigned = 0;
811134dc:	e03ff215 	stw	zero,-56(fp)
              fmtBase = 16;
811134e0:	00800404 	movi	r2,16
811134e4:	e0bff115 	stw	r2,-60(fp)
              fmtCase = 1;
811134e8:	00800044 	movi	r2,1
811134ec:	e0bff315 	stw	r2,-52(fp)
              goto doIntegerPrint;
811134f0:	003f6b06 	br	811132a0 <__reset+0xfb0f32a0>

            case 'c':
              alt_log_repchar(' ',fmtBeforeDecimal-1,base);
811134f4:	e0bfef17 	ldw	r2,-68(fp)
811134f8:	10bfffc4 	addi	r2,r2,-1
811134fc:	e1bffd17 	ldw	r6,-12(fp)
81113500:	100b883a 	mov	r5,r2
81113504:	01000804 	movi	r4,32
81113508:	1112fe00 	call	81112fe0 <alt_log_repchar>
              alt_log_txchar(va_arg(args,int),(char*)base);
8111350c:	e0bffe17 	ldw	r2,-8(fp)
81113510:	10c00104 	addi	r3,r2,4
81113514:	e0fffe15 	stw	r3,-8(fp)
81113518:	10800017 	ldw	r2,0(r2)
8111351c:	e0fffd17 	ldw	r3,-12(fp)
81113520:	180b883a 	mov	r5,r3
81113524:	1009883a 	mov	r4,r2
81113528:	1112f940 	call	81112f94 <alt_log_txchar>
              break;
8111352c:	00002006 	br	811135b0 <alt_log_private_printf+0x570>

            case 's':
                {
                char *s;

                s = va_arg(args,char *);
81113530:	e0bffe17 	ldw	r2,-8(fp)
81113534:	10c00104 	addi	r3,r2,4
81113538:	e0fffe15 	stw	r3,-8(fp)
8111353c:	10800017 	ldw	r2,0(r2)
81113540:	e0bffa15 	stw	r2,-24(fp)
                alt_log_repchar(' ',fmtBeforeDecimal-strlen(s),base);
81113544:	e43fef17 	ldw	r16,-68(fp)
81113548:	e13ffa17 	ldw	r4,-24(fp)
8111354c:	1102ebc0 	call	81102ebc <strlen>
81113550:	8085c83a 	sub	r2,r16,r2
81113554:	e1bffd17 	ldw	r6,-12(fp)
81113558:	100b883a 	mov	r5,r2
8111355c:	01000804 	movi	r4,32
81113560:	1112fe00 	call	81112fe0 <alt_log_repchar>

                while(*s)
81113564:	00000b06 	br	81113594 <alt_log_private_printf+0x554>
                  alt_log_txchar(*s++,(char*)base);
81113568:	e0bffa17 	ldw	r2,-24(fp)
8111356c:	10c00044 	addi	r3,r2,1
81113570:	e0fffa15 	stw	r3,-24(fp)
81113574:	10800003 	ldbu	r2,0(r2)
81113578:	10803fcc 	andi	r2,r2,255
8111357c:	1080201c 	xori	r2,r2,128
81113580:	10bfe004 	addi	r2,r2,-128
81113584:	e0fffd17 	ldw	r3,-12(fp)
81113588:	180b883a 	mov	r5,r3
8111358c:	1009883a 	mov	r4,r2
81113590:	1112f940 	call	81112f94 <alt_log_txchar>
                char *s;

                s = va_arg(args,char *);
                alt_log_repchar(' ',fmtBeforeDecimal-strlen(s),base);

                while(*s)
81113594:	e0bffa17 	ldw	r2,-24(fp)
81113598:	10800003 	ldbu	r2,0(r2)
8111359c:	10803fcc 	andi	r2,r2,255
811135a0:	1080201c 	xori	r2,r2,128
811135a4:	10bfe004 	addi	r2,r2,-128
811135a8:	103fef1e 	bne	r2,zero,81113568 <__reset+0xfb0f3568>
                  alt_log_txchar(*s++,(char*)base);
                }
              break;
811135ac:	0001883a 	nop
            } /* switch last letter of fmt */
          state=pfState_chars;
811135b0:	e03fec15 	stw	zero,-80(fp)
          }
        break;
811135b4:	0001883a 	nop
  int fmtCase = 0; /* For hex format, if 1, A-F, else a-f. */

  w = fmt;
  state = pfState_chars;

  while(0 != (c = *w++))
811135b8:	e0bfeb17 	ldw	r2,-84(fp)
811135bc:	10c00044 	addi	r3,r2,1
811135c0:	e0ffeb15 	stw	r3,-84(fp)
811135c4:	10800003 	ldbu	r2,0(r2)
811135c8:	e0bffb05 	stb	r2,-20(fp)
811135cc:	e0bffb07 	ldb	r2,-20(fp)
811135d0:	103eae1e 	bne	r2,zero,8111308c <__reset+0xfb0f308c>
          state=pfState_chars;
          }
        break;
      } /* switch */
    } /* while chars left */
  } /* printf */
811135d4:	0001883a 	nop
811135d8:	e6ffff04 	addi	sp,fp,-4
811135dc:	dfc00217 	ldw	ra,8(sp)
811135e0:	df000117 	ldw	fp,4(sp)
811135e4:	dc000017 	ldw	r16,0(sp)
811135e8:	dec00304 	addi	sp,sp,12
811135ec:	f800283a 	ret

811135f0 <alt_log_printf_proc>:

/* Main logging printf function */
int alt_log_printf_proc(const char *fmt, ... )
{
811135f0:	defff904 	addi	sp,sp,-28
811135f4:	dfc00315 	stw	ra,12(sp)
811135f8:	df000215 	stw	fp,8(sp)
811135fc:	df000204 	addi	fp,sp,8
81113600:	e13fff15 	stw	r4,-4(fp)
81113604:	e1400215 	stw	r5,8(fp)
81113608:	e1800315 	stw	r6,12(fp)
8111360c:	e1c00415 	stw	r7,16(fp)
    va_list args;

    va_start (args, fmt);
81113610:	e0800204 	addi	r2,fp,8
81113614:	e0bffe15 	stw	r2,-8(fp)
    alt_log_private_printf(fmt,ALT_LOG_PORT_BASE,args);
81113618:	e0bffe17 	ldw	r2,-8(fp)
8111361c:	100d883a 	mov	r6,r2
81113620:	01604834 	movhi	r5,33056
81113624:	29482404 	addi	r5,r5,8336
81113628:	e13fff17 	ldw	r4,-4(fp)
8111362c:	11130400 	call	81113040 <alt_log_private_printf>
    return (0);
81113630:	0005883a 	mov	r2,zero
}
81113634:	e037883a 	mov	sp,fp
81113638:	dfc00117 	ldw	ra,4(sp)
8111363c:	df000017 	ldw	fp,0(sp)
81113640:	dec00504 	addi	sp,sp,20
81113644:	f800283a 	ret

81113648 <altera_avalon_jtag_uart_report_log>:
 * This function, when turned on, prints out the status
 * of the JTAG UART Control register, every ALT_LOG_JTAG_UART_TICKS.
 * If the flag is off, the alarm should never be registered, and this
 * function should never run */
alt_u32 altera_avalon_jtag_uart_report_log(void * context)
{
81113648:	defff904 	addi	sp,sp,-28
8111364c:	dfc00615 	stw	ra,24(sp)
81113650:	df000515 	stw	fp,20(sp)
81113654:	dc400415 	stw	r17,16(sp)
81113658:	dc000315 	stw	r16,12(sp)
8111365c:	df000504 	addi	fp,sp,20
81113660:	e13ffd15 	stw	r4,-12(fp)
    if (alt_log_jtag_uart_alarm_on_flag) {
81113664:	d0a01b83 	ldbu	r2,-32658(gp)
81113668:	10803fcc 	andi	r2,r2,255
8111366c:	10001426 	beq	r2,zero,811136c0 <altera_avalon_jtag_uart_report_log+0x78>
    altera_avalon_jtag_uart_state* dev = (altera_avalon_jtag_uart_state*) context;
81113670:	e0bffd17 	ldw	r2,-12(fp)
81113674:	e0bffb15 	stw	r2,-20(fp)
        const char* header="JTAG Alarm:";
81113678:	00a044b4 	movhi	r2,33042
8111367c:	10a67a04 	addi	r2,r2,-26136
81113680:	e0bffc15 	stw	r2,-16(fp)
        alt_log_jtag_uart_print_control_reg(dev, dev->base, header);
81113684:	e0bffb17 	ldw	r2,-20(fp)
81113688:	10800017 	ldw	r2,0(r2)
8111368c:	e1bffc17 	ldw	r6,-16(fp)
81113690:	100b883a 	mov	r5,r2
81113694:	e13ffb17 	ldw	r4,-20(fp)
81113698:	11136e00 	call	811136e0 <alt_log_jtag_uart_print_control_reg>
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
8111369c:	d0e02217 	ldw	r3,-32632(gp)
        return ALT_LOG_JTAG_UART_TICKS;
811136a0:	00b33374 	movhi	r2,52429
811136a4:	10b33344 	addi	r2,r2,-13107
811136a8:	1888383a 	mulxuu	r4,r3,r2
811136ac:	1885383a 	mul	r2,r3,r2
811136b0:	1021883a 	mov	r16,r2
811136b4:	2023883a 	mov	r17,r4
811136b8:	8804d0fa 	srli	r2,r17,3
811136bc:	00000106 	br	811136c4 <altera_avalon_jtag_uart_report_log+0x7c>
    }
    else 
    {  
        /* If flag is not on, return 0 to disable future alarms.
        * Should never be here, alarm should not be enabled at all. */
        return 0;
811136c0:	0005883a 	mov	r2,zero
    }
}
811136c4:	e6fffe04 	addi	sp,fp,-8
811136c8:	dfc00317 	ldw	ra,12(sp)
811136cc:	df000217 	ldw	fp,8(sp)
811136d0:	dc400117 	ldw	r17,4(sp)
811136d4:	dc000017 	ldw	r16,0(sp)
811136d8:	dec00404 	addi	sp,sp,16
811136dc:	f800283a 	ret

811136e0 <alt_log_jtag_uart_print_control_reg>:

void alt_log_jtag_uart_print_control_reg(altera_avalon_jtag_uart_state* dev, int base, const char* header)
{
811136e0:	deffef04 	addi	sp,sp,-68
811136e4:	dfc01015 	stw	ra,64(sp)
811136e8:	df000f15 	stw	fp,60(sp)
811136ec:	df000f04 	addi	fp,sp,60
811136f0:	e13ffd15 	stw	r4,-12(fp)
811136f4:	e17ffe15 	stw	r5,-8(fp)
811136f8:	e1bfff15 	stw	r6,-4(fp)
     unsigned int control, space, ac, wi, ri, we, re;
     control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
811136fc:	e0bffe17 	ldw	r2,-8(fp)
81113700:	10800104 	addi	r2,r2,4
81113704:	10800037 	ldwio	r2,0(r2)
81113708:	e0bff615 	stw	r2,-40(fp)
     space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >>
8111370c:	e0bff617 	ldw	r2,-40(fp)
81113710:	1004d43a 	srli	r2,r2,16
81113714:	e0bff715 	stw	r2,-36(fp)
             ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
     we= (control & ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK) >>
81113718:	e0bff617 	ldw	r2,-40(fp)
8111371c:	1080008c 	andi	r2,r2,2
81113720:	1004d07a 	srli	r2,r2,1
81113724:	e0bff815 	stw	r2,-32(fp)
         ALTERA_AVALON_JTAG_UART_CONTROL_WE_OFST;
     re= (control & ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK) >>
81113728:	e0bff617 	ldw	r2,-40(fp)
8111372c:	1080004c 	andi	r2,r2,1
81113730:	e0bff915 	stw	r2,-28(fp)
         ALTERA_AVALON_JTAG_UART_CONTROL_RE_OFST;
     ri= (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK) >>
81113734:	e0bff617 	ldw	r2,-40(fp)
81113738:	1080400c 	andi	r2,r2,256
8111373c:	1004d23a 	srli	r2,r2,8
81113740:	e0bffa15 	stw	r2,-24(fp)
         ALTERA_AVALON_JTAG_UART_CONTROL_RI_OFST;
     wi= (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK) >>
81113744:	e0bff617 	ldw	r2,-40(fp)
81113748:	1080800c 	andi	r2,r2,512
8111374c:	1004d27a 	srli	r2,r2,9
81113750:	e0bffb15 	stw	r2,-20(fp)
         ALTERA_AVALON_JTAG_UART_CONTROL_WI_OFST;
     ac= (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK) >>
81113754:	e0bff617 	ldw	r2,-40(fp)
81113758:	1081000c 	andi	r2,r2,1024
8111375c:	1004d2ba 	srli	r2,r2,10
81113760:	e0bffc15 	stw	r2,-16(fp)
#ifdef ALTERA_AVALON_JTAG_UART_SMALL
    ALT_LOG_PRINTF(
     "%s HW FIFO wspace=%d AC=%d WI=%d RI=%d WE=%d RE=%d\r\n",
         header,space,ac,wi,ri,we,re);
#else
    ALT_LOG_PRINTF(
81113764:	e0bffd17 	ldw	r2,-12(fp)
81113768:	10c00d17 	ldw	r3,52(r2)
8111376c:	e0bffd17 	ldw	r2,-12(fp)
81113770:	10800c17 	ldw	r2,48(r2)
81113774:	1887c83a 	sub	r3,r3,r2
81113778:	e0bff917 	ldw	r2,-28(fp)
8111377c:	d8800415 	stw	r2,16(sp)
81113780:	e0bff817 	ldw	r2,-32(fp)
81113784:	d8800315 	stw	r2,12(sp)
81113788:	e0bffa17 	ldw	r2,-24(fp)
8111378c:	d8800215 	stw	r2,8(sp)
81113790:	e0bffb17 	ldw	r2,-20(fp)
81113794:	d8800115 	stw	r2,4(sp)
81113798:	e0bffc17 	ldw	r2,-16(fp)
8111379c:	d8800015 	stw	r2,0(sp)
811137a0:	e1fff717 	ldw	r7,-36(fp)
811137a4:	180d883a 	mov	r6,r3
811137a8:	e17fff17 	ldw	r5,-4(fp)
811137ac:	012044b4 	movhi	r4,33042
811137b0:	21267d04 	addi	r4,r4,-26124
811137b4:	11135f00 	call	811135f0 <alt_log_printf_proc>
     "%s SW CirBuf = %d, HW FIFO wspace=%d AC=%d WI=%d RI=%d WE=%d RE=%d\r\n",
         header,(dev->tx_out-dev->tx_in),space,ac,wi,ri,we,re);
#endif   
         
     return;
811137b8:	0001883a 	nop

}
811137bc:	e037883a 	mov	sp,fp
811137c0:	dfc00117 	ldw	ra,4(sp)
811137c4:	df000017 	ldw	fp,0(sp)
811137c8:	dec00204 	addi	sp,sp,8
811137cc:	f800283a 	ret

811137d0 <alt_log_jtag_uart_startup_info>:
/* In altera_avalon_jtag_uart.c
 * Same output as the alarm function above, but this is called in the driver
 * init function.  Hence, it gives the status of the JTAG UART control register
 * right at the initialization of the driver */ 
void alt_log_jtag_uart_startup_info(altera_avalon_jtag_uart_state* dev, int base)
{
811137d0:	defffb04 	addi	sp,sp,-20
811137d4:	dfc00415 	stw	ra,16(sp)
811137d8:	df000315 	stw	fp,12(sp)
811137dc:	df000304 	addi	fp,sp,12
811137e0:	e13ffe15 	stw	r4,-8(fp)
811137e4:	e17fff15 	stw	r5,-4(fp)
     const char* header="JTAG Startup Info:";
811137e8:	00a044b4 	movhi	r2,33042
811137ec:	10a68f04 	addi	r2,r2,-26052
811137f0:	e0bffd15 	stw	r2,-12(fp)
     alt_log_jtag_uart_print_control_reg(dev, base, header);
811137f4:	e1bffd17 	ldw	r6,-12(fp)
811137f8:	e17fff17 	ldw	r5,-4(fp)
811137fc:	e13ffe17 	ldw	r4,-8(fp)
81113800:	11136e00 	call	811136e0 <alt_log_jtag_uart_print_control_reg>
     return;
81113804:	0001883a 	nop
}
81113808:	e037883a 	mov	sp,fp
8111380c:	dfc00117 	ldw	ra,4(sp)
81113810:	df000017 	ldw	fp,0(sp)
81113814:	dec00204 	addi	sp,sp,8
81113818:	f800283a 	ret

8111381c <alt_log_jtag_uart_isr_proc>:

/* In altera_avalon_jtag_uart.c
 * When turned on, this function will print out the status of the jtag uart
 * control register every time there is a jtag uart "almost-empty" interrupt. */
void alt_log_jtag_uart_isr_proc(int base, altera_avalon_jtag_uart_state* dev) 
{
8111381c:	defffb04 	addi	sp,sp,-20
81113820:	dfc00415 	stw	ra,16(sp)
81113824:	df000315 	stw	fp,12(sp)
81113828:	df000304 	addi	fp,sp,12
8111382c:	e13ffe15 	stw	r4,-8(fp)
81113830:	e17fff15 	stw	r5,-4(fp)
    if (alt_log_jtag_uart_isr_on_flag) {
81113834:	d0a01bc3 	ldbu	r2,-32657(gp)
81113838:	10803fcc 	andi	r2,r2,255
8111383c:	10000826 	beq	r2,zero,81113860 <alt_log_jtag_uart_isr_proc+0x44>
        const char* header="JTAG IRQ:";
81113840:	00a044b4 	movhi	r2,33042
81113844:	10a69404 	addi	r2,r2,-26032
81113848:	e0bffd15 	stw	r2,-12(fp)
        alt_log_jtag_uart_print_control_reg(dev, base, header);
8111384c:	e1bffd17 	ldw	r6,-12(fp)
81113850:	e17ffe17 	ldw	r5,-8(fp)
81113854:	e13fff17 	ldw	r4,-4(fp)
81113858:	11136e00 	call	811136e0 <alt_log_jtag_uart_print_control_reg>
    }
    return;
8111385c:	0001883a 	nop
81113860:	0001883a 	nop
}
81113864:	e037883a 	mov	sp,fp
81113868:	dfc00117 	ldw	ra,4(sp)
8111386c:	df000017 	ldw	fp,0(sp)
81113870:	dec00204 	addi	sp,sp,8
81113874:	f800283a 	ret

81113878 <alt_log_write>:
 * When the alt_log_write_on_flag is turned on, this function gets called
 * every time alt_write gets called.  The first 
 * ALT_LOG_WRITE_ECHO_LEN characters of every printf command (or any command
 * that eventually calls write()) gets echoed to the alt_log output. */
void alt_log_write(const void *ptr, size_t len)
{
81113878:	defffa04 	addi	sp,sp,-24
8111387c:	dfc00515 	stw	ra,20(sp)
81113880:	df000415 	stw	fp,16(sp)
81113884:	df000404 	addi	fp,sp,16
81113888:	e13ffe15 	stw	r4,-8(fp)
8111388c:	e17fff15 	stw	r5,-4(fp)
    if (alt_log_write_on_flag) {
81113890:	d0a01b03 	ldbu	r2,-32660(gp)
81113894:	10803fcc 	andi	r2,r2,255
81113898:	10004026 	beq	r2,zero,8111399c <alt_log_write+0x124>
    int temp_cnt;
        int length=(ALT_LOG_WRITE_ECHO_LEN>len) ? len : ALT_LOG_WRITE_ECHO_LEN;
8111389c:	e0bfff17 	ldw	r2,-4(fp)
811138a0:	10c00430 	cmpltui	r3,r2,16
811138a4:	1800011e 	bne	r3,zero,811138ac <alt_log_write+0x34>
811138a8:	008003c4 	movi	r2,15
811138ac:	e0bffd15 	stw	r2,-12(fp)

        if (length < 2) return;
811138b0:	e0bffd17 	ldw	r2,-12(fp)
811138b4:	10800088 	cmpgei	r2,r2,2
811138b8:	10003726 	beq	r2,zero,81113998 <alt_log_write+0x120>

        strncpy (alt_log_write_buf,ptr,length);
811138bc:	e0bffd17 	ldw	r2,-12(fp)
811138c0:	100d883a 	mov	r6,r2
811138c4:	e17ffe17 	ldw	r5,-8(fp)
811138c8:	012044b4 	movhi	r4,33042
811138cc:	21308704 	addi	r4,r4,-15844
811138d0:	111871c0 	call	8111871c <strncpy>
    alt_log_write_buf[length-1]='\n';
811138d4:	e0bffd17 	ldw	r2,-12(fp)
811138d8:	10ffffc4 	addi	r3,r2,-1
811138dc:	00a044b4 	movhi	r2,33042
811138e0:	10b08704 	addi	r2,r2,-15844
811138e4:	10c5883a 	add	r2,r2,r3
811138e8:	00c00284 	movi	r3,10
811138ec:	10c00005 	stb	r3,0(r2)
    alt_log_write_buf[length]='\r';
811138f0:	00a044b4 	movhi	r2,33042
811138f4:	10b08704 	addi	r2,r2,-15844
811138f8:	e0fffd17 	ldw	r3,-12(fp)
811138fc:	10c5883a 	add	r2,r2,r3
81113900:	00c00344 	movi	r3,13
81113904:	10c00005 	stb	r3,0(r2)
    alt_log_write_buf[length+1]='\0';
81113908:	e0bffd17 	ldw	r2,-12(fp)
8111390c:	10c00044 	addi	r3,r2,1
81113910:	00a044b4 	movhi	r2,33042
81113914:	10b08704 	addi	r2,r2,-15844
81113918:	10c5883a 	add	r2,r2,r3
8111391c:	10000005 	stb	zero,0(r2)

    /* Escape Ctrl-D's. If the Ctrl-D gets sent it might kill the terminal
         * connection of alt_log. It will get replaced by 'D'. */
        for (temp_cnt=0;temp_cnt < length; temp_cnt++) {
81113920:	e03ffc15 	stw	zero,-16(fp)
81113924:	00001306 	br	81113974 <alt_log_write+0xfc>
        if (alt_log_write_buf[temp_cnt]== 0x4) {
81113928:	00a044b4 	movhi	r2,33042
8111392c:	10b08704 	addi	r2,r2,-15844
81113930:	e0fffc17 	ldw	r3,-16(fp)
81113934:	10c5883a 	add	r2,r2,r3
81113938:	10800003 	ldbu	r2,0(r2)
8111393c:	10803fcc 	andi	r2,r2,255
81113940:	1080201c 	xori	r2,r2,128
81113944:	10bfe004 	addi	r2,r2,-128
81113948:	10800118 	cmpnei	r2,r2,4
8111394c:	1000061e 	bne	r2,zero,81113968 <alt_log_write+0xf0>
            alt_log_write_buf[temp_cnt]='D';
81113950:	00a044b4 	movhi	r2,33042
81113954:	10b08704 	addi	r2,r2,-15844
81113958:	e0fffc17 	ldw	r3,-16(fp)
8111395c:	10c5883a 	add	r2,r2,r3
81113960:	00c01104 	movi	r3,68
81113964:	10c00005 	stb	r3,0(r2)
    alt_log_write_buf[length]='\r';
    alt_log_write_buf[length+1]='\0';

    /* Escape Ctrl-D's. If the Ctrl-D gets sent it might kill the terminal
         * connection of alt_log. It will get replaced by 'D'. */
        for (temp_cnt=0;temp_cnt < length; temp_cnt++) {
81113968:	e0bffc17 	ldw	r2,-16(fp)
8111396c:	10800044 	addi	r2,r2,1
81113970:	e0bffc15 	stw	r2,-16(fp)
81113974:	e0fffc17 	ldw	r3,-16(fp)
81113978:	e0bffd17 	ldw	r2,-12(fp)
8111397c:	18bfea16 	blt	r3,r2,81113928 <__reset+0xfb0f3928>
        if (alt_log_write_buf[temp_cnt]== 0x4) {
            alt_log_write_buf[temp_cnt]='D';
        }
    }
        ALT_LOG_PRINTF("Write Echo: %s",alt_log_write_buf);
81113980:	016044b4 	movhi	r5,33042
81113984:	29708704 	addi	r5,r5,-15844
81113988:	012044b4 	movhi	r4,33042
8111398c:	21269704 	addi	r4,r4,-26020
81113990:	11135f00 	call	811135f0 <alt_log_printf_proc>
81113994:	00000106 	br	8111399c <alt_log_write+0x124>
{
    if (alt_log_write_on_flag) {
    int temp_cnt;
        int length=(ALT_LOG_WRITE_ECHO_LEN>len) ? len : ALT_LOG_WRITE_ECHO_LEN;

        if (length < 2) return;
81113998:	0001883a 	nop
            alt_log_write_buf[temp_cnt]='D';
        }
    }
        ALT_LOG_PRINTF("Write Echo: %s",alt_log_write_buf);
    }
}
8111399c:	e037883a 	mov	sp,fp
811139a0:	dfc00117 	ldw	ra,4(sp)
811139a4:	df000017 	ldw	fp,0(sp)
811139a8:	dec00204 	addi	sp,sp,8
811139ac:	f800283a 	ret

811139b0 <alt_log_system_clock>:

/* In altera_avalon_timer_sc
 * This function prints out a system clock is alive message
 * every ALT_LOG_SYS_CLK_INTERVAL (in ticks).  */
void alt_log_system_clock()
{
811139b0:	defffe04 	addi	sp,sp,-8
811139b4:	dfc00115 	stw	ra,4(sp)
811139b8:	df000015 	stw	fp,0(sp)
811139bc:	d839883a 	mov	fp,sp
    if (alt_log_sys_clk_on_flag) {
811139c0:	d0a01b43 	ldbu	r2,-32659(gp)
811139c4:	10803fcc 	andi	r2,r2,255
811139c8:	10000e26 	beq	r2,zero,81113a04 <alt_log_system_clock+0x54>
    alt_log_sys_clk_count++;
811139cc:	d0a01e17 	ldw	r2,-32648(gp)
811139d0:	10800044 	addi	r2,r2,1
811139d4:	d0a01e15 	stw	r2,-32648(gp)
811139d8:	d0a02217 	ldw	r2,-32632(gp)
        if (alt_log_sys_clk_count > ALT_LOG_SYS_CLK_INTERVAL) {
811139dc:	d0e01e17 	ldw	r3,-32648(gp)
811139e0:	10c0082e 	bgeu	r2,r3,81113a04 <alt_log_system_clock+0x54>
            alt_log_sys_clk_count = 0;
811139e4:	d0201e15 	stw	zero,-32648(gp)
            ALT_LOG_PRINTF("System Clock On %u\r\n",alt_system_clock_in_sec++);
811139e8:	d0a01d17 	ldw	r2,-32652(gp)
811139ec:	10c00044 	addi	r3,r2,1
811139f0:	d0e01d15 	stw	r3,-32652(gp)
811139f4:	100b883a 	mov	r5,r2
811139f8:	012044b4 	movhi	r4,33042
811139fc:	21269b04 	addi	r4,r4,-26004
81113a00:	11135f00 	call	811135f0 <alt_log_printf_proc>
        }
    }
}
81113a04:	0001883a 	nop
81113a08:	e037883a 	mov	sp,fp
81113a0c:	dfc00117 	ldw	ra,4(sp)
81113a10:	df000017 	ldw	fp,0(sp)
81113a14:	dec00204 	addi	sp,sp,8
81113a18:	f800283a 	ret

81113a1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81113a1c:	defffe04 	addi	sp,sp,-8
81113a20:	dfc00115 	stw	ra,4(sp)
81113a24:	df000015 	stw	fp,0(sp)
81113a28:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81113a2c:	d0a00b17 	ldw	r2,-32724(gp)
81113a30:	10000326 	beq	r2,zero,81113a40 <alt_get_errno+0x24>
81113a34:	d0a00b17 	ldw	r2,-32724(gp)
81113a38:	103ee83a 	callr	r2
81113a3c:	00000106 	br	81113a44 <alt_get_errno+0x28>
81113a40:	d0a01a04 	addi	r2,gp,-32664
}
81113a44:	e037883a 	mov	sp,fp
81113a48:	dfc00117 	ldw	ra,4(sp)
81113a4c:	df000017 	ldw	fp,0(sp)
81113a50:	dec00204 	addi	sp,sp,8
81113a54:	f800283a 	ret

81113a58 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
81113a58:	defff904 	addi	sp,sp,-28
81113a5c:	dfc00615 	stw	ra,24(sp)
81113a60:	df000515 	stw	fp,20(sp)
81113a64:	df000504 	addi	fp,sp,20
81113a68:	e13ffd15 	stw	r4,-12(fp)
81113a6c:	e17ffe15 	stw	r5,-8(fp)
81113a70:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
81113a74:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
81113a78:	e0bffd17 	ldw	r2,-12(fp)
81113a7c:	10000616 	blt	r2,zero,81113a98 <lseek+0x40>
81113a80:	e0bffd17 	ldw	r2,-12(fp)
81113a84:	10c00324 	muli	r3,r2,12
81113a88:	00a044b4 	movhi	r2,33042
81113a8c:	10aa0c04 	addi	r2,r2,-22480
81113a90:	1885883a 	add	r2,r3,r2
81113a94:	00000106 	br	81113a9c <lseek+0x44>
81113a98:	0005883a 	mov	r2,zero
81113a9c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
81113aa0:	e0bffc17 	ldw	r2,-16(fp)
81113aa4:	10001026 	beq	r2,zero,81113ae8 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
81113aa8:	e0bffc17 	ldw	r2,-16(fp)
81113aac:	10800017 	ldw	r2,0(r2)
81113ab0:	10800717 	ldw	r2,28(r2)
81113ab4:	10000926 	beq	r2,zero,81113adc <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
81113ab8:	e0bffc17 	ldw	r2,-16(fp)
81113abc:	10800017 	ldw	r2,0(r2)
81113ac0:	10800717 	ldw	r2,28(r2)
81113ac4:	e1bfff17 	ldw	r6,-4(fp)
81113ac8:	e17ffe17 	ldw	r5,-8(fp)
81113acc:	e13ffc17 	ldw	r4,-16(fp)
81113ad0:	103ee83a 	callr	r2
81113ad4:	e0bffb15 	stw	r2,-20(fp)
81113ad8:	00000506 	br	81113af0 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
81113adc:	00bfde84 	movi	r2,-134
81113ae0:	e0bffb15 	stw	r2,-20(fp)
81113ae4:	00000206 	br	81113af0 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
81113ae8:	00bfebc4 	movi	r2,-81
81113aec:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
81113af0:	e0bffb17 	ldw	r2,-20(fp)
81113af4:	1000070e 	bge	r2,zero,81113b14 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
81113af8:	1113a1c0 	call	81113a1c <alt_get_errno>
81113afc:	1007883a 	mov	r3,r2
81113b00:	e0bffb17 	ldw	r2,-20(fp)
81113b04:	0085c83a 	sub	r2,zero,r2
81113b08:	18800015 	stw	r2,0(r3)
    rc = -1;
81113b0c:	00bfffc4 	movi	r2,-1
81113b10:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
81113b14:	e0bffb17 	ldw	r2,-20(fp)
}
81113b18:	e037883a 	mov	sp,fp
81113b1c:	dfc00117 	ldw	ra,4(sp)
81113b20:	df000017 	ldw	fp,0(sp)
81113b24:	dec00204 	addi	sp,sp,8
81113b28:	f800283a 	ret

81113b2c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
81113b2c:	defffd04 	addi	sp,sp,-12
81113b30:	dfc00215 	stw	ra,8(sp)
81113b34:	df000115 	stw	fp,4(sp)
81113b38:	df000104 	addi	fp,sp,4
#ifndef ALT_NO_EXIT    
  int result;
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
81113b3c:	d0a00c17 	ldw	r2,-32720(gp)
81113b40:	10800058 	cmpnei	r2,r2,1
81113b44:	1000031e 	bne	r2,zero,81113b54 <alt_main+0x28>
81113b48:	012044b4 	movhi	r4,33042
81113b4c:	2126a104 	addi	r4,r4,-25980
81113b50:	11135f00 	call	811135f0 <alt_log_printf_proc>
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
81113b54:	0009883a 	mov	r4,zero
81113b58:	111425c0 	call	8111425c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
81113b5c:	d0a00c17 	ldw	r2,-32720(gp)
81113b60:	10800058 	cmpnei	r2,r2,1
81113b64:	1000031e 	bne	r2,zero,81113b74 <alt_main+0x48>
81113b68:	012044b4 	movhi	r4,33042
81113b6c:	2126af04 	addi	r4,r4,-25924
81113b70:	11135f00 	call	811135f0 <alt_log_printf_proc>
  ALT_OS_INIT();
81113b74:	0001883a 	nop
  /*
   * Initialize the semaphore used to control access to the file descriptor
   * list.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
81113b78:	d0a00c17 	ldw	r2,-32720(gp)
81113b7c:	10800058 	cmpnei	r2,r2,1
81113b80:	1000031e 	bne	r2,zero,81113b90 <alt_main+0x64>
81113b84:	012044b4 	movhi	r4,33042
81113b88:	2126bd04 	addi	r4,r4,-25868
81113b8c:	11135f00 	call	811135f0 <alt_log_printf_proc>
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
81113b90:	d0a00c17 	ldw	r2,-32720(gp)
81113b94:	10800058 	cmpnei	r2,r2,1
81113b98:	1000031e 	bne	r2,zero,81113ba8 <alt_main+0x7c>
81113b9c:	012044b4 	movhi	r4,33042
81113ba0:	2126cb04 	addi	r4,r4,-25812
81113ba4:	11135f00 	call	811135f0 <alt_log_printf_proc>
  alt_sys_init();
81113ba8:	11142940 	call	81114294 <alt_sys_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_sys_init.\r\n");
81113bac:	d0a00c17 	ldw	r2,-32720(gp)
81113bb0:	10800058 	cmpnei	r2,r2,1
81113bb4:	1000031e 	bne	r2,zero,81113bc4 <alt_main+0x98>
81113bb8:	012044b4 	movhi	r4,33042
81113bbc:	2126d504 	addi	r4,r4,-25772
81113bc0:	11135f00 	call	811135f0 <alt_log_printf_proc>
   * been initialized. This is only done if the user has requested these
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
81113bc4:	d0a00c17 	ldw	r2,-32720(gp)
81113bc8:	10800058 	cmpnei	r2,r2,1
81113bcc:	1000031e 	bne	r2,zero,81113bdc <alt_main+0xb0>
81113bd0:	012044b4 	movhi	r4,33042
81113bd4:	2126de04 	addi	r4,r4,-25736
81113bd8:	11135f00 	call	811135f0 <alt_log_printf_proc>
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
81113bdc:	01a044b4 	movhi	r6,33042
81113be0:	31a6e604 	addi	r6,r6,-25704
81113be4:	016044b4 	movhi	r5,33042
81113be8:	2966e604 	addi	r5,r5,-25704
81113bec:	012044b4 	movhi	r4,33042
81113bf0:	2126e604 	addi	r4,r4,-25704
81113bf4:	1117eb00 	call	81117eb0 <alt_io_redirect>
#ifndef ALT_NO_C_PLUS_PLUS
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
81113bf8:	d0a00c17 	ldw	r2,-32720(gp)
81113bfc:	10800058 	cmpnei	r2,r2,1
81113c00:	1000031e 	bne	r2,zero,81113c10 <alt_main+0xe4>
81113c04:	012044b4 	movhi	r4,33042
81113c08:	2126eb04 	addi	r4,r4,-25684
81113c0c:	11135f00 	call	811135f0 <alt_log_printf_proc>
  _do_ctors ();
81113c10:	11179fc0 	call	811179fc <_do_ctors>
   * if a clean exit has been requested (i.e. the exit() function has not been
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
81113c14:	d0a00c17 	ldw	r2,-32720(gp)
81113c18:	10800058 	cmpnei	r2,r2,1
81113c1c:	1000031e 	bne	r2,zero,81113c2c <alt_main+0x100>
81113c20:	012044b4 	movhi	r4,33042
81113c24:	2126f604 	addi	r4,r4,-25640
81113c28:	11135f00 	call	811135f0 <alt_log_printf_proc>
  atexit (_do_dtors);
81113c2c:	01204474 	movhi	r4,33041
81113c30:	211e9704 	addi	r4,r4,31324
81113c34:	11186540 	call	81118654 <atexit>
  /*
   * Finally, call main(). The return code is then passed to a subsequent
   * call to exit() unless the application is never supposed to exit.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");
81113c38:	d0a00c17 	ldw	r2,-32720(gp)
81113c3c:	10800058 	cmpnei	r2,r2,1
81113c40:	1000031e 	bne	r2,zero,81113c50 <alt_main+0x124>
81113c44:	012044b4 	movhi	r4,33042
81113c48:	2126fe04 	addi	r4,r4,-25608
81113c4c:	11135f00 	call	811135f0 <alt_log_printf_proc>

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
81113c50:	d0a01f17 	ldw	r2,-32644(gp)
81113c54:	d0e02017 	ldw	r3,-32640(gp)
81113c58:	d1202117 	ldw	r4,-32636(gp)
81113c5c:	200d883a 	mov	r6,r4
81113c60:	180b883a 	mov	r5,r3
81113c64:	1009883a 	mov	r4,r2
81113c68:	110230c0 	call	8110230c <main>
81113c6c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
81113c70:	01000044 	movi	r4,1
81113c74:	1112c780 	call	81112c78 <close>
  exit (result);
81113c78:	e13fff17 	ldw	r4,-4(fp)
81113c7c:	11186680 	call	81118668 <exit>

81113c80 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
81113c80:	defffe04 	addi	sp,sp,-8
81113c84:	df000115 	stw	fp,4(sp)
81113c88:	df000104 	addi	fp,sp,4
81113c8c:	e13fff15 	stw	r4,-4(fp)
}
81113c90:	0001883a 	nop
81113c94:	e037883a 	mov	sp,fp
81113c98:	df000017 	ldw	fp,0(sp)
81113c9c:	dec00104 	addi	sp,sp,4
81113ca0:	f800283a 	ret

81113ca4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
81113ca4:	defffe04 	addi	sp,sp,-8
81113ca8:	df000115 	stw	fp,4(sp)
81113cac:	df000104 	addi	fp,sp,4
81113cb0:	e13fff15 	stw	r4,-4(fp)
}
81113cb4:	0001883a 	nop
81113cb8:	e037883a 	mov	sp,fp
81113cbc:	df000017 	ldw	fp,0(sp)
81113cc0:	dec00104 	addi	sp,sp,4
81113cc4:	f800283a 	ret

81113cc8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81113cc8:	defffe04 	addi	sp,sp,-8
81113ccc:	dfc00115 	stw	ra,4(sp)
81113cd0:	df000015 	stw	fp,0(sp)
81113cd4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81113cd8:	d0a00b17 	ldw	r2,-32724(gp)
81113cdc:	10000326 	beq	r2,zero,81113cec <alt_get_errno+0x24>
81113ce0:	d0a00b17 	ldw	r2,-32724(gp)
81113ce4:	103ee83a 	callr	r2
81113ce8:	00000106 	br	81113cf0 <alt_get_errno+0x28>
81113cec:	d0a01a04 	addi	r2,gp,-32664
}
81113cf0:	e037883a 	mov	sp,fp
81113cf4:	dfc00117 	ldw	ra,4(sp)
81113cf8:	df000017 	ldw	fp,0(sp)
81113cfc:	dec00204 	addi	sp,sp,8
81113d00:	f800283a 	ret

81113d04 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
81113d04:	defff904 	addi	sp,sp,-28
81113d08:	dfc00615 	stw	ra,24(sp)
81113d0c:	df000515 	stw	fp,20(sp)
81113d10:	df000504 	addi	fp,sp,20
81113d14:	e13ffd15 	stw	r4,-12(fp)
81113d18:	e17ffe15 	stw	r5,-8(fp)
81113d1c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
81113d20:	e0bffd17 	ldw	r2,-12(fp)
81113d24:	10000616 	blt	r2,zero,81113d40 <read+0x3c>
81113d28:	e0bffd17 	ldw	r2,-12(fp)
81113d2c:	10c00324 	muli	r3,r2,12
81113d30:	00a044b4 	movhi	r2,33042
81113d34:	10aa0c04 	addi	r2,r2,-22480
81113d38:	1885883a 	add	r2,r3,r2
81113d3c:	00000106 	br	81113d44 <read+0x40>
81113d40:	0005883a 	mov	r2,zero
81113d44:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
81113d48:	e0bffb17 	ldw	r2,-20(fp)
81113d4c:	10002226 	beq	r2,zero,81113dd8 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
81113d50:	e0bffb17 	ldw	r2,-20(fp)
81113d54:	10800217 	ldw	r2,8(r2)
81113d58:	108000cc 	andi	r2,r2,3
81113d5c:	10800060 	cmpeqi	r2,r2,1
81113d60:	1000181e 	bne	r2,zero,81113dc4 <read+0xc0>
        (fd->dev->read))
81113d64:	e0bffb17 	ldw	r2,-20(fp)
81113d68:	10800017 	ldw	r2,0(r2)
81113d6c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
81113d70:	10001426 	beq	r2,zero,81113dc4 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
81113d74:	e0bffb17 	ldw	r2,-20(fp)
81113d78:	10800017 	ldw	r2,0(r2)
81113d7c:	10800517 	ldw	r2,20(r2)
81113d80:	e0ffff17 	ldw	r3,-4(fp)
81113d84:	180d883a 	mov	r6,r3
81113d88:	e17ffe17 	ldw	r5,-8(fp)
81113d8c:	e13ffb17 	ldw	r4,-20(fp)
81113d90:	103ee83a 	callr	r2
81113d94:	e0bffc15 	stw	r2,-16(fp)
81113d98:	e0bffc17 	ldw	r2,-16(fp)
81113d9c:	1000070e 	bge	r2,zero,81113dbc <read+0xb8>
        {
          ALT_ERRNO = -rval;
81113da0:	1113cc80 	call	81113cc8 <alt_get_errno>
81113da4:	1007883a 	mov	r3,r2
81113da8:	e0bffc17 	ldw	r2,-16(fp)
81113dac:	0085c83a 	sub	r2,zero,r2
81113db0:	18800015 	stw	r2,0(r3)
          return -1;
81113db4:	00bfffc4 	movi	r2,-1
81113db8:	00000c06 	br	81113dec <read+0xe8>
        }
        return rval;
81113dbc:	e0bffc17 	ldw	r2,-16(fp)
81113dc0:	00000a06 	br	81113dec <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
81113dc4:	1113cc80 	call	81113cc8 <alt_get_errno>
81113dc8:	1007883a 	mov	r3,r2
81113dcc:	00800344 	movi	r2,13
81113dd0:	18800015 	stw	r2,0(r3)
81113dd4:	00000406 	br	81113de8 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
81113dd8:	1113cc80 	call	81113cc8 <alt_get_errno>
81113ddc:	1007883a 	mov	r3,r2
81113de0:	00801444 	movi	r2,81
81113de4:	18800015 	stw	r2,0(r3)
  }
  return -1;
81113de8:	00bfffc4 	movi	r2,-1
}
81113dec:	e037883a 	mov	sp,fp
81113df0:	dfc00117 	ldw	ra,4(sp)
81113df4:	df000017 	ldw	fp,0(sp)
81113df8:	dec00204 	addi	sp,sp,8
81113dfc:	f800283a 	ret

81113e00 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
81113e00:	defffe04 	addi	sp,sp,-8
81113e04:	df000115 	stw	fp,4(sp)
81113e08:	df000104 	addi	fp,sp,4
81113e0c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
81113e10:	e0bfff17 	ldw	r2,-4(fp)
81113e14:	108000d0 	cmplti	r2,r2,3
81113e18:	10000d1e 	bne	r2,zero,81113e50 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
81113e1c:	00a044b4 	movhi	r2,33042
81113e20:	10aa0c04 	addi	r2,r2,-22480
81113e24:	e0ffff17 	ldw	r3,-4(fp)
81113e28:	18c00324 	muli	r3,r3,12
81113e2c:	10c5883a 	add	r2,r2,r3
81113e30:	10800204 	addi	r2,r2,8
81113e34:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
81113e38:	00a044b4 	movhi	r2,33042
81113e3c:	10aa0c04 	addi	r2,r2,-22480
81113e40:	e0ffff17 	ldw	r3,-4(fp)
81113e44:	18c00324 	muli	r3,r3,12
81113e48:	10c5883a 	add	r2,r2,r3
81113e4c:	10000015 	stw	zero,0(r2)
  }
}
81113e50:	0001883a 	nop
81113e54:	e037883a 	mov	sp,fp
81113e58:	df000017 	ldw	fp,0(sp)
81113e5c:	dec00104 	addi	sp,sp,4
81113e60:	f800283a 	ret

81113e64 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
81113e64:	defff904 	addi	sp,sp,-28
81113e68:	df000615 	stw	fp,24(sp)
81113e6c:	df000604 	addi	fp,sp,24
81113e70:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81113e74:	0005303a 	rdctl	r2,status
81113e78:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81113e7c:	e0fffe17 	ldw	r3,-8(fp)
81113e80:	00bfff84 	movi	r2,-2
81113e84:	1884703a 	and	r2,r3,r2
81113e88:	1001703a 	wrctl	status,r2
  
  return context;
81113e8c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
81113e90:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
81113e94:	d0a00d17 	ldw	r2,-32716(gp)
81113e98:	10c000c4 	addi	r3,r2,3
81113e9c:	00bfff04 	movi	r2,-4
81113ea0:	1884703a 	and	r2,r3,r2
81113ea4:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
81113ea8:	d0e00d17 	ldw	r3,-32716(gp)
81113eac:	e0bfff17 	ldw	r2,-4(fp)
81113eb0:	1887883a 	add	r3,r3,r2
81113eb4:	00a047b4 	movhi	r2,33054
81113eb8:	10800004 	addi	r2,r2,0
81113ebc:	10c0062e 	bgeu	r2,r3,81113ed8 <sbrk+0x74>
81113ec0:	e0bffb17 	ldw	r2,-20(fp)
81113ec4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81113ec8:	e0bffa17 	ldw	r2,-24(fp)
81113ecc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
81113ed0:	00bfffc4 	movi	r2,-1
81113ed4:	00000b06 	br	81113f04 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
81113ed8:	d0a00d17 	ldw	r2,-32716(gp)
81113edc:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
81113ee0:	d0e00d17 	ldw	r3,-32716(gp)
81113ee4:	e0bfff17 	ldw	r2,-4(fp)
81113ee8:	1885883a 	add	r2,r3,r2
81113eec:	d0a00d15 	stw	r2,-32716(gp)
81113ef0:	e0bffb17 	ldw	r2,-20(fp)
81113ef4:	e0bffc15 	stw	r2,-16(fp)
81113ef8:	e0bffc17 	ldw	r2,-16(fp)
81113efc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
81113f00:	e0bffd17 	ldw	r2,-12(fp)
} 
81113f04:	e037883a 	mov	sp,fp
81113f08:	df000017 	ldw	fp,0(sp)
81113f0c:	dec00104 	addi	sp,sp,4
81113f10:	f800283a 	ret

81113f14 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
81113f14:	defffa04 	addi	sp,sp,-24
81113f18:	df000515 	stw	fp,20(sp)
81113f1c:	df000504 	addi	fp,sp,20
81113f20:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81113f24:	0005303a 	rdctl	r2,status
81113f28:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81113f2c:	e0fffc17 	ldw	r3,-16(fp)
81113f30:	00bfff84 	movi	r2,-2
81113f34:	1884703a 	and	r2,r3,r2
81113f38:	1001703a 	wrctl	status,r2
  
  return context;
81113f3c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
81113f40:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
81113f44:	e0bfff17 	ldw	r2,-4(fp)
81113f48:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
81113f4c:	e0bffd17 	ldw	r2,-12(fp)
81113f50:	10800017 	ldw	r2,0(r2)
81113f54:	e0fffd17 	ldw	r3,-12(fp)
81113f58:	18c00117 	ldw	r3,4(r3)
81113f5c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
81113f60:	e0bffd17 	ldw	r2,-12(fp)
81113f64:	10800117 	ldw	r2,4(r2)
81113f68:	e0fffd17 	ldw	r3,-12(fp)
81113f6c:	18c00017 	ldw	r3,0(r3)
81113f70:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
81113f74:	e0bffd17 	ldw	r2,-12(fp)
81113f78:	e0fffd17 	ldw	r3,-12(fp)
81113f7c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
81113f80:	e0bffd17 	ldw	r2,-12(fp)
81113f84:	e0fffd17 	ldw	r3,-12(fp)
81113f88:	10c00015 	stw	r3,0(r2)
81113f8c:	e0bffb17 	ldw	r2,-20(fp)
81113f90:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81113f94:	e0bffe17 	ldw	r2,-8(fp)
81113f98:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
81113f9c:	0001883a 	nop
81113fa0:	e037883a 	mov	sp,fp
81113fa4:	df000017 	ldw	fp,0(sp)
81113fa8:	dec00104 	addi	sp,sp,4
81113fac:	f800283a 	ret

81113fb0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
81113fb0:	defffb04 	addi	sp,sp,-20
81113fb4:	dfc00415 	stw	ra,16(sp)
81113fb8:	df000315 	stw	fp,12(sp)
81113fbc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
81113fc0:	d0a00e17 	ldw	r2,-32712(gp)
81113fc4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
81113fc8:	d0a02317 	ldw	r2,-32628(gp)
81113fcc:	10800044 	addi	r2,r2,1
81113fd0:	d0a02315 	stw	r2,-32628(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
81113fd4:	00002e06 	br	81114090 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
81113fd8:	e0bffd17 	ldw	r2,-12(fp)
81113fdc:	10800017 	ldw	r2,0(r2)
81113fe0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
81113fe4:	e0bffd17 	ldw	r2,-12(fp)
81113fe8:	10800403 	ldbu	r2,16(r2)
81113fec:	10803fcc 	andi	r2,r2,255
81113ff0:	10000426 	beq	r2,zero,81114004 <alt_tick+0x54>
81113ff4:	d0a02317 	ldw	r2,-32628(gp)
81113ff8:	1000021e 	bne	r2,zero,81114004 <alt_tick+0x54>
    {
      alarm->rollover = 0;
81113ffc:	e0bffd17 	ldw	r2,-12(fp)
81114000:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
81114004:	e0bffd17 	ldw	r2,-12(fp)
81114008:	10800217 	ldw	r2,8(r2)
8111400c:	d0e02317 	ldw	r3,-32628(gp)
81114010:	18801d36 	bltu	r3,r2,81114088 <alt_tick+0xd8>
81114014:	e0bffd17 	ldw	r2,-12(fp)
81114018:	10800403 	ldbu	r2,16(r2)
8111401c:	10803fcc 	andi	r2,r2,255
81114020:	1000191e 	bne	r2,zero,81114088 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
81114024:	e0bffd17 	ldw	r2,-12(fp)
81114028:	10800317 	ldw	r2,12(r2)
8111402c:	e0fffd17 	ldw	r3,-12(fp)
81114030:	18c00517 	ldw	r3,20(r3)
81114034:	1809883a 	mov	r4,r3
81114038:	103ee83a 	callr	r2
8111403c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
81114040:	e0bfff17 	ldw	r2,-4(fp)
81114044:	1000031e 	bne	r2,zero,81114054 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
81114048:	e13ffd17 	ldw	r4,-12(fp)
8111404c:	1113f140 	call	81113f14 <alt_alarm_stop>
81114050:	00000d06 	br	81114088 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
81114054:	e0bffd17 	ldw	r2,-12(fp)
81114058:	10c00217 	ldw	r3,8(r2)
8111405c:	e0bfff17 	ldw	r2,-4(fp)
81114060:	1887883a 	add	r3,r3,r2
81114064:	e0bffd17 	ldw	r2,-12(fp)
81114068:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
8111406c:	e0bffd17 	ldw	r2,-12(fp)
81114070:	10c00217 	ldw	r3,8(r2)
81114074:	d0a02317 	ldw	r2,-32628(gp)
81114078:	1880032e 	bgeu	r3,r2,81114088 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
8111407c:	e0bffd17 	ldw	r2,-12(fp)
81114080:	00c00044 	movi	r3,1
81114084:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
81114088:	e0bffe17 	ldw	r2,-8(fp)
8111408c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
81114090:	e0fffd17 	ldw	r3,-12(fp)
81114094:	d0a00e04 	addi	r2,gp,-32712
81114098:	18bfcf1e 	bne	r3,r2,81113fd8 <__reset+0xfb0f3fd8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
8111409c:	0001883a 	nop
}
811140a0:	0001883a 	nop
811140a4:	e037883a 	mov	sp,fp
811140a8:	dfc00117 	ldw	ra,4(sp)
811140ac:	df000017 	ldw	fp,0(sp)
811140b0:	dec00204 	addi	sp,sp,8
811140b4:	f800283a 	ret

811140b8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
811140b8:	defffd04 	addi	sp,sp,-12
811140bc:	dfc00215 	stw	ra,8(sp)
811140c0:	df000115 	stw	fp,4(sp)
811140c4:	df000104 	addi	fp,sp,4
811140c8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
811140cc:	e13fff17 	ldw	r4,-4(fp)
811140d0:	11177f40 	call	811177f4 <alt_busy_sleep>
}
811140d4:	e037883a 	mov	sp,fp
811140d8:	dfc00117 	ldw	ra,4(sp)
811140dc:	df000017 	ldw	fp,0(sp)
811140e0:	dec00204 	addi	sp,sp,8
811140e4:	f800283a 	ret

811140e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
811140e8:	defffe04 	addi	sp,sp,-8
811140ec:	dfc00115 	stw	ra,4(sp)
811140f0:	df000015 	stw	fp,0(sp)
811140f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
811140f8:	d0a00b17 	ldw	r2,-32724(gp)
811140fc:	10000326 	beq	r2,zero,8111410c <alt_get_errno+0x24>
81114100:	d0a00b17 	ldw	r2,-32724(gp)
81114104:	103ee83a 	callr	r2
81114108:	00000106 	br	81114110 <alt_get_errno+0x28>
8111410c:	d0a01a04 	addi	r2,gp,-32664
}
81114110:	e037883a 	mov	sp,fp
81114114:	dfc00117 	ldw	ra,4(sp)
81114118:	df000017 	ldw	fp,0(sp)
8111411c:	dec00204 	addi	sp,sp,8
81114120:	f800283a 	ret

81114124 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
81114124:	defff904 	addi	sp,sp,-28
81114128:	dfc00615 	stw	ra,24(sp)
8111412c:	df000515 	stw	fp,20(sp)
81114130:	df000504 	addi	fp,sp,20
81114134:	e13ffd15 	stw	r4,-12(fp)
81114138:	e17ffe15 	stw	r5,-8(fp)
8111413c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
81114140:	e0bffd17 	ldw	r2,-12(fp)
81114144:	10000616 	blt	r2,zero,81114160 <write+0x3c>
81114148:	e0bffd17 	ldw	r2,-12(fp)
8111414c:	10c00324 	muli	r3,r2,12
81114150:	00a044b4 	movhi	r2,33042
81114154:	10aa0c04 	addi	r2,r2,-22480
81114158:	1885883a 	add	r2,r3,r2
8111415c:	00000106 	br	81114164 <write+0x40>
81114160:	0005883a 	mov	r2,zero
81114164:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
81114168:	e0bffb17 	ldw	r2,-20(fp)
8111416c:	10002426 	beq	r2,zero,81114200 <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
81114170:	e0bffb17 	ldw	r2,-20(fp)
81114174:	10800217 	ldw	r2,8(r2)
81114178:	108000cc 	andi	r2,r2,3
8111417c:	10001b26 	beq	r2,zero,811141ec <write+0xc8>
81114180:	e0bffb17 	ldw	r2,-20(fp)
81114184:	10800017 	ldw	r2,0(r2)
81114188:	10800617 	ldw	r2,24(r2)
8111418c:	10001726 	beq	r2,zero,811141ec <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);
81114190:	e17fff17 	ldw	r5,-4(fp)
81114194:	e13ffe17 	ldw	r4,-8(fp)
81114198:	11138780 	call	81113878 <alt_log_write>

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
8111419c:	e0bffb17 	ldw	r2,-20(fp)
811141a0:	10800017 	ldw	r2,0(r2)
811141a4:	10800617 	ldw	r2,24(r2)
811141a8:	e0ffff17 	ldw	r3,-4(fp)
811141ac:	180d883a 	mov	r6,r3
811141b0:	e17ffe17 	ldw	r5,-8(fp)
811141b4:	e13ffb17 	ldw	r4,-20(fp)
811141b8:	103ee83a 	callr	r2
811141bc:	e0bffc15 	stw	r2,-16(fp)
811141c0:	e0bffc17 	ldw	r2,-16(fp)
811141c4:	1000070e 	bge	r2,zero,811141e4 <write+0xc0>
      {
        ALT_ERRNO = -rval;
811141c8:	11140e80 	call	811140e8 <alt_get_errno>
811141cc:	1007883a 	mov	r3,r2
811141d0:	e0bffc17 	ldw	r2,-16(fp)
811141d4:	0085c83a 	sub	r2,zero,r2
811141d8:	18800015 	stw	r2,0(r3)
        return -1;
811141dc:	00bfffc4 	movi	r2,-1
811141e0:	00000c06 	br	81114214 <write+0xf0>
      }
      return rval;
811141e4:	e0bffc17 	ldw	r2,-16(fp)
811141e8:	00000a06 	br	81114214 <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
811141ec:	11140e80 	call	811140e8 <alt_get_errno>
811141f0:	1007883a 	mov	r3,r2
811141f4:	00800344 	movi	r2,13
811141f8:	18800015 	stw	r2,0(r3)
811141fc:	00000406 	br	81114210 <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
81114200:	11140e80 	call	811140e8 <alt_get_errno>
81114204:	1007883a 	mov	r3,r2
81114208:	00801444 	movi	r2,81
8111420c:	18800015 	stw	r2,0(r3)
  }
  return -1;
81114210:	00bfffc4 	movi	r2,-1
}
81114214:	e037883a 	mov	sp,fp
81114218:	dfc00117 	ldw	ra,4(sp)
8111421c:	df000017 	ldw	fp,0(sp)
81114220:	dec00204 	addi	sp,sp,8
81114224:	f800283a 	ret

81114228 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
81114228:	defffd04 	addi	sp,sp,-12
8111422c:	dfc00215 	stw	ra,8(sp)
81114230:	df000115 	stw	fp,4(sp)
81114234:	df000104 	addi	fp,sp,4
81114238:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
8111423c:	d1600804 	addi	r5,gp,-32736
81114240:	e13fff17 	ldw	r4,-4(fp)
81114244:	11179580 	call	81117958 <alt_dev_llist_insert>
}
81114248:	e037883a 	mov	sp,fp
8111424c:	dfc00117 	ldw	ra,4(sp)
81114250:	df000017 	ldw	fp,0(sp)
81114254:	dec00204 	addi	sp,sp,8
81114258:	f800283a 	ret

8111425c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
8111425c:	defffd04 	addi	sp,sp,-12
81114260:	dfc00215 	stw	ra,8(sp)
81114264:	df000115 	stw	fp,4(sp)
81114268:	df000104 	addi	fp,sp,4
8111426c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
81114270:	11183e80 	call	811183e8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
81114274:	00800044 	movi	r2,1
81114278:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
8111427c:	0001883a 	nop
81114280:	e037883a 	mov	sp,fp
81114284:	dfc00117 	ldw	ra,4(sp)
81114288:	df000017 	ldw	fp,0(sp)
8111428c:	dec00204 	addi	sp,sp,8
81114290:	f800283a 	ret

81114294 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
81114294:	defffe04 	addi	sp,sp,-8
81114298:	dfc00115 	stw	ra,4(sp)
8111429c:	df000015 	stw	fp,0(sp)
811142a0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_1MS, timer_1ms);
811142a4:	01c0fa04 	movi	r7,1000
811142a8:	01800204 	movi	r6,8
811142ac:	000b883a 	mov	r5,zero
811142b0:	01200034 	movhi	r4,32768
811142b4:	21022004 	addi	r4,r4,2176
811142b8:	1114ef80 	call	81114ef8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1US, timer_1us);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
811142bc:	018001c4 	movi	r6,7
811142c0:	000b883a 	mov	r5,zero
811142c4:	012044b4 	movhi	r4,33042
811142c8:	212a9d04 	addi	r4,r4,-21900
811142cc:	11144e00 	call	811144e0 <altera_avalon_jtag_uart_init>
811142d0:	012044b4 	movhi	r4,33042
811142d4:	212a9304 	addi	r4,r4,-21940
811142d8:	11142280 	call	81114228 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
811142dc:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( RS232_UART, rs232_uart);
811142e0:	018002c4 	movi	r6,11
811142e4:	000b883a 	mov	r5,zero
811142e8:	012044b4 	movhi	r4,33042
811142ec:	212eb504 	addi	r4,r4,-17708
811142f0:	11150840 	call	81115084 <altera_avalon_uart_init>
811142f4:	012044b4 	movhi	r4,33042
811142f8:	212eab04 	addi	r4,r4,-17748
811142fc:	11142280 	call	81114228 <alt_dev_reg>
    ALTERA_MSGDMA_INIT ( DMA_DDR_M1, dma_DDR_M1);
81114300:	00a044b4 	movhi	r2,33042
81114304:	10aedc04 	addi	r2,r2,-17552
81114308:	10c00717 	ldw	r3,28(r2)
8111430c:	00a044b4 	movhi	r2,33042
81114310:	10aedc04 	addi	r2,r2,-17552
81114314:	10800817 	ldw	r2,32(r2)
81114318:	100d883a 	mov	r6,r2
8111431c:	180b883a 	mov	r5,r3
81114320:	012044b4 	movhi	r4,33042
81114324:	212edc04 	addi	r4,r4,-17552
81114328:	11174180 	call	81117418 <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( DMA_DDR_M2, dma_DDR_M2);
8111432c:	00a044b4 	movhi	r2,33042
81114330:	10aef404 	addi	r2,r2,-17456
81114334:	10c00717 	ldw	r3,28(r2)
81114338:	00a044b4 	movhi	r2,33042
8111433c:	10aef404 	addi	r2,r2,-17456
81114340:	10800817 	ldw	r2,32(r2)
81114344:	100d883a 	mov	r6,r2
81114348:	180b883a 	mov	r5,r3
8111434c:	012044b4 	movhi	r4,33042
81114350:	212ef404 	addi	r4,r4,-17456
81114354:	11174180 	call	81117418 <alt_msgdma_init>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
81114358:	012044b4 	movhi	r4,33042
8111435c:	212f0c04 	addi	r4,r4,-17360
81114360:	11142280 	call	81114228 <alt_dev_reg>
}
81114364:	0001883a 	nop
81114368:	e037883a 	mov	sp,fp
8111436c:	dfc00117 	ldw	ra,4(sp)
81114370:	df000017 	ldw	fp,0(sp)
81114374:	dec00204 	addi	sp,sp,8
81114378:	f800283a 	ret

8111437c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
8111437c:	defffa04 	addi	sp,sp,-24
81114380:	dfc00515 	stw	ra,20(sp)
81114384:	df000415 	stw	fp,16(sp)
81114388:	df000404 	addi	fp,sp,16
8111438c:	e13ffd15 	stw	r4,-12(fp)
81114390:	e17ffe15 	stw	r5,-8(fp)
81114394:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
81114398:	e0bffd17 	ldw	r2,-12(fp)
8111439c:	10800017 	ldw	r2,0(r2)
811143a0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
811143a4:	e0bffc17 	ldw	r2,-16(fp)
811143a8:	10c00a04 	addi	r3,r2,40
811143ac:	e0bffd17 	ldw	r2,-12(fp)
811143b0:	10800217 	ldw	r2,8(r2)
811143b4:	100f883a 	mov	r7,r2
811143b8:	e1bfff17 	ldw	r6,-4(fp)
811143bc:	e17ffe17 	ldw	r5,-8(fp)
811143c0:	1809883a 	mov	r4,r3
811143c4:	1114a3c0 	call	81114a3c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
811143c8:	e037883a 	mov	sp,fp
811143cc:	dfc00117 	ldw	ra,4(sp)
811143d0:	df000017 	ldw	fp,0(sp)
811143d4:	dec00204 	addi	sp,sp,8
811143d8:	f800283a 	ret

811143dc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
811143dc:	defffa04 	addi	sp,sp,-24
811143e0:	dfc00515 	stw	ra,20(sp)
811143e4:	df000415 	stw	fp,16(sp)
811143e8:	df000404 	addi	fp,sp,16
811143ec:	e13ffd15 	stw	r4,-12(fp)
811143f0:	e17ffe15 	stw	r5,-8(fp)
811143f4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
811143f8:	e0bffd17 	ldw	r2,-12(fp)
811143fc:	10800017 	ldw	r2,0(r2)
81114400:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
81114404:	e0bffc17 	ldw	r2,-16(fp)
81114408:	10c00a04 	addi	r3,r2,40
8111440c:	e0bffd17 	ldw	r2,-12(fp)
81114410:	10800217 	ldw	r2,8(r2)
81114414:	100f883a 	mov	r7,r2
81114418:	e1bfff17 	ldw	r6,-4(fp)
8111441c:	e17ffe17 	ldw	r5,-8(fp)
81114420:	1809883a 	mov	r4,r3
81114424:	1114c580 	call	81114c58 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
81114428:	e037883a 	mov	sp,fp
8111442c:	dfc00117 	ldw	ra,4(sp)
81114430:	df000017 	ldw	fp,0(sp)
81114434:	dec00204 	addi	sp,sp,8
81114438:	f800283a 	ret

8111443c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
8111443c:	defffc04 	addi	sp,sp,-16
81114440:	dfc00315 	stw	ra,12(sp)
81114444:	df000215 	stw	fp,8(sp)
81114448:	df000204 	addi	fp,sp,8
8111444c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
81114450:	e0bfff17 	ldw	r2,-4(fp)
81114454:	10800017 	ldw	r2,0(r2)
81114458:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
8111445c:	e0bffe17 	ldw	r2,-8(fp)
81114460:	10c00a04 	addi	r3,r2,40
81114464:	e0bfff17 	ldw	r2,-4(fp)
81114468:	10800217 	ldw	r2,8(r2)
8111446c:	100b883a 	mov	r5,r2
81114470:	1809883a 	mov	r4,r3
81114474:	11148e40 	call	811148e4 <altera_avalon_jtag_uart_close>
}
81114478:	e037883a 	mov	sp,fp
8111447c:	dfc00117 	ldw	ra,4(sp)
81114480:	df000017 	ldw	fp,0(sp)
81114484:	dec00204 	addi	sp,sp,8
81114488:	f800283a 	ret

8111448c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
8111448c:	defffa04 	addi	sp,sp,-24
81114490:	dfc00515 	stw	ra,20(sp)
81114494:	df000415 	stw	fp,16(sp)
81114498:	df000404 	addi	fp,sp,16
8111449c:	e13ffd15 	stw	r4,-12(fp)
811144a0:	e17ffe15 	stw	r5,-8(fp)
811144a4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
811144a8:	e0bffd17 	ldw	r2,-12(fp)
811144ac:	10800017 	ldw	r2,0(r2)
811144b0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
811144b4:	e0bffc17 	ldw	r2,-16(fp)
811144b8:	10800a04 	addi	r2,r2,40
811144bc:	e1bfff17 	ldw	r6,-4(fp)
811144c0:	e17ffe17 	ldw	r5,-8(fp)
811144c4:	1009883a 	mov	r4,r2
811144c8:	111494c0 	call	8111494c <altera_avalon_jtag_uart_ioctl>
}
811144cc:	e037883a 	mov	sp,fp
811144d0:	dfc00117 	ldw	ra,4(sp)
811144d4:	df000017 	ldw	fp,0(sp)
811144d8:	dec00204 	addi	sp,sp,8
811144dc:	f800283a 	ret

811144e0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
811144e0:	defff804 	addi	sp,sp,-32
811144e4:	dfc00715 	stw	ra,28(sp)
811144e8:	df000615 	stw	fp,24(sp)
811144ec:	dc400515 	stw	r17,20(sp)
811144f0:	dc000415 	stw	r16,16(sp)
811144f4:	df000604 	addi	fp,sp,24
811144f8:	e13ffb15 	stw	r4,-20(fp)
811144fc:	e17ffc15 	stw	r5,-16(fp)
81114500:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
81114504:	e0bffb17 	ldw	r2,-20(fp)
81114508:	00c00044 	movi	r3,1
8111450c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
81114510:	e0bffb17 	ldw	r2,-20(fp)
81114514:	10800017 	ldw	r2,0(r2)
81114518:	10800104 	addi	r2,r2,4
8111451c:	1007883a 	mov	r3,r2
81114520:	e0bffb17 	ldw	r2,-20(fp)
81114524:	10800817 	ldw	r2,32(r2)
81114528:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
8111452c:	e0bffc17 	ldw	r2,-16(fp)
81114530:	e0fffd17 	ldw	r3,-12(fp)
81114534:	d8000015 	stw	zero,0(sp)
81114538:	e1fffb17 	ldw	r7,-20(fp)
8111453c:	01a04474 	movhi	r6,33041
81114540:	31918804 	addi	r6,r6,17952
81114544:	180b883a 	mov	r5,r3
81114548:	1009883a 	mov	r4,r2
8111454c:	1117b4c0 	call	81117b4c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
81114550:	e0bffb17 	ldw	r2,-20(fp)
81114554:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
81114558:	e0bffb17 	ldw	r2,-20(fp)
8111455c:	10800204 	addi	r2,r2,8
81114560:	d0e02217 	ldw	r3,-32632(gp)
81114564:	e1fffb17 	ldw	r7,-20(fp)
81114568:	01a04474 	movhi	r6,33041
8111456c:	31921104 	addi	r6,r6,18500
81114570:	180b883a 	mov	r5,r3
81114574:	1009883a 	mov	r4,r2
81114578:	11176c80 	call	811176c8 <alt_alarm_start>
8111457c:	1000040e 	bge	r2,zero,81114590 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
81114580:	e0fffb17 	ldw	r3,-20(fp)
81114584:	00a00034 	movhi	r2,32768
81114588:	10bfffc4 	addi	r2,r2,-1
8111458c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
81114590:	d0a01b83 	ldbu	r2,-32658(gp)
81114594:	10803fcc 	andi	r2,r2,255
81114598:	10800058 	cmpnei	r2,r2,1
8111459c:	10000f1e 	bne	r2,zero,811145dc <altera_avalon_jtag_uart_init+0xfc>
811145a0:	d0e02217 	ldw	r3,-32632(gp)
811145a4:	00b33374 	movhi	r2,52429
811145a8:	10b33344 	addi	r2,r2,-13107
811145ac:	1888383a 	mulxuu	r4,r3,r2
811145b0:	1885383a 	mul	r2,r3,r2
811145b4:	1021883a 	mov	r16,r2
811145b8:	2023883a 	mov	r17,r4
811145bc:	8804d0fa 	srli	r2,r17,3
811145c0:	e1fffb17 	ldw	r7,-20(fp)
811145c4:	01a04474 	movhi	r6,33041
811145c8:	318d9204 	addi	r6,r6,13896
811145cc:	100b883a 	mov	r5,r2
811145d0:	012044b4 	movhi	r4,33042
811145d4:	21308c04 	addi	r4,r4,-15824
811145d8:	11176c80 	call	811176c8 <alt_alarm_start>
811145dc:	d0a01c03 	ldbu	r2,-32656(gp)
811145e0:	10803fcc 	andi	r2,r2,255
811145e4:	10800058 	cmpnei	r2,r2,1
811145e8:	1000051e 	bne	r2,zero,81114600 <altera_avalon_jtag_uart_init+0x120>
811145ec:	e0bffb17 	ldw	r2,-20(fp)
811145f0:	10800017 	ldw	r2,0(r2)
811145f4:	100b883a 	mov	r5,r2
811145f8:	e13ffb17 	ldw	r4,-20(fp)
811145fc:	11137d00 	call	811137d0 <alt_log_jtag_uart_startup_info>
}
81114600:	0001883a 	nop
81114604:	e6fffe04 	addi	sp,fp,-8
81114608:	dfc00317 	ldw	ra,12(sp)
8111460c:	df000217 	ldw	fp,8(sp)
81114610:	dc400117 	ldw	r17,4(sp)
81114614:	dc000017 	ldw	r16,0(sp)
81114618:	dec00404 	addi	sp,sp,16
8111461c:	f800283a 	ret

81114620 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
81114620:	defff704 	addi	sp,sp,-36
81114624:	dfc00815 	stw	ra,32(sp)
81114628:	df000715 	stw	fp,28(sp)
8111462c:	df000704 	addi	fp,sp,28
81114630:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
81114634:	e0bfff17 	ldw	r2,-4(fp)
81114638:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
8111463c:	e0bffb17 	ldw	r2,-20(fp)
81114640:	10800017 	ldw	r2,0(r2)
81114644:	e0bffc15 	stw	r2,-16(fp)

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);
81114648:	e0bffc17 	ldw	r2,-16(fp)
8111464c:	e17ffb17 	ldw	r5,-20(fp)
81114650:	1009883a 	mov	r4,r2
81114654:	111381c0 	call	8111381c <alt_log_jtag_uart_isr_proc>

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
81114658:	e0bffc17 	ldw	r2,-16(fp)
8111465c:	10800104 	addi	r2,r2,4
81114660:	10800037 	ldwio	r2,0(r2)
81114664:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
81114668:	e0bffd17 	ldw	r2,-12(fp)
8111466c:	1080c00c 	andi	r2,r2,768
81114670:	10006d26 	beq	r2,zero,81114828 <altera_avalon_jtag_uart_irq+0x208>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
81114674:	e0bffd17 	ldw	r2,-12(fp)
81114678:	1080400c 	andi	r2,r2,256
8111467c:	10003526 	beq	r2,zero,81114754 <altera_avalon_jtag_uart_irq+0x134>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
81114680:	00800074 	movhi	r2,1
81114684:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
81114688:	e0bffb17 	ldw	r2,-20(fp)
8111468c:	10800a17 	ldw	r2,40(r2)
81114690:	10800044 	addi	r2,r2,1
81114694:	1081ffcc 	andi	r2,r2,2047
81114698:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
8111469c:	e0bffb17 	ldw	r2,-20(fp)
811146a0:	10c00b17 	ldw	r3,44(r2)
811146a4:	e0bffe17 	ldw	r2,-8(fp)
811146a8:	18801526 	beq	r3,r2,81114700 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
811146ac:	e0bffc17 	ldw	r2,-16(fp)
811146b0:	10800037 	ldwio	r2,0(r2)
811146b4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
811146b8:	e0bff917 	ldw	r2,-28(fp)
811146bc:	10a0000c 	andi	r2,r2,32768
811146c0:	10001126 	beq	r2,zero,81114708 <altera_avalon_jtag_uart_irq+0xe8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
811146c4:	e0bffb17 	ldw	r2,-20(fp)
811146c8:	10800a17 	ldw	r2,40(r2)
811146cc:	e0fff917 	ldw	r3,-28(fp)
811146d0:	1809883a 	mov	r4,r3
811146d4:	e0fffb17 	ldw	r3,-20(fp)
811146d8:	1885883a 	add	r2,r3,r2
811146dc:	10800e04 	addi	r2,r2,56
811146e0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
811146e4:	e0bffb17 	ldw	r2,-20(fp)
811146e8:	10800a17 	ldw	r2,40(r2)
811146ec:	10800044 	addi	r2,r2,1
811146f0:	10c1ffcc 	andi	r3,r2,2047
811146f4:	e0bffb17 	ldw	r2,-20(fp)
811146f8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
811146fc:	003fe206 	br	81114688 <__reset+0xfb0f4688>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
81114700:	0001883a 	nop
81114704:	00000106 	br	8111470c <altera_avalon_jtag_uart_irq+0xec>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
81114708:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
8111470c:	e0bff917 	ldw	r2,-28(fp)
81114710:	10bfffec 	andhi	r2,r2,65535
81114714:	10000f26 	beq	r2,zero,81114754 <altera_avalon_jtag_uart_irq+0x134>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
81114718:	e0bffb17 	ldw	r2,-20(fp)
8111471c:	10c00817 	ldw	r3,32(r2)
81114720:	00bfff84 	movi	r2,-2
81114724:	1886703a 	and	r3,r3,r2
81114728:	e0bffb17 	ldw	r2,-20(fp)
8111472c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
81114730:	e0bffc17 	ldw	r2,-16(fp)
81114734:	10800104 	addi	r2,r2,4
81114738:	1007883a 	mov	r3,r2
8111473c:	e0bffb17 	ldw	r2,-20(fp)
81114740:	10800817 	ldw	r2,32(r2)
81114744:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
81114748:	e0bffc17 	ldw	r2,-16(fp)
8111474c:	10800104 	addi	r2,r2,4
81114750:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
81114754:	e0bffd17 	ldw	r2,-12(fp)
81114758:	1080800c 	andi	r2,r2,512
8111475c:	103fbe26 	beq	r2,zero,81114658 <__reset+0xfb0f4658>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
81114760:	e0bffd17 	ldw	r2,-12(fp)
81114764:	1004d43a 	srli	r2,r2,16
81114768:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
8111476c:	00001406 	br	811147c0 <altera_avalon_jtag_uart_irq+0x1a0>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
81114770:	e0bffc17 	ldw	r2,-16(fp)
81114774:	e0fffb17 	ldw	r3,-20(fp)
81114778:	18c00d17 	ldw	r3,52(r3)
8111477c:	e13ffb17 	ldw	r4,-20(fp)
81114780:	20c7883a 	add	r3,r4,r3
81114784:	18c20e04 	addi	r3,r3,2104
81114788:	18c00003 	ldbu	r3,0(r3)
8111478c:	18c03fcc 	andi	r3,r3,255
81114790:	18c0201c 	xori	r3,r3,128
81114794:	18ffe004 	addi	r3,r3,-128
81114798:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
8111479c:	e0bffb17 	ldw	r2,-20(fp)
811147a0:	10800d17 	ldw	r2,52(r2)
811147a4:	10800044 	addi	r2,r2,1
811147a8:	10c1ffcc 	andi	r3,r2,2047
811147ac:	e0bffb17 	ldw	r2,-20(fp)
811147b0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
811147b4:	e0bffa17 	ldw	r2,-24(fp)
811147b8:	10bfffc4 	addi	r2,r2,-1
811147bc:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
811147c0:	e0bffa17 	ldw	r2,-24(fp)
811147c4:	10000526 	beq	r2,zero,811147dc <altera_avalon_jtag_uart_irq+0x1bc>
811147c8:	e0bffb17 	ldw	r2,-20(fp)
811147cc:	10c00d17 	ldw	r3,52(r2)
811147d0:	e0bffb17 	ldw	r2,-20(fp)
811147d4:	10800c17 	ldw	r2,48(r2)
811147d8:	18bfe51e 	bne	r3,r2,81114770 <__reset+0xfb0f4770>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
811147dc:	e0bffa17 	ldw	r2,-24(fp)
811147e0:	103f9d26 	beq	r2,zero,81114658 <__reset+0xfb0f4658>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
811147e4:	e0bffb17 	ldw	r2,-20(fp)
811147e8:	10c00817 	ldw	r3,32(r2)
811147ec:	00bfff44 	movi	r2,-3
811147f0:	1886703a 	and	r3,r3,r2
811147f4:	e0bffb17 	ldw	r2,-20(fp)
811147f8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
811147fc:	e0bffb17 	ldw	r2,-20(fp)
81114800:	10800017 	ldw	r2,0(r2)
81114804:	10800104 	addi	r2,r2,4
81114808:	1007883a 	mov	r3,r2
8111480c:	e0bffb17 	ldw	r2,-20(fp)
81114810:	10800817 	ldw	r2,32(r2)
81114814:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
81114818:	e0bffc17 	ldw	r2,-16(fp)
8111481c:	10800104 	addi	r2,r2,4
81114820:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
81114824:	003f8c06 	br	81114658 <__reset+0xfb0f4658>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
81114828:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
8111482c:	0001883a 	nop
81114830:	e037883a 	mov	sp,fp
81114834:	dfc00117 	ldw	ra,4(sp)
81114838:	df000017 	ldw	fp,0(sp)
8111483c:	dec00204 	addi	sp,sp,8
81114840:	f800283a 	ret

81114844 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
81114844:	defff804 	addi	sp,sp,-32
81114848:	df000715 	stw	fp,28(sp)
8111484c:	df000704 	addi	fp,sp,28
81114850:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
81114854:	e0bffb17 	ldw	r2,-20(fp)
81114858:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
8111485c:	e0bff917 	ldw	r2,-28(fp)
81114860:	10800017 	ldw	r2,0(r2)
81114864:	10800104 	addi	r2,r2,4
81114868:	10800037 	ldwio	r2,0(r2)
8111486c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
81114870:	e0bffa17 	ldw	r2,-24(fp)
81114874:	1081000c 	andi	r2,r2,1024
81114878:	10000b26 	beq	r2,zero,811148a8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
8111487c:	e0bff917 	ldw	r2,-28(fp)
81114880:	10800017 	ldw	r2,0(r2)
81114884:	10800104 	addi	r2,r2,4
81114888:	1007883a 	mov	r3,r2
8111488c:	e0bff917 	ldw	r2,-28(fp)
81114890:	10800817 	ldw	r2,32(r2)
81114894:	10810014 	ori	r2,r2,1024
81114898:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
8111489c:	e0bff917 	ldw	r2,-28(fp)
811148a0:	10000915 	stw	zero,36(r2)
811148a4:	00000a06 	br	811148d0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
811148a8:	e0bff917 	ldw	r2,-28(fp)
811148ac:	10c00917 	ldw	r3,36(r2)
811148b0:	00a00034 	movhi	r2,32768
811148b4:	10bfff04 	addi	r2,r2,-4
811148b8:	10c00536 	bltu	r2,r3,811148d0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
811148bc:	e0bff917 	ldw	r2,-28(fp)
811148c0:	10800917 	ldw	r2,36(r2)
811148c4:	10c00044 	addi	r3,r2,1
811148c8:	e0bff917 	ldw	r2,-28(fp)
811148cc:	10c00915 	stw	r3,36(r2)
811148d0:	d0a02217 	ldw	r2,-32632(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
811148d4:	e037883a 	mov	sp,fp
811148d8:	df000017 	ldw	fp,0(sp)
811148dc:	dec00104 	addi	sp,sp,4
811148e0:	f800283a 	ret

811148e4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
811148e4:	defffd04 	addi	sp,sp,-12
811148e8:	df000215 	stw	fp,8(sp)
811148ec:	df000204 	addi	fp,sp,8
811148f0:	e13ffe15 	stw	r4,-8(fp)
811148f4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
811148f8:	00000506 	br	81114910 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
811148fc:	e0bfff17 	ldw	r2,-4(fp)
81114900:	1090000c 	andi	r2,r2,16384
81114904:	10000226 	beq	r2,zero,81114910 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
81114908:	00bffd44 	movi	r2,-11
8111490c:	00000b06 	br	8111493c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
81114910:	e0bffe17 	ldw	r2,-8(fp)
81114914:	10c00d17 	ldw	r3,52(r2)
81114918:	e0bffe17 	ldw	r2,-8(fp)
8111491c:	10800c17 	ldw	r2,48(r2)
81114920:	18800526 	beq	r3,r2,81114938 <altera_avalon_jtag_uart_close+0x54>
81114924:	e0bffe17 	ldw	r2,-8(fp)
81114928:	10c00917 	ldw	r3,36(r2)
8111492c:	e0bffe17 	ldw	r2,-8(fp)
81114930:	10800117 	ldw	r2,4(r2)
81114934:	18bff136 	bltu	r3,r2,811148fc <__reset+0xfb0f48fc>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
81114938:	0005883a 	mov	r2,zero
}
8111493c:	e037883a 	mov	sp,fp
81114940:	df000017 	ldw	fp,0(sp)
81114944:	dec00104 	addi	sp,sp,4
81114948:	f800283a 	ret

8111494c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
8111494c:	defffa04 	addi	sp,sp,-24
81114950:	df000515 	stw	fp,20(sp)
81114954:	df000504 	addi	fp,sp,20
81114958:	e13ffd15 	stw	r4,-12(fp)
8111495c:	e17ffe15 	stw	r5,-8(fp)
81114960:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
81114964:	00bff9c4 	movi	r2,-25
81114968:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
8111496c:	e0bffe17 	ldw	r2,-8(fp)
81114970:	10da8060 	cmpeqi	r3,r2,27137
81114974:	1800031e 	bne	r3,zero,81114984 <altera_avalon_jtag_uart_ioctl+0x38>
81114978:	109a80a0 	cmpeqi	r2,r2,27138
8111497c:	1000181e 	bne	r2,zero,811149e0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
81114980:	00002906 	br	81114a28 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
81114984:	e0bffd17 	ldw	r2,-12(fp)
81114988:	10c00117 	ldw	r3,4(r2)
8111498c:	00a00034 	movhi	r2,32768
81114990:	10bfffc4 	addi	r2,r2,-1
81114994:	18802126 	beq	r3,r2,81114a1c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
81114998:	e0bfff17 	ldw	r2,-4(fp)
8111499c:	10800017 	ldw	r2,0(r2)
811149a0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
811149a4:	e0bffc17 	ldw	r2,-16(fp)
811149a8:	10800090 	cmplti	r2,r2,2
811149ac:	1000061e 	bne	r2,zero,811149c8 <altera_avalon_jtag_uart_ioctl+0x7c>
811149b0:	e0fffc17 	ldw	r3,-16(fp)
811149b4:	00a00034 	movhi	r2,32768
811149b8:	10bfffc4 	addi	r2,r2,-1
811149bc:	18800226 	beq	r3,r2,811149c8 <altera_avalon_jtag_uart_ioctl+0x7c>
811149c0:	e0bffc17 	ldw	r2,-16(fp)
811149c4:	00000206 	br	811149d0 <altera_avalon_jtag_uart_ioctl+0x84>
811149c8:	00a00034 	movhi	r2,32768
811149cc:	10bfff84 	addi	r2,r2,-2
811149d0:	e0fffd17 	ldw	r3,-12(fp)
811149d4:	18800115 	stw	r2,4(r3)
      rc = 0;
811149d8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
811149dc:	00000f06 	br	81114a1c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
811149e0:	e0bffd17 	ldw	r2,-12(fp)
811149e4:	10c00117 	ldw	r3,4(r2)
811149e8:	00a00034 	movhi	r2,32768
811149ec:	10bfffc4 	addi	r2,r2,-1
811149f0:	18800c26 	beq	r3,r2,81114a24 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
811149f4:	e0bffd17 	ldw	r2,-12(fp)
811149f8:	10c00917 	ldw	r3,36(r2)
811149fc:	e0bffd17 	ldw	r2,-12(fp)
81114a00:	10800117 	ldw	r2,4(r2)
81114a04:	1885803a 	cmpltu	r2,r3,r2
81114a08:	10c03fcc 	andi	r3,r2,255
81114a0c:	e0bfff17 	ldw	r2,-4(fp)
81114a10:	10c00015 	stw	r3,0(r2)
      rc = 0;
81114a14:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
81114a18:	00000206 	br	81114a24 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
81114a1c:	0001883a 	nop
81114a20:	00000106 	br	81114a28 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
81114a24:	0001883a 	nop

  default:
    break;
  }

  return rc;
81114a28:	e0bffb17 	ldw	r2,-20(fp)
}
81114a2c:	e037883a 	mov	sp,fp
81114a30:	df000017 	ldw	fp,0(sp)
81114a34:	dec00104 	addi	sp,sp,4
81114a38:	f800283a 	ret

81114a3c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
81114a3c:	defff304 	addi	sp,sp,-52
81114a40:	dfc00c15 	stw	ra,48(sp)
81114a44:	df000b15 	stw	fp,44(sp)
81114a48:	df000b04 	addi	fp,sp,44
81114a4c:	e13ffc15 	stw	r4,-16(fp)
81114a50:	e17ffd15 	stw	r5,-12(fp)
81114a54:	e1bffe15 	stw	r6,-8(fp)
81114a58:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
81114a5c:	e0bffd17 	ldw	r2,-12(fp)
81114a60:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
81114a64:	00004706 	br	81114b84 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
81114a68:	e0bffc17 	ldw	r2,-16(fp)
81114a6c:	10800a17 	ldw	r2,40(r2)
81114a70:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
81114a74:	e0bffc17 	ldw	r2,-16(fp)
81114a78:	10800b17 	ldw	r2,44(r2)
81114a7c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
81114a80:	e0fff717 	ldw	r3,-36(fp)
81114a84:	e0bff817 	ldw	r2,-32(fp)
81114a88:	18800536 	bltu	r3,r2,81114aa0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
81114a8c:	e0fff717 	ldw	r3,-36(fp)
81114a90:	e0bff817 	ldw	r2,-32(fp)
81114a94:	1885c83a 	sub	r2,r3,r2
81114a98:	e0bff615 	stw	r2,-40(fp)
81114a9c:	00000406 	br	81114ab0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
81114aa0:	00c20004 	movi	r3,2048
81114aa4:	e0bff817 	ldw	r2,-32(fp)
81114aa8:	1885c83a 	sub	r2,r3,r2
81114aac:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
81114ab0:	e0bff617 	ldw	r2,-40(fp)
81114ab4:	10001e26 	beq	r2,zero,81114b30 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
81114ab8:	e0fffe17 	ldw	r3,-8(fp)
81114abc:	e0bff617 	ldw	r2,-40(fp)
81114ac0:	1880022e 	bgeu	r3,r2,81114acc <altera_avalon_jtag_uart_read+0x90>
        n = space;
81114ac4:	e0bffe17 	ldw	r2,-8(fp)
81114ac8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
81114acc:	e0bffc17 	ldw	r2,-16(fp)
81114ad0:	10c00e04 	addi	r3,r2,56
81114ad4:	e0bff817 	ldw	r2,-32(fp)
81114ad8:	1885883a 	add	r2,r3,r2
81114adc:	e1bff617 	ldw	r6,-40(fp)
81114ae0:	100b883a 	mov	r5,r2
81114ae4:	e13ff517 	ldw	r4,-44(fp)
81114ae8:	1102b500 	call	81102b50 <memcpy>
      ptr   += n;
81114aec:	e0fff517 	ldw	r3,-44(fp)
81114af0:	e0bff617 	ldw	r2,-40(fp)
81114af4:	1885883a 	add	r2,r3,r2
81114af8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
81114afc:	e0fffe17 	ldw	r3,-8(fp)
81114b00:	e0bff617 	ldw	r2,-40(fp)
81114b04:	1885c83a 	sub	r2,r3,r2
81114b08:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
81114b0c:	e0fff817 	ldw	r3,-32(fp)
81114b10:	e0bff617 	ldw	r2,-40(fp)
81114b14:	1885883a 	add	r2,r3,r2
81114b18:	10c1ffcc 	andi	r3,r2,2047
81114b1c:	e0bffc17 	ldw	r2,-16(fp)
81114b20:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
81114b24:	e0bffe17 	ldw	r2,-8(fp)
81114b28:	00bfcf16 	blt	zero,r2,81114a68 <__reset+0xfb0f4a68>
81114b2c:	00000106 	br	81114b34 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
81114b30:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
81114b34:	e0fff517 	ldw	r3,-44(fp)
81114b38:	e0bffd17 	ldw	r2,-12(fp)
81114b3c:	1880141e 	bne	r3,r2,81114b90 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
81114b40:	e0bfff17 	ldw	r2,-4(fp)
81114b44:	1090000c 	andi	r2,r2,16384
81114b48:	1000131e 	bne	r2,zero,81114b98 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
81114b4c:	0001883a 	nop
81114b50:	e0bffc17 	ldw	r2,-16(fp)
81114b54:	10c00a17 	ldw	r3,40(r2)
81114b58:	e0bff717 	ldw	r2,-36(fp)
81114b5c:	1880051e 	bne	r3,r2,81114b74 <altera_avalon_jtag_uart_read+0x138>
81114b60:	e0bffc17 	ldw	r2,-16(fp)
81114b64:	10c00917 	ldw	r3,36(r2)
81114b68:	e0bffc17 	ldw	r2,-16(fp)
81114b6c:	10800117 	ldw	r2,4(r2)
81114b70:	18bff736 	bltu	r3,r2,81114b50 <__reset+0xfb0f4b50>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
81114b74:	e0bffc17 	ldw	r2,-16(fp)
81114b78:	10c00a17 	ldw	r3,40(r2)
81114b7c:	e0bff717 	ldw	r2,-36(fp)
81114b80:	18800726 	beq	r3,r2,81114ba0 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
81114b84:	e0bffe17 	ldw	r2,-8(fp)
81114b88:	00bfb716 	blt	zero,r2,81114a68 <__reset+0xfb0f4a68>
81114b8c:	00000506 	br	81114ba4 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
81114b90:	0001883a 	nop
81114b94:	00000306 	br	81114ba4 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
81114b98:	0001883a 	nop
81114b9c:	00000106 	br	81114ba4 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
81114ba0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
81114ba4:	e0fff517 	ldw	r3,-44(fp)
81114ba8:	e0bffd17 	ldw	r2,-12(fp)
81114bac:	18801826 	beq	r3,r2,81114c10 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81114bb0:	0005303a 	rdctl	r2,status
81114bb4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81114bb8:	e0fffb17 	ldw	r3,-20(fp)
81114bbc:	00bfff84 	movi	r2,-2
81114bc0:	1884703a 	and	r2,r3,r2
81114bc4:	1001703a 	wrctl	status,r2
  
  return context;
81114bc8:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
81114bcc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
81114bd0:	e0bffc17 	ldw	r2,-16(fp)
81114bd4:	10800817 	ldw	r2,32(r2)
81114bd8:	10c00054 	ori	r3,r2,1
81114bdc:	e0bffc17 	ldw	r2,-16(fp)
81114be0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
81114be4:	e0bffc17 	ldw	r2,-16(fp)
81114be8:	10800017 	ldw	r2,0(r2)
81114bec:	10800104 	addi	r2,r2,4
81114bf0:	1007883a 	mov	r3,r2
81114bf4:	e0bffc17 	ldw	r2,-16(fp)
81114bf8:	10800817 	ldw	r2,32(r2)
81114bfc:	18800035 	stwio	r2,0(r3)
81114c00:	e0bffa17 	ldw	r2,-24(fp)
81114c04:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81114c08:	e0bff917 	ldw	r2,-28(fp)
81114c0c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
81114c10:	e0fff517 	ldw	r3,-44(fp)
81114c14:	e0bffd17 	ldw	r2,-12(fp)
81114c18:	18800426 	beq	r3,r2,81114c2c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
81114c1c:	e0fff517 	ldw	r3,-44(fp)
81114c20:	e0bffd17 	ldw	r2,-12(fp)
81114c24:	1885c83a 	sub	r2,r3,r2
81114c28:	00000606 	br	81114c44 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
81114c2c:	e0bfff17 	ldw	r2,-4(fp)
81114c30:	1090000c 	andi	r2,r2,16384
81114c34:	10000226 	beq	r2,zero,81114c40 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
81114c38:	00bffd44 	movi	r2,-11
81114c3c:	00000106 	br	81114c44 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
81114c40:	00bffec4 	movi	r2,-5
}
81114c44:	e037883a 	mov	sp,fp
81114c48:	dfc00117 	ldw	ra,4(sp)
81114c4c:	df000017 	ldw	fp,0(sp)
81114c50:	dec00204 	addi	sp,sp,8
81114c54:	f800283a 	ret

81114c58 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
81114c58:	defff304 	addi	sp,sp,-52
81114c5c:	dfc00c15 	stw	ra,48(sp)
81114c60:	df000b15 	stw	fp,44(sp)
81114c64:	df000b04 	addi	fp,sp,44
81114c68:	e13ffc15 	stw	r4,-16(fp)
81114c6c:	e17ffd15 	stw	r5,-12(fp)
81114c70:	e1bffe15 	stw	r6,-8(fp)
81114c74:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
81114c78:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
81114c7c:	e0bffd17 	ldw	r2,-12(fp)
81114c80:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
81114c84:	00003706 	br	81114d64 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
81114c88:	e0bffc17 	ldw	r2,-16(fp)
81114c8c:	10800c17 	ldw	r2,48(r2)
81114c90:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
81114c94:	e0bffc17 	ldw	r2,-16(fp)
81114c98:	10800d17 	ldw	r2,52(r2)
81114c9c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
81114ca0:	e0fff917 	ldw	r3,-28(fp)
81114ca4:	e0bff517 	ldw	r2,-44(fp)
81114ca8:	1880062e 	bgeu	r3,r2,81114cc4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
81114cac:	e0fff517 	ldw	r3,-44(fp)
81114cb0:	e0bff917 	ldw	r2,-28(fp)
81114cb4:	1885c83a 	sub	r2,r3,r2
81114cb8:	10bfffc4 	addi	r2,r2,-1
81114cbc:	e0bff615 	stw	r2,-40(fp)
81114cc0:	00000b06 	br	81114cf0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
81114cc4:	e0bff517 	ldw	r2,-44(fp)
81114cc8:	10000526 	beq	r2,zero,81114ce0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
81114ccc:	00c20004 	movi	r3,2048
81114cd0:	e0bff917 	ldw	r2,-28(fp)
81114cd4:	1885c83a 	sub	r2,r3,r2
81114cd8:	e0bff615 	stw	r2,-40(fp)
81114cdc:	00000406 	br	81114cf0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
81114ce0:	00c1ffc4 	movi	r3,2047
81114ce4:	e0bff917 	ldw	r2,-28(fp)
81114ce8:	1885c83a 	sub	r2,r3,r2
81114cec:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
81114cf0:	e0bff617 	ldw	r2,-40(fp)
81114cf4:	10001e26 	beq	r2,zero,81114d70 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
81114cf8:	e0fffe17 	ldw	r3,-8(fp)
81114cfc:	e0bff617 	ldw	r2,-40(fp)
81114d00:	1880022e 	bgeu	r3,r2,81114d0c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
81114d04:	e0bffe17 	ldw	r2,-8(fp)
81114d08:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
81114d0c:	e0bffc17 	ldw	r2,-16(fp)
81114d10:	10c20e04 	addi	r3,r2,2104
81114d14:	e0bff917 	ldw	r2,-28(fp)
81114d18:	1885883a 	add	r2,r3,r2
81114d1c:	e1bff617 	ldw	r6,-40(fp)
81114d20:	e17ffd17 	ldw	r5,-12(fp)
81114d24:	1009883a 	mov	r4,r2
81114d28:	1102b500 	call	81102b50 <memcpy>
      ptr   += n;
81114d2c:	e0fffd17 	ldw	r3,-12(fp)
81114d30:	e0bff617 	ldw	r2,-40(fp)
81114d34:	1885883a 	add	r2,r3,r2
81114d38:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
81114d3c:	e0fffe17 	ldw	r3,-8(fp)
81114d40:	e0bff617 	ldw	r2,-40(fp)
81114d44:	1885c83a 	sub	r2,r3,r2
81114d48:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
81114d4c:	e0fff917 	ldw	r3,-28(fp)
81114d50:	e0bff617 	ldw	r2,-40(fp)
81114d54:	1885883a 	add	r2,r3,r2
81114d58:	10c1ffcc 	andi	r3,r2,2047
81114d5c:	e0bffc17 	ldw	r2,-16(fp)
81114d60:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
81114d64:	e0bffe17 	ldw	r2,-8(fp)
81114d68:	00bfc716 	blt	zero,r2,81114c88 <__reset+0xfb0f4c88>
81114d6c:	00000106 	br	81114d74 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
81114d70:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81114d74:	0005303a 	rdctl	r2,status
81114d78:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81114d7c:	e0fffb17 	ldw	r3,-20(fp)
81114d80:	00bfff84 	movi	r2,-2
81114d84:	1884703a 	and	r2,r3,r2
81114d88:	1001703a 	wrctl	status,r2
  
  return context;
81114d8c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
81114d90:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
81114d94:	e0bffc17 	ldw	r2,-16(fp)
81114d98:	10800817 	ldw	r2,32(r2)
81114d9c:	10c00094 	ori	r3,r2,2
81114da0:	e0bffc17 	ldw	r2,-16(fp)
81114da4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
81114da8:	e0bffc17 	ldw	r2,-16(fp)
81114dac:	10800017 	ldw	r2,0(r2)
81114db0:	10800104 	addi	r2,r2,4
81114db4:	1007883a 	mov	r3,r2
81114db8:	e0bffc17 	ldw	r2,-16(fp)
81114dbc:	10800817 	ldw	r2,32(r2)
81114dc0:	18800035 	stwio	r2,0(r3)
81114dc4:	e0bffa17 	ldw	r2,-24(fp)
81114dc8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81114dcc:	e0bff817 	ldw	r2,-32(fp)
81114dd0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
81114dd4:	e0bffe17 	ldw	r2,-8(fp)
81114dd8:	0080100e 	bge	zero,r2,81114e1c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
81114ddc:	e0bfff17 	ldw	r2,-4(fp)
81114de0:	1090000c 	andi	r2,r2,16384
81114de4:	1000101e 	bne	r2,zero,81114e28 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
81114de8:	0001883a 	nop
81114dec:	e0bffc17 	ldw	r2,-16(fp)
81114df0:	10c00d17 	ldw	r3,52(r2)
81114df4:	e0bff517 	ldw	r2,-44(fp)
81114df8:	1880051e 	bne	r3,r2,81114e10 <altera_avalon_jtag_uart_write+0x1b8>
81114dfc:	e0bffc17 	ldw	r2,-16(fp)
81114e00:	10c00917 	ldw	r3,36(r2)
81114e04:	e0bffc17 	ldw	r2,-16(fp)
81114e08:	10800117 	ldw	r2,4(r2)
81114e0c:	18bff736 	bltu	r3,r2,81114dec <__reset+0xfb0f4dec>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
81114e10:	e0bffc17 	ldw	r2,-16(fp)
81114e14:	10800917 	ldw	r2,36(r2)
81114e18:	1000051e 	bne	r2,zero,81114e30 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
81114e1c:	e0bffe17 	ldw	r2,-8(fp)
81114e20:	00bfd016 	blt	zero,r2,81114d64 <__reset+0xfb0f4d64>
81114e24:	00000306 	br	81114e34 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
81114e28:	0001883a 	nop
81114e2c:	00000106 	br	81114e34 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
81114e30:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
81114e34:	e0fffd17 	ldw	r3,-12(fp)
81114e38:	e0bff717 	ldw	r2,-36(fp)
81114e3c:	18800426 	beq	r3,r2,81114e50 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
81114e40:	e0fffd17 	ldw	r3,-12(fp)
81114e44:	e0bff717 	ldw	r2,-36(fp)
81114e48:	1885c83a 	sub	r2,r3,r2
81114e4c:	00000606 	br	81114e68 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
81114e50:	e0bfff17 	ldw	r2,-4(fp)
81114e54:	1090000c 	andi	r2,r2,16384
81114e58:	10000226 	beq	r2,zero,81114e64 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
81114e5c:	00bffd44 	movi	r2,-11
81114e60:	00000106 	br	81114e68 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
81114e64:	00bffec4 	movi	r2,-5
}
81114e68:	e037883a 	mov	sp,fp
81114e6c:	dfc00117 	ldw	ra,4(sp)
81114e70:	df000017 	ldw	fp,0(sp)
81114e74:	dec00204 	addi	sp,sp,8
81114e78:	f800283a 	ret

81114e7c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
81114e7c:	defffa04 	addi	sp,sp,-24
81114e80:	dfc00515 	stw	ra,20(sp)
81114e84:	df000415 	stw	fp,16(sp)
81114e88:	df000404 	addi	fp,sp,16
81114e8c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
81114e90:	0007883a 	mov	r3,zero
81114e94:	e0bfff17 	ldw	r2,-4(fp)
81114e98:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
81114e9c:	e0bfff17 	ldw	r2,-4(fp)
81114ea0:	10800104 	addi	r2,r2,4
81114ea4:	10800037 	ldwio	r2,0(r2)

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
  ALT_LOG_SYS_CLK_HEARTBEAT();
81114ea8:	11139b00 	call	811139b0 <alt_log_system_clock>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81114eac:	0005303a 	rdctl	r2,status
81114eb0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81114eb4:	e0fffd17 	ldw	r3,-12(fp)
81114eb8:	00bfff84 	movi	r2,-2
81114ebc:	1884703a 	and	r2,r3,r2
81114ec0:	1001703a 	wrctl	status,r2
  
  return context;
81114ec4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
81114ec8:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
81114ecc:	1113fb00 	call	81113fb0 <alt_tick>
81114ed0:	e0bffc17 	ldw	r2,-16(fp)
81114ed4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81114ed8:	e0bffe17 	ldw	r2,-8(fp)
81114edc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
81114ee0:	0001883a 	nop
81114ee4:	e037883a 	mov	sp,fp
81114ee8:	dfc00117 	ldw	ra,4(sp)
81114eec:	df000017 	ldw	fp,0(sp)
81114ef0:	dec00204 	addi	sp,sp,8
81114ef4:	f800283a 	ret

81114ef8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
81114ef8:	defff804 	addi	sp,sp,-32
81114efc:	dfc00715 	stw	ra,28(sp)
81114f00:	df000615 	stw	fp,24(sp)
81114f04:	df000604 	addi	fp,sp,24
81114f08:	e13ffc15 	stw	r4,-16(fp)
81114f0c:	e17ffd15 	stw	r5,-12(fp)
81114f10:	e1bffe15 	stw	r6,-8(fp)
81114f14:	e1ffff15 	stw	r7,-4(fp)
81114f18:	e0bfff17 	ldw	r2,-4(fp)
81114f1c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
81114f20:	d0a02217 	ldw	r2,-32632(gp)
81114f24:	1000021e 	bne	r2,zero,81114f30 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
81114f28:	e0bffb17 	ldw	r2,-20(fp)
81114f2c:	d0a02215 	stw	r2,-32632(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
81114f30:	e0bffc17 	ldw	r2,-16(fp)
81114f34:	10800104 	addi	r2,r2,4
81114f38:	00c001c4 	movi	r3,7
81114f3c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
81114f40:	d8000015 	stw	zero,0(sp)
81114f44:	e1fffc17 	ldw	r7,-16(fp)
81114f48:	01a04474 	movhi	r6,33041
81114f4c:	31939f04 	addi	r6,r6,20092
81114f50:	e17ffe17 	ldw	r5,-8(fp)
81114f54:	e13ffd17 	ldw	r4,-12(fp)
81114f58:	1117b4c0 	call	81117b4c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
81114f5c:	0001883a 	nop
81114f60:	e037883a 	mov	sp,fp
81114f64:	dfc00117 	ldw	ra,4(sp)
81114f68:	df000017 	ldw	fp,0(sp)
81114f6c:	dec00204 	addi	sp,sp,8
81114f70:	f800283a 	ret

81114f74 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
81114f74:	defffa04 	addi	sp,sp,-24
81114f78:	dfc00515 	stw	ra,20(sp)
81114f7c:	df000415 	stw	fp,16(sp)
81114f80:	df000404 	addi	fp,sp,16
81114f84:	e13ffd15 	stw	r4,-12(fp)
81114f88:	e17ffe15 	stw	r5,-8(fp)
81114f8c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
81114f90:	e0bffd17 	ldw	r2,-12(fp)
81114f94:	10800017 	ldw	r2,0(r2)
81114f98:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
81114f9c:	e0bffc17 	ldw	r2,-16(fp)
81114fa0:	10c00a04 	addi	r3,r2,40
81114fa4:	e0bffd17 	ldw	r2,-12(fp)
81114fa8:	10800217 	ldw	r2,8(r2)
81114fac:	100f883a 	mov	r7,r2
81114fb0:	e1bfff17 	ldw	r6,-4(fp)
81114fb4:	e17ffe17 	ldw	r5,-8(fp)
81114fb8:	1809883a 	mov	r4,r3
81114fbc:	11154880 	call	81115488 <altera_avalon_uart_read>
      fd->fd_flags);
}
81114fc0:	e037883a 	mov	sp,fp
81114fc4:	dfc00117 	ldw	ra,4(sp)
81114fc8:	df000017 	ldw	fp,0(sp)
81114fcc:	dec00204 	addi	sp,sp,8
81114fd0:	f800283a 	ret

81114fd4 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
81114fd4:	defffa04 	addi	sp,sp,-24
81114fd8:	dfc00515 	stw	ra,20(sp)
81114fdc:	df000415 	stw	fp,16(sp)
81114fe0:	df000404 	addi	fp,sp,16
81114fe4:	e13ffd15 	stw	r4,-12(fp)
81114fe8:	e17ffe15 	stw	r5,-8(fp)
81114fec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
81114ff0:	e0bffd17 	ldw	r2,-12(fp)
81114ff4:	10800017 	ldw	r2,0(r2)
81114ff8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
81114ffc:	e0bffc17 	ldw	r2,-16(fp)
81115000:	10c00a04 	addi	r3,r2,40
81115004:	e0bffd17 	ldw	r2,-12(fp)
81115008:	10800217 	ldw	r2,8(r2)
8111500c:	100f883a 	mov	r7,r2
81115010:	e1bfff17 	ldw	r6,-4(fp)
81115014:	e17ffe17 	ldw	r5,-8(fp)
81115018:	1809883a 	mov	r4,r3
8111501c:	11156a00 	call	811156a0 <altera_avalon_uart_write>
      fd->fd_flags);
}
81115020:	e037883a 	mov	sp,fp
81115024:	dfc00117 	ldw	ra,4(sp)
81115028:	df000017 	ldw	fp,0(sp)
8111502c:	dec00204 	addi	sp,sp,8
81115030:	f800283a 	ret

81115034 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
81115034:	defffc04 	addi	sp,sp,-16
81115038:	dfc00315 	stw	ra,12(sp)
8111503c:	df000215 	stw	fp,8(sp)
81115040:	df000204 	addi	fp,sp,8
81115044:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
81115048:	e0bfff17 	ldw	r2,-4(fp)
8111504c:	10800017 	ldw	r2,0(r2)
81115050:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
81115054:	e0bffe17 	ldw	r2,-8(fp)
81115058:	10c00a04 	addi	r3,r2,40
8111505c:	e0bfff17 	ldw	r2,-4(fp)
81115060:	10800217 	ldw	r2,8(r2)
81115064:	100b883a 	mov	r5,r2
81115068:	1809883a 	mov	r4,r3
8111506c:	11153f80 	call	811153f8 <altera_avalon_uart_close>
}
81115070:	e037883a 	mov	sp,fp
81115074:	dfc00117 	ldw	ra,4(sp)
81115078:	df000017 	ldw	fp,0(sp)
8111507c:	dec00204 	addi	sp,sp,8
81115080:	f800283a 	ret

81115084 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
81115084:	defff804 	addi	sp,sp,-32
81115088:	dfc00715 	stw	ra,28(sp)
8111508c:	df000615 	stw	fp,24(sp)
81115090:	df000604 	addi	fp,sp,24
81115094:	e13ffd15 	stw	r4,-12(fp)
81115098:	e17ffe15 	stw	r5,-8(fp)
8111509c:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
811150a0:	e0bffd17 	ldw	r2,-12(fp)
811150a4:	10800017 	ldw	r2,0(r2)
811150a8:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
811150ac:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
811150b0:	1000041e 	bne	r2,zero,811150c4 <altera_avalon_uart_init+0x40>
811150b4:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
811150b8:	1000021e 	bne	r2,zero,811150c4 <altera_avalon_uart_init+0x40>
811150bc:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
811150c0:	10000226 	beq	r2,zero,811150cc <altera_avalon_uart_init+0x48>
811150c4:	00800044 	movi	r2,1
811150c8:	00000106 	br	811150d0 <altera_avalon_uart_init+0x4c>
811150cc:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
811150d0:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
811150d4:	e0bffc17 	ldw	r2,-16(fp)
811150d8:	10000f1e 	bne	r2,zero,81115118 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
811150dc:	e0bffd17 	ldw	r2,-12(fp)
811150e0:	00c32004 	movi	r3,3200
811150e4:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
811150e8:	e0bffb17 	ldw	r2,-20(fp)
811150ec:	10800304 	addi	r2,r2,12
811150f0:	e0fffd17 	ldw	r3,-12(fp)
811150f4:	18c00117 	ldw	r3,4(r3)
811150f8:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
811150fc:	d8000015 	stw	zero,0(sp)
81115100:	e1fffd17 	ldw	r7,-12(fp)
81115104:	01a04474 	movhi	r6,33041
81115108:	31944c04 	addi	r6,r6,20784
8111510c:	e17fff17 	ldw	r5,-4(fp)
81115110:	e13ffe17 	ldw	r4,-8(fp)
81115114:	1117b4c0 	call	81117b4c <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
81115118:	0001883a 	nop
8111511c:	e037883a 	mov	sp,fp
81115120:	dfc00117 	ldw	ra,4(sp)
81115124:	df000017 	ldw	fp,0(sp)
81115128:	dec00204 	addi	sp,sp,8
8111512c:	f800283a 	ret

81115130 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
81115130:	defffa04 	addi	sp,sp,-24
81115134:	dfc00515 	stw	ra,20(sp)
81115138:	df000415 	stw	fp,16(sp)
8111513c:	df000404 	addi	fp,sp,16
81115140:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
81115144:	e0bfff17 	ldw	r2,-4(fp)
81115148:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
8111514c:	e0bffc17 	ldw	r2,-16(fp)
81115150:	10800017 	ldw	r2,0(r2)
81115154:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
81115158:	e0bffd17 	ldw	r2,-12(fp)
8111515c:	10800204 	addi	r2,r2,8
81115160:	10800037 	ldwio	r2,0(r2)
81115164:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
81115168:	e0bffd17 	ldw	r2,-12(fp)
8111516c:	10800204 	addi	r2,r2,8
81115170:	0007883a 	mov	r3,zero
81115174:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
81115178:	e0bffd17 	ldw	r2,-12(fp)
8111517c:	10800204 	addi	r2,r2,8
81115180:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
81115184:	e0bffe17 	ldw	r2,-8(fp)
81115188:	1080200c 	andi	r2,r2,128
8111518c:	10000326 	beq	r2,zero,8111519c <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
81115190:	e17ffe17 	ldw	r5,-8(fp)
81115194:	e13ffc17 	ldw	r4,-16(fp)
81115198:	11151cc0 	call	811151cc <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
8111519c:	e0bffe17 	ldw	r2,-8(fp)
811151a0:	1081100c 	andi	r2,r2,1088
811151a4:	10000326 	beq	r2,zero,811151b4 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
811151a8:	e17ffe17 	ldw	r5,-8(fp)
811151ac:	e13ffc17 	ldw	r4,-16(fp)
811151b0:	11152b00 	call	811152b0 <altera_avalon_uart_txirq>
  }
  

}
811151b4:	0001883a 	nop
811151b8:	e037883a 	mov	sp,fp
811151bc:	dfc00117 	ldw	ra,4(sp)
811151c0:	df000017 	ldw	fp,0(sp)
811151c4:	dec00204 	addi	sp,sp,8
811151c8:	f800283a 	ret

811151cc <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
811151cc:	defffc04 	addi	sp,sp,-16
811151d0:	df000315 	stw	fp,12(sp)
811151d4:	df000304 	addi	fp,sp,12
811151d8:	e13ffe15 	stw	r4,-8(fp)
811151dc:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
811151e0:	e0bfff17 	ldw	r2,-4(fp)
811151e4:	108000cc 	andi	r2,r2,3
811151e8:	10002c1e 	bne	r2,zero,8111529c <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
811151ec:	e0bffe17 	ldw	r2,-8(fp)
811151f0:	10800317 	ldw	r2,12(r2)
811151f4:	e0bffe17 	ldw	r2,-8(fp)
811151f8:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
811151fc:	e0bffe17 	ldw	r2,-8(fp)
81115200:	10800317 	ldw	r2,12(r2)
81115204:	10800044 	addi	r2,r2,1
81115208:	10800fcc 	andi	r2,r2,63
8111520c:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
81115210:	e0bffe17 	ldw	r2,-8(fp)
81115214:	10800317 	ldw	r2,12(r2)
81115218:	e0fffe17 	ldw	r3,-8(fp)
8111521c:	18c00017 	ldw	r3,0(r3)
81115220:	18c00037 	ldwio	r3,0(r3)
81115224:	1809883a 	mov	r4,r3
81115228:	e0fffe17 	ldw	r3,-8(fp)
8111522c:	1885883a 	add	r2,r3,r2
81115230:	10800704 	addi	r2,r2,28
81115234:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
81115238:	e0bffe17 	ldw	r2,-8(fp)
8111523c:	e0fffd17 	ldw	r3,-12(fp)
81115240:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
81115244:	e0bffe17 	ldw	r2,-8(fp)
81115248:	10800317 	ldw	r2,12(r2)
8111524c:	10800044 	addi	r2,r2,1
81115250:	10800fcc 	andi	r2,r2,63
81115254:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
81115258:	e0bffe17 	ldw	r2,-8(fp)
8111525c:	10c00217 	ldw	r3,8(r2)
81115260:	e0bffd17 	ldw	r2,-12(fp)
81115264:	18800e1e 	bne	r3,r2,811152a0 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
81115268:	e0bffe17 	ldw	r2,-8(fp)
8111526c:	10c00117 	ldw	r3,4(r2)
81115270:	00bfdfc4 	movi	r2,-129
81115274:	1886703a 	and	r3,r3,r2
81115278:	e0bffe17 	ldw	r2,-8(fp)
8111527c:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
81115280:	e0bffe17 	ldw	r2,-8(fp)
81115284:	10800017 	ldw	r2,0(r2)
81115288:	10800304 	addi	r2,r2,12
8111528c:	e0fffe17 	ldw	r3,-8(fp)
81115290:	18c00117 	ldw	r3,4(r3)
81115294:	10c00035 	stwio	r3,0(r2)
81115298:	00000106 	br	811152a0 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
8111529c:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
811152a0:	e037883a 	mov	sp,fp
811152a4:	df000017 	ldw	fp,0(sp)
811152a8:	dec00104 	addi	sp,sp,4
811152ac:	f800283a 	ret

811152b0 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
811152b0:	defffb04 	addi	sp,sp,-20
811152b4:	df000415 	stw	fp,16(sp)
811152b8:	df000404 	addi	fp,sp,16
811152bc:	e13ffc15 	stw	r4,-16(fp)
811152c0:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
811152c4:	e0bffc17 	ldw	r2,-16(fp)
811152c8:	10c00417 	ldw	r3,16(r2)
811152cc:	e0bffc17 	ldw	r2,-16(fp)
811152d0:	10800517 	ldw	r2,20(r2)
811152d4:	18803226 	beq	r3,r2,811153a0 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
811152d8:	e0bffc17 	ldw	r2,-16(fp)
811152dc:	10800617 	ldw	r2,24(r2)
811152e0:	1080008c 	andi	r2,r2,2
811152e4:	10000326 	beq	r2,zero,811152f4 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
811152e8:	e0bffd17 	ldw	r2,-12(fp)
811152ec:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
811152f0:	10001d26 	beq	r2,zero,81115368 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
811152f4:	e0bffc17 	ldw	r2,-16(fp)
811152f8:	10800417 	ldw	r2,16(r2)
811152fc:	e0bffc17 	ldw	r2,-16(fp)
81115300:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
81115304:	e0bffc17 	ldw	r2,-16(fp)
81115308:	10800017 	ldw	r2,0(r2)
8111530c:	10800104 	addi	r2,r2,4
81115310:	e0fffc17 	ldw	r3,-16(fp)
81115314:	18c00417 	ldw	r3,16(r3)
81115318:	e13ffc17 	ldw	r4,-16(fp)
8111531c:	20c7883a 	add	r3,r4,r3
81115320:	18c01704 	addi	r3,r3,92
81115324:	18c00003 	ldbu	r3,0(r3)
81115328:	18c03fcc 	andi	r3,r3,255
8111532c:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
81115330:	e0bffc17 	ldw	r2,-16(fp)
81115334:	10800417 	ldw	r2,16(r2)
81115338:	10800044 	addi	r2,r2,1
8111533c:	e0fffc17 	ldw	r3,-16(fp)
81115340:	18800415 	stw	r2,16(r3)
81115344:	10c00fcc 	andi	r3,r2,63
81115348:	e0bffc17 	ldw	r2,-16(fp)
8111534c:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
81115350:	e0bffc17 	ldw	r2,-16(fp)
81115354:	10800117 	ldw	r2,4(r2)
81115358:	10c01014 	ori	r3,r2,64
8111535c:	e0bffc17 	ldw	r2,-16(fp)
81115360:	10c00115 	stw	r3,4(r2)
81115364:	00000e06 	br	811153a0 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
81115368:	e0bffc17 	ldw	r2,-16(fp)
8111536c:	10800017 	ldw	r2,0(r2)
81115370:	10800204 	addi	r2,r2,8
81115374:	10800037 	ldwio	r2,0(r2)
81115378:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
8111537c:	e0bffd17 	ldw	r2,-12(fp)
81115380:	1082000c 	andi	r2,r2,2048
81115384:	1000061e 	bne	r2,zero,811153a0 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
81115388:	e0bffc17 	ldw	r2,-16(fp)
8111538c:	10c00117 	ldw	r3,4(r2)
81115390:	00bfefc4 	movi	r2,-65
81115394:	1886703a 	and	r3,r3,r2
81115398:	e0bffc17 	ldw	r2,-16(fp)
8111539c:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
811153a0:	e0bffc17 	ldw	r2,-16(fp)
811153a4:	10c00417 	ldw	r3,16(r2)
811153a8:	e0bffc17 	ldw	r2,-16(fp)
811153ac:	10800517 	ldw	r2,20(r2)
811153b0:	1880061e 	bne	r3,r2,811153cc <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
811153b4:	e0bffc17 	ldw	r2,-16(fp)
811153b8:	10c00117 	ldw	r3,4(r2)
811153bc:	00beefc4 	movi	r2,-1089
811153c0:	1886703a 	and	r3,r3,r2
811153c4:	e0bffc17 	ldw	r2,-16(fp)
811153c8:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
811153cc:	e0bffc17 	ldw	r2,-16(fp)
811153d0:	10800017 	ldw	r2,0(r2)
811153d4:	10800304 	addi	r2,r2,12
811153d8:	e0fffc17 	ldw	r3,-16(fp)
811153dc:	18c00117 	ldw	r3,4(r3)
811153e0:	10c00035 	stwio	r3,0(r2)
}
811153e4:	0001883a 	nop
811153e8:	e037883a 	mov	sp,fp
811153ec:	df000017 	ldw	fp,0(sp)
811153f0:	dec00104 	addi	sp,sp,4
811153f4:	f800283a 	ret

811153f8 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
811153f8:	defffd04 	addi	sp,sp,-12
811153fc:	df000215 	stw	fp,8(sp)
81115400:	df000204 	addi	fp,sp,8
81115404:	e13ffe15 	stw	r4,-8(fp)
81115408:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
8111540c:	00000506 	br	81115424 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
81115410:	e0bfff17 	ldw	r2,-4(fp)
81115414:	1090000c 	andi	r2,r2,16384
81115418:	10000226 	beq	r2,zero,81115424 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
8111541c:	00bffd44 	movi	r2,-11
81115420:	00000606 	br	8111543c <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
81115424:	e0bffe17 	ldw	r2,-8(fp)
81115428:	10c00417 	ldw	r3,16(r2)
8111542c:	e0bffe17 	ldw	r2,-8(fp)
81115430:	10800517 	ldw	r2,20(r2)
81115434:	18bff61e 	bne	r3,r2,81115410 <__reset+0xfb0f5410>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
81115438:	0005883a 	mov	r2,zero
}
8111543c:	e037883a 	mov	sp,fp
81115440:	df000017 	ldw	fp,0(sp)
81115444:	dec00104 	addi	sp,sp,4
81115448:	f800283a 	ret

8111544c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8111544c:	defffe04 	addi	sp,sp,-8
81115450:	dfc00115 	stw	ra,4(sp)
81115454:	df000015 	stw	fp,0(sp)
81115458:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8111545c:	d0a00b17 	ldw	r2,-32724(gp)
81115460:	10000326 	beq	r2,zero,81115470 <alt_get_errno+0x24>
81115464:	d0a00b17 	ldw	r2,-32724(gp)
81115468:	103ee83a 	callr	r2
8111546c:	00000106 	br	81115474 <alt_get_errno+0x28>
81115470:	d0a01a04 	addi	r2,gp,-32664
}
81115474:	e037883a 	mov	sp,fp
81115478:	dfc00117 	ldw	ra,4(sp)
8111547c:	df000017 	ldw	fp,0(sp)
81115480:	dec00204 	addi	sp,sp,8
81115484:	f800283a 	ret

81115488 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
81115488:	defff204 	addi	sp,sp,-56
8111548c:	dfc00d15 	stw	ra,52(sp)
81115490:	df000c15 	stw	fp,48(sp)
81115494:	df000c04 	addi	fp,sp,48
81115498:	e13ffc15 	stw	r4,-16(fp)
8111549c:	e17ffd15 	stw	r5,-12(fp)
811154a0:	e1bffe15 	stw	r6,-8(fp)
811154a4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
811154a8:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
811154ac:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
811154b0:	e0bfff17 	ldw	r2,-4(fp)
811154b4:	1090000c 	andi	r2,r2,16384
811154b8:	1005003a 	cmpeq	r2,r2,zero
811154bc:	10803fcc 	andi	r2,r2,255
811154c0:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
811154c4:	00001306 	br	81115514 <altera_avalon_uart_read+0x8c>
    {
      count++;
811154c8:	e0bff517 	ldw	r2,-44(fp)
811154cc:	10800044 	addi	r2,r2,1
811154d0:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
811154d4:	e0bffd17 	ldw	r2,-12(fp)
811154d8:	10c00044 	addi	r3,r2,1
811154dc:	e0fffd15 	stw	r3,-12(fp)
811154e0:	e0fffc17 	ldw	r3,-16(fp)
811154e4:	18c00217 	ldw	r3,8(r3)
811154e8:	e13ffc17 	ldw	r4,-16(fp)
811154ec:	20c7883a 	add	r3,r4,r3
811154f0:	18c00704 	addi	r3,r3,28
811154f4:	18c00003 	ldbu	r3,0(r3)
811154f8:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
811154fc:	e0bffc17 	ldw	r2,-16(fp)
81115500:	10800217 	ldw	r2,8(r2)
81115504:	10800044 	addi	r2,r2,1
81115508:	10c00fcc 	andi	r3,r2,63
8111550c:	e0bffc17 	ldw	r2,-16(fp)
81115510:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
81115514:	e0fff517 	ldw	r3,-44(fp)
81115518:	e0bffe17 	ldw	r2,-8(fp)
8111551c:	1880050e 	bge	r3,r2,81115534 <altera_avalon_uart_read+0xac>
81115520:	e0bffc17 	ldw	r2,-16(fp)
81115524:	10c00217 	ldw	r3,8(r2)
81115528:	e0bffc17 	ldw	r2,-16(fp)
8111552c:	10800317 	ldw	r2,12(r2)
81115530:	18bfe51e 	bne	r3,r2,811154c8 <__reset+0xfb0f54c8>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
81115534:	e0bff517 	ldw	r2,-44(fp)
81115538:	1000251e 	bne	r2,zero,811155d0 <altera_avalon_uart_read+0x148>
8111553c:	e0bffc17 	ldw	r2,-16(fp)
81115540:	10c00217 	ldw	r3,8(r2)
81115544:	e0bffc17 	ldw	r2,-16(fp)
81115548:	10800317 	ldw	r2,12(r2)
8111554c:	1880201e 	bne	r3,r2,811155d0 <altera_avalon_uart_read+0x148>
    {
      if (!block)
81115550:	e0bff617 	ldw	r2,-40(fp)
81115554:	1000071e 	bne	r2,zero,81115574 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
81115558:	111544c0 	call	8111544c <alt_get_errno>
8111555c:	1007883a 	mov	r3,r2
81115560:	008002c4 	movi	r2,11
81115564:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
81115568:	00800044 	movi	r2,1
8111556c:	e0bff405 	stb	r2,-48(fp)
        break;
81115570:	00001b06 	br	811155e0 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81115574:	0005303a 	rdctl	r2,status
81115578:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111557c:	e0fff917 	ldw	r3,-28(fp)
81115580:	00bfff84 	movi	r2,-2
81115584:	1884703a 	and	r2,r3,r2
81115588:	1001703a 	wrctl	status,r2
  
  return context;
8111558c:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
81115590:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
81115594:	e0bffc17 	ldw	r2,-16(fp)
81115598:	10800117 	ldw	r2,4(r2)
8111559c:	10c02014 	ori	r3,r2,128
811155a0:	e0bffc17 	ldw	r2,-16(fp)
811155a4:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
811155a8:	e0bffc17 	ldw	r2,-16(fp)
811155ac:	10800017 	ldw	r2,0(r2)
811155b0:	10800304 	addi	r2,r2,12
811155b4:	e0fffc17 	ldw	r3,-16(fp)
811155b8:	18c00117 	ldw	r3,4(r3)
811155bc:	10c00035 	stwio	r3,0(r2)
811155c0:	e0bff817 	ldw	r2,-32(fp)
811155c4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811155c8:	e0bffa17 	ldw	r2,-24(fp)
811155cc:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
811155d0:	e0bff517 	ldw	r2,-44(fp)
811155d4:	1000021e 	bne	r2,zero,811155e0 <altera_avalon_uart_read+0x158>
811155d8:	e0bffe17 	ldw	r2,-8(fp)
811155dc:	103fcd1e 	bne	r2,zero,81115514 <__reset+0xfb0f5514>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811155e0:	0005303a 	rdctl	r2,status
811155e4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811155e8:	e0fffb17 	ldw	r3,-20(fp)
811155ec:	00bfff84 	movi	r2,-2
811155f0:	1884703a 	and	r2,r3,r2
811155f4:	1001703a 	wrctl	status,r2
  
  return context;
811155f8:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
811155fc:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
81115600:	e0bffc17 	ldw	r2,-16(fp)
81115604:	10800117 	ldw	r2,4(r2)
81115608:	10c02014 	ori	r3,r2,128
8111560c:	e0bffc17 	ldw	r2,-16(fp)
81115610:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
81115614:	e0bffc17 	ldw	r2,-16(fp)
81115618:	10800017 	ldw	r2,0(r2)
8111561c:	10800304 	addi	r2,r2,12
81115620:	e0fffc17 	ldw	r3,-16(fp)
81115624:	18c00117 	ldw	r3,4(r3)
81115628:	10c00035 	stwio	r3,0(r2)
8111562c:	e0bff817 	ldw	r2,-32(fp)
81115630:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81115634:	e0bff717 	ldw	r2,-36(fp)
81115638:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
8111563c:	e0bff403 	ldbu	r2,-48(fp)
81115640:	10000226 	beq	r2,zero,8111564c <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
81115644:	00bffd44 	movi	r2,-11
81115648:	00000106 	br	81115650 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
8111564c:	e0bff517 	ldw	r2,-44(fp)
  }
}
81115650:	e037883a 	mov	sp,fp
81115654:	dfc00117 	ldw	ra,4(sp)
81115658:	df000017 	ldw	fp,0(sp)
8111565c:	dec00204 	addi	sp,sp,8
81115660:	f800283a 	ret

81115664 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81115664:	defffe04 	addi	sp,sp,-8
81115668:	dfc00115 	stw	ra,4(sp)
8111566c:	df000015 	stw	fp,0(sp)
81115670:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81115674:	d0a00b17 	ldw	r2,-32724(gp)
81115678:	10000326 	beq	r2,zero,81115688 <alt_get_errno+0x24>
8111567c:	d0a00b17 	ldw	r2,-32724(gp)
81115680:	103ee83a 	callr	r2
81115684:	00000106 	br	8111568c <alt_get_errno+0x28>
81115688:	d0a01a04 	addi	r2,gp,-32664
}
8111568c:	e037883a 	mov	sp,fp
81115690:	dfc00117 	ldw	ra,4(sp)
81115694:	df000017 	ldw	fp,0(sp)
81115698:	dec00204 	addi	sp,sp,8
8111569c:	f800283a 	ret

811156a0 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
811156a0:	defff204 	addi	sp,sp,-56
811156a4:	dfc00d15 	stw	ra,52(sp)
811156a8:	df000c15 	stw	fp,48(sp)
811156ac:	df000c04 	addi	fp,sp,48
811156b0:	e13ffc15 	stw	r4,-16(fp)
811156b4:	e17ffd15 	stw	r5,-12(fp)
811156b8:	e1bffe15 	stw	r6,-8(fp)
811156bc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
811156c0:	e0bffe17 	ldw	r2,-8(fp)
811156c4:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
811156c8:	e0bfff17 	ldw	r2,-4(fp)
811156cc:	1090000c 	andi	r2,r2,16384
811156d0:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
811156d4:	00003c06 	br	811157c8 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
811156d8:	e0bffc17 	ldw	r2,-16(fp)
811156dc:	10800517 	ldw	r2,20(r2)
811156e0:	10800044 	addi	r2,r2,1
811156e4:	10800fcc 	andi	r2,r2,63
811156e8:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
811156ec:	e0bffc17 	ldw	r2,-16(fp)
811156f0:	10c00417 	ldw	r3,16(r2)
811156f4:	e0bff717 	ldw	r2,-36(fp)
811156f8:	1880221e 	bne	r3,r2,81115784 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
811156fc:	e0bff517 	ldw	r2,-44(fp)
81115700:	10000526 	beq	r2,zero,81115718 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
81115704:	11156640 	call	81115664 <alt_get_errno>
81115708:	1007883a 	mov	r3,r2
8111570c:	008002c4 	movi	r2,11
81115710:	18800015 	stw	r2,0(r3)
        break;
81115714:	00002e06 	br	811157d0 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81115718:	0005303a 	rdctl	r2,status
8111571c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81115720:	e0fff917 	ldw	r3,-28(fp)
81115724:	00bfff84 	movi	r2,-2
81115728:	1884703a 	and	r2,r3,r2
8111572c:	1001703a 	wrctl	status,r2
  
  return context;
81115730:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
81115734:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
81115738:	e0bffc17 	ldw	r2,-16(fp)
8111573c:	10800117 	ldw	r2,4(r2)
81115740:	10c11014 	ori	r3,r2,1088
81115744:	e0bffc17 	ldw	r2,-16(fp)
81115748:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
8111574c:	e0bffc17 	ldw	r2,-16(fp)
81115750:	10800017 	ldw	r2,0(r2)
81115754:	10800304 	addi	r2,r2,12
81115758:	e0fffc17 	ldw	r3,-16(fp)
8111575c:	18c00117 	ldw	r3,4(r3)
81115760:	10c00035 	stwio	r3,0(r2)
81115764:	e0bff817 	ldw	r2,-32(fp)
81115768:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111576c:	e0bff617 	ldw	r2,-40(fp)
81115770:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
81115774:	e0bffc17 	ldw	r2,-16(fp)
81115778:	10c00417 	ldw	r3,16(r2)
8111577c:	e0bff717 	ldw	r2,-36(fp)
81115780:	18bffc26 	beq	r3,r2,81115774 <__reset+0xfb0f5774>
      }
    }

    count--;
81115784:	e0bff417 	ldw	r2,-48(fp)
81115788:	10bfffc4 	addi	r2,r2,-1
8111578c:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
81115790:	e0bffc17 	ldw	r2,-16(fp)
81115794:	10c00517 	ldw	r3,20(r2)
81115798:	e0bffd17 	ldw	r2,-12(fp)
8111579c:	11000044 	addi	r4,r2,1
811157a0:	e13ffd15 	stw	r4,-12(fp)
811157a4:	10800003 	ldbu	r2,0(r2)
811157a8:	1009883a 	mov	r4,r2
811157ac:	e0bffc17 	ldw	r2,-16(fp)
811157b0:	10c5883a 	add	r2,r2,r3
811157b4:	10801704 	addi	r2,r2,92
811157b8:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
811157bc:	e0bffc17 	ldw	r2,-16(fp)
811157c0:	e0fff717 	ldw	r3,-36(fp)
811157c4:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
811157c8:	e0bff417 	ldw	r2,-48(fp)
811157cc:	103fc21e 	bne	r2,zero,811156d8 <__reset+0xfb0f56d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811157d0:	0005303a 	rdctl	r2,status
811157d4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811157d8:	e0fffb17 	ldw	r3,-20(fp)
811157dc:	00bfff84 	movi	r2,-2
811157e0:	1884703a 	and	r2,r3,r2
811157e4:	1001703a 	wrctl	status,r2
  
  return context;
811157e8:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
811157ec:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
811157f0:	e0bffc17 	ldw	r2,-16(fp)
811157f4:	10800117 	ldw	r2,4(r2)
811157f8:	10c11014 	ori	r3,r2,1088
811157fc:	e0bffc17 	ldw	r2,-16(fp)
81115800:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
81115804:	e0bffc17 	ldw	r2,-16(fp)
81115808:	10800017 	ldw	r2,0(r2)
8111580c:	10800304 	addi	r2,r2,12
81115810:	e0fffc17 	ldw	r3,-16(fp)
81115814:	18c00117 	ldw	r3,4(r3)
81115818:	10c00035 	stwio	r3,0(r2)
8111581c:	e0bff817 	ldw	r2,-32(fp)
81115820:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81115824:	e0bffa17 	ldw	r2,-24(fp)
81115828:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
8111582c:	e0fffe17 	ldw	r3,-8(fp)
81115830:	e0bff417 	ldw	r2,-48(fp)
81115834:	1885c83a 	sub	r2,r3,r2
}
81115838:	e037883a 	mov	sp,fp
8111583c:	dfc00117 	ldw	ra,4(sp)
81115840:	df000017 	ldw	fp,0(sp)
81115844:	dec00204 	addi	sp,sp,8
81115848:	f800283a 	ret

8111584c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8111584c:	defffe04 	addi	sp,sp,-8
81115850:	dfc00115 	stw	ra,4(sp)
81115854:	df000015 	stw	fp,0(sp)
81115858:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8111585c:	d0a00b17 	ldw	r2,-32724(gp)
81115860:	10000326 	beq	r2,zero,81115870 <alt_get_errno+0x24>
81115864:	d0a00b17 	ldw	r2,-32724(gp)
81115868:	103ee83a 	callr	r2
8111586c:	00000106 	br	81115874 <alt_get_errno+0x28>
81115870:	d0a01a04 	addi	r2,gp,-32664
}
81115874:	e037883a 	mov	sp,fp
81115878:	dfc00117 	ldw	ra,4(sp)
8111587c:	df000017 	ldw	fp,0(sp)
81115880:	dec00204 	addi	sp,sp,8
81115884:	f800283a 	ret

81115888 <alt_msgdma_write_standard_descriptor>:
 */
static int alt_msgdma_write_standard_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_standard_descriptor *descriptor)
{
81115888:	defffc04 	addi	sp,sp,-16
8111588c:	df000315 	stw	fp,12(sp)
81115890:	df000304 	addi	fp,sp,12
81115894:	e13ffd15 	stw	r4,-12(fp)
81115898:	e17ffe15 	stw	r5,-8(fp)
8111589c:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
811158a0:	e0bffd17 	ldw	r2,-12(fp)
811158a4:	10800037 	ldwio	r2,0(r2)
811158a8:	1080010c 	andi	r2,r2,4
811158ac:	10000226 	beq	r2,zero,811158b8 <alt_msgdma_write_standard_descriptor+0x30>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
		is non-blocking*/
        return -ENOSPC;
811158b0:	00bff904 	movi	r2,-28
811158b4:	00001506 	br	8111590c <alt_msgdma_write_standard_descriptor+0x84>
    }

	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base, 
811158b8:	e0bfff17 	ldw	r2,-4(fp)
811158bc:	10800017 	ldw	r2,0(r2)
811158c0:	1007883a 	mov	r3,r2
811158c4:	e0bffe17 	ldw	r2,-8(fp)
811158c8:	10c00035 	stwio	r3,0(r2)
		(alt_u32)descriptor->read_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base, 
811158cc:	e0bffe17 	ldw	r2,-8(fp)
811158d0:	10800104 	addi	r2,r2,4
811158d4:	e0ffff17 	ldw	r3,-4(fp)
811158d8:	18c00117 	ldw	r3,4(r3)
811158dc:	10c00035 	stwio	r3,0(r2)
	(	alt_u32)descriptor->write_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base, 
811158e0:	e0bffe17 	ldw	r2,-8(fp)
811158e4:	10800204 	addi	r2,r2,8
811158e8:	e0ffff17 	ldw	r3,-4(fp)
811158ec:	18c00217 	ldw	r3,8(r3)
811158f0:	10c00035 	stwio	r3,0(r2)
		descriptor->transfer_length);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_STANDARD(descriptor_base, 
811158f4:	e0bffe17 	ldw	r2,-8(fp)
811158f8:	10800304 	addi	r2,r2,12
811158fc:	e0ffff17 	ldw	r3,-4(fp)
81115900:	18c00317 	ldw	r3,12(r3)
81115904:	10c00035 	stwio	r3,0(r2)
		descriptor->control);
        return 0;
81115908:	0005883a 	mov	r2,zero
}
8111590c:	e037883a 	mov	sp,fp
81115910:	df000017 	ldw	fp,0(sp)
81115914:	dec00104 	addi	sp,sp,4
81115918:	f800283a 	ret

8111591c <alt_msgdma_write_extended_descriptor>:
 */
static int alt_msgdma_write_extended_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_extended_descriptor *descriptor)
{
8111591c:	defffc04 	addi	sp,sp,-16
81115920:	df000315 	stw	fp,12(sp)
81115924:	df000304 	addi	fp,sp,12
81115928:	e13ffd15 	stw	r4,-12(fp)
8111592c:	e17ffe15 	stw	r5,-8(fp)
81115930:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
81115934:	e0bffd17 	ldw	r2,-12(fp)
81115938:	10800037 	ldwio	r2,0(r2)
8111593c:	1080010c 	andi	r2,r2,4
81115940:	10000226 	beq	r2,zero,8111594c <alt_msgdma_write_extended_descriptor+0x30>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
	is non-blocking*/
        return -ENOSPC;
81115944:	00bff904 	movi	r2,-28
81115948:	00003b06 	br	81115a38 <alt_msgdma_write_extended_descriptor+0x11c>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(
8111594c:	e0bfff17 	ldw	r2,-4(fp)
81115950:	10800017 	ldw	r2,0(r2)
81115954:	1007883a 	mov	r3,r2
81115958:	e0bffe17 	ldw	r2,-8(fp)
8111595c:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	(alt_u32)descriptor->read_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(
81115960:	e0bffe17 	ldw	r2,-8(fp)
81115964:	10800104 	addi	r2,r2,4
81115968:	e0ffff17 	ldw	r3,-4(fp)
8111596c:	18c00117 	ldw	r3,4(r3)
81115970:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
		(alt_u32)descriptor->write_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(
81115974:	e0bffe17 	ldw	r2,-8(fp)
81115978:	10800204 	addi	r2,r2,8
8111597c:	e0ffff17 	ldw	r3,-4(fp)
81115980:	18c00217 	ldw	r3,8(r3)
81115984:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(
81115988:	e0bffe17 	ldw	r2,-8(fp)
8111598c:	10800304 	addi	r2,r2,12
81115990:	e0ffff17 	ldw	r3,-4(fp)
81115994:	18c0030b 	ldhu	r3,12(r3)
81115998:	18ffffcc 	andi	r3,r3,65535
8111599c:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->sequence_number);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(
811159a0:	e0bffe17 	ldw	r2,-8(fp)
811159a4:	10800384 	addi	r2,r2,14
811159a8:	e0ffff17 	ldw	r3,-4(fp)
811159ac:	18c00383 	ldbu	r3,14(r3)
811159b0:	18c03fcc 	andi	r3,r3,255
811159b4:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(
811159b8:	e0bffe17 	ldw	r2,-8(fp)
811159bc:	108003c4 	addi	r2,r2,15
811159c0:	e0ffff17 	ldw	r3,-4(fp)
811159c4:	18c003c3 	ldbu	r3,15(r3)
811159c8:	18c03fcc 	andi	r3,r3,255
811159cc:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(
811159d0:	e0bffe17 	ldw	r2,-8(fp)
811159d4:	10800404 	addi	r2,r2,16
811159d8:	e0ffff17 	ldw	r3,-4(fp)
811159dc:	18c0040b 	ldhu	r3,16(r3)
811159e0:	18ffffcc 	andi	r3,r3,65535
811159e4:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(
811159e8:	e0bffe17 	ldw	r2,-8(fp)
811159ec:	10800484 	addi	r2,r2,18
811159f0:	e0ffff17 	ldw	r3,-4(fp)
811159f4:	18c0048b 	ldhu	r3,18(r3)
811159f8:	18ffffcc 	andi	r3,r3,65535
811159fc:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base, 0);
81115a00:	e0bffe17 	ldw	r2,-8(fp)
81115a04:	10800504 	addi	r2,r2,20
81115a08:	0007883a 	mov	r3,zero
81115a0c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base, 0);
81115a10:	e0bffe17 	ldw	r2,-8(fp)
81115a14:	10800604 	addi	r2,r2,24
81115a18:	0007883a 	mov	r3,zero
81115a1c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(
81115a20:	e0bffe17 	ldw	r2,-8(fp)
81115a24:	10800704 	addi	r2,r2,28
81115a28:	e0ffff17 	ldw	r3,-4(fp)
81115a2c:	18c00717 	ldw	r3,28(r3)
81115a30:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->control);
    return 0;
81115a34:	0005883a 	mov	r2,zero
}
81115a38:	e037883a 	mov	sp,fp
81115a3c:	df000017 	ldw	fp,0(sp)
81115a40:	dec00104 	addi	sp,sp,4
81115a44:	f800283a 	ret

81115a48 <alt_msgdma_irq>:
 * alt_msgdma_irq()
 *
 * Interrupt handler for the Modular Scatter-Gather DMA controller.
 */
static void alt_msgdma_irq(void *context)
{
81115a48:	defff804 	addi	sp,sp,-32
81115a4c:	dfc00715 	stw	ra,28(sp)
81115a50:	df000615 	stw	fp,24(sp)
81115a54:	df000604 	addi	fp,sp,24
81115a58:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev *dev = (alt_msgdma_dev *) context;
81115a5c:	e0bfff17 	ldw	r2,-4(fp)
81115a60:	e0bffa15 	stw	r2,-24(fp)
    alt_irq_context cpu_sr;
    alt_u32 temporary_control;

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
81115a64:	e0bffa17 	ldw	r2,-24(fp)
81115a68:	10801783 	ldbu	r2,94(r2)
81115a6c:	10803fcc 	andi	r2,r2,255
81115a70:	10001126 	beq	r2,zero,81115ab8 <alt_msgdma_irq+0x70>
    {
        temporary_control = 
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
81115a74:	e0bffa17 	ldw	r2,-24(fp)
81115a78:	10800617 	ldw	r2,24(r2)
81115a7c:	10800037 	ldwio	r2,0(r2)

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
    {
        temporary_control = 
81115a80:	1007883a 	mov	r3,r2
81115a84:	00bffdc4 	movi	r2,-9
81115a88:	1884703a 	and	r2,r3,r2
81115a8c:	e0bffb15 	stw	r2,-20(fp)
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				& ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
81115a90:	e0bffa17 	ldw	r2,-24(fp)
81115a94:	10800617 	ldw	r2,24(r2)
81115a98:	e0fffb17 	ldw	r3,-20(fp)
81115a9c:	10c00035 	stwio	r3,0(r2)
        		temporary_control);
        
        /* clear the IRQ status- W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base,
81115aa0:	e0bffa17 	ldw	r2,-24(fp)
81115aa4:	10800617 	ldw	r2,24(r2)
81115aa8:	10800404 	addi	r2,r2,16
81115aac:	00c00044 	movi	r3,1
81115ab0:	10c00035 	stwio	r3,0(r2)
81115ab4:	00001106 	br	81115afc <alt_msgdma_irq+0xb4>
        		ALT_MSGDMA_PREFETCHER_STATUS_IRQ_SET_MASK);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
81115ab8:	e0bffa17 	ldw	r2,-24(fp)
81115abc:	10800317 	ldw	r2,12(r2)
81115ac0:	10800104 	addi	r2,r2,4
81115ac4:	10800037 	ldwio	r2,0(r2)
81115ac8:	1007883a 	mov	r3,r2
81115acc:	00bffbc4 	movi	r2,-17
81115ad0:	1884703a 	and	r2,r3,r2
81115ad4:	e0bffb15 	stw	r2,-20(fp)
    			& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
81115ad8:	e0bffa17 	ldw	r2,-24(fp)
81115adc:	10800317 	ldw	r2,12(r2)
81115ae0:	10800104 	addi	r2,r2,4
81115ae4:	e0fffb17 	ldw	r3,-20(fp)
81115ae8:	10c00035 	stwio	r3,0(r2)
    	/* clear the IRQ status */
    	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
81115aec:	e0bffa17 	ldw	r2,-24(fp)
81115af0:	10800317 	ldw	r2,12(r2)
81115af4:	00c08004 	movi	r3,512
81115af8:	10c00035 	stwio	r3,0(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
81115afc:	e0bffa17 	ldw	r2,-24(fp)
81115b00:	10800b17 	ldw	r2,44(r2)
81115b04:	10001226 	beq	r2,zero,81115b50 <alt_msgdma_irq+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81115b08:	0005303a 	rdctl	r2,status
81115b0c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81115b10:	e0fffd17 	ldw	r3,-12(fp)
81115b14:	00bfff84 	movi	r2,-2
81115b18:	1884703a 	and	r2,r3,r2
81115b1c:	1001703a 	wrctl	status,r2
  
  return context;
81115b20:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
81115b24:	e0bffc15 	stw	r2,-16(fp)
        dev->callback (dev->callback_context);
81115b28:	e0bffa17 	ldw	r2,-24(fp)
81115b2c:	10800b17 	ldw	r2,44(r2)
81115b30:	e0fffa17 	ldw	r3,-24(fp)
81115b34:	18c00c17 	ldw	r3,48(r3)
81115b38:	1809883a 	mov	r4,r3
81115b3c:	103ee83a 	callr	r2
81115b40:	e0bffc17 	ldw	r2,-16(fp)
81115b44:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81115b48:	e0bffe17 	ldw	r2,-8(fp)
81115b4c:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
81115b50:	e0bffa17 	ldw	r2,-24(fp)
81115b54:	10801783 	ldbu	r2,94(r2)
81115b58:	10803fcc 	andi	r2,r2,255
81115b5c:	10000a26 	beq	r2,zero,81115b88 <alt_msgdma_irq+0x140>
    {
    	temporary_control = 
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
81115b60:	e0bffa17 	ldw	r2,-24(fp)
81115b64:	10800617 	ldw	r2,24(r2)
81115b68:	10800037 	ldwio	r2,0(r2)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
81115b6c:	10800214 	ori	r2,r2,8
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
    {
    	temporary_control = 
81115b70:	e0bffb15 	stw	r2,-20(fp)
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
    	
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
81115b74:	e0bffa17 	ldw	r2,-24(fp)
81115b78:	10800617 	ldw	r2,24(r2)
81115b7c:	e0fffb17 	ldw	r3,-20(fp)
81115b80:	10c00035 	stwio	r3,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
    }

    return;
81115b84:	00000c06 	br	81115bb8 <alt_msgdma_irq+0x170>
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
81115b88:	e0bffa17 	ldw	r2,-24(fp)
81115b8c:	10800317 	ldw	r2,12(r2)
81115b90:	10800104 	addi	r2,r2,4
81115b94:	10800037 	ldwio	r2,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
81115b98:	10800414 	ori	r2,r2,16
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
81115b9c:	e0bffb15 	stw	r2,-20(fp)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
81115ba0:	e0bffa17 	ldw	r2,-24(fp)
81115ba4:	10800317 	ldw	r2,12(r2)
81115ba8:	10800104 	addi	r2,r2,4
81115bac:	e0fffb17 	ldw	r3,-20(fp)
81115bb0:	10c00035 	stwio	r3,0(r2)
    }

    return;
81115bb4:	0001883a 	nop
}
81115bb8:	e037883a 	mov	sp,fp
81115bbc:	dfc00117 	ldw	ra,4(sp)
81115bc0:	df000017 	ldw	fp,0(sp)
81115bc4:	dec00204 	addi	sp,sp,8
81115bc8:	f800283a 	ret

81115bcc <alt_msgdma_construct_standard_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
81115bcc:	defffb04 	addi	sp,sp,-20
81115bd0:	df000415 	stw	fp,16(sp)
81115bd4:	df000404 	addi	fp,sp,16
81115bd8:	e13ffc15 	stw	r4,-16(fp)
81115bdc:	e17ffd15 	stw	r5,-12(fp)
81115be0:	e1bffe15 	stw	r6,-8(fp)
81115be4:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
81115be8:	e0bffc17 	ldw	r2,-16(fp)
81115bec:	10c01217 	ldw	r3,72(r2)
81115bf0:	e0800117 	ldw	r2,4(fp)
81115bf4:	18800436 	bltu	r3,r2,81115c08 <alt_msgdma_construct_standard_descriptor+0x3c>
       dev->enhanced_features != 0
81115bf8:	e0bffc17 	ldw	r2,-16(fp)
81115bfc:	10801703 	ldbu	r2,92(r2)
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
81115c00:	10803fcc 	andi	r2,r2,255
81115c04:	10000226 	beq	r2,zero,81115c10 <alt_msgdma_construct_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
81115c08:	00bffa84 	movi	r2,-22
81115c0c:	00000e06 	br	81115c48 <alt_msgdma_construct_standard_descriptor+0x7c>
    }
    descriptor->read_address = read_address;
81115c10:	e0bffd17 	ldw	r2,-12(fp)
81115c14:	e0fffe17 	ldw	r3,-8(fp)
81115c18:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
81115c1c:	e0bffd17 	ldw	r2,-12(fp)
81115c20:	e0ffff17 	ldw	r3,-4(fp)
81115c24:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
81115c28:	e0bffd17 	ldw	r2,-12(fp)
81115c2c:	e0c00117 	ldw	r3,4(fp)
81115c30:	10c00215 	stw	r3,8(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
81115c34:	e0800217 	ldw	r2,8(fp)
81115c38:	10e00034 	orhi	r3,r2,32768
81115c3c:	e0bffd17 	ldw	r2,-12(fp)
81115c40:	10c00315 	stw	r3,12(r2)
    
    return 0;
81115c44:	0005883a 	mov	r2,zero
}
81115c48:	e037883a 	mov	sp,fp
81115c4c:	df000017 	ldw	fp,0(sp)
81115c50:	dec00104 	addi	sp,sp,4
81115c54:	f800283a 	ret

81115c58 <alt_msgdma_construct_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
81115c58:	defff604 	addi	sp,sp,-40
81115c5c:	df000915 	stw	fp,36(sp)
81115c60:	df000904 	addi	fp,sp,36
81115c64:	e13ff715 	stw	r4,-36(fp)
81115c68:	e17ff815 	stw	r5,-32(fp)
81115c6c:	e1bff915 	stw	r6,-28(fp)
81115c70:	e1fffa15 	stw	r7,-24(fp)
81115c74:	e1800317 	ldw	r6,12(fp)
81115c78:	e1400417 	ldw	r5,16(fp)
81115c7c:	e1000517 	ldw	r4,20(fp)
81115c80:	e0c00617 	ldw	r3,24(fp)
81115c84:	e0800717 	ldw	r2,28(fp)
81115c88:	e1bffb0d 	sth	r6,-20(fp)
81115c8c:	e17ffc05 	stb	r5,-16(fp)
81115c90:	e13ffd05 	stb	r4,-12(fp)
81115c94:	e0fffe0d 	sth	r3,-8(fp)
81115c98:	e0bfff0d 	sth	r2,-4(fp)
    if(dev->max_byte < length ||
81115c9c:	e0bff717 	ldw	r2,-36(fp)
81115ca0:	10c01217 	ldw	r3,72(r2)
81115ca4:	e0800117 	ldw	r2,4(fp)
81115ca8:	18801936 	bltu	r3,r2,81115d10 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
81115cac:	e13ff717 	ldw	r4,-36(fp)
81115cb0:	20801317 	ldw	r2,76(r4)
81115cb4:	20c01417 	ldw	r3,80(r4)
81115cb8:	e13ffe0b 	ldhu	r4,-8(fp)
81115cbc:	213fffcc 	andi	r4,r4,65535
81115cc0:	2015883a 	mov	r10,r4
81115cc4:	0017883a 	mov	r11,zero
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
81115cc8:	1ac01136 	bltu	r3,r11,81115d10 <alt_msgdma_construct_extended_descriptor+0xb8>
81115ccc:	58c0011e 	bne	r11,r3,81115cd4 <alt_msgdma_construct_extended_descriptor+0x7c>
81115cd0:	12800f36 	bltu	r2,r10,81115d10 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
81115cd4:	e13ff717 	ldw	r4,-36(fp)
81115cd8:	20801317 	ldw	r2,76(r4)
81115cdc:	20c01417 	ldw	r3,80(r4)
81115ce0:	e13fff0b 	ldhu	r4,-4(fp)
81115ce4:	213fffcc 	andi	r4,r4,65535
81115ce8:	2011883a 	mov	r8,r4
81115cec:	0013883a 	mov	r9,zero
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
81115cf0:	1a400736 	bltu	r3,r9,81115d10 <alt_msgdma_construct_extended_descriptor+0xb8>
81115cf4:	48c0011e 	bne	r9,r3,81115cfc <alt_msgdma_construct_extended_descriptor+0xa4>
81115cf8:	12000536 	bltu	r2,r8,81115d10 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
81115cfc:	e0bff717 	ldw	r2,-36(fp)
81115d00:	10801703 	ldbu	r2,92(r2)
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
81115d04:	10803fcc 	andi	r2,r2,255
81115d08:	10800060 	cmpeqi	r2,r2,1
81115d0c:	1000021e 	bne	r2,zero,81115d18 <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
81115d10:	00bffa84 	movi	r2,-22
81115d14:	00002106 	br	81115d9c <alt_msgdma_construct_extended_descriptor+0x144>
    }
    
    descriptor->read_address_low = read_address;
81115d18:	e0bff817 	ldw	r2,-32(fp)
81115d1c:	e0fff917 	ldw	r3,-28(fp)
81115d20:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_low = write_address;
81115d24:	e0bff817 	ldw	r2,-32(fp)
81115d28:	e0fffa17 	ldw	r3,-24(fp)
81115d2c:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
81115d30:	e0bff817 	ldw	r2,-32(fp)
81115d34:	e0c00117 	ldw	r3,4(fp)
81115d38:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
81115d3c:	e0bff817 	ldw	r2,-32(fp)
81115d40:	e0fffb0b 	ldhu	r3,-20(fp)
81115d44:	10c0030d 	sth	r3,12(r2)
    descriptor->read_burst_count = read_burst_count;
81115d48:	e0bff817 	ldw	r2,-32(fp)
81115d4c:	e0fffc03 	ldbu	r3,-16(fp)
81115d50:	10c00385 	stb	r3,14(r2)
    descriptor->write_burst_count = write_burst_count;
81115d54:	e0bff817 	ldw	r2,-32(fp)
81115d58:	e0fffd03 	ldbu	r3,-12(fp)
81115d5c:	10c003c5 	stb	r3,15(r2)
    descriptor->read_stride = read_stride;
81115d60:	e0bff817 	ldw	r2,-32(fp)
81115d64:	e0fffe0b 	ldhu	r3,-8(fp)
81115d68:	10c0040d 	sth	r3,16(r2)
    descriptor->write_stride = write_stride;
81115d6c:	e0bff817 	ldw	r2,-32(fp)
81115d70:	e0ffff0b 	ldhu	r3,-4(fp)
81115d74:	10c0048d 	sth	r3,18(r2)
    descriptor->read_address_high = NULL;
81115d78:	e0bff817 	ldw	r2,-32(fp)
81115d7c:	10000515 	stw	zero,20(r2)
    descriptor->write_address_high = NULL;
81115d80:	e0bff817 	ldw	r2,-32(fp)
81115d84:	10000615 	stw	zero,24(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
81115d88:	e0800217 	ldw	r2,8(fp)
81115d8c:	10e00034 	orhi	r3,r2,32768
81115d90:	e0bff817 	ldw	r2,-32(fp)
81115d94:	10c00715 	stw	r3,28(r2)

  return 0 ;
81115d98:	0005883a 	mov	r2,zero

}
81115d9c:	e037883a 	mov	sp,fp
81115da0:	df000017 	ldw	fp,0(sp)
81115da4:	dec00104 	addi	sp,sp,4
81115da8:	f800283a 	ret

81115dac <alt_msgdma_descriptor_async_transfer>:
 */
static int alt_msgdma_descriptor_async_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
81115dac:	defff004 	addi	sp,sp,-64
81115db0:	dfc00f15 	stw	ra,60(sp)
81115db4:	df000e15 	stw	fp,56(sp)
81115db8:	df000e04 	addi	fp,sp,56
81115dbc:	e13ffd15 	stw	r4,-12(fp)
81115dc0:	e17ffe15 	stw	r5,-8(fp)
81115dc4:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control = 0;
81115dc8:	e03ff315 	stw	zero,-52(fp)
    alt_irq_context context = 0;
81115dcc:	e03ff415 	stw	zero,-48(fp)
    alt_u16 counter = 0;
81115dd0:	e03ff20d 	sth	zero,-56(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
81115dd4:	e0bffd17 	ldw	r2,-12(fp)
81115dd8:	10800317 	ldw	r2,12(r2)
81115ddc:	10800204 	addi	r2,r2,8
81115de0:	10800037 	ldwio	r2,0(r2)
	alt_msgdma_extended_descriptor *extended_desc)
{
    alt_u32 control = 0;
    alt_irq_context context = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
81115de4:	10bfffcc 	andi	r2,r2,65535
81115de8:	e0bff515 	stw	r2,-44(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
81115dec:	e0bffd17 	ldw	r2,-12(fp)
81115df0:	10800317 	ldw	r2,12(r2)
81115df4:	10800204 	addi	r2,r2,8
81115df8:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
81115dfc:	1004d43a 	srli	r2,r2,16
81115e00:	e0bff615 	stw	r2,-40(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
81115e04:	e0bffd17 	ldw	r2,-12(fp)
81115e08:	10800917 	ldw	r2,36(r2)
81115e0c:	e0fff617 	ldw	r3,-40(fp)
81115e10:	1880042e 	bgeu	r3,r2,81115e24 <alt_msgdma_descriptor_async_transfer+0x78>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
81115e14:	e0bffd17 	ldw	r2,-12(fp)
81115e18:	10800917 	ldw	r2,36(r2)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
81115e1c:	e0fff517 	ldw	r3,-44(fp)
81115e20:	18800236 	bltu	r3,r2,81115e2c <alt_msgdma_descriptor_async_transfer+0x80>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
	{
		/*at least one write or read FIFO descriptor buffer is full,
		returning so that this function is non-blocking*/
		return -ENOSPC;
81115e24:	00bff904 	movi	r2,-28
81115e28:	00008f06 	br	81116068 <alt_msgdma_descriptor_async_transfer+0x2bc>
	ALT_SEM_PEND (dev->regs_lock, 0);
	
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	read or write masters  */
	/* stop issuing more descriptors */
	control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
81115e2c:	00800804 	movi	r2,32
81115e30:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81115e34:	0005303a 	rdctl	r2,status
81115e38:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81115e3c:	e0fff717 	ldw	r3,-36(fp)
81115e40:	00bfff84 	movi	r2,-2
81115e44:	1884703a 	and	r2,r3,r2
81115e48:	1001703a 	wrctl	status,r2
  
  return context;
81115e4c:	e0bff717 	ldw	r2,-36(fp)
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
81115e50:	e0bff415 	stw	r2,-48(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81115e54:	e0bffd17 	ldw	r2,-12(fp)
81115e58:	10800317 	ldw	r2,12(r2)
81115e5c:	10800104 	addi	r2,r2,4
81115e60:	e0fff317 	ldw	r3,-52(fp)
81115e64:	10c00035 	stwio	r3,0(r2)
	/*
	* Clear any (previous) status register information
	* that might occlude our error checking later.
	*/
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
81115e68:	e0bffd17 	ldw	r2,-12(fp)
81115e6c:	10800317 	ldw	r2,12(r2)
81115e70:	e0fffd17 	ldw	r3,-12(fp)
81115e74:	18c00317 	ldw	r3,12(r3)
81115e78:	18c00037 	ldwio	r3,0(r3)
81115e7c:	10c00035 	stwio	r3,0(r2)
81115e80:	e0bff417 	ldw	r2,-48(fp)
81115e84:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81115e88:	e0bffc17 	ldw	r2,-16(fp)
81115e8c:	1001703a 	wrctl	status,r2
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
81115e90:	e0bffe17 	ldw	r2,-8(fp)
81115e94:	10001a26 	beq	r2,zero,81115f00 <alt_msgdma_descriptor_async_transfer+0x154>
81115e98:	e0bfff17 	ldw	r2,-4(fp)
81115e9c:	1000181e 	bne	r2,zero,81115f00 <alt_msgdma_descriptor_async_transfer+0x154>
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
81115ea0:	00000d06 	br	81115ed8 <alt_msgdma_descriptor_async_transfer+0x12c>
		dev->csr_base, dev->descriptor_base, standard_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
81115ea4:	01000044 	movi	r4,1
81115ea8:	11177f40 	call	811177f4 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
81115eac:	e0bff20b 	ldhu	r2,-56(fp)
81115eb0:	1084e230 	cmpltui	r2,r2,5000
81115eb4:	1000051e 	bne	r2,zero,81115ecc <alt_msgdma_descriptor_async_transfer+0x120>
            {
                alt_printf("time out after 5 msec while waiting" 
81115eb8:	012044b4 	movhi	r4,33042
81115ebc:	21272a04 	addi	r4,r4,-25432
81115ec0:	11181800 	call	81118180 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
81115ec4:	00bff084 	movi	r2,-62
81115ec8:	00006706 	br	81116068 <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
81115ecc:	e0bff20b 	ldhu	r2,-56(fp)
81115ed0:	10800044 	addi	r2,r2,1
81115ed4:	e0bff20d 	sth	r2,-56(fp)

    if (NULL != standard_desc && NULL == extended_desc)
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
81115ed8:	e0bffd17 	ldw	r2,-12(fp)
81115edc:	10c00317 	ldw	r3,12(r2)
81115ee0:	e0bffd17 	ldw	r2,-12(fp)
81115ee4:	10800417 	ldw	r2,16(r2)
81115ee8:	e1bffe17 	ldw	r6,-8(fp)
81115eec:	100b883a 	mov	r5,r2
81115ef0:	1809883a 	mov	r4,r3
81115ef4:	11158880 	call	81115888 <alt_msgdma_write_standard_descriptor>
81115ef8:	103fea1e 	bne	r2,zero,81115ea4 <__reset+0xfb0f5ea4>
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
81115efc:	00001f06 	br	81115f7c <alt_msgdma_descriptor_async_transfer+0x1d0>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
81115f00:	e0bffe17 	ldw	r2,-8(fp)
81115f04:	10001b1e 	bne	r2,zero,81115f74 <alt_msgdma_descriptor_async_transfer+0x1c8>
81115f08:	e0bfff17 	ldw	r2,-4(fp)
81115f0c:	10001926 	beq	r2,zero,81115f74 <alt_msgdma_descriptor_async_transfer+0x1c8>
    {
        counter = 0; /* reset counter */
81115f10:	e03ff20d 	sth	zero,-56(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
81115f14:	00000d06 	br	81115f4c <alt_msgdma_descriptor_async_transfer+0x1a0>
		dev->csr_base, 
		dev->descriptor_base, 
		extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
81115f18:	01000044 	movi	r4,1
81115f1c:	11177f40 	call	811177f4 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
81115f20:	e0bff20b 	ldhu	r2,-56(fp)
81115f24:	1084e230 	cmpltui	r2,r2,5000
81115f28:	1000051e 	bne	r2,zero,81115f40 <alt_msgdma_descriptor_async_transfer+0x194>
            {
                alt_printf("time out after 5 msec while waiting free FIFO buffer" 
81115f2c:	012044b4 	movhi	r4,33042
81115f30:	21274004 	addi	r4,r4,-25344
81115f34:	11181800 	call	81118180 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
81115f38:	00bff084 	movi	r2,-62
81115f3c:	00004a06 	br	81116068 <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
81115f40:	e0bff20b 	ldhu	r2,-56(fp)
81115f44:	10800044 	addi	r2,r2,1
81115f48:	e0bff20d 	sth	r2,-56(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
81115f4c:	e0bffd17 	ldw	r2,-12(fp)
81115f50:	10c00317 	ldw	r3,12(r2)
81115f54:	e0bffd17 	ldw	r2,-12(fp)
81115f58:	10800417 	ldw	r2,16(r2)
81115f5c:	e1bfff17 	ldw	r6,-4(fp)
81115f60:	100b883a 	mov	r5,r2
81115f64:	1809883a 	mov	r4,r3
81115f68:	111591c0 	call	8111591c <alt_msgdma_write_extended_descriptor>
81115f6c:	103fea1e 	bne	r2,zero,81115f18 <__reset+0xfb0f5f18>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
81115f70:	00000206 	br	81115f7c <alt_msgdma_descriptor_async_transfer+0x1d0>
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
81115f74:	00bfffc4 	movi	r2,-1
81115f78:	00003b06 	br	81116068 <alt_msgdma_descriptor_async_transfer+0x2bc>
    * If a callback routine has been previously registered which will be
    * called from the msgdma ISR. Set up controller to:
    *  - Run
    *  - Stop on an error with any particular descriptor
    */
    if(dev->callback)
81115f7c:	e0bffd17 	ldw	r2,-12(fp)
81115f80:	10800b17 	ldw	r2,44(r2)
81115f84:	10001c26 	beq	r2,zero,81115ff8 <alt_msgdma_descriptor_async_transfer+0x24c>
    {

        control |= (dev->control |
81115f88:	e0bffd17 	ldw	r2,-12(fp)
81115f8c:	10c00d17 	ldw	r3,52(r2)
81115f90:	e0bff317 	ldw	r2,-52(fp)
81115f94:	1884b03a 	or	r2,r3,r2
81115f98:	10800514 	ori	r2,r2,20
81115f9c:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
                    ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
81115fa0:	e0fff317 	ldw	r3,-52(fp)
81115fa4:	00bff7c4 	movi	r2,-33
81115fa8:	1884703a 	and	r2,r3,r2
81115fac:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81115fb0:	0005303a 	rdctl	r2,status
81115fb4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81115fb8:	e0fffa17 	ldw	r3,-24(fp)
81115fbc:	00bfff84 	movi	r2,-2
81115fc0:	1884703a 	and	r2,r3,r2
81115fc4:	1001703a 	wrctl	status,r2
  
  return context;
81115fc8:	e0bffa17 	ldw	r2,-24(fp)
    /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
81115fcc:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81115fd0:	e0bffd17 	ldw	r2,-12(fp)
81115fd4:	10800317 	ldw	r2,12(r2)
81115fd8:	10800104 	addi	r2,r2,4
81115fdc:	e0fff317 	ldw	r3,-52(fp)
81115fe0:	10c00035 	stwio	r3,0(r2)
81115fe4:	e0bff417 	ldw	r2,-48(fp)
81115fe8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81115fec:	e0bff817 	ldw	r2,-32(fp)
81115ff0:	1001703a 	wrctl	status,r2
81115ff4:	00001b06 	br	81116064 <alt_msgdma_descriptor_async_transfer+0x2b8>
    *   - Stop on an error with any particular descriptor
    *   - Disable interrupt generation
    */
    else
    {
        control |= (dev->control |
81115ff8:	e0bffd17 	ldw	r2,-12(fp)
81115ffc:	10c00d17 	ldw	r3,52(r2)
81116000:	e0bff317 	ldw	r2,-52(fp)
81116004:	1884b03a 	or	r2,r3,r2
81116008:	10800114 	ori	r2,r2,4
8111600c:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK );
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
81116010:	e0fff317 	ldw	r3,-52(fp)
81116014:	00bff3c4 	movi	r2,-49
81116018:	1884703a 	and	r2,r3,r2
8111601c:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81116020:	0005303a 	rdctl	r2,status
81116024:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81116028:	e0fffb17 	ldw	r3,-20(fp)
8111602c:	00bfff84 	movi	r2,-2
81116030:	1884703a 	and	r2,r3,r2
81116034:	1001703a 	wrctl	status,r2
  
  return context;
81116038:	e0bffb17 	ldw	r2,-20(fp)
                   (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all();
8111603c:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81116040:	e0bffd17 	ldw	r2,-12(fp)
81116044:	10800317 	ldw	r2,12(r2)
81116048:	10800104 	addi	r2,r2,4
8111604c:	e0fff317 	ldw	r3,-52(fp)
81116050:	10c00035 	stwio	r3,0(r2)
81116054:	e0bff417 	ldw	r2,-48(fp)
81116058:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111605c:	e0bff917 	ldw	r2,-28(fp)
81116060:	1001703a 	wrctl	status,r2
	 * Now that access to the registers is complete, release the registers
     * semaphore so that other threads can access the registers.
     */
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
81116064:	0005883a 	mov	r2,zero
}
81116068:	e037883a 	mov	sp,fp
8111606c:	dfc00117 	ldw	ra,4(sp)
81116070:	df000017 	ldw	fp,0(sp)
81116074:	dec00204 	addi	sp,sp,8
81116078:	f800283a 	ret

8111607c <alt_msgdma_descriptor_sync_transfer>:
 */
static int alt_msgdma_descriptor_sync_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
8111607c:	defff004 	addi	sp,sp,-64
81116080:	dfc00f15 	stw	ra,60(sp)
81116084:	df000e15 	stw	fp,56(sp)
81116088:	df000e04 	addi	fp,sp,56
8111608c:	e13ffd15 	stw	r4,-12(fp)
81116090:	e17ffe15 	stw	r5,-8(fp)
81116094:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control=0;
81116098:	e03ff615 	stw	zero,-40(fp)
    alt_irq_context context=0;
8111609c:	e03ff715 	stw	zero,-36(fp)
    alt_u32 csr_status = 0;
811160a0:	e03ff215 	stw	zero,-56(fp)
    alt_u16 counter = 0;
811160a4:	e03ff30d 	sth	zero,-52(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
811160a8:	e0bffd17 	ldw	r2,-12(fp)
811160ac:	10800317 	ldw	r2,12(r2)
811160b0:	10800204 	addi	r2,r2,8
811160b4:	10800037 	ldwio	r2,0(r2)
{
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
811160b8:	10bfffcc 	andi	r2,r2,65535
811160bc:	e0bff415 	stw	r2,-48(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
811160c0:	e0bffd17 	ldw	r2,-12(fp)
811160c4:	10800317 	ldw	r2,12(r2)
811160c8:	10800204 	addi	r2,r2,8
811160cc:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
811160d0:	1004d43a 	srli	r2,r2,16
811160d4:	e0bff515 	stw	r2,-44(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
    alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK | 
811160d8:	00807804 	movi	r2,480
811160dc:	e0bff815 	stw	r2,-32(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
811160e0:	00001906 	br	81116148 <alt_msgdma_descriptor_sync_transfer+0xcc>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
811160e4:	01000044 	movi	r4,1
811160e8:	11177f40 	call	811177f4 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
811160ec:	e0bff30b 	ldhu	r2,-52(fp)
811160f0:	1084e230 	cmpltui	r2,r2,5000
811160f4:	1000051e 	bne	r2,zero,8111610c <alt_msgdma_descriptor_sync_transfer+0x90>
        {
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
811160f8:	012044b4 	movhi	r4,33042
811160fc:	21275604 	addi	r4,r4,-25256
81116100:	11181800 	call	81118180 <alt_printf>
				" for storing descriptor\n");
            return -ETIME;
81116104:	00bff084 	movi	r2,-62
81116108:	0000b506 	br	811163e0 <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;  
8111610c:	e0bff30b 	ldhu	r2,-52(fp)
81116110:	10800044 	addi	r2,r2,1
81116114:	e0bff30d 	sth	r2,-52(fp)
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
81116118:	e0bffd17 	ldw	r2,-12(fp)
8111611c:	10800317 	ldw	r2,12(r2)
81116120:	10800204 	addi	r2,r2,8
81116124:	10800037 	ldwio	r2,0(r2)
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
				" for storing descriptor\n");
            return -ETIME;
        }
        counter++;  
        fifo_read_fill_level = (
81116128:	10bfffcc 	andi	r2,r2,65535
8111612c:	e0bff415 	stw	r2,-48(fp)
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
81116130:	e0bffd17 	ldw	r2,-12(fp)
81116134:	10800317 	ldw	r2,12(r2)
81116138:	10800204 	addi	r2,r2,8
8111613c:	10800037 	ldwio	r2,0(r2)
        counter++;  
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
81116140:	1004d43a 	srli	r2,r2,16
81116144:	e0bff515 	stw	r2,-44(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
81116148:	e0bffd17 	ldw	r2,-12(fp)
8111614c:	10800917 	ldw	r2,36(r2)
81116150:	e0fff517 	ldw	r3,-44(fp)
81116154:	18bfe32e 	bgeu	r3,r2,811160e4 <__reset+0xfb0f60e4>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
81116158:	e0bffd17 	ldw	r2,-12(fp)
8111615c:	10800917 	ldw	r2,36(r2)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
81116160:	e0fff417 	ldw	r3,-48(fp)
81116164:	18bfdf2e 	bgeu	r3,r2,811160e4 <__reset+0xfb0f60e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81116168:	0005303a 	rdctl	r2,status
8111616c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81116170:	e0fffc17 	ldw	r3,-16(fp)
81116174:	00bfff84 	movi	r2,-2
81116178:	1884703a 	and	r2,r3,r2
8111617c:	1001703a 	wrctl	status,r2
  
  return context;
81116180:	e0bffc17 	ldw	r2,-16(fp)
	ALT_SEM_PEND (dev->regs_lock, 0);
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
81116184:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
81116188:	e0bffd17 	ldw	r2,-12(fp)
8111618c:	10800317 	ldw	r2,12(r2)
81116190:	10800104 	addi	r2,r2,4
81116194:	00c00804 	movi	r3,32
81116198:	10c00035 	stwio	r3,0(r2)
        ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
8111619c:	e0bffd17 	ldw	r2,-12(fp)
811161a0:	10800317 	ldw	r2,12(r2)
811161a4:	e0fffd17 	ldw	r3,-12(fp)
811161a8:	18c00317 	ldw	r3,12(r3)
811161ac:	18c00037 	ldwio	r3,0(r3)
811161b0:	10c00035 	stwio	r3,0(r2)
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
811161b4:	e0bffe17 	ldw	r2,-8(fp)
811161b8:	10001b26 	beq	r2,zero,81116228 <alt_msgdma_descriptor_sync_transfer+0x1ac>
811161bc:	e0bfff17 	ldw	r2,-4(fp)
811161c0:	1000191e 	bne	r2,zero,81116228 <alt_msgdma_descriptor_sync_transfer+0x1ac>
    {
        counter = 0; /* reset counter */
811161c4:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
811161c8:	00000d06 	br	81116200 <alt_msgdma_descriptor_sync_transfer+0x184>
			dev->csr_base, dev->descriptor_base, standard_desc))
        {     
            alt_busy_sleep(1); /* delay 1us */
811161cc:	01000044 	movi	r4,1
811161d0:	11177f40 	call	811177f4 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
811161d4:	e0bff30b 	ldhu	r2,-52(fp)
811161d8:	1084e230 	cmpltui	r2,r2,5000
811161dc:	1000051e 	bne	r2,zero,811161f4 <alt_msgdma_descriptor_sync_transfer+0x178>
            {
                alt_printf("time out after 5 msec while writing standard" 
811161e0:	012044b4 	movhi	r4,33042
811161e4:	21276a04 	addi	r4,r4,-25176
811161e8:	11181800 	call	81118180 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
811161ec:	00bff084 	movi	r2,-62
811161f0:	00007b06 	br	811163e0 <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;    
811161f4:	e0bff30b 	ldhu	r2,-52(fp)
811161f8:	10800044 	addi	r2,r2,1
811161fc:	e0bff30d 	sth	r2,-52(fp)
    if (NULL != standard_desc && NULL == extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
81116200:	e0bffd17 	ldw	r2,-12(fp)
81116204:	10c00317 	ldw	r3,12(r2)
81116208:	e0bffd17 	ldw	r2,-12(fp)
8111620c:	10800417 	ldw	r2,16(r2)
81116210:	e1bffe17 	ldw	r6,-8(fp)
81116214:	100b883a 	mov	r5,r2
81116218:	1809883a 	mov	r4,r3
8111621c:	11158880 	call	81115888 <alt_msgdma_write_standard_descriptor>
81116220:	103fea1e 	bne	r2,zero,811161cc <__reset+0xfb0f61cc>
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
81116224:	00001f06 	br	811162a4 <alt_msgdma_descriptor_sync_transfer+0x228>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
81116228:	e0bffe17 	ldw	r2,-8(fp)
8111622c:	10001b1e 	bne	r2,zero,8111629c <alt_msgdma_descriptor_sync_transfer+0x220>
81116230:	e0bfff17 	ldw	r2,-4(fp)
81116234:	10001926 	beq	r2,zero,8111629c <alt_msgdma_descriptor_sync_transfer+0x220>
    {
        counter = 0; /* reset counter */
81116238:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
8111623c:	00000d06 	br	81116274 <alt_msgdma_descriptor_sync_transfer+0x1f8>
			dev->csr_base, dev->descriptor_base, extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
81116240:	01000044 	movi	r4,1
81116244:	11177f40 	call	811177f4 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
81116248:	e0bff30b 	ldhu	r2,-52(fp)
8111624c:	1084e230 	cmpltui	r2,r2,5000
81116250:	1000051e 	bne	r2,zero,81116268 <alt_msgdma_descriptor_sync_transfer+0x1ec>
            {
                alt_printf("time out after 5 msec while writing extended" 
81116254:	012044b4 	movhi	r4,33042
81116258:	21277b04 	addi	r4,r4,-25108
8111625c:	11181800 	call	81118180 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
81116260:	00bff084 	movi	r2,-62
81116264:	00005e06 	br	811163e0 <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;
81116268:	e0bff30b 	ldhu	r2,-52(fp)
8111626c:	10800044 	addi	r2,r2,1
81116270:	e0bff30d 	sth	r2,-52(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
81116274:	e0bffd17 	ldw	r2,-12(fp)
81116278:	10c00317 	ldw	r3,12(r2)
8111627c:	e0bffd17 	ldw	r2,-12(fp)
81116280:	10800417 	ldw	r2,16(r2)
81116284:	e1bfff17 	ldw	r6,-4(fp)
81116288:	100b883a 	mov	r5,r2
8111628c:	1809883a 	mov	r4,r3
81116290:	111591c0 	call	8111591c <alt_msgdma_write_extended_descriptor>
81116294:	103fea1e 	bne	r2,zero,81116240 <__reset+0xfb0f6240>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
81116298:	00000206 	br	811162a4 <alt_msgdma_descriptor_sync_transfer+0x228>
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
8111629c:	00bfffc4 	movi	r2,-1
811162a0:	00004f06 	br	811163e0 <alt_msgdma_descriptor_sync_transfer+0x364>
    * Set up msgdma controller to:
    * - Disable interrupt generation
    * - Run once a valid descriptor is written to controller
    * - Stop on an error with any particular descriptor
    */
     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
811162a4:	e0bffd17 	ldw	r2,-12(fp)
811162a8:	10800317 	ldw	r2,12(r2)
811162ac:	10800104 	addi	r2,r2,4
811162b0:	e0fffd17 	ldw	r3,-12(fp)
811162b4:	19000d17 	ldw	r4,52(r3)
811162b8:	00fff2c4 	movi	r3,-53
811162bc:	20c6703a 	and	r3,r4,r3
811162c0:	18c00114 	ori	r3,r3,4
811162c4:	10c00035 	stwio	r3,0(r2)
811162c8:	e0bff717 	ldw	r2,-36(fp)
811162cc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811162d0:	e0bff917 	ldw	r2,-28(fp)
811162d4:	1001703a 	wrctl	status,r2
		(~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
		(~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK)) ;
	 
	alt_irq_enable_all(context);
     
    counter = 0; /* reset counter */ 
811162d8:	e03ff30d 	sth	zero,-52(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
811162dc:	e0bffd17 	ldw	r2,-12(fp)
811162e0:	10800317 	ldw	r2,12(r2)
811162e4:	10800037 	ldwio	r2,0(r2)
811162e8:	e0bff215 	stw	r2,-56(fp)
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
811162ec:	00001106 	br	81116334 <alt_msgdma_descriptor_sync_transfer+0x2b8>
    {
        alt_busy_sleep(1); /* delay 1us */
811162f0:	01000044 	movi	r4,1
811162f4:	11177f40 	call	811177f4 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
811162f8:	e0bff30b 	ldhu	r2,-52(fp)
811162fc:	1084e230 	cmpltui	r2,r2,5000
81116300:	1000051e 	bne	r2,zero,81116318 <alt_msgdma_descriptor_sync_transfer+0x29c>
        {
            alt_printf("time out after 5 msec while waiting for any pending" 
81116304:	012044b4 	movhi	r4,33042
81116308:	21278c04 	addi	r4,r4,-25040
8111630c:	11181800 	call	81118180 <alt_printf>
			* Now that access to the registers is complete, release the registers
			* semaphore so that other threads can access the registers.
			*/
			ALT_SEM_POST (dev->regs_lock);
			
            return -ETIME;
81116310:	00bff084 	movi	r2,-62
81116314:	00003206 	br	811163e0 <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;
81116318:	e0bff30b 	ldhu	r2,-52(fp)
8111631c:	10800044 	addi	r2,r2,1
81116320:	e0bff30d 	sth	r2,-52(fp)
        csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
81116324:	e0bffd17 	ldw	r2,-12(fp)
81116328:	10800317 	ldw	r2,12(r2)
8111632c:	10800037 	ldwio	r2,0(r2)
81116330:	e0bff215 	stw	r2,-56(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
81116334:	e0fff217 	ldw	r3,-56(fp)
81116338:	e0bff817 	ldw	r2,-32(fp)
8111633c:	1884703a 	and	r2,r3,r2
81116340:	1000031e 	bne	r2,zero,81116350 <alt_msgdma_descriptor_sync_transfer+0x2d4>
81116344:	e0bff217 	ldw	r2,-56(fp)
81116348:	1080004c 	andi	r2,r2,1
8111634c:	103fe81e 	bne	r2,zero,811162f0 <__reset+0xfb0f62f0>
    }
    

    /*Errors or conditions causing the dispatcher stopping issuing read/write 
      commands to masters*/
    if(0 != (csr_status & error))
81116350:	e0fff217 	ldw	r3,-56(fp)
81116354:	e0bff817 	ldw	r2,-32(fp)
81116358:	1884703a 	and	r2,r3,r2
8111635c:	10000226 	beq	r2,zero,81116368 <alt_msgdma_descriptor_sync_transfer+0x2ec>
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        return error;
81116360:	e0bff817 	ldw	r2,-32(fp)
81116364:	00001e06 	br	811163e0 <alt_msgdma_descriptor_sync_transfer+0x364>
    }

    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) | 
81116368:	e0bffd17 	ldw	r2,-12(fp)
8111636c:	10800317 	ldw	r2,12(r2)
81116370:	10800104 	addi	r2,r2,4
81116374:	10800037 	ldwio	r2,0(r2)
81116378:	10800814 	ori	r2,r2,32
8111637c:	e0bff615 	stw	r2,-40(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81116380:	0005303a 	rdctl	r2,status
81116384:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81116388:	e0fffa17 	ldw	r3,-24(fp)
8111638c:	00bfff84 	movi	r2,-2
81116390:	1884703a 	and	r2,r3,r2
81116394:	1001703a 	wrctl	status,r2
  
  return context;
81116398:	e0bffa17 	ldw	r2,-24(fp)
	ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();  
8111639c:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
811163a0:	e0bffd17 	ldw	r2,-12(fp)
811163a4:	10800317 	ldw	r2,12(r2)
811163a8:	10800104 	addi	r2,r2,4
811163ac:	e0fff617 	ldw	r3,-40(fp)
811163b0:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
811163b4:	e0bffd17 	ldw	r2,-12(fp)
811163b8:	10800317 	ldw	r2,12(r2)
811163bc:	e0fffd17 	ldw	r3,-12(fp)
811163c0:	18c00317 	ldw	r3,12(r3)
811163c4:	18c00037 	ldwio	r3,0(r3)
811163c8:	10c00035 	stwio	r3,0(r2)
811163cc:	e0bff717 	ldw	r2,-36(fp)
811163d0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811163d4:	e0bffb17 	ldw	r2,-20(fp)
811163d8:	1001703a 	wrctl	status,r2
	* Now that access to the registers is complete, release the registers
	* semaphore so that other threads can access the registers.
	*/
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
811163dc:	0005883a 	mov	r2,zero

}
811163e0:	e037883a 	mov	sp,fp
811163e4:	dfc00117 	ldw	ra,4(sp)
811163e8:	df000017 	ldw	fp,0(sp)
811163ec:	dec00204 	addi	sp,sp,8
811163f0:	f800283a 	ret

811163f4 <alt_msgdma_construct_standard_st_to_mm_descriptor>:
 */
int alt_msgdma_construct_standard_st_to_mm_descriptor (
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *write_address, alt_u32 length, alt_u32 control)
{
811163f4:	defff804 	addi	sp,sp,-32
811163f8:	dfc00715 	stw	ra,28(sp)
811163fc:	df000615 	stw	fp,24(sp)
81116400:	df000604 	addi	fp,sp,24
81116404:	e13ffc15 	stw	r4,-16(fp)
81116408:	e17ffd15 	stw	r5,-12(fp)
8111640c:	e1bffe15 	stw	r6,-8(fp)
81116410:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, NULL, 
81116414:	e0800217 	ldw	r2,8(fp)
81116418:	d8800115 	stw	r2,4(sp)
8111641c:	e0bfff17 	ldw	r2,-4(fp)
81116420:	d8800015 	stw	r2,0(sp)
81116424:	e1fffe17 	ldw	r7,-8(fp)
81116428:	000d883a 	mov	r6,zero
8111642c:	e17ffd17 	ldw	r5,-12(fp)
81116430:	e13ffc17 	ldw	r4,-16(fp)
81116434:	1115bcc0 	call	81115bcc <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
81116438:	e037883a 	mov	sp,fp
8111643c:	dfc00117 	ldw	ra,4(sp)
81116440:	df000017 	ldw	fp,0(sp)
81116444:	dec00204 	addi	sp,sp,8
81116448:	f800283a 	ret

8111644c <alt_msgdma_construct_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address,
	alt_u32 length,
	alt_u32 control)
{
8111644c:	defff804 	addi	sp,sp,-32
81116450:	dfc00715 	stw	ra,28(sp)
81116454:	df000615 	stw	fp,24(sp)
81116458:	df000604 	addi	fp,sp,24
8111645c:	e13ffc15 	stw	r4,-16(fp)
81116460:	e17ffd15 	stw	r5,-12(fp)
81116464:	e1bffe15 	stw	r6,-8(fp)
81116468:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
8111646c:	e0800217 	ldw	r2,8(fp)
81116470:	d8800115 	stw	r2,4(sp)
81116474:	e0bfff17 	ldw	r2,-4(fp)
81116478:	d8800015 	stw	r2,0(sp)
8111647c:	000f883a 	mov	r7,zero
81116480:	e1bffe17 	ldw	r6,-8(fp)
81116484:	e17ffd17 	ldw	r5,-12(fp)
81116488:	e13ffc17 	ldw	r4,-16(fp)
8111648c:	1115bcc0 	call	81115bcc <alt_msgdma_construct_standard_descriptor>
            NULL, length, control);

}
81116490:	e037883a 	mov	sp,fp
81116494:	dfc00117 	ldw	ra,4(sp)
81116498:	df000017 	ldw	fp,0(sp)
8111649c:	dec00204 	addi	sp,sp,8
811164a0:	f800283a 	ret

811164a4 <alt_msgdma_construct_standard_mm_to_mm_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
811164a4:	defff804 	addi	sp,sp,-32
811164a8:	dfc00715 	stw	ra,28(sp)
811164ac:	df000615 	stw	fp,24(sp)
811164b0:	df000604 	addi	fp,sp,24
811164b4:	e13ffc15 	stw	r4,-16(fp)
811164b8:	e17ffd15 	stw	r5,-12(fp)
811164bc:	e1bffe15 	stw	r6,-8(fp)
811164c0:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
811164c4:	e0800317 	ldw	r2,12(fp)
811164c8:	d8800115 	stw	r2,4(sp)
811164cc:	e0800217 	ldw	r2,8(fp)
811164d0:	d8800015 	stw	r2,0(sp)
811164d4:	e1ffff17 	ldw	r7,-4(fp)
811164d8:	e1bffe17 	ldw	r6,-8(fp)
811164dc:	e17ffd17 	ldw	r5,-12(fp)
811164e0:	e13ffc17 	ldw	r4,-16(fp)
811164e4:	1115bcc0 	call	81115bcc <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
811164e8:	e037883a 	mov	sp,fp
811164ec:	dfc00117 	ldw	ra,4(sp)
811164f0:	df000017 	ldw	fp,0(sp)
811164f4:	dec00204 	addi	sp,sp,8
811164f8:	f800283a 	ret

811164fc <alt_msgdma_construct_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 write_burst_count, 
	alt_u16 write_stride)
{
811164fc:	defff004 	addi	sp,sp,-64
81116500:	dfc00f15 	stw	ra,60(sp)
81116504:	df000e15 	stw	fp,56(sp)
81116508:	df000e04 	addi	fp,sp,56
8111650c:	e13ff915 	stw	r4,-28(fp)
81116510:	e17ffa15 	stw	r5,-24(fp)
81116514:	e1bffb15 	stw	r6,-20(fp)
81116518:	e1fffc15 	stw	r7,-16(fp)
8111651c:	e1000317 	ldw	r4,12(fp)
81116520:	e0c00417 	ldw	r3,16(fp)
81116524:	e0800517 	ldw	r2,20(fp)
81116528:	e13ffd0d 	sth	r4,-12(fp)
8111652c:	e0fffe05 	stb	r3,-8(fp)
81116530:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
81116534:	e0bffd0b 	ldhu	r2,-12(fp)
81116538:	e0fffe03 	ldbu	r3,-8(fp)
8111653c:	e13fff0b 	ldhu	r4,-4(fp)
81116540:	d9000615 	stw	r4,24(sp)
81116544:	d8000515 	stw	zero,20(sp)
81116548:	d8c00415 	stw	r3,16(sp)
8111654c:	d8000315 	stw	zero,12(sp)
81116550:	d8800215 	stw	r2,8(sp)
81116554:	e0800217 	ldw	r2,8(fp)
81116558:	d8800115 	stw	r2,4(sp)
8111655c:	e0bffc17 	ldw	r2,-16(fp)
81116560:	d8800015 	stw	r2,0(sp)
81116564:	e1fffb17 	ldw	r7,-20(fp)
81116568:	000d883a 	mov	r6,zero
8111656c:	e17ffa17 	ldw	r5,-24(fp)
81116570:	e13ff917 	ldw	r4,-28(fp)
81116574:	1115c580 	call	81115c58 <alt_msgdma_construct_extended_descriptor>
            NULL, write_address, length, control, sequence_number, 0, 
            write_burst_count, 0, write_stride);
}
81116578:	e037883a 	mov	sp,fp
8111657c:	dfc00117 	ldw	ra,4(sp)
81116580:	df000017 	ldw	fp,0(sp)
81116584:	dec00204 	addi	sp,sp,8
81116588:	f800283a 	ret

8111658c <alt_msgdma_construct_extended_mm_to_st_descriptor>:
	alt_u32 length,
	alt_u32 control,
	alt_u16 sequence_number,
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
8111658c:	defff004 	addi	sp,sp,-64
81116590:	dfc00f15 	stw	ra,60(sp)
81116594:	df000e15 	stw	fp,56(sp)
81116598:	df000e04 	addi	fp,sp,56
8111659c:	e13ff915 	stw	r4,-28(fp)
811165a0:	e17ffa15 	stw	r5,-24(fp)
811165a4:	e1bffb15 	stw	r6,-20(fp)
811165a8:	e1fffc15 	stw	r7,-16(fp)
811165ac:	e1000317 	ldw	r4,12(fp)
811165b0:	e0c00417 	ldw	r3,16(fp)
811165b4:	e0800517 	ldw	r2,20(fp)
811165b8:	e13ffd0d 	sth	r4,-12(fp)
811165bc:	e0fffe05 	stb	r3,-8(fp)
811165c0:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, read_address, 
811165c4:	e0bffd0b 	ldhu	r2,-12(fp)
811165c8:	e0fffe03 	ldbu	r3,-8(fp)
811165cc:	e13fff0b 	ldhu	r4,-4(fp)
811165d0:	d8000615 	stw	zero,24(sp)
811165d4:	d9000515 	stw	r4,20(sp)
811165d8:	d8000415 	stw	zero,16(sp)
811165dc:	d8c00315 	stw	r3,12(sp)
811165e0:	d8800215 	stw	r2,8(sp)
811165e4:	e0800217 	ldw	r2,8(fp)
811165e8:	d8800115 	stw	r2,4(sp)
811165ec:	e0bffc17 	ldw	r2,-16(fp)
811165f0:	d8800015 	stw	r2,0(sp)
811165f4:	000f883a 	mov	r7,zero
811165f8:	e1bffb17 	ldw	r6,-20(fp)
811165fc:	e17ffa17 	ldw	r5,-24(fp)
81116600:	e13ff917 	ldw	r4,-28(fp)
81116604:	1115c580 	call	81115c58 <alt_msgdma_construct_extended_descriptor>
            NULL, length, control, sequence_number, read_burst_count, 0, 
            read_stride, 0);

}
81116608:	e037883a 	mov	sp,fp
8111660c:	dfc00117 	ldw	ra,4(sp)
81116610:	df000017 	ldw	fp,0(sp)
81116614:	dec00204 	addi	sp,sp,8
81116618:	f800283a 	ret

8111661c <alt_msgdma_construct_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
8111661c:	deffee04 	addi	sp,sp,-72
81116620:	dfc01115 	stw	ra,68(sp)
81116624:	df001015 	stw	fp,64(sp)
81116628:	df001004 	addi	fp,sp,64
8111662c:	e13ff715 	stw	r4,-36(fp)
81116630:	e17ff815 	stw	r5,-32(fp)
81116634:	e1bff915 	stw	r6,-28(fp)
81116638:	e1fffa15 	stw	r7,-24(fp)
8111663c:	e1800417 	ldw	r6,16(fp)
81116640:	e1400517 	ldw	r5,20(fp)
81116644:	e1000617 	ldw	r4,24(fp)
81116648:	e0c00717 	ldw	r3,28(fp)
8111664c:	e0800817 	ldw	r2,32(fp)
81116650:	e1bffb0d 	sth	r6,-20(fp)
81116654:	e17ffc05 	stb	r5,-16(fp)
81116658:	e13ffd05 	stb	r4,-12(fp)
8111665c:	e0fffe0d 	sth	r3,-8(fp)
81116660:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
81116664:	e0bffb0b 	ldhu	r2,-20(fp)
81116668:	e0fffc03 	ldbu	r3,-16(fp)
8111666c:	e13ffd03 	ldbu	r4,-12(fp)
81116670:	e17ffe0b 	ldhu	r5,-8(fp)
81116674:	e1bfff0b 	ldhu	r6,-4(fp)
81116678:	d9800615 	stw	r6,24(sp)
8111667c:	d9400515 	stw	r5,20(sp)
81116680:	d9000415 	stw	r4,16(sp)
81116684:	d8c00315 	stw	r3,12(sp)
81116688:	d8800215 	stw	r2,8(sp)
8111668c:	e0800317 	ldw	r2,12(fp)
81116690:	d8800115 	stw	r2,4(sp)
81116694:	e0800217 	ldw	r2,8(fp)
81116698:	d8800015 	stw	r2,0(sp)
8111669c:	e1fffa17 	ldw	r7,-24(fp)
811166a0:	e1bff917 	ldw	r6,-28(fp)
811166a4:	e17ff817 	ldw	r5,-32(fp)
811166a8:	e13ff717 	ldw	r4,-36(fp)
811166ac:	1115c580 	call	81115c58 <alt_msgdma_construct_extended_descriptor>
            read_address, write_address, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
811166b0:	e037883a 	mov	sp,fp
811166b4:	dfc00117 	ldw	ra,4(sp)
811166b8:	df000017 	ldw	fp,0(sp)
811166bc:	dec00204 	addi	sp,sp,8
811166c0:	f800283a 	ret

811166c4 <alt_msgdma_construct_prefetcher_standard_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
811166c4:	defffb04 	addi	sp,sp,-20
811166c8:	df000415 	stw	fp,16(sp)
811166cc:	df000404 	addi	fp,sp,16
811166d0:	e13ffc15 	stw	r4,-16(fp)
811166d4:	e17ffd15 	stw	r5,-12(fp)
811166d8:	e1bffe15 	stw	r6,-8(fp)
811166dc:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
811166e0:	e0bffc17 	ldw	r2,-16(fp)
811166e4:	10c01217 	ldw	r3,72(r2)
811166e8:	e0800117 	ldw	r2,4(fp)
811166ec:	18800436 	bltu	r3,r2,81116700 <alt_msgdma_construct_prefetcher_standard_descriptor+0x3c>
       dev->enhanced_features != 0
811166f0:	e0bffc17 	ldw	r2,-16(fp)
811166f4:	10801703 	ldbu	r2,92(r2)
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
811166f8:	10803fcc 	andi	r2,r2,255
811166fc:	10000226 	beq	r2,zero,81116708 <alt_msgdma_construct_prefetcher_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
81116700:	00bffa84 	movi	r2,-22
81116704:	00001406 	br	81116758 <alt_msgdma_construct_prefetcher_standard_descriptor+0x94>
    }
    descriptor->read_address = read_address;
81116708:	e0bffd17 	ldw	r2,-12(fp)
8111670c:	e0fffe17 	ldw	r3,-8(fp)
81116710:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
81116714:	e0bffd17 	ldw	r2,-12(fp)
81116718:	e0ffff17 	ldw	r3,-4(fp)
8111671c:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
81116720:	e0bffd17 	ldw	r2,-12(fp)
81116724:	e0c00117 	ldw	r3,4(fp)
81116728:	10c00215 	stw	r3,8(r2)
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
8111672c:	e0fffd17 	ldw	r3,-12(fp)
81116730:	e0bffd17 	ldw	r2,-12(fp)
81116734:	10c00315 	stw	r3,12(r2)
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
81116738:	e0c00217 	ldw	r3,8(fp)
8111673c:	00900034 	movhi	r2,16384
81116740:	10bfffc4 	addi	r2,r2,-1
81116744:	1884703a 	and	r2,r3,r2
81116748:	10e00034 	orhi	r3,r2,32768
    descriptor->transfer_length = length;
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
8111674c:	e0bffd17 	ldw	r2,-12(fp)
81116750:	10c00715 	stw	r3,28(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
81116754:	0005883a 	mov	r2,zero
}
81116758:	e037883a 	mov	sp,fp
8111675c:	df000017 	ldw	fp,0(sp)
81116760:	dec00104 	addi	sp,sp,4
81116764:	f800283a 	ret

81116768 <alt_msgdma_construct_prefetcher_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
81116768:	defff404 	addi	sp,sp,-48
8111676c:	df000b15 	stw	fp,44(sp)
81116770:	df000b04 	addi	fp,sp,44
81116774:	e13ff715 	stw	r4,-36(fp)
81116778:	e17ff815 	stw	r5,-32(fp)
8111677c:	e1bff915 	stw	r6,-28(fp)
81116780:	e1fffa15 	stw	r7,-24(fp)
81116784:	e1800517 	ldw	r6,20(fp)
81116788:	e1400617 	ldw	r5,24(fp)
8111678c:	e1000717 	ldw	r4,28(fp)
81116790:	e0c00817 	ldw	r3,32(fp)
81116794:	e0800917 	ldw	r2,36(fp)
81116798:	e1bffb0d 	sth	r6,-20(fp)
8111679c:	e17ffc05 	stb	r5,-16(fp)
811167a0:	e13ffd05 	stb	r4,-12(fp)
811167a4:	e0fffe0d 	sth	r3,-8(fp)
811167a8:	e0bfff0d 	sth	r2,-4(fp)
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
811167ac:	e0bff717 	ldw	r2,-36(fp)
811167b0:	10c01217 	ldw	r3,72(r2)
811167b4:	e0800317 	ldw	r2,12(fp)
811167b8:	18801936 	bltu	r3,r2,81116820 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
811167bc:	e13ff717 	ldw	r4,-36(fp)
811167c0:	20801317 	ldw	r2,76(r4)
811167c4:	20c01417 	ldw	r3,80(r4)
811167c8:	e13ffe0b 	ldhu	r4,-8(fp)
811167cc:	213fffcc 	andi	r4,r4,65535
811167d0:	2015883a 	mov	r10,r4
811167d4:	0017883a 	mov	r11,zero
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
811167d8:	1ac01136 	bltu	r3,r11,81116820 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
811167dc:	58c0011e 	bne	r11,r3,811167e4 <alt_msgdma_construct_prefetcher_extended_descriptor+0x7c>
811167e0:	12800f36 	bltu	r2,r10,81116820 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
811167e4:	e13ff717 	ldw	r4,-36(fp)
811167e8:	20801317 	ldw	r2,76(r4)
811167ec:	20c01417 	ldw	r3,80(r4)
811167f0:	e13fff0b 	ldhu	r4,-4(fp)
811167f4:	213fffcc 	andi	r4,r4,65535
811167f8:	2011883a 	mov	r8,r4
811167fc:	0013883a 	mov	r9,zero
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
81116800:	1a400736 	bltu	r3,r9,81116820 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
81116804:	48c0011e 	bne	r9,r3,8111680c <alt_msgdma_construct_prefetcher_extended_descriptor+0xa4>
81116808:	12000536 	bltu	r2,r8,81116820 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
8111680c:	e0bff717 	ldw	r2,-36(fp)
81116810:	10801703 	ldbu	r2,92(r2)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
81116814:	10803fcc 	andi	r2,r2,255
81116818:	10800060 	cmpeqi	r2,r2,1
8111681c:	1000021e 	bne	r2,zero,81116828 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
81116820:	00bffa84 	movi	r2,-22
81116824:	00003106 	br	811168ec <alt_msgdma_construct_prefetcher_extended_descriptor+0x184>
    }
    
    descriptor->read_address_high = read_address_high;
81116828:	e0bff817 	ldw	r2,-32(fp)
8111682c:	e0fff917 	ldw	r3,-28(fp)
81116830:	10c00915 	stw	r3,36(r2)
    descriptor->read_address_low = read_address_low;
81116834:	e0bff817 	ldw	r2,-32(fp)
81116838:	e0fffa17 	ldw	r3,-24(fp)
8111683c:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_high = write_address_high;
81116840:	e0bff817 	ldw	r2,-32(fp)
81116844:	e0c00117 	ldw	r3,4(fp)
81116848:	10c00a15 	stw	r3,40(r2)
    descriptor->write_address_low = write_address_low;
8111684c:	e0bff817 	ldw	r2,-32(fp)
81116850:	e0c00217 	ldw	r3,8(fp)
81116854:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
81116858:	e0bff817 	ldw	r2,-32(fp)
8111685c:	e0c00317 	ldw	r3,12(fp)
81116860:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
81116864:	e0bff817 	ldw	r2,-32(fp)
81116868:	e0fffb0b 	ldhu	r3,-20(fp)
8111686c:	10c0070d 	sth	r3,28(r2)
    descriptor->read_burst_count = read_burst_count;
81116870:	e0bff817 	ldw	r2,-32(fp)
81116874:	e0fffc03 	ldbu	r3,-16(fp)
81116878:	10c00785 	stb	r3,30(r2)
    descriptor->write_burst_count = write_burst_count;
8111687c:	e0bff817 	ldw	r2,-32(fp)
81116880:	e0fffd03 	ldbu	r3,-12(fp)
81116884:	10c007c5 	stb	r3,31(r2)
    descriptor->read_stride = read_stride;
81116888:	e0bff817 	ldw	r2,-32(fp)
8111688c:	e0fffe0b 	ldhu	r3,-8(fp)
81116890:	10c0080d 	sth	r3,32(r2)
    descriptor->write_stride = write_stride;
81116894:	e0bff817 	ldw	r2,-32(fp)
81116898:	e0ffff0b 	ldhu	r3,-4(fp)
8111689c:	10c0088d 	sth	r3,34(r2)
    /* have descriptor point to itself */
	node_addr.u64 = (uintptr_t)descriptor;
811168a0:	e0bff817 	ldw	r2,-32(fp)
811168a4:	1019883a 	mov	r12,r2
811168a8:	001b883a 	mov	r13,zero
811168ac:	e33ff515 	stw	r12,-44(fp)
811168b0:	e37ff615 	stw	r13,-40(fp)
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
811168b4:	e0fff517 	ldw	r3,-44(fp)
811168b8:	e0bff817 	ldw	r2,-32(fp)
811168bc:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
811168c0:	e0fff617 	ldw	r3,-40(fp)
811168c4:	e0bff817 	ldw	r2,-32(fp)
811168c8:	10c00b15 	stw	r3,44(r2)
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
811168cc:	e0c00417 	ldw	r3,16(fp)
811168d0:	00900034 	movhi	r2,16384
811168d4:	10bfffc4 	addi	r2,r2,-1
811168d8:	1884703a 	and	r2,r3,r2
811168dc:	10e00034 	orhi	r3,r2,32768
	node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
811168e0:	e0bff817 	ldw	r2,-32(fp)
811168e4:	10c00f15 	stw	r3,60(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
811168e8:	0005883a 	mov	r2,zero
}
811168ec:	e037883a 	mov	sp,fp
811168f0:	df000017 	ldw	fp,0(sp)
811168f4:	dec00104 	addi	sp,sp,4
811168f8:	f800283a 	ret

811168fc <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address,
	alt_u32 write_address,
	alt_u32 length,
	alt_u32 control)
{
811168fc:	defff804 	addi	sp,sp,-32
81116900:	dfc00715 	stw	ra,28(sp)
81116904:	df000615 	stw	fp,24(sp)
81116908:	df000604 	addi	fp,sp,24
8111690c:	e13ffc15 	stw	r4,-16(fp)
81116910:	e17ffd15 	stw	r5,-12(fp)
81116914:	e1bffe15 	stw	r6,-8(fp)
81116918:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
8111691c:	e0800317 	ldw	r2,12(fp)
81116920:	d8800115 	stw	r2,4(sp)
81116924:	e0800217 	ldw	r2,8(fp)
81116928:	d8800015 	stw	r2,0(sp)
8111692c:	e1ffff17 	ldw	r7,-4(fp)
81116930:	e1bffe17 	ldw	r6,-8(fp)
81116934:	e17ffd17 	ldw	r5,-12(fp)
81116938:	e13ffc17 	ldw	r4,-16(fp)
8111693c:	11166c40 	call	811166c4 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, write_address, length, control);
}
81116940:	e037883a 	mov	sp,fp
81116944:	dfc00117 	ldw	ra,4(sp)
81116948:	df000017 	ldw	fp,0(sp)
8111694c:	dec00204 	addi	sp,sp,8
81116950:	f800283a 	ret

81116954 <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
81116954:	defff804 	addi	sp,sp,-32
81116958:	dfc00715 	stw	ra,28(sp)
8111695c:	df000615 	stw	fp,24(sp)
81116960:	df000604 	addi	fp,sp,24
81116964:	e13ffc15 	stw	r4,-16(fp)
81116968:	e17ffd15 	stw	r5,-12(fp)
8111696c:	e1bffe15 	stw	r6,-8(fp)
81116970:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
81116974:	e0800217 	ldw	r2,8(fp)
81116978:	d8800115 	stw	r2,4(sp)
8111697c:	e0bfff17 	ldw	r2,-4(fp)
81116980:	d8800015 	stw	r2,0(sp)
81116984:	e1fffe17 	ldw	r7,-8(fp)
81116988:	000d883a 	mov	r6,zero
8111698c:	e17ffd17 	ldw	r5,-12(fp)
81116990:	e13ffc17 	ldw	r4,-16(fp)
81116994:	11166c40 	call	811166c4 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		0, write_address, length, control);
}
81116998:	e037883a 	mov	sp,fp
8111699c:	dfc00117 	ldw	ra,4(sp)
811169a0:	df000017 	ldw	fp,0(sp)
811169a4:	dec00204 	addi	sp,sp,8
811169a8:	f800283a 	ret

811169ac <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 read_address, 
	alt_u32 length, 
	alt_u32 control)
{
811169ac:	defff804 	addi	sp,sp,-32
811169b0:	dfc00715 	stw	ra,28(sp)
811169b4:	df000615 	stw	fp,24(sp)
811169b8:	df000604 	addi	fp,sp,24
811169bc:	e13ffc15 	stw	r4,-16(fp)
811169c0:	e17ffd15 	stw	r5,-12(fp)
811169c4:	e1bffe15 	stw	r6,-8(fp)
811169c8:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
811169cc:	e0800217 	ldw	r2,8(fp)
811169d0:	d8800115 	stw	r2,4(sp)
811169d4:	e0bfff17 	ldw	r2,-4(fp)
811169d8:	d8800015 	stw	r2,0(sp)
811169dc:	000f883a 	mov	r7,zero
811169e0:	e1bffe17 	ldw	r6,-8(fp)
811169e4:	e17ffd17 	ldw	r5,-12(fp)
811169e8:	e13ffc17 	ldw	r4,-16(fp)
811169ec:	11166c40 	call	811166c4 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, 0, length, control);
}
811169f0:	e037883a 	mov	sp,fp
811169f4:	dfc00117 	ldw	ra,4(sp)
811169f8:	df000017 	ldw	fp,0(sp)
811169fc:	dec00204 	addi	sp,sp,8
81116a00:	f800283a 	ret

81116a04 <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number,
	alt_u8 write_burst_count,
	alt_u16 write_stride)
{
81116a04:	deffee04 	addi	sp,sp,-72
81116a08:	dfc01115 	stw	ra,68(sp)
81116a0c:	df001015 	stw	fp,64(sp)
81116a10:	df001004 	addi	fp,sp,64
81116a14:	e13ff915 	stw	r4,-28(fp)
81116a18:	e17ffa15 	stw	r5,-24(fp)
81116a1c:	e1bffb15 	stw	r6,-20(fp)
81116a20:	e1fffc15 	stw	r7,-16(fp)
81116a24:	e1000417 	ldw	r4,16(fp)
81116a28:	e0c00517 	ldw	r3,20(fp)
81116a2c:	e0800617 	ldw	r2,24(fp)
81116a30:	e13ffd0d 	sth	r4,-12(fp)
81116a34:	e0fffe05 	stb	r3,-8(fp)
81116a38:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor, 
81116a3c:	e0bffd0b 	ldhu	r2,-12(fp)
81116a40:	e0fffe03 	ldbu	r3,-8(fp)
81116a44:	e13fff0b 	ldhu	r4,-4(fp)
81116a48:	d9000815 	stw	r4,32(sp)
81116a4c:	d8000715 	stw	zero,28(sp)
81116a50:	d8c00615 	stw	r3,24(sp)
81116a54:	d8000515 	stw	zero,20(sp)
81116a58:	d8800415 	stw	r2,16(sp)
81116a5c:	e0800317 	ldw	r2,12(fp)
81116a60:	d8800315 	stw	r2,12(sp)
81116a64:	e0800217 	ldw	r2,8(fp)
81116a68:	d8800215 	stw	r2,8(sp)
81116a6c:	e0bffc17 	ldw	r2,-16(fp)
81116a70:	d8800115 	stw	r2,4(sp)
81116a74:	e0bffb17 	ldw	r2,-20(fp)
81116a78:	d8800015 	stw	r2,0(sp)
81116a7c:	000f883a 	mov	r7,zero
81116a80:	000d883a 	mov	r6,zero
81116a84:	e17ffa17 	ldw	r5,-24(fp)
81116a88:	e13ff917 	ldw	r4,-28(fp)
81116a8c:	11167680 	call	81116768 <alt_msgdma_construct_prefetcher_extended_descriptor>
            0, 0, write_address_high, write_address_low, length, control, 
			sequence_number, 0, write_burst_count, 0, write_stride);
}
81116a90:	e037883a 	mov	sp,fp
81116a94:	dfc00117 	ldw	ra,4(sp)
81116a98:	df000017 	ldw	fp,0(sp)
81116a9c:	dec00204 	addi	sp,sp,8
81116aa0:	f800283a 	ret

81116aa4 <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
81116aa4:	deffee04 	addi	sp,sp,-72
81116aa8:	dfc01115 	stw	ra,68(sp)
81116aac:	df001015 	stw	fp,64(sp)
81116ab0:	df001004 	addi	fp,sp,64
81116ab4:	e13ff915 	stw	r4,-28(fp)
81116ab8:	e17ffa15 	stw	r5,-24(fp)
81116abc:	e1bffb15 	stw	r6,-20(fp)
81116ac0:	e1fffc15 	stw	r7,-16(fp)
81116ac4:	e1000417 	ldw	r4,16(fp)
81116ac8:	e0c00517 	ldw	r3,20(fp)
81116acc:	e0800617 	ldw	r2,24(fp)
81116ad0:	e13ffd0d 	sth	r4,-12(fp)
81116ad4:	e0fffe05 	stb	r3,-8(fp)
81116ad8:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
81116adc:	e0bffd0b 	ldhu	r2,-12(fp)
81116ae0:	e0fffe03 	ldbu	r3,-8(fp)
81116ae4:	e13fff0b 	ldhu	r4,-4(fp)
81116ae8:	d8000815 	stw	zero,32(sp)
81116aec:	d9000715 	stw	r4,28(sp)
81116af0:	d8000615 	stw	zero,24(sp)
81116af4:	d8c00515 	stw	r3,20(sp)
81116af8:	d8800415 	stw	r2,16(sp)
81116afc:	e0800317 	ldw	r2,12(fp)
81116b00:	d8800315 	stw	r2,12(sp)
81116b04:	e0800217 	ldw	r2,8(fp)
81116b08:	d8800215 	stw	r2,8(sp)
81116b0c:	d8000115 	stw	zero,4(sp)
81116b10:	d8000015 	stw	zero,0(sp)
81116b14:	e1fffc17 	ldw	r7,-16(fp)
81116b18:	e1bffb17 	ldw	r6,-20(fp)
81116b1c:	e17ffa17 	ldw	r5,-24(fp)
81116b20:	e13ff917 	ldw	r4,-28(fp)
81116b24:	11167680 	call	81116768 <alt_msgdma_construct_prefetcher_extended_descriptor>
    		read_address_high, read_address_low, 0, 0, length, control, 
			sequence_number, read_burst_count, 0, read_stride, 0);
}
81116b28:	e037883a 	mov	sp,fp
81116b2c:	dfc00117 	ldw	ra,4(sp)
81116b30:	df000017 	ldw	fp,0(sp)
81116b34:	dec00204 	addi	sp,sp,8
81116b38:	f800283a 	ret

81116b3c <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor>:
	alt_u16 sequence_number,
	alt_u8 read_burst_count,
	alt_u8 write_burst_count, 
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
81116b3c:	deffec04 	addi	sp,sp,-80
81116b40:	dfc01315 	stw	ra,76(sp)
81116b44:	df001215 	stw	fp,72(sp)
81116b48:	df001204 	addi	fp,sp,72
81116b4c:	e13ff715 	stw	r4,-36(fp)
81116b50:	e17ff815 	stw	r5,-32(fp)
81116b54:	e1bff915 	stw	r6,-28(fp)
81116b58:	e1fffa15 	stw	r7,-24(fp)
81116b5c:	e1800617 	ldw	r6,24(fp)
81116b60:	e1400717 	ldw	r5,28(fp)
81116b64:	e1000817 	ldw	r4,32(fp)
81116b68:	e0c00917 	ldw	r3,36(fp)
81116b6c:	e0800a17 	ldw	r2,40(fp)
81116b70:	e1bffb0d 	sth	r6,-20(fp)
81116b74:	e17ffc05 	stb	r5,-16(fp)
81116b78:	e13ffd05 	stb	r4,-12(fp)
81116b7c:	e0fffe0d 	sth	r3,-8(fp)
81116b80:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
81116b84:	e0bffb0b 	ldhu	r2,-20(fp)
81116b88:	e0fffc03 	ldbu	r3,-16(fp)
81116b8c:	e13ffd03 	ldbu	r4,-12(fp)
81116b90:	e17ffe0b 	ldhu	r5,-8(fp)
81116b94:	e1bfff0b 	ldhu	r6,-4(fp)
81116b98:	d9800815 	stw	r6,32(sp)
81116b9c:	d9400715 	stw	r5,28(sp)
81116ba0:	d9000615 	stw	r4,24(sp)
81116ba4:	d8c00515 	stw	r3,20(sp)
81116ba8:	d8800415 	stw	r2,16(sp)
81116bac:	e0800517 	ldw	r2,20(fp)
81116bb0:	d8800315 	stw	r2,12(sp)
81116bb4:	e0800417 	ldw	r2,16(fp)
81116bb8:	d8800215 	stw	r2,8(sp)
81116bbc:	e0800317 	ldw	r2,12(fp)
81116bc0:	d8800115 	stw	r2,4(sp)
81116bc4:	e0800217 	ldw	r2,8(fp)
81116bc8:	d8800015 	stw	r2,0(sp)
81116bcc:	e1fffa17 	ldw	r7,-24(fp)
81116bd0:	e1bff917 	ldw	r6,-28(fp)
81116bd4:	e17ff817 	ldw	r5,-32(fp)
81116bd8:	e13ff717 	ldw	r4,-36(fp)
81116bdc:	11167680 	call	81116768 <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, write_address_high, 
			write_address_low, length, control, sequence_number, 
			read_burst_count, write_burst_count, read_stride, write_stride);

}
81116be0:	e037883a 	mov	sp,fp
81116be4:	dfc00117 	ldw	ra,4(sp)
81116be8:	df000017 	ldw	fp,0(sp)
81116bec:	dec00204 	addi	sp,sp,8
81116bf0:	f800283a 	ret

81116bf4 <alt_msgdma_prefetcher_add_standard_desc_to_list>:
 *           descriptor.next_ptr not pointing back to itslef)
 */
int alt_msgdma_prefetcher_add_standard_desc_to_list (
	alt_msgdma_prefetcher_standard_descriptor** list,
	alt_msgdma_prefetcher_standard_descriptor* descriptor)
{
81116bf4:	defffc04 	addi	sp,sp,-16
81116bf8:	df000315 	stw	fp,12(sp)
81116bfc:	df000304 	addi	fp,sp,12
81116c00:	e13ffe15 	stw	r4,-8(fp)
81116c04:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	
	if (descriptor == NULL)
81116c08:	e0bfff17 	ldw	r2,-4(fp)
81116c0c:	1000021e 	bne	r2,zero,81116c18 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x24>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
81116c10:	00bffa84 	movi	r2,-22
81116c14:	00002f06 	br	81116cd4 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (descriptor->next_desc_ptr != (alt_u32)descriptor)
81116c18:	e0bfff17 	ldw	r2,-4(fp)
81116c1c:	10c00317 	ldw	r3,12(r2)
81116c20:	e0bfff17 	ldw	r2,-4(fp)
81116c24:	18800226 	beq	r3,r2,81116c30 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x3c>
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
81116c28:	00bffa84 	movi	r2,-22
81116c2c:	00002906 	br	81116cd4 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (*list == NULL)
81116c30:	e0bffe17 	ldw	r2,-8(fp)
81116c34:	10800017 	ldw	r2,0(r2)
81116c38:	1000051e 	bne	r2,zero,81116c50 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x5c>
	{
		*list = descriptor;  /* make this root-node if list is empty */
81116c3c:	e0bffe17 	ldw	r2,-8(fp)
81116c40:	e0ffff17 	ldw	r3,-4(fp)
81116c44:	10c00015 	stw	r3,0(r2)
		return 0;  /* successfully added */
81116c48:	0005883a 	mov	r2,zero
81116c4c:	00002106 	br	81116cd4 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (*list == descriptor)
81116c50:	e0bffe17 	ldw	r2,-8(fp)
81116c54:	10c00017 	ldw	r3,0(r2)
81116c58:	e0bfff17 	ldw	r2,-4(fp)
81116c5c:	1880021e 	bne	r3,r2,81116c68 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x74>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
81116c60:	00bffa84 	movi	r2,-22
81116c64:	00001b06 	br	81116cd4 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
81116c68:	e0bffe17 	ldw	r2,-8(fp)
81116c6c:	10800017 	ldw	r2,0(r2)
81116c70:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
81116c74:	00000906 	br	81116c9c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xa8>
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
81116c78:	e0bffd17 	ldw	r2,-12(fp)
81116c7c:	10c00317 	ldw	r3,12(r2)
81116c80:	e0bfff17 	ldw	r2,-4(fp)
81116c84:	1880021e 	bne	r3,r2,81116c90 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x9c>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
81116c88:	00bffa84 	movi	r2,-22
81116c8c:	00001106 	br	81116cd4 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
81116c90:	e0bffd17 	ldw	r2,-12(fp)
81116c94:	10800317 	ldw	r2,12(r2)
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		last_descr_ptr = 
81116c98:	e0bffd15 	stw	r2,-12(fp)
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
81116c9c:	e0bffd17 	ldw	r2,-12(fp)
81116ca0:	10800317 	ldw	r2,12(r2)
81116ca4:	e0fffe17 	ldw	r3,-8(fp)
81116ca8:	18c00017 	ldw	r3,0(r3)
81116cac:	10fff21e 	bne	r2,r3,81116c78 <__reset+0xfb0f6c78>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* add this descriptor to end of list */
	last_descr_ptr->next_desc_ptr = (alt_u32)((uintptr_t)descriptor);
81116cb0:	e0ffff17 	ldw	r3,-4(fp)
81116cb4:	e0bffd17 	ldw	r2,-12(fp)
81116cb8:	10c00315 	stw	r3,12(r2)
	/* ensure new last pointer points the start of the list */
	descriptor->next_desc_ptr = (alt_u32)((uintptr_t)*list);  
81116cbc:	e0bffe17 	ldw	r2,-8(fp)
81116cc0:	10800017 	ldw	r2,0(r2)
81116cc4:	1007883a 	mov	r3,r2
81116cc8:	e0bfff17 	ldw	r2,-4(fp)
81116ccc:	10c00315 	stw	r3,12(r2)
	return 0; /* successfully added */
81116cd0:	0005883a 	mov	r2,zero
}
81116cd4:	e037883a 	mov	sp,fp
81116cd8:	df000017 	ldw	fp,0(sp)
81116cdc:	dec00104 	addi	sp,sp,4
81116ce0:	f800283a 	ret

81116ce4 <alt_msgdma_prefetcher_add_extended_desc_to_list>:

int alt_msgdma_prefetcher_add_extended_desc_to_list (
	alt_msgdma_prefetcher_extended_descriptor** list,
	alt_msgdma_prefetcher_extended_descriptor* descriptor)
{
81116ce4:	defff804 	addi	sp,sp,-32
81116ce8:	df000715 	stw	fp,28(sp)
81116cec:	df000704 	addi	fp,sp,28
81116cf0:	e13ffe15 	stw	r4,-8(fp)
81116cf4:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	msgdma_addr64 root_node_addr, next_node_addr;
	
	if (descriptor == NULL)
81116cf8:	e13fff17 	ldw	r4,-4(fp)
81116cfc:	2000021e 	bne	r4,zero,81116d08 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x24>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
81116d00:	00bffa84 	movi	r2,-22
81116d04:	00005906 	br	81116e6c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
81116d08:	e13fff17 	ldw	r4,-4(fp)
81116d0c:	2015883a 	mov	r10,r4
81116d10:	0017883a 	mov	r11,zero
81116d14:	e2bffc15 	stw	r10,-16(fp)
81116d18:	e2fffd15 	stw	r11,-12(fp)
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
81116d1c:	e13fff17 	ldw	r4,-4(fp)
81116d20:	21400317 	ldw	r5,12(r4)
81116d24:	e13ffc17 	ldw	r4,-16(fp)
81116d28:	29000626 	beq	r5,r4,81116d44 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
81116d2c:	e13fff17 	ldw	r4,-4(fp)
81116d30:	21400b17 	ldw	r5,44(r4)
81116d34:	e13ffd17 	ldw	r4,-12(fp)
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
81116d38:	29000226 	beq	r5,r4,81116d44 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
81116d3c:	00bffa84 	movi	r2,-22
81116d40:	00004a06 	br	81116e6c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	if (*list == NULL)
81116d44:	e13ffe17 	ldw	r4,-8(fp)
81116d48:	21000017 	ldw	r4,0(r4)
81116d4c:	2000051e 	bne	r4,zero,81116d64 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x80>
	{
		*list = descriptor;  /* make this the root-node if list is empty */
81116d50:	e0bffe17 	ldw	r2,-8(fp)
81116d54:	e0ffff17 	ldw	r3,-4(fp)
81116d58:	10c00015 	stw	r3,0(r2)
		return 0;
81116d5c:	0005883a 	mov	r2,zero
81116d60:	00004206 	br	81116e6c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	if (*list == descriptor)
81116d64:	e13ffe17 	ldw	r4,-8(fp)
81116d68:	21400017 	ldw	r5,0(r4)
81116d6c:	e13fff17 	ldw	r4,-4(fp)
81116d70:	2900021e 	bne	r5,r4,81116d7c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x98>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
81116d74:	00bffa84 	movi	r2,-22
81116d78:	00003c06 	br	81116e6c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
81116d7c:	e13ffe17 	ldw	r4,-8(fp)
81116d80:	21000017 	ldw	r4,0(r4)
81116d84:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
81116d88:	e13ffe17 	ldw	r4,-8(fp)
81116d8c:	21000017 	ldw	r4,0(r4)
81116d90:	2011883a 	mov	r8,r4
81116d94:	0013883a 	mov	r9,zero
81116d98:	e23ffa15 	stw	r8,-24(fp)
81116d9c:	e27ffb15 	stw	r9,-20(fp)
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
81116da0:	00001806 	br	81116e04 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x120>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* first check if descriptor already in the list */
		next_node_addr.u64 = (uintptr_t)descriptor;
81116da4:	e13fff17 	ldw	r4,-4(fp)
81116da8:	200d883a 	mov	r6,r4
81116dac:	000f883a 	mov	r7,zero
81116db0:	e1bffc15 	stw	r6,-16(fp)
81116db4:	e1fffd15 	stw	r7,-12(fp)
		if ((last_descr_ptr->next_desc_ptr_low == next_node_addr.u32[0])
81116db8:	e13ff917 	ldw	r4,-28(fp)
81116dbc:	21400317 	ldw	r5,12(r4)
81116dc0:	e13ffc17 	ldw	r4,-16(fp)
81116dc4:	2900061e 	bne	r5,r4,81116de0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
			&& (last_descr_ptr->next_desc_ptr_high == next_node_addr.u32[1]))
81116dc8:	e13ff917 	ldw	r4,-28(fp)
81116dcc:	21400b17 	ldw	r5,44(r4)
81116dd0:	e13ffd17 	ldw	r4,-12(fp)
81116dd4:	2900021e 	bne	r5,r4,81116de0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
81116dd8:	00bffa84 	movi	r2,-22
81116ddc:	00002306 	br	81116e6c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
81116de0:	e13ff917 	ldw	r4,-28(fp)
81116de4:	21000317 	ldw	r4,12(r4)
81116de8:	e13ffc15 	stw	r4,-16(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
81116dec:	e13ff917 	ldw	r4,-28(fp)
81116df0:	21000b17 	ldw	r4,44(r4)
81116df4:	e13ffd15 	stw	r4,-12(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
81116df8:	e13ffc17 	ldw	r4,-16(fp)
81116dfc:	e17ffd17 	ldw	r5,-12(fp)
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
81116e00:	e13ff915 	stw	r4,-28(fp)
	last_descr_ptr = *list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
81116e04:	e13ff917 	ldw	r4,-28(fp)
81116e08:	21400317 	ldw	r5,12(r4)
81116e0c:	e13ffa17 	ldw	r4,-24(fp)
81116e10:	29000426 	beq	r5,r4,81116e24 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x140>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
81116e14:	e13ff917 	ldw	r4,-28(fp)
81116e18:	21400b17 	ldw	r5,44(r4)
81116e1c:	e13ffb17 	ldw	r4,-20(fp)
81116e20:	293fe01e 	bne	r5,r4,81116da4 <__reset+0xfb0f6da4>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* add this descriptor to end of list */
	next_node_addr.u64 = (uintptr_t)descriptor;
81116e24:	e13fff17 	ldw	r4,-4(fp)
81116e28:	2005883a 	mov	r2,r4
81116e2c:	0007883a 	mov	r3,zero
81116e30:	e0bffc15 	stw	r2,-16(fp)
81116e34:	e0fffd15 	stw	r3,-12(fp)
	last_descr_ptr->next_desc_ptr_low = next_node_addr.u32[0];
81116e38:	e0fffc17 	ldw	r3,-16(fp)
81116e3c:	e0bff917 	ldw	r2,-28(fp)
81116e40:	10c00315 	stw	r3,12(r2)
	last_descr_ptr->next_desc_ptr_high = next_node_addr.u32[1];
81116e44:	e0fffd17 	ldw	r3,-12(fp)
81116e48:	e0bff917 	ldw	r2,-28(fp)
81116e4c:	10c00b15 	stw	r3,44(r2)
	/* ensure new last pointer points the beginning of the list */
	descriptor->next_desc_ptr_low = root_node_addr.u32[0];
81116e50:	e0fffa17 	ldw	r3,-24(fp)
81116e54:	e0bfff17 	ldw	r2,-4(fp)
81116e58:	10c00315 	stw	r3,12(r2)
	descriptor->next_desc_ptr_high = root_node_addr.u32[1];
81116e5c:	e0fffb17 	ldw	r3,-20(fp)
81116e60:	e0bfff17 	ldw	r2,-4(fp)
81116e64:	10c00b15 	stw	r3,44(r2)
	return 0;
81116e68:	0005883a 	mov	r2,zero
}
81116e6c:	e037883a 	mov	sp,fp
81116e70:	df000017 	ldw	fp,0(sp)
81116e74:	dec00104 	addi	sp,sp,4
81116e78:	f800283a 	ret

81116e7c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_std_list_own_by_hw_bits (
	alt_msgdma_prefetcher_standard_descriptor *list)
{
81116e7c:	defffc04 	addi	sp,sp,-16
81116e80:	df000315 	stw	fp,12(sp)
81116e84:	df000304 	addi	fp,sp,12
81116e88:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
81116e8c:	e03ffe15 	stw	zero,-8(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	if (list == NULL)
81116e90:	e0bfff17 	ldw	r2,-4(fp)
81116e94:	1000021e 	bne	r2,zero,81116ea0 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x24>
	{
		return -EINVAL;  /* this list cannot be empty */
81116e98:	00bffa84 	movi	r2,-22
81116e9c:	00001906 	br	81116f04 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x88>
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
81116ea0:	e0bfff17 	ldw	r2,-4(fp)
81116ea4:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
81116ea8:	00000a06 	br	81116ed4 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x58>
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
81116eac:	e0bffd17 	ldw	r2,-12(fp)
81116eb0:	10800717 	ldw	r2,28(r2)
81116eb4:	e0bffe15 	stw	r2,-8(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
81116eb8:	e0bffe17 	ldw	r2,-8(fp)
81116ebc:	10d00034 	orhi	r3,r2,16384
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
81116ec0:	e0bffd17 	ldw	r2,-12(fp)
81116ec4:	10c00715 	stw	r3,28(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
81116ec8:	e0bffd17 	ldw	r2,-12(fp)
81116ecc:	10800317 	ldw	r2,12(r2)
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
81116ed0:	e0bffd15 	stw	r2,-12(fp)
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
81116ed4:	e0bffd17 	ldw	r2,-12(fp)
81116ed8:	10c00317 	ldw	r3,12(r2)
81116edc:	e0bfff17 	ldw	r2,-4(fp)
81116ee0:	18bff21e 	bne	r3,r2,81116eac <__reset+0xfb0f6eac>
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
81116ee4:	e0bffd17 	ldw	r2,-12(fp)
81116ee8:	10800717 	ldw	r2,28(r2)
81116eec:	e0bffe15 	stw	r2,-8(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
81116ef0:	e0bffe17 	ldw	r2,-8(fp)
81116ef4:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
81116ef8:	e0bffd17 	ldw	r2,-12(fp)
81116efc:	10c00715 	stw	r3,28(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	
	return 0;
81116f00:	0005883a 	mov	r2,zero
}
81116f04:	e037883a 	mov	sp,fp
81116f08:	df000017 	ldw	fp,0(sp)
81116f0c:	dec00104 	addi	sp,sp,4
81116f10:	f800283a 	ret

81116f14 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits (
	alt_msgdma_prefetcher_extended_descriptor *list)
{
81116f14:	defff804 	addi	sp,sp,-32
81116f18:	df000715 	stw	fp,28(sp)
81116f1c:	df000704 	addi	fp,sp,28
81116f20:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
81116f24:	e03ffa15 	stw	zero,-24(fp)
	msgdma_addr64 root_node_addr, next_node_addr;
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	
	if (list == NULL)
81116f28:	e13fff17 	ldw	r4,-4(fp)
81116f2c:	2000021e 	bne	r4,zero,81116f38 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x24>
	{
		return -EINVAL;  /* this list cannot be empty */
81116f30:	00bffa84 	movi	r2,-22
81116f34:	00002806 	br	81116fd8 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xc4>
	}
	
	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
81116f38:	e13fff17 	ldw	r4,-4(fp)
81116f3c:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;
81116f40:	e13fff17 	ldw	r4,-4(fp)
81116f44:	2005883a 	mov	r2,r4
81116f48:	0007883a 	mov	r3,zero
81116f4c:	e0bffb15 	stw	r2,-20(fp)
81116f50:	e0fffc15 	stw	r3,-16(fp)

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
81116f54:	00001006 	br	81116f98 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x84>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
81116f58:	e0bff917 	ldw	r2,-28(fp)
81116f5c:	10800f17 	ldw	r2,60(r2)
81116f60:	e0bffa15 	stw	r2,-24(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
81116f64:	e0bffa17 	ldw	r2,-24(fp)
81116f68:	10d00034 	orhi	r3,r2,16384
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
81116f6c:	e0bff917 	ldw	r2,-28(fp)
81116f70:	10c00f15 	stw	r3,60(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
81116f74:	e0bff917 	ldw	r2,-28(fp)
81116f78:	10800317 	ldw	r2,12(r2)
81116f7c:	e0bffd15 	stw	r2,-12(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
81116f80:	e0bff917 	ldw	r2,-28(fp)
81116f84:	10800b17 	ldw	r2,44(r2)
81116f88:	e0bffe15 	stw	r2,-8(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
81116f8c:	e0bffd17 	ldw	r2,-12(fp)
81116f90:	e0fffe17 	ldw	r3,-8(fp)
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
81116f94:	e0bff915 	stw	r2,-28(fp)
	last_descr_ptr = list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
81116f98:	e0bff917 	ldw	r2,-28(fp)
81116f9c:	10c00317 	ldw	r3,12(r2)
81116fa0:	e0bffb17 	ldw	r2,-20(fp)
81116fa4:	18800426 	beq	r3,r2,81116fb8 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xa4>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
81116fa8:	e0bff917 	ldw	r2,-28(fp)
81116fac:	10c00b17 	ldw	r3,44(r2)
81116fb0:	e0bffc17 	ldw	r2,-16(fp)
81116fb4:	18bfe81e 	bne	r3,r2,81116f58 <__reset+0xfb0f6f58>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
81116fb8:	e0bff917 	ldw	r2,-28(fp)
81116fbc:	10800f17 	ldw	r2,60(r2)
81116fc0:	e0bffa15 	stw	r2,-24(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
81116fc4:	e0bffa17 	ldw	r2,-24(fp)
81116fc8:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
81116fcc:	e0bff917 	ldw	r2,-28(fp)
81116fd0:	10c00f15 	stw	r3,60(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	return 0;
81116fd4:	0005883a 	mov	r2,zero
}
81116fd8:	e037883a 	mov	sp,fp
81116fdc:	df000017 	ldw	fp,0(sp)
81116fe0:	dec00104 	addi	sp,sp,4
81116fe4:	f800283a 	ret

81116fe8 <alt_msgdma_start_prefetcher_with_list_addr>:
int alt_msgdma_start_prefetcher_with_list_addr (
	alt_msgdma_dev *dev,
	alt_u64  list_addr,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
81116fe8:	deffef04 	addi	sp,sp,-68
81116fec:	df001015 	stw	fp,64(sp)
81116ff0:	df001004 	addi	fp,sp,64
81116ff4:	e13ffb15 	stw	r4,-20(fp)
81116ff8:	e17ffc15 	stw	r5,-16(fp)
81116ffc:	e1bffd15 	stw	r6,-12(fp)
81117000:	3807883a 	mov	r3,r7
81117004:	e0800117 	ldw	r2,4(fp)
81117008:	e0fffe05 	stb	r3,-8(fp)
8111700c:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 prefetcher_ctl = 0;
81117010:	e03ff015 	stw	zero,-64(fp)
	alt_u32 dispatcher_ctl = 0;
81117014:	e03ff115 	stw	zero,-60(fp)
	alt_irq_context context = 0;
81117018:	e03ff215 	stw	zero,-56(fp)
	
	/* use helper struct to get easy access to hi/low address */
	msgdma_addr64 root_node_addr;
	root_node_addr.u64 = list_addr;  
8111701c:	e0bffc17 	ldw	r2,-16(fp)
81117020:	e0bff915 	stw	r2,-28(fp)
81117024:	e0bffd17 	ldw	r2,-12(fp)
81117028:	e0bffa15 	stw	r2,-24(fp)
	 * semaphore. This ensures that accessing registers is thread-safe.
	 */
	ALT_SEM_PEND (dev->regs_lock, 0);
	
	/* case where prefetcher already started, return busy error */ 
	prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
8111702c:	e0bffb17 	ldw	r2,-20(fp)
81117030:	10800617 	ldw	r2,24(r2)
81117034:	10800037 	ldwio	r2,0(r2)
81117038:	e0bff015 	stw	r2,-64(fp)
	if(ALT_MSGDMA_PREFETCHER_CTRL_RUN_GET(prefetcher_ctl)){
8111703c:	e0bff017 	ldw	r2,-64(fp)
81117040:	1080004c 	andi	r2,r2,1
81117044:	10000226 	beq	r2,zero,81117050 <alt_msgdma_start_prefetcher_with_list_addr+0x68>
		/* release the registers semaphore */
		ALT_SEM_POST (dev->regs_lock);
		return -EBUSY;
81117048:	00bffc04 	movi	r2,-16
8111704c:	00009206 	br	81117298 <alt_msgdma_start_prefetcher_with_list_addr+0x2b0>
	}
		
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	   read or write masters  */
	/* stop issuing more descriptors */
	dispatcher_ctl = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
81117050:	00800804 	movi	r2,32
81117054:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81117058:	0005303a 	rdctl	r2,status
8111705c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81117060:	e0fff517 	ldw	r3,-44(fp)
81117064:	00bfff84 	movi	r2,-2
81117068:	1884703a 	and	r2,r3,r2
8111706c:	1001703a 	wrctl	status,r2
  
  return context;
81117070:	e0bff517 	ldw	r2,-44(fp)
	
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
81117074:	e0bff215 	stw	r2,-56(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
81117078:	e0bffb17 	ldw	r2,-20(fp)
8111707c:	10800317 	ldw	r2,12(r2)
81117080:	10800104 	addi	r2,r2,4
81117084:	e0fff117 	ldw	r3,-60(fp)
81117088:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS( dev->csr_base, 
8111708c:	e0bffb17 	ldw	r2,-20(fp)
81117090:	10800317 	ldw	r2,12(r2)
81117094:	e0fffb17 	ldw	r3,-20(fp)
81117098:	18c00317 	ldw	r3,12(r3)
8111709c:	18c00037 	ldwio	r3,0(r3)
811170a0:	10c00035 	stwio	r3,0(r2)
811170a4:	e0bff217 	ldw	r2,-56(fp)
811170a8:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811170ac:	e0bff317 	ldw	r2,-52(fp)
811170b0:	1001703a 	wrctl	status,r2
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up dispatcher to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if(dev->callback)
811170b4:	e0bffb17 	ldw	r2,-20(fp)
811170b8:	10800b17 	ldw	r2,44(r2)
811170bc:	10002326 	beq	r2,zero,8111714c <alt_msgdma_start_prefetcher_with_list_addr+0x164>
	{
		dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
811170c0:	e0bffb17 	ldw	r2,-20(fp)
811170c4:	10c00d17 	ldw	r3,52(r2)
811170c8:	e0bff117 	ldw	r2,-60(fp)
811170cc:	1884b03a 	or	r2,r3,r2
811170d0:	10800514 	ori	r2,r2,20
811170d4:	e0bff115 	stw	r2,-60(fp)
				| ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
		dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
811170d8:	e0fff117 	ldw	r3,-60(fp)
811170dc:	00bff7c4 	movi	r2,-33
811170e0:	1884703a 	and	r2,r3,r2
811170e4:	e0bff115 	stw	r2,-60(fp)
		
		prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
811170e8:	e0bff017 	ldw	r2,-64(fp)
811170ec:	10800214 	ori	r2,r2,8
811170f0:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811170f4:	0005303a 	rdctl	r2,status
811170f8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811170fc:	e0fff717 	ldw	r3,-36(fp)
81117100:	00bfff84 	movi	r2,-2
81117104:	1884703a 	and	r2,r3,r2
81117108:	1001703a 	wrctl	status,r2
  
  return context;
8111710c:	e0bff717 	ldw	r2,-36(fp)
	    /* making sure the read-modify-write below can't be pre-empted */
	    context = alt_irq_disable_all(); 
81117110:	e0bff215 	stw	r2,-56(fp)
	    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
81117114:	e0bffb17 	ldw	r2,-20(fp)
81117118:	10800317 	ldw	r2,12(r2)
8111711c:	10800104 	addi	r2,r2,4
81117120:	e0fff117 	ldw	r3,-60(fp)
81117124:	10c00035 	stwio	r3,0(r2)
		IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
81117128:	e0bffb17 	ldw	r2,-20(fp)
8111712c:	10800617 	ldw	r2,24(r2)
81117130:	e0fff017 	ldw	r3,-64(fp)
81117134:	10c00035 	stwio	r3,0(r2)
81117138:	e0bff217 	ldw	r2,-56(fp)
8111713c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81117140:	e0bff417 	ldw	r2,-48(fp)
81117144:	1001703a 	wrctl	status,r2
81117148:	00002306 	br	811171d8 <alt_msgdma_start_prefetcher_with_list_addr+0x1f0>
	  *   - Stop on an error with any particular descriptor
	  *   - Disable interrupt generation
	  */
	 else
	 {
		 dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
8111714c:	e0bffb17 	ldw	r2,-20(fp)
81117150:	10c00d17 	ldw	r3,52(r2)
81117154:	e0bff117 	ldw	r2,-60(fp)
81117158:	1884b03a 	or	r2,r3,r2
8111715c:	10800114 	ori	r2,r2,4
81117160:	e0bff115 	stw	r2,-60(fp)
		 dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
81117164:	e0fff117 	ldw	r3,-60(fp)
81117168:	00bff3c4 	movi	r2,-49
8111716c:	1884703a 	and	r2,r3,r2
81117170:	e0bff115 	stw	r2,-60(fp)
				 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
81117174:	e0fff017 	ldw	r3,-64(fp)
81117178:	00bffdc4 	movi	r2,-9
8111717c:	1884703a 	and	r2,r3,r2
81117180:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81117184:	0005303a 	rdctl	r2,status
81117188:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111718c:	e0fff817 	ldw	r3,-32(fp)
81117190:	00bfff84 	movi	r2,-2
81117194:	1884703a 	and	r2,r3,r2
81117198:	1001703a 	wrctl	status,r2
  
  return context;
8111719c:	e0bff817 	ldw	r2,-32(fp)
	     /* making sure the read-modify-write below can't be pre-empted */
	     context = alt_irq_disable_all();
811171a0:	e0bff215 	stw	r2,-56(fp)
	     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
811171a4:	e0bffb17 	ldw	r2,-20(fp)
811171a8:	10800317 	ldw	r2,12(r2)
811171ac:	10800104 	addi	r2,r2,4
811171b0:	e0fff117 	ldw	r3,-60(fp)
811171b4:	10c00035 	stwio	r3,0(r2)
	     IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
811171b8:	e0bffb17 	ldw	r2,-20(fp)
811171bc:	10800617 	ldw	r2,24(r2)
811171c0:	e0fff017 	ldw	r3,-64(fp)
811171c4:	10c00035 	stwio	r3,0(r2)
811171c8:	e0bff217 	ldw	r2,-56(fp)
811171cc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811171d0:	e0bff617 	ldw	r2,-40(fp)
811171d4:	1001703a 	wrctl	status,r2
	     alt_irq_enable_all(context);
	 }   
	
	 /* set next descriptor registers to point to the list root-node */
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_LOW(dev->prefetcher_base,
811171d8:	e0bffb17 	ldw	r2,-20(fp)
811171dc:	10800617 	ldw	r2,24(r2)
811171e0:	10800104 	addi	r2,r2,4
811171e4:	e0fff917 	ldw	r3,-28(fp)
811171e8:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[0]);
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_HIGH(dev->prefetcher_base,
811171ec:	e0bffb17 	ldw	r2,-20(fp)
811171f0:	10800617 	ldw	r2,24(r2)
811171f4:	10800204 	addi	r2,r2,8
811171f8:	e0fffa17 	ldw	r3,-24(fp)
811171fc:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[1]);
		
	 /* set park-mode */
	 if (park_mode_en){
81117200:	e0bffe03 	ldbu	r2,-8(fp)
81117204:	10000426 	beq	r2,zero,81117218 <alt_msgdma_start_prefetcher_with_list_addr+0x230>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
81117208:	e0bff017 	ldw	r2,-64(fp)
8111720c:	10800414 	ori	r2,r2,16
81117210:	e0bff015 	stw	r2,-64(fp)
81117214:	00000406 	br	81117228 <alt_msgdma_start_prefetcher_with_list_addr+0x240>
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
81117218:	e0fff017 	ldw	r3,-64(fp)
8111721c:	00bffbc4 	movi	r2,-17
81117220:	1884703a 	and	r2,r3,r2
81117224:	e0bff015 	stw	r2,-64(fp)
	 }
	 
	 /* set poll-en */
	 if (poll_en){
81117228:	e0bfff03 	ldbu	r2,-4(fp)
8111722c:	10000e26 	beq	r2,zero,81117268 <alt_msgdma_start_prefetcher_with_list_addr+0x280>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
81117230:	e0bff017 	ldw	r2,-64(fp)
81117234:	10800094 	ori	r2,r2,2
81117238:	e0bff015 	stw	r2,-64(fp)
		 if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
8111723c:	e0bffb17 	ldw	r2,-20(fp)
81117240:	10800617 	ldw	r2,24(r2)
81117244:	10800304 	addi	r2,r2,12
81117248:	10800037 	ldwio	r2,0(r2)
8111724c:	10000a1e 	bne	r2,zero,81117278 <alt_msgdma_start_prefetcher_with_list_addr+0x290>
				 dev->prefetcher_base) == 0){
			 /* set poll frequency to some non-zero default value */
			 IOWR_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
81117250:	e0bffb17 	ldw	r2,-20(fp)
81117254:	10800617 	ldw	r2,24(r2)
81117258:	10800304 	addi	r2,r2,12
8111725c:	00c03fc4 	movi	r3,255
81117260:	10c00035 	stwio	r3,0(r2)
81117264:	00000406 	br	81117278 <alt_msgdma_start_prefetcher_with_list_addr+0x290>
					 dev->prefetcher_base, 0xFF);
		 }
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_CLR_MASK; 
81117268:	e0fff017 	ldw	r3,-64(fp)
8111726c:	00bfff44 	movi	r2,-3
81117270:	1884703a 	and	r2,r3,r2
81117274:	e0bff015 	stw	r2,-64(fp)
	 }
	 
	 /* set the prefetcher run bit */
	 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_RUN_SET_MASK;
81117278:	e0bff017 	ldw	r2,-64(fp)
8111727c:	10800054 	ori	r2,r2,1
81117280:	e0bff015 	stw	r2,-64(fp)
	 /* start the dma since run bit is set */
	 IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
81117284:	e0bffb17 	ldw	r2,-20(fp)
81117288:	10800617 	ldw	r2,24(r2)
8111728c:	e0fff017 	ldw	r3,-64(fp)
81117290:	10c00035 	stwio	r3,0(r2)
	  * Now that access to the registers is complete, release the registers
	  * semaphore so that other threads can access the registers.
	  */
	 ALT_SEM_POST (dev->regs_lock);
	 
	 return 0;
81117294:	0005883a 	mov	r2,zero
}
81117298:	e037883a 	mov	sp,fp
8111729c:	df000017 	ldw	fp,0(sp)
811172a0:	dec00104 	addi	sp,sp,4
811172a4:	f800283a 	ret

811172a8 <alt_msgdma_start_prefetcher_with_std_desc_list>:
int alt_msgdma_start_prefetcher_with_std_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{	
811172a8:	defff704 	addi	sp,sp,-36
811172ac:	dfc00815 	stw	ra,32(sp)
811172b0:	df000715 	stw	fp,28(sp)
811172b4:	dc400615 	stw	r17,24(sp)
811172b8:	dc000515 	stw	r16,20(sp)
811172bc:	df000704 	addi	fp,sp,28
811172c0:	e13ffa15 	stw	r4,-24(fp)
811172c4:	e17ffb15 	stw	r5,-20(fp)
811172c8:	3007883a 	mov	r3,r6
811172cc:	3805883a 	mov	r2,r7
811172d0:	e0fffc05 	stb	r3,-16(fp)
811172d4:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_std_list_own_by_hw_bits(list) != 0){
811172d8:	e13ffb17 	ldw	r4,-20(fp)
811172dc:	1116e7c0 	call	81116e7c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>
811172e0:	10000226 	beq	r2,zero,811172ec <alt_msgdma_start_prefetcher_with_std_desc_list+0x44>
		return -EINVAL;
811172e4:	00bffa84 	movi	r2,-22
811172e8:	00000b06 	br	81117318 <alt_msgdma_start_prefetcher_with_std_desc_list+0x70>
	}
	
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list,
811172ec:	e0bffb17 	ldw	r2,-20(fp)
811172f0:	1021883a 	mov	r16,r2
811172f4:	0023883a 	mov	r17,zero
811172f8:	e0fffc03 	ldbu	r3,-16(fp)
811172fc:	e0bffd03 	ldbu	r2,-12(fp)
81117300:	d8800015 	stw	r2,0(sp)
81117304:	180f883a 	mov	r7,r3
81117308:	800b883a 	mov	r5,r16
8111730c:	880d883a 	mov	r6,r17
81117310:	e13ffa17 	ldw	r4,-24(fp)
81117314:	1116fe80 	call	81116fe8 <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
81117318:	e6fffe04 	addi	sp,fp,-8
8111731c:	dfc00317 	ldw	ra,12(sp)
81117320:	df000217 	ldw	fp,8(sp)
81117324:	dc400117 	ldw	r17,4(sp)
81117328:	dc000017 	ldw	r16,0(sp)
8111732c:	dec00404 	addi	sp,sp,16
81117330:	f800283a 	ret

81117334 <alt_msgdma_start_prefetcher_with_extd_desc_list>:
int alt_msgdma_start_prefetcher_with_extd_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_extended_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
81117334:	defff704 	addi	sp,sp,-36
81117338:	dfc00815 	stw	ra,32(sp)
8111733c:	df000715 	stw	fp,28(sp)
81117340:	dc400615 	stw	r17,24(sp)
81117344:	dc000515 	stw	r16,20(sp)
81117348:	df000704 	addi	fp,sp,28
8111734c:	e13ffa15 	stw	r4,-24(fp)
81117350:	e17ffb15 	stw	r5,-20(fp)
81117354:	3007883a 	mov	r3,r6
81117358:	3805883a 	mov	r2,r7
8111735c:	e0fffc05 	stb	r3,-16(fp)
81117360:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits(list) != 0){
81117364:	e13ffb17 	ldw	r4,-20(fp)
81117368:	1116f140 	call	81116f14 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>
8111736c:	10000226 	beq	r2,zero,81117378 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x44>
		return -EINVAL;
81117370:	00bffa84 	movi	r2,-22
81117374:	00000b06 	br	811173a4 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x70>
	}
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list, 
81117378:	e0bffb17 	ldw	r2,-20(fp)
8111737c:	1021883a 	mov	r16,r2
81117380:	0023883a 	mov	r17,zero
81117384:	e0fffc03 	ldbu	r3,-16(fp)
81117388:	e0bffd03 	ldbu	r2,-12(fp)
8111738c:	d8800015 	stw	r2,0(sp)
81117390:	180f883a 	mov	r7,r3
81117394:	800b883a 	mov	r5,r16
81117398:	880d883a 	mov	r6,r17
8111739c:	e13ffa17 	ldw	r4,-24(fp)
811173a0:	1116fe80 	call	81116fe8 <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
811173a4:	e6fffe04 	addi	sp,fp,-8
811173a8:	dfc00317 	ldw	ra,12(sp)
811173ac:	df000217 	ldw	fp,8(sp)
811173b0:	dc400117 	ldw	r17,4(sp)
811173b4:	dc000017 	ldw	r16,0(sp)
811173b8:	dec00404 	addi	sp,sp,16
811173bc:	f800283a 	ret

811173c0 <alt_msgdma_open>:
 * Returns:
 * - Pointer to msgdma device instance structure, or null if the device
 *   could not be opened.
 */
alt_msgdma_dev* alt_msgdma_open (const char* name)
{
811173c0:	defffc04 	addi	sp,sp,-16
811173c4:	dfc00315 	stw	ra,12(sp)
811173c8:	df000215 	stw	fp,8(sp)
811173cc:	df000204 	addi	fp,sp,8
811173d0:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev* dev = NULL;
811173d4:	e03ffe15 	stw	zero,-8(fp)

    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);
811173d8:	d1601004 	addi	r5,gp,-32704
811173dc:	e13fff17 	ldw	r4,-4(fp)
811173e0:	1117abc0 	call	81117abc <alt_find_dev>
811173e4:	e0bffe15 	stw	r2,-8(fp)

    if (NULL == dev)
811173e8:	e0bffe17 	ldw	r2,-8(fp)
811173ec:	1000041e 	bne	r2,zero,81117400 <alt_msgdma_open+0x40>
    {
        ALT_ERRNO = ENODEV;
811173f0:	111584c0 	call	8111584c <alt_get_errno>
811173f4:	1007883a 	mov	r3,r2
811173f8:	008004c4 	movi	r2,19
811173fc:	18800015 	stw	r2,0(r3)
    }

    return dev;
81117400:	e0bffe17 	ldw	r2,-8(fp)
}
81117404:	e037883a 	mov	sp,fp
81117408:	dfc00117 	ldw	ra,4(sp)
8111740c:	df000017 	ldw	fp,0(sp)
81117410:	dec00204 	addi	sp,sp,8
81117414:	f800283a 	ret

81117418 <alt_msgdma_init>:
 * This routine disables interrupts, descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_msgdma_init (alt_msgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
81117418:	defff804 	addi	sp,sp,-32
8111741c:	dfc00715 	stw	ra,28(sp)
81117420:	df000615 	stw	fp,24(sp)
81117424:	df000604 	addi	fp,sp,24
81117428:	e13ffd15 	stw	r4,-12(fp)
8111742c:	e17ffe15 	stw	r5,-8(fp)
81117430:	e1bfff15 	stw	r6,-4(fp)
    extern alt_llist alt_msgdma_list;
    alt_u32 temporary_control;
    int error;

    if (dev->prefetcher_enable)
81117434:	e0bffd17 	ldw	r2,-12(fp)
81117438:	10801783 	ldbu	r2,94(r2)
8111743c:	10803fcc 	andi	r2,r2,255
81117440:	10000b26 	beq	r2,zero,81117470 <alt_msgdma_init+0x58>
    {
    	/* start prefetcher reset sequence */
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, 
81117444:	e0bffd17 	ldw	r2,-12(fp)
81117448:	10800617 	ldw	r2,24(r2)
8111744c:	00c00104 	movi	r3,4
81117450:	10c00035 	stwio	r3,0(r2)
    			ALT_MSGDMA_PREFETCHER_CTRL_RESET_SET_MASK);
    	/* wait until hw clears the bit */
    	while(ALT_MSGDMA_PREFETCHER_CTRL_RESET_GET(
81117454:	0001883a 	nop
81117458:	e0bffd17 	ldw	r2,-12(fp)
8111745c:	10800617 	ldw	r2,24(r2)
81117460:	10800037 	ldwio	r2,0(r2)
81117464:	1080010c 	andi	r2,r2,4
81117468:	1005d0ba 	srai	r2,r2,2
8111746c:	103ffa1e 	bne	r2,zero,81117458 <__reset+0xfb0f7458>
    }    
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
81117470:	e0bffd17 	ldw	r2,-12(fp)
81117474:	10800317 	ldw	r2,12(r2)
81117478:	10800104 	addi	r2,r2,4
8111747c:	00c00084 	movi	r3,2
81117480:	10c00035 	stwio	r3,0(r2)
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
81117484:	0001883a 	nop
81117488:	e0bffd17 	ldw	r2,-12(fp)
8111748c:	10800317 	ldw	r2,12(r2)
81117490:	10800037 	ldwio	r2,0(r2)
    		& ALTERA_MSGDMA_CSR_RESET_STATE_MASK));
81117494:	1080100c 	andi	r2,r2,64
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
81117498:	103ffb1e 	bne	r2,zero,81117488 <__reset+0xfb0f7488>
    * Disable interrupts, halt descriptor processing,
    * and clear status register content
    */

    /* disable global interrupt */
    temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
8111749c:	e0bffd17 	ldw	r2,-12(fp)
811174a0:	10800317 	ldw	r2,12(r2)
811174a4:	10800104 	addi	r2,r2,4
811174a8:	10800037 	ldwio	r2,0(r2)
811174ac:	1007883a 	mov	r3,r2
811174b0:	00bffbc4 	movi	r2,-17
811174b4:	1884703a 	and	r2,r3,r2
811174b8:	e0bffb15 	stw	r2,-20(fp)
    		& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    /* stopping descriptor */
    temporary_control |= ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
811174bc:	e0bffb17 	ldw	r2,-20(fp)
811174c0:	10800814 	ori	r2,r2,32
811174c4:	e0bffb15 	stw	r2,-20(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
811174c8:	e0bffd17 	ldw	r2,-12(fp)
811174cc:	10800317 	ldw	r2,12(r2)
811174d0:	10800104 	addi	r2,r2,4
811174d4:	e0fffb17 	ldw	r3,-20(fp)
811174d8:	10c00035 	stwio	r3,0(r2)

    /* clear the CSR status register */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base, 
811174dc:	e0bffd17 	ldw	r2,-12(fp)
811174e0:	10800317 	ldw	r2,12(r2)
811174e4:	e0fffd17 	ldw	r3,-12(fp)
811174e8:	18c00317 	ldw	r3,12(r3)
811174ec:	18c00037 	ldwio	r3,0(r3)
811174f0:	10c00035 	stwio	r3,0(r2)
    		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    
    if (dev->prefetcher_enable)
811174f4:	e0bffd17 	ldw	r2,-12(fp)
811174f8:	10801783 	ldbu	r2,94(r2)
811174fc:	10803fcc 	andi	r2,r2,255
81117500:	10000826 	beq	r2,zero,81117524 <alt_msgdma_init+0x10c>
    {
    	/* clear all status bits that are set, since theyre W1C */
    	IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base, 
81117504:	e0bffd17 	ldw	r2,-12(fp)
81117508:	10800617 	ldw	r2,24(r2)
8111750c:	10800404 	addi	r2,r2,16
81117510:	e0fffd17 	ldw	r3,-12(fp)
81117514:	18c00617 	ldw	r3,24(r3)
81117518:	18c00404 	addi	r3,r3,16
8111751c:	18c00037 	ldwio	r3,0(r3)
81117520:	10c00035 	stwio	r3,0(r2)
    			IORD_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base));
    }

    /* Register this instance of the msgdma controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_msgdma_list);
81117524:	d1601004 	addi	r5,gp,-32704
81117528:	e13ffd17 	ldw	r4,-12(fp)
8111752c:	11179580 	call	81117958 <alt_dev_llist_insert>
81117530:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
81117534:	e0bffc15 	stw	r2,-16(fp)
            
    if (!error)
81117538:	e0bffc17 	ldw	r2,-16(fp)
8111753c:	1000081e 	bne	r2,zero,81117560 <alt_msgdma_init+0x148>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
81117540:	d8000015 	stw	zero,0(sp)
81117544:	e1fffd17 	ldw	r7,-12(fp)
81117548:	01a04474 	movhi	r6,33041
8111754c:	31969204 	addi	r6,r6,23112
81117550:	e17fff17 	ldw	r5,-4(fp)
81117554:	e13ffe17 	ldw	r4,-8(fp)
81117558:	1117b4c0 	call	81117b4c <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }
    
    return;
8111755c:	00000406 	br	81117570 <alt_msgdma_init+0x158>
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
81117560:	012044b4 	movhi	r4,33042
81117564:	21279e04 	addi	r4,r4,-24968
81117568:	11181800 	call	81118180 <alt_printf>
    }
    
    return;
8111756c:	0001883a 	nop

}
81117570:	e037883a 	mov	sp,fp
81117574:	dfc00117 	ldw	ra,4(sp)
81117578:	df000017 	ldw	fp,0(sp)
8111757c:	dec00204 	addi	sp,sp,8
81117580:	f800283a 	ret

81117584 <alt_msgdma_register_callback>:
void alt_msgdma_register_callback(
	alt_msgdma_dev *dev,
	alt_msgdma_callback callback,
	alt_u32 control,
	void *context)
{
81117584:	defffb04 	addi	sp,sp,-20
81117588:	df000415 	stw	fp,16(sp)
8111758c:	df000404 	addi	fp,sp,16
81117590:	e13ffc15 	stw	r4,-16(fp)
81117594:	e17ffd15 	stw	r5,-12(fp)
81117598:	e1bffe15 	stw	r6,-8(fp)
8111759c:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
811175a0:	e0bffc17 	ldw	r2,-16(fp)
811175a4:	e0fffd17 	ldw	r3,-12(fp)
811175a8:	10c00b15 	stw	r3,44(r2)
    dev->callback_context = context;
811175ac:	e0bffc17 	ldw	r2,-16(fp)
811175b0:	e0ffff17 	ldw	r3,-4(fp)
811175b4:	10c00c15 	stw	r3,48(r2)
    dev->control          = control;
811175b8:	e0bffc17 	ldw	r2,-16(fp)
811175bc:	e0fffe17 	ldw	r3,-8(fp)
811175c0:	10c00d15 	stw	r3,52(r2)

    return ;
811175c4:	0001883a 	nop
}
811175c8:	e037883a 	mov	sp,fp
811175cc:	df000017 	ldw	fp,0(sp)
811175d0:	dec00104 	addi	sp,sp,4
811175d4:	f800283a 	ret

811175d8 <alt_msgdma_standard_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_standard_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
811175d8:	defffc04 	addi	sp,sp,-16
811175dc:	dfc00315 	stw	ra,12(sp)
811175e0:	df000215 	stw	fp,8(sp)
811175e4:	df000204 	addi	fp,sp,8
811175e8:	e13ffe15 	stw	r4,-8(fp)
811175ec:	e17fff15 	stw	r5,-4(fp)
   /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
    return alt_msgdma_descriptor_async_transfer(dev, desc, NULL);
811175f0:	000d883a 	mov	r6,zero
811175f4:	e17fff17 	ldw	r5,-4(fp)
811175f8:	e13ffe17 	ldw	r4,-8(fp)
811175fc:	1115dac0 	call	81115dac <alt_msgdma_descriptor_async_transfer>

}
81117600:	e037883a 	mov	sp,fp
81117604:	dfc00117 	ldw	ra,4(sp)
81117608:	df000017 	ldw	fp,0(sp)
8111760c:	dec00204 	addi	sp,sp,8
81117610:	f800283a 	ret

81117614 <alt_msgdma_extended_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_extended_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
81117614:	defffc04 	addi	sp,sp,-16
81117618:	dfc00315 	stw	ra,12(sp)
8111761c:	df000215 	stw	fp,8(sp)
81117620:	df000204 	addi	fp,sp,8
81117624:	e13ffe15 	stw	r4,-8(fp)
81117628:	e17fff15 	stw	r5,-4(fp)
    /*
    * Error detection/handling should be performed at the application
    * or callback level as appropriate.
    */
    return alt_msgdma_descriptor_async_transfer(dev, NULL, desc);
8111762c:	e1bfff17 	ldw	r6,-4(fp)
81117630:	000b883a 	mov	r5,zero
81117634:	e13ffe17 	ldw	r4,-8(fp)
81117638:	1115dac0 	call	81115dac <alt_msgdma_descriptor_async_transfer>
}
8111763c:	e037883a 	mov	sp,fp
81117640:	dfc00117 	ldw	ra,4(sp)
81117644:	df000017 	ldw	fp,0(sp)
81117648:	dec00204 	addi	sp,sp,8
8111764c:	f800283a 	ret

81117650 <alt_msgdma_standard_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_standard_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
81117650:	defffc04 	addi	sp,sp,-16
81117654:	dfc00315 	stw	ra,12(sp)
81117658:	df000215 	stw	fp,8(sp)
8111765c:	df000204 	addi	fp,sp,8
81117660:	e13ffe15 	stw	r4,-8(fp)
81117664:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, desc, NULL);
81117668:	000d883a 	mov	r6,zero
8111766c:	e17fff17 	ldw	r5,-4(fp)
81117670:	e13ffe17 	ldw	r4,-8(fp)
81117674:	111607c0 	call	8111607c <alt_msgdma_descriptor_sync_transfer>
}
81117678:	e037883a 	mov	sp,fp
8111767c:	dfc00117 	ldw	ra,4(sp)
81117680:	df000017 	ldw	fp,0(sp)
81117684:	dec00204 	addi	sp,sp,8
81117688:	f800283a 	ret

8111768c <alt_msgdma_extended_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_extended_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
8111768c:	defffc04 	addi	sp,sp,-16
81117690:	dfc00315 	stw	ra,12(sp)
81117694:	df000215 	stw	fp,8(sp)
81117698:	df000204 	addi	fp,sp,8
8111769c:	e13ffe15 	stw	r4,-8(fp)
811176a0:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, NULL, desc);
811176a4:	e1bfff17 	ldw	r6,-4(fp)
811176a8:	000b883a 	mov	r5,zero
811176ac:	e13ffe17 	ldw	r4,-8(fp)
811176b0:	111607c0 	call	8111607c <alt_msgdma_descriptor_sync_transfer>
}
811176b4:	e037883a 	mov	sp,fp
811176b8:	dfc00117 	ldw	ra,4(sp)
811176bc:	df000017 	ldw	fp,0(sp)
811176c0:	dec00204 	addi	sp,sp,8
811176c4:	f800283a 	ret

811176c8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
811176c8:	defff504 	addi	sp,sp,-44
811176cc:	df000a15 	stw	fp,40(sp)
811176d0:	df000a04 	addi	fp,sp,40
811176d4:	e13ffc15 	stw	r4,-16(fp)
811176d8:	e17ffd15 	stw	r5,-12(fp)
811176dc:	e1bffe15 	stw	r6,-8(fp)
811176e0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
811176e4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
811176e8:	d0a02217 	ldw	r2,-32632(gp)
  
  if (alt_ticks_per_second ())
811176ec:	10003c26 	beq	r2,zero,811177e0 <alt_alarm_start+0x118>
  {
    if (alarm)
811176f0:	e0bffc17 	ldw	r2,-16(fp)
811176f4:	10003826 	beq	r2,zero,811177d8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
811176f8:	e0bffc17 	ldw	r2,-16(fp)
811176fc:	e0fffe17 	ldw	r3,-8(fp)
81117700:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
81117704:	e0bffc17 	ldw	r2,-16(fp)
81117708:	e0ffff17 	ldw	r3,-4(fp)
8111770c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81117710:	0005303a 	rdctl	r2,status
81117714:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81117718:	e0fff917 	ldw	r3,-28(fp)
8111771c:	00bfff84 	movi	r2,-2
81117720:	1884703a 	and	r2,r3,r2
81117724:	1001703a 	wrctl	status,r2
  
  return context;
81117728:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
8111772c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81117730:	d0a02317 	ldw	r2,-32628(gp)
      
      current_nticks = alt_nticks();
81117734:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
81117738:	e0fffd17 	ldw	r3,-12(fp)
8111773c:	e0bff617 	ldw	r2,-40(fp)
81117740:	1885883a 	add	r2,r3,r2
81117744:	10c00044 	addi	r3,r2,1
81117748:	e0bffc17 	ldw	r2,-16(fp)
8111774c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
81117750:	e0bffc17 	ldw	r2,-16(fp)
81117754:	10c00217 	ldw	r3,8(r2)
81117758:	e0bff617 	ldw	r2,-40(fp)
8111775c:	1880042e 	bgeu	r3,r2,81117770 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
81117760:	e0bffc17 	ldw	r2,-16(fp)
81117764:	00c00044 	movi	r3,1
81117768:	10c00405 	stb	r3,16(r2)
8111776c:	00000206 	br	81117778 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
81117770:	e0bffc17 	ldw	r2,-16(fp)
81117774:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
81117778:	e0bffc17 	ldw	r2,-16(fp)
8111777c:	d0e00e04 	addi	r3,gp,-32712
81117780:	e0fffa15 	stw	r3,-24(fp)
81117784:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
81117788:	e0bffb17 	ldw	r2,-20(fp)
8111778c:	e0fffa17 	ldw	r3,-24(fp)
81117790:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
81117794:	e0bffa17 	ldw	r2,-24(fp)
81117798:	10c00017 	ldw	r3,0(r2)
8111779c:	e0bffb17 	ldw	r2,-20(fp)
811177a0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
811177a4:	e0bffa17 	ldw	r2,-24(fp)
811177a8:	10800017 	ldw	r2,0(r2)
811177ac:	e0fffb17 	ldw	r3,-20(fp)
811177b0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
811177b4:	e0bffa17 	ldw	r2,-24(fp)
811177b8:	e0fffb17 	ldw	r3,-20(fp)
811177bc:	10c00015 	stw	r3,0(r2)
811177c0:	e0bff817 	ldw	r2,-32(fp)
811177c4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811177c8:	e0bff717 	ldw	r2,-36(fp)
811177cc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
811177d0:	0005883a 	mov	r2,zero
811177d4:	00000306 	br	811177e4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
811177d8:	00bffa84 	movi	r2,-22
811177dc:	00000106 	br	811177e4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
811177e0:	00bfde84 	movi	r2,-134
  }
}
811177e4:	e037883a 	mov	sp,fp
811177e8:	df000017 	ldw	fp,0(sp)
811177ec:	dec00104 	addi	sp,sp,4
811177f0:	f800283a 	ret

811177f4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
811177f4:	defffb04 	addi	sp,sp,-20
811177f8:	df000415 	stw	fp,16(sp)
811177fc:	df000404 	addi	fp,sp,16
81117800:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
81117804:	008000c4 	movi	r2,3
81117808:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
8111780c:	e0fffd17 	ldw	r3,-12(fp)
81117810:	008003f4 	movhi	r2,15
81117814:	10909004 	addi	r2,r2,16960
81117818:	1887383a 	mul	r3,r3,r2
8111781c:	00817db4 	movhi	r2,1526
81117820:	10b84004 	addi	r2,r2,-7936
81117824:	10c7203a 	divu	r3,r2,r3
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
81117828:	00a00034 	movhi	r2,32768
8111782c:	10bfffc4 	addi	r2,r2,-1
81117830:	10c5203a 	divu	r2,r2,r3
81117834:	e0ffff17 	ldw	r3,-4(fp)
81117838:	1885203a 	divu	r2,r3,r2
8111783c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
81117840:	e0bffe17 	ldw	r2,-8(fp)
81117844:	10002526 	beq	r2,zero,811178dc <alt_busy_sleep+0xe8>
  {
    for(i=0;i<big_loops;i++)
81117848:	e03ffc15 	stw	zero,-16(fp)
8111784c:	00001406 	br	811178a0 <alt_busy_sleep+0xac>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
81117850:	00a00034 	movhi	r2,32768
81117854:	10bfffc4 	addi	r2,r2,-1
81117858:	10bfffc4 	addi	r2,r2,-1
8111785c:	103ffe1e 	bne	r2,zero,81117858 <__reset+0xfb0f7858>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
81117860:	e0fffd17 	ldw	r3,-12(fp)
81117864:	008003f4 	movhi	r2,15
81117868:	10909004 	addi	r2,r2,16960
8111786c:	1887383a 	mul	r3,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
81117870:	00817db4 	movhi	r2,1526
81117874:	10b84004 	addi	r2,r2,-7936
81117878:	10c7203a 	divu	r3,r2,r3
8111787c:	00a00034 	movhi	r2,32768
81117880:	10bfffc4 	addi	r2,r2,-1
81117884:	10c5203a 	divu	r2,r2,r3
81117888:	e0ffff17 	ldw	r3,-4(fp)
8111788c:	1885c83a 	sub	r2,r3,r2
81117890:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
81117894:	e0bffc17 	ldw	r2,-16(fp)
81117898:	10800044 	addi	r2,r2,1
8111789c:	e0bffc15 	stw	r2,-16(fp)
811178a0:	e0fffc17 	ldw	r3,-16(fp)
811178a4:	e0bffe17 	ldw	r2,-8(fp)
811178a8:	18bfe916 	blt	r3,r2,81117850 <__reset+0xfb0f7850>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
811178ac:	e0fffd17 	ldw	r3,-12(fp)
811178b0:	008003f4 	movhi	r2,15
811178b4:	10909004 	addi	r2,r2,16960
811178b8:	1887383a 	mul	r3,r3,r2
811178bc:	00817db4 	movhi	r2,1526
811178c0:	10b84004 	addi	r2,r2,-7936
811178c4:	10c7203a 	divu	r3,r2,r3
811178c8:	e0bfff17 	ldw	r2,-4(fp)
811178cc:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
811178d0:	10bfffc4 	addi	r2,r2,-1
811178d4:	103ffe1e 	bne	r2,zero,811178d0 <__reset+0xfb0f78d0>
811178d8:	00000b06 	br	81117908 <alt_busy_sleep+0x114>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
811178dc:	e0fffd17 	ldw	r3,-12(fp)
811178e0:	008003f4 	movhi	r2,15
811178e4:	10909004 	addi	r2,r2,16960
811178e8:	1887383a 	mul	r3,r3,r2
811178ec:	00817db4 	movhi	r2,1526
811178f0:	10b84004 	addi	r2,r2,-7936
811178f4:	10c7203a 	divu	r3,r2,r3
811178f8:	e0bfff17 	ldw	r2,-4(fp)
811178fc:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
81117900:	10bfffc4 	addi	r2,r2,-1
81117904:	00bffe16 	blt	zero,r2,81117900 <__reset+0xfb0f7900>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
81117908:	0005883a 	mov	r2,zero
}
8111790c:	e037883a 	mov	sp,fp
81117910:	df000017 	ldw	fp,0(sp)
81117914:	dec00104 	addi	sp,sp,4
81117918:	f800283a 	ret

8111791c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8111791c:	defffe04 	addi	sp,sp,-8
81117920:	dfc00115 	stw	ra,4(sp)
81117924:	df000015 	stw	fp,0(sp)
81117928:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8111792c:	d0a00b17 	ldw	r2,-32724(gp)
81117930:	10000326 	beq	r2,zero,81117940 <alt_get_errno+0x24>
81117934:	d0a00b17 	ldw	r2,-32724(gp)
81117938:	103ee83a 	callr	r2
8111793c:	00000106 	br	81117944 <alt_get_errno+0x28>
81117940:	d0a01a04 	addi	r2,gp,-32664
}
81117944:	e037883a 	mov	sp,fp
81117948:	dfc00117 	ldw	ra,4(sp)
8111794c:	df000017 	ldw	fp,0(sp)
81117950:	dec00204 	addi	sp,sp,8
81117954:	f800283a 	ret

81117958 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
81117958:	defffa04 	addi	sp,sp,-24
8111795c:	dfc00515 	stw	ra,20(sp)
81117960:	df000415 	stw	fp,16(sp)
81117964:	df000404 	addi	fp,sp,16
81117968:	e13ffe15 	stw	r4,-8(fp)
8111796c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
81117970:	e0bffe17 	ldw	r2,-8(fp)
81117974:	10000326 	beq	r2,zero,81117984 <alt_dev_llist_insert+0x2c>
81117978:	e0bffe17 	ldw	r2,-8(fp)
8111797c:	10800217 	ldw	r2,8(r2)
81117980:	1000061e 	bne	r2,zero,8111799c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
81117984:	111791c0 	call	8111791c <alt_get_errno>
81117988:	1007883a 	mov	r3,r2
8111798c:	00800584 	movi	r2,22
81117990:	18800015 	stw	r2,0(r3)
    return -EINVAL;
81117994:	00bffa84 	movi	r2,-22
81117998:	00001306 	br	811179e8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
8111799c:	e0bffe17 	ldw	r2,-8(fp)
811179a0:	e0ffff17 	ldw	r3,-4(fp)
811179a4:	e0fffc15 	stw	r3,-16(fp)
811179a8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
811179ac:	e0bffd17 	ldw	r2,-12(fp)
811179b0:	e0fffc17 	ldw	r3,-16(fp)
811179b4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
811179b8:	e0bffc17 	ldw	r2,-16(fp)
811179bc:	10c00017 	ldw	r3,0(r2)
811179c0:	e0bffd17 	ldw	r2,-12(fp)
811179c4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
811179c8:	e0bffc17 	ldw	r2,-16(fp)
811179cc:	10800017 	ldw	r2,0(r2)
811179d0:	e0fffd17 	ldw	r3,-12(fp)
811179d4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
811179d8:	e0bffc17 	ldw	r2,-16(fp)
811179dc:	e0fffd17 	ldw	r3,-12(fp)
811179e0:	10c00015 	stw	r3,0(r2)

  return 0;  
811179e4:	0005883a 	mov	r2,zero
}
811179e8:	e037883a 	mov	sp,fp
811179ec:	dfc00117 	ldw	ra,4(sp)
811179f0:	df000017 	ldw	fp,0(sp)
811179f4:	dec00204 	addi	sp,sp,8
811179f8:	f800283a 	ret

811179fc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
811179fc:	defffd04 	addi	sp,sp,-12
81117a00:	dfc00215 	stw	ra,8(sp)
81117a04:	df000115 	stw	fp,4(sp)
81117a08:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
81117a0c:	00a044b4 	movhi	r2,33042
81117a10:	10a2d404 	addi	r2,r2,-29872
81117a14:	e0bfff15 	stw	r2,-4(fp)
81117a18:	00000606 	br	81117a34 <_do_ctors+0x38>
        (*ctor) (); 
81117a1c:	e0bfff17 	ldw	r2,-4(fp)
81117a20:	10800017 	ldw	r2,0(r2)
81117a24:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
81117a28:	e0bfff17 	ldw	r2,-4(fp)
81117a2c:	10bfff04 	addi	r2,r2,-4
81117a30:	e0bfff15 	stw	r2,-4(fp)
81117a34:	e0ffff17 	ldw	r3,-4(fp)
81117a38:	00a044b4 	movhi	r2,33042
81117a3c:	10a2d504 	addi	r2,r2,-29868
81117a40:	18bff62e 	bgeu	r3,r2,81117a1c <__reset+0xfb0f7a1c>
        (*ctor) (); 
}
81117a44:	0001883a 	nop
81117a48:	e037883a 	mov	sp,fp
81117a4c:	dfc00117 	ldw	ra,4(sp)
81117a50:	df000017 	ldw	fp,0(sp)
81117a54:	dec00204 	addi	sp,sp,8
81117a58:	f800283a 	ret

81117a5c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
81117a5c:	defffd04 	addi	sp,sp,-12
81117a60:	dfc00215 	stw	ra,8(sp)
81117a64:	df000115 	stw	fp,4(sp)
81117a68:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
81117a6c:	00a044b4 	movhi	r2,33042
81117a70:	10a2d404 	addi	r2,r2,-29872
81117a74:	e0bfff15 	stw	r2,-4(fp)
81117a78:	00000606 	br	81117a94 <_do_dtors+0x38>
        (*dtor) (); 
81117a7c:	e0bfff17 	ldw	r2,-4(fp)
81117a80:	10800017 	ldw	r2,0(r2)
81117a84:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
81117a88:	e0bfff17 	ldw	r2,-4(fp)
81117a8c:	10bfff04 	addi	r2,r2,-4
81117a90:	e0bfff15 	stw	r2,-4(fp)
81117a94:	e0ffff17 	ldw	r3,-4(fp)
81117a98:	00a044b4 	movhi	r2,33042
81117a9c:	10a2d504 	addi	r2,r2,-29868
81117aa0:	18bff62e 	bgeu	r3,r2,81117a7c <__reset+0xfb0f7a7c>
        (*dtor) (); 
}
81117aa4:	0001883a 	nop
81117aa8:	e037883a 	mov	sp,fp
81117aac:	dfc00117 	ldw	ra,4(sp)
81117ab0:	df000017 	ldw	fp,0(sp)
81117ab4:	dec00204 	addi	sp,sp,8
81117ab8:	f800283a 	ret

81117abc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
81117abc:	defffa04 	addi	sp,sp,-24
81117ac0:	dfc00515 	stw	ra,20(sp)
81117ac4:	df000415 	stw	fp,16(sp)
81117ac8:	df000404 	addi	fp,sp,16
81117acc:	e13ffe15 	stw	r4,-8(fp)
81117ad0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
81117ad4:	e0bfff17 	ldw	r2,-4(fp)
81117ad8:	10800017 	ldw	r2,0(r2)
81117adc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
81117ae0:	e13ffe17 	ldw	r4,-8(fp)
81117ae4:	1102ebc0 	call	81102ebc <strlen>
81117ae8:	10800044 	addi	r2,r2,1
81117aec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
81117af0:	00000d06 	br	81117b28 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
81117af4:	e0bffc17 	ldw	r2,-16(fp)
81117af8:	10800217 	ldw	r2,8(r2)
81117afc:	e0fffd17 	ldw	r3,-12(fp)
81117b00:	180d883a 	mov	r6,r3
81117b04:	e17ffe17 	ldw	r5,-8(fp)
81117b08:	1009883a 	mov	r4,r2
81117b0c:	11186a00 	call	811186a0 <memcmp>
81117b10:	1000021e 	bne	r2,zero,81117b1c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
81117b14:	e0bffc17 	ldw	r2,-16(fp)
81117b18:	00000706 	br	81117b38 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
81117b1c:	e0bffc17 	ldw	r2,-16(fp)
81117b20:	10800017 	ldw	r2,0(r2)
81117b24:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
81117b28:	e0fffc17 	ldw	r3,-16(fp)
81117b2c:	e0bfff17 	ldw	r2,-4(fp)
81117b30:	18bff01e 	bne	r3,r2,81117af4 <__reset+0xfb0f7af4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
81117b34:	0005883a 	mov	r2,zero
}
81117b38:	e037883a 	mov	sp,fp
81117b3c:	dfc00117 	ldw	ra,4(sp)
81117b40:	df000017 	ldw	fp,0(sp)
81117b44:	dec00204 	addi	sp,sp,8
81117b48:	f800283a 	ret

81117b4c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
81117b4c:	defff904 	addi	sp,sp,-28
81117b50:	dfc00615 	stw	ra,24(sp)
81117b54:	df000515 	stw	fp,20(sp)
81117b58:	df000504 	addi	fp,sp,20
81117b5c:	e13ffc15 	stw	r4,-16(fp)
81117b60:	e17ffd15 	stw	r5,-12(fp)
81117b64:	e1bffe15 	stw	r6,-8(fp)
81117b68:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
81117b6c:	e0800217 	ldw	r2,8(fp)
81117b70:	d8800015 	stw	r2,0(sp)
81117b74:	e1ffff17 	ldw	r7,-4(fp)
81117b78:	e1bffe17 	ldw	r6,-8(fp)
81117b7c:	e17ffd17 	ldw	r5,-12(fp)
81117b80:	e13ffc17 	ldw	r4,-16(fp)
81117b84:	1117cfc0 	call	81117cfc <alt_iic_isr_register>
}  
81117b88:	e037883a 	mov	sp,fp
81117b8c:	dfc00117 	ldw	ra,4(sp)
81117b90:	df000017 	ldw	fp,0(sp)
81117b94:	dec00204 	addi	sp,sp,8
81117b98:	f800283a 	ret

81117b9c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
81117b9c:	defff904 	addi	sp,sp,-28
81117ba0:	df000615 	stw	fp,24(sp)
81117ba4:	df000604 	addi	fp,sp,24
81117ba8:	e13ffe15 	stw	r4,-8(fp)
81117bac:	e17fff15 	stw	r5,-4(fp)
81117bb0:	e0bfff17 	ldw	r2,-4(fp)
81117bb4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81117bb8:	0005303a 	rdctl	r2,status
81117bbc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81117bc0:	e0fffb17 	ldw	r3,-20(fp)
81117bc4:	00bfff84 	movi	r2,-2
81117bc8:	1884703a 	and	r2,r3,r2
81117bcc:	1001703a 	wrctl	status,r2
  
  return context;
81117bd0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
81117bd4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
81117bd8:	00c00044 	movi	r3,1
81117bdc:	e0bffa17 	ldw	r2,-24(fp)
81117be0:	1884983a 	sll	r2,r3,r2
81117be4:	1007883a 	mov	r3,r2
81117be8:	d0a02417 	ldw	r2,-32624(gp)
81117bec:	1884b03a 	or	r2,r3,r2
81117bf0:	d0a02415 	stw	r2,-32624(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
81117bf4:	d0a02417 	ldw	r2,-32624(gp)
81117bf8:	100170fa 	wrctl	ienable,r2
81117bfc:	e0bffc17 	ldw	r2,-16(fp)
81117c00:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81117c04:	e0bffd17 	ldw	r2,-12(fp)
81117c08:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
81117c0c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
81117c10:	0001883a 	nop
}
81117c14:	e037883a 	mov	sp,fp
81117c18:	df000017 	ldw	fp,0(sp)
81117c1c:	dec00104 	addi	sp,sp,4
81117c20:	f800283a 	ret

81117c24 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
81117c24:	defff904 	addi	sp,sp,-28
81117c28:	df000615 	stw	fp,24(sp)
81117c2c:	df000604 	addi	fp,sp,24
81117c30:	e13ffe15 	stw	r4,-8(fp)
81117c34:	e17fff15 	stw	r5,-4(fp)
81117c38:	e0bfff17 	ldw	r2,-4(fp)
81117c3c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81117c40:	0005303a 	rdctl	r2,status
81117c44:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81117c48:	e0fffb17 	ldw	r3,-20(fp)
81117c4c:	00bfff84 	movi	r2,-2
81117c50:	1884703a 	and	r2,r3,r2
81117c54:	1001703a 	wrctl	status,r2
  
  return context;
81117c58:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
81117c5c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
81117c60:	00c00044 	movi	r3,1
81117c64:	e0bffa17 	ldw	r2,-24(fp)
81117c68:	1884983a 	sll	r2,r3,r2
81117c6c:	0084303a 	nor	r2,zero,r2
81117c70:	1007883a 	mov	r3,r2
81117c74:	d0a02417 	ldw	r2,-32624(gp)
81117c78:	1884703a 	and	r2,r3,r2
81117c7c:	d0a02415 	stw	r2,-32624(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
81117c80:	d0a02417 	ldw	r2,-32624(gp)
81117c84:	100170fa 	wrctl	ienable,r2
81117c88:	e0bffc17 	ldw	r2,-16(fp)
81117c8c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81117c90:	e0bffd17 	ldw	r2,-12(fp)
81117c94:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
81117c98:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
81117c9c:	0001883a 	nop
}
81117ca0:	e037883a 	mov	sp,fp
81117ca4:	df000017 	ldw	fp,0(sp)
81117ca8:	dec00104 	addi	sp,sp,4
81117cac:	f800283a 	ret

81117cb0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
81117cb0:	defffc04 	addi	sp,sp,-16
81117cb4:	df000315 	stw	fp,12(sp)
81117cb8:	df000304 	addi	fp,sp,12
81117cbc:	e13ffe15 	stw	r4,-8(fp)
81117cc0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
81117cc4:	000530fa 	rdctl	r2,ienable
81117cc8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
81117ccc:	00c00044 	movi	r3,1
81117cd0:	e0bfff17 	ldw	r2,-4(fp)
81117cd4:	1884983a 	sll	r2,r3,r2
81117cd8:	1007883a 	mov	r3,r2
81117cdc:	e0bffd17 	ldw	r2,-12(fp)
81117ce0:	1884703a 	and	r2,r3,r2
81117ce4:	1004c03a 	cmpne	r2,r2,zero
81117ce8:	10803fcc 	andi	r2,r2,255
}
81117cec:	e037883a 	mov	sp,fp
81117cf0:	df000017 	ldw	fp,0(sp)
81117cf4:	dec00104 	addi	sp,sp,4
81117cf8:	f800283a 	ret

81117cfc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
81117cfc:	defff504 	addi	sp,sp,-44
81117d00:	dfc00a15 	stw	ra,40(sp)
81117d04:	df000915 	stw	fp,36(sp)
81117d08:	df000904 	addi	fp,sp,36
81117d0c:	e13ffc15 	stw	r4,-16(fp)
81117d10:	e17ffd15 	stw	r5,-12(fp)
81117d14:	e1bffe15 	stw	r6,-8(fp)
81117d18:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
81117d1c:	00bffa84 	movi	r2,-22
81117d20:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
81117d24:	e0bffd17 	ldw	r2,-12(fp)
81117d28:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
81117d2c:	e0bff817 	ldw	r2,-32(fp)
81117d30:	10800808 	cmpgei	r2,r2,32
81117d34:	1000271e 	bne	r2,zero,81117dd4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81117d38:	0005303a 	rdctl	r2,status
81117d3c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81117d40:	e0fffb17 	ldw	r3,-20(fp)
81117d44:	00bfff84 	movi	r2,-2
81117d48:	1884703a 	and	r2,r3,r2
81117d4c:	1001703a 	wrctl	status,r2
  
  return context;
81117d50:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
81117d54:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
81117d58:	00a044b4 	movhi	r2,33042
81117d5c:	10b09204 	addi	r2,r2,-15800
81117d60:	e0fff817 	ldw	r3,-32(fp)
81117d64:	180690fa 	slli	r3,r3,3
81117d68:	10c5883a 	add	r2,r2,r3
81117d6c:	e0fffe17 	ldw	r3,-8(fp)
81117d70:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
81117d74:	00a044b4 	movhi	r2,33042
81117d78:	10b09204 	addi	r2,r2,-15800
81117d7c:	e0fff817 	ldw	r3,-32(fp)
81117d80:	180690fa 	slli	r3,r3,3
81117d84:	10c5883a 	add	r2,r2,r3
81117d88:	10800104 	addi	r2,r2,4
81117d8c:	e0ffff17 	ldw	r3,-4(fp)
81117d90:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
81117d94:	e0bffe17 	ldw	r2,-8(fp)
81117d98:	10000526 	beq	r2,zero,81117db0 <alt_iic_isr_register+0xb4>
81117d9c:	e0bff817 	ldw	r2,-32(fp)
81117da0:	100b883a 	mov	r5,r2
81117da4:	e13ffc17 	ldw	r4,-16(fp)
81117da8:	1117b9c0 	call	81117b9c <alt_ic_irq_enable>
81117dac:	00000406 	br	81117dc0 <alt_iic_isr_register+0xc4>
81117db0:	e0bff817 	ldw	r2,-32(fp)
81117db4:	100b883a 	mov	r5,r2
81117db8:	e13ffc17 	ldw	r4,-16(fp)
81117dbc:	1117c240 	call	81117c24 <alt_ic_irq_disable>
81117dc0:	e0bff715 	stw	r2,-36(fp)
81117dc4:	e0bffa17 	ldw	r2,-24(fp)
81117dc8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81117dcc:	e0bff917 	ldw	r2,-28(fp)
81117dd0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
81117dd4:	e0bff717 	ldw	r2,-36(fp)
}
81117dd8:	e037883a 	mov	sp,fp
81117ddc:	dfc00117 	ldw	ra,4(sp)
81117de0:	df000017 	ldw	fp,0(sp)
81117de4:	dec00204 	addi	sp,sp,8
81117de8:	f800283a 	ret

81117dec <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
81117dec:	defff904 	addi	sp,sp,-28
81117df0:	dfc00615 	stw	ra,24(sp)
81117df4:	df000515 	stw	fp,20(sp)
81117df8:	df000504 	addi	fp,sp,20
81117dfc:	e13ffc15 	stw	r4,-16(fp)
81117e00:	e17ffd15 	stw	r5,-12(fp)
81117e04:	e1bffe15 	stw	r6,-8(fp)
81117e08:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
81117e0c:	e1bfff17 	ldw	r6,-4(fp)
81117e10:	e17ffe17 	ldw	r5,-8(fp)
81117e14:	e13ffd17 	ldw	r4,-12(fp)
81117e18:	111802c0 	call	8111802c <open>
81117e1c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
81117e20:	e0bffb17 	ldw	r2,-20(fp)
81117e24:	10001c16 	blt	r2,zero,81117e98 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
81117e28:	00a044b4 	movhi	r2,33042
81117e2c:	10aa0c04 	addi	r2,r2,-22480
81117e30:	e0fffb17 	ldw	r3,-20(fp)
81117e34:	18c00324 	muli	r3,r3,12
81117e38:	10c5883a 	add	r2,r2,r3
81117e3c:	10c00017 	ldw	r3,0(r2)
81117e40:	e0bffc17 	ldw	r2,-16(fp)
81117e44:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
81117e48:	00a044b4 	movhi	r2,33042
81117e4c:	10aa0c04 	addi	r2,r2,-22480
81117e50:	e0fffb17 	ldw	r3,-20(fp)
81117e54:	18c00324 	muli	r3,r3,12
81117e58:	10c5883a 	add	r2,r2,r3
81117e5c:	10800104 	addi	r2,r2,4
81117e60:	10c00017 	ldw	r3,0(r2)
81117e64:	e0bffc17 	ldw	r2,-16(fp)
81117e68:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
81117e6c:	00a044b4 	movhi	r2,33042
81117e70:	10aa0c04 	addi	r2,r2,-22480
81117e74:	e0fffb17 	ldw	r3,-20(fp)
81117e78:	18c00324 	muli	r3,r3,12
81117e7c:	10c5883a 	add	r2,r2,r3
81117e80:	10800204 	addi	r2,r2,8
81117e84:	10c00017 	ldw	r3,0(r2)
81117e88:	e0bffc17 	ldw	r2,-16(fp)
81117e8c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
81117e90:	e13ffb17 	ldw	r4,-20(fp)
81117e94:	1113e000 	call	81113e00 <alt_release_fd>
  }
} 
81117e98:	0001883a 	nop
81117e9c:	e037883a 	mov	sp,fp
81117ea0:	dfc00117 	ldw	ra,4(sp)
81117ea4:	df000017 	ldw	fp,0(sp)
81117ea8:	dec00204 	addi	sp,sp,8
81117eac:	f800283a 	ret

81117eb0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
81117eb0:	defffb04 	addi	sp,sp,-20
81117eb4:	dfc00415 	stw	ra,16(sp)
81117eb8:	df000315 	stw	fp,12(sp)
81117ebc:	df000304 	addi	fp,sp,12
81117ec0:	e13ffd15 	stw	r4,-12(fp)
81117ec4:	e17ffe15 	stw	r5,-8(fp)
81117ec8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
81117ecc:	01c07fc4 	movi	r7,511
81117ed0:	01800044 	movi	r6,1
81117ed4:	e17ffd17 	ldw	r5,-12(fp)
81117ed8:	012044b4 	movhi	r4,33042
81117edc:	212a0f04 	addi	r4,r4,-22468
81117ee0:	1117dec0 	call	81117dec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
81117ee4:	01c07fc4 	movi	r7,511
81117ee8:	000d883a 	mov	r6,zero
81117eec:	e17ffe17 	ldw	r5,-8(fp)
81117ef0:	012044b4 	movhi	r4,33042
81117ef4:	212a0c04 	addi	r4,r4,-22480
81117ef8:	1117dec0 	call	81117dec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
81117efc:	01c07fc4 	movi	r7,511
81117f00:	01800044 	movi	r6,1
81117f04:	e17fff17 	ldw	r5,-4(fp)
81117f08:	012044b4 	movhi	r4,33042
81117f0c:	212a1204 	addi	r4,r4,-22456
81117f10:	1117dec0 	call	81117dec <alt_open_fd>
}  
81117f14:	0001883a 	nop
81117f18:	e037883a 	mov	sp,fp
81117f1c:	dfc00117 	ldw	ra,4(sp)
81117f20:	df000017 	ldw	fp,0(sp)
81117f24:	dec00204 	addi	sp,sp,8
81117f28:	f800283a 	ret

81117f2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81117f2c:	defffe04 	addi	sp,sp,-8
81117f30:	dfc00115 	stw	ra,4(sp)
81117f34:	df000015 	stw	fp,0(sp)
81117f38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81117f3c:	d0a00b17 	ldw	r2,-32724(gp)
81117f40:	10000326 	beq	r2,zero,81117f50 <alt_get_errno+0x24>
81117f44:	d0a00b17 	ldw	r2,-32724(gp)
81117f48:	103ee83a 	callr	r2
81117f4c:	00000106 	br	81117f54 <alt_get_errno+0x28>
81117f50:	d0a01a04 	addi	r2,gp,-32664
}
81117f54:	e037883a 	mov	sp,fp
81117f58:	dfc00117 	ldw	ra,4(sp)
81117f5c:	df000017 	ldw	fp,0(sp)
81117f60:	dec00204 	addi	sp,sp,8
81117f64:	f800283a 	ret

81117f68 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
81117f68:	defffd04 	addi	sp,sp,-12
81117f6c:	df000215 	stw	fp,8(sp)
81117f70:	df000204 	addi	fp,sp,8
81117f74:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
81117f78:	e0bfff17 	ldw	r2,-4(fp)
81117f7c:	10800217 	ldw	r2,8(r2)
81117f80:	10d00034 	orhi	r3,r2,16384
81117f84:	e0bfff17 	ldw	r2,-4(fp)
81117f88:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
81117f8c:	e03ffe15 	stw	zero,-8(fp)
81117f90:	00001d06 	br	81118008 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
81117f94:	00a044b4 	movhi	r2,33042
81117f98:	10aa0c04 	addi	r2,r2,-22480
81117f9c:	e0fffe17 	ldw	r3,-8(fp)
81117fa0:	18c00324 	muli	r3,r3,12
81117fa4:	10c5883a 	add	r2,r2,r3
81117fa8:	10c00017 	ldw	r3,0(r2)
81117fac:	e0bfff17 	ldw	r2,-4(fp)
81117fb0:	10800017 	ldw	r2,0(r2)
81117fb4:	1880111e 	bne	r3,r2,81117ffc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
81117fb8:	00a044b4 	movhi	r2,33042
81117fbc:	10aa0c04 	addi	r2,r2,-22480
81117fc0:	e0fffe17 	ldw	r3,-8(fp)
81117fc4:	18c00324 	muli	r3,r3,12
81117fc8:	10c5883a 	add	r2,r2,r3
81117fcc:	10800204 	addi	r2,r2,8
81117fd0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
81117fd4:	1000090e 	bge	r2,zero,81117ffc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
81117fd8:	e0bffe17 	ldw	r2,-8(fp)
81117fdc:	10c00324 	muli	r3,r2,12
81117fe0:	00a044b4 	movhi	r2,33042
81117fe4:	10aa0c04 	addi	r2,r2,-22480
81117fe8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
81117fec:	e0bfff17 	ldw	r2,-4(fp)
81117ff0:	18800226 	beq	r3,r2,81117ffc <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
81117ff4:	00bffcc4 	movi	r2,-13
81117ff8:	00000806 	br	8111801c <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
81117ffc:	e0bffe17 	ldw	r2,-8(fp)
81118000:	10800044 	addi	r2,r2,1
81118004:	e0bffe15 	stw	r2,-8(fp)
81118008:	d0a00a17 	ldw	r2,-32728(gp)
8111800c:	1007883a 	mov	r3,r2
81118010:	e0bffe17 	ldw	r2,-8(fp)
81118014:	18bfdf2e 	bgeu	r3,r2,81117f94 <__reset+0xfb0f7f94>
    }
  }
  
  /* The device is not locked */
 
  return 0;
81118018:	0005883a 	mov	r2,zero
}
8111801c:	e037883a 	mov	sp,fp
81118020:	df000017 	ldw	fp,0(sp)
81118024:	dec00104 	addi	sp,sp,4
81118028:	f800283a 	ret

8111802c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
8111802c:	defff604 	addi	sp,sp,-40
81118030:	dfc00915 	stw	ra,36(sp)
81118034:	df000815 	stw	fp,32(sp)
81118038:	df000804 	addi	fp,sp,32
8111803c:	e13ffd15 	stw	r4,-12(fp)
81118040:	e17ffe15 	stw	r5,-8(fp)
81118044:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
81118048:	00bfffc4 	movi	r2,-1
8111804c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
81118050:	00bffb44 	movi	r2,-19
81118054:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
81118058:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
8111805c:	d1600804 	addi	r5,gp,-32736
81118060:	e13ffd17 	ldw	r4,-12(fp)
81118064:	1117abc0 	call	81117abc <alt_find_dev>
81118068:	e0bff815 	stw	r2,-32(fp)
8111806c:	e0bff817 	ldw	r2,-32(fp)
81118070:	1000051e 	bne	r2,zero,81118088 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
81118074:	e13ffd17 	ldw	r4,-12(fp)
81118078:	111840c0 	call	8111840c <alt_find_file>
8111807c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
81118080:	00800044 	movi	r2,1
81118084:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
81118088:	e0bff817 	ldw	r2,-32(fp)
8111808c:	10002926 	beq	r2,zero,81118134 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
81118090:	e13ff817 	ldw	r4,-32(fp)
81118094:	11185140 	call	81118514 <alt_get_fd>
81118098:	e0bff915 	stw	r2,-28(fp)
8111809c:	e0bff917 	ldw	r2,-28(fp)
811180a0:	1000030e 	bge	r2,zero,811180b0 <open+0x84>
    {
      status = index;
811180a4:	e0bff917 	ldw	r2,-28(fp)
811180a8:	e0bffa15 	stw	r2,-24(fp)
811180ac:	00002306 	br	8111813c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
811180b0:	e0bff917 	ldw	r2,-28(fp)
811180b4:	10c00324 	muli	r3,r2,12
811180b8:	00a044b4 	movhi	r2,33042
811180bc:	10aa0c04 	addi	r2,r2,-22480
811180c0:	1885883a 	add	r2,r3,r2
811180c4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
811180c8:	e0fffe17 	ldw	r3,-8(fp)
811180cc:	00900034 	movhi	r2,16384
811180d0:	10bfffc4 	addi	r2,r2,-1
811180d4:	1886703a 	and	r3,r3,r2
811180d8:	e0bffc17 	ldw	r2,-16(fp)
811180dc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
811180e0:	e0bffb17 	ldw	r2,-20(fp)
811180e4:	1000051e 	bne	r2,zero,811180fc <open+0xd0>
811180e8:	e13ffc17 	ldw	r4,-16(fp)
811180ec:	1117f680 	call	81117f68 <alt_file_locked>
811180f0:	e0bffa15 	stw	r2,-24(fp)
811180f4:	e0bffa17 	ldw	r2,-24(fp)
811180f8:	10001016 	blt	r2,zero,8111813c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
811180fc:	e0bff817 	ldw	r2,-32(fp)
81118100:	10800317 	ldw	r2,12(r2)
81118104:	10000826 	beq	r2,zero,81118128 <open+0xfc>
81118108:	e0bff817 	ldw	r2,-32(fp)
8111810c:	10800317 	ldw	r2,12(r2)
81118110:	e1ffff17 	ldw	r7,-4(fp)
81118114:	e1bffe17 	ldw	r6,-8(fp)
81118118:	e17ffd17 	ldw	r5,-12(fp)
8111811c:	e13ffc17 	ldw	r4,-16(fp)
81118120:	103ee83a 	callr	r2
81118124:	00000106 	br	8111812c <open+0x100>
81118128:	0005883a 	mov	r2,zero
8111812c:	e0bffa15 	stw	r2,-24(fp)
81118130:	00000206 	br	8111813c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
81118134:	00bffb44 	movi	r2,-19
81118138:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
8111813c:	e0bffa17 	ldw	r2,-24(fp)
81118140:	1000090e 	bge	r2,zero,81118168 <open+0x13c>
  {
    alt_release_fd (index);  
81118144:	e13ff917 	ldw	r4,-28(fp)
81118148:	1113e000 	call	81113e00 <alt_release_fd>
    ALT_ERRNO = -status;
8111814c:	1117f2c0 	call	81117f2c <alt_get_errno>
81118150:	1007883a 	mov	r3,r2
81118154:	e0bffa17 	ldw	r2,-24(fp)
81118158:	0085c83a 	sub	r2,zero,r2
8111815c:	18800015 	stw	r2,0(r3)
    return -1;
81118160:	00bfffc4 	movi	r2,-1
81118164:	00000106 	br	8111816c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
81118168:	e0bff917 	ldw	r2,-28(fp)
}
8111816c:	e037883a 	mov	sp,fp
81118170:	dfc00117 	ldw	ra,4(sp)
81118174:	df000017 	ldw	fp,0(sp)
81118178:	dec00204 	addi	sp,sp,8
8111817c:	f800283a 	ret

81118180 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
81118180:	defff204 	addi	sp,sp,-56
81118184:	dfc00a15 	stw	ra,40(sp)
81118188:	df000915 	stw	fp,36(sp)
8111818c:	df000904 	addi	fp,sp,36
81118190:	e13fff15 	stw	r4,-4(fp)
81118194:	e1400215 	stw	r5,8(fp)
81118198:	e1800315 	stw	r6,12(fp)
8111819c:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
811181a0:	e0800204 	addi	r2,fp,8
811181a4:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
811181a8:	e0bfff17 	ldw	r2,-4(fp)
811181ac:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
811181b0:	00006f06 	br	81118370 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
811181b4:	e0bff807 	ldb	r2,-32(fp)
811181b8:	10800960 	cmpeqi	r2,r2,37
811181bc:	1000041e 	bne	r2,zero,811181d0 <alt_printf+0x50>
        {
            alt_putchar(c);
811181c0:	e0bff807 	ldb	r2,-32(fp)
811181c4:	1009883a 	mov	r4,r2
811181c8:	11183ac0 	call	811183ac <alt_putchar>
811181cc:	00006806 	br	81118370 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
811181d0:	e0bff717 	ldw	r2,-36(fp)
811181d4:	10c00044 	addi	r3,r2,1
811181d8:	e0fff715 	stw	r3,-36(fp)
811181dc:	10800003 	ldbu	r2,0(r2)
811181e0:	e0bff805 	stb	r2,-32(fp)
811181e4:	e0bff807 	ldb	r2,-32(fp)
811181e8:	10006926 	beq	r2,zero,81118390 <alt_printf+0x210>
            {
                if (c == '%')
811181ec:	e0bff807 	ldb	r2,-32(fp)
811181f0:	10800958 	cmpnei	r2,r2,37
811181f4:	1000041e 	bne	r2,zero,81118208 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
811181f8:	e0bff807 	ldb	r2,-32(fp)
811181fc:	1009883a 	mov	r4,r2
81118200:	11183ac0 	call	811183ac <alt_putchar>
81118204:	00005a06 	br	81118370 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
81118208:	e0bff807 	ldb	r2,-32(fp)
8111820c:	108018d8 	cmpnei	r2,r2,99
81118210:	1000081e 	bne	r2,zero,81118234 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
81118214:	e0bffe17 	ldw	r2,-8(fp)
81118218:	10c00104 	addi	r3,r2,4
8111821c:	e0fffe15 	stw	r3,-8(fp)
81118220:	10800017 	ldw	r2,0(r2)
81118224:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
81118228:	e13ffd17 	ldw	r4,-12(fp)
8111822c:	11183ac0 	call	811183ac <alt_putchar>
81118230:	00004f06 	br	81118370 <alt_printf+0x1f0>
                }
                else if (c == 'x')
81118234:	e0bff807 	ldb	r2,-32(fp)
81118238:	10801e18 	cmpnei	r2,r2,120
8111823c:	1000341e 	bne	r2,zero,81118310 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
81118240:	e0bffe17 	ldw	r2,-8(fp)
81118244:	10c00104 	addi	r3,r2,4
81118248:	e0fffe15 	stw	r3,-8(fp)
8111824c:	10800017 	ldw	r2,0(r2)
81118250:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
81118254:	e0bffb17 	ldw	r2,-20(fp)
81118258:	1000031e 	bne	r2,zero,81118268 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
8111825c:	01000c04 	movi	r4,48
81118260:	11183ac0 	call	811183ac <alt_putchar>
                        continue;
81118264:	00004206 	br	81118370 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
81118268:	00800704 	movi	r2,28
8111826c:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
81118270:	00000306 	br	81118280 <alt_printf+0x100>
                        digit_shift -= 4;
81118274:	e0bff917 	ldw	r2,-28(fp)
81118278:	10bfff04 	addi	r2,r2,-4
8111827c:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
81118280:	00c003c4 	movi	r3,15
81118284:	e0bff917 	ldw	r2,-28(fp)
81118288:	1884983a 	sll	r2,r3,r2
8111828c:	1007883a 	mov	r3,r2
81118290:	e0bffb17 	ldw	r2,-20(fp)
81118294:	1884703a 	and	r2,r3,r2
81118298:	103ff626 	beq	r2,zero,81118274 <__reset+0xfb0f8274>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
8111829c:	00001906 	br	81118304 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
811182a0:	00c003c4 	movi	r3,15
811182a4:	e0bff917 	ldw	r2,-28(fp)
811182a8:	1884983a 	sll	r2,r3,r2
811182ac:	1007883a 	mov	r3,r2
811182b0:	e0bffb17 	ldw	r2,-20(fp)
811182b4:	1886703a 	and	r3,r3,r2
811182b8:	e0bff917 	ldw	r2,-28(fp)
811182bc:	1884d83a 	srl	r2,r3,r2
811182c0:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
811182c4:	e0bffc17 	ldw	r2,-16(fp)
811182c8:	108002a8 	cmpgeui	r2,r2,10
811182cc:	1000041e 	bne	r2,zero,811182e0 <alt_printf+0x160>
                            c = '0' + digit;
811182d0:	e0bffc17 	ldw	r2,-16(fp)
811182d4:	10800c04 	addi	r2,r2,48
811182d8:	e0bff805 	stb	r2,-32(fp)
811182dc:	00000306 	br	811182ec <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
811182e0:	e0bffc17 	ldw	r2,-16(fp)
811182e4:	108015c4 	addi	r2,r2,87
811182e8:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
811182ec:	e0bff807 	ldb	r2,-32(fp)
811182f0:	1009883a 	mov	r4,r2
811182f4:	11183ac0 	call	811183ac <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
811182f8:	e0bff917 	ldw	r2,-28(fp)
811182fc:	10bfff04 	addi	r2,r2,-4
81118300:	e0bff915 	stw	r2,-28(fp)
81118304:	e0bff917 	ldw	r2,-28(fp)
81118308:	103fe50e 	bge	r2,zero,811182a0 <__reset+0xfb0f82a0>
8111830c:	00001806 	br	81118370 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
81118310:	e0bff807 	ldb	r2,-32(fp)
81118314:	10801cd8 	cmpnei	r2,r2,115
81118318:	1000151e 	bne	r2,zero,81118370 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
8111831c:	e0bffe17 	ldw	r2,-8(fp)
81118320:	10c00104 	addi	r3,r2,4
81118324:	e0fffe15 	stw	r3,-8(fp)
81118328:	10800017 	ldw	r2,0(r2)
8111832c:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
81118330:	00000906 	br	81118358 <alt_printf+0x1d8>
                      alt_putchar(*s++);
81118334:	e0bffa17 	ldw	r2,-24(fp)
81118338:	10c00044 	addi	r3,r2,1
8111833c:	e0fffa15 	stw	r3,-24(fp)
81118340:	10800003 	ldbu	r2,0(r2)
81118344:	10803fcc 	andi	r2,r2,255
81118348:	1080201c 	xori	r2,r2,128
8111834c:	10bfe004 	addi	r2,r2,-128
81118350:	1009883a 	mov	r4,r2
81118354:	11183ac0 	call	811183ac <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
81118358:	e0bffa17 	ldw	r2,-24(fp)
8111835c:	10800003 	ldbu	r2,0(r2)
81118360:	10803fcc 	andi	r2,r2,255
81118364:	1080201c 	xori	r2,r2,128
81118368:	10bfe004 	addi	r2,r2,-128
8111836c:	103ff11e 	bne	r2,zero,81118334 <__reset+0xfb0f8334>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
81118370:	e0bff717 	ldw	r2,-36(fp)
81118374:	10c00044 	addi	r3,r2,1
81118378:	e0fff715 	stw	r3,-36(fp)
8111837c:	10800003 	ldbu	r2,0(r2)
81118380:	e0bff805 	stb	r2,-32(fp)
81118384:	e0bff807 	ldb	r2,-32(fp)
81118388:	103f8a1e 	bne	r2,zero,811181b4 <__reset+0xfb0f81b4>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
8111838c:	00000106 	br	81118394 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
81118390:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
81118394:	0001883a 	nop
81118398:	e037883a 	mov	sp,fp
8111839c:	dfc00117 	ldw	ra,4(sp)
811183a0:	df000017 	ldw	fp,0(sp)
811183a4:	dec00504 	addi	sp,sp,20
811183a8:	f800283a 	ret

811183ac <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
811183ac:	defffd04 	addi	sp,sp,-12
811183b0:	dfc00215 	stw	ra,8(sp)
811183b4:	df000115 	stw	fp,4(sp)
811183b8:	df000104 	addi	fp,sp,4
811183bc:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
811183c0:	d0a00117 	ldw	r2,-32764(gp)
811183c4:	10800217 	ldw	r2,8(r2)
811183c8:	100b883a 	mov	r5,r2
811183cc:	e13fff17 	ldw	r4,-4(fp)
811183d0:	110bd400 	call	8110bd40 <putc>
#endif
#endif
}
811183d4:	e037883a 	mov	sp,fp
811183d8:	dfc00117 	ldw	ra,4(sp)
811183dc:	df000017 	ldw	fp,0(sp)
811183e0:	dec00204 	addi	sp,sp,8
811183e4:	f800283a 	ret

811183e8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
811183e8:	deffff04 	addi	sp,sp,-4
811183ec:	df000015 	stw	fp,0(sp)
811183f0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
811183f4:	000170fa 	wrctl	ienable,zero
}
811183f8:	0001883a 	nop
811183fc:	e037883a 	mov	sp,fp
81118400:	df000017 	ldw	fp,0(sp)
81118404:	dec00104 	addi	sp,sp,4
81118408:	f800283a 	ret

8111840c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
8111840c:	defffb04 	addi	sp,sp,-20
81118410:	dfc00415 	stw	ra,16(sp)
81118414:	df000315 	stw	fp,12(sp)
81118418:	df000304 	addi	fp,sp,12
8111841c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
81118420:	d0a00617 	ldw	r2,-32744(gp)
81118424:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
81118428:	00003106 	br	811184f0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
8111842c:	e0bffd17 	ldw	r2,-12(fp)
81118430:	10800217 	ldw	r2,8(r2)
81118434:	1009883a 	mov	r4,r2
81118438:	1102ebc0 	call	81102ebc <strlen>
8111843c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
81118440:	e0bffd17 	ldw	r2,-12(fp)
81118444:	10c00217 	ldw	r3,8(r2)
81118448:	e0bffe17 	ldw	r2,-8(fp)
8111844c:	10bfffc4 	addi	r2,r2,-1
81118450:	1885883a 	add	r2,r3,r2
81118454:	10800003 	ldbu	r2,0(r2)
81118458:	10803fcc 	andi	r2,r2,255
8111845c:	1080201c 	xori	r2,r2,128
81118460:	10bfe004 	addi	r2,r2,-128
81118464:	10800bd8 	cmpnei	r2,r2,47
81118468:	1000031e 	bne	r2,zero,81118478 <alt_find_file+0x6c>
    {
      len -= 1;
8111846c:	e0bffe17 	ldw	r2,-8(fp)
81118470:	10bfffc4 	addi	r2,r2,-1
81118474:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
81118478:	e0bffe17 	ldw	r2,-8(fp)
8111847c:	e0ffff17 	ldw	r3,-4(fp)
81118480:	1885883a 	add	r2,r3,r2
81118484:	10800003 	ldbu	r2,0(r2)
81118488:	10803fcc 	andi	r2,r2,255
8111848c:	1080201c 	xori	r2,r2,128
81118490:	10bfe004 	addi	r2,r2,-128
81118494:	10800be0 	cmpeqi	r2,r2,47
81118498:	1000081e 	bne	r2,zero,811184bc <alt_find_file+0xb0>
8111849c:	e0bffe17 	ldw	r2,-8(fp)
811184a0:	e0ffff17 	ldw	r3,-4(fp)
811184a4:	1885883a 	add	r2,r3,r2
811184a8:	10800003 	ldbu	r2,0(r2)
811184ac:	10803fcc 	andi	r2,r2,255
811184b0:	1080201c 	xori	r2,r2,128
811184b4:	10bfe004 	addi	r2,r2,-128
811184b8:	10000a1e 	bne	r2,zero,811184e4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
811184bc:	e0bffd17 	ldw	r2,-12(fp)
811184c0:	10800217 	ldw	r2,8(r2)
811184c4:	e0fffe17 	ldw	r3,-8(fp)
811184c8:	180d883a 	mov	r6,r3
811184cc:	e17fff17 	ldw	r5,-4(fp)
811184d0:	1009883a 	mov	r4,r2
811184d4:	11186a00 	call	811186a0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
811184d8:	1000021e 	bne	r2,zero,811184e4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
811184dc:	e0bffd17 	ldw	r2,-12(fp)
811184e0:	00000706 	br	81118500 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
811184e4:	e0bffd17 	ldw	r2,-12(fp)
811184e8:	10800017 	ldw	r2,0(r2)
811184ec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
811184f0:	e0fffd17 	ldw	r3,-12(fp)
811184f4:	d0a00604 	addi	r2,gp,-32744
811184f8:	18bfcc1e 	bne	r3,r2,8111842c <__reset+0xfb0f842c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
811184fc:	0005883a 	mov	r2,zero
}
81118500:	e037883a 	mov	sp,fp
81118504:	dfc00117 	ldw	ra,4(sp)
81118508:	df000017 	ldw	fp,0(sp)
8111850c:	dec00204 	addi	sp,sp,8
81118510:	f800283a 	ret

81118514 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
81118514:	defffc04 	addi	sp,sp,-16
81118518:	df000315 	stw	fp,12(sp)
8111851c:	df000304 	addi	fp,sp,12
81118520:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
81118524:	00bffa04 	movi	r2,-24
81118528:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
8111852c:	e03ffd15 	stw	zero,-12(fp)
81118530:	00001906 	br	81118598 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
81118534:	00a044b4 	movhi	r2,33042
81118538:	10aa0c04 	addi	r2,r2,-22480
8111853c:	e0fffd17 	ldw	r3,-12(fp)
81118540:	18c00324 	muli	r3,r3,12
81118544:	10c5883a 	add	r2,r2,r3
81118548:	10800017 	ldw	r2,0(r2)
8111854c:	10000f1e 	bne	r2,zero,8111858c <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
81118550:	00a044b4 	movhi	r2,33042
81118554:	10aa0c04 	addi	r2,r2,-22480
81118558:	e0fffd17 	ldw	r3,-12(fp)
8111855c:	18c00324 	muli	r3,r3,12
81118560:	10c5883a 	add	r2,r2,r3
81118564:	e0ffff17 	ldw	r3,-4(fp)
81118568:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
8111856c:	d0e00a17 	ldw	r3,-32728(gp)
81118570:	e0bffd17 	ldw	r2,-12(fp)
81118574:	1880020e 	bge	r3,r2,81118580 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
81118578:	e0bffd17 	ldw	r2,-12(fp)
8111857c:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
81118580:	e0bffd17 	ldw	r2,-12(fp)
81118584:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
81118588:	00000606 	br	811185a4 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
8111858c:	e0bffd17 	ldw	r2,-12(fp)
81118590:	10800044 	addi	r2,r2,1
81118594:	e0bffd15 	stw	r2,-12(fp)
81118598:	e0bffd17 	ldw	r2,-12(fp)
8111859c:	10800810 	cmplti	r2,r2,32
811185a0:	103fe41e 	bne	r2,zero,81118534 <__reset+0xfb0f8534>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
811185a4:	e0bffe17 	ldw	r2,-8(fp)
}
811185a8:	e037883a 	mov	sp,fp
811185ac:	df000017 	ldw	fp,0(sp)
811185b0:	dec00104 	addi	sp,sp,4
811185b4:	f800283a 	ret

811185b8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
811185b8:	defffe04 	addi	sp,sp,-8
811185bc:	df000115 	stw	fp,4(sp)
811185c0:	df000104 	addi	fp,sp,4
811185c4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
811185c8:	e0bfff17 	ldw	r2,-4(fp)
811185cc:	10bffe84 	addi	r2,r2,-6
811185d0:	10c00428 	cmpgeui	r3,r2,16
811185d4:	18001a1e 	bne	r3,zero,81118640 <alt_exception_cause_generated_bad_addr+0x88>
811185d8:	100690ba 	slli	r3,r2,2
811185dc:	00a044b4 	movhi	r2,33042
811185e0:	10a17c04 	addi	r2,r2,-31248
811185e4:	1885883a 	add	r2,r3,r2
811185e8:	10800017 	ldw	r2,0(r2)
811185ec:	1000683a 	jmp	r2
811185f0:	81118630 	cmpltui	r4,r16,17944
811185f4:	81118630 	cmpltui	r4,r16,17944
811185f8:	81118640 	call	88111864 <__reset+0x20f1864>
811185fc:	81118640 	call	88111864 <__reset+0x20f1864>
81118600:	81118640 	call	88111864 <__reset+0x20f1864>
81118604:	81118630 	cmpltui	r4,r16,17944
81118608:	81118638 	rdprs	r4,r16,17944
8111860c:	81118640 	call	88111864 <__reset+0x20f1864>
81118610:	81118630 	cmpltui	r4,r16,17944
81118614:	81118630 	cmpltui	r4,r16,17944
81118618:	81118640 	call	88111864 <__reset+0x20f1864>
8111861c:	81118630 	cmpltui	r4,r16,17944
81118620:	81118638 	rdprs	r4,r16,17944
81118624:	81118640 	call	88111864 <__reset+0x20f1864>
81118628:	81118640 	call	88111864 <__reset+0x20f1864>
8111862c:	81118630 	cmpltui	r4,r16,17944
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
81118630:	00800044 	movi	r2,1
81118634:	00000306 	br	81118644 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
81118638:	0005883a 	mov	r2,zero
8111863c:	00000106 	br	81118644 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
81118640:	0005883a 	mov	r2,zero
  }
}
81118644:	e037883a 	mov	sp,fp
81118648:	df000017 	ldw	fp,0(sp)
8111864c:	dec00104 	addi	sp,sp,4
81118650:	f800283a 	ret

81118654 <atexit>:
81118654:	200b883a 	mov	r5,r4
81118658:	000f883a 	mov	r7,zero
8111865c:	000d883a 	mov	r6,zero
81118660:	0009883a 	mov	r4,zero
81118664:	11188081 	jmpi	81118808 <__register_exitproc>

81118668 <exit>:
81118668:	defffe04 	addi	sp,sp,-8
8111866c:	000b883a 	mov	r5,zero
81118670:	dc000015 	stw	r16,0(sp)
81118674:	dfc00115 	stw	ra,4(sp)
81118678:	2021883a 	mov	r16,r4
8111867c:	11189200 	call	81118920 <__call_exitprocs>
81118680:	00a044b4 	movhi	r2,33042
81118684:	10af1704 	addi	r2,r2,-17316
81118688:	11000017 	ldw	r4,0(r2)
8111868c:	20800f17 	ldw	r2,60(r4)
81118690:	10000126 	beq	r2,zero,81118698 <exit+0x30>
81118694:	103ee83a 	callr	r2
81118698:	8009883a 	mov	r4,r16
8111869c:	1118aa00 	call	81118aa0 <_exit>

811186a0 <memcmp>:
811186a0:	01c000c4 	movi	r7,3
811186a4:	3980192e 	bgeu	r7,r6,8111870c <memcmp+0x6c>
811186a8:	2144b03a 	or	r2,r4,r5
811186ac:	11c4703a 	and	r2,r2,r7
811186b0:	10000f26 	beq	r2,zero,811186f0 <memcmp+0x50>
811186b4:	20800003 	ldbu	r2,0(r4)
811186b8:	28c00003 	ldbu	r3,0(r5)
811186bc:	10c0151e 	bne	r2,r3,81118714 <memcmp+0x74>
811186c0:	31bfff84 	addi	r6,r6,-2
811186c4:	01ffffc4 	movi	r7,-1
811186c8:	00000406 	br	811186dc <memcmp+0x3c>
811186cc:	20800003 	ldbu	r2,0(r4)
811186d0:	28c00003 	ldbu	r3,0(r5)
811186d4:	31bfffc4 	addi	r6,r6,-1
811186d8:	10c00e1e 	bne	r2,r3,81118714 <memcmp+0x74>
811186dc:	21000044 	addi	r4,r4,1
811186e0:	29400044 	addi	r5,r5,1
811186e4:	31fff91e 	bne	r6,r7,811186cc <__reset+0xfb0f86cc>
811186e8:	0005883a 	mov	r2,zero
811186ec:	f800283a 	ret
811186f0:	20c00017 	ldw	r3,0(r4)
811186f4:	28800017 	ldw	r2,0(r5)
811186f8:	18bfee1e 	bne	r3,r2,811186b4 <__reset+0xfb0f86b4>
811186fc:	31bfff04 	addi	r6,r6,-4
81118700:	21000104 	addi	r4,r4,4
81118704:	29400104 	addi	r5,r5,4
81118708:	39bff936 	bltu	r7,r6,811186f0 <__reset+0xfb0f86f0>
8111870c:	303fe91e 	bne	r6,zero,811186b4 <__reset+0xfb0f86b4>
81118710:	003ff506 	br	811186e8 <__reset+0xfb0f86e8>
81118714:	10c5c83a 	sub	r2,r2,r3
81118718:	f800283a 	ret

8111871c <strncpy>:
8111871c:	2906b03a 	or	r3,r5,r4
81118720:	18c000cc 	andi	r3,r3,3
81118724:	2005883a 	mov	r2,r4
81118728:	18002c1e 	bne	r3,zero,811187dc <strncpy+0xc0>
8111872c:	010000c4 	movi	r4,3
81118730:	21802a2e 	bgeu	r4,r6,811187dc <strncpy+0xc0>
81118734:	033fbff4 	movhi	r12,65279
81118738:	02e02074 	movhi	r11,32897
8111873c:	633fbfc4 	addi	r12,r12,-257
81118740:	5ae02004 	addi	r11,r11,-32640
81118744:	100f883a 	mov	r7,r2
81118748:	2a000017 	ldw	r8,0(r5)
8111874c:	3815883a 	mov	r10,r7
81118750:	4313883a 	add	r9,r8,r12
81118754:	0206303a 	nor	r3,zero,r8
81118758:	48c6703a 	and	r3,r9,r3
8111875c:	1ac6703a 	and	r3,r3,r11
81118760:	1800261e 	bne	r3,zero,811187fc <strncpy+0xe0>
81118764:	39c00104 	addi	r7,r7,4
81118768:	52000015 	stw	r8,0(r10)
8111876c:	31bfff04 	addi	r6,r6,-4
81118770:	3811883a 	mov	r8,r7
81118774:	29400104 	addi	r5,r5,4
81118778:	21bff336 	bltu	r4,r6,81118748 <__reset+0xfb0f8748>
8111877c:	30001e26 	beq	r6,zero,811187f8 <strncpy+0xdc>
81118780:	29c00003 	ldbu	r7,0(r5)
81118784:	31bfffc4 	addi	r6,r6,-1
81118788:	40c00044 	addi	r3,r8,1
8111878c:	41c00005 	stb	r7,0(r8)
81118790:	39c03fcc 	andi	r7,r7,255
81118794:	39c0201c 	xori	r7,r7,128
81118798:	39ffe004 	addi	r7,r7,-128
8111879c:	29400044 	addi	r5,r5,1
811187a0:	38001026 	beq	r7,zero,811187e4 <strncpy+0xc8>
811187a4:	1811883a 	mov	r8,r3
811187a8:	00000906 	br	811187d0 <strncpy+0xb4>
811187ac:	29c00003 	ldbu	r7,0(r5)
811187b0:	31bfffc4 	addi	r6,r6,-1
811187b4:	29400044 	addi	r5,r5,1
811187b8:	41c00005 	stb	r7,0(r8)
811187bc:	39c03fcc 	andi	r7,r7,255
811187c0:	39c0201c 	xori	r7,r7,128
811187c4:	39ffe004 	addi	r7,r7,-128
811187c8:	1811883a 	mov	r8,r3
811187cc:	38000526 	beq	r7,zero,811187e4 <strncpy+0xc8>
811187d0:	18c00044 	addi	r3,r3,1
811187d4:	303ff51e 	bne	r6,zero,811187ac <__reset+0xfb0f87ac>
811187d8:	f800283a 	ret
811187dc:	1011883a 	mov	r8,r2
811187e0:	003fe606 	br	8111877c <__reset+0xfb0f877c>
811187e4:	30000726 	beq	r6,zero,81118804 <strncpy+0xe8>
811187e8:	198d883a 	add	r6,r3,r6
811187ec:	18000005 	stb	zero,0(r3)
811187f0:	18c00044 	addi	r3,r3,1
811187f4:	19bffd1e 	bne	r3,r6,811187ec <__reset+0xfb0f87ec>
811187f8:	f800283a 	ret
811187fc:	3811883a 	mov	r8,r7
81118800:	003fdf06 	br	81118780 <__reset+0xfb0f8780>
81118804:	f800283a 	ret

81118808 <__register_exitproc>:
81118808:	defffa04 	addi	sp,sp,-24
8111880c:	dc000315 	stw	r16,12(sp)
81118810:	042044b4 	movhi	r16,33042
81118814:	842f1704 	addi	r16,r16,-17316
81118818:	80c00017 	ldw	r3,0(r16)
8111881c:	dc400415 	stw	r17,16(sp)
81118820:	dfc00515 	stw	ra,20(sp)
81118824:	18805217 	ldw	r2,328(r3)
81118828:	2023883a 	mov	r17,r4
8111882c:	10003726 	beq	r2,zero,8111890c <__register_exitproc+0x104>
81118830:	10c00117 	ldw	r3,4(r2)
81118834:	010007c4 	movi	r4,31
81118838:	20c00e16 	blt	r4,r3,81118874 <__register_exitproc+0x6c>
8111883c:	1a000044 	addi	r8,r3,1
81118840:	8800221e 	bne	r17,zero,811188cc <__register_exitproc+0xc4>
81118844:	18c00084 	addi	r3,r3,2
81118848:	18c7883a 	add	r3,r3,r3
8111884c:	18c7883a 	add	r3,r3,r3
81118850:	12000115 	stw	r8,4(r2)
81118854:	10c7883a 	add	r3,r2,r3
81118858:	19400015 	stw	r5,0(r3)
8111885c:	0005883a 	mov	r2,zero
81118860:	dfc00517 	ldw	ra,20(sp)
81118864:	dc400417 	ldw	r17,16(sp)
81118868:	dc000317 	ldw	r16,12(sp)
8111886c:	dec00604 	addi	sp,sp,24
81118870:	f800283a 	ret
81118874:	00800034 	movhi	r2,0
81118878:	10800004 	addi	r2,r2,0
8111887c:	10002626 	beq	r2,zero,81118918 <__register_exitproc+0x110>
81118880:	01006404 	movi	r4,400
81118884:	d9400015 	stw	r5,0(sp)
81118888:	d9800115 	stw	r6,4(sp)
8111888c:	d9c00215 	stw	r7,8(sp)
81118890:	00000000 	call	80000000 <__alt_mem_onchip_memory-0x1100000>
81118894:	d9400017 	ldw	r5,0(sp)
81118898:	d9800117 	ldw	r6,4(sp)
8111889c:	d9c00217 	ldw	r7,8(sp)
811188a0:	10001d26 	beq	r2,zero,81118918 <__register_exitproc+0x110>
811188a4:	81000017 	ldw	r4,0(r16)
811188a8:	10000115 	stw	zero,4(r2)
811188ac:	02000044 	movi	r8,1
811188b0:	22405217 	ldw	r9,328(r4)
811188b4:	0007883a 	mov	r3,zero
811188b8:	12400015 	stw	r9,0(r2)
811188bc:	20805215 	stw	r2,328(r4)
811188c0:	10006215 	stw	zero,392(r2)
811188c4:	10006315 	stw	zero,396(r2)
811188c8:	883fde26 	beq	r17,zero,81118844 <__reset+0xfb0f8844>
811188cc:	18c9883a 	add	r4,r3,r3
811188d0:	2109883a 	add	r4,r4,r4
811188d4:	1109883a 	add	r4,r2,r4
811188d8:	21802215 	stw	r6,136(r4)
811188dc:	01800044 	movi	r6,1
811188e0:	12406217 	ldw	r9,392(r2)
811188e4:	30cc983a 	sll	r6,r6,r3
811188e8:	4992b03a 	or	r9,r9,r6
811188ec:	12406215 	stw	r9,392(r2)
811188f0:	21c04215 	stw	r7,264(r4)
811188f4:	01000084 	movi	r4,2
811188f8:	893fd21e 	bne	r17,r4,81118844 <__reset+0xfb0f8844>
811188fc:	11006317 	ldw	r4,396(r2)
81118900:	218cb03a 	or	r6,r4,r6
81118904:	11806315 	stw	r6,396(r2)
81118908:	003fce06 	br	81118844 <__reset+0xfb0f8844>
8111890c:	18805304 	addi	r2,r3,332
81118910:	18805215 	stw	r2,328(r3)
81118914:	003fc606 	br	81118830 <__reset+0xfb0f8830>
81118918:	00bfffc4 	movi	r2,-1
8111891c:	003fd006 	br	81118860 <__reset+0xfb0f8860>

81118920 <__call_exitprocs>:
81118920:	defff504 	addi	sp,sp,-44
81118924:	df000915 	stw	fp,36(sp)
81118928:	dd400615 	stw	r21,24(sp)
8111892c:	dc800315 	stw	r18,12(sp)
81118930:	dfc00a15 	stw	ra,40(sp)
81118934:	ddc00815 	stw	r23,32(sp)
81118938:	dd800715 	stw	r22,28(sp)
8111893c:	dd000515 	stw	r20,20(sp)
81118940:	dcc00415 	stw	r19,16(sp)
81118944:	dc400215 	stw	r17,8(sp)
81118948:	dc000115 	stw	r16,4(sp)
8111894c:	d9000015 	stw	r4,0(sp)
81118950:	2839883a 	mov	fp,r5
81118954:	04800044 	movi	r18,1
81118958:	057fffc4 	movi	r21,-1
8111895c:	00a044b4 	movhi	r2,33042
81118960:	10af1704 	addi	r2,r2,-17316
81118964:	12000017 	ldw	r8,0(r2)
81118968:	45005217 	ldw	r20,328(r8)
8111896c:	44c05204 	addi	r19,r8,328
81118970:	a0001c26 	beq	r20,zero,811189e4 <__call_exitprocs+0xc4>
81118974:	a0800117 	ldw	r2,4(r20)
81118978:	15ffffc4 	addi	r23,r2,-1
8111897c:	b8000d16 	blt	r23,zero,811189b4 <__call_exitprocs+0x94>
81118980:	14000044 	addi	r16,r2,1
81118984:	8421883a 	add	r16,r16,r16
81118988:	8421883a 	add	r16,r16,r16
8111898c:	84402004 	addi	r17,r16,128
81118990:	a463883a 	add	r17,r20,r17
81118994:	a421883a 	add	r16,r20,r16
81118998:	e0001e26 	beq	fp,zero,81118a14 <__call_exitprocs+0xf4>
8111899c:	80804017 	ldw	r2,256(r16)
811189a0:	e0801c26 	beq	fp,r2,81118a14 <__call_exitprocs+0xf4>
811189a4:	bdffffc4 	addi	r23,r23,-1
811189a8:	843fff04 	addi	r16,r16,-4
811189ac:	8c7fff04 	addi	r17,r17,-4
811189b0:	bd7ff91e 	bne	r23,r21,81118998 <__reset+0xfb0f8998>
811189b4:	00800034 	movhi	r2,0
811189b8:	10800004 	addi	r2,r2,0
811189bc:	10000926 	beq	r2,zero,811189e4 <__call_exitprocs+0xc4>
811189c0:	a0800117 	ldw	r2,4(r20)
811189c4:	1000301e 	bne	r2,zero,81118a88 <__call_exitprocs+0x168>
811189c8:	a0800017 	ldw	r2,0(r20)
811189cc:	10003226 	beq	r2,zero,81118a98 <__call_exitprocs+0x178>
811189d0:	a009883a 	mov	r4,r20
811189d4:	98800015 	stw	r2,0(r19)
811189d8:	00000000 	call	80000000 <__alt_mem_onchip_memory-0x1100000>
811189dc:	9d000017 	ldw	r20,0(r19)
811189e0:	a03fe41e 	bne	r20,zero,81118974 <__reset+0xfb0f8974>
811189e4:	dfc00a17 	ldw	ra,40(sp)
811189e8:	df000917 	ldw	fp,36(sp)
811189ec:	ddc00817 	ldw	r23,32(sp)
811189f0:	dd800717 	ldw	r22,28(sp)
811189f4:	dd400617 	ldw	r21,24(sp)
811189f8:	dd000517 	ldw	r20,20(sp)
811189fc:	dcc00417 	ldw	r19,16(sp)
81118a00:	dc800317 	ldw	r18,12(sp)
81118a04:	dc400217 	ldw	r17,8(sp)
81118a08:	dc000117 	ldw	r16,4(sp)
81118a0c:	dec00b04 	addi	sp,sp,44
81118a10:	f800283a 	ret
81118a14:	a0800117 	ldw	r2,4(r20)
81118a18:	80c00017 	ldw	r3,0(r16)
81118a1c:	10bfffc4 	addi	r2,r2,-1
81118a20:	15c01426 	beq	r2,r23,81118a74 <__call_exitprocs+0x154>
81118a24:	80000015 	stw	zero,0(r16)
81118a28:	183fde26 	beq	r3,zero,811189a4 <__reset+0xfb0f89a4>
81118a2c:	95c8983a 	sll	r4,r18,r23
81118a30:	a0806217 	ldw	r2,392(r20)
81118a34:	a5800117 	ldw	r22,4(r20)
81118a38:	2084703a 	and	r2,r4,r2
81118a3c:	10000b26 	beq	r2,zero,81118a6c <__call_exitprocs+0x14c>
81118a40:	a0806317 	ldw	r2,396(r20)
81118a44:	2088703a 	and	r4,r4,r2
81118a48:	20000c1e 	bne	r4,zero,81118a7c <__call_exitprocs+0x15c>
81118a4c:	89400017 	ldw	r5,0(r17)
81118a50:	d9000017 	ldw	r4,0(sp)
81118a54:	183ee83a 	callr	r3
81118a58:	a0800117 	ldw	r2,4(r20)
81118a5c:	15bfbf1e 	bne	r2,r22,8111895c <__reset+0xfb0f895c>
81118a60:	98800017 	ldw	r2,0(r19)
81118a64:	153fcf26 	beq	r2,r20,811189a4 <__reset+0xfb0f89a4>
81118a68:	003fbc06 	br	8111895c <__reset+0xfb0f895c>
81118a6c:	183ee83a 	callr	r3
81118a70:	003ff906 	br	81118a58 <__reset+0xfb0f8a58>
81118a74:	a5c00115 	stw	r23,4(r20)
81118a78:	003feb06 	br	81118a28 <__reset+0xfb0f8a28>
81118a7c:	89000017 	ldw	r4,0(r17)
81118a80:	183ee83a 	callr	r3
81118a84:	003ff406 	br	81118a58 <__reset+0xfb0f8a58>
81118a88:	a0800017 	ldw	r2,0(r20)
81118a8c:	a027883a 	mov	r19,r20
81118a90:	1029883a 	mov	r20,r2
81118a94:	003fb606 	br	81118970 <__reset+0xfb0f8970>
81118a98:	0005883a 	mov	r2,zero
81118a9c:	003ffb06 	br	81118a8c <__reset+0xfb0f8a8c>

81118aa0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
81118aa0:	defffc04 	addi	sp,sp,-16
81118aa4:	dfc00315 	stw	ra,12(sp)
81118aa8:	df000215 	stw	fp,8(sp)
81118aac:	df000204 	addi	fp,sp,8
81118ab0:	e13fff15 	stw	r4,-4(fp)
  /* ALT_LOG - please see HAL/inc/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
81118ab4:	d0a00c17 	ldw	r2,-32720(gp)
81118ab8:	10800058 	cmpnei	r2,r2,1
81118abc:	1000031e 	bne	r2,zero,81118acc <_exit+0x2c>
81118ac0:	012044b4 	movhi	r4,33042
81118ac4:	2127a604 	addi	r4,r4,-24936
81118ac8:	11135f00 	call	811135f0 <alt_log_printf_proc>
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
81118acc:	d0a00c17 	ldw	r2,-32720(gp)
81118ad0:	10800058 	cmpnei	r2,r2,1
81118ad4:	1000041e 	bne	r2,zero,81118ae8 <_exit+0x48>
81118ad8:	e17fff17 	ldw	r5,-4(fp)
81118adc:	012044b4 	movhi	r4,33042
81118ae0:	2127b104 	addi	r4,r4,-24892
81118ae4:	11135f00 	call	811135f0 <alt_log_printf_proc>
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
81118ae8:	d0a00c17 	ldw	r2,-32720(gp)
81118aec:	10800058 	cmpnei	r2,r2,1
81118af0:	1000031e 	bne	r2,zero,81118b00 <_exit+0x60>
81118af4:	012044b4 	movhi	r4,33042
81118af8:	2127bc04 	addi	r4,r4,-24848
81118afc:	11135f00 	call	811135f0 <alt_log_printf_proc>
  ALT_OS_STOP();
81118b00:	0001883a 	nop

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
81118b04:	d0a00c17 	ldw	r2,-32720(gp)
81118b08:	10800058 	cmpnei	r2,r2,1
81118b0c:	1000031e 	bne	r2,zero,81118b1c <_exit+0x7c>
81118b10:	012044b4 	movhi	r4,33042
81118b14:	2127c604 	addi	r4,r4,-24808
81118b18:	11135f00 	call	811135f0 <alt_log_printf_proc>
81118b1c:	e0bfff17 	ldw	r2,-4(fp)
81118b20:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
81118b24:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
81118b28:	10000226 	beq	r2,zero,81118b34 <_exit+0x94>
    ALT_SIM_FAIL();
81118b2c:	002af070 	cmpltui	zero,zero,43969
81118b30:	00000106 	br	81118b38 <_exit+0x98>
  } else {
    ALT_SIM_PASS();
81118b34:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
81118b38:	d0a00c17 	ldw	r2,-32720(gp)
81118b3c:	10800058 	cmpnei	r2,r2,1
81118b40:	1000031e 	bne	r2,zero,81118b50 <_exit+0xb0>
81118b44:	012044b4 	movhi	r4,33042
81118b48:	2127d004 	addi	r4,r4,-24768
81118b4c:	11135f00 	call	811135f0 <alt_log_printf_proc>
  while (1);
81118b50:	003fff06 	br	81118b50 <__reset+0xfb0f8b50>
