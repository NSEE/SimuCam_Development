
sync_test.elf:     file format elf32-littlenios2
sync_test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x81100244

Program Header:
    LOAD off    0x00001020 vaddr 0x81100020 paddr 0x81100020 align 2**12
         filesz 0x0000a6b4 memsz 0x0000a808 flags rwx
    LOAD off    0x0000c000 vaddr 0x86020000 paddr 0x86020000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  86020000  86020000  0000c000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  81100020  81100020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000086cc  81100244  81100244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000288  81108910  81108910  00009910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b3c  81108b98  81108b98  00009b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  8110a6d4  8110a6d4  0000b6d4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  8110a828  8110a828  0000c000  2**0
                  CONTENTS
  7 .descriptor_memory 00000000  81200800  81200800  0000c000  2**0
                  CONTENTS
  8 .ext_flash    00000000  86020020  86020020  0000c000  2**0
                  CONTENTS
  9 .comment      00000023  00000000  00000000  0000c000  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000ab8  00000000  00000000  0000c028  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0001a623  00000000  00000000  0000cae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00006bed  00000000  00000000  00027103  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000784f  00000000  00000000  0002dcf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001ed8  00000000  00000000  00035540  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000036aa  00000000  00000000  00037418  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00004e22  00000000  00000000  0003aac2  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000040  00000000  00000000  0003f8e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 000006d8  00000000  00000000  0003f928  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000003  00000000  00000000  0004327d  2**0
                  CONTENTS, READONLY
 20 .cpu          0000000c  00000000  00000000  00043280  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  0004328c  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  0004328d  2**0
                  CONTENTS, READONLY
 23 .sysid_hash   00000004  00000000  00000000  0004328e  2**0
                  CONTENTS, READONLY
 24 .sysid_base   00000004  00000000  00000000  00043292  2**0
                  CONTENTS, READONLY
 25 .sysid_time   00000004  00000000  00000000  00043296  2**0
                  CONTENTS, READONLY
 26 .stderr_dev   0000000b  00000000  00000000  0004329a  2**0
                  CONTENTS, READONLY
 27 .stdin_dev    0000000b  00000000  00000000  000432a5  2**0
                  CONTENTS, READONLY
 28 .stdout_dev   0000000b  00000000  00000000  000432b0  2**0
                  CONTENTS, READONLY
 29 .sopc_system_name 00000011  00000000  00000000  000432bb  2**0
                  CONTENTS, READONLY
 30 .quartus_project_dir 00000039  00000000  00000000  000432cc  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0027a757  00000000  00000000  00043305  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
86020000 l    d  .entry	00000000 .entry
81100020 l    d  .exceptions	00000000 .exceptions
81100244 l    d  .text	00000000 .text
81108910 l    d  .rodata	00000000 .rodata
81108b98 l    d  .rwdata	00000000 .rwdata
8110a6d4 l    d  .bss	00000000 .bss
8110a828 l    d  .onchip_memory	00000000 .onchip_memory
81200800 l    d  .descriptor_memory	00000000 .descriptor_memory
86020020 l    d  .ext_flash	00000000 .ext_flash
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../sync_test_bsp//obj/HAL/src/crt0.o
81100278 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
8110041c l     F .text	00000008 __fp_unlock
81100430 l     F .text	0000019c __sinit.part.1
811005cc l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
81108b98 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
81103078 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
81103184 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
811031b0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
8110329c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
8110337c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
81103550 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
8110a6b4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
8110379c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
811038d0 l     F .text	00000034 alt_dev_reg
8110956c l     O .rwdata	00001060 jtag_uart_0
8110a5cc l     O .rwdata	00000030 sgdma_rx
8110a5fc l     O .rwdata	00000030 sgdma_tx
8110a62c l     O .rwdata	00000060 dma_DDR_M
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
81103c1c l     F .text	0000020c altera_avalon_jtag_uart_irq
81103e28 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_sgdma.c
81104460 l     F .text	0000003c alt_get_errno
81105090 l     F .text	000000bc alt_avalon_sgdma_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
811051f4 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_msgdma.c
811052e8 l     F .text	0000003c alt_get_errno
81105324 l     F .text	00000094 alt_msgdma_write_standard_descriptor
811053b8 l     F .text	0000012c alt_msgdma_write_extended_descriptor
811054e4 l     F .text	00000184 alt_msgdma_irq
81105668 l     F .text	0000008c alt_msgdma_construct_standard_descriptor
811056f4 l     F .text	00000154 alt_msgdma_construct_extended_descriptor
81105848 l     F .text	000002d0 alt_msgdma_descriptor_async_transfer
81105b18 l     F .text	00000378 alt_msgdma_descriptor_sync_transfer
81106160 l     F .text	000000a4 alt_msgdma_construct_prefetcher_standard_descriptor
81106204 l     F .text	00000194 alt_msgdma_construct_prefetcher_extended_descriptor
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
811073e0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
811078b0 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
811079f0 l     F .text	0000003c alt_get_errno
81107a2c l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
8110a6fc g     O .bss	00000004 alt_instruction_exception_handler
81107074 g     F .text	0000003c alt_msgdma_standard_descriptor_async_transfer
81102e70 g     F .text	00000054 _isatty_r
8110348c g     F .text	0000007c alt_main
811002b0 g     F .text	000000c0 _puts_r
8110a728 g     O .bss	00000100 alt_irq
81102b98 g     F .text	00000060 _lseek_r
81105f40 g     F .text	00000058 alt_msgdma_construct_standard_mm_to_mm_descriptor
8110a828 g       *ABS*	00000000 __alt_heap_start
811045c0 g     F .text	00000110 alt_avalon_sgdma_do_sync_transfer
8110214c g     F .text	0000005c __sseek
8110076c g     F .text	00000010 __sinit
811084ec g     F .text	00000140 __swbuf_r
811005d4 g     F .text	00000068 __sfmoreglue
8110352c g     F .text	00000024 __malloc_unlock
81104cd8 g     F .text	000003b8 alt_avalon_sgdma_construct_descriptor_burst
81101838 g     F .text	0000015c memmove
81100754 g     F .text	00000018 _cleanup
81105e90 g     F .text	00000058 alt_msgdma_construct_standard_st_to_mm_descriptor
81108050 g     F .text	00000024 altera_nios2_gen2_irq_init
86020000 g     F .entry	00000000 __reset
81104828 g     F .text	00000078 alt_avalon_sgdma_construct_stream_to_mem_desc_burst
81102e14 g     F .text	0000005c _fstat_r
8110a6e0 g     O .bss	00000004 errno
811020c8 g     F .text	00000008 __seofread
8110a6e8 g     O .bss	00000004 alt_argv
8111268c g       *ABS*	00000000 _gp
811069b0 g     F .text	000000d4 alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits
811093ec g     O .rwdata	00000180 alt_fd_list
81107580 g     F .text	00000090 alt_find_dev
811016f0 g     F .text	00000148 memcpy
81100424 g     F .text	0000000c _cleanup_r
81107974 g     F .text	0000007c alt_io_redirect
81108910 g       *ABS*	00000000 __DTOR_END__
81106dd0 g     F .text	0000008c alt_msgdma_start_prefetcher_with_extd_desc_list
811070b0 g     F .text	0000003c alt_msgdma_extended_descriptor_async_transfer
81107020 g     F .text	00000054 alt_msgdma_register_callback
81100370 g     F .text	00000014 puts
81108220 g     F .text	0000009c alt_exception_cause_generated_bad_addr
81104920 g     F .text	0000008c alt_avalon_sgdma_construct_mem_to_stream_desc_burst
81104020 g     F .text	0000021c altera_avalon_jtag_uart_read
81106690 g     F .text	000000f0 alt_msgdma_prefetcher_add_standard_desc_to_list
81102fbc g     F .text	00000064 .hidden __udivsi3
811032d8 g     F .text	000000a4 isatty
8110a6dc g     O .bss	00000004 __malloc_top_pad
811007bc g     F .text	000004bc __sfvwrite_r
81104a58 g     F .text	0000005c alt_avalon_sgdma_stop
81102020 g     F .text	00000054 _sbrk_r
81102db4 g     F .text	00000060 _read_r
811073b8 g     F .text	00000028 alt_dcache_flush
8110a6ac g     O .rwdata	00000004 alt_max_fd
811023b8 g     F .text	000000f0 _fclose_r
81102734 g     F .text	00000030 fflush
8110a6d8 g     O .bss	00000004 __malloc_max_sbrked_mem
811063f0 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor
811033b8 g     F .text	000000d4 lseek
8110a68c g     O .rwdata	00000004 _global_impure_ptr
81101abc g     F .text	00000564 _realloc_r
8110a828 g       *ABS*	00000000 __bss_end
811077c0 g     F .text	000000f0 alt_iic_isr_register
8110449c g     F .text	00000124 alt_avalon_sgdma_do_async_transfer
81107f48 g     F .text	00000108 alt_tick
81106eb4 g     F .text	0000016c alt_msgdma_init
81107128 g     F .text	0000003c alt_msgdma_extended_descriptor_sync_transfer
8110078c g     F .text	00000018 __fp_lock_all
81107774 g     F .text	0000004c alt_ic_irq_enabled
81107eac g     F .text	0000009c alt_alarm_stop
81200800 g       *ABS*	00000000 __alt_mem_descriptor_memory
8110a6f0 g     O .bss	00000004 alt_irq_active
811000fc g     F .exceptions	000000d4 alt_irq_handler
811093c4 g     O .rwdata	00000028 alt_dev_null
81106028 g     F .text	00000090 alt_msgdma_construct_extended_mm_to_st_descriptor
81104ab4 g     F .text	00000064 alt_avalon_sgdma_check_descriptor_status
81106d44 g     F .text	0000008c alt_msgdma_start_prefetcher_with_std_desc_list
81100000 g       *ABS*	00000000 __alt_mem_onchip_memory
8110a6a4 g     O .rwdata	00000008 alt_dev_list
811037d8 g     F .text	000000f8 write
81104bf8 g     F .text	00000080 alt_avalon_sgdma_enable_desc_poll
81108384 g     F .text	000000a0 _putc_r
811031ec g     F .text	000000b0 fstat
81103020 g     F .text	00000058 .hidden __umodsi3
811048a0 g     F .text	00000080 alt_avalon_sgdma_construct_mem_to_stream_desc
81106448 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor
811049ac g     F .text	00000054 alt_avalon_sgdma_register_callback
8110a828 g       *ABS*	00000000 end
81103b5c g     F .text	000000c0 altera_avalon_jtag_uart_init
811001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
81108910 g       *ABS*	00000000 __CTOR_LIST__
811fa000 g       *ABS*	00000000 __alt_stack_pointer
81104c78 g     F .text	00000060 alt_avalon_sgdma_disable_desc_poll
8110526c g     F .text	0000007c alt_avalon_timer_sc_init
8110423c g     F .text	00000224 altera_avalon_jtag_uart_write
811046d0 g     F .text	00000074 alt_avalon_sgdma_construct_mem_to_mem_desc
8110077c g     F .text	00000004 __sfp_lock_acquire
8110160c g     F .text	000000e4 memchr
811047c8 g     F .text	00000060 alt_avalon_sgdma_construct_stream_to_mem_desc
81102888 g     F .text	00000310 _free_r
81107c44 g     F .text	0000022c alt_printf
8110875c g     F .text	00000180 __call_exitprocs
8110a694 g     O .rwdata	00000004 __malloc_sbrk_base
81100244 g     F .text	00000038 _start
8110a6f4 g     O .bss	00000004 _alt_tick_rate
81104b18 g     F .text	00000054 alt_avalon_sgdma_open
8110a6f8 g     O .bss	00000004 _alt_nticks
81105ee8 g     F .text	00000058 alt_msgdma_construct_standard_mm_to_st_descriptor
8110358c g     F .text	000000fc read
8110393c g     F .text	000000bc alt_sys_init
81108644 g     F .text	00000118 __register_exitproc
81103ec8 g     F .text	00000068 altera_avalon_jtag_uart_close
8110a700 g     O .bss	00000028 __malloc_current_mallinfo
811039f8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
8110817c g     F .text	000000a4 alt_get_fd
81107290 g     F .text	00000128 alt_busy_sleep
81102364 g     F .text	00000054 _close_r
81106398 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor
81108308 g     F .text	0000007c memcmp
81103ab8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
8110a828 g       *ABS*	00000000 __alt_stack_base
81103b08 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
811064a0 g     F .text	000000a0 alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor
81102210 g     F .text	00000154 __swsetup_r
8110063c g     F .text	00000118 __sfp
81108fbc g     O .rwdata	00000408 __malloc_av_
81100788 g     F .text	00000004 __sinit_lock_release
81102074 g     F .text	00000054 __sread
81108074 g     F .text	00000108 alt_find_file
8110741c g     F .text	000000a4 alt_dev_llist_insert
81103508 g     F .text	00000024 __malloc_lock
811036ec g     F .text	000000b0 sbrk
81104a00 g     F .text	00000058 alt_avalon_sgdma_start
811026d8 g     F .text	0000005c _fflush_r
8110a6d4 g       *ABS*	00000000 __bss_start
81101994 g     F .text	00000128 memset
81106e5c g     F .text	00000058 alt_msgdma_open
8110027c g     F .text	00000034 main
8110a6ec g     O .bss	00000004 alt_envp
8110a6d4 g     O .bss	00000004 __malloc_max_total_mem
81106780 g     F .text	00000198 alt_msgdma_prefetcher_add_extended_desc_to_list
81103a58 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
8110862c g     F .text	00000018 __swbuf
8110a6b8 g     O .rwdata	00000008 alt_sgdma_list
811021a8 g     F .text	00000008 __sclose
811fa000 g       *ABS*	00000000 __alt_heap_limit
811024a8 g     F .text	00000014 fclose
81106a84 g     F .text	000002c0 alt_msgdma_start_prefetcher_with_list_addr
81100e00 g     F .text	0000080c _malloc_r
8110a6b0 g     O .rwdata	00000004 alt_errno
811065d8 g     F .text	000000b8 alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor
81100c78 g     F .text	000000c4 _fwalk
81108424 g     F .text	000000c8 putc
81102ec4 g     F .text	00000084 .hidden __divsi3
81102764 g     F .text	00000124 _malloc_trim_r
81108910 g       *ABS*	00000000 __CTOR_END__
81108910 g       *ABS*	00000000 __DTOR_LIST__
81103904 g     F .text	00000038 alt_irq_init
81103688 g     F .text	00000064 alt_release_fd
811070ec g     F .text	0000003c alt_msgdma_standard_descriptor_sync_transfer
811082bc g     F .text	00000014 atexit
811021b0 g     F .text	00000060 _write_r
81106540 g     F .text	00000098 alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor
8110a690 g     O .rwdata	00000004 _impure_ptr
8110a6e4 g     O .bss	00000004 alt_argc
811024bc g     F .text	0000021c __sflush_r
81107520 g     F .text	00000060 _do_dtors
81100020 g       .exceptions	00000000 alt_irq_entry
811007a4 g     F .text	00000018 __fp_unlock_all
8110a69c g     O .rwdata	00000008 alt_fs_list
81107610 g     F .text	00000050 alt_ic_isr_register
8110a6d4 g       *ABS*	00000000 _edata
8110a828 g       *ABS*	00000000 _end
81103f30 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
811076e8 g     F .text	0000008c alt_ic_irq_disable
81104b6c g     F .text	0000008c alt_avalon_sgdma_construct_descriptor
811020d0 g     F .text	0000007c __swrite
8110a698 g     O .rwdata	00000004 __malloc_trim_threshold
811082d0 g     F .text	00000038 exit
81100d3c g     F .text	000000c4 _fwalk_reent
81106918 g     F .text	00000098 alt_msgdma_prefetcher_set_std_list_own_by_hw_bits
81102f48 g     F .text	00000074 .hidden __modsi3
811fa000 g       *ABS*	00000000 __alt_data_end
81100020 g     F .exceptions	00000000 alt_exception
81100780 g     F .text	00000004 __sfp_lock_release
811060b8 g     F .text	000000a8 alt_msgdma_construct_extended_mm_to_mm_descriptor
84000000 g       *ABS*	00000000 __alt_mem_ext_flash
81105f98 g     F .text	00000090 alt_msgdma_construct_extended_st_to_mm_descriptor
811088dc g     F .text	00000034 _exit
81107164 g     F .text	0000012c alt_alarm_start
81102bf8 g     F .text	000001bc __smakebuf_r
8110a6c0 g     O .rwdata	00000008 alt_msgdma_list
81100384 g     F .text	00000098 strlen
81107af0 g     F .text	00000154 open
81107e70 g     F .text	0000003c alt_putchar
8110a6c8 g     O .rwdata	00000004 alt_priority_mask
81107660 g     F .text	00000088 alt_ic_irq_enable
81104744 g     F .text	00000084 alt_avalon_sgdma_construct_mem_to_mem_desc_burst
8110a6cc g     O .rwdata	00000008 alt_alarm_list
811074c0 g     F .text	00000060 _do_ctors
811030b4 g     F .text	000000d0 close
8110514c g     F .text	000000a8 alt_avalon_sgdma_init
81100784 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .exceptions:

81100020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
81100020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
81100024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
81100028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
8110002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
81100030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
81100034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
81100038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
8110003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
81100040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
81100044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
81100048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
8110004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
81100050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
81100054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
81100058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
8110005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
81100060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
81100064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
81100068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
8110006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
81100070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
81100074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
81100078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
8110007c:	10000326 	beq	r2,zero,8110008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
81100080:	20000226 	beq	r4,zero,8110008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
81100084:	11000fc0 	call	811000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
81100088:	00000706 	br	811000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
8110008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
81100090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
81100094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
81100098:	11001d00 	call	811001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
8110009c:	1000021e 	bne	r2,zero,811000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
811000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
811000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
811000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
811000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
811000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
811000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
811000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
811000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
811000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
811000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
811000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
811000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
811000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
811000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
811000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
811000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
811000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
811000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
811000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
811000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
811000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
811000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
811000f8:	ef80083a 	eret

811000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
811000fc:	defff904 	addi	sp,sp,-28
81100100:	dfc00615 	stw	ra,24(sp)
81100104:	df000515 	stw	fp,20(sp)
81100108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
8110010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
81100110:	0005313a 	rdctl	r2,ipending
81100114:	e0bffe15 	stw	r2,-8(fp)

  return active;
81100118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
8110011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
81100120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
81100124:	00800044 	movi	r2,1
81100128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
8110012c:	e0fffb17 	ldw	r3,-20(fp)
81100130:	e0bffc17 	ldw	r2,-16(fp)
81100134:	1884703a 	and	r2,r3,r2
81100138:	10001426 	beq	r2,zero,8110018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
8110013c:	00a04474 	movhi	r2,33041
81100140:	10a9ca04 	addi	r2,r2,-22744
81100144:	e0fffd17 	ldw	r3,-12(fp)
81100148:	180690fa 	slli	r3,r3,3
8110014c:	10c5883a 	add	r2,r2,r3
81100150:	10c00017 	ldw	r3,0(r2)
81100154:	00a04474 	movhi	r2,33041
81100158:	10a9ca04 	addi	r2,r2,-22744
8110015c:	e13ffd17 	ldw	r4,-12(fp)
81100160:	200890fa 	slli	r4,r4,3
81100164:	1105883a 	add	r2,r2,r4
81100168:	10800104 	addi	r2,r2,4
8110016c:	10800017 	ldw	r2,0(r2)
81100170:	1009883a 	mov	r4,r2
81100174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
81100178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
8110017c:	0005313a 	rdctl	r2,ipending
81100180:	e0bfff15 	stw	r2,-4(fp)

  return active;
81100184:	e0bfff17 	ldw	r2,-4(fp)
81100188:	00000706 	br	811001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
8110018c:	e0bffc17 	ldw	r2,-16(fp)
81100190:	1085883a 	add	r2,r2,r2
81100194:	e0bffc15 	stw	r2,-16(fp)
      i++;
81100198:	e0bffd17 	ldw	r2,-12(fp)
8110019c:	10800044 	addi	r2,r2,1
811001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
811001a4:	003fe106 	br	8110012c <__reset+0xfb0e012c>

    active = alt_irq_pending ();
811001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
811001ac:	e0bffb17 	ldw	r2,-20(fp)
811001b0:	103fdb1e 	bne	r2,zero,81100120 <__reset+0xfb0e0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
811001b4:	0001883a 	nop
}
811001b8:	0001883a 	nop
811001bc:	e037883a 	mov	sp,fp
811001c0:	dfc00117 	ldw	ra,4(sp)
811001c4:	df000017 	ldw	fp,0(sp)
811001c8:	dec00204 	addi	sp,sp,8
811001cc:	f800283a 	ret

811001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
811001d0:	defffb04 	addi	sp,sp,-20
811001d4:	dfc00415 	stw	ra,16(sp)
811001d8:	df000315 	stw	fp,12(sp)
811001dc:	df000304 	addi	fp,sp,12
811001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
811001e4:	000531fa 	rdctl	r2,exception
811001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
811001ec:	e0bffd17 	ldw	r2,-12(fp)
811001f0:	10801f0c 	andi	r2,r2,124
811001f4:	1004d0ba 	srli	r2,r2,2
811001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
811001fc:	0005333a 	rdctl	r2,badaddr
81100200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
81100204:	d0a01c17 	ldw	r2,-32656(gp)
81100208:	10000726 	beq	r2,zero,81100228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
8110020c:	d0a01c17 	ldw	r2,-32656(gp)
81100210:	e0fffd17 	ldw	r3,-12(fp)
81100214:	e1bffe17 	ldw	r6,-8(fp)
81100218:	e17fff17 	ldw	r5,-4(fp)
8110021c:	1809883a 	mov	r4,r3
81100220:	103ee83a 	callr	r2
81100224:	00000206 	br	81100230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
81100228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
8110022c:	0005883a 	mov	r2,zero
}
81100230:	e037883a 	mov	sp,fp
81100234:	dfc00117 	ldw	ra,4(sp)
81100238:	df000017 	ldw	fp,0(sp)
8110023c:	dec00204 	addi	sp,sp,8
81100240:	f800283a 	ret

Disassembly of section .text:

81100244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
81100244:	06e047f4 	movhi	sp,33055
    ori sp, sp, %lo(__alt_stack_pointer)
81100248:	dee80014 	ori	sp,sp,40960
    movhi gp, %hi(_gp)
8110024c:	06a04474 	movhi	gp,33041
    ori gp, gp, %lo(_gp)
81100250:	d689a314 	ori	gp,gp,9868
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
81100254:	00a04434 	movhi	r2,33040
    ori r2, r2, %lo(__bss_start)
81100258:	10a9b514 	ori	r2,r2,42708

    movhi r3, %hi(__bss_end)
8110025c:	00e04434 	movhi	r3,33040
    ori r3, r3, %lo(__bss_end)
81100260:	18ea0a14 	ori	r3,r3,43048

    beq r2, r3, 1f
81100264:	10c00326 	beq	r2,r3,81100274 <_start+0x30>

0:
    stw zero, (r2)
81100268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
8110026c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
81100270:	10fffd36 	bltu	r2,r3,81100268 <__reset+0xfb0e0268>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
81100274:	110348c0 	call	8110348c <alt_main>

81100278 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
81100278:	003fff06 	br	81100278 <__reset+0xfb0e0278>

8110027c <main>:
 */

#include <stdio.h>

int main()
{
8110027c:	defffe04 	addi	sp,sp,-8
81100280:	dfc00115 	stw	ra,4(sp)
81100284:	df000015 	stw	fp,0(sp)
81100288:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
8110028c:	01204474 	movhi	r4,33041
81100290:	21224404 	addi	r4,r4,-30448
81100294:	11003700 	call	81100370 <puts>

  return 0;
81100298:	0005883a 	mov	r2,zero
}
8110029c:	e037883a 	mov	sp,fp
811002a0:	dfc00117 	ldw	ra,4(sp)
811002a4:	df000017 	ldw	fp,0(sp)
811002a8:	dec00204 	addi	sp,sp,8
811002ac:	f800283a 	ret

811002b0 <_puts_r>:
811002b0:	defff604 	addi	sp,sp,-40
811002b4:	dc000715 	stw	r16,28(sp)
811002b8:	2021883a 	mov	r16,r4
811002bc:	2809883a 	mov	r4,r5
811002c0:	dc400815 	stw	r17,32(sp)
811002c4:	dfc00915 	stw	ra,36(sp)
811002c8:	2823883a 	mov	r17,r5
811002cc:	11003840 	call	81100384 <strlen>
811002d0:	10c00044 	addi	r3,r2,1
811002d4:	d8800115 	stw	r2,4(sp)
811002d8:	00a04474 	movhi	r2,33041
811002dc:	10a24904 	addi	r2,r2,-30428
811002e0:	d8800215 	stw	r2,8(sp)
811002e4:	00800044 	movi	r2,1
811002e8:	d8800315 	stw	r2,12(sp)
811002ec:	00800084 	movi	r2,2
811002f0:	dc400015 	stw	r17,0(sp)
811002f4:	d8c00615 	stw	r3,24(sp)
811002f8:	dec00415 	stw	sp,16(sp)
811002fc:	d8800515 	stw	r2,20(sp)
81100300:	80000226 	beq	r16,zero,8110030c <_puts_r+0x5c>
81100304:	80800e17 	ldw	r2,56(r16)
81100308:	10001426 	beq	r2,zero,8110035c <_puts_r+0xac>
8110030c:	81400217 	ldw	r5,8(r16)
81100310:	2880030b 	ldhu	r2,12(r5)
81100314:	10c8000c 	andi	r3,r2,8192
81100318:	1800061e 	bne	r3,zero,81100334 <_puts_r+0x84>
8110031c:	29001917 	ldw	r4,100(r5)
81100320:	00f7ffc4 	movi	r3,-8193
81100324:	10880014 	ori	r2,r2,8192
81100328:	20c6703a 	and	r3,r4,r3
8110032c:	2880030d 	sth	r2,12(r5)
81100330:	28c01915 	stw	r3,100(r5)
81100334:	d9800404 	addi	r6,sp,16
81100338:	8009883a 	mov	r4,r16
8110033c:	11007bc0 	call	811007bc <__sfvwrite_r>
81100340:	1000091e 	bne	r2,zero,81100368 <_puts_r+0xb8>
81100344:	00800284 	movi	r2,10
81100348:	dfc00917 	ldw	ra,36(sp)
8110034c:	dc400817 	ldw	r17,32(sp)
81100350:	dc000717 	ldw	r16,28(sp)
81100354:	dec00a04 	addi	sp,sp,40
81100358:	f800283a 	ret
8110035c:	8009883a 	mov	r4,r16
81100360:	110076c0 	call	8110076c <__sinit>
81100364:	003fe906 	br	8110030c <__reset+0xfb0e030c>
81100368:	00bfffc4 	movi	r2,-1
8110036c:	003ff606 	br	81100348 <__reset+0xfb0e0348>

81100370 <puts>:
81100370:	00a04474 	movhi	r2,33041
81100374:	10a9a404 	addi	r2,r2,-22896
81100378:	200b883a 	mov	r5,r4
8110037c:	11000017 	ldw	r4,0(r2)
81100380:	11002b01 	jmpi	811002b0 <_puts_r>

81100384 <strlen>:
81100384:	208000cc 	andi	r2,r4,3
81100388:	10002026 	beq	r2,zero,8110040c <strlen+0x88>
8110038c:	20800007 	ldb	r2,0(r4)
81100390:	10002026 	beq	r2,zero,81100414 <strlen+0x90>
81100394:	2005883a 	mov	r2,r4
81100398:	00000206 	br	811003a4 <strlen+0x20>
8110039c:	10c00007 	ldb	r3,0(r2)
811003a0:	18001826 	beq	r3,zero,81100404 <strlen+0x80>
811003a4:	10800044 	addi	r2,r2,1
811003a8:	10c000cc 	andi	r3,r2,3
811003ac:	183ffb1e 	bne	r3,zero,8110039c <__reset+0xfb0e039c>
811003b0:	10c00017 	ldw	r3,0(r2)
811003b4:	01ffbff4 	movhi	r7,65279
811003b8:	39ffbfc4 	addi	r7,r7,-257
811003bc:	00ca303a 	nor	r5,zero,r3
811003c0:	01a02074 	movhi	r6,32897
811003c4:	19c7883a 	add	r3,r3,r7
811003c8:	31a02004 	addi	r6,r6,-32640
811003cc:	1946703a 	and	r3,r3,r5
811003d0:	1986703a 	and	r3,r3,r6
811003d4:	1800091e 	bne	r3,zero,811003fc <strlen+0x78>
811003d8:	10800104 	addi	r2,r2,4
811003dc:	10c00017 	ldw	r3,0(r2)
811003e0:	19cb883a 	add	r5,r3,r7
811003e4:	00c6303a 	nor	r3,zero,r3
811003e8:	28c6703a 	and	r3,r5,r3
811003ec:	1986703a 	and	r3,r3,r6
811003f0:	183ff926 	beq	r3,zero,811003d8 <__reset+0xfb0e03d8>
811003f4:	00000106 	br	811003fc <strlen+0x78>
811003f8:	10800044 	addi	r2,r2,1
811003fc:	10c00007 	ldb	r3,0(r2)
81100400:	183ffd1e 	bne	r3,zero,811003f8 <__reset+0xfb0e03f8>
81100404:	1105c83a 	sub	r2,r2,r4
81100408:	f800283a 	ret
8110040c:	2005883a 	mov	r2,r4
81100410:	003fe706 	br	811003b0 <__reset+0xfb0e03b0>
81100414:	0005883a 	mov	r2,zero
81100418:	f800283a 	ret

8110041c <__fp_unlock>:
8110041c:	0005883a 	mov	r2,zero
81100420:	f800283a 	ret

81100424 <_cleanup_r>:
81100424:	01604434 	movhi	r5,33040
81100428:	2948ee04 	addi	r5,r5,9144
8110042c:	1100d3c1 	jmpi	81100d3c <_fwalk_reent>

81100430 <__sinit.part.1>:
81100430:	defff704 	addi	sp,sp,-36
81100434:	00e04434 	movhi	r3,33040
81100438:	dfc00815 	stw	ra,32(sp)
8110043c:	ddc00715 	stw	r23,28(sp)
81100440:	dd800615 	stw	r22,24(sp)
81100444:	dd400515 	stw	r21,20(sp)
81100448:	dd000415 	stw	r20,16(sp)
8110044c:	dcc00315 	stw	r19,12(sp)
81100450:	dc800215 	stw	r18,8(sp)
81100454:	dc400115 	stw	r17,4(sp)
81100458:	dc000015 	stw	r16,0(sp)
8110045c:	18c10904 	addi	r3,r3,1060
81100460:	24000117 	ldw	r16,4(r4)
81100464:	20c00f15 	stw	r3,60(r4)
81100468:	2080bb04 	addi	r2,r4,748
8110046c:	00c000c4 	movi	r3,3
81100470:	20c0b915 	stw	r3,740(r4)
81100474:	2080ba15 	stw	r2,744(r4)
81100478:	2000b815 	stw	zero,736(r4)
8110047c:	05c00204 	movi	r23,8
81100480:	00800104 	movi	r2,4
81100484:	2025883a 	mov	r18,r4
81100488:	b80d883a 	mov	r6,r23
8110048c:	81001704 	addi	r4,r16,92
81100490:	000b883a 	mov	r5,zero
81100494:	80000015 	stw	zero,0(r16)
81100498:	80000115 	stw	zero,4(r16)
8110049c:	80000215 	stw	zero,8(r16)
811004a0:	8080030d 	sth	r2,12(r16)
811004a4:	80001915 	stw	zero,100(r16)
811004a8:	8000038d 	sth	zero,14(r16)
811004ac:	80000415 	stw	zero,16(r16)
811004b0:	80000515 	stw	zero,20(r16)
811004b4:	80000615 	stw	zero,24(r16)
811004b8:	11019940 	call	81101994 <memset>
811004bc:	05a04434 	movhi	r22,33040
811004c0:	94400217 	ldw	r17,8(r18)
811004c4:	05604434 	movhi	r21,33040
811004c8:	05204434 	movhi	r20,33040
811004cc:	04e04434 	movhi	r19,33040
811004d0:	b5881d04 	addi	r22,r22,8308
811004d4:	ad483404 	addi	r21,r21,8400
811004d8:	a5085304 	addi	r20,r20,8524
811004dc:	9cc86a04 	addi	r19,r19,8616
811004e0:	85800815 	stw	r22,32(r16)
811004e4:	85400915 	stw	r21,36(r16)
811004e8:	85000a15 	stw	r20,40(r16)
811004ec:	84c00b15 	stw	r19,44(r16)
811004f0:	84000715 	stw	r16,28(r16)
811004f4:	00800284 	movi	r2,10
811004f8:	8880030d 	sth	r2,12(r17)
811004fc:	00800044 	movi	r2,1
81100500:	b80d883a 	mov	r6,r23
81100504:	89001704 	addi	r4,r17,92
81100508:	000b883a 	mov	r5,zero
8110050c:	88000015 	stw	zero,0(r17)
81100510:	88000115 	stw	zero,4(r17)
81100514:	88000215 	stw	zero,8(r17)
81100518:	88001915 	stw	zero,100(r17)
8110051c:	8880038d 	sth	r2,14(r17)
81100520:	88000415 	stw	zero,16(r17)
81100524:	88000515 	stw	zero,20(r17)
81100528:	88000615 	stw	zero,24(r17)
8110052c:	11019940 	call	81101994 <memset>
81100530:	94000317 	ldw	r16,12(r18)
81100534:	00800484 	movi	r2,18
81100538:	8c400715 	stw	r17,28(r17)
8110053c:	8d800815 	stw	r22,32(r17)
81100540:	8d400915 	stw	r21,36(r17)
81100544:	8d000a15 	stw	r20,40(r17)
81100548:	8cc00b15 	stw	r19,44(r17)
8110054c:	8080030d 	sth	r2,12(r16)
81100550:	00800084 	movi	r2,2
81100554:	80000015 	stw	zero,0(r16)
81100558:	80000115 	stw	zero,4(r16)
8110055c:	80000215 	stw	zero,8(r16)
81100560:	80001915 	stw	zero,100(r16)
81100564:	8080038d 	sth	r2,14(r16)
81100568:	80000415 	stw	zero,16(r16)
8110056c:	80000515 	stw	zero,20(r16)
81100570:	80000615 	stw	zero,24(r16)
81100574:	b80d883a 	mov	r6,r23
81100578:	000b883a 	mov	r5,zero
8110057c:	81001704 	addi	r4,r16,92
81100580:	11019940 	call	81101994 <memset>
81100584:	00800044 	movi	r2,1
81100588:	84000715 	stw	r16,28(r16)
8110058c:	85800815 	stw	r22,32(r16)
81100590:	85400915 	stw	r21,36(r16)
81100594:	85000a15 	stw	r20,40(r16)
81100598:	84c00b15 	stw	r19,44(r16)
8110059c:	90800e15 	stw	r2,56(r18)
811005a0:	dfc00817 	ldw	ra,32(sp)
811005a4:	ddc00717 	ldw	r23,28(sp)
811005a8:	dd800617 	ldw	r22,24(sp)
811005ac:	dd400517 	ldw	r21,20(sp)
811005b0:	dd000417 	ldw	r20,16(sp)
811005b4:	dcc00317 	ldw	r19,12(sp)
811005b8:	dc800217 	ldw	r18,8(sp)
811005bc:	dc400117 	ldw	r17,4(sp)
811005c0:	dc000017 	ldw	r16,0(sp)
811005c4:	dec00904 	addi	sp,sp,36
811005c8:	f800283a 	ret

811005cc <__fp_lock>:
811005cc:	0005883a 	mov	r2,zero
811005d0:	f800283a 	ret

811005d4 <__sfmoreglue>:
811005d4:	defffc04 	addi	sp,sp,-16
811005d8:	dc400115 	stw	r17,4(sp)
811005dc:	2c7fffc4 	addi	r17,r5,-1
811005e0:	8c401a24 	muli	r17,r17,104
811005e4:	dc800215 	stw	r18,8(sp)
811005e8:	2825883a 	mov	r18,r5
811005ec:	89401d04 	addi	r5,r17,116
811005f0:	dc000015 	stw	r16,0(sp)
811005f4:	dfc00315 	stw	ra,12(sp)
811005f8:	1100e000 	call	81100e00 <_malloc_r>
811005fc:	1021883a 	mov	r16,r2
81100600:	10000726 	beq	r2,zero,81100620 <__sfmoreglue+0x4c>
81100604:	11000304 	addi	r4,r2,12
81100608:	10000015 	stw	zero,0(r2)
8110060c:	14800115 	stw	r18,4(r2)
81100610:	11000215 	stw	r4,8(r2)
81100614:	89801a04 	addi	r6,r17,104
81100618:	000b883a 	mov	r5,zero
8110061c:	11019940 	call	81101994 <memset>
81100620:	8005883a 	mov	r2,r16
81100624:	dfc00317 	ldw	ra,12(sp)
81100628:	dc800217 	ldw	r18,8(sp)
8110062c:	dc400117 	ldw	r17,4(sp)
81100630:	dc000017 	ldw	r16,0(sp)
81100634:	dec00404 	addi	sp,sp,16
81100638:	f800283a 	ret

8110063c <__sfp>:
8110063c:	defffb04 	addi	sp,sp,-20
81100640:	dc000015 	stw	r16,0(sp)
81100644:	04204474 	movhi	r16,33041
81100648:	8429a304 	addi	r16,r16,-22900
8110064c:	dcc00315 	stw	r19,12(sp)
81100650:	2027883a 	mov	r19,r4
81100654:	81000017 	ldw	r4,0(r16)
81100658:	dfc00415 	stw	ra,16(sp)
8110065c:	dc800215 	stw	r18,8(sp)
81100660:	20800e17 	ldw	r2,56(r4)
81100664:	dc400115 	stw	r17,4(sp)
81100668:	1000021e 	bne	r2,zero,81100674 <__sfp+0x38>
8110066c:	11004300 	call	81100430 <__sinit.part.1>
81100670:	81000017 	ldw	r4,0(r16)
81100674:	2480b804 	addi	r18,r4,736
81100678:	047fffc4 	movi	r17,-1
8110067c:	91000117 	ldw	r4,4(r18)
81100680:	94000217 	ldw	r16,8(r18)
81100684:	213fffc4 	addi	r4,r4,-1
81100688:	20000a16 	blt	r4,zero,811006b4 <__sfp+0x78>
8110068c:	8080030f 	ldh	r2,12(r16)
81100690:	10000c26 	beq	r2,zero,811006c4 <__sfp+0x88>
81100694:	80c01d04 	addi	r3,r16,116
81100698:	00000206 	br	811006a4 <__sfp+0x68>
8110069c:	18bfe60f 	ldh	r2,-104(r3)
811006a0:	10000826 	beq	r2,zero,811006c4 <__sfp+0x88>
811006a4:	213fffc4 	addi	r4,r4,-1
811006a8:	1c3ffd04 	addi	r16,r3,-12
811006ac:	18c01a04 	addi	r3,r3,104
811006b0:	247ffa1e 	bne	r4,r17,8110069c <__reset+0xfb0e069c>
811006b4:	90800017 	ldw	r2,0(r18)
811006b8:	10001d26 	beq	r2,zero,81100730 <__sfp+0xf4>
811006bc:	1025883a 	mov	r18,r2
811006c0:	003fee06 	br	8110067c <__reset+0xfb0e067c>
811006c4:	00bfffc4 	movi	r2,-1
811006c8:	8080038d 	sth	r2,14(r16)
811006cc:	00800044 	movi	r2,1
811006d0:	8080030d 	sth	r2,12(r16)
811006d4:	80001915 	stw	zero,100(r16)
811006d8:	80000015 	stw	zero,0(r16)
811006dc:	80000215 	stw	zero,8(r16)
811006e0:	80000115 	stw	zero,4(r16)
811006e4:	80000415 	stw	zero,16(r16)
811006e8:	80000515 	stw	zero,20(r16)
811006ec:	80000615 	stw	zero,24(r16)
811006f0:	01800204 	movi	r6,8
811006f4:	000b883a 	mov	r5,zero
811006f8:	81001704 	addi	r4,r16,92
811006fc:	11019940 	call	81101994 <memset>
81100700:	8005883a 	mov	r2,r16
81100704:	80000c15 	stw	zero,48(r16)
81100708:	80000d15 	stw	zero,52(r16)
8110070c:	80001115 	stw	zero,68(r16)
81100710:	80001215 	stw	zero,72(r16)
81100714:	dfc00417 	ldw	ra,16(sp)
81100718:	dcc00317 	ldw	r19,12(sp)
8110071c:	dc800217 	ldw	r18,8(sp)
81100720:	dc400117 	ldw	r17,4(sp)
81100724:	dc000017 	ldw	r16,0(sp)
81100728:	dec00504 	addi	sp,sp,20
8110072c:	f800283a 	ret
81100730:	01400104 	movi	r5,4
81100734:	9809883a 	mov	r4,r19
81100738:	11005d40 	call	811005d4 <__sfmoreglue>
8110073c:	90800015 	stw	r2,0(r18)
81100740:	103fde1e 	bne	r2,zero,811006bc <__reset+0xfb0e06bc>
81100744:	00800304 	movi	r2,12
81100748:	98800015 	stw	r2,0(r19)
8110074c:	0005883a 	mov	r2,zero
81100750:	003ff006 	br	81100714 <__reset+0xfb0e0714>

81100754 <_cleanup>:
81100754:	00a04474 	movhi	r2,33041
81100758:	10a9a304 	addi	r2,r2,-22900
8110075c:	11000017 	ldw	r4,0(r2)
81100760:	01604434 	movhi	r5,33040
81100764:	2948ee04 	addi	r5,r5,9144
81100768:	1100d3c1 	jmpi	81100d3c <_fwalk_reent>

8110076c <__sinit>:
8110076c:	20800e17 	ldw	r2,56(r4)
81100770:	10000126 	beq	r2,zero,81100778 <__sinit+0xc>
81100774:	f800283a 	ret
81100778:	11004301 	jmpi	81100430 <__sinit.part.1>

8110077c <__sfp_lock_acquire>:
8110077c:	f800283a 	ret

81100780 <__sfp_lock_release>:
81100780:	f800283a 	ret

81100784 <__sinit_lock_acquire>:
81100784:	f800283a 	ret

81100788 <__sinit_lock_release>:
81100788:	f800283a 	ret

8110078c <__fp_lock_all>:
8110078c:	00a04474 	movhi	r2,33041
81100790:	10a9a404 	addi	r2,r2,-22896
81100794:	11000017 	ldw	r4,0(r2)
81100798:	01604434 	movhi	r5,33040
8110079c:	29417304 	addi	r5,r5,1484
811007a0:	1100c781 	jmpi	81100c78 <_fwalk>

811007a4 <__fp_unlock_all>:
811007a4:	00a04474 	movhi	r2,33041
811007a8:	10a9a404 	addi	r2,r2,-22896
811007ac:	11000017 	ldw	r4,0(r2)
811007b0:	01604434 	movhi	r5,33040
811007b4:	29410704 	addi	r5,r5,1052
811007b8:	1100c781 	jmpi	81100c78 <_fwalk>

811007bc <__sfvwrite_r>:
811007bc:	30800217 	ldw	r2,8(r6)
811007c0:	10006726 	beq	r2,zero,81100960 <__sfvwrite_r+0x1a4>
811007c4:	28c0030b 	ldhu	r3,12(r5)
811007c8:	defff404 	addi	sp,sp,-48
811007cc:	dd400715 	stw	r21,28(sp)
811007d0:	dd000615 	stw	r20,24(sp)
811007d4:	dc000215 	stw	r16,8(sp)
811007d8:	dfc00b15 	stw	ra,44(sp)
811007dc:	df000a15 	stw	fp,40(sp)
811007e0:	ddc00915 	stw	r23,36(sp)
811007e4:	dd800815 	stw	r22,32(sp)
811007e8:	dcc00515 	stw	r19,20(sp)
811007ec:	dc800415 	stw	r18,16(sp)
811007f0:	dc400315 	stw	r17,12(sp)
811007f4:	1880020c 	andi	r2,r3,8
811007f8:	2821883a 	mov	r16,r5
811007fc:	202b883a 	mov	r21,r4
81100800:	3029883a 	mov	r20,r6
81100804:	10002726 	beq	r2,zero,811008a4 <__sfvwrite_r+0xe8>
81100808:	28800417 	ldw	r2,16(r5)
8110080c:	10002526 	beq	r2,zero,811008a4 <__sfvwrite_r+0xe8>
81100810:	1880008c 	andi	r2,r3,2
81100814:	a4400017 	ldw	r17,0(r20)
81100818:	10002a26 	beq	r2,zero,811008c4 <__sfvwrite_r+0x108>
8110081c:	05a00034 	movhi	r22,32768
81100820:	0027883a 	mov	r19,zero
81100824:	0025883a 	mov	r18,zero
81100828:	b5bf0004 	addi	r22,r22,-1024
8110082c:	980d883a 	mov	r6,r19
81100830:	a809883a 	mov	r4,r21
81100834:	90004626 	beq	r18,zero,81100950 <__sfvwrite_r+0x194>
81100838:	900f883a 	mov	r7,r18
8110083c:	b480022e 	bgeu	r22,r18,81100848 <__sfvwrite_r+0x8c>
81100840:	01e00034 	movhi	r7,32768
81100844:	39ff0004 	addi	r7,r7,-1024
81100848:	80800917 	ldw	r2,36(r16)
8110084c:	81400717 	ldw	r5,28(r16)
81100850:	103ee83a 	callr	r2
81100854:	0080570e 	bge	zero,r2,811009b4 <__sfvwrite_r+0x1f8>
81100858:	a0c00217 	ldw	r3,8(r20)
8110085c:	98a7883a 	add	r19,r19,r2
81100860:	90a5c83a 	sub	r18,r18,r2
81100864:	1885c83a 	sub	r2,r3,r2
81100868:	a0800215 	stw	r2,8(r20)
8110086c:	103fef1e 	bne	r2,zero,8110082c <__reset+0xfb0e082c>
81100870:	0005883a 	mov	r2,zero
81100874:	dfc00b17 	ldw	ra,44(sp)
81100878:	df000a17 	ldw	fp,40(sp)
8110087c:	ddc00917 	ldw	r23,36(sp)
81100880:	dd800817 	ldw	r22,32(sp)
81100884:	dd400717 	ldw	r21,28(sp)
81100888:	dd000617 	ldw	r20,24(sp)
8110088c:	dcc00517 	ldw	r19,20(sp)
81100890:	dc800417 	ldw	r18,16(sp)
81100894:	dc400317 	ldw	r17,12(sp)
81100898:	dc000217 	ldw	r16,8(sp)
8110089c:	dec00c04 	addi	sp,sp,48
811008a0:	f800283a 	ret
811008a4:	800b883a 	mov	r5,r16
811008a8:	a809883a 	mov	r4,r21
811008ac:	11022100 	call	81102210 <__swsetup_r>
811008b0:	1000eb1e 	bne	r2,zero,81100c60 <__sfvwrite_r+0x4a4>
811008b4:	80c0030b 	ldhu	r3,12(r16)
811008b8:	a4400017 	ldw	r17,0(r20)
811008bc:	1880008c 	andi	r2,r3,2
811008c0:	103fd61e 	bne	r2,zero,8110081c <__reset+0xfb0e081c>
811008c4:	1880004c 	andi	r2,r3,1
811008c8:	10003f1e 	bne	r2,zero,811009c8 <__sfvwrite_r+0x20c>
811008cc:	0039883a 	mov	fp,zero
811008d0:	0025883a 	mov	r18,zero
811008d4:	90001a26 	beq	r18,zero,81100940 <__sfvwrite_r+0x184>
811008d8:	1880800c 	andi	r2,r3,512
811008dc:	84c00217 	ldw	r19,8(r16)
811008e0:	10002126 	beq	r2,zero,81100968 <__sfvwrite_r+0x1ac>
811008e4:	982f883a 	mov	r23,r19
811008e8:	94c09336 	bltu	r18,r19,81100b38 <__sfvwrite_r+0x37c>
811008ec:	1881200c 	andi	r2,r3,1152
811008f0:	10009e1e 	bne	r2,zero,81100b6c <__sfvwrite_r+0x3b0>
811008f4:	81000017 	ldw	r4,0(r16)
811008f8:	b80d883a 	mov	r6,r23
811008fc:	e00b883a 	mov	r5,fp
81100900:	11018380 	call	81101838 <memmove>
81100904:	80c00217 	ldw	r3,8(r16)
81100908:	81000017 	ldw	r4,0(r16)
8110090c:	9005883a 	mov	r2,r18
81100910:	1ce7c83a 	sub	r19,r3,r19
81100914:	25cf883a 	add	r7,r4,r23
81100918:	84c00215 	stw	r19,8(r16)
8110091c:	81c00015 	stw	r7,0(r16)
81100920:	a0c00217 	ldw	r3,8(r20)
81100924:	e0b9883a 	add	fp,fp,r2
81100928:	90a5c83a 	sub	r18,r18,r2
8110092c:	18a7c83a 	sub	r19,r3,r2
81100930:	a4c00215 	stw	r19,8(r20)
81100934:	983fce26 	beq	r19,zero,81100870 <__reset+0xfb0e0870>
81100938:	80c0030b 	ldhu	r3,12(r16)
8110093c:	903fe61e 	bne	r18,zero,811008d8 <__reset+0xfb0e08d8>
81100940:	8f000017 	ldw	fp,0(r17)
81100944:	8c800117 	ldw	r18,4(r17)
81100948:	8c400204 	addi	r17,r17,8
8110094c:	003fe106 	br	811008d4 <__reset+0xfb0e08d4>
81100950:	8cc00017 	ldw	r19,0(r17)
81100954:	8c800117 	ldw	r18,4(r17)
81100958:	8c400204 	addi	r17,r17,8
8110095c:	003fb306 	br	8110082c <__reset+0xfb0e082c>
81100960:	0005883a 	mov	r2,zero
81100964:	f800283a 	ret
81100968:	81000017 	ldw	r4,0(r16)
8110096c:	80800417 	ldw	r2,16(r16)
81100970:	11005736 	bltu	r2,r4,81100ad0 <__sfvwrite_r+0x314>
81100974:	85c00517 	ldw	r23,20(r16)
81100978:	95c05536 	bltu	r18,r23,81100ad0 <__sfvwrite_r+0x314>
8110097c:	00a00034 	movhi	r2,32768
81100980:	10bfffc4 	addi	r2,r2,-1
81100984:	9009883a 	mov	r4,r18
81100988:	1480012e 	bgeu	r2,r18,81100990 <__sfvwrite_r+0x1d4>
8110098c:	1009883a 	mov	r4,r2
81100990:	b80b883a 	mov	r5,r23
81100994:	1102ec40 	call	81102ec4 <__divsi3>
81100998:	15cf383a 	mul	r7,r2,r23
8110099c:	81400717 	ldw	r5,28(r16)
811009a0:	80800917 	ldw	r2,36(r16)
811009a4:	e00d883a 	mov	r6,fp
811009a8:	a809883a 	mov	r4,r21
811009ac:	103ee83a 	callr	r2
811009b0:	00bfdb16 	blt	zero,r2,81100920 <__reset+0xfb0e0920>
811009b4:	8080030b 	ldhu	r2,12(r16)
811009b8:	10801014 	ori	r2,r2,64
811009bc:	8080030d 	sth	r2,12(r16)
811009c0:	00bfffc4 	movi	r2,-1
811009c4:	003fab06 	br	81100874 <__reset+0xfb0e0874>
811009c8:	0027883a 	mov	r19,zero
811009cc:	0011883a 	mov	r8,zero
811009d0:	0039883a 	mov	fp,zero
811009d4:	0025883a 	mov	r18,zero
811009d8:	90001f26 	beq	r18,zero,81100a58 <__sfvwrite_r+0x29c>
811009dc:	40005a26 	beq	r8,zero,81100b48 <__sfvwrite_r+0x38c>
811009e0:	982d883a 	mov	r22,r19
811009e4:	94c0012e 	bgeu	r18,r19,811009ec <__sfvwrite_r+0x230>
811009e8:	902d883a 	mov	r22,r18
811009ec:	81000017 	ldw	r4,0(r16)
811009f0:	80800417 	ldw	r2,16(r16)
811009f4:	b02f883a 	mov	r23,r22
811009f8:	81c00517 	ldw	r7,20(r16)
811009fc:	1100032e 	bgeu	r2,r4,81100a0c <__sfvwrite_r+0x250>
81100a00:	80c00217 	ldw	r3,8(r16)
81100a04:	38c7883a 	add	r3,r7,r3
81100a08:	1d801816 	blt	r3,r22,81100a6c <__sfvwrite_r+0x2b0>
81100a0c:	b1c03e16 	blt	r22,r7,81100b08 <__sfvwrite_r+0x34c>
81100a10:	80800917 	ldw	r2,36(r16)
81100a14:	81400717 	ldw	r5,28(r16)
81100a18:	e00d883a 	mov	r6,fp
81100a1c:	da000115 	stw	r8,4(sp)
81100a20:	a809883a 	mov	r4,r21
81100a24:	103ee83a 	callr	r2
81100a28:	102f883a 	mov	r23,r2
81100a2c:	da000117 	ldw	r8,4(sp)
81100a30:	00bfe00e 	bge	zero,r2,811009b4 <__reset+0xfb0e09b4>
81100a34:	9de7c83a 	sub	r19,r19,r23
81100a38:	98001f26 	beq	r19,zero,81100ab8 <__sfvwrite_r+0x2fc>
81100a3c:	a0800217 	ldw	r2,8(r20)
81100a40:	e5f9883a 	add	fp,fp,r23
81100a44:	95e5c83a 	sub	r18,r18,r23
81100a48:	15efc83a 	sub	r23,r2,r23
81100a4c:	a5c00215 	stw	r23,8(r20)
81100a50:	b83f8726 	beq	r23,zero,81100870 <__reset+0xfb0e0870>
81100a54:	903fe11e 	bne	r18,zero,811009dc <__reset+0xfb0e09dc>
81100a58:	8f000017 	ldw	fp,0(r17)
81100a5c:	8c800117 	ldw	r18,4(r17)
81100a60:	0011883a 	mov	r8,zero
81100a64:	8c400204 	addi	r17,r17,8
81100a68:	003fdb06 	br	811009d8 <__reset+0xfb0e09d8>
81100a6c:	180d883a 	mov	r6,r3
81100a70:	e00b883a 	mov	r5,fp
81100a74:	da000115 	stw	r8,4(sp)
81100a78:	d8c00015 	stw	r3,0(sp)
81100a7c:	11018380 	call	81101838 <memmove>
81100a80:	d8c00017 	ldw	r3,0(sp)
81100a84:	80800017 	ldw	r2,0(r16)
81100a88:	800b883a 	mov	r5,r16
81100a8c:	a809883a 	mov	r4,r21
81100a90:	10c5883a 	add	r2,r2,r3
81100a94:	80800015 	stw	r2,0(r16)
81100a98:	d8c00015 	stw	r3,0(sp)
81100a9c:	11026d80 	call	811026d8 <_fflush_r>
81100aa0:	d8c00017 	ldw	r3,0(sp)
81100aa4:	da000117 	ldw	r8,4(sp)
81100aa8:	103fc21e 	bne	r2,zero,811009b4 <__reset+0xfb0e09b4>
81100aac:	182f883a 	mov	r23,r3
81100ab0:	9de7c83a 	sub	r19,r19,r23
81100ab4:	983fe11e 	bne	r19,zero,81100a3c <__reset+0xfb0e0a3c>
81100ab8:	800b883a 	mov	r5,r16
81100abc:	a809883a 	mov	r4,r21
81100ac0:	11026d80 	call	811026d8 <_fflush_r>
81100ac4:	103fbb1e 	bne	r2,zero,811009b4 <__reset+0xfb0e09b4>
81100ac8:	0011883a 	mov	r8,zero
81100acc:	003fdb06 	br	81100a3c <__reset+0xfb0e0a3c>
81100ad0:	94c0012e 	bgeu	r18,r19,81100ad8 <__sfvwrite_r+0x31c>
81100ad4:	9027883a 	mov	r19,r18
81100ad8:	980d883a 	mov	r6,r19
81100adc:	e00b883a 	mov	r5,fp
81100ae0:	11018380 	call	81101838 <memmove>
81100ae4:	80800217 	ldw	r2,8(r16)
81100ae8:	80c00017 	ldw	r3,0(r16)
81100aec:	14c5c83a 	sub	r2,r2,r19
81100af0:	1cc7883a 	add	r3,r3,r19
81100af4:	80800215 	stw	r2,8(r16)
81100af8:	80c00015 	stw	r3,0(r16)
81100afc:	10004326 	beq	r2,zero,81100c0c <__sfvwrite_r+0x450>
81100b00:	9805883a 	mov	r2,r19
81100b04:	003f8606 	br	81100920 <__reset+0xfb0e0920>
81100b08:	b00d883a 	mov	r6,r22
81100b0c:	e00b883a 	mov	r5,fp
81100b10:	da000115 	stw	r8,4(sp)
81100b14:	11018380 	call	81101838 <memmove>
81100b18:	80800217 	ldw	r2,8(r16)
81100b1c:	80c00017 	ldw	r3,0(r16)
81100b20:	da000117 	ldw	r8,4(sp)
81100b24:	1585c83a 	sub	r2,r2,r22
81100b28:	1dad883a 	add	r22,r3,r22
81100b2c:	80800215 	stw	r2,8(r16)
81100b30:	85800015 	stw	r22,0(r16)
81100b34:	003fbf06 	br	81100a34 <__reset+0xfb0e0a34>
81100b38:	81000017 	ldw	r4,0(r16)
81100b3c:	9027883a 	mov	r19,r18
81100b40:	902f883a 	mov	r23,r18
81100b44:	003f6c06 	br	811008f8 <__reset+0xfb0e08f8>
81100b48:	900d883a 	mov	r6,r18
81100b4c:	01400284 	movi	r5,10
81100b50:	e009883a 	mov	r4,fp
81100b54:	110160c0 	call	8110160c <memchr>
81100b58:	10003e26 	beq	r2,zero,81100c54 <__sfvwrite_r+0x498>
81100b5c:	10800044 	addi	r2,r2,1
81100b60:	1727c83a 	sub	r19,r2,fp
81100b64:	02000044 	movi	r8,1
81100b68:	003f9d06 	br	811009e0 <__reset+0xfb0e09e0>
81100b6c:	80800517 	ldw	r2,20(r16)
81100b70:	81400417 	ldw	r5,16(r16)
81100b74:	81c00017 	ldw	r7,0(r16)
81100b78:	10a7883a 	add	r19,r2,r2
81100b7c:	9885883a 	add	r2,r19,r2
81100b80:	1026d7fa 	srli	r19,r2,31
81100b84:	396dc83a 	sub	r22,r7,r5
81100b88:	b1000044 	addi	r4,r22,1
81100b8c:	9885883a 	add	r2,r19,r2
81100b90:	1027d07a 	srai	r19,r2,1
81100b94:	2485883a 	add	r2,r4,r18
81100b98:	980d883a 	mov	r6,r19
81100b9c:	9880022e 	bgeu	r19,r2,81100ba8 <__sfvwrite_r+0x3ec>
81100ba0:	1027883a 	mov	r19,r2
81100ba4:	100d883a 	mov	r6,r2
81100ba8:	18c1000c 	andi	r3,r3,1024
81100bac:	18001c26 	beq	r3,zero,81100c20 <__sfvwrite_r+0x464>
81100bb0:	300b883a 	mov	r5,r6
81100bb4:	a809883a 	mov	r4,r21
81100bb8:	1100e000 	call	81100e00 <_malloc_r>
81100bbc:	102f883a 	mov	r23,r2
81100bc0:	10002926 	beq	r2,zero,81100c68 <__sfvwrite_r+0x4ac>
81100bc4:	81400417 	ldw	r5,16(r16)
81100bc8:	b00d883a 	mov	r6,r22
81100bcc:	1009883a 	mov	r4,r2
81100bd0:	11016f00 	call	811016f0 <memcpy>
81100bd4:	8080030b 	ldhu	r2,12(r16)
81100bd8:	00fedfc4 	movi	r3,-1153
81100bdc:	10c4703a 	and	r2,r2,r3
81100be0:	10802014 	ori	r2,r2,128
81100be4:	8080030d 	sth	r2,12(r16)
81100be8:	bd89883a 	add	r4,r23,r22
81100bec:	9d8fc83a 	sub	r7,r19,r22
81100bf0:	85c00415 	stw	r23,16(r16)
81100bf4:	84c00515 	stw	r19,20(r16)
81100bf8:	81000015 	stw	r4,0(r16)
81100bfc:	9027883a 	mov	r19,r18
81100c00:	81c00215 	stw	r7,8(r16)
81100c04:	902f883a 	mov	r23,r18
81100c08:	003f3b06 	br	811008f8 <__reset+0xfb0e08f8>
81100c0c:	800b883a 	mov	r5,r16
81100c10:	a809883a 	mov	r4,r21
81100c14:	11026d80 	call	811026d8 <_fflush_r>
81100c18:	103fb926 	beq	r2,zero,81100b00 <__reset+0xfb0e0b00>
81100c1c:	003f6506 	br	811009b4 <__reset+0xfb0e09b4>
81100c20:	a809883a 	mov	r4,r21
81100c24:	1101abc0 	call	81101abc <_realloc_r>
81100c28:	102f883a 	mov	r23,r2
81100c2c:	103fee1e 	bne	r2,zero,81100be8 <__reset+0xfb0e0be8>
81100c30:	81400417 	ldw	r5,16(r16)
81100c34:	a809883a 	mov	r4,r21
81100c38:	11028880 	call	81102888 <_free_r>
81100c3c:	8080030b 	ldhu	r2,12(r16)
81100c40:	00ffdfc4 	movi	r3,-129
81100c44:	1884703a 	and	r2,r3,r2
81100c48:	00c00304 	movi	r3,12
81100c4c:	a8c00015 	stw	r3,0(r21)
81100c50:	003f5906 	br	811009b8 <__reset+0xfb0e09b8>
81100c54:	94c00044 	addi	r19,r18,1
81100c58:	02000044 	movi	r8,1
81100c5c:	003f6006 	br	811009e0 <__reset+0xfb0e09e0>
81100c60:	00bfffc4 	movi	r2,-1
81100c64:	003f0306 	br	81100874 <__reset+0xfb0e0874>
81100c68:	00800304 	movi	r2,12
81100c6c:	a8800015 	stw	r2,0(r21)
81100c70:	8080030b 	ldhu	r2,12(r16)
81100c74:	003f5006 	br	811009b8 <__reset+0xfb0e09b8>

81100c78 <_fwalk>:
81100c78:	defff704 	addi	sp,sp,-36
81100c7c:	dd000415 	stw	r20,16(sp)
81100c80:	dfc00815 	stw	ra,32(sp)
81100c84:	ddc00715 	stw	r23,28(sp)
81100c88:	dd800615 	stw	r22,24(sp)
81100c8c:	dd400515 	stw	r21,20(sp)
81100c90:	dcc00315 	stw	r19,12(sp)
81100c94:	dc800215 	stw	r18,8(sp)
81100c98:	dc400115 	stw	r17,4(sp)
81100c9c:	dc000015 	stw	r16,0(sp)
81100ca0:	2500b804 	addi	r20,r4,736
81100ca4:	a0002326 	beq	r20,zero,81100d34 <_fwalk+0xbc>
81100ca8:	282b883a 	mov	r21,r5
81100cac:	002f883a 	mov	r23,zero
81100cb0:	05800044 	movi	r22,1
81100cb4:	04ffffc4 	movi	r19,-1
81100cb8:	a4400117 	ldw	r17,4(r20)
81100cbc:	a4800217 	ldw	r18,8(r20)
81100cc0:	8c7fffc4 	addi	r17,r17,-1
81100cc4:	88000d16 	blt	r17,zero,81100cfc <_fwalk+0x84>
81100cc8:	94000304 	addi	r16,r18,12
81100ccc:	94800384 	addi	r18,r18,14
81100cd0:	8080000b 	ldhu	r2,0(r16)
81100cd4:	8c7fffc4 	addi	r17,r17,-1
81100cd8:	813ffd04 	addi	r4,r16,-12
81100cdc:	b080042e 	bgeu	r22,r2,81100cf0 <_fwalk+0x78>
81100ce0:	9080000f 	ldh	r2,0(r18)
81100ce4:	14c00226 	beq	r2,r19,81100cf0 <_fwalk+0x78>
81100ce8:	a83ee83a 	callr	r21
81100cec:	b8aeb03a 	or	r23,r23,r2
81100cf0:	84001a04 	addi	r16,r16,104
81100cf4:	94801a04 	addi	r18,r18,104
81100cf8:	8cfff51e 	bne	r17,r19,81100cd0 <__reset+0xfb0e0cd0>
81100cfc:	a5000017 	ldw	r20,0(r20)
81100d00:	a03fed1e 	bne	r20,zero,81100cb8 <__reset+0xfb0e0cb8>
81100d04:	b805883a 	mov	r2,r23
81100d08:	dfc00817 	ldw	ra,32(sp)
81100d0c:	ddc00717 	ldw	r23,28(sp)
81100d10:	dd800617 	ldw	r22,24(sp)
81100d14:	dd400517 	ldw	r21,20(sp)
81100d18:	dd000417 	ldw	r20,16(sp)
81100d1c:	dcc00317 	ldw	r19,12(sp)
81100d20:	dc800217 	ldw	r18,8(sp)
81100d24:	dc400117 	ldw	r17,4(sp)
81100d28:	dc000017 	ldw	r16,0(sp)
81100d2c:	dec00904 	addi	sp,sp,36
81100d30:	f800283a 	ret
81100d34:	002f883a 	mov	r23,zero
81100d38:	003ff206 	br	81100d04 <__reset+0xfb0e0d04>

81100d3c <_fwalk_reent>:
81100d3c:	defff704 	addi	sp,sp,-36
81100d40:	dd000415 	stw	r20,16(sp)
81100d44:	dfc00815 	stw	ra,32(sp)
81100d48:	ddc00715 	stw	r23,28(sp)
81100d4c:	dd800615 	stw	r22,24(sp)
81100d50:	dd400515 	stw	r21,20(sp)
81100d54:	dcc00315 	stw	r19,12(sp)
81100d58:	dc800215 	stw	r18,8(sp)
81100d5c:	dc400115 	stw	r17,4(sp)
81100d60:	dc000015 	stw	r16,0(sp)
81100d64:	2500b804 	addi	r20,r4,736
81100d68:	a0002326 	beq	r20,zero,81100df8 <_fwalk_reent+0xbc>
81100d6c:	282b883a 	mov	r21,r5
81100d70:	2027883a 	mov	r19,r4
81100d74:	002f883a 	mov	r23,zero
81100d78:	05800044 	movi	r22,1
81100d7c:	04bfffc4 	movi	r18,-1
81100d80:	a4400117 	ldw	r17,4(r20)
81100d84:	a4000217 	ldw	r16,8(r20)
81100d88:	8c7fffc4 	addi	r17,r17,-1
81100d8c:	88000c16 	blt	r17,zero,81100dc0 <_fwalk_reent+0x84>
81100d90:	84000304 	addi	r16,r16,12
81100d94:	8080000b 	ldhu	r2,0(r16)
81100d98:	8c7fffc4 	addi	r17,r17,-1
81100d9c:	817ffd04 	addi	r5,r16,-12
81100da0:	b080052e 	bgeu	r22,r2,81100db8 <_fwalk_reent+0x7c>
81100da4:	8080008f 	ldh	r2,2(r16)
81100da8:	9809883a 	mov	r4,r19
81100dac:	14800226 	beq	r2,r18,81100db8 <_fwalk_reent+0x7c>
81100db0:	a83ee83a 	callr	r21
81100db4:	b8aeb03a 	or	r23,r23,r2
81100db8:	84001a04 	addi	r16,r16,104
81100dbc:	8cbff51e 	bne	r17,r18,81100d94 <__reset+0xfb0e0d94>
81100dc0:	a5000017 	ldw	r20,0(r20)
81100dc4:	a03fee1e 	bne	r20,zero,81100d80 <__reset+0xfb0e0d80>
81100dc8:	b805883a 	mov	r2,r23
81100dcc:	dfc00817 	ldw	ra,32(sp)
81100dd0:	ddc00717 	ldw	r23,28(sp)
81100dd4:	dd800617 	ldw	r22,24(sp)
81100dd8:	dd400517 	ldw	r21,20(sp)
81100ddc:	dd000417 	ldw	r20,16(sp)
81100de0:	dcc00317 	ldw	r19,12(sp)
81100de4:	dc800217 	ldw	r18,8(sp)
81100de8:	dc400117 	ldw	r17,4(sp)
81100dec:	dc000017 	ldw	r16,0(sp)
81100df0:	dec00904 	addi	sp,sp,36
81100df4:	f800283a 	ret
81100df8:	002f883a 	mov	r23,zero
81100dfc:	003ff206 	br	81100dc8 <__reset+0xfb0e0dc8>

81100e00 <_malloc_r>:
81100e00:	defff504 	addi	sp,sp,-44
81100e04:	dc800315 	stw	r18,12(sp)
81100e08:	dfc00a15 	stw	ra,40(sp)
81100e0c:	df000915 	stw	fp,36(sp)
81100e10:	ddc00815 	stw	r23,32(sp)
81100e14:	dd800715 	stw	r22,28(sp)
81100e18:	dd400615 	stw	r21,24(sp)
81100e1c:	dd000515 	stw	r20,20(sp)
81100e20:	dcc00415 	stw	r19,16(sp)
81100e24:	dc400215 	stw	r17,8(sp)
81100e28:	dc000115 	stw	r16,4(sp)
81100e2c:	288002c4 	addi	r2,r5,11
81100e30:	00c00584 	movi	r3,22
81100e34:	2025883a 	mov	r18,r4
81100e38:	18807f2e 	bgeu	r3,r2,81101038 <_malloc_r+0x238>
81100e3c:	047ffe04 	movi	r17,-8
81100e40:	1462703a 	and	r17,r2,r17
81100e44:	8800a316 	blt	r17,zero,811010d4 <_malloc_r+0x2d4>
81100e48:	8940a236 	bltu	r17,r5,811010d4 <_malloc_r+0x2d4>
81100e4c:	11035080 	call	81103508 <__malloc_lock>
81100e50:	00807dc4 	movi	r2,503
81100e54:	1441e92e 	bgeu	r2,r17,811015fc <_malloc_r+0x7fc>
81100e58:	8804d27a 	srli	r2,r17,9
81100e5c:	1000a126 	beq	r2,zero,811010e4 <_malloc_r+0x2e4>
81100e60:	00c00104 	movi	r3,4
81100e64:	18811e36 	bltu	r3,r2,811012e0 <_malloc_r+0x4e0>
81100e68:	8804d1ba 	srli	r2,r17,6
81100e6c:	12000e44 	addi	r8,r2,57
81100e70:	11c00e04 	addi	r7,r2,56
81100e74:	4209883a 	add	r4,r8,r8
81100e78:	04e04474 	movhi	r19,33041
81100e7c:	2109883a 	add	r4,r4,r4
81100e80:	9ce3ef04 	addi	r19,r19,-28740
81100e84:	2109883a 	add	r4,r4,r4
81100e88:	9909883a 	add	r4,r19,r4
81100e8c:	24000117 	ldw	r16,4(r4)
81100e90:	213ffe04 	addi	r4,r4,-8
81100e94:	24009726 	beq	r4,r16,811010f4 <_malloc_r+0x2f4>
81100e98:	80800117 	ldw	r2,4(r16)
81100e9c:	01bfff04 	movi	r6,-4
81100ea0:	014003c4 	movi	r5,15
81100ea4:	1184703a 	and	r2,r2,r6
81100ea8:	1447c83a 	sub	r3,r2,r17
81100eac:	28c00716 	blt	r5,r3,81100ecc <_malloc_r+0xcc>
81100eb0:	1800920e 	bge	r3,zero,811010fc <_malloc_r+0x2fc>
81100eb4:	84000317 	ldw	r16,12(r16)
81100eb8:	24008e26 	beq	r4,r16,811010f4 <_malloc_r+0x2f4>
81100ebc:	80800117 	ldw	r2,4(r16)
81100ec0:	1184703a 	and	r2,r2,r6
81100ec4:	1447c83a 	sub	r3,r2,r17
81100ec8:	28fff90e 	bge	r5,r3,81100eb0 <__reset+0xfb0e0eb0>
81100ecc:	3809883a 	mov	r4,r7
81100ed0:	01a04474 	movhi	r6,33041
81100ed4:	9c000417 	ldw	r16,16(r19)
81100ed8:	31a3ef04 	addi	r6,r6,-28740
81100edc:	32000204 	addi	r8,r6,8
81100ee0:	82013426 	beq	r16,r8,811013b4 <_malloc_r+0x5b4>
81100ee4:	80c00117 	ldw	r3,4(r16)
81100ee8:	00bfff04 	movi	r2,-4
81100eec:	188e703a 	and	r7,r3,r2
81100ef0:	3c45c83a 	sub	r2,r7,r17
81100ef4:	00c003c4 	movi	r3,15
81100ef8:	18811f16 	blt	r3,r2,81101378 <_malloc_r+0x578>
81100efc:	32000515 	stw	r8,20(r6)
81100f00:	32000415 	stw	r8,16(r6)
81100f04:	10007f0e 	bge	r2,zero,81101104 <_malloc_r+0x304>
81100f08:	00807fc4 	movi	r2,511
81100f0c:	11c0fd36 	bltu	r2,r7,81101304 <_malloc_r+0x504>
81100f10:	3806d0fa 	srli	r3,r7,3
81100f14:	01c00044 	movi	r7,1
81100f18:	30800117 	ldw	r2,4(r6)
81100f1c:	19400044 	addi	r5,r3,1
81100f20:	294b883a 	add	r5,r5,r5
81100f24:	1807d0ba 	srai	r3,r3,2
81100f28:	294b883a 	add	r5,r5,r5
81100f2c:	294b883a 	add	r5,r5,r5
81100f30:	298b883a 	add	r5,r5,r6
81100f34:	38c6983a 	sll	r3,r7,r3
81100f38:	29c00017 	ldw	r7,0(r5)
81100f3c:	2a7ffe04 	addi	r9,r5,-8
81100f40:	1886b03a 	or	r3,r3,r2
81100f44:	82400315 	stw	r9,12(r16)
81100f48:	81c00215 	stw	r7,8(r16)
81100f4c:	30c00115 	stw	r3,4(r6)
81100f50:	2c000015 	stw	r16,0(r5)
81100f54:	3c000315 	stw	r16,12(r7)
81100f58:	2005d0ba 	srai	r2,r4,2
81100f5c:	01400044 	movi	r5,1
81100f60:	288a983a 	sll	r5,r5,r2
81100f64:	19406f36 	bltu	r3,r5,81101124 <_malloc_r+0x324>
81100f68:	28c4703a 	and	r2,r5,r3
81100f6c:	10000a1e 	bne	r2,zero,81100f98 <_malloc_r+0x198>
81100f70:	00bfff04 	movi	r2,-4
81100f74:	294b883a 	add	r5,r5,r5
81100f78:	2088703a 	and	r4,r4,r2
81100f7c:	28c4703a 	and	r2,r5,r3
81100f80:	21000104 	addi	r4,r4,4
81100f84:	1000041e 	bne	r2,zero,81100f98 <_malloc_r+0x198>
81100f88:	294b883a 	add	r5,r5,r5
81100f8c:	28c4703a 	and	r2,r5,r3
81100f90:	21000104 	addi	r4,r4,4
81100f94:	103ffc26 	beq	r2,zero,81100f88 <__reset+0xfb0e0f88>
81100f98:	02bfff04 	movi	r10,-4
81100f9c:	024003c4 	movi	r9,15
81100fa0:	21800044 	addi	r6,r4,1
81100fa4:	318d883a 	add	r6,r6,r6
81100fa8:	318d883a 	add	r6,r6,r6
81100fac:	318d883a 	add	r6,r6,r6
81100fb0:	998d883a 	add	r6,r19,r6
81100fb4:	333ffe04 	addi	r12,r6,-8
81100fb8:	2017883a 	mov	r11,r4
81100fbc:	31800104 	addi	r6,r6,4
81100fc0:	34000017 	ldw	r16,0(r6)
81100fc4:	31fffd04 	addi	r7,r6,-12
81100fc8:	81c0041e 	bne	r16,r7,81100fdc <_malloc_r+0x1dc>
81100fcc:	0000fb06 	br	811013bc <_malloc_r+0x5bc>
81100fd0:	1801030e 	bge	r3,zero,811013e0 <_malloc_r+0x5e0>
81100fd4:	84000317 	ldw	r16,12(r16)
81100fd8:	81c0f826 	beq	r16,r7,811013bc <_malloc_r+0x5bc>
81100fdc:	80800117 	ldw	r2,4(r16)
81100fe0:	1284703a 	and	r2,r2,r10
81100fe4:	1447c83a 	sub	r3,r2,r17
81100fe8:	48fff90e 	bge	r9,r3,81100fd0 <__reset+0xfb0e0fd0>
81100fec:	80800317 	ldw	r2,12(r16)
81100ff0:	81000217 	ldw	r4,8(r16)
81100ff4:	89400054 	ori	r5,r17,1
81100ff8:	81400115 	stw	r5,4(r16)
81100ffc:	20800315 	stw	r2,12(r4)
81101000:	11000215 	stw	r4,8(r2)
81101004:	8463883a 	add	r17,r16,r17
81101008:	9c400515 	stw	r17,20(r19)
8110100c:	9c400415 	stw	r17,16(r19)
81101010:	18800054 	ori	r2,r3,1
81101014:	88800115 	stw	r2,4(r17)
81101018:	8a000315 	stw	r8,12(r17)
8110101c:	8a000215 	stw	r8,8(r17)
81101020:	88e3883a 	add	r17,r17,r3
81101024:	88c00015 	stw	r3,0(r17)
81101028:	9009883a 	mov	r4,r18
8110102c:	110352c0 	call	8110352c <__malloc_unlock>
81101030:	80800204 	addi	r2,r16,8
81101034:	00001b06 	br	811010a4 <_malloc_r+0x2a4>
81101038:	04400404 	movi	r17,16
8110103c:	89402536 	bltu	r17,r5,811010d4 <_malloc_r+0x2d4>
81101040:	11035080 	call	81103508 <__malloc_lock>
81101044:	00800184 	movi	r2,6
81101048:	01000084 	movi	r4,2
8110104c:	04e04474 	movhi	r19,33041
81101050:	1085883a 	add	r2,r2,r2
81101054:	9ce3ef04 	addi	r19,r19,-28740
81101058:	1085883a 	add	r2,r2,r2
8110105c:	9885883a 	add	r2,r19,r2
81101060:	14000117 	ldw	r16,4(r2)
81101064:	10fffe04 	addi	r3,r2,-8
81101068:	80c0d926 	beq	r16,r3,811013d0 <_malloc_r+0x5d0>
8110106c:	80c00117 	ldw	r3,4(r16)
81101070:	81000317 	ldw	r4,12(r16)
81101074:	00bfff04 	movi	r2,-4
81101078:	1884703a 	and	r2,r3,r2
8110107c:	81400217 	ldw	r5,8(r16)
81101080:	8085883a 	add	r2,r16,r2
81101084:	10c00117 	ldw	r3,4(r2)
81101088:	29000315 	stw	r4,12(r5)
8110108c:	21400215 	stw	r5,8(r4)
81101090:	18c00054 	ori	r3,r3,1
81101094:	10c00115 	stw	r3,4(r2)
81101098:	9009883a 	mov	r4,r18
8110109c:	110352c0 	call	8110352c <__malloc_unlock>
811010a0:	80800204 	addi	r2,r16,8
811010a4:	dfc00a17 	ldw	ra,40(sp)
811010a8:	df000917 	ldw	fp,36(sp)
811010ac:	ddc00817 	ldw	r23,32(sp)
811010b0:	dd800717 	ldw	r22,28(sp)
811010b4:	dd400617 	ldw	r21,24(sp)
811010b8:	dd000517 	ldw	r20,20(sp)
811010bc:	dcc00417 	ldw	r19,16(sp)
811010c0:	dc800317 	ldw	r18,12(sp)
811010c4:	dc400217 	ldw	r17,8(sp)
811010c8:	dc000117 	ldw	r16,4(sp)
811010cc:	dec00b04 	addi	sp,sp,44
811010d0:	f800283a 	ret
811010d4:	00800304 	movi	r2,12
811010d8:	90800015 	stw	r2,0(r18)
811010dc:	0005883a 	mov	r2,zero
811010e0:	003ff006 	br	811010a4 <__reset+0xfb0e10a4>
811010e4:	01002004 	movi	r4,128
811010e8:	02001004 	movi	r8,64
811010ec:	01c00fc4 	movi	r7,63
811010f0:	003f6106 	br	81100e78 <__reset+0xfb0e0e78>
811010f4:	4009883a 	mov	r4,r8
811010f8:	003f7506 	br	81100ed0 <__reset+0xfb0e0ed0>
811010fc:	81000317 	ldw	r4,12(r16)
81101100:	003fde06 	br	8110107c <__reset+0xfb0e107c>
81101104:	81c5883a 	add	r2,r16,r7
81101108:	11400117 	ldw	r5,4(r2)
8110110c:	9009883a 	mov	r4,r18
81101110:	29400054 	ori	r5,r5,1
81101114:	11400115 	stw	r5,4(r2)
81101118:	110352c0 	call	8110352c <__malloc_unlock>
8110111c:	80800204 	addi	r2,r16,8
81101120:	003fe006 	br	811010a4 <__reset+0xfb0e10a4>
81101124:	9c000217 	ldw	r16,8(r19)
81101128:	00bfff04 	movi	r2,-4
8110112c:	85800117 	ldw	r22,4(r16)
81101130:	b0ac703a 	and	r22,r22,r2
81101134:	b4400336 	bltu	r22,r17,81101144 <_malloc_r+0x344>
81101138:	b445c83a 	sub	r2,r22,r17
8110113c:	00c003c4 	movi	r3,15
81101140:	18805d16 	blt	r3,r2,811012b8 <_malloc_r+0x4b8>
81101144:	05e04474 	movhi	r23,33041
81101148:	00a04474 	movhi	r2,33041
8110114c:	10a9b704 	addi	r2,r2,-22820
81101150:	bde9a504 	addi	r23,r23,-22892
81101154:	15400017 	ldw	r21,0(r2)
81101158:	b8c00017 	ldw	r3,0(r23)
8110115c:	00bfffc4 	movi	r2,-1
81101160:	858d883a 	add	r6,r16,r22
81101164:	8d6b883a 	add	r21,r17,r21
81101168:	1880ea26 	beq	r3,r2,81101514 <_malloc_r+0x714>
8110116c:	ad4403c4 	addi	r21,r21,4111
81101170:	00bc0004 	movi	r2,-4096
81101174:	a8aa703a 	and	r21,r21,r2
81101178:	a80b883a 	mov	r5,r21
8110117c:	9009883a 	mov	r4,r18
81101180:	d9800015 	stw	r6,0(sp)
81101184:	11020200 	call	81102020 <_sbrk_r>
81101188:	1029883a 	mov	r20,r2
8110118c:	00bfffc4 	movi	r2,-1
81101190:	d9800017 	ldw	r6,0(sp)
81101194:	a080e826 	beq	r20,r2,81101538 <_malloc_r+0x738>
81101198:	a180a636 	bltu	r20,r6,81101434 <_malloc_r+0x634>
8110119c:	07204474 	movhi	fp,33041
811011a0:	e729c004 	addi	fp,fp,-22784
811011a4:	e0800017 	ldw	r2,0(fp)
811011a8:	a887883a 	add	r3,r21,r2
811011ac:	e0c00015 	stw	r3,0(fp)
811011b0:	3500e626 	beq	r6,r20,8110154c <_malloc_r+0x74c>
811011b4:	b9000017 	ldw	r4,0(r23)
811011b8:	00bfffc4 	movi	r2,-1
811011bc:	2080ee26 	beq	r4,r2,81101578 <_malloc_r+0x778>
811011c0:	a185c83a 	sub	r2,r20,r6
811011c4:	10c5883a 	add	r2,r2,r3
811011c8:	e0800015 	stw	r2,0(fp)
811011cc:	a0c001cc 	andi	r3,r20,7
811011d0:	1800bc26 	beq	r3,zero,811014c4 <_malloc_r+0x6c4>
811011d4:	a0e9c83a 	sub	r20,r20,r3
811011d8:	00840204 	movi	r2,4104
811011dc:	a5000204 	addi	r20,r20,8
811011e0:	10c7c83a 	sub	r3,r2,r3
811011e4:	a545883a 	add	r2,r20,r21
811011e8:	1083ffcc 	andi	r2,r2,4095
811011ec:	18abc83a 	sub	r21,r3,r2
811011f0:	a80b883a 	mov	r5,r21
811011f4:	9009883a 	mov	r4,r18
811011f8:	11020200 	call	81102020 <_sbrk_r>
811011fc:	00ffffc4 	movi	r3,-1
81101200:	10c0e126 	beq	r2,r3,81101588 <_malloc_r+0x788>
81101204:	1505c83a 	sub	r2,r2,r20
81101208:	1545883a 	add	r2,r2,r21
8110120c:	10800054 	ori	r2,r2,1
81101210:	e0c00017 	ldw	r3,0(fp)
81101214:	9d000215 	stw	r20,8(r19)
81101218:	a0800115 	stw	r2,4(r20)
8110121c:	a8c7883a 	add	r3,r21,r3
81101220:	e0c00015 	stw	r3,0(fp)
81101224:	84c00e26 	beq	r16,r19,81101260 <_malloc_r+0x460>
81101228:	018003c4 	movi	r6,15
8110122c:	3580a72e 	bgeu	r6,r22,811014cc <_malloc_r+0x6cc>
81101230:	81400117 	ldw	r5,4(r16)
81101234:	013ffe04 	movi	r4,-8
81101238:	b0bffd04 	addi	r2,r22,-12
8110123c:	1104703a 	and	r2,r2,r4
81101240:	2900004c 	andi	r4,r5,1
81101244:	2088b03a 	or	r4,r4,r2
81101248:	81000115 	stw	r4,4(r16)
8110124c:	01400144 	movi	r5,5
81101250:	8089883a 	add	r4,r16,r2
81101254:	21400115 	stw	r5,4(r4)
81101258:	21400215 	stw	r5,8(r4)
8110125c:	3080cd36 	bltu	r6,r2,81101594 <_malloc_r+0x794>
81101260:	00a04474 	movhi	r2,33041
81101264:	10a9b604 	addi	r2,r2,-22824
81101268:	11000017 	ldw	r4,0(r2)
8110126c:	20c0012e 	bgeu	r4,r3,81101274 <_malloc_r+0x474>
81101270:	10c00015 	stw	r3,0(r2)
81101274:	00a04474 	movhi	r2,33041
81101278:	10a9b504 	addi	r2,r2,-22828
8110127c:	11000017 	ldw	r4,0(r2)
81101280:	9c000217 	ldw	r16,8(r19)
81101284:	20c0012e 	bgeu	r4,r3,8110128c <_malloc_r+0x48c>
81101288:	10c00015 	stw	r3,0(r2)
8110128c:	80c00117 	ldw	r3,4(r16)
81101290:	00bfff04 	movi	r2,-4
81101294:	1886703a 	and	r3,r3,r2
81101298:	1c45c83a 	sub	r2,r3,r17
8110129c:	1c400236 	bltu	r3,r17,811012a8 <_malloc_r+0x4a8>
811012a0:	00c003c4 	movi	r3,15
811012a4:	18800416 	blt	r3,r2,811012b8 <_malloc_r+0x4b8>
811012a8:	9009883a 	mov	r4,r18
811012ac:	110352c0 	call	8110352c <__malloc_unlock>
811012b0:	0005883a 	mov	r2,zero
811012b4:	003f7b06 	br	811010a4 <__reset+0xfb0e10a4>
811012b8:	88c00054 	ori	r3,r17,1
811012bc:	80c00115 	stw	r3,4(r16)
811012c0:	8463883a 	add	r17,r16,r17
811012c4:	10800054 	ori	r2,r2,1
811012c8:	9c400215 	stw	r17,8(r19)
811012cc:	88800115 	stw	r2,4(r17)
811012d0:	9009883a 	mov	r4,r18
811012d4:	110352c0 	call	8110352c <__malloc_unlock>
811012d8:	80800204 	addi	r2,r16,8
811012dc:	003f7106 	br	811010a4 <__reset+0xfb0e10a4>
811012e0:	00c00504 	movi	r3,20
811012e4:	18804a2e 	bgeu	r3,r2,81101410 <_malloc_r+0x610>
811012e8:	00c01504 	movi	r3,84
811012ec:	18806e36 	bltu	r3,r2,811014a8 <_malloc_r+0x6a8>
811012f0:	8804d33a 	srli	r2,r17,12
811012f4:	12001bc4 	addi	r8,r2,111
811012f8:	11c01b84 	addi	r7,r2,110
811012fc:	4209883a 	add	r4,r8,r8
81101300:	003edd06 	br	81100e78 <__reset+0xfb0e0e78>
81101304:	3804d27a 	srli	r2,r7,9
81101308:	00c00104 	movi	r3,4
8110130c:	1880442e 	bgeu	r3,r2,81101420 <_malloc_r+0x620>
81101310:	00c00504 	movi	r3,20
81101314:	18808136 	bltu	r3,r2,8110151c <_malloc_r+0x71c>
81101318:	11401704 	addi	r5,r2,92
8110131c:	10c016c4 	addi	r3,r2,91
81101320:	294b883a 	add	r5,r5,r5
81101324:	294b883a 	add	r5,r5,r5
81101328:	294b883a 	add	r5,r5,r5
8110132c:	994b883a 	add	r5,r19,r5
81101330:	28800017 	ldw	r2,0(r5)
81101334:	01a04474 	movhi	r6,33041
81101338:	297ffe04 	addi	r5,r5,-8
8110133c:	31a3ef04 	addi	r6,r6,-28740
81101340:	28806526 	beq	r5,r2,811014d8 <_malloc_r+0x6d8>
81101344:	01bfff04 	movi	r6,-4
81101348:	10c00117 	ldw	r3,4(r2)
8110134c:	1986703a 	and	r3,r3,r6
81101350:	38c0022e 	bgeu	r7,r3,8110135c <_malloc_r+0x55c>
81101354:	10800217 	ldw	r2,8(r2)
81101358:	28bffb1e 	bne	r5,r2,81101348 <__reset+0xfb0e1348>
8110135c:	11400317 	ldw	r5,12(r2)
81101360:	98c00117 	ldw	r3,4(r19)
81101364:	81400315 	stw	r5,12(r16)
81101368:	80800215 	stw	r2,8(r16)
8110136c:	2c000215 	stw	r16,8(r5)
81101370:	14000315 	stw	r16,12(r2)
81101374:	003ef806 	br	81100f58 <__reset+0xfb0e0f58>
81101378:	88c00054 	ori	r3,r17,1
8110137c:	80c00115 	stw	r3,4(r16)
81101380:	8463883a 	add	r17,r16,r17
81101384:	34400515 	stw	r17,20(r6)
81101388:	34400415 	stw	r17,16(r6)
8110138c:	10c00054 	ori	r3,r2,1
81101390:	8a000315 	stw	r8,12(r17)
81101394:	8a000215 	stw	r8,8(r17)
81101398:	88c00115 	stw	r3,4(r17)
8110139c:	88a3883a 	add	r17,r17,r2
811013a0:	88800015 	stw	r2,0(r17)
811013a4:	9009883a 	mov	r4,r18
811013a8:	110352c0 	call	8110352c <__malloc_unlock>
811013ac:	80800204 	addi	r2,r16,8
811013b0:	003f3c06 	br	811010a4 <__reset+0xfb0e10a4>
811013b4:	30c00117 	ldw	r3,4(r6)
811013b8:	003ee706 	br	81100f58 <__reset+0xfb0e0f58>
811013bc:	5ac00044 	addi	r11,r11,1
811013c0:	588000cc 	andi	r2,r11,3
811013c4:	31800204 	addi	r6,r6,8
811013c8:	103efd1e 	bne	r2,zero,81100fc0 <__reset+0xfb0e0fc0>
811013cc:	00002406 	br	81101460 <_malloc_r+0x660>
811013d0:	14000317 	ldw	r16,12(r2)
811013d4:	143f251e 	bne	r2,r16,8110106c <__reset+0xfb0e106c>
811013d8:	21000084 	addi	r4,r4,2
811013dc:	003ebc06 	br	81100ed0 <__reset+0xfb0e0ed0>
811013e0:	8085883a 	add	r2,r16,r2
811013e4:	10c00117 	ldw	r3,4(r2)
811013e8:	81000317 	ldw	r4,12(r16)
811013ec:	81400217 	ldw	r5,8(r16)
811013f0:	18c00054 	ori	r3,r3,1
811013f4:	10c00115 	stw	r3,4(r2)
811013f8:	29000315 	stw	r4,12(r5)
811013fc:	21400215 	stw	r5,8(r4)
81101400:	9009883a 	mov	r4,r18
81101404:	110352c0 	call	8110352c <__malloc_unlock>
81101408:	80800204 	addi	r2,r16,8
8110140c:	003f2506 	br	811010a4 <__reset+0xfb0e10a4>
81101410:	12001704 	addi	r8,r2,92
81101414:	11c016c4 	addi	r7,r2,91
81101418:	4209883a 	add	r4,r8,r8
8110141c:	003e9606 	br	81100e78 <__reset+0xfb0e0e78>
81101420:	3804d1ba 	srli	r2,r7,6
81101424:	11400e44 	addi	r5,r2,57
81101428:	10c00e04 	addi	r3,r2,56
8110142c:	294b883a 	add	r5,r5,r5
81101430:	003fbc06 	br	81101324 <__reset+0xfb0e1324>
81101434:	84ff5926 	beq	r16,r19,8110119c <__reset+0xfb0e119c>
81101438:	00a04474 	movhi	r2,33041
8110143c:	10a3ef04 	addi	r2,r2,-28740
81101440:	14000217 	ldw	r16,8(r2)
81101444:	00bfff04 	movi	r2,-4
81101448:	80c00117 	ldw	r3,4(r16)
8110144c:	1886703a 	and	r3,r3,r2
81101450:	003f9106 	br	81101298 <__reset+0xfb0e1298>
81101454:	60800217 	ldw	r2,8(r12)
81101458:	213fffc4 	addi	r4,r4,-1
8110145c:	1300651e 	bne	r2,r12,811015f4 <_malloc_r+0x7f4>
81101460:	208000cc 	andi	r2,r4,3
81101464:	633ffe04 	addi	r12,r12,-8
81101468:	103ffa1e 	bne	r2,zero,81101454 <__reset+0xfb0e1454>
8110146c:	98800117 	ldw	r2,4(r19)
81101470:	0146303a 	nor	r3,zero,r5
81101474:	1884703a 	and	r2,r3,r2
81101478:	98800115 	stw	r2,4(r19)
8110147c:	294b883a 	add	r5,r5,r5
81101480:	117f2836 	bltu	r2,r5,81101124 <__reset+0xfb0e1124>
81101484:	283f2726 	beq	r5,zero,81101124 <__reset+0xfb0e1124>
81101488:	2886703a 	and	r3,r5,r2
8110148c:	5809883a 	mov	r4,r11
81101490:	183ec31e 	bne	r3,zero,81100fa0 <__reset+0xfb0e0fa0>
81101494:	294b883a 	add	r5,r5,r5
81101498:	2886703a 	and	r3,r5,r2
8110149c:	21000104 	addi	r4,r4,4
811014a0:	183ffc26 	beq	r3,zero,81101494 <__reset+0xfb0e1494>
811014a4:	003ebe06 	br	81100fa0 <__reset+0xfb0e0fa0>
811014a8:	00c05504 	movi	r3,340
811014ac:	18801236 	bltu	r3,r2,811014f8 <_malloc_r+0x6f8>
811014b0:	8804d3fa 	srli	r2,r17,15
811014b4:	12001e04 	addi	r8,r2,120
811014b8:	11c01dc4 	addi	r7,r2,119
811014bc:	4209883a 	add	r4,r8,r8
811014c0:	003e6d06 	br	81100e78 <__reset+0xfb0e0e78>
811014c4:	00c40004 	movi	r3,4096
811014c8:	003f4606 	br	811011e4 <__reset+0xfb0e11e4>
811014cc:	00800044 	movi	r2,1
811014d0:	a0800115 	stw	r2,4(r20)
811014d4:	003f7406 	br	811012a8 <__reset+0xfb0e12a8>
811014d8:	1805d0ba 	srai	r2,r3,2
811014dc:	01c00044 	movi	r7,1
811014e0:	30c00117 	ldw	r3,4(r6)
811014e4:	388e983a 	sll	r7,r7,r2
811014e8:	2805883a 	mov	r2,r5
811014ec:	38c6b03a 	or	r3,r7,r3
811014f0:	30c00115 	stw	r3,4(r6)
811014f4:	003f9b06 	br	81101364 <__reset+0xfb0e1364>
811014f8:	00c15504 	movi	r3,1364
811014fc:	18801a36 	bltu	r3,r2,81101568 <_malloc_r+0x768>
81101500:	8804d4ba 	srli	r2,r17,18
81101504:	12001f44 	addi	r8,r2,125
81101508:	11c01f04 	addi	r7,r2,124
8110150c:	4209883a 	add	r4,r8,r8
81101510:	003e5906 	br	81100e78 <__reset+0xfb0e0e78>
81101514:	ad400404 	addi	r21,r21,16
81101518:	003f1706 	br	81101178 <__reset+0xfb0e1178>
8110151c:	00c01504 	movi	r3,84
81101520:	18802336 	bltu	r3,r2,811015b0 <_malloc_r+0x7b0>
81101524:	3804d33a 	srli	r2,r7,12
81101528:	11401bc4 	addi	r5,r2,111
8110152c:	10c01b84 	addi	r3,r2,110
81101530:	294b883a 	add	r5,r5,r5
81101534:	003f7b06 	br	81101324 <__reset+0xfb0e1324>
81101538:	9c000217 	ldw	r16,8(r19)
8110153c:	00bfff04 	movi	r2,-4
81101540:	80c00117 	ldw	r3,4(r16)
81101544:	1886703a 	and	r3,r3,r2
81101548:	003f5306 	br	81101298 <__reset+0xfb0e1298>
8110154c:	3083ffcc 	andi	r2,r6,4095
81101550:	103f181e 	bne	r2,zero,811011b4 <__reset+0xfb0e11b4>
81101554:	99000217 	ldw	r4,8(r19)
81101558:	b545883a 	add	r2,r22,r21
8110155c:	10800054 	ori	r2,r2,1
81101560:	20800115 	stw	r2,4(r4)
81101564:	003f3e06 	br	81101260 <__reset+0xfb0e1260>
81101568:	01003f84 	movi	r4,254
8110156c:	02001fc4 	movi	r8,127
81101570:	01c01f84 	movi	r7,126
81101574:	003e4006 	br	81100e78 <__reset+0xfb0e0e78>
81101578:	00a04474 	movhi	r2,33041
8110157c:	10a9a504 	addi	r2,r2,-22892
81101580:	15000015 	stw	r20,0(r2)
81101584:	003f1106 	br	811011cc <__reset+0xfb0e11cc>
81101588:	00800044 	movi	r2,1
8110158c:	002b883a 	mov	r21,zero
81101590:	003f1f06 	br	81101210 <__reset+0xfb0e1210>
81101594:	81400204 	addi	r5,r16,8
81101598:	9009883a 	mov	r4,r18
8110159c:	11028880 	call	81102888 <_free_r>
811015a0:	00a04474 	movhi	r2,33041
811015a4:	10a9c004 	addi	r2,r2,-22784
811015a8:	10c00017 	ldw	r3,0(r2)
811015ac:	003f2c06 	br	81101260 <__reset+0xfb0e1260>
811015b0:	00c05504 	movi	r3,340
811015b4:	18800536 	bltu	r3,r2,811015cc <_malloc_r+0x7cc>
811015b8:	3804d3fa 	srli	r2,r7,15
811015bc:	11401e04 	addi	r5,r2,120
811015c0:	10c01dc4 	addi	r3,r2,119
811015c4:	294b883a 	add	r5,r5,r5
811015c8:	003f5606 	br	81101324 <__reset+0xfb0e1324>
811015cc:	00c15504 	movi	r3,1364
811015d0:	18800536 	bltu	r3,r2,811015e8 <_malloc_r+0x7e8>
811015d4:	3804d4ba 	srli	r2,r7,18
811015d8:	11401f44 	addi	r5,r2,125
811015dc:	10c01f04 	addi	r3,r2,124
811015e0:	294b883a 	add	r5,r5,r5
811015e4:	003f4f06 	br	81101324 <__reset+0xfb0e1324>
811015e8:	01403f84 	movi	r5,254
811015ec:	00c01f84 	movi	r3,126
811015f0:	003f4c06 	br	81101324 <__reset+0xfb0e1324>
811015f4:	98800117 	ldw	r2,4(r19)
811015f8:	003fa006 	br	8110147c <__reset+0xfb0e147c>
811015fc:	8808d0fa 	srli	r4,r17,3
81101600:	20800044 	addi	r2,r4,1
81101604:	1085883a 	add	r2,r2,r2
81101608:	003e9006 	br	8110104c <__reset+0xfb0e104c>

8110160c <memchr>:
8110160c:	208000cc 	andi	r2,r4,3
81101610:	280f883a 	mov	r7,r5
81101614:	10003426 	beq	r2,zero,811016e8 <memchr+0xdc>
81101618:	30bfffc4 	addi	r2,r6,-1
8110161c:	30001a26 	beq	r6,zero,81101688 <memchr+0x7c>
81101620:	20c00003 	ldbu	r3,0(r4)
81101624:	29803fcc 	andi	r6,r5,255
81101628:	30c0051e 	bne	r6,r3,81101640 <memchr+0x34>
8110162c:	00001806 	br	81101690 <memchr+0x84>
81101630:	10001526 	beq	r2,zero,81101688 <memchr+0x7c>
81101634:	20c00003 	ldbu	r3,0(r4)
81101638:	10bfffc4 	addi	r2,r2,-1
8110163c:	30c01426 	beq	r6,r3,81101690 <memchr+0x84>
81101640:	21000044 	addi	r4,r4,1
81101644:	20c000cc 	andi	r3,r4,3
81101648:	183ff91e 	bne	r3,zero,81101630 <__reset+0xfb0e1630>
8110164c:	020000c4 	movi	r8,3
81101650:	40801136 	bltu	r8,r2,81101698 <memchr+0x8c>
81101654:	10000c26 	beq	r2,zero,81101688 <memchr+0x7c>
81101658:	20c00003 	ldbu	r3,0(r4)
8110165c:	29403fcc 	andi	r5,r5,255
81101660:	28c00b26 	beq	r5,r3,81101690 <memchr+0x84>
81101664:	20c00044 	addi	r3,r4,1
81101668:	39803fcc 	andi	r6,r7,255
8110166c:	2089883a 	add	r4,r4,r2
81101670:	00000306 	br	81101680 <memchr+0x74>
81101674:	18c00044 	addi	r3,r3,1
81101678:	197fffc3 	ldbu	r5,-1(r3)
8110167c:	31400526 	beq	r6,r5,81101694 <memchr+0x88>
81101680:	1805883a 	mov	r2,r3
81101684:	20fffb1e 	bne	r4,r3,81101674 <__reset+0xfb0e1674>
81101688:	0005883a 	mov	r2,zero
8110168c:	f800283a 	ret
81101690:	2005883a 	mov	r2,r4
81101694:	f800283a 	ret
81101698:	28c03fcc 	andi	r3,r5,255
8110169c:	1812923a 	slli	r9,r3,8
811016a0:	02ffbff4 	movhi	r11,65279
811016a4:	02a02074 	movhi	r10,32897
811016a8:	48d2b03a 	or	r9,r9,r3
811016ac:	4806943a 	slli	r3,r9,16
811016b0:	5affbfc4 	addi	r11,r11,-257
811016b4:	52a02004 	addi	r10,r10,-32640
811016b8:	48d2b03a 	or	r9,r9,r3
811016bc:	20c00017 	ldw	r3,0(r4)
811016c0:	48c6f03a 	xor	r3,r9,r3
811016c4:	1acd883a 	add	r6,r3,r11
811016c8:	00c6303a 	nor	r3,zero,r3
811016cc:	30c6703a 	and	r3,r6,r3
811016d0:	1a86703a 	and	r3,r3,r10
811016d4:	183fe01e 	bne	r3,zero,81101658 <__reset+0xfb0e1658>
811016d8:	10bfff04 	addi	r2,r2,-4
811016dc:	21000104 	addi	r4,r4,4
811016e0:	40bff636 	bltu	r8,r2,811016bc <__reset+0xfb0e16bc>
811016e4:	003fdb06 	br	81101654 <__reset+0xfb0e1654>
811016e8:	3005883a 	mov	r2,r6
811016ec:	003fd706 	br	8110164c <__reset+0xfb0e164c>

811016f0 <memcpy>:
811016f0:	defffd04 	addi	sp,sp,-12
811016f4:	dfc00215 	stw	ra,8(sp)
811016f8:	dc400115 	stw	r17,4(sp)
811016fc:	dc000015 	stw	r16,0(sp)
81101700:	00c003c4 	movi	r3,15
81101704:	2005883a 	mov	r2,r4
81101708:	1980452e 	bgeu	r3,r6,81101820 <memcpy+0x130>
8110170c:	2906b03a 	or	r3,r5,r4
81101710:	18c000cc 	andi	r3,r3,3
81101714:	1800441e 	bne	r3,zero,81101828 <memcpy+0x138>
81101718:	347ffc04 	addi	r17,r6,-16
8110171c:	8822d13a 	srli	r17,r17,4
81101720:	28c00104 	addi	r3,r5,4
81101724:	23400104 	addi	r13,r4,4
81101728:	8820913a 	slli	r16,r17,4
8110172c:	2b000204 	addi	r12,r5,8
81101730:	22c00204 	addi	r11,r4,8
81101734:	84000504 	addi	r16,r16,20
81101738:	2a800304 	addi	r10,r5,12
8110173c:	22400304 	addi	r9,r4,12
81101740:	2c21883a 	add	r16,r5,r16
81101744:	2811883a 	mov	r8,r5
81101748:	200f883a 	mov	r7,r4
8110174c:	41000017 	ldw	r4,0(r8)
81101750:	1fc00017 	ldw	ra,0(r3)
81101754:	63c00017 	ldw	r15,0(r12)
81101758:	39000015 	stw	r4,0(r7)
8110175c:	53800017 	ldw	r14,0(r10)
81101760:	6fc00015 	stw	ra,0(r13)
81101764:	5bc00015 	stw	r15,0(r11)
81101768:	4b800015 	stw	r14,0(r9)
8110176c:	18c00404 	addi	r3,r3,16
81101770:	39c00404 	addi	r7,r7,16
81101774:	42000404 	addi	r8,r8,16
81101778:	6b400404 	addi	r13,r13,16
8110177c:	63000404 	addi	r12,r12,16
81101780:	5ac00404 	addi	r11,r11,16
81101784:	52800404 	addi	r10,r10,16
81101788:	4a400404 	addi	r9,r9,16
8110178c:	1c3fef1e 	bne	r3,r16,8110174c <__reset+0xfb0e174c>
81101790:	89c00044 	addi	r7,r17,1
81101794:	380e913a 	slli	r7,r7,4
81101798:	310003cc 	andi	r4,r6,15
8110179c:	02c000c4 	movi	r11,3
811017a0:	11c7883a 	add	r3,r2,r7
811017a4:	29cb883a 	add	r5,r5,r7
811017a8:	5900212e 	bgeu	r11,r4,81101830 <memcpy+0x140>
811017ac:	1813883a 	mov	r9,r3
811017b0:	2811883a 	mov	r8,r5
811017b4:	200f883a 	mov	r7,r4
811017b8:	42800017 	ldw	r10,0(r8)
811017bc:	4a400104 	addi	r9,r9,4
811017c0:	39ffff04 	addi	r7,r7,-4
811017c4:	4abfff15 	stw	r10,-4(r9)
811017c8:	42000104 	addi	r8,r8,4
811017cc:	59fffa36 	bltu	r11,r7,811017b8 <__reset+0xfb0e17b8>
811017d0:	213fff04 	addi	r4,r4,-4
811017d4:	2008d0ba 	srli	r4,r4,2
811017d8:	318000cc 	andi	r6,r6,3
811017dc:	21000044 	addi	r4,r4,1
811017e0:	2109883a 	add	r4,r4,r4
811017e4:	2109883a 	add	r4,r4,r4
811017e8:	1907883a 	add	r3,r3,r4
811017ec:	290b883a 	add	r5,r5,r4
811017f0:	30000626 	beq	r6,zero,8110180c <memcpy+0x11c>
811017f4:	198d883a 	add	r6,r3,r6
811017f8:	29c00003 	ldbu	r7,0(r5)
811017fc:	18c00044 	addi	r3,r3,1
81101800:	29400044 	addi	r5,r5,1
81101804:	19ffffc5 	stb	r7,-1(r3)
81101808:	19bffb1e 	bne	r3,r6,811017f8 <__reset+0xfb0e17f8>
8110180c:	dfc00217 	ldw	ra,8(sp)
81101810:	dc400117 	ldw	r17,4(sp)
81101814:	dc000017 	ldw	r16,0(sp)
81101818:	dec00304 	addi	sp,sp,12
8110181c:	f800283a 	ret
81101820:	2007883a 	mov	r3,r4
81101824:	003ff206 	br	811017f0 <__reset+0xfb0e17f0>
81101828:	2007883a 	mov	r3,r4
8110182c:	003ff106 	br	811017f4 <__reset+0xfb0e17f4>
81101830:	200d883a 	mov	r6,r4
81101834:	003fee06 	br	811017f0 <__reset+0xfb0e17f0>

81101838 <memmove>:
81101838:	2005883a 	mov	r2,r4
8110183c:	29000b2e 	bgeu	r5,r4,8110186c <memmove+0x34>
81101840:	298f883a 	add	r7,r5,r6
81101844:	21c0092e 	bgeu	r4,r7,8110186c <memmove+0x34>
81101848:	2187883a 	add	r3,r4,r6
8110184c:	198bc83a 	sub	r5,r3,r6
81101850:	30004826 	beq	r6,zero,81101974 <memmove+0x13c>
81101854:	39ffffc4 	addi	r7,r7,-1
81101858:	39000003 	ldbu	r4,0(r7)
8110185c:	18ffffc4 	addi	r3,r3,-1
81101860:	19000005 	stb	r4,0(r3)
81101864:	28fffb1e 	bne	r5,r3,81101854 <__reset+0xfb0e1854>
81101868:	f800283a 	ret
8110186c:	00c003c4 	movi	r3,15
81101870:	1980412e 	bgeu	r3,r6,81101978 <memmove+0x140>
81101874:	2886b03a 	or	r3,r5,r2
81101878:	18c000cc 	andi	r3,r3,3
8110187c:	1800401e 	bne	r3,zero,81101980 <memmove+0x148>
81101880:	33fffc04 	addi	r15,r6,-16
81101884:	781ed13a 	srli	r15,r15,4
81101888:	28c00104 	addi	r3,r5,4
8110188c:	13400104 	addi	r13,r2,4
81101890:	781c913a 	slli	r14,r15,4
81101894:	2b000204 	addi	r12,r5,8
81101898:	12c00204 	addi	r11,r2,8
8110189c:	73800504 	addi	r14,r14,20
811018a0:	2a800304 	addi	r10,r5,12
811018a4:	12400304 	addi	r9,r2,12
811018a8:	2b9d883a 	add	r14,r5,r14
811018ac:	2811883a 	mov	r8,r5
811018b0:	100f883a 	mov	r7,r2
811018b4:	41000017 	ldw	r4,0(r8)
811018b8:	39c00404 	addi	r7,r7,16
811018bc:	18c00404 	addi	r3,r3,16
811018c0:	393ffc15 	stw	r4,-16(r7)
811018c4:	193ffc17 	ldw	r4,-16(r3)
811018c8:	6b400404 	addi	r13,r13,16
811018cc:	5ac00404 	addi	r11,r11,16
811018d0:	693ffc15 	stw	r4,-16(r13)
811018d4:	61000017 	ldw	r4,0(r12)
811018d8:	4a400404 	addi	r9,r9,16
811018dc:	42000404 	addi	r8,r8,16
811018e0:	593ffc15 	stw	r4,-16(r11)
811018e4:	51000017 	ldw	r4,0(r10)
811018e8:	63000404 	addi	r12,r12,16
811018ec:	52800404 	addi	r10,r10,16
811018f0:	493ffc15 	stw	r4,-16(r9)
811018f4:	1bbfef1e 	bne	r3,r14,811018b4 <__reset+0xfb0e18b4>
811018f8:	79000044 	addi	r4,r15,1
811018fc:	2008913a 	slli	r4,r4,4
81101900:	328003cc 	andi	r10,r6,15
81101904:	02c000c4 	movi	r11,3
81101908:	1107883a 	add	r3,r2,r4
8110190c:	290b883a 	add	r5,r5,r4
81101910:	5a801e2e 	bgeu	r11,r10,8110198c <memmove+0x154>
81101914:	1813883a 	mov	r9,r3
81101918:	2811883a 	mov	r8,r5
8110191c:	500f883a 	mov	r7,r10
81101920:	41000017 	ldw	r4,0(r8)
81101924:	4a400104 	addi	r9,r9,4
81101928:	39ffff04 	addi	r7,r7,-4
8110192c:	493fff15 	stw	r4,-4(r9)
81101930:	42000104 	addi	r8,r8,4
81101934:	59fffa36 	bltu	r11,r7,81101920 <__reset+0xfb0e1920>
81101938:	513fff04 	addi	r4,r10,-4
8110193c:	2008d0ba 	srli	r4,r4,2
81101940:	318000cc 	andi	r6,r6,3
81101944:	21000044 	addi	r4,r4,1
81101948:	2109883a 	add	r4,r4,r4
8110194c:	2109883a 	add	r4,r4,r4
81101950:	1907883a 	add	r3,r3,r4
81101954:	290b883a 	add	r5,r5,r4
81101958:	30000b26 	beq	r6,zero,81101988 <memmove+0x150>
8110195c:	198d883a 	add	r6,r3,r6
81101960:	29c00003 	ldbu	r7,0(r5)
81101964:	18c00044 	addi	r3,r3,1
81101968:	29400044 	addi	r5,r5,1
8110196c:	19ffffc5 	stb	r7,-1(r3)
81101970:	19bffb1e 	bne	r3,r6,81101960 <__reset+0xfb0e1960>
81101974:	f800283a 	ret
81101978:	1007883a 	mov	r3,r2
8110197c:	003ff606 	br	81101958 <__reset+0xfb0e1958>
81101980:	1007883a 	mov	r3,r2
81101984:	003ff506 	br	8110195c <__reset+0xfb0e195c>
81101988:	f800283a 	ret
8110198c:	500d883a 	mov	r6,r10
81101990:	003ff106 	br	81101958 <__reset+0xfb0e1958>

81101994 <memset>:
81101994:	20c000cc 	andi	r3,r4,3
81101998:	2005883a 	mov	r2,r4
8110199c:	18004426 	beq	r3,zero,81101ab0 <memset+0x11c>
811019a0:	31ffffc4 	addi	r7,r6,-1
811019a4:	30004026 	beq	r6,zero,81101aa8 <memset+0x114>
811019a8:	2813883a 	mov	r9,r5
811019ac:	200d883a 	mov	r6,r4
811019b0:	2007883a 	mov	r3,r4
811019b4:	00000406 	br	811019c8 <memset+0x34>
811019b8:	3a3fffc4 	addi	r8,r7,-1
811019bc:	31800044 	addi	r6,r6,1
811019c0:	38003926 	beq	r7,zero,81101aa8 <memset+0x114>
811019c4:	400f883a 	mov	r7,r8
811019c8:	18c00044 	addi	r3,r3,1
811019cc:	32400005 	stb	r9,0(r6)
811019d0:	1a0000cc 	andi	r8,r3,3
811019d4:	403ff81e 	bne	r8,zero,811019b8 <__reset+0xfb0e19b8>
811019d8:	010000c4 	movi	r4,3
811019dc:	21c02d2e 	bgeu	r4,r7,81101a94 <memset+0x100>
811019e0:	29003fcc 	andi	r4,r5,255
811019e4:	200c923a 	slli	r6,r4,8
811019e8:	3108b03a 	or	r4,r6,r4
811019ec:	200c943a 	slli	r6,r4,16
811019f0:	218cb03a 	or	r6,r4,r6
811019f4:	010003c4 	movi	r4,15
811019f8:	21c0182e 	bgeu	r4,r7,81101a5c <memset+0xc8>
811019fc:	3b3ffc04 	addi	r12,r7,-16
81101a00:	6018d13a 	srli	r12,r12,4
81101a04:	1a000104 	addi	r8,r3,4
81101a08:	1ac00204 	addi	r11,r3,8
81101a0c:	6008913a 	slli	r4,r12,4
81101a10:	1a800304 	addi	r10,r3,12
81101a14:	1813883a 	mov	r9,r3
81101a18:	21000504 	addi	r4,r4,20
81101a1c:	1909883a 	add	r4,r3,r4
81101a20:	49800015 	stw	r6,0(r9)
81101a24:	41800015 	stw	r6,0(r8)
81101a28:	59800015 	stw	r6,0(r11)
81101a2c:	51800015 	stw	r6,0(r10)
81101a30:	42000404 	addi	r8,r8,16
81101a34:	4a400404 	addi	r9,r9,16
81101a38:	5ac00404 	addi	r11,r11,16
81101a3c:	52800404 	addi	r10,r10,16
81101a40:	413ff71e 	bne	r8,r4,81101a20 <__reset+0xfb0e1a20>
81101a44:	63000044 	addi	r12,r12,1
81101a48:	6018913a 	slli	r12,r12,4
81101a4c:	39c003cc 	andi	r7,r7,15
81101a50:	010000c4 	movi	r4,3
81101a54:	1b07883a 	add	r3,r3,r12
81101a58:	21c00e2e 	bgeu	r4,r7,81101a94 <memset+0x100>
81101a5c:	1813883a 	mov	r9,r3
81101a60:	3811883a 	mov	r8,r7
81101a64:	010000c4 	movi	r4,3
81101a68:	49800015 	stw	r6,0(r9)
81101a6c:	423fff04 	addi	r8,r8,-4
81101a70:	4a400104 	addi	r9,r9,4
81101a74:	223ffc36 	bltu	r4,r8,81101a68 <__reset+0xfb0e1a68>
81101a78:	393fff04 	addi	r4,r7,-4
81101a7c:	2008d0ba 	srli	r4,r4,2
81101a80:	39c000cc 	andi	r7,r7,3
81101a84:	21000044 	addi	r4,r4,1
81101a88:	2109883a 	add	r4,r4,r4
81101a8c:	2109883a 	add	r4,r4,r4
81101a90:	1907883a 	add	r3,r3,r4
81101a94:	38000526 	beq	r7,zero,81101aac <memset+0x118>
81101a98:	19cf883a 	add	r7,r3,r7
81101a9c:	19400005 	stb	r5,0(r3)
81101aa0:	18c00044 	addi	r3,r3,1
81101aa4:	38fffd1e 	bne	r7,r3,81101a9c <__reset+0xfb0e1a9c>
81101aa8:	f800283a 	ret
81101aac:	f800283a 	ret
81101ab0:	2007883a 	mov	r3,r4
81101ab4:	300f883a 	mov	r7,r6
81101ab8:	003fc706 	br	811019d8 <__reset+0xfb0e19d8>

81101abc <_realloc_r>:
81101abc:	defff604 	addi	sp,sp,-40
81101ac0:	dc800215 	stw	r18,8(sp)
81101ac4:	dfc00915 	stw	ra,36(sp)
81101ac8:	df000815 	stw	fp,32(sp)
81101acc:	ddc00715 	stw	r23,28(sp)
81101ad0:	dd800615 	stw	r22,24(sp)
81101ad4:	dd400515 	stw	r21,20(sp)
81101ad8:	dd000415 	stw	r20,16(sp)
81101adc:	dcc00315 	stw	r19,12(sp)
81101ae0:	dc400115 	stw	r17,4(sp)
81101ae4:	dc000015 	stw	r16,0(sp)
81101ae8:	3025883a 	mov	r18,r6
81101aec:	2800b726 	beq	r5,zero,81101dcc <_realloc_r+0x310>
81101af0:	282b883a 	mov	r21,r5
81101af4:	2029883a 	mov	r20,r4
81101af8:	11035080 	call	81103508 <__malloc_lock>
81101afc:	a8bfff17 	ldw	r2,-4(r21)
81101b00:	043fff04 	movi	r16,-4
81101b04:	90c002c4 	addi	r3,r18,11
81101b08:	01000584 	movi	r4,22
81101b0c:	acfffe04 	addi	r19,r21,-8
81101b10:	1420703a 	and	r16,r2,r16
81101b14:	20c0332e 	bgeu	r4,r3,81101be4 <_realloc_r+0x128>
81101b18:	047ffe04 	movi	r17,-8
81101b1c:	1c62703a 	and	r17,r3,r17
81101b20:	8807883a 	mov	r3,r17
81101b24:	88005816 	blt	r17,zero,81101c88 <_realloc_r+0x1cc>
81101b28:	8c805736 	bltu	r17,r18,81101c88 <_realloc_r+0x1cc>
81101b2c:	80c0300e 	bge	r16,r3,81101bf0 <_realloc_r+0x134>
81101b30:	07204474 	movhi	fp,33041
81101b34:	e723ef04 	addi	fp,fp,-28740
81101b38:	e1c00217 	ldw	r7,8(fp)
81101b3c:	9c09883a 	add	r4,r19,r16
81101b40:	22000117 	ldw	r8,4(r4)
81101b44:	21c06326 	beq	r4,r7,81101cd4 <_realloc_r+0x218>
81101b48:	017fff84 	movi	r5,-2
81101b4c:	414a703a 	and	r5,r8,r5
81101b50:	214b883a 	add	r5,r4,r5
81101b54:	29800117 	ldw	r6,4(r5)
81101b58:	3180004c 	andi	r6,r6,1
81101b5c:	30003f26 	beq	r6,zero,81101c5c <_realloc_r+0x1a0>
81101b60:	1080004c 	andi	r2,r2,1
81101b64:	10008326 	beq	r2,zero,81101d74 <_realloc_r+0x2b8>
81101b68:	900b883a 	mov	r5,r18
81101b6c:	a009883a 	mov	r4,r20
81101b70:	1100e000 	call	81100e00 <_malloc_r>
81101b74:	1025883a 	mov	r18,r2
81101b78:	10011e26 	beq	r2,zero,81101ff4 <_realloc_r+0x538>
81101b7c:	a93fff17 	ldw	r4,-4(r21)
81101b80:	10fffe04 	addi	r3,r2,-8
81101b84:	00bfff84 	movi	r2,-2
81101b88:	2084703a 	and	r2,r4,r2
81101b8c:	9885883a 	add	r2,r19,r2
81101b90:	1880ee26 	beq	r3,r2,81101f4c <_realloc_r+0x490>
81101b94:	81bfff04 	addi	r6,r16,-4
81101b98:	00800904 	movi	r2,36
81101b9c:	1180b836 	bltu	r2,r6,81101e80 <_realloc_r+0x3c4>
81101ba0:	00c004c4 	movi	r3,19
81101ba4:	19809636 	bltu	r3,r6,81101e00 <_realloc_r+0x344>
81101ba8:	9005883a 	mov	r2,r18
81101bac:	a807883a 	mov	r3,r21
81101bb0:	19000017 	ldw	r4,0(r3)
81101bb4:	11000015 	stw	r4,0(r2)
81101bb8:	19000117 	ldw	r4,4(r3)
81101bbc:	11000115 	stw	r4,4(r2)
81101bc0:	18c00217 	ldw	r3,8(r3)
81101bc4:	10c00215 	stw	r3,8(r2)
81101bc8:	a80b883a 	mov	r5,r21
81101bcc:	a009883a 	mov	r4,r20
81101bd0:	11028880 	call	81102888 <_free_r>
81101bd4:	a009883a 	mov	r4,r20
81101bd8:	110352c0 	call	8110352c <__malloc_unlock>
81101bdc:	9005883a 	mov	r2,r18
81101be0:	00001206 	br	81101c2c <_realloc_r+0x170>
81101be4:	00c00404 	movi	r3,16
81101be8:	1823883a 	mov	r17,r3
81101bec:	003fce06 	br	81101b28 <__reset+0xfb0e1b28>
81101bf0:	a825883a 	mov	r18,r21
81101bf4:	8445c83a 	sub	r2,r16,r17
81101bf8:	00c003c4 	movi	r3,15
81101bfc:	18802636 	bltu	r3,r2,81101c98 <_realloc_r+0x1dc>
81101c00:	99800117 	ldw	r6,4(r19)
81101c04:	9c07883a 	add	r3,r19,r16
81101c08:	3180004c 	andi	r6,r6,1
81101c0c:	3420b03a 	or	r16,r6,r16
81101c10:	9c000115 	stw	r16,4(r19)
81101c14:	18800117 	ldw	r2,4(r3)
81101c18:	10800054 	ori	r2,r2,1
81101c1c:	18800115 	stw	r2,4(r3)
81101c20:	a009883a 	mov	r4,r20
81101c24:	110352c0 	call	8110352c <__malloc_unlock>
81101c28:	9005883a 	mov	r2,r18
81101c2c:	dfc00917 	ldw	ra,36(sp)
81101c30:	df000817 	ldw	fp,32(sp)
81101c34:	ddc00717 	ldw	r23,28(sp)
81101c38:	dd800617 	ldw	r22,24(sp)
81101c3c:	dd400517 	ldw	r21,20(sp)
81101c40:	dd000417 	ldw	r20,16(sp)
81101c44:	dcc00317 	ldw	r19,12(sp)
81101c48:	dc800217 	ldw	r18,8(sp)
81101c4c:	dc400117 	ldw	r17,4(sp)
81101c50:	dc000017 	ldw	r16,0(sp)
81101c54:	dec00a04 	addi	sp,sp,40
81101c58:	f800283a 	ret
81101c5c:	017fff04 	movi	r5,-4
81101c60:	414a703a 	and	r5,r8,r5
81101c64:	814d883a 	add	r6,r16,r5
81101c68:	30c01f16 	blt	r6,r3,81101ce8 <_realloc_r+0x22c>
81101c6c:	20800317 	ldw	r2,12(r4)
81101c70:	20c00217 	ldw	r3,8(r4)
81101c74:	a825883a 	mov	r18,r21
81101c78:	3021883a 	mov	r16,r6
81101c7c:	18800315 	stw	r2,12(r3)
81101c80:	10c00215 	stw	r3,8(r2)
81101c84:	003fdb06 	br	81101bf4 <__reset+0xfb0e1bf4>
81101c88:	00800304 	movi	r2,12
81101c8c:	a0800015 	stw	r2,0(r20)
81101c90:	0005883a 	mov	r2,zero
81101c94:	003fe506 	br	81101c2c <__reset+0xfb0e1c2c>
81101c98:	98c00117 	ldw	r3,4(r19)
81101c9c:	9c4b883a 	add	r5,r19,r17
81101ca0:	11000054 	ori	r4,r2,1
81101ca4:	18c0004c 	andi	r3,r3,1
81101ca8:	1c62b03a 	or	r17,r3,r17
81101cac:	9c400115 	stw	r17,4(r19)
81101cb0:	29000115 	stw	r4,4(r5)
81101cb4:	2885883a 	add	r2,r5,r2
81101cb8:	10c00117 	ldw	r3,4(r2)
81101cbc:	29400204 	addi	r5,r5,8
81101cc0:	a009883a 	mov	r4,r20
81101cc4:	18c00054 	ori	r3,r3,1
81101cc8:	10c00115 	stw	r3,4(r2)
81101ccc:	11028880 	call	81102888 <_free_r>
81101cd0:	003fd306 	br	81101c20 <__reset+0xfb0e1c20>
81101cd4:	017fff04 	movi	r5,-4
81101cd8:	414a703a 	and	r5,r8,r5
81101cdc:	89800404 	addi	r6,r17,16
81101ce0:	8151883a 	add	r8,r16,r5
81101ce4:	4180590e 	bge	r8,r6,81101e4c <_realloc_r+0x390>
81101ce8:	1080004c 	andi	r2,r2,1
81101cec:	103f9e1e 	bne	r2,zero,81101b68 <__reset+0xfb0e1b68>
81101cf0:	adbffe17 	ldw	r22,-8(r21)
81101cf4:	00bfff04 	movi	r2,-4
81101cf8:	9dadc83a 	sub	r22,r19,r22
81101cfc:	b1800117 	ldw	r6,4(r22)
81101d00:	3084703a 	and	r2,r6,r2
81101d04:	20002026 	beq	r4,zero,81101d88 <_realloc_r+0x2cc>
81101d08:	80af883a 	add	r23,r16,r2
81101d0c:	b96f883a 	add	r23,r23,r5
81101d10:	21c05f26 	beq	r4,r7,81101e90 <_realloc_r+0x3d4>
81101d14:	b8c01c16 	blt	r23,r3,81101d88 <_realloc_r+0x2cc>
81101d18:	20800317 	ldw	r2,12(r4)
81101d1c:	20c00217 	ldw	r3,8(r4)
81101d20:	81bfff04 	addi	r6,r16,-4
81101d24:	01000904 	movi	r4,36
81101d28:	18800315 	stw	r2,12(r3)
81101d2c:	10c00215 	stw	r3,8(r2)
81101d30:	b0c00217 	ldw	r3,8(r22)
81101d34:	b0800317 	ldw	r2,12(r22)
81101d38:	b4800204 	addi	r18,r22,8
81101d3c:	18800315 	stw	r2,12(r3)
81101d40:	10c00215 	stw	r3,8(r2)
81101d44:	21801b36 	bltu	r4,r6,81101db4 <_realloc_r+0x2f8>
81101d48:	008004c4 	movi	r2,19
81101d4c:	1180352e 	bgeu	r2,r6,81101e24 <_realloc_r+0x368>
81101d50:	a8800017 	ldw	r2,0(r21)
81101d54:	b0800215 	stw	r2,8(r22)
81101d58:	a8800117 	ldw	r2,4(r21)
81101d5c:	b0800315 	stw	r2,12(r22)
81101d60:	008006c4 	movi	r2,27
81101d64:	11807f36 	bltu	r2,r6,81101f64 <_realloc_r+0x4a8>
81101d68:	b0800404 	addi	r2,r22,16
81101d6c:	ad400204 	addi	r21,r21,8
81101d70:	00002d06 	br	81101e28 <_realloc_r+0x36c>
81101d74:	adbffe17 	ldw	r22,-8(r21)
81101d78:	00bfff04 	movi	r2,-4
81101d7c:	9dadc83a 	sub	r22,r19,r22
81101d80:	b1000117 	ldw	r4,4(r22)
81101d84:	2084703a 	and	r2,r4,r2
81101d88:	b03f7726 	beq	r22,zero,81101b68 <__reset+0xfb0e1b68>
81101d8c:	80af883a 	add	r23,r16,r2
81101d90:	b8ff7516 	blt	r23,r3,81101b68 <__reset+0xfb0e1b68>
81101d94:	b0800317 	ldw	r2,12(r22)
81101d98:	b0c00217 	ldw	r3,8(r22)
81101d9c:	81bfff04 	addi	r6,r16,-4
81101da0:	01000904 	movi	r4,36
81101da4:	18800315 	stw	r2,12(r3)
81101da8:	10c00215 	stw	r3,8(r2)
81101dac:	b4800204 	addi	r18,r22,8
81101db0:	21bfe52e 	bgeu	r4,r6,81101d48 <__reset+0xfb0e1d48>
81101db4:	a80b883a 	mov	r5,r21
81101db8:	9009883a 	mov	r4,r18
81101dbc:	11018380 	call	81101838 <memmove>
81101dc0:	b821883a 	mov	r16,r23
81101dc4:	b027883a 	mov	r19,r22
81101dc8:	003f8a06 	br	81101bf4 <__reset+0xfb0e1bf4>
81101dcc:	300b883a 	mov	r5,r6
81101dd0:	dfc00917 	ldw	ra,36(sp)
81101dd4:	df000817 	ldw	fp,32(sp)
81101dd8:	ddc00717 	ldw	r23,28(sp)
81101ddc:	dd800617 	ldw	r22,24(sp)
81101de0:	dd400517 	ldw	r21,20(sp)
81101de4:	dd000417 	ldw	r20,16(sp)
81101de8:	dcc00317 	ldw	r19,12(sp)
81101dec:	dc800217 	ldw	r18,8(sp)
81101df0:	dc400117 	ldw	r17,4(sp)
81101df4:	dc000017 	ldw	r16,0(sp)
81101df8:	dec00a04 	addi	sp,sp,40
81101dfc:	1100e001 	jmpi	81100e00 <_malloc_r>
81101e00:	a8c00017 	ldw	r3,0(r21)
81101e04:	90c00015 	stw	r3,0(r18)
81101e08:	a8c00117 	ldw	r3,4(r21)
81101e0c:	90c00115 	stw	r3,4(r18)
81101e10:	00c006c4 	movi	r3,27
81101e14:	19804536 	bltu	r3,r6,81101f2c <_realloc_r+0x470>
81101e18:	90800204 	addi	r2,r18,8
81101e1c:	a8c00204 	addi	r3,r21,8
81101e20:	003f6306 	br	81101bb0 <__reset+0xfb0e1bb0>
81101e24:	9005883a 	mov	r2,r18
81101e28:	a8c00017 	ldw	r3,0(r21)
81101e2c:	b821883a 	mov	r16,r23
81101e30:	b027883a 	mov	r19,r22
81101e34:	10c00015 	stw	r3,0(r2)
81101e38:	a8c00117 	ldw	r3,4(r21)
81101e3c:	10c00115 	stw	r3,4(r2)
81101e40:	a8c00217 	ldw	r3,8(r21)
81101e44:	10c00215 	stw	r3,8(r2)
81101e48:	003f6a06 	br	81101bf4 <__reset+0xfb0e1bf4>
81101e4c:	9c67883a 	add	r19,r19,r17
81101e50:	4445c83a 	sub	r2,r8,r17
81101e54:	e4c00215 	stw	r19,8(fp)
81101e58:	10800054 	ori	r2,r2,1
81101e5c:	98800115 	stw	r2,4(r19)
81101e60:	a8bfff17 	ldw	r2,-4(r21)
81101e64:	a009883a 	mov	r4,r20
81101e68:	1080004c 	andi	r2,r2,1
81101e6c:	1462b03a 	or	r17,r2,r17
81101e70:	ac7fff15 	stw	r17,-4(r21)
81101e74:	110352c0 	call	8110352c <__malloc_unlock>
81101e78:	a805883a 	mov	r2,r21
81101e7c:	003f6b06 	br	81101c2c <__reset+0xfb0e1c2c>
81101e80:	a80b883a 	mov	r5,r21
81101e84:	9009883a 	mov	r4,r18
81101e88:	11018380 	call	81101838 <memmove>
81101e8c:	003f4e06 	br	81101bc8 <__reset+0xfb0e1bc8>
81101e90:	89000404 	addi	r4,r17,16
81101e94:	b93fbc16 	blt	r23,r4,81101d88 <__reset+0xfb0e1d88>
81101e98:	b0800317 	ldw	r2,12(r22)
81101e9c:	b0c00217 	ldw	r3,8(r22)
81101ea0:	81bfff04 	addi	r6,r16,-4
81101ea4:	01000904 	movi	r4,36
81101ea8:	18800315 	stw	r2,12(r3)
81101eac:	10c00215 	stw	r3,8(r2)
81101eb0:	b4800204 	addi	r18,r22,8
81101eb4:	21804336 	bltu	r4,r6,81101fc4 <_realloc_r+0x508>
81101eb8:	008004c4 	movi	r2,19
81101ebc:	11803f2e 	bgeu	r2,r6,81101fbc <_realloc_r+0x500>
81101ec0:	a8800017 	ldw	r2,0(r21)
81101ec4:	b0800215 	stw	r2,8(r22)
81101ec8:	a8800117 	ldw	r2,4(r21)
81101ecc:	b0800315 	stw	r2,12(r22)
81101ed0:	008006c4 	movi	r2,27
81101ed4:	11803f36 	bltu	r2,r6,81101fd4 <_realloc_r+0x518>
81101ed8:	b0800404 	addi	r2,r22,16
81101edc:	ad400204 	addi	r21,r21,8
81101ee0:	a8c00017 	ldw	r3,0(r21)
81101ee4:	10c00015 	stw	r3,0(r2)
81101ee8:	a8c00117 	ldw	r3,4(r21)
81101eec:	10c00115 	stw	r3,4(r2)
81101ef0:	a8c00217 	ldw	r3,8(r21)
81101ef4:	10c00215 	stw	r3,8(r2)
81101ef8:	b447883a 	add	r3,r22,r17
81101efc:	bc45c83a 	sub	r2,r23,r17
81101f00:	e0c00215 	stw	r3,8(fp)
81101f04:	10800054 	ori	r2,r2,1
81101f08:	18800115 	stw	r2,4(r3)
81101f0c:	b0800117 	ldw	r2,4(r22)
81101f10:	a009883a 	mov	r4,r20
81101f14:	1080004c 	andi	r2,r2,1
81101f18:	1462b03a 	or	r17,r2,r17
81101f1c:	b4400115 	stw	r17,4(r22)
81101f20:	110352c0 	call	8110352c <__malloc_unlock>
81101f24:	9005883a 	mov	r2,r18
81101f28:	003f4006 	br	81101c2c <__reset+0xfb0e1c2c>
81101f2c:	a8c00217 	ldw	r3,8(r21)
81101f30:	90c00215 	stw	r3,8(r18)
81101f34:	a8c00317 	ldw	r3,12(r21)
81101f38:	90c00315 	stw	r3,12(r18)
81101f3c:	30801126 	beq	r6,r2,81101f84 <_realloc_r+0x4c8>
81101f40:	90800404 	addi	r2,r18,16
81101f44:	a8c00404 	addi	r3,r21,16
81101f48:	003f1906 	br	81101bb0 <__reset+0xfb0e1bb0>
81101f4c:	90ffff17 	ldw	r3,-4(r18)
81101f50:	00bfff04 	movi	r2,-4
81101f54:	a825883a 	mov	r18,r21
81101f58:	1884703a 	and	r2,r3,r2
81101f5c:	80a1883a 	add	r16,r16,r2
81101f60:	003f2406 	br	81101bf4 <__reset+0xfb0e1bf4>
81101f64:	a8800217 	ldw	r2,8(r21)
81101f68:	b0800415 	stw	r2,16(r22)
81101f6c:	a8800317 	ldw	r2,12(r21)
81101f70:	b0800515 	stw	r2,20(r22)
81101f74:	31000a26 	beq	r6,r4,81101fa0 <_realloc_r+0x4e4>
81101f78:	b0800604 	addi	r2,r22,24
81101f7c:	ad400404 	addi	r21,r21,16
81101f80:	003fa906 	br	81101e28 <__reset+0xfb0e1e28>
81101f84:	a9000417 	ldw	r4,16(r21)
81101f88:	90800604 	addi	r2,r18,24
81101f8c:	a8c00604 	addi	r3,r21,24
81101f90:	91000415 	stw	r4,16(r18)
81101f94:	a9000517 	ldw	r4,20(r21)
81101f98:	91000515 	stw	r4,20(r18)
81101f9c:	003f0406 	br	81101bb0 <__reset+0xfb0e1bb0>
81101fa0:	a8c00417 	ldw	r3,16(r21)
81101fa4:	ad400604 	addi	r21,r21,24
81101fa8:	b0800804 	addi	r2,r22,32
81101fac:	b0c00615 	stw	r3,24(r22)
81101fb0:	a8ffff17 	ldw	r3,-4(r21)
81101fb4:	b0c00715 	stw	r3,28(r22)
81101fb8:	003f9b06 	br	81101e28 <__reset+0xfb0e1e28>
81101fbc:	9005883a 	mov	r2,r18
81101fc0:	003fc706 	br	81101ee0 <__reset+0xfb0e1ee0>
81101fc4:	a80b883a 	mov	r5,r21
81101fc8:	9009883a 	mov	r4,r18
81101fcc:	11018380 	call	81101838 <memmove>
81101fd0:	003fc906 	br	81101ef8 <__reset+0xfb0e1ef8>
81101fd4:	a8800217 	ldw	r2,8(r21)
81101fd8:	b0800415 	stw	r2,16(r22)
81101fdc:	a8800317 	ldw	r2,12(r21)
81101fe0:	b0800515 	stw	r2,20(r22)
81101fe4:	31000726 	beq	r6,r4,81102004 <_realloc_r+0x548>
81101fe8:	b0800604 	addi	r2,r22,24
81101fec:	ad400404 	addi	r21,r21,16
81101ff0:	003fbb06 	br	81101ee0 <__reset+0xfb0e1ee0>
81101ff4:	a009883a 	mov	r4,r20
81101ff8:	110352c0 	call	8110352c <__malloc_unlock>
81101ffc:	0005883a 	mov	r2,zero
81102000:	003f0a06 	br	81101c2c <__reset+0xfb0e1c2c>
81102004:	a8c00417 	ldw	r3,16(r21)
81102008:	ad400604 	addi	r21,r21,24
8110200c:	b0800804 	addi	r2,r22,32
81102010:	b0c00615 	stw	r3,24(r22)
81102014:	a8ffff17 	ldw	r3,-4(r21)
81102018:	b0c00715 	stw	r3,28(r22)
8110201c:	003fb006 	br	81101ee0 <__reset+0xfb0e1ee0>

81102020 <_sbrk_r>:
81102020:	defffd04 	addi	sp,sp,-12
81102024:	dc000015 	stw	r16,0(sp)
81102028:	04204474 	movhi	r16,33041
8110202c:	dc400115 	stw	r17,4(sp)
81102030:	8429b804 	addi	r16,r16,-22816
81102034:	2023883a 	mov	r17,r4
81102038:	2809883a 	mov	r4,r5
8110203c:	dfc00215 	stw	ra,8(sp)
81102040:	80000015 	stw	zero,0(r16)
81102044:	11036ec0 	call	811036ec <sbrk>
81102048:	00ffffc4 	movi	r3,-1
8110204c:	10c00526 	beq	r2,r3,81102064 <_sbrk_r+0x44>
81102050:	dfc00217 	ldw	ra,8(sp)
81102054:	dc400117 	ldw	r17,4(sp)
81102058:	dc000017 	ldw	r16,0(sp)
8110205c:	dec00304 	addi	sp,sp,12
81102060:	f800283a 	ret
81102064:	80c00017 	ldw	r3,0(r16)
81102068:	183ff926 	beq	r3,zero,81102050 <__reset+0xfb0e2050>
8110206c:	88c00015 	stw	r3,0(r17)
81102070:	003ff706 	br	81102050 <__reset+0xfb0e2050>

81102074 <__sread>:
81102074:	defffe04 	addi	sp,sp,-8
81102078:	dc000015 	stw	r16,0(sp)
8110207c:	2821883a 	mov	r16,r5
81102080:	2940038f 	ldh	r5,14(r5)
81102084:	dfc00115 	stw	ra,4(sp)
81102088:	1102db40 	call	81102db4 <_read_r>
8110208c:	10000716 	blt	r2,zero,811020ac <__sread+0x38>
81102090:	80c01417 	ldw	r3,80(r16)
81102094:	1887883a 	add	r3,r3,r2
81102098:	80c01415 	stw	r3,80(r16)
8110209c:	dfc00117 	ldw	ra,4(sp)
811020a0:	dc000017 	ldw	r16,0(sp)
811020a4:	dec00204 	addi	sp,sp,8
811020a8:	f800283a 	ret
811020ac:	80c0030b 	ldhu	r3,12(r16)
811020b0:	18fbffcc 	andi	r3,r3,61439
811020b4:	80c0030d 	sth	r3,12(r16)
811020b8:	dfc00117 	ldw	ra,4(sp)
811020bc:	dc000017 	ldw	r16,0(sp)
811020c0:	dec00204 	addi	sp,sp,8
811020c4:	f800283a 	ret

811020c8 <__seofread>:
811020c8:	0005883a 	mov	r2,zero
811020cc:	f800283a 	ret

811020d0 <__swrite>:
811020d0:	2880030b 	ldhu	r2,12(r5)
811020d4:	defffb04 	addi	sp,sp,-20
811020d8:	dcc00315 	stw	r19,12(sp)
811020dc:	dc800215 	stw	r18,8(sp)
811020e0:	dc400115 	stw	r17,4(sp)
811020e4:	dc000015 	stw	r16,0(sp)
811020e8:	dfc00415 	stw	ra,16(sp)
811020ec:	10c0400c 	andi	r3,r2,256
811020f0:	2821883a 	mov	r16,r5
811020f4:	2023883a 	mov	r17,r4
811020f8:	3025883a 	mov	r18,r6
811020fc:	3827883a 	mov	r19,r7
81102100:	18000526 	beq	r3,zero,81102118 <__swrite+0x48>
81102104:	2940038f 	ldh	r5,14(r5)
81102108:	01c00084 	movi	r7,2
8110210c:	000d883a 	mov	r6,zero
81102110:	1102b980 	call	81102b98 <_lseek_r>
81102114:	8080030b 	ldhu	r2,12(r16)
81102118:	8140038f 	ldh	r5,14(r16)
8110211c:	10bbffcc 	andi	r2,r2,61439
81102120:	980f883a 	mov	r7,r19
81102124:	900d883a 	mov	r6,r18
81102128:	8809883a 	mov	r4,r17
8110212c:	8080030d 	sth	r2,12(r16)
81102130:	dfc00417 	ldw	ra,16(sp)
81102134:	dcc00317 	ldw	r19,12(sp)
81102138:	dc800217 	ldw	r18,8(sp)
8110213c:	dc400117 	ldw	r17,4(sp)
81102140:	dc000017 	ldw	r16,0(sp)
81102144:	dec00504 	addi	sp,sp,20
81102148:	11021b01 	jmpi	811021b0 <_write_r>

8110214c <__sseek>:
8110214c:	defffe04 	addi	sp,sp,-8
81102150:	dc000015 	stw	r16,0(sp)
81102154:	2821883a 	mov	r16,r5
81102158:	2940038f 	ldh	r5,14(r5)
8110215c:	dfc00115 	stw	ra,4(sp)
81102160:	1102b980 	call	81102b98 <_lseek_r>
81102164:	00ffffc4 	movi	r3,-1
81102168:	10c00826 	beq	r2,r3,8110218c <__sseek+0x40>
8110216c:	80c0030b 	ldhu	r3,12(r16)
81102170:	80801415 	stw	r2,80(r16)
81102174:	18c40014 	ori	r3,r3,4096
81102178:	80c0030d 	sth	r3,12(r16)
8110217c:	dfc00117 	ldw	ra,4(sp)
81102180:	dc000017 	ldw	r16,0(sp)
81102184:	dec00204 	addi	sp,sp,8
81102188:	f800283a 	ret
8110218c:	80c0030b 	ldhu	r3,12(r16)
81102190:	18fbffcc 	andi	r3,r3,61439
81102194:	80c0030d 	sth	r3,12(r16)
81102198:	dfc00117 	ldw	ra,4(sp)
8110219c:	dc000017 	ldw	r16,0(sp)
811021a0:	dec00204 	addi	sp,sp,8
811021a4:	f800283a 	ret

811021a8 <__sclose>:
811021a8:	2940038f 	ldh	r5,14(r5)
811021ac:	11023641 	jmpi	81102364 <_close_r>

811021b0 <_write_r>:
811021b0:	defffd04 	addi	sp,sp,-12
811021b4:	2805883a 	mov	r2,r5
811021b8:	dc000015 	stw	r16,0(sp)
811021bc:	04204474 	movhi	r16,33041
811021c0:	dc400115 	stw	r17,4(sp)
811021c4:	300b883a 	mov	r5,r6
811021c8:	8429b804 	addi	r16,r16,-22816
811021cc:	2023883a 	mov	r17,r4
811021d0:	380d883a 	mov	r6,r7
811021d4:	1009883a 	mov	r4,r2
811021d8:	dfc00215 	stw	ra,8(sp)
811021dc:	80000015 	stw	zero,0(r16)
811021e0:	11037d80 	call	811037d8 <write>
811021e4:	00ffffc4 	movi	r3,-1
811021e8:	10c00526 	beq	r2,r3,81102200 <_write_r+0x50>
811021ec:	dfc00217 	ldw	ra,8(sp)
811021f0:	dc400117 	ldw	r17,4(sp)
811021f4:	dc000017 	ldw	r16,0(sp)
811021f8:	dec00304 	addi	sp,sp,12
811021fc:	f800283a 	ret
81102200:	80c00017 	ldw	r3,0(r16)
81102204:	183ff926 	beq	r3,zero,811021ec <__reset+0xfb0e21ec>
81102208:	88c00015 	stw	r3,0(r17)
8110220c:	003ff706 	br	811021ec <__reset+0xfb0e21ec>

81102210 <__swsetup_r>:
81102210:	00a04474 	movhi	r2,33041
81102214:	defffd04 	addi	sp,sp,-12
81102218:	10a9a404 	addi	r2,r2,-22896
8110221c:	dc400115 	stw	r17,4(sp)
81102220:	2023883a 	mov	r17,r4
81102224:	11000017 	ldw	r4,0(r2)
81102228:	dc000015 	stw	r16,0(sp)
8110222c:	dfc00215 	stw	ra,8(sp)
81102230:	2821883a 	mov	r16,r5
81102234:	20000226 	beq	r4,zero,81102240 <__swsetup_r+0x30>
81102238:	20800e17 	ldw	r2,56(r4)
8110223c:	10003126 	beq	r2,zero,81102304 <__swsetup_r+0xf4>
81102240:	8080030b 	ldhu	r2,12(r16)
81102244:	10c0020c 	andi	r3,r2,8
81102248:	1009883a 	mov	r4,r2
8110224c:	18000f26 	beq	r3,zero,8110228c <__swsetup_r+0x7c>
81102250:	80c00417 	ldw	r3,16(r16)
81102254:	18001526 	beq	r3,zero,811022ac <__swsetup_r+0x9c>
81102258:	1100004c 	andi	r4,r2,1
8110225c:	20001c1e 	bne	r4,zero,811022d0 <__swsetup_r+0xc0>
81102260:	1080008c 	andi	r2,r2,2
81102264:	1000291e 	bne	r2,zero,8110230c <__swsetup_r+0xfc>
81102268:	80800517 	ldw	r2,20(r16)
8110226c:	80800215 	stw	r2,8(r16)
81102270:	18001c26 	beq	r3,zero,811022e4 <__swsetup_r+0xd4>
81102274:	0005883a 	mov	r2,zero
81102278:	dfc00217 	ldw	ra,8(sp)
8110227c:	dc400117 	ldw	r17,4(sp)
81102280:	dc000017 	ldw	r16,0(sp)
81102284:	dec00304 	addi	sp,sp,12
81102288:	f800283a 	ret
8110228c:	2080040c 	andi	r2,r4,16
81102290:	10002e26 	beq	r2,zero,8110234c <__swsetup_r+0x13c>
81102294:	2080010c 	andi	r2,r4,4
81102298:	10001e1e 	bne	r2,zero,81102314 <__swsetup_r+0x104>
8110229c:	80c00417 	ldw	r3,16(r16)
811022a0:	20800214 	ori	r2,r4,8
811022a4:	8080030d 	sth	r2,12(r16)
811022a8:	183feb1e 	bne	r3,zero,81102258 <__reset+0xfb0e2258>
811022ac:	1100a00c 	andi	r4,r2,640
811022b0:	01408004 	movi	r5,512
811022b4:	217fe826 	beq	r4,r5,81102258 <__reset+0xfb0e2258>
811022b8:	800b883a 	mov	r5,r16
811022bc:	8809883a 	mov	r4,r17
811022c0:	1102bf80 	call	81102bf8 <__smakebuf_r>
811022c4:	8080030b 	ldhu	r2,12(r16)
811022c8:	80c00417 	ldw	r3,16(r16)
811022cc:	003fe206 	br	81102258 <__reset+0xfb0e2258>
811022d0:	80800517 	ldw	r2,20(r16)
811022d4:	80000215 	stw	zero,8(r16)
811022d8:	0085c83a 	sub	r2,zero,r2
811022dc:	80800615 	stw	r2,24(r16)
811022e0:	183fe41e 	bne	r3,zero,81102274 <__reset+0xfb0e2274>
811022e4:	80c0030b 	ldhu	r3,12(r16)
811022e8:	0005883a 	mov	r2,zero
811022ec:	1900200c 	andi	r4,r3,128
811022f0:	203fe126 	beq	r4,zero,81102278 <__reset+0xfb0e2278>
811022f4:	18c01014 	ori	r3,r3,64
811022f8:	80c0030d 	sth	r3,12(r16)
811022fc:	00bfffc4 	movi	r2,-1
81102300:	003fdd06 	br	81102278 <__reset+0xfb0e2278>
81102304:	110076c0 	call	8110076c <__sinit>
81102308:	003fcd06 	br	81102240 <__reset+0xfb0e2240>
8110230c:	0005883a 	mov	r2,zero
81102310:	003fd606 	br	8110226c <__reset+0xfb0e226c>
81102314:	81400c17 	ldw	r5,48(r16)
81102318:	28000626 	beq	r5,zero,81102334 <__swsetup_r+0x124>
8110231c:	80801004 	addi	r2,r16,64
81102320:	28800326 	beq	r5,r2,81102330 <__swsetup_r+0x120>
81102324:	8809883a 	mov	r4,r17
81102328:	11028880 	call	81102888 <_free_r>
8110232c:	8100030b 	ldhu	r4,12(r16)
81102330:	80000c15 	stw	zero,48(r16)
81102334:	80c00417 	ldw	r3,16(r16)
81102338:	00bff6c4 	movi	r2,-37
8110233c:	1108703a 	and	r4,r2,r4
81102340:	80000115 	stw	zero,4(r16)
81102344:	80c00015 	stw	r3,0(r16)
81102348:	003fd506 	br	811022a0 <__reset+0xfb0e22a0>
8110234c:	00800244 	movi	r2,9
81102350:	88800015 	stw	r2,0(r17)
81102354:	20801014 	ori	r2,r4,64
81102358:	8080030d 	sth	r2,12(r16)
8110235c:	00bfffc4 	movi	r2,-1
81102360:	003fc506 	br	81102278 <__reset+0xfb0e2278>

81102364 <_close_r>:
81102364:	defffd04 	addi	sp,sp,-12
81102368:	dc000015 	stw	r16,0(sp)
8110236c:	04204474 	movhi	r16,33041
81102370:	dc400115 	stw	r17,4(sp)
81102374:	8429b804 	addi	r16,r16,-22816
81102378:	2023883a 	mov	r17,r4
8110237c:	2809883a 	mov	r4,r5
81102380:	dfc00215 	stw	ra,8(sp)
81102384:	80000015 	stw	zero,0(r16)
81102388:	11030b40 	call	811030b4 <close>
8110238c:	00ffffc4 	movi	r3,-1
81102390:	10c00526 	beq	r2,r3,811023a8 <_close_r+0x44>
81102394:	dfc00217 	ldw	ra,8(sp)
81102398:	dc400117 	ldw	r17,4(sp)
8110239c:	dc000017 	ldw	r16,0(sp)
811023a0:	dec00304 	addi	sp,sp,12
811023a4:	f800283a 	ret
811023a8:	80c00017 	ldw	r3,0(r16)
811023ac:	183ff926 	beq	r3,zero,81102394 <__reset+0xfb0e2394>
811023b0:	88c00015 	stw	r3,0(r17)
811023b4:	003ff706 	br	81102394 <__reset+0xfb0e2394>

811023b8 <_fclose_r>:
811023b8:	28003926 	beq	r5,zero,811024a0 <_fclose_r+0xe8>
811023bc:	defffc04 	addi	sp,sp,-16
811023c0:	dc400115 	stw	r17,4(sp)
811023c4:	dc000015 	stw	r16,0(sp)
811023c8:	dfc00315 	stw	ra,12(sp)
811023cc:	dc800215 	stw	r18,8(sp)
811023d0:	2023883a 	mov	r17,r4
811023d4:	2821883a 	mov	r16,r5
811023d8:	20000226 	beq	r4,zero,811023e4 <_fclose_r+0x2c>
811023dc:	20800e17 	ldw	r2,56(r4)
811023e0:	10002726 	beq	r2,zero,81102480 <_fclose_r+0xc8>
811023e4:	8080030f 	ldh	r2,12(r16)
811023e8:	1000071e 	bne	r2,zero,81102408 <_fclose_r+0x50>
811023ec:	0005883a 	mov	r2,zero
811023f0:	dfc00317 	ldw	ra,12(sp)
811023f4:	dc800217 	ldw	r18,8(sp)
811023f8:	dc400117 	ldw	r17,4(sp)
811023fc:	dc000017 	ldw	r16,0(sp)
81102400:	dec00404 	addi	sp,sp,16
81102404:	f800283a 	ret
81102408:	800b883a 	mov	r5,r16
8110240c:	8809883a 	mov	r4,r17
81102410:	11024bc0 	call	811024bc <__sflush_r>
81102414:	1025883a 	mov	r18,r2
81102418:	80800b17 	ldw	r2,44(r16)
8110241c:	10000426 	beq	r2,zero,81102430 <_fclose_r+0x78>
81102420:	81400717 	ldw	r5,28(r16)
81102424:	8809883a 	mov	r4,r17
81102428:	103ee83a 	callr	r2
8110242c:	10001616 	blt	r2,zero,81102488 <_fclose_r+0xd0>
81102430:	8080030b 	ldhu	r2,12(r16)
81102434:	1080200c 	andi	r2,r2,128
81102438:	1000151e 	bne	r2,zero,81102490 <_fclose_r+0xd8>
8110243c:	81400c17 	ldw	r5,48(r16)
81102440:	28000526 	beq	r5,zero,81102458 <_fclose_r+0xa0>
81102444:	80801004 	addi	r2,r16,64
81102448:	28800226 	beq	r5,r2,81102454 <_fclose_r+0x9c>
8110244c:	8809883a 	mov	r4,r17
81102450:	11028880 	call	81102888 <_free_r>
81102454:	80000c15 	stw	zero,48(r16)
81102458:	81401117 	ldw	r5,68(r16)
8110245c:	28000326 	beq	r5,zero,8110246c <_fclose_r+0xb4>
81102460:	8809883a 	mov	r4,r17
81102464:	11028880 	call	81102888 <_free_r>
81102468:	80001115 	stw	zero,68(r16)
8110246c:	110077c0 	call	8110077c <__sfp_lock_acquire>
81102470:	8000030d 	sth	zero,12(r16)
81102474:	11007800 	call	81100780 <__sfp_lock_release>
81102478:	9005883a 	mov	r2,r18
8110247c:	003fdc06 	br	811023f0 <__reset+0xfb0e23f0>
81102480:	110076c0 	call	8110076c <__sinit>
81102484:	003fd706 	br	811023e4 <__reset+0xfb0e23e4>
81102488:	04bfffc4 	movi	r18,-1
8110248c:	003fe806 	br	81102430 <__reset+0xfb0e2430>
81102490:	81400417 	ldw	r5,16(r16)
81102494:	8809883a 	mov	r4,r17
81102498:	11028880 	call	81102888 <_free_r>
8110249c:	003fe706 	br	8110243c <__reset+0xfb0e243c>
811024a0:	0005883a 	mov	r2,zero
811024a4:	f800283a 	ret

811024a8 <fclose>:
811024a8:	00a04474 	movhi	r2,33041
811024ac:	10a9a404 	addi	r2,r2,-22896
811024b0:	200b883a 	mov	r5,r4
811024b4:	11000017 	ldw	r4,0(r2)
811024b8:	11023b81 	jmpi	811023b8 <_fclose_r>

811024bc <__sflush_r>:
811024bc:	2880030b 	ldhu	r2,12(r5)
811024c0:	defffb04 	addi	sp,sp,-20
811024c4:	dcc00315 	stw	r19,12(sp)
811024c8:	dc400115 	stw	r17,4(sp)
811024cc:	dfc00415 	stw	ra,16(sp)
811024d0:	dc800215 	stw	r18,8(sp)
811024d4:	dc000015 	stw	r16,0(sp)
811024d8:	10c0020c 	andi	r3,r2,8
811024dc:	2823883a 	mov	r17,r5
811024e0:	2027883a 	mov	r19,r4
811024e4:	1800311e 	bne	r3,zero,811025ac <__sflush_r+0xf0>
811024e8:	28c00117 	ldw	r3,4(r5)
811024ec:	10820014 	ori	r2,r2,2048
811024f0:	2880030d 	sth	r2,12(r5)
811024f4:	00c04b0e 	bge	zero,r3,81102624 <__sflush_r+0x168>
811024f8:	8a000a17 	ldw	r8,40(r17)
811024fc:	40002326 	beq	r8,zero,8110258c <__sflush_r+0xd0>
81102500:	9c000017 	ldw	r16,0(r19)
81102504:	10c4000c 	andi	r3,r2,4096
81102508:	98000015 	stw	zero,0(r19)
8110250c:	18004826 	beq	r3,zero,81102630 <__sflush_r+0x174>
81102510:	89801417 	ldw	r6,80(r17)
81102514:	10c0010c 	andi	r3,r2,4
81102518:	18000626 	beq	r3,zero,81102534 <__sflush_r+0x78>
8110251c:	88c00117 	ldw	r3,4(r17)
81102520:	88800c17 	ldw	r2,48(r17)
81102524:	30cdc83a 	sub	r6,r6,r3
81102528:	10000226 	beq	r2,zero,81102534 <__sflush_r+0x78>
8110252c:	88800f17 	ldw	r2,60(r17)
81102530:	308dc83a 	sub	r6,r6,r2
81102534:	89400717 	ldw	r5,28(r17)
81102538:	000f883a 	mov	r7,zero
8110253c:	9809883a 	mov	r4,r19
81102540:	403ee83a 	callr	r8
81102544:	00ffffc4 	movi	r3,-1
81102548:	10c04426 	beq	r2,r3,8110265c <__sflush_r+0x1a0>
8110254c:	88c0030b 	ldhu	r3,12(r17)
81102550:	89000417 	ldw	r4,16(r17)
81102554:	88000115 	stw	zero,4(r17)
81102558:	197dffcc 	andi	r5,r3,63487
8110255c:	8940030d 	sth	r5,12(r17)
81102560:	89000015 	stw	r4,0(r17)
81102564:	18c4000c 	andi	r3,r3,4096
81102568:	18002c1e 	bne	r3,zero,8110261c <__sflush_r+0x160>
8110256c:	89400c17 	ldw	r5,48(r17)
81102570:	9c000015 	stw	r16,0(r19)
81102574:	28000526 	beq	r5,zero,8110258c <__sflush_r+0xd0>
81102578:	88801004 	addi	r2,r17,64
8110257c:	28800226 	beq	r5,r2,81102588 <__sflush_r+0xcc>
81102580:	9809883a 	mov	r4,r19
81102584:	11028880 	call	81102888 <_free_r>
81102588:	88000c15 	stw	zero,48(r17)
8110258c:	0005883a 	mov	r2,zero
81102590:	dfc00417 	ldw	ra,16(sp)
81102594:	dcc00317 	ldw	r19,12(sp)
81102598:	dc800217 	ldw	r18,8(sp)
8110259c:	dc400117 	ldw	r17,4(sp)
811025a0:	dc000017 	ldw	r16,0(sp)
811025a4:	dec00504 	addi	sp,sp,20
811025a8:	f800283a 	ret
811025ac:	2c800417 	ldw	r18,16(r5)
811025b0:	903ff626 	beq	r18,zero,8110258c <__reset+0xfb0e258c>
811025b4:	2c000017 	ldw	r16,0(r5)
811025b8:	108000cc 	andi	r2,r2,3
811025bc:	2c800015 	stw	r18,0(r5)
811025c0:	84a1c83a 	sub	r16,r16,r18
811025c4:	1000131e 	bne	r2,zero,81102614 <__sflush_r+0x158>
811025c8:	28800517 	ldw	r2,20(r5)
811025cc:	88800215 	stw	r2,8(r17)
811025d0:	04000316 	blt	zero,r16,811025e0 <__sflush_r+0x124>
811025d4:	003fed06 	br	8110258c <__reset+0xfb0e258c>
811025d8:	90a5883a 	add	r18,r18,r2
811025dc:	043feb0e 	bge	zero,r16,8110258c <__reset+0xfb0e258c>
811025e0:	88800917 	ldw	r2,36(r17)
811025e4:	89400717 	ldw	r5,28(r17)
811025e8:	800f883a 	mov	r7,r16
811025ec:	900d883a 	mov	r6,r18
811025f0:	9809883a 	mov	r4,r19
811025f4:	103ee83a 	callr	r2
811025f8:	80a1c83a 	sub	r16,r16,r2
811025fc:	00bff616 	blt	zero,r2,811025d8 <__reset+0xfb0e25d8>
81102600:	88c0030b 	ldhu	r3,12(r17)
81102604:	00bfffc4 	movi	r2,-1
81102608:	18c01014 	ori	r3,r3,64
8110260c:	88c0030d 	sth	r3,12(r17)
81102610:	003fdf06 	br	81102590 <__reset+0xfb0e2590>
81102614:	0005883a 	mov	r2,zero
81102618:	003fec06 	br	811025cc <__reset+0xfb0e25cc>
8110261c:	88801415 	stw	r2,80(r17)
81102620:	003fd206 	br	8110256c <__reset+0xfb0e256c>
81102624:	28c00f17 	ldw	r3,60(r5)
81102628:	00ffb316 	blt	zero,r3,811024f8 <__reset+0xfb0e24f8>
8110262c:	003fd706 	br	8110258c <__reset+0xfb0e258c>
81102630:	89400717 	ldw	r5,28(r17)
81102634:	000d883a 	mov	r6,zero
81102638:	01c00044 	movi	r7,1
8110263c:	9809883a 	mov	r4,r19
81102640:	403ee83a 	callr	r8
81102644:	100d883a 	mov	r6,r2
81102648:	00bfffc4 	movi	r2,-1
8110264c:	30801426 	beq	r6,r2,811026a0 <__sflush_r+0x1e4>
81102650:	8880030b 	ldhu	r2,12(r17)
81102654:	8a000a17 	ldw	r8,40(r17)
81102658:	003fae06 	br	81102514 <__reset+0xfb0e2514>
8110265c:	98c00017 	ldw	r3,0(r19)
81102660:	183fba26 	beq	r3,zero,8110254c <__reset+0xfb0e254c>
81102664:	01000744 	movi	r4,29
81102668:	19000626 	beq	r3,r4,81102684 <__sflush_r+0x1c8>
8110266c:	01000584 	movi	r4,22
81102670:	19000426 	beq	r3,r4,81102684 <__sflush_r+0x1c8>
81102674:	88c0030b 	ldhu	r3,12(r17)
81102678:	18c01014 	ori	r3,r3,64
8110267c:	88c0030d 	sth	r3,12(r17)
81102680:	003fc306 	br	81102590 <__reset+0xfb0e2590>
81102684:	8880030b 	ldhu	r2,12(r17)
81102688:	88c00417 	ldw	r3,16(r17)
8110268c:	88000115 	stw	zero,4(r17)
81102690:	10bdffcc 	andi	r2,r2,63487
81102694:	8880030d 	sth	r2,12(r17)
81102698:	88c00015 	stw	r3,0(r17)
8110269c:	003fb306 	br	8110256c <__reset+0xfb0e256c>
811026a0:	98800017 	ldw	r2,0(r19)
811026a4:	103fea26 	beq	r2,zero,81102650 <__reset+0xfb0e2650>
811026a8:	00c00744 	movi	r3,29
811026ac:	10c00226 	beq	r2,r3,811026b8 <__sflush_r+0x1fc>
811026b0:	00c00584 	movi	r3,22
811026b4:	10c0031e 	bne	r2,r3,811026c4 <__sflush_r+0x208>
811026b8:	9c000015 	stw	r16,0(r19)
811026bc:	0005883a 	mov	r2,zero
811026c0:	003fb306 	br	81102590 <__reset+0xfb0e2590>
811026c4:	88c0030b 	ldhu	r3,12(r17)
811026c8:	3005883a 	mov	r2,r6
811026cc:	18c01014 	ori	r3,r3,64
811026d0:	88c0030d 	sth	r3,12(r17)
811026d4:	003fae06 	br	81102590 <__reset+0xfb0e2590>

811026d8 <_fflush_r>:
811026d8:	defffd04 	addi	sp,sp,-12
811026dc:	dc000115 	stw	r16,4(sp)
811026e0:	dfc00215 	stw	ra,8(sp)
811026e4:	2021883a 	mov	r16,r4
811026e8:	20000226 	beq	r4,zero,811026f4 <_fflush_r+0x1c>
811026ec:	20800e17 	ldw	r2,56(r4)
811026f0:	10000c26 	beq	r2,zero,81102724 <_fflush_r+0x4c>
811026f4:	2880030f 	ldh	r2,12(r5)
811026f8:	1000051e 	bne	r2,zero,81102710 <_fflush_r+0x38>
811026fc:	0005883a 	mov	r2,zero
81102700:	dfc00217 	ldw	ra,8(sp)
81102704:	dc000117 	ldw	r16,4(sp)
81102708:	dec00304 	addi	sp,sp,12
8110270c:	f800283a 	ret
81102710:	8009883a 	mov	r4,r16
81102714:	dfc00217 	ldw	ra,8(sp)
81102718:	dc000117 	ldw	r16,4(sp)
8110271c:	dec00304 	addi	sp,sp,12
81102720:	11024bc1 	jmpi	811024bc <__sflush_r>
81102724:	d9400015 	stw	r5,0(sp)
81102728:	110076c0 	call	8110076c <__sinit>
8110272c:	d9400017 	ldw	r5,0(sp)
81102730:	003ff006 	br	811026f4 <__reset+0xfb0e26f4>

81102734 <fflush>:
81102734:	20000526 	beq	r4,zero,8110274c <fflush+0x18>
81102738:	00a04474 	movhi	r2,33041
8110273c:	10a9a404 	addi	r2,r2,-22896
81102740:	200b883a 	mov	r5,r4
81102744:	11000017 	ldw	r4,0(r2)
81102748:	11026d81 	jmpi	811026d8 <_fflush_r>
8110274c:	00a04474 	movhi	r2,33041
81102750:	10a9a304 	addi	r2,r2,-22900
81102754:	11000017 	ldw	r4,0(r2)
81102758:	01604434 	movhi	r5,33040
8110275c:	2949b604 	addi	r5,r5,9944
81102760:	1100d3c1 	jmpi	81100d3c <_fwalk_reent>

81102764 <_malloc_trim_r>:
81102764:	defffb04 	addi	sp,sp,-20
81102768:	dcc00315 	stw	r19,12(sp)
8110276c:	04e04474 	movhi	r19,33041
81102770:	dc800215 	stw	r18,8(sp)
81102774:	dc400115 	stw	r17,4(sp)
81102778:	dc000015 	stw	r16,0(sp)
8110277c:	dfc00415 	stw	ra,16(sp)
81102780:	2821883a 	mov	r16,r5
81102784:	9ce3ef04 	addi	r19,r19,-28740
81102788:	2025883a 	mov	r18,r4
8110278c:	11035080 	call	81103508 <__malloc_lock>
81102790:	98800217 	ldw	r2,8(r19)
81102794:	14400117 	ldw	r17,4(r2)
81102798:	00bfff04 	movi	r2,-4
8110279c:	88a2703a 	and	r17,r17,r2
811027a0:	8c21c83a 	sub	r16,r17,r16
811027a4:	8403fbc4 	addi	r16,r16,4079
811027a8:	8020d33a 	srli	r16,r16,12
811027ac:	0083ffc4 	movi	r2,4095
811027b0:	843fffc4 	addi	r16,r16,-1
811027b4:	8020933a 	slli	r16,r16,12
811027b8:	1400060e 	bge	r2,r16,811027d4 <_malloc_trim_r+0x70>
811027bc:	000b883a 	mov	r5,zero
811027c0:	9009883a 	mov	r4,r18
811027c4:	11020200 	call	81102020 <_sbrk_r>
811027c8:	98c00217 	ldw	r3,8(r19)
811027cc:	1c47883a 	add	r3,r3,r17
811027d0:	10c00a26 	beq	r2,r3,811027fc <_malloc_trim_r+0x98>
811027d4:	9009883a 	mov	r4,r18
811027d8:	110352c0 	call	8110352c <__malloc_unlock>
811027dc:	0005883a 	mov	r2,zero
811027e0:	dfc00417 	ldw	ra,16(sp)
811027e4:	dcc00317 	ldw	r19,12(sp)
811027e8:	dc800217 	ldw	r18,8(sp)
811027ec:	dc400117 	ldw	r17,4(sp)
811027f0:	dc000017 	ldw	r16,0(sp)
811027f4:	dec00504 	addi	sp,sp,20
811027f8:	f800283a 	ret
811027fc:	040bc83a 	sub	r5,zero,r16
81102800:	9009883a 	mov	r4,r18
81102804:	11020200 	call	81102020 <_sbrk_r>
81102808:	00ffffc4 	movi	r3,-1
8110280c:	10c00d26 	beq	r2,r3,81102844 <_malloc_trim_r+0xe0>
81102810:	00e04474 	movhi	r3,33041
81102814:	18e9c004 	addi	r3,r3,-22784
81102818:	18800017 	ldw	r2,0(r3)
8110281c:	99000217 	ldw	r4,8(r19)
81102820:	8c23c83a 	sub	r17,r17,r16
81102824:	8c400054 	ori	r17,r17,1
81102828:	1421c83a 	sub	r16,r2,r16
8110282c:	24400115 	stw	r17,4(r4)
81102830:	9009883a 	mov	r4,r18
81102834:	1c000015 	stw	r16,0(r3)
81102838:	110352c0 	call	8110352c <__malloc_unlock>
8110283c:	00800044 	movi	r2,1
81102840:	003fe706 	br	811027e0 <__reset+0xfb0e27e0>
81102844:	000b883a 	mov	r5,zero
81102848:	9009883a 	mov	r4,r18
8110284c:	11020200 	call	81102020 <_sbrk_r>
81102850:	99000217 	ldw	r4,8(r19)
81102854:	014003c4 	movi	r5,15
81102858:	1107c83a 	sub	r3,r2,r4
8110285c:	28ffdd0e 	bge	r5,r3,811027d4 <__reset+0xfb0e27d4>
81102860:	01604474 	movhi	r5,33041
81102864:	2969a504 	addi	r5,r5,-22892
81102868:	29400017 	ldw	r5,0(r5)
8110286c:	18c00054 	ori	r3,r3,1
81102870:	20c00115 	stw	r3,4(r4)
81102874:	00e04474 	movhi	r3,33041
81102878:	1145c83a 	sub	r2,r2,r5
8110287c:	18e9c004 	addi	r3,r3,-22784
81102880:	18800015 	stw	r2,0(r3)
81102884:	003fd306 	br	811027d4 <__reset+0xfb0e27d4>

81102888 <_free_r>:
81102888:	28004126 	beq	r5,zero,81102990 <_free_r+0x108>
8110288c:	defffd04 	addi	sp,sp,-12
81102890:	dc400115 	stw	r17,4(sp)
81102894:	dc000015 	stw	r16,0(sp)
81102898:	2023883a 	mov	r17,r4
8110289c:	2821883a 	mov	r16,r5
811028a0:	dfc00215 	stw	ra,8(sp)
811028a4:	11035080 	call	81103508 <__malloc_lock>
811028a8:	81ffff17 	ldw	r7,-4(r16)
811028ac:	00bfff84 	movi	r2,-2
811028b0:	01204474 	movhi	r4,33041
811028b4:	81bffe04 	addi	r6,r16,-8
811028b8:	3884703a 	and	r2,r7,r2
811028bc:	2123ef04 	addi	r4,r4,-28740
811028c0:	308b883a 	add	r5,r6,r2
811028c4:	2a400117 	ldw	r9,4(r5)
811028c8:	22000217 	ldw	r8,8(r4)
811028cc:	00ffff04 	movi	r3,-4
811028d0:	48c6703a 	and	r3,r9,r3
811028d4:	2a005726 	beq	r5,r8,81102a34 <_free_r+0x1ac>
811028d8:	28c00115 	stw	r3,4(r5)
811028dc:	39c0004c 	andi	r7,r7,1
811028e0:	3800091e 	bne	r7,zero,81102908 <_free_r+0x80>
811028e4:	823ffe17 	ldw	r8,-8(r16)
811028e8:	22400204 	addi	r9,r4,8
811028ec:	320dc83a 	sub	r6,r6,r8
811028f0:	31c00217 	ldw	r7,8(r6)
811028f4:	1205883a 	add	r2,r2,r8
811028f8:	3a406526 	beq	r7,r9,81102a90 <_free_r+0x208>
811028fc:	32000317 	ldw	r8,12(r6)
81102900:	3a000315 	stw	r8,12(r7)
81102904:	41c00215 	stw	r7,8(r8)
81102908:	28cf883a 	add	r7,r5,r3
8110290c:	39c00117 	ldw	r7,4(r7)
81102910:	39c0004c 	andi	r7,r7,1
81102914:	38003a26 	beq	r7,zero,81102a00 <_free_r+0x178>
81102918:	10c00054 	ori	r3,r2,1
8110291c:	30c00115 	stw	r3,4(r6)
81102920:	3087883a 	add	r3,r6,r2
81102924:	18800015 	stw	r2,0(r3)
81102928:	00c07fc4 	movi	r3,511
8110292c:	18801936 	bltu	r3,r2,81102994 <_free_r+0x10c>
81102930:	1004d0fa 	srli	r2,r2,3
81102934:	01c00044 	movi	r7,1
81102938:	21400117 	ldw	r5,4(r4)
8110293c:	10c00044 	addi	r3,r2,1
81102940:	18c7883a 	add	r3,r3,r3
81102944:	1005d0ba 	srai	r2,r2,2
81102948:	18c7883a 	add	r3,r3,r3
8110294c:	18c7883a 	add	r3,r3,r3
81102950:	1907883a 	add	r3,r3,r4
81102954:	3884983a 	sll	r2,r7,r2
81102958:	19c00017 	ldw	r7,0(r3)
8110295c:	1a3ffe04 	addi	r8,r3,-8
81102960:	1144b03a 	or	r2,r2,r5
81102964:	32000315 	stw	r8,12(r6)
81102968:	31c00215 	stw	r7,8(r6)
8110296c:	20800115 	stw	r2,4(r4)
81102970:	19800015 	stw	r6,0(r3)
81102974:	39800315 	stw	r6,12(r7)
81102978:	8809883a 	mov	r4,r17
8110297c:	dfc00217 	ldw	ra,8(sp)
81102980:	dc400117 	ldw	r17,4(sp)
81102984:	dc000017 	ldw	r16,0(sp)
81102988:	dec00304 	addi	sp,sp,12
8110298c:	110352c1 	jmpi	8110352c <__malloc_unlock>
81102990:	f800283a 	ret
81102994:	100ad27a 	srli	r5,r2,9
81102998:	00c00104 	movi	r3,4
8110299c:	19404a36 	bltu	r3,r5,81102ac8 <_free_r+0x240>
811029a0:	100ad1ba 	srli	r5,r2,6
811029a4:	28c00e44 	addi	r3,r5,57
811029a8:	18c7883a 	add	r3,r3,r3
811029ac:	29400e04 	addi	r5,r5,56
811029b0:	18c7883a 	add	r3,r3,r3
811029b4:	18c7883a 	add	r3,r3,r3
811029b8:	1909883a 	add	r4,r3,r4
811029bc:	20c00017 	ldw	r3,0(r4)
811029c0:	01e04474 	movhi	r7,33041
811029c4:	213ffe04 	addi	r4,r4,-8
811029c8:	39e3ef04 	addi	r7,r7,-28740
811029cc:	20c04426 	beq	r4,r3,81102ae0 <_free_r+0x258>
811029d0:	01ffff04 	movi	r7,-4
811029d4:	19400117 	ldw	r5,4(r3)
811029d8:	29ca703a 	and	r5,r5,r7
811029dc:	1140022e 	bgeu	r2,r5,811029e8 <_free_r+0x160>
811029e0:	18c00217 	ldw	r3,8(r3)
811029e4:	20fffb1e 	bne	r4,r3,811029d4 <__reset+0xfb0e29d4>
811029e8:	19000317 	ldw	r4,12(r3)
811029ec:	31000315 	stw	r4,12(r6)
811029f0:	30c00215 	stw	r3,8(r6)
811029f4:	21800215 	stw	r6,8(r4)
811029f8:	19800315 	stw	r6,12(r3)
811029fc:	003fde06 	br	81102978 <__reset+0xfb0e2978>
81102a00:	29c00217 	ldw	r7,8(r5)
81102a04:	10c5883a 	add	r2,r2,r3
81102a08:	00e04474 	movhi	r3,33041
81102a0c:	18e3f104 	addi	r3,r3,-28732
81102a10:	38c03b26 	beq	r7,r3,81102b00 <_free_r+0x278>
81102a14:	2a000317 	ldw	r8,12(r5)
81102a18:	11400054 	ori	r5,r2,1
81102a1c:	3087883a 	add	r3,r6,r2
81102a20:	3a000315 	stw	r8,12(r7)
81102a24:	41c00215 	stw	r7,8(r8)
81102a28:	31400115 	stw	r5,4(r6)
81102a2c:	18800015 	stw	r2,0(r3)
81102a30:	003fbd06 	br	81102928 <__reset+0xfb0e2928>
81102a34:	39c0004c 	andi	r7,r7,1
81102a38:	10c5883a 	add	r2,r2,r3
81102a3c:	3800071e 	bne	r7,zero,81102a5c <_free_r+0x1d4>
81102a40:	81fffe17 	ldw	r7,-8(r16)
81102a44:	31cdc83a 	sub	r6,r6,r7
81102a48:	30c00317 	ldw	r3,12(r6)
81102a4c:	31400217 	ldw	r5,8(r6)
81102a50:	11c5883a 	add	r2,r2,r7
81102a54:	28c00315 	stw	r3,12(r5)
81102a58:	19400215 	stw	r5,8(r3)
81102a5c:	10c00054 	ori	r3,r2,1
81102a60:	30c00115 	stw	r3,4(r6)
81102a64:	00e04474 	movhi	r3,33041
81102a68:	18e9a604 	addi	r3,r3,-22888
81102a6c:	18c00017 	ldw	r3,0(r3)
81102a70:	21800215 	stw	r6,8(r4)
81102a74:	10ffc036 	bltu	r2,r3,81102978 <__reset+0xfb0e2978>
81102a78:	00a04474 	movhi	r2,33041
81102a7c:	10a9b704 	addi	r2,r2,-22820
81102a80:	11400017 	ldw	r5,0(r2)
81102a84:	8809883a 	mov	r4,r17
81102a88:	11027640 	call	81102764 <_malloc_trim_r>
81102a8c:	003fba06 	br	81102978 <__reset+0xfb0e2978>
81102a90:	28c9883a 	add	r4,r5,r3
81102a94:	21000117 	ldw	r4,4(r4)
81102a98:	2100004c 	andi	r4,r4,1
81102a9c:	2000391e 	bne	r4,zero,81102b84 <_free_r+0x2fc>
81102aa0:	29c00217 	ldw	r7,8(r5)
81102aa4:	29000317 	ldw	r4,12(r5)
81102aa8:	1885883a 	add	r2,r3,r2
81102aac:	10c00054 	ori	r3,r2,1
81102ab0:	39000315 	stw	r4,12(r7)
81102ab4:	21c00215 	stw	r7,8(r4)
81102ab8:	30c00115 	stw	r3,4(r6)
81102abc:	308d883a 	add	r6,r6,r2
81102ac0:	30800015 	stw	r2,0(r6)
81102ac4:	003fac06 	br	81102978 <__reset+0xfb0e2978>
81102ac8:	00c00504 	movi	r3,20
81102acc:	19401536 	bltu	r3,r5,81102b24 <_free_r+0x29c>
81102ad0:	28c01704 	addi	r3,r5,92
81102ad4:	18c7883a 	add	r3,r3,r3
81102ad8:	294016c4 	addi	r5,r5,91
81102adc:	003fb406 	br	811029b0 <__reset+0xfb0e29b0>
81102ae0:	280bd0ba 	srai	r5,r5,2
81102ae4:	00c00044 	movi	r3,1
81102ae8:	38800117 	ldw	r2,4(r7)
81102aec:	194a983a 	sll	r5,r3,r5
81102af0:	2007883a 	mov	r3,r4
81102af4:	2884b03a 	or	r2,r5,r2
81102af8:	38800115 	stw	r2,4(r7)
81102afc:	003fbb06 	br	811029ec <__reset+0xfb0e29ec>
81102b00:	21800515 	stw	r6,20(r4)
81102b04:	21800415 	stw	r6,16(r4)
81102b08:	10c00054 	ori	r3,r2,1
81102b0c:	31c00315 	stw	r7,12(r6)
81102b10:	31c00215 	stw	r7,8(r6)
81102b14:	30c00115 	stw	r3,4(r6)
81102b18:	308d883a 	add	r6,r6,r2
81102b1c:	30800015 	stw	r2,0(r6)
81102b20:	003f9506 	br	81102978 <__reset+0xfb0e2978>
81102b24:	00c01504 	movi	r3,84
81102b28:	19400536 	bltu	r3,r5,81102b40 <_free_r+0x2b8>
81102b2c:	100ad33a 	srli	r5,r2,12
81102b30:	28c01bc4 	addi	r3,r5,111
81102b34:	18c7883a 	add	r3,r3,r3
81102b38:	29401b84 	addi	r5,r5,110
81102b3c:	003f9c06 	br	811029b0 <__reset+0xfb0e29b0>
81102b40:	00c05504 	movi	r3,340
81102b44:	19400536 	bltu	r3,r5,81102b5c <_free_r+0x2d4>
81102b48:	100ad3fa 	srli	r5,r2,15
81102b4c:	28c01e04 	addi	r3,r5,120
81102b50:	18c7883a 	add	r3,r3,r3
81102b54:	29401dc4 	addi	r5,r5,119
81102b58:	003f9506 	br	811029b0 <__reset+0xfb0e29b0>
81102b5c:	00c15504 	movi	r3,1364
81102b60:	19400536 	bltu	r3,r5,81102b78 <_free_r+0x2f0>
81102b64:	100ad4ba 	srli	r5,r2,18
81102b68:	28c01f44 	addi	r3,r5,125
81102b6c:	18c7883a 	add	r3,r3,r3
81102b70:	29401f04 	addi	r5,r5,124
81102b74:	003f8e06 	br	811029b0 <__reset+0xfb0e29b0>
81102b78:	00c03f84 	movi	r3,254
81102b7c:	01401f84 	movi	r5,126
81102b80:	003f8b06 	br	811029b0 <__reset+0xfb0e29b0>
81102b84:	10c00054 	ori	r3,r2,1
81102b88:	30c00115 	stw	r3,4(r6)
81102b8c:	308d883a 	add	r6,r6,r2
81102b90:	30800015 	stw	r2,0(r6)
81102b94:	003f7806 	br	81102978 <__reset+0xfb0e2978>

81102b98 <_lseek_r>:
81102b98:	defffd04 	addi	sp,sp,-12
81102b9c:	2805883a 	mov	r2,r5
81102ba0:	dc000015 	stw	r16,0(sp)
81102ba4:	04204474 	movhi	r16,33041
81102ba8:	dc400115 	stw	r17,4(sp)
81102bac:	300b883a 	mov	r5,r6
81102bb0:	8429b804 	addi	r16,r16,-22816
81102bb4:	2023883a 	mov	r17,r4
81102bb8:	380d883a 	mov	r6,r7
81102bbc:	1009883a 	mov	r4,r2
81102bc0:	dfc00215 	stw	ra,8(sp)
81102bc4:	80000015 	stw	zero,0(r16)
81102bc8:	11033b80 	call	811033b8 <lseek>
81102bcc:	00ffffc4 	movi	r3,-1
81102bd0:	10c00526 	beq	r2,r3,81102be8 <_lseek_r+0x50>
81102bd4:	dfc00217 	ldw	ra,8(sp)
81102bd8:	dc400117 	ldw	r17,4(sp)
81102bdc:	dc000017 	ldw	r16,0(sp)
81102be0:	dec00304 	addi	sp,sp,12
81102be4:	f800283a 	ret
81102be8:	80c00017 	ldw	r3,0(r16)
81102bec:	183ff926 	beq	r3,zero,81102bd4 <__reset+0xfb0e2bd4>
81102bf0:	88c00015 	stw	r3,0(r17)
81102bf4:	003ff706 	br	81102bd4 <__reset+0xfb0e2bd4>

81102bf8 <__smakebuf_r>:
81102bf8:	2880030b 	ldhu	r2,12(r5)
81102bfc:	10c0008c 	andi	r3,r2,2
81102c00:	1800411e 	bne	r3,zero,81102d08 <__smakebuf_r+0x110>
81102c04:	deffec04 	addi	sp,sp,-80
81102c08:	dc000f15 	stw	r16,60(sp)
81102c0c:	2821883a 	mov	r16,r5
81102c10:	2940038f 	ldh	r5,14(r5)
81102c14:	dc401015 	stw	r17,64(sp)
81102c18:	dfc01315 	stw	ra,76(sp)
81102c1c:	dcc01215 	stw	r19,72(sp)
81102c20:	dc801115 	stw	r18,68(sp)
81102c24:	2023883a 	mov	r17,r4
81102c28:	28001c16 	blt	r5,zero,81102c9c <__smakebuf_r+0xa4>
81102c2c:	d80d883a 	mov	r6,sp
81102c30:	1102e140 	call	81102e14 <_fstat_r>
81102c34:	10001816 	blt	r2,zero,81102c98 <__smakebuf_r+0xa0>
81102c38:	d8800117 	ldw	r2,4(sp)
81102c3c:	00e00014 	movui	r3,32768
81102c40:	10bc000c 	andi	r2,r2,61440
81102c44:	14c80020 	cmpeqi	r19,r2,8192
81102c48:	10c03726 	beq	r2,r3,81102d28 <__smakebuf_r+0x130>
81102c4c:	80c0030b 	ldhu	r3,12(r16)
81102c50:	18c20014 	ori	r3,r3,2048
81102c54:	80c0030d 	sth	r3,12(r16)
81102c58:	00c80004 	movi	r3,8192
81102c5c:	10c0521e 	bne	r2,r3,81102da8 <__smakebuf_r+0x1b0>
81102c60:	8140038f 	ldh	r5,14(r16)
81102c64:	8809883a 	mov	r4,r17
81102c68:	1102e700 	call	81102e70 <_isatty_r>
81102c6c:	10004c26 	beq	r2,zero,81102da0 <__smakebuf_r+0x1a8>
81102c70:	8080030b 	ldhu	r2,12(r16)
81102c74:	80c010c4 	addi	r3,r16,67
81102c78:	80c00015 	stw	r3,0(r16)
81102c7c:	10800054 	ori	r2,r2,1
81102c80:	8080030d 	sth	r2,12(r16)
81102c84:	00800044 	movi	r2,1
81102c88:	80c00415 	stw	r3,16(r16)
81102c8c:	80800515 	stw	r2,20(r16)
81102c90:	04810004 	movi	r18,1024
81102c94:	00000706 	br	81102cb4 <__smakebuf_r+0xbc>
81102c98:	8080030b 	ldhu	r2,12(r16)
81102c9c:	10c0200c 	andi	r3,r2,128
81102ca0:	18001f1e 	bne	r3,zero,81102d20 <__smakebuf_r+0x128>
81102ca4:	04810004 	movi	r18,1024
81102ca8:	10820014 	ori	r2,r2,2048
81102cac:	8080030d 	sth	r2,12(r16)
81102cb0:	0027883a 	mov	r19,zero
81102cb4:	900b883a 	mov	r5,r18
81102cb8:	8809883a 	mov	r4,r17
81102cbc:	1100e000 	call	81100e00 <_malloc_r>
81102cc0:	10002c26 	beq	r2,zero,81102d74 <__smakebuf_r+0x17c>
81102cc4:	80c0030b 	ldhu	r3,12(r16)
81102cc8:	01204434 	movhi	r4,33040
81102ccc:	21010904 	addi	r4,r4,1060
81102cd0:	89000f15 	stw	r4,60(r17)
81102cd4:	18c02014 	ori	r3,r3,128
81102cd8:	80c0030d 	sth	r3,12(r16)
81102cdc:	80800015 	stw	r2,0(r16)
81102ce0:	80800415 	stw	r2,16(r16)
81102ce4:	84800515 	stw	r18,20(r16)
81102ce8:	98001a1e 	bne	r19,zero,81102d54 <__smakebuf_r+0x15c>
81102cec:	dfc01317 	ldw	ra,76(sp)
81102cf0:	dcc01217 	ldw	r19,72(sp)
81102cf4:	dc801117 	ldw	r18,68(sp)
81102cf8:	dc401017 	ldw	r17,64(sp)
81102cfc:	dc000f17 	ldw	r16,60(sp)
81102d00:	dec01404 	addi	sp,sp,80
81102d04:	f800283a 	ret
81102d08:	288010c4 	addi	r2,r5,67
81102d0c:	28800015 	stw	r2,0(r5)
81102d10:	28800415 	stw	r2,16(r5)
81102d14:	00800044 	movi	r2,1
81102d18:	28800515 	stw	r2,20(r5)
81102d1c:	f800283a 	ret
81102d20:	04801004 	movi	r18,64
81102d24:	003fe006 	br	81102ca8 <__reset+0xfb0e2ca8>
81102d28:	81000a17 	ldw	r4,40(r16)
81102d2c:	00e04434 	movhi	r3,33040
81102d30:	18c85304 	addi	r3,r3,8524
81102d34:	20ffc51e 	bne	r4,r3,81102c4c <__reset+0xfb0e2c4c>
81102d38:	8080030b 	ldhu	r2,12(r16)
81102d3c:	04810004 	movi	r18,1024
81102d40:	84801315 	stw	r18,76(r16)
81102d44:	1484b03a 	or	r2,r2,r18
81102d48:	8080030d 	sth	r2,12(r16)
81102d4c:	0027883a 	mov	r19,zero
81102d50:	003fd806 	br	81102cb4 <__reset+0xfb0e2cb4>
81102d54:	8140038f 	ldh	r5,14(r16)
81102d58:	8809883a 	mov	r4,r17
81102d5c:	1102e700 	call	81102e70 <_isatty_r>
81102d60:	103fe226 	beq	r2,zero,81102cec <__reset+0xfb0e2cec>
81102d64:	8080030b 	ldhu	r2,12(r16)
81102d68:	10800054 	ori	r2,r2,1
81102d6c:	8080030d 	sth	r2,12(r16)
81102d70:	003fde06 	br	81102cec <__reset+0xfb0e2cec>
81102d74:	8080030b 	ldhu	r2,12(r16)
81102d78:	10c0800c 	andi	r3,r2,512
81102d7c:	183fdb1e 	bne	r3,zero,81102cec <__reset+0xfb0e2cec>
81102d80:	10800094 	ori	r2,r2,2
81102d84:	80c010c4 	addi	r3,r16,67
81102d88:	8080030d 	sth	r2,12(r16)
81102d8c:	00800044 	movi	r2,1
81102d90:	80c00015 	stw	r3,0(r16)
81102d94:	80c00415 	stw	r3,16(r16)
81102d98:	80800515 	stw	r2,20(r16)
81102d9c:	003fd306 	br	81102cec <__reset+0xfb0e2cec>
81102da0:	04810004 	movi	r18,1024
81102da4:	003fc306 	br	81102cb4 <__reset+0xfb0e2cb4>
81102da8:	0027883a 	mov	r19,zero
81102dac:	04810004 	movi	r18,1024
81102db0:	003fc006 	br	81102cb4 <__reset+0xfb0e2cb4>

81102db4 <_read_r>:
81102db4:	defffd04 	addi	sp,sp,-12
81102db8:	2805883a 	mov	r2,r5
81102dbc:	dc000015 	stw	r16,0(sp)
81102dc0:	04204474 	movhi	r16,33041
81102dc4:	dc400115 	stw	r17,4(sp)
81102dc8:	300b883a 	mov	r5,r6
81102dcc:	8429b804 	addi	r16,r16,-22816
81102dd0:	2023883a 	mov	r17,r4
81102dd4:	380d883a 	mov	r6,r7
81102dd8:	1009883a 	mov	r4,r2
81102ddc:	dfc00215 	stw	ra,8(sp)
81102de0:	80000015 	stw	zero,0(r16)
81102de4:	110358c0 	call	8110358c <read>
81102de8:	00ffffc4 	movi	r3,-1
81102dec:	10c00526 	beq	r2,r3,81102e04 <_read_r+0x50>
81102df0:	dfc00217 	ldw	ra,8(sp)
81102df4:	dc400117 	ldw	r17,4(sp)
81102df8:	dc000017 	ldw	r16,0(sp)
81102dfc:	dec00304 	addi	sp,sp,12
81102e00:	f800283a 	ret
81102e04:	80c00017 	ldw	r3,0(r16)
81102e08:	183ff926 	beq	r3,zero,81102df0 <__reset+0xfb0e2df0>
81102e0c:	88c00015 	stw	r3,0(r17)
81102e10:	003ff706 	br	81102df0 <__reset+0xfb0e2df0>

81102e14 <_fstat_r>:
81102e14:	defffd04 	addi	sp,sp,-12
81102e18:	2805883a 	mov	r2,r5
81102e1c:	dc000015 	stw	r16,0(sp)
81102e20:	04204474 	movhi	r16,33041
81102e24:	dc400115 	stw	r17,4(sp)
81102e28:	8429b804 	addi	r16,r16,-22816
81102e2c:	2023883a 	mov	r17,r4
81102e30:	300b883a 	mov	r5,r6
81102e34:	1009883a 	mov	r4,r2
81102e38:	dfc00215 	stw	ra,8(sp)
81102e3c:	80000015 	stw	zero,0(r16)
81102e40:	11031ec0 	call	811031ec <fstat>
81102e44:	00ffffc4 	movi	r3,-1
81102e48:	10c00526 	beq	r2,r3,81102e60 <_fstat_r+0x4c>
81102e4c:	dfc00217 	ldw	ra,8(sp)
81102e50:	dc400117 	ldw	r17,4(sp)
81102e54:	dc000017 	ldw	r16,0(sp)
81102e58:	dec00304 	addi	sp,sp,12
81102e5c:	f800283a 	ret
81102e60:	80c00017 	ldw	r3,0(r16)
81102e64:	183ff926 	beq	r3,zero,81102e4c <__reset+0xfb0e2e4c>
81102e68:	88c00015 	stw	r3,0(r17)
81102e6c:	003ff706 	br	81102e4c <__reset+0xfb0e2e4c>

81102e70 <_isatty_r>:
81102e70:	defffd04 	addi	sp,sp,-12
81102e74:	dc000015 	stw	r16,0(sp)
81102e78:	04204474 	movhi	r16,33041
81102e7c:	dc400115 	stw	r17,4(sp)
81102e80:	8429b804 	addi	r16,r16,-22816
81102e84:	2023883a 	mov	r17,r4
81102e88:	2809883a 	mov	r4,r5
81102e8c:	dfc00215 	stw	ra,8(sp)
81102e90:	80000015 	stw	zero,0(r16)
81102e94:	11032d80 	call	811032d8 <isatty>
81102e98:	00ffffc4 	movi	r3,-1
81102e9c:	10c00526 	beq	r2,r3,81102eb4 <_isatty_r+0x44>
81102ea0:	dfc00217 	ldw	ra,8(sp)
81102ea4:	dc400117 	ldw	r17,4(sp)
81102ea8:	dc000017 	ldw	r16,0(sp)
81102eac:	dec00304 	addi	sp,sp,12
81102eb0:	f800283a 	ret
81102eb4:	80c00017 	ldw	r3,0(r16)
81102eb8:	183ff926 	beq	r3,zero,81102ea0 <__reset+0xfb0e2ea0>
81102ebc:	88c00015 	stw	r3,0(r17)
81102ec0:	003ff706 	br	81102ea0 <__reset+0xfb0e2ea0>

81102ec4 <__divsi3>:
81102ec4:	20001b16 	blt	r4,zero,81102f34 <__divsi3+0x70>
81102ec8:	000f883a 	mov	r7,zero
81102ecc:	28001616 	blt	r5,zero,81102f28 <__divsi3+0x64>
81102ed0:	200d883a 	mov	r6,r4
81102ed4:	29001a2e 	bgeu	r5,r4,81102f40 <__divsi3+0x7c>
81102ed8:	00800804 	movi	r2,32
81102edc:	00c00044 	movi	r3,1
81102ee0:	00000106 	br	81102ee8 <__divsi3+0x24>
81102ee4:	10000d26 	beq	r2,zero,81102f1c <__divsi3+0x58>
81102ee8:	294b883a 	add	r5,r5,r5
81102eec:	10bfffc4 	addi	r2,r2,-1
81102ef0:	18c7883a 	add	r3,r3,r3
81102ef4:	293ffb36 	bltu	r5,r4,81102ee4 <__reset+0xfb0e2ee4>
81102ef8:	0005883a 	mov	r2,zero
81102efc:	18000726 	beq	r3,zero,81102f1c <__divsi3+0x58>
81102f00:	0005883a 	mov	r2,zero
81102f04:	31400236 	bltu	r6,r5,81102f10 <__divsi3+0x4c>
81102f08:	314dc83a 	sub	r6,r6,r5
81102f0c:	10c4b03a 	or	r2,r2,r3
81102f10:	1806d07a 	srli	r3,r3,1
81102f14:	280ad07a 	srli	r5,r5,1
81102f18:	183ffa1e 	bne	r3,zero,81102f04 <__reset+0xfb0e2f04>
81102f1c:	38000126 	beq	r7,zero,81102f24 <__divsi3+0x60>
81102f20:	0085c83a 	sub	r2,zero,r2
81102f24:	f800283a 	ret
81102f28:	014bc83a 	sub	r5,zero,r5
81102f2c:	39c0005c 	xori	r7,r7,1
81102f30:	003fe706 	br	81102ed0 <__reset+0xfb0e2ed0>
81102f34:	0109c83a 	sub	r4,zero,r4
81102f38:	01c00044 	movi	r7,1
81102f3c:	003fe306 	br	81102ecc <__reset+0xfb0e2ecc>
81102f40:	00c00044 	movi	r3,1
81102f44:	003fee06 	br	81102f00 <__reset+0xfb0e2f00>

81102f48 <__modsi3>:
81102f48:	20001716 	blt	r4,zero,81102fa8 <__modsi3+0x60>
81102f4c:	000f883a 	mov	r7,zero
81102f50:	2005883a 	mov	r2,r4
81102f54:	28001216 	blt	r5,zero,81102fa0 <__modsi3+0x58>
81102f58:	2900162e 	bgeu	r5,r4,81102fb4 <__modsi3+0x6c>
81102f5c:	01800804 	movi	r6,32
81102f60:	00c00044 	movi	r3,1
81102f64:	00000106 	br	81102f6c <__modsi3+0x24>
81102f68:	30000a26 	beq	r6,zero,81102f94 <__modsi3+0x4c>
81102f6c:	294b883a 	add	r5,r5,r5
81102f70:	31bfffc4 	addi	r6,r6,-1
81102f74:	18c7883a 	add	r3,r3,r3
81102f78:	293ffb36 	bltu	r5,r4,81102f68 <__reset+0xfb0e2f68>
81102f7c:	18000526 	beq	r3,zero,81102f94 <__modsi3+0x4c>
81102f80:	1806d07a 	srli	r3,r3,1
81102f84:	11400136 	bltu	r2,r5,81102f8c <__modsi3+0x44>
81102f88:	1145c83a 	sub	r2,r2,r5
81102f8c:	280ad07a 	srli	r5,r5,1
81102f90:	183ffb1e 	bne	r3,zero,81102f80 <__reset+0xfb0e2f80>
81102f94:	38000126 	beq	r7,zero,81102f9c <__modsi3+0x54>
81102f98:	0085c83a 	sub	r2,zero,r2
81102f9c:	f800283a 	ret
81102fa0:	014bc83a 	sub	r5,zero,r5
81102fa4:	003fec06 	br	81102f58 <__reset+0xfb0e2f58>
81102fa8:	0109c83a 	sub	r4,zero,r4
81102fac:	01c00044 	movi	r7,1
81102fb0:	003fe706 	br	81102f50 <__reset+0xfb0e2f50>
81102fb4:	00c00044 	movi	r3,1
81102fb8:	003ff106 	br	81102f80 <__reset+0xfb0e2f80>

81102fbc <__udivsi3>:
81102fbc:	200d883a 	mov	r6,r4
81102fc0:	2900152e 	bgeu	r5,r4,81103018 <__udivsi3+0x5c>
81102fc4:	28001416 	blt	r5,zero,81103018 <__udivsi3+0x5c>
81102fc8:	00800804 	movi	r2,32
81102fcc:	00c00044 	movi	r3,1
81102fd0:	00000206 	br	81102fdc <__udivsi3+0x20>
81102fd4:	10000e26 	beq	r2,zero,81103010 <__udivsi3+0x54>
81102fd8:	28000516 	blt	r5,zero,81102ff0 <__udivsi3+0x34>
81102fdc:	294b883a 	add	r5,r5,r5
81102fe0:	10bfffc4 	addi	r2,r2,-1
81102fe4:	18c7883a 	add	r3,r3,r3
81102fe8:	293ffa36 	bltu	r5,r4,81102fd4 <__reset+0xfb0e2fd4>
81102fec:	18000826 	beq	r3,zero,81103010 <__udivsi3+0x54>
81102ff0:	0005883a 	mov	r2,zero
81102ff4:	31400236 	bltu	r6,r5,81103000 <__udivsi3+0x44>
81102ff8:	314dc83a 	sub	r6,r6,r5
81102ffc:	10c4b03a 	or	r2,r2,r3
81103000:	1806d07a 	srli	r3,r3,1
81103004:	280ad07a 	srli	r5,r5,1
81103008:	183ffa1e 	bne	r3,zero,81102ff4 <__reset+0xfb0e2ff4>
8110300c:	f800283a 	ret
81103010:	0005883a 	mov	r2,zero
81103014:	f800283a 	ret
81103018:	00c00044 	movi	r3,1
8110301c:	003ff406 	br	81102ff0 <__reset+0xfb0e2ff0>

81103020 <__umodsi3>:
81103020:	2005883a 	mov	r2,r4
81103024:	2900122e 	bgeu	r5,r4,81103070 <__umodsi3+0x50>
81103028:	28001116 	blt	r5,zero,81103070 <__umodsi3+0x50>
8110302c:	01800804 	movi	r6,32
81103030:	00c00044 	movi	r3,1
81103034:	00000206 	br	81103040 <__umodsi3+0x20>
81103038:	30000c26 	beq	r6,zero,8110306c <__umodsi3+0x4c>
8110303c:	28000516 	blt	r5,zero,81103054 <__umodsi3+0x34>
81103040:	294b883a 	add	r5,r5,r5
81103044:	31bfffc4 	addi	r6,r6,-1
81103048:	18c7883a 	add	r3,r3,r3
8110304c:	293ffa36 	bltu	r5,r4,81103038 <__reset+0xfb0e3038>
81103050:	18000626 	beq	r3,zero,8110306c <__umodsi3+0x4c>
81103054:	1806d07a 	srli	r3,r3,1
81103058:	11400136 	bltu	r2,r5,81103060 <__umodsi3+0x40>
8110305c:	1145c83a 	sub	r2,r2,r5
81103060:	280ad07a 	srli	r5,r5,1
81103064:	183ffb1e 	bne	r3,zero,81103054 <__reset+0xfb0e3054>
81103068:	f800283a 	ret
8110306c:	f800283a 	ret
81103070:	00c00044 	movi	r3,1
81103074:	003ff706 	br	81103054 <__reset+0xfb0e3054>

81103078 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81103078:	defffe04 	addi	sp,sp,-8
8110307c:	dfc00115 	stw	ra,4(sp)
81103080:	df000015 	stw	fp,0(sp)
81103084:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81103088:	d0a00917 	ldw	r2,-32732(gp)
8110308c:	10000326 	beq	r2,zero,8110309c <alt_get_errno+0x24>
81103090:	d0a00917 	ldw	r2,-32732(gp)
81103094:	103ee83a 	callr	r2
81103098:	00000106 	br	811030a0 <alt_get_errno+0x28>
8110309c:	d0a01504 	addi	r2,gp,-32684
}
811030a0:	e037883a 	mov	sp,fp
811030a4:	dfc00117 	ldw	ra,4(sp)
811030a8:	df000017 	ldw	fp,0(sp)
811030ac:	dec00204 	addi	sp,sp,8
811030b0:	f800283a 	ret

811030b4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
811030b4:	defffb04 	addi	sp,sp,-20
811030b8:	dfc00415 	stw	ra,16(sp)
811030bc:	df000315 	stw	fp,12(sp)
811030c0:	df000304 	addi	fp,sp,12
811030c4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
811030c8:	e0bfff17 	ldw	r2,-4(fp)
811030cc:	10000616 	blt	r2,zero,811030e8 <close+0x34>
811030d0:	e0bfff17 	ldw	r2,-4(fp)
811030d4:	10c00324 	muli	r3,r2,12
811030d8:	00a04474 	movhi	r2,33041
811030dc:	10a4fb04 	addi	r2,r2,-27668
811030e0:	1885883a 	add	r2,r3,r2
811030e4:	00000106 	br	811030ec <close+0x38>
811030e8:	0005883a 	mov	r2,zero
811030ec:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
811030f0:	e0bffd17 	ldw	r2,-12(fp)
811030f4:	10001926 	beq	r2,zero,8110315c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
811030f8:	e0bffd17 	ldw	r2,-12(fp)
811030fc:	10800017 	ldw	r2,0(r2)
81103100:	10800417 	ldw	r2,16(r2)
81103104:	10000626 	beq	r2,zero,81103120 <close+0x6c>
81103108:	e0bffd17 	ldw	r2,-12(fp)
8110310c:	10800017 	ldw	r2,0(r2)
81103110:	10800417 	ldw	r2,16(r2)
81103114:	e13ffd17 	ldw	r4,-12(fp)
81103118:	103ee83a 	callr	r2
8110311c:	00000106 	br	81103124 <close+0x70>
81103120:	0005883a 	mov	r2,zero
81103124:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
81103128:	e13fff17 	ldw	r4,-4(fp)
8110312c:	11036880 	call	81103688 <alt_release_fd>
    if (rval < 0)
81103130:	e0bffe17 	ldw	r2,-8(fp)
81103134:	1000070e 	bge	r2,zero,81103154 <close+0xa0>
    {
      ALT_ERRNO = -rval;
81103138:	11030780 	call	81103078 <alt_get_errno>
8110313c:	1007883a 	mov	r3,r2
81103140:	e0bffe17 	ldw	r2,-8(fp)
81103144:	0085c83a 	sub	r2,zero,r2
81103148:	18800015 	stw	r2,0(r3)
      return -1;
8110314c:	00bfffc4 	movi	r2,-1
81103150:	00000706 	br	81103170 <close+0xbc>
    }
    return 0;
81103154:	0005883a 	mov	r2,zero
81103158:	00000506 	br	81103170 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
8110315c:	11030780 	call	81103078 <alt_get_errno>
81103160:	1007883a 	mov	r3,r2
81103164:	00801444 	movi	r2,81
81103168:	18800015 	stw	r2,0(r3)
    return -1;
8110316c:	00bfffc4 	movi	r2,-1
  }
}
81103170:	e037883a 	mov	sp,fp
81103174:	dfc00117 	ldw	ra,4(sp)
81103178:	df000017 	ldw	fp,0(sp)
8110317c:	dec00204 	addi	sp,sp,8
81103180:	f800283a 	ret

81103184 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
81103184:	defffc04 	addi	sp,sp,-16
81103188:	df000315 	stw	fp,12(sp)
8110318c:	df000304 	addi	fp,sp,12
81103190:	e13ffd15 	stw	r4,-12(fp)
81103194:	e17ffe15 	stw	r5,-8(fp)
81103198:	e1bfff15 	stw	r6,-4(fp)
  return len;
8110319c:	e0bfff17 	ldw	r2,-4(fp)
}
811031a0:	e037883a 	mov	sp,fp
811031a4:	df000017 	ldw	fp,0(sp)
811031a8:	dec00104 	addi	sp,sp,4
811031ac:	f800283a 	ret

811031b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
811031b0:	defffe04 	addi	sp,sp,-8
811031b4:	dfc00115 	stw	ra,4(sp)
811031b8:	df000015 	stw	fp,0(sp)
811031bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
811031c0:	d0a00917 	ldw	r2,-32732(gp)
811031c4:	10000326 	beq	r2,zero,811031d4 <alt_get_errno+0x24>
811031c8:	d0a00917 	ldw	r2,-32732(gp)
811031cc:	103ee83a 	callr	r2
811031d0:	00000106 	br	811031d8 <alt_get_errno+0x28>
811031d4:	d0a01504 	addi	r2,gp,-32684
}
811031d8:	e037883a 	mov	sp,fp
811031dc:	dfc00117 	ldw	ra,4(sp)
811031e0:	df000017 	ldw	fp,0(sp)
811031e4:	dec00204 	addi	sp,sp,8
811031e8:	f800283a 	ret

811031ec <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
811031ec:	defffb04 	addi	sp,sp,-20
811031f0:	dfc00415 	stw	ra,16(sp)
811031f4:	df000315 	stw	fp,12(sp)
811031f8:	df000304 	addi	fp,sp,12
811031fc:	e13ffe15 	stw	r4,-8(fp)
81103200:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
81103204:	e0bffe17 	ldw	r2,-8(fp)
81103208:	10000616 	blt	r2,zero,81103224 <fstat+0x38>
8110320c:	e0bffe17 	ldw	r2,-8(fp)
81103210:	10c00324 	muli	r3,r2,12
81103214:	00a04474 	movhi	r2,33041
81103218:	10a4fb04 	addi	r2,r2,-27668
8110321c:	1885883a 	add	r2,r3,r2
81103220:	00000106 	br	81103228 <fstat+0x3c>
81103224:	0005883a 	mov	r2,zero
81103228:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
8110322c:	e0bffd17 	ldw	r2,-12(fp)
81103230:	10001026 	beq	r2,zero,81103274 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
81103234:	e0bffd17 	ldw	r2,-12(fp)
81103238:	10800017 	ldw	r2,0(r2)
8110323c:	10800817 	ldw	r2,32(r2)
81103240:	10000726 	beq	r2,zero,81103260 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
81103244:	e0bffd17 	ldw	r2,-12(fp)
81103248:	10800017 	ldw	r2,0(r2)
8110324c:	10800817 	ldw	r2,32(r2)
81103250:	e17fff17 	ldw	r5,-4(fp)
81103254:	e13ffd17 	ldw	r4,-12(fp)
81103258:	103ee83a 	callr	r2
8110325c:	00000a06 	br	81103288 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
81103260:	e0bfff17 	ldw	r2,-4(fp)
81103264:	00c80004 	movi	r3,8192
81103268:	10c00115 	stw	r3,4(r2)
      return 0;
8110326c:	0005883a 	mov	r2,zero
81103270:	00000506 	br	81103288 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
81103274:	11031b00 	call	811031b0 <alt_get_errno>
81103278:	1007883a 	mov	r3,r2
8110327c:	00801444 	movi	r2,81
81103280:	18800015 	stw	r2,0(r3)
    return -1;
81103284:	00bfffc4 	movi	r2,-1
  }
}
81103288:	e037883a 	mov	sp,fp
8110328c:	dfc00117 	ldw	ra,4(sp)
81103290:	df000017 	ldw	fp,0(sp)
81103294:	dec00204 	addi	sp,sp,8
81103298:	f800283a 	ret

8110329c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8110329c:	defffe04 	addi	sp,sp,-8
811032a0:	dfc00115 	stw	ra,4(sp)
811032a4:	df000015 	stw	fp,0(sp)
811032a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
811032ac:	d0a00917 	ldw	r2,-32732(gp)
811032b0:	10000326 	beq	r2,zero,811032c0 <alt_get_errno+0x24>
811032b4:	d0a00917 	ldw	r2,-32732(gp)
811032b8:	103ee83a 	callr	r2
811032bc:	00000106 	br	811032c4 <alt_get_errno+0x28>
811032c0:	d0a01504 	addi	r2,gp,-32684
}
811032c4:	e037883a 	mov	sp,fp
811032c8:	dfc00117 	ldw	ra,4(sp)
811032cc:	df000017 	ldw	fp,0(sp)
811032d0:	dec00204 	addi	sp,sp,8
811032d4:	f800283a 	ret

811032d8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
811032d8:	deffed04 	addi	sp,sp,-76
811032dc:	dfc01215 	stw	ra,72(sp)
811032e0:	df001115 	stw	fp,68(sp)
811032e4:	df001104 	addi	fp,sp,68
811032e8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
811032ec:	e0bfff17 	ldw	r2,-4(fp)
811032f0:	10000616 	blt	r2,zero,8110330c <isatty+0x34>
811032f4:	e0bfff17 	ldw	r2,-4(fp)
811032f8:	10c00324 	muli	r3,r2,12
811032fc:	00a04474 	movhi	r2,33041
81103300:	10a4fb04 	addi	r2,r2,-27668
81103304:	1885883a 	add	r2,r3,r2
81103308:	00000106 	br	81103310 <isatty+0x38>
8110330c:	0005883a 	mov	r2,zero
81103310:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
81103314:	e0bfef17 	ldw	r2,-68(fp)
81103318:	10000e26 	beq	r2,zero,81103354 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
8110331c:	e0bfef17 	ldw	r2,-68(fp)
81103320:	10800017 	ldw	r2,0(r2)
81103324:	10800817 	ldw	r2,32(r2)
81103328:	1000021e 	bne	r2,zero,81103334 <isatty+0x5c>
    {
      return 1;
8110332c:	00800044 	movi	r2,1
81103330:	00000d06 	br	81103368 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
81103334:	e0bff004 	addi	r2,fp,-64
81103338:	100b883a 	mov	r5,r2
8110333c:	e13fff17 	ldw	r4,-4(fp)
81103340:	11031ec0 	call	811031ec <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
81103344:	e0bff117 	ldw	r2,-60(fp)
81103348:	10880020 	cmpeqi	r2,r2,8192
8110334c:	10803fcc 	andi	r2,r2,255
81103350:	00000506 	br	81103368 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
81103354:	110329c0 	call	8110329c <alt_get_errno>
81103358:	1007883a 	mov	r3,r2
8110335c:	00801444 	movi	r2,81
81103360:	18800015 	stw	r2,0(r3)
    return 0;
81103364:	0005883a 	mov	r2,zero
  }
}
81103368:	e037883a 	mov	sp,fp
8110336c:	dfc00117 	ldw	ra,4(sp)
81103370:	df000017 	ldw	fp,0(sp)
81103374:	dec00204 	addi	sp,sp,8
81103378:	f800283a 	ret

8110337c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8110337c:	defffe04 	addi	sp,sp,-8
81103380:	dfc00115 	stw	ra,4(sp)
81103384:	df000015 	stw	fp,0(sp)
81103388:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8110338c:	d0a00917 	ldw	r2,-32732(gp)
81103390:	10000326 	beq	r2,zero,811033a0 <alt_get_errno+0x24>
81103394:	d0a00917 	ldw	r2,-32732(gp)
81103398:	103ee83a 	callr	r2
8110339c:	00000106 	br	811033a4 <alt_get_errno+0x28>
811033a0:	d0a01504 	addi	r2,gp,-32684
}
811033a4:	e037883a 	mov	sp,fp
811033a8:	dfc00117 	ldw	ra,4(sp)
811033ac:	df000017 	ldw	fp,0(sp)
811033b0:	dec00204 	addi	sp,sp,8
811033b4:	f800283a 	ret

811033b8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
811033b8:	defff904 	addi	sp,sp,-28
811033bc:	dfc00615 	stw	ra,24(sp)
811033c0:	df000515 	stw	fp,20(sp)
811033c4:	df000504 	addi	fp,sp,20
811033c8:	e13ffd15 	stw	r4,-12(fp)
811033cc:	e17ffe15 	stw	r5,-8(fp)
811033d0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
811033d4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
811033d8:	e0bffd17 	ldw	r2,-12(fp)
811033dc:	10000616 	blt	r2,zero,811033f8 <lseek+0x40>
811033e0:	e0bffd17 	ldw	r2,-12(fp)
811033e4:	10c00324 	muli	r3,r2,12
811033e8:	00a04474 	movhi	r2,33041
811033ec:	10a4fb04 	addi	r2,r2,-27668
811033f0:	1885883a 	add	r2,r3,r2
811033f4:	00000106 	br	811033fc <lseek+0x44>
811033f8:	0005883a 	mov	r2,zero
811033fc:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
81103400:	e0bffc17 	ldw	r2,-16(fp)
81103404:	10001026 	beq	r2,zero,81103448 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
81103408:	e0bffc17 	ldw	r2,-16(fp)
8110340c:	10800017 	ldw	r2,0(r2)
81103410:	10800717 	ldw	r2,28(r2)
81103414:	10000926 	beq	r2,zero,8110343c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
81103418:	e0bffc17 	ldw	r2,-16(fp)
8110341c:	10800017 	ldw	r2,0(r2)
81103420:	10800717 	ldw	r2,28(r2)
81103424:	e1bfff17 	ldw	r6,-4(fp)
81103428:	e17ffe17 	ldw	r5,-8(fp)
8110342c:	e13ffc17 	ldw	r4,-16(fp)
81103430:	103ee83a 	callr	r2
81103434:	e0bffb15 	stw	r2,-20(fp)
81103438:	00000506 	br	81103450 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
8110343c:	00bfde84 	movi	r2,-134
81103440:	e0bffb15 	stw	r2,-20(fp)
81103444:	00000206 	br	81103450 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
81103448:	00bfebc4 	movi	r2,-81
8110344c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
81103450:	e0bffb17 	ldw	r2,-20(fp)
81103454:	1000070e 	bge	r2,zero,81103474 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
81103458:	110337c0 	call	8110337c <alt_get_errno>
8110345c:	1007883a 	mov	r3,r2
81103460:	e0bffb17 	ldw	r2,-20(fp)
81103464:	0085c83a 	sub	r2,zero,r2
81103468:	18800015 	stw	r2,0(r3)
    rc = -1;
8110346c:	00bfffc4 	movi	r2,-1
81103470:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
81103474:	e0bffb17 	ldw	r2,-20(fp)
}
81103478:	e037883a 	mov	sp,fp
8110347c:	dfc00117 	ldw	ra,4(sp)
81103480:	df000017 	ldw	fp,0(sp)
81103484:	dec00204 	addi	sp,sp,8
81103488:	f800283a 	ret

8110348c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
8110348c:	defffd04 	addi	sp,sp,-12
81103490:	dfc00215 	stw	ra,8(sp)
81103494:	df000115 	stw	fp,4(sp)
81103498:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
8110349c:	0009883a 	mov	r4,zero
811034a0:	11039040 	call	81103904 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
811034a4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
811034a8:	110393c0 	call	8110393c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
811034ac:	01a04474 	movhi	r6,33041
811034b0:	31a24e04 	addi	r6,r6,-30408
811034b4:	01604474 	movhi	r5,33041
811034b8:	29624e04 	addi	r5,r5,-30408
811034bc:	01204474 	movhi	r4,33041
811034c0:	21224e04 	addi	r4,r4,-30408
811034c4:	11079740 	call	81107974 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
811034c8:	11074c00 	call	811074c0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
811034cc:	01204434 	movhi	r4,33040
811034d0:	211d4804 	addi	r4,r4,29984
811034d4:	11082bc0 	call	811082bc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
811034d8:	d0a01617 	ldw	r2,-32680(gp)
811034dc:	d0e01717 	ldw	r3,-32676(gp)
811034e0:	d1201817 	ldw	r4,-32672(gp)
811034e4:	200d883a 	mov	r6,r4
811034e8:	180b883a 	mov	r5,r3
811034ec:	1009883a 	mov	r4,r2
811034f0:	110027c0 	call	8110027c <main>
811034f4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
811034f8:	01000044 	movi	r4,1
811034fc:	11030b40 	call	811030b4 <close>
  exit (result);
81103500:	e13fff17 	ldw	r4,-4(fp)
81103504:	11082d00 	call	811082d0 <exit>

81103508 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
81103508:	defffe04 	addi	sp,sp,-8
8110350c:	df000115 	stw	fp,4(sp)
81103510:	df000104 	addi	fp,sp,4
81103514:	e13fff15 	stw	r4,-4(fp)
}
81103518:	0001883a 	nop
8110351c:	e037883a 	mov	sp,fp
81103520:	df000017 	ldw	fp,0(sp)
81103524:	dec00104 	addi	sp,sp,4
81103528:	f800283a 	ret

8110352c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
8110352c:	defffe04 	addi	sp,sp,-8
81103530:	df000115 	stw	fp,4(sp)
81103534:	df000104 	addi	fp,sp,4
81103538:	e13fff15 	stw	r4,-4(fp)
}
8110353c:	0001883a 	nop
81103540:	e037883a 	mov	sp,fp
81103544:	df000017 	ldw	fp,0(sp)
81103548:	dec00104 	addi	sp,sp,4
8110354c:	f800283a 	ret

81103550 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81103550:	defffe04 	addi	sp,sp,-8
81103554:	dfc00115 	stw	ra,4(sp)
81103558:	df000015 	stw	fp,0(sp)
8110355c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81103560:	d0a00917 	ldw	r2,-32732(gp)
81103564:	10000326 	beq	r2,zero,81103574 <alt_get_errno+0x24>
81103568:	d0a00917 	ldw	r2,-32732(gp)
8110356c:	103ee83a 	callr	r2
81103570:	00000106 	br	81103578 <alt_get_errno+0x28>
81103574:	d0a01504 	addi	r2,gp,-32684
}
81103578:	e037883a 	mov	sp,fp
8110357c:	dfc00117 	ldw	ra,4(sp)
81103580:	df000017 	ldw	fp,0(sp)
81103584:	dec00204 	addi	sp,sp,8
81103588:	f800283a 	ret

8110358c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
8110358c:	defff904 	addi	sp,sp,-28
81103590:	dfc00615 	stw	ra,24(sp)
81103594:	df000515 	stw	fp,20(sp)
81103598:	df000504 	addi	fp,sp,20
8110359c:	e13ffd15 	stw	r4,-12(fp)
811035a0:	e17ffe15 	stw	r5,-8(fp)
811035a4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
811035a8:	e0bffd17 	ldw	r2,-12(fp)
811035ac:	10000616 	blt	r2,zero,811035c8 <read+0x3c>
811035b0:	e0bffd17 	ldw	r2,-12(fp)
811035b4:	10c00324 	muli	r3,r2,12
811035b8:	00a04474 	movhi	r2,33041
811035bc:	10a4fb04 	addi	r2,r2,-27668
811035c0:	1885883a 	add	r2,r3,r2
811035c4:	00000106 	br	811035cc <read+0x40>
811035c8:	0005883a 	mov	r2,zero
811035cc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
811035d0:	e0bffb17 	ldw	r2,-20(fp)
811035d4:	10002226 	beq	r2,zero,81103660 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
811035d8:	e0bffb17 	ldw	r2,-20(fp)
811035dc:	10800217 	ldw	r2,8(r2)
811035e0:	108000cc 	andi	r2,r2,3
811035e4:	10800060 	cmpeqi	r2,r2,1
811035e8:	1000181e 	bne	r2,zero,8110364c <read+0xc0>
        (fd->dev->read))
811035ec:	e0bffb17 	ldw	r2,-20(fp)
811035f0:	10800017 	ldw	r2,0(r2)
811035f4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
811035f8:	10001426 	beq	r2,zero,8110364c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
811035fc:	e0bffb17 	ldw	r2,-20(fp)
81103600:	10800017 	ldw	r2,0(r2)
81103604:	10800517 	ldw	r2,20(r2)
81103608:	e0ffff17 	ldw	r3,-4(fp)
8110360c:	180d883a 	mov	r6,r3
81103610:	e17ffe17 	ldw	r5,-8(fp)
81103614:	e13ffb17 	ldw	r4,-20(fp)
81103618:	103ee83a 	callr	r2
8110361c:	e0bffc15 	stw	r2,-16(fp)
81103620:	e0bffc17 	ldw	r2,-16(fp)
81103624:	1000070e 	bge	r2,zero,81103644 <read+0xb8>
        {
          ALT_ERRNO = -rval;
81103628:	11035500 	call	81103550 <alt_get_errno>
8110362c:	1007883a 	mov	r3,r2
81103630:	e0bffc17 	ldw	r2,-16(fp)
81103634:	0085c83a 	sub	r2,zero,r2
81103638:	18800015 	stw	r2,0(r3)
          return -1;
8110363c:	00bfffc4 	movi	r2,-1
81103640:	00000c06 	br	81103674 <read+0xe8>
        }
        return rval;
81103644:	e0bffc17 	ldw	r2,-16(fp)
81103648:	00000a06 	br	81103674 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
8110364c:	11035500 	call	81103550 <alt_get_errno>
81103650:	1007883a 	mov	r3,r2
81103654:	00800344 	movi	r2,13
81103658:	18800015 	stw	r2,0(r3)
8110365c:	00000406 	br	81103670 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
81103660:	11035500 	call	81103550 <alt_get_errno>
81103664:	1007883a 	mov	r3,r2
81103668:	00801444 	movi	r2,81
8110366c:	18800015 	stw	r2,0(r3)
  }
  return -1;
81103670:	00bfffc4 	movi	r2,-1
}
81103674:	e037883a 	mov	sp,fp
81103678:	dfc00117 	ldw	ra,4(sp)
8110367c:	df000017 	ldw	fp,0(sp)
81103680:	dec00204 	addi	sp,sp,8
81103684:	f800283a 	ret

81103688 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
81103688:	defffe04 	addi	sp,sp,-8
8110368c:	df000115 	stw	fp,4(sp)
81103690:	df000104 	addi	fp,sp,4
81103694:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
81103698:	e0bfff17 	ldw	r2,-4(fp)
8110369c:	108000d0 	cmplti	r2,r2,3
811036a0:	10000d1e 	bne	r2,zero,811036d8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
811036a4:	00a04474 	movhi	r2,33041
811036a8:	10a4fb04 	addi	r2,r2,-27668
811036ac:	e0ffff17 	ldw	r3,-4(fp)
811036b0:	18c00324 	muli	r3,r3,12
811036b4:	10c5883a 	add	r2,r2,r3
811036b8:	10800204 	addi	r2,r2,8
811036bc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
811036c0:	00a04474 	movhi	r2,33041
811036c4:	10a4fb04 	addi	r2,r2,-27668
811036c8:	e0ffff17 	ldw	r3,-4(fp)
811036cc:	18c00324 	muli	r3,r3,12
811036d0:	10c5883a 	add	r2,r2,r3
811036d4:	10000015 	stw	zero,0(r2)
  }
}
811036d8:	0001883a 	nop
811036dc:	e037883a 	mov	sp,fp
811036e0:	df000017 	ldw	fp,0(sp)
811036e4:	dec00104 	addi	sp,sp,4
811036e8:	f800283a 	ret

811036ec <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
811036ec:	defff904 	addi	sp,sp,-28
811036f0:	df000615 	stw	fp,24(sp)
811036f4:	df000604 	addi	fp,sp,24
811036f8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811036fc:	0005303a 	rdctl	r2,status
81103700:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81103704:	e0fffe17 	ldw	r3,-8(fp)
81103708:	00bfff84 	movi	r2,-2
8110370c:	1884703a 	and	r2,r3,r2
81103710:	1001703a 	wrctl	status,r2
  
  return context;
81103714:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
81103718:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
8110371c:	d0a00a17 	ldw	r2,-32728(gp)
81103720:	10c000c4 	addi	r3,r2,3
81103724:	00bfff04 	movi	r2,-4
81103728:	1884703a 	and	r2,r3,r2
8110372c:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
81103730:	d0e00a17 	ldw	r3,-32728(gp)
81103734:	e0bfff17 	ldw	r2,-4(fp)
81103738:	1887883a 	add	r3,r3,r2
8110373c:	00a04834 	movhi	r2,33056
81103740:	10a80004 	addi	r2,r2,-24576
81103744:	10c0062e 	bgeu	r2,r3,81103760 <sbrk+0x74>
81103748:	e0bffb17 	ldw	r2,-20(fp)
8110374c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81103750:	e0bffa17 	ldw	r2,-24(fp)
81103754:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
81103758:	00bfffc4 	movi	r2,-1
8110375c:	00000b06 	br	8110378c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
81103760:	d0a00a17 	ldw	r2,-32728(gp)
81103764:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
81103768:	d0e00a17 	ldw	r3,-32728(gp)
8110376c:	e0bfff17 	ldw	r2,-4(fp)
81103770:	1885883a 	add	r2,r3,r2
81103774:	d0a00a15 	stw	r2,-32728(gp)
81103778:	e0bffb17 	ldw	r2,-20(fp)
8110377c:	e0bffc15 	stw	r2,-16(fp)
81103780:	e0bffc17 	ldw	r2,-16(fp)
81103784:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
81103788:	e0bffd17 	ldw	r2,-12(fp)
} 
8110378c:	e037883a 	mov	sp,fp
81103790:	df000017 	ldw	fp,0(sp)
81103794:	dec00104 	addi	sp,sp,4
81103798:	f800283a 	ret

8110379c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8110379c:	defffe04 	addi	sp,sp,-8
811037a0:	dfc00115 	stw	ra,4(sp)
811037a4:	df000015 	stw	fp,0(sp)
811037a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
811037ac:	d0a00917 	ldw	r2,-32732(gp)
811037b0:	10000326 	beq	r2,zero,811037c0 <alt_get_errno+0x24>
811037b4:	d0a00917 	ldw	r2,-32732(gp)
811037b8:	103ee83a 	callr	r2
811037bc:	00000106 	br	811037c4 <alt_get_errno+0x28>
811037c0:	d0a01504 	addi	r2,gp,-32684
}
811037c4:	e037883a 	mov	sp,fp
811037c8:	dfc00117 	ldw	ra,4(sp)
811037cc:	df000017 	ldw	fp,0(sp)
811037d0:	dec00204 	addi	sp,sp,8
811037d4:	f800283a 	ret

811037d8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
811037d8:	defff904 	addi	sp,sp,-28
811037dc:	dfc00615 	stw	ra,24(sp)
811037e0:	df000515 	stw	fp,20(sp)
811037e4:	df000504 	addi	fp,sp,20
811037e8:	e13ffd15 	stw	r4,-12(fp)
811037ec:	e17ffe15 	stw	r5,-8(fp)
811037f0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
811037f4:	e0bffd17 	ldw	r2,-12(fp)
811037f8:	10000616 	blt	r2,zero,81103814 <write+0x3c>
811037fc:	e0bffd17 	ldw	r2,-12(fp)
81103800:	10c00324 	muli	r3,r2,12
81103804:	00a04474 	movhi	r2,33041
81103808:	10a4fb04 	addi	r2,r2,-27668
8110380c:	1885883a 	add	r2,r3,r2
81103810:	00000106 	br	81103818 <write+0x40>
81103814:	0005883a 	mov	r2,zero
81103818:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
8110381c:	e0bffb17 	ldw	r2,-20(fp)
81103820:	10002126 	beq	r2,zero,811038a8 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
81103824:	e0bffb17 	ldw	r2,-20(fp)
81103828:	10800217 	ldw	r2,8(r2)
8110382c:	108000cc 	andi	r2,r2,3
81103830:	10001826 	beq	r2,zero,81103894 <write+0xbc>
81103834:	e0bffb17 	ldw	r2,-20(fp)
81103838:	10800017 	ldw	r2,0(r2)
8110383c:	10800617 	ldw	r2,24(r2)
81103840:	10001426 	beq	r2,zero,81103894 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
81103844:	e0bffb17 	ldw	r2,-20(fp)
81103848:	10800017 	ldw	r2,0(r2)
8110384c:	10800617 	ldw	r2,24(r2)
81103850:	e0ffff17 	ldw	r3,-4(fp)
81103854:	180d883a 	mov	r6,r3
81103858:	e17ffe17 	ldw	r5,-8(fp)
8110385c:	e13ffb17 	ldw	r4,-20(fp)
81103860:	103ee83a 	callr	r2
81103864:	e0bffc15 	stw	r2,-16(fp)
81103868:	e0bffc17 	ldw	r2,-16(fp)
8110386c:	1000070e 	bge	r2,zero,8110388c <write+0xb4>
      {
        ALT_ERRNO = -rval;
81103870:	110379c0 	call	8110379c <alt_get_errno>
81103874:	1007883a 	mov	r3,r2
81103878:	e0bffc17 	ldw	r2,-16(fp)
8110387c:	0085c83a 	sub	r2,zero,r2
81103880:	18800015 	stw	r2,0(r3)
        return -1;
81103884:	00bfffc4 	movi	r2,-1
81103888:	00000c06 	br	811038bc <write+0xe4>
      }
      return rval;
8110388c:	e0bffc17 	ldw	r2,-16(fp)
81103890:	00000a06 	br	811038bc <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
81103894:	110379c0 	call	8110379c <alt_get_errno>
81103898:	1007883a 	mov	r3,r2
8110389c:	00800344 	movi	r2,13
811038a0:	18800015 	stw	r2,0(r3)
811038a4:	00000406 	br	811038b8 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
811038a8:	110379c0 	call	8110379c <alt_get_errno>
811038ac:	1007883a 	mov	r3,r2
811038b0:	00801444 	movi	r2,81
811038b4:	18800015 	stw	r2,0(r3)
  }
  return -1;
811038b8:	00bfffc4 	movi	r2,-1
}
811038bc:	e037883a 	mov	sp,fp
811038c0:	dfc00117 	ldw	ra,4(sp)
811038c4:	df000017 	ldw	fp,0(sp)
811038c8:	dec00204 	addi	sp,sp,8
811038cc:	f800283a 	ret

811038d0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
811038d0:	defffd04 	addi	sp,sp,-12
811038d4:	dfc00215 	stw	ra,8(sp)
811038d8:	df000115 	stw	fp,4(sp)
811038dc:	df000104 	addi	fp,sp,4
811038e0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
811038e4:	d1600604 	addi	r5,gp,-32744
811038e8:	e13fff17 	ldw	r4,-4(fp)
811038ec:	110741c0 	call	8110741c <alt_dev_llist_insert>
}
811038f0:	e037883a 	mov	sp,fp
811038f4:	dfc00117 	ldw	ra,4(sp)
811038f8:	df000017 	ldw	fp,0(sp)
811038fc:	dec00204 	addi	sp,sp,8
81103900:	f800283a 	ret

81103904 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
81103904:	defffd04 	addi	sp,sp,-12
81103908:	dfc00215 	stw	ra,8(sp)
8110390c:	df000115 	stw	fp,4(sp)
81103910:	df000104 	addi	fp,sp,4
81103914:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
81103918:	11080500 	call	81108050 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
8110391c:	00800044 	movi	r2,1
81103920:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
81103924:	0001883a 	nop
81103928:	e037883a 	mov	sp,fp
8110392c:	dfc00117 	ldw	ra,4(sp)
81103930:	df000017 	ldw	fp,0(sp)
81103934:	dec00204 	addi	sp,sp,8
81103938:	f800283a 	ret

8110393c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
8110393c:	defffe04 	addi	sp,sp,-8
81103940:	dfc00115 	stw	ra,4(sp)
81103944:	df000015 	stw	fp,0(sp)
81103948:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_1MS, timer_1ms);
8110394c:	01c0fa04 	movi	r7,1000
81103950:	018000c4 	movi	r6,3
81103954:	000b883a 	mov	r5,zero
81103958:	01200034 	movhi	r4,32768
8110395c:	21000804 	addi	r4,r4,32
81103960:	110526c0 	call	8110526c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1US, timer_1us);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
81103964:	01800084 	movi	r6,2
81103968:	000b883a 	mov	r5,zero
8110396c:	01204474 	movhi	r4,33041
81103970:	21256504 	addi	r4,r4,-27244
81103974:	1103b5c0 	call	81103b5c <altera_avalon_jtag_uart_init>
81103978:	01204474 	movhi	r4,33041
8110397c:	21255b04 	addi	r4,r4,-27284
81103980:	11038d00 	call	811038d0 <alt_dev_reg>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_RX, sgdma_rx);
81103984:	01800044 	movi	r6,1
81103988:	000b883a 	mov	r5,zero
8110398c:	01204474 	movhi	r4,33041
81103990:	21297304 	addi	r4,r4,-23092
81103994:	110514c0 	call	8110514c <alt_avalon_sgdma_init>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_TX, sgdma_tx);
81103998:	000d883a 	mov	r6,zero
8110399c:	000b883a 	mov	r5,zero
811039a0:	01204474 	movhi	r4,33041
811039a4:	21297f04 	addi	r4,r4,-23044
811039a8:	110514c0 	call	8110514c <alt_avalon_sgdma_init>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
811039ac:	0001883a 	nop
    ALTERA_ETH_TSE_INIT ( TSE_MAC, tse_mac);
811039b0:	0001883a 	nop
    ALTERA_MSGDMA_INIT ( DMA_DDR_M, dma_DDR_M);
811039b4:	00a04474 	movhi	r2,33041
811039b8:	10a98b04 	addi	r2,r2,-22996
811039bc:	10c00717 	ldw	r3,28(r2)
811039c0:	00a04474 	movhi	r2,33041
811039c4:	10a98b04 	addi	r2,r2,-22996
811039c8:	10800817 	ldw	r2,32(r2)
811039cc:	100d883a 	mov	r6,r2
811039d0:	180b883a 	mov	r5,r3
811039d4:	01204474 	movhi	r4,33041
811039d8:	21298b04 	addi	r4,r4,-22996
811039dc:	1106eb40 	call	81106eb4 <alt_msgdma_init>
}
811039e0:	0001883a 	nop
811039e4:	e037883a 	mov	sp,fp
811039e8:	dfc00117 	ldw	ra,4(sp)
811039ec:	df000017 	ldw	fp,0(sp)
811039f0:	dec00204 	addi	sp,sp,8
811039f4:	f800283a 	ret

811039f8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
811039f8:	defffa04 	addi	sp,sp,-24
811039fc:	dfc00515 	stw	ra,20(sp)
81103a00:	df000415 	stw	fp,16(sp)
81103a04:	df000404 	addi	fp,sp,16
81103a08:	e13ffd15 	stw	r4,-12(fp)
81103a0c:	e17ffe15 	stw	r5,-8(fp)
81103a10:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
81103a14:	e0bffd17 	ldw	r2,-12(fp)
81103a18:	10800017 	ldw	r2,0(r2)
81103a1c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
81103a20:	e0bffc17 	ldw	r2,-16(fp)
81103a24:	10c00a04 	addi	r3,r2,40
81103a28:	e0bffd17 	ldw	r2,-12(fp)
81103a2c:	10800217 	ldw	r2,8(r2)
81103a30:	100f883a 	mov	r7,r2
81103a34:	e1bfff17 	ldw	r6,-4(fp)
81103a38:	e17ffe17 	ldw	r5,-8(fp)
81103a3c:	1809883a 	mov	r4,r3
81103a40:	11040200 	call	81104020 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
81103a44:	e037883a 	mov	sp,fp
81103a48:	dfc00117 	ldw	ra,4(sp)
81103a4c:	df000017 	ldw	fp,0(sp)
81103a50:	dec00204 	addi	sp,sp,8
81103a54:	f800283a 	ret

81103a58 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
81103a58:	defffa04 	addi	sp,sp,-24
81103a5c:	dfc00515 	stw	ra,20(sp)
81103a60:	df000415 	stw	fp,16(sp)
81103a64:	df000404 	addi	fp,sp,16
81103a68:	e13ffd15 	stw	r4,-12(fp)
81103a6c:	e17ffe15 	stw	r5,-8(fp)
81103a70:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
81103a74:	e0bffd17 	ldw	r2,-12(fp)
81103a78:	10800017 	ldw	r2,0(r2)
81103a7c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
81103a80:	e0bffc17 	ldw	r2,-16(fp)
81103a84:	10c00a04 	addi	r3,r2,40
81103a88:	e0bffd17 	ldw	r2,-12(fp)
81103a8c:	10800217 	ldw	r2,8(r2)
81103a90:	100f883a 	mov	r7,r2
81103a94:	e1bfff17 	ldw	r6,-4(fp)
81103a98:	e17ffe17 	ldw	r5,-8(fp)
81103a9c:	1809883a 	mov	r4,r3
81103aa0:	110423c0 	call	8110423c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
81103aa4:	e037883a 	mov	sp,fp
81103aa8:	dfc00117 	ldw	ra,4(sp)
81103aac:	df000017 	ldw	fp,0(sp)
81103ab0:	dec00204 	addi	sp,sp,8
81103ab4:	f800283a 	ret

81103ab8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
81103ab8:	defffc04 	addi	sp,sp,-16
81103abc:	dfc00315 	stw	ra,12(sp)
81103ac0:	df000215 	stw	fp,8(sp)
81103ac4:	df000204 	addi	fp,sp,8
81103ac8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
81103acc:	e0bfff17 	ldw	r2,-4(fp)
81103ad0:	10800017 	ldw	r2,0(r2)
81103ad4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
81103ad8:	e0bffe17 	ldw	r2,-8(fp)
81103adc:	10c00a04 	addi	r3,r2,40
81103ae0:	e0bfff17 	ldw	r2,-4(fp)
81103ae4:	10800217 	ldw	r2,8(r2)
81103ae8:	100b883a 	mov	r5,r2
81103aec:	1809883a 	mov	r4,r3
81103af0:	1103ec80 	call	81103ec8 <altera_avalon_jtag_uart_close>
}
81103af4:	e037883a 	mov	sp,fp
81103af8:	dfc00117 	ldw	ra,4(sp)
81103afc:	df000017 	ldw	fp,0(sp)
81103b00:	dec00204 	addi	sp,sp,8
81103b04:	f800283a 	ret

81103b08 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
81103b08:	defffa04 	addi	sp,sp,-24
81103b0c:	dfc00515 	stw	ra,20(sp)
81103b10:	df000415 	stw	fp,16(sp)
81103b14:	df000404 	addi	fp,sp,16
81103b18:	e13ffd15 	stw	r4,-12(fp)
81103b1c:	e17ffe15 	stw	r5,-8(fp)
81103b20:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
81103b24:	e0bffd17 	ldw	r2,-12(fp)
81103b28:	10800017 	ldw	r2,0(r2)
81103b2c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
81103b30:	e0bffc17 	ldw	r2,-16(fp)
81103b34:	10800a04 	addi	r2,r2,40
81103b38:	e1bfff17 	ldw	r6,-4(fp)
81103b3c:	e17ffe17 	ldw	r5,-8(fp)
81103b40:	1009883a 	mov	r4,r2
81103b44:	1103f300 	call	81103f30 <altera_avalon_jtag_uart_ioctl>
}
81103b48:	e037883a 	mov	sp,fp
81103b4c:	dfc00117 	ldw	ra,4(sp)
81103b50:	df000017 	ldw	fp,0(sp)
81103b54:	dec00204 	addi	sp,sp,8
81103b58:	f800283a 	ret

81103b5c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
81103b5c:	defffa04 	addi	sp,sp,-24
81103b60:	dfc00515 	stw	ra,20(sp)
81103b64:	df000415 	stw	fp,16(sp)
81103b68:	df000404 	addi	fp,sp,16
81103b6c:	e13ffd15 	stw	r4,-12(fp)
81103b70:	e17ffe15 	stw	r5,-8(fp)
81103b74:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
81103b78:	e0bffd17 	ldw	r2,-12(fp)
81103b7c:	00c00044 	movi	r3,1
81103b80:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
81103b84:	e0bffd17 	ldw	r2,-12(fp)
81103b88:	10800017 	ldw	r2,0(r2)
81103b8c:	10800104 	addi	r2,r2,4
81103b90:	1007883a 	mov	r3,r2
81103b94:	e0bffd17 	ldw	r2,-12(fp)
81103b98:	10800817 	ldw	r2,32(r2)
81103b9c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
81103ba0:	e0bffe17 	ldw	r2,-8(fp)
81103ba4:	e0ffff17 	ldw	r3,-4(fp)
81103ba8:	d8000015 	stw	zero,0(sp)
81103bac:	e1fffd17 	ldw	r7,-12(fp)
81103bb0:	01a04434 	movhi	r6,33040
81103bb4:	318f0704 	addi	r6,r6,15388
81103bb8:	180b883a 	mov	r5,r3
81103bbc:	1009883a 	mov	r4,r2
81103bc0:	11076100 	call	81107610 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
81103bc4:	e0bffd17 	ldw	r2,-12(fp)
81103bc8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
81103bcc:	e0bffd17 	ldw	r2,-12(fp)
81103bd0:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81103bd4:	d0e01a17 	ldw	r3,-32664(gp)
81103bd8:	e1fffd17 	ldw	r7,-12(fp)
81103bdc:	01a04434 	movhi	r6,33040
81103be0:	318f8a04 	addi	r6,r6,15912
81103be4:	180b883a 	mov	r5,r3
81103be8:	1009883a 	mov	r4,r2
81103bec:	11071640 	call	81107164 <alt_alarm_start>
81103bf0:	1000040e 	bge	r2,zero,81103c04 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
81103bf4:	e0fffd17 	ldw	r3,-12(fp)
81103bf8:	00a00034 	movhi	r2,32768
81103bfc:	10bfffc4 	addi	r2,r2,-1
81103c00:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
81103c04:	0001883a 	nop
81103c08:	e037883a 	mov	sp,fp
81103c0c:	dfc00117 	ldw	ra,4(sp)
81103c10:	df000017 	ldw	fp,0(sp)
81103c14:	dec00204 	addi	sp,sp,8
81103c18:	f800283a 	ret

81103c1c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
81103c1c:	defff804 	addi	sp,sp,-32
81103c20:	df000715 	stw	fp,28(sp)
81103c24:	df000704 	addi	fp,sp,28
81103c28:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
81103c2c:	e0bfff17 	ldw	r2,-4(fp)
81103c30:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
81103c34:	e0bffb17 	ldw	r2,-20(fp)
81103c38:	10800017 	ldw	r2,0(r2)
81103c3c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
81103c40:	e0bffc17 	ldw	r2,-16(fp)
81103c44:	10800104 	addi	r2,r2,4
81103c48:	10800037 	ldwio	r2,0(r2)
81103c4c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
81103c50:	e0bffd17 	ldw	r2,-12(fp)
81103c54:	1080c00c 	andi	r2,r2,768
81103c58:	10006d26 	beq	r2,zero,81103e10 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
81103c5c:	e0bffd17 	ldw	r2,-12(fp)
81103c60:	1080400c 	andi	r2,r2,256
81103c64:	10003526 	beq	r2,zero,81103d3c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
81103c68:	00800074 	movhi	r2,1
81103c6c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
81103c70:	e0bffb17 	ldw	r2,-20(fp)
81103c74:	10800a17 	ldw	r2,40(r2)
81103c78:	10800044 	addi	r2,r2,1
81103c7c:	1081ffcc 	andi	r2,r2,2047
81103c80:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
81103c84:	e0bffb17 	ldw	r2,-20(fp)
81103c88:	10c00b17 	ldw	r3,44(r2)
81103c8c:	e0bffe17 	ldw	r2,-8(fp)
81103c90:	18801526 	beq	r3,r2,81103ce8 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
81103c94:	e0bffc17 	ldw	r2,-16(fp)
81103c98:	10800037 	ldwio	r2,0(r2)
81103c9c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
81103ca0:	e0bff917 	ldw	r2,-28(fp)
81103ca4:	10a0000c 	andi	r2,r2,32768
81103ca8:	10001126 	beq	r2,zero,81103cf0 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
81103cac:	e0bffb17 	ldw	r2,-20(fp)
81103cb0:	10800a17 	ldw	r2,40(r2)
81103cb4:	e0fff917 	ldw	r3,-28(fp)
81103cb8:	1809883a 	mov	r4,r3
81103cbc:	e0fffb17 	ldw	r3,-20(fp)
81103cc0:	1885883a 	add	r2,r3,r2
81103cc4:	10800e04 	addi	r2,r2,56
81103cc8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
81103ccc:	e0bffb17 	ldw	r2,-20(fp)
81103cd0:	10800a17 	ldw	r2,40(r2)
81103cd4:	10800044 	addi	r2,r2,1
81103cd8:	10c1ffcc 	andi	r3,r2,2047
81103cdc:	e0bffb17 	ldw	r2,-20(fp)
81103ce0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
81103ce4:	003fe206 	br	81103c70 <__reset+0xfb0e3c70>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
81103ce8:	0001883a 	nop
81103cec:	00000106 	br	81103cf4 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
81103cf0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
81103cf4:	e0bff917 	ldw	r2,-28(fp)
81103cf8:	10bfffec 	andhi	r2,r2,65535
81103cfc:	10000f26 	beq	r2,zero,81103d3c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
81103d00:	e0bffb17 	ldw	r2,-20(fp)
81103d04:	10c00817 	ldw	r3,32(r2)
81103d08:	00bfff84 	movi	r2,-2
81103d0c:	1886703a 	and	r3,r3,r2
81103d10:	e0bffb17 	ldw	r2,-20(fp)
81103d14:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
81103d18:	e0bffc17 	ldw	r2,-16(fp)
81103d1c:	10800104 	addi	r2,r2,4
81103d20:	1007883a 	mov	r3,r2
81103d24:	e0bffb17 	ldw	r2,-20(fp)
81103d28:	10800817 	ldw	r2,32(r2)
81103d2c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
81103d30:	e0bffc17 	ldw	r2,-16(fp)
81103d34:	10800104 	addi	r2,r2,4
81103d38:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
81103d3c:	e0bffd17 	ldw	r2,-12(fp)
81103d40:	1080800c 	andi	r2,r2,512
81103d44:	103fbe26 	beq	r2,zero,81103c40 <__reset+0xfb0e3c40>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
81103d48:	e0bffd17 	ldw	r2,-12(fp)
81103d4c:	1004d43a 	srli	r2,r2,16
81103d50:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
81103d54:	00001406 	br	81103da8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
81103d58:	e0bffc17 	ldw	r2,-16(fp)
81103d5c:	e0fffb17 	ldw	r3,-20(fp)
81103d60:	18c00d17 	ldw	r3,52(r3)
81103d64:	e13ffb17 	ldw	r4,-20(fp)
81103d68:	20c7883a 	add	r3,r4,r3
81103d6c:	18c20e04 	addi	r3,r3,2104
81103d70:	18c00003 	ldbu	r3,0(r3)
81103d74:	18c03fcc 	andi	r3,r3,255
81103d78:	18c0201c 	xori	r3,r3,128
81103d7c:	18ffe004 	addi	r3,r3,-128
81103d80:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
81103d84:	e0bffb17 	ldw	r2,-20(fp)
81103d88:	10800d17 	ldw	r2,52(r2)
81103d8c:	10800044 	addi	r2,r2,1
81103d90:	10c1ffcc 	andi	r3,r2,2047
81103d94:	e0bffb17 	ldw	r2,-20(fp)
81103d98:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
81103d9c:	e0bffa17 	ldw	r2,-24(fp)
81103da0:	10bfffc4 	addi	r2,r2,-1
81103da4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
81103da8:	e0bffa17 	ldw	r2,-24(fp)
81103dac:	10000526 	beq	r2,zero,81103dc4 <altera_avalon_jtag_uart_irq+0x1a8>
81103db0:	e0bffb17 	ldw	r2,-20(fp)
81103db4:	10c00d17 	ldw	r3,52(r2)
81103db8:	e0bffb17 	ldw	r2,-20(fp)
81103dbc:	10800c17 	ldw	r2,48(r2)
81103dc0:	18bfe51e 	bne	r3,r2,81103d58 <__reset+0xfb0e3d58>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
81103dc4:	e0bffa17 	ldw	r2,-24(fp)
81103dc8:	103f9d26 	beq	r2,zero,81103c40 <__reset+0xfb0e3c40>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
81103dcc:	e0bffb17 	ldw	r2,-20(fp)
81103dd0:	10c00817 	ldw	r3,32(r2)
81103dd4:	00bfff44 	movi	r2,-3
81103dd8:	1886703a 	and	r3,r3,r2
81103ddc:	e0bffb17 	ldw	r2,-20(fp)
81103de0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
81103de4:	e0bffb17 	ldw	r2,-20(fp)
81103de8:	10800017 	ldw	r2,0(r2)
81103dec:	10800104 	addi	r2,r2,4
81103df0:	1007883a 	mov	r3,r2
81103df4:	e0bffb17 	ldw	r2,-20(fp)
81103df8:	10800817 	ldw	r2,32(r2)
81103dfc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
81103e00:	e0bffc17 	ldw	r2,-16(fp)
81103e04:	10800104 	addi	r2,r2,4
81103e08:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
81103e0c:	003f8c06 	br	81103c40 <__reset+0xfb0e3c40>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
81103e10:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
81103e14:	0001883a 	nop
81103e18:	e037883a 	mov	sp,fp
81103e1c:	df000017 	ldw	fp,0(sp)
81103e20:	dec00104 	addi	sp,sp,4
81103e24:	f800283a 	ret

81103e28 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
81103e28:	defff804 	addi	sp,sp,-32
81103e2c:	df000715 	stw	fp,28(sp)
81103e30:	df000704 	addi	fp,sp,28
81103e34:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
81103e38:	e0bffb17 	ldw	r2,-20(fp)
81103e3c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
81103e40:	e0bff917 	ldw	r2,-28(fp)
81103e44:	10800017 	ldw	r2,0(r2)
81103e48:	10800104 	addi	r2,r2,4
81103e4c:	10800037 	ldwio	r2,0(r2)
81103e50:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
81103e54:	e0bffa17 	ldw	r2,-24(fp)
81103e58:	1081000c 	andi	r2,r2,1024
81103e5c:	10000b26 	beq	r2,zero,81103e8c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
81103e60:	e0bff917 	ldw	r2,-28(fp)
81103e64:	10800017 	ldw	r2,0(r2)
81103e68:	10800104 	addi	r2,r2,4
81103e6c:	1007883a 	mov	r3,r2
81103e70:	e0bff917 	ldw	r2,-28(fp)
81103e74:	10800817 	ldw	r2,32(r2)
81103e78:	10810014 	ori	r2,r2,1024
81103e7c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
81103e80:	e0bff917 	ldw	r2,-28(fp)
81103e84:	10000915 	stw	zero,36(r2)
81103e88:	00000a06 	br	81103eb4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
81103e8c:	e0bff917 	ldw	r2,-28(fp)
81103e90:	10c00917 	ldw	r3,36(r2)
81103e94:	00a00034 	movhi	r2,32768
81103e98:	10bfff04 	addi	r2,r2,-4
81103e9c:	10c00536 	bltu	r2,r3,81103eb4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
81103ea0:	e0bff917 	ldw	r2,-28(fp)
81103ea4:	10800917 	ldw	r2,36(r2)
81103ea8:	10c00044 	addi	r3,r2,1
81103eac:	e0bff917 	ldw	r2,-28(fp)
81103eb0:	10c00915 	stw	r3,36(r2)
81103eb4:	d0a01a17 	ldw	r2,-32664(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
81103eb8:	e037883a 	mov	sp,fp
81103ebc:	df000017 	ldw	fp,0(sp)
81103ec0:	dec00104 	addi	sp,sp,4
81103ec4:	f800283a 	ret

81103ec8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
81103ec8:	defffd04 	addi	sp,sp,-12
81103ecc:	df000215 	stw	fp,8(sp)
81103ed0:	df000204 	addi	fp,sp,8
81103ed4:	e13ffe15 	stw	r4,-8(fp)
81103ed8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
81103edc:	00000506 	br	81103ef4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
81103ee0:	e0bfff17 	ldw	r2,-4(fp)
81103ee4:	1090000c 	andi	r2,r2,16384
81103ee8:	10000226 	beq	r2,zero,81103ef4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
81103eec:	00bffd44 	movi	r2,-11
81103ef0:	00000b06 	br	81103f20 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
81103ef4:	e0bffe17 	ldw	r2,-8(fp)
81103ef8:	10c00d17 	ldw	r3,52(r2)
81103efc:	e0bffe17 	ldw	r2,-8(fp)
81103f00:	10800c17 	ldw	r2,48(r2)
81103f04:	18800526 	beq	r3,r2,81103f1c <altera_avalon_jtag_uart_close+0x54>
81103f08:	e0bffe17 	ldw	r2,-8(fp)
81103f0c:	10c00917 	ldw	r3,36(r2)
81103f10:	e0bffe17 	ldw	r2,-8(fp)
81103f14:	10800117 	ldw	r2,4(r2)
81103f18:	18bff136 	bltu	r3,r2,81103ee0 <__reset+0xfb0e3ee0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
81103f1c:	0005883a 	mov	r2,zero
}
81103f20:	e037883a 	mov	sp,fp
81103f24:	df000017 	ldw	fp,0(sp)
81103f28:	dec00104 	addi	sp,sp,4
81103f2c:	f800283a 	ret

81103f30 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
81103f30:	defffa04 	addi	sp,sp,-24
81103f34:	df000515 	stw	fp,20(sp)
81103f38:	df000504 	addi	fp,sp,20
81103f3c:	e13ffd15 	stw	r4,-12(fp)
81103f40:	e17ffe15 	stw	r5,-8(fp)
81103f44:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
81103f48:	00bff9c4 	movi	r2,-25
81103f4c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
81103f50:	e0bffe17 	ldw	r2,-8(fp)
81103f54:	10da8060 	cmpeqi	r3,r2,27137
81103f58:	1800031e 	bne	r3,zero,81103f68 <altera_avalon_jtag_uart_ioctl+0x38>
81103f5c:	109a80a0 	cmpeqi	r2,r2,27138
81103f60:	1000181e 	bne	r2,zero,81103fc4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
81103f64:	00002906 	br	8110400c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
81103f68:	e0bffd17 	ldw	r2,-12(fp)
81103f6c:	10c00117 	ldw	r3,4(r2)
81103f70:	00a00034 	movhi	r2,32768
81103f74:	10bfffc4 	addi	r2,r2,-1
81103f78:	18802126 	beq	r3,r2,81104000 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
81103f7c:	e0bfff17 	ldw	r2,-4(fp)
81103f80:	10800017 	ldw	r2,0(r2)
81103f84:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
81103f88:	e0bffc17 	ldw	r2,-16(fp)
81103f8c:	10800090 	cmplti	r2,r2,2
81103f90:	1000061e 	bne	r2,zero,81103fac <altera_avalon_jtag_uart_ioctl+0x7c>
81103f94:	e0fffc17 	ldw	r3,-16(fp)
81103f98:	00a00034 	movhi	r2,32768
81103f9c:	10bfffc4 	addi	r2,r2,-1
81103fa0:	18800226 	beq	r3,r2,81103fac <altera_avalon_jtag_uart_ioctl+0x7c>
81103fa4:	e0bffc17 	ldw	r2,-16(fp)
81103fa8:	00000206 	br	81103fb4 <altera_avalon_jtag_uart_ioctl+0x84>
81103fac:	00a00034 	movhi	r2,32768
81103fb0:	10bfff84 	addi	r2,r2,-2
81103fb4:	e0fffd17 	ldw	r3,-12(fp)
81103fb8:	18800115 	stw	r2,4(r3)
      rc = 0;
81103fbc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
81103fc0:	00000f06 	br	81104000 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
81103fc4:	e0bffd17 	ldw	r2,-12(fp)
81103fc8:	10c00117 	ldw	r3,4(r2)
81103fcc:	00a00034 	movhi	r2,32768
81103fd0:	10bfffc4 	addi	r2,r2,-1
81103fd4:	18800c26 	beq	r3,r2,81104008 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
81103fd8:	e0bffd17 	ldw	r2,-12(fp)
81103fdc:	10c00917 	ldw	r3,36(r2)
81103fe0:	e0bffd17 	ldw	r2,-12(fp)
81103fe4:	10800117 	ldw	r2,4(r2)
81103fe8:	1885803a 	cmpltu	r2,r3,r2
81103fec:	10c03fcc 	andi	r3,r2,255
81103ff0:	e0bfff17 	ldw	r2,-4(fp)
81103ff4:	10c00015 	stw	r3,0(r2)
      rc = 0;
81103ff8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
81103ffc:	00000206 	br	81104008 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
81104000:	0001883a 	nop
81104004:	00000106 	br	8110400c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
81104008:	0001883a 	nop

  default:
    break;
  }

  return rc;
8110400c:	e0bffb17 	ldw	r2,-20(fp)
}
81104010:	e037883a 	mov	sp,fp
81104014:	df000017 	ldw	fp,0(sp)
81104018:	dec00104 	addi	sp,sp,4
8110401c:	f800283a 	ret

81104020 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
81104020:	defff304 	addi	sp,sp,-52
81104024:	dfc00c15 	stw	ra,48(sp)
81104028:	df000b15 	stw	fp,44(sp)
8110402c:	df000b04 	addi	fp,sp,44
81104030:	e13ffc15 	stw	r4,-16(fp)
81104034:	e17ffd15 	stw	r5,-12(fp)
81104038:	e1bffe15 	stw	r6,-8(fp)
8110403c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
81104040:	e0bffd17 	ldw	r2,-12(fp)
81104044:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
81104048:	00004706 	br	81104168 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
8110404c:	e0bffc17 	ldw	r2,-16(fp)
81104050:	10800a17 	ldw	r2,40(r2)
81104054:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
81104058:	e0bffc17 	ldw	r2,-16(fp)
8110405c:	10800b17 	ldw	r2,44(r2)
81104060:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
81104064:	e0fff717 	ldw	r3,-36(fp)
81104068:	e0bff817 	ldw	r2,-32(fp)
8110406c:	18800536 	bltu	r3,r2,81104084 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
81104070:	e0fff717 	ldw	r3,-36(fp)
81104074:	e0bff817 	ldw	r2,-32(fp)
81104078:	1885c83a 	sub	r2,r3,r2
8110407c:	e0bff615 	stw	r2,-40(fp)
81104080:	00000406 	br	81104094 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
81104084:	00c20004 	movi	r3,2048
81104088:	e0bff817 	ldw	r2,-32(fp)
8110408c:	1885c83a 	sub	r2,r3,r2
81104090:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
81104094:	e0bff617 	ldw	r2,-40(fp)
81104098:	10001e26 	beq	r2,zero,81104114 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
8110409c:	e0fffe17 	ldw	r3,-8(fp)
811040a0:	e0bff617 	ldw	r2,-40(fp)
811040a4:	1880022e 	bgeu	r3,r2,811040b0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
811040a8:	e0bffe17 	ldw	r2,-8(fp)
811040ac:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
811040b0:	e0bffc17 	ldw	r2,-16(fp)
811040b4:	10c00e04 	addi	r3,r2,56
811040b8:	e0bff817 	ldw	r2,-32(fp)
811040bc:	1885883a 	add	r2,r3,r2
811040c0:	e1bff617 	ldw	r6,-40(fp)
811040c4:	100b883a 	mov	r5,r2
811040c8:	e13ff517 	ldw	r4,-44(fp)
811040cc:	11016f00 	call	811016f0 <memcpy>
      ptr   += n;
811040d0:	e0fff517 	ldw	r3,-44(fp)
811040d4:	e0bff617 	ldw	r2,-40(fp)
811040d8:	1885883a 	add	r2,r3,r2
811040dc:	e0bff515 	stw	r2,-44(fp)
      space -= n;
811040e0:	e0fffe17 	ldw	r3,-8(fp)
811040e4:	e0bff617 	ldw	r2,-40(fp)
811040e8:	1885c83a 	sub	r2,r3,r2
811040ec:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
811040f0:	e0fff817 	ldw	r3,-32(fp)
811040f4:	e0bff617 	ldw	r2,-40(fp)
811040f8:	1885883a 	add	r2,r3,r2
811040fc:	10c1ffcc 	andi	r3,r2,2047
81104100:	e0bffc17 	ldw	r2,-16(fp)
81104104:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
81104108:	e0bffe17 	ldw	r2,-8(fp)
8110410c:	00bfcf16 	blt	zero,r2,8110404c <__reset+0xfb0e404c>
81104110:	00000106 	br	81104118 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
81104114:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
81104118:	e0fff517 	ldw	r3,-44(fp)
8110411c:	e0bffd17 	ldw	r2,-12(fp)
81104120:	1880141e 	bne	r3,r2,81104174 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
81104124:	e0bfff17 	ldw	r2,-4(fp)
81104128:	1090000c 	andi	r2,r2,16384
8110412c:	1000131e 	bne	r2,zero,8110417c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
81104130:	0001883a 	nop
81104134:	e0bffc17 	ldw	r2,-16(fp)
81104138:	10c00a17 	ldw	r3,40(r2)
8110413c:	e0bff717 	ldw	r2,-36(fp)
81104140:	1880051e 	bne	r3,r2,81104158 <altera_avalon_jtag_uart_read+0x138>
81104144:	e0bffc17 	ldw	r2,-16(fp)
81104148:	10c00917 	ldw	r3,36(r2)
8110414c:	e0bffc17 	ldw	r2,-16(fp)
81104150:	10800117 	ldw	r2,4(r2)
81104154:	18bff736 	bltu	r3,r2,81104134 <__reset+0xfb0e4134>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
81104158:	e0bffc17 	ldw	r2,-16(fp)
8110415c:	10c00a17 	ldw	r3,40(r2)
81104160:	e0bff717 	ldw	r2,-36(fp)
81104164:	18800726 	beq	r3,r2,81104184 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
81104168:	e0bffe17 	ldw	r2,-8(fp)
8110416c:	00bfb716 	blt	zero,r2,8110404c <__reset+0xfb0e404c>
81104170:	00000506 	br	81104188 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
81104174:	0001883a 	nop
81104178:	00000306 	br	81104188 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
8110417c:	0001883a 	nop
81104180:	00000106 	br	81104188 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
81104184:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
81104188:	e0fff517 	ldw	r3,-44(fp)
8110418c:	e0bffd17 	ldw	r2,-12(fp)
81104190:	18801826 	beq	r3,r2,811041f4 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81104194:	0005303a 	rdctl	r2,status
81104198:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8110419c:	e0fffb17 	ldw	r3,-20(fp)
811041a0:	00bfff84 	movi	r2,-2
811041a4:	1884703a 	and	r2,r3,r2
811041a8:	1001703a 	wrctl	status,r2
  
  return context;
811041ac:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
811041b0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
811041b4:	e0bffc17 	ldw	r2,-16(fp)
811041b8:	10800817 	ldw	r2,32(r2)
811041bc:	10c00054 	ori	r3,r2,1
811041c0:	e0bffc17 	ldw	r2,-16(fp)
811041c4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
811041c8:	e0bffc17 	ldw	r2,-16(fp)
811041cc:	10800017 	ldw	r2,0(r2)
811041d0:	10800104 	addi	r2,r2,4
811041d4:	1007883a 	mov	r3,r2
811041d8:	e0bffc17 	ldw	r2,-16(fp)
811041dc:	10800817 	ldw	r2,32(r2)
811041e0:	18800035 	stwio	r2,0(r3)
811041e4:	e0bffa17 	ldw	r2,-24(fp)
811041e8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811041ec:	e0bff917 	ldw	r2,-28(fp)
811041f0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
811041f4:	e0fff517 	ldw	r3,-44(fp)
811041f8:	e0bffd17 	ldw	r2,-12(fp)
811041fc:	18800426 	beq	r3,r2,81104210 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
81104200:	e0fff517 	ldw	r3,-44(fp)
81104204:	e0bffd17 	ldw	r2,-12(fp)
81104208:	1885c83a 	sub	r2,r3,r2
8110420c:	00000606 	br	81104228 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
81104210:	e0bfff17 	ldw	r2,-4(fp)
81104214:	1090000c 	andi	r2,r2,16384
81104218:	10000226 	beq	r2,zero,81104224 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
8110421c:	00bffd44 	movi	r2,-11
81104220:	00000106 	br	81104228 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
81104224:	00bffec4 	movi	r2,-5
}
81104228:	e037883a 	mov	sp,fp
8110422c:	dfc00117 	ldw	ra,4(sp)
81104230:	df000017 	ldw	fp,0(sp)
81104234:	dec00204 	addi	sp,sp,8
81104238:	f800283a 	ret

8110423c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
8110423c:	defff304 	addi	sp,sp,-52
81104240:	dfc00c15 	stw	ra,48(sp)
81104244:	df000b15 	stw	fp,44(sp)
81104248:	df000b04 	addi	fp,sp,44
8110424c:	e13ffc15 	stw	r4,-16(fp)
81104250:	e17ffd15 	stw	r5,-12(fp)
81104254:	e1bffe15 	stw	r6,-8(fp)
81104258:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
8110425c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
81104260:	e0bffd17 	ldw	r2,-12(fp)
81104264:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
81104268:	00003706 	br	81104348 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
8110426c:	e0bffc17 	ldw	r2,-16(fp)
81104270:	10800c17 	ldw	r2,48(r2)
81104274:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
81104278:	e0bffc17 	ldw	r2,-16(fp)
8110427c:	10800d17 	ldw	r2,52(r2)
81104280:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
81104284:	e0fff917 	ldw	r3,-28(fp)
81104288:	e0bff517 	ldw	r2,-44(fp)
8110428c:	1880062e 	bgeu	r3,r2,811042a8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
81104290:	e0fff517 	ldw	r3,-44(fp)
81104294:	e0bff917 	ldw	r2,-28(fp)
81104298:	1885c83a 	sub	r2,r3,r2
8110429c:	10bfffc4 	addi	r2,r2,-1
811042a0:	e0bff615 	stw	r2,-40(fp)
811042a4:	00000b06 	br	811042d4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
811042a8:	e0bff517 	ldw	r2,-44(fp)
811042ac:	10000526 	beq	r2,zero,811042c4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
811042b0:	00c20004 	movi	r3,2048
811042b4:	e0bff917 	ldw	r2,-28(fp)
811042b8:	1885c83a 	sub	r2,r3,r2
811042bc:	e0bff615 	stw	r2,-40(fp)
811042c0:	00000406 	br	811042d4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
811042c4:	00c1ffc4 	movi	r3,2047
811042c8:	e0bff917 	ldw	r2,-28(fp)
811042cc:	1885c83a 	sub	r2,r3,r2
811042d0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
811042d4:	e0bff617 	ldw	r2,-40(fp)
811042d8:	10001e26 	beq	r2,zero,81104354 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
811042dc:	e0fffe17 	ldw	r3,-8(fp)
811042e0:	e0bff617 	ldw	r2,-40(fp)
811042e4:	1880022e 	bgeu	r3,r2,811042f0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
811042e8:	e0bffe17 	ldw	r2,-8(fp)
811042ec:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
811042f0:	e0bffc17 	ldw	r2,-16(fp)
811042f4:	10c20e04 	addi	r3,r2,2104
811042f8:	e0bff917 	ldw	r2,-28(fp)
811042fc:	1885883a 	add	r2,r3,r2
81104300:	e1bff617 	ldw	r6,-40(fp)
81104304:	e17ffd17 	ldw	r5,-12(fp)
81104308:	1009883a 	mov	r4,r2
8110430c:	11016f00 	call	811016f0 <memcpy>
      ptr   += n;
81104310:	e0fffd17 	ldw	r3,-12(fp)
81104314:	e0bff617 	ldw	r2,-40(fp)
81104318:	1885883a 	add	r2,r3,r2
8110431c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
81104320:	e0fffe17 	ldw	r3,-8(fp)
81104324:	e0bff617 	ldw	r2,-40(fp)
81104328:	1885c83a 	sub	r2,r3,r2
8110432c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
81104330:	e0fff917 	ldw	r3,-28(fp)
81104334:	e0bff617 	ldw	r2,-40(fp)
81104338:	1885883a 	add	r2,r3,r2
8110433c:	10c1ffcc 	andi	r3,r2,2047
81104340:	e0bffc17 	ldw	r2,-16(fp)
81104344:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
81104348:	e0bffe17 	ldw	r2,-8(fp)
8110434c:	00bfc716 	blt	zero,r2,8110426c <__reset+0xfb0e426c>
81104350:	00000106 	br	81104358 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
81104354:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81104358:	0005303a 	rdctl	r2,status
8110435c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81104360:	e0fffb17 	ldw	r3,-20(fp)
81104364:	00bfff84 	movi	r2,-2
81104368:	1884703a 	and	r2,r3,r2
8110436c:	1001703a 	wrctl	status,r2
  
  return context;
81104370:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
81104374:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
81104378:	e0bffc17 	ldw	r2,-16(fp)
8110437c:	10800817 	ldw	r2,32(r2)
81104380:	10c00094 	ori	r3,r2,2
81104384:	e0bffc17 	ldw	r2,-16(fp)
81104388:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
8110438c:	e0bffc17 	ldw	r2,-16(fp)
81104390:	10800017 	ldw	r2,0(r2)
81104394:	10800104 	addi	r2,r2,4
81104398:	1007883a 	mov	r3,r2
8110439c:	e0bffc17 	ldw	r2,-16(fp)
811043a0:	10800817 	ldw	r2,32(r2)
811043a4:	18800035 	stwio	r2,0(r3)
811043a8:	e0bffa17 	ldw	r2,-24(fp)
811043ac:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811043b0:	e0bff817 	ldw	r2,-32(fp)
811043b4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
811043b8:	e0bffe17 	ldw	r2,-8(fp)
811043bc:	0080100e 	bge	zero,r2,81104400 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
811043c0:	e0bfff17 	ldw	r2,-4(fp)
811043c4:	1090000c 	andi	r2,r2,16384
811043c8:	1000101e 	bne	r2,zero,8110440c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
811043cc:	0001883a 	nop
811043d0:	e0bffc17 	ldw	r2,-16(fp)
811043d4:	10c00d17 	ldw	r3,52(r2)
811043d8:	e0bff517 	ldw	r2,-44(fp)
811043dc:	1880051e 	bne	r3,r2,811043f4 <altera_avalon_jtag_uart_write+0x1b8>
811043e0:	e0bffc17 	ldw	r2,-16(fp)
811043e4:	10c00917 	ldw	r3,36(r2)
811043e8:	e0bffc17 	ldw	r2,-16(fp)
811043ec:	10800117 	ldw	r2,4(r2)
811043f0:	18bff736 	bltu	r3,r2,811043d0 <__reset+0xfb0e43d0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
811043f4:	e0bffc17 	ldw	r2,-16(fp)
811043f8:	10800917 	ldw	r2,36(r2)
811043fc:	1000051e 	bne	r2,zero,81104414 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
81104400:	e0bffe17 	ldw	r2,-8(fp)
81104404:	00bfd016 	blt	zero,r2,81104348 <__reset+0xfb0e4348>
81104408:	00000306 	br	81104418 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
8110440c:	0001883a 	nop
81104410:	00000106 	br	81104418 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
81104414:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
81104418:	e0fffd17 	ldw	r3,-12(fp)
8110441c:	e0bff717 	ldw	r2,-36(fp)
81104420:	18800426 	beq	r3,r2,81104434 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
81104424:	e0fffd17 	ldw	r3,-12(fp)
81104428:	e0bff717 	ldw	r2,-36(fp)
8110442c:	1885c83a 	sub	r2,r3,r2
81104430:	00000606 	br	8110444c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
81104434:	e0bfff17 	ldw	r2,-4(fp)
81104438:	1090000c 	andi	r2,r2,16384
8110443c:	10000226 	beq	r2,zero,81104448 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
81104440:	00bffd44 	movi	r2,-11
81104444:	00000106 	br	8110444c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
81104448:	00bffec4 	movi	r2,-5
}
8110444c:	e037883a 	mov	sp,fp
81104450:	dfc00117 	ldw	ra,4(sp)
81104454:	df000017 	ldw	fp,0(sp)
81104458:	dec00204 	addi	sp,sp,8
8110445c:	f800283a 	ret

81104460 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81104460:	defffe04 	addi	sp,sp,-8
81104464:	dfc00115 	stw	ra,4(sp)
81104468:	df000015 	stw	fp,0(sp)
8110446c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81104470:	d0a00917 	ldw	r2,-32732(gp)
81104474:	10000326 	beq	r2,zero,81104484 <alt_get_errno+0x24>
81104478:	d0a00917 	ldw	r2,-32732(gp)
8110447c:	103ee83a 	callr	r2
81104480:	00000106 	br	81104488 <alt_get_errno+0x28>
81104484:	d0a01504 	addi	r2,gp,-32684
}
81104488:	e037883a 	mov	sp,fp
8110448c:	dfc00117 	ldw	ra,4(sp)
81104490:	df000017 	ldw	fp,0(sp)
81104494:	dec00204 	addi	sp,sp,8
81104498:	f800283a 	ret

8110449c <alt_avalon_sgdma_do_async_transfer>:
 * - 0 for success, or various errors defined in <errno.h>
 */
int alt_avalon_sgdma_do_async_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
8110449c:	defffc04 	addi	sp,sp,-16
811044a0:	df000315 	stw	fp,12(sp)
811044a4:	df000304 	addi	fp,sp,12
811044a8:	e13ffe15 	stw	r4,-8(fp)
811044ac:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  /* Return with error immediately if controller is busy */
  if( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
811044b0:	e0bffe17 	ldw	r2,-8(fp)
811044b4:	10800317 	ldw	r2,12(r2)
811044b8:	10800037 	ldwio	r2,0(r2)
811044bc:	1080040c 	andi	r2,r2,16
811044c0:	10000226 	beq	r2,zero,811044cc <alt_avalon_sgdma_do_async_transfer+0x30>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    return -EBUSY;
811044c4:	00bffc04 	movi	r2,-16
811044c8:	00003906 	br	811045b0 <alt_avalon_sgdma_do_async_transfer+0x114>
  }

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
811044cc:	e0bffe17 	ldw	r2,-8(fp)
811044d0:	10800317 	ldw	r2,12(r2)
811044d4:	10800404 	addi	r2,r2,16
811044d8:	e0fffe17 	ldw	r3,-8(fp)
811044dc:	18c00317 	ldw	r3,12(r3)
811044e0:	18c00404 	addi	r3,r3,16
811044e4:	19000037 	ldwio	r4,0(r3)
811044e8:	00fff7c4 	movi	r3,-33
811044ec:	20c6703a 	and	r3,r4,r3
811044f0:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
811044f4:	e0bffe17 	ldw	r2,-8(fp)
811044f8:	10800317 	ldw	r2,12(r2)
811044fc:	00c03fc4 	movi	r3,255
81104500:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
81104504:	e0bffe17 	ldw	r2,-8(fp)
81104508:	10800317 	ldw	r2,12(r2)
8110450c:	10800804 	addi	r2,r2,32
81104510:	e0ffff17 	ldw	r3,-4(fp)
81104514:	10c00035 	stwio	r3,0(r2)
   *  - Stop on an error with any particular descriptor
   *  - Include any control register bits registered with along with
   *    the callback routine (effectively, interrupts are controlled
   *    via the control bits set during callback-register time).
   */
  if(dev->callback) {
81104518:	e0bffe17 	ldw	r2,-8(fp)
8110451c:	10800917 	ldw	r2,36(r2)
81104520:	10001126 	beq	r2,zero,81104568 <alt_avalon_sgdma_do_async_transfer+0xcc>
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
81104524:	e0bffe17 	ldw	r2,-8(fp)
81104528:	10800317 	ldw	r2,12(r2)
8110452c:	10800404 	addi	r2,r2,16
81104530:	10800037 	ldwio	r2,0(r2)
81104534:	e0bffd15 	stw	r2,-12(fp)

    control |= (dev->chain_control                          |
81104538:	e0bffe17 	ldw	r2,-8(fp)
8110453c:	10c00b17 	ldw	r3,44(r2)
81104540:	e0bffd17 	ldw	r2,-12(fp)
81104544:	1884b03a 	or	r2,r3,r2
81104548:	10801814 	ori	r2,r2,96
8110454c:	e0bffd15 	stw	r2,-12(fp)
                ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK  );

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
81104550:	e0bffe17 	ldw	r2,-8(fp)
81104554:	10800317 	ldw	r2,12(r2)
81104558:	10800404 	addi	r2,r2,16
8110455c:	e0fffd17 	ldw	r3,-12(fp)
81104560:	10c00035 	stwio	r3,0(r2)
81104564:	00001106 	br	811045ac <alt_avalon_sgdma_do_async_transfer+0x110>
   *   - Run
   *   - Stop on an error with any particular descriptor
   *   - Disable interrupt generation
   */
  else {
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
81104568:	e0bffe17 	ldw	r2,-8(fp)
8110456c:	10800317 	ldw	r2,12(r2)
81104570:	10800404 	addi	r2,r2,16
81104574:	10800037 	ldwio	r2,0(r2)
81104578:	e0bffd15 	stw	r2,-12(fp)

    control |= (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
8110457c:	e0bffd17 	ldw	r2,-12(fp)
81104580:	10801814 	ori	r2,r2,96
81104584:	e0bffd15 	stw	r2,-12(fp)
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK );
    control &= ~ALTERA_AVALON_SGDMA_CONTROL_IE_GLOBAL_MSK;
81104588:	e0fffd17 	ldw	r3,-12(fp)
8110458c:	00bffbc4 	movi	r2,-17
81104590:	1884703a 	and	r2,r3,r2
81104594:	e0bffd15 	stw	r2,-12(fp)

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
81104598:	e0bffe17 	ldw	r2,-8(fp)
8110459c:	10800317 	ldw	r2,12(r2)
811045a0:	10800404 	addi	r2,r2,16
811045a4:	e0fffd17 	ldw	r3,-12(fp)
811045a8:	10c00035 	stwio	r3,0(r2)

  /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
  return 0;
811045ac:	0005883a 	mov	r2,zero
}
811045b0:	e037883a 	mov	sp,fp
811045b4:	df000017 	ldw	fp,0(sp)
811045b8:	dec00104 	addi	sp,sp,4
811045bc:	f800283a 	ret

811045c0 <alt_avalon_sgdma_do_sync_transfer>:
 * - status: Content of SGDMA status register.
 */
alt_u8 alt_avalon_sgdma_do_sync_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
811045c0:	defffc04 	addi	sp,sp,-16
811045c4:	df000315 	stw	fp,12(sp)
811045c8:	df000304 	addi	fp,sp,12
811045cc:	e13ffe15 	stw	r4,-8(fp)
811045d0:	e17fff15 	stw	r5,-4(fp)
  alt_u8 status;

  /* Wait for any pending transfers to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
811045d4:	0001883a 	nop
811045d8:	e0bffe17 	ldw	r2,-8(fp)
811045dc:	10800317 	ldw	r2,12(r2)
811045e0:	10800037 	ldwio	r2,0(r2)
811045e4:	1080040c 	andi	r2,r2,16
811045e8:	103ffb1e 	bne	r2,zero,811045d8 <__reset+0xfb0e45d8>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );


  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
811045ec:	e0bffe17 	ldw	r2,-8(fp)
811045f0:	10800317 	ldw	r2,12(r2)
811045f4:	10800404 	addi	r2,r2,16
811045f8:	e0fffe17 	ldw	r3,-8(fp)
811045fc:	18c00317 	ldw	r3,12(r3)
81104600:	18c00404 	addi	r3,r3,16
81104604:	19000037 	ldwio	r4,0(r3)
81104608:	00fff7c4 	movi	r3,-33
8110460c:	20c6703a 	and	r3,r4,r3
81104610:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
81104614:	e0bffe17 	ldw	r2,-8(fp)
81104618:	10800317 	ldw	r2,12(r2)
8110461c:	00c03fc4 	movi	r3,255
81104620:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
81104624:	e0bffe17 	ldw	r2,-8(fp)
81104628:	10800317 	ldw	r2,12(r2)
8110462c:	10800804 	addi	r2,r2,32
81104630:	e0ffff17 	ldw	r3,-4(fp)
81104634:	10c00035 	stwio	r3,0(r2)
   * Set up SGDMA controller to:
   * - Disable interrupt generation
   * - Run once a valid descriptor is written to controller
   * - Stop on an error with any particular descriptor
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
81104638:	e0bffe17 	ldw	r2,-8(fp)
8110463c:	10800317 	ldw	r2,12(r2)
81104640:	10800404 	addi	r2,r2,16
81104644:	e0fffe17 	ldw	r3,-8(fp)
81104648:	18c00317 	ldw	r3,12(r3)
8110464c:	18c00404 	addi	r3,r3,16
81104650:	18c00037 	ldwio	r3,0(r3)
81104654:	18c01814 	ori	r3,r3,96
81104658:	10c00035 	stwio	r3,0(r2)
    (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK |
     ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK | 
     IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base)) );

  /* Wait for the descriptor (chain) to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
8110465c:	0001883a 	nop
81104660:	e0bffe17 	ldw	r2,-8(fp)
81104664:	10800317 	ldw	r2,12(r2)
81104668:	10800037 	ldwio	r2,0(r2)
8110466c:	1080040c 	andi	r2,r2,16
81104670:	103ffb1e 	bne	r2,zero,81104660 <__reset+0xfb0e4660>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
81104674:	e0bffe17 	ldw	r2,-8(fp)
81104678:	10800317 	ldw	r2,12(r2)
8110467c:	10800404 	addi	r2,r2,16
81104680:	e0fffe17 	ldw	r3,-8(fp)
81104684:	18c00317 	ldw	r3,12(r3)
81104688:	18c00404 	addi	r3,r3,16
8110468c:	19000037 	ldwio	r4,0(r3)
81104690:	00fff7c4 	movi	r3,-33
81104694:	20c6703a 	and	r3,r4,r3
81104698:	10c00035 	stwio	r3,0(r2)
    (IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) &
     ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK) );

  /* Get & clear status register contents */
  status = IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base);
8110469c:	e0bffe17 	ldw	r2,-8(fp)
811046a0:	10800317 	ldw	r2,12(r2)
811046a4:	10800037 	ldwio	r2,0(r2)
811046a8:	e0bffd05 	stb	r2,-12(fp)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
811046ac:	e0bffe17 	ldw	r2,-8(fp)
811046b0:	10800317 	ldw	r2,12(r2)
811046b4:	00c03fc4 	movi	r3,255
811046b8:	10c00035 	stwio	r3,0(r2)

  return status;
811046bc:	e0bffd03 	ldbu	r2,-12(fp)
}
811046c0:	e037883a 	mov	sp,fp
811046c4:	df000017 	ldw	fp,0(sp)
811046c8:	dec00104 	addi	sp,sp,4
811046cc:	f800283a 	ret

811046d0 <alt_avalon_sgdma_construct_mem_to_mem_desc>:
  alt_u32              *read_addr,
  alt_u32              *write_addr,
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed)
{
811046d0:	defff404 	addi	sp,sp,-48
811046d4:	dfc00b15 	stw	ra,44(sp)
811046d8:	df000a15 	stw	fp,40(sp)
811046dc:	df000a04 	addi	fp,sp,40
811046e0:	e13ffb15 	stw	r4,-20(fp)
811046e4:	e17ffc15 	stw	r5,-16(fp)
811046e8:	e1bffd15 	stw	r6,-12(fp)
811046ec:	e1fffe15 	stw	r7,-8(fp)
811046f0:	e0800217 	ldw	r2,8(fp)
811046f4:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_mem_desc_burst(desc, next, read_addr, 
811046f8:	e0bfff0b 	ldhu	r2,-4(fp)
811046fc:	d8000415 	stw	zero,16(sp)
81104700:	d8000315 	stw	zero,12(sp)
81104704:	e0c00417 	ldw	r3,16(fp)
81104708:	d8c00215 	stw	r3,8(sp)
8110470c:	e0c00317 	ldw	r3,12(fp)
81104710:	d8c00115 	stw	r3,4(sp)
81104714:	d8800015 	stw	r2,0(sp)
81104718:	e1fffe17 	ldw	r7,-8(fp)
8110471c:	e1bffd17 	ldw	r6,-12(fp)
81104720:	e17ffc17 	ldw	r5,-16(fp)
81104724:	e13ffb17 	ldw	r4,-20(fp)
81104728:	11047440 	call	81104744 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>
    write_addr, length, read_fixed, write_fixed, 0, 0);
}
8110472c:	0001883a 	nop
81104730:	e037883a 	mov	sp,fp
81104734:	dfc00117 	ldw	ra,4(sp)
81104738:	df000017 	ldw	fp,0(sp)
8110473c:	dec00204 	addi	sp,sp,8
81104740:	f800283a 	ret

81104744 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>:
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed,
  int                   read_burst,
  int                   write_burst)
{
81104744:	defff204 	addi	sp,sp,-56
81104748:	dfc00d15 	stw	ra,52(sp)
8110474c:	df000c15 	stw	fp,48(sp)
81104750:	df000c04 	addi	fp,sp,48
81104754:	e13ffb15 	stw	r4,-20(fp)
81104758:	e17ffc15 	stw	r5,-16(fp)
8110475c:	e1bffd15 	stw	r6,-12(fp)
81104760:	e1fffe15 	stw	r7,-8(fp)
81104764:	e0800217 	ldw	r2,8(fp)
81104768:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
8110476c:	e0bfff0b 	ldhu	r2,-4(fp)
81104770:	d8000615 	stw	zero,24(sp)
81104774:	e0c00617 	ldw	r3,24(fp)
81104778:	d8c00515 	stw	r3,20(sp)
8110477c:	e0c00517 	ldw	r3,20(fp)
81104780:	d8c00415 	stw	r3,16(sp)
81104784:	e0c00417 	ldw	r3,16(fp)
81104788:	d8c00315 	stw	r3,12(sp)
8110478c:	e0c00317 	ldw	r3,12(fp)
81104790:	d8c00215 	stw	r3,8(sp)
81104794:	d8000115 	stw	zero,4(sp)
81104798:	d8800015 	stw	r2,0(sp)
8110479c:	e1fffe17 	ldw	r7,-8(fp)
811047a0:	e1bffd17 	ldw	r6,-12(fp)
811047a4:	e17ffc17 	ldw	r5,-16(fp)
811047a8:	e13ffb17 	ldw	r4,-20(fp)
811047ac:	1104cd80 	call	81104cd8 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    write_fixed,
    read_burst,
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in mem-to-mem mode
}
811047b0:	0001883a 	nop
811047b4:	e037883a 	mov	sp,fp
811047b8:	dfc00117 	ldw	ra,4(sp)
811047bc:	df000017 	ldw	fp,0(sp)
811047c0:	dec00204 	addi	sp,sp,8
811047c4:	f800283a 	ret

811047c8 <alt_avalon_sgdma_construct_stream_to_mem_desc>:
  alt_sgdma_descriptor *desc,
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed)
{
811047c8:	defff804 	addi	sp,sp,-32
811047cc:	dfc00715 	stw	ra,28(sp)
811047d0:	df000615 	stw	fp,24(sp)
811047d4:	df000604 	addi	fp,sp,24
811047d8:	e13ffc15 	stw	r4,-16(fp)
811047dc:	e17ffd15 	stw	r5,-12(fp)
811047e0:	e1bffe15 	stw	r6,-8(fp)
811047e4:	3805883a 	mov	r2,r7
811047e8:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_stream_to_mem_desc_burst(desc, next, write_addr, 
811047ec:	e0ffff0b 	ldhu	r3,-4(fp)
811047f0:	d8000115 	stw	zero,4(sp)
811047f4:	e0800217 	ldw	r2,8(fp)
811047f8:	d8800015 	stw	r2,0(sp)
811047fc:	180f883a 	mov	r7,r3
81104800:	e1bffe17 	ldw	r6,-8(fp)
81104804:	e17ffd17 	ldw	r5,-12(fp)
81104808:	e13ffc17 	ldw	r4,-16(fp)
8110480c:	11048280 	call	81104828 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>
    length_or_eop, write_fixed, 0);
}
81104810:	0001883a 	nop
81104814:	e037883a 	mov	sp,fp
81104818:	dfc00117 	ldw	ra,4(sp)
8110481c:	df000017 	ldw	fp,0(sp)
81104820:	dec00204 	addi	sp,sp,8
81104824:	f800283a 	ret

81104828 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>:
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed,
  int                   write_burst)
{
81104828:	defff304 	addi	sp,sp,-52
8110482c:	dfc00c15 	stw	ra,48(sp)
81104830:	df000b15 	stw	fp,44(sp)
81104834:	df000b04 	addi	fp,sp,44
81104838:	e13ffc15 	stw	r4,-16(fp)
8110483c:	e17ffd15 	stw	r5,-12(fp)
81104840:	e1bffe15 	stw	r6,-8(fp)
81104844:	3805883a 	mov	r2,r7
81104848:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
8110484c:	e0bfff0b 	ldhu	r2,-4(fp)
81104850:	d8000615 	stw	zero,24(sp)
81104854:	e0c00317 	ldw	r3,12(fp)
81104858:	d8c00515 	stw	r3,20(sp)
8110485c:	d8000415 	stw	zero,16(sp)
81104860:	e0c00217 	ldw	r3,8(fp)
81104864:	d8c00315 	stw	r3,12(sp)
81104868:	d8000215 	stw	zero,8(sp)
8110486c:	d8000115 	stw	zero,4(sp)
81104870:	d8800015 	stw	r2,0(sp)
81104874:	e1fffe17 	ldw	r7,-8(fp)
81104878:	000d883a 	mov	r6,zero
8110487c:	e17ffd17 	ldw	r5,-12(fp)
81104880:	e13ffc17 	ldw	r4,-16(fp)
81104884:	1104cd80 	call	81104cd8 <alt_avalon_sgdma_construct_descriptor_burst>
    0x0,            // Read fixed: N/A in stream-to-mem mode
    write_fixed,
    0,              // Read_burst : N/A in stream-to-mem mode
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in stream-to-mem mode
}
81104888:	0001883a 	nop
8110488c:	e037883a 	mov	sp,fp
81104890:	dfc00117 	ldw	ra,4(sp)
81104894:	df000017 	ldw	fp,0(sp)
81104898:	dec00204 	addi	sp,sp,8
8110489c:	f800283a 	ret

811048a0 <alt_avalon_sgdma_construct_mem_to_stream_desc>:
  alt_u16               length,
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  alt_u8                atlantic_channel)
{
811048a0:	defff404 	addi	sp,sp,-48
811048a4:	dfc00b15 	stw	ra,44(sp)
811048a8:	df000a15 	stw	fp,40(sp)
811048ac:	df000a04 	addi	fp,sp,40
811048b0:	e13ffb15 	stw	r4,-20(fp)
811048b4:	e17ffc15 	stw	r5,-16(fp)
811048b8:	e1bffd15 	stw	r6,-12(fp)
811048bc:	3807883a 	mov	r3,r7
811048c0:	e0800517 	ldw	r2,20(fp)
811048c4:	e0fffe0d 	sth	r3,-8(fp)
811048c8:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_stream_desc_burst(desc, next, read_addr, 
811048cc:	e0fffe0b 	ldhu	r3,-8(fp)
811048d0:	e0bfff03 	ldbu	r2,-4(fp)
811048d4:	d8800415 	stw	r2,16(sp)
811048d8:	d8000315 	stw	zero,12(sp)
811048dc:	e0800417 	ldw	r2,16(fp)
811048e0:	d8800215 	stw	r2,8(sp)
811048e4:	e0800317 	ldw	r2,12(fp)
811048e8:	d8800115 	stw	r2,4(sp)
811048ec:	e0800217 	ldw	r2,8(fp)
811048f0:	d8800015 	stw	r2,0(sp)
811048f4:	180f883a 	mov	r7,r3
811048f8:	e1bffd17 	ldw	r6,-12(fp)
811048fc:	e17ffc17 	ldw	r5,-16(fp)
81104900:	e13ffb17 	ldw	r4,-20(fp)
81104904:	11049200 	call	81104920 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>
    length, read_fixed, generate_sop, generate_eop, 0, atlantic_channel);

}
81104908:	0001883a 	nop
8110490c:	e037883a 	mov	sp,fp
81104910:	dfc00117 	ldw	ra,4(sp)
81104914:	df000017 	ldw	fp,0(sp)
81104918:	dec00204 	addi	sp,sp,8
8110491c:	f800283a 	ret

81104920 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>:
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  int                   read_burst,
  alt_u8                atlantic_channel)
{
81104920:	defff204 	addi	sp,sp,-56
81104924:	dfc00d15 	stw	ra,52(sp)
81104928:	df000c15 	stw	fp,48(sp)
8110492c:	df000c04 	addi	fp,sp,48
81104930:	e13ffb15 	stw	r4,-20(fp)
81104934:	e17ffc15 	stw	r5,-16(fp)
81104938:	e1bffd15 	stw	r6,-12(fp)
8110493c:	3807883a 	mov	r3,r7
81104940:	e0800617 	ldw	r2,24(fp)
81104944:	e0fffe0d 	sth	r3,-8(fp)
81104948:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
8110494c:	e0bffe0b 	ldhu	r2,-8(fp)
81104950:	e0ffff03 	ldbu	r3,-4(fp)
81104954:	d8c00615 	stw	r3,24(sp)
81104958:	d8000515 	stw	zero,20(sp)
8110495c:	e0c00517 	ldw	r3,20(fp)
81104960:	d8c00415 	stw	r3,16(sp)
81104964:	e0c00317 	ldw	r3,12(fp)
81104968:	d8c00315 	stw	r3,12(sp)
8110496c:	e0c00217 	ldw	r3,8(fp)
81104970:	d8c00215 	stw	r3,8(sp)
81104974:	e0c00417 	ldw	r3,16(fp)
81104978:	d8c00115 	stw	r3,4(sp)
8110497c:	d8800015 	stw	r2,0(sp)
81104980:	000f883a 	mov	r7,zero
81104984:	e1bffd17 	ldw	r6,-12(fp)
81104988:	e17ffc17 	ldw	r5,-16(fp)
8110498c:	e13ffb17 	ldw	r4,-20(fp)
81104990:	1104cd80 	call	81104cd8 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    generate_sop,
    read_burst,
    0,                 // Write_burst : N/A in mem-to-stream mode
    atlantic_channel);
}
81104994:	0001883a 	nop
81104998:	e037883a 	mov	sp,fp
8110499c:	dfc00117 	ldw	ra,4(sp)
811049a0:	df000017 	ldw	fp,0(sp)
811049a4:	dec00204 	addi	sp,sp,8
811049a8:	f800283a 	ret

811049ac <alt_avalon_sgdma_register_callback>:
void alt_avalon_sgdma_register_callback(
  alt_sgdma_dev *dev,
  alt_avalon_sgdma_callback callback,
  alt_u32 chain_control,
  void *context)
{
811049ac:	defffb04 	addi	sp,sp,-20
811049b0:	df000415 	stw	fp,16(sp)
811049b4:	df000404 	addi	fp,sp,16
811049b8:	e13ffc15 	stw	r4,-16(fp)
811049bc:	e17ffd15 	stw	r5,-12(fp)
811049c0:	e1bffe15 	stw	r6,-8(fp)
811049c4:	e1ffff15 	stw	r7,-4(fp)
  dev->callback         = callback;
811049c8:	e0bffc17 	ldw	r2,-16(fp)
811049cc:	e0fffd17 	ldw	r3,-12(fp)
811049d0:	10c00915 	stw	r3,36(r2)
  dev->callback_context = context;
811049d4:	e0bffc17 	ldw	r2,-16(fp)
811049d8:	e0ffff17 	ldw	r3,-4(fp)
811049dc:	10c00a15 	stw	r3,40(r2)
  dev->chain_control    = chain_control;
811049e0:	e0bffc17 	ldw	r2,-16(fp)
811049e4:	e0fffe17 	ldw	r3,-8(fp)
811049e8:	10c00b15 	stw	r3,44(r2)
}
811049ec:	0001883a 	nop
811049f0:	e037883a 	mov	sp,fp
811049f4:	df000017 	ldw	fp,0(sp)
811049f8:	dec00104 	addi	sp,sp,4
811049fc:	f800283a 	ret

81104a00 <alt_avalon_sgdma_start>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct.
 */
void alt_avalon_sgdma_start(alt_sgdma_dev *dev)
{
81104a00:	defffd04 	addi	sp,sp,-12
81104a04:	df000215 	stw	fp,8(sp)
81104a08:	df000204 	addi	fp,sp,8
81104a0c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
81104a10:	e0bfff17 	ldw	r2,-4(fp)
81104a14:	10800317 	ldw	r2,12(r2)
81104a18:	10800404 	addi	r2,r2,16
81104a1c:	10800037 	ldwio	r2,0(r2)
81104a20:	e0bffe15 	stw	r2,-8(fp)
  control |= ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
81104a24:	e0bffe17 	ldw	r2,-8(fp)
81104a28:	10800814 	ori	r2,r2,32
81104a2c:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
81104a30:	e0bfff17 	ldw	r2,-4(fp)
81104a34:	10800317 	ldw	r2,12(r2)
81104a38:	10800404 	addi	r2,r2,16
81104a3c:	e0fffe17 	ldw	r3,-8(fp)
81104a40:	10c00035 	stwio	r3,0(r2)
}
81104a44:	0001883a 	nop
81104a48:	e037883a 	mov	sp,fp
81104a4c:	df000017 	ldw	fp,0(sp)
81104a50:	dec00104 	addi	sp,sp,4
81104a54:	f800283a 	ret

81104a58 <alt_avalon_sgdma_stop>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct
 */
void alt_avalon_sgdma_stop(alt_sgdma_dev *dev)
{
81104a58:	defffd04 	addi	sp,sp,-12
81104a5c:	df000215 	stw	fp,8(sp)
81104a60:	df000204 	addi	fp,sp,8
81104a64:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
81104a68:	e0bfff17 	ldw	r2,-4(fp)
81104a6c:	10800317 	ldw	r2,12(r2)
81104a70:	10800404 	addi	r2,r2,16
81104a74:	10800037 	ldwio	r2,0(r2)
81104a78:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
81104a7c:	e0fffe17 	ldw	r3,-8(fp)
81104a80:	00bff7c4 	movi	r2,-33
81104a84:	1884703a 	and	r2,r3,r2
81104a88:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
81104a8c:	e0bfff17 	ldw	r2,-4(fp)
81104a90:	10800317 	ldw	r2,12(r2)
81104a94:	10800404 	addi	r2,r2,16
81104a98:	e0fffe17 	ldw	r3,-8(fp)
81104a9c:	10c00035 	stwio	r3,0(r2)
}
81104aa0:	0001883a 	nop
81104aa4:	e037883a 	mov	sp,fp
81104aa8:	df000017 	ldw	fp,0(sp)
81104aac:	dec00104 	addi	sp,sp,4
81104ab0:	f800283a 	ret

81104ab4 <alt_avalon_sgdma_check_descriptor_status>:
 * - 0 if the descriptor is error-free, not "owned by hardware", or
 *   a previously requested transfer has appeared to have completed
 *   normally. Or, various error conditions defined in <errno.h>
 */
int alt_avalon_sgdma_check_descriptor_status(alt_sgdma_descriptor *desc)
{
81104ab4:	defffe04 	addi	sp,sp,-8
81104ab8:	df000115 	stw	fp,4(sp)
81104abc:	df000104 	addi	fp,sp,4
81104ac0:	e13fff15 	stw	r4,-4(fp)
  /* Errors take precedence */
  if( IORD_8DIRECT(&desc->status, 0) &
81104ac4:	e0bfff17 	ldw	r2,-4(fp)
81104ac8:	10800784 	addi	r2,r2,30
81104acc:	10800023 	ldbuio	r2,0(r2)
81104ad0:	10803fcc 	andi	r2,r2,255
81104ad4:	10801fcc 	andi	r2,r2,127
81104ad8:	10000226 	beq	r2,zero,81104ae4 <alt_avalon_sgdma_check_descriptor_status+0x30>
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_OVERFLOW_MSK |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_SYNC_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_UEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) {
    return -EIO;
81104adc:	00bffec4 	movi	r2,-5
81104ae0:	00000906 	br	81104b08 <alt_avalon_sgdma_check_descriptor_status+0x54>
  }

  if( IORD_8DIRECT(&desc->control, 0) &
81104ae4:	e0bfff17 	ldw	r2,-4(fp)
81104ae8:	108007c4 	addi	r2,r2,31
81104aec:	10800023 	ldbuio	r2,0(r2)
81104af0:	10803fcc 	andi	r2,r2,255
81104af4:	1080200c 	andi	r2,r2,128
81104af8:	10000226 	beq	r2,zero,81104b04 <alt_avalon_sgdma_check_descriptor_status+0x50>
      ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK) {
    return -EINPROGRESS;
81104afc:	00bfe244 	movi	r2,-119
81104b00:	00000106 	br	81104b08 <alt_avalon_sgdma_check_descriptor_status+0x54>
  }

    return 0;
81104b04:	0005883a 	mov	r2,zero
}
81104b08:	e037883a 	mov	sp,fp
81104b0c:	df000017 	ldw	fp,0(sp)
81104b10:	dec00104 	addi	sp,sp,4
81104b14:	f800283a 	ret

81104b18 <alt_avalon_sgdma_open>:
 * Returns:
 * - Pointer to SGDMA device instance struct, or null if the device
 *   could not be opened.
 */
alt_sgdma_dev* alt_avalon_sgdma_open (const char* name)
{
81104b18:	defffc04 	addi	sp,sp,-16
81104b1c:	dfc00315 	stw	ra,12(sp)
81104b20:	df000215 	stw	fp,8(sp)
81104b24:	df000204 	addi	fp,sp,8
81104b28:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev* dev;

  dev = (alt_sgdma_dev*) alt_find_dev (name, &alt_sgdma_list);
81104b2c:	d1600b04 	addi	r5,gp,-32724
81104b30:	e13fff17 	ldw	r4,-4(fp)
81104b34:	11075800 	call	81107580 <alt_find_dev>
81104b38:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev) {
81104b3c:	e0bffe17 	ldw	r2,-8(fp)
81104b40:	1000041e 	bne	r2,zero,81104b54 <alt_avalon_sgdma_open+0x3c>
    ALT_ERRNO = ENODEV;
81104b44:	11044600 	call	81104460 <alt_get_errno>
81104b48:	1007883a 	mov	r3,r2
81104b4c:	008004c4 	movi	r2,19
81104b50:	18800015 	stw	r2,0(r3)
  }

  return dev;
81104b54:	e0bffe17 	ldw	r2,-8(fp)
}
81104b58:	e037883a 	mov	sp,fp
81104b5c:	dfc00117 	ldw	ra,4(sp)
81104b60:	df000017 	ldw	fp,0(sp)
81104b64:	dec00204 	addi	sp,sp,8
81104b68:	f800283a 	ret

81104b6c <alt_avalon_sgdma_construct_descriptor>:
  alt_u16               length_or_eop,
  int                   generate_eop,
  int                   read_fixed,
  int                   write_fixed_or_sop,
  alt_u8                atlantic_channel)
{
81104b6c:	defff104 	addi	sp,sp,-60
81104b70:	dfc00e15 	stw	ra,56(sp)
81104b74:	df000d15 	stw	fp,52(sp)
81104b78:	df000d04 	addi	fp,sp,52
81104b7c:	e13ffa15 	stw	r4,-24(fp)
81104b80:	e17ffb15 	stw	r5,-20(fp)
81104b84:	e1bffc15 	stw	r6,-16(fp)
81104b88:	e1fffd15 	stw	r7,-12(fp)
81104b8c:	e0c00217 	ldw	r3,8(fp)
81104b90:	e0800617 	ldw	r2,24(fp)
81104b94:	e0fffe0d 	sth	r3,-8(fp)
81104b98:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(desc, next, read_addr, 
81104b9c:	e0bffe0b 	ldhu	r2,-8(fp)
81104ba0:	e0ffff03 	ldbu	r3,-4(fp)
81104ba4:	d8c00615 	stw	r3,24(sp)
81104ba8:	d8000515 	stw	zero,20(sp)
81104bac:	d8000415 	stw	zero,16(sp)
81104bb0:	e0c00517 	ldw	r3,20(fp)
81104bb4:	d8c00315 	stw	r3,12(sp)
81104bb8:	e0c00417 	ldw	r3,16(fp)
81104bbc:	d8c00215 	stw	r3,8(sp)
81104bc0:	e0c00317 	ldw	r3,12(fp)
81104bc4:	d8c00115 	stw	r3,4(sp)
81104bc8:	d8800015 	stw	r2,0(sp)
81104bcc:	e1fffd17 	ldw	r7,-12(fp)
81104bd0:	e1bffc17 	ldw	r6,-16(fp)
81104bd4:	e17ffb17 	ldw	r5,-20(fp)
81104bd8:	e13ffa17 	ldw	r4,-24(fp)
81104bdc:	1104cd80 	call	81104cd8 <alt_avalon_sgdma_construct_descriptor_burst>
    write_addr, length_or_eop, generate_eop, read_fixed, write_fixed_or_sop, 
    0, 0, atlantic_channel);
}
81104be0:	0001883a 	nop
81104be4:	e037883a 	mov	sp,fp
81104be8:	dfc00117 	ldw	ra,4(sp)
81104bec:	df000017 	ldw	fp,0(sp)
81104bf0:	dec00204 	addi	sp,sp,8
81104bf4:	f800283a 	ret

81104bf8 <alt_avalon_sgdma_enable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_enable_desc_poll(alt_sgdma_dev *dev, alt_u32 frequency)
{
81104bf8:	defffc04 	addi	sp,sp,-16
81104bfc:	df000315 	stw	fp,12(sp)
81104c00:	df000304 	addi	fp,sp,12
81104c04:	e13ffe15 	stw	r4,-8(fp)
81104c08:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
81104c0c:	e0bffe17 	ldw	r2,-8(fp)
81104c10:	10800317 	ldw	r2,12(r2)
81104c14:	10800404 	addi	r2,r2,16
81104c18:	10800037 	ldwio	r2,0(r2)
81104c1c:	e0bffd15 	stw	r2,-12(fp)
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
81104c20:	e0fffd17 	ldw	r3,-12(fp)
81104c24:	00a00434 	movhi	r2,32784
81104c28:	10bfffc4 	addi	r2,r2,-1
81104c2c:	1884703a 	and	r2,r3,r2
81104c30:	e0bffd15 	stw	r2,-12(fp)
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
81104c34:	e0bfff17 	ldw	r2,-4(fp)
81104c38:	1004953a 	slli	r2,r2,20
81104c3c:	10dffc2c 	andhi	r3,r2,32752

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
81104c40:	e0bffd17 	ldw	r2,-12(fp)
81104c44:	1884b03a 	or	r2,r3,r2
81104c48:	10800134 	orhi	r2,r2,4
81104c4c:	e0bffd15 	stw	r2,-12(fp)
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
            ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
81104c50:	e0bffe17 	ldw	r2,-8(fp)
81104c54:	10800317 	ldw	r2,12(r2)
81104c58:	10800404 	addi	r2,r2,16
81104c5c:	e0fffd17 	ldw	r3,-12(fp)
81104c60:	10c00035 	stwio	r3,0(r2)
  
  return;
81104c64:	0001883a 	nop
}
81104c68:	e037883a 	mov	sp,fp
81104c6c:	df000017 	ldw	fp,0(sp)
81104c70:	dec00104 	addi	sp,sp,4
81104c74:	f800283a 	ret

81104c78 <alt_avalon_sgdma_disable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_disable_desc_poll(alt_sgdma_dev *dev)
{
81104c78:	defffd04 	addi	sp,sp,-12
81104c7c:	df000215 	stw	fp,8(sp)
81104c80:	df000204 	addi	fp,sp,8
81104c84:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
81104c88:	e0bfff17 	ldw	r2,-4(fp)
81104c8c:	10800317 	ldw	r2,12(r2)
81104c90:	10800404 	addi	r2,r2,16
81104c94:	10800037 	ldwio	r2,0(r2)
81104c98:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK;
81104c9c:	e0fffe17 	ldw	r3,-8(fp)
81104ca0:	00bfff34 	movhi	r2,65532
81104ca4:	10bfffc4 	addi	r2,r2,-1
81104ca8:	1884703a 	and	r2,r3,r2
81104cac:	e0bffe15 	stw	r2,-8(fp)

  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
81104cb0:	e0bfff17 	ldw	r2,-4(fp)
81104cb4:	10800317 	ldw	r2,12(r2)
81104cb8:	10800404 	addi	r2,r2,16
81104cbc:	e0fffe17 	ldw	r3,-8(fp)
81104cc0:	10c00035 	stwio	r3,0(r2)
  
  return;
81104cc4:	0001883a 	nop
}
81104cc8:	e037883a 	mov	sp,fp
81104ccc:	df000017 	ldw	fp,0(sp)
81104cd0:	dec00104 	addi	sp,sp,4
81104cd4:	f800283a 	ret

81104cd8 <alt_avalon_sgdma_construct_descriptor_burst>:
  int                   read_fixed,
  int                   write_fixed_or_sop,
  int                   read_burst,
  int                   write_burst,
  alt_u8                atlantic_channel)
{
81104cd8:	defff804 	addi	sp,sp,-32
81104cdc:	dfc00715 	stw	ra,28(sp)
81104ce0:	df000615 	stw	fp,24(sp)
81104ce4:	df000604 	addi	fp,sp,24
81104ce8:	e13ffa15 	stw	r4,-24(fp)
81104cec:	e17ffb15 	stw	r5,-20(fp)
81104cf0:	e1bffc15 	stw	r6,-16(fp)
81104cf4:	e1fffd15 	stw	r7,-12(fp)
81104cf8:	e0c00217 	ldw	r3,8(fp)
81104cfc:	e0800817 	ldw	r2,32(fp)
81104d00:	e0fffe0d 	sth	r3,-8(fp)
81104d04:	e0bfff05 	stb	r2,-4(fp)
   * The SGDMA controller from continuing to process the chain. This is
   * done as a single IO write to bypass cache, without flushing
   * the entire descriptor, since only the 8-bit descriptor status must
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
81104d08:	e0bffb17 	ldw	r2,-20(fp)
81104d0c:	108007c4 	addi	r2,r2,31
81104d10:	e0fffb17 	ldw	r3,-20(fp)
81104d14:	18c007c3 	ldbu	r3,31(r3)
81104d18:	19003fcc 	andi	r4,r3,255
81104d1c:	00ffdfc4 	movi	r3,-129
81104d20:	20c6703a 	and	r3,r4,r3
81104d24:	10c00025 	stbio	r3,0(r2)
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
81104d28:	e0bffa17 	ldw	r2,-24(fp)
81104d2c:	e0fffc17 	ldw	r3,-16(fp)
81104d30:	19403fcc 	andi	r5,r3,255
81104d34:	10c00003 	ldbu	r3,0(r2)
81104d38:	1806703a 	and	r3,r3,zero
81104d3c:	1809883a 	mov	r4,r3
81104d40:	2807883a 	mov	r3,r5
81104d44:	20c6b03a 	or	r3,r4,r3
81104d48:	10c00005 	stb	r3,0(r2)
81104d4c:	e0fffc17 	ldw	r3,-16(fp)
81104d50:	1806d23a 	srli	r3,r3,8
81104d54:	19403fcc 	andi	r5,r3,255
81104d58:	10c00043 	ldbu	r3,1(r2)
81104d5c:	1806703a 	and	r3,r3,zero
81104d60:	1809883a 	mov	r4,r3
81104d64:	2807883a 	mov	r3,r5
81104d68:	20c6b03a 	or	r3,r4,r3
81104d6c:	10c00045 	stb	r3,1(r2)
81104d70:	e0fffc17 	ldw	r3,-16(fp)
81104d74:	1806d43a 	srli	r3,r3,16
81104d78:	19403fcc 	andi	r5,r3,255
81104d7c:	10c00083 	ldbu	r3,2(r2)
81104d80:	1806703a 	and	r3,r3,zero
81104d84:	1809883a 	mov	r4,r3
81104d88:	2807883a 	mov	r3,r5
81104d8c:	20c6b03a 	or	r3,r4,r3
81104d90:	10c00085 	stb	r3,2(r2)
81104d94:	e0fffc17 	ldw	r3,-16(fp)
81104d98:	180ad63a 	srli	r5,r3,24
81104d9c:	10c000c3 	ldbu	r3,3(r2)
81104da0:	1806703a 	and	r3,r3,zero
81104da4:	1809883a 	mov	r4,r3
81104da8:	2807883a 	mov	r3,r5
81104dac:	20c6b03a 	or	r3,r4,r3
81104db0:	10c000c5 	stb	r3,3(r2)
  desc->write_addr               = write_addr;
81104db4:	e0bffa17 	ldw	r2,-24(fp)
81104db8:	e0fffd17 	ldw	r3,-12(fp)
81104dbc:	19403fcc 	andi	r5,r3,255
81104dc0:	10c00203 	ldbu	r3,8(r2)
81104dc4:	1806703a 	and	r3,r3,zero
81104dc8:	1809883a 	mov	r4,r3
81104dcc:	2807883a 	mov	r3,r5
81104dd0:	20c6b03a 	or	r3,r4,r3
81104dd4:	10c00205 	stb	r3,8(r2)
81104dd8:	e0fffd17 	ldw	r3,-12(fp)
81104ddc:	1806d23a 	srli	r3,r3,8
81104de0:	19403fcc 	andi	r5,r3,255
81104de4:	10c00243 	ldbu	r3,9(r2)
81104de8:	1806703a 	and	r3,r3,zero
81104dec:	1809883a 	mov	r4,r3
81104df0:	2807883a 	mov	r3,r5
81104df4:	20c6b03a 	or	r3,r4,r3
81104df8:	10c00245 	stb	r3,9(r2)
81104dfc:	e0fffd17 	ldw	r3,-12(fp)
81104e00:	1806d43a 	srli	r3,r3,16
81104e04:	19403fcc 	andi	r5,r3,255
81104e08:	10c00283 	ldbu	r3,10(r2)
81104e0c:	1806703a 	and	r3,r3,zero
81104e10:	1809883a 	mov	r4,r3
81104e14:	2807883a 	mov	r3,r5
81104e18:	20c6b03a 	or	r3,r4,r3
81104e1c:	10c00285 	stb	r3,10(r2)
81104e20:	e0fffd17 	ldw	r3,-12(fp)
81104e24:	180ad63a 	srli	r5,r3,24
81104e28:	10c002c3 	ldbu	r3,11(r2)
81104e2c:	1806703a 	and	r3,r3,zero
81104e30:	1809883a 	mov	r4,r3
81104e34:	2807883a 	mov	r3,r5
81104e38:	20c6b03a 	or	r3,r4,r3
81104e3c:	10c002c5 	stb	r3,11(r2)
  desc->next                     = (alt_u32 *) next;
81104e40:	e0bffa17 	ldw	r2,-24(fp)
81104e44:	e0fffb17 	ldw	r3,-20(fp)
81104e48:	19403fcc 	andi	r5,r3,255
81104e4c:	10c00403 	ldbu	r3,16(r2)
81104e50:	1806703a 	and	r3,r3,zero
81104e54:	1809883a 	mov	r4,r3
81104e58:	2807883a 	mov	r3,r5
81104e5c:	20c6b03a 	or	r3,r4,r3
81104e60:	10c00405 	stb	r3,16(r2)
81104e64:	e0fffb17 	ldw	r3,-20(fp)
81104e68:	1806d23a 	srli	r3,r3,8
81104e6c:	19403fcc 	andi	r5,r3,255
81104e70:	10c00443 	ldbu	r3,17(r2)
81104e74:	1806703a 	and	r3,r3,zero
81104e78:	1809883a 	mov	r4,r3
81104e7c:	2807883a 	mov	r3,r5
81104e80:	20c6b03a 	or	r3,r4,r3
81104e84:	10c00445 	stb	r3,17(r2)
81104e88:	e0fffb17 	ldw	r3,-20(fp)
81104e8c:	1806d43a 	srli	r3,r3,16
81104e90:	19403fcc 	andi	r5,r3,255
81104e94:	10c00483 	ldbu	r3,18(r2)
81104e98:	1806703a 	and	r3,r3,zero
81104e9c:	1809883a 	mov	r4,r3
81104ea0:	2807883a 	mov	r3,r5
81104ea4:	20c6b03a 	or	r3,r4,r3
81104ea8:	10c00485 	stb	r3,18(r2)
81104eac:	e0fffb17 	ldw	r3,-20(fp)
81104eb0:	180ad63a 	srli	r5,r3,24
81104eb4:	10c004c3 	ldbu	r3,19(r2)
81104eb8:	1806703a 	and	r3,r3,zero
81104ebc:	1809883a 	mov	r4,r3
81104ec0:	2807883a 	mov	r3,r5
81104ec4:	20c6b03a 	or	r3,r4,r3
81104ec8:	10c004c5 	stb	r3,19(r2)
  desc->read_addr_pad            = 0x0;
81104ecc:	e0bffa17 	ldw	r2,-24(fp)
81104ed0:	10c00103 	ldbu	r3,4(r2)
81104ed4:	1806703a 	and	r3,r3,zero
81104ed8:	10c00105 	stb	r3,4(r2)
81104edc:	10c00143 	ldbu	r3,5(r2)
81104ee0:	1806703a 	and	r3,r3,zero
81104ee4:	10c00145 	stb	r3,5(r2)
81104ee8:	10c00183 	ldbu	r3,6(r2)
81104eec:	1806703a 	and	r3,r3,zero
81104ef0:	10c00185 	stb	r3,6(r2)
81104ef4:	10c001c3 	ldbu	r3,7(r2)
81104ef8:	1806703a 	and	r3,r3,zero
81104efc:	10c001c5 	stb	r3,7(r2)
  desc->write_addr_pad           = 0x0;
81104f00:	e0bffa17 	ldw	r2,-24(fp)
81104f04:	10c00303 	ldbu	r3,12(r2)
81104f08:	1806703a 	and	r3,r3,zero
81104f0c:	10c00305 	stb	r3,12(r2)
81104f10:	10c00343 	ldbu	r3,13(r2)
81104f14:	1806703a 	and	r3,r3,zero
81104f18:	10c00345 	stb	r3,13(r2)
81104f1c:	10c00383 	ldbu	r3,14(r2)
81104f20:	1806703a 	and	r3,r3,zero
81104f24:	10c00385 	stb	r3,14(r2)
81104f28:	10c003c3 	ldbu	r3,15(r2)
81104f2c:	1806703a 	and	r3,r3,zero
81104f30:	10c003c5 	stb	r3,15(r2)
  desc->next_pad                 = 0x0;
81104f34:	e0bffa17 	ldw	r2,-24(fp)
81104f38:	10c00503 	ldbu	r3,20(r2)
81104f3c:	1806703a 	and	r3,r3,zero
81104f40:	10c00505 	stb	r3,20(r2)
81104f44:	10c00543 	ldbu	r3,21(r2)
81104f48:	1806703a 	and	r3,r3,zero
81104f4c:	10c00545 	stb	r3,21(r2)
81104f50:	10c00583 	ldbu	r3,22(r2)
81104f54:	1806703a 	and	r3,r3,zero
81104f58:	10c00585 	stb	r3,22(r2)
81104f5c:	10c005c3 	ldbu	r3,23(r2)
81104f60:	1806703a 	and	r3,r3,zero
81104f64:	10c005c5 	stb	r3,23(r2)
  desc->bytes_to_transfer        = length_or_eop;
81104f68:	e0bffa17 	ldw	r2,-24(fp)
81104f6c:	e0fffe17 	ldw	r3,-8(fp)
81104f70:	19403fcc 	andi	r5,r3,255
81104f74:	10c00603 	ldbu	r3,24(r2)
81104f78:	1806703a 	and	r3,r3,zero
81104f7c:	1809883a 	mov	r4,r3
81104f80:	2807883a 	mov	r3,r5
81104f84:	20c6b03a 	or	r3,r4,r3
81104f88:	10c00605 	stb	r3,24(r2)
81104f8c:	e0fffe17 	ldw	r3,-8(fp)
81104f90:	1806d23a 	srli	r3,r3,8
81104f94:	19403fcc 	andi	r5,r3,255
81104f98:	10c00643 	ldbu	r3,25(r2)
81104f9c:	1806703a 	and	r3,r3,zero
81104fa0:	1809883a 	mov	r4,r3
81104fa4:	2807883a 	mov	r3,r5
81104fa8:	20c6b03a 	or	r3,r4,r3
81104fac:	10c00645 	stb	r3,25(r2)
  desc->actual_bytes_transferred = 0;
81104fb0:	e0bffa17 	ldw	r2,-24(fp)
81104fb4:	10c00703 	ldbu	r3,28(r2)
81104fb8:	1806703a 	and	r3,r3,zero
81104fbc:	10c00705 	stb	r3,28(r2)
81104fc0:	10c00743 	ldbu	r3,29(r2)
81104fc4:	1806703a 	and	r3,r3,zero
81104fc8:	10c00745 	stb	r3,29(r2)
  desc->status                   = 0x0;
81104fcc:	e0bffa17 	ldw	r2,-24(fp)
81104fd0:	10000785 	stb	zero,30(r2)

  /* SGDMA burst not currently supported */
  desc->read_burst               = read_burst;
81104fd4:	e0800617 	ldw	r2,24(fp)
81104fd8:	1007883a 	mov	r3,r2
81104fdc:	e0bffa17 	ldw	r2,-24(fp)
81104fe0:	10c00685 	stb	r3,26(r2)
  desc->write_burst              = write_burst;
81104fe4:	e0800717 	ldw	r2,28(fp)
81104fe8:	1007883a 	mov	r3,r2
81104fec:	e0bffa17 	ldw	r2,-24(fp)
81104ff0:	10c006c5 	stb	r3,27(r2)
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
81104ff4:	e0800317 	ldw	r2,12(fp)
81104ff8:	10000226 	beq	r2,zero,81105004 <alt_avalon_sgdma_construct_descriptor_burst+0x32c>
81104ffc:	00bfe044 	movi	r2,-127
81105000:	00000106 	br	81105008 <alt_avalon_sgdma_construct_descriptor_burst+0x330>
81105004:	00bfe004 	movi	r2,-128
81105008:	e0c00417 	ldw	r3,16(fp)
8110500c:	18000226 	beq	r3,zero,81105018 <alt_avalon_sgdma_construct_descriptor_burst+0x340>
81105010:	00c00084 	movi	r3,2
81105014:	00000106 	br	8110501c <alt_avalon_sgdma_construct_descriptor_burst+0x344>
81105018:	0007883a 	mov	r3,zero
8110501c:	10c4b03a 	or	r2,r2,r3
81105020:	1007883a 	mov	r3,r2
81105024:	e0800517 	ldw	r2,20(fp)
81105028:	10000226 	beq	r2,zero,81105034 <alt_avalon_sgdma_construct_descriptor_burst+0x35c>
8110502c:	00800104 	movi	r2,4
81105030:	00000106 	br	81105038 <alt_avalon_sgdma_construct_descriptor_burst+0x360>
81105034:	0005883a 	mov	r2,zero
81105038:	1884b03a 	or	r2,r3,r2
8110503c:	1007883a 	mov	r3,r2
81105040:	e0bfff03 	ldbu	r2,-4(fp)
81105044:	10000426 	beq	r2,zero,81105058 <alt_avalon_sgdma_construct_descriptor_burst+0x380>
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_GENERATE_EOP_MSK : 0x0)        |
    (read_fixed ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_READ_FIXED_ADDRESS_MSK : 0x0)  |
    (write_fixed_or_sop ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_WRITE_FIXED_ADDRESS_MSK : 0x0) |
    (atlantic_channel ? ( (atlantic_channel & 0x0F) << 3) : 0)
81105048:	e0bfff03 	ldbu	r2,-4(fp)
8110504c:	108003cc 	andi	r2,r2,15
81105050:	100490fa 	slli	r2,r2,3
81105054:	00000106 	br	8110505c <alt_avalon_sgdma_construct_descriptor_burst+0x384>
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
81105058:	0005883a 	mov	r2,zero
8110505c:	1884b03a 	or	r2,r3,r2
81105060:	1007883a 	mov	r3,r2
81105064:	e0bffa17 	ldw	r2,-24(fp)
81105068:	10c007c5 	stb	r3,31(r2)
  /*
   * Flush completed buffer out of cache. This is done rather than
   * individual cache-bypassed writes to take advantage of any
   * burst-capabilities in the memory we're writing to.
   */
  alt_dcache_flush(desc, sizeof(alt_sgdma_descriptor));
8110506c:	01400804 	movi	r5,32
81105070:	e13ffa17 	ldw	r4,-24(fp)
81105074:	11073b80 	call	811073b8 <alt_dcache_flush>
}
81105078:	0001883a 	nop
8110507c:	e037883a 	mov	sp,fp
81105080:	dfc00117 	ldw	ra,4(sp)
81105084:	df000017 	ldw	fp,0(sp)
81105088:	dec00204 	addi	sp,sp,8
8110508c:	f800283a 	ret

81105090 <alt_avalon_sgdma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_sgdma_irq(void *context)
#else
static void alt_avalon_sgdma_irq(void *context, alt_u32 id)
#endif
{
81105090:	defff904 	addi	sp,sp,-28
81105094:	dfc00615 	stw	ra,24(sp)
81105098:	df000515 	stw	fp,20(sp)
8110509c:	df000504 	addi	fp,sp,20
811050a0:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev *dev = (alt_sgdma_dev *) context;
811050a4:	e0bfff17 	ldw	r2,-4(fp)
811050a8:	e0bffb15 	stw	r2,-20(fp)
   * Note: This is explicitly done before calling user interrupt-handling
   * code rather than after; if user ISR code initiates another SGDMA
   * transfer which completes quickly, reading the control register after
   * the callback routine may result in a lost interrupt.
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
811050ac:	e0bffb17 	ldw	r2,-20(fp)
811050b0:	10800317 	ldw	r2,12(r2)
811050b4:	10800404 	addi	r2,r2,16
811050b8:	e0fffb17 	ldw	r3,-20(fp)
811050bc:	18c00317 	ldw	r3,12(r3)
811050c0:	18c00404 	addi	r3,r3,16
811050c4:	18c00037 	ldwio	r3,0(r3)
811050c8:	18e00034 	orhi	r3,r3,32768
811050cc:	10c00035 	stwio	r3,0(r2)
    IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) | 0x80000000);
  
  /* Dummy read to ensure IRQ is negated before the ISR returns */
  IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
811050d0:	e0bffb17 	ldw	r2,-20(fp)
811050d4:	10800317 	ldw	r2,12(r2)
811050d8:	10800404 	addi	r2,r2,16
811050dc:	10800037 	ldwio	r2,0(r2)
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the driver to support 
   * interrupt preemption.
   */
  if(dev->callback) {
811050e0:	e0bffb17 	ldw	r2,-20(fp)
811050e4:	10800917 	ldw	r2,36(r2)
811050e8:	10001226 	beq	r2,zero,81105134 <alt_avalon_sgdma_irq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811050ec:	0005303a 	rdctl	r2,status
811050f0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811050f4:	e0fffd17 	ldw	r3,-12(fp)
811050f8:	00bfff84 	movi	r2,-2
811050fc:	1884703a 	and	r2,r3,r2
81105100:	1001703a 	wrctl	status,r2
  
  return context;
81105104:	e0bffd17 	ldw	r2,-12(fp)
    cpu_sr = alt_irq_disable_all();
81105108:	e0bffc15 	stw	r2,-16(fp)
    (dev->callback)(dev->callback_context);
8110510c:	e0bffb17 	ldw	r2,-20(fp)
81105110:	10800917 	ldw	r2,36(r2)
81105114:	e0fffb17 	ldw	r3,-20(fp)
81105118:	18c00a17 	ldw	r3,40(r3)
8110511c:	1809883a 	mov	r4,r3
81105120:	103ee83a 	callr	r2
81105124:	e0bffc17 	ldw	r2,-16(fp)
81105128:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8110512c:	e0bffe17 	ldw	r2,-8(fp)
81105130:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
  }
}
81105134:	0001883a 	nop
81105138:	e037883a 	mov	sp,fp
8110513c:	dfc00117 	ldw	ra,4(sp)
81105140:	df000017 	ldw	fp,0(sp)
81105144:	dec00204 	addi	sp,sp,8
81105148:	f800283a 	ret

8110514c <alt_avalon_sgdma_init>:
 * This routine disables interrupts, future descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_avalon_sgdma_init (alt_sgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
8110514c:	defffa04 	addi	sp,sp,-24
81105150:	dfc00515 	stw	ra,20(sp)
81105154:	df000415 	stw	fp,16(sp)
81105158:	df000404 	addi	fp,sp,16
8110515c:	e13ffd15 	stw	r4,-12(fp)
81105160:	e17ffe15 	stw	r5,-8(fp)
81105164:	e1bfff15 	stw	r6,-4(fp)

  /* 
   * Halt any current transactions (reset the device)
   * SW reset is written twice per SGDMA documentation 
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
81105168:	e0bffd17 	ldw	r2,-12(fp)
8110516c:	10800317 	ldw	r2,12(r2)
81105170:	10800404 	addi	r2,r2,16
81105174:	00c00074 	movhi	r3,1
81105178:	10c00035 	stwio	r3,0(r2)
    ALTERA_AVALON_SGDMA_CONTROL_SOFTWARERESET_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
8110517c:	e0bffd17 	ldw	r2,-12(fp)
81105180:	10800317 	ldw	r2,12(r2)
81105184:	10800404 	addi	r2,r2,16
81105188:	00c00074 	movhi	r3,1
8110518c:	10c00035 	stwio	r3,0(r2)

  /*
   * Disable interrupts, halt future descriptor processing,
   * and clear status register content
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 0x0);
81105190:	e0bffd17 	ldw	r2,-12(fp)
81105194:	10800317 	ldw	r2,12(r2)
81105198:	10800404 	addi	r2,r2,16
8110519c:	0007883a 	mov	r3,zero
811051a0:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
811051a4:	e0bffd17 	ldw	r2,-12(fp)
811051a8:	10800317 	ldw	r2,12(r2)
811051ac:	00c03fc4 	movi	r3,255
811051b0:	10c00035 	stwio	r3,0(r2)

  /* Register this instance of the SGDMA controller with HAL */
  alt_dev_llist_insert((alt_dev_llist*) dev, &alt_sgdma_list);
811051b4:	d1600b04 	addi	r5,gp,-32724
811051b8:	e13ffd17 	ldw	r4,-12(fp)
811051bc:	110741c0 	call	8110741c <alt_dev_llist_insert>

  /* Install IRQ handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(ic_id, irq, alt_avalon_sgdma_irq, dev, 0x0);
811051c0:	d8000015 	stw	zero,0(sp)
811051c4:	e1fffd17 	ldw	r7,-12(fp)
811051c8:	01a04434 	movhi	r6,33040
811051cc:	31942404 	addi	r6,r6,20624
811051d0:	e17fff17 	ldw	r5,-4(fp)
811051d4:	e13ffe17 	ldw	r4,-8(fp)
811051d8:	11076100 	call	81107610 <alt_ic_isr_register>
#else
  alt_irq_register(irq, dev, alt_avalon_sgdma_irq);
#endif  
}
811051dc:	0001883a 	nop
811051e0:	e037883a 	mov	sp,fp
811051e4:	dfc00117 	ldw	ra,4(sp)
811051e8:	df000017 	ldw	fp,0(sp)
811051ec:	dec00204 	addi	sp,sp,8
811051f0:	f800283a 	ret

811051f4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
811051f4:	defffa04 	addi	sp,sp,-24
811051f8:	dfc00515 	stw	ra,20(sp)
811051fc:	df000415 	stw	fp,16(sp)
81105200:	df000404 	addi	fp,sp,16
81105204:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
81105208:	0007883a 	mov	r3,zero
8110520c:	e0bfff17 	ldw	r2,-4(fp)
81105210:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
81105214:	e0bfff17 	ldw	r2,-4(fp)
81105218:	10800104 	addi	r2,r2,4
8110521c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81105220:	0005303a 	rdctl	r2,status
81105224:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81105228:	e0fffd17 	ldw	r3,-12(fp)
8110522c:	00bfff84 	movi	r2,-2
81105230:	1884703a 	and	r2,r3,r2
81105234:	1001703a 	wrctl	status,r2
  
  return context;
81105238:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
8110523c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
81105240:	1107f480 	call	81107f48 <alt_tick>
81105244:	e0bffc17 	ldw	r2,-16(fp)
81105248:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8110524c:	e0bffe17 	ldw	r2,-8(fp)
81105250:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
81105254:	0001883a 	nop
81105258:	e037883a 	mov	sp,fp
8110525c:	dfc00117 	ldw	ra,4(sp)
81105260:	df000017 	ldw	fp,0(sp)
81105264:	dec00204 	addi	sp,sp,8
81105268:	f800283a 	ret

8110526c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
8110526c:	defff804 	addi	sp,sp,-32
81105270:	dfc00715 	stw	ra,28(sp)
81105274:	df000615 	stw	fp,24(sp)
81105278:	df000604 	addi	fp,sp,24
8110527c:	e13ffc15 	stw	r4,-16(fp)
81105280:	e17ffd15 	stw	r5,-12(fp)
81105284:	e1bffe15 	stw	r6,-8(fp)
81105288:	e1ffff15 	stw	r7,-4(fp)
8110528c:	e0bfff17 	ldw	r2,-4(fp)
81105290:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
81105294:	d0a01a17 	ldw	r2,-32664(gp)
81105298:	1000021e 	bne	r2,zero,811052a4 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
8110529c:	e0bffb17 	ldw	r2,-20(fp)
811052a0:	d0a01a15 	stw	r2,-32664(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
811052a4:	e0bffc17 	ldw	r2,-16(fp)
811052a8:	10800104 	addi	r2,r2,4
811052ac:	00c001c4 	movi	r3,7
811052b0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
811052b4:	d8000015 	stw	zero,0(sp)
811052b8:	e1fffc17 	ldw	r7,-16(fp)
811052bc:	01a04434 	movhi	r6,33040
811052c0:	31947d04 	addi	r6,r6,20980
811052c4:	e17ffe17 	ldw	r5,-8(fp)
811052c8:	e13ffd17 	ldw	r4,-12(fp)
811052cc:	11076100 	call	81107610 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
811052d0:	0001883a 	nop
811052d4:	e037883a 	mov	sp,fp
811052d8:	dfc00117 	ldw	ra,4(sp)
811052dc:	df000017 	ldw	fp,0(sp)
811052e0:	dec00204 	addi	sp,sp,8
811052e4:	f800283a 	ret

811052e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
811052e8:	defffe04 	addi	sp,sp,-8
811052ec:	dfc00115 	stw	ra,4(sp)
811052f0:	df000015 	stw	fp,0(sp)
811052f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
811052f8:	d0a00917 	ldw	r2,-32732(gp)
811052fc:	10000326 	beq	r2,zero,8110530c <alt_get_errno+0x24>
81105300:	d0a00917 	ldw	r2,-32732(gp)
81105304:	103ee83a 	callr	r2
81105308:	00000106 	br	81105310 <alt_get_errno+0x28>
8110530c:	d0a01504 	addi	r2,gp,-32684
}
81105310:	e037883a 	mov	sp,fp
81105314:	dfc00117 	ldw	ra,4(sp)
81105318:	df000017 	ldw	fp,0(sp)
8110531c:	dec00204 	addi	sp,sp,8
81105320:	f800283a 	ret

81105324 <alt_msgdma_write_standard_descriptor>:
 */
static int alt_msgdma_write_standard_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_standard_descriptor *descriptor)
{
81105324:	defffc04 	addi	sp,sp,-16
81105328:	df000315 	stw	fp,12(sp)
8110532c:	df000304 	addi	fp,sp,12
81105330:	e13ffd15 	stw	r4,-12(fp)
81105334:	e17ffe15 	stw	r5,-8(fp)
81105338:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
8110533c:	e0bffd17 	ldw	r2,-12(fp)
81105340:	10800037 	ldwio	r2,0(r2)
81105344:	1080010c 	andi	r2,r2,4
81105348:	10000226 	beq	r2,zero,81105354 <alt_msgdma_write_standard_descriptor+0x30>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
		is non-blocking*/
        return -ENOSPC;
8110534c:	00bff904 	movi	r2,-28
81105350:	00001506 	br	811053a8 <alt_msgdma_write_standard_descriptor+0x84>
    }

	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base, 
81105354:	e0bfff17 	ldw	r2,-4(fp)
81105358:	10800017 	ldw	r2,0(r2)
8110535c:	1007883a 	mov	r3,r2
81105360:	e0bffe17 	ldw	r2,-8(fp)
81105364:	10c00035 	stwio	r3,0(r2)
		(alt_u32)descriptor->read_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base, 
81105368:	e0bffe17 	ldw	r2,-8(fp)
8110536c:	10800104 	addi	r2,r2,4
81105370:	e0ffff17 	ldw	r3,-4(fp)
81105374:	18c00117 	ldw	r3,4(r3)
81105378:	10c00035 	stwio	r3,0(r2)
	(	alt_u32)descriptor->write_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base, 
8110537c:	e0bffe17 	ldw	r2,-8(fp)
81105380:	10800204 	addi	r2,r2,8
81105384:	e0ffff17 	ldw	r3,-4(fp)
81105388:	18c00217 	ldw	r3,8(r3)
8110538c:	10c00035 	stwio	r3,0(r2)
		descriptor->transfer_length);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_STANDARD(descriptor_base, 
81105390:	e0bffe17 	ldw	r2,-8(fp)
81105394:	10800304 	addi	r2,r2,12
81105398:	e0ffff17 	ldw	r3,-4(fp)
8110539c:	18c00317 	ldw	r3,12(r3)
811053a0:	10c00035 	stwio	r3,0(r2)
		descriptor->control);
        return 0;
811053a4:	0005883a 	mov	r2,zero
}
811053a8:	e037883a 	mov	sp,fp
811053ac:	df000017 	ldw	fp,0(sp)
811053b0:	dec00104 	addi	sp,sp,4
811053b4:	f800283a 	ret

811053b8 <alt_msgdma_write_extended_descriptor>:
 */
static int alt_msgdma_write_extended_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_extended_descriptor *descriptor)
{
811053b8:	defffc04 	addi	sp,sp,-16
811053bc:	df000315 	stw	fp,12(sp)
811053c0:	df000304 	addi	fp,sp,12
811053c4:	e13ffd15 	stw	r4,-12(fp)
811053c8:	e17ffe15 	stw	r5,-8(fp)
811053cc:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
811053d0:	e0bffd17 	ldw	r2,-12(fp)
811053d4:	10800037 	ldwio	r2,0(r2)
811053d8:	1080010c 	andi	r2,r2,4
811053dc:	10000226 	beq	r2,zero,811053e8 <alt_msgdma_write_extended_descriptor+0x30>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
	is non-blocking*/
        return -ENOSPC;
811053e0:	00bff904 	movi	r2,-28
811053e4:	00003b06 	br	811054d4 <alt_msgdma_write_extended_descriptor+0x11c>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(
811053e8:	e0bfff17 	ldw	r2,-4(fp)
811053ec:	10800017 	ldw	r2,0(r2)
811053f0:	1007883a 	mov	r3,r2
811053f4:	e0bffe17 	ldw	r2,-8(fp)
811053f8:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	(alt_u32)descriptor->read_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(
811053fc:	e0bffe17 	ldw	r2,-8(fp)
81105400:	10800104 	addi	r2,r2,4
81105404:	e0ffff17 	ldw	r3,-4(fp)
81105408:	18c00117 	ldw	r3,4(r3)
8110540c:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
		(alt_u32)descriptor->write_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(
81105410:	e0bffe17 	ldw	r2,-8(fp)
81105414:	10800204 	addi	r2,r2,8
81105418:	e0ffff17 	ldw	r3,-4(fp)
8110541c:	18c00217 	ldw	r3,8(r3)
81105420:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(
81105424:	e0bffe17 	ldw	r2,-8(fp)
81105428:	10800304 	addi	r2,r2,12
8110542c:	e0ffff17 	ldw	r3,-4(fp)
81105430:	18c0030b 	ldhu	r3,12(r3)
81105434:	18ffffcc 	andi	r3,r3,65535
81105438:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->sequence_number);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(
8110543c:	e0bffe17 	ldw	r2,-8(fp)
81105440:	10800384 	addi	r2,r2,14
81105444:	e0ffff17 	ldw	r3,-4(fp)
81105448:	18c00383 	ldbu	r3,14(r3)
8110544c:	18c03fcc 	andi	r3,r3,255
81105450:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(
81105454:	e0bffe17 	ldw	r2,-8(fp)
81105458:	108003c4 	addi	r2,r2,15
8110545c:	e0ffff17 	ldw	r3,-4(fp)
81105460:	18c003c3 	ldbu	r3,15(r3)
81105464:	18c03fcc 	andi	r3,r3,255
81105468:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(
8110546c:	e0bffe17 	ldw	r2,-8(fp)
81105470:	10800404 	addi	r2,r2,16
81105474:	e0ffff17 	ldw	r3,-4(fp)
81105478:	18c0040b 	ldhu	r3,16(r3)
8110547c:	18ffffcc 	andi	r3,r3,65535
81105480:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(
81105484:	e0bffe17 	ldw	r2,-8(fp)
81105488:	10800484 	addi	r2,r2,18
8110548c:	e0ffff17 	ldw	r3,-4(fp)
81105490:	18c0048b 	ldhu	r3,18(r3)
81105494:	18ffffcc 	andi	r3,r3,65535
81105498:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base, 0);
8110549c:	e0bffe17 	ldw	r2,-8(fp)
811054a0:	10800504 	addi	r2,r2,20
811054a4:	0007883a 	mov	r3,zero
811054a8:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base, 0);
811054ac:	e0bffe17 	ldw	r2,-8(fp)
811054b0:	10800604 	addi	r2,r2,24
811054b4:	0007883a 	mov	r3,zero
811054b8:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(
811054bc:	e0bffe17 	ldw	r2,-8(fp)
811054c0:	10800704 	addi	r2,r2,28
811054c4:	e0ffff17 	ldw	r3,-4(fp)
811054c8:	18c00717 	ldw	r3,28(r3)
811054cc:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->control);
    return 0;
811054d0:	0005883a 	mov	r2,zero
}
811054d4:	e037883a 	mov	sp,fp
811054d8:	df000017 	ldw	fp,0(sp)
811054dc:	dec00104 	addi	sp,sp,4
811054e0:	f800283a 	ret

811054e4 <alt_msgdma_irq>:
 * alt_msgdma_irq()
 *
 * Interrupt handler for the Modular Scatter-Gather DMA controller.
 */
static void alt_msgdma_irq(void *context)
{
811054e4:	defff804 	addi	sp,sp,-32
811054e8:	dfc00715 	stw	ra,28(sp)
811054ec:	df000615 	stw	fp,24(sp)
811054f0:	df000604 	addi	fp,sp,24
811054f4:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev *dev = (alt_msgdma_dev *) context;
811054f8:	e0bfff17 	ldw	r2,-4(fp)
811054fc:	e0bffa15 	stw	r2,-24(fp)
    alt_irq_context cpu_sr;
    alt_u32 temporary_control;

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
81105500:	e0bffa17 	ldw	r2,-24(fp)
81105504:	10801783 	ldbu	r2,94(r2)
81105508:	10803fcc 	andi	r2,r2,255
8110550c:	10001126 	beq	r2,zero,81105554 <alt_msgdma_irq+0x70>
    {
        temporary_control = 
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
81105510:	e0bffa17 	ldw	r2,-24(fp)
81105514:	10800617 	ldw	r2,24(r2)
81105518:	10800037 	ldwio	r2,0(r2)

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
    {
        temporary_control = 
8110551c:	1007883a 	mov	r3,r2
81105520:	00bffdc4 	movi	r2,-9
81105524:	1884703a 	and	r2,r3,r2
81105528:	e0bffb15 	stw	r2,-20(fp)
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				& ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
8110552c:	e0bffa17 	ldw	r2,-24(fp)
81105530:	10800617 	ldw	r2,24(r2)
81105534:	e0fffb17 	ldw	r3,-20(fp)
81105538:	10c00035 	stwio	r3,0(r2)
        		temporary_control);
        
        /* clear the IRQ status- W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base,
8110553c:	e0bffa17 	ldw	r2,-24(fp)
81105540:	10800617 	ldw	r2,24(r2)
81105544:	10800404 	addi	r2,r2,16
81105548:	00c00044 	movi	r3,1
8110554c:	10c00035 	stwio	r3,0(r2)
81105550:	00001106 	br	81105598 <alt_msgdma_irq+0xb4>
        		ALT_MSGDMA_PREFETCHER_STATUS_IRQ_SET_MASK);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
81105554:	e0bffa17 	ldw	r2,-24(fp)
81105558:	10800317 	ldw	r2,12(r2)
8110555c:	10800104 	addi	r2,r2,4
81105560:	10800037 	ldwio	r2,0(r2)
81105564:	1007883a 	mov	r3,r2
81105568:	00bffbc4 	movi	r2,-17
8110556c:	1884703a 	and	r2,r3,r2
81105570:	e0bffb15 	stw	r2,-20(fp)
    			& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
81105574:	e0bffa17 	ldw	r2,-24(fp)
81105578:	10800317 	ldw	r2,12(r2)
8110557c:	10800104 	addi	r2,r2,4
81105580:	e0fffb17 	ldw	r3,-20(fp)
81105584:	10c00035 	stwio	r3,0(r2)
    	/* clear the IRQ status */
    	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
81105588:	e0bffa17 	ldw	r2,-24(fp)
8110558c:	10800317 	ldw	r2,12(r2)
81105590:	00c08004 	movi	r3,512
81105594:	10c00035 	stwio	r3,0(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
81105598:	e0bffa17 	ldw	r2,-24(fp)
8110559c:	10800b17 	ldw	r2,44(r2)
811055a0:	10001226 	beq	r2,zero,811055ec <alt_msgdma_irq+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811055a4:	0005303a 	rdctl	r2,status
811055a8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811055ac:	e0fffd17 	ldw	r3,-12(fp)
811055b0:	00bfff84 	movi	r2,-2
811055b4:	1884703a 	and	r2,r3,r2
811055b8:	1001703a 	wrctl	status,r2
  
  return context;
811055bc:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
811055c0:	e0bffc15 	stw	r2,-16(fp)
        dev->callback (dev->callback_context);
811055c4:	e0bffa17 	ldw	r2,-24(fp)
811055c8:	10800b17 	ldw	r2,44(r2)
811055cc:	e0fffa17 	ldw	r3,-24(fp)
811055d0:	18c00c17 	ldw	r3,48(r3)
811055d4:	1809883a 	mov	r4,r3
811055d8:	103ee83a 	callr	r2
811055dc:	e0bffc17 	ldw	r2,-16(fp)
811055e0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811055e4:	e0bffe17 	ldw	r2,-8(fp)
811055e8:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
811055ec:	e0bffa17 	ldw	r2,-24(fp)
811055f0:	10801783 	ldbu	r2,94(r2)
811055f4:	10803fcc 	andi	r2,r2,255
811055f8:	10000a26 	beq	r2,zero,81105624 <alt_msgdma_irq+0x140>
    {
    	temporary_control = 
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
811055fc:	e0bffa17 	ldw	r2,-24(fp)
81105600:	10800617 	ldw	r2,24(r2)
81105604:	10800037 	ldwio	r2,0(r2)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
81105608:	10800214 	ori	r2,r2,8
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
    {
    	temporary_control = 
8110560c:	e0bffb15 	stw	r2,-20(fp)
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
    	
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
81105610:	e0bffa17 	ldw	r2,-24(fp)
81105614:	10800617 	ldw	r2,24(r2)
81105618:	e0fffb17 	ldw	r3,-20(fp)
8110561c:	10c00035 	stwio	r3,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
    }

    return;
81105620:	00000c06 	br	81105654 <alt_msgdma_irq+0x170>
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
81105624:	e0bffa17 	ldw	r2,-24(fp)
81105628:	10800317 	ldw	r2,12(r2)
8110562c:	10800104 	addi	r2,r2,4
81105630:	10800037 	ldwio	r2,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
81105634:	10800414 	ori	r2,r2,16
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
81105638:	e0bffb15 	stw	r2,-20(fp)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
8110563c:	e0bffa17 	ldw	r2,-24(fp)
81105640:	10800317 	ldw	r2,12(r2)
81105644:	10800104 	addi	r2,r2,4
81105648:	e0fffb17 	ldw	r3,-20(fp)
8110564c:	10c00035 	stwio	r3,0(r2)
    }

    return;
81105650:	0001883a 	nop
}
81105654:	e037883a 	mov	sp,fp
81105658:	dfc00117 	ldw	ra,4(sp)
8110565c:	df000017 	ldw	fp,0(sp)
81105660:	dec00204 	addi	sp,sp,8
81105664:	f800283a 	ret

81105668 <alt_msgdma_construct_standard_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
81105668:	defffb04 	addi	sp,sp,-20
8110566c:	df000415 	stw	fp,16(sp)
81105670:	df000404 	addi	fp,sp,16
81105674:	e13ffc15 	stw	r4,-16(fp)
81105678:	e17ffd15 	stw	r5,-12(fp)
8110567c:	e1bffe15 	stw	r6,-8(fp)
81105680:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
81105684:	e0bffc17 	ldw	r2,-16(fp)
81105688:	10c01217 	ldw	r3,72(r2)
8110568c:	e0800117 	ldw	r2,4(fp)
81105690:	18800436 	bltu	r3,r2,811056a4 <alt_msgdma_construct_standard_descriptor+0x3c>
       dev->enhanced_features != 0
81105694:	e0bffc17 	ldw	r2,-16(fp)
81105698:	10801703 	ldbu	r2,92(r2)
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
8110569c:	10803fcc 	andi	r2,r2,255
811056a0:	10000226 	beq	r2,zero,811056ac <alt_msgdma_construct_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
811056a4:	00bffa84 	movi	r2,-22
811056a8:	00000e06 	br	811056e4 <alt_msgdma_construct_standard_descriptor+0x7c>
    }
    descriptor->read_address = read_address;
811056ac:	e0bffd17 	ldw	r2,-12(fp)
811056b0:	e0fffe17 	ldw	r3,-8(fp)
811056b4:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
811056b8:	e0bffd17 	ldw	r2,-12(fp)
811056bc:	e0ffff17 	ldw	r3,-4(fp)
811056c0:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
811056c4:	e0bffd17 	ldw	r2,-12(fp)
811056c8:	e0c00117 	ldw	r3,4(fp)
811056cc:	10c00215 	stw	r3,8(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
811056d0:	e0800217 	ldw	r2,8(fp)
811056d4:	10e00034 	orhi	r3,r2,32768
811056d8:	e0bffd17 	ldw	r2,-12(fp)
811056dc:	10c00315 	stw	r3,12(r2)
    
    return 0;
811056e0:	0005883a 	mov	r2,zero
}
811056e4:	e037883a 	mov	sp,fp
811056e8:	df000017 	ldw	fp,0(sp)
811056ec:	dec00104 	addi	sp,sp,4
811056f0:	f800283a 	ret

811056f4 <alt_msgdma_construct_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
811056f4:	defff604 	addi	sp,sp,-40
811056f8:	df000915 	stw	fp,36(sp)
811056fc:	df000904 	addi	fp,sp,36
81105700:	e13ff715 	stw	r4,-36(fp)
81105704:	e17ff815 	stw	r5,-32(fp)
81105708:	e1bff915 	stw	r6,-28(fp)
8110570c:	e1fffa15 	stw	r7,-24(fp)
81105710:	e1800317 	ldw	r6,12(fp)
81105714:	e1400417 	ldw	r5,16(fp)
81105718:	e1000517 	ldw	r4,20(fp)
8110571c:	e0c00617 	ldw	r3,24(fp)
81105720:	e0800717 	ldw	r2,28(fp)
81105724:	e1bffb0d 	sth	r6,-20(fp)
81105728:	e17ffc05 	stb	r5,-16(fp)
8110572c:	e13ffd05 	stb	r4,-12(fp)
81105730:	e0fffe0d 	sth	r3,-8(fp)
81105734:	e0bfff0d 	sth	r2,-4(fp)
    if(dev->max_byte < length ||
81105738:	e0bff717 	ldw	r2,-36(fp)
8110573c:	10c01217 	ldw	r3,72(r2)
81105740:	e0800117 	ldw	r2,4(fp)
81105744:	18801936 	bltu	r3,r2,811057ac <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
81105748:	e13ff717 	ldw	r4,-36(fp)
8110574c:	20801317 	ldw	r2,76(r4)
81105750:	20c01417 	ldw	r3,80(r4)
81105754:	e13ffe0b 	ldhu	r4,-8(fp)
81105758:	213fffcc 	andi	r4,r4,65535
8110575c:	2015883a 	mov	r10,r4
81105760:	0017883a 	mov	r11,zero
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
81105764:	1ac01136 	bltu	r3,r11,811057ac <alt_msgdma_construct_extended_descriptor+0xb8>
81105768:	58c0011e 	bne	r11,r3,81105770 <alt_msgdma_construct_extended_descriptor+0x7c>
8110576c:	12800f36 	bltu	r2,r10,811057ac <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
81105770:	e13ff717 	ldw	r4,-36(fp)
81105774:	20801317 	ldw	r2,76(r4)
81105778:	20c01417 	ldw	r3,80(r4)
8110577c:	e13fff0b 	ldhu	r4,-4(fp)
81105780:	213fffcc 	andi	r4,r4,65535
81105784:	2011883a 	mov	r8,r4
81105788:	0013883a 	mov	r9,zero
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
8110578c:	1a400736 	bltu	r3,r9,811057ac <alt_msgdma_construct_extended_descriptor+0xb8>
81105790:	48c0011e 	bne	r9,r3,81105798 <alt_msgdma_construct_extended_descriptor+0xa4>
81105794:	12000536 	bltu	r2,r8,811057ac <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
81105798:	e0bff717 	ldw	r2,-36(fp)
8110579c:	10801703 	ldbu	r2,92(r2)
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
811057a0:	10803fcc 	andi	r2,r2,255
811057a4:	10800060 	cmpeqi	r2,r2,1
811057a8:	1000021e 	bne	r2,zero,811057b4 <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
811057ac:	00bffa84 	movi	r2,-22
811057b0:	00002106 	br	81105838 <alt_msgdma_construct_extended_descriptor+0x144>
    }
    
    descriptor->read_address_low = read_address;
811057b4:	e0bff817 	ldw	r2,-32(fp)
811057b8:	e0fff917 	ldw	r3,-28(fp)
811057bc:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_low = write_address;
811057c0:	e0bff817 	ldw	r2,-32(fp)
811057c4:	e0fffa17 	ldw	r3,-24(fp)
811057c8:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
811057cc:	e0bff817 	ldw	r2,-32(fp)
811057d0:	e0c00117 	ldw	r3,4(fp)
811057d4:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
811057d8:	e0bff817 	ldw	r2,-32(fp)
811057dc:	e0fffb0b 	ldhu	r3,-20(fp)
811057e0:	10c0030d 	sth	r3,12(r2)
    descriptor->read_burst_count = read_burst_count;
811057e4:	e0bff817 	ldw	r2,-32(fp)
811057e8:	e0fffc03 	ldbu	r3,-16(fp)
811057ec:	10c00385 	stb	r3,14(r2)
    descriptor->write_burst_count = write_burst_count;
811057f0:	e0bff817 	ldw	r2,-32(fp)
811057f4:	e0fffd03 	ldbu	r3,-12(fp)
811057f8:	10c003c5 	stb	r3,15(r2)
    descriptor->read_stride = read_stride;
811057fc:	e0bff817 	ldw	r2,-32(fp)
81105800:	e0fffe0b 	ldhu	r3,-8(fp)
81105804:	10c0040d 	sth	r3,16(r2)
    descriptor->write_stride = write_stride;
81105808:	e0bff817 	ldw	r2,-32(fp)
8110580c:	e0ffff0b 	ldhu	r3,-4(fp)
81105810:	10c0048d 	sth	r3,18(r2)
    descriptor->read_address_high = NULL;
81105814:	e0bff817 	ldw	r2,-32(fp)
81105818:	10000515 	stw	zero,20(r2)
    descriptor->write_address_high = NULL;
8110581c:	e0bff817 	ldw	r2,-32(fp)
81105820:	10000615 	stw	zero,24(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
81105824:	e0800217 	ldw	r2,8(fp)
81105828:	10e00034 	orhi	r3,r2,32768
8110582c:	e0bff817 	ldw	r2,-32(fp)
81105830:	10c00715 	stw	r3,28(r2)

  return 0 ;
81105834:	0005883a 	mov	r2,zero

}
81105838:	e037883a 	mov	sp,fp
8110583c:	df000017 	ldw	fp,0(sp)
81105840:	dec00104 	addi	sp,sp,4
81105844:	f800283a 	ret

81105848 <alt_msgdma_descriptor_async_transfer>:
 */
static int alt_msgdma_descriptor_async_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
81105848:	defff004 	addi	sp,sp,-64
8110584c:	dfc00f15 	stw	ra,60(sp)
81105850:	df000e15 	stw	fp,56(sp)
81105854:	df000e04 	addi	fp,sp,56
81105858:	e13ffd15 	stw	r4,-12(fp)
8110585c:	e17ffe15 	stw	r5,-8(fp)
81105860:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control = 0;
81105864:	e03ff315 	stw	zero,-52(fp)
    alt_irq_context context = 0;
81105868:	e03ff415 	stw	zero,-48(fp)
    alt_u16 counter = 0;
8110586c:	e03ff20d 	sth	zero,-56(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
81105870:	e0bffd17 	ldw	r2,-12(fp)
81105874:	10800317 	ldw	r2,12(r2)
81105878:	10800204 	addi	r2,r2,8
8110587c:	10800037 	ldwio	r2,0(r2)
	alt_msgdma_extended_descriptor *extended_desc)
{
    alt_u32 control = 0;
    alt_irq_context context = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
81105880:	10bfffcc 	andi	r2,r2,65535
81105884:	e0bff515 	stw	r2,-44(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
81105888:	e0bffd17 	ldw	r2,-12(fp)
8110588c:	10800317 	ldw	r2,12(r2)
81105890:	10800204 	addi	r2,r2,8
81105894:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
81105898:	1004d43a 	srli	r2,r2,16
8110589c:	e0bff615 	stw	r2,-40(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
811058a0:	e0bffd17 	ldw	r2,-12(fp)
811058a4:	10800917 	ldw	r2,36(r2)
811058a8:	e0fff617 	ldw	r3,-40(fp)
811058ac:	1880042e 	bgeu	r3,r2,811058c0 <alt_msgdma_descriptor_async_transfer+0x78>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
811058b0:	e0bffd17 	ldw	r2,-12(fp)
811058b4:	10800917 	ldw	r2,36(r2)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
811058b8:	e0fff517 	ldw	r3,-44(fp)
811058bc:	18800236 	bltu	r3,r2,811058c8 <alt_msgdma_descriptor_async_transfer+0x80>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
	{
		/*at least one write or read FIFO descriptor buffer is full,
		returning so that this function is non-blocking*/
		return -ENOSPC;
811058c0:	00bff904 	movi	r2,-28
811058c4:	00008f06 	br	81105b04 <alt_msgdma_descriptor_async_transfer+0x2bc>
	ALT_SEM_PEND (dev->regs_lock, 0);
	
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	read or write masters  */
	/* stop issuing more descriptors */
	control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
811058c8:	00800804 	movi	r2,32
811058cc:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811058d0:	0005303a 	rdctl	r2,status
811058d4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811058d8:	e0fff717 	ldw	r3,-36(fp)
811058dc:	00bfff84 	movi	r2,-2
811058e0:	1884703a 	and	r2,r3,r2
811058e4:	1001703a 	wrctl	status,r2
  
  return context;
811058e8:	e0bff717 	ldw	r2,-36(fp)
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
811058ec:	e0bff415 	stw	r2,-48(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
811058f0:	e0bffd17 	ldw	r2,-12(fp)
811058f4:	10800317 	ldw	r2,12(r2)
811058f8:	10800104 	addi	r2,r2,4
811058fc:	e0fff317 	ldw	r3,-52(fp)
81105900:	10c00035 	stwio	r3,0(r2)
	/*
	* Clear any (previous) status register information
	* that might occlude our error checking later.
	*/
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
81105904:	e0bffd17 	ldw	r2,-12(fp)
81105908:	10800317 	ldw	r2,12(r2)
8110590c:	e0fffd17 	ldw	r3,-12(fp)
81105910:	18c00317 	ldw	r3,12(r3)
81105914:	18c00037 	ldwio	r3,0(r3)
81105918:	10c00035 	stwio	r3,0(r2)
8110591c:	e0bff417 	ldw	r2,-48(fp)
81105920:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81105924:	e0bffc17 	ldw	r2,-16(fp)
81105928:	1001703a 	wrctl	status,r2
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
8110592c:	e0bffe17 	ldw	r2,-8(fp)
81105930:	10001a26 	beq	r2,zero,8110599c <alt_msgdma_descriptor_async_transfer+0x154>
81105934:	e0bfff17 	ldw	r2,-4(fp)
81105938:	1000181e 	bne	r2,zero,8110599c <alt_msgdma_descriptor_async_transfer+0x154>
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
8110593c:	00000d06 	br	81105974 <alt_msgdma_descriptor_async_transfer+0x12c>
		dev->csr_base, dev->descriptor_base, standard_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
81105940:	01000044 	movi	r4,1
81105944:	11072900 	call	81107290 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
81105948:	e0bff20b 	ldhu	r2,-56(fp)
8110594c:	1084e230 	cmpltui	r2,r2,5000
81105950:	1000051e 	bne	r2,zero,81105968 <alt_msgdma_descriptor_async_transfer+0x120>
            {
                alt_printf("time out after 5 msec while waiting" 
81105954:	01204474 	movhi	r4,33041
81105958:	21226a04 	addi	r4,r4,-30296
8110595c:	1107c440 	call	81107c44 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
81105960:	00bff084 	movi	r2,-62
81105964:	00006706 	br	81105b04 <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
81105968:	e0bff20b 	ldhu	r2,-56(fp)
8110596c:	10800044 	addi	r2,r2,1
81105970:	e0bff20d 	sth	r2,-56(fp)

    if (NULL != standard_desc && NULL == extended_desc)
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
81105974:	e0bffd17 	ldw	r2,-12(fp)
81105978:	10c00317 	ldw	r3,12(r2)
8110597c:	e0bffd17 	ldw	r2,-12(fp)
81105980:	10800417 	ldw	r2,16(r2)
81105984:	e1bffe17 	ldw	r6,-8(fp)
81105988:	100b883a 	mov	r5,r2
8110598c:	1809883a 	mov	r4,r3
81105990:	11053240 	call	81105324 <alt_msgdma_write_standard_descriptor>
81105994:	103fea1e 	bne	r2,zero,81105940 <__reset+0xfb0e5940>
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
81105998:	00001f06 	br	81105a18 <alt_msgdma_descriptor_async_transfer+0x1d0>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
8110599c:	e0bffe17 	ldw	r2,-8(fp)
811059a0:	10001b1e 	bne	r2,zero,81105a10 <alt_msgdma_descriptor_async_transfer+0x1c8>
811059a4:	e0bfff17 	ldw	r2,-4(fp)
811059a8:	10001926 	beq	r2,zero,81105a10 <alt_msgdma_descriptor_async_transfer+0x1c8>
    {
        counter = 0; /* reset counter */
811059ac:	e03ff20d 	sth	zero,-56(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
811059b0:	00000d06 	br	811059e8 <alt_msgdma_descriptor_async_transfer+0x1a0>
		dev->csr_base, 
		dev->descriptor_base, 
		extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
811059b4:	01000044 	movi	r4,1
811059b8:	11072900 	call	81107290 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
811059bc:	e0bff20b 	ldhu	r2,-56(fp)
811059c0:	1084e230 	cmpltui	r2,r2,5000
811059c4:	1000051e 	bne	r2,zero,811059dc <alt_msgdma_descriptor_async_transfer+0x194>
            {
                alt_printf("time out after 5 msec while waiting free FIFO buffer" 
811059c8:	01204474 	movhi	r4,33041
811059cc:	21228004 	addi	r4,r4,-30208
811059d0:	1107c440 	call	81107c44 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
811059d4:	00bff084 	movi	r2,-62
811059d8:	00004a06 	br	81105b04 <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
811059dc:	e0bff20b 	ldhu	r2,-56(fp)
811059e0:	10800044 	addi	r2,r2,1
811059e4:	e0bff20d 	sth	r2,-56(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
811059e8:	e0bffd17 	ldw	r2,-12(fp)
811059ec:	10c00317 	ldw	r3,12(r2)
811059f0:	e0bffd17 	ldw	r2,-12(fp)
811059f4:	10800417 	ldw	r2,16(r2)
811059f8:	e1bfff17 	ldw	r6,-4(fp)
811059fc:	100b883a 	mov	r5,r2
81105a00:	1809883a 	mov	r4,r3
81105a04:	11053b80 	call	811053b8 <alt_msgdma_write_extended_descriptor>
81105a08:	103fea1e 	bne	r2,zero,811059b4 <__reset+0xfb0e59b4>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
81105a0c:	00000206 	br	81105a18 <alt_msgdma_descriptor_async_transfer+0x1d0>
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
81105a10:	00bfffc4 	movi	r2,-1
81105a14:	00003b06 	br	81105b04 <alt_msgdma_descriptor_async_transfer+0x2bc>
    * If a callback routine has been previously registered which will be
    * called from the msgdma ISR. Set up controller to:
    *  - Run
    *  - Stop on an error with any particular descriptor
    */
    if(dev->callback)
81105a18:	e0bffd17 	ldw	r2,-12(fp)
81105a1c:	10800b17 	ldw	r2,44(r2)
81105a20:	10001c26 	beq	r2,zero,81105a94 <alt_msgdma_descriptor_async_transfer+0x24c>
    {

        control |= (dev->control |
81105a24:	e0bffd17 	ldw	r2,-12(fp)
81105a28:	10c00d17 	ldw	r3,52(r2)
81105a2c:	e0bff317 	ldw	r2,-52(fp)
81105a30:	1884b03a 	or	r2,r3,r2
81105a34:	10800514 	ori	r2,r2,20
81105a38:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
                    ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
81105a3c:	e0fff317 	ldw	r3,-52(fp)
81105a40:	00bff7c4 	movi	r2,-33
81105a44:	1884703a 	and	r2,r3,r2
81105a48:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81105a4c:	0005303a 	rdctl	r2,status
81105a50:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81105a54:	e0fffa17 	ldw	r3,-24(fp)
81105a58:	00bfff84 	movi	r2,-2
81105a5c:	1884703a 	and	r2,r3,r2
81105a60:	1001703a 	wrctl	status,r2
  
  return context;
81105a64:	e0bffa17 	ldw	r2,-24(fp)
    /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
81105a68:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81105a6c:	e0bffd17 	ldw	r2,-12(fp)
81105a70:	10800317 	ldw	r2,12(r2)
81105a74:	10800104 	addi	r2,r2,4
81105a78:	e0fff317 	ldw	r3,-52(fp)
81105a7c:	10c00035 	stwio	r3,0(r2)
81105a80:	e0bff417 	ldw	r2,-48(fp)
81105a84:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81105a88:	e0bff817 	ldw	r2,-32(fp)
81105a8c:	1001703a 	wrctl	status,r2
81105a90:	00001b06 	br	81105b00 <alt_msgdma_descriptor_async_transfer+0x2b8>
    *   - Stop on an error with any particular descriptor
    *   - Disable interrupt generation
    */
    else
    {
        control |= (dev->control |
81105a94:	e0bffd17 	ldw	r2,-12(fp)
81105a98:	10c00d17 	ldw	r3,52(r2)
81105a9c:	e0bff317 	ldw	r2,-52(fp)
81105aa0:	1884b03a 	or	r2,r3,r2
81105aa4:	10800114 	ori	r2,r2,4
81105aa8:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK );
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
81105aac:	e0fff317 	ldw	r3,-52(fp)
81105ab0:	00bff3c4 	movi	r2,-49
81105ab4:	1884703a 	and	r2,r3,r2
81105ab8:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81105abc:	0005303a 	rdctl	r2,status
81105ac0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81105ac4:	e0fffb17 	ldw	r3,-20(fp)
81105ac8:	00bfff84 	movi	r2,-2
81105acc:	1884703a 	and	r2,r3,r2
81105ad0:	1001703a 	wrctl	status,r2
  
  return context;
81105ad4:	e0bffb17 	ldw	r2,-20(fp)
                   (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all();
81105ad8:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81105adc:	e0bffd17 	ldw	r2,-12(fp)
81105ae0:	10800317 	ldw	r2,12(r2)
81105ae4:	10800104 	addi	r2,r2,4
81105ae8:	e0fff317 	ldw	r3,-52(fp)
81105aec:	10c00035 	stwio	r3,0(r2)
81105af0:	e0bff417 	ldw	r2,-48(fp)
81105af4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81105af8:	e0bff917 	ldw	r2,-28(fp)
81105afc:	1001703a 	wrctl	status,r2
	 * Now that access to the registers is complete, release the registers
     * semaphore so that other threads can access the registers.
     */
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
81105b00:	0005883a 	mov	r2,zero
}
81105b04:	e037883a 	mov	sp,fp
81105b08:	dfc00117 	ldw	ra,4(sp)
81105b0c:	df000017 	ldw	fp,0(sp)
81105b10:	dec00204 	addi	sp,sp,8
81105b14:	f800283a 	ret

81105b18 <alt_msgdma_descriptor_sync_transfer>:
 */
static int alt_msgdma_descriptor_sync_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
81105b18:	defff004 	addi	sp,sp,-64
81105b1c:	dfc00f15 	stw	ra,60(sp)
81105b20:	df000e15 	stw	fp,56(sp)
81105b24:	df000e04 	addi	fp,sp,56
81105b28:	e13ffd15 	stw	r4,-12(fp)
81105b2c:	e17ffe15 	stw	r5,-8(fp)
81105b30:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control=0;
81105b34:	e03ff615 	stw	zero,-40(fp)
    alt_irq_context context=0;
81105b38:	e03ff715 	stw	zero,-36(fp)
    alt_u32 csr_status = 0;
81105b3c:	e03ff215 	stw	zero,-56(fp)
    alt_u16 counter = 0;
81105b40:	e03ff30d 	sth	zero,-52(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
81105b44:	e0bffd17 	ldw	r2,-12(fp)
81105b48:	10800317 	ldw	r2,12(r2)
81105b4c:	10800204 	addi	r2,r2,8
81105b50:	10800037 	ldwio	r2,0(r2)
{
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
81105b54:	10bfffcc 	andi	r2,r2,65535
81105b58:	e0bff415 	stw	r2,-48(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
81105b5c:	e0bffd17 	ldw	r2,-12(fp)
81105b60:	10800317 	ldw	r2,12(r2)
81105b64:	10800204 	addi	r2,r2,8
81105b68:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
81105b6c:	1004d43a 	srli	r2,r2,16
81105b70:	e0bff515 	stw	r2,-44(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
    alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK | 
81105b74:	00807804 	movi	r2,480
81105b78:	e0bff815 	stw	r2,-32(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
81105b7c:	00001906 	br	81105be4 <alt_msgdma_descriptor_sync_transfer+0xcc>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
81105b80:	01000044 	movi	r4,1
81105b84:	11072900 	call	81107290 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
81105b88:	e0bff30b 	ldhu	r2,-52(fp)
81105b8c:	1084e230 	cmpltui	r2,r2,5000
81105b90:	1000051e 	bne	r2,zero,81105ba8 <alt_msgdma_descriptor_sync_transfer+0x90>
        {
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
81105b94:	01204474 	movhi	r4,33041
81105b98:	21229604 	addi	r4,r4,-30120
81105b9c:	1107c440 	call	81107c44 <alt_printf>
				" for storing descriptor\n");
            return -ETIME;
81105ba0:	00bff084 	movi	r2,-62
81105ba4:	0000b506 	br	81105e7c <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;  
81105ba8:	e0bff30b 	ldhu	r2,-52(fp)
81105bac:	10800044 	addi	r2,r2,1
81105bb0:	e0bff30d 	sth	r2,-52(fp)
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
81105bb4:	e0bffd17 	ldw	r2,-12(fp)
81105bb8:	10800317 	ldw	r2,12(r2)
81105bbc:	10800204 	addi	r2,r2,8
81105bc0:	10800037 	ldwio	r2,0(r2)
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
				" for storing descriptor\n");
            return -ETIME;
        }
        counter++;  
        fifo_read_fill_level = (
81105bc4:	10bfffcc 	andi	r2,r2,65535
81105bc8:	e0bff415 	stw	r2,-48(fp)
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
81105bcc:	e0bffd17 	ldw	r2,-12(fp)
81105bd0:	10800317 	ldw	r2,12(r2)
81105bd4:	10800204 	addi	r2,r2,8
81105bd8:	10800037 	ldwio	r2,0(r2)
        counter++;  
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
81105bdc:	1004d43a 	srli	r2,r2,16
81105be0:	e0bff515 	stw	r2,-44(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
81105be4:	e0bffd17 	ldw	r2,-12(fp)
81105be8:	10800917 	ldw	r2,36(r2)
81105bec:	e0fff517 	ldw	r3,-44(fp)
81105bf0:	18bfe32e 	bgeu	r3,r2,81105b80 <__reset+0xfb0e5b80>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
81105bf4:	e0bffd17 	ldw	r2,-12(fp)
81105bf8:	10800917 	ldw	r2,36(r2)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
81105bfc:	e0fff417 	ldw	r3,-48(fp)
81105c00:	18bfdf2e 	bgeu	r3,r2,81105b80 <__reset+0xfb0e5b80>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81105c04:	0005303a 	rdctl	r2,status
81105c08:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81105c0c:	e0fffc17 	ldw	r3,-16(fp)
81105c10:	00bfff84 	movi	r2,-2
81105c14:	1884703a 	and	r2,r3,r2
81105c18:	1001703a 	wrctl	status,r2
  
  return context;
81105c1c:	e0bffc17 	ldw	r2,-16(fp)
	ALT_SEM_PEND (dev->regs_lock, 0);
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
81105c20:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
81105c24:	e0bffd17 	ldw	r2,-12(fp)
81105c28:	10800317 	ldw	r2,12(r2)
81105c2c:	10800104 	addi	r2,r2,4
81105c30:	00c00804 	movi	r3,32
81105c34:	10c00035 	stwio	r3,0(r2)
        ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
81105c38:	e0bffd17 	ldw	r2,-12(fp)
81105c3c:	10800317 	ldw	r2,12(r2)
81105c40:	e0fffd17 	ldw	r3,-12(fp)
81105c44:	18c00317 	ldw	r3,12(r3)
81105c48:	18c00037 	ldwio	r3,0(r3)
81105c4c:	10c00035 	stwio	r3,0(r2)
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
81105c50:	e0bffe17 	ldw	r2,-8(fp)
81105c54:	10001b26 	beq	r2,zero,81105cc4 <alt_msgdma_descriptor_sync_transfer+0x1ac>
81105c58:	e0bfff17 	ldw	r2,-4(fp)
81105c5c:	1000191e 	bne	r2,zero,81105cc4 <alt_msgdma_descriptor_sync_transfer+0x1ac>
    {
        counter = 0; /* reset counter */
81105c60:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
81105c64:	00000d06 	br	81105c9c <alt_msgdma_descriptor_sync_transfer+0x184>
			dev->csr_base, dev->descriptor_base, standard_desc))
        {     
            alt_busy_sleep(1); /* delay 1us */
81105c68:	01000044 	movi	r4,1
81105c6c:	11072900 	call	81107290 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
81105c70:	e0bff30b 	ldhu	r2,-52(fp)
81105c74:	1084e230 	cmpltui	r2,r2,5000
81105c78:	1000051e 	bne	r2,zero,81105c90 <alt_msgdma_descriptor_sync_transfer+0x178>
            {
                alt_printf("time out after 5 msec while writing standard" 
81105c7c:	01204474 	movhi	r4,33041
81105c80:	2122aa04 	addi	r4,r4,-30040
81105c84:	1107c440 	call	81107c44 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
81105c88:	00bff084 	movi	r2,-62
81105c8c:	00007b06 	br	81105e7c <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;    
81105c90:	e0bff30b 	ldhu	r2,-52(fp)
81105c94:	10800044 	addi	r2,r2,1
81105c98:	e0bff30d 	sth	r2,-52(fp)
    if (NULL != standard_desc && NULL == extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
81105c9c:	e0bffd17 	ldw	r2,-12(fp)
81105ca0:	10c00317 	ldw	r3,12(r2)
81105ca4:	e0bffd17 	ldw	r2,-12(fp)
81105ca8:	10800417 	ldw	r2,16(r2)
81105cac:	e1bffe17 	ldw	r6,-8(fp)
81105cb0:	100b883a 	mov	r5,r2
81105cb4:	1809883a 	mov	r4,r3
81105cb8:	11053240 	call	81105324 <alt_msgdma_write_standard_descriptor>
81105cbc:	103fea1e 	bne	r2,zero,81105c68 <__reset+0xfb0e5c68>
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
81105cc0:	00001f06 	br	81105d40 <alt_msgdma_descriptor_sync_transfer+0x228>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
81105cc4:	e0bffe17 	ldw	r2,-8(fp)
81105cc8:	10001b1e 	bne	r2,zero,81105d38 <alt_msgdma_descriptor_sync_transfer+0x220>
81105ccc:	e0bfff17 	ldw	r2,-4(fp)
81105cd0:	10001926 	beq	r2,zero,81105d38 <alt_msgdma_descriptor_sync_transfer+0x220>
    {
        counter = 0; /* reset counter */
81105cd4:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
81105cd8:	00000d06 	br	81105d10 <alt_msgdma_descriptor_sync_transfer+0x1f8>
			dev->csr_base, dev->descriptor_base, extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
81105cdc:	01000044 	movi	r4,1
81105ce0:	11072900 	call	81107290 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
81105ce4:	e0bff30b 	ldhu	r2,-52(fp)
81105ce8:	1084e230 	cmpltui	r2,r2,5000
81105cec:	1000051e 	bne	r2,zero,81105d04 <alt_msgdma_descriptor_sync_transfer+0x1ec>
            {
                alt_printf("time out after 5 msec while writing extended" 
81105cf0:	01204474 	movhi	r4,33041
81105cf4:	2122bb04 	addi	r4,r4,-29972
81105cf8:	1107c440 	call	81107c44 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
81105cfc:	00bff084 	movi	r2,-62
81105d00:	00005e06 	br	81105e7c <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;
81105d04:	e0bff30b 	ldhu	r2,-52(fp)
81105d08:	10800044 	addi	r2,r2,1
81105d0c:	e0bff30d 	sth	r2,-52(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
81105d10:	e0bffd17 	ldw	r2,-12(fp)
81105d14:	10c00317 	ldw	r3,12(r2)
81105d18:	e0bffd17 	ldw	r2,-12(fp)
81105d1c:	10800417 	ldw	r2,16(r2)
81105d20:	e1bfff17 	ldw	r6,-4(fp)
81105d24:	100b883a 	mov	r5,r2
81105d28:	1809883a 	mov	r4,r3
81105d2c:	11053b80 	call	811053b8 <alt_msgdma_write_extended_descriptor>
81105d30:	103fea1e 	bne	r2,zero,81105cdc <__reset+0xfb0e5cdc>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
81105d34:	00000206 	br	81105d40 <alt_msgdma_descriptor_sync_transfer+0x228>
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
81105d38:	00bfffc4 	movi	r2,-1
81105d3c:	00004f06 	br	81105e7c <alt_msgdma_descriptor_sync_transfer+0x364>
    * Set up msgdma controller to:
    * - Disable interrupt generation
    * - Run once a valid descriptor is written to controller
    * - Stop on an error with any particular descriptor
    */
     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
81105d40:	e0bffd17 	ldw	r2,-12(fp)
81105d44:	10800317 	ldw	r2,12(r2)
81105d48:	10800104 	addi	r2,r2,4
81105d4c:	e0fffd17 	ldw	r3,-12(fp)
81105d50:	19000d17 	ldw	r4,52(r3)
81105d54:	00fff2c4 	movi	r3,-53
81105d58:	20c6703a 	and	r3,r4,r3
81105d5c:	18c00114 	ori	r3,r3,4
81105d60:	10c00035 	stwio	r3,0(r2)
81105d64:	e0bff717 	ldw	r2,-36(fp)
81105d68:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81105d6c:	e0bff917 	ldw	r2,-28(fp)
81105d70:	1001703a 	wrctl	status,r2
		(~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
		(~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK)) ;
	 
	alt_irq_enable_all(context);
     
    counter = 0; /* reset counter */ 
81105d74:	e03ff30d 	sth	zero,-52(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
81105d78:	e0bffd17 	ldw	r2,-12(fp)
81105d7c:	10800317 	ldw	r2,12(r2)
81105d80:	10800037 	ldwio	r2,0(r2)
81105d84:	e0bff215 	stw	r2,-56(fp)
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
81105d88:	00001106 	br	81105dd0 <alt_msgdma_descriptor_sync_transfer+0x2b8>
    {
        alt_busy_sleep(1); /* delay 1us */
81105d8c:	01000044 	movi	r4,1
81105d90:	11072900 	call	81107290 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
81105d94:	e0bff30b 	ldhu	r2,-52(fp)
81105d98:	1084e230 	cmpltui	r2,r2,5000
81105d9c:	1000051e 	bne	r2,zero,81105db4 <alt_msgdma_descriptor_sync_transfer+0x29c>
        {
            alt_printf("time out after 5 msec while waiting for any pending" 
81105da0:	01204474 	movhi	r4,33041
81105da4:	2122cc04 	addi	r4,r4,-29904
81105da8:	1107c440 	call	81107c44 <alt_printf>
			* Now that access to the registers is complete, release the registers
			* semaphore so that other threads can access the registers.
			*/
			ALT_SEM_POST (dev->regs_lock);
			
            return -ETIME;
81105dac:	00bff084 	movi	r2,-62
81105db0:	00003206 	br	81105e7c <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;
81105db4:	e0bff30b 	ldhu	r2,-52(fp)
81105db8:	10800044 	addi	r2,r2,1
81105dbc:	e0bff30d 	sth	r2,-52(fp)
        csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
81105dc0:	e0bffd17 	ldw	r2,-12(fp)
81105dc4:	10800317 	ldw	r2,12(r2)
81105dc8:	10800037 	ldwio	r2,0(r2)
81105dcc:	e0bff215 	stw	r2,-56(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
81105dd0:	e0fff217 	ldw	r3,-56(fp)
81105dd4:	e0bff817 	ldw	r2,-32(fp)
81105dd8:	1884703a 	and	r2,r3,r2
81105ddc:	1000031e 	bne	r2,zero,81105dec <alt_msgdma_descriptor_sync_transfer+0x2d4>
81105de0:	e0bff217 	ldw	r2,-56(fp)
81105de4:	1080004c 	andi	r2,r2,1
81105de8:	103fe81e 	bne	r2,zero,81105d8c <__reset+0xfb0e5d8c>
    }
    

    /*Errors or conditions causing the dispatcher stopping issuing read/write 
      commands to masters*/
    if(0 != (csr_status & error))
81105dec:	e0fff217 	ldw	r3,-56(fp)
81105df0:	e0bff817 	ldw	r2,-32(fp)
81105df4:	1884703a 	and	r2,r3,r2
81105df8:	10000226 	beq	r2,zero,81105e04 <alt_msgdma_descriptor_sync_transfer+0x2ec>
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        return error;
81105dfc:	e0bff817 	ldw	r2,-32(fp)
81105e00:	00001e06 	br	81105e7c <alt_msgdma_descriptor_sync_transfer+0x364>
    }

    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) | 
81105e04:	e0bffd17 	ldw	r2,-12(fp)
81105e08:	10800317 	ldw	r2,12(r2)
81105e0c:	10800104 	addi	r2,r2,4
81105e10:	10800037 	ldwio	r2,0(r2)
81105e14:	10800814 	ori	r2,r2,32
81105e18:	e0bff615 	stw	r2,-40(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81105e1c:	0005303a 	rdctl	r2,status
81105e20:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81105e24:	e0fffa17 	ldw	r3,-24(fp)
81105e28:	00bfff84 	movi	r2,-2
81105e2c:	1884703a 	and	r2,r3,r2
81105e30:	1001703a 	wrctl	status,r2
  
  return context;
81105e34:	e0bffa17 	ldw	r2,-24(fp)
	ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();  
81105e38:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81105e3c:	e0bffd17 	ldw	r2,-12(fp)
81105e40:	10800317 	ldw	r2,12(r2)
81105e44:	10800104 	addi	r2,r2,4
81105e48:	e0fff617 	ldw	r3,-40(fp)
81105e4c:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
81105e50:	e0bffd17 	ldw	r2,-12(fp)
81105e54:	10800317 	ldw	r2,12(r2)
81105e58:	e0fffd17 	ldw	r3,-12(fp)
81105e5c:	18c00317 	ldw	r3,12(r3)
81105e60:	18c00037 	ldwio	r3,0(r3)
81105e64:	10c00035 	stwio	r3,0(r2)
81105e68:	e0bff717 	ldw	r2,-36(fp)
81105e6c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81105e70:	e0bffb17 	ldw	r2,-20(fp)
81105e74:	1001703a 	wrctl	status,r2
	* Now that access to the registers is complete, release the registers
	* semaphore so that other threads can access the registers.
	*/
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
81105e78:	0005883a 	mov	r2,zero

}
81105e7c:	e037883a 	mov	sp,fp
81105e80:	dfc00117 	ldw	ra,4(sp)
81105e84:	df000017 	ldw	fp,0(sp)
81105e88:	dec00204 	addi	sp,sp,8
81105e8c:	f800283a 	ret

81105e90 <alt_msgdma_construct_standard_st_to_mm_descriptor>:
 */
int alt_msgdma_construct_standard_st_to_mm_descriptor (
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *write_address, alt_u32 length, alt_u32 control)
{
81105e90:	defff804 	addi	sp,sp,-32
81105e94:	dfc00715 	stw	ra,28(sp)
81105e98:	df000615 	stw	fp,24(sp)
81105e9c:	df000604 	addi	fp,sp,24
81105ea0:	e13ffc15 	stw	r4,-16(fp)
81105ea4:	e17ffd15 	stw	r5,-12(fp)
81105ea8:	e1bffe15 	stw	r6,-8(fp)
81105eac:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, NULL, 
81105eb0:	e0800217 	ldw	r2,8(fp)
81105eb4:	d8800115 	stw	r2,4(sp)
81105eb8:	e0bfff17 	ldw	r2,-4(fp)
81105ebc:	d8800015 	stw	r2,0(sp)
81105ec0:	e1fffe17 	ldw	r7,-8(fp)
81105ec4:	000d883a 	mov	r6,zero
81105ec8:	e17ffd17 	ldw	r5,-12(fp)
81105ecc:	e13ffc17 	ldw	r4,-16(fp)
81105ed0:	11056680 	call	81105668 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
81105ed4:	e037883a 	mov	sp,fp
81105ed8:	dfc00117 	ldw	ra,4(sp)
81105edc:	df000017 	ldw	fp,0(sp)
81105ee0:	dec00204 	addi	sp,sp,8
81105ee4:	f800283a 	ret

81105ee8 <alt_msgdma_construct_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address,
	alt_u32 length,
	alt_u32 control)
{
81105ee8:	defff804 	addi	sp,sp,-32
81105eec:	dfc00715 	stw	ra,28(sp)
81105ef0:	df000615 	stw	fp,24(sp)
81105ef4:	df000604 	addi	fp,sp,24
81105ef8:	e13ffc15 	stw	r4,-16(fp)
81105efc:	e17ffd15 	stw	r5,-12(fp)
81105f00:	e1bffe15 	stw	r6,-8(fp)
81105f04:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
81105f08:	e0800217 	ldw	r2,8(fp)
81105f0c:	d8800115 	stw	r2,4(sp)
81105f10:	e0bfff17 	ldw	r2,-4(fp)
81105f14:	d8800015 	stw	r2,0(sp)
81105f18:	000f883a 	mov	r7,zero
81105f1c:	e1bffe17 	ldw	r6,-8(fp)
81105f20:	e17ffd17 	ldw	r5,-12(fp)
81105f24:	e13ffc17 	ldw	r4,-16(fp)
81105f28:	11056680 	call	81105668 <alt_msgdma_construct_standard_descriptor>
            NULL, length, control);

}
81105f2c:	e037883a 	mov	sp,fp
81105f30:	dfc00117 	ldw	ra,4(sp)
81105f34:	df000017 	ldw	fp,0(sp)
81105f38:	dec00204 	addi	sp,sp,8
81105f3c:	f800283a 	ret

81105f40 <alt_msgdma_construct_standard_mm_to_mm_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
81105f40:	defff804 	addi	sp,sp,-32
81105f44:	dfc00715 	stw	ra,28(sp)
81105f48:	df000615 	stw	fp,24(sp)
81105f4c:	df000604 	addi	fp,sp,24
81105f50:	e13ffc15 	stw	r4,-16(fp)
81105f54:	e17ffd15 	stw	r5,-12(fp)
81105f58:	e1bffe15 	stw	r6,-8(fp)
81105f5c:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
81105f60:	e0800317 	ldw	r2,12(fp)
81105f64:	d8800115 	stw	r2,4(sp)
81105f68:	e0800217 	ldw	r2,8(fp)
81105f6c:	d8800015 	stw	r2,0(sp)
81105f70:	e1ffff17 	ldw	r7,-4(fp)
81105f74:	e1bffe17 	ldw	r6,-8(fp)
81105f78:	e17ffd17 	ldw	r5,-12(fp)
81105f7c:	e13ffc17 	ldw	r4,-16(fp)
81105f80:	11056680 	call	81105668 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
81105f84:	e037883a 	mov	sp,fp
81105f88:	dfc00117 	ldw	ra,4(sp)
81105f8c:	df000017 	ldw	fp,0(sp)
81105f90:	dec00204 	addi	sp,sp,8
81105f94:	f800283a 	ret

81105f98 <alt_msgdma_construct_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 write_burst_count, 
	alt_u16 write_stride)
{
81105f98:	defff004 	addi	sp,sp,-64
81105f9c:	dfc00f15 	stw	ra,60(sp)
81105fa0:	df000e15 	stw	fp,56(sp)
81105fa4:	df000e04 	addi	fp,sp,56
81105fa8:	e13ff915 	stw	r4,-28(fp)
81105fac:	e17ffa15 	stw	r5,-24(fp)
81105fb0:	e1bffb15 	stw	r6,-20(fp)
81105fb4:	e1fffc15 	stw	r7,-16(fp)
81105fb8:	e1000317 	ldw	r4,12(fp)
81105fbc:	e0c00417 	ldw	r3,16(fp)
81105fc0:	e0800517 	ldw	r2,20(fp)
81105fc4:	e13ffd0d 	sth	r4,-12(fp)
81105fc8:	e0fffe05 	stb	r3,-8(fp)
81105fcc:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
81105fd0:	e0bffd0b 	ldhu	r2,-12(fp)
81105fd4:	e0fffe03 	ldbu	r3,-8(fp)
81105fd8:	e13fff0b 	ldhu	r4,-4(fp)
81105fdc:	d9000615 	stw	r4,24(sp)
81105fe0:	d8000515 	stw	zero,20(sp)
81105fe4:	d8c00415 	stw	r3,16(sp)
81105fe8:	d8000315 	stw	zero,12(sp)
81105fec:	d8800215 	stw	r2,8(sp)
81105ff0:	e0800217 	ldw	r2,8(fp)
81105ff4:	d8800115 	stw	r2,4(sp)
81105ff8:	e0bffc17 	ldw	r2,-16(fp)
81105ffc:	d8800015 	stw	r2,0(sp)
81106000:	e1fffb17 	ldw	r7,-20(fp)
81106004:	000d883a 	mov	r6,zero
81106008:	e17ffa17 	ldw	r5,-24(fp)
8110600c:	e13ff917 	ldw	r4,-28(fp)
81106010:	11056f40 	call	811056f4 <alt_msgdma_construct_extended_descriptor>
            NULL, write_address, length, control, sequence_number, 0, 
            write_burst_count, 0, write_stride);
}
81106014:	e037883a 	mov	sp,fp
81106018:	dfc00117 	ldw	ra,4(sp)
8110601c:	df000017 	ldw	fp,0(sp)
81106020:	dec00204 	addi	sp,sp,8
81106024:	f800283a 	ret

81106028 <alt_msgdma_construct_extended_mm_to_st_descriptor>:
	alt_u32 length,
	alt_u32 control,
	alt_u16 sequence_number,
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
81106028:	defff004 	addi	sp,sp,-64
8110602c:	dfc00f15 	stw	ra,60(sp)
81106030:	df000e15 	stw	fp,56(sp)
81106034:	df000e04 	addi	fp,sp,56
81106038:	e13ff915 	stw	r4,-28(fp)
8110603c:	e17ffa15 	stw	r5,-24(fp)
81106040:	e1bffb15 	stw	r6,-20(fp)
81106044:	e1fffc15 	stw	r7,-16(fp)
81106048:	e1000317 	ldw	r4,12(fp)
8110604c:	e0c00417 	ldw	r3,16(fp)
81106050:	e0800517 	ldw	r2,20(fp)
81106054:	e13ffd0d 	sth	r4,-12(fp)
81106058:	e0fffe05 	stb	r3,-8(fp)
8110605c:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, read_address, 
81106060:	e0bffd0b 	ldhu	r2,-12(fp)
81106064:	e0fffe03 	ldbu	r3,-8(fp)
81106068:	e13fff0b 	ldhu	r4,-4(fp)
8110606c:	d8000615 	stw	zero,24(sp)
81106070:	d9000515 	stw	r4,20(sp)
81106074:	d8000415 	stw	zero,16(sp)
81106078:	d8c00315 	stw	r3,12(sp)
8110607c:	d8800215 	stw	r2,8(sp)
81106080:	e0800217 	ldw	r2,8(fp)
81106084:	d8800115 	stw	r2,4(sp)
81106088:	e0bffc17 	ldw	r2,-16(fp)
8110608c:	d8800015 	stw	r2,0(sp)
81106090:	000f883a 	mov	r7,zero
81106094:	e1bffb17 	ldw	r6,-20(fp)
81106098:	e17ffa17 	ldw	r5,-24(fp)
8110609c:	e13ff917 	ldw	r4,-28(fp)
811060a0:	11056f40 	call	811056f4 <alt_msgdma_construct_extended_descriptor>
            NULL, length, control, sequence_number, read_burst_count, 0, 
            read_stride, 0);

}
811060a4:	e037883a 	mov	sp,fp
811060a8:	dfc00117 	ldw	ra,4(sp)
811060ac:	df000017 	ldw	fp,0(sp)
811060b0:	dec00204 	addi	sp,sp,8
811060b4:	f800283a 	ret

811060b8 <alt_msgdma_construct_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
811060b8:	deffee04 	addi	sp,sp,-72
811060bc:	dfc01115 	stw	ra,68(sp)
811060c0:	df001015 	stw	fp,64(sp)
811060c4:	df001004 	addi	fp,sp,64
811060c8:	e13ff715 	stw	r4,-36(fp)
811060cc:	e17ff815 	stw	r5,-32(fp)
811060d0:	e1bff915 	stw	r6,-28(fp)
811060d4:	e1fffa15 	stw	r7,-24(fp)
811060d8:	e1800417 	ldw	r6,16(fp)
811060dc:	e1400517 	ldw	r5,20(fp)
811060e0:	e1000617 	ldw	r4,24(fp)
811060e4:	e0c00717 	ldw	r3,28(fp)
811060e8:	e0800817 	ldw	r2,32(fp)
811060ec:	e1bffb0d 	sth	r6,-20(fp)
811060f0:	e17ffc05 	stb	r5,-16(fp)
811060f4:	e13ffd05 	stb	r4,-12(fp)
811060f8:	e0fffe0d 	sth	r3,-8(fp)
811060fc:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
81106100:	e0bffb0b 	ldhu	r2,-20(fp)
81106104:	e0fffc03 	ldbu	r3,-16(fp)
81106108:	e13ffd03 	ldbu	r4,-12(fp)
8110610c:	e17ffe0b 	ldhu	r5,-8(fp)
81106110:	e1bfff0b 	ldhu	r6,-4(fp)
81106114:	d9800615 	stw	r6,24(sp)
81106118:	d9400515 	stw	r5,20(sp)
8110611c:	d9000415 	stw	r4,16(sp)
81106120:	d8c00315 	stw	r3,12(sp)
81106124:	d8800215 	stw	r2,8(sp)
81106128:	e0800317 	ldw	r2,12(fp)
8110612c:	d8800115 	stw	r2,4(sp)
81106130:	e0800217 	ldw	r2,8(fp)
81106134:	d8800015 	stw	r2,0(sp)
81106138:	e1fffa17 	ldw	r7,-24(fp)
8110613c:	e1bff917 	ldw	r6,-28(fp)
81106140:	e17ff817 	ldw	r5,-32(fp)
81106144:	e13ff717 	ldw	r4,-36(fp)
81106148:	11056f40 	call	811056f4 <alt_msgdma_construct_extended_descriptor>
            read_address, write_address, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
8110614c:	e037883a 	mov	sp,fp
81106150:	dfc00117 	ldw	ra,4(sp)
81106154:	df000017 	ldw	fp,0(sp)
81106158:	dec00204 	addi	sp,sp,8
8110615c:	f800283a 	ret

81106160 <alt_msgdma_construct_prefetcher_standard_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
81106160:	defffb04 	addi	sp,sp,-20
81106164:	df000415 	stw	fp,16(sp)
81106168:	df000404 	addi	fp,sp,16
8110616c:	e13ffc15 	stw	r4,-16(fp)
81106170:	e17ffd15 	stw	r5,-12(fp)
81106174:	e1bffe15 	stw	r6,-8(fp)
81106178:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
8110617c:	e0bffc17 	ldw	r2,-16(fp)
81106180:	10c01217 	ldw	r3,72(r2)
81106184:	e0800117 	ldw	r2,4(fp)
81106188:	18800436 	bltu	r3,r2,8110619c <alt_msgdma_construct_prefetcher_standard_descriptor+0x3c>
       dev->enhanced_features != 0
8110618c:	e0bffc17 	ldw	r2,-16(fp)
81106190:	10801703 	ldbu	r2,92(r2)
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
81106194:	10803fcc 	andi	r2,r2,255
81106198:	10000226 	beq	r2,zero,811061a4 <alt_msgdma_construct_prefetcher_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
8110619c:	00bffa84 	movi	r2,-22
811061a0:	00001406 	br	811061f4 <alt_msgdma_construct_prefetcher_standard_descriptor+0x94>
    }
    descriptor->read_address = read_address;
811061a4:	e0bffd17 	ldw	r2,-12(fp)
811061a8:	e0fffe17 	ldw	r3,-8(fp)
811061ac:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
811061b0:	e0bffd17 	ldw	r2,-12(fp)
811061b4:	e0ffff17 	ldw	r3,-4(fp)
811061b8:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
811061bc:	e0bffd17 	ldw	r2,-12(fp)
811061c0:	e0c00117 	ldw	r3,4(fp)
811061c4:	10c00215 	stw	r3,8(r2)
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
811061c8:	e0fffd17 	ldw	r3,-12(fp)
811061cc:	e0bffd17 	ldw	r2,-12(fp)
811061d0:	10c00315 	stw	r3,12(r2)
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
811061d4:	e0c00217 	ldw	r3,8(fp)
811061d8:	00900034 	movhi	r2,16384
811061dc:	10bfffc4 	addi	r2,r2,-1
811061e0:	1884703a 	and	r2,r3,r2
811061e4:	10e00034 	orhi	r3,r2,32768
    descriptor->transfer_length = length;
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
811061e8:	e0bffd17 	ldw	r2,-12(fp)
811061ec:	10c00715 	stw	r3,28(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
811061f0:	0005883a 	mov	r2,zero
}
811061f4:	e037883a 	mov	sp,fp
811061f8:	df000017 	ldw	fp,0(sp)
811061fc:	dec00104 	addi	sp,sp,4
81106200:	f800283a 	ret

81106204 <alt_msgdma_construct_prefetcher_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
81106204:	defff404 	addi	sp,sp,-48
81106208:	df000b15 	stw	fp,44(sp)
8110620c:	df000b04 	addi	fp,sp,44
81106210:	e13ff715 	stw	r4,-36(fp)
81106214:	e17ff815 	stw	r5,-32(fp)
81106218:	e1bff915 	stw	r6,-28(fp)
8110621c:	e1fffa15 	stw	r7,-24(fp)
81106220:	e1800517 	ldw	r6,20(fp)
81106224:	e1400617 	ldw	r5,24(fp)
81106228:	e1000717 	ldw	r4,28(fp)
8110622c:	e0c00817 	ldw	r3,32(fp)
81106230:	e0800917 	ldw	r2,36(fp)
81106234:	e1bffb0d 	sth	r6,-20(fp)
81106238:	e17ffc05 	stb	r5,-16(fp)
8110623c:	e13ffd05 	stb	r4,-12(fp)
81106240:	e0fffe0d 	sth	r3,-8(fp)
81106244:	e0bfff0d 	sth	r2,-4(fp)
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
81106248:	e0bff717 	ldw	r2,-36(fp)
8110624c:	10c01217 	ldw	r3,72(r2)
81106250:	e0800317 	ldw	r2,12(fp)
81106254:	18801936 	bltu	r3,r2,811062bc <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
81106258:	e13ff717 	ldw	r4,-36(fp)
8110625c:	20801317 	ldw	r2,76(r4)
81106260:	20c01417 	ldw	r3,80(r4)
81106264:	e13ffe0b 	ldhu	r4,-8(fp)
81106268:	213fffcc 	andi	r4,r4,65535
8110626c:	2015883a 	mov	r10,r4
81106270:	0017883a 	mov	r11,zero
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
81106274:	1ac01136 	bltu	r3,r11,811062bc <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
81106278:	58c0011e 	bne	r11,r3,81106280 <alt_msgdma_construct_prefetcher_extended_descriptor+0x7c>
8110627c:	12800f36 	bltu	r2,r10,811062bc <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
81106280:	e13ff717 	ldw	r4,-36(fp)
81106284:	20801317 	ldw	r2,76(r4)
81106288:	20c01417 	ldw	r3,80(r4)
8110628c:	e13fff0b 	ldhu	r4,-4(fp)
81106290:	213fffcc 	andi	r4,r4,65535
81106294:	2011883a 	mov	r8,r4
81106298:	0013883a 	mov	r9,zero
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
8110629c:	1a400736 	bltu	r3,r9,811062bc <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
811062a0:	48c0011e 	bne	r9,r3,811062a8 <alt_msgdma_construct_prefetcher_extended_descriptor+0xa4>
811062a4:	12000536 	bltu	r2,r8,811062bc <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
811062a8:	e0bff717 	ldw	r2,-36(fp)
811062ac:	10801703 	ldbu	r2,92(r2)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
811062b0:	10803fcc 	andi	r2,r2,255
811062b4:	10800060 	cmpeqi	r2,r2,1
811062b8:	1000021e 	bne	r2,zero,811062c4 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
811062bc:	00bffa84 	movi	r2,-22
811062c0:	00003106 	br	81106388 <alt_msgdma_construct_prefetcher_extended_descriptor+0x184>
    }
    
    descriptor->read_address_high = read_address_high;
811062c4:	e0bff817 	ldw	r2,-32(fp)
811062c8:	e0fff917 	ldw	r3,-28(fp)
811062cc:	10c00915 	stw	r3,36(r2)
    descriptor->read_address_low = read_address_low;
811062d0:	e0bff817 	ldw	r2,-32(fp)
811062d4:	e0fffa17 	ldw	r3,-24(fp)
811062d8:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_high = write_address_high;
811062dc:	e0bff817 	ldw	r2,-32(fp)
811062e0:	e0c00117 	ldw	r3,4(fp)
811062e4:	10c00a15 	stw	r3,40(r2)
    descriptor->write_address_low = write_address_low;
811062e8:	e0bff817 	ldw	r2,-32(fp)
811062ec:	e0c00217 	ldw	r3,8(fp)
811062f0:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
811062f4:	e0bff817 	ldw	r2,-32(fp)
811062f8:	e0c00317 	ldw	r3,12(fp)
811062fc:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
81106300:	e0bff817 	ldw	r2,-32(fp)
81106304:	e0fffb0b 	ldhu	r3,-20(fp)
81106308:	10c0070d 	sth	r3,28(r2)
    descriptor->read_burst_count = read_burst_count;
8110630c:	e0bff817 	ldw	r2,-32(fp)
81106310:	e0fffc03 	ldbu	r3,-16(fp)
81106314:	10c00785 	stb	r3,30(r2)
    descriptor->write_burst_count = write_burst_count;
81106318:	e0bff817 	ldw	r2,-32(fp)
8110631c:	e0fffd03 	ldbu	r3,-12(fp)
81106320:	10c007c5 	stb	r3,31(r2)
    descriptor->read_stride = read_stride;
81106324:	e0bff817 	ldw	r2,-32(fp)
81106328:	e0fffe0b 	ldhu	r3,-8(fp)
8110632c:	10c0080d 	sth	r3,32(r2)
    descriptor->write_stride = write_stride;
81106330:	e0bff817 	ldw	r2,-32(fp)
81106334:	e0ffff0b 	ldhu	r3,-4(fp)
81106338:	10c0088d 	sth	r3,34(r2)
    /* have descriptor point to itself */
	node_addr.u64 = (uintptr_t)descriptor;
8110633c:	e0bff817 	ldw	r2,-32(fp)
81106340:	1019883a 	mov	r12,r2
81106344:	001b883a 	mov	r13,zero
81106348:	e33ff515 	stw	r12,-44(fp)
8110634c:	e37ff615 	stw	r13,-40(fp)
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
81106350:	e0fff517 	ldw	r3,-44(fp)
81106354:	e0bff817 	ldw	r2,-32(fp)
81106358:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
8110635c:	e0fff617 	ldw	r3,-40(fp)
81106360:	e0bff817 	ldw	r2,-32(fp)
81106364:	10c00b15 	stw	r3,44(r2)
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
81106368:	e0c00417 	ldw	r3,16(fp)
8110636c:	00900034 	movhi	r2,16384
81106370:	10bfffc4 	addi	r2,r2,-1
81106374:	1884703a 	and	r2,r3,r2
81106378:	10e00034 	orhi	r3,r2,32768
	node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
8110637c:	e0bff817 	ldw	r2,-32(fp)
81106380:	10c00f15 	stw	r3,60(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
81106384:	0005883a 	mov	r2,zero
}
81106388:	e037883a 	mov	sp,fp
8110638c:	df000017 	ldw	fp,0(sp)
81106390:	dec00104 	addi	sp,sp,4
81106394:	f800283a 	ret

81106398 <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address,
	alt_u32 write_address,
	alt_u32 length,
	alt_u32 control)
{
81106398:	defff804 	addi	sp,sp,-32
8110639c:	dfc00715 	stw	ra,28(sp)
811063a0:	df000615 	stw	fp,24(sp)
811063a4:	df000604 	addi	fp,sp,24
811063a8:	e13ffc15 	stw	r4,-16(fp)
811063ac:	e17ffd15 	stw	r5,-12(fp)
811063b0:	e1bffe15 	stw	r6,-8(fp)
811063b4:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
811063b8:	e0800317 	ldw	r2,12(fp)
811063bc:	d8800115 	stw	r2,4(sp)
811063c0:	e0800217 	ldw	r2,8(fp)
811063c4:	d8800015 	stw	r2,0(sp)
811063c8:	e1ffff17 	ldw	r7,-4(fp)
811063cc:	e1bffe17 	ldw	r6,-8(fp)
811063d0:	e17ffd17 	ldw	r5,-12(fp)
811063d4:	e13ffc17 	ldw	r4,-16(fp)
811063d8:	11061600 	call	81106160 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, write_address, length, control);
}
811063dc:	e037883a 	mov	sp,fp
811063e0:	dfc00117 	ldw	ra,4(sp)
811063e4:	df000017 	ldw	fp,0(sp)
811063e8:	dec00204 	addi	sp,sp,8
811063ec:	f800283a 	ret

811063f0 <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
811063f0:	defff804 	addi	sp,sp,-32
811063f4:	dfc00715 	stw	ra,28(sp)
811063f8:	df000615 	stw	fp,24(sp)
811063fc:	df000604 	addi	fp,sp,24
81106400:	e13ffc15 	stw	r4,-16(fp)
81106404:	e17ffd15 	stw	r5,-12(fp)
81106408:	e1bffe15 	stw	r6,-8(fp)
8110640c:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
81106410:	e0800217 	ldw	r2,8(fp)
81106414:	d8800115 	stw	r2,4(sp)
81106418:	e0bfff17 	ldw	r2,-4(fp)
8110641c:	d8800015 	stw	r2,0(sp)
81106420:	e1fffe17 	ldw	r7,-8(fp)
81106424:	000d883a 	mov	r6,zero
81106428:	e17ffd17 	ldw	r5,-12(fp)
8110642c:	e13ffc17 	ldw	r4,-16(fp)
81106430:	11061600 	call	81106160 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		0, write_address, length, control);
}
81106434:	e037883a 	mov	sp,fp
81106438:	dfc00117 	ldw	ra,4(sp)
8110643c:	df000017 	ldw	fp,0(sp)
81106440:	dec00204 	addi	sp,sp,8
81106444:	f800283a 	ret

81106448 <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 read_address, 
	alt_u32 length, 
	alt_u32 control)
{
81106448:	defff804 	addi	sp,sp,-32
8110644c:	dfc00715 	stw	ra,28(sp)
81106450:	df000615 	stw	fp,24(sp)
81106454:	df000604 	addi	fp,sp,24
81106458:	e13ffc15 	stw	r4,-16(fp)
8110645c:	e17ffd15 	stw	r5,-12(fp)
81106460:	e1bffe15 	stw	r6,-8(fp)
81106464:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
81106468:	e0800217 	ldw	r2,8(fp)
8110646c:	d8800115 	stw	r2,4(sp)
81106470:	e0bfff17 	ldw	r2,-4(fp)
81106474:	d8800015 	stw	r2,0(sp)
81106478:	000f883a 	mov	r7,zero
8110647c:	e1bffe17 	ldw	r6,-8(fp)
81106480:	e17ffd17 	ldw	r5,-12(fp)
81106484:	e13ffc17 	ldw	r4,-16(fp)
81106488:	11061600 	call	81106160 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, 0, length, control);
}
8110648c:	e037883a 	mov	sp,fp
81106490:	dfc00117 	ldw	ra,4(sp)
81106494:	df000017 	ldw	fp,0(sp)
81106498:	dec00204 	addi	sp,sp,8
8110649c:	f800283a 	ret

811064a0 <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number,
	alt_u8 write_burst_count,
	alt_u16 write_stride)
{
811064a0:	deffee04 	addi	sp,sp,-72
811064a4:	dfc01115 	stw	ra,68(sp)
811064a8:	df001015 	stw	fp,64(sp)
811064ac:	df001004 	addi	fp,sp,64
811064b0:	e13ff915 	stw	r4,-28(fp)
811064b4:	e17ffa15 	stw	r5,-24(fp)
811064b8:	e1bffb15 	stw	r6,-20(fp)
811064bc:	e1fffc15 	stw	r7,-16(fp)
811064c0:	e1000417 	ldw	r4,16(fp)
811064c4:	e0c00517 	ldw	r3,20(fp)
811064c8:	e0800617 	ldw	r2,24(fp)
811064cc:	e13ffd0d 	sth	r4,-12(fp)
811064d0:	e0fffe05 	stb	r3,-8(fp)
811064d4:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor, 
811064d8:	e0bffd0b 	ldhu	r2,-12(fp)
811064dc:	e0fffe03 	ldbu	r3,-8(fp)
811064e0:	e13fff0b 	ldhu	r4,-4(fp)
811064e4:	d9000815 	stw	r4,32(sp)
811064e8:	d8000715 	stw	zero,28(sp)
811064ec:	d8c00615 	stw	r3,24(sp)
811064f0:	d8000515 	stw	zero,20(sp)
811064f4:	d8800415 	stw	r2,16(sp)
811064f8:	e0800317 	ldw	r2,12(fp)
811064fc:	d8800315 	stw	r2,12(sp)
81106500:	e0800217 	ldw	r2,8(fp)
81106504:	d8800215 	stw	r2,8(sp)
81106508:	e0bffc17 	ldw	r2,-16(fp)
8110650c:	d8800115 	stw	r2,4(sp)
81106510:	e0bffb17 	ldw	r2,-20(fp)
81106514:	d8800015 	stw	r2,0(sp)
81106518:	000f883a 	mov	r7,zero
8110651c:	000d883a 	mov	r6,zero
81106520:	e17ffa17 	ldw	r5,-24(fp)
81106524:	e13ff917 	ldw	r4,-28(fp)
81106528:	11062040 	call	81106204 <alt_msgdma_construct_prefetcher_extended_descriptor>
            0, 0, write_address_high, write_address_low, length, control, 
			sequence_number, 0, write_burst_count, 0, write_stride);
}
8110652c:	e037883a 	mov	sp,fp
81106530:	dfc00117 	ldw	ra,4(sp)
81106534:	df000017 	ldw	fp,0(sp)
81106538:	dec00204 	addi	sp,sp,8
8110653c:	f800283a 	ret

81106540 <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
81106540:	deffee04 	addi	sp,sp,-72
81106544:	dfc01115 	stw	ra,68(sp)
81106548:	df001015 	stw	fp,64(sp)
8110654c:	df001004 	addi	fp,sp,64
81106550:	e13ff915 	stw	r4,-28(fp)
81106554:	e17ffa15 	stw	r5,-24(fp)
81106558:	e1bffb15 	stw	r6,-20(fp)
8110655c:	e1fffc15 	stw	r7,-16(fp)
81106560:	e1000417 	ldw	r4,16(fp)
81106564:	e0c00517 	ldw	r3,20(fp)
81106568:	e0800617 	ldw	r2,24(fp)
8110656c:	e13ffd0d 	sth	r4,-12(fp)
81106570:	e0fffe05 	stb	r3,-8(fp)
81106574:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
81106578:	e0bffd0b 	ldhu	r2,-12(fp)
8110657c:	e0fffe03 	ldbu	r3,-8(fp)
81106580:	e13fff0b 	ldhu	r4,-4(fp)
81106584:	d8000815 	stw	zero,32(sp)
81106588:	d9000715 	stw	r4,28(sp)
8110658c:	d8000615 	stw	zero,24(sp)
81106590:	d8c00515 	stw	r3,20(sp)
81106594:	d8800415 	stw	r2,16(sp)
81106598:	e0800317 	ldw	r2,12(fp)
8110659c:	d8800315 	stw	r2,12(sp)
811065a0:	e0800217 	ldw	r2,8(fp)
811065a4:	d8800215 	stw	r2,8(sp)
811065a8:	d8000115 	stw	zero,4(sp)
811065ac:	d8000015 	stw	zero,0(sp)
811065b0:	e1fffc17 	ldw	r7,-16(fp)
811065b4:	e1bffb17 	ldw	r6,-20(fp)
811065b8:	e17ffa17 	ldw	r5,-24(fp)
811065bc:	e13ff917 	ldw	r4,-28(fp)
811065c0:	11062040 	call	81106204 <alt_msgdma_construct_prefetcher_extended_descriptor>
    		read_address_high, read_address_low, 0, 0, length, control, 
			sequence_number, read_burst_count, 0, read_stride, 0);
}
811065c4:	e037883a 	mov	sp,fp
811065c8:	dfc00117 	ldw	ra,4(sp)
811065cc:	df000017 	ldw	fp,0(sp)
811065d0:	dec00204 	addi	sp,sp,8
811065d4:	f800283a 	ret

811065d8 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor>:
	alt_u16 sequence_number,
	alt_u8 read_burst_count,
	alt_u8 write_burst_count, 
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
811065d8:	deffec04 	addi	sp,sp,-80
811065dc:	dfc01315 	stw	ra,76(sp)
811065e0:	df001215 	stw	fp,72(sp)
811065e4:	df001204 	addi	fp,sp,72
811065e8:	e13ff715 	stw	r4,-36(fp)
811065ec:	e17ff815 	stw	r5,-32(fp)
811065f0:	e1bff915 	stw	r6,-28(fp)
811065f4:	e1fffa15 	stw	r7,-24(fp)
811065f8:	e1800617 	ldw	r6,24(fp)
811065fc:	e1400717 	ldw	r5,28(fp)
81106600:	e1000817 	ldw	r4,32(fp)
81106604:	e0c00917 	ldw	r3,36(fp)
81106608:	e0800a17 	ldw	r2,40(fp)
8110660c:	e1bffb0d 	sth	r6,-20(fp)
81106610:	e17ffc05 	stb	r5,-16(fp)
81106614:	e13ffd05 	stb	r4,-12(fp)
81106618:	e0fffe0d 	sth	r3,-8(fp)
8110661c:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
81106620:	e0bffb0b 	ldhu	r2,-20(fp)
81106624:	e0fffc03 	ldbu	r3,-16(fp)
81106628:	e13ffd03 	ldbu	r4,-12(fp)
8110662c:	e17ffe0b 	ldhu	r5,-8(fp)
81106630:	e1bfff0b 	ldhu	r6,-4(fp)
81106634:	d9800815 	stw	r6,32(sp)
81106638:	d9400715 	stw	r5,28(sp)
8110663c:	d9000615 	stw	r4,24(sp)
81106640:	d8c00515 	stw	r3,20(sp)
81106644:	d8800415 	stw	r2,16(sp)
81106648:	e0800517 	ldw	r2,20(fp)
8110664c:	d8800315 	stw	r2,12(sp)
81106650:	e0800417 	ldw	r2,16(fp)
81106654:	d8800215 	stw	r2,8(sp)
81106658:	e0800317 	ldw	r2,12(fp)
8110665c:	d8800115 	stw	r2,4(sp)
81106660:	e0800217 	ldw	r2,8(fp)
81106664:	d8800015 	stw	r2,0(sp)
81106668:	e1fffa17 	ldw	r7,-24(fp)
8110666c:	e1bff917 	ldw	r6,-28(fp)
81106670:	e17ff817 	ldw	r5,-32(fp)
81106674:	e13ff717 	ldw	r4,-36(fp)
81106678:	11062040 	call	81106204 <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, write_address_high, 
			write_address_low, length, control, sequence_number, 
			read_burst_count, write_burst_count, read_stride, write_stride);

}
8110667c:	e037883a 	mov	sp,fp
81106680:	dfc00117 	ldw	ra,4(sp)
81106684:	df000017 	ldw	fp,0(sp)
81106688:	dec00204 	addi	sp,sp,8
8110668c:	f800283a 	ret

81106690 <alt_msgdma_prefetcher_add_standard_desc_to_list>:
 *           descriptor.next_ptr not pointing back to itslef)
 */
int alt_msgdma_prefetcher_add_standard_desc_to_list (
	alt_msgdma_prefetcher_standard_descriptor** list,
	alt_msgdma_prefetcher_standard_descriptor* descriptor)
{
81106690:	defffc04 	addi	sp,sp,-16
81106694:	df000315 	stw	fp,12(sp)
81106698:	df000304 	addi	fp,sp,12
8110669c:	e13ffe15 	stw	r4,-8(fp)
811066a0:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	
	if (descriptor == NULL)
811066a4:	e0bfff17 	ldw	r2,-4(fp)
811066a8:	1000021e 	bne	r2,zero,811066b4 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x24>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
811066ac:	00bffa84 	movi	r2,-22
811066b0:	00002f06 	br	81106770 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (descriptor->next_desc_ptr != (alt_u32)descriptor)
811066b4:	e0bfff17 	ldw	r2,-4(fp)
811066b8:	10c00317 	ldw	r3,12(r2)
811066bc:	e0bfff17 	ldw	r2,-4(fp)
811066c0:	18800226 	beq	r3,r2,811066cc <alt_msgdma_prefetcher_add_standard_desc_to_list+0x3c>
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
811066c4:	00bffa84 	movi	r2,-22
811066c8:	00002906 	br	81106770 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (*list == NULL)
811066cc:	e0bffe17 	ldw	r2,-8(fp)
811066d0:	10800017 	ldw	r2,0(r2)
811066d4:	1000051e 	bne	r2,zero,811066ec <alt_msgdma_prefetcher_add_standard_desc_to_list+0x5c>
	{
		*list = descriptor;  /* make this root-node if list is empty */
811066d8:	e0bffe17 	ldw	r2,-8(fp)
811066dc:	e0ffff17 	ldw	r3,-4(fp)
811066e0:	10c00015 	stw	r3,0(r2)
		return 0;  /* successfully added */
811066e4:	0005883a 	mov	r2,zero
811066e8:	00002106 	br	81106770 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (*list == descriptor)
811066ec:	e0bffe17 	ldw	r2,-8(fp)
811066f0:	10c00017 	ldw	r3,0(r2)
811066f4:	e0bfff17 	ldw	r2,-4(fp)
811066f8:	1880021e 	bne	r3,r2,81106704 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x74>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
811066fc:	00bffa84 	movi	r2,-22
81106700:	00001b06 	br	81106770 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
81106704:	e0bffe17 	ldw	r2,-8(fp)
81106708:	10800017 	ldw	r2,0(r2)
8110670c:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
81106710:	00000906 	br	81106738 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xa8>
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
81106714:	e0bffd17 	ldw	r2,-12(fp)
81106718:	10c00317 	ldw	r3,12(r2)
8110671c:	e0bfff17 	ldw	r2,-4(fp)
81106720:	1880021e 	bne	r3,r2,8110672c <alt_msgdma_prefetcher_add_standard_desc_to_list+0x9c>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
81106724:	00bffa84 	movi	r2,-22
81106728:	00001106 	br	81106770 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
8110672c:	e0bffd17 	ldw	r2,-12(fp)
81106730:	10800317 	ldw	r2,12(r2)
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		last_descr_ptr = 
81106734:	e0bffd15 	stw	r2,-12(fp)
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
81106738:	e0bffd17 	ldw	r2,-12(fp)
8110673c:	10800317 	ldw	r2,12(r2)
81106740:	e0fffe17 	ldw	r3,-8(fp)
81106744:	18c00017 	ldw	r3,0(r3)
81106748:	10fff21e 	bne	r2,r3,81106714 <__reset+0xfb0e6714>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* add this descriptor to end of list */
	last_descr_ptr->next_desc_ptr = (alt_u32)((uintptr_t)descriptor);
8110674c:	e0ffff17 	ldw	r3,-4(fp)
81106750:	e0bffd17 	ldw	r2,-12(fp)
81106754:	10c00315 	stw	r3,12(r2)
	/* ensure new last pointer points the start of the list */
	descriptor->next_desc_ptr = (alt_u32)((uintptr_t)*list);  
81106758:	e0bffe17 	ldw	r2,-8(fp)
8110675c:	10800017 	ldw	r2,0(r2)
81106760:	1007883a 	mov	r3,r2
81106764:	e0bfff17 	ldw	r2,-4(fp)
81106768:	10c00315 	stw	r3,12(r2)
	return 0; /* successfully added */
8110676c:	0005883a 	mov	r2,zero
}
81106770:	e037883a 	mov	sp,fp
81106774:	df000017 	ldw	fp,0(sp)
81106778:	dec00104 	addi	sp,sp,4
8110677c:	f800283a 	ret

81106780 <alt_msgdma_prefetcher_add_extended_desc_to_list>:

int alt_msgdma_prefetcher_add_extended_desc_to_list (
	alt_msgdma_prefetcher_extended_descriptor** list,
	alt_msgdma_prefetcher_extended_descriptor* descriptor)
{
81106780:	defff804 	addi	sp,sp,-32
81106784:	df000715 	stw	fp,28(sp)
81106788:	df000704 	addi	fp,sp,28
8110678c:	e13ffe15 	stw	r4,-8(fp)
81106790:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	msgdma_addr64 root_node_addr, next_node_addr;
	
	if (descriptor == NULL)
81106794:	e13fff17 	ldw	r4,-4(fp)
81106798:	2000021e 	bne	r4,zero,811067a4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x24>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
8110679c:	00bffa84 	movi	r2,-22
811067a0:	00005906 	br	81106908 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
811067a4:	e13fff17 	ldw	r4,-4(fp)
811067a8:	2015883a 	mov	r10,r4
811067ac:	0017883a 	mov	r11,zero
811067b0:	e2bffc15 	stw	r10,-16(fp)
811067b4:	e2fffd15 	stw	r11,-12(fp)
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
811067b8:	e13fff17 	ldw	r4,-4(fp)
811067bc:	21400317 	ldw	r5,12(r4)
811067c0:	e13ffc17 	ldw	r4,-16(fp)
811067c4:	29000626 	beq	r5,r4,811067e0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
811067c8:	e13fff17 	ldw	r4,-4(fp)
811067cc:	21400b17 	ldw	r5,44(r4)
811067d0:	e13ffd17 	ldw	r4,-12(fp)
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
811067d4:	29000226 	beq	r5,r4,811067e0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
811067d8:	00bffa84 	movi	r2,-22
811067dc:	00004a06 	br	81106908 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	if (*list == NULL)
811067e0:	e13ffe17 	ldw	r4,-8(fp)
811067e4:	21000017 	ldw	r4,0(r4)
811067e8:	2000051e 	bne	r4,zero,81106800 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x80>
	{
		*list = descriptor;  /* make this the root-node if list is empty */
811067ec:	e0bffe17 	ldw	r2,-8(fp)
811067f0:	e0ffff17 	ldw	r3,-4(fp)
811067f4:	10c00015 	stw	r3,0(r2)
		return 0;
811067f8:	0005883a 	mov	r2,zero
811067fc:	00004206 	br	81106908 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	if (*list == descriptor)
81106800:	e13ffe17 	ldw	r4,-8(fp)
81106804:	21400017 	ldw	r5,0(r4)
81106808:	e13fff17 	ldw	r4,-4(fp)
8110680c:	2900021e 	bne	r5,r4,81106818 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x98>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
81106810:	00bffa84 	movi	r2,-22
81106814:	00003c06 	br	81106908 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
81106818:	e13ffe17 	ldw	r4,-8(fp)
8110681c:	21000017 	ldw	r4,0(r4)
81106820:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
81106824:	e13ffe17 	ldw	r4,-8(fp)
81106828:	21000017 	ldw	r4,0(r4)
8110682c:	2011883a 	mov	r8,r4
81106830:	0013883a 	mov	r9,zero
81106834:	e23ffa15 	stw	r8,-24(fp)
81106838:	e27ffb15 	stw	r9,-20(fp)
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
8110683c:	00001806 	br	811068a0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x120>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* first check if descriptor already in the list */
		next_node_addr.u64 = (uintptr_t)descriptor;
81106840:	e13fff17 	ldw	r4,-4(fp)
81106844:	200d883a 	mov	r6,r4
81106848:	000f883a 	mov	r7,zero
8110684c:	e1bffc15 	stw	r6,-16(fp)
81106850:	e1fffd15 	stw	r7,-12(fp)
		if ((last_descr_ptr->next_desc_ptr_low == next_node_addr.u32[0])
81106854:	e13ff917 	ldw	r4,-28(fp)
81106858:	21400317 	ldw	r5,12(r4)
8110685c:	e13ffc17 	ldw	r4,-16(fp)
81106860:	2900061e 	bne	r5,r4,8110687c <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
			&& (last_descr_ptr->next_desc_ptr_high == next_node_addr.u32[1]))
81106864:	e13ff917 	ldw	r4,-28(fp)
81106868:	21400b17 	ldw	r5,44(r4)
8110686c:	e13ffd17 	ldw	r4,-12(fp)
81106870:	2900021e 	bne	r5,r4,8110687c <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
81106874:	00bffa84 	movi	r2,-22
81106878:	00002306 	br	81106908 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
8110687c:	e13ff917 	ldw	r4,-28(fp)
81106880:	21000317 	ldw	r4,12(r4)
81106884:	e13ffc15 	stw	r4,-16(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
81106888:	e13ff917 	ldw	r4,-28(fp)
8110688c:	21000b17 	ldw	r4,44(r4)
81106890:	e13ffd15 	stw	r4,-12(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
81106894:	e13ffc17 	ldw	r4,-16(fp)
81106898:	e17ffd17 	ldw	r5,-12(fp)
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
8110689c:	e13ff915 	stw	r4,-28(fp)
	last_descr_ptr = *list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
811068a0:	e13ff917 	ldw	r4,-28(fp)
811068a4:	21400317 	ldw	r5,12(r4)
811068a8:	e13ffa17 	ldw	r4,-24(fp)
811068ac:	29000426 	beq	r5,r4,811068c0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x140>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
811068b0:	e13ff917 	ldw	r4,-28(fp)
811068b4:	21400b17 	ldw	r5,44(r4)
811068b8:	e13ffb17 	ldw	r4,-20(fp)
811068bc:	293fe01e 	bne	r5,r4,81106840 <__reset+0xfb0e6840>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* add this descriptor to end of list */
	next_node_addr.u64 = (uintptr_t)descriptor;
811068c0:	e13fff17 	ldw	r4,-4(fp)
811068c4:	2005883a 	mov	r2,r4
811068c8:	0007883a 	mov	r3,zero
811068cc:	e0bffc15 	stw	r2,-16(fp)
811068d0:	e0fffd15 	stw	r3,-12(fp)
	last_descr_ptr->next_desc_ptr_low = next_node_addr.u32[0];
811068d4:	e0fffc17 	ldw	r3,-16(fp)
811068d8:	e0bff917 	ldw	r2,-28(fp)
811068dc:	10c00315 	stw	r3,12(r2)
	last_descr_ptr->next_desc_ptr_high = next_node_addr.u32[1];
811068e0:	e0fffd17 	ldw	r3,-12(fp)
811068e4:	e0bff917 	ldw	r2,-28(fp)
811068e8:	10c00b15 	stw	r3,44(r2)
	/* ensure new last pointer points the beginning of the list */
	descriptor->next_desc_ptr_low = root_node_addr.u32[0];
811068ec:	e0fffa17 	ldw	r3,-24(fp)
811068f0:	e0bfff17 	ldw	r2,-4(fp)
811068f4:	10c00315 	stw	r3,12(r2)
	descriptor->next_desc_ptr_high = root_node_addr.u32[1];
811068f8:	e0fffb17 	ldw	r3,-20(fp)
811068fc:	e0bfff17 	ldw	r2,-4(fp)
81106900:	10c00b15 	stw	r3,44(r2)
	return 0;
81106904:	0005883a 	mov	r2,zero
}
81106908:	e037883a 	mov	sp,fp
8110690c:	df000017 	ldw	fp,0(sp)
81106910:	dec00104 	addi	sp,sp,4
81106914:	f800283a 	ret

81106918 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_std_list_own_by_hw_bits (
	alt_msgdma_prefetcher_standard_descriptor *list)
{
81106918:	defffc04 	addi	sp,sp,-16
8110691c:	df000315 	stw	fp,12(sp)
81106920:	df000304 	addi	fp,sp,12
81106924:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
81106928:	e03ffe15 	stw	zero,-8(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	if (list == NULL)
8110692c:	e0bfff17 	ldw	r2,-4(fp)
81106930:	1000021e 	bne	r2,zero,8110693c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x24>
	{
		return -EINVAL;  /* this list cannot be empty */
81106934:	00bffa84 	movi	r2,-22
81106938:	00001906 	br	811069a0 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x88>
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
8110693c:	e0bfff17 	ldw	r2,-4(fp)
81106940:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
81106944:	00000a06 	br	81106970 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x58>
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
81106948:	e0bffd17 	ldw	r2,-12(fp)
8110694c:	10800717 	ldw	r2,28(r2)
81106950:	e0bffe15 	stw	r2,-8(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
81106954:	e0bffe17 	ldw	r2,-8(fp)
81106958:	10d00034 	orhi	r3,r2,16384
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
8110695c:	e0bffd17 	ldw	r2,-12(fp)
81106960:	10c00715 	stw	r3,28(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
81106964:	e0bffd17 	ldw	r2,-12(fp)
81106968:	10800317 	ldw	r2,12(r2)
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
8110696c:	e0bffd15 	stw	r2,-12(fp)
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
81106970:	e0bffd17 	ldw	r2,-12(fp)
81106974:	10c00317 	ldw	r3,12(r2)
81106978:	e0bfff17 	ldw	r2,-4(fp)
8110697c:	18bff21e 	bne	r3,r2,81106948 <__reset+0xfb0e6948>
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
81106980:	e0bffd17 	ldw	r2,-12(fp)
81106984:	10800717 	ldw	r2,28(r2)
81106988:	e0bffe15 	stw	r2,-8(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
8110698c:	e0bffe17 	ldw	r2,-8(fp)
81106990:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
81106994:	e0bffd17 	ldw	r2,-12(fp)
81106998:	10c00715 	stw	r3,28(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	
	return 0;
8110699c:	0005883a 	mov	r2,zero
}
811069a0:	e037883a 	mov	sp,fp
811069a4:	df000017 	ldw	fp,0(sp)
811069a8:	dec00104 	addi	sp,sp,4
811069ac:	f800283a 	ret

811069b0 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits (
	alt_msgdma_prefetcher_extended_descriptor *list)
{
811069b0:	defff804 	addi	sp,sp,-32
811069b4:	df000715 	stw	fp,28(sp)
811069b8:	df000704 	addi	fp,sp,28
811069bc:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
811069c0:	e03ffa15 	stw	zero,-24(fp)
	msgdma_addr64 root_node_addr, next_node_addr;
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	
	if (list == NULL)
811069c4:	e13fff17 	ldw	r4,-4(fp)
811069c8:	2000021e 	bne	r4,zero,811069d4 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x24>
	{
		return -EINVAL;  /* this list cannot be empty */
811069cc:	00bffa84 	movi	r2,-22
811069d0:	00002806 	br	81106a74 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xc4>
	}
	
	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
811069d4:	e13fff17 	ldw	r4,-4(fp)
811069d8:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;
811069dc:	e13fff17 	ldw	r4,-4(fp)
811069e0:	2005883a 	mov	r2,r4
811069e4:	0007883a 	mov	r3,zero
811069e8:	e0bffb15 	stw	r2,-20(fp)
811069ec:	e0fffc15 	stw	r3,-16(fp)

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
811069f0:	00001006 	br	81106a34 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x84>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
811069f4:	e0bff917 	ldw	r2,-28(fp)
811069f8:	10800f17 	ldw	r2,60(r2)
811069fc:	e0bffa15 	stw	r2,-24(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
81106a00:	e0bffa17 	ldw	r2,-24(fp)
81106a04:	10d00034 	orhi	r3,r2,16384
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
81106a08:	e0bff917 	ldw	r2,-28(fp)
81106a0c:	10c00f15 	stw	r3,60(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
81106a10:	e0bff917 	ldw	r2,-28(fp)
81106a14:	10800317 	ldw	r2,12(r2)
81106a18:	e0bffd15 	stw	r2,-12(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
81106a1c:	e0bff917 	ldw	r2,-28(fp)
81106a20:	10800b17 	ldw	r2,44(r2)
81106a24:	e0bffe15 	stw	r2,-8(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
81106a28:	e0bffd17 	ldw	r2,-12(fp)
81106a2c:	e0fffe17 	ldw	r3,-8(fp)
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
81106a30:	e0bff915 	stw	r2,-28(fp)
	last_descr_ptr = list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
81106a34:	e0bff917 	ldw	r2,-28(fp)
81106a38:	10c00317 	ldw	r3,12(r2)
81106a3c:	e0bffb17 	ldw	r2,-20(fp)
81106a40:	18800426 	beq	r3,r2,81106a54 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xa4>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
81106a44:	e0bff917 	ldw	r2,-28(fp)
81106a48:	10c00b17 	ldw	r3,44(r2)
81106a4c:	e0bffc17 	ldw	r2,-16(fp)
81106a50:	18bfe81e 	bne	r3,r2,811069f4 <__reset+0xfb0e69f4>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
81106a54:	e0bff917 	ldw	r2,-28(fp)
81106a58:	10800f17 	ldw	r2,60(r2)
81106a5c:	e0bffa15 	stw	r2,-24(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
81106a60:	e0bffa17 	ldw	r2,-24(fp)
81106a64:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
81106a68:	e0bff917 	ldw	r2,-28(fp)
81106a6c:	10c00f15 	stw	r3,60(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	return 0;
81106a70:	0005883a 	mov	r2,zero
}
81106a74:	e037883a 	mov	sp,fp
81106a78:	df000017 	ldw	fp,0(sp)
81106a7c:	dec00104 	addi	sp,sp,4
81106a80:	f800283a 	ret

81106a84 <alt_msgdma_start_prefetcher_with_list_addr>:
int alt_msgdma_start_prefetcher_with_list_addr (
	alt_msgdma_dev *dev,
	alt_u64  list_addr,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
81106a84:	deffef04 	addi	sp,sp,-68
81106a88:	df001015 	stw	fp,64(sp)
81106a8c:	df001004 	addi	fp,sp,64
81106a90:	e13ffb15 	stw	r4,-20(fp)
81106a94:	e17ffc15 	stw	r5,-16(fp)
81106a98:	e1bffd15 	stw	r6,-12(fp)
81106a9c:	3807883a 	mov	r3,r7
81106aa0:	e0800117 	ldw	r2,4(fp)
81106aa4:	e0fffe05 	stb	r3,-8(fp)
81106aa8:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 prefetcher_ctl = 0;
81106aac:	e03ff015 	stw	zero,-64(fp)
	alt_u32 dispatcher_ctl = 0;
81106ab0:	e03ff115 	stw	zero,-60(fp)
	alt_irq_context context = 0;
81106ab4:	e03ff215 	stw	zero,-56(fp)
	
	/* use helper struct to get easy access to hi/low address */
	msgdma_addr64 root_node_addr;
	root_node_addr.u64 = list_addr;  
81106ab8:	e0bffc17 	ldw	r2,-16(fp)
81106abc:	e0bff915 	stw	r2,-28(fp)
81106ac0:	e0bffd17 	ldw	r2,-12(fp)
81106ac4:	e0bffa15 	stw	r2,-24(fp)
	 * semaphore. This ensures that accessing registers is thread-safe.
	 */
	ALT_SEM_PEND (dev->regs_lock, 0);
	
	/* case where prefetcher already started, return busy error */ 
	prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
81106ac8:	e0bffb17 	ldw	r2,-20(fp)
81106acc:	10800617 	ldw	r2,24(r2)
81106ad0:	10800037 	ldwio	r2,0(r2)
81106ad4:	e0bff015 	stw	r2,-64(fp)
	if(ALT_MSGDMA_PREFETCHER_CTRL_RUN_GET(prefetcher_ctl)){
81106ad8:	e0bff017 	ldw	r2,-64(fp)
81106adc:	1080004c 	andi	r2,r2,1
81106ae0:	10000226 	beq	r2,zero,81106aec <alt_msgdma_start_prefetcher_with_list_addr+0x68>
		/* release the registers semaphore */
		ALT_SEM_POST (dev->regs_lock);
		return -EBUSY;
81106ae4:	00bffc04 	movi	r2,-16
81106ae8:	00009206 	br	81106d34 <alt_msgdma_start_prefetcher_with_list_addr+0x2b0>
	}
		
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	   read or write masters  */
	/* stop issuing more descriptors */
	dispatcher_ctl = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
81106aec:	00800804 	movi	r2,32
81106af0:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81106af4:	0005303a 	rdctl	r2,status
81106af8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81106afc:	e0fff517 	ldw	r3,-44(fp)
81106b00:	00bfff84 	movi	r2,-2
81106b04:	1884703a 	and	r2,r3,r2
81106b08:	1001703a 	wrctl	status,r2
  
  return context;
81106b0c:	e0bff517 	ldw	r2,-44(fp)
	
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
81106b10:	e0bff215 	stw	r2,-56(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
81106b14:	e0bffb17 	ldw	r2,-20(fp)
81106b18:	10800317 	ldw	r2,12(r2)
81106b1c:	10800104 	addi	r2,r2,4
81106b20:	e0fff117 	ldw	r3,-60(fp)
81106b24:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS( dev->csr_base, 
81106b28:	e0bffb17 	ldw	r2,-20(fp)
81106b2c:	10800317 	ldw	r2,12(r2)
81106b30:	e0fffb17 	ldw	r3,-20(fp)
81106b34:	18c00317 	ldw	r3,12(r3)
81106b38:	18c00037 	ldwio	r3,0(r3)
81106b3c:	10c00035 	stwio	r3,0(r2)
81106b40:	e0bff217 	ldw	r2,-56(fp)
81106b44:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81106b48:	e0bff317 	ldw	r2,-52(fp)
81106b4c:	1001703a 	wrctl	status,r2
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up dispatcher to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if(dev->callback)
81106b50:	e0bffb17 	ldw	r2,-20(fp)
81106b54:	10800b17 	ldw	r2,44(r2)
81106b58:	10002326 	beq	r2,zero,81106be8 <alt_msgdma_start_prefetcher_with_list_addr+0x164>
	{
		dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
81106b5c:	e0bffb17 	ldw	r2,-20(fp)
81106b60:	10c00d17 	ldw	r3,52(r2)
81106b64:	e0bff117 	ldw	r2,-60(fp)
81106b68:	1884b03a 	or	r2,r3,r2
81106b6c:	10800514 	ori	r2,r2,20
81106b70:	e0bff115 	stw	r2,-60(fp)
				| ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
		dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
81106b74:	e0fff117 	ldw	r3,-60(fp)
81106b78:	00bff7c4 	movi	r2,-33
81106b7c:	1884703a 	and	r2,r3,r2
81106b80:	e0bff115 	stw	r2,-60(fp)
		
		prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
81106b84:	e0bff017 	ldw	r2,-64(fp)
81106b88:	10800214 	ori	r2,r2,8
81106b8c:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81106b90:	0005303a 	rdctl	r2,status
81106b94:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81106b98:	e0fff717 	ldw	r3,-36(fp)
81106b9c:	00bfff84 	movi	r2,-2
81106ba0:	1884703a 	and	r2,r3,r2
81106ba4:	1001703a 	wrctl	status,r2
  
  return context;
81106ba8:	e0bff717 	ldw	r2,-36(fp)
	    /* making sure the read-modify-write below can't be pre-empted */
	    context = alt_irq_disable_all(); 
81106bac:	e0bff215 	stw	r2,-56(fp)
	    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
81106bb0:	e0bffb17 	ldw	r2,-20(fp)
81106bb4:	10800317 	ldw	r2,12(r2)
81106bb8:	10800104 	addi	r2,r2,4
81106bbc:	e0fff117 	ldw	r3,-60(fp)
81106bc0:	10c00035 	stwio	r3,0(r2)
		IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
81106bc4:	e0bffb17 	ldw	r2,-20(fp)
81106bc8:	10800617 	ldw	r2,24(r2)
81106bcc:	e0fff017 	ldw	r3,-64(fp)
81106bd0:	10c00035 	stwio	r3,0(r2)
81106bd4:	e0bff217 	ldw	r2,-56(fp)
81106bd8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81106bdc:	e0bff417 	ldw	r2,-48(fp)
81106be0:	1001703a 	wrctl	status,r2
81106be4:	00002306 	br	81106c74 <alt_msgdma_start_prefetcher_with_list_addr+0x1f0>
	  *   - Stop on an error with any particular descriptor
	  *   - Disable interrupt generation
	  */
	 else
	 {
		 dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
81106be8:	e0bffb17 	ldw	r2,-20(fp)
81106bec:	10c00d17 	ldw	r3,52(r2)
81106bf0:	e0bff117 	ldw	r2,-60(fp)
81106bf4:	1884b03a 	or	r2,r3,r2
81106bf8:	10800114 	ori	r2,r2,4
81106bfc:	e0bff115 	stw	r2,-60(fp)
		 dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
81106c00:	e0fff117 	ldw	r3,-60(fp)
81106c04:	00bff3c4 	movi	r2,-49
81106c08:	1884703a 	and	r2,r3,r2
81106c0c:	e0bff115 	stw	r2,-60(fp)
				 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
81106c10:	e0fff017 	ldw	r3,-64(fp)
81106c14:	00bffdc4 	movi	r2,-9
81106c18:	1884703a 	and	r2,r3,r2
81106c1c:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81106c20:	0005303a 	rdctl	r2,status
81106c24:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81106c28:	e0fff817 	ldw	r3,-32(fp)
81106c2c:	00bfff84 	movi	r2,-2
81106c30:	1884703a 	and	r2,r3,r2
81106c34:	1001703a 	wrctl	status,r2
  
  return context;
81106c38:	e0bff817 	ldw	r2,-32(fp)
	     /* making sure the read-modify-write below can't be pre-empted */
	     context = alt_irq_disable_all();
81106c3c:	e0bff215 	stw	r2,-56(fp)
	     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
81106c40:	e0bffb17 	ldw	r2,-20(fp)
81106c44:	10800317 	ldw	r2,12(r2)
81106c48:	10800104 	addi	r2,r2,4
81106c4c:	e0fff117 	ldw	r3,-60(fp)
81106c50:	10c00035 	stwio	r3,0(r2)
	     IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
81106c54:	e0bffb17 	ldw	r2,-20(fp)
81106c58:	10800617 	ldw	r2,24(r2)
81106c5c:	e0fff017 	ldw	r3,-64(fp)
81106c60:	10c00035 	stwio	r3,0(r2)
81106c64:	e0bff217 	ldw	r2,-56(fp)
81106c68:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81106c6c:	e0bff617 	ldw	r2,-40(fp)
81106c70:	1001703a 	wrctl	status,r2
	     alt_irq_enable_all(context);
	 }   
	
	 /* set next descriptor registers to point to the list root-node */
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_LOW(dev->prefetcher_base,
81106c74:	e0bffb17 	ldw	r2,-20(fp)
81106c78:	10800617 	ldw	r2,24(r2)
81106c7c:	10800104 	addi	r2,r2,4
81106c80:	e0fff917 	ldw	r3,-28(fp)
81106c84:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[0]);
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_HIGH(dev->prefetcher_base,
81106c88:	e0bffb17 	ldw	r2,-20(fp)
81106c8c:	10800617 	ldw	r2,24(r2)
81106c90:	10800204 	addi	r2,r2,8
81106c94:	e0fffa17 	ldw	r3,-24(fp)
81106c98:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[1]);
		
	 /* set park-mode */
	 if (park_mode_en){
81106c9c:	e0bffe03 	ldbu	r2,-8(fp)
81106ca0:	10000426 	beq	r2,zero,81106cb4 <alt_msgdma_start_prefetcher_with_list_addr+0x230>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
81106ca4:	e0bff017 	ldw	r2,-64(fp)
81106ca8:	10800414 	ori	r2,r2,16
81106cac:	e0bff015 	stw	r2,-64(fp)
81106cb0:	00000406 	br	81106cc4 <alt_msgdma_start_prefetcher_with_list_addr+0x240>
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
81106cb4:	e0fff017 	ldw	r3,-64(fp)
81106cb8:	00bffbc4 	movi	r2,-17
81106cbc:	1884703a 	and	r2,r3,r2
81106cc0:	e0bff015 	stw	r2,-64(fp)
	 }
	 
	 /* set poll-en */
	 if (poll_en){
81106cc4:	e0bfff03 	ldbu	r2,-4(fp)
81106cc8:	10000e26 	beq	r2,zero,81106d04 <alt_msgdma_start_prefetcher_with_list_addr+0x280>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
81106ccc:	e0bff017 	ldw	r2,-64(fp)
81106cd0:	10800094 	ori	r2,r2,2
81106cd4:	e0bff015 	stw	r2,-64(fp)
		 if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
81106cd8:	e0bffb17 	ldw	r2,-20(fp)
81106cdc:	10800617 	ldw	r2,24(r2)
81106ce0:	10800304 	addi	r2,r2,12
81106ce4:	10800037 	ldwio	r2,0(r2)
81106ce8:	10000a1e 	bne	r2,zero,81106d14 <alt_msgdma_start_prefetcher_with_list_addr+0x290>
				 dev->prefetcher_base) == 0){
			 /* set poll frequency to some non-zero default value */
			 IOWR_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
81106cec:	e0bffb17 	ldw	r2,-20(fp)
81106cf0:	10800617 	ldw	r2,24(r2)
81106cf4:	10800304 	addi	r2,r2,12
81106cf8:	00c03fc4 	movi	r3,255
81106cfc:	10c00035 	stwio	r3,0(r2)
81106d00:	00000406 	br	81106d14 <alt_msgdma_start_prefetcher_with_list_addr+0x290>
					 dev->prefetcher_base, 0xFF);
		 }
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_CLR_MASK; 
81106d04:	e0fff017 	ldw	r3,-64(fp)
81106d08:	00bfff44 	movi	r2,-3
81106d0c:	1884703a 	and	r2,r3,r2
81106d10:	e0bff015 	stw	r2,-64(fp)
	 }
	 
	 /* set the prefetcher run bit */
	 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_RUN_SET_MASK;
81106d14:	e0bff017 	ldw	r2,-64(fp)
81106d18:	10800054 	ori	r2,r2,1
81106d1c:	e0bff015 	stw	r2,-64(fp)
	 /* start the dma since run bit is set */
	 IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
81106d20:	e0bffb17 	ldw	r2,-20(fp)
81106d24:	10800617 	ldw	r2,24(r2)
81106d28:	e0fff017 	ldw	r3,-64(fp)
81106d2c:	10c00035 	stwio	r3,0(r2)
	  * Now that access to the registers is complete, release the registers
	  * semaphore so that other threads can access the registers.
	  */
	 ALT_SEM_POST (dev->regs_lock);
	 
	 return 0;
81106d30:	0005883a 	mov	r2,zero
}
81106d34:	e037883a 	mov	sp,fp
81106d38:	df000017 	ldw	fp,0(sp)
81106d3c:	dec00104 	addi	sp,sp,4
81106d40:	f800283a 	ret

81106d44 <alt_msgdma_start_prefetcher_with_std_desc_list>:
int alt_msgdma_start_prefetcher_with_std_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{	
81106d44:	defff704 	addi	sp,sp,-36
81106d48:	dfc00815 	stw	ra,32(sp)
81106d4c:	df000715 	stw	fp,28(sp)
81106d50:	dc400615 	stw	r17,24(sp)
81106d54:	dc000515 	stw	r16,20(sp)
81106d58:	df000704 	addi	fp,sp,28
81106d5c:	e13ffa15 	stw	r4,-24(fp)
81106d60:	e17ffb15 	stw	r5,-20(fp)
81106d64:	3007883a 	mov	r3,r6
81106d68:	3805883a 	mov	r2,r7
81106d6c:	e0fffc05 	stb	r3,-16(fp)
81106d70:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_std_list_own_by_hw_bits(list) != 0){
81106d74:	e13ffb17 	ldw	r4,-20(fp)
81106d78:	11069180 	call	81106918 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>
81106d7c:	10000226 	beq	r2,zero,81106d88 <alt_msgdma_start_prefetcher_with_std_desc_list+0x44>
		return -EINVAL;
81106d80:	00bffa84 	movi	r2,-22
81106d84:	00000b06 	br	81106db4 <alt_msgdma_start_prefetcher_with_std_desc_list+0x70>
	}
	
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list,
81106d88:	e0bffb17 	ldw	r2,-20(fp)
81106d8c:	1021883a 	mov	r16,r2
81106d90:	0023883a 	mov	r17,zero
81106d94:	e0fffc03 	ldbu	r3,-16(fp)
81106d98:	e0bffd03 	ldbu	r2,-12(fp)
81106d9c:	d8800015 	stw	r2,0(sp)
81106da0:	180f883a 	mov	r7,r3
81106da4:	800b883a 	mov	r5,r16
81106da8:	880d883a 	mov	r6,r17
81106dac:	e13ffa17 	ldw	r4,-24(fp)
81106db0:	1106a840 	call	81106a84 <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
81106db4:	e6fffe04 	addi	sp,fp,-8
81106db8:	dfc00317 	ldw	ra,12(sp)
81106dbc:	df000217 	ldw	fp,8(sp)
81106dc0:	dc400117 	ldw	r17,4(sp)
81106dc4:	dc000017 	ldw	r16,0(sp)
81106dc8:	dec00404 	addi	sp,sp,16
81106dcc:	f800283a 	ret

81106dd0 <alt_msgdma_start_prefetcher_with_extd_desc_list>:
int alt_msgdma_start_prefetcher_with_extd_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_extended_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
81106dd0:	defff704 	addi	sp,sp,-36
81106dd4:	dfc00815 	stw	ra,32(sp)
81106dd8:	df000715 	stw	fp,28(sp)
81106ddc:	dc400615 	stw	r17,24(sp)
81106de0:	dc000515 	stw	r16,20(sp)
81106de4:	df000704 	addi	fp,sp,28
81106de8:	e13ffa15 	stw	r4,-24(fp)
81106dec:	e17ffb15 	stw	r5,-20(fp)
81106df0:	3007883a 	mov	r3,r6
81106df4:	3805883a 	mov	r2,r7
81106df8:	e0fffc05 	stb	r3,-16(fp)
81106dfc:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits(list) != 0){
81106e00:	e13ffb17 	ldw	r4,-20(fp)
81106e04:	11069b00 	call	811069b0 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>
81106e08:	10000226 	beq	r2,zero,81106e14 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x44>
		return -EINVAL;
81106e0c:	00bffa84 	movi	r2,-22
81106e10:	00000b06 	br	81106e40 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x70>
	}
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list, 
81106e14:	e0bffb17 	ldw	r2,-20(fp)
81106e18:	1021883a 	mov	r16,r2
81106e1c:	0023883a 	mov	r17,zero
81106e20:	e0fffc03 	ldbu	r3,-16(fp)
81106e24:	e0bffd03 	ldbu	r2,-12(fp)
81106e28:	d8800015 	stw	r2,0(sp)
81106e2c:	180f883a 	mov	r7,r3
81106e30:	800b883a 	mov	r5,r16
81106e34:	880d883a 	mov	r6,r17
81106e38:	e13ffa17 	ldw	r4,-24(fp)
81106e3c:	1106a840 	call	81106a84 <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
81106e40:	e6fffe04 	addi	sp,fp,-8
81106e44:	dfc00317 	ldw	ra,12(sp)
81106e48:	df000217 	ldw	fp,8(sp)
81106e4c:	dc400117 	ldw	r17,4(sp)
81106e50:	dc000017 	ldw	r16,0(sp)
81106e54:	dec00404 	addi	sp,sp,16
81106e58:	f800283a 	ret

81106e5c <alt_msgdma_open>:
 * Returns:
 * - Pointer to msgdma device instance structure, or null if the device
 *   could not be opened.
 */
alt_msgdma_dev* alt_msgdma_open (const char* name)
{
81106e5c:	defffc04 	addi	sp,sp,-16
81106e60:	dfc00315 	stw	ra,12(sp)
81106e64:	df000215 	stw	fp,8(sp)
81106e68:	df000204 	addi	fp,sp,8
81106e6c:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev* dev = NULL;
81106e70:	e03ffe15 	stw	zero,-8(fp)

    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);
81106e74:	d1600d04 	addi	r5,gp,-32716
81106e78:	e13fff17 	ldw	r4,-4(fp)
81106e7c:	11075800 	call	81107580 <alt_find_dev>
81106e80:	e0bffe15 	stw	r2,-8(fp)

    if (NULL == dev)
81106e84:	e0bffe17 	ldw	r2,-8(fp)
81106e88:	1000041e 	bne	r2,zero,81106e9c <alt_msgdma_open+0x40>
    {
        ALT_ERRNO = ENODEV;
81106e8c:	11052e80 	call	811052e8 <alt_get_errno>
81106e90:	1007883a 	mov	r3,r2
81106e94:	008004c4 	movi	r2,19
81106e98:	18800015 	stw	r2,0(r3)
    }

    return dev;
81106e9c:	e0bffe17 	ldw	r2,-8(fp)
}
81106ea0:	e037883a 	mov	sp,fp
81106ea4:	dfc00117 	ldw	ra,4(sp)
81106ea8:	df000017 	ldw	fp,0(sp)
81106eac:	dec00204 	addi	sp,sp,8
81106eb0:	f800283a 	ret

81106eb4 <alt_msgdma_init>:
 * This routine disables interrupts, descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_msgdma_init (alt_msgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
81106eb4:	defff804 	addi	sp,sp,-32
81106eb8:	dfc00715 	stw	ra,28(sp)
81106ebc:	df000615 	stw	fp,24(sp)
81106ec0:	df000604 	addi	fp,sp,24
81106ec4:	e13ffd15 	stw	r4,-12(fp)
81106ec8:	e17ffe15 	stw	r5,-8(fp)
81106ecc:	e1bfff15 	stw	r6,-4(fp)
    extern alt_llist alt_msgdma_list;
    alt_u32 temporary_control;
    int error;

    if (dev->prefetcher_enable)
81106ed0:	e0bffd17 	ldw	r2,-12(fp)
81106ed4:	10801783 	ldbu	r2,94(r2)
81106ed8:	10803fcc 	andi	r2,r2,255
81106edc:	10000b26 	beq	r2,zero,81106f0c <alt_msgdma_init+0x58>
    {
    	/* start prefetcher reset sequence */
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, 
81106ee0:	e0bffd17 	ldw	r2,-12(fp)
81106ee4:	10800617 	ldw	r2,24(r2)
81106ee8:	00c00104 	movi	r3,4
81106eec:	10c00035 	stwio	r3,0(r2)
    			ALT_MSGDMA_PREFETCHER_CTRL_RESET_SET_MASK);
    	/* wait until hw clears the bit */
    	while(ALT_MSGDMA_PREFETCHER_CTRL_RESET_GET(
81106ef0:	0001883a 	nop
81106ef4:	e0bffd17 	ldw	r2,-12(fp)
81106ef8:	10800617 	ldw	r2,24(r2)
81106efc:	10800037 	ldwio	r2,0(r2)
81106f00:	1080010c 	andi	r2,r2,4
81106f04:	1005d0ba 	srai	r2,r2,2
81106f08:	103ffa1e 	bne	r2,zero,81106ef4 <__reset+0xfb0e6ef4>
    }    
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
81106f0c:	e0bffd17 	ldw	r2,-12(fp)
81106f10:	10800317 	ldw	r2,12(r2)
81106f14:	10800104 	addi	r2,r2,4
81106f18:	00c00084 	movi	r3,2
81106f1c:	10c00035 	stwio	r3,0(r2)
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
81106f20:	0001883a 	nop
81106f24:	e0bffd17 	ldw	r2,-12(fp)
81106f28:	10800317 	ldw	r2,12(r2)
81106f2c:	10800037 	ldwio	r2,0(r2)
    		& ALTERA_MSGDMA_CSR_RESET_STATE_MASK));
81106f30:	1080100c 	andi	r2,r2,64
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
81106f34:	103ffb1e 	bne	r2,zero,81106f24 <__reset+0xfb0e6f24>
    * Disable interrupts, halt descriptor processing,
    * and clear status register content
    */

    /* disable global interrupt */
    temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
81106f38:	e0bffd17 	ldw	r2,-12(fp)
81106f3c:	10800317 	ldw	r2,12(r2)
81106f40:	10800104 	addi	r2,r2,4
81106f44:	10800037 	ldwio	r2,0(r2)
81106f48:	1007883a 	mov	r3,r2
81106f4c:	00bffbc4 	movi	r2,-17
81106f50:	1884703a 	and	r2,r3,r2
81106f54:	e0bffb15 	stw	r2,-20(fp)
    		& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    /* stopping descriptor */
    temporary_control |= ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
81106f58:	e0bffb17 	ldw	r2,-20(fp)
81106f5c:	10800814 	ori	r2,r2,32
81106f60:	e0bffb15 	stw	r2,-20(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
81106f64:	e0bffd17 	ldw	r2,-12(fp)
81106f68:	10800317 	ldw	r2,12(r2)
81106f6c:	10800104 	addi	r2,r2,4
81106f70:	e0fffb17 	ldw	r3,-20(fp)
81106f74:	10c00035 	stwio	r3,0(r2)

    /* clear the CSR status register */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base, 
81106f78:	e0bffd17 	ldw	r2,-12(fp)
81106f7c:	10800317 	ldw	r2,12(r2)
81106f80:	e0fffd17 	ldw	r3,-12(fp)
81106f84:	18c00317 	ldw	r3,12(r3)
81106f88:	18c00037 	ldwio	r3,0(r3)
81106f8c:	10c00035 	stwio	r3,0(r2)
    		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    
    if (dev->prefetcher_enable)
81106f90:	e0bffd17 	ldw	r2,-12(fp)
81106f94:	10801783 	ldbu	r2,94(r2)
81106f98:	10803fcc 	andi	r2,r2,255
81106f9c:	10000826 	beq	r2,zero,81106fc0 <alt_msgdma_init+0x10c>
    {
    	/* clear all status bits that are set, since theyre W1C */
    	IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base, 
81106fa0:	e0bffd17 	ldw	r2,-12(fp)
81106fa4:	10800617 	ldw	r2,24(r2)
81106fa8:	10800404 	addi	r2,r2,16
81106fac:	e0fffd17 	ldw	r3,-12(fp)
81106fb0:	18c00617 	ldw	r3,24(r3)
81106fb4:	18c00404 	addi	r3,r3,16
81106fb8:	18c00037 	ldwio	r3,0(r3)
81106fbc:	10c00035 	stwio	r3,0(r2)
    			IORD_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base));
    }

    /* Register this instance of the msgdma controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_msgdma_list);
81106fc0:	d1600d04 	addi	r5,gp,-32716
81106fc4:	e13ffd17 	ldw	r4,-12(fp)
81106fc8:	110741c0 	call	8110741c <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
81106fcc:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
81106fd0:	e0bffc15 	stw	r2,-16(fp)
            
    if (!error)
81106fd4:	e0bffc17 	ldw	r2,-16(fp)
81106fd8:	1000081e 	bne	r2,zero,81106ffc <alt_msgdma_init+0x148>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
81106fdc:	d8000015 	stw	zero,0(sp)
81106fe0:	e1fffd17 	ldw	r7,-12(fp)
81106fe4:	01a04434 	movhi	r6,33040
81106fe8:	31953904 	addi	r6,r6,21732
81106fec:	e17fff17 	ldw	r5,-4(fp)
81106ff0:	e13ffe17 	ldw	r4,-8(fp)
81106ff4:	11076100 	call	81107610 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }
    
    return;
81106ff8:	00000406 	br	8110700c <alt_msgdma_init+0x158>
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
81106ffc:	01204474 	movhi	r4,33041
81107000:	2122de04 	addi	r4,r4,-29832
81107004:	1107c440 	call	81107c44 <alt_printf>
    }
    
    return;
81107008:	0001883a 	nop

}
8110700c:	e037883a 	mov	sp,fp
81107010:	dfc00117 	ldw	ra,4(sp)
81107014:	df000017 	ldw	fp,0(sp)
81107018:	dec00204 	addi	sp,sp,8
8110701c:	f800283a 	ret

81107020 <alt_msgdma_register_callback>:
void alt_msgdma_register_callback(
	alt_msgdma_dev *dev,
	alt_msgdma_callback callback,
	alt_u32 control,
	void *context)
{
81107020:	defffb04 	addi	sp,sp,-20
81107024:	df000415 	stw	fp,16(sp)
81107028:	df000404 	addi	fp,sp,16
8110702c:	e13ffc15 	stw	r4,-16(fp)
81107030:	e17ffd15 	stw	r5,-12(fp)
81107034:	e1bffe15 	stw	r6,-8(fp)
81107038:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
8110703c:	e0bffc17 	ldw	r2,-16(fp)
81107040:	e0fffd17 	ldw	r3,-12(fp)
81107044:	10c00b15 	stw	r3,44(r2)
    dev->callback_context = context;
81107048:	e0bffc17 	ldw	r2,-16(fp)
8110704c:	e0ffff17 	ldw	r3,-4(fp)
81107050:	10c00c15 	stw	r3,48(r2)
    dev->control          = control;
81107054:	e0bffc17 	ldw	r2,-16(fp)
81107058:	e0fffe17 	ldw	r3,-8(fp)
8110705c:	10c00d15 	stw	r3,52(r2)

    return ;
81107060:	0001883a 	nop
}
81107064:	e037883a 	mov	sp,fp
81107068:	df000017 	ldw	fp,0(sp)
8110706c:	dec00104 	addi	sp,sp,4
81107070:	f800283a 	ret

81107074 <alt_msgdma_standard_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_standard_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
81107074:	defffc04 	addi	sp,sp,-16
81107078:	dfc00315 	stw	ra,12(sp)
8110707c:	df000215 	stw	fp,8(sp)
81107080:	df000204 	addi	fp,sp,8
81107084:	e13ffe15 	stw	r4,-8(fp)
81107088:	e17fff15 	stw	r5,-4(fp)
   /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
    return alt_msgdma_descriptor_async_transfer(dev, desc, NULL);
8110708c:	000d883a 	mov	r6,zero
81107090:	e17fff17 	ldw	r5,-4(fp)
81107094:	e13ffe17 	ldw	r4,-8(fp)
81107098:	11058480 	call	81105848 <alt_msgdma_descriptor_async_transfer>

}
8110709c:	e037883a 	mov	sp,fp
811070a0:	dfc00117 	ldw	ra,4(sp)
811070a4:	df000017 	ldw	fp,0(sp)
811070a8:	dec00204 	addi	sp,sp,8
811070ac:	f800283a 	ret

811070b0 <alt_msgdma_extended_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_extended_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
811070b0:	defffc04 	addi	sp,sp,-16
811070b4:	dfc00315 	stw	ra,12(sp)
811070b8:	df000215 	stw	fp,8(sp)
811070bc:	df000204 	addi	fp,sp,8
811070c0:	e13ffe15 	stw	r4,-8(fp)
811070c4:	e17fff15 	stw	r5,-4(fp)
    /*
    * Error detection/handling should be performed at the application
    * or callback level as appropriate.
    */
    return alt_msgdma_descriptor_async_transfer(dev, NULL, desc);
811070c8:	e1bfff17 	ldw	r6,-4(fp)
811070cc:	000b883a 	mov	r5,zero
811070d0:	e13ffe17 	ldw	r4,-8(fp)
811070d4:	11058480 	call	81105848 <alt_msgdma_descriptor_async_transfer>
}
811070d8:	e037883a 	mov	sp,fp
811070dc:	dfc00117 	ldw	ra,4(sp)
811070e0:	df000017 	ldw	fp,0(sp)
811070e4:	dec00204 	addi	sp,sp,8
811070e8:	f800283a 	ret

811070ec <alt_msgdma_standard_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_standard_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
811070ec:	defffc04 	addi	sp,sp,-16
811070f0:	dfc00315 	stw	ra,12(sp)
811070f4:	df000215 	stw	fp,8(sp)
811070f8:	df000204 	addi	fp,sp,8
811070fc:	e13ffe15 	stw	r4,-8(fp)
81107100:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, desc, NULL);
81107104:	000d883a 	mov	r6,zero
81107108:	e17fff17 	ldw	r5,-4(fp)
8110710c:	e13ffe17 	ldw	r4,-8(fp)
81107110:	1105b180 	call	81105b18 <alt_msgdma_descriptor_sync_transfer>
}
81107114:	e037883a 	mov	sp,fp
81107118:	dfc00117 	ldw	ra,4(sp)
8110711c:	df000017 	ldw	fp,0(sp)
81107120:	dec00204 	addi	sp,sp,8
81107124:	f800283a 	ret

81107128 <alt_msgdma_extended_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_extended_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
81107128:	defffc04 	addi	sp,sp,-16
8110712c:	dfc00315 	stw	ra,12(sp)
81107130:	df000215 	stw	fp,8(sp)
81107134:	df000204 	addi	fp,sp,8
81107138:	e13ffe15 	stw	r4,-8(fp)
8110713c:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, NULL, desc);
81107140:	e1bfff17 	ldw	r6,-4(fp)
81107144:	000b883a 	mov	r5,zero
81107148:	e13ffe17 	ldw	r4,-8(fp)
8110714c:	1105b180 	call	81105b18 <alt_msgdma_descriptor_sync_transfer>
}
81107150:	e037883a 	mov	sp,fp
81107154:	dfc00117 	ldw	ra,4(sp)
81107158:	df000017 	ldw	fp,0(sp)
8110715c:	dec00204 	addi	sp,sp,8
81107160:	f800283a 	ret

81107164 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
81107164:	defff504 	addi	sp,sp,-44
81107168:	df000a15 	stw	fp,40(sp)
8110716c:	df000a04 	addi	fp,sp,40
81107170:	e13ffc15 	stw	r4,-16(fp)
81107174:	e17ffd15 	stw	r5,-12(fp)
81107178:	e1bffe15 	stw	r6,-8(fp)
8110717c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
81107180:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81107184:	d0a01a17 	ldw	r2,-32664(gp)
  
  if (alt_ticks_per_second ())
81107188:	10003c26 	beq	r2,zero,8110727c <alt_alarm_start+0x118>
  {
    if (alarm)
8110718c:	e0bffc17 	ldw	r2,-16(fp)
81107190:	10003826 	beq	r2,zero,81107274 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
81107194:	e0bffc17 	ldw	r2,-16(fp)
81107198:	e0fffe17 	ldw	r3,-8(fp)
8110719c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
811071a0:	e0bffc17 	ldw	r2,-16(fp)
811071a4:	e0ffff17 	ldw	r3,-4(fp)
811071a8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811071ac:	0005303a 	rdctl	r2,status
811071b0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811071b4:	e0fff917 	ldw	r3,-28(fp)
811071b8:	00bfff84 	movi	r2,-2
811071bc:	1884703a 	and	r2,r3,r2
811071c0:	1001703a 	wrctl	status,r2
  
  return context;
811071c4:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
811071c8:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
811071cc:	d0a01b17 	ldw	r2,-32660(gp)
      
      current_nticks = alt_nticks();
811071d0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
811071d4:	e0fffd17 	ldw	r3,-12(fp)
811071d8:	e0bff617 	ldw	r2,-40(fp)
811071dc:	1885883a 	add	r2,r3,r2
811071e0:	10c00044 	addi	r3,r2,1
811071e4:	e0bffc17 	ldw	r2,-16(fp)
811071e8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
811071ec:	e0bffc17 	ldw	r2,-16(fp)
811071f0:	10c00217 	ldw	r3,8(r2)
811071f4:	e0bff617 	ldw	r2,-40(fp)
811071f8:	1880042e 	bgeu	r3,r2,8110720c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
811071fc:	e0bffc17 	ldw	r2,-16(fp)
81107200:	00c00044 	movi	r3,1
81107204:	10c00405 	stb	r3,16(r2)
81107208:	00000206 	br	81107214 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
8110720c:	e0bffc17 	ldw	r2,-16(fp)
81107210:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
81107214:	e0bffc17 	ldw	r2,-16(fp)
81107218:	d0e01004 	addi	r3,gp,-32704
8110721c:	e0fffa15 	stw	r3,-24(fp)
81107220:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
81107224:	e0bffb17 	ldw	r2,-20(fp)
81107228:	e0fffa17 	ldw	r3,-24(fp)
8110722c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
81107230:	e0bffa17 	ldw	r2,-24(fp)
81107234:	10c00017 	ldw	r3,0(r2)
81107238:	e0bffb17 	ldw	r2,-20(fp)
8110723c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
81107240:	e0bffa17 	ldw	r2,-24(fp)
81107244:	10800017 	ldw	r2,0(r2)
81107248:	e0fffb17 	ldw	r3,-20(fp)
8110724c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
81107250:	e0bffa17 	ldw	r2,-24(fp)
81107254:	e0fffb17 	ldw	r3,-20(fp)
81107258:	10c00015 	stw	r3,0(r2)
8110725c:	e0bff817 	ldw	r2,-32(fp)
81107260:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81107264:	e0bff717 	ldw	r2,-36(fp)
81107268:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
8110726c:	0005883a 	mov	r2,zero
81107270:	00000306 	br	81107280 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
81107274:	00bffa84 	movi	r2,-22
81107278:	00000106 	br	81107280 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
8110727c:	00bfde84 	movi	r2,-134
  }
}
81107280:	e037883a 	mov	sp,fp
81107284:	df000017 	ldw	fp,0(sp)
81107288:	dec00104 	addi	sp,sp,4
8110728c:	f800283a 	ret

81107290 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
81107290:	defffb04 	addi	sp,sp,-20
81107294:	df000415 	stw	fp,16(sp)
81107298:	df000404 	addi	fp,sp,16
8110729c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
811072a0:	008000c4 	movi	r2,3
811072a4:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
811072a8:	e0fffd17 	ldw	r3,-12(fp)
811072ac:	008003f4 	movhi	r2,15
811072b0:	10909004 	addi	r2,r2,16960
811072b4:	1887383a 	mul	r3,r3,r2
811072b8:	00817db4 	movhi	r2,1526
811072bc:	10b84004 	addi	r2,r2,-7936
811072c0:	10c7203a 	divu	r3,r2,r3
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
811072c4:	00a00034 	movhi	r2,32768
811072c8:	10bfffc4 	addi	r2,r2,-1
811072cc:	10c5203a 	divu	r2,r2,r3
811072d0:	e0ffff17 	ldw	r3,-4(fp)
811072d4:	1885203a 	divu	r2,r3,r2
811072d8:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
811072dc:	e0bffe17 	ldw	r2,-8(fp)
811072e0:	10002526 	beq	r2,zero,81107378 <alt_busy_sleep+0xe8>
  {
    for(i=0;i<big_loops;i++)
811072e4:	e03ffc15 	stw	zero,-16(fp)
811072e8:	00001406 	br	8110733c <alt_busy_sleep+0xac>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
811072ec:	00a00034 	movhi	r2,32768
811072f0:	10bfffc4 	addi	r2,r2,-1
811072f4:	10bfffc4 	addi	r2,r2,-1
811072f8:	103ffe1e 	bne	r2,zero,811072f4 <__reset+0xfb0e72f4>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
811072fc:	e0fffd17 	ldw	r3,-12(fp)
81107300:	008003f4 	movhi	r2,15
81107304:	10909004 	addi	r2,r2,16960
81107308:	1887383a 	mul	r3,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
8110730c:	00817db4 	movhi	r2,1526
81107310:	10b84004 	addi	r2,r2,-7936
81107314:	10c7203a 	divu	r3,r2,r3
81107318:	00a00034 	movhi	r2,32768
8110731c:	10bfffc4 	addi	r2,r2,-1
81107320:	10c5203a 	divu	r2,r2,r3
81107324:	e0ffff17 	ldw	r3,-4(fp)
81107328:	1885c83a 	sub	r2,r3,r2
8110732c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
81107330:	e0bffc17 	ldw	r2,-16(fp)
81107334:	10800044 	addi	r2,r2,1
81107338:	e0bffc15 	stw	r2,-16(fp)
8110733c:	e0fffc17 	ldw	r3,-16(fp)
81107340:	e0bffe17 	ldw	r2,-8(fp)
81107344:	18bfe916 	blt	r3,r2,811072ec <__reset+0xfb0e72ec>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
81107348:	e0fffd17 	ldw	r3,-12(fp)
8110734c:	008003f4 	movhi	r2,15
81107350:	10909004 	addi	r2,r2,16960
81107354:	1887383a 	mul	r3,r3,r2
81107358:	00817db4 	movhi	r2,1526
8110735c:	10b84004 	addi	r2,r2,-7936
81107360:	10c7203a 	divu	r3,r2,r3
81107364:	e0bfff17 	ldw	r2,-4(fp)
81107368:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
8110736c:	10bfffc4 	addi	r2,r2,-1
81107370:	103ffe1e 	bne	r2,zero,8110736c <__reset+0xfb0e736c>
81107374:	00000b06 	br	811073a4 <alt_busy_sleep+0x114>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
81107378:	e0fffd17 	ldw	r3,-12(fp)
8110737c:	008003f4 	movhi	r2,15
81107380:	10909004 	addi	r2,r2,16960
81107384:	1887383a 	mul	r3,r3,r2
81107388:	00817db4 	movhi	r2,1526
8110738c:	10b84004 	addi	r2,r2,-7936
81107390:	10c7203a 	divu	r3,r2,r3
81107394:	e0bfff17 	ldw	r2,-4(fp)
81107398:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
8110739c:	10bfffc4 	addi	r2,r2,-1
811073a0:	00bffe16 	blt	zero,r2,8110739c <__reset+0xfb0e739c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
811073a4:	0005883a 	mov	r2,zero
}
811073a8:	e037883a 	mov	sp,fp
811073ac:	df000017 	ldw	fp,0(sp)
811073b0:	dec00104 	addi	sp,sp,4
811073b4:	f800283a 	ret

811073b8 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
811073b8:	defffd04 	addi	sp,sp,-12
811073bc:	df000215 	stw	fp,8(sp)
811073c0:	df000204 	addi	fp,sp,8
811073c4:	e13ffe15 	stw	r4,-8(fp)
811073c8:	e17fff15 	stw	r5,-4(fp)
  {
    ALT_FLUSH_DATA(i);
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
811073cc:	0001883a 	nop
811073d0:	e037883a 	mov	sp,fp
811073d4:	df000017 	ldw	fp,0(sp)
811073d8:	dec00104 	addi	sp,sp,4
811073dc:	f800283a 	ret

811073e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
811073e0:	defffe04 	addi	sp,sp,-8
811073e4:	dfc00115 	stw	ra,4(sp)
811073e8:	df000015 	stw	fp,0(sp)
811073ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
811073f0:	d0a00917 	ldw	r2,-32732(gp)
811073f4:	10000326 	beq	r2,zero,81107404 <alt_get_errno+0x24>
811073f8:	d0a00917 	ldw	r2,-32732(gp)
811073fc:	103ee83a 	callr	r2
81107400:	00000106 	br	81107408 <alt_get_errno+0x28>
81107404:	d0a01504 	addi	r2,gp,-32684
}
81107408:	e037883a 	mov	sp,fp
8110740c:	dfc00117 	ldw	ra,4(sp)
81107410:	df000017 	ldw	fp,0(sp)
81107414:	dec00204 	addi	sp,sp,8
81107418:	f800283a 	ret

8110741c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
8110741c:	defffa04 	addi	sp,sp,-24
81107420:	dfc00515 	stw	ra,20(sp)
81107424:	df000415 	stw	fp,16(sp)
81107428:	df000404 	addi	fp,sp,16
8110742c:	e13ffe15 	stw	r4,-8(fp)
81107430:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
81107434:	e0bffe17 	ldw	r2,-8(fp)
81107438:	10000326 	beq	r2,zero,81107448 <alt_dev_llist_insert+0x2c>
8110743c:	e0bffe17 	ldw	r2,-8(fp)
81107440:	10800217 	ldw	r2,8(r2)
81107444:	1000061e 	bne	r2,zero,81107460 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
81107448:	11073e00 	call	811073e0 <alt_get_errno>
8110744c:	1007883a 	mov	r3,r2
81107450:	00800584 	movi	r2,22
81107454:	18800015 	stw	r2,0(r3)
    return -EINVAL;
81107458:	00bffa84 	movi	r2,-22
8110745c:	00001306 	br	811074ac <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
81107460:	e0bffe17 	ldw	r2,-8(fp)
81107464:	e0ffff17 	ldw	r3,-4(fp)
81107468:	e0fffc15 	stw	r3,-16(fp)
8110746c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
81107470:	e0bffd17 	ldw	r2,-12(fp)
81107474:	e0fffc17 	ldw	r3,-16(fp)
81107478:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
8110747c:	e0bffc17 	ldw	r2,-16(fp)
81107480:	10c00017 	ldw	r3,0(r2)
81107484:	e0bffd17 	ldw	r2,-12(fp)
81107488:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
8110748c:	e0bffc17 	ldw	r2,-16(fp)
81107490:	10800017 	ldw	r2,0(r2)
81107494:	e0fffd17 	ldw	r3,-12(fp)
81107498:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
8110749c:	e0bffc17 	ldw	r2,-16(fp)
811074a0:	e0fffd17 	ldw	r3,-12(fp)
811074a4:	10c00015 	stw	r3,0(r2)

  return 0;  
811074a8:	0005883a 	mov	r2,zero
}
811074ac:	e037883a 	mov	sp,fp
811074b0:	dfc00117 	ldw	ra,4(sp)
811074b4:	df000017 	ldw	fp,0(sp)
811074b8:	dec00204 	addi	sp,sp,8
811074bc:	f800283a 	ret

811074c0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
811074c0:	defffd04 	addi	sp,sp,-12
811074c4:	dfc00215 	stw	ra,8(sp)
811074c8:	df000115 	stw	fp,4(sp)
811074cc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
811074d0:	00a04474 	movhi	r2,33041
811074d4:	10a24304 	addi	r2,r2,-30452
811074d8:	e0bfff15 	stw	r2,-4(fp)
811074dc:	00000606 	br	811074f8 <_do_ctors+0x38>
        (*ctor) (); 
811074e0:	e0bfff17 	ldw	r2,-4(fp)
811074e4:	10800017 	ldw	r2,0(r2)
811074e8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
811074ec:	e0bfff17 	ldw	r2,-4(fp)
811074f0:	10bfff04 	addi	r2,r2,-4
811074f4:	e0bfff15 	stw	r2,-4(fp)
811074f8:	e0ffff17 	ldw	r3,-4(fp)
811074fc:	00a04474 	movhi	r2,33041
81107500:	10a24404 	addi	r2,r2,-30448
81107504:	18bff62e 	bgeu	r3,r2,811074e0 <__reset+0xfb0e74e0>
        (*ctor) (); 
}
81107508:	0001883a 	nop
8110750c:	e037883a 	mov	sp,fp
81107510:	dfc00117 	ldw	ra,4(sp)
81107514:	df000017 	ldw	fp,0(sp)
81107518:	dec00204 	addi	sp,sp,8
8110751c:	f800283a 	ret

81107520 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
81107520:	defffd04 	addi	sp,sp,-12
81107524:	dfc00215 	stw	ra,8(sp)
81107528:	df000115 	stw	fp,4(sp)
8110752c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
81107530:	00a04474 	movhi	r2,33041
81107534:	10a24304 	addi	r2,r2,-30452
81107538:	e0bfff15 	stw	r2,-4(fp)
8110753c:	00000606 	br	81107558 <_do_dtors+0x38>
        (*dtor) (); 
81107540:	e0bfff17 	ldw	r2,-4(fp)
81107544:	10800017 	ldw	r2,0(r2)
81107548:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
8110754c:	e0bfff17 	ldw	r2,-4(fp)
81107550:	10bfff04 	addi	r2,r2,-4
81107554:	e0bfff15 	stw	r2,-4(fp)
81107558:	e0ffff17 	ldw	r3,-4(fp)
8110755c:	00a04474 	movhi	r2,33041
81107560:	10a24404 	addi	r2,r2,-30448
81107564:	18bff62e 	bgeu	r3,r2,81107540 <__reset+0xfb0e7540>
        (*dtor) (); 
}
81107568:	0001883a 	nop
8110756c:	e037883a 	mov	sp,fp
81107570:	dfc00117 	ldw	ra,4(sp)
81107574:	df000017 	ldw	fp,0(sp)
81107578:	dec00204 	addi	sp,sp,8
8110757c:	f800283a 	ret

81107580 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
81107580:	defffa04 	addi	sp,sp,-24
81107584:	dfc00515 	stw	ra,20(sp)
81107588:	df000415 	stw	fp,16(sp)
8110758c:	df000404 	addi	fp,sp,16
81107590:	e13ffe15 	stw	r4,-8(fp)
81107594:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
81107598:	e0bfff17 	ldw	r2,-4(fp)
8110759c:	10800017 	ldw	r2,0(r2)
811075a0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
811075a4:	e13ffe17 	ldw	r4,-8(fp)
811075a8:	11003840 	call	81100384 <strlen>
811075ac:	10800044 	addi	r2,r2,1
811075b0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
811075b4:	00000d06 	br	811075ec <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
811075b8:	e0bffc17 	ldw	r2,-16(fp)
811075bc:	10800217 	ldw	r2,8(r2)
811075c0:	e0fffd17 	ldw	r3,-12(fp)
811075c4:	180d883a 	mov	r6,r3
811075c8:	e17ffe17 	ldw	r5,-8(fp)
811075cc:	1009883a 	mov	r4,r2
811075d0:	11083080 	call	81108308 <memcmp>
811075d4:	1000021e 	bne	r2,zero,811075e0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
811075d8:	e0bffc17 	ldw	r2,-16(fp)
811075dc:	00000706 	br	811075fc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
811075e0:	e0bffc17 	ldw	r2,-16(fp)
811075e4:	10800017 	ldw	r2,0(r2)
811075e8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
811075ec:	e0fffc17 	ldw	r3,-16(fp)
811075f0:	e0bfff17 	ldw	r2,-4(fp)
811075f4:	18bff01e 	bne	r3,r2,811075b8 <__reset+0xfb0e75b8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
811075f8:	0005883a 	mov	r2,zero
}
811075fc:	e037883a 	mov	sp,fp
81107600:	dfc00117 	ldw	ra,4(sp)
81107604:	df000017 	ldw	fp,0(sp)
81107608:	dec00204 	addi	sp,sp,8
8110760c:	f800283a 	ret

81107610 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
81107610:	defff904 	addi	sp,sp,-28
81107614:	dfc00615 	stw	ra,24(sp)
81107618:	df000515 	stw	fp,20(sp)
8110761c:	df000504 	addi	fp,sp,20
81107620:	e13ffc15 	stw	r4,-16(fp)
81107624:	e17ffd15 	stw	r5,-12(fp)
81107628:	e1bffe15 	stw	r6,-8(fp)
8110762c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
81107630:	e0800217 	ldw	r2,8(fp)
81107634:	d8800015 	stw	r2,0(sp)
81107638:	e1ffff17 	ldw	r7,-4(fp)
8110763c:	e1bffe17 	ldw	r6,-8(fp)
81107640:	e17ffd17 	ldw	r5,-12(fp)
81107644:	e13ffc17 	ldw	r4,-16(fp)
81107648:	11077c00 	call	811077c0 <alt_iic_isr_register>
}  
8110764c:	e037883a 	mov	sp,fp
81107650:	dfc00117 	ldw	ra,4(sp)
81107654:	df000017 	ldw	fp,0(sp)
81107658:	dec00204 	addi	sp,sp,8
8110765c:	f800283a 	ret

81107660 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
81107660:	defff904 	addi	sp,sp,-28
81107664:	df000615 	stw	fp,24(sp)
81107668:	df000604 	addi	fp,sp,24
8110766c:	e13ffe15 	stw	r4,-8(fp)
81107670:	e17fff15 	stw	r5,-4(fp)
81107674:	e0bfff17 	ldw	r2,-4(fp)
81107678:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8110767c:	0005303a 	rdctl	r2,status
81107680:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81107684:	e0fffb17 	ldw	r3,-20(fp)
81107688:	00bfff84 	movi	r2,-2
8110768c:	1884703a 	and	r2,r3,r2
81107690:	1001703a 	wrctl	status,r2
  
  return context;
81107694:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
81107698:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
8110769c:	00c00044 	movi	r3,1
811076a0:	e0bffa17 	ldw	r2,-24(fp)
811076a4:	1884983a 	sll	r2,r3,r2
811076a8:	1007883a 	mov	r3,r2
811076ac:	d0a01917 	ldw	r2,-32668(gp)
811076b0:	1884b03a 	or	r2,r3,r2
811076b4:	d0a01915 	stw	r2,-32668(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
811076b8:	d0a01917 	ldw	r2,-32668(gp)
811076bc:	100170fa 	wrctl	ienable,r2
811076c0:	e0bffc17 	ldw	r2,-16(fp)
811076c4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811076c8:	e0bffd17 	ldw	r2,-12(fp)
811076cc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
811076d0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
811076d4:	0001883a 	nop
}
811076d8:	e037883a 	mov	sp,fp
811076dc:	df000017 	ldw	fp,0(sp)
811076e0:	dec00104 	addi	sp,sp,4
811076e4:	f800283a 	ret

811076e8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
811076e8:	defff904 	addi	sp,sp,-28
811076ec:	df000615 	stw	fp,24(sp)
811076f0:	df000604 	addi	fp,sp,24
811076f4:	e13ffe15 	stw	r4,-8(fp)
811076f8:	e17fff15 	stw	r5,-4(fp)
811076fc:	e0bfff17 	ldw	r2,-4(fp)
81107700:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81107704:	0005303a 	rdctl	r2,status
81107708:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8110770c:	e0fffb17 	ldw	r3,-20(fp)
81107710:	00bfff84 	movi	r2,-2
81107714:	1884703a 	and	r2,r3,r2
81107718:	1001703a 	wrctl	status,r2
  
  return context;
8110771c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
81107720:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
81107724:	00c00044 	movi	r3,1
81107728:	e0bffa17 	ldw	r2,-24(fp)
8110772c:	1884983a 	sll	r2,r3,r2
81107730:	0084303a 	nor	r2,zero,r2
81107734:	1007883a 	mov	r3,r2
81107738:	d0a01917 	ldw	r2,-32668(gp)
8110773c:	1884703a 	and	r2,r3,r2
81107740:	d0a01915 	stw	r2,-32668(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
81107744:	d0a01917 	ldw	r2,-32668(gp)
81107748:	100170fa 	wrctl	ienable,r2
8110774c:	e0bffc17 	ldw	r2,-16(fp)
81107750:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81107754:	e0bffd17 	ldw	r2,-12(fp)
81107758:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
8110775c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
81107760:	0001883a 	nop
}
81107764:	e037883a 	mov	sp,fp
81107768:	df000017 	ldw	fp,0(sp)
8110776c:	dec00104 	addi	sp,sp,4
81107770:	f800283a 	ret

81107774 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
81107774:	defffc04 	addi	sp,sp,-16
81107778:	df000315 	stw	fp,12(sp)
8110777c:	df000304 	addi	fp,sp,12
81107780:	e13ffe15 	stw	r4,-8(fp)
81107784:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
81107788:	000530fa 	rdctl	r2,ienable
8110778c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
81107790:	00c00044 	movi	r3,1
81107794:	e0bfff17 	ldw	r2,-4(fp)
81107798:	1884983a 	sll	r2,r3,r2
8110779c:	1007883a 	mov	r3,r2
811077a0:	e0bffd17 	ldw	r2,-12(fp)
811077a4:	1884703a 	and	r2,r3,r2
811077a8:	1004c03a 	cmpne	r2,r2,zero
811077ac:	10803fcc 	andi	r2,r2,255
}
811077b0:	e037883a 	mov	sp,fp
811077b4:	df000017 	ldw	fp,0(sp)
811077b8:	dec00104 	addi	sp,sp,4
811077bc:	f800283a 	ret

811077c0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
811077c0:	defff504 	addi	sp,sp,-44
811077c4:	dfc00a15 	stw	ra,40(sp)
811077c8:	df000915 	stw	fp,36(sp)
811077cc:	df000904 	addi	fp,sp,36
811077d0:	e13ffc15 	stw	r4,-16(fp)
811077d4:	e17ffd15 	stw	r5,-12(fp)
811077d8:	e1bffe15 	stw	r6,-8(fp)
811077dc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
811077e0:	00bffa84 	movi	r2,-22
811077e4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
811077e8:	e0bffd17 	ldw	r2,-12(fp)
811077ec:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
811077f0:	e0bff817 	ldw	r2,-32(fp)
811077f4:	10800808 	cmpgei	r2,r2,32
811077f8:	1000271e 	bne	r2,zero,81107898 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811077fc:	0005303a 	rdctl	r2,status
81107800:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81107804:	e0fffb17 	ldw	r3,-20(fp)
81107808:	00bfff84 	movi	r2,-2
8110780c:	1884703a 	and	r2,r3,r2
81107810:	1001703a 	wrctl	status,r2
  
  return context;
81107814:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
81107818:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
8110781c:	00a04474 	movhi	r2,33041
81107820:	10a9ca04 	addi	r2,r2,-22744
81107824:	e0fff817 	ldw	r3,-32(fp)
81107828:	180690fa 	slli	r3,r3,3
8110782c:	10c5883a 	add	r2,r2,r3
81107830:	e0fffe17 	ldw	r3,-8(fp)
81107834:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
81107838:	00a04474 	movhi	r2,33041
8110783c:	10a9ca04 	addi	r2,r2,-22744
81107840:	e0fff817 	ldw	r3,-32(fp)
81107844:	180690fa 	slli	r3,r3,3
81107848:	10c5883a 	add	r2,r2,r3
8110784c:	10800104 	addi	r2,r2,4
81107850:	e0ffff17 	ldw	r3,-4(fp)
81107854:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
81107858:	e0bffe17 	ldw	r2,-8(fp)
8110785c:	10000526 	beq	r2,zero,81107874 <alt_iic_isr_register+0xb4>
81107860:	e0bff817 	ldw	r2,-32(fp)
81107864:	100b883a 	mov	r5,r2
81107868:	e13ffc17 	ldw	r4,-16(fp)
8110786c:	11076600 	call	81107660 <alt_ic_irq_enable>
81107870:	00000406 	br	81107884 <alt_iic_isr_register+0xc4>
81107874:	e0bff817 	ldw	r2,-32(fp)
81107878:	100b883a 	mov	r5,r2
8110787c:	e13ffc17 	ldw	r4,-16(fp)
81107880:	11076e80 	call	811076e8 <alt_ic_irq_disable>
81107884:	e0bff715 	stw	r2,-36(fp)
81107888:	e0bffa17 	ldw	r2,-24(fp)
8110788c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81107890:	e0bff917 	ldw	r2,-28(fp)
81107894:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
81107898:	e0bff717 	ldw	r2,-36(fp)
}
8110789c:	e037883a 	mov	sp,fp
811078a0:	dfc00117 	ldw	ra,4(sp)
811078a4:	df000017 	ldw	fp,0(sp)
811078a8:	dec00204 	addi	sp,sp,8
811078ac:	f800283a 	ret

811078b0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
811078b0:	defff904 	addi	sp,sp,-28
811078b4:	dfc00615 	stw	ra,24(sp)
811078b8:	df000515 	stw	fp,20(sp)
811078bc:	df000504 	addi	fp,sp,20
811078c0:	e13ffc15 	stw	r4,-16(fp)
811078c4:	e17ffd15 	stw	r5,-12(fp)
811078c8:	e1bffe15 	stw	r6,-8(fp)
811078cc:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
811078d0:	e1bfff17 	ldw	r6,-4(fp)
811078d4:	e17ffe17 	ldw	r5,-8(fp)
811078d8:	e13ffd17 	ldw	r4,-12(fp)
811078dc:	1107af00 	call	81107af0 <open>
811078e0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
811078e4:	e0bffb17 	ldw	r2,-20(fp)
811078e8:	10001c16 	blt	r2,zero,8110795c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
811078ec:	00a04474 	movhi	r2,33041
811078f0:	10a4fb04 	addi	r2,r2,-27668
811078f4:	e0fffb17 	ldw	r3,-20(fp)
811078f8:	18c00324 	muli	r3,r3,12
811078fc:	10c5883a 	add	r2,r2,r3
81107900:	10c00017 	ldw	r3,0(r2)
81107904:	e0bffc17 	ldw	r2,-16(fp)
81107908:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
8110790c:	00a04474 	movhi	r2,33041
81107910:	10a4fb04 	addi	r2,r2,-27668
81107914:	e0fffb17 	ldw	r3,-20(fp)
81107918:	18c00324 	muli	r3,r3,12
8110791c:	10c5883a 	add	r2,r2,r3
81107920:	10800104 	addi	r2,r2,4
81107924:	10c00017 	ldw	r3,0(r2)
81107928:	e0bffc17 	ldw	r2,-16(fp)
8110792c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
81107930:	00a04474 	movhi	r2,33041
81107934:	10a4fb04 	addi	r2,r2,-27668
81107938:	e0fffb17 	ldw	r3,-20(fp)
8110793c:	18c00324 	muli	r3,r3,12
81107940:	10c5883a 	add	r2,r2,r3
81107944:	10800204 	addi	r2,r2,8
81107948:	10c00017 	ldw	r3,0(r2)
8110794c:	e0bffc17 	ldw	r2,-16(fp)
81107950:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
81107954:	e13ffb17 	ldw	r4,-20(fp)
81107958:	11036880 	call	81103688 <alt_release_fd>
  }
} 
8110795c:	0001883a 	nop
81107960:	e037883a 	mov	sp,fp
81107964:	dfc00117 	ldw	ra,4(sp)
81107968:	df000017 	ldw	fp,0(sp)
8110796c:	dec00204 	addi	sp,sp,8
81107970:	f800283a 	ret

81107974 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
81107974:	defffb04 	addi	sp,sp,-20
81107978:	dfc00415 	stw	ra,16(sp)
8110797c:	df000315 	stw	fp,12(sp)
81107980:	df000304 	addi	fp,sp,12
81107984:	e13ffd15 	stw	r4,-12(fp)
81107988:	e17ffe15 	stw	r5,-8(fp)
8110798c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
81107990:	01c07fc4 	movi	r7,511
81107994:	01800044 	movi	r6,1
81107998:	e17ffd17 	ldw	r5,-12(fp)
8110799c:	01204474 	movhi	r4,33041
811079a0:	2124fe04 	addi	r4,r4,-27656
811079a4:	11078b00 	call	811078b0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
811079a8:	01c07fc4 	movi	r7,511
811079ac:	000d883a 	mov	r6,zero
811079b0:	e17ffe17 	ldw	r5,-8(fp)
811079b4:	01204474 	movhi	r4,33041
811079b8:	2124fb04 	addi	r4,r4,-27668
811079bc:	11078b00 	call	811078b0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
811079c0:	01c07fc4 	movi	r7,511
811079c4:	01800044 	movi	r6,1
811079c8:	e17fff17 	ldw	r5,-4(fp)
811079cc:	01204474 	movhi	r4,33041
811079d0:	21250104 	addi	r4,r4,-27644
811079d4:	11078b00 	call	811078b0 <alt_open_fd>
}  
811079d8:	0001883a 	nop
811079dc:	e037883a 	mov	sp,fp
811079e0:	dfc00117 	ldw	ra,4(sp)
811079e4:	df000017 	ldw	fp,0(sp)
811079e8:	dec00204 	addi	sp,sp,8
811079ec:	f800283a 	ret

811079f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
811079f0:	defffe04 	addi	sp,sp,-8
811079f4:	dfc00115 	stw	ra,4(sp)
811079f8:	df000015 	stw	fp,0(sp)
811079fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81107a00:	d0a00917 	ldw	r2,-32732(gp)
81107a04:	10000326 	beq	r2,zero,81107a14 <alt_get_errno+0x24>
81107a08:	d0a00917 	ldw	r2,-32732(gp)
81107a0c:	103ee83a 	callr	r2
81107a10:	00000106 	br	81107a18 <alt_get_errno+0x28>
81107a14:	d0a01504 	addi	r2,gp,-32684
}
81107a18:	e037883a 	mov	sp,fp
81107a1c:	dfc00117 	ldw	ra,4(sp)
81107a20:	df000017 	ldw	fp,0(sp)
81107a24:	dec00204 	addi	sp,sp,8
81107a28:	f800283a 	ret

81107a2c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
81107a2c:	defffd04 	addi	sp,sp,-12
81107a30:	df000215 	stw	fp,8(sp)
81107a34:	df000204 	addi	fp,sp,8
81107a38:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
81107a3c:	e0bfff17 	ldw	r2,-4(fp)
81107a40:	10800217 	ldw	r2,8(r2)
81107a44:	10d00034 	orhi	r3,r2,16384
81107a48:	e0bfff17 	ldw	r2,-4(fp)
81107a4c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
81107a50:	e03ffe15 	stw	zero,-8(fp)
81107a54:	00001d06 	br	81107acc <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
81107a58:	00a04474 	movhi	r2,33041
81107a5c:	10a4fb04 	addi	r2,r2,-27668
81107a60:	e0fffe17 	ldw	r3,-8(fp)
81107a64:	18c00324 	muli	r3,r3,12
81107a68:	10c5883a 	add	r2,r2,r3
81107a6c:	10c00017 	ldw	r3,0(r2)
81107a70:	e0bfff17 	ldw	r2,-4(fp)
81107a74:	10800017 	ldw	r2,0(r2)
81107a78:	1880111e 	bne	r3,r2,81107ac0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
81107a7c:	00a04474 	movhi	r2,33041
81107a80:	10a4fb04 	addi	r2,r2,-27668
81107a84:	e0fffe17 	ldw	r3,-8(fp)
81107a88:	18c00324 	muli	r3,r3,12
81107a8c:	10c5883a 	add	r2,r2,r3
81107a90:	10800204 	addi	r2,r2,8
81107a94:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
81107a98:	1000090e 	bge	r2,zero,81107ac0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
81107a9c:	e0bffe17 	ldw	r2,-8(fp)
81107aa0:	10c00324 	muli	r3,r2,12
81107aa4:	00a04474 	movhi	r2,33041
81107aa8:	10a4fb04 	addi	r2,r2,-27668
81107aac:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
81107ab0:	e0bfff17 	ldw	r2,-4(fp)
81107ab4:	18800226 	beq	r3,r2,81107ac0 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
81107ab8:	00bffcc4 	movi	r2,-13
81107abc:	00000806 	br	81107ae0 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
81107ac0:	e0bffe17 	ldw	r2,-8(fp)
81107ac4:	10800044 	addi	r2,r2,1
81107ac8:	e0bffe15 	stw	r2,-8(fp)
81107acc:	d0a00817 	ldw	r2,-32736(gp)
81107ad0:	1007883a 	mov	r3,r2
81107ad4:	e0bffe17 	ldw	r2,-8(fp)
81107ad8:	18bfdf2e 	bgeu	r3,r2,81107a58 <__reset+0xfb0e7a58>
    }
  }
  
  /* The device is not locked */
 
  return 0;
81107adc:	0005883a 	mov	r2,zero
}
81107ae0:	e037883a 	mov	sp,fp
81107ae4:	df000017 	ldw	fp,0(sp)
81107ae8:	dec00104 	addi	sp,sp,4
81107aec:	f800283a 	ret

81107af0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
81107af0:	defff604 	addi	sp,sp,-40
81107af4:	dfc00915 	stw	ra,36(sp)
81107af8:	df000815 	stw	fp,32(sp)
81107afc:	df000804 	addi	fp,sp,32
81107b00:	e13ffd15 	stw	r4,-12(fp)
81107b04:	e17ffe15 	stw	r5,-8(fp)
81107b08:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
81107b0c:	00bfffc4 	movi	r2,-1
81107b10:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
81107b14:	00bffb44 	movi	r2,-19
81107b18:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
81107b1c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
81107b20:	d1600604 	addi	r5,gp,-32744
81107b24:	e13ffd17 	ldw	r4,-12(fp)
81107b28:	11075800 	call	81107580 <alt_find_dev>
81107b2c:	e0bff815 	stw	r2,-32(fp)
81107b30:	e0bff817 	ldw	r2,-32(fp)
81107b34:	1000051e 	bne	r2,zero,81107b4c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
81107b38:	e13ffd17 	ldw	r4,-12(fp)
81107b3c:	11080740 	call	81108074 <alt_find_file>
81107b40:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
81107b44:	00800044 	movi	r2,1
81107b48:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
81107b4c:	e0bff817 	ldw	r2,-32(fp)
81107b50:	10002926 	beq	r2,zero,81107bf8 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
81107b54:	e13ff817 	ldw	r4,-32(fp)
81107b58:	110817c0 	call	8110817c <alt_get_fd>
81107b5c:	e0bff915 	stw	r2,-28(fp)
81107b60:	e0bff917 	ldw	r2,-28(fp)
81107b64:	1000030e 	bge	r2,zero,81107b74 <open+0x84>
    {
      status = index;
81107b68:	e0bff917 	ldw	r2,-28(fp)
81107b6c:	e0bffa15 	stw	r2,-24(fp)
81107b70:	00002306 	br	81107c00 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
81107b74:	e0bff917 	ldw	r2,-28(fp)
81107b78:	10c00324 	muli	r3,r2,12
81107b7c:	00a04474 	movhi	r2,33041
81107b80:	10a4fb04 	addi	r2,r2,-27668
81107b84:	1885883a 	add	r2,r3,r2
81107b88:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
81107b8c:	e0fffe17 	ldw	r3,-8(fp)
81107b90:	00900034 	movhi	r2,16384
81107b94:	10bfffc4 	addi	r2,r2,-1
81107b98:	1886703a 	and	r3,r3,r2
81107b9c:	e0bffc17 	ldw	r2,-16(fp)
81107ba0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
81107ba4:	e0bffb17 	ldw	r2,-20(fp)
81107ba8:	1000051e 	bne	r2,zero,81107bc0 <open+0xd0>
81107bac:	e13ffc17 	ldw	r4,-16(fp)
81107bb0:	1107a2c0 	call	81107a2c <alt_file_locked>
81107bb4:	e0bffa15 	stw	r2,-24(fp)
81107bb8:	e0bffa17 	ldw	r2,-24(fp)
81107bbc:	10001016 	blt	r2,zero,81107c00 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
81107bc0:	e0bff817 	ldw	r2,-32(fp)
81107bc4:	10800317 	ldw	r2,12(r2)
81107bc8:	10000826 	beq	r2,zero,81107bec <open+0xfc>
81107bcc:	e0bff817 	ldw	r2,-32(fp)
81107bd0:	10800317 	ldw	r2,12(r2)
81107bd4:	e1ffff17 	ldw	r7,-4(fp)
81107bd8:	e1bffe17 	ldw	r6,-8(fp)
81107bdc:	e17ffd17 	ldw	r5,-12(fp)
81107be0:	e13ffc17 	ldw	r4,-16(fp)
81107be4:	103ee83a 	callr	r2
81107be8:	00000106 	br	81107bf0 <open+0x100>
81107bec:	0005883a 	mov	r2,zero
81107bf0:	e0bffa15 	stw	r2,-24(fp)
81107bf4:	00000206 	br	81107c00 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
81107bf8:	00bffb44 	movi	r2,-19
81107bfc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
81107c00:	e0bffa17 	ldw	r2,-24(fp)
81107c04:	1000090e 	bge	r2,zero,81107c2c <open+0x13c>
  {
    alt_release_fd (index);  
81107c08:	e13ff917 	ldw	r4,-28(fp)
81107c0c:	11036880 	call	81103688 <alt_release_fd>
    ALT_ERRNO = -status;
81107c10:	11079f00 	call	811079f0 <alt_get_errno>
81107c14:	1007883a 	mov	r3,r2
81107c18:	e0bffa17 	ldw	r2,-24(fp)
81107c1c:	0085c83a 	sub	r2,zero,r2
81107c20:	18800015 	stw	r2,0(r3)
    return -1;
81107c24:	00bfffc4 	movi	r2,-1
81107c28:	00000106 	br	81107c30 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
81107c2c:	e0bff917 	ldw	r2,-28(fp)
}
81107c30:	e037883a 	mov	sp,fp
81107c34:	dfc00117 	ldw	ra,4(sp)
81107c38:	df000017 	ldw	fp,0(sp)
81107c3c:	dec00204 	addi	sp,sp,8
81107c40:	f800283a 	ret

81107c44 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
81107c44:	defff204 	addi	sp,sp,-56
81107c48:	dfc00a15 	stw	ra,40(sp)
81107c4c:	df000915 	stw	fp,36(sp)
81107c50:	df000904 	addi	fp,sp,36
81107c54:	e13fff15 	stw	r4,-4(fp)
81107c58:	e1400215 	stw	r5,8(fp)
81107c5c:	e1800315 	stw	r6,12(fp)
81107c60:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
81107c64:	e0800204 	addi	r2,fp,8
81107c68:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
81107c6c:	e0bfff17 	ldw	r2,-4(fp)
81107c70:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
81107c74:	00006f06 	br	81107e34 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
81107c78:	e0bff807 	ldb	r2,-32(fp)
81107c7c:	10800960 	cmpeqi	r2,r2,37
81107c80:	1000041e 	bne	r2,zero,81107c94 <alt_printf+0x50>
        {
            alt_putchar(c);
81107c84:	e0bff807 	ldb	r2,-32(fp)
81107c88:	1009883a 	mov	r4,r2
81107c8c:	1107e700 	call	81107e70 <alt_putchar>
81107c90:	00006806 	br	81107e34 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
81107c94:	e0bff717 	ldw	r2,-36(fp)
81107c98:	10c00044 	addi	r3,r2,1
81107c9c:	e0fff715 	stw	r3,-36(fp)
81107ca0:	10800003 	ldbu	r2,0(r2)
81107ca4:	e0bff805 	stb	r2,-32(fp)
81107ca8:	e0bff807 	ldb	r2,-32(fp)
81107cac:	10006926 	beq	r2,zero,81107e54 <alt_printf+0x210>
            {
                if (c == '%')
81107cb0:	e0bff807 	ldb	r2,-32(fp)
81107cb4:	10800958 	cmpnei	r2,r2,37
81107cb8:	1000041e 	bne	r2,zero,81107ccc <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
81107cbc:	e0bff807 	ldb	r2,-32(fp)
81107cc0:	1009883a 	mov	r4,r2
81107cc4:	1107e700 	call	81107e70 <alt_putchar>
81107cc8:	00005a06 	br	81107e34 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
81107ccc:	e0bff807 	ldb	r2,-32(fp)
81107cd0:	108018d8 	cmpnei	r2,r2,99
81107cd4:	1000081e 	bne	r2,zero,81107cf8 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
81107cd8:	e0bffe17 	ldw	r2,-8(fp)
81107cdc:	10c00104 	addi	r3,r2,4
81107ce0:	e0fffe15 	stw	r3,-8(fp)
81107ce4:	10800017 	ldw	r2,0(r2)
81107ce8:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
81107cec:	e13ffd17 	ldw	r4,-12(fp)
81107cf0:	1107e700 	call	81107e70 <alt_putchar>
81107cf4:	00004f06 	br	81107e34 <alt_printf+0x1f0>
                }
                else if (c == 'x')
81107cf8:	e0bff807 	ldb	r2,-32(fp)
81107cfc:	10801e18 	cmpnei	r2,r2,120
81107d00:	1000341e 	bne	r2,zero,81107dd4 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
81107d04:	e0bffe17 	ldw	r2,-8(fp)
81107d08:	10c00104 	addi	r3,r2,4
81107d0c:	e0fffe15 	stw	r3,-8(fp)
81107d10:	10800017 	ldw	r2,0(r2)
81107d14:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
81107d18:	e0bffb17 	ldw	r2,-20(fp)
81107d1c:	1000031e 	bne	r2,zero,81107d2c <alt_printf+0xe8>
                    {
                        alt_putchar('0');
81107d20:	01000c04 	movi	r4,48
81107d24:	1107e700 	call	81107e70 <alt_putchar>
                        continue;
81107d28:	00004206 	br	81107e34 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
81107d2c:	00800704 	movi	r2,28
81107d30:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
81107d34:	00000306 	br	81107d44 <alt_printf+0x100>
                        digit_shift -= 4;
81107d38:	e0bff917 	ldw	r2,-28(fp)
81107d3c:	10bfff04 	addi	r2,r2,-4
81107d40:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
81107d44:	00c003c4 	movi	r3,15
81107d48:	e0bff917 	ldw	r2,-28(fp)
81107d4c:	1884983a 	sll	r2,r3,r2
81107d50:	1007883a 	mov	r3,r2
81107d54:	e0bffb17 	ldw	r2,-20(fp)
81107d58:	1884703a 	and	r2,r3,r2
81107d5c:	103ff626 	beq	r2,zero,81107d38 <__reset+0xfb0e7d38>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
81107d60:	00001906 	br	81107dc8 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
81107d64:	00c003c4 	movi	r3,15
81107d68:	e0bff917 	ldw	r2,-28(fp)
81107d6c:	1884983a 	sll	r2,r3,r2
81107d70:	1007883a 	mov	r3,r2
81107d74:	e0bffb17 	ldw	r2,-20(fp)
81107d78:	1886703a 	and	r3,r3,r2
81107d7c:	e0bff917 	ldw	r2,-28(fp)
81107d80:	1884d83a 	srl	r2,r3,r2
81107d84:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
81107d88:	e0bffc17 	ldw	r2,-16(fp)
81107d8c:	108002a8 	cmpgeui	r2,r2,10
81107d90:	1000041e 	bne	r2,zero,81107da4 <alt_printf+0x160>
                            c = '0' + digit;
81107d94:	e0bffc17 	ldw	r2,-16(fp)
81107d98:	10800c04 	addi	r2,r2,48
81107d9c:	e0bff805 	stb	r2,-32(fp)
81107da0:	00000306 	br	81107db0 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
81107da4:	e0bffc17 	ldw	r2,-16(fp)
81107da8:	108015c4 	addi	r2,r2,87
81107dac:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
81107db0:	e0bff807 	ldb	r2,-32(fp)
81107db4:	1009883a 	mov	r4,r2
81107db8:	1107e700 	call	81107e70 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
81107dbc:	e0bff917 	ldw	r2,-28(fp)
81107dc0:	10bfff04 	addi	r2,r2,-4
81107dc4:	e0bff915 	stw	r2,-28(fp)
81107dc8:	e0bff917 	ldw	r2,-28(fp)
81107dcc:	103fe50e 	bge	r2,zero,81107d64 <__reset+0xfb0e7d64>
81107dd0:	00001806 	br	81107e34 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
81107dd4:	e0bff807 	ldb	r2,-32(fp)
81107dd8:	10801cd8 	cmpnei	r2,r2,115
81107ddc:	1000151e 	bne	r2,zero,81107e34 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
81107de0:	e0bffe17 	ldw	r2,-8(fp)
81107de4:	10c00104 	addi	r3,r2,4
81107de8:	e0fffe15 	stw	r3,-8(fp)
81107dec:	10800017 	ldw	r2,0(r2)
81107df0:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
81107df4:	00000906 	br	81107e1c <alt_printf+0x1d8>
                      alt_putchar(*s++);
81107df8:	e0bffa17 	ldw	r2,-24(fp)
81107dfc:	10c00044 	addi	r3,r2,1
81107e00:	e0fffa15 	stw	r3,-24(fp)
81107e04:	10800003 	ldbu	r2,0(r2)
81107e08:	10803fcc 	andi	r2,r2,255
81107e0c:	1080201c 	xori	r2,r2,128
81107e10:	10bfe004 	addi	r2,r2,-128
81107e14:	1009883a 	mov	r4,r2
81107e18:	1107e700 	call	81107e70 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
81107e1c:	e0bffa17 	ldw	r2,-24(fp)
81107e20:	10800003 	ldbu	r2,0(r2)
81107e24:	10803fcc 	andi	r2,r2,255
81107e28:	1080201c 	xori	r2,r2,128
81107e2c:	10bfe004 	addi	r2,r2,-128
81107e30:	103ff11e 	bne	r2,zero,81107df8 <__reset+0xfb0e7df8>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
81107e34:	e0bff717 	ldw	r2,-36(fp)
81107e38:	10c00044 	addi	r3,r2,1
81107e3c:	e0fff715 	stw	r3,-36(fp)
81107e40:	10800003 	ldbu	r2,0(r2)
81107e44:	e0bff805 	stb	r2,-32(fp)
81107e48:	e0bff807 	ldb	r2,-32(fp)
81107e4c:	103f8a1e 	bne	r2,zero,81107c78 <__reset+0xfb0e7c78>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
81107e50:	00000106 	br	81107e58 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
81107e54:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
81107e58:	0001883a 	nop
81107e5c:	e037883a 	mov	sp,fp
81107e60:	dfc00117 	ldw	ra,4(sp)
81107e64:	df000017 	ldw	fp,0(sp)
81107e68:	dec00504 	addi	sp,sp,20
81107e6c:	f800283a 	ret

81107e70 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
81107e70:	defffd04 	addi	sp,sp,-12
81107e74:	dfc00215 	stw	ra,8(sp)
81107e78:	df000115 	stw	fp,4(sp)
81107e7c:	df000104 	addi	fp,sp,4
81107e80:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
81107e84:	d0a00117 	ldw	r2,-32764(gp)
81107e88:	10800217 	ldw	r2,8(r2)
81107e8c:	100b883a 	mov	r5,r2
81107e90:	e13fff17 	ldw	r4,-4(fp)
81107e94:	11084240 	call	81108424 <putc>
#endif
#endif
}
81107e98:	e037883a 	mov	sp,fp
81107e9c:	dfc00117 	ldw	ra,4(sp)
81107ea0:	df000017 	ldw	fp,0(sp)
81107ea4:	dec00204 	addi	sp,sp,8
81107ea8:	f800283a 	ret

81107eac <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
81107eac:	defffa04 	addi	sp,sp,-24
81107eb0:	df000515 	stw	fp,20(sp)
81107eb4:	df000504 	addi	fp,sp,20
81107eb8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81107ebc:	0005303a 	rdctl	r2,status
81107ec0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81107ec4:	e0fffc17 	ldw	r3,-16(fp)
81107ec8:	00bfff84 	movi	r2,-2
81107ecc:	1884703a 	and	r2,r3,r2
81107ed0:	1001703a 	wrctl	status,r2
  
  return context;
81107ed4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
81107ed8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
81107edc:	e0bfff17 	ldw	r2,-4(fp)
81107ee0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
81107ee4:	e0bffd17 	ldw	r2,-12(fp)
81107ee8:	10800017 	ldw	r2,0(r2)
81107eec:	e0fffd17 	ldw	r3,-12(fp)
81107ef0:	18c00117 	ldw	r3,4(r3)
81107ef4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
81107ef8:	e0bffd17 	ldw	r2,-12(fp)
81107efc:	10800117 	ldw	r2,4(r2)
81107f00:	e0fffd17 	ldw	r3,-12(fp)
81107f04:	18c00017 	ldw	r3,0(r3)
81107f08:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
81107f0c:	e0bffd17 	ldw	r2,-12(fp)
81107f10:	e0fffd17 	ldw	r3,-12(fp)
81107f14:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
81107f18:	e0bffd17 	ldw	r2,-12(fp)
81107f1c:	e0fffd17 	ldw	r3,-12(fp)
81107f20:	10c00015 	stw	r3,0(r2)
81107f24:	e0bffb17 	ldw	r2,-20(fp)
81107f28:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81107f2c:	e0bffe17 	ldw	r2,-8(fp)
81107f30:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
81107f34:	0001883a 	nop
81107f38:	e037883a 	mov	sp,fp
81107f3c:	df000017 	ldw	fp,0(sp)
81107f40:	dec00104 	addi	sp,sp,4
81107f44:	f800283a 	ret

81107f48 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
81107f48:	defffb04 	addi	sp,sp,-20
81107f4c:	dfc00415 	stw	ra,16(sp)
81107f50:	df000315 	stw	fp,12(sp)
81107f54:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
81107f58:	d0a01017 	ldw	r2,-32704(gp)
81107f5c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
81107f60:	d0a01b17 	ldw	r2,-32660(gp)
81107f64:	10800044 	addi	r2,r2,1
81107f68:	d0a01b15 	stw	r2,-32660(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
81107f6c:	00002e06 	br	81108028 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
81107f70:	e0bffd17 	ldw	r2,-12(fp)
81107f74:	10800017 	ldw	r2,0(r2)
81107f78:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
81107f7c:	e0bffd17 	ldw	r2,-12(fp)
81107f80:	10800403 	ldbu	r2,16(r2)
81107f84:	10803fcc 	andi	r2,r2,255
81107f88:	10000426 	beq	r2,zero,81107f9c <alt_tick+0x54>
81107f8c:	d0a01b17 	ldw	r2,-32660(gp)
81107f90:	1000021e 	bne	r2,zero,81107f9c <alt_tick+0x54>
    {
      alarm->rollover = 0;
81107f94:	e0bffd17 	ldw	r2,-12(fp)
81107f98:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
81107f9c:	e0bffd17 	ldw	r2,-12(fp)
81107fa0:	10800217 	ldw	r2,8(r2)
81107fa4:	d0e01b17 	ldw	r3,-32660(gp)
81107fa8:	18801d36 	bltu	r3,r2,81108020 <alt_tick+0xd8>
81107fac:	e0bffd17 	ldw	r2,-12(fp)
81107fb0:	10800403 	ldbu	r2,16(r2)
81107fb4:	10803fcc 	andi	r2,r2,255
81107fb8:	1000191e 	bne	r2,zero,81108020 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
81107fbc:	e0bffd17 	ldw	r2,-12(fp)
81107fc0:	10800317 	ldw	r2,12(r2)
81107fc4:	e0fffd17 	ldw	r3,-12(fp)
81107fc8:	18c00517 	ldw	r3,20(r3)
81107fcc:	1809883a 	mov	r4,r3
81107fd0:	103ee83a 	callr	r2
81107fd4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
81107fd8:	e0bfff17 	ldw	r2,-4(fp)
81107fdc:	1000031e 	bne	r2,zero,81107fec <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
81107fe0:	e13ffd17 	ldw	r4,-12(fp)
81107fe4:	1107eac0 	call	81107eac <alt_alarm_stop>
81107fe8:	00000d06 	br	81108020 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
81107fec:	e0bffd17 	ldw	r2,-12(fp)
81107ff0:	10c00217 	ldw	r3,8(r2)
81107ff4:	e0bfff17 	ldw	r2,-4(fp)
81107ff8:	1887883a 	add	r3,r3,r2
81107ffc:	e0bffd17 	ldw	r2,-12(fp)
81108000:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
81108004:	e0bffd17 	ldw	r2,-12(fp)
81108008:	10c00217 	ldw	r3,8(r2)
8110800c:	d0a01b17 	ldw	r2,-32660(gp)
81108010:	1880032e 	bgeu	r3,r2,81108020 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
81108014:	e0bffd17 	ldw	r2,-12(fp)
81108018:	00c00044 	movi	r3,1
8110801c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
81108020:	e0bffe17 	ldw	r2,-8(fp)
81108024:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
81108028:	e0fffd17 	ldw	r3,-12(fp)
8110802c:	d0a01004 	addi	r2,gp,-32704
81108030:	18bfcf1e 	bne	r3,r2,81107f70 <__reset+0xfb0e7f70>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
81108034:	0001883a 	nop
}
81108038:	0001883a 	nop
8110803c:	e037883a 	mov	sp,fp
81108040:	dfc00117 	ldw	ra,4(sp)
81108044:	df000017 	ldw	fp,0(sp)
81108048:	dec00204 	addi	sp,sp,8
8110804c:	f800283a 	ret

81108050 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
81108050:	deffff04 	addi	sp,sp,-4
81108054:	df000015 	stw	fp,0(sp)
81108058:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
8110805c:	000170fa 	wrctl	ienable,zero
}
81108060:	0001883a 	nop
81108064:	e037883a 	mov	sp,fp
81108068:	df000017 	ldw	fp,0(sp)
8110806c:	dec00104 	addi	sp,sp,4
81108070:	f800283a 	ret

81108074 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
81108074:	defffb04 	addi	sp,sp,-20
81108078:	dfc00415 	stw	ra,16(sp)
8110807c:	df000315 	stw	fp,12(sp)
81108080:	df000304 	addi	fp,sp,12
81108084:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
81108088:	d0a00417 	ldw	r2,-32752(gp)
8110808c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
81108090:	00003106 	br	81108158 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
81108094:	e0bffd17 	ldw	r2,-12(fp)
81108098:	10800217 	ldw	r2,8(r2)
8110809c:	1009883a 	mov	r4,r2
811080a0:	11003840 	call	81100384 <strlen>
811080a4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
811080a8:	e0bffd17 	ldw	r2,-12(fp)
811080ac:	10c00217 	ldw	r3,8(r2)
811080b0:	e0bffe17 	ldw	r2,-8(fp)
811080b4:	10bfffc4 	addi	r2,r2,-1
811080b8:	1885883a 	add	r2,r3,r2
811080bc:	10800003 	ldbu	r2,0(r2)
811080c0:	10803fcc 	andi	r2,r2,255
811080c4:	1080201c 	xori	r2,r2,128
811080c8:	10bfe004 	addi	r2,r2,-128
811080cc:	10800bd8 	cmpnei	r2,r2,47
811080d0:	1000031e 	bne	r2,zero,811080e0 <alt_find_file+0x6c>
    {
      len -= 1;
811080d4:	e0bffe17 	ldw	r2,-8(fp)
811080d8:	10bfffc4 	addi	r2,r2,-1
811080dc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
811080e0:	e0bffe17 	ldw	r2,-8(fp)
811080e4:	e0ffff17 	ldw	r3,-4(fp)
811080e8:	1885883a 	add	r2,r3,r2
811080ec:	10800003 	ldbu	r2,0(r2)
811080f0:	10803fcc 	andi	r2,r2,255
811080f4:	1080201c 	xori	r2,r2,128
811080f8:	10bfe004 	addi	r2,r2,-128
811080fc:	10800be0 	cmpeqi	r2,r2,47
81108100:	1000081e 	bne	r2,zero,81108124 <alt_find_file+0xb0>
81108104:	e0bffe17 	ldw	r2,-8(fp)
81108108:	e0ffff17 	ldw	r3,-4(fp)
8110810c:	1885883a 	add	r2,r3,r2
81108110:	10800003 	ldbu	r2,0(r2)
81108114:	10803fcc 	andi	r2,r2,255
81108118:	1080201c 	xori	r2,r2,128
8110811c:	10bfe004 	addi	r2,r2,-128
81108120:	10000a1e 	bne	r2,zero,8110814c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
81108124:	e0bffd17 	ldw	r2,-12(fp)
81108128:	10800217 	ldw	r2,8(r2)
8110812c:	e0fffe17 	ldw	r3,-8(fp)
81108130:	180d883a 	mov	r6,r3
81108134:	e17fff17 	ldw	r5,-4(fp)
81108138:	1009883a 	mov	r4,r2
8110813c:	11083080 	call	81108308 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
81108140:	1000021e 	bne	r2,zero,8110814c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
81108144:	e0bffd17 	ldw	r2,-12(fp)
81108148:	00000706 	br	81108168 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
8110814c:	e0bffd17 	ldw	r2,-12(fp)
81108150:	10800017 	ldw	r2,0(r2)
81108154:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
81108158:	e0fffd17 	ldw	r3,-12(fp)
8110815c:	d0a00404 	addi	r2,gp,-32752
81108160:	18bfcc1e 	bne	r3,r2,81108094 <__reset+0xfb0e8094>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
81108164:	0005883a 	mov	r2,zero
}
81108168:	e037883a 	mov	sp,fp
8110816c:	dfc00117 	ldw	ra,4(sp)
81108170:	df000017 	ldw	fp,0(sp)
81108174:	dec00204 	addi	sp,sp,8
81108178:	f800283a 	ret

8110817c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
8110817c:	defffc04 	addi	sp,sp,-16
81108180:	df000315 	stw	fp,12(sp)
81108184:	df000304 	addi	fp,sp,12
81108188:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
8110818c:	00bffa04 	movi	r2,-24
81108190:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
81108194:	e03ffd15 	stw	zero,-12(fp)
81108198:	00001906 	br	81108200 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
8110819c:	00a04474 	movhi	r2,33041
811081a0:	10a4fb04 	addi	r2,r2,-27668
811081a4:	e0fffd17 	ldw	r3,-12(fp)
811081a8:	18c00324 	muli	r3,r3,12
811081ac:	10c5883a 	add	r2,r2,r3
811081b0:	10800017 	ldw	r2,0(r2)
811081b4:	10000f1e 	bne	r2,zero,811081f4 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
811081b8:	00a04474 	movhi	r2,33041
811081bc:	10a4fb04 	addi	r2,r2,-27668
811081c0:	e0fffd17 	ldw	r3,-12(fp)
811081c4:	18c00324 	muli	r3,r3,12
811081c8:	10c5883a 	add	r2,r2,r3
811081cc:	e0ffff17 	ldw	r3,-4(fp)
811081d0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
811081d4:	d0e00817 	ldw	r3,-32736(gp)
811081d8:	e0bffd17 	ldw	r2,-12(fp)
811081dc:	1880020e 	bge	r3,r2,811081e8 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
811081e0:	e0bffd17 	ldw	r2,-12(fp)
811081e4:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
811081e8:	e0bffd17 	ldw	r2,-12(fp)
811081ec:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
811081f0:	00000606 	br	8110820c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
811081f4:	e0bffd17 	ldw	r2,-12(fp)
811081f8:	10800044 	addi	r2,r2,1
811081fc:	e0bffd15 	stw	r2,-12(fp)
81108200:	e0bffd17 	ldw	r2,-12(fp)
81108204:	10800810 	cmplti	r2,r2,32
81108208:	103fe41e 	bne	r2,zero,8110819c <__reset+0xfb0e819c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
8110820c:	e0bffe17 	ldw	r2,-8(fp)
}
81108210:	e037883a 	mov	sp,fp
81108214:	df000017 	ldw	fp,0(sp)
81108218:	dec00104 	addi	sp,sp,4
8110821c:	f800283a 	ret

81108220 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
81108220:	defffe04 	addi	sp,sp,-8
81108224:	df000115 	stw	fp,4(sp)
81108228:	df000104 	addi	fp,sp,4
8110822c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
81108230:	e0bfff17 	ldw	r2,-4(fp)
81108234:	10bffe84 	addi	r2,r2,-6
81108238:	10c00428 	cmpgeui	r3,r2,16
8110823c:	18001a1e 	bne	r3,zero,811082a8 <alt_exception_cause_generated_bad_addr+0x88>
81108240:	100690ba 	slli	r3,r2,2
81108244:	00a04474 	movhi	r2,33041
81108248:	10a09604 	addi	r2,r2,-32168
8110824c:	1885883a 	add	r2,r3,r2
81108250:	10800017 	ldw	r2,0(r2)
81108254:	1000683a 	jmp	r2
81108258:	81108298 	cmpnei	r4,r16,16906
8110825c:	81108298 	cmpnei	r4,r16,16906
81108260:	811082a8 	cmpgeui	r4,r16,16906
81108264:	811082a8 	cmpgeui	r4,r16,16906
81108268:	811082a8 	cmpgeui	r4,r16,16906
8110826c:	81108298 	cmpnei	r4,r16,16906
81108270:	811082a0 	cmpeqi	r4,r16,16906
81108274:	811082a8 	cmpgeui	r4,r16,16906
81108278:	81108298 	cmpnei	r4,r16,16906
8110827c:	81108298 	cmpnei	r4,r16,16906
81108280:	811082a8 	cmpgeui	r4,r16,16906
81108284:	81108298 	cmpnei	r4,r16,16906
81108288:	811082a0 	cmpeqi	r4,r16,16906
8110828c:	811082a8 	cmpgeui	r4,r16,16906
81108290:	811082a8 	cmpgeui	r4,r16,16906
81108294:	81108298 	cmpnei	r4,r16,16906
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
81108298:	00800044 	movi	r2,1
8110829c:	00000306 	br	811082ac <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
811082a0:	0005883a 	mov	r2,zero
811082a4:	00000106 	br	811082ac <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
811082a8:	0005883a 	mov	r2,zero
  }
}
811082ac:	e037883a 	mov	sp,fp
811082b0:	df000017 	ldw	fp,0(sp)
811082b4:	dec00104 	addi	sp,sp,4
811082b8:	f800283a 	ret

811082bc <atexit>:
811082bc:	200b883a 	mov	r5,r4
811082c0:	000f883a 	mov	r7,zero
811082c4:	000d883a 	mov	r6,zero
811082c8:	0009883a 	mov	r4,zero
811082cc:	11086441 	jmpi	81108644 <__register_exitproc>

811082d0 <exit>:
811082d0:	defffe04 	addi	sp,sp,-8
811082d4:	000b883a 	mov	r5,zero
811082d8:	dc000015 	stw	r16,0(sp)
811082dc:	dfc00115 	stw	ra,4(sp)
811082e0:	2021883a 	mov	r16,r4
811082e4:	110875c0 	call	8110875c <__call_exitprocs>
811082e8:	00a04474 	movhi	r2,33041
811082ec:	10a9a304 	addi	r2,r2,-22900
811082f0:	11000017 	ldw	r4,0(r2)
811082f4:	20800f17 	ldw	r2,60(r4)
811082f8:	10000126 	beq	r2,zero,81108300 <exit+0x30>
811082fc:	103ee83a 	callr	r2
81108300:	8009883a 	mov	r4,r16
81108304:	11088dc0 	call	811088dc <_exit>

81108308 <memcmp>:
81108308:	01c000c4 	movi	r7,3
8110830c:	3980192e 	bgeu	r7,r6,81108374 <memcmp+0x6c>
81108310:	2144b03a 	or	r2,r4,r5
81108314:	11c4703a 	and	r2,r2,r7
81108318:	10000f26 	beq	r2,zero,81108358 <memcmp+0x50>
8110831c:	20800003 	ldbu	r2,0(r4)
81108320:	28c00003 	ldbu	r3,0(r5)
81108324:	10c0151e 	bne	r2,r3,8110837c <memcmp+0x74>
81108328:	31bfff84 	addi	r6,r6,-2
8110832c:	01ffffc4 	movi	r7,-1
81108330:	00000406 	br	81108344 <memcmp+0x3c>
81108334:	20800003 	ldbu	r2,0(r4)
81108338:	28c00003 	ldbu	r3,0(r5)
8110833c:	31bfffc4 	addi	r6,r6,-1
81108340:	10c00e1e 	bne	r2,r3,8110837c <memcmp+0x74>
81108344:	21000044 	addi	r4,r4,1
81108348:	29400044 	addi	r5,r5,1
8110834c:	31fff91e 	bne	r6,r7,81108334 <__reset+0xfb0e8334>
81108350:	0005883a 	mov	r2,zero
81108354:	f800283a 	ret
81108358:	20c00017 	ldw	r3,0(r4)
8110835c:	28800017 	ldw	r2,0(r5)
81108360:	18bfee1e 	bne	r3,r2,8110831c <__reset+0xfb0e831c>
81108364:	31bfff04 	addi	r6,r6,-4
81108368:	21000104 	addi	r4,r4,4
8110836c:	29400104 	addi	r5,r5,4
81108370:	39bff936 	bltu	r7,r6,81108358 <__reset+0xfb0e8358>
81108374:	303fe91e 	bne	r6,zero,8110831c <__reset+0xfb0e831c>
81108378:	003ff506 	br	81108350 <__reset+0xfb0e8350>
8110837c:	10c5c83a 	sub	r2,r2,r3
81108380:	f800283a 	ret

81108384 <_putc_r>:
81108384:	defffc04 	addi	sp,sp,-16
81108388:	dc000215 	stw	r16,8(sp)
8110838c:	dfc00315 	stw	ra,12(sp)
81108390:	2021883a 	mov	r16,r4
81108394:	20000226 	beq	r4,zero,811083a0 <_putc_r+0x1c>
81108398:	20800e17 	ldw	r2,56(r4)
8110839c:	10001b26 	beq	r2,zero,8110840c <_putc_r+0x88>
811083a0:	30800217 	ldw	r2,8(r6)
811083a4:	10bfffc4 	addi	r2,r2,-1
811083a8:	30800215 	stw	r2,8(r6)
811083ac:	10000a16 	blt	r2,zero,811083d8 <_putc_r+0x54>
811083b0:	30800017 	ldw	r2,0(r6)
811083b4:	11400005 	stb	r5,0(r2)
811083b8:	30800017 	ldw	r2,0(r6)
811083bc:	10c00044 	addi	r3,r2,1
811083c0:	30c00015 	stw	r3,0(r6)
811083c4:	10800003 	ldbu	r2,0(r2)
811083c8:	dfc00317 	ldw	ra,12(sp)
811083cc:	dc000217 	ldw	r16,8(sp)
811083d0:	dec00404 	addi	sp,sp,16
811083d4:	f800283a 	ret
811083d8:	30c00617 	ldw	r3,24(r6)
811083dc:	10c00616 	blt	r2,r3,811083f8 <_putc_r+0x74>
811083e0:	30800017 	ldw	r2,0(r6)
811083e4:	00c00284 	movi	r3,10
811083e8:	11400005 	stb	r5,0(r2)
811083ec:	30800017 	ldw	r2,0(r6)
811083f0:	11400003 	ldbu	r5,0(r2)
811083f4:	28fff11e 	bne	r5,r3,811083bc <__reset+0xfb0e83bc>
811083f8:	8009883a 	mov	r4,r16
811083fc:	dfc00317 	ldw	ra,12(sp)
81108400:	dc000217 	ldw	r16,8(sp)
81108404:	dec00404 	addi	sp,sp,16
81108408:	11084ec1 	jmpi	811084ec <__swbuf_r>
8110840c:	d9400015 	stw	r5,0(sp)
81108410:	d9800115 	stw	r6,4(sp)
81108414:	110076c0 	call	8110076c <__sinit>
81108418:	d9800117 	ldw	r6,4(sp)
8110841c:	d9400017 	ldw	r5,0(sp)
81108420:	003fdf06 	br	811083a0 <__reset+0xfb0e83a0>

81108424 <putc>:
81108424:	00a04474 	movhi	r2,33041
81108428:	defffc04 	addi	sp,sp,-16
8110842c:	10a9a404 	addi	r2,r2,-22896
81108430:	dc000115 	stw	r16,4(sp)
81108434:	14000017 	ldw	r16,0(r2)
81108438:	dc400215 	stw	r17,8(sp)
8110843c:	dfc00315 	stw	ra,12(sp)
81108440:	2023883a 	mov	r17,r4
81108444:	80000226 	beq	r16,zero,81108450 <putc+0x2c>
81108448:	80800e17 	ldw	r2,56(r16)
8110844c:	10001a26 	beq	r2,zero,811084b8 <putc+0x94>
81108450:	28800217 	ldw	r2,8(r5)
81108454:	10bfffc4 	addi	r2,r2,-1
81108458:	28800215 	stw	r2,8(r5)
8110845c:	10000b16 	blt	r2,zero,8110848c <putc+0x68>
81108460:	28800017 	ldw	r2,0(r5)
81108464:	14400005 	stb	r17,0(r2)
81108468:	28800017 	ldw	r2,0(r5)
8110846c:	10c00044 	addi	r3,r2,1
81108470:	28c00015 	stw	r3,0(r5)
81108474:	10800003 	ldbu	r2,0(r2)
81108478:	dfc00317 	ldw	ra,12(sp)
8110847c:	dc400217 	ldw	r17,8(sp)
81108480:	dc000117 	ldw	r16,4(sp)
81108484:	dec00404 	addi	sp,sp,16
81108488:	f800283a 	ret
8110848c:	28c00617 	ldw	r3,24(r5)
81108490:	10c00e16 	blt	r2,r3,811084cc <putc+0xa8>
81108494:	28800017 	ldw	r2,0(r5)
81108498:	01000284 	movi	r4,10
8110849c:	14400005 	stb	r17,0(r2)
811084a0:	28800017 	ldw	r2,0(r5)
811084a4:	10c00003 	ldbu	r3,0(r2)
811084a8:	193ff01e 	bne	r3,r4,8110846c <__reset+0xfb0e846c>
811084ac:	280d883a 	mov	r6,r5
811084b0:	180b883a 	mov	r5,r3
811084b4:	00000706 	br	811084d4 <putc+0xb0>
811084b8:	8009883a 	mov	r4,r16
811084bc:	d9400015 	stw	r5,0(sp)
811084c0:	110076c0 	call	8110076c <__sinit>
811084c4:	d9400017 	ldw	r5,0(sp)
811084c8:	003fe106 	br	81108450 <__reset+0xfb0e8450>
811084cc:	280d883a 	mov	r6,r5
811084d0:	880b883a 	mov	r5,r17
811084d4:	8009883a 	mov	r4,r16
811084d8:	dfc00317 	ldw	ra,12(sp)
811084dc:	dc400217 	ldw	r17,8(sp)
811084e0:	dc000117 	ldw	r16,4(sp)
811084e4:	dec00404 	addi	sp,sp,16
811084e8:	11084ec1 	jmpi	811084ec <__swbuf_r>

811084ec <__swbuf_r>:
811084ec:	defffb04 	addi	sp,sp,-20
811084f0:	dcc00315 	stw	r19,12(sp)
811084f4:	dc800215 	stw	r18,8(sp)
811084f8:	dc000015 	stw	r16,0(sp)
811084fc:	dfc00415 	stw	ra,16(sp)
81108500:	dc400115 	stw	r17,4(sp)
81108504:	2025883a 	mov	r18,r4
81108508:	2827883a 	mov	r19,r5
8110850c:	3021883a 	mov	r16,r6
81108510:	20000226 	beq	r4,zero,8110851c <__swbuf_r+0x30>
81108514:	20800e17 	ldw	r2,56(r4)
81108518:	10004226 	beq	r2,zero,81108624 <__swbuf_r+0x138>
8110851c:	80800617 	ldw	r2,24(r16)
81108520:	8100030b 	ldhu	r4,12(r16)
81108524:	80800215 	stw	r2,8(r16)
81108528:	2080020c 	andi	r2,r4,8
8110852c:	10003626 	beq	r2,zero,81108608 <__swbuf_r+0x11c>
81108530:	80c00417 	ldw	r3,16(r16)
81108534:	18003426 	beq	r3,zero,81108608 <__swbuf_r+0x11c>
81108538:	2088000c 	andi	r2,r4,8192
8110853c:	9c403fcc 	andi	r17,r19,255
81108540:	10001a26 	beq	r2,zero,811085ac <__swbuf_r+0xc0>
81108544:	80800017 	ldw	r2,0(r16)
81108548:	81000517 	ldw	r4,20(r16)
8110854c:	10c7c83a 	sub	r3,r2,r3
81108550:	1900200e 	bge	r3,r4,811085d4 <__swbuf_r+0xe8>
81108554:	18c00044 	addi	r3,r3,1
81108558:	81000217 	ldw	r4,8(r16)
8110855c:	11400044 	addi	r5,r2,1
81108560:	81400015 	stw	r5,0(r16)
81108564:	213fffc4 	addi	r4,r4,-1
81108568:	81000215 	stw	r4,8(r16)
8110856c:	14c00005 	stb	r19,0(r2)
81108570:	80800517 	ldw	r2,20(r16)
81108574:	10c01e26 	beq	r2,r3,811085f0 <__swbuf_r+0x104>
81108578:	8080030b 	ldhu	r2,12(r16)
8110857c:	1080004c 	andi	r2,r2,1
81108580:	10000226 	beq	r2,zero,8110858c <__swbuf_r+0xa0>
81108584:	00800284 	movi	r2,10
81108588:	88801926 	beq	r17,r2,811085f0 <__swbuf_r+0x104>
8110858c:	8805883a 	mov	r2,r17
81108590:	dfc00417 	ldw	ra,16(sp)
81108594:	dcc00317 	ldw	r19,12(sp)
81108598:	dc800217 	ldw	r18,8(sp)
8110859c:	dc400117 	ldw	r17,4(sp)
811085a0:	dc000017 	ldw	r16,0(sp)
811085a4:	dec00504 	addi	sp,sp,20
811085a8:	f800283a 	ret
811085ac:	81401917 	ldw	r5,100(r16)
811085b0:	00b7ffc4 	movi	r2,-8193
811085b4:	21080014 	ori	r4,r4,8192
811085b8:	2884703a 	and	r2,r5,r2
811085bc:	80801915 	stw	r2,100(r16)
811085c0:	80800017 	ldw	r2,0(r16)
811085c4:	8100030d 	sth	r4,12(r16)
811085c8:	81000517 	ldw	r4,20(r16)
811085cc:	10c7c83a 	sub	r3,r2,r3
811085d0:	193fe016 	blt	r3,r4,81108554 <__reset+0xfb0e8554>
811085d4:	800b883a 	mov	r5,r16
811085d8:	9009883a 	mov	r4,r18
811085dc:	11026d80 	call	811026d8 <_fflush_r>
811085e0:	1000071e 	bne	r2,zero,81108600 <__swbuf_r+0x114>
811085e4:	80800017 	ldw	r2,0(r16)
811085e8:	00c00044 	movi	r3,1
811085ec:	003fda06 	br	81108558 <__reset+0xfb0e8558>
811085f0:	800b883a 	mov	r5,r16
811085f4:	9009883a 	mov	r4,r18
811085f8:	11026d80 	call	811026d8 <_fflush_r>
811085fc:	103fe326 	beq	r2,zero,8110858c <__reset+0xfb0e858c>
81108600:	00bfffc4 	movi	r2,-1
81108604:	003fe206 	br	81108590 <__reset+0xfb0e8590>
81108608:	800b883a 	mov	r5,r16
8110860c:	9009883a 	mov	r4,r18
81108610:	11022100 	call	81102210 <__swsetup_r>
81108614:	103ffa1e 	bne	r2,zero,81108600 <__reset+0xfb0e8600>
81108618:	8100030b 	ldhu	r4,12(r16)
8110861c:	80c00417 	ldw	r3,16(r16)
81108620:	003fc506 	br	81108538 <__reset+0xfb0e8538>
81108624:	110076c0 	call	8110076c <__sinit>
81108628:	003fbc06 	br	8110851c <__reset+0xfb0e851c>

8110862c <__swbuf>:
8110862c:	00a04474 	movhi	r2,33041
81108630:	10a9a404 	addi	r2,r2,-22896
81108634:	280d883a 	mov	r6,r5
81108638:	200b883a 	mov	r5,r4
8110863c:	11000017 	ldw	r4,0(r2)
81108640:	11084ec1 	jmpi	811084ec <__swbuf_r>

81108644 <__register_exitproc>:
81108644:	defffa04 	addi	sp,sp,-24
81108648:	dc000315 	stw	r16,12(sp)
8110864c:	04204474 	movhi	r16,33041
81108650:	8429a304 	addi	r16,r16,-22900
81108654:	80c00017 	ldw	r3,0(r16)
81108658:	dc400415 	stw	r17,16(sp)
8110865c:	dfc00515 	stw	ra,20(sp)
81108660:	18805217 	ldw	r2,328(r3)
81108664:	2023883a 	mov	r17,r4
81108668:	10003726 	beq	r2,zero,81108748 <__register_exitproc+0x104>
8110866c:	10c00117 	ldw	r3,4(r2)
81108670:	010007c4 	movi	r4,31
81108674:	20c00e16 	blt	r4,r3,811086b0 <__register_exitproc+0x6c>
81108678:	1a000044 	addi	r8,r3,1
8110867c:	8800221e 	bne	r17,zero,81108708 <__register_exitproc+0xc4>
81108680:	18c00084 	addi	r3,r3,2
81108684:	18c7883a 	add	r3,r3,r3
81108688:	18c7883a 	add	r3,r3,r3
8110868c:	12000115 	stw	r8,4(r2)
81108690:	10c7883a 	add	r3,r2,r3
81108694:	19400015 	stw	r5,0(r3)
81108698:	0005883a 	mov	r2,zero
8110869c:	dfc00517 	ldw	ra,20(sp)
811086a0:	dc400417 	ldw	r17,16(sp)
811086a4:	dc000317 	ldw	r16,12(sp)
811086a8:	dec00604 	addi	sp,sp,24
811086ac:	f800283a 	ret
811086b0:	00800034 	movhi	r2,0
811086b4:	10800004 	addi	r2,r2,0
811086b8:	10002626 	beq	r2,zero,81108754 <__register_exitproc+0x110>
811086bc:	01006404 	movi	r4,400
811086c0:	d9400015 	stw	r5,0(sp)
811086c4:	d9800115 	stw	r6,4(sp)
811086c8:	d9c00215 	stw	r7,8(sp)
811086cc:	00000000 	call	80000000 <__alt_mem_onchip_memory-0x1100000>
811086d0:	d9400017 	ldw	r5,0(sp)
811086d4:	d9800117 	ldw	r6,4(sp)
811086d8:	d9c00217 	ldw	r7,8(sp)
811086dc:	10001d26 	beq	r2,zero,81108754 <__register_exitproc+0x110>
811086e0:	81000017 	ldw	r4,0(r16)
811086e4:	10000115 	stw	zero,4(r2)
811086e8:	02000044 	movi	r8,1
811086ec:	22405217 	ldw	r9,328(r4)
811086f0:	0007883a 	mov	r3,zero
811086f4:	12400015 	stw	r9,0(r2)
811086f8:	20805215 	stw	r2,328(r4)
811086fc:	10006215 	stw	zero,392(r2)
81108700:	10006315 	stw	zero,396(r2)
81108704:	883fde26 	beq	r17,zero,81108680 <__reset+0xfb0e8680>
81108708:	18c9883a 	add	r4,r3,r3
8110870c:	2109883a 	add	r4,r4,r4
81108710:	1109883a 	add	r4,r2,r4
81108714:	21802215 	stw	r6,136(r4)
81108718:	01800044 	movi	r6,1
8110871c:	12406217 	ldw	r9,392(r2)
81108720:	30cc983a 	sll	r6,r6,r3
81108724:	4992b03a 	or	r9,r9,r6
81108728:	12406215 	stw	r9,392(r2)
8110872c:	21c04215 	stw	r7,264(r4)
81108730:	01000084 	movi	r4,2
81108734:	893fd21e 	bne	r17,r4,81108680 <__reset+0xfb0e8680>
81108738:	11006317 	ldw	r4,396(r2)
8110873c:	218cb03a 	or	r6,r4,r6
81108740:	11806315 	stw	r6,396(r2)
81108744:	003fce06 	br	81108680 <__reset+0xfb0e8680>
81108748:	18805304 	addi	r2,r3,332
8110874c:	18805215 	stw	r2,328(r3)
81108750:	003fc606 	br	8110866c <__reset+0xfb0e866c>
81108754:	00bfffc4 	movi	r2,-1
81108758:	003fd006 	br	8110869c <__reset+0xfb0e869c>

8110875c <__call_exitprocs>:
8110875c:	defff504 	addi	sp,sp,-44
81108760:	df000915 	stw	fp,36(sp)
81108764:	dd400615 	stw	r21,24(sp)
81108768:	dc800315 	stw	r18,12(sp)
8110876c:	dfc00a15 	stw	ra,40(sp)
81108770:	ddc00815 	stw	r23,32(sp)
81108774:	dd800715 	stw	r22,28(sp)
81108778:	dd000515 	stw	r20,20(sp)
8110877c:	dcc00415 	stw	r19,16(sp)
81108780:	dc400215 	stw	r17,8(sp)
81108784:	dc000115 	stw	r16,4(sp)
81108788:	d9000015 	stw	r4,0(sp)
8110878c:	2839883a 	mov	fp,r5
81108790:	04800044 	movi	r18,1
81108794:	057fffc4 	movi	r21,-1
81108798:	00a04474 	movhi	r2,33041
8110879c:	10a9a304 	addi	r2,r2,-22900
811087a0:	12000017 	ldw	r8,0(r2)
811087a4:	45005217 	ldw	r20,328(r8)
811087a8:	44c05204 	addi	r19,r8,328
811087ac:	a0001c26 	beq	r20,zero,81108820 <__call_exitprocs+0xc4>
811087b0:	a0800117 	ldw	r2,4(r20)
811087b4:	15ffffc4 	addi	r23,r2,-1
811087b8:	b8000d16 	blt	r23,zero,811087f0 <__call_exitprocs+0x94>
811087bc:	14000044 	addi	r16,r2,1
811087c0:	8421883a 	add	r16,r16,r16
811087c4:	8421883a 	add	r16,r16,r16
811087c8:	84402004 	addi	r17,r16,128
811087cc:	a463883a 	add	r17,r20,r17
811087d0:	a421883a 	add	r16,r20,r16
811087d4:	e0001e26 	beq	fp,zero,81108850 <__call_exitprocs+0xf4>
811087d8:	80804017 	ldw	r2,256(r16)
811087dc:	e0801c26 	beq	fp,r2,81108850 <__call_exitprocs+0xf4>
811087e0:	bdffffc4 	addi	r23,r23,-1
811087e4:	843fff04 	addi	r16,r16,-4
811087e8:	8c7fff04 	addi	r17,r17,-4
811087ec:	bd7ff91e 	bne	r23,r21,811087d4 <__reset+0xfb0e87d4>
811087f0:	00800034 	movhi	r2,0
811087f4:	10800004 	addi	r2,r2,0
811087f8:	10000926 	beq	r2,zero,81108820 <__call_exitprocs+0xc4>
811087fc:	a0800117 	ldw	r2,4(r20)
81108800:	1000301e 	bne	r2,zero,811088c4 <__call_exitprocs+0x168>
81108804:	a0800017 	ldw	r2,0(r20)
81108808:	10003226 	beq	r2,zero,811088d4 <__call_exitprocs+0x178>
8110880c:	a009883a 	mov	r4,r20
81108810:	98800015 	stw	r2,0(r19)
81108814:	00000000 	call	80000000 <__alt_mem_onchip_memory-0x1100000>
81108818:	9d000017 	ldw	r20,0(r19)
8110881c:	a03fe41e 	bne	r20,zero,811087b0 <__reset+0xfb0e87b0>
81108820:	dfc00a17 	ldw	ra,40(sp)
81108824:	df000917 	ldw	fp,36(sp)
81108828:	ddc00817 	ldw	r23,32(sp)
8110882c:	dd800717 	ldw	r22,28(sp)
81108830:	dd400617 	ldw	r21,24(sp)
81108834:	dd000517 	ldw	r20,20(sp)
81108838:	dcc00417 	ldw	r19,16(sp)
8110883c:	dc800317 	ldw	r18,12(sp)
81108840:	dc400217 	ldw	r17,8(sp)
81108844:	dc000117 	ldw	r16,4(sp)
81108848:	dec00b04 	addi	sp,sp,44
8110884c:	f800283a 	ret
81108850:	a0800117 	ldw	r2,4(r20)
81108854:	80c00017 	ldw	r3,0(r16)
81108858:	10bfffc4 	addi	r2,r2,-1
8110885c:	15c01426 	beq	r2,r23,811088b0 <__call_exitprocs+0x154>
81108860:	80000015 	stw	zero,0(r16)
81108864:	183fde26 	beq	r3,zero,811087e0 <__reset+0xfb0e87e0>
81108868:	95c8983a 	sll	r4,r18,r23
8110886c:	a0806217 	ldw	r2,392(r20)
81108870:	a5800117 	ldw	r22,4(r20)
81108874:	2084703a 	and	r2,r4,r2
81108878:	10000b26 	beq	r2,zero,811088a8 <__call_exitprocs+0x14c>
8110887c:	a0806317 	ldw	r2,396(r20)
81108880:	2088703a 	and	r4,r4,r2
81108884:	20000c1e 	bne	r4,zero,811088b8 <__call_exitprocs+0x15c>
81108888:	89400017 	ldw	r5,0(r17)
8110888c:	d9000017 	ldw	r4,0(sp)
81108890:	183ee83a 	callr	r3
81108894:	a0800117 	ldw	r2,4(r20)
81108898:	15bfbf1e 	bne	r2,r22,81108798 <__reset+0xfb0e8798>
8110889c:	98800017 	ldw	r2,0(r19)
811088a0:	153fcf26 	beq	r2,r20,811087e0 <__reset+0xfb0e87e0>
811088a4:	003fbc06 	br	81108798 <__reset+0xfb0e8798>
811088a8:	183ee83a 	callr	r3
811088ac:	003ff906 	br	81108894 <__reset+0xfb0e8894>
811088b0:	a5c00115 	stw	r23,4(r20)
811088b4:	003feb06 	br	81108864 <__reset+0xfb0e8864>
811088b8:	89000017 	ldw	r4,0(r17)
811088bc:	183ee83a 	callr	r3
811088c0:	003ff406 	br	81108894 <__reset+0xfb0e8894>
811088c4:	a0800017 	ldw	r2,0(r20)
811088c8:	a027883a 	mov	r19,r20
811088cc:	1029883a 	mov	r20,r2
811088d0:	003fb606 	br	811087ac <__reset+0xfb0e87ac>
811088d4:	0005883a 	mov	r2,zero
811088d8:	003ffb06 	br	811088c8 <__reset+0xfb0e88c8>

811088dc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
811088dc:	defffd04 	addi	sp,sp,-12
811088e0:	df000215 	stw	fp,8(sp)
811088e4:	df000204 	addi	fp,sp,8
811088e8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
811088ec:	0001883a 	nop
811088f0:	e0bfff17 	ldw	r2,-4(fp)
811088f4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
811088f8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
811088fc:	10000226 	beq	r2,zero,81108908 <_exit+0x2c>
    ALT_SIM_FAIL();
81108900:	002af070 	cmpltui	zero,zero,43969
81108904:	00000106 	br	8110890c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
81108908:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
8110890c:	003fff06 	br	8110890c <__reset+0xfb0e890c>
