
sync_test.elf:     file format elf32-littlenios2
sync_test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x81100244

Program Header:
    LOAD off    0x00001020 vaddr 0x81100020 paddr 0x81100020 align 2**12
         filesz 0x0000afc8 memsz 0x0000b11c flags rwx
    LOAD off    0x0000c000 vaddr 0x86020000 paddr 0x86020000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  86020000  86020000  0000c000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  81100020  81100020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00008fe0  81100244  81100244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000288  81109224  81109224  0000a224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b3c  811094ac  811094ac  0000a4ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  8110afe8  8110afe8  0000bfe8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  8110b13c  8110b13c  0000c000  2**0
                  CONTENTS
  7 .descriptor_memory 00000000  81200800  81200800  0000c000  2**0
                  CONTENTS
  8 .ext_flash    00000000  86020020  86020020  0000c000  2**0
                  CONTENTS
  9 .comment      00000023  00000000  00000000  0000c000  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000ad8  00000000  00000000  0000c028  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0001ad51  00000000  00000000  0000cb00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00006d6c  00000000  00000000  00027851  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00007b14  00000000  00000000  0002e5bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002318  00000000  00000000  000360d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003912  00000000  00000000  000383ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00004e22  00000000  00000000  0003bcfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000040  00000000  00000000  00040b20  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 000006d8  00000000  00000000  00040b60  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000003  00000000  00000000  00044891  2**0
                  CONTENTS, READONLY
 20 .cpu          0000000c  00000000  00000000  00044894  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  000448a0  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  000448a1  2**0
                  CONTENTS, READONLY
 23 .sysid_hash   00000004  00000000  00000000  000448a2  2**0
                  CONTENTS, READONLY
 24 .sysid_base   00000004  00000000  00000000  000448a6  2**0
                  CONTENTS, READONLY
 25 .sysid_time   00000004  00000000  00000000  000448aa  2**0
                  CONTENTS, READONLY
 26 .stderr_dev   0000000b  00000000  00000000  000448ae  2**0
                  CONTENTS, READONLY
 27 .stdin_dev    0000000b  00000000  00000000  000448b9  2**0
                  CONTENTS, READONLY
 28 .stdout_dev   0000000b  00000000  00000000  000448c4  2**0
                  CONTENTS, READONLY
 29 .sopc_system_name 00000011  00000000  00000000  000448cf  2**0
                  CONTENTS, READONLY
 30 .quartus_project_dir 00000046  00000000  00000000  000448e0  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0026471a  00000000  00000000  00044926  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
86020000 l    d  .entry	00000000 .entry
81100020 l    d  .exceptions	00000000 .exceptions
81100244 l    d  .text	00000000 .text
81109224 l    d  .rodata	00000000 .rodata
811094ac l    d  .rwdata	00000000 .rwdata
8110afe8 l    d  .bss	00000000 .bss
8110b13c l    d  .onchip_memory	00000000 .onchip_memory
81200800 l    d  .descriptor_memory	00000000 .descriptor_memory
86020020 l    d  .ext_flash	00000000 .ext_flash
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../sync_test_bsp//obj/HAL/src/crt0.o
81100278 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 sync.c
81100b38 l     F .text	00000050 read_reg
81100ae4 l     F .text	00000054 write_reg
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
81100d30 l     F .text	00000008 __fp_unlock
81100d44 l     F .text	0000019c __sinit.part.1
81100ee0 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
811094ac l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
8110398c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
81103a98 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
81103ac4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
81103bb0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
81103c90 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
81103e64 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
8110afc8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
811040b0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
811041e4 l     F .text	00000034 alt_dev_reg
81109e80 l     O .rwdata	00001060 jtag_uart_0
8110aee0 l     O .rwdata	00000030 sgdma_rx
8110af10 l     O .rwdata	00000030 sgdma_tx
8110af40 l     O .rwdata	00000060 dma_DDR_M
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
81104530 l     F .text	0000020c altera_avalon_jtag_uart_irq
8110473c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_sgdma.c
81104d74 l     F .text	0000003c alt_get_errno
811059a4 l     F .text	000000bc alt_avalon_sgdma_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
81105b08 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_msgdma.c
81105bfc l     F .text	0000003c alt_get_errno
81105c38 l     F .text	00000094 alt_msgdma_write_standard_descriptor
81105ccc l     F .text	0000012c alt_msgdma_write_extended_descriptor
81105df8 l     F .text	00000184 alt_msgdma_irq
81105f7c l     F .text	0000008c alt_msgdma_construct_standard_descriptor
81106008 l     F .text	00000154 alt_msgdma_construct_extended_descriptor
8110615c l     F .text	000002d0 alt_msgdma_descriptor_async_transfer
8110642c l     F .text	00000378 alt_msgdma_descriptor_sync_transfer
81106a74 l     F .text	000000a4 alt_msgdma_construct_prefetcher_standard_descriptor
81106b18 l     F .text	00000194 alt_msgdma_construct_prefetcher_extended_descriptor
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
81107cf4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
811081c4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
81108304 l     F .text	0000003c alt_get_errno
81108340 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
8110b010 g     O .bss	00000004 alt_instruction_exception_handler
81107988 g     F .text	0000003c alt_msgdma_standard_descriptor_async_transfer
81103784 g     F .text	00000054 _isatty_r
81103da0 g     F .text	0000007c alt_main
81100bc4 g     F .text	000000c0 _puts_r
8110b03c g     O .bss	00000100 alt_irq
811034ac g     F .text	00000060 _lseek_r
81106854 g     F .text	00000058 alt_msgdma_construct_standard_mm_to_mm_descriptor
8110b13c g       *ABS*	00000000 __alt_heap_start
81104ed4 g     F .text	00000110 alt_avalon_sgdma_do_sync_transfer
81100a0c g     F .text	0000006c sync_ctr_chg_out_enable
81102a60 g     F .text	0000005c __sseek
81101080 g     F .text	00000010 __sinit
81108e00 g     F .text	00000140 __swbuf_r
81100ee8 g     F .text	00000068 __sfmoreglue
81103e40 g     F .text	00000024 __malloc_unlock
811055ec g     F .text	000003b8 alt_avalon_sgdma_construct_descriptor_burst
81100634 g     F .text	0000004c sync_ctr_reset
8110214c g     F .text	0000015c memmove
81101068 g     F .text	00000018 _cleanup
811067a4 g     F .text	00000058 alt_msgdma_construct_standard_st_to_mm_descriptor
81108964 g     F .text	00000024 altera_nios2_gen2_irq_init
86020000 g     F .entry	00000000 __reset
81100718 g     F .text	0000006c sync_ctr_sync_out_enable
8110513c g     F .text	00000078 alt_avalon_sgdma_construct_stream_to_mem_desc_burst
81103728 g     F .text	0000005c _fstat_r
8110aff4 g     O .bss	00000004 errno
811029dc g     F .text	00000008 __seofread
8110affc g     O .bss	00000004 alt_argv
81112fa0 g       *ABS*	00000000 _gp
811072c4 g     F .text	000000d4 alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits
81109d00 g     O .rwdata	00000180 alt_fd_list
8110038c g     F .text	00000038 sync_config_mbt
81107e94 g     F .text	00000090 alt_find_dev
81102004 g     F .text	00000148 memcpy
81100d38 g     F .text	0000000c _cleanup_r
81108288 g     F .text	0000007c alt_io_redirect
81109224 g       *ABS*	00000000 __DTOR_END__
811076e4 g     F .text	0000008c alt_msgdma_start_prefetcher_with_extd_desc_list
811079c4 g     F .text	0000003c alt_msgdma_extended_descriptor_async_transfer
81107934 g     F .text	00000054 alt_msgdma_register_callback
81100c84 g     F .text	00000014 puts
81108b34 g     F .text	0000009c alt_exception_cause_generated_bad_addr
81105234 g     F .text	0000008c alt_avalon_sgdma_construct_mem_to_stream_desc_burst
81104934 g     F .text	0000021c altera_avalon_jtag_uart_read
81106fa4 g     F .text	000000f0 alt_msgdma_prefetcher_add_standard_desc_to_list
811038d0 g     F .text	00000064 .hidden __udivsi3
81103bec g     F .text	000000a4 isatty
8110aff0 g     O .bss	00000004 __malloc_top_pad
811010d0 g     F .text	000004bc __sfvwrite_r
8110536c g     F .text	0000005c alt_avalon_sgdma_stop
81102934 g     F .text	00000054 _sbrk_r
811036c8 g     F .text	00000060 _read_r
811004d8 g     F .text	00000068 sync_config_n_cyles
81107ccc g     F .text	00000028 alt_dcache_flush
8110afc0 g     O .rwdata	00000004 alt_max_fd
81102ccc g     F .text	000000f0 _fclose_r
811009a0 g     F .text	0000006c sync_ctr_chf_out_enable
81103048 g     F .text	00000030 fflush
8110afec g     O .bss	00000004 __malloc_max_sbrked_mem
811008c8 g     F .text	0000006c sync_ctr_chd_out_enable
81106d04 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor
81103ccc g     F .text	000000d4 lseek
8110afa0 g     O .rwdata	00000004 _global_impure_ptr
811023d0 g     F .text	00000564 _realloc_r
8110b13c g       *ABS*	00000000 __bss_end
811080d4 g     F .text	000000f0 alt_iic_isr_register
81104db0 g     F .text	00000124 alt_avalon_sgdma_do_async_transfer
8110885c g     F .text	00000108 alt_tick
811077c8 g     F .text	0000016c alt_msgdma_init
81107a3c g     F .text	0000003c alt_msgdma_extended_descriptor_sync_transfer
811010a0 g     F .text	00000018 __fp_lock_all
81108088 g     F .text	0000004c alt_ic_irq_enabled
811087c0 g     F .text	0000009c alt_alarm_stop
81200800 g       *ABS*	00000000 __alt_mem_descriptor_memory
8110b004 g     O .bss	00000004 alt_irq_active
811000fc g     F .exceptions	000000d4 alt_irq_handler
81109cd8 g     O .rwdata	00000028 alt_dev_null
8110693c g     F .text	00000090 alt_msgdma_construct_extended_mm_to_st_descriptor
8110030c g     F .text	00000044 sync_status_le_error_code
811053c8 g     F .text	00000064 alt_avalon_sgdma_check_descriptor_status
81107658 g     F .text	0000008c alt_msgdma_start_prefetcher_with_std_desc_list
811005e8 g     F .text	0000004c sync_ctr_start
81100000 g       *ABS*	00000000 __alt_mem_onchip_memory
8110afb8 g     O .rwdata	00000008 alt_dev_list
811040ec g     F .text	000000f8 write
8110550c g     F .text	00000080 alt_avalon_sgdma_enable_desc_poll
81108c98 g     F .text	000000a0 _putc_r
81103b00 g     F .text	000000b0 fstat
81103934 g     F .text	00000058 .hidden __umodsi3
811051b4 g     F .text	00000080 alt_avalon_sgdma_construct_mem_to_stream_desc
81106d5c g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor
811052c0 g     F .text	00000054 alt_avalon_sgdma_register_callback
8110b13c g       *ABS*	00000000 end
81104470 g     F .text	000000c0 altera_avalon_jtag_uart_init
811001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
81100934 g     F .text	0000006c sync_ctr_che_out_enable
81109224 g       *ABS*	00000000 __CTOR_LIST__
811fa000 g       *ABS*	00000000 __alt_stack_pointer
8110558c g     F .text	00000060 alt_avalon_sgdma_disable_desc_poll
81105b80 g     F .text	0000007c alt_avalon_timer_sc_init
81104b50 g     F .text	00000224 altera_avalon_jtag_uart_write
81104fe4 g     F .text	00000074 alt_avalon_sgdma_construct_mem_to_mem_desc
81101090 g     F .text	00000004 __sfp_lock_acquire
81101f20 g     F .text	000000e4 memchr
811050dc g     F .text	00000060 alt_avalon_sgdma_construct_stream_to_mem_desc
8110319c g     F .text	00000310 _free_r
81108558 g     F .text	0000022c alt_printf
81109070 g     F .text	00000180 __call_exitprocs
8110afa8 g     O .rwdata	00000004 __malloc_sbrk_base
81100244 g     F .text	00000038 _start
8110b008 g     O .bss	00000004 _alt_tick_rate
8110542c g     F .text	00000054 alt_avalon_sgdma_open
811006cc g     F .text	0000004c sync_ctr_err_inj
8110b00c g     O .bss	00000004 _alt_nticks
811067fc g     F .text	00000058 alt_msgdma_construct_standard_mm_to_st_descriptor
81103ea0 g     F .text	000000fc read
81104250 g     F .text	000000bc alt_sys_init
81108f58 g     F .text	00000118 __register_exitproc
811047dc g     F .text	00000068 altera_avalon_jtag_uart_close
8110b014 g     O .bss	00000028 __malloc_current_mallinfo
8110430c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
81100a78 g     F .text	0000006c sync_ctr_chh_out_enable
81108a90 g     F .text	000000a4 alt_get_fd
81107ba4 g     F .text	00000128 alt_busy_sleep
81102c78 g     F .text	00000054 _close_r
81106cac g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor
81108c1c g     F .text	0000007c memcmp
811043cc g     F .text	00000050 altera_avalon_jtag_uart_close_fd
8110b13c g       *ABS*	00000000 __alt_stack_base
8110441c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
81106db4 g     F .text	000000a0 alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor
811003fc g     F .text	00000038 sync_config_per
81102b24 g     F .text	00000154 __swsetup_r
81100f50 g     F .text	00000118 __sfp
81100680 g     F .text	0000004c sync_ctr_one_shot
811098d0 g     O .rwdata	00000408 __malloc_av_
8110109c g     F .text	00000004 __sinit_lock_release
81102988 g     F .text	00000054 __sread
81108988 g     F .text	00000108 alt_find_file
81107d30 g     F .text	000000a4 alt_dev_llist_insert
81103e1c g     F .text	00000024 __malloc_lock
81104000 g     F .text	000000b0 sbrk
81105314 g     F .text	00000058 alt_avalon_sgdma_start
81102fec g     F .text	0000005c _fflush_r
8110afe8 g       *ABS*	00000000 __bss_start
811022a8 g     F .text	00000128 memset
81107770 g     F .text	00000058 alt_msgdma_open
81100b88 g     F .text	0000003c main
8110b000 g     O .bss	00000004 alt_envp
8110afe8 g     O .bss	00000004 __malloc_max_total_mem
81107094 g     F .text	00000198 alt_msgdma_prefetcher_add_extended_desc_to_list
8110436c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
81108f40 g     F .text	00000018 __swbuf
8110afcc g     O .rwdata	00000008 alt_sgdma_list
81102abc g     F .text	00000008 __sclose
811fa000 g       *ABS*	00000000 __alt_heap_limit
81102dbc g     F .text	00000014 fclose
81107398 g     F .text	000002c0 alt_msgdma_start_prefetcher_with_list_addr
81101714 g     F .text	0000080c _malloc_r
811007f0 g     F .text	0000006c sync_ctr_chb_out_enable
8110afc4 g     O .rwdata	00000004 alt_errno
81106eec g     F .text	000000b8 alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor
8110158c g     F .text	000000c4 _fwalk
81100578 g     F .text	00000070 sync_ctr_int_extn
81100350 g     F .text	0000003c sync_status_le_cycle_number
81108d38 g     F .text	000000c8 putc
811037d8 g     F .text	00000084 .hidden __divsi3
81103078 g     F .text	00000124 _malloc_trim_r
81109224 g       *ABS*	00000000 __CTOR_END__
81109224 g       *ABS*	00000000 __DTOR_LIST__
81104218 g     F .text	00000038 alt_irq_init
81103f9c g     F .text	00000064 alt_release_fd
81107a00 g     F .text	0000003c alt_msgdma_standard_descriptor_sync_transfer
8110085c g     F .text	0000006c sync_ctr_chc_out_enable
81108bd0 g     F .text	00000014 atexit
81102ac4 g     F .text	00000060 _write_r
81106e54 g     F .text	00000098 alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor
8110afa4 g     O .rwdata	00000004 _impure_ptr
8110aff8 g     O .bss	00000004 alt_argc
81102dd0 g     F .text	0000021c __sflush_r
81107e34 g     F .text	00000060 _do_dtors
81100020 g       .exceptions	00000000 alt_irq_entry
811010b8 g     F .text	00000018 __fp_unlock_all
8110afb0 g     O .rwdata	00000008 alt_fs_list
8110046c g     F .text	0000006c sync_config_polarity
81107f24 g     F .text	00000050 alt_ic_isr_register
8110027c g     F .text	0000004c sync_status_le_int_extn
8110afe8 g       *ABS*	00000000 _edata
8110b13c g       *ABS*	00000000 _end
81104844 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
81107ffc g     F .text	0000008c alt_ic_irq_disable
81100434 g     F .text	00000038 sync_config_ost
81105480 g     F .text	0000008c alt_avalon_sgdma_construct_descriptor
811029e4 g     F .text	0000007c __swrite
8110afac g     O .rwdata	00000004 __malloc_trim_threshold
81108be4 g     F .text	00000038 exit
81101650 g     F .text	000000c4 _fwalk_reent
8110722c g     F .text	00000098 alt_msgdma_prefetcher_set_std_list_own_by_hw_bits
8110385c g     F .text	00000074 .hidden __modsi3
811fa000 g       *ABS*	00000000 __alt_data_end
81100020 g     F .exceptions	00000000 alt_exception
81101094 g     F .text	00000004 __sfp_lock_release
811069cc g     F .text	000000a8 alt_msgdma_construct_extended_mm_to_mm_descriptor
84000000 g       *ABS*	00000000 __alt_mem_ext_flash
811068ac g     F .text	00000090 alt_msgdma_construct_extended_st_to_mm_descriptor
811091f0 g     F .text	00000034 _exit
81107a78 g     F .text	0000012c alt_alarm_start
8110350c g     F .text	000001bc __smakebuf_r
811003c4 g     F .text	00000038 sync_config_bt
8110afd4 g     O .rwdata	00000008 alt_msgdma_list
81100c98 g     F .text	00000098 strlen
81108404 g     F .text	00000154 open
81108784 g     F .text	0000003c alt_putchar
8110afdc g     O .rwdata	00000004 alt_priority_mask
81107f74 g     F .text	00000088 alt_ic_irq_enable
81105058 g     F .text	00000084 alt_avalon_sgdma_construct_mem_to_mem_desc_burst
81100540 g     F .text	00000038 sync_err_inj
8110afe0 g     O .rwdata	00000008 alt_alarm_list
81107dd4 g     F .text	00000060 _do_ctors
811039c8 g     F .text	000000d0 close
811002c8 g     F .text	00000044 sync_status_le_state
81105a60 g     F .text	000000a8 alt_avalon_sgdma_init
81101098 g     F .text	00000004 __sinit_lock_acquire
81100784 g     F .text	0000006c sync_ctr_cha_out_enable



Disassembly of section .exceptions:

81100020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
81100020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
81100024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
81100028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
8110002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
81100030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
81100034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
81100038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
8110003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
81100040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
81100044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
81100048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
8110004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
81100050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
81100054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
81100058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
8110005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
81100060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
81100064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
81100068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
8110006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
81100070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
81100074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
81100078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
8110007c:	10000326 	beq	r2,zero,8110008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
81100080:	20000226 	beq	r4,zero,8110008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
81100084:	11000fc0 	call	811000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
81100088:	00000706 	br	811000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
8110008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
81100090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
81100094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
81100098:	11001d00 	call	811001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
8110009c:	1000021e 	bne	r2,zero,811000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
811000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
811000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
811000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
811000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
811000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
811000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
811000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
811000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
811000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
811000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
811000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
811000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
811000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
811000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
811000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
811000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
811000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
811000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
811000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
811000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
811000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
811000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
811000f8:	ef80083a 	eret

811000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
811000fc:	defff904 	addi	sp,sp,-28
81100100:	dfc00615 	stw	ra,24(sp)
81100104:	df000515 	stw	fp,20(sp)
81100108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
8110010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
81100110:	0005313a 	rdctl	r2,ipending
81100114:	e0bffe15 	stw	r2,-8(fp)

  return active;
81100118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
8110011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
81100120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
81100124:	00800044 	movi	r2,1
81100128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
8110012c:	e0fffb17 	ldw	r3,-20(fp)
81100130:	e0bffc17 	ldw	r2,-16(fp)
81100134:	1884703a 	and	r2,r3,r2
81100138:	10001426 	beq	r2,zero,8110018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
8110013c:	00a04474 	movhi	r2,33041
81100140:	10ac0f04 	addi	r2,r2,-20420
81100144:	e0fffd17 	ldw	r3,-12(fp)
81100148:	180690fa 	slli	r3,r3,3
8110014c:	10c5883a 	add	r2,r2,r3
81100150:	10c00017 	ldw	r3,0(r2)
81100154:	00a04474 	movhi	r2,33041
81100158:	10ac0f04 	addi	r2,r2,-20420
8110015c:	e13ffd17 	ldw	r4,-12(fp)
81100160:	200890fa 	slli	r4,r4,3
81100164:	1105883a 	add	r2,r2,r4
81100168:	10800104 	addi	r2,r2,4
8110016c:	10800017 	ldw	r2,0(r2)
81100170:	1009883a 	mov	r4,r2
81100174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
81100178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
8110017c:	0005313a 	rdctl	r2,ipending
81100180:	e0bfff15 	stw	r2,-4(fp)

  return active;
81100184:	e0bfff17 	ldw	r2,-4(fp)
81100188:	00000706 	br	811001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
8110018c:	e0bffc17 	ldw	r2,-16(fp)
81100190:	1085883a 	add	r2,r2,r2
81100194:	e0bffc15 	stw	r2,-16(fp)
      i++;
81100198:	e0bffd17 	ldw	r2,-12(fp)
8110019c:	10800044 	addi	r2,r2,1
811001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
811001a4:	003fe106 	br	8110012c <__reset+0xfb0e012c>

    active = alt_irq_pending ();
811001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
811001ac:	e0bffb17 	ldw	r2,-20(fp)
811001b0:	103fdb1e 	bne	r2,zero,81100120 <__reset+0xfb0e0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
811001b4:	0001883a 	nop
}
811001b8:	0001883a 	nop
811001bc:	e037883a 	mov	sp,fp
811001c0:	dfc00117 	ldw	ra,4(sp)
811001c4:	df000017 	ldw	fp,0(sp)
811001c8:	dec00204 	addi	sp,sp,8
811001cc:	f800283a 	ret

811001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
811001d0:	defffb04 	addi	sp,sp,-20
811001d4:	dfc00415 	stw	ra,16(sp)
811001d8:	df000315 	stw	fp,12(sp)
811001dc:	df000304 	addi	fp,sp,12
811001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
811001e4:	000531fa 	rdctl	r2,exception
811001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
811001ec:	e0bffd17 	ldw	r2,-12(fp)
811001f0:	10801f0c 	andi	r2,r2,124
811001f4:	1004d0ba 	srli	r2,r2,2
811001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
811001fc:	0005333a 	rdctl	r2,badaddr
81100200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
81100204:	d0a01c17 	ldw	r2,-32656(gp)
81100208:	10000726 	beq	r2,zero,81100228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
8110020c:	d0a01c17 	ldw	r2,-32656(gp)
81100210:	e0fffd17 	ldw	r3,-12(fp)
81100214:	e1bffe17 	ldw	r6,-8(fp)
81100218:	e17fff17 	ldw	r5,-4(fp)
8110021c:	1809883a 	mov	r4,r3
81100220:	103ee83a 	callr	r2
81100224:	00000206 	br	81100230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
81100228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
8110022c:	0005883a 	mov	r2,zero
}
81100230:	e037883a 	mov	sp,fp
81100234:	dfc00117 	ldw	ra,4(sp)
81100238:	df000017 	ldw	fp,0(sp)
8110023c:	dec00204 	addi	sp,sp,8
81100240:	f800283a 	ret

Disassembly of section .text:

81100244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
81100244:	06e047f4 	movhi	sp,33055
    ori sp, sp, %lo(__alt_stack_pointer)
81100248:	dee80014 	ori	sp,sp,40960
    movhi gp, %hi(_gp)
8110024c:	06a04474 	movhi	gp,33041
    ori gp, gp, %lo(_gp)
81100250:	d68be814 	ori	gp,gp,12192
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
81100254:	00a04434 	movhi	r2,33040
    ori r2, r2, %lo(__bss_start)
81100258:	10abfa14 	ori	r2,r2,45032

    movhi r3, %hi(__bss_end)
8110025c:	00e04434 	movhi	r3,33040
    ori r3, r3, %lo(__bss_end)
81100260:	18ec4f14 	ori	r3,r3,45372

    beq r2, r3, 1f
81100264:	10c00326 	beq	r2,r3,81100274 <_start+0x30>

0:
    stw zero, (r2)
81100268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
8110026c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
81100270:	10fffd36 	bltu	r2,r3,81100268 <__reset+0xfb0e0268>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
81100274:	1103da00 	call	81103da0 <alt_main>

81100278 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
81100278:	003fff06 	br	81100278 <__reset+0xfb0e0278>

8110027c <sync_status_le_int_extn>:
//! [program memory private global variables]

//! [public functions]
// Status reg
PUBLIC bool sync_status_le_int_extn(void)
{
8110027c:	defffc04 	addi	sp,sp,-16
81100280:	dfc00315 	stw	ra,12(sp)
81100284:	df000215 	stw	fp,8(sp)
81100288:	df000204 	addi	fp,sp,8
	alt_u32 aux;
	bool result;

	aux = read_reg(SYNC_STATUS_REG_OFFSET);
8110028c:	0009883a 	mov	r4,zero
81100290:	1100b380 	call	81100b38 <read_reg>
81100294:	e0bfff15 	stw	r2,-4(fp)

	if (aux & STATUS_INT_EXTN_MASK) {
81100298:	e0bfff17 	ldw	r2,-4(fp)
8110029c:	1000030e 	bge	r2,zero,811002ac <sync_status_le_int_extn+0x30>
		result = TRUE;
811002a0:	00800044 	movi	r2,1
811002a4:	e0bffe15 	stw	r2,-8(fp)
811002a8:	00000106 	br	811002b0 <sync_status_le_int_extn+0x34>
	}
	else {
		result = FALSE;
811002ac:	e03ffe15 	stw	zero,-8(fp)
	}
	return result;
811002b0:	e0bffe17 	ldw	r2,-8(fp)
}
811002b4:	e037883a 	mov	sp,fp
811002b8:	dfc00117 	ldw	ra,4(sp)
811002bc:	df000017 	ldw	fp,0(sp)
811002c0:	dec00204 	addi	sp,sp,8
811002c4:	f800283a 	ret

811002c8 <sync_status_le_state>:

PUBLIC alt_u8 sync_status_le_state(void)
{
811002c8:	defffc04 	addi	sp,sp,-16
811002cc:	dfc00315 	stw	ra,12(sp)
811002d0:	df000215 	stw	fp,8(sp)
811002d4:	df000204 	addi	fp,sp,8
	alt_u32 aux;
	alt_u8 result;

	aux = read_reg(SYNC_STATUS_REG_OFFSET);
811002d8:	0009883a 	mov	r4,zero
811002dc:	1100b380 	call	81100b38 <read_reg>
811002e0:	e0bffe15 	stw	r2,-8(fp)
	result = (alt_u8) ((aux & STATUS_STATE_MASK) >> 16);
811002e4:	e0bffe17 	ldw	r2,-8(fp)
811002e8:	10803fec 	andhi	r2,r2,255
811002ec:	1004d43a 	srli	r2,r2,16
811002f0:	e0bfff05 	stb	r2,-4(fp)
	return result;
811002f4:	e0bfff03 	ldbu	r2,-4(fp)
}
811002f8:	e037883a 	mov	sp,fp
811002fc:	dfc00117 	ldw	ra,4(sp)
81100300:	df000017 	ldw	fp,0(sp)
81100304:	dec00204 	addi	sp,sp,8
81100308:	f800283a 	ret

8110030c <sync_status_le_error_code>:

PUBLIC alt_u8 sync_status_le_error_code(void)
{
8110030c:	defffc04 	addi	sp,sp,-16
81100310:	dfc00315 	stw	ra,12(sp)
81100314:	df000215 	stw	fp,8(sp)
81100318:	df000204 	addi	fp,sp,8
	alt_u32 aux;
	alt_u8 result;

	aux = read_reg(SYNC_STATUS_REG_OFFSET);
8110031c:	0009883a 	mov	r4,zero
81100320:	1100b380 	call	81100b38 <read_reg>
81100324:	e0bffe15 	stw	r2,-8(fp)
	result = (alt_u8) ((aux & STATUS_ERROR_CODE_MASK) >> 8);
81100328:	e0bffe17 	ldw	r2,-8(fp)
8110032c:	10bfc00c 	andi	r2,r2,65280
81100330:	1004d23a 	srli	r2,r2,8
81100334:	e0bfff05 	stb	r2,-4(fp)
	return result;
81100338:	e0bfff03 	ldbu	r2,-4(fp)
}
8110033c:	e037883a 	mov	sp,fp
81100340:	dfc00117 	ldw	ra,4(sp)
81100344:	df000017 	ldw	fp,0(sp)
81100348:	dec00204 	addi	sp,sp,8
8110034c:	f800283a 	ret

81100350 <sync_status_le_cycle_number>:

PUBLIC alt_u8 sync_status_le_cycle_number(void)
{
81100350:	defffc04 	addi	sp,sp,-16
81100354:	dfc00315 	stw	ra,12(sp)
81100358:	df000215 	stw	fp,8(sp)
8110035c:	df000204 	addi	fp,sp,8
	alt_u32 aux;
	alt_u8 result;

	aux = read_reg(SYNC_STATUS_REG_OFFSET);
81100360:	0009883a 	mov	r4,zero
81100364:	1100b380 	call	81100b38 <read_reg>
81100368:	e0bffe15 	stw	r2,-8(fp)
	result = (alt_u8) ((aux & STATUS_CYCLE_NUMBER_MASK) >> 0);
8110036c:	e0bffe17 	ldw	r2,-8(fp)
81100370:	e0bfff05 	stb	r2,-4(fp)
	return result;
81100374:	e0bfff03 	ldbu	r2,-4(fp)
}
81100378:	e037883a 	mov	sp,fp
8110037c:	dfc00117 	ldw	ra,4(sp)
81100380:	df000017 	ldw	fp,0(sp)
81100384:	dec00204 	addi	sp,sp,8
81100388:	f800283a 	ret

8110038c <sync_config_mbt>:

// Config regs
PUBLIC bool sync_config_mbt(alt_u32 value)
{
8110038c:	defffd04 	addi	sp,sp,-12
81100390:	dfc00215 	stw	ra,8(sp)
81100394:	df000115 	stw	fp,4(sp)
81100398:	df000104 	addi	fp,sp,4
8110039c:	e13fff15 	stw	r4,-4(fp)
	write_reg(SYNC_CONFIG_MBT_REG_OFFSET, value);
811003a0:	e17fff17 	ldw	r5,-4(fp)
811003a4:	01000104 	movi	r4,4
811003a8:	1100ae40 	call	81100ae4 <write_reg>
 	return  TRUE;
811003ac:	00800044 	movi	r2,1
}
811003b0:	e037883a 	mov	sp,fp
811003b4:	dfc00117 	ldw	ra,4(sp)
811003b8:	df000017 	ldw	fp,0(sp)
811003bc:	dec00204 	addi	sp,sp,8
811003c0:	f800283a 	ret

811003c4 <sync_config_bt>:

PUBLIC bool sync_config_bt(alt_u32 value)
{
811003c4:	defffd04 	addi	sp,sp,-12
811003c8:	dfc00215 	stw	ra,8(sp)
811003cc:	df000115 	stw	fp,4(sp)
811003d0:	df000104 	addi	fp,sp,4
811003d4:	e13fff15 	stw	r4,-4(fp)
	write_reg(SYNC_CONFIG_BT_REG_OFFSET, value);
811003d8:	e17fff17 	ldw	r5,-4(fp)
811003dc:	01000144 	movi	r4,5
811003e0:	1100ae40 	call	81100ae4 <write_reg>
 	return  TRUE;
811003e4:	00800044 	movi	r2,1
}
811003e8:	e037883a 	mov	sp,fp
811003ec:	dfc00117 	ldw	ra,4(sp)
811003f0:	df000017 	ldw	fp,0(sp)
811003f4:	dec00204 	addi	sp,sp,8
811003f8:	f800283a 	ret

811003fc <sync_config_per>:

PUBLIC bool sync_config_per(alt_u32 value)
{
811003fc:	defffd04 	addi	sp,sp,-12
81100400:	dfc00215 	stw	ra,8(sp)
81100404:	df000115 	stw	fp,4(sp)
81100408:	df000104 	addi	fp,sp,4
8110040c:	e13fff15 	stw	r4,-4(fp)
	write_reg(SYNC_CONFIG_PER_REG_OFFSET, value);
81100410:	e17fff17 	ldw	r5,-4(fp)
81100414:	01000184 	movi	r4,6
81100418:	1100ae40 	call	81100ae4 <write_reg>
 	return  TRUE;
8110041c:	00800044 	movi	r2,1
}
81100420:	e037883a 	mov	sp,fp
81100424:	dfc00117 	ldw	ra,4(sp)
81100428:	df000017 	ldw	fp,0(sp)
8110042c:	dec00204 	addi	sp,sp,8
81100430:	f800283a 	ret

81100434 <sync_config_ost>:

PUBLIC bool sync_config_ost(alt_u32 value)
{
81100434:	defffd04 	addi	sp,sp,-12
81100438:	dfc00215 	stw	ra,8(sp)
8110043c:	df000115 	stw	fp,4(sp)
81100440:	df000104 	addi	fp,sp,4
81100444:	e13fff15 	stw	r4,-4(fp)
	write_reg(SYNC_CONFIG_OST_REG_OFFSET, value);
81100448:	e17fff17 	ldw	r5,-4(fp)
8110044c:	010001c4 	movi	r4,7
81100450:	1100ae40 	call	81100ae4 <write_reg>
 	return  TRUE;
81100454:	00800044 	movi	r2,1
}
81100458:	e037883a 	mov	sp,fp
8110045c:	dfc00117 	ldw	ra,4(sp)
81100460:	df000017 	ldw	fp,0(sp)
81100464:	dec00204 	addi	sp,sp,8
81100468:	f800283a 	ret

8110046c <sync_config_polarity>:

PUBLIC bool sync_config_polarity(bool value)
{
8110046c:	defffc04 	addi	sp,sp,-16
81100470:	dfc00315 	stw	ra,12(sp)
81100474:	df000215 	stw	fp,8(sp)
81100478:	df000204 	addi	fp,sp,8
8110047c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 aux;

	aux = read_reg(SYNC_CONFIG_GENERAL_REG_OFFSET);
81100480:	01000204 	movi	r4,8
81100484:	1100b380 	call	81100b38 <read_reg>
81100488:	e0bffe15 	stw	r2,-8(fp)

	if (value == BIT_OFF) {
8110048c:	e0bfff17 	ldw	r2,-4(fp)
81100490:	1000051e 	bne	r2,zero,811004a8 <sync_config_polarity+0x3c>
	aux &= ~CONFIG_GENERAL_POLARITY_MASK;
81100494:	e0fffe17 	ldw	r3,-8(fp)
81100498:	00bfbfc4 	movi	r2,-257
8110049c:	1884703a 	and	r2,r3,r2
811004a0:	e0bffe15 	stw	r2,-8(fp)
811004a4:	00000306 	br	811004b4 <sync_config_polarity+0x48>
	}
	else {
	aux |= CONFIG_GENERAL_POLARITY_MASK;
811004a8:	e0bffe17 	ldw	r2,-8(fp)
811004ac:	10804014 	ori	r2,r2,256
811004b0:	e0bffe15 	stw	r2,-8(fp)
	}

	write_reg(SYNC_CONFIG_GENERAL_REG_OFFSET, aux);
811004b4:	e17ffe17 	ldw	r5,-8(fp)
811004b8:	01000204 	movi	r4,8
811004bc:	1100ae40 	call	81100ae4 <write_reg>
 	return  TRUE;
811004c0:	00800044 	movi	r2,1
}
811004c4:	e037883a 	mov	sp,fp
811004c8:	dfc00117 	ldw	ra,4(sp)
811004cc:	df000017 	ldw	fp,0(sp)
811004d0:	dec00204 	addi	sp,sp,8
811004d4:	f800283a 	ret

811004d8 <sync_config_n_cyles>:

PUBLIC bool sync_config_n_cyles(alt_u8 value)
{
811004d8:	defffc04 	addi	sp,sp,-16
811004dc:	dfc00315 	stw	ra,12(sp)
811004e0:	df000215 	stw	fp,8(sp)
811004e4:	df000204 	addi	fp,sp,8
811004e8:	2005883a 	mov	r2,r4
811004ec:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 aux;

	aux = read_reg(SYNC_CONFIG_GENERAL_REG_OFFSET);
811004f0:	01000204 	movi	r4,8
811004f4:	1100b380 	call	81100b38 <read_reg>
811004f8:	e0bffe15 	stw	r2,-8(fp)
	aux &= ~CONFIG_GENERAL_N_CYCLES_MASK;
811004fc:	e0fffe17 	ldw	r3,-8(fp)
81100500:	00bfc004 	movi	r2,-256
81100504:	1884703a 	and	r2,r3,r2
81100508:	e0bffe15 	stw	r2,-8(fp)
	aux |= (alt_u32) value;
8110050c:	e0bfff03 	ldbu	r2,-4(fp)
81100510:	e0fffe17 	ldw	r3,-8(fp)
81100514:	1884b03a 	or	r2,r3,r2
81100518:	e0bffe15 	stw	r2,-8(fp)

	write_reg(SYNC_CONFIG_GENERAL_REG_OFFSET, aux);
8110051c:	e17ffe17 	ldw	r5,-8(fp)
81100520:	01000204 	movi	r4,8
81100524:	1100ae40 	call	81100ae4 <write_reg>
 	return  TRUE;
81100528:	00800044 	movi	r2,1
}
8110052c:	e037883a 	mov	sp,fp
81100530:	dfc00117 	ldw	ra,4(sp)
81100534:	df000017 	ldw	fp,0(sp)
81100538:	dec00204 	addi	sp,sp,8
8110053c:	f800283a 	ret

81100540 <sync_err_inj>:

// Error injection reg
PUBLIC bool sync_err_inj(alt_u32 value)
{
81100540:	defffd04 	addi	sp,sp,-12
81100544:	dfc00215 	stw	ra,8(sp)
81100548:	df000115 	stw	fp,4(sp)
8110054c:	df000104 	addi	fp,sp,4
81100550:	e13fff15 	stw	r4,-4(fp)
	write_reg(SYNC_ERR_INJ_REG_OFFSET, value);
81100554:	e17fff17 	ldw	r5,-4(fp)
81100558:	01000244 	movi	r4,9
8110055c:	1100ae40 	call	81100ae4 <write_reg>
 	return  TRUE;
81100560:	00800044 	movi	r2,1
}
81100564:	e037883a 	mov	sp,fp
81100568:	dfc00117 	ldw	ra,4(sp)
8110056c:	df000017 	ldw	fp,0(sp)
81100570:	dec00204 	addi	sp,sp,8
81100574:	f800283a 	ret

81100578 <sync_ctr_int_extn>:

// Control reg
PUBLIC bool sync_ctr_int_extn(bool value)
{
81100578:	defffc04 	addi	sp,sp,-16
8110057c:	dfc00315 	stw	ra,12(sp)
81100580:	df000215 	stw	fp,8(sp)
81100584:	df000204 	addi	fp,sp,8
81100588:	e13fff15 	stw	r4,-4(fp)
	alt_u32 aux;

	aux = read_reg(SYNC_CTR_REG_OFFSET);
8110058c:	01000284 	movi	r4,10
81100590:	1100b380 	call	81100b38 <read_reg>
81100594:	e0bffe15 	stw	r2,-8(fp)

	if (value == BIT_OFF) {
81100598:	e0bfff17 	ldw	r2,-4(fp)
8110059c:	1000061e 	bne	r2,zero,811005b8 <sync_ctr_int_extn+0x40>
	aux &= ~CTR_INT_EXTN_MASK;
811005a0:	e0fffe17 	ldw	r3,-8(fp)
811005a4:	00a00034 	movhi	r2,32768
811005a8:	10bfffc4 	addi	r2,r2,-1
811005ac:	1884703a 	and	r2,r3,r2
811005b0:	e0bffe15 	stw	r2,-8(fp)
811005b4:	00000306 	br	811005c4 <sync_ctr_int_extn+0x4c>
	}
	else {
	aux |= CTR_INT_EXTN_MASK;
811005b8:	e0bffe17 	ldw	r2,-8(fp)
811005bc:	10a00034 	orhi	r2,r2,32768
811005c0:	e0bffe15 	stw	r2,-8(fp)
	}

	write_reg(SYNC_CTR_REG_OFFSET, aux);
811005c4:	e17ffe17 	ldw	r5,-8(fp)
811005c8:	01000284 	movi	r4,10
811005cc:	1100ae40 	call	81100ae4 <write_reg>
 	return  TRUE;
811005d0:	00800044 	movi	r2,1
}
811005d4:	e037883a 	mov	sp,fp
811005d8:	dfc00117 	ldw	ra,4(sp)
811005dc:	df000017 	ldw	fp,0(sp)
811005e0:	dec00204 	addi	sp,sp,8
811005e4:	f800283a 	ret

811005e8 <sync_ctr_start>:

PUBLIC bool sync_ctr_start(void)
{
811005e8:	defffd04 	addi	sp,sp,-12
811005ec:	dfc00215 	stw	ra,8(sp)
811005f0:	df000115 	stw	fp,4(sp)
811005f4:	df000104 	addi	fp,sp,4
	alt_u32 aux;

	aux = read_reg(SYNC_CTR_REG_OFFSET);
811005f8:	01000284 	movi	r4,10
811005fc:	1100b380 	call	81100b38 <read_reg>
81100600:	e0bfff15 	stw	r2,-4(fp)

	aux |= CTR_START_MASK;
81100604:	e0bfff17 	ldw	r2,-4(fp)
81100608:	10800234 	orhi	r2,r2,8
8110060c:	e0bfff15 	stw	r2,-4(fp)

	write_reg(SYNC_CTR_REG_OFFSET, aux);
81100610:	e17fff17 	ldw	r5,-4(fp)
81100614:	01000284 	movi	r4,10
81100618:	1100ae40 	call	81100ae4 <write_reg>
 	return  TRUE;
8110061c:	00800044 	movi	r2,1
}
81100620:	e037883a 	mov	sp,fp
81100624:	dfc00117 	ldw	ra,4(sp)
81100628:	df000017 	ldw	fp,0(sp)
8110062c:	dec00204 	addi	sp,sp,8
81100630:	f800283a 	ret

81100634 <sync_ctr_reset>:

PUBLIC bool sync_ctr_reset(void)
{
81100634:	defffd04 	addi	sp,sp,-12
81100638:	dfc00215 	stw	ra,8(sp)
8110063c:	df000115 	stw	fp,4(sp)
81100640:	df000104 	addi	fp,sp,4
	alt_u32 aux;

	aux = read_reg(SYNC_CTR_REG_OFFSET);
81100644:	01000284 	movi	r4,10
81100648:	1100b380 	call	81100b38 <read_reg>
8110064c:	e0bfff15 	stw	r2,-4(fp)

	aux |= CTR_RESET_MASK;
81100650:	e0bfff17 	ldw	r2,-4(fp)
81100654:	10800134 	orhi	r2,r2,4
81100658:	e0bfff15 	stw	r2,-4(fp)

	write_reg(SYNC_CTR_REG_OFFSET, aux);
8110065c:	e17fff17 	ldw	r5,-4(fp)
81100660:	01000284 	movi	r4,10
81100664:	1100ae40 	call	81100ae4 <write_reg>
 	return  TRUE;
81100668:	00800044 	movi	r2,1
}
8110066c:	e037883a 	mov	sp,fp
81100670:	dfc00117 	ldw	ra,4(sp)
81100674:	df000017 	ldw	fp,0(sp)
81100678:	dec00204 	addi	sp,sp,8
8110067c:	f800283a 	ret

81100680 <sync_ctr_one_shot>:

PUBLIC bool sync_ctr_one_shot(void)
{
81100680:	defffd04 	addi	sp,sp,-12
81100684:	dfc00215 	stw	ra,8(sp)
81100688:	df000115 	stw	fp,4(sp)
8110068c:	df000104 	addi	fp,sp,4
	alt_u32 aux;

	aux = read_reg(SYNC_CTR_REG_OFFSET);
81100690:	01000284 	movi	r4,10
81100694:	1100b380 	call	81100b38 <read_reg>
81100698:	e0bfff15 	stw	r2,-4(fp)

	aux |= CTR_ONE_SHOT_MASK;
8110069c:	e0bfff17 	ldw	r2,-4(fp)
811006a0:	108000b4 	orhi	r2,r2,2
811006a4:	e0bfff15 	stw	r2,-4(fp)

	write_reg(SYNC_CTR_REG_OFFSET, aux);
811006a8:	e17fff17 	ldw	r5,-4(fp)
811006ac:	01000284 	movi	r4,10
811006b0:	1100ae40 	call	81100ae4 <write_reg>
 	return  TRUE;
811006b4:	00800044 	movi	r2,1
}
811006b8:	e037883a 	mov	sp,fp
811006bc:	dfc00117 	ldw	ra,4(sp)
811006c0:	df000017 	ldw	fp,0(sp)
811006c4:	dec00204 	addi	sp,sp,8
811006c8:	f800283a 	ret

811006cc <sync_ctr_err_inj>:

PUBLIC bool sync_ctr_err_inj(void)
{
811006cc:	defffd04 	addi	sp,sp,-12
811006d0:	dfc00215 	stw	ra,8(sp)
811006d4:	df000115 	stw	fp,4(sp)
811006d8:	df000104 	addi	fp,sp,4
	alt_u32 aux;

	aux = read_reg(SYNC_CTR_REG_OFFSET);
811006dc:	01000284 	movi	r4,10
811006e0:	1100b380 	call	81100b38 <read_reg>
811006e4:	e0bfff15 	stw	r2,-4(fp)

	aux |= CTR_ERR_INJ_MASK;
811006e8:	e0bfff17 	ldw	r2,-4(fp)
811006ec:	10800074 	orhi	r2,r2,1
811006f0:	e0bfff15 	stw	r2,-4(fp)

	write_reg(SYNC_CTR_REG_OFFSET, aux);
811006f4:	e17fff17 	ldw	r5,-4(fp)
811006f8:	01000284 	movi	r4,10
811006fc:	1100ae40 	call	81100ae4 <write_reg>
 	return  TRUE;
81100700:	00800044 	movi	r2,1
}
81100704:	e037883a 	mov	sp,fp
81100708:	dfc00117 	ldw	ra,4(sp)
8110070c:	df000017 	ldw	fp,0(sp)
81100710:	dec00204 	addi	sp,sp,8
81100714:	f800283a 	ret

81100718 <sync_ctr_sync_out_enable>:

PUBLIC bool sync_ctr_sync_out_enable(bool value)
{
81100718:	defffc04 	addi	sp,sp,-16
8110071c:	dfc00315 	stw	ra,12(sp)
81100720:	df000215 	stw	fp,8(sp)
81100724:	df000204 	addi	fp,sp,8
81100728:	e13fff15 	stw	r4,-4(fp)
	alt_u32 aux;

	aux = read_reg(SYNC_CTR_REG_OFFSET);
8110072c:	01000284 	movi	r4,10
81100730:	1100b380 	call	81100b38 <read_reg>
81100734:	e0bffe15 	stw	r2,-8(fp)

	if (value == BIT_OFF) {
81100738:	e0bfff17 	ldw	r2,-4(fp)
8110073c:	1000051e 	bne	r2,zero,81100754 <sync_ctr_sync_out_enable+0x3c>
	aux &= ~CTR_SYNC_OUT_EN_MASK;
81100740:	e0fffe17 	ldw	r3,-8(fp)
81100744:	00bfbfc4 	movi	r2,-257
81100748:	1884703a 	and	r2,r3,r2
8110074c:	e0bffe15 	stw	r2,-8(fp)
81100750:	00000306 	br	81100760 <sync_ctr_sync_out_enable+0x48>
	}
	else {
	aux |= CTR_SYNC_OUT_EN_MASK;
81100754:	e0bffe17 	ldw	r2,-8(fp)
81100758:	10804014 	ori	r2,r2,256
8110075c:	e0bffe15 	stw	r2,-8(fp)
	}

	write_reg(SYNC_CTR_REG_OFFSET, aux);
81100760:	e17ffe17 	ldw	r5,-8(fp)
81100764:	01000284 	movi	r4,10
81100768:	1100ae40 	call	81100ae4 <write_reg>
 	return  TRUE;
8110076c:	00800044 	movi	r2,1
}
81100770:	e037883a 	mov	sp,fp
81100774:	dfc00117 	ldw	ra,4(sp)
81100778:	df000017 	ldw	fp,0(sp)
8110077c:	dec00204 	addi	sp,sp,8
81100780:	f800283a 	ret

81100784 <sync_ctr_cha_out_enable>:

PUBLIC bool sync_ctr_cha_out_enable(bool value)
{
81100784:	defffc04 	addi	sp,sp,-16
81100788:	dfc00315 	stw	ra,12(sp)
8110078c:	df000215 	stw	fp,8(sp)
81100790:	df000204 	addi	fp,sp,8
81100794:	e13fff15 	stw	r4,-4(fp)
	alt_u32 aux;

	aux = read_reg(SYNC_CTR_REG_OFFSET);
81100798:	01000284 	movi	r4,10
8110079c:	1100b380 	call	81100b38 <read_reg>
811007a0:	e0bffe15 	stw	r2,-8(fp)

	if (value == BIT_OFF) {
811007a4:	e0bfff17 	ldw	r2,-4(fp)
811007a8:	1000051e 	bne	r2,zero,811007c0 <sync_ctr_cha_out_enable+0x3c>
	aux &= ~CTR_CHA_EN_MASK;
811007ac:	e0fffe17 	ldw	r3,-8(fp)
811007b0:	00bfff84 	movi	r2,-2
811007b4:	1884703a 	and	r2,r3,r2
811007b8:	e0bffe15 	stw	r2,-8(fp)
811007bc:	00000306 	br	811007cc <sync_ctr_cha_out_enable+0x48>
	}
	else {
	aux |= CTR_CHA_EN_MASK;
811007c0:	e0bffe17 	ldw	r2,-8(fp)
811007c4:	10800054 	ori	r2,r2,1
811007c8:	e0bffe15 	stw	r2,-8(fp)
	}

	write_reg(SYNC_CTR_REG_OFFSET, aux);
811007cc:	e17ffe17 	ldw	r5,-8(fp)
811007d0:	01000284 	movi	r4,10
811007d4:	1100ae40 	call	81100ae4 <write_reg>
 	return  TRUE;
811007d8:	00800044 	movi	r2,1
}
811007dc:	e037883a 	mov	sp,fp
811007e0:	dfc00117 	ldw	ra,4(sp)
811007e4:	df000017 	ldw	fp,0(sp)
811007e8:	dec00204 	addi	sp,sp,8
811007ec:	f800283a 	ret

811007f0 <sync_ctr_chb_out_enable>:

PUBLIC bool sync_ctr_chb_out_enable(bool value)
{
811007f0:	defffc04 	addi	sp,sp,-16
811007f4:	dfc00315 	stw	ra,12(sp)
811007f8:	df000215 	stw	fp,8(sp)
811007fc:	df000204 	addi	fp,sp,8
81100800:	e13fff15 	stw	r4,-4(fp)
	alt_u32 aux;

	aux = read_reg(SYNC_CTR_REG_OFFSET);
81100804:	01000284 	movi	r4,10
81100808:	1100b380 	call	81100b38 <read_reg>
8110080c:	e0bffe15 	stw	r2,-8(fp)

	if (value == BIT_OFF) {
81100810:	e0bfff17 	ldw	r2,-4(fp)
81100814:	1000051e 	bne	r2,zero,8110082c <sync_ctr_chb_out_enable+0x3c>
	aux &= ~CTR_CHB_EN_MASK;
81100818:	e0fffe17 	ldw	r3,-8(fp)
8110081c:	00bfff44 	movi	r2,-3
81100820:	1884703a 	and	r2,r3,r2
81100824:	e0bffe15 	stw	r2,-8(fp)
81100828:	00000306 	br	81100838 <sync_ctr_chb_out_enable+0x48>
	}
	else {
	aux |= CTR_CHB_EN_MASK;
8110082c:	e0bffe17 	ldw	r2,-8(fp)
81100830:	10800094 	ori	r2,r2,2
81100834:	e0bffe15 	stw	r2,-8(fp)
	}

	write_reg(SYNC_CTR_REG_OFFSET, aux);
81100838:	e17ffe17 	ldw	r5,-8(fp)
8110083c:	01000284 	movi	r4,10
81100840:	1100ae40 	call	81100ae4 <write_reg>
 	return  TRUE;
81100844:	00800044 	movi	r2,1
}
81100848:	e037883a 	mov	sp,fp
8110084c:	dfc00117 	ldw	ra,4(sp)
81100850:	df000017 	ldw	fp,0(sp)
81100854:	dec00204 	addi	sp,sp,8
81100858:	f800283a 	ret

8110085c <sync_ctr_chc_out_enable>:

PUBLIC bool sync_ctr_chc_out_enable(bool value)
{
8110085c:	defffc04 	addi	sp,sp,-16
81100860:	dfc00315 	stw	ra,12(sp)
81100864:	df000215 	stw	fp,8(sp)
81100868:	df000204 	addi	fp,sp,8
8110086c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 aux;

	aux = read_reg(SYNC_CTR_REG_OFFSET);
81100870:	01000284 	movi	r4,10
81100874:	1100b380 	call	81100b38 <read_reg>
81100878:	e0bffe15 	stw	r2,-8(fp)

	if (value == BIT_OFF) {
8110087c:	e0bfff17 	ldw	r2,-4(fp)
81100880:	1000051e 	bne	r2,zero,81100898 <sync_ctr_chc_out_enable+0x3c>
	aux &= ~CTR_CHC_EN_MASK;
81100884:	e0fffe17 	ldw	r3,-8(fp)
81100888:	00bffec4 	movi	r2,-5
8110088c:	1884703a 	and	r2,r3,r2
81100890:	e0bffe15 	stw	r2,-8(fp)
81100894:	00000306 	br	811008a4 <sync_ctr_chc_out_enable+0x48>
	}
	else {
	aux |= CTR_CHC_EN_MASK;
81100898:	e0bffe17 	ldw	r2,-8(fp)
8110089c:	10800114 	ori	r2,r2,4
811008a0:	e0bffe15 	stw	r2,-8(fp)
	}

	write_reg(SYNC_CTR_REG_OFFSET, aux);
811008a4:	e17ffe17 	ldw	r5,-8(fp)
811008a8:	01000284 	movi	r4,10
811008ac:	1100ae40 	call	81100ae4 <write_reg>
 	return  TRUE;
811008b0:	00800044 	movi	r2,1
}
811008b4:	e037883a 	mov	sp,fp
811008b8:	dfc00117 	ldw	ra,4(sp)
811008bc:	df000017 	ldw	fp,0(sp)
811008c0:	dec00204 	addi	sp,sp,8
811008c4:	f800283a 	ret

811008c8 <sync_ctr_chd_out_enable>:

PUBLIC bool sync_ctr_chd_out_enable(bool value)
{
811008c8:	defffc04 	addi	sp,sp,-16
811008cc:	dfc00315 	stw	ra,12(sp)
811008d0:	df000215 	stw	fp,8(sp)
811008d4:	df000204 	addi	fp,sp,8
811008d8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 aux;

	aux = read_reg(SYNC_CTR_REG_OFFSET);
811008dc:	01000284 	movi	r4,10
811008e0:	1100b380 	call	81100b38 <read_reg>
811008e4:	e0bffe15 	stw	r2,-8(fp)

	if (value == BIT_OFF) {
811008e8:	e0bfff17 	ldw	r2,-4(fp)
811008ec:	1000051e 	bne	r2,zero,81100904 <sync_ctr_chd_out_enable+0x3c>
	aux &= ~CTR_CHD_EN_MASK;
811008f0:	e0fffe17 	ldw	r3,-8(fp)
811008f4:	00bffdc4 	movi	r2,-9
811008f8:	1884703a 	and	r2,r3,r2
811008fc:	e0bffe15 	stw	r2,-8(fp)
81100900:	00000306 	br	81100910 <sync_ctr_chd_out_enable+0x48>
	}
	else {
	aux |= CTR_CHD_EN_MASK;
81100904:	e0bffe17 	ldw	r2,-8(fp)
81100908:	10800214 	ori	r2,r2,8
8110090c:	e0bffe15 	stw	r2,-8(fp)
	}

	write_reg(SYNC_CTR_REG_OFFSET, aux);
81100910:	e17ffe17 	ldw	r5,-8(fp)
81100914:	01000284 	movi	r4,10
81100918:	1100ae40 	call	81100ae4 <write_reg>
 	return  TRUE;
8110091c:	00800044 	movi	r2,1
}
81100920:	e037883a 	mov	sp,fp
81100924:	dfc00117 	ldw	ra,4(sp)
81100928:	df000017 	ldw	fp,0(sp)
8110092c:	dec00204 	addi	sp,sp,8
81100930:	f800283a 	ret

81100934 <sync_ctr_che_out_enable>:

PUBLIC bool sync_ctr_che_out_enable(bool value)
{
81100934:	defffc04 	addi	sp,sp,-16
81100938:	dfc00315 	stw	ra,12(sp)
8110093c:	df000215 	stw	fp,8(sp)
81100940:	df000204 	addi	fp,sp,8
81100944:	e13fff15 	stw	r4,-4(fp)
	alt_u32 aux;

	aux = read_reg(SYNC_CTR_REG_OFFSET);
81100948:	01000284 	movi	r4,10
8110094c:	1100b380 	call	81100b38 <read_reg>
81100950:	e0bffe15 	stw	r2,-8(fp)

	if (value == BIT_OFF) {
81100954:	e0bfff17 	ldw	r2,-4(fp)
81100958:	1000051e 	bne	r2,zero,81100970 <sync_ctr_che_out_enable+0x3c>
	aux &= ~CTR_CHE_EN_MASK;
8110095c:	e0fffe17 	ldw	r3,-8(fp)
81100960:	00bffbc4 	movi	r2,-17
81100964:	1884703a 	and	r2,r3,r2
81100968:	e0bffe15 	stw	r2,-8(fp)
8110096c:	00000306 	br	8110097c <sync_ctr_che_out_enable+0x48>
	}
	else {
	aux |= CTR_CHE_EN_MASK;
81100970:	e0bffe17 	ldw	r2,-8(fp)
81100974:	10800414 	ori	r2,r2,16
81100978:	e0bffe15 	stw	r2,-8(fp)
	}

	write_reg(SYNC_CTR_REG_OFFSET, aux);
8110097c:	e17ffe17 	ldw	r5,-8(fp)
81100980:	01000284 	movi	r4,10
81100984:	1100ae40 	call	81100ae4 <write_reg>
 	return  TRUE;
81100988:	00800044 	movi	r2,1
}
8110098c:	e037883a 	mov	sp,fp
81100990:	dfc00117 	ldw	ra,4(sp)
81100994:	df000017 	ldw	fp,0(sp)
81100998:	dec00204 	addi	sp,sp,8
8110099c:	f800283a 	ret

811009a0 <sync_ctr_chf_out_enable>:

PUBLIC bool sync_ctr_chf_out_enable(bool value)
{
811009a0:	defffc04 	addi	sp,sp,-16
811009a4:	dfc00315 	stw	ra,12(sp)
811009a8:	df000215 	stw	fp,8(sp)
811009ac:	df000204 	addi	fp,sp,8
811009b0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 aux;

	aux = read_reg(SYNC_CTR_REG_OFFSET);
811009b4:	01000284 	movi	r4,10
811009b8:	1100b380 	call	81100b38 <read_reg>
811009bc:	e0bffe15 	stw	r2,-8(fp)

	if (value == BIT_OFF) {
811009c0:	e0bfff17 	ldw	r2,-4(fp)
811009c4:	1000051e 	bne	r2,zero,811009dc <sync_ctr_chf_out_enable+0x3c>
	aux &= ~CTR_CHF_EN_MASK;
811009c8:	e0fffe17 	ldw	r3,-8(fp)
811009cc:	00bff7c4 	movi	r2,-33
811009d0:	1884703a 	and	r2,r3,r2
811009d4:	e0bffe15 	stw	r2,-8(fp)
811009d8:	00000306 	br	811009e8 <sync_ctr_chf_out_enable+0x48>
	}
	else {
	aux |= CTR_CHF_EN_MASK;
811009dc:	e0bffe17 	ldw	r2,-8(fp)
811009e0:	10800814 	ori	r2,r2,32
811009e4:	e0bffe15 	stw	r2,-8(fp)
	}

	write_reg(SYNC_CTR_REG_OFFSET, aux);
811009e8:	e17ffe17 	ldw	r5,-8(fp)
811009ec:	01000284 	movi	r4,10
811009f0:	1100ae40 	call	81100ae4 <write_reg>
 	return  TRUE;
811009f4:	00800044 	movi	r2,1
}
811009f8:	e037883a 	mov	sp,fp
811009fc:	dfc00117 	ldw	ra,4(sp)
81100a00:	df000017 	ldw	fp,0(sp)
81100a04:	dec00204 	addi	sp,sp,8
81100a08:	f800283a 	ret

81100a0c <sync_ctr_chg_out_enable>:

PUBLIC bool sync_ctr_chg_out_enable(bool value)
{
81100a0c:	defffc04 	addi	sp,sp,-16
81100a10:	dfc00315 	stw	ra,12(sp)
81100a14:	df000215 	stw	fp,8(sp)
81100a18:	df000204 	addi	fp,sp,8
81100a1c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 aux;

	aux = read_reg(SYNC_CTR_REG_OFFSET);
81100a20:	01000284 	movi	r4,10
81100a24:	1100b380 	call	81100b38 <read_reg>
81100a28:	e0bffe15 	stw	r2,-8(fp)

	if (value == BIT_OFF) {
81100a2c:	e0bfff17 	ldw	r2,-4(fp)
81100a30:	1000051e 	bne	r2,zero,81100a48 <sync_ctr_chg_out_enable+0x3c>
	aux &= ~CTR_CHG_EN_MASK;
81100a34:	e0fffe17 	ldw	r3,-8(fp)
81100a38:	00bfefc4 	movi	r2,-65
81100a3c:	1884703a 	and	r2,r3,r2
81100a40:	e0bffe15 	stw	r2,-8(fp)
81100a44:	00000306 	br	81100a54 <sync_ctr_chg_out_enable+0x48>
	}
	else {
	aux |= CTR_CHG_EN_MASK;
81100a48:	e0bffe17 	ldw	r2,-8(fp)
81100a4c:	10801014 	ori	r2,r2,64
81100a50:	e0bffe15 	stw	r2,-8(fp)
	}

	write_reg(SYNC_CTR_REG_OFFSET, aux);
81100a54:	e17ffe17 	ldw	r5,-8(fp)
81100a58:	01000284 	movi	r4,10
81100a5c:	1100ae40 	call	81100ae4 <write_reg>
 	return  TRUE;
81100a60:	00800044 	movi	r2,1
}
81100a64:	e037883a 	mov	sp,fp
81100a68:	dfc00117 	ldw	ra,4(sp)
81100a6c:	df000017 	ldw	fp,0(sp)
81100a70:	dec00204 	addi	sp,sp,8
81100a74:	f800283a 	ret

81100a78 <sync_ctr_chh_out_enable>:

PUBLIC bool sync_ctr_chh_out_enable(bool value)
{
81100a78:	defffc04 	addi	sp,sp,-16
81100a7c:	dfc00315 	stw	ra,12(sp)
81100a80:	df000215 	stw	fp,8(sp)
81100a84:	df000204 	addi	fp,sp,8
81100a88:	e13fff15 	stw	r4,-4(fp)
	alt_u32 aux;

	aux = read_reg(SYNC_CTR_REG_OFFSET);
81100a8c:	01000284 	movi	r4,10
81100a90:	1100b380 	call	81100b38 <read_reg>
81100a94:	e0bffe15 	stw	r2,-8(fp)

	if (value == BIT_OFF) {
81100a98:	e0bfff17 	ldw	r2,-4(fp)
81100a9c:	1000051e 	bne	r2,zero,81100ab4 <sync_ctr_chh_out_enable+0x3c>
	aux &= ~CTR_CHH_EN_MASK;
81100aa0:	e0fffe17 	ldw	r3,-8(fp)
81100aa4:	00bfdfc4 	movi	r2,-129
81100aa8:	1884703a 	and	r2,r3,r2
81100aac:	e0bffe15 	stw	r2,-8(fp)
81100ab0:	00000306 	br	81100ac0 <sync_ctr_chh_out_enable+0x48>
	}
	else {
	aux |= CTR_CHH_EN_MASK;
81100ab4:	e0bffe17 	ldw	r2,-8(fp)
81100ab8:	10802014 	ori	r2,r2,128
81100abc:	e0bffe15 	stw	r2,-8(fp)
	}

	write_reg(SYNC_CTR_REG_OFFSET, aux);
81100ac0:	e17ffe17 	ldw	r5,-8(fp)
81100ac4:	01000284 	movi	r4,10
81100ac8:	1100ae40 	call	81100ae4 <write_reg>
 	return  TRUE;
81100acc:	00800044 	movi	r2,1
}
81100ad0:	e037883a 	mov	sp,fp
81100ad4:	dfc00117 	ldw	ra,4(sp)
81100ad8:	df000017 	ldw	fp,0(sp)
81100adc:	dec00204 	addi	sp,sp,8
81100ae0:	f800283a 	ret

81100ae4 <write_reg>:
 * @param [in] alt_u32 value
 *
 * @retval TRUE -> sucesso
 */
PRIVATE bool write_reg(alt_u32 offset, alt_u32 value)
{
81100ae4:	defffc04 	addi	sp,sp,-16
81100ae8:	df000315 	stw	fp,12(sp)
81100aec:	df000304 	addi	fp,sp,12
81100af0:	e13ffe15 	stw	r4,-8(fp)
81100af4:	e17fff15 	stw	r5,-4(fp)
	alt_u32 *p_addr = (alt_u32 *) SYNC_BASE_ADDR;
81100af8:	00a00034 	movhi	r2,32768
81100afc:	10810004 	addi	r2,r2,1024
81100b00:	e0bffd15 	stw	r2,-12(fp)
	*(p_addr + offset) = (alt_u32) value;
81100b04:	e0bffe17 	ldw	r2,-8(fp)
81100b08:	1085883a 	add	r2,r2,r2
81100b0c:	1085883a 	add	r2,r2,r2
81100b10:	1007883a 	mov	r3,r2
81100b14:	e0bffd17 	ldw	r2,-12(fp)
81100b18:	10c5883a 	add	r2,r2,r3
81100b1c:	e0ffff17 	ldw	r3,-4(fp)
81100b20:	10c00015 	stw	r3,0(r2)
	return  TRUE;
81100b24:	00800044 	movi	r2,1
}
81100b28:	e037883a 	mov	sp,fp
81100b2c:	df000017 	ldw	fp,0(sp)
81100b30:	dec00104 	addi	sp,sp,4
81100b34:	f800283a 	ret

81100b38 <read_reg>:
 * @param [in] alt_u32 offset
  *
 * @retval alt_u32 value -> reg
 */
PRIVATE alt_u32 read_reg(alt_u32 offset)
{
81100b38:	defffc04 	addi	sp,sp,-16
81100b3c:	df000315 	stw	fp,12(sp)
81100b40:	df000304 	addi	fp,sp,12
81100b44:	e13fff15 	stw	r4,-4(fp)
	alt_u32 value;

    alt_u32 *p_addr = (alt_u32 *) SYNC_BASE_ADDR;
81100b48:	00a00034 	movhi	r2,32768
81100b4c:	10810004 	addi	r2,r2,1024
81100b50:	e0bffd15 	stw	r2,-12(fp)
 	value = *(p_addr + (alt_u32)offset);
81100b54:	e0bfff17 	ldw	r2,-4(fp)
81100b58:	1085883a 	add	r2,r2,r2
81100b5c:	1085883a 	add	r2,r2,r2
81100b60:	1007883a 	mov	r3,r2
81100b64:	e0bffd17 	ldw	r2,-12(fp)
81100b68:	10c5883a 	add	r2,r2,r3
81100b6c:	10800017 	ldw	r2,0(r2)
81100b70:	e0bffe15 	stw	r2,-8(fp)
	return value;
81100b74:	e0bffe17 	ldw	r2,-8(fp)
}
81100b78:	e037883a 	mov	sp,fp
81100b7c:	df000017 	ldw	fp,0(sp)
81100b80:	dec00104 	addi	sp,sp,4
81100b84:	f800283a 	ret

81100b88 <main>:

#include <stdio.h>
#include "driver/sync/sync.h"

int main()
{
81100b88:	defffd04 	addi	sp,sp,-12
81100b8c:	dfc00215 	stw	ra,8(sp)
81100b90:	df000115 	stw	fp,4(sp)
81100b94:	df000104 	addi	fp,sp,4
  bool flag;

  printf("Hello from Nios II!\n");
81100b98:	01204474 	movhi	r4,33041
81100b9c:	21248904 	addi	r4,r4,-28124
81100ba0:	1100c840 	call	81100c84 <puts>

  flag = sync_status_le_int_extn();
81100ba4:	110027c0 	call	8110027c <sync_status_le_int_extn>
81100ba8:	e0bfff15 	stw	r2,-4(fp)

  return 0;
81100bac:	0005883a 	mov	r2,zero
}
81100bb0:	e037883a 	mov	sp,fp
81100bb4:	dfc00117 	ldw	ra,4(sp)
81100bb8:	df000017 	ldw	fp,0(sp)
81100bbc:	dec00204 	addi	sp,sp,8
81100bc0:	f800283a 	ret

81100bc4 <_puts_r>:
81100bc4:	defff604 	addi	sp,sp,-40
81100bc8:	dc000715 	stw	r16,28(sp)
81100bcc:	2021883a 	mov	r16,r4
81100bd0:	2809883a 	mov	r4,r5
81100bd4:	dc400815 	stw	r17,32(sp)
81100bd8:	dfc00915 	stw	ra,36(sp)
81100bdc:	2823883a 	mov	r17,r5
81100be0:	1100c980 	call	81100c98 <strlen>
81100be4:	10c00044 	addi	r3,r2,1
81100be8:	d8800115 	stw	r2,4(sp)
81100bec:	00a04474 	movhi	r2,33041
81100bf0:	10a48e04 	addi	r2,r2,-28104
81100bf4:	d8800215 	stw	r2,8(sp)
81100bf8:	00800044 	movi	r2,1
81100bfc:	d8800315 	stw	r2,12(sp)
81100c00:	00800084 	movi	r2,2
81100c04:	dc400015 	stw	r17,0(sp)
81100c08:	d8c00615 	stw	r3,24(sp)
81100c0c:	dec00415 	stw	sp,16(sp)
81100c10:	d8800515 	stw	r2,20(sp)
81100c14:	80000226 	beq	r16,zero,81100c20 <_puts_r+0x5c>
81100c18:	80800e17 	ldw	r2,56(r16)
81100c1c:	10001426 	beq	r2,zero,81100c70 <_puts_r+0xac>
81100c20:	81400217 	ldw	r5,8(r16)
81100c24:	2880030b 	ldhu	r2,12(r5)
81100c28:	10c8000c 	andi	r3,r2,8192
81100c2c:	1800061e 	bne	r3,zero,81100c48 <_puts_r+0x84>
81100c30:	29001917 	ldw	r4,100(r5)
81100c34:	00f7ffc4 	movi	r3,-8193
81100c38:	10880014 	ori	r2,r2,8192
81100c3c:	20c6703a 	and	r3,r4,r3
81100c40:	2880030d 	sth	r2,12(r5)
81100c44:	28c01915 	stw	r3,100(r5)
81100c48:	d9800404 	addi	r6,sp,16
81100c4c:	8009883a 	mov	r4,r16
81100c50:	11010d00 	call	811010d0 <__sfvwrite_r>
81100c54:	1000091e 	bne	r2,zero,81100c7c <_puts_r+0xb8>
81100c58:	00800284 	movi	r2,10
81100c5c:	dfc00917 	ldw	ra,36(sp)
81100c60:	dc400817 	ldw	r17,32(sp)
81100c64:	dc000717 	ldw	r16,28(sp)
81100c68:	dec00a04 	addi	sp,sp,40
81100c6c:	f800283a 	ret
81100c70:	8009883a 	mov	r4,r16
81100c74:	11010800 	call	81101080 <__sinit>
81100c78:	003fe906 	br	81100c20 <__reset+0xfb0e0c20>
81100c7c:	00bfffc4 	movi	r2,-1
81100c80:	003ff606 	br	81100c5c <__reset+0xfb0e0c5c>

81100c84 <puts>:
81100c84:	00a04474 	movhi	r2,33041
81100c88:	10abe904 	addi	r2,r2,-20572
81100c8c:	200b883a 	mov	r5,r4
81100c90:	11000017 	ldw	r4,0(r2)
81100c94:	1100bc41 	jmpi	81100bc4 <_puts_r>

81100c98 <strlen>:
81100c98:	208000cc 	andi	r2,r4,3
81100c9c:	10002026 	beq	r2,zero,81100d20 <strlen+0x88>
81100ca0:	20800007 	ldb	r2,0(r4)
81100ca4:	10002026 	beq	r2,zero,81100d28 <strlen+0x90>
81100ca8:	2005883a 	mov	r2,r4
81100cac:	00000206 	br	81100cb8 <strlen+0x20>
81100cb0:	10c00007 	ldb	r3,0(r2)
81100cb4:	18001826 	beq	r3,zero,81100d18 <strlen+0x80>
81100cb8:	10800044 	addi	r2,r2,1
81100cbc:	10c000cc 	andi	r3,r2,3
81100cc0:	183ffb1e 	bne	r3,zero,81100cb0 <__reset+0xfb0e0cb0>
81100cc4:	10c00017 	ldw	r3,0(r2)
81100cc8:	01ffbff4 	movhi	r7,65279
81100ccc:	39ffbfc4 	addi	r7,r7,-257
81100cd0:	00ca303a 	nor	r5,zero,r3
81100cd4:	01a02074 	movhi	r6,32897
81100cd8:	19c7883a 	add	r3,r3,r7
81100cdc:	31a02004 	addi	r6,r6,-32640
81100ce0:	1946703a 	and	r3,r3,r5
81100ce4:	1986703a 	and	r3,r3,r6
81100ce8:	1800091e 	bne	r3,zero,81100d10 <strlen+0x78>
81100cec:	10800104 	addi	r2,r2,4
81100cf0:	10c00017 	ldw	r3,0(r2)
81100cf4:	19cb883a 	add	r5,r3,r7
81100cf8:	00c6303a 	nor	r3,zero,r3
81100cfc:	28c6703a 	and	r3,r5,r3
81100d00:	1986703a 	and	r3,r3,r6
81100d04:	183ff926 	beq	r3,zero,81100cec <__reset+0xfb0e0cec>
81100d08:	00000106 	br	81100d10 <strlen+0x78>
81100d0c:	10800044 	addi	r2,r2,1
81100d10:	10c00007 	ldb	r3,0(r2)
81100d14:	183ffd1e 	bne	r3,zero,81100d0c <__reset+0xfb0e0d0c>
81100d18:	1105c83a 	sub	r2,r2,r4
81100d1c:	f800283a 	ret
81100d20:	2005883a 	mov	r2,r4
81100d24:	003fe706 	br	81100cc4 <__reset+0xfb0e0cc4>
81100d28:	0005883a 	mov	r2,zero
81100d2c:	f800283a 	ret

81100d30 <__fp_unlock>:
81100d30:	0005883a 	mov	r2,zero
81100d34:	f800283a 	ret

81100d38 <_cleanup_r>:
81100d38:	01604434 	movhi	r5,33040
81100d3c:	294b3304 	addi	r5,r5,11468
81100d40:	11016501 	jmpi	81101650 <_fwalk_reent>

81100d44 <__sinit.part.1>:
81100d44:	defff704 	addi	sp,sp,-36
81100d48:	00e04434 	movhi	r3,33040
81100d4c:	dfc00815 	stw	ra,32(sp)
81100d50:	ddc00715 	stw	r23,28(sp)
81100d54:	dd800615 	stw	r22,24(sp)
81100d58:	dd400515 	stw	r21,20(sp)
81100d5c:	dd000415 	stw	r20,16(sp)
81100d60:	dcc00315 	stw	r19,12(sp)
81100d64:	dc800215 	stw	r18,8(sp)
81100d68:	dc400115 	stw	r17,4(sp)
81100d6c:	dc000015 	stw	r16,0(sp)
81100d70:	18c34e04 	addi	r3,r3,3384
81100d74:	24000117 	ldw	r16,4(r4)
81100d78:	20c00f15 	stw	r3,60(r4)
81100d7c:	2080bb04 	addi	r2,r4,748
81100d80:	00c000c4 	movi	r3,3
81100d84:	20c0b915 	stw	r3,740(r4)
81100d88:	2080ba15 	stw	r2,744(r4)
81100d8c:	2000b815 	stw	zero,736(r4)
81100d90:	05c00204 	movi	r23,8
81100d94:	00800104 	movi	r2,4
81100d98:	2025883a 	mov	r18,r4
81100d9c:	b80d883a 	mov	r6,r23
81100da0:	81001704 	addi	r4,r16,92
81100da4:	000b883a 	mov	r5,zero
81100da8:	80000015 	stw	zero,0(r16)
81100dac:	80000115 	stw	zero,4(r16)
81100db0:	80000215 	stw	zero,8(r16)
81100db4:	8080030d 	sth	r2,12(r16)
81100db8:	80001915 	stw	zero,100(r16)
81100dbc:	8000038d 	sth	zero,14(r16)
81100dc0:	80000415 	stw	zero,16(r16)
81100dc4:	80000515 	stw	zero,20(r16)
81100dc8:	80000615 	stw	zero,24(r16)
81100dcc:	11022a80 	call	811022a8 <memset>
81100dd0:	05a04434 	movhi	r22,33040
81100dd4:	94400217 	ldw	r17,8(r18)
81100dd8:	05604434 	movhi	r21,33040
81100ddc:	05204434 	movhi	r20,33040
81100de0:	04e04434 	movhi	r19,33040
81100de4:	b58a6204 	addi	r22,r22,10632
81100de8:	ad4a7904 	addi	r21,r21,10724
81100dec:	a50a9804 	addi	r20,r20,10848
81100df0:	9ccaaf04 	addi	r19,r19,10940
81100df4:	85800815 	stw	r22,32(r16)
81100df8:	85400915 	stw	r21,36(r16)
81100dfc:	85000a15 	stw	r20,40(r16)
81100e00:	84c00b15 	stw	r19,44(r16)
81100e04:	84000715 	stw	r16,28(r16)
81100e08:	00800284 	movi	r2,10
81100e0c:	8880030d 	sth	r2,12(r17)
81100e10:	00800044 	movi	r2,1
81100e14:	b80d883a 	mov	r6,r23
81100e18:	89001704 	addi	r4,r17,92
81100e1c:	000b883a 	mov	r5,zero
81100e20:	88000015 	stw	zero,0(r17)
81100e24:	88000115 	stw	zero,4(r17)
81100e28:	88000215 	stw	zero,8(r17)
81100e2c:	88001915 	stw	zero,100(r17)
81100e30:	8880038d 	sth	r2,14(r17)
81100e34:	88000415 	stw	zero,16(r17)
81100e38:	88000515 	stw	zero,20(r17)
81100e3c:	88000615 	stw	zero,24(r17)
81100e40:	11022a80 	call	811022a8 <memset>
81100e44:	94000317 	ldw	r16,12(r18)
81100e48:	00800484 	movi	r2,18
81100e4c:	8c400715 	stw	r17,28(r17)
81100e50:	8d800815 	stw	r22,32(r17)
81100e54:	8d400915 	stw	r21,36(r17)
81100e58:	8d000a15 	stw	r20,40(r17)
81100e5c:	8cc00b15 	stw	r19,44(r17)
81100e60:	8080030d 	sth	r2,12(r16)
81100e64:	00800084 	movi	r2,2
81100e68:	80000015 	stw	zero,0(r16)
81100e6c:	80000115 	stw	zero,4(r16)
81100e70:	80000215 	stw	zero,8(r16)
81100e74:	80001915 	stw	zero,100(r16)
81100e78:	8080038d 	sth	r2,14(r16)
81100e7c:	80000415 	stw	zero,16(r16)
81100e80:	80000515 	stw	zero,20(r16)
81100e84:	80000615 	stw	zero,24(r16)
81100e88:	b80d883a 	mov	r6,r23
81100e8c:	000b883a 	mov	r5,zero
81100e90:	81001704 	addi	r4,r16,92
81100e94:	11022a80 	call	811022a8 <memset>
81100e98:	00800044 	movi	r2,1
81100e9c:	84000715 	stw	r16,28(r16)
81100ea0:	85800815 	stw	r22,32(r16)
81100ea4:	85400915 	stw	r21,36(r16)
81100ea8:	85000a15 	stw	r20,40(r16)
81100eac:	84c00b15 	stw	r19,44(r16)
81100eb0:	90800e15 	stw	r2,56(r18)
81100eb4:	dfc00817 	ldw	ra,32(sp)
81100eb8:	ddc00717 	ldw	r23,28(sp)
81100ebc:	dd800617 	ldw	r22,24(sp)
81100ec0:	dd400517 	ldw	r21,20(sp)
81100ec4:	dd000417 	ldw	r20,16(sp)
81100ec8:	dcc00317 	ldw	r19,12(sp)
81100ecc:	dc800217 	ldw	r18,8(sp)
81100ed0:	dc400117 	ldw	r17,4(sp)
81100ed4:	dc000017 	ldw	r16,0(sp)
81100ed8:	dec00904 	addi	sp,sp,36
81100edc:	f800283a 	ret

81100ee0 <__fp_lock>:
81100ee0:	0005883a 	mov	r2,zero
81100ee4:	f800283a 	ret

81100ee8 <__sfmoreglue>:
81100ee8:	defffc04 	addi	sp,sp,-16
81100eec:	dc400115 	stw	r17,4(sp)
81100ef0:	2c7fffc4 	addi	r17,r5,-1
81100ef4:	8c401a24 	muli	r17,r17,104
81100ef8:	dc800215 	stw	r18,8(sp)
81100efc:	2825883a 	mov	r18,r5
81100f00:	89401d04 	addi	r5,r17,116
81100f04:	dc000015 	stw	r16,0(sp)
81100f08:	dfc00315 	stw	ra,12(sp)
81100f0c:	11017140 	call	81101714 <_malloc_r>
81100f10:	1021883a 	mov	r16,r2
81100f14:	10000726 	beq	r2,zero,81100f34 <__sfmoreglue+0x4c>
81100f18:	11000304 	addi	r4,r2,12
81100f1c:	10000015 	stw	zero,0(r2)
81100f20:	14800115 	stw	r18,4(r2)
81100f24:	11000215 	stw	r4,8(r2)
81100f28:	89801a04 	addi	r6,r17,104
81100f2c:	000b883a 	mov	r5,zero
81100f30:	11022a80 	call	811022a8 <memset>
81100f34:	8005883a 	mov	r2,r16
81100f38:	dfc00317 	ldw	ra,12(sp)
81100f3c:	dc800217 	ldw	r18,8(sp)
81100f40:	dc400117 	ldw	r17,4(sp)
81100f44:	dc000017 	ldw	r16,0(sp)
81100f48:	dec00404 	addi	sp,sp,16
81100f4c:	f800283a 	ret

81100f50 <__sfp>:
81100f50:	defffb04 	addi	sp,sp,-20
81100f54:	dc000015 	stw	r16,0(sp)
81100f58:	04204474 	movhi	r16,33041
81100f5c:	842be804 	addi	r16,r16,-20576
81100f60:	dcc00315 	stw	r19,12(sp)
81100f64:	2027883a 	mov	r19,r4
81100f68:	81000017 	ldw	r4,0(r16)
81100f6c:	dfc00415 	stw	ra,16(sp)
81100f70:	dc800215 	stw	r18,8(sp)
81100f74:	20800e17 	ldw	r2,56(r4)
81100f78:	dc400115 	stw	r17,4(sp)
81100f7c:	1000021e 	bne	r2,zero,81100f88 <__sfp+0x38>
81100f80:	1100d440 	call	81100d44 <__sinit.part.1>
81100f84:	81000017 	ldw	r4,0(r16)
81100f88:	2480b804 	addi	r18,r4,736
81100f8c:	047fffc4 	movi	r17,-1
81100f90:	91000117 	ldw	r4,4(r18)
81100f94:	94000217 	ldw	r16,8(r18)
81100f98:	213fffc4 	addi	r4,r4,-1
81100f9c:	20000a16 	blt	r4,zero,81100fc8 <__sfp+0x78>
81100fa0:	8080030f 	ldh	r2,12(r16)
81100fa4:	10000c26 	beq	r2,zero,81100fd8 <__sfp+0x88>
81100fa8:	80c01d04 	addi	r3,r16,116
81100fac:	00000206 	br	81100fb8 <__sfp+0x68>
81100fb0:	18bfe60f 	ldh	r2,-104(r3)
81100fb4:	10000826 	beq	r2,zero,81100fd8 <__sfp+0x88>
81100fb8:	213fffc4 	addi	r4,r4,-1
81100fbc:	1c3ffd04 	addi	r16,r3,-12
81100fc0:	18c01a04 	addi	r3,r3,104
81100fc4:	247ffa1e 	bne	r4,r17,81100fb0 <__reset+0xfb0e0fb0>
81100fc8:	90800017 	ldw	r2,0(r18)
81100fcc:	10001d26 	beq	r2,zero,81101044 <__sfp+0xf4>
81100fd0:	1025883a 	mov	r18,r2
81100fd4:	003fee06 	br	81100f90 <__reset+0xfb0e0f90>
81100fd8:	00bfffc4 	movi	r2,-1
81100fdc:	8080038d 	sth	r2,14(r16)
81100fe0:	00800044 	movi	r2,1
81100fe4:	8080030d 	sth	r2,12(r16)
81100fe8:	80001915 	stw	zero,100(r16)
81100fec:	80000015 	stw	zero,0(r16)
81100ff0:	80000215 	stw	zero,8(r16)
81100ff4:	80000115 	stw	zero,4(r16)
81100ff8:	80000415 	stw	zero,16(r16)
81100ffc:	80000515 	stw	zero,20(r16)
81101000:	80000615 	stw	zero,24(r16)
81101004:	01800204 	movi	r6,8
81101008:	000b883a 	mov	r5,zero
8110100c:	81001704 	addi	r4,r16,92
81101010:	11022a80 	call	811022a8 <memset>
81101014:	8005883a 	mov	r2,r16
81101018:	80000c15 	stw	zero,48(r16)
8110101c:	80000d15 	stw	zero,52(r16)
81101020:	80001115 	stw	zero,68(r16)
81101024:	80001215 	stw	zero,72(r16)
81101028:	dfc00417 	ldw	ra,16(sp)
8110102c:	dcc00317 	ldw	r19,12(sp)
81101030:	dc800217 	ldw	r18,8(sp)
81101034:	dc400117 	ldw	r17,4(sp)
81101038:	dc000017 	ldw	r16,0(sp)
8110103c:	dec00504 	addi	sp,sp,20
81101040:	f800283a 	ret
81101044:	01400104 	movi	r5,4
81101048:	9809883a 	mov	r4,r19
8110104c:	1100ee80 	call	81100ee8 <__sfmoreglue>
81101050:	90800015 	stw	r2,0(r18)
81101054:	103fde1e 	bne	r2,zero,81100fd0 <__reset+0xfb0e0fd0>
81101058:	00800304 	movi	r2,12
8110105c:	98800015 	stw	r2,0(r19)
81101060:	0005883a 	mov	r2,zero
81101064:	003ff006 	br	81101028 <__reset+0xfb0e1028>

81101068 <_cleanup>:
81101068:	00a04474 	movhi	r2,33041
8110106c:	10abe804 	addi	r2,r2,-20576
81101070:	11000017 	ldw	r4,0(r2)
81101074:	01604434 	movhi	r5,33040
81101078:	294b3304 	addi	r5,r5,11468
8110107c:	11016501 	jmpi	81101650 <_fwalk_reent>

81101080 <__sinit>:
81101080:	20800e17 	ldw	r2,56(r4)
81101084:	10000126 	beq	r2,zero,8110108c <__sinit+0xc>
81101088:	f800283a 	ret
8110108c:	1100d441 	jmpi	81100d44 <__sinit.part.1>

81101090 <__sfp_lock_acquire>:
81101090:	f800283a 	ret

81101094 <__sfp_lock_release>:
81101094:	f800283a 	ret

81101098 <__sinit_lock_acquire>:
81101098:	f800283a 	ret

8110109c <__sinit_lock_release>:
8110109c:	f800283a 	ret

811010a0 <__fp_lock_all>:
811010a0:	00a04474 	movhi	r2,33041
811010a4:	10abe904 	addi	r2,r2,-20572
811010a8:	11000017 	ldw	r4,0(r2)
811010ac:	01604434 	movhi	r5,33040
811010b0:	2943b804 	addi	r5,r5,3808
811010b4:	110158c1 	jmpi	8110158c <_fwalk>

811010b8 <__fp_unlock_all>:
811010b8:	00a04474 	movhi	r2,33041
811010bc:	10abe904 	addi	r2,r2,-20572
811010c0:	11000017 	ldw	r4,0(r2)
811010c4:	01604434 	movhi	r5,33040
811010c8:	29434c04 	addi	r5,r5,3376
811010cc:	110158c1 	jmpi	8110158c <_fwalk>

811010d0 <__sfvwrite_r>:
811010d0:	30800217 	ldw	r2,8(r6)
811010d4:	10006726 	beq	r2,zero,81101274 <__sfvwrite_r+0x1a4>
811010d8:	28c0030b 	ldhu	r3,12(r5)
811010dc:	defff404 	addi	sp,sp,-48
811010e0:	dd400715 	stw	r21,28(sp)
811010e4:	dd000615 	stw	r20,24(sp)
811010e8:	dc000215 	stw	r16,8(sp)
811010ec:	dfc00b15 	stw	ra,44(sp)
811010f0:	df000a15 	stw	fp,40(sp)
811010f4:	ddc00915 	stw	r23,36(sp)
811010f8:	dd800815 	stw	r22,32(sp)
811010fc:	dcc00515 	stw	r19,20(sp)
81101100:	dc800415 	stw	r18,16(sp)
81101104:	dc400315 	stw	r17,12(sp)
81101108:	1880020c 	andi	r2,r3,8
8110110c:	2821883a 	mov	r16,r5
81101110:	202b883a 	mov	r21,r4
81101114:	3029883a 	mov	r20,r6
81101118:	10002726 	beq	r2,zero,811011b8 <__sfvwrite_r+0xe8>
8110111c:	28800417 	ldw	r2,16(r5)
81101120:	10002526 	beq	r2,zero,811011b8 <__sfvwrite_r+0xe8>
81101124:	1880008c 	andi	r2,r3,2
81101128:	a4400017 	ldw	r17,0(r20)
8110112c:	10002a26 	beq	r2,zero,811011d8 <__sfvwrite_r+0x108>
81101130:	05a00034 	movhi	r22,32768
81101134:	0027883a 	mov	r19,zero
81101138:	0025883a 	mov	r18,zero
8110113c:	b5bf0004 	addi	r22,r22,-1024
81101140:	980d883a 	mov	r6,r19
81101144:	a809883a 	mov	r4,r21
81101148:	90004626 	beq	r18,zero,81101264 <__sfvwrite_r+0x194>
8110114c:	900f883a 	mov	r7,r18
81101150:	b480022e 	bgeu	r22,r18,8110115c <__sfvwrite_r+0x8c>
81101154:	01e00034 	movhi	r7,32768
81101158:	39ff0004 	addi	r7,r7,-1024
8110115c:	80800917 	ldw	r2,36(r16)
81101160:	81400717 	ldw	r5,28(r16)
81101164:	103ee83a 	callr	r2
81101168:	0080570e 	bge	zero,r2,811012c8 <__sfvwrite_r+0x1f8>
8110116c:	a0c00217 	ldw	r3,8(r20)
81101170:	98a7883a 	add	r19,r19,r2
81101174:	90a5c83a 	sub	r18,r18,r2
81101178:	1885c83a 	sub	r2,r3,r2
8110117c:	a0800215 	stw	r2,8(r20)
81101180:	103fef1e 	bne	r2,zero,81101140 <__reset+0xfb0e1140>
81101184:	0005883a 	mov	r2,zero
81101188:	dfc00b17 	ldw	ra,44(sp)
8110118c:	df000a17 	ldw	fp,40(sp)
81101190:	ddc00917 	ldw	r23,36(sp)
81101194:	dd800817 	ldw	r22,32(sp)
81101198:	dd400717 	ldw	r21,28(sp)
8110119c:	dd000617 	ldw	r20,24(sp)
811011a0:	dcc00517 	ldw	r19,20(sp)
811011a4:	dc800417 	ldw	r18,16(sp)
811011a8:	dc400317 	ldw	r17,12(sp)
811011ac:	dc000217 	ldw	r16,8(sp)
811011b0:	dec00c04 	addi	sp,sp,48
811011b4:	f800283a 	ret
811011b8:	800b883a 	mov	r5,r16
811011bc:	a809883a 	mov	r4,r21
811011c0:	1102b240 	call	81102b24 <__swsetup_r>
811011c4:	1000eb1e 	bne	r2,zero,81101574 <__sfvwrite_r+0x4a4>
811011c8:	80c0030b 	ldhu	r3,12(r16)
811011cc:	a4400017 	ldw	r17,0(r20)
811011d0:	1880008c 	andi	r2,r3,2
811011d4:	103fd61e 	bne	r2,zero,81101130 <__reset+0xfb0e1130>
811011d8:	1880004c 	andi	r2,r3,1
811011dc:	10003f1e 	bne	r2,zero,811012dc <__sfvwrite_r+0x20c>
811011e0:	0039883a 	mov	fp,zero
811011e4:	0025883a 	mov	r18,zero
811011e8:	90001a26 	beq	r18,zero,81101254 <__sfvwrite_r+0x184>
811011ec:	1880800c 	andi	r2,r3,512
811011f0:	84c00217 	ldw	r19,8(r16)
811011f4:	10002126 	beq	r2,zero,8110127c <__sfvwrite_r+0x1ac>
811011f8:	982f883a 	mov	r23,r19
811011fc:	94c09336 	bltu	r18,r19,8110144c <__sfvwrite_r+0x37c>
81101200:	1881200c 	andi	r2,r3,1152
81101204:	10009e1e 	bne	r2,zero,81101480 <__sfvwrite_r+0x3b0>
81101208:	81000017 	ldw	r4,0(r16)
8110120c:	b80d883a 	mov	r6,r23
81101210:	e00b883a 	mov	r5,fp
81101214:	110214c0 	call	8110214c <memmove>
81101218:	80c00217 	ldw	r3,8(r16)
8110121c:	81000017 	ldw	r4,0(r16)
81101220:	9005883a 	mov	r2,r18
81101224:	1ce7c83a 	sub	r19,r3,r19
81101228:	25cf883a 	add	r7,r4,r23
8110122c:	84c00215 	stw	r19,8(r16)
81101230:	81c00015 	stw	r7,0(r16)
81101234:	a0c00217 	ldw	r3,8(r20)
81101238:	e0b9883a 	add	fp,fp,r2
8110123c:	90a5c83a 	sub	r18,r18,r2
81101240:	18a7c83a 	sub	r19,r3,r2
81101244:	a4c00215 	stw	r19,8(r20)
81101248:	983fce26 	beq	r19,zero,81101184 <__reset+0xfb0e1184>
8110124c:	80c0030b 	ldhu	r3,12(r16)
81101250:	903fe61e 	bne	r18,zero,811011ec <__reset+0xfb0e11ec>
81101254:	8f000017 	ldw	fp,0(r17)
81101258:	8c800117 	ldw	r18,4(r17)
8110125c:	8c400204 	addi	r17,r17,8
81101260:	003fe106 	br	811011e8 <__reset+0xfb0e11e8>
81101264:	8cc00017 	ldw	r19,0(r17)
81101268:	8c800117 	ldw	r18,4(r17)
8110126c:	8c400204 	addi	r17,r17,8
81101270:	003fb306 	br	81101140 <__reset+0xfb0e1140>
81101274:	0005883a 	mov	r2,zero
81101278:	f800283a 	ret
8110127c:	81000017 	ldw	r4,0(r16)
81101280:	80800417 	ldw	r2,16(r16)
81101284:	11005736 	bltu	r2,r4,811013e4 <__sfvwrite_r+0x314>
81101288:	85c00517 	ldw	r23,20(r16)
8110128c:	95c05536 	bltu	r18,r23,811013e4 <__sfvwrite_r+0x314>
81101290:	00a00034 	movhi	r2,32768
81101294:	10bfffc4 	addi	r2,r2,-1
81101298:	9009883a 	mov	r4,r18
8110129c:	1480012e 	bgeu	r2,r18,811012a4 <__sfvwrite_r+0x1d4>
811012a0:	1009883a 	mov	r4,r2
811012a4:	b80b883a 	mov	r5,r23
811012a8:	11037d80 	call	811037d8 <__divsi3>
811012ac:	15cf383a 	mul	r7,r2,r23
811012b0:	81400717 	ldw	r5,28(r16)
811012b4:	80800917 	ldw	r2,36(r16)
811012b8:	e00d883a 	mov	r6,fp
811012bc:	a809883a 	mov	r4,r21
811012c0:	103ee83a 	callr	r2
811012c4:	00bfdb16 	blt	zero,r2,81101234 <__reset+0xfb0e1234>
811012c8:	8080030b 	ldhu	r2,12(r16)
811012cc:	10801014 	ori	r2,r2,64
811012d0:	8080030d 	sth	r2,12(r16)
811012d4:	00bfffc4 	movi	r2,-1
811012d8:	003fab06 	br	81101188 <__reset+0xfb0e1188>
811012dc:	0027883a 	mov	r19,zero
811012e0:	0011883a 	mov	r8,zero
811012e4:	0039883a 	mov	fp,zero
811012e8:	0025883a 	mov	r18,zero
811012ec:	90001f26 	beq	r18,zero,8110136c <__sfvwrite_r+0x29c>
811012f0:	40005a26 	beq	r8,zero,8110145c <__sfvwrite_r+0x38c>
811012f4:	982d883a 	mov	r22,r19
811012f8:	94c0012e 	bgeu	r18,r19,81101300 <__sfvwrite_r+0x230>
811012fc:	902d883a 	mov	r22,r18
81101300:	81000017 	ldw	r4,0(r16)
81101304:	80800417 	ldw	r2,16(r16)
81101308:	b02f883a 	mov	r23,r22
8110130c:	81c00517 	ldw	r7,20(r16)
81101310:	1100032e 	bgeu	r2,r4,81101320 <__sfvwrite_r+0x250>
81101314:	80c00217 	ldw	r3,8(r16)
81101318:	38c7883a 	add	r3,r7,r3
8110131c:	1d801816 	blt	r3,r22,81101380 <__sfvwrite_r+0x2b0>
81101320:	b1c03e16 	blt	r22,r7,8110141c <__sfvwrite_r+0x34c>
81101324:	80800917 	ldw	r2,36(r16)
81101328:	81400717 	ldw	r5,28(r16)
8110132c:	e00d883a 	mov	r6,fp
81101330:	da000115 	stw	r8,4(sp)
81101334:	a809883a 	mov	r4,r21
81101338:	103ee83a 	callr	r2
8110133c:	102f883a 	mov	r23,r2
81101340:	da000117 	ldw	r8,4(sp)
81101344:	00bfe00e 	bge	zero,r2,811012c8 <__reset+0xfb0e12c8>
81101348:	9de7c83a 	sub	r19,r19,r23
8110134c:	98001f26 	beq	r19,zero,811013cc <__sfvwrite_r+0x2fc>
81101350:	a0800217 	ldw	r2,8(r20)
81101354:	e5f9883a 	add	fp,fp,r23
81101358:	95e5c83a 	sub	r18,r18,r23
8110135c:	15efc83a 	sub	r23,r2,r23
81101360:	a5c00215 	stw	r23,8(r20)
81101364:	b83f8726 	beq	r23,zero,81101184 <__reset+0xfb0e1184>
81101368:	903fe11e 	bne	r18,zero,811012f0 <__reset+0xfb0e12f0>
8110136c:	8f000017 	ldw	fp,0(r17)
81101370:	8c800117 	ldw	r18,4(r17)
81101374:	0011883a 	mov	r8,zero
81101378:	8c400204 	addi	r17,r17,8
8110137c:	003fdb06 	br	811012ec <__reset+0xfb0e12ec>
81101380:	180d883a 	mov	r6,r3
81101384:	e00b883a 	mov	r5,fp
81101388:	da000115 	stw	r8,4(sp)
8110138c:	d8c00015 	stw	r3,0(sp)
81101390:	110214c0 	call	8110214c <memmove>
81101394:	d8c00017 	ldw	r3,0(sp)
81101398:	80800017 	ldw	r2,0(r16)
8110139c:	800b883a 	mov	r5,r16
811013a0:	a809883a 	mov	r4,r21
811013a4:	10c5883a 	add	r2,r2,r3
811013a8:	80800015 	stw	r2,0(r16)
811013ac:	d8c00015 	stw	r3,0(sp)
811013b0:	1102fec0 	call	81102fec <_fflush_r>
811013b4:	d8c00017 	ldw	r3,0(sp)
811013b8:	da000117 	ldw	r8,4(sp)
811013bc:	103fc21e 	bne	r2,zero,811012c8 <__reset+0xfb0e12c8>
811013c0:	182f883a 	mov	r23,r3
811013c4:	9de7c83a 	sub	r19,r19,r23
811013c8:	983fe11e 	bne	r19,zero,81101350 <__reset+0xfb0e1350>
811013cc:	800b883a 	mov	r5,r16
811013d0:	a809883a 	mov	r4,r21
811013d4:	1102fec0 	call	81102fec <_fflush_r>
811013d8:	103fbb1e 	bne	r2,zero,811012c8 <__reset+0xfb0e12c8>
811013dc:	0011883a 	mov	r8,zero
811013e0:	003fdb06 	br	81101350 <__reset+0xfb0e1350>
811013e4:	94c0012e 	bgeu	r18,r19,811013ec <__sfvwrite_r+0x31c>
811013e8:	9027883a 	mov	r19,r18
811013ec:	980d883a 	mov	r6,r19
811013f0:	e00b883a 	mov	r5,fp
811013f4:	110214c0 	call	8110214c <memmove>
811013f8:	80800217 	ldw	r2,8(r16)
811013fc:	80c00017 	ldw	r3,0(r16)
81101400:	14c5c83a 	sub	r2,r2,r19
81101404:	1cc7883a 	add	r3,r3,r19
81101408:	80800215 	stw	r2,8(r16)
8110140c:	80c00015 	stw	r3,0(r16)
81101410:	10004326 	beq	r2,zero,81101520 <__sfvwrite_r+0x450>
81101414:	9805883a 	mov	r2,r19
81101418:	003f8606 	br	81101234 <__reset+0xfb0e1234>
8110141c:	b00d883a 	mov	r6,r22
81101420:	e00b883a 	mov	r5,fp
81101424:	da000115 	stw	r8,4(sp)
81101428:	110214c0 	call	8110214c <memmove>
8110142c:	80800217 	ldw	r2,8(r16)
81101430:	80c00017 	ldw	r3,0(r16)
81101434:	da000117 	ldw	r8,4(sp)
81101438:	1585c83a 	sub	r2,r2,r22
8110143c:	1dad883a 	add	r22,r3,r22
81101440:	80800215 	stw	r2,8(r16)
81101444:	85800015 	stw	r22,0(r16)
81101448:	003fbf06 	br	81101348 <__reset+0xfb0e1348>
8110144c:	81000017 	ldw	r4,0(r16)
81101450:	9027883a 	mov	r19,r18
81101454:	902f883a 	mov	r23,r18
81101458:	003f6c06 	br	8110120c <__reset+0xfb0e120c>
8110145c:	900d883a 	mov	r6,r18
81101460:	01400284 	movi	r5,10
81101464:	e009883a 	mov	r4,fp
81101468:	1101f200 	call	81101f20 <memchr>
8110146c:	10003e26 	beq	r2,zero,81101568 <__sfvwrite_r+0x498>
81101470:	10800044 	addi	r2,r2,1
81101474:	1727c83a 	sub	r19,r2,fp
81101478:	02000044 	movi	r8,1
8110147c:	003f9d06 	br	811012f4 <__reset+0xfb0e12f4>
81101480:	80800517 	ldw	r2,20(r16)
81101484:	81400417 	ldw	r5,16(r16)
81101488:	81c00017 	ldw	r7,0(r16)
8110148c:	10a7883a 	add	r19,r2,r2
81101490:	9885883a 	add	r2,r19,r2
81101494:	1026d7fa 	srli	r19,r2,31
81101498:	396dc83a 	sub	r22,r7,r5
8110149c:	b1000044 	addi	r4,r22,1
811014a0:	9885883a 	add	r2,r19,r2
811014a4:	1027d07a 	srai	r19,r2,1
811014a8:	2485883a 	add	r2,r4,r18
811014ac:	980d883a 	mov	r6,r19
811014b0:	9880022e 	bgeu	r19,r2,811014bc <__sfvwrite_r+0x3ec>
811014b4:	1027883a 	mov	r19,r2
811014b8:	100d883a 	mov	r6,r2
811014bc:	18c1000c 	andi	r3,r3,1024
811014c0:	18001c26 	beq	r3,zero,81101534 <__sfvwrite_r+0x464>
811014c4:	300b883a 	mov	r5,r6
811014c8:	a809883a 	mov	r4,r21
811014cc:	11017140 	call	81101714 <_malloc_r>
811014d0:	102f883a 	mov	r23,r2
811014d4:	10002926 	beq	r2,zero,8110157c <__sfvwrite_r+0x4ac>
811014d8:	81400417 	ldw	r5,16(r16)
811014dc:	b00d883a 	mov	r6,r22
811014e0:	1009883a 	mov	r4,r2
811014e4:	11020040 	call	81102004 <memcpy>
811014e8:	8080030b 	ldhu	r2,12(r16)
811014ec:	00fedfc4 	movi	r3,-1153
811014f0:	10c4703a 	and	r2,r2,r3
811014f4:	10802014 	ori	r2,r2,128
811014f8:	8080030d 	sth	r2,12(r16)
811014fc:	bd89883a 	add	r4,r23,r22
81101500:	9d8fc83a 	sub	r7,r19,r22
81101504:	85c00415 	stw	r23,16(r16)
81101508:	84c00515 	stw	r19,20(r16)
8110150c:	81000015 	stw	r4,0(r16)
81101510:	9027883a 	mov	r19,r18
81101514:	81c00215 	stw	r7,8(r16)
81101518:	902f883a 	mov	r23,r18
8110151c:	003f3b06 	br	8110120c <__reset+0xfb0e120c>
81101520:	800b883a 	mov	r5,r16
81101524:	a809883a 	mov	r4,r21
81101528:	1102fec0 	call	81102fec <_fflush_r>
8110152c:	103fb926 	beq	r2,zero,81101414 <__reset+0xfb0e1414>
81101530:	003f6506 	br	811012c8 <__reset+0xfb0e12c8>
81101534:	a809883a 	mov	r4,r21
81101538:	11023d00 	call	811023d0 <_realloc_r>
8110153c:	102f883a 	mov	r23,r2
81101540:	103fee1e 	bne	r2,zero,811014fc <__reset+0xfb0e14fc>
81101544:	81400417 	ldw	r5,16(r16)
81101548:	a809883a 	mov	r4,r21
8110154c:	110319c0 	call	8110319c <_free_r>
81101550:	8080030b 	ldhu	r2,12(r16)
81101554:	00ffdfc4 	movi	r3,-129
81101558:	1884703a 	and	r2,r3,r2
8110155c:	00c00304 	movi	r3,12
81101560:	a8c00015 	stw	r3,0(r21)
81101564:	003f5906 	br	811012cc <__reset+0xfb0e12cc>
81101568:	94c00044 	addi	r19,r18,1
8110156c:	02000044 	movi	r8,1
81101570:	003f6006 	br	811012f4 <__reset+0xfb0e12f4>
81101574:	00bfffc4 	movi	r2,-1
81101578:	003f0306 	br	81101188 <__reset+0xfb0e1188>
8110157c:	00800304 	movi	r2,12
81101580:	a8800015 	stw	r2,0(r21)
81101584:	8080030b 	ldhu	r2,12(r16)
81101588:	003f5006 	br	811012cc <__reset+0xfb0e12cc>

8110158c <_fwalk>:
8110158c:	defff704 	addi	sp,sp,-36
81101590:	dd000415 	stw	r20,16(sp)
81101594:	dfc00815 	stw	ra,32(sp)
81101598:	ddc00715 	stw	r23,28(sp)
8110159c:	dd800615 	stw	r22,24(sp)
811015a0:	dd400515 	stw	r21,20(sp)
811015a4:	dcc00315 	stw	r19,12(sp)
811015a8:	dc800215 	stw	r18,8(sp)
811015ac:	dc400115 	stw	r17,4(sp)
811015b0:	dc000015 	stw	r16,0(sp)
811015b4:	2500b804 	addi	r20,r4,736
811015b8:	a0002326 	beq	r20,zero,81101648 <_fwalk+0xbc>
811015bc:	282b883a 	mov	r21,r5
811015c0:	002f883a 	mov	r23,zero
811015c4:	05800044 	movi	r22,1
811015c8:	04ffffc4 	movi	r19,-1
811015cc:	a4400117 	ldw	r17,4(r20)
811015d0:	a4800217 	ldw	r18,8(r20)
811015d4:	8c7fffc4 	addi	r17,r17,-1
811015d8:	88000d16 	blt	r17,zero,81101610 <_fwalk+0x84>
811015dc:	94000304 	addi	r16,r18,12
811015e0:	94800384 	addi	r18,r18,14
811015e4:	8080000b 	ldhu	r2,0(r16)
811015e8:	8c7fffc4 	addi	r17,r17,-1
811015ec:	813ffd04 	addi	r4,r16,-12
811015f0:	b080042e 	bgeu	r22,r2,81101604 <_fwalk+0x78>
811015f4:	9080000f 	ldh	r2,0(r18)
811015f8:	14c00226 	beq	r2,r19,81101604 <_fwalk+0x78>
811015fc:	a83ee83a 	callr	r21
81101600:	b8aeb03a 	or	r23,r23,r2
81101604:	84001a04 	addi	r16,r16,104
81101608:	94801a04 	addi	r18,r18,104
8110160c:	8cfff51e 	bne	r17,r19,811015e4 <__reset+0xfb0e15e4>
81101610:	a5000017 	ldw	r20,0(r20)
81101614:	a03fed1e 	bne	r20,zero,811015cc <__reset+0xfb0e15cc>
81101618:	b805883a 	mov	r2,r23
8110161c:	dfc00817 	ldw	ra,32(sp)
81101620:	ddc00717 	ldw	r23,28(sp)
81101624:	dd800617 	ldw	r22,24(sp)
81101628:	dd400517 	ldw	r21,20(sp)
8110162c:	dd000417 	ldw	r20,16(sp)
81101630:	dcc00317 	ldw	r19,12(sp)
81101634:	dc800217 	ldw	r18,8(sp)
81101638:	dc400117 	ldw	r17,4(sp)
8110163c:	dc000017 	ldw	r16,0(sp)
81101640:	dec00904 	addi	sp,sp,36
81101644:	f800283a 	ret
81101648:	002f883a 	mov	r23,zero
8110164c:	003ff206 	br	81101618 <__reset+0xfb0e1618>

81101650 <_fwalk_reent>:
81101650:	defff704 	addi	sp,sp,-36
81101654:	dd000415 	stw	r20,16(sp)
81101658:	dfc00815 	stw	ra,32(sp)
8110165c:	ddc00715 	stw	r23,28(sp)
81101660:	dd800615 	stw	r22,24(sp)
81101664:	dd400515 	stw	r21,20(sp)
81101668:	dcc00315 	stw	r19,12(sp)
8110166c:	dc800215 	stw	r18,8(sp)
81101670:	dc400115 	stw	r17,4(sp)
81101674:	dc000015 	stw	r16,0(sp)
81101678:	2500b804 	addi	r20,r4,736
8110167c:	a0002326 	beq	r20,zero,8110170c <_fwalk_reent+0xbc>
81101680:	282b883a 	mov	r21,r5
81101684:	2027883a 	mov	r19,r4
81101688:	002f883a 	mov	r23,zero
8110168c:	05800044 	movi	r22,1
81101690:	04bfffc4 	movi	r18,-1
81101694:	a4400117 	ldw	r17,4(r20)
81101698:	a4000217 	ldw	r16,8(r20)
8110169c:	8c7fffc4 	addi	r17,r17,-1
811016a0:	88000c16 	blt	r17,zero,811016d4 <_fwalk_reent+0x84>
811016a4:	84000304 	addi	r16,r16,12
811016a8:	8080000b 	ldhu	r2,0(r16)
811016ac:	8c7fffc4 	addi	r17,r17,-1
811016b0:	817ffd04 	addi	r5,r16,-12
811016b4:	b080052e 	bgeu	r22,r2,811016cc <_fwalk_reent+0x7c>
811016b8:	8080008f 	ldh	r2,2(r16)
811016bc:	9809883a 	mov	r4,r19
811016c0:	14800226 	beq	r2,r18,811016cc <_fwalk_reent+0x7c>
811016c4:	a83ee83a 	callr	r21
811016c8:	b8aeb03a 	or	r23,r23,r2
811016cc:	84001a04 	addi	r16,r16,104
811016d0:	8cbff51e 	bne	r17,r18,811016a8 <__reset+0xfb0e16a8>
811016d4:	a5000017 	ldw	r20,0(r20)
811016d8:	a03fee1e 	bne	r20,zero,81101694 <__reset+0xfb0e1694>
811016dc:	b805883a 	mov	r2,r23
811016e0:	dfc00817 	ldw	ra,32(sp)
811016e4:	ddc00717 	ldw	r23,28(sp)
811016e8:	dd800617 	ldw	r22,24(sp)
811016ec:	dd400517 	ldw	r21,20(sp)
811016f0:	dd000417 	ldw	r20,16(sp)
811016f4:	dcc00317 	ldw	r19,12(sp)
811016f8:	dc800217 	ldw	r18,8(sp)
811016fc:	dc400117 	ldw	r17,4(sp)
81101700:	dc000017 	ldw	r16,0(sp)
81101704:	dec00904 	addi	sp,sp,36
81101708:	f800283a 	ret
8110170c:	002f883a 	mov	r23,zero
81101710:	003ff206 	br	811016dc <__reset+0xfb0e16dc>

81101714 <_malloc_r>:
81101714:	defff504 	addi	sp,sp,-44
81101718:	dc800315 	stw	r18,12(sp)
8110171c:	dfc00a15 	stw	ra,40(sp)
81101720:	df000915 	stw	fp,36(sp)
81101724:	ddc00815 	stw	r23,32(sp)
81101728:	dd800715 	stw	r22,28(sp)
8110172c:	dd400615 	stw	r21,24(sp)
81101730:	dd000515 	stw	r20,20(sp)
81101734:	dcc00415 	stw	r19,16(sp)
81101738:	dc400215 	stw	r17,8(sp)
8110173c:	dc000115 	stw	r16,4(sp)
81101740:	288002c4 	addi	r2,r5,11
81101744:	00c00584 	movi	r3,22
81101748:	2025883a 	mov	r18,r4
8110174c:	18807f2e 	bgeu	r3,r2,8110194c <_malloc_r+0x238>
81101750:	047ffe04 	movi	r17,-8
81101754:	1462703a 	and	r17,r2,r17
81101758:	8800a316 	blt	r17,zero,811019e8 <_malloc_r+0x2d4>
8110175c:	8940a236 	bltu	r17,r5,811019e8 <_malloc_r+0x2d4>
81101760:	1103e1c0 	call	81103e1c <__malloc_lock>
81101764:	00807dc4 	movi	r2,503
81101768:	1441e92e 	bgeu	r2,r17,81101f10 <_malloc_r+0x7fc>
8110176c:	8804d27a 	srli	r2,r17,9
81101770:	1000a126 	beq	r2,zero,811019f8 <_malloc_r+0x2e4>
81101774:	00c00104 	movi	r3,4
81101778:	18811e36 	bltu	r3,r2,81101bf4 <_malloc_r+0x4e0>
8110177c:	8804d1ba 	srli	r2,r17,6
81101780:	12000e44 	addi	r8,r2,57
81101784:	11c00e04 	addi	r7,r2,56
81101788:	4209883a 	add	r4,r8,r8
8110178c:	04e04474 	movhi	r19,33041
81101790:	2109883a 	add	r4,r4,r4
81101794:	9ce63404 	addi	r19,r19,-26416
81101798:	2109883a 	add	r4,r4,r4
8110179c:	9909883a 	add	r4,r19,r4
811017a0:	24000117 	ldw	r16,4(r4)
811017a4:	213ffe04 	addi	r4,r4,-8
811017a8:	24009726 	beq	r4,r16,81101a08 <_malloc_r+0x2f4>
811017ac:	80800117 	ldw	r2,4(r16)
811017b0:	01bfff04 	movi	r6,-4
811017b4:	014003c4 	movi	r5,15
811017b8:	1184703a 	and	r2,r2,r6
811017bc:	1447c83a 	sub	r3,r2,r17
811017c0:	28c00716 	blt	r5,r3,811017e0 <_malloc_r+0xcc>
811017c4:	1800920e 	bge	r3,zero,81101a10 <_malloc_r+0x2fc>
811017c8:	84000317 	ldw	r16,12(r16)
811017cc:	24008e26 	beq	r4,r16,81101a08 <_malloc_r+0x2f4>
811017d0:	80800117 	ldw	r2,4(r16)
811017d4:	1184703a 	and	r2,r2,r6
811017d8:	1447c83a 	sub	r3,r2,r17
811017dc:	28fff90e 	bge	r5,r3,811017c4 <__reset+0xfb0e17c4>
811017e0:	3809883a 	mov	r4,r7
811017e4:	01a04474 	movhi	r6,33041
811017e8:	9c000417 	ldw	r16,16(r19)
811017ec:	31a63404 	addi	r6,r6,-26416
811017f0:	32000204 	addi	r8,r6,8
811017f4:	82013426 	beq	r16,r8,81101cc8 <_malloc_r+0x5b4>
811017f8:	80c00117 	ldw	r3,4(r16)
811017fc:	00bfff04 	movi	r2,-4
81101800:	188e703a 	and	r7,r3,r2
81101804:	3c45c83a 	sub	r2,r7,r17
81101808:	00c003c4 	movi	r3,15
8110180c:	18811f16 	blt	r3,r2,81101c8c <_malloc_r+0x578>
81101810:	32000515 	stw	r8,20(r6)
81101814:	32000415 	stw	r8,16(r6)
81101818:	10007f0e 	bge	r2,zero,81101a18 <_malloc_r+0x304>
8110181c:	00807fc4 	movi	r2,511
81101820:	11c0fd36 	bltu	r2,r7,81101c18 <_malloc_r+0x504>
81101824:	3806d0fa 	srli	r3,r7,3
81101828:	01c00044 	movi	r7,1
8110182c:	30800117 	ldw	r2,4(r6)
81101830:	19400044 	addi	r5,r3,1
81101834:	294b883a 	add	r5,r5,r5
81101838:	1807d0ba 	srai	r3,r3,2
8110183c:	294b883a 	add	r5,r5,r5
81101840:	294b883a 	add	r5,r5,r5
81101844:	298b883a 	add	r5,r5,r6
81101848:	38c6983a 	sll	r3,r7,r3
8110184c:	29c00017 	ldw	r7,0(r5)
81101850:	2a7ffe04 	addi	r9,r5,-8
81101854:	1886b03a 	or	r3,r3,r2
81101858:	82400315 	stw	r9,12(r16)
8110185c:	81c00215 	stw	r7,8(r16)
81101860:	30c00115 	stw	r3,4(r6)
81101864:	2c000015 	stw	r16,0(r5)
81101868:	3c000315 	stw	r16,12(r7)
8110186c:	2005d0ba 	srai	r2,r4,2
81101870:	01400044 	movi	r5,1
81101874:	288a983a 	sll	r5,r5,r2
81101878:	19406f36 	bltu	r3,r5,81101a38 <_malloc_r+0x324>
8110187c:	28c4703a 	and	r2,r5,r3
81101880:	10000a1e 	bne	r2,zero,811018ac <_malloc_r+0x198>
81101884:	00bfff04 	movi	r2,-4
81101888:	294b883a 	add	r5,r5,r5
8110188c:	2088703a 	and	r4,r4,r2
81101890:	28c4703a 	and	r2,r5,r3
81101894:	21000104 	addi	r4,r4,4
81101898:	1000041e 	bne	r2,zero,811018ac <_malloc_r+0x198>
8110189c:	294b883a 	add	r5,r5,r5
811018a0:	28c4703a 	and	r2,r5,r3
811018a4:	21000104 	addi	r4,r4,4
811018a8:	103ffc26 	beq	r2,zero,8110189c <__reset+0xfb0e189c>
811018ac:	02bfff04 	movi	r10,-4
811018b0:	024003c4 	movi	r9,15
811018b4:	21800044 	addi	r6,r4,1
811018b8:	318d883a 	add	r6,r6,r6
811018bc:	318d883a 	add	r6,r6,r6
811018c0:	318d883a 	add	r6,r6,r6
811018c4:	998d883a 	add	r6,r19,r6
811018c8:	333ffe04 	addi	r12,r6,-8
811018cc:	2017883a 	mov	r11,r4
811018d0:	31800104 	addi	r6,r6,4
811018d4:	34000017 	ldw	r16,0(r6)
811018d8:	31fffd04 	addi	r7,r6,-12
811018dc:	81c0041e 	bne	r16,r7,811018f0 <_malloc_r+0x1dc>
811018e0:	0000fb06 	br	81101cd0 <_malloc_r+0x5bc>
811018e4:	1801030e 	bge	r3,zero,81101cf4 <_malloc_r+0x5e0>
811018e8:	84000317 	ldw	r16,12(r16)
811018ec:	81c0f826 	beq	r16,r7,81101cd0 <_malloc_r+0x5bc>
811018f0:	80800117 	ldw	r2,4(r16)
811018f4:	1284703a 	and	r2,r2,r10
811018f8:	1447c83a 	sub	r3,r2,r17
811018fc:	48fff90e 	bge	r9,r3,811018e4 <__reset+0xfb0e18e4>
81101900:	80800317 	ldw	r2,12(r16)
81101904:	81000217 	ldw	r4,8(r16)
81101908:	89400054 	ori	r5,r17,1
8110190c:	81400115 	stw	r5,4(r16)
81101910:	20800315 	stw	r2,12(r4)
81101914:	11000215 	stw	r4,8(r2)
81101918:	8463883a 	add	r17,r16,r17
8110191c:	9c400515 	stw	r17,20(r19)
81101920:	9c400415 	stw	r17,16(r19)
81101924:	18800054 	ori	r2,r3,1
81101928:	88800115 	stw	r2,4(r17)
8110192c:	8a000315 	stw	r8,12(r17)
81101930:	8a000215 	stw	r8,8(r17)
81101934:	88e3883a 	add	r17,r17,r3
81101938:	88c00015 	stw	r3,0(r17)
8110193c:	9009883a 	mov	r4,r18
81101940:	1103e400 	call	81103e40 <__malloc_unlock>
81101944:	80800204 	addi	r2,r16,8
81101948:	00001b06 	br	811019b8 <_malloc_r+0x2a4>
8110194c:	04400404 	movi	r17,16
81101950:	89402536 	bltu	r17,r5,811019e8 <_malloc_r+0x2d4>
81101954:	1103e1c0 	call	81103e1c <__malloc_lock>
81101958:	00800184 	movi	r2,6
8110195c:	01000084 	movi	r4,2
81101960:	04e04474 	movhi	r19,33041
81101964:	1085883a 	add	r2,r2,r2
81101968:	9ce63404 	addi	r19,r19,-26416
8110196c:	1085883a 	add	r2,r2,r2
81101970:	9885883a 	add	r2,r19,r2
81101974:	14000117 	ldw	r16,4(r2)
81101978:	10fffe04 	addi	r3,r2,-8
8110197c:	80c0d926 	beq	r16,r3,81101ce4 <_malloc_r+0x5d0>
81101980:	80c00117 	ldw	r3,4(r16)
81101984:	81000317 	ldw	r4,12(r16)
81101988:	00bfff04 	movi	r2,-4
8110198c:	1884703a 	and	r2,r3,r2
81101990:	81400217 	ldw	r5,8(r16)
81101994:	8085883a 	add	r2,r16,r2
81101998:	10c00117 	ldw	r3,4(r2)
8110199c:	29000315 	stw	r4,12(r5)
811019a0:	21400215 	stw	r5,8(r4)
811019a4:	18c00054 	ori	r3,r3,1
811019a8:	10c00115 	stw	r3,4(r2)
811019ac:	9009883a 	mov	r4,r18
811019b0:	1103e400 	call	81103e40 <__malloc_unlock>
811019b4:	80800204 	addi	r2,r16,8
811019b8:	dfc00a17 	ldw	ra,40(sp)
811019bc:	df000917 	ldw	fp,36(sp)
811019c0:	ddc00817 	ldw	r23,32(sp)
811019c4:	dd800717 	ldw	r22,28(sp)
811019c8:	dd400617 	ldw	r21,24(sp)
811019cc:	dd000517 	ldw	r20,20(sp)
811019d0:	dcc00417 	ldw	r19,16(sp)
811019d4:	dc800317 	ldw	r18,12(sp)
811019d8:	dc400217 	ldw	r17,8(sp)
811019dc:	dc000117 	ldw	r16,4(sp)
811019e0:	dec00b04 	addi	sp,sp,44
811019e4:	f800283a 	ret
811019e8:	00800304 	movi	r2,12
811019ec:	90800015 	stw	r2,0(r18)
811019f0:	0005883a 	mov	r2,zero
811019f4:	003ff006 	br	811019b8 <__reset+0xfb0e19b8>
811019f8:	01002004 	movi	r4,128
811019fc:	02001004 	movi	r8,64
81101a00:	01c00fc4 	movi	r7,63
81101a04:	003f6106 	br	8110178c <__reset+0xfb0e178c>
81101a08:	4009883a 	mov	r4,r8
81101a0c:	003f7506 	br	811017e4 <__reset+0xfb0e17e4>
81101a10:	81000317 	ldw	r4,12(r16)
81101a14:	003fde06 	br	81101990 <__reset+0xfb0e1990>
81101a18:	81c5883a 	add	r2,r16,r7
81101a1c:	11400117 	ldw	r5,4(r2)
81101a20:	9009883a 	mov	r4,r18
81101a24:	29400054 	ori	r5,r5,1
81101a28:	11400115 	stw	r5,4(r2)
81101a2c:	1103e400 	call	81103e40 <__malloc_unlock>
81101a30:	80800204 	addi	r2,r16,8
81101a34:	003fe006 	br	811019b8 <__reset+0xfb0e19b8>
81101a38:	9c000217 	ldw	r16,8(r19)
81101a3c:	00bfff04 	movi	r2,-4
81101a40:	85800117 	ldw	r22,4(r16)
81101a44:	b0ac703a 	and	r22,r22,r2
81101a48:	b4400336 	bltu	r22,r17,81101a58 <_malloc_r+0x344>
81101a4c:	b445c83a 	sub	r2,r22,r17
81101a50:	00c003c4 	movi	r3,15
81101a54:	18805d16 	blt	r3,r2,81101bcc <_malloc_r+0x4b8>
81101a58:	05e04474 	movhi	r23,33041
81101a5c:	00a04474 	movhi	r2,33041
81101a60:	10abfc04 	addi	r2,r2,-20496
81101a64:	bdebea04 	addi	r23,r23,-20568
81101a68:	15400017 	ldw	r21,0(r2)
81101a6c:	b8c00017 	ldw	r3,0(r23)
81101a70:	00bfffc4 	movi	r2,-1
81101a74:	858d883a 	add	r6,r16,r22
81101a78:	8d6b883a 	add	r21,r17,r21
81101a7c:	1880ea26 	beq	r3,r2,81101e28 <_malloc_r+0x714>
81101a80:	ad4403c4 	addi	r21,r21,4111
81101a84:	00bc0004 	movi	r2,-4096
81101a88:	a8aa703a 	and	r21,r21,r2
81101a8c:	a80b883a 	mov	r5,r21
81101a90:	9009883a 	mov	r4,r18
81101a94:	d9800015 	stw	r6,0(sp)
81101a98:	11029340 	call	81102934 <_sbrk_r>
81101a9c:	1029883a 	mov	r20,r2
81101aa0:	00bfffc4 	movi	r2,-1
81101aa4:	d9800017 	ldw	r6,0(sp)
81101aa8:	a080e826 	beq	r20,r2,81101e4c <_malloc_r+0x738>
81101aac:	a180a636 	bltu	r20,r6,81101d48 <_malloc_r+0x634>
81101ab0:	07204474 	movhi	fp,33041
81101ab4:	e72c0504 	addi	fp,fp,-20460
81101ab8:	e0800017 	ldw	r2,0(fp)
81101abc:	a887883a 	add	r3,r21,r2
81101ac0:	e0c00015 	stw	r3,0(fp)
81101ac4:	3500e626 	beq	r6,r20,81101e60 <_malloc_r+0x74c>
81101ac8:	b9000017 	ldw	r4,0(r23)
81101acc:	00bfffc4 	movi	r2,-1
81101ad0:	2080ee26 	beq	r4,r2,81101e8c <_malloc_r+0x778>
81101ad4:	a185c83a 	sub	r2,r20,r6
81101ad8:	10c5883a 	add	r2,r2,r3
81101adc:	e0800015 	stw	r2,0(fp)
81101ae0:	a0c001cc 	andi	r3,r20,7
81101ae4:	1800bc26 	beq	r3,zero,81101dd8 <_malloc_r+0x6c4>
81101ae8:	a0e9c83a 	sub	r20,r20,r3
81101aec:	00840204 	movi	r2,4104
81101af0:	a5000204 	addi	r20,r20,8
81101af4:	10c7c83a 	sub	r3,r2,r3
81101af8:	a545883a 	add	r2,r20,r21
81101afc:	1083ffcc 	andi	r2,r2,4095
81101b00:	18abc83a 	sub	r21,r3,r2
81101b04:	a80b883a 	mov	r5,r21
81101b08:	9009883a 	mov	r4,r18
81101b0c:	11029340 	call	81102934 <_sbrk_r>
81101b10:	00ffffc4 	movi	r3,-1
81101b14:	10c0e126 	beq	r2,r3,81101e9c <_malloc_r+0x788>
81101b18:	1505c83a 	sub	r2,r2,r20
81101b1c:	1545883a 	add	r2,r2,r21
81101b20:	10800054 	ori	r2,r2,1
81101b24:	e0c00017 	ldw	r3,0(fp)
81101b28:	9d000215 	stw	r20,8(r19)
81101b2c:	a0800115 	stw	r2,4(r20)
81101b30:	a8c7883a 	add	r3,r21,r3
81101b34:	e0c00015 	stw	r3,0(fp)
81101b38:	84c00e26 	beq	r16,r19,81101b74 <_malloc_r+0x460>
81101b3c:	018003c4 	movi	r6,15
81101b40:	3580a72e 	bgeu	r6,r22,81101de0 <_malloc_r+0x6cc>
81101b44:	81400117 	ldw	r5,4(r16)
81101b48:	013ffe04 	movi	r4,-8
81101b4c:	b0bffd04 	addi	r2,r22,-12
81101b50:	1104703a 	and	r2,r2,r4
81101b54:	2900004c 	andi	r4,r5,1
81101b58:	2088b03a 	or	r4,r4,r2
81101b5c:	81000115 	stw	r4,4(r16)
81101b60:	01400144 	movi	r5,5
81101b64:	8089883a 	add	r4,r16,r2
81101b68:	21400115 	stw	r5,4(r4)
81101b6c:	21400215 	stw	r5,8(r4)
81101b70:	3080cd36 	bltu	r6,r2,81101ea8 <_malloc_r+0x794>
81101b74:	00a04474 	movhi	r2,33041
81101b78:	10abfb04 	addi	r2,r2,-20500
81101b7c:	11000017 	ldw	r4,0(r2)
81101b80:	20c0012e 	bgeu	r4,r3,81101b88 <_malloc_r+0x474>
81101b84:	10c00015 	stw	r3,0(r2)
81101b88:	00a04474 	movhi	r2,33041
81101b8c:	10abfa04 	addi	r2,r2,-20504
81101b90:	11000017 	ldw	r4,0(r2)
81101b94:	9c000217 	ldw	r16,8(r19)
81101b98:	20c0012e 	bgeu	r4,r3,81101ba0 <_malloc_r+0x48c>
81101b9c:	10c00015 	stw	r3,0(r2)
81101ba0:	80c00117 	ldw	r3,4(r16)
81101ba4:	00bfff04 	movi	r2,-4
81101ba8:	1886703a 	and	r3,r3,r2
81101bac:	1c45c83a 	sub	r2,r3,r17
81101bb0:	1c400236 	bltu	r3,r17,81101bbc <_malloc_r+0x4a8>
81101bb4:	00c003c4 	movi	r3,15
81101bb8:	18800416 	blt	r3,r2,81101bcc <_malloc_r+0x4b8>
81101bbc:	9009883a 	mov	r4,r18
81101bc0:	1103e400 	call	81103e40 <__malloc_unlock>
81101bc4:	0005883a 	mov	r2,zero
81101bc8:	003f7b06 	br	811019b8 <__reset+0xfb0e19b8>
81101bcc:	88c00054 	ori	r3,r17,1
81101bd0:	80c00115 	stw	r3,4(r16)
81101bd4:	8463883a 	add	r17,r16,r17
81101bd8:	10800054 	ori	r2,r2,1
81101bdc:	9c400215 	stw	r17,8(r19)
81101be0:	88800115 	stw	r2,4(r17)
81101be4:	9009883a 	mov	r4,r18
81101be8:	1103e400 	call	81103e40 <__malloc_unlock>
81101bec:	80800204 	addi	r2,r16,8
81101bf0:	003f7106 	br	811019b8 <__reset+0xfb0e19b8>
81101bf4:	00c00504 	movi	r3,20
81101bf8:	18804a2e 	bgeu	r3,r2,81101d24 <_malloc_r+0x610>
81101bfc:	00c01504 	movi	r3,84
81101c00:	18806e36 	bltu	r3,r2,81101dbc <_malloc_r+0x6a8>
81101c04:	8804d33a 	srli	r2,r17,12
81101c08:	12001bc4 	addi	r8,r2,111
81101c0c:	11c01b84 	addi	r7,r2,110
81101c10:	4209883a 	add	r4,r8,r8
81101c14:	003edd06 	br	8110178c <__reset+0xfb0e178c>
81101c18:	3804d27a 	srli	r2,r7,9
81101c1c:	00c00104 	movi	r3,4
81101c20:	1880442e 	bgeu	r3,r2,81101d34 <_malloc_r+0x620>
81101c24:	00c00504 	movi	r3,20
81101c28:	18808136 	bltu	r3,r2,81101e30 <_malloc_r+0x71c>
81101c2c:	11401704 	addi	r5,r2,92
81101c30:	10c016c4 	addi	r3,r2,91
81101c34:	294b883a 	add	r5,r5,r5
81101c38:	294b883a 	add	r5,r5,r5
81101c3c:	294b883a 	add	r5,r5,r5
81101c40:	994b883a 	add	r5,r19,r5
81101c44:	28800017 	ldw	r2,0(r5)
81101c48:	01a04474 	movhi	r6,33041
81101c4c:	297ffe04 	addi	r5,r5,-8
81101c50:	31a63404 	addi	r6,r6,-26416
81101c54:	28806526 	beq	r5,r2,81101dec <_malloc_r+0x6d8>
81101c58:	01bfff04 	movi	r6,-4
81101c5c:	10c00117 	ldw	r3,4(r2)
81101c60:	1986703a 	and	r3,r3,r6
81101c64:	38c0022e 	bgeu	r7,r3,81101c70 <_malloc_r+0x55c>
81101c68:	10800217 	ldw	r2,8(r2)
81101c6c:	28bffb1e 	bne	r5,r2,81101c5c <__reset+0xfb0e1c5c>
81101c70:	11400317 	ldw	r5,12(r2)
81101c74:	98c00117 	ldw	r3,4(r19)
81101c78:	81400315 	stw	r5,12(r16)
81101c7c:	80800215 	stw	r2,8(r16)
81101c80:	2c000215 	stw	r16,8(r5)
81101c84:	14000315 	stw	r16,12(r2)
81101c88:	003ef806 	br	8110186c <__reset+0xfb0e186c>
81101c8c:	88c00054 	ori	r3,r17,1
81101c90:	80c00115 	stw	r3,4(r16)
81101c94:	8463883a 	add	r17,r16,r17
81101c98:	34400515 	stw	r17,20(r6)
81101c9c:	34400415 	stw	r17,16(r6)
81101ca0:	10c00054 	ori	r3,r2,1
81101ca4:	8a000315 	stw	r8,12(r17)
81101ca8:	8a000215 	stw	r8,8(r17)
81101cac:	88c00115 	stw	r3,4(r17)
81101cb0:	88a3883a 	add	r17,r17,r2
81101cb4:	88800015 	stw	r2,0(r17)
81101cb8:	9009883a 	mov	r4,r18
81101cbc:	1103e400 	call	81103e40 <__malloc_unlock>
81101cc0:	80800204 	addi	r2,r16,8
81101cc4:	003f3c06 	br	811019b8 <__reset+0xfb0e19b8>
81101cc8:	30c00117 	ldw	r3,4(r6)
81101ccc:	003ee706 	br	8110186c <__reset+0xfb0e186c>
81101cd0:	5ac00044 	addi	r11,r11,1
81101cd4:	588000cc 	andi	r2,r11,3
81101cd8:	31800204 	addi	r6,r6,8
81101cdc:	103efd1e 	bne	r2,zero,811018d4 <__reset+0xfb0e18d4>
81101ce0:	00002406 	br	81101d74 <_malloc_r+0x660>
81101ce4:	14000317 	ldw	r16,12(r2)
81101ce8:	143f251e 	bne	r2,r16,81101980 <__reset+0xfb0e1980>
81101cec:	21000084 	addi	r4,r4,2
81101cf0:	003ebc06 	br	811017e4 <__reset+0xfb0e17e4>
81101cf4:	8085883a 	add	r2,r16,r2
81101cf8:	10c00117 	ldw	r3,4(r2)
81101cfc:	81000317 	ldw	r4,12(r16)
81101d00:	81400217 	ldw	r5,8(r16)
81101d04:	18c00054 	ori	r3,r3,1
81101d08:	10c00115 	stw	r3,4(r2)
81101d0c:	29000315 	stw	r4,12(r5)
81101d10:	21400215 	stw	r5,8(r4)
81101d14:	9009883a 	mov	r4,r18
81101d18:	1103e400 	call	81103e40 <__malloc_unlock>
81101d1c:	80800204 	addi	r2,r16,8
81101d20:	003f2506 	br	811019b8 <__reset+0xfb0e19b8>
81101d24:	12001704 	addi	r8,r2,92
81101d28:	11c016c4 	addi	r7,r2,91
81101d2c:	4209883a 	add	r4,r8,r8
81101d30:	003e9606 	br	8110178c <__reset+0xfb0e178c>
81101d34:	3804d1ba 	srli	r2,r7,6
81101d38:	11400e44 	addi	r5,r2,57
81101d3c:	10c00e04 	addi	r3,r2,56
81101d40:	294b883a 	add	r5,r5,r5
81101d44:	003fbc06 	br	81101c38 <__reset+0xfb0e1c38>
81101d48:	84ff5926 	beq	r16,r19,81101ab0 <__reset+0xfb0e1ab0>
81101d4c:	00a04474 	movhi	r2,33041
81101d50:	10a63404 	addi	r2,r2,-26416
81101d54:	14000217 	ldw	r16,8(r2)
81101d58:	00bfff04 	movi	r2,-4
81101d5c:	80c00117 	ldw	r3,4(r16)
81101d60:	1886703a 	and	r3,r3,r2
81101d64:	003f9106 	br	81101bac <__reset+0xfb0e1bac>
81101d68:	60800217 	ldw	r2,8(r12)
81101d6c:	213fffc4 	addi	r4,r4,-1
81101d70:	1300651e 	bne	r2,r12,81101f08 <_malloc_r+0x7f4>
81101d74:	208000cc 	andi	r2,r4,3
81101d78:	633ffe04 	addi	r12,r12,-8
81101d7c:	103ffa1e 	bne	r2,zero,81101d68 <__reset+0xfb0e1d68>
81101d80:	98800117 	ldw	r2,4(r19)
81101d84:	0146303a 	nor	r3,zero,r5
81101d88:	1884703a 	and	r2,r3,r2
81101d8c:	98800115 	stw	r2,4(r19)
81101d90:	294b883a 	add	r5,r5,r5
81101d94:	117f2836 	bltu	r2,r5,81101a38 <__reset+0xfb0e1a38>
81101d98:	283f2726 	beq	r5,zero,81101a38 <__reset+0xfb0e1a38>
81101d9c:	2886703a 	and	r3,r5,r2
81101da0:	5809883a 	mov	r4,r11
81101da4:	183ec31e 	bne	r3,zero,811018b4 <__reset+0xfb0e18b4>
81101da8:	294b883a 	add	r5,r5,r5
81101dac:	2886703a 	and	r3,r5,r2
81101db0:	21000104 	addi	r4,r4,4
81101db4:	183ffc26 	beq	r3,zero,81101da8 <__reset+0xfb0e1da8>
81101db8:	003ebe06 	br	811018b4 <__reset+0xfb0e18b4>
81101dbc:	00c05504 	movi	r3,340
81101dc0:	18801236 	bltu	r3,r2,81101e0c <_malloc_r+0x6f8>
81101dc4:	8804d3fa 	srli	r2,r17,15
81101dc8:	12001e04 	addi	r8,r2,120
81101dcc:	11c01dc4 	addi	r7,r2,119
81101dd0:	4209883a 	add	r4,r8,r8
81101dd4:	003e6d06 	br	8110178c <__reset+0xfb0e178c>
81101dd8:	00c40004 	movi	r3,4096
81101ddc:	003f4606 	br	81101af8 <__reset+0xfb0e1af8>
81101de0:	00800044 	movi	r2,1
81101de4:	a0800115 	stw	r2,4(r20)
81101de8:	003f7406 	br	81101bbc <__reset+0xfb0e1bbc>
81101dec:	1805d0ba 	srai	r2,r3,2
81101df0:	01c00044 	movi	r7,1
81101df4:	30c00117 	ldw	r3,4(r6)
81101df8:	388e983a 	sll	r7,r7,r2
81101dfc:	2805883a 	mov	r2,r5
81101e00:	38c6b03a 	or	r3,r7,r3
81101e04:	30c00115 	stw	r3,4(r6)
81101e08:	003f9b06 	br	81101c78 <__reset+0xfb0e1c78>
81101e0c:	00c15504 	movi	r3,1364
81101e10:	18801a36 	bltu	r3,r2,81101e7c <_malloc_r+0x768>
81101e14:	8804d4ba 	srli	r2,r17,18
81101e18:	12001f44 	addi	r8,r2,125
81101e1c:	11c01f04 	addi	r7,r2,124
81101e20:	4209883a 	add	r4,r8,r8
81101e24:	003e5906 	br	8110178c <__reset+0xfb0e178c>
81101e28:	ad400404 	addi	r21,r21,16
81101e2c:	003f1706 	br	81101a8c <__reset+0xfb0e1a8c>
81101e30:	00c01504 	movi	r3,84
81101e34:	18802336 	bltu	r3,r2,81101ec4 <_malloc_r+0x7b0>
81101e38:	3804d33a 	srli	r2,r7,12
81101e3c:	11401bc4 	addi	r5,r2,111
81101e40:	10c01b84 	addi	r3,r2,110
81101e44:	294b883a 	add	r5,r5,r5
81101e48:	003f7b06 	br	81101c38 <__reset+0xfb0e1c38>
81101e4c:	9c000217 	ldw	r16,8(r19)
81101e50:	00bfff04 	movi	r2,-4
81101e54:	80c00117 	ldw	r3,4(r16)
81101e58:	1886703a 	and	r3,r3,r2
81101e5c:	003f5306 	br	81101bac <__reset+0xfb0e1bac>
81101e60:	3083ffcc 	andi	r2,r6,4095
81101e64:	103f181e 	bne	r2,zero,81101ac8 <__reset+0xfb0e1ac8>
81101e68:	99000217 	ldw	r4,8(r19)
81101e6c:	b545883a 	add	r2,r22,r21
81101e70:	10800054 	ori	r2,r2,1
81101e74:	20800115 	stw	r2,4(r4)
81101e78:	003f3e06 	br	81101b74 <__reset+0xfb0e1b74>
81101e7c:	01003f84 	movi	r4,254
81101e80:	02001fc4 	movi	r8,127
81101e84:	01c01f84 	movi	r7,126
81101e88:	003e4006 	br	8110178c <__reset+0xfb0e178c>
81101e8c:	00a04474 	movhi	r2,33041
81101e90:	10abea04 	addi	r2,r2,-20568
81101e94:	15000015 	stw	r20,0(r2)
81101e98:	003f1106 	br	81101ae0 <__reset+0xfb0e1ae0>
81101e9c:	00800044 	movi	r2,1
81101ea0:	002b883a 	mov	r21,zero
81101ea4:	003f1f06 	br	81101b24 <__reset+0xfb0e1b24>
81101ea8:	81400204 	addi	r5,r16,8
81101eac:	9009883a 	mov	r4,r18
81101eb0:	110319c0 	call	8110319c <_free_r>
81101eb4:	00a04474 	movhi	r2,33041
81101eb8:	10ac0504 	addi	r2,r2,-20460
81101ebc:	10c00017 	ldw	r3,0(r2)
81101ec0:	003f2c06 	br	81101b74 <__reset+0xfb0e1b74>
81101ec4:	00c05504 	movi	r3,340
81101ec8:	18800536 	bltu	r3,r2,81101ee0 <_malloc_r+0x7cc>
81101ecc:	3804d3fa 	srli	r2,r7,15
81101ed0:	11401e04 	addi	r5,r2,120
81101ed4:	10c01dc4 	addi	r3,r2,119
81101ed8:	294b883a 	add	r5,r5,r5
81101edc:	003f5606 	br	81101c38 <__reset+0xfb0e1c38>
81101ee0:	00c15504 	movi	r3,1364
81101ee4:	18800536 	bltu	r3,r2,81101efc <_malloc_r+0x7e8>
81101ee8:	3804d4ba 	srli	r2,r7,18
81101eec:	11401f44 	addi	r5,r2,125
81101ef0:	10c01f04 	addi	r3,r2,124
81101ef4:	294b883a 	add	r5,r5,r5
81101ef8:	003f4f06 	br	81101c38 <__reset+0xfb0e1c38>
81101efc:	01403f84 	movi	r5,254
81101f00:	00c01f84 	movi	r3,126
81101f04:	003f4c06 	br	81101c38 <__reset+0xfb0e1c38>
81101f08:	98800117 	ldw	r2,4(r19)
81101f0c:	003fa006 	br	81101d90 <__reset+0xfb0e1d90>
81101f10:	8808d0fa 	srli	r4,r17,3
81101f14:	20800044 	addi	r2,r4,1
81101f18:	1085883a 	add	r2,r2,r2
81101f1c:	003e9006 	br	81101960 <__reset+0xfb0e1960>

81101f20 <memchr>:
81101f20:	208000cc 	andi	r2,r4,3
81101f24:	280f883a 	mov	r7,r5
81101f28:	10003426 	beq	r2,zero,81101ffc <memchr+0xdc>
81101f2c:	30bfffc4 	addi	r2,r6,-1
81101f30:	30001a26 	beq	r6,zero,81101f9c <memchr+0x7c>
81101f34:	20c00003 	ldbu	r3,0(r4)
81101f38:	29803fcc 	andi	r6,r5,255
81101f3c:	30c0051e 	bne	r6,r3,81101f54 <memchr+0x34>
81101f40:	00001806 	br	81101fa4 <memchr+0x84>
81101f44:	10001526 	beq	r2,zero,81101f9c <memchr+0x7c>
81101f48:	20c00003 	ldbu	r3,0(r4)
81101f4c:	10bfffc4 	addi	r2,r2,-1
81101f50:	30c01426 	beq	r6,r3,81101fa4 <memchr+0x84>
81101f54:	21000044 	addi	r4,r4,1
81101f58:	20c000cc 	andi	r3,r4,3
81101f5c:	183ff91e 	bne	r3,zero,81101f44 <__reset+0xfb0e1f44>
81101f60:	020000c4 	movi	r8,3
81101f64:	40801136 	bltu	r8,r2,81101fac <memchr+0x8c>
81101f68:	10000c26 	beq	r2,zero,81101f9c <memchr+0x7c>
81101f6c:	20c00003 	ldbu	r3,0(r4)
81101f70:	29403fcc 	andi	r5,r5,255
81101f74:	28c00b26 	beq	r5,r3,81101fa4 <memchr+0x84>
81101f78:	20c00044 	addi	r3,r4,1
81101f7c:	39803fcc 	andi	r6,r7,255
81101f80:	2089883a 	add	r4,r4,r2
81101f84:	00000306 	br	81101f94 <memchr+0x74>
81101f88:	18c00044 	addi	r3,r3,1
81101f8c:	197fffc3 	ldbu	r5,-1(r3)
81101f90:	31400526 	beq	r6,r5,81101fa8 <memchr+0x88>
81101f94:	1805883a 	mov	r2,r3
81101f98:	20fffb1e 	bne	r4,r3,81101f88 <__reset+0xfb0e1f88>
81101f9c:	0005883a 	mov	r2,zero
81101fa0:	f800283a 	ret
81101fa4:	2005883a 	mov	r2,r4
81101fa8:	f800283a 	ret
81101fac:	28c03fcc 	andi	r3,r5,255
81101fb0:	1812923a 	slli	r9,r3,8
81101fb4:	02ffbff4 	movhi	r11,65279
81101fb8:	02a02074 	movhi	r10,32897
81101fbc:	48d2b03a 	or	r9,r9,r3
81101fc0:	4806943a 	slli	r3,r9,16
81101fc4:	5affbfc4 	addi	r11,r11,-257
81101fc8:	52a02004 	addi	r10,r10,-32640
81101fcc:	48d2b03a 	or	r9,r9,r3
81101fd0:	20c00017 	ldw	r3,0(r4)
81101fd4:	48c6f03a 	xor	r3,r9,r3
81101fd8:	1acd883a 	add	r6,r3,r11
81101fdc:	00c6303a 	nor	r3,zero,r3
81101fe0:	30c6703a 	and	r3,r6,r3
81101fe4:	1a86703a 	and	r3,r3,r10
81101fe8:	183fe01e 	bne	r3,zero,81101f6c <__reset+0xfb0e1f6c>
81101fec:	10bfff04 	addi	r2,r2,-4
81101ff0:	21000104 	addi	r4,r4,4
81101ff4:	40bff636 	bltu	r8,r2,81101fd0 <__reset+0xfb0e1fd0>
81101ff8:	003fdb06 	br	81101f68 <__reset+0xfb0e1f68>
81101ffc:	3005883a 	mov	r2,r6
81102000:	003fd706 	br	81101f60 <__reset+0xfb0e1f60>

81102004 <memcpy>:
81102004:	defffd04 	addi	sp,sp,-12
81102008:	dfc00215 	stw	ra,8(sp)
8110200c:	dc400115 	stw	r17,4(sp)
81102010:	dc000015 	stw	r16,0(sp)
81102014:	00c003c4 	movi	r3,15
81102018:	2005883a 	mov	r2,r4
8110201c:	1980452e 	bgeu	r3,r6,81102134 <memcpy+0x130>
81102020:	2906b03a 	or	r3,r5,r4
81102024:	18c000cc 	andi	r3,r3,3
81102028:	1800441e 	bne	r3,zero,8110213c <memcpy+0x138>
8110202c:	347ffc04 	addi	r17,r6,-16
81102030:	8822d13a 	srli	r17,r17,4
81102034:	28c00104 	addi	r3,r5,4
81102038:	23400104 	addi	r13,r4,4
8110203c:	8820913a 	slli	r16,r17,4
81102040:	2b000204 	addi	r12,r5,8
81102044:	22c00204 	addi	r11,r4,8
81102048:	84000504 	addi	r16,r16,20
8110204c:	2a800304 	addi	r10,r5,12
81102050:	22400304 	addi	r9,r4,12
81102054:	2c21883a 	add	r16,r5,r16
81102058:	2811883a 	mov	r8,r5
8110205c:	200f883a 	mov	r7,r4
81102060:	41000017 	ldw	r4,0(r8)
81102064:	1fc00017 	ldw	ra,0(r3)
81102068:	63c00017 	ldw	r15,0(r12)
8110206c:	39000015 	stw	r4,0(r7)
81102070:	53800017 	ldw	r14,0(r10)
81102074:	6fc00015 	stw	ra,0(r13)
81102078:	5bc00015 	stw	r15,0(r11)
8110207c:	4b800015 	stw	r14,0(r9)
81102080:	18c00404 	addi	r3,r3,16
81102084:	39c00404 	addi	r7,r7,16
81102088:	42000404 	addi	r8,r8,16
8110208c:	6b400404 	addi	r13,r13,16
81102090:	63000404 	addi	r12,r12,16
81102094:	5ac00404 	addi	r11,r11,16
81102098:	52800404 	addi	r10,r10,16
8110209c:	4a400404 	addi	r9,r9,16
811020a0:	1c3fef1e 	bne	r3,r16,81102060 <__reset+0xfb0e2060>
811020a4:	89c00044 	addi	r7,r17,1
811020a8:	380e913a 	slli	r7,r7,4
811020ac:	310003cc 	andi	r4,r6,15
811020b0:	02c000c4 	movi	r11,3
811020b4:	11c7883a 	add	r3,r2,r7
811020b8:	29cb883a 	add	r5,r5,r7
811020bc:	5900212e 	bgeu	r11,r4,81102144 <memcpy+0x140>
811020c0:	1813883a 	mov	r9,r3
811020c4:	2811883a 	mov	r8,r5
811020c8:	200f883a 	mov	r7,r4
811020cc:	42800017 	ldw	r10,0(r8)
811020d0:	4a400104 	addi	r9,r9,4
811020d4:	39ffff04 	addi	r7,r7,-4
811020d8:	4abfff15 	stw	r10,-4(r9)
811020dc:	42000104 	addi	r8,r8,4
811020e0:	59fffa36 	bltu	r11,r7,811020cc <__reset+0xfb0e20cc>
811020e4:	213fff04 	addi	r4,r4,-4
811020e8:	2008d0ba 	srli	r4,r4,2
811020ec:	318000cc 	andi	r6,r6,3
811020f0:	21000044 	addi	r4,r4,1
811020f4:	2109883a 	add	r4,r4,r4
811020f8:	2109883a 	add	r4,r4,r4
811020fc:	1907883a 	add	r3,r3,r4
81102100:	290b883a 	add	r5,r5,r4
81102104:	30000626 	beq	r6,zero,81102120 <memcpy+0x11c>
81102108:	198d883a 	add	r6,r3,r6
8110210c:	29c00003 	ldbu	r7,0(r5)
81102110:	18c00044 	addi	r3,r3,1
81102114:	29400044 	addi	r5,r5,1
81102118:	19ffffc5 	stb	r7,-1(r3)
8110211c:	19bffb1e 	bne	r3,r6,8110210c <__reset+0xfb0e210c>
81102120:	dfc00217 	ldw	ra,8(sp)
81102124:	dc400117 	ldw	r17,4(sp)
81102128:	dc000017 	ldw	r16,0(sp)
8110212c:	dec00304 	addi	sp,sp,12
81102130:	f800283a 	ret
81102134:	2007883a 	mov	r3,r4
81102138:	003ff206 	br	81102104 <__reset+0xfb0e2104>
8110213c:	2007883a 	mov	r3,r4
81102140:	003ff106 	br	81102108 <__reset+0xfb0e2108>
81102144:	200d883a 	mov	r6,r4
81102148:	003fee06 	br	81102104 <__reset+0xfb0e2104>

8110214c <memmove>:
8110214c:	2005883a 	mov	r2,r4
81102150:	29000b2e 	bgeu	r5,r4,81102180 <memmove+0x34>
81102154:	298f883a 	add	r7,r5,r6
81102158:	21c0092e 	bgeu	r4,r7,81102180 <memmove+0x34>
8110215c:	2187883a 	add	r3,r4,r6
81102160:	198bc83a 	sub	r5,r3,r6
81102164:	30004826 	beq	r6,zero,81102288 <memmove+0x13c>
81102168:	39ffffc4 	addi	r7,r7,-1
8110216c:	39000003 	ldbu	r4,0(r7)
81102170:	18ffffc4 	addi	r3,r3,-1
81102174:	19000005 	stb	r4,0(r3)
81102178:	28fffb1e 	bne	r5,r3,81102168 <__reset+0xfb0e2168>
8110217c:	f800283a 	ret
81102180:	00c003c4 	movi	r3,15
81102184:	1980412e 	bgeu	r3,r6,8110228c <memmove+0x140>
81102188:	2886b03a 	or	r3,r5,r2
8110218c:	18c000cc 	andi	r3,r3,3
81102190:	1800401e 	bne	r3,zero,81102294 <memmove+0x148>
81102194:	33fffc04 	addi	r15,r6,-16
81102198:	781ed13a 	srli	r15,r15,4
8110219c:	28c00104 	addi	r3,r5,4
811021a0:	13400104 	addi	r13,r2,4
811021a4:	781c913a 	slli	r14,r15,4
811021a8:	2b000204 	addi	r12,r5,8
811021ac:	12c00204 	addi	r11,r2,8
811021b0:	73800504 	addi	r14,r14,20
811021b4:	2a800304 	addi	r10,r5,12
811021b8:	12400304 	addi	r9,r2,12
811021bc:	2b9d883a 	add	r14,r5,r14
811021c0:	2811883a 	mov	r8,r5
811021c4:	100f883a 	mov	r7,r2
811021c8:	41000017 	ldw	r4,0(r8)
811021cc:	39c00404 	addi	r7,r7,16
811021d0:	18c00404 	addi	r3,r3,16
811021d4:	393ffc15 	stw	r4,-16(r7)
811021d8:	193ffc17 	ldw	r4,-16(r3)
811021dc:	6b400404 	addi	r13,r13,16
811021e0:	5ac00404 	addi	r11,r11,16
811021e4:	693ffc15 	stw	r4,-16(r13)
811021e8:	61000017 	ldw	r4,0(r12)
811021ec:	4a400404 	addi	r9,r9,16
811021f0:	42000404 	addi	r8,r8,16
811021f4:	593ffc15 	stw	r4,-16(r11)
811021f8:	51000017 	ldw	r4,0(r10)
811021fc:	63000404 	addi	r12,r12,16
81102200:	52800404 	addi	r10,r10,16
81102204:	493ffc15 	stw	r4,-16(r9)
81102208:	1bbfef1e 	bne	r3,r14,811021c8 <__reset+0xfb0e21c8>
8110220c:	79000044 	addi	r4,r15,1
81102210:	2008913a 	slli	r4,r4,4
81102214:	328003cc 	andi	r10,r6,15
81102218:	02c000c4 	movi	r11,3
8110221c:	1107883a 	add	r3,r2,r4
81102220:	290b883a 	add	r5,r5,r4
81102224:	5a801e2e 	bgeu	r11,r10,811022a0 <memmove+0x154>
81102228:	1813883a 	mov	r9,r3
8110222c:	2811883a 	mov	r8,r5
81102230:	500f883a 	mov	r7,r10
81102234:	41000017 	ldw	r4,0(r8)
81102238:	4a400104 	addi	r9,r9,4
8110223c:	39ffff04 	addi	r7,r7,-4
81102240:	493fff15 	stw	r4,-4(r9)
81102244:	42000104 	addi	r8,r8,4
81102248:	59fffa36 	bltu	r11,r7,81102234 <__reset+0xfb0e2234>
8110224c:	513fff04 	addi	r4,r10,-4
81102250:	2008d0ba 	srli	r4,r4,2
81102254:	318000cc 	andi	r6,r6,3
81102258:	21000044 	addi	r4,r4,1
8110225c:	2109883a 	add	r4,r4,r4
81102260:	2109883a 	add	r4,r4,r4
81102264:	1907883a 	add	r3,r3,r4
81102268:	290b883a 	add	r5,r5,r4
8110226c:	30000b26 	beq	r6,zero,8110229c <memmove+0x150>
81102270:	198d883a 	add	r6,r3,r6
81102274:	29c00003 	ldbu	r7,0(r5)
81102278:	18c00044 	addi	r3,r3,1
8110227c:	29400044 	addi	r5,r5,1
81102280:	19ffffc5 	stb	r7,-1(r3)
81102284:	19bffb1e 	bne	r3,r6,81102274 <__reset+0xfb0e2274>
81102288:	f800283a 	ret
8110228c:	1007883a 	mov	r3,r2
81102290:	003ff606 	br	8110226c <__reset+0xfb0e226c>
81102294:	1007883a 	mov	r3,r2
81102298:	003ff506 	br	81102270 <__reset+0xfb0e2270>
8110229c:	f800283a 	ret
811022a0:	500d883a 	mov	r6,r10
811022a4:	003ff106 	br	8110226c <__reset+0xfb0e226c>

811022a8 <memset>:
811022a8:	20c000cc 	andi	r3,r4,3
811022ac:	2005883a 	mov	r2,r4
811022b0:	18004426 	beq	r3,zero,811023c4 <memset+0x11c>
811022b4:	31ffffc4 	addi	r7,r6,-1
811022b8:	30004026 	beq	r6,zero,811023bc <memset+0x114>
811022bc:	2813883a 	mov	r9,r5
811022c0:	200d883a 	mov	r6,r4
811022c4:	2007883a 	mov	r3,r4
811022c8:	00000406 	br	811022dc <memset+0x34>
811022cc:	3a3fffc4 	addi	r8,r7,-1
811022d0:	31800044 	addi	r6,r6,1
811022d4:	38003926 	beq	r7,zero,811023bc <memset+0x114>
811022d8:	400f883a 	mov	r7,r8
811022dc:	18c00044 	addi	r3,r3,1
811022e0:	32400005 	stb	r9,0(r6)
811022e4:	1a0000cc 	andi	r8,r3,3
811022e8:	403ff81e 	bne	r8,zero,811022cc <__reset+0xfb0e22cc>
811022ec:	010000c4 	movi	r4,3
811022f0:	21c02d2e 	bgeu	r4,r7,811023a8 <memset+0x100>
811022f4:	29003fcc 	andi	r4,r5,255
811022f8:	200c923a 	slli	r6,r4,8
811022fc:	3108b03a 	or	r4,r6,r4
81102300:	200c943a 	slli	r6,r4,16
81102304:	218cb03a 	or	r6,r4,r6
81102308:	010003c4 	movi	r4,15
8110230c:	21c0182e 	bgeu	r4,r7,81102370 <memset+0xc8>
81102310:	3b3ffc04 	addi	r12,r7,-16
81102314:	6018d13a 	srli	r12,r12,4
81102318:	1a000104 	addi	r8,r3,4
8110231c:	1ac00204 	addi	r11,r3,8
81102320:	6008913a 	slli	r4,r12,4
81102324:	1a800304 	addi	r10,r3,12
81102328:	1813883a 	mov	r9,r3
8110232c:	21000504 	addi	r4,r4,20
81102330:	1909883a 	add	r4,r3,r4
81102334:	49800015 	stw	r6,0(r9)
81102338:	41800015 	stw	r6,0(r8)
8110233c:	59800015 	stw	r6,0(r11)
81102340:	51800015 	stw	r6,0(r10)
81102344:	42000404 	addi	r8,r8,16
81102348:	4a400404 	addi	r9,r9,16
8110234c:	5ac00404 	addi	r11,r11,16
81102350:	52800404 	addi	r10,r10,16
81102354:	413ff71e 	bne	r8,r4,81102334 <__reset+0xfb0e2334>
81102358:	63000044 	addi	r12,r12,1
8110235c:	6018913a 	slli	r12,r12,4
81102360:	39c003cc 	andi	r7,r7,15
81102364:	010000c4 	movi	r4,3
81102368:	1b07883a 	add	r3,r3,r12
8110236c:	21c00e2e 	bgeu	r4,r7,811023a8 <memset+0x100>
81102370:	1813883a 	mov	r9,r3
81102374:	3811883a 	mov	r8,r7
81102378:	010000c4 	movi	r4,3
8110237c:	49800015 	stw	r6,0(r9)
81102380:	423fff04 	addi	r8,r8,-4
81102384:	4a400104 	addi	r9,r9,4
81102388:	223ffc36 	bltu	r4,r8,8110237c <__reset+0xfb0e237c>
8110238c:	393fff04 	addi	r4,r7,-4
81102390:	2008d0ba 	srli	r4,r4,2
81102394:	39c000cc 	andi	r7,r7,3
81102398:	21000044 	addi	r4,r4,1
8110239c:	2109883a 	add	r4,r4,r4
811023a0:	2109883a 	add	r4,r4,r4
811023a4:	1907883a 	add	r3,r3,r4
811023a8:	38000526 	beq	r7,zero,811023c0 <memset+0x118>
811023ac:	19cf883a 	add	r7,r3,r7
811023b0:	19400005 	stb	r5,0(r3)
811023b4:	18c00044 	addi	r3,r3,1
811023b8:	38fffd1e 	bne	r7,r3,811023b0 <__reset+0xfb0e23b0>
811023bc:	f800283a 	ret
811023c0:	f800283a 	ret
811023c4:	2007883a 	mov	r3,r4
811023c8:	300f883a 	mov	r7,r6
811023cc:	003fc706 	br	811022ec <__reset+0xfb0e22ec>

811023d0 <_realloc_r>:
811023d0:	defff604 	addi	sp,sp,-40
811023d4:	dc800215 	stw	r18,8(sp)
811023d8:	dfc00915 	stw	ra,36(sp)
811023dc:	df000815 	stw	fp,32(sp)
811023e0:	ddc00715 	stw	r23,28(sp)
811023e4:	dd800615 	stw	r22,24(sp)
811023e8:	dd400515 	stw	r21,20(sp)
811023ec:	dd000415 	stw	r20,16(sp)
811023f0:	dcc00315 	stw	r19,12(sp)
811023f4:	dc400115 	stw	r17,4(sp)
811023f8:	dc000015 	stw	r16,0(sp)
811023fc:	3025883a 	mov	r18,r6
81102400:	2800b726 	beq	r5,zero,811026e0 <_realloc_r+0x310>
81102404:	282b883a 	mov	r21,r5
81102408:	2029883a 	mov	r20,r4
8110240c:	1103e1c0 	call	81103e1c <__malloc_lock>
81102410:	a8bfff17 	ldw	r2,-4(r21)
81102414:	043fff04 	movi	r16,-4
81102418:	90c002c4 	addi	r3,r18,11
8110241c:	01000584 	movi	r4,22
81102420:	acfffe04 	addi	r19,r21,-8
81102424:	1420703a 	and	r16,r2,r16
81102428:	20c0332e 	bgeu	r4,r3,811024f8 <_realloc_r+0x128>
8110242c:	047ffe04 	movi	r17,-8
81102430:	1c62703a 	and	r17,r3,r17
81102434:	8807883a 	mov	r3,r17
81102438:	88005816 	blt	r17,zero,8110259c <_realloc_r+0x1cc>
8110243c:	8c805736 	bltu	r17,r18,8110259c <_realloc_r+0x1cc>
81102440:	80c0300e 	bge	r16,r3,81102504 <_realloc_r+0x134>
81102444:	07204474 	movhi	fp,33041
81102448:	e7263404 	addi	fp,fp,-26416
8110244c:	e1c00217 	ldw	r7,8(fp)
81102450:	9c09883a 	add	r4,r19,r16
81102454:	22000117 	ldw	r8,4(r4)
81102458:	21c06326 	beq	r4,r7,811025e8 <_realloc_r+0x218>
8110245c:	017fff84 	movi	r5,-2
81102460:	414a703a 	and	r5,r8,r5
81102464:	214b883a 	add	r5,r4,r5
81102468:	29800117 	ldw	r6,4(r5)
8110246c:	3180004c 	andi	r6,r6,1
81102470:	30003f26 	beq	r6,zero,81102570 <_realloc_r+0x1a0>
81102474:	1080004c 	andi	r2,r2,1
81102478:	10008326 	beq	r2,zero,81102688 <_realloc_r+0x2b8>
8110247c:	900b883a 	mov	r5,r18
81102480:	a009883a 	mov	r4,r20
81102484:	11017140 	call	81101714 <_malloc_r>
81102488:	1025883a 	mov	r18,r2
8110248c:	10011e26 	beq	r2,zero,81102908 <_realloc_r+0x538>
81102490:	a93fff17 	ldw	r4,-4(r21)
81102494:	10fffe04 	addi	r3,r2,-8
81102498:	00bfff84 	movi	r2,-2
8110249c:	2084703a 	and	r2,r4,r2
811024a0:	9885883a 	add	r2,r19,r2
811024a4:	1880ee26 	beq	r3,r2,81102860 <_realloc_r+0x490>
811024a8:	81bfff04 	addi	r6,r16,-4
811024ac:	00800904 	movi	r2,36
811024b0:	1180b836 	bltu	r2,r6,81102794 <_realloc_r+0x3c4>
811024b4:	00c004c4 	movi	r3,19
811024b8:	19809636 	bltu	r3,r6,81102714 <_realloc_r+0x344>
811024bc:	9005883a 	mov	r2,r18
811024c0:	a807883a 	mov	r3,r21
811024c4:	19000017 	ldw	r4,0(r3)
811024c8:	11000015 	stw	r4,0(r2)
811024cc:	19000117 	ldw	r4,4(r3)
811024d0:	11000115 	stw	r4,4(r2)
811024d4:	18c00217 	ldw	r3,8(r3)
811024d8:	10c00215 	stw	r3,8(r2)
811024dc:	a80b883a 	mov	r5,r21
811024e0:	a009883a 	mov	r4,r20
811024e4:	110319c0 	call	8110319c <_free_r>
811024e8:	a009883a 	mov	r4,r20
811024ec:	1103e400 	call	81103e40 <__malloc_unlock>
811024f0:	9005883a 	mov	r2,r18
811024f4:	00001206 	br	81102540 <_realloc_r+0x170>
811024f8:	00c00404 	movi	r3,16
811024fc:	1823883a 	mov	r17,r3
81102500:	003fce06 	br	8110243c <__reset+0xfb0e243c>
81102504:	a825883a 	mov	r18,r21
81102508:	8445c83a 	sub	r2,r16,r17
8110250c:	00c003c4 	movi	r3,15
81102510:	18802636 	bltu	r3,r2,811025ac <_realloc_r+0x1dc>
81102514:	99800117 	ldw	r6,4(r19)
81102518:	9c07883a 	add	r3,r19,r16
8110251c:	3180004c 	andi	r6,r6,1
81102520:	3420b03a 	or	r16,r6,r16
81102524:	9c000115 	stw	r16,4(r19)
81102528:	18800117 	ldw	r2,4(r3)
8110252c:	10800054 	ori	r2,r2,1
81102530:	18800115 	stw	r2,4(r3)
81102534:	a009883a 	mov	r4,r20
81102538:	1103e400 	call	81103e40 <__malloc_unlock>
8110253c:	9005883a 	mov	r2,r18
81102540:	dfc00917 	ldw	ra,36(sp)
81102544:	df000817 	ldw	fp,32(sp)
81102548:	ddc00717 	ldw	r23,28(sp)
8110254c:	dd800617 	ldw	r22,24(sp)
81102550:	dd400517 	ldw	r21,20(sp)
81102554:	dd000417 	ldw	r20,16(sp)
81102558:	dcc00317 	ldw	r19,12(sp)
8110255c:	dc800217 	ldw	r18,8(sp)
81102560:	dc400117 	ldw	r17,4(sp)
81102564:	dc000017 	ldw	r16,0(sp)
81102568:	dec00a04 	addi	sp,sp,40
8110256c:	f800283a 	ret
81102570:	017fff04 	movi	r5,-4
81102574:	414a703a 	and	r5,r8,r5
81102578:	814d883a 	add	r6,r16,r5
8110257c:	30c01f16 	blt	r6,r3,811025fc <_realloc_r+0x22c>
81102580:	20800317 	ldw	r2,12(r4)
81102584:	20c00217 	ldw	r3,8(r4)
81102588:	a825883a 	mov	r18,r21
8110258c:	3021883a 	mov	r16,r6
81102590:	18800315 	stw	r2,12(r3)
81102594:	10c00215 	stw	r3,8(r2)
81102598:	003fdb06 	br	81102508 <__reset+0xfb0e2508>
8110259c:	00800304 	movi	r2,12
811025a0:	a0800015 	stw	r2,0(r20)
811025a4:	0005883a 	mov	r2,zero
811025a8:	003fe506 	br	81102540 <__reset+0xfb0e2540>
811025ac:	98c00117 	ldw	r3,4(r19)
811025b0:	9c4b883a 	add	r5,r19,r17
811025b4:	11000054 	ori	r4,r2,1
811025b8:	18c0004c 	andi	r3,r3,1
811025bc:	1c62b03a 	or	r17,r3,r17
811025c0:	9c400115 	stw	r17,4(r19)
811025c4:	29000115 	stw	r4,4(r5)
811025c8:	2885883a 	add	r2,r5,r2
811025cc:	10c00117 	ldw	r3,4(r2)
811025d0:	29400204 	addi	r5,r5,8
811025d4:	a009883a 	mov	r4,r20
811025d8:	18c00054 	ori	r3,r3,1
811025dc:	10c00115 	stw	r3,4(r2)
811025e0:	110319c0 	call	8110319c <_free_r>
811025e4:	003fd306 	br	81102534 <__reset+0xfb0e2534>
811025e8:	017fff04 	movi	r5,-4
811025ec:	414a703a 	and	r5,r8,r5
811025f0:	89800404 	addi	r6,r17,16
811025f4:	8151883a 	add	r8,r16,r5
811025f8:	4180590e 	bge	r8,r6,81102760 <_realloc_r+0x390>
811025fc:	1080004c 	andi	r2,r2,1
81102600:	103f9e1e 	bne	r2,zero,8110247c <__reset+0xfb0e247c>
81102604:	adbffe17 	ldw	r22,-8(r21)
81102608:	00bfff04 	movi	r2,-4
8110260c:	9dadc83a 	sub	r22,r19,r22
81102610:	b1800117 	ldw	r6,4(r22)
81102614:	3084703a 	and	r2,r6,r2
81102618:	20002026 	beq	r4,zero,8110269c <_realloc_r+0x2cc>
8110261c:	80af883a 	add	r23,r16,r2
81102620:	b96f883a 	add	r23,r23,r5
81102624:	21c05f26 	beq	r4,r7,811027a4 <_realloc_r+0x3d4>
81102628:	b8c01c16 	blt	r23,r3,8110269c <_realloc_r+0x2cc>
8110262c:	20800317 	ldw	r2,12(r4)
81102630:	20c00217 	ldw	r3,8(r4)
81102634:	81bfff04 	addi	r6,r16,-4
81102638:	01000904 	movi	r4,36
8110263c:	18800315 	stw	r2,12(r3)
81102640:	10c00215 	stw	r3,8(r2)
81102644:	b0c00217 	ldw	r3,8(r22)
81102648:	b0800317 	ldw	r2,12(r22)
8110264c:	b4800204 	addi	r18,r22,8
81102650:	18800315 	stw	r2,12(r3)
81102654:	10c00215 	stw	r3,8(r2)
81102658:	21801b36 	bltu	r4,r6,811026c8 <_realloc_r+0x2f8>
8110265c:	008004c4 	movi	r2,19
81102660:	1180352e 	bgeu	r2,r6,81102738 <_realloc_r+0x368>
81102664:	a8800017 	ldw	r2,0(r21)
81102668:	b0800215 	stw	r2,8(r22)
8110266c:	a8800117 	ldw	r2,4(r21)
81102670:	b0800315 	stw	r2,12(r22)
81102674:	008006c4 	movi	r2,27
81102678:	11807f36 	bltu	r2,r6,81102878 <_realloc_r+0x4a8>
8110267c:	b0800404 	addi	r2,r22,16
81102680:	ad400204 	addi	r21,r21,8
81102684:	00002d06 	br	8110273c <_realloc_r+0x36c>
81102688:	adbffe17 	ldw	r22,-8(r21)
8110268c:	00bfff04 	movi	r2,-4
81102690:	9dadc83a 	sub	r22,r19,r22
81102694:	b1000117 	ldw	r4,4(r22)
81102698:	2084703a 	and	r2,r4,r2
8110269c:	b03f7726 	beq	r22,zero,8110247c <__reset+0xfb0e247c>
811026a0:	80af883a 	add	r23,r16,r2
811026a4:	b8ff7516 	blt	r23,r3,8110247c <__reset+0xfb0e247c>
811026a8:	b0800317 	ldw	r2,12(r22)
811026ac:	b0c00217 	ldw	r3,8(r22)
811026b0:	81bfff04 	addi	r6,r16,-4
811026b4:	01000904 	movi	r4,36
811026b8:	18800315 	stw	r2,12(r3)
811026bc:	10c00215 	stw	r3,8(r2)
811026c0:	b4800204 	addi	r18,r22,8
811026c4:	21bfe52e 	bgeu	r4,r6,8110265c <__reset+0xfb0e265c>
811026c8:	a80b883a 	mov	r5,r21
811026cc:	9009883a 	mov	r4,r18
811026d0:	110214c0 	call	8110214c <memmove>
811026d4:	b821883a 	mov	r16,r23
811026d8:	b027883a 	mov	r19,r22
811026dc:	003f8a06 	br	81102508 <__reset+0xfb0e2508>
811026e0:	300b883a 	mov	r5,r6
811026e4:	dfc00917 	ldw	ra,36(sp)
811026e8:	df000817 	ldw	fp,32(sp)
811026ec:	ddc00717 	ldw	r23,28(sp)
811026f0:	dd800617 	ldw	r22,24(sp)
811026f4:	dd400517 	ldw	r21,20(sp)
811026f8:	dd000417 	ldw	r20,16(sp)
811026fc:	dcc00317 	ldw	r19,12(sp)
81102700:	dc800217 	ldw	r18,8(sp)
81102704:	dc400117 	ldw	r17,4(sp)
81102708:	dc000017 	ldw	r16,0(sp)
8110270c:	dec00a04 	addi	sp,sp,40
81102710:	11017141 	jmpi	81101714 <_malloc_r>
81102714:	a8c00017 	ldw	r3,0(r21)
81102718:	90c00015 	stw	r3,0(r18)
8110271c:	a8c00117 	ldw	r3,4(r21)
81102720:	90c00115 	stw	r3,4(r18)
81102724:	00c006c4 	movi	r3,27
81102728:	19804536 	bltu	r3,r6,81102840 <_realloc_r+0x470>
8110272c:	90800204 	addi	r2,r18,8
81102730:	a8c00204 	addi	r3,r21,8
81102734:	003f6306 	br	811024c4 <__reset+0xfb0e24c4>
81102738:	9005883a 	mov	r2,r18
8110273c:	a8c00017 	ldw	r3,0(r21)
81102740:	b821883a 	mov	r16,r23
81102744:	b027883a 	mov	r19,r22
81102748:	10c00015 	stw	r3,0(r2)
8110274c:	a8c00117 	ldw	r3,4(r21)
81102750:	10c00115 	stw	r3,4(r2)
81102754:	a8c00217 	ldw	r3,8(r21)
81102758:	10c00215 	stw	r3,8(r2)
8110275c:	003f6a06 	br	81102508 <__reset+0xfb0e2508>
81102760:	9c67883a 	add	r19,r19,r17
81102764:	4445c83a 	sub	r2,r8,r17
81102768:	e4c00215 	stw	r19,8(fp)
8110276c:	10800054 	ori	r2,r2,1
81102770:	98800115 	stw	r2,4(r19)
81102774:	a8bfff17 	ldw	r2,-4(r21)
81102778:	a009883a 	mov	r4,r20
8110277c:	1080004c 	andi	r2,r2,1
81102780:	1462b03a 	or	r17,r2,r17
81102784:	ac7fff15 	stw	r17,-4(r21)
81102788:	1103e400 	call	81103e40 <__malloc_unlock>
8110278c:	a805883a 	mov	r2,r21
81102790:	003f6b06 	br	81102540 <__reset+0xfb0e2540>
81102794:	a80b883a 	mov	r5,r21
81102798:	9009883a 	mov	r4,r18
8110279c:	110214c0 	call	8110214c <memmove>
811027a0:	003f4e06 	br	811024dc <__reset+0xfb0e24dc>
811027a4:	89000404 	addi	r4,r17,16
811027a8:	b93fbc16 	blt	r23,r4,8110269c <__reset+0xfb0e269c>
811027ac:	b0800317 	ldw	r2,12(r22)
811027b0:	b0c00217 	ldw	r3,8(r22)
811027b4:	81bfff04 	addi	r6,r16,-4
811027b8:	01000904 	movi	r4,36
811027bc:	18800315 	stw	r2,12(r3)
811027c0:	10c00215 	stw	r3,8(r2)
811027c4:	b4800204 	addi	r18,r22,8
811027c8:	21804336 	bltu	r4,r6,811028d8 <_realloc_r+0x508>
811027cc:	008004c4 	movi	r2,19
811027d0:	11803f2e 	bgeu	r2,r6,811028d0 <_realloc_r+0x500>
811027d4:	a8800017 	ldw	r2,0(r21)
811027d8:	b0800215 	stw	r2,8(r22)
811027dc:	a8800117 	ldw	r2,4(r21)
811027e0:	b0800315 	stw	r2,12(r22)
811027e4:	008006c4 	movi	r2,27
811027e8:	11803f36 	bltu	r2,r6,811028e8 <_realloc_r+0x518>
811027ec:	b0800404 	addi	r2,r22,16
811027f0:	ad400204 	addi	r21,r21,8
811027f4:	a8c00017 	ldw	r3,0(r21)
811027f8:	10c00015 	stw	r3,0(r2)
811027fc:	a8c00117 	ldw	r3,4(r21)
81102800:	10c00115 	stw	r3,4(r2)
81102804:	a8c00217 	ldw	r3,8(r21)
81102808:	10c00215 	stw	r3,8(r2)
8110280c:	b447883a 	add	r3,r22,r17
81102810:	bc45c83a 	sub	r2,r23,r17
81102814:	e0c00215 	stw	r3,8(fp)
81102818:	10800054 	ori	r2,r2,1
8110281c:	18800115 	stw	r2,4(r3)
81102820:	b0800117 	ldw	r2,4(r22)
81102824:	a009883a 	mov	r4,r20
81102828:	1080004c 	andi	r2,r2,1
8110282c:	1462b03a 	or	r17,r2,r17
81102830:	b4400115 	stw	r17,4(r22)
81102834:	1103e400 	call	81103e40 <__malloc_unlock>
81102838:	9005883a 	mov	r2,r18
8110283c:	003f4006 	br	81102540 <__reset+0xfb0e2540>
81102840:	a8c00217 	ldw	r3,8(r21)
81102844:	90c00215 	stw	r3,8(r18)
81102848:	a8c00317 	ldw	r3,12(r21)
8110284c:	90c00315 	stw	r3,12(r18)
81102850:	30801126 	beq	r6,r2,81102898 <_realloc_r+0x4c8>
81102854:	90800404 	addi	r2,r18,16
81102858:	a8c00404 	addi	r3,r21,16
8110285c:	003f1906 	br	811024c4 <__reset+0xfb0e24c4>
81102860:	90ffff17 	ldw	r3,-4(r18)
81102864:	00bfff04 	movi	r2,-4
81102868:	a825883a 	mov	r18,r21
8110286c:	1884703a 	and	r2,r3,r2
81102870:	80a1883a 	add	r16,r16,r2
81102874:	003f2406 	br	81102508 <__reset+0xfb0e2508>
81102878:	a8800217 	ldw	r2,8(r21)
8110287c:	b0800415 	stw	r2,16(r22)
81102880:	a8800317 	ldw	r2,12(r21)
81102884:	b0800515 	stw	r2,20(r22)
81102888:	31000a26 	beq	r6,r4,811028b4 <_realloc_r+0x4e4>
8110288c:	b0800604 	addi	r2,r22,24
81102890:	ad400404 	addi	r21,r21,16
81102894:	003fa906 	br	8110273c <__reset+0xfb0e273c>
81102898:	a9000417 	ldw	r4,16(r21)
8110289c:	90800604 	addi	r2,r18,24
811028a0:	a8c00604 	addi	r3,r21,24
811028a4:	91000415 	stw	r4,16(r18)
811028a8:	a9000517 	ldw	r4,20(r21)
811028ac:	91000515 	stw	r4,20(r18)
811028b0:	003f0406 	br	811024c4 <__reset+0xfb0e24c4>
811028b4:	a8c00417 	ldw	r3,16(r21)
811028b8:	ad400604 	addi	r21,r21,24
811028bc:	b0800804 	addi	r2,r22,32
811028c0:	b0c00615 	stw	r3,24(r22)
811028c4:	a8ffff17 	ldw	r3,-4(r21)
811028c8:	b0c00715 	stw	r3,28(r22)
811028cc:	003f9b06 	br	8110273c <__reset+0xfb0e273c>
811028d0:	9005883a 	mov	r2,r18
811028d4:	003fc706 	br	811027f4 <__reset+0xfb0e27f4>
811028d8:	a80b883a 	mov	r5,r21
811028dc:	9009883a 	mov	r4,r18
811028e0:	110214c0 	call	8110214c <memmove>
811028e4:	003fc906 	br	8110280c <__reset+0xfb0e280c>
811028e8:	a8800217 	ldw	r2,8(r21)
811028ec:	b0800415 	stw	r2,16(r22)
811028f0:	a8800317 	ldw	r2,12(r21)
811028f4:	b0800515 	stw	r2,20(r22)
811028f8:	31000726 	beq	r6,r4,81102918 <_realloc_r+0x548>
811028fc:	b0800604 	addi	r2,r22,24
81102900:	ad400404 	addi	r21,r21,16
81102904:	003fbb06 	br	811027f4 <__reset+0xfb0e27f4>
81102908:	a009883a 	mov	r4,r20
8110290c:	1103e400 	call	81103e40 <__malloc_unlock>
81102910:	0005883a 	mov	r2,zero
81102914:	003f0a06 	br	81102540 <__reset+0xfb0e2540>
81102918:	a8c00417 	ldw	r3,16(r21)
8110291c:	ad400604 	addi	r21,r21,24
81102920:	b0800804 	addi	r2,r22,32
81102924:	b0c00615 	stw	r3,24(r22)
81102928:	a8ffff17 	ldw	r3,-4(r21)
8110292c:	b0c00715 	stw	r3,28(r22)
81102930:	003fb006 	br	811027f4 <__reset+0xfb0e27f4>

81102934 <_sbrk_r>:
81102934:	defffd04 	addi	sp,sp,-12
81102938:	dc000015 	stw	r16,0(sp)
8110293c:	04204474 	movhi	r16,33041
81102940:	dc400115 	stw	r17,4(sp)
81102944:	842bfd04 	addi	r16,r16,-20492
81102948:	2023883a 	mov	r17,r4
8110294c:	2809883a 	mov	r4,r5
81102950:	dfc00215 	stw	ra,8(sp)
81102954:	80000015 	stw	zero,0(r16)
81102958:	11040000 	call	81104000 <sbrk>
8110295c:	00ffffc4 	movi	r3,-1
81102960:	10c00526 	beq	r2,r3,81102978 <_sbrk_r+0x44>
81102964:	dfc00217 	ldw	ra,8(sp)
81102968:	dc400117 	ldw	r17,4(sp)
8110296c:	dc000017 	ldw	r16,0(sp)
81102970:	dec00304 	addi	sp,sp,12
81102974:	f800283a 	ret
81102978:	80c00017 	ldw	r3,0(r16)
8110297c:	183ff926 	beq	r3,zero,81102964 <__reset+0xfb0e2964>
81102980:	88c00015 	stw	r3,0(r17)
81102984:	003ff706 	br	81102964 <__reset+0xfb0e2964>

81102988 <__sread>:
81102988:	defffe04 	addi	sp,sp,-8
8110298c:	dc000015 	stw	r16,0(sp)
81102990:	2821883a 	mov	r16,r5
81102994:	2940038f 	ldh	r5,14(r5)
81102998:	dfc00115 	stw	ra,4(sp)
8110299c:	11036c80 	call	811036c8 <_read_r>
811029a0:	10000716 	blt	r2,zero,811029c0 <__sread+0x38>
811029a4:	80c01417 	ldw	r3,80(r16)
811029a8:	1887883a 	add	r3,r3,r2
811029ac:	80c01415 	stw	r3,80(r16)
811029b0:	dfc00117 	ldw	ra,4(sp)
811029b4:	dc000017 	ldw	r16,0(sp)
811029b8:	dec00204 	addi	sp,sp,8
811029bc:	f800283a 	ret
811029c0:	80c0030b 	ldhu	r3,12(r16)
811029c4:	18fbffcc 	andi	r3,r3,61439
811029c8:	80c0030d 	sth	r3,12(r16)
811029cc:	dfc00117 	ldw	ra,4(sp)
811029d0:	dc000017 	ldw	r16,0(sp)
811029d4:	dec00204 	addi	sp,sp,8
811029d8:	f800283a 	ret

811029dc <__seofread>:
811029dc:	0005883a 	mov	r2,zero
811029e0:	f800283a 	ret

811029e4 <__swrite>:
811029e4:	2880030b 	ldhu	r2,12(r5)
811029e8:	defffb04 	addi	sp,sp,-20
811029ec:	dcc00315 	stw	r19,12(sp)
811029f0:	dc800215 	stw	r18,8(sp)
811029f4:	dc400115 	stw	r17,4(sp)
811029f8:	dc000015 	stw	r16,0(sp)
811029fc:	dfc00415 	stw	ra,16(sp)
81102a00:	10c0400c 	andi	r3,r2,256
81102a04:	2821883a 	mov	r16,r5
81102a08:	2023883a 	mov	r17,r4
81102a0c:	3025883a 	mov	r18,r6
81102a10:	3827883a 	mov	r19,r7
81102a14:	18000526 	beq	r3,zero,81102a2c <__swrite+0x48>
81102a18:	2940038f 	ldh	r5,14(r5)
81102a1c:	01c00084 	movi	r7,2
81102a20:	000d883a 	mov	r6,zero
81102a24:	11034ac0 	call	811034ac <_lseek_r>
81102a28:	8080030b 	ldhu	r2,12(r16)
81102a2c:	8140038f 	ldh	r5,14(r16)
81102a30:	10bbffcc 	andi	r2,r2,61439
81102a34:	980f883a 	mov	r7,r19
81102a38:	900d883a 	mov	r6,r18
81102a3c:	8809883a 	mov	r4,r17
81102a40:	8080030d 	sth	r2,12(r16)
81102a44:	dfc00417 	ldw	ra,16(sp)
81102a48:	dcc00317 	ldw	r19,12(sp)
81102a4c:	dc800217 	ldw	r18,8(sp)
81102a50:	dc400117 	ldw	r17,4(sp)
81102a54:	dc000017 	ldw	r16,0(sp)
81102a58:	dec00504 	addi	sp,sp,20
81102a5c:	1102ac41 	jmpi	81102ac4 <_write_r>

81102a60 <__sseek>:
81102a60:	defffe04 	addi	sp,sp,-8
81102a64:	dc000015 	stw	r16,0(sp)
81102a68:	2821883a 	mov	r16,r5
81102a6c:	2940038f 	ldh	r5,14(r5)
81102a70:	dfc00115 	stw	ra,4(sp)
81102a74:	11034ac0 	call	811034ac <_lseek_r>
81102a78:	00ffffc4 	movi	r3,-1
81102a7c:	10c00826 	beq	r2,r3,81102aa0 <__sseek+0x40>
81102a80:	80c0030b 	ldhu	r3,12(r16)
81102a84:	80801415 	stw	r2,80(r16)
81102a88:	18c40014 	ori	r3,r3,4096
81102a8c:	80c0030d 	sth	r3,12(r16)
81102a90:	dfc00117 	ldw	ra,4(sp)
81102a94:	dc000017 	ldw	r16,0(sp)
81102a98:	dec00204 	addi	sp,sp,8
81102a9c:	f800283a 	ret
81102aa0:	80c0030b 	ldhu	r3,12(r16)
81102aa4:	18fbffcc 	andi	r3,r3,61439
81102aa8:	80c0030d 	sth	r3,12(r16)
81102aac:	dfc00117 	ldw	ra,4(sp)
81102ab0:	dc000017 	ldw	r16,0(sp)
81102ab4:	dec00204 	addi	sp,sp,8
81102ab8:	f800283a 	ret

81102abc <__sclose>:
81102abc:	2940038f 	ldh	r5,14(r5)
81102ac0:	1102c781 	jmpi	81102c78 <_close_r>

81102ac4 <_write_r>:
81102ac4:	defffd04 	addi	sp,sp,-12
81102ac8:	2805883a 	mov	r2,r5
81102acc:	dc000015 	stw	r16,0(sp)
81102ad0:	04204474 	movhi	r16,33041
81102ad4:	dc400115 	stw	r17,4(sp)
81102ad8:	300b883a 	mov	r5,r6
81102adc:	842bfd04 	addi	r16,r16,-20492
81102ae0:	2023883a 	mov	r17,r4
81102ae4:	380d883a 	mov	r6,r7
81102ae8:	1009883a 	mov	r4,r2
81102aec:	dfc00215 	stw	ra,8(sp)
81102af0:	80000015 	stw	zero,0(r16)
81102af4:	11040ec0 	call	811040ec <write>
81102af8:	00ffffc4 	movi	r3,-1
81102afc:	10c00526 	beq	r2,r3,81102b14 <_write_r+0x50>
81102b00:	dfc00217 	ldw	ra,8(sp)
81102b04:	dc400117 	ldw	r17,4(sp)
81102b08:	dc000017 	ldw	r16,0(sp)
81102b0c:	dec00304 	addi	sp,sp,12
81102b10:	f800283a 	ret
81102b14:	80c00017 	ldw	r3,0(r16)
81102b18:	183ff926 	beq	r3,zero,81102b00 <__reset+0xfb0e2b00>
81102b1c:	88c00015 	stw	r3,0(r17)
81102b20:	003ff706 	br	81102b00 <__reset+0xfb0e2b00>

81102b24 <__swsetup_r>:
81102b24:	00a04474 	movhi	r2,33041
81102b28:	defffd04 	addi	sp,sp,-12
81102b2c:	10abe904 	addi	r2,r2,-20572
81102b30:	dc400115 	stw	r17,4(sp)
81102b34:	2023883a 	mov	r17,r4
81102b38:	11000017 	ldw	r4,0(r2)
81102b3c:	dc000015 	stw	r16,0(sp)
81102b40:	dfc00215 	stw	ra,8(sp)
81102b44:	2821883a 	mov	r16,r5
81102b48:	20000226 	beq	r4,zero,81102b54 <__swsetup_r+0x30>
81102b4c:	20800e17 	ldw	r2,56(r4)
81102b50:	10003126 	beq	r2,zero,81102c18 <__swsetup_r+0xf4>
81102b54:	8080030b 	ldhu	r2,12(r16)
81102b58:	10c0020c 	andi	r3,r2,8
81102b5c:	1009883a 	mov	r4,r2
81102b60:	18000f26 	beq	r3,zero,81102ba0 <__swsetup_r+0x7c>
81102b64:	80c00417 	ldw	r3,16(r16)
81102b68:	18001526 	beq	r3,zero,81102bc0 <__swsetup_r+0x9c>
81102b6c:	1100004c 	andi	r4,r2,1
81102b70:	20001c1e 	bne	r4,zero,81102be4 <__swsetup_r+0xc0>
81102b74:	1080008c 	andi	r2,r2,2
81102b78:	1000291e 	bne	r2,zero,81102c20 <__swsetup_r+0xfc>
81102b7c:	80800517 	ldw	r2,20(r16)
81102b80:	80800215 	stw	r2,8(r16)
81102b84:	18001c26 	beq	r3,zero,81102bf8 <__swsetup_r+0xd4>
81102b88:	0005883a 	mov	r2,zero
81102b8c:	dfc00217 	ldw	ra,8(sp)
81102b90:	dc400117 	ldw	r17,4(sp)
81102b94:	dc000017 	ldw	r16,0(sp)
81102b98:	dec00304 	addi	sp,sp,12
81102b9c:	f800283a 	ret
81102ba0:	2080040c 	andi	r2,r4,16
81102ba4:	10002e26 	beq	r2,zero,81102c60 <__swsetup_r+0x13c>
81102ba8:	2080010c 	andi	r2,r4,4
81102bac:	10001e1e 	bne	r2,zero,81102c28 <__swsetup_r+0x104>
81102bb0:	80c00417 	ldw	r3,16(r16)
81102bb4:	20800214 	ori	r2,r4,8
81102bb8:	8080030d 	sth	r2,12(r16)
81102bbc:	183feb1e 	bne	r3,zero,81102b6c <__reset+0xfb0e2b6c>
81102bc0:	1100a00c 	andi	r4,r2,640
81102bc4:	01408004 	movi	r5,512
81102bc8:	217fe826 	beq	r4,r5,81102b6c <__reset+0xfb0e2b6c>
81102bcc:	800b883a 	mov	r5,r16
81102bd0:	8809883a 	mov	r4,r17
81102bd4:	110350c0 	call	8110350c <__smakebuf_r>
81102bd8:	8080030b 	ldhu	r2,12(r16)
81102bdc:	80c00417 	ldw	r3,16(r16)
81102be0:	003fe206 	br	81102b6c <__reset+0xfb0e2b6c>
81102be4:	80800517 	ldw	r2,20(r16)
81102be8:	80000215 	stw	zero,8(r16)
81102bec:	0085c83a 	sub	r2,zero,r2
81102bf0:	80800615 	stw	r2,24(r16)
81102bf4:	183fe41e 	bne	r3,zero,81102b88 <__reset+0xfb0e2b88>
81102bf8:	80c0030b 	ldhu	r3,12(r16)
81102bfc:	0005883a 	mov	r2,zero
81102c00:	1900200c 	andi	r4,r3,128
81102c04:	203fe126 	beq	r4,zero,81102b8c <__reset+0xfb0e2b8c>
81102c08:	18c01014 	ori	r3,r3,64
81102c0c:	80c0030d 	sth	r3,12(r16)
81102c10:	00bfffc4 	movi	r2,-1
81102c14:	003fdd06 	br	81102b8c <__reset+0xfb0e2b8c>
81102c18:	11010800 	call	81101080 <__sinit>
81102c1c:	003fcd06 	br	81102b54 <__reset+0xfb0e2b54>
81102c20:	0005883a 	mov	r2,zero
81102c24:	003fd606 	br	81102b80 <__reset+0xfb0e2b80>
81102c28:	81400c17 	ldw	r5,48(r16)
81102c2c:	28000626 	beq	r5,zero,81102c48 <__swsetup_r+0x124>
81102c30:	80801004 	addi	r2,r16,64
81102c34:	28800326 	beq	r5,r2,81102c44 <__swsetup_r+0x120>
81102c38:	8809883a 	mov	r4,r17
81102c3c:	110319c0 	call	8110319c <_free_r>
81102c40:	8100030b 	ldhu	r4,12(r16)
81102c44:	80000c15 	stw	zero,48(r16)
81102c48:	80c00417 	ldw	r3,16(r16)
81102c4c:	00bff6c4 	movi	r2,-37
81102c50:	1108703a 	and	r4,r2,r4
81102c54:	80000115 	stw	zero,4(r16)
81102c58:	80c00015 	stw	r3,0(r16)
81102c5c:	003fd506 	br	81102bb4 <__reset+0xfb0e2bb4>
81102c60:	00800244 	movi	r2,9
81102c64:	88800015 	stw	r2,0(r17)
81102c68:	20801014 	ori	r2,r4,64
81102c6c:	8080030d 	sth	r2,12(r16)
81102c70:	00bfffc4 	movi	r2,-1
81102c74:	003fc506 	br	81102b8c <__reset+0xfb0e2b8c>

81102c78 <_close_r>:
81102c78:	defffd04 	addi	sp,sp,-12
81102c7c:	dc000015 	stw	r16,0(sp)
81102c80:	04204474 	movhi	r16,33041
81102c84:	dc400115 	stw	r17,4(sp)
81102c88:	842bfd04 	addi	r16,r16,-20492
81102c8c:	2023883a 	mov	r17,r4
81102c90:	2809883a 	mov	r4,r5
81102c94:	dfc00215 	stw	ra,8(sp)
81102c98:	80000015 	stw	zero,0(r16)
81102c9c:	11039c80 	call	811039c8 <close>
81102ca0:	00ffffc4 	movi	r3,-1
81102ca4:	10c00526 	beq	r2,r3,81102cbc <_close_r+0x44>
81102ca8:	dfc00217 	ldw	ra,8(sp)
81102cac:	dc400117 	ldw	r17,4(sp)
81102cb0:	dc000017 	ldw	r16,0(sp)
81102cb4:	dec00304 	addi	sp,sp,12
81102cb8:	f800283a 	ret
81102cbc:	80c00017 	ldw	r3,0(r16)
81102cc0:	183ff926 	beq	r3,zero,81102ca8 <__reset+0xfb0e2ca8>
81102cc4:	88c00015 	stw	r3,0(r17)
81102cc8:	003ff706 	br	81102ca8 <__reset+0xfb0e2ca8>

81102ccc <_fclose_r>:
81102ccc:	28003926 	beq	r5,zero,81102db4 <_fclose_r+0xe8>
81102cd0:	defffc04 	addi	sp,sp,-16
81102cd4:	dc400115 	stw	r17,4(sp)
81102cd8:	dc000015 	stw	r16,0(sp)
81102cdc:	dfc00315 	stw	ra,12(sp)
81102ce0:	dc800215 	stw	r18,8(sp)
81102ce4:	2023883a 	mov	r17,r4
81102ce8:	2821883a 	mov	r16,r5
81102cec:	20000226 	beq	r4,zero,81102cf8 <_fclose_r+0x2c>
81102cf0:	20800e17 	ldw	r2,56(r4)
81102cf4:	10002726 	beq	r2,zero,81102d94 <_fclose_r+0xc8>
81102cf8:	8080030f 	ldh	r2,12(r16)
81102cfc:	1000071e 	bne	r2,zero,81102d1c <_fclose_r+0x50>
81102d00:	0005883a 	mov	r2,zero
81102d04:	dfc00317 	ldw	ra,12(sp)
81102d08:	dc800217 	ldw	r18,8(sp)
81102d0c:	dc400117 	ldw	r17,4(sp)
81102d10:	dc000017 	ldw	r16,0(sp)
81102d14:	dec00404 	addi	sp,sp,16
81102d18:	f800283a 	ret
81102d1c:	800b883a 	mov	r5,r16
81102d20:	8809883a 	mov	r4,r17
81102d24:	1102dd00 	call	81102dd0 <__sflush_r>
81102d28:	1025883a 	mov	r18,r2
81102d2c:	80800b17 	ldw	r2,44(r16)
81102d30:	10000426 	beq	r2,zero,81102d44 <_fclose_r+0x78>
81102d34:	81400717 	ldw	r5,28(r16)
81102d38:	8809883a 	mov	r4,r17
81102d3c:	103ee83a 	callr	r2
81102d40:	10001616 	blt	r2,zero,81102d9c <_fclose_r+0xd0>
81102d44:	8080030b 	ldhu	r2,12(r16)
81102d48:	1080200c 	andi	r2,r2,128
81102d4c:	1000151e 	bne	r2,zero,81102da4 <_fclose_r+0xd8>
81102d50:	81400c17 	ldw	r5,48(r16)
81102d54:	28000526 	beq	r5,zero,81102d6c <_fclose_r+0xa0>
81102d58:	80801004 	addi	r2,r16,64
81102d5c:	28800226 	beq	r5,r2,81102d68 <_fclose_r+0x9c>
81102d60:	8809883a 	mov	r4,r17
81102d64:	110319c0 	call	8110319c <_free_r>
81102d68:	80000c15 	stw	zero,48(r16)
81102d6c:	81401117 	ldw	r5,68(r16)
81102d70:	28000326 	beq	r5,zero,81102d80 <_fclose_r+0xb4>
81102d74:	8809883a 	mov	r4,r17
81102d78:	110319c0 	call	8110319c <_free_r>
81102d7c:	80001115 	stw	zero,68(r16)
81102d80:	11010900 	call	81101090 <__sfp_lock_acquire>
81102d84:	8000030d 	sth	zero,12(r16)
81102d88:	11010940 	call	81101094 <__sfp_lock_release>
81102d8c:	9005883a 	mov	r2,r18
81102d90:	003fdc06 	br	81102d04 <__reset+0xfb0e2d04>
81102d94:	11010800 	call	81101080 <__sinit>
81102d98:	003fd706 	br	81102cf8 <__reset+0xfb0e2cf8>
81102d9c:	04bfffc4 	movi	r18,-1
81102da0:	003fe806 	br	81102d44 <__reset+0xfb0e2d44>
81102da4:	81400417 	ldw	r5,16(r16)
81102da8:	8809883a 	mov	r4,r17
81102dac:	110319c0 	call	8110319c <_free_r>
81102db0:	003fe706 	br	81102d50 <__reset+0xfb0e2d50>
81102db4:	0005883a 	mov	r2,zero
81102db8:	f800283a 	ret

81102dbc <fclose>:
81102dbc:	00a04474 	movhi	r2,33041
81102dc0:	10abe904 	addi	r2,r2,-20572
81102dc4:	200b883a 	mov	r5,r4
81102dc8:	11000017 	ldw	r4,0(r2)
81102dcc:	1102ccc1 	jmpi	81102ccc <_fclose_r>

81102dd0 <__sflush_r>:
81102dd0:	2880030b 	ldhu	r2,12(r5)
81102dd4:	defffb04 	addi	sp,sp,-20
81102dd8:	dcc00315 	stw	r19,12(sp)
81102ddc:	dc400115 	stw	r17,4(sp)
81102de0:	dfc00415 	stw	ra,16(sp)
81102de4:	dc800215 	stw	r18,8(sp)
81102de8:	dc000015 	stw	r16,0(sp)
81102dec:	10c0020c 	andi	r3,r2,8
81102df0:	2823883a 	mov	r17,r5
81102df4:	2027883a 	mov	r19,r4
81102df8:	1800311e 	bne	r3,zero,81102ec0 <__sflush_r+0xf0>
81102dfc:	28c00117 	ldw	r3,4(r5)
81102e00:	10820014 	ori	r2,r2,2048
81102e04:	2880030d 	sth	r2,12(r5)
81102e08:	00c04b0e 	bge	zero,r3,81102f38 <__sflush_r+0x168>
81102e0c:	8a000a17 	ldw	r8,40(r17)
81102e10:	40002326 	beq	r8,zero,81102ea0 <__sflush_r+0xd0>
81102e14:	9c000017 	ldw	r16,0(r19)
81102e18:	10c4000c 	andi	r3,r2,4096
81102e1c:	98000015 	stw	zero,0(r19)
81102e20:	18004826 	beq	r3,zero,81102f44 <__sflush_r+0x174>
81102e24:	89801417 	ldw	r6,80(r17)
81102e28:	10c0010c 	andi	r3,r2,4
81102e2c:	18000626 	beq	r3,zero,81102e48 <__sflush_r+0x78>
81102e30:	88c00117 	ldw	r3,4(r17)
81102e34:	88800c17 	ldw	r2,48(r17)
81102e38:	30cdc83a 	sub	r6,r6,r3
81102e3c:	10000226 	beq	r2,zero,81102e48 <__sflush_r+0x78>
81102e40:	88800f17 	ldw	r2,60(r17)
81102e44:	308dc83a 	sub	r6,r6,r2
81102e48:	89400717 	ldw	r5,28(r17)
81102e4c:	000f883a 	mov	r7,zero
81102e50:	9809883a 	mov	r4,r19
81102e54:	403ee83a 	callr	r8
81102e58:	00ffffc4 	movi	r3,-1
81102e5c:	10c04426 	beq	r2,r3,81102f70 <__sflush_r+0x1a0>
81102e60:	88c0030b 	ldhu	r3,12(r17)
81102e64:	89000417 	ldw	r4,16(r17)
81102e68:	88000115 	stw	zero,4(r17)
81102e6c:	197dffcc 	andi	r5,r3,63487
81102e70:	8940030d 	sth	r5,12(r17)
81102e74:	89000015 	stw	r4,0(r17)
81102e78:	18c4000c 	andi	r3,r3,4096
81102e7c:	18002c1e 	bne	r3,zero,81102f30 <__sflush_r+0x160>
81102e80:	89400c17 	ldw	r5,48(r17)
81102e84:	9c000015 	stw	r16,0(r19)
81102e88:	28000526 	beq	r5,zero,81102ea0 <__sflush_r+0xd0>
81102e8c:	88801004 	addi	r2,r17,64
81102e90:	28800226 	beq	r5,r2,81102e9c <__sflush_r+0xcc>
81102e94:	9809883a 	mov	r4,r19
81102e98:	110319c0 	call	8110319c <_free_r>
81102e9c:	88000c15 	stw	zero,48(r17)
81102ea0:	0005883a 	mov	r2,zero
81102ea4:	dfc00417 	ldw	ra,16(sp)
81102ea8:	dcc00317 	ldw	r19,12(sp)
81102eac:	dc800217 	ldw	r18,8(sp)
81102eb0:	dc400117 	ldw	r17,4(sp)
81102eb4:	dc000017 	ldw	r16,0(sp)
81102eb8:	dec00504 	addi	sp,sp,20
81102ebc:	f800283a 	ret
81102ec0:	2c800417 	ldw	r18,16(r5)
81102ec4:	903ff626 	beq	r18,zero,81102ea0 <__reset+0xfb0e2ea0>
81102ec8:	2c000017 	ldw	r16,0(r5)
81102ecc:	108000cc 	andi	r2,r2,3
81102ed0:	2c800015 	stw	r18,0(r5)
81102ed4:	84a1c83a 	sub	r16,r16,r18
81102ed8:	1000131e 	bne	r2,zero,81102f28 <__sflush_r+0x158>
81102edc:	28800517 	ldw	r2,20(r5)
81102ee0:	88800215 	stw	r2,8(r17)
81102ee4:	04000316 	blt	zero,r16,81102ef4 <__sflush_r+0x124>
81102ee8:	003fed06 	br	81102ea0 <__reset+0xfb0e2ea0>
81102eec:	90a5883a 	add	r18,r18,r2
81102ef0:	043feb0e 	bge	zero,r16,81102ea0 <__reset+0xfb0e2ea0>
81102ef4:	88800917 	ldw	r2,36(r17)
81102ef8:	89400717 	ldw	r5,28(r17)
81102efc:	800f883a 	mov	r7,r16
81102f00:	900d883a 	mov	r6,r18
81102f04:	9809883a 	mov	r4,r19
81102f08:	103ee83a 	callr	r2
81102f0c:	80a1c83a 	sub	r16,r16,r2
81102f10:	00bff616 	blt	zero,r2,81102eec <__reset+0xfb0e2eec>
81102f14:	88c0030b 	ldhu	r3,12(r17)
81102f18:	00bfffc4 	movi	r2,-1
81102f1c:	18c01014 	ori	r3,r3,64
81102f20:	88c0030d 	sth	r3,12(r17)
81102f24:	003fdf06 	br	81102ea4 <__reset+0xfb0e2ea4>
81102f28:	0005883a 	mov	r2,zero
81102f2c:	003fec06 	br	81102ee0 <__reset+0xfb0e2ee0>
81102f30:	88801415 	stw	r2,80(r17)
81102f34:	003fd206 	br	81102e80 <__reset+0xfb0e2e80>
81102f38:	28c00f17 	ldw	r3,60(r5)
81102f3c:	00ffb316 	blt	zero,r3,81102e0c <__reset+0xfb0e2e0c>
81102f40:	003fd706 	br	81102ea0 <__reset+0xfb0e2ea0>
81102f44:	89400717 	ldw	r5,28(r17)
81102f48:	000d883a 	mov	r6,zero
81102f4c:	01c00044 	movi	r7,1
81102f50:	9809883a 	mov	r4,r19
81102f54:	403ee83a 	callr	r8
81102f58:	100d883a 	mov	r6,r2
81102f5c:	00bfffc4 	movi	r2,-1
81102f60:	30801426 	beq	r6,r2,81102fb4 <__sflush_r+0x1e4>
81102f64:	8880030b 	ldhu	r2,12(r17)
81102f68:	8a000a17 	ldw	r8,40(r17)
81102f6c:	003fae06 	br	81102e28 <__reset+0xfb0e2e28>
81102f70:	98c00017 	ldw	r3,0(r19)
81102f74:	183fba26 	beq	r3,zero,81102e60 <__reset+0xfb0e2e60>
81102f78:	01000744 	movi	r4,29
81102f7c:	19000626 	beq	r3,r4,81102f98 <__sflush_r+0x1c8>
81102f80:	01000584 	movi	r4,22
81102f84:	19000426 	beq	r3,r4,81102f98 <__sflush_r+0x1c8>
81102f88:	88c0030b 	ldhu	r3,12(r17)
81102f8c:	18c01014 	ori	r3,r3,64
81102f90:	88c0030d 	sth	r3,12(r17)
81102f94:	003fc306 	br	81102ea4 <__reset+0xfb0e2ea4>
81102f98:	8880030b 	ldhu	r2,12(r17)
81102f9c:	88c00417 	ldw	r3,16(r17)
81102fa0:	88000115 	stw	zero,4(r17)
81102fa4:	10bdffcc 	andi	r2,r2,63487
81102fa8:	8880030d 	sth	r2,12(r17)
81102fac:	88c00015 	stw	r3,0(r17)
81102fb0:	003fb306 	br	81102e80 <__reset+0xfb0e2e80>
81102fb4:	98800017 	ldw	r2,0(r19)
81102fb8:	103fea26 	beq	r2,zero,81102f64 <__reset+0xfb0e2f64>
81102fbc:	00c00744 	movi	r3,29
81102fc0:	10c00226 	beq	r2,r3,81102fcc <__sflush_r+0x1fc>
81102fc4:	00c00584 	movi	r3,22
81102fc8:	10c0031e 	bne	r2,r3,81102fd8 <__sflush_r+0x208>
81102fcc:	9c000015 	stw	r16,0(r19)
81102fd0:	0005883a 	mov	r2,zero
81102fd4:	003fb306 	br	81102ea4 <__reset+0xfb0e2ea4>
81102fd8:	88c0030b 	ldhu	r3,12(r17)
81102fdc:	3005883a 	mov	r2,r6
81102fe0:	18c01014 	ori	r3,r3,64
81102fe4:	88c0030d 	sth	r3,12(r17)
81102fe8:	003fae06 	br	81102ea4 <__reset+0xfb0e2ea4>

81102fec <_fflush_r>:
81102fec:	defffd04 	addi	sp,sp,-12
81102ff0:	dc000115 	stw	r16,4(sp)
81102ff4:	dfc00215 	stw	ra,8(sp)
81102ff8:	2021883a 	mov	r16,r4
81102ffc:	20000226 	beq	r4,zero,81103008 <_fflush_r+0x1c>
81103000:	20800e17 	ldw	r2,56(r4)
81103004:	10000c26 	beq	r2,zero,81103038 <_fflush_r+0x4c>
81103008:	2880030f 	ldh	r2,12(r5)
8110300c:	1000051e 	bne	r2,zero,81103024 <_fflush_r+0x38>
81103010:	0005883a 	mov	r2,zero
81103014:	dfc00217 	ldw	ra,8(sp)
81103018:	dc000117 	ldw	r16,4(sp)
8110301c:	dec00304 	addi	sp,sp,12
81103020:	f800283a 	ret
81103024:	8009883a 	mov	r4,r16
81103028:	dfc00217 	ldw	ra,8(sp)
8110302c:	dc000117 	ldw	r16,4(sp)
81103030:	dec00304 	addi	sp,sp,12
81103034:	1102dd01 	jmpi	81102dd0 <__sflush_r>
81103038:	d9400015 	stw	r5,0(sp)
8110303c:	11010800 	call	81101080 <__sinit>
81103040:	d9400017 	ldw	r5,0(sp)
81103044:	003ff006 	br	81103008 <__reset+0xfb0e3008>

81103048 <fflush>:
81103048:	20000526 	beq	r4,zero,81103060 <fflush+0x18>
8110304c:	00a04474 	movhi	r2,33041
81103050:	10abe904 	addi	r2,r2,-20572
81103054:	200b883a 	mov	r5,r4
81103058:	11000017 	ldw	r4,0(r2)
8110305c:	1102fec1 	jmpi	81102fec <_fflush_r>
81103060:	00a04474 	movhi	r2,33041
81103064:	10abe804 	addi	r2,r2,-20576
81103068:	11000017 	ldw	r4,0(r2)
8110306c:	01604434 	movhi	r5,33040
81103070:	294bfb04 	addi	r5,r5,12268
81103074:	11016501 	jmpi	81101650 <_fwalk_reent>

81103078 <_malloc_trim_r>:
81103078:	defffb04 	addi	sp,sp,-20
8110307c:	dcc00315 	stw	r19,12(sp)
81103080:	04e04474 	movhi	r19,33041
81103084:	dc800215 	stw	r18,8(sp)
81103088:	dc400115 	stw	r17,4(sp)
8110308c:	dc000015 	stw	r16,0(sp)
81103090:	dfc00415 	stw	ra,16(sp)
81103094:	2821883a 	mov	r16,r5
81103098:	9ce63404 	addi	r19,r19,-26416
8110309c:	2025883a 	mov	r18,r4
811030a0:	1103e1c0 	call	81103e1c <__malloc_lock>
811030a4:	98800217 	ldw	r2,8(r19)
811030a8:	14400117 	ldw	r17,4(r2)
811030ac:	00bfff04 	movi	r2,-4
811030b0:	88a2703a 	and	r17,r17,r2
811030b4:	8c21c83a 	sub	r16,r17,r16
811030b8:	8403fbc4 	addi	r16,r16,4079
811030bc:	8020d33a 	srli	r16,r16,12
811030c0:	0083ffc4 	movi	r2,4095
811030c4:	843fffc4 	addi	r16,r16,-1
811030c8:	8020933a 	slli	r16,r16,12
811030cc:	1400060e 	bge	r2,r16,811030e8 <_malloc_trim_r+0x70>
811030d0:	000b883a 	mov	r5,zero
811030d4:	9009883a 	mov	r4,r18
811030d8:	11029340 	call	81102934 <_sbrk_r>
811030dc:	98c00217 	ldw	r3,8(r19)
811030e0:	1c47883a 	add	r3,r3,r17
811030e4:	10c00a26 	beq	r2,r3,81103110 <_malloc_trim_r+0x98>
811030e8:	9009883a 	mov	r4,r18
811030ec:	1103e400 	call	81103e40 <__malloc_unlock>
811030f0:	0005883a 	mov	r2,zero
811030f4:	dfc00417 	ldw	ra,16(sp)
811030f8:	dcc00317 	ldw	r19,12(sp)
811030fc:	dc800217 	ldw	r18,8(sp)
81103100:	dc400117 	ldw	r17,4(sp)
81103104:	dc000017 	ldw	r16,0(sp)
81103108:	dec00504 	addi	sp,sp,20
8110310c:	f800283a 	ret
81103110:	040bc83a 	sub	r5,zero,r16
81103114:	9009883a 	mov	r4,r18
81103118:	11029340 	call	81102934 <_sbrk_r>
8110311c:	00ffffc4 	movi	r3,-1
81103120:	10c00d26 	beq	r2,r3,81103158 <_malloc_trim_r+0xe0>
81103124:	00e04474 	movhi	r3,33041
81103128:	18ec0504 	addi	r3,r3,-20460
8110312c:	18800017 	ldw	r2,0(r3)
81103130:	99000217 	ldw	r4,8(r19)
81103134:	8c23c83a 	sub	r17,r17,r16
81103138:	8c400054 	ori	r17,r17,1
8110313c:	1421c83a 	sub	r16,r2,r16
81103140:	24400115 	stw	r17,4(r4)
81103144:	9009883a 	mov	r4,r18
81103148:	1c000015 	stw	r16,0(r3)
8110314c:	1103e400 	call	81103e40 <__malloc_unlock>
81103150:	00800044 	movi	r2,1
81103154:	003fe706 	br	811030f4 <__reset+0xfb0e30f4>
81103158:	000b883a 	mov	r5,zero
8110315c:	9009883a 	mov	r4,r18
81103160:	11029340 	call	81102934 <_sbrk_r>
81103164:	99000217 	ldw	r4,8(r19)
81103168:	014003c4 	movi	r5,15
8110316c:	1107c83a 	sub	r3,r2,r4
81103170:	28ffdd0e 	bge	r5,r3,811030e8 <__reset+0xfb0e30e8>
81103174:	01604474 	movhi	r5,33041
81103178:	296bea04 	addi	r5,r5,-20568
8110317c:	29400017 	ldw	r5,0(r5)
81103180:	18c00054 	ori	r3,r3,1
81103184:	20c00115 	stw	r3,4(r4)
81103188:	00e04474 	movhi	r3,33041
8110318c:	1145c83a 	sub	r2,r2,r5
81103190:	18ec0504 	addi	r3,r3,-20460
81103194:	18800015 	stw	r2,0(r3)
81103198:	003fd306 	br	811030e8 <__reset+0xfb0e30e8>

8110319c <_free_r>:
8110319c:	28004126 	beq	r5,zero,811032a4 <_free_r+0x108>
811031a0:	defffd04 	addi	sp,sp,-12
811031a4:	dc400115 	stw	r17,4(sp)
811031a8:	dc000015 	stw	r16,0(sp)
811031ac:	2023883a 	mov	r17,r4
811031b0:	2821883a 	mov	r16,r5
811031b4:	dfc00215 	stw	ra,8(sp)
811031b8:	1103e1c0 	call	81103e1c <__malloc_lock>
811031bc:	81ffff17 	ldw	r7,-4(r16)
811031c0:	00bfff84 	movi	r2,-2
811031c4:	01204474 	movhi	r4,33041
811031c8:	81bffe04 	addi	r6,r16,-8
811031cc:	3884703a 	and	r2,r7,r2
811031d0:	21263404 	addi	r4,r4,-26416
811031d4:	308b883a 	add	r5,r6,r2
811031d8:	2a400117 	ldw	r9,4(r5)
811031dc:	22000217 	ldw	r8,8(r4)
811031e0:	00ffff04 	movi	r3,-4
811031e4:	48c6703a 	and	r3,r9,r3
811031e8:	2a005726 	beq	r5,r8,81103348 <_free_r+0x1ac>
811031ec:	28c00115 	stw	r3,4(r5)
811031f0:	39c0004c 	andi	r7,r7,1
811031f4:	3800091e 	bne	r7,zero,8110321c <_free_r+0x80>
811031f8:	823ffe17 	ldw	r8,-8(r16)
811031fc:	22400204 	addi	r9,r4,8
81103200:	320dc83a 	sub	r6,r6,r8
81103204:	31c00217 	ldw	r7,8(r6)
81103208:	1205883a 	add	r2,r2,r8
8110320c:	3a406526 	beq	r7,r9,811033a4 <_free_r+0x208>
81103210:	32000317 	ldw	r8,12(r6)
81103214:	3a000315 	stw	r8,12(r7)
81103218:	41c00215 	stw	r7,8(r8)
8110321c:	28cf883a 	add	r7,r5,r3
81103220:	39c00117 	ldw	r7,4(r7)
81103224:	39c0004c 	andi	r7,r7,1
81103228:	38003a26 	beq	r7,zero,81103314 <_free_r+0x178>
8110322c:	10c00054 	ori	r3,r2,1
81103230:	30c00115 	stw	r3,4(r6)
81103234:	3087883a 	add	r3,r6,r2
81103238:	18800015 	stw	r2,0(r3)
8110323c:	00c07fc4 	movi	r3,511
81103240:	18801936 	bltu	r3,r2,811032a8 <_free_r+0x10c>
81103244:	1004d0fa 	srli	r2,r2,3
81103248:	01c00044 	movi	r7,1
8110324c:	21400117 	ldw	r5,4(r4)
81103250:	10c00044 	addi	r3,r2,1
81103254:	18c7883a 	add	r3,r3,r3
81103258:	1005d0ba 	srai	r2,r2,2
8110325c:	18c7883a 	add	r3,r3,r3
81103260:	18c7883a 	add	r3,r3,r3
81103264:	1907883a 	add	r3,r3,r4
81103268:	3884983a 	sll	r2,r7,r2
8110326c:	19c00017 	ldw	r7,0(r3)
81103270:	1a3ffe04 	addi	r8,r3,-8
81103274:	1144b03a 	or	r2,r2,r5
81103278:	32000315 	stw	r8,12(r6)
8110327c:	31c00215 	stw	r7,8(r6)
81103280:	20800115 	stw	r2,4(r4)
81103284:	19800015 	stw	r6,0(r3)
81103288:	39800315 	stw	r6,12(r7)
8110328c:	8809883a 	mov	r4,r17
81103290:	dfc00217 	ldw	ra,8(sp)
81103294:	dc400117 	ldw	r17,4(sp)
81103298:	dc000017 	ldw	r16,0(sp)
8110329c:	dec00304 	addi	sp,sp,12
811032a0:	1103e401 	jmpi	81103e40 <__malloc_unlock>
811032a4:	f800283a 	ret
811032a8:	100ad27a 	srli	r5,r2,9
811032ac:	00c00104 	movi	r3,4
811032b0:	19404a36 	bltu	r3,r5,811033dc <_free_r+0x240>
811032b4:	100ad1ba 	srli	r5,r2,6
811032b8:	28c00e44 	addi	r3,r5,57
811032bc:	18c7883a 	add	r3,r3,r3
811032c0:	29400e04 	addi	r5,r5,56
811032c4:	18c7883a 	add	r3,r3,r3
811032c8:	18c7883a 	add	r3,r3,r3
811032cc:	1909883a 	add	r4,r3,r4
811032d0:	20c00017 	ldw	r3,0(r4)
811032d4:	01e04474 	movhi	r7,33041
811032d8:	213ffe04 	addi	r4,r4,-8
811032dc:	39e63404 	addi	r7,r7,-26416
811032e0:	20c04426 	beq	r4,r3,811033f4 <_free_r+0x258>
811032e4:	01ffff04 	movi	r7,-4
811032e8:	19400117 	ldw	r5,4(r3)
811032ec:	29ca703a 	and	r5,r5,r7
811032f0:	1140022e 	bgeu	r2,r5,811032fc <_free_r+0x160>
811032f4:	18c00217 	ldw	r3,8(r3)
811032f8:	20fffb1e 	bne	r4,r3,811032e8 <__reset+0xfb0e32e8>
811032fc:	19000317 	ldw	r4,12(r3)
81103300:	31000315 	stw	r4,12(r6)
81103304:	30c00215 	stw	r3,8(r6)
81103308:	21800215 	stw	r6,8(r4)
8110330c:	19800315 	stw	r6,12(r3)
81103310:	003fde06 	br	8110328c <__reset+0xfb0e328c>
81103314:	29c00217 	ldw	r7,8(r5)
81103318:	10c5883a 	add	r2,r2,r3
8110331c:	00e04474 	movhi	r3,33041
81103320:	18e63604 	addi	r3,r3,-26408
81103324:	38c03b26 	beq	r7,r3,81103414 <_free_r+0x278>
81103328:	2a000317 	ldw	r8,12(r5)
8110332c:	11400054 	ori	r5,r2,1
81103330:	3087883a 	add	r3,r6,r2
81103334:	3a000315 	stw	r8,12(r7)
81103338:	41c00215 	stw	r7,8(r8)
8110333c:	31400115 	stw	r5,4(r6)
81103340:	18800015 	stw	r2,0(r3)
81103344:	003fbd06 	br	8110323c <__reset+0xfb0e323c>
81103348:	39c0004c 	andi	r7,r7,1
8110334c:	10c5883a 	add	r2,r2,r3
81103350:	3800071e 	bne	r7,zero,81103370 <_free_r+0x1d4>
81103354:	81fffe17 	ldw	r7,-8(r16)
81103358:	31cdc83a 	sub	r6,r6,r7
8110335c:	30c00317 	ldw	r3,12(r6)
81103360:	31400217 	ldw	r5,8(r6)
81103364:	11c5883a 	add	r2,r2,r7
81103368:	28c00315 	stw	r3,12(r5)
8110336c:	19400215 	stw	r5,8(r3)
81103370:	10c00054 	ori	r3,r2,1
81103374:	30c00115 	stw	r3,4(r6)
81103378:	00e04474 	movhi	r3,33041
8110337c:	18ebeb04 	addi	r3,r3,-20564
81103380:	18c00017 	ldw	r3,0(r3)
81103384:	21800215 	stw	r6,8(r4)
81103388:	10ffc036 	bltu	r2,r3,8110328c <__reset+0xfb0e328c>
8110338c:	00a04474 	movhi	r2,33041
81103390:	10abfc04 	addi	r2,r2,-20496
81103394:	11400017 	ldw	r5,0(r2)
81103398:	8809883a 	mov	r4,r17
8110339c:	11030780 	call	81103078 <_malloc_trim_r>
811033a0:	003fba06 	br	8110328c <__reset+0xfb0e328c>
811033a4:	28c9883a 	add	r4,r5,r3
811033a8:	21000117 	ldw	r4,4(r4)
811033ac:	2100004c 	andi	r4,r4,1
811033b0:	2000391e 	bne	r4,zero,81103498 <_free_r+0x2fc>
811033b4:	29c00217 	ldw	r7,8(r5)
811033b8:	29000317 	ldw	r4,12(r5)
811033bc:	1885883a 	add	r2,r3,r2
811033c0:	10c00054 	ori	r3,r2,1
811033c4:	39000315 	stw	r4,12(r7)
811033c8:	21c00215 	stw	r7,8(r4)
811033cc:	30c00115 	stw	r3,4(r6)
811033d0:	308d883a 	add	r6,r6,r2
811033d4:	30800015 	stw	r2,0(r6)
811033d8:	003fac06 	br	8110328c <__reset+0xfb0e328c>
811033dc:	00c00504 	movi	r3,20
811033e0:	19401536 	bltu	r3,r5,81103438 <_free_r+0x29c>
811033e4:	28c01704 	addi	r3,r5,92
811033e8:	18c7883a 	add	r3,r3,r3
811033ec:	294016c4 	addi	r5,r5,91
811033f0:	003fb406 	br	811032c4 <__reset+0xfb0e32c4>
811033f4:	280bd0ba 	srai	r5,r5,2
811033f8:	00c00044 	movi	r3,1
811033fc:	38800117 	ldw	r2,4(r7)
81103400:	194a983a 	sll	r5,r3,r5
81103404:	2007883a 	mov	r3,r4
81103408:	2884b03a 	or	r2,r5,r2
8110340c:	38800115 	stw	r2,4(r7)
81103410:	003fbb06 	br	81103300 <__reset+0xfb0e3300>
81103414:	21800515 	stw	r6,20(r4)
81103418:	21800415 	stw	r6,16(r4)
8110341c:	10c00054 	ori	r3,r2,1
81103420:	31c00315 	stw	r7,12(r6)
81103424:	31c00215 	stw	r7,8(r6)
81103428:	30c00115 	stw	r3,4(r6)
8110342c:	308d883a 	add	r6,r6,r2
81103430:	30800015 	stw	r2,0(r6)
81103434:	003f9506 	br	8110328c <__reset+0xfb0e328c>
81103438:	00c01504 	movi	r3,84
8110343c:	19400536 	bltu	r3,r5,81103454 <_free_r+0x2b8>
81103440:	100ad33a 	srli	r5,r2,12
81103444:	28c01bc4 	addi	r3,r5,111
81103448:	18c7883a 	add	r3,r3,r3
8110344c:	29401b84 	addi	r5,r5,110
81103450:	003f9c06 	br	811032c4 <__reset+0xfb0e32c4>
81103454:	00c05504 	movi	r3,340
81103458:	19400536 	bltu	r3,r5,81103470 <_free_r+0x2d4>
8110345c:	100ad3fa 	srli	r5,r2,15
81103460:	28c01e04 	addi	r3,r5,120
81103464:	18c7883a 	add	r3,r3,r3
81103468:	29401dc4 	addi	r5,r5,119
8110346c:	003f9506 	br	811032c4 <__reset+0xfb0e32c4>
81103470:	00c15504 	movi	r3,1364
81103474:	19400536 	bltu	r3,r5,8110348c <_free_r+0x2f0>
81103478:	100ad4ba 	srli	r5,r2,18
8110347c:	28c01f44 	addi	r3,r5,125
81103480:	18c7883a 	add	r3,r3,r3
81103484:	29401f04 	addi	r5,r5,124
81103488:	003f8e06 	br	811032c4 <__reset+0xfb0e32c4>
8110348c:	00c03f84 	movi	r3,254
81103490:	01401f84 	movi	r5,126
81103494:	003f8b06 	br	811032c4 <__reset+0xfb0e32c4>
81103498:	10c00054 	ori	r3,r2,1
8110349c:	30c00115 	stw	r3,4(r6)
811034a0:	308d883a 	add	r6,r6,r2
811034a4:	30800015 	stw	r2,0(r6)
811034a8:	003f7806 	br	8110328c <__reset+0xfb0e328c>

811034ac <_lseek_r>:
811034ac:	defffd04 	addi	sp,sp,-12
811034b0:	2805883a 	mov	r2,r5
811034b4:	dc000015 	stw	r16,0(sp)
811034b8:	04204474 	movhi	r16,33041
811034bc:	dc400115 	stw	r17,4(sp)
811034c0:	300b883a 	mov	r5,r6
811034c4:	842bfd04 	addi	r16,r16,-20492
811034c8:	2023883a 	mov	r17,r4
811034cc:	380d883a 	mov	r6,r7
811034d0:	1009883a 	mov	r4,r2
811034d4:	dfc00215 	stw	ra,8(sp)
811034d8:	80000015 	stw	zero,0(r16)
811034dc:	1103ccc0 	call	81103ccc <lseek>
811034e0:	00ffffc4 	movi	r3,-1
811034e4:	10c00526 	beq	r2,r3,811034fc <_lseek_r+0x50>
811034e8:	dfc00217 	ldw	ra,8(sp)
811034ec:	dc400117 	ldw	r17,4(sp)
811034f0:	dc000017 	ldw	r16,0(sp)
811034f4:	dec00304 	addi	sp,sp,12
811034f8:	f800283a 	ret
811034fc:	80c00017 	ldw	r3,0(r16)
81103500:	183ff926 	beq	r3,zero,811034e8 <__reset+0xfb0e34e8>
81103504:	88c00015 	stw	r3,0(r17)
81103508:	003ff706 	br	811034e8 <__reset+0xfb0e34e8>

8110350c <__smakebuf_r>:
8110350c:	2880030b 	ldhu	r2,12(r5)
81103510:	10c0008c 	andi	r3,r2,2
81103514:	1800411e 	bne	r3,zero,8110361c <__smakebuf_r+0x110>
81103518:	deffec04 	addi	sp,sp,-80
8110351c:	dc000f15 	stw	r16,60(sp)
81103520:	2821883a 	mov	r16,r5
81103524:	2940038f 	ldh	r5,14(r5)
81103528:	dc401015 	stw	r17,64(sp)
8110352c:	dfc01315 	stw	ra,76(sp)
81103530:	dcc01215 	stw	r19,72(sp)
81103534:	dc801115 	stw	r18,68(sp)
81103538:	2023883a 	mov	r17,r4
8110353c:	28001c16 	blt	r5,zero,811035b0 <__smakebuf_r+0xa4>
81103540:	d80d883a 	mov	r6,sp
81103544:	11037280 	call	81103728 <_fstat_r>
81103548:	10001816 	blt	r2,zero,811035ac <__smakebuf_r+0xa0>
8110354c:	d8800117 	ldw	r2,4(sp)
81103550:	00e00014 	movui	r3,32768
81103554:	10bc000c 	andi	r2,r2,61440
81103558:	14c80020 	cmpeqi	r19,r2,8192
8110355c:	10c03726 	beq	r2,r3,8110363c <__smakebuf_r+0x130>
81103560:	80c0030b 	ldhu	r3,12(r16)
81103564:	18c20014 	ori	r3,r3,2048
81103568:	80c0030d 	sth	r3,12(r16)
8110356c:	00c80004 	movi	r3,8192
81103570:	10c0521e 	bne	r2,r3,811036bc <__smakebuf_r+0x1b0>
81103574:	8140038f 	ldh	r5,14(r16)
81103578:	8809883a 	mov	r4,r17
8110357c:	11037840 	call	81103784 <_isatty_r>
81103580:	10004c26 	beq	r2,zero,811036b4 <__smakebuf_r+0x1a8>
81103584:	8080030b 	ldhu	r2,12(r16)
81103588:	80c010c4 	addi	r3,r16,67
8110358c:	80c00015 	stw	r3,0(r16)
81103590:	10800054 	ori	r2,r2,1
81103594:	8080030d 	sth	r2,12(r16)
81103598:	00800044 	movi	r2,1
8110359c:	80c00415 	stw	r3,16(r16)
811035a0:	80800515 	stw	r2,20(r16)
811035a4:	04810004 	movi	r18,1024
811035a8:	00000706 	br	811035c8 <__smakebuf_r+0xbc>
811035ac:	8080030b 	ldhu	r2,12(r16)
811035b0:	10c0200c 	andi	r3,r2,128
811035b4:	18001f1e 	bne	r3,zero,81103634 <__smakebuf_r+0x128>
811035b8:	04810004 	movi	r18,1024
811035bc:	10820014 	ori	r2,r2,2048
811035c0:	8080030d 	sth	r2,12(r16)
811035c4:	0027883a 	mov	r19,zero
811035c8:	900b883a 	mov	r5,r18
811035cc:	8809883a 	mov	r4,r17
811035d0:	11017140 	call	81101714 <_malloc_r>
811035d4:	10002c26 	beq	r2,zero,81103688 <__smakebuf_r+0x17c>
811035d8:	80c0030b 	ldhu	r3,12(r16)
811035dc:	01204434 	movhi	r4,33040
811035e0:	21034e04 	addi	r4,r4,3384
811035e4:	89000f15 	stw	r4,60(r17)
811035e8:	18c02014 	ori	r3,r3,128
811035ec:	80c0030d 	sth	r3,12(r16)
811035f0:	80800015 	stw	r2,0(r16)
811035f4:	80800415 	stw	r2,16(r16)
811035f8:	84800515 	stw	r18,20(r16)
811035fc:	98001a1e 	bne	r19,zero,81103668 <__smakebuf_r+0x15c>
81103600:	dfc01317 	ldw	ra,76(sp)
81103604:	dcc01217 	ldw	r19,72(sp)
81103608:	dc801117 	ldw	r18,68(sp)
8110360c:	dc401017 	ldw	r17,64(sp)
81103610:	dc000f17 	ldw	r16,60(sp)
81103614:	dec01404 	addi	sp,sp,80
81103618:	f800283a 	ret
8110361c:	288010c4 	addi	r2,r5,67
81103620:	28800015 	stw	r2,0(r5)
81103624:	28800415 	stw	r2,16(r5)
81103628:	00800044 	movi	r2,1
8110362c:	28800515 	stw	r2,20(r5)
81103630:	f800283a 	ret
81103634:	04801004 	movi	r18,64
81103638:	003fe006 	br	811035bc <__reset+0xfb0e35bc>
8110363c:	81000a17 	ldw	r4,40(r16)
81103640:	00e04434 	movhi	r3,33040
81103644:	18ca9804 	addi	r3,r3,10848
81103648:	20ffc51e 	bne	r4,r3,81103560 <__reset+0xfb0e3560>
8110364c:	8080030b 	ldhu	r2,12(r16)
81103650:	04810004 	movi	r18,1024
81103654:	84801315 	stw	r18,76(r16)
81103658:	1484b03a 	or	r2,r2,r18
8110365c:	8080030d 	sth	r2,12(r16)
81103660:	0027883a 	mov	r19,zero
81103664:	003fd806 	br	811035c8 <__reset+0xfb0e35c8>
81103668:	8140038f 	ldh	r5,14(r16)
8110366c:	8809883a 	mov	r4,r17
81103670:	11037840 	call	81103784 <_isatty_r>
81103674:	103fe226 	beq	r2,zero,81103600 <__reset+0xfb0e3600>
81103678:	8080030b 	ldhu	r2,12(r16)
8110367c:	10800054 	ori	r2,r2,1
81103680:	8080030d 	sth	r2,12(r16)
81103684:	003fde06 	br	81103600 <__reset+0xfb0e3600>
81103688:	8080030b 	ldhu	r2,12(r16)
8110368c:	10c0800c 	andi	r3,r2,512
81103690:	183fdb1e 	bne	r3,zero,81103600 <__reset+0xfb0e3600>
81103694:	10800094 	ori	r2,r2,2
81103698:	80c010c4 	addi	r3,r16,67
8110369c:	8080030d 	sth	r2,12(r16)
811036a0:	00800044 	movi	r2,1
811036a4:	80c00015 	stw	r3,0(r16)
811036a8:	80c00415 	stw	r3,16(r16)
811036ac:	80800515 	stw	r2,20(r16)
811036b0:	003fd306 	br	81103600 <__reset+0xfb0e3600>
811036b4:	04810004 	movi	r18,1024
811036b8:	003fc306 	br	811035c8 <__reset+0xfb0e35c8>
811036bc:	0027883a 	mov	r19,zero
811036c0:	04810004 	movi	r18,1024
811036c4:	003fc006 	br	811035c8 <__reset+0xfb0e35c8>

811036c8 <_read_r>:
811036c8:	defffd04 	addi	sp,sp,-12
811036cc:	2805883a 	mov	r2,r5
811036d0:	dc000015 	stw	r16,0(sp)
811036d4:	04204474 	movhi	r16,33041
811036d8:	dc400115 	stw	r17,4(sp)
811036dc:	300b883a 	mov	r5,r6
811036e0:	842bfd04 	addi	r16,r16,-20492
811036e4:	2023883a 	mov	r17,r4
811036e8:	380d883a 	mov	r6,r7
811036ec:	1009883a 	mov	r4,r2
811036f0:	dfc00215 	stw	ra,8(sp)
811036f4:	80000015 	stw	zero,0(r16)
811036f8:	1103ea00 	call	81103ea0 <read>
811036fc:	00ffffc4 	movi	r3,-1
81103700:	10c00526 	beq	r2,r3,81103718 <_read_r+0x50>
81103704:	dfc00217 	ldw	ra,8(sp)
81103708:	dc400117 	ldw	r17,4(sp)
8110370c:	dc000017 	ldw	r16,0(sp)
81103710:	dec00304 	addi	sp,sp,12
81103714:	f800283a 	ret
81103718:	80c00017 	ldw	r3,0(r16)
8110371c:	183ff926 	beq	r3,zero,81103704 <__reset+0xfb0e3704>
81103720:	88c00015 	stw	r3,0(r17)
81103724:	003ff706 	br	81103704 <__reset+0xfb0e3704>

81103728 <_fstat_r>:
81103728:	defffd04 	addi	sp,sp,-12
8110372c:	2805883a 	mov	r2,r5
81103730:	dc000015 	stw	r16,0(sp)
81103734:	04204474 	movhi	r16,33041
81103738:	dc400115 	stw	r17,4(sp)
8110373c:	842bfd04 	addi	r16,r16,-20492
81103740:	2023883a 	mov	r17,r4
81103744:	300b883a 	mov	r5,r6
81103748:	1009883a 	mov	r4,r2
8110374c:	dfc00215 	stw	ra,8(sp)
81103750:	80000015 	stw	zero,0(r16)
81103754:	1103b000 	call	81103b00 <fstat>
81103758:	00ffffc4 	movi	r3,-1
8110375c:	10c00526 	beq	r2,r3,81103774 <_fstat_r+0x4c>
81103760:	dfc00217 	ldw	ra,8(sp)
81103764:	dc400117 	ldw	r17,4(sp)
81103768:	dc000017 	ldw	r16,0(sp)
8110376c:	dec00304 	addi	sp,sp,12
81103770:	f800283a 	ret
81103774:	80c00017 	ldw	r3,0(r16)
81103778:	183ff926 	beq	r3,zero,81103760 <__reset+0xfb0e3760>
8110377c:	88c00015 	stw	r3,0(r17)
81103780:	003ff706 	br	81103760 <__reset+0xfb0e3760>

81103784 <_isatty_r>:
81103784:	defffd04 	addi	sp,sp,-12
81103788:	dc000015 	stw	r16,0(sp)
8110378c:	04204474 	movhi	r16,33041
81103790:	dc400115 	stw	r17,4(sp)
81103794:	842bfd04 	addi	r16,r16,-20492
81103798:	2023883a 	mov	r17,r4
8110379c:	2809883a 	mov	r4,r5
811037a0:	dfc00215 	stw	ra,8(sp)
811037a4:	80000015 	stw	zero,0(r16)
811037a8:	1103bec0 	call	81103bec <isatty>
811037ac:	00ffffc4 	movi	r3,-1
811037b0:	10c00526 	beq	r2,r3,811037c8 <_isatty_r+0x44>
811037b4:	dfc00217 	ldw	ra,8(sp)
811037b8:	dc400117 	ldw	r17,4(sp)
811037bc:	dc000017 	ldw	r16,0(sp)
811037c0:	dec00304 	addi	sp,sp,12
811037c4:	f800283a 	ret
811037c8:	80c00017 	ldw	r3,0(r16)
811037cc:	183ff926 	beq	r3,zero,811037b4 <__reset+0xfb0e37b4>
811037d0:	88c00015 	stw	r3,0(r17)
811037d4:	003ff706 	br	811037b4 <__reset+0xfb0e37b4>

811037d8 <__divsi3>:
811037d8:	20001b16 	blt	r4,zero,81103848 <__divsi3+0x70>
811037dc:	000f883a 	mov	r7,zero
811037e0:	28001616 	blt	r5,zero,8110383c <__divsi3+0x64>
811037e4:	200d883a 	mov	r6,r4
811037e8:	29001a2e 	bgeu	r5,r4,81103854 <__divsi3+0x7c>
811037ec:	00800804 	movi	r2,32
811037f0:	00c00044 	movi	r3,1
811037f4:	00000106 	br	811037fc <__divsi3+0x24>
811037f8:	10000d26 	beq	r2,zero,81103830 <__divsi3+0x58>
811037fc:	294b883a 	add	r5,r5,r5
81103800:	10bfffc4 	addi	r2,r2,-1
81103804:	18c7883a 	add	r3,r3,r3
81103808:	293ffb36 	bltu	r5,r4,811037f8 <__reset+0xfb0e37f8>
8110380c:	0005883a 	mov	r2,zero
81103810:	18000726 	beq	r3,zero,81103830 <__divsi3+0x58>
81103814:	0005883a 	mov	r2,zero
81103818:	31400236 	bltu	r6,r5,81103824 <__divsi3+0x4c>
8110381c:	314dc83a 	sub	r6,r6,r5
81103820:	10c4b03a 	or	r2,r2,r3
81103824:	1806d07a 	srli	r3,r3,1
81103828:	280ad07a 	srli	r5,r5,1
8110382c:	183ffa1e 	bne	r3,zero,81103818 <__reset+0xfb0e3818>
81103830:	38000126 	beq	r7,zero,81103838 <__divsi3+0x60>
81103834:	0085c83a 	sub	r2,zero,r2
81103838:	f800283a 	ret
8110383c:	014bc83a 	sub	r5,zero,r5
81103840:	39c0005c 	xori	r7,r7,1
81103844:	003fe706 	br	811037e4 <__reset+0xfb0e37e4>
81103848:	0109c83a 	sub	r4,zero,r4
8110384c:	01c00044 	movi	r7,1
81103850:	003fe306 	br	811037e0 <__reset+0xfb0e37e0>
81103854:	00c00044 	movi	r3,1
81103858:	003fee06 	br	81103814 <__reset+0xfb0e3814>

8110385c <__modsi3>:
8110385c:	20001716 	blt	r4,zero,811038bc <__modsi3+0x60>
81103860:	000f883a 	mov	r7,zero
81103864:	2005883a 	mov	r2,r4
81103868:	28001216 	blt	r5,zero,811038b4 <__modsi3+0x58>
8110386c:	2900162e 	bgeu	r5,r4,811038c8 <__modsi3+0x6c>
81103870:	01800804 	movi	r6,32
81103874:	00c00044 	movi	r3,1
81103878:	00000106 	br	81103880 <__modsi3+0x24>
8110387c:	30000a26 	beq	r6,zero,811038a8 <__modsi3+0x4c>
81103880:	294b883a 	add	r5,r5,r5
81103884:	31bfffc4 	addi	r6,r6,-1
81103888:	18c7883a 	add	r3,r3,r3
8110388c:	293ffb36 	bltu	r5,r4,8110387c <__reset+0xfb0e387c>
81103890:	18000526 	beq	r3,zero,811038a8 <__modsi3+0x4c>
81103894:	1806d07a 	srli	r3,r3,1
81103898:	11400136 	bltu	r2,r5,811038a0 <__modsi3+0x44>
8110389c:	1145c83a 	sub	r2,r2,r5
811038a0:	280ad07a 	srli	r5,r5,1
811038a4:	183ffb1e 	bne	r3,zero,81103894 <__reset+0xfb0e3894>
811038a8:	38000126 	beq	r7,zero,811038b0 <__modsi3+0x54>
811038ac:	0085c83a 	sub	r2,zero,r2
811038b0:	f800283a 	ret
811038b4:	014bc83a 	sub	r5,zero,r5
811038b8:	003fec06 	br	8110386c <__reset+0xfb0e386c>
811038bc:	0109c83a 	sub	r4,zero,r4
811038c0:	01c00044 	movi	r7,1
811038c4:	003fe706 	br	81103864 <__reset+0xfb0e3864>
811038c8:	00c00044 	movi	r3,1
811038cc:	003ff106 	br	81103894 <__reset+0xfb0e3894>

811038d0 <__udivsi3>:
811038d0:	200d883a 	mov	r6,r4
811038d4:	2900152e 	bgeu	r5,r4,8110392c <__udivsi3+0x5c>
811038d8:	28001416 	blt	r5,zero,8110392c <__udivsi3+0x5c>
811038dc:	00800804 	movi	r2,32
811038e0:	00c00044 	movi	r3,1
811038e4:	00000206 	br	811038f0 <__udivsi3+0x20>
811038e8:	10000e26 	beq	r2,zero,81103924 <__udivsi3+0x54>
811038ec:	28000516 	blt	r5,zero,81103904 <__udivsi3+0x34>
811038f0:	294b883a 	add	r5,r5,r5
811038f4:	10bfffc4 	addi	r2,r2,-1
811038f8:	18c7883a 	add	r3,r3,r3
811038fc:	293ffa36 	bltu	r5,r4,811038e8 <__reset+0xfb0e38e8>
81103900:	18000826 	beq	r3,zero,81103924 <__udivsi3+0x54>
81103904:	0005883a 	mov	r2,zero
81103908:	31400236 	bltu	r6,r5,81103914 <__udivsi3+0x44>
8110390c:	314dc83a 	sub	r6,r6,r5
81103910:	10c4b03a 	or	r2,r2,r3
81103914:	1806d07a 	srli	r3,r3,1
81103918:	280ad07a 	srli	r5,r5,1
8110391c:	183ffa1e 	bne	r3,zero,81103908 <__reset+0xfb0e3908>
81103920:	f800283a 	ret
81103924:	0005883a 	mov	r2,zero
81103928:	f800283a 	ret
8110392c:	00c00044 	movi	r3,1
81103930:	003ff406 	br	81103904 <__reset+0xfb0e3904>

81103934 <__umodsi3>:
81103934:	2005883a 	mov	r2,r4
81103938:	2900122e 	bgeu	r5,r4,81103984 <__umodsi3+0x50>
8110393c:	28001116 	blt	r5,zero,81103984 <__umodsi3+0x50>
81103940:	01800804 	movi	r6,32
81103944:	00c00044 	movi	r3,1
81103948:	00000206 	br	81103954 <__umodsi3+0x20>
8110394c:	30000c26 	beq	r6,zero,81103980 <__umodsi3+0x4c>
81103950:	28000516 	blt	r5,zero,81103968 <__umodsi3+0x34>
81103954:	294b883a 	add	r5,r5,r5
81103958:	31bfffc4 	addi	r6,r6,-1
8110395c:	18c7883a 	add	r3,r3,r3
81103960:	293ffa36 	bltu	r5,r4,8110394c <__reset+0xfb0e394c>
81103964:	18000626 	beq	r3,zero,81103980 <__umodsi3+0x4c>
81103968:	1806d07a 	srli	r3,r3,1
8110396c:	11400136 	bltu	r2,r5,81103974 <__umodsi3+0x40>
81103970:	1145c83a 	sub	r2,r2,r5
81103974:	280ad07a 	srli	r5,r5,1
81103978:	183ffb1e 	bne	r3,zero,81103968 <__reset+0xfb0e3968>
8110397c:	f800283a 	ret
81103980:	f800283a 	ret
81103984:	00c00044 	movi	r3,1
81103988:	003ff706 	br	81103968 <__reset+0xfb0e3968>

8110398c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8110398c:	defffe04 	addi	sp,sp,-8
81103990:	dfc00115 	stw	ra,4(sp)
81103994:	df000015 	stw	fp,0(sp)
81103998:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8110399c:	d0a00917 	ldw	r2,-32732(gp)
811039a0:	10000326 	beq	r2,zero,811039b0 <alt_get_errno+0x24>
811039a4:	d0a00917 	ldw	r2,-32732(gp)
811039a8:	103ee83a 	callr	r2
811039ac:	00000106 	br	811039b4 <alt_get_errno+0x28>
811039b0:	d0a01504 	addi	r2,gp,-32684
}
811039b4:	e037883a 	mov	sp,fp
811039b8:	dfc00117 	ldw	ra,4(sp)
811039bc:	df000017 	ldw	fp,0(sp)
811039c0:	dec00204 	addi	sp,sp,8
811039c4:	f800283a 	ret

811039c8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
811039c8:	defffb04 	addi	sp,sp,-20
811039cc:	dfc00415 	stw	ra,16(sp)
811039d0:	df000315 	stw	fp,12(sp)
811039d4:	df000304 	addi	fp,sp,12
811039d8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
811039dc:	e0bfff17 	ldw	r2,-4(fp)
811039e0:	10000616 	blt	r2,zero,811039fc <close+0x34>
811039e4:	e0bfff17 	ldw	r2,-4(fp)
811039e8:	10c00324 	muli	r3,r2,12
811039ec:	00a04474 	movhi	r2,33041
811039f0:	10a74004 	addi	r2,r2,-25344
811039f4:	1885883a 	add	r2,r3,r2
811039f8:	00000106 	br	81103a00 <close+0x38>
811039fc:	0005883a 	mov	r2,zero
81103a00:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
81103a04:	e0bffd17 	ldw	r2,-12(fp)
81103a08:	10001926 	beq	r2,zero,81103a70 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
81103a0c:	e0bffd17 	ldw	r2,-12(fp)
81103a10:	10800017 	ldw	r2,0(r2)
81103a14:	10800417 	ldw	r2,16(r2)
81103a18:	10000626 	beq	r2,zero,81103a34 <close+0x6c>
81103a1c:	e0bffd17 	ldw	r2,-12(fp)
81103a20:	10800017 	ldw	r2,0(r2)
81103a24:	10800417 	ldw	r2,16(r2)
81103a28:	e13ffd17 	ldw	r4,-12(fp)
81103a2c:	103ee83a 	callr	r2
81103a30:	00000106 	br	81103a38 <close+0x70>
81103a34:	0005883a 	mov	r2,zero
81103a38:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
81103a3c:	e13fff17 	ldw	r4,-4(fp)
81103a40:	1103f9c0 	call	81103f9c <alt_release_fd>
    if (rval < 0)
81103a44:	e0bffe17 	ldw	r2,-8(fp)
81103a48:	1000070e 	bge	r2,zero,81103a68 <close+0xa0>
    {
      ALT_ERRNO = -rval;
81103a4c:	110398c0 	call	8110398c <alt_get_errno>
81103a50:	1007883a 	mov	r3,r2
81103a54:	e0bffe17 	ldw	r2,-8(fp)
81103a58:	0085c83a 	sub	r2,zero,r2
81103a5c:	18800015 	stw	r2,0(r3)
      return -1;
81103a60:	00bfffc4 	movi	r2,-1
81103a64:	00000706 	br	81103a84 <close+0xbc>
    }
    return 0;
81103a68:	0005883a 	mov	r2,zero
81103a6c:	00000506 	br	81103a84 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
81103a70:	110398c0 	call	8110398c <alt_get_errno>
81103a74:	1007883a 	mov	r3,r2
81103a78:	00801444 	movi	r2,81
81103a7c:	18800015 	stw	r2,0(r3)
    return -1;
81103a80:	00bfffc4 	movi	r2,-1
  }
}
81103a84:	e037883a 	mov	sp,fp
81103a88:	dfc00117 	ldw	ra,4(sp)
81103a8c:	df000017 	ldw	fp,0(sp)
81103a90:	dec00204 	addi	sp,sp,8
81103a94:	f800283a 	ret

81103a98 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
81103a98:	defffc04 	addi	sp,sp,-16
81103a9c:	df000315 	stw	fp,12(sp)
81103aa0:	df000304 	addi	fp,sp,12
81103aa4:	e13ffd15 	stw	r4,-12(fp)
81103aa8:	e17ffe15 	stw	r5,-8(fp)
81103aac:	e1bfff15 	stw	r6,-4(fp)
  return len;
81103ab0:	e0bfff17 	ldw	r2,-4(fp)
}
81103ab4:	e037883a 	mov	sp,fp
81103ab8:	df000017 	ldw	fp,0(sp)
81103abc:	dec00104 	addi	sp,sp,4
81103ac0:	f800283a 	ret

81103ac4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81103ac4:	defffe04 	addi	sp,sp,-8
81103ac8:	dfc00115 	stw	ra,4(sp)
81103acc:	df000015 	stw	fp,0(sp)
81103ad0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81103ad4:	d0a00917 	ldw	r2,-32732(gp)
81103ad8:	10000326 	beq	r2,zero,81103ae8 <alt_get_errno+0x24>
81103adc:	d0a00917 	ldw	r2,-32732(gp)
81103ae0:	103ee83a 	callr	r2
81103ae4:	00000106 	br	81103aec <alt_get_errno+0x28>
81103ae8:	d0a01504 	addi	r2,gp,-32684
}
81103aec:	e037883a 	mov	sp,fp
81103af0:	dfc00117 	ldw	ra,4(sp)
81103af4:	df000017 	ldw	fp,0(sp)
81103af8:	dec00204 	addi	sp,sp,8
81103afc:	f800283a 	ret

81103b00 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
81103b00:	defffb04 	addi	sp,sp,-20
81103b04:	dfc00415 	stw	ra,16(sp)
81103b08:	df000315 	stw	fp,12(sp)
81103b0c:	df000304 	addi	fp,sp,12
81103b10:	e13ffe15 	stw	r4,-8(fp)
81103b14:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
81103b18:	e0bffe17 	ldw	r2,-8(fp)
81103b1c:	10000616 	blt	r2,zero,81103b38 <fstat+0x38>
81103b20:	e0bffe17 	ldw	r2,-8(fp)
81103b24:	10c00324 	muli	r3,r2,12
81103b28:	00a04474 	movhi	r2,33041
81103b2c:	10a74004 	addi	r2,r2,-25344
81103b30:	1885883a 	add	r2,r3,r2
81103b34:	00000106 	br	81103b3c <fstat+0x3c>
81103b38:	0005883a 	mov	r2,zero
81103b3c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
81103b40:	e0bffd17 	ldw	r2,-12(fp)
81103b44:	10001026 	beq	r2,zero,81103b88 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
81103b48:	e0bffd17 	ldw	r2,-12(fp)
81103b4c:	10800017 	ldw	r2,0(r2)
81103b50:	10800817 	ldw	r2,32(r2)
81103b54:	10000726 	beq	r2,zero,81103b74 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
81103b58:	e0bffd17 	ldw	r2,-12(fp)
81103b5c:	10800017 	ldw	r2,0(r2)
81103b60:	10800817 	ldw	r2,32(r2)
81103b64:	e17fff17 	ldw	r5,-4(fp)
81103b68:	e13ffd17 	ldw	r4,-12(fp)
81103b6c:	103ee83a 	callr	r2
81103b70:	00000a06 	br	81103b9c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
81103b74:	e0bfff17 	ldw	r2,-4(fp)
81103b78:	00c80004 	movi	r3,8192
81103b7c:	10c00115 	stw	r3,4(r2)
      return 0;
81103b80:	0005883a 	mov	r2,zero
81103b84:	00000506 	br	81103b9c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
81103b88:	1103ac40 	call	81103ac4 <alt_get_errno>
81103b8c:	1007883a 	mov	r3,r2
81103b90:	00801444 	movi	r2,81
81103b94:	18800015 	stw	r2,0(r3)
    return -1;
81103b98:	00bfffc4 	movi	r2,-1
  }
}
81103b9c:	e037883a 	mov	sp,fp
81103ba0:	dfc00117 	ldw	ra,4(sp)
81103ba4:	df000017 	ldw	fp,0(sp)
81103ba8:	dec00204 	addi	sp,sp,8
81103bac:	f800283a 	ret

81103bb0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81103bb0:	defffe04 	addi	sp,sp,-8
81103bb4:	dfc00115 	stw	ra,4(sp)
81103bb8:	df000015 	stw	fp,0(sp)
81103bbc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81103bc0:	d0a00917 	ldw	r2,-32732(gp)
81103bc4:	10000326 	beq	r2,zero,81103bd4 <alt_get_errno+0x24>
81103bc8:	d0a00917 	ldw	r2,-32732(gp)
81103bcc:	103ee83a 	callr	r2
81103bd0:	00000106 	br	81103bd8 <alt_get_errno+0x28>
81103bd4:	d0a01504 	addi	r2,gp,-32684
}
81103bd8:	e037883a 	mov	sp,fp
81103bdc:	dfc00117 	ldw	ra,4(sp)
81103be0:	df000017 	ldw	fp,0(sp)
81103be4:	dec00204 	addi	sp,sp,8
81103be8:	f800283a 	ret

81103bec <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
81103bec:	deffed04 	addi	sp,sp,-76
81103bf0:	dfc01215 	stw	ra,72(sp)
81103bf4:	df001115 	stw	fp,68(sp)
81103bf8:	df001104 	addi	fp,sp,68
81103bfc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
81103c00:	e0bfff17 	ldw	r2,-4(fp)
81103c04:	10000616 	blt	r2,zero,81103c20 <isatty+0x34>
81103c08:	e0bfff17 	ldw	r2,-4(fp)
81103c0c:	10c00324 	muli	r3,r2,12
81103c10:	00a04474 	movhi	r2,33041
81103c14:	10a74004 	addi	r2,r2,-25344
81103c18:	1885883a 	add	r2,r3,r2
81103c1c:	00000106 	br	81103c24 <isatty+0x38>
81103c20:	0005883a 	mov	r2,zero
81103c24:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
81103c28:	e0bfef17 	ldw	r2,-68(fp)
81103c2c:	10000e26 	beq	r2,zero,81103c68 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
81103c30:	e0bfef17 	ldw	r2,-68(fp)
81103c34:	10800017 	ldw	r2,0(r2)
81103c38:	10800817 	ldw	r2,32(r2)
81103c3c:	1000021e 	bne	r2,zero,81103c48 <isatty+0x5c>
    {
      return 1;
81103c40:	00800044 	movi	r2,1
81103c44:	00000d06 	br	81103c7c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
81103c48:	e0bff004 	addi	r2,fp,-64
81103c4c:	100b883a 	mov	r5,r2
81103c50:	e13fff17 	ldw	r4,-4(fp)
81103c54:	1103b000 	call	81103b00 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
81103c58:	e0bff117 	ldw	r2,-60(fp)
81103c5c:	10880020 	cmpeqi	r2,r2,8192
81103c60:	10803fcc 	andi	r2,r2,255
81103c64:	00000506 	br	81103c7c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
81103c68:	1103bb00 	call	81103bb0 <alt_get_errno>
81103c6c:	1007883a 	mov	r3,r2
81103c70:	00801444 	movi	r2,81
81103c74:	18800015 	stw	r2,0(r3)
    return 0;
81103c78:	0005883a 	mov	r2,zero
  }
}
81103c7c:	e037883a 	mov	sp,fp
81103c80:	dfc00117 	ldw	ra,4(sp)
81103c84:	df000017 	ldw	fp,0(sp)
81103c88:	dec00204 	addi	sp,sp,8
81103c8c:	f800283a 	ret

81103c90 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81103c90:	defffe04 	addi	sp,sp,-8
81103c94:	dfc00115 	stw	ra,4(sp)
81103c98:	df000015 	stw	fp,0(sp)
81103c9c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81103ca0:	d0a00917 	ldw	r2,-32732(gp)
81103ca4:	10000326 	beq	r2,zero,81103cb4 <alt_get_errno+0x24>
81103ca8:	d0a00917 	ldw	r2,-32732(gp)
81103cac:	103ee83a 	callr	r2
81103cb0:	00000106 	br	81103cb8 <alt_get_errno+0x28>
81103cb4:	d0a01504 	addi	r2,gp,-32684
}
81103cb8:	e037883a 	mov	sp,fp
81103cbc:	dfc00117 	ldw	ra,4(sp)
81103cc0:	df000017 	ldw	fp,0(sp)
81103cc4:	dec00204 	addi	sp,sp,8
81103cc8:	f800283a 	ret

81103ccc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
81103ccc:	defff904 	addi	sp,sp,-28
81103cd0:	dfc00615 	stw	ra,24(sp)
81103cd4:	df000515 	stw	fp,20(sp)
81103cd8:	df000504 	addi	fp,sp,20
81103cdc:	e13ffd15 	stw	r4,-12(fp)
81103ce0:	e17ffe15 	stw	r5,-8(fp)
81103ce4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
81103ce8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
81103cec:	e0bffd17 	ldw	r2,-12(fp)
81103cf0:	10000616 	blt	r2,zero,81103d0c <lseek+0x40>
81103cf4:	e0bffd17 	ldw	r2,-12(fp)
81103cf8:	10c00324 	muli	r3,r2,12
81103cfc:	00a04474 	movhi	r2,33041
81103d00:	10a74004 	addi	r2,r2,-25344
81103d04:	1885883a 	add	r2,r3,r2
81103d08:	00000106 	br	81103d10 <lseek+0x44>
81103d0c:	0005883a 	mov	r2,zero
81103d10:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
81103d14:	e0bffc17 	ldw	r2,-16(fp)
81103d18:	10001026 	beq	r2,zero,81103d5c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
81103d1c:	e0bffc17 	ldw	r2,-16(fp)
81103d20:	10800017 	ldw	r2,0(r2)
81103d24:	10800717 	ldw	r2,28(r2)
81103d28:	10000926 	beq	r2,zero,81103d50 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
81103d2c:	e0bffc17 	ldw	r2,-16(fp)
81103d30:	10800017 	ldw	r2,0(r2)
81103d34:	10800717 	ldw	r2,28(r2)
81103d38:	e1bfff17 	ldw	r6,-4(fp)
81103d3c:	e17ffe17 	ldw	r5,-8(fp)
81103d40:	e13ffc17 	ldw	r4,-16(fp)
81103d44:	103ee83a 	callr	r2
81103d48:	e0bffb15 	stw	r2,-20(fp)
81103d4c:	00000506 	br	81103d64 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
81103d50:	00bfde84 	movi	r2,-134
81103d54:	e0bffb15 	stw	r2,-20(fp)
81103d58:	00000206 	br	81103d64 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
81103d5c:	00bfebc4 	movi	r2,-81
81103d60:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
81103d64:	e0bffb17 	ldw	r2,-20(fp)
81103d68:	1000070e 	bge	r2,zero,81103d88 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
81103d6c:	1103c900 	call	81103c90 <alt_get_errno>
81103d70:	1007883a 	mov	r3,r2
81103d74:	e0bffb17 	ldw	r2,-20(fp)
81103d78:	0085c83a 	sub	r2,zero,r2
81103d7c:	18800015 	stw	r2,0(r3)
    rc = -1;
81103d80:	00bfffc4 	movi	r2,-1
81103d84:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
81103d88:	e0bffb17 	ldw	r2,-20(fp)
}
81103d8c:	e037883a 	mov	sp,fp
81103d90:	dfc00117 	ldw	ra,4(sp)
81103d94:	df000017 	ldw	fp,0(sp)
81103d98:	dec00204 	addi	sp,sp,8
81103d9c:	f800283a 	ret

81103da0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
81103da0:	defffd04 	addi	sp,sp,-12
81103da4:	dfc00215 	stw	ra,8(sp)
81103da8:	df000115 	stw	fp,4(sp)
81103dac:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
81103db0:	0009883a 	mov	r4,zero
81103db4:	11042180 	call	81104218 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
81103db8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
81103dbc:	11042500 	call	81104250 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
81103dc0:	01a04474 	movhi	r6,33041
81103dc4:	31a49304 	addi	r6,r6,-28084
81103dc8:	01604474 	movhi	r5,33041
81103dcc:	29649304 	addi	r5,r5,-28084
81103dd0:	01204474 	movhi	r4,33041
81103dd4:	21249304 	addi	r4,r4,-28084
81103dd8:	11082880 	call	81108288 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
81103ddc:	1107dd40 	call	81107dd4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
81103de0:	01204434 	movhi	r4,33040
81103de4:	211f8d04 	addi	r4,r4,32308
81103de8:	1108bd00 	call	81108bd0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
81103dec:	d0a01617 	ldw	r2,-32680(gp)
81103df0:	d0e01717 	ldw	r3,-32676(gp)
81103df4:	d1201817 	ldw	r4,-32672(gp)
81103df8:	200d883a 	mov	r6,r4
81103dfc:	180b883a 	mov	r5,r3
81103e00:	1009883a 	mov	r4,r2
81103e04:	1100b880 	call	81100b88 <main>
81103e08:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
81103e0c:	01000044 	movi	r4,1
81103e10:	11039c80 	call	811039c8 <close>
  exit (result);
81103e14:	e13fff17 	ldw	r4,-4(fp)
81103e18:	1108be40 	call	81108be4 <exit>

81103e1c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
81103e1c:	defffe04 	addi	sp,sp,-8
81103e20:	df000115 	stw	fp,4(sp)
81103e24:	df000104 	addi	fp,sp,4
81103e28:	e13fff15 	stw	r4,-4(fp)
}
81103e2c:	0001883a 	nop
81103e30:	e037883a 	mov	sp,fp
81103e34:	df000017 	ldw	fp,0(sp)
81103e38:	dec00104 	addi	sp,sp,4
81103e3c:	f800283a 	ret

81103e40 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
81103e40:	defffe04 	addi	sp,sp,-8
81103e44:	df000115 	stw	fp,4(sp)
81103e48:	df000104 	addi	fp,sp,4
81103e4c:	e13fff15 	stw	r4,-4(fp)
}
81103e50:	0001883a 	nop
81103e54:	e037883a 	mov	sp,fp
81103e58:	df000017 	ldw	fp,0(sp)
81103e5c:	dec00104 	addi	sp,sp,4
81103e60:	f800283a 	ret

81103e64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81103e64:	defffe04 	addi	sp,sp,-8
81103e68:	dfc00115 	stw	ra,4(sp)
81103e6c:	df000015 	stw	fp,0(sp)
81103e70:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81103e74:	d0a00917 	ldw	r2,-32732(gp)
81103e78:	10000326 	beq	r2,zero,81103e88 <alt_get_errno+0x24>
81103e7c:	d0a00917 	ldw	r2,-32732(gp)
81103e80:	103ee83a 	callr	r2
81103e84:	00000106 	br	81103e8c <alt_get_errno+0x28>
81103e88:	d0a01504 	addi	r2,gp,-32684
}
81103e8c:	e037883a 	mov	sp,fp
81103e90:	dfc00117 	ldw	ra,4(sp)
81103e94:	df000017 	ldw	fp,0(sp)
81103e98:	dec00204 	addi	sp,sp,8
81103e9c:	f800283a 	ret

81103ea0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
81103ea0:	defff904 	addi	sp,sp,-28
81103ea4:	dfc00615 	stw	ra,24(sp)
81103ea8:	df000515 	stw	fp,20(sp)
81103eac:	df000504 	addi	fp,sp,20
81103eb0:	e13ffd15 	stw	r4,-12(fp)
81103eb4:	e17ffe15 	stw	r5,-8(fp)
81103eb8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
81103ebc:	e0bffd17 	ldw	r2,-12(fp)
81103ec0:	10000616 	blt	r2,zero,81103edc <read+0x3c>
81103ec4:	e0bffd17 	ldw	r2,-12(fp)
81103ec8:	10c00324 	muli	r3,r2,12
81103ecc:	00a04474 	movhi	r2,33041
81103ed0:	10a74004 	addi	r2,r2,-25344
81103ed4:	1885883a 	add	r2,r3,r2
81103ed8:	00000106 	br	81103ee0 <read+0x40>
81103edc:	0005883a 	mov	r2,zero
81103ee0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
81103ee4:	e0bffb17 	ldw	r2,-20(fp)
81103ee8:	10002226 	beq	r2,zero,81103f74 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
81103eec:	e0bffb17 	ldw	r2,-20(fp)
81103ef0:	10800217 	ldw	r2,8(r2)
81103ef4:	108000cc 	andi	r2,r2,3
81103ef8:	10800060 	cmpeqi	r2,r2,1
81103efc:	1000181e 	bne	r2,zero,81103f60 <read+0xc0>
        (fd->dev->read))
81103f00:	e0bffb17 	ldw	r2,-20(fp)
81103f04:	10800017 	ldw	r2,0(r2)
81103f08:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
81103f0c:	10001426 	beq	r2,zero,81103f60 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
81103f10:	e0bffb17 	ldw	r2,-20(fp)
81103f14:	10800017 	ldw	r2,0(r2)
81103f18:	10800517 	ldw	r2,20(r2)
81103f1c:	e0ffff17 	ldw	r3,-4(fp)
81103f20:	180d883a 	mov	r6,r3
81103f24:	e17ffe17 	ldw	r5,-8(fp)
81103f28:	e13ffb17 	ldw	r4,-20(fp)
81103f2c:	103ee83a 	callr	r2
81103f30:	e0bffc15 	stw	r2,-16(fp)
81103f34:	e0bffc17 	ldw	r2,-16(fp)
81103f38:	1000070e 	bge	r2,zero,81103f58 <read+0xb8>
        {
          ALT_ERRNO = -rval;
81103f3c:	1103e640 	call	81103e64 <alt_get_errno>
81103f40:	1007883a 	mov	r3,r2
81103f44:	e0bffc17 	ldw	r2,-16(fp)
81103f48:	0085c83a 	sub	r2,zero,r2
81103f4c:	18800015 	stw	r2,0(r3)
          return -1;
81103f50:	00bfffc4 	movi	r2,-1
81103f54:	00000c06 	br	81103f88 <read+0xe8>
        }
        return rval;
81103f58:	e0bffc17 	ldw	r2,-16(fp)
81103f5c:	00000a06 	br	81103f88 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
81103f60:	1103e640 	call	81103e64 <alt_get_errno>
81103f64:	1007883a 	mov	r3,r2
81103f68:	00800344 	movi	r2,13
81103f6c:	18800015 	stw	r2,0(r3)
81103f70:	00000406 	br	81103f84 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
81103f74:	1103e640 	call	81103e64 <alt_get_errno>
81103f78:	1007883a 	mov	r3,r2
81103f7c:	00801444 	movi	r2,81
81103f80:	18800015 	stw	r2,0(r3)
  }
  return -1;
81103f84:	00bfffc4 	movi	r2,-1
}
81103f88:	e037883a 	mov	sp,fp
81103f8c:	dfc00117 	ldw	ra,4(sp)
81103f90:	df000017 	ldw	fp,0(sp)
81103f94:	dec00204 	addi	sp,sp,8
81103f98:	f800283a 	ret

81103f9c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
81103f9c:	defffe04 	addi	sp,sp,-8
81103fa0:	df000115 	stw	fp,4(sp)
81103fa4:	df000104 	addi	fp,sp,4
81103fa8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
81103fac:	e0bfff17 	ldw	r2,-4(fp)
81103fb0:	108000d0 	cmplti	r2,r2,3
81103fb4:	10000d1e 	bne	r2,zero,81103fec <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
81103fb8:	00a04474 	movhi	r2,33041
81103fbc:	10a74004 	addi	r2,r2,-25344
81103fc0:	e0ffff17 	ldw	r3,-4(fp)
81103fc4:	18c00324 	muli	r3,r3,12
81103fc8:	10c5883a 	add	r2,r2,r3
81103fcc:	10800204 	addi	r2,r2,8
81103fd0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
81103fd4:	00a04474 	movhi	r2,33041
81103fd8:	10a74004 	addi	r2,r2,-25344
81103fdc:	e0ffff17 	ldw	r3,-4(fp)
81103fe0:	18c00324 	muli	r3,r3,12
81103fe4:	10c5883a 	add	r2,r2,r3
81103fe8:	10000015 	stw	zero,0(r2)
  }
}
81103fec:	0001883a 	nop
81103ff0:	e037883a 	mov	sp,fp
81103ff4:	df000017 	ldw	fp,0(sp)
81103ff8:	dec00104 	addi	sp,sp,4
81103ffc:	f800283a 	ret

81104000 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
81104000:	defff904 	addi	sp,sp,-28
81104004:	df000615 	stw	fp,24(sp)
81104008:	df000604 	addi	fp,sp,24
8110400c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81104010:	0005303a 	rdctl	r2,status
81104014:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81104018:	e0fffe17 	ldw	r3,-8(fp)
8110401c:	00bfff84 	movi	r2,-2
81104020:	1884703a 	and	r2,r3,r2
81104024:	1001703a 	wrctl	status,r2
  
  return context;
81104028:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
8110402c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
81104030:	d0a00a17 	ldw	r2,-32728(gp)
81104034:	10c000c4 	addi	r3,r2,3
81104038:	00bfff04 	movi	r2,-4
8110403c:	1884703a 	and	r2,r3,r2
81104040:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
81104044:	d0e00a17 	ldw	r3,-32728(gp)
81104048:	e0bfff17 	ldw	r2,-4(fp)
8110404c:	1887883a 	add	r3,r3,r2
81104050:	00a04834 	movhi	r2,33056
81104054:	10a80004 	addi	r2,r2,-24576
81104058:	10c0062e 	bgeu	r2,r3,81104074 <sbrk+0x74>
8110405c:	e0bffb17 	ldw	r2,-20(fp)
81104060:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81104064:	e0bffa17 	ldw	r2,-24(fp)
81104068:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
8110406c:	00bfffc4 	movi	r2,-1
81104070:	00000b06 	br	811040a0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
81104074:	d0a00a17 	ldw	r2,-32728(gp)
81104078:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
8110407c:	d0e00a17 	ldw	r3,-32728(gp)
81104080:	e0bfff17 	ldw	r2,-4(fp)
81104084:	1885883a 	add	r2,r3,r2
81104088:	d0a00a15 	stw	r2,-32728(gp)
8110408c:	e0bffb17 	ldw	r2,-20(fp)
81104090:	e0bffc15 	stw	r2,-16(fp)
81104094:	e0bffc17 	ldw	r2,-16(fp)
81104098:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
8110409c:	e0bffd17 	ldw	r2,-12(fp)
} 
811040a0:	e037883a 	mov	sp,fp
811040a4:	df000017 	ldw	fp,0(sp)
811040a8:	dec00104 	addi	sp,sp,4
811040ac:	f800283a 	ret

811040b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
811040b0:	defffe04 	addi	sp,sp,-8
811040b4:	dfc00115 	stw	ra,4(sp)
811040b8:	df000015 	stw	fp,0(sp)
811040bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
811040c0:	d0a00917 	ldw	r2,-32732(gp)
811040c4:	10000326 	beq	r2,zero,811040d4 <alt_get_errno+0x24>
811040c8:	d0a00917 	ldw	r2,-32732(gp)
811040cc:	103ee83a 	callr	r2
811040d0:	00000106 	br	811040d8 <alt_get_errno+0x28>
811040d4:	d0a01504 	addi	r2,gp,-32684
}
811040d8:	e037883a 	mov	sp,fp
811040dc:	dfc00117 	ldw	ra,4(sp)
811040e0:	df000017 	ldw	fp,0(sp)
811040e4:	dec00204 	addi	sp,sp,8
811040e8:	f800283a 	ret

811040ec <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
811040ec:	defff904 	addi	sp,sp,-28
811040f0:	dfc00615 	stw	ra,24(sp)
811040f4:	df000515 	stw	fp,20(sp)
811040f8:	df000504 	addi	fp,sp,20
811040fc:	e13ffd15 	stw	r4,-12(fp)
81104100:	e17ffe15 	stw	r5,-8(fp)
81104104:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
81104108:	e0bffd17 	ldw	r2,-12(fp)
8110410c:	10000616 	blt	r2,zero,81104128 <write+0x3c>
81104110:	e0bffd17 	ldw	r2,-12(fp)
81104114:	10c00324 	muli	r3,r2,12
81104118:	00a04474 	movhi	r2,33041
8110411c:	10a74004 	addi	r2,r2,-25344
81104120:	1885883a 	add	r2,r3,r2
81104124:	00000106 	br	8110412c <write+0x40>
81104128:	0005883a 	mov	r2,zero
8110412c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
81104130:	e0bffb17 	ldw	r2,-20(fp)
81104134:	10002126 	beq	r2,zero,811041bc <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
81104138:	e0bffb17 	ldw	r2,-20(fp)
8110413c:	10800217 	ldw	r2,8(r2)
81104140:	108000cc 	andi	r2,r2,3
81104144:	10001826 	beq	r2,zero,811041a8 <write+0xbc>
81104148:	e0bffb17 	ldw	r2,-20(fp)
8110414c:	10800017 	ldw	r2,0(r2)
81104150:	10800617 	ldw	r2,24(r2)
81104154:	10001426 	beq	r2,zero,811041a8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
81104158:	e0bffb17 	ldw	r2,-20(fp)
8110415c:	10800017 	ldw	r2,0(r2)
81104160:	10800617 	ldw	r2,24(r2)
81104164:	e0ffff17 	ldw	r3,-4(fp)
81104168:	180d883a 	mov	r6,r3
8110416c:	e17ffe17 	ldw	r5,-8(fp)
81104170:	e13ffb17 	ldw	r4,-20(fp)
81104174:	103ee83a 	callr	r2
81104178:	e0bffc15 	stw	r2,-16(fp)
8110417c:	e0bffc17 	ldw	r2,-16(fp)
81104180:	1000070e 	bge	r2,zero,811041a0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
81104184:	11040b00 	call	811040b0 <alt_get_errno>
81104188:	1007883a 	mov	r3,r2
8110418c:	e0bffc17 	ldw	r2,-16(fp)
81104190:	0085c83a 	sub	r2,zero,r2
81104194:	18800015 	stw	r2,0(r3)
        return -1;
81104198:	00bfffc4 	movi	r2,-1
8110419c:	00000c06 	br	811041d0 <write+0xe4>
      }
      return rval;
811041a0:	e0bffc17 	ldw	r2,-16(fp)
811041a4:	00000a06 	br	811041d0 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
811041a8:	11040b00 	call	811040b0 <alt_get_errno>
811041ac:	1007883a 	mov	r3,r2
811041b0:	00800344 	movi	r2,13
811041b4:	18800015 	stw	r2,0(r3)
811041b8:	00000406 	br	811041cc <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
811041bc:	11040b00 	call	811040b0 <alt_get_errno>
811041c0:	1007883a 	mov	r3,r2
811041c4:	00801444 	movi	r2,81
811041c8:	18800015 	stw	r2,0(r3)
  }
  return -1;
811041cc:	00bfffc4 	movi	r2,-1
}
811041d0:	e037883a 	mov	sp,fp
811041d4:	dfc00117 	ldw	ra,4(sp)
811041d8:	df000017 	ldw	fp,0(sp)
811041dc:	dec00204 	addi	sp,sp,8
811041e0:	f800283a 	ret

811041e4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
811041e4:	defffd04 	addi	sp,sp,-12
811041e8:	dfc00215 	stw	ra,8(sp)
811041ec:	df000115 	stw	fp,4(sp)
811041f0:	df000104 	addi	fp,sp,4
811041f4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
811041f8:	d1600604 	addi	r5,gp,-32744
811041fc:	e13fff17 	ldw	r4,-4(fp)
81104200:	1107d300 	call	81107d30 <alt_dev_llist_insert>
}
81104204:	e037883a 	mov	sp,fp
81104208:	dfc00117 	ldw	ra,4(sp)
8110420c:	df000017 	ldw	fp,0(sp)
81104210:	dec00204 	addi	sp,sp,8
81104214:	f800283a 	ret

81104218 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
81104218:	defffd04 	addi	sp,sp,-12
8110421c:	dfc00215 	stw	ra,8(sp)
81104220:	df000115 	stw	fp,4(sp)
81104224:	df000104 	addi	fp,sp,4
81104228:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
8110422c:	11089640 	call	81108964 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
81104230:	00800044 	movi	r2,1
81104234:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
81104238:	0001883a 	nop
8110423c:	e037883a 	mov	sp,fp
81104240:	dfc00117 	ldw	ra,4(sp)
81104244:	df000017 	ldw	fp,0(sp)
81104248:	dec00204 	addi	sp,sp,8
8110424c:	f800283a 	ret

81104250 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
81104250:	defffe04 	addi	sp,sp,-8
81104254:	dfc00115 	stw	ra,4(sp)
81104258:	df000015 	stw	fp,0(sp)
8110425c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_1MS, timer_1ms);
81104260:	01c0fa04 	movi	r7,1000
81104264:	018000c4 	movi	r6,3
81104268:	000b883a 	mov	r5,zero
8110426c:	01200034 	movhi	r4,32768
81104270:	21000804 	addi	r4,r4,32
81104274:	1105b800 	call	81105b80 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1US, timer_1us);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
81104278:	01800084 	movi	r6,2
8110427c:	000b883a 	mov	r5,zero
81104280:	01204474 	movhi	r4,33041
81104284:	2127aa04 	addi	r4,r4,-24920
81104288:	11044700 	call	81104470 <altera_avalon_jtag_uart_init>
8110428c:	01204474 	movhi	r4,33041
81104290:	2127a004 	addi	r4,r4,-24960
81104294:	11041e40 	call	811041e4 <alt_dev_reg>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_RX, sgdma_rx);
81104298:	01800044 	movi	r6,1
8110429c:	000b883a 	mov	r5,zero
811042a0:	01204474 	movhi	r4,33041
811042a4:	212bb804 	addi	r4,r4,-20768
811042a8:	1105a600 	call	81105a60 <alt_avalon_sgdma_init>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_TX, sgdma_tx);
811042ac:	000d883a 	mov	r6,zero
811042b0:	000b883a 	mov	r5,zero
811042b4:	01204474 	movhi	r4,33041
811042b8:	212bc404 	addi	r4,r4,-20720
811042bc:	1105a600 	call	81105a60 <alt_avalon_sgdma_init>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
811042c0:	0001883a 	nop
    ALTERA_ETH_TSE_INIT ( TSE_MAC, tse_mac);
811042c4:	0001883a 	nop
    ALTERA_MSGDMA_INIT ( DMA_DDR_M, dma_DDR_M);
811042c8:	00a04474 	movhi	r2,33041
811042cc:	10abd004 	addi	r2,r2,-20672
811042d0:	10c00717 	ldw	r3,28(r2)
811042d4:	00a04474 	movhi	r2,33041
811042d8:	10abd004 	addi	r2,r2,-20672
811042dc:	10800817 	ldw	r2,32(r2)
811042e0:	100d883a 	mov	r6,r2
811042e4:	180b883a 	mov	r5,r3
811042e8:	01204474 	movhi	r4,33041
811042ec:	212bd004 	addi	r4,r4,-20672
811042f0:	11077c80 	call	811077c8 <alt_msgdma_init>
}
811042f4:	0001883a 	nop
811042f8:	e037883a 	mov	sp,fp
811042fc:	dfc00117 	ldw	ra,4(sp)
81104300:	df000017 	ldw	fp,0(sp)
81104304:	dec00204 	addi	sp,sp,8
81104308:	f800283a 	ret

8110430c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
8110430c:	defffa04 	addi	sp,sp,-24
81104310:	dfc00515 	stw	ra,20(sp)
81104314:	df000415 	stw	fp,16(sp)
81104318:	df000404 	addi	fp,sp,16
8110431c:	e13ffd15 	stw	r4,-12(fp)
81104320:	e17ffe15 	stw	r5,-8(fp)
81104324:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
81104328:	e0bffd17 	ldw	r2,-12(fp)
8110432c:	10800017 	ldw	r2,0(r2)
81104330:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
81104334:	e0bffc17 	ldw	r2,-16(fp)
81104338:	10c00a04 	addi	r3,r2,40
8110433c:	e0bffd17 	ldw	r2,-12(fp)
81104340:	10800217 	ldw	r2,8(r2)
81104344:	100f883a 	mov	r7,r2
81104348:	e1bfff17 	ldw	r6,-4(fp)
8110434c:	e17ffe17 	ldw	r5,-8(fp)
81104350:	1809883a 	mov	r4,r3
81104354:	11049340 	call	81104934 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
81104358:	e037883a 	mov	sp,fp
8110435c:	dfc00117 	ldw	ra,4(sp)
81104360:	df000017 	ldw	fp,0(sp)
81104364:	dec00204 	addi	sp,sp,8
81104368:	f800283a 	ret

8110436c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
8110436c:	defffa04 	addi	sp,sp,-24
81104370:	dfc00515 	stw	ra,20(sp)
81104374:	df000415 	stw	fp,16(sp)
81104378:	df000404 	addi	fp,sp,16
8110437c:	e13ffd15 	stw	r4,-12(fp)
81104380:	e17ffe15 	stw	r5,-8(fp)
81104384:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
81104388:	e0bffd17 	ldw	r2,-12(fp)
8110438c:	10800017 	ldw	r2,0(r2)
81104390:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
81104394:	e0bffc17 	ldw	r2,-16(fp)
81104398:	10c00a04 	addi	r3,r2,40
8110439c:	e0bffd17 	ldw	r2,-12(fp)
811043a0:	10800217 	ldw	r2,8(r2)
811043a4:	100f883a 	mov	r7,r2
811043a8:	e1bfff17 	ldw	r6,-4(fp)
811043ac:	e17ffe17 	ldw	r5,-8(fp)
811043b0:	1809883a 	mov	r4,r3
811043b4:	1104b500 	call	81104b50 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
811043b8:	e037883a 	mov	sp,fp
811043bc:	dfc00117 	ldw	ra,4(sp)
811043c0:	df000017 	ldw	fp,0(sp)
811043c4:	dec00204 	addi	sp,sp,8
811043c8:	f800283a 	ret

811043cc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
811043cc:	defffc04 	addi	sp,sp,-16
811043d0:	dfc00315 	stw	ra,12(sp)
811043d4:	df000215 	stw	fp,8(sp)
811043d8:	df000204 	addi	fp,sp,8
811043dc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
811043e0:	e0bfff17 	ldw	r2,-4(fp)
811043e4:	10800017 	ldw	r2,0(r2)
811043e8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
811043ec:	e0bffe17 	ldw	r2,-8(fp)
811043f0:	10c00a04 	addi	r3,r2,40
811043f4:	e0bfff17 	ldw	r2,-4(fp)
811043f8:	10800217 	ldw	r2,8(r2)
811043fc:	100b883a 	mov	r5,r2
81104400:	1809883a 	mov	r4,r3
81104404:	11047dc0 	call	811047dc <altera_avalon_jtag_uart_close>
}
81104408:	e037883a 	mov	sp,fp
8110440c:	dfc00117 	ldw	ra,4(sp)
81104410:	df000017 	ldw	fp,0(sp)
81104414:	dec00204 	addi	sp,sp,8
81104418:	f800283a 	ret

8110441c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
8110441c:	defffa04 	addi	sp,sp,-24
81104420:	dfc00515 	stw	ra,20(sp)
81104424:	df000415 	stw	fp,16(sp)
81104428:	df000404 	addi	fp,sp,16
8110442c:	e13ffd15 	stw	r4,-12(fp)
81104430:	e17ffe15 	stw	r5,-8(fp)
81104434:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
81104438:	e0bffd17 	ldw	r2,-12(fp)
8110443c:	10800017 	ldw	r2,0(r2)
81104440:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
81104444:	e0bffc17 	ldw	r2,-16(fp)
81104448:	10800a04 	addi	r2,r2,40
8110444c:	e1bfff17 	ldw	r6,-4(fp)
81104450:	e17ffe17 	ldw	r5,-8(fp)
81104454:	1009883a 	mov	r4,r2
81104458:	11048440 	call	81104844 <altera_avalon_jtag_uart_ioctl>
}
8110445c:	e037883a 	mov	sp,fp
81104460:	dfc00117 	ldw	ra,4(sp)
81104464:	df000017 	ldw	fp,0(sp)
81104468:	dec00204 	addi	sp,sp,8
8110446c:	f800283a 	ret

81104470 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
81104470:	defffa04 	addi	sp,sp,-24
81104474:	dfc00515 	stw	ra,20(sp)
81104478:	df000415 	stw	fp,16(sp)
8110447c:	df000404 	addi	fp,sp,16
81104480:	e13ffd15 	stw	r4,-12(fp)
81104484:	e17ffe15 	stw	r5,-8(fp)
81104488:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
8110448c:	e0bffd17 	ldw	r2,-12(fp)
81104490:	00c00044 	movi	r3,1
81104494:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
81104498:	e0bffd17 	ldw	r2,-12(fp)
8110449c:	10800017 	ldw	r2,0(r2)
811044a0:	10800104 	addi	r2,r2,4
811044a4:	1007883a 	mov	r3,r2
811044a8:	e0bffd17 	ldw	r2,-12(fp)
811044ac:	10800817 	ldw	r2,32(r2)
811044b0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
811044b4:	e0bffe17 	ldw	r2,-8(fp)
811044b8:	e0ffff17 	ldw	r3,-4(fp)
811044bc:	d8000015 	stw	zero,0(sp)
811044c0:	e1fffd17 	ldw	r7,-12(fp)
811044c4:	01a04434 	movhi	r6,33040
811044c8:	31914c04 	addi	r6,r6,17712
811044cc:	180b883a 	mov	r5,r3
811044d0:	1009883a 	mov	r4,r2
811044d4:	1107f240 	call	81107f24 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
811044d8:	e0bffd17 	ldw	r2,-12(fp)
811044dc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
811044e0:	e0bffd17 	ldw	r2,-12(fp)
811044e4:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
811044e8:	d0e01a17 	ldw	r3,-32664(gp)
811044ec:	e1fffd17 	ldw	r7,-12(fp)
811044f0:	01a04434 	movhi	r6,33040
811044f4:	3191cf04 	addi	r6,r6,18236
811044f8:	180b883a 	mov	r5,r3
811044fc:	1009883a 	mov	r4,r2
81104500:	1107a780 	call	81107a78 <alt_alarm_start>
81104504:	1000040e 	bge	r2,zero,81104518 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
81104508:	e0fffd17 	ldw	r3,-12(fp)
8110450c:	00a00034 	movhi	r2,32768
81104510:	10bfffc4 	addi	r2,r2,-1
81104514:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
81104518:	0001883a 	nop
8110451c:	e037883a 	mov	sp,fp
81104520:	dfc00117 	ldw	ra,4(sp)
81104524:	df000017 	ldw	fp,0(sp)
81104528:	dec00204 	addi	sp,sp,8
8110452c:	f800283a 	ret

81104530 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
81104530:	defff804 	addi	sp,sp,-32
81104534:	df000715 	stw	fp,28(sp)
81104538:	df000704 	addi	fp,sp,28
8110453c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
81104540:	e0bfff17 	ldw	r2,-4(fp)
81104544:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
81104548:	e0bffb17 	ldw	r2,-20(fp)
8110454c:	10800017 	ldw	r2,0(r2)
81104550:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
81104554:	e0bffc17 	ldw	r2,-16(fp)
81104558:	10800104 	addi	r2,r2,4
8110455c:	10800037 	ldwio	r2,0(r2)
81104560:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
81104564:	e0bffd17 	ldw	r2,-12(fp)
81104568:	1080c00c 	andi	r2,r2,768
8110456c:	10006d26 	beq	r2,zero,81104724 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
81104570:	e0bffd17 	ldw	r2,-12(fp)
81104574:	1080400c 	andi	r2,r2,256
81104578:	10003526 	beq	r2,zero,81104650 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
8110457c:	00800074 	movhi	r2,1
81104580:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
81104584:	e0bffb17 	ldw	r2,-20(fp)
81104588:	10800a17 	ldw	r2,40(r2)
8110458c:	10800044 	addi	r2,r2,1
81104590:	1081ffcc 	andi	r2,r2,2047
81104594:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
81104598:	e0bffb17 	ldw	r2,-20(fp)
8110459c:	10c00b17 	ldw	r3,44(r2)
811045a0:	e0bffe17 	ldw	r2,-8(fp)
811045a4:	18801526 	beq	r3,r2,811045fc <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
811045a8:	e0bffc17 	ldw	r2,-16(fp)
811045ac:	10800037 	ldwio	r2,0(r2)
811045b0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
811045b4:	e0bff917 	ldw	r2,-28(fp)
811045b8:	10a0000c 	andi	r2,r2,32768
811045bc:	10001126 	beq	r2,zero,81104604 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
811045c0:	e0bffb17 	ldw	r2,-20(fp)
811045c4:	10800a17 	ldw	r2,40(r2)
811045c8:	e0fff917 	ldw	r3,-28(fp)
811045cc:	1809883a 	mov	r4,r3
811045d0:	e0fffb17 	ldw	r3,-20(fp)
811045d4:	1885883a 	add	r2,r3,r2
811045d8:	10800e04 	addi	r2,r2,56
811045dc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
811045e0:	e0bffb17 	ldw	r2,-20(fp)
811045e4:	10800a17 	ldw	r2,40(r2)
811045e8:	10800044 	addi	r2,r2,1
811045ec:	10c1ffcc 	andi	r3,r2,2047
811045f0:	e0bffb17 	ldw	r2,-20(fp)
811045f4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
811045f8:	003fe206 	br	81104584 <__reset+0xfb0e4584>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
811045fc:	0001883a 	nop
81104600:	00000106 	br	81104608 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
81104604:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
81104608:	e0bff917 	ldw	r2,-28(fp)
8110460c:	10bfffec 	andhi	r2,r2,65535
81104610:	10000f26 	beq	r2,zero,81104650 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
81104614:	e0bffb17 	ldw	r2,-20(fp)
81104618:	10c00817 	ldw	r3,32(r2)
8110461c:	00bfff84 	movi	r2,-2
81104620:	1886703a 	and	r3,r3,r2
81104624:	e0bffb17 	ldw	r2,-20(fp)
81104628:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
8110462c:	e0bffc17 	ldw	r2,-16(fp)
81104630:	10800104 	addi	r2,r2,4
81104634:	1007883a 	mov	r3,r2
81104638:	e0bffb17 	ldw	r2,-20(fp)
8110463c:	10800817 	ldw	r2,32(r2)
81104640:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
81104644:	e0bffc17 	ldw	r2,-16(fp)
81104648:	10800104 	addi	r2,r2,4
8110464c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
81104650:	e0bffd17 	ldw	r2,-12(fp)
81104654:	1080800c 	andi	r2,r2,512
81104658:	103fbe26 	beq	r2,zero,81104554 <__reset+0xfb0e4554>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
8110465c:	e0bffd17 	ldw	r2,-12(fp)
81104660:	1004d43a 	srli	r2,r2,16
81104664:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
81104668:	00001406 	br	811046bc <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
8110466c:	e0bffc17 	ldw	r2,-16(fp)
81104670:	e0fffb17 	ldw	r3,-20(fp)
81104674:	18c00d17 	ldw	r3,52(r3)
81104678:	e13ffb17 	ldw	r4,-20(fp)
8110467c:	20c7883a 	add	r3,r4,r3
81104680:	18c20e04 	addi	r3,r3,2104
81104684:	18c00003 	ldbu	r3,0(r3)
81104688:	18c03fcc 	andi	r3,r3,255
8110468c:	18c0201c 	xori	r3,r3,128
81104690:	18ffe004 	addi	r3,r3,-128
81104694:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
81104698:	e0bffb17 	ldw	r2,-20(fp)
8110469c:	10800d17 	ldw	r2,52(r2)
811046a0:	10800044 	addi	r2,r2,1
811046a4:	10c1ffcc 	andi	r3,r2,2047
811046a8:	e0bffb17 	ldw	r2,-20(fp)
811046ac:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
811046b0:	e0bffa17 	ldw	r2,-24(fp)
811046b4:	10bfffc4 	addi	r2,r2,-1
811046b8:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
811046bc:	e0bffa17 	ldw	r2,-24(fp)
811046c0:	10000526 	beq	r2,zero,811046d8 <altera_avalon_jtag_uart_irq+0x1a8>
811046c4:	e0bffb17 	ldw	r2,-20(fp)
811046c8:	10c00d17 	ldw	r3,52(r2)
811046cc:	e0bffb17 	ldw	r2,-20(fp)
811046d0:	10800c17 	ldw	r2,48(r2)
811046d4:	18bfe51e 	bne	r3,r2,8110466c <__reset+0xfb0e466c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
811046d8:	e0bffa17 	ldw	r2,-24(fp)
811046dc:	103f9d26 	beq	r2,zero,81104554 <__reset+0xfb0e4554>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
811046e0:	e0bffb17 	ldw	r2,-20(fp)
811046e4:	10c00817 	ldw	r3,32(r2)
811046e8:	00bfff44 	movi	r2,-3
811046ec:	1886703a 	and	r3,r3,r2
811046f0:	e0bffb17 	ldw	r2,-20(fp)
811046f4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
811046f8:	e0bffb17 	ldw	r2,-20(fp)
811046fc:	10800017 	ldw	r2,0(r2)
81104700:	10800104 	addi	r2,r2,4
81104704:	1007883a 	mov	r3,r2
81104708:	e0bffb17 	ldw	r2,-20(fp)
8110470c:	10800817 	ldw	r2,32(r2)
81104710:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
81104714:	e0bffc17 	ldw	r2,-16(fp)
81104718:	10800104 	addi	r2,r2,4
8110471c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
81104720:	003f8c06 	br	81104554 <__reset+0xfb0e4554>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
81104724:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
81104728:	0001883a 	nop
8110472c:	e037883a 	mov	sp,fp
81104730:	df000017 	ldw	fp,0(sp)
81104734:	dec00104 	addi	sp,sp,4
81104738:	f800283a 	ret

8110473c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
8110473c:	defff804 	addi	sp,sp,-32
81104740:	df000715 	stw	fp,28(sp)
81104744:	df000704 	addi	fp,sp,28
81104748:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
8110474c:	e0bffb17 	ldw	r2,-20(fp)
81104750:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
81104754:	e0bff917 	ldw	r2,-28(fp)
81104758:	10800017 	ldw	r2,0(r2)
8110475c:	10800104 	addi	r2,r2,4
81104760:	10800037 	ldwio	r2,0(r2)
81104764:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
81104768:	e0bffa17 	ldw	r2,-24(fp)
8110476c:	1081000c 	andi	r2,r2,1024
81104770:	10000b26 	beq	r2,zero,811047a0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
81104774:	e0bff917 	ldw	r2,-28(fp)
81104778:	10800017 	ldw	r2,0(r2)
8110477c:	10800104 	addi	r2,r2,4
81104780:	1007883a 	mov	r3,r2
81104784:	e0bff917 	ldw	r2,-28(fp)
81104788:	10800817 	ldw	r2,32(r2)
8110478c:	10810014 	ori	r2,r2,1024
81104790:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
81104794:	e0bff917 	ldw	r2,-28(fp)
81104798:	10000915 	stw	zero,36(r2)
8110479c:	00000a06 	br	811047c8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
811047a0:	e0bff917 	ldw	r2,-28(fp)
811047a4:	10c00917 	ldw	r3,36(r2)
811047a8:	00a00034 	movhi	r2,32768
811047ac:	10bfff04 	addi	r2,r2,-4
811047b0:	10c00536 	bltu	r2,r3,811047c8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
811047b4:	e0bff917 	ldw	r2,-28(fp)
811047b8:	10800917 	ldw	r2,36(r2)
811047bc:	10c00044 	addi	r3,r2,1
811047c0:	e0bff917 	ldw	r2,-28(fp)
811047c4:	10c00915 	stw	r3,36(r2)
811047c8:	d0a01a17 	ldw	r2,-32664(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
811047cc:	e037883a 	mov	sp,fp
811047d0:	df000017 	ldw	fp,0(sp)
811047d4:	dec00104 	addi	sp,sp,4
811047d8:	f800283a 	ret

811047dc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
811047dc:	defffd04 	addi	sp,sp,-12
811047e0:	df000215 	stw	fp,8(sp)
811047e4:	df000204 	addi	fp,sp,8
811047e8:	e13ffe15 	stw	r4,-8(fp)
811047ec:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
811047f0:	00000506 	br	81104808 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
811047f4:	e0bfff17 	ldw	r2,-4(fp)
811047f8:	1090000c 	andi	r2,r2,16384
811047fc:	10000226 	beq	r2,zero,81104808 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
81104800:	00bffd44 	movi	r2,-11
81104804:	00000b06 	br	81104834 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
81104808:	e0bffe17 	ldw	r2,-8(fp)
8110480c:	10c00d17 	ldw	r3,52(r2)
81104810:	e0bffe17 	ldw	r2,-8(fp)
81104814:	10800c17 	ldw	r2,48(r2)
81104818:	18800526 	beq	r3,r2,81104830 <altera_avalon_jtag_uart_close+0x54>
8110481c:	e0bffe17 	ldw	r2,-8(fp)
81104820:	10c00917 	ldw	r3,36(r2)
81104824:	e0bffe17 	ldw	r2,-8(fp)
81104828:	10800117 	ldw	r2,4(r2)
8110482c:	18bff136 	bltu	r3,r2,811047f4 <__reset+0xfb0e47f4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
81104830:	0005883a 	mov	r2,zero
}
81104834:	e037883a 	mov	sp,fp
81104838:	df000017 	ldw	fp,0(sp)
8110483c:	dec00104 	addi	sp,sp,4
81104840:	f800283a 	ret

81104844 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
81104844:	defffa04 	addi	sp,sp,-24
81104848:	df000515 	stw	fp,20(sp)
8110484c:	df000504 	addi	fp,sp,20
81104850:	e13ffd15 	stw	r4,-12(fp)
81104854:	e17ffe15 	stw	r5,-8(fp)
81104858:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
8110485c:	00bff9c4 	movi	r2,-25
81104860:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
81104864:	e0bffe17 	ldw	r2,-8(fp)
81104868:	10da8060 	cmpeqi	r3,r2,27137
8110486c:	1800031e 	bne	r3,zero,8110487c <altera_avalon_jtag_uart_ioctl+0x38>
81104870:	109a80a0 	cmpeqi	r2,r2,27138
81104874:	1000181e 	bne	r2,zero,811048d8 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
81104878:	00002906 	br	81104920 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
8110487c:	e0bffd17 	ldw	r2,-12(fp)
81104880:	10c00117 	ldw	r3,4(r2)
81104884:	00a00034 	movhi	r2,32768
81104888:	10bfffc4 	addi	r2,r2,-1
8110488c:	18802126 	beq	r3,r2,81104914 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
81104890:	e0bfff17 	ldw	r2,-4(fp)
81104894:	10800017 	ldw	r2,0(r2)
81104898:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
8110489c:	e0bffc17 	ldw	r2,-16(fp)
811048a0:	10800090 	cmplti	r2,r2,2
811048a4:	1000061e 	bne	r2,zero,811048c0 <altera_avalon_jtag_uart_ioctl+0x7c>
811048a8:	e0fffc17 	ldw	r3,-16(fp)
811048ac:	00a00034 	movhi	r2,32768
811048b0:	10bfffc4 	addi	r2,r2,-1
811048b4:	18800226 	beq	r3,r2,811048c0 <altera_avalon_jtag_uart_ioctl+0x7c>
811048b8:	e0bffc17 	ldw	r2,-16(fp)
811048bc:	00000206 	br	811048c8 <altera_avalon_jtag_uart_ioctl+0x84>
811048c0:	00a00034 	movhi	r2,32768
811048c4:	10bfff84 	addi	r2,r2,-2
811048c8:	e0fffd17 	ldw	r3,-12(fp)
811048cc:	18800115 	stw	r2,4(r3)
      rc = 0;
811048d0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
811048d4:	00000f06 	br	81104914 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
811048d8:	e0bffd17 	ldw	r2,-12(fp)
811048dc:	10c00117 	ldw	r3,4(r2)
811048e0:	00a00034 	movhi	r2,32768
811048e4:	10bfffc4 	addi	r2,r2,-1
811048e8:	18800c26 	beq	r3,r2,8110491c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
811048ec:	e0bffd17 	ldw	r2,-12(fp)
811048f0:	10c00917 	ldw	r3,36(r2)
811048f4:	e0bffd17 	ldw	r2,-12(fp)
811048f8:	10800117 	ldw	r2,4(r2)
811048fc:	1885803a 	cmpltu	r2,r3,r2
81104900:	10c03fcc 	andi	r3,r2,255
81104904:	e0bfff17 	ldw	r2,-4(fp)
81104908:	10c00015 	stw	r3,0(r2)
      rc = 0;
8110490c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
81104910:	00000206 	br	8110491c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
81104914:	0001883a 	nop
81104918:	00000106 	br	81104920 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
8110491c:	0001883a 	nop

  default:
    break;
  }

  return rc;
81104920:	e0bffb17 	ldw	r2,-20(fp)
}
81104924:	e037883a 	mov	sp,fp
81104928:	df000017 	ldw	fp,0(sp)
8110492c:	dec00104 	addi	sp,sp,4
81104930:	f800283a 	ret

81104934 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
81104934:	defff304 	addi	sp,sp,-52
81104938:	dfc00c15 	stw	ra,48(sp)
8110493c:	df000b15 	stw	fp,44(sp)
81104940:	df000b04 	addi	fp,sp,44
81104944:	e13ffc15 	stw	r4,-16(fp)
81104948:	e17ffd15 	stw	r5,-12(fp)
8110494c:	e1bffe15 	stw	r6,-8(fp)
81104950:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
81104954:	e0bffd17 	ldw	r2,-12(fp)
81104958:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
8110495c:	00004706 	br	81104a7c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
81104960:	e0bffc17 	ldw	r2,-16(fp)
81104964:	10800a17 	ldw	r2,40(r2)
81104968:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
8110496c:	e0bffc17 	ldw	r2,-16(fp)
81104970:	10800b17 	ldw	r2,44(r2)
81104974:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
81104978:	e0fff717 	ldw	r3,-36(fp)
8110497c:	e0bff817 	ldw	r2,-32(fp)
81104980:	18800536 	bltu	r3,r2,81104998 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
81104984:	e0fff717 	ldw	r3,-36(fp)
81104988:	e0bff817 	ldw	r2,-32(fp)
8110498c:	1885c83a 	sub	r2,r3,r2
81104990:	e0bff615 	stw	r2,-40(fp)
81104994:	00000406 	br	811049a8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
81104998:	00c20004 	movi	r3,2048
8110499c:	e0bff817 	ldw	r2,-32(fp)
811049a0:	1885c83a 	sub	r2,r3,r2
811049a4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
811049a8:	e0bff617 	ldw	r2,-40(fp)
811049ac:	10001e26 	beq	r2,zero,81104a28 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
811049b0:	e0fffe17 	ldw	r3,-8(fp)
811049b4:	e0bff617 	ldw	r2,-40(fp)
811049b8:	1880022e 	bgeu	r3,r2,811049c4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
811049bc:	e0bffe17 	ldw	r2,-8(fp)
811049c0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
811049c4:	e0bffc17 	ldw	r2,-16(fp)
811049c8:	10c00e04 	addi	r3,r2,56
811049cc:	e0bff817 	ldw	r2,-32(fp)
811049d0:	1885883a 	add	r2,r3,r2
811049d4:	e1bff617 	ldw	r6,-40(fp)
811049d8:	100b883a 	mov	r5,r2
811049dc:	e13ff517 	ldw	r4,-44(fp)
811049e0:	11020040 	call	81102004 <memcpy>
      ptr   += n;
811049e4:	e0fff517 	ldw	r3,-44(fp)
811049e8:	e0bff617 	ldw	r2,-40(fp)
811049ec:	1885883a 	add	r2,r3,r2
811049f0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
811049f4:	e0fffe17 	ldw	r3,-8(fp)
811049f8:	e0bff617 	ldw	r2,-40(fp)
811049fc:	1885c83a 	sub	r2,r3,r2
81104a00:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
81104a04:	e0fff817 	ldw	r3,-32(fp)
81104a08:	e0bff617 	ldw	r2,-40(fp)
81104a0c:	1885883a 	add	r2,r3,r2
81104a10:	10c1ffcc 	andi	r3,r2,2047
81104a14:	e0bffc17 	ldw	r2,-16(fp)
81104a18:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
81104a1c:	e0bffe17 	ldw	r2,-8(fp)
81104a20:	00bfcf16 	blt	zero,r2,81104960 <__reset+0xfb0e4960>
81104a24:	00000106 	br	81104a2c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
81104a28:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
81104a2c:	e0fff517 	ldw	r3,-44(fp)
81104a30:	e0bffd17 	ldw	r2,-12(fp)
81104a34:	1880141e 	bne	r3,r2,81104a88 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
81104a38:	e0bfff17 	ldw	r2,-4(fp)
81104a3c:	1090000c 	andi	r2,r2,16384
81104a40:	1000131e 	bne	r2,zero,81104a90 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
81104a44:	0001883a 	nop
81104a48:	e0bffc17 	ldw	r2,-16(fp)
81104a4c:	10c00a17 	ldw	r3,40(r2)
81104a50:	e0bff717 	ldw	r2,-36(fp)
81104a54:	1880051e 	bne	r3,r2,81104a6c <altera_avalon_jtag_uart_read+0x138>
81104a58:	e0bffc17 	ldw	r2,-16(fp)
81104a5c:	10c00917 	ldw	r3,36(r2)
81104a60:	e0bffc17 	ldw	r2,-16(fp)
81104a64:	10800117 	ldw	r2,4(r2)
81104a68:	18bff736 	bltu	r3,r2,81104a48 <__reset+0xfb0e4a48>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
81104a6c:	e0bffc17 	ldw	r2,-16(fp)
81104a70:	10c00a17 	ldw	r3,40(r2)
81104a74:	e0bff717 	ldw	r2,-36(fp)
81104a78:	18800726 	beq	r3,r2,81104a98 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
81104a7c:	e0bffe17 	ldw	r2,-8(fp)
81104a80:	00bfb716 	blt	zero,r2,81104960 <__reset+0xfb0e4960>
81104a84:	00000506 	br	81104a9c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
81104a88:	0001883a 	nop
81104a8c:	00000306 	br	81104a9c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
81104a90:	0001883a 	nop
81104a94:	00000106 	br	81104a9c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
81104a98:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
81104a9c:	e0fff517 	ldw	r3,-44(fp)
81104aa0:	e0bffd17 	ldw	r2,-12(fp)
81104aa4:	18801826 	beq	r3,r2,81104b08 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81104aa8:	0005303a 	rdctl	r2,status
81104aac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81104ab0:	e0fffb17 	ldw	r3,-20(fp)
81104ab4:	00bfff84 	movi	r2,-2
81104ab8:	1884703a 	and	r2,r3,r2
81104abc:	1001703a 	wrctl	status,r2
  
  return context;
81104ac0:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
81104ac4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
81104ac8:	e0bffc17 	ldw	r2,-16(fp)
81104acc:	10800817 	ldw	r2,32(r2)
81104ad0:	10c00054 	ori	r3,r2,1
81104ad4:	e0bffc17 	ldw	r2,-16(fp)
81104ad8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
81104adc:	e0bffc17 	ldw	r2,-16(fp)
81104ae0:	10800017 	ldw	r2,0(r2)
81104ae4:	10800104 	addi	r2,r2,4
81104ae8:	1007883a 	mov	r3,r2
81104aec:	e0bffc17 	ldw	r2,-16(fp)
81104af0:	10800817 	ldw	r2,32(r2)
81104af4:	18800035 	stwio	r2,0(r3)
81104af8:	e0bffa17 	ldw	r2,-24(fp)
81104afc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81104b00:	e0bff917 	ldw	r2,-28(fp)
81104b04:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
81104b08:	e0fff517 	ldw	r3,-44(fp)
81104b0c:	e0bffd17 	ldw	r2,-12(fp)
81104b10:	18800426 	beq	r3,r2,81104b24 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
81104b14:	e0fff517 	ldw	r3,-44(fp)
81104b18:	e0bffd17 	ldw	r2,-12(fp)
81104b1c:	1885c83a 	sub	r2,r3,r2
81104b20:	00000606 	br	81104b3c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
81104b24:	e0bfff17 	ldw	r2,-4(fp)
81104b28:	1090000c 	andi	r2,r2,16384
81104b2c:	10000226 	beq	r2,zero,81104b38 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
81104b30:	00bffd44 	movi	r2,-11
81104b34:	00000106 	br	81104b3c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
81104b38:	00bffec4 	movi	r2,-5
}
81104b3c:	e037883a 	mov	sp,fp
81104b40:	dfc00117 	ldw	ra,4(sp)
81104b44:	df000017 	ldw	fp,0(sp)
81104b48:	dec00204 	addi	sp,sp,8
81104b4c:	f800283a 	ret

81104b50 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
81104b50:	defff304 	addi	sp,sp,-52
81104b54:	dfc00c15 	stw	ra,48(sp)
81104b58:	df000b15 	stw	fp,44(sp)
81104b5c:	df000b04 	addi	fp,sp,44
81104b60:	e13ffc15 	stw	r4,-16(fp)
81104b64:	e17ffd15 	stw	r5,-12(fp)
81104b68:	e1bffe15 	stw	r6,-8(fp)
81104b6c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
81104b70:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
81104b74:	e0bffd17 	ldw	r2,-12(fp)
81104b78:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
81104b7c:	00003706 	br	81104c5c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
81104b80:	e0bffc17 	ldw	r2,-16(fp)
81104b84:	10800c17 	ldw	r2,48(r2)
81104b88:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
81104b8c:	e0bffc17 	ldw	r2,-16(fp)
81104b90:	10800d17 	ldw	r2,52(r2)
81104b94:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
81104b98:	e0fff917 	ldw	r3,-28(fp)
81104b9c:	e0bff517 	ldw	r2,-44(fp)
81104ba0:	1880062e 	bgeu	r3,r2,81104bbc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
81104ba4:	e0fff517 	ldw	r3,-44(fp)
81104ba8:	e0bff917 	ldw	r2,-28(fp)
81104bac:	1885c83a 	sub	r2,r3,r2
81104bb0:	10bfffc4 	addi	r2,r2,-1
81104bb4:	e0bff615 	stw	r2,-40(fp)
81104bb8:	00000b06 	br	81104be8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
81104bbc:	e0bff517 	ldw	r2,-44(fp)
81104bc0:	10000526 	beq	r2,zero,81104bd8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
81104bc4:	00c20004 	movi	r3,2048
81104bc8:	e0bff917 	ldw	r2,-28(fp)
81104bcc:	1885c83a 	sub	r2,r3,r2
81104bd0:	e0bff615 	stw	r2,-40(fp)
81104bd4:	00000406 	br	81104be8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
81104bd8:	00c1ffc4 	movi	r3,2047
81104bdc:	e0bff917 	ldw	r2,-28(fp)
81104be0:	1885c83a 	sub	r2,r3,r2
81104be4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
81104be8:	e0bff617 	ldw	r2,-40(fp)
81104bec:	10001e26 	beq	r2,zero,81104c68 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
81104bf0:	e0fffe17 	ldw	r3,-8(fp)
81104bf4:	e0bff617 	ldw	r2,-40(fp)
81104bf8:	1880022e 	bgeu	r3,r2,81104c04 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
81104bfc:	e0bffe17 	ldw	r2,-8(fp)
81104c00:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
81104c04:	e0bffc17 	ldw	r2,-16(fp)
81104c08:	10c20e04 	addi	r3,r2,2104
81104c0c:	e0bff917 	ldw	r2,-28(fp)
81104c10:	1885883a 	add	r2,r3,r2
81104c14:	e1bff617 	ldw	r6,-40(fp)
81104c18:	e17ffd17 	ldw	r5,-12(fp)
81104c1c:	1009883a 	mov	r4,r2
81104c20:	11020040 	call	81102004 <memcpy>
      ptr   += n;
81104c24:	e0fffd17 	ldw	r3,-12(fp)
81104c28:	e0bff617 	ldw	r2,-40(fp)
81104c2c:	1885883a 	add	r2,r3,r2
81104c30:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
81104c34:	e0fffe17 	ldw	r3,-8(fp)
81104c38:	e0bff617 	ldw	r2,-40(fp)
81104c3c:	1885c83a 	sub	r2,r3,r2
81104c40:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
81104c44:	e0fff917 	ldw	r3,-28(fp)
81104c48:	e0bff617 	ldw	r2,-40(fp)
81104c4c:	1885883a 	add	r2,r3,r2
81104c50:	10c1ffcc 	andi	r3,r2,2047
81104c54:	e0bffc17 	ldw	r2,-16(fp)
81104c58:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
81104c5c:	e0bffe17 	ldw	r2,-8(fp)
81104c60:	00bfc716 	blt	zero,r2,81104b80 <__reset+0xfb0e4b80>
81104c64:	00000106 	br	81104c6c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
81104c68:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81104c6c:	0005303a 	rdctl	r2,status
81104c70:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81104c74:	e0fffb17 	ldw	r3,-20(fp)
81104c78:	00bfff84 	movi	r2,-2
81104c7c:	1884703a 	and	r2,r3,r2
81104c80:	1001703a 	wrctl	status,r2
  
  return context;
81104c84:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
81104c88:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
81104c8c:	e0bffc17 	ldw	r2,-16(fp)
81104c90:	10800817 	ldw	r2,32(r2)
81104c94:	10c00094 	ori	r3,r2,2
81104c98:	e0bffc17 	ldw	r2,-16(fp)
81104c9c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
81104ca0:	e0bffc17 	ldw	r2,-16(fp)
81104ca4:	10800017 	ldw	r2,0(r2)
81104ca8:	10800104 	addi	r2,r2,4
81104cac:	1007883a 	mov	r3,r2
81104cb0:	e0bffc17 	ldw	r2,-16(fp)
81104cb4:	10800817 	ldw	r2,32(r2)
81104cb8:	18800035 	stwio	r2,0(r3)
81104cbc:	e0bffa17 	ldw	r2,-24(fp)
81104cc0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81104cc4:	e0bff817 	ldw	r2,-32(fp)
81104cc8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
81104ccc:	e0bffe17 	ldw	r2,-8(fp)
81104cd0:	0080100e 	bge	zero,r2,81104d14 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
81104cd4:	e0bfff17 	ldw	r2,-4(fp)
81104cd8:	1090000c 	andi	r2,r2,16384
81104cdc:	1000101e 	bne	r2,zero,81104d20 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
81104ce0:	0001883a 	nop
81104ce4:	e0bffc17 	ldw	r2,-16(fp)
81104ce8:	10c00d17 	ldw	r3,52(r2)
81104cec:	e0bff517 	ldw	r2,-44(fp)
81104cf0:	1880051e 	bne	r3,r2,81104d08 <altera_avalon_jtag_uart_write+0x1b8>
81104cf4:	e0bffc17 	ldw	r2,-16(fp)
81104cf8:	10c00917 	ldw	r3,36(r2)
81104cfc:	e0bffc17 	ldw	r2,-16(fp)
81104d00:	10800117 	ldw	r2,4(r2)
81104d04:	18bff736 	bltu	r3,r2,81104ce4 <__reset+0xfb0e4ce4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
81104d08:	e0bffc17 	ldw	r2,-16(fp)
81104d0c:	10800917 	ldw	r2,36(r2)
81104d10:	1000051e 	bne	r2,zero,81104d28 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
81104d14:	e0bffe17 	ldw	r2,-8(fp)
81104d18:	00bfd016 	blt	zero,r2,81104c5c <__reset+0xfb0e4c5c>
81104d1c:	00000306 	br	81104d2c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
81104d20:	0001883a 	nop
81104d24:	00000106 	br	81104d2c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
81104d28:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
81104d2c:	e0fffd17 	ldw	r3,-12(fp)
81104d30:	e0bff717 	ldw	r2,-36(fp)
81104d34:	18800426 	beq	r3,r2,81104d48 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
81104d38:	e0fffd17 	ldw	r3,-12(fp)
81104d3c:	e0bff717 	ldw	r2,-36(fp)
81104d40:	1885c83a 	sub	r2,r3,r2
81104d44:	00000606 	br	81104d60 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
81104d48:	e0bfff17 	ldw	r2,-4(fp)
81104d4c:	1090000c 	andi	r2,r2,16384
81104d50:	10000226 	beq	r2,zero,81104d5c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
81104d54:	00bffd44 	movi	r2,-11
81104d58:	00000106 	br	81104d60 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
81104d5c:	00bffec4 	movi	r2,-5
}
81104d60:	e037883a 	mov	sp,fp
81104d64:	dfc00117 	ldw	ra,4(sp)
81104d68:	df000017 	ldw	fp,0(sp)
81104d6c:	dec00204 	addi	sp,sp,8
81104d70:	f800283a 	ret

81104d74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81104d74:	defffe04 	addi	sp,sp,-8
81104d78:	dfc00115 	stw	ra,4(sp)
81104d7c:	df000015 	stw	fp,0(sp)
81104d80:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81104d84:	d0a00917 	ldw	r2,-32732(gp)
81104d88:	10000326 	beq	r2,zero,81104d98 <alt_get_errno+0x24>
81104d8c:	d0a00917 	ldw	r2,-32732(gp)
81104d90:	103ee83a 	callr	r2
81104d94:	00000106 	br	81104d9c <alt_get_errno+0x28>
81104d98:	d0a01504 	addi	r2,gp,-32684
}
81104d9c:	e037883a 	mov	sp,fp
81104da0:	dfc00117 	ldw	ra,4(sp)
81104da4:	df000017 	ldw	fp,0(sp)
81104da8:	dec00204 	addi	sp,sp,8
81104dac:	f800283a 	ret

81104db0 <alt_avalon_sgdma_do_async_transfer>:
 * - 0 for success, or various errors defined in <errno.h>
 */
int alt_avalon_sgdma_do_async_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
81104db0:	defffc04 	addi	sp,sp,-16
81104db4:	df000315 	stw	fp,12(sp)
81104db8:	df000304 	addi	fp,sp,12
81104dbc:	e13ffe15 	stw	r4,-8(fp)
81104dc0:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  /* Return with error immediately if controller is busy */
  if( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
81104dc4:	e0bffe17 	ldw	r2,-8(fp)
81104dc8:	10800317 	ldw	r2,12(r2)
81104dcc:	10800037 	ldwio	r2,0(r2)
81104dd0:	1080040c 	andi	r2,r2,16
81104dd4:	10000226 	beq	r2,zero,81104de0 <alt_avalon_sgdma_do_async_transfer+0x30>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    return -EBUSY;
81104dd8:	00bffc04 	movi	r2,-16
81104ddc:	00003906 	br	81104ec4 <alt_avalon_sgdma_do_async_transfer+0x114>
  }

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
81104de0:	e0bffe17 	ldw	r2,-8(fp)
81104de4:	10800317 	ldw	r2,12(r2)
81104de8:	10800404 	addi	r2,r2,16
81104dec:	e0fffe17 	ldw	r3,-8(fp)
81104df0:	18c00317 	ldw	r3,12(r3)
81104df4:	18c00404 	addi	r3,r3,16
81104df8:	19000037 	ldwio	r4,0(r3)
81104dfc:	00fff7c4 	movi	r3,-33
81104e00:	20c6703a 	and	r3,r4,r3
81104e04:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
81104e08:	e0bffe17 	ldw	r2,-8(fp)
81104e0c:	10800317 	ldw	r2,12(r2)
81104e10:	00c03fc4 	movi	r3,255
81104e14:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
81104e18:	e0bffe17 	ldw	r2,-8(fp)
81104e1c:	10800317 	ldw	r2,12(r2)
81104e20:	10800804 	addi	r2,r2,32
81104e24:	e0ffff17 	ldw	r3,-4(fp)
81104e28:	10c00035 	stwio	r3,0(r2)
   *  - Stop on an error with any particular descriptor
   *  - Include any control register bits registered with along with
   *    the callback routine (effectively, interrupts are controlled
   *    via the control bits set during callback-register time).
   */
  if(dev->callback) {
81104e2c:	e0bffe17 	ldw	r2,-8(fp)
81104e30:	10800917 	ldw	r2,36(r2)
81104e34:	10001126 	beq	r2,zero,81104e7c <alt_avalon_sgdma_do_async_transfer+0xcc>
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
81104e38:	e0bffe17 	ldw	r2,-8(fp)
81104e3c:	10800317 	ldw	r2,12(r2)
81104e40:	10800404 	addi	r2,r2,16
81104e44:	10800037 	ldwio	r2,0(r2)
81104e48:	e0bffd15 	stw	r2,-12(fp)

    control |= (dev->chain_control                          |
81104e4c:	e0bffe17 	ldw	r2,-8(fp)
81104e50:	10c00b17 	ldw	r3,44(r2)
81104e54:	e0bffd17 	ldw	r2,-12(fp)
81104e58:	1884b03a 	or	r2,r3,r2
81104e5c:	10801814 	ori	r2,r2,96
81104e60:	e0bffd15 	stw	r2,-12(fp)
                ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK  );

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
81104e64:	e0bffe17 	ldw	r2,-8(fp)
81104e68:	10800317 	ldw	r2,12(r2)
81104e6c:	10800404 	addi	r2,r2,16
81104e70:	e0fffd17 	ldw	r3,-12(fp)
81104e74:	10c00035 	stwio	r3,0(r2)
81104e78:	00001106 	br	81104ec0 <alt_avalon_sgdma_do_async_transfer+0x110>
   *   - Run
   *   - Stop on an error with any particular descriptor
   *   - Disable interrupt generation
   */
  else {
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
81104e7c:	e0bffe17 	ldw	r2,-8(fp)
81104e80:	10800317 	ldw	r2,12(r2)
81104e84:	10800404 	addi	r2,r2,16
81104e88:	10800037 	ldwio	r2,0(r2)
81104e8c:	e0bffd15 	stw	r2,-12(fp)

    control |= (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
81104e90:	e0bffd17 	ldw	r2,-12(fp)
81104e94:	10801814 	ori	r2,r2,96
81104e98:	e0bffd15 	stw	r2,-12(fp)
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK );
    control &= ~ALTERA_AVALON_SGDMA_CONTROL_IE_GLOBAL_MSK;
81104e9c:	e0fffd17 	ldw	r3,-12(fp)
81104ea0:	00bffbc4 	movi	r2,-17
81104ea4:	1884703a 	and	r2,r3,r2
81104ea8:	e0bffd15 	stw	r2,-12(fp)

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
81104eac:	e0bffe17 	ldw	r2,-8(fp)
81104eb0:	10800317 	ldw	r2,12(r2)
81104eb4:	10800404 	addi	r2,r2,16
81104eb8:	e0fffd17 	ldw	r3,-12(fp)
81104ebc:	10c00035 	stwio	r3,0(r2)

  /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
  return 0;
81104ec0:	0005883a 	mov	r2,zero
}
81104ec4:	e037883a 	mov	sp,fp
81104ec8:	df000017 	ldw	fp,0(sp)
81104ecc:	dec00104 	addi	sp,sp,4
81104ed0:	f800283a 	ret

81104ed4 <alt_avalon_sgdma_do_sync_transfer>:
 * - status: Content of SGDMA status register.
 */
alt_u8 alt_avalon_sgdma_do_sync_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
81104ed4:	defffc04 	addi	sp,sp,-16
81104ed8:	df000315 	stw	fp,12(sp)
81104edc:	df000304 	addi	fp,sp,12
81104ee0:	e13ffe15 	stw	r4,-8(fp)
81104ee4:	e17fff15 	stw	r5,-4(fp)
  alt_u8 status;

  /* Wait for any pending transfers to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
81104ee8:	0001883a 	nop
81104eec:	e0bffe17 	ldw	r2,-8(fp)
81104ef0:	10800317 	ldw	r2,12(r2)
81104ef4:	10800037 	ldwio	r2,0(r2)
81104ef8:	1080040c 	andi	r2,r2,16
81104efc:	103ffb1e 	bne	r2,zero,81104eec <__reset+0xfb0e4eec>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );


  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
81104f00:	e0bffe17 	ldw	r2,-8(fp)
81104f04:	10800317 	ldw	r2,12(r2)
81104f08:	10800404 	addi	r2,r2,16
81104f0c:	e0fffe17 	ldw	r3,-8(fp)
81104f10:	18c00317 	ldw	r3,12(r3)
81104f14:	18c00404 	addi	r3,r3,16
81104f18:	19000037 	ldwio	r4,0(r3)
81104f1c:	00fff7c4 	movi	r3,-33
81104f20:	20c6703a 	and	r3,r4,r3
81104f24:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
81104f28:	e0bffe17 	ldw	r2,-8(fp)
81104f2c:	10800317 	ldw	r2,12(r2)
81104f30:	00c03fc4 	movi	r3,255
81104f34:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
81104f38:	e0bffe17 	ldw	r2,-8(fp)
81104f3c:	10800317 	ldw	r2,12(r2)
81104f40:	10800804 	addi	r2,r2,32
81104f44:	e0ffff17 	ldw	r3,-4(fp)
81104f48:	10c00035 	stwio	r3,0(r2)
   * Set up SGDMA controller to:
   * - Disable interrupt generation
   * - Run once a valid descriptor is written to controller
   * - Stop on an error with any particular descriptor
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
81104f4c:	e0bffe17 	ldw	r2,-8(fp)
81104f50:	10800317 	ldw	r2,12(r2)
81104f54:	10800404 	addi	r2,r2,16
81104f58:	e0fffe17 	ldw	r3,-8(fp)
81104f5c:	18c00317 	ldw	r3,12(r3)
81104f60:	18c00404 	addi	r3,r3,16
81104f64:	18c00037 	ldwio	r3,0(r3)
81104f68:	18c01814 	ori	r3,r3,96
81104f6c:	10c00035 	stwio	r3,0(r2)
    (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK |
     ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK | 
     IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base)) );

  /* Wait for the descriptor (chain) to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
81104f70:	0001883a 	nop
81104f74:	e0bffe17 	ldw	r2,-8(fp)
81104f78:	10800317 	ldw	r2,12(r2)
81104f7c:	10800037 	ldwio	r2,0(r2)
81104f80:	1080040c 	andi	r2,r2,16
81104f84:	103ffb1e 	bne	r2,zero,81104f74 <__reset+0xfb0e4f74>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
81104f88:	e0bffe17 	ldw	r2,-8(fp)
81104f8c:	10800317 	ldw	r2,12(r2)
81104f90:	10800404 	addi	r2,r2,16
81104f94:	e0fffe17 	ldw	r3,-8(fp)
81104f98:	18c00317 	ldw	r3,12(r3)
81104f9c:	18c00404 	addi	r3,r3,16
81104fa0:	19000037 	ldwio	r4,0(r3)
81104fa4:	00fff7c4 	movi	r3,-33
81104fa8:	20c6703a 	and	r3,r4,r3
81104fac:	10c00035 	stwio	r3,0(r2)
    (IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) &
     ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK) );

  /* Get & clear status register contents */
  status = IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base);
81104fb0:	e0bffe17 	ldw	r2,-8(fp)
81104fb4:	10800317 	ldw	r2,12(r2)
81104fb8:	10800037 	ldwio	r2,0(r2)
81104fbc:	e0bffd05 	stb	r2,-12(fp)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
81104fc0:	e0bffe17 	ldw	r2,-8(fp)
81104fc4:	10800317 	ldw	r2,12(r2)
81104fc8:	00c03fc4 	movi	r3,255
81104fcc:	10c00035 	stwio	r3,0(r2)

  return status;
81104fd0:	e0bffd03 	ldbu	r2,-12(fp)
}
81104fd4:	e037883a 	mov	sp,fp
81104fd8:	df000017 	ldw	fp,0(sp)
81104fdc:	dec00104 	addi	sp,sp,4
81104fe0:	f800283a 	ret

81104fe4 <alt_avalon_sgdma_construct_mem_to_mem_desc>:
  alt_u32              *read_addr,
  alt_u32              *write_addr,
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed)
{
81104fe4:	defff404 	addi	sp,sp,-48
81104fe8:	dfc00b15 	stw	ra,44(sp)
81104fec:	df000a15 	stw	fp,40(sp)
81104ff0:	df000a04 	addi	fp,sp,40
81104ff4:	e13ffb15 	stw	r4,-20(fp)
81104ff8:	e17ffc15 	stw	r5,-16(fp)
81104ffc:	e1bffd15 	stw	r6,-12(fp)
81105000:	e1fffe15 	stw	r7,-8(fp)
81105004:	e0800217 	ldw	r2,8(fp)
81105008:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_mem_desc_burst(desc, next, read_addr, 
8110500c:	e0bfff0b 	ldhu	r2,-4(fp)
81105010:	d8000415 	stw	zero,16(sp)
81105014:	d8000315 	stw	zero,12(sp)
81105018:	e0c00417 	ldw	r3,16(fp)
8110501c:	d8c00215 	stw	r3,8(sp)
81105020:	e0c00317 	ldw	r3,12(fp)
81105024:	d8c00115 	stw	r3,4(sp)
81105028:	d8800015 	stw	r2,0(sp)
8110502c:	e1fffe17 	ldw	r7,-8(fp)
81105030:	e1bffd17 	ldw	r6,-12(fp)
81105034:	e17ffc17 	ldw	r5,-16(fp)
81105038:	e13ffb17 	ldw	r4,-20(fp)
8110503c:	11050580 	call	81105058 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>
    write_addr, length, read_fixed, write_fixed, 0, 0);
}
81105040:	0001883a 	nop
81105044:	e037883a 	mov	sp,fp
81105048:	dfc00117 	ldw	ra,4(sp)
8110504c:	df000017 	ldw	fp,0(sp)
81105050:	dec00204 	addi	sp,sp,8
81105054:	f800283a 	ret

81105058 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>:
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed,
  int                   read_burst,
  int                   write_burst)
{
81105058:	defff204 	addi	sp,sp,-56
8110505c:	dfc00d15 	stw	ra,52(sp)
81105060:	df000c15 	stw	fp,48(sp)
81105064:	df000c04 	addi	fp,sp,48
81105068:	e13ffb15 	stw	r4,-20(fp)
8110506c:	e17ffc15 	stw	r5,-16(fp)
81105070:	e1bffd15 	stw	r6,-12(fp)
81105074:	e1fffe15 	stw	r7,-8(fp)
81105078:	e0800217 	ldw	r2,8(fp)
8110507c:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
81105080:	e0bfff0b 	ldhu	r2,-4(fp)
81105084:	d8000615 	stw	zero,24(sp)
81105088:	e0c00617 	ldw	r3,24(fp)
8110508c:	d8c00515 	stw	r3,20(sp)
81105090:	e0c00517 	ldw	r3,20(fp)
81105094:	d8c00415 	stw	r3,16(sp)
81105098:	e0c00417 	ldw	r3,16(fp)
8110509c:	d8c00315 	stw	r3,12(sp)
811050a0:	e0c00317 	ldw	r3,12(fp)
811050a4:	d8c00215 	stw	r3,8(sp)
811050a8:	d8000115 	stw	zero,4(sp)
811050ac:	d8800015 	stw	r2,0(sp)
811050b0:	e1fffe17 	ldw	r7,-8(fp)
811050b4:	e1bffd17 	ldw	r6,-12(fp)
811050b8:	e17ffc17 	ldw	r5,-16(fp)
811050bc:	e13ffb17 	ldw	r4,-20(fp)
811050c0:	11055ec0 	call	811055ec <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    write_fixed,
    read_burst,
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in mem-to-mem mode
}
811050c4:	0001883a 	nop
811050c8:	e037883a 	mov	sp,fp
811050cc:	dfc00117 	ldw	ra,4(sp)
811050d0:	df000017 	ldw	fp,0(sp)
811050d4:	dec00204 	addi	sp,sp,8
811050d8:	f800283a 	ret

811050dc <alt_avalon_sgdma_construct_stream_to_mem_desc>:
  alt_sgdma_descriptor *desc,
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed)
{
811050dc:	defff804 	addi	sp,sp,-32
811050e0:	dfc00715 	stw	ra,28(sp)
811050e4:	df000615 	stw	fp,24(sp)
811050e8:	df000604 	addi	fp,sp,24
811050ec:	e13ffc15 	stw	r4,-16(fp)
811050f0:	e17ffd15 	stw	r5,-12(fp)
811050f4:	e1bffe15 	stw	r6,-8(fp)
811050f8:	3805883a 	mov	r2,r7
811050fc:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_stream_to_mem_desc_burst(desc, next, write_addr, 
81105100:	e0ffff0b 	ldhu	r3,-4(fp)
81105104:	d8000115 	stw	zero,4(sp)
81105108:	e0800217 	ldw	r2,8(fp)
8110510c:	d8800015 	stw	r2,0(sp)
81105110:	180f883a 	mov	r7,r3
81105114:	e1bffe17 	ldw	r6,-8(fp)
81105118:	e17ffd17 	ldw	r5,-12(fp)
8110511c:	e13ffc17 	ldw	r4,-16(fp)
81105120:	110513c0 	call	8110513c <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>
    length_or_eop, write_fixed, 0);
}
81105124:	0001883a 	nop
81105128:	e037883a 	mov	sp,fp
8110512c:	dfc00117 	ldw	ra,4(sp)
81105130:	df000017 	ldw	fp,0(sp)
81105134:	dec00204 	addi	sp,sp,8
81105138:	f800283a 	ret

8110513c <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>:
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed,
  int                   write_burst)
{
8110513c:	defff304 	addi	sp,sp,-52
81105140:	dfc00c15 	stw	ra,48(sp)
81105144:	df000b15 	stw	fp,44(sp)
81105148:	df000b04 	addi	fp,sp,44
8110514c:	e13ffc15 	stw	r4,-16(fp)
81105150:	e17ffd15 	stw	r5,-12(fp)
81105154:	e1bffe15 	stw	r6,-8(fp)
81105158:	3805883a 	mov	r2,r7
8110515c:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
81105160:	e0bfff0b 	ldhu	r2,-4(fp)
81105164:	d8000615 	stw	zero,24(sp)
81105168:	e0c00317 	ldw	r3,12(fp)
8110516c:	d8c00515 	stw	r3,20(sp)
81105170:	d8000415 	stw	zero,16(sp)
81105174:	e0c00217 	ldw	r3,8(fp)
81105178:	d8c00315 	stw	r3,12(sp)
8110517c:	d8000215 	stw	zero,8(sp)
81105180:	d8000115 	stw	zero,4(sp)
81105184:	d8800015 	stw	r2,0(sp)
81105188:	e1fffe17 	ldw	r7,-8(fp)
8110518c:	000d883a 	mov	r6,zero
81105190:	e17ffd17 	ldw	r5,-12(fp)
81105194:	e13ffc17 	ldw	r4,-16(fp)
81105198:	11055ec0 	call	811055ec <alt_avalon_sgdma_construct_descriptor_burst>
    0x0,            // Read fixed: N/A in stream-to-mem mode
    write_fixed,
    0,              // Read_burst : N/A in stream-to-mem mode
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in stream-to-mem mode
}
8110519c:	0001883a 	nop
811051a0:	e037883a 	mov	sp,fp
811051a4:	dfc00117 	ldw	ra,4(sp)
811051a8:	df000017 	ldw	fp,0(sp)
811051ac:	dec00204 	addi	sp,sp,8
811051b0:	f800283a 	ret

811051b4 <alt_avalon_sgdma_construct_mem_to_stream_desc>:
  alt_u16               length,
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  alt_u8                atlantic_channel)
{
811051b4:	defff404 	addi	sp,sp,-48
811051b8:	dfc00b15 	stw	ra,44(sp)
811051bc:	df000a15 	stw	fp,40(sp)
811051c0:	df000a04 	addi	fp,sp,40
811051c4:	e13ffb15 	stw	r4,-20(fp)
811051c8:	e17ffc15 	stw	r5,-16(fp)
811051cc:	e1bffd15 	stw	r6,-12(fp)
811051d0:	3807883a 	mov	r3,r7
811051d4:	e0800517 	ldw	r2,20(fp)
811051d8:	e0fffe0d 	sth	r3,-8(fp)
811051dc:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_stream_desc_burst(desc, next, read_addr, 
811051e0:	e0fffe0b 	ldhu	r3,-8(fp)
811051e4:	e0bfff03 	ldbu	r2,-4(fp)
811051e8:	d8800415 	stw	r2,16(sp)
811051ec:	d8000315 	stw	zero,12(sp)
811051f0:	e0800417 	ldw	r2,16(fp)
811051f4:	d8800215 	stw	r2,8(sp)
811051f8:	e0800317 	ldw	r2,12(fp)
811051fc:	d8800115 	stw	r2,4(sp)
81105200:	e0800217 	ldw	r2,8(fp)
81105204:	d8800015 	stw	r2,0(sp)
81105208:	180f883a 	mov	r7,r3
8110520c:	e1bffd17 	ldw	r6,-12(fp)
81105210:	e17ffc17 	ldw	r5,-16(fp)
81105214:	e13ffb17 	ldw	r4,-20(fp)
81105218:	11052340 	call	81105234 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>
    length, read_fixed, generate_sop, generate_eop, 0, atlantic_channel);

}
8110521c:	0001883a 	nop
81105220:	e037883a 	mov	sp,fp
81105224:	dfc00117 	ldw	ra,4(sp)
81105228:	df000017 	ldw	fp,0(sp)
8110522c:	dec00204 	addi	sp,sp,8
81105230:	f800283a 	ret

81105234 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>:
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  int                   read_burst,
  alt_u8                atlantic_channel)
{
81105234:	defff204 	addi	sp,sp,-56
81105238:	dfc00d15 	stw	ra,52(sp)
8110523c:	df000c15 	stw	fp,48(sp)
81105240:	df000c04 	addi	fp,sp,48
81105244:	e13ffb15 	stw	r4,-20(fp)
81105248:	e17ffc15 	stw	r5,-16(fp)
8110524c:	e1bffd15 	stw	r6,-12(fp)
81105250:	3807883a 	mov	r3,r7
81105254:	e0800617 	ldw	r2,24(fp)
81105258:	e0fffe0d 	sth	r3,-8(fp)
8110525c:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
81105260:	e0bffe0b 	ldhu	r2,-8(fp)
81105264:	e0ffff03 	ldbu	r3,-4(fp)
81105268:	d8c00615 	stw	r3,24(sp)
8110526c:	d8000515 	stw	zero,20(sp)
81105270:	e0c00517 	ldw	r3,20(fp)
81105274:	d8c00415 	stw	r3,16(sp)
81105278:	e0c00317 	ldw	r3,12(fp)
8110527c:	d8c00315 	stw	r3,12(sp)
81105280:	e0c00217 	ldw	r3,8(fp)
81105284:	d8c00215 	stw	r3,8(sp)
81105288:	e0c00417 	ldw	r3,16(fp)
8110528c:	d8c00115 	stw	r3,4(sp)
81105290:	d8800015 	stw	r2,0(sp)
81105294:	000f883a 	mov	r7,zero
81105298:	e1bffd17 	ldw	r6,-12(fp)
8110529c:	e17ffc17 	ldw	r5,-16(fp)
811052a0:	e13ffb17 	ldw	r4,-20(fp)
811052a4:	11055ec0 	call	811055ec <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    generate_sop,
    read_burst,
    0,                 // Write_burst : N/A in mem-to-stream mode
    atlantic_channel);
}
811052a8:	0001883a 	nop
811052ac:	e037883a 	mov	sp,fp
811052b0:	dfc00117 	ldw	ra,4(sp)
811052b4:	df000017 	ldw	fp,0(sp)
811052b8:	dec00204 	addi	sp,sp,8
811052bc:	f800283a 	ret

811052c0 <alt_avalon_sgdma_register_callback>:
void alt_avalon_sgdma_register_callback(
  alt_sgdma_dev *dev,
  alt_avalon_sgdma_callback callback,
  alt_u32 chain_control,
  void *context)
{
811052c0:	defffb04 	addi	sp,sp,-20
811052c4:	df000415 	stw	fp,16(sp)
811052c8:	df000404 	addi	fp,sp,16
811052cc:	e13ffc15 	stw	r4,-16(fp)
811052d0:	e17ffd15 	stw	r5,-12(fp)
811052d4:	e1bffe15 	stw	r6,-8(fp)
811052d8:	e1ffff15 	stw	r7,-4(fp)
  dev->callback         = callback;
811052dc:	e0bffc17 	ldw	r2,-16(fp)
811052e0:	e0fffd17 	ldw	r3,-12(fp)
811052e4:	10c00915 	stw	r3,36(r2)
  dev->callback_context = context;
811052e8:	e0bffc17 	ldw	r2,-16(fp)
811052ec:	e0ffff17 	ldw	r3,-4(fp)
811052f0:	10c00a15 	stw	r3,40(r2)
  dev->chain_control    = chain_control;
811052f4:	e0bffc17 	ldw	r2,-16(fp)
811052f8:	e0fffe17 	ldw	r3,-8(fp)
811052fc:	10c00b15 	stw	r3,44(r2)
}
81105300:	0001883a 	nop
81105304:	e037883a 	mov	sp,fp
81105308:	df000017 	ldw	fp,0(sp)
8110530c:	dec00104 	addi	sp,sp,4
81105310:	f800283a 	ret

81105314 <alt_avalon_sgdma_start>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct.
 */
void alt_avalon_sgdma_start(alt_sgdma_dev *dev)
{
81105314:	defffd04 	addi	sp,sp,-12
81105318:	df000215 	stw	fp,8(sp)
8110531c:	df000204 	addi	fp,sp,8
81105320:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
81105324:	e0bfff17 	ldw	r2,-4(fp)
81105328:	10800317 	ldw	r2,12(r2)
8110532c:	10800404 	addi	r2,r2,16
81105330:	10800037 	ldwio	r2,0(r2)
81105334:	e0bffe15 	stw	r2,-8(fp)
  control |= ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
81105338:	e0bffe17 	ldw	r2,-8(fp)
8110533c:	10800814 	ori	r2,r2,32
81105340:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
81105344:	e0bfff17 	ldw	r2,-4(fp)
81105348:	10800317 	ldw	r2,12(r2)
8110534c:	10800404 	addi	r2,r2,16
81105350:	e0fffe17 	ldw	r3,-8(fp)
81105354:	10c00035 	stwio	r3,0(r2)
}
81105358:	0001883a 	nop
8110535c:	e037883a 	mov	sp,fp
81105360:	df000017 	ldw	fp,0(sp)
81105364:	dec00104 	addi	sp,sp,4
81105368:	f800283a 	ret

8110536c <alt_avalon_sgdma_stop>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct
 */
void alt_avalon_sgdma_stop(alt_sgdma_dev *dev)
{
8110536c:	defffd04 	addi	sp,sp,-12
81105370:	df000215 	stw	fp,8(sp)
81105374:	df000204 	addi	fp,sp,8
81105378:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
8110537c:	e0bfff17 	ldw	r2,-4(fp)
81105380:	10800317 	ldw	r2,12(r2)
81105384:	10800404 	addi	r2,r2,16
81105388:	10800037 	ldwio	r2,0(r2)
8110538c:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
81105390:	e0fffe17 	ldw	r3,-8(fp)
81105394:	00bff7c4 	movi	r2,-33
81105398:	1884703a 	and	r2,r3,r2
8110539c:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
811053a0:	e0bfff17 	ldw	r2,-4(fp)
811053a4:	10800317 	ldw	r2,12(r2)
811053a8:	10800404 	addi	r2,r2,16
811053ac:	e0fffe17 	ldw	r3,-8(fp)
811053b0:	10c00035 	stwio	r3,0(r2)
}
811053b4:	0001883a 	nop
811053b8:	e037883a 	mov	sp,fp
811053bc:	df000017 	ldw	fp,0(sp)
811053c0:	dec00104 	addi	sp,sp,4
811053c4:	f800283a 	ret

811053c8 <alt_avalon_sgdma_check_descriptor_status>:
 * - 0 if the descriptor is error-free, not "owned by hardware", or
 *   a previously requested transfer has appeared to have completed
 *   normally. Or, various error conditions defined in <errno.h>
 */
int alt_avalon_sgdma_check_descriptor_status(alt_sgdma_descriptor *desc)
{
811053c8:	defffe04 	addi	sp,sp,-8
811053cc:	df000115 	stw	fp,4(sp)
811053d0:	df000104 	addi	fp,sp,4
811053d4:	e13fff15 	stw	r4,-4(fp)
  /* Errors take precedence */
  if( IORD_8DIRECT(&desc->status, 0) &
811053d8:	e0bfff17 	ldw	r2,-4(fp)
811053dc:	10800784 	addi	r2,r2,30
811053e0:	10800023 	ldbuio	r2,0(r2)
811053e4:	10803fcc 	andi	r2,r2,255
811053e8:	10801fcc 	andi	r2,r2,127
811053ec:	10000226 	beq	r2,zero,811053f8 <alt_avalon_sgdma_check_descriptor_status+0x30>
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_OVERFLOW_MSK |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_SYNC_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_UEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) {
    return -EIO;
811053f0:	00bffec4 	movi	r2,-5
811053f4:	00000906 	br	8110541c <alt_avalon_sgdma_check_descriptor_status+0x54>
  }

  if( IORD_8DIRECT(&desc->control, 0) &
811053f8:	e0bfff17 	ldw	r2,-4(fp)
811053fc:	108007c4 	addi	r2,r2,31
81105400:	10800023 	ldbuio	r2,0(r2)
81105404:	10803fcc 	andi	r2,r2,255
81105408:	1080200c 	andi	r2,r2,128
8110540c:	10000226 	beq	r2,zero,81105418 <alt_avalon_sgdma_check_descriptor_status+0x50>
      ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK) {
    return -EINPROGRESS;
81105410:	00bfe244 	movi	r2,-119
81105414:	00000106 	br	8110541c <alt_avalon_sgdma_check_descriptor_status+0x54>
  }

    return 0;
81105418:	0005883a 	mov	r2,zero
}
8110541c:	e037883a 	mov	sp,fp
81105420:	df000017 	ldw	fp,0(sp)
81105424:	dec00104 	addi	sp,sp,4
81105428:	f800283a 	ret

8110542c <alt_avalon_sgdma_open>:
 * Returns:
 * - Pointer to SGDMA device instance struct, or null if the device
 *   could not be opened.
 */
alt_sgdma_dev* alt_avalon_sgdma_open (const char* name)
{
8110542c:	defffc04 	addi	sp,sp,-16
81105430:	dfc00315 	stw	ra,12(sp)
81105434:	df000215 	stw	fp,8(sp)
81105438:	df000204 	addi	fp,sp,8
8110543c:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev* dev;

  dev = (alt_sgdma_dev*) alt_find_dev (name, &alt_sgdma_list);
81105440:	d1600b04 	addi	r5,gp,-32724
81105444:	e13fff17 	ldw	r4,-4(fp)
81105448:	1107e940 	call	81107e94 <alt_find_dev>
8110544c:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev) {
81105450:	e0bffe17 	ldw	r2,-8(fp)
81105454:	1000041e 	bne	r2,zero,81105468 <alt_avalon_sgdma_open+0x3c>
    ALT_ERRNO = ENODEV;
81105458:	1104d740 	call	81104d74 <alt_get_errno>
8110545c:	1007883a 	mov	r3,r2
81105460:	008004c4 	movi	r2,19
81105464:	18800015 	stw	r2,0(r3)
  }

  return dev;
81105468:	e0bffe17 	ldw	r2,-8(fp)
}
8110546c:	e037883a 	mov	sp,fp
81105470:	dfc00117 	ldw	ra,4(sp)
81105474:	df000017 	ldw	fp,0(sp)
81105478:	dec00204 	addi	sp,sp,8
8110547c:	f800283a 	ret

81105480 <alt_avalon_sgdma_construct_descriptor>:
  alt_u16               length_or_eop,
  int                   generate_eop,
  int                   read_fixed,
  int                   write_fixed_or_sop,
  alt_u8                atlantic_channel)
{
81105480:	defff104 	addi	sp,sp,-60
81105484:	dfc00e15 	stw	ra,56(sp)
81105488:	df000d15 	stw	fp,52(sp)
8110548c:	df000d04 	addi	fp,sp,52
81105490:	e13ffa15 	stw	r4,-24(fp)
81105494:	e17ffb15 	stw	r5,-20(fp)
81105498:	e1bffc15 	stw	r6,-16(fp)
8110549c:	e1fffd15 	stw	r7,-12(fp)
811054a0:	e0c00217 	ldw	r3,8(fp)
811054a4:	e0800617 	ldw	r2,24(fp)
811054a8:	e0fffe0d 	sth	r3,-8(fp)
811054ac:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(desc, next, read_addr, 
811054b0:	e0bffe0b 	ldhu	r2,-8(fp)
811054b4:	e0ffff03 	ldbu	r3,-4(fp)
811054b8:	d8c00615 	stw	r3,24(sp)
811054bc:	d8000515 	stw	zero,20(sp)
811054c0:	d8000415 	stw	zero,16(sp)
811054c4:	e0c00517 	ldw	r3,20(fp)
811054c8:	d8c00315 	stw	r3,12(sp)
811054cc:	e0c00417 	ldw	r3,16(fp)
811054d0:	d8c00215 	stw	r3,8(sp)
811054d4:	e0c00317 	ldw	r3,12(fp)
811054d8:	d8c00115 	stw	r3,4(sp)
811054dc:	d8800015 	stw	r2,0(sp)
811054e0:	e1fffd17 	ldw	r7,-12(fp)
811054e4:	e1bffc17 	ldw	r6,-16(fp)
811054e8:	e17ffb17 	ldw	r5,-20(fp)
811054ec:	e13ffa17 	ldw	r4,-24(fp)
811054f0:	11055ec0 	call	811055ec <alt_avalon_sgdma_construct_descriptor_burst>
    write_addr, length_or_eop, generate_eop, read_fixed, write_fixed_or_sop, 
    0, 0, atlantic_channel);
}
811054f4:	0001883a 	nop
811054f8:	e037883a 	mov	sp,fp
811054fc:	dfc00117 	ldw	ra,4(sp)
81105500:	df000017 	ldw	fp,0(sp)
81105504:	dec00204 	addi	sp,sp,8
81105508:	f800283a 	ret

8110550c <alt_avalon_sgdma_enable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_enable_desc_poll(alt_sgdma_dev *dev, alt_u32 frequency)
{
8110550c:	defffc04 	addi	sp,sp,-16
81105510:	df000315 	stw	fp,12(sp)
81105514:	df000304 	addi	fp,sp,12
81105518:	e13ffe15 	stw	r4,-8(fp)
8110551c:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
81105520:	e0bffe17 	ldw	r2,-8(fp)
81105524:	10800317 	ldw	r2,12(r2)
81105528:	10800404 	addi	r2,r2,16
8110552c:	10800037 	ldwio	r2,0(r2)
81105530:	e0bffd15 	stw	r2,-12(fp)
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
81105534:	e0fffd17 	ldw	r3,-12(fp)
81105538:	00a00434 	movhi	r2,32784
8110553c:	10bfffc4 	addi	r2,r2,-1
81105540:	1884703a 	and	r2,r3,r2
81105544:	e0bffd15 	stw	r2,-12(fp)
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
81105548:	e0bfff17 	ldw	r2,-4(fp)
8110554c:	1004953a 	slli	r2,r2,20
81105550:	10dffc2c 	andhi	r3,r2,32752

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
81105554:	e0bffd17 	ldw	r2,-12(fp)
81105558:	1884b03a 	or	r2,r3,r2
8110555c:	10800134 	orhi	r2,r2,4
81105560:	e0bffd15 	stw	r2,-12(fp)
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
            ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
81105564:	e0bffe17 	ldw	r2,-8(fp)
81105568:	10800317 	ldw	r2,12(r2)
8110556c:	10800404 	addi	r2,r2,16
81105570:	e0fffd17 	ldw	r3,-12(fp)
81105574:	10c00035 	stwio	r3,0(r2)
  
  return;
81105578:	0001883a 	nop
}
8110557c:	e037883a 	mov	sp,fp
81105580:	df000017 	ldw	fp,0(sp)
81105584:	dec00104 	addi	sp,sp,4
81105588:	f800283a 	ret

8110558c <alt_avalon_sgdma_disable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_disable_desc_poll(alt_sgdma_dev *dev)
{
8110558c:	defffd04 	addi	sp,sp,-12
81105590:	df000215 	stw	fp,8(sp)
81105594:	df000204 	addi	fp,sp,8
81105598:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
8110559c:	e0bfff17 	ldw	r2,-4(fp)
811055a0:	10800317 	ldw	r2,12(r2)
811055a4:	10800404 	addi	r2,r2,16
811055a8:	10800037 	ldwio	r2,0(r2)
811055ac:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK;
811055b0:	e0fffe17 	ldw	r3,-8(fp)
811055b4:	00bfff34 	movhi	r2,65532
811055b8:	10bfffc4 	addi	r2,r2,-1
811055bc:	1884703a 	and	r2,r3,r2
811055c0:	e0bffe15 	stw	r2,-8(fp)

  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
811055c4:	e0bfff17 	ldw	r2,-4(fp)
811055c8:	10800317 	ldw	r2,12(r2)
811055cc:	10800404 	addi	r2,r2,16
811055d0:	e0fffe17 	ldw	r3,-8(fp)
811055d4:	10c00035 	stwio	r3,0(r2)
  
  return;
811055d8:	0001883a 	nop
}
811055dc:	e037883a 	mov	sp,fp
811055e0:	df000017 	ldw	fp,0(sp)
811055e4:	dec00104 	addi	sp,sp,4
811055e8:	f800283a 	ret

811055ec <alt_avalon_sgdma_construct_descriptor_burst>:
  int                   read_fixed,
  int                   write_fixed_or_sop,
  int                   read_burst,
  int                   write_burst,
  alt_u8                atlantic_channel)
{
811055ec:	defff804 	addi	sp,sp,-32
811055f0:	dfc00715 	stw	ra,28(sp)
811055f4:	df000615 	stw	fp,24(sp)
811055f8:	df000604 	addi	fp,sp,24
811055fc:	e13ffa15 	stw	r4,-24(fp)
81105600:	e17ffb15 	stw	r5,-20(fp)
81105604:	e1bffc15 	stw	r6,-16(fp)
81105608:	e1fffd15 	stw	r7,-12(fp)
8110560c:	e0c00217 	ldw	r3,8(fp)
81105610:	e0800817 	ldw	r2,32(fp)
81105614:	e0fffe0d 	sth	r3,-8(fp)
81105618:	e0bfff05 	stb	r2,-4(fp)
   * The SGDMA controller from continuing to process the chain. This is
   * done as a single IO write to bypass cache, without flushing
   * the entire descriptor, since only the 8-bit descriptor status must
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
8110561c:	e0bffb17 	ldw	r2,-20(fp)
81105620:	108007c4 	addi	r2,r2,31
81105624:	e0fffb17 	ldw	r3,-20(fp)
81105628:	18c007c3 	ldbu	r3,31(r3)
8110562c:	19003fcc 	andi	r4,r3,255
81105630:	00ffdfc4 	movi	r3,-129
81105634:	20c6703a 	and	r3,r4,r3
81105638:	10c00025 	stbio	r3,0(r2)
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
8110563c:	e0bffa17 	ldw	r2,-24(fp)
81105640:	e0fffc17 	ldw	r3,-16(fp)
81105644:	19403fcc 	andi	r5,r3,255
81105648:	10c00003 	ldbu	r3,0(r2)
8110564c:	1806703a 	and	r3,r3,zero
81105650:	1809883a 	mov	r4,r3
81105654:	2807883a 	mov	r3,r5
81105658:	20c6b03a 	or	r3,r4,r3
8110565c:	10c00005 	stb	r3,0(r2)
81105660:	e0fffc17 	ldw	r3,-16(fp)
81105664:	1806d23a 	srli	r3,r3,8
81105668:	19403fcc 	andi	r5,r3,255
8110566c:	10c00043 	ldbu	r3,1(r2)
81105670:	1806703a 	and	r3,r3,zero
81105674:	1809883a 	mov	r4,r3
81105678:	2807883a 	mov	r3,r5
8110567c:	20c6b03a 	or	r3,r4,r3
81105680:	10c00045 	stb	r3,1(r2)
81105684:	e0fffc17 	ldw	r3,-16(fp)
81105688:	1806d43a 	srli	r3,r3,16
8110568c:	19403fcc 	andi	r5,r3,255
81105690:	10c00083 	ldbu	r3,2(r2)
81105694:	1806703a 	and	r3,r3,zero
81105698:	1809883a 	mov	r4,r3
8110569c:	2807883a 	mov	r3,r5
811056a0:	20c6b03a 	or	r3,r4,r3
811056a4:	10c00085 	stb	r3,2(r2)
811056a8:	e0fffc17 	ldw	r3,-16(fp)
811056ac:	180ad63a 	srli	r5,r3,24
811056b0:	10c000c3 	ldbu	r3,3(r2)
811056b4:	1806703a 	and	r3,r3,zero
811056b8:	1809883a 	mov	r4,r3
811056bc:	2807883a 	mov	r3,r5
811056c0:	20c6b03a 	or	r3,r4,r3
811056c4:	10c000c5 	stb	r3,3(r2)
  desc->write_addr               = write_addr;
811056c8:	e0bffa17 	ldw	r2,-24(fp)
811056cc:	e0fffd17 	ldw	r3,-12(fp)
811056d0:	19403fcc 	andi	r5,r3,255
811056d4:	10c00203 	ldbu	r3,8(r2)
811056d8:	1806703a 	and	r3,r3,zero
811056dc:	1809883a 	mov	r4,r3
811056e0:	2807883a 	mov	r3,r5
811056e4:	20c6b03a 	or	r3,r4,r3
811056e8:	10c00205 	stb	r3,8(r2)
811056ec:	e0fffd17 	ldw	r3,-12(fp)
811056f0:	1806d23a 	srli	r3,r3,8
811056f4:	19403fcc 	andi	r5,r3,255
811056f8:	10c00243 	ldbu	r3,9(r2)
811056fc:	1806703a 	and	r3,r3,zero
81105700:	1809883a 	mov	r4,r3
81105704:	2807883a 	mov	r3,r5
81105708:	20c6b03a 	or	r3,r4,r3
8110570c:	10c00245 	stb	r3,9(r2)
81105710:	e0fffd17 	ldw	r3,-12(fp)
81105714:	1806d43a 	srli	r3,r3,16
81105718:	19403fcc 	andi	r5,r3,255
8110571c:	10c00283 	ldbu	r3,10(r2)
81105720:	1806703a 	and	r3,r3,zero
81105724:	1809883a 	mov	r4,r3
81105728:	2807883a 	mov	r3,r5
8110572c:	20c6b03a 	or	r3,r4,r3
81105730:	10c00285 	stb	r3,10(r2)
81105734:	e0fffd17 	ldw	r3,-12(fp)
81105738:	180ad63a 	srli	r5,r3,24
8110573c:	10c002c3 	ldbu	r3,11(r2)
81105740:	1806703a 	and	r3,r3,zero
81105744:	1809883a 	mov	r4,r3
81105748:	2807883a 	mov	r3,r5
8110574c:	20c6b03a 	or	r3,r4,r3
81105750:	10c002c5 	stb	r3,11(r2)
  desc->next                     = (alt_u32 *) next;
81105754:	e0bffa17 	ldw	r2,-24(fp)
81105758:	e0fffb17 	ldw	r3,-20(fp)
8110575c:	19403fcc 	andi	r5,r3,255
81105760:	10c00403 	ldbu	r3,16(r2)
81105764:	1806703a 	and	r3,r3,zero
81105768:	1809883a 	mov	r4,r3
8110576c:	2807883a 	mov	r3,r5
81105770:	20c6b03a 	or	r3,r4,r3
81105774:	10c00405 	stb	r3,16(r2)
81105778:	e0fffb17 	ldw	r3,-20(fp)
8110577c:	1806d23a 	srli	r3,r3,8
81105780:	19403fcc 	andi	r5,r3,255
81105784:	10c00443 	ldbu	r3,17(r2)
81105788:	1806703a 	and	r3,r3,zero
8110578c:	1809883a 	mov	r4,r3
81105790:	2807883a 	mov	r3,r5
81105794:	20c6b03a 	or	r3,r4,r3
81105798:	10c00445 	stb	r3,17(r2)
8110579c:	e0fffb17 	ldw	r3,-20(fp)
811057a0:	1806d43a 	srli	r3,r3,16
811057a4:	19403fcc 	andi	r5,r3,255
811057a8:	10c00483 	ldbu	r3,18(r2)
811057ac:	1806703a 	and	r3,r3,zero
811057b0:	1809883a 	mov	r4,r3
811057b4:	2807883a 	mov	r3,r5
811057b8:	20c6b03a 	or	r3,r4,r3
811057bc:	10c00485 	stb	r3,18(r2)
811057c0:	e0fffb17 	ldw	r3,-20(fp)
811057c4:	180ad63a 	srli	r5,r3,24
811057c8:	10c004c3 	ldbu	r3,19(r2)
811057cc:	1806703a 	and	r3,r3,zero
811057d0:	1809883a 	mov	r4,r3
811057d4:	2807883a 	mov	r3,r5
811057d8:	20c6b03a 	or	r3,r4,r3
811057dc:	10c004c5 	stb	r3,19(r2)
  desc->read_addr_pad            = 0x0;
811057e0:	e0bffa17 	ldw	r2,-24(fp)
811057e4:	10c00103 	ldbu	r3,4(r2)
811057e8:	1806703a 	and	r3,r3,zero
811057ec:	10c00105 	stb	r3,4(r2)
811057f0:	10c00143 	ldbu	r3,5(r2)
811057f4:	1806703a 	and	r3,r3,zero
811057f8:	10c00145 	stb	r3,5(r2)
811057fc:	10c00183 	ldbu	r3,6(r2)
81105800:	1806703a 	and	r3,r3,zero
81105804:	10c00185 	stb	r3,6(r2)
81105808:	10c001c3 	ldbu	r3,7(r2)
8110580c:	1806703a 	and	r3,r3,zero
81105810:	10c001c5 	stb	r3,7(r2)
  desc->write_addr_pad           = 0x0;
81105814:	e0bffa17 	ldw	r2,-24(fp)
81105818:	10c00303 	ldbu	r3,12(r2)
8110581c:	1806703a 	and	r3,r3,zero
81105820:	10c00305 	stb	r3,12(r2)
81105824:	10c00343 	ldbu	r3,13(r2)
81105828:	1806703a 	and	r3,r3,zero
8110582c:	10c00345 	stb	r3,13(r2)
81105830:	10c00383 	ldbu	r3,14(r2)
81105834:	1806703a 	and	r3,r3,zero
81105838:	10c00385 	stb	r3,14(r2)
8110583c:	10c003c3 	ldbu	r3,15(r2)
81105840:	1806703a 	and	r3,r3,zero
81105844:	10c003c5 	stb	r3,15(r2)
  desc->next_pad                 = 0x0;
81105848:	e0bffa17 	ldw	r2,-24(fp)
8110584c:	10c00503 	ldbu	r3,20(r2)
81105850:	1806703a 	and	r3,r3,zero
81105854:	10c00505 	stb	r3,20(r2)
81105858:	10c00543 	ldbu	r3,21(r2)
8110585c:	1806703a 	and	r3,r3,zero
81105860:	10c00545 	stb	r3,21(r2)
81105864:	10c00583 	ldbu	r3,22(r2)
81105868:	1806703a 	and	r3,r3,zero
8110586c:	10c00585 	stb	r3,22(r2)
81105870:	10c005c3 	ldbu	r3,23(r2)
81105874:	1806703a 	and	r3,r3,zero
81105878:	10c005c5 	stb	r3,23(r2)
  desc->bytes_to_transfer        = length_or_eop;
8110587c:	e0bffa17 	ldw	r2,-24(fp)
81105880:	e0fffe17 	ldw	r3,-8(fp)
81105884:	19403fcc 	andi	r5,r3,255
81105888:	10c00603 	ldbu	r3,24(r2)
8110588c:	1806703a 	and	r3,r3,zero
81105890:	1809883a 	mov	r4,r3
81105894:	2807883a 	mov	r3,r5
81105898:	20c6b03a 	or	r3,r4,r3
8110589c:	10c00605 	stb	r3,24(r2)
811058a0:	e0fffe17 	ldw	r3,-8(fp)
811058a4:	1806d23a 	srli	r3,r3,8
811058a8:	19403fcc 	andi	r5,r3,255
811058ac:	10c00643 	ldbu	r3,25(r2)
811058b0:	1806703a 	and	r3,r3,zero
811058b4:	1809883a 	mov	r4,r3
811058b8:	2807883a 	mov	r3,r5
811058bc:	20c6b03a 	or	r3,r4,r3
811058c0:	10c00645 	stb	r3,25(r2)
  desc->actual_bytes_transferred = 0;
811058c4:	e0bffa17 	ldw	r2,-24(fp)
811058c8:	10c00703 	ldbu	r3,28(r2)
811058cc:	1806703a 	and	r3,r3,zero
811058d0:	10c00705 	stb	r3,28(r2)
811058d4:	10c00743 	ldbu	r3,29(r2)
811058d8:	1806703a 	and	r3,r3,zero
811058dc:	10c00745 	stb	r3,29(r2)
  desc->status                   = 0x0;
811058e0:	e0bffa17 	ldw	r2,-24(fp)
811058e4:	10000785 	stb	zero,30(r2)

  /* SGDMA burst not currently supported */
  desc->read_burst               = read_burst;
811058e8:	e0800617 	ldw	r2,24(fp)
811058ec:	1007883a 	mov	r3,r2
811058f0:	e0bffa17 	ldw	r2,-24(fp)
811058f4:	10c00685 	stb	r3,26(r2)
  desc->write_burst              = write_burst;
811058f8:	e0800717 	ldw	r2,28(fp)
811058fc:	1007883a 	mov	r3,r2
81105900:	e0bffa17 	ldw	r2,-24(fp)
81105904:	10c006c5 	stb	r3,27(r2)
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
81105908:	e0800317 	ldw	r2,12(fp)
8110590c:	10000226 	beq	r2,zero,81105918 <alt_avalon_sgdma_construct_descriptor_burst+0x32c>
81105910:	00bfe044 	movi	r2,-127
81105914:	00000106 	br	8110591c <alt_avalon_sgdma_construct_descriptor_burst+0x330>
81105918:	00bfe004 	movi	r2,-128
8110591c:	e0c00417 	ldw	r3,16(fp)
81105920:	18000226 	beq	r3,zero,8110592c <alt_avalon_sgdma_construct_descriptor_burst+0x340>
81105924:	00c00084 	movi	r3,2
81105928:	00000106 	br	81105930 <alt_avalon_sgdma_construct_descriptor_burst+0x344>
8110592c:	0007883a 	mov	r3,zero
81105930:	10c4b03a 	or	r2,r2,r3
81105934:	1007883a 	mov	r3,r2
81105938:	e0800517 	ldw	r2,20(fp)
8110593c:	10000226 	beq	r2,zero,81105948 <alt_avalon_sgdma_construct_descriptor_burst+0x35c>
81105940:	00800104 	movi	r2,4
81105944:	00000106 	br	8110594c <alt_avalon_sgdma_construct_descriptor_burst+0x360>
81105948:	0005883a 	mov	r2,zero
8110594c:	1884b03a 	or	r2,r3,r2
81105950:	1007883a 	mov	r3,r2
81105954:	e0bfff03 	ldbu	r2,-4(fp)
81105958:	10000426 	beq	r2,zero,8110596c <alt_avalon_sgdma_construct_descriptor_burst+0x380>
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_GENERATE_EOP_MSK : 0x0)        |
    (read_fixed ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_READ_FIXED_ADDRESS_MSK : 0x0)  |
    (write_fixed_or_sop ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_WRITE_FIXED_ADDRESS_MSK : 0x0) |
    (atlantic_channel ? ( (atlantic_channel & 0x0F) << 3) : 0)
8110595c:	e0bfff03 	ldbu	r2,-4(fp)
81105960:	108003cc 	andi	r2,r2,15
81105964:	100490fa 	slli	r2,r2,3
81105968:	00000106 	br	81105970 <alt_avalon_sgdma_construct_descriptor_burst+0x384>
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
8110596c:	0005883a 	mov	r2,zero
81105970:	1884b03a 	or	r2,r3,r2
81105974:	1007883a 	mov	r3,r2
81105978:	e0bffa17 	ldw	r2,-24(fp)
8110597c:	10c007c5 	stb	r3,31(r2)
  /*
   * Flush completed buffer out of cache. This is done rather than
   * individual cache-bypassed writes to take advantage of any
   * burst-capabilities in the memory we're writing to.
   */
  alt_dcache_flush(desc, sizeof(alt_sgdma_descriptor));
81105980:	01400804 	movi	r5,32
81105984:	e13ffa17 	ldw	r4,-24(fp)
81105988:	1107ccc0 	call	81107ccc <alt_dcache_flush>
}
8110598c:	0001883a 	nop
81105990:	e037883a 	mov	sp,fp
81105994:	dfc00117 	ldw	ra,4(sp)
81105998:	df000017 	ldw	fp,0(sp)
8110599c:	dec00204 	addi	sp,sp,8
811059a0:	f800283a 	ret

811059a4 <alt_avalon_sgdma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_sgdma_irq(void *context)
#else
static void alt_avalon_sgdma_irq(void *context, alt_u32 id)
#endif
{
811059a4:	defff904 	addi	sp,sp,-28
811059a8:	dfc00615 	stw	ra,24(sp)
811059ac:	df000515 	stw	fp,20(sp)
811059b0:	df000504 	addi	fp,sp,20
811059b4:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev *dev = (alt_sgdma_dev *) context;
811059b8:	e0bfff17 	ldw	r2,-4(fp)
811059bc:	e0bffb15 	stw	r2,-20(fp)
   * Note: This is explicitly done before calling user interrupt-handling
   * code rather than after; if user ISR code initiates another SGDMA
   * transfer which completes quickly, reading the control register after
   * the callback routine may result in a lost interrupt.
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
811059c0:	e0bffb17 	ldw	r2,-20(fp)
811059c4:	10800317 	ldw	r2,12(r2)
811059c8:	10800404 	addi	r2,r2,16
811059cc:	e0fffb17 	ldw	r3,-20(fp)
811059d0:	18c00317 	ldw	r3,12(r3)
811059d4:	18c00404 	addi	r3,r3,16
811059d8:	18c00037 	ldwio	r3,0(r3)
811059dc:	18e00034 	orhi	r3,r3,32768
811059e0:	10c00035 	stwio	r3,0(r2)
    IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) | 0x80000000);
  
  /* Dummy read to ensure IRQ is negated before the ISR returns */
  IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
811059e4:	e0bffb17 	ldw	r2,-20(fp)
811059e8:	10800317 	ldw	r2,12(r2)
811059ec:	10800404 	addi	r2,r2,16
811059f0:	10800037 	ldwio	r2,0(r2)
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the driver to support 
   * interrupt preemption.
   */
  if(dev->callback) {
811059f4:	e0bffb17 	ldw	r2,-20(fp)
811059f8:	10800917 	ldw	r2,36(r2)
811059fc:	10001226 	beq	r2,zero,81105a48 <alt_avalon_sgdma_irq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81105a00:	0005303a 	rdctl	r2,status
81105a04:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81105a08:	e0fffd17 	ldw	r3,-12(fp)
81105a0c:	00bfff84 	movi	r2,-2
81105a10:	1884703a 	and	r2,r3,r2
81105a14:	1001703a 	wrctl	status,r2
  
  return context;
81105a18:	e0bffd17 	ldw	r2,-12(fp)
    cpu_sr = alt_irq_disable_all();
81105a1c:	e0bffc15 	stw	r2,-16(fp)
    (dev->callback)(dev->callback_context);
81105a20:	e0bffb17 	ldw	r2,-20(fp)
81105a24:	10800917 	ldw	r2,36(r2)
81105a28:	e0fffb17 	ldw	r3,-20(fp)
81105a2c:	18c00a17 	ldw	r3,40(r3)
81105a30:	1809883a 	mov	r4,r3
81105a34:	103ee83a 	callr	r2
81105a38:	e0bffc17 	ldw	r2,-16(fp)
81105a3c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81105a40:	e0bffe17 	ldw	r2,-8(fp)
81105a44:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
  }
}
81105a48:	0001883a 	nop
81105a4c:	e037883a 	mov	sp,fp
81105a50:	dfc00117 	ldw	ra,4(sp)
81105a54:	df000017 	ldw	fp,0(sp)
81105a58:	dec00204 	addi	sp,sp,8
81105a5c:	f800283a 	ret

81105a60 <alt_avalon_sgdma_init>:
 * This routine disables interrupts, future descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_avalon_sgdma_init (alt_sgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
81105a60:	defffa04 	addi	sp,sp,-24
81105a64:	dfc00515 	stw	ra,20(sp)
81105a68:	df000415 	stw	fp,16(sp)
81105a6c:	df000404 	addi	fp,sp,16
81105a70:	e13ffd15 	stw	r4,-12(fp)
81105a74:	e17ffe15 	stw	r5,-8(fp)
81105a78:	e1bfff15 	stw	r6,-4(fp)

  /* 
   * Halt any current transactions (reset the device)
   * SW reset is written twice per SGDMA documentation 
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
81105a7c:	e0bffd17 	ldw	r2,-12(fp)
81105a80:	10800317 	ldw	r2,12(r2)
81105a84:	10800404 	addi	r2,r2,16
81105a88:	00c00074 	movhi	r3,1
81105a8c:	10c00035 	stwio	r3,0(r2)
    ALTERA_AVALON_SGDMA_CONTROL_SOFTWARERESET_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
81105a90:	e0bffd17 	ldw	r2,-12(fp)
81105a94:	10800317 	ldw	r2,12(r2)
81105a98:	10800404 	addi	r2,r2,16
81105a9c:	00c00074 	movhi	r3,1
81105aa0:	10c00035 	stwio	r3,0(r2)

  /*
   * Disable interrupts, halt future descriptor processing,
   * and clear status register content
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 0x0);
81105aa4:	e0bffd17 	ldw	r2,-12(fp)
81105aa8:	10800317 	ldw	r2,12(r2)
81105aac:	10800404 	addi	r2,r2,16
81105ab0:	0007883a 	mov	r3,zero
81105ab4:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
81105ab8:	e0bffd17 	ldw	r2,-12(fp)
81105abc:	10800317 	ldw	r2,12(r2)
81105ac0:	00c03fc4 	movi	r3,255
81105ac4:	10c00035 	stwio	r3,0(r2)

  /* Register this instance of the SGDMA controller with HAL */
  alt_dev_llist_insert((alt_dev_llist*) dev, &alt_sgdma_list);
81105ac8:	d1600b04 	addi	r5,gp,-32724
81105acc:	e13ffd17 	ldw	r4,-12(fp)
81105ad0:	1107d300 	call	81107d30 <alt_dev_llist_insert>

  /* Install IRQ handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(ic_id, irq, alt_avalon_sgdma_irq, dev, 0x0);
81105ad4:	d8000015 	stw	zero,0(sp)
81105ad8:	e1fffd17 	ldw	r7,-12(fp)
81105adc:	01a04434 	movhi	r6,33040
81105ae0:	31966904 	addi	r6,r6,22948
81105ae4:	e17fff17 	ldw	r5,-4(fp)
81105ae8:	e13ffe17 	ldw	r4,-8(fp)
81105aec:	1107f240 	call	81107f24 <alt_ic_isr_register>
#else
  alt_irq_register(irq, dev, alt_avalon_sgdma_irq);
#endif  
}
81105af0:	0001883a 	nop
81105af4:	e037883a 	mov	sp,fp
81105af8:	dfc00117 	ldw	ra,4(sp)
81105afc:	df000017 	ldw	fp,0(sp)
81105b00:	dec00204 	addi	sp,sp,8
81105b04:	f800283a 	ret

81105b08 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
81105b08:	defffa04 	addi	sp,sp,-24
81105b0c:	dfc00515 	stw	ra,20(sp)
81105b10:	df000415 	stw	fp,16(sp)
81105b14:	df000404 	addi	fp,sp,16
81105b18:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
81105b1c:	0007883a 	mov	r3,zero
81105b20:	e0bfff17 	ldw	r2,-4(fp)
81105b24:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
81105b28:	e0bfff17 	ldw	r2,-4(fp)
81105b2c:	10800104 	addi	r2,r2,4
81105b30:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81105b34:	0005303a 	rdctl	r2,status
81105b38:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81105b3c:	e0fffd17 	ldw	r3,-12(fp)
81105b40:	00bfff84 	movi	r2,-2
81105b44:	1884703a 	and	r2,r3,r2
81105b48:	1001703a 	wrctl	status,r2
  
  return context;
81105b4c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
81105b50:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
81105b54:	110885c0 	call	8110885c <alt_tick>
81105b58:	e0bffc17 	ldw	r2,-16(fp)
81105b5c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81105b60:	e0bffe17 	ldw	r2,-8(fp)
81105b64:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
81105b68:	0001883a 	nop
81105b6c:	e037883a 	mov	sp,fp
81105b70:	dfc00117 	ldw	ra,4(sp)
81105b74:	df000017 	ldw	fp,0(sp)
81105b78:	dec00204 	addi	sp,sp,8
81105b7c:	f800283a 	ret

81105b80 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
81105b80:	defff804 	addi	sp,sp,-32
81105b84:	dfc00715 	stw	ra,28(sp)
81105b88:	df000615 	stw	fp,24(sp)
81105b8c:	df000604 	addi	fp,sp,24
81105b90:	e13ffc15 	stw	r4,-16(fp)
81105b94:	e17ffd15 	stw	r5,-12(fp)
81105b98:	e1bffe15 	stw	r6,-8(fp)
81105b9c:	e1ffff15 	stw	r7,-4(fp)
81105ba0:	e0bfff17 	ldw	r2,-4(fp)
81105ba4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
81105ba8:	d0a01a17 	ldw	r2,-32664(gp)
81105bac:	1000021e 	bne	r2,zero,81105bb8 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
81105bb0:	e0bffb17 	ldw	r2,-20(fp)
81105bb4:	d0a01a15 	stw	r2,-32664(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
81105bb8:	e0bffc17 	ldw	r2,-16(fp)
81105bbc:	10800104 	addi	r2,r2,4
81105bc0:	00c001c4 	movi	r3,7
81105bc4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
81105bc8:	d8000015 	stw	zero,0(sp)
81105bcc:	e1fffc17 	ldw	r7,-16(fp)
81105bd0:	01a04434 	movhi	r6,33040
81105bd4:	3196c204 	addi	r6,r6,23304
81105bd8:	e17ffe17 	ldw	r5,-8(fp)
81105bdc:	e13ffd17 	ldw	r4,-12(fp)
81105be0:	1107f240 	call	81107f24 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
81105be4:	0001883a 	nop
81105be8:	e037883a 	mov	sp,fp
81105bec:	dfc00117 	ldw	ra,4(sp)
81105bf0:	df000017 	ldw	fp,0(sp)
81105bf4:	dec00204 	addi	sp,sp,8
81105bf8:	f800283a 	ret

81105bfc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81105bfc:	defffe04 	addi	sp,sp,-8
81105c00:	dfc00115 	stw	ra,4(sp)
81105c04:	df000015 	stw	fp,0(sp)
81105c08:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81105c0c:	d0a00917 	ldw	r2,-32732(gp)
81105c10:	10000326 	beq	r2,zero,81105c20 <alt_get_errno+0x24>
81105c14:	d0a00917 	ldw	r2,-32732(gp)
81105c18:	103ee83a 	callr	r2
81105c1c:	00000106 	br	81105c24 <alt_get_errno+0x28>
81105c20:	d0a01504 	addi	r2,gp,-32684
}
81105c24:	e037883a 	mov	sp,fp
81105c28:	dfc00117 	ldw	ra,4(sp)
81105c2c:	df000017 	ldw	fp,0(sp)
81105c30:	dec00204 	addi	sp,sp,8
81105c34:	f800283a 	ret

81105c38 <alt_msgdma_write_standard_descriptor>:
 */
static int alt_msgdma_write_standard_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_standard_descriptor *descriptor)
{
81105c38:	defffc04 	addi	sp,sp,-16
81105c3c:	df000315 	stw	fp,12(sp)
81105c40:	df000304 	addi	fp,sp,12
81105c44:	e13ffd15 	stw	r4,-12(fp)
81105c48:	e17ffe15 	stw	r5,-8(fp)
81105c4c:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
81105c50:	e0bffd17 	ldw	r2,-12(fp)
81105c54:	10800037 	ldwio	r2,0(r2)
81105c58:	1080010c 	andi	r2,r2,4
81105c5c:	10000226 	beq	r2,zero,81105c68 <alt_msgdma_write_standard_descriptor+0x30>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
		is non-blocking*/
        return -ENOSPC;
81105c60:	00bff904 	movi	r2,-28
81105c64:	00001506 	br	81105cbc <alt_msgdma_write_standard_descriptor+0x84>
    }

	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base, 
81105c68:	e0bfff17 	ldw	r2,-4(fp)
81105c6c:	10800017 	ldw	r2,0(r2)
81105c70:	1007883a 	mov	r3,r2
81105c74:	e0bffe17 	ldw	r2,-8(fp)
81105c78:	10c00035 	stwio	r3,0(r2)
		(alt_u32)descriptor->read_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base, 
81105c7c:	e0bffe17 	ldw	r2,-8(fp)
81105c80:	10800104 	addi	r2,r2,4
81105c84:	e0ffff17 	ldw	r3,-4(fp)
81105c88:	18c00117 	ldw	r3,4(r3)
81105c8c:	10c00035 	stwio	r3,0(r2)
	(	alt_u32)descriptor->write_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base, 
81105c90:	e0bffe17 	ldw	r2,-8(fp)
81105c94:	10800204 	addi	r2,r2,8
81105c98:	e0ffff17 	ldw	r3,-4(fp)
81105c9c:	18c00217 	ldw	r3,8(r3)
81105ca0:	10c00035 	stwio	r3,0(r2)
		descriptor->transfer_length);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_STANDARD(descriptor_base, 
81105ca4:	e0bffe17 	ldw	r2,-8(fp)
81105ca8:	10800304 	addi	r2,r2,12
81105cac:	e0ffff17 	ldw	r3,-4(fp)
81105cb0:	18c00317 	ldw	r3,12(r3)
81105cb4:	10c00035 	stwio	r3,0(r2)
		descriptor->control);
        return 0;
81105cb8:	0005883a 	mov	r2,zero
}
81105cbc:	e037883a 	mov	sp,fp
81105cc0:	df000017 	ldw	fp,0(sp)
81105cc4:	dec00104 	addi	sp,sp,4
81105cc8:	f800283a 	ret

81105ccc <alt_msgdma_write_extended_descriptor>:
 */
static int alt_msgdma_write_extended_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_extended_descriptor *descriptor)
{
81105ccc:	defffc04 	addi	sp,sp,-16
81105cd0:	df000315 	stw	fp,12(sp)
81105cd4:	df000304 	addi	fp,sp,12
81105cd8:	e13ffd15 	stw	r4,-12(fp)
81105cdc:	e17ffe15 	stw	r5,-8(fp)
81105ce0:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
81105ce4:	e0bffd17 	ldw	r2,-12(fp)
81105ce8:	10800037 	ldwio	r2,0(r2)
81105cec:	1080010c 	andi	r2,r2,4
81105cf0:	10000226 	beq	r2,zero,81105cfc <alt_msgdma_write_extended_descriptor+0x30>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
	is non-blocking*/
        return -ENOSPC;
81105cf4:	00bff904 	movi	r2,-28
81105cf8:	00003b06 	br	81105de8 <alt_msgdma_write_extended_descriptor+0x11c>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(
81105cfc:	e0bfff17 	ldw	r2,-4(fp)
81105d00:	10800017 	ldw	r2,0(r2)
81105d04:	1007883a 	mov	r3,r2
81105d08:	e0bffe17 	ldw	r2,-8(fp)
81105d0c:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	(alt_u32)descriptor->read_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(
81105d10:	e0bffe17 	ldw	r2,-8(fp)
81105d14:	10800104 	addi	r2,r2,4
81105d18:	e0ffff17 	ldw	r3,-4(fp)
81105d1c:	18c00117 	ldw	r3,4(r3)
81105d20:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
		(alt_u32)descriptor->write_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(
81105d24:	e0bffe17 	ldw	r2,-8(fp)
81105d28:	10800204 	addi	r2,r2,8
81105d2c:	e0ffff17 	ldw	r3,-4(fp)
81105d30:	18c00217 	ldw	r3,8(r3)
81105d34:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(
81105d38:	e0bffe17 	ldw	r2,-8(fp)
81105d3c:	10800304 	addi	r2,r2,12
81105d40:	e0ffff17 	ldw	r3,-4(fp)
81105d44:	18c0030b 	ldhu	r3,12(r3)
81105d48:	18ffffcc 	andi	r3,r3,65535
81105d4c:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->sequence_number);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(
81105d50:	e0bffe17 	ldw	r2,-8(fp)
81105d54:	10800384 	addi	r2,r2,14
81105d58:	e0ffff17 	ldw	r3,-4(fp)
81105d5c:	18c00383 	ldbu	r3,14(r3)
81105d60:	18c03fcc 	andi	r3,r3,255
81105d64:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(
81105d68:	e0bffe17 	ldw	r2,-8(fp)
81105d6c:	108003c4 	addi	r2,r2,15
81105d70:	e0ffff17 	ldw	r3,-4(fp)
81105d74:	18c003c3 	ldbu	r3,15(r3)
81105d78:	18c03fcc 	andi	r3,r3,255
81105d7c:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(
81105d80:	e0bffe17 	ldw	r2,-8(fp)
81105d84:	10800404 	addi	r2,r2,16
81105d88:	e0ffff17 	ldw	r3,-4(fp)
81105d8c:	18c0040b 	ldhu	r3,16(r3)
81105d90:	18ffffcc 	andi	r3,r3,65535
81105d94:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(
81105d98:	e0bffe17 	ldw	r2,-8(fp)
81105d9c:	10800484 	addi	r2,r2,18
81105da0:	e0ffff17 	ldw	r3,-4(fp)
81105da4:	18c0048b 	ldhu	r3,18(r3)
81105da8:	18ffffcc 	andi	r3,r3,65535
81105dac:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base, 0);
81105db0:	e0bffe17 	ldw	r2,-8(fp)
81105db4:	10800504 	addi	r2,r2,20
81105db8:	0007883a 	mov	r3,zero
81105dbc:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base, 0);
81105dc0:	e0bffe17 	ldw	r2,-8(fp)
81105dc4:	10800604 	addi	r2,r2,24
81105dc8:	0007883a 	mov	r3,zero
81105dcc:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(
81105dd0:	e0bffe17 	ldw	r2,-8(fp)
81105dd4:	10800704 	addi	r2,r2,28
81105dd8:	e0ffff17 	ldw	r3,-4(fp)
81105ddc:	18c00717 	ldw	r3,28(r3)
81105de0:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->control);
    return 0;
81105de4:	0005883a 	mov	r2,zero
}
81105de8:	e037883a 	mov	sp,fp
81105dec:	df000017 	ldw	fp,0(sp)
81105df0:	dec00104 	addi	sp,sp,4
81105df4:	f800283a 	ret

81105df8 <alt_msgdma_irq>:
 * alt_msgdma_irq()
 *
 * Interrupt handler for the Modular Scatter-Gather DMA controller.
 */
static void alt_msgdma_irq(void *context)
{
81105df8:	defff804 	addi	sp,sp,-32
81105dfc:	dfc00715 	stw	ra,28(sp)
81105e00:	df000615 	stw	fp,24(sp)
81105e04:	df000604 	addi	fp,sp,24
81105e08:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev *dev = (alt_msgdma_dev *) context;
81105e0c:	e0bfff17 	ldw	r2,-4(fp)
81105e10:	e0bffa15 	stw	r2,-24(fp)
    alt_irq_context cpu_sr;
    alt_u32 temporary_control;

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
81105e14:	e0bffa17 	ldw	r2,-24(fp)
81105e18:	10801783 	ldbu	r2,94(r2)
81105e1c:	10803fcc 	andi	r2,r2,255
81105e20:	10001126 	beq	r2,zero,81105e68 <alt_msgdma_irq+0x70>
    {
        temporary_control = 
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
81105e24:	e0bffa17 	ldw	r2,-24(fp)
81105e28:	10800617 	ldw	r2,24(r2)
81105e2c:	10800037 	ldwio	r2,0(r2)

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
    {
        temporary_control = 
81105e30:	1007883a 	mov	r3,r2
81105e34:	00bffdc4 	movi	r2,-9
81105e38:	1884703a 	and	r2,r3,r2
81105e3c:	e0bffb15 	stw	r2,-20(fp)
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				& ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
81105e40:	e0bffa17 	ldw	r2,-24(fp)
81105e44:	10800617 	ldw	r2,24(r2)
81105e48:	e0fffb17 	ldw	r3,-20(fp)
81105e4c:	10c00035 	stwio	r3,0(r2)
        		temporary_control);
        
        /* clear the IRQ status- W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base,
81105e50:	e0bffa17 	ldw	r2,-24(fp)
81105e54:	10800617 	ldw	r2,24(r2)
81105e58:	10800404 	addi	r2,r2,16
81105e5c:	00c00044 	movi	r3,1
81105e60:	10c00035 	stwio	r3,0(r2)
81105e64:	00001106 	br	81105eac <alt_msgdma_irq+0xb4>
        		ALT_MSGDMA_PREFETCHER_STATUS_IRQ_SET_MASK);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
81105e68:	e0bffa17 	ldw	r2,-24(fp)
81105e6c:	10800317 	ldw	r2,12(r2)
81105e70:	10800104 	addi	r2,r2,4
81105e74:	10800037 	ldwio	r2,0(r2)
81105e78:	1007883a 	mov	r3,r2
81105e7c:	00bffbc4 	movi	r2,-17
81105e80:	1884703a 	and	r2,r3,r2
81105e84:	e0bffb15 	stw	r2,-20(fp)
    			& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
81105e88:	e0bffa17 	ldw	r2,-24(fp)
81105e8c:	10800317 	ldw	r2,12(r2)
81105e90:	10800104 	addi	r2,r2,4
81105e94:	e0fffb17 	ldw	r3,-20(fp)
81105e98:	10c00035 	stwio	r3,0(r2)
    	/* clear the IRQ status */
    	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
81105e9c:	e0bffa17 	ldw	r2,-24(fp)
81105ea0:	10800317 	ldw	r2,12(r2)
81105ea4:	00c08004 	movi	r3,512
81105ea8:	10c00035 	stwio	r3,0(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
81105eac:	e0bffa17 	ldw	r2,-24(fp)
81105eb0:	10800b17 	ldw	r2,44(r2)
81105eb4:	10001226 	beq	r2,zero,81105f00 <alt_msgdma_irq+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81105eb8:	0005303a 	rdctl	r2,status
81105ebc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81105ec0:	e0fffd17 	ldw	r3,-12(fp)
81105ec4:	00bfff84 	movi	r2,-2
81105ec8:	1884703a 	and	r2,r3,r2
81105ecc:	1001703a 	wrctl	status,r2
  
  return context;
81105ed0:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
81105ed4:	e0bffc15 	stw	r2,-16(fp)
        dev->callback (dev->callback_context);
81105ed8:	e0bffa17 	ldw	r2,-24(fp)
81105edc:	10800b17 	ldw	r2,44(r2)
81105ee0:	e0fffa17 	ldw	r3,-24(fp)
81105ee4:	18c00c17 	ldw	r3,48(r3)
81105ee8:	1809883a 	mov	r4,r3
81105eec:	103ee83a 	callr	r2
81105ef0:	e0bffc17 	ldw	r2,-16(fp)
81105ef4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81105ef8:	e0bffe17 	ldw	r2,-8(fp)
81105efc:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
81105f00:	e0bffa17 	ldw	r2,-24(fp)
81105f04:	10801783 	ldbu	r2,94(r2)
81105f08:	10803fcc 	andi	r2,r2,255
81105f0c:	10000a26 	beq	r2,zero,81105f38 <alt_msgdma_irq+0x140>
    {
    	temporary_control = 
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
81105f10:	e0bffa17 	ldw	r2,-24(fp)
81105f14:	10800617 	ldw	r2,24(r2)
81105f18:	10800037 	ldwio	r2,0(r2)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
81105f1c:	10800214 	ori	r2,r2,8
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
    {
    	temporary_control = 
81105f20:	e0bffb15 	stw	r2,-20(fp)
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
    	
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
81105f24:	e0bffa17 	ldw	r2,-24(fp)
81105f28:	10800617 	ldw	r2,24(r2)
81105f2c:	e0fffb17 	ldw	r3,-20(fp)
81105f30:	10c00035 	stwio	r3,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
    }

    return;
81105f34:	00000c06 	br	81105f68 <alt_msgdma_irq+0x170>
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
81105f38:	e0bffa17 	ldw	r2,-24(fp)
81105f3c:	10800317 	ldw	r2,12(r2)
81105f40:	10800104 	addi	r2,r2,4
81105f44:	10800037 	ldwio	r2,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
81105f48:	10800414 	ori	r2,r2,16
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
81105f4c:	e0bffb15 	stw	r2,-20(fp)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
81105f50:	e0bffa17 	ldw	r2,-24(fp)
81105f54:	10800317 	ldw	r2,12(r2)
81105f58:	10800104 	addi	r2,r2,4
81105f5c:	e0fffb17 	ldw	r3,-20(fp)
81105f60:	10c00035 	stwio	r3,0(r2)
    }

    return;
81105f64:	0001883a 	nop
}
81105f68:	e037883a 	mov	sp,fp
81105f6c:	dfc00117 	ldw	ra,4(sp)
81105f70:	df000017 	ldw	fp,0(sp)
81105f74:	dec00204 	addi	sp,sp,8
81105f78:	f800283a 	ret

81105f7c <alt_msgdma_construct_standard_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
81105f7c:	defffb04 	addi	sp,sp,-20
81105f80:	df000415 	stw	fp,16(sp)
81105f84:	df000404 	addi	fp,sp,16
81105f88:	e13ffc15 	stw	r4,-16(fp)
81105f8c:	e17ffd15 	stw	r5,-12(fp)
81105f90:	e1bffe15 	stw	r6,-8(fp)
81105f94:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
81105f98:	e0bffc17 	ldw	r2,-16(fp)
81105f9c:	10c01217 	ldw	r3,72(r2)
81105fa0:	e0800117 	ldw	r2,4(fp)
81105fa4:	18800436 	bltu	r3,r2,81105fb8 <alt_msgdma_construct_standard_descriptor+0x3c>
       dev->enhanced_features != 0
81105fa8:	e0bffc17 	ldw	r2,-16(fp)
81105fac:	10801703 	ldbu	r2,92(r2)
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
81105fb0:	10803fcc 	andi	r2,r2,255
81105fb4:	10000226 	beq	r2,zero,81105fc0 <alt_msgdma_construct_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
81105fb8:	00bffa84 	movi	r2,-22
81105fbc:	00000e06 	br	81105ff8 <alt_msgdma_construct_standard_descriptor+0x7c>
    }
    descriptor->read_address = read_address;
81105fc0:	e0bffd17 	ldw	r2,-12(fp)
81105fc4:	e0fffe17 	ldw	r3,-8(fp)
81105fc8:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
81105fcc:	e0bffd17 	ldw	r2,-12(fp)
81105fd0:	e0ffff17 	ldw	r3,-4(fp)
81105fd4:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
81105fd8:	e0bffd17 	ldw	r2,-12(fp)
81105fdc:	e0c00117 	ldw	r3,4(fp)
81105fe0:	10c00215 	stw	r3,8(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
81105fe4:	e0800217 	ldw	r2,8(fp)
81105fe8:	10e00034 	orhi	r3,r2,32768
81105fec:	e0bffd17 	ldw	r2,-12(fp)
81105ff0:	10c00315 	stw	r3,12(r2)
    
    return 0;
81105ff4:	0005883a 	mov	r2,zero
}
81105ff8:	e037883a 	mov	sp,fp
81105ffc:	df000017 	ldw	fp,0(sp)
81106000:	dec00104 	addi	sp,sp,4
81106004:	f800283a 	ret

81106008 <alt_msgdma_construct_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
81106008:	defff604 	addi	sp,sp,-40
8110600c:	df000915 	stw	fp,36(sp)
81106010:	df000904 	addi	fp,sp,36
81106014:	e13ff715 	stw	r4,-36(fp)
81106018:	e17ff815 	stw	r5,-32(fp)
8110601c:	e1bff915 	stw	r6,-28(fp)
81106020:	e1fffa15 	stw	r7,-24(fp)
81106024:	e1800317 	ldw	r6,12(fp)
81106028:	e1400417 	ldw	r5,16(fp)
8110602c:	e1000517 	ldw	r4,20(fp)
81106030:	e0c00617 	ldw	r3,24(fp)
81106034:	e0800717 	ldw	r2,28(fp)
81106038:	e1bffb0d 	sth	r6,-20(fp)
8110603c:	e17ffc05 	stb	r5,-16(fp)
81106040:	e13ffd05 	stb	r4,-12(fp)
81106044:	e0fffe0d 	sth	r3,-8(fp)
81106048:	e0bfff0d 	sth	r2,-4(fp)
    if(dev->max_byte < length ||
8110604c:	e0bff717 	ldw	r2,-36(fp)
81106050:	10c01217 	ldw	r3,72(r2)
81106054:	e0800117 	ldw	r2,4(fp)
81106058:	18801936 	bltu	r3,r2,811060c0 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
8110605c:	e13ff717 	ldw	r4,-36(fp)
81106060:	20801317 	ldw	r2,76(r4)
81106064:	20c01417 	ldw	r3,80(r4)
81106068:	e13ffe0b 	ldhu	r4,-8(fp)
8110606c:	213fffcc 	andi	r4,r4,65535
81106070:	2015883a 	mov	r10,r4
81106074:	0017883a 	mov	r11,zero
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
81106078:	1ac01136 	bltu	r3,r11,811060c0 <alt_msgdma_construct_extended_descriptor+0xb8>
8110607c:	58c0011e 	bne	r11,r3,81106084 <alt_msgdma_construct_extended_descriptor+0x7c>
81106080:	12800f36 	bltu	r2,r10,811060c0 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
81106084:	e13ff717 	ldw	r4,-36(fp)
81106088:	20801317 	ldw	r2,76(r4)
8110608c:	20c01417 	ldw	r3,80(r4)
81106090:	e13fff0b 	ldhu	r4,-4(fp)
81106094:	213fffcc 	andi	r4,r4,65535
81106098:	2011883a 	mov	r8,r4
8110609c:	0013883a 	mov	r9,zero
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
811060a0:	1a400736 	bltu	r3,r9,811060c0 <alt_msgdma_construct_extended_descriptor+0xb8>
811060a4:	48c0011e 	bne	r9,r3,811060ac <alt_msgdma_construct_extended_descriptor+0xa4>
811060a8:	12000536 	bltu	r2,r8,811060c0 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
811060ac:	e0bff717 	ldw	r2,-36(fp)
811060b0:	10801703 	ldbu	r2,92(r2)
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
811060b4:	10803fcc 	andi	r2,r2,255
811060b8:	10800060 	cmpeqi	r2,r2,1
811060bc:	1000021e 	bne	r2,zero,811060c8 <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
811060c0:	00bffa84 	movi	r2,-22
811060c4:	00002106 	br	8110614c <alt_msgdma_construct_extended_descriptor+0x144>
    }
    
    descriptor->read_address_low = read_address;
811060c8:	e0bff817 	ldw	r2,-32(fp)
811060cc:	e0fff917 	ldw	r3,-28(fp)
811060d0:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_low = write_address;
811060d4:	e0bff817 	ldw	r2,-32(fp)
811060d8:	e0fffa17 	ldw	r3,-24(fp)
811060dc:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
811060e0:	e0bff817 	ldw	r2,-32(fp)
811060e4:	e0c00117 	ldw	r3,4(fp)
811060e8:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
811060ec:	e0bff817 	ldw	r2,-32(fp)
811060f0:	e0fffb0b 	ldhu	r3,-20(fp)
811060f4:	10c0030d 	sth	r3,12(r2)
    descriptor->read_burst_count = read_burst_count;
811060f8:	e0bff817 	ldw	r2,-32(fp)
811060fc:	e0fffc03 	ldbu	r3,-16(fp)
81106100:	10c00385 	stb	r3,14(r2)
    descriptor->write_burst_count = write_burst_count;
81106104:	e0bff817 	ldw	r2,-32(fp)
81106108:	e0fffd03 	ldbu	r3,-12(fp)
8110610c:	10c003c5 	stb	r3,15(r2)
    descriptor->read_stride = read_stride;
81106110:	e0bff817 	ldw	r2,-32(fp)
81106114:	e0fffe0b 	ldhu	r3,-8(fp)
81106118:	10c0040d 	sth	r3,16(r2)
    descriptor->write_stride = write_stride;
8110611c:	e0bff817 	ldw	r2,-32(fp)
81106120:	e0ffff0b 	ldhu	r3,-4(fp)
81106124:	10c0048d 	sth	r3,18(r2)
    descriptor->read_address_high = NULL;
81106128:	e0bff817 	ldw	r2,-32(fp)
8110612c:	10000515 	stw	zero,20(r2)
    descriptor->write_address_high = NULL;
81106130:	e0bff817 	ldw	r2,-32(fp)
81106134:	10000615 	stw	zero,24(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
81106138:	e0800217 	ldw	r2,8(fp)
8110613c:	10e00034 	orhi	r3,r2,32768
81106140:	e0bff817 	ldw	r2,-32(fp)
81106144:	10c00715 	stw	r3,28(r2)

  return 0 ;
81106148:	0005883a 	mov	r2,zero

}
8110614c:	e037883a 	mov	sp,fp
81106150:	df000017 	ldw	fp,0(sp)
81106154:	dec00104 	addi	sp,sp,4
81106158:	f800283a 	ret

8110615c <alt_msgdma_descriptor_async_transfer>:
 */
static int alt_msgdma_descriptor_async_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
8110615c:	defff004 	addi	sp,sp,-64
81106160:	dfc00f15 	stw	ra,60(sp)
81106164:	df000e15 	stw	fp,56(sp)
81106168:	df000e04 	addi	fp,sp,56
8110616c:	e13ffd15 	stw	r4,-12(fp)
81106170:	e17ffe15 	stw	r5,-8(fp)
81106174:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control = 0;
81106178:	e03ff315 	stw	zero,-52(fp)
    alt_irq_context context = 0;
8110617c:	e03ff415 	stw	zero,-48(fp)
    alt_u16 counter = 0;
81106180:	e03ff20d 	sth	zero,-56(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
81106184:	e0bffd17 	ldw	r2,-12(fp)
81106188:	10800317 	ldw	r2,12(r2)
8110618c:	10800204 	addi	r2,r2,8
81106190:	10800037 	ldwio	r2,0(r2)
	alt_msgdma_extended_descriptor *extended_desc)
{
    alt_u32 control = 0;
    alt_irq_context context = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
81106194:	10bfffcc 	andi	r2,r2,65535
81106198:	e0bff515 	stw	r2,-44(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8110619c:	e0bffd17 	ldw	r2,-12(fp)
811061a0:	10800317 	ldw	r2,12(r2)
811061a4:	10800204 	addi	r2,r2,8
811061a8:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
811061ac:	1004d43a 	srli	r2,r2,16
811061b0:	e0bff615 	stw	r2,-40(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
811061b4:	e0bffd17 	ldw	r2,-12(fp)
811061b8:	10800917 	ldw	r2,36(r2)
811061bc:	e0fff617 	ldw	r3,-40(fp)
811061c0:	1880042e 	bgeu	r3,r2,811061d4 <alt_msgdma_descriptor_async_transfer+0x78>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
811061c4:	e0bffd17 	ldw	r2,-12(fp)
811061c8:	10800917 	ldw	r2,36(r2)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
811061cc:	e0fff517 	ldw	r3,-44(fp)
811061d0:	18800236 	bltu	r3,r2,811061dc <alt_msgdma_descriptor_async_transfer+0x80>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
	{
		/*at least one write or read FIFO descriptor buffer is full,
		returning so that this function is non-blocking*/
		return -ENOSPC;
811061d4:	00bff904 	movi	r2,-28
811061d8:	00008f06 	br	81106418 <alt_msgdma_descriptor_async_transfer+0x2bc>
	ALT_SEM_PEND (dev->regs_lock, 0);
	
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	read or write masters  */
	/* stop issuing more descriptors */
	control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
811061dc:	00800804 	movi	r2,32
811061e0:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811061e4:	0005303a 	rdctl	r2,status
811061e8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811061ec:	e0fff717 	ldw	r3,-36(fp)
811061f0:	00bfff84 	movi	r2,-2
811061f4:	1884703a 	and	r2,r3,r2
811061f8:	1001703a 	wrctl	status,r2
  
  return context;
811061fc:	e0bff717 	ldw	r2,-36(fp)
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
81106200:	e0bff415 	stw	r2,-48(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81106204:	e0bffd17 	ldw	r2,-12(fp)
81106208:	10800317 	ldw	r2,12(r2)
8110620c:	10800104 	addi	r2,r2,4
81106210:	e0fff317 	ldw	r3,-52(fp)
81106214:	10c00035 	stwio	r3,0(r2)
	/*
	* Clear any (previous) status register information
	* that might occlude our error checking later.
	*/
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
81106218:	e0bffd17 	ldw	r2,-12(fp)
8110621c:	10800317 	ldw	r2,12(r2)
81106220:	e0fffd17 	ldw	r3,-12(fp)
81106224:	18c00317 	ldw	r3,12(r3)
81106228:	18c00037 	ldwio	r3,0(r3)
8110622c:	10c00035 	stwio	r3,0(r2)
81106230:	e0bff417 	ldw	r2,-48(fp)
81106234:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81106238:	e0bffc17 	ldw	r2,-16(fp)
8110623c:	1001703a 	wrctl	status,r2
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
81106240:	e0bffe17 	ldw	r2,-8(fp)
81106244:	10001a26 	beq	r2,zero,811062b0 <alt_msgdma_descriptor_async_transfer+0x154>
81106248:	e0bfff17 	ldw	r2,-4(fp)
8110624c:	1000181e 	bne	r2,zero,811062b0 <alt_msgdma_descriptor_async_transfer+0x154>
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
81106250:	00000d06 	br	81106288 <alt_msgdma_descriptor_async_transfer+0x12c>
		dev->csr_base, dev->descriptor_base, standard_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
81106254:	01000044 	movi	r4,1
81106258:	1107ba40 	call	81107ba4 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8110625c:	e0bff20b 	ldhu	r2,-56(fp)
81106260:	1084e230 	cmpltui	r2,r2,5000
81106264:	1000051e 	bne	r2,zero,8110627c <alt_msgdma_descriptor_async_transfer+0x120>
            {
                alt_printf("time out after 5 msec while waiting" 
81106268:	01204474 	movhi	r4,33041
8110626c:	2124af04 	addi	r4,r4,-27972
81106270:	11085580 	call	81108558 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
81106274:	00bff084 	movi	r2,-62
81106278:	00006706 	br	81106418 <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
8110627c:	e0bff20b 	ldhu	r2,-56(fp)
81106280:	10800044 	addi	r2,r2,1
81106284:	e0bff20d 	sth	r2,-56(fp)

    if (NULL != standard_desc && NULL == extended_desc)
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
81106288:	e0bffd17 	ldw	r2,-12(fp)
8110628c:	10c00317 	ldw	r3,12(r2)
81106290:	e0bffd17 	ldw	r2,-12(fp)
81106294:	10800417 	ldw	r2,16(r2)
81106298:	e1bffe17 	ldw	r6,-8(fp)
8110629c:	100b883a 	mov	r5,r2
811062a0:	1809883a 	mov	r4,r3
811062a4:	1105c380 	call	81105c38 <alt_msgdma_write_standard_descriptor>
811062a8:	103fea1e 	bne	r2,zero,81106254 <__reset+0xfb0e6254>
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
811062ac:	00001f06 	br	8110632c <alt_msgdma_descriptor_async_transfer+0x1d0>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
811062b0:	e0bffe17 	ldw	r2,-8(fp)
811062b4:	10001b1e 	bne	r2,zero,81106324 <alt_msgdma_descriptor_async_transfer+0x1c8>
811062b8:	e0bfff17 	ldw	r2,-4(fp)
811062bc:	10001926 	beq	r2,zero,81106324 <alt_msgdma_descriptor_async_transfer+0x1c8>
    {
        counter = 0; /* reset counter */
811062c0:	e03ff20d 	sth	zero,-56(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
811062c4:	00000d06 	br	811062fc <alt_msgdma_descriptor_async_transfer+0x1a0>
		dev->csr_base, 
		dev->descriptor_base, 
		extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
811062c8:	01000044 	movi	r4,1
811062cc:	1107ba40 	call	81107ba4 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
811062d0:	e0bff20b 	ldhu	r2,-56(fp)
811062d4:	1084e230 	cmpltui	r2,r2,5000
811062d8:	1000051e 	bne	r2,zero,811062f0 <alt_msgdma_descriptor_async_transfer+0x194>
            {
                alt_printf("time out after 5 msec while waiting free FIFO buffer" 
811062dc:	01204474 	movhi	r4,33041
811062e0:	2124c504 	addi	r4,r4,-27884
811062e4:	11085580 	call	81108558 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
811062e8:	00bff084 	movi	r2,-62
811062ec:	00004a06 	br	81106418 <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
811062f0:	e0bff20b 	ldhu	r2,-56(fp)
811062f4:	10800044 	addi	r2,r2,1
811062f8:	e0bff20d 	sth	r2,-56(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
811062fc:	e0bffd17 	ldw	r2,-12(fp)
81106300:	10c00317 	ldw	r3,12(r2)
81106304:	e0bffd17 	ldw	r2,-12(fp)
81106308:	10800417 	ldw	r2,16(r2)
8110630c:	e1bfff17 	ldw	r6,-4(fp)
81106310:	100b883a 	mov	r5,r2
81106314:	1809883a 	mov	r4,r3
81106318:	1105ccc0 	call	81105ccc <alt_msgdma_write_extended_descriptor>
8110631c:	103fea1e 	bne	r2,zero,811062c8 <__reset+0xfb0e62c8>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
81106320:	00000206 	br	8110632c <alt_msgdma_descriptor_async_transfer+0x1d0>
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
81106324:	00bfffc4 	movi	r2,-1
81106328:	00003b06 	br	81106418 <alt_msgdma_descriptor_async_transfer+0x2bc>
    * If a callback routine has been previously registered which will be
    * called from the msgdma ISR. Set up controller to:
    *  - Run
    *  - Stop on an error with any particular descriptor
    */
    if(dev->callback)
8110632c:	e0bffd17 	ldw	r2,-12(fp)
81106330:	10800b17 	ldw	r2,44(r2)
81106334:	10001c26 	beq	r2,zero,811063a8 <alt_msgdma_descriptor_async_transfer+0x24c>
    {

        control |= (dev->control |
81106338:	e0bffd17 	ldw	r2,-12(fp)
8110633c:	10c00d17 	ldw	r3,52(r2)
81106340:	e0bff317 	ldw	r2,-52(fp)
81106344:	1884b03a 	or	r2,r3,r2
81106348:	10800514 	ori	r2,r2,20
8110634c:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
                    ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
81106350:	e0fff317 	ldw	r3,-52(fp)
81106354:	00bff7c4 	movi	r2,-33
81106358:	1884703a 	and	r2,r3,r2
8110635c:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81106360:	0005303a 	rdctl	r2,status
81106364:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81106368:	e0fffa17 	ldw	r3,-24(fp)
8110636c:	00bfff84 	movi	r2,-2
81106370:	1884703a 	and	r2,r3,r2
81106374:	1001703a 	wrctl	status,r2
  
  return context;
81106378:	e0bffa17 	ldw	r2,-24(fp)
    /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
8110637c:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81106380:	e0bffd17 	ldw	r2,-12(fp)
81106384:	10800317 	ldw	r2,12(r2)
81106388:	10800104 	addi	r2,r2,4
8110638c:	e0fff317 	ldw	r3,-52(fp)
81106390:	10c00035 	stwio	r3,0(r2)
81106394:	e0bff417 	ldw	r2,-48(fp)
81106398:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8110639c:	e0bff817 	ldw	r2,-32(fp)
811063a0:	1001703a 	wrctl	status,r2
811063a4:	00001b06 	br	81106414 <alt_msgdma_descriptor_async_transfer+0x2b8>
    *   - Stop on an error with any particular descriptor
    *   - Disable interrupt generation
    */
    else
    {
        control |= (dev->control |
811063a8:	e0bffd17 	ldw	r2,-12(fp)
811063ac:	10c00d17 	ldw	r3,52(r2)
811063b0:	e0bff317 	ldw	r2,-52(fp)
811063b4:	1884b03a 	or	r2,r3,r2
811063b8:	10800114 	ori	r2,r2,4
811063bc:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK );
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
811063c0:	e0fff317 	ldw	r3,-52(fp)
811063c4:	00bff3c4 	movi	r2,-49
811063c8:	1884703a 	and	r2,r3,r2
811063cc:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811063d0:	0005303a 	rdctl	r2,status
811063d4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811063d8:	e0fffb17 	ldw	r3,-20(fp)
811063dc:	00bfff84 	movi	r2,-2
811063e0:	1884703a 	and	r2,r3,r2
811063e4:	1001703a 	wrctl	status,r2
  
  return context;
811063e8:	e0bffb17 	ldw	r2,-20(fp)
                   (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all();
811063ec:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
811063f0:	e0bffd17 	ldw	r2,-12(fp)
811063f4:	10800317 	ldw	r2,12(r2)
811063f8:	10800104 	addi	r2,r2,4
811063fc:	e0fff317 	ldw	r3,-52(fp)
81106400:	10c00035 	stwio	r3,0(r2)
81106404:	e0bff417 	ldw	r2,-48(fp)
81106408:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8110640c:	e0bff917 	ldw	r2,-28(fp)
81106410:	1001703a 	wrctl	status,r2
	 * Now that access to the registers is complete, release the registers
     * semaphore so that other threads can access the registers.
     */
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
81106414:	0005883a 	mov	r2,zero
}
81106418:	e037883a 	mov	sp,fp
8110641c:	dfc00117 	ldw	ra,4(sp)
81106420:	df000017 	ldw	fp,0(sp)
81106424:	dec00204 	addi	sp,sp,8
81106428:	f800283a 	ret

8110642c <alt_msgdma_descriptor_sync_transfer>:
 */
static int alt_msgdma_descriptor_sync_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
8110642c:	defff004 	addi	sp,sp,-64
81106430:	dfc00f15 	stw	ra,60(sp)
81106434:	df000e15 	stw	fp,56(sp)
81106438:	df000e04 	addi	fp,sp,56
8110643c:	e13ffd15 	stw	r4,-12(fp)
81106440:	e17ffe15 	stw	r5,-8(fp)
81106444:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control=0;
81106448:	e03ff615 	stw	zero,-40(fp)
    alt_irq_context context=0;
8110644c:	e03ff715 	stw	zero,-36(fp)
    alt_u32 csr_status = 0;
81106450:	e03ff215 	stw	zero,-56(fp)
    alt_u16 counter = 0;
81106454:	e03ff30d 	sth	zero,-52(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
81106458:	e0bffd17 	ldw	r2,-12(fp)
8110645c:	10800317 	ldw	r2,12(r2)
81106460:	10800204 	addi	r2,r2,8
81106464:	10800037 	ldwio	r2,0(r2)
{
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
81106468:	10bfffcc 	andi	r2,r2,65535
8110646c:	e0bff415 	stw	r2,-48(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
81106470:	e0bffd17 	ldw	r2,-12(fp)
81106474:	10800317 	ldw	r2,12(r2)
81106478:	10800204 	addi	r2,r2,8
8110647c:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
81106480:	1004d43a 	srli	r2,r2,16
81106484:	e0bff515 	stw	r2,-44(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
    alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK | 
81106488:	00807804 	movi	r2,480
8110648c:	e0bff815 	stw	r2,-32(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
81106490:	00001906 	br	811064f8 <alt_msgdma_descriptor_sync_transfer+0xcc>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
81106494:	01000044 	movi	r4,1
81106498:	1107ba40 	call	81107ba4 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8110649c:	e0bff30b 	ldhu	r2,-52(fp)
811064a0:	1084e230 	cmpltui	r2,r2,5000
811064a4:	1000051e 	bne	r2,zero,811064bc <alt_msgdma_descriptor_sync_transfer+0x90>
        {
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
811064a8:	01204474 	movhi	r4,33041
811064ac:	2124db04 	addi	r4,r4,-27796
811064b0:	11085580 	call	81108558 <alt_printf>
				" for storing descriptor\n");
            return -ETIME;
811064b4:	00bff084 	movi	r2,-62
811064b8:	0000b506 	br	81106790 <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;  
811064bc:	e0bff30b 	ldhu	r2,-52(fp)
811064c0:	10800044 	addi	r2,r2,1
811064c4:	e0bff30d 	sth	r2,-52(fp)
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
811064c8:	e0bffd17 	ldw	r2,-12(fp)
811064cc:	10800317 	ldw	r2,12(r2)
811064d0:	10800204 	addi	r2,r2,8
811064d4:	10800037 	ldwio	r2,0(r2)
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
				" for storing descriptor\n");
            return -ETIME;
        }
        counter++;  
        fifo_read_fill_level = (
811064d8:	10bfffcc 	andi	r2,r2,65535
811064dc:	e0bff415 	stw	r2,-48(fp)
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
811064e0:	e0bffd17 	ldw	r2,-12(fp)
811064e4:	10800317 	ldw	r2,12(r2)
811064e8:	10800204 	addi	r2,r2,8
811064ec:	10800037 	ldwio	r2,0(r2)
        counter++;  
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
811064f0:	1004d43a 	srli	r2,r2,16
811064f4:	e0bff515 	stw	r2,-44(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
811064f8:	e0bffd17 	ldw	r2,-12(fp)
811064fc:	10800917 	ldw	r2,36(r2)
81106500:	e0fff517 	ldw	r3,-44(fp)
81106504:	18bfe32e 	bgeu	r3,r2,81106494 <__reset+0xfb0e6494>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
81106508:	e0bffd17 	ldw	r2,-12(fp)
8110650c:	10800917 	ldw	r2,36(r2)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
81106510:	e0fff417 	ldw	r3,-48(fp)
81106514:	18bfdf2e 	bgeu	r3,r2,81106494 <__reset+0xfb0e6494>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81106518:	0005303a 	rdctl	r2,status
8110651c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81106520:	e0fffc17 	ldw	r3,-16(fp)
81106524:	00bfff84 	movi	r2,-2
81106528:	1884703a 	and	r2,r3,r2
8110652c:	1001703a 	wrctl	status,r2
  
  return context;
81106530:	e0bffc17 	ldw	r2,-16(fp)
	ALT_SEM_PEND (dev->regs_lock, 0);
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
81106534:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
81106538:	e0bffd17 	ldw	r2,-12(fp)
8110653c:	10800317 	ldw	r2,12(r2)
81106540:	10800104 	addi	r2,r2,4
81106544:	00c00804 	movi	r3,32
81106548:	10c00035 	stwio	r3,0(r2)
        ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
8110654c:	e0bffd17 	ldw	r2,-12(fp)
81106550:	10800317 	ldw	r2,12(r2)
81106554:	e0fffd17 	ldw	r3,-12(fp)
81106558:	18c00317 	ldw	r3,12(r3)
8110655c:	18c00037 	ldwio	r3,0(r3)
81106560:	10c00035 	stwio	r3,0(r2)
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
81106564:	e0bffe17 	ldw	r2,-8(fp)
81106568:	10001b26 	beq	r2,zero,811065d8 <alt_msgdma_descriptor_sync_transfer+0x1ac>
8110656c:	e0bfff17 	ldw	r2,-4(fp)
81106570:	1000191e 	bne	r2,zero,811065d8 <alt_msgdma_descriptor_sync_transfer+0x1ac>
    {
        counter = 0; /* reset counter */
81106574:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
81106578:	00000d06 	br	811065b0 <alt_msgdma_descriptor_sync_transfer+0x184>
			dev->csr_base, dev->descriptor_base, standard_desc))
        {     
            alt_busy_sleep(1); /* delay 1us */
8110657c:	01000044 	movi	r4,1
81106580:	1107ba40 	call	81107ba4 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
81106584:	e0bff30b 	ldhu	r2,-52(fp)
81106588:	1084e230 	cmpltui	r2,r2,5000
8110658c:	1000051e 	bne	r2,zero,811065a4 <alt_msgdma_descriptor_sync_transfer+0x178>
            {
                alt_printf("time out after 5 msec while writing standard" 
81106590:	01204474 	movhi	r4,33041
81106594:	2124ef04 	addi	r4,r4,-27716
81106598:	11085580 	call	81108558 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
8110659c:	00bff084 	movi	r2,-62
811065a0:	00007b06 	br	81106790 <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;    
811065a4:	e0bff30b 	ldhu	r2,-52(fp)
811065a8:	10800044 	addi	r2,r2,1
811065ac:	e0bff30d 	sth	r2,-52(fp)
    if (NULL != standard_desc && NULL == extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
811065b0:	e0bffd17 	ldw	r2,-12(fp)
811065b4:	10c00317 	ldw	r3,12(r2)
811065b8:	e0bffd17 	ldw	r2,-12(fp)
811065bc:	10800417 	ldw	r2,16(r2)
811065c0:	e1bffe17 	ldw	r6,-8(fp)
811065c4:	100b883a 	mov	r5,r2
811065c8:	1809883a 	mov	r4,r3
811065cc:	1105c380 	call	81105c38 <alt_msgdma_write_standard_descriptor>
811065d0:	103fea1e 	bne	r2,zero,8110657c <__reset+0xfb0e657c>
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
811065d4:	00001f06 	br	81106654 <alt_msgdma_descriptor_sync_transfer+0x228>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
811065d8:	e0bffe17 	ldw	r2,-8(fp)
811065dc:	10001b1e 	bne	r2,zero,8110664c <alt_msgdma_descriptor_sync_transfer+0x220>
811065e0:	e0bfff17 	ldw	r2,-4(fp)
811065e4:	10001926 	beq	r2,zero,8110664c <alt_msgdma_descriptor_sync_transfer+0x220>
    {
        counter = 0; /* reset counter */
811065e8:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
811065ec:	00000d06 	br	81106624 <alt_msgdma_descriptor_sync_transfer+0x1f8>
			dev->csr_base, dev->descriptor_base, extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
811065f0:	01000044 	movi	r4,1
811065f4:	1107ba40 	call	81107ba4 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
811065f8:	e0bff30b 	ldhu	r2,-52(fp)
811065fc:	1084e230 	cmpltui	r2,r2,5000
81106600:	1000051e 	bne	r2,zero,81106618 <alt_msgdma_descriptor_sync_transfer+0x1ec>
            {
                alt_printf("time out after 5 msec while writing extended" 
81106604:	01204474 	movhi	r4,33041
81106608:	21250004 	addi	r4,r4,-27648
8110660c:	11085580 	call	81108558 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
81106610:	00bff084 	movi	r2,-62
81106614:	00005e06 	br	81106790 <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;
81106618:	e0bff30b 	ldhu	r2,-52(fp)
8110661c:	10800044 	addi	r2,r2,1
81106620:	e0bff30d 	sth	r2,-52(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
81106624:	e0bffd17 	ldw	r2,-12(fp)
81106628:	10c00317 	ldw	r3,12(r2)
8110662c:	e0bffd17 	ldw	r2,-12(fp)
81106630:	10800417 	ldw	r2,16(r2)
81106634:	e1bfff17 	ldw	r6,-4(fp)
81106638:	100b883a 	mov	r5,r2
8110663c:	1809883a 	mov	r4,r3
81106640:	1105ccc0 	call	81105ccc <alt_msgdma_write_extended_descriptor>
81106644:	103fea1e 	bne	r2,zero,811065f0 <__reset+0xfb0e65f0>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
81106648:	00000206 	br	81106654 <alt_msgdma_descriptor_sync_transfer+0x228>
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
8110664c:	00bfffc4 	movi	r2,-1
81106650:	00004f06 	br	81106790 <alt_msgdma_descriptor_sync_transfer+0x364>
    * Set up msgdma controller to:
    * - Disable interrupt generation
    * - Run once a valid descriptor is written to controller
    * - Stop on an error with any particular descriptor
    */
     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
81106654:	e0bffd17 	ldw	r2,-12(fp)
81106658:	10800317 	ldw	r2,12(r2)
8110665c:	10800104 	addi	r2,r2,4
81106660:	e0fffd17 	ldw	r3,-12(fp)
81106664:	19000d17 	ldw	r4,52(r3)
81106668:	00fff2c4 	movi	r3,-53
8110666c:	20c6703a 	and	r3,r4,r3
81106670:	18c00114 	ori	r3,r3,4
81106674:	10c00035 	stwio	r3,0(r2)
81106678:	e0bff717 	ldw	r2,-36(fp)
8110667c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81106680:	e0bff917 	ldw	r2,-28(fp)
81106684:	1001703a 	wrctl	status,r2
		(~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
		(~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK)) ;
	 
	alt_irq_enable_all(context);
     
    counter = 0; /* reset counter */ 
81106688:	e03ff30d 	sth	zero,-52(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
8110668c:	e0bffd17 	ldw	r2,-12(fp)
81106690:	10800317 	ldw	r2,12(r2)
81106694:	10800037 	ldwio	r2,0(r2)
81106698:	e0bff215 	stw	r2,-56(fp)
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
8110669c:	00001106 	br	811066e4 <alt_msgdma_descriptor_sync_transfer+0x2b8>
    {
        alt_busy_sleep(1); /* delay 1us */
811066a0:	01000044 	movi	r4,1
811066a4:	1107ba40 	call	81107ba4 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
811066a8:	e0bff30b 	ldhu	r2,-52(fp)
811066ac:	1084e230 	cmpltui	r2,r2,5000
811066b0:	1000051e 	bne	r2,zero,811066c8 <alt_msgdma_descriptor_sync_transfer+0x29c>
        {
            alt_printf("time out after 5 msec while waiting for any pending" 
811066b4:	01204474 	movhi	r4,33041
811066b8:	21251104 	addi	r4,r4,-27580
811066bc:	11085580 	call	81108558 <alt_printf>
			* Now that access to the registers is complete, release the registers
			* semaphore so that other threads can access the registers.
			*/
			ALT_SEM_POST (dev->regs_lock);
			
            return -ETIME;
811066c0:	00bff084 	movi	r2,-62
811066c4:	00003206 	br	81106790 <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;
811066c8:	e0bff30b 	ldhu	r2,-52(fp)
811066cc:	10800044 	addi	r2,r2,1
811066d0:	e0bff30d 	sth	r2,-52(fp)
        csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
811066d4:	e0bffd17 	ldw	r2,-12(fp)
811066d8:	10800317 	ldw	r2,12(r2)
811066dc:	10800037 	ldwio	r2,0(r2)
811066e0:	e0bff215 	stw	r2,-56(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
811066e4:	e0fff217 	ldw	r3,-56(fp)
811066e8:	e0bff817 	ldw	r2,-32(fp)
811066ec:	1884703a 	and	r2,r3,r2
811066f0:	1000031e 	bne	r2,zero,81106700 <alt_msgdma_descriptor_sync_transfer+0x2d4>
811066f4:	e0bff217 	ldw	r2,-56(fp)
811066f8:	1080004c 	andi	r2,r2,1
811066fc:	103fe81e 	bne	r2,zero,811066a0 <__reset+0xfb0e66a0>
    }
    

    /*Errors or conditions causing the dispatcher stopping issuing read/write 
      commands to masters*/
    if(0 != (csr_status & error))
81106700:	e0fff217 	ldw	r3,-56(fp)
81106704:	e0bff817 	ldw	r2,-32(fp)
81106708:	1884703a 	and	r2,r3,r2
8110670c:	10000226 	beq	r2,zero,81106718 <alt_msgdma_descriptor_sync_transfer+0x2ec>
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        return error;
81106710:	e0bff817 	ldw	r2,-32(fp)
81106714:	00001e06 	br	81106790 <alt_msgdma_descriptor_sync_transfer+0x364>
    }

    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) | 
81106718:	e0bffd17 	ldw	r2,-12(fp)
8110671c:	10800317 	ldw	r2,12(r2)
81106720:	10800104 	addi	r2,r2,4
81106724:	10800037 	ldwio	r2,0(r2)
81106728:	10800814 	ori	r2,r2,32
8110672c:	e0bff615 	stw	r2,-40(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81106730:	0005303a 	rdctl	r2,status
81106734:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81106738:	e0fffa17 	ldw	r3,-24(fp)
8110673c:	00bfff84 	movi	r2,-2
81106740:	1884703a 	and	r2,r3,r2
81106744:	1001703a 	wrctl	status,r2
  
  return context;
81106748:	e0bffa17 	ldw	r2,-24(fp)
	ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();  
8110674c:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81106750:	e0bffd17 	ldw	r2,-12(fp)
81106754:	10800317 	ldw	r2,12(r2)
81106758:	10800104 	addi	r2,r2,4
8110675c:	e0fff617 	ldw	r3,-40(fp)
81106760:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
81106764:	e0bffd17 	ldw	r2,-12(fp)
81106768:	10800317 	ldw	r2,12(r2)
8110676c:	e0fffd17 	ldw	r3,-12(fp)
81106770:	18c00317 	ldw	r3,12(r3)
81106774:	18c00037 	ldwio	r3,0(r3)
81106778:	10c00035 	stwio	r3,0(r2)
8110677c:	e0bff717 	ldw	r2,-36(fp)
81106780:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81106784:	e0bffb17 	ldw	r2,-20(fp)
81106788:	1001703a 	wrctl	status,r2
	* Now that access to the registers is complete, release the registers
	* semaphore so that other threads can access the registers.
	*/
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
8110678c:	0005883a 	mov	r2,zero

}
81106790:	e037883a 	mov	sp,fp
81106794:	dfc00117 	ldw	ra,4(sp)
81106798:	df000017 	ldw	fp,0(sp)
8110679c:	dec00204 	addi	sp,sp,8
811067a0:	f800283a 	ret

811067a4 <alt_msgdma_construct_standard_st_to_mm_descriptor>:
 */
int alt_msgdma_construct_standard_st_to_mm_descriptor (
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *write_address, alt_u32 length, alt_u32 control)
{
811067a4:	defff804 	addi	sp,sp,-32
811067a8:	dfc00715 	stw	ra,28(sp)
811067ac:	df000615 	stw	fp,24(sp)
811067b0:	df000604 	addi	fp,sp,24
811067b4:	e13ffc15 	stw	r4,-16(fp)
811067b8:	e17ffd15 	stw	r5,-12(fp)
811067bc:	e1bffe15 	stw	r6,-8(fp)
811067c0:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, NULL, 
811067c4:	e0800217 	ldw	r2,8(fp)
811067c8:	d8800115 	stw	r2,4(sp)
811067cc:	e0bfff17 	ldw	r2,-4(fp)
811067d0:	d8800015 	stw	r2,0(sp)
811067d4:	e1fffe17 	ldw	r7,-8(fp)
811067d8:	000d883a 	mov	r6,zero
811067dc:	e17ffd17 	ldw	r5,-12(fp)
811067e0:	e13ffc17 	ldw	r4,-16(fp)
811067e4:	1105f7c0 	call	81105f7c <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
811067e8:	e037883a 	mov	sp,fp
811067ec:	dfc00117 	ldw	ra,4(sp)
811067f0:	df000017 	ldw	fp,0(sp)
811067f4:	dec00204 	addi	sp,sp,8
811067f8:	f800283a 	ret

811067fc <alt_msgdma_construct_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address,
	alt_u32 length,
	alt_u32 control)
{
811067fc:	defff804 	addi	sp,sp,-32
81106800:	dfc00715 	stw	ra,28(sp)
81106804:	df000615 	stw	fp,24(sp)
81106808:	df000604 	addi	fp,sp,24
8110680c:	e13ffc15 	stw	r4,-16(fp)
81106810:	e17ffd15 	stw	r5,-12(fp)
81106814:	e1bffe15 	stw	r6,-8(fp)
81106818:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
8110681c:	e0800217 	ldw	r2,8(fp)
81106820:	d8800115 	stw	r2,4(sp)
81106824:	e0bfff17 	ldw	r2,-4(fp)
81106828:	d8800015 	stw	r2,0(sp)
8110682c:	000f883a 	mov	r7,zero
81106830:	e1bffe17 	ldw	r6,-8(fp)
81106834:	e17ffd17 	ldw	r5,-12(fp)
81106838:	e13ffc17 	ldw	r4,-16(fp)
8110683c:	1105f7c0 	call	81105f7c <alt_msgdma_construct_standard_descriptor>
            NULL, length, control);

}
81106840:	e037883a 	mov	sp,fp
81106844:	dfc00117 	ldw	ra,4(sp)
81106848:	df000017 	ldw	fp,0(sp)
8110684c:	dec00204 	addi	sp,sp,8
81106850:	f800283a 	ret

81106854 <alt_msgdma_construct_standard_mm_to_mm_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
81106854:	defff804 	addi	sp,sp,-32
81106858:	dfc00715 	stw	ra,28(sp)
8110685c:	df000615 	stw	fp,24(sp)
81106860:	df000604 	addi	fp,sp,24
81106864:	e13ffc15 	stw	r4,-16(fp)
81106868:	e17ffd15 	stw	r5,-12(fp)
8110686c:	e1bffe15 	stw	r6,-8(fp)
81106870:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
81106874:	e0800317 	ldw	r2,12(fp)
81106878:	d8800115 	stw	r2,4(sp)
8110687c:	e0800217 	ldw	r2,8(fp)
81106880:	d8800015 	stw	r2,0(sp)
81106884:	e1ffff17 	ldw	r7,-4(fp)
81106888:	e1bffe17 	ldw	r6,-8(fp)
8110688c:	e17ffd17 	ldw	r5,-12(fp)
81106890:	e13ffc17 	ldw	r4,-16(fp)
81106894:	1105f7c0 	call	81105f7c <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
81106898:	e037883a 	mov	sp,fp
8110689c:	dfc00117 	ldw	ra,4(sp)
811068a0:	df000017 	ldw	fp,0(sp)
811068a4:	dec00204 	addi	sp,sp,8
811068a8:	f800283a 	ret

811068ac <alt_msgdma_construct_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 write_burst_count, 
	alt_u16 write_stride)
{
811068ac:	defff004 	addi	sp,sp,-64
811068b0:	dfc00f15 	stw	ra,60(sp)
811068b4:	df000e15 	stw	fp,56(sp)
811068b8:	df000e04 	addi	fp,sp,56
811068bc:	e13ff915 	stw	r4,-28(fp)
811068c0:	e17ffa15 	stw	r5,-24(fp)
811068c4:	e1bffb15 	stw	r6,-20(fp)
811068c8:	e1fffc15 	stw	r7,-16(fp)
811068cc:	e1000317 	ldw	r4,12(fp)
811068d0:	e0c00417 	ldw	r3,16(fp)
811068d4:	e0800517 	ldw	r2,20(fp)
811068d8:	e13ffd0d 	sth	r4,-12(fp)
811068dc:	e0fffe05 	stb	r3,-8(fp)
811068e0:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
811068e4:	e0bffd0b 	ldhu	r2,-12(fp)
811068e8:	e0fffe03 	ldbu	r3,-8(fp)
811068ec:	e13fff0b 	ldhu	r4,-4(fp)
811068f0:	d9000615 	stw	r4,24(sp)
811068f4:	d8000515 	stw	zero,20(sp)
811068f8:	d8c00415 	stw	r3,16(sp)
811068fc:	d8000315 	stw	zero,12(sp)
81106900:	d8800215 	stw	r2,8(sp)
81106904:	e0800217 	ldw	r2,8(fp)
81106908:	d8800115 	stw	r2,4(sp)
8110690c:	e0bffc17 	ldw	r2,-16(fp)
81106910:	d8800015 	stw	r2,0(sp)
81106914:	e1fffb17 	ldw	r7,-20(fp)
81106918:	000d883a 	mov	r6,zero
8110691c:	e17ffa17 	ldw	r5,-24(fp)
81106920:	e13ff917 	ldw	r4,-28(fp)
81106924:	11060080 	call	81106008 <alt_msgdma_construct_extended_descriptor>
            NULL, write_address, length, control, sequence_number, 0, 
            write_burst_count, 0, write_stride);
}
81106928:	e037883a 	mov	sp,fp
8110692c:	dfc00117 	ldw	ra,4(sp)
81106930:	df000017 	ldw	fp,0(sp)
81106934:	dec00204 	addi	sp,sp,8
81106938:	f800283a 	ret

8110693c <alt_msgdma_construct_extended_mm_to_st_descriptor>:
	alt_u32 length,
	alt_u32 control,
	alt_u16 sequence_number,
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
8110693c:	defff004 	addi	sp,sp,-64
81106940:	dfc00f15 	stw	ra,60(sp)
81106944:	df000e15 	stw	fp,56(sp)
81106948:	df000e04 	addi	fp,sp,56
8110694c:	e13ff915 	stw	r4,-28(fp)
81106950:	e17ffa15 	stw	r5,-24(fp)
81106954:	e1bffb15 	stw	r6,-20(fp)
81106958:	e1fffc15 	stw	r7,-16(fp)
8110695c:	e1000317 	ldw	r4,12(fp)
81106960:	e0c00417 	ldw	r3,16(fp)
81106964:	e0800517 	ldw	r2,20(fp)
81106968:	e13ffd0d 	sth	r4,-12(fp)
8110696c:	e0fffe05 	stb	r3,-8(fp)
81106970:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, read_address, 
81106974:	e0bffd0b 	ldhu	r2,-12(fp)
81106978:	e0fffe03 	ldbu	r3,-8(fp)
8110697c:	e13fff0b 	ldhu	r4,-4(fp)
81106980:	d8000615 	stw	zero,24(sp)
81106984:	d9000515 	stw	r4,20(sp)
81106988:	d8000415 	stw	zero,16(sp)
8110698c:	d8c00315 	stw	r3,12(sp)
81106990:	d8800215 	stw	r2,8(sp)
81106994:	e0800217 	ldw	r2,8(fp)
81106998:	d8800115 	stw	r2,4(sp)
8110699c:	e0bffc17 	ldw	r2,-16(fp)
811069a0:	d8800015 	stw	r2,0(sp)
811069a4:	000f883a 	mov	r7,zero
811069a8:	e1bffb17 	ldw	r6,-20(fp)
811069ac:	e17ffa17 	ldw	r5,-24(fp)
811069b0:	e13ff917 	ldw	r4,-28(fp)
811069b4:	11060080 	call	81106008 <alt_msgdma_construct_extended_descriptor>
            NULL, length, control, sequence_number, read_burst_count, 0, 
            read_stride, 0);

}
811069b8:	e037883a 	mov	sp,fp
811069bc:	dfc00117 	ldw	ra,4(sp)
811069c0:	df000017 	ldw	fp,0(sp)
811069c4:	dec00204 	addi	sp,sp,8
811069c8:	f800283a 	ret

811069cc <alt_msgdma_construct_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
811069cc:	deffee04 	addi	sp,sp,-72
811069d0:	dfc01115 	stw	ra,68(sp)
811069d4:	df001015 	stw	fp,64(sp)
811069d8:	df001004 	addi	fp,sp,64
811069dc:	e13ff715 	stw	r4,-36(fp)
811069e0:	e17ff815 	stw	r5,-32(fp)
811069e4:	e1bff915 	stw	r6,-28(fp)
811069e8:	e1fffa15 	stw	r7,-24(fp)
811069ec:	e1800417 	ldw	r6,16(fp)
811069f0:	e1400517 	ldw	r5,20(fp)
811069f4:	e1000617 	ldw	r4,24(fp)
811069f8:	e0c00717 	ldw	r3,28(fp)
811069fc:	e0800817 	ldw	r2,32(fp)
81106a00:	e1bffb0d 	sth	r6,-20(fp)
81106a04:	e17ffc05 	stb	r5,-16(fp)
81106a08:	e13ffd05 	stb	r4,-12(fp)
81106a0c:	e0fffe0d 	sth	r3,-8(fp)
81106a10:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
81106a14:	e0bffb0b 	ldhu	r2,-20(fp)
81106a18:	e0fffc03 	ldbu	r3,-16(fp)
81106a1c:	e13ffd03 	ldbu	r4,-12(fp)
81106a20:	e17ffe0b 	ldhu	r5,-8(fp)
81106a24:	e1bfff0b 	ldhu	r6,-4(fp)
81106a28:	d9800615 	stw	r6,24(sp)
81106a2c:	d9400515 	stw	r5,20(sp)
81106a30:	d9000415 	stw	r4,16(sp)
81106a34:	d8c00315 	stw	r3,12(sp)
81106a38:	d8800215 	stw	r2,8(sp)
81106a3c:	e0800317 	ldw	r2,12(fp)
81106a40:	d8800115 	stw	r2,4(sp)
81106a44:	e0800217 	ldw	r2,8(fp)
81106a48:	d8800015 	stw	r2,0(sp)
81106a4c:	e1fffa17 	ldw	r7,-24(fp)
81106a50:	e1bff917 	ldw	r6,-28(fp)
81106a54:	e17ff817 	ldw	r5,-32(fp)
81106a58:	e13ff717 	ldw	r4,-36(fp)
81106a5c:	11060080 	call	81106008 <alt_msgdma_construct_extended_descriptor>
            read_address, write_address, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
81106a60:	e037883a 	mov	sp,fp
81106a64:	dfc00117 	ldw	ra,4(sp)
81106a68:	df000017 	ldw	fp,0(sp)
81106a6c:	dec00204 	addi	sp,sp,8
81106a70:	f800283a 	ret

81106a74 <alt_msgdma_construct_prefetcher_standard_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
81106a74:	defffb04 	addi	sp,sp,-20
81106a78:	df000415 	stw	fp,16(sp)
81106a7c:	df000404 	addi	fp,sp,16
81106a80:	e13ffc15 	stw	r4,-16(fp)
81106a84:	e17ffd15 	stw	r5,-12(fp)
81106a88:	e1bffe15 	stw	r6,-8(fp)
81106a8c:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
81106a90:	e0bffc17 	ldw	r2,-16(fp)
81106a94:	10c01217 	ldw	r3,72(r2)
81106a98:	e0800117 	ldw	r2,4(fp)
81106a9c:	18800436 	bltu	r3,r2,81106ab0 <alt_msgdma_construct_prefetcher_standard_descriptor+0x3c>
       dev->enhanced_features != 0
81106aa0:	e0bffc17 	ldw	r2,-16(fp)
81106aa4:	10801703 	ldbu	r2,92(r2)
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
81106aa8:	10803fcc 	andi	r2,r2,255
81106aac:	10000226 	beq	r2,zero,81106ab8 <alt_msgdma_construct_prefetcher_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
81106ab0:	00bffa84 	movi	r2,-22
81106ab4:	00001406 	br	81106b08 <alt_msgdma_construct_prefetcher_standard_descriptor+0x94>
    }
    descriptor->read_address = read_address;
81106ab8:	e0bffd17 	ldw	r2,-12(fp)
81106abc:	e0fffe17 	ldw	r3,-8(fp)
81106ac0:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
81106ac4:	e0bffd17 	ldw	r2,-12(fp)
81106ac8:	e0ffff17 	ldw	r3,-4(fp)
81106acc:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
81106ad0:	e0bffd17 	ldw	r2,-12(fp)
81106ad4:	e0c00117 	ldw	r3,4(fp)
81106ad8:	10c00215 	stw	r3,8(r2)
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
81106adc:	e0fffd17 	ldw	r3,-12(fp)
81106ae0:	e0bffd17 	ldw	r2,-12(fp)
81106ae4:	10c00315 	stw	r3,12(r2)
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
81106ae8:	e0c00217 	ldw	r3,8(fp)
81106aec:	00900034 	movhi	r2,16384
81106af0:	10bfffc4 	addi	r2,r2,-1
81106af4:	1884703a 	and	r2,r3,r2
81106af8:	10e00034 	orhi	r3,r2,32768
    descriptor->transfer_length = length;
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
81106afc:	e0bffd17 	ldw	r2,-12(fp)
81106b00:	10c00715 	stw	r3,28(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
81106b04:	0005883a 	mov	r2,zero
}
81106b08:	e037883a 	mov	sp,fp
81106b0c:	df000017 	ldw	fp,0(sp)
81106b10:	dec00104 	addi	sp,sp,4
81106b14:	f800283a 	ret

81106b18 <alt_msgdma_construct_prefetcher_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
81106b18:	defff404 	addi	sp,sp,-48
81106b1c:	df000b15 	stw	fp,44(sp)
81106b20:	df000b04 	addi	fp,sp,44
81106b24:	e13ff715 	stw	r4,-36(fp)
81106b28:	e17ff815 	stw	r5,-32(fp)
81106b2c:	e1bff915 	stw	r6,-28(fp)
81106b30:	e1fffa15 	stw	r7,-24(fp)
81106b34:	e1800517 	ldw	r6,20(fp)
81106b38:	e1400617 	ldw	r5,24(fp)
81106b3c:	e1000717 	ldw	r4,28(fp)
81106b40:	e0c00817 	ldw	r3,32(fp)
81106b44:	e0800917 	ldw	r2,36(fp)
81106b48:	e1bffb0d 	sth	r6,-20(fp)
81106b4c:	e17ffc05 	stb	r5,-16(fp)
81106b50:	e13ffd05 	stb	r4,-12(fp)
81106b54:	e0fffe0d 	sth	r3,-8(fp)
81106b58:	e0bfff0d 	sth	r2,-4(fp)
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
81106b5c:	e0bff717 	ldw	r2,-36(fp)
81106b60:	10c01217 	ldw	r3,72(r2)
81106b64:	e0800317 	ldw	r2,12(fp)
81106b68:	18801936 	bltu	r3,r2,81106bd0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
81106b6c:	e13ff717 	ldw	r4,-36(fp)
81106b70:	20801317 	ldw	r2,76(r4)
81106b74:	20c01417 	ldw	r3,80(r4)
81106b78:	e13ffe0b 	ldhu	r4,-8(fp)
81106b7c:	213fffcc 	andi	r4,r4,65535
81106b80:	2015883a 	mov	r10,r4
81106b84:	0017883a 	mov	r11,zero
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
81106b88:	1ac01136 	bltu	r3,r11,81106bd0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
81106b8c:	58c0011e 	bne	r11,r3,81106b94 <alt_msgdma_construct_prefetcher_extended_descriptor+0x7c>
81106b90:	12800f36 	bltu	r2,r10,81106bd0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
81106b94:	e13ff717 	ldw	r4,-36(fp)
81106b98:	20801317 	ldw	r2,76(r4)
81106b9c:	20c01417 	ldw	r3,80(r4)
81106ba0:	e13fff0b 	ldhu	r4,-4(fp)
81106ba4:	213fffcc 	andi	r4,r4,65535
81106ba8:	2011883a 	mov	r8,r4
81106bac:	0013883a 	mov	r9,zero
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
81106bb0:	1a400736 	bltu	r3,r9,81106bd0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
81106bb4:	48c0011e 	bne	r9,r3,81106bbc <alt_msgdma_construct_prefetcher_extended_descriptor+0xa4>
81106bb8:	12000536 	bltu	r2,r8,81106bd0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
81106bbc:	e0bff717 	ldw	r2,-36(fp)
81106bc0:	10801703 	ldbu	r2,92(r2)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
81106bc4:	10803fcc 	andi	r2,r2,255
81106bc8:	10800060 	cmpeqi	r2,r2,1
81106bcc:	1000021e 	bne	r2,zero,81106bd8 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
81106bd0:	00bffa84 	movi	r2,-22
81106bd4:	00003106 	br	81106c9c <alt_msgdma_construct_prefetcher_extended_descriptor+0x184>
    }
    
    descriptor->read_address_high = read_address_high;
81106bd8:	e0bff817 	ldw	r2,-32(fp)
81106bdc:	e0fff917 	ldw	r3,-28(fp)
81106be0:	10c00915 	stw	r3,36(r2)
    descriptor->read_address_low = read_address_low;
81106be4:	e0bff817 	ldw	r2,-32(fp)
81106be8:	e0fffa17 	ldw	r3,-24(fp)
81106bec:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_high = write_address_high;
81106bf0:	e0bff817 	ldw	r2,-32(fp)
81106bf4:	e0c00117 	ldw	r3,4(fp)
81106bf8:	10c00a15 	stw	r3,40(r2)
    descriptor->write_address_low = write_address_low;
81106bfc:	e0bff817 	ldw	r2,-32(fp)
81106c00:	e0c00217 	ldw	r3,8(fp)
81106c04:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
81106c08:	e0bff817 	ldw	r2,-32(fp)
81106c0c:	e0c00317 	ldw	r3,12(fp)
81106c10:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
81106c14:	e0bff817 	ldw	r2,-32(fp)
81106c18:	e0fffb0b 	ldhu	r3,-20(fp)
81106c1c:	10c0070d 	sth	r3,28(r2)
    descriptor->read_burst_count = read_burst_count;
81106c20:	e0bff817 	ldw	r2,-32(fp)
81106c24:	e0fffc03 	ldbu	r3,-16(fp)
81106c28:	10c00785 	stb	r3,30(r2)
    descriptor->write_burst_count = write_burst_count;
81106c2c:	e0bff817 	ldw	r2,-32(fp)
81106c30:	e0fffd03 	ldbu	r3,-12(fp)
81106c34:	10c007c5 	stb	r3,31(r2)
    descriptor->read_stride = read_stride;
81106c38:	e0bff817 	ldw	r2,-32(fp)
81106c3c:	e0fffe0b 	ldhu	r3,-8(fp)
81106c40:	10c0080d 	sth	r3,32(r2)
    descriptor->write_stride = write_stride;
81106c44:	e0bff817 	ldw	r2,-32(fp)
81106c48:	e0ffff0b 	ldhu	r3,-4(fp)
81106c4c:	10c0088d 	sth	r3,34(r2)
    /* have descriptor point to itself */
	node_addr.u64 = (uintptr_t)descriptor;
81106c50:	e0bff817 	ldw	r2,-32(fp)
81106c54:	1019883a 	mov	r12,r2
81106c58:	001b883a 	mov	r13,zero
81106c5c:	e33ff515 	stw	r12,-44(fp)
81106c60:	e37ff615 	stw	r13,-40(fp)
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
81106c64:	e0fff517 	ldw	r3,-44(fp)
81106c68:	e0bff817 	ldw	r2,-32(fp)
81106c6c:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
81106c70:	e0fff617 	ldw	r3,-40(fp)
81106c74:	e0bff817 	ldw	r2,-32(fp)
81106c78:	10c00b15 	stw	r3,44(r2)
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
81106c7c:	e0c00417 	ldw	r3,16(fp)
81106c80:	00900034 	movhi	r2,16384
81106c84:	10bfffc4 	addi	r2,r2,-1
81106c88:	1884703a 	and	r2,r3,r2
81106c8c:	10e00034 	orhi	r3,r2,32768
	node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
81106c90:	e0bff817 	ldw	r2,-32(fp)
81106c94:	10c00f15 	stw	r3,60(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
81106c98:	0005883a 	mov	r2,zero
}
81106c9c:	e037883a 	mov	sp,fp
81106ca0:	df000017 	ldw	fp,0(sp)
81106ca4:	dec00104 	addi	sp,sp,4
81106ca8:	f800283a 	ret

81106cac <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address,
	alt_u32 write_address,
	alt_u32 length,
	alt_u32 control)
{
81106cac:	defff804 	addi	sp,sp,-32
81106cb0:	dfc00715 	stw	ra,28(sp)
81106cb4:	df000615 	stw	fp,24(sp)
81106cb8:	df000604 	addi	fp,sp,24
81106cbc:	e13ffc15 	stw	r4,-16(fp)
81106cc0:	e17ffd15 	stw	r5,-12(fp)
81106cc4:	e1bffe15 	stw	r6,-8(fp)
81106cc8:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
81106ccc:	e0800317 	ldw	r2,12(fp)
81106cd0:	d8800115 	stw	r2,4(sp)
81106cd4:	e0800217 	ldw	r2,8(fp)
81106cd8:	d8800015 	stw	r2,0(sp)
81106cdc:	e1ffff17 	ldw	r7,-4(fp)
81106ce0:	e1bffe17 	ldw	r6,-8(fp)
81106ce4:	e17ffd17 	ldw	r5,-12(fp)
81106ce8:	e13ffc17 	ldw	r4,-16(fp)
81106cec:	1106a740 	call	81106a74 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, write_address, length, control);
}
81106cf0:	e037883a 	mov	sp,fp
81106cf4:	dfc00117 	ldw	ra,4(sp)
81106cf8:	df000017 	ldw	fp,0(sp)
81106cfc:	dec00204 	addi	sp,sp,8
81106d00:	f800283a 	ret

81106d04 <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
81106d04:	defff804 	addi	sp,sp,-32
81106d08:	dfc00715 	stw	ra,28(sp)
81106d0c:	df000615 	stw	fp,24(sp)
81106d10:	df000604 	addi	fp,sp,24
81106d14:	e13ffc15 	stw	r4,-16(fp)
81106d18:	e17ffd15 	stw	r5,-12(fp)
81106d1c:	e1bffe15 	stw	r6,-8(fp)
81106d20:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
81106d24:	e0800217 	ldw	r2,8(fp)
81106d28:	d8800115 	stw	r2,4(sp)
81106d2c:	e0bfff17 	ldw	r2,-4(fp)
81106d30:	d8800015 	stw	r2,0(sp)
81106d34:	e1fffe17 	ldw	r7,-8(fp)
81106d38:	000d883a 	mov	r6,zero
81106d3c:	e17ffd17 	ldw	r5,-12(fp)
81106d40:	e13ffc17 	ldw	r4,-16(fp)
81106d44:	1106a740 	call	81106a74 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		0, write_address, length, control);
}
81106d48:	e037883a 	mov	sp,fp
81106d4c:	dfc00117 	ldw	ra,4(sp)
81106d50:	df000017 	ldw	fp,0(sp)
81106d54:	dec00204 	addi	sp,sp,8
81106d58:	f800283a 	ret

81106d5c <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 read_address, 
	alt_u32 length, 
	alt_u32 control)
{
81106d5c:	defff804 	addi	sp,sp,-32
81106d60:	dfc00715 	stw	ra,28(sp)
81106d64:	df000615 	stw	fp,24(sp)
81106d68:	df000604 	addi	fp,sp,24
81106d6c:	e13ffc15 	stw	r4,-16(fp)
81106d70:	e17ffd15 	stw	r5,-12(fp)
81106d74:	e1bffe15 	stw	r6,-8(fp)
81106d78:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
81106d7c:	e0800217 	ldw	r2,8(fp)
81106d80:	d8800115 	stw	r2,4(sp)
81106d84:	e0bfff17 	ldw	r2,-4(fp)
81106d88:	d8800015 	stw	r2,0(sp)
81106d8c:	000f883a 	mov	r7,zero
81106d90:	e1bffe17 	ldw	r6,-8(fp)
81106d94:	e17ffd17 	ldw	r5,-12(fp)
81106d98:	e13ffc17 	ldw	r4,-16(fp)
81106d9c:	1106a740 	call	81106a74 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, 0, length, control);
}
81106da0:	e037883a 	mov	sp,fp
81106da4:	dfc00117 	ldw	ra,4(sp)
81106da8:	df000017 	ldw	fp,0(sp)
81106dac:	dec00204 	addi	sp,sp,8
81106db0:	f800283a 	ret

81106db4 <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number,
	alt_u8 write_burst_count,
	alt_u16 write_stride)
{
81106db4:	deffee04 	addi	sp,sp,-72
81106db8:	dfc01115 	stw	ra,68(sp)
81106dbc:	df001015 	stw	fp,64(sp)
81106dc0:	df001004 	addi	fp,sp,64
81106dc4:	e13ff915 	stw	r4,-28(fp)
81106dc8:	e17ffa15 	stw	r5,-24(fp)
81106dcc:	e1bffb15 	stw	r6,-20(fp)
81106dd0:	e1fffc15 	stw	r7,-16(fp)
81106dd4:	e1000417 	ldw	r4,16(fp)
81106dd8:	e0c00517 	ldw	r3,20(fp)
81106ddc:	e0800617 	ldw	r2,24(fp)
81106de0:	e13ffd0d 	sth	r4,-12(fp)
81106de4:	e0fffe05 	stb	r3,-8(fp)
81106de8:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor, 
81106dec:	e0bffd0b 	ldhu	r2,-12(fp)
81106df0:	e0fffe03 	ldbu	r3,-8(fp)
81106df4:	e13fff0b 	ldhu	r4,-4(fp)
81106df8:	d9000815 	stw	r4,32(sp)
81106dfc:	d8000715 	stw	zero,28(sp)
81106e00:	d8c00615 	stw	r3,24(sp)
81106e04:	d8000515 	stw	zero,20(sp)
81106e08:	d8800415 	stw	r2,16(sp)
81106e0c:	e0800317 	ldw	r2,12(fp)
81106e10:	d8800315 	stw	r2,12(sp)
81106e14:	e0800217 	ldw	r2,8(fp)
81106e18:	d8800215 	stw	r2,8(sp)
81106e1c:	e0bffc17 	ldw	r2,-16(fp)
81106e20:	d8800115 	stw	r2,4(sp)
81106e24:	e0bffb17 	ldw	r2,-20(fp)
81106e28:	d8800015 	stw	r2,0(sp)
81106e2c:	000f883a 	mov	r7,zero
81106e30:	000d883a 	mov	r6,zero
81106e34:	e17ffa17 	ldw	r5,-24(fp)
81106e38:	e13ff917 	ldw	r4,-28(fp)
81106e3c:	1106b180 	call	81106b18 <alt_msgdma_construct_prefetcher_extended_descriptor>
            0, 0, write_address_high, write_address_low, length, control, 
			sequence_number, 0, write_burst_count, 0, write_stride);
}
81106e40:	e037883a 	mov	sp,fp
81106e44:	dfc00117 	ldw	ra,4(sp)
81106e48:	df000017 	ldw	fp,0(sp)
81106e4c:	dec00204 	addi	sp,sp,8
81106e50:	f800283a 	ret

81106e54 <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
81106e54:	deffee04 	addi	sp,sp,-72
81106e58:	dfc01115 	stw	ra,68(sp)
81106e5c:	df001015 	stw	fp,64(sp)
81106e60:	df001004 	addi	fp,sp,64
81106e64:	e13ff915 	stw	r4,-28(fp)
81106e68:	e17ffa15 	stw	r5,-24(fp)
81106e6c:	e1bffb15 	stw	r6,-20(fp)
81106e70:	e1fffc15 	stw	r7,-16(fp)
81106e74:	e1000417 	ldw	r4,16(fp)
81106e78:	e0c00517 	ldw	r3,20(fp)
81106e7c:	e0800617 	ldw	r2,24(fp)
81106e80:	e13ffd0d 	sth	r4,-12(fp)
81106e84:	e0fffe05 	stb	r3,-8(fp)
81106e88:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
81106e8c:	e0bffd0b 	ldhu	r2,-12(fp)
81106e90:	e0fffe03 	ldbu	r3,-8(fp)
81106e94:	e13fff0b 	ldhu	r4,-4(fp)
81106e98:	d8000815 	stw	zero,32(sp)
81106e9c:	d9000715 	stw	r4,28(sp)
81106ea0:	d8000615 	stw	zero,24(sp)
81106ea4:	d8c00515 	stw	r3,20(sp)
81106ea8:	d8800415 	stw	r2,16(sp)
81106eac:	e0800317 	ldw	r2,12(fp)
81106eb0:	d8800315 	stw	r2,12(sp)
81106eb4:	e0800217 	ldw	r2,8(fp)
81106eb8:	d8800215 	stw	r2,8(sp)
81106ebc:	d8000115 	stw	zero,4(sp)
81106ec0:	d8000015 	stw	zero,0(sp)
81106ec4:	e1fffc17 	ldw	r7,-16(fp)
81106ec8:	e1bffb17 	ldw	r6,-20(fp)
81106ecc:	e17ffa17 	ldw	r5,-24(fp)
81106ed0:	e13ff917 	ldw	r4,-28(fp)
81106ed4:	1106b180 	call	81106b18 <alt_msgdma_construct_prefetcher_extended_descriptor>
    		read_address_high, read_address_low, 0, 0, length, control, 
			sequence_number, read_burst_count, 0, read_stride, 0);
}
81106ed8:	e037883a 	mov	sp,fp
81106edc:	dfc00117 	ldw	ra,4(sp)
81106ee0:	df000017 	ldw	fp,0(sp)
81106ee4:	dec00204 	addi	sp,sp,8
81106ee8:	f800283a 	ret

81106eec <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor>:
	alt_u16 sequence_number,
	alt_u8 read_burst_count,
	alt_u8 write_burst_count, 
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
81106eec:	deffec04 	addi	sp,sp,-80
81106ef0:	dfc01315 	stw	ra,76(sp)
81106ef4:	df001215 	stw	fp,72(sp)
81106ef8:	df001204 	addi	fp,sp,72
81106efc:	e13ff715 	stw	r4,-36(fp)
81106f00:	e17ff815 	stw	r5,-32(fp)
81106f04:	e1bff915 	stw	r6,-28(fp)
81106f08:	e1fffa15 	stw	r7,-24(fp)
81106f0c:	e1800617 	ldw	r6,24(fp)
81106f10:	e1400717 	ldw	r5,28(fp)
81106f14:	e1000817 	ldw	r4,32(fp)
81106f18:	e0c00917 	ldw	r3,36(fp)
81106f1c:	e0800a17 	ldw	r2,40(fp)
81106f20:	e1bffb0d 	sth	r6,-20(fp)
81106f24:	e17ffc05 	stb	r5,-16(fp)
81106f28:	e13ffd05 	stb	r4,-12(fp)
81106f2c:	e0fffe0d 	sth	r3,-8(fp)
81106f30:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
81106f34:	e0bffb0b 	ldhu	r2,-20(fp)
81106f38:	e0fffc03 	ldbu	r3,-16(fp)
81106f3c:	e13ffd03 	ldbu	r4,-12(fp)
81106f40:	e17ffe0b 	ldhu	r5,-8(fp)
81106f44:	e1bfff0b 	ldhu	r6,-4(fp)
81106f48:	d9800815 	stw	r6,32(sp)
81106f4c:	d9400715 	stw	r5,28(sp)
81106f50:	d9000615 	stw	r4,24(sp)
81106f54:	d8c00515 	stw	r3,20(sp)
81106f58:	d8800415 	stw	r2,16(sp)
81106f5c:	e0800517 	ldw	r2,20(fp)
81106f60:	d8800315 	stw	r2,12(sp)
81106f64:	e0800417 	ldw	r2,16(fp)
81106f68:	d8800215 	stw	r2,8(sp)
81106f6c:	e0800317 	ldw	r2,12(fp)
81106f70:	d8800115 	stw	r2,4(sp)
81106f74:	e0800217 	ldw	r2,8(fp)
81106f78:	d8800015 	stw	r2,0(sp)
81106f7c:	e1fffa17 	ldw	r7,-24(fp)
81106f80:	e1bff917 	ldw	r6,-28(fp)
81106f84:	e17ff817 	ldw	r5,-32(fp)
81106f88:	e13ff717 	ldw	r4,-36(fp)
81106f8c:	1106b180 	call	81106b18 <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, write_address_high, 
			write_address_low, length, control, sequence_number, 
			read_burst_count, write_burst_count, read_stride, write_stride);

}
81106f90:	e037883a 	mov	sp,fp
81106f94:	dfc00117 	ldw	ra,4(sp)
81106f98:	df000017 	ldw	fp,0(sp)
81106f9c:	dec00204 	addi	sp,sp,8
81106fa0:	f800283a 	ret

81106fa4 <alt_msgdma_prefetcher_add_standard_desc_to_list>:
 *           descriptor.next_ptr not pointing back to itslef)
 */
int alt_msgdma_prefetcher_add_standard_desc_to_list (
	alt_msgdma_prefetcher_standard_descriptor** list,
	alt_msgdma_prefetcher_standard_descriptor* descriptor)
{
81106fa4:	defffc04 	addi	sp,sp,-16
81106fa8:	df000315 	stw	fp,12(sp)
81106fac:	df000304 	addi	fp,sp,12
81106fb0:	e13ffe15 	stw	r4,-8(fp)
81106fb4:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	
	if (descriptor == NULL)
81106fb8:	e0bfff17 	ldw	r2,-4(fp)
81106fbc:	1000021e 	bne	r2,zero,81106fc8 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x24>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
81106fc0:	00bffa84 	movi	r2,-22
81106fc4:	00002f06 	br	81107084 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (descriptor->next_desc_ptr != (alt_u32)descriptor)
81106fc8:	e0bfff17 	ldw	r2,-4(fp)
81106fcc:	10c00317 	ldw	r3,12(r2)
81106fd0:	e0bfff17 	ldw	r2,-4(fp)
81106fd4:	18800226 	beq	r3,r2,81106fe0 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x3c>
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
81106fd8:	00bffa84 	movi	r2,-22
81106fdc:	00002906 	br	81107084 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (*list == NULL)
81106fe0:	e0bffe17 	ldw	r2,-8(fp)
81106fe4:	10800017 	ldw	r2,0(r2)
81106fe8:	1000051e 	bne	r2,zero,81107000 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x5c>
	{
		*list = descriptor;  /* make this root-node if list is empty */
81106fec:	e0bffe17 	ldw	r2,-8(fp)
81106ff0:	e0ffff17 	ldw	r3,-4(fp)
81106ff4:	10c00015 	stw	r3,0(r2)
		return 0;  /* successfully added */
81106ff8:	0005883a 	mov	r2,zero
81106ffc:	00002106 	br	81107084 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (*list == descriptor)
81107000:	e0bffe17 	ldw	r2,-8(fp)
81107004:	10c00017 	ldw	r3,0(r2)
81107008:	e0bfff17 	ldw	r2,-4(fp)
8110700c:	1880021e 	bne	r3,r2,81107018 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x74>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
81107010:	00bffa84 	movi	r2,-22
81107014:	00001b06 	br	81107084 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
81107018:	e0bffe17 	ldw	r2,-8(fp)
8110701c:	10800017 	ldw	r2,0(r2)
81107020:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
81107024:	00000906 	br	8110704c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xa8>
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
81107028:	e0bffd17 	ldw	r2,-12(fp)
8110702c:	10c00317 	ldw	r3,12(r2)
81107030:	e0bfff17 	ldw	r2,-4(fp)
81107034:	1880021e 	bne	r3,r2,81107040 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x9c>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
81107038:	00bffa84 	movi	r2,-22
8110703c:	00001106 	br	81107084 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
81107040:	e0bffd17 	ldw	r2,-12(fp)
81107044:	10800317 	ldw	r2,12(r2)
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		last_descr_ptr = 
81107048:	e0bffd15 	stw	r2,-12(fp)
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
8110704c:	e0bffd17 	ldw	r2,-12(fp)
81107050:	10800317 	ldw	r2,12(r2)
81107054:	e0fffe17 	ldw	r3,-8(fp)
81107058:	18c00017 	ldw	r3,0(r3)
8110705c:	10fff21e 	bne	r2,r3,81107028 <__reset+0xfb0e7028>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* add this descriptor to end of list */
	last_descr_ptr->next_desc_ptr = (alt_u32)((uintptr_t)descriptor);
81107060:	e0ffff17 	ldw	r3,-4(fp)
81107064:	e0bffd17 	ldw	r2,-12(fp)
81107068:	10c00315 	stw	r3,12(r2)
	/* ensure new last pointer points the start of the list */
	descriptor->next_desc_ptr = (alt_u32)((uintptr_t)*list);  
8110706c:	e0bffe17 	ldw	r2,-8(fp)
81107070:	10800017 	ldw	r2,0(r2)
81107074:	1007883a 	mov	r3,r2
81107078:	e0bfff17 	ldw	r2,-4(fp)
8110707c:	10c00315 	stw	r3,12(r2)
	return 0; /* successfully added */
81107080:	0005883a 	mov	r2,zero
}
81107084:	e037883a 	mov	sp,fp
81107088:	df000017 	ldw	fp,0(sp)
8110708c:	dec00104 	addi	sp,sp,4
81107090:	f800283a 	ret

81107094 <alt_msgdma_prefetcher_add_extended_desc_to_list>:

int alt_msgdma_prefetcher_add_extended_desc_to_list (
	alt_msgdma_prefetcher_extended_descriptor** list,
	alt_msgdma_prefetcher_extended_descriptor* descriptor)
{
81107094:	defff804 	addi	sp,sp,-32
81107098:	df000715 	stw	fp,28(sp)
8110709c:	df000704 	addi	fp,sp,28
811070a0:	e13ffe15 	stw	r4,-8(fp)
811070a4:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	msgdma_addr64 root_node_addr, next_node_addr;
	
	if (descriptor == NULL)
811070a8:	e13fff17 	ldw	r4,-4(fp)
811070ac:	2000021e 	bne	r4,zero,811070b8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x24>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
811070b0:	00bffa84 	movi	r2,-22
811070b4:	00005906 	br	8110721c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
811070b8:	e13fff17 	ldw	r4,-4(fp)
811070bc:	2015883a 	mov	r10,r4
811070c0:	0017883a 	mov	r11,zero
811070c4:	e2bffc15 	stw	r10,-16(fp)
811070c8:	e2fffd15 	stw	r11,-12(fp)
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
811070cc:	e13fff17 	ldw	r4,-4(fp)
811070d0:	21400317 	ldw	r5,12(r4)
811070d4:	e13ffc17 	ldw	r4,-16(fp)
811070d8:	29000626 	beq	r5,r4,811070f4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
811070dc:	e13fff17 	ldw	r4,-4(fp)
811070e0:	21400b17 	ldw	r5,44(r4)
811070e4:	e13ffd17 	ldw	r4,-12(fp)
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
811070e8:	29000226 	beq	r5,r4,811070f4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
811070ec:	00bffa84 	movi	r2,-22
811070f0:	00004a06 	br	8110721c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	if (*list == NULL)
811070f4:	e13ffe17 	ldw	r4,-8(fp)
811070f8:	21000017 	ldw	r4,0(r4)
811070fc:	2000051e 	bne	r4,zero,81107114 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x80>
	{
		*list = descriptor;  /* make this the root-node if list is empty */
81107100:	e0bffe17 	ldw	r2,-8(fp)
81107104:	e0ffff17 	ldw	r3,-4(fp)
81107108:	10c00015 	stw	r3,0(r2)
		return 0;
8110710c:	0005883a 	mov	r2,zero
81107110:	00004206 	br	8110721c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	if (*list == descriptor)
81107114:	e13ffe17 	ldw	r4,-8(fp)
81107118:	21400017 	ldw	r5,0(r4)
8110711c:	e13fff17 	ldw	r4,-4(fp)
81107120:	2900021e 	bne	r5,r4,8110712c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x98>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
81107124:	00bffa84 	movi	r2,-22
81107128:	00003c06 	br	8110721c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
8110712c:	e13ffe17 	ldw	r4,-8(fp)
81107130:	21000017 	ldw	r4,0(r4)
81107134:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
81107138:	e13ffe17 	ldw	r4,-8(fp)
8110713c:	21000017 	ldw	r4,0(r4)
81107140:	2011883a 	mov	r8,r4
81107144:	0013883a 	mov	r9,zero
81107148:	e23ffa15 	stw	r8,-24(fp)
8110714c:	e27ffb15 	stw	r9,-20(fp)
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
81107150:	00001806 	br	811071b4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x120>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* first check if descriptor already in the list */
		next_node_addr.u64 = (uintptr_t)descriptor;
81107154:	e13fff17 	ldw	r4,-4(fp)
81107158:	200d883a 	mov	r6,r4
8110715c:	000f883a 	mov	r7,zero
81107160:	e1bffc15 	stw	r6,-16(fp)
81107164:	e1fffd15 	stw	r7,-12(fp)
		if ((last_descr_ptr->next_desc_ptr_low == next_node_addr.u32[0])
81107168:	e13ff917 	ldw	r4,-28(fp)
8110716c:	21400317 	ldw	r5,12(r4)
81107170:	e13ffc17 	ldw	r4,-16(fp)
81107174:	2900061e 	bne	r5,r4,81107190 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
			&& (last_descr_ptr->next_desc_ptr_high == next_node_addr.u32[1]))
81107178:	e13ff917 	ldw	r4,-28(fp)
8110717c:	21400b17 	ldw	r5,44(r4)
81107180:	e13ffd17 	ldw	r4,-12(fp)
81107184:	2900021e 	bne	r5,r4,81107190 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
81107188:	00bffa84 	movi	r2,-22
8110718c:	00002306 	br	8110721c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
81107190:	e13ff917 	ldw	r4,-28(fp)
81107194:	21000317 	ldw	r4,12(r4)
81107198:	e13ffc15 	stw	r4,-16(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
8110719c:	e13ff917 	ldw	r4,-28(fp)
811071a0:	21000b17 	ldw	r4,44(r4)
811071a4:	e13ffd15 	stw	r4,-12(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
811071a8:	e13ffc17 	ldw	r4,-16(fp)
811071ac:	e17ffd17 	ldw	r5,-12(fp)
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
811071b0:	e13ff915 	stw	r4,-28(fp)
	last_descr_ptr = *list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
811071b4:	e13ff917 	ldw	r4,-28(fp)
811071b8:	21400317 	ldw	r5,12(r4)
811071bc:	e13ffa17 	ldw	r4,-24(fp)
811071c0:	29000426 	beq	r5,r4,811071d4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x140>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
811071c4:	e13ff917 	ldw	r4,-28(fp)
811071c8:	21400b17 	ldw	r5,44(r4)
811071cc:	e13ffb17 	ldw	r4,-20(fp)
811071d0:	293fe01e 	bne	r5,r4,81107154 <__reset+0xfb0e7154>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* add this descriptor to end of list */
	next_node_addr.u64 = (uintptr_t)descriptor;
811071d4:	e13fff17 	ldw	r4,-4(fp)
811071d8:	2005883a 	mov	r2,r4
811071dc:	0007883a 	mov	r3,zero
811071e0:	e0bffc15 	stw	r2,-16(fp)
811071e4:	e0fffd15 	stw	r3,-12(fp)
	last_descr_ptr->next_desc_ptr_low = next_node_addr.u32[0];
811071e8:	e0fffc17 	ldw	r3,-16(fp)
811071ec:	e0bff917 	ldw	r2,-28(fp)
811071f0:	10c00315 	stw	r3,12(r2)
	last_descr_ptr->next_desc_ptr_high = next_node_addr.u32[1];
811071f4:	e0fffd17 	ldw	r3,-12(fp)
811071f8:	e0bff917 	ldw	r2,-28(fp)
811071fc:	10c00b15 	stw	r3,44(r2)
	/* ensure new last pointer points the beginning of the list */
	descriptor->next_desc_ptr_low = root_node_addr.u32[0];
81107200:	e0fffa17 	ldw	r3,-24(fp)
81107204:	e0bfff17 	ldw	r2,-4(fp)
81107208:	10c00315 	stw	r3,12(r2)
	descriptor->next_desc_ptr_high = root_node_addr.u32[1];
8110720c:	e0fffb17 	ldw	r3,-20(fp)
81107210:	e0bfff17 	ldw	r2,-4(fp)
81107214:	10c00b15 	stw	r3,44(r2)
	return 0;
81107218:	0005883a 	mov	r2,zero
}
8110721c:	e037883a 	mov	sp,fp
81107220:	df000017 	ldw	fp,0(sp)
81107224:	dec00104 	addi	sp,sp,4
81107228:	f800283a 	ret

8110722c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_std_list_own_by_hw_bits (
	alt_msgdma_prefetcher_standard_descriptor *list)
{
8110722c:	defffc04 	addi	sp,sp,-16
81107230:	df000315 	stw	fp,12(sp)
81107234:	df000304 	addi	fp,sp,12
81107238:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
8110723c:	e03ffe15 	stw	zero,-8(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	if (list == NULL)
81107240:	e0bfff17 	ldw	r2,-4(fp)
81107244:	1000021e 	bne	r2,zero,81107250 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x24>
	{
		return -EINVAL;  /* this list cannot be empty */
81107248:	00bffa84 	movi	r2,-22
8110724c:	00001906 	br	811072b4 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x88>
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
81107250:	e0bfff17 	ldw	r2,-4(fp)
81107254:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
81107258:	00000a06 	br	81107284 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x58>
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
8110725c:	e0bffd17 	ldw	r2,-12(fp)
81107260:	10800717 	ldw	r2,28(r2)
81107264:	e0bffe15 	stw	r2,-8(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
81107268:	e0bffe17 	ldw	r2,-8(fp)
8110726c:	10d00034 	orhi	r3,r2,16384
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
81107270:	e0bffd17 	ldw	r2,-12(fp)
81107274:	10c00715 	stw	r3,28(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
81107278:	e0bffd17 	ldw	r2,-12(fp)
8110727c:	10800317 	ldw	r2,12(r2)
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
81107280:	e0bffd15 	stw	r2,-12(fp)
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
81107284:	e0bffd17 	ldw	r2,-12(fp)
81107288:	10c00317 	ldw	r3,12(r2)
8110728c:	e0bfff17 	ldw	r2,-4(fp)
81107290:	18bff21e 	bne	r3,r2,8110725c <__reset+0xfb0e725c>
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
81107294:	e0bffd17 	ldw	r2,-12(fp)
81107298:	10800717 	ldw	r2,28(r2)
8110729c:	e0bffe15 	stw	r2,-8(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
811072a0:	e0bffe17 	ldw	r2,-8(fp)
811072a4:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
811072a8:	e0bffd17 	ldw	r2,-12(fp)
811072ac:	10c00715 	stw	r3,28(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	
	return 0;
811072b0:	0005883a 	mov	r2,zero
}
811072b4:	e037883a 	mov	sp,fp
811072b8:	df000017 	ldw	fp,0(sp)
811072bc:	dec00104 	addi	sp,sp,4
811072c0:	f800283a 	ret

811072c4 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits (
	alt_msgdma_prefetcher_extended_descriptor *list)
{
811072c4:	defff804 	addi	sp,sp,-32
811072c8:	df000715 	stw	fp,28(sp)
811072cc:	df000704 	addi	fp,sp,28
811072d0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
811072d4:	e03ffa15 	stw	zero,-24(fp)
	msgdma_addr64 root_node_addr, next_node_addr;
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	
	if (list == NULL)
811072d8:	e13fff17 	ldw	r4,-4(fp)
811072dc:	2000021e 	bne	r4,zero,811072e8 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x24>
	{
		return -EINVAL;  /* this list cannot be empty */
811072e0:	00bffa84 	movi	r2,-22
811072e4:	00002806 	br	81107388 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xc4>
	}
	
	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
811072e8:	e13fff17 	ldw	r4,-4(fp)
811072ec:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;
811072f0:	e13fff17 	ldw	r4,-4(fp)
811072f4:	2005883a 	mov	r2,r4
811072f8:	0007883a 	mov	r3,zero
811072fc:	e0bffb15 	stw	r2,-20(fp)
81107300:	e0fffc15 	stw	r3,-16(fp)

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
81107304:	00001006 	br	81107348 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x84>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
81107308:	e0bff917 	ldw	r2,-28(fp)
8110730c:	10800f17 	ldw	r2,60(r2)
81107310:	e0bffa15 	stw	r2,-24(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
81107314:	e0bffa17 	ldw	r2,-24(fp)
81107318:	10d00034 	orhi	r3,r2,16384
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
8110731c:	e0bff917 	ldw	r2,-28(fp)
81107320:	10c00f15 	stw	r3,60(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
81107324:	e0bff917 	ldw	r2,-28(fp)
81107328:	10800317 	ldw	r2,12(r2)
8110732c:	e0bffd15 	stw	r2,-12(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
81107330:	e0bff917 	ldw	r2,-28(fp)
81107334:	10800b17 	ldw	r2,44(r2)
81107338:	e0bffe15 	stw	r2,-8(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
8110733c:	e0bffd17 	ldw	r2,-12(fp)
81107340:	e0fffe17 	ldw	r3,-8(fp)
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
81107344:	e0bff915 	stw	r2,-28(fp)
	last_descr_ptr = list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
81107348:	e0bff917 	ldw	r2,-28(fp)
8110734c:	10c00317 	ldw	r3,12(r2)
81107350:	e0bffb17 	ldw	r2,-20(fp)
81107354:	18800426 	beq	r3,r2,81107368 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xa4>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
81107358:	e0bff917 	ldw	r2,-28(fp)
8110735c:	10c00b17 	ldw	r3,44(r2)
81107360:	e0bffc17 	ldw	r2,-16(fp)
81107364:	18bfe81e 	bne	r3,r2,81107308 <__reset+0xfb0e7308>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
81107368:	e0bff917 	ldw	r2,-28(fp)
8110736c:	10800f17 	ldw	r2,60(r2)
81107370:	e0bffa15 	stw	r2,-24(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
81107374:	e0bffa17 	ldw	r2,-24(fp)
81107378:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
8110737c:	e0bff917 	ldw	r2,-28(fp)
81107380:	10c00f15 	stw	r3,60(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	return 0;
81107384:	0005883a 	mov	r2,zero
}
81107388:	e037883a 	mov	sp,fp
8110738c:	df000017 	ldw	fp,0(sp)
81107390:	dec00104 	addi	sp,sp,4
81107394:	f800283a 	ret

81107398 <alt_msgdma_start_prefetcher_with_list_addr>:
int alt_msgdma_start_prefetcher_with_list_addr (
	alt_msgdma_dev *dev,
	alt_u64  list_addr,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
81107398:	deffef04 	addi	sp,sp,-68
8110739c:	df001015 	stw	fp,64(sp)
811073a0:	df001004 	addi	fp,sp,64
811073a4:	e13ffb15 	stw	r4,-20(fp)
811073a8:	e17ffc15 	stw	r5,-16(fp)
811073ac:	e1bffd15 	stw	r6,-12(fp)
811073b0:	3807883a 	mov	r3,r7
811073b4:	e0800117 	ldw	r2,4(fp)
811073b8:	e0fffe05 	stb	r3,-8(fp)
811073bc:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 prefetcher_ctl = 0;
811073c0:	e03ff015 	stw	zero,-64(fp)
	alt_u32 dispatcher_ctl = 0;
811073c4:	e03ff115 	stw	zero,-60(fp)
	alt_irq_context context = 0;
811073c8:	e03ff215 	stw	zero,-56(fp)
	
	/* use helper struct to get easy access to hi/low address */
	msgdma_addr64 root_node_addr;
	root_node_addr.u64 = list_addr;  
811073cc:	e0bffc17 	ldw	r2,-16(fp)
811073d0:	e0bff915 	stw	r2,-28(fp)
811073d4:	e0bffd17 	ldw	r2,-12(fp)
811073d8:	e0bffa15 	stw	r2,-24(fp)
	 * semaphore. This ensures that accessing registers is thread-safe.
	 */
	ALT_SEM_PEND (dev->regs_lock, 0);
	
	/* case where prefetcher already started, return busy error */ 
	prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
811073dc:	e0bffb17 	ldw	r2,-20(fp)
811073e0:	10800617 	ldw	r2,24(r2)
811073e4:	10800037 	ldwio	r2,0(r2)
811073e8:	e0bff015 	stw	r2,-64(fp)
	if(ALT_MSGDMA_PREFETCHER_CTRL_RUN_GET(prefetcher_ctl)){
811073ec:	e0bff017 	ldw	r2,-64(fp)
811073f0:	1080004c 	andi	r2,r2,1
811073f4:	10000226 	beq	r2,zero,81107400 <alt_msgdma_start_prefetcher_with_list_addr+0x68>
		/* release the registers semaphore */
		ALT_SEM_POST (dev->regs_lock);
		return -EBUSY;
811073f8:	00bffc04 	movi	r2,-16
811073fc:	00009206 	br	81107648 <alt_msgdma_start_prefetcher_with_list_addr+0x2b0>
	}
		
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	   read or write masters  */
	/* stop issuing more descriptors */
	dispatcher_ctl = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
81107400:	00800804 	movi	r2,32
81107404:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81107408:	0005303a 	rdctl	r2,status
8110740c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81107410:	e0fff517 	ldw	r3,-44(fp)
81107414:	00bfff84 	movi	r2,-2
81107418:	1884703a 	and	r2,r3,r2
8110741c:	1001703a 	wrctl	status,r2
  
  return context;
81107420:	e0bff517 	ldw	r2,-44(fp)
	
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
81107424:	e0bff215 	stw	r2,-56(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
81107428:	e0bffb17 	ldw	r2,-20(fp)
8110742c:	10800317 	ldw	r2,12(r2)
81107430:	10800104 	addi	r2,r2,4
81107434:	e0fff117 	ldw	r3,-60(fp)
81107438:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS( dev->csr_base, 
8110743c:	e0bffb17 	ldw	r2,-20(fp)
81107440:	10800317 	ldw	r2,12(r2)
81107444:	e0fffb17 	ldw	r3,-20(fp)
81107448:	18c00317 	ldw	r3,12(r3)
8110744c:	18c00037 	ldwio	r3,0(r3)
81107450:	10c00035 	stwio	r3,0(r2)
81107454:	e0bff217 	ldw	r2,-56(fp)
81107458:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8110745c:	e0bff317 	ldw	r2,-52(fp)
81107460:	1001703a 	wrctl	status,r2
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up dispatcher to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if(dev->callback)
81107464:	e0bffb17 	ldw	r2,-20(fp)
81107468:	10800b17 	ldw	r2,44(r2)
8110746c:	10002326 	beq	r2,zero,811074fc <alt_msgdma_start_prefetcher_with_list_addr+0x164>
	{
		dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
81107470:	e0bffb17 	ldw	r2,-20(fp)
81107474:	10c00d17 	ldw	r3,52(r2)
81107478:	e0bff117 	ldw	r2,-60(fp)
8110747c:	1884b03a 	or	r2,r3,r2
81107480:	10800514 	ori	r2,r2,20
81107484:	e0bff115 	stw	r2,-60(fp)
				| ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
		dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
81107488:	e0fff117 	ldw	r3,-60(fp)
8110748c:	00bff7c4 	movi	r2,-33
81107490:	1884703a 	and	r2,r3,r2
81107494:	e0bff115 	stw	r2,-60(fp)
		
		prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
81107498:	e0bff017 	ldw	r2,-64(fp)
8110749c:	10800214 	ori	r2,r2,8
811074a0:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811074a4:	0005303a 	rdctl	r2,status
811074a8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811074ac:	e0fff717 	ldw	r3,-36(fp)
811074b0:	00bfff84 	movi	r2,-2
811074b4:	1884703a 	and	r2,r3,r2
811074b8:	1001703a 	wrctl	status,r2
  
  return context;
811074bc:	e0bff717 	ldw	r2,-36(fp)
	    /* making sure the read-modify-write below can't be pre-empted */
	    context = alt_irq_disable_all(); 
811074c0:	e0bff215 	stw	r2,-56(fp)
	    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
811074c4:	e0bffb17 	ldw	r2,-20(fp)
811074c8:	10800317 	ldw	r2,12(r2)
811074cc:	10800104 	addi	r2,r2,4
811074d0:	e0fff117 	ldw	r3,-60(fp)
811074d4:	10c00035 	stwio	r3,0(r2)
		IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
811074d8:	e0bffb17 	ldw	r2,-20(fp)
811074dc:	10800617 	ldw	r2,24(r2)
811074e0:	e0fff017 	ldw	r3,-64(fp)
811074e4:	10c00035 	stwio	r3,0(r2)
811074e8:	e0bff217 	ldw	r2,-56(fp)
811074ec:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811074f0:	e0bff417 	ldw	r2,-48(fp)
811074f4:	1001703a 	wrctl	status,r2
811074f8:	00002306 	br	81107588 <alt_msgdma_start_prefetcher_with_list_addr+0x1f0>
	  *   - Stop on an error with any particular descriptor
	  *   - Disable interrupt generation
	  */
	 else
	 {
		 dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
811074fc:	e0bffb17 	ldw	r2,-20(fp)
81107500:	10c00d17 	ldw	r3,52(r2)
81107504:	e0bff117 	ldw	r2,-60(fp)
81107508:	1884b03a 	or	r2,r3,r2
8110750c:	10800114 	ori	r2,r2,4
81107510:	e0bff115 	stw	r2,-60(fp)
		 dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
81107514:	e0fff117 	ldw	r3,-60(fp)
81107518:	00bff3c4 	movi	r2,-49
8110751c:	1884703a 	and	r2,r3,r2
81107520:	e0bff115 	stw	r2,-60(fp)
				 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
81107524:	e0fff017 	ldw	r3,-64(fp)
81107528:	00bffdc4 	movi	r2,-9
8110752c:	1884703a 	and	r2,r3,r2
81107530:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81107534:	0005303a 	rdctl	r2,status
81107538:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8110753c:	e0fff817 	ldw	r3,-32(fp)
81107540:	00bfff84 	movi	r2,-2
81107544:	1884703a 	and	r2,r3,r2
81107548:	1001703a 	wrctl	status,r2
  
  return context;
8110754c:	e0bff817 	ldw	r2,-32(fp)
	     /* making sure the read-modify-write below can't be pre-empted */
	     context = alt_irq_disable_all();
81107550:	e0bff215 	stw	r2,-56(fp)
	     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
81107554:	e0bffb17 	ldw	r2,-20(fp)
81107558:	10800317 	ldw	r2,12(r2)
8110755c:	10800104 	addi	r2,r2,4
81107560:	e0fff117 	ldw	r3,-60(fp)
81107564:	10c00035 	stwio	r3,0(r2)
	     IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
81107568:	e0bffb17 	ldw	r2,-20(fp)
8110756c:	10800617 	ldw	r2,24(r2)
81107570:	e0fff017 	ldw	r3,-64(fp)
81107574:	10c00035 	stwio	r3,0(r2)
81107578:	e0bff217 	ldw	r2,-56(fp)
8110757c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81107580:	e0bff617 	ldw	r2,-40(fp)
81107584:	1001703a 	wrctl	status,r2
	     alt_irq_enable_all(context);
	 }   
	
	 /* set next descriptor registers to point to the list root-node */
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_LOW(dev->prefetcher_base,
81107588:	e0bffb17 	ldw	r2,-20(fp)
8110758c:	10800617 	ldw	r2,24(r2)
81107590:	10800104 	addi	r2,r2,4
81107594:	e0fff917 	ldw	r3,-28(fp)
81107598:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[0]);
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_HIGH(dev->prefetcher_base,
8110759c:	e0bffb17 	ldw	r2,-20(fp)
811075a0:	10800617 	ldw	r2,24(r2)
811075a4:	10800204 	addi	r2,r2,8
811075a8:	e0fffa17 	ldw	r3,-24(fp)
811075ac:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[1]);
		
	 /* set park-mode */
	 if (park_mode_en){
811075b0:	e0bffe03 	ldbu	r2,-8(fp)
811075b4:	10000426 	beq	r2,zero,811075c8 <alt_msgdma_start_prefetcher_with_list_addr+0x230>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
811075b8:	e0bff017 	ldw	r2,-64(fp)
811075bc:	10800414 	ori	r2,r2,16
811075c0:	e0bff015 	stw	r2,-64(fp)
811075c4:	00000406 	br	811075d8 <alt_msgdma_start_prefetcher_with_list_addr+0x240>
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
811075c8:	e0fff017 	ldw	r3,-64(fp)
811075cc:	00bffbc4 	movi	r2,-17
811075d0:	1884703a 	and	r2,r3,r2
811075d4:	e0bff015 	stw	r2,-64(fp)
	 }
	 
	 /* set poll-en */
	 if (poll_en){
811075d8:	e0bfff03 	ldbu	r2,-4(fp)
811075dc:	10000e26 	beq	r2,zero,81107618 <alt_msgdma_start_prefetcher_with_list_addr+0x280>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
811075e0:	e0bff017 	ldw	r2,-64(fp)
811075e4:	10800094 	ori	r2,r2,2
811075e8:	e0bff015 	stw	r2,-64(fp)
		 if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
811075ec:	e0bffb17 	ldw	r2,-20(fp)
811075f0:	10800617 	ldw	r2,24(r2)
811075f4:	10800304 	addi	r2,r2,12
811075f8:	10800037 	ldwio	r2,0(r2)
811075fc:	10000a1e 	bne	r2,zero,81107628 <alt_msgdma_start_prefetcher_with_list_addr+0x290>
				 dev->prefetcher_base) == 0){
			 /* set poll frequency to some non-zero default value */
			 IOWR_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
81107600:	e0bffb17 	ldw	r2,-20(fp)
81107604:	10800617 	ldw	r2,24(r2)
81107608:	10800304 	addi	r2,r2,12
8110760c:	00c03fc4 	movi	r3,255
81107610:	10c00035 	stwio	r3,0(r2)
81107614:	00000406 	br	81107628 <alt_msgdma_start_prefetcher_with_list_addr+0x290>
					 dev->prefetcher_base, 0xFF);
		 }
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_CLR_MASK; 
81107618:	e0fff017 	ldw	r3,-64(fp)
8110761c:	00bfff44 	movi	r2,-3
81107620:	1884703a 	and	r2,r3,r2
81107624:	e0bff015 	stw	r2,-64(fp)
	 }
	 
	 /* set the prefetcher run bit */
	 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_RUN_SET_MASK;
81107628:	e0bff017 	ldw	r2,-64(fp)
8110762c:	10800054 	ori	r2,r2,1
81107630:	e0bff015 	stw	r2,-64(fp)
	 /* start the dma since run bit is set */
	 IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
81107634:	e0bffb17 	ldw	r2,-20(fp)
81107638:	10800617 	ldw	r2,24(r2)
8110763c:	e0fff017 	ldw	r3,-64(fp)
81107640:	10c00035 	stwio	r3,0(r2)
	  * Now that access to the registers is complete, release the registers
	  * semaphore so that other threads can access the registers.
	  */
	 ALT_SEM_POST (dev->regs_lock);
	 
	 return 0;
81107644:	0005883a 	mov	r2,zero
}
81107648:	e037883a 	mov	sp,fp
8110764c:	df000017 	ldw	fp,0(sp)
81107650:	dec00104 	addi	sp,sp,4
81107654:	f800283a 	ret

81107658 <alt_msgdma_start_prefetcher_with_std_desc_list>:
int alt_msgdma_start_prefetcher_with_std_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{	
81107658:	defff704 	addi	sp,sp,-36
8110765c:	dfc00815 	stw	ra,32(sp)
81107660:	df000715 	stw	fp,28(sp)
81107664:	dc400615 	stw	r17,24(sp)
81107668:	dc000515 	stw	r16,20(sp)
8110766c:	df000704 	addi	fp,sp,28
81107670:	e13ffa15 	stw	r4,-24(fp)
81107674:	e17ffb15 	stw	r5,-20(fp)
81107678:	3007883a 	mov	r3,r6
8110767c:	3805883a 	mov	r2,r7
81107680:	e0fffc05 	stb	r3,-16(fp)
81107684:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_std_list_own_by_hw_bits(list) != 0){
81107688:	e13ffb17 	ldw	r4,-20(fp)
8110768c:	110722c0 	call	8110722c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>
81107690:	10000226 	beq	r2,zero,8110769c <alt_msgdma_start_prefetcher_with_std_desc_list+0x44>
		return -EINVAL;
81107694:	00bffa84 	movi	r2,-22
81107698:	00000b06 	br	811076c8 <alt_msgdma_start_prefetcher_with_std_desc_list+0x70>
	}
	
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list,
8110769c:	e0bffb17 	ldw	r2,-20(fp)
811076a0:	1021883a 	mov	r16,r2
811076a4:	0023883a 	mov	r17,zero
811076a8:	e0fffc03 	ldbu	r3,-16(fp)
811076ac:	e0bffd03 	ldbu	r2,-12(fp)
811076b0:	d8800015 	stw	r2,0(sp)
811076b4:	180f883a 	mov	r7,r3
811076b8:	800b883a 	mov	r5,r16
811076bc:	880d883a 	mov	r6,r17
811076c0:	e13ffa17 	ldw	r4,-24(fp)
811076c4:	11073980 	call	81107398 <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
811076c8:	e6fffe04 	addi	sp,fp,-8
811076cc:	dfc00317 	ldw	ra,12(sp)
811076d0:	df000217 	ldw	fp,8(sp)
811076d4:	dc400117 	ldw	r17,4(sp)
811076d8:	dc000017 	ldw	r16,0(sp)
811076dc:	dec00404 	addi	sp,sp,16
811076e0:	f800283a 	ret

811076e4 <alt_msgdma_start_prefetcher_with_extd_desc_list>:
int alt_msgdma_start_prefetcher_with_extd_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_extended_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
811076e4:	defff704 	addi	sp,sp,-36
811076e8:	dfc00815 	stw	ra,32(sp)
811076ec:	df000715 	stw	fp,28(sp)
811076f0:	dc400615 	stw	r17,24(sp)
811076f4:	dc000515 	stw	r16,20(sp)
811076f8:	df000704 	addi	fp,sp,28
811076fc:	e13ffa15 	stw	r4,-24(fp)
81107700:	e17ffb15 	stw	r5,-20(fp)
81107704:	3007883a 	mov	r3,r6
81107708:	3805883a 	mov	r2,r7
8110770c:	e0fffc05 	stb	r3,-16(fp)
81107710:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits(list) != 0){
81107714:	e13ffb17 	ldw	r4,-20(fp)
81107718:	11072c40 	call	811072c4 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>
8110771c:	10000226 	beq	r2,zero,81107728 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x44>
		return -EINVAL;
81107720:	00bffa84 	movi	r2,-22
81107724:	00000b06 	br	81107754 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x70>
	}
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list, 
81107728:	e0bffb17 	ldw	r2,-20(fp)
8110772c:	1021883a 	mov	r16,r2
81107730:	0023883a 	mov	r17,zero
81107734:	e0fffc03 	ldbu	r3,-16(fp)
81107738:	e0bffd03 	ldbu	r2,-12(fp)
8110773c:	d8800015 	stw	r2,0(sp)
81107740:	180f883a 	mov	r7,r3
81107744:	800b883a 	mov	r5,r16
81107748:	880d883a 	mov	r6,r17
8110774c:	e13ffa17 	ldw	r4,-24(fp)
81107750:	11073980 	call	81107398 <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
81107754:	e6fffe04 	addi	sp,fp,-8
81107758:	dfc00317 	ldw	ra,12(sp)
8110775c:	df000217 	ldw	fp,8(sp)
81107760:	dc400117 	ldw	r17,4(sp)
81107764:	dc000017 	ldw	r16,0(sp)
81107768:	dec00404 	addi	sp,sp,16
8110776c:	f800283a 	ret

81107770 <alt_msgdma_open>:
 * Returns:
 * - Pointer to msgdma device instance structure, or null if the device
 *   could not be opened.
 */
alt_msgdma_dev* alt_msgdma_open (const char* name)
{
81107770:	defffc04 	addi	sp,sp,-16
81107774:	dfc00315 	stw	ra,12(sp)
81107778:	df000215 	stw	fp,8(sp)
8110777c:	df000204 	addi	fp,sp,8
81107780:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev* dev = NULL;
81107784:	e03ffe15 	stw	zero,-8(fp)

    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);
81107788:	d1600d04 	addi	r5,gp,-32716
8110778c:	e13fff17 	ldw	r4,-4(fp)
81107790:	1107e940 	call	81107e94 <alt_find_dev>
81107794:	e0bffe15 	stw	r2,-8(fp)

    if (NULL == dev)
81107798:	e0bffe17 	ldw	r2,-8(fp)
8110779c:	1000041e 	bne	r2,zero,811077b0 <alt_msgdma_open+0x40>
    {
        ALT_ERRNO = ENODEV;
811077a0:	1105bfc0 	call	81105bfc <alt_get_errno>
811077a4:	1007883a 	mov	r3,r2
811077a8:	008004c4 	movi	r2,19
811077ac:	18800015 	stw	r2,0(r3)
    }

    return dev;
811077b0:	e0bffe17 	ldw	r2,-8(fp)
}
811077b4:	e037883a 	mov	sp,fp
811077b8:	dfc00117 	ldw	ra,4(sp)
811077bc:	df000017 	ldw	fp,0(sp)
811077c0:	dec00204 	addi	sp,sp,8
811077c4:	f800283a 	ret

811077c8 <alt_msgdma_init>:
 * This routine disables interrupts, descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_msgdma_init (alt_msgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
811077c8:	defff804 	addi	sp,sp,-32
811077cc:	dfc00715 	stw	ra,28(sp)
811077d0:	df000615 	stw	fp,24(sp)
811077d4:	df000604 	addi	fp,sp,24
811077d8:	e13ffd15 	stw	r4,-12(fp)
811077dc:	e17ffe15 	stw	r5,-8(fp)
811077e0:	e1bfff15 	stw	r6,-4(fp)
    extern alt_llist alt_msgdma_list;
    alt_u32 temporary_control;
    int error;

    if (dev->prefetcher_enable)
811077e4:	e0bffd17 	ldw	r2,-12(fp)
811077e8:	10801783 	ldbu	r2,94(r2)
811077ec:	10803fcc 	andi	r2,r2,255
811077f0:	10000b26 	beq	r2,zero,81107820 <alt_msgdma_init+0x58>
    {
    	/* start prefetcher reset sequence */
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, 
811077f4:	e0bffd17 	ldw	r2,-12(fp)
811077f8:	10800617 	ldw	r2,24(r2)
811077fc:	00c00104 	movi	r3,4
81107800:	10c00035 	stwio	r3,0(r2)
    			ALT_MSGDMA_PREFETCHER_CTRL_RESET_SET_MASK);
    	/* wait until hw clears the bit */
    	while(ALT_MSGDMA_PREFETCHER_CTRL_RESET_GET(
81107804:	0001883a 	nop
81107808:	e0bffd17 	ldw	r2,-12(fp)
8110780c:	10800617 	ldw	r2,24(r2)
81107810:	10800037 	ldwio	r2,0(r2)
81107814:	1080010c 	andi	r2,r2,4
81107818:	1005d0ba 	srai	r2,r2,2
8110781c:	103ffa1e 	bne	r2,zero,81107808 <__reset+0xfb0e7808>
    }    
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
81107820:	e0bffd17 	ldw	r2,-12(fp)
81107824:	10800317 	ldw	r2,12(r2)
81107828:	10800104 	addi	r2,r2,4
8110782c:	00c00084 	movi	r3,2
81107830:	10c00035 	stwio	r3,0(r2)
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
81107834:	0001883a 	nop
81107838:	e0bffd17 	ldw	r2,-12(fp)
8110783c:	10800317 	ldw	r2,12(r2)
81107840:	10800037 	ldwio	r2,0(r2)
    		& ALTERA_MSGDMA_CSR_RESET_STATE_MASK));
81107844:	1080100c 	andi	r2,r2,64
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
81107848:	103ffb1e 	bne	r2,zero,81107838 <__reset+0xfb0e7838>
    * Disable interrupts, halt descriptor processing,
    * and clear status register content
    */

    /* disable global interrupt */
    temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
8110784c:	e0bffd17 	ldw	r2,-12(fp)
81107850:	10800317 	ldw	r2,12(r2)
81107854:	10800104 	addi	r2,r2,4
81107858:	10800037 	ldwio	r2,0(r2)
8110785c:	1007883a 	mov	r3,r2
81107860:	00bffbc4 	movi	r2,-17
81107864:	1884703a 	and	r2,r3,r2
81107868:	e0bffb15 	stw	r2,-20(fp)
    		& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    /* stopping descriptor */
    temporary_control |= ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
8110786c:	e0bffb17 	ldw	r2,-20(fp)
81107870:	10800814 	ori	r2,r2,32
81107874:	e0bffb15 	stw	r2,-20(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
81107878:	e0bffd17 	ldw	r2,-12(fp)
8110787c:	10800317 	ldw	r2,12(r2)
81107880:	10800104 	addi	r2,r2,4
81107884:	e0fffb17 	ldw	r3,-20(fp)
81107888:	10c00035 	stwio	r3,0(r2)

    /* clear the CSR status register */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base, 
8110788c:	e0bffd17 	ldw	r2,-12(fp)
81107890:	10800317 	ldw	r2,12(r2)
81107894:	e0fffd17 	ldw	r3,-12(fp)
81107898:	18c00317 	ldw	r3,12(r3)
8110789c:	18c00037 	ldwio	r3,0(r3)
811078a0:	10c00035 	stwio	r3,0(r2)
    		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    
    if (dev->prefetcher_enable)
811078a4:	e0bffd17 	ldw	r2,-12(fp)
811078a8:	10801783 	ldbu	r2,94(r2)
811078ac:	10803fcc 	andi	r2,r2,255
811078b0:	10000826 	beq	r2,zero,811078d4 <alt_msgdma_init+0x10c>
    {
    	/* clear all status bits that are set, since theyre W1C */
    	IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base, 
811078b4:	e0bffd17 	ldw	r2,-12(fp)
811078b8:	10800617 	ldw	r2,24(r2)
811078bc:	10800404 	addi	r2,r2,16
811078c0:	e0fffd17 	ldw	r3,-12(fp)
811078c4:	18c00617 	ldw	r3,24(r3)
811078c8:	18c00404 	addi	r3,r3,16
811078cc:	18c00037 	ldwio	r3,0(r3)
811078d0:	10c00035 	stwio	r3,0(r2)
    			IORD_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base));
    }

    /* Register this instance of the msgdma controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_msgdma_list);
811078d4:	d1600d04 	addi	r5,gp,-32716
811078d8:	e13ffd17 	ldw	r4,-12(fp)
811078dc:	1107d300 	call	81107d30 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
811078e0:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
811078e4:	e0bffc15 	stw	r2,-16(fp)
            
    if (!error)
811078e8:	e0bffc17 	ldw	r2,-16(fp)
811078ec:	1000081e 	bne	r2,zero,81107910 <alt_msgdma_init+0x148>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
811078f0:	d8000015 	stw	zero,0(sp)
811078f4:	e1fffd17 	ldw	r7,-12(fp)
811078f8:	01a04434 	movhi	r6,33040
811078fc:	31977e04 	addi	r6,r6,24056
81107900:	e17fff17 	ldw	r5,-4(fp)
81107904:	e13ffe17 	ldw	r4,-8(fp)
81107908:	1107f240 	call	81107f24 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }
    
    return;
8110790c:	00000406 	br	81107920 <alt_msgdma_init+0x158>
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
81107910:	01204474 	movhi	r4,33041
81107914:	21252304 	addi	r4,r4,-27508
81107918:	11085580 	call	81108558 <alt_printf>
    }
    
    return;
8110791c:	0001883a 	nop

}
81107920:	e037883a 	mov	sp,fp
81107924:	dfc00117 	ldw	ra,4(sp)
81107928:	df000017 	ldw	fp,0(sp)
8110792c:	dec00204 	addi	sp,sp,8
81107930:	f800283a 	ret

81107934 <alt_msgdma_register_callback>:
void alt_msgdma_register_callback(
	alt_msgdma_dev *dev,
	alt_msgdma_callback callback,
	alt_u32 control,
	void *context)
{
81107934:	defffb04 	addi	sp,sp,-20
81107938:	df000415 	stw	fp,16(sp)
8110793c:	df000404 	addi	fp,sp,16
81107940:	e13ffc15 	stw	r4,-16(fp)
81107944:	e17ffd15 	stw	r5,-12(fp)
81107948:	e1bffe15 	stw	r6,-8(fp)
8110794c:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
81107950:	e0bffc17 	ldw	r2,-16(fp)
81107954:	e0fffd17 	ldw	r3,-12(fp)
81107958:	10c00b15 	stw	r3,44(r2)
    dev->callback_context = context;
8110795c:	e0bffc17 	ldw	r2,-16(fp)
81107960:	e0ffff17 	ldw	r3,-4(fp)
81107964:	10c00c15 	stw	r3,48(r2)
    dev->control          = control;
81107968:	e0bffc17 	ldw	r2,-16(fp)
8110796c:	e0fffe17 	ldw	r3,-8(fp)
81107970:	10c00d15 	stw	r3,52(r2)

    return ;
81107974:	0001883a 	nop
}
81107978:	e037883a 	mov	sp,fp
8110797c:	df000017 	ldw	fp,0(sp)
81107980:	dec00104 	addi	sp,sp,4
81107984:	f800283a 	ret

81107988 <alt_msgdma_standard_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_standard_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
81107988:	defffc04 	addi	sp,sp,-16
8110798c:	dfc00315 	stw	ra,12(sp)
81107990:	df000215 	stw	fp,8(sp)
81107994:	df000204 	addi	fp,sp,8
81107998:	e13ffe15 	stw	r4,-8(fp)
8110799c:	e17fff15 	stw	r5,-4(fp)
   /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
    return alt_msgdma_descriptor_async_transfer(dev, desc, NULL);
811079a0:	000d883a 	mov	r6,zero
811079a4:	e17fff17 	ldw	r5,-4(fp)
811079a8:	e13ffe17 	ldw	r4,-8(fp)
811079ac:	110615c0 	call	8110615c <alt_msgdma_descriptor_async_transfer>

}
811079b0:	e037883a 	mov	sp,fp
811079b4:	dfc00117 	ldw	ra,4(sp)
811079b8:	df000017 	ldw	fp,0(sp)
811079bc:	dec00204 	addi	sp,sp,8
811079c0:	f800283a 	ret

811079c4 <alt_msgdma_extended_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_extended_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
811079c4:	defffc04 	addi	sp,sp,-16
811079c8:	dfc00315 	stw	ra,12(sp)
811079cc:	df000215 	stw	fp,8(sp)
811079d0:	df000204 	addi	fp,sp,8
811079d4:	e13ffe15 	stw	r4,-8(fp)
811079d8:	e17fff15 	stw	r5,-4(fp)
    /*
    * Error detection/handling should be performed at the application
    * or callback level as appropriate.
    */
    return alt_msgdma_descriptor_async_transfer(dev, NULL, desc);
811079dc:	e1bfff17 	ldw	r6,-4(fp)
811079e0:	000b883a 	mov	r5,zero
811079e4:	e13ffe17 	ldw	r4,-8(fp)
811079e8:	110615c0 	call	8110615c <alt_msgdma_descriptor_async_transfer>
}
811079ec:	e037883a 	mov	sp,fp
811079f0:	dfc00117 	ldw	ra,4(sp)
811079f4:	df000017 	ldw	fp,0(sp)
811079f8:	dec00204 	addi	sp,sp,8
811079fc:	f800283a 	ret

81107a00 <alt_msgdma_standard_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_standard_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
81107a00:	defffc04 	addi	sp,sp,-16
81107a04:	dfc00315 	stw	ra,12(sp)
81107a08:	df000215 	stw	fp,8(sp)
81107a0c:	df000204 	addi	fp,sp,8
81107a10:	e13ffe15 	stw	r4,-8(fp)
81107a14:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, desc, NULL);
81107a18:	000d883a 	mov	r6,zero
81107a1c:	e17fff17 	ldw	r5,-4(fp)
81107a20:	e13ffe17 	ldw	r4,-8(fp)
81107a24:	110642c0 	call	8110642c <alt_msgdma_descriptor_sync_transfer>
}
81107a28:	e037883a 	mov	sp,fp
81107a2c:	dfc00117 	ldw	ra,4(sp)
81107a30:	df000017 	ldw	fp,0(sp)
81107a34:	dec00204 	addi	sp,sp,8
81107a38:	f800283a 	ret

81107a3c <alt_msgdma_extended_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_extended_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
81107a3c:	defffc04 	addi	sp,sp,-16
81107a40:	dfc00315 	stw	ra,12(sp)
81107a44:	df000215 	stw	fp,8(sp)
81107a48:	df000204 	addi	fp,sp,8
81107a4c:	e13ffe15 	stw	r4,-8(fp)
81107a50:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, NULL, desc);
81107a54:	e1bfff17 	ldw	r6,-4(fp)
81107a58:	000b883a 	mov	r5,zero
81107a5c:	e13ffe17 	ldw	r4,-8(fp)
81107a60:	110642c0 	call	8110642c <alt_msgdma_descriptor_sync_transfer>
}
81107a64:	e037883a 	mov	sp,fp
81107a68:	dfc00117 	ldw	ra,4(sp)
81107a6c:	df000017 	ldw	fp,0(sp)
81107a70:	dec00204 	addi	sp,sp,8
81107a74:	f800283a 	ret

81107a78 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
81107a78:	defff504 	addi	sp,sp,-44
81107a7c:	df000a15 	stw	fp,40(sp)
81107a80:	df000a04 	addi	fp,sp,40
81107a84:	e13ffc15 	stw	r4,-16(fp)
81107a88:	e17ffd15 	stw	r5,-12(fp)
81107a8c:	e1bffe15 	stw	r6,-8(fp)
81107a90:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
81107a94:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81107a98:	d0a01a17 	ldw	r2,-32664(gp)
  
  if (alt_ticks_per_second ())
81107a9c:	10003c26 	beq	r2,zero,81107b90 <alt_alarm_start+0x118>
  {
    if (alarm)
81107aa0:	e0bffc17 	ldw	r2,-16(fp)
81107aa4:	10003826 	beq	r2,zero,81107b88 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
81107aa8:	e0bffc17 	ldw	r2,-16(fp)
81107aac:	e0fffe17 	ldw	r3,-8(fp)
81107ab0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
81107ab4:	e0bffc17 	ldw	r2,-16(fp)
81107ab8:	e0ffff17 	ldw	r3,-4(fp)
81107abc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81107ac0:	0005303a 	rdctl	r2,status
81107ac4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81107ac8:	e0fff917 	ldw	r3,-28(fp)
81107acc:	00bfff84 	movi	r2,-2
81107ad0:	1884703a 	and	r2,r3,r2
81107ad4:	1001703a 	wrctl	status,r2
  
  return context;
81107ad8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
81107adc:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81107ae0:	d0a01b17 	ldw	r2,-32660(gp)
      
      current_nticks = alt_nticks();
81107ae4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
81107ae8:	e0fffd17 	ldw	r3,-12(fp)
81107aec:	e0bff617 	ldw	r2,-40(fp)
81107af0:	1885883a 	add	r2,r3,r2
81107af4:	10c00044 	addi	r3,r2,1
81107af8:	e0bffc17 	ldw	r2,-16(fp)
81107afc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
81107b00:	e0bffc17 	ldw	r2,-16(fp)
81107b04:	10c00217 	ldw	r3,8(r2)
81107b08:	e0bff617 	ldw	r2,-40(fp)
81107b0c:	1880042e 	bgeu	r3,r2,81107b20 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
81107b10:	e0bffc17 	ldw	r2,-16(fp)
81107b14:	00c00044 	movi	r3,1
81107b18:	10c00405 	stb	r3,16(r2)
81107b1c:	00000206 	br	81107b28 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
81107b20:	e0bffc17 	ldw	r2,-16(fp)
81107b24:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
81107b28:	e0bffc17 	ldw	r2,-16(fp)
81107b2c:	d0e01004 	addi	r3,gp,-32704
81107b30:	e0fffa15 	stw	r3,-24(fp)
81107b34:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
81107b38:	e0bffb17 	ldw	r2,-20(fp)
81107b3c:	e0fffa17 	ldw	r3,-24(fp)
81107b40:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
81107b44:	e0bffa17 	ldw	r2,-24(fp)
81107b48:	10c00017 	ldw	r3,0(r2)
81107b4c:	e0bffb17 	ldw	r2,-20(fp)
81107b50:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
81107b54:	e0bffa17 	ldw	r2,-24(fp)
81107b58:	10800017 	ldw	r2,0(r2)
81107b5c:	e0fffb17 	ldw	r3,-20(fp)
81107b60:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
81107b64:	e0bffa17 	ldw	r2,-24(fp)
81107b68:	e0fffb17 	ldw	r3,-20(fp)
81107b6c:	10c00015 	stw	r3,0(r2)
81107b70:	e0bff817 	ldw	r2,-32(fp)
81107b74:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81107b78:	e0bff717 	ldw	r2,-36(fp)
81107b7c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
81107b80:	0005883a 	mov	r2,zero
81107b84:	00000306 	br	81107b94 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
81107b88:	00bffa84 	movi	r2,-22
81107b8c:	00000106 	br	81107b94 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
81107b90:	00bfde84 	movi	r2,-134
  }
}
81107b94:	e037883a 	mov	sp,fp
81107b98:	df000017 	ldw	fp,0(sp)
81107b9c:	dec00104 	addi	sp,sp,4
81107ba0:	f800283a 	ret

81107ba4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
81107ba4:	defffb04 	addi	sp,sp,-20
81107ba8:	df000415 	stw	fp,16(sp)
81107bac:	df000404 	addi	fp,sp,16
81107bb0:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
81107bb4:	008000c4 	movi	r2,3
81107bb8:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
81107bbc:	e0fffd17 	ldw	r3,-12(fp)
81107bc0:	008003f4 	movhi	r2,15
81107bc4:	10909004 	addi	r2,r2,16960
81107bc8:	1887383a 	mul	r3,r3,r2
81107bcc:	00817db4 	movhi	r2,1526
81107bd0:	10b84004 	addi	r2,r2,-7936
81107bd4:	10c7203a 	divu	r3,r2,r3
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
81107bd8:	00a00034 	movhi	r2,32768
81107bdc:	10bfffc4 	addi	r2,r2,-1
81107be0:	10c5203a 	divu	r2,r2,r3
81107be4:	e0ffff17 	ldw	r3,-4(fp)
81107be8:	1885203a 	divu	r2,r3,r2
81107bec:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
81107bf0:	e0bffe17 	ldw	r2,-8(fp)
81107bf4:	10002526 	beq	r2,zero,81107c8c <alt_busy_sleep+0xe8>
  {
    for(i=0;i<big_loops;i++)
81107bf8:	e03ffc15 	stw	zero,-16(fp)
81107bfc:	00001406 	br	81107c50 <alt_busy_sleep+0xac>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
81107c00:	00a00034 	movhi	r2,32768
81107c04:	10bfffc4 	addi	r2,r2,-1
81107c08:	10bfffc4 	addi	r2,r2,-1
81107c0c:	103ffe1e 	bne	r2,zero,81107c08 <__reset+0xfb0e7c08>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
81107c10:	e0fffd17 	ldw	r3,-12(fp)
81107c14:	008003f4 	movhi	r2,15
81107c18:	10909004 	addi	r2,r2,16960
81107c1c:	1887383a 	mul	r3,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
81107c20:	00817db4 	movhi	r2,1526
81107c24:	10b84004 	addi	r2,r2,-7936
81107c28:	10c7203a 	divu	r3,r2,r3
81107c2c:	00a00034 	movhi	r2,32768
81107c30:	10bfffc4 	addi	r2,r2,-1
81107c34:	10c5203a 	divu	r2,r2,r3
81107c38:	e0ffff17 	ldw	r3,-4(fp)
81107c3c:	1885c83a 	sub	r2,r3,r2
81107c40:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
81107c44:	e0bffc17 	ldw	r2,-16(fp)
81107c48:	10800044 	addi	r2,r2,1
81107c4c:	e0bffc15 	stw	r2,-16(fp)
81107c50:	e0fffc17 	ldw	r3,-16(fp)
81107c54:	e0bffe17 	ldw	r2,-8(fp)
81107c58:	18bfe916 	blt	r3,r2,81107c00 <__reset+0xfb0e7c00>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
81107c5c:	e0fffd17 	ldw	r3,-12(fp)
81107c60:	008003f4 	movhi	r2,15
81107c64:	10909004 	addi	r2,r2,16960
81107c68:	1887383a 	mul	r3,r3,r2
81107c6c:	00817db4 	movhi	r2,1526
81107c70:	10b84004 	addi	r2,r2,-7936
81107c74:	10c7203a 	divu	r3,r2,r3
81107c78:	e0bfff17 	ldw	r2,-4(fp)
81107c7c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
81107c80:	10bfffc4 	addi	r2,r2,-1
81107c84:	103ffe1e 	bne	r2,zero,81107c80 <__reset+0xfb0e7c80>
81107c88:	00000b06 	br	81107cb8 <alt_busy_sleep+0x114>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
81107c8c:	e0fffd17 	ldw	r3,-12(fp)
81107c90:	008003f4 	movhi	r2,15
81107c94:	10909004 	addi	r2,r2,16960
81107c98:	1887383a 	mul	r3,r3,r2
81107c9c:	00817db4 	movhi	r2,1526
81107ca0:	10b84004 	addi	r2,r2,-7936
81107ca4:	10c7203a 	divu	r3,r2,r3
81107ca8:	e0bfff17 	ldw	r2,-4(fp)
81107cac:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
81107cb0:	10bfffc4 	addi	r2,r2,-1
81107cb4:	00bffe16 	blt	zero,r2,81107cb0 <__reset+0xfb0e7cb0>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
81107cb8:	0005883a 	mov	r2,zero
}
81107cbc:	e037883a 	mov	sp,fp
81107cc0:	df000017 	ldw	fp,0(sp)
81107cc4:	dec00104 	addi	sp,sp,4
81107cc8:	f800283a 	ret

81107ccc <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
81107ccc:	defffd04 	addi	sp,sp,-12
81107cd0:	df000215 	stw	fp,8(sp)
81107cd4:	df000204 	addi	fp,sp,8
81107cd8:	e13ffe15 	stw	r4,-8(fp)
81107cdc:	e17fff15 	stw	r5,-4(fp)
  {
    ALT_FLUSH_DATA(i);
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
81107ce0:	0001883a 	nop
81107ce4:	e037883a 	mov	sp,fp
81107ce8:	df000017 	ldw	fp,0(sp)
81107cec:	dec00104 	addi	sp,sp,4
81107cf0:	f800283a 	ret

81107cf4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81107cf4:	defffe04 	addi	sp,sp,-8
81107cf8:	dfc00115 	stw	ra,4(sp)
81107cfc:	df000015 	stw	fp,0(sp)
81107d00:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81107d04:	d0a00917 	ldw	r2,-32732(gp)
81107d08:	10000326 	beq	r2,zero,81107d18 <alt_get_errno+0x24>
81107d0c:	d0a00917 	ldw	r2,-32732(gp)
81107d10:	103ee83a 	callr	r2
81107d14:	00000106 	br	81107d1c <alt_get_errno+0x28>
81107d18:	d0a01504 	addi	r2,gp,-32684
}
81107d1c:	e037883a 	mov	sp,fp
81107d20:	dfc00117 	ldw	ra,4(sp)
81107d24:	df000017 	ldw	fp,0(sp)
81107d28:	dec00204 	addi	sp,sp,8
81107d2c:	f800283a 	ret

81107d30 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
81107d30:	defffa04 	addi	sp,sp,-24
81107d34:	dfc00515 	stw	ra,20(sp)
81107d38:	df000415 	stw	fp,16(sp)
81107d3c:	df000404 	addi	fp,sp,16
81107d40:	e13ffe15 	stw	r4,-8(fp)
81107d44:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
81107d48:	e0bffe17 	ldw	r2,-8(fp)
81107d4c:	10000326 	beq	r2,zero,81107d5c <alt_dev_llist_insert+0x2c>
81107d50:	e0bffe17 	ldw	r2,-8(fp)
81107d54:	10800217 	ldw	r2,8(r2)
81107d58:	1000061e 	bne	r2,zero,81107d74 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
81107d5c:	1107cf40 	call	81107cf4 <alt_get_errno>
81107d60:	1007883a 	mov	r3,r2
81107d64:	00800584 	movi	r2,22
81107d68:	18800015 	stw	r2,0(r3)
    return -EINVAL;
81107d6c:	00bffa84 	movi	r2,-22
81107d70:	00001306 	br	81107dc0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
81107d74:	e0bffe17 	ldw	r2,-8(fp)
81107d78:	e0ffff17 	ldw	r3,-4(fp)
81107d7c:	e0fffc15 	stw	r3,-16(fp)
81107d80:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
81107d84:	e0bffd17 	ldw	r2,-12(fp)
81107d88:	e0fffc17 	ldw	r3,-16(fp)
81107d8c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
81107d90:	e0bffc17 	ldw	r2,-16(fp)
81107d94:	10c00017 	ldw	r3,0(r2)
81107d98:	e0bffd17 	ldw	r2,-12(fp)
81107d9c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
81107da0:	e0bffc17 	ldw	r2,-16(fp)
81107da4:	10800017 	ldw	r2,0(r2)
81107da8:	e0fffd17 	ldw	r3,-12(fp)
81107dac:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
81107db0:	e0bffc17 	ldw	r2,-16(fp)
81107db4:	e0fffd17 	ldw	r3,-12(fp)
81107db8:	10c00015 	stw	r3,0(r2)

  return 0;  
81107dbc:	0005883a 	mov	r2,zero
}
81107dc0:	e037883a 	mov	sp,fp
81107dc4:	dfc00117 	ldw	ra,4(sp)
81107dc8:	df000017 	ldw	fp,0(sp)
81107dcc:	dec00204 	addi	sp,sp,8
81107dd0:	f800283a 	ret

81107dd4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
81107dd4:	defffd04 	addi	sp,sp,-12
81107dd8:	dfc00215 	stw	ra,8(sp)
81107ddc:	df000115 	stw	fp,4(sp)
81107de0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
81107de4:	00a04474 	movhi	r2,33041
81107de8:	10a48804 	addi	r2,r2,-28128
81107dec:	e0bfff15 	stw	r2,-4(fp)
81107df0:	00000606 	br	81107e0c <_do_ctors+0x38>
        (*ctor) (); 
81107df4:	e0bfff17 	ldw	r2,-4(fp)
81107df8:	10800017 	ldw	r2,0(r2)
81107dfc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
81107e00:	e0bfff17 	ldw	r2,-4(fp)
81107e04:	10bfff04 	addi	r2,r2,-4
81107e08:	e0bfff15 	stw	r2,-4(fp)
81107e0c:	e0ffff17 	ldw	r3,-4(fp)
81107e10:	00a04474 	movhi	r2,33041
81107e14:	10a48904 	addi	r2,r2,-28124
81107e18:	18bff62e 	bgeu	r3,r2,81107df4 <__reset+0xfb0e7df4>
        (*ctor) (); 
}
81107e1c:	0001883a 	nop
81107e20:	e037883a 	mov	sp,fp
81107e24:	dfc00117 	ldw	ra,4(sp)
81107e28:	df000017 	ldw	fp,0(sp)
81107e2c:	dec00204 	addi	sp,sp,8
81107e30:	f800283a 	ret

81107e34 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
81107e34:	defffd04 	addi	sp,sp,-12
81107e38:	dfc00215 	stw	ra,8(sp)
81107e3c:	df000115 	stw	fp,4(sp)
81107e40:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
81107e44:	00a04474 	movhi	r2,33041
81107e48:	10a48804 	addi	r2,r2,-28128
81107e4c:	e0bfff15 	stw	r2,-4(fp)
81107e50:	00000606 	br	81107e6c <_do_dtors+0x38>
        (*dtor) (); 
81107e54:	e0bfff17 	ldw	r2,-4(fp)
81107e58:	10800017 	ldw	r2,0(r2)
81107e5c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
81107e60:	e0bfff17 	ldw	r2,-4(fp)
81107e64:	10bfff04 	addi	r2,r2,-4
81107e68:	e0bfff15 	stw	r2,-4(fp)
81107e6c:	e0ffff17 	ldw	r3,-4(fp)
81107e70:	00a04474 	movhi	r2,33041
81107e74:	10a48904 	addi	r2,r2,-28124
81107e78:	18bff62e 	bgeu	r3,r2,81107e54 <__reset+0xfb0e7e54>
        (*dtor) (); 
}
81107e7c:	0001883a 	nop
81107e80:	e037883a 	mov	sp,fp
81107e84:	dfc00117 	ldw	ra,4(sp)
81107e88:	df000017 	ldw	fp,0(sp)
81107e8c:	dec00204 	addi	sp,sp,8
81107e90:	f800283a 	ret

81107e94 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
81107e94:	defffa04 	addi	sp,sp,-24
81107e98:	dfc00515 	stw	ra,20(sp)
81107e9c:	df000415 	stw	fp,16(sp)
81107ea0:	df000404 	addi	fp,sp,16
81107ea4:	e13ffe15 	stw	r4,-8(fp)
81107ea8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
81107eac:	e0bfff17 	ldw	r2,-4(fp)
81107eb0:	10800017 	ldw	r2,0(r2)
81107eb4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
81107eb8:	e13ffe17 	ldw	r4,-8(fp)
81107ebc:	1100c980 	call	81100c98 <strlen>
81107ec0:	10800044 	addi	r2,r2,1
81107ec4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
81107ec8:	00000d06 	br	81107f00 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
81107ecc:	e0bffc17 	ldw	r2,-16(fp)
81107ed0:	10800217 	ldw	r2,8(r2)
81107ed4:	e0fffd17 	ldw	r3,-12(fp)
81107ed8:	180d883a 	mov	r6,r3
81107edc:	e17ffe17 	ldw	r5,-8(fp)
81107ee0:	1009883a 	mov	r4,r2
81107ee4:	1108c1c0 	call	81108c1c <memcmp>
81107ee8:	1000021e 	bne	r2,zero,81107ef4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
81107eec:	e0bffc17 	ldw	r2,-16(fp)
81107ef0:	00000706 	br	81107f10 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
81107ef4:	e0bffc17 	ldw	r2,-16(fp)
81107ef8:	10800017 	ldw	r2,0(r2)
81107efc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
81107f00:	e0fffc17 	ldw	r3,-16(fp)
81107f04:	e0bfff17 	ldw	r2,-4(fp)
81107f08:	18bff01e 	bne	r3,r2,81107ecc <__reset+0xfb0e7ecc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
81107f0c:	0005883a 	mov	r2,zero
}
81107f10:	e037883a 	mov	sp,fp
81107f14:	dfc00117 	ldw	ra,4(sp)
81107f18:	df000017 	ldw	fp,0(sp)
81107f1c:	dec00204 	addi	sp,sp,8
81107f20:	f800283a 	ret

81107f24 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
81107f24:	defff904 	addi	sp,sp,-28
81107f28:	dfc00615 	stw	ra,24(sp)
81107f2c:	df000515 	stw	fp,20(sp)
81107f30:	df000504 	addi	fp,sp,20
81107f34:	e13ffc15 	stw	r4,-16(fp)
81107f38:	e17ffd15 	stw	r5,-12(fp)
81107f3c:	e1bffe15 	stw	r6,-8(fp)
81107f40:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
81107f44:	e0800217 	ldw	r2,8(fp)
81107f48:	d8800015 	stw	r2,0(sp)
81107f4c:	e1ffff17 	ldw	r7,-4(fp)
81107f50:	e1bffe17 	ldw	r6,-8(fp)
81107f54:	e17ffd17 	ldw	r5,-12(fp)
81107f58:	e13ffc17 	ldw	r4,-16(fp)
81107f5c:	11080d40 	call	811080d4 <alt_iic_isr_register>
}  
81107f60:	e037883a 	mov	sp,fp
81107f64:	dfc00117 	ldw	ra,4(sp)
81107f68:	df000017 	ldw	fp,0(sp)
81107f6c:	dec00204 	addi	sp,sp,8
81107f70:	f800283a 	ret

81107f74 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
81107f74:	defff904 	addi	sp,sp,-28
81107f78:	df000615 	stw	fp,24(sp)
81107f7c:	df000604 	addi	fp,sp,24
81107f80:	e13ffe15 	stw	r4,-8(fp)
81107f84:	e17fff15 	stw	r5,-4(fp)
81107f88:	e0bfff17 	ldw	r2,-4(fp)
81107f8c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81107f90:	0005303a 	rdctl	r2,status
81107f94:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81107f98:	e0fffb17 	ldw	r3,-20(fp)
81107f9c:	00bfff84 	movi	r2,-2
81107fa0:	1884703a 	and	r2,r3,r2
81107fa4:	1001703a 	wrctl	status,r2
  
  return context;
81107fa8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
81107fac:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
81107fb0:	00c00044 	movi	r3,1
81107fb4:	e0bffa17 	ldw	r2,-24(fp)
81107fb8:	1884983a 	sll	r2,r3,r2
81107fbc:	1007883a 	mov	r3,r2
81107fc0:	d0a01917 	ldw	r2,-32668(gp)
81107fc4:	1884b03a 	or	r2,r3,r2
81107fc8:	d0a01915 	stw	r2,-32668(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
81107fcc:	d0a01917 	ldw	r2,-32668(gp)
81107fd0:	100170fa 	wrctl	ienable,r2
81107fd4:	e0bffc17 	ldw	r2,-16(fp)
81107fd8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81107fdc:	e0bffd17 	ldw	r2,-12(fp)
81107fe0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
81107fe4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
81107fe8:	0001883a 	nop
}
81107fec:	e037883a 	mov	sp,fp
81107ff0:	df000017 	ldw	fp,0(sp)
81107ff4:	dec00104 	addi	sp,sp,4
81107ff8:	f800283a 	ret

81107ffc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
81107ffc:	defff904 	addi	sp,sp,-28
81108000:	df000615 	stw	fp,24(sp)
81108004:	df000604 	addi	fp,sp,24
81108008:	e13ffe15 	stw	r4,-8(fp)
8110800c:	e17fff15 	stw	r5,-4(fp)
81108010:	e0bfff17 	ldw	r2,-4(fp)
81108014:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81108018:	0005303a 	rdctl	r2,status
8110801c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81108020:	e0fffb17 	ldw	r3,-20(fp)
81108024:	00bfff84 	movi	r2,-2
81108028:	1884703a 	and	r2,r3,r2
8110802c:	1001703a 	wrctl	status,r2
  
  return context;
81108030:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
81108034:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
81108038:	00c00044 	movi	r3,1
8110803c:	e0bffa17 	ldw	r2,-24(fp)
81108040:	1884983a 	sll	r2,r3,r2
81108044:	0084303a 	nor	r2,zero,r2
81108048:	1007883a 	mov	r3,r2
8110804c:	d0a01917 	ldw	r2,-32668(gp)
81108050:	1884703a 	and	r2,r3,r2
81108054:	d0a01915 	stw	r2,-32668(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
81108058:	d0a01917 	ldw	r2,-32668(gp)
8110805c:	100170fa 	wrctl	ienable,r2
81108060:	e0bffc17 	ldw	r2,-16(fp)
81108064:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81108068:	e0bffd17 	ldw	r2,-12(fp)
8110806c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
81108070:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
81108074:	0001883a 	nop
}
81108078:	e037883a 	mov	sp,fp
8110807c:	df000017 	ldw	fp,0(sp)
81108080:	dec00104 	addi	sp,sp,4
81108084:	f800283a 	ret

81108088 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
81108088:	defffc04 	addi	sp,sp,-16
8110808c:	df000315 	stw	fp,12(sp)
81108090:	df000304 	addi	fp,sp,12
81108094:	e13ffe15 	stw	r4,-8(fp)
81108098:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
8110809c:	000530fa 	rdctl	r2,ienable
811080a0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
811080a4:	00c00044 	movi	r3,1
811080a8:	e0bfff17 	ldw	r2,-4(fp)
811080ac:	1884983a 	sll	r2,r3,r2
811080b0:	1007883a 	mov	r3,r2
811080b4:	e0bffd17 	ldw	r2,-12(fp)
811080b8:	1884703a 	and	r2,r3,r2
811080bc:	1004c03a 	cmpne	r2,r2,zero
811080c0:	10803fcc 	andi	r2,r2,255
}
811080c4:	e037883a 	mov	sp,fp
811080c8:	df000017 	ldw	fp,0(sp)
811080cc:	dec00104 	addi	sp,sp,4
811080d0:	f800283a 	ret

811080d4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
811080d4:	defff504 	addi	sp,sp,-44
811080d8:	dfc00a15 	stw	ra,40(sp)
811080dc:	df000915 	stw	fp,36(sp)
811080e0:	df000904 	addi	fp,sp,36
811080e4:	e13ffc15 	stw	r4,-16(fp)
811080e8:	e17ffd15 	stw	r5,-12(fp)
811080ec:	e1bffe15 	stw	r6,-8(fp)
811080f0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
811080f4:	00bffa84 	movi	r2,-22
811080f8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
811080fc:	e0bffd17 	ldw	r2,-12(fp)
81108100:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
81108104:	e0bff817 	ldw	r2,-32(fp)
81108108:	10800808 	cmpgei	r2,r2,32
8110810c:	1000271e 	bne	r2,zero,811081ac <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81108110:	0005303a 	rdctl	r2,status
81108114:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81108118:	e0fffb17 	ldw	r3,-20(fp)
8110811c:	00bfff84 	movi	r2,-2
81108120:	1884703a 	and	r2,r3,r2
81108124:	1001703a 	wrctl	status,r2
  
  return context;
81108128:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
8110812c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
81108130:	00a04474 	movhi	r2,33041
81108134:	10ac0f04 	addi	r2,r2,-20420
81108138:	e0fff817 	ldw	r3,-32(fp)
8110813c:	180690fa 	slli	r3,r3,3
81108140:	10c5883a 	add	r2,r2,r3
81108144:	e0fffe17 	ldw	r3,-8(fp)
81108148:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
8110814c:	00a04474 	movhi	r2,33041
81108150:	10ac0f04 	addi	r2,r2,-20420
81108154:	e0fff817 	ldw	r3,-32(fp)
81108158:	180690fa 	slli	r3,r3,3
8110815c:	10c5883a 	add	r2,r2,r3
81108160:	10800104 	addi	r2,r2,4
81108164:	e0ffff17 	ldw	r3,-4(fp)
81108168:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
8110816c:	e0bffe17 	ldw	r2,-8(fp)
81108170:	10000526 	beq	r2,zero,81108188 <alt_iic_isr_register+0xb4>
81108174:	e0bff817 	ldw	r2,-32(fp)
81108178:	100b883a 	mov	r5,r2
8110817c:	e13ffc17 	ldw	r4,-16(fp)
81108180:	1107f740 	call	81107f74 <alt_ic_irq_enable>
81108184:	00000406 	br	81108198 <alt_iic_isr_register+0xc4>
81108188:	e0bff817 	ldw	r2,-32(fp)
8110818c:	100b883a 	mov	r5,r2
81108190:	e13ffc17 	ldw	r4,-16(fp)
81108194:	1107ffc0 	call	81107ffc <alt_ic_irq_disable>
81108198:	e0bff715 	stw	r2,-36(fp)
8110819c:	e0bffa17 	ldw	r2,-24(fp)
811081a0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811081a4:	e0bff917 	ldw	r2,-28(fp)
811081a8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
811081ac:	e0bff717 	ldw	r2,-36(fp)
}
811081b0:	e037883a 	mov	sp,fp
811081b4:	dfc00117 	ldw	ra,4(sp)
811081b8:	df000017 	ldw	fp,0(sp)
811081bc:	dec00204 	addi	sp,sp,8
811081c0:	f800283a 	ret

811081c4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
811081c4:	defff904 	addi	sp,sp,-28
811081c8:	dfc00615 	stw	ra,24(sp)
811081cc:	df000515 	stw	fp,20(sp)
811081d0:	df000504 	addi	fp,sp,20
811081d4:	e13ffc15 	stw	r4,-16(fp)
811081d8:	e17ffd15 	stw	r5,-12(fp)
811081dc:	e1bffe15 	stw	r6,-8(fp)
811081e0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
811081e4:	e1bfff17 	ldw	r6,-4(fp)
811081e8:	e17ffe17 	ldw	r5,-8(fp)
811081ec:	e13ffd17 	ldw	r4,-12(fp)
811081f0:	11084040 	call	81108404 <open>
811081f4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
811081f8:	e0bffb17 	ldw	r2,-20(fp)
811081fc:	10001c16 	blt	r2,zero,81108270 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
81108200:	00a04474 	movhi	r2,33041
81108204:	10a74004 	addi	r2,r2,-25344
81108208:	e0fffb17 	ldw	r3,-20(fp)
8110820c:	18c00324 	muli	r3,r3,12
81108210:	10c5883a 	add	r2,r2,r3
81108214:	10c00017 	ldw	r3,0(r2)
81108218:	e0bffc17 	ldw	r2,-16(fp)
8110821c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
81108220:	00a04474 	movhi	r2,33041
81108224:	10a74004 	addi	r2,r2,-25344
81108228:	e0fffb17 	ldw	r3,-20(fp)
8110822c:	18c00324 	muli	r3,r3,12
81108230:	10c5883a 	add	r2,r2,r3
81108234:	10800104 	addi	r2,r2,4
81108238:	10c00017 	ldw	r3,0(r2)
8110823c:	e0bffc17 	ldw	r2,-16(fp)
81108240:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
81108244:	00a04474 	movhi	r2,33041
81108248:	10a74004 	addi	r2,r2,-25344
8110824c:	e0fffb17 	ldw	r3,-20(fp)
81108250:	18c00324 	muli	r3,r3,12
81108254:	10c5883a 	add	r2,r2,r3
81108258:	10800204 	addi	r2,r2,8
8110825c:	10c00017 	ldw	r3,0(r2)
81108260:	e0bffc17 	ldw	r2,-16(fp)
81108264:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
81108268:	e13ffb17 	ldw	r4,-20(fp)
8110826c:	1103f9c0 	call	81103f9c <alt_release_fd>
  }
} 
81108270:	0001883a 	nop
81108274:	e037883a 	mov	sp,fp
81108278:	dfc00117 	ldw	ra,4(sp)
8110827c:	df000017 	ldw	fp,0(sp)
81108280:	dec00204 	addi	sp,sp,8
81108284:	f800283a 	ret

81108288 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
81108288:	defffb04 	addi	sp,sp,-20
8110828c:	dfc00415 	stw	ra,16(sp)
81108290:	df000315 	stw	fp,12(sp)
81108294:	df000304 	addi	fp,sp,12
81108298:	e13ffd15 	stw	r4,-12(fp)
8110829c:	e17ffe15 	stw	r5,-8(fp)
811082a0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
811082a4:	01c07fc4 	movi	r7,511
811082a8:	01800044 	movi	r6,1
811082ac:	e17ffd17 	ldw	r5,-12(fp)
811082b0:	01204474 	movhi	r4,33041
811082b4:	21274304 	addi	r4,r4,-25332
811082b8:	11081c40 	call	811081c4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
811082bc:	01c07fc4 	movi	r7,511
811082c0:	000d883a 	mov	r6,zero
811082c4:	e17ffe17 	ldw	r5,-8(fp)
811082c8:	01204474 	movhi	r4,33041
811082cc:	21274004 	addi	r4,r4,-25344
811082d0:	11081c40 	call	811081c4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
811082d4:	01c07fc4 	movi	r7,511
811082d8:	01800044 	movi	r6,1
811082dc:	e17fff17 	ldw	r5,-4(fp)
811082e0:	01204474 	movhi	r4,33041
811082e4:	21274604 	addi	r4,r4,-25320
811082e8:	11081c40 	call	811081c4 <alt_open_fd>
}  
811082ec:	0001883a 	nop
811082f0:	e037883a 	mov	sp,fp
811082f4:	dfc00117 	ldw	ra,4(sp)
811082f8:	df000017 	ldw	fp,0(sp)
811082fc:	dec00204 	addi	sp,sp,8
81108300:	f800283a 	ret

81108304 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81108304:	defffe04 	addi	sp,sp,-8
81108308:	dfc00115 	stw	ra,4(sp)
8110830c:	df000015 	stw	fp,0(sp)
81108310:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81108314:	d0a00917 	ldw	r2,-32732(gp)
81108318:	10000326 	beq	r2,zero,81108328 <alt_get_errno+0x24>
8110831c:	d0a00917 	ldw	r2,-32732(gp)
81108320:	103ee83a 	callr	r2
81108324:	00000106 	br	8110832c <alt_get_errno+0x28>
81108328:	d0a01504 	addi	r2,gp,-32684
}
8110832c:	e037883a 	mov	sp,fp
81108330:	dfc00117 	ldw	ra,4(sp)
81108334:	df000017 	ldw	fp,0(sp)
81108338:	dec00204 	addi	sp,sp,8
8110833c:	f800283a 	ret

81108340 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
81108340:	defffd04 	addi	sp,sp,-12
81108344:	df000215 	stw	fp,8(sp)
81108348:	df000204 	addi	fp,sp,8
8110834c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
81108350:	e0bfff17 	ldw	r2,-4(fp)
81108354:	10800217 	ldw	r2,8(r2)
81108358:	10d00034 	orhi	r3,r2,16384
8110835c:	e0bfff17 	ldw	r2,-4(fp)
81108360:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
81108364:	e03ffe15 	stw	zero,-8(fp)
81108368:	00001d06 	br	811083e0 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
8110836c:	00a04474 	movhi	r2,33041
81108370:	10a74004 	addi	r2,r2,-25344
81108374:	e0fffe17 	ldw	r3,-8(fp)
81108378:	18c00324 	muli	r3,r3,12
8110837c:	10c5883a 	add	r2,r2,r3
81108380:	10c00017 	ldw	r3,0(r2)
81108384:	e0bfff17 	ldw	r2,-4(fp)
81108388:	10800017 	ldw	r2,0(r2)
8110838c:	1880111e 	bne	r3,r2,811083d4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
81108390:	00a04474 	movhi	r2,33041
81108394:	10a74004 	addi	r2,r2,-25344
81108398:	e0fffe17 	ldw	r3,-8(fp)
8110839c:	18c00324 	muli	r3,r3,12
811083a0:	10c5883a 	add	r2,r2,r3
811083a4:	10800204 	addi	r2,r2,8
811083a8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
811083ac:	1000090e 	bge	r2,zero,811083d4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
811083b0:	e0bffe17 	ldw	r2,-8(fp)
811083b4:	10c00324 	muli	r3,r2,12
811083b8:	00a04474 	movhi	r2,33041
811083bc:	10a74004 	addi	r2,r2,-25344
811083c0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
811083c4:	e0bfff17 	ldw	r2,-4(fp)
811083c8:	18800226 	beq	r3,r2,811083d4 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
811083cc:	00bffcc4 	movi	r2,-13
811083d0:	00000806 	br	811083f4 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
811083d4:	e0bffe17 	ldw	r2,-8(fp)
811083d8:	10800044 	addi	r2,r2,1
811083dc:	e0bffe15 	stw	r2,-8(fp)
811083e0:	d0a00817 	ldw	r2,-32736(gp)
811083e4:	1007883a 	mov	r3,r2
811083e8:	e0bffe17 	ldw	r2,-8(fp)
811083ec:	18bfdf2e 	bgeu	r3,r2,8110836c <__reset+0xfb0e836c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
811083f0:	0005883a 	mov	r2,zero
}
811083f4:	e037883a 	mov	sp,fp
811083f8:	df000017 	ldw	fp,0(sp)
811083fc:	dec00104 	addi	sp,sp,4
81108400:	f800283a 	ret

81108404 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
81108404:	defff604 	addi	sp,sp,-40
81108408:	dfc00915 	stw	ra,36(sp)
8110840c:	df000815 	stw	fp,32(sp)
81108410:	df000804 	addi	fp,sp,32
81108414:	e13ffd15 	stw	r4,-12(fp)
81108418:	e17ffe15 	stw	r5,-8(fp)
8110841c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
81108420:	00bfffc4 	movi	r2,-1
81108424:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
81108428:	00bffb44 	movi	r2,-19
8110842c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
81108430:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
81108434:	d1600604 	addi	r5,gp,-32744
81108438:	e13ffd17 	ldw	r4,-12(fp)
8110843c:	1107e940 	call	81107e94 <alt_find_dev>
81108440:	e0bff815 	stw	r2,-32(fp)
81108444:	e0bff817 	ldw	r2,-32(fp)
81108448:	1000051e 	bne	r2,zero,81108460 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
8110844c:	e13ffd17 	ldw	r4,-12(fp)
81108450:	11089880 	call	81108988 <alt_find_file>
81108454:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
81108458:	00800044 	movi	r2,1
8110845c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
81108460:	e0bff817 	ldw	r2,-32(fp)
81108464:	10002926 	beq	r2,zero,8110850c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
81108468:	e13ff817 	ldw	r4,-32(fp)
8110846c:	1108a900 	call	81108a90 <alt_get_fd>
81108470:	e0bff915 	stw	r2,-28(fp)
81108474:	e0bff917 	ldw	r2,-28(fp)
81108478:	1000030e 	bge	r2,zero,81108488 <open+0x84>
    {
      status = index;
8110847c:	e0bff917 	ldw	r2,-28(fp)
81108480:	e0bffa15 	stw	r2,-24(fp)
81108484:	00002306 	br	81108514 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
81108488:	e0bff917 	ldw	r2,-28(fp)
8110848c:	10c00324 	muli	r3,r2,12
81108490:	00a04474 	movhi	r2,33041
81108494:	10a74004 	addi	r2,r2,-25344
81108498:	1885883a 	add	r2,r3,r2
8110849c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
811084a0:	e0fffe17 	ldw	r3,-8(fp)
811084a4:	00900034 	movhi	r2,16384
811084a8:	10bfffc4 	addi	r2,r2,-1
811084ac:	1886703a 	and	r3,r3,r2
811084b0:	e0bffc17 	ldw	r2,-16(fp)
811084b4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
811084b8:	e0bffb17 	ldw	r2,-20(fp)
811084bc:	1000051e 	bne	r2,zero,811084d4 <open+0xd0>
811084c0:	e13ffc17 	ldw	r4,-16(fp)
811084c4:	11083400 	call	81108340 <alt_file_locked>
811084c8:	e0bffa15 	stw	r2,-24(fp)
811084cc:	e0bffa17 	ldw	r2,-24(fp)
811084d0:	10001016 	blt	r2,zero,81108514 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
811084d4:	e0bff817 	ldw	r2,-32(fp)
811084d8:	10800317 	ldw	r2,12(r2)
811084dc:	10000826 	beq	r2,zero,81108500 <open+0xfc>
811084e0:	e0bff817 	ldw	r2,-32(fp)
811084e4:	10800317 	ldw	r2,12(r2)
811084e8:	e1ffff17 	ldw	r7,-4(fp)
811084ec:	e1bffe17 	ldw	r6,-8(fp)
811084f0:	e17ffd17 	ldw	r5,-12(fp)
811084f4:	e13ffc17 	ldw	r4,-16(fp)
811084f8:	103ee83a 	callr	r2
811084fc:	00000106 	br	81108504 <open+0x100>
81108500:	0005883a 	mov	r2,zero
81108504:	e0bffa15 	stw	r2,-24(fp)
81108508:	00000206 	br	81108514 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
8110850c:	00bffb44 	movi	r2,-19
81108510:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
81108514:	e0bffa17 	ldw	r2,-24(fp)
81108518:	1000090e 	bge	r2,zero,81108540 <open+0x13c>
  {
    alt_release_fd (index);  
8110851c:	e13ff917 	ldw	r4,-28(fp)
81108520:	1103f9c0 	call	81103f9c <alt_release_fd>
    ALT_ERRNO = -status;
81108524:	11083040 	call	81108304 <alt_get_errno>
81108528:	1007883a 	mov	r3,r2
8110852c:	e0bffa17 	ldw	r2,-24(fp)
81108530:	0085c83a 	sub	r2,zero,r2
81108534:	18800015 	stw	r2,0(r3)
    return -1;
81108538:	00bfffc4 	movi	r2,-1
8110853c:	00000106 	br	81108544 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
81108540:	e0bff917 	ldw	r2,-28(fp)
}
81108544:	e037883a 	mov	sp,fp
81108548:	dfc00117 	ldw	ra,4(sp)
8110854c:	df000017 	ldw	fp,0(sp)
81108550:	dec00204 	addi	sp,sp,8
81108554:	f800283a 	ret

81108558 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
81108558:	defff204 	addi	sp,sp,-56
8110855c:	dfc00a15 	stw	ra,40(sp)
81108560:	df000915 	stw	fp,36(sp)
81108564:	df000904 	addi	fp,sp,36
81108568:	e13fff15 	stw	r4,-4(fp)
8110856c:	e1400215 	stw	r5,8(fp)
81108570:	e1800315 	stw	r6,12(fp)
81108574:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
81108578:	e0800204 	addi	r2,fp,8
8110857c:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
81108580:	e0bfff17 	ldw	r2,-4(fp)
81108584:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
81108588:	00006f06 	br	81108748 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
8110858c:	e0bff807 	ldb	r2,-32(fp)
81108590:	10800960 	cmpeqi	r2,r2,37
81108594:	1000041e 	bne	r2,zero,811085a8 <alt_printf+0x50>
        {
            alt_putchar(c);
81108598:	e0bff807 	ldb	r2,-32(fp)
8110859c:	1009883a 	mov	r4,r2
811085a0:	11087840 	call	81108784 <alt_putchar>
811085a4:	00006806 	br	81108748 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
811085a8:	e0bff717 	ldw	r2,-36(fp)
811085ac:	10c00044 	addi	r3,r2,1
811085b0:	e0fff715 	stw	r3,-36(fp)
811085b4:	10800003 	ldbu	r2,0(r2)
811085b8:	e0bff805 	stb	r2,-32(fp)
811085bc:	e0bff807 	ldb	r2,-32(fp)
811085c0:	10006926 	beq	r2,zero,81108768 <alt_printf+0x210>
            {
                if (c == '%')
811085c4:	e0bff807 	ldb	r2,-32(fp)
811085c8:	10800958 	cmpnei	r2,r2,37
811085cc:	1000041e 	bne	r2,zero,811085e0 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
811085d0:	e0bff807 	ldb	r2,-32(fp)
811085d4:	1009883a 	mov	r4,r2
811085d8:	11087840 	call	81108784 <alt_putchar>
811085dc:	00005a06 	br	81108748 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
811085e0:	e0bff807 	ldb	r2,-32(fp)
811085e4:	108018d8 	cmpnei	r2,r2,99
811085e8:	1000081e 	bne	r2,zero,8110860c <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
811085ec:	e0bffe17 	ldw	r2,-8(fp)
811085f0:	10c00104 	addi	r3,r2,4
811085f4:	e0fffe15 	stw	r3,-8(fp)
811085f8:	10800017 	ldw	r2,0(r2)
811085fc:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
81108600:	e13ffd17 	ldw	r4,-12(fp)
81108604:	11087840 	call	81108784 <alt_putchar>
81108608:	00004f06 	br	81108748 <alt_printf+0x1f0>
                }
                else if (c == 'x')
8110860c:	e0bff807 	ldb	r2,-32(fp)
81108610:	10801e18 	cmpnei	r2,r2,120
81108614:	1000341e 	bne	r2,zero,811086e8 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
81108618:	e0bffe17 	ldw	r2,-8(fp)
8110861c:	10c00104 	addi	r3,r2,4
81108620:	e0fffe15 	stw	r3,-8(fp)
81108624:	10800017 	ldw	r2,0(r2)
81108628:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
8110862c:	e0bffb17 	ldw	r2,-20(fp)
81108630:	1000031e 	bne	r2,zero,81108640 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
81108634:	01000c04 	movi	r4,48
81108638:	11087840 	call	81108784 <alt_putchar>
                        continue;
8110863c:	00004206 	br	81108748 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
81108640:	00800704 	movi	r2,28
81108644:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
81108648:	00000306 	br	81108658 <alt_printf+0x100>
                        digit_shift -= 4;
8110864c:	e0bff917 	ldw	r2,-28(fp)
81108650:	10bfff04 	addi	r2,r2,-4
81108654:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
81108658:	00c003c4 	movi	r3,15
8110865c:	e0bff917 	ldw	r2,-28(fp)
81108660:	1884983a 	sll	r2,r3,r2
81108664:	1007883a 	mov	r3,r2
81108668:	e0bffb17 	ldw	r2,-20(fp)
8110866c:	1884703a 	and	r2,r3,r2
81108670:	103ff626 	beq	r2,zero,8110864c <__reset+0xfb0e864c>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
81108674:	00001906 	br	811086dc <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
81108678:	00c003c4 	movi	r3,15
8110867c:	e0bff917 	ldw	r2,-28(fp)
81108680:	1884983a 	sll	r2,r3,r2
81108684:	1007883a 	mov	r3,r2
81108688:	e0bffb17 	ldw	r2,-20(fp)
8110868c:	1886703a 	and	r3,r3,r2
81108690:	e0bff917 	ldw	r2,-28(fp)
81108694:	1884d83a 	srl	r2,r3,r2
81108698:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
8110869c:	e0bffc17 	ldw	r2,-16(fp)
811086a0:	108002a8 	cmpgeui	r2,r2,10
811086a4:	1000041e 	bne	r2,zero,811086b8 <alt_printf+0x160>
                            c = '0' + digit;
811086a8:	e0bffc17 	ldw	r2,-16(fp)
811086ac:	10800c04 	addi	r2,r2,48
811086b0:	e0bff805 	stb	r2,-32(fp)
811086b4:	00000306 	br	811086c4 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
811086b8:	e0bffc17 	ldw	r2,-16(fp)
811086bc:	108015c4 	addi	r2,r2,87
811086c0:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
811086c4:	e0bff807 	ldb	r2,-32(fp)
811086c8:	1009883a 	mov	r4,r2
811086cc:	11087840 	call	81108784 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
811086d0:	e0bff917 	ldw	r2,-28(fp)
811086d4:	10bfff04 	addi	r2,r2,-4
811086d8:	e0bff915 	stw	r2,-28(fp)
811086dc:	e0bff917 	ldw	r2,-28(fp)
811086e0:	103fe50e 	bge	r2,zero,81108678 <__reset+0xfb0e8678>
811086e4:	00001806 	br	81108748 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
811086e8:	e0bff807 	ldb	r2,-32(fp)
811086ec:	10801cd8 	cmpnei	r2,r2,115
811086f0:	1000151e 	bne	r2,zero,81108748 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
811086f4:	e0bffe17 	ldw	r2,-8(fp)
811086f8:	10c00104 	addi	r3,r2,4
811086fc:	e0fffe15 	stw	r3,-8(fp)
81108700:	10800017 	ldw	r2,0(r2)
81108704:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
81108708:	00000906 	br	81108730 <alt_printf+0x1d8>
                      alt_putchar(*s++);
8110870c:	e0bffa17 	ldw	r2,-24(fp)
81108710:	10c00044 	addi	r3,r2,1
81108714:	e0fffa15 	stw	r3,-24(fp)
81108718:	10800003 	ldbu	r2,0(r2)
8110871c:	10803fcc 	andi	r2,r2,255
81108720:	1080201c 	xori	r2,r2,128
81108724:	10bfe004 	addi	r2,r2,-128
81108728:	1009883a 	mov	r4,r2
8110872c:	11087840 	call	81108784 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
81108730:	e0bffa17 	ldw	r2,-24(fp)
81108734:	10800003 	ldbu	r2,0(r2)
81108738:	10803fcc 	andi	r2,r2,255
8110873c:	1080201c 	xori	r2,r2,128
81108740:	10bfe004 	addi	r2,r2,-128
81108744:	103ff11e 	bne	r2,zero,8110870c <__reset+0xfb0e870c>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
81108748:	e0bff717 	ldw	r2,-36(fp)
8110874c:	10c00044 	addi	r3,r2,1
81108750:	e0fff715 	stw	r3,-36(fp)
81108754:	10800003 	ldbu	r2,0(r2)
81108758:	e0bff805 	stb	r2,-32(fp)
8110875c:	e0bff807 	ldb	r2,-32(fp)
81108760:	103f8a1e 	bne	r2,zero,8110858c <__reset+0xfb0e858c>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
81108764:	00000106 	br	8110876c <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
81108768:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
8110876c:	0001883a 	nop
81108770:	e037883a 	mov	sp,fp
81108774:	dfc00117 	ldw	ra,4(sp)
81108778:	df000017 	ldw	fp,0(sp)
8110877c:	dec00504 	addi	sp,sp,20
81108780:	f800283a 	ret

81108784 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
81108784:	defffd04 	addi	sp,sp,-12
81108788:	dfc00215 	stw	ra,8(sp)
8110878c:	df000115 	stw	fp,4(sp)
81108790:	df000104 	addi	fp,sp,4
81108794:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
81108798:	d0a00117 	ldw	r2,-32764(gp)
8110879c:	10800217 	ldw	r2,8(r2)
811087a0:	100b883a 	mov	r5,r2
811087a4:	e13fff17 	ldw	r4,-4(fp)
811087a8:	1108d380 	call	81108d38 <putc>
#endif
#endif
}
811087ac:	e037883a 	mov	sp,fp
811087b0:	dfc00117 	ldw	ra,4(sp)
811087b4:	df000017 	ldw	fp,0(sp)
811087b8:	dec00204 	addi	sp,sp,8
811087bc:	f800283a 	ret

811087c0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
811087c0:	defffa04 	addi	sp,sp,-24
811087c4:	df000515 	stw	fp,20(sp)
811087c8:	df000504 	addi	fp,sp,20
811087cc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811087d0:	0005303a 	rdctl	r2,status
811087d4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811087d8:	e0fffc17 	ldw	r3,-16(fp)
811087dc:	00bfff84 	movi	r2,-2
811087e0:	1884703a 	and	r2,r3,r2
811087e4:	1001703a 	wrctl	status,r2
  
  return context;
811087e8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
811087ec:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
811087f0:	e0bfff17 	ldw	r2,-4(fp)
811087f4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
811087f8:	e0bffd17 	ldw	r2,-12(fp)
811087fc:	10800017 	ldw	r2,0(r2)
81108800:	e0fffd17 	ldw	r3,-12(fp)
81108804:	18c00117 	ldw	r3,4(r3)
81108808:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
8110880c:	e0bffd17 	ldw	r2,-12(fp)
81108810:	10800117 	ldw	r2,4(r2)
81108814:	e0fffd17 	ldw	r3,-12(fp)
81108818:	18c00017 	ldw	r3,0(r3)
8110881c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
81108820:	e0bffd17 	ldw	r2,-12(fp)
81108824:	e0fffd17 	ldw	r3,-12(fp)
81108828:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
8110882c:	e0bffd17 	ldw	r2,-12(fp)
81108830:	e0fffd17 	ldw	r3,-12(fp)
81108834:	10c00015 	stw	r3,0(r2)
81108838:	e0bffb17 	ldw	r2,-20(fp)
8110883c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81108840:	e0bffe17 	ldw	r2,-8(fp)
81108844:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
81108848:	0001883a 	nop
8110884c:	e037883a 	mov	sp,fp
81108850:	df000017 	ldw	fp,0(sp)
81108854:	dec00104 	addi	sp,sp,4
81108858:	f800283a 	ret

8110885c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
8110885c:	defffb04 	addi	sp,sp,-20
81108860:	dfc00415 	stw	ra,16(sp)
81108864:	df000315 	stw	fp,12(sp)
81108868:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
8110886c:	d0a01017 	ldw	r2,-32704(gp)
81108870:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
81108874:	d0a01b17 	ldw	r2,-32660(gp)
81108878:	10800044 	addi	r2,r2,1
8110887c:	d0a01b15 	stw	r2,-32660(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
81108880:	00002e06 	br	8110893c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
81108884:	e0bffd17 	ldw	r2,-12(fp)
81108888:	10800017 	ldw	r2,0(r2)
8110888c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
81108890:	e0bffd17 	ldw	r2,-12(fp)
81108894:	10800403 	ldbu	r2,16(r2)
81108898:	10803fcc 	andi	r2,r2,255
8110889c:	10000426 	beq	r2,zero,811088b0 <alt_tick+0x54>
811088a0:	d0a01b17 	ldw	r2,-32660(gp)
811088a4:	1000021e 	bne	r2,zero,811088b0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
811088a8:	e0bffd17 	ldw	r2,-12(fp)
811088ac:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
811088b0:	e0bffd17 	ldw	r2,-12(fp)
811088b4:	10800217 	ldw	r2,8(r2)
811088b8:	d0e01b17 	ldw	r3,-32660(gp)
811088bc:	18801d36 	bltu	r3,r2,81108934 <alt_tick+0xd8>
811088c0:	e0bffd17 	ldw	r2,-12(fp)
811088c4:	10800403 	ldbu	r2,16(r2)
811088c8:	10803fcc 	andi	r2,r2,255
811088cc:	1000191e 	bne	r2,zero,81108934 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
811088d0:	e0bffd17 	ldw	r2,-12(fp)
811088d4:	10800317 	ldw	r2,12(r2)
811088d8:	e0fffd17 	ldw	r3,-12(fp)
811088dc:	18c00517 	ldw	r3,20(r3)
811088e0:	1809883a 	mov	r4,r3
811088e4:	103ee83a 	callr	r2
811088e8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
811088ec:	e0bfff17 	ldw	r2,-4(fp)
811088f0:	1000031e 	bne	r2,zero,81108900 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
811088f4:	e13ffd17 	ldw	r4,-12(fp)
811088f8:	11087c00 	call	811087c0 <alt_alarm_stop>
811088fc:	00000d06 	br	81108934 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
81108900:	e0bffd17 	ldw	r2,-12(fp)
81108904:	10c00217 	ldw	r3,8(r2)
81108908:	e0bfff17 	ldw	r2,-4(fp)
8110890c:	1887883a 	add	r3,r3,r2
81108910:	e0bffd17 	ldw	r2,-12(fp)
81108914:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
81108918:	e0bffd17 	ldw	r2,-12(fp)
8110891c:	10c00217 	ldw	r3,8(r2)
81108920:	d0a01b17 	ldw	r2,-32660(gp)
81108924:	1880032e 	bgeu	r3,r2,81108934 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
81108928:	e0bffd17 	ldw	r2,-12(fp)
8110892c:	00c00044 	movi	r3,1
81108930:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
81108934:	e0bffe17 	ldw	r2,-8(fp)
81108938:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
8110893c:	e0fffd17 	ldw	r3,-12(fp)
81108940:	d0a01004 	addi	r2,gp,-32704
81108944:	18bfcf1e 	bne	r3,r2,81108884 <__reset+0xfb0e8884>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
81108948:	0001883a 	nop
}
8110894c:	0001883a 	nop
81108950:	e037883a 	mov	sp,fp
81108954:	dfc00117 	ldw	ra,4(sp)
81108958:	df000017 	ldw	fp,0(sp)
8110895c:	dec00204 	addi	sp,sp,8
81108960:	f800283a 	ret

81108964 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
81108964:	deffff04 	addi	sp,sp,-4
81108968:	df000015 	stw	fp,0(sp)
8110896c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
81108970:	000170fa 	wrctl	ienable,zero
}
81108974:	0001883a 	nop
81108978:	e037883a 	mov	sp,fp
8110897c:	df000017 	ldw	fp,0(sp)
81108980:	dec00104 	addi	sp,sp,4
81108984:	f800283a 	ret

81108988 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
81108988:	defffb04 	addi	sp,sp,-20
8110898c:	dfc00415 	stw	ra,16(sp)
81108990:	df000315 	stw	fp,12(sp)
81108994:	df000304 	addi	fp,sp,12
81108998:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
8110899c:	d0a00417 	ldw	r2,-32752(gp)
811089a0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
811089a4:	00003106 	br	81108a6c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
811089a8:	e0bffd17 	ldw	r2,-12(fp)
811089ac:	10800217 	ldw	r2,8(r2)
811089b0:	1009883a 	mov	r4,r2
811089b4:	1100c980 	call	81100c98 <strlen>
811089b8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
811089bc:	e0bffd17 	ldw	r2,-12(fp)
811089c0:	10c00217 	ldw	r3,8(r2)
811089c4:	e0bffe17 	ldw	r2,-8(fp)
811089c8:	10bfffc4 	addi	r2,r2,-1
811089cc:	1885883a 	add	r2,r3,r2
811089d0:	10800003 	ldbu	r2,0(r2)
811089d4:	10803fcc 	andi	r2,r2,255
811089d8:	1080201c 	xori	r2,r2,128
811089dc:	10bfe004 	addi	r2,r2,-128
811089e0:	10800bd8 	cmpnei	r2,r2,47
811089e4:	1000031e 	bne	r2,zero,811089f4 <alt_find_file+0x6c>
    {
      len -= 1;
811089e8:	e0bffe17 	ldw	r2,-8(fp)
811089ec:	10bfffc4 	addi	r2,r2,-1
811089f0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
811089f4:	e0bffe17 	ldw	r2,-8(fp)
811089f8:	e0ffff17 	ldw	r3,-4(fp)
811089fc:	1885883a 	add	r2,r3,r2
81108a00:	10800003 	ldbu	r2,0(r2)
81108a04:	10803fcc 	andi	r2,r2,255
81108a08:	1080201c 	xori	r2,r2,128
81108a0c:	10bfe004 	addi	r2,r2,-128
81108a10:	10800be0 	cmpeqi	r2,r2,47
81108a14:	1000081e 	bne	r2,zero,81108a38 <alt_find_file+0xb0>
81108a18:	e0bffe17 	ldw	r2,-8(fp)
81108a1c:	e0ffff17 	ldw	r3,-4(fp)
81108a20:	1885883a 	add	r2,r3,r2
81108a24:	10800003 	ldbu	r2,0(r2)
81108a28:	10803fcc 	andi	r2,r2,255
81108a2c:	1080201c 	xori	r2,r2,128
81108a30:	10bfe004 	addi	r2,r2,-128
81108a34:	10000a1e 	bne	r2,zero,81108a60 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
81108a38:	e0bffd17 	ldw	r2,-12(fp)
81108a3c:	10800217 	ldw	r2,8(r2)
81108a40:	e0fffe17 	ldw	r3,-8(fp)
81108a44:	180d883a 	mov	r6,r3
81108a48:	e17fff17 	ldw	r5,-4(fp)
81108a4c:	1009883a 	mov	r4,r2
81108a50:	1108c1c0 	call	81108c1c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
81108a54:	1000021e 	bne	r2,zero,81108a60 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
81108a58:	e0bffd17 	ldw	r2,-12(fp)
81108a5c:	00000706 	br	81108a7c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
81108a60:	e0bffd17 	ldw	r2,-12(fp)
81108a64:	10800017 	ldw	r2,0(r2)
81108a68:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
81108a6c:	e0fffd17 	ldw	r3,-12(fp)
81108a70:	d0a00404 	addi	r2,gp,-32752
81108a74:	18bfcc1e 	bne	r3,r2,811089a8 <__reset+0xfb0e89a8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
81108a78:	0005883a 	mov	r2,zero
}
81108a7c:	e037883a 	mov	sp,fp
81108a80:	dfc00117 	ldw	ra,4(sp)
81108a84:	df000017 	ldw	fp,0(sp)
81108a88:	dec00204 	addi	sp,sp,8
81108a8c:	f800283a 	ret

81108a90 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
81108a90:	defffc04 	addi	sp,sp,-16
81108a94:	df000315 	stw	fp,12(sp)
81108a98:	df000304 	addi	fp,sp,12
81108a9c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
81108aa0:	00bffa04 	movi	r2,-24
81108aa4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
81108aa8:	e03ffd15 	stw	zero,-12(fp)
81108aac:	00001906 	br	81108b14 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
81108ab0:	00a04474 	movhi	r2,33041
81108ab4:	10a74004 	addi	r2,r2,-25344
81108ab8:	e0fffd17 	ldw	r3,-12(fp)
81108abc:	18c00324 	muli	r3,r3,12
81108ac0:	10c5883a 	add	r2,r2,r3
81108ac4:	10800017 	ldw	r2,0(r2)
81108ac8:	10000f1e 	bne	r2,zero,81108b08 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
81108acc:	00a04474 	movhi	r2,33041
81108ad0:	10a74004 	addi	r2,r2,-25344
81108ad4:	e0fffd17 	ldw	r3,-12(fp)
81108ad8:	18c00324 	muli	r3,r3,12
81108adc:	10c5883a 	add	r2,r2,r3
81108ae0:	e0ffff17 	ldw	r3,-4(fp)
81108ae4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
81108ae8:	d0e00817 	ldw	r3,-32736(gp)
81108aec:	e0bffd17 	ldw	r2,-12(fp)
81108af0:	1880020e 	bge	r3,r2,81108afc <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
81108af4:	e0bffd17 	ldw	r2,-12(fp)
81108af8:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
81108afc:	e0bffd17 	ldw	r2,-12(fp)
81108b00:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
81108b04:	00000606 	br	81108b20 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
81108b08:	e0bffd17 	ldw	r2,-12(fp)
81108b0c:	10800044 	addi	r2,r2,1
81108b10:	e0bffd15 	stw	r2,-12(fp)
81108b14:	e0bffd17 	ldw	r2,-12(fp)
81108b18:	10800810 	cmplti	r2,r2,32
81108b1c:	103fe41e 	bne	r2,zero,81108ab0 <__reset+0xfb0e8ab0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
81108b20:	e0bffe17 	ldw	r2,-8(fp)
}
81108b24:	e037883a 	mov	sp,fp
81108b28:	df000017 	ldw	fp,0(sp)
81108b2c:	dec00104 	addi	sp,sp,4
81108b30:	f800283a 	ret

81108b34 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
81108b34:	defffe04 	addi	sp,sp,-8
81108b38:	df000115 	stw	fp,4(sp)
81108b3c:	df000104 	addi	fp,sp,4
81108b40:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
81108b44:	e0bfff17 	ldw	r2,-4(fp)
81108b48:	10bffe84 	addi	r2,r2,-6
81108b4c:	10c00428 	cmpgeui	r3,r2,16
81108b50:	18001a1e 	bne	r3,zero,81108bbc <alt_exception_cause_generated_bad_addr+0x88>
81108b54:	100690ba 	slli	r3,r2,2
81108b58:	00a04474 	movhi	r2,33041
81108b5c:	10a2db04 	addi	r2,r2,-29844
81108b60:	1885883a 	add	r2,r3,r2
81108b64:	10800017 	ldw	r2,0(r2)
81108b68:	1000683a 	jmp	r2
81108b6c:	81108bac 	andhi	r4,r16,16942
81108b70:	81108bac 	andhi	r4,r16,16942
81108b74:	81108bbc 	xorhi	r4,r16,16942
81108b78:	81108bbc 	xorhi	r4,r16,16942
81108b7c:	81108bbc 	xorhi	r4,r16,16942
81108b80:	81108bac 	andhi	r4,r16,16942
81108b84:	81108bb4 	orhi	r4,r16,16942
81108b88:	81108bbc 	xorhi	r4,r16,16942
81108b8c:	81108bac 	andhi	r4,r16,16942
81108b90:	81108bac 	andhi	r4,r16,16942
81108b94:	81108bbc 	xorhi	r4,r16,16942
81108b98:	81108bac 	andhi	r4,r16,16942
81108b9c:	81108bb4 	orhi	r4,r16,16942
81108ba0:	81108bbc 	xorhi	r4,r16,16942
81108ba4:	81108bbc 	xorhi	r4,r16,16942
81108ba8:	81108bac 	andhi	r4,r16,16942
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
81108bac:	00800044 	movi	r2,1
81108bb0:	00000306 	br	81108bc0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
81108bb4:	0005883a 	mov	r2,zero
81108bb8:	00000106 	br	81108bc0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
81108bbc:	0005883a 	mov	r2,zero
  }
}
81108bc0:	e037883a 	mov	sp,fp
81108bc4:	df000017 	ldw	fp,0(sp)
81108bc8:	dec00104 	addi	sp,sp,4
81108bcc:	f800283a 	ret

81108bd0 <atexit>:
81108bd0:	200b883a 	mov	r5,r4
81108bd4:	000f883a 	mov	r7,zero
81108bd8:	000d883a 	mov	r6,zero
81108bdc:	0009883a 	mov	r4,zero
81108be0:	1108f581 	jmpi	81108f58 <__register_exitproc>

81108be4 <exit>:
81108be4:	defffe04 	addi	sp,sp,-8
81108be8:	000b883a 	mov	r5,zero
81108bec:	dc000015 	stw	r16,0(sp)
81108bf0:	dfc00115 	stw	ra,4(sp)
81108bf4:	2021883a 	mov	r16,r4
81108bf8:	11090700 	call	81109070 <__call_exitprocs>
81108bfc:	00a04474 	movhi	r2,33041
81108c00:	10abe804 	addi	r2,r2,-20576
81108c04:	11000017 	ldw	r4,0(r2)
81108c08:	20800f17 	ldw	r2,60(r4)
81108c0c:	10000126 	beq	r2,zero,81108c14 <exit+0x30>
81108c10:	103ee83a 	callr	r2
81108c14:	8009883a 	mov	r4,r16
81108c18:	11091f00 	call	811091f0 <_exit>

81108c1c <memcmp>:
81108c1c:	01c000c4 	movi	r7,3
81108c20:	3980192e 	bgeu	r7,r6,81108c88 <memcmp+0x6c>
81108c24:	2144b03a 	or	r2,r4,r5
81108c28:	11c4703a 	and	r2,r2,r7
81108c2c:	10000f26 	beq	r2,zero,81108c6c <memcmp+0x50>
81108c30:	20800003 	ldbu	r2,0(r4)
81108c34:	28c00003 	ldbu	r3,0(r5)
81108c38:	10c0151e 	bne	r2,r3,81108c90 <memcmp+0x74>
81108c3c:	31bfff84 	addi	r6,r6,-2
81108c40:	01ffffc4 	movi	r7,-1
81108c44:	00000406 	br	81108c58 <memcmp+0x3c>
81108c48:	20800003 	ldbu	r2,0(r4)
81108c4c:	28c00003 	ldbu	r3,0(r5)
81108c50:	31bfffc4 	addi	r6,r6,-1
81108c54:	10c00e1e 	bne	r2,r3,81108c90 <memcmp+0x74>
81108c58:	21000044 	addi	r4,r4,1
81108c5c:	29400044 	addi	r5,r5,1
81108c60:	31fff91e 	bne	r6,r7,81108c48 <__reset+0xfb0e8c48>
81108c64:	0005883a 	mov	r2,zero
81108c68:	f800283a 	ret
81108c6c:	20c00017 	ldw	r3,0(r4)
81108c70:	28800017 	ldw	r2,0(r5)
81108c74:	18bfee1e 	bne	r3,r2,81108c30 <__reset+0xfb0e8c30>
81108c78:	31bfff04 	addi	r6,r6,-4
81108c7c:	21000104 	addi	r4,r4,4
81108c80:	29400104 	addi	r5,r5,4
81108c84:	39bff936 	bltu	r7,r6,81108c6c <__reset+0xfb0e8c6c>
81108c88:	303fe91e 	bne	r6,zero,81108c30 <__reset+0xfb0e8c30>
81108c8c:	003ff506 	br	81108c64 <__reset+0xfb0e8c64>
81108c90:	10c5c83a 	sub	r2,r2,r3
81108c94:	f800283a 	ret

81108c98 <_putc_r>:
81108c98:	defffc04 	addi	sp,sp,-16
81108c9c:	dc000215 	stw	r16,8(sp)
81108ca0:	dfc00315 	stw	ra,12(sp)
81108ca4:	2021883a 	mov	r16,r4
81108ca8:	20000226 	beq	r4,zero,81108cb4 <_putc_r+0x1c>
81108cac:	20800e17 	ldw	r2,56(r4)
81108cb0:	10001b26 	beq	r2,zero,81108d20 <_putc_r+0x88>
81108cb4:	30800217 	ldw	r2,8(r6)
81108cb8:	10bfffc4 	addi	r2,r2,-1
81108cbc:	30800215 	stw	r2,8(r6)
81108cc0:	10000a16 	blt	r2,zero,81108cec <_putc_r+0x54>
81108cc4:	30800017 	ldw	r2,0(r6)
81108cc8:	11400005 	stb	r5,0(r2)
81108ccc:	30800017 	ldw	r2,0(r6)
81108cd0:	10c00044 	addi	r3,r2,1
81108cd4:	30c00015 	stw	r3,0(r6)
81108cd8:	10800003 	ldbu	r2,0(r2)
81108cdc:	dfc00317 	ldw	ra,12(sp)
81108ce0:	dc000217 	ldw	r16,8(sp)
81108ce4:	dec00404 	addi	sp,sp,16
81108ce8:	f800283a 	ret
81108cec:	30c00617 	ldw	r3,24(r6)
81108cf0:	10c00616 	blt	r2,r3,81108d0c <_putc_r+0x74>
81108cf4:	30800017 	ldw	r2,0(r6)
81108cf8:	00c00284 	movi	r3,10
81108cfc:	11400005 	stb	r5,0(r2)
81108d00:	30800017 	ldw	r2,0(r6)
81108d04:	11400003 	ldbu	r5,0(r2)
81108d08:	28fff11e 	bne	r5,r3,81108cd0 <__reset+0xfb0e8cd0>
81108d0c:	8009883a 	mov	r4,r16
81108d10:	dfc00317 	ldw	ra,12(sp)
81108d14:	dc000217 	ldw	r16,8(sp)
81108d18:	dec00404 	addi	sp,sp,16
81108d1c:	1108e001 	jmpi	81108e00 <__swbuf_r>
81108d20:	d9400015 	stw	r5,0(sp)
81108d24:	d9800115 	stw	r6,4(sp)
81108d28:	11010800 	call	81101080 <__sinit>
81108d2c:	d9800117 	ldw	r6,4(sp)
81108d30:	d9400017 	ldw	r5,0(sp)
81108d34:	003fdf06 	br	81108cb4 <__reset+0xfb0e8cb4>

81108d38 <putc>:
81108d38:	00a04474 	movhi	r2,33041
81108d3c:	defffc04 	addi	sp,sp,-16
81108d40:	10abe904 	addi	r2,r2,-20572
81108d44:	dc000115 	stw	r16,4(sp)
81108d48:	14000017 	ldw	r16,0(r2)
81108d4c:	dc400215 	stw	r17,8(sp)
81108d50:	dfc00315 	stw	ra,12(sp)
81108d54:	2023883a 	mov	r17,r4
81108d58:	80000226 	beq	r16,zero,81108d64 <putc+0x2c>
81108d5c:	80800e17 	ldw	r2,56(r16)
81108d60:	10001a26 	beq	r2,zero,81108dcc <putc+0x94>
81108d64:	28800217 	ldw	r2,8(r5)
81108d68:	10bfffc4 	addi	r2,r2,-1
81108d6c:	28800215 	stw	r2,8(r5)
81108d70:	10000b16 	blt	r2,zero,81108da0 <putc+0x68>
81108d74:	28800017 	ldw	r2,0(r5)
81108d78:	14400005 	stb	r17,0(r2)
81108d7c:	28800017 	ldw	r2,0(r5)
81108d80:	10c00044 	addi	r3,r2,1
81108d84:	28c00015 	stw	r3,0(r5)
81108d88:	10800003 	ldbu	r2,0(r2)
81108d8c:	dfc00317 	ldw	ra,12(sp)
81108d90:	dc400217 	ldw	r17,8(sp)
81108d94:	dc000117 	ldw	r16,4(sp)
81108d98:	dec00404 	addi	sp,sp,16
81108d9c:	f800283a 	ret
81108da0:	28c00617 	ldw	r3,24(r5)
81108da4:	10c00e16 	blt	r2,r3,81108de0 <putc+0xa8>
81108da8:	28800017 	ldw	r2,0(r5)
81108dac:	01000284 	movi	r4,10
81108db0:	14400005 	stb	r17,0(r2)
81108db4:	28800017 	ldw	r2,0(r5)
81108db8:	10c00003 	ldbu	r3,0(r2)
81108dbc:	193ff01e 	bne	r3,r4,81108d80 <__reset+0xfb0e8d80>
81108dc0:	280d883a 	mov	r6,r5
81108dc4:	180b883a 	mov	r5,r3
81108dc8:	00000706 	br	81108de8 <putc+0xb0>
81108dcc:	8009883a 	mov	r4,r16
81108dd0:	d9400015 	stw	r5,0(sp)
81108dd4:	11010800 	call	81101080 <__sinit>
81108dd8:	d9400017 	ldw	r5,0(sp)
81108ddc:	003fe106 	br	81108d64 <__reset+0xfb0e8d64>
81108de0:	280d883a 	mov	r6,r5
81108de4:	880b883a 	mov	r5,r17
81108de8:	8009883a 	mov	r4,r16
81108dec:	dfc00317 	ldw	ra,12(sp)
81108df0:	dc400217 	ldw	r17,8(sp)
81108df4:	dc000117 	ldw	r16,4(sp)
81108df8:	dec00404 	addi	sp,sp,16
81108dfc:	1108e001 	jmpi	81108e00 <__swbuf_r>

81108e00 <__swbuf_r>:
81108e00:	defffb04 	addi	sp,sp,-20
81108e04:	dcc00315 	stw	r19,12(sp)
81108e08:	dc800215 	stw	r18,8(sp)
81108e0c:	dc000015 	stw	r16,0(sp)
81108e10:	dfc00415 	stw	ra,16(sp)
81108e14:	dc400115 	stw	r17,4(sp)
81108e18:	2025883a 	mov	r18,r4
81108e1c:	2827883a 	mov	r19,r5
81108e20:	3021883a 	mov	r16,r6
81108e24:	20000226 	beq	r4,zero,81108e30 <__swbuf_r+0x30>
81108e28:	20800e17 	ldw	r2,56(r4)
81108e2c:	10004226 	beq	r2,zero,81108f38 <__swbuf_r+0x138>
81108e30:	80800617 	ldw	r2,24(r16)
81108e34:	8100030b 	ldhu	r4,12(r16)
81108e38:	80800215 	stw	r2,8(r16)
81108e3c:	2080020c 	andi	r2,r4,8
81108e40:	10003626 	beq	r2,zero,81108f1c <__swbuf_r+0x11c>
81108e44:	80c00417 	ldw	r3,16(r16)
81108e48:	18003426 	beq	r3,zero,81108f1c <__swbuf_r+0x11c>
81108e4c:	2088000c 	andi	r2,r4,8192
81108e50:	9c403fcc 	andi	r17,r19,255
81108e54:	10001a26 	beq	r2,zero,81108ec0 <__swbuf_r+0xc0>
81108e58:	80800017 	ldw	r2,0(r16)
81108e5c:	81000517 	ldw	r4,20(r16)
81108e60:	10c7c83a 	sub	r3,r2,r3
81108e64:	1900200e 	bge	r3,r4,81108ee8 <__swbuf_r+0xe8>
81108e68:	18c00044 	addi	r3,r3,1
81108e6c:	81000217 	ldw	r4,8(r16)
81108e70:	11400044 	addi	r5,r2,1
81108e74:	81400015 	stw	r5,0(r16)
81108e78:	213fffc4 	addi	r4,r4,-1
81108e7c:	81000215 	stw	r4,8(r16)
81108e80:	14c00005 	stb	r19,0(r2)
81108e84:	80800517 	ldw	r2,20(r16)
81108e88:	10c01e26 	beq	r2,r3,81108f04 <__swbuf_r+0x104>
81108e8c:	8080030b 	ldhu	r2,12(r16)
81108e90:	1080004c 	andi	r2,r2,1
81108e94:	10000226 	beq	r2,zero,81108ea0 <__swbuf_r+0xa0>
81108e98:	00800284 	movi	r2,10
81108e9c:	88801926 	beq	r17,r2,81108f04 <__swbuf_r+0x104>
81108ea0:	8805883a 	mov	r2,r17
81108ea4:	dfc00417 	ldw	ra,16(sp)
81108ea8:	dcc00317 	ldw	r19,12(sp)
81108eac:	dc800217 	ldw	r18,8(sp)
81108eb0:	dc400117 	ldw	r17,4(sp)
81108eb4:	dc000017 	ldw	r16,0(sp)
81108eb8:	dec00504 	addi	sp,sp,20
81108ebc:	f800283a 	ret
81108ec0:	81401917 	ldw	r5,100(r16)
81108ec4:	00b7ffc4 	movi	r2,-8193
81108ec8:	21080014 	ori	r4,r4,8192
81108ecc:	2884703a 	and	r2,r5,r2
81108ed0:	80801915 	stw	r2,100(r16)
81108ed4:	80800017 	ldw	r2,0(r16)
81108ed8:	8100030d 	sth	r4,12(r16)
81108edc:	81000517 	ldw	r4,20(r16)
81108ee0:	10c7c83a 	sub	r3,r2,r3
81108ee4:	193fe016 	blt	r3,r4,81108e68 <__reset+0xfb0e8e68>
81108ee8:	800b883a 	mov	r5,r16
81108eec:	9009883a 	mov	r4,r18
81108ef0:	1102fec0 	call	81102fec <_fflush_r>
81108ef4:	1000071e 	bne	r2,zero,81108f14 <__swbuf_r+0x114>
81108ef8:	80800017 	ldw	r2,0(r16)
81108efc:	00c00044 	movi	r3,1
81108f00:	003fda06 	br	81108e6c <__reset+0xfb0e8e6c>
81108f04:	800b883a 	mov	r5,r16
81108f08:	9009883a 	mov	r4,r18
81108f0c:	1102fec0 	call	81102fec <_fflush_r>
81108f10:	103fe326 	beq	r2,zero,81108ea0 <__reset+0xfb0e8ea0>
81108f14:	00bfffc4 	movi	r2,-1
81108f18:	003fe206 	br	81108ea4 <__reset+0xfb0e8ea4>
81108f1c:	800b883a 	mov	r5,r16
81108f20:	9009883a 	mov	r4,r18
81108f24:	1102b240 	call	81102b24 <__swsetup_r>
81108f28:	103ffa1e 	bne	r2,zero,81108f14 <__reset+0xfb0e8f14>
81108f2c:	8100030b 	ldhu	r4,12(r16)
81108f30:	80c00417 	ldw	r3,16(r16)
81108f34:	003fc506 	br	81108e4c <__reset+0xfb0e8e4c>
81108f38:	11010800 	call	81101080 <__sinit>
81108f3c:	003fbc06 	br	81108e30 <__reset+0xfb0e8e30>

81108f40 <__swbuf>:
81108f40:	00a04474 	movhi	r2,33041
81108f44:	10abe904 	addi	r2,r2,-20572
81108f48:	280d883a 	mov	r6,r5
81108f4c:	200b883a 	mov	r5,r4
81108f50:	11000017 	ldw	r4,0(r2)
81108f54:	1108e001 	jmpi	81108e00 <__swbuf_r>

81108f58 <__register_exitproc>:
81108f58:	defffa04 	addi	sp,sp,-24
81108f5c:	dc000315 	stw	r16,12(sp)
81108f60:	04204474 	movhi	r16,33041
81108f64:	842be804 	addi	r16,r16,-20576
81108f68:	80c00017 	ldw	r3,0(r16)
81108f6c:	dc400415 	stw	r17,16(sp)
81108f70:	dfc00515 	stw	ra,20(sp)
81108f74:	18805217 	ldw	r2,328(r3)
81108f78:	2023883a 	mov	r17,r4
81108f7c:	10003726 	beq	r2,zero,8110905c <__register_exitproc+0x104>
81108f80:	10c00117 	ldw	r3,4(r2)
81108f84:	010007c4 	movi	r4,31
81108f88:	20c00e16 	blt	r4,r3,81108fc4 <__register_exitproc+0x6c>
81108f8c:	1a000044 	addi	r8,r3,1
81108f90:	8800221e 	bne	r17,zero,8110901c <__register_exitproc+0xc4>
81108f94:	18c00084 	addi	r3,r3,2
81108f98:	18c7883a 	add	r3,r3,r3
81108f9c:	18c7883a 	add	r3,r3,r3
81108fa0:	12000115 	stw	r8,4(r2)
81108fa4:	10c7883a 	add	r3,r2,r3
81108fa8:	19400015 	stw	r5,0(r3)
81108fac:	0005883a 	mov	r2,zero
81108fb0:	dfc00517 	ldw	ra,20(sp)
81108fb4:	dc400417 	ldw	r17,16(sp)
81108fb8:	dc000317 	ldw	r16,12(sp)
81108fbc:	dec00604 	addi	sp,sp,24
81108fc0:	f800283a 	ret
81108fc4:	00800034 	movhi	r2,0
81108fc8:	10800004 	addi	r2,r2,0
81108fcc:	10002626 	beq	r2,zero,81109068 <__register_exitproc+0x110>
81108fd0:	01006404 	movi	r4,400
81108fd4:	d9400015 	stw	r5,0(sp)
81108fd8:	d9800115 	stw	r6,4(sp)
81108fdc:	d9c00215 	stw	r7,8(sp)
81108fe0:	00000000 	call	80000000 <__alt_mem_onchip_memory-0x1100000>
81108fe4:	d9400017 	ldw	r5,0(sp)
81108fe8:	d9800117 	ldw	r6,4(sp)
81108fec:	d9c00217 	ldw	r7,8(sp)
81108ff0:	10001d26 	beq	r2,zero,81109068 <__register_exitproc+0x110>
81108ff4:	81000017 	ldw	r4,0(r16)
81108ff8:	10000115 	stw	zero,4(r2)
81108ffc:	02000044 	movi	r8,1
81109000:	22405217 	ldw	r9,328(r4)
81109004:	0007883a 	mov	r3,zero
81109008:	12400015 	stw	r9,0(r2)
8110900c:	20805215 	stw	r2,328(r4)
81109010:	10006215 	stw	zero,392(r2)
81109014:	10006315 	stw	zero,396(r2)
81109018:	883fde26 	beq	r17,zero,81108f94 <__reset+0xfb0e8f94>
8110901c:	18c9883a 	add	r4,r3,r3
81109020:	2109883a 	add	r4,r4,r4
81109024:	1109883a 	add	r4,r2,r4
81109028:	21802215 	stw	r6,136(r4)
8110902c:	01800044 	movi	r6,1
81109030:	12406217 	ldw	r9,392(r2)
81109034:	30cc983a 	sll	r6,r6,r3
81109038:	4992b03a 	or	r9,r9,r6
8110903c:	12406215 	stw	r9,392(r2)
81109040:	21c04215 	stw	r7,264(r4)
81109044:	01000084 	movi	r4,2
81109048:	893fd21e 	bne	r17,r4,81108f94 <__reset+0xfb0e8f94>
8110904c:	11006317 	ldw	r4,396(r2)
81109050:	218cb03a 	or	r6,r4,r6
81109054:	11806315 	stw	r6,396(r2)
81109058:	003fce06 	br	81108f94 <__reset+0xfb0e8f94>
8110905c:	18805304 	addi	r2,r3,332
81109060:	18805215 	stw	r2,328(r3)
81109064:	003fc606 	br	81108f80 <__reset+0xfb0e8f80>
81109068:	00bfffc4 	movi	r2,-1
8110906c:	003fd006 	br	81108fb0 <__reset+0xfb0e8fb0>

81109070 <__call_exitprocs>:
81109070:	defff504 	addi	sp,sp,-44
81109074:	df000915 	stw	fp,36(sp)
81109078:	dd400615 	stw	r21,24(sp)
8110907c:	dc800315 	stw	r18,12(sp)
81109080:	dfc00a15 	stw	ra,40(sp)
81109084:	ddc00815 	stw	r23,32(sp)
81109088:	dd800715 	stw	r22,28(sp)
8110908c:	dd000515 	stw	r20,20(sp)
81109090:	dcc00415 	stw	r19,16(sp)
81109094:	dc400215 	stw	r17,8(sp)
81109098:	dc000115 	stw	r16,4(sp)
8110909c:	d9000015 	stw	r4,0(sp)
811090a0:	2839883a 	mov	fp,r5
811090a4:	04800044 	movi	r18,1
811090a8:	057fffc4 	movi	r21,-1
811090ac:	00a04474 	movhi	r2,33041
811090b0:	10abe804 	addi	r2,r2,-20576
811090b4:	12000017 	ldw	r8,0(r2)
811090b8:	45005217 	ldw	r20,328(r8)
811090bc:	44c05204 	addi	r19,r8,328
811090c0:	a0001c26 	beq	r20,zero,81109134 <__call_exitprocs+0xc4>
811090c4:	a0800117 	ldw	r2,4(r20)
811090c8:	15ffffc4 	addi	r23,r2,-1
811090cc:	b8000d16 	blt	r23,zero,81109104 <__call_exitprocs+0x94>
811090d0:	14000044 	addi	r16,r2,1
811090d4:	8421883a 	add	r16,r16,r16
811090d8:	8421883a 	add	r16,r16,r16
811090dc:	84402004 	addi	r17,r16,128
811090e0:	a463883a 	add	r17,r20,r17
811090e4:	a421883a 	add	r16,r20,r16
811090e8:	e0001e26 	beq	fp,zero,81109164 <__call_exitprocs+0xf4>
811090ec:	80804017 	ldw	r2,256(r16)
811090f0:	e0801c26 	beq	fp,r2,81109164 <__call_exitprocs+0xf4>
811090f4:	bdffffc4 	addi	r23,r23,-1
811090f8:	843fff04 	addi	r16,r16,-4
811090fc:	8c7fff04 	addi	r17,r17,-4
81109100:	bd7ff91e 	bne	r23,r21,811090e8 <__reset+0xfb0e90e8>
81109104:	00800034 	movhi	r2,0
81109108:	10800004 	addi	r2,r2,0
8110910c:	10000926 	beq	r2,zero,81109134 <__call_exitprocs+0xc4>
81109110:	a0800117 	ldw	r2,4(r20)
81109114:	1000301e 	bne	r2,zero,811091d8 <__call_exitprocs+0x168>
81109118:	a0800017 	ldw	r2,0(r20)
8110911c:	10003226 	beq	r2,zero,811091e8 <__call_exitprocs+0x178>
81109120:	a009883a 	mov	r4,r20
81109124:	98800015 	stw	r2,0(r19)
81109128:	00000000 	call	80000000 <__alt_mem_onchip_memory-0x1100000>
8110912c:	9d000017 	ldw	r20,0(r19)
81109130:	a03fe41e 	bne	r20,zero,811090c4 <__reset+0xfb0e90c4>
81109134:	dfc00a17 	ldw	ra,40(sp)
81109138:	df000917 	ldw	fp,36(sp)
8110913c:	ddc00817 	ldw	r23,32(sp)
81109140:	dd800717 	ldw	r22,28(sp)
81109144:	dd400617 	ldw	r21,24(sp)
81109148:	dd000517 	ldw	r20,20(sp)
8110914c:	dcc00417 	ldw	r19,16(sp)
81109150:	dc800317 	ldw	r18,12(sp)
81109154:	dc400217 	ldw	r17,8(sp)
81109158:	dc000117 	ldw	r16,4(sp)
8110915c:	dec00b04 	addi	sp,sp,44
81109160:	f800283a 	ret
81109164:	a0800117 	ldw	r2,4(r20)
81109168:	80c00017 	ldw	r3,0(r16)
8110916c:	10bfffc4 	addi	r2,r2,-1
81109170:	15c01426 	beq	r2,r23,811091c4 <__call_exitprocs+0x154>
81109174:	80000015 	stw	zero,0(r16)
81109178:	183fde26 	beq	r3,zero,811090f4 <__reset+0xfb0e90f4>
8110917c:	95c8983a 	sll	r4,r18,r23
81109180:	a0806217 	ldw	r2,392(r20)
81109184:	a5800117 	ldw	r22,4(r20)
81109188:	2084703a 	and	r2,r4,r2
8110918c:	10000b26 	beq	r2,zero,811091bc <__call_exitprocs+0x14c>
81109190:	a0806317 	ldw	r2,396(r20)
81109194:	2088703a 	and	r4,r4,r2
81109198:	20000c1e 	bne	r4,zero,811091cc <__call_exitprocs+0x15c>
8110919c:	89400017 	ldw	r5,0(r17)
811091a0:	d9000017 	ldw	r4,0(sp)
811091a4:	183ee83a 	callr	r3
811091a8:	a0800117 	ldw	r2,4(r20)
811091ac:	15bfbf1e 	bne	r2,r22,811090ac <__reset+0xfb0e90ac>
811091b0:	98800017 	ldw	r2,0(r19)
811091b4:	153fcf26 	beq	r2,r20,811090f4 <__reset+0xfb0e90f4>
811091b8:	003fbc06 	br	811090ac <__reset+0xfb0e90ac>
811091bc:	183ee83a 	callr	r3
811091c0:	003ff906 	br	811091a8 <__reset+0xfb0e91a8>
811091c4:	a5c00115 	stw	r23,4(r20)
811091c8:	003feb06 	br	81109178 <__reset+0xfb0e9178>
811091cc:	89000017 	ldw	r4,0(r17)
811091d0:	183ee83a 	callr	r3
811091d4:	003ff406 	br	811091a8 <__reset+0xfb0e91a8>
811091d8:	a0800017 	ldw	r2,0(r20)
811091dc:	a027883a 	mov	r19,r20
811091e0:	1029883a 	mov	r20,r2
811091e4:	003fb606 	br	811090c0 <__reset+0xfb0e90c0>
811091e8:	0005883a 	mov	r2,zero
811091ec:	003ffb06 	br	811091dc <__reset+0xfb0e91dc>

811091f0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
811091f0:	defffd04 	addi	sp,sp,-12
811091f4:	df000215 	stw	fp,8(sp)
811091f8:	df000204 	addi	fp,sp,8
811091fc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
81109200:	0001883a 	nop
81109204:	e0bfff17 	ldw	r2,-4(fp)
81109208:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
8110920c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
81109210:	10000226 	beq	r2,zero,8110921c <_exit+0x2c>
    ALT_SIM_FAIL();
81109214:	002af070 	cmpltui	zero,zero,43969
81109218:	00000106 	br	81109220 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
8110921c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
81109220:	003fff06 	br	81109220 <__reset+0xfb0e9220>
