
DMA_Tests.elf:     file format elf32-littlenios2
DMA_Tests.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x80200244

Program Header:
    LOAD off    0x00001020 vaddr 0x80200020 paddr 0x80200020 align 2**12
         filesz 0x0001d438 memsz 0x0001dab4 flags rwx
    LOAD off    0x0001f000 vaddr 0x86020000 paddr 0x86020000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  86020000  86020000  0001f000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  80200020  80200020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001a2f8  80200244  80200244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001260  8021a53c  8021a53c  0001b53c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cb8  8021b7a0  8021b7a0  0001c7a0  2**4
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000067c  8021d458  8021d458  0001e458  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  8021dad4  8021dad4  0001f000  2**0
                  CONTENTS
  7 .ext_flash    00000000  86020020  86020020  0001f000  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001f000  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000011b0  00000000  00000000  0001f028  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002e525  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000b754  00000000  00000000  0004e6fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000f81b  00000000  00000000  00059e51  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003114  00000000  00000000  0006966c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000050ca  00000000  00000000  0006c780  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001d75d  00000000  00000000  0007184a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0008efa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001bf0  00000000  00000000  0008efe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0009502d  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00095030  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0009503c  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0009503d  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0009503e  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00095042  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00095046  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0009504a  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00095055  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00095060  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000011  00000000  00000000  0009506b  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000053  00000000  00000000  0009507c  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     001fae39  00000000  00000000  000950cf  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
86020000 l    d  .entry	00000000 .entry
80200020 l    d  .exceptions	00000000 .exceptions
80200244 l    d  .text	00000000 .text
8021a53c l    d  .rodata	00000000 .rodata
8021b7a0 l    d  .rwdata	00000000 .rwdata
8021d458 l    d  .bss	00000000 .bss
8021dad4 l    d  .onchip_memory	00000000 .onchip_memory
86020020 l    d  .ext_flash	00000000 .ext_flash
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../DMA_Tests_bsp//obj/HAL/src/crt0.o
80200278 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 ddr2.c
00000000 l    df *ABS*	00000000 simucam_dma.c
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 leds.c
00000000 l    df *ABS*	00000000 msgdma.c
80203860 l     F .text	00000134 msgdma_write_extended_descriptor
80203994 l     F .text	0000015c msgdma_construct_extended_descriptor
80203af0 l     F .text	00000288 msgdma_descriptor_async_transfer
80203d78 l     F .text	00000348 msgdma_descriptor_sync_transfer
00000000 l    df *ABS*	00000000 power_spi.c
00000000 l    df *ABS*	00000000 seven_seg.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
8021b7a0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
8021b33a l     O .rodata	00000010 zeroes.4389
8021b34a l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 vfprintf.c
8021b35a l     O .rodata	00000010 zeroes.4404
80209984 l     F .text	000000bc __sbprintf
8021b36a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
80209b94 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
8020b6c4 l     F .text	00000008 __fp_unlock
8020b6d8 l     F .text	0000019c __sinit.part.1
8020b874 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
8021bbe4 l     O .rwdata	00000020 lc_ctype_charset
8021bbc4 l     O .rwdata	00000020 lc_message_charset
8021bc04 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
8021b398 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
8021b4cc l     O .rodata	00000010 blanks.4332
8021b4bc l     O .rodata	00000010 zeroes.4333
00000000 l    df *ABS*	00000000 vfprintf.c
8020ff34 l     F .text	000000fc __sprint_r.part.0
8021b4ec l     O .rodata	00000010 blanks.4348
8021b4dc l     O .rodata	00000010 zeroes.4349
802114c0 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
80215240 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
8021536c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
80215398 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
80215484 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
80215564 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
80215738 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
8021d440 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
80215b58 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
80215c8c l     F .text	00000034 alt_dev_reg
8021c1f0 l     O .rwdata	00001060 jtag_uart_0
8021d250 l     O .rwdata	000000c4 rs232_uart
8021d320 l     O .rwdata	00000060 dma_DDR_M1
8021d380 l     O .rwdata	00000060 dma_DDR_M2
8021d3e0 l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
80216004 l     F .text	0000020c altera_avalon_jtag_uart_irq
80216210 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
80216848 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
80216af8 l     F .text	0000009c altera_avalon_uart_irq
80216b94 l     F .text	000000e4 altera_avalon_uart_rxirq
80216c78 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
80216e14 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
8021702c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_msgdma.c
80217214 l     F .text	0000003c alt_get_errno
80217250 l     F .text	00000094 alt_msgdma_write_standard_descriptor
802172e4 l     F .text	0000012c alt_msgdma_write_extended_descriptor
80217410 l     F .text	00000184 alt_msgdma_irq
80217594 l     F .text	0000008c alt_msgdma_construct_standard_descriptor
80217620 l     F .text	00000154 alt_msgdma_construct_extended_descriptor
80217774 l     F .text	000002d0 alt_msgdma_descriptor_async_transfer
80217a44 l     F .text	00000378 alt_msgdma_descriptor_sync_transfer
8021808c l     F .text	000000a4 alt_msgdma_construct_prefetcher_standard_descriptor
80218130 l     F .text	00000194 alt_msgdma_construct_prefetcher_extended_descriptor
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
80219308 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
802197d8 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
80219918 l     F .text	0000003c alt_get_errno
80219954 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
8021d4a8 g     O .bss	00000004 alt_instruction_exception_handler
802190c4 g     F .text	0000003c alt_msgdma_standard_descriptor_async_transfer
8020e16c g     F .text	00000074 _mprec_log10
80203194 g     F .text	00000100 I2C_Read
8020e258 g     F .text	0000008c __any_on
80211a5c g     F .text	00000054 _isatty_r
8021b3a4 g     O .rodata	00000028 __mprec_tinytens
80215674 g     F .text	0000007c alt_main
80205368 g     F .text	000000c0 _puts_r
8021d9d4 g     O .bss	00000100 alt_irq
80211ab0 g     F .text	00000060 _lseek_r
80213ca8 g     F .text	00000088 .hidden __eqdf2
80217e6c g     F .text	00000058 alt_msgdma_construct_standard_mm_to_mm_descriptor
8021dad4 g       *ABS*	00000000 __alt_heap_start
8021d46d g     O .bss	00000001 SspdConfigControl
8020532c g     F .text	0000003c printf
80211cc8 g     F .text	0000009c _wcrtomb_r
8020e9e8 g     F .text	0000005c __sseek
8020ba14 g     F .text	00000010 __sinit
80204178 g     F .text	0000003c iMsgdmaExtendedDescriptorAsyncTransfer
80211b70 g     F .text	00000140 __swbuf_r
8020c4dc g     F .text	0000007c _setlocale_r
8021d40c g     O .rwdata	00000004 LedsPainelControl
8021d4d4 g     O .bss	00000100 cDebugBuffer
8020b87c g     F .text	00000068 __sfmoreglue
80215714 g     F .text	00000024 __malloc_unlock
80202598 g     F .text	00000078 uliXorshift32
802048ec g     F .text	00000440 .hidden __divsf3
8021d470 g     O .bss	00000004 fp
8020d064 g     F .text	0000015c memmove
8020b9fc g     F .text	00000018 _cleanup
8020d2e8 g     F .text	000000a8 _Balloc
80217dbc g     F .text	00000058 alt_msgdma_construct_standard_st_to_mm_descriptor
8021d45c g     O .bss	00000004 pxDmaM1Dev
80213d30 g     F .text	000000dc .hidden __gtdf2
80219dd4 g     F .text	00000024 altera_nios2_gen2_irq_init
802034f0 g     F .text	00000130 i2c_write
86020000 g     F .entry	00000000 __reset
80211a00 g     F .text	0000005c _fstat_r
8021d48c g     O .bss	00000004 errno
8020e964 g     F .text	00000008 __seofread
8020ecf8 g     F .text	0000123c ___svfiprintf_internal_r
8021d494 g     O .bss	00000004 alt_argv
8022540c g       *ABS*	00000000 _gp
80215b28 g     F .text	00000030 usleep
80203778 g     F .text	00000078 bSetBoardLeds
80218950 g     F .text	00000144 alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits
8021c06c g     O .rwdata	00000180 alt_fd_list
802194a8 g     F .text	00000090 alt_find_dev
802051b4 g     F .text	00000148 memcpy
8020b6cc g     F .text	0000000c _cleanup_r
80214f94 g     F .text	000000dc .hidden __floatsidf
8021989c g     F .text	0000007c alt_io_redirect
80213e0c g     F .text	000000f4 .hidden __ltdf2
802026c4 g     F .text	000000bc bSdmaInitM2Dma
8021a53c g       *ABS*	00000000 __DTOR_END__
80218e00 g     F .text	000000ac alt_msgdma_start_prefetcher_with_extd_desc_list
80219100 g     F .text	0000003c alt_msgdma_extended_descriptor_async_transfer
80219070 g     F .text	00000054 alt_msgdma_register_callback
80205428 g     F .text	00000014 puts
80219fa4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
8020e848 g     F .text	00000074 __fpclassifyd
8020e0c8 g     F .text	000000a4 __ratio
802114a4 g     F .text	0000001c __vfiprintf_internal
80216408 g     F .text	0000021c altera_avalon_jtag_uart_read
802185bc g     F .text	000000f0 alt_msgdma_prefetcher_add_standard_desc_to_list
802052fc g     F .text	00000030 _printf_r
80212a58 g     F .text	00000064 .hidden __udivsi3
802154c0 g     F .text	000000a4 isatty
8021d46c g     O .bss	00000001 LedsBoardControl
8021b3f4 g     O .rodata	000000c8 __mprec_tens
8020c558 g     F .text	0000000c __locale_charset
80203294 g     F .text	00000158 I2C_MultipleRead
8021d488 g     O .bss	00000004 __malloc_top_pad
8021d418 g     O .rwdata	00000004 __mb_cur_max
8020c588 g     F .text	0000000c _localeconv_r
8020d6f4 g     F .text	0000003c __i2b
8020be98 g     F .text	000004bc __sfvwrite_r
8020e8bc g     F .text	00000054 _sbrk_r
80211b10 g     F .text	00000060 _read_r
802192e0 g     F .text	00000028 alt_dcache_flush
8020215c g     F .text	0000043c bDdr2MemoryRandomReadTest
8021d438 g     O .rwdata	00000004 alt_max_fd
802116f4 g     F .text	000000f0 _fclose_r
8020b694 g     F .text	00000030 fflush
8021d484 g     O .bss	00000004 __malloc_max_sbrked_mem
80204f40 g     F .text	00000110 .hidden __extendsfdf2
8020303c g     F .text	00000080 I2C_TestAdress
80212b14 g     F .text	000008ac .hidden __adddf3
8020de70 g     F .text	0000010c __b2d
8021831c g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor
80212428 g     F .text	00000538 .hidden __umoddi3
802155a0 g     F .text	000000d4 lseek
8021d410 g     O .rwdata	00000004 _global_impure_ptr
80204798 g     F .text	00000044 bSSDisplayUpdate
8020e2e4 g     F .text	00000564 _realloc_r
8021dad4 g       *ABS*	00000000 __bss_end
802196e8 g     F .text	000000f0 alt_iic_isr_register
80215a20 g     F .text	00000108 alt_tick
80218f04 g     F .text	0000016c alt_msgdma_init
80211eb0 g     F .text	00000578 .hidden __udivdi3
8021195c g     F .text	00000024 _fputwc_r
8021b3cc g     O .rodata	00000028 __mprec_bigtens
8020d4d8 g     F .text	00000104 __s2b
80215070 g     F .text	000000a8 .hidden __floatunsidf
8020dbb0 g     F .text	00000060 __mcmp
80216a4c g     F .text	000000ac altera_avalon_uart_init
80219178 g     F .text	0000003c alt_msgdma_extended_descriptor_sync_transfer
80202be8 g     F .text	00000454 bSdmaDmaM2Transfer
8020ba34 g     F .text	00000018 __fp_lock_all
8021969c g     F .text	0000004c alt_ic_irq_enabled
802030bc g     F .text	000000d8 I2C_Write
80215984 g     F .text	0000009c alt_alarm_stop
8021d4a4 g     O .bss	00000004 alt_irq_active
802000fc g     F .exceptions	000000d4 alt_irq_handler
8021c044 g     O .rwdata	00000028 alt_dev_null
80217f54 g     F .text	00000090 alt_msgdma_construct_extended_mm_to_st_descriptor
802033ec g     F .text	0000008c i2c_start
80218d54 g     F .text	000000ac alt_msgdma_start_prefetcher_with_std_desc_list
8021534c g     F .text	00000020 alt_dcache_flush_all
8020d5dc g     F .text	00000068 __hi0bits
80214f14 g     F .text	00000080 .hidden __fixdfsi
80200000 g       *ABS*	00000000 __alt_mem_onchip_memory
8021d430 g     O .rwdata	00000008 alt_dev_list
80215b94 g     F .text	000000f8 write
8021a108 g     F .text	000000a0 _putc_r
802153d4 g     F .text	000000b0 fstat
80213e0c g     F .text	000000f4 .hidden __ledf2
8020d928 g     F .text	00000140 __pow5mult
80210048 g     F .text	0000145c ___vfiprintf_internal_r
8021d47c g     O .bss	00000004 __nlocale_changed
80212abc g     F .text	00000058 .hidden __umodsi3
80218374 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor
8021dad4 g       *ABS*	00000000 end
80217068 g     F .text	000001ac altera_avalon_uart_write
80215f44 g     F .text	000000c0 altera_avalon_jtag_uart_init
802001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
8021a53c g       *ABS*	00000000 __CTOR_LIST__
802d4800 g       *ABS*	00000000 __alt_stack_pointer
80201d44 g     F .text	00000418 bDdr2MemoryRandomWriteTest
802168c0 g     F .text	0000007c alt_avalon_timer_sc_init
8021699c g     F .text	00000060 altera_avalon_uart_write_fd
80205050 g     F .text	00000064 .hidden __clzsi2
802169fc g     F .text	00000050 altera_avalon_uart_close_fd
80216624 g     F .text	00000224 altera_avalon_jtag_uart_write
8020ba24 g     F .text	00000004 __sfp_lock_acquire
8020cf80 g     F .text	000000e4 memchr
80207770 g     F .text	000021f8 ___vfprintf_internal_r
8020543c g     F .text	00000058 _sprintf_r
8020bb88 g     F .text	00000310 _free_r
80219b6c g     F .text	0000022c alt_printf
8020c564 g     F .text	00000010 __locale_mb_cur_max
8021a388 g     F .text	00000180 __call_exitprocs
8021d478 g     O .bss	00000004 __mlocale_changed
8021d41c g     O .rwdata	00000004 __malloc_sbrk_base
80200244 g     F .text	00000038 _start
8021d49c g     O .bss	00000004 _alt_tick_rate
8020da68 g     F .text	00000148 __lshift
80217e14 g     F .text	00000058 alt_msgdma_construct_standard_mm_to_st_descriptor
8021d4a0 g     O .bss	00000004 _alt_nticks
80215774 g     F .text	000000fc read
80215cf8 g     F .text	000000e8 alt_sys_init
80204d2c g     F .text	00000124 .hidden __floatsisf
8020eb28 g     F .text	000001d0 __ssprint_r
80200720 g     F .text	00000b74 bDdr2EepromDump
8021a270 g     F .text	00000118 __register_exitproc
8020d730 g     F .text	000001f8 __multiply
802162b0 g     F .text	00000068 altera_avalon_jtag_uart_close
8021d4ac g     O .bss	00000028 __malloc_current_mallinfo
8020df7c g     F .text	0000014c __d2b
80215de0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
80219f00 g     F .text	000000a4 alt_get_fd
80215118 g     F .text	00000128 alt_busy_sleep
802115dc g     F .text	00000054 _close_r
802182c4 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor
8021a08c g     F .text	0000007c memcmp
80215ea0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
8021dad4 g       *ABS*	00000000 __alt_stack_base
80215ef0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
802050b4 g     F .text	000000cc _fwrite_r
802183cc g     F .text	000000a0 alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor
80209a40 g     F .text	00000154 __swsetup_r
802133c0 g     F .text	000008e8 .hidden __divdf3
8020b8e4 g     F .text	00000118 __sfp
8020e1e0 g     F .text	00000078 __copybits
8021bc3c g     O .rwdata	00000408 __malloc_av_
8020ba30 g     F .text	00000004 __sinit_lock_release
8021d458 g     O .bss	00000004 uliInitialState
80203478 g     F .text	00000078 i2c_stop
80213f00 g     F .text	00000718 .hidden __muldf3
8020e910 g     F .text	00000054 __sread
80219df8 g     F .text	00000108 alt_find_file
80219344 g     F .text	000000a4 alt_dev_llist_insert
802156f0 g     F .text	00000024 __malloc_lock
802158d4 g     F .text	000000b0 sbrk
80205598 g     F .text	000021d8 ___svfprintf_internal_r
8020b638 g     F .text	0000005c _fflush_r
80211630 g     F .text	000000c4 _calloc_r
8021d458 g       *ABS*	00000000 __bss_start
8020d1c0 g     F .text	00000128 memset
80218eac g     F .text	00000058 alt_msgdma_open
802047dc g     F .text	00000110 main
8021d498 g     O .bss	00000004 alt_envp
8021d480 g     O .bss	00000004 __malloc_max_total_mem
802186ac g     F .text	00000198 alt_msgdma_prefetcher_add_extended_desc_to_list
80215e40 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
80203620 g     F .text	00000158 i2c_read
80211cb0 g     F .text	00000018 __swbuf
8020ea44 g     F .text	00000008 __sclose
802d4800 g       *ABS*	00000000 __alt_heap_limit
802117e4 g     F .text	00000014 fclose
80209d94 g     F .text	00001688 _dtoa_r
80218a94 g     F .text	000002c0 alt_msgdma_start_prefetcher_with_list_addr
8020c774 g     F .text	0000080c _malloc_r
80211e24 g     F .text	00000030 __ascii_wctomb
8021d43c g     O .rwdata	00000004 alt_errno
80218504 g     F .text	000000b8 alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor
802041f0 g     F .text	000004e0 POWER_SPI_RW
8020c354 g     F .text	000000c4 _fwalk
8021a1a8 g     F .text	000000c8 putc
80212960 g     F .text	00000084 .hidden __divsi3
8020ba64 g     F .text	00000124 _malloc_trim_r
8021a53c g       *ABS*	00000000 __CTOR_END__
8020027c g     F .text	000004a4 bDdr2EepromTest
8020ea4c g     F .text	000000dc strcmp
8021a53c g       *ABS*	00000000 __DTOR_LIST__
80213ca8 g     F .text	00000088 .hidden __nedf2
80215cc0 g     F .text	00000038 alt_irq_init
80215870 g     F .text	00000064 alt_release_fd
8021913c g     F .text	0000003c alt_msgdma_standard_descriptor_sync_transfer
80205494 g     F .text	0000006c sprintf
8021b1ef g     O .rodata	00000100 .hidden __clz_tab
8020134c g     F .text	00000538 bDdr2MemoryWriteTest
8021d474 g     O .bss	00000004 _PathLocale
802040c0 g     F .text	000000b8 iMsgdmaConstructExtendedMmToMmDescriptor
8021a040 g     F .text	00000014 atexit
8021157c g     F .text	00000060 _write_r
8020c594 g     F .text	00000018 setlocale
8021846c g     F .text	00000098 alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor
8021d414 g     O .rwdata	00000004 _impure_ptr
8021d490 g     O .bss	00000004 alt_argc
8020b41c g     F .text	0000021c __sflush_r
80219448 g     F .text	00000060 _do_dtors
8020c580 g     F .text	00000008 __locale_cjk_lang
8021d464 g     O .bss	00000004 ESdmaBufferSide
80200020 g       .exceptions	00000000 alt_irq_entry
8020de0c g     F .text	00000064 __ulp
8020ba4c g     F .text	00000018 __fp_unlock_all
8021d428 g     O .rwdata	00000008 alt_fs_list
8021d5d4 g     O .bss	00000400 xSZData
80202610 g     F .text	000000b4 bSdmaInitM1Dma
8020c5ac g     F .text	0000000c localeconv
80219538 g     F .text	00000050 alt_ic_isr_register
80205180 g     F .text	00000034 fwrite
8021d458 g       *ABS*	00000000 _edata
8021693c g     F .text	00000060 altera_avalon_uart_read_fd
8021dad4 g       *ABS*	00000000 _end
80201294 g     F .text	000000b8 bDdr2SwitchMemory
802117f8 g     F .text	00000164 __fputwc
80216318 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
80219610 g     F .text	0000008c alt_ic_irq_disable
80202780 g     F .text	00000468 bSdmaDmaM1Transfer
8020e96c g     F .text	0000007c __swrite
8021d420 g     O .rwdata	00000004 __malloc_trim_threshold
8020c574 g     F .text	0000000c __locale_msgcharset
802041b4 g     F .text	0000003c iMsgdmaExtendedDescriptorSyncTransfer
8021a054 g     F .text	00000038 exit
8020c418 g     F .text	000000c4 _fwalk_reent
80218844 g     F .text	0000010c alt_msgdma_prefetcher_set_std_list_own_by_hw_bits
80204e50 g     F .text	000000f0 .hidden __floatunsisf
8020dc10 g     F .text	000001fc __mdiff
802129e4 g     F .text	00000074 .hidden __modsi3
802d4800 g       *ABS*	00000000 __alt_data_end
80200020 g     F .exceptions	00000000 alt_exception
8020ba28 g     F .text	00000004 __sfp_lock_release
802037f0 g     F .text	00000070 bSetPainelLeds
80217fe4 g     F .text	000000a8 alt_msgdma_construct_extended_mm_to_mm_descriptor
80201884 g     F .text	000004c0 bDdr2MemoryReadTest
84000000 g       *ABS*	00000000 __alt_mem_ext_flash
80217ec4 g     F .text	00000090 alt_msgdma_construct_extended_st_to_mm_descriptor
80216dc0 g     F .text	00000054 altera_avalon_uart_close
8021a508 g     F .text	00000034 _exit
802191b4 g     F .text	0000012c alt_alarm_start
8021d468 g     O .bss	00000004 ESdmaChBufferId
8020c5b8 g     F .text	000001bc __smakebuf_r
8021d44c g     O .rwdata	00000008 alt_msgdma_list
80205500 g     F .text	00000098 strlen
80219a18 g     F .text	00000154 open
80213d30 g     F .text	000000dc .hidden __gedf2
80219d98 g     F .text	0000003c alt_putchar
8021d424 g     O .rwdata	00000004 __wctomb
80210030 g     F .text	00000018 __sprint_r
8021d460 g     O .bss	00000004 pxDmaM2Dev
8021d454 g     O .rwdata	00000004 alt_priority_mask
802046d0 g     F .text	000000c8 bSSDisplayConfig
80219588 g     F .text	00000088 alt_ic_irq_enable
80209968 g     F .text	0000001c __vfprintf_internal
80216e50 g     F .text	000001dc altera_avalon_uart_read
80211e54 g     F .text	0000005c _wctomb_r
80214618 g     F .text	000008fc .hidden __subdf3
8020d644 g     F .text	000000b0 __lo0bits
8021d444 g     O .rwdata	00000008 alt_alarm_list
802193e8 g     F .text	00000060 _do_ctors
80211d64 g     F .text	000000c0 wcrtomb
8021527c g     F .text	000000d0 close
80211980 g     F .text	00000080 fputwc
8020ba2c g     F .text	00000004 __sinit_lock_acquire
8020d3b8 g     F .text	00000120 __multadd
8020d390 g     F .text	00000028 _Bfree



Disassembly of section .exceptions:

80200020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
80200020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
80200024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
80200028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
8020002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
80200030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
80200034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
80200038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
8020003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
80200040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
80200044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
80200048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
8020004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
80200050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
80200054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
80200058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
8020005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
80200060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
80200064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
80200068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
8020006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
80200070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
80200074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
80200078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
8020007c:	10000326 	beq	r2,zero,8020008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
80200080:	20000226 	beq	r4,zero,8020008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
80200084:	02000fc0 	call	802000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
80200088:	00000706 	br	802000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
8020008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
80200090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
80200094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
80200098:	02001d00 	call	802001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
8020009c:	1000021e 	bne	r2,zero,802000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
802000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
802000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
802000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
802000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
802000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
802000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
802000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
802000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
802000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
802000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
802000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
802000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
802000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
802000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
802000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
802000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
802000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
802000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
802000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
802000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
802000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
802000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
802000f8:	ef80083a 	eret

802000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
802000fc:	defff904 	addi	sp,sp,-28
80200100:	dfc00615 	stw	ra,24(sp)
80200104:	df000515 	stw	fp,20(sp)
80200108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
8020010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
80200110:	0005313a 	rdctl	r2,ipending
80200114:	e0bffe15 	stw	r2,-8(fp)

  return active;
80200118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
8020011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
80200120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
80200124:	00800044 	movi	r2,1
80200128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
8020012c:	e0fffb17 	ldw	r3,-20(fp)
80200130:	e0bffc17 	ldw	r2,-16(fp)
80200134:	1884703a 	and	r2,r3,r2
80200138:	10001426 	beq	r2,zero,8020018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
8020013c:	00a008b4 	movhi	r2,32802
80200140:	10b67504 	addi	r2,r2,-9772
80200144:	e0fffd17 	ldw	r3,-12(fp)
80200148:	180690fa 	slli	r3,r3,3
8020014c:	10c5883a 	add	r2,r2,r3
80200150:	10c00017 	ldw	r3,0(r2)
80200154:	00a008b4 	movhi	r2,32802
80200158:	10b67504 	addi	r2,r2,-9772
8020015c:	e13ffd17 	ldw	r4,-12(fp)
80200160:	200890fa 	slli	r4,r4,3
80200164:	1105883a 	add	r2,r2,r4
80200168:	10800104 	addi	r2,r2,4
8020016c:	10800017 	ldw	r2,0(r2)
80200170:	1009883a 	mov	r4,r2
80200174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
80200178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
8020017c:	0005313a 	rdctl	r2,ipending
80200180:	e0bfff15 	stw	r2,-4(fp)

  return active;
80200184:	e0bfff17 	ldw	r2,-4(fp)
80200188:	00000706 	br	802001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
8020018c:	e0bffc17 	ldw	r2,-16(fp)
80200190:	1085883a 	add	r2,r2,r2
80200194:	e0bffc15 	stw	r2,-16(fp)
      i++;
80200198:	e0bffd17 	ldw	r2,-12(fp)
8020019c:	10800044 	addi	r2,r2,1
802001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
802001a4:	003fe106 	br	8020012c <__reset+0xfa1e012c>

    active = alt_irq_pending ();
802001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
802001ac:	e0bffb17 	ldw	r2,-20(fp)
802001b0:	103fdb1e 	bne	r2,zero,80200120 <__reset+0xfa1e0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
802001b4:	0001883a 	nop
}
802001b8:	0001883a 	nop
802001bc:	e037883a 	mov	sp,fp
802001c0:	dfc00117 	ldw	ra,4(sp)
802001c4:	df000017 	ldw	fp,0(sp)
802001c8:	dec00204 	addi	sp,sp,8
802001cc:	f800283a 	ret

802001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
802001d0:	defffb04 	addi	sp,sp,-20
802001d4:	dfc00415 	stw	ra,16(sp)
802001d8:	df000315 	stw	fp,12(sp)
802001dc:	df000304 	addi	fp,sp,12
802001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
802001e4:	000531fa 	rdctl	r2,exception
802001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
802001ec:	e0bffd17 	ldw	r2,-12(fp)
802001f0:	10801f0c 	andi	r2,r2,124
802001f4:	1004d0ba 	srli	r2,r2,2
802001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
802001fc:	0005333a 	rdctl	r2,badaddr
80200200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
80200204:	d0a02717 	ldw	r2,-32612(gp)
80200208:	10000726 	beq	r2,zero,80200228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
8020020c:	d0a02717 	ldw	r2,-32612(gp)
80200210:	e0fffd17 	ldw	r3,-12(fp)
80200214:	e1bffe17 	ldw	r6,-8(fp)
80200218:	e17fff17 	ldw	r5,-4(fp)
8020021c:	1809883a 	mov	r4,r3
80200220:	103ee83a 	callr	r2
80200224:	00000206 	br	80200230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
80200228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
8020022c:	0005883a 	mov	r2,zero
}
80200230:	e037883a 	mov	sp,fp
80200234:	dfc00117 	ldw	ra,4(sp)
80200238:	df000017 	ldw	fp,0(sp)
8020023c:	dec00204 	addi	sp,sp,8
80200240:	f800283a 	ret

Disassembly of section .text:

80200244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
80200244:	06e00b74 	movhi	sp,32813
    ori sp, sp, %lo(__alt_stack_pointer)
80200248:	ded20014 	ori	sp,sp,18432
    movhi gp, %hi(_gp)
8020024c:	06a008b4 	movhi	gp,32802
    ori gp, gp, %lo(_gp)
80200250:	d6950314 	ori	gp,gp,21516
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
80200254:	00a00874 	movhi	r2,32801
    ori r2, r2, %lo(__bss_start)
80200258:	10b51614 	ori	r2,r2,54360

    movhi r3, %hi(__bss_end)
8020025c:	00e00874 	movhi	r3,32801
    ori r3, r3, %lo(__bss_end)
80200260:	18f6b514 	ori	r3,r3,56020

    beq r2, r3, 1f
80200264:	10c00326 	beq	r2,r3,80200274 <_start+0x30>

0:
    stw zero, (r2)
80200268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
8020026c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
80200270:	10fffd36 	bltu	r2,r3,80200268 <__reset+0xfa1e0268>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
80200274:	02156740 	call	80215674 <alt_main>

80200278 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
80200278:	003fff06 	br	80200278 <__reset+0xfa1e0278>

8020027c <bDdr2EepromTest>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2EepromTest(alt_u8 ucMemoryId) {
8020027c:	defff604 	addi	sp,sp,-40
80200280:	dfc00915 	stw	ra,36(sp)
80200284:	df000815 	stw	fp,32(sp)
80200288:	df000804 	addi	fp,sp,32
8020028c:	2005883a 	mov	r2,r4
80200290:	e0bfff05 	stb	r2,-4(fp)

#if DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 EEPROM Test =====\n");
80200294:	00e008b4 	movhi	r3,32802
80200298:	18f53504 	addi	r3,r3,-11052
8020029c:	00a008b4 	movhi	r2,32802
802002a0:	10a94f04 	addi	r2,r2,-23236
802002a4:	1009883a 	mov	r4,r2
802002a8:	00800884 	movi	r2,34
802002ac:	100d883a 	mov	r6,r2
802002b0:	200b883a 	mov	r5,r4
802002b4:	1809883a 	mov	r4,r3
802002b8:	02051b40 	call	802051b4 <memcpy>
	debug(fp, cDebugBuffer);
802002bc:	012008b4 	movhi	r4,32802
802002c0:	21353504 	addi	r4,r4,-11052
802002c4:	020532c0 	call	8020532c <printf>
#endif
	const alt_u8 cucDeviceAddr = DDR2_EEPROM_I2C_ADDRESS;
802002c8:	00bfe804 	movi	r2,-96
802002cc:	e0bffd05 	stb	r2,-12(fp)
	bool bSuccess = FALSE;
802002d0:	e03ff915 	stw	zero,-28(fp)
	alt_u32 uliI2cSclBase;
	alt_u32 uliI2cSdaBase;
	int iI;

	switch (ucMemoryId) {
802002d4:	e0bfff03 	ldbu	r2,-4(fp)
802002d8:	10000326 	beq	r2,zero,802002e8 <bDdr2EepromTest+0x6c>
802002dc:	10800060 	cmpeqi	r2,r2,1
802002e0:	10000a1e 	bne	r2,zero,8020030c <bDdr2EepromTest+0x90>
802002e4:	00001206 	br	80200330 <bDdr2EepromTest+0xb4>
	case DDR2_M1_ID:
		uliI2cSclBase = DDR2_M1_EEPROM_I2C_SCL_BASE;
802002e8:	00a04034 	movhi	r2,33024
802002ec:	10827c04 	addi	r2,r2,2544
802002f0:	e0bffa15 	stw	r2,-24(fp)
		uliI2cSdaBase = DDR2_M1_EEPROM_I2C_SDA_BASE;
802002f4:	00a04034 	movhi	r2,33024
802002f8:	10828004 	addi	r2,r2,2560
802002fc:	e0bffb15 	stw	r2,-20(fp)
		bSuccess = TRUE;
80200300:	00800044 	movi	r2,1
80200304:	e0bff915 	stw	r2,-28(fp)
		break;
80200308:	00001906 	br	80200370 <bDdr2EepromTest+0xf4>
	case DDR2_M2_ID:
		uliI2cSclBase = DDR2_M2_EEPROM_I2C_SCL_BASE;
8020030c:	00a04034 	movhi	r2,33024
80200310:	10825804 	addi	r2,r2,2400
80200314:	e0bffa15 	stw	r2,-24(fp)
		uliI2cSdaBase = DDR2_M2_EEPROM_I2C_SDA_BASE;
80200318:	00a04034 	movhi	r2,33024
8020031c:	10825c04 	addi	r2,r2,2416
80200320:	e0bffb15 	stw	r2,-20(fp)
		bSuccess = TRUE;
80200324:	00800044 	movi	r2,1
80200328:	e0bff915 	stw	r2,-28(fp)
		break;
8020032c:	00001006 	br	80200370 <bDdr2EepromTest+0xf4>
	default:
		bSuccess = FALSE;
80200330:	e03ff915 	stw	zero,-28(fp)
#if DEBUG_ON
		sprintf(cDebugBuffer,
80200334:	00e008b4 	movhi	r3,32802
80200338:	18f53504 	addi	r3,r3,-11052
8020033c:	00a008b4 	movhi	r2,32802
80200340:	10a95804 	addi	r2,r2,-23200
80200344:	1009883a 	mov	r4,r2
80200348:	00800bc4 	movi	r2,47
8020034c:	100d883a 	mov	r6,r2
80200350:	200b883a 	mov	r5,r4
80200354:	1809883a 	mov	r4,r3
80200358:	02051b40 	call	802051b4 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
8020035c:	012008b4 	movhi	r4,32802
80200360:	21353504 	addi	r4,r4,-11052
80200364:	020532c0 	call	8020532c <printf>
		;
#endif
		return bSuccess;
80200368:	e0bff917 	ldw	r2,-28(fp)
8020036c:	0000e706 	br	8020070c <bDdr2EepromTest+0x490>
	}

	alt_u8 ucControlAddr, ucValue;
#if DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 EEPROM Read Test\n");
80200370:	00e008b4 	movhi	r3,32802
80200374:	18f53504 	addi	r3,r3,-11052
80200378:	00a008b4 	movhi	r2,32802
8020037c:	10a96404 	addi	r2,r2,-23152
80200380:	1009883a 	mov	r4,r2
80200384:	008005c4 	movi	r2,23
80200388:	100d883a 	mov	r6,r2
8020038c:	200b883a 	mov	r5,r4
80200390:	1809883a 	mov	r4,r3
80200394:	02051b40 	call	802051b4 <memcpy>
	debug(fp, cDebugBuffer);
80200398:	012008b4 	movhi	r4,32802
8020039c:	21353504 	addi	r4,r4,-11052
802003a0:	020532c0 	call	8020532c <printf>
#endif
	usleep(20 * 1000);
802003a4:	01138804 	movi	r4,20000
802003a8:	0215b280 	call	80215b28 <usleep>
	for (iI = 0; iI < 256 && bSuccess; iI++) {
802003ac:	e03ffc15 	stw	zero,-16(fp)
802003b0:	00002f06 	br	80200470 <bDdr2EepromTest+0x1f4>
		ucControlAddr = iI;
802003b4:	e0bffc17 	ldw	r2,-16(fp)
802003b8:	e0bffd45 	stb	r2,-11(fp)
		bSuccess = I2C_Read(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
802003bc:	e0bffd03 	ldbu	r2,-12(fp)
802003c0:	10c03fcc 	andi	r3,r2,255
802003c4:	18c0201c 	xori	r3,r3,128
802003c8:	18ffe004 	addi	r3,r3,-128
802003cc:	e13ffd43 	ldbu	r4,-11(fp)
802003d0:	e0bffe04 	addi	r2,fp,-8
802003d4:	d8800015 	stw	r2,0(sp)
802003d8:	200f883a 	mov	r7,r4
802003dc:	180d883a 	mov	r6,r3
802003e0:	e17ffb17 	ldw	r5,-20(fp)
802003e4:	e13ffa17 	ldw	r4,-24(fp)
802003e8:	02031940 	call	80203194 <I2C_Read>
802003ec:	e0bff915 	stw	r2,-28(fp)
				ucControlAddr, &ucValue);
		if (bSuccess) {
802003f0:	e0bff917 	ldw	r2,-28(fp)
802003f4:	10000e26 	beq	r2,zero,80200430 <bDdr2EepromTest+0x1b4>
#if DEBUG_ON
			sprintf(cDebugBuffer, "EEPROM[%03d]=%02Xh\n", ucControlAddr,
802003f8:	e0bffd43 	ldbu	r2,-11(fp)
802003fc:	e0fffe03 	ldbu	r3,-8(fp)
80200400:	18c03fcc 	andi	r3,r3,255
80200404:	180f883a 	mov	r7,r3
80200408:	100d883a 	mov	r6,r2
8020040c:	016008b4 	movhi	r5,32802
80200410:	29696a04 	addi	r5,r5,-23128
80200414:	012008b4 	movhi	r4,32802
80200418:	21353504 	addi	r4,r4,-11052
8020041c:	02054940 	call	80205494 <sprintf>
					ucValue);
			debug(fp, cDebugBuffer);
80200420:	012008b4 	movhi	r4,32802
80200424:	21353504 	addi	r4,r4,-11052
80200428:	020532c0 	call	8020532c <printf>
8020042c:	00000d06 	br	80200464 <bDdr2EepromTest+0x1e8>
#endif
		} else {
#if DEBUG_ON
			sprintf(cDebugBuffer, "Failed to read EEPROM\n");
80200430:	00e008b4 	movhi	r3,32802
80200434:	18f53504 	addi	r3,r3,-11052
80200438:	00a008b4 	movhi	r2,32802
8020043c:	10a96f04 	addi	r2,r2,-23108
80200440:	1009883a 	mov	r4,r2
80200444:	008005c4 	movi	r2,23
80200448:	100d883a 	mov	r6,r2
8020044c:	200b883a 	mov	r5,r4
80200450:	1809883a 	mov	r4,r3
80200454:	02051b40 	call	802051b4 <memcpy>
			debug(fp, cDebugBuffer);
80200458:	012008b4 	movhi	r4,32802
8020045c:	21353504 	addi	r4,r4,-11052
80200460:	020532c0 	call	8020532c <printf>
#if DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 EEPROM Read Test\n");
	debug(fp, cDebugBuffer);
#endif
	usleep(20 * 1000);
	for (iI = 0; iI < 256 && bSuccess; iI++) {
80200464:	e0bffc17 	ldw	r2,-16(fp)
80200468:	10800044 	addi	r2,r2,1
8020046c:	e0bffc15 	stw	r2,-16(fp)
80200470:	e0bffc17 	ldw	r2,-16(fp)
80200474:	10804008 	cmpgei	r2,r2,256
80200478:	1000021e 	bne	r2,zero,80200484 <bDdr2EepromTest+0x208>
8020047c:	e0bff917 	ldw	r2,-28(fp)
80200480:	103fcc1e 	bne	r2,zero,802003b4 <__reset+0xfa1e03b4>
			sprintf(cDebugBuffer, "Failed to read EEPROM\n");
			debug(fp, cDebugBuffer);
#endif
		}
	}
	if (bSuccess) {
80200484:	e0bff917 	ldw	r2,-28(fp)
80200488:	10000e26 	beq	r2,zero,802004c4 <bDdr2EepromTest+0x248>
#if DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Read Test Completed\n\n");
8020048c:	00e008b4 	movhi	r3,32802
80200490:	18f53504 	addi	r3,r3,-11052
80200494:	00a008b4 	movhi	r2,32802
80200498:	10a97504 	addi	r2,r2,-23084
8020049c:	1009883a 	mov	r4,r2
802004a0:	00800884 	movi	r2,34
802004a4:	100d883a 	mov	r6,r2
802004a8:	200b883a 	mov	r5,r4
802004ac:	1809883a 	mov	r4,r3
802004b0:	02051b40 	call	802051b4 <memcpy>
		debug(fp, cDebugBuffer);
802004b4:	012008b4 	movhi	r4,32802
802004b8:	21353504 	addi	r4,r4,-11052
802004bc:	020532c0 	call	8020532c <printf>
802004c0:	00000d06 	br	802004f8 <bDdr2EepromTest+0x27c>
#endif
	} else {
#if DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Read Test Failed\n\n");
802004c4:	00e008b4 	movhi	r3,32802
802004c8:	18f53504 	addi	r3,r3,-11052
802004cc:	00a008b4 	movhi	r2,32802
802004d0:	10a97e04 	addi	r2,r2,-23048
802004d4:	1009883a 	mov	r4,r2
802004d8:	008007c4 	movi	r2,31
802004dc:	100d883a 	mov	r6,r2
802004e0:	200b883a 	mov	r5,r4
802004e4:	1809883a 	mov	r4,r3
802004e8:	02051b40 	call	802051b4 <memcpy>
		debug(fp, cDebugBuffer);
802004ec:	012008b4 	movhi	r4,32802
802004f0:	21353504 	addi	r4,r4,-11052
802004f4:	020532c0 	call	8020532c <printf>
#endif
	}

#if DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 EEPROM Write Test\n");
802004f8:	00e008b4 	movhi	r3,32802
802004fc:	18f53504 	addi	r3,r3,-11052
80200500:	00a008b4 	movhi	r2,32802
80200504:	10a98604 	addi	r2,r2,-23016
80200508:	1009883a 	mov	r4,r2
8020050c:	00800604 	movi	r2,24
80200510:	100d883a 	mov	r6,r2
80200514:	200b883a 	mov	r5,r4
80200518:	1809883a 	mov	r4,r3
8020051c:	02051b40 	call	802051b4 <memcpy>
	debug(fp, cDebugBuffer);
80200520:	012008b4 	movhi	r4,32802
80200524:	21353504 	addi	r4,r4,-11052
80200528:	020532c0 	call	8020532c <printf>
#endif
	alt_u8 ucWriteData = 0x12, ucTestAddr = 128;
8020052c:	00800484 	movi	r2,18
80200530:	e0bffd85 	stb	r2,-10(fp)
80200534:	00bfe004 	movi	r2,-128
80200538:	e0bffdc5 	stb	r2,-9(fp)
	alt_u8 ucReadData;
	usleep(20 * 1000);
8020053c:	01138804 	movi	r4,20000
80200540:	0215b280 	call	80215b28 <usleep>
	bSuccess = I2C_Write(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
80200544:	e0bffd03 	ldbu	r2,-12(fp)
80200548:	10c03fcc 	andi	r3,r2,255
8020054c:	18c0201c 	xori	r3,r3,128
80200550:	18ffe004 	addi	r3,r3,-128
80200554:	e13ffdc3 	ldbu	r4,-9(fp)
80200558:	e0bffd83 	ldbu	r2,-10(fp)
8020055c:	d8800015 	stw	r2,0(sp)
80200560:	200f883a 	mov	r7,r4
80200564:	180d883a 	mov	r6,r3
80200568:	e17ffb17 	ldw	r5,-20(fp)
8020056c:	e13ffa17 	ldw	r4,-24(fp)
80200570:	02030bc0 	call	802030bc <I2C_Write>
80200574:	e0bff915 	stw	r2,-28(fp)
			ucTestAddr, ucWriteData);
	if (!bSuccess) {
80200578:	e0bff917 	ldw	r2,-28(fp)
8020057c:	10000e1e 	bne	r2,zero,802005b8 <bDdr2EepromTest+0x33c>
#if DEBUG_ON
		sprintf(cDebugBuffer, "Failed to write EEPROM\n");
80200580:	00e008b4 	movhi	r3,32802
80200584:	18f53504 	addi	r3,r3,-11052
80200588:	00a008b4 	movhi	r2,32802
8020058c:	10a98c04 	addi	r2,r2,-22992
80200590:	1009883a 	mov	r4,r2
80200594:	00800604 	movi	r2,24
80200598:	100d883a 	mov	r6,r2
8020059c:	200b883a 	mov	r5,r4
802005a0:	1809883a 	mov	r4,r3
802005a4:	02051b40 	call	802051b4 <memcpy>
		debug(fp, cDebugBuffer);
802005a8:	012008b4 	movhi	r4,32802
802005ac:	21353504 	addi	r4,r4,-11052
802005b0:	020532c0 	call	8020532c <printf>
802005b4:	00002f06 	br	80200674 <bDdr2EepromTest+0x3f8>
#endif
	} else {
		bSuccess = I2C_Read(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
802005b8:	e0bffd03 	ldbu	r2,-12(fp)
802005bc:	10c03fcc 	andi	r3,r2,255
802005c0:	18c0201c 	xori	r3,r3,128
802005c4:	18ffe004 	addi	r3,r3,-128
802005c8:	e13ffdc3 	ldbu	r4,-9(fp)
802005cc:	e0bffe44 	addi	r2,fp,-7
802005d0:	d8800015 	stw	r2,0(sp)
802005d4:	200f883a 	mov	r7,r4
802005d8:	180d883a 	mov	r6,r3
802005dc:	e17ffb17 	ldw	r5,-20(fp)
802005e0:	e13ffa17 	ldw	r4,-24(fp)
802005e4:	02031940 	call	80203194 <I2C_Read>
802005e8:	e0bff915 	stw	r2,-28(fp)
				ucTestAddr, &ucReadData);
		if (!bSuccess) {
802005ec:	e0bff917 	ldw	r2,-28(fp)
802005f0:	10000e1e 	bne	r2,zero,8020062c <bDdr2EepromTest+0x3b0>
#if DEBUG_ON
			sprintf(cDebugBuffer, "Failed to read EEPROM for verify\n");
802005f4:	00e008b4 	movhi	r3,32802
802005f8:	18f53504 	addi	r3,r3,-11052
802005fc:	00a008b4 	movhi	r2,32802
80200600:	10a99204 	addi	r2,r2,-22968
80200604:	1009883a 	mov	r4,r2
80200608:	00800884 	movi	r2,34
8020060c:	100d883a 	mov	r6,r2
80200610:	200b883a 	mov	r5,r4
80200614:	1809883a 	mov	r4,r3
80200618:	02051b40 	call	802051b4 <memcpy>
			debug(fp, cDebugBuffer);
8020061c:	012008b4 	movhi	r4,32802
80200620:	21353504 	addi	r4,r4,-11052
80200624:	020532c0 	call	8020532c <printf>
80200628:	00001206 	br	80200674 <bDdr2EepromTest+0x3f8>
#endif
		} else {
			if (ucReadData != ucWriteData) {
8020062c:	e0bffe43 	ldbu	r2,-7(fp)
80200630:	10c03fcc 	andi	r3,r2,255
80200634:	e0bffd83 	ldbu	r2,-10(fp)
80200638:	18800e26 	beq	r3,r2,80200674 <bDdr2EepromTest+0x3f8>
				bSuccess = FALSE;
8020063c:	e03ff915 	stw	zero,-28(fp)
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200640:	e0bffe43 	ldbu	r2,-7(fp)
80200644:	10803fcc 	andi	r2,r2,255
80200648:	e0fffd83 	ldbu	r3,-10(fp)
8020064c:	180f883a 	mov	r7,r3
80200650:	100d883a 	mov	r6,r2
80200654:	016008b4 	movhi	r5,32802
80200658:	29699b04 	addi	r5,r5,-22932
8020065c:	012008b4 	movhi	r4,32802
80200660:	21353504 	addi	r4,r4,-11052
80200664:	02054940 	call	80205494 <sprintf>
						"Verify EEPROM write fail, ReadData=%02Xh, WriteData=%02Xh\n",
						ucReadData, ucWriteData);
				debug(fp, cDebugBuffer);
80200668:	012008b4 	movhi	r4,32802
8020066c:	21353504 	addi	r4,r4,-11052
80200670:	020532c0 	call	8020532c <printf>
#endif
			}
		}
	}
	if (bSuccess) {
80200674:	e0bff917 	ldw	r2,-28(fp)
80200678:	10000e26 	beq	r2,zero,802006b4 <bDdr2EepromTest+0x438>
#if DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Write Test Completed\n\n");
8020067c:	00e008b4 	movhi	r3,32802
80200680:	18f53504 	addi	r3,r3,-11052
80200684:	00a008b4 	movhi	r2,32802
80200688:	10a9aa04 	addi	r2,r2,-22872
8020068c:	1009883a 	mov	r4,r2
80200690:	008008c4 	movi	r2,35
80200694:	100d883a 	mov	r6,r2
80200698:	200b883a 	mov	r5,r4
8020069c:	1809883a 	mov	r4,r3
802006a0:	02051b40 	call	802051b4 <memcpy>
		debug(fp, cDebugBuffer);
802006a4:	012008b4 	movhi	r4,32802
802006a8:	21353504 	addi	r4,r4,-11052
802006ac:	020532c0 	call	8020532c <printf>
802006b0:	00000d06 	br	802006e8 <bDdr2EepromTest+0x46c>
#endif
	} else {
#if DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Write Test Failed\n\n");
802006b4:	00e008b4 	movhi	r3,32802
802006b8:	18f53504 	addi	r3,r3,-11052
802006bc:	00a008b4 	movhi	r2,32802
802006c0:	10a9b304 	addi	r2,r2,-22836
802006c4:	1009883a 	mov	r4,r2
802006c8:	00800804 	movi	r2,32
802006cc:	100d883a 	mov	r6,r2
802006d0:	200b883a 	mov	r5,r4
802006d4:	1809883a 	mov	r4,r3
802006d8:	02051b40 	call	802051b4 <memcpy>
		debug(fp, cDebugBuffer);
802006dc:	012008b4 	movhi	r4,32802
802006e0:	21353504 	addi	r4,r4,-11052
802006e4:	020532c0 	call	8020532c <printf>
#endif
	}
#if DEBUG_ON
	sprintf(cDebugBuffer, "\n");
802006e8:	00a008b4 	movhi	r2,32802
802006ec:	10b53504 	addi	r2,r2,-11052
802006f0:	00c00284 	movi	r3,10
802006f4:	10c00005 	stb	r3,0(r2)
802006f8:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
802006fc:	012008b4 	movhi	r4,32802
80200700:	21353504 	addi	r4,r4,-11052
80200704:	020532c0 	call	8020532c <printf>
#endif

	return bSuccess;
80200708:	e0bff917 	ldw	r2,-28(fp)
}
8020070c:	e037883a 	mov	sp,fp
80200710:	dfc00117 	ldw	ra,4(sp)
80200714:	df000017 	ldw	fp,0(sp)
80200718:	dec00204 	addi	sp,sp,8
8020071c:	f800283a 	ret

80200720 <bDdr2EepromDump>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2EepromDump(alt_u8 ucMemoryId) {
80200720:	deffb704 	addi	sp,sp,-292
80200724:	dfc04815 	stw	ra,288(sp)
80200728:	df004715 	stw	fp,284(sp)
8020072c:	df004704 	addi	fp,sp,284
80200730:	2005883a 	mov	r2,r4
80200734:	e0bfff05 	stb	r2,-4(fp)

#if DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 EEPROM Dump =====\n");
80200738:	00e008b4 	movhi	r3,32802
8020073c:	18f53504 	addi	r3,r3,-11052
80200740:	00a008b4 	movhi	r2,32802
80200744:	10a9bb04 	addi	r2,r2,-22804
80200748:	1009883a 	mov	r4,r2
8020074c:	00800884 	movi	r2,34
80200750:	100d883a 	mov	r6,r2
80200754:	200b883a 	mov	r5,r4
80200758:	1809883a 	mov	r4,r3
8020075c:	02051b40 	call	802051b4 <memcpy>
	debug(fp, cDebugBuffer);
80200760:	012008b4 	movhi	r4,32802
80200764:	21353504 	addi	r4,r4,-11052
80200768:	020532c0 	call	8020532c <printf>
#endif
	const alt_u8 cucDeviceAddr = DDR2_EEPROM_I2C_ADDRESS;
8020076c:	00bfe804 	movi	r2,-96
80200770:	e0bfbd05 	stb	r2,-268(fp)
	bool bSuccess = FALSE;
80200774:	e03fbe15 	stw	zero,-264(fp)
	alt_u32 uliI2cSclBase;
	alt_u32 uliI2cSdaBase;
	int iI;

	switch (ucMemoryId) {
80200778:	e0bfff03 	ldbu	r2,-4(fp)
8020077c:	10000326 	beq	r2,zero,8020078c <bDdr2EepromDump+0x6c>
80200780:	10800060 	cmpeqi	r2,r2,1
80200784:	10000a1e 	bne	r2,zero,802007b0 <bDdr2EepromDump+0x90>
80200788:	00001206 	br	802007d4 <bDdr2EepromDump+0xb4>
	case DDR2_M1_ID:
		uliI2cSclBase = DDR2_M1_EEPROM_I2C_SCL_BASE;
8020078c:	00a04034 	movhi	r2,33024
80200790:	10827c04 	addi	r2,r2,2544
80200794:	e0bfba15 	stw	r2,-280(fp)
		uliI2cSdaBase = DDR2_M1_EEPROM_I2C_SDA_BASE;
80200798:	00a04034 	movhi	r2,33024
8020079c:	10828004 	addi	r2,r2,2560
802007a0:	e0bfbb15 	stw	r2,-276(fp)
		bSuccess = TRUE;
802007a4:	00800044 	movi	r2,1
802007a8:	e0bfbe15 	stw	r2,-264(fp)
		break;
802007ac:	00001906 	br	80200814 <bDdr2EepromDump+0xf4>
	case DDR2_M2_ID:
		uliI2cSclBase = DDR2_M2_EEPROM_I2C_SCL_BASE;
802007b0:	00a04034 	movhi	r2,33024
802007b4:	10825804 	addi	r2,r2,2400
802007b8:	e0bfba15 	stw	r2,-280(fp)
		uliI2cSdaBase = DDR2_M2_EEPROM_I2C_SDA_BASE;
802007bc:	00a04034 	movhi	r2,33024
802007c0:	10825c04 	addi	r2,r2,2416
802007c4:	e0bfbb15 	stw	r2,-276(fp)
		bSuccess = TRUE;
802007c8:	00800044 	movi	r2,1
802007cc:	e0bfbe15 	stw	r2,-264(fp)
		break;
802007d0:	00001006 	br	80200814 <bDdr2EepromDump+0xf4>
	default:
		bSuccess = FALSE;
802007d4:	e03fbe15 	stw	zero,-264(fp)
#if DEBUG_ON
		sprintf(cDebugBuffer,
802007d8:	00e008b4 	movhi	r3,32802
802007dc:	18f53504 	addi	r3,r3,-11052
802007e0:	00a008b4 	movhi	r2,32802
802007e4:	10a9c404 	addi	r2,r2,-22768
802007e8:	1009883a 	mov	r4,r2
802007ec:	00800bc4 	movi	r2,47
802007f0:	100d883a 	mov	r6,r2
802007f4:	200b883a 	mov	r5,r4
802007f8:	1809883a 	mov	r4,r3
802007fc:	02051b40 	call	802051b4 <memcpy>
				"DR2 Memory ID not identified!! Aborting Dump \n");
		debug(fp, cDebugBuffer)
80200800:	012008b4 	movhi	r4,32802
80200804:	21353504 	addi	r4,r4,-11052
80200808:	020532c0 	call	8020532c <printf>
		;
#endif
		return bSuccess;
8020080c:	e0bfbe17 	ldw	r2,-264(fp)
80200810:	00029b06 	br	80201280 <bDdr2EepromDump+0xb60>
	}

	alt_u8 ucSZData[256];
	bSuccess = I2C_MultipleRead(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
80200814:	e0bfbd03 	ldbu	r2,-268(fp)
80200818:	10c03fcc 	andi	r3,r2,255
8020081c:	18c0201c 	xori	r3,r3,128
80200820:	18ffe004 	addi	r3,r3,-128
80200824:	e13fbf04 	addi	r4,fp,-260
80200828:	00804004 	movi	r2,256
8020082c:	d8800015 	stw	r2,0(sp)
80200830:	200f883a 	mov	r7,r4
80200834:	180d883a 	mov	r6,r3
80200838:	e17fbb17 	ldw	r5,-276(fp)
8020083c:	e13fba17 	ldw	r4,-280(fp)
80200840:	02032940 	call	80203294 <I2C_MultipleRead>
80200844:	e0bfbe15 	stw	r2,-264(fp)
			ucSZData, sizeof(ucSZData));
	if (bSuccess) {
80200848:	e0bfbe17 	ldw	r2,-264(fp)
8020084c:	10027626 	beq	r2,zero,80201228 <bDdr2EepromDump+0xb08>
		for (iI = 0; iI < 256 && bSuccess; iI++) {
80200850:	e03fbc15 	stw	zero,-272(fp)
80200854:	00026e06 	br	80201210 <bDdr2EepromDump+0xaf0>
			if (iI == 0) {
80200858:	e0bfbc17 	ldw	r2,-272(fp)
8020085c:	1000101e 	bne	r2,zero,802008a0 <bDdr2EepromDump+0x180>
#if DEBUG_ON
				sprintf(cDebugBuffer,
						"(Number of SPD Bytes Used)\n" "EEPROM[%03d]=%02Xh ",
						iI, ucSZData[iI]);
80200860:	e0ffbf04 	addi	r3,fp,-260
80200864:	e0bfbc17 	ldw	r2,-272(fp)
80200868:	1885883a 	add	r2,r3,r2
8020086c:	10800003 	ldbu	r2,0(r2)
			ucSZData, sizeof(ucSZData));
	if (bSuccess) {
		for (iI = 0; iI < 256 && bSuccess; iI++) {
			if (iI == 0) {
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200870:	10803fcc 	andi	r2,r2,255
80200874:	100f883a 	mov	r7,r2
80200878:	e1bfbc17 	ldw	r6,-272(fp)
8020087c:	016008b4 	movhi	r5,32802
80200880:	2969d004 	addi	r5,r5,-22720
80200884:	012008b4 	movhi	r4,32802
80200888:	21353504 	addi	r4,r4,-11052
8020088c:	02054940 	call	80205494 <sprintf>
						"(Number of SPD Bytes Used)\n" "EEPROM[%03d]=%02Xh ",
						iI, ucSZData[iI]);
				debug(fp, cDebugBuffer);
80200890:	012008b4 	movhi	r4,32802
80200894:	21353504 	addi	r4,r4,-11052
80200898:	020532c0 	call	8020532c <printf>
8020089c:	00025906 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 1) {
802008a0:	e0bfbc17 	ldw	r2,-272(fp)
802008a4:	10800058 	cmpnei	r2,r2,1
802008a8:	10000e1e 	bne	r2,zero,802008e4 <bDdr2EepromDump+0x1c4>
#if DEBUG_ON
				sprintf(cDebugBuffer,
802008ac:	00e008b4 	movhi	r3,32802
802008b0:	18f53504 	addi	r3,r3,-11052
802008b4:	00a008b4 	movhi	r2,32802
802008b8:	10a9dc04 	addi	r2,r2,-22672
802008bc:	1009883a 	mov	r4,r2
802008c0:	00800c04 	movi	r2,48
802008c4:	100d883a 	mov	r6,r2
802008c8:	200b883a 	mov	r5,r4
802008cc:	1809883a 	mov	r4,r3
802008d0:	02051b40 	call	802051b4 <memcpy>
						"(Total Number of Bytes in SPD Device, Log2(N))\n");
				debug(fp, cDebugBuffer);
802008d4:	012008b4 	movhi	r4,32802
802008d8:	21353504 	addi	r4,r4,-11052
802008dc:	020532c0 	call	8020532c <printf>
802008e0:	00024806 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 2) {
802008e4:	e0bfbc17 	ldw	r2,-272(fp)
802008e8:	10800098 	cmpnei	r2,r2,2
802008ec:	10000e1e 	bne	r2,zero,80200928 <bDdr2EepromDump+0x208>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(Basic Memory Type[08h:DDR2])\n");
802008f0:	00e008b4 	movhi	r3,32802
802008f4:	18f53504 	addi	r3,r3,-11052
802008f8:	00a008b4 	movhi	r2,32802
802008fc:	10a9e804 	addi	r2,r2,-22624
80200900:	1009883a 	mov	r4,r2
80200904:	008007c4 	movi	r2,31
80200908:	100d883a 	mov	r6,r2
8020090c:	200b883a 	mov	r5,r4
80200910:	1809883a 	mov	r4,r3
80200914:	02051b40 	call	802051b4 <memcpy>
				debug(fp, cDebugBuffer);
80200918:	012008b4 	movhi	r4,32802
8020091c:	21353504 	addi	r4,r4,-11052
80200920:	020532c0 	call	8020532c <printf>
80200924:	00023706 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 3) {
80200928:	e0bfbc17 	ldw	r2,-272(fp)
8020092c:	108000d8 	cmpnei	r2,r2,3
80200930:	10000e1e 	bne	r2,zero,8020096c <bDdr2EepromDump+0x24c>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200934:	00e008b4 	movhi	r3,32802
80200938:	18f53504 	addi	r3,r3,-11052
8020093c:	00a008b4 	movhi	r2,32802
80200940:	10a9f004 	addi	r2,r2,-22592
80200944:	1009883a 	mov	r4,r2
80200948:	008009c4 	movi	r2,39
8020094c:	100d883a 	mov	r6,r2
80200950:	200b883a 	mov	r5,r4
80200954:	1809883a 	mov	r4,r3
80200958:	02051b40 	call	802051b4 <memcpy>
						"(Number of Row Addresses on Assembly)\n");
				debug(fp, cDebugBuffer);
8020095c:	012008b4 	movhi	r4,32802
80200960:	21353504 	addi	r4,r4,-11052
80200964:	020532c0 	call	8020532c <printf>
80200968:	00022606 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 4) {
8020096c:	e0bfbc17 	ldw	r2,-272(fp)
80200970:	10800118 	cmpnei	r2,r2,4
80200974:	10000e1e 	bne	r2,zero,802009b0 <bDdr2EepromDump+0x290>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200978:	00e008b4 	movhi	r3,32802
8020097c:	18f53504 	addi	r3,r3,-11052
80200980:	00a008b4 	movhi	r2,32802
80200984:	10a9fa04 	addi	r2,r2,-22552
80200988:	1009883a 	mov	r4,r2
8020098c:	00800a84 	movi	r2,42
80200990:	100d883a 	mov	r6,r2
80200994:	200b883a 	mov	r5,r4
80200998:	1809883a 	mov	r4,r3
8020099c:	02051b40 	call	802051b4 <memcpy>
						"(Number of Column Addresses on Assembly)\n");
				debug(fp, cDebugBuffer);
802009a0:	012008b4 	movhi	r4,32802
802009a4:	21353504 	addi	r4,r4,-11052
802009a8:	020532c0 	call	8020532c <printf>
802009ac:	00021506 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 5) {
802009b0:	e0bfbc17 	ldw	r2,-272(fp)
802009b4:	10800158 	cmpnei	r2,r2,5
802009b8:	10000e1e 	bne	r2,zero,802009f4 <bDdr2EepromDump+0x2d4>
#if DEBUG_ON
				sprintf(cDebugBuffer,
802009bc:	00e008b4 	movhi	r3,32802
802009c0:	18f53504 	addi	r3,r3,-11052
802009c4:	00a008b4 	movhi	r2,32802
802009c8:	10aa0504 	addi	r2,r2,-22508
802009cc:	1009883a 	mov	r4,r2
802009d0:	00800c04 	movi	r2,48
802009d4:	100d883a 	mov	r6,r2
802009d8:	200b883a 	mov	r5,r4
802009dc:	1809883a 	mov	r4,r3
802009e0:	02051b40 	call	802051b4 <memcpy>
						"(DIMM Height and Module Rank Number[b2b1b0+1])\n");
				debug(fp, cDebugBuffer);
802009e4:	012008b4 	movhi	r4,32802
802009e8:	21353504 	addi	r4,r4,-11052
802009ec:	020532c0 	call	8020532c <printf>
802009f0:	00020406 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 6) {
802009f4:	e0bfbc17 	ldw	r2,-272(fp)
802009f8:	10800198 	cmpnei	r2,r2,6
802009fc:	10000e1e 	bne	r2,zero,80200a38 <bDdr2EepromDump+0x318>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(Module Data Width)\n");
80200a00:	00e008b4 	movhi	r3,32802
80200a04:	18f53504 	addi	r3,r3,-11052
80200a08:	00a008b4 	movhi	r2,32802
80200a0c:	10aa1104 	addi	r2,r2,-22460
80200a10:	1009883a 	mov	r4,r2
80200a14:	00800544 	movi	r2,21
80200a18:	100d883a 	mov	r6,r2
80200a1c:	200b883a 	mov	r5,r4
80200a20:	1809883a 	mov	r4,r3
80200a24:	02051b40 	call	802051b4 <memcpy>
				debug(fp, cDebugBuffer);
80200a28:	012008b4 	movhi	r4,32802
80200a2c:	21353504 	addi	r4,r4,-11052
80200a30:	020532c0 	call	8020532c <printf>
80200a34:	0001f306 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 7) {
80200a38:	e0bfbc17 	ldw	r2,-272(fp)
80200a3c:	108001d8 	cmpnei	r2,r2,7
80200a40:	10000e1e 	bne	r2,zero,80200a7c <bDdr2EepromDump+0x35c>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(Module Data Width, Continued)\n");
80200a44:	00e008b4 	movhi	r3,32802
80200a48:	18f53504 	addi	r3,r3,-11052
80200a4c:	00a008b4 	movhi	r2,32802
80200a50:	10aa1704 	addi	r2,r2,-22436
80200a54:	1009883a 	mov	r4,r2
80200a58:	00800804 	movi	r2,32
80200a5c:	100d883a 	mov	r6,r2
80200a60:	200b883a 	mov	r5,r4
80200a64:	1809883a 	mov	r4,r3
80200a68:	02051b40 	call	802051b4 <memcpy>
				debug(fp, cDebugBuffer);
80200a6c:	012008b4 	movhi	r4,32802
80200a70:	21353504 	addi	r4,r4,-11052
80200a74:	020532c0 	call	8020532c <printf>
80200a78:	0001e206 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 16) {
80200a7c:	e0bfbc17 	ldw	r2,-272(fp)
80200a80:	10800418 	cmpnei	r2,r2,16
80200a84:	10000e1e 	bne	r2,zero,80200ac0 <bDdr2EepromDump+0x3a0>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200a88:	00e008b4 	movhi	r3,32802
80200a8c:	18f53504 	addi	r3,r3,-11052
80200a90:	00a008b4 	movhi	r2,32802
80200a94:	10aa1f04 	addi	r2,r2,-22404
80200a98:	1009883a 	mov	r4,r2
80200a9c:	00800d04 	movi	r2,52
80200aa0:	100d883a 	mov	r6,r2
80200aa4:	200b883a 	mov	r5,r4
80200aa8:	1809883a 	mov	r4,r3
80200aac:	02051b40 	call	802051b4 <memcpy>
						"(Burst Lengths Supported[bitmap: x x x x 8 4 x x])\n");
				debug(fp, cDebugBuffer);
80200ab0:	012008b4 	movhi	r4,32802
80200ab4:	21353504 	addi	r4,r4,-11052
80200ab8:	020532c0 	call	8020532c <printf>
80200abc:	0001d106 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 13) {
80200ac0:	e0bfbc17 	ldw	r2,-272(fp)
80200ac4:	10800358 	cmpnei	r2,r2,13
80200ac8:	10000e1e 	bne	r2,zero,80200b04 <bDdr2EepromDump+0x3e4>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(Primary SDRAM width)\n");
80200acc:	00e008b4 	movhi	r3,32802
80200ad0:	18f53504 	addi	r3,r3,-11052
80200ad4:	00a008b4 	movhi	r2,32802
80200ad8:	10aa2c04 	addi	r2,r2,-22352
80200adc:	1009883a 	mov	r4,r2
80200ae0:	008005c4 	movi	r2,23
80200ae4:	100d883a 	mov	r6,r2
80200ae8:	200b883a 	mov	r5,r4
80200aec:	1809883a 	mov	r4,r3
80200af0:	02051b40 	call	802051b4 <memcpy>
				debug(fp, cDebugBuffer);
80200af4:	012008b4 	movhi	r4,32802
80200af8:	21353504 	addi	r4,r4,-11052
80200afc:	020532c0 	call	8020532c <printf>
80200b00:	0001c006 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 14) {
80200b04:	e0bfbc17 	ldw	r2,-272(fp)
80200b08:	10800398 	cmpnei	r2,r2,14
80200b0c:	10000e1e 	bne	r2,zero,80200b48 <bDdr2EepromDump+0x428>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(ECC SDRAM width)\n");
80200b10:	00e008b4 	movhi	r3,32802
80200b14:	18f53504 	addi	r3,r3,-11052
80200b18:	00a008b4 	movhi	r2,32802
80200b1c:	10aa3204 	addi	r2,r2,-22328
80200b20:	1009883a 	mov	r4,r2
80200b24:	008004c4 	movi	r2,19
80200b28:	100d883a 	mov	r6,r2
80200b2c:	200b883a 	mov	r5,r4
80200b30:	1809883a 	mov	r4,r3
80200b34:	02051b40 	call	802051b4 <memcpy>
				debug(fp, cDebugBuffer);
80200b38:	012008b4 	movhi	r4,32802
80200b3c:	21353504 	addi	r4,r4,-11052
80200b40:	020532c0 	call	8020532c <printf>
80200b44:	0001af06 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 17) {
80200b48:	e0bfbc17 	ldw	r2,-272(fp)
80200b4c:	10800458 	cmpnei	r2,r2,17
80200b50:	10000e1e 	bne	r2,zero,80200b8c <bDdr2EepromDump+0x46c>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(Banks per SDRAM device)\n");
80200b54:	00e008b4 	movhi	r3,32802
80200b58:	18f53504 	addi	r3,r3,-11052
80200b5c:	00a008b4 	movhi	r2,32802
80200b60:	10aa3704 	addi	r2,r2,-22308
80200b64:	1009883a 	mov	r4,r2
80200b68:	00800684 	movi	r2,26
80200b6c:	100d883a 	mov	r6,r2
80200b70:	200b883a 	mov	r5,r4
80200b74:	1809883a 	mov	r4,r3
80200b78:	02051b40 	call	802051b4 <memcpy>
				debug(fp, cDebugBuffer);
80200b7c:	012008b4 	movhi	r4,32802
80200b80:	21353504 	addi	r4,r4,-11052
80200b84:	020532c0 	call	8020532c <printf>
80200b88:	00019e06 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 18) {
80200b8c:	e0bfbc17 	ldw	r2,-272(fp)
80200b90:	10800498 	cmpnei	r2,r2,18
80200b94:	10000e1e 	bne	r2,zero,80200bd0 <bDdr2EepromDump+0x4b0>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200b98:	00e008b4 	movhi	r3,32802
80200b9c:	18f53504 	addi	r3,r3,-11052
80200ba0:	00a008b4 	movhi	r2,32802
80200ba4:	10aa3e04 	addi	r2,r2,-22280
80200ba8:	1009883a 	mov	r4,r2
80200bac:	00800d44 	movi	r2,53
80200bb0:	100d883a 	mov	r6,r2
80200bb4:	200b883a 	mov	r5,r4
80200bb8:	1809883a 	mov	r4,r3
80200bbc:	02051b40 	call	802051b4 <memcpy>
						"(CAS lantencies supported[bitmap: x x 5 4 3 2 x x])\n");
				debug(fp, cDebugBuffer);
80200bc0:	012008b4 	movhi	r4,32802
80200bc4:	21353504 	addi	r4,r4,-11052
80200bc8:	020532c0 	call	8020532c <printf>
80200bcc:	00018d06 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 20) {
80200bd0:	e0bfbc17 	ldw	r2,-272(fp)
80200bd4:	10800518 	cmpnei	r2,r2,20
80200bd8:	10000e1e 	bne	r2,zero,80200c14 <bDdr2EepromDump+0x4f4>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200bdc:	00e008b4 	movhi	r3,32802
80200be0:	18f53504 	addi	r3,r3,-11052
80200be4:	00a008b4 	movhi	r2,32802
80200be8:	10aa4c04 	addi	r2,r2,-22224
80200bec:	1009883a 	mov	r4,r2
80200bf0:	00801204 	movi	r2,72
80200bf4:	100d883a 	mov	r6,r2
80200bf8:	200b883a 	mov	r5,r4
80200bfc:	1809883a 	mov	r4,r3
80200c00:	02051b40 	call	802051b4 <memcpy>
						"(DIMM Type: x x Mini-UDIMM Mini-RDIMM Micro-DIMM SO-DIMM UDIMMM RDIMM)\n");
				debug(fp, cDebugBuffer);
80200c04:	012008b4 	movhi	r4,32802
80200c08:	21353504 	addi	r4,r4,-11052
80200c0c:	020532c0 	call	8020532c <printf>
80200c10:	00017c06 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 22) {
80200c14:	e0bfbc17 	ldw	r2,-272(fp)
80200c18:	10800598 	cmpnei	r2,r2,22
80200c1c:	10000e1e 	bne	r2,zero,80200c58 <bDdr2EepromDump+0x538>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(Memory Chip feature bitmap)\n");
80200c20:	00e008b4 	movhi	r3,32802
80200c24:	18f53504 	addi	r3,r3,-11052
80200c28:	00a008b4 	movhi	r2,32802
80200c2c:	10aa5e04 	addi	r2,r2,-22152
80200c30:	1009883a 	mov	r4,r2
80200c34:	00800784 	movi	r2,30
80200c38:	100d883a 	mov	r6,r2
80200c3c:	200b883a 	mov	r5,r4
80200c40:	1809883a 	mov	r4,r3
80200c44:	02051b40 	call	802051b4 <memcpy>
				debug(fp, cDebugBuffer);
80200c48:	012008b4 	movhi	r4,32802
80200c4c:	21353504 	addi	r4,r4,-11052
80200c50:	020532c0 	call	8020532c <printf>
80200c54:	00016b06 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 27) {
80200c58:	e0bfbc17 	ldw	r2,-272(fp)
80200c5c:	108006d8 	cmpnei	r2,r2,27
80200c60:	10000e1e 	bne	r2,zero,80200c9c <bDdr2EepromDump+0x57c>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200c64:	00e008b4 	movhi	r3,32802
80200c68:	18f53504 	addi	r3,r3,-11052
80200c6c:	00a008b4 	movhi	r2,32802
80200c70:	10aa6604 	addi	r2,r2,-22120
80200c74:	1009883a 	mov	r4,r2
80200c78:	00800a04 	movi	r2,40
80200c7c:	100d883a 	mov	r6,r2
80200c80:	200b883a 	mov	r5,r4
80200c84:	1809883a 	mov	r4,r3
80200c88:	02051b40 	call	802051b4 <memcpy>
						"(Minimun row precharge time[tRP;nsx4])\n");
				debug(fp, cDebugBuffer);
80200c8c:	012008b4 	movhi	r4,32802
80200c90:	21353504 	addi	r4,r4,-11052
80200c94:	020532c0 	call	8020532c <printf>
80200c98:	00015a06 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 28) {
80200c9c:	e0bfbc17 	ldw	r2,-272(fp)
80200ca0:	10800718 	cmpnei	r2,r2,28
80200ca4:	10000e1e 	bne	r2,zero,80200ce0 <bDdr2EepromDump+0x5c0>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200ca8:	00e008b4 	movhi	r3,32802
80200cac:	18f53504 	addi	r3,r3,-11052
80200cb0:	00a008b4 	movhi	r2,32802
80200cb4:	10aa7004 	addi	r2,r2,-22080
80200cb8:	1009883a 	mov	r4,r2
80200cbc:	00800cc4 	movi	r2,51
80200cc0:	100d883a 	mov	r6,r2
80200cc4:	200b883a 	mov	r5,r4
80200cc8:	1809883a 	mov	r4,r3
80200ccc:	02051b40 	call	802051b4 <memcpy>
						"(Minimun row active-row activce delay[tRRD;nsx4])\n");
				debug(fp, cDebugBuffer);
80200cd0:	012008b4 	movhi	r4,32802
80200cd4:	21353504 	addi	r4,r4,-11052
80200cd8:	020532c0 	call	8020532c <printf>
80200cdc:	00014906 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 29) {
80200ce0:	e0bfbc17 	ldw	r2,-272(fp)
80200ce4:	10800758 	cmpnei	r2,r2,29
80200ce8:	10000e1e 	bne	r2,zero,80200d24 <bDdr2EepromDump+0x604>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200cec:	00e008b4 	movhi	r3,32802
80200cf0:	18f53504 	addi	r3,r3,-11052
80200cf4:	00a008b4 	movhi	r2,32802
80200cf8:	10aa7d04 	addi	r2,r2,-22028
80200cfc:	1009883a 	mov	r4,r2
80200d00:	008009c4 	movi	r2,39
80200d04:	100d883a 	mov	r6,r2
80200d08:	200b883a 	mov	r5,r4
80200d0c:	1809883a 	mov	r4,r3
80200d10:	02051b40 	call	802051b4 <memcpy>
						"(Minimun RAS to CAS delay[tRCD;nsx4])\n");
				debug(fp, cDebugBuffer);
80200d14:	012008b4 	movhi	r4,32802
80200d18:	21353504 	addi	r4,r4,-11052
80200d1c:	020532c0 	call	8020532c <printf>
80200d20:	00013806 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 30) {
80200d24:	e0bfbc17 	ldw	r2,-272(fp)
80200d28:	10800798 	cmpnei	r2,r2,30
80200d2c:	10000e1e 	bne	r2,zero,80200d68 <bDdr2EepromDump+0x648>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200d30:	00e008b4 	movhi	r3,32802
80200d34:	18f53504 	addi	r3,r3,-11052
80200d38:	00a008b4 	movhi	r2,32802
80200d3c:	10aa8704 	addi	r2,r2,-21988
80200d40:	1009883a 	mov	r4,r2
80200d44:	00800b04 	movi	r2,44
80200d48:	100d883a 	mov	r6,r2
80200d4c:	200b883a 	mov	r5,r4
80200d50:	1809883a 	mov	r4,r3
80200d54:	02051b40 	call	802051b4 <memcpy>
						"(Minimun acive to precharge time[tRAS;ns])\n");
				debug(fp, cDebugBuffer);
80200d58:	012008b4 	movhi	r4,32802
80200d5c:	21353504 	addi	r4,r4,-11052
80200d60:	020532c0 	call	8020532c <printf>
80200d64:	00012706 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 31) {
80200d68:	e0bfbc17 	ldw	r2,-272(fp)
80200d6c:	108007d8 	cmpnei	r2,r2,31
80200d70:	10000e1e 	bne	r2,zero,80200dac <bDdr2EepromDump+0x68c>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200d74:	00e008b4 	movhi	r3,32802
80200d78:	18f53504 	addi	r3,r3,-11052
80200d7c:	00a008b4 	movhi	r2,32802
80200d80:	10aa9204 	addi	r2,r2,-21944
80200d84:	1009883a 	mov	r4,r2
80200d88:	008010c4 	movi	r2,67
80200d8c:	100d883a 	mov	r6,r2
80200d90:	200b883a 	mov	r5,r4
80200d94:	1809883a 	mov	r4,r3
80200d98:	02051b40 	call	802051b4 <memcpy>
						"(Size of each rank[bitmap:512MB,256MB,128MB,16GB,8GB,4GB,2GB,1GB)\n");
				debug(fp, cDebugBuffer);
80200d9c:	012008b4 	movhi	r4,32802
80200da0:	21353504 	addi	r4,r4,-11052
80200da4:	020532c0 	call	8020532c <printf>
80200da8:	00011606 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 36) {
80200dac:	e0bfbc17 	ldw	r2,-272(fp)
80200db0:	10800918 	cmpnei	r2,r2,36
80200db4:	10000e1e 	bne	r2,zero,80200df0 <bDdr2EepromDump+0x6d0>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200db8:	00e008b4 	movhi	r3,32802
80200dbc:	18f53504 	addi	r3,r3,-11052
80200dc0:	00a008b4 	movhi	r2,32802
80200dc4:	10aaa304 	addi	r2,r2,-21876
80200dc8:	1009883a 	mov	r4,r2
80200dcc:	00800a84 	movi	r2,42
80200dd0:	100d883a 	mov	r6,r2
80200dd4:	200b883a 	mov	r5,r4
80200dd8:	1809883a 	mov	r4,r3
80200ddc:	02051b40 	call	802051b4 <memcpy>
						"(Minimun write receovery time[tWR;nsx4])\n");
				debug(fp, cDebugBuffer);
80200de0:	012008b4 	movhi	r4,32802
80200de4:	21353504 	addi	r4,r4,-11052
80200de8:	020532c0 	call	8020532c <printf>
80200dec:	00010506 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 37) {
80200df0:	e0bfbc17 	ldw	r2,-272(fp)
80200df4:	10800958 	cmpnei	r2,r2,37
80200df8:	10000e1e 	bne	r2,zero,80200e34 <bDdr2EepromDump+0x714>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200dfc:	00e008b4 	movhi	r3,32802
80200e00:	18f53504 	addi	r3,r3,-11052
80200e04:	00a008b4 	movhi	r2,32802
80200e08:	10aaae04 	addi	r2,r2,-21832
80200e0c:	1009883a 	mov	r4,r2
80200e10:	00800cc4 	movi	r2,51
80200e14:	100d883a 	mov	r6,r2
80200e18:	200b883a 	mov	r5,r4
80200e1c:	1809883a 	mov	r4,r3
80200e20:	02051b40 	call	802051b4 <memcpy>
						"(Internal write to read command delay[tWTR;nsx4])\n");
				debug(fp, cDebugBuffer);
80200e24:	012008b4 	movhi	r4,32802
80200e28:	21353504 	addi	r4,r4,-11052
80200e2c:	020532c0 	call	8020532c <printf>
80200e30:	0000f406 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 38) {
80200e34:	e0bfbc17 	ldw	r2,-272(fp)
80200e38:	10800998 	cmpnei	r2,r2,38
80200e3c:	10000e1e 	bne	r2,zero,80200e78 <bDdr2EepromDump+0x758>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200e40:	00e008b4 	movhi	r3,32802
80200e44:	18f53504 	addi	r3,r3,-11052
80200e48:	00a008b4 	movhi	r2,32802
80200e4c:	10aabb04 	addi	r2,r2,-21780
80200e50:	1009883a 	mov	r4,r2
80200e54:	00800dc4 	movi	r2,55
80200e58:	100d883a 	mov	r6,r2
80200e5c:	200b883a 	mov	r5,r4
80200e60:	1809883a 	mov	r4,r3
80200e64:	02051b40 	call	802051b4 <memcpy>
						"(Internal read to precharge command delay[tRTP;nsx4])\n");
				debug(fp, cDebugBuffer);
80200e68:	012008b4 	movhi	r4,32802
80200e6c:	21353504 	addi	r4,r4,-11052
80200e70:	020532c0 	call	8020532c <printf>
80200e74:	0000e306 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 41) {
80200e78:	e0bfbc17 	ldw	r2,-272(fp)
80200e7c:	10800a58 	cmpnei	r2,r2,41
80200e80:	10000e1e 	bne	r2,zero,80200ebc <bDdr2EepromDump+0x79c>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200e84:	00e008b4 	movhi	r3,32802
80200e88:	18f53504 	addi	r3,r3,-11052
80200e8c:	00a008b4 	movhi	r2,32802
80200e90:	10aac904 	addi	r2,r2,-21724
80200e94:	1009883a 	mov	r4,r2
80200e98:	00800c84 	movi	r2,50
80200e9c:	100d883a 	mov	r6,r2
80200ea0:	200b883a 	mov	r5,r4
80200ea4:	1809883a 	mov	r4,r3
80200ea8:	02051b40 	call	802051b4 <memcpy>
						"(Minimun activce to active/refresh time[tRC;ns])\n");
				debug(fp, cDebugBuffer);
80200eac:	012008b4 	movhi	r4,32802
80200eb0:	21353504 	addi	r4,r4,-11052
80200eb4:	020532c0 	call	8020532c <printf>
80200eb8:	0000d206 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 42) {
80200ebc:	e0bfbc17 	ldw	r2,-272(fp)
80200ec0:	10800a98 	cmpnei	r2,r2,42
80200ec4:	10000e1e 	bne	r2,zero,80200f00 <bDdr2EepromDump+0x7e0>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200ec8:	00e008b4 	movhi	r3,32802
80200ecc:	18f53504 	addi	r3,r3,-11052
80200ed0:	00a008b4 	movhi	r2,32802
80200ed4:	10aad604 	addi	r2,r2,-21672
80200ed8:	1009883a 	mov	r4,r2
80200edc:	00800cc4 	movi	r2,51
80200ee0:	100d883a 	mov	r6,r2
80200ee4:	200b883a 	mov	r5,r4
80200ee8:	1809883a 	mov	r4,r3
80200eec:	02051b40 	call	802051b4 <memcpy>
						"(Minimun refresh to active/refresh time[tRFC;ns])\n");
				debug(fp, cDebugBuffer);
80200ef0:	012008b4 	movhi	r4,32802
80200ef4:	21353504 	addi	r4,r4,-11052
80200ef8:	020532c0 	call	8020532c <printf>
80200efc:	0000c106 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 62) {
80200f00:	e0bfbc17 	ldw	r2,-272(fp)
80200f04:	10800f98 	cmpnei	r2,r2,62
80200f08:	10000e1e 	bne	r2,zero,80200f44 <bDdr2EepromDump+0x824>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(SPD Revision)\n");
80200f0c:	00e008b4 	movhi	r3,32802
80200f10:	18f53504 	addi	r3,r3,-11052
80200f14:	00a008b4 	movhi	r2,32802
80200f18:	10aae304 	addi	r2,r2,-21620
80200f1c:	1009883a 	mov	r4,r2
80200f20:	00800404 	movi	r2,16
80200f24:	100d883a 	mov	r6,r2
80200f28:	200b883a 	mov	r5,r4
80200f2c:	1809883a 	mov	r4,r3
80200f30:	02051b40 	call	802051b4 <memcpy>
				debug(fp, cDebugBuffer);
80200f34:	012008b4 	movhi	r4,32802
80200f38:	21353504 	addi	r4,r4,-11052
80200f3c:	020532c0 	call	8020532c <printf>
80200f40:	0000b006 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 63) {
80200f44:	e0bfbc17 	ldw	r2,-272(fp)
80200f48:	10800fd8 	cmpnei	r2,r2,63
80200f4c:	10001d1e 	bne	r2,zero,80200fc4 <bDdr2EepromDump+0x8a4>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(Checksum)\n");
80200f50:	00a008b4 	movhi	r2,32802
80200f54:	10b53504 	addi	r2,r2,-11052
80200f58:	00c00a04 	movi	r3,40
80200f5c:	10c00005 	stb	r3,0(r2)
80200f60:	00c010c4 	movi	r3,67
80200f64:	10c00045 	stb	r3,1(r2)
80200f68:	00c01a04 	movi	r3,104
80200f6c:	10c00085 	stb	r3,2(r2)
80200f70:	00c01944 	movi	r3,101
80200f74:	10c000c5 	stb	r3,3(r2)
80200f78:	00c018c4 	movi	r3,99
80200f7c:	10c00105 	stb	r3,4(r2)
80200f80:	00c01ac4 	movi	r3,107
80200f84:	10c00145 	stb	r3,5(r2)
80200f88:	00c01cc4 	movi	r3,115
80200f8c:	10c00185 	stb	r3,6(r2)
80200f90:	00c01d44 	movi	r3,117
80200f94:	10c001c5 	stb	r3,7(r2)
80200f98:	00c01b44 	movi	r3,109
80200f9c:	10c00205 	stb	r3,8(r2)
80200fa0:	00c00a44 	movi	r3,41
80200fa4:	10c00245 	stb	r3,9(r2)
80200fa8:	00c00284 	movi	r3,10
80200fac:	10c00285 	stb	r3,10(r2)
80200fb0:	100002c5 	stb	zero,11(r2)
				debug(fp, cDebugBuffer);
80200fb4:	012008b4 	movhi	r4,32802
80200fb8:	21353504 	addi	r4,r4,-11052
80200fbc:	020532c0 	call	8020532c <printf>
80200fc0:	00009006 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 64) {
80200fc4:	e0bfbc17 	ldw	r2,-272(fp)
80200fc8:	10801018 	cmpnei	r2,r2,64
80200fcc:	10000e1e 	bne	r2,zero,80201008 <bDdr2EepromDump+0x8e8>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(64~71: Manufacturer JEDEC ID)\n");
80200fd0:	00e008b4 	movhi	r3,32802
80200fd4:	18f53504 	addi	r3,r3,-11052
80200fd8:	00a008b4 	movhi	r2,32802
80200fdc:	10aae704 	addi	r2,r2,-21604
80200fe0:	1009883a 	mov	r4,r2
80200fe4:	00800804 	movi	r2,32
80200fe8:	100d883a 	mov	r6,r2
80200fec:	200b883a 	mov	r5,r4
80200ff0:	1809883a 	mov	r4,r3
80200ff4:	02051b40 	call	802051b4 <memcpy>
				debug(fp, cDebugBuffer);
80200ff8:	012008b4 	movhi	r4,32802
80200ffc:	21353504 	addi	r4,r4,-11052
80201000:	020532c0 	call	8020532c <printf>
80201004:	00007f06 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 72) {
80201008:	e0bfbc17 	ldw	r2,-272(fp)
8020100c:	10801218 	cmpnei	r2,r2,72
80201010:	10000e1e 	bne	r2,zero,8020104c <bDdr2EepromDump+0x92c>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80201014:	00e008b4 	movhi	r3,32802
80201018:	18f53504 	addi	r3,r3,-11052
8020101c:	00a008b4 	movhi	r2,32802
80201020:	10aaef04 	addi	r2,r2,-21572
80201024:	1009883a 	mov	r4,r2
80201028:	00800dc4 	movi	r2,55
8020102c:	100d883a 	mov	r6,r2
80201030:	200b883a 	mov	r5,r4
80201034:	1809883a 	mov	r4,r3
80201038:	02051b40 	call	802051b4 <memcpy>
						"(Module manufacturing location[Vendor-specific code])\n");
				debug(fp, cDebugBuffer);
8020103c:	012008b4 	movhi	r4,32802
80201040:	21353504 	addi	r4,r4,-11052
80201044:	020532c0 	call	8020532c <printf>
80201048:	00006e06 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 73) {
8020104c:	e0bfbc17 	ldw	r2,-272(fp)
80201050:	10801258 	cmpnei	r2,r2,73
80201054:	10000e1e 	bne	r2,zero,80201090 <bDdr2EepromDump+0x970>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(73~90: Moduloe part number)\n");
80201058:	00e008b4 	movhi	r3,32802
8020105c:	18f53504 	addi	r3,r3,-11052
80201060:	00a008b4 	movhi	r2,32802
80201064:	10aafd04 	addi	r2,r2,-21516
80201068:	1009883a 	mov	r4,r2
8020106c:	00800784 	movi	r2,30
80201070:	100d883a 	mov	r6,r2
80201074:	200b883a 	mov	r5,r4
80201078:	1809883a 	mov	r4,r3
8020107c:	02051b40 	call	802051b4 <memcpy>
				debug(fp, cDebugBuffer);
80201080:	012008b4 	movhi	r4,32802
80201084:	21353504 	addi	r4,r4,-11052
80201088:	020532c0 	call	8020532c <printf>
8020108c:	00005d06 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 91) {
80201090:	e0bfbc17 	ldw	r2,-272(fp)
80201094:	108016d8 	cmpnei	r2,r2,91
80201098:	10000e1e 	bne	r2,zero,802010d4 <bDdr2EepromDump+0x9b4>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(91~92: Moduloe revision code)\n");
8020109c:	00e008b4 	movhi	r3,32802
802010a0:	18f53504 	addi	r3,r3,-11052
802010a4:	00a008b4 	movhi	r2,32802
802010a8:	10ab0504 	addi	r2,r2,-21484
802010ac:	1009883a 	mov	r4,r2
802010b0:	00800804 	movi	r2,32
802010b4:	100d883a 	mov	r6,r2
802010b8:	200b883a 	mov	r5,r4
802010bc:	1809883a 	mov	r4,r3
802010c0:	02051b40 	call	802051b4 <memcpy>
				debug(fp, cDebugBuffer);
802010c4:	012008b4 	movhi	r4,32802
802010c8:	21353504 	addi	r4,r4,-11052
802010cc:	020532c0 	call	8020532c <printf>
802010d0:	00004c06 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 93) {
802010d4:	e0bfbc17 	ldw	r2,-272(fp)
802010d8:	10801758 	cmpnei	r2,r2,93
802010dc:	10000e1e 	bne	r2,zero,80201118 <bDdr2EepromDump+0x9f8>
#if DEBUG_ON
				sprintf(cDebugBuffer,
802010e0:	00e008b4 	movhi	r3,32802
802010e4:	18f53504 	addi	r3,r3,-11052
802010e8:	00a008b4 	movhi	r2,32802
802010ec:	10ab0d04 	addi	r2,r2,-21452
802010f0:	1009883a 	mov	r4,r2
802010f4:	008009c4 	movi	r2,39
802010f8:	100d883a 	mov	r6,r2
802010fc:	200b883a 	mov	r5,r4
80201100:	1809883a 	mov	r4,r3
80201104:	02051b40 	call	802051b4 <memcpy>
						"(Manufacture Years since 2000[0-255])\n");
				debug(fp, cDebugBuffer);
80201108:	012008b4 	movhi	r4,32802
8020110c:	21353504 	addi	r4,r4,-11052
80201110:	020532c0 	call	8020532c <printf>
80201114:	00003b06 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 94) {
80201118:	e0bfbc17 	ldw	r2,-272(fp)
8020111c:	10801798 	cmpnei	r2,r2,94
80201120:	10000e1e 	bne	r2,zero,8020115c <bDdr2EepromDump+0xa3c>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(Manufacture Weeks[1-52])\n");
80201124:	00e008b4 	movhi	r3,32802
80201128:	18f53504 	addi	r3,r3,-11052
8020112c:	00a008b4 	movhi	r2,32802
80201130:	10ab1704 	addi	r2,r2,-21412
80201134:	1009883a 	mov	r4,r2
80201138:	008006c4 	movi	r2,27
8020113c:	100d883a 	mov	r6,r2
80201140:	200b883a 	mov	r5,r4
80201144:	1809883a 	mov	r4,r3
80201148:	02051b40 	call	802051b4 <memcpy>
				debug(fp, cDebugBuffer);
8020114c:	012008b4 	movhi	r4,32802
80201150:	21353504 	addi	r4,r4,-11052
80201154:	020532c0 	call	8020532c <printf>
80201158:	00002a06 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 95) {
8020115c:	e0bfbc17 	ldw	r2,-272(fp)
80201160:	108017d8 	cmpnei	r2,r2,95
80201164:	10000e1e 	bne	r2,zero,802011a0 <bDdr2EepromDump+0xa80>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80201168:	00e008b4 	movhi	r3,32802
8020116c:	18f53504 	addi	r3,r3,-11052
80201170:	00a008b4 	movhi	r2,32802
80201174:	10ab1e04 	addi	r2,r2,-21384
80201178:	1009883a 	mov	r4,r2
8020117c:	00800a04 	movi	r2,40
80201180:	100d883a 	mov	r6,r2
80201184:	200b883a 	mov	r5,r4
80201188:	1809883a 	mov	r4,r3
8020118c:	02051b40 	call	802051b4 <memcpy>
						"(95~98[4-bytes]: Module serial number)\n");
				debug(fp, cDebugBuffer);
80201190:	012008b4 	movhi	r4,32802
80201194:	21353504 	addi	r4,r4,-11052
80201198:	020532c0 	call	8020532c <printf>
8020119c:	00001906 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 99) {
802011a0:	e0bfbc17 	ldw	r2,-272(fp)
802011a4:	108018d8 	cmpnei	r2,r2,99
802011a8:	10000e1e 	bne	r2,zero,802011e4 <bDdr2EepromDump+0xac4>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(99~128: Manufacturer-specific data)\n");
802011ac:	00e008b4 	movhi	r3,32802
802011b0:	18f53504 	addi	r3,r3,-11052
802011b4:	00a008b4 	movhi	r2,32802
802011b8:	10ab2804 	addi	r2,r2,-21344
802011bc:	1009883a 	mov	r4,r2
802011c0:	00800984 	movi	r2,38
802011c4:	100d883a 	mov	r6,r2
802011c8:	200b883a 	mov	r5,r4
802011cc:	1809883a 	mov	r4,r3
802011d0:	02051b40 	call	802051b4 <memcpy>
				debug(fp, cDebugBuffer);
802011d4:	012008b4 	movhi	r4,32802
802011d8:	21353504 	addi	r4,r4,-11052
802011dc:	020532c0 	call	8020532c <printf>
802011e0:	00000806 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else {
#if DEBUG_ON
				sprintf(cDebugBuffer, "\n");
802011e4:	00a008b4 	movhi	r2,32802
802011e8:	10b53504 	addi	r2,r2,-11052
802011ec:	00c00284 	movi	r3,10
802011f0:	10c00005 	stb	r3,0(r2)
802011f4:	10000045 	stb	zero,1(r2)
				debug(fp, cDebugBuffer);
802011f8:	012008b4 	movhi	r4,32802
802011fc:	21353504 	addi	r4,r4,-11052
80201200:	020532c0 	call	8020532c <printf>

	alt_u8 ucSZData[256];
	bSuccess = I2C_MultipleRead(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
			ucSZData, sizeof(ucSZData));
	if (bSuccess) {
		for (iI = 0; iI < 256 && bSuccess; iI++) {
80201204:	e0bfbc17 	ldw	r2,-272(fp)
80201208:	10800044 	addi	r2,r2,1
8020120c:	e0bfbc15 	stw	r2,-272(fp)
80201210:	e0bfbc17 	ldw	r2,-272(fp)
80201214:	10804008 	cmpgei	r2,r2,256
80201218:	1000101e 	bne	r2,zero,8020125c <bDdr2EepromDump+0xb3c>
8020121c:	e0bfbe17 	ldw	r2,-264(fp)
80201220:	103d8d1e 	bne	r2,zero,80200858 <__reset+0xfa1e0858>
80201224:	00000d06 	br	8020125c <bDdr2EepromDump+0xb3c>
#endif
			}
		}
	} else {
#if DEBUG_ON
		sprintf(cDebugBuffer, "Failed to dump EEPROM\n");
80201228:	00e008b4 	movhi	r3,32802
8020122c:	18f53504 	addi	r3,r3,-11052
80201230:	00a008b4 	movhi	r2,32802
80201234:	10ab3204 	addi	r2,r2,-21304
80201238:	1009883a 	mov	r4,r2
8020123c:	008005c4 	movi	r2,23
80201240:	100d883a 	mov	r6,r2
80201244:	200b883a 	mov	r5,r4
80201248:	1809883a 	mov	r4,r3
8020124c:	02051b40 	call	802051b4 <memcpy>
		debug(fp, cDebugBuffer);
80201250:	012008b4 	movhi	r4,32802
80201254:	21353504 	addi	r4,r4,-11052
80201258:	020532c0 	call	8020532c <printf>
#endif
	}
#if DEBUG_ON
	sprintf(cDebugBuffer, "\n");
8020125c:	00a008b4 	movhi	r2,32802
80201260:	10b53504 	addi	r2,r2,-11052
80201264:	00c00284 	movi	r3,10
80201268:	10c00005 	stb	r3,0(r2)
8020126c:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
80201270:	012008b4 	movhi	r4,32802
80201274:	21353504 	addi	r4,r4,-11052
80201278:	020532c0 	call	8020532c <printf>
#endif

	return bSuccess;
8020127c:	e0bfbe17 	ldw	r2,-264(fp)
}
80201280:	e037883a 	mov	sp,fp
80201284:	dfc00117 	ldw	ra,4(sp)
80201288:	df000017 	ldw	fp,0(sp)
8020128c:	dec00204 	addi	sp,sp,8
80201290:	f800283a 	ret

80201294 <bDdr2SwitchMemory>:

bool bDdr2SwitchMemory(alt_u8 ucMemoryId) {
80201294:	defffb04 	addi	sp,sp,-20
80201298:	dfc00415 	stw	ra,16(sp)
8020129c:	df000315 	stw	fp,12(sp)
802012a0:	df000304 	addi	fp,sp,12
802012a4:	2005883a 	mov	r2,r4
802012a8:	e0bfff05 	stb	r2,-4(fp)

	bool bSuccess = FALSE;
802012ac:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 *puliDdr2MemAddr = (alt_u32 *) DDR2_EXT_ADDR_CONTROL_BASE;
802012b0:	00a00034 	movhi	r2,32768
802012b4:	10822204 	addi	r2,r2,2184
802012b8:	e0bffe15 	stw	r2,-8(fp)

	switch (ucMemoryId) {
802012bc:	e0bfff03 	ldbu	r2,-4(fp)
802012c0:	10000326 	beq	r2,zero,802012d0 <bDdr2SwitchMemory+0x3c>
802012c4:	10800060 	cmpeqi	r2,r2,1
802012c8:	1000061e 	bne	r2,zero,802012e4 <bDdr2SwitchMemory+0x50>
802012cc:	00000b06 	br	802012fc <bDdr2SwitchMemory+0x68>
	case DDR2_M1_ID:
		*(puliDdr2MemAddr) = (alt_u32) DDR2_M1_MEMORY_WINDOWED_OFFSET;
802012d0:	e0bffe17 	ldw	r2,-8(fp)
802012d4:	10000015 	stw	zero,0(r2)
		bSuccess = TRUE;
802012d8:	00800044 	movi	r2,1
802012dc:	e0bffd15 	stw	r2,-12(fp)
		break;
802012e0:	00001406 	br	80201334 <bDdr2SwitchMemory+0xa0>
	case DDR2_M2_ID:
		*(puliDdr2MemAddr) = (alt_u32) DDR2_M2_MEMORY_WINDOWED_OFFSET;
802012e4:	e0bffe17 	ldw	r2,-8(fp)
802012e8:	00e00034 	movhi	r3,32768
802012ec:	10c00015 	stw	r3,0(r2)
		bSuccess = TRUE;
802012f0:	00800044 	movi	r2,1
802012f4:	e0bffd15 	stw	r2,-12(fp)
		break;
802012f8:	00000e06 	br	80201334 <bDdr2SwitchMemory+0xa0>
	default:
		bSuccess = FALSE;
802012fc:	e03ffd15 	stw	zero,-12(fp)
#if DEBUG_ON
		sprintf(cDebugBuffer,
80201300:	00e008b4 	movhi	r3,32802
80201304:	18f53504 	addi	r3,r3,-11052
80201308:	00a008b4 	movhi	r2,32802
8020130c:	10ab3804 	addi	r2,r2,-21280
80201310:	1009883a 	mov	r4,r2
80201314:	00800f04 	movi	r2,60
80201318:	100d883a 	mov	r6,r2
8020131c:	200b883a 	mov	r5,r4
80201320:	1809883a 	mov	r4,r3
80201324:	02051b40 	call	802051b4 <memcpy>
				"DR2 Memory ID not identified!! Error switching memories!! \n");
		debug(fp, cDebugBuffer)
80201328:	012008b4 	movhi	r4,32802
8020132c:	21353504 	addi	r4,r4,-11052
80201330:	020532c0 	call	8020532c <printf>
		;
#endif
	}

	return bSuccess;
80201334:	e0bffd17 	ldw	r2,-12(fp)
}
80201338:	e037883a 	mov	sp,fp
8020133c:	dfc00117 	ldw	ra,4(sp)
80201340:	df000017 	ldw	fp,0(sp)
80201344:	dec00204 	addi	sp,sp,8
80201348:	f800283a 	ret

8020134c <bDdr2MemoryWriteTest>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryWriteTest(alt_u8 ucMemoryId) {
8020134c:	deffe204 	addi	sp,sp,-120
80201350:	dfc01d15 	stw	ra,116(sp)
80201354:	df001c15 	stw	fp,112(sp)
80201358:	dc401b15 	stw	r17,108(sp)
8020135c:	dc001a15 	stw	r16,104(sp)
80201360:	df001c04 	addi	fp,sp,112
80201364:	2005883a 	mov	r2,r4
80201368:	e0bffd05 	stb	r2,-12(fp)

#if DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Write Test =====\n");
8020136c:	00e008b4 	movhi	r3,32802
80201370:	18f53504 	addi	r3,r3,-11052
80201374:	00a008b4 	movhi	r2,32802
80201378:	10ab4704 	addi	r2,r2,-21220
8020137c:	1009883a 	mov	r4,r2
80201380:	00800a04 	movi	r2,40
80201384:	100d883a 	mov	r6,r2
80201388:	200b883a 	mov	r5,r4
8020138c:	1809883a 	mov	r4,r3
80201390:	02051b40 	call	802051b4 <memcpy>
	debug(fp, cDebugBuffer);
80201394:	012008b4 	movhi	r4,32802
80201398:	21353504 	addi	r4,r4,-11052
8020139c:	020532c0 	call	8020532c <printf>
#endif
	bool bSuccess = FALSE;
802013a0:	e03fe515 	stw	zero,-108(fp)
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	switch (ucMemoryId) {
802013a4:	e0bffd03 	ldbu	r2,-12(fp)
802013a8:	10000326 	beq	r2,zero,802013b8 <bDdr2MemoryWriteTest+0x6c>
802013ac:	10800060 	cmpeqi	r2,r2,1
802013b0:	10000a1e 	bne	r2,zero,802013dc <bDdr2MemoryWriteTest+0x90>
802013b4:	00001206 	br	80201400 <bDdr2MemoryWriteTest+0xb4>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
802013b8:	e0bffd03 	ldbu	r2,-12(fp)
802013bc:	1009883a 	mov	r4,r2
802013c0:	02012940 	call	80201294 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
802013c4:	e03fe615 	stw	zero,-104(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
802013c8:	00a00034 	movhi	r2,32768
802013cc:	e0bfe715 	stw	r2,-100(fp)
		bSuccess = TRUE;
802013d0:	00800044 	movi	r2,1
802013d4:	e0bfe515 	stw	r2,-108(fp)
		break;
802013d8:	00001906 	br	80201440 <bDdr2MemoryWriteTest+0xf4>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
802013dc:	e0bffd03 	ldbu	r2,-12(fp)
802013e0:	1009883a 	mov	r4,r2
802013e4:	02012940 	call	80201294 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
802013e8:	e03fe615 	stw	zero,-104(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
802013ec:	00a00034 	movhi	r2,32768
802013f0:	e0bfe715 	stw	r2,-100(fp)
		bSuccess = TRUE;
802013f4:	00800044 	movi	r2,1
802013f8:	e0bfe515 	stw	r2,-108(fp)
		break;
802013fc:	00001006 	br	80201440 <bDdr2MemoryWriteTest+0xf4>
	default:
		bSuccess = FALSE;
80201400:	e03fe515 	stw	zero,-108(fp)
#if DEBUG_ON
		sprintf(cDebugBuffer,
80201404:	00e008b4 	movhi	r3,32802
80201408:	18f53504 	addi	r3,r3,-11052
8020140c:	00a008b4 	movhi	r2,32802
80201410:	10a95804 	addi	r2,r2,-23200
80201414:	1009883a 	mov	r4,r2
80201418:	00800bc4 	movi	r2,47
8020141c:	100d883a 	mov	r6,r2
80201420:	200b883a 	mov	r5,r4
80201424:	1809883a 	mov	r4,r3
80201428:	02051b40 	call	802051b4 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
8020142c:	012008b4 	movhi	r4,32802
80201430:	21353504 	addi	r4,r4,-11052
80201434:	020532c0 	call	8020532c <printf>
		;
#endif
		return bSuccess;
80201438:	e0bfe517 	ldw	r2,-108(fp)
8020143c:	00010a06 	br	80201868 <bDdr2MemoryWriteTest+0x51c>
	}

#if DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %ld MBytes\n", uliByteLen / 1024 / 1024);
80201440:	e0bfe717 	ldw	r2,-100(fp)
80201444:	1004d53a 	srli	r2,r2,20
80201448:	100d883a 	mov	r6,r2
8020144c:	016008b4 	movhi	r5,32802
80201450:	296b5104 	addi	r5,r5,-21180
80201454:	012008b4 	movhi	r4,32802
80201458:	21353504 	addi	r4,r4,-11052
8020145c:	02054940 	call	80205494 <sprintf>
	debug(fp, cDebugBuffer);
80201460:	012008b4 	movhi	r4,32802
80201464:	21353504 	addi	r4,r4,-11052
80201468:	020532c0 	call	8020532c <printf>

	int iI, iNRemainedLen, iNAccessLen;
	TMyData *pxDes;

	int iNItemNum, iNPos;
	const int ciMyDataSize = sizeof(TMyData);
8020146c:	00800104 	movi	r2,4
80201470:	e0bfee15 	stw	r2,-72(fp)
	int iNProgressIndex = 0;
80201474:	e03fed15 	stw	zero,-76(fp)
	alt_u32 uliInitValue;
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;
80201478:	e03fef15 	stw	zero,-68(fp)

	for (iI = 0; iI < 10; iI++) {
8020147c:	e03fe815 	stw	zero,-96(fp)
80201480:	00001506 	br	802014d8 <bDdr2MemoryWriteTest+0x18c>
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
80201484:	e0ffe717 	ldw	r3,-100(fp)
80201488:	00b33374 	movhi	r2,52429
8020148c:	10b33344 	addi	r2,r2,-13107
80201490:	1888383a 	mulxuu	r4,r3,r2
80201494:	1885383a 	mul	r2,r3,r2
80201498:	1021883a 	mov	r16,r2
8020149c:	2023883a 	mov	r17,r4
802014a0:	8804d0fa 	srli	r2,r17,3
802014a4:	e0ffe817 	ldw	r3,-96(fp)
802014a8:	18c00044 	addi	r3,r3,1
802014ac:	10c7383a 	mul	r3,r2,r3
802014b0:	e0bfe817 	ldw	r2,-96(fp)
802014b4:	1085883a 	add	r2,r2,r2
802014b8:	1085883a 	add	r2,r2,r2
802014bc:	e13fe504 	addi	r4,fp,-108
802014c0:	2085883a 	add	r2,r4,r2
802014c4:	10800e04 	addi	r2,r2,56
802014c8:	10c00015 	stw	r3,0(r2)
	int iNProgressIndex = 0;
	alt_u32 uliInitValue;
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;

	for (iI = 0; iI < 10; iI++) {
802014cc:	e0bfe817 	ldw	r2,-96(fp)
802014d0:	10800044 	addi	r2,r2,1
802014d4:	e0bfe815 	stw	r2,-96(fp)
802014d8:	e0bfe817 	ldw	r2,-96(fp)
802014dc:	10800290 	cmplti	r2,r2,10
802014e0:	103fe81e 	bne	r2,zero,80201484 <__reset+0xfa1e1484>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
802014e4:	d0a02517 	ldw	r2,-32620(gp)
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
	}
	uliInitValue = alt_nticks();
802014e8:	e0bff015 	stw	r2,-64(fp)
	iNItemNum = sizeof(xSZData) / sizeof(xSZData[0]);
802014ec:	00804004 	movi	r2,256
802014f0:	e0bfeb15 	stw	r2,-84(fp)
	for (iI = 0; iI < iNItemNum; iI++) {
802014f4:	e03fe815 	stw	zero,-96(fp)
802014f8:	00001e06 	br	80201574 <bDdr2MemoryWriteTest+0x228>
		if (iI == 0) {
802014fc:	e0bfe817 	ldw	r2,-96(fp)
80201500:	1000091e 	bne	r2,zero,80201528 <bDdr2MemoryWriteTest+0x1dc>
			xSZData[iI] = uliInitValue;
80201504:	00a008b4 	movhi	r2,32802
80201508:	10b57504 	addi	r2,r2,-10796
8020150c:	e0ffe817 	ldw	r3,-96(fp)
80201510:	18c7883a 	add	r3,r3,r3
80201514:	18c7883a 	add	r3,r3,r3
80201518:	10c5883a 	add	r2,r2,r3
8020151c:	e0fff017 	ldw	r3,-64(fp)
80201520:	10c00015 	stw	r3,0(r2)
80201524:	00001006 	br	80201568 <bDdr2MemoryWriteTest+0x21c>
		} else {
			xSZData[iI] = xSZData[iI - 1] * 13;
80201528:	e0bfe817 	ldw	r2,-96(fp)
8020152c:	10ffffc4 	addi	r3,r2,-1
80201530:	00a008b4 	movhi	r2,32802
80201534:	10b57504 	addi	r2,r2,-10796
80201538:	18c7883a 	add	r3,r3,r3
8020153c:	18c7883a 	add	r3,r3,r3
80201540:	10c5883a 	add	r2,r2,r3
80201544:	10800017 	ldw	r2,0(r2)
80201548:	11000364 	muli	r4,r2,13
8020154c:	00a008b4 	movhi	r2,32802
80201550:	10b57504 	addi	r2,r2,-10796
80201554:	e0ffe817 	ldw	r3,-96(fp)
80201558:	18c7883a 	add	r3,r3,r3
8020155c:	18c7883a 	add	r3,r3,r3
80201560:	10c5883a 	add	r2,r2,r3
80201564:	11000015 	stw	r4,0(r2)
	for (iI = 0; iI < 10; iI++) {
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
	}
	uliInitValue = alt_nticks();
	iNItemNum = sizeof(xSZData) / sizeof(xSZData[0]);
	for (iI = 0; iI < iNItemNum; iI++) {
80201568:	e0bfe817 	ldw	r2,-96(fp)
8020156c:	10800044 	addi	r2,r2,1
80201570:	e0bfe815 	stw	r2,-96(fp)
80201574:	e0ffe817 	ldw	r3,-96(fp)
80201578:	e0bfeb17 	ldw	r2,-84(fp)
8020157c:	18bfdf16 	blt	r3,r2,802014fc <__reset+0xfa1e14fc>
			xSZData[iI] = uliInitValue;
		} else {
			xSZData[iI] = xSZData[iI - 1] * 13;
		}
	}
	xSZData[iNItemNum - 1] = 0xAAAAAAAA;
80201580:	e0bfeb17 	ldw	r2,-84(fp)
80201584:	10ffffc4 	addi	r3,r2,-1
80201588:	00a008b4 	movhi	r2,32802
8020158c:	10b57504 	addi	r2,r2,-10796
80201590:	18c7883a 	add	r3,r3,r3
80201594:	18c7883a 	add	r3,r3,r3
80201598:	10c7883a 	add	r3,r2,r3
8020159c:	00aaaaf4 	movhi	r2,43691
802015a0:	10aaaa84 	addi	r2,r2,-21846
802015a4:	18800015 	stw	r2,0(r3)
	xSZData[iNItemNum - 2] = 0x55555555;
802015a8:	e0bfeb17 	ldw	r2,-84(fp)
802015ac:	10ffff84 	addi	r3,r2,-2
802015b0:	00a008b4 	movhi	r2,32802
802015b4:	10b57504 	addi	r2,r2,-10796
802015b8:	18c7883a 	add	r3,r3,r3
802015bc:	18c7883a 	add	r3,r3,r3
802015c0:	10c7883a 	add	r3,r2,r3
802015c4:	00955574 	movhi	r2,21845
802015c8:	10955544 	addi	r2,r2,21845
802015cc:	18800015 	stw	r2,0(r3)
	xSZData[iNItemNum - 3] = 0x00000000;
802015d0:	e0bfeb17 	ldw	r2,-84(fp)
802015d4:	10ffff44 	addi	r3,r2,-3
802015d8:	00a008b4 	movhi	r2,32802
802015dc:	10b57504 	addi	r2,r2,-10796
802015e0:	18c7883a 	add	r3,r3,r3
802015e4:	18c7883a 	add	r3,r3,r3
802015e8:	10c5883a 	add	r2,r2,r3
802015ec:	10000015 	stw	zero,0(r2)
	xSZData[iNItemNum - 4] = 0xFFFFFFFF;
802015f0:	e0bfeb17 	ldw	r2,-84(fp)
802015f4:	10ffff04 	addi	r3,r2,-4
802015f8:	00a008b4 	movhi	r2,32802
802015fc:	10b57504 	addi	r2,r2,-10796
80201600:	18c7883a 	add	r3,r3,r3
80201604:	18c7883a 	add	r3,r3,r3
80201608:	10c5883a 	add	r2,r2,r3
8020160c:	00ffffc4 	movi	r3,-1
80201610:	10c00015 	stw	r3,0(r2)

#if DEBUG_ON
	sprintf(cDebugBuffer, "Writing data...\n");
80201614:	00e008b4 	movhi	r3,32802
80201618:	18f53504 	addi	r3,r3,-11052
8020161c:	00a008b4 	movhi	r2,32802
80201620:	10ab5704 	addi	r2,r2,-21156
80201624:	1009883a 	mov	r4,r2
80201628:	00800444 	movi	r2,17
8020162c:	100d883a 	mov	r6,r2
80201630:	200b883a 	mov	r5,r4
80201634:	1809883a 	mov	r4,r3
80201638:	02051b40 	call	802051b4 <memcpy>
	debug(fp, cDebugBuffer);
8020163c:	012008b4 	movhi	r4,32802
80201640:	21353504 	addi	r4,r4,-11052
80201644:	020532c0 	call	8020532c <printf>
80201648:	d0a02517 	ldw	r2,-32620(gp)
#endif
	iTimeStart = alt_nticks();
8020164c:	e0bff115 	stw	r2,-60(fp)
	pxDes = (TMyData *) uliDdr2Base;
80201650:	e0bfe617 	ldw	r2,-104(fp)
80201654:	e0bfea15 	stw	r2,-88(fp)
	iNAccessLen = sizeof(xSZData);
80201658:	00810004 	movi	r2,1024
8020165c:	e0bfe915 	stw	r2,-92(fp)
	iNItemNum = iNAccessLen / ciMyDataSize;
80201660:	e0ffe917 	ldw	r3,-92(fp)
80201664:	e0bfee17 	ldw	r2,-72(fp)
80201668:	1885283a 	div	r2,r3,r2
8020166c:	e0bfeb15 	stw	r2,-84(fp)
	iNPos = 0;
80201670:	e03fec15 	stw	zero,-80(fp)
	while (iNPos < uliByteLen) {
80201674:	00003806 	br	80201758 <bDdr2MemoryWriteTest+0x40c>
		iNRemainedLen = uliByteLen - iNPos;
80201678:	e0bfec17 	ldw	r2,-80(fp)
8020167c:	e0ffe717 	ldw	r3,-100(fp)
80201680:	1885c83a 	sub	r2,r3,r2
80201684:	e0bff215 	stw	r2,-56(fp)
		if (iNAccessLen > iNRemainedLen) {
80201688:	e0bfe917 	ldw	r2,-92(fp)
8020168c:	e0fff217 	ldw	r3,-56(fp)
80201690:	1880060e 	bge	r3,r2,802016ac <bDdr2MemoryWriteTest+0x360>
			iNAccessLen = iNRemainedLen;
80201694:	e0bff217 	ldw	r2,-56(fp)
80201698:	e0bfe915 	stw	r2,-92(fp)
			iNItemNum = iNAccessLen / ciMyDataSize;
8020169c:	e0ffe917 	ldw	r3,-92(fp)
802016a0:	e0bfee17 	ldw	r2,-72(fp)
802016a4:	1885283a 	div	r2,r3,r2
802016a8:	e0bfeb15 	stw	r2,-84(fp)
		}
		memcpy(pxDes, xSZData, iNAccessLen);
802016ac:	e0bfe917 	ldw	r2,-92(fp)
802016b0:	100d883a 	mov	r6,r2
802016b4:	016008b4 	movhi	r5,32802
802016b8:	29757504 	addi	r5,r5,-10796
802016bc:	e13fea17 	ldw	r4,-88(fp)
802016c0:	02051b40 	call	802051b4 <memcpy>
		pxDes += iNItemNum;
802016c4:	e0bfeb17 	ldw	r2,-84(fp)
802016c8:	1085883a 	add	r2,r2,r2
802016cc:	1085883a 	add	r2,r2,r2
802016d0:	1007883a 	mov	r3,r2
802016d4:	e0bfea17 	ldw	r2,-88(fp)
802016d8:	10c5883a 	add	r2,r2,r3
802016dc:	e0bfea15 	stw	r2,-88(fp)
		iNPos += iNAccessLen;
802016e0:	e0ffec17 	ldw	r3,-80(fp)
802016e4:	e0bfe917 	ldw	r2,-92(fp)
802016e8:	1885883a 	add	r2,r3,r2
802016ec:	e0bfec15 	stw	r2,-80(fp)
		if (iNProgressIndex <= 9 && iNPos >= uliSZProgress[iNProgressIndex]) {
802016f0:	e0bfed17 	ldw	r2,-76(fp)
802016f4:	10800288 	cmpgei	r2,r2,10
802016f8:	1000171e 	bne	r2,zero,80201758 <bDdr2MemoryWriteTest+0x40c>
802016fc:	e0bfed17 	ldw	r2,-76(fp)
80201700:	1085883a 	add	r2,r2,r2
80201704:	1085883a 	add	r2,r2,r2
80201708:	e0ffe504 	addi	r3,fp,-108
8020170c:	1885883a 	add	r2,r3,r2
80201710:	10800e04 	addi	r2,r2,56
80201714:	10800017 	ldw	r2,0(r2)
80201718:	e0ffec17 	ldw	r3,-80(fp)
8020171c:	18800e36 	bltu	r3,r2,80201758 <bDdr2MemoryWriteTest+0x40c>
			iNProgressIndex++;
80201720:	e0bfed17 	ldw	r2,-76(fp)
80201724:	10800044 	addi	r2,r2,1
80201728:	e0bfed15 	stw	r2,-76(fp)
#if DEBUG_ON
			sprintf(cDebugBuffer, "%02d%% ", iNProgressIndex * 10);
8020172c:	e0bfed17 	ldw	r2,-76(fp)
80201730:	108002a4 	muli	r2,r2,10
80201734:	100d883a 	mov	r6,r2
80201738:	016008b4 	movhi	r5,32802
8020173c:	296b5c04 	addi	r5,r5,-21136
80201740:	012008b4 	movhi	r4,32802
80201744:	21353504 	addi	r4,r4,-11052
80201748:	02054940 	call	80205494 <sprintf>
			debug(fp, cDebugBuffer);
8020174c:	012008b4 	movhi	r4,32802
80201750:	21353504 	addi	r4,r4,-11052
80201754:	020532c0 	call	8020532c <printf>
	iTimeStart = alt_nticks();
	pxDes = (TMyData *) uliDdr2Base;
	iNAccessLen = sizeof(xSZData);
	iNItemNum = iNAccessLen / ciMyDataSize;
	iNPos = 0;
	while (iNPos < uliByteLen) {
80201758:	e0ffec17 	ldw	r3,-80(fp)
8020175c:	e0bfe717 	ldw	r2,-100(fp)
80201760:	18bfc536 	bltu	r3,r2,80201678 <__reset+0xfa1e1678>
			sprintf(cDebugBuffer, "%02d%% ", iNProgressIndex * 10);
			debug(fp, cDebugBuffer);
#endif
		}
	}
	alt_dcache_flush_all();
80201764:	021534c0 	call	8021534c <alt_dcache_flush_all>
#if DEBUG_ON
	sprintf(cDebugBuffer, "\n");
80201768:	00a008b4 	movhi	r2,32802
8020176c:	10b53504 	addi	r2,r2,-11052
80201770:	00c00284 	movi	r3,10
80201774:	10c00005 	stb	r3,0(r2)
80201778:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
8020177c:	012008b4 	movhi	r4,32802
80201780:	21353504 	addi	r4,r4,-11052
80201784:	020532c0 	call	8020532c <printf>
80201788:	d0e02517 	ldw	r3,-32620(gp)
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
8020178c:	e0bff117 	ldw	r2,-60(fp)
80201790:	1885c83a 	sub	r2,r3,r2
80201794:	e0bfef15 	stw	r2,-68(fp)
	if (bSuccess) {
80201798:	e0bfe517 	ldw	r2,-108(fp)
8020179c:	10001c26 	beq	r2,zero,80201810 <bDdr2MemoryWriteTest+0x4c4>
#if DEBUG_ON
		sprintf(cDebugBuffer,
				"DDR2 write test pass, size=%lu bytes, %.3f sec\n", uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
802017a0:	e13fef17 	ldw	r4,-68(fp)
802017a4:	0204d2c0 	call	80204d2c <__floatsisf>
802017a8:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
802017ac:	d0a02417 	ldw	r2,-32624(gp)
802017b0:	1009883a 	mov	r4,r2
802017b4:	0204e500 	call	80204e50 <__floatunsisf>
802017b8:	1007883a 	mov	r3,r2
802017bc:	180b883a 	mov	r5,r3
802017c0:	8009883a 	mov	r4,r16
802017c4:	02048ec0 	call	802048ec <__divsf3>
802017c8:	1007883a 	mov	r3,r2
802017cc:	1805883a 	mov	r2,r3
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
	if (bSuccess) {
#if DEBUG_ON
		sprintf(cDebugBuffer,
802017d0:	1009883a 	mov	r4,r2
802017d4:	0204f400 	call	80204f40 <__extendsfdf2>
802017d8:	1009883a 	mov	r4,r2
802017dc:	180b883a 	mov	r5,r3
802017e0:	d9400015 	stw	r5,0(sp)
802017e4:	200f883a 	mov	r7,r4
802017e8:	e1bfe717 	ldw	r6,-100(fp)
802017ec:	016008b4 	movhi	r5,32802
802017f0:	296b5e04 	addi	r5,r5,-21128
802017f4:	012008b4 	movhi	r4,32802
802017f8:	21353504 	addi	r4,r4,-11052
802017fc:	02054940 	call	80205494 <sprintf>
				"DDR2 write test pass, size=%lu bytes, %.3f sec\n", uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
		debug(fp, cDebugBuffer);
80201800:	012008b4 	movhi	r4,32802
80201804:	21353504 	addi	r4,r4,-11052
80201808:	020532c0 	call	8020532c <printf>
8020180c:	00000d06 	br	80201844 <bDdr2MemoryWriteTest+0x4f8>
#endif
	} else {
#if DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 write test fail\n");
80201810:	00e008b4 	movhi	r3,32802
80201814:	18f53504 	addi	r3,r3,-11052
80201818:	00a008b4 	movhi	r2,32802
8020181c:	10ab6a04 	addi	r2,r2,-21080
80201820:	1009883a 	mov	r4,r2
80201824:	00800584 	movi	r2,22
80201828:	100d883a 	mov	r6,r2
8020182c:	200b883a 	mov	r5,r4
80201830:	1809883a 	mov	r4,r3
80201834:	02051b40 	call	802051b4 <memcpy>
		debug(fp, cDebugBuffer);
80201838:	012008b4 	movhi	r4,32802
8020183c:	21353504 	addi	r4,r4,-11052
80201840:	020532c0 	call	8020532c <printf>
#endif
	}
#if DEBUG_ON
	sprintf(cDebugBuffer, "\n");
80201844:	00a008b4 	movhi	r2,32802
80201848:	10b53504 	addi	r2,r2,-11052
8020184c:	00c00284 	movi	r3,10
80201850:	10c00005 	stb	r3,0(r2)
80201854:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
80201858:	012008b4 	movhi	r4,32802
8020185c:	21353504 	addi	r4,r4,-11052
80201860:	020532c0 	call	8020532c <printf>
#endif

	return bSuccess;
80201864:	e0bfe517 	ldw	r2,-108(fp)
}
80201868:	e6fffe04 	addi	sp,fp,-8
8020186c:	dfc00317 	ldw	ra,12(sp)
80201870:	df000217 	ldw	fp,8(sp)
80201874:	dc400117 	ldw	r17,4(sp)
80201878:	dc000017 	ldw	r16,0(sp)
8020187c:	dec00404 	addi	sp,sp,16
80201880:	f800283a 	ret

80201884 <bDdr2MemoryReadTest>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryReadTest(alt_u8 ucMemoryId) {
80201884:	deffe204 	addi	sp,sp,-120
80201888:	dfc01d15 	stw	ra,116(sp)
8020188c:	df001c15 	stw	fp,112(sp)
80201890:	dc401b15 	stw	r17,108(sp)
80201894:	dc001a15 	stw	r16,104(sp)
80201898:	df001c04 	addi	fp,sp,112
8020189c:	2005883a 	mov	r2,r4
802018a0:	e0bffd05 	stb	r2,-12(fp)

#if DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Read Test =====\n");
802018a4:	00e008b4 	movhi	r3,32802
802018a8:	18f53504 	addi	r3,r3,-11052
802018ac:	00a008b4 	movhi	r2,32802
802018b0:	10ab7004 	addi	r2,r2,-21056
802018b4:	1009883a 	mov	r4,r2
802018b8:	008009c4 	movi	r2,39
802018bc:	100d883a 	mov	r6,r2
802018c0:	200b883a 	mov	r5,r4
802018c4:	1809883a 	mov	r4,r3
802018c8:	02051b40 	call	802051b4 <memcpy>
	debug(fp, cDebugBuffer);
802018cc:	012008b4 	movhi	r4,32802
802018d0:	21353504 	addi	r4,r4,-11052
802018d4:	020532c0 	call	8020532c <printf>
#endif
	bool bSuccess = FALSE;
802018d8:	e03fe515 	stw	zero,-108(fp)
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	switch (ucMemoryId) {
802018dc:	e0bffd03 	ldbu	r2,-12(fp)
802018e0:	10000326 	beq	r2,zero,802018f0 <bDdr2MemoryReadTest+0x6c>
802018e4:	10800060 	cmpeqi	r2,r2,1
802018e8:	10000a1e 	bne	r2,zero,80201914 <bDdr2MemoryReadTest+0x90>
802018ec:	00001206 	br	80201938 <bDdr2MemoryReadTest+0xb4>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
802018f0:	e0bffd03 	ldbu	r2,-12(fp)
802018f4:	1009883a 	mov	r4,r2
802018f8:	02012940 	call	80201294 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
802018fc:	e03fe615 	stw	zero,-104(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
80201900:	00a00034 	movhi	r2,32768
80201904:	e0bfe715 	stw	r2,-100(fp)
		bSuccess = TRUE;
80201908:	00800044 	movi	r2,1
8020190c:	e0bfe515 	stw	r2,-108(fp)
		break;
80201910:	00001906 	br	80201978 <bDdr2MemoryReadTest+0xf4>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
80201914:	e0bffd03 	ldbu	r2,-12(fp)
80201918:	1009883a 	mov	r4,r2
8020191c:	02012940 	call	80201294 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
80201920:	e03fe615 	stw	zero,-104(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
80201924:	00a00034 	movhi	r2,32768
80201928:	e0bfe715 	stw	r2,-100(fp)
		bSuccess = TRUE;
8020192c:	00800044 	movi	r2,1
80201930:	e0bfe515 	stw	r2,-108(fp)
		break;
80201934:	00001006 	br	80201978 <bDdr2MemoryReadTest+0xf4>
	default:
		bSuccess = FALSE;
80201938:	e03fe515 	stw	zero,-108(fp)
#if DEBUG_ON
		sprintf(cDebugBuffer,
8020193c:	00e008b4 	movhi	r3,32802
80201940:	18f53504 	addi	r3,r3,-11052
80201944:	00a008b4 	movhi	r2,32802
80201948:	10a95804 	addi	r2,r2,-23200
8020194c:	1009883a 	mov	r4,r2
80201950:	00800bc4 	movi	r2,47
80201954:	100d883a 	mov	r6,r2
80201958:	200b883a 	mov	r5,r4
8020195c:	1809883a 	mov	r4,r3
80201960:	02051b40 	call	802051b4 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
80201964:	012008b4 	movhi	r4,32802
80201968:	21353504 	addi	r4,r4,-11052
8020196c:	020532c0 	call	8020532c <printf>
		;
#endif
		return bSuccess;
80201970:	e0bfe517 	ldw	r2,-108(fp)
80201974:	0000ec06 	br	80201d28 <bDdr2MemoryReadTest+0x4a4>
	}

#if DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %lu MBytes\n", uliByteLen / 1024 / 1024);
80201978:	e0bfe717 	ldw	r2,-100(fp)
8020197c:	1004d53a 	srli	r2,r2,20
80201980:	100d883a 	mov	r6,r2
80201984:	016008b4 	movhi	r5,32802
80201988:	296b7a04 	addi	r5,r5,-21016
8020198c:	012008b4 	movhi	r4,32802
80201990:	21353504 	addi	r4,r4,-11052
80201994:	02054940 	call	80205494 <sprintf>
	debug(fp, cDebugBuffer);
80201998:	012008b4 	movhi	r4,32802
8020199c:	21353504 	addi	r4,r4,-11052
802019a0:	020532c0 	call	8020532c <printf>
#endif

	int iI, iNRemainedLen, iNAccessLen;
	TMyData *pxDes, *pxSrc;
	int iNItemNum, iNPos;
	iNItemNum = sizeof(xSZData) / sizeof(xSZData[0]);
802019a4:	00804004 	movi	r2,256
802019a8:	e0bfec15 	stw	r2,-80(fp)
	const int ciMyDataSize = sizeof(TMyData);
802019ac:	00800104 	movi	r2,4
802019b0:	e0bfef15 	stw	r2,-68(fp)
	iNAccessLen = iNItemNum * ciMyDataSize;
802019b4:	e0ffec17 	ldw	r3,-80(fp)
802019b8:	e0bfef17 	ldw	r2,-68(fp)
802019bc:	1885383a 	mul	r2,r3,r2
802019c0:	e0bfe915 	stw	r2,-92(fp)
	int iNProgressIndex = 0;
802019c4:	e03fee15 	stw	zero,-72(fp)
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;
802019c8:	e03ff015 	stw	zero,-64(fp)

	for (iI = 0; iI < 10; iI++) {
802019cc:	e03fe815 	stw	zero,-96(fp)
802019d0:	00001506 	br	80201a28 <bDdr2MemoryReadTest+0x1a4>
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
802019d4:	e0ffe717 	ldw	r3,-100(fp)
802019d8:	00b33374 	movhi	r2,52429
802019dc:	10b33344 	addi	r2,r2,-13107
802019e0:	1888383a 	mulxuu	r4,r3,r2
802019e4:	1885383a 	mul	r2,r3,r2
802019e8:	1021883a 	mov	r16,r2
802019ec:	2023883a 	mov	r17,r4
802019f0:	8804d0fa 	srli	r2,r17,3
802019f4:	e0ffe817 	ldw	r3,-96(fp)
802019f8:	18c00044 	addi	r3,r3,1
802019fc:	10c7383a 	mul	r3,r2,r3
80201a00:	e0bfe817 	ldw	r2,-96(fp)
80201a04:	1085883a 	add	r2,r2,r2
80201a08:	1085883a 	add	r2,r2,r2
80201a0c:	e13fe504 	addi	r4,fp,-108
80201a10:	2085883a 	add	r2,r4,r2
80201a14:	10800e04 	addi	r2,r2,56
80201a18:	10c00015 	stw	r3,0(r2)
	iNAccessLen = iNItemNum * ciMyDataSize;
	int iNProgressIndex = 0;
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;

	for (iI = 0; iI < 10; iI++) {
80201a1c:	e0bfe817 	ldw	r2,-96(fp)
80201a20:	10800044 	addi	r2,r2,1
80201a24:	e0bfe815 	stw	r2,-96(fp)
80201a28:	e0bfe817 	ldw	r2,-96(fp)
80201a2c:	10800290 	cmplti	r2,r2,10
80201a30:	103fe81e 	bne	r2,zero,802019d4 <__reset+0xfa1e19d4>
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
	}

	iNProgressIndex = 0;
80201a34:	e03fee15 	stw	zero,-72(fp)
#if DEBUG_ON
	sprintf(cDebugBuffer, "Reading/Verifying Data...\n");
80201a38:	00e008b4 	movhi	r3,32802
80201a3c:	18f53504 	addi	r3,r3,-11052
80201a40:	00a008b4 	movhi	r2,32802
80201a44:	10ab8004 	addi	r2,r2,-20992
80201a48:	1009883a 	mov	r4,r2
80201a4c:	008006c4 	movi	r2,27
80201a50:	100d883a 	mov	r6,r2
80201a54:	200b883a 	mov	r5,r4
80201a58:	1809883a 	mov	r4,r3
80201a5c:	02051b40 	call	802051b4 <memcpy>
	debug(fp, cDebugBuffer);
80201a60:	012008b4 	movhi	r4,32802
80201a64:	21353504 	addi	r4,r4,-11052
80201a68:	020532c0 	call	8020532c <printf>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
80201a6c:	d0a02517 	ldw	r2,-32620(gp)
#endif
	iTimeStart = alt_nticks();
80201a70:	e0bff115 	stw	r2,-60(fp)

	pxSrc = (TMyData *) uliDdr2Base;
80201a74:	e0bfe617 	ldw	r2,-104(fp)
80201a78:	e0bfeb15 	stw	r2,-84(fp)
	iNAccessLen = sizeof(xSZData);
80201a7c:	00810004 	movi	r2,1024
80201a80:	e0bfe915 	stw	r2,-92(fp)
	iNItemNum = iNAccessLen / ciMyDataSize;
80201a84:	e0ffe917 	ldw	r3,-92(fp)
80201a88:	e0bfef17 	ldw	r2,-68(fp)
80201a8c:	1885283a 	div	r2,r3,r2
80201a90:	e0bfec15 	stw	r2,-80(fp)
	iNPos = 0;
80201a94:	e03fed15 	stw	zero,-76(fp)
	while (bSuccess && iNPos < uliByteLen) {
80201a98:	00005e06 	br	80201c14 <bDdr2MemoryReadTest+0x390>
		iNRemainedLen = uliByteLen - iNPos;
80201a9c:	e0bfed17 	ldw	r2,-76(fp)
80201aa0:	e0ffe717 	ldw	r3,-100(fp)
80201aa4:	1885c83a 	sub	r2,r3,r2
80201aa8:	e0bff215 	stw	r2,-56(fp)
		if (iNAccessLen > iNRemainedLen) {
80201aac:	e0bfe917 	ldw	r2,-92(fp)
80201ab0:	e0fff217 	ldw	r3,-56(fp)
80201ab4:	1880060e 	bge	r3,r2,80201ad0 <bDdr2MemoryReadTest+0x24c>
			iNAccessLen = iNRemainedLen;
80201ab8:	e0bff217 	ldw	r2,-56(fp)
80201abc:	e0bfe915 	stw	r2,-92(fp)
			iNItemNum = iNAccessLen / ciMyDataSize;
80201ac0:	e0ffe917 	ldw	r3,-92(fp)
80201ac4:	e0bfef17 	ldw	r2,-68(fp)
80201ac8:	1885283a 	div	r2,r3,r2
80201acc:	e0bfec15 	stw	r2,-80(fp)
		}
		pxDes = xSZData;
80201ad0:	00a008b4 	movhi	r2,32802
80201ad4:	10b57504 	addi	r2,r2,-10796
80201ad8:	e0bfea15 	stw	r2,-88(fp)
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
80201adc:	e03fe815 	stw	zero,-96(fp)
80201ae0:	00002906 	br	80201b88 <bDdr2MemoryReadTest+0x304>
			if (*pxSrc++ != *pxDes++) {
80201ae4:	e0bfeb17 	ldw	r2,-84(fp)
80201ae8:	10c00104 	addi	r3,r2,4
80201aec:	e0ffeb15 	stw	r3,-84(fp)
80201af0:	10c00017 	ldw	r3,0(r2)
80201af4:	e0bfea17 	ldw	r2,-88(fp)
80201af8:	11000104 	addi	r4,r2,4
80201afc:	e13fea15 	stw	r4,-88(fp)
80201b00:	10800017 	ldw	r2,0(r2)
80201b04:	18801d26 	beq	r3,r2,80201b7c <bDdr2MemoryReadTest+0x2f8>
#if DEBUG_ON
				sprintf(cDebugBuffer,
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
80201b08:	e0bfeb17 	ldw	r2,-84(fp)
80201b0c:	10bfff04 	addi	r2,r2,-4
80201b10:	10800017 	ldw	r2,0(r2)
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
			if (*pxSrc++ != *pxDes++) {
#if DEBUG_ON
				sprintf(cDebugBuffer,
80201b14:	1009883a 	mov	r4,r2
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
80201b18:	00a008b4 	movhi	r2,32802
80201b1c:	10b57504 	addi	r2,r2,-10796
80201b20:	e0ffe817 	ldw	r3,-96(fp)
80201b24:	18c7883a 	add	r3,r3,r3
80201b28:	18c7883a 	add	r3,r3,r3
80201b2c:	10c5883a 	add	r2,r2,r3
80201b30:	10800017 	ldw	r2,0(r2)
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
			if (*pxSrc++ != *pxDes++) {
#if DEBUG_ON
				sprintf(cDebugBuffer,
80201b34:	100b883a 	mov	r5,r2
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
						(iNPos / ciMyDataSize) + iI);
80201b38:	e0ffed17 	ldw	r3,-76(fp)
80201b3c:	e0bfef17 	ldw	r2,-68(fp)
80201b40:	1887283a 	div	r3,r3,r2
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
			if (*pxSrc++ != *pxDes++) {
#if DEBUG_ON
				sprintf(cDebugBuffer,
80201b44:	e0bfe817 	ldw	r2,-96(fp)
80201b48:	1885883a 	add	r2,r3,r2
80201b4c:	d8800015 	stw	r2,0(sp)
80201b50:	280f883a 	mov	r7,r5
80201b54:	200d883a 	mov	r6,r4
80201b58:	016008b4 	movhi	r5,32802
80201b5c:	296b8704 	addi	r5,r5,-20964
80201b60:	012008b4 	movhi	r4,32802
80201b64:	21353504 	addi	r4,r4,-11052
80201b68:	02054940 	call	80205494 <sprintf>
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
						(iNPos / ciMyDataSize) + iI);
				debug(fp, cDebugBuffer);
80201b6c:	012008b4 	movhi	r4,32802
80201b70:	21353504 	addi	r4,r4,-11052
80201b74:	020532c0 	call	8020532c <printf>
#endif
				bSuccess = FALSE;
80201b78:	e03fe515 	stw	zero,-108(fp)
		if (iNAccessLen > iNRemainedLen) {
			iNAccessLen = iNRemainedLen;
			iNItemNum = iNAccessLen / ciMyDataSize;
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
80201b7c:	e0bfe817 	ldw	r2,-96(fp)
80201b80:	10800044 	addi	r2,r2,1
80201b84:	e0bfe815 	stw	r2,-96(fp)
80201b88:	e0ffe817 	ldw	r3,-96(fp)
80201b8c:	e0bfec17 	ldw	r2,-80(fp)
80201b90:	1880020e 	bge	r3,r2,80201b9c <bDdr2MemoryReadTest+0x318>
80201b94:	e0bfe517 	ldw	r2,-108(fp)
80201b98:	103fd21e 	bne	r2,zero,80201ae4 <__reset+0xfa1e1ae4>
				debug(fp, cDebugBuffer);
#endif
				bSuccess = FALSE;
			}
		}
		iNPos += iNAccessLen;
80201b9c:	e0ffed17 	ldw	r3,-76(fp)
80201ba0:	e0bfe917 	ldw	r2,-92(fp)
80201ba4:	1885883a 	add	r2,r3,r2
80201ba8:	e0bfed15 	stw	r2,-76(fp)
		if (iNProgressIndex <= 9 && iNPos >= uliSZProgress[iNProgressIndex]) {
80201bac:	e0bfee17 	ldw	r2,-72(fp)
80201bb0:	10800288 	cmpgei	r2,r2,10
80201bb4:	1000171e 	bne	r2,zero,80201c14 <bDdr2MemoryReadTest+0x390>
80201bb8:	e0bfee17 	ldw	r2,-72(fp)
80201bbc:	1085883a 	add	r2,r2,r2
80201bc0:	1085883a 	add	r2,r2,r2
80201bc4:	e0ffe504 	addi	r3,fp,-108
80201bc8:	1885883a 	add	r2,r3,r2
80201bcc:	10800e04 	addi	r2,r2,56
80201bd0:	10800017 	ldw	r2,0(r2)
80201bd4:	e0ffed17 	ldw	r3,-76(fp)
80201bd8:	18800e36 	bltu	r3,r2,80201c14 <bDdr2MemoryReadTest+0x390>
			iNProgressIndex++;
80201bdc:	e0bfee17 	ldw	r2,-72(fp)
80201be0:	10800044 	addi	r2,r2,1
80201be4:	e0bfee15 	stw	r2,-72(fp)
#if DEBUG_ON
			sprintf(cDebugBuffer, "%02d%% ", iNProgressIndex * 10);
80201be8:	e0bfee17 	ldw	r2,-72(fp)
80201bec:	108002a4 	muli	r2,r2,10
80201bf0:	100d883a 	mov	r6,r2
80201bf4:	016008b4 	movhi	r5,32802
80201bf8:	296b5c04 	addi	r5,r5,-21136
80201bfc:	012008b4 	movhi	r4,32802
80201c00:	21353504 	addi	r4,r4,-11052
80201c04:	02054940 	call	80205494 <sprintf>
			debug(fp, cDebugBuffer);
80201c08:	012008b4 	movhi	r4,32802
80201c0c:	21353504 	addi	r4,r4,-11052
80201c10:	020532c0 	call	8020532c <printf>

	pxSrc = (TMyData *) uliDdr2Base;
	iNAccessLen = sizeof(xSZData);
	iNItemNum = iNAccessLen / ciMyDataSize;
	iNPos = 0;
	while (bSuccess && iNPos < uliByteLen) {
80201c14:	e0bfe517 	ldw	r2,-108(fp)
80201c18:	10000326 	beq	r2,zero,80201c28 <bDdr2MemoryReadTest+0x3a4>
80201c1c:	e0ffed17 	ldw	r3,-76(fp)
80201c20:	e0bfe717 	ldw	r2,-100(fp)
80201c24:	18bf9d36 	bltu	r3,r2,80201a9c <__reset+0xfa1e1a9c>
			debug(fp, cDebugBuffer);
#endif
		}
	}
#if DEBUG_ON
	sprintf(cDebugBuffer, "\n");
80201c28:	00a008b4 	movhi	r2,32802
80201c2c:	10b53504 	addi	r2,r2,-11052
80201c30:	00c00284 	movi	r3,10
80201c34:	10c00005 	stb	r3,0(r2)
80201c38:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
80201c3c:	012008b4 	movhi	r4,32802
80201c40:	21353504 	addi	r4,r4,-11052
80201c44:	020532c0 	call	8020532c <printf>
80201c48:	d0e02517 	ldw	r3,-32620(gp)
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
80201c4c:	e0bff117 	ldw	r2,-60(fp)
80201c50:	1885c83a 	sub	r2,r3,r2
80201c54:	e0bff015 	stw	r2,-64(fp)
	if (bSuccess) {
80201c58:	e0bfe517 	ldw	r2,-108(fp)
80201c5c:	10001c26 	beq	r2,zero,80201cd0 <bDdr2MemoryReadTest+0x44c>
#if DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test pass, size=%ld bytes, %.3f sec\n",
				uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
80201c60:	e13ff017 	ldw	r4,-64(fp)
80201c64:	0204d2c0 	call	80204d2c <__floatsisf>
80201c68:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
80201c6c:	d0a02417 	ldw	r2,-32624(gp)
80201c70:	1009883a 	mov	r4,r2
80201c74:	0204e500 	call	80204e50 <__floatunsisf>
80201c78:	1007883a 	mov	r3,r2
80201c7c:	180b883a 	mov	r5,r3
80201c80:	8009883a 	mov	r4,r16
80201c84:	02048ec0 	call	802048ec <__divsf3>
80201c88:	1007883a 	mov	r3,r2
80201c8c:	1805883a 	mov	r2,r3
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
	if (bSuccess) {
#if DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test pass, size=%ld bytes, %.3f sec\n",
80201c90:	1009883a 	mov	r4,r2
80201c94:	0204f400 	call	80204f40 <__extendsfdf2>
80201c98:	1009883a 	mov	r4,r2
80201c9c:	180b883a 	mov	r5,r3
80201ca0:	d9400015 	stw	r5,0(sp)
80201ca4:	200f883a 	mov	r7,r4
80201ca8:	e1bfe717 	ldw	r6,-100(fp)
80201cac:	016008b4 	movhi	r5,32802
80201cb0:	296b9504 	addi	r5,r5,-20908
80201cb4:	012008b4 	movhi	r4,32802
80201cb8:	21353504 	addi	r4,r4,-11052
80201cbc:	02054940 	call	80205494 <sprintf>
				uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
		debug(fp, cDebugBuffer);
80201cc0:	012008b4 	movhi	r4,32802
80201cc4:	21353504 	addi	r4,r4,-11052
80201cc8:	020532c0 	call	8020532c <printf>
80201ccc:	00000d06 	br	80201d04 <bDdr2MemoryReadTest+0x480>
#endif
	} else {
#if DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test fail\n");
80201cd0:	00e008b4 	movhi	r3,32802
80201cd4:	18f53504 	addi	r3,r3,-11052
80201cd8:	00a008b4 	movhi	r2,32802
80201cdc:	10aba104 	addi	r2,r2,-20860
80201ce0:	1009883a 	mov	r4,r2
80201ce4:	00800544 	movi	r2,21
80201ce8:	100d883a 	mov	r6,r2
80201cec:	200b883a 	mov	r5,r4
80201cf0:	1809883a 	mov	r4,r3
80201cf4:	02051b40 	call	802051b4 <memcpy>
		debug(fp, cDebugBuffer);
80201cf8:	012008b4 	movhi	r4,32802
80201cfc:	21353504 	addi	r4,r4,-11052
80201d00:	020532c0 	call	8020532c <printf>
#endif
	}
#if DEBUG_ON
	sprintf(cDebugBuffer, "\n");
80201d04:	00a008b4 	movhi	r2,32802
80201d08:	10b53504 	addi	r2,r2,-11052
80201d0c:	00c00284 	movi	r3,10
80201d10:	10c00005 	stb	r3,0(r2)
80201d14:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
80201d18:	012008b4 	movhi	r4,32802
80201d1c:	21353504 	addi	r4,r4,-11052
80201d20:	020532c0 	call	8020532c <printf>
#endif

	return bSuccess;
80201d24:	e0bfe517 	ldw	r2,-108(fp)
}
80201d28:	e6fffe04 	addi	sp,fp,-8
80201d2c:	dfc00317 	ldw	ra,12(sp)
80201d30:	df000217 	ldw	fp,8(sp)
80201d34:	dc400117 	ldw	r17,4(sp)
80201d38:	dc000017 	ldw	r16,0(sp)
80201d3c:	dec00404 	addi	sp,sp,16
80201d40:	f800283a 	ret

80201d44 <bDdr2MemoryRandomWriteTest>:
 * @param [in] bTime  Controla se a duração da função será medida
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryRandomWriteTest(alt_u8 ucMemoryId, bool bVerbose, bool bTime) {
80201d44:	deffec04 	addi	sp,sp,-80
80201d48:	dfc01315 	stw	ra,76(sp)
80201d4c:	df001215 	stw	fp,72(sp)
80201d50:	dcc01115 	stw	r19,68(sp)
80201d54:	dc801015 	stw	r18,64(sp)
80201d58:	dc400f15 	stw	r17,60(sp)
80201d5c:	dc000e15 	stw	r16,56(sp)
80201d60:	df001204 	addi	fp,sp,72
80201d64:	2005883a 	mov	r2,r4
80201d68:	e17ffa15 	stw	r5,-24(fp)
80201d6c:	e1bffb15 	stw	r6,-20(fp)
80201d70:	e0bff905 	stb	r2,-28(fp)

#if DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Random Write Test =====\n");
80201d74:	00e008b4 	movhi	r3,32802
80201d78:	18f53504 	addi	r3,r3,-11052
80201d7c:	00a008b4 	movhi	r2,32802
80201d80:	10aba704 	addi	r2,r2,-20836
80201d84:	1009883a 	mov	r4,r2
80201d88:	00800bc4 	movi	r2,47
80201d8c:	100d883a 	mov	r6,r2
80201d90:	200b883a 	mov	r5,r4
80201d94:	1809883a 	mov	r4,r3
80201d98:	02051b40 	call	802051b4 <memcpy>
	debug(fp, cDebugBuffer);
80201d9c:	012008b4 	movhi	r4,32802
80201da0:	21353504 	addi	r4,r4,-11052
80201da4:	020532c0 	call	8020532c <printf>
#endif
	bool bSuccess = FALSE;
80201da8:	e03fef15 	stw	zero,-68(fp)
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	switch (ucMemoryId) {
80201dac:	e0bff903 	ldbu	r2,-28(fp)
80201db0:	10000326 	beq	r2,zero,80201dc0 <bDdr2MemoryRandomWriteTest+0x7c>
80201db4:	10800060 	cmpeqi	r2,r2,1
80201db8:	10000a1e 	bne	r2,zero,80201de4 <bDdr2MemoryRandomWriteTest+0xa0>
80201dbc:	00001206 	br	80201e08 <bDdr2MemoryRandomWriteTest+0xc4>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
80201dc0:	e0bff903 	ldbu	r2,-28(fp)
80201dc4:	1009883a 	mov	r4,r2
80201dc8:	02012940 	call	80201294 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
80201dcc:	e03ff015 	stw	zero,-64(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
80201dd0:	00a00034 	movhi	r2,32768
80201dd4:	e0bff115 	stw	r2,-60(fp)
		bSuccess = TRUE;
80201dd8:	00800044 	movi	r2,1
80201ddc:	e0bfef15 	stw	r2,-68(fp)
		break;
80201de0:	00001906 	br	80201e48 <bDdr2MemoryRandomWriteTest+0x104>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
80201de4:	e0bff903 	ldbu	r2,-28(fp)
80201de8:	1009883a 	mov	r4,r2
80201dec:	02012940 	call	80201294 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
80201df0:	e03ff015 	stw	zero,-64(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
80201df4:	00a00034 	movhi	r2,32768
80201df8:	e0bff115 	stw	r2,-60(fp)
		bSuccess = TRUE;
80201dfc:	00800044 	movi	r2,1
80201e00:	e0bfef15 	stw	r2,-68(fp)
		break;
80201e04:	00001006 	br	80201e48 <bDdr2MemoryRandomWriteTest+0x104>
	default:
		bSuccess = FALSE;
80201e08:	e03fef15 	stw	zero,-68(fp)
#if DEBUG_ON
		sprintf(cDebugBuffer,
80201e0c:	00e008b4 	movhi	r3,32802
80201e10:	18f53504 	addi	r3,r3,-11052
80201e14:	00a008b4 	movhi	r2,32802
80201e18:	10a95804 	addi	r2,r2,-23200
80201e1c:	1009883a 	mov	r4,r2
80201e20:	00800bc4 	movi	r2,47
80201e24:	100d883a 	mov	r6,r2
80201e28:	200b883a 	mov	r5,r4
80201e2c:	1809883a 	mov	r4,r3
80201e30:	02051b40 	call	802051b4 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
80201e34:	012008b4 	movhi	r4,32802
80201e38:	21353504 	addi	r4,r4,-11052
80201e3c:	020532c0 	call	8020532c <printf>
		;
#endif
		return bSuccess;
80201e40:	e0bfef17 	ldw	r2,-68(fp)
80201e44:	0000bc06 	br	80202138 <bDdr2MemoryRandomWriteTest+0x3f4>
	}

#if DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %ld MBytes\n", uliByteLen / 1024 / 1024);
80201e48:	e0bff117 	ldw	r2,-60(fp)
80201e4c:	1004d53a 	srli	r2,r2,20
80201e50:	100d883a 	mov	r6,r2
80201e54:	016008b4 	movhi	r5,32802
80201e58:	296b5104 	addi	r5,r5,-21180
80201e5c:	012008b4 	movhi	r4,32802
80201e60:	21353504 	addi	r4,r4,-11052
80201e64:	02054940 	call	80205494 <sprintf>
	debug(fp, cDebugBuffer);
80201e68:	012008b4 	movhi	r4,32802
80201e6c:	21353504 	addi	r4,r4,-11052
80201e70:	020532c0 	call	8020532c <printf>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
80201e74:	d0a02517 	ldw	r2,-32620(gp)
	alt_u32 uliCurrentState;
	alt_u32 uliMemoryEndAddress;
	alt_u32 uliNextMilestone;
	alt_u8 ucPercentage;

	uliInitialState = alt_nticks();
80201e78:	d0a01315 	stw	r2,-32692(gp)
	uliCurrentState = uliInitialState;
80201e7c:	d0a01317 	ldw	r2,-32692(gp)
80201e80:	e0bff815 	stw	r2,-32(fp)
	uliMemoryEndAddress = uliDdr2Base + uliByteLen;
80201e84:	e0fff017 	ldw	r3,-64(fp)
80201e88:	e0bff117 	ldw	r2,-60(fp)
80201e8c:	1885883a 	add	r2,r3,r2
80201e90:	e0bff515 	stw	r2,-44(fp)
	uliNextMilestone = uliDdr2Base + uliByteLen / 20;
80201e94:	e0fff117 	ldw	r3,-60(fp)
80201e98:	00b33374 	movhi	r2,52429
80201e9c:	10b33344 	addi	r2,r2,-13107
80201ea0:	1888383a 	mulxuu	r4,r3,r2
80201ea4:	1885383a 	mul	r2,r3,r2
80201ea8:	1025883a 	mov	r18,r2
80201eac:	2027883a 	mov	r19,r4
80201eb0:	9806d13a 	srli	r3,r19,4
80201eb4:	e0bff017 	ldw	r2,-64(fp)
80201eb8:	1885883a 	add	r2,r3,r2
80201ebc:	e0bff315 	stw	r2,-52(fp)
	ucPercentage = 5;
80201ec0:	00800144 	movi	r2,5
80201ec4:	e0bff405 	stb	r2,-48(fp)
#if DEBUG_ON
	sprintf(cDebugBuffer, "Writing to memory...\n");
80201ec8:	00e008b4 	movhi	r3,32802
80201ecc:	18f53504 	addi	r3,r3,-11052
80201ed0:	00a008b4 	movhi	r2,32802
80201ed4:	10abb304 	addi	r2,r2,-20788
80201ed8:	1009883a 	mov	r4,r2
80201edc:	00800584 	movi	r2,22
80201ee0:	100d883a 	mov	r6,r2
80201ee4:	200b883a 	mov	r5,r4
80201ee8:	1809883a 	mov	r4,r3
80201eec:	02051b40 	call	802051b4 <memcpy>
	debug(fp, cDebugBuffer);
80201ef0:	012008b4 	movhi	r4,32802
80201ef4:	21353504 	addi	r4,r4,-11052
80201ef8:	020532c0 	call	8020532c <printf>
#endif
	if (bVerbose == DDR2_VERBOSE) {
80201efc:	e0bffa17 	ldw	r2,-24(fp)
80201f00:	10800058 	cmpnei	r2,r2,1
80201f04:	1000081e 	bne	r2,zero,80201f28 <bDdr2MemoryRandomWriteTest+0x1e4>
#if DEBUG_ON
		sprintf(cDebugBuffer, "00%%..");
80201f08:	016008b4 	movhi	r5,32802
80201f0c:	296bb904 	addi	r5,r5,-20764
80201f10:	012008b4 	movhi	r4,32802
80201f14:	21353504 	addi	r4,r4,-11052
80201f18:	02054940 	call	80205494 <sprintf>
		debug(fp, cDebugBuffer);
80201f1c:	012008b4 	movhi	r4,32802
80201f20:	21353504 	addi	r4,r4,-11052
80201f24:	020532c0 	call	8020532c <printf>
#endif
	}
	int TimeStart, TimeElapsed = 0;
80201f28:	e03ff615 	stw	zero,-40(fp)
80201f2c:	d0a02517 	ldw	r2,-32620(gp)

	TimeStart = alt_nticks();
80201f30:	e0bff715 	stw	r2,-36(fp)
	for (puliDestination = (alt_u32*) uliDdr2Base;
80201f34:	e0bff017 	ldw	r2,-64(fp)
80201f38:	e0bff215 	stw	r2,-56(fp)
80201f3c:	00002a06 	br	80201fe8 <bDdr2MemoryRandomWriteTest+0x2a4>
			(alt_u32) puliDestination < uliMemoryEndAddress;
			puliDestination++) {
		*puliDestination = uliXorshift32(&uliCurrentState);
80201f40:	e0bff804 	addi	r2,fp,-32
80201f44:	1009883a 	mov	r4,r2
80201f48:	02025980 	call	80202598 <uliXorshift32>
80201f4c:	1007883a 	mov	r3,r2
80201f50:	e0bff217 	ldw	r2,-56(fp)
80201f54:	10c00015 	stw	r3,0(r2)
		if ((bVerbose == DDR2_VERBOSE)
				& ((alt_u32) puliDestination > uliNextMilestone)) {
80201f58:	e0bffa17 	ldw	r2,-24(fp)
80201f5c:	10800060 	cmpeqi	r2,r2,1
80201f60:	1009883a 	mov	r4,r2
80201f64:	e0bff217 	ldw	r2,-56(fp)
80201f68:	e0fff317 	ldw	r3,-52(fp)
80201f6c:	1885803a 	cmpltu	r2,r3,r2
80201f70:	2084703a 	and	r2,r4,r2
	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
			(alt_u32) puliDestination < uliMemoryEndAddress;
			puliDestination++) {
		*puliDestination = uliXorshift32(&uliCurrentState);
		if ((bVerbose == DDR2_VERBOSE)
80201f74:	10803fcc 	andi	r2,r2,255
80201f78:	10001826 	beq	r2,zero,80201fdc <bDdr2MemoryRandomWriteTest+0x298>
				& ((alt_u32) puliDestination > uliNextMilestone)) {
#if DEBUG_ON
			sprintf(cDebugBuffer, "..%02d%%..", ucPercentage);
80201f7c:	e0bff403 	ldbu	r2,-48(fp)
80201f80:	100d883a 	mov	r6,r2
80201f84:	016008b4 	movhi	r5,32802
80201f88:	296bbb04 	addi	r5,r5,-20756
80201f8c:	012008b4 	movhi	r4,32802
80201f90:	21353504 	addi	r4,r4,-11052
80201f94:	02054940 	call	80205494 <sprintf>
			debug(fp, cDebugBuffer);
80201f98:	012008b4 	movhi	r4,32802
80201f9c:	21353504 	addi	r4,r4,-11052
80201fa0:	020532c0 	call	8020532c <printf>
#endif
			uliNextMilestone += uliByteLen / 20;
80201fa4:	e0fff117 	ldw	r3,-60(fp)
80201fa8:	00b33374 	movhi	r2,52429
80201fac:	10b33344 	addi	r2,r2,-13107
80201fb0:	1888383a 	mulxuu	r4,r3,r2
80201fb4:	1885383a 	mul	r2,r3,r2
80201fb8:	1021883a 	mov	r16,r2
80201fbc:	2023883a 	mov	r17,r4
80201fc0:	8804d13a 	srli	r2,r17,4
80201fc4:	e0fff317 	ldw	r3,-52(fp)
80201fc8:	1885883a 	add	r2,r3,r2
80201fcc:	e0bff315 	stw	r2,-52(fp)
			ucPercentage += 5;
80201fd0:	e0bff403 	ldbu	r2,-48(fp)
80201fd4:	10800144 	addi	r2,r2,5
80201fd8:	e0bff405 	stb	r2,-48(fp)
	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
			(alt_u32) puliDestination < uliMemoryEndAddress;
			puliDestination++) {
80201fdc:	e0bff217 	ldw	r2,-56(fp)
80201fe0:	10800104 	addi	r2,r2,4
80201fe4:	e0bff215 	stw	r2,-56(fp)
	}
	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
			(alt_u32) puliDestination < uliMemoryEndAddress;
80201fe8:	e0fff217 	ldw	r3,-56(fp)
#endif
	}
	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
80201fec:	e0bff517 	ldw	r2,-44(fp)
80201ff0:	18bfd336 	bltu	r3,r2,80201f40 <__reset+0xfa1e1f40>
#endif
			uliNextMilestone += uliByteLen / 20;
			ucPercentage += 5;
		}
	}
	alt_dcache_flush_all();
80201ff4:	021534c0 	call	8021534c <alt_dcache_flush_all>
	if (bVerbose == DDR2_VERBOSE) {
80201ff8:	e0bffa17 	ldw	r2,-24(fp)
80201ffc:	10800058 	cmpnei	r2,r2,1
80202000:	1000081e 	bne	r2,zero,80202024 <bDdr2MemoryRandomWriteTest+0x2e0>
#if DEBUG_ON
		sprintf(cDebugBuffer, "..100%%\n");
80202004:	016008b4 	movhi	r5,32802
80202008:	296bbe04 	addi	r5,r5,-20744
8020200c:	012008b4 	movhi	r4,32802
80202010:	21353504 	addi	r4,r4,-11052
80202014:	02054940 	call	80205494 <sprintf>
		debug(fp, cDebugBuffer);
80202018:	012008b4 	movhi	r4,32802
8020201c:	21353504 	addi	r4,r4,-11052
80202020:	020532c0 	call	8020532c <printf>
#endif
	}

	if (bSuccess) {
80202024:	e0bfef17 	ldw	r2,-68(fp)
80202028:	10002d26 	beq	r2,zero,802020e0 <bDdr2MemoryRandomWriteTest+0x39c>
		if (bTime == TRUE) {
8020202c:	e0bffb17 	ldw	r2,-20(fp)
80202030:	10800058 	cmpnei	r2,r2,1
80202034:	1000201e 	bne	r2,zero,802020b8 <bDdr2MemoryRandomWriteTest+0x374>
80202038:	d0e02517 	ldw	r3,-32620(gp)
			TimeElapsed = alt_nticks() - TimeStart;
8020203c:	e0bff717 	ldw	r2,-36(fp)
80202040:	1885c83a 	sub	r2,r3,r2
80202044:	e0bff615 	stw	r2,-40(fp)
#if DEBUG_ON
			sprintf(cDebugBuffer,
					"DDR2 write test pass, size=%ld bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
80202048:	e13ff617 	ldw	r4,-40(fp)
8020204c:	0204d2c0 	call	80204d2c <__floatsisf>
80202050:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
80202054:	d0a02417 	ldw	r2,-32624(gp)
80202058:	1009883a 	mov	r4,r2
8020205c:	0204e500 	call	80204e50 <__floatunsisf>
80202060:	1007883a 	mov	r3,r2
80202064:	180b883a 	mov	r5,r3
80202068:	8009883a 	mov	r4,r16
8020206c:	02048ec0 	call	802048ec <__divsf3>
80202070:	1007883a 	mov	r3,r2
80202074:	1805883a 	mov	r2,r3

	if (bSuccess) {
		if (bTime == TRUE) {
			TimeElapsed = alt_nticks() - TimeStart;
#if DEBUG_ON
			sprintf(cDebugBuffer,
80202078:	1009883a 	mov	r4,r2
8020207c:	0204f400 	call	80204f40 <__extendsfdf2>
80202080:	1009883a 	mov	r4,r2
80202084:	180b883a 	mov	r5,r3
80202088:	d9400015 	stw	r5,0(sp)
8020208c:	200f883a 	mov	r7,r4
80202090:	e1bff117 	ldw	r6,-60(fp)
80202094:	016008b4 	movhi	r5,32802
80202098:	296bc104 	addi	r5,r5,-20732
8020209c:	012008b4 	movhi	r4,32802
802020a0:	21353504 	addi	r4,r4,-11052
802020a4:	02054940 	call	80205494 <sprintf>
					"DDR2 write test pass, size=%ld bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
			debug(fp, cDebugBuffer);
802020a8:	012008b4 	movhi	r4,32802
802020ac:	21353504 	addi	r4,r4,-11052
802020b0:	020532c0 	call	8020532c <printf>
802020b4:	00001706 	br	80202114 <bDdr2MemoryRandomWriteTest+0x3d0>
#endif
		} else {
#if DEBUG_ON
			sprintf(cDebugBuffer, "DDR2 write test pass, size=%ld bytes\n",
802020b8:	e1bff117 	ldw	r6,-60(fp)
802020bc:	016008b4 	movhi	r5,32802
802020c0:	296bcd04 	addi	r5,r5,-20684
802020c4:	012008b4 	movhi	r4,32802
802020c8:	21353504 	addi	r4,r4,-11052
802020cc:	02054940 	call	80205494 <sprintf>
					uliByteLen);
			debug(fp, cDebugBuffer);
802020d0:	012008b4 	movhi	r4,32802
802020d4:	21353504 	addi	r4,r4,-11052
802020d8:	020532c0 	call	8020532c <printf>
802020dc:	00000d06 	br	80202114 <bDdr2MemoryRandomWriteTest+0x3d0>
#endif
		}
	} else {
#if DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 write test fail\n");
802020e0:	00e008b4 	movhi	r3,32802
802020e4:	18f53504 	addi	r3,r3,-11052
802020e8:	00a008b4 	movhi	r2,32802
802020ec:	10ab6a04 	addi	r2,r2,-21080
802020f0:	1009883a 	mov	r4,r2
802020f4:	00800584 	movi	r2,22
802020f8:	100d883a 	mov	r6,r2
802020fc:	200b883a 	mov	r5,r4
80202100:	1809883a 	mov	r4,r3
80202104:	02051b40 	call	802051b4 <memcpy>
		debug(fp, cDebugBuffer);
80202108:	012008b4 	movhi	r4,32802
8020210c:	21353504 	addi	r4,r4,-11052
80202110:	020532c0 	call	8020532c <printf>
#endif
	}
#if DEBUG_ON
	sprintf(cDebugBuffer, "\n");
80202114:	00a008b4 	movhi	r2,32802
80202118:	10b53504 	addi	r2,r2,-11052
8020211c:	00c00284 	movi	r3,10
80202120:	10c00005 	stb	r3,0(r2)
80202124:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
80202128:	012008b4 	movhi	r4,32802
8020212c:	21353504 	addi	r4,r4,-11052
80202130:	020532c0 	call	8020532c <printf>
#endif

	return bSuccess;
80202134:	e0bfef17 	ldw	r2,-68(fp)
}
80202138:	e6fffc04 	addi	sp,fp,-16
8020213c:	dfc00517 	ldw	ra,20(sp)
80202140:	df000417 	ldw	fp,16(sp)
80202144:	dcc00317 	ldw	r19,12(sp)
80202148:	dc800217 	ldw	r18,8(sp)
8020214c:	dc400117 	ldw	r17,4(sp)
80202150:	dc000017 	ldw	r16,0(sp)
80202154:	dec00604 	addi	sp,sp,24
80202158:	f800283a 	ret

8020215c <bDdr2MemoryRandomReadTest>:
 * @param [in] bTime  Controla se a duração da função será medida
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryRandomReadTest(alt_u8 ucMemoryId, bool bVerbose, bool bTime) {
8020215c:	deffec04 	addi	sp,sp,-80
80202160:	dfc01315 	stw	ra,76(sp)
80202164:	df001215 	stw	fp,72(sp)
80202168:	dcc01115 	stw	r19,68(sp)
8020216c:	dc801015 	stw	r18,64(sp)
80202170:	dc400f15 	stw	r17,60(sp)
80202174:	dc000e15 	stw	r16,56(sp)
80202178:	df001204 	addi	fp,sp,72
8020217c:	2005883a 	mov	r2,r4
80202180:	e17ffa15 	stw	r5,-24(fp)
80202184:	e1bffb15 	stw	r6,-20(fp)
80202188:	e0bff905 	stb	r2,-28(fp)

#if DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Random Read Test =====\n");
8020218c:	00e008b4 	movhi	r3,32802
80202190:	18f53504 	addi	r3,r3,-11052
80202194:	00a008b4 	movhi	r2,32802
80202198:	10abd704 	addi	r2,r2,-20644
8020219c:	1009883a 	mov	r4,r2
802021a0:	00800b84 	movi	r2,46
802021a4:	100d883a 	mov	r6,r2
802021a8:	200b883a 	mov	r5,r4
802021ac:	1809883a 	mov	r4,r3
802021b0:	02051b40 	call	802051b4 <memcpy>
	debug(fp, cDebugBuffer);
802021b4:	012008b4 	movhi	r4,32802
802021b8:	21353504 	addi	r4,r4,-11052
802021bc:	020532c0 	call	8020532c <printf>
#endif
	bool bSuccess = FALSE;
802021c0:	e03fef15 	stw	zero,-68(fp)
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	switch (ucMemoryId) {
802021c4:	e0bff903 	ldbu	r2,-28(fp)
802021c8:	10000326 	beq	r2,zero,802021d8 <bDdr2MemoryRandomReadTest+0x7c>
802021cc:	10800060 	cmpeqi	r2,r2,1
802021d0:	10000a1e 	bne	r2,zero,802021fc <bDdr2MemoryRandomReadTest+0xa0>
802021d4:	00001206 	br	80202220 <bDdr2MemoryRandomReadTest+0xc4>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
802021d8:	e0bff903 	ldbu	r2,-28(fp)
802021dc:	1009883a 	mov	r4,r2
802021e0:	02012940 	call	80201294 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
802021e4:	e03ff015 	stw	zero,-64(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
802021e8:	00a00034 	movhi	r2,32768
802021ec:	e0bff115 	stw	r2,-60(fp)
		bSuccess = TRUE;
802021f0:	00800044 	movi	r2,1
802021f4:	e0bfef15 	stw	r2,-68(fp)
		break;
802021f8:	00001906 	br	80202260 <bDdr2MemoryRandomReadTest+0x104>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
802021fc:	e0bff903 	ldbu	r2,-28(fp)
80202200:	1009883a 	mov	r4,r2
80202204:	02012940 	call	80201294 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
80202208:	e03ff015 	stw	zero,-64(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
8020220c:	00a00034 	movhi	r2,32768
80202210:	e0bff115 	stw	r2,-60(fp)
		bSuccess = TRUE;
80202214:	00800044 	movi	r2,1
80202218:	e0bfef15 	stw	r2,-68(fp)
		break;
8020221c:	00001006 	br	80202260 <bDdr2MemoryRandomReadTest+0x104>
	default:
		bSuccess = FALSE;
80202220:	e03fef15 	stw	zero,-68(fp)
#if DEBUG_ON
		sprintf(cDebugBuffer,
80202224:	00e008b4 	movhi	r3,32802
80202228:	18f53504 	addi	r3,r3,-11052
8020222c:	00a008b4 	movhi	r2,32802
80202230:	10a95804 	addi	r2,r2,-23200
80202234:	1009883a 	mov	r4,r2
80202238:	00800bc4 	movi	r2,47
8020223c:	100d883a 	mov	r6,r2
80202240:	200b883a 	mov	r5,r4
80202244:	1809883a 	mov	r4,r3
80202248:	02051b40 	call	802051b4 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
8020224c:	012008b4 	movhi	r4,32802
80202250:	21353504 	addi	r4,r4,-11052
80202254:	020532c0 	call	8020532c <printf>
		;
#endif
		return bSuccess;
80202258:	e0bfef17 	ldw	r2,-68(fp)
8020225c:	0000c506 	br	80202574 <bDdr2MemoryRandomReadTest+0x418>
	}

#if DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %ld MBytes\n", uliByteLen / 1024 / 1024);
80202260:	e0bff117 	ldw	r2,-60(fp)
80202264:	1004d53a 	srli	r2,r2,20
80202268:	100d883a 	mov	r6,r2
8020226c:	016008b4 	movhi	r5,32802
80202270:	296b5104 	addi	r5,r5,-21180
80202274:	012008b4 	movhi	r4,32802
80202278:	21353504 	addi	r4,r4,-11052
8020227c:	02054940 	call	80205494 <sprintf>
	debug(fp, cDebugBuffer);
80202280:	012008b4 	movhi	r4,32802
80202284:	21353504 	addi	r4,r4,-11052
80202288:	020532c0 	call	8020532c <printf>
	alt_u32 uliCurrentState;
	alt_u32 uliMemoryEndAddress;
	alt_u32 uliNextMilestone;
	alt_u8 ucPercentage;

	uliCurrentState = uliInitialState;
8020228c:	d0a01317 	ldw	r2,-32692(gp)
80202290:	e0bff815 	stw	r2,-32(fp)
	uliMemoryEndAddress = uliDdr2Base + uliByteLen;
80202294:	e0fff017 	ldw	r3,-64(fp)
80202298:	e0bff117 	ldw	r2,-60(fp)
8020229c:	1885883a 	add	r2,r3,r2
802022a0:	e0bff515 	stw	r2,-44(fp)
	uliNextMilestone = uliDdr2Base + uliByteLen / 20;
802022a4:	e0fff117 	ldw	r3,-60(fp)
802022a8:	00b33374 	movhi	r2,52429
802022ac:	10b33344 	addi	r2,r2,-13107
802022b0:	1888383a 	mulxuu	r4,r3,r2
802022b4:	1885383a 	mul	r2,r3,r2
802022b8:	1025883a 	mov	r18,r2
802022bc:	2027883a 	mov	r19,r4
802022c0:	9806d13a 	srli	r3,r19,4
802022c4:	e0bff017 	ldw	r2,-64(fp)
802022c8:	1885883a 	add	r2,r3,r2
802022cc:	e0bff315 	stw	r2,-52(fp)
	ucPercentage = 5;
802022d0:	00800144 	movi	r2,5
802022d4:	e0bff405 	stb	r2,-48(fp)
#if DEBUG_ON
	sprintf(cDebugBuffer, "Reading from memory...\n");
802022d8:	00e008b4 	movhi	r3,32802
802022dc:	18f53504 	addi	r3,r3,-11052
802022e0:	00a008b4 	movhi	r2,32802
802022e4:	10abe304 	addi	r2,r2,-20596
802022e8:	1009883a 	mov	r4,r2
802022ec:	00800604 	movi	r2,24
802022f0:	100d883a 	mov	r6,r2
802022f4:	200b883a 	mov	r5,r4
802022f8:	1809883a 	mov	r4,r3
802022fc:	02051b40 	call	802051b4 <memcpy>
	debug(fp, cDebugBuffer);
80202300:	012008b4 	movhi	r4,32802
80202304:	21353504 	addi	r4,r4,-11052
80202308:	020532c0 	call	8020532c <printf>
#endif
	if (bVerbose == DDR2_VERBOSE) {
8020230c:	e0bffa17 	ldw	r2,-24(fp)
80202310:	10800058 	cmpnei	r2,r2,1
80202314:	1000081e 	bne	r2,zero,80202338 <bDdr2MemoryRandomReadTest+0x1dc>
#if DEBUG_ON
		sprintf(cDebugBuffer, "00%%..");
80202318:	016008b4 	movhi	r5,32802
8020231c:	296bb904 	addi	r5,r5,-20764
80202320:	012008b4 	movhi	r4,32802
80202324:	21353504 	addi	r4,r4,-11052
80202328:	02054940 	call	80205494 <sprintf>
		debug(fp, cDebugBuffer);
8020232c:	012008b4 	movhi	r4,32802
80202330:	21353504 	addi	r4,r4,-11052
80202334:	020532c0 	call	8020532c <printf>
#endif
	}

	int TimeStart, TimeElapsed = 0;
80202338:	e03ff615 	stw	zero,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
8020233c:	d0a02517 	ldw	r2,-32620(gp)

	TimeStart = alt_nticks();
80202340:	e0bff715 	stw	r2,-36(fp)
	for (puliSource = (alt_u32*) uliDdr2Base;
80202344:	e0bff017 	ldw	r2,-64(fp)
80202348:	e0bff215 	stw	r2,-56(fp)
8020234c:	00003606 	br	80202428 <bDdr2MemoryRandomReadTest+0x2cc>
			(alt_u32) puliSource < uliMemoryEndAddress; puliSource++) {
		if (uliXorshift32(&uliCurrentState) != *puliSource) {
80202350:	e0bff804 	addi	r2,fp,-32
80202354:	1009883a 	mov	r4,r2
80202358:	02025980 	call	80202598 <uliXorshift32>
8020235c:	1007883a 	mov	r3,r2
80202360:	e0bff217 	ldw	r2,-56(fp)
80202364:	10800017 	ldw	r2,0(r2)
80202368:	18800e26 	beq	r3,r2,802023a4 <bDdr2MemoryRandomReadTest+0x248>
			bSuccess = FALSE;
8020236c:	e03fef15 	stw	zero,-68(fp)
			if (bVerbose == DDR2_VERBOSE) {
80202370:	e0bffa17 	ldw	r2,-24(fp)
80202374:	10800058 	cmpnei	r2,r2,1
80202378:	10000a1e 	bne	r2,zero,802023a4 <bDdr2MemoryRandomReadTest+0x248>
#if DEBUG_ON
				sprintf(cDebugBuffer, "Failed to read adress 0x%08lX\n",
8020237c:	e0bff217 	ldw	r2,-56(fp)
80202380:	100d883a 	mov	r6,r2
80202384:	016008b4 	movhi	r5,32802
80202388:	296be904 	addi	r5,r5,-20572
8020238c:	012008b4 	movhi	r4,32802
80202390:	21353504 	addi	r4,r4,-11052
80202394:	02054940 	call	80205494 <sprintf>
						(alt_u32)puliSource);
				debug(fp, cDebugBuffer);
80202398:	012008b4 	movhi	r4,32802
8020239c:	21353504 	addi	r4,r4,-11052
802023a0:	020532c0 	call	8020532c <printf>
#endif
			}
		}
		if ((bVerbose == DDR2_VERBOSE)
802023a4:	e0bffa17 	ldw	r2,-24(fp)
802023a8:	10800058 	cmpnei	r2,r2,1
802023ac:	10001b1e 	bne	r2,zero,8020241c <bDdr2MemoryRandomReadTest+0x2c0>
				&& ((alt_u32) puliSource > uliNextMilestone)) {
802023b0:	e0bff217 	ldw	r2,-56(fp)
802023b4:	e0fff317 	ldw	r3,-52(fp)
802023b8:	1880182e 	bgeu	r3,r2,8020241c <bDdr2MemoryRandomReadTest+0x2c0>
#if DEBUG_ON
			sprintf(cDebugBuffer, "..%02d%%..", ucPercentage);
802023bc:	e0bff403 	ldbu	r2,-48(fp)
802023c0:	100d883a 	mov	r6,r2
802023c4:	016008b4 	movhi	r5,32802
802023c8:	296bbb04 	addi	r5,r5,-20756
802023cc:	012008b4 	movhi	r4,32802
802023d0:	21353504 	addi	r4,r4,-11052
802023d4:	02054940 	call	80205494 <sprintf>
			debug(fp, cDebugBuffer);
802023d8:	012008b4 	movhi	r4,32802
802023dc:	21353504 	addi	r4,r4,-11052
802023e0:	020532c0 	call	8020532c <printf>
#endif
			uliNextMilestone += uliByteLen / 20;
802023e4:	e0fff117 	ldw	r3,-60(fp)
802023e8:	00b33374 	movhi	r2,52429
802023ec:	10b33344 	addi	r2,r2,-13107
802023f0:	1888383a 	mulxuu	r4,r3,r2
802023f4:	1885383a 	mul	r2,r3,r2
802023f8:	1021883a 	mov	r16,r2
802023fc:	2023883a 	mov	r17,r4
80202400:	8804d13a 	srli	r2,r17,4
80202404:	e0fff317 	ldw	r3,-52(fp)
80202408:	1885883a 	add	r2,r3,r2
8020240c:	e0bff315 	stw	r2,-52(fp)
			ucPercentage += 5;
80202410:	e0bff403 	ldbu	r2,-48(fp)
80202414:	10800144 	addi	r2,r2,5
80202418:	e0bff405 	stb	r2,-48(fp)

	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliSource = (alt_u32*) uliDdr2Base;
			(alt_u32) puliSource < uliMemoryEndAddress; puliSource++) {
8020241c:	e0bff217 	ldw	r2,-56(fp)
80202420:	10800104 	addi	r2,r2,4
80202424:	e0bff215 	stw	r2,-56(fp)
80202428:	e0fff217 	ldw	r3,-56(fp)
	}

	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliSource = (alt_u32*) uliDdr2Base;
8020242c:	e0bff517 	ldw	r2,-44(fp)
80202430:	18bfc736 	bltu	r3,r2,80202350 <__reset+0xfa1e2350>
#endif
			uliNextMilestone += uliByteLen / 20;
			ucPercentage += 5;
		}
	}
	if (bVerbose == DDR2_VERBOSE) {
80202434:	e0bffa17 	ldw	r2,-24(fp)
80202438:	10800058 	cmpnei	r2,r2,1
8020243c:	1000081e 	bne	r2,zero,80202460 <bDdr2MemoryRandomReadTest+0x304>
#if DEBUG_ON
		sprintf(cDebugBuffer, "..100%%\n");
80202440:	016008b4 	movhi	r5,32802
80202444:	296bbe04 	addi	r5,r5,-20744
80202448:	012008b4 	movhi	r4,32802
8020244c:	21353504 	addi	r4,r4,-11052
80202450:	02054940 	call	80205494 <sprintf>
		debug(fp, cDebugBuffer);
80202454:	012008b4 	movhi	r4,32802
80202458:	21353504 	addi	r4,r4,-11052
8020245c:	020532c0 	call	8020532c <printf>
#endif
	}

	if (bSuccess) {
80202460:	e0bfef17 	ldw	r2,-68(fp)
80202464:	10002d26 	beq	r2,zero,8020251c <bDdr2MemoryRandomReadTest+0x3c0>
		if (bTime == TRUE) {
80202468:	e0bffb17 	ldw	r2,-20(fp)
8020246c:	10800058 	cmpnei	r2,r2,1
80202470:	1000201e 	bne	r2,zero,802024f4 <bDdr2MemoryRandomReadTest+0x398>
80202474:	d0e02517 	ldw	r3,-32620(gp)
			TimeElapsed = alt_nticks() - TimeStart;
80202478:	e0bff717 	ldw	r2,-36(fp)
8020247c:	1885c83a 	sub	r2,r3,r2
80202480:	e0bff615 	stw	r2,-40(fp)
#if DEBUG_ON
			sprintf(cDebugBuffer,
					"DDR2 read test pass, size=%lu bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
80202484:	e13ff617 	ldw	r4,-40(fp)
80202488:	0204d2c0 	call	80204d2c <__floatsisf>
8020248c:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
80202490:	d0a02417 	ldw	r2,-32624(gp)
80202494:	1009883a 	mov	r4,r2
80202498:	0204e500 	call	80204e50 <__floatunsisf>
8020249c:	1007883a 	mov	r3,r2
802024a0:	180b883a 	mov	r5,r3
802024a4:	8009883a 	mov	r4,r16
802024a8:	02048ec0 	call	802048ec <__divsf3>
802024ac:	1007883a 	mov	r3,r2
802024b0:	1805883a 	mov	r2,r3

	if (bSuccess) {
		if (bTime == TRUE) {
			TimeElapsed = alt_nticks() - TimeStart;
#if DEBUG_ON
			sprintf(cDebugBuffer,
802024b4:	1009883a 	mov	r4,r2
802024b8:	0204f400 	call	80204f40 <__extendsfdf2>
802024bc:	1009883a 	mov	r4,r2
802024c0:	180b883a 	mov	r5,r3
802024c4:	d9400015 	stw	r5,0(sp)
802024c8:	200f883a 	mov	r7,r4
802024cc:	e1bff117 	ldw	r6,-60(fp)
802024d0:	016008b4 	movhi	r5,32802
802024d4:	296bf104 	addi	r5,r5,-20540
802024d8:	012008b4 	movhi	r4,32802
802024dc:	21353504 	addi	r4,r4,-11052
802024e0:	02054940 	call	80205494 <sprintf>
					"DDR2 read test pass, size=%lu bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
			debug(fp, cDebugBuffer);
802024e4:	012008b4 	movhi	r4,32802
802024e8:	21353504 	addi	r4,r4,-11052
802024ec:	020532c0 	call	8020532c <printf>
802024f0:	00001706 	br	80202550 <bDdr2MemoryRandomReadTest+0x3f4>
#endif
		} else {
#if DEBUG_ON
			sprintf(cDebugBuffer, "DDR2 read test pass, size=%lu bytes\n",
802024f4:	e1bff117 	ldw	r6,-60(fp)
802024f8:	016008b4 	movhi	r5,32802
802024fc:	296bfd04 	addi	r5,r5,-20492
80202500:	012008b4 	movhi	r4,32802
80202504:	21353504 	addi	r4,r4,-11052
80202508:	02054940 	call	80205494 <sprintf>
					uliByteLen);
			debug(fp, cDebugBuffer);
8020250c:	012008b4 	movhi	r4,32802
80202510:	21353504 	addi	r4,r4,-11052
80202514:	020532c0 	call	8020532c <printf>
80202518:	00000d06 	br	80202550 <bDdr2MemoryRandomReadTest+0x3f4>
#endif
		}
	} else {
#if DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test fail\n");
8020251c:	00e008b4 	movhi	r3,32802
80202520:	18f53504 	addi	r3,r3,-11052
80202524:	00a008b4 	movhi	r2,32802
80202528:	10aba104 	addi	r2,r2,-20860
8020252c:	1009883a 	mov	r4,r2
80202530:	00800544 	movi	r2,21
80202534:	100d883a 	mov	r6,r2
80202538:	200b883a 	mov	r5,r4
8020253c:	1809883a 	mov	r4,r3
80202540:	02051b40 	call	802051b4 <memcpy>
		debug(fp, cDebugBuffer);
80202544:	012008b4 	movhi	r4,32802
80202548:	21353504 	addi	r4,r4,-11052
8020254c:	020532c0 	call	8020532c <printf>
#endif
	}
#if DEBUG_ON
	sprintf(cDebugBuffer, "\n");
80202550:	00a008b4 	movhi	r2,32802
80202554:	10b53504 	addi	r2,r2,-11052
80202558:	00c00284 	movi	r3,10
8020255c:	10c00005 	stb	r3,0(r2)
80202560:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
80202564:	012008b4 	movhi	r4,32802
80202568:	21353504 	addi	r4,r4,-11052
8020256c:	020532c0 	call	8020532c <printf>
#endif

	return bSuccess;
80202570:	e0bfef17 	ldw	r2,-68(fp)
}
80202574:	e6fffc04 	addi	sp,fp,-16
80202578:	dfc00517 	ldw	ra,20(sp)
8020257c:	df000417 	ldw	fp,16(sp)
80202580:	dcc00317 	ldw	r19,12(sp)
80202584:	dc800217 	ldw	r18,8(sp)
80202588:	dc400117 	ldw	r17,4(sp)
8020258c:	dc000017 	ldw	r16,0(sp)
80202590:	dec00604 	addi	sp,sp,24
80202594:	f800283a 	ret

80202598 <uliXorshift32>:
 * @param [in] bDRIVE  Estado atual do RNG
 *
 * @retval Número aleatório resultate do RNG
 *
 */
alt_u32 uliXorshift32(alt_u32 *puliState) {
80202598:	defffd04 	addi	sp,sp,-12
8020259c:	df000215 	stw	fp,8(sp)
802025a0:	df000204 	addi	fp,sp,8
802025a4:	e13fff15 	stw	r4,-4(fp)

	alt_u32 uliX = *puliState;
802025a8:	e0bfff17 	ldw	r2,-4(fp)
802025ac:	10800017 	ldw	r2,0(r2)
802025b0:	e0bffe15 	stw	r2,-8(fp)
	uliX ^= uliX << 13;
802025b4:	e0bffe17 	ldw	r2,-8(fp)
802025b8:	1004937a 	slli	r2,r2,13
802025bc:	e0fffe17 	ldw	r3,-8(fp)
802025c0:	1884f03a 	xor	r2,r3,r2
802025c4:	e0bffe15 	stw	r2,-8(fp)
	uliX ^= uliX >> 17;
802025c8:	e0bffe17 	ldw	r2,-8(fp)
802025cc:	1004d47a 	srli	r2,r2,17
802025d0:	e0fffe17 	ldw	r3,-8(fp)
802025d4:	1884f03a 	xor	r2,r3,r2
802025d8:	e0bffe15 	stw	r2,-8(fp)
	uliX ^= uliX << 5;
802025dc:	e0bffe17 	ldw	r2,-8(fp)
802025e0:	1004917a 	slli	r2,r2,5
802025e4:	e0fffe17 	ldw	r3,-8(fp)
802025e8:	1884f03a 	xor	r2,r3,r2
802025ec:	e0bffe15 	stw	r2,-8(fp)
	*puliState = uliX;
802025f0:	e0bfff17 	ldw	r2,-4(fp)
802025f4:	e0fffe17 	ldw	r3,-8(fp)
802025f8:	10c00015 	stw	r3,0(r2)

	return uliX;
802025fc:	e0bffe17 	ldw	r2,-8(fp)
}
80202600:	e037883a 	mov	sp,fp
80202604:	df000017 	ldw	fp,0(sp)
80202608:	dec00104 	addi	sp,sp,4
8020260c:	f800283a 	ret

80202610 <bSdmaInitM1Dma>:
alt_msgdma_dev *pxDmaM1Dev = NULL;
alt_msgdma_dev *pxDmaM2Dev = NULL;
//! [data memory public global variables]

//! [public functions]
bool bSdmaInitM1Dma(void) {
80202610:	defffb04 	addi	sp,sp,-20
80202614:	dfc00415 	stw	ra,16(sp)
80202618:	df000315 	stw	fp,12(sp)
8020261c:	df000304 	addi	fp,sp,12
	bool bStatus = FALSE;
80202620:	e03ffd15 	stw	zero,-12(fp)
	bool bFailDispatcher = FALSE;
80202624:	e03ffe15 	stw	zero,-8(fp)
	alt_u16 usiCounter = 0;
80202628:	e03fff0d 	sth	zero,-4(fp)

	// open dma device
	pxDmaM1Dev = alt_msgdma_open((char *) SDMA_DMA_M1_NAME);
8020262c:	012008b4 	movhi	r4,32802
80202630:	212c0704 	addi	r4,r4,-20452
80202634:	0218eac0 	call	80218eac <alt_msgdma_open>
80202638:	d0a01415 	stw	r2,-32688(gp)

	// check if the device was opened
	if (pxDmaM1Dev != NULL) {
8020263c:	d0a01417 	ldw	r2,-32688(gp)
80202640:	10001a26 	beq	r2,zero,802026ac <bSdmaInitM1Dma+0x9c>
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM1Dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
80202644:	d0a01417 	ldw	r2,-32688(gp)
80202648:	10800317 	ldw	r2,12(r2)
8020264c:	10800104 	addi	r2,r2,4
80202650:	00c00084 	movi	r3,2
80202654:	10c00035 	stwio	r3,0(r2)
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base) & ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
80202658:	00000b06 	br	80202688 <bSdmaInitM1Dma+0x78>
			usleep(1);
8020265c:	01000044 	movi	r4,1
80202660:	0215b280 	call	80215b28 <usleep>
			usiCounter++;
80202664:	e0bfff0b 	ldhu	r2,-4(fp)
80202668:	10800044 	addi	r2,r2,1
8020266c:	e0bfff0d 	sth	r2,-4(fp)
			if (5000 <= usiCounter) { //wait at most 5ms for the device to be reseted
80202670:	e0bfff0b 	ldhu	r2,-4(fp)
80202674:	1084e230 	cmpltui	r2,r2,5000
80202678:	1000031e 	bne	r2,zero,80202688 <bSdmaInitM1Dma+0x78>
				bFailDispatcher = TRUE;
8020267c:	00800044 	movi	r2,1
80202680:	e0bffe15 	stw	r2,-8(fp)
				break;
80202684:	00000506 	br	8020269c <bSdmaInitM1Dma+0x8c>
	// check if the device was opened
	if (pxDmaM1Dev != NULL) {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM1Dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base) & ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
80202688:	d0a01417 	ldw	r2,-32688(gp)
8020268c:	10800317 	ldw	r2,12(r2)
80202690:	10800037 	ldwio	r2,0(r2)
80202694:	1080100c 	andi	r2,r2,64
80202698:	103ff01e 	bne	r2,zero,8020265c <__reset+0xfa1e265c>
			if (5000 <= usiCounter) { //wait at most 5ms for the device to be reseted
				bFailDispatcher = TRUE;
				break;
			}
		}
		if (bFailDispatcher == FALSE)
8020269c:	e0bffe17 	ldw	r2,-8(fp)
802026a0:	1000021e 	bne	r2,zero,802026ac <bSdmaInitM1Dma+0x9c>
			bStatus = TRUE;
802026a4:	00800044 	movi	r2,1
802026a8:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
802026ac:	e0bffd17 	ldw	r2,-12(fp)
}
802026b0:	e037883a 	mov	sp,fp
802026b4:	dfc00117 	ldw	ra,4(sp)
802026b8:	df000017 	ldw	fp,0(sp)
802026bc:	dec00204 	addi	sp,sp,8
802026c0:	f800283a 	ret

802026c4 <bSdmaInitM2Dma>:

bool bSdmaInitM2Dma(void) {
802026c4:	defffb04 	addi	sp,sp,-20
802026c8:	dfc00415 	stw	ra,16(sp)
802026cc:	df000315 	stw	fp,12(sp)
802026d0:	df000304 	addi	fp,sp,12
	bool bStatus = FALSE;
802026d4:	e03ffd15 	stw	zero,-12(fp)
	bool bFailDispatcher = FALSE;
802026d8:	e03ffe15 	stw	zero,-8(fp)
	alt_u16 usiCounter = 0;
802026dc:	e03fff0d 	sth	zero,-4(fp)

	// open dma device
	pxDmaM2Dev = alt_msgdma_open((char *) SDMA_DMA_M2_NAME);
802026e0:	012008b4 	movhi	r4,32802
802026e4:	212c0c04 	addi	r4,r4,-20432
802026e8:	0218eac0 	call	80218eac <alt_msgdma_open>
802026ec:	d0a01515 	stw	r2,-32684(gp)

	// check if the device was opened
	if (pxDmaM2Dev == NULL) {
802026f0:	d0a01517 	ldw	r2,-32684(gp)
802026f4:	1000021e 	bne	r2,zero,80202700 <bSdmaInitM2Dma+0x3c>
		// device not opened
		bStatus = FALSE;
802026f8:	e03ffd15 	stw	zero,-12(fp)
802026fc:	00001a06 	br	80202768 <bSdmaInitM2Dma+0xa4>
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM2Dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
80202700:	d0a01517 	ldw	r2,-32684(gp)
80202704:	10800317 	ldw	r2,12(r2)
80202708:	10800104 	addi	r2,r2,4
8020270c:	00c00084 	movi	r3,2
80202710:	10c00035 	stwio	r3,0(r2)
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base) & ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
80202714:	00000b06 	br	80202744 <bSdmaInitM2Dma+0x80>
			usleep(1);
80202718:	01000044 	movi	r4,1
8020271c:	0215b280 	call	80215b28 <usleep>
			usiCounter++;
80202720:	e0bfff0b 	ldhu	r2,-4(fp)
80202724:	10800044 	addi	r2,r2,1
80202728:	e0bfff0d 	sth	r2,-4(fp)
			if (5000 <= usiCounter) { //wait at most 5ms for the device to be reseted
8020272c:	e0bfff0b 	ldhu	r2,-4(fp)
80202730:	1084e230 	cmpltui	r2,r2,5000
80202734:	1000031e 	bne	r2,zero,80202744 <bSdmaInitM2Dma+0x80>
				bFailDispatcher = TRUE;
80202738:	00800044 	movi	r2,1
8020273c:	e0bffe15 	stw	r2,-8(fp)
				break;
80202740:	00000506 	br	80202758 <bSdmaInitM2Dma+0x94>
		bStatus = FALSE;
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM2Dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base) & ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
80202744:	d0a01517 	ldw	r2,-32684(gp)
80202748:	10800317 	ldw	r2,12(r2)
8020274c:	10800037 	ldwio	r2,0(r2)
80202750:	1080100c 	andi	r2,r2,64
80202754:	103ff01e 	bne	r2,zero,80202718 <__reset+0xfa1e2718>
			if (5000 <= usiCounter) { //wait at most 5ms for the device to be reseted
				bFailDispatcher = TRUE;
				break;
			}
		}
		if (bFailDispatcher == FALSE)
80202758:	e0bffe17 	ldw	r2,-8(fp)
8020275c:	1000021e 	bne	r2,zero,80202768 <bSdmaInitM2Dma+0xa4>
			bStatus = TRUE;
80202760:	00800044 	movi	r2,1
80202764:	e0bffd15 	stw	r2,-12(fp)
	}
	return bStatus;
80202768:	e0bffd17 	ldw	r2,-12(fp)
}
8020276c:	e037883a 	mov	sp,fp
80202770:	dfc00117 	ldw	ra,4(sp)
80202774:	df000017 	ldw	fp,0(sp)
80202778:	dec00204 	addi	sp,sp,8
8020277c:	f800283a 	ret

80202780 <bSdmaDmaM1Transfer>:

bool bSdmaDmaM1Transfer(alt_u32 *uliDdrInitialAddr, alt_u16 usiTransferSizeInBlocks, alt_u8 ucBufferSide, alt_u8 ucChBufferId) {
80202780:	deffe604 	addi	sp,sp,-104
80202784:	dfc01915 	stw	ra,100(sp)
80202788:	df001815 	stw	fp,96(sp)
8020278c:	dc001715 	stw	r16,92(sp)
80202790:	df001804 	addi	fp,sp,96
80202794:	e13ffb15 	stw	r4,-20(fp)
80202798:	2809883a 	mov	r4,r5
8020279c:	3007883a 	mov	r3,r6
802027a0:	3805883a 	mov	r2,r7
802027a4:	e13ffc0d 	sth	r4,-16(fp)
802027a8:	e0fffd05 	stb	r3,-12(fp)
802027ac:	e0bffe05 	stb	r2,-8(fp)
802027b0:	defff004 	addi	sp,sp,-64
802027b4:	d8800904 	addi	r2,sp,36
802027b8:	108007c4 	addi	r2,r2,31
802027bc:	1004d17a 	srli	r2,r2,5
802027c0:	1020917a 	slli	r16,r2,5
	bool bStatus;

	alt_msgdma_extended_descriptor xDmaExtendedDescriptor;

	alt_u32 uliDestAddrLow = 0;
802027c4:	e03ff215 	stw	zero,-56(fp)
	alt_u32 uliDestAddrHigh = 0;
802027c8:	e03ff315 	stw	zero,-52(fp)

	alt_u32 uliSrcAddrLow = 0;
802027cc:	e03ff715 	stw	zero,-36(fp)
	alt_u32 uliSrcAddrHigh = 0;
802027d0:	e03ff815 	stw	zero,-32(fp)

	alt_u32 uliControlBits = 0x00000000;
802027d4:	e03ff915 	stw	zero,-28(fp)
	bool bBufferEmptyFlag;
	bool bChannelFlag;
	bool bAddressFlag = FALSE;
802027d8:	e03ff515 	stw	zero,-44(fp)

	alt_u16 usiRoundedTransferSizeInBytes = 0;
802027dc:	e03ff60d 	sth	zero,-40(fp)

	/* Assuming that the channel selected exist, change to FALSE if doesn't */
	bChannelFlag = TRUE;
802027e0:	00800044 	movi	r2,1
802027e4:	e0bff415 	stw	r2,-48(fp)
	bStatus = FALSE;
802027e8:	e03ff115 	stw	zero,-60(fp)
	bBufferEmptyFlag = FALSE;
802027ec:	e03ffa15 	stw	zero,-24(fp)
	switch (ucChBufferId) {
802027f0:	e0bffe03 	ldbu	r2,-8(fp)
802027f4:	10c00228 	cmpgeui	r3,r2,8
802027f8:	1800a41e 	bne	r3,zero,80202a8c <bSdmaDmaM1Transfer+0x30c>
802027fc:	100690ba 	slli	r3,r2,2
80202800:	00a00834 	movhi	r2,32800
80202804:	108a0504 	addi	r2,r2,10260
80202808:	1885883a 	add	r2,r3,r2
8020280c:	10800017 	ldw	r2,0(r2)
80202810:	1000683a 	jmp	r2
80202814:	80202834 	orhi	zero,r16,32928
80202818:	80202878 	rdprs	zero,r16,-32607
8020281c:	802028c4 	addi	zero,r16,-32605
80202820:	80202910 	cmplti	zero,r16,-32604
80202824:	8020295c 	xori	zero,r16,32933
80202828:	802029a8 	cmpgeui	zero,r16,32934
8020282c:	802029f4 	orhi	zero,r16,32935
80202830:	80202a40 	call	880202a4 <__reset+0x20002a4>
	case eSdmaCh1Buffer:
		switch (ucBufferSide) {
80202834:	e0bffd03 	ldbu	r2,-12(fp)
80202838:	10000626 	beq	r2,zero,80202854 <bSdmaDmaM1Transfer+0xd4>
8020283c:	10800060 	cmpeqi	r2,r2,1
80202840:	10000926 	beq	r2,zero,80202868 <bSdmaDmaM1Transfer+0xe8>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_LOW;
80202844:	e03ff215 	stw	zero,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_HIGH;
80202848:	00800044 	movi	r2,1
8020284c:	e0bff315 	stw	r2,-52(fp)
			break;
80202850:	00000806 	br	80202874 <bSdmaDmaM1Transfer+0xf4>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_LOW;
80202854:	00800074 	movhi	r2,1
80202858:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_HIGH;
8020285c:	00800044 	movi	r2,1
80202860:	e0bff315 	stw	r2,-52(fp)
			break;
80202864:	00000306 	br	80202874 <bSdmaDmaM1Transfer+0xf4>
		default:
			bChannelFlag = FALSE;
80202868:	e03ff415 	stw	zero,-48(fp)
			bBufferEmptyFlag = FALSE;
8020286c:	e03ffa15 	stw	zero,-24(fp)
			break;
80202870:	0001883a 	nop
		}
		break;
80202874:	00008706 	br	80202a94 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh2Buffer:
		switch (ucBufferSide) {
80202878:	e0bffd03 	ldbu	r2,-12(fp)
8020287c:	10000726 	beq	r2,zero,8020289c <bSdmaDmaM1Transfer+0x11c>
80202880:	10800060 	cmpeqi	r2,r2,1
80202884:	10000b26 	beq	r2,zero,802028b4 <bSdmaDmaM1Transfer+0x134>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_LOW;
80202888:	00880004 	movi	r2,8192
8020288c:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_HIGH;
80202890:	00800044 	movi	r2,1
80202894:	e0bff315 	stw	r2,-52(fp)
			break;
80202898:	00000906 	br	802028c0 <bSdmaDmaM1Transfer+0x140>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_LOW;
8020289c:	00800074 	movhi	r2,1
802028a0:	10880004 	addi	r2,r2,8192
802028a4:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_HIGH;
802028a8:	00800044 	movi	r2,1
802028ac:	e0bff315 	stw	r2,-52(fp)
			break;
802028b0:	00000306 	br	802028c0 <bSdmaDmaM1Transfer+0x140>
		default:
			bChannelFlag = FALSE;
802028b4:	e03ff415 	stw	zero,-48(fp)
			bBufferEmptyFlag = FALSE;
802028b8:	e03ffa15 	stw	zero,-24(fp)
			break;
802028bc:	0001883a 	nop
		}
		break;
802028c0:	00007406 	br	80202a94 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh3Buffer:
		switch (ucBufferSide) {
802028c4:	e0bffd03 	ldbu	r2,-12(fp)
802028c8:	10000726 	beq	r2,zero,802028e8 <bSdmaDmaM1Transfer+0x168>
802028cc:	10800060 	cmpeqi	r2,r2,1
802028d0:	10000b26 	beq	r2,zero,80202900 <bSdmaDmaM1Transfer+0x180>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_LOW;
802028d4:	00900004 	movi	r2,16384
802028d8:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_HIGH;
802028dc:	00800044 	movi	r2,1
802028e0:	e0bff315 	stw	r2,-52(fp)
			break;
802028e4:	00000906 	br	8020290c <bSdmaDmaM1Transfer+0x18c>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_LOW;
802028e8:	00800074 	movhi	r2,1
802028ec:	10900004 	addi	r2,r2,16384
802028f0:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_HIGH;
802028f4:	00800044 	movi	r2,1
802028f8:	e0bff315 	stw	r2,-52(fp)
			break;
802028fc:	00000306 	br	8020290c <bSdmaDmaM1Transfer+0x18c>
		default:
			bChannelFlag = FALSE;
80202900:	e03ff415 	stw	zero,-48(fp)
			bBufferEmptyFlag = FALSE;
80202904:	e03ffa15 	stw	zero,-24(fp)
			break;
80202908:	0001883a 	nop
		}
		break;
8020290c:	00006106 	br	80202a94 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh4Buffer:
		switch (ucBufferSide) {
80202910:	e0bffd03 	ldbu	r2,-12(fp)
80202914:	10000726 	beq	r2,zero,80202934 <bSdmaDmaM1Transfer+0x1b4>
80202918:	10800060 	cmpeqi	r2,r2,1
8020291c:	10000b26 	beq	r2,zero,8020294c <bSdmaDmaM1Transfer+0x1cc>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_LOW;
80202920:	00980004 	movi	r2,24576
80202924:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_HIGH;
80202928:	00800044 	movi	r2,1
8020292c:	e0bff315 	stw	r2,-52(fp)
			break;
80202930:	00000906 	br	80202958 <bSdmaDmaM1Transfer+0x1d8>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_LOW;
80202934:	00800074 	movhi	r2,1
80202938:	10980004 	addi	r2,r2,24576
8020293c:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_HIGH;
80202940:	00800044 	movi	r2,1
80202944:	e0bff315 	stw	r2,-52(fp)
			break;
80202948:	00000306 	br	80202958 <bSdmaDmaM1Transfer+0x1d8>
		default:
			bChannelFlag = FALSE;
8020294c:	e03ff415 	stw	zero,-48(fp)
			bBufferEmptyFlag = FALSE;
80202950:	e03ffa15 	stw	zero,-24(fp)
			break;
80202954:	0001883a 	nop
		}
		break;
80202958:	00004e06 	br	80202a94 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh5Buffer:
		switch (ucBufferSide) {
8020295c:	e0bffd03 	ldbu	r2,-12(fp)
80202960:	10000726 	beq	r2,zero,80202980 <bSdmaDmaM1Transfer+0x200>
80202964:	10800060 	cmpeqi	r2,r2,1
80202968:	10000b26 	beq	r2,zero,80202998 <bSdmaDmaM1Transfer+0x218>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_LOW;
8020296c:	00a00014 	movui	r2,32768
80202970:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_HIGH;
80202974:	00800044 	movi	r2,1
80202978:	e0bff315 	stw	r2,-52(fp)
			break;
8020297c:	00000906 	br	802029a4 <bSdmaDmaM1Transfer+0x224>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_LOW;
80202980:	008000b4 	movhi	r2,2
80202984:	10a00004 	addi	r2,r2,-32768
80202988:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_HIGH;
8020298c:	00800044 	movi	r2,1
80202990:	e0bff315 	stw	r2,-52(fp)
			break;
80202994:	00000306 	br	802029a4 <bSdmaDmaM1Transfer+0x224>
		default:
			bChannelFlag = FALSE;
80202998:	e03ff415 	stw	zero,-48(fp)
			bBufferEmptyFlag = FALSE;
8020299c:	e03ffa15 	stw	zero,-24(fp)
			break;
802029a0:	0001883a 	nop
		}
		break;
802029a4:	00003b06 	br	80202a94 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh6Buffer:
		switch (ucBufferSide) {
802029a8:	e0bffd03 	ldbu	r2,-12(fp)
802029ac:	10000726 	beq	r2,zero,802029cc <bSdmaDmaM1Transfer+0x24c>
802029b0:	10800060 	cmpeqi	r2,r2,1
802029b4:	10000b26 	beq	r2,zero,802029e4 <bSdmaDmaM1Transfer+0x264>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_LOW;
802029b8:	00a80014 	movui	r2,40960
802029bc:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_HIGH;
802029c0:	00800044 	movi	r2,1
802029c4:	e0bff315 	stw	r2,-52(fp)
			break;
802029c8:	00000906 	br	802029f0 <bSdmaDmaM1Transfer+0x270>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_LOW;
802029cc:	008000b4 	movhi	r2,2
802029d0:	10a80004 	addi	r2,r2,-24576
802029d4:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_HIGH;
802029d8:	00800044 	movi	r2,1
802029dc:	e0bff315 	stw	r2,-52(fp)
			break;
802029e0:	00000306 	br	802029f0 <bSdmaDmaM1Transfer+0x270>
		default:
			bChannelFlag = FALSE;
802029e4:	e03ff415 	stw	zero,-48(fp)
			bBufferEmptyFlag = FALSE;
802029e8:	e03ffa15 	stw	zero,-24(fp)
			break;
802029ec:	0001883a 	nop
		}
		break;
802029f0:	00002806 	br	80202a94 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh7Buffer:
		switch (ucBufferSide) {
802029f4:	e0bffd03 	ldbu	r2,-12(fp)
802029f8:	10000726 	beq	r2,zero,80202a18 <bSdmaDmaM1Transfer+0x298>
802029fc:	10800060 	cmpeqi	r2,r2,1
80202a00:	10000b26 	beq	r2,zero,80202a30 <bSdmaDmaM1Transfer+0x2b0>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_LOW;
80202a04:	00b00014 	movui	r2,49152
80202a08:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_HIGH;
80202a0c:	00800044 	movi	r2,1
80202a10:	e0bff315 	stw	r2,-52(fp)
			break;
80202a14:	00000906 	br	80202a3c <bSdmaDmaM1Transfer+0x2bc>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_LOW;
80202a18:	008000b4 	movhi	r2,2
80202a1c:	10b00004 	addi	r2,r2,-16384
80202a20:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_HIGH;
80202a24:	00800044 	movi	r2,1
80202a28:	e0bff315 	stw	r2,-52(fp)
			break;
80202a2c:	00000306 	br	80202a3c <bSdmaDmaM1Transfer+0x2bc>
		default:
			bChannelFlag = FALSE;
80202a30:	e03ff415 	stw	zero,-48(fp)
			bBufferEmptyFlag = FALSE;
80202a34:	e03ffa15 	stw	zero,-24(fp)
			break;
80202a38:	0001883a 	nop
		}
		break;
80202a3c:	00001506 	br	80202a94 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh8Buffer:
		switch (ucBufferSide) {
80202a40:	e0bffd03 	ldbu	r2,-12(fp)
80202a44:	10000726 	beq	r2,zero,80202a64 <bSdmaDmaM1Transfer+0x2e4>
80202a48:	10800060 	cmpeqi	r2,r2,1
80202a4c:	10000b26 	beq	r2,zero,80202a7c <bSdmaDmaM1Transfer+0x2fc>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_LOW;
80202a50:	00b80014 	movui	r2,57344
80202a54:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_HIGH;
80202a58:	00800044 	movi	r2,1
80202a5c:	e0bff315 	stw	r2,-52(fp)
			break;
80202a60:	00000906 	br	80202a88 <bSdmaDmaM1Transfer+0x308>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_LOW;
80202a64:	008000b4 	movhi	r2,2
80202a68:	10b80004 	addi	r2,r2,-8192
80202a6c:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_HIGH;
80202a70:	00800044 	movi	r2,1
80202a74:	e0bff315 	stw	r2,-52(fp)
			break;
80202a78:	00000306 	br	80202a88 <bSdmaDmaM1Transfer+0x308>
		default:
			bChannelFlag = FALSE;
80202a7c:	e03ff415 	stw	zero,-48(fp)
			bBufferEmptyFlag = FALSE;
80202a80:	e03ffa15 	stw	zero,-24(fp)
			break;
80202a84:	0001883a 	nop
		}
		break;
80202a88:	00000206 	br	80202a94 <bSdmaDmaM1Transfer+0x314>
	default:
		bChannelFlag = FALSE;
80202a8c:	e03ff415 	stw	zero,-48(fp)
		break;
80202a90:	0001883a 	nop
	}

	uliSrcAddrLow = (alt_u32) SDMA_M1_BASE_ADDR_LOW	+ (alt_u32) uliDdrInitialAddr;
80202a94:	e0bffb17 	ldw	r2,-20(fp)
80202a98:	e0bff715 	stw	r2,-36(fp)
	uliSrcAddrHigh = (alt_u32) SDMA_M1_BASE_ADDR_HIGH;
80202a9c:	e03ff815 	stw	zero,-32(fp)

	bBufferEmptyFlag = TRUE;
80202aa0:	00800044 	movi	r2,1
80202aa4:	e0bffa15 	stw	r2,-24(fp)

	// Rounding up the size to the nearest multiple of 32 (32 bytes = 256b = size of memory access)
	if ((SDMA_PIXEL_BLOCK_SIZE_BYTES*usiTransferSizeInBlocks) % 32) {
80202aa8:	e0bffc0b 	ldhu	r2,-16(fp)
80202aac:	10802224 	muli	r2,r2,136
80202ab0:	1080060c 	andi	r2,r2,24
80202ab4:	10000826 	beq	r2,zero,80202ad8 <bSdmaDmaM1Transfer+0x358>
		// Transfer size is not a multiple of 32
		usiRoundedTransferSizeInBytes = ((alt_u16) ((SDMA_PIXEL_BLOCK_SIZE_BYTES*usiTransferSizeInBlocks) / 32) + 1) * 32;
80202ab8:	e0bffc0b 	ldhu	r2,-16(fp)
80202abc:	10802224 	muli	r2,r2,136
80202ac0:	1004d17a 	srli	r2,r2,5
80202ac4:	10bfffcc 	andi	r2,r2,65535
80202ac8:	10800044 	addi	r2,r2,1
80202acc:	1004917a 	slli	r2,r2,5
80202ad0:	e0bff60d 	sth	r2,-40(fp)
80202ad4:	00000306 	br	80202ae4 <bSdmaDmaM1Transfer+0x364>
	} else {
		usiRoundedTransferSizeInBytes = (SDMA_PIXEL_BLOCK_SIZE_BYTES*usiTransferSizeInBlocks);
80202ad8:	e0bffc0b 	ldhu	r2,-16(fp)
80202adc:	10802224 	muli	r2,r2,136
80202ae0:	e0bff60d 	sth	r2,-40(fp)
	}

		// Verify if the base address is a multiple o 32 (32 bytes = 256b = size of memory access)
		if (uliSrcAddrLow % 32) {
80202ae4:	e0bff717 	ldw	r2,-36(fp)
80202ae8:	108007cc 	andi	r2,r2,31
80202aec:	10000226 	beq	r2,zero,80202af8 <bSdmaDmaM1Transfer+0x378>
			// Address is not a multiple of 32
			bAddressFlag = FALSE;
80202af0:	e03ff515 	stw	zero,-44(fp)
80202af4:	00000206 	br	80202b00 <bSdmaDmaM1Transfer+0x380>
		} else {
			bAddressFlag = TRUE;
80202af8:	00800044 	movi	r2,1
80202afc:	e0bff515 	stw	r2,-44(fp)
		}
//		bAddressFlag = TRUE;

	if ((bChannelFlag) && (bBufferEmptyFlag) && (bAddressFlag) && (usiTransferSizeInBlocks <= SDMA_MAX_BLOCKS)) {
80202b00:	e0bff417 	ldw	r2,-48(fp)
80202b04:	10003126 	beq	r2,zero,80202bcc <bSdmaDmaM1Transfer+0x44c>
80202b08:	e0bffa17 	ldw	r2,-24(fp)
80202b0c:	10002f26 	beq	r2,zero,80202bcc <bSdmaDmaM1Transfer+0x44c>
80202b10:	e0bff517 	ldw	r2,-44(fp)
80202b14:	10002d26 	beq	r2,zero,80202bcc <bSdmaDmaM1Transfer+0x44c>
80202b18:	e0bffc0b 	ldhu	r2,-16(fp)
80202b1c:	10800468 	cmpgeui	r2,r2,17
80202b20:	10002a1e 	bne	r2,zero,80202bcc <bSdmaDmaM1Transfer+0x44c>

		if (pxDmaM1Dev != NULL) {
80202b24:	d0a01417 	ldw	r2,-32688(gp)
80202b28:	10002826 	beq	r2,zero,80202bcc <bSdmaDmaM1Transfer+0x44c>
			// hold transfers for descriptor fifo space
			while (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
80202b2c:	00000206 	br	80202b38 <bSdmaDmaM1Transfer+0x3b8>
				alt_busy_sleep(1); /* delay 1us */
80202b30:	01000044 	movi	r4,1
80202b34:	02151180 	call	80215118 <alt_busy_sleep>

	if ((bChannelFlag) && (bBufferEmptyFlag) && (bAddressFlag) && (usiTransferSizeInBlocks <= SDMA_MAX_BLOCKS)) {

		if (pxDmaM1Dev != NULL) {
			// hold transfers for descriptor fifo space
			while (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
80202b38:	d0a01417 	ldw	r2,-32688(gp)
80202b3c:	10800317 	ldw	r2,12(r2)
80202b40:	10800037 	ldwio	r2,0(r2)
80202b44:	1080010c 	andi	r2,r2,4
80202b48:	103ff91e 	bne	r2,zero,80202b30 <__reset+0xfa1e2b30>
				alt_busy_sleep(1); /* delay 1us */
			}
			/* Success = 0 */
			if (0 == iMsgdmaConstructExtendedMmToMmDescriptor(pxDmaM1Dev,
80202b4c:	d2201417 	ldw	r8,-32688(gp)
80202b50:	e1bff717 	ldw	r6,-36(fp)
80202b54:	e1fff217 	ldw	r7,-56(fp)
80202b58:	e0bff60b 	ldhu	r2,-40(fp)
80202b5c:	e0fff817 	ldw	r3,-32(fp)
80202b60:	e13ff317 	ldw	r4,-52(fp)
80202b64:	01400044 	movi	r5,1
80202b68:	d9400815 	stw	r5,32(sp)
80202b6c:	01400044 	movi	r5,1
80202b70:	d9400715 	stw	r5,28(sp)
80202b74:	01400044 	movi	r5,1
80202b78:	d9400615 	stw	r5,24(sp)
80202b7c:	01400044 	movi	r5,1
80202b80:	d9400515 	stw	r5,20(sp)
80202b84:	01400044 	movi	r5,1
80202b88:	d9400415 	stw	r5,16(sp)
80202b8c:	d9000315 	stw	r4,12(sp)
80202b90:	d8c00215 	stw	r3,8(sp)
80202b94:	e0fff917 	ldw	r3,-28(fp)
80202b98:	d8c00115 	stw	r3,4(sp)
80202b9c:	d8800015 	stw	r2,0(sp)
80202ba0:	800b883a 	mov	r5,r16
80202ba4:	4009883a 	mov	r4,r8
80202ba8:	02040c00 	call	802040c0 <iMsgdmaConstructExtendedMmToMmDescriptor>
80202bac:	1000071e 	bne	r2,zero,80202bcc <bSdmaDmaM1Transfer+0x44c>
					(alt_u32 *) uliDestAddrLow,
					usiRoundedTransferSizeInBytes, uliControlBits,
					(alt_u32 *) uliSrcAddrHigh, (alt_u32 *) uliDestAddrHigh,
					1, 1, 1, 1, 1)	) {
				/* Success = 0 */
				if (0 == iMsgdmaExtendedDescriptorAsyncTransfer(pxDmaM1Dev,	&xDmaExtendedDescriptor)) {
80202bb0:	d0a01417 	ldw	r2,-32688(gp)
80202bb4:	800b883a 	mov	r5,r16
80202bb8:	1009883a 	mov	r4,r2
80202bbc:	02041780 	call	80204178 <iMsgdmaExtendedDescriptorAsyncTransfer>
80202bc0:	1000021e 	bne	r2,zero,80202bcc <bSdmaDmaM1Transfer+0x44c>
					bStatus = TRUE;
80202bc4:	00800044 	movi	r2,1
80202bc8:	e0bff115 	stw	r2,-60(fp)
				}
			}
		}
	}
	return bStatus;
80202bcc:	e0bff117 	ldw	r2,-60(fp)
}
80202bd0:	e6ffff04 	addi	sp,fp,-4
80202bd4:	dfc00217 	ldw	ra,8(sp)
80202bd8:	df000117 	ldw	fp,4(sp)
80202bdc:	dc000017 	ldw	r16,0(sp)
80202be0:	dec00304 	addi	sp,sp,12
80202be4:	f800283a 	ret

80202be8 <bSdmaDmaM2Transfer>:

bool bSdmaDmaM2Transfer(alt_u32 *uliDdrInitialAddr, alt_u16 usiTransferSizeInBlocks, alt_u8 ucBufferSide, alt_u8 ucChBufferId) {
80202be8:	deffe604 	addi	sp,sp,-104
80202bec:	dfc01915 	stw	ra,100(sp)
80202bf0:	df001815 	stw	fp,96(sp)
80202bf4:	dc001715 	stw	r16,92(sp)
80202bf8:	df001804 	addi	fp,sp,96
80202bfc:	e13ffb15 	stw	r4,-20(fp)
80202c00:	2809883a 	mov	r4,r5
80202c04:	3007883a 	mov	r3,r6
80202c08:	3805883a 	mov	r2,r7
80202c0c:	e13ffc0d 	sth	r4,-16(fp)
80202c10:	e0fffd05 	stb	r3,-12(fp)
80202c14:	e0bffe05 	stb	r2,-8(fp)
80202c18:	defff004 	addi	sp,sp,-64
80202c1c:	d8800904 	addi	r2,sp,36
80202c20:	108007c4 	addi	r2,r2,31
80202c24:	1004d17a 	srli	r2,r2,5
80202c28:	1020917a 	slli	r16,r2,5
	bool bStatus;

	alt_msgdma_extended_descriptor xDmaExtendedDescriptor;

	alt_u32 uliDestAddrLow = 0;
80202c2c:	e03ff215 	stw	zero,-56(fp)
	alt_u32 uliDestAddrHigh = 0;
80202c30:	e03ff315 	stw	zero,-52(fp)

	alt_u32 uliSrcAddrLow = 0;
80202c34:	e03ff715 	stw	zero,-36(fp)
	alt_u32 uliSrcAddrHigh = 0;
80202c38:	e03ff815 	stw	zero,-32(fp)

	alt_u32 uliControlBits = 0x00000000;
80202c3c:	e03ff915 	stw	zero,-28(fp)
	bool bBufferEmptyFlag;
	bool bChannelFlag;
	bool bAddressFlag = FALSE;
80202c40:	e03ffa15 	stw	zero,-24(fp)

	alt_u16 usiRoundedTransferSizeInBytes = 0;
80202c44:	e03ff60d 	sth	zero,-40(fp)

	/* Assuming that the channel selected exist, change to FALSE if doesn't */
	bChannelFlag = TRUE;
80202c48:	00800044 	movi	r2,1
80202c4c:	e0bff515 	stw	r2,-44(fp)
	bStatus = FALSE;
80202c50:	e03ff115 	stw	zero,-60(fp)
	bBufferEmptyFlag = FALSE;
80202c54:	e03ff415 	stw	zero,-48(fp)
	switch (ucChBufferId) {
80202c58:	e0bffe03 	ldbu	r2,-8(fp)
80202c5c:	10c00228 	cmpgeui	r3,r2,8
80202c60:	1800a41e 	bne	r3,zero,80202ef4 <bSdmaDmaM2Transfer+0x30c>
80202c64:	100690ba 	slli	r3,r2,2
80202c68:	00a00834 	movhi	r2,32800
80202c6c:	108b1f04 	addi	r2,r2,11388
80202c70:	1885883a 	add	r2,r3,r2
80202c74:	10800017 	ldw	r2,0(r2)
80202c78:	1000683a 	jmp	r2
80202c7c:	80202c9c 	xori	zero,r16,32946
80202c80:	80202ce0 	cmpeqi	zero,r16,-32589
80202c84:	80202d2c 	andhi	zero,r16,32948
80202c88:	80202d78 	rdprs	zero,r16,-32587
80202c8c:	80202dc4 	addi	zero,r16,-32585
80202c90:	80202e10 	cmplti	zero,r16,-32584
80202c94:	80202e5c 	xori	zero,r16,32953
80202c98:	80202ea8 	cmpgeui	zero,r16,32954
	case eSdmaCh1Buffer:
		switch (ucBufferSide) {
80202c9c:	e0bffd03 	ldbu	r2,-12(fp)
80202ca0:	10000626 	beq	r2,zero,80202cbc <bSdmaDmaM2Transfer+0xd4>
80202ca4:	10800060 	cmpeqi	r2,r2,1
80202ca8:	10000926 	beq	r2,zero,80202cd0 <bSdmaDmaM2Transfer+0xe8>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_LOW;
80202cac:	e03ff215 	stw	zero,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_HIGH;
80202cb0:	00800044 	movi	r2,1
80202cb4:	e0bff315 	stw	r2,-52(fp)
			break;
80202cb8:	00000806 	br	80202cdc <bSdmaDmaM2Transfer+0xf4>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_LOW;
80202cbc:	00800074 	movhi	r2,1
80202cc0:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_HIGH;
80202cc4:	00800044 	movi	r2,1
80202cc8:	e0bff315 	stw	r2,-52(fp)
			break;
80202ccc:	00000306 	br	80202cdc <bSdmaDmaM2Transfer+0xf4>
		default:
			bChannelFlag = FALSE;
80202cd0:	e03ff515 	stw	zero,-44(fp)
			bBufferEmptyFlag = FALSE;
80202cd4:	e03ff415 	stw	zero,-48(fp)
			break;
80202cd8:	0001883a 	nop
		}
		break;
80202cdc:	00008706 	br	80202efc <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh2Buffer:
		switch (ucBufferSide) {
80202ce0:	e0bffd03 	ldbu	r2,-12(fp)
80202ce4:	10000726 	beq	r2,zero,80202d04 <bSdmaDmaM2Transfer+0x11c>
80202ce8:	10800060 	cmpeqi	r2,r2,1
80202cec:	10000b26 	beq	r2,zero,80202d1c <bSdmaDmaM2Transfer+0x134>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_LOW;
80202cf0:	00880004 	movi	r2,8192
80202cf4:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_HIGH;
80202cf8:	00800044 	movi	r2,1
80202cfc:	e0bff315 	stw	r2,-52(fp)
			break;
80202d00:	00000906 	br	80202d28 <bSdmaDmaM2Transfer+0x140>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_LOW;
80202d04:	00800074 	movhi	r2,1
80202d08:	10880004 	addi	r2,r2,8192
80202d0c:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_HIGH;
80202d10:	00800044 	movi	r2,1
80202d14:	e0bff315 	stw	r2,-52(fp)
			break;
80202d18:	00000306 	br	80202d28 <bSdmaDmaM2Transfer+0x140>
		default:
			bChannelFlag = FALSE;
80202d1c:	e03ff515 	stw	zero,-44(fp)
			bBufferEmptyFlag = FALSE;
80202d20:	e03ff415 	stw	zero,-48(fp)
			break;
80202d24:	0001883a 	nop
		}
		break;
80202d28:	00007406 	br	80202efc <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh3Buffer:
		switch (ucBufferSide) {
80202d2c:	e0bffd03 	ldbu	r2,-12(fp)
80202d30:	10000726 	beq	r2,zero,80202d50 <bSdmaDmaM2Transfer+0x168>
80202d34:	10800060 	cmpeqi	r2,r2,1
80202d38:	10000b26 	beq	r2,zero,80202d68 <bSdmaDmaM2Transfer+0x180>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_LOW;
80202d3c:	00900004 	movi	r2,16384
80202d40:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_HIGH;
80202d44:	00800044 	movi	r2,1
80202d48:	e0bff315 	stw	r2,-52(fp)
			break;
80202d4c:	00000906 	br	80202d74 <bSdmaDmaM2Transfer+0x18c>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_LOW;
80202d50:	00800074 	movhi	r2,1
80202d54:	10900004 	addi	r2,r2,16384
80202d58:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_HIGH;
80202d5c:	00800044 	movi	r2,1
80202d60:	e0bff315 	stw	r2,-52(fp)
			break;
80202d64:	00000306 	br	80202d74 <bSdmaDmaM2Transfer+0x18c>
		default:
			bChannelFlag = FALSE;
80202d68:	e03ff515 	stw	zero,-44(fp)
			bBufferEmptyFlag = FALSE;
80202d6c:	e03ff415 	stw	zero,-48(fp)
			break;
80202d70:	0001883a 	nop
		}
		break;
80202d74:	00006106 	br	80202efc <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh4Buffer:
		switch (ucBufferSide) {
80202d78:	e0bffd03 	ldbu	r2,-12(fp)
80202d7c:	10000726 	beq	r2,zero,80202d9c <bSdmaDmaM2Transfer+0x1b4>
80202d80:	10800060 	cmpeqi	r2,r2,1
80202d84:	10000b26 	beq	r2,zero,80202db4 <bSdmaDmaM2Transfer+0x1cc>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_LOW;
80202d88:	00980004 	movi	r2,24576
80202d8c:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_HIGH;
80202d90:	00800044 	movi	r2,1
80202d94:	e0bff315 	stw	r2,-52(fp)
			break;
80202d98:	00000906 	br	80202dc0 <bSdmaDmaM2Transfer+0x1d8>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_LOW;
80202d9c:	00800074 	movhi	r2,1
80202da0:	10980004 	addi	r2,r2,24576
80202da4:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_HIGH;
80202da8:	00800044 	movi	r2,1
80202dac:	e0bff315 	stw	r2,-52(fp)
			break;
80202db0:	00000306 	br	80202dc0 <bSdmaDmaM2Transfer+0x1d8>
		default:
			bChannelFlag = FALSE;
80202db4:	e03ff515 	stw	zero,-44(fp)
			bBufferEmptyFlag = FALSE;
80202db8:	e03ff415 	stw	zero,-48(fp)
			break;
80202dbc:	0001883a 	nop
		}
		break;
80202dc0:	00004e06 	br	80202efc <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh5Buffer:
		switch (ucBufferSide) {
80202dc4:	e0bffd03 	ldbu	r2,-12(fp)
80202dc8:	10000726 	beq	r2,zero,80202de8 <bSdmaDmaM2Transfer+0x200>
80202dcc:	10800060 	cmpeqi	r2,r2,1
80202dd0:	10000b26 	beq	r2,zero,80202e00 <bSdmaDmaM2Transfer+0x218>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_LOW;
80202dd4:	00a00014 	movui	r2,32768
80202dd8:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_HIGH;
80202ddc:	00800044 	movi	r2,1
80202de0:	e0bff315 	stw	r2,-52(fp)
			break;
80202de4:	00000906 	br	80202e0c <bSdmaDmaM2Transfer+0x224>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_LOW;
80202de8:	008000b4 	movhi	r2,2
80202dec:	10a00004 	addi	r2,r2,-32768
80202df0:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_HIGH;
80202df4:	00800044 	movi	r2,1
80202df8:	e0bff315 	stw	r2,-52(fp)
			break;
80202dfc:	00000306 	br	80202e0c <bSdmaDmaM2Transfer+0x224>
		default:
			bChannelFlag = FALSE;
80202e00:	e03ff515 	stw	zero,-44(fp)
			bBufferEmptyFlag = FALSE;
80202e04:	e03ff415 	stw	zero,-48(fp)
			break;
80202e08:	0001883a 	nop
		}
		break;
80202e0c:	00003b06 	br	80202efc <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh6Buffer:
		switch (ucBufferSide) {
80202e10:	e0bffd03 	ldbu	r2,-12(fp)
80202e14:	10000726 	beq	r2,zero,80202e34 <bSdmaDmaM2Transfer+0x24c>
80202e18:	10800060 	cmpeqi	r2,r2,1
80202e1c:	10000b26 	beq	r2,zero,80202e4c <bSdmaDmaM2Transfer+0x264>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_LOW;
80202e20:	00a80014 	movui	r2,40960
80202e24:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_HIGH;
80202e28:	00800044 	movi	r2,1
80202e2c:	e0bff315 	stw	r2,-52(fp)
			break;
80202e30:	00000906 	br	80202e58 <bSdmaDmaM2Transfer+0x270>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_LOW;
80202e34:	008000b4 	movhi	r2,2
80202e38:	10a80004 	addi	r2,r2,-24576
80202e3c:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_HIGH;
80202e40:	00800044 	movi	r2,1
80202e44:	e0bff315 	stw	r2,-52(fp)
			break;
80202e48:	00000306 	br	80202e58 <bSdmaDmaM2Transfer+0x270>
		default:
			bChannelFlag = FALSE;
80202e4c:	e03ff515 	stw	zero,-44(fp)
			bBufferEmptyFlag = FALSE;
80202e50:	e03ff415 	stw	zero,-48(fp)
			break;
80202e54:	0001883a 	nop
		}
		break;
80202e58:	00002806 	br	80202efc <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh7Buffer:
		switch (ucBufferSide) {
80202e5c:	e0bffd03 	ldbu	r2,-12(fp)
80202e60:	10000726 	beq	r2,zero,80202e80 <bSdmaDmaM2Transfer+0x298>
80202e64:	10800060 	cmpeqi	r2,r2,1
80202e68:	10000b26 	beq	r2,zero,80202e98 <bSdmaDmaM2Transfer+0x2b0>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_LOW;
80202e6c:	00b00014 	movui	r2,49152
80202e70:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_HIGH;
80202e74:	00800044 	movi	r2,1
80202e78:	e0bff315 	stw	r2,-52(fp)
			break;
80202e7c:	00000906 	br	80202ea4 <bSdmaDmaM2Transfer+0x2bc>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_LOW;
80202e80:	008000b4 	movhi	r2,2
80202e84:	10b00004 	addi	r2,r2,-16384
80202e88:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_HIGH;
80202e8c:	00800044 	movi	r2,1
80202e90:	e0bff315 	stw	r2,-52(fp)
			break;
80202e94:	00000306 	br	80202ea4 <bSdmaDmaM2Transfer+0x2bc>
		default:
			bChannelFlag = FALSE;
80202e98:	e03ff515 	stw	zero,-44(fp)
			bBufferEmptyFlag = FALSE;
80202e9c:	e03ff415 	stw	zero,-48(fp)
			break;
80202ea0:	0001883a 	nop
		}
		break;
80202ea4:	00001506 	br	80202efc <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh8Buffer:
		switch (ucBufferSide) {
80202ea8:	e0bffd03 	ldbu	r2,-12(fp)
80202eac:	10000726 	beq	r2,zero,80202ecc <bSdmaDmaM2Transfer+0x2e4>
80202eb0:	10800060 	cmpeqi	r2,r2,1
80202eb4:	10000b26 	beq	r2,zero,80202ee4 <bSdmaDmaM2Transfer+0x2fc>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_LOW;
80202eb8:	00b80014 	movui	r2,57344
80202ebc:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_HIGH;
80202ec0:	00800044 	movi	r2,1
80202ec4:	e0bff315 	stw	r2,-52(fp)
			break;
80202ec8:	00000906 	br	80202ef0 <bSdmaDmaM2Transfer+0x308>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_LOW;
80202ecc:	008000b4 	movhi	r2,2
80202ed0:	10b80004 	addi	r2,r2,-8192
80202ed4:	e0bff215 	stw	r2,-56(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_HIGH;
80202ed8:	00800044 	movi	r2,1
80202edc:	e0bff315 	stw	r2,-52(fp)
			break;
80202ee0:	00000306 	br	80202ef0 <bSdmaDmaM2Transfer+0x308>
		default:
			bChannelFlag = FALSE;
80202ee4:	e03ff515 	stw	zero,-44(fp)
			bBufferEmptyFlag = FALSE;
80202ee8:	e03ff415 	stw	zero,-48(fp)
			break;
80202eec:	0001883a 	nop
		}
		break;
80202ef0:	00000206 	br	80202efc <bSdmaDmaM2Transfer+0x314>
	default:
		bChannelFlag = FALSE;
80202ef4:	e03ff515 	stw	zero,-44(fp)
		break;
80202ef8:	0001883a 	nop
	}

	uliSrcAddrLow = (alt_u32) SDMA_M2_BASE_ADDR_LOW
			+ (alt_u32) uliDdrInitialAddr;
80202efc:	e0fffb17 	ldw	r3,-20(fp)
	default:
		bChannelFlag = FALSE;
		break;
	}

	uliSrcAddrLow = (alt_u32) SDMA_M2_BASE_ADDR_LOW
80202f00:	00a00034 	movhi	r2,32768
80202f04:	1885883a 	add	r2,r3,r2
80202f08:	e0bff715 	stw	r2,-36(fp)
			+ (alt_u32) uliDdrInitialAddr;
	uliSrcAddrHigh = (alt_u32) SDMA_M2_BASE_ADDR_HIGH;
80202f0c:	e03ff815 	stw	zero,-32(fp)

	// Rounding up the size to the nearest multiple of 32 (32 bytes = 256b = size of memory access)
	if ((SDMA_PIXEL_BLOCK_SIZE_BYTES*usiTransferSizeInBlocks) % 32) {
80202f10:	e0bffc0b 	ldhu	r2,-16(fp)
80202f14:	10802224 	muli	r2,r2,136
80202f18:	1080060c 	andi	r2,r2,24
80202f1c:	10000826 	beq	r2,zero,80202f40 <bSdmaDmaM2Transfer+0x358>
		// Transfer size is not a multiple of 32
		usiRoundedTransferSizeInBytes = ((alt_u16) ((SDMA_PIXEL_BLOCK_SIZE_BYTES*usiTransferSizeInBlocks) / 32) + 1) * 32;
80202f20:	e0bffc0b 	ldhu	r2,-16(fp)
80202f24:	10802224 	muli	r2,r2,136
80202f28:	1004d17a 	srli	r2,r2,5
80202f2c:	10bfffcc 	andi	r2,r2,65535
80202f30:	10800044 	addi	r2,r2,1
80202f34:	1004917a 	slli	r2,r2,5
80202f38:	e0bff60d 	sth	r2,-40(fp)
80202f3c:	00000306 	br	80202f4c <bSdmaDmaM2Transfer+0x364>
	} else {
		usiRoundedTransferSizeInBytes = (SDMA_PIXEL_BLOCK_SIZE_BYTES*usiTransferSizeInBlocks);
80202f40:	e0bffc0b 	ldhu	r2,-16(fp)
80202f44:	10802224 	muli	r2,r2,136
80202f48:	e0bff60d 	sth	r2,-40(fp)
	//		// Address is not a multiple of 32
	//		bAddressFlag = FALSE;
	//	} else {
	//		bAddressFlag = TRUE;
	//	}
		bAddressFlag = TRUE;
80202f4c:	00800044 	movi	r2,1
80202f50:	e0bffa15 	stw	r2,-24(fp)

	if ((bChannelFlag) && (bBufferEmptyFlag) && (bAddressFlag) && (usiTransferSizeInBlocks <= SDMA_MAX_BLOCKS)) {
80202f54:	e0bff517 	ldw	r2,-44(fp)
80202f58:	10003126 	beq	r2,zero,80203020 <bSdmaDmaM2Transfer+0x438>
80202f5c:	e0bff417 	ldw	r2,-48(fp)
80202f60:	10002f26 	beq	r2,zero,80203020 <bSdmaDmaM2Transfer+0x438>
80202f64:	e0bffa17 	ldw	r2,-24(fp)
80202f68:	10002d26 	beq	r2,zero,80203020 <bSdmaDmaM2Transfer+0x438>
80202f6c:	e0bffc0b 	ldhu	r2,-16(fp)
80202f70:	10800468 	cmpgeui	r2,r2,17
80202f74:	10002a1e 	bne	r2,zero,80203020 <bSdmaDmaM2Transfer+0x438>

		if (pxDmaM1Dev != NULL) {
80202f78:	d0a01417 	ldw	r2,-32688(gp)
80202f7c:	10002826 	beq	r2,zero,80203020 <bSdmaDmaM2Transfer+0x438>
			// hold transfers for descriptor fifo space
			while (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
80202f80:	00000206 	br	80202f8c <bSdmaDmaM2Transfer+0x3a4>
				alt_busy_sleep(1); /* delay 1us */
80202f84:	01000044 	movi	r4,1
80202f88:	02151180 	call	80215118 <alt_busy_sleep>

	if ((bChannelFlag) && (bBufferEmptyFlag) && (bAddressFlag) && (usiTransferSizeInBlocks <= SDMA_MAX_BLOCKS)) {

		if (pxDmaM1Dev != NULL) {
			// hold transfers for descriptor fifo space
			while (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
80202f8c:	d0a01417 	ldw	r2,-32688(gp)
80202f90:	10800317 	ldw	r2,12(r2)
80202f94:	10800037 	ldwio	r2,0(r2)
80202f98:	1080010c 	andi	r2,r2,4
80202f9c:	103ff91e 	bne	r2,zero,80202f84 <__reset+0xfa1e2f84>
				alt_busy_sleep(1); /* delay 1us */
			}
			/* Success = 0 */
			if (0 == iMsgdmaConstructExtendedMmToMmDescriptor(pxDmaM1Dev,
80202fa0:	d2201417 	ldw	r8,-32688(gp)
80202fa4:	e1bff717 	ldw	r6,-36(fp)
80202fa8:	e1fff217 	ldw	r7,-56(fp)
80202fac:	e0bff60b 	ldhu	r2,-40(fp)
80202fb0:	e0fff817 	ldw	r3,-32(fp)
80202fb4:	e13ff317 	ldw	r4,-52(fp)
80202fb8:	01400044 	movi	r5,1
80202fbc:	d9400815 	stw	r5,32(sp)
80202fc0:	01400044 	movi	r5,1
80202fc4:	d9400715 	stw	r5,28(sp)
80202fc8:	01400044 	movi	r5,1
80202fcc:	d9400615 	stw	r5,24(sp)
80202fd0:	01400044 	movi	r5,1
80202fd4:	d9400515 	stw	r5,20(sp)
80202fd8:	01400044 	movi	r5,1
80202fdc:	d9400415 	stw	r5,16(sp)
80202fe0:	d9000315 	stw	r4,12(sp)
80202fe4:	d8c00215 	stw	r3,8(sp)
80202fe8:	e0fff917 	ldw	r3,-28(fp)
80202fec:	d8c00115 	stw	r3,4(sp)
80202ff0:	d8800015 	stw	r2,0(sp)
80202ff4:	800b883a 	mov	r5,r16
80202ff8:	4009883a 	mov	r4,r8
80202ffc:	02040c00 	call	802040c0 <iMsgdmaConstructExtendedMmToMmDescriptor>
80203000:	1000071e 	bne	r2,zero,80203020 <bSdmaDmaM2Transfer+0x438>
					(alt_u32 *) uliDestAddrLow,
					usiRoundedTransferSizeInBytes, uliControlBits,
					(alt_u32 *) uliSrcAddrHigh, (alt_u32 *) uliDestAddrHigh,
					1, 1, 1, 1, 1)	) {
				/* Success = 0 */
				if (0 == iMsgdmaExtendedDescriptorAsyncTransfer(pxDmaM1Dev,	&xDmaExtendedDescriptor)) {
80203004:	d0a01417 	ldw	r2,-32688(gp)
80203008:	800b883a 	mov	r5,r16
8020300c:	1009883a 	mov	r4,r2
80203010:	02041780 	call	80204178 <iMsgdmaExtendedDescriptorAsyncTransfer>
80203014:	1000021e 	bne	r2,zero,80203020 <bSdmaDmaM2Transfer+0x438>
					bStatus = TRUE;
80203018:	00800044 	movi	r2,1
8020301c:	e0bff115 	stw	r2,-60(fp)
				}
			}
		}
	}
	return bStatus;
80203020:	e0bff117 	ldw	r2,-60(fp)
}
80203024:	e6ffff04 	addi	sp,fp,-4
80203028:	dfc00217 	ldw	ra,8(sp)
8020302c:	df000117 	ldw	fp,4(sp)
80203030:	dc000017 	ldw	r16,0(sp)
80203034:	dec00304 	addi	sp,sp,12
80203038:	f800283a 	ret

8020303c <I2C_TestAdress>:
void i2c_start(alt_u32 clk_base, alt_u32 data_base);
void i2c_stop(alt_u32 clk_base, alt_u32 data_base);
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);

bool I2C_TestAdress(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr){
8020303c:	defffa04 	addi	sp,sp,-24
80203040:	dfc00515 	stw	ra,20(sp)
80203044:	df000415 	stw	fp,16(sp)
80203048:	df000404 	addi	fp,sp,16
8020304c:	e13ffd15 	stw	r4,-12(fp)
80203050:	e17ffe15 	stw	r5,-8(fp)
80203054:	3005883a 	mov	r2,r6
80203058:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
8020305c:	00800044 	movi	r2,1
80203060:	e0bffc15 	stw	r2,-16(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
80203064:	e17ffe17 	ldw	r5,-8(fp)
80203068:	e13ffd17 	ldw	r4,-12(fp)
8020306c:	02033ec0 	call	802033ec <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
80203070:	e0bfff03 	ldbu	r2,-4(fp)
80203074:	10803fcc 	andi	r2,r2,255
80203078:	100d883a 	mov	r6,r2
8020307c:	e17ffe17 	ldw	r5,-8(fp)
80203080:	e13ffd17 	ldw	r4,-12(fp)
80203084:	02034f00 	call	802034f0 <i2c_write>
80203088:	1000011e 	bne	r2,zero,80203090 <I2C_TestAdress+0x54>
        bSuccess = FALSE;
8020308c:	e03ffc15 	stw	zero,-16(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
80203090:	e17ffe17 	ldw	r5,-8(fp)
80203094:	e13ffd17 	ldw	r4,-12(fp)
80203098:	02034780 	call	80203478 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
8020309c:	0106d604 	movi	r4,7000
802030a0:	0215b280 	call	80215b28 <usleep>
    
    return bSuccess;
802030a4:	e0bffc17 	ldw	r2,-16(fp)

}
802030a8:	e037883a 	mov	sp,fp
802030ac:	dfc00117 	ldw	ra,4(sp)
802030b0:	df000017 	ldw	fp,0(sp)
802030b4:	dec00204 	addi	sp,sp,8
802030b8:	f800283a 	ret

802030bc <I2C_Write>:

bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
802030bc:	defff804 	addi	sp,sp,-32
802030c0:	dfc00715 	stw	ra,28(sp)
802030c4:	df000615 	stw	fp,24(sp)
802030c8:	df000604 	addi	fp,sp,24
802030cc:	e13ffb15 	stw	r4,-20(fp)
802030d0:	e17ffc15 	stw	r5,-16(fp)
802030d4:	3009883a 	mov	r4,r6
802030d8:	3807883a 	mov	r3,r7
802030dc:	e0800217 	ldw	r2,8(fp)
802030e0:	e13ffd05 	stb	r4,-12(fp)
802030e4:	e0fffe05 	stb	r3,-8(fp)
802030e8:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
802030ec:	00800044 	movi	r2,1
802030f0:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
802030f4:	e17ffc17 	ldw	r5,-16(fp)
802030f8:	e13ffb17 	ldw	r4,-20(fp)
802030fc:	02033ec0 	call	802033ec <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
80203100:	e0bffd03 	ldbu	r2,-12(fp)
80203104:	10803fcc 	andi	r2,r2,255
80203108:	100d883a 	mov	r6,r2
8020310c:	e17ffc17 	ldw	r5,-16(fp)
80203110:	e13ffb17 	ldw	r4,-20(fp)
80203114:	02034f00 	call	802034f0 <i2c_write>
80203118:	1000011e 	bne	r2,zero,80203120 <I2C_Write+0x64>
        bSuccess = FALSE;
8020311c:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
80203120:	e0bffa17 	ldw	r2,-24(fp)
80203124:	10000726 	beq	r2,zero,80203144 <I2C_Write+0x88>
80203128:	e0bffe03 	ldbu	r2,-8(fp)
8020312c:	100d883a 	mov	r6,r2
80203130:	e17ffc17 	ldw	r5,-16(fp)
80203134:	e13ffb17 	ldw	r4,-20(fp)
80203138:	02034f00 	call	802034f0 <i2c_write>
8020313c:	1000011e 	bne	r2,zero,80203144 <I2C_Write+0x88>
        bSuccess = FALSE;
80203140:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
80203144:	e0bffa17 	ldw	r2,-24(fp)
80203148:	10000726 	beq	r2,zero,80203168 <I2C_Write+0xac>
8020314c:	e0bfff03 	ldbu	r2,-4(fp)
80203150:	100d883a 	mov	r6,r2
80203154:	e17ffc17 	ldw	r5,-16(fp)
80203158:	e13ffb17 	ldw	r4,-20(fp)
8020315c:	02034f00 	call	802034f0 <i2c_write>
80203160:	1000011e 	bne	r2,zero,80203168 <I2C_Write+0xac>
        bSuccess = FALSE;
80203164:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
80203168:	e17ffc17 	ldw	r5,-16(fp)
8020316c:	e13ffb17 	ldw	r4,-20(fp)
80203170:	02034780 	call	80203478 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
80203174:	0106d604 	movi	r4,7000
80203178:	0215b280 	call	80215b28 <usleep>
    
    return bSuccess;
8020317c:	e0bffa17 	ldw	r2,-24(fp)

}
80203180:	e037883a 	mov	sp,fp
80203184:	dfc00117 	ldw	ra,4(sp)
80203188:	df000017 	ldw	fp,0(sp)
8020318c:	dec00204 	addi	sp,sp,8
80203190:	f800283a 	ret

80203194 <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
80203194:	defff904 	addi	sp,sp,-28
80203198:	dfc00615 	stw	ra,24(sp)
8020319c:	df000515 	stw	fp,20(sp)
802031a0:	df000504 	addi	fp,sp,20
802031a4:	e13ffc15 	stw	r4,-16(fp)
802031a8:	e17ffd15 	stw	r5,-12(fp)
802031ac:	3007883a 	mov	r3,r6
802031b0:	3805883a 	mov	r2,r7
802031b4:	e0fffe05 	stb	r3,-8(fp)
802031b8:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
802031bc:	00800044 	movi	r2,1
802031c0:	e0bffb15 	stw	r2,-20(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
802031c4:	e17ffd17 	ldw	r5,-12(fp)
802031c8:	e13ffc17 	ldw	r4,-16(fp)
802031cc:	02033ec0 	call	802033ec <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
802031d0:	e0bffe03 	ldbu	r2,-8(fp)
802031d4:	10803fcc 	andi	r2,r2,255
802031d8:	100d883a 	mov	r6,r2
802031dc:	e17ffd17 	ldw	r5,-12(fp)
802031e0:	e13ffc17 	ldw	r4,-16(fp)
802031e4:	02034f00 	call	802034f0 <i2c_write>
802031e8:	1000011e 	bne	r2,zero,802031f0 <I2C_Read+0x5c>
        bSuccess = FALSE;
802031ec:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
802031f0:	e0bffb17 	ldw	r2,-20(fp)
802031f4:	10000726 	beq	r2,zero,80203214 <I2C_Read+0x80>
802031f8:	e0bfff03 	ldbu	r2,-4(fp)
802031fc:	100d883a 	mov	r6,r2
80203200:	e17ffd17 	ldw	r5,-12(fp)
80203204:	e13ffc17 	ldw	r4,-16(fp)
80203208:	02034f00 	call	802034f0 <i2c_write>
8020320c:	1000011e 	bne	r2,zero,80203214 <I2C_Read+0x80>
        bSuccess = FALSE;
80203210:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    i2c_start(clk_base, data_base);  // restart
80203214:	e17ffd17 	ldw	r5,-12(fp)
80203218:	e13ffc17 	ldw	r4,-16(fp)
8020321c:	02033ec0 	call	802033ec <i2c_start>
    DeviceAddr |= 1; // Read
80203220:	e0bffe03 	ldbu	r2,-8(fp)
80203224:	10800054 	ori	r2,r2,1
80203228:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
8020322c:	e0bffb17 	ldw	r2,-20(fp)
80203230:	10000826 	beq	r2,zero,80203254 <I2C_Read+0xc0>
80203234:	e0bffe03 	ldbu	r2,-8(fp)
80203238:	10803fcc 	andi	r2,r2,255
8020323c:	100d883a 	mov	r6,r2
80203240:	e17ffd17 	ldw	r5,-12(fp)
80203244:	e13ffc17 	ldw	r4,-16(fp)
80203248:	02034f00 	call	802034f0 <i2c_write>
8020324c:	1000011e 	bne	r2,zero,80203254 <I2C_Read+0xc0>
        bSuccess = FALSE;
80203250:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
80203254:	e0bffb17 	ldw	r2,-20(fp)
80203258:	10000526 	beq	r2,zero,80203270 <I2C_Read+0xdc>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
8020325c:	000f883a 	mov	r7,zero
80203260:	e1800217 	ldw	r6,8(fp)
80203264:	e17ffd17 	ldw	r5,-12(fp)
80203268:	e13ffc17 	ldw	r4,-16(fp)
8020326c:	02036200 	call	80203620 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
80203270:	e17ffd17 	ldw	r5,-12(fp)
80203274:	e13ffc17 	ldw	r4,-16(fp)
80203278:	02034780 	call	80203478 <i2c_stop>
    
    return bSuccess;
8020327c:	e0bffb17 	ldw	r2,-20(fp)
}
80203280:	e037883a 	mov	sp,fp
80203284:	dfc00117 	ldw	ra,4(sp)
80203288:	df000017 	ldw	fp,0(sp)
8020328c:	dec00204 	addi	sp,sp,8
80203290:	f800283a 	ret

80203294 <I2C_MultipleRead>:

bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 szData[], alt_u16 len){
80203294:	defff604 	addi	sp,sp,-40
80203298:	dfc00915 	stw	ra,36(sp)
8020329c:	df000815 	stw	fp,32(sp)
802032a0:	df000804 	addi	fp,sp,32
802032a4:	e13ffb15 	stw	r4,-20(fp)
802032a8:	e17ffc15 	stw	r5,-16(fp)
802032ac:	3007883a 	mov	r3,r6
802032b0:	e1fffe15 	stw	r7,-8(fp)
802032b4:	e0800217 	ldw	r2,8(fp)
802032b8:	e0fffd05 	stb	r3,-12(fp)
802032bc:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
802032c0:	00800044 	movi	r2,1
802032c4:	e0bff915 	stw	r2,-28(fp)
    //alt_u8 DeviceAddr, 
    alt_u8 ControlAddr = 0;
802032c8:	e03ffa05 	stb	zero,-24(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
802032cc:	e17ffc17 	ldw	r5,-16(fp)
802032d0:	e13ffb17 	ldw	r4,-20(fp)
802032d4:	02033ec0 	call	802033ec <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
802032d8:	e0bffd03 	ldbu	r2,-12(fp)
802032dc:	10803fcc 	andi	r2,r2,255
802032e0:	100d883a 	mov	r6,r2
802032e4:	e17ffc17 	ldw	r5,-16(fp)
802032e8:	e13ffb17 	ldw	r4,-20(fp)
802032ec:	02034f00 	call	802034f0 <i2c_write>
802032f0:	1000011e 	bne	r2,zero,802032f8 <I2C_MultipleRead+0x64>
        bSuccess = FALSE;
802032f4:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
802032f8:	e0bff917 	ldw	r2,-28(fp)
802032fc:	10000726 	beq	r2,zero,8020331c <I2C_MultipleRead+0x88>
80203300:	e0bffa03 	ldbu	r2,-24(fp)
80203304:	100d883a 	mov	r6,r2
80203308:	e17ffc17 	ldw	r5,-16(fp)
8020330c:	e13ffb17 	ldw	r4,-20(fp)
80203310:	02034f00 	call	802034f0 <i2c_write>
80203314:	1000011e 	bne	r2,zero,8020331c <I2C_MultipleRead+0x88>
        bSuccess = FALSE;
80203318:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }    
    if (bSuccess)        
8020331c:	e0bff917 	ldw	r2,-28(fp)
80203320:	10000326 	beq	r2,zero,80203330 <I2C_MultipleRead+0x9c>
        i2c_start(clk_base, data_base);  // restart
80203324:	e17ffc17 	ldw	r5,-16(fp)
80203328:	e13ffb17 	ldw	r4,-20(fp)
8020332c:	02033ec0 	call	802033ec <i2c_start>
    DeviceAddr |= 1; // Read
80203330:	e0bffd03 	ldbu	r2,-12(fp)
80203334:	10800054 	ori	r2,r2,1
80203338:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
8020333c:	e0bff917 	ldw	r2,-28(fp)
80203340:	10000826 	beq	r2,zero,80203364 <I2C_MultipleRead+0xd0>
80203344:	e0bffd03 	ldbu	r2,-12(fp)
80203348:	10803fcc 	andi	r2,r2,255
8020334c:	100d883a 	mov	r6,r2
80203350:	e17ffc17 	ldw	r5,-16(fp)
80203354:	e13ffb17 	ldw	r4,-20(fp)
80203358:	02034f00 	call	802034f0 <i2c_write>
8020335c:	1000011e 	bne	r2,zero,80203364 <I2C_MultipleRead+0xd0>
        bSuccess = FALSE;
80203360:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
80203364:	e0bff917 	ldw	r2,-28(fp)
80203368:	10001726 	beq	r2,zero,802033c8 <I2C_MultipleRead+0x134>
        for(i=0;i<len && bSuccess;i++){
8020336c:	e03ff815 	stw	zero,-32(fp)
80203370:	00001006 	br	802033b4 <I2C_MultipleRead+0x120>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
80203374:	e0bff817 	ldw	r2,-32(fp)
80203378:	e0fffe17 	ldw	r3,-8(fp)
8020337c:	1889883a 	add	r4,r3,r2
80203380:	e0bfff0b 	ldhu	r2,-4(fp)
80203384:	10ffffc4 	addi	r3,r2,-1
80203388:	e0bff817 	ldw	r2,-32(fp)
8020338c:	1884c03a 	cmpne	r2,r3,r2
80203390:	10803fcc 	andi	r2,r2,255
80203394:	100f883a 	mov	r7,r2
80203398:	200d883a 	mov	r6,r4
8020339c:	e17ffc17 	ldw	r5,-16(fp)
802033a0:	e13ffb17 	ldw	r4,-20(fp)
802033a4:	02036200 	call	80203620 <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
802033a8:	e0bff817 	ldw	r2,-32(fp)
802033ac:	10800044 	addi	r2,r2,1
802033b0:	e0bff815 	stw	r2,-32(fp)
802033b4:	e0bfff0b 	ldhu	r2,-4(fp)
802033b8:	e0fff817 	ldw	r3,-32(fp)
802033bc:	1880020e 	bge	r3,r2,802033c8 <I2C_MultipleRead+0x134>
802033c0:	e0bff917 	ldw	r2,-28(fp)
802033c4:	103feb1e 	bne	r2,zero,80203374 <__reset+0xfa1e3374>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }            
    }        
    i2c_stop(clk_base, data_base);
802033c8:	e17ffc17 	ldw	r5,-16(fp)
802033cc:	e13ffb17 	ldw	r4,-20(fp)
802033d0:	02034780 	call	80203478 <i2c_stop>
    
    return bSuccess;    
802033d4:	e0bff917 	ldw	r2,-28(fp)
    
}
802033d8:	e037883a 	mov	sp,fp
802033dc:	dfc00117 	ldw	ra,4(sp)
802033e0:	df000017 	ldw	fp,0(sp)
802033e4:	dec00204 	addi	sp,sp,8
802033e8:	f800283a 	ret

802033ec <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
802033ec:	defffc04 	addi	sp,sp,-16
802033f0:	dfc00315 	stw	ra,12(sp)
802033f4:	df000215 	stw	fp,8(sp)
802033f8:	df000204 	addi	fp,sp,8
802033fc:	e13ffe15 	stw	r4,-8(fp)
80203400:	e17fff15 	stw	r5,-4(fp)
    
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
80203404:	e0bfff17 	ldw	r2,-4(fp)
80203408:	10800104 	addi	r2,r2,4
8020340c:	1007883a 	mov	r3,r2
80203410:	00800044 	movi	r2,1
80203414:	18800035 	stwio	r2,0(r3)
    
    
    
    // start condition
    SDA_HIGH(data_base); // data high
80203418:	e0bfff17 	ldw	r2,-4(fp)
8020341c:	00c00044 	movi	r3,1
80203420:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base);
80203424:	e0bffe17 	ldw	r2,-8(fp)
80203428:	00c00044 	movi	r3,1
8020342c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
80203430:	01000044 	movi	r4,1
80203434:	0215b280 	call	80215b28 <usleep>
     
    SDA_LOW(data_base); // data low
80203438:	e0bfff17 	ldw	r2,-4(fp)
8020343c:	0007883a 	mov	r3,zero
80203440:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; 
80203444:	01000044 	movi	r4,1
80203448:	0215b280 	call	80215b28 <usleep>
    SCL_LOW(clk_base); // clock low
8020344c:	e0bffe17 	ldw	r2,-8(fp)
80203450:	0007883a 	mov	r3,zero
80203454:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
80203458:	01000044 	movi	r4,1
8020345c:	0215b280 	call	80215b28 <usleep>
}
80203460:	0001883a 	nop
80203464:	e037883a 	mov	sp,fp
80203468:	dfc00117 	ldw	ra,4(sp)
8020346c:	df000017 	ldw	fp,0(sp)
80203470:	dec00204 	addi	sp,sp,8
80203474:	f800283a 	ret

80203478 <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
80203478:	defffc04 	addi	sp,sp,-16
8020347c:	dfc00315 	stw	ra,12(sp)
80203480:	df000215 	stw	fp,8(sp)
80203484:	df000204 	addi	fp,sp,8
80203488:	e13ffe15 	stw	r4,-8(fp)
8020348c:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
80203490:	e0bfff17 	ldw	r2,-4(fp)
80203494:	10800104 	addi	r2,r2,4
80203498:	1007883a 	mov	r3,r2
8020349c:	00800044 	movi	r2,1
802034a0:	18800035 	stwio	r2,0(r3)
    SDA_LOW(data_base); // Data Low
802034a4:	e0bfff17 	ldw	r2,-4(fp)
802034a8:	0007883a 	mov	r3,zero
802034ac:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY; 
    SCL_HIGH(clk_base);  // clock high
802034b0:	e0bffe17 	ldw	r2,-8(fp)
802034b4:	00c00044 	movi	r3,1
802034b8:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high long delay
802034bc:	01000044 	movi	r4,1
802034c0:	0215b280 	call	80215b28 <usleep>
    SDA_HIGH(data_base); // data high
802034c4:	e0bfff17 	ldw	r2,-4(fp)
802034c8:	00c00044 	movi	r3,1
802034cc:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data high delay
802034d0:	01000044 	movi	r4,1
802034d4:	0215b280 	call	80215b28 <usleep>
    

    
}
802034d8:	0001883a 	nop
802034dc:	e037883a 	mov	sp,fp
802034e0:	dfc00117 	ldw	ra,4(sp)
802034e4:	df000017 	ldw	fp,0(sp)
802034e8:	dec00204 	addi	sp,sp,8
802034ec:	f800283a 	ret

802034f0 <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
802034f0:	defff804 	addi	sp,sp,-32
802034f4:	dfc00715 	stw	ra,28(sp)
802034f8:	df000615 	stw	fp,24(sp)
802034fc:	df000604 	addi	fp,sp,24
80203500:	e13ffd15 	stw	r4,-12(fp)
80203504:	e17ffe15 	stw	r5,-8(fp)
80203508:	3005883a 	mov	r2,r6
8020350c:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 Mask = 0x80;
80203510:	00bfe004 	movi	r2,-128
80203514:	e0bffa05 	stb	r2,-24(fp)
    bool bAck;
    int i;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
80203518:	e0bffe17 	ldw	r2,-8(fp)
8020351c:	10800104 	addi	r2,r2,4
80203520:	1007883a 	mov	r3,r2
80203524:	00800044 	movi	r2,1
80203528:	18800035 	stwio	r2,0(r3)
    
    for(i=0;i<8;i++){
8020352c:	e03ffb15 	stw	zero,-20(fp)
80203530:	00001f06 	br	802035b0 <i2c_write+0xc0>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
80203534:	e0bffd17 	ldw	r2,-12(fp)
80203538:	0007883a 	mov	r3,zero
8020353c:	10c00035 	stwio	r3,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
80203540:	e0ffff03 	ldbu	r3,-4(fp)
80203544:	e0bffa03 	ldbu	r2,-24(fp)
80203548:	1884703a 	and	r2,r3,r2
8020354c:	10803fcc 	andi	r2,r2,255
80203550:	10000426 	beq	r2,zero,80203564 <i2c_write+0x74>
            SDA_HIGH(data_base);
80203554:	e0bffe17 	ldw	r2,-8(fp)
80203558:	00c00044 	movi	r3,1
8020355c:	10c00035 	stwio	r3,0(r2)
80203560:	00000306 	br	80203570 <i2c_write+0x80>
        }else{    
            SDA_LOW(data_base);
80203564:	e0bffe17 	ldw	r2,-8(fp)
80203568:	0007883a 	mov	r3,zero
8020356c:	10c00035 	stwio	r3,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
80203570:	e0bffa03 	ldbu	r2,-24(fp)
80203574:	1004d07a 	srli	r2,r2,1
80203578:	e0bffa05 	stb	r2,-24(fp)
        // clock high
        SCL_HIGH(clk_base);
8020357c:	e0bffd17 	ldw	r2,-12(fp)
80203580:	00c00044 	movi	r3,1
80203584:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
80203588:	01000044 	movi	r4,1
8020358c:	0215b280 	call	80215b28 <usleep>
        SCL_LOW(clk_base);
80203590:	e0bffd17 	ldw	r2,-12(fp)
80203594:	0007883a 	mov	r3,zero
80203598:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
8020359c:	01000044 	movi	r4,1
802035a0:	0215b280 	call	80215b28 <usleep>
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for(i=0;i<8;i++){
802035a4:	e0bffb17 	ldw	r2,-20(fp)
802035a8:	10800044 	addi	r2,r2,1
802035ac:	e0bffb15 	stw	r2,-20(fp)
802035b0:	e0bffb17 	ldw	r2,-20(fp)
802035b4:	10800210 	cmplti	r2,r2,8
802035b8:	103fde1e 	bne	r2,zero,80203534 <__reset+0xfa1e3534>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
802035bc:	e0bffe17 	ldw	r2,-8(fp)
802035c0:	10800104 	addi	r2,r2,4
802035c4:	0007883a 	mov	r3,zero
802035c8:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
802035cc:	e0bffd17 	ldw	r2,-12(fp)
802035d0:	00c00044 	movi	r3,1
802035d4:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;  // clock high delay
802035d8:	01000044 	movi	r4,1
802035dc:	0215b280 	call	80215b28 <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
802035e0:	e0bffe17 	ldw	r2,-8(fp)
802035e4:	10800037 	ldwio	r2,0(r2)
802035e8:	1005003a 	cmpeq	r2,r2,zero
802035ec:	10803fcc 	andi	r2,r2,255
802035f0:	e0bffc15 	stw	r2,-16(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
802035f4:	e0bffd17 	ldw	r2,-12(fp)
802035f8:	0007883a 	mov	r3,zero
802035fc:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
80203600:	01000044 	movi	r4,1
80203604:	0215b280 	call	80215b28 <usleep>
    return bAck;
80203608:	e0bffc17 	ldw	r2,-16(fp)
}    
8020360c:	e037883a 	mov	sp,fp
80203610:	dfc00117 	ldw	ra,4(sp)
80203614:	df000017 	ldw	fp,0(sp)
80203618:	dec00204 	addi	sp,sp,8
8020361c:	f800283a 	ret

80203620 <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
80203620:	defff804 	addi	sp,sp,-32
80203624:	dfc00715 	stw	ra,28(sp)
80203628:	df000615 	stw	fp,24(sp)
8020362c:	df000604 	addi	fp,sp,24
80203630:	e13ffc15 	stw	r4,-16(fp)
80203634:	e17ffd15 	stw	r5,-12(fp)
80203638:	e1bffe15 	stw	r6,-8(fp)
8020363c:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
80203640:	e03ffa05 	stb	zero,-24(fp)
    int i;
    
    // assume SCL = low
    
    SDA_DIR_IN(data_base);  // set data read mode
80203644:	e0bffd17 	ldw	r2,-12(fp)
80203648:	10800104 	addi	r2,r2,4
8020364c:	0007883a 	mov	r3,zero
80203650:	10c00035 	stwio	r3,0(r2)
    SCL_LOW(clk_base); // clock low
80203654:	e0bffc17 	ldw	r2,-16(fp)
80203658:	0007883a 	mov	r3,zero
8020365c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
80203660:	01000044 	movi	r4,1
80203664:	0215b280 	call	80215b28 <usleep>

    for(i=0;i<8;i++){
80203668:	e03ffb15 	stw	zero,-20(fp)
8020366c:	00001606 	br	802036c8 <i2c_read+0xa8>
        Data <<= 1;
80203670:	e0bffa03 	ldbu	r2,-24(fp)
80203674:	1085883a 	add	r2,r2,r2
80203678:	e0bffa05 	stb	r2,-24(fp)
        SCL_HIGH(clk_base);  // clock high
8020367c:	e0bffc17 	ldw	r2,-16(fp)
80203680:	00c00044 	movi	r3,1
80203684:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
80203688:	01000044 	movi	r4,1
8020368c:	0215b280 	call	80215b28 <usleep>
        if (SDA_READ(data_base))  // read data   
80203690:	e0bffd17 	ldw	r2,-12(fp)
80203694:	10800037 	ldwio	r2,0(r2)
80203698:	10000326 	beq	r2,zero,802036a8 <i2c_read+0x88>
            Data |= 0x01;
8020369c:	e0bffa03 	ldbu	r2,-24(fp)
802036a0:	10800054 	ori	r2,r2,1
802036a4:	e0bffa05 	stb	r2,-24(fp)
        SCL_LOW(clk_base);  // clock log  
802036a8:	e0bffc17 	ldw	r2,-16(fp)
802036ac:	0007883a 	mov	r3,zero
802036b0:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
802036b4:	01000044 	movi	r4,1
802036b8:	0215b280 	call	80215b28 <usleep>
    
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
802036bc:	e0bffb17 	ldw	r2,-20(fp)
802036c0:	10800044 	addi	r2,r2,1
802036c4:	e0bffb15 	stw	r2,-20(fp)
802036c8:	e0bffb17 	ldw	r2,-20(fp)
802036cc:	10800210 	cmplti	r2,r2,8
802036d0:	103fe71e 	bne	r2,zero,80203670 <__reset+0xfa1e3670>
        SCL_LOW(clk_base);  // clock log  
        SCL_DELAY;
    }
    
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
802036d4:	e0bffc17 	ldw	r2,-16(fp)
802036d8:	0007883a 	mov	r3,zero
802036dc:	10c00035 	stwio	r3,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
802036e0:	e0bffd17 	ldw	r2,-12(fp)
802036e4:	10800104 	addi	r2,r2,4
802036e8:	1007883a 	mov	r3,r2
802036ec:	00800044 	movi	r2,1
802036f0:	18800035 	stwio	r2,0(r3)
    if (bAck)
802036f4:	e0bfff17 	ldw	r2,-4(fp)
802036f8:	10000426 	beq	r2,zero,8020370c <i2c_read+0xec>
        SDA_LOW(data_base);
802036fc:	e0bffd17 	ldw	r2,-12(fp)
80203700:	0007883a 	mov	r3,zero
80203704:	10c00035 	stwio	r3,0(r2)
80203708:	00000306 	br	80203718 <i2c_read+0xf8>
    else
        SDA_HIGH(data_base);
8020370c:	e0bffd17 	ldw	r2,-12(fp)
80203710:	00c00044 	movi	r3,1
80203714:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base); // clock high
80203718:	e0bffc17 	ldw	r2,-16(fp)
8020371c:	00c00044 	movi	r3,1
80203720:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high  delay
80203724:	01000044 	movi	r4,1
80203728:	0215b280 	call	80215b28 <usleep>
    SCL_LOW(clk_base); // clock low
8020372c:	e0bffc17 	ldw	r2,-16(fp)
80203730:	0007883a 	mov	r3,zero
80203734:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
80203738:	01000044 	movi	r4,1
8020373c:	0215b280 	call	80215b28 <usleep>
    SDA_LOW(data_base);  // data low
80203740:	e0bffd17 	ldw	r2,-12(fp)
80203744:	0007883a 	mov	r3,zero
80203748:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data low delay
8020374c:	01000044 	movi	r4,1
80203750:	0215b280 	call	80215b28 <usleep>
//    SDA_DIR_IN;  // set data read mode
    
    *pData = Data;
80203754:	e0bffe17 	ldw	r2,-8(fp)
80203758:	e0fffa03 	ldbu	r3,-24(fp)
8020375c:	10c00005 	stb	r3,0(r2)
}
80203760:	0001883a 	nop
80203764:	e037883a 	mov	sp,fp
80203768:	dfc00117 	ldw	ra,4(sp)
8020376c:	df000017 	ldw	fp,0(sp)
80203770:	dec00204 	addi	sp,sp,8
80203774:	f800283a 	ret

80203778 <bSetBoardLeds>:
 * @param [in] LedsMask  Mascara de leds a serem modificados
 *
 * @retval TRUE : Sucesso
 *
 */
bool bSetBoardLeds(bool bDRIVE, alt_u8 LedsMask){
80203778:	defffd04 	addi	sp,sp,-12
8020377c:	df000215 	stw	fp,8(sp)
80203780:	df000204 	addi	fp,sp,8
80203784:	e13ffe15 	stw	r4,-8(fp)
80203788:	2805883a 	mov	r2,r5
8020378c:	e0bfff05 	stb	r2,-4(fp)

  // Board LEDs state: ON = 0; OFF = 1;

  if (bDRIVE == LEDS_ON){
80203790:	e0bffe17 	ldw	r2,-8(fp)
80203794:	10800058 	cmpnei	r2,r2,1
80203798:	1000071e 	bne	r2,zero,802037b8 <bSetBoardLeds+0x40>
	LedsBoardControl &= (~LedsMask);
8020379c:	e0bfff03 	ldbu	r2,-4(fp)
802037a0:	0084303a 	nor	r2,zero,r2
802037a4:	1007883a 	mov	r3,r2
802037a8:	d0a01803 	ldbu	r2,-32672(gp)
802037ac:	1884703a 	and	r2,r3,r2
802037b0:	d0a01805 	stb	r2,-32672(gp)
802037b4:	00000406 	br	802037c8 <bSetBoardLeds+0x50>
  } else {
	LedsBoardControl |= LedsMask;
802037b8:	d0e01803 	ldbu	r3,-32672(gp)
802037bc:	e0bfff03 	ldbu	r2,-4(fp)
802037c0:	1884b03a 	or	r2,r3,r2
802037c4:	d0a01805 	stb	r2,-32672(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BOARD_BASE, LedsBoardControl);
802037c8:	d0a01803 	ldbu	r2,-32672(gp)
802037cc:	10c03fcc 	andi	r3,r2,255
802037d0:	00a04034 	movhi	r2,33024
802037d4:	10827404 	addi	r2,r2,2512
802037d8:	10c00035 	stwio	r3,0(r2)

  return TRUE;
802037dc:	00800044 	movi	r2,1
}
802037e0:	e037883a 	mov	sp,fp
802037e4:	df000017 	ldw	fp,0(sp)
802037e8:	dec00104 	addi	sp,sp,4
802037ec:	f800283a 	ret

802037f0 <bSetPainelLeds>:
 * @param [in] LedsMask  Mascara de leds a serem modificados
 *
 * @retval TRUE : Sucesso
 *
 */
bool bSetPainelLeds(bool bDRIVE, alt_u32 LedsMask){
802037f0:	defffd04 	addi	sp,sp,-12
802037f4:	df000215 	stw	fp,8(sp)
802037f8:	df000204 	addi	fp,sp,8
802037fc:	e13ffe15 	stw	r4,-8(fp)
80203800:	e17fff15 	stw	r5,-4(fp)

  // Painel LEDs state: ON = 1; OFF = 0;

  if (bDRIVE == LEDS_ON){
80203804:	e0bffe17 	ldw	r2,-8(fp)
80203808:	10800058 	cmpnei	r2,r2,1
8020380c:	1000051e 	bne	r2,zero,80203824 <bSetPainelLeds+0x34>
	LedsPainelControl |= LedsMask;
80203810:	d0e00017 	ldw	r3,-32768(gp)
80203814:	e0bfff17 	ldw	r2,-4(fp)
80203818:	1884b03a 	or	r2,r3,r2
8020381c:	d0a00015 	stw	r2,-32768(gp)
80203820:	00000506 	br	80203838 <bSetPainelLeds+0x48>
  } else {
	LedsPainelControl &= (~LedsMask);
80203824:	e0bfff17 	ldw	r2,-4(fp)
80203828:	0086303a 	nor	r3,zero,r2
8020382c:	d0a00017 	ldw	r2,-32768(gp)
80203830:	1884703a 	and	r2,r3,r2
80203834:	d0a00015 	stw	r2,-32768(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PAINEL_BASE, LedsPainelControl);
80203838:	d0a00017 	ldw	r2,-32768(gp)
8020383c:	1007883a 	mov	r3,r2
80203840:	00a04034 	movhi	r2,33024
80203844:	10824004 	addi	r2,r2,2304
80203848:	10c00035 	stwio	r3,0(r2)

  return TRUE;
8020384c:	00800044 	movi	r2,1
}
80203850:	e037883a 	mov	sp,fp
80203854:	df000017 	ldw	fp,0(sp)
80203858:	dec00104 	addi	sp,sp,4
8020385c:	f800283a 	ret

80203860 <msgdma_write_extended_descriptor>:
/*
 * This function is used for writing extended descriptors to the dispatcher.  
 It handles only 32-bit descriptors.
 */
static int msgdma_write_extended_descriptor(alt_u32 *csr_base,
		alt_u32 *descriptor_base, alt_msgdma_extended_descriptor *descriptor) {
80203860:	defffc04 	addi	sp,sp,-16
80203864:	df000315 	stw	fp,12(sp)
80203868:	df000304 	addi	fp,sp,12
8020386c:	e13ffd15 	stw	r4,-12(fp)
80203870:	e17ffe15 	stw	r5,-8(fp)
80203874:	e1bfff15 	stw	r6,-4(fp)
	if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) &
80203878:	e0bffd17 	ldw	r2,-12(fp)
8020387c:	10800037 	ldwio	r2,0(r2)
80203880:	1080010c 	andi	r2,r2,4
80203884:	10000226 	beq	r2,zero,80203890 <msgdma_write_extended_descriptor+0x30>
	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
		/*at least one descriptor buffer is full, returning so that this function
		 is non-blocking*/
		return -ENOSPC;
80203888:	00bff904 	movi	r2,-28
8020388c:	00003d06 	br	80203984 <msgdma_write_extended_descriptor+0x124>
	}

	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base,
80203890:	e0bfff17 	ldw	r2,-4(fp)
80203894:	10800017 	ldw	r2,0(r2)
80203898:	1007883a 	mov	r3,r2
8020389c:	e0bffe17 	ldw	r2,-8(fp)
802038a0:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->read_address_low);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base,
802038a4:	e0bffe17 	ldw	r2,-8(fp)
802038a8:	10800104 	addi	r2,r2,4
802038ac:	e0ffff17 	ldw	r3,-4(fp)
802038b0:	18c00117 	ldw	r3,4(r3)
802038b4:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->write_address_low);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base,
802038b8:	e0bffe17 	ldw	r2,-8(fp)
802038bc:	10800204 	addi	r2,r2,8
802038c0:	e0ffff17 	ldw	r3,-4(fp)
802038c4:	18c00217 	ldw	r3,8(r3)
802038c8:	10c00035 	stwio	r3,0(r2)
			descriptor->transfer_length);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(descriptor_base,
802038cc:	e0bffe17 	ldw	r2,-8(fp)
802038d0:	10800304 	addi	r2,r2,12
802038d4:	e0ffff17 	ldw	r3,-4(fp)
802038d8:	18c0030b 	ldhu	r3,12(r3)
802038dc:	18ffffcc 	andi	r3,r3,65535
802038e0:	10c0002d 	sthio	r3,0(r2)
			descriptor->sequence_number);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(descriptor_base,
802038e4:	e0bffe17 	ldw	r2,-8(fp)
802038e8:	10800384 	addi	r2,r2,14
802038ec:	e0ffff17 	ldw	r3,-4(fp)
802038f0:	18c00383 	ldbu	r3,14(r3)
802038f4:	18c03fcc 	andi	r3,r3,255
802038f8:	10c00025 	stbio	r3,0(r2)
			descriptor->read_burst_count);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(descriptor_base,
802038fc:	e0bffe17 	ldw	r2,-8(fp)
80203900:	108003c4 	addi	r2,r2,15
80203904:	e0ffff17 	ldw	r3,-4(fp)
80203908:	18c003c3 	ldbu	r3,15(r3)
8020390c:	18c03fcc 	andi	r3,r3,255
80203910:	10c00025 	stbio	r3,0(r2)
			descriptor->write_burst_count);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(descriptor_base,
80203914:	e0bffe17 	ldw	r2,-8(fp)
80203918:	10800404 	addi	r2,r2,16
8020391c:	e0ffff17 	ldw	r3,-4(fp)
80203920:	18c0040b 	ldhu	r3,16(r3)
80203924:	18ffffcc 	andi	r3,r3,65535
80203928:	10c0002d 	sthio	r3,0(r2)
			descriptor->read_stride);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(descriptor_base,
8020392c:	e0bffe17 	ldw	r2,-8(fp)
80203930:	10800484 	addi	r2,r2,18
80203934:	e0ffff17 	ldw	r3,-4(fp)
80203938:	18c0048b 	ldhu	r3,18(r3)
8020393c:	18ffffcc 	andi	r3,r3,65535
80203940:	10c0002d 	sthio	r3,0(r2)
			descriptor->write_stride);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base,
80203944:	e0bffe17 	ldw	r2,-8(fp)
80203948:	10800504 	addi	r2,r2,20
8020394c:	e0ffff17 	ldw	r3,-4(fp)
80203950:	18c00517 	ldw	r3,20(r3)
80203954:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->read_address_high);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base,
80203958:	e0bffe17 	ldw	r2,-8(fp)
8020395c:	10800604 	addi	r2,r2,24
80203960:	e0ffff17 	ldw	r3,-4(fp)
80203964:	18c00617 	ldw	r3,24(r3)
80203968:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->write_address_high);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(descriptor_base,
8020396c:	e0bffe17 	ldw	r2,-8(fp)
80203970:	10800704 	addi	r2,r2,28
80203974:	e0ffff17 	ldw	r3,-4(fp)
80203978:	18c00717 	ldw	r3,28(r3)
8020397c:	10c00035 	stwio	r3,0(r2)
			descriptor->control);
	return 0;
80203980:	0005883a 	mov	r2,zero
}
80203984:	e037883a 	mov	sp,fp
80203988:	df000017 	ldw	fp,0(sp)
8020398c:	dec00104 	addi	sp,sp,4
80203990:	f800283a 	ret

80203994 <msgdma_construct_extended_descriptor>:
static int msgdma_construct_extended_descriptor(alt_msgdma_dev *dev,
		alt_msgdma_extended_descriptor *descriptor, alt_u32 *read_address,
		alt_u32 *write_address, alt_u32 length, alt_u32 control,
		alt_u32 *read_address_high, alt_u32 *write_address_high,
		alt_u16 sequence_number, alt_u8 read_burst_count,
		alt_u8 write_burst_count, alt_u16 read_stride, alt_u16 write_stride) {
80203994:	defff604 	addi	sp,sp,-40
80203998:	df000915 	stw	fp,36(sp)
8020399c:	df000904 	addi	fp,sp,36
802039a0:	e13ff715 	stw	r4,-36(fp)
802039a4:	e17ff815 	stw	r5,-32(fp)
802039a8:	e1bff915 	stw	r6,-28(fp)
802039ac:	e1fffa15 	stw	r7,-24(fp)
802039b0:	e1800517 	ldw	r6,20(fp)
802039b4:	e1400617 	ldw	r5,24(fp)
802039b8:	e1000717 	ldw	r4,28(fp)
802039bc:	e0c00817 	ldw	r3,32(fp)
802039c0:	e0800917 	ldw	r2,36(fp)
802039c4:	e1bffb0d 	sth	r6,-20(fp)
802039c8:	e17ffc05 	stb	r5,-16(fp)
802039cc:	e13ffd05 	stb	r4,-12(fp)
802039d0:	e0fffe0d 	sth	r3,-8(fp)
802039d4:	e0bfff0d 	sth	r2,-4(fp)
	if (dev->max_byte < length || dev->max_stride < read_stride
802039d8:	e0bff717 	ldw	r2,-36(fp)
802039dc:	10c01217 	ldw	r3,72(r2)
802039e0:	e0800117 	ldw	r2,4(fp)
802039e4:	18801936 	bltu	r3,r2,80203a4c <msgdma_construct_extended_descriptor+0xb8>
802039e8:	e13ff717 	ldw	r4,-36(fp)
802039ec:	20801317 	ldw	r2,76(r4)
802039f0:	20c01417 	ldw	r3,80(r4)
802039f4:	e13ffe0b 	ldhu	r4,-8(fp)
802039f8:	213fffcc 	andi	r4,r4,65535
802039fc:	2015883a 	mov	r10,r4
80203a00:	0017883a 	mov	r11,zero
80203a04:	1ac01136 	bltu	r3,r11,80203a4c <msgdma_construct_extended_descriptor+0xb8>
80203a08:	58c0011e 	bne	r11,r3,80203a10 <msgdma_construct_extended_descriptor+0x7c>
80203a0c:	12800f36 	bltu	r2,r10,80203a4c <msgdma_construct_extended_descriptor+0xb8>
			|| dev->max_stride < write_stride || dev->enhanced_features != 1) {
80203a10:	e13ff717 	ldw	r4,-36(fp)
80203a14:	20801317 	ldw	r2,76(r4)
80203a18:	20c01417 	ldw	r3,80(r4)
80203a1c:	e13fff0b 	ldhu	r4,-4(fp)
80203a20:	213fffcc 	andi	r4,r4,65535
80203a24:	2011883a 	mov	r8,r4
80203a28:	0013883a 	mov	r9,zero
80203a2c:	1a400736 	bltu	r3,r9,80203a4c <msgdma_construct_extended_descriptor+0xb8>
80203a30:	48c0011e 	bne	r9,r3,80203a38 <msgdma_construct_extended_descriptor+0xa4>
80203a34:	12000536 	bltu	r2,r8,80203a4c <msgdma_construct_extended_descriptor+0xb8>
80203a38:	e0bff717 	ldw	r2,-36(fp)
80203a3c:	10801703 	ldbu	r2,92(r2)
80203a40:	10803fcc 	andi	r2,r2,255
80203a44:	10800060 	cmpeqi	r2,r2,1
80203a48:	1000021e 	bne	r2,zero,80203a54 <msgdma_construct_extended_descriptor+0xc0>
		return -EINVAL;
80203a4c:	00bffa84 	movi	r2,-22
80203a50:	00002306 	br	80203ae0 <msgdma_construct_extended_descriptor+0x14c>
	}

	descriptor->read_address_low = read_address;
80203a54:	e0bff817 	ldw	r2,-32(fp)
80203a58:	e0fff917 	ldw	r3,-28(fp)
80203a5c:	10c00015 	stw	r3,0(r2)
	descriptor->write_address_low = write_address;
80203a60:	e0bff817 	ldw	r2,-32(fp)
80203a64:	e0fffa17 	ldw	r3,-24(fp)
80203a68:	10c00115 	stw	r3,4(r2)
	descriptor->transfer_length = length;
80203a6c:	e0bff817 	ldw	r2,-32(fp)
80203a70:	e0c00117 	ldw	r3,4(fp)
80203a74:	10c00215 	stw	r3,8(r2)
	descriptor->sequence_number = sequence_number;
80203a78:	e0bff817 	ldw	r2,-32(fp)
80203a7c:	e0fffb0b 	ldhu	r3,-20(fp)
80203a80:	10c0030d 	sth	r3,12(r2)
	descriptor->read_burst_count = read_burst_count;
80203a84:	e0bff817 	ldw	r2,-32(fp)
80203a88:	e0fffc03 	ldbu	r3,-16(fp)
80203a8c:	10c00385 	stb	r3,14(r2)
	descriptor->write_burst_count = write_burst_count;
80203a90:	e0bff817 	ldw	r2,-32(fp)
80203a94:	e0fffd03 	ldbu	r3,-12(fp)
80203a98:	10c003c5 	stb	r3,15(r2)
	descriptor->read_stride = read_stride;
80203a9c:	e0bff817 	ldw	r2,-32(fp)
80203aa0:	e0fffe0b 	ldhu	r3,-8(fp)
80203aa4:	10c0040d 	sth	r3,16(r2)
	descriptor->write_stride = write_stride;
80203aa8:	e0bff817 	ldw	r2,-32(fp)
80203aac:	e0ffff0b 	ldhu	r3,-4(fp)
80203ab0:	10c0048d 	sth	r3,18(r2)
	descriptor->read_address_high = read_address_high;
80203ab4:	e0bff817 	ldw	r2,-32(fp)
80203ab8:	e0c00317 	ldw	r3,12(fp)
80203abc:	10c00515 	stw	r3,20(r2)
	descriptor->write_address_high = write_address_high;
80203ac0:	e0bff817 	ldw	r2,-32(fp)
80203ac4:	e0c00417 	ldw	r3,16(fp)
80203ac8:	10c00615 	stw	r3,24(r2)
	descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
80203acc:	e0800217 	ldw	r2,8(fp)
80203ad0:	10e00034 	orhi	r3,r2,32768
80203ad4:	e0bff817 	ldw	r2,-32(fp)
80203ad8:	10c00715 	stw	r3,28(r2)

	return 0;
80203adc:	0005883a 	mov	r2,zero

}
80203ae0:	e037883a 	mov	sp,fp
80203ae4:	df000017 	ldw	fp,0(sp)
80203ae8:	dec00104 	addi	sp,sp,4
80203aec:	f800283a 	ret

80203af0 <msgdma_descriptor_async_transfer>:
 * -EPERM -> operation not permitted due to descriptor type conflict
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
static int msgdma_descriptor_async_transfer(alt_msgdma_dev *dev,
		alt_msgdma_standard_descriptor *standard_desc,
		alt_msgdma_extended_descriptor *extended_desc) {
80203af0:	defff004 	addi	sp,sp,-64
80203af4:	dfc00f15 	stw	ra,60(sp)
80203af8:	df000e15 	stw	fp,56(sp)
80203afc:	df000e04 	addi	fp,sp,56
80203b00:	e13ffd15 	stw	r4,-12(fp)
80203b04:	e17ffe15 	stw	r5,-8(fp)
80203b08:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 control = 0;
80203b0c:	e03ff315 	stw	zero,-52(fp)
	alt_irq_context context = 0;
80203b10:	e03ff415 	stw	zero,-48(fp)
	alt_u16 counter = 0;
80203b14:	e03ff20d 	sth	zero,-56(fp)
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
80203b18:	e0bffd17 	ldw	r2,-12(fp)
80203b1c:	10800317 	ldw	r2,12(r2)
80203b20:	10800204 	addi	r2,r2,8
80203b24:	10800037 	ldwio	r2,0(r2)
		alt_msgdma_standard_descriptor *standard_desc,
		alt_msgdma_extended_descriptor *extended_desc) {
	alt_u32 control = 0;
	alt_irq_context context = 0;
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
80203b28:	10bfffcc 	andi	r2,r2,65535
80203b2c:	e0bff515 	stw	r2,-44(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
80203b30:	e0bffd17 	ldw	r2,-12(fp)
80203b34:	10800317 	ldw	r2,12(r2)
80203b38:	10800204 	addi	r2,r2,8
80203b3c:	10800037 	ldwio	r2,0(r2)
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
80203b40:	1004d43a 	srli	r2,r2,16
80203b44:	e0bff615 	stw	r2,-40(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if ((dev->descriptor_fifo_depth <= fifo_write_fill_level)
80203b48:	e0bffd17 	ldw	r2,-12(fp)
80203b4c:	10800917 	ldw	r2,36(r2)
80203b50:	e0fff617 	ldw	r3,-40(fp)
80203b54:	1880042e 	bgeu	r3,r2,80203b68 <msgdma_descriptor_async_transfer+0x78>
			|| (dev->descriptor_fifo_depth <= fifo_read_fill_level)) {
80203b58:	e0bffd17 	ldw	r2,-12(fp)
80203b5c:	10800917 	ldw	r2,36(r2)
80203b60:	e0fff517 	ldw	r3,-44(fp)
80203b64:	18800236 	bltu	r3,r2,80203b70 <msgdma_descriptor_async_transfer+0x80>
		/*at least one write or read FIFO descriptor buffer is full,
		 returning so that this function is non-blocking*/
		return -ENOSPC;
80203b68:	00bff904 	movi	r2,-28
80203b6c:	00007d06 	br	80203d64 <msgdma_descriptor_async_transfer+0x274>
	ALT_SEM_PEND(dev->regs_lock, 0);

	/* Stop the msgdma dispatcher from issuing more descriptors to the
	 read or write masters  */
	/* stop issuing more descriptors */
	control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
80203b70:	00800804 	movi	r2,32
80203b74:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80203b78:	0005303a 	rdctl	r2,status
80203b7c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80203b80:	e0fff717 	ldw	r3,-36(fp)
80203b84:	00bfff84 	movi	r2,-2
80203b88:	1884703a 	and	r2,r3,r2
80203b8c:	1001703a 	wrctl	status,r2
  
  return context;
80203b90:	e0bff717 	ldw	r2,-36(fp)
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
80203b94:	e0bff415 	stw	r2,-48(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
80203b98:	e0bffd17 	ldw	r2,-12(fp)
80203b9c:	10800317 	ldw	r2,12(r2)
80203ba0:	10800104 	addi	r2,r2,4
80203ba4:	e0fff317 	ldw	r3,-52(fp)
80203ba8:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
80203bac:	e0bffd17 	ldw	r2,-12(fp)
80203bb0:	10800317 	ldw	r2,12(r2)
80203bb4:	e0fffd17 	ldw	r3,-12(fp)
80203bb8:	18c00317 	ldw	r3,12(r3)
80203bbc:	18c00037 	ldwio	r3,0(r3)
80203bc0:	10c00035 	stwio	r3,0(r2)
80203bc4:	e0bff417 	ldw	r2,-48(fp)
80203bc8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80203bcc:	e0bffc17 	ldw	r2,-16(fp)
80203bd0:	1001703a 	wrctl	status,r2
			IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

	if (NULL != standard_desc && NULL == extended_desc) {
80203bd4:	e0bffe17 	ldw	r2,-8(fp)
80203bd8:	10000826 	beq	r2,zero,80203bfc <msgdma_descriptor_async_transfer+0x10c>
80203bdc:	e0bfff17 	ldw	r2,-4(fp)
80203be0:	1000061e 	bne	r2,zero,80203bfc <msgdma_descriptor_async_transfer+0x10c>
		counter = 0; /* reset counter */
80203be4:	e03ff20d 	sth	zero,-56(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
#if DEBUG_ON
		debug(fp, "invalid dma descriptor option\n");
80203be8:	012008b4 	movhi	r4,32802
80203bec:	212c1104 	addi	r4,r4,-20412
80203bf0:	02054280 	call	80205428 <puts>
		 * registers semaphore so that other threads can access the
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return -ETIME;
80203bf4:	00bff084 	movi	r2,-62
80203bf8:	00005a06 	br	80203d64 <msgdma_descriptor_async_transfer+0x274>
	} else if (NULL == standard_desc && NULL != extended_desc) {
80203bfc:	e0bffe17 	ldw	r2,-8(fp)
80203c00:	10001b1e 	bne	r2,zero,80203c70 <msgdma_descriptor_async_transfer+0x180>
80203c04:	e0bfff17 	ldw	r2,-4(fp)
80203c08:	10001926 	beq	r2,zero,80203c70 <msgdma_descriptor_async_transfer+0x180>
		counter = 0; /* reset counter */
80203c0c:	e03ff20d 	sth	zero,-56(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
80203c10:	00000d06 	br	80203c48 <msgdma_descriptor_async_transfer+0x158>
				!= msgdma_write_extended_descriptor(dev->csr_base,
						dev->descriptor_base, extended_desc)) {
			alt_busy_sleep(1); /* delay 1us */
80203c14:	01000044 	movi	r4,1
80203c18:	02151180 	call	80215118 <alt_busy_sleep>
			if (5000 <= counter) /* time_out if waiting longer than 5 msec */
80203c1c:	e0bff20b 	ldhu	r2,-56(fp)
80203c20:	1084e230 	cmpltui	r2,r2,5000
80203c24:	1000051e 	bne	r2,zero,80203c3c <msgdma_descriptor_async_transfer+0x14c>
			{
				#if DEBUG_ON
					debug(fp, "time out after 5 msec while waiting free FIFO buffer for storing extended descriptor\n");
80203c28:	012008b4 	movhi	r4,32802
80203c2c:	212c1904 	addi	r4,r4,-20380
80203c30:	02054280 	call	80205428 <puts>
				 * registers semaphore so that other threads can access the
				 * registers.
				 */
				ALT_SEM_POST(dev->regs_lock);

				return -ETIME;
80203c34:	00bff084 	movi	r2,-62
80203c38:	00004a06 	br	80203d64 <msgdma_descriptor_async_transfer+0x274>
			}
			counter++;
80203c3c:	e0bff20b 	ldhu	r2,-56(fp)
80203c40:	10800044 	addi	r2,r2,1
80203c44:	e0bff20d 	sth	r2,-56(fp)
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
				!= msgdma_write_extended_descriptor(dev->csr_base,
80203c48:	e0bffd17 	ldw	r2,-12(fp)
80203c4c:	10c00317 	ldw	r3,12(r2)
80203c50:	e0bffd17 	ldw	r2,-12(fp)
80203c54:	10800417 	ldw	r2,16(r2)
80203c58:	e1bfff17 	ldw	r6,-4(fp)
80203c5c:	100b883a 	mov	r5,r2
80203c60:	1809883a 	mov	r4,r3
80203c64:	02038600 	call	80203860 <msgdma_write_extended_descriptor>
		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
80203c68:	103fea1e 	bne	r2,zero,80203c14 <__reset+0xfa1e3c14>
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
80203c6c:	00000206 	br	80203c78 <msgdma_descriptor_async_transfer+0x188>
		 * semaphore so that other threads can access the registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		/* operation not permitted due to descriptor type conflict */
		return -EPERM;
80203c70:	00bfffc4 	movi	r2,-1
80203c74:	00003b06 	br	80203d64 <msgdma_descriptor_async_transfer+0x274>
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up controller to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if (dev->callback) {
80203c78:	e0bffd17 	ldw	r2,-12(fp)
80203c7c:	10800b17 	ldw	r2,44(r2)
80203c80:	10001c26 	beq	r2,zero,80203cf4 <msgdma_descriptor_async_transfer+0x204>

		control |= (dev->control |
80203c84:	e0bffd17 	ldw	r2,-12(fp)
80203c88:	10c00d17 	ldw	r3,52(r2)
80203c8c:	e0bff317 	ldw	r2,-52(fp)
80203c90:	1884b03a 	or	r2,r3,r2
80203c94:	10800514 	ori	r2,r2,20
80203c98:	e0bff315 	stw	r2,-52(fp)
		ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
		ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
80203c9c:	e0fff317 	ldw	r3,-52(fp)
80203ca0:	00bff7c4 	movi	r2,-33
80203ca4:	1884703a 	and	r2,r3,r2
80203ca8:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80203cac:	0005303a 	rdctl	r2,status
80203cb0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80203cb4:	e0fff917 	ldw	r3,-28(fp)
80203cb8:	00bfff84 	movi	r2,-2
80203cbc:	1884703a 	and	r2,r3,r2
80203cc0:	1001703a 	wrctl	status,r2
  
  return context;
80203cc4:	e0bff917 	ldw	r2,-28(fp)
		/* making sure the read-modify-write below can't be pre-empted */
		context = alt_irq_disable_all();
80203cc8:	e0bff415 	stw	r2,-48(fp)
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
80203ccc:	e0bffd17 	ldw	r2,-12(fp)
80203cd0:	10800317 	ldw	r2,12(r2)
80203cd4:	10800104 	addi	r2,r2,4
80203cd8:	e0fff317 	ldw	r3,-52(fp)
80203cdc:	10c00035 	stwio	r3,0(r2)
80203ce0:	e0bff417 	ldw	r2,-48(fp)
80203ce4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80203ce8:	e0bffb17 	ldw	r2,-20(fp)
80203cec:	1001703a 	wrctl	status,r2
80203cf0:	00001b06 	br	80203d60 <msgdma_descriptor_async_transfer+0x270>
	 *   - Run
	 *   - Stop on an error with any particular descriptor
	 *   - Disable interrupt generation
	 */
	else {
		control |= (dev->control |
80203cf4:	e0bffd17 	ldw	r2,-12(fp)
80203cf8:	10c00d17 	ldw	r3,52(r2)
80203cfc:	e0bff317 	ldw	r2,-52(fp)
80203d00:	1884b03a 	or	r2,r3,r2
80203d04:	10800114 	ori	r2,r2,4
80203d08:	e0bff315 	stw	r2,-52(fp)
		ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
		control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK)
80203d0c:	e0fff317 	ldw	r3,-52(fp)
80203d10:	00bff3c4 	movi	r2,-49
80203d14:	1884703a 	and	r2,r3,r2
80203d18:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80203d1c:	0005303a 	rdctl	r2,status
80203d20:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80203d24:	e0fffa17 	ldw	r3,-24(fp)
80203d28:	00bfff84 	movi	r2,-2
80203d2c:	1884703a 	and	r2,r3,r2
80203d30:	1001703a 	wrctl	status,r2
  
  return context;
80203d34:	e0bffa17 	ldw	r2,-24(fp)
				& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		/* making sure the read-modify-write below can't be pre-empted */
		context = alt_irq_disable_all();
80203d38:	e0bff415 	stw	r2,-48(fp)
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
80203d3c:	e0bffd17 	ldw	r2,-12(fp)
80203d40:	10800317 	ldw	r2,12(r2)
80203d44:	10800104 	addi	r2,r2,4
80203d48:	e0fff317 	ldw	r3,-52(fp)
80203d4c:	10c00035 	stwio	r3,0(r2)
80203d50:	e0bff417 	ldw	r2,-48(fp)
80203d54:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80203d58:	e0bff817 	ldw	r2,-32(fp)
80203d5c:	1001703a 	wrctl	status,r2
	 * Now that access to the registers is complete, release the registers
	 * semaphore so that other threads can access the registers.
	 */
	ALT_SEM_POST(dev->regs_lock);

	return 0;
80203d60:	0005883a 	mov	r2,zero
}
80203d64:	e037883a 	mov	sp,fp
80203d68:	dfc00117 	ldw	ra,4(sp)
80203d6c:	df000017 	ldw	fp,0(sp)
80203d70:	dec00204 	addi	sp,sp,8
80203d74:	f800283a 	ret

80203d78 <msgdma_descriptor_sync_transfer>:
 * -EPERM -> operation not permitted due to descriptor type conflict
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
static int msgdma_descriptor_sync_transfer(alt_msgdma_dev *dev,
		alt_msgdma_standard_descriptor *standard_desc,
		alt_msgdma_extended_descriptor *extended_desc) {
80203d78:	defff004 	addi	sp,sp,-64
80203d7c:	dfc00f15 	stw	ra,60(sp)
80203d80:	df000e15 	stw	fp,56(sp)
80203d84:	df000e04 	addi	fp,sp,56
80203d88:	e13ffd15 	stw	r4,-12(fp)
80203d8c:	e17ffe15 	stw	r5,-8(fp)
80203d90:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 control = 0;
80203d94:	e03ff615 	stw	zero,-40(fp)
	alt_irq_context context = 0;
80203d98:	e03ff715 	stw	zero,-36(fp)
	alt_u32 csr_status = 0;
80203d9c:	e03ff215 	stw	zero,-56(fp)
	alt_u16 counter = 0;
80203da0:	e03ff30d 	sth	zero,-52(fp)
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
80203da4:	e0bffd17 	ldw	r2,-12(fp)
80203da8:	10800317 	ldw	r2,12(r2)
80203dac:	10800204 	addi	r2,r2,8
80203db0:	10800037 	ldwio	r2,0(r2)
		alt_msgdma_extended_descriptor *extended_desc) {
	alt_u32 control = 0;
	alt_irq_context context = 0;
	alt_u32 csr_status = 0;
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
80203db4:	10bfffcc 	andi	r2,r2,65535
80203db8:	e0bff415 	stw	r2,-48(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
80203dbc:	e0bffd17 	ldw	r2,-12(fp)
80203dc0:	10800317 	ldw	r2,12(r2)
80203dc4:	10800204 	addi	r2,r2,8
80203dc8:	10800037 	ldwio	r2,0(r2)
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
80203dcc:	1004d43a 	srli	r2,r2,16
80203dd0:	e0bff515 	stw	r2,-44(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
	alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK |
80203dd4:	00807804 	movi	r2,480
80203dd8:	e0bff815 	stw	r2,-32(fp)
	ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
	ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
	ALTERA_MSGDMA_CSR_RESET_STATE_MASK;

	/* Wait for available FIFO buffer to store new descriptor*/
	while ((dev->descriptor_fifo_depth <= fifo_write_fill_level)
80203ddc:	00002006 	br	80203e60 <msgdma_descriptor_sync_transfer+0xe8>
			|| (dev->descriptor_fifo_depth <= fifo_read_fill_level)) {
		alt_busy_sleep(1); /* delay 1us */
80203de0:	01000044 	movi	r4,1
80203de4:	02151180 	call	80215118 <alt_busy_sleep>
#if DEBUG_ON
		fprintf(fp,"\n-- DMA can't write in the descriptor \n ");
80203de8:	d0a01917 	ldw	r2,-32668(gp)
80203dec:	100f883a 	mov	r7,r2
80203df0:	01800a04 	movi	r6,40
80203df4:	01400044 	movi	r5,1
80203df8:	012008b4 	movhi	r4,32802
80203dfc:	212c2f04 	addi	r4,r4,-20292
80203e00:	02051800 	call	80205180 <fwrite>
#endif
		if (5000 <= counter) /* time_out if waiting longer than 5 msec */
80203e04:	e0bff30b 	ldhu	r2,-52(fp)
80203e08:	1084e230 	cmpltui	r2,r2,5000
80203e0c:	1000051e 	bne	r2,zero,80203e24 <msgdma_descriptor_sync_transfer+0xac>
		{
#if DEBUG_ON
		debug(fp, "time out after 5 msec while waiting free FIFO buffer for storing descriptor\n");
80203e10:	012008b4 	movhi	r4,32802
80203e14:	212c3a04 	addi	r4,r4,-20248
80203e18:	02054280 	call	80205428 <puts>
#endif
			return -ETIME;
80203e1c:	00bff084 	movi	r2,-62
80203e20:	0000a206 	br	802040ac <msgdma_descriptor_sync_transfer+0x334>
		}
		counter++;
80203e24:	e0bff30b 	ldhu	r2,-52(fp)
80203e28:	10800044 	addi	r2,r2,1
80203e2c:	e0bff30d 	sth	r2,-52(fp)
		fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
80203e30:	e0bffd17 	ldw	r2,-12(fp)
80203e34:	10800317 	ldw	r2,12(r2)
80203e38:	10800204 	addi	r2,r2,8
80203e3c:	10800037 	ldwio	r2,0(r2)
		debug(fp, "time out after 5 msec while waiting free FIFO buffer for storing descriptor\n");
#endif
			return -ETIME;
		}
		counter++;
		fifo_read_fill_level = (
80203e40:	10bfffcc 	andi	r2,r2,65535
80203e44:	e0bff415 	stw	r2,-48(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
		fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
80203e48:	e0bffd17 	ldw	r2,-12(fp)
80203e4c:	10800317 	ldw	r2,12(r2)
80203e50:	10800204 	addi	r2,r2,8
80203e54:	10800037 	ldwio	r2,0(r2)
		counter++;
		fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
		fifo_write_fill_level = (
80203e58:	1004d43a 	srli	r2,r2,16
80203e5c:	e0bff515 	stw	r2,-44(fp)
	ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
	ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
	ALTERA_MSGDMA_CSR_RESET_STATE_MASK;

	/* Wait for available FIFO buffer to store new descriptor*/
	while ((dev->descriptor_fifo_depth <= fifo_write_fill_level)
80203e60:	e0bffd17 	ldw	r2,-12(fp)
80203e64:	10800917 	ldw	r2,36(r2)
80203e68:	e0fff517 	ldw	r3,-44(fp)
80203e6c:	18bfdc2e 	bgeu	r3,r2,80203de0 <__reset+0xfa1e3de0>
			|| (dev->descriptor_fifo_depth <= fifo_read_fill_level)) {
80203e70:	e0bffd17 	ldw	r2,-12(fp)
80203e74:	10800917 	ldw	r2,36(r2)
80203e78:	e0fff417 	ldw	r3,-48(fp)
80203e7c:	18bfd82e 	bgeu	r3,r2,80203de0 <__reset+0xfa1e3de0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80203e80:	0005303a 	rdctl	r2,status
80203e84:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80203e88:	e0fffc17 	ldw	r3,-16(fp)
80203e8c:	00bfff84 	movi	r2,-2
80203e90:	1884703a 	and	r2,r3,r2
80203e94:	1001703a 	wrctl	status,r2
  
  return context;
80203e98:	e0bffc17 	ldw	r2,-16(fp)
	ALT_SEM_PEND(dev->regs_lock, 0);

	/* Stop the msgdma dispatcher from issuing more descriptors to the
	 read or write masters  */
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
80203e9c:	e0bff715 	stw	r2,-36(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
80203ea0:	e0bffd17 	ldw	r2,-12(fp)
80203ea4:	10800317 	ldw	r2,12(r2)
80203ea8:	10800104 	addi	r2,r2,4
80203eac:	00c00804 	movi	r3,32
80203eb0:	10c00035 	stwio	r3,0(r2)
			ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
80203eb4:	e0bffd17 	ldw	r2,-12(fp)
80203eb8:	10800317 	ldw	r2,12(r2)
80203ebc:	e0fffd17 	ldw	r3,-12(fp)
80203ec0:	18c00317 	ldw	r3,12(r3)
80203ec4:	18c00037 	ldwio	r3,0(r3)
80203ec8:	10c00035 	stwio	r3,0(r2)
			IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

	if (NULL != standard_desc && NULL == extended_desc) {
80203ecc:	e0bffe17 	ldw	r2,-8(fp)
80203ed0:	10000826 	beq	r2,zero,80203ef4 <msgdma_descriptor_sync_transfer+0x17c>
80203ed4:	e0bfff17 	ldw	r2,-4(fp)
80203ed8:	1000061e 	bne	r2,zero,80203ef4 <msgdma_descriptor_sync_transfer+0x17c>
		counter = 0; /* reset counter */
80203edc:	e03ff30d 	sth	zero,-52(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		#if DEBUG_ON
			debug(fp, "invalid dma descriptor option\n");
80203ee0:	012008b4 	movhi	r4,32802
80203ee4:	212c1104 	addi	r4,r4,-20412
80203ee8:	02054280 	call	80205428 <puts>
		 * registers semaphore so that other threads can access the
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return -ETIME;
80203eec:	00bff084 	movi	r2,-62
80203ef0:	00006e06 	br	802040ac <msgdma_descriptor_sync_transfer+0x334>
	} else if (NULL == standard_desc && NULL != extended_desc) {
80203ef4:	e0bffe17 	ldw	r2,-8(fp)
80203ef8:	10001b1e 	bne	r2,zero,80203f68 <msgdma_descriptor_sync_transfer+0x1f0>
80203efc:	e0bfff17 	ldw	r2,-4(fp)
80203f00:	10001926 	beq	r2,zero,80203f68 <msgdma_descriptor_sync_transfer+0x1f0>
		counter = 0; /* reset counter */
80203f04:	e03ff30d 	sth	zero,-52(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
80203f08:	00000d06 	br	80203f40 <msgdma_descriptor_sync_transfer+0x1c8>
				!= msgdma_write_extended_descriptor(dev->csr_base,
						dev->descriptor_base, extended_desc)) {
			alt_busy_sleep(1); /* delay 1us */
80203f0c:	01000044 	movi	r4,1
80203f10:	02151180 	call	80215118 <alt_busy_sleep>
			if (5000 <= counter) /* time_out if waiting longer than 5 msec */
80203f14:	e0bff30b 	ldhu	r2,-52(fp)
80203f18:	1084e230 	cmpltui	r2,r2,5000
80203f1c:	1000051e 	bne	r2,zero,80203f34 <msgdma_descriptor_sync_transfer+0x1bc>
			{
				#if DEBUG_ON
					debug(fp, "time out after 5 msec while writing extended descriptor to FIFO\n");
80203f20:	012008b4 	movhi	r4,32802
80203f24:	212c4d04 	addi	r4,r4,-20172
80203f28:	02054280 	call	80205428 <puts>
				 * registers semaphore so that other threads can access the
				 * registers.
				 */
				ALT_SEM_POST(dev->regs_lock);

				return -ETIME;
80203f2c:	00bff084 	movi	r2,-62
80203f30:	00005e06 	br	802040ac <msgdma_descriptor_sync_transfer+0x334>
			}
			counter++;
80203f34:	e0bff30b 	ldhu	r2,-52(fp)
80203f38:	10800044 	addi	r2,r2,1
80203f3c:	e0bff30d 	sth	r2,-52(fp)
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
				!= msgdma_write_extended_descriptor(dev->csr_base,
80203f40:	e0bffd17 	ldw	r2,-12(fp)
80203f44:	10c00317 	ldw	r3,12(r2)
80203f48:	e0bffd17 	ldw	r2,-12(fp)
80203f4c:	10800417 	ldw	r2,16(r2)
80203f50:	e1bfff17 	ldw	r6,-4(fp)
80203f54:	100b883a 	mov	r5,r2
80203f58:	1809883a 	mov	r4,r3
80203f5c:	02038600 	call	80203860 <msgdma_write_extended_descriptor>
		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
80203f60:	103fea1e 	bne	r2,zero,80203f0c <__reset+0xfa1e3f0c>
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
80203f64:	00000206 	br	80203f70 <msgdma_descriptor_sync_transfer+0x1f8>
		 * semaphore so that other threads can access the registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		/* operation not permitted due to descriptor type conflict */
		return -EPERM;
80203f68:	00bfffc4 	movi	r2,-1
80203f6c:	00004f06 	br	802040ac <msgdma_descriptor_sync_transfer+0x334>
	 * Set up msgdma controller to:
	 * - Disable interrupt generation
	 * - Run once a valid descriptor is written to controller
	 * - Stop on an error with any particular descriptor
	 */
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
80203f70:	e0bffd17 	ldw	r2,-12(fp)
80203f74:	10800317 	ldw	r2,12(r2)
80203f78:	10800104 	addi	r2,r2,4
80203f7c:	e0fffd17 	ldw	r3,-12(fp)
80203f80:	19000d17 	ldw	r4,52(r3)
80203f84:	00fff2c4 	movi	r3,-53
80203f88:	20c6703a 	and	r3,r4,r3
80203f8c:	18c00114 	ori	r3,r3,4
80203f90:	10c00035 	stwio	r3,0(r2)
80203f94:	e0bff717 	ldw	r2,-36(fp)
80203f98:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80203f9c:	e0bffb17 	ldw	r2,-20(fp)
80203fa0:	1001703a 	wrctl	status,r2
			(dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK ) & (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK));

	alt_irq_enable_all(context);

	counter = 0; /* reset counter */
80203fa4:	e03ff30d 	sth	zero,-52(fp)

	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
80203fa8:	e0bffd17 	ldw	r2,-12(fp)
80203fac:	10800317 	ldw	r2,12(r2)
80203fb0:	10800037 	ldwio	r2,0(r2)
80203fb4:	e0bff215 	stw	r2,-56(fp)

	/* Wait for any pending transfers to complete or checking any errors or
	 conditions causing descriptor to stop dispatching */
	while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK)) {
80203fb8:	00001106 	br	80204000 <msgdma_descriptor_sync_transfer+0x288>
		alt_busy_sleep(1); /* delay 1us */
80203fbc:	01000044 	movi	r4,1
80203fc0:	02151180 	call	80215118 <alt_busy_sleep>
		if (5000 <= counter) /* time_out if waiting longer than 5 msec */
80203fc4:	e0bff30b 	ldhu	r2,-52(fp)
80203fc8:	1084e230 	cmpltui	r2,r2,5000
80203fcc:	1000051e 	bne	r2,zero,80203fe4 <msgdma_descriptor_sync_transfer+0x26c>
		{
			#if DEBUG_ON
				debug(fp, "time out after 5 msec while waiting for any pending transfer complete\n");
80203fd0:	012008b4 	movhi	r4,32802
80203fd4:	212c5d04 	addi	r4,r4,-20108
80203fd8:	02054280 	call	80205428 <puts>
			 * Now that access to the registers is complete, release the registers
			 * semaphore so that other threads can access the registers.
			 */
			ALT_SEM_POST(dev->regs_lock);

			return -ETIME;
80203fdc:	00bff084 	movi	r2,-62
80203fe0:	00003206 	br	802040ac <msgdma_descriptor_sync_transfer+0x334>
		}
		counter++;
80203fe4:	e0bff30b 	ldhu	r2,-52(fp)
80203fe8:	10800044 	addi	r2,r2,1
80203fec:	e0bff30d 	sth	r2,-52(fp)
		csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
80203ff0:	e0bffd17 	ldw	r2,-12(fp)
80203ff4:	10800317 	ldw	r2,12(r2)
80203ff8:	10800037 	ldwio	r2,0(r2)
80203ffc:	e0bff215 	stw	r2,-56(fp)

	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);

	/* Wait for any pending transfers to complete or checking any errors or
	 conditions causing descriptor to stop dispatching */
	while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK)) {
80204000:	e0fff217 	ldw	r3,-56(fp)
80204004:	e0bff817 	ldw	r2,-32(fp)
80204008:	1884703a 	and	r2,r3,r2
8020400c:	1000031e 	bne	r2,zero,8020401c <msgdma_descriptor_sync_transfer+0x2a4>
80204010:	e0bff217 	ldw	r2,-56(fp)
80204014:	1080004c 	andi	r2,r2,1
80204018:	103fe81e 	bne	r2,zero,80203fbc <__reset+0xfa1e3fbc>
		csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
	}

	/*Errors or conditions causing the dispatcher stopping issuing read/write
	 commands to masters*/
	if (0 != (csr_status & error)) {
8020401c:	e0fff217 	ldw	r3,-56(fp)
80204020:	e0bff817 	ldw	r2,-32(fp)
80204024:	1884703a 	and	r2,r3,r2
80204028:	10000226 	beq	r2,zero,80204034 <msgdma_descriptor_sync_transfer+0x2bc>
		 * Now that access to the registers is complete, release the registers
		 * semaphore so that other threads can access the registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return error;
8020402c:	e0bff817 	ldw	r2,-32(fp)
80204030:	00001e06 	br	802040ac <msgdma_descriptor_sync_transfer+0x334>
	}

	/* Stop the msgdma dispatcher from issuing more descriptors to the
	 read or write masters  */
	/* stop issuing more descriptors */
	control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) |
80204034:	e0bffd17 	ldw	r2,-12(fp)
80204038:	10800317 	ldw	r2,12(r2)
8020403c:	10800104 	addi	r2,r2,4
80204040:	10800037 	ldwio	r2,0(r2)
80204044:	10800814 	ori	r2,r2,32
80204048:	e0bff615 	stw	r2,-40(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8020404c:	0005303a 	rdctl	r2,status
80204050:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80204054:	e0fff917 	ldw	r3,-28(fp)
80204058:	00bfff84 	movi	r2,-2
8020405c:	1884703a 	and	r2,r3,r2
80204060:	1001703a 	wrctl	status,r2
  
  return context;
80204064:	e0bff917 	ldw	r2,-28(fp)
	ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
80204068:	e0bff715 	stw	r2,-36(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
8020406c:	e0bffd17 	ldw	r2,-12(fp)
80204070:	10800317 	ldw	r2,12(r2)
80204074:	10800104 	addi	r2,r2,4
80204078:	e0fff617 	ldw	r3,-40(fp)
8020407c:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
80204080:	e0bffd17 	ldw	r2,-12(fp)
80204084:	10800317 	ldw	r2,12(r2)
80204088:	e0fffd17 	ldw	r3,-12(fp)
8020408c:	18c00317 	ldw	r3,12(r3)
80204090:	18c00037 	ldwio	r3,0(r3)
80204094:	10c00035 	stwio	r3,0(r2)
80204098:	e0bff717 	ldw	r2,-36(fp)
8020409c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
802040a0:	e0bffa17 	ldw	r2,-24(fp)
802040a4:	1001703a 	wrctl	status,r2
	 * Now that access to the registers is complete, release the registers
	 * semaphore so that other threads can access the registers.
	 */
	ALT_SEM_POST(dev->regs_lock);

	return 0;
802040a8:	0005883a 	mov	r2,zero

}
802040ac:	e037883a 	mov	sp,fp
802040b0:	dfc00117 	ldw	ra,4(sp)
802040b4:	df000017 	ldw	fp,0(sp)
802040b8:	dec00204 	addi	sp,sp,8
802040bc:	f800283a 	ret

802040c0 <iMsgdmaConstructExtendedMmToMmDescriptor>:
int iMsgdmaConstructExtendedMmToMmDescriptor(alt_msgdma_dev *pxDev,
		alt_msgdma_extended_descriptor *pxDescriptor, alt_u32 *puliReadAddress,
		alt_u32 *puliWriteAddress, alt_u32 uliLength, alt_u32 uliControl,
		alt_u32 *puliReadAddressHigh, alt_u32 *puliWriteAddressHigh,
		alt_u16 usiSequenceNumber, alt_u8 ucReadBurstCount,
		alt_u8 ucWriteBurstCount, alt_u16 usiReadStride, alt_u16 usiWriteStride) {
802040c0:	deffec04 	addi	sp,sp,-80
802040c4:	dfc01315 	stw	ra,76(sp)
802040c8:	df001215 	stw	fp,72(sp)
802040cc:	df001204 	addi	fp,sp,72
802040d0:	e13ff715 	stw	r4,-36(fp)
802040d4:	e17ff815 	stw	r5,-32(fp)
802040d8:	e1bff915 	stw	r6,-28(fp)
802040dc:	e1fffa15 	stw	r7,-24(fp)
802040e0:	e1800617 	ldw	r6,24(fp)
802040e4:	e1400717 	ldw	r5,28(fp)
802040e8:	e1000817 	ldw	r4,32(fp)
802040ec:	e0c00917 	ldw	r3,36(fp)
802040f0:	e0800a17 	ldw	r2,40(fp)
802040f4:	e1bffb0d 	sth	r6,-20(fp)
802040f8:	e17ffc05 	stb	r5,-16(fp)
802040fc:	e13ffd05 	stb	r4,-12(fp)
80204100:	e0fffe0d 	sth	r3,-8(fp)
80204104:	e0bfff0d 	sth	r2,-4(fp)

	return msgdma_construct_extended_descriptor(pxDev, pxDescriptor,
80204108:	e0bffb0b 	ldhu	r2,-20(fp)
8020410c:	e0fffc03 	ldbu	r3,-16(fp)
80204110:	e13ffd03 	ldbu	r4,-12(fp)
80204114:	e17ffe0b 	ldhu	r5,-8(fp)
80204118:	e1bfff0b 	ldhu	r6,-4(fp)
8020411c:	d9800815 	stw	r6,32(sp)
80204120:	d9400715 	stw	r5,28(sp)
80204124:	d9000615 	stw	r4,24(sp)
80204128:	d8c00515 	stw	r3,20(sp)
8020412c:	d8800415 	stw	r2,16(sp)
80204130:	e0800517 	ldw	r2,20(fp)
80204134:	d8800315 	stw	r2,12(sp)
80204138:	e0800417 	ldw	r2,16(fp)
8020413c:	d8800215 	stw	r2,8(sp)
80204140:	e0800317 	ldw	r2,12(fp)
80204144:	d8800115 	stw	r2,4(sp)
80204148:	e0800217 	ldw	r2,8(fp)
8020414c:	d8800015 	stw	r2,0(sp)
80204150:	e1fffa17 	ldw	r7,-24(fp)
80204154:	e1bff917 	ldw	r6,-28(fp)
80204158:	e17ff817 	ldw	r5,-32(fp)
8020415c:	e13ff717 	ldw	r4,-36(fp)
80204160:	02039940 	call	80203994 <msgdma_construct_extended_descriptor>
			puliReadAddress, puliWriteAddress, uliLength, uliControl,
			puliReadAddressHigh, puliWriteAddressHigh, usiSequenceNumber,
			ucReadBurstCount, ucWriteBurstCount, usiReadStride, usiWriteStride);

}
80204164:	e037883a 	mov	sp,fp
80204168:	dfc00117 	ldw	ra,4(sp)
8020416c:	df000017 	ldw	fp,0(sp)
80204170:	dec00204 	addi	sp,sp,8
80204174:	f800283a 	ret

80204178 <iMsgdmaExtendedDescriptorAsyncTransfer>:
 * -ENOSPC -> FIFO descriptor buffer is full
 * -EPERM -> operation not permitted due to descriptor type conflict
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int iMsgdmaExtendedDescriptorAsyncTransfer(alt_msgdma_dev *pxDev,
		alt_msgdma_extended_descriptor *pxDesc) {
80204178:	defffc04 	addi	sp,sp,-16
8020417c:	dfc00315 	stw	ra,12(sp)
80204180:	df000215 	stw	fp,8(sp)
80204184:	df000204 	addi	fp,sp,8
80204188:	e13ffe15 	stw	r4,-8(fp)
8020418c:	e17fff15 	stw	r5,-4(fp)
	/*
	 * Error detection/handling should be performed at the application
	 * or callback level as appropriate.
	 */
	return msgdma_descriptor_async_transfer(pxDev, NULL, pxDesc);
80204190:	e1bfff17 	ldw	r6,-4(fp)
80204194:	000b883a 	mov	r5,zero
80204198:	e13ffe17 	ldw	r4,-8(fp)
8020419c:	0203af00 	call	80203af0 <msgdma_descriptor_async_transfer>
}
802041a0:	e037883a 	mov	sp,fp
802041a4:	dfc00117 	ldw	ra,4(sp)
802041a8:	df000017 	ldw	fp,0(sp)
802041ac:	dec00204 	addi	sp,sp,8
802041b0:	f800283a 	ret

802041b4 <iMsgdmaExtendedDescriptorSyncTransfer>:
 *           return -EPERM (operation not permitted due to descriptor type 
 *		conflict)
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int iMsgdmaExtendedDescriptorSyncTransfer(alt_msgdma_dev *pxDev,
		alt_msgdma_extended_descriptor *pxDesc) {
802041b4:	defffc04 	addi	sp,sp,-16
802041b8:	dfc00315 	stw	ra,12(sp)
802041bc:	df000215 	stw	fp,8(sp)
802041c0:	df000204 	addi	fp,sp,8
802041c4:	e13ffe15 	stw	r4,-8(fp)
802041c8:	e17fff15 	stw	r5,-4(fp)
	return msgdma_descriptor_sync_transfer(pxDev, NULL, pxDesc);
802041cc:	e1bfff17 	ldw	r6,-4(fp)
802041d0:	000b883a 	mov	r5,zero
802041d4:	e13ffe17 	ldw	r4,-8(fp)
802041d8:	0203d780 	call	80203d78 <msgdma_descriptor_sync_transfer>
}
802041dc:	e037883a 	mov	sp,fp
802041e0:	dfc00117 	ldw	ra,4(sp)
802041e4:	df000017 	ldw	fp,0(sp)
802041e8:	dec00204 	addi	sp,sp,8
802041ec:	f800283a 	ret

802041f0 <POWER_SPI_RW>:
#define SPI_SDI(x)    IOWR_ALTERA_AVALON_PIO_DATA(CSENSE_SDI_BASE,x)
#define SPI_SDO       (IORD_ALTERA_AVALON_PIO_DATA(CSENSE_SDO_BASE) & 0x01)
#define SPI_DELAY     usleep(15)  // based on 50MHZ of CPU clock
// Note. SCK: typical 19.2KHZ (53 ms)
bool POWER_SPI_RW(alt_u8 IcIndex, alt_u8 NextChannel, bool bEN, bool bSIGN,
		bool bSGL, alt_u32 *pValue) {
802041f0:	defff204 	addi	sp,sp,-56
802041f4:	dfc00d15 	stw	ra,52(sp)
802041f8:	df000c15 	stw	fp,48(sp)
802041fc:	df000c04 	addi	fp,sp,48
80204200:	2007883a 	mov	r3,r4
80204204:	2805883a 	mov	r2,r5
80204208:	e1bffe15 	stw	r6,-8(fp)
8020420c:	e1ffff15 	stw	r7,-4(fp)
80204210:	e0fffc05 	stb	r3,-16(fp)
80204214:	e0bffd05 	stb	r2,-12(fp)
	bool bSuccess;
	alt_u8 Config8;
	alt_u32 Value32 = 0, Mask32;
80204218:	e03ff515 	stw	zero,-44(fp)
	int i, nWait = 0, nZeroCnt;
8020421c:	e03ff815 	stw	zero,-32(fp)
	const int nMaxWait = 1000000;
80204220:	008003f4 	movhi	r2,15
80204224:	10909004 	addi	r2,r2,16960
80204228:	e0bffa15 	stw	r2,-24(fp)

	//
	Config8 = 0x80;
8020422c:	00bfe004 	movi	r2,-128
80204230:	e0bff405 	stb	r2,-48(fp)
	Config8 |= (bEN) ? 0x20 : 0x00;
80204234:	e0bffe17 	ldw	r2,-8(fp)
80204238:	10000226 	beq	r2,zero,80204244 <POWER_SPI_RW+0x54>
8020423c:	00800804 	movi	r2,32
80204240:	00000106 	br	80204248 <POWER_SPI_RW+0x58>
80204244:	0005883a 	mov	r2,zero
80204248:	e0fff403 	ldbu	r3,-48(fp)
8020424c:	10c4b03a 	or	r2,r2,r3
80204250:	e0bff405 	stb	r2,-48(fp)
	Config8 |= (bSGL) ? 0x10 : 0x00;
80204254:	e0800217 	ldw	r2,8(fp)
80204258:	10000226 	beq	r2,zero,80204264 <POWER_SPI_RW+0x74>
8020425c:	00800404 	movi	r2,16
80204260:	00000106 	br	80204268 <POWER_SPI_RW+0x78>
80204264:	0005883a 	mov	r2,zero
80204268:	e0fff403 	ldbu	r3,-48(fp)
8020426c:	10c4b03a 	or	r2,r2,r3
80204270:	e0bff405 	stb	r2,-48(fp)
	Config8 |= (bSIGN) ? 0x08 : 0x00;
80204274:	e0bfff17 	ldw	r2,-4(fp)
80204278:	10000226 	beq	r2,zero,80204284 <POWER_SPI_RW+0x94>
8020427c:	00800204 	movi	r2,8
80204280:	00000106 	br	80204288 <POWER_SPI_RW+0x98>
80204284:	0005883a 	mov	r2,zero
80204288:	e0fff403 	ldbu	r3,-48(fp)
8020428c:	10c4b03a 	or	r2,r2,r3
80204290:	e0bff405 	stb	r2,-48(fp)
	Config8 |= NextChannel & 0x07; // channel
80204294:	e0bffd03 	ldbu	r2,-12(fp)
80204298:	108001cc 	andi	r2,r2,7
8020429c:	1007883a 	mov	r3,r2
802042a0:	e0bff403 	ldbu	r2,-48(fp)
802042a4:	1884b03a 	or	r2,r3,r2
802042a8:	e0bff405 	stb	r2,-48(fp)

	SPI_FO(0); // use internal conversion clock
802042ac:	0007883a 	mov	r3,zero
802042b0:	00a04034 	movhi	r2,33024
802042b4:	10824404 	addi	r2,r2,2320
802042b8:	10c00035 	stwio	r3,0(r2)
	SPI_SCK(0);  // set low to active extenal serial clock mode.
802042bc:	0007883a 	mov	r3,zero
802042c0:	00a04034 	movhi	r2,33024
802042c4:	10824c04 	addi	r2,r2,2352
802042c8:	10c00035 	stwio	r3,0(r2)
	SPI_CS_N(IcIndex, 0);  // chip select: active
802042cc:	e0bffc03 	ldbu	r2,-16(fp)
802042d0:	1000021e 	bne	r2,zero,802042dc <POWER_SPI_RW+0xec>
802042d4:	00c00084 	movi	r3,2
802042d8:	00000106 	br	802042e0 <POWER_SPI_RW+0xf0>
802042dc:	00c00044 	movi	r3,1
802042e0:	00a04034 	movhi	r2,33024
802042e4:	10824804 	addi	r2,r2,2336
802042e8:	10c00035 	stwio	r3,0(r2)
	SPI_DELAY;
802042ec:	010003c4 	movi	r4,15
802042f0:	0215b280 	call	80215b28 <usleep>

	// wait for converion end (when conversion done, SPI_SDO is low)
	while (SPI_SDO && nWait < nMaxWait) {
802042f4:	00000306 	br	80204304 <POWER_SPI_RW+0x114>
		nWait++;
802042f8:	e0bff817 	ldw	r2,-32(fp)
802042fc:	10800044 	addi	r2,r2,1
80204300:	e0bff815 	stw	r2,-32(fp)
	SPI_SCK(0);  // set low to active extenal serial clock mode.
	SPI_CS_N(IcIndex, 0);  // chip select: active
	SPI_DELAY;

	// wait for converion end (when conversion done, SPI_SDO is low)
	while (SPI_SDO && nWait < nMaxWait) {
80204304:	00a04034 	movhi	r2,33024
80204308:	10825404 	addi	r2,r2,2384
8020430c:	10800037 	ldwio	r2,0(r2)
80204310:	1080004c 	andi	r2,r2,1
80204314:	10000326 	beq	r2,zero,80204324 <POWER_SPI_RW+0x134>
80204318:	e0fff817 	ldw	r3,-32(fp)
8020431c:	e0bffa17 	ldw	r2,-24(fp)
80204320:	18bff516 	blt	r3,r2,802042f8 <__reset+0xfa1e42f8>
		nWait++;
	}

	if (SPI_SDO) {
80204324:	00a04034 	movhi	r2,33024
80204328:	10825404 	addi	r2,r2,2384
8020432c:	10800037 	ldwio	r2,0(r2)
80204330:	1080004c 	andi	r2,r2,1
80204334:	10000626 	beq	r2,zero,80204350 <POWER_SPI_RW+0x160>
		SPI_CS_N(IcIndex, 1);  // chip select: inactive
80204338:	00c000c4 	movi	r3,3
8020433c:	00a04034 	movhi	r2,33024
80204340:	10824804 	addi	r2,r2,2336
80204344:	10c00035 	stwio	r3,0(r2)
		return FALSE;
80204348:	0005883a 	mov	r2,zero
8020434c:	0000db06 	br	802046bc <POWER_SPI_RW+0x4cc>
	}

	for (i = 0; i < 2; i++) // send config bits 7:6,
80204350:	e03ff715 	stw	zero,-36(fp)
80204354:	00002406 	br	802043e8 <POWER_SPI_RW+0x1f8>
			// ignore EOC/ and DMY bits
			{
		SPI_SDI((Config8 & 0x80) ? 1 : 0);    //sdi=nextch.7; // put data on pin
80204358:	e0bff403 	ldbu	r2,-48(fp)
8020435c:	10803fcc 	andi	r2,r2,255
80204360:	1004d1fa 	srli	r2,r2,7
80204364:	10c03fcc 	andi	r3,r2,255
80204368:	00a04034 	movhi	r2,33024
8020436c:	10825004 	addi	r2,r2,2368
80204370:	10c00035 	stwio	r3,0(r2)
		Config8 <<= 1; //nextch = rl(nextch); // get next config bit ready
80204374:	e0bff403 	ldbu	r2,-48(fp)
80204378:	1085883a 	add	r2,r2,r2
8020437c:	e0bff405 	stb	r2,-48(fp)
		Value32 <<= 1; //result_0 = rl(result_0);// get ready to load lsb
80204380:	e0bff517 	ldw	r2,-44(fp)
80204384:	1085883a 	add	r2,r2,r2
80204388:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_0.0 = sdo; // load lsb
8020438c:	00a04034 	movhi	r2,33024
80204390:	10825404 	addi	r2,r2,2384
80204394:	10800037 	ldwio	r2,0(r2)
80204398:	1080004c 	andi	r2,r2,1
8020439c:	1007883a 	mov	r3,r2
802043a0:	e0bff517 	ldw	r2,-44(fp)
802043a4:	10c4b03a 	or	r2,r2,r3
802043a8:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
802043ac:	00c00044 	movi	r3,1
802043b0:	00a04034 	movhi	r2,33024
802043b4:	10824c04 	addi	r2,r2,2352
802043b8:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
802043bc:	010003c4 	movi	r4,15
802043c0:	0215b280 	call	80215b28 <usleep>
		SPI_SCK(0); //sck=0; // clock low
802043c4:	0007883a 	mov	r3,zero
802043c8:	00a04034 	movhi	r2,33024
802043cc:	10824c04 	addi	r2,r2,2352
802043d0:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
802043d4:	010003c4 	movi	r4,15
802043d8:	0215b280 	call	80215b28 <usleep>
	if (SPI_SDO) {
		SPI_CS_N(IcIndex, 1);  // chip select: inactive
		return FALSE;
	}

	for (i = 0; i < 2; i++) // send config bits 7:6,
802043dc:	e0bff717 	ldw	r2,-36(fp)
802043e0:	10800044 	addi	r2,r2,1
802043e4:	e0bff715 	stw	r2,-36(fp)
802043e8:	e0bff717 	ldw	r2,-36(fp)
802043ec:	10800090 	cmplti	r2,r2,2
802043f0:	103fd91e 	bne	r2,zero,80204358 <__reset+0xfa1e4358>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // send config, read byte 3
802043f4:	e03ff715 	stw	zero,-36(fp)
802043f8:	00002406 	br	8020448c <POWER_SPI_RW+0x29c>
			{
		SPI_SDI((Config8 & 0x80) ? 1 : 0); //sdi=nextch.7; // put data on pin
802043fc:	e0bff403 	ldbu	r2,-48(fp)
80204400:	10803fcc 	andi	r2,r2,255
80204404:	1004d1fa 	srli	r2,r2,7
80204408:	10c03fcc 	andi	r3,r2,255
8020440c:	00a04034 	movhi	r2,33024
80204410:	10825004 	addi	r2,r2,2368
80204414:	10c00035 	stwio	r3,0(r2)
		Config8 <<= 1; //nextch = rl(nextch); // get next config bit ready
80204418:	e0bff403 	ldbu	r2,-48(fp)
8020441c:	1085883a 	add	r2,r2,r2
80204420:	e0bff405 	stb	r2,-48(fp)

		Value32 <<= 1; //result_3 = rl(result_3);// get ready to load lsb
80204424:	e0bff517 	ldw	r2,-44(fp)
80204428:	1085883a 	add	r2,r2,r2
8020442c:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_3.0 = sdo; // load lsb
80204430:	00a04034 	movhi	r2,33024
80204434:	10825404 	addi	r2,r2,2384
80204438:	10800037 	ldwio	r2,0(r2)
8020443c:	1080004c 	andi	r2,r2,1
80204440:	1007883a 	mov	r3,r2
80204444:	e0bff517 	ldw	r2,-44(fp)
80204448:	10c4b03a 	or	r2,r2,r3
8020444c:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
80204450:	00c00044 	movi	r3,1
80204454:	00a04034 	movhi	r2,33024
80204458:	10824c04 	addi	r2,r2,2352
8020445c:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
80204460:	010003c4 	movi	r4,15
80204464:	0215b280 	call	80215b28 <usleep>
		SPI_SCK(0); //sck=0; // clock low
80204468:	0007883a 	mov	r3,zero
8020446c:	00a04034 	movhi	r2,33024
80204470:	10824c04 	addi	r2,r2,2352
80204474:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
80204478:	010003c4 	movi	r4,15
8020447c:	0215b280 	call	80215b28 <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // send config, read byte 3
80204480:	e0bff717 	ldw	r2,-36(fp)
80204484:	10800044 	addi	r2,r2,1
80204488:	e0bff715 	stw	r2,-36(fp)
8020448c:	e0bff717 	ldw	r2,-36(fp)
80204490:	10800210 	cmplti	r2,r2,8
80204494:	103fd91e 	bne	r2,zero,802043fc <__reset+0xfa1e43fc>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 2
80204498:	e03ff715 	stw	zero,-36(fp)
8020449c:	00001a06 	br	80204508 <POWER_SPI_RW+0x318>
			{
		Value32 <<= 1; //result_2 = rl(result_2);// get ready to load lsb
802044a0:	e0bff517 	ldw	r2,-44(fp)
802044a4:	1085883a 	add	r2,r2,r2
802044a8:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_2.0 = sdo; // load lsb
802044ac:	00a04034 	movhi	r2,33024
802044b0:	10825404 	addi	r2,r2,2384
802044b4:	10800037 	ldwio	r2,0(r2)
802044b8:	1080004c 	andi	r2,r2,1
802044bc:	1007883a 	mov	r3,r2
802044c0:	e0bff517 	ldw	r2,-44(fp)
802044c4:	10c4b03a 	or	r2,r2,r3
802044c8:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
802044cc:	00c00044 	movi	r3,1
802044d0:	00a04034 	movhi	r2,33024
802044d4:	10824c04 	addi	r2,r2,2352
802044d8:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
802044dc:	010003c4 	movi	r4,15
802044e0:	0215b280 	call	80215b28 <usleep>
		SPI_SCK(0); //sck=0; // clock low
802044e4:	0007883a 	mov	r3,zero
802044e8:	00a04034 	movhi	r2,33024
802044ec:	10824c04 	addi	r2,r2,2352
802044f0:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
802044f4:	010003c4 	movi	r4,15
802044f8:	0215b280 	call	80215b28 <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 2
802044fc:	e0bff717 	ldw	r2,-36(fp)
80204500:	10800044 	addi	r2,r2,1
80204504:	e0bff715 	stw	r2,-36(fp)
80204508:	e0bff717 	ldw	r2,-36(fp)
8020450c:	10800210 	cmplti	r2,r2,8
80204510:	103fe31e 	bne	r2,zero,802044a0 <__reset+0xfa1e44a0>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 1
80204514:	e03ff715 	stw	zero,-36(fp)
80204518:	00001a06 	br	80204584 <POWER_SPI_RW+0x394>
			{
		Value32 <<= 1; //result_1 = rl(result_1);// get ready to load lsb
8020451c:	e0bff517 	ldw	r2,-44(fp)
80204520:	1085883a 	add	r2,r2,r2
80204524:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_1.0 = sdo; // load lsb
80204528:	00a04034 	movhi	r2,33024
8020452c:	10825404 	addi	r2,r2,2384
80204530:	10800037 	ldwio	r2,0(r2)
80204534:	1080004c 	andi	r2,r2,1
80204538:	1007883a 	mov	r3,r2
8020453c:	e0bff517 	ldw	r2,-44(fp)
80204540:	10c4b03a 	or	r2,r2,r3
80204544:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
80204548:	00c00044 	movi	r3,1
8020454c:	00a04034 	movhi	r2,33024
80204550:	10824c04 	addi	r2,r2,2352
80204554:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
80204558:	010003c4 	movi	r4,15
8020455c:	0215b280 	call	80215b28 <usleep>
		SPI_SCK(0); //sck=0; // clock low
80204560:	0007883a 	mov	r3,zero
80204564:	00a04034 	movhi	r2,33024
80204568:	10824c04 	addi	r2,r2,2352
8020456c:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
80204570:	010003c4 	movi	r4,15
80204574:	0215b280 	call	80215b28 <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 1
80204578:	e0bff717 	ldw	r2,-36(fp)
8020457c:	10800044 	addi	r2,r2,1
80204580:	e0bff715 	stw	r2,-36(fp)
80204584:	e0bff717 	ldw	r2,-36(fp)
80204588:	10800210 	cmplti	r2,r2,8
8020458c:	103fe31e 	bne	r2,zero,8020451c <__reset+0xfa1e451c>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 6; i++) // read byte 0
80204590:	e03ff715 	stw	zero,-36(fp)
80204594:	00001a06 	br	80204600 <POWER_SPI_RW+0x410>
			{
		Value32 <<= 1; //result_0 = rl(result_0);// get ready to load lsb
80204598:	e0bff517 	ldw	r2,-44(fp)
8020459c:	1085883a 	add	r2,r2,r2
802045a0:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_0.0 = sdo; // load lsb
802045a4:	00a04034 	movhi	r2,33024
802045a8:	10825404 	addi	r2,r2,2384
802045ac:	10800037 	ldwio	r2,0(r2)
802045b0:	1080004c 	andi	r2,r2,1
802045b4:	1007883a 	mov	r3,r2
802045b8:	e0bff517 	ldw	r2,-44(fp)
802045bc:	10c4b03a 	or	r2,r2,r3
802045c0:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
802045c4:	00c00044 	movi	r3,1
802045c8:	00a04034 	movhi	r2,33024
802045cc:	10824c04 	addi	r2,r2,2352
802045d0:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
802045d4:	010003c4 	movi	r4,15
802045d8:	0215b280 	call	80215b28 <usleep>
		SPI_SCK(0); //sck=0; // clock low
802045dc:	0007883a 	mov	r3,zero
802045e0:	00a04034 	movhi	r2,33024
802045e4:	10824c04 	addi	r2,r2,2352
802045e8:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
802045ec:	010003c4 	movi	r4,15
802045f0:	0215b280 	call	80215b28 <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 6; i++) // read byte 0
802045f4:	e0bff717 	ldw	r2,-36(fp)
802045f8:	10800044 	addi	r2,r2,1
802045fc:	e0bff715 	stw	r2,-36(fp)
80204600:	e0bff717 	ldw	r2,-36(fp)
80204604:	10800190 	cmplti	r2,r2,6
80204608:	103fe31e 	bne	r2,zero,80204598 <__reset+0xfa1e4598>
		SPI_SCK(1); //sck=1; // clock high
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}
	SPI_SCK(1);
8020460c:	00c00044 	movi	r3,1
80204610:	00a04034 	movhi	r2,33024
80204614:	10824c04 	addi	r2,r2,2352
80204618:	10c00035 	stwio	r3,0(r2)
	SPI_DELAY;
8020461c:	010003c4 	movi	r4,15
80204620:	0215b280 	call	80215b28 <usleep>
	SPI_CS_N(IcIndex, 1);  // chip select: inactive
80204624:	00c000c4 	movi	r3,3
80204628:	00a04034 	movhi	r2,33024
8020462c:	10824804 	addi	r2,r2,2336
80204630:	10c00035 	stwio	r3,0(r2)

	// check parity
	nZeroCnt = 0;
80204634:	e03ff915 	stw	zero,-28(fp)
	Mask32 = 0x01;
80204638:	00800044 	movi	r2,1
8020463c:	e0bff615 	stw	r2,-40(fp)
	for (i = 0; i < 32; i++) {
80204640:	e03ff715 	stw	zero,-36(fp)
80204644:	00000d06 	br	8020467c <POWER_SPI_RW+0x48c>
		if ((Value32 & Mask32) == 0x00) {
80204648:	e0fff517 	ldw	r3,-44(fp)
8020464c:	e0bff617 	ldw	r2,-40(fp)
80204650:	1884703a 	and	r2,r3,r2
80204654:	1000031e 	bne	r2,zero,80204664 <POWER_SPI_RW+0x474>
			nZeroCnt++;
80204658:	e0bff917 	ldw	r2,-28(fp)
8020465c:	10800044 	addi	r2,r2,1
80204660:	e0bff915 	stw	r2,-28(fp)
		}
		Mask32 <<= 1;
80204664:	e0bff617 	ldw	r2,-40(fp)
80204668:	1085883a 	add	r2,r2,r2
8020466c:	e0bff615 	stw	r2,-40(fp)
	SPI_CS_N(IcIndex, 1);  // chip select: inactive

	// check parity
	nZeroCnt = 0;
	Mask32 = 0x01;
	for (i = 0; i < 32; i++) {
80204670:	e0bff717 	ldw	r2,-36(fp)
80204674:	10800044 	addi	r2,r2,1
80204678:	e0bff715 	stw	r2,-36(fp)
8020467c:	e0bff717 	ldw	r2,-36(fp)
80204680:	10800810 	cmplti	r2,r2,32
80204684:	103ff01e 	bne	r2,zero,80204648 <__reset+0xfa1e4648>
		if ((Value32 & Mask32) == 0x00) {
			nZeroCnt++;
		}
		Mask32 <<= 1;
	}
	bSuccess = (nZeroCnt & 0x01) ? FALSE : TRUE;
80204688:	e0bff917 	ldw	r2,-28(fp)
8020468c:	1080004c 	andi	r2,r2,1
80204690:	1005003a 	cmpeq	r2,r2,zero
80204694:	10803fcc 	andi	r2,r2,255
80204698:	e0bffb15 	stw	r2,-20(fp)
	if (!bSuccess) {
8020469c:	e0bffb17 	ldw	r2,-20(fp)
802046a0:	1000021e 	bne	r2,zero,802046ac <POWER_SPI_RW+0x4bc>
		return FALSE;
802046a4:	0005883a 	mov	r2,zero
802046a8:	00000406 	br	802046bc <POWER_SPI_RW+0x4cc>
	}

	*pValue = Value32;
802046ac:	e0800317 	ldw	r2,12(fp)
802046b0:	e0fff517 	ldw	r3,-44(fp)
802046b4:	10c00015 	stw	r3,0(r2)

	return bSuccess;
802046b8:	e0bffb17 	ldw	r2,-20(fp)
}
802046bc:	e037883a 	mov	sp,fp
802046c0:	dfc00117 	ldw	ra,4(sp)
802046c4:	df000017 	ldw	fp,0(sp)
802046c8:	dec00204 	addi	sp,sp,8
802046cc:	f800283a 	ret

802046d0 <bSSDisplayConfig>:
 *
 * @retval TRUE : Sucesso
 * @retval FALSE : Configuração não especificada
 *
 */
bool bSSDisplayConfig(alt_u8 SsdpConfig){
802046d0:	defffd04 	addi	sp,sp,-12
802046d4:	df000215 	stw	fp,8(sp)
802046d8:	df000204 	addi	fp,sp,8
802046dc:	2005883a 	mov	r2,r4
802046e0:	e0bfff05 	stb	r2,-4(fp)

    switch(SsdpConfig){
802046e4:	e0bfff03 	ldbu	r2,-4(fp)
802046e8:	10c00168 	cmpgeui	r3,r2,5
802046ec:	18001c1e 	bne	r3,zero,80204760 <bSSDisplayConfig+0x90>
802046f0:	100690ba 	slli	r3,r2,2
802046f4:	00a00834 	movhi	r2,32800
802046f8:	1091c204 	addi	r2,r2,18184
802046fc:	1885883a 	add	r2,r3,r2
80204700:	10800017 	ldw	r2,0(r2)
80204704:	1000683a 	jmp	r2
80204708:	8020471c 	xori	zero,r16,33052
8020470c:	80204728 	cmpgeui	zero,r16,33052
80204710:	80204734 	orhi	zero,r16,33052
80204714:	80204748 	cmpgei	zero,r16,-32483
80204718:	80204758 	cmpnei	zero,r16,-32483
	    case SSDP_NORMAL_MODE:
	        SspdConfigControl = (SSDP_ON_MASK | SSDP_UNLOCK_MASK);
8020471c:	00800cc4 	movi	r2,51
80204720:	d0a01845 	stb	r2,-32671(gp)
	    break;
80204724:	00001006 	br	80204768 <bSSDisplayConfig+0x98>
		
	    case SSDP_TEST_MODE:
	        SspdConfigControl = (SSDP_ON_MASK | SSDP_TEST_MASK);
80204728:	00801544 	movi	r2,85
8020472c:	d0a01845 	stb	r2,-32671(gp)
	    break;
80204730:	00000d06 	br	80204768 <bSSDisplayConfig+0x98>
		
	    case SSDP_LOCK:
	        SspdConfigControl &= (~SSDP_UNLOCK_MASK);
80204734:	d0e01843 	ldbu	r3,-32671(gp)
80204738:	00bff744 	movi	r2,-35
8020473c:	1884703a 	and	r2,r3,r2
80204740:	d0a01845 	stb	r2,-32671(gp)
	    break;
80204744:	00000806 	br	80204768 <bSSDisplayConfig+0x98>
		
	    case SSDP_UNLOCK:
	        SspdConfigControl |= SSDP_UNLOCK_MASK;
80204748:	d0a01843 	ldbu	r2,-32671(gp)
8020474c:	10800894 	ori	r2,r2,34
80204750:	d0a01845 	stb	r2,-32671(gp)
	    break;
80204754:	00000406 	br	80204768 <bSSDisplayConfig+0x98>
		
	    case SSDP_OFF:
	        SspdConfigControl = SSDP_OFF_MASK;
80204758:	d0201845 	stb	zero,-32671(gp)
	    break;
8020475c:	00000206 	br	80204768 <bSSDisplayConfig+0x98>
		
		default:
		    return FALSE;
80204760:	0005883a 	mov	r2,zero
80204764:	00000806 	br	80204788 <bSSDisplayConfig+0xb8>
	}

	alt_u32 *pSsdpAddr = (alt_u32 *)SSDP_BASE;
80204768:	00a04034 	movhi	r2,33024
8020476c:	10828404 	addi	r2,r2,2576
80204770:	e0bffe15 	stw	r2,-8(fp)
	*(pSsdpAddr + SSDP_CONTROL_REG_OFFSET) = (alt_u32) SspdConfigControl;
80204774:	d0a01843 	ldbu	r2,-32671(gp)
80204778:	10c03fcc 	andi	r3,r2,255
8020477c:	e0bffe17 	ldw	r2,-8(fp)
80204780:	10c00015 	stw	r3,0(r2)
	
	return TRUE;
80204784:	00800044 	movi	r2,1
}
80204788:	e037883a 	mov	sp,fp
8020478c:	df000017 	ldw	fp,0(sp)
80204790:	dec00104 	addi	sp,sp,4
80204794:	f800283a 	ret

80204798 <bSSDisplayUpdate>:
 * @param [in] SsdpData Dado a ser colocado no display de sete segmentos, do tipo unsigned char (alt_u8)
 *
 * @retval TRUE : Sucesso
 *
 */
bool bSSDisplayUpdate(alt_u8 SsdpData){
80204798:	defffd04 	addi	sp,sp,-12
8020479c:	df000215 	stw	fp,8(sp)
802047a0:	df000204 	addi	fp,sp,8
802047a4:	2005883a 	mov	r2,r4
802047a8:	e0bfff05 	stb	r2,-4(fp)

	alt_u32 *pSsdpAddr = (alt_u32 *)SSDP_BASE;
802047ac:	00a04034 	movhi	r2,33024
802047b0:	10828404 	addi	r2,r2,2576
802047b4:	e0bffe15 	stw	r2,-8(fp)
	*(pSsdpAddr + SSDP_DATA_REG_OFFSET) = (alt_u32) SsdpData;
802047b8:	e0bffe17 	ldw	r2,-8(fp)
802047bc:	10800104 	addi	r2,r2,4
802047c0:	e0ffff03 	ldbu	r3,-4(fp)
802047c4:	10c00015 	stw	r3,0(r2)
	
	return TRUE;
802047c8:	00800044 	movi	r2,1
}
802047cc:	e037883a 	mov	sp,fp
802047d0:	df000017 	ldw	fp,0(sp)
802047d4:	dec00104 	addi	sp,sp,4
802047d8:	f800283a 	ret

802047dc <main>:
#include "api_driver/ddr2/ddr2.h"
#include "api_driver/simucam_dma/simucam_dma.h"

FILE* fp;

int main() {
802047dc:	defffb04 	addi	sp,sp,-20
802047e0:	dfc00415 	stw	ra,16(sp)
802047e4:	df000315 	stw	fp,12(sp)
802047e8:	df000304 	addi	fp,sp,12
	printf("Hello from Nios II!\n\n");
802047ec:	012008b4 	movhi	r4,32802
802047f0:	212c6f04 	addi	r4,r4,-20036
802047f4:	02054280 	call	80205428 <puts>

	alt_u8 *pxDes;
	alt_u32 *pxDes32;

	alt_u32 uiDataCnt = 0;
802047f8:	e03ffe15 	stw	zero,-8(fp)

	pxDes32 = (alt_u32 *) AVSTAP32_0_BASE;
802047fc:	00a00034 	movhi	r2,32768
80204800:	10900004 	addi	r2,r2,16384
80204804:	e0bffd15 	stw	r2,-12(fp)
	for (uiDataCnt = 0; uiDataCnt < 1024; uiDataCnt++) {
80204808:	e03ffe15 	stw	zero,-8(fp)
8020480c:	00000806 	br	80204830 <main+0x54>
		*pxDes32 = (alt_u32) 0;
80204810:	e0bffd17 	ldw	r2,-12(fp)
80204814:	10000015 	stw	zero,0(r2)
		pxDes32++;
80204818:	e0bffd17 	ldw	r2,-12(fp)
8020481c:	10800104 	addi	r2,r2,4
80204820:	e0bffd15 	stw	r2,-12(fp)
	alt_u32 *pxDes32;

	alt_u32 uiDataCnt = 0;

	pxDes32 = (alt_u32 *) AVSTAP32_0_BASE;
	for (uiDataCnt = 0; uiDataCnt < 1024; uiDataCnt++) {
80204824:	e0bffe17 	ldw	r2,-8(fp)
80204828:	10800044 	addi	r2,r2,1
8020482c:	e0bffe15 	stw	r2,-8(fp)
80204830:	e0bffe17 	ldw	r2,-8(fp)
80204834:	10810030 	cmpltui	r2,r2,1024
80204838:	103ff51e 	bne	r2,zero,80204810 <__reset+0xfa1e4810>
		*pxDes32 = (alt_u32) 0;
		pxDes32++;
	}

	usleep(1000 * 1000 * 1);
8020483c:	010003f4 	movhi	r4,15
80204840:	21109004 	addi	r4,r4,16960
80204844:	0215b280 	call	80215b28 <usleep>

	pxDes = (alt_u8 *) AVSTAP32_0_BASE;
80204848:	00a00034 	movhi	r2,32768
8020484c:	10900004 	addi	r2,r2,16384
80204850:	e0bfff15 	stw	r2,-4(fp)
	*pxDes = (alt_u32) 50;
80204854:	e0bfff17 	ldw	r2,-4(fp)
80204858:	00c00c84 	movi	r3,50
8020485c:	10c00005 	stb	r3,0(r2)

	*(pxDes+3) = (alt_u32) 50;
80204860:	e0bfff17 	ldw	r2,-4(fp)
80204864:	108000c4 	addi	r2,r2,3
80204868:	00c00c84 	movi	r3,50
8020486c:	10c00005 	stb	r3,0(r2)
//	for (uiDataCnt = 0; uiDataCnt < 1024; uiDataCnt++) {
//		*pxDes32 = (alt_u32) uiDataCnt;
//		pxDes32++;
//	}

	usleep(1000 * 1000 * 1);
80204870:	010003f4 	movhi	r4,15
80204874:	21109004 	addi	r4,r4,16960
80204878:	0215b280 	call	80215b28 <usleep>

	pxDes32 = (alt_u32 *) AVSTAP32_0_BASE;
8020487c:	00a00034 	movhi	r2,32768
80204880:	10900004 	addi	r2,r2,16384
80204884:	e0bffd15 	stw	r2,-12(fp)
	for (uiDataCnt = 0; uiDataCnt < 1024; uiDataCnt++) {
80204888:	e03ffe15 	stw	zero,-8(fp)
8020488c:	00000e06 	br	802048c8 <main+0xec>
		printf("Addr: %04lu; Data: %08lX \n", (alt_u32) pxDes32, *pxDes32);
80204890:	e0fffd17 	ldw	r3,-12(fp)
80204894:	e0bffd17 	ldw	r2,-12(fp)
80204898:	10800017 	ldw	r2,0(r2)
8020489c:	100d883a 	mov	r6,r2
802048a0:	180b883a 	mov	r5,r3
802048a4:	012008b4 	movhi	r4,32802
802048a8:	212c7504 	addi	r4,r4,-20012
802048ac:	020532c0 	call	8020532c <printf>
		pxDes32++;
802048b0:	e0bffd17 	ldw	r2,-12(fp)
802048b4:	10800104 	addi	r2,r2,4
802048b8:	e0bffd15 	stw	r2,-12(fp)
//	}

	usleep(1000 * 1000 * 1);

	pxDes32 = (alt_u32 *) AVSTAP32_0_BASE;
	for (uiDataCnt = 0; uiDataCnt < 1024; uiDataCnt++) {
802048bc:	e0bffe17 	ldw	r2,-8(fp)
802048c0:	10800044 	addi	r2,r2,1
802048c4:	e0bffe15 	stw	r2,-8(fp)
802048c8:	e0bffe17 	ldw	r2,-8(fp)
802048cc:	10810030 	cmpltui	r2,r2,1024
802048d0:	103fef1e 	bne	r2,zero,80204890 <__reset+0xfa1e4890>
		printf("Addr: %04lu; Data: %08lX \n", (alt_u32) pxDes32, *pxDes32);
		pxDes32++;
	}

	return 0;
802048d4:	0005883a 	mov	r2,zero
}
802048d8:	e037883a 	mov	sp,fp
802048dc:	dfc00117 	ldw	ra,4(sp)
802048e0:	df000017 	ldw	fp,0(sp)
802048e4:	dec00204 	addi	sp,sp,8
802048e8:	f800283a 	ret

802048ec <__divsf3>:
802048ec:	defff504 	addi	sp,sp,-44
802048f0:	200cd5fa 	srli	r6,r4,23
802048f4:	dcc00415 	stw	r19,16(sp)
802048f8:	2026d7fa 	srli	r19,r4,31
802048fc:	00c02034 	movhi	r3,128
80204900:	dd800715 	stw	r22,28(sp)
80204904:	dd000515 	stw	r20,20(sp)
80204908:	dc800315 	stw	r18,12(sp)
8020490c:	18ffffc4 	addi	r3,r3,-1
80204910:	dfc00a15 	stw	ra,40(sp)
80204914:	df000915 	stw	fp,36(sp)
80204918:	ddc00815 	stw	r23,32(sp)
8020491c:	dd400615 	stw	r21,24(sp)
80204920:	dc400215 	stw	r17,8(sp)
80204924:	dc000115 	stw	r16,4(sp)
80204928:	35003fcc 	andi	r20,r6,255
8020492c:	1924703a 	and	r18,r3,r4
80204930:	9d803fcc 	andi	r22,r19,255
80204934:	a0005226 	beq	r20,zero,80204a80 <__divsf3+0x194>
80204938:	00803fc4 	movi	r2,255
8020493c:	a0802e26 	beq	r20,r2,802049f8 <__divsf3+0x10c>
80204940:	91002034 	orhi	r4,r18,128
80204944:	202490fa 	slli	r18,r4,3
80204948:	a53fe044 	addi	r20,r20,-127
8020494c:	0021883a 	mov	r16,zero
80204950:	002f883a 	mov	r23,zero
80204954:	280cd5fa 	srli	r6,r5,23
80204958:	282ad7fa 	srli	r21,r5,31
8020495c:	00c02034 	movhi	r3,128
80204960:	18ffffc4 	addi	r3,r3,-1
80204964:	31803fcc 	andi	r6,r6,255
80204968:	1962703a 	and	r17,r3,r5
8020496c:	af003fcc 	andi	fp,r21,255
80204970:	30004a26 	beq	r6,zero,80204a9c <__divsf3+0x1b0>
80204974:	00803fc4 	movi	r2,255
80204978:	30804526 	beq	r6,r2,80204a90 <__divsf3+0x1a4>
8020497c:	89402034 	orhi	r5,r17,128
80204980:	282290fa 	slli	r17,r5,3
80204984:	31bfe044 	addi	r6,r6,-127
80204988:	000b883a 	mov	r5,zero
8020498c:	2c20b03a 	or	r16,r5,r16
80204990:	802090ba 	slli	r16,r16,2
80204994:	00a00834 	movhi	r2,32800
80204998:	10926e04 	addi	r2,r2,18872
8020499c:	80a1883a 	add	r16,r16,r2
802049a0:	81000017 	ldw	r4,0(r16)
802049a4:	9d46f03a 	xor	r3,r19,r21
802049a8:	180f883a 	mov	r7,r3
802049ac:	18803fcc 	andi	r2,r3,255
802049b0:	a18dc83a 	sub	r6,r20,r6
802049b4:	2000683a 	jmp	r4
802049b8:	80204b9c 	xori	zero,r16,33070
802049bc:	80204a20 	cmpeqi	zero,r16,-32472
802049c0:	80204b90 	cmplti	zero,r16,-32466
802049c4:	80204a0c 	andi	zero,r16,33064
802049c8:	80204b90 	cmplti	zero,r16,-32466
802049cc:	80204b68 	cmpgeui	zero,r16,33069
802049d0:	80204b90 	cmplti	zero,r16,-32466
802049d4:	80204a0c 	andi	zero,r16,33064
802049d8:	80204a20 	cmpeqi	zero,r16,-32472
802049dc:	80204a20 	cmpeqi	zero,r16,-32472
802049e0:	80204b68 	cmpgeui	zero,r16,33069
802049e4:	80204a0c 	andi	zero,r16,33064
802049e8:	80204c7c 	xorhi	zero,r16,33073
802049ec:	80204c7c 	xorhi	zero,r16,33073
802049f0:	80204c7c 	xorhi	zero,r16,33073
802049f4:	80204c30 	cmpltui	zero,r16,33072
802049f8:	9000581e 	bne	r18,zero,80204b5c <__divsf3+0x270>
802049fc:	04000204 	movi	r16,8
80204a00:	05c00084 	movi	r23,2
80204a04:	003fd306 	br	80204954 <__reset+0xfa1e4954>
80204a08:	0023883a 	mov	r17,zero
80204a0c:	e02d883a 	mov	r22,fp
80204a10:	282f883a 	mov	r23,r5
80204a14:	00800084 	movi	r2,2
80204a18:	b8808f1e 	bne	r23,r2,80204c58 <__divsf3+0x36c>
80204a1c:	b005883a 	mov	r2,r22
80204a20:	11c0004c 	andi	r7,r2,1
80204a24:	013fffc4 	movi	r4,-1
80204a28:	000d883a 	mov	r6,zero
80204a2c:	21003fcc 	andi	r4,r4,255
80204a30:	200895fa 	slli	r4,r4,23
80204a34:	38803fcc 	andi	r2,r7,255
80204a38:	00c02034 	movhi	r3,128
80204a3c:	100497fa 	slli	r2,r2,31
80204a40:	18ffffc4 	addi	r3,r3,-1
80204a44:	30c6703a 	and	r3,r6,r3
80204a48:	1906b03a 	or	r3,r3,r4
80204a4c:	1884b03a 	or	r2,r3,r2
80204a50:	dfc00a17 	ldw	ra,40(sp)
80204a54:	df000917 	ldw	fp,36(sp)
80204a58:	ddc00817 	ldw	r23,32(sp)
80204a5c:	dd800717 	ldw	r22,28(sp)
80204a60:	dd400617 	ldw	r21,24(sp)
80204a64:	dd000517 	ldw	r20,20(sp)
80204a68:	dcc00417 	ldw	r19,16(sp)
80204a6c:	dc800317 	ldw	r18,12(sp)
80204a70:	dc400217 	ldw	r17,8(sp)
80204a74:	dc000117 	ldw	r16,4(sp)
80204a78:	dec00b04 	addi	sp,sp,44
80204a7c:	f800283a 	ret
80204a80:	90002b1e 	bne	r18,zero,80204b30 <__divsf3+0x244>
80204a84:	04000104 	movi	r16,4
80204a88:	05c00044 	movi	r23,1
80204a8c:	003fb106 	br	80204954 <__reset+0xfa1e4954>
80204a90:	8800251e 	bne	r17,zero,80204b28 <__divsf3+0x23c>
80204a94:	01400084 	movi	r5,2
80204a98:	00000206 	br	80204aa4 <__divsf3+0x1b8>
80204a9c:	88001a1e 	bne	r17,zero,80204b08 <__divsf3+0x21c>
80204aa0:	01400044 	movi	r5,1
80204aa4:	8160b03a 	or	r16,r16,r5
80204aa8:	802090ba 	slli	r16,r16,2
80204aac:	00e00834 	movhi	r3,32800
80204ab0:	18d2b204 	addi	r3,r3,19144
80204ab4:	80e1883a 	add	r16,r16,r3
80204ab8:	80c00017 	ldw	r3,0(r16)
80204abc:	9d44f03a 	xor	r2,r19,r21
80204ac0:	a18dc83a 	sub	r6,r20,r6
80204ac4:	1800683a 	jmp	r3
80204ac8:	80204a20 	cmpeqi	zero,r16,-32472
80204acc:	80204a20 	cmpeqi	zero,r16,-32472
80204ad0:	80204c6c 	andhi	zero,r16,33073
80204ad4:	80204a08 	cmpgei	zero,r16,-32472
80204ad8:	80204c6c 	andhi	zero,r16,33073
80204adc:	80204b68 	cmpgeui	zero,r16,33069
80204ae0:	80204c6c 	andhi	zero,r16,33073
80204ae4:	80204a08 	cmpgei	zero,r16,-32472
80204ae8:	80204a20 	cmpeqi	zero,r16,-32472
80204aec:	80204a20 	cmpeqi	zero,r16,-32472
80204af0:	80204b68 	cmpgeui	zero,r16,33069
80204af4:	80204a08 	cmpgei	zero,r16,-32472
80204af8:	80204c7c 	xorhi	zero,r16,33073
80204afc:	80204c7c 	xorhi	zero,r16,33073
80204b00:	80204c7c 	xorhi	zero,r16,33073
80204b04:	80204c94 	ori	zero,r16,33074
80204b08:	8809883a 	mov	r4,r17
80204b0c:	02050500 	call	80205050 <__clzsi2>
80204b10:	10fffec4 	addi	r3,r2,-5
80204b14:	10801d84 	addi	r2,r2,118
80204b18:	88e2983a 	sll	r17,r17,r3
80204b1c:	008dc83a 	sub	r6,zero,r2
80204b20:	000b883a 	mov	r5,zero
80204b24:	003f9906 	br	8020498c <__reset+0xfa1e498c>
80204b28:	014000c4 	movi	r5,3
80204b2c:	003f9706 	br	8020498c <__reset+0xfa1e498c>
80204b30:	9009883a 	mov	r4,r18
80204b34:	d9400015 	stw	r5,0(sp)
80204b38:	02050500 	call	80205050 <__clzsi2>
80204b3c:	10fffec4 	addi	r3,r2,-5
80204b40:	11801d84 	addi	r6,r2,118
80204b44:	90e4983a 	sll	r18,r18,r3
80204b48:	01a9c83a 	sub	r20,zero,r6
80204b4c:	0021883a 	mov	r16,zero
80204b50:	002f883a 	mov	r23,zero
80204b54:	d9400017 	ldw	r5,0(sp)
80204b58:	003f7e06 	br	80204954 <__reset+0xfa1e4954>
80204b5c:	04000304 	movi	r16,12
80204b60:	05c000c4 	movi	r23,3
80204b64:	003f7b06 	br	80204954 <__reset+0xfa1e4954>
80204b68:	01802034 	movhi	r6,128
80204b6c:	000f883a 	mov	r7,zero
80204b70:	31bfffc4 	addi	r6,r6,-1
80204b74:	013fffc4 	movi	r4,-1
80204b78:	003fac06 	br	80204a2c <__reset+0xfa1e4a2c>
80204b7c:	01400044 	movi	r5,1
80204b80:	2909c83a 	sub	r4,r5,r4
80204b84:	00c006c4 	movi	r3,27
80204b88:	19004b0e 	bge	r3,r4,80204cb8 <__divsf3+0x3cc>
80204b8c:	114e703a 	and	r7,r2,r5
80204b90:	0009883a 	mov	r4,zero
80204b94:	000d883a 	mov	r6,zero
80204b98:	003fa406 	br	80204a2c <__reset+0xfa1e4a2c>
80204b9c:	9006917a 	slli	r3,r18,5
80204ba0:	8822917a 	slli	r17,r17,5
80204ba4:	1c40372e 	bgeu	r3,r17,80204c84 <__divsf3+0x398>
80204ba8:	31bfffc4 	addi	r6,r6,-1
80204bac:	010006c4 	movi	r4,27
80204bb0:	000b883a 	mov	r5,zero
80204bb4:	180f883a 	mov	r7,r3
80204bb8:	294b883a 	add	r5,r5,r5
80204bbc:	18c7883a 	add	r3,r3,r3
80204bc0:	38000116 	blt	r7,zero,80204bc8 <__divsf3+0x2dc>
80204bc4:	1c400236 	bltu	r3,r17,80204bd0 <__divsf3+0x2e4>
80204bc8:	1c47c83a 	sub	r3,r3,r17
80204bcc:	29400054 	ori	r5,r5,1
80204bd0:	213fffc4 	addi	r4,r4,-1
80204bd4:	203ff71e 	bne	r4,zero,80204bb4 <__reset+0xfa1e4bb4>
80204bd8:	1806c03a 	cmpne	r3,r3,zero
80204bdc:	1962b03a 	or	r17,r3,r5
80204be0:	31001fc4 	addi	r4,r6,127
80204be4:	013fe50e 	bge	zero,r4,80204b7c <__reset+0xfa1e4b7c>
80204be8:	88c001cc 	andi	r3,r17,7
80204bec:	18000426 	beq	r3,zero,80204c00 <__divsf3+0x314>
80204bf0:	88c003cc 	andi	r3,r17,15
80204bf4:	01400104 	movi	r5,4
80204bf8:	19400126 	beq	r3,r5,80204c00 <__divsf3+0x314>
80204bfc:	8963883a 	add	r17,r17,r5
80204c00:	88c2002c 	andhi	r3,r17,2048
80204c04:	18000426 	beq	r3,zero,80204c18 <__divsf3+0x32c>
80204c08:	00fe0034 	movhi	r3,63488
80204c0c:	18ffffc4 	addi	r3,r3,-1
80204c10:	31002004 	addi	r4,r6,128
80204c14:	88e2703a 	and	r17,r17,r3
80204c18:	00c03f84 	movi	r3,254
80204c1c:	193f8016 	blt	r3,r4,80204a20 <__reset+0xfa1e4a20>
80204c20:	880c91ba 	slli	r6,r17,6
80204c24:	11c0004c 	andi	r7,r2,1
80204c28:	300cd27a 	srli	r6,r6,9
80204c2c:	003f7f06 	br	80204a2c <__reset+0xfa1e4a2c>
80204c30:	9080102c 	andhi	r2,r18,64
80204c34:	10000226 	beq	r2,zero,80204c40 <__divsf3+0x354>
80204c38:	8880102c 	andhi	r2,r17,64
80204c3c:	10001826 	beq	r2,zero,80204ca0 <__divsf3+0x3b4>
80204c40:	00802034 	movhi	r2,128
80204c44:	91801034 	orhi	r6,r18,64
80204c48:	10bfffc4 	addi	r2,r2,-1
80204c4c:	980f883a 	mov	r7,r19
80204c50:	308c703a 	and	r6,r6,r2
80204c54:	003fc706 	br	80204b74 <__reset+0xfa1e4b74>
80204c58:	008000c4 	movi	r2,3
80204c5c:	b8802d26 	beq	r23,r2,80204d14 <__divsf3+0x428>
80204c60:	00c00044 	movi	r3,1
80204c64:	b005883a 	mov	r2,r22
80204c68:	b8ffdd1e 	bne	r23,r3,80204be0 <__reset+0xfa1e4be0>
80204c6c:	11c0004c 	andi	r7,r2,1
80204c70:	0009883a 	mov	r4,zero
80204c74:	000d883a 	mov	r6,zero
80204c78:	003f6c06 	br	80204a2c <__reset+0xfa1e4a2c>
80204c7c:	9023883a 	mov	r17,r18
80204c80:	003f6406 	br	80204a14 <__reset+0xfa1e4a14>
80204c84:	1c47c83a 	sub	r3,r3,r17
80204c88:	01000684 	movi	r4,26
80204c8c:	01400044 	movi	r5,1
80204c90:	003fc806 	br	80204bb4 <__reset+0xfa1e4bb4>
80204c94:	9080102c 	andhi	r2,r18,64
80204c98:	103fe926 	beq	r2,zero,80204c40 <__reset+0xfa1e4c40>
80204c9c:	0023883a 	mov	r17,zero
80204ca0:	00802034 	movhi	r2,128
80204ca4:	89801034 	orhi	r6,r17,64
80204ca8:	10bfffc4 	addi	r2,r2,-1
80204cac:	a80f883a 	mov	r7,r21
80204cb0:	308c703a 	and	r6,r6,r2
80204cb4:	003faf06 	br	80204b74 <__reset+0xfa1e4b74>
80204cb8:	01c00804 	movi	r7,32
80204cbc:	390fc83a 	sub	r7,r7,r4
80204cc0:	89ce983a 	sll	r7,r17,r7
80204cc4:	890ad83a 	srl	r5,r17,r4
80204cc8:	380ec03a 	cmpne	r7,r7,zero
80204ccc:	29cab03a 	or	r5,r5,r7
80204cd0:	28c001cc 	andi	r3,r5,7
80204cd4:	18000426 	beq	r3,zero,80204ce8 <__divsf3+0x3fc>
80204cd8:	28c003cc 	andi	r3,r5,15
80204cdc:	01000104 	movi	r4,4
80204ce0:	19000126 	beq	r3,r4,80204ce8 <__divsf3+0x3fc>
80204ce4:	290b883a 	add	r5,r5,r4
80204ce8:	28c1002c 	andhi	r3,r5,1024
80204cec:	18000426 	beq	r3,zero,80204d00 <__divsf3+0x414>
80204cf0:	11c0004c 	andi	r7,r2,1
80204cf4:	01000044 	movi	r4,1
80204cf8:	000d883a 	mov	r6,zero
80204cfc:	003f4b06 	br	80204a2c <__reset+0xfa1e4a2c>
80204d00:	280a91ba 	slli	r5,r5,6
80204d04:	11c0004c 	andi	r7,r2,1
80204d08:	0009883a 	mov	r4,zero
80204d0c:	280cd27a 	srli	r6,r5,9
80204d10:	003f4606 	br	80204a2c <__reset+0xfa1e4a2c>
80204d14:	00802034 	movhi	r2,128
80204d18:	89801034 	orhi	r6,r17,64
80204d1c:	10bfffc4 	addi	r2,r2,-1
80204d20:	b00f883a 	mov	r7,r22
80204d24:	308c703a 	and	r6,r6,r2
80204d28:	003f9206 	br	80204b74 <__reset+0xfa1e4b74>

80204d2c <__floatsisf>:
80204d2c:	defffd04 	addi	sp,sp,-12
80204d30:	dfc00215 	stw	ra,8(sp)
80204d34:	dc400115 	stw	r17,4(sp)
80204d38:	dc000015 	stw	r16,0(sp)
80204d3c:	20003526 	beq	r4,zero,80204e14 <__floatsisf+0xe8>
80204d40:	2021883a 	mov	r16,r4
80204d44:	2022d7fa 	srli	r17,r4,31
80204d48:	20003616 	blt	r4,zero,80204e24 <__floatsisf+0xf8>
80204d4c:	8009883a 	mov	r4,r16
80204d50:	02050500 	call	80205050 <__clzsi2>
80204d54:	00c02784 	movi	r3,158
80204d58:	1887c83a 	sub	r3,r3,r2
80204d5c:	01002584 	movi	r4,150
80204d60:	20c01416 	blt	r4,r3,80204db4 <__floatsisf+0x88>
80204d64:	20c9c83a 	sub	r4,r4,r3
80204d68:	8120983a 	sll	r16,r16,r4
80204d6c:	00802034 	movhi	r2,128
80204d70:	10bfffc4 	addi	r2,r2,-1
80204d74:	8809883a 	mov	r4,r17
80204d78:	80a0703a 	and	r16,r16,r2
80204d7c:	18803fcc 	andi	r2,r3,255
80204d80:	100695fa 	slli	r3,r2,23
80204d84:	20803fcc 	andi	r2,r4,255
80204d88:	100897fa 	slli	r4,r2,31
80204d8c:	00802034 	movhi	r2,128
80204d90:	10bfffc4 	addi	r2,r2,-1
80204d94:	8084703a 	and	r2,r16,r2
80204d98:	10c4b03a 	or	r2,r2,r3
80204d9c:	1104b03a 	or	r2,r2,r4
80204da0:	dfc00217 	ldw	ra,8(sp)
80204da4:	dc400117 	ldw	r17,4(sp)
80204da8:	dc000017 	ldw	r16,0(sp)
80204dac:	dec00304 	addi	sp,sp,12
80204db0:	f800283a 	ret
80204db4:	01002644 	movi	r4,153
80204db8:	20c01c16 	blt	r4,r3,80204e2c <__floatsisf+0x100>
80204dbc:	20c9c83a 	sub	r4,r4,r3
80204dc0:	8120983a 	sll	r16,r16,r4
80204dc4:	013f0034 	movhi	r4,64512
80204dc8:	213fffc4 	addi	r4,r4,-1
80204dcc:	814001cc 	andi	r5,r16,7
80204dd0:	8108703a 	and	r4,r16,r4
80204dd4:	28000426 	beq	r5,zero,80204de8 <__floatsisf+0xbc>
80204dd8:	840003cc 	andi	r16,r16,15
80204ddc:	01400104 	movi	r5,4
80204de0:	81400126 	beq	r16,r5,80204de8 <__floatsisf+0xbc>
80204de4:	2149883a 	add	r4,r4,r5
80204de8:	2141002c 	andhi	r5,r4,1024
80204dec:	28000526 	beq	r5,zero,80204e04 <__floatsisf+0xd8>
80204df0:	00c027c4 	movi	r3,159
80204df4:	1887c83a 	sub	r3,r3,r2
80204df8:	00bf0034 	movhi	r2,64512
80204dfc:	10bfffc4 	addi	r2,r2,-1
80204e00:	2088703a 	and	r4,r4,r2
80204e04:	202091ba 	slli	r16,r4,6
80204e08:	8809883a 	mov	r4,r17
80204e0c:	8020d27a 	srli	r16,r16,9
80204e10:	003fda06 	br	80204d7c <__reset+0xfa1e4d7c>
80204e14:	0009883a 	mov	r4,zero
80204e18:	0007883a 	mov	r3,zero
80204e1c:	0021883a 	mov	r16,zero
80204e20:	003fd606 	br	80204d7c <__reset+0xfa1e4d7c>
80204e24:	0121c83a 	sub	r16,zero,r4
80204e28:	003fc806 	br	80204d4c <__reset+0xfa1e4d4c>
80204e2c:	01002e44 	movi	r4,185
80204e30:	20c9c83a 	sub	r4,r4,r3
80204e34:	01400144 	movi	r5,5
80204e38:	8108983a 	sll	r4,r16,r4
80204e3c:	288bc83a 	sub	r5,r5,r2
80204e40:	8160d83a 	srl	r16,r16,r5
80204e44:	2008c03a 	cmpne	r4,r4,zero
80204e48:	8120b03a 	or	r16,r16,r4
80204e4c:	003fdd06 	br	80204dc4 <__reset+0xfa1e4dc4>

80204e50 <__floatunsisf>:
80204e50:	defffe04 	addi	sp,sp,-8
80204e54:	dfc00115 	stw	ra,4(sp)
80204e58:	dc000015 	stw	r16,0(sp)
80204e5c:	20002c26 	beq	r4,zero,80204f10 <__floatunsisf+0xc0>
80204e60:	2021883a 	mov	r16,r4
80204e64:	02050500 	call	80205050 <__clzsi2>
80204e68:	00c02784 	movi	r3,158
80204e6c:	1887c83a 	sub	r3,r3,r2
80204e70:	01002584 	movi	r4,150
80204e74:	20c00f16 	blt	r4,r3,80204eb4 <__floatunsisf+0x64>
80204e78:	20c9c83a 	sub	r4,r4,r3
80204e7c:	8108983a 	sll	r4,r16,r4
80204e80:	00802034 	movhi	r2,128
80204e84:	10bfffc4 	addi	r2,r2,-1
80204e88:	2088703a 	and	r4,r4,r2
80204e8c:	18803fcc 	andi	r2,r3,255
80204e90:	100695fa 	slli	r3,r2,23
80204e94:	00802034 	movhi	r2,128
80204e98:	10bfffc4 	addi	r2,r2,-1
80204e9c:	2084703a 	and	r2,r4,r2
80204ea0:	10c4b03a 	or	r2,r2,r3
80204ea4:	dfc00117 	ldw	ra,4(sp)
80204ea8:	dc000017 	ldw	r16,0(sp)
80204eac:	dec00204 	addi	sp,sp,8
80204eb0:	f800283a 	ret
80204eb4:	01002644 	movi	r4,153
80204eb8:	20c01816 	blt	r4,r3,80204f1c <__floatunsisf+0xcc>
80204ebc:	20c9c83a 	sub	r4,r4,r3
80204ec0:	8108983a 	sll	r4,r16,r4
80204ec4:	017f0034 	movhi	r5,64512
80204ec8:	297fffc4 	addi	r5,r5,-1
80204ecc:	218001cc 	andi	r6,r4,7
80204ed0:	214a703a 	and	r5,r4,r5
80204ed4:	30000426 	beq	r6,zero,80204ee8 <__floatunsisf+0x98>
80204ed8:	210003cc 	andi	r4,r4,15
80204edc:	01800104 	movi	r6,4
80204ee0:	21800126 	beq	r4,r6,80204ee8 <__floatunsisf+0x98>
80204ee4:	298b883a 	add	r5,r5,r6
80204ee8:	2901002c 	andhi	r4,r5,1024
80204eec:	20000526 	beq	r4,zero,80204f04 <__floatunsisf+0xb4>
80204ef0:	00c027c4 	movi	r3,159
80204ef4:	1887c83a 	sub	r3,r3,r2
80204ef8:	00bf0034 	movhi	r2,64512
80204efc:	10bfffc4 	addi	r2,r2,-1
80204f00:	288a703a 	and	r5,r5,r2
80204f04:	280891ba 	slli	r4,r5,6
80204f08:	2008d27a 	srli	r4,r4,9
80204f0c:	003fdf06 	br	80204e8c <__reset+0xfa1e4e8c>
80204f10:	0007883a 	mov	r3,zero
80204f14:	0009883a 	mov	r4,zero
80204f18:	003fdc06 	br	80204e8c <__reset+0xfa1e4e8c>
80204f1c:	01402e44 	movi	r5,185
80204f20:	28cbc83a 	sub	r5,r5,r3
80204f24:	01000144 	movi	r4,5
80204f28:	2089c83a 	sub	r4,r4,r2
80204f2c:	814a983a 	sll	r5,r16,r5
80204f30:	8108d83a 	srl	r4,r16,r4
80204f34:	2820c03a 	cmpne	r16,r5,zero
80204f38:	2408b03a 	or	r4,r4,r16
80204f3c:	003fe106 	br	80204ec4 <__reset+0xfa1e4ec4>

80204f40 <__extendsfdf2>:
80204f40:	200ad5fa 	srli	r5,r4,23
80204f44:	defffd04 	addi	sp,sp,-12
80204f48:	dc400115 	stw	r17,4(sp)
80204f4c:	29403fcc 	andi	r5,r5,255
80204f50:	29800044 	addi	r6,r5,1
80204f54:	04402034 	movhi	r17,128
80204f58:	dc000015 	stw	r16,0(sp)
80204f5c:	8c7fffc4 	addi	r17,r17,-1
80204f60:	dfc00215 	stw	ra,8(sp)
80204f64:	31803fcc 	andi	r6,r6,255
80204f68:	00800044 	movi	r2,1
80204f6c:	8922703a 	and	r17,r17,r4
80204f70:	2020d7fa 	srli	r16,r4,31
80204f74:	1180110e 	bge	r2,r6,80204fbc <__extendsfdf2+0x7c>
80204f78:	880cd0fa 	srli	r6,r17,3
80204f7c:	8822977a 	slli	r17,r17,29
80204f80:	2940e004 	addi	r5,r5,896
80204f84:	2941ffcc 	andi	r5,r5,2047
80204f88:	2804953a 	slli	r2,r5,20
80204f8c:	01400434 	movhi	r5,16
80204f90:	800697fa 	slli	r3,r16,31
80204f94:	297fffc4 	addi	r5,r5,-1
80204f98:	314a703a 	and	r5,r6,r5
80204f9c:	288ab03a 	or	r5,r5,r2
80204fa0:	28c6b03a 	or	r3,r5,r3
80204fa4:	8805883a 	mov	r2,r17
80204fa8:	dfc00217 	ldw	ra,8(sp)
80204fac:	dc400117 	ldw	r17,4(sp)
80204fb0:	dc000017 	ldw	r16,0(sp)
80204fb4:	dec00304 	addi	sp,sp,12
80204fb8:	f800283a 	ret
80204fbc:	2800111e 	bne	r5,zero,80205004 <__extendsfdf2+0xc4>
80204fc0:	88001c26 	beq	r17,zero,80205034 <__extendsfdf2+0xf4>
80204fc4:	8809883a 	mov	r4,r17
80204fc8:	02050500 	call	80205050 <__clzsi2>
80204fcc:	00c00284 	movi	r3,10
80204fd0:	18801b16 	blt	r3,r2,80205040 <__extendsfdf2+0x100>
80204fd4:	018002c4 	movi	r6,11
80204fd8:	308dc83a 	sub	r6,r6,r2
80204fdc:	11000544 	addi	r4,r2,21
80204fe0:	8986d83a 	srl	r3,r17,r6
80204fe4:	8922983a 	sll	r17,r17,r4
80204fe8:	0180e244 	movi	r6,905
80204fec:	01400434 	movhi	r5,16
80204ff0:	3085c83a 	sub	r2,r6,r2
80204ff4:	297fffc4 	addi	r5,r5,-1
80204ff8:	194c703a 	and	r6,r3,r5
80204ffc:	1141ffcc 	andi	r5,r2,2047
80205000:	003fe006 	br	80204f84 <__reset+0xfa1e4f84>
80205004:	88000826 	beq	r17,zero,80205028 <__extendsfdf2+0xe8>
80205008:	880cd0fa 	srli	r6,r17,3
8020500c:	00800434 	movhi	r2,16
80205010:	10bfffc4 	addi	r2,r2,-1
80205014:	31800234 	orhi	r6,r6,8
80205018:	8822977a 	slli	r17,r17,29
8020501c:	308c703a 	and	r6,r6,r2
80205020:	0141ffc4 	movi	r5,2047
80205024:	003fd706 	br	80204f84 <__reset+0xfa1e4f84>
80205028:	0141ffc4 	movi	r5,2047
8020502c:	000d883a 	mov	r6,zero
80205030:	003fd406 	br	80204f84 <__reset+0xfa1e4f84>
80205034:	000b883a 	mov	r5,zero
80205038:	000d883a 	mov	r6,zero
8020503c:	003fd106 	br	80204f84 <__reset+0xfa1e4f84>
80205040:	11bffd44 	addi	r6,r2,-11
80205044:	8986983a 	sll	r3,r17,r6
80205048:	0023883a 	mov	r17,zero
8020504c:	003fe606 	br	80204fe8 <__reset+0xfa1e4fe8>

80205050 <__clzsi2>:
80205050:	00bfffd4 	movui	r2,65535
80205054:	11000536 	bltu	r2,r4,8020506c <__clzsi2+0x1c>
80205058:	00803fc4 	movi	r2,255
8020505c:	11000f36 	bltu	r2,r4,8020509c <__clzsi2+0x4c>
80205060:	00800804 	movi	r2,32
80205064:	0007883a 	mov	r3,zero
80205068:	00000506 	br	80205080 <__clzsi2+0x30>
8020506c:	00804034 	movhi	r2,256
80205070:	10bfffc4 	addi	r2,r2,-1
80205074:	11000c2e 	bgeu	r2,r4,802050a8 <__clzsi2+0x58>
80205078:	00800204 	movi	r2,8
8020507c:	00c00604 	movi	r3,24
80205080:	20c8d83a 	srl	r4,r4,r3
80205084:	00e008b4 	movhi	r3,32802
80205088:	18ec7bc4 	addi	r3,r3,-19985
8020508c:	1909883a 	add	r4,r3,r4
80205090:	20c00003 	ldbu	r3,0(r4)
80205094:	10c5c83a 	sub	r2,r2,r3
80205098:	f800283a 	ret
8020509c:	00800604 	movi	r2,24
802050a0:	00c00204 	movi	r3,8
802050a4:	003ff606 	br	80205080 <__reset+0xfa1e5080>
802050a8:	00800404 	movi	r2,16
802050ac:	1007883a 	mov	r3,r2
802050b0:	003ff306 	br	80205080 <__reset+0xfa1e5080>

802050b4 <_fwrite_r>:
802050b4:	defff504 	addi	sp,sp,-44
802050b8:	dc800815 	stw	r18,32(sp)
802050bc:	39a5383a 	mul	r18,r7,r6
802050c0:	d8800304 	addi	r2,sp,12
802050c4:	d8800015 	stw	r2,0(sp)
802050c8:	00800044 	movi	r2,1
802050cc:	dcc00915 	stw	r19,36(sp)
802050d0:	dc400715 	stw	r17,28(sp)
802050d4:	dc000615 	stw	r16,24(sp)
802050d8:	d9400315 	stw	r5,12(sp)
802050dc:	dfc00a15 	stw	ra,40(sp)
802050e0:	dc800415 	stw	r18,16(sp)
802050e4:	dc800215 	stw	r18,8(sp)
802050e8:	d8800115 	stw	r2,4(sp)
802050ec:	3027883a 	mov	r19,r6
802050f0:	3821883a 	mov	r16,r7
802050f4:	2023883a 	mov	r17,r4
802050f8:	d9400b17 	ldw	r5,44(sp)
802050fc:	20000226 	beq	r4,zero,80205108 <_fwrite_r+0x54>
80205100:	20800e17 	ldw	r2,56(r4)
80205104:	10001a26 	beq	r2,zero,80205170 <_fwrite_r+0xbc>
80205108:	2880030b 	ldhu	r2,12(r5)
8020510c:	10c8000c 	andi	r3,r2,8192
80205110:	1800061e 	bne	r3,zero,8020512c <_fwrite_r+0x78>
80205114:	29001917 	ldw	r4,100(r5)
80205118:	00f7ffc4 	movi	r3,-8193
8020511c:	10880014 	ori	r2,r2,8192
80205120:	20c6703a 	and	r3,r4,r3
80205124:	2880030d 	sth	r2,12(r5)
80205128:	28c01915 	stw	r3,100(r5)
8020512c:	d80d883a 	mov	r6,sp
80205130:	8809883a 	mov	r4,r17
80205134:	020be980 	call	8020be98 <__sfvwrite_r>
80205138:	10000b26 	beq	r2,zero,80205168 <_fwrite_r+0xb4>
8020513c:	d9000217 	ldw	r4,8(sp)
80205140:	980b883a 	mov	r5,r19
80205144:	9109c83a 	sub	r4,r18,r4
80205148:	0212a580 	call	80212a58 <__udivsi3>
8020514c:	dfc00a17 	ldw	ra,40(sp)
80205150:	dcc00917 	ldw	r19,36(sp)
80205154:	dc800817 	ldw	r18,32(sp)
80205158:	dc400717 	ldw	r17,28(sp)
8020515c:	dc000617 	ldw	r16,24(sp)
80205160:	dec00b04 	addi	sp,sp,44
80205164:	f800283a 	ret
80205168:	8005883a 	mov	r2,r16
8020516c:	003ff706 	br	8020514c <__reset+0xfa1e514c>
80205170:	d9400515 	stw	r5,20(sp)
80205174:	020ba140 	call	8020ba14 <__sinit>
80205178:	d9400517 	ldw	r5,20(sp)
8020517c:	003fe206 	br	80205108 <__reset+0xfa1e5108>

80205180 <fwrite>:
80205180:	defffe04 	addi	sp,sp,-8
80205184:	00a008b4 	movhi	r2,32802
80205188:	d9c00015 	stw	r7,0(sp)
8020518c:	10b50504 	addi	r2,r2,-11244
80205190:	300f883a 	mov	r7,r6
80205194:	280d883a 	mov	r6,r5
80205198:	200b883a 	mov	r5,r4
8020519c:	11000017 	ldw	r4,0(r2)
802051a0:	dfc00115 	stw	ra,4(sp)
802051a4:	02050b40 	call	802050b4 <_fwrite_r>
802051a8:	dfc00117 	ldw	ra,4(sp)
802051ac:	dec00204 	addi	sp,sp,8
802051b0:	f800283a 	ret

802051b4 <memcpy>:
802051b4:	defffd04 	addi	sp,sp,-12
802051b8:	dfc00215 	stw	ra,8(sp)
802051bc:	dc400115 	stw	r17,4(sp)
802051c0:	dc000015 	stw	r16,0(sp)
802051c4:	00c003c4 	movi	r3,15
802051c8:	2005883a 	mov	r2,r4
802051cc:	1980452e 	bgeu	r3,r6,802052e4 <memcpy+0x130>
802051d0:	2906b03a 	or	r3,r5,r4
802051d4:	18c000cc 	andi	r3,r3,3
802051d8:	1800441e 	bne	r3,zero,802052ec <memcpy+0x138>
802051dc:	347ffc04 	addi	r17,r6,-16
802051e0:	8822d13a 	srli	r17,r17,4
802051e4:	28c00104 	addi	r3,r5,4
802051e8:	23400104 	addi	r13,r4,4
802051ec:	8820913a 	slli	r16,r17,4
802051f0:	2b000204 	addi	r12,r5,8
802051f4:	22c00204 	addi	r11,r4,8
802051f8:	84000504 	addi	r16,r16,20
802051fc:	2a800304 	addi	r10,r5,12
80205200:	22400304 	addi	r9,r4,12
80205204:	2c21883a 	add	r16,r5,r16
80205208:	2811883a 	mov	r8,r5
8020520c:	200f883a 	mov	r7,r4
80205210:	41000017 	ldw	r4,0(r8)
80205214:	1fc00017 	ldw	ra,0(r3)
80205218:	63c00017 	ldw	r15,0(r12)
8020521c:	39000015 	stw	r4,0(r7)
80205220:	53800017 	ldw	r14,0(r10)
80205224:	6fc00015 	stw	ra,0(r13)
80205228:	5bc00015 	stw	r15,0(r11)
8020522c:	4b800015 	stw	r14,0(r9)
80205230:	18c00404 	addi	r3,r3,16
80205234:	39c00404 	addi	r7,r7,16
80205238:	42000404 	addi	r8,r8,16
8020523c:	6b400404 	addi	r13,r13,16
80205240:	63000404 	addi	r12,r12,16
80205244:	5ac00404 	addi	r11,r11,16
80205248:	52800404 	addi	r10,r10,16
8020524c:	4a400404 	addi	r9,r9,16
80205250:	1c3fef1e 	bne	r3,r16,80205210 <__reset+0xfa1e5210>
80205254:	89c00044 	addi	r7,r17,1
80205258:	380e913a 	slli	r7,r7,4
8020525c:	310003cc 	andi	r4,r6,15
80205260:	02c000c4 	movi	r11,3
80205264:	11c7883a 	add	r3,r2,r7
80205268:	29cb883a 	add	r5,r5,r7
8020526c:	5900212e 	bgeu	r11,r4,802052f4 <memcpy+0x140>
80205270:	1813883a 	mov	r9,r3
80205274:	2811883a 	mov	r8,r5
80205278:	200f883a 	mov	r7,r4
8020527c:	42800017 	ldw	r10,0(r8)
80205280:	4a400104 	addi	r9,r9,4
80205284:	39ffff04 	addi	r7,r7,-4
80205288:	4abfff15 	stw	r10,-4(r9)
8020528c:	42000104 	addi	r8,r8,4
80205290:	59fffa36 	bltu	r11,r7,8020527c <__reset+0xfa1e527c>
80205294:	213fff04 	addi	r4,r4,-4
80205298:	2008d0ba 	srli	r4,r4,2
8020529c:	318000cc 	andi	r6,r6,3
802052a0:	21000044 	addi	r4,r4,1
802052a4:	2109883a 	add	r4,r4,r4
802052a8:	2109883a 	add	r4,r4,r4
802052ac:	1907883a 	add	r3,r3,r4
802052b0:	290b883a 	add	r5,r5,r4
802052b4:	30000626 	beq	r6,zero,802052d0 <memcpy+0x11c>
802052b8:	198d883a 	add	r6,r3,r6
802052bc:	29c00003 	ldbu	r7,0(r5)
802052c0:	18c00044 	addi	r3,r3,1
802052c4:	29400044 	addi	r5,r5,1
802052c8:	19ffffc5 	stb	r7,-1(r3)
802052cc:	19bffb1e 	bne	r3,r6,802052bc <__reset+0xfa1e52bc>
802052d0:	dfc00217 	ldw	ra,8(sp)
802052d4:	dc400117 	ldw	r17,4(sp)
802052d8:	dc000017 	ldw	r16,0(sp)
802052dc:	dec00304 	addi	sp,sp,12
802052e0:	f800283a 	ret
802052e4:	2007883a 	mov	r3,r4
802052e8:	003ff206 	br	802052b4 <__reset+0xfa1e52b4>
802052ec:	2007883a 	mov	r3,r4
802052f0:	003ff106 	br	802052b8 <__reset+0xfa1e52b8>
802052f4:	200d883a 	mov	r6,r4
802052f8:	003fee06 	br	802052b4 <__reset+0xfa1e52b4>

802052fc <_printf_r>:
802052fc:	defffd04 	addi	sp,sp,-12
80205300:	2805883a 	mov	r2,r5
80205304:	dfc00015 	stw	ra,0(sp)
80205308:	d9800115 	stw	r6,4(sp)
8020530c:	d9c00215 	stw	r7,8(sp)
80205310:	21400217 	ldw	r5,8(r4)
80205314:	d9c00104 	addi	r7,sp,4
80205318:	100d883a 	mov	r6,r2
8020531c:	02077700 	call	80207770 <___vfprintf_internal_r>
80205320:	dfc00017 	ldw	ra,0(sp)
80205324:	dec00304 	addi	sp,sp,12
80205328:	f800283a 	ret

8020532c <printf>:
8020532c:	defffc04 	addi	sp,sp,-16
80205330:	dfc00015 	stw	ra,0(sp)
80205334:	d9400115 	stw	r5,4(sp)
80205338:	d9800215 	stw	r6,8(sp)
8020533c:	d9c00315 	stw	r7,12(sp)
80205340:	00a008b4 	movhi	r2,32802
80205344:	10b50504 	addi	r2,r2,-11244
80205348:	10800017 	ldw	r2,0(r2)
8020534c:	200b883a 	mov	r5,r4
80205350:	d9800104 	addi	r6,sp,4
80205354:	11000217 	ldw	r4,8(r2)
80205358:	02099680 	call	80209968 <__vfprintf_internal>
8020535c:	dfc00017 	ldw	ra,0(sp)
80205360:	dec00404 	addi	sp,sp,16
80205364:	f800283a 	ret

80205368 <_puts_r>:
80205368:	defff604 	addi	sp,sp,-40
8020536c:	dc000715 	stw	r16,28(sp)
80205370:	2021883a 	mov	r16,r4
80205374:	2809883a 	mov	r4,r5
80205378:	dc400815 	stw	r17,32(sp)
8020537c:	dfc00915 	stw	ra,36(sp)
80205380:	2823883a 	mov	r17,r5
80205384:	02055000 	call	80205500 <strlen>
80205388:	10c00044 	addi	r3,r2,1
8020538c:	d8800115 	stw	r2,4(sp)
80205390:	00a008b4 	movhi	r2,32802
80205394:	10acbd04 	addi	r2,r2,-19724
80205398:	d8800215 	stw	r2,8(sp)
8020539c:	00800044 	movi	r2,1
802053a0:	d8800315 	stw	r2,12(sp)
802053a4:	00800084 	movi	r2,2
802053a8:	dc400015 	stw	r17,0(sp)
802053ac:	d8c00615 	stw	r3,24(sp)
802053b0:	dec00415 	stw	sp,16(sp)
802053b4:	d8800515 	stw	r2,20(sp)
802053b8:	80000226 	beq	r16,zero,802053c4 <_puts_r+0x5c>
802053bc:	80800e17 	ldw	r2,56(r16)
802053c0:	10001426 	beq	r2,zero,80205414 <_puts_r+0xac>
802053c4:	81400217 	ldw	r5,8(r16)
802053c8:	2880030b 	ldhu	r2,12(r5)
802053cc:	10c8000c 	andi	r3,r2,8192
802053d0:	1800061e 	bne	r3,zero,802053ec <_puts_r+0x84>
802053d4:	29001917 	ldw	r4,100(r5)
802053d8:	00f7ffc4 	movi	r3,-8193
802053dc:	10880014 	ori	r2,r2,8192
802053e0:	20c6703a 	and	r3,r4,r3
802053e4:	2880030d 	sth	r2,12(r5)
802053e8:	28c01915 	stw	r3,100(r5)
802053ec:	d9800404 	addi	r6,sp,16
802053f0:	8009883a 	mov	r4,r16
802053f4:	020be980 	call	8020be98 <__sfvwrite_r>
802053f8:	1000091e 	bne	r2,zero,80205420 <_puts_r+0xb8>
802053fc:	00800284 	movi	r2,10
80205400:	dfc00917 	ldw	ra,36(sp)
80205404:	dc400817 	ldw	r17,32(sp)
80205408:	dc000717 	ldw	r16,28(sp)
8020540c:	dec00a04 	addi	sp,sp,40
80205410:	f800283a 	ret
80205414:	8009883a 	mov	r4,r16
80205418:	020ba140 	call	8020ba14 <__sinit>
8020541c:	003fe906 	br	802053c4 <__reset+0xfa1e53c4>
80205420:	00bfffc4 	movi	r2,-1
80205424:	003ff606 	br	80205400 <__reset+0xfa1e5400>

80205428 <puts>:
80205428:	00a008b4 	movhi	r2,32802
8020542c:	10b50504 	addi	r2,r2,-11244
80205430:	200b883a 	mov	r5,r4
80205434:	11000017 	ldw	r4,0(r2)
80205438:	02053681 	jmpi	80205368 <_puts_r>

8020543c <_sprintf_r>:
8020543c:	deffe404 	addi	sp,sp,-112
80205440:	2807883a 	mov	r3,r5
80205444:	dfc01a15 	stw	ra,104(sp)
80205448:	d9c01b15 	stw	r7,108(sp)
8020544c:	00a00034 	movhi	r2,32768
80205450:	10bfffc4 	addi	r2,r2,-1
80205454:	02008204 	movi	r8,520
80205458:	d8800215 	stw	r2,8(sp)
8020545c:	d8800515 	stw	r2,20(sp)
80205460:	d9c01b04 	addi	r7,sp,108
80205464:	d80b883a 	mov	r5,sp
80205468:	00bfffc4 	movi	r2,-1
8020546c:	d8c00015 	stw	r3,0(sp)
80205470:	d8c00415 	stw	r3,16(sp)
80205474:	da00030d 	sth	r8,12(sp)
80205478:	d880038d 	sth	r2,14(sp)
8020547c:	02055980 	call	80205598 <___svfprintf_internal_r>
80205480:	d8c00017 	ldw	r3,0(sp)
80205484:	18000005 	stb	zero,0(r3)
80205488:	dfc01a17 	ldw	ra,104(sp)
8020548c:	dec01c04 	addi	sp,sp,112
80205490:	f800283a 	ret

80205494 <sprintf>:
80205494:	deffe304 	addi	sp,sp,-116
80205498:	2007883a 	mov	r3,r4
8020549c:	dfc01a15 	stw	ra,104(sp)
802054a0:	d9801b15 	stw	r6,108(sp)
802054a4:	d9c01c15 	stw	r7,112(sp)
802054a8:	012008b4 	movhi	r4,32802
802054ac:	21350504 	addi	r4,r4,-11244
802054b0:	21000017 	ldw	r4,0(r4)
802054b4:	00a00034 	movhi	r2,32768
802054b8:	10bfffc4 	addi	r2,r2,-1
802054bc:	280d883a 	mov	r6,r5
802054c0:	02008204 	movi	r8,520
802054c4:	d8800215 	stw	r2,8(sp)
802054c8:	d8800515 	stw	r2,20(sp)
802054cc:	d9c01b04 	addi	r7,sp,108
802054d0:	d80b883a 	mov	r5,sp
802054d4:	00bfffc4 	movi	r2,-1
802054d8:	d8c00015 	stw	r3,0(sp)
802054dc:	d8c00415 	stw	r3,16(sp)
802054e0:	da00030d 	sth	r8,12(sp)
802054e4:	d880038d 	sth	r2,14(sp)
802054e8:	02055980 	call	80205598 <___svfprintf_internal_r>
802054ec:	d8c00017 	ldw	r3,0(sp)
802054f0:	18000005 	stb	zero,0(r3)
802054f4:	dfc01a17 	ldw	ra,104(sp)
802054f8:	dec01d04 	addi	sp,sp,116
802054fc:	f800283a 	ret

80205500 <strlen>:
80205500:	208000cc 	andi	r2,r4,3
80205504:	10002026 	beq	r2,zero,80205588 <strlen+0x88>
80205508:	20800007 	ldb	r2,0(r4)
8020550c:	10002026 	beq	r2,zero,80205590 <strlen+0x90>
80205510:	2005883a 	mov	r2,r4
80205514:	00000206 	br	80205520 <strlen+0x20>
80205518:	10c00007 	ldb	r3,0(r2)
8020551c:	18001826 	beq	r3,zero,80205580 <strlen+0x80>
80205520:	10800044 	addi	r2,r2,1
80205524:	10c000cc 	andi	r3,r2,3
80205528:	183ffb1e 	bne	r3,zero,80205518 <__reset+0xfa1e5518>
8020552c:	10c00017 	ldw	r3,0(r2)
80205530:	01ffbff4 	movhi	r7,65279
80205534:	39ffbfc4 	addi	r7,r7,-257
80205538:	00ca303a 	nor	r5,zero,r3
8020553c:	01a02074 	movhi	r6,32897
80205540:	19c7883a 	add	r3,r3,r7
80205544:	31a02004 	addi	r6,r6,-32640
80205548:	1946703a 	and	r3,r3,r5
8020554c:	1986703a 	and	r3,r3,r6
80205550:	1800091e 	bne	r3,zero,80205578 <strlen+0x78>
80205554:	10800104 	addi	r2,r2,4
80205558:	10c00017 	ldw	r3,0(r2)
8020555c:	19cb883a 	add	r5,r3,r7
80205560:	00c6303a 	nor	r3,zero,r3
80205564:	28c6703a 	and	r3,r5,r3
80205568:	1986703a 	and	r3,r3,r6
8020556c:	183ff926 	beq	r3,zero,80205554 <__reset+0xfa1e5554>
80205570:	00000106 	br	80205578 <strlen+0x78>
80205574:	10800044 	addi	r2,r2,1
80205578:	10c00007 	ldb	r3,0(r2)
8020557c:	183ffd1e 	bne	r3,zero,80205574 <__reset+0xfa1e5574>
80205580:	1105c83a 	sub	r2,r2,r4
80205584:	f800283a 	ret
80205588:	2005883a 	mov	r2,r4
8020558c:	003fe706 	br	8020552c <__reset+0xfa1e552c>
80205590:	0005883a 	mov	r2,zero
80205594:	f800283a 	ret

80205598 <___svfprintf_internal_r>:
80205598:	deffb704 	addi	sp,sp,-292
8020559c:	dfc04815 	stw	ra,288(sp)
802055a0:	ddc04615 	stw	r23,280(sp)
802055a4:	d9402c15 	stw	r5,176(sp)
802055a8:	d9003915 	stw	r4,228(sp)
802055ac:	302f883a 	mov	r23,r6
802055b0:	d9c02d15 	stw	r7,180(sp)
802055b4:	df004715 	stw	fp,284(sp)
802055b8:	dd804515 	stw	r22,276(sp)
802055bc:	dd404415 	stw	r21,272(sp)
802055c0:	dd004315 	stw	r20,268(sp)
802055c4:	dcc04215 	stw	r19,264(sp)
802055c8:	dc804115 	stw	r18,260(sp)
802055cc:	dc404015 	stw	r17,256(sp)
802055d0:	dc003f15 	stw	r16,252(sp)
802055d4:	020c5880 	call	8020c588 <_localeconv_r>
802055d8:	10800017 	ldw	r2,0(r2)
802055dc:	1009883a 	mov	r4,r2
802055e0:	d8803415 	stw	r2,208(sp)
802055e4:	02055000 	call	80205500 <strlen>
802055e8:	d8c02c17 	ldw	r3,176(sp)
802055ec:	d8803815 	stw	r2,224(sp)
802055f0:	1880030b 	ldhu	r2,12(r3)
802055f4:	1080200c 	andi	r2,r2,128
802055f8:	10000226 	beq	r2,zero,80205604 <___svfprintf_internal_r+0x6c>
802055fc:	18800417 	ldw	r2,16(r3)
80205600:	10067f26 	beq	r2,zero,80207000 <___svfprintf_internal_r+0x1a68>
80205604:	dcc03917 	ldw	r19,228(sp)
80205608:	d8c00404 	addi	r3,sp,16
8020560c:	056008b4 	movhi	r21,32802
80205610:	d9001e04 	addi	r4,sp,120
80205614:	ad6cce84 	addi	r21,r21,-19654
80205618:	d8c01e15 	stw	r3,120(sp)
8020561c:	d8002015 	stw	zero,128(sp)
80205620:	d8001f15 	stw	zero,124(sp)
80205624:	d8003315 	stw	zero,204(sp)
80205628:	d8003615 	stw	zero,216(sp)
8020562c:	d8003715 	stw	zero,220(sp)
80205630:	1811883a 	mov	r8,r3
80205634:	d8003a15 	stw	zero,232(sp)
80205638:	d8003b15 	stw	zero,236(sp)
8020563c:	d8002f15 	stw	zero,188(sp)
80205640:	d9002815 	stw	r4,160(sp)
80205644:	b8800007 	ldb	r2,0(r23)
80205648:	10026726 	beq	r2,zero,80205fe8 <___svfprintf_internal_r+0xa50>
8020564c:	00c00944 	movi	r3,37
80205650:	b821883a 	mov	r16,r23
80205654:	10c0021e 	bne	r2,r3,80205660 <___svfprintf_internal_r+0xc8>
80205658:	00001406 	br	802056ac <___svfprintf_internal_r+0x114>
8020565c:	10c00326 	beq	r2,r3,8020566c <___svfprintf_internal_r+0xd4>
80205660:	84000044 	addi	r16,r16,1
80205664:	80800007 	ldb	r2,0(r16)
80205668:	103ffc1e 	bne	r2,zero,8020565c <__reset+0xfa1e565c>
8020566c:	85e3c83a 	sub	r17,r16,r23
80205670:	88000e26 	beq	r17,zero,802056ac <___svfprintf_internal_r+0x114>
80205674:	d8c02017 	ldw	r3,128(sp)
80205678:	d8801f17 	ldw	r2,124(sp)
8020567c:	45c00015 	stw	r23,0(r8)
80205680:	1c47883a 	add	r3,r3,r17
80205684:	10800044 	addi	r2,r2,1
80205688:	d8c02015 	stw	r3,128(sp)
8020568c:	44400115 	stw	r17,4(r8)
80205690:	d8801f15 	stw	r2,124(sp)
80205694:	00c001c4 	movi	r3,7
80205698:	18809716 	blt	r3,r2,802058f8 <___svfprintf_internal_r+0x360>
8020569c:	42000204 	addi	r8,r8,8
802056a0:	d9402f17 	ldw	r5,188(sp)
802056a4:	2c4b883a 	add	r5,r5,r17
802056a8:	d9402f15 	stw	r5,188(sp)
802056ac:	80800007 	ldb	r2,0(r16)
802056b0:	10009826 	beq	r2,zero,80205914 <___svfprintf_internal_r+0x37c>
802056b4:	84400047 	ldb	r17,1(r16)
802056b8:	00bfffc4 	movi	r2,-1
802056bc:	85c00044 	addi	r23,r16,1
802056c0:	d8002785 	stb	zero,158(sp)
802056c4:	0007883a 	mov	r3,zero
802056c8:	000f883a 	mov	r7,zero
802056cc:	d8802915 	stw	r2,164(sp)
802056d0:	d8003115 	stw	zero,196(sp)
802056d4:	0025883a 	mov	r18,zero
802056d8:	01401604 	movi	r5,88
802056dc:	01800244 	movi	r6,9
802056e0:	02800a84 	movi	r10,42
802056e4:	02401b04 	movi	r9,108
802056e8:	bdc00044 	addi	r23,r23,1
802056ec:	88bff804 	addi	r2,r17,-32
802056f0:	2882f036 	bltu	r5,r2,802062b4 <___svfprintf_internal_r+0xd1c>
802056f4:	100490ba 	slli	r2,r2,2
802056f8:	01200834 	movhi	r4,32800
802056fc:	2115c304 	addi	r4,r4,22284
80205700:	1105883a 	add	r2,r2,r4
80205704:	10800017 	ldw	r2,0(r2)
80205708:	1000683a 	jmp	r2
8020570c:	8020621c 	xori	zero,r16,33160
80205710:	802062b4 	orhi	zero,r16,33162
80205714:	802062b4 	orhi	zero,r16,33162
80205718:	80206210 	cmplti	zero,r16,-32376
8020571c:	802062b4 	orhi	zero,r16,33162
80205720:	802062b4 	orhi	zero,r16,33162
80205724:	802062b4 	orhi	zero,r16,33162
80205728:	802062b4 	orhi	zero,r16,33162
8020572c:	802062b4 	orhi	zero,r16,33162
80205730:	802062b4 	orhi	zero,r16,33162
80205734:	80205970 	cmpltui	zero,r16,33125
80205738:	8020614c 	andi	zero,r16,33157
8020573c:	802062b4 	orhi	zero,r16,33162
80205740:	80205880 	call	88020588 <__reset+0x2000588>
80205744:	80205998 	cmpnei	zero,r16,-32410
80205748:	802062b4 	orhi	zero,r16,33162
8020574c:	80205a0c 	andi	zero,r16,33128
80205750:	802059d8 	cmpnei	zero,r16,-32409
80205754:	802059d8 	cmpnei	zero,r16,-32409
80205758:	802059d8 	cmpnei	zero,r16,-32409
8020575c:	802059d8 	cmpnei	zero,r16,-32409
80205760:	802059d8 	cmpnei	zero,r16,-32409
80205764:	802059d8 	cmpnei	zero,r16,-32409
80205768:	802059d8 	cmpnei	zero,r16,-32409
8020576c:	802059d8 	cmpnei	zero,r16,-32409
80205770:	802059d8 	cmpnei	zero,r16,-32409
80205774:	802062b4 	orhi	zero,r16,33162
80205778:	802062b4 	orhi	zero,r16,33162
8020577c:	802062b4 	orhi	zero,r16,33162
80205780:	802062b4 	orhi	zero,r16,33162
80205784:	802062b4 	orhi	zero,r16,33162
80205788:	802062b4 	orhi	zero,r16,33162
8020578c:	802062b4 	orhi	zero,r16,33162
80205790:	802062b4 	orhi	zero,r16,33162
80205794:	802062b4 	orhi	zero,r16,33162
80205798:	802062b4 	orhi	zero,r16,33162
8020579c:	80205ac4 	addi	zero,r16,-32405
802057a0:	80205a18 	cmpnei	zero,r16,-32408
802057a4:	802062b4 	orhi	zero,r16,33162
802057a8:	80205a18 	cmpnei	zero,r16,-32408
802057ac:	802062b4 	orhi	zero,r16,33162
802057b0:	802062b4 	orhi	zero,r16,33162
802057b4:	802062b4 	orhi	zero,r16,33162
802057b8:	802062b4 	orhi	zero,r16,33162
802057bc:	80205ab8 	rdprs	zero,r16,-32406
802057c0:	802062b4 	orhi	zero,r16,33162
802057c4:	802062b4 	orhi	zero,r16,33162
802057c8:	80205b80 	call	880205b8 <__reset+0x20005b8>
802057cc:	802062b4 	orhi	zero,r16,33162
802057d0:	802062b4 	orhi	zero,r16,33162
802057d4:	802062b4 	orhi	zero,r16,33162
802057d8:	802062b4 	orhi	zero,r16,33162
802057dc:	802062b4 	orhi	zero,r16,33162
802057e0:	80205ff0 	cmpltui	zero,r16,33151
802057e4:	802062b4 	orhi	zero,r16,33162
802057e8:	802062b4 	orhi	zero,r16,33162
802057ec:	80206050 	cmplti	zero,r16,-32383
802057f0:	802062b4 	orhi	zero,r16,33162
802057f4:	802062b4 	orhi	zero,r16,33162
802057f8:	802062b4 	orhi	zero,r16,33162
802057fc:	802062b4 	orhi	zero,r16,33162
80205800:	802062b4 	orhi	zero,r16,33162
80205804:	802062b4 	orhi	zero,r16,33162
80205808:	802062b4 	orhi	zero,r16,33162
8020580c:	802062b4 	orhi	zero,r16,33162
80205810:	802062b4 	orhi	zero,r16,33162
80205814:	802062b4 	orhi	zero,r16,33162
80205818:	80206100 	call	88020610 <__reset+0x2000610>
8020581c:	8020623c 	xorhi	zero,r16,33160
80205820:	80205a18 	cmpnei	zero,r16,-32408
80205824:	80205a18 	cmpnei	zero,r16,-32408
80205828:	80205a18 	cmpnei	zero,r16,-32408
8020582c:	80206290 	cmplti	zero,r16,-32374
80205830:	8020623c 	xorhi	zero,r16,33160
80205834:	802062b4 	orhi	zero,r16,33162
80205838:	802062b4 	orhi	zero,r16,33162
8020583c:	8020624c 	andi	zero,r16,33161
80205840:	802062b4 	orhi	zero,r16,33162
80205844:	8020625c 	xori	zero,r16,33161
80205848:	8020613c 	xorhi	zero,r16,33156
8020584c:	8020588c 	andi	zero,r16,33122
80205850:	8020615c 	xori	zero,r16,33157
80205854:	802062b4 	orhi	zero,r16,33162
80205858:	80206168 	cmpgeui	zero,r16,33157
8020585c:	802062b4 	orhi	zero,r16,33162
80205860:	802061c4 	addi	zero,r16,-32377
80205864:	802062b4 	orhi	zero,r16,33162
80205868:	802062b4 	orhi	zero,r16,33162
8020586c:	802061d4 	ori	zero,r16,33159
80205870:	d9003117 	ldw	r4,196(sp)
80205874:	d8802d15 	stw	r2,180(sp)
80205878:	0109c83a 	sub	r4,zero,r4
8020587c:	d9003115 	stw	r4,196(sp)
80205880:	94800114 	ori	r18,r18,4
80205884:	bc400007 	ldb	r17,0(r23)
80205888:	003f9706 	br	802056e8 <__reset+0xfa1e56e8>
8020588c:	00800c04 	movi	r2,48
80205890:	d9002d17 	ldw	r4,180(sp)
80205894:	d9402917 	ldw	r5,164(sp)
80205898:	d8802705 	stb	r2,156(sp)
8020589c:	00801e04 	movi	r2,120
802058a0:	d8802745 	stb	r2,157(sp)
802058a4:	d8002785 	stb	zero,158(sp)
802058a8:	20c00104 	addi	r3,r4,4
802058ac:	25000017 	ldw	r20,0(r4)
802058b0:	002d883a 	mov	r22,zero
802058b4:	90800094 	ori	r2,r18,2
802058b8:	28028616 	blt	r5,zero,802062d4 <___svfprintf_internal_r+0xd3c>
802058bc:	00bfdfc4 	movi	r2,-129
802058c0:	90a4703a 	and	r18,r18,r2
802058c4:	d8c02d15 	stw	r3,180(sp)
802058c8:	94800094 	ori	r18,r18,2
802058cc:	a002731e 	bne	r20,zero,8020629c <___svfprintf_internal_r+0xd04>
802058d0:	00a008b4 	movhi	r2,32802
802058d4:	10acc704 	addi	r2,r2,-19684
802058d8:	d8803a15 	stw	r2,232(sp)
802058dc:	04401e04 	movi	r17,120
802058e0:	d8c02917 	ldw	r3,164(sp)
802058e4:	0039883a 	mov	fp,zero
802058e8:	1801d526 	beq	r3,zero,80206040 <___svfprintf_internal_r+0xaa8>
802058ec:	0029883a 	mov	r20,zero
802058f0:	002d883a 	mov	r22,zero
802058f4:	0001f106 	br	802060bc <___svfprintf_internal_r+0xb24>
802058f8:	d9402c17 	ldw	r5,176(sp)
802058fc:	d9801e04 	addi	r6,sp,120
80205900:	9809883a 	mov	r4,r19
80205904:	020eb280 	call	8020eb28 <__ssprint_r>
80205908:	1000081e 	bne	r2,zero,8020592c <___svfprintf_internal_r+0x394>
8020590c:	da000404 	addi	r8,sp,16
80205910:	003f6306 	br	802056a0 <__reset+0xfa1e56a0>
80205914:	d8802017 	ldw	r2,128(sp)
80205918:	10000426 	beq	r2,zero,8020592c <___svfprintf_internal_r+0x394>
8020591c:	d9402c17 	ldw	r5,176(sp)
80205920:	d9003917 	ldw	r4,228(sp)
80205924:	d9801e04 	addi	r6,sp,120
80205928:	020eb280 	call	8020eb28 <__ssprint_r>
8020592c:	d8802c17 	ldw	r2,176(sp)
80205930:	10c0030b 	ldhu	r3,12(r2)
80205934:	d8802f17 	ldw	r2,188(sp)
80205938:	18c0100c 	andi	r3,r3,64
8020593c:	1805f51e 	bne	r3,zero,80207114 <___svfprintf_internal_r+0x1b7c>
80205940:	dfc04817 	ldw	ra,288(sp)
80205944:	df004717 	ldw	fp,284(sp)
80205948:	ddc04617 	ldw	r23,280(sp)
8020594c:	dd804517 	ldw	r22,276(sp)
80205950:	dd404417 	ldw	r21,272(sp)
80205954:	dd004317 	ldw	r20,268(sp)
80205958:	dcc04217 	ldw	r19,264(sp)
8020595c:	dc804117 	ldw	r18,260(sp)
80205960:	dc404017 	ldw	r17,256(sp)
80205964:	dc003f17 	ldw	r16,252(sp)
80205968:	dec04904 	addi	sp,sp,292
8020596c:	f800283a 	ret
80205970:	d8802d17 	ldw	r2,180(sp)
80205974:	d9002d17 	ldw	r4,180(sp)
80205978:	10800017 	ldw	r2,0(r2)
8020597c:	d8803115 	stw	r2,196(sp)
80205980:	20800104 	addi	r2,r4,4
80205984:	d9003117 	ldw	r4,196(sp)
80205988:	203fb916 	blt	r4,zero,80205870 <__reset+0xfa1e5870>
8020598c:	d8802d15 	stw	r2,180(sp)
80205990:	bc400007 	ldb	r17,0(r23)
80205994:	003f5406 	br	802056e8 <__reset+0xfa1e56e8>
80205998:	bc400007 	ldb	r17,0(r23)
8020599c:	bac00044 	addi	r11,r23,1
802059a0:	8a873926 	beq	r17,r10,80207688 <___svfprintf_internal_r+0x20f0>
802059a4:	88bff404 	addi	r2,r17,-48
802059a8:	0009883a 	mov	r4,zero
802059ac:	30868836 	bltu	r6,r2,802073d0 <___svfprintf_internal_r+0x1e38>
802059b0:	5c400007 	ldb	r17,0(r11)
802059b4:	210002a4 	muli	r4,r4,10
802059b8:	5dc00044 	addi	r23,r11,1
802059bc:	b817883a 	mov	r11,r23
802059c0:	2089883a 	add	r4,r4,r2
802059c4:	88bff404 	addi	r2,r17,-48
802059c8:	30bff92e 	bgeu	r6,r2,802059b0 <__reset+0xfa1e59b0>
802059cc:	2005d716 	blt	r4,zero,8020712c <___svfprintf_internal_r+0x1b94>
802059d0:	d9002915 	stw	r4,164(sp)
802059d4:	003f4506 	br	802056ec <__reset+0xfa1e56ec>
802059d8:	b809883a 	mov	r4,r23
802059dc:	d8003115 	stw	zero,196(sp)
802059e0:	88bff404 	addi	r2,r17,-48
802059e4:	0017883a 	mov	r11,zero
802059e8:	24400007 	ldb	r17,0(r4)
802059ec:	5ac002a4 	muli	r11,r11,10
802059f0:	bdc00044 	addi	r23,r23,1
802059f4:	b809883a 	mov	r4,r23
802059f8:	12d7883a 	add	r11,r2,r11
802059fc:	88bff404 	addi	r2,r17,-48
80205a00:	30bff92e 	bgeu	r6,r2,802059e8 <__reset+0xfa1e59e8>
80205a04:	dac03115 	stw	r11,196(sp)
80205a08:	003f3806 	br	802056ec <__reset+0xfa1e56ec>
80205a0c:	94802014 	ori	r18,r18,128
80205a10:	bc400007 	ldb	r17,0(r23)
80205a14:	003f3406 	br	802056e8 <__reset+0xfa1e56e8>
80205a18:	18c03fcc 	andi	r3,r3,255
80205a1c:	1807471e 	bne	r3,zero,8020773c <___svfprintf_internal_r+0x21a4>
80205a20:	9080020c 	andi	r2,r18,8
80205a24:	10047d26 	beq	r2,zero,80206c1c <___svfprintf_internal_r+0x1684>
80205a28:	d8c02d17 	ldw	r3,180(sp)
80205a2c:	d9002d17 	ldw	r4,180(sp)
80205a30:	d9402d17 	ldw	r5,180(sp)
80205a34:	18c00017 	ldw	r3,0(r3)
80205a38:	21000117 	ldw	r4,4(r4)
80205a3c:	29400204 	addi	r5,r5,8
80205a40:	d8c03615 	stw	r3,216(sp)
80205a44:	d9003715 	stw	r4,220(sp)
80205a48:	d9402d15 	stw	r5,180(sp)
80205a4c:	d9003617 	ldw	r4,216(sp)
80205a50:	d9403717 	ldw	r5,220(sp)
80205a54:	da003e15 	stw	r8,248(sp)
80205a58:	04000044 	movi	r16,1
80205a5c:	020e8480 	call	8020e848 <__fpclassifyd>
80205a60:	da003e17 	ldw	r8,248(sp)
80205a64:	14044b1e 	bne	r2,r16,80206b94 <___svfprintf_internal_r+0x15fc>
80205a68:	d9003617 	ldw	r4,216(sp)
80205a6c:	d9403717 	ldw	r5,220(sp)
80205a70:	000d883a 	mov	r6,zero
80205a74:	000f883a 	mov	r7,zero
80205a78:	0213e0c0 	call	80213e0c <__ledf2>
80205a7c:	da003e17 	ldw	r8,248(sp)
80205a80:	1005f316 	blt	r2,zero,80207250 <___svfprintf_internal_r+0x1cb8>
80205a84:	df002783 	ldbu	fp,158(sp)
80205a88:	008011c4 	movi	r2,71
80205a8c:	1445590e 	bge	r2,r17,80206ff4 <___svfprintf_internal_r+0x1a5c>
80205a90:	042008b4 	movhi	r16,32802
80205a94:	842cbf04 	addi	r16,r16,-19716
80205a98:	00c000c4 	movi	r3,3
80205a9c:	00bfdfc4 	movi	r2,-129
80205aa0:	d8c02a15 	stw	r3,168(sp)
80205aa4:	90a4703a 	and	r18,r18,r2
80205aa8:	d8c02e15 	stw	r3,184(sp)
80205aac:	d8002915 	stw	zero,164(sp)
80205ab0:	d8003215 	stw	zero,200(sp)
80205ab4:	00006606 	br	80205c50 <___svfprintf_internal_r+0x6b8>
80205ab8:	94800214 	ori	r18,r18,8
80205abc:	bc400007 	ldb	r17,0(r23)
80205ac0:	003f0906 	br	802056e8 <__reset+0xfa1e56e8>
80205ac4:	18c03fcc 	andi	r3,r3,255
80205ac8:	1807181e 	bne	r3,zero,8020772c <___svfprintf_internal_r+0x2194>
80205acc:	94800414 	ori	r18,r18,16
80205ad0:	9080080c 	andi	r2,r18,32
80205ad4:	10039626 	beq	r2,zero,80206930 <___svfprintf_internal_r+0x1398>
80205ad8:	d9402d17 	ldw	r5,180(sp)
80205adc:	28800117 	ldw	r2,4(r5)
80205ae0:	2d000017 	ldw	r20,0(r5)
80205ae4:	29400204 	addi	r5,r5,8
80205ae8:	d9402d15 	stw	r5,180(sp)
80205aec:	102d883a 	mov	r22,r2
80205af0:	10039816 	blt	r2,zero,80206954 <___svfprintf_internal_r+0x13bc>
80205af4:	d9402917 	ldw	r5,164(sp)
80205af8:	df002783 	ldbu	fp,158(sp)
80205afc:	2803ab16 	blt	r5,zero,802069ac <___svfprintf_internal_r+0x1414>
80205b00:	00ffdfc4 	movi	r3,-129
80205b04:	a584b03a 	or	r2,r20,r22
80205b08:	90e4703a 	and	r18,r18,r3
80205b0c:	10014a26 	beq	r2,zero,80206038 <___svfprintf_internal_r+0xaa0>
80205b10:	b0034b26 	beq	r22,zero,80206840 <___svfprintf_internal_r+0x12a8>
80205b14:	dc402a15 	stw	r17,168(sp)
80205b18:	dc001e04 	addi	r16,sp,120
80205b1c:	b023883a 	mov	r17,r22
80205b20:	402d883a 	mov	r22,r8
80205b24:	a009883a 	mov	r4,r20
80205b28:	880b883a 	mov	r5,r17
80205b2c:	01800284 	movi	r6,10
80205b30:	000f883a 	mov	r7,zero
80205b34:	02124280 	call	80212428 <__umoddi3>
80205b38:	10800c04 	addi	r2,r2,48
80205b3c:	843fffc4 	addi	r16,r16,-1
80205b40:	a009883a 	mov	r4,r20
80205b44:	880b883a 	mov	r5,r17
80205b48:	80800005 	stb	r2,0(r16)
80205b4c:	01800284 	movi	r6,10
80205b50:	000f883a 	mov	r7,zero
80205b54:	0211eb00 	call	80211eb0 <__udivdi3>
80205b58:	1029883a 	mov	r20,r2
80205b5c:	10c4b03a 	or	r2,r2,r3
80205b60:	1823883a 	mov	r17,r3
80205b64:	103fef1e 	bne	r2,zero,80205b24 <__reset+0xfa1e5b24>
80205b68:	d8c02817 	ldw	r3,160(sp)
80205b6c:	dc402a17 	ldw	r17,168(sp)
80205b70:	b011883a 	mov	r8,r22
80205b74:	1c07c83a 	sub	r3,r3,r16
80205b78:	d8c02e15 	stw	r3,184(sp)
80205b7c:	00002e06 	br	80205c38 <___svfprintf_internal_r+0x6a0>
80205b80:	18c03fcc 	andi	r3,r3,255
80205b84:	1806e71e 	bne	r3,zero,80207724 <___svfprintf_internal_r+0x218c>
80205b88:	94800414 	ori	r18,r18,16
80205b8c:	9080080c 	andi	r2,r18,32
80205b90:	1002d426 	beq	r2,zero,802066e4 <___svfprintf_internal_r+0x114c>
80205b94:	d9402d17 	ldw	r5,180(sp)
80205b98:	d8c02917 	ldw	r3,164(sp)
80205b9c:	d8002785 	stb	zero,158(sp)
80205ba0:	28800204 	addi	r2,r5,8
80205ba4:	2d000017 	ldw	r20,0(r5)
80205ba8:	2d800117 	ldw	r22,4(r5)
80205bac:	18041516 	blt	r3,zero,80206c04 <___svfprintf_internal_r+0x166c>
80205bb0:	013fdfc4 	movi	r4,-129
80205bb4:	a586b03a 	or	r3,r20,r22
80205bb8:	d8802d15 	stw	r2,180(sp)
80205bbc:	9124703a 	and	r18,r18,r4
80205bc0:	1802d51e 	bne	r3,zero,80206718 <___svfprintf_internal_r+0x1180>
80205bc4:	d9402917 	ldw	r5,164(sp)
80205bc8:	0039883a 	mov	fp,zero
80205bcc:	2806be26 	beq	r5,zero,802076c8 <___svfprintf_internal_r+0x2130>
80205bd0:	0029883a 	mov	r20,zero
80205bd4:	002d883a 	mov	r22,zero
80205bd8:	dc001e04 	addi	r16,sp,120
80205bdc:	a006d0fa 	srli	r3,r20,3
80205be0:	b008977a 	slli	r4,r22,29
80205be4:	b02cd0fa 	srli	r22,r22,3
80205be8:	a50001cc 	andi	r20,r20,7
80205bec:	a0800c04 	addi	r2,r20,48
80205bf0:	843fffc4 	addi	r16,r16,-1
80205bf4:	20e8b03a 	or	r20,r4,r3
80205bf8:	80800005 	stb	r2,0(r16)
80205bfc:	a586b03a 	or	r3,r20,r22
80205c00:	183ff61e 	bne	r3,zero,80205bdc <__reset+0xfa1e5bdc>
80205c04:	90c0004c 	andi	r3,r18,1
80205c08:	18013926 	beq	r3,zero,802060f0 <___svfprintf_internal_r+0xb58>
80205c0c:	10803fcc 	andi	r2,r2,255
80205c10:	1080201c 	xori	r2,r2,128
80205c14:	10bfe004 	addi	r2,r2,-128
80205c18:	00c00c04 	movi	r3,48
80205c1c:	10c13426 	beq	r2,r3,802060f0 <___svfprintf_internal_r+0xb58>
80205c20:	80ffffc5 	stb	r3,-1(r16)
80205c24:	d8c02817 	ldw	r3,160(sp)
80205c28:	80bfffc4 	addi	r2,r16,-1
80205c2c:	1021883a 	mov	r16,r2
80205c30:	1887c83a 	sub	r3,r3,r2
80205c34:	d8c02e15 	stw	r3,184(sp)
80205c38:	d8802e17 	ldw	r2,184(sp)
80205c3c:	d9002917 	ldw	r4,164(sp)
80205c40:	1100010e 	bge	r2,r4,80205c48 <___svfprintf_internal_r+0x6b0>
80205c44:	2005883a 	mov	r2,r4
80205c48:	d8802a15 	stw	r2,168(sp)
80205c4c:	d8003215 	stw	zero,200(sp)
80205c50:	e7003fcc 	andi	fp,fp,255
80205c54:	e700201c 	xori	fp,fp,128
80205c58:	e73fe004 	addi	fp,fp,-128
80205c5c:	e0000326 	beq	fp,zero,80205c6c <___svfprintf_internal_r+0x6d4>
80205c60:	d8c02a17 	ldw	r3,168(sp)
80205c64:	18c00044 	addi	r3,r3,1
80205c68:	d8c02a15 	stw	r3,168(sp)
80205c6c:	90c0008c 	andi	r3,r18,2
80205c70:	d8c02b15 	stw	r3,172(sp)
80205c74:	18000326 	beq	r3,zero,80205c84 <___svfprintf_internal_r+0x6ec>
80205c78:	d8c02a17 	ldw	r3,168(sp)
80205c7c:	18c00084 	addi	r3,r3,2
80205c80:	d8c02a15 	stw	r3,168(sp)
80205c84:	90c0210c 	andi	r3,r18,132
80205c88:	d8c03015 	stw	r3,192(sp)
80205c8c:	1801a11e 	bne	r3,zero,80206314 <___svfprintf_internal_r+0xd7c>
80205c90:	d9003117 	ldw	r4,196(sp)
80205c94:	d8c02a17 	ldw	r3,168(sp)
80205c98:	20e9c83a 	sub	r20,r4,r3
80205c9c:	05019d0e 	bge	zero,r20,80206314 <___svfprintf_internal_r+0xd7c>
80205ca0:	02400404 	movi	r9,16
80205ca4:	d8c02017 	ldw	r3,128(sp)
80205ca8:	d8801f17 	ldw	r2,124(sp)
80205cac:	4d051b0e 	bge	r9,r20,8020711c <___svfprintf_internal_r+0x1b84>
80205cb0:	016008b4 	movhi	r5,32802
80205cb4:	296cd284 	addi	r5,r5,-19638
80205cb8:	dc403c15 	stw	r17,240(sp)
80205cbc:	d9403515 	stw	r5,212(sp)
80205cc0:	a023883a 	mov	r17,r20
80205cc4:	482d883a 	mov	r22,r9
80205cc8:	9029883a 	mov	r20,r18
80205ccc:	070001c4 	movi	fp,7
80205cd0:	8025883a 	mov	r18,r16
80205cd4:	dc002c17 	ldw	r16,176(sp)
80205cd8:	00000306 	br	80205ce8 <___svfprintf_internal_r+0x750>
80205cdc:	8c7ffc04 	addi	r17,r17,-16
80205ce0:	42000204 	addi	r8,r8,8
80205ce4:	b440130e 	bge	r22,r17,80205d34 <___svfprintf_internal_r+0x79c>
80205ce8:	012008b4 	movhi	r4,32802
80205cec:	18c00404 	addi	r3,r3,16
80205cf0:	10800044 	addi	r2,r2,1
80205cf4:	212cd284 	addi	r4,r4,-19638
80205cf8:	41000015 	stw	r4,0(r8)
80205cfc:	45800115 	stw	r22,4(r8)
80205d00:	d8c02015 	stw	r3,128(sp)
80205d04:	d8801f15 	stw	r2,124(sp)
80205d08:	e0bff40e 	bge	fp,r2,80205cdc <__reset+0xfa1e5cdc>
80205d0c:	d9801e04 	addi	r6,sp,120
80205d10:	800b883a 	mov	r5,r16
80205d14:	9809883a 	mov	r4,r19
80205d18:	020eb280 	call	8020eb28 <__ssprint_r>
80205d1c:	103f031e 	bne	r2,zero,8020592c <__reset+0xfa1e592c>
80205d20:	8c7ffc04 	addi	r17,r17,-16
80205d24:	d8c02017 	ldw	r3,128(sp)
80205d28:	d8801f17 	ldw	r2,124(sp)
80205d2c:	da000404 	addi	r8,sp,16
80205d30:	b47fed16 	blt	r22,r17,80205ce8 <__reset+0xfa1e5ce8>
80205d34:	9021883a 	mov	r16,r18
80205d38:	a025883a 	mov	r18,r20
80205d3c:	8829883a 	mov	r20,r17
80205d40:	dc403c17 	ldw	r17,240(sp)
80205d44:	d9403517 	ldw	r5,212(sp)
80205d48:	a0c7883a 	add	r3,r20,r3
80205d4c:	10800044 	addi	r2,r2,1
80205d50:	41400015 	stw	r5,0(r8)
80205d54:	45000115 	stw	r20,4(r8)
80205d58:	d8c02015 	stw	r3,128(sp)
80205d5c:	d8801f15 	stw	r2,124(sp)
80205d60:	010001c4 	movi	r4,7
80205d64:	20829f16 	blt	r4,r2,802067e4 <___svfprintf_internal_r+0x124c>
80205d68:	df002787 	ldb	fp,158(sp)
80205d6c:	42000204 	addi	r8,r8,8
80205d70:	e0000c26 	beq	fp,zero,80205da4 <___svfprintf_internal_r+0x80c>
80205d74:	d8801f17 	ldw	r2,124(sp)
80205d78:	d9002784 	addi	r4,sp,158
80205d7c:	18c00044 	addi	r3,r3,1
80205d80:	10800044 	addi	r2,r2,1
80205d84:	41000015 	stw	r4,0(r8)
80205d88:	01000044 	movi	r4,1
80205d8c:	41000115 	stw	r4,4(r8)
80205d90:	d8c02015 	stw	r3,128(sp)
80205d94:	d8801f15 	stw	r2,124(sp)
80205d98:	010001c4 	movi	r4,7
80205d9c:	20823816 	blt	r4,r2,80206680 <___svfprintf_internal_r+0x10e8>
80205da0:	42000204 	addi	r8,r8,8
80205da4:	d8802b17 	ldw	r2,172(sp)
80205da8:	10000c26 	beq	r2,zero,80205ddc <___svfprintf_internal_r+0x844>
80205dac:	d8801f17 	ldw	r2,124(sp)
80205db0:	d9002704 	addi	r4,sp,156
80205db4:	18c00084 	addi	r3,r3,2
80205db8:	10800044 	addi	r2,r2,1
80205dbc:	41000015 	stw	r4,0(r8)
80205dc0:	01000084 	movi	r4,2
80205dc4:	41000115 	stw	r4,4(r8)
80205dc8:	d8c02015 	stw	r3,128(sp)
80205dcc:	d8801f15 	stw	r2,124(sp)
80205dd0:	010001c4 	movi	r4,7
80205dd4:	20823216 	blt	r4,r2,802066a0 <___svfprintf_internal_r+0x1108>
80205dd8:	42000204 	addi	r8,r8,8
80205ddc:	d9003017 	ldw	r4,192(sp)
80205de0:	00802004 	movi	r2,128
80205de4:	20819726 	beq	r4,r2,80206444 <___svfprintf_internal_r+0xeac>
80205de8:	d9402917 	ldw	r5,164(sp)
80205dec:	d8802e17 	ldw	r2,184(sp)
80205df0:	28adc83a 	sub	r22,r5,r2
80205df4:	05802f0e 	bge	zero,r22,80205eb4 <___svfprintf_internal_r+0x91c>
80205df8:	07000404 	movi	fp,16
80205dfc:	d8801f17 	ldw	r2,124(sp)
80205e00:	e583c00e 	bge	fp,r22,80206d04 <___svfprintf_internal_r+0x176c>
80205e04:	016008b4 	movhi	r5,32802
80205e08:	296cce84 	addi	r5,r5,-19654
80205e0c:	dc402915 	stw	r17,164(sp)
80205e10:	d9402b15 	stw	r5,172(sp)
80205e14:	b023883a 	mov	r17,r22
80205e18:	050001c4 	movi	r20,7
80205e1c:	902d883a 	mov	r22,r18
80205e20:	8025883a 	mov	r18,r16
80205e24:	dc002c17 	ldw	r16,176(sp)
80205e28:	00000306 	br	80205e38 <___svfprintf_internal_r+0x8a0>
80205e2c:	8c7ffc04 	addi	r17,r17,-16
80205e30:	42000204 	addi	r8,r8,8
80205e34:	e440110e 	bge	fp,r17,80205e7c <___svfprintf_internal_r+0x8e4>
80205e38:	18c00404 	addi	r3,r3,16
80205e3c:	10800044 	addi	r2,r2,1
80205e40:	45400015 	stw	r21,0(r8)
80205e44:	47000115 	stw	fp,4(r8)
80205e48:	d8c02015 	stw	r3,128(sp)
80205e4c:	d8801f15 	stw	r2,124(sp)
80205e50:	a0bff60e 	bge	r20,r2,80205e2c <__reset+0xfa1e5e2c>
80205e54:	d9801e04 	addi	r6,sp,120
80205e58:	800b883a 	mov	r5,r16
80205e5c:	9809883a 	mov	r4,r19
80205e60:	020eb280 	call	8020eb28 <__ssprint_r>
80205e64:	103eb11e 	bne	r2,zero,8020592c <__reset+0xfa1e592c>
80205e68:	8c7ffc04 	addi	r17,r17,-16
80205e6c:	d8c02017 	ldw	r3,128(sp)
80205e70:	d8801f17 	ldw	r2,124(sp)
80205e74:	da000404 	addi	r8,sp,16
80205e78:	e47fef16 	blt	fp,r17,80205e38 <__reset+0xfa1e5e38>
80205e7c:	9021883a 	mov	r16,r18
80205e80:	b025883a 	mov	r18,r22
80205e84:	882d883a 	mov	r22,r17
80205e88:	dc402917 	ldw	r17,164(sp)
80205e8c:	d9002b17 	ldw	r4,172(sp)
80205e90:	1d87883a 	add	r3,r3,r22
80205e94:	10800044 	addi	r2,r2,1
80205e98:	41000015 	stw	r4,0(r8)
80205e9c:	45800115 	stw	r22,4(r8)
80205ea0:	d8c02015 	stw	r3,128(sp)
80205ea4:	d8801f15 	stw	r2,124(sp)
80205ea8:	010001c4 	movi	r4,7
80205eac:	2081ec16 	blt	r4,r2,80206660 <___svfprintf_internal_r+0x10c8>
80205eb0:	42000204 	addi	r8,r8,8
80205eb4:	9080400c 	andi	r2,r18,256
80205eb8:	1001181e 	bne	r2,zero,8020631c <___svfprintf_internal_r+0xd84>
80205ebc:	d9402e17 	ldw	r5,184(sp)
80205ec0:	d8801f17 	ldw	r2,124(sp)
80205ec4:	44000015 	stw	r16,0(r8)
80205ec8:	1947883a 	add	r3,r3,r5
80205ecc:	10800044 	addi	r2,r2,1
80205ed0:	41400115 	stw	r5,4(r8)
80205ed4:	d8c02015 	stw	r3,128(sp)
80205ed8:	d8801f15 	stw	r2,124(sp)
80205edc:	010001c4 	movi	r4,7
80205ee0:	2081d116 	blt	r4,r2,80206628 <___svfprintf_internal_r+0x1090>
80205ee4:	42000204 	addi	r8,r8,8
80205ee8:	9480010c 	andi	r18,r18,4
80205eec:	90003226 	beq	r18,zero,80205fb8 <___svfprintf_internal_r+0xa20>
80205ef0:	d9403117 	ldw	r5,196(sp)
80205ef4:	d8802a17 	ldw	r2,168(sp)
80205ef8:	28a1c83a 	sub	r16,r5,r2
80205efc:	04002e0e 	bge	zero,r16,80205fb8 <___svfprintf_internal_r+0xa20>
80205f00:	04400404 	movi	r17,16
80205f04:	d8801f17 	ldw	r2,124(sp)
80205f08:	8c04b90e 	bge	r17,r16,802071f0 <___svfprintf_internal_r+0x1c58>
80205f0c:	016008b4 	movhi	r5,32802
80205f10:	296cd284 	addi	r5,r5,-19638
80205f14:	d9403515 	stw	r5,212(sp)
80205f18:	048001c4 	movi	r18,7
80205f1c:	dd002c17 	ldw	r20,176(sp)
80205f20:	00000306 	br	80205f30 <___svfprintf_internal_r+0x998>
80205f24:	843ffc04 	addi	r16,r16,-16
80205f28:	42000204 	addi	r8,r8,8
80205f2c:	8c00130e 	bge	r17,r16,80205f7c <___svfprintf_internal_r+0x9e4>
80205f30:	012008b4 	movhi	r4,32802
80205f34:	18c00404 	addi	r3,r3,16
80205f38:	10800044 	addi	r2,r2,1
80205f3c:	212cd284 	addi	r4,r4,-19638
80205f40:	41000015 	stw	r4,0(r8)
80205f44:	44400115 	stw	r17,4(r8)
80205f48:	d8c02015 	stw	r3,128(sp)
80205f4c:	d8801f15 	stw	r2,124(sp)
80205f50:	90bff40e 	bge	r18,r2,80205f24 <__reset+0xfa1e5f24>
80205f54:	d9801e04 	addi	r6,sp,120
80205f58:	a00b883a 	mov	r5,r20
80205f5c:	9809883a 	mov	r4,r19
80205f60:	020eb280 	call	8020eb28 <__ssprint_r>
80205f64:	103e711e 	bne	r2,zero,8020592c <__reset+0xfa1e592c>
80205f68:	843ffc04 	addi	r16,r16,-16
80205f6c:	d8c02017 	ldw	r3,128(sp)
80205f70:	d8801f17 	ldw	r2,124(sp)
80205f74:	da000404 	addi	r8,sp,16
80205f78:	8c3fed16 	blt	r17,r16,80205f30 <__reset+0xfa1e5f30>
80205f7c:	d9403517 	ldw	r5,212(sp)
80205f80:	1c07883a 	add	r3,r3,r16
80205f84:	10800044 	addi	r2,r2,1
80205f88:	41400015 	stw	r5,0(r8)
80205f8c:	44000115 	stw	r16,4(r8)
80205f90:	d8c02015 	stw	r3,128(sp)
80205f94:	d8801f15 	stw	r2,124(sp)
80205f98:	010001c4 	movi	r4,7
80205f9c:	2080060e 	bge	r4,r2,80205fb8 <___svfprintf_internal_r+0xa20>
80205fa0:	d9402c17 	ldw	r5,176(sp)
80205fa4:	d9801e04 	addi	r6,sp,120
80205fa8:	9809883a 	mov	r4,r19
80205fac:	020eb280 	call	8020eb28 <__ssprint_r>
80205fb0:	103e5e1e 	bne	r2,zero,8020592c <__reset+0xfa1e592c>
80205fb4:	d8c02017 	ldw	r3,128(sp)
80205fb8:	d8803117 	ldw	r2,196(sp)
80205fbc:	d9002a17 	ldw	r4,168(sp)
80205fc0:	1100010e 	bge	r2,r4,80205fc8 <___svfprintf_internal_r+0xa30>
80205fc4:	2005883a 	mov	r2,r4
80205fc8:	d9402f17 	ldw	r5,188(sp)
80205fcc:	288b883a 	add	r5,r5,r2
80205fd0:	d9402f15 	stw	r5,188(sp)
80205fd4:	18019c1e 	bne	r3,zero,80206648 <___svfprintf_internal_r+0x10b0>
80205fd8:	b8800007 	ldb	r2,0(r23)
80205fdc:	d8001f15 	stw	zero,124(sp)
80205fe0:	da000404 	addi	r8,sp,16
80205fe4:	103d991e 	bne	r2,zero,8020564c <__reset+0xfa1e564c>
80205fe8:	b821883a 	mov	r16,r23
80205fec:	003daf06 	br	802056ac <__reset+0xfa1e56ac>
80205ff0:	18c03fcc 	andi	r3,r3,255
80205ff4:	1805c71e 	bne	r3,zero,80207714 <___svfprintf_internal_r+0x217c>
80205ff8:	94800414 	ori	r18,r18,16
80205ffc:	9080080c 	andi	r2,r18,32
80206000:	10020126 	beq	r2,zero,80206808 <___svfprintf_internal_r+0x1270>
80206004:	d8802d17 	ldw	r2,180(sp)
80206008:	d9002917 	ldw	r4,164(sp)
8020600c:	d8002785 	stb	zero,158(sp)
80206010:	10c00204 	addi	r3,r2,8
80206014:	15000017 	ldw	r20,0(r2)
80206018:	15800117 	ldw	r22,4(r2)
8020601c:	20038e16 	blt	r4,zero,80206e58 <___svfprintf_internal_r+0x18c0>
80206020:	013fdfc4 	movi	r4,-129
80206024:	a584b03a 	or	r2,r20,r22
80206028:	d8c02d15 	stw	r3,180(sp)
8020602c:	9124703a 	and	r18,r18,r4
80206030:	0039883a 	mov	fp,zero
80206034:	103eb61e 	bne	r2,zero,80205b10 <__reset+0xfa1e5b10>
80206038:	d8802917 	ldw	r2,164(sp)
8020603c:	1002c81e 	bne	r2,zero,80206b60 <___svfprintf_internal_r+0x15c8>
80206040:	d8002915 	stw	zero,164(sp)
80206044:	d8002e15 	stw	zero,184(sp)
80206048:	dc001e04 	addi	r16,sp,120
8020604c:	003efa06 	br	80205c38 <__reset+0xfa1e5c38>
80206050:	18c03fcc 	andi	r3,r3,255
80206054:	1805ad1e 	bne	r3,zero,8020770c <___svfprintf_internal_r+0x2174>
80206058:	016008b4 	movhi	r5,32802
8020605c:	296cc204 	addi	r5,r5,-19704
80206060:	d9403a15 	stw	r5,232(sp)
80206064:	9080080c 	andi	r2,r18,32
80206068:	10006126 	beq	r2,zero,802061f0 <___svfprintf_internal_r+0xc58>
8020606c:	d8802d17 	ldw	r2,180(sp)
80206070:	15000017 	ldw	r20,0(r2)
80206074:	15800117 	ldw	r22,4(r2)
80206078:	10800204 	addi	r2,r2,8
8020607c:	d8802d15 	stw	r2,180(sp)
80206080:	9080004c 	andi	r2,r18,1
80206084:	10018e26 	beq	r2,zero,802066c0 <___svfprintf_internal_r+0x1128>
80206088:	a584b03a 	or	r2,r20,r22
8020608c:	10030926 	beq	r2,zero,80206cb4 <___svfprintf_internal_r+0x171c>
80206090:	d8c02917 	ldw	r3,164(sp)
80206094:	00800c04 	movi	r2,48
80206098:	d8802705 	stb	r2,156(sp)
8020609c:	dc402745 	stb	r17,157(sp)
802060a0:	d8002785 	stb	zero,158(sp)
802060a4:	90800094 	ori	r2,r18,2
802060a8:	18048716 	blt	r3,zero,802072c8 <___svfprintf_internal_r+0x1d30>
802060ac:	00bfdfc4 	movi	r2,-129
802060b0:	90a4703a 	and	r18,r18,r2
802060b4:	94800094 	ori	r18,r18,2
802060b8:	0039883a 	mov	fp,zero
802060bc:	d9003a17 	ldw	r4,232(sp)
802060c0:	dc001e04 	addi	r16,sp,120
802060c4:	a08003cc 	andi	r2,r20,15
802060c8:	b006973a 	slli	r3,r22,28
802060cc:	2085883a 	add	r2,r4,r2
802060d0:	a028d13a 	srli	r20,r20,4
802060d4:	10800003 	ldbu	r2,0(r2)
802060d8:	b02cd13a 	srli	r22,r22,4
802060dc:	843fffc4 	addi	r16,r16,-1
802060e0:	1d28b03a 	or	r20,r3,r20
802060e4:	80800005 	stb	r2,0(r16)
802060e8:	a584b03a 	or	r2,r20,r22
802060ec:	103ff51e 	bne	r2,zero,802060c4 <__reset+0xfa1e60c4>
802060f0:	d8c02817 	ldw	r3,160(sp)
802060f4:	1c07c83a 	sub	r3,r3,r16
802060f8:	d8c02e15 	stw	r3,184(sp)
802060fc:	003ece06 	br	80205c38 <__reset+0xfa1e5c38>
80206100:	d8c02d17 	ldw	r3,180(sp)
80206104:	d9002d17 	ldw	r4,180(sp)
80206108:	d8002785 	stb	zero,158(sp)
8020610c:	18800017 	ldw	r2,0(r3)
80206110:	21000104 	addi	r4,r4,4
80206114:	00c00044 	movi	r3,1
80206118:	d8c02a15 	stw	r3,168(sp)
8020611c:	d8801405 	stb	r2,80(sp)
80206120:	d9002d15 	stw	r4,180(sp)
80206124:	d8c02e15 	stw	r3,184(sp)
80206128:	d8002915 	stw	zero,164(sp)
8020612c:	d8003215 	stw	zero,200(sp)
80206130:	dc001404 	addi	r16,sp,80
80206134:	0039883a 	mov	fp,zero
80206138:	003ecc06 	br	80205c6c <__reset+0xfa1e5c6c>
8020613c:	18c03fcc 	andi	r3,r3,255
80206140:	183e9226 	beq	r3,zero,80205b8c <__reset+0xfa1e5b8c>
80206144:	d9c02785 	stb	r7,158(sp)
80206148:	003e9006 	br	80205b8c <__reset+0xfa1e5b8c>
8020614c:	00c00044 	movi	r3,1
80206150:	01c00ac4 	movi	r7,43
80206154:	bc400007 	ldb	r17,0(r23)
80206158:	003d6306 	br	802056e8 <__reset+0xfa1e56e8>
8020615c:	94800814 	ori	r18,r18,32
80206160:	bc400007 	ldb	r17,0(r23)
80206164:	003d6006 	br	802056e8 <__reset+0xfa1e56e8>
80206168:	d8c02d17 	ldw	r3,180(sp)
8020616c:	d8002785 	stb	zero,158(sp)
80206170:	1c000017 	ldw	r16,0(r3)
80206174:	1d000104 	addi	r20,r3,4
80206178:	80040f26 	beq	r16,zero,802071b8 <___svfprintf_internal_r+0x1c20>
8020617c:	d9002917 	ldw	r4,164(sp)
80206180:	2003dc16 	blt	r4,zero,802070f4 <___svfprintf_internal_r+0x1b5c>
80206184:	200d883a 	mov	r6,r4
80206188:	000b883a 	mov	r5,zero
8020618c:	8009883a 	mov	r4,r16
80206190:	da003e15 	stw	r8,248(sp)
80206194:	020cf800 	call	8020cf80 <memchr>
80206198:	da003e17 	ldw	r8,248(sp)
8020619c:	10045826 	beq	r2,zero,80207300 <___svfprintf_internal_r+0x1d68>
802061a0:	1405c83a 	sub	r2,r2,r16
802061a4:	d8802e15 	stw	r2,184(sp)
802061a8:	1003d816 	blt	r2,zero,8020710c <___svfprintf_internal_r+0x1b74>
802061ac:	df002783 	ldbu	fp,158(sp)
802061b0:	d8802a15 	stw	r2,168(sp)
802061b4:	dd002d15 	stw	r20,180(sp)
802061b8:	d8002915 	stw	zero,164(sp)
802061bc:	d8003215 	stw	zero,200(sp)
802061c0:	003ea306 	br	80205c50 <__reset+0xfa1e5c50>
802061c4:	18c03fcc 	andi	r3,r3,255
802061c8:	183f8c26 	beq	r3,zero,80205ffc <__reset+0xfa1e5ffc>
802061cc:	d9c02785 	stb	r7,158(sp)
802061d0:	003f8a06 	br	80205ffc <__reset+0xfa1e5ffc>
802061d4:	18c03fcc 	andi	r3,r3,255
802061d8:	1805631e 	bne	r3,zero,80207768 <___svfprintf_internal_r+0x21d0>
802061dc:	016008b4 	movhi	r5,32802
802061e0:	296cc704 	addi	r5,r5,-19684
802061e4:	d9403a15 	stw	r5,232(sp)
802061e8:	9080080c 	andi	r2,r18,32
802061ec:	103f9f1e 	bne	r2,zero,8020606c <__reset+0xfa1e606c>
802061f0:	9080040c 	andi	r2,r18,16
802061f4:	10029c26 	beq	r2,zero,80206c68 <___svfprintf_internal_r+0x16d0>
802061f8:	d8c02d17 	ldw	r3,180(sp)
802061fc:	002d883a 	mov	r22,zero
80206200:	1d000017 	ldw	r20,0(r3)
80206204:	18c00104 	addi	r3,r3,4
80206208:	d8c02d15 	stw	r3,180(sp)
8020620c:	003f9c06 	br	80206080 <__reset+0xfa1e6080>
80206210:	94800054 	ori	r18,r18,1
80206214:	bc400007 	ldb	r17,0(r23)
80206218:	003d3306 	br	802056e8 <__reset+0xfa1e56e8>
8020621c:	38803fcc 	andi	r2,r7,255
80206220:	1080201c 	xori	r2,r2,128
80206224:	10bfe004 	addi	r2,r2,-128
80206228:	1002971e 	bne	r2,zero,80206c88 <___svfprintf_internal_r+0x16f0>
8020622c:	00c00044 	movi	r3,1
80206230:	01c00804 	movi	r7,32
80206234:	bc400007 	ldb	r17,0(r23)
80206238:	003d2b06 	br	802056e8 <__reset+0xfa1e56e8>
8020623c:	18c03fcc 	andi	r3,r3,255
80206240:	183e2326 	beq	r3,zero,80205ad0 <__reset+0xfa1e5ad0>
80206244:	d9c02785 	stb	r7,158(sp)
80206248:	003e2106 	br	80205ad0 <__reset+0xfa1e5ad0>
8020624c:	bc400007 	ldb	r17,0(r23)
80206250:	8a430426 	beq	r17,r9,80206e64 <___svfprintf_internal_r+0x18cc>
80206254:	94800414 	ori	r18,r18,16
80206258:	003d2306 	br	802056e8 <__reset+0xfa1e56e8>
8020625c:	18c03fcc 	andi	r3,r3,255
80206260:	18053f1e 	bne	r3,zero,80207760 <___svfprintf_internal_r+0x21c8>
80206264:	9080080c 	andi	r2,r18,32
80206268:	10028926 	beq	r2,zero,80206c90 <___svfprintf_internal_r+0x16f8>
8020626c:	d9402d17 	ldw	r5,180(sp)
80206270:	d9002f17 	ldw	r4,188(sp)
80206274:	28800017 	ldw	r2,0(r5)
80206278:	2007d7fa 	srai	r3,r4,31
8020627c:	29400104 	addi	r5,r5,4
80206280:	d9402d15 	stw	r5,180(sp)
80206284:	11000015 	stw	r4,0(r2)
80206288:	10c00115 	stw	r3,4(r2)
8020628c:	003ced06 	br	80205644 <__reset+0xfa1e5644>
80206290:	94801014 	ori	r18,r18,64
80206294:	bc400007 	ldb	r17,0(r23)
80206298:	003d1306 	br	802056e8 <__reset+0xfa1e56e8>
8020629c:	012008b4 	movhi	r4,32802
802062a0:	212cc704 	addi	r4,r4,-19684
802062a4:	0039883a 	mov	fp,zero
802062a8:	d9003a15 	stw	r4,232(sp)
802062ac:	04401e04 	movi	r17,120
802062b0:	003f8206 	br	802060bc <__reset+0xfa1e60bc>
802062b4:	18c03fcc 	andi	r3,r3,255
802062b8:	1805221e 	bne	r3,zero,80207744 <___svfprintf_internal_r+0x21ac>
802062bc:	883d9526 	beq	r17,zero,80205914 <__reset+0xfa1e5914>
802062c0:	00c00044 	movi	r3,1
802062c4:	d8c02a15 	stw	r3,168(sp)
802062c8:	dc401405 	stb	r17,80(sp)
802062cc:	d8002785 	stb	zero,158(sp)
802062d0:	003f9406 	br	80206124 <__reset+0xfa1e6124>
802062d4:	012008b4 	movhi	r4,32802
802062d8:	212cc704 	addi	r4,r4,-19684
802062dc:	d9003a15 	stw	r4,232(sp)
802062e0:	d8c02d15 	stw	r3,180(sp)
802062e4:	1025883a 	mov	r18,r2
802062e8:	04401e04 	movi	r17,120
802062ec:	a584b03a 	or	r2,r20,r22
802062f0:	1000fa1e 	bne	r2,zero,802066dc <___svfprintf_internal_r+0x1144>
802062f4:	0039883a 	mov	fp,zero
802062f8:	00800084 	movi	r2,2
802062fc:	10803fcc 	andi	r2,r2,255
80206300:	00c00044 	movi	r3,1
80206304:	10c21626 	beq	r2,r3,80206b60 <___svfprintf_internal_r+0x15c8>
80206308:	00c00084 	movi	r3,2
8020630c:	10fe301e 	bne	r2,r3,80205bd0 <__reset+0xfa1e5bd0>
80206310:	003d7606 	br	802058ec <__reset+0xfa1e58ec>
80206314:	d8c02017 	ldw	r3,128(sp)
80206318:	003e9506 	br	80205d70 <__reset+0xfa1e5d70>
8020631c:	00801944 	movi	r2,101
80206320:	14407c0e 	bge	r2,r17,80206514 <___svfprintf_internal_r+0xf7c>
80206324:	d9003617 	ldw	r4,216(sp)
80206328:	d9403717 	ldw	r5,220(sp)
8020632c:	000d883a 	mov	r6,zero
80206330:	000f883a 	mov	r7,zero
80206334:	d8c03d15 	stw	r3,244(sp)
80206338:	da003e15 	stw	r8,248(sp)
8020633c:	0213ca80 	call	80213ca8 <__eqdf2>
80206340:	d8c03d17 	ldw	r3,244(sp)
80206344:	da003e17 	ldw	r8,248(sp)
80206348:	1000f51e 	bne	r2,zero,80206720 <___svfprintf_internal_r+0x1188>
8020634c:	d8801f17 	ldw	r2,124(sp)
80206350:	012008b4 	movhi	r4,32802
80206354:	212cce04 	addi	r4,r4,-19656
80206358:	18c00044 	addi	r3,r3,1
8020635c:	10800044 	addi	r2,r2,1
80206360:	41000015 	stw	r4,0(r8)
80206364:	01000044 	movi	r4,1
80206368:	41000115 	stw	r4,4(r8)
8020636c:	d8c02015 	stw	r3,128(sp)
80206370:	d8801f15 	stw	r2,124(sp)
80206374:	010001c4 	movi	r4,7
80206378:	20826616 	blt	r4,r2,80206d14 <___svfprintf_internal_r+0x177c>
8020637c:	42000204 	addi	r8,r8,8
80206380:	d8802617 	ldw	r2,152(sp)
80206384:	d9403317 	ldw	r5,204(sp)
80206388:	11400216 	blt	r2,r5,80206394 <___svfprintf_internal_r+0xdfc>
8020638c:	9080004c 	andi	r2,r18,1
80206390:	103ed526 	beq	r2,zero,80205ee8 <__reset+0xfa1e5ee8>
80206394:	d8803817 	ldw	r2,224(sp)
80206398:	d9003417 	ldw	r4,208(sp)
8020639c:	d9403817 	ldw	r5,224(sp)
802063a0:	1887883a 	add	r3,r3,r2
802063a4:	d8801f17 	ldw	r2,124(sp)
802063a8:	41000015 	stw	r4,0(r8)
802063ac:	41400115 	stw	r5,4(r8)
802063b0:	10800044 	addi	r2,r2,1
802063b4:	d8c02015 	stw	r3,128(sp)
802063b8:	d8801f15 	stw	r2,124(sp)
802063bc:	010001c4 	movi	r4,7
802063c0:	2082af16 	blt	r4,r2,80206e80 <___svfprintf_internal_r+0x18e8>
802063c4:	42000204 	addi	r8,r8,8
802063c8:	d8803317 	ldw	r2,204(sp)
802063cc:	143fffc4 	addi	r16,r2,-1
802063d0:	043ec50e 	bge	zero,r16,80205ee8 <__reset+0xfa1e5ee8>
802063d4:	04400404 	movi	r17,16
802063d8:	d8801f17 	ldw	r2,124(sp)
802063dc:	8c00860e 	bge	r17,r16,802065f8 <___svfprintf_internal_r+0x1060>
802063e0:	016008b4 	movhi	r5,32802
802063e4:	296cce84 	addi	r5,r5,-19654
802063e8:	d9402b15 	stw	r5,172(sp)
802063ec:	058001c4 	movi	r22,7
802063f0:	dd002c17 	ldw	r20,176(sp)
802063f4:	00000306 	br	80206404 <___svfprintf_internal_r+0xe6c>
802063f8:	42000204 	addi	r8,r8,8
802063fc:	843ffc04 	addi	r16,r16,-16
80206400:	8c00800e 	bge	r17,r16,80206604 <___svfprintf_internal_r+0x106c>
80206404:	18c00404 	addi	r3,r3,16
80206408:	10800044 	addi	r2,r2,1
8020640c:	45400015 	stw	r21,0(r8)
80206410:	44400115 	stw	r17,4(r8)
80206414:	d8c02015 	stw	r3,128(sp)
80206418:	d8801f15 	stw	r2,124(sp)
8020641c:	b0bff60e 	bge	r22,r2,802063f8 <__reset+0xfa1e63f8>
80206420:	d9801e04 	addi	r6,sp,120
80206424:	a00b883a 	mov	r5,r20
80206428:	9809883a 	mov	r4,r19
8020642c:	020eb280 	call	8020eb28 <__ssprint_r>
80206430:	103d3e1e 	bne	r2,zero,8020592c <__reset+0xfa1e592c>
80206434:	d8c02017 	ldw	r3,128(sp)
80206438:	d8801f17 	ldw	r2,124(sp)
8020643c:	da000404 	addi	r8,sp,16
80206440:	003fee06 	br	802063fc <__reset+0xfa1e63fc>
80206444:	d9403117 	ldw	r5,196(sp)
80206448:	d8802a17 	ldw	r2,168(sp)
8020644c:	28adc83a 	sub	r22,r5,r2
80206450:	05be650e 	bge	zero,r22,80205de8 <__reset+0xfa1e5de8>
80206454:	07000404 	movi	fp,16
80206458:	d8801f17 	ldw	r2,124(sp)
8020645c:	e583a20e 	bge	fp,r22,802072e8 <___svfprintf_internal_r+0x1d50>
80206460:	016008b4 	movhi	r5,32802
80206464:	296cce84 	addi	r5,r5,-19654
80206468:	dc403015 	stw	r17,192(sp)
8020646c:	d9402b15 	stw	r5,172(sp)
80206470:	b023883a 	mov	r17,r22
80206474:	050001c4 	movi	r20,7
80206478:	902d883a 	mov	r22,r18
8020647c:	8025883a 	mov	r18,r16
80206480:	dc002c17 	ldw	r16,176(sp)
80206484:	00000306 	br	80206494 <___svfprintf_internal_r+0xefc>
80206488:	8c7ffc04 	addi	r17,r17,-16
8020648c:	42000204 	addi	r8,r8,8
80206490:	e440110e 	bge	fp,r17,802064d8 <___svfprintf_internal_r+0xf40>
80206494:	18c00404 	addi	r3,r3,16
80206498:	10800044 	addi	r2,r2,1
8020649c:	45400015 	stw	r21,0(r8)
802064a0:	47000115 	stw	fp,4(r8)
802064a4:	d8c02015 	stw	r3,128(sp)
802064a8:	d8801f15 	stw	r2,124(sp)
802064ac:	a0bff60e 	bge	r20,r2,80206488 <__reset+0xfa1e6488>
802064b0:	d9801e04 	addi	r6,sp,120
802064b4:	800b883a 	mov	r5,r16
802064b8:	9809883a 	mov	r4,r19
802064bc:	020eb280 	call	8020eb28 <__ssprint_r>
802064c0:	103d1a1e 	bne	r2,zero,8020592c <__reset+0xfa1e592c>
802064c4:	8c7ffc04 	addi	r17,r17,-16
802064c8:	d8c02017 	ldw	r3,128(sp)
802064cc:	d8801f17 	ldw	r2,124(sp)
802064d0:	da000404 	addi	r8,sp,16
802064d4:	e47fef16 	blt	fp,r17,80206494 <__reset+0xfa1e6494>
802064d8:	9021883a 	mov	r16,r18
802064dc:	b025883a 	mov	r18,r22
802064e0:	882d883a 	mov	r22,r17
802064e4:	dc403017 	ldw	r17,192(sp)
802064e8:	d9002b17 	ldw	r4,172(sp)
802064ec:	1d87883a 	add	r3,r3,r22
802064f0:	10800044 	addi	r2,r2,1
802064f4:	41000015 	stw	r4,0(r8)
802064f8:	45800115 	stw	r22,4(r8)
802064fc:	d8c02015 	stw	r3,128(sp)
80206500:	d8801f15 	stw	r2,124(sp)
80206504:	010001c4 	movi	r4,7
80206508:	20819a16 	blt	r4,r2,80206b74 <___svfprintf_internal_r+0x15dc>
8020650c:	42000204 	addi	r8,r8,8
80206510:	003e3506 	br	80205de8 <__reset+0xfa1e5de8>
80206514:	d9403317 	ldw	r5,204(sp)
80206518:	00800044 	movi	r2,1
8020651c:	18c00044 	addi	r3,r3,1
80206520:	1141710e 	bge	r2,r5,80206ae8 <___svfprintf_internal_r+0x1550>
80206524:	dc401f17 	ldw	r17,124(sp)
80206528:	00800044 	movi	r2,1
8020652c:	40800115 	stw	r2,4(r8)
80206530:	8c400044 	addi	r17,r17,1
80206534:	44000015 	stw	r16,0(r8)
80206538:	d8c02015 	stw	r3,128(sp)
8020653c:	dc401f15 	stw	r17,124(sp)
80206540:	008001c4 	movi	r2,7
80206544:	14417416 	blt	r2,r17,80206b18 <___svfprintf_internal_r+0x1580>
80206548:	42000204 	addi	r8,r8,8
8020654c:	d8803817 	ldw	r2,224(sp)
80206550:	d9003417 	ldw	r4,208(sp)
80206554:	8c400044 	addi	r17,r17,1
80206558:	10c7883a 	add	r3,r2,r3
8020655c:	40800115 	stw	r2,4(r8)
80206560:	41000015 	stw	r4,0(r8)
80206564:	d8c02015 	stw	r3,128(sp)
80206568:	dc401f15 	stw	r17,124(sp)
8020656c:	008001c4 	movi	r2,7
80206570:	14417216 	blt	r2,r17,80206b3c <___svfprintf_internal_r+0x15a4>
80206574:	45800204 	addi	r22,r8,8
80206578:	d9003617 	ldw	r4,216(sp)
8020657c:	d9403717 	ldw	r5,220(sp)
80206580:	000d883a 	mov	r6,zero
80206584:	000f883a 	mov	r7,zero
80206588:	d8c03d15 	stw	r3,244(sp)
8020658c:	0213ca80 	call	80213ca8 <__eqdf2>
80206590:	d8c03d17 	ldw	r3,244(sp)
80206594:	1000b326 	beq	r2,zero,80206864 <___svfprintf_internal_r+0x12cc>
80206598:	d9403317 	ldw	r5,204(sp)
8020659c:	84000044 	addi	r16,r16,1
802065a0:	8c400044 	addi	r17,r17,1
802065a4:	28bfffc4 	addi	r2,r5,-1
802065a8:	1887883a 	add	r3,r3,r2
802065ac:	b0800115 	stw	r2,4(r22)
802065b0:	b4000015 	stw	r16,0(r22)
802065b4:	d8c02015 	stw	r3,128(sp)
802065b8:	dc401f15 	stw	r17,124(sp)
802065bc:	008001c4 	movi	r2,7
802065c0:	1440d216 	blt	r2,r17,8020690c <___svfprintf_internal_r+0x1374>
802065c4:	b5800204 	addi	r22,r22,8
802065c8:	d9003b17 	ldw	r4,236(sp)
802065cc:	df0022c4 	addi	fp,sp,139
802065d0:	8c400044 	addi	r17,r17,1
802065d4:	20c7883a 	add	r3,r4,r3
802065d8:	b7000015 	stw	fp,0(r22)
802065dc:	b1000115 	stw	r4,4(r22)
802065e0:	d8c02015 	stw	r3,128(sp)
802065e4:	dc401f15 	stw	r17,124(sp)
802065e8:	008001c4 	movi	r2,7
802065ec:	14400e16 	blt	r2,r17,80206628 <___svfprintf_internal_r+0x1090>
802065f0:	b2000204 	addi	r8,r22,8
802065f4:	003e3c06 	br	80205ee8 <__reset+0xfa1e5ee8>
802065f8:	012008b4 	movhi	r4,32802
802065fc:	212cce84 	addi	r4,r4,-19654
80206600:	d9002b15 	stw	r4,172(sp)
80206604:	d9002b17 	ldw	r4,172(sp)
80206608:	1c07883a 	add	r3,r3,r16
8020660c:	44000115 	stw	r16,4(r8)
80206610:	41000015 	stw	r4,0(r8)
80206614:	10800044 	addi	r2,r2,1
80206618:	d8c02015 	stw	r3,128(sp)
8020661c:	d8801f15 	stw	r2,124(sp)
80206620:	010001c4 	movi	r4,7
80206624:	20be2f0e 	bge	r4,r2,80205ee4 <__reset+0xfa1e5ee4>
80206628:	d9402c17 	ldw	r5,176(sp)
8020662c:	d9801e04 	addi	r6,sp,120
80206630:	9809883a 	mov	r4,r19
80206634:	020eb280 	call	8020eb28 <__ssprint_r>
80206638:	103cbc1e 	bne	r2,zero,8020592c <__reset+0xfa1e592c>
8020663c:	d8c02017 	ldw	r3,128(sp)
80206640:	da000404 	addi	r8,sp,16
80206644:	003e2806 	br	80205ee8 <__reset+0xfa1e5ee8>
80206648:	d9402c17 	ldw	r5,176(sp)
8020664c:	d9801e04 	addi	r6,sp,120
80206650:	9809883a 	mov	r4,r19
80206654:	020eb280 	call	8020eb28 <__ssprint_r>
80206658:	103e5f26 	beq	r2,zero,80205fd8 <__reset+0xfa1e5fd8>
8020665c:	003cb306 	br	8020592c <__reset+0xfa1e592c>
80206660:	d9402c17 	ldw	r5,176(sp)
80206664:	d9801e04 	addi	r6,sp,120
80206668:	9809883a 	mov	r4,r19
8020666c:	020eb280 	call	8020eb28 <__ssprint_r>
80206670:	103cae1e 	bne	r2,zero,8020592c <__reset+0xfa1e592c>
80206674:	d8c02017 	ldw	r3,128(sp)
80206678:	da000404 	addi	r8,sp,16
8020667c:	003e0d06 	br	80205eb4 <__reset+0xfa1e5eb4>
80206680:	d9402c17 	ldw	r5,176(sp)
80206684:	d9801e04 	addi	r6,sp,120
80206688:	9809883a 	mov	r4,r19
8020668c:	020eb280 	call	8020eb28 <__ssprint_r>
80206690:	103ca61e 	bne	r2,zero,8020592c <__reset+0xfa1e592c>
80206694:	d8c02017 	ldw	r3,128(sp)
80206698:	da000404 	addi	r8,sp,16
8020669c:	003dc106 	br	80205da4 <__reset+0xfa1e5da4>
802066a0:	d9402c17 	ldw	r5,176(sp)
802066a4:	d9801e04 	addi	r6,sp,120
802066a8:	9809883a 	mov	r4,r19
802066ac:	020eb280 	call	8020eb28 <__ssprint_r>
802066b0:	103c9e1e 	bne	r2,zero,8020592c <__reset+0xfa1e592c>
802066b4:	d8c02017 	ldw	r3,128(sp)
802066b8:	da000404 	addi	r8,sp,16
802066bc:	003dc706 	br	80205ddc <__reset+0xfa1e5ddc>
802066c0:	d8802917 	ldw	r2,164(sp)
802066c4:	d8002785 	stb	zero,158(sp)
802066c8:	103f0816 	blt	r2,zero,802062ec <__reset+0xfa1e62ec>
802066cc:	00ffdfc4 	movi	r3,-129
802066d0:	a584b03a 	or	r2,r20,r22
802066d4:	90e4703a 	and	r18,r18,r3
802066d8:	103c8126 	beq	r2,zero,802058e0 <__reset+0xfa1e58e0>
802066dc:	0039883a 	mov	fp,zero
802066e0:	003e7606 	br	802060bc <__reset+0xfa1e60bc>
802066e4:	9080040c 	andi	r2,r18,16
802066e8:	10013d26 	beq	r2,zero,80206be0 <___svfprintf_internal_r+0x1648>
802066ec:	d9002d17 	ldw	r4,180(sp)
802066f0:	d9402917 	ldw	r5,164(sp)
802066f4:	d8002785 	stb	zero,158(sp)
802066f8:	20800104 	addi	r2,r4,4
802066fc:	25000017 	ldw	r20,0(r4)
80206700:	002d883a 	mov	r22,zero
80206704:	28013f16 	blt	r5,zero,80206c04 <___svfprintf_internal_r+0x166c>
80206708:	00ffdfc4 	movi	r3,-129
8020670c:	d8802d15 	stw	r2,180(sp)
80206710:	90e4703a 	and	r18,r18,r3
80206714:	a03d2b26 	beq	r20,zero,80205bc4 <__reset+0xfa1e5bc4>
80206718:	0039883a 	mov	fp,zero
8020671c:	003d2e06 	br	80205bd8 <__reset+0xfa1e5bd8>
80206720:	dc402617 	ldw	r17,152(sp)
80206724:	0441830e 	bge	zero,r17,80206d34 <___svfprintf_internal_r+0x179c>
80206728:	dc403217 	ldw	r17,200(sp)
8020672c:	d8803317 	ldw	r2,204(sp)
80206730:	1440010e 	bge	r2,r17,80206738 <___svfprintf_internal_r+0x11a0>
80206734:	1023883a 	mov	r17,r2
80206738:	04400a0e 	bge	zero,r17,80206764 <___svfprintf_internal_r+0x11cc>
8020673c:	d8801f17 	ldw	r2,124(sp)
80206740:	1c47883a 	add	r3,r3,r17
80206744:	44000015 	stw	r16,0(r8)
80206748:	10800044 	addi	r2,r2,1
8020674c:	44400115 	stw	r17,4(r8)
80206750:	d8c02015 	stw	r3,128(sp)
80206754:	d8801f15 	stw	r2,124(sp)
80206758:	010001c4 	movi	r4,7
8020675c:	20827516 	blt	r4,r2,80207134 <___svfprintf_internal_r+0x1b9c>
80206760:	42000204 	addi	r8,r8,8
80206764:	88027b16 	blt	r17,zero,80207154 <___svfprintf_internal_r+0x1bbc>
80206768:	d9003217 	ldw	r4,200(sp)
8020676c:	2463c83a 	sub	r17,r4,r17
80206770:	0440990e 	bge	zero,r17,802069d8 <___svfprintf_internal_r+0x1440>
80206774:	05800404 	movi	r22,16
80206778:	d8801f17 	ldw	r2,124(sp)
8020677c:	b441530e 	bge	r22,r17,80206ccc <___svfprintf_internal_r+0x1734>
80206780:	012008b4 	movhi	r4,32802
80206784:	212cce84 	addi	r4,r4,-19654
80206788:	d9002b15 	stw	r4,172(sp)
8020678c:	070001c4 	movi	fp,7
80206790:	dd002c17 	ldw	r20,176(sp)
80206794:	00000306 	br	802067a4 <___svfprintf_internal_r+0x120c>
80206798:	42000204 	addi	r8,r8,8
8020679c:	8c7ffc04 	addi	r17,r17,-16
802067a0:	b4414d0e 	bge	r22,r17,80206cd8 <___svfprintf_internal_r+0x1740>
802067a4:	18c00404 	addi	r3,r3,16
802067a8:	10800044 	addi	r2,r2,1
802067ac:	45400015 	stw	r21,0(r8)
802067b0:	45800115 	stw	r22,4(r8)
802067b4:	d8c02015 	stw	r3,128(sp)
802067b8:	d8801f15 	stw	r2,124(sp)
802067bc:	e0bff60e 	bge	fp,r2,80206798 <__reset+0xfa1e6798>
802067c0:	d9801e04 	addi	r6,sp,120
802067c4:	a00b883a 	mov	r5,r20
802067c8:	9809883a 	mov	r4,r19
802067cc:	020eb280 	call	8020eb28 <__ssprint_r>
802067d0:	103c561e 	bne	r2,zero,8020592c <__reset+0xfa1e592c>
802067d4:	d8c02017 	ldw	r3,128(sp)
802067d8:	d8801f17 	ldw	r2,124(sp)
802067dc:	da000404 	addi	r8,sp,16
802067e0:	003fee06 	br	8020679c <__reset+0xfa1e679c>
802067e4:	d9402c17 	ldw	r5,176(sp)
802067e8:	d9801e04 	addi	r6,sp,120
802067ec:	9809883a 	mov	r4,r19
802067f0:	020eb280 	call	8020eb28 <__ssprint_r>
802067f4:	103c4d1e 	bne	r2,zero,8020592c <__reset+0xfa1e592c>
802067f8:	d8c02017 	ldw	r3,128(sp)
802067fc:	df002787 	ldb	fp,158(sp)
80206800:	da000404 	addi	r8,sp,16
80206804:	003d5a06 	br	80205d70 <__reset+0xfa1e5d70>
80206808:	9080040c 	andi	r2,r18,16
8020680c:	10005c26 	beq	r2,zero,80206980 <___svfprintf_internal_r+0x13e8>
80206810:	d9402d17 	ldw	r5,180(sp)
80206814:	d8c02917 	ldw	r3,164(sp)
80206818:	d8002785 	stb	zero,158(sp)
8020681c:	28800104 	addi	r2,r5,4
80206820:	2d000017 	ldw	r20,0(r5)
80206824:	002d883a 	mov	r22,zero
80206828:	18005e16 	blt	r3,zero,802069a4 <___svfprintf_internal_r+0x140c>
8020682c:	00ffdfc4 	movi	r3,-129
80206830:	d8802d15 	stw	r2,180(sp)
80206834:	90e4703a 	and	r18,r18,r3
80206838:	0039883a 	mov	fp,zero
8020683c:	a03dfe26 	beq	r20,zero,80206038 <__reset+0xfa1e6038>
80206840:	00800244 	movi	r2,9
80206844:	153cb336 	bltu	r2,r20,80205b14 <__reset+0xfa1e5b14>
80206848:	a5000c04 	addi	r20,r20,48
8020684c:	dc001dc4 	addi	r16,sp,119
80206850:	dd001dc5 	stb	r20,119(sp)
80206854:	d8c02817 	ldw	r3,160(sp)
80206858:	1c07c83a 	sub	r3,r3,r16
8020685c:	d8c02e15 	stw	r3,184(sp)
80206860:	003cf506 	br	80205c38 <__reset+0xfa1e5c38>
80206864:	d8803317 	ldw	r2,204(sp)
80206868:	143fffc4 	addi	r16,r2,-1
8020686c:	043f560e 	bge	zero,r16,802065c8 <__reset+0xfa1e65c8>
80206870:	07000404 	movi	fp,16
80206874:	e403530e 	bge	fp,r16,802075c4 <___svfprintf_internal_r+0x202c>
80206878:	016008b4 	movhi	r5,32802
8020687c:	296cce84 	addi	r5,r5,-19654
80206880:	d9402b15 	stw	r5,172(sp)
80206884:	01c001c4 	movi	r7,7
80206888:	dd002c17 	ldw	r20,176(sp)
8020688c:	00000306 	br	8020689c <___svfprintf_internal_r+0x1304>
80206890:	843ffc04 	addi	r16,r16,-16
80206894:	b5800204 	addi	r22,r22,8
80206898:	e400130e 	bge	fp,r16,802068e8 <___svfprintf_internal_r+0x1350>
8020689c:	18c00404 	addi	r3,r3,16
802068a0:	8c400044 	addi	r17,r17,1
802068a4:	b5400015 	stw	r21,0(r22)
802068a8:	b7000115 	stw	fp,4(r22)
802068ac:	d8c02015 	stw	r3,128(sp)
802068b0:	dc401f15 	stw	r17,124(sp)
802068b4:	3c7ff60e 	bge	r7,r17,80206890 <__reset+0xfa1e6890>
802068b8:	d9801e04 	addi	r6,sp,120
802068bc:	a00b883a 	mov	r5,r20
802068c0:	9809883a 	mov	r4,r19
802068c4:	d9c03d15 	stw	r7,244(sp)
802068c8:	020eb280 	call	8020eb28 <__ssprint_r>
802068cc:	d9c03d17 	ldw	r7,244(sp)
802068d0:	103c161e 	bne	r2,zero,8020592c <__reset+0xfa1e592c>
802068d4:	843ffc04 	addi	r16,r16,-16
802068d8:	d8c02017 	ldw	r3,128(sp)
802068dc:	dc401f17 	ldw	r17,124(sp)
802068e0:	dd800404 	addi	r22,sp,16
802068e4:	e43fed16 	blt	fp,r16,8020689c <__reset+0xfa1e689c>
802068e8:	d8802b17 	ldw	r2,172(sp)
802068ec:	1c07883a 	add	r3,r3,r16
802068f0:	8c400044 	addi	r17,r17,1
802068f4:	b0800015 	stw	r2,0(r22)
802068f8:	b4000115 	stw	r16,4(r22)
802068fc:	d8c02015 	stw	r3,128(sp)
80206900:	dc401f15 	stw	r17,124(sp)
80206904:	008001c4 	movi	r2,7
80206908:	147f2e0e 	bge	r2,r17,802065c4 <__reset+0xfa1e65c4>
8020690c:	d9402c17 	ldw	r5,176(sp)
80206910:	d9801e04 	addi	r6,sp,120
80206914:	9809883a 	mov	r4,r19
80206918:	020eb280 	call	8020eb28 <__ssprint_r>
8020691c:	103c031e 	bne	r2,zero,8020592c <__reset+0xfa1e592c>
80206920:	d8c02017 	ldw	r3,128(sp)
80206924:	dc401f17 	ldw	r17,124(sp)
80206928:	dd800404 	addi	r22,sp,16
8020692c:	003f2606 	br	802065c8 <__reset+0xfa1e65c8>
80206930:	9080040c 	andi	r2,r18,16
80206934:	1000c326 	beq	r2,zero,80206c44 <___svfprintf_internal_r+0x16ac>
80206938:	d8802d17 	ldw	r2,180(sp)
8020693c:	15000017 	ldw	r20,0(r2)
80206940:	10800104 	addi	r2,r2,4
80206944:	d8802d15 	stw	r2,180(sp)
80206948:	a02dd7fa 	srai	r22,r20,31
8020694c:	b005883a 	mov	r2,r22
80206950:	103c680e 	bge	r2,zero,80205af4 <__reset+0xfa1e5af4>
80206954:	0529c83a 	sub	r20,zero,r20
80206958:	a004c03a 	cmpne	r2,r20,zero
8020695c:	05adc83a 	sub	r22,zero,r22
80206960:	b0adc83a 	sub	r22,r22,r2
80206964:	d8802917 	ldw	r2,164(sp)
80206968:	07000b44 	movi	fp,45
8020696c:	df002785 	stb	fp,158(sp)
80206970:	10022e16 	blt	r2,zero,8020722c <___svfprintf_internal_r+0x1c94>
80206974:	00bfdfc4 	movi	r2,-129
80206978:	90a4703a 	and	r18,r18,r2
8020697c:	003c6406 	br	80205b10 <__reset+0xfa1e5b10>
80206980:	9080100c 	andi	r2,r18,64
80206984:	d8002785 	stb	zero,158(sp)
80206988:	10012526 	beq	r2,zero,80206e20 <___svfprintf_internal_r+0x1888>
8020698c:	d9002d17 	ldw	r4,180(sp)
80206990:	d9402917 	ldw	r5,164(sp)
80206994:	002d883a 	mov	r22,zero
80206998:	20800104 	addi	r2,r4,4
8020699c:	2500000b 	ldhu	r20,0(r4)
802069a0:	283fa20e 	bge	r5,zero,8020682c <__reset+0xfa1e682c>
802069a4:	d8802d15 	stw	r2,180(sp)
802069a8:	0039883a 	mov	fp,zero
802069ac:	a584b03a 	or	r2,r20,r22
802069b0:	103c571e 	bne	r2,zero,80205b10 <__reset+0xfa1e5b10>
802069b4:	00800044 	movi	r2,1
802069b8:	003e5006 	br	802062fc <__reset+0xfa1e62fc>
802069bc:	d9402c17 	ldw	r5,176(sp)
802069c0:	d9801e04 	addi	r6,sp,120
802069c4:	9809883a 	mov	r4,r19
802069c8:	020eb280 	call	8020eb28 <__ssprint_r>
802069cc:	103bd71e 	bne	r2,zero,8020592c <__reset+0xfa1e592c>
802069d0:	d8c02017 	ldw	r3,128(sp)
802069d4:	da000404 	addi	r8,sp,16
802069d8:	d9003217 	ldw	r4,200(sp)
802069dc:	d8802617 	ldw	r2,152(sp)
802069e0:	d9403317 	ldw	r5,204(sp)
802069e4:	8123883a 	add	r17,r16,r4
802069e8:	11400216 	blt	r2,r5,802069f4 <___svfprintf_internal_r+0x145c>
802069ec:	9100004c 	andi	r4,r18,1
802069f0:	20000d26 	beq	r4,zero,80206a28 <___svfprintf_internal_r+0x1490>
802069f4:	d9003817 	ldw	r4,224(sp)
802069f8:	d9403417 	ldw	r5,208(sp)
802069fc:	1907883a 	add	r3,r3,r4
80206a00:	d9001f17 	ldw	r4,124(sp)
80206a04:	41400015 	stw	r5,0(r8)
80206a08:	d9403817 	ldw	r5,224(sp)
80206a0c:	21000044 	addi	r4,r4,1
80206a10:	d8c02015 	stw	r3,128(sp)
80206a14:	41400115 	stw	r5,4(r8)
80206a18:	d9001f15 	stw	r4,124(sp)
80206a1c:	014001c4 	movi	r5,7
80206a20:	2901dc16 	blt	r5,r4,80207194 <___svfprintf_internal_r+0x1bfc>
80206a24:	42000204 	addi	r8,r8,8
80206a28:	d9003317 	ldw	r4,204(sp)
80206a2c:	8121883a 	add	r16,r16,r4
80206a30:	2085c83a 	sub	r2,r4,r2
80206a34:	8461c83a 	sub	r16,r16,r17
80206a38:	1400010e 	bge	r2,r16,80206a40 <___svfprintf_internal_r+0x14a8>
80206a3c:	1021883a 	mov	r16,r2
80206a40:	04000a0e 	bge	zero,r16,80206a6c <___svfprintf_internal_r+0x14d4>
80206a44:	d9001f17 	ldw	r4,124(sp)
80206a48:	1c07883a 	add	r3,r3,r16
80206a4c:	44400015 	stw	r17,0(r8)
80206a50:	21000044 	addi	r4,r4,1
80206a54:	44000115 	stw	r16,4(r8)
80206a58:	d8c02015 	stw	r3,128(sp)
80206a5c:	d9001f15 	stw	r4,124(sp)
80206a60:	014001c4 	movi	r5,7
80206a64:	2901e616 	blt	r5,r4,80207200 <___svfprintf_internal_r+0x1c68>
80206a68:	42000204 	addi	r8,r8,8
80206a6c:	8001f616 	blt	r16,zero,80207248 <___svfprintf_internal_r+0x1cb0>
80206a70:	1421c83a 	sub	r16,r2,r16
80206a74:	043d1c0e 	bge	zero,r16,80205ee8 <__reset+0xfa1e5ee8>
80206a78:	04400404 	movi	r17,16
80206a7c:	d8801f17 	ldw	r2,124(sp)
80206a80:	8c3edd0e 	bge	r17,r16,802065f8 <__reset+0xfa1e65f8>
80206a84:	016008b4 	movhi	r5,32802
80206a88:	296cce84 	addi	r5,r5,-19654
80206a8c:	d9402b15 	stw	r5,172(sp)
80206a90:	058001c4 	movi	r22,7
80206a94:	dd002c17 	ldw	r20,176(sp)
80206a98:	00000306 	br	80206aa8 <___svfprintf_internal_r+0x1510>
80206a9c:	42000204 	addi	r8,r8,8
80206aa0:	843ffc04 	addi	r16,r16,-16
80206aa4:	8c3ed70e 	bge	r17,r16,80206604 <__reset+0xfa1e6604>
80206aa8:	18c00404 	addi	r3,r3,16
80206aac:	10800044 	addi	r2,r2,1
80206ab0:	45400015 	stw	r21,0(r8)
80206ab4:	44400115 	stw	r17,4(r8)
80206ab8:	d8c02015 	stw	r3,128(sp)
80206abc:	d8801f15 	stw	r2,124(sp)
80206ac0:	b0bff60e 	bge	r22,r2,80206a9c <__reset+0xfa1e6a9c>
80206ac4:	d9801e04 	addi	r6,sp,120
80206ac8:	a00b883a 	mov	r5,r20
80206acc:	9809883a 	mov	r4,r19
80206ad0:	020eb280 	call	8020eb28 <__ssprint_r>
80206ad4:	103b951e 	bne	r2,zero,8020592c <__reset+0xfa1e592c>
80206ad8:	d8c02017 	ldw	r3,128(sp)
80206adc:	d8801f17 	ldw	r2,124(sp)
80206ae0:	da000404 	addi	r8,sp,16
80206ae4:	003fee06 	br	80206aa0 <__reset+0xfa1e6aa0>
80206ae8:	9088703a 	and	r4,r18,r2
80206aec:	203e8d1e 	bne	r4,zero,80206524 <__reset+0xfa1e6524>
80206af0:	dc401f17 	ldw	r17,124(sp)
80206af4:	40800115 	stw	r2,4(r8)
80206af8:	44000015 	stw	r16,0(r8)
80206afc:	8c400044 	addi	r17,r17,1
80206b00:	d8c02015 	stw	r3,128(sp)
80206b04:	dc401f15 	stw	r17,124(sp)
80206b08:	008001c4 	movi	r2,7
80206b0c:	147f7f16 	blt	r2,r17,8020690c <__reset+0xfa1e690c>
80206b10:	45800204 	addi	r22,r8,8
80206b14:	003eac06 	br	802065c8 <__reset+0xfa1e65c8>
80206b18:	d9402c17 	ldw	r5,176(sp)
80206b1c:	d9801e04 	addi	r6,sp,120
80206b20:	9809883a 	mov	r4,r19
80206b24:	020eb280 	call	8020eb28 <__ssprint_r>
80206b28:	103b801e 	bne	r2,zero,8020592c <__reset+0xfa1e592c>
80206b2c:	d8c02017 	ldw	r3,128(sp)
80206b30:	dc401f17 	ldw	r17,124(sp)
80206b34:	da000404 	addi	r8,sp,16
80206b38:	003e8406 	br	8020654c <__reset+0xfa1e654c>
80206b3c:	d9402c17 	ldw	r5,176(sp)
80206b40:	d9801e04 	addi	r6,sp,120
80206b44:	9809883a 	mov	r4,r19
80206b48:	020eb280 	call	8020eb28 <__ssprint_r>
80206b4c:	103b771e 	bne	r2,zero,8020592c <__reset+0xfa1e592c>
80206b50:	d8c02017 	ldw	r3,128(sp)
80206b54:	dc401f17 	ldw	r17,124(sp)
80206b58:	dd800404 	addi	r22,sp,16
80206b5c:	003e8606 	br	80206578 <__reset+0xfa1e6578>
80206b60:	0029883a 	mov	r20,zero
80206b64:	a5000c04 	addi	r20,r20,48
80206b68:	dc001dc4 	addi	r16,sp,119
80206b6c:	dd001dc5 	stb	r20,119(sp)
80206b70:	003f3806 	br	80206854 <__reset+0xfa1e6854>
80206b74:	d9402c17 	ldw	r5,176(sp)
80206b78:	d9801e04 	addi	r6,sp,120
80206b7c:	9809883a 	mov	r4,r19
80206b80:	020eb280 	call	8020eb28 <__ssprint_r>
80206b84:	103b691e 	bne	r2,zero,8020592c <__reset+0xfa1e592c>
80206b88:	d8c02017 	ldw	r3,128(sp)
80206b8c:	da000404 	addi	r8,sp,16
80206b90:	003c9506 	br	80205de8 <__reset+0xfa1e5de8>
80206b94:	d9003617 	ldw	r4,216(sp)
80206b98:	d9403717 	ldw	r5,220(sp)
80206b9c:	da003e15 	stw	r8,248(sp)
80206ba0:	020e8480 	call	8020e848 <__fpclassifyd>
80206ba4:	da003e17 	ldw	r8,248(sp)
80206ba8:	1000bd1e 	bne	r2,zero,80206ea0 <___svfprintf_internal_r+0x1908>
80206bac:	008011c4 	movi	r2,71
80206bb0:	14411e0e 	bge	r2,r17,8020702c <___svfprintf_internal_r+0x1a94>
80206bb4:	042008b4 	movhi	r16,32802
80206bb8:	842cc104 	addi	r16,r16,-19708
80206bbc:	00c000c4 	movi	r3,3
80206bc0:	00bfdfc4 	movi	r2,-129
80206bc4:	d8c02a15 	stw	r3,168(sp)
80206bc8:	90a4703a 	and	r18,r18,r2
80206bcc:	df002783 	ldbu	fp,158(sp)
80206bd0:	d8c02e15 	stw	r3,184(sp)
80206bd4:	d8002915 	stw	zero,164(sp)
80206bd8:	d8003215 	stw	zero,200(sp)
80206bdc:	003c1c06 	br	80205c50 <__reset+0xfa1e5c50>
80206be0:	9080100c 	andi	r2,r18,64
80206be4:	d8002785 	stb	zero,158(sp)
80206be8:	10009426 	beq	r2,zero,80206e3c <___svfprintf_internal_r+0x18a4>
80206bec:	d8c02d17 	ldw	r3,180(sp)
80206bf0:	d9002917 	ldw	r4,164(sp)
80206bf4:	002d883a 	mov	r22,zero
80206bf8:	18800104 	addi	r2,r3,4
80206bfc:	1d00000b 	ldhu	r20,0(r3)
80206c00:	203ec10e 	bge	r4,zero,80206708 <__reset+0xfa1e6708>
80206c04:	a586b03a 	or	r3,r20,r22
80206c08:	d8802d15 	stw	r2,180(sp)
80206c0c:	183ec21e 	bne	r3,zero,80206718 <__reset+0xfa1e6718>
80206c10:	0039883a 	mov	fp,zero
80206c14:	0005883a 	mov	r2,zero
80206c18:	003db806 	br	802062fc <__reset+0xfa1e62fc>
80206c1c:	d8802d17 	ldw	r2,180(sp)
80206c20:	d8c02d17 	ldw	r3,180(sp)
80206c24:	d9002d17 	ldw	r4,180(sp)
80206c28:	10800017 	ldw	r2,0(r2)
80206c2c:	18c00117 	ldw	r3,4(r3)
80206c30:	21000204 	addi	r4,r4,8
80206c34:	d8803615 	stw	r2,216(sp)
80206c38:	d8c03715 	stw	r3,220(sp)
80206c3c:	d9002d15 	stw	r4,180(sp)
80206c40:	003b8206 	br	80205a4c <__reset+0xfa1e5a4c>
80206c44:	9080100c 	andi	r2,r18,64
80206c48:	10010726 	beq	r2,zero,80207068 <___svfprintf_internal_r+0x1ad0>
80206c4c:	d8c02d17 	ldw	r3,180(sp)
80206c50:	1d00000f 	ldh	r20,0(r3)
80206c54:	18c00104 	addi	r3,r3,4
80206c58:	d8c02d15 	stw	r3,180(sp)
80206c5c:	a02dd7fa 	srai	r22,r20,31
80206c60:	b005883a 	mov	r2,r22
80206c64:	003ba206 	br	80205af0 <__reset+0xfa1e5af0>
80206c68:	9080100c 	andi	r2,r18,64
80206c6c:	10010526 	beq	r2,zero,80207084 <___svfprintf_internal_r+0x1aec>
80206c70:	d9002d17 	ldw	r4,180(sp)
80206c74:	002d883a 	mov	r22,zero
80206c78:	2500000b 	ldhu	r20,0(r4)
80206c7c:	21000104 	addi	r4,r4,4
80206c80:	d9002d15 	stw	r4,180(sp)
80206c84:	003cfe06 	br	80206080 <__reset+0xfa1e6080>
80206c88:	bc400007 	ldb	r17,0(r23)
80206c8c:	003a9606 	br	802056e8 <__reset+0xfa1e56e8>
80206c90:	9080040c 	andi	r2,r18,16
80206c94:	10010126 	beq	r2,zero,8020709c <___svfprintf_internal_r+0x1b04>
80206c98:	d9402d17 	ldw	r5,180(sp)
80206c9c:	d8c02f17 	ldw	r3,188(sp)
80206ca0:	28800017 	ldw	r2,0(r5)
80206ca4:	29400104 	addi	r5,r5,4
80206ca8:	d9402d15 	stw	r5,180(sp)
80206cac:	10c00015 	stw	r3,0(r2)
80206cb0:	003a6406 	br	80205644 <__reset+0xfa1e5644>
80206cb4:	d9002917 	ldw	r4,164(sp)
80206cb8:	d8002785 	stb	zero,158(sp)
80206cbc:	203d8d16 	blt	r4,zero,802062f4 <__reset+0xfa1e62f4>
80206cc0:	00bfdfc4 	movi	r2,-129
80206cc4:	90a4703a 	and	r18,r18,r2
80206cc8:	003b0506 	br	802058e0 <__reset+0xfa1e58e0>
80206ccc:	016008b4 	movhi	r5,32802
80206cd0:	296cce84 	addi	r5,r5,-19654
80206cd4:	d9402b15 	stw	r5,172(sp)
80206cd8:	d9402b17 	ldw	r5,172(sp)
80206cdc:	1c47883a 	add	r3,r3,r17
80206ce0:	10800044 	addi	r2,r2,1
80206ce4:	41400015 	stw	r5,0(r8)
80206ce8:	44400115 	stw	r17,4(r8)
80206cec:	d8c02015 	stw	r3,128(sp)
80206cf0:	d8801f15 	stw	r2,124(sp)
80206cf4:	010001c4 	movi	r4,7
80206cf8:	20bf3016 	blt	r4,r2,802069bc <__reset+0xfa1e69bc>
80206cfc:	42000204 	addi	r8,r8,8
80206d00:	003f3506 	br	802069d8 <__reset+0xfa1e69d8>
80206d04:	012008b4 	movhi	r4,32802
80206d08:	212cce84 	addi	r4,r4,-19654
80206d0c:	d9002b15 	stw	r4,172(sp)
80206d10:	003c5e06 	br	80205e8c <__reset+0xfa1e5e8c>
80206d14:	d9402c17 	ldw	r5,176(sp)
80206d18:	d9801e04 	addi	r6,sp,120
80206d1c:	9809883a 	mov	r4,r19
80206d20:	020eb280 	call	8020eb28 <__ssprint_r>
80206d24:	103b011e 	bne	r2,zero,8020592c <__reset+0xfa1e592c>
80206d28:	d8c02017 	ldw	r3,128(sp)
80206d2c:	da000404 	addi	r8,sp,16
80206d30:	003d9306 	br	80206380 <__reset+0xfa1e6380>
80206d34:	d8801f17 	ldw	r2,124(sp)
80206d38:	016008b4 	movhi	r5,32802
80206d3c:	01000044 	movi	r4,1
80206d40:	18c00044 	addi	r3,r3,1
80206d44:	10800044 	addi	r2,r2,1
80206d48:	296cce04 	addi	r5,r5,-19656
80206d4c:	41000115 	stw	r4,4(r8)
80206d50:	41400015 	stw	r5,0(r8)
80206d54:	d8c02015 	stw	r3,128(sp)
80206d58:	d8801f15 	stw	r2,124(sp)
80206d5c:	010001c4 	movi	r4,7
80206d60:	2080b516 	blt	r4,r2,80207038 <___svfprintf_internal_r+0x1aa0>
80206d64:	42000204 	addi	r8,r8,8
80206d68:	8800041e 	bne	r17,zero,80206d7c <___svfprintf_internal_r+0x17e4>
80206d6c:	d8803317 	ldw	r2,204(sp)
80206d70:	1000021e 	bne	r2,zero,80206d7c <___svfprintf_internal_r+0x17e4>
80206d74:	9080004c 	andi	r2,r18,1
80206d78:	103c5b26 	beq	r2,zero,80205ee8 <__reset+0xfa1e5ee8>
80206d7c:	d9003817 	ldw	r4,224(sp)
80206d80:	d8801f17 	ldw	r2,124(sp)
80206d84:	d9403417 	ldw	r5,208(sp)
80206d88:	20c7883a 	add	r3,r4,r3
80206d8c:	10800044 	addi	r2,r2,1
80206d90:	41000115 	stw	r4,4(r8)
80206d94:	41400015 	stw	r5,0(r8)
80206d98:	d8c02015 	stw	r3,128(sp)
80206d9c:	d8801f15 	stw	r2,124(sp)
80206da0:	010001c4 	movi	r4,7
80206da4:	20818016 	blt	r4,r2,802073a8 <___svfprintf_internal_r+0x1e10>
80206da8:	42000204 	addi	r8,r8,8
80206dac:	0463c83a 	sub	r17,zero,r17
80206db0:	0440cb0e 	bge	zero,r17,802070e0 <___svfprintf_internal_r+0x1b48>
80206db4:	05800404 	movi	r22,16
80206db8:	b440e80e 	bge	r22,r17,8020715c <___svfprintf_internal_r+0x1bc4>
80206dbc:	016008b4 	movhi	r5,32802
80206dc0:	296cce84 	addi	r5,r5,-19654
80206dc4:	d9402b15 	stw	r5,172(sp)
80206dc8:	070001c4 	movi	fp,7
80206dcc:	dd002c17 	ldw	r20,176(sp)
80206dd0:	00000306 	br	80206de0 <___svfprintf_internal_r+0x1848>
80206dd4:	42000204 	addi	r8,r8,8
80206dd8:	8c7ffc04 	addi	r17,r17,-16
80206ddc:	b440e20e 	bge	r22,r17,80207168 <___svfprintf_internal_r+0x1bd0>
80206de0:	18c00404 	addi	r3,r3,16
80206de4:	10800044 	addi	r2,r2,1
80206de8:	45400015 	stw	r21,0(r8)
80206dec:	45800115 	stw	r22,4(r8)
80206df0:	d8c02015 	stw	r3,128(sp)
80206df4:	d8801f15 	stw	r2,124(sp)
80206df8:	e0bff60e 	bge	fp,r2,80206dd4 <__reset+0xfa1e6dd4>
80206dfc:	d9801e04 	addi	r6,sp,120
80206e00:	a00b883a 	mov	r5,r20
80206e04:	9809883a 	mov	r4,r19
80206e08:	020eb280 	call	8020eb28 <__ssprint_r>
80206e0c:	103ac71e 	bne	r2,zero,8020592c <__reset+0xfa1e592c>
80206e10:	d8c02017 	ldw	r3,128(sp)
80206e14:	d8801f17 	ldw	r2,124(sp)
80206e18:	da000404 	addi	r8,sp,16
80206e1c:	003fee06 	br	80206dd8 <__reset+0xfa1e6dd8>
80206e20:	d8c02d17 	ldw	r3,180(sp)
80206e24:	d9002917 	ldw	r4,164(sp)
80206e28:	002d883a 	mov	r22,zero
80206e2c:	18800104 	addi	r2,r3,4
80206e30:	1d000017 	ldw	r20,0(r3)
80206e34:	203e7d0e 	bge	r4,zero,8020682c <__reset+0xfa1e682c>
80206e38:	003eda06 	br	802069a4 <__reset+0xfa1e69a4>
80206e3c:	d9402d17 	ldw	r5,180(sp)
80206e40:	d8c02917 	ldw	r3,164(sp)
80206e44:	002d883a 	mov	r22,zero
80206e48:	28800104 	addi	r2,r5,4
80206e4c:	2d000017 	ldw	r20,0(r5)
80206e50:	183e2d0e 	bge	r3,zero,80206708 <__reset+0xfa1e6708>
80206e54:	003f6b06 	br	80206c04 <__reset+0xfa1e6c04>
80206e58:	d8c02d15 	stw	r3,180(sp)
80206e5c:	0039883a 	mov	fp,zero
80206e60:	003ed206 	br	802069ac <__reset+0xfa1e69ac>
80206e64:	bc400043 	ldbu	r17,1(r23)
80206e68:	94800814 	ori	r18,r18,32
80206e6c:	bdc00044 	addi	r23,r23,1
80206e70:	8c403fcc 	andi	r17,r17,255
80206e74:	8c40201c 	xori	r17,r17,128
80206e78:	8c7fe004 	addi	r17,r17,-128
80206e7c:	003a1a06 	br	802056e8 <__reset+0xfa1e56e8>
80206e80:	d9402c17 	ldw	r5,176(sp)
80206e84:	d9801e04 	addi	r6,sp,120
80206e88:	9809883a 	mov	r4,r19
80206e8c:	020eb280 	call	8020eb28 <__ssprint_r>
80206e90:	103aa61e 	bne	r2,zero,8020592c <__reset+0xfa1e592c>
80206e94:	d8c02017 	ldw	r3,128(sp)
80206e98:	da000404 	addi	r8,sp,16
80206e9c:	003d4a06 	br	802063c8 <__reset+0xfa1e63c8>
80206ea0:	d9002917 	ldw	r4,164(sp)
80206ea4:	05bff7c4 	movi	r22,-33
80206ea8:	00bfffc4 	movi	r2,-1
80206eac:	8dac703a 	and	r22,r17,r22
80206eb0:	20806a26 	beq	r4,r2,8020705c <___svfprintf_internal_r+0x1ac4>
80206eb4:	008011c4 	movi	r2,71
80206eb8:	b0813726 	beq	r22,r2,80207398 <___svfprintf_internal_r+0x1e00>
80206ebc:	d9003717 	ldw	r4,220(sp)
80206ec0:	90c04014 	ori	r3,r18,256
80206ec4:	d8c02b15 	stw	r3,172(sp)
80206ec8:	20015d16 	blt	r4,zero,80207440 <___svfprintf_internal_r+0x1ea8>
80206ecc:	dd003717 	ldw	r20,220(sp)
80206ed0:	d8002a05 	stb	zero,168(sp)
80206ed4:	00801984 	movi	r2,102
80206ed8:	88814026 	beq	r17,r2,802073dc <___svfprintf_internal_r+0x1e44>
80206edc:	00801184 	movi	r2,70
80206ee0:	88817126 	beq	r17,r2,802074a8 <___svfprintf_internal_r+0x1f10>
80206ee4:	00801144 	movi	r2,69
80206ee8:	b0816226 	beq	r22,r2,80207474 <___svfprintf_internal_r+0x1edc>
80206eec:	d8c02917 	ldw	r3,164(sp)
80206ef0:	d8802104 	addi	r2,sp,132
80206ef4:	d8800315 	stw	r2,12(sp)
80206ef8:	d9403617 	ldw	r5,216(sp)
80206efc:	d8802504 	addi	r2,sp,148
80206f00:	d8800215 	stw	r2,8(sp)
80206f04:	d8802604 	addi	r2,sp,152
80206f08:	d8c00015 	stw	r3,0(sp)
80206f0c:	d8800115 	stw	r2,4(sp)
80206f10:	01c00084 	movi	r7,2
80206f14:	a00d883a 	mov	r6,r20
80206f18:	9809883a 	mov	r4,r19
80206f1c:	d8c03d15 	stw	r3,244(sp)
80206f20:	da003e15 	stw	r8,248(sp)
80206f24:	0209d940 	call	80209d94 <_dtoa_r>
80206f28:	1021883a 	mov	r16,r2
80206f2c:	008019c4 	movi	r2,103
80206f30:	d8c03d17 	ldw	r3,244(sp)
80206f34:	da003e17 	ldw	r8,248(sp)
80206f38:	8880e726 	beq	r17,r2,802072d8 <___svfprintf_internal_r+0x1d40>
80206f3c:	008011c4 	movi	r2,71
80206f40:	8880d426 	beq	r17,r2,80207294 <___svfprintf_internal_r+0x1cfc>
80206f44:	80f9883a 	add	fp,r16,r3
80206f48:	d9003617 	ldw	r4,216(sp)
80206f4c:	000d883a 	mov	r6,zero
80206f50:	000f883a 	mov	r7,zero
80206f54:	a00b883a 	mov	r5,r20
80206f58:	da003e15 	stw	r8,248(sp)
80206f5c:	0213ca80 	call	80213ca8 <__eqdf2>
80206f60:	da003e17 	ldw	r8,248(sp)
80206f64:	1000e426 	beq	r2,zero,802072f8 <___svfprintf_internal_r+0x1d60>
80206f68:	d8802117 	ldw	r2,132(sp)
80206f6c:	1700062e 	bgeu	r2,fp,80206f88 <___svfprintf_internal_r+0x19f0>
80206f70:	01000c04 	movi	r4,48
80206f74:	10c00044 	addi	r3,r2,1
80206f78:	d8c02115 	stw	r3,132(sp)
80206f7c:	11000005 	stb	r4,0(r2)
80206f80:	d8802117 	ldw	r2,132(sp)
80206f84:	173ffb36 	bltu	r2,fp,80206f74 <__reset+0xfa1e6f74>
80206f88:	1405c83a 	sub	r2,r2,r16
80206f8c:	d8803315 	stw	r2,204(sp)
80206f90:	008011c4 	movi	r2,71
80206f94:	b080c526 	beq	r22,r2,802072ac <___svfprintf_internal_r+0x1d14>
80206f98:	00801944 	movi	r2,101
80206f9c:	1441d90e 	bge	r2,r17,80207704 <___svfprintf_internal_r+0x216c>
80206fa0:	d8c02617 	ldw	r3,152(sp)
80206fa4:	00801984 	movi	r2,102
80206fa8:	d8c03215 	stw	r3,200(sp)
80206fac:	88813426 	beq	r17,r2,80207480 <___svfprintf_internal_r+0x1ee8>
80206fb0:	d8c03217 	ldw	r3,200(sp)
80206fb4:	d9003317 	ldw	r4,204(sp)
80206fb8:	19012516 	blt	r3,r4,80207450 <___svfprintf_internal_r+0x1eb8>
80206fbc:	9480004c 	andi	r18,r18,1
80206fc0:	9001841e 	bne	r18,zero,802075d4 <___svfprintf_internal_r+0x203c>
80206fc4:	1805883a 	mov	r2,r3
80206fc8:	1801cc16 	blt	r3,zero,802076fc <___svfprintf_internal_r+0x2164>
80206fcc:	d8c03217 	ldw	r3,200(sp)
80206fd0:	044019c4 	movi	r17,103
80206fd4:	d8c02e15 	stw	r3,184(sp)
80206fd8:	df002a07 	ldb	fp,168(sp)
80206fdc:	e000a61e 	bne	fp,zero,80207278 <___svfprintf_internal_r+0x1ce0>
80206fe0:	df002783 	ldbu	fp,158(sp)
80206fe4:	d8802a15 	stw	r2,168(sp)
80206fe8:	dc802b17 	ldw	r18,172(sp)
80206fec:	d8002915 	stw	zero,164(sp)
80206ff0:	003b1706 	br	80205c50 <__reset+0xfa1e5c50>
80206ff4:	042008b4 	movhi	r16,32802
80206ff8:	842cbe04 	addi	r16,r16,-19720
80206ffc:	003aa606 	br	80205a98 <__reset+0xfa1e5a98>
80207000:	d9003917 	ldw	r4,228(sp)
80207004:	04001004 	movi	r16,64
80207008:	800b883a 	mov	r5,r16
8020700c:	020c7740 	call	8020c774 <_malloc_r>
80207010:	d9002c17 	ldw	r4,176(sp)
80207014:	20800015 	stw	r2,0(r4)
80207018:	20800415 	stw	r2,16(r4)
8020701c:	1001cb26 	beq	r2,zero,8020774c <___svfprintf_internal_r+0x21b4>
80207020:	d8802c17 	ldw	r2,176(sp)
80207024:	14000515 	stw	r16,20(r2)
80207028:	00397606 	br	80205604 <__reset+0xfa1e5604>
8020702c:	042008b4 	movhi	r16,32802
80207030:	842cc004 	addi	r16,r16,-19712
80207034:	003ee106 	br	80206bbc <__reset+0xfa1e6bbc>
80207038:	d9402c17 	ldw	r5,176(sp)
8020703c:	d9801e04 	addi	r6,sp,120
80207040:	9809883a 	mov	r4,r19
80207044:	020eb280 	call	8020eb28 <__ssprint_r>
80207048:	103a381e 	bne	r2,zero,8020592c <__reset+0xfa1e592c>
8020704c:	dc402617 	ldw	r17,152(sp)
80207050:	d8c02017 	ldw	r3,128(sp)
80207054:	da000404 	addi	r8,sp,16
80207058:	003f4306 	br	80206d68 <__reset+0xfa1e6d68>
8020705c:	01400184 	movi	r5,6
80207060:	d9402915 	stw	r5,164(sp)
80207064:	003f9506 	br	80206ebc <__reset+0xfa1e6ebc>
80207068:	d9002d17 	ldw	r4,180(sp)
8020706c:	25000017 	ldw	r20,0(r4)
80207070:	21000104 	addi	r4,r4,4
80207074:	d9002d15 	stw	r4,180(sp)
80207078:	a02dd7fa 	srai	r22,r20,31
8020707c:	b005883a 	mov	r2,r22
80207080:	003a9b06 	br	80205af0 <__reset+0xfa1e5af0>
80207084:	d9402d17 	ldw	r5,180(sp)
80207088:	002d883a 	mov	r22,zero
8020708c:	2d000017 	ldw	r20,0(r5)
80207090:	29400104 	addi	r5,r5,4
80207094:	d9402d15 	stw	r5,180(sp)
80207098:	003bf906 	br	80206080 <__reset+0xfa1e6080>
8020709c:	9480100c 	andi	r18,r18,64
802070a0:	90006e26 	beq	r18,zero,8020725c <___svfprintf_internal_r+0x1cc4>
802070a4:	d9002d17 	ldw	r4,180(sp)
802070a8:	d9402f17 	ldw	r5,188(sp)
802070ac:	20800017 	ldw	r2,0(r4)
802070b0:	21000104 	addi	r4,r4,4
802070b4:	d9002d15 	stw	r4,180(sp)
802070b8:	1140000d 	sth	r5,0(r2)
802070bc:	00396106 	br	80205644 <__reset+0xfa1e5644>
802070c0:	d9402c17 	ldw	r5,176(sp)
802070c4:	d9801e04 	addi	r6,sp,120
802070c8:	9809883a 	mov	r4,r19
802070cc:	020eb280 	call	8020eb28 <__ssprint_r>
802070d0:	103a161e 	bne	r2,zero,8020592c <__reset+0xfa1e592c>
802070d4:	d8c02017 	ldw	r3,128(sp)
802070d8:	d8801f17 	ldw	r2,124(sp)
802070dc:	da000404 	addi	r8,sp,16
802070e0:	d9403317 	ldw	r5,204(sp)
802070e4:	10800044 	addi	r2,r2,1
802070e8:	44000015 	stw	r16,0(r8)
802070ec:	28c7883a 	add	r3,r5,r3
802070f0:	003b7706 	br	80205ed0 <__reset+0xfa1e5ed0>
802070f4:	8009883a 	mov	r4,r16
802070f8:	da003e15 	stw	r8,248(sp)
802070fc:	02055000 	call	80205500 <strlen>
80207100:	d8802e15 	stw	r2,184(sp)
80207104:	da003e17 	ldw	r8,248(sp)
80207108:	103c280e 	bge	r2,zero,802061ac <__reset+0xfa1e61ac>
8020710c:	0005883a 	mov	r2,zero
80207110:	003c2606 	br	802061ac <__reset+0xfa1e61ac>
80207114:	00bfffc4 	movi	r2,-1
80207118:	003a0906 	br	80205940 <__reset+0xfa1e5940>
8020711c:	012008b4 	movhi	r4,32802
80207120:	212cd284 	addi	r4,r4,-19638
80207124:	d9003515 	stw	r4,212(sp)
80207128:	003b0606 	br	80205d44 <__reset+0xfa1e5d44>
8020712c:	013fffc4 	movi	r4,-1
80207130:	003a2706 	br	802059d0 <__reset+0xfa1e59d0>
80207134:	d9402c17 	ldw	r5,176(sp)
80207138:	d9801e04 	addi	r6,sp,120
8020713c:	9809883a 	mov	r4,r19
80207140:	020eb280 	call	8020eb28 <__ssprint_r>
80207144:	1039f91e 	bne	r2,zero,8020592c <__reset+0xfa1e592c>
80207148:	d8c02017 	ldw	r3,128(sp)
8020714c:	da000404 	addi	r8,sp,16
80207150:	003d8406 	br	80206764 <__reset+0xfa1e6764>
80207154:	0023883a 	mov	r17,zero
80207158:	003d8306 	br	80206768 <__reset+0xfa1e6768>
8020715c:	012008b4 	movhi	r4,32802
80207160:	212cce84 	addi	r4,r4,-19654
80207164:	d9002b15 	stw	r4,172(sp)
80207168:	d9002b17 	ldw	r4,172(sp)
8020716c:	1c47883a 	add	r3,r3,r17
80207170:	10800044 	addi	r2,r2,1
80207174:	41000015 	stw	r4,0(r8)
80207178:	44400115 	stw	r17,4(r8)
8020717c:	d8c02015 	stw	r3,128(sp)
80207180:	d8801f15 	stw	r2,124(sp)
80207184:	010001c4 	movi	r4,7
80207188:	20bfcd16 	blt	r4,r2,802070c0 <__reset+0xfa1e70c0>
8020718c:	42000204 	addi	r8,r8,8
80207190:	003fd306 	br	802070e0 <__reset+0xfa1e70e0>
80207194:	d9402c17 	ldw	r5,176(sp)
80207198:	d9801e04 	addi	r6,sp,120
8020719c:	9809883a 	mov	r4,r19
802071a0:	020eb280 	call	8020eb28 <__ssprint_r>
802071a4:	1039e11e 	bne	r2,zero,8020592c <__reset+0xfa1e592c>
802071a8:	d8802617 	ldw	r2,152(sp)
802071ac:	d8c02017 	ldw	r3,128(sp)
802071b0:	da000404 	addi	r8,sp,16
802071b4:	003e1c06 	br	80206a28 <__reset+0xfa1e6a28>
802071b8:	d8802917 	ldw	r2,164(sp)
802071bc:	00c00184 	movi	r3,6
802071c0:	1880012e 	bgeu	r3,r2,802071c8 <___svfprintf_internal_r+0x1c30>
802071c4:	1805883a 	mov	r2,r3
802071c8:	d8802e15 	stw	r2,184(sp)
802071cc:	1000f316 	blt	r2,zero,8020759c <___svfprintf_internal_r+0x2004>
802071d0:	042008b4 	movhi	r16,32802
802071d4:	d8802a15 	stw	r2,168(sp)
802071d8:	dd002d15 	stw	r20,180(sp)
802071dc:	d8002915 	stw	zero,164(sp)
802071e0:	d8003215 	stw	zero,200(sp)
802071e4:	842ccc04 	addi	r16,r16,-19664
802071e8:	0039883a 	mov	fp,zero
802071ec:	003a9f06 	br	80205c6c <__reset+0xfa1e5c6c>
802071f0:	012008b4 	movhi	r4,32802
802071f4:	212cd284 	addi	r4,r4,-19638
802071f8:	d9003515 	stw	r4,212(sp)
802071fc:	003b5f06 	br	80205f7c <__reset+0xfa1e5f7c>
80207200:	d9402c17 	ldw	r5,176(sp)
80207204:	d9801e04 	addi	r6,sp,120
80207208:	9809883a 	mov	r4,r19
8020720c:	020eb280 	call	8020eb28 <__ssprint_r>
80207210:	1039c61e 	bne	r2,zero,8020592c <__reset+0xfa1e592c>
80207214:	d8802617 	ldw	r2,152(sp)
80207218:	d9403317 	ldw	r5,204(sp)
8020721c:	d8c02017 	ldw	r3,128(sp)
80207220:	da000404 	addi	r8,sp,16
80207224:	2885c83a 	sub	r2,r5,r2
80207228:	003e1006 	br	80206a6c <__reset+0xfa1e6a6c>
8020722c:	00800044 	movi	r2,1
80207230:	10803fcc 	andi	r2,r2,255
80207234:	00c00044 	movi	r3,1
80207238:	10fa3526 	beq	r2,r3,80205b10 <__reset+0xfa1e5b10>
8020723c:	00c00084 	movi	r3,2
80207240:	10fb9e26 	beq	r2,r3,802060bc <__reset+0xfa1e60bc>
80207244:	003a6406 	br	80205bd8 <__reset+0xfa1e5bd8>
80207248:	0021883a 	mov	r16,zero
8020724c:	003e0806 	br	80206a70 <__reset+0xfa1e6a70>
80207250:	07000b44 	movi	fp,45
80207254:	df002785 	stb	fp,158(sp)
80207258:	003a0b06 	br	80205a88 <__reset+0xfa1e5a88>
8020725c:	d8c02d17 	ldw	r3,180(sp)
80207260:	d9002f17 	ldw	r4,188(sp)
80207264:	18800017 	ldw	r2,0(r3)
80207268:	18c00104 	addi	r3,r3,4
8020726c:	d8c02d15 	stw	r3,180(sp)
80207270:	11000015 	stw	r4,0(r2)
80207274:	0038f306 	br	80205644 <__reset+0xfa1e5644>
80207278:	00c00b44 	movi	r3,45
8020727c:	d8c02785 	stb	r3,158(sp)
80207280:	d8802a15 	stw	r2,168(sp)
80207284:	dc802b17 	ldw	r18,172(sp)
80207288:	d8002915 	stw	zero,164(sp)
8020728c:	07000b44 	movi	fp,45
80207290:	003a7306 	br	80205c60 <__reset+0xfa1e5c60>
80207294:	9080004c 	andi	r2,r18,1
80207298:	1000941e 	bne	r2,zero,802074ec <___svfprintf_internal_r+0x1f54>
8020729c:	d8802117 	ldw	r2,132(sp)
802072a0:	1405c83a 	sub	r2,r2,r16
802072a4:	d8803315 	stw	r2,204(sp)
802072a8:	b441161e 	bne	r22,r17,80207704 <___svfprintf_internal_r+0x216c>
802072ac:	dd802617 	ldw	r22,152(sp)
802072b0:	00bfff44 	movi	r2,-3
802072b4:	b0801a16 	blt	r22,r2,80207320 <___svfprintf_internal_r+0x1d88>
802072b8:	d9402917 	ldw	r5,164(sp)
802072bc:	2d801816 	blt	r5,r22,80207320 <___svfprintf_internal_r+0x1d88>
802072c0:	dd803215 	stw	r22,200(sp)
802072c4:	003f3a06 	br	80206fb0 <__reset+0xfa1e6fb0>
802072c8:	1025883a 	mov	r18,r2
802072cc:	0039883a 	mov	fp,zero
802072d0:	00800084 	movi	r2,2
802072d4:	003fd606 	br	80207230 <__reset+0xfa1e7230>
802072d8:	9080004c 	andi	r2,r18,1
802072dc:	103f191e 	bne	r2,zero,80206f44 <__reset+0xfa1e6f44>
802072e0:	d8802117 	ldw	r2,132(sp)
802072e4:	003f2806 	br	80206f88 <__reset+0xfa1e6f88>
802072e8:	012008b4 	movhi	r4,32802
802072ec:	212cce84 	addi	r4,r4,-19654
802072f0:	d9002b15 	stw	r4,172(sp)
802072f4:	003c7c06 	br	802064e8 <__reset+0xfa1e64e8>
802072f8:	e005883a 	mov	r2,fp
802072fc:	003f2206 	br	80206f88 <__reset+0xfa1e6f88>
80207300:	d9402917 	ldw	r5,164(sp)
80207304:	df002783 	ldbu	fp,158(sp)
80207308:	dd002d15 	stw	r20,180(sp)
8020730c:	d9402a15 	stw	r5,168(sp)
80207310:	d9402e15 	stw	r5,184(sp)
80207314:	d8002915 	stw	zero,164(sp)
80207318:	d8003215 	stw	zero,200(sp)
8020731c:	003a4c06 	br	80205c50 <__reset+0xfa1e5c50>
80207320:	8c7fff84 	addi	r17,r17,-2
80207324:	b5bfffc4 	addi	r22,r22,-1
80207328:	dd802615 	stw	r22,152(sp)
8020732c:	dc4022c5 	stb	r17,139(sp)
80207330:	b000c316 	blt	r22,zero,80207640 <___svfprintf_internal_r+0x20a8>
80207334:	00800ac4 	movi	r2,43
80207338:	d8802305 	stb	r2,140(sp)
8020733c:	00800244 	movi	r2,9
80207340:	15806e16 	blt	r2,r22,802074fc <___svfprintf_internal_r+0x1f64>
80207344:	00800c04 	movi	r2,48
80207348:	b5800c04 	addi	r22,r22,48
8020734c:	d8802345 	stb	r2,141(sp)
80207350:	dd802385 	stb	r22,142(sp)
80207354:	d88023c4 	addi	r2,sp,143
80207358:	df0022c4 	addi	fp,sp,139
8020735c:	d8c03317 	ldw	r3,204(sp)
80207360:	1739c83a 	sub	fp,r2,fp
80207364:	d9003317 	ldw	r4,204(sp)
80207368:	e0c7883a 	add	r3,fp,r3
8020736c:	df003b15 	stw	fp,236(sp)
80207370:	d8c02e15 	stw	r3,184(sp)
80207374:	00800044 	movi	r2,1
80207378:	1100b70e 	bge	r2,r4,80207658 <___svfprintf_internal_r+0x20c0>
8020737c:	d8c02e17 	ldw	r3,184(sp)
80207380:	18c00044 	addi	r3,r3,1
80207384:	d8c02e15 	stw	r3,184(sp)
80207388:	1805883a 	mov	r2,r3
8020738c:	1800b016 	blt	r3,zero,80207650 <___svfprintf_internal_r+0x20b8>
80207390:	d8003215 	stw	zero,200(sp)
80207394:	003f1006 	br	80206fd8 <__reset+0xfa1e6fd8>
80207398:	d8802917 	ldw	r2,164(sp)
8020739c:	103ec71e 	bne	r2,zero,80206ebc <__reset+0xfa1e6ebc>
802073a0:	dc002915 	stw	r16,164(sp)
802073a4:	003ec506 	br	80206ebc <__reset+0xfa1e6ebc>
802073a8:	d9402c17 	ldw	r5,176(sp)
802073ac:	d9801e04 	addi	r6,sp,120
802073b0:	9809883a 	mov	r4,r19
802073b4:	020eb280 	call	8020eb28 <__ssprint_r>
802073b8:	10395c1e 	bne	r2,zero,8020592c <__reset+0xfa1e592c>
802073bc:	dc402617 	ldw	r17,152(sp)
802073c0:	d8c02017 	ldw	r3,128(sp)
802073c4:	d8801f17 	ldw	r2,124(sp)
802073c8:	da000404 	addi	r8,sp,16
802073cc:	003e7706 	br	80206dac <__reset+0xfa1e6dac>
802073d0:	582f883a 	mov	r23,r11
802073d4:	d8002915 	stw	zero,164(sp)
802073d8:	0038c406 	br	802056ec <__reset+0xfa1e56ec>
802073dc:	d8c02917 	ldw	r3,164(sp)
802073e0:	d8802104 	addi	r2,sp,132
802073e4:	d8800315 	stw	r2,12(sp)
802073e8:	d9403617 	ldw	r5,216(sp)
802073ec:	d8802504 	addi	r2,sp,148
802073f0:	d8800215 	stw	r2,8(sp)
802073f4:	d8802604 	addi	r2,sp,152
802073f8:	d8c00015 	stw	r3,0(sp)
802073fc:	9809883a 	mov	r4,r19
80207400:	d8800115 	stw	r2,4(sp)
80207404:	01c000c4 	movi	r7,3
80207408:	a00d883a 	mov	r6,r20
8020740c:	da003e15 	stw	r8,248(sp)
80207410:	0209d940 	call	80209d94 <_dtoa_r>
80207414:	d9002917 	ldw	r4,164(sp)
80207418:	da003e17 	ldw	r8,248(sp)
8020741c:	1021883a 	mov	r16,r2
80207420:	1139883a 	add	fp,r2,r4
80207424:	2007883a 	mov	r3,r4
80207428:	81000007 	ldb	r4,0(r16)
8020742c:	00800c04 	movi	r2,48
80207430:	20806f26 	beq	r4,r2,802075f0 <___svfprintf_internal_r+0x2058>
80207434:	d8c02617 	ldw	r3,152(sp)
80207438:	e0f9883a 	add	fp,fp,r3
8020743c:	003ec206 	br	80206f48 <__reset+0xfa1e6f48>
80207440:	00c00b44 	movi	r3,45
80207444:	2520003c 	xorhi	r20,r4,32768
80207448:	d8c02a05 	stb	r3,168(sp)
8020744c:	003ea106 	br	80206ed4 <__reset+0xfa1e6ed4>
80207450:	d8c03217 	ldw	r3,200(sp)
80207454:	00c0890e 	bge	zero,r3,8020767c <___svfprintf_internal_r+0x20e4>
80207458:	00800044 	movi	r2,1
8020745c:	d9003317 	ldw	r4,204(sp)
80207460:	1105883a 	add	r2,r2,r4
80207464:	d8802e15 	stw	r2,184(sp)
80207468:	10005f16 	blt	r2,zero,802075e8 <___svfprintf_internal_r+0x2050>
8020746c:	044019c4 	movi	r17,103
80207470:	003ed906 	br	80206fd8 <__reset+0xfa1e6fd8>
80207474:	d9002917 	ldw	r4,164(sp)
80207478:	20c00044 	addi	r3,r4,1
8020747c:	003e9c06 	br	80206ef0 <__reset+0xfa1e6ef0>
80207480:	d9002917 	ldw	r4,164(sp)
80207484:	00c0680e 	bge	zero,r3,80207628 <___svfprintf_internal_r+0x2090>
80207488:	2000461e 	bne	r4,zero,802075a4 <___svfprintf_internal_r+0x200c>
8020748c:	9480004c 	andi	r18,r18,1
80207490:	9000441e 	bne	r18,zero,802075a4 <___svfprintf_internal_r+0x200c>
80207494:	1805883a 	mov	r2,r3
80207498:	1800a016 	blt	r3,zero,8020771c <___svfprintf_internal_r+0x2184>
8020749c:	d8c03217 	ldw	r3,200(sp)
802074a0:	d8c02e15 	stw	r3,184(sp)
802074a4:	003ecc06 	br	80206fd8 <__reset+0xfa1e6fd8>
802074a8:	d9402917 	ldw	r5,164(sp)
802074ac:	d8802104 	addi	r2,sp,132
802074b0:	d8800315 	stw	r2,12(sp)
802074b4:	d9400015 	stw	r5,0(sp)
802074b8:	d8802504 	addi	r2,sp,148
802074bc:	d9403617 	ldw	r5,216(sp)
802074c0:	d8800215 	stw	r2,8(sp)
802074c4:	d8802604 	addi	r2,sp,152
802074c8:	d8800115 	stw	r2,4(sp)
802074cc:	01c000c4 	movi	r7,3
802074d0:	a00d883a 	mov	r6,r20
802074d4:	9809883a 	mov	r4,r19
802074d8:	da003e15 	stw	r8,248(sp)
802074dc:	0209d940 	call	80209d94 <_dtoa_r>
802074e0:	d8c02917 	ldw	r3,164(sp)
802074e4:	da003e17 	ldw	r8,248(sp)
802074e8:	1021883a 	mov	r16,r2
802074ec:	00801184 	movi	r2,70
802074f0:	80f9883a 	add	fp,r16,r3
802074f4:	88bfcc26 	beq	r17,r2,80207428 <__reset+0xfa1e7428>
802074f8:	003e9306 	br	80206f48 <__reset+0xfa1e6f48>
802074fc:	df0022c4 	addi	fp,sp,139
80207500:	dc002915 	stw	r16,164(sp)
80207504:	9829883a 	mov	r20,r19
80207508:	e021883a 	mov	r16,fp
8020750c:	4027883a 	mov	r19,r8
80207510:	b009883a 	mov	r4,r22
80207514:	01400284 	movi	r5,10
80207518:	02129e40 	call	802129e4 <__modsi3>
8020751c:	10800c04 	addi	r2,r2,48
80207520:	843fffc4 	addi	r16,r16,-1
80207524:	b009883a 	mov	r4,r22
80207528:	01400284 	movi	r5,10
8020752c:	80800005 	stb	r2,0(r16)
80207530:	02129600 	call	80212960 <__divsi3>
80207534:	102d883a 	mov	r22,r2
80207538:	00800244 	movi	r2,9
8020753c:	15bff416 	blt	r2,r22,80207510 <__reset+0xfa1e7510>
80207540:	9811883a 	mov	r8,r19
80207544:	b0800c04 	addi	r2,r22,48
80207548:	a027883a 	mov	r19,r20
8020754c:	8029883a 	mov	r20,r16
80207550:	a17fffc4 	addi	r5,r20,-1
80207554:	a0bfffc5 	stb	r2,-1(r20)
80207558:	dc002917 	ldw	r16,164(sp)
8020755c:	2f00752e 	bgeu	r5,fp,80207734 <___svfprintf_internal_r+0x219c>
80207560:	d9c02384 	addi	r7,sp,142
80207564:	3d0fc83a 	sub	r7,r7,r20
80207568:	d9002344 	addi	r4,sp,141
8020756c:	e1cf883a 	add	r7,fp,r7
80207570:	00000106 	br	80207578 <___svfprintf_internal_r+0x1fe0>
80207574:	28800003 	ldbu	r2,0(r5)
80207578:	20800005 	stb	r2,0(r4)
8020757c:	21000044 	addi	r4,r4,1
80207580:	29400044 	addi	r5,r5,1
80207584:	21fffb1e 	bne	r4,r7,80207574 <__reset+0xfa1e7574>
80207588:	d8802304 	addi	r2,sp,140
8020758c:	1505c83a 	sub	r2,r2,r20
80207590:	d8c02344 	addi	r3,sp,141
80207594:	1885883a 	add	r2,r3,r2
80207598:	003f7006 	br	8020735c <__reset+0xfa1e735c>
8020759c:	0005883a 	mov	r2,zero
802075a0:	003f0b06 	br	802071d0 <__reset+0xfa1e71d0>
802075a4:	d9002917 	ldw	r4,164(sp)
802075a8:	d8c03217 	ldw	r3,200(sp)
802075ac:	20800044 	addi	r2,r4,1
802075b0:	1885883a 	add	r2,r3,r2
802075b4:	d8802e15 	stw	r2,184(sp)
802075b8:	103e870e 	bge	r2,zero,80206fd8 <__reset+0xfa1e6fd8>
802075bc:	0005883a 	mov	r2,zero
802075c0:	003e8506 	br	80206fd8 <__reset+0xfa1e6fd8>
802075c4:	012008b4 	movhi	r4,32802
802075c8:	212cce84 	addi	r4,r4,-19654
802075cc:	d9002b15 	stw	r4,172(sp)
802075d0:	003cc506 	br	802068e8 <__reset+0xfa1e68e8>
802075d4:	d8c03217 	ldw	r3,200(sp)
802075d8:	18c00044 	addi	r3,r3,1
802075dc:	d8c02e15 	stw	r3,184(sp)
802075e0:	1805883a 	mov	r2,r3
802075e4:	183fa10e 	bge	r3,zero,8020746c <__reset+0xfa1e746c>
802075e8:	0005883a 	mov	r2,zero
802075ec:	003f9f06 	br	8020746c <__reset+0xfa1e746c>
802075f0:	d9003617 	ldw	r4,216(sp)
802075f4:	000d883a 	mov	r6,zero
802075f8:	000f883a 	mov	r7,zero
802075fc:	a00b883a 	mov	r5,r20
80207600:	d8c03d15 	stw	r3,244(sp)
80207604:	da003e15 	stw	r8,248(sp)
80207608:	0213ca80 	call	80213ca8 <__eqdf2>
8020760c:	d8c03d17 	ldw	r3,244(sp)
80207610:	da003e17 	ldw	r8,248(sp)
80207614:	103f8726 	beq	r2,zero,80207434 <__reset+0xfa1e7434>
80207618:	00800044 	movi	r2,1
8020761c:	10c7c83a 	sub	r3,r2,r3
80207620:	d8c02615 	stw	r3,152(sp)
80207624:	003f8406 	br	80207438 <__reset+0xfa1e7438>
80207628:	20000e1e 	bne	r4,zero,80207664 <___svfprintf_internal_r+0x20cc>
8020762c:	9480004c 	andi	r18,r18,1
80207630:	90000c1e 	bne	r18,zero,80207664 <___svfprintf_internal_r+0x20cc>
80207634:	00800044 	movi	r2,1
80207638:	d8802e15 	stw	r2,184(sp)
8020763c:	003e6606 	br	80206fd8 <__reset+0xfa1e6fd8>
80207640:	00800b44 	movi	r2,45
80207644:	05adc83a 	sub	r22,zero,r22
80207648:	d8802305 	stb	r2,140(sp)
8020764c:	003f3b06 	br	8020733c <__reset+0xfa1e733c>
80207650:	0005883a 	mov	r2,zero
80207654:	003f4e06 	br	80207390 <__reset+0xfa1e7390>
80207658:	90a4703a 	and	r18,r18,r2
8020765c:	903f4a26 	beq	r18,zero,80207388 <__reset+0xfa1e7388>
80207660:	003f4606 	br	8020737c <__reset+0xfa1e737c>
80207664:	d8c02917 	ldw	r3,164(sp)
80207668:	18c00084 	addi	r3,r3,2
8020766c:	d8c02e15 	stw	r3,184(sp)
80207670:	1805883a 	mov	r2,r3
80207674:	183e580e 	bge	r3,zero,80206fd8 <__reset+0xfa1e6fd8>
80207678:	003fd006 	br	802075bc <__reset+0xfa1e75bc>
8020767c:	00800084 	movi	r2,2
80207680:	10c5c83a 	sub	r2,r2,r3
80207684:	003f7506 	br	8020745c <__reset+0xfa1e745c>
80207688:	d8802d17 	ldw	r2,180(sp)
8020768c:	d9002d17 	ldw	r4,180(sp)
80207690:	bc400043 	ldbu	r17,1(r23)
80207694:	10800017 	ldw	r2,0(r2)
80207698:	582f883a 	mov	r23,r11
8020769c:	d8802915 	stw	r2,164(sp)
802076a0:	20800104 	addi	r2,r4,4
802076a4:	d9002917 	ldw	r4,164(sp)
802076a8:	d8802d15 	stw	r2,180(sp)
802076ac:	203df00e 	bge	r4,zero,80206e70 <__reset+0xfa1e6e70>
802076b0:	8c403fcc 	andi	r17,r17,255
802076b4:	00bfffc4 	movi	r2,-1
802076b8:	8c40201c 	xori	r17,r17,128
802076bc:	d8802915 	stw	r2,164(sp)
802076c0:	8c7fe004 	addi	r17,r17,-128
802076c4:	00380806 	br	802056e8 <__reset+0xfa1e56e8>
802076c8:	9080004c 	andi	r2,r18,1
802076cc:	0039883a 	mov	fp,zero
802076d0:	10000726 	beq	r2,zero,802076f0 <___svfprintf_internal_r+0x2158>
802076d4:	d8c02817 	ldw	r3,160(sp)
802076d8:	dc001dc4 	addi	r16,sp,119
802076dc:	00800c04 	movi	r2,48
802076e0:	1c07c83a 	sub	r3,r3,r16
802076e4:	d8801dc5 	stb	r2,119(sp)
802076e8:	d8c02e15 	stw	r3,184(sp)
802076ec:	00395206 	br	80205c38 <__reset+0xfa1e5c38>
802076f0:	d8002e15 	stw	zero,184(sp)
802076f4:	dc001e04 	addi	r16,sp,120
802076f8:	00394f06 	br	80205c38 <__reset+0xfa1e5c38>
802076fc:	0005883a 	mov	r2,zero
80207700:	003e3206 	br	80206fcc <__reset+0xfa1e6fcc>
80207704:	dd802617 	ldw	r22,152(sp)
80207708:	003f0606 	br	80207324 <__reset+0xfa1e7324>
8020770c:	d9c02785 	stb	r7,158(sp)
80207710:	003a5106 	br	80206058 <__reset+0xfa1e6058>
80207714:	d9c02785 	stb	r7,158(sp)
80207718:	003a3706 	br	80205ff8 <__reset+0xfa1e5ff8>
8020771c:	0005883a 	mov	r2,zero
80207720:	003f5e06 	br	8020749c <__reset+0xfa1e749c>
80207724:	d9c02785 	stb	r7,158(sp)
80207728:	00391706 	br	80205b88 <__reset+0xfa1e5b88>
8020772c:	d9c02785 	stb	r7,158(sp)
80207730:	0038e606 	br	80205acc <__reset+0xfa1e5acc>
80207734:	d8802344 	addi	r2,sp,141
80207738:	003f0806 	br	8020735c <__reset+0xfa1e735c>
8020773c:	d9c02785 	stb	r7,158(sp)
80207740:	0038b706 	br	80205a20 <__reset+0xfa1e5a20>
80207744:	d9c02785 	stb	r7,158(sp)
80207748:	003adc06 	br	802062bc <__reset+0xfa1e62bc>
8020774c:	d9403917 	ldw	r5,228(sp)
80207750:	00800304 	movi	r2,12
80207754:	28800015 	stw	r2,0(r5)
80207758:	00bfffc4 	movi	r2,-1
8020775c:	00387806 	br	80205940 <__reset+0xfa1e5940>
80207760:	d9c02785 	stb	r7,158(sp)
80207764:	003abf06 	br	80206264 <__reset+0xfa1e6264>
80207768:	d9c02785 	stb	r7,158(sp)
8020776c:	003a9b06 	br	802061dc <__reset+0xfa1e61dc>

80207770 <___vfprintf_internal_r>:
80207770:	deffb804 	addi	sp,sp,-288
80207774:	dfc04715 	stw	ra,284(sp)
80207778:	ddc04515 	stw	r23,276(sp)
8020777c:	dd404315 	stw	r21,268(sp)
80207780:	d9002c15 	stw	r4,176(sp)
80207784:	282f883a 	mov	r23,r5
80207788:	302b883a 	mov	r21,r6
8020778c:	d9c02d15 	stw	r7,180(sp)
80207790:	df004615 	stw	fp,280(sp)
80207794:	dd804415 	stw	r22,272(sp)
80207798:	dd004215 	stw	r20,264(sp)
8020779c:	dcc04115 	stw	r19,260(sp)
802077a0:	dc804015 	stw	r18,256(sp)
802077a4:	dc403f15 	stw	r17,252(sp)
802077a8:	dc003e15 	stw	r16,248(sp)
802077ac:	020c5880 	call	8020c588 <_localeconv_r>
802077b0:	10800017 	ldw	r2,0(r2)
802077b4:	1009883a 	mov	r4,r2
802077b8:	d8803415 	stw	r2,208(sp)
802077bc:	02055000 	call	80205500 <strlen>
802077c0:	d8803715 	stw	r2,220(sp)
802077c4:	d8802c17 	ldw	r2,176(sp)
802077c8:	10000226 	beq	r2,zero,802077d4 <___vfprintf_internal_r+0x64>
802077cc:	10800e17 	ldw	r2,56(r2)
802077d0:	1000f926 	beq	r2,zero,80207bb8 <___vfprintf_internal_r+0x448>
802077d4:	b880030b 	ldhu	r2,12(r23)
802077d8:	10c8000c 	andi	r3,r2,8192
802077dc:	1800061e 	bne	r3,zero,802077f8 <___vfprintf_internal_r+0x88>
802077e0:	b9001917 	ldw	r4,100(r23)
802077e4:	00f7ffc4 	movi	r3,-8193
802077e8:	10880014 	ori	r2,r2,8192
802077ec:	20c6703a 	and	r3,r4,r3
802077f0:	b880030d 	sth	r2,12(r23)
802077f4:	b8c01915 	stw	r3,100(r23)
802077f8:	10c0020c 	andi	r3,r2,8
802077fc:	1800c126 	beq	r3,zero,80207b04 <___vfprintf_internal_r+0x394>
80207800:	b8c00417 	ldw	r3,16(r23)
80207804:	1800bf26 	beq	r3,zero,80207b04 <___vfprintf_internal_r+0x394>
80207808:	1080068c 	andi	r2,r2,26
8020780c:	00c00284 	movi	r3,10
80207810:	10c0c426 	beq	r2,r3,80207b24 <___vfprintf_internal_r+0x3b4>
80207814:	d8c00404 	addi	r3,sp,16
80207818:	052008b4 	movhi	r20,32802
8020781c:	d9001e04 	addi	r4,sp,120
80207820:	a52cd684 	addi	r20,r20,-19622
80207824:	d8c01e15 	stw	r3,120(sp)
80207828:	d8002015 	stw	zero,128(sp)
8020782c:	d8001f15 	stw	zero,124(sp)
80207830:	d8003315 	stw	zero,204(sp)
80207834:	d8003615 	stw	zero,216(sp)
80207838:	d8003815 	stw	zero,224(sp)
8020783c:	1811883a 	mov	r8,r3
80207840:	d8003915 	stw	zero,228(sp)
80207844:	d8003a15 	stw	zero,232(sp)
80207848:	d8002f15 	stw	zero,188(sp)
8020784c:	d9002815 	stw	r4,160(sp)
80207850:	a8800007 	ldb	r2,0(r21)
80207854:	10027b26 	beq	r2,zero,80208244 <___vfprintf_internal_r+0xad4>
80207858:	00c00944 	movi	r3,37
8020785c:	a821883a 	mov	r16,r21
80207860:	10c0021e 	bne	r2,r3,8020786c <___vfprintf_internal_r+0xfc>
80207864:	00001406 	br	802078b8 <___vfprintf_internal_r+0x148>
80207868:	10c00326 	beq	r2,r3,80207878 <___vfprintf_internal_r+0x108>
8020786c:	84000044 	addi	r16,r16,1
80207870:	80800007 	ldb	r2,0(r16)
80207874:	103ffc1e 	bne	r2,zero,80207868 <__reset+0xfa1e7868>
80207878:	8563c83a 	sub	r17,r16,r21
8020787c:	88000e26 	beq	r17,zero,802078b8 <___vfprintf_internal_r+0x148>
80207880:	d8c02017 	ldw	r3,128(sp)
80207884:	d8801f17 	ldw	r2,124(sp)
80207888:	45400015 	stw	r21,0(r8)
8020788c:	1c47883a 	add	r3,r3,r17
80207890:	10800044 	addi	r2,r2,1
80207894:	d8c02015 	stw	r3,128(sp)
80207898:	44400115 	stw	r17,4(r8)
8020789c:	d8801f15 	stw	r2,124(sp)
802078a0:	00c001c4 	movi	r3,7
802078a4:	1880a716 	blt	r3,r2,80207b44 <___vfprintf_internal_r+0x3d4>
802078a8:	42000204 	addi	r8,r8,8
802078ac:	d9402f17 	ldw	r5,188(sp)
802078b0:	2c4b883a 	add	r5,r5,r17
802078b4:	d9402f15 	stw	r5,188(sp)
802078b8:	80800007 	ldb	r2,0(r16)
802078bc:	1000a826 	beq	r2,zero,80207b60 <___vfprintf_internal_r+0x3f0>
802078c0:	84400047 	ldb	r17,1(r16)
802078c4:	00bfffc4 	movi	r2,-1
802078c8:	85400044 	addi	r21,r16,1
802078cc:	d8002785 	stb	zero,158(sp)
802078d0:	0007883a 	mov	r3,zero
802078d4:	000f883a 	mov	r7,zero
802078d8:	d8802915 	stw	r2,164(sp)
802078dc:	d8003115 	stw	zero,196(sp)
802078e0:	0025883a 	mov	r18,zero
802078e4:	01401604 	movi	r5,88
802078e8:	01800244 	movi	r6,9
802078ec:	02800a84 	movi	r10,42
802078f0:	02401b04 	movi	r9,108
802078f4:	ad400044 	addi	r21,r21,1
802078f8:	88bff804 	addi	r2,r17,-32
802078fc:	28830436 	bltu	r5,r2,80208510 <___vfprintf_internal_r+0xda0>
80207900:	100490ba 	slli	r2,r2,2
80207904:	01200834 	movhi	r4,32800
80207908:	211e4604 	addi	r4,r4,31000
8020790c:	1105883a 	add	r2,r2,r4
80207910:	10800017 	ldw	r2,0(r2)
80207914:	1000683a 	jmp	r2
80207918:	80208430 	cmpltui	zero,r16,33296
8020791c:	80208510 	cmplti	zero,r16,-32236
80207920:	80208510 	cmplti	zero,r16,-32236
80207924:	80208450 	cmplti	zero,r16,-32239
80207928:	80208510 	cmplti	zero,r16,-32236
8020792c:	80208510 	cmplti	zero,r16,-32236
80207930:	80208510 	cmplti	zero,r16,-32236
80207934:	80208510 	cmplti	zero,r16,-32236
80207938:	80208510 	cmplti	zero,r16,-32236
8020793c:	80208510 	cmplti	zero,r16,-32236
80207940:	80207bc4 	addi	zero,r16,-32273
80207944:	8020836c 	andhi	zero,r16,33293
80207948:	80208510 	cmplti	zero,r16,-32236
8020794c:	80207a8c 	andi	zero,r16,33258
80207950:	80207bec 	andhi	zero,r16,33263
80207954:	80208510 	cmplti	zero,r16,-32236
80207958:	80207c2c 	andhi	zero,r16,33264
8020795c:	80207c38 	rdprs	zero,r16,-32272
80207960:	80207c38 	rdprs	zero,r16,-32272
80207964:	80207c38 	rdprs	zero,r16,-32272
80207968:	80207c38 	rdprs	zero,r16,-32272
8020796c:	80207c38 	rdprs	zero,r16,-32272
80207970:	80207c38 	rdprs	zero,r16,-32272
80207974:	80207c38 	rdprs	zero,r16,-32272
80207978:	80207c38 	rdprs	zero,r16,-32272
8020797c:	80207c38 	rdprs	zero,r16,-32272
80207980:	80208510 	cmplti	zero,r16,-32236
80207984:	80208510 	cmplti	zero,r16,-32236
80207988:	80208510 	cmplti	zero,r16,-32236
8020798c:	80208510 	cmplti	zero,r16,-32236
80207990:	80208510 	cmplti	zero,r16,-32236
80207994:	80208510 	cmplti	zero,r16,-32236
80207998:	80208510 	cmplti	zero,r16,-32236
8020799c:	80208510 	cmplti	zero,r16,-32236
802079a0:	80208510 	cmplti	zero,r16,-32236
802079a4:	80208510 	cmplti	zero,r16,-32236
802079a8:	80207c6c 	andhi	zero,r16,33265
802079ac:	80207d28 	cmpgeui	zero,r16,33268
802079b0:	80208510 	cmplti	zero,r16,-32236
802079b4:	80207d28 	cmpgeui	zero,r16,33268
802079b8:	80208510 	cmplti	zero,r16,-32236
802079bc:	80208510 	cmplti	zero,r16,-32236
802079c0:	80208510 	cmplti	zero,r16,-32236
802079c4:	80208510 	cmplti	zero,r16,-32236
802079c8:	80207dc8 	cmpgei	zero,r16,-32265
802079cc:	80208510 	cmplti	zero,r16,-32236
802079d0:	80208510 	cmplti	zero,r16,-32236
802079d4:	80207dd4 	ori	zero,r16,33271
802079d8:	80208510 	cmplti	zero,r16,-32236
802079dc:	80208510 	cmplti	zero,r16,-32236
802079e0:	80208510 	cmplti	zero,r16,-32236
802079e4:	80208510 	cmplti	zero,r16,-32236
802079e8:	80208510 	cmplti	zero,r16,-32236
802079ec:	8020824c 	andi	zero,r16,33289
802079f0:	80208510 	cmplti	zero,r16,-32236
802079f4:	80208510 	cmplti	zero,r16,-32236
802079f8:	802082ac 	andhi	zero,r16,33290
802079fc:	80208510 	cmplti	zero,r16,-32236
80207a00:	80208510 	cmplti	zero,r16,-32236
80207a04:	80208510 	cmplti	zero,r16,-32236
80207a08:	80208510 	cmplti	zero,r16,-32236
80207a0c:	80208510 	cmplti	zero,r16,-32236
80207a10:	80208510 	cmplti	zero,r16,-32236
80207a14:	80208510 	cmplti	zero,r16,-32236
80207a18:	80208510 	cmplti	zero,r16,-32236
80207a1c:	80208510 	cmplti	zero,r16,-32236
80207a20:	80208510 	cmplti	zero,r16,-32236
80207a24:	802084bc 	xorhi	zero,r16,33298
80207a28:	8020845c 	xori	zero,r16,33297
80207a2c:	80207d28 	cmpgeui	zero,r16,33268
80207a30:	80207d28 	cmpgeui	zero,r16,33268
80207a34:	80207d28 	cmpgeui	zero,r16,33268
80207a38:	8020846c 	andhi	zero,r16,33297
80207a3c:	8020845c 	xori	zero,r16,33297
80207a40:	80208510 	cmplti	zero,r16,-32236
80207a44:	80208510 	cmplti	zero,r16,-32236
80207a48:	80208478 	rdprs	zero,r16,-32239
80207a4c:	80208510 	cmplti	zero,r16,-32236
80207a50:	80208488 	cmpgei	zero,r16,-32238
80207a54:	8020835c 	xori	zero,r16,33293
80207a58:	80207a98 	cmpnei	zero,r16,-32278
80207a5c:	8020837c 	xorhi	zero,r16,33293
80207a60:	80208510 	cmplti	zero,r16,-32236
80207a64:	80208388 	cmpgei	zero,r16,-32242
80207a68:	80208510 	cmplti	zero,r16,-32236
80207a6c:	802083e4 	muli	zero,r16,-32241
80207a70:	80208510 	cmplti	zero,r16,-32236
80207a74:	80208510 	cmplti	zero,r16,-32236
80207a78:	802083f4 	orhi	zero,r16,33295
80207a7c:	d9003117 	ldw	r4,196(sp)
80207a80:	d8802d15 	stw	r2,180(sp)
80207a84:	0109c83a 	sub	r4,zero,r4
80207a88:	d9003115 	stw	r4,196(sp)
80207a8c:	94800114 	ori	r18,r18,4
80207a90:	ac400007 	ldb	r17,0(r21)
80207a94:	003f9706 	br	802078f4 <__reset+0xfa1e78f4>
80207a98:	00800c04 	movi	r2,48
80207a9c:	d9002d17 	ldw	r4,180(sp)
80207aa0:	d9402917 	ldw	r5,164(sp)
80207aa4:	d8802705 	stb	r2,156(sp)
80207aa8:	00801e04 	movi	r2,120
80207aac:	d8802745 	stb	r2,157(sp)
80207ab0:	d8002785 	stb	zero,158(sp)
80207ab4:	20c00104 	addi	r3,r4,4
80207ab8:	24c00017 	ldw	r19,0(r4)
80207abc:	002d883a 	mov	r22,zero
80207ac0:	90800094 	ori	r2,r18,2
80207ac4:	28029a16 	blt	r5,zero,80208530 <___vfprintf_internal_r+0xdc0>
80207ac8:	00bfdfc4 	movi	r2,-129
80207acc:	90a4703a 	and	r18,r18,r2
80207ad0:	d8c02d15 	stw	r3,180(sp)
80207ad4:	94800094 	ori	r18,r18,2
80207ad8:	9802871e 	bne	r19,zero,802084f8 <___vfprintf_internal_r+0xd88>
80207adc:	00a008b4 	movhi	r2,32802
80207ae0:	10acc704 	addi	r2,r2,-19684
80207ae4:	d8803915 	stw	r2,228(sp)
80207ae8:	04401e04 	movi	r17,120
80207aec:	d8802917 	ldw	r2,164(sp)
80207af0:	0039883a 	mov	fp,zero
80207af4:	1001e926 	beq	r2,zero,8020829c <___vfprintf_internal_r+0xb2c>
80207af8:	0027883a 	mov	r19,zero
80207afc:	002d883a 	mov	r22,zero
80207b00:	00020506 	br	80208318 <___vfprintf_internal_r+0xba8>
80207b04:	d9002c17 	ldw	r4,176(sp)
80207b08:	b80b883a 	mov	r5,r23
80207b0c:	0209a400 	call	80209a40 <__swsetup_r>
80207b10:	1005ac1e 	bne	r2,zero,802091c4 <___vfprintf_internal_r+0x1a54>
80207b14:	b880030b 	ldhu	r2,12(r23)
80207b18:	00c00284 	movi	r3,10
80207b1c:	1080068c 	andi	r2,r2,26
80207b20:	10ff3c1e 	bne	r2,r3,80207814 <__reset+0xfa1e7814>
80207b24:	b880038f 	ldh	r2,14(r23)
80207b28:	103f3a16 	blt	r2,zero,80207814 <__reset+0xfa1e7814>
80207b2c:	d9c02d17 	ldw	r7,180(sp)
80207b30:	d9002c17 	ldw	r4,176(sp)
80207b34:	a80d883a 	mov	r6,r21
80207b38:	b80b883a 	mov	r5,r23
80207b3c:	02099840 	call	80209984 <__sbprintf>
80207b40:	00001106 	br	80207b88 <___vfprintf_internal_r+0x418>
80207b44:	d9002c17 	ldw	r4,176(sp)
80207b48:	d9801e04 	addi	r6,sp,120
80207b4c:	b80b883a 	mov	r5,r23
80207b50:	02100300 	call	80210030 <__sprint_r>
80207b54:	1000081e 	bne	r2,zero,80207b78 <___vfprintf_internal_r+0x408>
80207b58:	da000404 	addi	r8,sp,16
80207b5c:	003f5306 	br	802078ac <__reset+0xfa1e78ac>
80207b60:	d8802017 	ldw	r2,128(sp)
80207b64:	10000426 	beq	r2,zero,80207b78 <___vfprintf_internal_r+0x408>
80207b68:	d9002c17 	ldw	r4,176(sp)
80207b6c:	d9801e04 	addi	r6,sp,120
80207b70:	b80b883a 	mov	r5,r23
80207b74:	02100300 	call	80210030 <__sprint_r>
80207b78:	b880030b 	ldhu	r2,12(r23)
80207b7c:	1080100c 	andi	r2,r2,64
80207b80:	1005901e 	bne	r2,zero,802091c4 <___vfprintf_internal_r+0x1a54>
80207b84:	d8802f17 	ldw	r2,188(sp)
80207b88:	dfc04717 	ldw	ra,284(sp)
80207b8c:	df004617 	ldw	fp,280(sp)
80207b90:	ddc04517 	ldw	r23,276(sp)
80207b94:	dd804417 	ldw	r22,272(sp)
80207b98:	dd404317 	ldw	r21,268(sp)
80207b9c:	dd004217 	ldw	r20,264(sp)
80207ba0:	dcc04117 	ldw	r19,260(sp)
80207ba4:	dc804017 	ldw	r18,256(sp)
80207ba8:	dc403f17 	ldw	r17,252(sp)
80207bac:	dc003e17 	ldw	r16,248(sp)
80207bb0:	dec04804 	addi	sp,sp,288
80207bb4:	f800283a 	ret
80207bb8:	d9002c17 	ldw	r4,176(sp)
80207bbc:	020ba140 	call	8020ba14 <__sinit>
80207bc0:	003f0406 	br	802077d4 <__reset+0xfa1e77d4>
80207bc4:	d8802d17 	ldw	r2,180(sp)
80207bc8:	d9002d17 	ldw	r4,180(sp)
80207bcc:	10800017 	ldw	r2,0(r2)
80207bd0:	d8803115 	stw	r2,196(sp)
80207bd4:	20800104 	addi	r2,r4,4
80207bd8:	d9003117 	ldw	r4,196(sp)
80207bdc:	203fa716 	blt	r4,zero,80207a7c <__reset+0xfa1e7a7c>
80207be0:	d8802d15 	stw	r2,180(sp)
80207be4:	ac400007 	ldb	r17,0(r21)
80207be8:	003f4206 	br	802078f4 <__reset+0xfa1e78f4>
80207bec:	ac400007 	ldb	r17,0(r21)
80207bf0:	aac00044 	addi	r11,r21,1
80207bf4:	8a872826 	beq	r17,r10,80209898 <___vfprintf_internal_r+0x2128>
80207bf8:	88bff404 	addi	r2,r17,-48
80207bfc:	0009883a 	mov	r4,zero
80207c00:	30867d36 	bltu	r6,r2,802095f8 <___vfprintf_internal_r+0x1e88>
80207c04:	5c400007 	ldb	r17,0(r11)
80207c08:	210002a4 	muli	r4,r4,10
80207c0c:	5d400044 	addi	r21,r11,1
80207c10:	a817883a 	mov	r11,r21
80207c14:	2089883a 	add	r4,r4,r2
80207c18:	88bff404 	addi	r2,r17,-48
80207c1c:	30bff92e 	bgeu	r6,r2,80207c04 <__reset+0xfa1e7c04>
80207c20:	2005c916 	blt	r4,zero,80209348 <___vfprintf_internal_r+0x1bd8>
80207c24:	d9002915 	stw	r4,164(sp)
80207c28:	003f3306 	br	802078f8 <__reset+0xfa1e78f8>
80207c2c:	94802014 	ori	r18,r18,128
80207c30:	ac400007 	ldb	r17,0(r21)
80207c34:	003f2f06 	br	802078f4 <__reset+0xfa1e78f4>
80207c38:	a809883a 	mov	r4,r21
80207c3c:	d8003115 	stw	zero,196(sp)
80207c40:	88bff404 	addi	r2,r17,-48
80207c44:	0017883a 	mov	r11,zero
80207c48:	24400007 	ldb	r17,0(r4)
80207c4c:	5ac002a4 	muli	r11,r11,10
80207c50:	ad400044 	addi	r21,r21,1
80207c54:	a809883a 	mov	r4,r21
80207c58:	12d7883a 	add	r11,r2,r11
80207c5c:	88bff404 	addi	r2,r17,-48
80207c60:	30bff92e 	bgeu	r6,r2,80207c48 <__reset+0xfa1e7c48>
80207c64:	dac03115 	stw	r11,196(sp)
80207c68:	003f2306 	br	802078f8 <__reset+0xfa1e78f8>
80207c6c:	18c03fcc 	andi	r3,r3,255
80207c70:	18072b1e 	bne	r3,zero,80209920 <___vfprintf_internal_r+0x21b0>
80207c74:	94800414 	ori	r18,r18,16
80207c78:	9080080c 	andi	r2,r18,32
80207c7c:	10037b26 	beq	r2,zero,80208a6c <___vfprintf_internal_r+0x12fc>
80207c80:	d9402d17 	ldw	r5,180(sp)
80207c84:	28800117 	ldw	r2,4(r5)
80207c88:	2cc00017 	ldw	r19,0(r5)
80207c8c:	29400204 	addi	r5,r5,8
80207c90:	d9402d15 	stw	r5,180(sp)
80207c94:	102d883a 	mov	r22,r2
80207c98:	10044b16 	blt	r2,zero,80208dc8 <___vfprintf_internal_r+0x1658>
80207c9c:	d9402917 	ldw	r5,164(sp)
80207ca0:	df002783 	ldbu	fp,158(sp)
80207ca4:	2803bc16 	blt	r5,zero,80208b98 <___vfprintf_internal_r+0x1428>
80207ca8:	00ffdfc4 	movi	r3,-129
80207cac:	9d84b03a 	or	r2,r19,r22
80207cb0:	90e4703a 	and	r18,r18,r3
80207cb4:	10017726 	beq	r2,zero,80208294 <___vfprintf_internal_r+0xb24>
80207cb8:	b0038326 	beq	r22,zero,80208ac8 <___vfprintf_internal_r+0x1358>
80207cbc:	dc402a15 	stw	r17,168(sp)
80207cc0:	dc001e04 	addi	r16,sp,120
80207cc4:	b023883a 	mov	r17,r22
80207cc8:	402d883a 	mov	r22,r8
80207ccc:	9809883a 	mov	r4,r19
80207cd0:	880b883a 	mov	r5,r17
80207cd4:	01800284 	movi	r6,10
80207cd8:	000f883a 	mov	r7,zero
80207cdc:	02124280 	call	80212428 <__umoddi3>
80207ce0:	10800c04 	addi	r2,r2,48
80207ce4:	843fffc4 	addi	r16,r16,-1
80207ce8:	9809883a 	mov	r4,r19
80207cec:	880b883a 	mov	r5,r17
80207cf0:	80800005 	stb	r2,0(r16)
80207cf4:	01800284 	movi	r6,10
80207cf8:	000f883a 	mov	r7,zero
80207cfc:	0211eb00 	call	80211eb0 <__udivdi3>
80207d00:	1027883a 	mov	r19,r2
80207d04:	10c4b03a 	or	r2,r2,r3
80207d08:	1823883a 	mov	r17,r3
80207d0c:	103fef1e 	bne	r2,zero,80207ccc <__reset+0xfa1e7ccc>
80207d10:	d8c02817 	ldw	r3,160(sp)
80207d14:	dc402a17 	ldw	r17,168(sp)
80207d18:	b011883a 	mov	r8,r22
80207d1c:	1c07c83a 	sub	r3,r3,r16
80207d20:	d8c02e15 	stw	r3,184(sp)
80207d24:	00005906 	br	80207e8c <___vfprintf_internal_r+0x71c>
80207d28:	18c03fcc 	andi	r3,r3,255
80207d2c:	1806fa1e 	bne	r3,zero,80209918 <___vfprintf_internal_r+0x21a8>
80207d30:	9080020c 	andi	r2,r18,8
80207d34:	10048a26 	beq	r2,zero,80208f60 <___vfprintf_internal_r+0x17f0>
80207d38:	d8c02d17 	ldw	r3,180(sp)
80207d3c:	d9002d17 	ldw	r4,180(sp)
80207d40:	d9402d17 	ldw	r5,180(sp)
80207d44:	18c00017 	ldw	r3,0(r3)
80207d48:	21000117 	ldw	r4,4(r4)
80207d4c:	29400204 	addi	r5,r5,8
80207d50:	d8c03615 	stw	r3,216(sp)
80207d54:	d9003815 	stw	r4,224(sp)
80207d58:	d9402d15 	stw	r5,180(sp)
80207d5c:	d9003617 	ldw	r4,216(sp)
80207d60:	d9403817 	ldw	r5,224(sp)
80207d64:	da003d15 	stw	r8,244(sp)
80207d68:	04000044 	movi	r16,1
80207d6c:	020e8480 	call	8020e848 <__fpclassifyd>
80207d70:	da003d17 	ldw	r8,244(sp)
80207d74:	14041f1e 	bne	r2,r16,80208df4 <___vfprintf_internal_r+0x1684>
80207d78:	d9003617 	ldw	r4,216(sp)
80207d7c:	d9403817 	ldw	r5,224(sp)
80207d80:	000d883a 	mov	r6,zero
80207d84:	000f883a 	mov	r7,zero
80207d88:	0213e0c0 	call	80213e0c <__ledf2>
80207d8c:	da003d17 	ldw	r8,244(sp)
80207d90:	1005be16 	blt	r2,zero,8020948c <___vfprintf_internal_r+0x1d1c>
80207d94:	df002783 	ldbu	fp,158(sp)
80207d98:	008011c4 	movi	r2,71
80207d9c:	1445330e 	bge	r2,r17,8020926c <___vfprintf_internal_r+0x1afc>
80207da0:	042008b4 	movhi	r16,32802
80207da4:	842cbf04 	addi	r16,r16,-19716
80207da8:	00c000c4 	movi	r3,3
80207dac:	00bfdfc4 	movi	r2,-129
80207db0:	d8c02a15 	stw	r3,168(sp)
80207db4:	90a4703a 	and	r18,r18,r2
80207db8:	d8c02e15 	stw	r3,184(sp)
80207dbc:	d8002915 	stw	zero,164(sp)
80207dc0:	d8003215 	stw	zero,200(sp)
80207dc4:	00003706 	br	80207ea4 <___vfprintf_internal_r+0x734>
80207dc8:	94800214 	ori	r18,r18,8
80207dcc:	ac400007 	ldb	r17,0(r21)
80207dd0:	003ec806 	br	802078f4 <__reset+0xfa1e78f4>
80207dd4:	18c03fcc 	andi	r3,r3,255
80207dd8:	1806db1e 	bne	r3,zero,80209948 <___vfprintf_internal_r+0x21d8>
80207ddc:	94800414 	ori	r18,r18,16
80207de0:	9080080c 	andi	r2,r18,32
80207de4:	1002d826 	beq	r2,zero,80208948 <___vfprintf_internal_r+0x11d8>
80207de8:	d9402d17 	ldw	r5,180(sp)
80207dec:	d8c02917 	ldw	r3,164(sp)
80207df0:	d8002785 	stb	zero,158(sp)
80207df4:	28800204 	addi	r2,r5,8
80207df8:	2cc00017 	ldw	r19,0(r5)
80207dfc:	2d800117 	ldw	r22,4(r5)
80207e00:	18048f16 	blt	r3,zero,80209040 <___vfprintf_internal_r+0x18d0>
80207e04:	013fdfc4 	movi	r4,-129
80207e08:	9d86b03a 	or	r3,r19,r22
80207e0c:	d8802d15 	stw	r2,180(sp)
80207e10:	9124703a 	and	r18,r18,r4
80207e14:	1802d91e 	bne	r3,zero,8020897c <___vfprintf_internal_r+0x120c>
80207e18:	d8c02917 	ldw	r3,164(sp)
80207e1c:	0039883a 	mov	fp,zero
80207e20:	1805c326 	beq	r3,zero,80209530 <___vfprintf_internal_r+0x1dc0>
80207e24:	0027883a 	mov	r19,zero
80207e28:	002d883a 	mov	r22,zero
80207e2c:	dc001e04 	addi	r16,sp,120
80207e30:	9806d0fa 	srli	r3,r19,3
80207e34:	b008977a 	slli	r4,r22,29
80207e38:	b02cd0fa 	srli	r22,r22,3
80207e3c:	9cc001cc 	andi	r19,r19,7
80207e40:	98800c04 	addi	r2,r19,48
80207e44:	843fffc4 	addi	r16,r16,-1
80207e48:	20e6b03a 	or	r19,r4,r3
80207e4c:	80800005 	stb	r2,0(r16)
80207e50:	9d86b03a 	or	r3,r19,r22
80207e54:	183ff61e 	bne	r3,zero,80207e30 <__reset+0xfa1e7e30>
80207e58:	90c0004c 	andi	r3,r18,1
80207e5c:	18013b26 	beq	r3,zero,8020834c <___vfprintf_internal_r+0xbdc>
80207e60:	10803fcc 	andi	r2,r2,255
80207e64:	1080201c 	xori	r2,r2,128
80207e68:	10bfe004 	addi	r2,r2,-128
80207e6c:	00c00c04 	movi	r3,48
80207e70:	10c13626 	beq	r2,r3,8020834c <___vfprintf_internal_r+0xbdc>
80207e74:	80ffffc5 	stb	r3,-1(r16)
80207e78:	d8c02817 	ldw	r3,160(sp)
80207e7c:	80bfffc4 	addi	r2,r16,-1
80207e80:	1021883a 	mov	r16,r2
80207e84:	1887c83a 	sub	r3,r3,r2
80207e88:	d8c02e15 	stw	r3,184(sp)
80207e8c:	d8802e17 	ldw	r2,184(sp)
80207e90:	d9002917 	ldw	r4,164(sp)
80207e94:	1100010e 	bge	r2,r4,80207e9c <___vfprintf_internal_r+0x72c>
80207e98:	2005883a 	mov	r2,r4
80207e9c:	d8802a15 	stw	r2,168(sp)
80207ea0:	d8003215 	stw	zero,200(sp)
80207ea4:	e7003fcc 	andi	fp,fp,255
80207ea8:	e700201c 	xori	fp,fp,128
80207eac:	e73fe004 	addi	fp,fp,-128
80207eb0:	e0000326 	beq	fp,zero,80207ec0 <___vfprintf_internal_r+0x750>
80207eb4:	d8c02a17 	ldw	r3,168(sp)
80207eb8:	18c00044 	addi	r3,r3,1
80207ebc:	d8c02a15 	stw	r3,168(sp)
80207ec0:	90c0008c 	andi	r3,r18,2
80207ec4:	d8c02b15 	stw	r3,172(sp)
80207ec8:	18000326 	beq	r3,zero,80207ed8 <___vfprintf_internal_r+0x768>
80207ecc:	d8c02a17 	ldw	r3,168(sp)
80207ed0:	18c00084 	addi	r3,r3,2
80207ed4:	d8c02a15 	stw	r3,168(sp)
80207ed8:	90c0210c 	andi	r3,r18,132
80207edc:	d8c03015 	stw	r3,192(sp)
80207ee0:	1801a31e 	bne	r3,zero,80208570 <___vfprintf_internal_r+0xe00>
80207ee4:	d9003117 	ldw	r4,196(sp)
80207ee8:	d8c02a17 	ldw	r3,168(sp)
80207eec:	20e7c83a 	sub	r19,r4,r3
80207ef0:	04c19f0e 	bge	zero,r19,80208570 <___vfprintf_internal_r+0xe00>
80207ef4:	02400404 	movi	r9,16
80207ef8:	d8c02017 	ldw	r3,128(sp)
80207efc:	d8801f17 	ldw	r2,124(sp)
80207f00:	4cc50d0e 	bge	r9,r19,80209338 <___vfprintf_internal_r+0x1bc8>
80207f04:	016008b4 	movhi	r5,32802
80207f08:	296cda84 	addi	r5,r5,-19606
80207f0c:	dc403b15 	stw	r17,236(sp)
80207f10:	d9403515 	stw	r5,212(sp)
80207f14:	9823883a 	mov	r17,r19
80207f18:	482d883a 	mov	r22,r9
80207f1c:	9027883a 	mov	r19,r18
80207f20:	070001c4 	movi	fp,7
80207f24:	8025883a 	mov	r18,r16
80207f28:	dc002c17 	ldw	r16,176(sp)
80207f2c:	00000306 	br	80207f3c <___vfprintf_internal_r+0x7cc>
80207f30:	8c7ffc04 	addi	r17,r17,-16
80207f34:	42000204 	addi	r8,r8,8
80207f38:	b440130e 	bge	r22,r17,80207f88 <___vfprintf_internal_r+0x818>
80207f3c:	012008b4 	movhi	r4,32802
80207f40:	18c00404 	addi	r3,r3,16
80207f44:	10800044 	addi	r2,r2,1
80207f48:	212cda84 	addi	r4,r4,-19606
80207f4c:	41000015 	stw	r4,0(r8)
80207f50:	45800115 	stw	r22,4(r8)
80207f54:	d8c02015 	stw	r3,128(sp)
80207f58:	d8801f15 	stw	r2,124(sp)
80207f5c:	e0bff40e 	bge	fp,r2,80207f30 <__reset+0xfa1e7f30>
80207f60:	d9801e04 	addi	r6,sp,120
80207f64:	b80b883a 	mov	r5,r23
80207f68:	8009883a 	mov	r4,r16
80207f6c:	02100300 	call	80210030 <__sprint_r>
80207f70:	103f011e 	bne	r2,zero,80207b78 <__reset+0xfa1e7b78>
80207f74:	8c7ffc04 	addi	r17,r17,-16
80207f78:	d8c02017 	ldw	r3,128(sp)
80207f7c:	d8801f17 	ldw	r2,124(sp)
80207f80:	da000404 	addi	r8,sp,16
80207f84:	b47fed16 	blt	r22,r17,80207f3c <__reset+0xfa1e7f3c>
80207f88:	9021883a 	mov	r16,r18
80207f8c:	9825883a 	mov	r18,r19
80207f90:	8827883a 	mov	r19,r17
80207f94:	dc403b17 	ldw	r17,236(sp)
80207f98:	d9403517 	ldw	r5,212(sp)
80207f9c:	98c7883a 	add	r3,r19,r3
80207fa0:	10800044 	addi	r2,r2,1
80207fa4:	41400015 	stw	r5,0(r8)
80207fa8:	44c00115 	stw	r19,4(r8)
80207fac:	d8c02015 	stw	r3,128(sp)
80207fb0:	d8801f15 	stw	r2,124(sp)
80207fb4:	010001c4 	movi	r4,7
80207fb8:	2082a316 	blt	r4,r2,80208a48 <___vfprintf_internal_r+0x12d8>
80207fbc:	df002787 	ldb	fp,158(sp)
80207fc0:	42000204 	addi	r8,r8,8
80207fc4:	e0000c26 	beq	fp,zero,80207ff8 <___vfprintf_internal_r+0x888>
80207fc8:	d8801f17 	ldw	r2,124(sp)
80207fcc:	d9002784 	addi	r4,sp,158
80207fd0:	18c00044 	addi	r3,r3,1
80207fd4:	10800044 	addi	r2,r2,1
80207fd8:	41000015 	stw	r4,0(r8)
80207fdc:	01000044 	movi	r4,1
80207fe0:	41000115 	stw	r4,4(r8)
80207fe4:	d8c02015 	stw	r3,128(sp)
80207fe8:	d8801f15 	stw	r2,124(sp)
80207fec:	010001c4 	movi	r4,7
80207ff0:	20823c16 	blt	r4,r2,802088e4 <___vfprintf_internal_r+0x1174>
80207ff4:	42000204 	addi	r8,r8,8
80207ff8:	d8802b17 	ldw	r2,172(sp)
80207ffc:	10000c26 	beq	r2,zero,80208030 <___vfprintf_internal_r+0x8c0>
80208000:	d8801f17 	ldw	r2,124(sp)
80208004:	d9002704 	addi	r4,sp,156
80208008:	18c00084 	addi	r3,r3,2
8020800c:	10800044 	addi	r2,r2,1
80208010:	41000015 	stw	r4,0(r8)
80208014:	01000084 	movi	r4,2
80208018:	41000115 	stw	r4,4(r8)
8020801c:	d8c02015 	stw	r3,128(sp)
80208020:	d8801f15 	stw	r2,124(sp)
80208024:	010001c4 	movi	r4,7
80208028:	20823616 	blt	r4,r2,80208904 <___vfprintf_internal_r+0x1194>
8020802c:	42000204 	addi	r8,r8,8
80208030:	d9003017 	ldw	r4,192(sp)
80208034:	00802004 	movi	r2,128
80208038:	20819926 	beq	r4,r2,802086a0 <___vfprintf_internal_r+0xf30>
8020803c:	d9402917 	ldw	r5,164(sp)
80208040:	d8802e17 	ldw	r2,184(sp)
80208044:	28adc83a 	sub	r22,r5,r2
80208048:	0580310e 	bge	zero,r22,80208110 <___vfprintf_internal_r+0x9a0>
8020804c:	07000404 	movi	fp,16
80208050:	d8801f17 	ldw	r2,124(sp)
80208054:	e584140e 	bge	fp,r22,802090a8 <___vfprintf_internal_r+0x1938>
80208058:	016008b4 	movhi	r5,32802
8020805c:	296cd684 	addi	r5,r5,-19622
80208060:	dc402915 	stw	r17,164(sp)
80208064:	d9402b15 	stw	r5,172(sp)
80208068:	b023883a 	mov	r17,r22
8020806c:	04c001c4 	movi	r19,7
80208070:	a82d883a 	mov	r22,r21
80208074:	902b883a 	mov	r21,r18
80208078:	8025883a 	mov	r18,r16
8020807c:	dc002c17 	ldw	r16,176(sp)
80208080:	00000306 	br	80208090 <___vfprintf_internal_r+0x920>
80208084:	8c7ffc04 	addi	r17,r17,-16
80208088:	42000204 	addi	r8,r8,8
8020808c:	e440110e 	bge	fp,r17,802080d4 <___vfprintf_internal_r+0x964>
80208090:	18c00404 	addi	r3,r3,16
80208094:	10800044 	addi	r2,r2,1
80208098:	45000015 	stw	r20,0(r8)
8020809c:	47000115 	stw	fp,4(r8)
802080a0:	d8c02015 	stw	r3,128(sp)
802080a4:	d8801f15 	stw	r2,124(sp)
802080a8:	98bff60e 	bge	r19,r2,80208084 <__reset+0xfa1e8084>
802080ac:	d9801e04 	addi	r6,sp,120
802080b0:	b80b883a 	mov	r5,r23
802080b4:	8009883a 	mov	r4,r16
802080b8:	02100300 	call	80210030 <__sprint_r>
802080bc:	103eae1e 	bne	r2,zero,80207b78 <__reset+0xfa1e7b78>
802080c0:	8c7ffc04 	addi	r17,r17,-16
802080c4:	d8c02017 	ldw	r3,128(sp)
802080c8:	d8801f17 	ldw	r2,124(sp)
802080cc:	da000404 	addi	r8,sp,16
802080d0:	e47fef16 	blt	fp,r17,80208090 <__reset+0xfa1e8090>
802080d4:	9021883a 	mov	r16,r18
802080d8:	a825883a 	mov	r18,r21
802080dc:	b02b883a 	mov	r21,r22
802080e0:	882d883a 	mov	r22,r17
802080e4:	dc402917 	ldw	r17,164(sp)
802080e8:	d9002b17 	ldw	r4,172(sp)
802080ec:	1d87883a 	add	r3,r3,r22
802080f0:	10800044 	addi	r2,r2,1
802080f4:	41000015 	stw	r4,0(r8)
802080f8:	45800115 	stw	r22,4(r8)
802080fc:	d8c02015 	stw	r3,128(sp)
80208100:	d8801f15 	stw	r2,124(sp)
80208104:	010001c4 	movi	r4,7
80208108:	2081ee16 	blt	r4,r2,802088c4 <___vfprintf_internal_r+0x1154>
8020810c:	42000204 	addi	r8,r8,8
80208110:	9080400c 	andi	r2,r18,256
80208114:	1001181e 	bne	r2,zero,80208578 <___vfprintf_internal_r+0xe08>
80208118:	d9402e17 	ldw	r5,184(sp)
8020811c:	d8801f17 	ldw	r2,124(sp)
80208120:	44000015 	stw	r16,0(r8)
80208124:	1947883a 	add	r3,r3,r5
80208128:	10800044 	addi	r2,r2,1
8020812c:	41400115 	stw	r5,4(r8)
80208130:	d8c02015 	stw	r3,128(sp)
80208134:	d8801f15 	stw	r2,124(sp)
80208138:	010001c4 	movi	r4,7
8020813c:	2081d316 	blt	r4,r2,8020888c <___vfprintf_internal_r+0x111c>
80208140:	42000204 	addi	r8,r8,8
80208144:	9480010c 	andi	r18,r18,4
80208148:	90003226 	beq	r18,zero,80208214 <___vfprintf_internal_r+0xaa4>
8020814c:	d9403117 	ldw	r5,196(sp)
80208150:	d8802a17 	ldw	r2,168(sp)
80208154:	28a1c83a 	sub	r16,r5,r2
80208158:	04002e0e 	bge	zero,r16,80208214 <___vfprintf_internal_r+0xaa4>
8020815c:	04400404 	movi	r17,16
80208160:	d8801f17 	ldw	r2,124(sp)
80208164:	8c04a20e 	bge	r17,r16,802093f0 <___vfprintf_internal_r+0x1c80>
80208168:	016008b4 	movhi	r5,32802
8020816c:	296cda84 	addi	r5,r5,-19606
80208170:	d9403515 	stw	r5,212(sp)
80208174:	048001c4 	movi	r18,7
80208178:	dcc02c17 	ldw	r19,176(sp)
8020817c:	00000306 	br	8020818c <___vfprintf_internal_r+0xa1c>
80208180:	843ffc04 	addi	r16,r16,-16
80208184:	42000204 	addi	r8,r8,8
80208188:	8c00130e 	bge	r17,r16,802081d8 <___vfprintf_internal_r+0xa68>
8020818c:	012008b4 	movhi	r4,32802
80208190:	18c00404 	addi	r3,r3,16
80208194:	10800044 	addi	r2,r2,1
80208198:	212cda84 	addi	r4,r4,-19606
8020819c:	41000015 	stw	r4,0(r8)
802081a0:	44400115 	stw	r17,4(r8)
802081a4:	d8c02015 	stw	r3,128(sp)
802081a8:	d8801f15 	stw	r2,124(sp)
802081ac:	90bff40e 	bge	r18,r2,80208180 <__reset+0xfa1e8180>
802081b0:	d9801e04 	addi	r6,sp,120
802081b4:	b80b883a 	mov	r5,r23
802081b8:	9809883a 	mov	r4,r19
802081bc:	02100300 	call	80210030 <__sprint_r>
802081c0:	103e6d1e 	bne	r2,zero,80207b78 <__reset+0xfa1e7b78>
802081c4:	843ffc04 	addi	r16,r16,-16
802081c8:	d8c02017 	ldw	r3,128(sp)
802081cc:	d8801f17 	ldw	r2,124(sp)
802081d0:	da000404 	addi	r8,sp,16
802081d4:	8c3fed16 	blt	r17,r16,8020818c <__reset+0xfa1e818c>
802081d8:	d9403517 	ldw	r5,212(sp)
802081dc:	1c07883a 	add	r3,r3,r16
802081e0:	10800044 	addi	r2,r2,1
802081e4:	41400015 	stw	r5,0(r8)
802081e8:	44000115 	stw	r16,4(r8)
802081ec:	d8c02015 	stw	r3,128(sp)
802081f0:	d8801f15 	stw	r2,124(sp)
802081f4:	010001c4 	movi	r4,7
802081f8:	2080060e 	bge	r4,r2,80208214 <___vfprintf_internal_r+0xaa4>
802081fc:	d9002c17 	ldw	r4,176(sp)
80208200:	d9801e04 	addi	r6,sp,120
80208204:	b80b883a 	mov	r5,r23
80208208:	02100300 	call	80210030 <__sprint_r>
8020820c:	103e5a1e 	bne	r2,zero,80207b78 <__reset+0xfa1e7b78>
80208210:	d8c02017 	ldw	r3,128(sp)
80208214:	d8803117 	ldw	r2,196(sp)
80208218:	d9002a17 	ldw	r4,168(sp)
8020821c:	1100010e 	bge	r2,r4,80208224 <___vfprintf_internal_r+0xab4>
80208220:	2005883a 	mov	r2,r4
80208224:	d9402f17 	ldw	r5,188(sp)
80208228:	288b883a 	add	r5,r5,r2
8020822c:	d9402f15 	stw	r5,188(sp)
80208230:	18019e1e 	bne	r3,zero,802088ac <___vfprintf_internal_r+0x113c>
80208234:	a8800007 	ldb	r2,0(r21)
80208238:	d8001f15 	stw	zero,124(sp)
8020823c:	da000404 	addi	r8,sp,16
80208240:	103d851e 	bne	r2,zero,80207858 <__reset+0xfa1e7858>
80208244:	a821883a 	mov	r16,r21
80208248:	003d9b06 	br	802078b8 <__reset+0xfa1e78b8>
8020824c:	18c03fcc 	andi	r3,r3,255
80208250:	1805c11e 	bne	r3,zero,80209958 <___vfprintf_internal_r+0x21e8>
80208254:	94800414 	ori	r18,r18,16
80208258:	9080080c 	andi	r2,r18,32
8020825c:	10020c26 	beq	r2,zero,80208a90 <___vfprintf_internal_r+0x1320>
80208260:	d8802d17 	ldw	r2,180(sp)
80208264:	d9002917 	ldw	r4,164(sp)
80208268:	d8002785 	stb	zero,158(sp)
8020826c:	10c00204 	addi	r3,r2,8
80208270:	14c00017 	ldw	r19,0(r2)
80208274:	15800117 	ldw	r22,4(r2)
80208278:	20040f16 	blt	r4,zero,802092b8 <___vfprintf_internal_r+0x1b48>
8020827c:	013fdfc4 	movi	r4,-129
80208280:	9d84b03a 	or	r2,r19,r22
80208284:	d8c02d15 	stw	r3,180(sp)
80208288:	9124703a 	and	r18,r18,r4
8020828c:	0039883a 	mov	fp,zero
80208290:	103e891e 	bne	r2,zero,80207cb8 <__reset+0xfa1e7cb8>
80208294:	d9002917 	ldw	r4,164(sp)
80208298:	2002c11e 	bne	r4,zero,80208da0 <___vfprintf_internal_r+0x1630>
8020829c:	d8002915 	stw	zero,164(sp)
802082a0:	d8002e15 	stw	zero,184(sp)
802082a4:	dc001e04 	addi	r16,sp,120
802082a8:	003ef806 	br	80207e8c <__reset+0xfa1e7e8c>
802082ac:	18c03fcc 	andi	r3,r3,255
802082b0:	18059d1e 	bne	r3,zero,80209928 <___vfprintf_internal_r+0x21b8>
802082b4:	016008b4 	movhi	r5,32802
802082b8:	296cc204 	addi	r5,r5,-19704
802082bc:	d9403915 	stw	r5,228(sp)
802082c0:	9080080c 	andi	r2,r18,32
802082c4:	10005226 	beq	r2,zero,80208410 <___vfprintf_internal_r+0xca0>
802082c8:	d8802d17 	ldw	r2,180(sp)
802082cc:	14c00017 	ldw	r19,0(r2)
802082d0:	15800117 	ldw	r22,4(r2)
802082d4:	10800204 	addi	r2,r2,8
802082d8:	d8802d15 	stw	r2,180(sp)
802082dc:	9080004c 	andi	r2,r18,1
802082e0:	10019026 	beq	r2,zero,80208924 <___vfprintf_internal_r+0x11b4>
802082e4:	9d84b03a 	or	r2,r19,r22
802082e8:	10036926 	beq	r2,zero,80209090 <___vfprintf_internal_r+0x1920>
802082ec:	d8c02917 	ldw	r3,164(sp)
802082f0:	00800c04 	movi	r2,48
802082f4:	d8802705 	stb	r2,156(sp)
802082f8:	dc402745 	stb	r17,157(sp)
802082fc:	d8002785 	stb	zero,158(sp)
80208300:	90800094 	ori	r2,r18,2
80208304:	18045d16 	blt	r3,zero,8020947c <___vfprintf_internal_r+0x1d0c>
80208308:	00bfdfc4 	movi	r2,-129
8020830c:	90a4703a 	and	r18,r18,r2
80208310:	94800094 	ori	r18,r18,2
80208314:	0039883a 	mov	fp,zero
80208318:	d9003917 	ldw	r4,228(sp)
8020831c:	dc001e04 	addi	r16,sp,120
80208320:	988003cc 	andi	r2,r19,15
80208324:	b006973a 	slli	r3,r22,28
80208328:	2085883a 	add	r2,r4,r2
8020832c:	9826d13a 	srli	r19,r19,4
80208330:	10800003 	ldbu	r2,0(r2)
80208334:	b02cd13a 	srli	r22,r22,4
80208338:	843fffc4 	addi	r16,r16,-1
8020833c:	1ce6b03a 	or	r19,r3,r19
80208340:	80800005 	stb	r2,0(r16)
80208344:	9d84b03a 	or	r2,r19,r22
80208348:	103ff51e 	bne	r2,zero,80208320 <__reset+0xfa1e8320>
8020834c:	d8c02817 	ldw	r3,160(sp)
80208350:	1c07c83a 	sub	r3,r3,r16
80208354:	d8c02e15 	stw	r3,184(sp)
80208358:	003ecc06 	br	80207e8c <__reset+0xfa1e7e8c>
8020835c:	18c03fcc 	andi	r3,r3,255
80208360:	183e9f26 	beq	r3,zero,80207de0 <__reset+0xfa1e7de0>
80208364:	d9c02785 	stb	r7,158(sp)
80208368:	003e9d06 	br	80207de0 <__reset+0xfa1e7de0>
8020836c:	00c00044 	movi	r3,1
80208370:	01c00ac4 	movi	r7,43
80208374:	ac400007 	ldb	r17,0(r21)
80208378:	003d5e06 	br	802078f4 <__reset+0xfa1e78f4>
8020837c:	94800814 	ori	r18,r18,32
80208380:	ac400007 	ldb	r17,0(r21)
80208384:	003d5b06 	br	802078f4 <__reset+0xfa1e78f4>
80208388:	d8c02d17 	ldw	r3,180(sp)
8020838c:	d8002785 	stb	zero,158(sp)
80208390:	1c000017 	ldw	r16,0(r3)
80208394:	1cc00104 	addi	r19,r3,4
80208398:	80041926 	beq	r16,zero,80209400 <___vfprintf_internal_r+0x1c90>
8020839c:	d9002917 	ldw	r4,164(sp)
802083a0:	2003d016 	blt	r4,zero,802092e4 <___vfprintf_internal_r+0x1b74>
802083a4:	200d883a 	mov	r6,r4
802083a8:	000b883a 	mov	r5,zero
802083ac:	8009883a 	mov	r4,r16
802083b0:	da003d15 	stw	r8,244(sp)
802083b4:	020cf800 	call	8020cf80 <memchr>
802083b8:	da003d17 	ldw	r8,244(sp)
802083bc:	10045426 	beq	r2,zero,80209510 <___vfprintf_internal_r+0x1da0>
802083c0:	1405c83a 	sub	r2,r2,r16
802083c4:	d8802e15 	stw	r2,184(sp)
802083c8:	1003cc16 	blt	r2,zero,802092fc <___vfprintf_internal_r+0x1b8c>
802083cc:	df002783 	ldbu	fp,158(sp)
802083d0:	d8802a15 	stw	r2,168(sp)
802083d4:	dcc02d15 	stw	r19,180(sp)
802083d8:	d8002915 	stw	zero,164(sp)
802083dc:	d8003215 	stw	zero,200(sp)
802083e0:	003eb006 	br	80207ea4 <__reset+0xfa1e7ea4>
802083e4:	18c03fcc 	andi	r3,r3,255
802083e8:	183f9b26 	beq	r3,zero,80208258 <__reset+0xfa1e8258>
802083ec:	d9c02785 	stb	r7,158(sp)
802083f0:	003f9906 	br	80208258 <__reset+0xfa1e8258>
802083f4:	18c03fcc 	andi	r3,r3,255
802083f8:	1805551e 	bne	r3,zero,80209950 <___vfprintf_internal_r+0x21e0>
802083fc:	016008b4 	movhi	r5,32802
80208400:	296cc704 	addi	r5,r5,-19684
80208404:	d9403915 	stw	r5,228(sp)
80208408:	9080080c 	andi	r2,r18,32
8020840c:	103fae1e 	bne	r2,zero,802082c8 <__reset+0xfa1e82c8>
80208410:	9080040c 	andi	r2,r18,16
80208414:	1002de26 	beq	r2,zero,80208f90 <___vfprintf_internal_r+0x1820>
80208418:	d8c02d17 	ldw	r3,180(sp)
8020841c:	002d883a 	mov	r22,zero
80208420:	1cc00017 	ldw	r19,0(r3)
80208424:	18c00104 	addi	r3,r3,4
80208428:	d8c02d15 	stw	r3,180(sp)
8020842c:	003fab06 	br	802082dc <__reset+0xfa1e82dc>
80208430:	38803fcc 	andi	r2,r7,255
80208434:	1080201c 	xori	r2,r2,128
80208438:	10bfe004 	addi	r2,r2,-128
8020843c:	1002d21e 	bne	r2,zero,80208f88 <___vfprintf_internal_r+0x1818>
80208440:	00c00044 	movi	r3,1
80208444:	01c00804 	movi	r7,32
80208448:	ac400007 	ldb	r17,0(r21)
8020844c:	003d2906 	br	802078f4 <__reset+0xfa1e78f4>
80208450:	94800054 	ori	r18,r18,1
80208454:	ac400007 	ldb	r17,0(r21)
80208458:	003d2606 	br	802078f4 <__reset+0xfa1e78f4>
8020845c:	18c03fcc 	andi	r3,r3,255
80208460:	183e0526 	beq	r3,zero,80207c78 <__reset+0xfa1e7c78>
80208464:	d9c02785 	stb	r7,158(sp)
80208468:	003e0306 	br	80207c78 <__reset+0xfa1e7c78>
8020846c:	94801014 	ori	r18,r18,64
80208470:	ac400007 	ldb	r17,0(r21)
80208474:	003d1f06 	br	802078f4 <__reset+0xfa1e78f4>
80208478:	ac400007 	ldb	r17,0(r21)
8020847c:	8a438726 	beq	r17,r9,8020929c <___vfprintf_internal_r+0x1b2c>
80208480:	94800414 	ori	r18,r18,16
80208484:	003d1b06 	br	802078f4 <__reset+0xfa1e78f4>
80208488:	18c03fcc 	andi	r3,r3,255
8020848c:	1805341e 	bne	r3,zero,80209960 <___vfprintf_internal_r+0x21f0>
80208490:	9080080c 	andi	r2,r18,32
80208494:	1002cd26 	beq	r2,zero,80208fcc <___vfprintf_internal_r+0x185c>
80208498:	d9402d17 	ldw	r5,180(sp)
8020849c:	d9002f17 	ldw	r4,188(sp)
802084a0:	28800017 	ldw	r2,0(r5)
802084a4:	2007d7fa 	srai	r3,r4,31
802084a8:	29400104 	addi	r5,r5,4
802084ac:	d9402d15 	stw	r5,180(sp)
802084b0:	11000015 	stw	r4,0(r2)
802084b4:	10c00115 	stw	r3,4(r2)
802084b8:	003ce506 	br	80207850 <__reset+0xfa1e7850>
802084bc:	d8c02d17 	ldw	r3,180(sp)
802084c0:	d9002d17 	ldw	r4,180(sp)
802084c4:	d8002785 	stb	zero,158(sp)
802084c8:	18800017 	ldw	r2,0(r3)
802084cc:	21000104 	addi	r4,r4,4
802084d0:	00c00044 	movi	r3,1
802084d4:	d8c02a15 	stw	r3,168(sp)
802084d8:	d8801405 	stb	r2,80(sp)
802084dc:	d9002d15 	stw	r4,180(sp)
802084e0:	d8c02e15 	stw	r3,184(sp)
802084e4:	d8002915 	stw	zero,164(sp)
802084e8:	d8003215 	stw	zero,200(sp)
802084ec:	dc001404 	addi	r16,sp,80
802084f0:	0039883a 	mov	fp,zero
802084f4:	003e7206 	br	80207ec0 <__reset+0xfa1e7ec0>
802084f8:	012008b4 	movhi	r4,32802
802084fc:	212cc704 	addi	r4,r4,-19684
80208500:	0039883a 	mov	fp,zero
80208504:	d9003915 	stw	r4,228(sp)
80208508:	04401e04 	movi	r17,120
8020850c:	003f8206 	br	80208318 <__reset+0xfa1e8318>
80208510:	18c03fcc 	andi	r3,r3,255
80208514:	1805061e 	bne	r3,zero,80209930 <___vfprintf_internal_r+0x21c0>
80208518:	883d9126 	beq	r17,zero,80207b60 <__reset+0xfa1e7b60>
8020851c:	00c00044 	movi	r3,1
80208520:	d8c02a15 	stw	r3,168(sp)
80208524:	dc401405 	stb	r17,80(sp)
80208528:	d8002785 	stb	zero,158(sp)
8020852c:	003fec06 	br	802084e0 <__reset+0xfa1e84e0>
80208530:	016008b4 	movhi	r5,32802
80208534:	296cc704 	addi	r5,r5,-19684
80208538:	d9403915 	stw	r5,228(sp)
8020853c:	d8c02d15 	stw	r3,180(sp)
80208540:	1025883a 	mov	r18,r2
80208544:	04401e04 	movi	r17,120
80208548:	9d84b03a 	or	r2,r19,r22
8020854c:	1000fc1e 	bne	r2,zero,80208940 <___vfprintf_internal_r+0x11d0>
80208550:	0039883a 	mov	fp,zero
80208554:	00800084 	movi	r2,2
80208558:	10803fcc 	andi	r2,r2,255
8020855c:	00c00044 	movi	r3,1
80208560:	10c20f26 	beq	r2,r3,80208da0 <___vfprintf_internal_r+0x1630>
80208564:	00c00084 	movi	r3,2
80208568:	10fd6326 	beq	r2,r3,80207af8 <__reset+0xfa1e7af8>
8020856c:	003e2d06 	br	80207e24 <__reset+0xfa1e7e24>
80208570:	d8c02017 	ldw	r3,128(sp)
80208574:	003e9306 	br	80207fc4 <__reset+0xfa1e7fc4>
80208578:	00801944 	movi	r2,101
8020857c:	14407e0e 	bge	r2,r17,80208778 <___vfprintf_internal_r+0x1008>
80208580:	d9003617 	ldw	r4,216(sp)
80208584:	d9403817 	ldw	r5,224(sp)
80208588:	000d883a 	mov	r6,zero
8020858c:	000f883a 	mov	r7,zero
80208590:	d8c03c15 	stw	r3,240(sp)
80208594:	da003d15 	stw	r8,244(sp)
80208598:	0213ca80 	call	80213ca8 <__eqdf2>
8020859c:	d8c03c17 	ldw	r3,240(sp)
802085a0:	da003d17 	ldw	r8,244(sp)
802085a4:	1000f71e 	bne	r2,zero,80208984 <___vfprintf_internal_r+0x1214>
802085a8:	d8801f17 	ldw	r2,124(sp)
802085ac:	012008b4 	movhi	r4,32802
802085b0:	212cce04 	addi	r4,r4,-19656
802085b4:	18c00044 	addi	r3,r3,1
802085b8:	10800044 	addi	r2,r2,1
802085bc:	41000015 	stw	r4,0(r8)
802085c0:	01000044 	movi	r4,1
802085c4:	41000115 	stw	r4,4(r8)
802085c8:	d8c02015 	stw	r3,128(sp)
802085cc:	d8801f15 	stw	r2,124(sp)
802085d0:	010001c4 	movi	r4,7
802085d4:	2082b816 	blt	r4,r2,802090b8 <___vfprintf_internal_r+0x1948>
802085d8:	42000204 	addi	r8,r8,8
802085dc:	d8802617 	ldw	r2,152(sp)
802085e0:	d9403317 	ldw	r5,204(sp)
802085e4:	11400216 	blt	r2,r5,802085f0 <___vfprintf_internal_r+0xe80>
802085e8:	9080004c 	andi	r2,r18,1
802085ec:	103ed526 	beq	r2,zero,80208144 <__reset+0xfa1e8144>
802085f0:	d8803717 	ldw	r2,220(sp)
802085f4:	d9003417 	ldw	r4,208(sp)
802085f8:	d9403717 	ldw	r5,220(sp)
802085fc:	1887883a 	add	r3,r3,r2
80208600:	d8801f17 	ldw	r2,124(sp)
80208604:	41000015 	stw	r4,0(r8)
80208608:	41400115 	stw	r5,4(r8)
8020860c:	10800044 	addi	r2,r2,1
80208610:	d8c02015 	stw	r3,128(sp)
80208614:	d8801f15 	stw	r2,124(sp)
80208618:	010001c4 	movi	r4,7
8020861c:	20832916 	blt	r4,r2,802092c4 <___vfprintf_internal_r+0x1b54>
80208620:	42000204 	addi	r8,r8,8
80208624:	d8803317 	ldw	r2,204(sp)
80208628:	143fffc4 	addi	r16,r2,-1
8020862c:	043ec50e 	bge	zero,r16,80208144 <__reset+0xfa1e8144>
80208630:	04400404 	movi	r17,16
80208634:	d8801f17 	ldw	r2,124(sp)
80208638:	8c00880e 	bge	r17,r16,8020885c <___vfprintf_internal_r+0x10ec>
8020863c:	016008b4 	movhi	r5,32802
80208640:	296cd684 	addi	r5,r5,-19622
80208644:	d9402b15 	stw	r5,172(sp)
80208648:	058001c4 	movi	r22,7
8020864c:	dcc02c17 	ldw	r19,176(sp)
80208650:	00000306 	br	80208660 <___vfprintf_internal_r+0xef0>
80208654:	42000204 	addi	r8,r8,8
80208658:	843ffc04 	addi	r16,r16,-16
8020865c:	8c00820e 	bge	r17,r16,80208868 <___vfprintf_internal_r+0x10f8>
80208660:	18c00404 	addi	r3,r3,16
80208664:	10800044 	addi	r2,r2,1
80208668:	45000015 	stw	r20,0(r8)
8020866c:	44400115 	stw	r17,4(r8)
80208670:	d8c02015 	stw	r3,128(sp)
80208674:	d8801f15 	stw	r2,124(sp)
80208678:	b0bff60e 	bge	r22,r2,80208654 <__reset+0xfa1e8654>
8020867c:	d9801e04 	addi	r6,sp,120
80208680:	b80b883a 	mov	r5,r23
80208684:	9809883a 	mov	r4,r19
80208688:	02100300 	call	80210030 <__sprint_r>
8020868c:	103d3a1e 	bne	r2,zero,80207b78 <__reset+0xfa1e7b78>
80208690:	d8c02017 	ldw	r3,128(sp)
80208694:	d8801f17 	ldw	r2,124(sp)
80208698:	da000404 	addi	r8,sp,16
8020869c:	003fee06 	br	80208658 <__reset+0xfa1e8658>
802086a0:	d9403117 	ldw	r5,196(sp)
802086a4:	d8802a17 	ldw	r2,168(sp)
802086a8:	28adc83a 	sub	r22,r5,r2
802086ac:	05be630e 	bge	zero,r22,8020803c <__reset+0xfa1e803c>
802086b0:	07000404 	movi	fp,16
802086b4:	d8801f17 	ldw	r2,124(sp)
802086b8:	e5838f0e 	bge	fp,r22,802094f8 <___vfprintf_internal_r+0x1d88>
802086bc:	016008b4 	movhi	r5,32802
802086c0:	296cd684 	addi	r5,r5,-19622
802086c4:	dc403015 	stw	r17,192(sp)
802086c8:	d9402b15 	stw	r5,172(sp)
802086cc:	b023883a 	mov	r17,r22
802086d0:	04c001c4 	movi	r19,7
802086d4:	a82d883a 	mov	r22,r21
802086d8:	902b883a 	mov	r21,r18
802086dc:	8025883a 	mov	r18,r16
802086e0:	dc002c17 	ldw	r16,176(sp)
802086e4:	00000306 	br	802086f4 <___vfprintf_internal_r+0xf84>
802086e8:	8c7ffc04 	addi	r17,r17,-16
802086ec:	42000204 	addi	r8,r8,8
802086f0:	e440110e 	bge	fp,r17,80208738 <___vfprintf_internal_r+0xfc8>
802086f4:	18c00404 	addi	r3,r3,16
802086f8:	10800044 	addi	r2,r2,1
802086fc:	45000015 	stw	r20,0(r8)
80208700:	47000115 	stw	fp,4(r8)
80208704:	d8c02015 	stw	r3,128(sp)
80208708:	d8801f15 	stw	r2,124(sp)
8020870c:	98bff60e 	bge	r19,r2,802086e8 <__reset+0xfa1e86e8>
80208710:	d9801e04 	addi	r6,sp,120
80208714:	b80b883a 	mov	r5,r23
80208718:	8009883a 	mov	r4,r16
8020871c:	02100300 	call	80210030 <__sprint_r>
80208720:	103d151e 	bne	r2,zero,80207b78 <__reset+0xfa1e7b78>
80208724:	8c7ffc04 	addi	r17,r17,-16
80208728:	d8c02017 	ldw	r3,128(sp)
8020872c:	d8801f17 	ldw	r2,124(sp)
80208730:	da000404 	addi	r8,sp,16
80208734:	e47fef16 	blt	fp,r17,802086f4 <__reset+0xfa1e86f4>
80208738:	9021883a 	mov	r16,r18
8020873c:	a825883a 	mov	r18,r21
80208740:	b02b883a 	mov	r21,r22
80208744:	882d883a 	mov	r22,r17
80208748:	dc403017 	ldw	r17,192(sp)
8020874c:	d9002b17 	ldw	r4,172(sp)
80208750:	1d87883a 	add	r3,r3,r22
80208754:	10800044 	addi	r2,r2,1
80208758:	41000015 	stw	r4,0(r8)
8020875c:	45800115 	stw	r22,4(r8)
80208760:	d8c02015 	stw	r3,128(sp)
80208764:	d8801f15 	stw	r2,124(sp)
80208768:	010001c4 	movi	r4,7
8020876c:	20818e16 	blt	r4,r2,80208da8 <___vfprintf_internal_r+0x1638>
80208770:	42000204 	addi	r8,r8,8
80208774:	003e3106 	br	8020803c <__reset+0xfa1e803c>
80208778:	d9403317 	ldw	r5,204(sp)
8020877c:	00800044 	movi	r2,1
80208780:	18c00044 	addi	r3,r3,1
80208784:	1141530e 	bge	r2,r5,80208cd4 <___vfprintf_internal_r+0x1564>
80208788:	dc401f17 	ldw	r17,124(sp)
8020878c:	00800044 	movi	r2,1
80208790:	40800115 	stw	r2,4(r8)
80208794:	8c400044 	addi	r17,r17,1
80208798:	44000015 	stw	r16,0(r8)
8020879c:	d8c02015 	stw	r3,128(sp)
802087a0:	dc401f15 	stw	r17,124(sp)
802087a4:	008001c4 	movi	r2,7
802087a8:	14416b16 	blt	r2,r17,80208d58 <___vfprintf_internal_r+0x15e8>
802087ac:	42000204 	addi	r8,r8,8
802087b0:	d8803717 	ldw	r2,220(sp)
802087b4:	d9003417 	ldw	r4,208(sp)
802087b8:	8c400044 	addi	r17,r17,1
802087bc:	10c7883a 	add	r3,r2,r3
802087c0:	40800115 	stw	r2,4(r8)
802087c4:	41000015 	stw	r4,0(r8)
802087c8:	d8c02015 	stw	r3,128(sp)
802087cc:	dc401f15 	stw	r17,124(sp)
802087d0:	008001c4 	movi	r2,7
802087d4:	14416916 	blt	r2,r17,80208d7c <___vfprintf_internal_r+0x160c>
802087d8:	45800204 	addi	r22,r8,8
802087dc:	d9003617 	ldw	r4,216(sp)
802087e0:	d9403817 	ldw	r5,224(sp)
802087e4:	000d883a 	mov	r6,zero
802087e8:	000f883a 	mov	r7,zero
802087ec:	d8c03c15 	stw	r3,240(sp)
802087f0:	0213ca80 	call	80213ca8 <__eqdf2>
802087f4:	d8c03c17 	ldw	r3,240(sp)
802087f8:	1000bc26 	beq	r2,zero,80208aec <___vfprintf_internal_r+0x137c>
802087fc:	d9403317 	ldw	r5,204(sp)
80208800:	84000044 	addi	r16,r16,1
80208804:	8c400044 	addi	r17,r17,1
80208808:	28bfffc4 	addi	r2,r5,-1
8020880c:	1887883a 	add	r3,r3,r2
80208810:	b0800115 	stw	r2,4(r22)
80208814:	b4000015 	stw	r16,0(r22)
80208818:	d8c02015 	stw	r3,128(sp)
8020881c:	dc401f15 	stw	r17,124(sp)
80208820:	008001c4 	movi	r2,7
80208824:	14414316 	blt	r2,r17,80208d34 <___vfprintf_internal_r+0x15c4>
80208828:	b5800204 	addi	r22,r22,8
8020882c:	d9003a17 	ldw	r4,232(sp)
80208830:	df0022c4 	addi	fp,sp,139
80208834:	8c400044 	addi	r17,r17,1
80208838:	20c7883a 	add	r3,r4,r3
8020883c:	b7000015 	stw	fp,0(r22)
80208840:	b1000115 	stw	r4,4(r22)
80208844:	d8c02015 	stw	r3,128(sp)
80208848:	dc401f15 	stw	r17,124(sp)
8020884c:	008001c4 	movi	r2,7
80208850:	14400e16 	blt	r2,r17,8020888c <___vfprintf_internal_r+0x111c>
80208854:	b2000204 	addi	r8,r22,8
80208858:	003e3a06 	br	80208144 <__reset+0xfa1e8144>
8020885c:	012008b4 	movhi	r4,32802
80208860:	212cd684 	addi	r4,r4,-19622
80208864:	d9002b15 	stw	r4,172(sp)
80208868:	d9002b17 	ldw	r4,172(sp)
8020886c:	1c07883a 	add	r3,r3,r16
80208870:	44000115 	stw	r16,4(r8)
80208874:	41000015 	stw	r4,0(r8)
80208878:	10800044 	addi	r2,r2,1
8020887c:	d8c02015 	stw	r3,128(sp)
80208880:	d8801f15 	stw	r2,124(sp)
80208884:	010001c4 	movi	r4,7
80208888:	20be2d0e 	bge	r4,r2,80208140 <__reset+0xfa1e8140>
8020888c:	d9002c17 	ldw	r4,176(sp)
80208890:	d9801e04 	addi	r6,sp,120
80208894:	b80b883a 	mov	r5,r23
80208898:	02100300 	call	80210030 <__sprint_r>
8020889c:	103cb61e 	bne	r2,zero,80207b78 <__reset+0xfa1e7b78>
802088a0:	d8c02017 	ldw	r3,128(sp)
802088a4:	da000404 	addi	r8,sp,16
802088a8:	003e2606 	br	80208144 <__reset+0xfa1e8144>
802088ac:	d9002c17 	ldw	r4,176(sp)
802088b0:	d9801e04 	addi	r6,sp,120
802088b4:	b80b883a 	mov	r5,r23
802088b8:	02100300 	call	80210030 <__sprint_r>
802088bc:	103e5d26 	beq	r2,zero,80208234 <__reset+0xfa1e8234>
802088c0:	003cad06 	br	80207b78 <__reset+0xfa1e7b78>
802088c4:	d9002c17 	ldw	r4,176(sp)
802088c8:	d9801e04 	addi	r6,sp,120
802088cc:	b80b883a 	mov	r5,r23
802088d0:	02100300 	call	80210030 <__sprint_r>
802088d4:	103ca81e 	bne	r2,zero,80207b78 <__reset+0xfa1e7b78>
802088d8:	d8c02017 	ldw	r3,128(sp)
802088dc:	da000404 	addi	r8,sp,16
802088e0:	003e0b06 	br	80208110 <__reset+0xfa1e8110>
802088e4:	d9002c17 	ldw	r4,176(sp)
802088e8:	d9801e04 	addi	r6,sp,120
802088ec:	b80b883a 	mov	r5,r23
802088f0:	02100300 	call	80210030 <__sprint_r>
802088f4:	103ca01e 	bne	r2,zero,80207b78 <__reset+0xfa1e7b78>
802088f8:	d8c02017 	ldw	r3,128(sp)
802088fc:	da000404 	addi	r8,sp,16
80208900:	003dbd06 	br	80207ff8 <__reset+0xfa1e7ff8>
80208904:	d9002c17 	ldw	r4,176(sp)
80208908:	d9801e04 	addi	r6,sp,120
8020890c:	b80b883a 	mov	r5,r23
80208910:	02100300 	call	80210030 <__sprint_r>
80208914:	103c981e 	bne	r2,zero,80207b78 <__reset+0xfa1e7b78>
80208918:	d8c02017 	ldw	r3,128(sp)
8020891c:	da000404 	addi	r8,sp,16
80208920:	003dc306 	br	80208030 <__reset+0xfa1e8030>
80208924:	d8802917 	ldw	r2,164(sp)
80208928:	d8002785 	stb	zero,158(sp)
8020892c:	103f0616 	blt	r2,zero,80208548 <__reset+0xfa1e8548>
80208930:	00ffdfc4 	movi	r3,-129
80208934:	9d84b03a 	or	r2,r19,r22
80208938:	90e4703a 	and	r18,r18,r3
8020893c:	103c6b26 	beq	r2,zero,80207aec <__reset+0xfa1e7aec>
80208940:	0039883a 	mov	fp,zero
80208944:	003e7406 	br	80208318 <__reset+0xfa1e8318>
80208948:	9080040c 	andi	r2,r18,16
8020894c:	1001b326 	beq	r2,zero,8020901c <___vfprintf_internal_r+0x18ac>
80208950:	d9002d17 	ldw	r4,180(sp)
80208954:	d9402917 	ldw	r5,164(sp)
80208958:	d8002785 	stb	zero,158(sp)
8020895c:	20800104 	addi	r2,r4,4
80208960:	24c00017 	ldw	r19,0(r4)
80208964:	002d883a 	mov	r22,zero
80208968:	2801b516 	blt	r5,zero,80209040 <___vfprintf_internal_r+0x18d0>
8020896c:	00ffdfc4 	movi	r3,-129
80208970:	d8802d15 	stw	r2,180(sp)
80208974:	90e4703a 	and	r18,r18,r3
80208978:	983d2726 	beq	r19,zero,80207e18 <__reset+0xfa1e7e18>
8020897c:	0039883a 	mov	fp,zero
80208980:	003d2a06 	br	80207e2c <__reset+0xfa1e7e2c>
80208984:	dc402617 	ldw	r17,152(sp)
80208988:	0441d30e 	bge	zero,r17,802090d8 <___vfprintf_internal_r+0x1968>
8020898c:	dc403217 	ldw	r17,200(sp)
80208990:	d8803317 	ldw	r2,204(sp)
80208994:	1440010e 	bge	r2,r17,8020899c <___vfprintf_internal_r+0x122c>
80208998:	1023883a 	mov	r17,r2
8020899c:	04400a0e 	bge	zero,r17,802089c8 <___vfprintf_internal_r+0x1258>
802089a0:	d8801f17 	ldw	r2,124(sp)
802089a4:	1c47883a 	add	r3,r3,r17
802089a8:	44000015 	stw	r16,0(r8)
802089ac:	10800044 	addi	r2,r2,1
802089b0:	44400115 	stw	r17,4(r8)
802089b4:	d8c02015 	stw	r3,128(sp)
802089b8:	d8801f15 	stw	r2,124(sp)
802089bc:	010001c4 	movi	r4,7
802089c0:	20826516 	blt	r4,r2,80209358 <___vfprintf_internal_r+0x1be8>
802089c4:	42000204 	addi	r8,r8,8
802089c8:	88026116 	blt	r17,zero,80209350 <___vfprintf_internal_r+0x1be0>
802089cc:	d9003217 	ldw	r4,200(sp)
802089d0:	2463c83a 	sub	r17,r4,r17
802089d4:	04407b0e 	bge	zero,r17,80208bc4 <___vfprintf_internal_r+0x1454>
802089d8:	05800404 	movi	r22,16
802089dc:	d8801f17 	ldw	r2,124(sp)
802089e0:	b4419d0e 	bge	r22,r17,80209058 <___vfprintf_internal_r+0x18e8>
802089e4:	012008b4 	movhi	r4,32802
802089e8:	212cd684 	addi	r4,r4,-19622
802089ec:	d9002b15 	stw	r4,172(sp)
802089f0:	070001c4 	movi	fp,7
802089f4:	dcc02c17 	ldw	r19,176(sp)
802089f8:	00000306 	br	80208a08 <___vfprintf_internal_r+0x1298>
802089fc:	42000204 	addi	r8,r8,8
80208a00:	8c7ffc04 	addi	r17,r17,-16
80208a04:	b441970e 	bge	r22,r17,80209064 <___vfprintf_internal_r+0x18f4>
80208a08:	18c00404 	addi	r3,r3,16
80208a0c:	10800044 	addi	r2,r2,1
80208a10:	45000015 	stw	r20,0(r8)
80208a14:	45800115 	stw	r22,4(r8)
80208a18:	d8c02015 	stw	r3,128(sp)
80208a1c:	d8801f15 	stw	r2,124(sp)
80208a20:	e0bff60e 	bge	fp,r2,802089fc <__reset+0xfa1e89fc>
80208a24:	d9801e04 	addi	r6,sp,120
80208a28:	b80b883a 	mov	r5,r23
80208a2c:	9809883a 	mov	r4,r19
80208a30:	02100300 	call	80210030 <__sprint_r>
80208a34:	103c501e 	bne	r2,zero,80207b78 <__reset+0xfa1e7b78>
80208a38:	d8c02017 	ldw	r3,128(sp)
80208a3c:	d8801f17 	ldw	r2,124(sp)
80208a40:	da000404 	addi	r8,sp,16
80208a44:	003fee06 	br	80208a00 <__reset+0xfa1e8a00>
80208a48:	d9002c17 	ldw	r4,176(sp)
80208a4c:	d9801e04 	addi	r6,sp,120
80208a50:	b80b883a 	mov	r5,r23
80208a54:	02100300 	call	80210030 <__sprint_r>
80208a58:	103c471e 	bne	r2,zero,80207b78 <__reset+0xfa1e7b78>
80208a5c:	d8c02017 	ldw	r3,128(sp)
80208a60:	df002787 	ldb	fp,158(sp)
80208a64:	da000404 	addi	r8,sp,16
80208a68:	003d5606 	br	80207fc4 <__reset+0xfa1e7fc4>
80208a6c:	9080040c 	andi	r2,r18,16
80208a70:	10016126 	beq	r2,zero,80208ff8 <___vfprintf_internal_r+0x1888>
80208a74:	d8802d17 	ldw	r2,180(sp)
80208a78:	14c00017 	ldw	r19,0(r2)
80208a7c:	10800104 	addi	r2,r2,4
80208a80:	d8802d15 	stw	r2,180(sp)
80208a84:	982dd7fa 	srai	r22,r19,31
80208a88:	b005883a 	mov	r2,r22
80208a8c:	003c8206 	br	80207c98 <__reset+0xfa1e7c98>
80208a90:	9080040c 	andi	r2,r18,16
80208a94:	10003526 	beq	r2,zero,80208b6c <___vfprintf_internal_r+0x13fc>
80208a98:	d9402d17 	ldw	r5,180(sp)
80208a9c:	d8c02917 	ldw	r3,164(sp)
80208aa0:	d8002785 	stb	zero,158(sp)
80208aa4:	28800104 	addi	r2,r5,4
80208aa8:	2cc00017 	ldw	r19,0(r5)
80208aac:	002d883a 	mov	r22,zero
80208ab0:	18003716 	blt	r3,zero,80208b90 <___vfprintf_internal_r+0x1420>
80208ab4:	00ffdfc4 	movi	r3,-129
80208ab8:	d8802d15 	stw	r2,180(sp)
80208abc:	90e4703a 	and	r18,r18,r3
80208ac0:	0039883a 	mov	fp,zero
80208ac4:	983df326 	beq	r19,zero,80208294 <__reset+0xfa1e8294>
80208ac8:	00800244 	movi	r2,9
80208acc:	14fc7b36 	bltu	r2,r19,80207cbc <__reset+0xfa1e7cbc>
80208ad0:	d8c02817 	ldw	r3,160(sp)
80208ad4:	dc001dc4 	addi	r16,sp,119
80208ad8:	9cc00c04 	addi	r19,r19,48
80208adc:	1c07c83a 	sub	r3,r3,r16
80208ae0:	dcc01dc5 	stb	r19,119(sp)
80208ae4:	d8c02e15 	stw	r3,184(sp)
80208ae8:	003ce806 	br	80207e8c <__reset+0xfa1e7e8c>
80208aec:	d8803317 	ldw	r2,204(sp)
80208af0:	143fffc4 	addi	r16,r2,-1
80208af4:	043f4d0e 	bge	zero,r16,8020882c <__reset+0xfa1e882c>
80208af8:	07000404 	movi	fp,16
80208afc:	e400810e 	bge	fp,r16,80208d04 <___vfprintf_internal_r+0x1594>
80208b00:	016008b4 	movhi	r5,32802
80208b04:	296cd684 	addi	r5,r5,-19622
80208b08:	d9402b15 	stw	r5,172(sp)
80208b0c:	01c001c4 	movi	r7,7
80208b10:	dcc02c17 	ldw	r19,176(sp)
80208b14:	00000306 	br	80208b24 <___vfprintf_internal_r+0x13b4>
80208b18:	b5800204 	addi	r22,r22,8
80208b1c:	843ffc04 	addi	r16,r16,-16
80208b20:	e4007b0e 	bge	fp,r16,80208d10 <___vfprintf_internal_r+0x15a0>
80208b24:	18c00404 	addi	r3,r3,16
80208b28:	8c400044 	addi	r17,r17,1
80208b2c:	b5000015 	stw	r20,0(r22)
80208b30:	b7000115 	stw	fp,4(r22)
80208b34:	d8c02015 	stw	r3,128(sp)
80208b38:	dc401f15 	stw	r17,124(sp)
80208b3c:	3c7ff60e 	bge	r7,r17,80208b18 <__reset+0xfa1e8b18>
80208b40:	d9801e04 	addi	r6,sp,120
80208b44:	b80b883a 	mov	r5,r23
80208b48:	9809883a 	mov	r4,r19
80208b4c:	d9c03c15 	stw	r7,240(sp)
80208b50:	02100300 	call	80210030 <__sprint_r>
80208b54:	d9c03c17 	ldw	r7,240(sp)
80208b58:	103c071e 	bne	r2,zero,80207b78 <__reset+0xfa1e7b78>
80208b5c:	d8c02017 	ldw	r3,128(sp)
80208b60:	dc401f17 	ldw	r17,124(sp)
80208b64:	dd800404 	addi	r22,sp,16
80208b68:	003fec06 	br	80208b1c <__reset+0xfa1e8b1c>
80208b6c:	9080100c 	andi	r2,r18,64
80208b70:	d8002785 	stb	zero,158(sp)
80208b74:	10010e26 	beq	r2,zero,80208fb0 <___vfprintf_internal_r+0x1840>
80208b78:	d9002d17 	ldw	r4,180(sp)
80208b7c:	d9402917 	ldw	r5,164(sp)
80208b80:	002d883a 	mov	r22,zero
80208b84:	20800104 	addi	r2,r4,4
80208b88:	24c0000b 	ldhu	r19,0(r4)
80208b8c:	283fc90e 	bge	r5,zero,80208ab4 <__reset+0xfa1e8ab4>
80208b90:	d8802d15 	stw	r2,180(sp)
80208b94:	0039883a 	mov	fp,zero
80208b98:	9d84b03a 	or	r2,r19,r22
80208b9c:	103c461e 	bne	r2,zero,80207cb8 <__reset+0xfa1e7cb8>
80208ba0:	00800044 	movi	r2,1
80208ba4:	003e6c06 	br	80208558 <__reset+0xfa1e8558>
80208ba8:	d9002c17 	ldw	r4,176(sp)
80208bac:	d9801e04 	addi	r6,sp,120
80208bb0:	b80b883a 	mov	r5,r23
80208bb4:	02100300 	call	80210030 <__sprint_r>
80208bb8:	103bef1e 	bne	r2,zero,80207b78 <__reset+0xfa1e7b78>
80208bbc:	d8c02017 	ldw	r3,128(sp)
80208bc0:	da000404 	addi	r8,sp,16
80208bc4:	d9003217 	ldw	r4,200(sp)
80208bc8:	d8802617 	ldw	r2,152(sp)
80208bcc:	d9403317 	ldw	r5,204(sp)
80208bd0:	8123883a 	add	r17,r16,r4
80208bd4:	11400216 	blt	r2,r5,80208be0 <___vfprintf_internal_r+0x1470>
80208bd8:	9100004c 	andi	r4,r18,1
80208bdc:	20000d26 	beq	r4,zero,80208c14 <___vfprintf_internal_r+0x14a4>
80208be0:	d9003717 	ldw	r4,220(sp)
80208be4:	d9403417 	ldw	r5,208(sp)
80208be8:	1907883a 	add	r3,r3,r4
80208bec:	d9001f17 	ldw	r4,124(sp)
80208bf0:	41400015 	stw	r5,0(r8)
80208bf4:	d9403717 	ldw	r5,220(sp)
80208bf8:	21000044 	addi	r4,r4,1
80208bfc:	d8c02015 	stw	r3,128(sp)
80208c00:	41400115 	stw	r5,4(r8)
80208c04:	d9001f15 	stw	r4,124(sp)
80208c08:	014001c4 	movi	r5,7
80208c0c:	2901e816 	blt	r5,r4,802093b0 <___vfprintf_internal_r+0x1c40>
80208c10:	42000204 	addi	r8,r8,8
80208c14:	d9003317 	ldw	r4,204(sp)
80208c18:	8121883a 	add	r16,r16,r4
80208c1c:	2085c83a 	sub	r2,r4,r2
80208c20:	8461c83a 	sub	r16,r16,r17
80208c24:	1400010e 	bge	r2,r16,80208c2c <___vfprintf_internal_r+0x14bc>
80208c28:	1021883a 	mov	r16,r2
80208c2c:	04000a0e 	bge	zero,r16,80208c58 <___vfprintf_internal_r+0x14e8>
80208c30:	d9001f17 	ldw	r4,124(sp)
80208c34:	1c07883a 	add	r3,r3,r16
80208c38:	44400015 	stw	r17,0(r8)
80208c3c:	21000044 	addi	r4,r4,1
80208c40:	44000115 	stw	r16,4(r8)
80208c44:	d8c02015 	stw	r3,128(sp)
80208c48:	d9001f15 	stw	r4,124(sp)
80208c4c:	014001c4 	movi	r5,7
80208c50:	2901fb16 	blt	r5,r4,80209440 <___vfprintf_internal_r+0x1cd0>
80208c54:	42000204 	addi	r8,r8,8
80208c58:	8001f716 	blt	r16,zero,80209438 <___vfprintf_internal_r+0x1cc8>
80208c5c:	1421c83a 	sub	r16,r2,r16
80208c60:	043d380e 	bge	zero,r16,80208144 <__reset+0xfa1e8144>
80208c64:	04400404 	movi	r17,16
80208c68:	d8801f17 	ldw	r2,124(sp)
80208c6c:	8c3efb0e 	bge	r17,r16,8020885c <__reset+0xfa1e885c>
80208c70:	016008b4 	movhi	r5,32802
80208c74:	296cd684 	addi	r5,r5,-19622
80208c78:	d9402b15 	stw	r5,172(sp)
80208c7c:	058001c4 	movi	r22,7
80208c80:	dcc02c17 	ldw	r19,176(sp)
80208c84:	00000306 	br	80208c94 <___vfprintf_internal_r+0x1524>
80208c88:	42000204 	addi	r8,r8,8
80208c8c:	843ffc04 	addi	r16,r16,-16
80208c90:	8c3ef50e 	bge	r17,r16,80208868 <__reset+0xfa1e8868>
80208c94:	18c00404 	addi	r3,r3,16
80208c98:	10800044 	addi	r2,r2,1
80208c9c:	45000015 	stw	r20,0(r8)
80208ca0:	44400115 	stw	r17,4(r8)
80208ca4:	d8c02015 	stw	r3,128(sp)
80208ca8:	d8801f15 	stw	r2,124(sp)
80208cac:	b0bff60e 	bge	r22,r2,80208c88 <__reset+0xfa1e8c88>
80208cb0:	d9801e04 	addi	r6,sp,120
80208cb4:	b80b883a 	mov	r5,r23
80208cb8:	9809883a 	mov	r4,r19
80208cbc:	02100300 	call	80210030 <__sprint_r>
80208cc0:	103bad1e 	bne	r2,zero,80207b78 <__reset+0xfa1e7b78>
80208cc4:	d8c02017 	ldw	r3,128(sp)
80208cc8:	d8801f17 	ldw	r2,124(sp)
80208ccc:	da000404 	addi	r8,sp,16
80208cd0:	003fee06 	br	80208c8c <__reset+0xfa1e8c8c>
80208cd4:	9088703a 	and	r4,r18,r2
80208cd8:	203eab1e 	bne	r4,zero,80208788 <__reset+0xfa1e8788>
80208cdc:	dc401f17 	ldw	r17,124(sp)
80208ce0:	40800115 	stw	r2,4(r8)
80208ce4:	44000015 	stw	r16,0(r8)
80208ce8:	8c400044 	addi	r17,r17,1
80208cec:	d8c02015 	stw	r3,128(sp)
80208cf0:	dc401f15 	stw	r17,124(sp)
80208cf4:	008001c4 	movi	r2,7
80208cf8:	14400e16 	blt	r2,r17,80208d34 <___vfprintf_internal_r+0x15c4>
80208cfc:	45800204 	addi	r22,r8,8
80208d00:	003eca06 	br	8020882c <__reset+0xfa1e882c>
80208d04:	012008b4 	movhi	r4,32802
80208d08:	212cd684 	addi	r4,r4,-19622
80208d0c:	d9002b15 	stw	r4,172(sp)
80208d10:	d8802b17 	ldw	r2,172(sp)
80208d14:	1c07883a 	add	r3,r3,r16
80208d18:	8c400044 	addi	r17,r17,1
80208d1c:	b0800015 	stw	r2,0(r22)
80208d20:	b4000115 	stw	r16,4(r22)
80208d24:	d8c02015 	stw	r3,128(sp)
80208d28:	dc401f15 	stw	r17,124(sp)
80208d2c:	008001c4 	movi	r2,7
80208d30:	147ebd0e 	bge	r2,r17,80208828 <__reset+0xfa1e8828>
80208d34:	d9002c17 	ldw	r4,176(sp)
80208d38:	d9801e04 	addi	r6,sp,120
80208d3c:	b80b883a 	mov	r5,r23
80208d40:	02100300 	call	80210030 <__sprint_r>
80208d44:	103b8c1e 	bne	r2,zero,80207b78 <__reset+0xfa1e7b78>
80208d48:	d8c02017 	ldw	r3,128(sp)
80208d4c:	dc401f17 	ldw	r17,124(sp)
80208d50:	dd800404 	addi	r22,sp,16
80208d54:	003eb506 	br	8020882c <__reset+0xfa1e882c>
80208d58:	d9002c17 	ldw	r4,176(sp)
80208d5c:	d9801e04 	addi	r6,sp,120
80208d60:	b80b883a 	mov	r5,r23
80208d64:	02100300 	call	80210030 <__sprint_r>
80208d68:	103b831e 	bne	r2,zero,80207b78 <__reset+0xfa1e7b78>
80208d6c:	d8c02017 	ldw	r3,128(sp)
80208d70:	dc401f17 	ldw	r17,124(sp)
80208d74:	da000404 	addi	r8,sp,16
80208d78:	003e8d06 	br	802087b0 <__reset+0xfa1e87b0>
80208d7c:	d9002c17 	ldw	r4,176(sp)
80208d80:	d9801e04 	addi	r6,sp,120
80208d84:	b80b883a 	mov	r5,r23
80208d88:	02100300 	call	80210030 <__sprint_r>
80208d8c:	103b7a1e 	bne	r2,zero,80207b78 <__reset+0xfa1e7b78>
80208d90:	d8c02017 	ldw	r3,128(sp)
80208d94:	dc401f17 	ldw	r17,124(sp)
80208d98:	dd800404 	addi	r22,sp,16
80208d9c:	003e8f06 	br	802087dc <__reset+0xfa1e87dc>
80208da0:	0027883a 	mov	r19,zero
80208da4:	003f4a06 	br	80208ad0 <__reset+0xfa1e8ad0>
80208da8:	d9002c17 	ldw	r4,176(sp)
80208dac:	d9801e04 	addi	r6,sp,120
80208db0:	b80b883a 	mov	r5,r23
80208db4:	02100300 	call	80210030 <__sprint_r>
80208db8:	103b6f1e 	bne	r2,zero,80207b78 <__reset+0xfa1e7b78>
80208dbc:	d8c02017 	ldw	r3,128(sp)
80208dc0:	da000404 	addi	r8,sp,16
80208dc4:	003c9d06 	br	8020803c <__reset+0xfa1e803c>
80208dc8:	04e7c83a 	sub	r19,zero,r19
80208dcc:	9804c03a 	cmpne	r2,r19,zero
80208dd0:	05adc83a 	sub	r22,zero,r22
80208dd4:	b0adc83a 	sub	r22,r22,r2
80208dd8:	d8802917 	ldw	r2,164(sp)
80208ddc:	07000b44 	movi	fp,45
80208de0:	df002785 	stb	fp,158(sp)
80208de4:	10017b16 	blt	r2,zero,802093d4 <___vfprintf_internal_r+0x1c64>
80208de8:	00bfdfc4 	movi	r2,-129
80208dec:	90a4703a 	and	r18,r18,r2
80208df0:	003bb106 	br	80207cb8 <__reset+0xfa1e7cb8>
80208df4:	d9003617 	ldw	r4,216(sp)
80208df8:	d9403817 	ldw	r5,224(sp)
80208dfc:	da003d15 	stw	r8,244(sp)
80208e00:	020e8480 	call	8020e848 <__fpclassifyd>
80208e04:	da003d17 	ldw	r8,244(sp)
80208e08:	1000f026 	beq	r2,zero,802091cc <___vfprintf_internal_r+0x1a5c>
80208e0c:	d9002917 	ldw	r4,164(sp)
80208e10:	05bff7c4 	movi	r22,-33
80208e14:	00bfffc4 	movi	r2,-1
80208e18:	8dac703a 	and	r22,r17,r22
80208e1c:	20820026 	beq	r4,r2,80209620 <___vfprintf_internal_r+0x1eb0>
80208e20:	008011c4 	movi	r2,71
80208e24:	b081f726 	beq	r22,r2,80209604 <___vfprintf_internal_r+0x1e94>
80208e28:	d9003817 	ldw	r4,224(sp)
80208e2c:	90c04014 	ori	r3,r18,256
80208e30:	d8c02b15 	stw	r3,172(sp)
80208e34:	20021516 	blt	r4,zero,8020968c <___vfprintf_internal_r+0x1f1c>
80208e38:	dcc03817 	ldw	r19,224(sp)
80208e3c:	d8002a05 	stb	zero,168(sp)
80208e40:	00801984 	movi	r2,102
80208e44:	8881f926 	beq	r17,r2,8020962c <___vfprintf_internal_r+0x1ebc>
80208e48:	00801184 	movi	r2,70
80208e4c:	88821c26 	beq	r17,r2,802096c0 <___vfprintf_internal_r+0x1f50>
80208e50:	00801144 	movi	r2,69
80208e54:	b081ef26 	beq	r22,r2,80209614 <___vfprintf_internal_r+0x1ea4>
80208e58:	d8c02917 	ldw	r3,164(sp)
80208e5c:	d8802104 	addi	r2,sp,132
80208e60:	d8800315 	stw	r2,12(sp)
80208e64:	d9403617 	ldw	r5,216(sp)
80208e68:	d8802504 	addi	r2,sp,148
80208e6c:	d9002c17 	ldw	r4,176(sp)
80208e70:	d8800215 	stw	r2,8(sp)
80208e74:	d8802604 	addi	r2,sp,152
80208e78:	d8c00015 	stw	r3,0(sp)
80208e7c:	d8800115 	stw	r2,4(sp)
80208e80:	01c00084 	movi	r7,2
80208e84:	980d883a 	mov	r6,r19
80208e88:	d8c03c15 	stw	r3,240(sp)
80208e8c:	da003d15 	stw	r8,244(sp)
80208e90:	0209d940 	call	80209d94 <_dtoa_r>
80208e94:	1021883a 	mov	r16,r2
80208e98:	008019c4 	movi	r2,103
80208e9c:	d8c03c17 	ldw	r3,240(sp)
80208ea0:	da003d17 	ldw	r8,244(sp)
80208ea4:	88817126 	beq	r17,r2,8020946c <___vfprintf_internal_r+0x1cfc>
80208ea8:	008011c4 	movi	r2,71
80208eac:	88829226 	beq	r17,r2,802098f8 <___vfprintf_internal_r+0x2188>
80208eb0:	80f9883a 	add	fp,r16,r3
80208eb4:	d9003617 	ldw	r4,216(sp)
80208eb8:	000d883a 	mov	r6,zero
80208ebc:	000f883a 	mov	r7,zero
80208ec0:	980b883a 	mov	r5,r19
80208ec4:	da003d15 	stw	r8,244(sp)
80208ec8:	0213ca80 	call	80213ca8 <__eqdf2>
80208ecc:	da003d17 	ldw	r8,244(sp)
80208ed0:	10018d26 	beq	r2,zero,80209508 <___vfprintf_internal_r+0x1d98>
80208ed4:	d8802117 	ldw	r2,132(sp)
80208ed8:	1700062e 	bgeu	r2,fp,80208ef4 <___vfprintf_internal_r+0x1784>
80208edc:	01000c04 	movi	r4,48
80208ee0:	10c00044 	addi	r3,r2,1
80208ee4:	d8c02115 	stw	r3,132(sp)
80208ee8:	11000005 	stb	r4,0(r2)
80208eec:	d8802117 	ldw	r2,132(sp)
80208ef0:	173ffb36 	bltu	r2,fp,80208ee0 <__reset+0xfa1e8ee0>
80208ef4:	1405c83a 	sub	r2,r2,r16
80208ef8:	d8803315 	stw	r2,204(sp)
80208efc:	008011c4 	movi	r2,71
80208f00:	b0817626 	beq	r22,r2,802094dc <___vfprintf_internal_r+0x1d6c>
80208f04:	00801944 	movi	r2,101
80208f08:	1442810e 	bge	r2,r17,80209910 <___vfprintf_internal_r+0x21a0>
80208f0c:	d8c02617 	ldw	r3,152(sp)
80208f10:	00801984 	movi	r2,102
80208f14:	d8c03215 	stw	r3,200(sp)
80208f18:	8881fe26 	beq	r17,r2,80209714 <___vfprintf_internal_r+0x1fa4>
80208f1c:	d8c03217 	ldw	r3,200(sp)
80208f20:	d9003317 	ldw	r4,204(sp)
80208f24:	1901dd16 	blt	r3,r4,8020969c <___vfprintf_internal_r+0x1f2c>
80208f28:	9480004c 	andi	r18,r18,1
80208f2c:	90022b1e 	bne	r18,zero,802097dc <___vfprintf_internal_r+0x206c>
80208f30:	1805883a 	mov	r2,r3
80208f34:	18028016 	blt	r3,zero,80209938 <___vfprintf_internal_r+0x21c8>
80208f38:	d8c03217 	ldw	r3,200(sp)
80208f3c:	044019c4 	movi	r17,103
80208f40:	d8c02e15 	stw	r3,184(sp)
80208f44:	df002a07 	ldb	fp,168(sp)
80208f48:	e001531e 	bne	fp,zero,80209498 <___vfprintf_internal_r+0x1d28>
80208f4c:	df002783 	ldbu	fp,158(sp)
80208f50:	d8802a15 	stw	r2,168(sp)
80208f54:	dc802b17 	ldw	r18,172(sp)
80208f58:	d8002915 	stw	zero,164(sp)
80208f5c:	003bd106 	br	80207ea4 <__reset+0xfa1e7ea4>
80208f60:	d8802d17 	ldw	r2,180(sp)
80208f64:	d8c02d17 	ldw	r3,180(sp)
80208f68:	d9002d17 	ldw	r4,180(sp)
80208f6c:	10800017 	ldw	r2,0(r2)
80208f70:	18c00117 	ldw	r3,4(r3)
80208f74:	21000204 	addi	r4,r4,8
80208f78:	d8803615 	stw	r2,216(sp)
80208f7c:	d8c03815 	stw	r3,224(sp)
80208f80:	d9002d15 	stw	r4,180(sp)
80208f84:	003b7506 	br	80207d5c <__reset+0xfa1e7d5c>
80208f88:	ac400007 	ldb	r17,0(r21)
80208f8c:	003a5906 	br	802078f4 <__reset+0xfa1e78f4>
80208f90:	9080100c 	andi	r2,r18,64
80208f94:	1000a826 	beq	r2,zero,80209238 <___vfprintf_internal_r+0x1ac8>
80208f98:	d9002d17 	ldw	r4,180(sp)
80208f9c:	002d883a 	mov	r22,zero
80208fa0:	24c0000b 	ldhu	r19,0(r4)
80208fa4:	21000104 	addi	r4,r4,4
80208fa8:	d9002d15 	stw	r4,180(sp)
80208fac:	003ccb06 	br	802082dc <__reset+0xfa1e82dc>
80208fb0:	d8c02d17 	ldw	r3,180(sp)
80208fb4:	d9002917 	ldw	r4,164(sp)
80208fb8:	002d883a 	mov	r22,zero
80208fbc:	18800104 	addi	r2,r3,4
80208fc0:	1cc00017 	ldw	r19,0(r3)
80208fc4:	203ebb0e 	bge	r4,zero,80208ab4 <__reset+0xfa1e8ab4>
80208fc8:	003ef106 	br	80208b90 <__reset+0xfa1e8b90>
80208fcc:	9080040c 	andi	r2,r18,16
80208fd0:	1000921e 	bne	r2,zero,8020921c <___vfprintf_internal_r+0x1aac>
80208fd4:	9480100c 	andi	r18,r18,64
80208fd8:	90013926 	beq	r18,zero,802094c0 <___vfprintf_internal_r+0x1d50>
80208fdc:	d9002d17 	ldw	r4,180(sp)
80208fe0:	d9402f17 	ldw	r5,188(sp)
80208fe4:	20800017 	ldw	r2,0(r4)
80208fe8:	21000104 	addi	r4,r4,4
80208fec:	d9002d15 	stw	r4,180(sp)
80208ff0:	1140000d 	sth	r5,0(r2)
80208ff4:	003a1606 	br	80207850 <__reset+0xfa1e7850>
80208ff8:	9080100c 	andi	r2,r18,64
80208ffc:	10008026 	beq	r2,zero,80209200 <___vfprintf_internal_r+0x1a90>
80209000:	d8c02d17 	ldw	r3,180(sp)
80209004:	1cc0000f 	ldh	r19,0(r3)
80209008:	18c00104 	addi	r3,r3,4
8020900c:	d8c02d15 	stw	r3,180(sp)
80209010:	982dd7fa 	srai	r22,r19,31
80209014:	b005883a 	mov	r2,r22
80209018:	003b1f06 	br	80207c98 <__reset+0xfa1e7c98>
8020901c:	9080100c 	andi	r2,r18,64
80209020:	d8002785 	stb	zero,158(sp)
80209024:	10008a1e 	bne	r2,zero,80209250 <___vfprintf_internal_r+0x1ae0>
80209028:	d9402d17 	ldw	r5,180(sp)
8020902c:	d8c02917 	ldw	r3,164(sp)
80209030:	002d883a 	mov	r22,zero
80209034:	28800104 	addi	r2,r5,4
80209038:	2cc00017 	ldw	r19,0(r5)
8020903c:	183e4b0e 	bge	r3,zero,8020896c <__reset+0xfa1e896c>
80209040:	9d86b03a 	or	r3,r19,r22
80209044:	d8802d15 	stw	r2,180(sp)
80209048:	183e4c1e 	bne	r3,zero,8020897c <__reset+0xfa1e897c>
8020904c:	0039883a 	mov	fp,zero
80209050:	0005883a 	mov	r2,zero
80209054:	003d4006 	br	80208558 <__reset+0xfa1e8558>
80209058:	016008b4 	movhi	r5,32802
8020905c:	296cd684 	addi	r5,r5,-19622
80209060:	d9402b15 	stw	r5,172(sp)
80209064:	d9402b17 	ldw	r5,172(sp)
80209068:	1c47883a 	add	r3,r3,r17
8020906c:	10800044 	addi	r2,r2,1
80209070:	41400015 	stw	r5,0(r8)
80209074:	44400115 	stw	r17,4(r8)
80209078:	d8c02015 	stw	r3,128(sp)
8020907c:	d8801f15 	stw	r2,124(sp)
80209080:	010001c4 	movi	r4,7
80209084:	20bec816 	blt	r4,r2,80208ba8 <__reset+0xfa1e8ba8>
80209088:	42000204 	addi	r8,r8,8
8020908c:	003ecd06 	br	80208bc4 <__reset+0xfa1e8bc4>
80209090:	d9002917 	ldw	r4,164(sp)
80209094:	d8002785 	stb	zero,158(sp)
80209098:	203d2d16 	blt	r4,zero,80208550 <__reset+0xfa1e8550>
8020909c:	00bfdfc4 	movi	r2,-129
802090a0:	90a4703a 	and	r18,r18,r2
802090a4:	003a9106 	br	80207aec <__reset+0xfa1e7aec>
802090a8:	012008b4 	movhi	r4,32802
802090ac:	212cd684 	addi	r4,r4,-19622
802090b0:	d9002b15 	stw	r4,172(sp)
802090b4:	003c0c06 	br	802080e8 <__reset+0xfa1e80e8>
802090b8:	d9002c17 	ldw	r4,176(sp)
802090bc:	d9801e04 	addi	r6,sp,120
802090c0:	b80b883a 	mov	r5,r23
802090c4:	02100300 	call	80210030 <__sprint_r>
802090c8:	103aab1e 	bne	r2,zero,80207b78 <__reset+0xfa1e7b78>
802090cc:	d8c02017 	ldw	r3,128(sp)
802090d0:	da000404 	addi	r8,sp,16
802090d4:	003d4106 	br	802085dc <__reset+0xfa1e85dc>
802090d8:	d8801f17 	ldw	r2,124(sp)
802090dc:	016008b4 	movhi	r5,32802
802090e0:	01000044 	movi	r4,1
802090e4:	18c00044 	addi	r3,r3,1
802090e8:	10800044 	addi	r2,r2,1
802090ec:	296cce04 	addi	r5,r5,-19656
802090f0:	41000115 	stw	r4,4(r8)
802090f4:	41400015 	stw	r5,0(r8)
802090f8:	d8c02015 	stw	r3,128(sp)
802090fc:	d8801f15 	stw	r2,124(sp)
80209100:	010001c4 	movi	r4,7
80209104:	20805c16 	blt	r4,r2,80209278 <___vfprintf_internal_r+0x1b08>
80209108:	42000204 	addi	r8,r8,8
8020910c:	8800041e 	bne	r17,zero,80209120 <___vfprintf_internal_r+0x19b0>
80209110:	d8803317 	ldw	r2,204(sp)
80209114:	1000021e 	bne	r2,zero,80209120 <___vfprintf_internal_r+0x19b0>
80209118:	9080004c 	andi	r2,r18,1
8020911c:	103c0926 	beq	r2,zero,80208144 <__reset+0xfa1e8144>
80209120:	d9003717 	ldw	r4,220(sp)
80209124:	d8801f17 	ldw	r2,124(sp)
80209128:	d9403417 	ldw	r5,208(sp)
8020912c:	20c7883a 	add	r3,r4,r3
80209130:	10800044 	addi	r2,r2,1
80209134:	41000115 	stw	r4,4(r8)
80209138:	41400015 	stw	r5,0(r8)
8020913c:	d8c02015 	stw	r3,128(sp)
80209140:	d8801f15 	stw	r2,124(sp)
80209144:	010001c4 	movi	r4,7
80209148:	20812116 	blt	r4,r2,802095d0 <___vfprintf_internal_r+0x1e60>
8020914c:	42000204 	addi	r8,r8,8
80209150:	0463c83a 	sub	r17,zero,r17
80209154:	0440730e 	bge	zero,r17,80209324 <___vfprintf_internal_r+0x1bb4>
80209158:	05800404 	movi	r22,16
8020915c:	b440860e 	bge	r22,r17,80209378 <___vfprintf_internal_r+0x1c08>
80209160:	016008b4 	movhi	r5,32802
80209164:	296cd684 	addi	r5,r5,-19622
80209168:	d9402b15 	stw	r5,172(sp)
8020916c:	070001c4 	movi	fp,7
80209170:	dcc02c17 	ldw	r19,176(sp)
80209174:	00000306 	br	80209184 <___vfprintf_internal_r+0x1a14>
80209178:	42000204 	addi	r8,r8,8
8020917c:	8c7ffc04 	addi	r17,r17,-16
80209180:	b440800e 	bge	r22,r17,80209384 <___vfprintf_internal_r+0x1c14>
80209184:	18c00404 	addi	r3,r3,16
80209188:	10800044 	addi	r2,r2,1
8020918c:	45000015 	stw	r20,0(r8)
80209190:	45800115 	stw	r22,4(r8)
80209194:	d8c02015 	stw	r3,128(sp)
80209198:	d8801f15 	stw	r2,124(sp)
8020919c:	e0bff60e 	bge	fp,r2,80209178 <__reset+0xfa1e9178>
802091a0:	d9801e04 	addi	r6,sp,120
802091a4:	b80b883a 	mov	r5,r23
802091a8:	9809883a 	mov	r4,r19
802091ac:	02100300 	call	80210030 <__sprint_r>
802091b0:	103a711e 	bne	r2,zero,80207b78 <__reset+0xfa1e7b78>
802091b4:	d8c02017 	ldw	r3,128(sp)
802091b8:	d8801f17 	ldw	r2,124(sp)
802091bc:	da000404 	addi	r8,sp,16
802091c0:	003fee06 	br	8020917c <__reset+0xfa1e917c>
802091c4:	00bfffc4 	movi	r2,-1
802091c8:	003a6f06 	br	80207b88 <__reset+0xfa1e7b88>
802091cc:	008011c4 	movi	r2,71
802091d0:	1440b816 	blt	r2,r17,802094b4 <___vfprintf_internal_r+0x1d44>
802091d4:	042008b4 	movhi	r16,32802
802091d8:	842cc004 	addi	r16,r16,-19712
802091dc:	00c000c4 	movi	r3,3
802091e0:	00bfdfc4 	movi	r2,-129
802091e4:	d8c02a15 	stw	r3,168(sp)
802091e8:	90a4703a 	and	r18,r18,r2
802091ec:	df002783 	ldbu	fp,158(sp)
802091f0:	d8c02e15 	stw	r3,184(sp)
802091f4:	d8002915 	stw	zero,164(sp)
802091f8:	d8003215 	stw	zero,200(sp)
802091fc:	003b2906 	br	80207ea4 <__reset+0xfa1e7ea4>
80209200:	d9002d17 	ldw	r4,180(sp)
80209204:	24c00017 	ldw	r19,0(r4)
80209208:	21000104 	addi	r4,r4,4
8020920c:	d9002d15 	stw	r4,180(sp)
80209210:	982dd7fa 	srai	r22,r19,31
80209214:	b005883a 	mov	r2,r22
80209218:	003a9f06 	br	80207c98 <__reset+0xfa1e7c98>
8020921c:	d9402d17 	ldw	r5,180(sp)
80209220:	d8c02f17 	ldw	r3,188(sp)
80209224:	28800017 	ldw	r2,0(r5)
80209228:	29400104 	addi	r5,r5,4
8020922c:	d9402d15 	stw	r5,180(sp)
80209230:	10c00015 	stw	r3,0(r2)
80209234:	00398606 	br	80207850 <__reset+0xfa1e7850>
80209238:	d9402d17 	ldw	r5,180(sp)
8020923c:	002d883a 	mov	r22,zero
80209240:	2cc00017 	ldw	r19,0(r5)
80209244:	29400104 	addi	r5,r5,4
80209248:	d9402d15 	stw	r5,180(sp)
8020924c:	003c2306 	br	802082dc <__reset+0xfa1e82dc>
80209250:	d8c02d17 	ldw	r3,180(sp)
80209254:	d9002917 	ldw	r4,164(sp)
80209258:	002d883a 	mov	r22,zero
8020925c:	18800104 	addi	r2,r3,4
80209260:	1cc0000b 	ldhu	r19,0(r3)
80209264:	203dc10e 	bge	r4,zero,8020896c <__reset+0xfa1e896c>
80209268:	003f7506 	br	80209040 <__reset+0xfa1e9040>
8020926c:	042008b4 	movhi	r16,32802
80209270:	842cbe04 	addi	r16,r16,-19720
80209274:	003acc06 	br	80207da8 <__reset+0xfa1e7da8>
80209278:	d9002c17 	ldw	r4,176(sp)
8020927c:	d9801e04 	addi	r6,sp,120
80209280:	b80b883a 	mov	r5,r23
80209284:	02100300 	call	80210030 <__sprint_r>
80209288:	103a3b1e 	bne	r2,zero,80207b78 <__reset+0xfa1e7b78>
8020928c:	dc402617 	ldw	r17,152(sp)
80209290:	d8c02017 	ldw	r3,128(sp)
80209294:	da000404 	addi	r8,sp,16
80209298:	003f9c06 	br	8020910c <__reset+0xfa1e910c>
8020929c:	ac400043 	ldbu	r17,1(r21)
802092a0:	94800814 	ori	r18,r18,32
802092a4:	ad400044 	addi	r21,r21,1
802092a8:	8c403fcc 	andi	r17,r17,255
802092ac:	8c40201c 	xori	r17,r17,128
802092b0:	8c7fe004 	addi	r17,r17,-128
802092b4:	00398f06 	br	802078f4 <__reset+0xfa1e78f4>
802092b8:	d8c02d15 	stw	r3,180(sp)
802092bc:	0039883a 	mov	fp,zero
802092c0:	003e3506 	br	80208b98 <__reset+0xfa1e8b98>
802092c4:	d9002c17 	ldw	r4,176(sp)
802092c8:	d9801e04 	addi	r6,sp,120
802092cc:	b80b883a 	mov	r5,r23
802092d0:	02100300 	call	80210030 <__sprint_r>
802092d4:	103a281e 	bne	r2,zero,80207b78 <__reset+0xfa1e7b78>
802092d8:	d8c02017 	ldw	r3,128(sp)
802092dc:	da000404 	addi	r8,sp,16
802092e0:	003cd006 	br	80208624 <__reset+0xfa1e8624>
802092e4:	8009883a 	mov	r4,r16
802092e8:	da003d15 	stw	r8,244(sp)
802092ec:	02055000 	call	80205500 <strlen>
802092f0:	d8802e15 	stw	r2,184(sp)
802092f4:	da003d17 	ldw	r8,244(sp)
802092f8:	103c340e 	bge	r2,zero,802083cc <__reset+0xfa1e83cc>
802092fc:	0005883a 	mov	r2,zero
80209300:	003c3206 	br	802083cc <__reset+0xfa1e83cc>
80209304:	d9002c17 	ldw	r4,176(sp)
80209308:	d9801e04 	addi	r6,sp,120
8020930c:	b80b883a 	mov	r5,r23
80209310:	02100300 	call	80210030 <__sprint_r>
80209314:	103a181e 	bne	r2,zero,80207b78 <__reset+0xfa1e7b78>
80209318:	d8c02017 	ldw	r3,128(sp)
8020931c:	d8801f17 	ldw	r2,124(sp)
80209320:	da000404 	addi	r8,sp,16
80209324:	d9403317 	ldw	r5,204(sp)
80209328:	10800044 	addi	r2,r2,1
8020932c:	44000015 	stw	r16,0(r8)
80209330:	28c7883a 	add	r3,r5,r3
80209334:	003b7d06 	br	8020812c <__reset+0xfa1e812c>
80209338:	012008b4 	movhi	r4,32802
8020933c:	212cda84 	addi	r4,r4,-19606
80209340:	d9003515 	stw	r4,212(sp)
80209344:	003b1406 	br	80207f98 <__reset+0xfa1e7f98>
80209348:	013fffc4 	movi	r4,-1
8020934c:	003a3506 	br	80207c24 <__reset+0xfa1e7c24>
80209350:	0023883a 	mov	r17,zero
80209354:	003d9d06 	br	802089cc <__reset+0xfa1e89cc>
80209358:	d9002c17 	ldw	r4,176(sp)
8020935c:	d9801e04 	addi	r6,sp,120
80209360:	b80b883a 	mov	r5,r23
80209364:	02100300 	call	80210030 <__sprint_r>
80209368:	103a031e 	bne	r2,zero,80207b78 <__reset+0xfa1e7b78>
8020936c:	d8c02017 	ldw	r3,128(sp)
80209370:	da000404 	addi	r8,sp,16
80209374:	003d9406 	br	802089c8 <__reset+0xfa1e89c8>
80209378:	012008b4 	movhi	r4,32802
8020937c:	212cd684 	addi	r4,r4,-19622
80209380:	d9002b15 	stw	r4,172(sp)
80209384:	d9002b17 	ldw	r4,172(sp)
80209388:	1c47883a 	add	r3,r3,r17
8020938c:	10800044 	addi	r2,r2,1
80209390:	41000015 	stw	r4,0(r8)
80209394:	44400115 	stw	r17,4(r8)
80209398:	d8c02015 	stw	r3,128(sp)
8020939c:	d8801f15 	stw	r2,124(sp)
802093a0:	010001c4 	movi	r4,7
802093a4:	20bfd716 	blt	r4,r2,80209304 <__reset+0xfa1e9304>
802093a8:	42000204 	addi	r8,r8,8
802093ac:	003fdd06 	br	80209324 <__reset+0xfa1e9324>
802093b0:	d9002c17 	ldw	r4,176(sp)
802093b4:	d9801e04 	addi	r6,sp,120
802093b8:	b80b883a 	mov	r5,r23
802093bc:	02100300 	call	80210030 <__sprint_r>
802093c0:	1039ed1e 	bne	r2,zero,80207b78 <__reset+0xfa1e7b78>
802093c4:	d8802617 	ldw	r2,152(sp)
802093c8:	d8c02017 	ldw	r3,128(sp)
802093cc:	da000404 	addi	r8,sp,16
802093d0:	003e1006 	br	80208c14 <__reset+0xfa1e8c14>
802093d4:	00800044 	movi	r2,1
802093d8:	10803fcc 	andi	r2,r2,255
802093dc:	00c00044 	movi	r3,1
802093e0:	10fa3526 	beq	r2,r3,80207cb8 <__reset+0xfa1e7cb8>
802093e4:	00c00084 	movi	r3,2
802093e8:	10fbcb26 	beq	r2,r3,80208318 <__reset+0xfa1e8318>
802093ec:	003a8f06 	br	80207e2c <__reset+0xfa1e7e2c>
802093f0:	012008b4 	movhi	r4,32802
802093f4:	212cda84 	addi	r4,r4,-19606
802093f8:	d9003515 	stw	r4,212(sp)
802093fc:	003b7606 	br	802081d8 <__reset+0xfa1e81d8>
80209400:	d8802917 	ldw	r2,164(sp)
80209404:	00c00184 	movi	r3,6
80209408:	1880012e 	bgeu	r3,r2,80209410 <___vfprintf_internal_r+0x1ca0>
8020940c:	1805883a 	mov	r2,r3
80209410:	d8802e15 	stw	r2,184(sp)
80209414:	1000ef16 	blt	r2,zero,802097d4 <___vfprintf_internal_r+0x2064>
80209418:	042008b4 	movhi	r16,32802
8020941c:	d8802a15 	stw	r2,168(sp)
80209420:	dcc02d15 	stw	r19,180(sp)
80209424:	d8002915 	stw	zero,164(sp)
80209428:	d8003215 	stw	zero,200(sp)
8020942c:	842ccc04 	addi	r16,r16,-19664
80209430:	0039883a 	mov	fp,zero
80209434:	003aa206 	br	80207ec0 <__reset+0xfa1e7ec0>
80209438:	0021883a 	mov	r16,zero
8020943c:	003e0706 	br	80208c5c <__reset+0xfa1e8c5c>
80209440:	d9002c17 	ldw	r4,176(sp)
80209444:	d9801e04 	addi	r6,sp,120
80209448:	b80b883a 	mov	r5,r23
8020944c:	02100300 	call	80210030 <__sprint_r>
80209450:	1039c91e 	bne	r2,zero,80207b78 <__reset+0xfa1e7b78>
80209454:	d8802617 	ldw	r2,152(sp)
80209458:	d9403317 	ldw	r5,204(sp)
8020945c:	d8c02017 	ldw	r3,128(sp)
80209460:	da000404 	addi	r8,sp,16
80209464:	2885c83a 	sub	r2,r5,r2
80209468:	003dfb06 	br	80208c58 <__reset+0xfa1e8c58>
8020946c:	9080004c 	andi	r2,r18,1
80209470:	103e8f1e 	bne	r2,zero,80208eb0 <__reset+0xfa1e8eb0>
80209474:	d8802117 	ldw	r2,132(sp)
80209478:	003e9e06 	br	80208ef4 <__reset+0xfa1e8ef4>
8020947c:	1025883a 	mov	r18,r2
80209480:	0039883a 	mov	fp,zero
80209484:	00800084 	movi	r2,2
80209488:	003fd306 	br	802093d8 <__reset+0xfa1e93d8>
8020948c:	07000b44 	movi	fp,45
80209490:	df002785 	stb	fp,158(sp)
80209494:	003a4006 	br	80207d98 <__reset+0xfa1e7d98>
80209498:	00c00b44 	movi	r3,45
8020949c:	d8c02785 	stb	r3,158(sp)
802094a0:	d8802a15 	stw	r2,168(sp)
802094a4:	dc802b17 	ldw	r18,172(sp)
802094a8:	d8002915 	stw	zero,164(sp)
802094ac:	07000b44 	movi	fp,45
802094b0:	003a8006 	br	80207eb4 <__reset+0xfa1e7eb4>
802094b4:	042008b4 	movhi	r16,32802
802094b8:	842cc104 	addi	r16,r16,-19708
802094bc:	003f4706 	br	802091dc <__reset+0xfa1e91dc>
802094c0:	d8c02d17 	ldw	r3,180(sp)
802094c4:	d9002f17 	ldw	r4,188(sp)
802094c8:	18800017 	ldw	r2,0(r3)
802094cc:	18c00104 	addi	r3,r3,4
802094d0:	d8c02d15 	stw	r3,180(sp)
802094d4:	11000015 	stw	r4,0(r2)
802094d8:	0038dd06 	br	80207850 <__reset+0xfa1e7850>
802094dc:	dd802617 	ldw	r22,152(sp)
802094e0:	00bfff44 	movi	r2,-3
802094e4:	b0801c16 	blt	r22,r2,80209558 <___vfprintf_internal_r+0x1de8>
802094e8:	d9402917 	ldw	r5,164(sp)
802094ec:	2d801a16 	blt	r5,r22,80209558 <___vfprintf_internal_r+0x1de8>
802094f0:	dd803215 	stw	r22,200(sp)
802094f4:	003e8906 	br	80208f1c <__reset+0xfa1e8f1c>
802094f8:	012008b4 	movhi	r4,32802
802094fc:	212cd684 	addi	r4,r4,-19622
80209500:	d9002b15 	stw	r4,172(sp)
80209504:	003c9106 	br	8020874c <__reset+0xfa1e874c>
80209508:	e005883a 	mov	r2,fp
8020950c:	003e7906 	br	80208ef4 <__reset+0xfa1e8ef4>
80209510:	d9402917 	ldw	r5,164(sp)
80209514:	df002783 	ldbu	fp,158(sp)
80209518:	dcc02d15 	stw	r19,180(sp)
8020951c:	d9402a15 	stw	r5,168(sp)
80209520:	d9402e15 	stw	r5,184(sp)
80209524:	d8002915 	stw	zero,164(sp)
80209528:	d8003215 	stw	zero,200(sp)
8020952c:	003a5d06 	br	80207ea4 <__reset+0xfa1e7ea4>
80209530:	9080004c 	andi	r2,r18,1
80209534:	0039883a 	mov	fp,zero
80209538:	10000426 	beq	r2,zero,8020954c <___vfprintf_internal_r+0x1ddc>
8020953c:	00800c04 	movi	r2,48
80209540:	dc001dc4 	addi	r16,sp,119
80209544:	d8801dc5 	stb	r2,119(sp)
80209548:	003b8006 	br	8020834c <__reset+0xfa1e834c>
8020954c:	d8002e15 	stw	zero,184(sp)
80209550:	dc001e04 	addi	r16,sp,120
80209554:	003a4d06 	br	80207e8c <__reset+0xfa1e7e8c>
80209558:	8c7fff84 	addi	r17,r17,-2
8020955c:	b5bfffc4 	addi	r22,r22,-1
80209560:	dd802615 	stw	r22,152(sp)
80209564:	dc4022c5 	stb	r17,139(sp)
80209568:	b000bf16 	blt	r22,zero,80209868 <___vfprintf_internal_r+0x20f8>
8020956c:	00800ac4 	movi	r2,43
80209570:	d8802305 	stb	r2,140(sp)
80209574:	00800244 	movi	r2,9
80209578:	15807016 	blt	r2,r22,8020973c <___vfprintf_internal_r+0x1fcc>
8020957c:	00800c04 	movi	r2,48
80209580:	b5800c04 	addi	r22,r22,48
80209584:	d8802345 	stb	r2,141(sp)
80209588:	dd802385 	stb	r22,142(sp)
8020958c:	d88023c4 	addi	r2,sp,143
80209590:	df0022c4 	addi	fp,sp,139
80209594:	d8c03317 	ldw	r3,204(sp)
80209598:	1739c83a 	sub	fp,r2,fp
8020959c:	d9003317 	ldw	r4,204(sp)
802095a0:	e0c7883a 	add	r3,fp,r3
802095a4:	df003a15 	stw	fp,232(sp)
802095a8:	d8c02e15 	stw	r3,184(sp)
802095ac:	00800044 	movi	r2,1
802095b0:	1100b30e 	bge	r2,r4,80209880 <___vfprintf_internal_r+0x2110>
802095b4:	d8c02e17 	ldw	r3,184(sp)
802095b8:	18c00044 	addi	r3,r3,1
802095bc:	d8c02e15 	stw	r3,184(sp)
802095c0:	1805883a 	mov	r2,r3
802095c4:	1800ac16 	blt	r3,zero,80209878 <___vfprintf_internal_r+0x2108>
802095c8:	d8003215 	stw	zero,200(sp)
802095cc:	003e5d06 	br	80208f44 <__reset+0xfa1e8f44>
802095d0:	d9002c17 	ldw	r4,176(sp)
802095d4:	d9801e04 	addi	r6,sp,120
802095d8:	b80b883a 	mov	r5,r23
802095dc:	02100300 	call	80210030 <__sprint_r>
802095e0:	1039651e 	bne	r2,zero,80207b78 <__reset+0xfa1e7b78>
802095e4:	dc402617 	ldw	r17,152(sp)
802095e8:	d8c02017 	ldw	r3,128(sp)
802095ec:	d8801f17 	ldw	r2,124(sp)
802095f0:	da000404 	addi	r8,sp,16
802095f4:	003ed606 	br	80209150 <__reset+0xfa1e9150>
802095f8:	582b883a 	mov	r21,r11
802095fc:	d8002915 	stw	zero,164(sp)
80209600:	0038bd06 	br	802078f8 <__reset+0xfa1e78f8>
80209604:	d8802917 	ldw	r2,164(sp)
80209608:	103e071e 	bne	r2,zero,80208e28 <__reset+0xfa1e8e28>
8020960c:	dc002915 	stw	r16,164(sp)
80209610:	003e0506 	br	80208e28 <__reset+0xfa1e8e28>
80209614:	d9002917 	ldw	r4,164(sp)
80209618:	20c00044 	addi	r3,r4,1
8020961c:	003e0f06 	br	80208e5c <__reset+0xfa1e8e5c>
80209620:	01400184 	movi	r5,6
80209624:	d9402915 	stw	r5,164(sp)
80209628:	003dff06 	br	80208e28 <__reset+0xfa1e8e28>
8020962c:	d8802104 	addi	r2,sp,132
80209630:	d8800315 	stw	r2,12(sp)
80209634:	d8802504 	addi	r2,sp,148
80209638:	d8800215 	stw	r2,8(sp)
8020963c:	d8802604 	addi	r2,sp,152
80209640:	d8800115 	stw	r2,4(sp)
80209644:	d8802917 	ldw	r2,164(sp)
80209648:	d9403617 	ldw	r5,216(sp)
8020964c:	d9002c17 	ldw	r4,176(sp)
80209650:	d8800015 	stw	r2,0(sp)
80209654:	01c000c4 	movi	r7,3
80209658:	980d883a 	mov	r6,r19
8020965c:	da003d15 	stw	r8,244(sp)
80209660:	0209d940 	call	80209d94 <_dtoa_r>
80209664:	d8c02917 	ldw	r3,164(sp)
80209668:	da003d17 	ldw	r8,244(sp)
8020966c:	1021883a 	mov	r16,r2
80209670:	10f9883a 	add	fp,r2,r3
80209674:	81000007 	ldb	r4,0(r16)
80209678:	00800c04 	movi	r2,48
8020967c:	20805e26 	beq	r4,r2,802097f8 <___vfprintf_internal_r+0x2088>
80209680:	d8c02617 	ldw	r3,152(sp)
80209684:	e0f9883a 	add	fp,fp,r3
80209688:	003e0a06 	br	80208eb4 <__reset+0xfa1e8eb4>
8020968c:	00c00b44 	movi	r3,45
80209690:	24e0003c 	xorhi	r19,r4,32768
80209694:	d8c02a05 	stb	r3,168(sp)
80209698:	003de906 	br	80208e40 <__reset+0xfa1e8e40>
8020969c:	d8c03217 	ldw	r3,200(sp)
802096a0:	00c07a0e 	bge	zero,r3,8020988c <___vfprintf_internal_r+0x211c>
802096a4:	00800044 	movi	r2,1
802096a8:	d9003317 	ldw	r4,204(sp)
802096ac:	1105883a 	add	r2,r2,r4
802096b0:	d8802e15 	stw	r2,184(sp)
802096b4:	10004e16 	blt	r2,zero,802097f0 <___vfprintf_internal_r+0x2080>
802096b8:	044019c4 	movi	r17,103
802096bc:	003e2106 	br	80208f44 <__reset+0xfa1e8f44>
802096c0:	d9002917 	ldw	r4,164(sp)
802096c4:	d8802104 	addi	r2,sp,132
802096c8:	d8800315 	stw	r2,12(sp)
802096cc:	d9000015 	stw	r4,0(sp)
802096d0:	d8802504 	addi	r2,sp,148
802096d4:	d9403617 	ldw	r5,216(sp)
802096d8:	d9002c17 	ldw	r4,176(sp)
802096dc:	d8800215 	stw	r2,8(sp)
802096e0:	d8802604 	addi	r2,sp,152
802096e4:	d8800115 	stw	r2,4(sp)
802096e8:	01c000c4 	movi	r7,3
802096ec:	980d883a 	mov	r6,r19
802096f0:	da003d15 	stw	r8,244(sp)
802096f4:	0209d940 	call	80209d94 <_dtoa_r>
802096f8:	d8c02917 	ldw	r3,164(sp)
802096fc:	da003d17 	ldw	r8,244(sp)
80209700:	1021883a 	mov	r16,r2
80209704:	00801184 	movi	r2,70
80209708:	80f9883a 	add	fp,r16,r3
8020970c:	88bfd926 	beq	r17,r2,80209674 <__reset+0xfa1e9674>
80209710:	003de806 	br	80208eb4 <__reset+0xfa1e8eb4>
80209714:	d9002917 	ldw	r4,164(sp)
80209718:	00c04d0e 	bge	zero,r3,80209850 <___vfprintf_internal_r+0x20e0>
8020971c:	2000441e 	bne	r4,zero,80209830 <___vfprintf_internal_r+0x20c0>
80209720:	9480004c 	andi	r18,r18,1
80209724:	9000421e 	bne	r18,zero,80209830 <___vfprintf_internal_r+0x20c0>
80209728:	1805883a 	mov	r2,r3
8020972c:	18007016 	blt	r3,zero,802098f0 <___vfprintf_internal_r+0x2180>
80209730:	d8c03217 	ldw	r3,200(sp)
80209734:	d8c02e15 	stw	r3,184(sp)
80209738:	003e0206 	br	80208f44 <__reset+0xfa1e8f44>
8020973c:	df0022c4 	addi	fp,sp,139
80209740:	dc002915 	stw	r16,164(sp)
80209744:	4027883a 	mov	r19,r8
80209748:	e021883a 	mov	r16,fp
8020974c:	b009883a 	mov	r4,r22
80209750:	01400284 	movi	r5,10
80209754:	02129e40 	call	802129e4 <__modsi3>
80209758:	10800c04 	addi	r2,r2,48
8020975c:	843fffc4 	addi	r16,r16,-1
80209760:	b009883a 	mov	r4,r22
80209764:	01400284 	movi	r5,10
80209768:	80800005 	stb	r2,0(r16)
8020976c:	02129600 	call	80212960 <__divsi3>
80209770:	102d883a 	mov	r22,r2
80209774:	00800244 	movi	r2,9
80209778:	15bff416 	blt	r2,r22,8020974c <__reset+0xfa1e974c>
8020977c:	9811883a 	mov	r8,r19
80209780:	b0800c04 	addi	r2,r22,48
80209784:	8027883a 	mov	r19,r16
80209788:	997fffc4 	addi	r5,r19,-1
8020978c:	98bfffc5 	stb	r2,-1(r19)
80209790:	dc002917 	ldw	r16,164(sp)
80209794:	2f006a2e 	bgeu	r5,fp,80209940 <___vfprintf_internal_r+0x21d0>
80209798:	d9c02384 	addi	r7,sp,142
8020979c:	3ccfc83a 	sub	r7,r7,r19
802097a0:	d9002344 	addi	r4,sp,141
802097a4:	e1cf883a 	add	r7,fp,r7
802097a8:	00000106 	br	802097b0 <___vfprintf_internal_r+0x2040>
802097ac:	28800003 	ldbu	r2,0(r5)
802097b0:	20800005 	stb	r2,0(r4)
802097b4:	21000044 	addi	r4,r4,1
802097b8:	29400044 	addi	r5,r5,1
802097bc:	393ffb1e 	bne	r7,r4,802097ac <__reset+0xfa1e97ac>
802097c0:	d8802304 	addi	r2,sp,140
802097c4:	14c5c83a 	sub	r2,r2,r19
802097c8:	d8c02344 	addi	r3,sp,141
802097cc:	1885883a 	add	r2,r3,r2
802097d0:	003f7006 	br	80209594 <__reset+0xfa1e9594>
802097d4:	0005883a 	mov	r2,zero
802097d8:	003f0f06 	br	80209418 <__reset+0xfa1e9418>
802097dc:	d8c03217 	ldw	r3,200(sp)
802097e0:	18c00044 	addi	r3,r3,1
802097e4:	d8c02e15 	stw	r3,184(sp)
802097e8:	1805883a 	mov	r2,r3
802097ec:	183fb20e 	bge	r3,zero,802096b8 <__reset+0xfa1e96b8>
802097f0:	0005883a 	mov	r2,zero
802097f4:	003fb006 	br	802096b8 <__reset+0xfa1e96b8>
802097f8:	d9003617 	ldw	r4,216(sp)
802097fc:	000d883a 	mov	r6,zero
80209800:	000f883a 	mov	r7,zero
80209804:	980b883a 	mov	r5,r19
80209808:	d8c03c15 	stw	r3,240(sp)
8020980c:	da003d15 	stw	r8,244(sp)
80209810:	0213ca80 	call	80213ca8 <__eqdf2>
80209814:	d8c03c17 	ldw	r3,240(sp)
80209818:	da003d17 	ldw	r8,244(sp)
8020981c:	103f9826 	beq	r2,zero,80209680 <__reset+0xfa1e9680>
80209820:	00800044 	movi	r2,1
80209824:	10c7c83a 	sub	r3,r2,r3
80209828:	d8c02615 	stw	r3,152(sp)
8020982c:	003f9506 	br	80209684 <__reset+0xfa1e9684>
80209830:	d9002917 	ldw	r4,164(sp)
80209834:	d8c03217 	ldw	r3,200(sp)
80209838:	20800044 	addi	r2,r4,1
8020983c:	1885883a 	add	r2,r3,r2
80209840:	d8802e15 	stw	r2,184(sp)
80209844:	103dbf0e 	bge	r2,zero,80208f44 <__reset+0xfa1e8f44>
80209848:	0005883a 	mov	r2,zero
8020984c:	003dbd06 	br	80208f44 <__reset+0xfa1e8f44>
80209850:	2000211e 	bne	r4,zero,802098d8 <___vfprintf_internal_r+0x2168>
80209854:	9480004c 	andi	r18,r18,1
80209858:	90001f1e 	bne	r18,zero,802098d8 <___vfprintf_internal_r+0x2168>
8020985c:	00800044 	movi	r2,1
80209860:	d8802e15 	stw	r2,184(sp)
80209864:	003db706 	br	80208f44 <__reset+0xfa1e8f44>
80209868:	00800b44 	movi	r2,45
8020986c:	05adc83a 	sub	r22,zero,r22
80209870:	d8802305 	stb	r2,140(sp)
80209874:	003f3f06 	br	80209574 <__reset+0xfa1e9574>
80209878:	0005883a 	mov	r2,zero
8020987c:	003f5206 	br	802095c8 <__reset+0xfa1e95c8>
80209880:	90a4703a 	and	r18,r18,r2
80209884:	903f4e26 	beq	r18,zero,802095c0 <__reset+0xfa1e95c0>
80209888:	003f4a06 	br	802095b4 <__reset+0xfa1e95b4>
8020988c:	00800084 	movi	r2,2
80209890:	10c5c83a 	sub	r2,r2,r3
80209894:	003f8406 	br	802096a8 <__reset+0xfa1e96a8>
80209898:	d8802d17 	ldw	r2,180(sp)
8020989c:	d9002d17 	ldw	r4,180(sp)
802098a0:	ac400043 	ldbu	r17,1(r21)
802098a4:	10800017 	ldw	r2,0(r2)
802098a8:	582b883a 	mov	r21,r11
802098ac:	d8802915 	stw	r2,164(sp)
802098b0:	20800104 	addi	r2,r4,4
802098b4:	d9002917 	ldw	r4,164(sp)
802098b8:	d8802d15 	stw	r2,180(sp)
802098bc:	203e7a0e 	bge	r4,zero,802092a8 <__reset+0xfa1e92a8>
802098c0:	8c403fcc 	andi	r17,r17,255
802098c4:	00bfffc4 	movi	r2,-1
802098c8:	8c40201c 	xori	r17,r17,128
802098cc:	d8802915 	stw	r2,164(sp)
802098d0:	8c7fe004 	addi	r17,r17,-128
802098d4:	00380706 	br	802078f4 <__reset+0xfa1e78f4>
802098d8:	d8c02917 	ldw	r3,164(sp)
802098dc:	18c00084 	addi	r3,r3,2
802098e0:	d8c02e15 	stw	r3,184(sp)
802098e4:	1805883a 	mov	r2,r3
802098e8:	183d960e 	bge	r3,zero,80208f44 <__reset+0xfa1e8f44>
802098ec:	003fd606 	br	80209848 <__reset+0xfa1e9848>
802098f0:	0005883a 	mov	r2,zero
802098f4:	003f8e06 	br	80209730 <__reset+0xfa1e9730>
802098f8:	9080004c 	andi	r2,r18,1
802098fc:	103f811e 	bne	r2,zero,80209704 <__reset+0xfa1e9704>
80209900:	d8802117 	ldw	r2,132(sp)
80209904:	1405c83a 	sub	r2,r2,r16
80209908:	d8803315 	stw	r2,204(sp)
8020990c:	b47ef326 	beq	r22,r17,802094dc <__reset+0xfa1e94dc>
80209910:	dd802617 	ldw	r22,152(sp)
80209914:	003f1106 	br	8020955c <__reset+0xfa1e955c>
80209918:	d9c02785 	stb	r7,158(sp)
8020991c:	00390406 	br	80207d30 <__reset+0xfa1e7d30>
80209920:	d9c02785 	stb	r7,158(sp)
80209924:	0038d306 	br	80207c74 <__reset+0xfa1e7c74>
80209928:	d9c02785 	stb	r7,158(sp)
8020992c:	003a6106 	br	802082b4 <__reset+0xfa1e82b4>
80209930:	d9c02785 	stb	r7,158(sp)
80209934:	003af806 	br	80208518 <__reset+0xfa1e8518>
80209938:	0005883a 	mov	r2,zero
8020993c:	003d7e06 	br	80208f38 <__reset+0xfa1e8f38>
80209940:	d8802344 	addi	r2,sp,141
80209944:	003f1306 	br	80209594 <__reset+0xfa1e9594>
80209948:	d9c02785 	stb	r7,158(sp)
8020994c:	00392306 	br	80207ddc <__reset+0xfa1e7ddc>
80209950:	d9c02785 	stb	r7,158(sp)
80209954:	003aa906 	br	802083fc <__reset+0xfa1e83fc>
80209958:	d9c02785 	stb	r7,158(sp)
8020995c:	003a3d06 	br	80208254 <__reset+0xfa1e8254>
80209960:	d9c02785 	stb	r7,158(sp)
80209964:	003aca06 	br	80208490 <__reset+0xfa1e8490>

80209968 <__vfprintf_internal>:
80209968:	00a008b4 	movhi	r2,32802
8020996c:	10b50504 	addi	r2,r2,-11244
80209970:	300f883a 	mov	r7,r6
80209974:	280d883a 	mov	r6,r5
80209978:	200b883a 	mov	r5,r4
8020997c:	11000017 	ldw	r4,0(r2)
80209980:	02077701 	jmpi	80207770 <___vfprintf_internal_r>

80209984 <__sbprintf>:
80209984:	2880030b 	ldhu	r2,12(r5)
80209988:	2ac01917 	ldw	r11,100(r5)
8020998c:	2a80038b 	ldhu	r10,14(r5)
80209990:	2a400717 	ldw	r9,28(r5)
80209994:	2a000917 	ldw	r8,36(r5)
80209998:	defee204 	addi	sp,sp,-1144
8020999c:	00c10004 	movi	r3,1024
802099a0:	dc011a15 	stw	r16,1128(sp)
802099a4:	10bfff4c 	andi	r2,r2,65533
802099a8:	2821883a 	mov	r16,r5
802099ac:	d8cb883a 	add	r5,sp,r3
802099b0:	dc811c15 	stw	r18,1136(sp)
802099b4:	dc411b15 	stw	r17,1132(sp)
802099b8:	dfc11d15 	stw	ra,1140(sp)
802099bc:	2025883a 	mov	r18,r4
802099c0:	d881030d 	sth	r2,1036(sp)
802099c4:	dac11915 	stw	r11,1124(sp)
802099c8:	da81038d 	sth	r10,1038(sp)
802099cc:	da410715 	stw	r9,1052(sp)
802099d0:	da010915 	stw	r8,1060(sp)
802099d4:	dec10015 	stw	sp,1024(sp)
802099d8:	dec10415 	stw	sp,1040(sp)
802099dc:	d8c10215 	stw	r3,1032(sp)
802099e0:	d8c10515 	stw	r3,1044(sp)
802099e4:	d8010615 	stw	zero,1048(sp)
802099e8:	02077700 	call	80207770 <___vfprintf_internal_r>
802099ec:	1023883a 	mov	r17,r2
802099f0:	10000416 	blt	r2,zero,80209a04 <__sbprintf+0x80>
802099f4:	d9410004 	addi	r5,sp,1024
802099f8:	9009883a 	mov	r4,r18
802099fc:	020b6380 	call	8020b638 <_fflush_r>
80209a00:	10000d1e 	bne	r2,zero,80209a38 <__sbprintf+0xb4>
80209a04:	d881030b 	ldhu	r2,1036(sp)
80209a08:	1080100c 	andi	r2,r2,64
80209a0c:	10000326 	beq	r2,zero,80209a1c <__sbprintf+0x98>
80209a10:	8080030b 	ldhu	r2,12(r16)
80209a14:	10801014 	ori	r2,r2,64
80209a18:	8080030d 	sth	r2,12(r16)
80209a1c:	8805883a 	mov	r2,r17
80209a20:	dfc11d17 	ldw	ra,1140(sp)
80209a24:	dc811c17 	ldw	r18,1136(sp)
80209a28:	dc411b17 	ldw	r17,1132(sp)
80209a2c:	dc011a17 	ldw	r16,1128(sp)
80209a30:	dec11e04 	addi	sp,sp,1144
80209a34:	f800283a 	ret
80209a38:	047fffc4 	movi	r17,-1
80209a3c:	003ff106 	br	80209a04 <__reset+0xfa1e9a04>

80209a40 <__swsetup_r>:
80209a40:	00a008b4 	movhi	r2,32802
80209a44:	defffd04 	addi	sp,sp,-12
80209a48:	10b50504 	addi	r2,r2,-11244
80209a4c:	dc400115 	stw	r17,4(sp)
80209a50:	2023883a 	mov	r17,r4
80209a54:	11000017 	ldw	r4,0(r2)
80209a58:	dc000015 	stw	r16,0(sp)
80209a5c:	dfc00215 	stw	ra,8(sp)
80209a60:	2821883a 	mov	r16,r5
80209a64:	20000226 	beq	r4,zero,80209a70 <__swsetup_r+0x30>
80209a68:	20800e17 	ldw	r2,56(r4)
80209a6c:	10003126 	beq	r2,zero,80209b34 <__swsetup_r+0xf4>
80209a70:	8080030b 	ldhu	r2,12(r16)
80209a74:	10c0020c 	andi	r3,r2,8
80209a78:	1009883a 	mov	r4,r2
80209a7c:	18000f26 	beq	r3,zero,80209abc <__swsetup_r+0x7c>
80209a80:	80c00417 	ldw	r3,16(r16)
80209a84:	18001526 	beq	r3,zero,80209adc <__swsetup_r+0x9c>
80209a88:	1100004c 	andi	r4,r2,1
80209a8c:	20001c1e 	bne	r4,zero,80209b00 <__swsetup_r+0xc0>
80209a90:	1080008c 	andi	r2,r2,2
80209a94:	1000291e 	bne	r2,zero,80209b3c <__swsetup_r+0xfc>
80209a98:	80800517 	ldw	r2,20(r16)
80209a9c:	80800215 	stw	r2,8(r16)
80209aa0:	18001c26 	beq	r3,zero,80209b14 <__swsetup_r+0xd4>
80209aa4:	0005883a 	mov	r2,zero
80209aa8:	dfc00217 	ldw	ra,8(sp)
80209aac:	dc400117 	ldw	r17,4(sp)
80209ab0:	dc000017 	ldw	r16,0(sp)
80209ab4:	dec00304 	addi	sp,sp,12
80209ab8:	f800283a 	ret
80209abc:	2080040c 	andi	r2,r4,16
80209ac0:	10002e26 	beq	r2,zero,80209b7c <__swsetup_r+0x13c>
80209ac4:	2080010c 	andi	r2,r4,4
80209ac8:	10001e1e 	bne	r2,zero,80209b44 <__swsetup_r+0x104>
80209acc:	80c00417 	ldw	r3,16(r16)
80209ad0:	20800214 	ori	r2,r4,8
80209ad4:	8080030d 	sth	r2,12(r16)
80209ad8:	183feb1e 	bne	r3,zero,80209a88 <__reset+0xfa1e9a88>
80209adc:	1100a00c 	andi	r4,r2,640
80209ae0:	01408004 	movi	r5,512
80209ae4:	217fe826 	beq	r4,r5,80209a88 <__reset+0xfa1e9a88>
80209ae8:	800b883a 	mov	r5,r16
80209aec:	8809883a 	mov	r4,r17
80209af0:	020c5b80 	call	8020c5b8 <__smakebuf_r>
80209af4:	8080030b 	ldhu	r2,12(r16)
80209af8:	80c00417 	ldw	r3,16(r16)
80209afc:	003fe206 	br	80209a88 <__reset+0xfa1e9a88>
80209b00:	80800517 	ldw	r2,20(r16)
80209b04:	80000215 	stw	zero,8(r16)
80209b08:	0085c83a 	sub	r2,zero,r2
80209b0c:	80800615 	stw	r2,24(r16)
80209b10:	183fe41e 	bne	r3,zero,80209aa4 <__reset+0xfa1e9aa4>
80209b14:	80c0030b 	ldhu	r3,12(r16)
80209b18:	0005883a 	mov	r2,zero
80209b1c:	1900200c 	andi	r4,r3,128
80209b20:	203fe126 	beq	r4,zero,80209aa8 <__reset+0xfa1e9aa8>
80209b24:	18c01014 	ori	r3,r3,64
80209b28:	80c0030d 	sth	r3,12(r16)
80209b2c:	00bfffc4 	movi	r2,-1
80209b30:	003fdd06 	br	80209aa8 <__reset+0xfa1e9aa8>
80209b34:	020ba140 	call	8020ba14 <__sinit>
80209b38:	003fcd06 	br	80209a70 <__reset+0xfa1e9a70>
80209b3c:	0005883a 	mov	r2,zero
80209b40:	003fd606 	br	80209a9c <__reset+0xfa1e9a9c>
80209b44:	81400c17 	ldw	r5,48(r16)
80209b48:	28000626 	beq	r5,zero,80209b64 <__swsetup_r+0x124>
80209b4c:	80801004 	addi	r2,r16,64
80209b50:	28800326 	beq	r5,r2,80209b60 <__swsetup_r+0x120>
80209b54:	8809883a 	mov	r4,r17
80209b58:	020bb880 	call	8020bb88 <_free_r>
80209b5c:	8100030b 	ldhu	r4,12(r16)
80209b60:	80000c15 	stw	zero,48(r16)
80209b64:	80c00417 	ldw	r3,16(r16)
80209b68:	00bff6c4 	movi	r2,-37
80209b6c:	1108703a 	and	r4,r2,r4
80209b70:	80000115 	stw	zero,4(r16)
80209b74:	80c00015 	stw	r3,0(r16)
80209b78:	003fd506 	br	80209ad0 <__reset+0xfa1e9ad0>
80209b7c:	00800244 	movi	r2,9
80209b80:	88800015 	stw	r2,0(r17)
80209b84:	20801014 	ori	r2,r4,64
80209b88:	8080030d 	sth	r2,12(r16)
80209b8c:	00bfffc4 	movi	r2,-1
80209b90:	003fc506 	br	80209aa8 <__reset+0xfa1e9aa8>

80209b94 <quorem>:
80209b94:	defff704 	addi	sp,sp,-36
80209b98:	dc800215 	stw	r18,8(sp)
80209b9c:	20800417 	ldw	r2,16(r4)
80209ba0:	2c800417 	ldw	r18,16(r5)
80209ba4:	dfc00815 	stw	ra,32(sp)
80209ba8:	ddc00715 	stw	r23,28(sp)
80209bac:	dd800615 	stw	r22,24(sp)
80209bb0:	dd400515 	stw	r21,20(sp)
80209bb4:	dd000415 	stw	r20,16(sp)
80209bb8:	dcc00315 	stw	r19,12(sp)
80209bbc:	dc400115 	stw	r17,4(sp)
80209bc0:	dc000015 	stw	r16,0(sp)
80209bc4:	14807116 	blt	r2,r18,80209d8c <quorem+0x1f8>
80209bc8:	94bfffc4 	addi	r18,r18,-1
80209bcc:	94ad883a 	add	r22,r18,r18
80209bd0:	b5ad883a 	add	r22,r22,r22
80209bd4:	2c400504 	addi	r17,r5,20
80209bd8:	8da9883a 	add	r20,r17,r22
80209bdc:	25400504 	addi	r21,r4,20
80209be0:	282f883a 	mov	r23,r5
80209be4:	adad883a 	add	r22,r21,r22
80209be8:	a1400017 	ldw	r5,0(r20)
80209bec:	2021883a 	mov	r16,r4
80209bf0:	b1000017 	ldw	r4,0(r22)
80209bf4:	29400044 	addi	r5,r5,1
80209bf8:	0212a580 	call	80212a58 <__udivsi3>
80209bfc:	1027883a 	mov	r19,r2
80209c00:	10002c26 	beq	r2,zero,80209cb4 <quorem+0x120>
80209c04:	a813883a 	mov	r9,r21
80209c08:	880b883a 	mov	r5,r17
80209c0c:	0009883a 	mov	r4,zero
80209c10:	000d883a 	mov	r6,zero
80209c14:	2a000017 	ldw	r8,0(r5)
80209c18:	49c00017 	ldw	r7,0(r9)
80209c1c:	29400104 	addi	r5,r5,4
80209c20:	40bfffcc 	andi	r2,r8,65535
80209c24:	14c5383a 	mul	r2,r2,r19
80209c28:	4010d43a 	srli	r8,r8,16
80209c2c:	38ffffcc 	andi	r3,r7,65535
80209c30:	1105883a 	add	r2,r2,r4
80209c34:	1008d43a 	srli	r4,r2,16
80209c38:	44d1383a 	mul	r8,r8,r19
80209c3c:	198d883a 	add	r6,r3,r6
80209c40:	10ffffcc 	andi	r3,r2,65535
80209c44:	30c7c83a 	sub	r3,r6,r3
80209c48:	380ed43a 	srli	r7,r7,16
80209c4c:	4105883a 	add	r2,r8,r4
80209c50:	180dd43a 	srai	r6,r3,16
80209c54:	113fffcc 	andi	r4,r2,65535
80209c58:	390fc83a 	sub	r7,r7,r4
80209c5c:	398d883a 	add	r6,r7,r6
80209c60:	300e943a 	slli	r7,r6,16
80209c64:	18ffffcc 	andi	r3,r3,65535
80209c68:	1008d43a 	srli	r4,r2,16
80209c6c:	38ceb03a 	or	r7,r7,r3
80209c70:	49c00015 	stw	r7,0(r9)
80209c74:	300dd43a 	srai	r6,r6,16
80209c78:	4a400104 	addi	r9,r9,4
80209c7c:	a17fe52e 	bgeu	r20,r5,80209c14 <__reset+0xfa1e9c14>
80209c80:	b0800017 	ldw	r2,0(r22)
80209c84:	10000b1e 	bne	r2,zero,80209cb4 <quorem+0x120>
80209c88:	b0bfff04 	addi	r2,r22,-4
80209c8c:	a880082e 	bgeu	r21,r2,80209cb0 <quorem+0x11c>
80209c90:	b0ffff17 	ldw	r3,-4(r22)
80209c94:	18000326 	beq	r3,zero,80209ca4 <quorem+0x110>
80209c98:	00000506 	br	80209cb0 <quorem+0x11c>
80209c9c:	10c00017 	ldw	r3,0(r2)
80209ca0:	1800031e 	bne	r3,zero,80209cb0 <quorem+0x11c>
80209ca4:	10bfff04 	addi	r2,r2,-4
80209ca8:	94bfffc4 	addi	r18,r18,-1
80209cac:	a8bffb36 	bltu	r21,r2,80209c9c <__reset+0xfa1e9c9c>
80209cb0:	84800415 	stw	r18,16(r16)
80209cb4:	b80b883a 	mov	r5,r23
80209cb8:	8009883a 	mov	r4,r16
80209cbc:	020dbb00 	call	8020dbb0 <__mcmp>
80209cc0:	10002616 	blt	r2,zero,80209d5c <quorem+0x1c8>
80209cc4:	9cc00044 	addi	r19,r19,1
80209cc8:	a805883a 	mov	r2,r21
80209ccc:	000b883a 	mov	r5,zero
80209cd0:	11000017 	ldw	r4,0(r2)
80209cd4:	89800017 	ldw	r6,0(r17)
80209cd8:	10800104 	addi	r2,r2,4
80209cdc:	20ffffcc 	andi	r3,r4,65535
80209ce0:	194b883a 	add	r5,r3,r5
80209ce4:	30ffffcc 	andi	r3,r6,65535
80209ce8:	28c7c83a 	sub	r3,r5,r3
80209cec:	300cd43a 	srli	r6,r6,16
80209cf0:	2008d43a 	srli	r4,r4,16
80209cf4:	180bd43a 	srai	r5,r3,16
80209cf8:	18ffffcc 	andi	r3,r3,65535
80209cfc:	2189c83a 	sub	r4,r4,r6
80209d00:	2149883a 	add	r4,r4,r5
80209d04:	200c943a 	slli	r6,r4,16
80209d08:	8c400104 	addi	r17,r17,4
80209d0c:	200bd43a 	srai	r5,r4,16
80209d10:	30c6b03a 	or	r3,r6,r3
80209d14:	10ffff15 	stw	r3,-4(r2)
80209d18:	a47fed2e 	bgeu	r20,r17,80209cd0 <__reset+0xfa1e9cd0>
80209d1c:	9485883a 	add	r2,r18,r18
80209d20:	1085883a 	add	r2,r2,r2
80209d24:	a887883a 	add	r3,r21,r2
80209d28:	18800017 	ldw	r2,0(r3)
80209d2c:	10000b1e 	bne	r2,zero,80209d5c <quorem+0x1c8>
80209d30:	18bfff04 	addi	r2,r3,-4
80209d34:	a880082e 	bgeu	r21,r2,80209d58 <quorem+0x1c4>
80209d38:	18ffff17 	ldw	r3,-4(r3)
80209d3c:	18000326 	beq	r3,zero,80209d4c <quorem+0x1b8>
80209d40:	00000506 	br	80209d58 <quorem+0x1c4>
80209d44:	10c00017 	ldw	r3,0(r2)
80209d48:	1800031e 	bne	r3,zero,80209d58 <quorem+0x1c4>
80209d4c:	10bfff04 	addi	r2,r2,-4
80209d50:	94bfffc4 	addi	r18,r18,-1
80209d54:	a8bffb36 	bltu	r21,r2,80209d44 <__reset+0xfa1e9d44>
80209d58:	84800415 	stw	r18,16(r16)
80209d5c:	9805883a 	mov	r2,r19
80209d60:	dfc00817 	ldw	ra,32(sp)
80209d64:	ddc00717 	ldw	r23,28(sp)
80209d68:	dd800617 	ldw	r22,24(sp)
80209d6c:	dd400517 	ldw	r21,20(sp)
80209d70:	dd000417 	ldw	r20,16(sp)
80209d74:	dcc00317 	ldw	r19,12(sp)
80209d78:	dc800217 	ldw	r18,8(sp)
80209d7c:	dc400117 	ldw	r17,4(sp)
80209d80:	dc000017 	ldw	r16,0(sp)
80209d84:	dec00904 	addi	sp,sp,36
80209d88:	f800283a 	ret
80209d8c:	0005883a 	mov	r2,zero
80209d90:	003ff306 	br	80209d60 <__reset+0xfa1e9d60>

80209d94 <_dtoa_r>:
80209d94:	20801017 	ldw	r2,64(r4)
80209d98:	deffde04 	addi	sp,sp,-136
80209d9c:	df002015 	stw	fp,128(sp)
80209da0:	dcc01b15 	stw	r19,108(sp)
80209da4:	dc801a15 	stw	r18,104(sp)
80209da8:	dc401915 	stw	r17,100(sp)
80209dac:	dc001815 	stw	r16,96(sp)
80209db0:	dfc02115 	stw	ra,132(sp)
80209db4:	ddc01f15 	stw	r23,124(sp)
80209db8:	dd801e15 	stw	r22,120(sp)
80209dbc:	dd401d15 	stw	r21,116(sp)
80209dc0:	dd001c15 	stw	r20,112(sp)
80209dc4:	d9c00315 	stw	r7,12(sp)
80209dc8:	2039883a 	mov	fp,r4
80209dcc:	3023883a 	mov	r17,r6
80209dd0:	2825883a 	mov	r18,r5
80209dd4:	dc002417 	ldw	r16,144(sp)
80209dd8:	3027883a 	mov	r19,r6
80209ddc:	10000826 	beq	r2,zero,80209e00 <_dtoa_r+0x6c>
80209de0:	21801117 	ldw	r6,68(r4)
80209de4:	00c00044 	movi	r3,1
80209de8:	100b883a 	mov	r5,r2
80209dec:	1986983a 	sll	r3,r3,r6
80209df0:	11800115 	stw	r6,4(r2)
80209df4:	10c00215 	stw	r3,8(r2)
80209df8:	020d3900 	call	8020d390 <_Bfree>
80209dfc:	e0001015 	stw	zero,64(fp)
80209e00:	88002e16 	blt	r17,zero,80209ebc <_dtoa_r+0x128>
80209e04:	80000015 	stw	zero,0(r16)
80209e08:	889ffc2c 	andhi	r2,r17,32752
80209e0c:	00dffc34 	movhi	r3,32752
80209e10:	10c01c26 	beq	r2,r3,80209e84 <_dtoa_r+0xf0>
80209e14:	000d883a 	mov	r6,zero
80209e18:	000f883a 	mov	r7,zero
80209e1c:	9009883a 	mov	r4,r18
80209e20:	980b883a 	mov	r5,r19
80209e24:	0213ca80 	call	80213ca8 <__eqdf2>
80209e28:	10002b1e 	bne	r2,zero,80209ed8 <_dtoa_r+0x144>
80209e2c:	d9c02317 	ldw	r7,140(sp)
80209e30:	00800044 	movi	r2,1
80209e34:	38800015 	stw	r2,0(r7)
80209e38:	d8802517 	ldw	r2,148(sp)
80209e3c:	10019e26 	beq	r2,zero,8020a4b8 <_dtoa_r+0x724>
80209e40:	d8c02517 	ldw	r3,148(sp)
80209e44:	00a008b4 	movhi	r2,32802
80209e48:	10acce44 	addi	r2,r2,-19655
80209e4c:	18800015 	stw	r2,0(r3)
80209e50:	10bfffc4 	addi	r2,r2,-1
80209e54:	dfc02117 	ldw	ra,132(sp)
80209e58:	df002017 	ldw	fp,128(sp)
80209e5c:	ddc01f17 	ldw	r23,124(sp)
80209e60:	dd801e17 	ldw	r22,120(sp)
80209e64:	dd401d17 	ldw	r21,116(sp)
80209e68:	dd001c17 	ldw	r20,112(sp)
80209e6c:	dcc01b17 	ldw	r19,108(sp)
80209e70:	dc801a17 	ldw	r18,104(sp)
80209e74:	dc401917 	ldw	r17,100(sp)
80209e78:	dc001817 	ldw	r16,96(sp)
80209e7c:	dec02204 	addi	sp,sp,136
80209e80:	f800283a 	ret
80209e84:	d8c02317 	ldw	r3,140(sp)
80209e88:	0089c3c4 	movi	r2,9999
80209e8c:	18800015 	stw	r2,0(r3)
80209e90:	90017726 	beq	r18,zero,8020a470 <_dtoa_r+0x6dc>
80209e94:	00a008b4 	movhi	r2,32802
80209e98:	10ace204 	addi	r2,r2,-19576
80209e9c:	d9002517 	ldw	r4,148(sp)
80209ea0:	203fec26 	beq	r4,zero,80209e54 <__reset+0xfa1e9e54>
80209ea4:	10c000c7 	ldb	r3,3(r2)
80209ea8:	1801781e 	bne	r3,zero,8020a48c <_dtoa_r+0x6f8>
80209eac:	10c000c4 	addi	r3,r2,3
80209eb0:	d9802517 	ldw	r6,148(sp)
80209eb4:	30c00015 	stw	r3,0(r6)
80209eb8:	003fe606 	br	80209e54 <__reset+0xfa1e9e54>
80209ebc:	04e00034 	movhi	r19,32768
80209ec0:	9cffffc4 	addi	r19,r19,-1
80209ec4:	00800044 	movi	r2,1
80209ec8:	8ce6703a 	and	r19,r17,r19
80209ecc:	80800015 	stw	r2,0(r16)
80209ed0:	9823883a 	mov	r17,r19
80209ed4:	003fcc06 	br	80209e08 <__reset+0xfa1e9e08>
80209ed8:	d8800204 	addi	r2,sp,8
80209edc:	d8800015 	stw	r2,0(sp)
80209ee0:	d9c00104 	addi	r7,sp,4
80209ee4:	900b883a 	mov	r5,r18
80209ee8:	980d883a 	mov	r6,r19
80209eec:	e009883a 	mov	r4,fp
80209ef0:	8820d53a 	srli	r16,r17,20
80209ef4:	020df7c0 	call	8020df7c <__d2b>
80209ef8:	d8800915 	stw	r2,36(sp)
80209efc:	8001651e 	bne	r16,zero,8020a494 <_dtoa_r+0x700>
80209f00:	dd800217 	ldw	r22,8(sp)
80209f04:	dc000117 	ldw	r16,4(sp)
80209f08:	00800804 	movi	r2,32
80209f0c:	b421883a 	add	r16,r22,r16
80209f10:	80c10c84 	addi	r3,r16,1074
80209f14:	10c2d10e 	bge	r2,r3,8020aa5c <_dtoa_r+0xcc8>
80209f18:	00801004 	movi	r2,64
80209f1c:	81010484 	addi	r4,r16,1042
80209f20:	10c7c83a 	sub	r3,r2,r3
80209f24:	9108d83a 	srl	r4,r18,r4
80209f28:	88e2983a 	sll	r17,r17,r3
80209f2c:	2448b03a 	or	r4,r4,r17
80209f30:	02150700 	call	80215070 <__floatunsidf>
80209f34:	017f8434 	movhi	r5,65040
80209f38:	01800044 	movi	r6,1
80209f3c:	1009883a 	mov	r4,r2
80209f40:	194b883a 	add	r5,r3,r5
80209f44:	843fffc4 	addi	r16,r16,-1
80209f48:	d9801115 	stw	r6,68(sp)
80209f4c:	000d883a 	mov	r6,zero
80209f50:	01cffe34 	movhi	r7,16376
80209f54:	02146180 	call	80214618 <__subdf3>
80209f58:	0198dbf4 	movhi	r6,25455
80209f5c:	01cff4f4 	movhi	r7,16339
80209f60:	3190d844 	addi	r6,r6,17249
80209f64:	39e1e9c4 	addi	r7,r7,-30809
80209f68:	1009883a 	mov	r4,r2
80209f6c:	180b883a 	mov	r5,r3
80209f70:	0213f000 	call	80213f00 <__muldf3>
80209f74:	01a2d874 	movhi	r6,35681
80209f78:	01cff1f4 	movhi	r7,16327
80209f7c:	31b22cc4 	addi	r6,r6,-14157
80209f80:	39e28a04 	addi	r7,r7,-30168
80209f84:	180b883a 	mov	r5,r3
80209f88:	1009883a 	mov	r4,r2
80209f8c:	0212b140 	call	80212b14 <__adddf3>
80209f90:	8009883a 	mov	r4,r16
80209f94:	1029883a 	mov	r20,r2
80209f98:	1823883a 	mov	r17,r3
80209f9c:	0214f940 	call	80214f94 <__floatsidf>
80209fa0:	019427f4 	movhi	r6,20639
80209fa4:	01cff4f4 	movhi	r7,16339
80209fa8:	319e7ec4 	addi	r6,r6,31227
80209fac:	39d104c4 	addi	r7,r7,17427
80209fb0:	1009883a 	mov	r4,r2
80209fb4:	180b883a 	mov	r5,r3
80209fb8:	0213f000 	call	80213f00 <__muldf3>
80209fbc:	100d883a 	mov	r6,r2
80209fc0:	180f883a 	mov	r7,r3
80209fc4:	a009883a 	mov	r4,r20
80209fc8:	880b883a 	mov	r5,r17
80209fcc:	0212b140 	call	80212b14 <__adddf3>
80209fd0:	1009883a 	mov	r4,r2
80209fd4:	180b883a 	mov	r5,r3
80209fd8:	1029883a 	mov	r20,r2
80209fdc:	1823883a 	mov	r17,r3
80209fe0:	0214f140 	call	80214f14 <__fixdfsi>
80209fe4:	000d883a 	mov	r6,zero
80209fe8:	000f883a 	mov	r7,zero
80209fec:	a009883a 	mov	r4,r20
80209ff0:	880b883a 	mov	r5,r17
80209ff4:	d8800515 	stw	r2,20(sp)
80209ff8:	0213e0c0 	call	80213e0c <__ledf2>
80209ffc:	10028716 	blt	r2,zero,8020aa1c <_dtoa_r+0xc88>
8020a000:	d8c00517 	ldw	r3,20(sp)
8020a004:	00800584 	movi	r2,22
8020a008:	10c27536 	bltu	r2,r3,8020a9e0 <_dtoa_r+0xc4c>
8020a00c:	180490fa 	slli	r2,r3,3
8020a010:	00e008b4 	movhi	r3,32802
8020a014:	18ecfd04 	addi	r3,r3,-19468
8020a018:	1885883a 	add	r2,r3,r2
8020a01c:	11000017 	ldw	r4,0(r2)
8020a020:	11400117 	ldw	r5,4(r2)
8020a024:	900d883a 	mov	r6,r18
8020a028:	980f883a 	mov	r7,r19
8020a02c:	0213d300 	call	80213d30 <__gedf2>
8020a030:	00828d0e 	bge	zero,r2,8020aa68 <_dtoa_r+0xcd4>
8020a034:	d9000517 	ldw	r4,20(sp)
8020a038:	d8000e15 	stw	zero,56(sp)
8020a03c:	213fffc4 	addi	r4,r4,-1
8020a040:	d9000515 	stw	r4,20(sp)
8020a044:	b42dc83a 	sub	r22,r22,r16
8020a048:	b5bfffc4 	addi	r22,r22,-1
8020a04c:	b0026f16 	blt	r22,zero,8020aa0c <_dtoa_r+0xc78>
8020a050:	d8000815 	stw	zero,32(sp)
8020a054:	d9c00517 	ldw	r7,20(sp)
8020a058:	38026416 	blt	r7,zero,8020a9ec <_dtoa_r+0xc58>
8020a05c:	b1ed883a 	add	r22,r22,r7
8020a060:	d9c00d15 	stw	r7,52(sp)
8020a064:	d8000a15 	stw	zero,40(sp)
8020a068:	d9800317 	ldw	r6,12(sp)
8020a06c:	00800244 	movi	r2,9
8020a070:	11811436 	bltu	r2,r6,8020a4c4 <_dtoa_r+0x730>
8020a074:	00800144 	movi	r2,5
8020a078:	1184e10e 	bge	r2,r6,8020b400 <_dtoa_r+0x166c>
8020a07c:	31bfff04 	addi	r6,r6,-4
8020a080:	d9800315 	stw	r6,12(sp)
8020a084:	0023883a 	mov	r17,zero
8020a088:	d9800317 	ldw	r6,12(sp)
8020a08c:	008000c4 	movi	r2,3
8020a090:	30836726 	beq	r6,r2,8020ae30 <_dtoa_r+0x109c>
8020a094:	1183410e 	bge	r2,r6,8020ad9c <_dtoa_r+0x1008>
8020a098:	d9c00317 	ldw	r7,12(sp)
8020a09c:	00800104 	movi	r2,4
8020a0a0:	38827c26 	beq	r7,r2,8020aa94 <_dtoa_r+0xd00>
8020a0a4:	00800144 	movi	r2,5
8020a0a8:	3884c41e 	bne	r7,r2,8020b3bc <_dtoa_r+0x1628>
8020a0ac:	00800044 	movi	r2,1
8020a0b0:	d8800b15 	stw	r2,44(sp)
8020a0b4:	d8c00517 	ldw	r3,20(sp)
8020a0b8:	d9002217 	ldw	r4,136(sp)
8020a0bc:	1907883a 	add	r3,r3,r4
8020a0c0:	19800044 	addi	r6,r3,1
8020a0c4:	d8c00c15 	stw	r3,48(sp)
8020a0c8:	d9800615 	stw	r6,24(sp)
8020a0cc:	0183a40e 	bge	zero,r6,8020af60 <_dtoa_r+0x11cc>
8020a0d0:	d9800617 	ldw	r6,24(sp)
8020a0d4:	3021883a 	mov	r16,r6
8020a0d8:	e0001115 	stw	zero,68(fp)
8020a0dc:	008005c4 	movi	r2,23
8020a0e0:	1184c92e 	bgeu	r2,r6,8020b408 <_dtoa_r+0x1674>
8020a0e4:	00c00044 	movi	r3,1
8020a0e8:	00800104 	movi	r2,4
8020a0ec:	1085883a 	add	r2,r2,r2
8020a0f0:	11000504 	addi	r4,r2,20
8020a0f4:	180b883a 	mov	r5,r3
8020a0f8:	18c00044 	addi	r3,r3,1
8020a0fc:	313ffb2e 	bgeu	r6,r4,8020a0ec <__reset+0xfa1ea0ec>
8020a100:	e1401115 	stw	r5,68(fp)
8020a104:	e009883a 	mov	r4,fp
8020a108:	020d2e80 	call	8020d2e8 <_Balloc>
8020a10c:	d8800715 	stw	r2,28(sp)
8020a110:	e0801015 	stw	r2,64(fp)
8020a114:	00800384 	movi	r2,14
8020a118:	1400f736 	bltu	r2,r16,8020a4f8 <_dtoa_r+0x764>
8020a11c:	8800f626 	beq	r17,zero,8020a4f8 <_dtoa_r+0x764>
8020a120:	d9c00517 	ldw	r7,20(sp)
8020a124:	01c39a0e 	bge	zero,r7,8020af90 <_dtoa_r+0x11fc>
8020a128:	388003cc 	andi	r2,r7,15
8020a12c:	100490fa 	slli	r2,r2,3
8020a130:	382bd13a 	srai	r21,r7,4
8020a134:	00e008b4 	movhi	r3,32802
8020a138:	18ecfd04 	addi	r3,r3,-19468
8020a13c:	1885883a 	add	r2,r3,r2
8020a140:	a8c0040c 	andi	r3,r21,16
8020a144:	12400017 	ldw	r9,0(r2)
8020a148:	12000117 	ldw	r8,4(r2)
8020a14c:	18037926 	beq	r3,zero,8020af34 <_dtoa_r+0x11a0>
8020a150:	00a008b4 	movhi	r2,32802
8020a154:	10acf304 	addi	r2,r2,-19508
8020a158:	11800817 	ldw	r6,32(r2)
8020a15c:	11c00917 	ldw	r7,36(r2)
8020a160:	9009883a 	mov	r4,r18
8020a164:	980b883a 	mov	r5,r19
8020a168:	da001715 	stw	r8,92(sp)
8020a16c:	da401615 	stw	r9,88(sp)
8020a170:	02133c00 	call	802133c0 <__divdf3>
8020a174:	da001717 	ldw	r8,92(sp)
8020a178:	da401617 	ldw	r9,88(sp)
8020a17c:	ad4003cc 	andi	r21,r21,15
8020a180:	040000c4 	movi	r16,3
8020a184:	1023883a 	mov	r17,r2
8020a188:	1829883a 	mov	r20,r3
8020a18c:	a8001126 	beq	r21,zero,8020a1d4 <_dtoa_r+0x440>
8020a190:	05e008b4 	movhi	r23,32802
8020a194:	bdecf304 	addi	r23,r23,-19508
8020a198:	4805883a 	mov	r2,r9
8020a19c:	4007883a 	mov	r3,r8
8020a1a0:	a980004c 	andi	r6,r21,1
8020a1a4:	1009883a 	mov	r4,r2
8020a1a8:	a82bd07a 	srai	r21,r21,1
8020a1ac:	180b883a 	mov	r5,r3
8020a1b0:	30000426 	beq	r6,zero,8020a1c4 <_dtoa_r+0x430>
8020a1b4:	b9800017 	ldw	r6,0(r23)
8020a1b8:	b9c00117 	ldw	r7,4(r23)
8020a1bc:	84000044 	addi	r16,r16,1
8020a1c0:	0213f000 	call	80213f00 <__muldf3>
8020a1c4:	bdc00204 	addi	r23,r23,8
8020a1c8:	a83ff51e 	bne	r21,zero,8020a1a0 <__reset+0xfa1ea1a0>
8020a1cc:	1013883a 	mov	r9,r2
8020a1d0:	1811883a 	mov	r8,r3
8020a1d4:	480d883a 	mov	r6,r9
8020a1d8:	400f883a 	mov	r7,r8
8020a1dc:	8809883a 	mov	r4,r17
8020a1e0:	a00b883a 	mov	r5,r20
8020a1e4:	02133c00 	call	802133c0 <__divdf3>
8020a1e8:	d8800f15 	stw	r2,60(sp)
8020a1ec:	d8c01015 	stw	r3,64(sp)
8020a1f0:	d8c00e17 	ldw	r3,56(sp)
8020a1f4:	18000626 	beq	r3,zero,8020a210 <_dtoa_r+0x47c>
8020a1f8:	d9000f17 	ldw	r4,60(sp)
8020a1fc:	d9401017 	ldw	r5,64(sp)
8020a200:	000d883a 	mov	r6,zero
8020a204:	01cffc34 	movhi	r7,16368
8020a208:	0213e0c0 	call	80213e0c <__ledf2>
8020a20c:	10040b16 	blt	r2,zero,8020b23c <_dtoa_r+0x14a8>
8020a210:	8009883a 	mov	r4,r16
8020a214:	0214f940 	call	80214f94 <__floatsidf>
8020a218:	d9800f17 	ldw	r6,60(sp)
8020a21c:	d9c01017 	ldw	r7,64(sp)
8020a220:	1009883a 	mov	r4,r2
8020a224:	180b883a 	mov	r5,r3
8020a228:	0213f000 	call	80213f00 <__muldf3>
8020a22c:	000d883a 	mov	r6,zero
8020a230:	01d00734 	movhi	r7,16412
8020a234:	1009883a 	mov	r4,r2
8020a238:	180b883a 	mov	r5,r3
8020a23c:	0212b140 	call	80212b14 <__adddf3>
8020a240:	1021883a 	mov	r16,r2
8020a244:	d8800617 	ldw	r2,24(sp)
8020a248:	047f3034 	movhi	r17,64704
8020a24c:	1c63883a 	add	r17,r3,r17
8020a250:	10031826 	beq	r2,zero,8020aeb4 <_dtoa_r+0x1120>
8020a254:	d8c00517 	ldw	r3,20(sp)
8020a258:	db000617 	ldw	r12,24(sp)
8020a25c:	d8c01315 	stw	r3,76(sp)
8020a260:	d9000b17 	ldw	r4,44(sp)
8020a264:	20038f26 	beq	r4,zero,8020b0a4 <_dtoa_r+0x1310>
8020a268:	60bfffc4 	addi	r2,r12,-1
8020a26c:	100490fa 	slli	r2,r2,3
8020a270:	00e008b4 	movhi	r3,32802
8020a274:	18ecfd04 	addi	r3,r3,-19468
8020a278:	1885883a 	add	r2,r3,r2
8020a27c:	11800017 	ldw	r6,0(r2)
8020a280:	11c00117 	ldw	r7,4(r2)
8020a284:	d8800717 	ldw	r2,28(sp)
8020a288:	0009883a 	mov	r4,zero
8020a28c:	014ff834 	movhi	r5,16352
8020a290:	db001615 	stw	r12,88(sp)
8020a294:	15c00044 	addi	r23,r2,1
8020a298:	02133c00 	call	802133c0 <__divdf3>
8020a29c:	800d883a 	mov	r6,r16
8020a2a0:	880f883a 	mov	r7,r17
8020a2a4:	1009883a 	mov	r4,r2
8020a2a8:	180b883a 	mov	r5,r3
8020a2ac:	02146180 	call	80214618 <__subdf3>
8020a2b0:	d9401017 	ldw	r5,64(sp)
8020a2b4:	d9000f17 	ldw	r4,60(sp)
8020a2b8:	102b883a 	mov	r21,r2
8020a2bc:	d8c01215 	stw	r3,72(sp)
8020a2c0:	0214f140 	call	80214f14 <__fixdfsi>
8020a2c4:	1009883a 	mov	r4,r2
8020a2c8:	1029883a 	mov	r20,r2
8020a2cc:	0214f940 	call	80214f94 <__floatsidf>
8020a2d0:	d9000f17 	ldw	r4,60(sp)
8020a2d4:	d9401017 	ldw	r5,64(sp)
8020a2d8:	100d883a 	mov	r6,r2
8020a2dc:	180f883a 	mov	r7,r3
8020a2e0:	02146180 	call	80214618 <__subdf3>
8020a2e4:	1823883a 	mov	r17,r3
8020a2e8:	d8c00717 	ldw	r3,28(sp)
8020a2ec:	d9401217 	ldw	r5,72(sp)
8020a2f0:	a2000c04 	addi	r8,r20,48
8020a2f4:	1021883a 	mov	r16,r2
8020a2f8:	1a000005 	stb	r8,0(r3)
8020a2fc:	800d883a 	mov	r6,r16
8020a300:	880f883a 	mov	r7,r17
8020a304:	a809883a 	mov	r4,r21
8020a308:	4029883a 	mov	r20,r8
8020a30c:	0213d300 	call	80213d30 <__gedf2>
8020a310:	00841d16 	blt	zero,r2,8020b388 <_dtoa_r+0x15f4>
8020a314:	800d883a 	mov	r6,r16
8020a318:	880f883a 	mov	r7,r17
8020a31c:	0009883a 	mov	r4,zero
8020a320:	014ffc34 	movhi	r5,16368
8020a324:	02146180 	call	80214618 <__subdf3>
8020a328:	d9401217 	ldw	r5,72(sp)
8020a32c:	100d883a 	mov	r6,r2
8020a330:	180f883a 	mov	r7,r3
8020a334:	a809883a 	mov	r4,r21
8020a338:	0213d300 	call	80213d30 <__gedf2>
8020a33c:	db001617 	ldw	r12,88(sp)
8020a340:	00840e16 	blt	zero,r2,8020b37c <_dtoa_r+0x15e8>
8020a344:	00800044 	movi	r2,1
8020a348:	13006b0e 	bge	r2,r12,8020a4f8 <_dtoa_r+0x764>
8020a34c:	d9000717 	ldw	r4,28(sp)
8020a350:	dd800f15 	stw	r22,60(sp)
8020a354:	dcc01015 	stw	r19,64(sp)
8020a358:	2319883a 	add	r12,r4,r12
8020a35c:	dcc01217 	ldw	r19,72(sp)
8020a360:	602d883a 	mov	r22,r12
8020a364:	dc801215 	stw	r18,72(sp)
8020a368:	b825883a 	mov	r18,r23
8020a36c:	00000906 	br	8020a394 <_dtoa_r+0x600>
8020a370:	02146180 	call	80214618 <__subdf3>
8020a374:	a80d883a 	mov	r6,r21
8020a378:	980f883a 	mov	r7,r19
8020a37c:	1009883a 	mov	r4,r2
8020a380:	180b883a 	mov	r5,r3
8020a384:	0213e0c0 	call	80213e0c <__ledf2>
8020a388:	1003e816 	blt	r2,zero,8020b32c <_dtoa_r+0x1598>
8020a38c:	b825883a 	mov	r18,r23
8020a390:	bd83e926 	beq	r23,r22,8020b338 <_dtoa_r+0x15a4>
8020a394:	a809883a 	mov	r4,r21
8020a398:	980b883a 	mov	r5,r19
8020a39c:	000d883a 	mov	r6,zero
8020a3a0:	01d00934 	movhi	r7,16420
8020a3a4:	0213f000 	call	80213f00 <__muldf3>
8020a3a8:	000d883a 	mov	r6,zero
8020a3ac:	01d00934 	movhi	r7,16420
8020a3b0:	8009883a 	mov	r4,r16
8020a3b4:	880b883a 	mov	r5,r17
8020a3b8:	102b883a 	mov	r21,r2
8020a3bc:	1827883a 	mov	r19,r3
8020a3c0:	0213f000 	call	80213f00 <__muldf3>
8020a3c4:	180b883a 	mov	r5,r3
8020a3c8:	1009883a 	mov	r4,r2
8020a3cc:	1821883a 	mov	r16,r3
8020a3d0:	1023883a 	mov	r17,r2
8020a3d4:	0214f140 	call	80214f14 <__fixdfsi>
8020a3d8:	1009883a 	mov	r4,r2
8020a3dc:	1029883a 	mov	r20,r2
8020a3e0:	0214f940 	call	80214f94 <__floatsidf>
8020a3e4:	8809883a 	mov	r4,r17
8020a3e8:	800b883a 	mov	r5,r16
8020a3ec:	100d883a 	mov	r6,r2
8020a3f0:	180f883a 	mov	r7,r3
8020a3f4:	02146180 	call	80214618 <__subdf3>
8020a3f8:	a5000c04 	addi	r20,r20,48
8020a3fc:	a80d883a 	mov	r6,r21
8020a400:	980f883a 	mov	r7,r19
8020a404:	1009883a 	mov	r4,r2
8020a408:	180b883a 	mov	r5,r3
8020a40c:	95000005 	stb	r20,0(r18)
8020a410:	1021883a 	mov	r16,r2
8020a414:	1823883a 	mov	r17,r3
8020a418:	0213e0c0 	call	80213e0c <__ledf2>
8020a41c:	bdc00044 	addi	r23,r23,1
8020a420:	800d883a 	mov	r6,r16
8020a424:	880f883a 	mov	r7,r17
8020a428:	0009883a 	mov	r4,zero
8020a42c:	014ffc34 	movhi	r5,16368
8020a430:	103fcf0e 	bge	r2,zero,8020a370 <__reset+0xfa1ea370>
8020a434:	d8c01317 	ldw	r3,76(sp)
8020a438:	d8c00515 	stw	r3,20(sp)
8020a43c:	d9400917 	ldw	r5,36(sp)
8020a440:	e009883a 	mov	r4,fp
8020a444:	020d3900 	call	8020d390 <_Bfree>
8020a448:	d9000517 	ldw	r4,20(sp)
8020a44c:	d9802317 	ldw	r6,140(sp)
8020a450:	d9c02517 	ldw	r7,148(sp)
8020a454:	b8000005 	stb	zero,0(r23)
8020a458:	20800044 	addi	r2,r4,1
8020a45c:	30800015 	stw	r2,0(r6)
8020a460:	3802aa26 	beq	r7,zero,8020af0c <_dtoa_r+0x1178>
8020a464:	3dc00015 	stw	r23,0(r7)
8020a468:	d8800717 	ldw	r2,28(sp)
8020a46c:	003e7906 	br	80209e54 <__reset+0xfa1e9e54>
8020a470:	00800434 	movhi	r2,16
8020a474:	10bfffc4 	addi	r2,r2,-1
8020a478:	88a2703a 	and	r17,r17,r2
8020a47c:	883e851e 	bne	r17,zero,80209e94 <__reset+0xfa1e9e94>
8020a480:	00a008b4 	movhi	r2,32802
8020a484:	10acdf04 	addi	r2,r2,-19588
8020a488:	003e8406 	br	80209e9c <__reset+0xfa1e9e9c>
8020a48c:	10c00204 	addi	r3,r2,8
8020a490:	003e8706 	br	80209eb0 <__reset+0xfa1e9eb0>
8020a494:	01400434 	movhi	r5,16
8020a498:	297fffc4 	addi	r5,r5,-1
8020a49c:	994a703a 	and	r5,r19,r5
8020a4a0:	9009883a 	mov	r4,r18
8020a4a4:	843f0044 	addi	r16,r16,-1023
8020a4a8:	294ffc34 	orhi	r5,r5,16368
8020a4ac:	dd800217 	ldw	r22,8(sp)
8020a4b0:	d8001115 	stw	zero,68(sp)
8020a4b4:	003ea506 	br	80209f4c <__reset+0xfa1e9f4c>
8020a4b8:	00a008b4 	movhi	r2,32802
8020a4bc:	10acce04 	addi	r2,r2,-19656
8020a4c0:	003e6406 	br	80209e54 <__reset+0xfa1e9e54>
8020a4c4:	e0001115 	stw	zero,68(fp)
8020a4c8:	000b883a 	mov	r5,zero
8020a4cc:	e009883a 	mov	r4,fp
8020a4d0:	020d2e80 	call	8020d2e8 <_Balloc>
8020a4d4:	01bfffc4 	movi	r6,-1
8020a4d8:	01c00044 	movi	r7,1
8020a4dc:	d8800715 	stw	r2,28(sp)
8020a4e0:	d9800c15 	stw	r6,48(sp)
8020a4e4:	e0801015 	stw	r2,64(fp)
8020a4e8:	d8000315 	stw	zero,12(sp)
8020a4ec:	d9c00b15 	stw	r7,44(sp)
8020a4f0:	d9800615 	stw	r6,24(sp)
8020a4f4:	d8002215 	stw	zero,136(sp)
8020a4f8:	d8800117 	ldw	r2,4(sp)
8020a4fc:	10008916 	blt	r2,zero,8020a724 <_dtoa_r+0x990>
8020a500:	d9000517 	ldw	r4,20(sp)
8020a504:	00c00384 	movi	r3,14
8020a508:	19008616 	blt	r3,r4,8020a724 <_dtoa_r+0x990>
8020a50c:	200490fa 	slli	r2,r4,3
8020a510:	00e008b4 	movhi	r3,32802
8020a514:	d9802217 	ldw	r6,136(sp)
8020a518:	18ecfd04 	addi	r3,r3,-19468
8020a51c:	1885883a 	add	r2,r3,r2
8020a520:	14000017 	ldw	r16,0(r2)
8020a524:	14400117 	ldw	r17,4(r2)
8020a528:	30016316 	blt	r6,zero,8020aab8 <_dtoa_r+0xd24>
8020a52c:	800d883a 	mov	r6,r16
8020a530:	880f883a 	mov	r7,r17
8020a534:	9009883a 	mov	r4,r18
8020a538:	980b883a 	mov	r5,r19
8020a53c:	02133c00 	call	802133c0 <__divdf3>
8020a540:	180b883a 	mov	r5,r3
8020a544:	1009883a 	mov	r4,r2
8020a548:	0214f140 	call	80214f14 <__fixdfsi>
8020a54c:	1009883a 	mov	r4,r2
8020a550:	102b883a 	mov	r21,r2
8020a554:	0214f940 	call	80214f94 <__floatsidf>
8020a558:	800d883a 	mov	r6,r16
8020a55c:	880f883a 	mov	r7,r17
8020a560:	1009883a 	mov	r4,r2
8020a564:	180b883a 	mov	r5,r3
8020a568:	0213f000 	call	80213f00 <__muldf3>
8020a56c:	100d883a 	mov	r6,r2
8020a570:	180f883a 	mov	r7,r3
8020a574:	9009883a 	mov	r4,r18
8020a578:	980b883a 	mov	r5,r19
8020a57c:	02146180 	call	80214618 <__subdf3>
8020a580:	d9c00717 	ldw	r7,28(sp)
8020a584:	1009883a 	mov	r4,r2
8020a588:	a8800c04 	addi	r2,r21,48
8020a58c:	38800005 	stb	r2,0(r7)
8020a590:	3dc00044 	addi	r23,r7,1
8020a594:	d9c00617 	ldw	r7,24(sp)
8020a598:	01800044 	movi	r6,1
8020a59c:	180b883a 	mov	r5,r3
8020a5a0:	2005883a 	mov	r2,r4
8020a5a4:	39803826 	beq	r7,r6,8020a688 <_dtoa_r+0x8f4>
8020a5a8:	000d883a 	mov	r6,zero
8020a5ac:	01d00934 	movhi	r7,16420
8020a5b0:	0213f000 	call	80213f00 <__muldf3>
8020a5b4:	000d883a 	mov	r6,zero
8020a5b8:	000f883a 	mov	r7,zero
8020a5bc:	1009883a 	mov	r4,r2
8020a5c0:	180b883a 	mov	r5,r3
8020a5c4:	1025883a 	mov	r18,r2
8020a5c8:	1827883a 	mov	r19,r3
8020a5cc:	0213ca80 	call	80213ca8 <__eqdf2>
8020a5d0:	103f9a26 	beq	r2,zero,8020a43c <__reset+0xfa1ea43c>
8020a5d4:	d9c00617 	ldw	r7,24(sp)
8020a5d8:	d8c00717 	ldw	r3,28(sp)
8020a5dc:	b829883a 	mov	r20,r23
8020a5e0:	38bfffc4 	addi	r2,r7,-1
8020a5e4:	18ad883a 	add	r22,r3,r2
8020a5e8:	00000a06 	br	8020a614 <_dtoa_r+0x880>
8020a5ec:	0213f000 	call	80213f00 <__muldf3>
8020a5f0:	000d883a 	mov	r6,zero
8020a5f4:	000f883a 	mov	r7,zero
8020a5f8:	1009883a 	mov	r4,r2
8020a5fc:	180b883a 	mov	r5,r3
8020a600:	1025883a 	mov	r18,r2
8020a604:	1827883a 	mov	r19,r3
8020a608:	b829883a 	mov	r20,r23
8020a60c:	0213ca80 	call	80213ca8 <__eqdf2>
8020a610:	103f8a26 	beq	r2,zero,8020a43c <__reset+0xfa1ea43c>
8020a614:	800d883a 	mov	r6,r16
8020a618:	880f883a 	mov	r7,r17
8020a61c:	9009883a 	mov	r4,r18
8020a620:	980b883a 	mov	r5,r19
8020a624:	02133c00 	call	802133c0 <__divdf3>
8020a628:	180b883a 	mov	r5,r3
8020a62c:	1009883a 	mov	r4,r2
8020a630:	0214f140 	call	80214f14 <__fixdfsi>
8020a634:	1009883a 	mov	r4,r2
8020a638:	102b883a 	mov	r21,r2
8020a63c:	0214f940 	call	80214f94 <__floatsidf>
8020a640:	800d883a 	mov	r6,r16
8020a644:	880f883a 	mov	r7,r17
8020a648:	1009883a 	mov	r4,r2
8020a64c:	180b883a 	mov	r5,r3
8020a650:	0213f000 	call	80213f00 <__muldf3>
8020a654:	100d883a 	mov	r6,r2
8020a658:	180f883a 	mov	r7,r3
8020a65c:	9009883a 	mov	r4,r18
8020a660:	980b883a 	mov	r5,r19
8020a664:	02146180 	call	80214618 <__subdf3>
8020a668:	aa000c04 	addi	r8,r21,48
8020a66c:	a2000005 	stb	r8,0(r20)
8020a670:	000d883a 	mov	r6,zero
8020a674:	01d00934 	movhi	r7,16420
8020a678:	1009883a 	mov	r4,r2
8020a67c:	180b883a 	mov	r5,r3
8020a680:	a5c00044 	addi	r23,r20,1
8020a684:	b53fd91e 	bne	r22,r20,8020a5ec <__reset+0xfa1ea5ec>
8020a688:	100d883a 	mov	r6,r2
8020a68c:	180f883a 	mov	r7,r3
8020a690:	1009883a 	mov	r4,r2
8020a694:	180b883a 	mov	r5,r3
8020a698:	0212b140 	call	80212b14 <__adddf3>
8020a69c:	100d883a 	mov	r6,r2
8020a6a0:	180f883a 	mov	r7,r3
8020a6a4:	8009883a 	mov	r4,r16
8020a6a8:	880b883a 	mov	r5,r17
8020a6ac:	1027883a 	mov	r19,r2
8020a6b0:	1825883a 	mov	r18,r3
8020a6b4:	0213e0c0 	call	80213e0c <__ledf2>
8020a6b8:	10000816 	blt	r2,zero,8020a6dc <_dtoa_r+0x948>
8020a6bc:	980d883a 	mov	r6,r19
8020a6c0:	900f883a 	mov	r7,r18
8020a6c4:	8009883a 	mov	r4,r16
8020a6c8:	880b883a 	mov	r5,r17
8020a6cc:	0213ca80 	call	80213ca8 <__eqdf2>
8020a6d0:	103f5a1e 	bne	r2,zero,8020a43c <__reset+0xfa1ea43c>
8020a6d4:	ad40004c 	andi	r21,r21,1
8020a6d8:	a83f5826 	beq	r21,zero,8020a43c <__reset+0xfa1ea43c>
8020a6dc:	bd3fffc3 	ldbu	r20,-1(r23)
8020a6e0:	b8bfffc4 	addi	r2,r23,-1
8020a6e4:	1007883a 	mov	r3,r2
8020a6e8:	01400e44 	movi	r5,57
8020a6ec:	d9800717 	ldw	r6,28(sp)
8020a6f0:	00000506 	br	8020a708 <_dtoa_r+0x974>
8020a6f4:	18ffffc4 	addi	r3,r3,-1
8020a6f8:	11824726 	beq	r2,r6,8020b018 <_dtoa_r+0x1284>
8020a6fc:	1d000003 	ldbu	r20,0(r3)
8020a700:	102f883a 	mov	r23,r2
8020a704:	10bfffc4 	addi	r2,r2,-1
8020a708:	a1003fcc 	andi	r4,r20,255
8020a70c:	2100201c 	xori	r4,r4,128
8020a710:	213fe004 	addi	r4,r4,-128
8020a714:	217ff726 	beq	r4,r5,8020a6f4 <__reset+0xfa1ea6f4>
8020a718:	a2000044 	addi	r8,r20,1
8020a71c:	12000005 	stb	r8,0(r2)
8020a720:	003f4606 	br	8020a43c <__reset+0xfa1ea43c>
8020a724:	d9000b17 	ldw	r4,44(sp)
8020a728:	2000c826 	beq	r4,zero,8020aa4c <_dtoa_r+0xcb8>
8020a72c:	d9800317 	ldw	r6,12(sp)
8020a730:	00c00044 	movi	r3,1
8020a734:	1980f90e 	bge	r3,r6,8020ab1c <_dtoa_r+0xd88>
8020a738:	d8800617 	ldw	r2,24(sp)
8020a73c:	d8c00a17 	ldw	r3,40(sp)
8020a740:	157fffc4 	addi	r21,r2,-1
8020a744:	1d41f316 	blt	r3,r21,8020af14 <_dtoa_r+0x1180>
8020a748:	1d6bc83a 	sub	r21,r3,r21
8020a74c:	d9c00617 	ldw	r7,24(sp)
8020a750:	3802aa16 	blt	r7,zero,8020b1fc <_dtoa_r+0x1468>
8020a754:	dd000817 	ldw	r20,32(sp)
8020a758:	d8800617 	ldw	r2,24(sp)
8020a75c:	d8c00817 	ldw	r3,32(sp)
8020a760:	01400044 	movi	r5,1
8020a764:	e009883a 	mov	r4,fp
8020a768:	1887883a 	add	r3,r3,r2
8020a76c:	d8c00815 	stw	r3,32(sp)
8020a770:	b0ad883a 	add	r22,r22,r2
8020a774:	020d6f40 	call	8020d6f4 <__i2b>
8020a778:	1023883a 	mov	r17,r2
8020a77c:	a0000826 	beq	r20,zero,8020a7a0 <_dtoa_r+0xa0c>
8020a780:	0580070e 	bge	zero,r22,8020a7a0 <_dtoa_r+0xa0c>
8020a784:	a005883a 	mov	r2,r20
8020a788:	b500b916 	blt	r22,r20,8020aa70 <_dtoa_r+0xcdc>
8020a78c:	d9000817 	ldw	r4,32(sp)
8020a790:	a0a9c83a 	sub	r20,r20,r2
8020a794:	b0adc83a 	sub	r22,r22,r2
8020a798:	2089c83a 	sub	r4,r4,r2
8020a79c:	d9000815 	stw	r4,32(sp)
8020a7a0:	d9800a17 	ldw	r6,40(sp)
8020a7a4:	0181810e 	bge	zero,r6,8020adac <_dtoa_r+0x1018>
8020a7a8:	d9c00b17 	ldw	r7,44(sp)
8020a7ac:	3800b326 	beq	r7,zero,8020aa7c <_dtoa_r+0xce8>
8020a7b0:	a800b226 	beq	r21,zero,8020aa7c <_dtoa_r+0xce8>
8020a7b4:	880b883a 	mov	r5,r17
8020a7b8:	a80d883a 	mov	r6,r21
8020a7bc:	e009883a 	mov	r4,fp
8020a7c0:	020d9280 	call	8020d928 <__pow5mult>
8020a7c4:	d9800917 	ldw	r6,36(sp)
8020a7c8:	100b883a 	mov	r5,r2
8020a7cc:	e009883a 	mov	r4,fp
8020a7d0:	1023883a 	mov	r17,r2
8020a7d4:	020d7300 	call	8020d730 <__multiply>
8020a7d8:	1021883a 	mov	r16,r2
8020a7dc:	d8800a17 	ldw	r2,40(sp)
8020a7e0:	d9400917 	ldw	r5,36(sp)
8020a7e4:	e009883a 	mov	r4,fp
8020a7e8:	1545c83a 	sub	r2,r2,r21
8020a7ec:	d8800a15 	stw	r2,40(sp)
8020a7f0:	020d3900 	call	8020d390 <_Bfree>
8020a7f4:	d8c00a17 	ldw	r3,40(sp)
8020a7f8:	18009f1e 	bne	r3,zero,8020aa78 <_dtoa_r+0xce4>
8020a7fc:	05c00044 	movi	r23,1
8020a800:	e009883a 	mov	r4,fp
8020a804:	b80b883a 	mov	r5,r23
8020a808:	020d6f40 	call	8020d6f4 <__i2b>
8020a80c:	d9000d17 	ldw	r4,52(sp)
8020a810:	102b883a 	mov	r21,r2
8020a814:	2000ce26 	beq	r4,zero,8020ab50 <_dtoa_r+0xdbc>
8020a818:	200d883a 	mov	r6,r4
8020a81c:	100b883a 	mov	r5,r2
8020a820:	e009883a 	mov	r4,fp
8020a824:	020d9280 	call	8020d928 <__pow5mult>
8020a828:	d9800317 	ldw	r6,12(sp)
8020a82c:	102b883a 	mov	r21,r2
8020a830:	b981810e 	bge	r23,r6,8020ae38 <_dtoa_r+0x10a4>
8020a834:	0027883a 	mov	r19,zero
8020a838:	a8800417 	ldw	r2,16(r21)
8020a83c:	05c00804 	movi	r23,32
8020a840:	10800104 	addi	r2,r2,4
8020a844:	1085883a 	add	r2,r2,r2
8020a848:	1085883a 	add	r2,r2,r2
8020a84c:	a885883a 	add	r2,r21,r2
8020a850:	11000017 	ldw	r4,0(r2)
8020a854:	020d5dc0 	call	8020d5dc <__hi0bits>
8020a858:	b885c83a 	sub	r2,r23,r2
8020a85c:	1585883a 	add	r2,r2,r22
8020a860:	108007cc 	andi	r2,r2,31
8020a864:	1000b326 	beq	r2,zero,8020ab34 <_dtoa_r+0xda0>
8020a868:	00c00804 	movi	r3,32
8020a86c:	1887c83a 	sub	r3,r3,r2
8020a870:	01000104 	movi	r4,4
8020a874:	20c2cd0e 	bge	r4,r3,8020b3ac <_dtoa_r+0x1618>
8020a878:	00c00704 	movi	r3,28
8020a87c:	1885c83a 	sub	r2,r3,r2
8020a880:	d8c00817 	ldw	r3,32(sp)
8020a884:	a0a9883a 	add	r20,r20,r2
8020a888:	b0ad883a 	add	r22,r22,r2
8020a88c:	1887883a 	add	r3,r3,r2
8020a890:	d8c00815 	stw	r3,32(sp)
8020a894:	d9800817 	ldw	r6,32(sp)
8020a898:	0180040e 	bge	zero,r6,8020a8ac <_dtoa_r+0xb18>
8020a89c:	800b883a 	mov	r5,r16
8020a8a0:	e009883a 	mov	r4,fp
8020a8a4:	020da680 	call	8020da68 <__lshift>
8020a8a8:	1021883a 	mov	r16,r2
8020a8ac:	0580050e 	bge	zero,r22,8020a8c4 <_dtoa_r+0xb30>
8020a8b0:	a80b883a 	mov	r5,r21
8020a8b4:	b00d883a 	mov	r6,r22
8020a8b8:	e009883a 	mov	r4,fp
8020a8bc:	020da680 	call	8020da68 <__lshift>
8020a8c0:	102b883a 	mov	r21,r2
8020a8c4:	d9c00e17 	ldw	r7,56(sp)
8020a8c8:	3801211e 	bne	r7,zero,8020ad50 <_dtoa_r+0xfbc>
8020a8cc:	d9800617 	ldw	r6,24(sp)
8020a8d0:	0181380e 	bge	zero,r6,8020adb4 <_dtoa_r+0x1020>
8020a8d4:	d8c00b17 	ldw	r3,44(sp)
8020a8d8:	1800ab1e 	bne	r3,zero,8020ab88 <_dtoa_r+0xdf4>
8020a8dc:	dc800717 	ldw	r18,28(sp)
8020a8e0:	dcc00617 	ldw	r19,24(sp)
8020a8e4:	9029883a 	mov	r20,r18
8020a8e8:	00000206 	br	8020a8f4 <_dtoa_r+0xb60>
8020a8ec:	020d3b80 	call	8020d3b8 <__multadd>
8020a8f0:	1021883a 	mov	r16,r2
8020a8f4:	a80b883a 	mov	r5,r21
8020a8f8:	8009883a 	mov	r4,r16
8020a8fc:	0209b940 	call	80209b94 <quorem>
8020a900:	10800c04 	addi	r2,r2,48
8020a904:	90800005 	stb	r2,0(r18)
8020a908:	94800044 	addi	r18,r18,1
8020a90c:	9507c83a 	sub	r3,r18,r20
8020a910:	000f883a 	mov	r7,zero
8020a914:	01800284 	movi	r6,10
8020a918:	800b883a 	mov	r5,r16
8020a91c:	e009883a 	mov	r4,fp
8020a920:	1cfff216 	blt	r3,r19,8020a8ec <__reset+0xfa1ea8ec>
8020a924:	1011883a 	mov	r8,r2
8020a928:	d8800617 	ldw	r2,24(sp)
8020a92c:	0082370e 	bge	zero,r2,8020b20c <_dtoa_r+0x1478>
8020a930:	d9000717 	ldw	r4,28(sp)
8020a934:	0025883a 	mov	r18,zero
8020a938:	20af883a 	add	r23,r4,r2
8020a93c:	01800044 	movi	r6,1
8020a940:	800b883a 	mov	r5,r16
8020a944:	e009883a 	mov	r4,fp
8020a948:	da001715 	stw	r8,92(sp)
8020a94c:	020da680 	call	8020da68 <__lshift>
8020a950:	a80b883a 	mov	r5,r21
8020a954:	1009883a 	mov	r4,r2
8020a958:	d8800915 	stw	r2,36(sp)
8020a95c:	020dbb00 	call	8020dbb0 <__mcmp>
8020a960:	da001717 	ldw	r8,92(sp)
8020a964:	0081800e 	bge	zero,r2,8020af68 <_dtoa_r+0x11d4>
8020a968:	b93fffc3 	ldbu	r4,-1(r23)
8020a96c:	b8bfffc4 	addi	r2,r23,-1
8020a970:	1007883a 	mov	r3,r2
8020a974:	01800e44 	movi	r6,57
8020a978:	d9c00717 	ldw	r7,28(sp)
8020a97c:	00000506 	br	8020a994 <_dtoa_r+0xc00>
8020a980:	18ffffc4 	addi	r3,r3,-1
8020a984:	11c12326 	beq	r2,r7,8020ae14 <_dtoa_r+0x1080>
8020a988:	19000003 	ldbu	r4,0(r3)
8020a98c:	102f883a 	mov	r23,r2
8020a990:	10bfffc4 	addi	r2,r2,-1
8020a994:	21403fcc 	andi	r5,r4,255
8020a998:	2940201c 	xori	r5,r5,128
8020a99c:	297fe004 	addi	r5,r5,-128
8020a9a0:	29bff726 	beq	r5,r6,8020a980 <__reset+0xfa1ea980>
8020a9a4:	21000044 	addi	r4,r4,1
8020a9a8:	11000005 	stb	r4,0(r2)
8020a9ac:	a80b883a 	mov	r5,r21
8020a9b0:	e009883a 	mov	r4,fp
8020a9b4:	020d3900 	call	8020d390 <_Bfree>
8020a9b8:	883ea026 	beq	r17,zero,8020a43c <__reset+0xfa1ea43c>
8020a9bc:	90000426 	beq	r18,zero,8020a9d0 <_dtoa_r+0xc3c>
8020a9c0:	94400326 	beq	r18,r17,8020a9d0 <_dtoa_r+0xc3c>
8020a9c4:	900b883a 	mov	r5,r18
8020a9c8:	e009883a 	mov	r4,fp
8020a9cc:	020d3900 	call	8020d390 <_Bfree>
8020a9d0:	880b883a 	mov	r5,r17
8020a9d4:	e009883a 	mov	r4,fp
8020a9d8:	020d3900 	call	8020d390 <_Bfree>
8020a9dc:	003e9706 	br	8020a43c <__reset+0xfa1ea43c>
8020a9e0:	01800044 	movi	r6,1
8020a9e4:	d9800e15 	stw	r6,56(sp)
8020a9e8:	003d9606 	br	8020a044 <__reset+0xfa1ea044>
8020a9ec:	d8800817 	ldw	r2,32(sp)
8020a9f0:	d8c00517 	ldw	r3,20(sp)
8020a9f4:	d8000d15 	stw	zero,52(sp)
8020a9f8:	10c5c83a 	sub	r2,r2,r3
8020a9fc:	00c9c83a 	sub	r4,zero,r3
8020aa00:	d8800815 	stw	r2,32(sp)
8020aa04:	d9000a15 	stw	r4,40(sp)
8020aa08:	003d9706 	br	8020a068 <__reset+0xfa1ea068>
8020aa0c:	05adc83a 	sub	r22,zero,r22
8020aa10:	dd800815 	stw	r22,32(sp)
8020aa14:	002d883a 	mov	r22,zero
8020aa18:	003d8e06 	br	8020a054 <__reset+0xfa1ea054>
8020aa1c:	d9000517 	ldw	r4,20(sp)
8020aa20:	0214f940 	call	80214f94 <__floatsidf>
8020aa24:	100d883a 	mov	r6,r2
8020aa28:	180f883a 	mov	r7,r3
8020aa2c:	a009883a 	mov	r4,r20
8020aa30:	880b883a 	mov	r5,r17
8020aa34:	0213ca80 	call	80213ca8 <__eqdf2>
8020aa38:	103d7126 	beq	r2,zero,8020a000 <__reset+0xfa1ea000>
8020aa3c:	d9c00517 	ldw	r7,20(sp)
8020aa40:	39ffffc4 	addi	r7,r7,-1
8020aa44:	d9c00515 	stw	r7,20(sp)
8020aa48:	003d6d06 	br	8020a000 <__reset+0xfa1ea000>
8020aa4c:	dd400a17 	ldw	r21,40(sp)
8020aa50:	dd000817 	ldw	r20,32(sp)
8020aa54:	0023883a 	mov	r17,zero
8020aa58:	003f4806 	br	8020a77c <__reset+0xfa1ea77c>
8020aa5c:	10e3c83a 	sub	r17,r2,r3
8020aa60:	9448983a 	sll	r4,r18,r17
8020aa64:	003d3206 	br	80209f30 <__reset+0xfa1e9f30>
8020aa68:	d8000e15 	stw	zero,56(sp)
8020aa6c:	003d7506 	br	8020a044 <__reset+0xfa1ea044>
8020aa70:	b005883a 	mov	r2,r22
8020aa74:	003f4506 	br	8020a78c <__reset+0xfa1ea78c>
8020aa78:	dc000915 	stw	r16,36(sp)
8020aa7c:	d9800a17 	ldw	r6,40(sp)
8020aa80:	d9400917 	ldw	r5,36(sp)
8020aa84:	e009883a 	mov	r4,fp
8020aa88:	020d9280 	call	8020d928 <__pow5mult>
8020aa8c:	1021883a 	mov	r16,r2
8020aa90:	003f5a06 	br	8020a7fc <__reset+0xfa1ea7fc>
8020aa94:	01c00044 	movi	r7,1
8020aa98:	d9c00b15 	stw	r7,44(sp)
8020aa9c:	d8802217 	ldw	r2,136(sp)
8020aaa0:	0081280e 	bge	zero,r2,8020af44 <_dtoa_r+0x11b0>
8020aaa4:	100d883a 	mov	r6,r2
8020aaa8:	1021883a 	mov	r16,r2
8020aaac:	d8800c15 	stw	r2,48(sp)
8020aab0:	d8800615 	stw	r2,24(sp)
8020aab4:	003d8806 	br	8020a0d8 <__reset+0xfa1ea0d8>
8020aab8:	d8800617 	ldw	r2,24(sp)
8020aabc:	00be9b16 	blt	zero,r2,8020a52c <__reset+0xfa1ea52c>
8020aac0:	10010f1e 	bne	r2,zero,8020af00 <_dtoa_r+0x116c>
8020aac4:	880b883a 	mov	r5,r17
8020aac8:	000d883a 	mov	r6,zero
8020aacc:	01d00534 	movhi	r7,16404
8020aad0:	8009883a 	mov	r4,r16
8020aad4:	0213f000 	call	80213f00 <__muldf3>
8020aad8:	900d883a 	mov	r6,r18
8020aadc:	980f883a 	mov	r7,r19
8020aae0:	1009883a 	mov	r4,r2
8020aae4:	180b883a 	mov	r5,r3
8020aae8:	0213d300 	call	80213d30 <__gedf2>
8020aaec:	002b883a 	mov	r21,zero
8020aaf0:	0023883a 	mov	r17,zero
8020aaf4:	1000bf16 	blt	r2,zero,8020adf4 <_dtoa_r+0x1060>
8020aaf8:	d9802217 	ldw	r6,136(sp)
8020aafc:	ddc00717 	ldw	r23,28(sp)
8020ab00:	018c303a 	nor	r6,zero,r6
8020ab04:	d9800515 	stw	r6,20(sp)
8020ab08:	a80b883a 	mov	r5,r21
8020ab0c:	e009883a 	mov	r4,fp
8020ab10:	020d3900 	call	8020d390 <_Bfree>
8020ab14:	883e4926 	beq	r17,zero,8020a43c <__reset+0xfa1ea43c>
8020ab18:	003fad06 	br	8020a9d0 <__reset+0xfa1ea9d0>
8020ab1c:	d9c01117 	ldw	r7,68(sp)
8020ab20:	3801bc26 	beq	r7,zero,8020b214 <_dtoa_r+0x1480>
8020ab24:	10810cc4 	addi	r2,r2,1075
8020ab28:	dd400a17 	ldw	r21,40(sp)
8020ab2c:	dd000817 	ldw	r20,32(sp)
8020ab30:	003f0a06 	br	8020a75c <__reset+0xfa1ea75c>
8020ab34:	00800704 	movi	r2,28
8020ab38:	d9000817 	ldw	r4,32(sp)
8020ab3c:	a0a9883a 	add	r20,r20,r2
8020ab40:	b0ad883a 	add	r22,r22,r2
8020ab44:	2089883a 	add	r4,r4,r2
8020ab48:	d9000815 	stw	r4,32(sp)
8020ab4c:	003f5106 	br	8020a894 <__reset+0xfa1ea894>
8020ab50:	d8c00317 	ldw	r3,12(sp)
8020ab54:	b8c1fc0e 	bge	r23,r3,8020b348 <_dtoa_r+0x15b4>
8020ab58:	0027883a 	mov	r19,zero
8020ab5c:	b805883a 	mov	r2,r23
8020ab60:	003f3e06 	br	8020a85c <__reset+0xfa1ea85c>
8020ab64:	880b883a 	mov	r5,r17
8020ab68:	e009883a 	mov	r4,fp
8020ab6c:	000f883a 	mov	r7,zero
8020ab70:	01800284 	movi	r6,10
8020ab74:	020d3b80 	call	8020d3b8 <__multadd>
8020ab78:	d9000c17 	ldw	r4,48(sp)
8020ab7c:	1023883a 	mov	r17,r2
8020ab80:	0102040e 	bge	zero,r4,8020b394 <_dtoa_r+0x1600>
8020ab84:	d9000615 	stw	r4,24(sp)
8020ab88:	0500050e 	bge	zero,r20,8020aba0 <_dtoa_r+0xe0c>
8020ab8c:	880b883a 	mov	r5,r17
8020ab90:	a00d883a 	mov	r6,r20
8020ab94:	e009883a 	mov	r4,fp
8020ab98:	020da680 	call	8020da68 <__lshift>
8020ab9c:	1023883a 	mov	r17,r2
8020aba0:	9801241e 	bne	r19,zero,8020b034 <_dtoa_r+0x12a0>
8020aba4:	8829883a 	mov	r20,r17
8020aba8:	d9000617 	ldw	r4,24(sp)
8020abac:	dcc00717 	ldw	r19,28(sp)
8020abb0:	9480004c 	andi	r18,r18,1
8020abb4:	20bfffc4 	addi	r2,r4,-1
8020abb8:	9885883a 	add	r2,r19,r2
8020abbc:	d8800415 	stw	r2,16(sp)
8020abc0:	dc800615 	stw	r18,24(sp)
8020abc4:	a80b883a 	mov	r5,r21
8020abc8:	8009883a 	mov	r4,r16
8020abcc:	0209b940 	call	80209b94 <quorem>
8020abd0:	880b883a 	mov	r5,r17
8020abd4:	8009883a 	mov	r4,r16
8020abd8:	102f883a 	mov	r23,r2
8020abdc:	020dbb00 	call	8020dbb0 <__mcmp>
8020abe0:	a80b883a 	mov	r5,r21
8020abe4:	a00d883a 	mov	r6,r20
8020abe8:	e009883a 	mov	r4,fp
8020abec:	102d883a 	mov	r22,r2
8020abf0:	020dc100 	call	8020dc10 <__mdiff>
8020abf4:	1007883a 	mov	r3,r2
8020abf8:	10800317 	ldw	r2,12(r2)
8020abfc:	bc800c04 	addi	r18,r23,48
8020ac00:	180b883a 	mov	r5,r3
8020ac04:	10004e1e 	bne	r2,zero,8020ad40 <_dtoa_r+0xfac>
8020ac08:	8009883a 	mov	r4,r16
8020ac0c:	d8c01615 	stw	r3,88(sp)
8020ac10:	020dbb00 	call	8020dbb0 <__mcmp>
8020ac14:	d8c01617 	ldw	r3,88(sp)
8020ac18:	e009883a 	mov	r4,fp
8020ac1c:	d8801615 	stw	r2,88(sp)
8020ac20:	180b883a 	mov	r5,r3
8020ac24:	020d3900 	call	8020d390 <_Bfree>
8020ac28:	d8801617 	ldw	r2,88(sp)
8020ac2c:	1000041e 	bne	r2,zero,8020ac40 <_dtoa_r+0xeac>
8020ac30:	d9800317 	ldw	r6,12(sp)
8020ac34:	3000021e 	bne	r6,zero,8020ac40 <_dtoa_r+0xeac>
8020ac38:	d8c00617 	ldw	r3,24(sp)
8020ac3c:	18003726 	beq	r3,zero,8020ad1c <_dtoa_r+0xf88>
8020ac40:	b0002016 	blt	r22,zero,8020acc4 <_dtoa_r+0xf30>
8020ac44:	b000041e 	bne	r22,zero,8020ac58 <_dtoa_r+0xec4>
8020ac48:	d9000317 	ldw	r4,12(sp)
8020ac4c:	2000021e 	bne	r4,zero,8020ac58 <_dtoa_r+0xec4>
8020ac50:	d8c00617 	ldw	r3,24(sp)
8020ac54:	18001b26 	beq	r3,zero,8020acc4 <_dtoa_r+0xf30>
8020ac58:	00810716 	blt	zero,r2,8020b078 <_dtoa_r+0x12e4>
8020ac5c:	d8c00417 	ldw	r3,16(sp)
8020ac60:	9d800044 	addi	r22,r19,1
8020ac64:	9c800005 	stb	r18,0(r19)
8020ac68:	b02f883a 	mov	r23,r22
8020ac6c:	98c10626 	beq	r19,r3,8020b088 <_dtoa_r+0x12f4>
8020ac70:	800b883a 	mov	r5,r16
8020ac74:	000f883a 	mov	r7,zero
8020ac78:	01800284 	movi	r6,10
8020ac7c:	e009883a 	mov	r4,fp
8020ac80:	020d3b80 	call	8020d3b8 <__multadd>
8020ac84:	1021883a 	mov	r16,r2
8020ac88:	000f883a 	mov	r7,zero
8020ac8c:	01800284 	movi	r6,10
8020ac90:	880b883a 	mov	r5,r17
8020ac94:	e009883a 	mov	r4,fp
8020ac98:	8d002526 	beq	r17,r20,8020ad30 <_dtoa_r+0xf9c>
8020ac9c:	020d3b80 	call	8020d3b8 <__multadd>
8020aca0:	a00b883a 	mov	r5,r20
8020aca4:	000f883a 	mov	r7,zero
8020aca8:	01800284 	movi	r6,10
8020acac:	e009883a 	mov	r4,fp
8020acb0:	1023883a 	mov	r17,r2
8020acb4:	020d3b80 	call	8020d3b8 <__multadd>
8020acb8:	1029883a 	mov	r20,r2
8020acbc:	b027883a 	mov	r19,r22
8020acc0:	003fc006 	br	8020abc4 <__reset+0xfa1eabc4>
8020acc4:	9011883a 	mov	r8,r18
8020acc8:	00800e0e 	bge	zero,r2,8020ad04 <_dtoa_r+0xf70>
8020accc:	800b883a 	mov	r5,r16
8020acd0:	01800044 	movi	r6,1
8020acd4:	e009883a 	mov	r4,fp
8020acd8:	da001715 	stw	r8,92(sp)
8020acdc:	020da680 	call	8020da68 <__lshift>
8020ace0:	a80b883a 	mov	r5,r21
8020ace4:	1009883a 	mov	r4,r2
8020ace8:	1021883a 	mov	r16,r2
8020acec:	020dbb00 	call	8020dbb0 <__mcmp>
8020acf0:	da001717 	ldw	r8,92(sp)
8020acf4:	0081960e 	bge	zero,r2,8020b350 <_dtoa_r+0x15bc>
8020acf8:	00800e44 	movi	r2,57
8020acfc:	40817026 	beq	r8,r2,8020b2c0 <_dtoa_r+0x152c>
8020ad00:	ba000c44 	addi	r8,r23,49
8020ad04:	8825883a 	mov	r18,r17
8020ad08:	9dc00044 	addi	r23,r19,1
8020ad0c:	9a000005 	stb	r8,0(r19)
8020ad10:	a023883a 	mov	r17,r20
8020ad14:	dc000915 	stw	r16,36(sp)
8020ad18:	003f2406 	br	8020a9ac <__reset+0xfa1ea9ac>
8020ad1c:	00800e44 	movi	r2,57
8020ad20:	9011883a 	mov	r8,r18
8020ad24:	90816626 	beq	r18,r2,8020b2c0 <_dtoa_r+0x152c>
8020ad28:	05bff516 	blt	zero,r22,8020ad00 <__reset+0xfa1ead00>
8020ad2c:	003ff506 	br	8020ad04 <__reset+0xfa1ead04>
8020ad30:	020d3b80 	call	8020d3b8 <__multadd>
8020ad34:	1023883a 	mov	r17,r2
8020ad38:	1029883a 	mov	r20,r2
8020ad3c:	003fdf06 	br	8020acbc <__reset+0xfa1eacbc>
8020ad40:	e009883a 	mov	r4,fp
8020ad44:	020d3900 	call	8020d390 <_Bfree>
8020ad48:	00800044 	movi	r2,1
8020ad4c:	003fbc06 	br	8020ac40 <__reset+0xfa1eac40>
8020ad50:	a80b883a 	mov	r5,r21
8020ad54:	8009883a 	mov	r4,r16
8020ad58:	020dbb00 	call	8020dbb0 <__mcmp>
8020ad5c:	103edb0e 	bge	r2,zero,8020a8cc <__reset+0xfa1ea8cc>
8020ad60:	800b883a 	mov	r5,r16
8020ad64:	000f883a 	mov	r7,zero
8020ad68:	01800284 	movi	r6,10
8020ad6c:	e009883a 	mov	r4,fp
8020ad70:	020d3b80 	call	8020d3b8 <__multadd>
8020ad74:	1021883a 	mov	r16,r2
8020ad78:	d8800517 	ldw	r2,20(sp)
8020ad7c:	d8c00b17 	ldw	r3,44(sp)
8020ad80:	10bfffc4 	addi	r2,r2,-1
8020ad84:	d8800515 	stw	r2,20(sp)
8020ad88:	183f761e 	bne	r3,zero,8020ab64 <__reset+0xfa1eab64>
8020ad8c:	d9000c17 	ldw	r4,48(sp)
8020ad90:	0101730e 	bge	zero,r4,8020b360 <_dtoa_r+0x15cc>
8020ad94:	d9000615 	stw	r4,24(sp)
8020ad98:	003ed006 	br	8020a8dc <__reset+0xfa1ea8dc>
8020ad9c:	00800084 	movi	r2,2
8020ada0:	3081861e 	bne	r6,r2,8020b3bc <_dtoa_r+0x1628>
8020ada4:	d8000b15 	stw	zero,44(sp)
8020ada8:	003f3c06 	br	8020aa9c <__reset+0xfa1eaa9c>
8020adac:	dc000917 	ldw	r16,36(sp)
8020adb0:	003e9206 	br	8020a7fc <__reset+0xfa1ea7fc>
8020adb4:	d9c00317 	ldw	r7,12(sp)
8020adb8:	00800084 	movi	r2,2
8020adbc:	11fec50e 	bge	r2,r7,8020a8d4 <__reset+0xfa1ea8d4>
8020adc0:	d9000617 	ldw	r4,24(sp)
8020adc4:	20013c1e 	bne	r4,zero,8020b2b8 <_dtoa_r+0x1524>
8020adc8:	a80b883a 	mov	r5,r21
8020adcc:	000f883a 	mov	r7,zero
8020add0:	01800144 	movi	r6,5
8020add4:	e009883a 	mov	r4,fp
8020add8:	020d3b80 	call	8020d3b8 <__multadd>
8020addc:	100b883a 	mov	r5,r2
8020ade0:	8009883a 	mov	r4,r16
8020ade4:	102b883a 	mov	r21,r2
8020ade8:	020dbb00 	call	8020dbb0 <__mcmp>
8020adec:	dc000915 	stw	r16,36(sp)
8020adf0:	00bf410e 	bge	zero,r2,8020aaf8 <__reset+0xfa1eaaf8>
8020adf4:	d9c00717 	ldw	r7,28(sp)
8020adf8:	00800c44 	movi	r2,49
8020adfc:	38800005 	stb	r2,0(r7)
8020ae00:	d8800517 	ldw	r2,20(sp)
8020ae04:	3dc00044 	addi	r23,r7,1
8020ae08:	10800044 	addi	r2,r2,1
8020ae0c:	d8800515 	stw	r2,20(sp)
8020ae10:	003f3d06 	br	8020ab08 <__reset+0xfa1eab08>
8020ae14:	d9800517 	ldw	r6,20(sp)
8020ae18:	d9c00717 	ldw	r7,28(sp)
8020ae1c:	00800c44 	movi	r2,49
8020ae20:	31800044 	addi	r6,r6,1
8020ae24:	d9800515 	stw	r6,20(sp)
8020ae28:	38800005 	stb	r2,0(r7)
8020ae2c:	003edf06 	br	8020a9ac <__reset+0xfa1ea9ac>
8020ae30:	d8000b15 	stw	zero,44(sp)
8020ae34:	003c9f06 	br	8020a0b4 <__reset+0xfa1ea0b4>
8020ae38:	903e7e1e 	bne	r18,zero,8020a834 <__reset+0xfa1ea834>
8020ae3c:	00800434 	movhi	r2,16
8020ae40:	10bfffc4 	addi	r2,r2,-1
8020ae44:	9884703a 	and	r2,r19,r2
8020ae48:	1000ea1e 	bne	r2,zero,8020b1f4 <_dtoa_r+0x1460>
8020ae4c:	9cdffc2c 	andhi	r19,r19,32752
8020ae50:	9800e826 	beq	r19,zero,8020b1f4 <_dtoa_r+0x1460>
8020ae54:	d9c00817 	ldw	r7,32(sp)
8020ae58:	b5800044 	addi	r22,r22,1
8020ae5c:	04c00044 	movi	r19,1
8020ae60:	39c00044 	addi	r7,r7,1
8020ae64:	d9c00815 	stw	r7,32(sp)
8020ae68:	d8800d17 	ldw	r2,52(sp)
8020ae6c:	103e721e 	bne	r2,zero,8020a838 <__reset+0xfa1ea838>
8020ae70:	00800044 	movi	r2,1
8020ae74:	003e7906 	br	8020a85c <__reset+0xfa1ea85c>
8020ae78:	8009883a 	mov	r4,r16
8020ae7c:	0214f940 	call	80214f94 <__floatsidf>
8020ae80:	d9800f17 	ldw	r6,60(sp)
8020ae84:	d9c01017 	ldw	r7,64(sp)
8020ae88:	1009883a 	mov	r4,r2
8020ae8c:	180b883a 	mov	r5,r3
8020ae90:	0213f000 	call	80213f00 <__muldf3>
8020ae94:	000d883a 	mov	r6,zero
8020ae98:	01d00734 	movhi	r7,16412
8020ae9c:	1009883a 	mov	r4,r2
8020aea0:	180b883a 	mov	r5,r3
8020aea4:	0212b140 	call	80212b14 <__adddf3>
8020aea8:	047f3034 	movhi	r17,64704
8020aeac:	1021883a 	mov	r16,r2
8020aeb0:	1c63883a 	add	r17,r3,r17
8020aeb4:	d9000f17 	ldw	r4,60(sp)
8020aeb8:	d9401017 	ldw	r5,64(sp)
8020aebc:	000d883a 	mov	r6,zero
8020aec0:	01d00534 	movhi	r7,16404
8020aec4:	02146180 	call	80214618 <__subdf3>
8020aec8:	800d883a 	mov	r6,r16
8020aecc:	880f883a 	mov	r7,r17
8020aed0:	1009883a 	mov	r4,r2
8020aed4:	180b883a 	mov	r5,r3
8020aed8:	102b883a 	mov	r21,r2
8020aedc:	1829883a 	mov	r20,r3
8020aee0:	0213d300 	call	80213d30 <__gedf2>
8020aee4:	00806c16 	blt	zero,r2,8020b098 <_dtoa_r+0x1304>
8020aee8:	89e0003c 	xorhi	r7,r17,32768
8020aeec:	800d883a 	mov	r6,r16
8020aef0:	a809883a 	mov	r4,r21
8020aef4:	a00b883a 	mov	r5,r20
8020aef8:	0213e0c0 	call	80213e0c <__ledf2>
8020aefc:	103d7e0e 	bge	r2,zero,8020a4f8 <__reset+0xfa1ea4f8>
8020af00:	002b883a 	mov	r21,zero
8020af04:	0023883a 	mov	r17,zero
8020af08:	003efb06 	br	8020aaf8 <__reset+0xfa1eaaf8>
8020af0c:	d8800717 	ldw	r2,28(sp)
8020af10:	003bd006 	br	80209e54 <__reset+0xfa1e9e54>
8020af14:	d9000a17 	ldw	r4,40(sp)
8020af18:	d9800d17 	ldw	r6,52(sp)
8020af1c:	dd400a15 	stw	r21,40(sp)
8020af20:	a905c83a 	sub	r2,r21,r4
8020af24:	308d883a 	add	r6,r6,r2
8020af28:	d9800d15 	stw	r6,52(sp)
8020af2c:	002b883a 	mov	r21,zero
8020af30:	003e0606 	br	8020a74c <__reset+0xfa1ea74c>
8020af34:	9023883a 	mov	r17,r18
8020af38:	9829883a 	mov	r20,r19
8020af3c:	04000084 	movi	r16,2
8020af40:	003c9206 	br	8020a18c <__reset+0xfa1ea18c>
8020af44:	04000044 	movi	r16,1
8020af48:	dc000c15 	stw	r16,48(sp)
8020af4c:	dc000615 	stw	r16,24(sp)
8020af50:	dc002215 	stw	r16,136(sp)
8020af54:	e0001115 	stw	zero,68(fp)
8020af58:	000b883a 	mov	r5,zero
8020af5c:	003c6906 	br	8020a104 <__reset+0xfa1ea104>
8020af60:	3021883a 	mov	r16,r6
8020af64:	003ffb06 	br	8020af54 <__reset+0xfa1eaf54>
8020af68:	1000021e 	bne	r2,zero,8020af74 <_dtoa_r+0x11e0>
8020af6c:	4200004c 	andi	r8,r8,1
8020af70:	403e7d1e 	bne	r8,zero,8020a968 <__reset+0xfa1ea968>
8020af74:	01000c04 	movi	r4,48
8020af78:	00000106 	br	8020af80 <_dtoa_r+0x11ec>
8020af7c:	102f883a 	mov	r23,r2
8020af80:	b8bfffc4 	addi	r2,r23,-1
8020af84:	10c00007 	ldb	r3,0(r2)
8020af88:	193ffc26 	beq	r3,r4,8020af7c <__reset+0xfa1eaf7c>
8020af8c:	003e8706 	br	8020a9ac <__reset+0xfa1ea9ac>
8020af90:	d8800517 	ldw	r2,20(sp)
8020af94:	00a3c83a 	sub	r17,zero,r2
8020af98:	8800a426 	beq	r17,zero,8020b22c <_dtoa_r+0x1498>
8020af9c:	888003cc 	andi	r2,r17,15
8020afa0:	100490fa 	slli	r2,r2,3
8020afa4:	00e008b4 	movhi	r3,32802
8020afa8:	18ecfd04 	addi	r3,r3,-19468
8020afac:	1885883a 	add	r2,r3,r2
8020afb0:	11800017 	ldw	r6,0(r2)
8020afb4:	11c00117 	ldw	r7,4(r2)
8020afb8:	9009883a 	mov	r4,r18
8020afbc:	980b883a 	mov	r5,r19
8020afc0:	8823d13a 	srai	r17,r17,4
8020afc4:	0213f000 	call	80213f00 <__muldf3>
8020afc8:	d8800f15 	stw	r2,60(sp)
8020afcc:	d8c01015 	stw	r3,64(sp)
8020afd0:	8800e826 	beq	r17,zero,8020b374 <_dtoa_r+0x15e0>
8020afd4:	052008b4 	movhi	r20,32802
8020afd8:	a52cf304 	addi	r20,r20,-19508
8020afdc:	04000084 	movi	r16,2
8020afe0:	8980004c 	andi	r6,r17,1
8020afe4:	1009883a 	mov	r4,r2
8020afe8:	8823d07a 	srai	r17,r17,1
8020afec:	180b883a 	mov	r5,r3
8020aff0:	30000426 	beq	r6,zero,8020b004 <_dtoa_r+0x1270>
8020aff4:	a1800017 	ldw	r6,0(r20)
8020aff8:	a1c00117 	ldw	r7,4(r20)
8020affc:	84000044 	addi	r16,r16,1
8020b000:	0213f000 	call	80213f00 <__muldf3>
8020b004:	a5000204 	addi	r20,r20,8
8020b008:	883ff51e 	bne	r17,zero,8020afe0 <__reset+0xfa1eafe0>
8020b00c:	d8800f15 	stw	r2,60(sp)
8020b010:	d8c01015 	stw	r3,64(sp)
8020b014:	003c7606 	br	8020a1f0 <__reset+0xfa1ea1f0>
8020b018:	00c00c04 	movi	r3,48
8020b01c:	10c00005 	stb	r3,0(r2)
8020b020:	d8c00517 	ldw	r3,20(sp)
8020b024:	bd3fffc3 	ldbu	r20,-1(r23)
8020b028:	18c00044 	addi	r3,r3,1
8020b02c:	d8c00515 	stw	r3,20(sp)
8020b030:	003db906 	br	8020a718 <__reset+0xfa1ea718>
8020b034:	89400117 	ldw	r5,4(r17)
8020b038:	e009883a 	mov	r4,fp
8020b03c:	020d2e80 	call	8020d2e8 <_Balloc>
8020b040:	89800417 	ldw	r6,16(r17)
8020b044:	89400304 	addi	r5,r17,12
8020b048:	11000304 	addi	r4,r2,12
8020b04c:	31800084 	addi	r6,r6,2
8020b050:	318d883a 	add	r6,r6,r6
8020b054:	318d883a 	add	r6,r6,r6
8020b058:	1027883a 	mov	r19,r2
8020b05c:	02051b40 	call	802051b4 <memcpy>
8020b060:	01800044 	movi	r6,1
8020b064:	980b883a 	mov	r5,r19
8020b068:	e009883a 	mov	r4,fp
8020b06c:	020da680 	call	8020da68 <__lshift>
8020b070:	1029883a 	mov	r20,r2
8020b074:	003ecc06 	br	8020aba8 <__reset+0xfa1eaba8>
8020b078:	00800e44 	movi	r2,57
8020b07c:	90809026 	beq	r18,r2,8020b2c0 <_dtoa_r+0x152c>
8020b080:	92000044 	addi	r8,r18,1
8020b084:	003f1f06 	br	8020ad04 <__reset+0xfa1ead04>
8020b088:	9011883a 	mov	r8,r18
8020b08c:	8825883a 	mov	r18,r17
8020b090:	a023883a 	mov	r17,r20
8020b094:	003e2906 	br	8020a93c <__reset+0xfa1ea93c>
8020b098:	002b883a 	mov	r21,zero
8020b09c:	0023883a 	mov	r17,zero
8020b0a0:	003f5406 	br	8020adf4 <__reset+0xfa1eadf4>
8020b0a4:	61bfffc4 	addi	r6,r12,-1
8020b0a8:	300490fa 	slli	r2,r6,3
8020b0ac:	00e008b4 	movhi	r3,32802
8020b0b0:	18ecfd04 	addi	r3,r3,-19468
8020b0b4:	1885883a 	add	r2,r3,r2
8020b0b8:	11000017 	ldw	r4,0(r2)
8020b0bc:	11400117 	ldw	r5,4(r2)
8020b0c0:	d8800717 	ldw	r2,28(sp)
8020b0c4:	880f883a 	mov	r7,r17
8020b0c8:	d9801215 	stw	r6,72(sp)
8020b0cc:	800d883a 	mov	r6,r16
8020b0d0:	db001615 	stw	r12,88(sp)
8020b0d4:	15c00044 	addi	r23,r2,1
8020b0d8:	0213f000 	call	80213f00 <__muldf3>
8020b0dc:	d9401017 	ldw	r5,64(sp)
8020b0e0:	d9000f17 	ldw	r4,60(sp)
8020b0e4:	d8c01515 	stw	r3,84(sp)
8020b0e8:	d8801415 	stw	r2,80(sp)
8020b0ec:	0214f140 	call	80214f14 <__fixdfsi>
8020b0f0:	1009883a 	mov	r4,r2
8020b0f4:	1021883a 	mov	r16,r2
8020b0f8:	0214f940 	call	80214f94 <__floatsidf>
8020b0fc:	d9000f17 	ldw	r4,60(sp)
8020b100:	d9401017 	ldw	r5,64(sp)
8020b104:	100d883a 	mov	r6,r2
8020b108:	180f883a 	mov	r7,r3
8020b10c:	02146180 	call	80214618 <__subdf3>
8020b110:	1829883a 	mov	r20,r3
8020b114:	d8c00717 	ldw	r3,28(sp)
8020b118:	84000c04 	addi	r16,r16,48
8020b11c:	1023883a 	mov	r17,r2
8020b120:	1c000005 	stb	r16,0(r3)
8020b124:	db001617 	ldw	r12,88(sp)
8020b128:	00800044 	movi	r2,1
8020b12c:	60802226 	beq	r12,r2,8020b1b8 <_dtoa_r+0x1424>
8020b130:	d9c00717 	ldw	r7,28(sp)
8020b134:	8805883a 	mov	r2,r17
8020b138:	b82b883a 	mov	r21,r23
8020b13c:	3b19883a 	add	r12,r7,r12
8020b140:	6023883a 	mov	r17,r12
8020b144:	a007883a 	mov	r3,r20
8020b148:	dc800f15 	stw	r18,60(sp)
8020b14c:	000d883a 	mov	r6,zero
8020b150:	01d00934 	movhi	r7,16420
8020b154:	1009883a 	mov	r4,r2
8020b158:	180b883a 	mov	r5,r3
8020b15c:	0213f000 	call	80213f00 <__muldf3>
8020b160:	180b883a 	mov	r5,r3
8020b164:	1009883a 	mov	r4,r2
8020b168:	1829883a 	mov	r20,r3
8020b16c:	1025883a 	mov	r18,r2
8020b170:	0214f140 	call	80214f14 <__fixdfsi>
8020b174:	1009883a 	mov	r4,r2
8020b178:	1021883a 	mov	r16,r2
8020b17c:	0214f940 	call	80214f94 <__floatsidf>
8020b180:	100d883a 	mov	r6,r2
8020b184:	180f883a 	mov	r7,r3
8020b188:	9009883a 	mov	r4,r18
8020b18c:	a00b883a 	mov	r5,r20
8020b190:	84000c04 	addi	r16,r16,48
8020b194:	02146180 	call	80214618 <__subdf3>
8020b198:	ad400044 	addi	r21,r21,1
8020b19c:	ac3fffc5 	stb	r16,-1(r21)
8020b1a0:	ac7fea1e 	bne	r21,r17,8020b14c <__reset+0xfa1eb14c>
8020b1a4:	1023883a 	mov	r17,r2
8020b1a8:	d8801217 	ldw	r2,72(sp)
8020b1ac:	dc800f17 	ldw	r18,60(sp)
8020b1b0:	1829883a 	mov	r20,r3
8020b1b4:	b8af883a 	add	r23,r23,r2
8020b1b8:	d9001417 	ldw	r4,80(sp)
8020b1bc:	d9401517 	ldw	r5,84(sp)
8020b1c0:	000d883a 	mov	r6,zero
8020b1c4:	01cff834 	movhi	r7,16352
8020b1c8:	0212b140 	call	80212b14 <__adddf3>
8020b1cc:	880d883a 	mov	r6,r17
8020b1d0:	a00f883a 	mov	r7,r20
8020b1d4:	1009883a 	mov	r4,r2
8020b1d8:	180b883a 	mov	r5,r3
8020b1dc:	0213e0c0 	call	80213e0c <__ledf2>
8020b1e0:	10003e0e 	bge	r2,zero,8020b2dc <_dtoa_r+0x1548>
8020b1e4:	d9001317 	ldw	r4,76(sp)
8020b1e8:	bd3fffc3 	ldbu	r20,-1(r23)
8020b1ec:	d9000515 	stw	r4,20(sp)
8020b1f0:	003d3b06 	br	8020a6e0 <__reset+0xfa1ea6e0>
8020b1f4:	0027883a 	mov	r19,zero
8020b1f8:	003f1b06 	br	8020ae68 <__reset+0xfa1eae68>
8020b1fc:	d8800817 	ldw	r2,32(sp)
8020b200:	11e9c83a 	sub	r20,r2,r7
8020b204:	0005883a 	mov	r2,zero
8020b208:	003d5406 	br	8020a75c <__reset+0xfa1ea75c>
8020b20c:	00800044 	movi	r2,1
8020b210:	003dc706 	br	8020a930 <__reset+0xfa1ea930>
8020b214:	d8c00217 	ldw	r3,8(sp)
8020b218:	00800d84 	movi	r2,54
8020b21c:	dd400a17 	ldw	r21,40(sp)
8020b220:	10c5c83a 	sub	r2,r2,r3
8020b224:	dd000817 	ldw	r20,32(sp)
8020b228:	003d4c06 	br	8020a75c <__reset+0xfa1ea75c>
8020b22c:	dc800f15 	stw	r18,60(sp)
8020b230:	dcc01015 	stw	r19,64(sp)
8020b234:	04000084 	movi	r16,2
8020b238:	003bed06 	br	8020a1f0 <__reset+0xfa1ea1f0>
8020b23c:	d9000617 	ldw	r4,24(sp)
8020b240:	203f0d26 	beq	r4,zero,8020ae78 <__reset+0xfa1eae78>
8020b244:	d9800c17 	ldw	r6,48(sp)
8020b248:	01bcab0e 	bge	zero,r6,8020a4f8 <__reset+0xfa1ea4f8>
8020b24c:	d9401017 	ldw	r5,64(sp)
8020b250:	d9000f17 	ldw	r4,60(sp)
8020b254:	000d883a 	mov	r6,zero
8020b258:	01d00934 	movhi	r7,16420
8020b25c:	0213f000 	call	80213f00 <__muldf3>
8020b260:	81000044 	addi	r4,r16,1
8020b264:	d8800f15 	stw	r2,60(sp)
8020b268:	d8c01015 	stw	r3,64(sp)
8020b26c:	0214f940 	call	80214f94 <__floatsidf>
8020b270:	d9800f17 	ldw	r6,60(sp)
8020b274:	d9c01017 	ldw	r7,64(sp)
8020b278:	1009883a 	mov	r4,r2
8020b27c:	180b883a 	mov	r5,r3
8020b280:	0213f000 	call	80213f00 <__muldf3>
8020b284:	01d00734 	movhi	r7,16412
8020b288:	000d883a 	mov	r6,zero
8020b28c:	1009883a 	mov	r4,r2
8020b290:	180b883a 	mov	r5,r3
8020b294:	0212b140 	call	80212b14 <__adddf3>
8020b298:	d9c00517 	ldw	r7,20(sp)
8020b29c:	047f3034 	movhi	r17,64704
8020b2a0:	1021883a 	mov	r16,r2
8020b2a4:	39ffffc4 	addi	r7,r7,-1
8020b2a8:	d9c01315 	stw	r7,76(sp)
8020b2ac:	1c63883a 	add	r17,r3,r17
8020b2b0:	db000c17 	ldw	r12,48(sp)
8020b2b4:	003bea06 	br	8020a260 <__reset+0xfa1ea260>
8020b2b8:	dc000915 	stw	r16,36(sp)
8020b2bc:	003e0e06 	br	8020aaf8 <__reset+0xfa1eaaf8>
8020b2c0:	01000e44 	movi	r4,57
8020b2c4:	8825883a 	mov	r18,r17
8020b2c8:	9dc00044 	addi	r23,r19,1
8020b2cc:	99000005 	stb	r4,0(r19)
8020b2d0:	a023883a 	mov	r17,r20
8020b2d4:	dc000915 	stw	r16,36(sp)
8020b2d8:	003da406 	br	8020a96c <__reset+0xfa1ea96c>
8020b2dc:	d9801417 	ldw	r6,80(sp)
8020b2e0:	d9c01517 	ldw	r7,84(sp)
8020b2e4:	0009883a 	mov	r4,zero
8020b2e8:	014ff834 	movhi	r5,16352
8020b2ec:	02146180 	call	80214618 <__subdf3>
8020b2f0:	880d883a 	mov	r6,r17
8020b2f4:	a00f883a 	mov	r7,r20
8020b2f8:	1009883a 	mov	r4,r2
8020b2fc:	180b883a 	mov	r5,r3
8020b300:	0213d300 	call	80213d30 <__gedf2>
8020b304:	00bc7c0e 	bge	zero,r2,8020a4f8 <__reset+0xfa1ea4f8>
8020b308:	01000c04 	movi	r4,48
8020b30c:	00000106 	br	8020b314 <_dtoa_r+0x1580>
8020b310:	102f883a 	mov	r23,r2
8020b314:	b8bfffc4 	addi	r2,r23,-1
8020b318:	10c00007 	ldb	r3,0(r2)
8020b31c:	193ffc26 	beq	r3,r4,8020b310 <__reset+0xfa1eb310>
8020b320:	d9801317 	ldw	r6,76(sp)
8020b324:	d9800515 	stw	r6,20(sp)
8020b328:	003c4406 	br	8020a43c <__reset+0xfa1ea43c>
8020b32c:	d9801317 	ldw	r6,76(sp)
8020b330:	d9800515 	stw	r6,20(sp)
8020b334:	003cea06 	br	8020a6e0 <__reset+0xfa1ea6e0>
8020b338:	dd800f17 	ldw	r22,60(sp)
8020b33c:	dcc01017 	ldw	r19,64(sp)
8020b340:	dc801217 	ldw	r18,72(sp)
8020b344:	003c6c06 	br	8020a4f8 <__reset+0xfa1ea4f8>
8020b348:	903e031e 	bne	r18,zero,8020ab58 <__reset+0xfa1eab58>
8020b34c:	003ebb06 	br	8020ae3c <__reset+0xfa1eae3c>
8020b350:	103e6c1e 	bne	r2,zero,8020ad04 <__reset+0xfa1ead04>
8020b354:	4080004c 	andi	r2,r8,1
8020b358:	103e6a26 	beq	r2,zero,8020ad04 <__reset+0xfa1ead04>
8020b35c:	003e6606 	br	8020acf8 <__reset+0xfa1eacf8>
8020b360:	d8c00317 	ldw	r3,12(sp)
8020b364:	00800084 	movi	r2,2
8020b368:	10c02916 	blt	r2,r3,8020b410 <_dtoa_r+0x167c>
8020b36c:	d9000c17 	ldw	r4,48(sp)
8020b370:	003e8806 	br	8020ad94 <__reset+0xfa1ead94>
8020b374:	04000084 	movi	r16,2
8020b378:	003b9d06 	br	8020a1f0 <__reset+0xfa1ea1f0>
8020b37c:	d9001317 	ldw	r4,76(sp)
8020b380:	d9000515 	stw	r4,20(sp)
8020b384:	003cd606 	br	8020a6e0 <__reset+0xfa1ea6e0>
8020b388:	d8801317 	ldw	r2,76(sp)
8020b38c:	d8800515 	stw	r2,20(sp)
8020b390:	003c2a06 	br	8020a43c <__reset+0xfa1ea43c>
8020b394:	d9800317 	ldw	r6,12(sp)
8020b398:	00800084 	movi	r2,2
8020b39c:	11801516 	blt	r2,r6,8020b3f4 <_dtoa_r+0x1660>
8020b3a0:	d9c00c17 	ldw	r7,48(sp)
8020b3a4:	d9c00615 	stw	r7,24(sp)
8020b3a8:	003df706 	br	8020ab88 <__reset+0xfa1eab88>
8020b3ac:	193d3926 	beq	r3,r4,8020a894 <__reset+0xfa1ea894>
8020b3b0:	00c00f04 	movi	r3,60
8020b3b4:	1885c83a 	sub	r2,r3,r2
8020b3b8:	003ddf06 	br	8020ab38 <__reset+0xfa1eab38>
8020b3bc:	e009883a 	mov	r4,fp
8020b3c0:	e0001115 	stw	zero,68(fp)
8020b3c4:	000b883a 	mov	r5,zero
8020b3c8:	020d2e80 	call	8020d2e8 <_Balloc>
8020b3cc:	d8800715 	stw	r2,28(sp)
8020b3d0:	d8c00717 	ldw	r3,28(sp)
8020b3d4:	00bfffc4 	movi	r2,-1
8020b3d8:	01000044 	movi	r4,1
8020b3dc:	d8800c15 	stw	r2,48(sp)
8020b3e0:	e0c01015 	stw	r3,64(fp)
8020b3e4:	d9000b15 	stw	r4,44(sp)
8020b3e8:	d8800615 	stw	r2,24(sp)
8020b3ec:	d8002215 	stw	zero,136(sp)
8020b3f0:	003c4106 	br	8020a4f8 <__reset+0xfa1ea4f8>
8020b3f4:	d8c00c17 	ldw	r3,48(sp)
8020b3f8:	d8c00615 	stw	r3,24(sp)
8020b3fc:	003e7006 	br	8020adc0 <__reset+0xfa1eadc0>
8020b400:	04400044 	movi	r17,1
8020b404:	003b2006 	br	8020a088 <__reset+0xfa1ea088>
8020b408:	000b883a 	mov	r5,zero
8020b40c:	003b3d06 	br	8020a104 <__reset+0xfa1ea104>
8020b410:	d8800c17 	ldw	r2,48(sp)
8020b414:	d8800615 	stw	r2,24(sp)
8020b418:	003e6906 	br	8020adc0 <__reset+0xfa1eadc0>

8020b41c <__sflush_r>:
8020b41c:	2880030b 	ldhu	r2,12(r5)
8020b420:	defffb04 	addi	sp,sp,-20
8020b424:	dcc00315 	stw	r19,12(sp)
8020b428:	dc400115 	stw	r17,4(sp)
8020b42c:	dfc00415 	stw	ra,16(sp)
8020b430:	dc800215 	stw	r18,8(sp)
8020b434:	dc000015 	stw	r16,0(sp)
8020b438:	10c0020c 	andi	r3,r2,8
8020b43c:	2823883a 	mov	r17,r5
8020b440:	2027883a 	mov	r19,r4
8020b444:	1800311e 	bne	r3,zero,8020b50c <__sflush_r+0xf0>
8020b448:	28c00117 	ldw	r3,4(r5)
8020b44c:	10820014 	ori	r2,r2,2048
8020b450:	2880030d 	sth	r2,12(r5)
8020b454:	00c04b0e 	bge	zero,r3,8020b584 <__sflush_r+0x168>
8020b458:	8a000a17 	ldw	r8,40(r17)
8020b45c:	40002326 	beq	r8,zero,8020b4ec <__sflush_r+0xd0>
8020b460:	9c000017 	ldw	r16,0(r19)
8020b464:	10c4000c 	andi	r3,r2,4096
8020b468:	98000015 	stw	zero,0(r19)
8020b46c:	18004826 	beq	r3,zero,8020b590 <__sflush_r+0x174>
8020b470:	89801417 	ldw	r6,80(r17)
8020b474:	10c0010c 	andi	r3,r2,4
8020b478:	18000626 	beq	r3,zero,8020b494 <__sflush_r+0x78>
8020b47c:	88c00117 	ldw	r3,4(r17)
8020b480:	88800c17 	ldw	r2,48(r17)
8020b484:	30cdc83a 	sub	r6,r6,r3
8020b488:	10000226 	beq	r2,zero,8020b494 <__sflush_r+0x78>
8020b48c:	88800f17 	ldw	r2,60(r17)
8020b490:	308dc83a 	sub	r6,r6,r2
8020b494:	89400717 	ldw	r5,28(r17)
8020b498:	000f883a 	mov	r7,zero
8020b49c:	9809883a 	mov	r4,r19
8020b4a0:	403ee83a 	callr	r8
8020b4a4:	00ffffc4 	movi	r3,-1
8020b4a8:	10c04426 	beq	r2,r3,8020b5bc <__sflush_r+0x1a0>
8020b4ac:	88c0030b 	ldhu	r3,12(r17)
8020b4b0:	89000417 	ldw	r4,16(r17)
8020b4b4:	88000115 	stw	zero,4(r17)
8020b4b8:	197dffcc 	andi	r5,r3,63487
8020b4bc:	8940030d 	sth	r5,12(r17)
8020b4c0:	89000015 	stw	r4,0(r17)
8020b4c4:	18c4000c 	andi	r3,r3,4096
8020b4c8:	18002c1e 	bne	r3,zero,8020b57c <__sflush_r+0x160>
8020b4cc:	89400c17 	ldw	r5,48(r17)
8020b4d0:	9c000015 	stw	r16,0(r19)
8020b4d4:	28000526 	beq	r5,zero,8020b4ec <__sflush_r+0xd0>
8020b4d8:	88801004 	addi	r2,r17,64
8020b4dc:	28800226 	beq	r5,r2,8020b4e8 <__sflush_r+0xcc>
8020b4e0:	9809883a 	mov	r4,r19
8020b4e4:	020bb880 	call	8020bb88 <_free_r>
8020b4e8:	88000c15 	stw	zero,48(r17)
8020b4ec:	0005883a 	mov	r2,zero
8020b4f0:	dfc00417 	ldw	ra,16(sp)
8020b4f4:	dcc00317 	ldw	r19,12(sp)
8020b4f8:	dc800217 	ldw	r18,8(sp)
8020b4fc:	dc400117 	ldw	r17,4(sp)
8020b500:	dc000017 	ldw	r16,0(sp)
8020b504:	dec00504 	addi	sp,sp,20
8020b508:	f800283a 	ret
8020b50c:	2c800417 	ldw	r18,16(r5)
8020b510:	903ff626 	beq	r18,zero,8020b4ec <__reset+0xfa1eb4ec>
8020b514:	2c000017 	ldw	r16,0(r5)
8020b518:	108000cc 	andi	r2,r2,3
8020b51c:	2c800015 	stw	r18,0(r5)
8020b520:	84a1c83a 	sub	r16,r16,r18
8020b524:	1000131e 	bne	r2,zero,8020b574 <__sflush_r+0x158>
8020b528:	28800517 	ldw	r2,20(r5)
8020b52c:	88800215 	stw	r2,8(r17)
8020b530:	04000316 	blt	zero,r16,8020b540 <__sflush_r+0x124>
8020b534:	003fed06 	br	8020b4ec <__reset+0xfa1eb4ec>
8020b538:	90a5883a 	add	r18,r18,r2
8020b53c:	043feb0e 	bge	zero,r16,8020b4ec <__reset+0xfa1eb4ec>
8020b540:	88800917 	ldw	r2,36(r17)
8020b544:	89400717 	ldw	r5,28(r17)
8020b548:	800f883a 	mov	r7,r16
8020b54c:	900d883a 	mov	r6,r18
8020b550:	9809883a 	mov	r4,r19
8020b554:	103ee83a 	callr	r2
8020b558:	80a1c83a 	sub	r16,r16,r2
8020b55c:	00bff616 	blt	zero,r2,8020b538 <__reset+0xfa1eb538>
8020b560:	88c0030b 	ldhu	r3,12(r17)
8020b564:	00bfffc4 	movi	r2,-1
8020b568:	18c01014 	ori	r3,r3,64
8020b56c:	88c0030d 	sth	r3,12(r17)
8020b570:	003fdf06 	br	8020b4f0 <__reset+0xfa1eb4f0>
8020b574:	0005883a 	mov	r2,zero
8020b578:	003fec06 	br	8020b52c <__reset+0xfa1eb52c>
8020b57c:	88801415 	stw	r2,80(r17)
8020b580:	003fd206 	br	8020b4cc <__reset+0xfa1eb4cc>
8020b584:	28c00f17 	ldw	r3,60(r5)
8020b588:	00ffb316 	blt	zero,r3,8020b458 <__reset+0xfa1eb458>
8020b58c:	003fd706 	br	8020b4ec <__reset+0xfa1eb4ec>
8020b590:	89400717 	ldw	r5,28(r17)
8020b594:	000d883a 	mov	r6,zero
8020b598:	01c00044 	movi	r7,1
8020b59c:	9809883a 	mov	r4,r19
8020b5a0:	403ee83a 	callr	r8
8020b5a4:	100d883a 	mov	r6,r2
8020b5a8:	00bfffc4 	movi	r2,-1
8020b5ac:	30801426 	beq	r6,r2,8020b600 <__sflush_r+0x1e4>
8020b5b0:	8880030b 	ldhu	r2,12(r17)
8020b5b4:	8a000a17 	ldw	r8,40(r17)
8020b5b8:	003fae06 	br	8020b474 <__reset+0xfa1eb474>
8020b5bc:	98c00017 	ldw	r3,0(r19)
8020b5c0:	183fba26 	beq	r3,zero,8020b4ac <__reset+0xfa1eb4ac>
8020b5c4:	01000744 	movi	r4,29
8020b5c8:	19000626 	beq	r3,r4,8020b5e4 <__sflush_r+0x1c8>
8020b5cc:	01000584 	movi	r4,22
8020b5d0:	19000426 	beq	r3,r4,8020b5e4 <__sflush_r+0x1c8>
8020b5d4:	88c0030b 	ldhu	r3,12(r17)
8020b5d8:	18c01014 	ori	r3,r3,64
8020b5dc:	88c0030d 	sth	r3,12(r17)
8020b5e0:	003fc306 	br	8020b4f0 <__reset+0xfa1eb4f0>
8020b5e4:	8880030b 	ldhu	r2,12(r17)
8020b5e8:	88c00417 	ldw	r3,16(r17)
8020b5ec:	88000115 	stw	zero,4(r17)
8020b5f0:	10bdffcc 	andi	r2,r2,63487
8020b5f4:	8880030d 	sth	r2,12(r17)
8020b5f8:	88c00015 	stw	r3,0(r17)
8020b5fc:	003fb306 	br	8020b4cc <__reset+0xfa1eb4cc>
8020b600:	98800017 	ldw	r2,0(r19)
8020b604:	103fea26 	beq	r2,zero,8020b5b0 <__reset+0xfa1eb5b0>
8020b608:	00c00744 	movi	r3,29
8020b60c:	10c00226 	beq	r2,r3,8020b618 <__sflush_r+0x1fc>
8020b610:	00c00584 	movi	r3,22
8020b614:	10c0031e 	bne	r2,r3,8020b624 <__sflush_r+0x208>
8020b618:	9c000015 	stw	r16,0(r19)
8020b61c:	0005883a 	mov	r2,zero
8020b620:	003fb306 	br	8020b4f0 <__reset+0xfa1eb4f0>
8020b624:	88c0030b 	ldhu	r3,12(r17)
8020b628:	3005883a 	mov	r2,r6
8020b62c:	18c01014 	ori	r3,r3,64
8020b630:	88c0030d 	sth	r3,12(r17)
8020b634:	003fae06 	br	8020b4f0 <__reset+0xfa1eb4f0>

8020b638 <_fflush_r>:
8020b638:	defffd04 	addi	sp,sp,-12
8020b63c:	dc000115 	stw	r16,4(sp)
8020b640:	dfc00215 	stw	ra,8(sp)
8020b644:	2021883a 	mov	r16,r4
8020b648:	20000226 	beq	r4,zero,8020b654 <_fflush_r+0x1c>
8020b64c:	20800e17 	ldw	r2,56(r4)
8020b650:	10000c26 	beq	r2,zero,8020b684 <_fflush_r+0x4c>
8020b654:	2880030f 	ldh	r2,12(r5)
8020b658:	1000051e 	bne	r2,zero,8020b670 <_fflush_r+0x38>
8020b65c:	0005883a 	mov	r2,zero
8020b660:	dfc00217 	ldw	ra,8(sp)
8020b664:	dc000117 	ldw	r16,4(sp)
8020b668:	dec00304 	addi	sp,sp,12
8020b66c:	f800283a 	ret
8020b670:	8009883a 	mov	r4,r16
8020b674:	dfc00217 	ldw	ra,8(sp)
8020b678:	dc000117 	ldw	r16,4(sp)
8020b67c:	dec00304 	addi	sp,sp,12
8020b680:	020b41c1 	jmpi	8020b41c <__sflush_r>
8020b684:	d9400015 	stw	r5,0(sp)
8020b688:	020ba140 	call	8020ba14 <__sinit>
8020b68c:	d9400017 	ldw	r5,0(sp)
8020b690:	003ff006 	br	8020b654 <__reset+0xfa1eb654>

8020b694 <fflush>:
8020b694:	20000526 	beq	r4,zero,8020b6ac <fflush+0x18>
8020b698:	00a008b4 	movhi	r2,32802
8020b69c:	10b50504 	addi	r2,r2,-11244
8020b6a0:	200b883a 	mov	r5,r4
8020b6a4:	11000017 	ldw	r4,0(r2)
8020b6a8:	020b6381 	jmpi	8020b638 <_fflush_r>
8020b6ac:	00a008b4 	movhi	r2,32802
8020b6b0:	10b50404 	addi	r2,r2,-11248
8020b6b4:	11000017 	ldw	r4,0(r2)
8020b6b8:	01600874 	movhi	r5,32801
8020b6bc:	296d8e04 	addi	r5,r5,-18888
8020b6c0:	020c4181 	jmpi	8020c418 <_fwalk_reent>

8020b6c4 <__fp_unlock>:
8020b6c4:	0005883a 	mov	r2,zero
8020b6c8:	f800283a 	ret

8020b6cc <_cleanup_r>:
8020b6cc:	01600874 	movhi	r5,32801
8020b6d0:	2945bd04 	addi	r5,r5,5876
8020b6d4:	020c4181 	jmpi	8020c418 <_fwalk_reent>

8020b6d8 <__sinit.part.1>:
8020b6d8:	defff704 	addi	sp,sp,-36
8020b6dc:	00e00874 	movhi	r3,32801
8020b6e0:	dfc00815 	stw	ra,32(sp)
8020b6e4:	ddc00715 	stw	r23,28(sp)
8020b6e8:	dd800615 	stw	r22,24(sp)
8020b6ec:	dd400515 	stw	r21,20(sp)
8020b6f0:	dd000415 	stw	r20,16(sp)
8020b6f4:	dcc00315 	stw	r19,12(sp)
8020b6f8:	dc800215 	stw	r18,8(sp)
8020b6fc:	dc400115 	stw	r17,4(sp)
8020b700:	dc000015 	stw	r16,0(sp)
8020b704:	18edb304 	addi	r3,r3,-18740
8020b708:	24000117 	ldw	r16,4(r4)
8020b70c:	20c00f15 	stw	r3,60(r4)
8020b710:	2080bb04 	addi	r2,r4,748
8020b714:	00c000c4 	movi	r3,3
8020b718:	20c0b915 	stw	r3,740(r4)
8020b71c:	2080ba15 	stw	r2,744(r4)
8020b720:	2000b815 	stw	zero,736(r4)
8020b724:	05c00204 	movi	r23,8
8020b728:	00800104 	movi	r2,4
8020b72c:	2025883a 	mov	r18,r4
8020b730:	b80d883a 	mov	r6,r23
8020b734:	81001704 	addi	r4,r16,92
8020b738:	000b883a 	mov	r5,zero
8020b73c:	80000015 	stw	zero,0(r16)
8020b740:	80000115 	stw	zero,4(r16)
8020b744:	80000215 	stw	zero,8(r16)
8020b748:	8080030d 	sth	r2,12(r16)
8020b74c:	80001915 	stw	zero,100(r16)
8020b750:	8000038d 	sth	zero,14(r16)
8020b754:	80000415 	stw	zero,16(r16)
8020b758:	80000515 	stw	zero,20(r16)
8020b75c:	80000615 	stw	zero,24(r16)
8020b760:	020d1c00 	call	8020d1c0 <memset>
8020b764:	05a00874 	movhi	r22,32801
8020b768:	94400217 	ldw	r17,8(r18)
8020b76c:	05600874 	movhi	r21,32801
8020b770:	05200874 	movhi	r20,32801
8020b774:	04e00874 	movhi	r19,32801
8020b778:	b5ba4404 	addi	r22,r22,-5872
8020b77c:	ad7a5b04 	addi	r21,r21,-5780
8020b780:	a53a7a04 	addi	r20,r20,-5656
8020b784:	9cfa9104 	addi	r19,r19,-5564
8020b788:	85800815 	stw	r22,32(r16)
8020b78c:	85400915 	stw	r21,36(r16)
8020b790:	85000a15 	stw	r20,40(r16)
8020b794:	84c00b15 	stw	r19,44(r16)
8020b798:	84000715 	stw	r16,28(r16)
8020b79c:	00800284 	movi	r2,10
8020b7a0:	8880030d 	sth	r2,12(r17)
8020b7a4:	00800044 	movi	r2,1
8020b7a8:	b80d883a 	mov	r6,r23
8020b7ac:	89001704 	addi	r4,r17,92
8020b7b0:	000b883a 	mov	r5,zero
8020b7b4:	88000015 	stw	zero,0(r17)
8020b7b8:	88000115 	stw	zero,4(r17)
8020b7bc:	88000215 	stw	zero,8(r17)
8020b7c0:	88001915 	stw	zero,100(r17)
8020b7c4:	8880038d 	sth	r2,14(r17)
8020b7c8:	88000415 	stw	zero,16(r17)
8020b7cc:	88000515 	stw	zero,20(r17)
8020b7d0:	88000615 	stw	zero,24(r17)
8020b7d4:	020d1c00 	call	8020d1c0 <memset>
8020b7d8:	94000317 	ldw	r16,12(r18)
8020b7dc:	00800484 	movi	r2,18
8020b7e0:	8c400715 	stw	r17,28(r17)
8020b7e4:	8d800815 	stw	r22,32(r17)
8020b7e8:	8d400915 	stw	r21,36(r17)
8020b7ec:	8d000a15 	stw	r20,40(r17)
8020b7f0:	8cc00b15 	stw	r19,44(r17)
8020b7f4:	8080030d 	sth	r2,12(r16)
8020b7f8:	00800084 	movi	r2,2
8020b7fc:	80000015 	stw	zero,0(r16)
8020b800:	80000115 	stw	zero,4(r16)
8020b804:	80000215 	stw	zero,8(r16)
8020b808:	80001915 	stw	zero,100(r16)
8020b80c:	8080038d 	sth	r2,14(r16)
8020b810:	80000415 	stw	zero,16(r16)
8020b814:	80000515 	stw	zero,20(r16)
8020b818:	80000615 	stw	zero,24(r16)
8020b81c:	b80d883a 	mov	r6,r23
8020b820:	000b883a 	mov	r5,zero
8020b824:	81001704 	addi	r4,r16,92
8020b828:	020d1c00 	call	8020d1c0 <memset>
8020b82c:	00800044 	movi	r2,1
8020b830:	84000715 	stw	r16,28(r16)
8020b834:	85800815 	stw	r22,32(r16)
8020b838:	85400915 	stw	r21,36(r16)
8020b83c:	85000a15 	stw	r20,40(r16)
8020b840:	84c00b15 	stw	r19,44(r16)
8020b844:	90800e15 	stw	r2,56(r18)
8020b848:	dfc00817 	ldw	ra,32(sp)
8020b84c:	ddc00717 	ldw	r23,28(sp)
8020b850:	dd800617 	ldw	r22,24(sp)
8020b854:	dd400517 	ldw	r21,20(sp)
8020b858:	dd000417 	ldw	r20,16(sp)
8020b85c:	dcc00317 	ldw	r19,12(sp)
8020b860:	dc800217 	ldw	r18,8(sp)
8020b864:	dc400117 	ldw	r17,4(sp)
8020b868:	dc000017 	ldw	r16,0(sp)
8020b86c:	dec00904 	addi	sp,sp,36
8020b870:	f800283a 	ret

8020b874 <__fp_lock>:
8020b874:	0005883a 	mov	r2,zero
8020b878:	f800283a 	ret

8020b87c <__sfmoreglue>:
8020b87c:	defffc04 	addi	sp,sp,-16
8020b880:	dc400115 	stw	r17,4(sp)
8020b884:	2c7fffc4 	addi	r17,r5,-1
8020b888:	8c401a24 	muli	r17,r17,104
8020b88c:	dc800215 	stw	r18,8(sp)
8020b890:	2825883a 	mov	r18,r5
8020b894:	89401d04 	addi	r5,r17,116
8020b898:	dc000015 	stw	r16,0(sp)
8020b89c:	dfc00315 	stw	ra,12(sp)
8020b8a0:	020c7740 	call	8020c774 <_malloc_r>
8020b8a4:	1021883a 	mov	r16,r2
8020b8a8:	10000726 	beq	r2,zero,8020b8c8 <__sfmoreglue+0x4c>
8020b8ac:	11000304 	addi	r4,r2,12
8020b8b0:	10000015 	stw	zero,0(r2)
8020b8b4:	14800115 	stw	r18,4(r2)
8020b8b8:	11000215 	stw	r4,8(r2)
8020b8bc:	89801a04 	addi	r6,r17,104
8020b8c0:	000b883a 	mov	r5,zero
8020b8c4:	020d1c00 	call	8020d1c0 <memset>
8020b8c8:	8005883a 	mov	r2,r16
8020b8cc:	dfc00317 	ldw	ra,12(sp)
8020b8d0:	dc800217 	ldw	r18,8(sp)
8020b8d4:	dc400117 	ldw	r17,4(sp)
8020b8d8:	dc000017 	ldw	r16,0(sp)
8020b8dc:	dec00404 	addi	sp,sp,16
8020b8e0:	f800283a 	ret

8020b8e4 <__sfp>:
8020b8e4:	defffb04 	addi	sp,sp,-20
8020b8e8:	dc000015 	stw	r16,0(sp)
8020b8ec:	042008b4 	movhi	r16,32802
8020b8f0:	84350404 	addi	r16,r16,-11248
8020b8f4:	dcc00315 	stw	r19,12(sp)
8020b8f8:	2027883a 	mov	r19,r4
8020b8fc:	81000017 	ldw	r4,0(r16)
8020b900:	dfc00415 	stw	ra,16(sp)
8020b904:	dc800215 	stw	r18,8(sp)
8020b908:	20800e17 	ldw	r2,56(r4)
8020b90c:	dc400115 	stw	r17,4(sp)
8020b910:	1000021e 	bne	r2,zero,8020b91c <__sfp+0x38>
8020b914:	020b6d80 	call	8020b6d8 <__sinit.part.1>
8020b918:	81000017 	ldw	r4,0(r16)
8020b91c:	2480b804 	addi	r18,r4,736
8020b920:	047fffc4 	movi	r17,-1
8020b924:	91000117 	ldw	r4,4(r18)
8020b928:	94000217 	ldw	r16,8(r18)
8020b92c:	213fffc4 	addi	r4,r4,-1
8020b930:	20000a16 	blt	r4,zero,8020b95c <__sfp+0x78>
8020b934:	8080030f 	ldh	r2,12(r16)
8020b938:	10000c26 	beq	r2,zero,8020b96c <__sfp+0x88>
8020b93c:	80c01d04 	addi	r3,r16,116
8020b940:	00000206 	br	8020b94c <__sfp+0x68>
8020b944:	18bfe60f 	ldh	r2,-104(r3)
8020b948:	10000826 	beq	r2,zero,8020b96c <__sfp+0x88>
8020b94c:	213fffc4 	addi	r4,r4,-1
8020b950:	1c3ffd04 	addi	r16,r3,-12
8020b954:	18c01a04 	addi	r3,r3,104
8020b958:	247ffa1e 	bne	r4,r17,8020b944 <__reset+0xfa1eb944>
8020b95c:	90800017 	ldw	r2,0(r18)
8020b960:	10001d26 	beq	r2,zero,8020b9d8 <__sfp+0xf4>
8020b964:	1025883a 	mov	r18,r2
8020b968:	003fee06 	br	8020b924 <__reset+0xfa1eb924>
8020b96c:	00bfffc4 	movi	r2,-1
8020b970:	8080038d 	sth	r2,14(r16)
8020b974:	00800044 	movi	r2,1
8020b978:	8080030d 	sth	r2,12(r16)
8020b97c:	80001915 	stw	zero,100(r16)
8020b980:	80000015 	stw	zero,0(r16)
8020b984:	80000215 	stw	zero,8(r16)
8020b988:	80000115 	stw	zero,4(r16)
8020b98c:	80000415 	stw	zero,16(r16)
8020b990:	80000515 	stw	zero,20(r16)
8020b994:	80000615 	stw	zero,24(r16)
8020b998:	01800204 	movi	r6,8
8020b99c:	000b883a 	mov	r5,zero
8020b9a0:	81001704 	addi	r4,r16,92
8020b9a4:	020d1c00 	call	8020d1c0 <memset>
8020b9a8:	8005883a 	mov	r2,r16
8020b9ac:	80000c15 	stw	zero,48(r16)
8020b9b0:	80000d15 	stw	zero,52(r16)
8020b9b4:	80001115 	stw	zero,68(r16)
8020b9b8:	80001215 	stw	zero,72(r16)
8020b9bc:	dfc00417 	ldw	ra,16(sp)
8020b9c0:	dcc00317 	ldw	r19,12(sp)
8020b9c4:	dc800217 	ldw	r18,8(sp)
8020b9c8:	dc400117 	ldw	r17,4(sp)
8020b9cc:	dc000017 	ldw	r16,0(sp)
8020b9d0:	dec00504 	addi	sp,sp,20
8020b9d4:	f800283a 	ret
8020b9d8:	01400104 	movi	r5,4
8020b9dc:	9809883a 	mov	r4,r19
8020b9e0:	020b87c0 	call	8020b87c <__sfmoreglue>
8020b9e4:	90800015 	stw	r2,0(r18)
8020b9e8:	103fde1e 	bne	r2,zero,8020b964 <__reset+0xfa1eb964>
8020b9ec:	00800304 	movi	r2,12
8020b9f0:	98800015 	stw	r2,0(r19)
8020b9f4:	0005883a 	mov	r2,zero
8020b9f8:	003ff006 	br	8020b9bc <__reset+0xfa1eb9bc>

8020b9fc <_cleanup>:
8020b9fc:	00a008b4 	movhi	r2,32802
8020ba00:	10b50404 	addi	r2,r2,-11248
8020ba04:	11000017 	ldw	r4,0(r2)
8020ba08:	01600874 	movhi	r5,32801
8020ba0c:	2945bd04 	addi	r5,r5,5876
8020ba10:	020c4181 	jmpi	8020c418 <_fwalk_reent>

8020ba14 <__sinit>:
8020ba14:	20800e17 	ldw	r2,56(r4)
8020ba18:	10000126 	beq	r2,zero,8020ba20 <__sinit+0xc>
8020ba1c:	f800283a 	ret
8020ba20:	020b6d81 	jmpi	8020b6d8 <__sinit.part.1>

8020ba24 <__sfp_lock_acquire>:
8020ba24:	f800283a 	ret

8020ba28 <__sfp_lock_release>:
8020ba28:	f800283a 	ret

8020ba2c <__sinit_lock_acquire>:
8020ba2c:	f800283a 	ret

8020ba30 <__sinit_lock_release>:
8020ba30:	f800283a 	ret

8020ba34 <__fp_lock_all>:
8020ba34:	00a008b4 	movhi	r2,32802
8020ba38:	10b50504 	addi	r2,r2,-11244
8020ba3c:	11000017 	ldw	r4,0(r2)
8020ba40:	01600874 	movhi	r5,32801
8020ba44:	296e1d04 	addi	r5,r5,-18316
8020ba48:	020c3541 	jmpi	8020c354 <_fwalk>

8020ba4c <__fp_unlock_all>:
8020ba4c:	00a008b4 	movhi	r2,32802
8020ba50:	10b50504 	addi	r2,r2,-11244
8020ba54:	11000017 	ldw	r4,0(r2)
8020ba58:	01600874 	movhi	r5,32801
8020ba5c:	296db104 	addi	r5,r5,-18748
8020ba60:	020c3541 	jmpi	8020c354 <_fwalk>

8020ba64 <_malloc_trim_r>:
8020ba64:	defffb04 	addi	sp,sp,-20
8020ba68:	dcc00315 	stw	r19,12(sp)
8020ba6c:	04e008b4 	movhi	r19,32802
8020ba70:	dc800215 	stw	r18,8(sp)
8020ba74:	dc400115 	stw	r17,4(sp)
8020ba78:	dc000015 	stw	r16,0(sp)
8020ba7c:	dfc00415 	stw	ra,16(sp)
8020ba80:	2821883a 	mov	r16,r5
8020ba84:	9cef0f04 	addi	r19,r19,-17348
8020ba88:	2025883a 	mov	r18,r4
8020ba8c:	02156f00 	call	802156f0 <__malloc_lock>
8020ba90:	98800217 	ldw	r2,8(r19)
8020ba94:	14400117 	ldw	r17,4(r2)
8020ba98:	00bfff04 	movi	r2,-4
8020ba9c:	88a2703a 	and	r17,r17,r2
8020baa0:	8c21c83a 	sub	r16,r17,r16
8020baa4:	8403fbc4 	addi	r16,r16,4079
8020baa8:	8020d33a 	srli	r16,r16,12
8020baac:	0083ffc4 	movi	r2,4095
8020bab0:	843fffc4 	addi	r16,r16,-1
8020bab4:	8020933a 	slli	r16,r16,12
8020bab8:	1400060e 	bge	r2,r16,8020bad4 <_malloc_trim_r+0x70>
8020babc:	000b883a 	mov	r5,zero
8020bac0:	9009883a 	mov	r4,r18
8020bac4:	020e8bc0 	call	8020e8bc <_sbrk_r>
8020bac8:	98c00217 	ldw	r3,8(r19)
8020bacc:	1c47883a 	add	r3,r3,r17
8020bad0:	10c00a26 	beq	r2,r3,8020bafc <_malloc_trim_r+0x98>
8020bad4:	9009883a 	mov	r4,r18
8020bad8:	02157140 	call	80215714 <__malloc_unlock>
8020badc:	0005883a 	mov	r2,zero
8020bae0:	dfc00417 	ldw	ra,16(sp)
8020bae4:	dcc00317 	ldw	r19,12(sp)
8020bae8:	dc800217 	ldw	r18,8(sp)
8020baec:	dc400117 	ldw	r17,4(sp)
8020baf0:	dc000017 	ldw	r16,0(sp)
8020baf4:	dec00504 	addi	sp,sp,20
8020baf8:	f800283a 	ret
8020bafc:	040bc83a 	sub	r5,zero,r16
8020bb00:	9009883a 	mov	r4,r18
8020bb04:	020e8bc0 	call	8020e8bc <_sbrk_r>
8020bb08:	00ffffc4 	movi	r3,-1
8020bb0c:	10c00d26 	beq	r2,r3,8020bb44 <_malloc_trim_r+0xe0>
8020bb10:	00e008b4 	movhi	r3,32802
8020bb14:	18f52b04 	addi	r3,r3,-11092
8020bb18:	18800017 	ldw	r2,0(r3)
8020bb1c:	99000217 	ldw	r4,8(r19)
8020bb20:	8c23c83a 	sub	r17,r17,r16
8020bb24:	8c400054 	ori	r17,r17,1
8020bb28:	1421c83a 	sub	r16,r2,r16
8020bb2c:	24400115 	stw	r17,4(r4)
8020bb30:	9009883a 	mov	r4,r18
8020bb34:	1c000015 	stw	r16,0(r3)
8020bb38:	02157140 	call	80215714 <__malloc_unlock>
8020bb3c:	00800044 	movi	r2,1
8020bb40:	003fe706 	br	8020bae0 <__reset+0xfa1ebae0>
8020bb44:	000b883a 	mov	r5,zero
8020bb48:	9009883a 	mov	r4,r18
8020bb4c:	020e8bc0 	call	8020e8bc <_sbrk_r>
8020bb50:	99000217 	ldw	r4,8(r19)
8020bb54:	014003c4 	movi	r5,15
8020bb58:	1107c83a 	sub	r3,r2,r4
8020bb5c:	28ffdd0e 	bge	r5,r3,8020bad4 <__reset+0xfa1ebad4>
8020bb60:	016008b4 	movhi	r5,32802
8020bb64:	29750704 	addi	r5,r5,-11236
8020bb68:	29400017 	ldw	r5,0(r5)
8020bb6c:	18c00054 	ori	r3,r3,1
8020bb70:	20c00115 	stw	r3,4(r4)
8020bb74:	00e008b4 	movhi	r3,32802
8020bb78:	1145c83a 	sub	r2,r2,r5
8020bb7c:	18f52b04 	addi	r3,r3,-11092
8020bb80:	18800015 	stw	r2,0(r3)
8020bb84:	003fd306 	br	8020bad4 <__reset+0xfa1ebad4>

8020bb88 <_free_r>:
8020bb88:	28004126 	beq	r5,zero,8020bc90 <_free_r+0x108>
8020bb8c:	defffd04 	addi	sp,sp,-12
8020bb90:	dc400115 	stw	r17,4(sp)
8020bb94:	dc000015 	stw	r16,0(sp)
8020bb98:	2023883a 	mov	r17,r4
8020bb9c:	2821883a 	mov	r16,r5
8020bba0:	dfc00215 	stw	ra,8(sp)
8020bba4:	02156f00 	call	802156f0 <__malloc_lock>
8020bba8:	81ffff17 	ldw	r7,-4(r16)
8020bbac:	00bfff84 	movi	r2,-2
8020bbb0:	012008b4 	movhi	r4,32802
8020bbb4:	81bffe04 	addi	r6,r16,-8
8020bbb8:	3884703a 	and	r2,r7,r2
8020bbbc:	212f0f04 	addi	r4,r4,-17348
8020bbc0:	308b883a 	add	r5,r6,r2
8020bbc4:	2a400117 	ldw	r9,4(r5)
8020bbc8:	22000217 	ldw	r8,8(r4)
8020bbcc:	00ffff04 	movi	r3,-4
8020bbd0:	48c6703a 	and	r3,r9,r3
8020bbd4:	2a005726 	beq	r5,r8,8020bd34 <_free_r+0x1ac>
8020bbd8:	28c00115 	stw	r3,4(r5)
8020bbdc:	39c0004c 	andi	r7,r7,1
8020bbe0:	3800091e 	bne	r7,zero,8020bc08 <_free_r+0x80>
8020bbe4:	823ffe17 	ldw	r8,-8(r16)
8020bbe8:	22400204 	addi	r9,r4,8
8020bbec:	320dc83a 	sub	r6,r6,r8
8020bbf0:	31c00217 	ldw	r7,8(r6)
8020bbf4:	1205883a 	add	r2,r2,r8
8020bbf8:	3a406526 	beq	r7,r9,8020bd90 <_free_r+0x208>
8020bbfc:	32000317 	ldw	r8,12(r6)
8020bc00:	3a000315 	stw	r8,12(r7)
8020bc04:	41c00215 	stw	r7,8(r8)
8020bc08:	28cf883a 	add	r7,r5,r3
8020bc0c:	39c00117 	ldw	r7,4(r7)
8020bc10:	39c0004c 	andi	r7,r7,1
8020bc14:	38003a26 	beq	r7,zero,8020bd00 <_free_r+0x178>
8020bc18:	10c00054 	ori	r3,r2,1
8020bc1c:	30c00115 	stw	r3,4(r6)
8020bc20:	3087883a 	add	r3,r6,r2
8020bc24:	18800015 	stw	r2,0(r3)
8020bc28:	00c07fc4 	movi	r3,511
8020bc2c:	18801936 	bltu	r3,r2,8020bc94 <_free_r+0x10c>
8020bc30:	1004d0fa 	srli	r2,r2,3
8020bc34:	01c00044 	movi	r7,1
8020bc38:	21400117 	ldw	r5,4(r4)
8020bc3c:	10c00044 	addi	r3,r2,1
8020bc40:	18c7883a 	add	r3,r3,r3
8020bc44:	1005d0ba 	srai	r2,r2,2
8020bc48:	18c7883a 	add	r3,r3,r3
8020bc4c:	18c7883a 	add	r3,r3,r3
8020bc50:	1907883a 	add	r3,r3,r4
8020bc54:	3884983a 	sll	r2,r7,r2
8020bc58:	19c00017 	ldw	r7,0(r3)
8020bc5c:	1a3ffe04 	addi	r8,r3,-8
8020bc60:	1144b03a 	or	r2,r2,r5
8020bc64:	32000315 	stw	r8,12(r6)
8020bc68:	31c00215 	stw	r7,8(r6)
8020bc6c:	20800115 	stw	r2,4(r4)
8020bc70:	19800015 	stw	r6,0(r3)
8020bc74:	39800315 	stw	r6,12(r7)
8020bc78:	8809883a 	mov	r4,r17
8020bc7c:	dfc00217 	ldw	ra,8(sp)
8020bc80:	dc400117 	ldw	r17,4(sp)
8020bc84:	dc000017 	ldw	r16,0(sp)
8020bc88:	dec00304 	addi	sp,sp,12
8020bc8c:	02157141 	jmpi	80215714 <__malloc_unlock>
8020bc90:	f800283a 	ret
8020bc94:	100ad27a 	srli	r5,r2,9
8020bc98:	00c00104 	movi	r3,4
8020bc9c:	19404a36 	bltu	r3,r5,8020bdc8 <_free_r+0x240>
8020bca0:	100ad1ba 	srli	r5,r2,6
8020bca4:	28c00e44 	addi	r3,r5,57
8020bca8:	18c7883a 	add	r3,r3,r3
8020bcac:	29400e04 	addi	r5,r5,56
8020bcb0:	18c7883a 	add	r3,r3,r3
8020bcb4:	18c7883a 	add	r3,r3,r3
8020bcb8:	1909883a 	add	r4,r3,r4
8020bcbc:	20c00017 	ldw	r3,0(r4)
8020bcc0:	01e008b4 	movhi	r7,32802
8020bcc4:	213ffe04 	addi	r4,r4,-8
8020bcc8:	39ef0f04 	addi	r7,r7,-17348
8020bccc:	20c04426 	beq	r4,r3,8020bde0 <_free_r+0x258>
8020bcd0:	01ffff04 	movi	r7,-4
8020bcd4:	19400117 	ldw	r5,4(r3)
8020bcd8:	29ca703a 	and	r5,r5,r7
8020bcdc:	1140022e 	bgeu	r2,r5,8020bce8 <_free_r+0x160>
8020bce0:	18c00217 	ldw	r3,8(r3)
8020bce4:	20fffb1e 	bne	r4,r3,8020bcd4 <__reset+0xfa1ebcd4>
8020bce8:	19000317 	ldw	r4,12(r3)
8020bcec:	31000315 	stw	r4,12(r6)
8020bcf0:	30c00215 	stw	r3,8(r6)
8020bcf4:	21800215 	stw	r6,8(r4)
8020bcf8:	19800315 	stw	r6,12(r3)
8020bcfc:	003fde06 	br	8020bc78 <__reset+0xfa1ebc78>
8020bd00:	29c00217 	ldw	r7,8(r5)
8020bd04:	10c5883a 	add	r2,r2,r3
8020bd08:	00e008b4 	movhi	r3,32802
8020bd0c:	18ef1104 	addi	r3,r3,-17340
8020bd10:	38c03b26 	beq	r7,r3,8020be00 <_free_r+0x278>
8020bd14:	2a000317 	ldw	r8,12(r5)
8020bd18:	11400054 	ori	r5,r2,1
8020bd1c:	3087883a 	add	r3,r6,r2
8020bd20:	3a000315 	stw	r8,12(r7)
8020bd24:	41c00215 	stw	r7,8(r8)
8020bd28:	31400115 	stw	r5,4(r6)
8020bd2c:	18800015 	stw	r2,0(r3)
8020bd30:	003fbd06 	br	8020bc28 <__reset+0xfa1ebc28>
8020bd34:	39c0004c 	andi	r7,r7,1
8020bd38:	10c5883a 	add	r2,r2,r3
8020bd3c:	3800071e 	bne	r7,zero,8020bd5c <_free_r+0x1d4>
8020bd40:	81fffe17 	ldw	r7,-8(r16)
8020bd44:	31cdc83a 	sub	r6,r6,r7
8020bd48:	30c00317 	ldw	r3,12(r6)
8020bd4c:	31400217 	ldw	r5,8(r6)
8020bd50:	11c5883a 	add	r2,r2,r7
8020bd54:	28c00315 	stw	r3,12(r5)
8020bd58:	19400215 	stw	r5,8(r3)
8020bd5c:	10c00054 	ori	r3,r2,1
8020bd60:	30c00115 	stw	r3,4(r6)
8020bd64:	00e008b4 	movhi	r3,32802
8020bd68:	18f50804 	addi	r3,r3,-11232
8020bd6c:	18c00017 	ldw	r3,0(r3)
8020bd70:	21800215 	stw	r6,8(r4)
8020bd74:	10ffc036 	bltu	r2,r3,8020bc78 <__reset+0xfa1ebc78>
8020bd78:	00a008b4 	movhi	r2,32802
8020bd7c:	10b52204 	addi	r2,r2,-11128
8020bd80:	11400017 	ldw	r5,0(r2)
8020bd84:	8809883a 	mov	r4,r17
8020bd88:	020ba640 	call	8020ba64 <_malloc_trim_r>
8020bd8c:	003fba06 	br	8020bc78 <__reset+0xfa1ebc78>
8020bd90:	28c9883a 	add	r4,r5,r3
8020bd94:	21000117 	ldw	r4,4(r4)
8020bd98:	2100004c 	andi	r4,r4,1
8020bd9c:	2000391e 	bne	r4,zero,8020be84 <_free_r+0x2fc>
8020bda0:	29c00217 	ldw	r7,8(r5)
8020bda4:	29000317 	ldw	r4,12(r5)
8020bda8:	1885883a 	add	r2,r3,r2
8020bdac:	10c00054 	ori	r3,r2,1
8020bdb0:	39000315 	stw	r4,12(r7)
8020bdb4:	21c00215 	stw	r7,8(r4)
8020bdb8:	30c00115 	stw	r3,4(r6)
8020bdbc:	308d883a 	add	r6,r6,r2
8020bdc0:	30800015 	stw	r2,0(r6)
8020bdc4:	003fac06 	br	8020bc78 <__reset+0xfa1ebc78>
8020bdc8:	00c00504 	movi	r3,20
8020bdcc:	19401536 	bltu	r3,r5,8020be24 <_free_r+0x29c>
8020bdd0:	28c01704 	addi	r3,r5,92
8020bdd4:	18c7883a 	add	r3,r3,r3
8020bdd8:	294016c4 	addi	r5,r5,91
8020bddc:	003fb406 	br	8020bcb0 <__reset+0xfa1ebcb0>
8020bde0:	280bd0ba 	srai	r5,r5,2
8020bde4:	00c00044 	movi	r3,1
8020bde8:	38800117 	ldw	r2,4(r7)
8020bdec:	194a983a 	sll	r5,r3,r5
8020bdf0:	2007883a 	mov	r3,r4
8020bdf4:	2884b03a 	or	r2,r5,r2
8020bdf8:	38800115 	stw	r2,4(r7)
8020bdfc:	003fbb06 	br	8020bcec <__reset+0xfa1ebcec>
8020be00:	21800515 	stw	r6,20(r4)
8020be04:	21800415 	stw	r6,16(r4)
8020be08:	10c00054 	ori	r3,r2,1
8020be0c:	31c00315 	stw	r7,12(r6)
8020be10:	31c00215 	stw	r7,8(r6)
8020be14:	30c00115 	stw	r3,4(r6)
8020be18:	308d883a 	add	r6,r6,r2
8020be1c:	30800015 	stw	r2,0(r6)
8020be20:	003f9506 	br	8020bc78 <__reset+0xfa1ebc78>
8020be24:	00c01504 	movi	r3,84
8020be28:	19400536 	bltu	r3,r5,8020be40 <_free_r+0x2b8>
8020be2c:	100ad33a 	srli	r5,r2,12
8020be30:	28c01bc4 	addi	r3,r5,111
8020be34:	18c7883a 	add	r3,r3,r3
8020be38:	29401b84 	addi	r5,r5,110
8020be3c:	003f9c06 	br	8020bcb0 <__reset+0xfa1ebcb0>
8020be40:	00c05504 	movi	r3,340
8020be44:	19400536 	bltu	r3,r5,8020be5c <_free_r+0x2d4>
8020be48:	100ad3fa 	srli	r5,r2,15
8020be4c:	28c01e04 	addi	r3,r5,120
8020be50:	18c7883a 	add	r3,r3,r3
8020be54:	29401dc4 	addi	r5,r5,119
8020be58:	003f9506 	br	8020bcb0 <__reset+0xfa1ebcb0>
8020be5c:	00c15504 	movi	r3,1364
8020be60:	19400536 	bltu	r3,r5,8020be78 <_free_r+0x2f0>
8020be64:	100ad4ba 	srli	r5,r2,18
8020be68:	28c01f44 	addi	r3,r5,125
8020be6c:	18c7883a 	add	r3,r3,r3
8020be70:	29401f04 	addi	r5,r5,124
8020be74:	003f8e06 	br	8020bcb0 <__reset+0xfa1ebcb0>
8020be78:	00c03f84 	movi	r3,254
8020be7c:	01401f84 	movi	r5,126
8020be80:	003f8b06 	br	8020bcb0 <__reset+0xfa1ebcb0>
8020be84:	10c00054 	ori	r3,r2,1
8020be88:	30c00115 	stw	r3,4(r6)
8020be8c:	308d883a 	add	r6,r6,r2
8020be90:	30800015 	stw	r2,0(r6)
8020be94:	003f7806 	br	8020bc78 <__reset+0xfa1ebc78>

8020be98 <__sfvwrite_r>:
8020be98:	30800217 	ldw	r2,8(r6)
8020be9c:	10006726 	beq	r2,zero,8020c03c <__sfvwrite_r+0x1a4>
8020bea0:	28c0030b 	ldhu	r3,12(r5)
8020bea4:	defff404 	addi	sp,sp,-48
8020bea8:	dd400715 	stw	r21,28(sp)
8020beac:	dd000615 	stw	r20,24(sp)
8020beb0:	dc000215 	stw	r16,8(sp)
8020beb4:	dfc00b15 	stw	ra,44(sp)
8020beb8:	df000a15 	stw	fp,40(sp)
8020bebc:	ddc00915 	stw	r23,36(sp)
8020bec0:	dd800815 	stw	r22,32(sp)
8020bec4:	dcc00515 	stw	r19,20(sp)
8020bec8:	dc800415 	stw	r18,16(sp)
8020becc:	dc400315 	stw	r17,12(sp)
8020bed0:	1880020c 	andi	r2,r3,8
8020bed4:	2821883a 	mov	r16,r5
8020bed8:	202b883a 	mov	r21,r4
8020bedc:	3029883a 	mov	r20,r6
8020bee0:	10002726 	beq	r2,zero,8020bf80 <__sfvwrite_r+0xe8>
8020bee4:	28800417 	ldw	r2,16(r5)
8020bee8:	10002526 	beq	r2,zero,8020bf80 <__sfvwrite_r+0xe8>
8020beec:	1880008c 	andi	r2,r3,2
8020bef0:	a4400017 	ldw	r17,0(r20)
8020bef4:	10002a26 	beq	r2,zero,8020bfa0 <__sfvwrite_r+0x108>
8020bef8:	05a00034 	movhi	r22,32768
8020befc:	0027883a 	mov	r19,zero
8020bf00:	0025883a 	mov	r18,zero
8020bf04:	b5bf0004 	addi	r22,r22,-1024
8020bf08:	980d883a 	mov	r6,r19
8020bf0c:	a809883a 	mov	r4,r21
8020bf10:	90004626 	beq	r18,zero,8020c02c <__sfvwrite_r+0x194>
8020bf14:	900f883a 	mov	r7,r18
8020bf18:	b480022e 	bgeu	r22,r18,8020bf24 <__sfvwrite_r+0x8c>
8020bf1c:	01e00034 	movhi	r7,32768
8020bf20:	39ff0004 	addi	r7,r7,-1024
8020bf24:	80800917 	ldw	r2,36(r16)
8020bf28:	81400717 	ldw	r5,28(r16)
8020bf2c:	103ee83a 	callr	r2
8020bf30:	0080570e 	bge	zero,r2,8020c090 <__sfvwrite_r+0x1f8>
8020bf34:	a0c00217 	ldw	r3,8(r20)
8020bf38:	98a7883a 	add	r19,r19,r2
8020bf3c:	90a5c83a 	sub	r18,r18,r2
8020bf40:	1885c83a 	sub	r2,r3,r2
8020bf44:	a0800215 	stw	r2,8(r20)
8020bf48:	103fef1e 	bne	r2,zero,8020bf08 <__reset+0xfa1ebf08>
8020bf4c:	0005883a 	mov	r2,zero
8020bf50:	dfc00b17 	ldw	ra,44(sp)
8020bf54:	df000a17 	ldw	fp,40(sp)
8020bf58:	ddc00917 	ldw	r23,36(sp)
8020bf5c:	dd800817 	ldw	r22,32(sp)
8020bf60:	dd400717 	ldw	r21,28(sp)
8020bf64:	dd000617 	ldw	r20,24(sp)
8020bf68:	dcc00517 	ldw	r19,20(sp)
8020bf6c:	dc800417 	ldw	r18,16(sp)
8020bf70:	dc400317 	ldw	r17,12(sp)
8020bf74:	dc000217 	ldw	r16,8(sp)
8020bf78:	dec00c04 	addi	sp,sp,48
8020bf7c:	f800283a 	ret
8020bf80:	800b883a 	mov	r5,r16
8020bf84:	a809883a 	mov	r4,r21
8020bf88:	0209a400 	call	80209a40 <__swsetup_r>
8020bf8c:	1000eb1e 	bne	r2,zero,8020c33c <__sfvwrite_r+0x4a4>
8020bf90:	80c0030b 	ldhu	r3,12(r16)
8020bf94:	a4400017 	ldw	r17,0(r20)
8020bf98:	1880008c 	andi	r2,r3,2
8020bf9c:	103fd61e 	bne	r2,zero,8020bef8 <__reset+0xfa1ebef8>
8020bfa0:	1880004c 	andi	r2,r3,1
8020bfa4:	10003f1e 	bne	r2,zero,8020c0a4 <__sfvwrite_r+0x20c>
8020bfa8:	0039883a 	mov	fp,zero
8020bfac:	0025883a 	mov	r18,zero
8020bfb0:	90001a26 	beq	r18,zero,8020c01c <__sfvwrite_r+0x184>
8020bfb4:	1880800c 	andi	r2,r3,512
8020bfb8:	84c00217 	ldw	r19,8(r16)
8020bfbc:	10002126 	beq	r2,zero,8020c044 <__sfvwrite_r+0x1ac>
8020bfc0:	982f883a 	mov	r23,r19
8020bfc4:	94c09336 	bltu	r18,r19,8020c214 <__sfvwrite_r+0x37c>
8020bfc8:	1881200c 	andi	r2,r3,1152
8020bfcc:	10009e1e 	bne	r2,zero,8020c248 <__sfvwrite_r+0x3b0>
8020bfd0:	81000017 	ldw	r4,0(r16)
8020bfd4:	b80d883a 	mov	r6,r23
8020bfd8:	e00b883a 	mov	r5,fp
8020bfdc:	020d0640 	call	8020d064 <memmove>
8020bfe0:	80c00217 	ldw	r3,8(r16)
8020bfe4:	81000017 	ldw	r4,0(r16)
8020bfe8:	9005883a 	mov	r2,r18
8020bfec:	1ce7c83a 	sub	r19,r3,r19
8020bff0:	25cf883a 	add	r7,r4,r23
8020bff4:	84c00215 	stw	r19,8(r16)
8020bff8:	81c00015 	stw	r7,0(r16)
8020bffc:	a0c00217 	ldw	r3,8(r20)
8020c000:	e0b9883a 	add	fp,fp,r2
8020c004:	90a5c83a 	sub	r18,r18,r2
8020c008:	18a7c83a 	sub	r19,r3,r2
8020c00c:	a4c00215 	stw	r19,8(r20)
8020c010:	983fce26 	beq	r19,zero,8020bf4c <__reset+0xfa1ebf4c>
8020c014:	80c0030b 	ldhu	r3,12(r16)
8020c018:	903fe61e 	bne	r18,zero,8020bfb4 <__reset+0xfa1ebfb4>
8020c01c:	8f000017 	ldw	fp,0(r17)
8020c020:	8c800117 	ldw	r18,4(r17)
8020c024:	8c400204 	addi	r17,r17,8
8020c028:	003fe106 	br	8020bfb0 <__reset+0xfa1ebfb0>
8020c02c:	8cc00017 	ldw	r19,0(r17)
8020c030:	8c800117 	ldw	r18,4(r17)
8020c034:	8c400204 	addi	r17,r17,8
8020c038:	003fb306 	br	8020bf08 <__reset+0xfa1ebf08>
8020c03c:	0005883a 	mov	r2,zero
8020c040:	f800283a 	ret
8020c044:	81000017 	ldw	r4,0(r16)
8020c048:	80800417 	ldw	r2,16(r16)
8020c04c:	11005736 	bltu	r2,r4,8020c1ac <__sfvwrite_r+0x314>
8020c050:	85c00517 	ldw	r23,20(r16)
8020c054:	95c05536 	bltu	r18,r23,8020c1ac <__sfvwrite_r+0x314>
8020c058:	00a00034 	movhi	r2,32768
8020c05c:	10bfffc4 	addi	r2,r2,-1
8020c060:	9009883a 	mov	r4,r18
8020c064:	1480012e 	bgeu	r2,r18,8020c06c <__sfvwrite_r+0x1d4>
8020c068:	1009883a 	mov	r4,r2
8020c06c:	b80b883a 	mov	r5,r23
8020c070:	02129600 	call	80212960 <__divsi3>
8020c074:	15cf383a 	mul	r7,r2,r23
8020c078:	81400717 	ldw	r5,28(r16)
8020c07c:	80800917 	ldw	r2,36(r16)
8020c080:	e00d883a 	mov	r6,fp
8020c084:	a809883a 	mov	r4,r21
8020c088:	103ee83a 	callr	r2
8020c08c:	00bfdb16 	blt	zero,r2,8020bffc <__reset+0xfa1ebffc>
8020c090:	8080030b 	ldhu	r2,12(r16)
8020c094:	10801014 	ori	r2,r2,64
8020c098:	8080030d 	sth	r2,12(r16)
8020c09c:	00bfffc4 	movi	r2,-1
8020c0a0:	003fab06 	br	8020bf50 <__reset+0xfa1ebf50>
8020c0a4:	0027883a 	mov	r19,zero
8020c0a8:	0011883a 	mov	r8,zero
8020c0ac:	0039883a 	mov	fp,zero
8020c0b0:	0025883a 	mov	r18,zero
8020c0b4:	90001f26 	beq	r18,zero,8020c134 <__sfvwrite_r+0x29c>
8020c0b8:	40005a26 	beq	r8,zero,8020c224 <__sfvwrite_r+0x38c>
8020c0bc:	982d883a 	mov	r22,r19
8020c0c0:	94c0012e 	bgeu	r18,r19,8020c0c8 <__sfvwrite_r+0x230>
8020c0c4:	902d883a 	mov	r22,r18
8020c0c8:	81000017 	ldw	r4,0(r16)
8020c0cc:	80800417 	ldw	r2,16(r16)
8020c0d0:	b02f883a 	mov	r23,r22
8020c0d4:	81c00517 	ldw	r7,20(r16)
8020c0d8:	1100032e 	bgeu	r2,r4,8020c0e8 <__sfvwrite_r+0x250>
8020c0dc:	80c00217 	ldw	r3,8(r16)
8020c0e0:	38c7883a 	add	r3,r7,r3
8020c0e4:	1d801816 	blt	r3,r22,8020c148 <__sfvwrite_r+0x2b0>
8020c0e8:	b1c03e16 	blt	r22,r7,8020c1e4 <__sfvwrite_r+0x34c>
8020c0ec:	80800917 	ldw	r2,36(r16)
8020c0f0:	81400717 	ldw	r5,28(r16)
8020c0f4:	e00d883a 	mov	r6,fp
8020c0f8:	da000115 	stw	r8,4(sp)
8020c0fc:	a809883a 	mov	r4,r21
8020c100:	103ee83a 	callr	r2
8020c104:	102f883a 	mov	r23,r2
8020c108:	da000117 	ldw	r8,4(sp)
8020c10c:	00bfe00e 	bge	zero,r2,8020c090 <__reset+0xfa1ec090>
8020c110:	9de7c83a 	sub	r19,r19,r23
8020c114:	98001f26 	beq	r19,zero,8020c194 <__sfvwrite_r+0x2fc>
8020c118:	a0800217 	ldw	r2,8(r20)
8020c11c:	e5f9883a 	add	fp,fp,r23
8020c120:	95e5c83a 	sub	r18,r18,r23
8020c124:	15efc83a 	sub	r23,r2,r23
8020c128:	a5c00215 	stw	r23,8(r20)
8020c12c:	b83f8726 	beq	r23,zero,8020bf4c <__reset+0xfa1ebf4c>
8020c130:	903fe11e 	bne	r18,zero,8020c0b8 <__reset+0xfa1ec0b8>
8020c134:	8f000017 	ldw	fp,0(r17)
8020c138:	8c800117 	ldw	r18,4(r17)
8020c13c:	0011883a 	mov	r8,zero
8020c140:	8c400204 	addi	r17,r17,8
8020c144:	003fdb06 	br	8020c0b4 <__reset+0xfa1ec0b4>
8020c148:	180d883a 	mov	r6,r3
8020c14c:	e00b883a 	mov	r5,fp
8020c150:	da000115 	stw	r8,4(sp)
8020c154:	d8c00015 	stw	r3,0(sp)
8020c158:	020d0640 	call	8020d064 <memmove>
8020c15c:	d8c00017 	ldw	r3,0(sp)
8020c160:	80800017 	ldw	r2,0(r16)
8020c164:	800b883a 	mov	r5,r16
8020c168:	a809883a 	mov	r4,r21
8020c16c:	10c5883a 	add	r2,r2,r3
8020c170:	80800015 	stw	r2,0(r16)
8020c174:	d8c00015 	stw	r3,0(sp)
8020c178:	020b6380 	call	8020b638 <_fflush_r>
8020c17c:	d8c00017 	ldw	r3,0(sp)
8020c180:	da000117 	ldw	r8,4(sp)
8020c184:	103fc21e 	bne	r2,zero,8020c090 <__reset+0xfa1ec090>
8020c188:	182f883a 	mov	r23,r3
8020c18c:	9de7c83a 	sub	r19,r19,r23
8020c190:	983fe11e 	bne	r19,zero,8020c118 <__reset+0xfa1ec118>
8020c194:	800b883a 	mov	r5,r16
8020c198:	a809883a 	mov	r4,r21
8020c19c:	020b6380 	call	8020b638 <_fflush_r>
8020c1a0:	103fbb1e 	bne	r2,zero,8020c090 <__reset+0xfa1ec090>
8020c1a4:	0011883a 	mov	r8,zero
8020c1a8:	003fdb06 	br	8020c118 <__reset+0xfa1ec118>
8020c1ac:	94c0012e 	bgeu	r18,r19,8020c1b4 <__sfvwrite_r+0x31c>
8020c1b0:	9027883a 	mov	r19,r18
8020c1b4:	980d883a 	mov	r6,r19
8020c1b8:	e00b883a 	mov	r5,fp
8020c1bc:	020d0640 	call	8020d064 <memmove>
8020c1c0:	80800217 	ldw	r2,8(r16)
8020c1c4:	80c00017 	ldw	r3,0(r16)
8020c1c8:	14c5c83a 	sub	r2,r2,r19
8020c1cc:	1cc7883a 	add	r3,r3,r19
8020c1d0:	80800215 	stw	r2,8(r16)
8020c1d4:	80c00015 	stw	r3,0(r16)
8020c1d8:	10004326 	beq	r2,zero,8020c2e8 <__sfvwrite_r+0x450>
8020c1dc:	9805883a 	mov	r2,r19
8020c1e0:	003f8606 	br	8020bffc <__reset+0xfa1ebffc>
8020c1e4:	b00d883a 	mov	r6,r22
8020c1e8:	e00b883a 	mov	r5,fp
8020c1ec:	da000115 	stw	r8,4(sp)
8020c1f0:	020d0640 	call	8020d064 <memmove>
8020c1f4:	80800217 	ldw	r2,8(r16)
8020c1f8:	80c00017 	ldw	r3,0(r16)
8020c1fc:	da000117 	ldw	r8,4(sp)
8020c200:	1585c83a 	sub	r2,r2,r22
8020c204:	1dad883a 	add	r22,r3,r22
8020c208:	80800215 	stw	r2,8(r16)
8020c20c:	85800015 	stw	r22,0(r16)
8020c210:	003fbf06 	br	8020c110 <__reset+0xfa1ec110>
8020c214:	81000017 	ldw	r4,0(r16)
8020c218:	9027883a 	mov	r19,r18
8020c21c:	902f883a 	mov	r23,r18
8020c220:	003f6c06 	br	8020bfd4 <__reset+0xfa1ebfd4>
8020c224:	900d883a 	mov	r6,r18
8020c228:	01400284 	movi	r5,10
8020c22c:	e009883a 	mov	r4,fp
8020c230:	020cf800 	call	8020cf80 <memchr>
8020c234:	10003e26 	beq	r2,zero,8020c330 <__sfvwrite_r+0x498>
8020c238:	10800044 	addi	r2,r2,1
8020c23c:	1727c83a 	sub	r19,r2,fp
8020c240:	02000044 	movi	r8,1
8020c244:	003f9d06 	br	8020c0bc <__reset+0xfa1ec0bc>
8020c248:	80800517 	ldw	r2,20(r16)
8020c24c:	81400417 	ldw	r5,16(r16)
8020c250:	81c00017 	ldw	r7,0(r16)
8020c254:	10a7883a 	add	r19,r2,r2
8020c258:	9885883a 	add	r2,r19,r2
8020c25c:	1026d7fa 	srli	r19,r2,31
8020c260:	396dc83a 	sub	r22,r7,r5
8020c264:	b1000044 	addi	r4,r22,1
8020c268:	9885883a 	add	r2,r19,r2
8020c26c:	1027d07a 	srai	r19,r2,1
8020c270:	2485883a 	add	r2,r4,r18
8020c274:	980d883a 	mov	r6,r19
8020c278:	9880022e 	bgeu	r19,r2,8020c284 <__sfvwrite_r+0x3ec>
8020c27c:	1027883a 	mov	r19,r2
8020c280:	100d883a 	mov	r6,r2
8020c284:	18c1000c 	andi	r3,r3,1024
8020c288:	18001c26 	beq	r3,zero,8020c2fc <__sfvwrite_r+0x464>
8020c28c:	300b883a 	mov	r5,r6
8020c290:	a809883a 	mov	r4,r21
8020c294:	020c7740 	call	8020c774 <_malloc_r>
8020c298:	102f883a 	mov	r23,r2
8020c29c:	10002926 	beq	r2,zero,8020c344 <__sfvwrite_r+0x4ac>
8020c2a0:	81400417 	ldw	r5,16(r16)
8020c2a4:	b00d883a 	mov	r6,r22
8020c2a8:	1009883a 	mov	r4,r2
8020c2ac:	02051b40 	call	802051b4 <memcpy>
8020c2b0:	8080030b 	ldhu	r2,12(r16)
8020c2b4:	00fedfc4 	movi	r3,-1153
8020c2b8:	10c4703a 	and	r2,r2,r3
8020c2bc:	10802014 	ori	r2,r2,128
8020c2c0:	8080030d 	sth	r2,12(r16)
8020c2c4:	bd89883a 	add	r4,r23,r22
8020c2c8:	9d8fc83a 	sub	r7,r19,r22
8020c2cc:	85c00415 	stw	r23,16(r16)
8020c2d0:	84c00515 	stw	r19,20(r16)
8020c2d4:	81000015 	stw	r4,0(r16)
8020c2d8:	9027883a 	mov	r19,r18
8020c2dc:	81c00215 	stw	r7,8(r16)
8020c2e0:	902f883a 	mov	r23,r18
8020c2e4:	003f3b06 	br	8020bfd4 <__reset+0xfa1ebfd4>
8020c2e8:	800b883a 	mov	r5,r16
8020c2ec:	a809883a 	mov	r4,r21
8020c2f0:	020b6380 	call	8020b638 <_fflush_r>
8020c2f4:	103fb926 	beq	r2,zero,8020c1dc <__reset+0xfa1ec1dc>
8020c2f8:	003f6506 	br	8020c090 <__reset+0xfa1ec090>
8020c2fc:	a809883a 	mov	r4,r21
8020c300:	020e2e40 	call	8020e2e4 <_realloc_r>
8020c304:	102f883a 	mov	r23,r2
8020c308:	103fee1e 	bne	r2,zero,8020c2c4 <__reset+0xfa1ec2c4>
8020c30c:	81400417 	ldw	r5,16(r16)
8020c310:	a809883a 	mov	r4,r21
8020c314:	020bb880 	call	8020bb88 <_free_r>
8020c318:	8080030b 	ldhu	r2,12(r16)
8020c31c:	00ffdfc4 	movi	r3,-129
8020c320:	1884703a 	and	r2,r3,r2
8020c324:	00c00304 	movi	r3,12
8020c328:	a8c00015 	stw	r3,0(r21)
8020c32c:	003f5906 	br	8020c094 <__reset+0xfa1ec094>
8020c330:	94c00044 	addi	r19,r18,1
8020c334:	02000044 	movi	r8,1
8020c338:	003f6006 	br	8020c0bc <__reset+0xfa1ec0bc>
8020c33c:	00bfffc4 	movi	r2,-1
8020c340:	003f0306 	br	8020bf50 <__reset+0xfa1ebf50>
8020c344:	00800304 	movi	r2,12
8020c348:	a8800015 	stw	r2,0(r21)
8020c34c:	8080030b 	ldhu	r2,12(r16)
8020c350:	003f5006 	br	8020c094 <__reset+0xfa1ec094>

8020c354 <_fwalk>:
8020c354:	defff704 	addi	sp,sp,-36
8020c358:	dd000415 	stw	r20,16(sp)
8020c35c:	dfc00815 	stw	ra,32(sp)
8020c360:	ddc00715 	stw	r23,28(sp)
8020c364:	dd800615 	stw	r22,24(sp)
8020c368:	dd400515 	stw	r21,20(sp)
8020c36c:	dcc00315 	stw	r19,12(sp)
8020c370:	dc800215 	stw	r18,8(sp)
8020c374:	dc400115 	stw	r17,4(sp)
8020c378:	dc000015 	stw	r16,0(sp)
8020c37c:	2500b804 	addi	r20,r4,736
8020c380:	a0002326 	beq	r20,zero,8020c410 <_fwalk+0xbc>
8020c384:	282b883a 	mov	r21,r5
8020c388:	002f883a 	mov	r23,zero
8020c38c:	05800044 	movi	r22,1
8020c390:	04ffffc4 	movi	r19,-1
8020c394:	a4400117 	ldw	r17,4(r20)
8020c398:	a4800217 	ldw	r18,8(r20)
8020c39c:	8c7fffc4 	addi	r17,r17,-1
8020c3a0:	88000d16 	blt	r17,zero,8020c3d8 <_fwalk+0x84>
8020c3a4:	94000304 	addi	r16,r18,12
8020c3a8:	94800384 	addi	r18,r18,14
8020c3ac:	8080000b 	ldhu	r2,0(r16)
8020c3b0:	8c7fffc4 	addi	r17,r17,-1
8020c3b4:	813ffd04 	addi	r4,r16,-12
8020c3b8:	b080042e 	bgeu	r22,r2,8020c3cc <_fwalk+0x78>
8020c3bc:	9080000f 	ldh	r2,0(r18)
8020c3c0:	14c00226 	beq	r2,r19,8020c3cc <_fwalk+0x78>
8020c3c4:	a83ee83a 	callr	r21
8020c3c8:	b8aeb03a 	or	r23,r23,r2
8020c3cc:	84001a04 	addi	r16,r16,104
8020c3d0:	94801a04 	addi	r18,r18,104
8020c3d4:	8cfff51e 	bne	r17,r19,8020c3ac <__reset+0xfa1ec3ac>
8020c3d8:	a5000017 	ldw	r20,0(r20)
8020c3dc:	a03fed1e 	bne	r20,zero,8020c394 <__reset+0xfa1ec394>
8020c3e0:	b805883a 	mov	r2,r23
8020c3e4:	dfc00817 	ldw	ra,32(sp)
8020c3e8:	ddc00717 	ldw	r23,28(sp)
8020c3ec:	dd800617 	ldw	r22,24(sp)
8020c3f0:	dd400517 	ldw	r21,20(sp)
8020c3f4:	dd000417 	ldw	r20,16(sp)
8020c3f8:	dcc00317 	ldw	r19,12(sp)
8020c3fc:	dc800217 	ldw	r18,8(sp)
8020c400:	dc400117 	ldw	r17,4(sp)
8020c404:	dc000017 	ldw	r16,0(sp)
8020c408:	dec00904 	addi	sp,sp,36
8020c40c:	f800283a 	ret
8020c410:	002f883a 	mov	r23,zero
8020c414:	003ff206 	br	8020c3e0 <__reset+0xfa1ec3e0>

8020c418 <_fwalk_reent>:
8020c418:	defff704 	addi	sp,sp,-36
8020c41c:	dd000415 	stw	r20,16(sp)
8020c420:	dfc00815 	stw	ra,32(sp)
8020c424:	ddc00715 	stw	r23,28(sp)
8020c428:	dd800615 	stw	r22,24(sp)
8020c42c:	dd400515 	stw	r21,20(sp)
8020c430:	dcc00315 	stw	r19,12(sp)
8020c434:	dc800215 	stw	r18,8(sp)
8020c438:	dc400115 	stw	r17,4(sp)
8020c43c:	dc000015 	stw	r16,0(sp)
8020c440:	2500b804 	addi	r20,r4,736
8020c444:	a0002326 	beq	r20,zero,8020c4d4 <_fwalk_reent+0xbc>
8020c448:	282b883a 	mov	r21,r5
8020c44c:	2027883a 	mov	r19,r4
8020c450:	002f883a 	mov	r23,zero
8020c454:	05800044 	movi	r22,1
8020c458:	04bfffc4 	movi	r18,-1
8020c45c:	a4400117 	ldw	r17,4(r20)
8020c460:	a4000217 	ldw	r16,8(r20)
8020c464:	8c7fffc4 	addi	r17,r17,-1
8020c468:	88000c16 	blt	r17,zero,8020c49c <_fwalk_reent+0x84>
8020c46c:	84000304 	addi	r16,r16,12
8020c470:	8080000b 	ldhu	r2,0(r16)
8020c474:	8c7fffc4 	addi	r17,r17,-1
8020c478:	817ffd04 	addi	r5,r16,-12
8020c47c:	b080052e 	bgeu	r22,r2,8020c494 <_fwalk_reent+0x7c>
8020c480:	8080008f 	ldh	r2,2(r16)
8020c484:	9809883a 	mov	r4,r19
8020c488:	14800226 	beq	r2,r18,8020c494 <_fwalk_reent+0x7c>
8020c48c:	a83ee83a 	callr	r21
8020c490:	b8aeb03a 	or	r23,r23,r2
8020c494:	84001a04 	addi	r16,r16,104
8020c498:	8cbff51e 	bne	r17,r18,8020c470 <__reset+0xfa1ec470>
8020c49c:	a5000017 	ldw	r20,0(r20)
8020c4a0:	a03fee1e 	bne	r20,zero,8020c45c <__reset+0xfa1ec45c>
8020c4a4:	b805883a 	mov	r2,r23
8020c4a8:	dfc00817 	ldw	ra,32(sp)
8020c4ac:	ddc00717 	ldw	r23,28(sp)
8020c4b0:	dd800617 	ldw	r22,24(sp)
8020c4b4:	dd400517 	ldw	r21,20(sp)
8020c4b8:	dd000417 	ldw	r20,16(sp)
8020c4bc:	dcc00317 	ldw	r19,12(sp)
8020c4c0:	dc800217 	ldw	r18,8(sp)
8020c4c4:	dc400117 	ldw	r17,4(sp)
8020c4c8:	dc000017 	ldw	r16,0(sp)
8020c4cc:	dec00904 	addi	sp,sp,36
8020c4d0:	f800283a 	ret
8020c4d4:	002f883a 	mov	r23,zero
8020c4d8:	003ff206 	br	8020c4a4 <__reset+0xfa1ec4a4>

8020c4dc <_setlocale_r>:
8020c4dc:	30001b26 	beq	r6,zero,8020c54c <_setlocale_r+0x70>
8020c4e0:	016008b4 	movhi	r5,32802
8020c4e4:	defffe04 	addi	sp,sp,-8
8020c4e8:	296ce304 	addi	r5,r5,-19572
8020c4ec:	3009883a 	mov	r4,r6
8020c4f0:	dc000015 	stw	r16,0(sp)
8020c4f4:	dfc00115 	stw	ra,4(sp)
8020c4f8:	3021883a 	mov	r16,r6
8020c4fc:	020ea4c0 	call	8020ea4c <strcmp>
8020c500:	1000061e 	bne	r2,zero,8020c51c <_setlocale_r+0x40>
8020c504:	00a008b4 	movhi	r2,32802
8020c508:	10acbc04 	addi	r2,r2,-19728
8020c50c:	dfc00117 	ldw	ra,4(sp)
8020c510:	dc000017 	ldw	r16,0(sp)
8020c514:	dec00204 	addi	sp,sp,8
8020c518:	f800283a 	ret
8020c51c:	016008b4 	movhi	r5,32802
8020c520:	296cbc04 	addi	r5,r5,-19728
8020c524:	8009883a 	mov	r4,r16
8020c528:	020ea4c0 	call	8020ea4c <strcmp>
8020c52c:	103ff526 	beq	r2,zero,8020c504 <__reset+0xfa1ec504>
8020c530:	016008b4 	movhi	r5,32802
8020c534:	296cc604 	addi	r5,r5,-19688
8020c538:	8009883a 	mov	r4,r16
8020c53c:	020ea4c0 	call	8020ea4c <strcmp>
8020c540:	103ff026 	beq	r2,zero,8020c504 <__reset+0xfa1ec504>
8020c544:	0005883a 	mov	r2,zero
8020c548:	003ff006 	br	8020c50c <__reset+0xfa1ec50c>
8020c54c:	00a008b4 	movhi	r2,32802
8020c550:	10acbc04 	addi	r2,r2,-19728
8020c554:	f800283a 	ret

8020c558 <__locale_charset>:
8020c558:	00a008b4 	movhi	r2,32802
8020c55c:	10aef904 	addi	r2,r2,-17436
8020c560:	f800283a 	ret

8020c564 <__locale_mb_cur_max>:
8020c564:	00a008b4 	movhi	r2,32802
8020c568:	10b50604 	addi	r2,r2,-11240
8020c56c:	10800017 	ldw	r2,0(r2)
8020c570:	f800283a 	ret

8020c574 <__locale_msgcharset>:
8020c574:	00a008b4 	movhi	r2,32802
8020c578:	10aef104 	addi	r2,r2,-17468
8020c57c:	f800283a 	ret

8020c580 <__locale_cjk_lang>:
8020c580:	0005883a 	mov	r2,zero
8020c584:	f800283a 	ret

8020c588 <_localeconv_r>:
8020c588:	00a008b4 	movhi	r2,32802
8020c58c:	10af0104 	addi	r2,r2,-17404
8020c590:	f800283a 	ret

8020c594 <setlocale>:
8020c594:	00a008b4 	movhi	r2,32802
8020c598:	10b50504 	addi	r2,r2,-11244
8020c59c:	280d883a 	mov	r6,r5
8020c5a0:	200b883a 	mov	r5,r4
8020c5a4:	11000017 	ldw	r4,0(r2)
8020c5a8:	020c4dc1 	jmpi	8020c4dc <_setlocale_r>

8020c5ac <localeconv>:
8020c5ac:	00a008b4 	movhi	r2,32802
8020c5b0:	10af0104 	addi	r2,r2,-17404
8020c5b4:	f800283a 	ret

8020c5b8 <__smakebuf_r>:
8020c5b8:	2880030b 	ldhu	r2,12(r5)
8020c5bc:	10c0008c 	andi	r3,r2,2
8020c5c0:	1800411e 	bne	r3,zero,8020c6c8 <__smakebuf_r+0x110>
8020c5c4:	deffec04 	addi	sp,sp,-80
8020c5c8:	dc000f15 	stw	r16,60(sp)
8020c5cc:	2821883a 	mov	r16,r5
8020c5d0:	2940038f 	ldh	r5,14(r5)
8020c5d4:	dc401015 	stw	r17,64(sp)
8020c5d8:	dfc01315 	stw	ra,76(sp)
8020c5dc:	dcc01215 	stw	r19,72(sp)
8020c5e0:	dc801115 	stw	r18,68(sp)
8020c5e4:	2023883a 	mov	r17,r4
8020c5e8:	28001c16 	blt	r5,zero,8020c65c <__smakebuf_r+0xa4>
8020c5ec:	d80d883a 	mov	r6,sp
8020c5f0:	0211a000 	call	80211a00 <_fstat_r>
8020c5f4:	10001816 	blt	r2,zero,8020c658 <__smakebuf_r+0xa0>
8020c5f8:	d8800117 	ldw	r2,4(sp)
8020c5fc:	00e00014 	movui	r3,32768
8020c600:	10bc000c 	andi	r2,r2,61440
8020c604:	14c80020 	cmpeqi	r19,r2,8192
8020c608:	10c03726 	beq	r2,r3,8020c6e8 <__smakebuf_r+0x130>
8020c60c:	80c0030b 	ldhu	r3,12(r16)
8020c610:	18c20014 	ori	r3,r3,2048
8020c614:	80c0030d 	sth	r3,12(r16)
8020c618:	00c80004 	movi	r3,8192
8020c61c:	10c0521e 	bne	r2,r3,8020c768 <__smakebuf_r+0x1b0>
8020c620:	8140038f 	ldh	r5,14(r16)
8020c624:	8809883a 	mov	r4,r17
8020c628:	0211a5c0 	call	80211a5c <_isatty_r>
8020c62c:	10004c26 	beq	r2,zero,8020c760 <__smakebuf_r+0x1a8>
8020c630:	8080030b 	ldhu	r2,12(r16)
8020c634:	80c010c4 	addi	r3,r16,67
8020c638:	80c00015 	stw	r3,0(r16)
8020c63c:	10800054 	ori	r2,r2,1
8020c640:	8080030d 	sth	r2,12(r16)
8020c644:	00800044 	movi	r2,1
8020c648:	80c00415 	stw	r3,16(r16)
8020c64c:	80800515 	stw	r2,20(r16)
8020c650:	04810004 	movi	r18,1024
8020c654:	00000706 	br	8020c674 <__smakebuf_r+0xbc>
8020c658:	8080030b 	ldhu	r2,12(r16)
8020c65c:	10c0200c 	andi	r3,r2,128
8020c660:	18001f1e 	bne	r3,zero,8020c6e0 <__smakebuf_r+0x128>
8020c664:	04810004 	movi	r18,1024
8020c668:	10820014 	ori	r2,r2,2048
8020c66c:	8080030d 	sth	r2,12(r16)
8020c670:	0027883a 	mov	r19,zero
8020c674:	900b883a 	mov	r5,r18
8020c678:	8809883a 	mov	r4,r17
8020c67c:	020c7740 	call	8020c774 <_malloc_r>
8020c680:	10002c26 	beq	r2,zero,8020c734 <__smakebuf_r+0x17c>
8020c684:	80c0030b 	ldhu	r3,12(r16)
8020c688:	01200874 	movhi	r4,32801
8020c68c:	212db304 	addi	r4,r4,-18740
8020c690:	89000f15 	stw	r4,60(r17)
8020c694:	18c02014 	ori	r3,r3,128
8020c698:	80c0030d 	sth	r3,12(r16)
8020c69c:	80800015 	stw	r2,0(r16)
8020c6a0:	80800415 	stw	r2,16(r16)
8020c6a4:	84800515 	stw	r18,20(r16)
8020c6a8:	98001a1e 	bne	r19,zero,8020c714 <__smakebuf_r+0x15c>
8020c6ac:	dfc01317 	ldw	ra,76(sp)
8020c6b0:	dcc01217 	ldw	r19,72(sp)
8020c6b4:	dc801117 	ldw	r18,68(sp)
8020c6b8:	dc401017 	ldw	r17,64(sp)
8020c6bc:	dc000f17 	ldw	r16,60(sp)
8020c6c0:	dec01404 	addi	sp,sp,80
8020c6c4:	f800283a 	ret
8020c6c8:	288010c4 	addi	r2,r5,67
8020c6cc:	28800015 	stw	r2,0(r5)
8020c6d0:	28800415 	stw	r2,16(r5)
8020c6d4:	00800044 	movi	r2,1
8020c6d8:	28800515 	stw	r2,20(r5)
8020c6dc:	f800283a 	ret
8020c6e0:	04801004 	movi	r18,64
8020c6e4:	003fe006 	br	8020c668 <__reset+0xfa1ec668>
8020c6e8:	81000a17 	ldw	r4,40(r16)
8020c6ec:	00e00874 	movhi	r3,32801
8020c6f0:	18fa7a04 	addi	r3,r3,-5656
8020c6f4:	20ffc51e 	bne	r4,r3,8020c60c <__reset+0xfa1ec60c>
8020c6f8:	8080030b 	ldhu	r2,12(r16)
8020c6fc:	04810004 	movi	r18,1024
8020c700:	84801315 	stw	r18,76(r16)
8020c704:	1484b03a 	or	r2,r2,r18
8020c708:	8080030d 	sth	r2,12(r16)
8020c70c:	0027883a 	mov	r19,zero
8020c710:	003fd806 	br	8020c674 <__reset+0xfa1ec674>
8020c714:	8140038f 	ldh	r5,14(r16)
8020c718:	8809883a 	mov	r4,r17
8020c71c:	0211a5c0 	call	80211a5c <_isatty_r>
8020c720:	103fe226 	beq	r2,zero,8020c6ac <__reset+0xfa1ec6ac>
8020c724:	8080030b 	ldhu	r2,12(r16)
8020c728:	10800054 	ori	r2,r2,1
8020c72c:	8080030d 	sth	r2,12(r16)
8020c730:	003fde06 	br	8020c6ac <__reset+0xfa1ec6ac>
8020c734:	8080030b 	ldhu	r2,12(r16)
8020c738:	10c0800c 	andi	r3,r2,512
8020c73c:	183fdb1e 	bne	r3,zero,8020c6ac <__reset+0xfa1ec6ac>
8020c740:	10800094 	ori	r2,r2,2
8020c744:	80c010c4 	addi	r3,r16,67
8020c748:	8080030d 	sth	r2,12(r16)
8020c74c:	00800044 	movi	r2,1
8020c750:	80c00015 	stw	r3,0(r16)
8020c754:	80c00415 	stw	r3,16(r16)
8020c758:	80800515 	stw	r2,20(r16)
8020c75c:	003fd306 	br	8020c6ac <__reset+0xfa1ec6ac>
8020c760:	04810004 	movi	r18,1024
8020c764:	003fc306 	br	8020c674 <__reset+0xfa1ec674>
8020c768:	0027883a 	mov	r19,zero
8020c76c:	04810004 	movi	r18,1024
8020c770:	003fc006 	br	8020c674 <__reset+0xfa1ec674>

8020c774 <_malloc_r>:
8020c774:	defff504 	addi	sp,sp,-44
8020c778:	dc800315 	stw	r18,12(sp)
8020c77c:	dfc00a15 	stw	ra,40(sp)
8020c780:	df000915 	stw	fp,36(sp)
8020c784:	ddc00815 	stw	r23,32(sp)
8020c788:	dd800715 	stw	r22,28(sp)
8020c78c:	dd400615 	stw	r21,24(sp)
8020c790:	dd000515 	stw	r20,20(sp)
8020c794:	dcc00415 	stw	r19,16(sp)
8020c798:	dc400215 	stw	r17,8(sp)
8020c79c:	dc000115 	stw	r16,4(sp)
8020c7a0:	288002c4 	addi	r2,r5,11
8020c7a4:	00c00584 	movi	r3,22
8020c7a8:	2025883a 	mov	r18,r4
8020c7ac:	18807f2e 	bgeu	r3,r2,8020c9ac <_malloc_r+0x238>
8020c7b0:	047ffe04 	movi	r17,-8
8020c7b4:	1462703a 	and	r17,r2,r17
8020c7b8:	8800a316 	blt	r17,zero,8020ca48 <_malloc_r+0x2d4>
8020c7bc:	8940a236 	bltu	r17,r5,8020ca48 <_malloc_r+0x2d4>
8020c7c0:	02156f00 	call	802156f0 <__malloc_lock>
8020c7c4:	00807dc4 	movi	r2,503
8020c7c8:	1441e92e 	bgeu	r2,r17,8020cf70 <_malloc_r+0x7fc>
8020c7cc:	8804d27a 	srli	r2,r17,9
8020c7d0:	1000a126 	beq	r2,zero,8020ca58 <_malloc_r+0x2e4>
8020c7d4:	00c00104 	movi	r3,4
8020c7d8:	18811e36 	bltu	r3,r2,8020cc54 <_malloc_r+0x4e0>
8020c7dc:	8804d1ba 	srli	r2,r17,6
8020c7e0:	12000e44 	addi	r8,r2,57
8020c7e4:	11c00e04 	addi	r7,r2,56
8020c7e8:	4209883a 	add	r4,r8,r8
8020c7ec:	04e008b4 	movhi	r19,32802
8020c7f0:	2109883a 	add	r4,r4,r4
8020c7f4:	9cef0f04 	addi	r19,r19,-17348
8020c7f8:	2109883a 	add	r4,r4,r4
8020c7fc:	9909883a 	add	r4,r19,r4
8020c800:	24000117 	ldw	r16,4(r4)
8020c804:	213ffe04 	addi	r4,r4,-8
8020c808:	24009726 	beq	r4,r16,8020ca68 <_malloc_r+0x2f4>
8020c80c:	80800117 	ldw	r2,4(r16)
8020c810:	01bfff04 	movi	r6,-4
8020c814:	014003c4 	movi	r5,15
8020c818:	1184703a 	and	r2,r2,r6
8020c81c:	1447c83a 	sub	r3,r2,r17
8020c820:	28c00716 	blt	r5,r3,8020c840 <_malloc_r+0xcc>
8020c824:	1800920e 	bge	r3,zero,8020ca70 <_malloc_r+0x2fc>
8020c828:	84000317 	ldw	r16,12(r16)
8020c82c:	24008e26 	beq	r4,r16,8020ca68 <_malloc_r+0x2f4>
8020c830:	80800117 	ldw	r2,4(r16)
8020c834:	1184703a 	and	r2,r2,r6
8020c838:	1447c83a 	sub	r3,r2,r17
8020c83c:	28fff90e 	bge	r5,r3,8020c824 <__reset+0xfa1ec824>
8020c840:	3809883a 	mov	r4,r7
8020c844:	01a008b4 	movhi	r6,32802
8020c848:	9c000417 	ldw	r16,16(r19)
8020c84c:	31af0f04 	addi	r6,r6,-17348
8020c850:	32000204 	addi	r8,r6,8
8020c854:	82013426 	beq	r16,r8,8020cd28 <_malloc_r+0x5b4>
8020c858:	80c00117 	ldw	r3,4(r16)
8020c85c:	00bfff04 	movi	r2,-4
8020c860:	188e703a 	and	r7,r3,r2
8020c864:	3c45c83a 	sub	r2,r7,r17
8020c868:	00c003c4 	movi	r3,15
8020c86c:	18811f16 	blt	r3,r2,8020ccec <_malloc_r+0x578>
8020c870:	32000515 	stw	r8,20(r6)
8020c874:	32000415 	stw	r8,16(r6)
8020c878:	10007f0e 	bge	r2,zero,8020ca78 <_malloc_r+0x304>
8020c87c:	00807fc4 	movi	r2,511
8020c880:	11c0fd36 	bltu	r2,r7,8020cc78 <_malloc_r+0x504>
8020c884:	3806d0fa 	srli	r3,r7,3
8020c888:	01c00044 	movi	r7,1
8020c88c:	30800117 	ldw	r2,4(r6)
8020c890:	19400044 	addi	r5,r3,1
8020c894:	294b883a 	add	r5,r5,r5
8020c898:	1807d0ba 	srai	r3,r3,2
8020c89c:	294b883a 	add	r5,r5,r5
8020c8a0:	294b883a 	add	r5,r5,r5
8020c8a4:	298b883a 	add	r5,r5,r6
8020c8a8:	38c6983a 	sll	r3,r7,r3
8020c8ac:	29c00017 	ldw	r7,0(r5)
8020c8b0:	2a7ffe04 	addi	r9,r5,-8
8020c8b4:	1886b03a 	or	r3,r3,r2
8020c8b8:	82400315 	stw	r9,12(r16)
8020c8bc:	81c00215 	stw	r7,8(r16)
8020c8c0:	30c00115 	stw	r3,4(r6)
8020c8c4:	2c000015 	stw	r16,0(r5)
8020c8c8:	3c000315 	stw	r16,12(r7)
8020c8cc:	2005d0ba 	srai	r2,r4,2
8020c8d0:	01400044 	movi	r5,1
8020c8d4:	288a983a 	sll	r5,r5,r2
8020c8d8:	19406f36 	bltu	r3,r5,8020ca98 <_malloc_r+0x324>
8020c8dc:	28c4703a 	and	r2,r5,r3
8020c8e0:	10000a1e 	bne	r2,zero,8020c90c <_malloc_r+0x198>
8020c8e4:	00bfff04 	movi	r2,-4
8020c8e8:	294b883a 	add	r5,r5,r5
8020c8ec:	2088703a 	and	r4,r4,r2
8020c8f0:	28c4703a 	and	r2,r5,r3
8020c8f4:	21000104 	addi	r4,r4,4
8020c8f8:	1000041e 	bne	r2,zero,8020c90c <_malloc_r+0x198>
8020c8fc:	294b883a 	add	r5,r5,r5
8020c900:	28c4703a 	and	r2,r5,r3
8020c904:	21000104 	addi	r4,r4,4
8020c908:	103ffc26 	beq	r2,zero,8020c8fc <__reset+0xfa1ec8fc>
8020c90c:	02bfff04 	movi	r10,-4
8020c910:	024003c4 	movi	r9,15
8020c914:	21800044 	addi	r6,r4,1
8020c918:	318d883a 	add	r6,r6,r6
8020c91c:	318d883a 	add	r6,r6,r6
8020c920:	318d883a 	add	r6,r6,r6
8020c924:	998d883a 	add	r6,r19,r6
8020c928:	333ffe04 	addi	r12,r6,-8
8020c92c:	2017883a 	mov	r11,r4
8020c930:	31800104 	addi	r6,r6,4
8020c934:	34000017 	ldw	r16,0(r6)
8020c938:	31fffd04 	addi	r7,r6,-12
8020c93c:	81c0041e 	bne	r16,r7,8020c950 <_malloc_r+0x1dc>
8020c940:	0000fb06 	br	8020cd30 <_malloc_r+0x5bc>
8020c944:	1801030e 	bge	r3,zero,8020cd54 <_malloc_r+0x5e0>
8020c948:	84000317 	ldw	r16,12(r16)
8020c94c:	81c0f826 	beq	r16,r7,8020cd30 <_malloc_r+0x5bc>
8020c950:	80800117 	ldw	r2,4(r16)
8020c954:	1284703a 	and	r2,r2,r10
8020c958:	1447c83a 	sub	r3,r2,r17
8020c95c:	48fff90e 	bge	r9,r3,8020c944 <__reset+0xfa1ec944>
8020c960:	80800317 	ldw	r2,12(r16)
8020c964:	81000217 	ldw	r4,8(r16)
8020c968:	89400054 	ori	r5,r17,1
8020c96c:	81400115 	stw	r5,4(r16)
8020c970:	20800315 	stw	r2,12(r4)
8020c974:	11000215 	stw	r4,8(r2)
8020c978:	8463883a 	add	r17,r16,r17
8020c97c:	9c400515 	stw	r17,20(r19)
8020c980:	9c400415 	stw	r17,16(r19)
8020c984:	18800054 	ori	r2,r3,1
8020c988:	88800115 	stw	r2,4(r17)
8020c98c:	8a000315 	stw	r8,12(r17)
8020c990:	8a000215 	stw	r8,8(r17)
8020c994:	88e3883a 	add	r17,r17,r3
8020c998:	88c00015 	stw	r3,0(r17)
8020c99c:	9009883a 	mov	r4,r18
8020c9a0:	02157140 	call	80215714 <__malloc_unlock>
8020c9a4:	80800204 	addi	r2,r16,8
8020c9a8:	00001b06 	br	8020ca18 <_malloc_r+0x2a4>
8020c9ac:	04400404 	movi	r17,16
8020c9b0:	89402536 	bltu	r17,r5,8020ca48 <_malloc_r+0x2d4>
8020c9b4:	02156f00 	call	802156f0 <__malloc_lock>
8020c9b8:	00800184 	movi	r2,6
8020c9bc:	01000084 	movi	r4,2
8020c9c0:	04e008b4 	movhi	r19,32802
8020c9c4:	1085883a 	add	r2,r2,r2
8020c9c8:	9cef0f04 	addi	r19,r19,-17348
8020c9cc:	1085883a 	add	r2,r2,r2
8020c9d0:	9885883a 	add	r2,r19,r2
8020c9d4:	14000117 	ldw	r16,4(r2)
8020c9d8:	10fffe04 	addi	r3,r2,-8
8020c9dc:	80c0d926 	beq	r16,r3,8020cd44 <_malloc_r+0x5d0>
8020c9e0:	80c00117 	ldw	r3,4(r16)
8020c9e4:	81000317 	ldw	r4,12(r16)
8020c9e8:	00bfff04 	movi	r2,-4
8020c9ec:	1884703a 	and	r2,r3,r2
8020c9f0:	81400217 	ldw	r5,8(r16)
8020c9f4:	8085883a 	add	r2,r16,r2
8020c9f8:	10c00117 	ldw	r3,4(r2)
8020c9fc:	29000315 	stw	r4,12(r5)
8020ca00:	21400215 	stw	r5,8(r4)
8020ca04:	18c00054 	ori	r3,r3,1
8020ca08:	10c00115 	stw	r3,4(r2)
8020ca0c:	9009883a 	mov	r4,r18
8020ca10:	02157140 	call	80215714 <__malloc_unlock>
8020ca14:	80800204 	addi	r2,r16,8
8020ca18:	dfc00a17 	ldw	ra,40(sp)
8020ca1c:	df000917 	ldw	fp,36(sp)
8020ca20:	ddc00817 	ldw	r23,32(sp)
8020ca24:	dd800717 	ldw	r22,28(sp)
8020ca28:	dd400617 	ldw	r21,24(sp)
8020ca2c:	dd000517 	ldw	r20,20(sp)
8020ca30:	dcc00417 	ldw	r19,16(sp)
8020ca34:	dc800317 	ldw	r18,12(sp)
8020ca38:	dc400217 	ldw	r17,8(sp)
8020ca3c:	dc000117 	ldw	r16,4(sp)
8020ca40:	dec00b04 	addi	sp,sp,44
8020ca44:	f800283a 	ret
8020ca48:	00800304 	movi	r2,12
8020ca4c:	90800015 	stw	r2,0(r18)
8020ca50:	0005883a 	mov	r2,zero
8020ca54:	003ff006 	br	8020ca18 <__reset+0xfa1eca18>
8020ca58:	01002004 	movi	r4,128
8020ca5c:	02001004 	movi	r8,64
8020ca60:	01c00fc4 	movi	r7,63
8020ca64:	003f6106 	br	8020c7ec <__reset+0xfa1ec7ec>
8020ca68:	4009883a 	mov	r4,r8
8020ca6c:	003f7506 	br	8020c844 <__reset+0xfa1ec844>
8020ca70:	81000317 	ldw	r4,12(r16)
8020ca74:	003fde06 	br	8020c9f0 <__reset+0xfa1ec9f0>
8020ca78:	81c5883a 	add	r2,r16,r7
8020ca7c:	11400117 	ldw	r5,4(r2)
8020ca80:	9009883a 	mov	r4,r18
8020ca84:	29400054 	ori	r5,r5,1
8020ca88:	11400115 	stw	r5,4(r2)
8020ca8c:	02157140 	call	80215714 <__malloc_unlock>
8020ca90:	80800204 	addi	r2,r16,8
8020ca94:	003fe006 	br	8020ca18 <__reset+0xfa1eca18>
8020ca98:	9c000217 	ldw	r16,8(r19)
8020ca9c:	00bfff04 	movi	r2,-4
8020caa0:	85800117 	ldw	r22,4(r16)
8020caa4:	b0ac703a 	and	r22,r22,r2
8020caa8:	b4400336 	bltu	r22,r17,8020cab8 <_malloc_r+0x344>
8020caac:	b445c83a 	sub	r2,r22,r17
8020cab0:	00c003c4 	movi	r3,15
8020cab4:	18805d16 	blt	r3,r2,8020cc2c <_malloc_r+0x4b8>
8020cab8:	05e008b4 	movhi	r23,32802
8020cabc:	00a008b4 	movhi	r2,32802
8020cac0:	10b52204 	addi	r2,r2,-11128
8020cac4:	bdf50704 	addi	r23,r23,-11236
8020cac8:	15400017 	ldw	r21,0(r2)
8020cacc:	b8c00017 	ldw	r3,0(r23)
8020cad0:	00bfffc4 	movi	r2,-1
8020cad4:	858d883a 	add	r6,r16,r22
8020cad8:	8d6b883a 	add	r21,r17,r21
8020cadc:	1880ea26 	beq	r3,r2,8020ce88 <_malloc_r+0x714>
8020cae0:	ad4403c4 	addi	r21,r21,4111
8020cae4:	00bc0004 	movi	r2,-4096
8020cae8:	a8aa703a 	and	r21,r21,r2
8020caec:	a80b883a 	mov	r5,r21
8020caf0:	9009883a 	mov	r4,r18
8020caf4:	d9800015 	stw	r6,0(sp)
8020caf8:	020e8bc0 	call	8020e8bc <_sbrk_r>
8020cafc:	1029883a 	mov	r20,r2
8020cb00:	00bfffc4 	movi	r2,-1
8020cb04:	d9800017 	ldw	r6,0(sp)
8020cb08:	a080e826 	beq	r20,r2,8020ceac <_malloc_r+0x738>
8020cb0c:	a180a636 	bltu	r20,r6,8020cda8 <_malloc_r+0x634>
8020cb10:	072008b4 	movhi	fp,32802
8020cb14:	e7352b04 	addi	fp,fp,-11092
8020cb18:	e0800017 	ldw	r2,0(fp)
8020cb1c:	a887883a 	add	r3,r21,r2
8020cb20:	e0c00015 	stw	r3,0(fp)
8020cb24:	3500e626 	beq	r6,r20,8020cec0 <_malloc_r+0x74c>
8020cb28:	b9000017 	ldw	r4,0(r23)
8020cb2c:	00bfffc4 	movi	r2,-1
8020cb30:	2080ee26 	beq	r4,r2,8020ceec <_malloc_r+0x778>
8020cb34:	a185c83a 	sub	r2,r20,r6
8020cb38:	10c5883a 	add	r2,r2,r3
8020cb3c:	e0800015 	stw	r2,0(fp)
8020cb40:	a0c001cc 	andi	r3,r20,7
8020cb44:	1800bc26 	beq	r3,zero,8020ce38 <_malloc_r+0x6c4>
8020cb48:	a0e9c83a 	sub	r20,r20,r3
8020cb4c:	00840204 	movi	r2,4104
8020cb50:	a5000204 	addi	r20,r20,8
8020cb54:	10c7c83a 	sub	r3,r2,r3
8020cb58:	a545883a 	add	r2,r20,r21
8020cb5c:	1083ffcc 	andi	r2,r2,4095
8020cb60:	18abc83a 	sub	r21,r3,r2
8020cb64:	a80b883a 	mov	r5,r21
8020cb68:	9009883a 	mov	r4,r18
8020cb6c:	020e8bc0 	call	8020e8bc <_sbrk_r>
8020cb70:	00ffffc4 	movi	r3,-1
8020cb74:	10c0e126 	beq	r2,r3,8020cefc <_malloc_r+0x788>
8020cb78:	1505c83a 	sub	r2,r2,r20
8020cb7c:	1545883a 	add	r2,r2,r21
8020cb80:	10800054 	ori	r2,r2,1
8020cb84:	e0c00017 	ldw	r3,0(fp)
8020cb88:	9d000215 	stw	r20,8(r19)
8020cb8c:	a0800115 	stw	r2,4(r20)
8020cb90:	a8c7883a 	add	r3,r21,r3
8020cb94:	e0c00015 	stw	r3,0(fp)
8020cb98:	84c00e26 	beq	r16,r19,8020cbd4 <_malloc_r+0x460>
8020cb9c:	018003c4 	movi	r6,15
8020cba0:	3580a72e 	bgeu	r6,r22,8020ce40 <_malloc_r+0x6cc>
8020cba4:	81400117 	ldw	r5,4(r16)
8020cba8:	013ffe04 	movi	r4,-8
8020cbac:	b0bffd04 	addi	r2,r22,-12
8020cbb0:	1104703a 	and	r2,r2,r4
8020cbb4:	2900004c 	andi	r4,r5,1
8020cbb8:	2088b03a 	or	r4,r4,r2
8020cbbc:	81000115 	stw	r4,4(r16)
8020cbc0:	01400144 	movi	r5,5
8020cbc4:	8089883a 	add	r4,r16,r2
8020cbc8:	21400115 	stw	r5,4(r4)
8020cbcc:	21400215 	stw	r5,8(r4)
8020cbd0:	3080cd36 	bltu	r6,r2,8020cf08 <_malloc_r+0x794>
8020cbd4:	00a008b4 	movhi	r2,32802
8020cbd8:	10b52104 	addi	r2,r2,-11132
8020cbdc:	11000017 	ldw	r4,0(r2)
8020cbe0:	20c0012e 	bgeu	r4,r3,8020cbe8 <_malloc_r+0x474>
8020cbe4:	10c00015 	stw	r3,0(r2)
8020cbe8:	00a008b4 	movhi	r2,32802
8020cbec:	10b52004 	addi	r2,r2,-11136
8020cbf0:	11000017 	ldw	r4,0(r2)
8020cbf4:	9c000217 	ldw	r16,8(r19)
8020cbf8:	20c0012e 	bgeu	r4,r3,8020cc00 <_malloc_r+0x48c>
8020cbfc:	10c00015 	stw	r3,0(r2)
8020cc00:	80c00117 	ldw	r3,4(r16)
8020cc04:	00bfff04 	movi	r2,-4
8020cc08:	1886703a 	and	r3,r3,r2
8020cc0c:	1c45c83a 	sub	r2,r3,r17
8020cc10:	1c400236 	bltu	r3,r17,8020cc1c <_malloc_r+0x4a8>
8020cc14:	00c003c4 	movi	r3,15
8020cc18:	18800416 	blt	r3,r2,8020cc2c <_malloc_r+0x4b8>
8020cc1c:	9009883a 	mov	r4,r18
8020cc20:	02157140 	call	80215714 <__malloc_unlock>
8020cc24:	0005883a 	mov	r2,zero
8020cc28:	003f7b06 	br	8020ca18 <__reset+0xfa1eca18>
8020cc2c:	88c00054 	ori	r3,r17,1
8020cc30:	80c00115 	stw	r3,4(r16)
8020cc34:	8463883a 	add	r17,r16,r17
8020cc38:	10800054 	ori	r2,r2,1
8020cc3c:	9c400215 	stw	r17,8(r19)
8020cc40:	88800115 	stw	r2,4(r17)
8020cc44:	9009883a 	mov	r4,r18
8020cc48:	02157140 	call	80215714 <__malloc_unlock>
8020cc4c:	80800204 	addi	r2,r16,8
8020cc50:	003f7106 	br	8020ca18 <__reset+0xfa1eca18>
8020cc54:	00c00504 	movi	r3,20
8020cc58:	18804a2e 	bgeu	r3,r2,8020cd84 <_malloc_r+0x610>
8020cc5c:	00c01504 	movi	r3,84
8020cc60:	18806e36 	bltu	r3,r2,8020ce1c <_malloc_r+0x6a8>
8020cc64:	8804d33a 	srli	r2,r17,12
8020cc68:	12001bc4 	addi	r8,r2,111
8020cc6c:	11c01b84 	addi	r7,r2,110
8020cc70:	4209883a 	add	r4,r8,r8
8020cc74:	003edd06 	br	8020c7ec <__reset+0xfa1ec7ec>
8020cc78:	3804d27a 	srli	r2,r7,9
8020cc7c:	00c00104 	movi	r3,4
8020cc80:	1880442e 	bgeu	r3,r2,8020cd94 <_malloc_r+0x620>
8020cc84:	00c00504 	movi	r3,20
8020cc88:	18808136 	bltu	r3,r2,8020ce90 <_malloc_r+0x71c>
8020cc8c:	11401704 	addi	r5,r2,92
8020cc90:	10c016c4 	addi	r3,r2,91
8020cc94:	294b883a 	add	r5,r5,r5
8020cc98:	294b883a 	add	r5,r5,r5
8020cc9c:	294b883a 	add	r5,r5,r5
8020cca0:	994b883a 	add	r5,r19,r5
8020cca4:	28800017 	ldw	r2,0(r5)
8020cca8:	01a008b4 	movhi	r6,32802
8020ccac:	297ffe04 	addi	r5,r5,-8
8020ccb0:	31af0f04 	addi	r6,r6,-17348
8020ccb4:	28806526 	beq	r5,r2,8020ce4c <_malloc_r+0x6d8>
8020ccb8:	01bfff04 	movi	r6,-4
8020ccbc:	10c00117 	ldw	r3,4(r2)
8020ccc0:	1986703a 	and	r3,r3,r6
8020ccc4:	38c0022e 	bgeu	r7,r3,8020ccd0 <_malloc_r+0x55c>
8020ccc8:	10800217 	ldw	r2,8(r2)
8020cccc:	28bffb1e 	bne	r5,r2,8020ccbc <__reset+0xfa1eccbc>
8020ccd0:	11400317 	ldw	r5,12(r2)
8020ccd4:	98c00117 	ldw	r3,4(r19)
8020ccd8:	81400315 	stw	r5,12(r16)
8020ccdc:	80800215 	stw	r2,8(r16)
8020cce0:	2c000215 	stw	r16,8(r5)
8020cce4:	14000315 	stw	r16,12(r2)
8020cce8:	003ef806 	br	8020c8cc <__reset+0xfa1ec8cc>
8020ccec:	88c00054 	ori	r3,r17,1
8020ccf0:	80c00115 	stw	r3,4(r16)
8020ccf4:	8463883a 	add	r17,r16,r17
8020ccf8:	34400515 	stw	r17,20(r6)
8020ccfc:	34400415 	stw	r17,16(r6)
8020cd00:	10c00054 	ori	r3,r2,1
8020cd04:	8a000315 	stw	r8,12(r17)
8020cd08:	8a000215 	stw	r8,8(r17)
8020cd0c:	88c00115 	stw	r3,4(r17)
8020cd10:	88a3883a 	add	r17,r17,r2
8020cd14:	88800015 	stw	r2,0(r17)
8020cd18:	9009883a 	mov	r4,r18
8020cd1c:	02157140 	call	80215714 <__malloc_unlock>
8020cd20:	80800204 	addi	r2,r16,8
8020cd24:	003f3c06 	br	8020ca18 <__reset+0xfa1eca18>
8020cd28:	30c00117 	ldw	r3,4(r6)
8020cd2c:	003ee706 	br	8020c8cc <__reset+0xfa1ec8cc>
8020cd30:	5ac00044 	addi	r11,r11,1
8020cd34:	588000cc 	andi	r2,r11,3
8020cd38:	31800204 	addi	r6,r6,8
8020cd3c:	103efd1e 	bne	r2,zero,8020c934 <__reset+0xfa1ec934>
8020cd40:	00002406 	br	8020cdd4 <_malloc_r+0x660>
8020cd44:	14000317 	ldw	r16,12(r2)
8020cd48:	143f251e 	bne	r2,r16,8020c9e0 <__reset+0xfa1ec9e0>
8020cd4c:	21000084 	addi	r4,r4,2
8020cd50:	003ebc06 	br	8020c844 <__reset+0xfa1ec844>
8020cd54:	8085883a 	add	r2,r16,r2
8020cd58:	10c00117 	ldw	r3,4(r2)
8020cd5c:	81000317 	ldw	r4,12(r16)
8020cd60:	81400217 	ldw	r5,8(r16)
8020cd64:	18c00054 	ori	r3,r3,1
8020cd68:	10c00115 	stw	r3,4(r2)
8020cd6c:	29000315 	stw	r4,12(r5)
8020cd70:	21400215 	stw	r5,8(r4)
8020cd74:	9009883a 	mov	r4,r18
8020cd78:	02157140 	call	80215714 <__malloc_unlock>
8020cd7c:	80800204 	addi	r2,r16,8
8020cd80:	003f2506 	br	8020ca18 <__reset+0xfa1eca18>
8020cd84:	12001704 	addi	r8,r2,92
8020cd88:	11c016c4 	addi	r7,r2,91
8020cd8c:	4209883a 	add	r4,r8,r8
8020cd90:	003e9606 	br	8020c7ec <__reset+0xfa1ec7ec>
8020cd94:	3804d1ba 	srli	r2,r7,6
8020cd98:	11400e44 	addi	r5,r2,57
8020cd9c:	10c00e04 	addi	r3,r2,56
8020cda0:	294b883a 	add	r5,r5,r5
8020cda4:	003fbc06 	br	8020cc98 <__reset+0xfa1ecc98>
8020cda8:	84ff5926 	beq	r16,r19,8020cb10 <__reset+0xfa1ecb10>
8020cdac:	00a008b4 	movhi	r2,32802
8020cdb0:	10af0f04 	addi	r2,r2,-17348
8020cdb4:	14000217 	ldw	r16,8(r2)
8020cdb8:	00bfff04 	movi	r2,-4
8020cdbc:	80c00117 	ldw	r3,4(r16)
8020cdc0:	1886703a 	and	r3,r3,r2
8020cdc4:	003f9106 	br	8020cc0c <__reset+0xfa1ecc0c>
8020cdc8:	60800217 	ldw	r2,8(r12)
8020cdcc:	213fffc4 	addi	r4,r4,-1
8020cdd0:	1300651e 	bne	r2,r12,8020cf68 <_malloc_r+0x7f4>
8020cdd4:	208000cc 	andi	r2,r4,3
8020cdd8:	633ffe04 	addi	r12,r12,-8
8020cddc:	103ffa1e 	bne	r2,zero,8020cdc8 <__reset+0xfa1ecdc8>
8020cde0:	98800117 	ldw	r2,4(r19)
8020cde4:	0146303a 	nor	r3,zero,r5
8020cde8:	1884703a 	and	r2,r3,r2
8020cdec:	98800115 	stw	r2,4(r19)
8020cdf0:	294b883a 	add	r5,r5,r5
8020cdf4:	117f2836 	bltu	r2,r5,8020ca98 <__reset+0xfa1eca98>
8020cdf8:	283f2726 	beq	r5,zero,8020ca98 <__reset+0xfa1eca98>
8020cdfc:	2886703a 	and	r3,r5,r2
8020ce00:	5809883a 	mov	r4,r11
8020ce04:	183ec31e 	bne	r3,zero,8020c914 <__reset+0xfa1ec914>
8020ce08:	294b883a 	add	r5,r5,r5
8020ce0c:	2886703a 	and	r3,r5,r2
8020ce10:	21000104 	addi	r4,r4,4
8020ce14:	183ffc26 	beq	r3,zero,8020ce08 <__reset+0xfa1ece08>
8020ce18:	003ebe06 	br	8020c914 <__reset+0xfa1ec914>
8020ce1c:	00c05504 	movi	r3,340
8020ce20:	18801236 	bltu	r3,r2,8020ce6c <_malloc_r+0x6f8>
8020ce24:	8804d3fa 	srli	r2,r17,15
8020ce28:	12001e04 	addi	r8,r2,120
8020ce2c:	11c01dc4 	addi	r7,r2,119
8020ce30:	4209883a 	add	r4,r8,r8
8020ce34:	003e6d06 	br	8020c7ec <__reset+0xfa1ec7ec>
8020ce38:	00c40004 	movi	r3,4096
8020ce3c:	003f4606 	br	8020cb58 <__reset+0xfa1ecb58>
8020ce40:	00800044 	movi	r2,1
8020ce44:	a0800115 	stw	r2,4(r20)
8020ce48:	003f7406 	br	8020cc1c <__reset+0xfa1ecc1c>
8020ce4c:	1805d0ba 	srai	r2,r3,2
8020ce50:	01c00044 	movi	r7,1
8020ce54:	30c00117 	ldw	r3,4(r6)
8020ce58:	388e983a 	sll	r7,r7,r2
8020ce5c:	2805883a 	mov	r2,r5
8020ce60:	38c6b03a 	or	r3,r7,r3
8020ce64:	30c00115 	stw	r3,4(r6)
8020ce68:	003f9b06 	br	8020ccd8 <__reset+0xfa1eccd8>
8020ce6c:	00c15504 	movi	r3,1364
8020ce70:	18801a36 	bltu	r3,r2,8020cedc <_malloc_r+0x768>
8020ce74:	8804d4ba 	srli	r2,r17,18
8020ce78:	12001f44 	addi	r8,r2,125
8020ce7c:	11c01f04 	addi	r7,r2,124
8020ce80:	4209883a 	add	r4,r8,r8
8020ce84:	003e5906 	br	8020c7ec <__reset+0xfa1ec7ec>
8020ce88:	ad400404 	addi	r21,r21,16
8020ce8c:	003f1706 	br	8020caec <__reset+0xfa1ecaec>
8020ce90:	00c01504 	movi	r3,84
8020ce94:	18802336 	bltu	r3,r2,8020cf24 <_malloc_r+0x7b0>
8020ce98:	3804d33a 	srli	r2,r7,12
8020ce9c:	11401bc4 	addi	r5,r2,111
8020cea0:	10c01b84 	addi	r3,r2,110
8020cea4:	294b883a 	add	r5,r5,r5
8020cea8:	003f7b06 	br	8020cc98 <__reset+0xfa1ecc98>
8020ceac:	9c000217 	ldw	r16,8(r19)
8020ceb0:	00bfff04 	movi	r2,-4
8020ceb4:	80c00117 	ldw	r3,4(r16)
8020ceb8:	1886703a 	and	r3,r3,r2
8020cebc:	003f5306 	br	8020cc0c <__reset+0xfa1ecc0c>
8020cec0:	3083ffcc 	andi	r2,r6,4095
8020cec4:	103f181e 	bne	r2,zero,8020cb28 <__reset+0xfa1ecb28>
8020cec8:	99000217 	ldw	r4,8(r19)
8020cecc:	b545883a 	add	r2,r22,r21
8020ced0:	10800054 	ori	r2,r2,1
8020ced4:	20800115 	stw	r2,4(r4)
8020ced8:	003f3e06 	br	8020cbd4 <__reset+0xfa1ecbd4>
8020cedc:	01003f84 	movi	r4,254
8020cee0:	02001fc4 	movi	r8,127
8020cee4:	01c01f84 	movi	r7,126
8020cee8:	003e4006 	br	8020c7ec <__reset+0xfa1ec7ec>
8020ceec:	00a008b4 	movhi	r2,32802
8020cef0:	10b50704 	addi	r2,r2,-11236
8020cef4:	15000015 	stw	r20,0(r2)
8020cef8:	003f1106 	br	8020cb40 <__reset+0xfa1ecb40>
8020cefc:	00800044 	movi	r2,1
8020cf00:	002b883a 	mov	r21,zero
8020cf04:	003f1f06 	br	8020cb84 <__reset+0xfa1ecb84>
8020cf08:	81400204 	addi	r5,r16,8
8020cf0c:	9009883a 	mov	r4,r18
8020cf10:	020bb880 	call	8020bb88 <_free_r>
8020cf14:	00a008b4 	movhi	r2,32802
8020cf18:	10b52b04 	addi	r2,r2,-11092
8020cf1c:	10c00017 	ldw	r3,0(r2)
8020cf20:	003f2c06 	br	8020cbd4 <__reset+0xfa1ecbd4>
8020cf24:	00c05504 	movi	r3,340
8020cf28:	18800536 	bltu	r3,r2,8020cf40 <_malloc_r+0x7cc>
8020cf2c:	3804d3fa 	srli	r2,r7,15
8020cf30:	11401e04 	addi	r5,r2,120
8020cf34:	10c01dc4 	addi	r3,r2,119
8020cf38:	294b883a 	add	r5,r5,r5
8020cf3c:	003f5606 	br	8020cc98 <__reset+0xfa1ecc98>
8020cf40:	00c15504 	movi	r3,1364
8020cf44:	18800536 	bltu	r3,r2,8020cf5c <_malloc_r+0x7e8>
8020cf48:	3804d4ba 	srli	r2,r7,18
8020cf4c:	11401f44 	addi	r5,r2,125
8020cf50:	10c01f04 	addi	r3,r2,124
8020cf54:	294b883a 	add	r5,r5,r5
8020cf58:	003f4f06 	br	8020cc98 <__reset+0xfa1ecc98>
8020cf5c:	01403f84 	movi	r5,254
8020cf60:	00c01f84 	movi	r3,126
8020cf64:	003f4c06 	br	8020cc98 <__reset+0xfa1ecc98>
8020cf68:	98800117 	ldw	r2,4(r19)
8020cf6c:	003fa006 	br	8020cdf0 <__reset+0xfa1ecdf0>
8020cf70:	8808d0fa 	srli	r4,r17,3
8020cf74:	20800044 	addi	r2,r4,1
8020cf78:	1085883a 	add	r2,r2,r2
8020cf7c:	003e9006 	br	8020c9c0 <__reset+0xfa1ec9c0>

8020cf80 <memchr>:
8020cf80:	208000cc 	andi	r2,r4,3
8020cf84:	280f883a 	mov	r7,r5
8020cf88:	10003426 	beq	r2,zero,8020d05c <memchr+0xdc>
8020cf8c:	30bfffc4 	addi	r2,r6,-1
8020cf90:	30001a26 	beq	r6,zero,8020cffc <memchr+0x7c>
8020cf94:	20c00003 	ldbu	r3,0(r4)
8020cf98:	29803fcc 	andi	r6,r5,255
8020cf9c:	30c0051e 	bne	r6,r3,8020cfb4 <memchr+0x34>
8020cfa0:	00001806 	br	8020d004 <memchr+0x84>
8020cfa4:	10001526 	beq	r2,zero,8020cffc <memchr+0x7c>
8020cfa8:	20c00003 	ldbu	r3,0(r4)
8020cfac:	10bfffc4 	addi	r2,r2,-1
8020cfb0:	30c01426 	beq	r6,r3,8020d004 <memchr+0x84>
8020cfb4:	21000044 	addi	r4,r4,1
8020cfb8:	20c000cc 	andi	r3,r4,3
8020cfbc:	183ff91e 	bne	r3,zero,8020cfa4 <__reset+0xfa1ecfa4>
8020cfc0:	020000c4 	movi	r8,3
8020cfc4:	40801136 	bltu	r8,r2,8020d00c <memchr+0x8c>
8020cfc8:	10000c26 	beq	r2,zero,8020cffc <memchr+0x7c>
8020cfcc:	20c00003 	ldbu	r3,0(r4)
8020cfd0:	29403fcc 	andi	r5,r5,255
8020cfd4:	28c00b26 	beq	r5,r3,8020d004 <memchr+0x84>
8020cfd8:	20c00044 	addi	r3,r4,1
8020cfdc:	39803fcc 	andi	r6,r7,255
8020cfe0:	2089883a 	add	r4,r4,r2
8020cfe4:	00000306 	br	8020cff4 <memchr+0x74>
8020cfe8:	18c00044 	addi	r3,r3,1
8020cfec:	197fffc3 	ldbu	r5,-1(r3)
8020cff0:	31400526 	beq	r6,r5,8020d008 <memchr+0x88>
8020cff4:	1805883a 	mov	r2,r3
8020cff8:	20fffb1e 	bne	r4,r3,8020cfe8 <__reset+0xfa1ecfe8>
8020cffc:	0005883a 	mov	r2,zero
8020d000:	f800283a 	ret
8020d004:	2005883a 	mov	r2,r4
8020d008:	f800283a 	ret
8020d00c:	28c03fcc 	andi	r3,r5,255
8020d010:	1812923a 	slli	r9,r3,8
8020d014:	02ffbff4 	movhi	r11,65279
8020d018:	02a02074 	movhi	r10,32897
8020d01c:	48d2b03a 	or	r9,r9,r3
8020d020:	4806943a 	slli	r3,r9,16
8020d024:	5affbfc4 	addi	r11,r11,-257
8020d028:	52a02004 	addi	r10,r10,-32640
8020d02c:	48d2b03a 	or	r9,r9,r3
8020d030:	20c00017 	ldw	r3,0(r4)
8020d034:	48c6f03a 	xor	r3,r9,r3
8020d038:	1acd883a 	add	r6,r3,r11
8020d03c:	00c6303a 	nor	r3,zero,r3
8020d040:	30c6703a 	and	r3,r6,r3
8020d044:	1a86703a 	and	r3,r3,r10
8020d048:	183fe01e 	bne	r3,zero,8020cfcc <__reset+0xfa1ecfcc>
8020d04c:	10bfff04 	addi	r2,r2,-4
8020d050:	21000104 	addi	r4,r4,4
8020d054:	40bff636 	bltu	r8,r2,8020d030 <__reset+0xfa1ed030>
8020d058:	003fdb06 	br	8020cfc8 <__reset+0xfa1ecfc8>
8020d05c:	3005883a 	mov	r2,r6
8020d060:	003fd706 	br	8020cfc0 <__reset+0xfa1ecfc0>

8020d064 <memmove>:
8020d064:	2005883a 	mov	r2,r4
8020d068:	29000b2e 	bgeu	r5,r4,8020d098 <memmove+0x34>
8020d06c:	298f883a 	add	r7,r5,r6
8020d070:	21c0092e 	bgeu	r4,r7,8020d098 <memmove+0x34>
8020d074:	2187883a 	add	r3,r4,r6
8020d078:	198bc83a 	sub	r5,r3,r6
8020d07c:	30004826 	beq	r6,zero,8020d1a0 <memmove+0x13c>
8020d080:	39ffffc4 	addi	r7,r7,-1
8020d084:	39000003 	ldbu	r4,0(r7)
8020d088:	18ffffc4 	addi	r3,r3,-1
8020d08c:	19000005 	stb	r4,0(r3)
8020d090:	28fffb1e 	bne	r5,r3,8020d080 <__reset+0xfa1ed080>
8020d094:	f800283a 	ret
8020d098:	00c003c4 	movi	r3,15
8020d09c:	1980412e 	bgeu	r3,r6,8020d1a4 <memmove+0x140>
8020d0a0:	2886b03a 	or	r3,r5,r2
8020d0a4:	18c000cc 	andi	r3,r3,3
8020d0a8:	1800401e 	bne	r3,zero,8020d1ac <memmove+0x148>
8020d0ac:	33fffc04 	addi	r15,r6,-16
8020d0b0:	781ed13a 	srli	r15,r15,4
8020d0b4:	28c00104 	addi	r3,r5,4
8020d0b8:	13400104 	addi	r13,r2,4
8020d0bc:	781c913a 	slli	r14,r15,4
8020d0c0:	2b000204 	addi	r12,r5,8
8020d0c4:	12c00204 	addi	r11,r2,8
8020d0c8:	73800504 	addi	r14,r14,20
8020d0cc:	2a800304 	addi	r10,r5,12
8020d0d0:	12400304 	addi	r9,r2,12
8020d0d4:	2b9d883a 	add	r14,r5,r14
8020d0d8:	2811883a 	mov	r8,r5
8020d0dc:	100f883a 	mov	r7,r2
8020d0e0:	41000017 	ldw	r4,0(r8)
8020d0e4:	39c00404 	addi	r7,r7,16
8020d0e8:	18c00404 	addi	r3,r3,16
8020d0ec:	393ffc15 	stw	r4,-16(r7)
8020d0f0:	193ffc17 	ldw	r4,-16(r3)
8020d0f4:	6b400404 	addi	r13,r13,16
8020d0f8:	5ac00404 	addi	r11,r11,16
8020d0fc:	693ffc15 	stw	r4,-16(r13)
8020d100:	61000017 	ldw	r4,0(r12)
8020d104:	4a400404 	addi	r9,r9,16
8020d108:	42000404 	addi	r8,r8,16
8020d10c:	593ffc15 	stw	r4,-16(r11)
8020d110:	51000017 	ldw	r4,0(r10)
8020d114:	63000404 	addi	r12,r12,16
8020d118:	52800404 	addi	r10,r10,16
8020d11c:	493ffc15 	stw	r4,-16(r9)
8020d120:	1bbfef1e 	bne	r3,r14,8020d0e0 <__reset+0xfa1ed0e0>
8020d124:	79000044 	addi	r4,r15,1
8020d128:	2008913a 	slli	r4,r4,4
8020d12c:	328003cc 	andi	r10,r6,15
8020d130:	02c000c4 	movi	r11,3
8020d134:	1107883a 	add	r3,r2,r4
8020d138:	290b883a 	add	r5,r5,r4
8020d13c:	5a801e2e 	bgeu	r11,r10,8020d1b8 <memmove+0x154>
8020d140:	1813883a 	mov	r9,r3
8020d144:	2811883a 	mov	r8,r5
8020d148:	500f883a 	mov	r7,r10
8020d14c:	41000017 	ldw	r4,0(r8)
8020d150:	4a400104 	addi	r9,r9,4
8020d154:	39ffff04 	addi	r7,r7,-4
8020d158:	493fff15 	stw	r4,-4(r9)
8020d15c:	42000104 	addi	r8,r8,4
8020d160:	59fffa36 	bltu	r11,r7,8020d14c <__reset+0xfa1ed14c>
8020d164:	513fff04 	addi	r4,r10,-4
8020d168:	2008d0ba 	srli	r4,r4,2
8020d16c:	318000cc 	andi	r6,r6,3
8020d170:	21000044 	addi	r4,r4,1
8020d174:	2109883a 	add	r4,r4,r4
8020d178:	2109883a 	add	r4,r4,r4
8020d17c:	1907883a 	add	r3,r3,r4
8020d180:	290b883a 	add	r5,r5,r4
8020d184:	30000b26 	beq	r6,zero,8020d1b4 <memmove+0x150>
8020d188:	198d883a 	add	r6,r3,r6
8020d18c:	29c00003 	ldbu	r7,0(r5)
8020d190:	18c00044 	addi	r3,r3,1
8020d194:	29400044 	addi	r5,r5,1
8020d198:	19ffffc5 	stb	r7,-1(r3)
8020d19c:	19bffb1e 	bne	r3,r6,8020d18c <__reset+0xfa1ed18c>
8020d1a0:	f800283a 	ret
8020d1a4:	1007883a 	mov	r3,r2
8020d1a8:	003ff606 	br	8020d184 <__reset+0xfa1ed184>
8020d1ac:	1007883a 	mov	r3,r2
8020d1b0:	003ff506 	br	8020d188 <__reset+0xfa1ed188>
8020d1b4:	f800283a 	ret
8020d1b8:	500d883a 	mov	r6,r10
8020d1bc:	003ff106 	br	8020d184 <__reset+0xfa1ed184>

8020d1c0 <memset>:
8020d1c0:	20c000cc 	andi	r3,r4,3
8020d1c4:	2005883a 	mov	r2,r4
8020d1c8:	18004426 	beq	r3,zero,8020d2dc <memset+0x11c>
8020d1cc:	31ffffc4 	addi	r7,r6,-1
8020d1d0:	30004026 	beq	r6,zero,8020d2d4 <memset+0x114>
8020d1d4:	2813883a 	mov	r9,r5
8020d1d8:	200d883a 	mov	r6,r4
8020d1dc:	2007883a 	mov	r3,r4
8020d1e0:	00000406 	br	8020d1f4 <memset+0x34>
8020d1e4:	3a3fffc4 	addi	r8,r7,-1
8020d1e8:	31800044 	addi	r6,r6,1
8020d1ec:	38003926 	beq	r7,zero,8020d2d4 <memset+0x114>
8020d1f0:	400f883a 	mov	r7,r8
8020d1f4:	18c00044 	addi	r3,r3,1
8020d1f8:	32400005 	stb	r9,0(r6)
8020d1fc:	1a0000cc 	andi	r8,r3,3
8020d200:	403ff81e 	bne	r8,zero,8020d1e4 <__reset+0xfa1ed1e4>
8020d204:	010000c4 	movi	r4,3
8020d208:	21c02d2e 	bgeu	r4,r7,8020d2c0 <memset+0x100>
8020d20c:	29003fcc 	andi	r4,r5,255
8020d210:	200c923a 	slli	r6,r4,8
8020d214:	3108b03a 	or	r4,r6,r4
8020d218:	200c943a 	slli	r6,r4,16
8020d21c:	218cb03a 	or	r6,r4,r6
8020d220:	010003c4 	movi	r4,15
8020d224:	21c0182e 	bgeu	r4,r7,8020d288 <memset+0xc8>
8020d228:	3b3ffc04 	addi	r12,r7,-16
8020d22c:	6018d13a 	srli	r12,r12,4
8020d230:	1a000104 	addi	r8,r3,4
8020d234:	1ac00204 	addi	r11,r3,8
8020d238:	6008913a 	slli	r4,r12,4
8020d23c:	1a800304 	addi	r10,r3,12
8020d240:	1813883a 	mov	r9,r3
8020d244:	21000504 	addi	r4,r4,20
8020d248:	1909883a 	add	r4,r3,r4
8020d24c:	49800015 	stw	r6,0(r9)
8020d250:	41800015 	stw	r6,0(r8)
8020d254:	59800015 	stw	r6,0(r11)
8020d258:	51800015 	stw	r6,0(r10)
8020d25c:	42000404 	addi	r8,r8,16
8020d260:	4a400404 	addi	r9,r9,16
8020d264:	5ac00404 	addi	r11,r11,16
8020d268:	52800404 	addi	r10,r10,16
8020d26c:	413ff71e 	bne	r8,r4,8020d24c <__reset+0xfa1ed24c>
8020d270:	63000044 	addi	r12,r12,1
8020d274:	6018913a 	slli	r12,r12,4
8020d278:	39c003cc 	andi	r7,r7,15
8020d27c:	010000c4 	movi	r4,3
8020d280:	1b07883a 	add	r3,r3,r12
8020d284:	21c00e2e 	bgeu	r4,r7,8020d2c0 <memset+0x100>
8020d288:	1813883a 	mov	r9,r3
8020d28c:	3811883a 	mov	r8,r7
8020d290:	010000c4 	movi	r4,3
8020d294:	49800015 	stw	r6,0(r9)
8020d298:	423fff04 	addi	r8,r8,-4
8020d29c:	4a400104 	addi	r9,r9,4
8020d2a0:	223ffc36 	bltu	r4,r8,8020d294 <__reset+0xfa1ed294>
8020d2a4:	393fff04 	addi	r4,r7,-4
8020d2a8:	2008d0ba 	srli	r4,r4,2
8020d2ac:	39c000cc 	andi	r7,r7,3
8020d2b0:	21000044 	addi	r4,r4,1
8020d2b4:	2109883a 	add	r4,r4,r4
8020d2b8:	2109883a 	add	r4,r4,r4
8020d2bc:	1907883a 	add	r3,r3,r4
8020d2c0:	38000526 	beq	r7,zero,8020d2d8 <memset+0x118>
8020d2c4:	19cf883a 	add	r7,r3,r7
8020d2c8:	19400005 	stb	r5,0(r3)
8020d2cc:	18c00044 	addi	r3,r3,1
8020d2d0:	38fffd1e 	bne	r7,r3,8020d2c8 <__reset+0xfa1ed2c8>
8020d2d4:	f800283a 	ret
8020d2d8:	f800283a 	ret
8020d2dc:	2007883a 	mov	r3,r4
8020d2e0:	300f883a 	mov	r7,r6
8020d2e4:	003fc706 	br	8020d204 <__reset+0xfa1ed204>

8020d2e8 <_Balloc>:
8020d2e8:	20801317 	ldw	r2,76(r4)
8020d2ec:	defffc04 	addi	sp,sp,-16
8020d2f0:	dc400115 	stw	r17,4(sp)
8020d2f4:	dc000015 	stw	r16,0(sp)
8020d2f8:	dfc00315 	stw	ra,12(sp)
8020d2fc:	dc800215 	stw	r18,8(sp)
8020d300:	2023883a 	mov	r17,r4
8020d304:	2821883a 	mov	r16,r5
8020d308:	10000f26 	beq	r2,zero,8020d348 <_Balloc+0x60>
8020d30c:	8407883a 	add	r3,r16,r16
8020d310:	18c7883a 	add	r3,r3,r3
8020d314:	10c7883a 	add	r3,r2,r3
8020d318:	18800017 	ldw	r2,0(r3)
8020d31c:	10001126 	beq	r2,zero,8020d364 <_Balloc+0x7c>
8020d320:	11000017 	ldw	r4,0(r2)
8020d324:	19000015 	stw	r4,0(r3)
8020d328:	10000415 	stw	zero,16(r2)
8020d32c:	10000315 	stw	zero,12(r2)
8020d330:	dfc00317 	ldw	ra,12(sp)
8020d334:	dc800217 	ldw	r18,8(sp)
8020d338:	dc400117 	ldw	r17,4(sp)
8020d33c:	dc000017 	ldw	r16,0(sp)
8020d340:	dec00404 	addi	sp,sp,16
8020d344:	f800283a 	ret
8020d348:	01800844 	movi	r6,33
8020d34c:	01400104 	movi	r5,4
8020d350:	02116300 	call	80211630 <_calloc_r>
8020d354:	88801315 	stw	r2,76(r17)
8020d358:	103fec1e 	bne	r2,zero,8020d30c <__reset+0xfa1ed30c>
8020d35c:	0005883a 	mov	r2,zero
8020d360:	003ff306 	br	8020d330 <__reset+0xfa1ed330>
8020d364:	01400044 	movi	r5,1
8020d368:	2c24983a 	sll	r18,r5,r16
8020d36c:	8809883a 	mov	r4,r17
8020d370:	91800144 	addi	r6,r18,5
8020d374:	318d883a 	add	r6,r6,r6
8020d378:	318d883a 	add	r6,r6,r6
8020d37c:	02116300 	call	80211630 <_calloc_r>
8020d380:	103ff626 	beq	r2,zero,8020d35c <__reset+0xfa1ed35c>
8020d384:	14000115 	stw	r16,4(r2)
8020d388:	14800215 	stw	r18,8(r2)
8020d38c:	003fe606 	br	8020d328 <__reset+0xfa1ed328>

8020d390 <_Bfree>:
8020d390:	28000826 	beq	r5,zero,8020d3b4 <_Bfree+0x24>
8020d394:	28c00117 	ldw	r3,4(r5)
8020d398:	20801317 	ldw	r2,76(r4)
8020d39c:	18c7883a 	add	r3,r3,r3
8020d3a0:	18c7883a 	add	r3,r3,r3
8020d3a4:	10c5883a 	add	r2,r2,r3
8020d3a8:	10c00017 	ldw	r3,0(r2)
8020d3ac:	28c00015 	stw	r3,0(r5)
8020d3b0:	11400015 	stw	r5,0(r2)
8020d3b4:	f800283a 	ret

8020d3b8 <__multadd>:
8020d3b8:	defffa04 	addi	sp,sp,-24
8020d3bc:	dc800315 	stw	r18,12(sp)
8020d3c0:	dc400215 	stw	r17,8(sp)
8020d3c4:	dc000115 	stw	r16,4(sp)
8020d3c8:	2823883a 	mov	r17,r5
8020d3cc:	2c000417 	ldw	r16,16(r5)
8020d3d0:	dfc00515 	stw	ra,20(sp)
8020d3d4:	dcc00415 	stw	r19,16(sp)
8020d3d8:	2025883a 	mov	r18,r4
8020d3dc:	29400504 	addi	r5,r5,20
8020d3e0:	0011883a 	mov	r8,zero
8020d3e4:	28c00017 	ldw	r3,0(r5)
8020d3e8:	29400104 	addi	r5,r5,4
8020d3ec:	42000044 	addi	r8,r8,1
8020d3f0:	18bfffcc 	andi	r2,r3,65535
8020d3f4:	1185383a 	mul	r2,r2,r6
8020d3f8:	1806d43a 	srli	r3,r3,16
8020d3fc:	11cf883a 	add	r7,r2,r7
8020d400:	3808d43a 	srli	r4,r7,16
8020d404:	1987383a 	mul	r3,r3,r6
8020d408:	38bfffcc 	andi	r2,r7,65535
8020d40c:	1907883a 	add	r3,r3,r4
8020d410:	1808943a 	slli	r4,r3,16
8020d414:	180ed43a 	srli	r7,r3,16
8020d418:	2085883a 	add	r2,r4,r2
8020d41c:	28bfff15 	stw	r2,-4(r5)
8020d420:	443ff016 	blt	r8,r16,8020d3e4 <__reset+0xfa1ed3e4>
8020d424:	38000926 	beq	r7,zero,8020d44c <__multadd+0x94>
8020d428:	88800217 	ldw	r2,8(r17)
8020d42c:	80800f0e 	bge	r16,r2,8020d46c <__multadd+0xb4>
8020d430:	80800144 	addi	r2,r16,5
8020d434:	1085883a 	add	r2,r2,r2
8020d438:	1085883a 	add	r2,r2,r2
8020d43c:	8885883a 	add	r2,r17,r2
8020d440:	11c00015 	stw	r7,0(r2)
8020d444:	84000044 	addi	r16,r16,1
8020d448:	8c000415 	stw	r16,16(r17)
8020d44c:	8805883a 	mov	r2,r17
8020d450:	dfc00517 	ldw	ra,20(sp)
8020d454:	dcc00417 	ldw	r19,16(sp)
8020d458:	dc800317 	ldw	r18,12(sp)
8020d45c:	dc400217 	ldw	r17,8(sp)
8020d460:	dc000117 	ldw	r16,4(sp)
8020d464:	dec00604 	addi	sp,sp,24
8020d468:	f800283a 	ret
8020d46c:	89400117 	ldw	r5,4(r17)
8020d470:	9009883a 	mov	r4,r18
8020d474:	d9c00015 	stw	r7,0(sp)
8020d478:	29400044 	addi	r5,r5,1
8020d47c:	020d2e80 	call	8020d2e8 <_Balloc>
8020d480:	89800417 	ldw	r6,16(r17)
8020d484:	89400304 	addi	r5,r17,12
8020d488:	11000304 	addi	r4,r2,12
8020d48c:	31800084 	addi	r6,r6,2
8020d490:	318d883a 	add	r6,r6,r6
8020d494:	318d883a 	add	r6,r6,r6
8020d498:	1027883a 	mov	r19,r2
8020d49c:	02051b40 	call	802051b4 <memcpy>
8020d4a0:	d9c00017 	ldw	r7,0(sp)
8020d4a4:	88000a26 	beq	r17,zero,8020d4d0 <__multadd+0x118>
8020d4a8:	88c00117 	ldw	r3,4(r17)
8020d4ac:	90801317 	ldw	r2,76(r18)
8020d4b0:	18c7883a 	add	r3,r3,r3
8020d4b4:	18c7883a 	add	r3,r3,r3
8020d4b8:	10c5883a 	add	r2,r2,r3
8020d4bc:	10c00017 	ldw	r3,0(r2)
8020d4c0:	88c00015 	stw	r3,0(r17)
8020d4c4:	14400015 	stw	r17,0(r2)
8020d4c8:	9823883a 	mov	r17,r19
8020d4cc:	003fd806 	br	8020d430 <__reset+0xfa1ed430>
8020d4d0:	9823883a 	mov	r17,r19
8020d4d4:	003fd606 	br	8020d430 <__reset+0xfa1ed430>

8020d4d8 <__s2b>:
8020d4d8:	defff904 	addi	sp,sp,-28
8020d4dc:	dc400115 	stw	r17,4(sp)
8020d4e0:	dc000015 	stw	r16,0(sp)
8020d4e4:	2023883a 	mov	r17,r4
8020d4e8:	2821883a 	mov	r16,r5
8020d4ec:	39000204 	addi	r4,r7,8
8020d4f0:	01400244 	movi	r5,9
8020d4f4:	dcc00315 	stw	r19,12(sp)
8020d4f8:	dc800215 	stw	r18,8(sp)
8020d4fc:	dfc00615 	stw	ra,24(sp)
8020d500:	dd400515 	stw	r21,20(sp)
8020d504:	dd000415 	stw	r20,16(sp)
8020d508:	3825883a 	mov	r18,r7
8020d50c:	3027883a 	mov	r19,r6
8020d510:	02129600 	call	80212960 <__divsi3>
8020d514:	00c00044 	movi	r3,1
8020d518:	000b883a 	mov	r5,zero
8020d51c:	1880030e 	bge	r3,r2,8020d52c <__s2b+0x54>
8020d520:	18c7883a 	add	r3,r3,r3
8020d524:	29400044 	addi	r5,r5,1
8020d528:	18bffd16 	blt	r3,r2,8020d520 <__reset+0xfa1ed520>
8020d52c:	8809883a 	mov	r4,r17
8020d530:	020d2e80 	call	8020d2e8 <_Balloc>
8020d534:	d8c00717 	ldw	r3,28(sp)
8020d538:	10c00515 	stw	r3,20(r2)
8020d53c:	00c00044 	movi	r3,1
8020d540:	10c00415 	stw	r3,16(r2)
8020d544:	00c00244 	movi	r3,9
8020d548:	1cc0210e 	bge	r3,r19,8020d5d0 <__s2b+0xf8>
8020d54c:	80eb883a 	add	r21,r16,r3
8020d550:	a829883a 	mov	r20,r21
8020d554:	84e1883a 	add	r16,r16,r19
8020d558:	a1c00007 	ldb	r7,0(r20)
8020d55c:	01800284 	movi	r6,10
8020d560:	a5000044 	addi	r20,r20,1
8020d564:	100b883a 	mov	r5,r2
8020d568:	39fff404 	addi	r7,r7,-48
8020d56c:	8809883a 	mov	r4,r17
8020d570:	020d3b80 	call	8020d3b8 <__multadd>
8020d574:	a43ff81e 	bne	r20,r16,8020d558 <__reset+0xfa1ed558>
8020d578:	ace1883a 	add	r16,r21,r19
8020d57c:	843ffe04 	addi	r16,r16,-8
8020d580:	9c800a0e 	bge	r19,r18,8020d5ac <__s2b+0xd4>
8020d584:	94e5c83a 	sub	r18,r18,r19
8020d588:	84a5883a 	add	r18,r16,r18
8020d58c:	81c00007 	ldb	r7,0(r16)
8020d590:	01800284 	movi	r6,10
8020d594:	84000044 	addi	r16,r16,1
8020d598:	100b883a 	mov	r5,r2
8020d59c:	39fff404 	addi	r7,r7,-48
8020d5a0:	8809883a 	mov	r4,r17
8020d5a4:	020d3b80 	call	8020d3b8 <__multadd>
8020d5a8:	84bff81e 	bne	r16,r18,8020d58c <__reset+0xfa1ed58c>
8020d5ac:	dfc00617 	ldw	ra,24(sp)
8020d5b0:	dd400517 	ldw	r21,20(sp)
8020d5b4:	dd000417 	ldw	r20,16(sp)
8020d5b8:	dcc00317 	ldw	r19,12(sp)
8020d5bc:	dc800217 	ldw	r18,8(sp)
8020d5c0:	dc400117 	ldw	r17,4(sp)
8020d5c4:	dc000017 	ldw	r16,0(sp)
8020d5c8:	dec00704 	addi	sp,sp,28
8020d5cc:	f800283a 	ret
8020d5d0:	84000284 	addi	r16,r16,10
8020d5d4:	1827883a 	mov	r19,r3
8020d5d8:	003fe906 	br	8020d580 <__reset+0xfa1ed580>

8020d5dc <__hi0bits>:
8020d5dc:	20bfffec 	andhi	r2,r4,65535
8020d5e0:	1000141e 	bne	r2,zero,8020d634 <__hi0bits+0x58>
8020d5e4:	2008943a 	slli	r4,r4,16
8020d5e8:	00800404 	movi	r2,16
8020d5ec:	20ffc02c 	andhi	r3,r4,65280
8020d5f0:	1800021e 	bne	r3,zero,8020d5fc <__hi0bits+0x20>
8020d5f4:	2008923a 	slli	r4,r4,8
8020d5f8:	10800204 	addi	r2,r2,8
8020d5fc:	20fc002c 	andhi	r3,r4,61440
8020d600:	1800021e 	bne	r3,zero,8020d60c <__hi0bits+0x30>
8020d604:	2008913a 	slli	r4,r4,4
8020d608:	10800104 	addi	r2,r2,4
8020d60c:	20f0002c 	andhi	r3,r4,49152
8020d610:	1800031e 	bne	r3,zero,8020d620 <__hi0bits+0x44>
8020d614:	2109883a 	add	r4,r4,r4
8020d618:	10800084 	addi	r2,r2,2
8020d61c:	2109883a 	add	r4,r4,r4
8020d620:	20000316 	blt	r4,zero,8020d630 <__hi0bits+0x54>
8020d624:	2110002c 	andhi	r4,r4,16384
8020d628:	2000041e 	bne	r4,zero,8020d63c <__hi0bits+0x60>
8020d62c:	00800804 	movi	r2,32
8020d630:	f800283a 	ret
8020d634:	0005883a 	mov	r2,zero
8020d638:	003fec06 	br	8020d5ec <__reset+0xfa1ed5ec>
8020d63c:	10800044 	addi	r2,r2,1
8020d640:	f800283a 	ret

8020d644 <__lo0bits>:
8020d644:	20c00017 	ldw	r3,0(r4)
8020d648:	188001cc 	andi	r2,r3,7
8020d64c:	10000826 	beq	r2,zero,8020d670 <__lo0bits+0x2c>
8020d650:	1880004c 	andi	r2,r3,1
8020d654:	1000211e 	bne	r2,zero,8020d6dc <__lo0bits+0x98>
8020d658:	1880008c 	andi	r2,r3,2
8020d65c:	1000211e 	bne	r2,zero,8020d6e4 <__lo0bits+0xa0>
8020d660:	1806d0ba 	srli	r3,r3,2
8020d664:	00800084 	movi	r2,2
8020d668:	20c00015 	stw	r3,0(r4)
8020d66c:	f800283a 	ret
8020d670:	18bfffcc 	andi	r2,r3,65535
8020d674:	10001326 	beq	r2,zero,8020d6c4 <__lo0bits+0x80>
8020d678:	0005883a 	mov	r2,zero
8020d67c:	19403fcc 	andi	r5,r3,255
8020d680:	2800021e 	bne	r5,zero,8020d68c <__lo0bits+0x48>
8020d684:	1806d23a 	srli	r3,r3,8
8020d688:	10800204 	addi	r2,r2,8
8020d68c:	194003cc 	andi	r5,r3,15
8020d690:	2800021e 	bne	r5,zero,8020d69c <__lo0bits+0x58>
8020d694:	1806d13a 	srli	r3,r3,4
8020d698:	10800104 	addi	r2,r2,4
8020d69c:	194000cc 	andi	r5,r3,3
8020d6a0:	2800021e 	bne	r5,zero,8020d6ac <__lo0bits+0x68>
8020d6a4:	1806d0ba 	srli	r3,r3,2
8020d6a8:	10800084 	addi	r2,r2,2
8020d6ac:	1940004c 	andi	r5,r3,1
8020d6b0:	2800081e 	bne	r5,zero,8020d6d4 <__lo0bits+0x90>
8020d6b4:	1806d07a 	srli	r3,r3,1
8020d6b8:	1800051e 	bne	r3,zero,8020d6d0 <__lo0bits+0x8c>
8020d6bc:	00800804 	movi	r2,32
8020d6c0:	f800283a 	ret
8020d6c4:	1806d43a 	srli	r3,r3,16
8020d6c8:	00800404 	movi	r2,16
8020d6cc:	003feb06 	br	8020d67c <__reset+0xfa1ed67c>
8020d6d0:	10800044 	addi	r2,r2,1
8020d6d4:	20c00015 	stw	r3,0(r4)
8020d6d8:	f800283a 	ret
8020d6dc:	0005883a 	mov	r2,zero
8020d6e0:	f800283a 	ret
8020d6e4:	1806d07a 	srli	r3,r3,1
8020d6e8:	00800044 	movi	r2,1
8020d6ec:	20c00015 	stw	r3,0(r4)
8020d6f0:	f800283a 	ret

8020d6f4 <__i2b>:
8020d6f4:	defffd04 	addi	sp,sp,-12
8020d6f8:	dc000015 	stw	r16,0(sp)
8020d6fc:	04000044 	movi	r16,1
8020d700:	dc400115 	stw	r17,4(sp)
8020d704:	2823883a 	mov	r17,r5
8020d708:	800b883a 	mov	r5,r16
8020d70c:	dfc00215 	stw	ra,8(sp)
8020d710:	020d2e80 	call	8020d2e8 <_Balloc>
8020d714:	14400515 	stw	r17,20(r2)
8020d718:	14000415 	stw	r16,16(r2)
8020d71c:	dfc00217 	ldw	ra,8(sp)
8020d720:	dc400117 	ldw	r17,4(sp)
8020d724:	dc000017 	ldw	r16,0(sp)
8020d728:	dec00304 	addi	sp,sp,12
8020d72c:	f800283a 	ret

8020d730 <__multiply>:
8020d730:	defffa04 	addi	sp,sp,-24
8020d734:	dcc00315 	stw	r19,12(sp)
8020d738:	dc800215 	stw	r18,8(sp)
8020d73c:	34c00417 	ldw	r19,16(r6)
8020d740:	2c800417 	ldw	r18,16(r5)
8020d744:	dd000415 	stw	r20,16(sp)
8020d748:	dc400115 	stw	r17,4(sp)
8020d74c:	dfc00515 	stw	ra,20(sp)
8020d750:	dc000015 	stw	r16,0(sp)
8020d754:	2829883a 	mov	r20,r5
8020d758:	3023883a 	mov	r17,r6
8020d75c:	94c0050e 	bge	r18,r19,8020d774 <__multiply+0x44>
8020d760:	9007883a 	mov	r3,r18
8020d764:	3029883a 	mov	r20,r6
8020d768:	9825883a 	mov	r18,r19
8020d76c:	2823883a 	mov	r17,r5
8020d770:	1827883a 	mov	r19,r3
8020d774:	a0800217 	ldw	r2,8(r20)
8020d778:	94e1883a 	add	r16,r18,r19
8020d77c:	a1400117 	ldw	r5,4(r20)
8020d780:	1400010e 	bge	r2,r16,8020d788 <__multiply+0x58>
8020d784:	29400044 	addi	r5,r5,1
8020d788:	020d2e80 	call	8020d2e8 <_Balloc>
8020d78c:	8415883a 	add	r10,r16,r16
8020d790:	12c00504 	addi	r11,r2,20
8020d794:	5295883a 	add	r10,r10,r10
8020d798:	5a95883a 	add	r10,r11,r10
8020d79c:	5807883a 	mov	r3,r11
8020d7a0:	5a80032e 	bgeu	r11,r10,8020d7b0 <__multiply+0x80>
8020d7a4:	18000015 	stw	zero,0(r3)
8020d7a8:	18c00104 	addi	r3,r3,4
8020d7ac:	1abffd36 	bltu	r3,r10,8020d7a4 <__reset+0xfa1ed7a4>
8020d7b0:	9ce7883a 	add	r19,r19,r19
8020d7b4:	94a5883a 	add	r18,r18,r18
8020d7b8:	89800504 	addi	r6,r17,20
8020d7bc:	9ce7883a 	add	r19,r19,r19
8020d7c0:	a3400504 	addi	r13,r20,20
8020d7c4:	94a5883a 	add	r18,r18,r18
8020d7c8:	34d9883a 	add	r12,r6,r19
8020d7cc:	6c93883a 	add	r9,r13,r18
8020d7d0:	3300422e 	bgeu	r6,r12,8020d8dc <__multiply+0x1ac>
8020d7d4:	37c00017 	ldw	ra,0(r6)
8020d7d8:	fbffffcc 	andi	r15,ra,65535
8020d7dc:	78001b26 	beq	r15,zero,8020d84c <__multiply+0x11c>
8020d7e0:	5811883a 	mov	r8,r11
8020d7e4:	681d883a 	mov	r14,r13
8020d7e8:	000f883a 	mov	r7,zero
8020d7ec:	71000017 	ldw	r4,0(r14)
8020d7f0:	40c00017 	ldw	r3,0(r8)
8020d7f4:	73800104 	addi	r14,r14,4
8020d7f8:	217fffcc 	andi	r5,r4,65535
8020d7fc:	2bcb383a 	mul	r5,r5,r15
8020d800:	2008d43a 	srli	r4,r4,16
8020d804:	1c7fffcc 	andi	r17,r3,65535
8020d808:	2c4b883a 	add	r5,r5,r17
8020d80c:	29cb883a 	add	r5,r5,r7
8020d810:	23c9383a 	mul	r4,r4,r15
8020d814:	1806d43a 	srli	r3,r3,16
8020d818:	280ed43a 	srli	r7,r5,16
8020d81c:	297fffcc 	andi	r5,r5,65535
8020d820:	20c7883a 	add	r3,r4,r3
8020d824:	19c7883a 	add	r3,r3,r7
8020d828:	1808943a 	slli	r4,r3,16
8020d82c:	4023883a 	mov	r17,r8
8020d830:	180ed43a 	srli	r7,r3,16
8020d834:	214ab03a 	or	r5,r4,r5
8020d838:	41400015 	stw	r5,0(r8)
8020d83c:	42000104 	addi	r8,r8,4
8020d840:	727fea36 	bltu	r14,r9,8020d7ec <__reset+0xfa1ed7ec>
8020d844:	89c00115 	stw	r7,4(r17)
8020d848:	37c00017 	ldw	ra,0(r6)
8020d84c:	f83ed43a 	srli	ra,ra,16
8020d850:	f8001f26 	beq	ra,zero,8020d8d0 <__multiply+0x1a0>
8020d854:	58c00017 	ldw	r3,0(r11)
8020d858:	681d883a 	mov	r14,r13
8020d85c:	581f883a 	mov	r15,r11
8020d860:	1811883a 	mov	r8,r3
8020d864:	5825883a 	mov	r18,r11
8020d868:	000f883a 	mov	r7,zero
8020d86c:	00000106 	br	8020d874 <__multiply+0x144>
8020d870:	8825883a 	mov	r18,r17
8020d874:	7140000b 	ldhu	r5,0(r14)
8020d878:	4010d43a 	srli	r8,r8,16
8020d87c:	193fffcc 	andi	r4,r3,65535
8020d880:	2fcb383a 	mul	r5,r5,ra
8020d884:	7bc00104 	addi	r15,r15,4
8020d888:	73800104 	addi	r14,r14,4
8020d88c:	2a0b883a 	add	r5,r5,r8
8020d890:	29cb883a 	add	r5,r5,r7
8020d894:	2806943a 	slli	r3,r5,16
8020d898:	94400104 	addi	r17,r18,4
8020d89c:	280ad43a 	srli	r5,r5,16
8020d8a0:	1908b03a 	or	r4,r3,r4
8020d8a4:	793fff15 	stw	r4,-4(r15)
8020d8a8:	70ffff17 	ldw	r3,-4(r14)
8020d8ac:	8a000017 	ldw	r8,0(r17)
8020d8b0:	1806d43a 	srli	r3,r3,16
8020d8b4:	413fffcc 	andi	r4,r8,65535
8020d8b8:	1fc7383a 	mul	r3,r3,ra
8020d8bc:	1907883a 	add	r3,r3,r4
8020d8c0:	1947883a 	add	r3,r3,r5
8020d8c4:	180ed43a 	srli	r7,r3,16
8020d8c8:	727fe936 	bltu	r14,r9,8020d870 <__reset+0xfa1ed870>
8020d8cc:	90c00115 	stw	r3,4(r18)
8020d8d0:	31800104 	addi	r6,r6,4
8020d8d4:	5ac00104 	addi	r11,r11,4
8020d8d8:	333fbe36 	bltu	r6,r12,8020d7d4 <__reset+0xfa1ed7d4>
8020d8dc:	0400090e 	bge	zero,r16,8020d904 <__multiply+0x1d4>
8020d8e0:	50ffff17 	ldw	r3,-4(r10)
8020d8e4:	52bfff04 	addi	r10,r10,-4
8020d8e8:	18000326 	beq	r3,zero,8020d8f8 <__multiply+0x1c8>
8020d8ec:	00000506 	br	8020d904 <__multiply+0x1d4>
8020d8f0:	50c00017 	ldw	r3,0(r10)
8020d8f4:	1800031e 	bne	r3,zero,8020d904 <__multiply+0x1d4>
8020d8f8:	843fffc4 	addi	r16,r16,-1
8020d8fc:	52bfff04 	addi	r10,r10,-4
8020d900:	803ffb1e 	bne	r16,zero,8020d8f0 <__reset+0xfa1ed8f0>
8020d904:	14000415 	stw	r16,16(r2)
8020d908:	dfc00517 	ldw	ra,20(sp)
8020d90c:	dd000417 	ldw	r20,16(sp)
8020d910:	dcc00317 	ldw	r19,12(sp)
8020d914:	dc800217 	ldw	r18,8(sp)
8020d918:	dc400117 	ldw	r17,4(sp)
8020d91c:	dc000017 	ldw	r16,0(sp)
8020d920:	dec00604 	addi	sp,sp,24
8020d924:	f800283a 	ret

8020d928 <__pow5mult>:
8020d928:	defffa04 	addi	sp,sp,-24
8020d92c:	dcc00315 	stw	r19,12(sp)
8020d930:	dc000015 	stw	r16,0(sp)
8020d934:	dfc00515 	stw	ra,20(sp)
8020d938:	dd000415 	stw	r20,16(sp)
8020d93c:	dc800215 	stw	r18,8(sp)
8020d940:	dc400115 	stw	r17,4(sp)
8020d944:	308000cc 	andi	r2,r6,3
8020d948:	3021883a 	mov	r16,r6
8020d94c:	2027883a 	mov	r19,r4
8020d950:	10002f1e 	bne	r2,zero,8020da10 <__pow5mult+0xe8>
8020d954:	2825883a 	mov	r18,r5
8020d958:	8021d0ba 	srai	r16,r16,2
8020d95c:	80001a26 	beq	r16,zero,8020d9c8 <__pow5mult+0xa0>
8020d960:	9c401217 	ldw	r17,72(r19)
8020d964:	8800061e 	bne	r17,zero,8020d980 <__pow5mult+0x58>
8020d968:	00003406 	br	8020da3c <__pow5mult+0x114>
8020d96c:	8021d07a 	srai	r16,r16,1
8020d970:	80001526 	beq	r16,zero,8020d9c8 <__pow5mult+0xa0>
8020d974:	88800017 	ldw	r2,0(r17)
8020d978:	10001c26 	beq	r2,zero,8020d9ec <__pow5mult+0xc4>
8020d97c:	1023883a 	mov	r17,r2
8020d980:	8080004c 	andi	r2,r16,1
8020d984:	103ff926 	beq	r2,zero,8020d96c <__reset+0xfa1ed96c>
8020d988:	880d883a 	mov	r6,r17
8020d98c:	900b883a 	mov	r5,r18
8020d990:	9809883a 	mov	r4,r19
8020d994:	020d7300 	call	8020d730 <__multiply>
8020d998:	90001b26 	beq	r18,zero,8020da08 <__pow5mult+0xe0>
8020d99c:	91000117 	ldw	r4,4(r18)
8020d9a0:	98c01317 	ldw	r3,76(r19)
8020d9a4:	8021d07a 	srai	r16,r16,1
8020d9a8:	2109883a 	add	r4,r4,r4
8020d9ac:	2109883a 	add	r4,r4,r4
8020d9b0:	1907883a 	add	r3,r3,r4
8020d9b4:	19000017 	ldw	r4,0(r3)
8020d9b8:	91000015 	stw	r4,0(r18)
8020d9bc:	1c800015 	stw	r18,0(r3)
8020d9c0:	1025883a 	mov	r18,r2
8020d9c4:	803feb1e 	bne	r16,zero,8020d974 <__reset+0xfa1ed974>
8020d9c8:	9005883a 	mov	r2,r18
8020d9cc:	dfc00517 	ldw	ra,20(sp)
8020d9d0:	dd000417 	ldw	r20,16(sp)
8020d9d4:	dcc00317 	ldw	r19,12(sp)
8020d9d8:	dc800217 	ldw	r18,8(sp)
8020d9dc:	dc400117 	ldw	r17,4(sp)
8020d9e0:	dc000017 	ldw	r16,0(sp)
8020d9e4:	dec00604 	addi	sp,sp,24
8020d9e8:	f800283a 	ret
8020d9ec:	880d883a 	mov	r6,r17
8020d9f0:	880b883a 	mov	r5,r17
8020d9f4:	9809883a 	mov	r4,r19
8020d9f8:	020d7300 	call	8020d730 <__multiply>
8020d9fc:	88800015 	stw	r2,0(r17)
8020da00:	10000015 	stw	zero,0(r2)
8020da04:	003fdd06 	br	8020d97c <__reset+0xfa1ed97c>
8020da08:	1025883a 	mov	r18,r2
8020da0c:	003fd706 	br	8020d96c <__reset+0xfa1ed96c>
8020da10:	10bfffc4 	addi	r2,r2,-1
8020da14:	1085883a 	add	r2,r2,r2
8020da18:	00e008b4 	movhi	r3,32802
8020da1c:	18ece604 	addi	r3,r3,-19560
8020da20:	1085883a 	add	r2,r2,r2
8020da24:	1885883a 	add	r2,r3,r2
8020da28:	11800017 	ldw	r6,0(r2)
8020da2c:	000f883a 	mov	r7,zero
8020da30:	020d3b80 	call	8020d3b8 <__multadd>
8020da34:	1025883a 	mov	r18,r2
8020da38:	003fc706 	br	8020d958 <__reset+0xfa1ed958>
8020da3c:	05000044 	movi	r20,1
8020da40:	a00b883a 	mov	r5,r20
8020da44:	9809883a 	mov	r4,r19
8020da48:	020d2e80 	call	8020d2e8 <_Balloc>
8020da4c:	1023883a 	mov	r17,r2
8020da50:	00809c44 	movi	r2,625
8020da54:	88800515 	stw	r2,20(r17)
8020da58:	8d000415 	stw	r20,16(r17)
8020da5c:	9c401215 	stw	r17,72(r19)
8020da60:	88000015 	stw	zero,0(r17)
8020da64:	003fc606 	br	8020d980 <__reset+0xfa1ed980>

8020da68 <__lshift>:
8020da68:	defff904 	addi	sp,sp,-28
8020da6c:	dd400515 	stw	r21,20(sp)
8020da70:	dcc00315 	stw	r19,12(sp)
8020da74:	302bd17a 	srai	r21,r6,5
8020da78:	2cc00417 	ldw	r19,16(r5)
8020da7c:	28800217 	ldw	r2,8(r5)
8020da80:	dd000415 	stw	r20,16(sp)
8020da84:	ace7883a 	add	r19,r21,r19
8020da88:	dc800215 	stw	r18,8(sp)
8020da8c:	dc400115 	stw	r17,4(sp)
8020da90:	dc000015 	stw	r16,0(sp)
8020da94:	dfc00615 	stw	ra,24(sp)
8020da98:	9c000044 	addi	r16,r19,1
8020da9c:	2823883a 	mov	r17,r5
8020daa0:	3029883a 	mov	r20,r6
8020daa4:	2025883a 	mov	r18,r4
8020daa8:	29400117 	ldw	r5,4(r5)
8020daac:	1400030e 	bge	r2,r16,8020dabc <__lshift+0x54>
8020dab0:	1085883a 	add	r2,r2,r2
8020dab4:	29400044 	addi	r5,r5,1
8020dab8:	143ffd16 	blt	r2,r16,8020dab0 <__reset+0xfa1edab0>
8020dabc:	9009883a 	mov	r4,r18
8020dac0:	020d2e80 	call	8020d2e8 <_Balloc>
8020dac4:	10c00504 	addi	r3,r2,20
8020dac8:	0540070e 	bge	zero,r21,8020dae8 <__lshift+0x80>
8020dacc:	ad6b883a 	add	r21,r21,r21
8020dad0:	ad6b883a 	add	r21,r21,r21
8020dad4:	1809883a 	mov	r4,r3
8020dad8:	1d47883a 	add	r3,r3,r21
8020dadc:	20000015 	stw	zero,0(r4)
8020dae0:	21000104 	addi	r4,r4,4
8020dae4:	193ffd1e 	bne	r3,r4,8020dadc <__reset+0xfa1edadc>
8020dae8:	8a000417 	ldw	r8,16(r17)
8020daec:	89000504 	addi	r4,r17,20
8020daf0:	a18007cc 	andi	r6,r20,31
8020daf4:	4211883a 	add	r8,r8,r8
8020daf8:	4211883a 	add	r8,r8,r8
8020dafc:	2211883a 	add	r8,r4,r8
8020db00:	30002326 	beq	r6,zero,8020db90 <__lshift+0x128>
8020db04:	02400804 	movi	r9,32
8020db08:	4993c83a 	sub	r9,r9,r6
8020db0c:	000b883a 	mov	r5,zero
8020db10:	21c00017 	ldw	r7,0(r4)
8020db14:	1815883a 	mov	r10,r3
8020db18:	18c00104 	addi	r3,r3,4
8020db1c:	398e983a 	sll	r7,r7,r6
8020db20:	21000104 	addi	r4,r4,4
8020db24:	394ab03a 	or	r5,r7,r5
8020db28:	197fff15 	stw	r5,-4(r3)
8020db2c:	217fff17 	ldw	r5,-4(r4)
8020db30:	2a4ad83a 	srl	r5,r5,r9
8020db34:	223ff636 	bltu	r4,r8,8020db10 <__reset+0xfa1edb10>
8020db38:	51400115 	stw	r5,4(r10)
8020db3c:	28001a1e 	bne	r5,zero,8020dba8 <__lshift+0x140>
8020db40:	843fffc4 	addi	r16,r16,-1
8020db44:	14000415 	stw	r16,16(r2)
8020db48:	88000826 	beq	r17,zero,8020db6c <__lshift+0x104>
8020db4c:	89000117 	ldw	r4,4(r17)
8020db50:	90c01317 	ldw	r3,76(r18)
8020db54:	2109883a 	add	r4,r4,r4
8020db58:	2109883a 	add	r4,r4,r4
8020db5c:	1907883a 	add	r3,r3,r4
8020db60:	19000017 	ldw	r4,0(r3)
8020db64:	89000015 	stw	r4,0(r17)
8020db68:	1c400015 	stw	r17,0(r3)
8020db6c:	dfc00617 	ldw	ra,24(sp)
8020db70:	dd400517 	ldw	r21,20(sp)
8020db74:	dd000417 	ldw	r20,16(sp)
8020db78:	dcc00317 	ldw	r19,12(sp)
8020db7c:	dc800217 	ldw	r18,8(sp)
8020db80:	dc400117 	ldw	r17,4(sp)
8020db84:	dc000017 	ldw	r16,0(sp)
8020db88:	dec00704 	addi	sp,sp,28
8020db8c:	f800283a 	ret
8020db90:	21400017 	ldw	r5,0(r4)
8020db94:	18c00104 	addi	r3,r3,4
8020db98:	21000104 	addi	r4,r4,4
8020db9c:	197fff15 	stw	r5,-4(r3)
8020dba0:	223ffb36 	bltu	r4,r8,8020db90 <__reset+0xfa1edb90>
8020dba4:	003fe606 	br	8020db40 <__reset+0xfa1edb40>
8020dba8:	9c000084 	addi	r16,r19,2
8020dbac:	003fe406 	br	8020db40 <__reset+0xfa1edb40>

8020dbb0 <__mcmp>:
8020dbb0:	20800417 	ldw	r2,16(r4)
8020dbb4:	28c00417 	ldw	r3,16(r5)
8020dbb8:	10c5c83a 	sub	r2,r2,r3
8020dbbc:	1000111e 	bne	r2,zero,8020dc04 <__mcmp+0x54>
8020dbc0:	18c7883a 	add	r3,r3,r3
8020dbc4:	18c7883a 	add	r3,r3,r3
8020dbc8:	21000504 	addi	r4,r4,20
8020dbcc:	29400504 	addi	r5,r5,20
8020dbd0:	20c5883a 	add	r2,r4,r3
8020dbd4:	28cb883a 	add	r5,r5,r3
8020dbd8:	00000106 	br	8020dbe0 <__mcmp+0x30>
8020dbdc:	20800a2e 	bgeu	r4,r2,8020dc08 <__mcmp+0x58>
8020dbe0:	10bfff04 	addi	r2,r2,-4
8020dbe4:	297fff04 	addi	r5,r5,-4
8020dbe8:	11800017 	ldw	r6,0(r2)
8020dbec:	28c00017 	ldw	r3,0(r5)
8020dbf0:	30fffa26 	beq	r6,r3,8020dbdc <__reset+0xfa1edbdc>
8020dbf4:	30c00236 	bltu	r6,r3,8020dc00 <__mcmp+0x50>
8020dbf8:	00800044 	movi	r2,1
8020dbfc:	f800283a 	ret
8020dc00:	00bfffc4 	movi	r2,-1
8020dc04:	f800283a 	ret
8020dc08:	0005883a 	mov	r2,zero
8020dc0c:	f800283a 	ret

8020dc10 <__mdiff>:
8020dc10:	28c00417 	ldw	r3,16(r5)
8020dc14:	30800417 	ldw	r2,16(r6)
8020dc18:	defffa04 	addi	sp,sp,-24
8020dc1c:	dcc00315 	stw	r19,12(sp)
8020dc20:	dc800215 	stw	r18,8(sp)
8020dc24:	dfc00515 	stw	ra,20(sp)
8020dc28:	dd000415 	stw	r20,16(sp)
8020dc2c:	dc400115 	stw	r17,4(sp)
8020dc30:	dc000015 	stw	r16,0(sp)
8020dc34:	1887c83a 	sub	r3,r3,r2
8020dc38:	2825883a 	mov	r18,r5
8020dc3c:	3027883a 	mov	r19,r6
8020dc40:	1800141e 	bne	r3,zero,8020dc94 <__mdiff+0x84>
8020dc44:	1085883a 	add	r2,r2,r2
8020dc48:	1085883a 	add	r2,r2,r2
8020dc4c:	2a000504 	addi	r8,r5,20
8020dc50:	34000504 	addi	r16,r6,20
8020dc54:	4087883a 	add	r3,r8,r2
8020dc58:	8085883a 	add	r2,r16,r2
8020dc5c:	00000106 	br	8020dc64 <__mdiff+0x54>
8020dc60:	40c0592e 	bgeu	r8,r3,8020ddc8 <__mdiff+0x1b8>
8020dc64:	18ffff04 	addi	r3,r3,-4
8020dc68:	10bfff04 	addi	r2,r2,-4
8020dc6c:	19c00017 	ldw	r7,0(r3)
8020dc70:	11400017 	ldw	r5,0(r2)
8020dc74:	397ffa26 	beq	r7,r5,8020dc60 <__reset+0xfa1edc60>
8020dc78:	3940592e 	bgeu	r7,r5,8020dde0 <__mdiff+0x1d0>
8020dc7c:	9005883a 	mov	r2,r18
8020dc80:	4023883a 	mov	r17,r8
8020dc84:	9825883a 	mov	r18,r19
8020dc88:	05000044 	movi	r20,1
8020dc8c:	1027883a 	mov	r19,r2
8020dc90:	00000406 	br	8020dca4 <__mdiff+0x94>
8020dc94:	18005616 	blt	r3,zero,8020ddf0 <__mdiff+0x1e0>
8020dc98:	34400504 	addi	r17,r6,20
8020dc9c:	2c000504 	addi	r16,r5,20
8020dca0:	0029883a 	mov	r20,zero
8020dca4:	91400117 	ldw	r5,4(r18)
8020dca8:	020d2e80 	call	8020d2e8 <_Balloc>
8020dcac:	92400417 	ldw	r9,16(r18)
8020dcb0:	9b000417 	ldw	r12,16(r19)
8020dcb4:	12c00504 	addi	r11,r2,20
8020dcb8:	4a51883a 	add	r8,r9,r9
8020dcbc:	6319883a 	add	r12,r12,r12
8020dcc0:	4211883a 	add	r8,r8,r8
8020dcc4:	6319883a 	add	r12,r12,r12
8020dcc8:	15000315 	stw	r20,12(r2)
8020dccc:	8211883a 	add	r8,r16,r8
8020dcd0:	8b19883a 	add	r12,r17,r12
8020dcd4:	0007883a 	mov	r3,zero
8020dcd8:	81400017 	ldw	r5,0(r16)
8020dcdc:	89c00017 	ldw	r7,0(r17)
8020dce0:	59800104 	addi	r6,r11,4
8020dce4:	293fffcc 	andi	r4,r5,65535
8020dce8:	20c7883a 	add	r3,r4,r3
8020dcec:	393fffcc 	andi	r4,r7,65535
8020dcf0:	1909c83a 	sub	r4,r3,r4
8020dcf4:	280ad43a 	srli	r5,r5,16
8020dcf8:	380ed43a 	srli	r7,r7,16
8020dcfc:	2007d43a 	srai	r3,r4,16
8020dd00:	213fffcc 	andi	r4,r4,65535
8020dd04:	29cbc83a 	sub	r5,r5,r7
8020dd08:	28c7883a 	add	r3,r5,r3
8020dd0c:	180a943a 	slli	r5,r3,16
8020dd10:	8c400104 	addi	r17,r17,4
8020dd14:	84000104 	addi	r16,r16,4
8020dd18:	2908b03a 	or	r4,r5,r4
8020dd1c:	59000015 	stw	r4,0(r11)
8020dd20:	1807d43a 	srai	r3,r3,16
8020dd24:	3015883a 	mov	r10,r6
8020dd28:	3017883a 	mov	r11,r6
8020dd2c:	8b3fea36 	bltu	r17,r12,8020dcd8 <__reset+0xfa1edcd8>
8020dd30:	8200162e 	bgeu	r16,r8,8020dd8c <__mdiff+0x17c>
8020dd34:	8017883a 	mov	r11,r16
8020dd38:	59400017 	ldw	r5,0(r11)
8020dd3c:	31800104 	addi	r6,r6,4
8020dd40:	5ac00104 	addi	r11,r11,4
8020dd44:	293fffcc 	andi	r4,r5,65535
8020dd48:	20c7883a 	add	r3,r4,r3
8020dd4c:	280ed43a 	srli	r7,r5,16
8020dd50:	180bd43a 	srai	r5,r3,16
8020dd54:	193fffcc 	andi	r4,r3,65535
8020dd58:	3947883a 	add	r3,r7,r5
8020dd5c:	180a943a 	slli	r5,r3,16
8020dd60:	1807d43a 	srai	r3,r3,16
8020dd64:	2908b03a 	or	r4,r5,r4
8020dd68:	313fff15 	stw	r4,-4(r6)
8020dd6c:	5a3ff236 	bltu	r11,r8,8020dd38 <__reset+0xfa1edd38>
8020dd70:	0406303a 	nor	r3,zero,r16
8020dd74:	1a07883a 	add	r3,r3,r8
8020dd78:	1806d0ba 	srli	r3,r3,2
8020dd7c:	18c00044 	addi	r3,r3,1
8020dd80:	18c7883a 	add	r3,r3,r3
8020dd84:	18c7883a 	add	r3,r3,r3
8020dd88:	50d5883a 	add	r10,r10,r3
8020dd8c:	50ffff04 	addi	r3,r10,-4
8020dd90:	2000041e 	bne	r4,zero,8020dda4 <__mdiff+0x194>
8020dd94:	18ffff04 	addi	r3,r3,-4
8020dd98:	19000017 	ldw	r4,0(r3)
8020dd9c:	4a7fffc4 	addi	r9,r9,-1
8020dda0:	203ffc26 	beq	r4,zero,8020dd94 <__reset+0xfa1edd94>
8020dda4:	12400415 	stw	r9,16(r2)
8020dda8:	dfc00517 	ldw	ra,20(sp)
8020ddac:	dd000417 	ldw	r20,16(sp)
8020ddb0:	dcc00317 	ldw	r19,12(sp)
8020ddb4:	dc800217 	ldw	r18,8(sp)
8020ddb8:	dc400117 	ldw	r17,4(sp)
8020ddbc:	dc000017 	ldw	r16,0(sp)
8020ddc0:	dec00604 	addi	sp,sp,24
8020ddc4:	f800283a 	ret
8020ddc8:	000b883a 	mov	r5,zero
8020ddcc:	020d2e80 	call	8020d2e8 <_Balloc>
8020ddd0:	00c00044 	movi	r3,1
8020ddd4:	10c00415 	stw	r3,16(r2)
8020ddd8:	10000515 	stw	zero,20(r2)
8020dddc:	003ff206 	br	8020dda8 <__reset+0xfa1edda8>
8020dde0:	8023883a 	mov	r17,r16
8020dde4:	0029883a 	mov	r20,zero
8020dde8:	4021883a 	mov	r16,r8
8020ddec:	003fad06 	br	8020dca4 <__reset+0xfa1edca4>
8020ddf0:	9005883a 	mov	r2,r18
8020ddf4:	94400504 	addi	r17,r18,20
8020ddf8:	9c000504 	addi	r16,r19,20
8020ddfc:	9825883a 	mov	r18,r19
8020de00:	05000044 	movi	r20,1
8020de04:	1027883a 	mov	r19,r2
8020de08:	003fa606 	br	8020dca4 <__reset+0xfa1edca4>

8020de0c <__ulp>:
8020de0c:	295ffc2c 	andhi	r5,r5,32752
8020de10:	00bf3034 	movhi	r2,64704
8020de14:	2887883a 	add	r3,r5,r2
8020de18:	00c0020e 	bge	zero,r3,8020de24 <__ulp+0x18>
8020de1c:	0005883a 	mov	r2,zero
8020de20:	f800283a 	ret
8020de24:	00c7c83a 	sub	r3,zero,r3
8020de28:	1807d53a 	srai	r3,r3,20
8020de2c:	008004c4 	movi	r2,19
8020de30:	10c00b0e 	bge	r2,r3,8020de60 <__ulp+0x54>
8020de34:	18bffb04 	addi	r2,r3,-20
8020de38:	01000784 	movi	r4,30
8020de3c:	0007883a 	mov	r3,zero
8020de40:	20800516 	blt	r4,r2,8020de58 <__ulp+0x4c>
8020de44:	010007c4 	movi	r4,31
8020de48:	2089c83a 	sub	r4,r4,r2
8020de4c:	00800044 	movi	r2,1
8020de50:	1104983a 	sll	r2,r2,r4
8020de54:	f800283a 	ret
8020de58:	00800044 	movi	r2,1
8020de5c:	f800283a 	ret
8020de60:	01400234 	movhi	r5,8
8020de64:	28c7d83a 	sra	r3,r5,r3
8020de68:	0005883a 	mov	r2,zero
8020de6c:	f800283a 	ret

8020de70 <__b2d>:
8020de70:	defffa04 	addi	sp,sp,-24
8020de74:	dc000015 	stw	r16,0(sp)
8020de78:	24000417 	ldw	r16,16(r4)
8020de7c:	dc400115 	stw	r17,4(sp)
8020de80:	24400504 	addi	r17,r4,20
8020de84:	8421883a 	add	r16,r16,r16
8020de88:	8421883a 	add	r16,r16,r16
8020de8c:	8c21883a 	add	r16,r17,r16
8020de90:	dc800215 	stw	r18,8(sp)
8020de94:	84bfff17 	ldw	r18,-4(r16)
8020de98:	dd000415 	stw	r20,16(sp)
8020de9c:	dcc00315 	stw	r19,12(sp)
8020dea0:	9009883a 	mov	r4,r18
8020dea4:	2829883a 	mov	r20,r5
8020dea8:	dfc00515 	stw	ra,20(sp)
8020deac:	020d5dc0 	call	8020d5dc <__hi0bits>
8020deb0:	00c00804 	movi	r3,32
8020deb4:	1889c83a 	sub	r4,r3,r2
8020deb8:	a1000015 	stw	r4,0(r20)
8020debc:	01000284 	movi	r4,10
8020dec0:	84ffff04 	addi	r19,r16,-4
8020dec4:	20801216 	blt	r4,r2,8020df10 <__b2d+0xa0>
8020dec8:	018002c4 	movi	r6,11
8020decc:	308dc83a 	sub	r6,r6,r2
8020ded0:	9186d83a 	srl	r3,r18,r6
8020ded4:	18cffc34 	orhi	r3,r3,16368
8020ded8:	8cc0212e 	bgeu	r17,r19,8020df60 <__b2d+0xf0>
8020dedc:	813ffe17 	ldw	r4,-8(r16)
8020dee0:	218cd83a 	srl	r6,r4,r6
8020dee4:	10800544 	addi	r2,r2,21
8020dee8:	9084983a 	sll	r2,r18,r2
8020deec:	1184b03a 	or	r2,r2,r6
8020def0:	dfc00517 	ldw	ra,20(sp)
8020def4:	dd000417 	ldw	r20,16(sp)
8020def8:	dcc00317 	ldw	r19,12(sp)
8020defc:	dc800217 	ldw	r18,8(sp)
8020df00:	dc400117 	ldw	r17,4(sp)
8020df04:	dc000017 	ldw	r16,0(sp)
8020df08:	dec00604 	addi	sp,sp,24
8020df0c:	f800283a 	ret
8020df10:	8cc00f2e 	bgeu	r17,r19,8020df50 <__b2d+0xe0>
8020df14:	117ffd44 	addi	r5,r2,-11
8020df18:	80bffe17 	ldw	r2,-8(r16)
8020df1c:	28000e26 	beq	r5,zero,8020df58 <__b2d+0xe8>
8020df20:	1949c83a 	sub	r4,r3,r5
8020df24:	9164983a 	sll	r18,r18,r5
8020df28:	1106d83a 	srl	r3,r2,r4
8020df2c:	81bffe04 	addi	r6,r16,-8
8020df30:	948ffc34 	orhi	r18,r18,16368
8020df34:	90c6b03a 	or	r3,r18,r3
8020df38:	89800e2e 	bgeu	r17,r6,8020df74 <__b2d+0x104>
8020df3c:	81bffd17 	ldw	r6,-12(r16)
8020df40:	1144983a 	sll	r2,r2,r5
8020df44:	310ad83a 	srl	r5,r6,r4
8020df48:	2884b03a 	or	r2,r5,r2
8020df4c:	003fe806 	br	8020def0 <__reset+0xfa1edef0>
8020df50:	10bffd44 	addi	r2,r2,-11
8020df54:	1000041e 	bne	r2,zero,8020df68 <__b2d+0xf8>
8020df58:	90cffc34 	orhi	r3,r18,16368
8020df5c:	003fe406 	br	8020def0 <__reset+0xfa1edef0>
8020df60:	000d883a 	mov	r6,zero
8020df64:	003fdf06 	br	8020dee4 <__reset+0xfa1edee4>
8020df68:	90a4983a 	sll	r18,r18,r2
8020df6c:	0005883a 	mov	r2,zero
8020df70:	003ff906 	br	8020df58 <__reset+0xfa1edf58>
8020df74:	1144983a 	sll	r2,r2,r5
8020df78:	003fdd06 	br	8020def0 <__reset+0xfa1edef0>

8020df7c <__d2b>:
8020df7c:	defff804 	addi	sp,sp,-32
8020df80:	dc000215 	stw	r16,8(sp)
8020df84:	3021883a 	mov	r16,r6
8020df88:	dc400315 	stw	r17,12(sp)
8020df8c:	8022907a 	slli	r17,r16,1
8020df90:	dd000615 	stw	r20,24(sp)
8020df94:	2829883a 	mov	r20,r5
8020df98:	01400044 	movi	r5,1
8020df9c:	dcc00515 	stw	r19,20(sp)
8020dfa0:	dc800415 	stw	r18,16(sp)
8020dfa4:	dfc00715 	stw	ra,28(sp)
8020dfa8:	3825883a 	mov	r18,r7
8020dfac:	8822d57a 	srli	r17,r17,21
8020dfb0:	020d2e80 	call	8020d2e8 <_Balloc>
8020dfb4:	1027883a 	mov	r19,r2
8020dfb8:	00800434 	movhi	r2,16
8020dfbc:	10bfffc4 	addi	r2,r2,-1
8020dfc0:	808c703a 	and	r6,r16,r2
8020dfc4:	88000126 	beq	r17,zero,8020dfcc <__d2b+0x50>
8020dfc8:	31800434 	orhi	r6,r6,16
8020dfcc:	d9800015 	stw	r6,0(sp)
8020dfd0:	a0002426 	beq	r20,zero,8020e064 <__d2b+0xe8>
8020dfd4:	d9000104 	addi	r4,sp,4
8020dfd8:	dd000115 	stw	r20,4(sp)
8020dfdc:	020d6440 	call	8020d644 <__lo0bits>
8020dfe0:	d8c00017 	ldw	r3,0(sp)
8020dfe4:	10002f1e 	bne	r2,zero,8020e0a4 <__d2b+0x128>
8020dfe8:	d9000117 	ldw	r4,4(sp)
8020dfec:	99000515 	stw	r4,20(r19)
8020dff0:	1821003a 	cmpeq	r16,r3,zero
8020dff4:	01000084 	movi	r4,2
8020dff8:	2421c83a 	sub	r16,r4,r16
8020dffc:	98c00615 	stw	r3,24(r19)
8020e000:	9c000415 	stw	r16,16(r19)
8020e004:	88001f1e 	bne	r17,zero,8020e084 <__d2b+0x108>
8020e008:	10bef384 	addi	r2,r2,-1074
8020e00c:	90800015 	stw	r2,0(r18)
8020e010:	00900034 	movhi	r2,16384
8020e014:	10bfffc4 	addi	r2,r2,-1
8020e018:	8085883a 	add	r2,r16,r2
8020e01c:	1085883a 	add	r2,r2,r2
8020e020:	1085883a 	add	r2,r2,r2
8020e024:	9885883a 	add	r2,r19,r2
8020e028:	11000517 	ldw	r4,20(r2)
8020e02c:	8020917a 	slli	r16,r16,5
8020e030:	020d5dc0 	call	8020d5dc <__hi0bits>
8020e034:	d8c00817 	ldw	r3,32(sp)
8020e038:	8085c83a 	sub	r2,r16,r2
8020e03c:	18800015 	stw	r2,0(r3)
8020e040:	9805883a 	mov	r2,r19
8020e044:	dfc00717 	ldw	ra,28(sp)
8020e048:	dd000617 	ldw	r20,24(sp)
8020e04c:	dcc00517 	ldw	r19,20(sp)
8020e050:	dc800417 	ldw	r18,16(sp)
8020e054:	dc400317 	ldw	r17,12(sp)
8020e058:	dc000217 	ldw	r16,8(sp)
8020e05c:	dec00804 	addi	sp,sp,32
8020e060:	f800283a 	ret
8020e064:	d809883a 	mov	r4,sp
8020e068:	020d6440 	call	8020d644 <__lo0bits>
8020e06c:	d8c00017 	ldw	r3,0(sp)
8020e070:	04000044 	movi	r16,1
8020e074:	9c000415 	stw	r16,16(r19)
8020e078:	98c00515 	stw	r3,20(r19)
8020e07c:	10800804 	addi	r2,r2,32
8020e080:	883fe126 	beq	r17,zero,8020e008 <__reset+0xfa1ee008>
8020e084:	00c00d44 	movi	r3,53
8020e088:	8c7ef344 	addi	r17,r17,-1075
8020e08c:	88a3883a 	add	r17,r17,r2
8020e090:	1885c83a 	sub	r2,r3,r2
8020e094:	d8c00817 	ldw	r3,32(sp)
8020e098:	94400015 	stw	r17,0(r18)
8020e09c:	18800015 	stw	r2,0(r3)
8020e0a0:	003fe706 	br	8020e040 <__reset+0xfa1ee040>
8020e0a4:	01000804 	movi	r4,32
8020e0a8:	2089c83a 	sub	r4,r4,r2
8020e0ac:	1908983a 	sll	r4,r3,r4
8020e0b0:	d9400117 	ldw	r5,4(sp)
8020e0b4:	1886d83a 	srl	r3,r3,r2
8020e0b8:	2148b03a 	or	r4,r4,r5
8020e0bc:	99000515 	stw	r4,20(r19)
8020e0c0:	d8c00015 	stw	r3,0(sp)
8020e0c4:	003fca06 	br	8020dff0 <__reset+0xfa1edff0>

8020e0c8 <__ratio>:
8020e0c8:	defff904 	addi	sp,sp,-28
8020e0cc:	dc400315 	stw	r17,12(sp)
8020e0d0:	2823883a 	mov	r17,r5
8020e0d4:	d9400104 	addi	r5,sp,4
8020e0d8:	dfc00615 	stw	ra,24(sp)
8020e0dc:	dcc00515 	stw	r19,20(sp)
8020e0e0:	dc800415 	stw	r18,16(sp)
8020e0e4:	2027883a 	mov	r19,r4
8020e0e8:	dc000215 	stw	r16,8(sp)
8020e0ec:	020de700 	call	8020de70 <__b2d>
8020e0f0:	d80b883a 	mov	r5,sp
8020e0f4:	8809883a 	mov	r4,r17
8020e0f8:	1025883a 	mov	r18,r2
8020e0fc:	1821883a 	mov	r16,r3
8020e100:	020de700 	call	8020de70 <__b2d>
8020e104:	8a000417 	ldw	r8,16(r17)
8020e108:	99000417 	ldw	r4,16(r19)
8020e10c:	d9400117 	ldw	r5,4(sp)
8020e110:	2209c83a 	sub	r4,r4,r8
8020e114:	2010917a 	slli	r8,r4,5
8020e118:	d9000017 	ldw	r4,0(sp)
8020e11c:	2909c83a 	sub	r4,r5,r4
8020e120:	4109883a 	add	r4,r8,r4
8020e124:	01000e0e 	bge	zero,r4,8020e160 <__ratio+0x98>
8020e128:	2008953a 	slli	r4,r4,20
8020e12c:	2421883a 	add	r16,r4,r16
8020e130:	100d883a 	mov	r6,r2
8020e134:	180f883a 	mov	r7,r3
8020e138:	9009883a 	mov	r4,r18
8020e13c:	800b883a 	mov	r5,r16
8020e140:	02133c00 	call	802133c0 <__divdf3>
8020e144:	dfc00617 	ldw	ra,24(sp)
8020e148:	dcc00517 	ldw	r19,20(sp)
8020e14c:	dc800417 	ldw	r18,16(sp)
8020e150:	dc400317 	ldw	r17,12(sp)
8020e154:	dc000217 	ldw	r16,8(sp)
8020e158:	dec00704 	addi	sp,sp,28
8020e15c:	f800283a 	ret
8020e160:	2008953a 	slli	r4,r4,20
8020e164:	1907c83a 	sub	r3,r3,r4
8020e168:	003ff106 	br	8020e130 <__reset+0xfa1ee130>

8020e16c <_mprec_log10>:
8020e16c:	defffe04 	addi	sp,sp,-8
8020e170:	dc000015 	stw	r16,0(sp)
8020e174:	dfc00115 	stw	ra,4(sp)
8020e178:	008005c4 	movi	r2,23
8020e17c:	2021883a 	mov	r16,r4
8020e180:	11000d0e 	bge	r2,r4,8020e1b8 <_mprec_log10+0x4c>
8020e184:	0005883a 	mov	r2,zero
8020e188:	00cffc34 	movhi	r3,16368
8020e18c:	843fffc4 	addi	r16,r16,-1
8020e190:	000d883a 	mov	r6,zero
8020e194:	01d00934 	movhi	r7,16420
8020e198:	1009883a 	mov	r4,r2
8020e19c:	180b883a 	mov	r5,r3
8020e1a0:	0213f000 	call	80213f00 <__muldf3>
8020e1a4:	803ff91e 	bne	r16,zero,8020e18c <__reset+0xfa1ee18c>
8020e1a8:	dfc00117 	ldw	ra,4(sp)
8020e1ac:	dc000017 	ldw	r16,0(sp)
8020e1b0:	dec00204 	addi	sp,sp,8
8020e1b4:	f800283a 	ret
8020e1b8:	202090fa 	slli	r16,r4,3
8020e1bc:	00a008b4 	movhi	r2,32802
8020e1c0:	10acfd04 	addi	r2,r2,-19468
8020e1c4:	1421883a 	add	r16,r2,r16
8020e1c8:	80800017 	ldw	r2,0(r16)
8020e1cc:	80c00117 	ldw	r3,4(r16)
8020e1d0:	dfc00117 	ldw	ra,4(sp)
8020e1d4:	dc000017 	ldw	r16,0(sp)
8020e1d8:	dec00204 	addi	sp,sp,8
8020e1dc:	f800283a 	ret

8020e1e0 <__copybits>:
8020e1e0:	297fffc4 	addi	r5,r5,-1
8020e1e4:	280fd17a 	srai	r7,r5,5
8020e1e8:	30c00417 	ldw	r3,16(r6)
8020e1ec:	30800504 	addi	r2,r6,20
8020e1f0:	39c00044 	addi	r7,r7,1
8020e1f4:	18c7883a 	add	r3,r3,r3
8020e1f8:	39cf883a 	add	r7,r7,r7
8020e1fc:	18c7883a 	add	r3,r3,r3
8020e200:	39cf883a 	add	r7,r7,r7
8020e204:	10c7883a 	add	r3,r2,r3
8020e208:	21cf883a 	add	r7,r4,r7
8020e20c:	10c00d2e 	bgeu	r2,r3,8020e244 <__copybits+0x64>
8020e210:	200b883a 	mov	r5,r4
8020e214:	12000017 	ldw	r8,0(r2)
8020e218:	29400104 	addi	r5,r5,4
8020e21c:	10800104 	addi	r2,r2,4
8020e220:	2a3fff15 	stw	r8,-4(r5)
8020e224:	10fffb36 	bltu	r2,r3,8020e214 <__reset+0xfa1ee214>
8020e228:	1985c83a 	sub	r2,r3,r6
8020e22c:	10bffac4 	addi	r2,r2,-21
8020e230:	1004d0ba 	srli	r2,r2,2
8020e234:	10800044 	addi	r2,r2,1
8020e238:	1085883a 	add	r2,r2,r2
8020e23c:	1085883a 	add	r2,r2,r2
8020e240:	2089883a 	add	r4,r4,r2
8020e244:	21c0032e 	bgeu	r4,r7,8020e254 <__copybits+0x74>
8020e248:	20000015 	stw	zero,0(r4)
8020e24c:	21000104 	addi	r4,r4,4
8020e250:	21fffd36 	bltu	r4,r7,8020e248 <__reset+0xfa1ee248>
8020e254:	f800283a 	ret

8020e258 <__any_on>:
8020e258:	20c00417 	ldw	r3,16(r4)
8020e25c:	2805d17a 	srai	r2,r5,5
8020e260:	21000504 	addi	r4,r4,20
8020e264:	18800d0e 	bge	r3,r2,8020e29c <__any_on+0x44>
8020e268:	18c7883a 	add	r3,r3,r3
8020e26c:	18c7883a 	add	r3,r3,r3
8020e270:	20c7883a 	add	r3,r4,r3
8020e274:	20c0192e 	bgeu	r4,r3,8020e2dc <__any_on+0x84>
8020e278:	18bfff17 	ldw	r2,-4(r3)
8020e27c:	18ffff04 	addi	r3,r3,-4
8020e280:	1000041e 	bne	r2,zero,8020e294 <__any_on+0x3c>
8020e284:	20c0142e 	bgeu	r4,r3,8020e2d8 <__any_on+0x80>
8020e288:	18ffff04 	addi	r3,r3,-4
8020e28c:	19400017 	ldw	r5,0(r3)
8020e290:	283ffc26 	beq	r5,zero,8020e284 <__reset+0xfa1ee284>
8020e294:	00800044 	movi	r2,1
8020e298:	f800283a 	ret
8020e29c:	10c00a0e 	bge	r2,r3,8020e2c8 <__any_on+0x70>
8020e2a0:	1085883a 	add	r2,r2,r2
8020e2a4:	1085883a 	add	r2,r2,r2
8020e2a8:	294007cc 	andi	r5,r5,31
8020e2ac:	2087883a 	add	r3,r4,r2
8020e2b0:	283ff026 	beq	r5,zero,8020e274 <__reset+0xfa1ee274>
8020e2b4:	19800017 	ldw	r6,0(r3)
8020e2b8:	3144d83a 	srl	r2,r6,r5
8020e2bc:	114a983a 	sll	r5,r2,r5
8020e2c0:	317ff41e 	bne	r6,r5,8020e294 <__reset+0xfa1ee294>
8020e2c4:	003feb06 	br	8020e274 <__reset+0xfa1ee274>
8020e2c8:	1085883a 	add	r2,r2,r2
8020e2cc:	1085883a 	add	r2,r2,r2
8020e2d0:	2087883a 	add	r3,r4,r2
8020e2d4:	003fe706 	br	8020e274 <__reset+0xfa1ee274>
8020e2d8:	f800283a 	ret
8020e2dc:	0005883a 	mov	r2,zero
8020e2e0:	f800283a 	ret

8020e2e4 <_realloc_r>:
8020e2e4:	defff604 	addi	sp,sp,-40
8020e2e8:	dc800215 	stw	r18,8(sp)
8020e2ec:	dfc00915 	stw	ra,36(sp)
8020e2f0:	df000815 	stw	fp,32(sp)
8020e2f4:	ddc00715 	stw	r23,28(sp)
8020e2f8:	dd800615 	stw	r22,24(sp)
8020e2fc:	dd400515 	stw	r21,20(sp)
8020e300:	dd000415 	stw	r20,16(sp)
8020e304:	dcc00315 	stw	r19,12(sp)
8020e308:	dc400115 	stw	r17,4(sp)
8020e30c:	dc000015 	stw	r16,0(sp)
8020e310:	3025883a 	mov	r18,r6
8020e314:	2800b726 	beq	r5,zero,8020e5f4 <_realloc_r+0x310>
8020e318:	282b883a 	mov	r21,r5
8020e31c:	2029883a 	mov	r20,r4
8020e320:	02156f00 	call	802156f0 <__malloc_lock>
8020e324:	a8bfff17 	ldw	r2,-4(r21)
8020e328:	043fff04 	movi	r16,-4
8020e32c:	90c002c4 	addi	r3,r18,11
8020e330:	01000584 	movi	r4,22
8020e334:	acfffe04 	addi	r19,r21,-8
8020e338:	1420703a 	and	r16,r2,r16
8020e33c:	20c0332e 	bgeu	r4,r3,8020e40c <_realloc_r+0x128>
8020e340:	047ffe04 	movi	r17,-8
8020e344:	1c62703a 	and	r17,r3,r17
8020e348:	8807883a 	mov	r3,r17
8020e34c:	88005816 	blt	r17,zero,8020e4b0 <_realloc_r+0x1cc>
8020e350:	8c805736 	bltu	r17,r18,8020e4b0 <_realloc_r+0x1cc>
8020e354:	80c0300e 	bge	r16,r3,8020e418 <_realloc_r+0x134>
8020e358:	072008b4 	movhi	fp,32802
8020e35c:	e72f0f04 	addi	fp,fp,-17348
8020e360:	e1c00217 	ldw	r7,8(fp)
8020e364:	9c09883a 	add	r4,r19,r16
8020e368:	22000117 	ldw	r8,4(r4)
8020e36c:	21c06326 	beq	r4,r7,8020e4fc <_realloc_r+0x218>
8020e370:	017fff84 	movi	r5,-2
8020e374:	414a703a 	and	r5,r8,r5
8020e378:	214b883a 	add	r5,r4,r5
8020e37c:	29800117 	ldw	r6,4(r5)
8020e380:	3180004c 	andi	r6,r6,1
8020e384:	30003f26 	beq	r6,zero,8020e484 <_realloc_r+0x1a0>
8020e388:	1080004c 	andi	r2,r2,1
8020e38c:	10008326 	beq	r2,zero,8020e59c <_realloc_r+0x2b8>
8020e390:	900b883a 	mov	r5,r18
8020e394:	a009883a 	mov	r4,r20
8020e398:	020c7740 	call	8020c774 <_malloc_r>
8020e39c:	1025883a 	mov	r18,r2
8020e3a0:	10011e26 	beq	r2,zero,8020e81c <_realloc_r+0x538>
8020e3a4:	a93fff17 	ldw	r4,-4(r21)
8020e3a8:	10fffe04 	addi	r3,r2,-8
8020e3ac:	00bfff84 	movi	r2,-2
8020e3b0:	2084703a 	and	r2,r4,r2
8020e3b4:	9885883a 	add	r2,r19,r2
8020e3b8:	1880ee26 	beq	r3,r2,8020e774 <_realloc_r+0x490>
8020e3bc:	81bfff04 	addi	r6,r16,-4
8020e3c0:	00800904 	movi	r2,36
8020e3c4:	1180b836 	bltu	r2,r6,8020e6a8 <_realloc_r+0x3c4>
8020e3c8:	00c004c4 	movi	r3,19
8020e3cc:	19809636 	bltu	r3,r6,8020e628 <_realloc_r+0x344>
8020e3d0:	9005883a 	mov	r2,r18
8020e3d4:	a807883a 	mov	r3,r21
8020e3d8:	19000017 	ldw	r4,0(r3)
8020e3dc:	11000015 	stw	r4,0(r2)
8020e3e0:	19000117 	ldw	r4,4(r3)
8020e3e4:	11000115 	stw	r4,4(r2)
8020e3e8:	18c00217 	ldw	r3,8(r3)
8020e3ec:	10c00215 	stw	r3,8(r2)
8020e3f0:	a80b883a 	mov	r5,r21
8020e3f4:	a009883a 	mov	r4,r20
8020e3f8:	020bb880 	call	8020bb88 <_free_r>
8020e3fc:	a009883a 	mov	r4,r20
8020e400:	02157140 	call	80215714 <__malloc_unlock>
8020e404:	9005883a 	mov	r2,r18
8020e408:	00001206 	br	8020e454 <_realloc_r+0x170>
8020e40c:	00c00404 	movi	r3,16
8020e410:	1823883a 	mov	r17,r3
8020e414:	003fce06 	br	8020e350 <__reset+0xfa1ee350>
8020e418:	a825883a 	mov	r18,r21
8020e41c:	8445c83a 	sub	r2,r16,r17
8020e420:	00c003c4 	movi	r3,15
8020e424:	18802636 	bltu	r3,r2,8020e4c0 <_realloc_r+0x1dc>
8020e428:	99800117 	ldw	r6,4(r19)
8020e42c:	9c07883a 	add	r3,r19,r16
8020e430:	3180004c 	andi	r6,r6,1
8020e434:	3420b03a 	or	r16,r6,r16
8020e438:	9c000115 	stw	r16,4(r19)
8020e43c:	18800117 	ldw	r2,4(r3)
8020e440:	10800054 	ori	r2,r2,1
8020e444:	18800115 	stw	r2,4(r3)
8020e448:	a009883a 	mov	r4,r20
8020e44c:	02157140 	call	80215714 <__malloc_unlock>
8020e450:	9005883a 	mov	r2,r18
8020e454:	dfc00917 	ldw	ra,36(sp)
8020e458:	df000817 	ldw	fp,32(sp)
8020e45c:	ddc00717 	ldw	r23,28(sp)
8020e460:	dd800617 	ldw	r22,24(sp)
8020e464:	dd400517 	ldw	r21,20(sp)
8020e468:	dd000417 	ldw	r20,16(sp)
8020e46c:	dcc00317 	ldw	r19,12(sp)
8020e470:	dc800217 	ldw	r18,8(sp)
8020e474:	dc400117 	ldw	r17,4(sp)
8020e478:	dc000017 	ldw	r16,0(sp)
8020e47c:	dec00a04 	addi	sp,sp,40
8020e480:	f800283a 	ret
8020e484:	017fff04 	movi	r5,-4
8020e488:	414a703a 	and	r5,r8,r5
8020e48c:	814d883a 	add	r6,r16,r5
8020e490:	30c01f16 	blt	r6,r3,8020e510 <_realloc_r+0x22c>
8020e494:	20800317 	ldw	r2,12(r4)
8020e498:	20c00217 	ldw	r3,8(r4)
8020e49c:	a825883a 	mov	r18,r21
8020e4a0:	3021883a 	mov	r16,r6
8020e4a4:	18800315 	stw	r2,12(r3)
8020e4a8:	10c00215 	stw	r3,8(r2)
8020e4ac:	003fdb06 	br	8020e41c <__reset+0xfa1ee41c>
8020e4b0:	00800304 	movi	r2,12
8020e4b4:	a0800015 	stw	r2,0(r20)
8020e4b8:	0005883a 	mov	r2,zero
8020e4bc:	003fe506 	br	8020e454 <__reset+0xfa1ee454>
8020e4c0:	98c00117 	ldw	r3,4(r19)
8020e4c4:	9c4b883a 	add	r5,r19,r17
8020e4c8:	11000054 	ori	r4,r2,1
8020e4cc:	18c0004c 	andi	r3,r3,1
8020e4d0:	1c62b03a 	or	r17,r3,r17
8020e4d4:	9c400115 	stw	r17,4(r19)
8020e4d8:	29000115 	stw	r4,4(r5)
8020e4dc:	2885883a 	add	r2,r5,r2
8020e4e0:	10c00117 	ldw	r3,4(r2)
8020e4e4:	29400204 	addi	r5,r5,8
8020e4e8:	a009883a 	mov	r4,r20
8020e4ec:	18c00054 	ori	r3,r3,1
8020e4f0:	10c00115 	stw	r3,4(r2)
8020e4f4:	020bb880 	call	8020bb88 <_free_r>
8020e4f8:	003fd306 	br	8020e448 <__reset+0xfa1ee448>
8020e4fc:	017fff04 	movi	r5,-4
8020e500:	414a703a 	and	r5,r8,r5
8020e504:	89800404 	addi	r6,r17,16
8020e508:	8151883a 	add	r8,r16,r5
8020e50c:	4180590e 	bge	r8,r6,8020e674 <_realloc_r+0x390>
8020e510:	1080004c 	andi	r2,r2,1
8020e514:	103f9e1e 	bne	r2,zero,8020e390 <__reset+0xfa1ee390>
8020e518:	adbffe17 	ldw	r22,-8(r21)
8020e51c:	00bfff04 	movi	r2,-4
8020e520:	9dadc83a 	sub	r22,r19,r22
8020e524:	b1800117 	ldw	r6,4(r22)
8020e528:	3084703a 	and	r2,r6,r2
8020e52c:	20002026 	beq	r4,zero,8020e5b0 <_realloc_r+0x2cc>
8020e530:	80af883a 	add	r23,r16,r2
8020e534:	b96f883a 	add	r23,r23,r5
8020e538:	21c05f26 	beq	r4,r7,8020e6b8 <_realloc_r+0x3d4>
8020e53c:	b8c01c16 	blt	r23,r3,8020e5b0 <_realloc_r+0x2cc>
8020e540:	20800317 	ldw	r2,12(r4)
8020e544:	20c00217 	ldw	r3,8(r4)
8020e548:	81bfff04 	addi	r6,r16,-4
8020e54c:	01000904 	movi	r4,36
8020e550:	18800315 	stw	r2,12(r3)
8020e554:	10c00215 	stw	r3,8(r2)
8020e558:	b0c00217 	ldw	r3,8(r22)
8020e55c:	b0800317 	ldw	r2,12(r22)
8020e560:	b4800204 	addi	r18,r22,8
8020e564:	18800315 	stw	r2,12(r3)
8020e568:	10c00215 	stw	r3,8(r2)
8020e56c:	21801b36 	bltu	r4,r6,8020e5dc <_realloc_r+0x2f8>
8020e570:	008004c4 	movi	r2,19
8020e574:	1180352e 	bgeu	r2,r6,8020e64c <_realloc_r+0x368>
8020e578:	a8800017 	ldw	r2,0(r21)
8020e57c:	b0800215 	stw	r2,8(r22)
8020e580:	a8800117 	ldw	r2,4(r21)
8020e584:	b0800315 	stw	r2,12(r22)
8020e588:	008006c4 	movi	r2,27
8020e58c:	11807f36 	bltu	r2,r6,8020e78c <_realloc_r+0x4a8>
8020e590:	b0800404 	addi	r2,r22,16
8020e594:	ad400204 	addi	r21,r21,8
8020e598:	00002d06 	br	8020e650 <_realloc_r+0x36c>
8020e59c:	adbffe17 	ldw	r22,-8(r21)
8020e5a0:	00bfff04 	movi	r2,-4
8020e5a4:	9dadc83a 	sub	r22,r19,r22
8020e5a8:	b1000117 	ldw	r4,4(r22)
8020e5ac:	2084703a 	and	r2,r4,r2
8020e5b0:	b03f7726 	beq	r22,zero,8020e390 <__reset+0xfa1ee390>
8020e5b4:	80af883a 	add	r23,r16,r2
8020e5b8:	b8ff7516 	blt	r23,r3,8020e390 <__reset+0xfa1ee390>
8020e5bc:	b0800317 	ldw	r2,12(r22)
8020e5c0:	b0c00217 	ldw	r3,8(r22)
8020e5c4:	81bfff04 	addi	r6,r16,-4
8020e5c8:	01000904 	movi	r4,36
8020e5cc:	18800315 	stw	r2,12(r3)
8020e5d0:	10c00215 	stw	r3,8(r2)
8020e5d4:	b4800204 	addi	r18,r22,8
8020e5d8:	21bfe52e 	bgeu	r4,r6,8020e570 <__reset+0xfa1ee570>
8020e5dc:	a80b883a 	mov	r5,r21
8020e5e0:	9009883a 	mov	r4,r18
8020e5e4:	020d0640 	call	8020d064 <memmove>
8020e5e8:	b821883a 	mov	r16,r23
8020e5ec:	b027883a 	mov	r19,r22
8020e5f0:	003f8a06 	br	8020e41c <__reset+0xfa1ee41c>
8020e5f4:	300b883a 	mov	r5,r6
8020e5f8:	dfc00917 	ldw	ra,36(sp)
8020e5fc:	df000817 	ldw	fp,32(sp)
8020e600:	ddc00717 	ldw	r23,28(sp)
8020e604:	dd800617 	ldw	r22,24(sp)
8020e608:	dd400517 	ldw	r21,20(sp)
8020e60c:	dd000417 	ldw	r20,16(sp)
8020e610:	dcc00317 	ldw	r19,12(sp)
8020e614:	dc800217 	ldw	r18,8(sp)
8020e618:	dc400117 	ldw	r17,4(sp)
8020e61c:	dc000017 	ldw	r16,0(sp)
8020e620:	dec00a04 	addi	sp,sp,40
8020e624:	020c7741 	jmpi	8020c774 <_malloc_r>
8020e628:	a8c00017 	ldw	r3,0(r21)
8020e62c:	90c00015 	stw	r3,0(r18)
8020e630:	a8c00117 	ldw	r3,4(r21)
8020e634:	90c00115 	stw	r3,4(r18)
8020e638:	00c006c4 	movi	r3,27
8020e63c:	19804536 	bltu	r3,r6,8020e754 <_realloc_r+0x470>
8020e640:	90800204 	addi	r2,r18,8
8020e644:	a8c00204 	addi	r3,r21,8
8020e648:	003f6306 	br	8020e3d8 <__reset+0xfa1ee3d8>
8020e64c:	9005883a 	mov	r2,r18
8020e650:	a8c00017 	ldw	r3,0(r21)
8020e654:	b821883a 	mov	r16,r23
8020e658:	b027883a 	mov	r19,r22
8020e65c:	10c00015 	stw	r3,0(r2)
8020e660:	a8c00117 	ldw	r3,4(r21)
8020e664:	10c00115 	stw	r3,4(r2)
8020e668:	a8c00217 	ldw	r3,8(r21)
8020e66c:	10c00215 	stw	r3,8(r2)
8020e670:	003f6a06 	br	8020e41c <__reset+0xfa1ee41c>
8020e674:	9c67883a 	add	r19,r19,r17
8020e678:	4445c83a 	sub	r2,r8,r17
8020e67c:	e4c00215 	stw	r19,8(fp)
8020e680:	10800054 	ori	r2,r2,1
8020e684:	98800115 	stw	r2,4(r19)
8020e688:	a8bfff17 	ldw	r2,-4(r21)
8020e68c:	a009883a 	mov	r4,r20
8020e690:	1080004c 	andi	r2,r2,1
8020e694:	1462b03a 	or	r17,r2,r17
8020e698:	ac7fff15 	stw	r17,-4(r21)
8020e69c:	02157140 	call	80215714 <__malloc_unlock>
8020e6a0:	a805883a 	mov	r2,r21
8020e6a4:	003f6b06 	br	8020e454 <__reset+0xfa1ee454>
8020e6a8:	a80b883a 	mov	r5,r21
8020e6ac:	9009883a 	mov	r4,r18
8020e6b0:	020d0640 	call	8020d064 <memmove>
8020e6b4:	003f4e06 	br	8020e3f0 <__reset+0xfa1ee3f0>
8020e6b8:	89000404 	addi	r4,r17,16
8020e6bc:	b93fbc16 	blt	r23,r4,8020e5b0 <__reset+0xfa1ee5b0>
8020e6c0:	b0800317 	ldw	r2,12(r22)
8020e6c4:	b0c00217 	ldw	r3,8(r22)
8020e6c8:	81bfff04 	addi	r6,r16,-4
8020e6cc:	01000904 	movi	r4,36
8020e6d0:	18800315 	stw	r2,12(r3)
8020e6d4:	10c00215 	stw	r3,8(r2)
8020e6d8:	b4800204 	addi	r18,r22,8
8020e6dc:	21804336 	bltu	r4,r6,8020e7ec <_realloc_r+0x508>
8020e6e0:	008004c4 	movi	r2,19
8020e6e4:	11803f2e 	bgeu	r2,r6,8020e7e4 <_realloc_r+0x500>
8020e6e8:	a8800017 	ldw	r2,0(r21)
8020e6ec:	b0800215 	stw	r2,8(r22)
8020e6f0:	a8800117 	ldw	r2,4(r21)
8020e6f4:	b0800315 	stw	r2,12(r22)
8020e6f8:	008006c4 	movi	r2,27
8020e6fc:	11803f36 	bltu	r2,r6,8020e7fc <_realloc_r+0x518>
8020e700:	b0800404 	addi	r2,r22,16
8020e704:	ad400204 	addi	r21,r21,8
8020e708:	a8c00017 	ldw	r3,0(r21)
8020e70c:	10c00015 	stw	r3,0(r2)
8020e710:	a8c00117 	ldw	r3,4(r21)
8020e714:	10c00115 	stw	r3,4(r2)
8020e718:	a8c00217 	ldw	r3,8(r21)
8020e71c:	10c00215 	stw	r3,8(r2)
8020e720:	b447883a 	add	r3,r22,r17
8020e724:	bc45c83a 	sub	r2,r23,r17
8020e728:	e0c00215 	stw	r3,8(fp)
8020e72c:	10800054 	ori	r2,r2,1
8020e730:	18800115 	stw	r2,4(r3)
8020e734:	b0800117 	ldw	r2,4(r22)
8020e738:	a009883a 	mov	r4,r20
8020e73c:	1080004c 	andi	r2,r2,1
8020e740:	1462b03a 	or	r17,r2,r17
8020e744:	b4400115 	stw	r17,4(r22)
8020e748:	02157140 	call	80215714 <__malloc_unlock>
8020e74c:	9005883a 	mov	r2,r18
8020e750:	003f4006 	br	8020e454 <__reset+0xfa1ee454>
8020e754:	a8c00217 	ldw	r3,8(r21)
8020e758:	90c00215 	stw	r3,8(r18)
8020e75c:	a8c00317 	ldw	r3,12(r21)
8020e760:	90c00315 	stw	r3,12(r18)
8020e764:	30801126 	beq	r6,r2,8020e7ac <_realloc_r+0x4c8>
8020e768:	90800404 	addi	r2,r18,16
8020e76c:	a8c00404 	addi	r3,r21,16
8020e770:	003f1906 	br	8020e3d8 <__reset+0xfa1ee3d8>
8020e774:	90ffff17 	ldw	r3,-4(r18)
8020e778:	00bfff04 	movi	r2,-4
8020e77c:	a825883a 	mov	r18,r21
8020e780:	1884703a 	and	r2,r3,r2
8020e784:	80a1883a 	add	r16,r16,r2
8020e788:	003f2406 	br	8020e41c <__reset+0xfa1ee41c>
8020e78c:	a8800217 	ldw	r2,8(r21)
8020e790:	b0800415 	stw	r2,16(r22)
8020e794:	a8800317 	ldw	r2,12(r21)
8020e798:	b0800515 	stw	r2,20(r22)
8020e79c:	31000a26 	beq	r6,r4,8020e7c8 <_realloc_r+0x4e4>
8020e7a0:	b0800604 	addi	r2,r22,24
8020e7a4:	ad400404 	addi	r21,r21,16
8020e7a8:	003fa906 	br	8020e650 <__reset+0xfa1ee650>
8020e7ac:	a9000417 	ldw	r4,16(r21)
8020e7b0:	90800604 	addi	r2,r18,24
8020e7b4:	a8c00604 	addi	r3,r21,24
8020e7b8:	91000415 	stw	r4,16(r18)
8020e7bc:	a9000517 	ldw	r4,20(r21)
8020e7c0:	91000515 	stw	r4,20(r18)
8020e7c4:	003f0406 	br	8020e3d8 <__reset+0xfa1ee3d8>
8020e7c8:	a8c00417 	ldw	r3,16(r21)
8020e7cc:	ad400604 	addi	r21,r21,24
8020e7d0:	b0800804 	addi	r2,r22,32
8020e7d4:	b0c00615 	stw	r3,24(r22)
8020e7d8:	a8ffff17 	ldw	r3,-4(r21)
8020e7dc:	b0c00715 	stw	r3,28(r22)
8020e7e0:	003f9b06 	br	8020e650 <__reset+0xfa1ee650>
8020e7e4:	9005883a 	mov	r2,r18
8020e7e8:	003fc706 	br	8020e708 <__reset+0xfa1ee708>
8020e7ec:	a80b883a 	mov	r5,r21
8020e7f0:	9009883a 	mov	r4,r18
8020e7f4:	020d0640 	call	8020d064 <memmove>
8020e7f8:	003fc906 	br	8020e720 <__reset+0xfa1ee720>
8020e7fc:	a8800217 	ldw	r2,8(r21)
8020e800:	b0800415 	stw	r2,16(r22)
8020e804:	a8800317 	ldw	r2,12(r21)
8020e808:	b0800515 	stw	r2,20(r22)
8020e80c:	31000726 	beq	r6,r4,8020e82c <_realloc_r+0x548>
8020e810:	b0800604 	addi	r2,r22,24
8020e814:	ad400404 	addi	r21,r21,16
8020e818:	003fbb06 	br	8020e708 <__reset+0xfa1ee708>
8020e81c:	a009883a 	mov	r4,r20
8020e820:	02157140 	call	80215714 <__malloc_unlock>
8020e824:	0005883a 	mov	r2,zero
8020e828:	003f0a06 	br	8020e454 <__reset+0xfa1ee454>
8020e82c:	a8c00417 	ldw	r3,16(r21)
8020e830:	ad400604 	addi	r21,r21,24
8020e834:	b0800804 	addi	r2,r22,32
8020e838:	b0c00615 	stw	r3,24(r22)
8020e83c:	a8ffff17 	ldw	r3,-4(r21)
8020e840:	b0c00715 	stw	r3,28(r22)
8020e844:	003fb006 	br	8020e708 <__reset+0xfa1ee708>

8020e848 <__fpclassifyd>:
8020e848:	00a00034 	movhi	r2,32768
8020e84c:	10bfffc4 	addi	r2,r2,-1
8020e850:	2884703a 	and	r2,r5,r2
8020e854:	10000726 	beq	r2,zero,8020e874 <__fpclassifyd+0x2c>
8020e858:	00fffc34 	movhi	r3,65520
8020e85c:	019ff834 	movhi	r6,32736
8020e860:	28c7883a 	add	r3,r5,r3
8020e864:	31bfffc4 	addi	r6,r6,-1
8020e868:	30c00536 	bltu	r6,r3,8020e880 <__fpclassifyd+0x38>
8020e86c:	00800104 	movi	r2,4
8020e870:	f800283a 	ret
8020e874:	2000021e 	bne	r4,zero,8020e880 <__fpclassifyd+0x38>
8020e878:	00800084 	movi	r2,2
8020e87c:	f800283a 	ret
8020e880:	00dffc34 	movhi	r3,32752
8020e884:	019ff834 	movhi	r6,32736
8020e888:	28cb883a 	add	r5,r5,r3
8020e88c:	31bfffc4 	addi	r6,r6,-1
8020e890:	317ff62e 	bgeu	r6,r5,8020e86c <__reset+0xfa1ee86c>
8020e894:	01400434 	movhi	r5,16
8020e898:	297fffc4 	addi	r5,r5,-1
8020e89c:	28800236 	bltu	r5,r2,8020e8a8 <__fpclassifyd+0x60>
8020e8a0:	008000c4 	movi	r2,3
8020e8a4:	f800283a 	ret
8020e8a8:	10c00226 	beq	r2,r3,8020e8b4 <__fpclassifyd+0x6c>
8020e8ac:	0005883a 	mov	r2,zero
8020e8b0:	f800283a 	ret
8020e8b4:	2005003a 	cmpeq	r2,r4,zero
8020e8b8:	f800283a 	ret

8020e8bc <_sbrk_r>:
8020e8bc:	defffd04 	addi	sp,sp,-12
8020e8c0:	dc000015 	stw	r16,0(sp)
8020e8c4:	042008b4 	movhi	r16,32802
8020e8c8:	dc400115 	stw	r17,4(sp)
8020e8cc:	84352304 	addi	r16,r16,-11124
8020e8d0:	2023883a 	mov	r17,r4
8020e8d4:	2809883a 	mov	r4,r5
8020e8d8:	dfc00215 	stw	ra,8(sp)
8020e8dc:	80000015 	stw	zero,0(r16)
8020e8e0:	02158d40 	call	802158d4 <sbrk>
8020e8e4:	00ffffc4 	movi	r3,-1
8020e8e8:	10c00526 	beq	r2,r3,8020e900 <_sbrk_r+0x44>
8020e8ec:	dfc00217 	ldw	ra,8(sp)
8020e8f0:	dc400117 	ldw	r17,4(sp)
8020e8f4:	dc000017 	ldw	r16,0(sp)
8020e8f8:	dec00304 	addi	sp,sp,12
8020e8fc:	f800283a 	ret
8020e900:	80c00017 	ldw	r3,0(r16)
8020e904:	183ff926 	beq	r3,zero,8020e8ec <__reset+0xfa1ee8ec>
8020e908:	88c00015 	stw	r3,0(r17)
8020e90c:	003ff706 	br	8020e8ec <__reset+0xfa1ee8ec>

8020e910 <__sread>:
8020e910:	defffe04 	addi	sp,sp,-8
8020e914:	dc000015 	stw	r16,0(sp)
8020e918:	2821883a 	mov	r16,r5
8020e91c:	2940038f 	ldh	r5,14(r5)
8020e920:	dfc00115 	stw	ra,4(sp)
8020e924:	0211b100 	call	80211b10 <_read_r>
8020e928:	10000716 	blt	r2,zero,8020e948 <__sread+0x38>
8020e92c:	80c01417 	ldw	r3,80(r16)
8020e930:	1887883a 	add	r3,r3,r2
8020e934:	80c01415 	stw	r3,80(r16)
8020e938:	dfc00117 	ldw	ra,4(sp)
8020e93c:	dc000017 	ldw	r16,0(sp)
8020e940:	dec00204 	addi	sp,sp,8
8020e944:	f800283a 	ret
8020e948:	80c0030b 	ldhu	r3,12(r16)
8020e94c:	18fbffcc 	andi	r3,r3,61439
8020e950:	80c0030d 	sth	r3,12(r16)
8020e954:	dfc00117 	ldw	ra,4(sp)
8020e958:	dc000017 	ldw	r16,0(sp)
8020e95c:	dec00204 	addi	sp,sp,8
8020e960:	f800283a 	ret

8020e964 <__seofread>:
8020e964:	0005883a 	mov	r2,zero
8020e968:	f800283a 	ret

8020e96c <__swrite>:
8020e96c:	2880030b 	ldhu	r2,12(r5)
8020e970:	defffb04 	addi	sp,sp,-20
8020e974:	dcc00315 	stw	r19,12(sp)
8020e978:	dc800215 	stw	r18,8(sp)
8020e97c:	dc400115 	stw	r17,4(sp)
8020e980:	dc000015 	stw	r16,0(sp)
8020e984:	dfc00415 	stw	ra,16(sp)
8020e988:	10c0400c 	andi	r3,r2,256
8020e98c:	2821883a 	mov	r16,r5
8020e990:	2023883a 	mov	r17,r4
8020e994:	3025883a 	mov	r18,r6
8020e998:	3827883a 	mov	r19,r7
8020e99c:	18000526 	beq	r3,zero,8020e9b4 <__swrite+0x48>
8020e9a0:	2940038f 	ldh	r5,14(r5)
8020e9a4:	01c00084 	movi	r7,2
8020e9a8:	000d883a 	mov	r6,zero
8020e9ac:	0211ab00 	call	80211ab0 <_lseek_r>
8020e9b0:	8080030b 	ldhu	r2,12(r16)
8020e9b4:	8140038f 	ldh	r5,14(r16)
8020e9b8:	10bbffcc 	andi	r2,r2,61439
8020e9bc:	980f883a 	mov	r7,r19
8020e9c0:	900d883a 	mov	r6,r18
8020e9c4:	8809883a 	mov	r4,r17
8020e9c8:	8080030d 	sth	r2,12(r16)
8020e9cc:	dfc00417 	ldw	ra,16(sp)
8020e9d0:	dcc00317 	ldw	r19,12(sp)
8020e9d4:	dc800217 	ldw	r18,8(sp)
8020e9d8:	dc400117 	ldw	r17,4(sp)
8020e9dc:	dc000017 	ldw	r16,0(sp)
8020e9e0:	dec00504 	addi	sp,sp,20
8020e9e4:	021157c1 	jmpi	8021157c <_write_r>

8020e9e8 <__sseek>:
8020e9e8:	defffe04 	addi	sp,sp,-8
8020e9ec:	dc000015 	stw	r16,0(sp)
8020e9f0:	2821883a 	mov	r16,r5
8020e9f4:	2940038f 	ldh	r5,14(r5)
8020e9f8:	dfc00115 	stw	ra,4(sp)
8020e9fc:	0211ab00 	call	80211ab0 <_lseek_r>
8020ea00:	00ffffc4 	movi	r3,-1
8020ea04:	10c00826 	beq	r2,r3,8020ea28 <__sseek+0x40>
8020ea08:	80c0030b 	ldhu	r3,12(r16)
8020ea0c:	80801415 	stw	r2,80(r16)
8020ea10:	18c40014 	ori	r3,r3,4096
8020ea14:	80c0030d 	sth	r3,12(r16)
8020ea18:	dfc00117 	ldw	ra,4(sp)
8020ea1c:	dc000017 	ldw	r16,0(sp)
8020ea20:	dec00204 	addi	sp,sp,8
8020ea24:	f800283a 	ret
8020ea28:	80c0030b 	ldhu	r3,12(r16)
8020ea2c:	18fbffcc 	andi	r3,r3,61439
8020ea30:	80c0030d 	sth	r3,12(r16)
8020ea34:	dfc00117 	ldw	ra,4(sp)
8020ea38:	dc000017 	ldw	r16,0(sp)
8020ea3c:	dec00204 	addi	sp,sp,8
8020ea40:	f800283a 	ret

8020ea44 <__sclose>:
8020ea44:	2940038f 	ldh	r5,14(r5)
8020ea48:	02115dc1 	jmpi	802115dc <_close_r>

8020ea4c <strcmp>:
8020ea4c:	2144b03a 	or	r2,r4,r5
8020ea50:	108000cc 	andi	r2,r2,3
8020ea54:	1000171e 	bne	r2,zero,8020eab4 <strcmp+0x68>
8020ea58:	20800017 	ldw	r2,0(r4)
8020ea5c:	28c00017 	ldw	r3,0(r5)
8020ea60:	10c0141e 	bne	r2,r3,8020eab4 <strcmp+0x68>
8020ea64:	027fbff4 	movhi	r9,65279
8020ea68:	4a7fbfc4 	addi	r9,r9,-257
8020ea6c:	0086303a 	nor	r3,zero,r2
8020ea70:	02202074 	movhi	r8,32897
8020ea74:	1245883a 	add	r2,r2,r9
8020ea78:	42202004 	addi	r8,r8,-32640
8020ea7c:	10c4703a 	and	r2,r2,r3
8020ea80:	1204703a 	and	r2,r2,r8
8020ea84:	10000226 	beq	r2,zero,8020ea90 <strcmp+0x44>
8020ea88:	00002306 	br	8020eb18 <strcmp+0xcc>
8020ea8c:	1000221e 	bne	r2,zero,8020eb18 <strcmp+0xcc>
8020ea90:	21000104 	addi	r4,r4,4
8020ea94:	20c00017 	ldw	r3,0(r4)
8020ea98:	29400104 	addi	r5,r5,4
8020ea9c:	29800017 	ldw	r6,0(r5)
8020eaa0:	1a4f883a 	add	r7,r3,r9
8020eaa4:	00c4303a 	nor	r2,zero,r3
8020eaa8:	3884703a 	and	r2,r7,r2
8020eaac:	1204703a 	and	r2,r2,r8
8020eab0:	19bff626 	beq	r3,r6,8020ea8c <__reset+0xfa1eea8c>
8020eab4:	20800003 	ldbu	r2,0(r4)
8020eab8:	10c03fcc 	andi	r3,r2,255
8020eabc:	18c0201c 	xori	r3,r3,128
8020eac0:	18ffe004 	addi	r3,r3,-128
8020eac4:	18000c26 	beq	r3,zero,8020eaf8 <strcmp+0xac>
8020eac8:	29800007 	ldb	r6,0(r5)
8020eacc:	19800326 	beq	r3,r6,8020eadc <strcmp+0x90>
8020ead0:	00001306 	br	8020eb20 <strcmp+0xd4>
8020ead4:	29800007 	ldb	r6,0(r5)
8020ead8:	11800b1e 	bne	r2,r6,8020eb08 <strcmp+0xbc>
8020eadc:	21000044 	addi	r4,r4,1
8020eae0:	20c00003 	ldbu	r3,0(r4)
8020eae4:	29400044 	addi	r5,r5,1
8020eae8:	18803fcc 	andi	r2,r3,255
8020eaec:	1080201c 	xori	r2,r2,128
8020eaf0:	10bfe004 	addi	r2,r2,-128
8020eaf4:	103ff71e 	bne	r2,zero,8020ead4 <__reset+0xfa1eead4>
8020eaf8:	0007883a 	mov	r3,zero
8020eafc:	28800003 	ldbu	r2,0(r5)
8020eb00:	1885c83a 	sub	r2,r3,r2
8020eb04:	f800283a 	ret
8020eb08:	28800003 	ldbu	r2,0(r5)
8020eb0c:	18c03fcc 	andi	r3,r3,255
8020eb10:	1885c83a 	sub	r2,r3,r2
8020eb14:	f800283a 	ret
8020eb18:	0005883a 	mov	r2,zero
8020eb1c:	f800283a 	ret
8020eb20:	10c03fcc 	andi	r3,r2,255
8020eb24:	003ff506 	br	8020eafc <__reset+0xfa1eeafc>

8020eb28 <__ssprint_r>:
8020eb28:	30800217 	ldw	r2,8(r6)
8020eb2c:	defff604 	addi	sp,sp,-40
8020eb30:	dc800215 	stw	r18,8(sp)
8020eb34:	dfc00915 	stw	ra,36(sp)
8020eb38:	df000815 	stw	fp,32(sp)
8020eb3c:	ddc00715 	stw	r23,28(sp)
8020eb40:	dd800615 	stw	r22,24(sp)
8020eb44:	dd400515 	stw	r21,20(sp)
8020eb48:	dd000415 	stw	r20,16(sp)
8020eb4c:	dcc00315 	stw	r19,12(sp)
8020eb50:	dc400115 	stw	r17,4(sp)
8020eb54:	dc000015 	stw	r16,0(sp)
8020eb58:	3025883a 	mov	r18,r6
8020eb5c:	10005826 	beq	r2,zero,8020ecc0 <__ssprint_r+0x198>
8020eb60:	2027883a 	mov	r19,r4
8020eb64:	35c00017 	ldw	r23,0(r6)
8020eb68:	29000017 	ldw	r4,0(r5)
8020eb6c:	28800217 	ldw	r2,8(r5)
8020eb70:	2823883a 	mov	r17,r5
8020eb74:	0039883a 	mov	fp,zero
8020eb78:	0021883a 	mov	r16,zero
8020eb7c:	80003926 	beq	r16,zero,8020ec64 <__ssprint_r+0x13c>
8020eb80:	102b883a 	mov	r21,r2
8020eb84:	102d883a 	mov	r22,r2
8020eb88:	80803a36 	bltu	r16,r2,8020ec74 <__ssprint_r+0x14c>
8020eb8c:	88c0030b 	ldhu	r3,12(r17)
8020eb90:	1881200c 	andi	r2,r3,1152
8020eb94:	10002626 	beq	r2,zero,8020ec30 <__ssprint_r+0x108>
8020eb98:	88800517 	ldw	r2,20(r17)
8020eb9c:	89400417 	ldw	r5,16(r17)
8020eba0:	81800044 	addi	r6,r16,1
8020eba4:	108f883a 	add	r7,r2,r2
8020eba8:	3885883a 	add	r2,r7,r2
8020ebac:	100ed7fa 	srli	r7,r2,31
8020ebb0:	216dc83a 	sub	r22,r4,r5
8020ebb4:	3589883a 	add	r4,r6,r22
8020ebb8:	3885883a 	add	r2,r7,r2
8020ebbc:	102bd07a 	srai	r21,r2,1
8020ebc0:	a80d883a 	mov	r6,r21
8020ebc4:	a900022e 	bgeu	r21,r4,8020ebd0 <__ssprint_r+0xa8>
8020ebc8:	202b883a 	mov	r21,r4
8020ebcc:	200d883a 	mov	r6,r4
8020ebd0:	18c1000c 	andi	r3,r3,1024
8020ebd4:	18002a26 	beq	r3,zero,8020ec80 <__ssprint_r+0x158>
8020ebd8:	300b883a 	mov	r5,r6
8020ebdc:	9809883a 	mov	r4,r19
8020ebe0:	020c7740 	call	8020c774 <_malloc_r>
8020ebe4:	1029883a 	mov	r20,r2
8020ebe8:	10002c26 	beq	r2,zero,8020ec9c <__ssprint_r+0x174>
8020ebec:	89400417 	ldw	r5,16(r17)
8020ebf0:	b00d883a 	mov	r6,r22
8020ebf4:	1009883a 	mov	r4,r2
8020ebf8:	02051b40 	call	802051b4 <memcpy>
8020ebfc:	8880030b 	ldhu	r2,12(r17)
8020ec00:	00fedfc4 	movi	r3,-1153
8020ec04:	10c4703a 	and	r2,r2,r3
8020ec08:	10802014 	ori	r2,r2,128
8020ec0c:	8880030d 	sth	r2,12(r17)
8020ec10:	a589883a 	add	r4,r20,r22
8020ec14:	adadc83a 	sub	r22,r21,r22
8020ec18:	8d400515 	stw	r21,20(r17)
8020ec1c:	8d800215 	stw	r22,8(r17)
8020ec20:	8d000415 	stw	r20,16(r17)
8020ec24:	89000015 	stw	r4,0(r17)
8020ec28:	802b883a 	mov	r21,r16
8020ec2c:	802d883a 	mov	r22,r16
8020ec30:	b00d883a 	mov	r6,r22
8020ec34:	e00b883a 	mov	r5,fp
8020ec38:	020d0640 	call	8020d064 <memmove>
8020ec3c:	88800217 	ldw	r2,8(r17)
8020ec40:	89000017 	ldw	r4,0(r17)
8020ec44:	90c00217 	ldw	r3,8(r18)
8020ec48:	1545c83a 	sub	r2,r2,r21
8020ec4c:	2589883a 	add	r4,r4,r22
8020ec50:	88800215 	stw	r2,8(r17)
8020ec54:	89000015 	stw	r4,0(r17)
8020ec58:	1c21c83a 	sub	r16,r3,r16
8020ec5c:	94000215 	stw	r16,8(r18)
8020ec60:	80001726 	beq	r16,zero,8020ecc0 <__ssprint_r+0x198>
8020ec64:	bf000017 	ldw	fp,0(r23)
8020ec68:	bc000117 	ldw	r16,4(r23)
8020ec6c:	bdc00204 	addi	r23,r23,8
8020ec70:	003fc206 	br	8020eb7c <__reset+0xfa1eeb7c>
8020ec74:	802b883a 	mov	r21,r16
8020ec78:	802d883a 	mov	r22,r16
8020ec7c:	003fec06 	br	8020ec30 <__reset+0xfa1eec30>
8020ec80:	9809883a 	mov	r4,r19
8020ec84:	020e2e40 	call	8020e2e4 <_realloc_r>
8020ec88:	1029883a 	mov	r20,r2
8020ec8c:	103fe01e 	bne	r2,zero,8020ec10 <__reset+0xfa1eec10>
8020ec90:	89400417 	ldw	r5,16(r17)
8020ec94:	9809883a 	mov	r4,r19
8020ec98:	020bb880 	call	8020bb88 <_free_r>
8020ec9c:	88c0030b 	ldhu	r3,12(r17)
8020eca0:	00800304 	movi	r2,12
8020eca4:	98800015 	stw	r2,0(r19)
8020eca8:	18c01014 	ori	r3,r3,64
8020ecac:	88c0030d 	sth	r3,12(r17)
8020ecb0:	00bfffc4 	movi	r2,-1
8020ecb4:	90000215 	stw	zero,8(r18)
8020ecb8:	90000115 	stw	zero,4(r18)
8020ecbc:	00000206 	br	8020ecc8 <__ssprint_r+0x1a0>
8020ecc0:	90000115 	stw	zero,4(r18)
8020ecc4:	0005883a 	mov	r2,zero
8020ecc8:	dfc00917 	ldw	ra,36(sp)
8020eccc:	df000817 	ldw	fp,32(sp)
8020ecd0:	ddc00717 	ldw	r23,28(sp)
8020ecd4:	dd800617 	ldw	r22,24(sp)
8020ecd8:	dd400517 	ldw	r21,20(sp)
8020ecdc:	dd000417 	ldw	r20,16(sp)
8020ece0:	dcc00317 	ldw	r19,12(sp)
8020ece4:	dc800217 	ldw	r18,8(sp)
8020ece8:	dc400117 	ldw	r17,4(sp)
8020ecec:	dc000017 	ldw	r16,0(sp)
8020ecf0:	dec00a04 	addi	sp,sp,40
8020ecf4:	f800283a 	ret

8020ecf8 <___svfiprintf_internal_r>:
8020ecf8:	2880030b 	ldhu	r2,12(r5)
8020ecfc:	deffc804 	addi	sp,sp,-224
8020ed00:	dcc03115 	stw	r19,196(sp)
8020ed04:	dfc03715 	stw	ra,220(sp)
8020ed08:	df003615 	stw	fp,216(sp)
8020ed0c:	ddc03515 	stw	r23,212(sp)
8020ed10:	dd803415 	stw	r22,208(sp)
8020ed14:	dd403315 	stw	r21,204(sp)
8020ed18:	dd003215 	stw	r20,200(sp)
8020ed1c:	dc803015 	stw	r18,192(sp)
8020ed20:	dc402f15 	stw	r17,188(sp)
8020ed24:	dc002e15 	stw	r16,184(sp)
8020ed28:	d9402715 	stw	r5,156(sp)
8020ed2c:	d9002a15 	stw	r4,168(sp)
8020ed30:	1080200c 	andi	r2,r2,128
8020ed34:	d9c02315 	stw	r7,140(sp)
8020ed38:	3027883a 	mov	r19,r6
8020ed3c:	10000226 	beq	r2,zero,8020ed48 <___svfiprintf_internal_r+0x50>
8020ed40:	28800417 	ldw	r2,16(r5)
8020ed44:	10041d26 	beq	r2,zero,8020fdbc <___svfiprintf_internal_r+0x10c4>
8020ed48:	dac01a04 	addi	r11,sp,104
8020ed4c:	dac01e15 	stw	r11,120(sp)
8020ed50:	d8801e17 	ldw	r2,120(sp)
8020ed54:	dac019c4 	addi	r11,sp,103
8020ed58:	dd402a17 	ldw	r21,168(sp)
8020ed5c:	ddc02717 	ldw	r23,156(sp)
8020ed60:	05a008b4 	movhi	r22,32802
8020ed64:	052008b4 	movhi	r20,32802
8020ed68:	dac01f15 	stw	r11,124(sp)
8020ed6c:	12d7c83a 	sub	r11,r2,r11
8020ed70:	b5ad3304 	addi	r22,r22,-19252
8020ed74:	a52d2f04 	addi	r20,r20,-19268
8020ed78:	dec01a15 	stw	sp,104(sp)
8020ed7c:	d8001c15 	stw	zero,112(sp)
8020ed80:	d8001b15 	stw	zero,108(sp)
8020ed84:	d811883a 	mov	r8,sp
8020ed88:	d8002915 	stw	zero,164(sp)
8020ed8c:	d8002515 	stw	zero,148(sp)
8020ed90:	dac02b15 	stw	r11,172(sp)
8020ed94:	98800007 	ldb	r2,0(r19)
8020ed98:	1002dd26 	beq	r2,zero,8020f910 <___svfiprintf_internal_r+0xc18>
8020ed9c:	00c00944 	movi	r3,37
8020eda0:	9823883a 	mov	r17,r19
8020eda4:	10c0021e 	bne	r2,r3,8020edb0 <___svfiprintf_internal_r+0xb8>
8020eda8:	00001406 	br	8020edfc <___svfiprintf_internal_r+0x104>
8020edac:	10c00326 	beq	r2,r3,8020edbc <___svfiprintf_internal_r+0xc4>
8020edb0:	8c400044 	addi	r17,r17,1
8020edb4:	88800007 	ldb	r2,0(r17)
8020edb8:	103ffc1e 	bne	r2,zero,8020edac <__reset+0xfa1eedac>
8020edbc:	8ce1c83a 	sub	r16,r17,r19
8020edc0:	80000e26 	beq	r16,zero,8020edfc <___svfiprintf_internal_r+0x104>
8020edc4:	d8c01c17 	ldw	r3,112(sp)
8020edc8:	d8801b17 	ldw	r2,108(sp)
8020edcc:	44c00015 	stw	r19,0(r8)
8020edd0:	1c07883a 	add	r3,r3,r16
8020edd4:	10800044 	addi	r2,r2,1
8020edd8:	d8c01c15 	stw	r3,112(sp)
8020eddc:	44000115 	stw	r16,4(r8)
8020ede0:	d8801b15 	stw	r2,108(sp)
8020ede4:	00c001c4 	movi	r3,7
8020ede8:	18831e16 	blt	r3,r2,8020fa64 <___svfiprintf_internal_r+0xd6c>
8020edec:	42000204 	addi	r8,r8,8
8020edf0:	dac02517 	ldw	r11,148(sp)
8020edf4:	5c17883a 	add	r11,r11,r16
8020edf8:	dac02515 	stw	r11,148(sp)
8020edfc:	88800007 	ldb	r2,0(r17)
8020ee00:	1002c526 	beq	r2,zero,8020f918 <___svfiprintf_internal_r+0xc20>
8020ee04:	88c00047 	ldb	r3,1(r17)
8020ee08:	8cc00044 	addi	r19,r17,1
8020ee0c:	d8001d85 	stb	zero,118(sp)
8020ee10:	0009883a 	mov	r4,zero
8020ee14:	000f883a 	mov	r7,zero
8020ee18:	043fffc4 	movi	r16,-1
8020ee1c:	d8002415 	stw	zero,144(sp)
8020ee20:	0025883a 	mov	r18,zero
8020ee24:	01401604 	movi	r5,88
8020ee28:	01800244 	movi	r6,9
8020ee2c:	02800a84 	movi	r10,42
8020ee30:	02401b04 	movi	r9,108
8020ee34:	9cc00044 	addi	r19,r19,1
8020ee38:	18bff804 	addi	r2,r3,-32
8020ee3c:	2881dd36 	bltu	r5,r2,8020f5b4 <___svfiprintf_internal_r+0x8bc>
8020ee40:	100490ba 	slli	r2,r2,2
8020ee44:	02e00874 	movhi	r11,32801
8020ee48:	5afb9604 	addi	r11,r11,-4520
8020ee4c:	12c5883a 	add	r2,r2,r11
8020ee50:	10800017 	ldw	r2,0(r2)
8020ee54:	1000683a 	jmp	r2
8020ee58:	8020f054 	ori	zero,r16,33729
8020ee5c:	8020f5b4 	orhi	zero,r16,33750
8020ee60:	8020f5b4 	orhi	zero,r16,33750
8020ee64:	8020f048 	cmpgei	zero,r16,-31807
8020ee68:	8020f5b4 	orhi	zero,r16,33750
8020ee6c:	8020f5b4 	orhi	zero,r16,33750
8020ee70:	8020f5b4 	orhi	zero,r16,33750
8020ee74:	8020f5b4 	orhi	zero,r16,33750
8020ee78:	8020f5b4 	orhi	zero,r16,33750
8020ee7c:	8020f5b4 	orhi	zero,r16,33750
8020ee80:	8020efbc 	xorhi	zero,r16,33726
8020ee84:	8020f198 	cmpnei	zero,r16,-31802
8020ee88:	8020f5b4 	orhi	zero,r16,33750
8020ee8c:	8020efe8 	cmpgeui	zero,r16,33727
8020ee90:	8020f5e8 	cmpgeui	zero,r16,33751
8020ee94:	8020f5b4 	orhi	zero,r16,33750
8020ee98:	8020f5dc 	xori	zero,r16,33751
8020ee9c:	8020f57c 	xorhi	zero,r16,33749
8020eea0:	8020f57c 	xorhi	zero,r16,33749
8020eea4:	8020f57c 	xorhi	zero,r16,33749
8020eea8:	8020f57c 	xorhi	zero,r16,33749
8020eeac:	8020f57c 	xorhi	zero,r16,33749
8020eeb0:	8020f57c 	xorhi	zero,r16,33749
8020eeb4:	8020f57c 	xorhi	zero,r16,33749
8020eeb8:	8020f57c 	xorhi	zero,r16,33749
8020eebc:	8020f57c 	xorhi	zero,r16,33749
8020eec0:	8020f5b4 	orhi	zero,r16,33750
8020eec4:	8020f5b4 	orhi	zero,r16,33750
8020eec8:	8020f5b4 	orhi	zero,r16,33750
8020eecc:	8020f5b4 	orhi	zero,r16,33750
8020eed0:	8020f5b4 	orhi	zero,r16,33750
8020eed4:	8020f5b4 	orhi	zero,r16,33750
8020eed8:	8020f5b4 	orhi	zero,r16,33750
8020eedc:	8020f5b4 	orhi	zero,r16,33750
8020eee0:	8020f5b4 	orhi	zero,r16,33750
8020eee4:	8020f5b4 	orhi	zero,r16,33750
8020eee8:	8020f518 	cmpnei	zero,r16,-31788
8020eeec:	8020f5b4 	orhi	zero,r16,33750
8020eef0:	8020f5b4 	orhi	zero,r16,33750
8020eef4:	8020f5b4 	orhi	zero,r16,33750
8020eef8:	8020f5b4 	orhi	zero,r16,33750
8020eefc:	8020f5b4 	orhi	zero,r16,33750
8020ef00:	8020f5b4 	orhi	zero,r16,33750
8020ef04:	8020f5b4 	orhi	zero,r16,33750
8020ef08:	8020f5b4 	orhi	zero,r16,33750
8020ef0c:	8020f5b4 	orhi	zero,r16,33750
8020ef10:	8020f5b4 	orhi	zero,r16,33750
8020ef14:	8020f690 	cmplti	zero,r16,-31782
8020ef18:	8020f5b4 	orhi	zero,r16,33750
8020ef1c:	8020f5b4 	orhi	zero,r16,33750
8020ef20:	8020f5b4 	orhi	zero,r16,33750
8020ef24:	8020f5b4 	orhi	zero,r16,33750
8020ef28:	8020f5b4 	orhi	zero,r16,33750
8020ef2c:	8020f628 	cmpgeui	zero,r16,33752
8020ef30:	8020f5b4 	orhi	zero,r16,33750
8020ef34:	8020f5b4 	orhi	zero,r16,33750
8020ef38:	8020f35c 	xori	zero,r16,33741
8020ef3c:	8020f5b4 	orhi	zero,r16,33750
8020ef40:	8020f5b4 	orhi	zero,r16,33750
8020ef44:	8020f5b4 	orhi	zero,r16,33750
8020ef48:	8020f5b4 	orhi	zero,r16,33750
8020ef4c:	8020f5b4 	orhi	zero,r16,33750
8020ef50:	8020f5b4 	orhi	zero,r16,33750
8020ef54:	8020f5b4 	orhi	zero,r16,33750
8020ef58:	8020f5b4 	orhi	zero,r16,33750
8020ef5c:	8020f5b4 	orhi	zero,r16,33750
8020ef60:	8020f5b4 	orhi	zero,r16,33750
8020ef64:	8020f24c 	andi	zero,r16,33737
8020ef68:	8020f3f8 	rdprs	zero,r16,-31793
8020ef6c:	8020f5b4 	orhi	zero,r16,33750
8020ef70:	8020f5b4 	orhi	zero,r16,33750
8020ef74:	8020f5b4 	orhi	zero,r16,33750
8020ef78:	8020f3ec 	andhi	zero,r16,33743
8020ef7c:	8020f3f8 	rdprs	zero,r16,-31793
8020ef80:	8020f5b4 	orhi	zero,r16,33750
8020ef84:	8020f5b4 	orhi	zero,r16,33750
8020ef88:	8020f3dc 	xori	zero,r16,33743
8020ef8c:	8020f5b4 	orhi	zero,r16,33750
8020ef90:	8020f3a0 	cmpeqi	zero,r16,-31794
8020ef94:	8020f1a8 	cmpgeui	zero,r16,33734
8020ef98:	8020eff4 	orhi	zero,r16,33727
8020ef9c:	8020f50c 	andi	zero,r16,33748
8020efa0:	8020f5b4 	orhi	zero,r16,33750
8020efa4:	8020f4c0 	call	88020f4c <__reset+0x2000f4c>
8020efa8:	8020f5b4 	orhi	zero,r16,33750
8020efac:	8020f118 	cmpnei	zero,r16,-31804
8020efb0:	8020f5b4 	orhi	zero,r16,33750
8020efb4:	8020f5b4 	orhi	zero,r16,33750
8020efb8:	8020f074 	orhi	zero,r16,33729
8020efbc:	dac02317 	ldw	r11,140(sp)
8020efc0:	5ac00017 	ldw	r11,0(r11)
8020efc4:	dac02415 	stw	r11,144(sp)
8020efc8:	dac02317 	ldw	r11,140(sp)
8020efcc:	58800104 	addi	r2,r11,4
8020efd0:	dac02417 	ldw	r11,144(sp)
8020efd4:	5802e90e 	bge	r11,zero,8020fb7c <___svfiprintf_internal_r+0xe84>
8020efd8:	dac02417 	ldw	r11,144(sp)
8020efdc:	d8802315 	stw	r2,140(sp)
8020efe0:	02d7c83a 	sub	r11,zero,r11
8020efe4:	dac02415 	stw	r11,144(sp)
8020efe8:	94800114 	ori	r18,r18,4
8020efec:	98c00007 	ldb	r3,0(r19)
8020eff0:	003f9006 	br	8020ee34 <__reset+0xfa1eee34>
8020eff4:	00800c04 	movi	r2,48
8020eff8:	dac02317 	ldw	r11,140(sp)
8020effc:	d8801d05 	stb	r2,116(sp)
8020f000:	00801e04 	movi	r2,120
8020f004:	d8801d45 	stb	r2,117(sp)
8020f008:	d8001d85 	stb	zero,118(sp)
8020f00c:	58c00104 	addi	r3,r11,4
8020f010:	5f000017 	ldw	fp,0(r11)
8020f014:	0013883a 	mov	r9,zero
8020f018:	90800094 	ori	r2,r18,2
8020f01c:	80032b16 	blt	r16,zero,8020fccc <___svfiprintf_internal_r+0xfd4>
8020f020:	00bfdfc4 	movi	r2,-129
8020f024:	90a4703a 	and	r18,r18,r2
8020f028:	d8c02315 	stw	r3,140(sp)
8020f02c:	94800094 	ori	r18,r18,2
8020f030:	e002dc26 	beq	fp,zero,8020fba4 <___svfiprintf_internal_r+0xeac>
8020f034:	012008b4 	movhi	r4,32802
8020f038:	212cc704 	addi	r4,r4,-19684
8020f03c:	0015883a 	mov	r10,zero
8020f040:	d9002915 	stw	r4,164(sp)
8020f044:	00002306 	br	8020f0d4 <___svfiprintf_internal_r+0x3dc>
8020f048:	94800054 	ori	r18,r18,1
8020f04c:	98c00007 	ldb	r3,0(r19)
8020f050:	003f7806 	br	8020ee34 <__reset+0xfa1eee34>
8020f054:	38803fcc 	andi	r2,r7,255
8020f058:	1080201c 	xori	r2,r2,128
8020f05c:	10bfe004 	addi	r2,r2,-128
8020f060:	1002f31e 	bne	r2,zero,8020fc30 <___svfiprintf_internal_r+0xf38>
8020f064:	01000044 	movi	r4,1
8020f068:	01c00804 	movi	r7,32
8020f06c:	98c00007 	ldb	r3,0(r19)
8020f070:	003f7006 	br	8020ee34 <__reset+0xfa1eee34>
8020f074:	21003fcc 	andi	r4,r4,255
8020f078:	2003aa1e 	bne	r4,zero,8020ff24 <___svfiprintf_internal_r+0x122c>
8020f07c:	00a008b4 	movhi	r2,32802
8020f080:	10acc704 	addi	r2,r2,-19684
8020f084:	d8802915 	stw	r2,164(sp)
8020f088:	9080080c 	andi	r2,r18,32
8020f08c:	1000ba26 	beq	r2,zero,8020f378 <___svfiprintf_internal_r+0x680>
8020f090:	dac02317 	ldw	r11,140(sp)
8020f094:	5f000017 	ldw	fp,0(r11)
8020f098:	5a400117 	ldw	r9,4(r11)
8020f09c:	5ac00204 	addi	r11,r11,8
8020f0a0:	dac02315 	stw	r11,140(sp)
8020f0a4:	9080004c 	andi	r2,r18,1
8020f0a8:	10029026 	beq	r2,zero,8020faec <___svfiprintf_internal_r+0xdf4>
8020f0ac:	e244b03a 	or	r2,fp,r9
8020f0b0:	1002d41e 	bne	r2,zero,8020fc04 <___svfiprintf_internal_r+0xf0c>
8020f0b4:	d8001d85 	stb	zero,118(sp)
8020f0b8:	80030b16 	blt	r16,zero,8020fce8 <___svfiprintf_internal_r+0xff0>
8020f0bc:	00bfdfc4 	movi	r2,-129
8020f0c0:	90a4703a 	and	r18,r18,r2
8020f0c4:	0015883a 	mov	r10,zero
8020f0c8:	80002426 	beq	r16,zero,8020f15c <___svfiprintf_internal_r+0x464>
8020f0cc:	0039883a 	mov	fp,zero
8020f0d0:	0013883a 	mov	r9,zero
8020f0d4:	d9002917 	ldw	r4,164(sp)
8020f0d8:	dc401a04 	addi	r17,sp,104
8020f0dc:	e08003cc 	andi	r2,fp,15
8020f0e0:	4806973a 	slli	r3,r9,28
8020f0e4:	2085883a 	add	r2,r4,r2
8020f0e8:	e038d13a 	srli	fp,fp,4
8020f0ec:	10800003 	ldbu	r2,0(r2)
8020f0f0:	4812d13a 	srli	r9,r9,4
8020f0f4:	8c7fffc4 	addi	r17,r17,-1
8020f0f8:	1f38b03a 	or	fp,r3,fp
8020f0fc:	88800005 	stb	r2,0(r17)
8020f100:	e244b03a 	or	r2,fp,r9
8020f104:	103ff51e 	bne	r2,zero,8020f0dc <__reset+0xfa1ef0dc>
8020f108:	dac01e17 	ldw	r11,120(sp)
8020f10c:	5c57c83a 	sub	r11,r11,r17
8020f110:	dac02115 	stw	r11,132(sp)
8020f114:	00001406 	br	8020f168 <___svfiprintf_internal_r+0x470>
8020f118:	21003fcc 	andi	r4,r4,255
8020f11c:	2003741e 	bne	r4,zero,8020fef0 <___svfiprintf_internal_r+0x11f8>
8020f120:	9080080c 	andi	r2,r18,32
8020f124:	10014526 	beq	r2,zero,8020f63c <___svfiprintf_internal_r+0x944>
8020f128:	dac02317 	ldw	r11,140(sp)
8020f12c:	d8001d85 	stb	zero,118(sp)
8020f130:	58c00204 	addi	r3,r11,8
8020f134:	5f000017 	ldw	fp,0(r11)
8020f138:	5a400117 	ldw	r9,4(r11)
8020f13c:	8002d916 	blt	r16,zero,8020fca4 <___svfiprintf_internal_r+0xfac>
8020f140:	013fdfc4 	movi	r4,-129
8020f144:	e244b03a 	or	r2,fp,r9
8020f148:	d8c02315 	stw	r3,140(sp)
8020f14c:	9124703a 	and	r18,r18,r4
8020f150:	0015883a 	mov	r10,zero
8020f154:	1000b91e 	bne	r2,zero,8020f43c <___svfiprintf_internal_r+0x744>
8020f158:	8002e61e 	bne	r16,zero,8020fcf4 <___svfiprintf_internal_r+0xffc>
8020f15c:	0021883a 	mov	r16,zero
8020f160:	d8002115 	stw	zero,132(sp)
8020f164:	dc401a04 	addi	r17,sp,104
8020f168:	d8c02117 	ldw	r3,132(sp)
8020f16c:	dc002015 	stw	r16,128(sp)
8020f170:	80c0010e 	bge	r16,r3,8020f178 <___svfiprintf_internal_r+0x480>
8020f174:	d8c02015 	stw	r3,128(sp)
8020f178:	52803fcc 	andi	r10,r10,255
8020f17c:	5280201c 	xori	r10,r10,128
8020f180:	52bfe004 	addi	r10,r10,-128
8020f184:	50003c26 	beq	r10,zero,8020f278 <___svfiprintf_internal_r+0x580>
8020f188:	dac02017 	ldw	r11,128(sp)
8020f18c:	5ac00044 	addi	r11,r11,1
8020f190:	dac02015 	stw	r11,128(sp)
8020f194:	00003806 	br	8020f278 <___svfiprintf_internal_r+0x580>
8020f198:	01000044 	movi	r4,1
8020f19c:	01c00ac4 	movi	r7,43
8020f1a0:	98c00007 	ldb	r3,0(r19)
8020f1a4:	003f2306 	br	8020ee34 <__reset+0xfa1eee34>
8020f1a8:	21003fcc 	andi	r4,r4,255
8020f1ac:	2003481e 	bne	r4,zero,8020fed0 <___svfiprintf_internal_r+0x11d8>
8020f1b0:	9080080c 	andi	r2,r18,32
8020f1b4:	10013b26 	beq	r2,zero,8020f6a4 <___svfiprintf_internal_r+0x9ac>
8020f1b8:	dac02317 	ldw	r11,140(sp)
8020f1bc:	d8001d85 	stb	zero,118(sp)
8020f1c0:	58800204 	addi	r2,r11,8
8020f1c4:	5f000017 	ldw	fp,0(r11)
8020f1c8:	5a400117 	ldw	r9,4(r11)
8020f1cc:	8002a816 	blt	r16,zero,8020fc70 <___svfiprintf_internal_r+0xf78>
8020f1d0:	013fdfc4 	movi	r4,-129
8020f1d4:	e246b03a 	or	r3,fp,r9
8020f1d8:	d8802315 	stw	r2,140(sp)
8020f1dc:	9124703a 	and	r18,r18,r4
8020f1e0:	18013c26 	beq	r3,zero,8020f6d4 <___svfiprintf_internal_r+0x9dc>
8020f1e4:	0015883a 	mov	r10,zero
8020f1e8:	dc401a04 	addi	r17,sp,104
8020f1ec:	e006d0fa 	srli	r3,fp,3
8020f1f0:	4808977a 	slli	r4,r9,29
8020f1f4:	4812d0fa 	srli	r9,r9,3
8020f1f8:	e70001cc 	andi	fp,fp,7
8020f1fc:	e0800c04 	addi	r2,fp,48
8020f200:	8c7fffc4 	addi	r17,r17,-1
8020f204:	20f8b03a 	or	fp,r4,r3
8020f208:	88800005 	stb	r2,0(r17)
8020f20c:	e246b03a 	or	r3,fp,r9
8020f210:	183ff61e 	bne	r3,zero,8020f1ec <__reset+0xfa1ef1ec>
8020f214:	90c0004c 	andi	r3,r18,1
8020f218:	1800a526 	beq	r3,zero,8020f4b0 <___svfiprintf_internal_r+0x7b8>
8020f21c:	10803fcc 	andi	r2,r2,255
8020f220:	1080201c 	xori	r2,r2,128
8020f224:	10bfe004 	addi	r2,r2,-128
8020f228:	00c00c04 	movi	r3,48
8020f22c:	10ffb626 	beq	r2,r3,8020f108 <__reset+0xfa1ef108>
8020f230:	88ffffc5 	stb	r3,-1(r17)
8020f234:	d8c01e17 	ldw	r3,120(sp)
8020f238:	88bfffc4 	addi	r2,r17,-1
8020f23c:	1023883a 	mov	r17,r2
8020f240:	1887c83a 	sub	r3,r3,r2
8020f244:	d8c02115 	stw	r3,132(sp)
8020f248:	003fc706 	br	8020f168 <__reset+0xfa1ef168>
8020f24c:	dac02317 	ldw	r11,140(sp)
8020f250:	00c00044 	movi	r3,1
8020f254:	d8c02015 	stw	r3,128(sp)
8020f258:	58800017 	ldw	r2,0(r11)
8020f25c:	5ac00104 	addi	r11,r11,4
8020f260:	d8001d85 	stb	zero,118(sp)
8020f264:	d8801005 	stb	r2,64(sp)
8020f268:	dac02315 	stw	r11,140(sp)
8020f26c:	d8c02115 	stw	r3,132(sp)
8020f270:	dc401004 	addi	r17,sp,64
8020f274:	0021883a 	mov	r16,zero
8020f278:	90c0008c 	andi	r3,r18,2
8020f27c:	d8c02215 	stw	r3,136(sp)
8020f280:	18000326 	beq	r3,zero,8020f290 <___svfiprintf_internal_r+0x598>
8020f284:	dac02017 	ldw	r11,128(sp)
8020f288:	5ac00084 	addi	r11,r11,2
8020f28c:	dac02015 	stw	r11,128(sp)
8020f290:	90c0210c 	andi	r3,r18,132
8020f294:	d8c02615 	stw	r3,152(sp)
8020f298:	1801131e 	bne	r3,zero,8020f6e8 <___svfiprintf_internal_r+0x9f0>
8020f29c:	dac02417 	ldw	r11,144(sp)
8020f2a0:	d8c02017 	ldw	r3,128(sp)
8020f2a4:	58f9c83a 	sub	fp,r11,r3
8020f2a8:	07010f0e 	bge	zero,fp,8020f6e8 <___svfiprintf_internal_r+0x9f0>
8020f2ac:	02400404 	movi	r9,16
8020f2b0:	d8c01c17 	ldw	r3,112(sp)
8020f2b4:	d8801b17 	ldw	r2,108(sp)
8020f2b8:	4f02d60e 	bge	r9,fp,8020fe14 <___svfiprintf_internal_r+0x111c>
8020f2bc:	016008b4 	movhi	r5,32802
8020f2c0:	296d3304 	addi	r5,r5,-19252
8020f2c4:	d9402815 	stw	r5,160(sp)
8020f2c8:	028001c4 	movi	r10,7
8020f2cc:	00000306 	br	8020f2dc <___svfiprintf_internal_r+0x5e4>
8020f2d0:	e73ffc04 	addi	fp,fp,-16
8020f2d4:	42000204 	addi	r8,r8,8
8020f2d8:	4f00150e 	bge	r9,fp,8020f330 <___svfiprintf_internal_r+0x638>
8020f2dc:	18c00404 	addi	r3,r3,16
8020f2e0:	10800044 	addi	r2,r2,1
8020f2e4:	45800015 	stw	r22,0(r8)
8020f2e8:	42400115 	stw	r9,4(r8)
8020f2ec:	d8c01c15 	stw	r3,112(sp)
8020f2f0:	d8801b15 	stw	r2,108(sp)
8020f2f4:	50bff60e 	bge	r10,r2,8020f2d0 <__reset+0xfa1ef2d0>
8020f2f8:	d9801a04 	addi	r6,sp,104
8020f2fc:	b80b883a 	mov	r5,r23
8020f300:	a809883a 	mov	r4,r21
8020f304:	da402c15 	stw	r9,176(sp)
8020f308:	da802d15 	stw	r10,180(sp)
8020f30c:	020eb280 	call	8020eb28 <__ssprint_r>
8020f310:	da402c17 	ldw	r9,176(sp)
8020f314:	da802d17 	ldw	r10,180(sp)
8020f318:	1001851e 	bne	r2,zero,8020f930 <___svfiprintf_internal_r+0xc38>
8020f31c:	e73ffc04 	addi	fp,fp,-16
8020f320:	d8c01c17 	ldw	r3,112(sp)
8020f324:	d8801b17 	ldw	r2,108(sp)
8020f328:	d811883a 	mov	r8,sp
8020f32c:	4f3feb16 	blt	r9,fp,8020f2dc <__reset+0xfa1ef2dc>
8020f330:	dac02817 	ldw	r11,160(sp)
8020f334:	e0c7883a 	add	r3,fp,r3
8020f338:	10800044 	addi	r2,r2,1
8020f33c:	42c00015 	stw	r11,0(r8)
8020f340:	47000115 	stw	fp,4(r8)
8020f344:	d8c01c15 	stw	r3,112(sp)
8020f348:	d8801b15 	stw	r2,108(sp)
8020f34c:	010001c4 	movi	r4,7
8020f350:	2081ee16 	blt	r4,r2,8020fb0c <___svfiprintf_internal_r+0xe14>
8020f354:	42000204 	addi	r8,r8,8
8020f358:	0000e506 	br	8020f6f0 <___svfiprintf_internal_r+0x9f8>
8020f35c:	21003fcc 	andi	r4,r4,255
8020f360:	2002dd1e 	bne	r4,zero,8020fed8 <___svfiprintf_internal_r+0x11e0>
8020f364:	00a008b4 	movhi	r2,32802
8020f368:	10acc204 	addi	r2,r2,-19704
8020f36c:	d8802915 	stw	r2,164(sp)
8020f370:	9080080c 	andi	r2,r18,32
8020f374:	103f461e 	bne	r2,zero,8020f090 <__reset+0xfa1ef090>
8020f378:	9080040c 	andi	r2,r18,16
8020f37c:	10022e1e 	bne	r2,zero,8020fc38 <___svfiprintf_internal_r+0xf40>
8020f380:	9080100c 	andi	r2,r18,64
8020f384:	dac02317 	ldw	r11,140(sp)
8020f388:	10027326 	beq	r2,zero,8020fd58 <___svfiprintf_internal_r+0x1060>
8020f38c:	5f00000b 	ldhu	fp,0(r11)
8020f390:	5ac00104 	addi	r11,r11,4
8020f394:	0013883a 	mov	r9,zero
8020f398:	dac02315 	stw	r11,140(sp)
8020f39c:	003f4106 	br	8020f0a4 <__reset+0xfa1ef0a4>
8020f3a0:	21003fcc 	andi	r4,r4,255
8020f3a4:	2002e11e 	bne	r4,zero,8020ff2c <___svfiprintf_internal_r+0x1234>
8020f3a8:	9080080c 	andi	r2,r18,32
8020f3ac:	1002011e 	bne	r2,zero,8020fbb4 <___svfiprintf_internal_r+0xebc>
8020f3b0:	9080040c 	andi	r2,r18,16
8020f3b4:	10023e1e 	bne	r2,zero,8020fcb0 <___svfiprintf_internal_r+0xfb8>
8020f3b8:	9480100c 	andi	r18,r18,64
8020f3bc:	90023c26 	beq	r18,zero,8020fcb0 <___svfiprintf_internal_r+0xfb8>
8020f3c0:	dac02317 	ldw	r11,140(sp)
8020f3c4:	58800017 	ldw	r2,0(r11)
8020f3c8:	5ac00104 	addi	r11,r11,4
8020f3cc:	dac02315 	stw	r11,140(sp)
8020f3d0:	dac02517 	ldw	r11,148(sp)
8020f3d4:	12c0000d 	sth	r11,0(r2)
8020f3d8:	003e6e06 	br	8020ed94 <__reset+0xfa1eed94>
8020f3dc:	98c00007 	ldb	r3,0(r19)
8020f3e0:	1a422926 	beq	r3,r9,8020fc88 <___svfiprintf_internal_r+0xf90>
8020f3e4:	94800414 	ori	r18,r18,16
8020f3e8:	003e9206 	br	8020ee34 <__reset+0xfa1eee34>
8020f3ec:	94801014 	ori	r18,r18,64
8020f3f0:	98c00007 	ldb	r3,0(r19)
8020f3f4:	003e8f06 	br	8020ee34 <__reset+0xfa1eee34>
8020f3f8:	21003fcc 	andi	r4,r4,255
8020f3fc:	2002c71e 	bne	r4,zero,8020ff1c <___svfiprintf_internal_r+0x1224>
8020f400:	9080080c 	andi	r2,r18,32
8020f404:	10004926 	beq	r2,zero,8020f52c <___svfiprintf_internal_r+0x834>
8020f408:	dac02317 	ldw	r11,140(sp)
8020f40c:	58800117 	ldw	r2,4(r11)
8020f410:	5f000017 	ldw	fp,0(r11)
8020f414:	5ac00204 	addi	r11,r11,8
8020f418:	dac02315 	stw	r11,140(sp)
8020f41c:	1013883a 	mov	r9,r2
8020f420:	10004b16 	blt	r2,zero,8020f550 <___svfiprintf_internal_r+0x858>
8020f424:	da801d83 	ldbu	r10,118(sp)
8020f428:	8001cb16 	blt	r16,zero,8020fb58 <___svfiprintf_internal_r+0xe60>
8020f42c:	00ffdfc4 	movi	r3,-129
8020f430:	e244b03a 	or	r2,fp,r9
8020f434:	90e4703a 	and	r18,r18,r3
8020f438:	103f4726 	beq	r2,zero,8020f158 <__reset+0xfa1ef158>
8020f43c:	48008c26 	beq	r9,zero,8020f670 <___svfiprintf_internal_r+0x978>
8020f440:	dc802015 	stw	r18,128(sp)
8020f444:	dc002115 	stw	r16,132(sp)
8020f448:	dc401a04 	addi	r17,sp,104
8020f44c:	e021883a 	mov	r16,fp
8020f450:	da002215 	stw	r8,136(sp)
8020f454:	5039883a 	mov	fp,r10
8020f458:	4825883a 	mov	r18,r9
8020f45c:	8009883a 	mov	r4,r16
8020f460:	900b883a 	mov	r5,r18
8020f464:	01800284 	movi	r6,10
8020f468:	000f883a 	mov	r7,zero
8020f46c:	02124280 	call	80212428 <__umoddi3>
8020f470:	10800c04 	addi	r2,r2,48
8020f474:	8c7fffc4 	addi	r17,r17,-1
8020f478:	8009883a 	mov	r4,r16
8020f47c:	900b883a 	mov	r5,r18
8020f480:	88800005 	stb	r2,0(r17)
8020f484:	01800284 	movi	r6,10
8020f488:	000f883a 	mov	r7,zero
8020f48c:	0211eb00 	call	80211eb0 <__udivdi3>
8020f490:	1021883a 	mov	r16,r2
8020f494:	10c4b03a 	or	r2,r2,r3
8020f498:	1825883a 	mov	r18,r3
8020f49c:	103fef1e 	bne	r2,zero,8020f45c <__reset+0xfa1ef45c>
8020f4a0:	dc802017 	ldw	r18,128(sp)
8020f4a4:	dc002117 	ldw	r16,132(sp)
8020f4a8:	da002217 	ldw	r8,136(sp)
8020f4ac:	e015883a 	mov	r10,fp
8020f4b0:	d8c01e17 	ldw	r3,120(sp)
8020f4b4:	1c47c83a 	sub	r3,r3,r17
8020f4b8:	d8c02115 	stw	r3,132(sp)
8020f4bc:	003f2a06 	br	8020f168 <__reset+0xfa1ef168>
8020f4c0:	dac02317 	ldw	r11,140(sp)
8020f4c4:	d8001d85 	stb	zero,118(sp)
8020f4c8:	5c400017 	ldw	r17,0(r11)
8020f4cc:	5f000104 	addi	fp,r11,4
8020f4d0:	88022f26 	beq	r17,zero,8020fd90 <___svfiprintf_internal_r+0x1098>
8020f4d4:	80022516 	blt	r16,zero,8020fd6c <___svfiprintf_internal_r+0x1074>
8020f4d8:	800d883a 	mov	r6,r16
8020f4dc:	000b883a 	mov	r5,zero
8020f4e0:	8809883a 	mov	r4,r17
8020f4e4:	da002c15 	stw	r8,176(sp)
8020f4e8:	020cf800 	call	8020cf80 <memchr>
8020f4ec:	da002c17 	ldw	r8,176(sp)
8020f4f0:	10026426 	beq	r2,zero,8020fe84 <___svfiprintf_internal_r+0x118c>
8020f4f4:	1445c83a 	sub	r2,r2,r17
8020f4f8:	d8802115 	stw	r2,132(sp)
8020f4fc:	da801d83 	ldbu	r10,118(sp)
8020f500:	df002315 	stw	fp,140(sp)
8020f504:	0021883a 	mov	r16,zero
8020f508:	003f1706 	br	8020f168 <__reset+0xfa1ef168>
8020f50c:	94800814 	ori	r18,r18,32
8020f510:	98c00007 	ldb	r3,0(r19)
8020f514:	003e4706 	br	8020ee34 <__reset+0xfa1eee34>
8020f518:	21003fcc 	andi	r4,r4,255
8020f51c:	2002701e 	bne	r4,zero,8020fee0 <___svfiprintf_internal_r+0x11e8>
8020f520:	94800414 	ori	r18,r18,16
8020f524:	9080080c 	andi	r2,r18,32
8020f528:	103fb71e 	bne	r2,zero,8020f408 <__reset+0xfa1ef408>
8020f52c:	9080040c 	andi	r2,r18,16
8020f530:	1001ab26 	beq	r2,zero,8020fbe0 <___svfiprintf_internal_r+0xee8>
8020f534:	dac02317 	ldw	r11,140(sp)
8020f538:	5f000017 	ldw	fp,0(r11)
8020f53c:	5ac00104 	addi	r11,r11,4
8020f540:	dac02315 	stw	r11,140(sp)
8020f544:	e013d7fa 	srai	r9,fp,31
8020f548:	4805883a 	mov	r2,r9
8020f54c:	103fb50e 	bge	r2,zero,8020f424 <__reset+0xfa1ef424>
8020f550:	0739c83a 	sub	fp,zero,fp
8020f554:	02800b44 	movi	r10,45
8020f558:	e004c03a 	cmpne	r2,fp,zero
8020f55c:	0253c83a 	sub	r9,zero,r9
8020f560:	da801d85 	stb	r10,118(sp)
8020f564:	4893c83a 	sub	r9,r9,r2
8020f568:	80023016 	blt	r16,zero,8020fe2c <___svfiprintf_internal_r+0x1134>
8020f56c:	00bfdfc4 	movi	r2,-129
8020f570:	90a4703a 	and	r18,r18,r2
8020f574:	483fb21e 	bne	r9,zero,8020f440 <__reset+0xfa1ef440>
8020f578:	00003d06 	br	8020f670 <___svfiprintf_internal_r+0x978>
8020f57c:	9817883a 	mov	r11,r19
8020f580:	d8002415 	stw	zero,144(sp)
8020f584:	18bff404 	addi	r2,r3,-48
8020f588:	0019883a 	mov	r12,zero
8020f58c:	58c00007 	ldb	r3,0(r11)
8020f590:	630002a4 	muli	r12,r12,10
8020f594:	9cc00044 	addi	r19,r19,1
8020f598:	9817883a 	mov	r11,r19
8020f59c:	1319883a 	add	r12,r2,r12
8020f5a0:	18bff404 	addi	r2,r3,-48
8020f5a4:	30bff92e 	bgeu	r6,r2,8020f58c <__reset+0xfa1ef58c>
8020f5a8:	db002415 	stw	r12,144(sp)
8020f5ac:	18bff804 	addi	r2,r3,-32
8020f5b0:	28be232e 	bgeu	r5,r2,8020ee40 <__reset+0xfa1eee40>
8020f5b4:	21003fcc 	andi	r4,r4,255
8020f5b8:	20024b1e 	bne	r4,zero,8020fee8 <___svfiprintf_internal_r+0x11f0>
8020f5bc:	1800d626 	beq	r3,zero,8020f918 <___svfiprintf_internal_r+0xc20>
8020f5c0:	02c00044 	movi	r11,1
8020f5c4:	dac02015 	stw	r11,128(sp)
8020f5c8:	d8c01005 	stb	r3,64(sp)
8020f5cc:	d8001d85 	stb	zero,118(sp)
8020f5d0:	dac02115 	stw	r11,132(sp)
8020f5d4:	dc401004 	addi	r17,sp,64
8020f5d8:	003f2606 	br	8020f274 <__reset+0xfa1ef274>
8020f5dc:	94802014 	ori	r18,r18,128
8020f5e0:	98c00007 	ldb	r3,0(r19)
8020f5e4:	003e1306 	br	8020ee34 <__reset+0xfa1eee34>
8020f5e8:	98c00007 	ldb	r3,0(r19)
8020f5ec:	9ac00044 	addi	r11,r19,1
8020f5f0:	1a822b26 	beq	r3,r10,8020fea0 <___svfiprintf_internal_r+0x11a8>
8020f5f4:	18bff404 	addi	r2,r3,-48
8020f5f8:	0021883a 	mov	r16,zero
8020f5fc:	30821e36 	bltu	r6,r2,8020fe78 <___svfiprintf_internal_r+0x1180>
8020f600:	58c00007 	ldb	r3,0(r11)
8020f604:	840002a4 	muli	r16,r16,10
8020f608:	5cc00044 	addi	r19,r11,1
8020f60c:	9817883a 	mov	r11,r19
8020f610:	80a1883a 	add	r16,r16,r2
8020f614:	18bff404 	addi	r2,r3,-48
8020f618:	30bff92e 	bgeu	r6,r2,8020f600 <__reset+0xfa1ef600>
8020f61c:	803e060e 	bge	r16,zero,8020ee38 <__reset+0xfa1eee38>
8020f620:	043fffc4 	movi	r16,-1
8020f624:	003e0406 	br	8020ee38 <__reset+0xfa1eee38>
8020f628:	21003fcc 	andi	r4,r4,255
8020f62c:	2002371e 	bne	r4,zero,8020ff0c <___svfiprintf_internal_r+0x1214>
8020f630:	94800414 	ori	r18,r18,16
8020f634:	9080080c 	andi	r2,r18,32
8020f638:	103ebb1e 	bne	r2,zero,8020f128 <__reset+0xfa1ef128>
8020f63c:	9080040c 	andi	r2,r18,16
8020f640:	10013b26 	beq	r2,zero,8020fb30 <___svfiprintf_internal_r+0xe38>
8020f644:	dac02317 	ldw	r11,140(sp)
8020f648:	d8001d85 	stb	zero,118(sp)
8020f64c:	0013883a 	mov	r9,zero
8020f650:	58800104 	addi	r2,r11,4
8020f654:	5f000017 	ldw	fp,0(r11)
8020f658:	80013d16 	blt	r16,zero,8020fb50 <___svfiprintf_internal_r+0xe58>
8020f65c:	00ffdfc4 	movi	r3,-129
8020f660:	d8802315 	stw	r2,140(sp)
8020f664:	90e4703a 	and	r18,r18,r3
8020f668:	0015883a 	mov	r10,zero
8020f66c:	e03eba26 	beq	fp,zero,8020f158 <__reset+0xfa1ef158>
8020f670:	00800244 	movi	r2,9
8020f674:	173f7236 	bltu	r2,fp,8020f440 <__reset+0xfa1ef440>
8020f678:	dac02b17 	ldw	r11,172(sp)
8020f67c:	e7000c04 	addi	fp,fp,48
8020f680:	df0019c5 	stb	fp,103(sp)
8020f684:	dac02115 	stw	r11,132(sp)
8020f688:	dc4019c4 	addi	r17,sp,103
8020f68c:	003eb606 	br	8020f168 <__reset+0xfa1ef168>
8020f690:	21003fcc 	andi	r4,r4,255
8020f694:	20021f1e 	bne	r4,zero,8020ff14 <___svfiprintf_internal_r+0x121c>
8020f698:	94800414 	ori	r18,r18,16
8020f69c:	9080080c 	andi	r2,r18,32
8020f6a0:	103ec51e 	bne	r2,zero,8020f1b8 <__reset+0xfa1ef1b8>
8020f6a4:	9080040c 	andi	r2,r18,16
8020f6a8:	10016926 	beq	r2,zero,8020fc50 <___svfiprintf_internal_r+0xf58>
8020f6ac:	dac02317 	ldw	r11,140(sp)
8020f6b0:	d8001d85 	stb	zero,118(sp)
8020f6b4:	0013883a 	mov	r9,zero
8020f6b8:	58800104 	addi	r2,r11,4
8020f6bc:	5f000017 	ldw	fp,0(r11)
8020f6c0:	80016b16 	blt	r16,zero,8020fc70 <___svfiprintf_internal_r+0xf78>
8020f6c4:	00ffdfc4 	movi	r3,-129
8020f6c8:	d8802315 	stw	r2,140(sp)
8020f6cc:	90e4703a 	and	r18,r18,r3
8020f6d0:	e03ec41e 	bne	fp,zero,8020f1e4 <__reset+0xfa1ef1e4>
8020f6d4:	0015883a 	mov	r10,zero
8020f6d8:	8001c226 	beq	r16,zero,8020fde4 <___svfiprintf_internal_r+0x10ec>
8020f6dc:	0039883a 	mov	fp,zero
8020f6e0:	0013883a 	mov	r9,zero
8020f6e4:	003ec006 	br	8020f1e8 <__reset+0xfa1ef1e8>
8020f6e8:	d8c01c17 	ldw	r3,112(sp)
8020f6ec:	d8801b17 	ldw	r2,108(sp)
8020f6f0:	d9001d87 	ldb	r4,118(sp)
8020f6f4:	20000b26 	beq	r4,zero,8020f724 <___svfiprintf_internal_r+0xa2c>
8020f6f8:	d9001d84 	addi	r4,sp,118
8020f6fc:	18c00044 	addi	r3,r3,1
8020f700:	10800044 	addi	r2,r2,1
8020f704:	41000015 	stw	r4,0(r8)
8020f708:	01000044 	movi	r4,1
8020f70c:	41000115 	stw	r4,4(r8)
8020f710:	d8c01c15 	stw	r3,112(sp)
8020f714:	d8801b15 	stw	r2,108(sp)
8020f718:	010001c4 	movi	r4,7
8020f71c:	2080e116 	blt	r4,r2,8020faa4 <___svfiprintf_internal_r+0xdac>
8020f720:	42000204 	addi	r8,r8,8
8020f724:	dac02217 	ldw	r11,136(sp)
8020f728:	58000b26 	beq	r11,zero,8020f758 <___svfiprintf_internal_r+0xa60>
8020f72c:	d9001d04 	addi	r4,sp,116
8020f730:	18c00084 	addi	r3,r3,2
8020f734:	10800044 	addi	r2,r2,1
8020f738:	41000015 	stw	r4,0(r8)
8020f73c:	01000084 	movi	r4,2
8020f740:	41000115 	stw	r4,4(r8)
8020f744:	d8c01c15 	stw	r3,112(sp)
8020f748:	d8801b15 	stw	r2,108(sp)
8020f74c:	010001c4 	movi	r4,7
8020f750:	2080dd16 	blt	r4,r2,8020fac8 <___svfiprintf_internal_r+0xdd0>
8020f754:	42000204 	addi	r8,r8,8
8020f758:	dac02617 	ldw	r11,152(sp)
8020f75c:	01002004 	movi	r4,128
8020f760:	59008426 	beq	r11,r4,8020f974 <___svfiprintf_internal_r+0xc7c>
8020f764:	dac02117 	ldw	r11,132(sp)
8020f768:	82e1c83a 	sub	r16,r16,r11
8020f76c:	0400270e 	bge	zero,r16,8020f80c <___svfiprintf_internal_r+0xb14>
8020f770:	01c00404 	movi	r7,16
8020f774:	3c016a0e 	bge	r7,r16,8020fd20 <___svfiprintf_internal_r+0x1028>
8020f778:	016008b4 	movhi	r5,32802
8020f77c:	296d2f04 	addi	r5,r5,-19268
8020f780:	d9402215 	stw	r5,136(sp)
8020f784:	070001c4 	movi	fp,7
8020f788:	00000306 	br	8020f798 <___svfiprintf_internal_r+0xaa0>
8020f78c:	843ffc04 	addi	r16,r16,-16
8020f790:	42000204 	addi	r8,r8,8
8020f794:	3c00130e 	bge	r7,r16,8020f7e4 <___svfiprintf_internal_r+0xaec>
8020f798:	18c00404 	addi	r3,r3,16
8020f79c:	10800044 	addi	r2,r2,1
8020f7a0:	45000015 	stw	r20,0(r8)
8020f7a4:	41c00115 	stw	r7,4(r8)
8020f7a8:	d8c01c15 	stw	r3,112(sp)
8020f7ac:	d8801b15 	stw	r2,108(sp)
8020f7b0:	e0bff60e 	bge	fp,r2,8020f78c <__reset+0xfa1ef78c>
8020f7b4:	d9801a04 	addi	r6,sp,104
8020f7b8:	b80b883a 	mov	r5,r23
8020f7bc:	a809883a 	mov	r4,r21
8020f7c0:	d9c02c15 	stw	r7,176(sp)
8020f7c4:	020eb280 	call	8020eb28 <__ssprint_r>
8020f7c8:	d9c02c17 	ldw	r7,176(sp)
8020f7cc:	1000581e 	bne	r2,zero,8020f930 <___svfiprintf_internal_r+0xc38>
8020f7d0:	843ffc04 	addi	r16,r16,-16
8020f7d4:	d8c01c17 	ldw	r3,112(sp)
8020f7d8:	d8801b17 	ldw	r2,108(sp)
8020f7dc:	d811883a 	mov	r8,sp
8020f7e0:	3c3fed16 	blt	r7,r16,8020f798 <__reset+0xfa1ef798>
8020f7e4:	dac02217 	ldw	r11,136(sp)
8020f7e8:	1c07883a 	add	r3,r3,r16
8020f7ec:	10800044 	addi	r2,r2,1
8020f7f0:	42c00015 	stw	r11,0(r8)
8020f7f4:	44000115 	stw	r16,4(r8)
8020f7f8:	d8c01c15 	stw	r3,112(sp)
8020f7fc:	d8801b15 	stw	r2,108(sp)
8020f800:	010001c4 	movi	r4,7
8020f804:	20809e16 	blt	r4,r2,8020fa80 <___svfiprintf_internal_r+0xd88>
8020f808:	42000204 	addi	r8,r8,8
8020f80c:	dac02117 	ldw	r11,132(sp)
8020f810:	10800044 	addi	r2,r2,1
8020f814:	44400015 	stw	r17,0(r8)
8020f818:	58c7883a 	add	r3,r11,r3
8020f81c:	42c00115 	stw	r11,4(r8)
8020f820:	d8c01c15 	stw	r3,112(sp)
8020f824:	d8801b15 	stw	r2,108(sp)
8020f828:	010001c4 	movi	r4,7
8020f82c:	20807f16 	blt	r4,r2,8020fa2c <___svfiprintf_internal_r+0xd34>
8020f830:	42000204 	addi	r8,r8,8
8020f834:	9480010c 	andi	r18,r18,4
8020f838:	90002926 	beq	r18,zero,8020f8e0 <___svfiprintf_internal_r+0xbe8>
8020f83c:	dac02417 	ldw	r11,144(sp)
8020f840:	d8802017 	ldw	r2,128(sp)
8020f844:	58a1c83a 	sub	r16,r11,r2
8020f848:	0400250e 	bge	zero,r16,8020f8e0 <___svfiprintf_internal_r+0xbe8>
8020f84c:	04400404 	movi	r17,16
8020f850:	d8801b17 	ldw	r2,108(sp)
8020f854:	8c017c0e 	bge	r17,r16,8020fe48 <___svfiprintf_internal_r+0x1150>
8020f858:	016008b4 	movhi	r5,32802
8020f85c:	296d3304 	addi	r5,r5,-19252
8020f860:	d9402815 	stw	r5,160(sp)
8020f864:	048001c4 	movi	r18,7
8020f868:	00000306 	br	8020f878 <___svfiprintf_internal_r+0xb80>
8020f86c:	843ffc04 	addi	r16,r16,-16
8020f870:	42000204 	addi	r8,r8,8
8020f874:	8c00110e 	bge	r17,r16,8020f8bc <___svfiprintf_internal_r+0xbc4>
8020f878:	18c00404 	addi	r3,r3,16
8020f87c:	10800044 	addi	r2,r2,1
8020f880:	45800015 	stw	r22,0(r8)
8020f884:	44400115 	stw	r17,4(r8)
8020f888:	d8c01c15 	stw	r3,112(sp)
8020f88c:	d8801b15 	stw	r2,108(sp)
8020f890:	90bff60e 	bge	r18,r2,8020f86c <__reset+0xfa1ef86c>
8020f894:	d9801a04 	addi	r6,sp,104
8020f898:	b80b883a 	mov	r5,r23
8020f89c:	a809883a 	mov	r4,r21
8020f8a0:	020eb280 	call	8020eb28 <__ssprint_r>
8020f8a4:	1000221e 	bne	r2,zero,8020f930 <___svfiprintf_internal_r+0xc38>
8020f8a8:	843ffc04 	addi	r16,r16,-16
8020f8ac:	d8c01c17 	ldw	r3,112(sp)
8020f8b0:	d8801b17 	ldw	r2,108(sp)
8020f8b4:	d811883a 	mov	r8,sp
8020f8b8:	8c3fef16 	blt	r17,r16,8020f878 <__reset+0xfa1ef878>
8020f8bc:	dac02817 	ldw	r11,160(sp)
8020f8c0:	1c07883a 	add	r3,r3,r16
8020f8c4:	10800044 	addi	r2,r2,1
8020f8c8:	42c00015 	stw	r11,0(r8)
8020f8cc:	44000115 	stw	r16,4(r8)
8020f8d0:	d8c01c15 	stw	r3,112(sp)
8020f8d4:	d8801b15 	stw	r2,108(sp)
8020f8d8:	010001c4 	movi	r4,7
8020f8dc:	2080aa16 	blt	r4,r2,8020fb88 <___svfiprintf_internal_r+0xe90>
8020f8e0:	d8802417 	ldw	r2,144(sp)
8020f8e4:	dac02017 	ldw	r11,128(sp)
8020f8e8:	12c0010e 	bge	r2,r11,8020f8f0 <___svfiprintf_internal_r+0xbf8>
8020f8ec:	5805883a 	mov	r2,r11
8020f8f0:	dac02517 	ldw	r11,148(sp)
8020f8f4:	5897883a 	add	r11,r11,r2
8020f8f8:	dac02515 	stw	r11,148(sp)
8020f8fc:	1800531e 	bne	r3,zero,8020fa4c <___svfiprintf_internal_r+0xd54>
8020f900:	98800007 	ldb	r2,0(r19)
8020f904:	d8001b15 	stw	zero,108(sp)
8020f908:	d811883a 	mov	r8,sp
8020f90c:	103d231e 	bne	r2,zero,8020ed9c <__reset+0xfa1eed9c>
8020f910:	9823883a 	mov	r17,r19
8020f914:	003d3906 	br	8020edfc <__reset+0xfa1eedfc>
8020f918:	d8801c17 	ldw	r2,112(sp)
8020f91c:	10000426 	beq	r2,zero,8020f930 <___svfiprintf_internal_r+0xc38>
8020f920:	d9402717 	ldw	r5,156(sp)
8020f924:	d9002a17 	ldw	r4,168(sp)
8020f928:	d9801a04 	addi	r6,sp,104
8020f92c:	020eb280 	call	8020eb28 <__ssprint_r>
8020f930:	dac02717 	ldw	r11,156(sp)
8020f934:	d8802517 	ldw	r2,148(sp)
8020f938:	58c0030b 	ldhu	r3,12(r11)
8020f93c:	18c0100c 	andi	r3,r3,64
8020f940:	1801381e 	bne	r3,zero,8020fe24 <___svfiprintf_internal_r+0x112c>
8020f944:	dfc03717 	ldw	ra,220(sp)
8020f948:	df003617 	ldw	fp,216(sp)
8020f94c:	ddc03517 	ldw	r23,212(sp)
8020f950:	dd803417 	ldw	r22,208(sp)
8020f954:	dd403317 	ldw	r21,204(sp)
8020f958:	dd003217 	ldw	r20,200(sp)
8020f95c:	dcc03117 	ldw	r19,196(sp)
8020f960:	dc803017 	ldw	r18,192(sp)
8020f964:	dc402f17 	ldw	r17,188(sp)
8020f968:	dc002e17 	ldw	r16,184(sp)
8020f96c:	dec03804 	addi	sp,sp,224
8020f970:	f800283a 	ret
8020f974:	dac02417 	ldw	r11,144(sp)
8020f978:	d9002017 	ldw	r4,128(sp)
8020f97c:	5939c83a 	sub	fp,r11,r4
8020f980:	073f780e 	bge	zero,fp,8020f764 <__reset+0xfa1ef764>
8020f984:	02400404 	movi	r9,16
8020f988:	4f01370e 	bge	r9,fp,8020fe68 <___svfiprintf_internal_r+0x1170>
8020f98c:	02e008b4 	movhi	r11,32802
8020f990:	5aed2f04 	addi	r11,r11,-19268
8020f994:	dac02215 	stw	r11,136(sp)
8020f998:	028001c4 	movi	r10,7
8020f99c:	00000306 	br	8020f9ac <___svfiprintf_internal_r+0xcb4>
8020f9a0:	e73ffc04 	addi	fp,fp,-16
8020f9a4:	42000204 	addi	r8,r8,8
8020f9a8:	4f00150e 	bge	r9,fp,8020fa00 <___svfiprintf_internal_r+0xd08>
8020f9ac:	18c00404 	addi	r3,r3,16
8020f9b0:	10800044 	addi	r2,r2,1
8020f9b4:	45000015 	stw	r20,0(r8)
8020f9b8:	42400115 	stw	r9,4(r8)
8020f9bc:	d8c01c15 	stw	r3,112(sp)
8020f9c0:	d8801b15 	stw	r2,108(sp)
8020f9c4:	50bff60e 	bge	r10,r2,8020f9a0 <__reset+0xfa1ef9a0>
8020f9c8:	d9801a04 	addi	r6,sp,104
8020f9cc:	b80b883a 	mov	r5,r23
8020f9d0:	a809883a 	mov	r4,r21
8020f9d4:	da402c15 	stw	r9,176(sp)
8020f9d8:	da802d15 	stw	r10,180(sp)
8020f9dc:	020eb280 	call	8020eb28 <__ssprint_r>
8020f9e0:	da402c17 	ldw	r9,176(sp)
8020f9e4:	da802d17 	ldw	r10,180(sp)
8020f9e8:	103fd11e 	bne	r2,zero,8020f930 <__reset+0xfa1ef930>
8020f9ec:	e73ffc04 	addi	fp,fp,-16
8020f9f0:	d8c01c17 	ldw	r3,112(sp)
8020f9f4:	d8801b17 	ldw	r2,108(sp)
8020f9f8:	d811883a 	mov	r8,sp
8020f9fc:	4f3feb16 	blt	r9,fp,8020f9ac <__reset+0xfa1ef9ac>
8020fa00:	dac02217 	ldw	r11,136(sp)
8020fa04:	1f07883a 	add	r3,r3,fp
8020fa08:	10800044 	addi	r2,r2,1
8020fa0c:	42c00015 	stw	r11,0(r8)
8020fa10:	47000115 	stw	fp,4(r8)
8020fa14:	d8c01c15 	stw	r3,112(sp)
8020fa18:	d8801b15 	stw	r2,108(sp)
8020fa1c:	010001c4 	movi	r4,7
8020fa20:	2080b616 	blt	r4,r2,8020fcfc <___svfiprintf_internal_r+0x1004>
8020fa24:	42000204 	addi	r8,r8,8
8020fa28:	003f4e06 	br	8020f764 <__reset+0xfa1ef764>
8020fa2c:	d9801a04 	addi	r6,sp,104
8020fa30:	b80b883a 	mov	r5,r23
8020fa34:	a809883a 	mov	r4,r21
8020fa38:	020eb280 	call	8020eb28 <__ssprint_r>
8020fa3c:	103fbc1e 	bne	r2,zero,8020f930 <__reset+0xfa1ef930>
8020fa40:	d8c01c17 	ldw	r3,112(sp)
8020fa44:	d811883a 	mov	r8,sp
8020fa48:	003f7a06 	br	8020f834 <__reset+0xfa1ef834>
8020fa4c:	d9801a04 	addi	r6,sp,104
8020fa50:	b80b883a 	mov	r5,r23
8020fa54:	a809883a 	mov	r4,r21
8020fa58:	020eb280 	call	8020eb28 <__ssprint_r>
8020fa5c:	103fa826 	beq	r2,zero,8020f900 <__reset+0xfa1ef900>
8020fa60:	003fb306 	br	8020f930 <__reset+0xfa1ef930>
8020fa64:	d9801a04 	addi	r6,sp,104
8020fa68:	b80b883a 	mov	r5,r23
8020fa6c:	a809883a 	mov	r4,r21
8020fa70:	020eb280 	call	8020eb28 <__ssprint_r>
8020fa74:	103fae1e 	bne	r2,zero,8020f930 <__reset+0xfa1ef930>
8020fa78:	d811883a 	mov	r8,sp
8020fa7c:	003cdc06 	br	8020edf0 <__reset+0xfa1eedf0>
8020fa80:	d9801a04 	addi	r6,sp,104
8020fa84:	b80b883a 	mov	r5,r23
8020fa88:	a809883a 	mov	r4,r21
8020fa8c:	020eb280 	call	8020eb28 <__ssprint_r>
8020fa90:	103fa71e 	bne	r2,zero,8020f930 <__reset+0xfa1ef930>
8020fa94:	d8c01c17 	ldw	r3,112(sp)
8020fa98:	d8801b17 	ldw	r2,108(sp)
8020fa9c:	d811883a 	mov	r8,sp
8020faa0:	003f5a06 	br	8020f80c <__reset+0xfa1ef80c>
8020faa4:	d9801a04 	addi	r6,sp,104
8020faa8:	b80b883a 	mov	r5,r23
8020faac:	a809883a 	mov	r4,r21
8020fab0:	020eb280 	call	8020eb28 <__ssprint_r>
8020fab4:	103f9e1e 	bne	r2,zero,8020f930 <__reset+0xfa1ef930>
8020fab8:	d8c01c17 	ldw	r3,112(sp)
8020fabc:	d8801b17 	ldw	r2,108(sp)
8020fac0:	d811883a 	mov	r8,sp
8020fac4:	003f1706 	br	8020f724 <__reset+0xfa1ef724>
8020fac8:	d9801a04 	addi	r6,sp,104
8020facc:	b80b883a 	mov	r5,r23
8020fad0:	a809883a 	mov	r4,r21
8020fad4:	020eb280 	call	8020eb28 <__ssprint_r>
8020fad8:	103f951e 	bne	r2,zero,8020f930 <__reset+0xfa1ef930>
8020fadc:	d8c01c17 	ldw	r3,112(sp)
8020fae0:	d8801b17 	ldw	r2,108(sp)
8020fae4:	d811883a 	mov	r8,sp
8020fae8:	003f1b06 	br	8020f758 <__reset+0xfa1ef758>
8020faec:	d8001d85 	stb	zero,118(sp)
8020faf0:	80007b16 	blt	r16,zero,8020fce0 <___svfiprintf_internal_r+0xfe8>
8020faf4:	00ffdfc4 	movi	r3,-129
8020faf8:	e244b03a 	or	r2,fp,r9
8020fafc:	90e4703a 	and	r18,r18,r3
8020fb00:	103d7026 	beq	r2,zero,8020f0c4 <__reset+0xfa1ef0c4>
8020fb04:	0015883a 	mov	r10,zero
8020fb08:	003d7206 	br	8020f0d4 <__reset+0xfa1ef0d4>
8020fb0c:	d9801a04 	addi	r6,sp,104
8020fb10:	b80b883a 	mov	r5,r23
8020fb14:	a809883a 	mov	r4,r21
8020fb18:	020eb280 	call	8020eb28 <__ssprint_r>
8020fb1c:	103f841e 	bne	r2,zero,8020f930 <__reset+0xfa1ef930>
8020fb20:	d8c01c17 	ldw	r3,112(sp)
8020fb24:	d8801b17 	ldw	r2,108(sp)
8020fb28:	d811883a 	mov	r8,sp
8020fb2c:	003ef006 	br	8020f6f0 <__reset+0xfa1ef6f0>
8020fb30:	9080100c 	andi	r2,r18,64
8020fb34:	d8001d85 	stb	zero,118(sp)
8020fb38:	dac02317 	ldw	r11,140(sp)
8020fb3c:	10008126 	beq	r2,zero,8020fd44 <___svfiprintf_internal_r+0x104c>
8020fb40:	58800104 	addi	r2,r11,4
8020fb44:	5f00000b 	ldhu	fp,0(r11)
8020fb48:	0013883a 	mov	r9,zero
8020fb4c:	803ec30e 	bge	r16,zero,8020f65c <__reset+0xfa1ef65c>
8020fb50:	d8802315 	stw	r2,140(sp)
8020fb54:	0015883a 	mov	r10,zero
8020fb58:	e244b03a 	or	r2,fp,r9
8020fb5c:	103e371e 	bne	r2,zero,8020f43c <__reset+0xfa1ef43c>
8020fb60:	00800044 	movi	r2,1
8020fb64:	10803fcc 	andi	r2,r2,255
8020fb68:	00c00044 	movi	r3,1
8020fb6c:	10c06126 	beq	r2,r3,8020fcf4 <___svfiprintf_internal_r+0xffc>
8020fb70:	00c00084 	movi	r3,2
8020fb74:	10fd5526 	beq	r2,r3,8020f0cc <__reset+0xfa1ef0cc>
8020fb78:	003ed806 	br	8020f6dc <__reset+0xfa1ef6dc>
8020fb7c:	d8802315 	stw	r2,140(sp)
8020fb80:	98c00007 	ldb	r3,0(r19)
8020fb84:	003cab06 	br	8020ee34 <__reset+0xfa1eee34>
8020fb88:	d9801a04 	addi	r6,sp,104
8020fb8c:	b80b883a 	mov	r5,r23
8020fb90:	a809883a 	mov	r4,r21
8020fb94:	020eb280 	call	8020eb28 <__ssprint_r>
8020fb98:	103f651e 	bne	r2,zero,8020f930 <__reset+0xfa1ef930>
8020fb9c:	d8c01c17 	ldw	r3,112(sp)
8020fba0:	003f4f06 	br	8020f8e0 <__reset+0xfa1ef8e0>
8020fba4:	00a008b4 	movhi	r2,32802
8020fba8:	10acc704 	addi	r2,r2,-19684
8020fbac:	d8802915 	stw	r2,164(sp)
8020fbb0:	003d4406 	br	8020f0c4 <__reset+0xfa1ef0c4>
8020fbb4:	dac02317 	ldw	r11,140(sp)
8020fbb8:	58800017 	ldw	r2,0(r11)
8020fbbc:	dac02517 	ldw	r11,148(sp)
8020fbc0:	5807d7fa 	srai	r3,r11,31
8020fbc4:	dac02317 	ldw	r11,140(sp)
8020fbc8:	10c00115 	stw	r3,4(r2)
8020fbcc:	5ac00104 	addi	r11,r11,4
8020fbd0:	dac02315 	stw	r11,140(sp)
8020fbd4:	dac02517 	ldw	r11,148(sp)
8020fbd8:	12c00015 	stw	r11,0(r2)
8020fbdc:	003c6d06 	br	8020ed94 <__reset+0xfa1eed94>
8020fbe0:	9080100c 	andi	r2,r18,64
8020fbe4:	dac02317 	ldw	r11,140(sp)
8020fbe8:	103e5326 	beq	r2,zero,8020f538 <__reset+0xfa1ef538>
8020fbec:	5f00000f 	ldh	fp,0(r11)
8020fbf0:	5ac00104 	addi	r11,r11,4
8020fbf4:	dac02315 	stw	r11,140(sp)
8020fbf8:	e013d7fa 	srai	r9,fp,31
8020fbfc:	4805883a 	mov	r2,r9
8020fc00:	003e0706 	br	8020f420 <__reset+0xfa1ef420>
8020fc04:	00800c04 	movi	r2,48
8020fc08:	d8801d05 	stb	r2,116(sp)
8020fc0c:	d8c01d45 	stb	r3,117(sp)
8020fc10:	d8001d85 	stb	zero,118(sp)
8020fc14:	90800094 	ori	r2,r18,2
8020fc18:	80008f16 	blt	r16,zero,8020fe58 <___svfiprintf_internal_r+0x1160>
8020fc1c:	00bfdfc4 	movi	r2,-129
8020fc20:	90a4703a 	and	r18,r18,r2
8020fc24:	94800094 	ori	r18,r18,2
8020fc28:	0015883a 	mov	r10,zero
8020fc2c:	003d2906 	br	8020f0d4 <__reset+0xfa1ef0d4>
8020fc30:	98c00007 	ldb	r3,0(r19)
8020fc34:	003c7f06 	br	8020ee34 <__reset+0xfa1eee34>
8020fc38:	dac02317 	ldw	r11,140(sp)
8020fc3c:	0013883a 	mov	r9,zero
8020fc40:	5f000017 	ldw	fp,0(r11)
8020fc44:	5ac00104 	addi	r11,r11,4
8020fc48:	dac02315 	stw	r11,140(sp)
8020fc4c:	003d1506 	br	8020f0a4 <__reset+0xfa1ef0a4>
8020fc50:	9080100c 	andi	r2,r18,64
8020fc54:	d8001d85 	stb	zero,118(sp)
8020fc58:	dac02317 	ldw	r11,140(sp)
8020fc5c:	10003426 	beq	r2,zero,8020fd30 <___svfiprintf_internal_r+0x1038>
8020fc60:	58800104 	addi	r2,r11,4
8020fc64:	5f00000b 	ldhu	fp,0(r11)
8020fc68:	0013883a 	mov	r9,zero
8020fc6c:	803e950e 	bge	r16,zero,8020f6c4 <__reset+0xfa1ef6c4>
8020fc70:	e246b03a 	or	r3,fp,r9
8020fc74:	d8802315 	stw	r2,140(sp)
8020fc78:	183d5a1e 	bne	r3,zero,8020f1e4 <__reset+0xfa1ef1e4>
8020fc7c:	0015883a 	mov	r10,zero
8020fc80:	0005883a 	mov	r2,zero
8020fc84:	003fb706 	br	8020fb64 <__reset+0xfa1efb64>
8020fc88:	98c00043 	ldbu	r3,1(r19)
8020fc8c:	94800814 	ori	r18,r18,32
8020fc90:	9cc00044 	addi	r19,r19,1
8020fc94:	18c03fcc 	andi	r3,r3,255
8020fc98:	18c0201c 	xori	r3,r3,128
8020fc9c:	18ffe004 	addi	r3,r3,-128
8020fca0:	003c6406 	br	8020ee34 <__reset+0xfa1eee34>
8020fca4:	d8c02315 	stw	r3,140(sp)
8020fca8:	0015883a 	mov	r10,zero
8020fcac:	003faa06 	br	8020fb58 <__reset+0xfa1efb58>
8020fcb0:	dac02317 	ldw	r11,140(sp)
8020fcb4:	58800017 	ldw	r2,0(r11)
8020fcb8:	5ac00104 	addi	r11,r11,4
8020fcbc:	dac02315 	stw	r11,140(sp)
8020fcc0:	dac02517 	ldw	r11,148(sp)
8020fcc4:	12c00015 	stw	r11,0(r2)
8020fcc8:	003c3206 	br	8020ed94 <__reset+0xfa1eed94>
8020fccc:	012008b4 	movhi	r4,32802
8020fcd0:	212cc704 	addi	r4,r4,-19684
8020fcd4:	d9002915 	stw	r4,164(sp)
8020fcd8:	d8c02315 	stw	r3,140(sp)
8020fcdc:	1025883a 	mov	r18,r2
8020fce0:	e244b03a 	or	r2,fp,r9
8020fce4:	103f871e 	bne	r2,zero,8020fb04 <__reset+0xfa1efb04>
8020fce8:	0015883a 	mov	r10,zero
8020fcec:	00800084 	movi	r2,2
8020fcf0:	003f9c06 	br	8020fb64 <__reset+0xfa1efb64>
8020fcf4:	0039883a 	mov	fp,zero
8020fcf8:	003e5f06 	br	8020f678 <__reset+0xfa1ef678>
8020fcfc:	d9801a04 	addi	r6,sp,104
8020fd00:	b80b883a 	mov	r5,r23
8020fd04:	a809883a 	mov	r4,r21
8020fd08:	020eb280 	call	8020eb28 <__ssprint_r>
8020fd0c:	103f081e 	bne	r2,zero,8020f930 <__reset+0xfa1ef930>
8020fd10:	d8c01c17 	ldw	r3,112(sp)
8020fd14:	d8801b17 	ldw	r2,108(sp)
8020fd18:	d811883a 	mov	r8,sp
8020fd1c:	003e9106 	br	8020f764 <__reset+0xfa1ef764>
8020fd20:	012008b4 	movhi	r4,32802
8020fd24:	212d2f04 	addi	r4,r4,-19268
8020fd28:	d9002215 	stw	r4,136(sp)
8020fd2c:	003ead06 	br	8020f7e4 <__reset+0xfa1ef7e4>
8020fd30:	58800104 	addi	r2,r11,4
8020fd34:	5f000017 	ldw	fp,0(r11)
8020fd38:	0013883a 	mov	r9,zero
8020fd3c:	803e610e 	bge	r16,zero,8020f6c4 <__reset+0xfa1ef6c4>
8020fd40:	003fcb06 	br	8020fc70 <__reset+0xfa1efc70>
8020fd44:	58800104 	addi	r2,r11,4
8020fd48:	5f000017 	ldw	fp,0(r11)
8020fd4c:	0013883a 	mov	r9,zero
8020fd50:	803e420e 	bge	r16,zero,8020f65c <__reset+0xfa1ef65c>
8020fd54:	003f7e06 	br	8020fb50 <__reset+0xfa1efb50>
8020fd58:	5f000017 	ldw	fp,0(r11)
8020fd5c:	5ac00104 	addi	r11,r11,4
8020fd60:	0013883a 	mov	r9,zero
8020fd64:	dac02315 	stw	r11,140(sp)
8020fd68:	003cce06 	br	8020f0a4 <__reset+0xfa1ef0a4>
8020fd6c:	8809883a 	mov	r4,r17
8020fd70:	da002c15 	stw	r8,176(sp)
8020fd74:	02055000 	call	80205500 <strlen>
8020fd78:	d8802115 	stw	r2,132(sp)
8020fd7c:	da801d83 	ldbu	r10,118(sp)
8020fd80:	df002315 	stw	fp,140(sp)
8020fd84:	0021883a 	mov	r16,zero
8020fd88:	da002c17 	ldw	r8,176(sp)
8020fd8c:	003cf606 	br	8020f168 <__reset+0xfa1ef168>
8020fd90:	00800184 	movi	r2,6
8020fd94:	1400012e 	bgeu	r2,r16,8020fd9c <___svfiprintf_internal_r+0x10a4>
8020fd98:	1021883a 	mov	r16,r2
8020fd9c:	dc002115 	stw	r16,132(sp)
8020fda0:	8005883a 	mov	r2,r16
8020fda4:	80003c16 	blt	r16,zero,8020fe98 <___svfiprintf_internal_r+0x11a0>
8020fda8:	046008b4 	movhi	r17,32802
8020fdac:	d8802015 	stw	r2,128(sp)
8020fdb0:	df002315 	stw	fp,140(sp)
8020fdb4:	8c6ccc04 	addi	r17,r17,-19664
8020fdb8:	003d2e06 	br	8020f274 <__reset+0xfa1ef274>
8020fdbc:	04001004 	movi	r16,64
8020fdc0:	800b883a 	mov	r5,r16
8020fdc4:	020c7740 	call	8020c774 <_malloc_r>
8020fdc8:	dac02717 	ldw	r11,156(sp)
8020fdcc:	58800015 	stw	r2,0(r11)
8020fdd0:	58800415 	stw	r2,16(r11)
8020fdd4:	10004826 	beq	r2,zero,8020fef8 <___svfiprintf_internal_r+0x1200>
8020fdd8:	dac02717 	ldw	r11,156(sp)
8020fddc:	5c000515 	stw	r16,20(r11)
8020fde0:	003bd906 	br	8020ed48 <__reset+0xfa1eed48>
8020fde4:	9080004c 	andi	r2,r18,1
8020fde8:	0015883a 	mov	r10,zero
8020fdec:	10000626 	beq	r2,zero,8020fe08 <___svfiprintf_internal_r+0x1110>
8020fdf0:	dac02b17 	ldw	r11,172(sp)
8020fdf4:	00800c04 	movi	r2,48
8020fdf8:	d88019c5 	stb	r2,103(sp)
8020fdfc:	dac02115 	stw	r11,132(sp)
8020fe00:	dc4019c4 	addi	r17,sp,103
8020fe04:	003cd806 	br	8020f168 <__reset+0xfa1ef168>
8020fe08:	d8002115 	stw	zero,132(sp)
8020fe0c:	dc401a04 	addi	r17,sp,104
8020fe10:	003cd506 	br	8020f168 <__reset+0xfa1ef168>
8020fe14:	012008b4 	movhi	r4,32802
8020fe18:	212d3304 	addi	r4,r4,-19252
8020fe1c:	d9002815 	stw	r4,160(sp)
8020fe20:	003d4306 	br	8020f330 <__reset+0xfa1ef330>
8020fe24:	00bfffc4 	movi	r2,-1
8020fe28:	003ec606 	br	8020f944 <__reset+0xfa1ef944>
8020fe2c:	00800044 	movi	r2,1
8020fe30:	10803fcc 	andi	r2,r2,255
8020fe34:	00c00044 	movi	r3,1
8020fe38:	10fd8026 	beq	r2,r3,8020f43c <__reset+0xfa1ef43c>
8020fe3c:	00c00084 	movi	r3,2
8020fe40:	10fca426 	beq	r2,r3,8020f0d4 <__reset+0xfa1ef0d4>
8020fe44:	003ce806 	br	8020f1e8 <__reset+0xfa1ef1e8>
8020fe48:	012008b4 	movhi	r4,32802
8020fe4c:	212d3304 	addi	r4,r4,-19252
8020fe50:	d9002815 	stw	r4,160(sp)
8020fe54:	003e9906 	br	8020f8bc <__reset+0xfa1ef8bc>
8020fe58:	1025883a 	mov	r18,r2
8020fe5c:	0015883a 	mov	r10,zero
8020fe60:	00800084 	movi	r2,2
8020fe64:	003ff206 	br	8020fe30 <__reset+0xfa1efe30>
8020fe68:	016008b4 	movhi	r5,32802
8020fe6c:	296d2f04 	addi	r5,r5,-19268
8020fe70:	d9402215 	stw	r5,136(sp)
8020fe74:	003ee206 	br	8020fa00 <__reset+0xfa1efa00>
8020fe78:	5827883a 	mov	r19,r11
8020fe7c:	0021883a 	mov	r16,zero
8020fe80:	003bed06 	br	8020ee38 <__reset+0xfa1eee38>
8020fe84:	dc002115 	stw	r16,132(sp)
8020fe88:	da801d83 	ldbu	r10,118(sp)
8020fe8c:	df002315 	stw	fp,140(sp)
8020fe90:	0021883a 	mov	r16,zero
8020fe94:	003cb406 	br	8020f168 <__reset+0xfa1ef168>
8020fe98:	0005883a 	mov	r2,zero
8020fe9c:	003fc206 	br	8020fda8 <__reset+0xfa1efda8>
8020fea0:	d8802317 	ldw	r2,140(sp)
8020fea4:	98c00043 	ldbu	r3,1(r19)
8020fea8:	5827883a 	mov	r19,r11
8020feac:	14000017 	ldw	r16,0(r2)
8020feb0:	10800104 	addi	r2,r2,4
8020feb4:	d8802315 	stw	r2,140(sp)
8020feb8:	803f760e 	bge	r16,zero,8020fc94 <__reset+0xfa1efc94>
8020febc:	18c03fcc 	andi	r3,r3,255
8020fec0:	18c0201c 	xori	r3,r3,128
8020fec4:	043fffc4 	movi	r16,-1
8020fec8:	18ffe004 	addi	r3,r3,-128
8020fecc:	003bd906 	br	8020ee34 <__reset+0xfa1eee34>
8020fed0:	d9c01d85 	stb	r7,118(sp)
8020fed4:	003cb606 	br	8020f1b0 <__reset+0xfa1ef1b0>
8020fed8:	d9c01d85 	stb	r7,118(sp)
8020fedc:	003d2106 	br	8020f364 <__reset+0xfa1ef364>
8020fee0:	d9c01d85 	stb	r7,118(sp)
8020fee4:	003d8e06 	br	8020f520 <__reset+0xfa1ef520>
8020fee8:	d9c01d85 	stb	r7,118(sp)
8020feec:	003db306 	br	8020f5bc <__reset+0xfa1ef5bc>
8020fef0:	d9c01d85 	stb	r7,118(sp)
8020fef4:	003c8a06 	br	8020f120 <__reset+0xfa1ef120>
8020fef8:	dac02a17 	ldw	r11,168(sp)
8020fefc:	00800304 	movi	r2,12
8020ff00:	58800015 	stw	r2,0(r11)
8020ff04:	00bfffc4 	movi	r2,-1
8020ff08:	003e8e06 	br	8020f944 <__reset+0xfa1ef944>
8020ff0c:	d9c01d85 	stb	r7,118(sp)
8020ff10:	003dc706 	br	8020f630 <__reset+0xfa1ef630>
8020ff14:	d9c01d85 	stb	r7,118(sp)
8020ff18:	003ddf06 	br	8020f698 <__reset+0xfa1ef698>
8020ff1c:	d9c01d85 	stb	r7,118(sp)
8020ff20:	003d3706 	br	8020f400 <__reset+0xfa1ef400>
8020ff24:	d9c01d85 	stb	r7,118(sp)
8020ff28:	003c5406 	br	8020f07c <__reset+0xfa1ef07c>
8020ff2c:	d9c01d85 	stb	r7,118(sp)
8020ff30:	003d1d06 	br	8020f3a8 <__reset+0xfa1ef3a8>

8020ff34 <__sprint_r.part.0>:
8020ff34:	28801917 	ldw	r2,100(r5)
8020ff38:	defff604 	addi	sp,sp,-40
8020ff3c:	dd400515 	stw	r21,20(sp)
8020ff40:	dfc00915 	stw	ra,36(sp)
8020ff44:	df000815 	stw	fp,32(sp)
8020ff48:	ddc00715 	stw	r23,28(sp)
8020ff4c:	dd800615 	stw	r22,24(sp)
8020ff50:	dd000415 	stw	r20,16(sp)
8020ff54:	dcc00315 	stw	r19,12(sp)
8020ff58:	dc800215 	stw	r18,8(sp)
8020ff5c:	dc400115 	stw	r17,4(sp)
8020ff60:	dc000015 	stw	r16,0(sp)
8020ff64:	1088000c 	andi	r2,r2,8192
8020ff68:	302b883a 	mov	r21,r6
8020ff6c:	10002e26 	beq	r2,zero,80210028 <__sprint_r.part.0+0xf4>
8020ff70:	30800217 	ldw	r2,8(r6)
8020ff74:	35800017 	ldw	r22,0(r6)
8020ff78:	10002926 	beq	r2,zero,80210020 <__sprint_r.part.0+0xec>
8020ff7c:	2827883a 	mov	r19,r5
8020ff80:	2029883a 	mov	r20,r4
8020ff84:	b5c00104 	addi	r23,r22,4
8020ff88:	04bfffc4 	movi	r18,-1
8020ff8c:	bc400017 	ldw	r17,0(r23)
8020ff90:	b4000017 	ldw	r16,0(r22)
8020ff94:	0039883a 	mov	fp,zero
8020ff98:	8822d0ba 	srli	r17,r17,2
8020ff9c:	8800031e 	bne	r17,zero,8020ffac <__sprint_r.part.0+0x78>
8020ffa0:	00001806 	br	80210004 <__sprint_r.part.0+0xd0>
8020ffa4:	84000104 	addi	r16,r16,4
8020ffa8:	8f001526 	beq	r17,fp,80210000 <__sprint_r.part.0+0xcc>
8020ffac:	81400017 	ldw	r5,0(r16)
8020ffb0:	980d883a 	mov	r6,r19
8020ffb4:	a009883a 	mov	r4,r20
8020ffb8:	021195c0 	call	8021195c <_fputwc_r>
8020ffbc:	e7000044 	addi	fp,fp,1
8020ffc0:	14bff81e 	bne	r2,r18,8020ffa4 <__reset+0xfa1effa4>
8020ffc4:	9005883a 	mov	r2,r18
8020ffc8:	a8000215 	stw	zero,8(r21)
8020ffcc:	a8000115 	stw	zero,4(r21)
8020ffd0:	dfc00917 	ldw	ra,36(sp)
8020ffd4:	df000817 	ldw	fp,32(sp)
8020ffd8:	ddc00717 	ldw	r23,28(sp)
8020ffdc:	dd800617 	ldw	r22,24(sp)
8020ffe0:	dd400517 	ldw	r21,20(sp)
8020ffe4:	dd000417 	ldw	r20,16(sp)
8020ffe8:	dcc00317 	ldw	r19,12(sp)
8020ffec:	dc800217 	ldw	r18,8(sp)
8020fff0:	dc400117 	ldw	r17,4(sp)
8020fff4:	dc000017 	ldw	r16,0(sp)
8020fff8:	dec00a04 	addi	sp,sp,40
8020fffc:	f800283a 	ret
80210000:	a8800217 	ldw	r2,8(r21)
80210004:	8c63883a 	add	r17,r17,r17
80210008:	8c63883a 	add	r17,r17,r17
8021000c:	1445c83a 	sub	r2,r2,r17
80210010:	a8800215 	stw	r2,8(r21)
80210014:	b5800204 	addi	r22,r22,8
80210018:	bdc00204 	addi	r23,r23,8
8021001c:	103fdb1e 	bne	r2,zero,8020ff8c <__reset+0xfa1eff8c>
80210020:	0005883a 	mov	r2,zero
80210024:	003fe806 	br	8020ffc8 <__reset+0xfa1effc8>
80210028:	020be980 	call	8020be98 <__sfvwrite_r>
8021002c:	003fe606 	br	8020ffc8 <__reset+0xfa1effc8>

80210030 <__sprint_r>:
80210030:	30c00217 	ldw	r3,8(r6)
80210034:	18000126 	beq	r3,zero,8021003c <__sprint_r+0xc>
80210038:	020ff341 	jmpi	8020ff34 <__sprint_r.part.0>
8021003c:	30000115 	stw	zero,4(r6)
80210040:	0005883a 	mov	r2,zero
80210044:	f800283a 	ret

80210048 <___vfiprintf_internal_r>:
80210048:	deffc904 	addi	sp,sp,-220
8021004c:	df003515 	stw	fp,212(sp)
80210050:	dd003115 	stw	r20,196(sp)
80210054:	dfc03615 	stw	ra,216(sp)
80210058:	ddc03415 	stw	r23,208(sp)
8021005c:	dd803315 	stw	r22,204(sp)
80210060:	dd403215 	stw	r21,200(sp)
80210064:	dcc03015 	stw	r19,192(sp)
80210068:	dc802f15 	stw	r18,188(sp)
8021006c:	dc402e15 	stw	r17,184(sp)
80210070:	dc002d15 	stw	r16,180(sp)
80210074:	d9002015 	stw	r4,128(sp)
80210078:	d9c02215 	stw	r7,136(sp)
8021007c:	2829883a 	mov	r20,r5
80210080:	3039883a 	mov	fp,r6
80210084:	20000226 	beq	r4,zero,80210090 <___vfiprintf_internal_r+0x48>
80210088:	20800e17 	ldw	r2,56(r4)
8021008c:	1000cf26 	beq	r2,zero,802103cc <___vfiprintf_internal_r+0x384>
80210090:	a080030b 	ldhu	r2,12(r20)
80210094:	10c8000c 	andi	r3,r2,8192
80210098:	1800061e 	bne	r3,zero,802100b4 <___vfiprintf_internal_r+0x6c>
8021009c:	a1001917 	ldw	r4,100(r20)
802100a0:	00f7ffc4 	movi	r3,-8193
802100a4:	10880014 	ori	r2,r2,8192
802100a8:	20c6703a 	and	r3,r4,r3
802100ac:	a080030d 	sth	r2,12(r20)
802100b0:	a0c01915 	stw	r3,100(r20)
802100b4:	10c0020c 	andi	r3,r2,8
802100b8:	1800a926 	beq	r3,zero,80210360 <___vfiprintf_internal_r+0x318>
802100bc:	a0c00417 	ldw	r3,16(r20)
802100c0:	1800a726 	beq	r3,zero,80210360 <___vfiprintf_internal_r+0x318>
802100c4:	1080068c 	andi	r2,r2,26
802100c8:	00c00284 	movi	r3,10
802100cc:	10c0ac26 	beq	r2,r3,80210380 <___vfiprintf_internal_r+0x338>
802100d0:	da801a04 	addi	r10,sp,104
802100d4:	da801e15 	stw	r10,120(sp)
802100d8:	d8801e17 	ldw	r2,120(sp)
802100dc:	da8019c4 	addi	r10,sp,103
802100e0:	05a008b4 	movhi	r22,32802
802100e4:	05e008b4 	movhi	r23,32802
802100e8:	da801f15 	stw	r10,124(sp)
802100ec:	1295c83a 	sub	r10,r2,r10
802100f0:	b5ad3b04 	addi	r22,r22,-19220
802100f4:	bded3704 	addi	r23,r23,-19236
802100f8:	dec01a15 	stw	sp,104(sp)
802100fc:	d8001c15 	stw	zero,112(sp)
80210100:	d8001b15 	stw	zero,108(sp)
80210104:	d8002615 	stw	zero,152(sp)
80210108:	d8002315 	stw	zero,140(sp)
8021010c:	da802715 	stw	r10,156(sp)
80210110:	d811883a 	mov	r8,sp
80210114:	dd002115 	stw	r20,132(sp)
80210118:	e021883a 	mov	r16,fp
8021011c:	80800007 	ldb	r2,0(r16)
80210120:	1003ea26 	beq	r2,zero,802110cc <___vfiprintf_internal_r+0x1084>
80210124:	00c00944 	movi	r3,37
80210128:	8025883a 	mov	r18,r16
8021012c:	10c0021e 	bne	r2,r3,80210138 <___vfiprintf_internal_r+0xf0>
80210130:	00001606 	br	8021018c <___vfiprintf_internal_r+0x144>
80210134:	10c00326 	beq	r2,r3,80210144 <___vfiprintf_internal_r+0xfc>
80210138:	94800044 	addi	r18,r18,1
8021013c:	90800007 	ldb	r2,0(r18)
80210140:	103ffc1e 	bne	r2,zero,80210134 <__reset+0xfa1f0134>
80210144:	9423c83a 	sub	r17,r18,r16
80210148:	88001026 	beq	r17,zero,8021018c <___vfiprintf_internal_r+0x144>
8021014c:	d8c01c17 	ldw	r3,112(sp)
80210150:	d8801b17 	ldw	r2,108(sp)
80210154:	44000015 	stw	r16,0(r8)
80210158:	88c7883a 	add	r3,r17,r3
8021015c:	10800044 	addi	r2,r2,1
80210160:	44400115 	stw	r17,4(r8)
80210164:	d8c01c15 	stw	r3,112(sp)
80210168:	d8801b15 	stw	r2,108(sp)
8021016c:	010001c4 	movi	r4,7
80210170:	2080760e 	bge	r4,r2,8021034c <___vfiprintf_internal_r+0x304>
80210174:	1803821e 	bne	r3,zero,80210f80 <___vfiprintf_internal_r+0xf38>
80210178:	da802317 	ldw	r10,140(sp)
8021017c:	d8001b15 	stw	zero,108(sp)
80210180:	d811883a 	mov	r8,sp
80210184:	5455883a 	add	r10,r10,r17
80210188:	da802315 	stw	r10,140(sp)
8021018c:	90800007 	ldb	r2,0(r18)
80210190:	10044626 	beq	r2,zero,802112ac <___vfiprintf_internal_r+0x1264>
80210194:	90c00047 	ldb	r3,1(r18)
80210198:	94000044 	addi	r16,r18,1
8021019c:	d8001d85 	stb	zero,118(sp)
802101a0:	0009883a 	mov	r4,zero
802101a4:	000f883a 	mov	r7,zero
802101a8:	027fffc4 	movi	r9,-1
802101ac:	0023883a 	mov	r17,zero
802101b0:	0029883a 	mov	r20,zero
802101b4:	01401604 	movi	r5,88
802101b8:	01800244 	movi	r6,9
802101bc:	03400a84 	movi	r13,42
802101c0:	03001b04 	movi	r12,108
802101c4:	84000044 	addi	r16,r16,1
802101c8:	18bff804 	addi	r2,r3,-32
802101cc:	28827336 	bltu	r5,r2,80210b9c <___vfiprintf_internal_r+0xb54>
802101d0:	100490ba 	slli	r2,r2,2
802101d4:	02a00874 	movhi	r10,32801
802101d8:	52807a04 	addi	r10,r10,488
802101dc:	1285883a 	add	r2,r2,r10
802101e0:	10800017 	ldw	r2,0(r2)
802101e4:	1000683a 	jmp	r2
802101e8:	802108d0 	cmplti	zero,r16,-31709
802101ec:	80210b9c 	xori	zero,r16,33838
802101f0:	80210b9c 	xori	zero,r16,33838
802101f4:	802108f0 	cmpltui	zero,r16,33827
802101f8:	80210b9c 	xori	zero,r16,33838
802101fc:	80210b9c 	xori	zero,r16,33838
80210200:	80210b9c 	xori	zero,r16,33838
80210204:	80210b9c 	xori	zero,r16,33838
80210208:	80210b9c 	xori	zero,r16,33838
8021020c:	80210b9c 	xori	zero,r16,33838
80210210:	80210ad8 	cmpnei	zero,r16,-31701
80210214:	80210af4 	orhi	zero,r16,33835
80210218:	80210b9c 	xori	zero,r16,33838
8021021c:	802103dc 	xori	zero,r16,33807
80210220:	80210b04 	addi	zero,r16,-31700
80210224:	80210b9c 	xori	zero,r16,33838
80210228:	802108fc 	xorhi	zero,r16,33827
8021022c:	80210908 	cmpgei	zero,r16,-31708
80210230:	80210908 	cmpgei	zero,r16,-31708
80210234:	80210908 	cmpgei	zero,r16,-31708
80210238:	80210908 	cmpgei	zero,r16,-31708
8021023c:	80210908 	cmpgei	zero,r16,-31708
80210240:	80210908 	cmpgei	zero,r16,-31708
80210244:	80210908 	cmpgei	zero,r16,-31708
80210248:	80210908 	cmpgei	zero,r16,-31708
8021024c:	80210908 	cmpgei	zero,r16,-31708
80210250:	80210b9c 	xori	zero,r16,33838
80210254:	80210b9c 	xori	zero,r16,33838
80210258:	80210b9c 	xori	zero,r16,33838
8021025c:	80210b9c 	xori	zero,r16,33838
80210260:	80210b9c 	xori	zero,r16,33838
80210264:	80210b9c 	xori	zero,r16,33838
80210268:	80210b9c 	xori	zero,r16,33838
8021026c:	80210b9c 	xori	zero,r16,33838
80210270:	80210b9c 	xori	zero,r16,33838
80210274:	80210b9c 	xori	zero,r16,33838
80210278:	80210934 	orhi	zero,r16,33828
8021027c:	80210b9c 	xori	zero,r16,33838
80210280:	80210b9c 	xori	zero,r16,33838
80210284:	80210b9c 	xori	zero,r16,33838
80210288:	80210b9c 	xori	zero,r16,33838
8021028c:	80210b9c 	xori	zero,r16,33838
80210290:	80210b9c 	xori	zero,r16,33838
80210294:	80210b9c 	xori	zero,r16,33838
80210298:	80210b9c 	xori	zero,r16,33838
8021029c:	80210b9c 	xori	zero,r16,33838
802102a0:	80210b9c 	xori	zero,r16,33838
802102a4:	8021096c 	andhi	zero,r16,33829
802102a8:	80210b9c 	xori	zero,r16,33838
802102ac:	80210b9c 	xori	zero,r16,33838
802102b0:	80210b9c 	xori	zero,r16,33838
802102b4:	80210b9c 	xori	zero,r16,33838
802102b8:	80210b9c 	xori	zero,r16,33838
802102bc:	802109c4 	addi	zero,r16,-31705
802102c0:	80210b9c 	xori	zero,r16,33838
802102c4:	80210b9c 	xori	zero,r16,33838
802102c8:	80210a34 	orhi	zero,r16,33832
802102cc:	80210b9c 	xori	zero,r16,33838
802102d0:	80210b9c 	xori	zero,r16,33838
802102d4:	80210b9c 	xori	zero,r16,33838
802102d8:	80210b9c 	xori	zero,r16,33838
802102dc:	80210b9c 	xori	zero,r16,33838
802102e0:	80210b9c 	xori	zero,r16,33838
802102e4:	80210b9c 	xori	zero,r16,33838
802102e8:	80210b9c 	xori	zero,r16,33838
802102ec:	80210b9c 	xori	zero,r16,33838
802102f0:	80210b9c 	xori	zero,r16,33838
802102f4:	802107e0 	cmpeqi	zero,r16,-31713
802102f8:	8021080c 	andi	zero,r16,33824
802102fc:	80210b9c 	xori	zero,r16,33838
80210300:	80210b9c 	xori	zero,r16,33838
80210304:	80210b9c 	xori	zero,r16,33838
80210308:	80210b44 	addi	zero,r16,-31699
8021030c:	8021080c 	andi	zero,r16,33824
80210310:	80210b9c 	xori	zero,r16,33838
80210314:	80210b9c 	xori	zero,r16,33838
80210318:	802106a0 	cmpeqi	zero,r16,-31718
8021031c:	80210b9c 	xori	zero,r16,33838
80210320:	802106b0 	cmpltui	zero,r16,33818
80210324:	802106ec 	andhi	zero,r16,33819
80210328:	802103e8 	cmpgeui	zero,r16,33807
8021032c:	80210694 	ori	zero,r16,33818
80210330:	80210b9c 	xori	zero,r16,33838
80210334:	80210a70 	cmpltui	zero,r16,33833
80210338:	80210b9c 	xori	zero,r16,33838
8021033c:	80210ac8 	cmpgei	zero,r16,-31701
80210340:	80210b9c 	xori	zero,r16,33838
80210344:	80210b9c 	xori	zero,r16,33838
80210348:	8021078c 	andi	zero,r16,33822
8021034c:	42000204 	addi	r8,r8,8
80210350:	da802317 	ldw	r10,140(sp)
80210354:	5455883a 	add	r10,r10,r17
80210358:	da802315 	stw	r10,140(sp)
8021035c:	003f8b06 	br	8021018c <__reset+0xfa1f018c>
80210360:	d9002017 	ldw	r4,128(sp)
80210364:	a00b883a 	mov	r5,r20
80210368:	0209a400 	call	80209a40 <__swsetup_r>
8021036c:	1003b11e 	bne	r2,zero,80211234 <___vfiprintf_internal_r+0x11ec>
80210370:	a080030b 	ldhu	r2,12(r20)
80210374:	00c00284 	movi	r3,10
80210378:	1080068c 	andi	r2,r2,26
8021037c:	10ff541e 	bne	r2,r3,802100d0 <__reset+0xfa1f00d0>
80210380:	a080038f 	ldh	r2,14(r20)
80210384:	103f5216 	blt	r2,zero,802100d0 <__reset+0xfa1f00d0>
80210388:	d9c02217 	ldw	r7,136(sp)
8021038c:	d9002017 	ldw	r4,128(sp)
80210390:	e00d883a 	mov	r6,fp
80210394:	a00b883a 	mov	r5,r20
80210398:	02114c00 	call	802114c0 <__sbprintf>
8021039c:	dfc03617 	ldw	ra,216(sp)
802103a0:	df003517 	ldw	fp,212(sp)
802103a4:	ddc03417 	ldw	r23,208(sp)
802103a8:	dd803317 	ldw	r22,204(sp)
802103ac:	dd403217 	ldw	r21,200(sp)
802103b0:	dd003117 	ldw	r20,196(sp)
802103b4:	dcc03017 	ldw	r19,192(sp)
802103b8:	dc802f17 	ldw	r18,188(sp)
802103bc:	dc402e17 	ldw	r17,184(sp)
802103c0:	dc002d17 	ldw	r16,180(sp)
802103c4:	dec03704 	addi	sp,sp,220
802103c8:	f800283a 	ret
802103cc:	020ba140 	call	8020ba14 <__sinit>
802103d0:	003f2f06 	br	80210090 <__reset+0xfa1f0090>
802103d4:	0463c83a 	sub	r17,zero,r17
802103d8:	d8802215 	stw	r2,136(sp)
802103dc:	a5000114 	ori	r20,r20,4
802103e0:	80c00007 	ldb	r3,0(r16)
802103e4:	003f7706 	br	802101c4 <__reset+0xfa1f01c4>
802103e8:	00800c04 	movi	r2,48
802103ec:	da802217 	ldw	r10,136(sp)
802103f0:	d8801d05 	stb	r2,116(sp)
802103f4:	00801e04 	movi	r2,120
802103f8:	d8801d45 	stb	r2,117(sp)
802103fc:	d8001d85 	stb	zero,118(sp)
80210400:	50c00104 	addi	r3,r10,4
80210404:	54800017 	ldw	r18,0(r10)
80210408:	0027883a 	mov	r19,zero
8021040c:	a0800094 	ori	r2,r20,2
80210410:	48030b16 	blt	r9,zero,80211040 <___vfiprintf_internal_r+0xff8>
80210414:	00bfdfc4 	movi	r2,-129
80210418:	a096703a 	and	r11,r20,r2
8021041c:	d8c02215 	stw	r3,136(sp)
80210420:	5d000094 	ori	r20,r11,2
80210424:	90032b1e 	bne	r18,zero,802110d4 <___vfiprintf_internal_r+0x108c>
80210428:	00a008b4 	movhi	r2,32802
8021042c:	10acc704 	addi	r2,r2,-19684
80210430:	d8802615 	stw	r2,152(sp)
80210434:	0039883a 	mov	fp,zero
80210438:	48017b1e 	bne	r9,zero,80210a28 <___vfiprintf_internal_r+0x9e0>
8021043c:	0013883a 	mov	r9,zero
80210440:	0027883a 	mov	r19,zero
80210444:	dd401a04 	addi	r21,sp,104
80210448:	4825883a 	mov	r18,r9
8021044c:	4cc0010e 	bge	r9,r19,80210454 <___vfiprintf_internal_r+0x40c>
80210450:	9825883a 	mov	r18,r19
80210454:	e7003fcc 	andi	fp,fp,255
80210458:	e700201c 	xori	fp,fp,128
8021045c:	e73fe004 	addi	fp,fp,-128
80210460:	e0000126 	beq	fp,zero,80210468 <___vfiprintf_internal_r+0x420>
80210464:	94800044 	addi	r18,r18,1
80210468:	a380008c 	andi	r14,r20,2
8021046c:	70000126 	beq	r14,zero,80210474 <___vfiprintf_internal_r+0x42c>
80210470:	94800084 	addi	r18,r18,2
80210474:	a700210c 	andi	fp,r20,132
80210478:	e001df1e 	bne	fp,zero,80210bf8 <___vfiprintf_internal_r+0xbb0>
8021047c:	8c87c83a 	sub	r3,r17,r18
80210480:	00c1dd0e 	bge	zero,r3,80210bf8 <___vfiprintf_internal_r+0xbb0>
80210484:	01c00404 	movi	r7,16
80210488:	d8801c17 	ldw	r2,112(sp)
8021048c:	38c3ad0e 	bge	r7,r3,80211344 <___vfiprintf_internal_r+0x12fc>
80210490:	02a008b4 	movhi	r10,32802
80210494:	52ad3b04 	addi	r10,r10,-19220
80210498:	dc002915 	stw	r16,164(sp)
8021049c:	d9801b17 	ldw	r6,108(sp)
802104a0:	da802415 	stw	r10,144(sp)
802104a4:	03c001c4 	movi	r15,7
802104a8:	da402515 	stw	r9,148(sp)
802104ac:	db802815 	stw	r14,160(sp)
802104b0:	1821883a 	mov	r16,r3
802104b4:	00000506 	br	802104cc <___vfiprintf_internal_r+0x484>
802104b8:	31400084 	addi	r5,r6,2
802104bc:	42000204 	addi	r8,r8,8
802104c0:	200d883a 	mov	r6,r4
802104c4:	843ffc04 	addi	r16,r16,-16
802104c8:	3c000d0e 	bge	r7,r16,80210500 <___vfiprintf_internal_r+0x4b8>
802104cc:	10800404 	addi	r2,r2,16
802104d0:	31000044 	addi	r4,r6,1
802104d4:	45800015 	stw	r22,0(r8)
802104d8:	41c00115 	stw	r7,4(r8)
802104dc:	d8801c15 	stw	r2,112(sp)
802104e0:	d9001b15 	stw	r4,108(sp)
802104e4:	793ff40e 	bge	r15,r4,802104b8 <__reset+0xfa1f04b8>
802104e8:	1001b51e 	bne	r2,zero,80210bc0 <___vfiprintf_internal_r+0xb78>
802104ec:	843ffc04 	addi	r16,r16,-16
802104f0:	000d883a 	mov	r6,zero
802104f4:	01400044 	movi	r5,1
802104f8:	d811883a 	mov	r8,sp
802104fc:	3c3ff316 	blt	r7,r16,802104cc <__reset+0xfa1f04cc>
80210500:	8007883a 	mov	r3,r16
80210504:	da402517 	ldw	r9,148(sp)
80210508:	db802817 	ldw	r14,160(sp)
8021050c:	dc002917 	ldw	r16,164(sp)
80210510:	da802417 	ldw	r10,144(sp)
80210514:	1885883a 	add	r2,r3,r2
80210518:	40c00115 	stw	r3,4(r8)
8021051c:	42800015 	stw	r10,0(r8)
80210520:	d8801c15 	stw	r2,112(sp)
80210524:	d9401b15 	stw	r5,108(sp)
80210528:	00c001c4 	movi	r3,7
8021052c:	19426016 	blt	r3,r5,80210eb0 <___vfiprintf_internal_r+0xe68>
80210530:	d8c01d87 	ldb	r3,118(sp)
80210534:	42000204 	addi	r8,r8,8
80210538:	29000044 	addi	r4,r5,1
8021053c:	1801b31e 	bne	r3,zero,80210c0c <___vfiprintf_internal_r+0xbc4>
80210540:	7001c026 	beq	r14,zero,80210c44 <___vfiprintf_internal_r+0xbfc>
80210544:	d8c01d04 	addi	r3,sp,116
80210548:	10800084 	addi	r2,r2,2
8021054c:	40c00015 	stw	r3,0(r8)
80210550:	00c00084 	movi	r3,2
80210554:	40c00115 	stw	r3,4(r8)
80210558:	d8801c15 	stw	r2,112(sp)
8021055c:	d9001b15 	stw	r4,108(sp)
80210560:	00c001c4 	movi	r3,7
80210564:	1902650e 	bge	r3,r4,80210efc <___vfiprintf_internal_r+0xeb4>
80210568:	10029a1e 	bne	r2,zero,80210fd4 <___vfiprintf_internal_r+0xf8c>
8021056c:	00c02004 	movi	r3,128
80210570:	01000044 	movi	r4,1
80210574:	000b883a 	mov	r5,zero
80210578:	d811883a 	mov	r8,sp
8021057c:	e0c1b31e 	bne	fp,r3,80210c4c <___vfiprintf_internal_r+0xc04>
80210580:	8cb9c83a 	sub	fp,r17,r18
80210584:	0701b10e 	bge	zero,fp,80210c4c <___vfiprintf_internal_r+0xc04>
80210588:	01c00404 	movi	r7,16
8021058c:	3f03890e 	bge	r7,fp,802113b4 <___vfiprintf_internal_r+0x136c>
80210590:	00e008b4 	movhi	r3,32802
80210594:	18ed3704 	addi	r3,r3,-19236
80210598:	d8c02415 	stw	r3,144(sp)
8021059c:	8007883a 	mov	r3,r16
802105a0:	034001c4 	movi	r13,7
802105a4:	e021883a 	mov	r16,fp
802105a8:	da402515 	stw	r9,148(sp)
802105ac:	1839883a 	mov	fp,r3
802105b0:	00000506 	br	802105c8 <___vfiprintf_internal_r+0x580>
802105b4:	29800084 	addi	r6,r5,2
802105b8:	42000204 	addi	r8,r8,8
802105bc:	180b883a 	mov	r5,r3
802105c0:	843ffc04 	addi	r16,r16,-16
802105c4:	3c000d0e 	bge	r7,r16,802105fc <___vfiprintf_internal_r+0x5b4>
802105c8:	10800404 	addi	r2,r2,16
802105cc:	28c00044 	addi	r3,r5,1
802105d0:	45c00015 	stw	r23,0(r8)
802105d4:	41c00115 	stw	r7,4(r8)
802105d8:	d8801c15 	stw	r2,112(sp)
802105dc:	d8c01b15 	stw	r3,108(sp)
802105e0:	68fff40e 	bge	r13,r3,802105b4 <__reset+0xfa1f05b4>
802105e4:	1002241e 	bne	r2,zero,80210e78 <___vfiprintf_internal_r+0xe30>
802105e8:	843ffc04 	addi	r16,r16,-16
802105ec:	01800044 	movi	r6,1
802105f0:	000b883a 	mov	r5,zero
802105f4:	d811883a 	mov	r8,sp
802105f8:	3c3ff316 	blt	r7,r16,802105c8 <__reset+0xfa1f05c8>
802105fc:	da402517 	ldw	r9,148(sp)
80210600:	e007883a 	mov	r3,fp
80210604:	8039883a 	mov	fp,r16
80210608:	1821883a 	mov	r16,r3
8021060c:	d8c02417 	ldw	r3,144(sp)
80210610:	1705883a 	add	r2,r2,fp
80210614:	47000115 	stw	fp,4(r8)
80210618:	40c00015 	stw	r3,0(r8)
8021061c:	d8801c15 	stw	r2,112(sp)
80210620:	d9801b15 	stw	r6,108(sp)
80210624:	00c001c4 	movi	r3,7
80210628:	19827616 	blt	r3,r6,80211004 <___vfiprintf_internal_r+0xfbc>
8021062c:	4cf9c83a 	sub	fp,r9,r19
80210630:	42000204 	addi	r8,r8,8
80210634:	31000044 	addi	r4,r6,1
80210638:	300b883a 	mov	r5,r6
8021063c:	07018516 	blt	zero,fp,80210c54 <___vfiprintf_internal_r+0xc0c>
80210640:	9885883a 	add	r2,r19,r2
80210644:	45400015 	stw	r21,0(r8)
80210648:	44c00115 	stw	r19,4(r8)
8021064c:	d8801c15 	stw	r2,112(sp)
80210650:	d9001b15 	stw	r4,108(sp)
80210654:	00c001c4 	movi	r3,7
80210658:	1901dd0e 	bge	r3,r4,80210dd0 <___vfiprintf_internal_r+0xd88>
8021065c:	1002401e 	bne	r2,zero,80210f60 <___vfiprintf_internal_r+0xf18>
80210660:	d8001b15 	stw	zero,108(sp)
80210664:	a2c0010c 	andi	r11,r20,4
80210668:	58000226 	beq	r11,zero,80210674 <___vfiprintf_internal_r+0x62c>
8021066c:	8ca7c83a 	sub	r19,r17,r18
80210670:	04c2f216 	blt	zero,r19,8021123c <___vfiprintf_internal_r+0x11f4>
80210674:	8c80010e 	bge	r17,r18,8021067c <___vfiprintf_internal_r+0x634>
80210678:	9023883a 	mov	r17,r18
8021067c:	da802317 	ldw	r10,140(sp)
80210680:	5455883a 	add	r10,r10,r17
80210684:	da802315 	stw	r10,140(sp)
80210688:	d8001b15 	stw	zero,108(sp)
8021068c:	d811883a 	mov	r8,sp
80210690:	003ea206 	br	8021011c <__reset+0xfa1f011c>
80210694:	a5000814 	ori	r20,r20,32
80210698:	80c00007 	ldb	r3,0(r16)
8021069c:	003ec906 	br	802101c4 <__reset+0xfa1f01c4>
802106a0:	80c00007 	ldb	r3,0(r16)
802106a4:	1b030926 	beq	r3,r12,802112cc <___vfiprintf_internal_r+0x1284>
802106a8:	a5000414 	ori	r20,r20,16
802106ac:	003ec506 	br	802101c4 <__reset+0xfa1f01c4>
802106b0:	21003fcc 	andi	r4,r4,255
802106b4:	20035e1e 	bne	r4,zero,80211430 <___vfiprintf_internal_r+0x13e8>
802106b8:	a080080c 	andi	r2,r20,32
802106bc:	1002a526 	beq	r2,zero,80211154 <___vfiprintf_internal_r+0x110c>
802106c0:	da802217 	ldw	r10,136(sp)
802106c4:	50800017 	ldw	r2,0(r10)
802106c8:	da802317 	ldw	r10,140(sp)
802106cc:	5007d7fa 	srai	r3,r10,31
802106d0:	da802217 	ldw	r10,136(sp)
802106d4:	10c00115 	stw	r3,4(r2)
802106d8:	52800104 	addi	r10,r10,4
802106dc:	da802215 	stw	r10,136(sp)
802106e0:	da802317 	ldw	r10,140(sp)
802106e4:	12800015 	stw	r10,0(r2)
802106e8:	003e8c06 	br	8021011c <__reset+0xfa1f011c>
802106ec:	21003fcc 	andi	r4,r4,255
802106f0:	2003511e 	bne	r4,zero,80211438 <___vfiprintf_internal_r+0x13f0>
802106f4:	a080080c 	andi	r2,r20,32
802106f8:	1000a126 	beq	r2,zero,80210980 <___vfiprintf_internal_r+0x938>
802106fc:	da802217 	ldw	r10,136(sp)
80210700:	d8001d85 	stb	zero,118(sp)
80210704:	50800204 	addi	r2,r10,8
80210708:	54800017 	ldw	r18,0(r10)
8021070c:	54c00117 	ldw	r19,4(r10)
80210710:	4802b416 	blt	r9,zero,802111e4 <___vfiprintf_internal_r+0x119c>
80210714:	013fdfc4 	movi	r4,-129
80210718:	94c6b03a 	or	r3,r18,r19
8021071c:	d8802215 	stw	r2,136(sp)
80210720:	a128703a 	and	r20,r20,r4
80210724:	1800a226 	beq	r3,zero,802109b0 <___vfiprintf_internal_r+0x968>
80210728:	0039883a 	mov	fp,zero
8021072c:	dd401a04 	addi	r21,sp,104
80210730:	9006d0fa 	srli	r3,r18,3
80210734:	9808977a 	slli	r4,r19,29
80210738:	9826d0fa 	srli	r19,r19,3
8021073c:	948001cc 	andi	r18,r18,7
80210740:	90800c04 	addi	r2,r18,48
80210744:	ad7fffc4 	addi	r21,r21,-1
80210748:	20e4b03a 	or	r18,r4,r3
8021074c:	a8800005 	stb	r2,0(r21)
80210750:	94c6b03a 	or	r3,r18,r19
80210754:	183ff61e 	bne	r3,zero,80210730 <__reset+0xfa1f0730>
80210758:	a0c0004c 	andi	r3,r20,1
8021075c:	18005926 	beq	r3,zero,802108c4 <___vfiprintf_internal_r+0x87c>
80210760:	10803fcc 	andi	r2,r2,255
80210764:	1080201c 	xori	r2,r2,128
80210768:	10bfe004 	addi	r2,r2,-128
8021076c:	00c00c04 	movi	r3,48
80210770:	10c05426 	beq	r2,r3,802108c4 <___vfiprintf_internal_r+0x87c>
80210774:	da801e17 	ldw	r10,120(sp)
80210778:	a8bfffc4 	addi	r2,r21,-1
8021077c:	a8ffffc5 	stb	r3,-1(r21)
80210780:	50a7c83a 	sub	r19,r10,r2
80210784:	102b883a 	mov	r21,r2
80210788:	003f2f06 	br	80210448 <__reset+0xfa1f0448>
8021078c:	21003fcc 	andi	r4,r4,255
80210790:	2003421e 	bne	r4,zero,8021149c <___vfiprintf_internal_r+0x1454>
80210794:	00a008b4 	movhi	r2,32802
80210798:	10acc704 	addi	r2,r2,-19684
8021079c:	d8802615 	stw	r2,152(sp)
802107a0:	a080080c 	andi	r2,r20,32
802107a4:	1000aa26 	beq	r2,zero,80210a50 <___vfiprintf_internal_r+0xa08>
802107a8:	da802217 	ldw	r10,136(sp)
802107ac:	54800017 	ldw	r18,0(r10)
802107b0:	54c00117 	ldw	r19,4(r10)
802107b4:	52800204 	addi	r10,r10,8
802107b8:	da802215 	stw	r10,136(sp)
802107bc:	a080004c 	andi	r2,r20,1
802107c0:	1001d226 	beq	r2,zero,80210f0c <___vfiprintf_internal_r+0xec4>
802107c4:	94c4b03a 	or	r2,r18,r19
802107c8:	1002351e 	bne	r2,zero,802110a0 <___vfiprintf_internal_r+0x1058>
802107cc:	d8001d85 	stb	zero,118(sp)
802107d0:	48022216 	blt	r9,zero,8021105c <___vfiprintf_internal_r+0x1014>
802107d4:	00bfdfc4 	movi	r2,-129
802107d8:	a0a8703a 	and	r20,r20,r2
802107dc:	003f1506 	br	80210434 <__reset+0xfa1f0434>
802107e0:	da802217 	ldw	r10,136(sp)
802107e4:	04800044 	movi	r18,1
802107e8:	d8001d85 	stb	zero,118(sp)
802107ec:	50800017 	ldw	r2,0(r10)
802107f0:	52800104 	addi	r10,r10,4
802107f4:	da802215 	stw	r10,136(sp)
802107f8:	d8801005 	stb	r2,64(sp)
802107fc:	9027883a 	mov	r19,r18
80210800:	dd401004 	addi	r21,sp,64
80210804:	0013883a 	mov	r9,zero
80210808:	003f1706 	br	80210468 <__reset+0xfa1f0468>
8021080c:	21003fcc 	andi	r4,r4,255
80210810:	2003201e 	bne	r4,zero,80211494 <___vfiprintf_internal_r+0x144c>
80210814:	a080080c 	andi	r2,r20,32
80210818:	10004b26 	beq	r2,zero,80210948 <___vfiprintf_internal_r+0x900>
8021081c:	da802217 	ldw	r10,136(sp)
80210820:	50800117 	ldw	r2,4(r10)
80210824:	54800017 	ldw	r18,0(r10)
80210828:	52800204 	addi	r10,r10,8
8021082c:	da802215 	stw	r10,136(sp)
80210830:	1027883a 	mov	r19,r2
80210834:	10022c16 	blt	r2,zero,802110e8 <___vfiprintf_internal_r+0x10a0>
80210838:	df001d83 	ldbu	fp,118(sp)
8021083c:	48007216 	blt	r9,zero,80210a08 <___vfiprintf_internal_r+0x9c0>
80210840:	00ffdfc4 	movi	r3,-129
80210844:	94c4b03a 	or	r2,r18,r19
80210848:	a0e8703a 	and	r20,r20,r3
8021084c:	1000cc26 	beq	r2,zero,80210b80 <___vfiprintf_internal_r+0xb38>
80210850:	98021026 	beq	r19,zero,80211094 <___vfiprintf_internal_r+0x104c>
80210854:	dc402415 	stw	r17,144(sp)
80210858:	dc002515 	stw	r16,148(sp)
8021085c:	9823883a 	mov	r17,r19
80210860:	9021883a 	mov	r16,r18
80210864:	dd401a04 	addi	r21,sp,104
80210868:	4825883a 	mov	r18,r9
8021086c:	4027883a 	mov	r19,r8
80210870:	8009883a 	mov	r4,r16
80210874:	880b883a 	mov	r5,r17
80210878:	01800284 	movi	r6,10
8021087c:	000f883a 	mov	r7,zero
80210880:	02124280 	call	80212428 <__umoddi3>
80210884:	10800c04 	addi	r2,r2,48
80210888:	ad7fffc4 	addi	r21,r21,-1
8021088c:	8009883a 	mov	r4,r16
80210890:	880b883a 	mov	r5,r17
80210894:	a8800005 	stb	r2,0(r21)
80210898:	01800284 	movi	r6,10
8021089c:	000f883a 	mov	r7,zero
802108a0:	0211eb00 	call	80211eb0 <__udivdi3>
802108a4:	1021883a 	mov	r16,r2
802108a8:	10c4b03a 	or	r2,r2,r3
802108ac:	1823883a 	mov	r17,r3
802108b0:	103fef1e 	bne	r2,zero,80210870 <__reset+0xfa1f0870>
802108b4:	dc402417 	ldw	r17,144(sp)
802108b8:	dc002517 	ldw	r16,148(sp)
802108bc:	9013883a 	mov	r9,r18
802108c0:	9811883a 	mov	r8,r19
802108c4:	da801e17 	ldw	r10,120(sp)
802108c8:	5567c83a 	sub	r19,r10,r21
802108cc:	003ede06 	br	80210448 <__reset+0xfa1f0448>
802108d0:	38803fcc 	andi	r2,r7,255
802108d4:	1080201c 	xori	r2,r2,128
802108d8:	10bfe004 	addi	r2,r2,-128
802108dc:	1002371e 	bne	r2,zero,802111bc <___vfiprintf_internal_r+0x1174>
802108e0:	01000044 	movi	r4,1
802108e4:	01c00804 	movi	r7,32
802108e8:	80c00007 	ldb	r3,0(r16)
802108ec:	003e3506 	br	802101c4 <__reset+0xfa1f01c4>
802108f0:	a5000054 	ori	r20,r20,1
802108f4:	80c00007 	ldb	r3,0(r16)
802108f8:	003e3206 	br	802101c4 <__reset+0xfa1f01c4>
802108fc:	a5002014 	ori	r20,r20,128
80210900:	80c00007 	ldb	r3,0(r16)
80210904:	003e2f06 	br	802101c4 <__reset+0xfa1f01c4>
80210908:	8015883a 	mov	r10,r16
8021090c:	0023883a 	mov	r17,zero
80210910:	18bff404 	addi	r2,r3,-48
80210914:	50c00007 	ldb	r3,0(r10)
80210918:	8c4002a4 	muli	r17,r17,10
8021091c:	84000044 	addi	r16,r16,1
80210920:	8015883a 	mov	r10,r16
80210924:	1463883a 	add	r17,r2,r17
80210928:	18bff404 	addi	r2,r3,-48
8021092c:	30bff92e 	bgeu	r6,r2,80210914 <__reset+0xfa1f0914>
80210930:	003e2506 	br	802101c8 <__reset+0xfa1f01c8>
80210934:	21003fcc 	andi	r4,r4,255
80210938:	2002d41e 	bne	r4,zero,8021148c <___vfiprintf_internal_r+0x1444>
8021093c:	a5000414 	ori	r20,r20,16
80210940:	a080080c 	andi	r2,r20,32
80210944:	103fb51e 	bne	r2,zero,8021081c <__reset+0xfa1f081c>
80210948:	a080040c 	andi	r2,r20,16
8021094c:	1001f826 	beq	r2,zero,80211130 <___vfiprintf_internal_r+0x10e8>
80210950:	da802217 	ldw	r10,136(sp)
80210954:	54800017 	ldw	r18,0(r10)
80210958:	52800104 	addi	r10,r10,4
8021095c:	da802215 	stw	r10,136(sp)
80210960:	9027d7fa 	srai	r19,r18,31
80210964:	9805883a 	mov	r2,r19
80210968:	003fb206 	br	80210834 <__reset+0xfa1f0834>
8021096c:	21003fcc 	andi	r4,r4,255
80210970:	2002c41e 	bne	r4,zero,80211484 <___vfiprintf_internal_r+0x143c>
80210974:	a5000414 	ori	r20,r20,16
80210978:	a080080c 	andi	r2,r20,32
8021097c:	103f5f1e 	bne	r2,zero,802106fc <__reset+0xfa1f06fc>
80210980:	a080040c 	andi	r2,r20,16
80210984:	10020f26 	beq	r2,zero,802111c4 <___vfiprintf_internal_r+0x117c>
80210988:	da802217 	ldw	r10,136(sp)
8021098c:	d8001d85 	stb	zero,118(sp)
80210990:	0027883a 	mov	r19,zero
80210994:	50800104 	addi	r2,r10,4
80210998:	54800017 	ldw	r18,0(r10)
8021099c:	48021116 	blt	r9,zero,802111e4 <___vfiprintf_internal_r+0x119c>
802109a0:	00ffdfc4 	movi	r3,-129
802109a4:	d8802215 	stw	r2,136(sp)
802109a8:	a0e8703a 	and	r20,r20,r3
802109ac:	903f5e1e 	bne	r18,zero,80210728 <__reset+0xfa1f0728>
802109b0:	0039883a 	mov	fp,zero
802109b4:	4802a626 	beq	r9,zero,80211450 <___vfiprintf_internal_r+0x1408>
802109b8:	0025883a 	mov	r18,zero
802109bc:	0027883a 	mov	r19,zero
802109c0:	003f5a06 	br	8021072c <__reset+0xfa1f072c>
802109c4:	21003fcc 	andi	r4,r4,255
802109c8:	20029f1e 	bne	r4,zero,80211448 <___vfiprintf_internal_r+0x1400>
802109cc:	a5000414 	ori	r20,r20,16
802109d0:	a080080c 	andi	r2,r20,32
802109d4:	10005e1e 	bne	r2,zero,80210b50 <___vfiprintf_internal_r+0xb08>
802109d8:	a080040c 	andi	r2,r20,16
802109dc:	1001a21e 	bne	r2,zero,80211068 <___vfiprintf_internal_r+0x1020>
802109e0:	a080100c 	andi	r2,r20,64
802109e4:	d8001d85 	stb	zero,118(sp)
802109e8:	da802217 	ldw	r10,136(sp)
802109ec:	1002231e 	bne	r2,zero,8021127c <___vfiprintf_internal_r+0x1234>
802109f0:	50800104 	addi	r2,r10,4
802109f4:	54800017 	ldw	r18,0(r10)
802109f8:	0027883a 	mov	r19,zero
802109fc:	4801a00e 	bge	r9,zero,80211080 <___vfiprintf_internal_r+0x1038>
80210a00:	d8802215 	stw	r2,136(sp)
80210a04:	0039883a 	mov	fp,zero
80210a08:	94c4b03a 	or	r2,r18,r19
80210a0c:	103f901e 	bne	r2,zero,80210850 <__reset+0xfa1f0850>
80210a10:	00800044 	movi	r2,1
80210a14:	10803fcc 	andi	r2,r2,255
80210a18:	00c00044 	movi	r3,1
80210a1c:	10c05926 	beq	r2,r3,80210b84 <___vfiprintf_internal_r+0xb3c>
80210a20:	00c00084 	movi	r3,2
80210a24:	10ffe41e 	bne	r2,r3,802109b8 <__reset+0xfa1f09b8>
80210a28:	0025883a 	mov	r18,zero
80210a2c:	0027883a 	mov	r19,zero
80210a30:	00013d06 	br	80210f28 <___vfiprintf_internal_r+0xee0>
80210a34:	21003fcc 	andi	r4,r4,255
80210a38:	2002811e 	bne	r4,zero,80211440 <___vfiprintf_internal_r+0x13f8>
80210a3c:	00a008b4 	movhi	r2,32802
80210a40:	10acc204 	addi	r2,r2,-19704
80210a44:	d8802615 	stw	r2,152(sp)
80210a48:	a080080c 	andi	r2,r20,32
80210a4c:	103f561e 	bne	r2,zero,802107a8 <__reset+0xfa1f07a8>
80210a50:	a080040c 	andi	r2,r20,16
80210a54:	1001d126 	beq	r2,zero,8021119c <___vfiprintf_internal_r+0x1154>
80210a58:	da802217 	ldw	r10,136(sp)
80210a5c:	0027883a 	mov	r19,zero
80210a60:	54800017 	ldw	r18,0(r10)
80210a64:	52800104 	addi	r10,r10,4
80210a68:	da802215 	stw	r10,136(sp)
80210a6c:	003f5306 	br	802107bc <__reset+0xfa1f07bc>
80210a70:	da802217 	ldw	r10,136(sp)
80210a74:	d8001d85 	stb	zero,118(sp)
80210a78:	55400017 	ldw	r21,0(r10)
80210a7c:	50c00104 	addi	r3,r10,4
80210a80:	a8024226 	beq	r21,zero,8021138c <___vfiprintf_internal_r+0x1344>
80210a84:	48021816 	blt	r9,zero,802112e8 <___vfiprintf_internal_r+0x12a0>
80210a88:	480d883a 	mov	r6,r9
80210a8c:	000b883a 	mov	r5,zero
80210a90:	a809883a 	mov	r4,r21
80210a94:	d8c02a15 	stw	r3,168(sp)
80210a98:	da002b15 	stw	r8,172(sp)
80210a9c:	da402c15 	stw	r9,176(sp)
80210aa0:	020cf800 	call	8020cf80 <memchr>
80210aa4:	d8c02a17 	ldw	r3,168(sp)
80210aa8:	da002b17 	ldw	r8,172(sp)
80210aac:	da402c17 	ldw	r9,176(sp)
80210ab0:	10024826 	beq	r2,zero,802113d4 <___vfiprintf_internal_r+0x138c>
80210ab4:	1567c83a 	sub	r19,r2,r21
80210ab8:	df001d83 	ldbu	fp,118(sp)
80210abc:	d8c02215 	stw	r3,136(sp)
80210ac0:	0013883a 	mov	r9,zero
80210ac4:	003e6006 	br	80210448 <__reset+0xfa1f0448>
80210ac8:	21003fcc 	andi	r4,r4,255
80210acc:	203fc026 	beq	r4,zero,802109d0 <__reset+0xfa1f09d0>
80210ad0:	d9c01d85 	stb	r7,118(sp)
80210ad4:	003fbe06 	br	802109d0 <__reset+0xfa1f09d0>
80210ad8:	da802217 	ldw	r10,136(sp)
80210adc:	54400017 	ldw	r17,0(r10)
80210ae0:	50800104 	addi	r2,r10,4
80210ae4:	883e3b16 	blt	r17,zero,802103d4 <__reset+0xfa1f03d4>
80210ae8:	d8802215 	stw	r2,136(sp)
80210aec:	80c00007 	ldb	r3,0(r16)
80210af0:	003db406 	br	802101c4 <__reset+0xfa1f01c4>
80210af4:	01000044 	movi	r4,1
80210af8:	01c00ac4 	movi	r7,43
80210afc:	80c00007 	ldb	r3,0(r16)
80210b00:	003db006 	br	802101c4 <__reset+0xfa1f01c4>
80210b04:	80c00007 	ldb	r3,0(r16)
80210b08:	82800044 	addi	r10,r16,1
80210b0c:	1b423c26 	beq	r3,r13,80211400 <___vfiprintf_internal_r+0x13b8>
80210b10:	18bff404 	addi	r2,r3,-48
80210b14:	0013883a 	mov	r9,zero
80210b18:	30822b36 	bltu	r6,r2,802113c8 <___vfiprintf_internal_r+0x1380>
80210b1c:	50c00007 	ldb	r3,0(r10)
80210b20:	4a4002a4 	muli	r9,r9,10
80210b24:	54000044 	addi	r16,r10,1
80210b28:	8015883a 	mov	r10,r16
80210b2c:	4893883a 	add	r9,r9,r2
80210b30:	18bff404 	addi	r2,r3,-48
80210b34:	30bff92e 	bgeu	r6,r2,80210b1c <__reset+0xfa1f0b1c>
80210b38:	483da30e 	bge	r9,zero,802101c8 <__reset+0xfa1f01c8>
80210b3c:	027fffc4 	movi	r9,-1
80210b40:	003da106 	br	802101c8 <__reset+0xfa1f01c8>
80210b44:	a5001014 	ori	r20,r20,64
80210b48:	80c00007 	ldb	r3,0(r16)
80210b4c:	003d9d06 	br	802101c4 <__reset+0xfa1f01c4>
80210b50:	da802217 	ldw	r10,136(sp)
80210b54:	d8001d85 	stb	zero,118(sp)
80210b58:	50c00204 	addi	r3,r10,8
80210b5c:	54800017 	ldw	r18,0(r10)
80210b60:	54c00117 	ldw	r19,4(r10)
80210b64:	4801ca16 	blt	r9,zero,80211290 <___vfiprintf_internal_r+0x1248>
80210b68:	013fdfc4 	movi	r4,-129
80210b6c:	94c4b03a 	or	r2,r18,r19
80210b70:	d8c02215 	stw	r3,136(sp)
80210b74:	a128703a 	and	r20,r20,r4
80210b78:	0039883a 	mov	fp,zero
80210b7c:	103f341e 	bne	r2,zero,80210850 <__reset+0xfa1f0850>
80210b80:	483e2e26 	beq	r9,zero,8021043c <__reset+0xfa1f043c>
80210b84:	0025883a 	mov	r18,zero
80210b88:	94800c04 	addi	r18,r18,48
80210b8c:	dc8019c5 	stb	r18,103(sp)
80210b90:	dcc02717 	ldw	r19,156(sp)
80210b94:	dd4019c4 	addi	r21,sp,103
80210b98:	003e2b06 	br	80210448 <__reset+0xfa1f0448>
80210b9c:	21003fcc 	andi	r4,r4,255
80210ba0:	2002361e 	bne	r4,zero,8021147c <___vfiprintf_internal_r+0x1434>
80210ba4:	1801c126 	beq	r3,zero,802112ac <___vfiprintf_internal_r+0x1264>
80210ba8:	04800044 	movi	r18,1
80210bac:	d8c01005 	stb	r3,64(sp)
80210bb0:	d8001d85 	stb	zero,118(sp)
80210bb4:	9027883a 	mov	r19,r18
80210bb8:	dd401004 	addi	r21,sp,64
80210bbc:	003f1106 	br	80210804 <__reset+0xfa1f0804>
80210bc0:	d9402117 	ldw	r5,132(sp)
80210bc4:	d9002017 	ldw	r4,128(sp)
80210bc8:	d9801a04 	addi	r6,sp,104
80210bcc:	d9c02b15 	stw	r7,172(sp)
80210bd0:	dbc02a15 	stw	r15,168(sp)
80210bd4:	020ff340 	call	8020ff34 <__sprint_r.part.0>
80210bd8:	d9c02b17 	ldw	r7,172(sp)
80210bdc:	dbc02a17 	ldw	r15,168(sp)
80210be0:	10006d1e 	bne	r2,zero,80210d98 <___vfiprintf_internal_r+0xd50>
80210be4:	d9801b17 	ldw	r6,108(sp)
80210be8:	d8801c17 	ldw	r2,112(sp)
80210bec:	d811883a 	mov	r8,sp
80210bf0:	31400044 	addi	r5,r6,1
80210bf4:	003e3306 	br	802104c4 <__reset+0xfa1f04c4>
80210bf8:	d9401b17 	ldw	r5,108(sp)
80210bfc:	d8801c17 	ldw	r2,112(sp)
80210c00:	29000044 	addi	r4,r5,1
80210c04:	d8c01d87 	ldb	r3,118(sp)
80210c08:	183e4d26 	beq	r3,zero,80210540 <__reset+0xfa1f0540>
80210c0c:	00c00044 	movi	r3,1
80210c10:	d9401d84 	addi	r5,sp,118
80210c14:	10c5883a 	add	r2,r2,r3
80210c18:	41400015 	stw	r5,0(r8)
80210c1c:	40c00115 	stw	r3,4(r8)
80210c20:	d8801c15 	stw	r2,112(sp)
80210c24:	d9001b15 	stw	r4,108(sp)
80210c28:	014001c4 	movi	r5,7
80210c2c:	2900a90e 	bge	r5,r4,80210ed4 <___vfiprintf_internal_r+0xe8c>
80210c30:	1000da1e 	bne	r2,zero,80210f9c <___vfiprintf_internal_r+0xf54>
80210c34:	7000ab1e 	bne	r14,zero,80210ee4 <___vfiprintf_internal_r+0xe9c>
80210c38:	000b883a 	mov	r5,zero
80210c3c:	1809883a 	mov	r4,r3
80210c40:	d811883a 	mov	r8,sp
80210c44:	00c02004 	movi	r3,128
80210c48:	e0fe4d26 	beq	fp,r3,80210580 <__reset+0xfa1f0580>
80210c4c:	4cf9c83a 	sub	fp,r9,r19
80210c50:	073e7b0e 	bge	zero,fp,80210640 <__reset+0xfa1f0640>
80210c54:	01c00404 	movi	r7,16
80210c58:	3f01900e 	bge	r7,fp,8021129c <___vfiprintf_internal_r+0x1254>
80210c5c:	00e008b4 	movhi	r3,32802
80210c60:	18ed3704 	addi	r3,r3,-19236
80210c64:	d8c02415 	stw	r3,144(sp)
80210c68:	034001c4 	movi	r13,7
80210c6c:	00000506 	br	80210c84 <___vfiprintf_internal_r+0xc3c>
80210c70:	29000084 	addi	r4,r5,2
80210c74:	42000204 	addi	r8,r8,8
80210c78:	180b883a 	mov	r5,r3
80210c7c:	e73ffc04 	addi	fp,fp,-16
80210c80:	3f000d0e 	bge	r7,fp,80210cb8 <___vfiprintf_internal_r+0xc70>
80210c84:	10800404 	addi	r2,r2,16
80210c88:	28c00044 	addi	r3,r5,1
80210c8c:	45c00015 	stw	r23,0(r8)
80210c90:	41c00115 	stw	r7,4(r8)
80210c94:	d8801c15 	stw	r2,112(sp)
80210c98:	d8c01b15 	stw	r3,108(sp)
80210c9c:	68fff40e 	bge	r13,r3,80210c70 <__reset+0xfa1f0c70>
80210ca0:	1000101e 	bne	r2,zero,80210ce4 <___vfiprintf_internal_r+0xc9c>
80210ca4:	e73ffc04 	addi	fp,fp,-16
80210ca8:	01000044 	movi	r4,1
80210cac:	000b883a 	mov	r5,zero
80210cb0:	d811883a 	mov	r8,sp
80210cb4:	3f3ff316 	blt	r7,fp,80210c84 <__reset+0xfa1f0c84>
80210cb8:	da802417 	ldw	r10,144(sp)
80210cbc:	1705883a 	add	r2,r2,fp
80210cc0:	47000115 	stw	fp,4(r8)
80210cc4:	42800015 	stw	r10,0(r8)
80210cc8:	d8801c15 	stw	r2,112(sp)
80210ccc:	d9001b15 	stw	r4,108(sp)
80210cd0:	00c001c4 	movi	r3,7
80210cd4:	19003616 	blt	r3,r4,80210db0 <___vfiprintf_internal_r+0xd68>
80210cd8:	42000204 	addi	r8,r8,8
80210cdc:	21000044 	addi	r4,r4,1
80210ce0:	003e5706 	br	80210640 <__reset+0xfa1f0640>
80210ce4:	d9402117 	ldw	r5,132(sp)
80210ce8:	d9002017 	ldw	r4,128(sp)
80210cec:	d9801a04 	addi	r6,sp,104
80210cf0:	d9c02b15 	stw	r7,172(sp)
80210cf4:	db402a15 	stw	r13,168(sp)
80210cf8:	020ff340 	call	8020ff34 <__sprint_r.part.0>
80210cfc:	d9c02b17 	ldw	r7,172(sp)
80210d00:	db402a17 	ldw	r13,168(sp)
80210d04:	1000241e 	bne	r2,zero,80210d98 <___vfiprintf_internal_r+0xd50>
80210d08:	d9401b17 	ldw	r5,108(sp)
80210d0c:	d8801c17 	ldw	r2,112(sp)
80210d10:	d811883a 	mov	r8,sp
80210d14:	29000044 	addi	r4,r5,1
80210d18:	003fd806 	br	80210c7c <__reset+0xfa1f0c7c>
80210d1c:	d9401b17 	ldw	r5,108(sp)
80210d20:	00e008b4 	movhi	r3,32802
80210d24:	18ed3b04 	addi	r3,r3,-19220
80210d28:	d8c02415 	stw	r3,144(sp)
80210d2c:	29400044 	addi	r5,r5,1
80210d30:	d8c02417 	ldw	r3,144(sp)
80210d34:	14c5883a 	add	r2,r2,r19
80210d38:	44c00115 	stw	r19,4(r8)
80210d3c:	40c00015 	stw	r3,0(r8)
80210d40:	d8801c15 	stw	r2,112(sp)
80210d44:	d9401b15 	stw	r5,108(sp)
80210d48:	00c001c4 	movi	r3,7
80210d4c:	1940070e 	bge	r3,r5,80210d6c <___vfiprintf_internal_r+0xd24>
80210d50:	103e4826 	beq	r2,zero,80210674 <__reset+0xfa1f0674>
80210d54:	d9402117 	ldw	r5,132(sp)
80210d58:	d9002017 	ldw	r4,128(sp)
80210d5c:	d9801a04 	addi	r6,sp,104
80210d60:	020ff340 	call	8020ff34 <__sprint_r.part.0>
80210d64:	10000c1e 	bne	r2,zero,80210d98 <___vfiprintf_internal_r+0xd50>
80210d68:	d8801c17 	ldw	r2,112(sp)
80210d6c:	8c80010e 	bge	r17,r18,80210d74 <___vfiprintf_internal_r+0xd2c>
80210d70:	9023883a 	mov	r17,r18
80210d74:	da802317 	ldw	r10,140(sp)
80210d78:	5455883a 	add	r10,r10,r17
80210d7c:	da802315 	stw	r10,140(sp)
80210d80:	103e4126 	beq	r2,zero,80210688 <__reset+0xfa1f0688>
80210d84:	d9402117 	ldw	r5,132(sp)
80210d88:	d9002017 	ldw	r4,128(sp)
80210d8c:	d9801a04 	addi	r6,sp,104
80210d90:	020ff340 	call	8020ff34 <__sprint_r.part.0>
80210d94:	103e3c26 	beq	r2,zero,80210688 <__reset+0xfa1f0688>
80210d98:	dd002117 	ldw	r20,132(sp)
80210d9c:	a080030b 	ldhu	r2,12(r20)
80210da0:	1080100c 	andi	r2,r2,64
80210da4:	1001231e 	bne	r2,zero,80211234 <___vfiprintf_internal_r+0x11ec>
80210da8:	d8802317 	ldw	r2,140(sp)
80210dac:	003d7b06 	br	8021039c <__reset+0xfa1f039c>
80210db0:	1000991e 	bne	r2,zero,80211018 <___vfiprintf_internal_r+0xfd0>
80210db4:	00c00044 	movi	r3,1
80210db8:	9805883a 	mov	r2,r19
80210dbc:	dd400015 	stw	r21,0(sp)
80210dc0:	dcc00115 	stw	r19,4(sp)
80210dc4:	dcc01c15 	stw	r19,112(sp)
80210dc8:	d8c01b15 	stw	r3,108(sp)
80210dcc:	d811883a 	mov	r8,sp
80210dd0:	42000204 	addi	r8,r8,8
80210dd4:	a2c0010c 	andi	r11,r20,4
80210dd8:	583fe426 	beq	r11,zero,80210d6c <__reset+0xfa1f0d6c>
80210ddc:	8ca7c83a 	sub	r19,r17,r18
80210de0:	04ffe20e 	bge	zero,r19,80210d6c <__reset+0xfa1f0d6c>
80210de4:	01c00404 	movi	r7,16
80210de8:	3cffcc0e 	bge	r7,r19,80210d1c <__reset+0xfa1f0d1c>
80210dec:	02a008b4 	movhi	r10,32802
80210df0:	52ad3b04 	addi	r10,r10,-19220
80210df4:	d9001b17 	ldw	r4,108(sp)
80210df8:	da802415 	stw	r10,144(sp)
80210dfc:	382b883a 	mov	r21,r7
80210e00:	050001c4 	movi	r20,7
80210e04:	df002017 	ldw	fp,128(sp)
80210e08:	00000506 	br	80210e20 <___vfiprintf_internal_r+0xdd8>
80210e0c:	21400084 	addi	r5,r4,2
80210e10:	42000204 	addi	r8,r8,8
80210e14:	1809883a 	mov	r4,r3
80210e18:	9cfffc04 	addi	r19,r19,-16
80210e1c:	acffc40e 	bge	r21,r19,80210d30 <__reset+0xfa1f0d30>
80210e20:	10800404 	addi	r2,r2,16
80210e24:	20c00044 	addi	r3,r4,1
80210e28:	45800015 	stw	r22,0(r8)
80210e2c:	45400115 	stw	r21,4(r8)
80210e30:	d8801c15 	stw	r2,112(sp)
80210e34:	d8c01b15 	stw	r3,108(sp)
80210e38:	a0fff40e 	bge	r20,r3,80210e0c <__reset+0xfa1f0e0c>
80210e3c:	1000041e 	bne	r2,zero,80210e50 <___vfiprintf_internal_r+0xe08>
80210e40:	01400044 	movi	r5,1
80210e44:	0009883a 	mov	r4,zero
80210e48:	d811883a 	mov	r8,sp
80210e4c:	003ff206 	br	80210e18 <__reset+0xfa1f0e18>
80210e50:	d9402117 	ldw	r5,132(sp)
80210e54:	d9801a04 	addi	r6,sp,104
80210e58:	e009883a 	mov	r4,fp
80210e5c:	020ff340 	call	8020ff34 <__sprint_r.part.0>
80210e60:	103fcd1e 	bne	r2,zero,80210d98 <__reset+0xfa1f0d98>
80210e64:	d9001b17 	ldw	r4,108(sp)
80210e68:	d8801c17 	ldw	r2,112(sp)
80210e6c:	d811883a 	mov	r8,sp
80210e70:	21400044 	addi	r5,r4,1
80210e74:	003fe806 	br	80210e18 <__reset+0xfa1f0e18>
80210e78:	d9402117 	ldw	r5,132(sp)
80210e7c:	d9002017 	ldw	r4,128(sp)
80210e80:	d9801a04 	addi	r6,sp,104
80210e84:	d9c02b15 	stw	r7,172(sp)
80210e88:	db402a15 	stw	r13,168(sp)
80210e8c:	020ff340 	call	8020ff34 <__sprint_r.part.0>
80210e90:	d9c02b17 	ldw	r7,172(sp)
80210e94:	db402a17 	ldw	r13,168(sp)
80210e98:	103fbf1e 	bne	r2,zero,80210d98 <__reset+0xfa1f0d98>
80210e9c:	d9401b17 	ldw	r5,108(sp)
80210ea0:	d8801c17 	ldw	r2,112(sp)
80210ea4:	d811883a 	mov	r8,sp
80210ea8:	29800044 	addi	r6,r5,1
80210eac:	003dc406 	br	802105c0 <__reset+0xfa1f05c0>
80210eb0:	1000d21e 	bne	r2,zero,802111fc <___vfiprintf_internal_r+0x11b4>
80210eb4:	d8c01d87 	ldb	r3,118(sp)
80210eb8:	18009526 	beq	r3,zero,80211110 <___vfiprintf_internal_r+0x10c8>
80210ebc:	00800044 	movi	r2,1
80210ec0:	d8c01d84 	addi	r3,sp,118
80210ec4:	1009883a 	mov	r4,r2
80210ec8:	d8c00015 	stw	r3,0(sp)
80210ecc:	d8800115 	stw	r2,4(sp)
80210ed0:	d811883a 	mov	r8,sp
80210ed4:	200b883a 	mov	r5,r4
80210ed8:	42000204 	addi	r8,r8,8
80210edc:	21000044 	addi	r4,r4,1
80210ee0:	003d9706 	br	80210540 <__reset+0xfa1f0540>
80210ee4:	d9001d04 	addi	r4,sp,116
80210ee8:	00800084 	movi	r2,2
80210eec:	d9000015 	stw	r4,0(sp)
80210ef0:	d8800115 	stw	r2,4(sp)
80210ef4:	1809883a 	mov	r4,r3
80210ef8:	d811883a 	mov	r8,sp
80210efc:	200b883a 	mov	r5,r4
80210f00:	42000204 	addi	r8,r8,8
80210f04:	21000044 	addi	r4,r4,1
80210f08:	003f4e06 	br	80210c44 <__reset+0xfa1f0c44>
80210f0c:	d8001d85 	stb	zero,118(sp)
80210f10:	48005016 	blt	r9,zero,80211054 <___vfiprintf_internal_r+0x100c>
80210f14:	00ffdfc4 	movi	r3,-129
80210f18:	94c4b03a 	or	r2,r18,r19
80210f1c:	a0e8703a 	and	r20,r20,r3
80210f20:	103d4426 	beq	r2,zero,80210434 <__reset+0xfa1f0434>
80210f24:	0039883a 	mov	fp,zero
80210f28:	d9002617 	ldw	r4,152(sp)
80210f2c:	dd401a04 	addi	r21,sp,104
80210f30:	908003cc 	andi	r2,r18,15
80210f34:	9806973a 	slli	r3,r19,28
80210f38:	2085883a 	add	r2,r4,r2
80210f3c:	9024d13a 	srli	r18,r18,4
80210f40:	10800003 	ldbu	r2,0(r2)
80210f44:	9826d13a 	srli	r19,r19,4
80210f48:	ad7fffc4 	addi	r21,r21,-1
80210f4c:	1ca4b03a 	or	r18,r3,r18
80210f50:	a8800005 	stb	r2,0(r21)
80210f54:	94c4b03a 	or	r2,r18,r19
80210f58:	103ff51e 	bne	r2,zero,80210f30 <__reset+0xfa1f0f30>
80210f5c:	003e5906 	br	802108c4 <__reset+0xfa1f08c4>
80210f60:	d9402117 	ldw	r5,132(sp)
80210f64:	d9002017 	ldw	r4,128(sp)
80210f68:	d9801a04 	addi	r6,sp,104
80210f6c:	020ff340 	call	8020ff34 <__sprint_r.part.0>
80210f70:	103f891e 	bne	r2,zero,80210d98 <__reset+0xfa1f0d98>
80210f74:	d8801c17 	ldw	r2,112(sp)
80210f78:	d811883a 	mov	r8,sp
80210f7c:	003f9506 	br	80210dd4 <__reset+0xfa1f0dd4>
80210f80:	d9402117 	ldw	r5,132(sp)
80210f84:	d9002017 	ldw	r4,128(sp)
80210f88:	d9801a04 	addi	r6,sp,104
80210f8c:	020ff340 	call	8020ff34 <__sprint_r.part.0>
80210f90:	103f811e 	bne	r2,zero,80210d98 <__reset+0xfa1f0d98>
80210f94:	d811883a 	mov	r8,sp
80210f98:	003ced06 	br	80210350 <__reset+0xfa1f0350>
80210f9c:	d9402117 	ldw	r5,132(sp)
80210fa0:	d9002017 	ldw	r4,128(sp)
80210fa4:	d9801a04 	addi	r6,sp,104
80210fa8:	da402c15 	stw	r9,176(sp)
80210fac:	db802a15 	stw	r14,168(sp)
80210fb0:	020ff340 	call	8020ff34 <__sprint_r.part.0>
80210fb4:	da402c17 	ldw	r9,176(sp)
80210fb8:	db802a17 	ldw	r14,168(sp)
80210fbc:	103f761e 	bne	r2,zero,80210d98 <__reset+0xfa1f0d98>
80210fc0:	d9401b17 	ldw	r5,108(sp)
80210fc4:	d8801c17 	ldw	r2,112(sp)
80210fc8:	d811883a 	mov	r8,sp
80210fcc:	29000044 	addi	r4,r5,1
80210fd0:	003d5b06 	br	80210540 <__reset+0xfa1f0540>
80210fd4:	d9402117 	ldw	r5,132(sp)
80210fd8:	d9002017 	ldw	r4,128(sp)
80210fdc:	d9801a04 	addi	r6,sp,104
80210fe0:	da402c15 	stw	r9,176(sp)
80210fe4:	020ff340 	call	8020ff34 <__sprint_r.part.0>
80210fe8:	da402c17 	ldw	r9,176(sp)
80210fec:	103f6a1e 	bne	r2,zero,80210d98 <__reset+0xfa1f0d98>
80210ff0:	d9401b17 	ldw	r5,108(sp)
80210ff4:	d8801c17 	ldw	r2,112(sp)
80210ff8:	d811883a 	mov	r8,sp
80210ffc:	29000044 	addi	r4,r5,1
80211000:	003f1006 	br	80210c44 <__reset+0xfa1f0c44>
80211004:	1000c31e 	bne	r2,zero,80211314 <___vfiprintf_internal_r+0x12cc>
80211008:	01000044 	movi	r4,1
8021100c:	000b883a 	mov	r5,zero
80211010:	d811883a 	mov	r8,sp
80211014:	003f0d06 	br	80210c4c <__reset+0xfa1f0c4c>
80211018:	d9402117 	ldw	r5,132(sp)
8021101c:	d9002017 	ldw	r4,128(sp)
80211020:	d9801a04 	addi	r6,sp,104
80211024:	020ff340 	call	8020ff34 <__sprint_r.part.0>
80211028:	103f5b1e 	bne	r2,zero,80210d98 <__reset+0xfa1f0d98>
8021102c:	d9001b17 	ldw	r4,108(sp)
80211030:	d8801c17 	ldw	r2,112(sp)
80211034:	d811883a 	mov	r8,sp
80211038:	21000044 	addi	r4,r4,1
8021103c:	003d8006 	br	80210640 <__reset+0xfa1f0640>
80211040:	012008b4 	movhi	r4,32802
80211044:	212cc704 	addi	r4,r4,-19684
80211048:	d9002615 	stw	r4,152(sp)
8021104c:	d8c02215 	stw	r3,136(sp)
80211050:	1029883a 	mov	r20,r2
80211054:	94c4b03a 	or	r2,r18,r19
80211058:	103fb21e 	bne	r2,zero,80210f24 <__reset+0xfa1f0f24>
8021105c:	0039883a 	mov	fp,zero
80211060:	00800084 	movi	r2,2
80211064:	003e6b06 	br	80210a14 <__reset+0xfa1f0a14>
80211068:	da802217 	ldw	r10,136(sp)
8021106c:	d8001d85 	stb	zero,118(sp)
80211070:	0027883a 	mov	r19,zero
80211074:	50800104 	addi	r2,r10,4
80211078:	54800017 	ldw	r18,0(r10)
8021107c:	483e6016 	blt	r9,zero,80210a00 <__reset+0xfa1f0a00>
80211080:	00ffdfc4 	movi	r3,-129
80211084:	d8802215 	stw	r2,136(sp)
80211088:	a0e8703a 	and	r20,r20,r3
8021108c:	0039883a 	mov	fp,zero
80211090:	903ebb26 	beq	r18,zero,80210b80 <__reset+0xfa1f0b80>
80211094:	00800244 	movi	r2,9
80211098:	14bdee36 	bltu	r2,r18,80210854 <__reset+0xfa1f0854>
8021109c:	003eba06 	br	80210b88 <__reset+0xfa1f0b88>
802110a0:	00800c04 	movi	r2,48
802110a4:	d8c01d45 	stb	r3,117(sp)
802110a8:	d8801d05 	stb	r2,116(sp)
802110ac:	d8001d85 	stb	zero,118(sp)
802110b0:	a0c00094 	ori	r3,r20,2
802110b4:	4800a916 	blt	r9,zero,8021135c <___vfiprintf_internal_r+0x1314>
802110b8:	00bfdfc4 	movi	r2,-129
802110bc:	a096703a 	and	r11,r20,r2
802110c0:	5d000094 	ori	r20,r11,2
802110c4:	0039883a 	mov	fp,zero
802110c8:	003f9706 	br	80210f28 <__reset+0xfa1f0f28>
802110cc:	8025883a 	mov	r18,r16
802110d0:	003c2e06 	br	8021018c <__reset+0xfa1f018c>
802110d4:	00a008b4 	movhi	r2,32802
802110d8:	10acc704 	addi	r2,r2,-19684
802110dc:	0039883a 	mov	fp,zero
802110e0:	d8802615 	stw	r2,152(sp)
802110e4:	003f9006 	br	80210f28 <__reset+0xfa1f0f28>
802110e8:	04a5c83a 	sub	r18,zero,r18
802110ec:	07000b44 	movi	fp,45
802110f0:	9004c03a 	cmpne	r2,r18,zero
802110f4:	04e7c83a 	sub	r19,zero,r19
802110f8:	df001d85 	stb	fp,118(sp)
802110fc:	98a7c83a 	sub	r19,r19,r2
80211100:	48009f16 	blt	r9,zero,80211380 <___vfiprintf_internal_r+0x1338>
80211104:	00bfdfc4 	movi	r2,-129
80211108:	a0a8703a 	and	r20,r20,r2
8021110c:	003dd006 	br	80210850 <__reset+0xfa1f0850>
80211110:	70004c26 	beq	r14,zero,80211244 <___vfiprintf_internal_r+0x11fc>
80211114:	00800084 	movi	r2,2
80211118:	d8c01d04 	addi	r3,sp,116
8021111c:	d8c00015 	stw	r3,0(sp)
80211120:	d8800115 	stw	r2,4(sp)
80211124:	01000044 	movi	r4,1
80211128:	d811883a 	mov	r8,sp
8021112c:	003f7306 	br	80210efc <__reset+0xfa1f0efc>
80211130:	a080100c 	andi	r2,r20,64
80211134:	da802217 	ldw	r10,136(sp)
80211138:	103e0626 	beq	r2,zero,80210954 <__reset+0xfa1f0954>
8021113c:	5480000f 	ldh	r18,0(r10)
80211140:	52800104 	addi	r10,r10,4
80211144:	da802215 	stw	r10,136(sp)
80211148:	9027d7fa 	srai	r19,r18,31
8021114c:	9805883a 	mov	r2,r19
80211150:	003db806 	br	80210834 <__reset+0xfa1f0834>
80211154:	a080040c 	andi	r2,r20,16
80211158:	1000091e 	bne	r2,zero,80211180 <___vfiprintf_internal_r+0x1138>
8021115c:	a2c0100c 	andi	r11,r20,64
80211160:	58000726 	beq	r11,zero,80211180 <___vfiprintf_internal_r+0x1138>
80211164:	da802217 	ldw	r10,136(sp)
80211168:	50800017 	ldw	r2,0(r10)
8021116c:	52800104 	addi	r10,r10,4
80211170:	da802215 	stw	r10,136(sp)
80211174:	da802317 	ldw	r10,140(sp)
80211178:	1280000d 	sth	r10,0(r2)
8021117c:	003be706 	br	8021011c <__reset+0xfa1f011c>
80211180:	da802217 	ldw	r10,136(sp)
80211184:	50800017 	ldw	r2,0(r10)
80211188:	52800104 	addi	r10,r10,4
8021118c:	da802215 	stw	r10,136(sp)
80211190:	da802317 	ldw	r10,140(sp)
80211194:	12800015 	stw	r10,0(r2)
80211198:	003be006 	br	8021011c <__reset+0xfa1f011c>
8021119c:	a080100c 	andi	r2,r20,64
802111a0:	da802217 	ldw	r10,136(sp)
802111a4:	10003026 	beq	r2,zero,80211268 <___vfiprintf_internal_r+0x1220>
802111a8:	5480000b 	ldhu	r18,0(r10)
802111ac:	52800104 	addi	r10,r10,4
802111b0:	0027883a 	mov	r19,zero
802111b4:	da802215 	stw	r10,136(sp)
802111b8:	003d8006 	br	802107bc <__reset+0xfa1f07bc>
802111bc:	80c00007 	ldb	r3,0(r16)
802111c0:	003c0006 	br	802101c4 <__reset+0xfa1f01c4>
802111c4:	a080100c 	andi	r2,r20,64
802111c8:	d8001d85 	stb	zero,118(sp)
802111cc:	da802217 	ldw	r10,136(sp)
802111d0:	1000201e 	bne	r2,zero,80211254 <___vfiprintf_internal_r+0x120c>
802111d4:	50800104 	addi	r2,r10,4
802111d8:	54800017 	ldw	r18,0(r10)
802111dc:	0027883a 	mov	r19,zero
802111e0:	483def0e 	bge	r9,zero,802109a0 <__reset+0xfa1f09a0>
802111e4:	94c6b03a 	or	r3,r18,r19
802111e8:	d8802215 	stw	r2,136(sp)
802111ec:	183d4e1e 	bne	r3,zero,80210728 <__reset+0xfa1f0728>
802111f0:	0039883a 	mov	fp,zero
802111f4:	0005883a 	mov	r2,zero
802111f8:	003e0606 	br	80210a14 <__reset+0xfa1f0a14>
802111fc:	d9402117 	ldw	r5,132(sp)
80211200:	d9002017 	ldw	r4,128(sp)
80211204:	d9801a04 	addi	r6,sp,104
80211208:	da402c15 	stw	r9,176(sp)
8021120c:	db802a15 	stw	r14,168(sp)
80211210:	020ff340 	call	8020ff34 <__sprint_r.part.0>
80211214:	da402c17 	ldw	r9,176(sp)
80211218:	db802a17 	ldw	r14,168(sp)
8021121c:	103ede1e 	bne	r2,zero,80210d98 <__reset+0xfa1f0d98>
80211220:	d9401b17 	ldw	r5,108(sp)
80211224:	d8801c17 	ldw	r2,112(sp)
80211228:	d811883a 	mov	r8,sp
8021122c:	29000044 	addi	r4,r5,1
80211230:	003e7406 	br	80210c04 <__reset+0xfa1f0c04>
80211234:	00bfffc4 	movi	r2,-1
80211238:	003c5806 	br	8021039c <__reset+0xfa1f039c>
8021123c:	d811883a 	mov	r8,sp
80211240:	003ee806 	br	80210de4 <__reset+0xfa1f0de4>
80211244:	000b883a 	mov	r5,zero
80211248:	01000044 	movi	r4,1
8021124c:	d811883a 	mov	r8,sp
80211250:	003e7c06 	br	80210c44 <__reset+0xfa1f0c44>
80211254:	50800104 	addi	r2,r10,4
80211258:	5480000b 	ldhu	r18,0(r10)
8021125c:	0027883a 	mov	r19,zero
80211260:	483dcf0e 	bge	r9,zero,802109a0 <__reset+0xfa1f09a0>
80211264:	003fdf06 	br	802111e4 <__reset+0xfa1f11e4>
80211268:	54800017 	ldw	r18,0(r10)
8021126c:	52800104 	addi	r10,r10,4
80211270:	0027883a 	mov	r19,zero
80211274:	da802215 	stw	r10,136(sp)
80211278:	003d5006 	br	802107bc <__reset+0xfa1f07bc>
8021127c:	50800104 	addi	r2,r10,4
80211280:	5480000b 	ldhu	r18,0(r10)
80211284:	0027883a 	mov	r19,zero
80211288:	483f7d0e 	bge	r9,zero,80211080 <__reset+0xfa1f1080>
8021128c:	003ddc06 	br	80210a00 <__reset+0xfa1f0a00>
80211290:	d8c02215 	stw	r3,136(sp)
80211294:	0039883a 	mov	fp,zero
80211298:	003ddb06 	br	80210a08 <__reset+0xfa1f0a08>
8021129c:	02a008b4 	movhi	r10,32802
802112a0:	52ad3704 	addi	r10,r10,-19236
802112a4:	da802415 	stw	r10,144(sp)
802112a8:	003e8306 	br	80210cb8 <__reset+0xfa1f0cb8>
802112ac:	d8801c17 	ldw	r2,112(sp)
802112b0:	dd002117 	ldw	r20,132(sp)
802112b4:	103eb926 	beq	r2,zero,80210d9c <__reset+0xfa1f0d9c>
802112b8:	d9002017 	ldw	r4,128(sp)
802112bc:	d9801a04 	addi	r6,sp,104
802112c0:	a00b883a 	mov	r5,r20
802112c4:	020ff340 	call	8020ff34 <__sprint_r.part.0>
802112c8:	003eb406 	br	80210d9c <__reset+0xfa1f0d9c>
802112cc:	80c00043 	ldbu	r3,1(r16)
802112d0:	a5000814 	ori	r20,r20,32
802112d4:	84000044 	addi	r16,r16,1
802112d8:	18c03fcc 	andi	r3,r3,255
802112dc:	18c0201c 	xori	r3,r3,128
802112e0:	18ffe004 	addi	r3,r3,-128
802112e4:	003bb706 	br	802101c4 <__reset+0xfa1f01c4>
802112e8:	a809883a 	mov	r4,r21
802112ec:	d8c02a15 	stw	r3,168(sp)
802112f0:	da002b15 	stw	r8,172(sp)
802112f4:	02055000 	call	80205500 <strlen>
802112f8:	d8c02a17 	ldw	r3,168(sp)
802112fc:	1027883a 	mov	r19,r2
80211300:	df001d83 	ldbu	fp,118(sp)
80211304:	d8c02215 	stw	r3,136(sp)
80211308:	0013883a 	mov	r9,zero
8021130c:	da002b17 	ldw	r8,172(sp)
80211310:	003c4d06 	br	80210448 <__reset+0xfa1f0448>
80211314:	d9402117 	ldw	r5,132(sp)
80211318:	d9002017 	ldw	r4,128(sp)
8021131c:	d9801a04 	addi	r6,sp,104
80211320:	da402c15 	stw	r9,176(sp)
80211324:	020ff340 	call	8020ff34 <__sprint_r.part.0>
80211328:	da402c17 	ldw	r9,176(sp)
8021132c:	103e9a1e 	bne	r2,zero,80210d98 <__reset+0xfa1f0d98>
80211330:	d9401b17 	ldw	r5,108(sp)
80211334:	d8801c17 	ldw	r2,112(sp)
80211338:	d811883a 	mov	r8,sp
8021133c:	29000044 	addi	r4,r5,1
80211340:	003e4206 	br	80210c4c <__reset+0xfa1f0c4c>
80211344:	d9401b17 	ldw	r5,108(sp)
80211348:	012008b4 	movhi	r4,32802
8021134c:	212d3b04 	addi	r4,r4,-19220
80211350:	d9002415 	stw	r4,144(sp)
80211354:	29400044 	addi	r5,r5,1
80211358:	003c6d06 	br	80210510 <__reset+0xfa1f0510>
8021135c:	0039883a 	mov	fp,zero
80211360:	00800084 	movi	r2,2
80211364:	10803fcc 	andi	r2,r2,255
80211368:	01000044 	movi	r4,1
8021136c:	11001e26 	beq	r2,r4,802113e8 <___vfiprintf_internal_r+0x13a0>
80211370:	01000084 	movi	r4,2
80211374:	11001e1e 	bne	r2,r4,802113f0 <___vfiprintf_internal_r+0x13a8>
80211378:	1829883a 	mov	r20,r3
8021137c:	003eea06 	br	80210f28 <__reset+0xfa1f0f28>
80211380:	a007883a 	mov	r3,r20
80211384:	00800044 	movi	r2,1
80211388:	003ff606 	br	80211364 <__reset+0xfa1f1364>
8021138c:	00800184 	movi	r2,6
80211390:	1240012e 	bgeu	r2,r9,80211398 <___vfiprintf_internal_r+0x1350>
80211394:	1013883a 	mov	r9,r2
80211398:	4827883a 	mov	r19,r9
8021139c:	4825883a 	mov	r18,r9
802113a0:	48001516 	blt	r9,zero,802113f8 <___vfiprintf_internal_r+0x13b0>
802113a4:	056008b4 	movhi	r21,32802
802113a8:	d8c02215 	stw	r3,136(sp)
802113ac:	ad6ccc04 	addi	r21,r21,-19664
802113b0:	003d1406 	br	80210804 <__reset+0xfa1f0804>
802113b4:	02a008b4 	movhi	r10,32802
802113b8:	52ad3704 	addi	r10,r10,-19236
802113bc:	da802415 	stw	r10,144(sp)
802113c0:	200d883a 	mov	r6,r4
802113c4:	003c9106 	br	8021060c <__reset+0xfa1f060c>
802113c8:	5021883a 	mov	r16,r10
802113cc:	0013883a 	mov	r9,zero
802113d0:	003b7d06 	br	802101c8 <__reset+0xfa1f01c8>
802113d4:	4827883a 	mov	r19,r9
802113d8:	df001d83 	ldbu	fp,118(sp)
802113dc:	d8c02215 	stw	r3,136(sp)
802113e0:	0013883a 	mov	r9,zero
802113e4:	003c1806 	br	80210448 <__reset+0xfa1f0448>
802113e8:	1829883a 	mov	r20,r3
802113ec:	003d1806 	br	80210850 <__reset+0xfa1f0850>
802113f0:	1829883a 	mov	r20,r3
802113f4:	003ccd06 	br	8021072c <__reset+0xfa1f072c>
802113f8:	0025883a 	mov	r18,zero
802113fc:	003fe906 	br	802113a4 <__reset+0xfa1f13a4>
80211400:	d8802217 	ldw	r2,136(sp)
80211404:	80c00043 	ldbu	r3,1(r16)
80211408:	5021883a 	mov	r16,r10
8021140c:	12400017 	ldw	r9,0(r2)
80211410:	10800104 	addi	r2,r2,4
80211414:	d8802215 	stw	r2,136(sp)
80211418:	483faf0e 	bge	r9,zero,802112d8 <__reset+0xfa1f12d8>
8021141c:	18c03fcc 	andi	r3,r3,255
80211420:	18c0201c 	xori	r3,r3,128
80211424:	027fffc4 	movi	r9,-1
80211428:	18ffe004 	addi	r3,r3,-128
8021142c:	003b6506 	br	802101c4 <__reset+0xfa1f01c4>
80211430:	d9c01d85 	stb	r7,118(sp)
80211434:	003ca006 	br	802106b8 <__reset+0xfa1f06b8>
80211438:	d9c01d85 	stb	r7,118(sp)
8021143c:	003cad06 	br	802106f4 <__reset+0xfa1f06f4>
80211440:	d9c01d85 	stb	r7,118(sp)
80211444:	003d7d06 	br	80210a3c <__reset+0xfa1f0a3c>
80211448:	d9c01d85 	stb	r7,118(sp)
8021144c:	003d5f06 	br	802109cc <__reset+0xfa1f09cc>
80211450:	a080004c 	andi	r2,r20,1
80211454:	0039883a 	mov	fp,zero
80211458:	10000526 	beq	r2,zero,80211470 <___vfiprintf_internal_r+0x1428>
8021145c:	00800c04 	movi	r2,48
80211460:	d88019c5 	stb	r2,103(sp)
80211464:	dcc02717 	ldw	r19,156(sp)
80211468:	dd4019c4 	addi	r21,sp,103
8021146c:	003bf606 	br	80210448 <__reset+0xfa1f0448>
80211470:	0027883a 	mov	r19,zero
80211474:	dd401a04 	addi	r21,sp,104
80211478:	003bf306 	br	80210448 <__reset+0xfa1f0448>
8021147c:	d9c01d85 	stb	r7,118(sp)
80211480:	003dc806 	br	80210ba4 <__reset+0xfa1f0ba4>
80211484:	d9c01d85 	stb	r7,118(sp)
80211488:	003d3a06 	br	80210974 <__reset+0xfa1f0974>
8021148c:	d9c01d85 	stb	r7,118(sp)
80211490:	003d2a06 	br	8021093c <__reset+0xfa1f093c>
80211494:	d9c01d85 	stb	r7,118(sp)
80211498:	003cde06 	br	80210814 <__reset+0xfa1f0814>
8021149c:	d9c01d85 	stb	r7,118(sp)
802114a0:	003cbc06 	br	80210794 <__reset+0xfa1f0794>

802114a4 <__vfiprintf_internal>:
802114a4:	00a008b4 	movhi	r2,32802
802114a8:	10b50504 	addi	r2,r2,-11244
802114ac:	300f883a 	mov	r7,r6
802114b0:	280d883a 	mov	r6,r5
802114b4:	200b883a 	mov	r5,r4
802114b8:	11000017 	ldw	r4,0(r2)
802114bc:	02100481 	jmpi	80210048 <___vfiprintf_internal_r>

802114c0 <__sbprintf>:
802114c0:	2880030b 	ldhu	r2,12(r5)
802114c4:	2ac01917 	ldw	r11,100(r5)
802114c8:	2a80038b 	ldhu	r10,14(r5)
802114cc:	2a400717 	ldw	r9,28(r5)
802114d0:	2a000917 	ldw	r8,36(r5)
802114d4:	defee204 	addi	sp,sp,-1144
802114d8:	00c10004 	movi	r3,1024
802114dc:	dc011a15 	stw	r16,1128(sp)
802114e0:	10bfff4c 	andi	r2,r2,65533
802114e4:	2821883a 	mov	r16,r5
802114e8:	d8cb883a 	add	r5,sp,r3
802114ec:	dc811c15 	stw	r18,1136(sp)
802114f0:	dc411b15 	stw	r17,1132(sp)
802114f4:	dfc11d15 	stw	ra,1140(sp)
802114f8:	2025883a 	mov	r18,r4
802114fc:	d881030d 	sth	r2,1036(sp)
80211500:	dac11915 	stw	r11,1124(sp)
80211504:	da81038d 	sth	r10,1038(sp)
80211508:	da410715 	stw	r9,1052(sp)
8021150c:	da010915 	stw	r8,1060(sp)
80211510:	dec10015 	stw	sp,1024(sp)
80211514:	dec10415 	stw	sp,1040(sp)
80211518:	d8c10215 	stw	r3,1032(sp)
8021151c:	d8c10515 	stw	r3,1044(sp)
80211520:	d8010615 	stw	zero,1048(sp)
80211524:	02100480 	call	80210048 <___vfiprintf_internal_r>
80211528:	1023883a 	mov	r17,r2
8021152c:	10000416 	blt	r2,zero,80211540 <__sbprintf+0x80>
80211530:	d9410004 	addi	r5,sp,1024
80211534:	9009883a 	mov	r4,r18
80211538:	020b6380 	call	8020b638 <_fflush_r>
8021153c:	10000d1e 	bne	r2,zero,80211574 <__sbprintf+0xb4>
80211540:	d881030b 	ldhu	r2,1036(sp)
80211544:	1080100c 	andi	r2,r2,64
80211548:	10000326 	beq	r2,zero,80211558 <__sbprintf+0x98>
8021154c:	8080030b 	ldhu	r2,12(r16)
80211550:	10801014 	ori	r2,r2,64
80211554:	8080030d 	sth	r2,12(r16)
80211558:	8805883a 	mov	r2,r17
8021155c:	dfc11d17 	ldw	ra,1140(sp)
80211560:	dc811c17 	ldw	r18,1136(sp)
80211564:	dc411b17 	ldw	r17,1132(sp)
80211568:	dc011a17 	ldw	r16,1128(sp)
8021156c:	dec11e04 	addi	sp,sp,1144
80211570:	f800283a 	ret
80211574:	047fffc4 	movi	r17,-1
80211578:	003ff106 	br	80211540 <__reset+0xfa1f1540>

8021157c <_write_r>:
8021157c:	defffd04 	addi	sp,sp,-12
80211580:	2805883a 	mov	r2,r5
80211584:	dc000015 	stw	r16,0(sp)
80211588:	042008b4 	movhi	r16,32802
8021158c:	dc400115 	stw	r17,4(sp)
80211590:	300b883a 	mov	r5,r6
80211594:	84352304 	addi	r16,r16,-11124
80211598:	2023883a 	mov	r17,r4
8021159c:	380d883a 	mov	r6,r7
802115a0:	1009883a 	mov	r4,r2
802115a4:	dfc00215 	stw	ra,8(sp)
802115a8:	80000015 	stw	zero,0(r16)
802115ac:	0215b940 	call	80215b94 <write>
802115b0:	00ffffc4 	movi	r3,-1
802115b4:	10c00526 	beq	r2,r3,802115cc <_write_r+0x50>
802115b8:	dfc00217 	ldw	ra,8(sp)
802115bc:	dc400117 	ldw	r17,4(sp)
802115c0:	dc000017 	ldw	r16,0(sp)
802115c4:	dec00304 	addi	sp,sp,12
802115c8:	f800283a 	ret
802115cc:	80c00017 	ldw	r3,0(r16)
802115d0:	183ff926 	beq	r3,zero,802115b8 <__reset+0xfa1f15b8>
802115d4:	88c00015 	stw	r3,0(r17)
802115d8:	003ff706 	br	802115b8 <__reset+0xfa1f15b8>

802115dc <_close_r>:
802115dc:	defffd04 	addi	sp,sp,-12
802115e0:	dc000015 	stw	r16,0(sp)
802115e4:	042008b4 	movhi	r16,32802
802115e8:	dc400115 	stw	r17,4(sp)
802115ec:	84352304 	addi	r16,r16,-11124
802115f0:	2023883a 	mov	r17,r4
802115f4:	2809883a 	mov	r4,r5
802115f8:	dfc00215 	stw	ra,8(sp)
802115fc:	80000015 	stw	zero,0(r16)
80211600:	021527c0 	call	8021527c <close>
80211604:	00ffffc4 	movi	r3,-1
80211608:	10c00526 	beq	r2,r3,80211620 <_close_r+0x44>
8021160c:	dfc00217 	ldw	ra,8(sp)
80211610:	dc400117 	ldw	r17,4(sp)
80211614:	dc000017 	ldw	r16,0(sp)
80211618:	dec00304 	addi	sp,sp,12
8021161c:	f800283a 	ret
80211620:	80c00017 	ldw	r3,0(r16)
80211624:	183ff926 	beq	r3,zero,8021160c <__reset+0xfa1f160c>
80211628:	88c00015 	stw	r3,0(r17)
8021162c:	003ff706 	br	8021160c <__reset+0xfa1f160c>

80211630 <_calloc_r>:
80211630:	298b383a 	mul	r5,r5,r6
80211634:	defffe04 	addi	sp,sp,-8
80211638:	dfc00115 	stw	ra,4(sp)
8021163c:	dc000015 	stw	r16,0(sp)
80211640:	020c7740 	call	8020c774 <_malloc_r>
80211644:	10002926 	beq	r2,zero,802116ec <_calloc_r+0xbc>
80211648:	11bfff17 	ldw	r6,-4(r2)
8021164c:	1021883a 	mov	r16,r2
80211650:	00bfff04 	movi	r2,-4
80211654:	308c703a 	and	r6,r6,r2
80211658:	00c00904 	movi	r3,36
8021165c:	308d883a 	add	r6,r6,r2
80211660:	19801636 	bltu	r3,r6,802116bc <_calloc_r+0x8c>
80211664:	008004c4 	movi	r2,19
80211668:	11800b2e 	bgeu	r2,r6,80211698 <_calloc_r+0x68>
8021166c:	80000015 	stw	zero,0(r16)
80211670:	80000115 	stw	zero,4(r16)
80211674:	008006c4 	movi	r2,27
80211678:	11801a2e 	bgeu	r2,r6,802116e4 <_calloc_r+0xb4>
8021167c:	80000215 	stw	zero,8(r16)
80211680:	80000315 	stw	zero,12(r16)
80211684:	30c0151e 	bne	r6,r3,802116dc <_calloc_r+0xac>
80211688:	80000415 	stw	zero,16(r16)
8021168c:	80800604 	addi	r2,r16,24
80211690:	80000515 	stw	zero,20(r16)
80211694:	00000106 	br	8021169c <_calloc_r+0x6c>
80211698:	8005883a 	mov	r2,r16
8021169c:	10000015 	stw	zero,0(r2)
802116a0:	10000115 	stw	zero,4(r2)
802116a4:	10000215 	stw	zero,8(r2)
802116a8:	8005883a 	mov	r2,r16
802116ac:	dfc00117 	ldw	ra,4(sp)
802116b0:	dc000017 	ldw	r16,0(sp)
802116b4:	dec00204 	addi	sp,sp,8
802116b8:	f800283a 	ret
802116bc:	000b883a 	mov	r5,zero
802116c0:	8009883a 	mov	r4,r16
802116c4:	020d1c00 	call	8020d1c0 <memset>
802116c8:	8005883a 	mov	r2,r16
802116cc:	dfc00117 	ldw	ra,4(sp)
802116d0:	dc000017 	ldw	r16,0(sp)
802116d4:	dec00204 	addi	sp,sp,8
802116d8:	f800283a 	ret
802116dc:	80800404 	addi	r2,r16,16
802116e0:	003fee06 	br	8021169c <__reset+0xfa1f169c>
802116e4:	80800204 	addi	r2,r16,8
802116e8:	003fec06 	br	8021169c <__reset+0xfa1f169c>
802116ec:	0005883a 	mov	r2,zero
802116f0:	003fee06 	br	802116ac <__reset+0xfa1f16ac>

802116f4 <_fclose_r>:
802116f4:	28003926 	beq	r5,zero,802117dc <_fclose_r+0xe8>
802116f8:	defffc04 	addi	sp,sp,-16
802116fc:	dc400115 	stw	r17,4(sp)
80211700:	dc000015 	stw	r16,0(sp)
80211704:	dfc00315 	stw	ra,12(sp)
80211708:	dc800215 	stw	r18,8(sp)
8021170c:	2023883a 	mov	r17,r4
80211710:	2821883a 	mov	r16,r5
80211714:	20000226 	beq	r4,zero,80211720 <_fclose_r+0x2c>
80211718:	20800e17 	ldw	r2,56(r4)
8021171c:	10002726 	beq	r2,zero,802117bc <_fclose_r+0xc8>
80211720:	8080030f 	ldh	r2,12(r16)
80211724:	1000071e 	bne	r2,zero,80211744 <_fclose_r+0x50>
80211728:	0005883a 	mov	r2,zero
8021172c:	dfc00317 	ldw	ra,12(sp)
80211730:	dc800217 	ldw	r18,8(sp)
80211734:	dc400117 	ldw	r17,4(sp)
80211738:	dc000017 	ldw	r16,0(sp)
8021173c:	dec00404 	addi	sp,sp,16
80211740:	f800283a 	ret
80211744:	800b883a 	mov	r5,r16
80211748:	8809883a 	mov	r4,r17
8021174c:	020b41c0 	call	8020b41c <__sflush_r>
80211750:	1025883a 	mov	r18,r2
80211754:	80800b17 	ldw	r2,44(r16)
80211758:	10000426 	beq	r2,zero,8021176c <_fclose_r+0x78>
8021175c:	81400717 	ldw	r5,28(r16)
80211760:	8809883a 	mov	r4,r17
80211764:	103ee83a 	callr	r2
80211768:	10001616 	blt	r2,zero,802117c4 <_fclose_r+0xd0>
8021176c:	8080030b 	ldhu	r2,12(r16)
80211770:	1080200c 	andi	r2,r2,128
80211774:	1000151e 	bne	r2,zero,802117cc <_fclose_r+0xd8>
80211778:	81400c17 	ldw	r5,48(r16)
8021177c:	28000526 	beq	r5,zero,80211794 <_fclose_r+0xa0>
80211780:	80801004 	addi	r2,r16,64
80211784:	28800226 	beq	r5,r2,80211790 <_fclose_r+0x9c>
80211788:	8809883a 	mov	r4,r17
8021178c:	020bb880 	call	8020bb88 <_free_r>
80211790:	80000c15 	stw	zero,48(r16)
80211794:	81401117 	ldw	r5,68(r16)
80211798:	28000326 	beq	r5,zero,802117a8 <_fclose_r+0xb4>
8021179c:	8809883a 	mov	r4,r17
802117a0:	020bb880 	call	8020bb88 <_free_r>
802117a4:	80001115 	stw	zero,68(r16)
802117a8:	020ba240 	call	8020ba24 <__sfp_lock_acquire>
802117ac:	8000030d 	sth	zero,12(r16)
802117b0:	020ba280 	call	8020ba28 <__sfp_lock_release>
802117b4:	9005883a 	mov	r2,r18
802117b8:	003fdc06 	br	8021172c <__reset+0xfa1f172c>
802117bc:	020ba140 	call	8020ba14 <__sinit>
802117c0:	003fd706 	br	80211720 <__reset+0xfa1f1720>
802117c4:	04bfffc4 	movi	r18,-1
802117c8:	003fe806 	br	8021176c <__reset+0xfa1f176c>
802117cc:	81400417 	ldw	r5,16(r16)
802117d0:	8809883a 	mov	r4,r17
802117d4:	020bb880 	call	8020bb88 <_free_r>
802117d8:	003fe706 	br	80211778 <__reset+0xfa1f1778>
802117dc:	0005883a 	mov	r2,zero
802117e0:	f800283a 	ret

802117e4 <fclose>:
802117e4:	00a008b4 	movhi	r2,32802
802117e8:	10b50504 	addi	r2,r2,-11244
802117ec:	200b883a 	mov	r5,r4
802117f0:	11000017 	ldw	r4,0(r2)
802117f4:	02116f41 	jmpi	802116f4 <_fclose_r>

802117f8 <__fputwc>:
802117f8:	defff804 	addi	sp,sp,-32
802117fc:	dcc00415 	stw	r19,16(sp)
80211800:	dc800315 	stw	r18,12(sp)
80211804:	dc000115 	stw	r16,4(sp)
80211808:	dfc00715 	stw	ra,28(sp)
8021180c:	dd400615 	stw	r21,24(sp)
80211810:	dd000515 	stw	r20,20(sp)
80211814:	dc400215 	stw	r17,8(sp)
80211818:	2027883a 	mov	r19,r4
8021181c:	2825883a 	mov	r18,r5
80211820:	3021883a 	mov	r16,r6
80211824:	020c5640 	call	8020c564 <__locale_mb_cur_max>
80211828:	00c00044 	movi	r3,1
8021182c:	10c03e26 	beq	r2,r3,80211928 <__fputwc+0x130>
80211830:	81c01704 	addi	r7,r16,92
80211834:	900d883a 	mov	r6,r18
80211838:	d80b883a 	mov	r5,sp
8021183c:	9809883a 	mov	r4,r19
80211840:	0211cc80 	call	80211cc8 <_wcrtomb_r>
80211844:	1029883a 	mov	r20,r2
80211848:	00bfffc4 	movi	r2,-1
8021184c:	a0802026 	beq	r20,r2,802118d0 <__fputwc+0xd8>
80211850:	d9400003 	ldbu	r5,0(sp)
80211854:	a0001c26 	beq	r20,zero,802118c8 <__fputwc+0xd0>
80211858:	0023883a 	mov	r17,zero
8021185c:	05400284 	movi	r21,10
80211860:	00000906 	br	80211888 <__fputwc+0x90>
80211864:	80800017 	ldw	r2,0(r16)
80211868:	11400005 	stb	r5,0(r2)
8021186c:	80c00017 	ldw	r3,0(r16)
80211870:	18c00044 	addi	r3,r3,1
80211874:	80c00015 	stw	r3,0(r16)
80211878:	8c400044 	addi	r17,r17,1
8021187c:	dc45883a 	add	r2,sp,r17
80211880:	8d00112e 	bgeu	r17,r20,802118c8 <__fputwc+0xd0>
80211884:	11400003 	ldbu	r5,0(r2)
80211888:	80c00217 	ldw	r3,8(r16)
8021188c:	18ffffc4 	addi	r3,r3,-1
80211890:	80c00215 	stw	r3,8(r16)
80211894:	183ff30e 	bge	r3,zero,80211864 <__reset+0xfa1f1864>
80211898:	80800617 	ldw	r2,24(r16)
8021189c:	18801916 	blt	r3,r2,80211904 <__fputwc+0x10c>
802118a0:	80800017 	ldw	r2,0(r16)
802118a4:	11400005 	stb	r5,0(r2)
802118a8:	80800017 	ldw	r2,0(r16)
802118ac:	10c00003 	ldbu	r3,0(r2)
802118b0:	10800044 	addi	r2,r2,1
802118b4:	1d402326 	beq	r3,r21,80211944 <__fputwc+0x14c>
802118b8:	80800015 	stw	r2,0(r16)
802118bc:	8c400044 	addi	r17,r17,1
802118c0:	dc45883a 	add	r2,sp,r17
802118c4:	8d3fef36 	bltu	r17,r20,80211884 <__reset+0xfa1f1884>
802118c8:	9005883a 	mov	r2,r18
802118cc:	00000406 	br	802118e0 <__fputwc+0xe8>
802118d0:	80c0030b 	ldhu	r3,12(r16)
802118d4:	a005883a 	mov	r2,r20
802118d8:	18c01014 	ori	r3,r3,64
802118dc:	80c0030d 	sth	r3,12(r16)
802118e0:	dfc00717 	ldw	ra,28(sp)
802118e4:	dd400617 	ldw	r21,24(sp)
802118e8:	dd000517 	ldw	r20,20(sp)
802118ec:	dcc00417 	ldw	r19,16(sp)
802118f0:	dc800317 	ldw	r18,12(sp)
802118f4:	dc400217 	ldw	r17,8(sp)
802118f8:	dc000117 	ldw	r16,4(sp)
802118fc:	dec00804 	addi	sp,sp,32
80211900:	f800283a 	ret
80211904:	800d883a 	mov	r6,r16
80211908:	29403fcc 	andi	r5,r5,255
8021190c:	9809883a 	mov	r4,r19
80211910:	0211b700 	call	80211b70 <__swbuf_r>
80211914:	10bfffe0 	cmpeqi	r2,r2,-1
80211918:	10803fcc 	andi	r2,r2,255
8021191c:	103fd626 	beq	r2,zero,80211878 <__reset+0xfa1f1878>
80211920:	00bfffc4 	movi	r2,-1
80211924:	003fee06 	br	802118e0 <__reset+0xfa1f18e0>
80211928:	90ffffc4 	addi	r3,r18,-1
8021192c:	01003f84 	movi	r4,254
80211930:	20ffbf36 	bltu	r4,r3,80211830 <__reset+0xfa1f1830>
80211934:	900b883a 	mov	r5,r18
80211938:	dc800005 	stb	r18,0(sp)
8021193c:	1029883a 	mov	r20,r2
80211940:	003fc506 	br	80211858 <__reset+0xfa1f1858>
80211944:	800d883a 	mov	r6,r16
80211948:	a80b883a 	mov	r5,r21
8021194c:	9809883a 	mov	r4,r19
80211950:	0211b700 	call	80211b70 <__swbuf_r>
80211954:	10bfffe0 	cmpeqi	r2,r2,-1
80211958:	003fef06 	br	80211918 <__reset+0xfa1f1918>

8021195c <_fputwc_r>:
8021195c:	3080030b 	ldhu	r2,12(r6)
80211960:	10c8000c 	andi	r3,r2,8192
80211964:	1800051e 	bne	r3,zero,8021197c <_fputwc_r+0x20>
80211968:	30c01917 	ldw	r3,100(r6)
8021196c:	10880014 	ori	r2,r2,8192
80211970:	3080030d 	sth	r2,12(r6)
80211974:	18880014 	ori	r2,r3,8192
80211978:	30801915 	stw	r2,100(r6)
8021197c:	02117f81 	jmpi	802117f8 <__fputwc>

80211980 <fputwc>:
80211980:	00a008b4 	movhi	r2,32802
80211984:	defffc04 	addi	sp,sp,-16
80211988:	10b50504 	addi	r2,r2,-11244
8021198c:	dc000115 	stw	r16,4(sp)
80211990:	14000017 	ldw	r16,0(r2)
80211994:	dc400215 	stw	r17,8(sp)
80211998:	dfc00315 	stw	ra,12(sp)
8021199c:	2023883a 	mov	r17,r4
802119a0:	80000226 	beq	r16,zero,802119ac <fputwc+0x2c>
802119a4:	80800e17 	ldw	r2,56(r16)
802119a8:	10001026 	beq	r2,zero,802119ec <fputwc+0x6c>
802119ac:	2880030b 	ldhu	r2,12(r5)
802119b0:	10c8000c 	andi	r3,r2,8192
802119b4:	1800051e 	bne	r3,zero,802119cc <fputwc+0x4c>
802119b8:	28c01917 	ldw	r3,100(r5)
802119bc:	10880014 	ori	r2,r2,8192
802119c0:	2880030d 	sth	r2,12(r5)
802119c4:	18880014 	ori	r2,r3,8192
802119c8:	28801915 	stw	r2,100(r5)
802119cc:	280d883a 	mov	r6,r5
802119d0:	8009883a 	mov	r4,r16
802119d4:	880b883a 	mov	r5,r17
802119d8:	dfc00317 	ldw	ra,12(sp)
802119dc:	dc400217 	ldw	r17,8(sp)
802119e0:	dc000117 	ldw	r16,4(sp)
802119e4:	dec00404 	addi	sp,sp,16
802119e8:	02117f81 	jmpi	802117f8 <__fputwc>
802119ec:	8009883a 	mov	r4,r16
802119f0:	d9400015 	stw	r5,0(sp)
802119f4:	020ba140 	call	8020ba14 <__sinit>
802119f8:	d9400017 	ldw	r5,0(sp)
802119fc:	003feb06 	br	802119ac <__reset+0xfa1f19ac>

80211a00 <_fstat_r>:
80211a00:	defffd04 	addi	sp,sp,-12
80211a04:	2805883a 	mov	r2,r5
80211a08:	dc000015 	stw	r16,0(sp)
80211a0c:	042008b4 	movhi	r16,32802
80211a10:	dc400115 	stw	r17,4(sp)
80211a14:	84352304 	addi	r16,r16,-11124
80211a18:	2023883a 	mov	r17,r4
80211a1c:	300b883a 	mov	r5,r6
80211a20:	1009883a 	mov	r4,r2
80211a24:	dfc00215 	stw	ra,8(sp)
80211a28:	80000015 	stw	zero,0(r16)
80211a2c:	02153d40 	call	802153d4 <fstat>
80211a30:	00ffffc4 	movi	r3,-1
80211a34:	10c00526 	beq	r2,r3,80211a4c <_fstat_r+0x4c>
80211a38:	dfc00217 	ldw	ra,8(sp)
80211a3c:	dc400117 	ldw	r17,4(sp)
80211a40:	dc000017 	ldw	r16,0(sp)
80211a44:	dec00304 	addi	sp,sp,12
80211a48:	f800283a 	ret
80211a4c:	80c00017 	ldw	r3,0(r16)
80211a50:	183ff926 	beq	r3,zero,80211a38 <__reset+0xfa1f1a38>
80211a54:	88c00015 	stw	r3,0(r17)
80211a58:	003ff706 	br	80211a38 <__reset+0xfa1f1a38>

80211a5c <_isatty_r>:
80211a5c:	defffd04 	addi	sp,sp,-12
80211a60:	dc000015 	stw	r16,0(sp)
80211a64:	042008b4 	movhi	r16,32802
80211a68:	dc400115 	stw	r17,4(sp)
80211a6c:	84352304 	addi	r16,r16,-11124
80211a70:	2023883a 	mov	r17,r4
80211a74:	2809883a 	mov	r4,r5
80211a78:	dfc00215 	stw	ra,8(sp)
80211a7c:	80000015 	stw	zero,0(r16)
80211a80:	02154c00 	call	802154c0 <isatty>
80211a84:	00ffffc4 	movi	r3,-1
80211a88:	10c00526 	beq	r2,r3,80211aa0 <_isatty_r+0x44>
80211a8c:	dfc00217 	ldw	ra,8(sp)
80211a90:	dc400117 	ldw	r17,4(sp)
80211a94:	dc000017 	ldw	r16,0(sp)
80211a98:	dec00304 	addi	sp,sp,12
80211a9c:	f800283a 	ret
80211aa0:	80c00017 	ldw	r3,0(r16)
80211aa4:	183ff926 	beq	r3,zero,80211a8c <__reset+0xfa1f1a8c>
80211aa8:	88c00015 	stw	r3,0(r17)
80211aac:	003ff706 	br	80211a8c <__reset+0xfa1f1a8c>

80211ab0 <_lseek_r>:
80211ab0:	defffd04 	addi	sp,sp,-12
80211ab4:	2805883a 	mov	r2,r5
80211ab8:	dc000015 	stw	r16,0(sp)
80211abc:	042008b4 	movhi	r16,32802
80211ac0:	dc400115 	stw	r17,4(sp)
80211ac4:	300b883a 	mov	r5,r6
80211ac8:	84352304 	addi	r16,r16,-11124
80211acc:	2023883a 	mov	r17,r4
80211ad0:	380d883a 	mov	r6,r7
80211ad4:	1009883a 	mov	r4,r2
80211ad8:	dfc00215 	stw	ra,8(sp)
80211adc:	80000015 	stw	zero,0(r16)
80211ae0:	02155a00 	call	802155a0 <lseek>
80211ae4:	00ffffc4 	movi	r3,-1
80211ae8:	10c00526 	beq	r2,r3,80211b00 <_lseek_r+0x50>
80211aec:	dfc00217 	ldw	ra,8(sp)
80211af0:	dc400117 	ldw	r17,4(sp)
80211af4:	dc000017 	ldw	r16,0(sp)
80211af8:	dec00304 	addi	sp,sp,12
80211afc:	f800283a 	ret
80211b00:	80c00017 	ldw	r3,0(r16)
80211b04:	183ff926 	beq	r3,zero,80211aec <__reset+0xfa1f1aec>
80211b08:	88c00015 	stw	r3,0(r17)
80211b0c:	003ff706 	br	80211aec <__reset+0xfa1f1aec>

80211b10 <_read_r>:
80211b10:	defffd04 	addi	sp,sp,-12
80211b14:	2805883a 	mov	r2,r5
80211b18:	dc000015 	stw	r16,0(sp)
80211b1c:	042008b4 	movhi	r16,32802
80211b20:	dc400115 	stw	r17,4(sp)
80211b24:	300b883a 	mov	r5,r6
80211b28:	84352304 	addi	r16,r16,-11124
80211b2c:	2023883a 	mov	r17,r4
80211b30:	380d883a 	mov	r6,r7
80211b34:	1009883a 	mov	r4,r2
80211b38:	dfc00215 	stw	ra,8(sp)
80211b3c:	80000015 	stw	zero,0(r16)
80211b40:	02157740 	call	80215774 <read>
80211b44:	00ffffc4 	movi	r3,-1
80211b48:	10c00526 	beq	r2,r3,80211b60 <_read_r+0x50>
80211b4c:	dfc00217 	ldw	ra,8(sp)
80211b50:	dc400117 	ldw	r17,4(sp)
80211b54:	dc000017 	ldw	r16,0(sp)
80211b58:	dec00304 	addi	sp,sp,12
80211b5c:	f800283a 	ret
80211b60:	80c00017 	ldw	r3,0(r16)
80211b64:	183ff926 	beq	r3,zero,80211b4c <__reset+0xfa1f1b4c>
80211b68:	88c00015 	stw	r3,0(r17)
80211b6c:	003ff706 	br	80211b4c <__reset+0xfa1f1b4c>

80211b70 <__swbuf_r>:
80211b70:	defffb04 	addi	sp,sp,-20
80211b74:	dcc00315 	stw	r19,12(sp)
80211b78:	dc800215 	stw	r18,8(sp)
80211b7c:	dc000015 	stw	r16,0(sp)
80211b80:	dfc00415 	stw	ra,16(sp)
80211b84:	dc400115 	stw	r17,4(sp)
80211b88:	2025883a 	mov	r18,r4
80211b8c:	2827883a 	mov	r19,r5
80211b90:	3021883a 	mov	r16,r6
80211b94:	20000226 	beq	r4,zero,80211ba0 <__swbuf_r+0x30>
80211b98:	20800e17 	ldw	r2,56(r4)
80211b9c:	10004226 	beq	r2,zero,80211ca8 <__swbuf_r+0x138>
80211ba0:	80800617 	ldw	r2,24(r16)
80211ba4:	8100030b 	ldhu	r4,12(r16)
80211ba8:	80800215 	stw	r2,8(r16)
80211bac:	2080020c 	andi	r2,r4,8
80211bb0:	10003626 	beq	r2,zero,80211c8c <__swbuf_r+0x11c>
80211bb4:	80c00417 	ldw	r3,16(r16)
80211bb8:	18003426 	beq	r3,zero,80211c8c <__swbuf_r+0x11c>
80211bbc:	2088000c 	andi	r2,r4,8192
80211bc0:	9c403fcc 	andi	r17,r19,255
80211bc4:	10001a26 	beq	r2,zero,80211c30 <__swbuf_r+0xc0>
80211bc8:	80800017 	ldw	r2,0(r16)
80211bcc:	81000517 	ldw	r4,20(r16)
80211bd0:	10c7c83a 	sub	r3,r2,r3
80211bd4:	1900200e 	bge	r3,r4,80211c58 <__swbuf_r+0xe8>
80211bd8:	18c00044 	addi	r3,r3,1
80211bdc:	81000217 	ldw	r4,8(r16)
80211be0:	11400044 	addi	r5,r2,1
80211be4:	81400015 	stw	r5,0(r16)
80211be8:	213fffc4 	addi	r4,r4,-1
80211bec:	81000215 	stw	r4,8(r16)
80211bf0:	14c00005 	stb	r19,0(r2)
80211bf4:	80800517 	ldw	r2,20(r16)
80211bf8:	10c01e26 	beq	r2,r3,80211c74 <__swbuf_r+0x104>
80211bfc:	8080030b 	ldhu	r2,12(r16)
80211c00:	1080004c 	andi	r2,r2,1
80211c04:	10000226 	beq	r2,zero,80211c10 <__swbuf_r+0xa0>
80211c08:	00800284 	movi	r2,10
80211c0c:	88801926 	beq	r17,r2,80211c74 <__swbuf_r+0x104>
80211c10:	8805883a 	mov	r2,r17
80211c14:	dfc00417 	ldw	ra,16(sp)
80211c18:	dcc00317 	ldw	r19,12(sp)
80211c1c:	dc800217 	ldw	r18,8(sp)
80211c20:	dc400117 	ldw	r17,4(sp)
80211c24:	dc000017 	ldw	r16,0(sp)
80211c28:	dec00504 	addi	sp,sp,20
80211c2c:	f800283a 	ret
80211c30:	81401917 	ldw	r5,100(r16)
80211c34:	00b7ffc4 	movi	r2,-8193
80211c38:	21080014 	ori	r4,r4,8192
80211c3c:	2884703a 	and	r2,r5,r2
80211c40:	80801915 	stw	r2,100(r16)
80211c44:	80800017 	ldw	r2,0(r16)
80211c48:	8100030d 	sth	r4,12(r16)
80211c4c:	81000517 	ldw	r4,20(r16)
80211c50:	10c7c83a 	sub	r3,r2,r3
80211c54:	193fe016 	blt	r3,r4,80211bd8 <__reset+0xfa1f1bd8>
80211c58:	800b883a 	mov	r5,r16
80211c5c:	9009883a 	mov	r4,r18
80211c60:	020b6380 	call	8020b638 <_fflush_r>
80211c64:	1000071e 	bne	r2,zero,80211c84 <__swbuf_r+0x114>
80211c68:	80800017 	ldw	r2,0(r16)
80211c6c:	00c00044 	movi	r3,1
80211c70:	003fda06 	br	80211bdc <__reset+0xfa1f1bdc>
80211c74:	800b883a 	mov	r5,r16
80211c78:	9009883a 	mov	r4,r18
80211c7c:	020b6380 	call	8020b638 <_fflush_r>
80211c80:	103fe326 	beq	r2,zero,80211c10 <__reset+0xfa1f1c10>
80211c84:	00bfffc4 	movi	r2,-1
80211c88:	003fe206 	br	80211c14 <__reset+0xfa1f1c14>
80211c8c:	800b883a 	mov	r5,r16
80211c90:	9009883a 	mov	r4,r18
80211c94:	0209a400 	call	80209a40 <__swsetup_r>
80211c98:	103ffa1e 	bne	r2,zero,80211c84 <__reset+0xfa1f1c84>
80211c9c:	8100030b 	ldhu	r4,12(r16)
80211ca0:	80c00417 	ldw	r3,16(r16)
80211ca4:	003fc506 	br	80211bbc <__reset+0xfa1f1bbc>
80211ca8:	020ba140 	call	8020ba14 <__sinit>
80211cac:	003fbc06 	br	80211ba0 <__reset+0xfa1f1ba0>

80211cb0 <__swbuf>:
80211cb0:	00a008b4 	movhi	r2,32802
80211cb4:	10b50504 	addi	r2,r2,-11244
80211cb8:	280d883a 	mov	r6,r5
80211cbc:	200b883a 	mov	r5,r4
80211cc0:	11000017 	ldw	r4,0(r2)
80211cc4:	0211b701 	jmpi	80211b70 <__swbuf_r>

80211cc8 <_wcrtomb_r>:
80211cc8:	defff604 	addi	sp,sp,-40
80211ccc:	00a008b4 	movhi	r2,32802
80211cd0:	dc800815 	stw	r18,32(sp)
80211cd4:	dc400715 	stw	r17,28(sp)
80211cd8:	dc000615 	stw	r16,24(sp)
80211cdc:	10b50904 	addi	r2,r2,-11228
80211ce0:	dfc00915 	stw	ra,36(sp)
80211ce4:	2021883a 	mov	r16,r4
80211ce8:	3823883a 	mov	r17,r7
80211cec:	14800017 	ldw	r18,0(r2)
80211cf0:	28001426 	beq	r5,zero,80211d44 <_wcrtomb_r+0x7c>
80211cf4:	d9400415 	stw	r5,16(sp)
80211cf8:	d9800515 	stw	r6,20(sp)
80211cfc:	020c5580 	call	8020c558 <__locale_charset>
80211d00:	d9800517 	ldw	r6,20(sp)
80211d04:	d9400417 	ldw	r5,16(sp)
80211d08:	100f883a 	mov	r7,r2
80211d0c:	dc400015 	stw	r17,0(sp)
80211d10:	8009883a 	mov	r4,r16
80211d14:	903ee83a 	callr	r18
80211d18:	00ffffc4 	movi	r3,-1
80211d1c:	10c0031e 	bne	r2,r3,80211d2c <_wcrtomb_r+0x64>
80211d20:	88000015 	stw	zero,0(r17)
80211d24:	00c02284 	movi	r3,138
80211d28:	80c00015 	stw	r3,0(r16)
80211d2c:	dfc00917 	ldw	ra,36(sp)
80211d30:	dc800817 	ldw	r18,32(sp)
80211d34:	dc400717 	ldw	r17,28(sp)
80211d38:	dc000617 	ldw	r16,24(sp)
80211d3c:	dec00a04 	addi	sp,sp,40
80211d40:	f800283a 	ret
80211d44:	020c5580 	call	8020c558 <__locale_charset>
80211d48:	100f883a 	mov	r7,r2
80211d4c:	dc400015 	stw	r17,0(sp)
80211d50:	000d883a 	mov	r6,zero
80211d54:	d9400104 	addi	r5,sp,4
80211d58:	8009883a 	mov	r4,r16
80211d5c:	903ee83a 	callr	r18
80211d60:	003fed06 	br	80211d18 <__reset+0xfa1f1d18>

80211d64 <wcrtomb>:
80211d64:	defff604 	addi	sp,sp,-40
80211d68:	00a008b4 	movhi	r2,32802
80211d6c:	dc800615 	stw	r18,24(sp)
80211d70:	dc400515 	stw	r17,20(sp)
80211d74:	10b50504 	addi	r2,r2,-11244
80211d78:	dfc00915 	stw	ra,36(sp)
80211d7c:	dd000815 	stw	r20,32(sp)
80211d80:	dcc00715 	stw	r19,28(sp)
80211d84:	dc000415 	stw	r16,16(sp)
80211d88:	3025883a 	mov	r18,r6
80211d8c:	14400017 	ldw	r17,0(r2)
80211d90:	20001926 	beq	r4,zero,80211df8 <wcrtomb+0x94>
80211d94:	00a008b4 	movhi	r2,32802
80211d98:	10b50904 	addi	r2,r2,-11228
80211d9c:	15000017 	ldw	r20,0(r2)
80211da0:	2021883a 	mov	r16,r4
80211da4:	2827883a 	mov	r19,r5
80211da8:	020c5580 	call	8020c558 <__locale_charset>
80211dac:	100f883a 	mov	r7,r2
80211db0:	dc800015 	stw	r18,0(sp)
80211db4:	980d883a 	mov	r6,r19
80211db8:	800b883a 	mov	r5,r16
80211dbc:	8809883a 	mov	r4,r17
80211dc0:	a03ee83a 	callr	r20
80211dc4:	00ffffc4 	movi	r3,-1
80211dc8:	10c0031e 	bne	r2,r3,80211dd8 <wcrtomb+0x74>
80211dcc:	90000015 	stw	zero,0(r18)
80211dd0:	00c02284 	movi	r3,138
80211dd4:	88c00015 	stw	r3,0(r17)
80211dd8:	dfc00917 	ldw	ra,36(sp)
80211ddc:	dd000817 	ldw	r20,32(sp)
80211de0:	dcc00717 	ldw	r19,28(sp)
80211de4:	dc800617 	ldw	r18,24(sp)
80211de8:	dc400517 	ldw	r17,20(sp)
80211dec:	dc000417 	ldw	r16,16(sp)
80211df0:	dec00a04 	addi	sp,sp,40
80211df4:	f800283a 	ret
80211df8:	00a008b4 	movhi	r2,32802
80211dfc:	10b50904 	addi	r2,r2,-11228
80211e00:	14000017 	ldw	r16,0(r2)
80211e04:	020c5580 	call	8020c558 <__locale_charset>
80211e08:	100f883a 	mov	r7,r2
80211e0c:	dc800015 	stw	r18,0(sp)
80211e10:	000d883a 	mov	r6,zero
80211e14:	d9400104 	addi	r5,sp,4
80211e18:	8809883a 	mov	r4,r17
80211e1c:	803ee83a 	callr	r16
80211e20:	003fe806 	br	80211dc4 <__reset+0xfa1f1dc4>

80211e24 <__ascii_wctomb>:
80211e24:	28000526 	beq	r5,zero,80211e3c <__ascii_wctomb+0x18>
80211e28:	00803fc4 	movi	r2,255
80211e2c:	11800536 	bltu	r2,r6,80211e44 <__ascii_wctomb+0x20>
80211e30:	29800005 	stb	r6,0(r5)
80211e34:	00800044 	movi	r2,1
80211e38:	f800283a 	ret
80211e3c:	0005883a 	mov	r2,zero
80211e40:	f800283a 	ret
80211e44:	00802284 	movi	r2,138
80211e48:	20800015 	stw	r2,0(r4)
80211e4c:	00bfffc4 	movi	r2,-1
80211e50:	f800283a 	ret

80211e54 <_wctomb_r>:
80211e54:	00a008b4 	movhi	r2,32802
80211e58:	defff904 	addi	sp,sp,-28
80211e5c:	10b50904 	addi	r2,r2,-11228
80211e60:	dfc00615 	stw	ra,24(sp)
80211e64:	dc400515 	stw	r17,20(sp)
80211e68:	dc000415 	stw	r16,16(sp)
80211e6c:	3823883a 	mov	r17,r7
80211e70:	14000017 	ldw	r16,0(r2)
80211e74:	d9000115 	stw	r4,4(sp)
80211e78:	d9400215 	stw	r5,8(sp)
80211e7c:	d9800315 	stw	r6,12(sp)
80211e80:	020c5580 	call	8020c558 <__locale_charset>
80211e84:	d9800317 	ldw	r6,12(sp)
80211e88:	d9400217 	ldw	r5,8(sp)
80211e8c:	d9000117 	ldw	r4,4(sp)
80211e90:	100f883a 	mov	r7,r2
80211e94:	dc400015 	stw	r17,0(sp)
80211e98:	803ee83a 	callr	r16
80211e9c:	dfc00617 	ldw	ra,24(sp)
80211ea0:	dc400517 	ldw	r17,20(sp)
80211ea4:	dc000417 	ldw	r16,16(sp)
80211ea8:	dec00704 	addi	sp,sp,28
80211eac:	f800283a 	ret

80211eb0 <__udivdi3>:
80211eb0:	defff504 	addi	sp,sp,-44
80211eb4:	dcc00415 	stw	r19,16(sp)
80211eb8:	dc000115 	stw	r16,4(sp)
80211ebc:	dfc00a15 	stw	ra,40(sp)
80211ec0:	df000915 	stw	fp,36(sp)
80211ec4:	ddc00815 	stw	r23,32(sp)
80211ec8:	dd800715 	stw	r22,28(sp)
80211ecc:	dd400615 	stw	r21,24(sp)
80211ed0:	dd000515 	stw	r20,20(sp)
80211ed4:	dc800315 	stw	r18,12(sp)
80211ed8:	dc400215 	stw	r17,8(sp)
80211edc:	2027883a 	mov	r19,r4
80211ee0:	2821883a 	mov	r16,r5
80211ee4:	3800411e 	bne	r7,zero,80211fec <__udivdi3+0x13c>
80211ee8:	3023883a 	mov	r17,r6
80211eec:	2025883a 	mov	r18,r4
80211ef0:	2980522e 	bgeu	r5,r6,8021203c <__udivdi3+0x18c>
80211ef4:	00bfffd4 	movui	r2,65535
80211ef8:	282d883a 	mov	r22,r5
80211efc:	1180a836 	bltu	r2,r6,802121a0 <__udivdi3+0x2f0>
80211f00:	00803fc4 	movi	r2,255
80211f04:	1185803a 	cmpltu	r2,r2,r6
80211f08:	100490fa 	slli	r2,r2,3
80211f0c:	3086d83a 	srl	r3,r6,r2
80211f10:	012008b4 	movhi	r4,32802
80211f14:	212c7bc4 	addi	r4,r4,-19985
80211f18:	20c7883a 	add	r3,r4,r3
80211f1c:	18c00003 	ldbu	r3,0(r3)
80211f20:	1885883a 	add	r2,r3,r2
80211f24:	00c00804 	movi	r3,32
80211f28:	1887c83a 	sub	r3,r3,r2
80211f2c:	18000526 	beq	r3,zero,80211f44 <__udivdi3+0x94>
80211f30:	80e0983a 	sll	r16,r16,r3
80211f34:	9884d83a 	srl	r2,r19,r2
80211f38:	30e2983a 	sll	r17,r6,r3
80211f3c:	98e4983a 	sll	r18,r19,r3
80211f40:	142cb03a 	or	r22,r2,r16
80211f44:	882ad43a 	srli	r21,r17,16
80211f48:	b009883a 	mov	r4,r22
80211f4c:	8d3fffcc 	andi	r20,r17,65535
80211f50:	a80b883a 	mov	r5,r21
80211f54:	0212abc0 	call	80212abc <__umodsi3>
80211f58:	b009883a 	mov	r4,r22
80211f5c:	a80b883a 	mov	r5,r21
80211f60:	1027883a 	mov	r19,r2
80211f64:	0212a580 	call	80212a58 <__udivsi3>
80211f68:	102d883a 	mov	r22,r2
80211f6c:	9826943a 	slli	r19,r19,16
80211f70:	9004d43a 	srli	r2,r18,16
80211f74:	a5a1383a 	mul	r16,r20,r22
80211f78:	14c4b03a 	or	r2,r2,r19
80211f7c:	1400052e 	bgeu	r2,r16,80211f94 <__udivdi3+0xe4>
80211f80:	1445883a 	add	r2,r2,r17
80211f84:	b0ffffc4 	addi	r3,r22,-1
80211f88:	14400136 	bltu	r2,r17,80211f90 <__udivdi3+0xe0>
80211f8c:	14012336 	bltu	r2,r16,8021241c <__udivdi3+0x56c>
80211f90:	182d883a 	mov	r22,r3
80211f94:	1421c83a 	sub	r16,r2,r16
80211f98:	a80b883a 	mov	r5,r21
80211f9c:	8009883a 	mov	r4,r16
80211fa0:	0212abc0 	call	80212abc <__umodsi3>
80211fa4:	1027883a 	mov	r19,r2
80211fa8:	a80b883a 	mov	r5,r21
80211fac:	8009883a 	mov	r4,r16
80211fb0:	0212a580 	call	80212a58 <__udivsi3>
80211fb4:	9826943a 	slli	r19,r19,16
80211fb8:	a0a9383a 	mul	r20,r20,r2
80211fbc:	94bfffcc 	andi	r18,r18,65535
80211fc0:	94e4b03a 	or	r18,r18,r19
80211fc4:	9500052e 	bgeu	r18,r20,80211fdc <__udivdi3+0x12c>
80211fc8:	8ca5883a 	add	r18,r17,r18
80211fcc:	10ffffc4 	addi	r3,r2,-1
80211fd0:	9440f136 	bltu	r18,r17,80212398 <__udivdi3+0x4e8>
80211fd4:	9500f02e 	bgeu	r18,r20,80212398 <__udivdi3+0x4e8>
80211fd8:	10bfff84 	addi	r2,r2,-2
80211fdc:	b00c943a 	slli	r6,r22,16
80211fe0:	0007883a 	mov	r3,zero
80211fe4:	3084b03a 	or	r2,r6,r2
80211fe8:	00005906 	br	80212150 <__udivdi3+0x2a0>
80211fec:	29c05636 	bltu	r5,r7,80212148 <__udivdi3+0x298>
80211ff0:	00bfffd4 	movui	r2,65535
80211ff4:	11c0622e 	bgeu	r2,r7,80212180 <__udivdi3+0x2d0>
80211ff8:	00804034 	movhi	r2,256
80211ffc:	10bfffc4 	addi	r2,r2,-1
80212000:	11c0ee36 	bltu	r2,r7,802123bc <__udivdi3+0x50c>
80212004:	00800404 	movi	r2,16
80212008:	3886d83a 	srl	r3,r7,r2
8021200c:	012008b4 	movhi	r4,32802
80212010:	212c7bc4 	addi	r4,r4,-19985
80212014:	20c7883a 	add	r3,r4,r3
80212018:	18c00003 	ldbu	r3,0(r3)
8021201c:	05400804 	movi	r21,32
80212020:	1885883a 	add	r2,r3,r2
80212024:	a8abc83a 	sub	r21,r21,r2
80212028:	a800621e 	bne	r21,zero,802121b4 <__udivdi3+0x304>
8021202c:	3c00e936 	bltu	r7,r16,802123d4 <__udivdi3+0x524>
80212030:	9985403a 	cmpgeu	r2,r19,r6
80212034:	0007883a 	mov	r3,zero
80212038:	00004506 	br	80212150 <__udivdi3+0x2a0>
8021203c:	3000041e 	bne	r6,zero,80212050 <__udivdi3+0x1a0>
80212040:	000b883a 	mov	r5,zero
80212044:	01000044 	movi	r4,1
80212048:	0212a580 	call	80212a58 <__udivsi3>
8021204c:	1023883a 	mov	r17,r2
80212050:	00bfffd4 	movui	r2,65535
80212054:	14404e2e 	bgeu	r2,r17,80212190 <__udivdi3+0x2e0>
80212058:	00804034 	movhi	r2,256
8021205c:	10bfffc4 	addi	r2,r2,-1
80212060:	1440d836 	bltu	r2,r17,802123c4 <__udivdi3+0x514>
80212064:	00800404 	movi	r2,16
80212068:	8886d83a 	srl	r3,r17,r2
8021206c:	012008b4 	movhi	r4,32802
80212070:	212c7bc4 	addi	r4,r4,-19985
80212074:	20c7883a 	add	r3,r4,r3
80212078:	18c00003 	ldbu	r3,0(r3)
8021207c:	1885883a 	add	r2,r3,r2
80212080:	00c00804 	movi	r3,32
80212084:	1887c83a 	sub	r3,r3,r2
80212088:	18008f1e 	bne	r3,zero,802122c8 <__udivdi3+0x418>
8021208c:	882ad43a 	srli	r21,r17,16
80212090:	8461c83a 	sub	r16,r16,r17
80212094:	8d3fffcc 	andi	r20,r17,65535
80212098:	00c00044 	movi	r3,1
8021209c:	8009883a 	mov	r4,r16
802120a0:	a80b883a 	mov	r5,r21
802120a4:	d8c00015 	stw	r3,0(sp)
802120a8:	0212abc0 	call	80212abc <__umodsi3>
802120ac:	8009883a 	mov	r4,r16
802120b0:	a80b883a 	mov	r5,r21
802120b4:	1027883a 	mov	r19,r2
802120b8:	0212a580 	call	80212a58 <__udivsi3>
802120bc:	9826943a 	slli	r19,r19,16
802120c0:	9008d43a 	srli	r4,r18,16
802120c4:	1521383a 	mul	r16,r2,r20
802120c8:	102d883a 	mov	r22,r2
802120cc:	24c8b03a 	or	r4,r4,r19
802120d0:	d8c00017 	ldw	r3,0(sp)
802120d4:	2400052e 	bgeu	r4,r16,802120ec <__udivdi3+0x23c>
802120d8:	2449883a 	add	r4,r4,r17
802120dc:	b0bfffc4 	addi	r2,r22,-1
802120e0:	24400136 	bltu	r4,r17,802120e8 <__udivdi3+0x238>
802120e4:	2400ca36 	bltu	r4,r16,80212410 <__udivdi3+0x560>
802120e8:	102d883a 	mov	r22,r2
802120ec:	2421c83a 	sub	r16,r4,r16
802120f0:	a80b883a 	mov	r5,r21
802120f4:	8009883a 	mov	r4,r16
802120f8:	d8c00015 	stw	r3,0(sp)
802120fc:	0212abc0 	call	80212abc <__umodsi3>
80212100:	1027883a 	mov	r19,r2
80212104:	a80b883a 	mov	r5,r21
80212108:	8009883a 	mov	r4,r16
8021210c:	0212a580 	call	80212a58 <__udivsi3>
80212110:	9826943a 	slli	r19,r19,16
80212114:	1529383a 	mul	r20,r2,r20
80212118:	94bfffcc 	andi	r18,r18,65535
8021211c:	94e4b03a 	or	r18,r18,r19
80212120:	d8c00017 	ldw	r3,0(sp)
80212124:	9500052e 	bgeu	r18,r20,8021213c <__udivdi3+0x28c>
80212128:	8ca5883a 	add	r18,r17,r18
8021212c:	113fffc4 	addi	r4,r2,-1
80212130:	94409736 	bltu	r18,r17,80212390 <__udivdi3+0x4e0>
80212134:	9500962e 	bgeu	r18,r20,80212390 <__udivdi3+0x4e0>
80212138:	10bfff84 	addi	r2,r2,-2
8021213c:	b00c943a 	slli	r6,r22,16
80212140:	3084b03a 	or	r2,r6,r2
80212144:	00000206 	br	80212150 <__udivdi3+0x2a0>
80212148:	0007883a 	mov	r3,zero
8021214c:	0005883a 	mov	r2,zero
80212150:	dfc00a17 	ldw	ra,40(sp)
80212154:	df000917 	ldw	fp,36(sp)
80212158:	ddc00817 	ldw	r23,32(sp)
8021215c:	dd800717 	ldw	r22,28(sp)
80212160:	dd400617 	ldw	r21,24(sp)
80212164:	dd000517 	ldw	r20,20(sp)
80212168:	dcc00417 	ldw	r19,16(sp)
8021216c:	dc800317 	ldw	r18,12(sp)
80212170:	dc400217 	ldw	r17,8(sp)
80212174:	dc000117 	ldw	r16,4(sp)
80212178:	dec00b04 	addi	sp,sp,44
8021217c:	f800283a 	ret
80212180:	00803fc4 	movi	r2,255
80212184:	11c5803a 	cmpltu	r2,r2,r7
80212188:	100490fa 	slli	r2,r2,3
8021218c:	003f9e06 	br	80212008 <__reset+0xfa1f2008>
80212190:	00803fc4 	movi	r2,255
80212194:	1445803a 	cmpltu	r2,r2,r17
80212198:	100490fa 	slli	r2,r2,3
8021219c:	003fb206 	br	80212068 <__reset+0xfa1f2068>
802121a0:	00804034 	movhi	r2,256
802121a4:	10bfffc4 	addi	r2,r2,-1
802121a8:	11808836 	bltu	r2,r6,802123cc <__udivdi3+0x51c>
802121ac:	00800404 	movi	r2,16
802121b0:	003f5606 	br	80211f0c <__reset+0xfa1f1f0c>
802121b4:	30aed83a 	srl	r23,r6,r2
802121b8:	3d4e983a 	sll	r7,r7,r21
802121bc:	80acd83a 	srl	r22,r16,r2
802121c0:	9884d83a 	srl	r2,r19,r2
802121c4:	3deeb03a 	or	r23,r7,r23
802121c8:	b824d43a 	srli	r18,r23,16
802121cc:	8560983a 	sll	r16,r16,r21
802121d0:	b009883a 	mov	r4,r22
802121d4:	900b883a 	mov	r5,r18
802121d8:	3568983a 	sll	r20,r6,r21
802121dc:	1420b03a 	or	r16,r2,r16
802121e0:	0212abc0 	call	80212abc <__umodsi3>
802121e4:	b009883a 	mov	r4,r22
802121e8:	900b883a 	mov	r5,r18
802121ec:	1023883a 	mov	r17,r2
802121f0:	0212a580 	call	80212a58 <__udivsi3>
802121f4:	8808943a 	slli	r4,r17,16
802121f8:	bf3fffcc 	andi	fp,r23,65535
802121fc:	8006d43a 	srli	r3,r16,16
80212200:	e0a3383a 	mul	r17,fp,r2
80212204:	100d883a 	mov	r6,r2
80212208:	1906b03a 	or	r3,r3,r4
8021220c:	1c40042e 	bgeu	r3,r17,80212220 <__udivdi3+0x370>
80212210:	1dc7883a 	add	r3,r3,r23
80212214:	10bfffc4 	addi	r2,r2,-1
80212218:	1dc0752e 	bgeu	r3,r23,802123f0 <__udivdi3+0x540>
8021221c:	100d883a 	mov	r6,r2
80212220:	1c63c83a 	sub	r17,r3,r17
80212224:	900b883a 	mov	r5,r18
80212228:	8809883a 	mov	r4,r17
8021222c:	d9800015 	stw	r6,0(sp)
80212230:	0212abc0 	call	80212abc <__umodsi3>
80212234:	102d883a 	mov	r22,r2
80212238:	8809883a 	mov	r4,r17
8021223c:	900b883a 	mov	r5,r18
80212240:	0212a580 	call	80212a58 <__udivsi3>
80212244:	b02c943a 	slli	r22,r22,16
80212248:	e089383a 	mul	r4,fp,r2
8021224c:	843fffcc 	andi	r16,r16,65535
80212250:	85a0b03a 	or	r16,r16,r22
80212254:	d9800017 	ldw	r6,0(sp)
80212258:	8100042e 	bgeu	r16,r4,8021226c <__udivdi3+0x3bc>
8021225c:	85e1883a 	add	r16,r16,r23
80212260:	10ffffc4 	addi	r3,r2,-1
80212264:	85c05e2e 	bgeu	r16,r23,802123e0 <__udivdi3+0x530>
80212268:	1805883a 	mov	r2,r3
8021226c:	300c943a 	slli	r6,r6,16
80212270:	a17fffcc 	andi	r5,r20,65535
80212274:	a028d43a 	srli	r20,r20,16
80212278:	3084b03a 	or	r2,r6,r2
8021227c:	10ffffcc 	andi	r3,r2,65535
80212280:	100cd43a 	srli	r6,r2,16
80212284:	194f383a 	mul	r7,r3,r5
80212288:	1d07383a 	mul	r3,r3,r20
8021228c:	314b383a 	mul	r5,r6,r5
80212290:	3810d43a 	srli	r8,r7,16
80212294:	8121c83a 	sub	r16,r16,r4
80212298:	1947883a 	add	r3,r3,r5
8021229c:	40c7883a 	add	r3,r8,r3
802122a0:	350d383a 	mul	r6,r6,r20
802122a4:	1940022e 	bgeu	r3,r5,802122b0 <__udivdi3+0x400>
802122a8:	01000074 	movhi	r4,1
802122ac:	310d883a 	add	r6,r6,r4
802122b0:	1828d43a 	srli	r20,r3,16
802122b4:	a18d883a 	add	r6,r20,r6
802122b8:	81803e36 	bltu	r16,r6,802123b4 <__udivdi3+0x504>
802122bc:	81803826 	beq	r16,r6,802123a0 <__udivdi3+0x4f0>
802122c0:	0007883a 	mov	r3,zero
802122c4:	003fa206 	br	80212150 <__reset+0xfa1f2150>
802122c8:	88e2983a 	sll	r17,r17,r3
802122cc:	80a8d83a 	srl	r20,r16,r2
802122d0:	80e0983a 	sll	r16,r16,r3
802122d4:	882ad43a 	srli	r21,r17,16
802122d8:	9884d83a 	srl	r2,r19,r2
802122dc:	a009883a 	mov	r4,r20
802122e0:	a80b883a 	mov	r5,r21
802122e4:	142eb03a 	or	r23,r2,r16
802122e8:	98e4983a 	sll	r18,r19,r3
802122ec:	0212abc0 	call	80212abc <__umodsi3>
802122f0:	a009883a 	mov	r4,r20
802122f4:	a80b883a 	mov	r5,r21
802122f8:	1021883a 	mov	r16,r2
802122fc:	0212a580 	call	80212a58 <__udivsi3>
80212300:	1039883a 	mov	fp,r2
80212304:	8d3fffcc 	andi	r20,r17,65535
80212308:	8020943a 	slli	r16,r16,16
8021230c:	b804d43a 	srli	r2,r23,16
80212310:	a72d383a 	mul	r22,r20,fp
80212314:	1404b03a 	or	r2,r2,r16
80212318:	1580062e 	bgeu	r2,r22,80212334 <__udivdi3+0x484>
8021231c:	1445883a 	add	r2,r2,r17
80212320:	e0ffffc4 	addi	r3,fp,-1
80212324:	14403836 	bltu	r2,r17,80212408 <__udivdi3+0x558>
80212328:	1580372e 	bgeu	r2,r22,80212408 <__udivdi3+0x558>
8021232c:	e73fff84 	addi	fp,fp,-2
80212330:	1445883a 	add	r2,r2,r17
80212334:	15adc83a 	sub	r22,r2,r22
80212338:	a80b883a 	mov	r5,r21
8021233c:	b009883a 	mov	r4,r22
80212340:	0212abc0 	call	80212abc <__umodsi3>
80212344:	1027883a 	mov	r19,r2
80212348:	b009883a 	mov	r4,r22
8021234c:	a80b883a 	mov	r5,r21
80212350:	0212a580 	call	80212a58 <__udivsi3>
80212354:	9826943a 	slli	r19,r19,16
80212358:	a0a1383a 	mul	r16,r20,r2
8021235c:	b93fffcc 	andi	r4,r23,65535
80212360:	24c8b03a 	or	r4,r4,r19
80212364:	2400062e 	bgeu	r4,r16,80212380 <__udivdi3+0x4d0>
80212368:	2449883a 	add	r4,r4,r17
8021236c:	10ffffc4 	addi	r3,r2,-1
80212370:	24402336 	bltu	r4,r17,80212400 <__udivdi3+0x550>
80212374:	2400222e 	bgeu	r4,r16,80212400 <__udivdi3+0x550>
80212378:	10bfff84 	addi	r2,r2,-2
8021237c:	2449883a 	add	r4,r4,r17
80212380:	e038943a 	slli	fp,fp,16
80212384:	2421c83a 	sub	r16,r4,r16
80212388:	e086b03a 	or	r3,fp,r2
8021238c:	003f4306 	br	8021209c <__reset+0xfa1f209c>
80212390:	2005883a 	mov	r2,r4
80212394:	003f6906 	br	8021213c <__reset+0xfa1f213c>
80212398:	1805883a 	mov	r2,r3
8021239c:	003f0f06 	br	80211fdc <__reset+0xfa1f1fdc>
802123a0:	1806943a 	slli	r3,r3,16
802123a4:	9d66983a 	sll	r19,r19,r21
802123a8:	39ffffcc 	andi	r7,r7,65535
802123ac:	19c7883a 	add	r3,r3,r7
802123b0:	98ffc32e 	bgeu	r19,r3,802122c0 <__reset+0xfa1f22c0>
802123b4:	10bfffc4 	addi	r2,r2,-1
802123b8:	003fc106 	br	802122c0 <__reset+0xfa1f22c0>
802123bc:	00800604 	movi	r2,24
802123c0:	003f1106 	br	80212008 <__reset+0xfa1f2008>
802123c4:	00800604 	movi	r2,24
802123c8:	003f2706 	br	80212068 <__reset+0xfa1f2068>
802123cc:	00800604 	movi	r2,24
802123d0:	003ece06 	br	80211f0c <__reset+0xfa1f1f0c>
802123d4:	0007883a 	mov	r3,zero
802123d8:	00800044 	movi	r2,1
802123dc:	003f5c06 	br	80212150 <__reset+0xfa1f2150>
802123e0:	813fa12e 	bgeu	r16,r4,80212268 <__reset+0xfa1f2268>
802123e4:	10bfff84 	addi	r2,r2,-2
802123e8:	85e1883a 	add	r16,r16,r23
802123ec:	003f9f06 	br	8021226c <__reset+0xfa1f226c>
802123f0:	1c7f8a2e 	bgeu	r3,r17,8021221c <__reset+0xfa1f221c>
802123f4:	31bfff84 	addi	r6,r6,-2
802123f8:	1dc7883a 	add	r3,r3,r23
802123fc:	003f8806 	br	80212220 <__reset+0xfa1f2220>
80212400:	1805883a 	mov	r2,r3
80212404:	003fde06 	br	80212380 <__reset+0xfa1f2380>
80212408:	1839883a 	mov	fp,r3
8021240c:	003fc906 	br	80212334 <__reset+0xfa1f2334>
80212410:	b5bfff84 	addi	r22,r22,-2
80212414:	2449883a 	add	r4,r4,r17
80212418:	003f3406 	br	802120ec <__reset+0xfa1f20ec>
8021241c:	b5bfff84 	addi	r22,r22,-2
80212420:	1445883a 	add	r2,r2,r17
80212424:	003edb06 	br	80211f94 <__reset+0xfa1f1f94>

80212428 <__umoddi3>:
80212428:	defff404 	addi	sp,sp,-48
8021242c:	df000a15 	stw	fp,40(sp)
80212430:	dc400315 	stw	r17,12(sp)
80212434:	dc000215 	stw	r16,8(sp)
80212438:	dfc00b15 	stw	ra,44(sp)
8021243c:	ddc00915 	stw	r23,36(sp)
80212440:	dd800815 	stw	r22,32(sp)
80212444:	dd400715 	stw	r21,28(sp)
80212448:	dd000615 	stw	r20,24(sp)
8021244c:	dcc00515 	stw	r19,20(sp)
80212450:	dc800415 	stw	r18,16(sp)
80212454:	2021883a 	mov	r16,r4
80212458:	2823883a 	mov	r17,r5
8021245c:	2839883a 	mov	fp,r5
80212460:	38003c1e 	bne	r7,zero,80212554 <__umoddi3+0x12c>
80212464:	3027883a 	mov	r19,r6
80212468:	2029883a 	mov	r20,r4
8021246c:	2980512e 	bgeu	r5,r6,802125b4 <__umoddi3+0x18c>
80212470:	00bfffd4 	movui	r2,65535
80212474:	11809a36 	bltu	r2,r6,802126e0 <__umoddi3+0x2b8>
80212478:	01003fc4 	movi	r4,255
8021247c:	2189803a 	cmpltu	r4,r4,r6
80212480:	200890fa 	slli	r4,r4,3
80212484:	3104d83a 	srl	r2,r6,r4
80212488:	00e008b4 	movhi	r3,32802
8021248c:	18ec7bc4 	addi	r3,r3,-19985
80212490:	1885883a 	add	r2,r3,r2
80212494:	10c00003 	ldbu	r3,0(r2)
80212498:	00800804 	movi	r2,32
8021249c:	1909883a 	add	r4,r3,r4
802124a0:	1125c83a 	sub	r18,r2,r4
802124a4:	90000526 	beq	r18,zero,802124bc <__umoddi3+0x94>
802124a8:	8ca2983a 	sll	r17,r17,r18
802124ac:	8108d83a 	srl	r4,r16,r4
802124b0:	34a6983a 	sll	r19,r6,r18
802124b4:	84a8983a 	sll	r20,r16,r18
802124b8:	2478b03a 	or	fp,r4,r17
802124bc:	982ed43a 	srli	r23,r19,16
802124c0:	e009883a 	mov	r4,fp
802124c4:	9dbfffcc 	andi	r22,r19,65535
802124c8:	b80b883a 	mov	r5,r23
802124cc:	0212abc0 	call	80212abc <__umodsi3>
802124d0:	e009883a 	mov	r4,fp
802124d4:	b80b883a 	mov	r5,r23
802124d8:	102b883a 	mov	r21,r2
802124dc:	0212a580 	call	80212a58 <__udivsi3>
802124e0:	a806943a 	slli	r3,r21,16
802124e4:	a008d43a 	srli	r4,r20,16
802124e8:	b085383a 	mul	r2,r22,r2
802124ec:	20c8b03a 	or	r4,r4,r3
802124f0:	2080032e 	bgeu	r4,r2,80212500 <__umoddi3+0xd8>
802124f4:	24c9883a 	add	r4,r4,r19
802124f8:	24c00136 	bltu	r4,r19,80212500 <__umoddi3+0xd8>
802124fc:	20811036 	bltu	r4,r2,80212940 <__umoddi3+0x518>
80212500:	20abc83a 	sub	r21,r4,r2
80212504:	b80b883a 	mov	r5,r23
80212508:	a809883a 	mov	r4,r21
8021250c:	0212abc0 	call	80212abc <__umodsi3>
80212510:	1023883a 	mov	r17,r2
80212514:	b80b883a 	mov	r5,r23
80212518:	a809883a 	mov	r4,r21
8021251c:	0212a580 	call	80212a58 <__udivsi3>
80212520:	8822943a 	slli	r17,r17,16
80212524:	b085383a 	mul	r2,r22,r2
80212528:	a0ffffcc 	andi	r3,r20,65535
8021252c:	1c46b03a 	or	r3,r3,r17
80212530:	1880042e 	bgeu	r3,r2,80212544 <__umoddi3+0x11c>
80212534:	1cc7883a 	add	r3,r3,r19
80212538:	1cc00236 	bltu	r3,r19,80212544 <__umoddi3+0x11c>
8021253c:	1880012e 	bgeu	r3,r2,80212544 <__umoddi3+0x11c>
80212540:	1cc7883a 	add	r3,r3,r19
80212544:	1885c83a 	sub	r2,r3,r2
80212548:	1484d83a 	srl	r2,r2,r18
8021254c:	0007883a 	mov	r3,zero
80212550:	00004f06 	br	80212690 <__umoddi3+0x268>
80212554:	29c04c36 	bltu	r5,r7,80212688 <__umoddi3+0x260>
80212558:	00bfffd4 	movui	r2,65535
8021255c:	11c0582e 	bgeu	r2,r7,802126c0 <__umoddi3+0x298>
80212560:	00804034 	movhi	r2,256
80212564:	10bfffc4 	addi	r2,r2,-1
80212568:	11c0e736 	bltu	r2,r7,80212908 <__umoddi3+0x4e0>
8021256c:	01000404 	movi	r4,16
80212570:	3904d83a 	srl	r2,r7,r4
80212574:	00e008b4 	movhi	r3,32802
80212578:	18ec7bc4 	addi	r3,r3,-19985
8021257c:	1885883a 	add	r2,r3,r2
80212580:	14c00003 	ldbu	r19,0(r2)
80212584:	00c00804 	movi	r3,32
80212588:	9927883a 	add	r19,r19,r4
8021258c:	1ce9c83a 	sub	r20,r3,r19
80212590:	a000581e 	bne	r20,zero,802126f4 <__umoddi3+0x2cc>
80212594:	3c400136 	bltu	r7,r17,8021259c <__umoddi3+0x174>
80212598:	8180eb36 	bltu	r16,r6,80212948 <__umoddi3+0x520>
8021259c:	8185c83a 	sub	r2,r16,r6
802125a0:	89e3c83a 	sub	r17,r17,r7
802125a4:	8089803a 	cmpltu	r4,r16,r2
802125a8:	8939c83a 	sub	fp,r17,r4
802125ac:	e007883a 	mov	r3,fp
802125b0:	00003706 	br	80212690 <__umoddi3+0x268>
802125b4:	3000041e 	bne	r6,zero,802125c8 <__umoddi3+0x1a0>
802125b8:	000b883a 	mov	r5,zero
802125bc:	01000044 	movi	r4,1
802125c0:	0212a580 	call	80212a58 <__udivsi3>
802125c4:	1027883a 	mov	r19,r2
802125c8:	00bfffd4 	movui	r2,65535
802125cc:	14c0402e 	bgeu	r2,r19,802126d0 <__umoddi3+0x2a8>
802125d0:	00804034 	movhi	r2,256
802125d4:	10bfffc4 	addi	r2,r2,-1
802125d8:	14c0cd36 	bltu	r2,r19,80212910 <__umoddi3+0x4e8>
802125dc:	00800404 	movi	r2,16
802125e0:	9886d83a 	srl	r3,r19,r2
802125e4:	012008b4 	movhi	r4,32802
802125e8:	212c7bc4 	addi	r4,r4,-19985
802125ec:	20c7883a 	add	r3,r4,r3
802125f0:	18c00003 	ldbu	r3,0(r3)
802125f4:	1887883a 	add	r3,r3,r2
802125f8:	00800804 	movi	r2,32
802125fc:	10e5c83a 	sub	r18,r2,r3
80212600:	9000901e 	bne	r18,zero,80212844 <__umoddi3+0x41c>
80212604:	982cd43a 	srli	r22,r19,16
80212608:	8ce3c83a 	sub	r17,r17,r19
8021260c:	9d7fffcc 	andi	r21,r19,65535
80212610:	b00b883a 	mov	r5,r22
80212614:	8809883a 	mov	r4,r17
80212618:	0212abc0 	call	80212abc <__umodsi3>
8021261c:	8809883a 	mov	r4,r17
80212620:	b00b883a 	mov	r5,r22
80212624:	1021883a 	mov	r16,r2
80212628:	0212a580 	call	80212a58 <__udivsi3>
8021262c:	8006943a 	slli	r3,r16,16
80212630:	a008d43a 	srli	r4,r20,16
80212634:	1545383a 	mul	r2,r2,r21
80212638:	20c8b03a 	or	r4,r4,r3
8021263c:	2080042e 	bgeu	r4,r2,80212650 <__umoddi3+0x228>
80212640:	24c9883a 	add	r4,r4,r19
80212644:	24c00236 	bltu	r4,r19,80212650 <__umoddi3+0x228>
80212648:	2080012e 	bgeu	r4,r2,80212650 <__umoddi3+0x228>
8021264c:	24c9883a 	add	r4,r4,r19
80212650:	20a1c83a 	sub	r16,r4,r2
80212654:	b00b883a 	mov	r5,r22
80212658:	8009883a 	mov	r4,r16
8021265c:	0212abc0 	call	80212abc <__umodsi3>
80212660:	1023883a 	mov	r17,r2
80212664:	b00b883a 	mov	r5,r22
80212668:	8009883a 	mov	r4,r16
8021266c:	0212a580 	call	80212a58 <__udivsi3>
80212670:	8822943a 	slli	r17,r17,16
80212674:	1545383a 	mul	r2,r2,r21
80212678:	a53fffcc 	andi	r20,r20,65535
8021267c:	a446b03a 	or	r3,r20,r17
80212680:	18bfb02e 	bgeu	r3,r2,80212544 <__reset+0xfa1f2544>
80212684:	003fab06 	br	80212534 <__reset+0xfa1f2534>
80212688:	2005883a 	mov	r2,r4
8021268c:	2807883a 	mov	r3,r5
80212690:	dfc00b17 	ldw	ra,44(sp)
80212694:	df000a17 	ldw	fp,40(sp)
80212698:	ddc00917 	ldw	r23,36(sp)
8021269c:	dd800817 	ldw	r22,32(sp)
802126a0:	dd400717 	ldw	r21,28(sp)
802126a4:	dd000617 	ldw	r20,24(sp)
802126a8:	dcc00517 	ldw	r19,20(sp)
802126ac:	dc800417 	ldw	r18,16(sp)
802126b0:	dc400317 	ldw	r17,12(sp)
802126b4:	dc000217 	ldw	r16,8(sp)
802126b8:	dec00c04 	addi	sp,sp,48
802126bc:	f800283a 	ret
802126c0:	04c03fc4 	movi	r19,255
802126c4:	99c9803a 	cmpltu	r4,r19,r7
802126c8:	200890fa 	slli	r4,r4,3
802126cc:	003fa806 	br	80212570 <__reset+0xfa1f2570>
802126d0:	00803fc4 	movi	r2,255
802126d4:	14c5803a 	cmpltu	r2,r2,r19
802126d8:	100490fa 	slli	r2,r2,3
802126dc:	003fc006 	br	802125e0 <__reset+0xfa1f25e0>
802126e0:	00804034 	movhi	r2,256
802126e4:	10bfffc4 	addi	r2,r2,-1
802126e8:	11808b36 	bltu	r2,r6,80212918 <__umoddi3+0x4f0>
802126ec:	01000404 	movi	r4,16
802126f0:	003f6406 	br	80212484 <__reset+0xfa1f2484>
802126f4:	34c4d83a 	srl	r2,r6,r19
802126f8:	3d0e983a 	sll	r7,r7,r20
802126fc:	8cf8d83a 	srl	fp,r17,r19
80212700:	8d10983a 	sll	r8,r17,r20
80212704:	38aab03a 	or	r21,r7,r2
80212708:	a82cd43a 	srli	r22,r21,16
8021270c:	84e2d83a 	srl	r17,r16,r19
80212710:	e009883a 	mov	r4,fp
80212714:	b00b883a 	mov	r5,r22
80212718:	8a22b03a 	or	r17,r17,r8
8021271c:	3524983a 	sll	r18,r6,r20
80212720:	0212abc0 	call	80212abc <__umodsi3>
80212724:	e009883a 	mov	r4,fp
80212728:	b00b883a 	mov	r5,r22
8021272c:	102f883a 	mov	r23,r2
80212730:	0212a580 	call	80212a58 <__udivsi3>
80212734:	100d883a 	mov	r6,r2
80212738:	b808943a 	slli	r4,r23,16
8021273c:	aa3fffcc 	andi	r8,r21,65535
80212740:	8804d43a 	srli	r2,r17,16
80212744:	41af383a 	mul	r23,r8,r6
80212748:	8520983a 	sll	r16,r16,r20
8021274c:	1104b03a 	or	r2,r2,r4
80212750:	15c0042e 	bgeu	r2,r23,80212764 <__umoddi3+0x33c>
80212754:	1545883a 	add	r2,r2,r21
80212758:	30ffffc4 	addi	r3,r6,-1
8021275c:	1540742e 	bgeu	r2,r21,80212930 <__umoddi3+0x508>
80212760:	180d883a 	mov	r6,r3
80212764:	15efc83a 	sub	r23,r2,r23
80212768:	b00b883a 	mov	r5,r22
8021276c:	b809883a 	mov	r4,r23
80212770:	d9800115 	stw	r6,4(sp)
80212774:	da000015 	stw	r8,0(sp)
80212778:	0212abc0 	call	80212abc <__umodsi3>
8021277c:	b00b883a 	mov	r5,r22
80212780:	b809883a 	mov	r4,r23
80212784:	1039883a 	mov	fp,r2
80212788:	0212a580 	call	80212a58 <__udivsi3>
8021278c:	da000017 	ldw	r8,0(sp)
80212790:	e038943a 	slli	fp,fp,16
80212794:	100b883a 	mov	r5,r2
80212798:	4089383a 	mul	r4,r8,r2
8021279c:	8a3fffcc 	andi	r8,r17,65535
802127a0:	4710b03a 	or	r8,r8,fp
802127a4:	d9800117 	ldw	r6,4(sp)
802127a8:	4100042e 	bgeu	r8,r4,802127bc <__umoddi3+0x394>
802127ac:	4551883a 	add	r8,r8,r21
802127b0:	10bfffc4 	addi	r2,r2,-1
802127b4:	45405a2e 	bgeu	r8,r21,80212920 <__umoddi3+0x4f8>
802127b8:	100b883a 	mov	r5,r2
802127bc:	300c943a 	slli	r6,r6,16
802127c0:	91ffffcc 	andi	r7,r18,65535
802127c4:	9004d43a 	srli	r2,r18,16
802127c8:	314cb03a 	or	r6,r6,r5
802127cc:	317fffcc 	andi	r5,r6,65535
802127d0:	300cd43a 	srli	r6,r6,16
802127d4:	29d3383a 	mul	r9,r5,r7
802127d8:	288b383a 	mul	r5,r5,r2
802127dc:	31cf383a 	mul	r7,r6,r7
802127e0:	4806d43a 	srli	r3,r9,16
802127e4:	4111c83a 	sub	r8,r8,r4
802127e8:	29cb883a 	add	r5,r5,r7
802127ec:	194b883a 	add	r5,r3,r5
802127f0:	3085383a 	mul	r2,r6,r2
802127f4:	29c0022e 	bgeu	r5,r7,80212800 <__umoddi3+0x3d8>
802127f8:	00c00074 	movhi	r3,1
802127fc:	10c5883a 	add	r2,r2,r3
80212800:	2808d43a 	srli	r4,r5,16
80212804:	280a943a 	slli	r5,r5,16
80212808:	4a7fffcc 	andi	r9,r9,65535
8021280c:	2085883a 	add	r2,r4,r2
80212810:	2a4b883a 	add	r5,r5,r9
80212814:	40803636 	bltu	r8,r2,802128f0 <__umoddi3+0x4c8>
80212818:	40804d26 	beq	r8,r2,80212950 <__umoddi3+0x528>
8021281c:	4089c83a 	sub	r4,r8,r2
80212820:	280f883a 	mov	r7,r5
80212824:	81cfc83a 	sub	r7,r16,r7
80212828:	81c7803a 	cmpltu	r3,r16,r7
8021282c:	20c7c83a 	sub	r3,r4,r3
80212830:	1cc4983a 	sll	r2,r3,r19
80212834:	3d0ed83a 	srl	r7,r7,r20
80212838:	1d06d83a 	srl	r3,r3,r20
8021283c:	11c4b03a 	or	r2,r2,r7
80212840:	003f9306 	br	80212690 <__reset+0xfa1f2690>
80212844:	9ca6983a 	sll	r19,r19,r18
80212848:	88e8d83a 	srl	r20,r17,r3
8021284c:	80c4d83a 	srl	r2,r16,r3
80212850:	982cd43a 	srli	r22,r19,16
80212854:	8ca2983a 	sll	r17,r17,r18
80212858:	a009883a 	mov	r4,r20
8021285c:	b00b883a 	mov	r5,r22
80212860:	1478b03a 	or	fp,r2,r17
80212864:	0212abc0 	call	80212abc <__umodsi3>
80212868:	a009883a 	mov	r4,r20
8021286c:	b00b883a 	mov	r5,r22
80212870:	1023883a 	mov	r17,r2
80212874:	0212a580 	call	80212a58 <__udivsi3>
80212878:	9d7fffcc 	andi	r21,r19,65535
8021287c:	880a943a 	slli	r5,r17,16
80212880:	e008d43a 	srli	r4,fp,16
80212884:	a885383a 	mul	r2,r21,r2
80212888:	84a8983a 	sll	r20,r16,r18
8021288c:	2148b03a 	or	r4,r4,r5
80212890:	2080042e 	bgeu	r4,r2,802128a4 <__umoddi3+0x47c>
80212894:	24c9883a 	add	r4,r4,r19
80212898:	24c00236 	bltu	r4,r19,802128a4 <__umoddi3+0x47c>
8021289c:	2080012e 	bgeu	r4,r2,802128a4 <__umoddi3+0x47c>
802128a0:	24c9883a 	add	r4,r4,r19
802128a4:	20a3c83a 	sub	r17,r4,r2
802128a8:	b00b883a 	mov	r5,r22
802128ac:	8809883a 	mov	r4,r17
802128b0:	0212abc0 	call	80212abc <__umodsi3>
802128b4:	102f883a 	mov	r23,r2
802128b8:	8809883a 	mov	r4,r17
802128bc:	b00b883a 	mov	r5,r22
802128c0:	0212a580 	call	80212a58 <__udivsi3>
802128c4:	b82e943a 	slli	r23,r23,16
802128c8:	a885383a 	mul	r2,r21,r2
802128cc:	e13fffcc 	andi	r4,fp,65535
802128d0:	25c8b03a 	or	r4,r4,r23
802128d4:	2080042e 	bgeu	r4,r2,802128e8 <__umoddi3+0x4c0>
802128d8:	24c9883a 	add	r4,r4,r19
802128dc:	24c00236 	bltu	r4,r19,802128e8 <__umoddi3+0x4c0>
802128e0:	2080012e 	bgeu	r4,r2,802128e8 <__umoddi3+0x4c0>
802128e4:	24c9883a 	add	r4,r4,r19
802128e8:	20a3c83a 	sub	r17,r4,r2
802128ec:	003f4806 	br	80212610 <__reset+0xfa1f2610>
802128f0:	2c8fc83a 	sub	r7,r5,r18
802128f4:	1545c83a 	sub	r2,r2,r21
802128f8:	29cb803a 	cmpltu	r5,r5,r7
802128fc:	1145c83a 	sub	r2,r2,r5
80212900:	4089c83a 	sub	r4,r8,r2
80212904:	003fc706 	br	80212824 <__reset+0xfa1f2824>
80212908:	01000604 	movi	r4,24
8021290c:	003f1806 	br	80212570 <__reset+0xfa1f2570>
80212910:	00800604 	movi	r2,24
80212914:	003f3206 	br	802125e0 <__reset+0xfa1f25e0>
80212918:	01000604 	movi	r4,24
8021291c:	003ed906 	br	80212484 <__reset+0xfa1f2484>
80212920:	413fa52e 	bgeu	r8,r4,802127b8 <__reset+0xfa1f27b8>
80212924:	297fff84 	addi	r5,r5,-2
80212928:	4551883a 	add	r8,r8,r21
8021292c:	003fa306 	br	802127bc <__reset+0xfa1f27bc>
80212930:	15ff8b2e 	bgeu	r2,r23,80212760 <__reset+0xfa1f2760>
80212934:	31bfff84 	addi	r6,r6,-2
80212938:	1545883a 	add	r2,r2,r21
8021293c:	003f8906 	br	80212764 <__reset+0xfa1f2764>
80212940:	24c9883a 	add	r4,r4,r19
80212944:	003eee06 	br	80212500 <__reset+0xfa1f2500>
80212948:	8005883a 	mov	r2,r16
8021294c:	003f1706 	br	802125ac <__reset+0xfa1f25ac>
80212950:	817fe736 	bltu	r16,r5,802128f0 <__reset+0xfa1f28f0>
80212954:	280f883a 	mov	r7,r5
80212958:	0009883a 	mov	r4,zero
8021295c:	003fb106 	br	80212824 <__reset+0xfa1f2824>

80212960 <__divsi3>:
80212960:	20001b16 	blt	r4,zero,802129d0 <__divsi3+0x70>
80212964:	000f883a 	mov	r7,zero
80212968:	28001616 	blt	r5,zero,802129c4 <__divsi3+0x64>
8021296c:	200d883a 	mov	r6,r4
80212970:	29001a2e 	bgeu	r5,r4,802129dc <__divsi3+0x7c>
80212974:	00800804 	movi	r2,32
80212978:	00c00044 	movi	r3,1
8021297c:	00000106 	br	80212984 <__divsi3+0x24>
80212980:	10000d26 	beq	r2,zero,802129b8 <__divsi3+0x58>
80212984:	294b883a 	add	r5,r5,r5
80212988:	10bfffc4 	addi	r2,r2,-1
8021298c:	18c7883a 	add	r3,r3,r3
80212990:	293ffb36 	bltu	r5,r4,80212980 <__reset+0xfa1f2980>
80212994:	0005883a 	mov	r2,zero
80212998:	18000726 	beq	r3,zero,802129b8 <__divsi3+0x58>
8021299c:	0005883a 	mov	r2,zero
802129a0:	31400236 	bltu	r6,r5,802129ac <__divsi3+0x4c>
802129a4:	314dc83a 	sub	r6,r6,r5
802129a8:	10c4b03a 	or	r2,r2,r3
802129ac:	1806d07a 	srli	r3,r3,1
802129b0:	280ad07a 	srli	r5,r5,1
802129b4:	183ffa1e 	bne	r3,zero,802129a0 <__reset+0xfa1f29a0>
802129b8:	38000126 	beq	r7,zero,802129c0 <__divsi3+0x60>
802129bc:	0085c83a 	sub	r2,zero,r2
802129c0:	f800283a 	ret
802129c4:	014bc83a 	sub	r5,zero,r5
802129c8:	39c0005c 	xori	r7,r7,1
802129cc:	003fe706 	br	8021296c <__reset+0xfa1f296c>
802129d0:	0109c83a 	sub	r4,zero,r4
802129d4:	01c00044 	movi	r7,1
802129d8:	003fe306 	br	80212968 <__reset+0xfa1f2968>
802129dc:	00c00044 	movi	r3,1
802129e0:	003fee06 	br	8021299c <__reset+0xfa1f299c>

802129e4 <__modsi3>:
802129e4:	20001716 	blt	r4,zero,80212a44 <__modsi3+0x60>
802129e8:	000f883a 	mov	r7,zero
802129ec:	2005883a 	mov	r2,r4
802129f0:	28001216 	blt	r5,zero,80212a3c <__modsi3+0x58>
802129f4:	2900162e 	bgeu	r5,r4,80212a50 <__modsi3+0x6c>
802129f8:	01800804 	movi	r6,32
802129fc:	00c00044 	movi	r3,1
80212a00:	00000106 	br	80212a08 <__modsi3+0x24>
80212a04:	30000a26 	beq	r6,zero,80212a30 <__modsi3+0x4c>
80212a08:	294b883a 	add	r5,r5,r5
80212a0c:	31bfffc4 	addi	r6,r6,-1
80212a10:	18c7883a 	add	r3,r3,r3
80212a14:	293ffb36 	bltu	r5,r4,80212a04 <__reset+0xfa1f2a04>
80212a18:	18000526 	beq	r3,zero,80212a30 <__modsi3+0x4c>
80212a1c:	1806d07a 	srli	r3,r3,1
80212a20:	11400136 	bltu	r2,r5,80212a28 <__modsi3+0x44>
80212a24:	1145c83a 	sub	r2,r2,r5
80212a28:	280ad07a 	srli	r5,r5,1
80212a2c:	183ffb1e 	bne	r3,zero,80212a1c <__reset+0xfa1f2a1c>
80212a30:	38000126 	beq	r7,zero,80212a38 <__modsi3+0x54>
80212a34:	0085c83a 	sub	r2,zero,r2
80212a38:	f800283a 	ret
80212a3c:	014bc83a 	sub	r5,zero,r5
80212a40:	003fec06 	br	802129f4 <__reset+0xfa1f29f4>
80212a44:	0109c83a 	sub	r4,zero,r4
80212a48:	01c00044 	movi	r7,1
80212a4c:	003fe706 	br	802129ec <__reset+0xfa1f29ec>
80212a50:	00c00044 	movi	r3,1
80212a54:	003ff106 	br	80212a1c <__reset+0xfa1f2a1c>

80212a58 <__udivsi3>:
80212a58:	200d883a 	mov	r6,r4
80212a5c:	2900152e 	bgeu	r5,r4,80212ab4 <__udivsi3+0x5c>
80212a60:	28001416 	blt	r5,zero,80212ab4 <__udivsi3+0x5c>
80212a64:	00800804 	movi	r2,32
80212a68:	00c00044 	movi	r3,1
80212a6c:	00000206 	br	80212a78 <__udivsi3+0x20>
80212a70:	10000e26 	beq	r2,zero,80212aac <__udivsi3+0x54>
80212a74:	28000516 	blt	r5,zero,80212a8c <__udivsi3+0x34>
80212a78:	294b883a 	add	r5,r5,r5
80212a7c:	10bfffc4 	addi	r2,r2,-1
80212a80:	18c7883a 	add	r3,r3,r3
80212a84:	293ffa36 	bltu	r5,r4,80212a70 <__reset+0xfa1f2a70>
80212a88:	18000826 	beq	r3,zero,80212aac <__udivsi3+0x54>
80212a8c:	0005883a 	mov	r2,zero
80212a90:	31400236 	bltu	r6,r5,80212a9c <__udivsi3+0x44>
80212a94:	314dc83a 	sub	r6,r6,r5
80212a98:	10c4b03a 	or	r2,r2,r3
80212a9c:	1806d07a 	srli	r3,r3,1
80212aa0:	280ad07a 	srli	r5,r5,1
80212aa4:	183ffa1e 	bne	r3,zero,80212a90 <__reset+0xfa1f2a90>
80212aa8:	f800283a 	ret
80212aac:	0005883a 	mov	r2,zero
80212ab0:	f800283a 	ret
80212ab4:	00c00044 	movi	r3,1
80212ab8:	003ff406 	br	80212a8c <__reset+0xfa1f2a8c>

80212abc <__umodsi3>:
80212abc:	2005883a 	mov	r2,r4
80212ac0:	2900122e 	bgeu	r5,r4,80212b0c <__umodsi3+0x50>
80212ac4:	28001116 	blt	r5,zero,80212b0c <__umodsi3+0x50>
80212ac8:	01800804 	movi	r6,32
80212acc:	00c00044 	movi	r3,1
80212ad0:	00000206 	br	80212adc <__umodsi3+0x20>
80212ad4:	30000c26 	beq	r6,zero,80212b08 <__umodsi3+0x4c>
80212ad8:	28000516 	blt	r5,zero,80212af0 <__umodsi3+0x34>
80212adc:	294b883a 	add	r5,r5,r5
80212ae0:	31bfffc4 	addi	r6,r6,-1
80212ae4:	18c7883a 	add	r3,r3,r3
80212ae8:	293ffa36 	bltu	r5,r4,80212ad4 <__reset+0xfa1f2ad4>
80212aec:	18000626 	beq	r3,zero,80212b08 <__umodsi3+0x4c>
80212af0:	1806d07a 	srli	r3,r3,1
80212af4:	11400136 	bltu	r2,r5,80212afc <__umodsi3+0x40>
80212af8:	1145c83a 	sub	r2,r2,r5
80212afc:	280ad07a 	srli	r5,r5,1
80212b00:	183ffb1e 	bne	r3,zero,80212af0 <__reset+0xfa1f2af0>
80212b04:	f800283a 	ret
80212b08:	f800283a 	ret
80212b0c:	00c00044 	movi	r3,1
80212b10:	003ff706 	br	80212af0 <__reset+0xfa1f2af0>

80212b14 <__adddf3>:
80212b14:	02c00434 	movhi	r11,16
80212b18:	5affffc4 	addi	r11,r11,-1
80212b1c:	2806d7fa 	srli	r3,r5,31
80212b20:	2ad4703a 	and	r10,r5,r11
80212b24:	3ad2703a 	and	r9,r7,r11
80212b28:	3804d53a 	srli	r2,r7,20
80212b2c:	3018d77a 	srli	r12,r6,29
80212b30:	280ad53a 	srli	r5,r5,20
80212b34:	501490fa 	slli	r10,r10,3
80212b38:	2010d77a 	srli	r8,r4,29
80212b3c:	481290fa 	slli	r9,r9,3
80212b40:	380ed7fa 	srli	r7,r7,31
80212b44:	defffb04 	addi	sp,sp,-20
80212b48:	dc800215 	stw	r18,8(sp)
80212b4c:	dc400115 	stw	r17,4(sp)
80212b50:	dc000015 	stw	r16,0(sp)
80212b54:	dfc00415 	stw	ra,16(sp)
80212b58:	dcc00315 	stw	r19,12(sp)
80212b5c:	1c803fcc 	andi	r18,r3,255
80212b60:	2c01ffcc 	andi	r16,r5,2047
80212b64:	5210b03a 	or	r8,r10,r8
80212b68:	202290fa 	slli	r17,r4,3
80212b6c:	1081ffcc 	andi	r2,r2,2047
80212b70:	4b12b03a 	or	r9,r9,r12
80212b74:	300c90fa 	slli	r6,r6,3
80212b78:	91c07526 	beq	r18,r7,80212d50 <__adddf3+0x23c>
80212b7c:	8087c83a 	sub	r3,r16,r2
80212b80:	00c0ab0e 	bge	zero,r3,80212e30 <__adddf3+0x31c>
80212b84:	10002a1e 	bne	r2,zero,80212c30 <__adddf3+0x11c>
80212b88:	4984b03a 	or	r2,r9,r6
80212b8c:	1000961e 	bne	r2,zero,80212de8 <__adddf3+0x2d4>
80212b90:	888001cc 	andi	r2,r17,7
80212b94:	10000726 	beq	r2,zero,80212bb4 <__adddf3+0xa0>
80212b98:	888003cc 	andi	r2,r17,15
80212b9c:	00c00104 	movi	r3,4
80212ba0:	10c00426 	beq	r2,r3,80212bb4 <__adddf3+0xa0>
80212ba4:	88c7883a 	add	r3,r17,r3
80212ba8:	1c63803a 	cmpltu	r17,r3,r17
80212bac:	4451883a 	add	r8,r8,r17
80212bb0:	1823883a 	mov	r17,r3
80212bb4:	4080202c 	andhi	r2,r8,128
80212bb8:	10005926 	beq	r2,zero,80212d20 <__adddf3+0x20c>
80212bbc:	84000044 	addi	r16,r16,1
80212bc0:	0081ffc4 	movi	r2,2047
80212bc4:	8080ba26 	beq	r16,r2,80212eb0 <__adddf3+0x39c>
80212bc8:	00bfe034 	movhi	r2,65408
80212bcc:	10bfffc4 	addi	r2,r2,-1
80212bd0:	4090703a 	and	r8,r8,r2
80212bd4:	4004977a 	slli	r2,r8,29
80212bd8:	4010927a 	slli	r8,r8,9
80212bdc:	8822d0fa 	srli	r17,r17,3
80212be0:	8401ffcc 	andi	r16,r16,2047
80212be4:	4010d33a 	srli	r8,r8,12
80212be8:	9007883a 	mov	r3,r18
80212bec:	1444b03a 	or	r2,r2,r17
80212bf0:	8401ffcc 	andi	r16,r16,2047
80212bf4:	8020953a 	slli	r16,r16,20
80212bf8:	18c03fcc 	andi	r3,r3,255
80212bfc:	01000434 	movhi	r4,16
80212c00:	213fffc4 	addi	r4,r4,-1
80212c04:	180697fa 	slli	r3,r3,31
80212c08:	4110703a 	and	r8,r8,r4
80212c0c:	4410b03a 	or	r8,r8,r16
80212c10:	40c6b03a 	or	r3,r8,r3
80212c14:	dfc00417 	ldw	ra,16(sp)
80212c18:	dcc00317 	ldw	r19,12(sp)
80212c1c:	dc800217 	ldw	r18,8(sp)
80212c20:	dc400117 	ldw	r17,4(sp)
80212c24:	dc000017 	ldw	r16,0(sp)
80212c28:	dec00504 	addi	sp,sp,20
80212c2c:	f800283a 	ret
80212c30:	0081ffc4 	movi	r2,2047
80212c34:	80bfd626 	beq	r16,r2,80212b90 <__reset+0xfa1f2b90>
80212c38:	4a402034 	orhi	r9,r9,128
80212c3c:	00800e04 	movi	r2,56
80212c40:	10c09f16 	blt	r2,r3,80212ec0 <__adddf3+0x3ac>
80212c44:	008007c4 	movi	r2,31
80212c48:	10c0c216 	blt	r2,r3,80212f54 <__adddf3+0x440>
80212c4c:	00800804 	movi	r2,32
80212c50:	10c5c83a 	sub	r2,r2,r3
80212c54:	488a983a 	sll	r5,r9,r2
80212c58:	30c8d83a 	srl	r4,r6,r3
80212c5c:	3084983a 	sll	r2,r6,r2
80212c60:	48c6d83a 	srl	r3,r9,r3
80212c64:	290cb03a 	or	r6,r5,r4
80212c68:	1004c03a 	cmpne	r2,r2,zero
80212c6c:	308cb03a 	or	r6,r6,r2
80212c70:	898dc83a 	sub	r6,r17,r6
80212c74:	89a3803a 	cmpltu	r17,r17,r6
80212c78:	40d1c83a 	sub	r8,r8,r3
80212c7c:	4451c83a 	sub	r8,r8,r17
80212c80:	3023883a 	mov	r17,r6
80212c84:	4080202c 	andhi	r2,r8,128
80212c88:	10002326 	beq	r2,zero,80212d18 <__adddf3+0x204>
80212c8c:	04c02034 	movhi	r19,128
80212c90:	9cffffc4 	addi	r19,r19,-1
80212c94:	44e6703a 	and	r19,r8,r19
80212c98:	98007626 	beq	r19,zero,80212e74 <__adddf3+0x360>
80212c9c:	9809883a 	mov	r4,r19
80212ca0:	02050500 	call	80205050 <__clzsi2>
80212ca4:	10fffe04 	addi	r3,r2,-8
80212ca8:	010007c4 	movi	r4,31
80212cac:	20c07716 	blt	r4,r3,80212e8c <__adddf3+0x378>
80212cb0:	00800804 	movi	r2,32
80212cb4:	10c5c83a 	sub	r2,r2,r3
80212cb8:	8884d83a 	srl	r2,r17,r2
80212cbc:	98d0983a 	sll	r8,r19,r3
80212cc0:	88e2983a 	sll	r17,r17,r3
80212cc4:	1204b03a 	or	r2,r2,r8
80212cc8:	1c007416 	blt	r3,r16,80212e9c <__adddf3+0x388>
80212ccc:	1c21c83a 	sub	r16,r3,r16
80212cd0:	82000044 	addi	r8,r16,1
80212cd4:	00c007c4 	movi	r3,31
80212cd8:	1a009116 	blt	r3,r8,80212f20 <__adddf3+0x40c>
80212cdc:	00c00804 	movi	r3,32
80212ce0:	1a07c83a 	sub	r3,r3,r8
80212ce4:	8a08d83a 	srl	r4,r17,r8
80212ce8:	88e2983a 	sll	r17,r17,r3
80212cec:	10c6983a 	sll	r3,r2,r3
80212cf0:	1210d83a 	srl	r8,r2,r8
80212cf4:	8804c03a 	cmpne	r2,r17,zero
80212cf8:	1906b03a 	or	r3,r3,r4
80212cfc:	18a2b03a 	or	r17,r3,r2
80212d00:	0021883a 	mov	r16,zero
80212d04:	003fa206 	br	80212b90 <__reset+0xfa1f2b90>
80212d08:	1890b03a 	or	r8,r3,r2
80212d0c:	40017d26 	beq	r8,zero,80213304 <__adddf3+0x7f0>
80212d10:	1011883a 	mov	r8,r2
80212d14:	1823883a 	mov	r17,r3
80212d18:	888001cc 	andi	r2,r17,7
80212d1c:	103f9e1e 	bne	r2,zero,80212b98 <__reset+0xfa1f2b98>
80212d20:	4004977a 	slli	r2,r8,29
80212d24:	8822d0fa 	srli	r17,r17,3
80212d28:	4010d0fa 	srli	r8,r8,3
80212d2c:	9007883a 	mov	r3,r18
80212d30:	1444b03a 	or	r2,r2,r17
80212d34:	0101ffc4 	movi	r4,2047
80212d38:	81002426 	beq	r16,r4,80212dcc <__adddf3+0x2b8>
80212d3c:	8120703a 	and	r16,r16,r4
80212d40:	01000434 	movhi	r4,16
80212d44:	213fffc4 	addi	r4,r4,-1
80212d48:	4110703a 	and	r8,r8,r4
80212d4c:	003fa806 	br	80212bf0 <__reset+0xfa1f2bf0>
80212d50:	8089c83a 	sub	r4,r16,r2
80212d54:	01005e0e 	bge	zero,r4,80212ed0 <__adddf3+0x3bc>
80212d58:	10002b26 	beq	r2,zero,80212e08 <__adddf3+0x2f4>
80212d5c:	0081ffc4 	movi	r2,2047
80212d60:	80bf8b26 	beq	r16,r2,80212b90 <__reset+0xfa1f2b90>
80212d64:	4a402034 	orhi	r9,r9,128
80212d68:	00800e04 	movi	r2,56
80212d6c:	1100a40e 	bge	r2,r4,80213000 <__adddf3+0x4ec>
80212d70:	498cb03a 	or	r6,r9,r6
80212d74:	300ac03a 	cmpne	r5,r6,zero
80212d78:	0013883a 	mov	r9,zero
80212d7c:	2c4b883a 	add	r5,r5,r17
80212d80:	2c63803a 	cmpltu	r17,r5,r17
80212d84:	4a11883a 	add	r8,r9,r8
80212d88:	8a11883a 	add	r8,r17,r8
80212d8c:	2823883a 	mov	r17,r5
80212d90:	4080202c 	andhi	r2,r8,128
80212d94:	103fe026 	beq	r2,zero,80212d18 <__reset+0xfa1f2d18>
80212d98:	84000044 	addi	r16,r16,1
80212d9c:	0081ffc4 	movi	r2,2047
80212da0:	8080d226 	beq	r16,r2,802130ec <__adddf3+0x5d8>
80212da4:	00bfe034 	movhi	r2,65408
80212da8:	10bfffc4 	addi	r2,r2,-1
80212dac:	4090703a 	and	r8,r8,r2
80212db0:	880ad07a 	srli	r5,r17,1
80212db4:	400897fa 	slli	r4,r8,31
80212db8:	88c0004c 	andi	r3,r17,1
80212dbc:	28e2b03a 	or	r17,r5,r3
80212dc0:	4010d07a 	srli	r8,r8,1
80212dc4:	2462b03a 	or	r17,r4,r17
80212dc8:	003f7106 	br	80212b90 <__reset+0xfa1f2b90>
80212dcc:	4088b03a 	or	r4,r8,r2
80212dd0:	20014526 	beq	r4,zero,802132e8 <__adddf3+0x7d4>
80212dd4:	01000434 	movhi	r4,16
80212dd8:	42000234 	orhi	r8,r8,8
80212ddc:	213fffc4 	addi	r4,r4,-1
80212de0:	4110703a 	and	r8,r8,r4
80212de4:	003f8206 	br	80212bf0 <__reset+0xfa1f2bf0>
80212de8:	18ffffc4 	addi	r3,r3,-1
80212dec:	1800491e 	bne	r3,zero,80212f14 <__adddf3+0x400>
80212df0:	898bc83a 	sub	r5,r17,r6
80212df4:	8963803a 	cmpltu	r17,r17,r5
80212df8:	4251c83a 	sub	r8,r8,r9
80212dfc:	4451c83a 	sub	r8,r8,r17
80212e00:	2823883a 	mov	r17,r5
80212e04:	003f9f06 	br	80212c84 <__reset+0xfa1f2c84>
80212e08:	4984b03a 	or	r2,r9,r6
80212e0c:	103f6026 	beq	r2,zero,80212b90 <__reset+0xfa1f2b90>
80212e10:	213fffc4 	addi	r4,r4,-1
80212e14:	2000931e 	bne	r4,zero,80213064 <__adddf3+0x550>
80212e18:	898d883a 	add	r6,r17,r6
80212e1c:	3463803a 	cmpltu	r17,r6,r17
80212e20:	4251883a 	add	r8,r8,r9
80212e24:	8a11883a 	add	r8,r17,r8
80212e28:	3023883a 	mov	r17,r6
80212e2c:	003fd806 	br	80212d90 <__reset+0xfa1f2d90>
80212e30:	1800541e 	bne	r3,zero,80212f84 <__adddf3+0x470>
80212e34:	80800044 	addi	r2,r16,1
80212e38:	1081ffcc 	andi	r2,r2,2047
80212e3c:	00c00044 	movi	r3,1
80212e40:	1880a00e 	bge	r3,r2,802130c4 <__adddf3+0x5b0>
80212e44:	8989c83a 	sub	r4,r17,r6
80212e48:	8905803a 	cmpltu	r2,r17,r4
80212e4c:	4267c83a 	sub	r19,r8,r9
80212e50:	98a7c83a 	sub	r19,r19,r2
80212e54:	9880202c 	andhi	r2,r19,128
80212e58:	10006326 	beq	r2,zero,80212fe8 <__adddf3+0x4d4>
80212e5c:	3463c83a 	sub	r17,r6,r17
80212e60:	4a07c83a 	sub	r3,r9,r8
80212e64:	344d803a 	cmpltu	r6,r6,r17
80212e68:	19a7c83a 	sub	r19,r3,r6
80212e6c:	3825883a 	mov	r18,r7
80212e70:	983f8a1e 	bne	r19,zero,80212c9c <__reset+0xfa1f2c9c>
80212e74:	8809883a 	mov	r4,r17
80212e78:	02050500 	call	80205050 <__clzsi2>
80212e7c:	10800804 	addi	r2,r2,32
80212e80:	10fffe04 	addi	r3,r2,-8
80212e84:	010007c4 	movi	r4,31
80212e88:	20ff890e 	bge	r4,r3,80212cb0 <__reset+0xfa1f2cb0>
80212e8c:	10bff604 	addi	r2,r2,-40
80212e90:	8884983a 	sll	r2,r17,r2
80212e94:	0023883a 	mov	r17,zero
80212e98:	1c3f8c0e 	bge	r3,r16,80212ccc <__reset+0xfa1f2ccc>
80212e9c:	023fe034 	movhi	r8,65408
80212ea0:	423fffc4 	addi	r8,r8,-1
80212ea4:	80e1c83a 	sub	r16,r16,r3
80212ea8:	1210703a 	and	r8,r2,r8
80212eac:	003f3806 	br	80212b90 <__reset+0xfa1f2b90>
80212eb0:	9007883a 	mov	r3,r18
80212eb4:	0011883a 	mov	r8,zero
80212eb8:	0005883a 	mov	r2,zero
80212ebc:	003f4c06 	br	80212bf0 <__reset+0xfa1f2bf0>
80212ec0:	498cb03a 	or	r6,r9,r6
80212ec4:	300cc03a 	cmpne	r6,r6,zero
80212ec8:	0007883a 	mov	r3,zero
80212ecc:	003f6806 	br	80212c70 <__reset+0xfa1f2c70>
80212ed0:	20009c1e 	bne	r4,zero,80213144 <__adddf3+0x630>
80212ed4:	80800044 	addi	r2,r16,1
80212ed8:	1141ffcc 	andi	r5,r2,2047
80212edc:	01000044 	movi	r4,1
80212ee0:	2140670e 	bge	r4,r5,80213080 <__adddf3+0x56c>
80212ee4:	0101ffc4 	movi	r4,2047
80212ee8:	11007f26 	beq	r2,r4,802130e8 <__adddf3+0x5d4>
80212eec:	898d883a 	add	r6,r17,r6
80212ef0:	4247883a 	add	r3,r8,r9
80212ef4:	3451803a 	cmpltu	r8,r6,r17
80212ef8:	40d1883a 	add	r8,r8,r3
80212efc:	402297fa 	slli	r17,r8,31
80212f00:	300cd07a 	srli	r6,r6,1
80212f04:	4010d07a 	srli	r8,r8,1
80212f08:	1021883a 	mov	r16,r2
80212f0c:	89a2b03a 	or	r17,r17,r6
80212f10:	003f1f06 	br	80212b90 <__reset+0xfa1f2b90>
80212f14:	0081ffc4 	movi	r2,2047
80212f18:	80bf481e 	bne	r16,r2,80212c3c <__reset+0xfa1f2c3c>
80212f1c:	003f1c06 	br	80212b90 <__reset+0xfa1f2b90>
80212f20:	843ff844 	addi	r16,r16,-31
80212f24:	01000804 	movi	r4,32
80212f28:	1406d83a 	srl	r3,r2,r16
80212f2c:	41005026 	beq	r8,r4,80213070 <__adddf3+0x55c>
80212f30:	01001004 	movi	r4,64
80212f34:	2211c83a 	sub	r8,r4,r8
80212f38:	1204983a 	sll	r2,r2,r8
80212f3c:	88a2b03a 	or	r17,r17,r2
80212f40:	8822c03a 	cmpne	r17,r17,zero
80212f44:	1c62b03a 	or	r17,r3,r17
80212f48:	0011883a 	mov	r8,zero
80212f4c:	0021883a 	mov	r16,zero
80212f50:	003f7106 	br	80212d18 <__reset+0xfa1f2d18>
80212f54:	193ff804 	addi	r4,r3,-32
80212f58:	00800804 	movi	r2,32
80212f5c:	4908d83a 	srl	r4,r9,r4
80212f60:	18804526 	beq	r3,r2,80213078 <__adddf3+0x564>
80212f64:	00801004 	movi	r2,64
80212f68:	10c5c83a 	sub	r2,r2,r3
80212f6c:	4886983a 	sll	r3,r9,r2
80212f70:	198cb03a 	or	r6,r3,r6
80212f74:	300cc03a 	cmpne	r6,r6,zero
80212f78:	218cb03a 	or	r6,r4,r6
80212f7c:	0007883a 	mov	r3,zero
80212f80:	003f3b06 	br	80212c70 <__reset+0xfa1f2c70>
80212f84:	80002a26 	beq	r16,zero,80213030 <__adddf3+0x51c>
80212f88:	0101ffc4 	movi	r4,2047
80212f8c:	11006826 	beq	r2,r4,80213130 <__adddf3+0x61c>
80212f90:	00c7c83a 	sub	r3,zero,r3
80212f94:	42002034 	orhi	r8,r8,128
80212f98:	01000e04 	movi	r4,56
80212f9c:	20c07c16 	blt	r4,r3,80213190 <__adddf3+0x67c>
80212fa0:	010007c4 	movi	r4,31
80212fa4:	20c0da16 	blt	r4,r3,80213310 <__adddf3+0x7fc>
80212fa8:	01000804 	movi	r4,32
80212fac:	20c9c83a 	sub	r4,r4,r3
80212fb0:	4114983a 	sll	r10,r8,r4
80212fb4:	88cad83a 	srl	r5,r17,r3
80212fb8:	8908983a 	sll	r4,r17,r4
80212fbc:	40c6d83a 	srl	r3,r8,r3
80212fc0:	5162b03a 	or	r17,r10,r5
80212fc4:	2008c03a 	cmpne	r4,r4,zero
80212fc8:	8922b03a 	or	r17,r17,r4
80212fcc:	3463c83a 	sub	r17,r6,r17
80212fd0:	48c7c83a 	sub	r3,r9,r3
80212fd4:	344d803a 	cmpltu	r6,r6,r17
80212fd8:	1991c83a 	sub	r8,r3,r6
80212fdc:	1021883a 	mov	r16,r2
80212fe0:	3825883a 	mov	r18,r7
80212fe4:	003f2706 	br	80212c84 <__reset+0xfa1f2c84>
80212fe8:	24d0b03a 	or	r8,r4,r19
80212fec:	40001b1e 	bne	r8,zero,8021305c <__adddf3+0x548>
80212ff0:	0005883a 	mov	r2,zero
80212ff4:	0007883a 	mov	r3,zero
80212ff8:	0021883a 	mov	r16,zero
80212ffc:	003f4d06 	br	80212d34 <__reset+0xfa1f2d34>
80213000:	008007c4 	movi	r2,31
80213004:	11003c16 	blt	r2,r4,802130f8 <__adddf3+0x5e4>
80213008:	00800804 	movi	r2,32
8021300c:	1105c83a 	sub	r2,r2,r4
80213010:	488e983a 	sll	r7,r9,r2
80213014:	310ad83a 	srl	r5,r6,r4
80213018:	3084983a 	sll	r2,r6,r2
8021301c:	4912d83a 	srl	r9,r9,r4
80213020:	394ab03a 	or	r5,r7,r5
80213024:	1004c03a 	cmpne	r2,r2,zero
80213028:	288ab03a 	or	r5,r5,r2
8021302c:	003f5306 	br	80212d7c <__reset+0xfa1f2d7c>
80213030:	4448b03a 	or	r4,r8,r17
80213034:	20003e26 	beq	r4,zero,80213130 <__adddf3+0x61c>
80213038:	00c6303a 	nor	r3,zero,r3
8021303c:	18003a1e 	bne	r3,zero,80213128 <__adddf3+0x614>
80213040:	3463c83a 	sub	r17,r6,r17
80213044:	4a07c83a 	sub	r3,r9,r8
80213048:	344d803a 	cmpltu	r6,r6,r17
8021304c:	1991c83a 	sub	r8,r3,r6
80213050:	1021883a 	mov	r16,r2
80213054:	3825883a 	mov	r18,r7
80213058:	003f0a06 	br	80212c84 <__reset+0xfa1f2c84>
8021305c:	2023883a 	mov	r17,r4
80213060:	003f0d06 	br	80212c98 <__reset+0xfa1f2c98>
80213064:	0081ffc4 	movi	r2,2047
80213068:	80bf3f1e 	bne	r16,r2,80212d68 <__reset+0xfa1f2d68>
8021306c:	003ec806 	br	80212b90 <__reset+0xfa1f2b90>
80213070:	0005883a 	mov	r2,zero
80213074:	003fb106 	br	80212f3c <__reset+0xfa1f2f3c>
80213078:	0007883a 	mov	r3,zero
8021307c:	003fbc06 	br	80212f70 <__reset+0xfa1f2f70>
80213080:	4444b03a 	or	r2,r8,r17
80213084:	8000871e 	bne	r16,zero,802132a4 <__adddf3+0x790>
80213088:	1000ba26 	beq	r2,zero,80213374 <__adddf3+0x860>
8021308c:	4984b03a 	or	r2,r9,r6
80213090:	103ebf26 	beq	r2,zero,80212b90 <__reset+0xfa1f2b90>
80213094:	8985883a 	add	r2,r17,r6
80213098:	4247883a 	add	r3,r8,r9
8021309c:	1451803a 	cmpltu	r8,r2,r17
802130a0:	40d1883a 	add	r8,r8,r3
802130a4:	40c0202c 	andhi	r3,r8,128
802130a8:	1023883a 	mov	r17,r2
802130ac:	183f1a26 	beq	r3,zero,80212d18 <__reset+0xfa1f2d18>
802130b0:	00bfe034 	movhi	r2,65408
802130b4:	10bfffc4 	addi	r2,r2,-1
802130b8:	2021883a 	mov	r16,r4
802130bc:	4090703a 	and	r8,r8,r2
802130c0:	003eb306 	br	80212b90 <__reset+0xfa1f2b90>
802130c4:	4444b03a 	or	r2,r8,r17
802130c8:	8000291e 	bne	r16,zero,80213170 <__adddf3+0x65c>
802130cc:	10004b1e 	bne	r2,zero,802131fc <__adddf3+0x6e8>
802130d0:	4990b03a 	or	r8,r9,r6
802130d4:	40008b26 	beq	r8,zero,80213304 <__adddf3+0x7f0>
802130d8:	4811883a 	mov	r8,r9
802130dc:	3023883a 	mov	r17,r6
802130e0:	3825883a 	mov	r18,r7
802130e4:	003eaa06 	br	80212b90 <__reset+0xfa1f2b90>
802130e8:	1021883a 	mov	r16,r2
802130ec:	0011883a 	mov	r8,zero
802130f0:	0005883a 	mov	r2,zero
802130f4:	003f0f06 	br	80212d34 <__reset+0xfa1f2d34>
802130f8:	217ff804 	addi	r5,r4,-32
802130fc:	00800804 	movi	r2,32
80213100:	494ad83a 	srl	r5,r9,r5
80213104:	20807d26 	beq	r4,r2,802132fc <__adddf3+0x7e8>
80213108:	00801004 	movi	r2,64
8021310c:	1109c83a 	sub	r4,r2,r4
80213110:	4912983a 	sll	r9,r9,r4
80213114:	498cb03a 	or	r6,r9,r6
80213118:	300cc03a 	cmpne	r6,r6,zero
8021311c:	298ab03a 	or	r5,r5,r6
80213120:	0013883a 	mov	r9,zero
80213124:	003f1506 	br	80212d7c <__reset+0xfa1f2d7c>
80213128:	0101ffc4 	movi	r4,2047
8021312c:	113f9a1e 	bne	r2,r4,80212f98 <__reset+0xfa1f2f98>
80213130:	4811883a 	mov	r8,r9
80213134:	3023883a 	mov	r17,r6
80213138:	1021883a 	mov	r16,r2
8021313c:	3825883a 	mov	r18,r7
80213140:	003e9306 	br	80212b90 <__reset+0xfa1f2b90>
80213144:	8000161e 	bne	r16,zero,802131a0 <__adddf3+0x68c>
80213148:	444ab03a 	or	r5,r8,r17
8021314c:	28005126 	beq	r5,zero,80213294 <__adddf3+0x780>
80213150:	0108303a 	nor	r4,zero,r4
80213154:	20004d1e 	bne	r4,zero,8021328c <__adddf3+0x778>
80213158:	89a3883a 	add	r17,r17,r6
8021315c:	4253883a 	add	r9,r8,r9
80213160:	898d803a 	cmpltu	r6,r17,r6
80213164:	3251883a 	add	r8,r6,r9
80213168:	1021883a 	mov	r16,r2
8021316c:	003f0806 	br	80212d90 <__reset+0xfa1f2d90>
80213170:	1000301e 	bne	r2,zero,80213234 <__adddf3+0x720>
80213174:	4984b03a 	or	r2,r9,r6
80213178:	10007126 	beq	r2,zero,80213340 <__adddf3+0x82c>
8021317c:	4811883a 	mov	r8,r9
80213180:	3023883a 	mov	r17,r6
80213184:	3825883a 	mov	r18,r7
80213188:	0401ffc4 	movi	r16,2047
8021318c:	003e8006 	br	80212b90 <__reset+0xfa1f2b90>
80213190:	4462b03a 	or	r17,r8,r17
80213194:	8822c03a 	cmpne	r17,r17,zero
80213198:	0007883a 	mov	r3,zero
8021319c:	003f8b06 	br	80212fcc <__reset+0xfa1f2fcc>
802131a0:	0141ffc4 	movi	r5,2047
802131a4:	11403b26 	beq	r2,r5,80213294 <__adddf3+0x780>
802131a8:	0109c83a 	sub	r4,zero,r4
802131ac:	42002034 	orhi	r8,r8,128
802131b0:	01400e04 	movi	r5,56
802131b4:	29006716 	blt	r5,r4,80213354 <__adddf3+0x840>
802131b8:	014007c4 	movi	r5,31
802131bc:	29007016 	blt	r5,r4,80213380 <__adddf3+0x86c>
802131c0:	01400804 	movi	r5,32
802131c4:	290bc83a 	sub	r5,r5,r4
802131c8:	4154983a 	sll	r10,r8,r5
802131cc:	890ed83a 	srl	r7,r17,r4
802131d0:	894a983a 	sll	r5,r17,r5
802131d4:	4108d83a 	srl	r4,r8,r4
802131d8:	51e2b03a 	or	r17,r10,r7
802131dc:	280ac03a 	cmpne	r5,r5,zero
802131e0:	8962b03a 	or	r17,r17,r5
802131e4:	89a3883a 	add	r17,r17,r6
802131e8:	2253883a 	add	r9,r4,r9
802131ec:	898d803a 	cmpltu	r6,r17,r6
802131f0:	3251883a 	add	r8,r6,r9
802131f4:	1021883a 	mov	r16,r2
802131f8:	003ee506 	br	80212d90 <__reset+0xfa1f2d90>
802131fc:	4984b03a 	or	r2,r9,r6
80213200:	103e6326 	beq	r2,zero,80212b90 <__reset+0xfa1f2b90>
80213204:	8987c83a 	sub	r3,r17,r6
80213208:	88c9803a 	cmpltu	r4,r17,r3
8021320c:	4245c83a 	sub	r2,r8,r9
80213210:	1105c83a 	sub	r2,r2,r4
80213214:	1100202c 	andhi	r4,r2,128
80213218:	203ebb26 	beq	r4,zero,80212d08 <__reset+0xfa1f2d08>
8021321c:	3463c83a 	sub	r17,r6,r17
80213220:	4a07c83a 	sub	r3,r9,r8
80213224:	344d803a 	cmpltu	r6,r6,r17
80213228:	1991c83a 	sub	r8,r3,r6
8021322c:	3825883a 	mov	r18,r7
80213230:	003e5706 	br	80212b90 <__reset+0xfa1f2b90>
80213234:	4984b03a 	or	r2,r9,r6
80213238:	10002e26 	beq	r2,zero,802132f4 <__adddf3+0x7e0>
8021323c:	4004d0fa 	srli	r2,r8,3
80213240:	8822d0fa 	srli	r17,r17,3
80213244:	4010977a 	slli	r8,r8,29
80213248:	10c0022c 	andhi	r3,r2,8
8021324c:	4462b03a 	or	r17,r8,r17
80213250:	18000826 	beq	r3,zero,80213274 <__adddf3+0x760>
80213254:	4808d0fa 	srli	r4,r9,3
80213258:	20c0022c 	andhi	r3,r4,8
8021325c:	1800051e 	bne	r3,zero,80213274 <__adddf3+0x760>
80213260:	300cd0fa 	srli	r6,r6,3
80213264:	4806977a 	slli	r3,r9,29
80213268:	2005883a 	mov	r2,r4
8021326c:	3825883a 	mov	r18,r7
80213270:	19a2b03a 	or	r17,r3,r6
80213274:	8810d77a 	srli	r8,r17,29
80213278:	100490fa 	slli	r2,r2,3
8021327c:	882290fa 	slli	r17,r17,3
80213280:	0401ffc4 	movi	r16,2047
80213284:	4090b03a 	or	r8,r8,r2
80213288:	003e4106 	br	80212b90 <__reset+0xfa1f2b90>
8021328c:	0141ffc4 	movi	r5,2047
80213290:	117fc71e 	bne	r2,r5,802131b0 <__reset+0xfa1f31b0>
80213294:	4811883a 	mov	r8,r9
80213298:	3023883a 	mov	r17,r6
8021329c:	1021883a 	mov	r16,r2
802132a0:	003e3b06 	br	80212b90 <__reset+0xfa1f2b90>
802132a4:	10002f26 	beq	r2,zero,80213364 <__adddf3+0x850>
802132a8:	4984b03a 	or	r2,r9,r6
802132ac:	10001126 	beq	r2,zero,802132f4 <__adddf3+0x7e0>
802132b0:	4004d0fa 	srli	r2,r8,3
802132b4:	8822d0fa 	srli	r17,r17,3
802132b8:	4010977a 	slli	r8,r8,29
802132bc:	10c0022c 	andhi	r3,r2,8
802132c0:	4462b03a 	or	r17,r8,r17
802132c4:	183feb26 	beq	r3,zero,80213274 <__reset+0xfa1f3274>
802132c8:	4808d0fa 	srli	r4,r9,3
802132cc:	20c0022c 	andhi	r3,r4,8
802132d0:	183fe81e 	bne	r3,zero,80213274 <__reset+0xfa1f3274>
802132d4:	300cd0fa 	srli	r6,r6,3
802132d8:	4806977a 	slli	r3,r9,29
802132dc:	2005883a 	mov	r2,r4
802132e0:	19a2b03a 	or	r17,r3,r6
802132e4:	003fe306 	br	80213274 <__reset+0xfa1f3274>
802132e8:	0011883a 	mov	r8,zero
802132ec:	0005883a 	mov	r2,zero
802132f0:	003e3f06 	br	80212bf0 <__reset+0xfa1f2bf0>
802132f4:	0401ffc4 	movi	r16,2047
802132f8:	003e2506 	br	80212b90 <__reset+0xfa1f2b90>
802132fc:	0013883a 	mov	r9,zero
80213300:	003f8406 	br	80213114 <__reset+0xfa1f3114>
80213304:	0005883a 	mov	r2,zero
80213308:	0007883a 	mov	r3,zero
8021330c:	003e8906 	br	80212d34 <__reset+0xfa1f2d34>
80213310:	197ff804 	addi	r5,r3,-32
80213314:	01000804 	movi	r4,32
80213318:	414ad83a 	srl	r5,r8,r5
8021331c:	19002426 	beq	r3,r4,802133b0 <__adddf3+0x89c>
80213320:	01001004 	movi	r4,64
80213324:	20c7c83a 	sub	r3,r4,r3
80213328:	40c6983a 	sll	r3,r8,r3
8021332c:	1c46b03a 	or	r3,r3,r17
80213330:	1806c03a 	cmpne	r3,r3,zero
80213334:	28e2b03a 	or	r17,r5,r3
80213338:	0007883a 	mov	r3,zero
8021333c:	003f2306 	br	80212fcc <__reset+0xfa1f2fcc>
80213340:	0007883a 	mov	r3,zero
80213344:	5811883a 	mov	r8,r11
80213348:	00bfffc4 	movi	r2,-1
8021334c:	0401ffc4 	movi	r16,2047
80213350:	003e7806 	br	80212d34 <__reset+0xfa1f2d34>
80213354:	4462b03a 	or	r17,r8,r17
80213358:	8822c03a 	cmpne	r17,r17,zero
8021335c:	0009883a 	mov	r4,zero
80213360:	003fa006 	br	802131e4 <__reset+0xfa1f31e4>
80213364:	4811883a 	mov	r8,r9
80213368:	3023883a 	mov	r17,r6
8021336c:	0401ffc4 	movi	r16,2047
80213370:	003e0706 	br	80212b90 <__reset+0xfa1f2b90>
80213374:	4811883a 	mov	r8,r9
80213378:	3023883a 	mov	r17,r6
8021337c:	003e0406 	br	80212b90 <__reset+0xfa1f2b90>
80213380:	21fff804 	addi	r7,r4,-32
80213384:	01400804 	movi	r5,32
80213388:	41ced83a 	srl	r7,r8,r7
8021338c:	21400a26 	beq	r4,r5,802133b8 <__adddf3+0x8a4>
80213390:	01401004 	movi	r5,64
80213394:	2909c83a 	sub	r4,r5,r4
80213398:	4108983a 	sll	r4,r8,r4
8021339c:	2448b03a 	or	r4,r4,r17
802133a0:	2008c03a 	cmpne	r4,r4,zero
802133a4:	3922b03a 	or	r17,r7,r4
802133a8:	0009883a 	mov	r4,zero
802133ac:	003f8d06 	br	802131e4 <__reset+0xfa1f31e4>
802133b0:	0007883a 	mov	r3,zero
802133b4:	003fdd06 	br	8021332c <__reset+0xfa1f332c>
802133b8:	0009883a 	mov	r4,zero
802133bc:	003ff706 	br	8021339c <__reset+0xfa1f339c>

802133c0 <__divdf3>:
802133c0:	defff204 	addi	sp,sp,-56
802133c4:	dd400915 	stw	r21,36(sp)
802133c8:	282ad53a 	srli	r21,r5,20
802133cc:	dd000815 	stw	r20,32(sp)
802133d0:	2828d7fa 	srli	r20,r5,31
802133d4:	dc000415 	stw	r16,16(sp)
802133d8:	04000434 	movhi	r16,16
802133dc:	df000c15 	stw	fp,48(sp)
802133e0:	843fffc4 	addi	r16,r16,-1
802133e4:	dfc00d15 	stw	ra,52(sp)
802133e8:	ddc00b15 	stw	r23,44(sp)
802133ec:	dd800a15 	stw	r22,40(sp)
802133f0:	dcc00715 	stw	r19,28(sp)
802133f4:	dc800615 	stw	r18,24(sp)
802133f8:	dc400515 	stw	r17,20(sp)
802133fc:	ad41ffcc 	andi	r21,r21,2047
80213400:	2c20703a 	and	r16,r5,r16
80213404:	a7003fcc 	andi	fp,r20,255
80213408:	a8006126 	beq	r21,zero,80213590 <__divdf3+0x1d0>
8021340c:	0081ffc4 	movi	r2,2047
80213410:	2025883a 	mov	r18,r4
80213414:	a8803726 	beq	r21,r2,802134f4 <__divdf3+0x134>
80213418:	80800434 	orhi	r2,r16,16
8021341c:	100490fa 	slli	r2,r2,3
80213420:	2020d77a 	srli	r16,r4,29
80213424:	202490fa 	slli	r18,r4,3
80213428:	ad7f0044 	addi	r21,r21,-1023
8021342c:	80a0b03a 	or	r16,r16,r2
80213430:	0027883a 	mov	r19,zero
80213434:	0013883a 	mov	r9,zero
80213438:	3804d53a 	srli	r2,r7,20
8021343c:	382cd7fa 	srli	r22,r7,31
80213440:	04400434 	movhi	r17,16
80213444:	8c7fffc4 	addi	r17,r17,-1
80213448:	1081ffcc 	andi	r2,r2,2047
8021344c:	3011883a 	mov	r8,r6
80213450:	3c62703a 	and	r17,r7,r17
80213454:	b5c03fcc 	andi	r23,r22,255
80213458:	10006c26 	beq	r2,zero,8021360c <__divdf3+0x24c>
8021345c:	00c1ffc4 	movi	r3,2047
80213460:	10c06426 	beq	r2,r3,802135f4 <__divdf3+0x234>
80213464:	88c00434 	orhi	r3,r17,16
80213468:	180690fa 	slli	r3,r3,3
8021346c:	3022d77a 	srli	r17,r6,29
80213470:	301090fa 	slli	r8,r6,3
80213474:	10bf0044 	addi	r2,r2,-1023
80213478:	88e2b03a 	or	r17,r17,r3
8021347c:	000f883a 	mov	r7,zero
80213480:	a58cf03a 	xor	r6,r20,r22
80213484:	3cc8b03a 	or	r4,r7,r19
80213488:	a8abc83a 	sub	r21,r21,r2
8021348c:	008003c4 	movi	r2,15
80213490:	3007883a 	mov	r3,r6
80213494:	34c03fcc 	andi	r19,r6,255
80213498:	11009036 	bltu	r2,r4,802136dc <__divdf3+0x31c>
8021349c:	200890ba 	slli	r4,r4,2
802134a0:	00a00874 	movhi	r2,32801
802134a4:	108d2d04 	addi	r2,r2,13492
802134a8:	2089883a 	add	r4,r4,r2
802134ac:	20800017 	ldw	r2,0(r4)
802134b0:	1000683a 	jmp	r2
802134b4:	802136dc 	xori	zero,r16,34011
802134b8:	8021352c 	andhi	zero,r16,34004
802134bc:	802136cc 	andi	zero,r16,34011
802134c0:	80213520 	cmpeqi	zero,r16,-31532
802134c4:	802136cc 	andi	zero,r16,34011
802134c8:	802136a0 	cmpeqi	zero,r16,-31526
802134cc:	802136cc 	andi	zero,r16,34011
802134d0:	80213520 	cmpeqi	zero,r16,-31532
802134d4:	8021352c 	andhi	zero,r16,34004
802134d8:	8021352c 	andhi	zero,r16,34004
802134dc:	802136a0 	cmpeqi	zero,r16,-31526
802134e0:	80213520 	cmpeqi	zero,r16,-31532
802134e4:	80213510 	cmplti	zero,r16,-31532
802134e8:	80213510 	cmplti	zero,r16,-31532
802134ec:	80213510 	cmplti	zero,r16,-31532
802134f0:	802139c0 	call	8802139c <__reset+0x200139c>
802134f4:	2404b03a 	or	r2,r4,r16
802134f8:	1000661e 	bne	r2,zero,80213694 <__divdf3+0x2d4>
802134fc:	04c00204 	movi	r19,8
80213500:	0021883a 	mov	r16,zero
80213504:	0025883a 	mov	r18,zero
80213508:	02400084 	movi	r9,2
8021350c:	003fca06 	br	80213438 <__reset+0xfa1f3438>
80213510:	8023883a 	mov	r17,r16
80213514:	9011883a 	mov	r8,r18
80213518:	e02f883a 	mov	r23,fp
8021351c:	480f883a 	mov	r7,r9
80213520:	00800084 	movi	r2,2
80213524:	3881311e 	bne	r7,r2,802139ec <__divdf3+0x62c>
80213528:	b827883a 	mov	r19,r23
8021352c:	98c0004c 	andi	r3,r19,1
80213530:	0081ffc4 	movi	r2,2047
80213534:	000b883a 	mov	r5,zero
80213538:	0025883a 	mov	r18,zero
8021353c:	1004953a 	slli	r2,r2,20
80213540:	18c03fcc 	andi	r3,r3,255
80213544:	04400434 	movhi	r17,16
80213548:	8c7fffc4 	addi	r17,r17,-1
8021354c:	180697fa 	slli	r3,r3,31
80213550:	2c4a703a 	and	r5,r5,r17
80213554:	288ab03a 	or	r5,r5,r2
80213558:	28c6b03a 	or	r3,r5,r3
8021355c:	9005883a 	mov	r2,r18
80213560:	dfc00d17 	ldw	ra,52(sp)
80213564:	df000c17 	ldw	fp,48(sp)
80213568:	ddc00b17 	ldw	r23,44(sp)
8021356c:	dd800a17 	ldw	r22,40(sp)
80213570:	dd400917 	ldw	r21,36(sp)
80213574:	dd000817 	ldw	r20,32(sp)
80213578:	dcc00717 	ldw	r19,28(sp)
8021357c:	dc800617 	ldw	r18,24(sp)
80213580:	dc400517 	ldw	r17,20(sp)
80213584:	dc000417 	ldw	r16,16(sp)
80213588:	dec00e04 	addi	sp,sp,56
8021358c:	f800283a 	ret
80213590:	2404b03a 	or	r2,r4,r16
80213594:	2027883a 	mov	r19,r4
80213598:	10003926 	beq	r2,zero,80213680 <__divdf3+0x2c0>
8021359c:	80012e26 	beq	r16,zero,80213a58 <__divdf3+0x698>
802135a0:	8009883a 	mov	r4,r16
802135a4:	d9800315 	stw	r6,12(sp)
802135a8:	d9c00215 	stw	r7,8(sp)
802135ac:	02050500 	call	80205050 <__clzsi2>
802135b0:	d9800317 	ldw	r6,12(sp)
802135b4:	d9c00217 	ldw	r7,8(sp)
802135b8:	113ffd44 	addi	r4,r2,-11
802135bc:	00c00704 	movi	r3,28
802135c0:	19012116 	blt	r3,r4,80213a48 <__divdf3+0x688>
802135c4:	00c00744 	movi	r3,29
802135c8:	147ffe04 	addi	r17,r2,-8
802135cc:	1907c83a 	sub	r3,r3,r4
802135d0:	8460983a 	sll	r16,r16,r17
802135d4:	98c6d83a 	srl	r3,r19,r3
802135d8:	9c64983a 	sll	r18,r19,r17
802135dc:	1c20b03a 	or	r16,r3,r16
802135e0:	1080fcc4 	addi	r2,r2,1011
802135e4:	00abc83a 	sub	r21,zero,r2
802135e8:	0027883a 	mov	r19,zero
802135ec:	0013883a 	mov	r9,zero
802135f0:	003f9106 	br	80213438 <__reset+0xfa1f3438>
802135f4:	3446b03a 	or	r3,r6,r17
802135f8:	18001f1e 	bne	r3,zero,80213678 <__divdf3+0x2b8>
802135fc:	0023883a 	mov	r17,zero
80213600:	0011883a 	mov	r8,zero
80213604:	01c00084 	movi	r7,2
80213608:	003f9d06 	br	80213480 <__reset+0xfa1f3480>
8021360c:	3446b03a 	or	r3,r6,r17
80213610:	18001526 	beq	r3,zero,80213668 <__divdf3+0x2a8>
80213614:	88011b26 	beq	r17,zero,80213a84 <__divdf3+0x6c4>
80213618:	8809883a 	mov	r4,r17
8021361c:	d9800315 	stw	r6,12(sp)
80213620:	da400115 	stw	r9,4(sp)
80213624:	02050500 	call	80205050 <__clzsi2>
80213628:	d9800317 	ldw	r6,12(sp)
8021362c:	da400117 	ldw	r9,4(sp)
80213630:	113ffd44 	addi	r4,r2,-11
80213634:	00c00704 	movi	r3,28
80213638:	19010e16 	blt	r3,r4,80213a74 <__divdf3+0x6b4>
8021363c:	00c00744 	movi	r3,29
80213640:	123ffe04 	addi	r8,r2,-8
80213644:	1907c83a 	sub	r3,r3,r4
80213648:	8a22983a 	sll	r17,r17,r8
8021364c:	30c6d83a 	srl	r3,r6,r3
80213650:	3210983a 	sll	r8,r6,r8
80213654:	1c62b03a 	or	r17,r3,r17
80213658:	1080fcc4 	addi	r2,r2,1011
8021365c:	0085c83a 	sub	r2,zero,r2
80213660:	000f883a 	mov	r7,zero
80213664:	003f8606 	br	80213480 <__reset+0xfa1f3480>
80213668:	0023883a 	mov	r17,zero
8021366c:	0011883a 	mov	r8,zero
80213670:	01c00044 	movi	r7,1
80213674:	003f8206 	br	80213480 <__reset+0xfa1f3480>
80213678:	01c000c4 	movi	r7,3
8021367c:	003f8006 	br	80213480 <__reset+0xfa1f3480>
80213680:	04c00104 	movi	r19,4
80213684:	0021883a 	mov	r16,zero
80213688:	0025883a 	mov	r18,zero
8021368c:	02400044 	movi	r9,1
80213690:	003f6906 	br	80213438 <__reset+0xfa1f3438>
80213694:	04c00304 	movi	r19,12
80213698:	024000c4 	movi	r9,3
8021369c:	003f6606 	br	80213438 <__reset+0xfa1f3438>
802136a0:	01400434 	movhi	r5,16
802136a4:	0007883a 	mov	r3,zero
802136a8:	297fffc4 	addi	r5,r5,-1
802136ac:	04bfffc4 	movi	r18,-1
802136b0:	0081ffc4 	movi	r2,2047
802136b4:	003fa106 	br	8021353c <__reset+0xfa1f353c>
802136b8:	00c00044 	movi	r3,1
802136bc:	1887c83a 	sub	r3,r3,r2
802136c0:	01000e04 	movi	r4,56
802136c4:	20c1210e 	bge	r4,r3,80213b4c <__divdf3+0x78c>
802136c8:	98c0004c 	andi	r3,r19,1
802136cc:	0005883a 	mov	r2,zero
802136d0:	000b883a 	mov	r5,zero
802136d4:	0025883a 	mov	r18,zero
802136d8:	003f9806 	br	8021353c <__reset+0xfa1f353c>
802136dc:	8c00fd36 	bltu	r17,r16,80213ad4 <__divdf3+0x714>
802136e0:	8440fb26 	beq	r16,r17,80213ad0 <__divdf3+0x710>
802136e4:	8007883a 	mov	r3,r16
802136e8:	ad7fffc4 	addi	r21,r21,-1
802136ec:	0021883a 	mov	r16,zero
802136f0:	4004d63a 	srli	r2,r8,24
802136f4:	8822923a 	slli	r17,r17,8
802136f8:	1809883a 	mov	r4,r3
802136fc:	402c923a 	slli	r22,r8,8
80213700:	88b8b03a 	or	fp,r17,r2
80213704:	e028d43a 	srli	r20,fp,16
80213708:	d8c00015 	stw	r3,0(sp)
8021370c:	e5ffffcc 	andi	r23,fp,65535
80213710:	a00b883a 	mov	r5,r20
80213714:	0212a580 	call	80212a58 <__udivsi3>
80213718:	d8c00017 	ldw	r3,0(sp)
8021371c:	a00b883a 	mov	r5,r20
80213720:	d8800315 	stw	r2,12(sp)
80213724:	1809883a 	mov	r4,r3
80213728:	0212abc0 	call	80212abc <__umodsi3>
8021372c:	d9800317 	ldw	r6,12(sp)
80213730:	1006943a 	slli	r3,r2,16
80213734:	9004d43a 	srli	r2,r18,16
80213738:	b9a3383a 	mul	r17,r23,r6
8021373c:	10c4b03a 	or	r2,r2,r3
80213740:	1440062e 	bgeu	r2,r17,8021375c <__divdf3+0x39c>
80213744:	1705883a 	add	r2,r2,fp
80213748:	30ffffc4 	addi	r3,r6,-1
8021374c:	1700ee36 	bltu	r2,fp,80213b08 <__divdf3+0x748>
80213750:	1440ed2e 	bgeu	r2,r17,80213b08 <__divdf3+0x748>
80213754:	31bfff84 	addi	r6,r6,-2
80213758:	1705883a 	add	r2,r2,fp
8021375c:	1463c83a 	sub	r17,r2,r17
80213760:	a00b883a 	mov	r5,r20
80213764:	8809883a 	mov	r4,r17
80213768:	d9800315 	stw	r6,12(sp)
8021376c:	0212a580 	call	80212a58 <__udivsi3>
80213770:	a00b883a 	mov	r5,r20
80213774:	8809883a 	mov	r4,r17
80213778:	d8800215 	stw	r2,8(sp)
8021377c:	0212abc0 	call	80212abc <__umodsi3>
80213780:	d9c00217 	ldw	r7,8(sp)
80213784:	1004943a 	slli	r2,r2,16
80213788:	94bfffcc 	andi	r18,r18,65535
8021378c:	b9d1383a 	mul	r8,r23,r7
80213790:	90a4b03a 	or	r18,r18,r2
80213794:	d9800317 	ldw	r6,12(sp)
80213798:	9200062e 	bgeu	r18,r8,802137b4 <__divdf3+0x3f4>
8021379c:	9725883a 	add	r18,r18,fp
802137a0:	38bfffc4 	addi	r2,r7,-1
802137a4:	9700d636 	bltu	r18,fp,80213b00 <__divdf3+0x740>
802137a8:	9200d52e 	bgeu	r18,r8,80213b00 <__divdf3+0x740>
802137ac:	39ffff84 	addi	r7,r7,-2
802137b0:	9725883a 	add	r18,r18,fp
802137b4:	3004943a 	slli	r2,r6,16
802137b8:	b012d43a 	srli	r9,r22,16
802137bc:	b1bfffcc 	andi	r6,r22,65535
802137c0:	11e2b03a 	or	r17,r2,r7
802137c4:	8806d43a 	srli	r3,r17,16
802137c8:	893fffcc 	andi	r4,r17,65535
802137cc:	218b383a 	mul	r5,r4,r6
802137d0:	30c5383a 	mul	r2,r6,r3
802137d4:	2249383a 	mul	r4,r4,r9
802137d8:	280ed43a 	srli	r7,r5,16
802137dc:	9225c83a 	sub	r18,r18,r8
802137e0:	2089883a 	add	r4,r4,r2
802137e4:	3909883a 	add	r4,r7,r4
802137e8:	1a47383a 	mul	r3,r3,r9
802137ec:	2080022e 	bgeu	r4,r2,802137f8 <__divdf3+0x438>
802137f0:	00800074 	movhi	r2,1
802137f4:	1887883a 	add	r3,r3,r2
802137f8:	2004d43a 	srli	r2,r4,16
802137fc:	2008943a 	slli	r4,r4,16
80213800:	297fffcc 	andi	r5,r5,65535
80213804:	10c7883a 	add	r3,r2,r3
80213808:	2149883a 	add	r4,r4,r5
8021380c:	90c0a536 	bltu	r18,r3,80213aa4 <__divdf3+0x6e4>
80213810:	90c0bf26 	beq	r18,r3,80213b10 <__divdf3+0x750>
80213814:	90c7c83a 	sub	r3,r18,r3
80213818:	810fc83a 	sub	r7,r16,r4
8021381c:	81e5803a 	cmpltu	r18,r16,r7
80213820:	1ca5c83a 	sub	r18,r3,r18
80213824:	e480c126 	beq	fp,r18,80213b2c <__divdf3+0x76c>
80213828:	a00b883a 	mov	r5,r20
8021382c:	9009883a 	mov	r4,r18
80213830:	d9800315 	stw	r6,12(sp)
80213834:	d9c00215 	stw	r7,8(sp)
80213838:	da400115 	stw	r9,4(sp)
8021383c:	0212a580 	call	80212a58 <__udivsi3>
80213840:	a00b883a 	mov	r5,r20
80213844:	9009883a 	mov	r4,r18
80213848:	d8800015 	stw	r2,0(sp)
8021384c:	0212abc0 	call	80212abc <__umodsi3>
80213850:	d9c00217 	ldw	r7,8(sp)
80213854:	da000017 	ldw	r8,0(sp)
80213858:	1006943a 	slli	r3,r2,16
8021385c:	3804d43a 	srli	r2,r7,16
80213860:	ba21383a 	mul	r16,r23,r8
80213864:	d9800317 	ldw	r6,12(sp)
80213868:	10c4b03a 	or	r2,r2,r3
8021386c:	da400117 	ldw	r9,4(sp)
80213870:	1400062e 	bgeu	r2,r16,8021388c <__divdf3+0x4cc>
80213874:	1705883a 	add	r2,r2,fp
80213878:	40ffffc4 	addi	r3,r8,-1
8021387c:	1700ad36 	bltu	r2,fp,80213b34 <__divdf3+0x774>
80213880:	1400ac2e 	bgeu	r2,r16,80213b34 <__divdf3+0x774>
80213884:	423fff84 	addi	r8,r8,-2
80213888:	1705883a 	add	r2,r2,fp
8021388c:	1421c83a 	sub	r16,r2,r16
80213890:	a00b883a 	mov	r5,r20
80213894:	8009883a 	mov	r4,r16
80213898:	d9800315 	stw	r6,12(sp)
8021389c:	d9c00215 	stw	r7,8(sp)
802138a0:	da000015 	stw	r8,0(sp)
802138a4:	da400115 	stw	r9,4(sp)
802138a8:	0212a580 	call	80212a58 <__udivsi3>
802138ac:	8009883a 	mov	r4,r16
802138b0:	a00b883a 	mov	r5,r20
802138b4:	1025883a 	mov	r18,r2
802138b8:	0212abc0 	call	80212abc <__umodsi3>
802138bc:	d9c00217 	ldw	r7,8(sp)
802138c0:	1004943a 	slli	r2,r2,16
802138c4:	bcaf383a 	mul	r23,r23,r18
802138c8:	393fffcc 	andi	r4,r7,65535
802138cc:	2088b03a 	or	r4,r4,r2
802138d0:	d9800317 	ldw	r6,12(sp)
802138d4:	da000017 	ldw	r8,0(sp)
802138d8:	da400117 	ldw	r9,4(sp)
802138dc:	25c0062e 	bgeu	r4,r23,802138f8 <__divdf3+0x538>
802138e0:	2709883a 	add	r4,r4,fp
802138e4:	90bfffc4 	addi	r2,r18,-1
802138e8:	27009436 	bltu	r4,fp,80213b3c <__divdf3+0x77c>
802138ec:	25c0932e 	bgeu	r4,r23,80213b3c <__divdf3+0x77c>
802138f0:	94bfff84 	addi	r18,r18,-2
802138f4:	2709883a 	add	r4,r4,fp
802138f8:	4004943a 	slli	r2,r8,16
802138fc:	25efc83a 	sub	r23,r4,r23
80213900:	1490b03a 	or	r8,r2,r18
80213904:	4008d43a 	srli	r4,r8,16
80213908:	40ffffcc 	andi	r3,r8,65535
8021390c:	30c5383a 	mul	r2,r6,r3
80213910:	1a47383a 	mul	r3,r3,r9
80213914:	310d383a 	mul	r6,r6,r4
80213918:	100ad43a 	srli	r5,r2,16
8021391c:	4913383a 	mul	r9,r9,r4
80213920:	1987883a 	add	r3,r3,r6
80213924:	28c7883a 	add	r3,r5,r3
80213928:	1980022e 	bgeu	r3,r6,80213934 <__divdf3+0x574>
8021392c:	01000074 	movhi	r4,1
80213930:	4913883a 	add	r9,r9,r4
80213934:	1808d43a 	srli	r4,r3,16
80213938:	1806943a 	slli	r3,r3,16
8021393c:	10bfffcc 	andi	r2,r2,65535
80213940:	2253883a 	add	r9,r4,r9
80213944:	1887883a 	add	r3,r3,r2
80213948:	ba403836 	bltu	r23,r9,80213a2c <__divdf3+0x66c>
8021394c:	ba403626 	beq	r23,r9,80213a28 <__divdf3+0x668>
80213950:	42000054 	ori	r8,r8,1
80213954:	a880ffc4 	addi	r2,r21,1023
80213958:	00bf570e 	bge	zero,r2,802136b8 <__reset+0xfa1f36b8>
8021395c:	40c001cc 	andi	r3,r8,7
80213960:	18000726 	beq	r3,zero,80213980 <__divdf3+0x5c0>
80213964:	40c003cc 	andi	r3,r8,15
80213968:	01000104 	movi	r4,4
8021396c:	19000426 	beq	r3,r4,80213980 <__divdf3+0x5c0>
80213970:	4107883a 	add	r3,r8,r4
80213974:	1a11803a 	cmpltu	r8,r3,r8
80213978:	8a23883a 	add	r17,r17,r8
8021397c:	1811883a 	mov	r8,r3
80213980:	88c0402c 	andhi	r3,r17,256
80213984:	18000426 	beq	r3,zero,80213998 <__divdf3+0x5d8>
80213988:	00ffc034 	movhi	r3,65280
8021398c:	18ffffc4 	addi	r3,r3,-1
80213990:	a8810004 	addi	r2,r21,1024
80213994:	88e2703a 	and	r17,r17,r3
80213998:	00c1ff84 	movi	r3,2046
8021399c:	18bee316 	blt	r3,r2,8021352c <__reset+0xfa1f352c>
802139a0:	8824977a 	slli	r18,r17,29
802139a4:	4010d0fa 	srli	r8,r8,3
802139a8:	8822927a 	slli	r17,r17,9
802139ac:	1081ffcc 	andi	r2,r2,2047
802139b0:	9224b03a 	or	r18,r18,r8
802139b4:	880ad33a 	srli	r5,r17,12
802139b8:	98c0004c 	andi	r3,r19,1
802139bc:	003edf06 	br	8021353c <__reset+0xfa1f353c>
802139c0:	8080022c 	andhi	r2,r16,8
802139c4:	10001226 	beq	r2,zero,80213a10 <__divdf3+0x650>
802139c8:	8880022c 	andhi	r2,r17,8
802139cc:	1000101e 	bne	r2,zero,80213a10 <__divdf3+0x650>
802139d0:	00800434 	movhi	r2,16
802139d4:	89400234 	orhi	r5,r17,8
802139d8:	10bfffc4 	addi	r2,r2,-1
802139dc:	b007883a 	mov	r3,r22
802139e0:	288a703a 	and	r5,r5,r2
802139e4:	4025883a 	mov	r18,r8
802139e8:	003f3106 	br	802136b0 <__reset+0xfa1f36b0>
802139ec:	008000c4 	movi	r2,3
802139f0:	3880a626 	beq	r7,r2,80213c8c <__divdf3+0x8cc>
802139f4:	00800044 	movi	r2,1
802139f8:	3880521e 	bne	r7,r2,80213b44 <__divdf3+0x784>
802139fc:	b807883a 	mov	r3,r23
80213a00:	0005883a 	mov	r2,zero
80213a04:	000b883a 	mov	r5,zero
80213a08:	0025883a 	mov	r18,zero
80213a0c:	003ecb06 	br	8021353c <__reset+0xfa1f353c>
80213a10:	00800434 	movhi	r2,16
80213a14:	81400234 	orhi	r5,r16,8
80213a18:	10bfffc4 	addi	r2,r2,-1
80213a1c:	a007883a 	mov	r3,r20
80213a20:	288a703a 	and	r5,r5,r2
80213a24:	003f2206 	br	802136b0 <__reset+0xfa1f36b0>
80213a28:	183fca26 	beq	r3,zero,80213954 <__reset+0xfa1f3954>
80213a2c:	e5ef883a 	add	r23,fp,r23
80213a30:	40bfffc4 	addi	r2,r8,-1
80213a34:	bf00392e 	bgeu	r23,fp,80213b1c <__divdf3+0x75c>
80213a38:	1011883a 	mov	r8,r2
80213a3c:	ba7fc41e 	bne	r23,r9,80213950 <__reset+0xfa1f3950>
80213a40:	b0ffc31e 	bne	r22,r3,80213950 <__reset+0xfa1f3950>
80213a44:	003fc306 	br	80213954 <__reset+0xfa1f3954>
80213a48:	143ff604 	addi	r16,r2,-40
80213a4c:	9c20983a 	sll	r16,r19,r16
80213a50:	0025883a 	mov	r18,zero
80213a54:	003ee206 	br	802135e0 <__reset+0xfa1f35e0>
80213a58:	d9800315 	stw	r6,12(sp)
80213a5c:	d9c00215 	stw	r7,8(sp)
80213a60:	02050500 	call	80205050 <__clzsi2>
80213a64:	10800804 	addi	r2,r2,32
80213a68:	d9c00217 	ldw	r7,8(sp)
80213a6c:	d9800317 	ldw	r6,12(sp)
80213a70:	003ed106 	br	802135b8 <__reset+0xfa1f35b8>
80213a74:	147ff604 	addi	r17,r2,-40
80213a78:	3462983a 	sll	r17,r6,r17
80213a7c:	0011883a 	mov	r8,zero
80213a80:	003ef506 	br	80213658 <__reset+0xfa1f3658>
80213a84:	3009883a 	mov	r4,r6
80213a88:	d9800315 	stw	r6,12(sp)
80213a8c:	da400115 	stw	r9,4(sp)
80213a90:	02050500 	call	80205050 <__clzsi2>
80213a94:	10800804 	addi	r2,r2,32
80213a98:	da400117 	ldw	r9,4(sp)
80213a9c:	d9800317 	ldw	r6,12(sp)
80213aa0:	003ee306 	br	80213630 <__reset+0xfa1f3630>
80213aa4:	85a1883a 	add	r16,r16,r22
80213aa8:	8585803a 	cmpltu	r2,r16,r22
80213aac:	1705883a 	add	r2,r2,fp
80213ab0:	14a5883a 	add	r18,r2,r18
80213ab4:	88bfffc4 	addi	r2,r17,-1
80213ab8:	e4800c2e 	bgeu	fp,r18,80213aec <__divdf3+0x72c>
80213abc:	90c03e36 	bltu	r18,r3,80213bb8 <__divdf3+0x7f8>
80213ac0:	1c806926 	beq	r3,r18,80213c68 <__divdf3+0x8a8>
80213ac4:	90c7c83a 	sub	r3,r18,r3
80213ac8:	1023883a 	mov	r17,r2
80213acc:	003f5206 	br	80213818 <__reset+0xfa1f3818>
80213ad0:	923f0436 	bltu	r18,r8,802136e4 <__reset+0xfa1f36e4>
80213ad4:	800897fa 	slli	r4,r16,31
80213ad8:	9004d07a 	srli	r2,r18,1
80213adc:	8006d07a 	srli	r3,r16,1
80213ae0:	902097fa 	slli	r16,r18,31
80213ae4:	20a4b03a 	or	r18,r4,r2
80213ae8:	003f0106 	br	802136f0 <__reset+0xfa1f36f0>
80213aec:	e4bff51e 	bne	fp,r18,80213ac4 <__reset+0xfa1f3ac4>
80213af0:	85bff22e 	bgeu	r16,r22,80213abc <__reset+0xfa1f3abc>
80213af4:	e0c7c83a 	sub	r3,fp,r3
80213af8:	1023883a 	mov	r17,r2
80213afc:	003f4606 	br	80213818 <__reset+0xfa1f3818>
80213b00:	100f883a 	mov	r7,r2
80213b04:	003f2b06 	br	802137b4 <__reset+0xfa1f37b4>
80213b08:	180d883a 	mov	r6,r3
80213b0c:	003f1306 	br	8021375c <__reset+0xfa1f375c>
80213b10:	813fe436 	bltu	r16,r4,80213aa4 <__reset+0xfa1f3aa4>
80213b14:	0007883a 	mov	r3,zero
80213b18:	003f3f06 	br	80213818 <__reset+0xfa1f3818>
80213b1c:	ba402c36 	bltu	r23,r9,80213bd0 <__divdf3+0x810>
80213b20:	4dc05426 	beq	r9,r23,80213c74 <__divdf3+0x8b4>
80213b24:	1011883a 	mov	r8,r2
80213b28:	003f8906 	br	80213950 <__reset+0xfa1f3950>
80213b2c:	023fffc4 	movi	r8,-1
80213b30:	003f8806 	br	80213954 <__reset+0xfa1f3954>
80213b34:	1811883a 	mov	r8,r3
80213b38:	003f5406 	br	8021388c <__reset+0xfa1f388c>
80213b3c:	1025883a 	mov	r18,r2
80213b40:	003f6d06 	br	802138f8 <__reset+0xfa1f38f8>
80213b44:	b827883a 	mov	r19,r23
80213b48:	003f8206 	br	80213954 <__reset+0xfa1f3954>
80213b4c:	010007c4 	movi	r4,31
80213b50:	20c02616 	blt	r4,r3,80213bec <__divdf3+0x82c>
80213b54:	00800804 	movi	r2,32
80213b58:	10c5c83a 	sub	r2,r2,r3
80213b5c:	888a983a 	sll	r5,r17,r2
80213b60:	40c8d83a 	srl	r4,r8,r3
80213b64:	4084983a 	sll	r2,r8,r2
80213b68:	88e2d83a 	srl	r17,r17,r3
80213b6c:	2906b03a 	or	r3,r5,r4
80213b70:	1004c03a 	cmpne	r2,r2,zero
80213b74:	1886b03a 	or	r3,r3,r2
80213b78:	188001cc 	andi	r2,r3,7
80213b7c:	10000726 	beq	r2,zero,80213b9c <__divdf3+0x7dc>
80213b80:	188003cc 	andi	r2,r3,15
80213b84:	01000104 	movi	r4,4
80213b88:	11000426 	beq	r2,r4,80213b9c <__divdf3+0x7dc>
80213b8c:	1805883a 	mov	r2,r3
80213b90:	10c00104 	addi	r3,r2,4
80213b94:	1885803a 	cmpltu	r2,r3,r2
80213b98:	88a3883a 	add	r17,r17,r2
80213b9c:	8880202c 	andhi	r2,r17,128
80213ba0:	10002726 	beq	r2,zero,80213c40 <__divdf3+0x880>
80213ba4:	98c0004c 	andi	r3,r19,1
80213ba8:	00800044 	movi	r2,1
80213bac:	000b883a 	mov	r5,zero
80213bb0:	0025883a 	mov	r18,zero
80213bb4:	003e6106 	br	8021353c <__reset+0xfa1f353c>
80213bb8:	85a1883a 	add	r16,r16,r22
80213bbc:	8585803a 	cmpltu	r2,r16,r22
80213bc0:	1705883a 	add	r2,r2,fp
80213bc4:	14a5883a 	add	r18,r2,r18
80213bc8:	8c7fff84 	addi	r17,r17,-2
80213bcc:	003f1106 	br	80213814 <__reset+0xfa1f3814>
80213bd0:	b589883a 	add	r4,r22,r22
80213bd4:	25ad803a 	cmpltu	r22,r4,r22
80213bd8:	b739883a 	add	fp,r22,fp
80213bdc:	40bfff84 	addi	r2,r8,-2
80213be0:	bf2f883a 	add	r23,r23,fp
80213be4:	202d883a 	mov	r22,r4
80213be8:	003f9306 	br	80213a38 <__reset+0xfa1f3a38>
80213bec:	013ff844 	movi	r4,-31
80213bf0:	2085c83a 	sub	r2,r4,r2
80213bf4:	8888d83a 	srl	r4,r17,r2
80213bf8:	00800804 	movi	r2,32
80213bfc:	18802126 	beq	r3,r2,80213c84 <__divdf3+0x8c4>
80213c00:	00801004 	movi	r2,64
80213c04:	10c5c83a 	sub	r2,r2,r3
80213c08:	8884983a 	sll	r2,r17,r2
80213c0c:	1204b03a 	or	r2,r2,r8
80213c10:	1004c03a 	cmpne	r2,r2,zero
80213c14:	2084b03a 	or	r2,r4,r2
80213c18:	144001cc 	andi	r17,r2,7
80213c1c:	88000d1e 	bne	r17,zero,80213c54 <__divdf3+0x894>
80213c20:	000b883a 	mov	r5,zero
80213c24:	1024d0fa 	srli	r18,r2,3
80213c28:	98c0004c 	andi	r3,r19,1
80213c2c:	0005883a 	mov	r2,zero
80213c30:	9464b03a 	or	r18,r18,r17
80213c34:	003e4106 	br	8021353c <__reset+0xfa1f353c>
80213c38:	1007883a 	mov	r3,r2
80213c3c:	0023883a 	mov	r17,zero
80213c40:	880a927a 	slli	r5,r17,9
80213c44:	1805883a 	mov	r2,r3
80213c48:	8822977a 	slli	r17,r17,29
80213c4c:	280ad33a 	srli	r5,r5,12
80213c50:	003ff406 	br	80213c24 <__reset+0xfa1f3c24>
80213c54:	10c003cc 	andi	r3,r2,15
80213c58:	01000104 	movi	r4,4
80213c5c:	193ff626 	beq	r3,r4,80213c38 <__reset+0xfa1f3c38>
80213c60:	0023883a 	mov	r17,zero
80213c64:	003fca06 	br	80213b90 <__reset+0xfa1f3b90>
80213c68:	813fd336 	bltu	r16,r4,80213bb8 <__reset+0xfa1f3bb8>
80213c6c:	1023883a 	mov	r17,r2
80213c70:	003fa806 	br	80213b14 <__reset+0xfa1f3b14>
80213c74:	b0ffd636 	bltu	r22,r3,80213bd0 <__reset+0xfa1f3bd0>
80213c78:	1011883a 	mov	r8,r2
80213c7c:	b0ff341e 	bne	r22,r3,80213950 <__reset+0xfa1f3950>
80213c80:	003f3406 	br	80213954 <__reset+0xfa1f3954>
80213c84:	0005883a 	mov	r2,zero
80213c88:	003fe006 	br	80213c0c <__reset+0xfa1f3c0c>
80213c8c:	00800434 	movhi	r2,16
80213c90:	89400234 	orhi	r5,r17,8
80213c94:	10bfffc4 	addi	r2,r2,-1
80213c98:	b807883a 	mov	r3,r23
80213c9c:	288a703a 	and	r5,r5,r2
80213ca0:	4025883a 	mov	r18,r8
80213ca4:	003e8206 	br	802136b0 <__reset+0xfa1f36b0>

80213ca8 <__eqdf2>:
80213ca8:	2804d53a 	srli	r2,r5,20
80213cac:	3806d53a 	srli	r3,r7,20
80213cb0:	02000434 	movhi	r8,16
80213cb4:	423fffc4 	addi	r8,r8,-1
80213cb8:	1081ffcc 	andi	r2,r2,2047
80213cbc:	0281ffc4 	movi	r10,2047
80213cc0:	2a12703a 	and	r9,r5,r8
80213cc4:	18c1ffcc 	andi	r3,r3,2047
80213cc8:	3a10703a 	and	r8,r7,r8
80213ccc:	280ad7fa 	srli	r5,r5,31
80213cd0:	380ed7fa 	srli	r7,r7,31
80213cd4:	12801026 	beq	r2,r10,80213d18 <__eqdf2+0x70>
80213cd8:	0281ffc4 	movi	r10,2047
80213cdc:	1a800a26 	beq	r3,r10,80213d08 <__eqdf2+0x60>
80213ce0:	10c00226 	beq	r2,r3,80213cec <__eqdf2+0x44>
80213ce4:	00800044 	movi	r2,1
80213ce8:	f800283a 	ret
80213cec:	4a3ffd1e 	bne	r9,r8,80213ce4 <__reset+0xfa1f3ce4>
80213cf0:	21bffc1e 	bne	r4,r6,80213ce4 <__reset+0xfa1f3ce4>
80213cf4:	29c00c26 	beq	r5,r7,80213d28 <__eqdf2+0x80>
80213cf8:	103ffa1e 	bne	r2,zero,80213ce4 <__reset+0xfa1f3ce4>
80213cfc:	2244b03a 	or	r2,r4,r9
80213d00:	1004c03a 	cmpne	r2,r2,zero
80213d04:	f800283a 	ret
80213d08:	3214b03a 	or	r10,r6,r8
80213d0c:	503ff426 	beq	r10,zero,80213ce0 <__reset+0xfa1f3ce0>
80213d10:	00800044 	movi	r2,1
80213d14:	f800283a 	ret
80213d18:	2254b03a 	or	r10,r4,r9
80213d1c:	503fee26 	beq	r10,zero,80213cd8 <__reset+0xfa1f3cd8>
80213d20:	00800044 	movi	r2,1
80213d24:	f800283a 	ret
80213d28:	0005883a 	mov	r2,zero
80213d2c:	f800283a 	ret

80213d30 <__gedf2>:
80213d30:	2804d53a 	srli	r2,r5,20
80213d34:	3806d53a 	srli	r3,r7,20
80213d38:	02000434 	movhi	r8,16
80213d3c:	423fffc4 	addi	r8,r8,-1
80213d40:	1081ffcc 	andi	r2,r2,2047
80213d44:	0241ffc4 	movi	r9,2047
80213d48:	2a14703a 	and	r10,r5,r8
80213d4c:	18c1ffcc 	andi	r3,r3,2047
80213d50:	3a10703a 	and	r8,r7,r8
80213d54:	280ad7fa 	srli	r5,r5,31
80213d58:	380ed7fa 	srli	r7,r7,31
80213d5c:	12401d26 	beq	r2,r9,80213dd4 <__gedf2+0xa4>
80213d60:	0241ffc4 	movi	r9,2047
80213d64:	1a401226 	beq	r3,r9,80213db0 <__gedf2+0x80>
80213d68:	1000081e 	bne	r2,zero,80213d8c <__gedf2+0x5c>
80213d6c:	2296b03a 	or	r11,r4,r10
80213d70:	5813003a 	cmpeq	r9,r11,zero
80213d74:	1800091e 	bne	r3,zero,80213d9c <__gedf2+0x6c>
80213d78:	3218b03a 	or	r12,r6,r8
80213d7c:	6000071e 	bne	r12,zero,80213d9c <__gedf2+0x6c>
80213d80:	0005883a 	mov	r2,zero
80213d84:	5800101e 	bne	r11,zero,80213dc8 <__gedf2+0x98>
80213d88:	f800283a 	ret
80213d8c:	18000c1e 	bne	r3,zero,80213dc0 <__gedf2+0x90>
80213d90:	3212b03a 	or	r9,r6,r8
80213d94:	48000c26 	beq	r9,zero,80213dc8 <__gedf2+0x98>
80213d98:	0013883a 	mov	r9,zero
80213d9c:	39c03fcc 	andi	r7,r7,255
80213da0:	48000826 	beq	r9,zero,80213dc4 <__gedf2+0x94>
80213da4:	38000926 	beq	r7,zero,80213dcc <__gedf2+0x9c>
80213da8:	00800044 	movi	r2,1
80213dac:	f800283a 	ret
80213db0:	3212b03a 	or	r9,r6,r8
80213db4:	483fec26 	beq	r9,zero,80213d68 <__reset+0xfa1f3d68>
80213db8:	00bfff84 	movi	r2,-2
80213dbc:	f800283a 	ret
80213dc0:	39c03fcc 	andi	r7,r7,255
80213dc4:	29c00626 	beq	r5,r7,80213de0 <__gedf2+0xb0>
80213dc8:	283ff726 	beq	r5,zero,80213da8 <__reset+0xfa1f3da8>
80213dcc:	00bfffc4 	movi	r2,-1
80213dd0:	f800283a 	ret
80213dd4:	2292b03a 	or	r9,r4,r10
80213dd8:	483fe126 	beq	r9,zero,80213d60 <__reset+0xfa1f3d60>
80213ddc:	003ff606 	br	80213db8 <__reset+0xfa1f3db8>
80213de0:	18bff916 	blt	r3,r2,80213dc8 <__reset+0xfa1f3dc8>
80213de4:	10c00316 	blt	r2,r3,80213df4 <__gedf2+0xc4>
80213de8:	42bff736 	bltu	r8,r10,80213dc8 <__reset+0xfa1f3dc8>
80213dec:	52000326 	beq	r10,r8,80213dfc <__gedf2+0xcc>
80213df0:	5200042e 	bgeu	r10,r8,80213e04 <__gedf2+0xd4>
80213df4:	283fec1e 	bne	r5,zero,80213da8 <__reset+0xfa1f3da8>
80213df8:	003ff406 	br	80213dcc <__reset+0xfa1f3dcc>
80213dfc:	313ff236 	bltu	r6,r4,80213dc8 <__reset+0xfa1f3dc8>
80213e00:	21bffc36 	bltu	r4,r6,80213df4 <__reset+0xfa1f3df4>
80213e04:	0005883a 	mov	r2,zero
80213e08:	f800283a 	ret

80213e0c <__ledf2>:
80213e0c:	2804d53a 	srli	r2,r5,20
80213e10:	3810d53a 	srli	r8,r7,20
80213e14:	00c00434 	movhi	r3,16
80213e18:	18ffffc4 	addi	r3,r3,-1
80213e1c:	1081ffcc 	andi	r2,r2,2047
80213e20:	0241ffc4 	movi	r9,2047
80213e24:	28d4703a 	and	r10,r5,r3
80213e28:	4201ffcc 	andi	r8,r8,2047
80213e2c:	38c6703a 	and	r3,r7,r3
80213e30:	280ad7fa 	srli	r5,r5,31
80213e34:	380ed7fa 	srli	r7,r7,31
80213e38:	12401f26 	beq	r2,r9,80213eb8 <__ledf2+0xac>
80213e3c:	0241ffc4 	movi	r9,2047
80213e40:	42401426 	beq	r8,r9,80213e94 <__ledf2+0x88>
80213e44:	1000091e 	bne	r2,zero,80213e6c <__ledf2+0x60>
80213e48:	2296b03a 	or	r11,r4,r10
80213e4c:	5813003a 	cmpeq	r9,r11,zero
80213e50:	29403fcc 	andi	r5,r5,255
80213e54:	40000a1e 	bne	r8,zero,80213e80 <__ledf2+0x74>
80213e58:	30d8b03a 	or	r12,r6,r3
80213e5c:	6000081e 	bne	r12,zero,80213e80 <__ledf2+0x74>
80213e60:	0005883a 	mov	r2,zero
80213e64:	5800111e 	bne	r11,zero,80213eac <__ledf2+0xa0>
80213e68:	f800283a 	ret
80213e6c:	29403fcc 	andi	r5,r5,255
80213e70:	40000c1e 	bne	r8,zero,80213ea4 <__ledf2+0x98>
80213e74:	30d2b03a 	or	r9,r6,r3
80213e78:	48000c26 	beq	r9,zero,80213eac <__ledf2+0xa0>
80213e7c:	0013883a 	mov	r9,zero
80213e80:	39c03fcc 	andi	r7,r7,255
80213e84:	48000826 	beq	r9,zero,80213ea8 <__ledf2+0x9c>
80213e88:	38001126 	beq	r7,zero,80213ed0 <__ledf2+0xc4>
80213e8c:	00800044 	movi	r2,1
80213e90:	f800283a 	ret
80213e94:	30d2b03a 	or	r9,r6,r3
80213e98:	483fea26 	beq	r9,zero,80213e44 <__reset+0xfa1f3e44>
80213e9c:	00800084 	movi	r2,2
80213ea0:	f800283a 	ret
80213ea4:	39c03fcc 	andi	r7,r7,255
80213ea8:	39400726 	beq	r7,r5,80213ec8 <__ledf2+0xbc>
80213eac:	2800081e 	bne	r5,zero,80213ed0 <__ledf2+0xc4>
80213eb0:	00800044 	movi	r2,1
80213eb4:	f800283a 	ret
80213eb8:	2292b03a 	or	r9,r4,r10
80213ebc:	483fdf26 	beq	r9,zero,80213e3c <__reset+0xfa1f3e3c>
80213ec0:	00800084 	movi	r2,2
80213ec4:	f800283a 	ret
80213ec8:	4080030e 	bge	r8,r2,80213ed8 <__ledf2+0xcc>
80213ecc:	383fef26 	beq	r7,zero,80213e8c <__reset+0xfa1f3e8c>
80213ed0:	00bfffc4 	movi	r2,-1
80213ed4:	f800283a 	ret
80213ed8:	123feb16 	blt	r2,r8,80213e88 <__reset+0xfa1f3e88>
80213edc:	1abff336 	bltu	r3,r10,80213eac <__reset+0xfa1f3eac>
80213ee0:	50c00326 	beq	r10,r3,80213ef0 <__ledf2+0xe4>
80213ee4:	50c0042e 	bgeu	r10,r3,80213ef8 <__ledf2+0xec>
80213ee8:	283fe81e 	bne	r5,zero,80213e8c <__reset+0xfa1f3e8c>
80213eec:	003ff806 	br	80213ed0 <__reset+0xfa1f3ed0>
80213ef0:	313fee36 	bltu	r6,r4,80213eac <__reset+0xfa1f3eac>
80213ef4:	21bffc36 	bltu	r4,r6,80213ee8 <__reset+0xfa1f3ee8>
80213ef8:	0005883a 	mov	r2,zero
80213efc:	f800283a 	ret

80213f00 <__muldf3>:
80213f00:	defff304 	addi	sp,sp,-52
80213f04:	2804d53a 	srli	r2,r5,20
80213f08:	dd800915 	stw	r22,36(sp)
80213f0c:	282cd7fa 	srli	r22,r5,31
80213f10:	dc000315 	stw	r16,12(sp)
80213f14:	04000434 	movhi	r16,16
80213f18:	dd400815 	stw	r21,32(sp)
80213f1c:	dc800515 	stw	r18,20(sp)
80213f20:	843fffc4 	addi	r16,r16,-1
80213f24:	dfc00c15 	stw	ra,48(sp)
80213f28:	df000b15 	stw	fp,44(sp)
80213f2c:	ddc00a15 	stw	r23,40(sp)
80213f30:	dd000715 	stw	r20,28(sp)
80213f34:	dcc00615 	stw	r19,24(sp)
80213f38:	dc400415 	stw	r17,16(sp)
80213f3c:	1481ffcc 	andi	r18,r2,2047
80213f40:	2c20703a 	and	r16,r5,r16
80213f44:	b02b883a 	mov	r21,r22
80213f48:	b2403fcc 	andi	r9,r22,255
80213f4c:	90006026 	beq	r18,zero,802140d0 <__muldf3+0x1d0>
80213f50:	0081ffc4 	movi	r2,2047
80213f54:	2029883a 	mov	r20,r4
80213f58:	90803626 	beq	r18,r2,80214034 <__muldf3+0x134>
80213f5c:	80800434 	orhi	r2,r16,16
80213f60:	100490fa 	slli	r2,r2,3
80213f64:	2020d77a 	srli	r16,r4,29
80213f68:	202890fa 	slli	r20,r4,3
80213f6c:	94bf0044 	addi	r18,r18,-1023
80213f70:	80a0b03a 	or	r16,r16,r2
80213f74:	0027883a 	mov	r19,zero
80213f78:	0039883a 	mov	fp,zero
80213f7c:	3804d53a 	srli	r2,r7,20
80213f80:	382ed7fa 	srli	r23,r7,31
80213f84:	04400434 	movhi	r17,16
80213f88:	8c7fffc4 	addi	r17,r17,-1
80213f8c:	1081ffcc 	andi	r2,r2,2047
80213f90:	3011883a 	mov	r8,r6
80213f94:	3c62703a 	and	r17,r7,r17
80213f98:	ba803fcc 	andi	r10,r23,255
80213f9c:	10006d26 	beq	r2,zero,80214154 <__muldf3+0x254>
80213fa0:	00c1ffc4 	movi	r3,2047
80213fa4:	10c06526 	beq	r2,r3,8021413c <__muldf3+0x23c>
80213fa8:	88c00434 	orhi	r3,r17,16
80213fac:	180690fa 	slli	r3,r3,3
80213fb0:	3022d77a 	srli	r17,r6,29
80213fb4:	301090fa 	slli	r8,r6,3
80213fb8:	10bf0044 	addi	r2,r2,-1023
80213fbc:	88e2b03a 	or	r17,r17,r3
80213fc0:	000b883a 	mov	r5,zero
80213fc4:	9085883a 	add	r2,r18,r2
80213fc8:	2cc8b03a 	or	r4,r5,r19
80213fcc:	00c003c4 	movi	r3,15
80213fd0:	bdacf03a 	xor	r22,r23,r22
80213fd4:	12c00044 	addi	r11,r2,1
80213fd8:	19009936 	bltu	r3,r4,80214240 <__muldf3+0x340>
80213fdc:	200890ba 	slli	r4,r4,2
80213fe0:	00e00874 	movhi	r3,32801
80213fe4:	18cffd04 	addi	r3,r3,16372
80213fe8:	20c9883a 	add	r4,r4,r3
80213fec:	20c00017 	ldw	r3,0(r4)
80213ff0:	1800683a 	jmp	r3
80213ff4:	80214240 	call	88021424 <__reset+0x2001424>
80213ff8:	80214054 	ori	zero,r16,34049
80213ffc:	80214054 	ori	zero,r16,34049
80214000:	80214050 	cmplti	zero,r16,-31487
80214004:	8021421c 	xori	zero,r16,34056
80214008:	8021421c 	xori	zero,r16,34056
8021400c:	80214204 	addi	zero,r16,-31480
80214010:	80214050 	cmplti	zero,r16,-31487
80214014:	8021421c 	xori	zero,r16,34056
80214018:	80214204 	addi	zero,r16,-31480
8021401c:	8021421c 	xori	zero,r16,34056
80214020:	80214050 	cmplti	zero,r16,-31487
80214024:	8021422c 	andhi	zero,r16,34056
80214028:	8021422c 	andhi	zero,r16,34056
8021402c:	8021422c 	andhi	zero,r16,34056
80214030:	80214448 	cmpgei	zero,r16,-31471
80214034:	2404b03a 	or	r2,r4,r16
80214038:	10006f1e 	bne	r2,zero,802141f8 <__muldf3+0x2f8>
8021403c:	04c00204 	movi	r19,8
80214040:	0021883a 	mov	r16,zero
80214044:	0029883a 	mov	r20,zero
80214048:	07000084 	movi	fp,2
8021404c:	003fcb06 	br	80213f7c <__reset+0xfa1f3f7c>
80214050:	502d883a 	mov	r22,r10
80214054:	00800084 	movi	r2,2
80214058:	28805726 	beq	r5,r2,802141b8 <__muldf3+0x2b8>
8021405c:	008000c4 	movi	r2,3
80214060:	28816626 	beq	r5,r2,802145fc <__muldf3+0x6fc>
80214064:	00800044 	movi	r2,1
80214068:	2881411e 	bne	r5,r2,80214570 <__muldf3+0x670>
8021406c:	b02b883a 	mov	r21,r22
80214070:	0005883a 	mov	r2,zero
80214074:	000b883a 	mov	r5,zero
80214078:	0029883a 	mov	r20,zero
8021407c:	1004953a 	slli	r2,r2,20
80214080:	a8c03fcc 	andi	r3,r21,255
80214084:	04400434 	movhi	r17,16
80214088:	8c7fffc4 	addi	r17,r17,-1
8021408c:	180697fa 	slli	r3,r3,31
80214090:	2c4a703a 	and	r5,r5,r17
80214094:	288ab03a 	or	r5,r5,r2
80214098:	28c6b03a 	or	r3,r5,r3
8021409c:	a005883a 	mov	r2,r20
802140a0:	dfc00c17 	ldw	ra,48(sp)
802140a4:	df000b17 	ldw	fp,44(sp)
802140a8:	ddc00a17 	ldw	r23,40(sp)
802140ac:	dd800917 	ldw	r22,36(sp)
802140b0:	dd400817 	ldw	r21,32(sp)
802140b4:	dd000717 	ldw	r20,28(sp)
802140b8:	dcc00617 	ldw	r19,24(sp)
802140bc:	dc800517 	ldw	r18,20(sp)
802140c0:	dc400417 	ldw	r17,16(sp)
802140c4:	dc000317 	ldw	r16,12(sp)
802140c8:	dec00d04 	addi	sp,sp,52
802140cc:	f800283a 	ret
802140d0:	2404b03a 	or	r2,r4,r16
802140d4:	2027883a 	mov	r19,r4
802140d8:	10004226 	beq	r2,zero,802141e4 <__muldf3+0x2e4>
802140dc:	8000fc26 	beq	r16,zero,802144d0 <__muldf3+0x5d0>
802140e0:	8009883a 	mov	r4,r16
802140e4:	d9800215 	stw	r6,8(sp)
802140e8:	d9c00015 	stw	r7,0(sp)
802140ec:	da400115 	stw	r9,4(sp)
802140f0:	02050500 	call	80205050 <__clzsi2>
802140f4:	d9800217 	ldw	r6,8(sp)
802140f8:	d9c00017 	ldw	r7,0(sp)
802140fc:	da400117 	ldw	r9,4(sp)
80214100:	113ffd44 	addi	r4,r2,-11
80214104:	00c00704 	movi	r3,28
80214108:	1900ed16 	blt	r3,r4,802144c0 <__muldf3+0x5c0>
8021410c:	00c00744 	movi	r3,29
80214110:	147ffe04 	addi	r17,r2,-8
80214114:	1907c83a 	sub	r3,r3,r4
80214118:	8460983a 	sll	r16,r16,r17
8021411c:	98c6d83a 	srl	r3,r19,r3
80214120:	9c68983a 	sll	r20,r19,r17
80214124:	1c20b03a 	or	r16,r3,r16
80214128:	1080fcc4 	addi	r2,r2,1011
8021412c:	00a5c83a 	sub	r18,zero,r2
80214130:	0027883a 	mov	r19,zero
80214134:	0039883a 	mov	fp,zero
80214138:	003f9006 	br	80213f7c <__reset+0xfa1f3f7c>
8021413c:	3446b03a 	or	r3,r6,r17
80214140:	1800261e 	bne	r3,zero,802141dc <__muldf3+0x2dc>
80214144:	0023883a 	mov	r17,zero
80214148:	0011883a 	mov	r8,zero
8021414c:	01400084 	movi	r5,2
80214150:	003f9c06 	br	80213fc4 <__reset+0xfa1f3fc4>
80214154:	3446b03a 	or	r3,r6,r17
80214158:	18001c26 	beq	r3,zero,802141cc <__muldf3+0x2cc>
8021415c:	8800ce26 	beq	r17,zero,80214498 <__muldf3+0x598>
80214160:	8809883a 	mov	r4,r17
80214164:	d9800215 	stw	r6,8(sp)
80214168:	da400115 	stw	r9,4(sp)
8021416c:	da800015 	stw	r10,0(sp)
80214170:	02050500 	call	80205050 <__clzsi2>
80214174:	d9800217 	ldw	r6,8(sp)
80214178:	da400117 	ldw	r9,4(sp)
8021417c:	da800017 	ldw	r10,0(sp)
80214180:	113ffd44 	addi	r4,r2,-11
80214184:	00c00704 	movi	r3,28
80214188:	1900bf16 	blt	r3,r4,80214488 <__muldf3+0x588>
8021418c:	00c00744 	movi	r3,29
80214190:	123ffe04 	addi	r8,r2,-8
80214194:	1907c83a 	sub	r3,r3,r4
80214198:	8a22983a 	sll	r17,r17,r8
8021419c:	30c6d83a 	srl	r3,r6,r3
802141a0:	3210983a 	sll	r8,r6,r8
802141a4:	1c62b03a 	or	r17,r3,r17
802141a8:	1080fcc4 	addi	r2,r2,1011
802141ac:	0085c83a 	sub	r2,zero,r2
802141b0:	000b883a 	mov	r5,zero
802141b4:	003f8306 	br	80213fc4 <__reset+0xfa1f3fc4>
802141b8:	b02b883a 	mov	r21,r22
802141bc:	0081ffc4 	movi	r2,2047
802141c0:	000b883a 	mov	r5,zero
802141c4:	0029883a 	mov	r20,zero
802141c8:	003fac06 	br	8021407c <__reset+0xfa1f407c>
802141cc:	0023883a 	mov	r17,zero
802141d0:	0011883a 	mov	r8,zero
802141d4:	01400044 	movi	r5,1
802141d8:	003f7a06 	br	80213fc4 <__reset+0xfa1f3fc4>
802141dc:	014000c4 	movi	r5,3
802141e0:	003f7806 	br	80213fc4 <__reset+0xfa1f3fc4>
802141e4:	04c00104 	movi	r19,4
802141e8:	0021883a 	mov	r16,zero
802141ec:	0029883a 	mov	r20,zero
802141f0:	07000044 	movi	fp,1
802141f4:	003f6106 	br	80213f7c <__reset+0xfa1f3f7c>
802141f8:	04c00304 	movi	r19,12
802141fc:	070000c4 	movi	fp,3
80214200:	003f5e06 	br	80213f7c <__reset+0xfa1f3f7c>
80214204:	01400434 	movhi	r5,16
80214208:	002b883a 	mov	r21,zero
8021420c:	297fffc4 	addi	r5,r5,-1
80214210:	053fffc4 	movi	r20,-1
80214214:	0081ffc4 	movi	r2,2047
80214218:	003f9806 	br	8021407c <__reset+0xfa1f407c>
8021421c:	8023883a 	mov	r17,r16
80214220:	a011883a 	mov	r8,r20
80214224:	e00b883a 	mov	r5,fp
80214228:	003f8a06 	br	80214054 <__reset+0xfa1f4054>
8021422c:	8023883a 	mov	r17,r16
80214230:	a011883a 	mov	r8,r20
80214234:	482d883a 	mov	r22,r9
80214238:	e00b883a 	mov	r5,fp
8021423c:	003f8506 	br	80214054 <__reset+0xfa1f4054>
80214240:	a00ad43a 	srli	r5,r20,16
80214244:	401ad43a 	srli	r13,r8,16
80214248:	a53fffcc 	andi	r20,r20,65535
8021424c:	423fffcc 	andi	r8,r8,65535
80214250:	4519383a 	mul	r12,r8,r20
80214254:	4147383a 	mul	r3,r8,r5
80214258:	6d09383a 	mul	r4,r13,r20
8021425c:	600cd43a 	srli	r6,r12,16
80214260:	2b5d383a 	mul	r14,r5,r13
80214264:	20c9883a 	add	r4,r4,r3
80214268:	310d883a 	add	r6,r6,r4
8021426c:	30c0022e 	bgeu	r6,r3,80214278 <__muldf3+0x378>
80214270:	00c00074 	movhi	r3,1
80214274:	70dd883a 	add	r14,r14,r3
80214278:	8826d43a 	srli	r19,r17,16
8021427c:	8bffffcc 	andi	r15,r17,65535
80214280:	7d23383a 	mul	r17,r15,r20
80214284:	7949383a 	mul	r4,r15,r5
80214288:	9d29383a 	mul	r20,r19,r20
8021428c:	8814d43a 	srli	r10,r17,16
80214290:	3012943a 	slli	r9,r6,16
80214294:	a129883a 	add	r20,r20,r4
80214298:	633fffcc 	andi	r12,r12,65535
8021429c:	5515883a 	add	r10,r10,r20
802142a0:	3006d43a 	srli	r3,r6,16
802142a4:	4b13883a 	add	r9,r9,r12
802142a8:	2ccb383a 	mul	r5,r5,r19
802142ac:	5100022e 	bgeu	r10,r4,802142b8 <__muldf3+0x3b8>
802142b0:	01000074 	movhi	r4,1
802142b4:	290b883a 	add	r5,r5,r4
802142b8:	802ad43a 	srli	r21,r16,16
802142bc:	843fffcc 	andi	r16,r16,65535
802142c0:	440d383a 	mul	r6,r8,r16
802142c4:	4565383a 	mul	r18,r8,r21
802142c8:	8349383a 	mul	r4,r16,r13
802142cc:	500e943a 	slli	r7,r10,16
802142d0:	3010d43a 	srli	r8,r6,16
802142d4:	5028d43a 	srli	r20,r10,16
802142d8:	2489883a 	add	r4,r4,r18
802142dc:	8abfffcc 	andi	r10,r17,65535
802142e0:	3a95883a 	add	r10,r7,r10
802142e4:	4119883a 	add	r12,r8,r4
802142e8:	a169883a 	add	r20,r20,r5
802142ec:	1a87883a 	add	r3,r3,r10
802142f0:	6d5b383a 	mul	r13,r13,r21
802142f4:	6480022e 	bgeu	r12,r18,80214300 <__muldf3+0x400>
802142f8:	01000074 	movhi	r4,1
802142fc:	691b883a 	add	r13,r13,r4
80214300:	7c25383a 	mul	r18,r15,r16
80214304:	7d4b383a 	mul	r5,r15,r21
80214308:	84cf383a 	mul	r7,r16,r19
8021430c:	901ed43a 	srli	r15,r18,16
80214310:	6008d43a 	srli	r4,r12,16
80214314:	6010943a 	slli	r8,r12,16
80214318:	394f883a 	add	r7,r7,r5
8021431c:	333fffcc 	andi	r12,r6,65535
80214320:	79df883a 	add	r15,r15,r7
80214324:	235b883a 	add	r13,r4,r13
80214328:	9d63383a 	mul	r17,r19,r21
8021432c:	4309883a 	add	r4,r8,r12
80214330:	7940022e 	bgeu	r15,r5,8021433c <__muldf3+0x43c>
80214334:	01400074 	movhi	r5,1
80214338:	8963883a 	add	r17,r17,r5
8021433c:	780a943a 	slli	r5,r15,16
80214340:	91bfffcc 	andi	r6,r18,65535
80214344:	70c7883a 	add	r3,r14,r3
80214348:	298d883a 	add	r6,r5,r6
8021434c:	1a8f803a 	cmpltu	r7,r3,r10
80214350:	350b883a 	add	r5,r6,r20
80214354:	20c7883a 	add	r3,r4,r3
80214358:	3955883a 	add	r10,r7,r5
8021435c:	1909803a 	cmpltu	r4,r3,r4
80214360:	6a91883a 	add	r8,r13,r10
80214364:	780cd43a 	srli	r6,r15,16
80214368:	2219883a 	add	r12,r4,r8
8021436c:	2d0b803a 	cmpltu	r5,r5,r20
80214370:	51cf803a 	cmpltu	r7,r10,r7
80214374:	29ceb03a 	or	r7,r5,r7
80214378:	4351803a 	cmpltu	r8,r8,r13
8021437c:	610b803a 	cmpltu	r5,r12,r4
80214380:	4148b03a 	or	r4,r8,r5
80214384:	398f883a 	add	r7,r7,r6
80214388:	3909883a 	add	r4,r7,r4
8021438c:	1810927a 	slli	r8,r3,9
80214390:	2449883a 	add	r4,r4,r17
80214394:	2008927a 	slli	r4,r4,9
80214398:	6022d5fa 	srli	r17,r12,23
8021439c:	1806d5fa 	srli	r3,r3,23
802143a0:	4252b03a 	or	r9,r8,r9
802143a4:	600a927a 	slli	r5,r12,9
802143a8:	4810c03a 	cmpne	r8,r9,zero
802143ac:	2462b03a 	or	r17,r4,r17
802143b0:	40c6b03a 	or	r3,r8,r3
802143b4:	8900402c 	andhi	r4,r17,256
802143b8:	1950b03a 	or	r8,r3,r5
802143bc:	20000726 	beq	r4,zero,802143dc <__muldf3+0x4dc>
802143c0:	4006d07a 	srli	r3,r8,1
802143c4:	880497fa 	slli	r2,r17,31
802143c8:	4200004c 	andi	r8,r8,1
802143cc:	8822d07a 	srli	r17,r17,1
802143d0:	1a10b03a 	or	r8,r3,r8
802143d4:	1210b03a 	or	r8,r2,r8
802143d8:	5805883a 	mov	r2,r11
802143dc:	1140ffc4 	addi	r5,r2,1023
802143e0:	0140440e 	bge	zero,r5,802144f4 <__muldf3+0x5f4>
802143e4:	40c001cc 	andi	r3,r8,7
802143e8:	18000726 	beq	r3,zero,80214408 <__muldf3+0x508>
802143ec:	40c003cc 	andi	r3,r8,15
802143f0:	01000104 	movi	r4,4
802143f4:	19000426 	beq	r3,r4,80214408 <__muldf3+0x508>
802143f8:	4107883a 	add	r3,r8,r4
802143fc:	1a11803a 	cmpltu	r8,r3,r8
80214400:	8a23883a 	add	r17,r17,r8
80214404:	1811883a 	mov	r8,r3
80214408:	88c0402c 	andhi	r3,r17,256
8021440c:	18000426 	beq	r3,zero,80214420 <__muldf3+0x520>
80214410:	11410004 	addi	r5,r2,1024
80214414:	00bfc034 	movhi	r2,65280
80214418:	10bfffc4 	addi	r2,r2,-1
8021441c:	88a2703a 	and	r17,r17,r2
80214420:	0081ff84 	movi	r2,2046
80214424:	117f6416 	blt	r2,r5,802141b8 <__reset+0xfa1f41b8>
80214428:	8828977a 	slli	r20,r17,29
8021442c:	4010d0fa 	srli	r8,r8,3
80214430:	8822927a 	slli	r17,r17,9
80214434:	2881ffcc 	andi	r2,r5,2047
80214438:	a228b03a 	or	r20,r20,r8
8021443c:	880ad33a 	srli	r5,r17,12
80214440:	b02b883a 	mov	r21,r22
80214444:	003f0d06 	br	8021407c <__reset+0xfa1f407c>
80214448:	8080022c 	andhi	r2,r16,8
8021444c:	10000926 	beq	r2,zero,80214474 <__muldf3+0x574>
80214450:	8880022c 	andhi	r2,r17,8
80214454:	1000071e 	bne	r2,zero,80214474 <__muldf3+0x574>
80214458:	00800434 	movhi	r2,16
8021445c:	89400234 	orhi	r5,r17,8
80214460:	10bfffc4 	addi	r2,r2,-1
80214464:	b82b883a 	mov	r21,r23
80214468:	288a703a 	and	r5,r5,r2
8021446c:	4029883a 	mov	r20,r8
80214470:	003f6806 	br	80214214 <__reset+0xfa1f4214>
80214474:	00800434 	movhi	r2,16
80214478:	81400234 	orhi	r5,r16,8
8021447c:	10bfffc4 	addi	r2,r2,-1
80214480:	288a703a 	and	r5,r5,r2
80214484:	003f6306 	br	80214214 <__reset+0xfa1f4214>
80214488:	147ff604 	addi	r17,r2,-40
8021448c:	3462983a 	sll	r17,r6,r17
80214490:	0011883a 	mov	r8,zero
80214494:	003f4406 	br	802141a8 <__reset+0xfa1f41a8>
80214498:	3009883a 	mov	r4,r6
8021449c:	d9800215 	stw	r6,8(sp)
802144a0:	da400115 	stw	r9,4(sp)
802144a4:	da800015 	stw	r10,0(sp)
802144a8:	02050500 	call	80205050 <__clzsi2>
802144ac:	10800804 	addi	r2,r2,32
802144b0:	da800017 	ldw	r10,0(sp)
802144b4:	da400117 	ldw	r9,4(sp)
802144b8:	d9800217 	ldw	r6,8(sp)
802144bc:	003f3006 	br	80214180 <__reset+0xfa1f4180>
802144c0:	143ff604 	addi	r16,r2,-40
802144c4:	9c20983a 	sll	r16,r19,r16
802144c8:	0029883a 	mov	r20,zero
802144cc:	003f1606 	br	80214128 <__reset+0xfa1f4128>
802144d0:	d9800215 	stw	r6,8(sp)
802144d4:	d9c00015 	stw	r7,0(sp)
802144d8:	da400115 	stw	r9,4(sp)
802144dc:	02050500 	call	80205050 <__clzsi2>
802144e0:	10800804 	addi	r2,r2,32
802144e4:	da400117 	ldw	r9,4(sp)
802144e8:	d9c00017 	ldw	r7,0(sp)
802144ec:	d9800217 	ldw	r6,8(sp)
802144f0:	003f0306 	br	80214100 <__reset+0xfa1f4100>
802144f4:	00c00044 	movi	r3,1
802144f8:	1947c83a 	sub	r3,r3,r5
802144fc:	00800e04 	movi	r2,56
80214500:	10feda16 	blt	r2,r3,8021406c <__reset+0xfa1f406c>
80214504:	008007c4 	movi	r2,31
80214508:	10c01b16 	blt	r2,r3,80214578 <__muldf3+0x678>
8021450c:	00800804 	movi	r2,32
80214510:	10c5c83a 	sub	r2,r2,r3
80214514:	888a983a 	sll	r5,r17,r2
80214518:	40c8d83a 	srl	r4,r8,r3
8021451c:	4084983a 	sll	r2,r8,r2
80214520:	88e2d83a 	srl	r17,r17,r3
80214524:	2906b03a 	or	r3,r5,r4
80214528:	1004c03a 	cmpne	r2,r2,zero
8021452c:	1886b03a 	or	r3,r3,r2
80214530:	188001cc 	andi	r2,r3,7
80214534:	10000726 	beq	r2,zero,80214554 <__muldf3+0x654>
80214538:	188003cc 	andi	r2,r3,15
8021453c:	01000104 	movi	r4,4
80214540:	11000426 	beq	r2,r4,80214554 <__muldf3+0x654>
80214544:	1805883a 	mov	r2,r3
80214548:	10c00104 	addi	r3,r2,4
8021454c:	1885803a 	cmpltu	r2,r3,r2
80214550:	88a3883a 	add	r17,r17,r2
80214554:	8880202c 	andhi	r2,r17,128
80214558:	10001c26 	beq	r2,zero,802145cc <__muldf3+0x6cc>
8021455c:	b02b883a 	mov	r21,r22
80214560:	00800044 	movi	r2,1
80214564:	000b883a 	mov	r5,zero
80214568:	0029883a 	mov	r20,zero
8021456c:	003ec306 	br	8021407c <__reset+0xfa1f407c>
80214570:	5805883a 	mov	r2,r11
80214574:	003f9906 	br	802143dc <__reset+0xfa1f43dc>
80214578:	00bff844 	movi	r2,-31
8021457c:	1145c83a 	sub	r2,r2,r5
80214580:	8888d83a 	srl	r4,r17,r2
80214584:	00800804 	movi	r2,32
80214588:	18801a26 	beq	r3,r2,802145f4 <__muldf3+0x6f4>
8021458c:	00801004 	movi	r2,64
80214590:	10c5c83a 	sub	r2,r2,r3
80214594:	8884983a 	sll	r2,r17,r2
80214598:	1204b03a 	or	r2,r2,r8
8021459c:	1004c03a 	cmpne	r2,r2,zero
802145a0:	2084b03a 	or	r2,r4,r2
802145a4:	144001cc 	andi	r17,r2,7
802145a8:	88000d1e 	bne	r17,zero,802145e0 <__muldf3+0x6e0>
802145ac:	000b883a 	mov	r5,zero
802145b0:	1028d0fa 	srli	r20,r2,3
802145b4:	b02b883a 	mov	r21,r22
802145b8:	0005883a 	mov	r2,zero
802145bc:	a468b03a 	or	r20,r20,r17
802145c0:	003eae06 	br	8021407c <__reset+0xfa1f407c>
802145c4:	1007883a 	mov	r3,r2
802145c8:	0023883a 	mov	r17,zero
802145cc:	880a927a 	slli	r5,r17,9
802145d0:	1805883a 	mov	r2,r3
802145d4:	8822977a 	slli	r17,r17,29
802145d8:	280ad33a 	srli	r5,r5,12
802145dc:	003ff406 	br	802145b0 <__reset+0xfa1f45b0>
802145e0:	10c003cc 	andi	r3,r2,15
802145e4:	01000104 	movi	r4,4
802145e8:	193ff626 	beq	r3,r4,802145c4 <__reset+0xfa1f45c4>
802145ec:	0023883a 	mov	r17,zero
802145f0:	003fd506 	br	80214548 <__reset+0xfa1f4548>
802145f4:	0005883a 	mov	r2,zero
802145f8:	003fe706 	br	80214598 <__reset+0xfa1f4598>
802145fc:	00800434 	movhi	r2,16
80214600:	89400234 	orhi	r5,r17,8
80214604:	10bfffc4 	addi	r2,r2,-1
80214608:	b02b883a 	mov	r21,r22
8021460c:	288a703a 	and	r5,r5,r2
80214610:	4029883a 	mov	r20,r8
80214614:	003eff06 	br	80214214 <__reset+0xfa1f4214>

80214618 <__subdf3>:
80214618:	02000434 	movhi	r8,16
8021461c:	423fffc4 	addi	r8,r8,-1
80214620:	defffb04 	addi	sp,sp,-20
80214624:	2a14703a 	and	r10,r5,r8
80214628:	3812d53a 	srli	r9,r7,20
8021462c:	3a10703a 	and	r8,r7,r8
80214630:	2006d77a 	srli	r3,r4,29
80214634:	3004d77a 	srli	r2,r6,29
80214638:	dc000015 	stw	r16,0(sp)
8021463c:	501490fa 	slli	r10,r10,3
80214640:	2820d53a 	srli	r16,r5,20
80214644:	401090fa 	slli	r8,r8,3
80214648:	dc800215 	stw	r18,8(sp)
8021464c:	dc400115 	stw	r17,4(sp)
80214650:	dfc00415 	stw	ra,16(sp)
80214654:	202290fa 	slli	r17,r4,3
80214658:	dcc00315 	stw	r19,12(sp)
8021465c:	4a41ffcc 	andi	r9,r9,2047
80214660:	0101ffc4 	movi	r4,2047
80214664:	2824d7fa 	srli	r18,r5,31
80214668:	8401ffcc 	andi	r16,r16,2047
8021466c:	50c6b03a 	or	r3,r10,r3
80214670:	380ed7fa 	srli	r7,r7,31
80214674:	408ab03a 	or	r5,r8,r2
80214678:	300c90fa 	slli	r6,r6,3
8021467c:	49009626 	beq	r9,r4,802148d8 <__subdf3+0x2c0>
80214680:	39c0005c 	xori	r7,r7,1
80214684:	8245c83a 	sub	r2,r16,r9
80214688:	3c807426 	beq	r7,r18,8021485c <__subdf3+0x244>
8021468c:	0080af0e 	bge	zero,r2,8021494c <__subdf3+0x334>
80214690:	48002a1e 	bne	r9,zero,8021473c <__subdf3+0x124>
80214694:	2988b03a 	or	r4,r5,r6
80214698:	20009a1e 	bne	r4,zero,80214904 <__subdf3+0x2ec>
8021469c:	888001cc 	andi	r2,r17,7
802146a0:	10000726 	beq	r2,zero,802146c0 <__subdf3+0xa8>
802146a4:	888003cc 	andi	r2,r17,15
802146a8:	01000104 	movi	r4,4
802146ac:	11000426 	beq	r2,r4,802146c0 <__subdf3+0xa8>
802146b0:	890b883a 	add	r5,r17,r4
802146b4:	2c63803a 	cmpltu	r17,r5,r17
802146b8:	1c47883a 	add	r3,r3,r17
802146bc:	2823883a 	mov	r17,r5
802146c0:	1880202c 	andhi	r2,r3,128
802146c4:	10005926 	beq	r2,zero,8021482c <__subdf3+0x214>
802146c8:	84000044 	addi	r16,r16,1
802146cc:	0081ffc4 	movi	r2,2047
802146d0:	8080be26 	beq	r16,r2,802149cc <__subdf3+0x3b4>
802146d4:	017fe034 	movhi	r5,65408
802146d8:	297fffc4 	addi	r5,r5,-1
802146dc:	1946703a 	and	r3,r3,r5
802146e0:	1804977a 	slli	r2,r3,29
802146e4:	1806927a 	slli	r3,r3,9
802146e8:	8822d0fa 	srli	r17,r17,3
802146ec:	8401ffcc 	andi	r16,r16,2047
802146f0:	180ad33a 	srli	r5,r3,12
802146f4:	9100004c 	andi	r4,r18,1
802146f8:	1444b03a 	or	r2,r2,r17
802146fc:	80c1ffcc 	andi	r3,r16,2047
80214700:	1820953a 	slli	r16,r3,20
80214704:	20c03fcc 	andi	r3,r4,255
80214708:	180897fa 	slli	r4,r3,31
8021470c:	00c00434 	movhi	r3,16
80214710:	18ffffc4 	addi	r3,r3,-1
80214714:	28c6703a 	and	r3,r5,r3
80214718:	1c06b03a 	or	r3,r3,r16
8021471c:	1906b03a 	or	r3,r3,r4
80214720:	dfc00417 	ldw	ra,16(sp)
80214724:	dcc00317 	ldw	r19,12(sp)
80214728:	dc800217 	ldw	r18,8(sp)
8021472c:	dc400117 	ldw	r17,4(sp)
80214730:	dc000017 	ldw	r16,0(sp)
80214734:	dec00504 	addi	sp,sp,20
80214738:	f800283a 	ret
8021473c:	0101ffc4 	movi	r4,2047
80214740:	813fd626 	beq	r16,r4,8021469c <__reset+0xfa1f469c>
80214744:	29402034 	orhi	r5,r5,128
80214748:	01000e04 	movi	r4,56
8021474c:	2080a316 	blt	r4,r2,802149dc <__subdf3+0x3c4>
80214750:	010007c4 	movi	r4,31
80214754:	2080c616 	blt	r4,r2,80214a70 <__subdf3+0x458>
80214758:	01000804 	movi	r4,32
8021475c:	2089c83a 	sub	r4,r4,r2
80214760:	2910983a 	sll	r8,r5,r4
80214764:	308ed83a 	srl	r7,r6,r2
80214768:	3108983a 	sll	r4,r6,r4
8021476c:	2884d83a 	srl	r2,r5,r2
80214770:	41ccb03a 	or	r6,r8,r7
80214774:	2008c03a 	cmpne	r4,r4,zero
80214778:	310cb03a 	or	r6,r6,r4
8021477c:	898dc83a 	sub	r6,r17,r6
80214780:	89a3803a 	cmpltu	r17,r17,r6
80214784:	1887c83a 	sub	r3,r3,r2
80214788:	1c47c83a 	sub	r3,r3,r17
8021478c:	3023883a 	mov	r17,r6
80214790:	1880202c 	andhi	r2,r3,128
80214794:	10002326 	beq	r2,zero,80214824 <__subdf3+0x20c>
80214798:	04c02034 	movhi	r19,128
8021479c:	9cffffc4 	addi	r19,r19,-1
802147a0:	1ce6703a 	and	r19,r3,r19
802147a4:	98007a26 	beq	r19,zero,80214990 <__subdf3+0x378>
802147a8:	9809883a 	mov	r4,r19
802147ac:	02050500 	call	80205050 <__clzsi2>
802147b0:	113ffe04 	addi	r4,r2,-8
802147b4:	00c007c4 	movi	r3,31
802147b8:	19007b16 	blt	r3,r4,802149a8 <__subdf3+0x390>
802147bc:	00800804 	movi	r2,32
802147c0:	1105c83a 	sub	r2,r2,r4
802147c4:	8884d83a 	srl	r2,r17,r2
802147c8:	9906983a 	sll	r3,r19,r4
802147cc:	8922983a 	sll	r17,r17,r4
802147d0:	10c4b03a 	or	r2,r2,r3
802147d4:	24007816 	blt	r4,r16,802149b8 <__subdf3+0x3a0>
802147d8:	2421c83a 	sub	r16,r4,r16
802147dc:	80c00044 	addi	r3,r16,1
802147e0:	010007c4 	movi	r4,31
802147e4:	20c09516 	blt	r4,r3,80214a3c <__subdf3+0x424>
802147e8:	01400804 	movi	r5,32
802147ec:	28cbc83a 	sub	r5,r5,r3
802147f0:	88c8d83a 	srl	r4,r17,r3
802147f4:	8962983a 	sll	r17,r17,r5
802147f8:	114a983a 	sll	r5,r2,r5
802147fc:	10c6d83a 	srl	r3,r2,r3
80214800:	8804c03a 	cmpne	r2,r17,zero
80214804:	290ab03a 	or	r5,r5,r4
80214808:	28a2b03a 	or	r17,r5,r2
8021480c:	0021883a 	mov	r16,zero
80214810:	003fa206 	br	8021469c <__reset+0xfa1f469c>
80214814:	2090b03a 	or	r8,r4,r2
80214818:	40018e26 	beq	r8,zero,80214e54 <__subdf3+0x83c>
8021481c:	1007883a 	mov	r3,r2
80214820:	2023883a 	mov	r17,r4
80214824:	888001cc 	andi	r2,r17,7
80214828:	103f9e1e 	bne	r2,zero,802146a4 <__reset+0xfa1f46a4>
8021482c:	1804977a 	slli	r2,r3,29
80214830:	8822d0fa 	srli	r17,r17,3
80214834:	1810d0fa 	srli	r8,r3,3
80214838:	9100004c 	andi	r4,r18,1
8021483c:	1444b03a 	or	r2,r2,r17
80214840:	00c1ffc4 	movi	r3,2047
80214844:	80c02826 	beq	r16,r3,802148e8 <__subdf3+0x2d0>
80214848:	01400434 	movhi	r5,16
8021484c:	297fffc4 	addi	r5,r5,-1
80214850:	80e0703a 	and	r16,r16,r3
80214854:	414a703a 	and	r5,r8,r5
80214858:	003fa806 	br	802146fc <__reset+0xfa1f46fc>
8021485c:	0080630e 	bge	zero,r2,802149ec <__subdf3+0x3d4>
80214860:	48003026 	beq	r9,zero,80214924 <__subdf3+0x30c>
80214864:	0101ffc4 	movi	r4,2047
80214868:	813f8c26 	beq	r16,r4,8021469c <__reset+0xfa1f469c>
8021486c:	29402034 	orhi	r5,r5,128
80214870:	01000e04 	movi	r4,56
80214874:	2080a90e 	bge	r4,r2,80214b1c <__subdf3+0x504>
80214878:	298cb03a 	or	r6,r5,r6
8021487c:	3012c03a 	cmpne	r9,r6,zero
80214880:	0005883a 	mov	r2,zero
80214884:	4c53883a 	add	r9,r9,r17
80214888:	4c63803a 	cmpltu	r17,r9,r17
8021488c:	10c7883a 	add	r3,r2,r3
80214890:	88c7883a 	add	r3,r17,r3
80214894:	4823883a 	mov	r17,r9
80214898:	1880202c 	andhi	r2,r3,128
8021489c:	1000d026 	beq	r2,zero,80214be0 <__subdf3+0x5c8>
802148a0:	84000044 	addi	r16,r16,1
802148a4:	0081ffc4 	movi	r2,2047
802148a8:	8080fe26 	beq	r16,r2,80214ca4 <__subdf3+0x68c>
802148ac:	00bfe034 	movhi	r2,65408
802148b0:	10bfffc4 	addi	r2,r2,-1
802148b4:	1886703a 	and	r3,r3,r2
802148b8:	880ad07a 	srli	r5,r17,1
802148bc:	180497fa 	slli	r2,r3,31
802148c0:	8900004c 	andi	r4,r17,1
802148c4:	2922b03a 	or	r17,r5,r4
802148c8:	1806d07a 	srli	r3,r3,1
802148cc:	1462b03a 	or	r17,r2,r17
802148d0:	3825883a 	mov	r18,r7
802148d4:	003f7106 	br	8021469c <__reset+0xfa1f469c>
802148d8:	2984b03a 	or	r2,r5,r6
802148dc:	103f6826 	beq	r2,zero,80214680 <__reset+0xfa1f4680>
802148e0:	39c03fcc 	andi	r7,r7,255
802148e4:	003f6706 	br	80214684 <__reset+0xfa1f4684>
802148e8:	4086b03a 	or	r3,r8,r2
802148ec:	18015226 	beq	r3,zero,80214e38 <__subdf3+0x820>
802148f0:	00c00434 	movhi	r3,16
802148f4:	41400234 	orhi	r5,r8,8
802148f8:	18ffffc4 	addi	r3,r3,-1
802148fc:	28ca703a 	and	r5,r5,r3
80214900:	003f7e06 	br	802146fc <__reset+0xfa1f46fc>
80214904:	10bfffc4 	addi	r2,r2,-1
80214908:	1000491e 	bne	r2,zero,80214a30 <__subdf3+0x418>
8021490c:	898fc83a 	sub	r7,r17,r6
80214910:	89e3803a 	cmpltu	r17,r17,r7
80214914:	1947c83a 	sub	r3,r3,r5
80214918:	1c47c83a 	sub	r3,r3,r17
8021491c:	3823883a 	mov	r17,r7
80214920:	003f9b06 	br	80214790 <__reset+0xfa1f4790>
80214924:	2988b03a 	or	r4,r5,r6
80214928:	203f5c26 	beq	r4,zero,8021469c <__reset+0xfa1f469c>
8021492c:	10bfffc4 	addi	r2,r2,-1
80214930:	1000931e 	bne	r2,zero,80214b80 <__subdf3+0x568>
80214934:	898d883a 	add	r6,r17,r6
80214938:	3463803a 	cmpltu	r17,r6,r17
8021493c:	1947883a 	add	r3,r3,r5
80214940:	88c7883a 	add	r3,r17,r3
80214944:	3023883a 	mov	r17,r6
80214948:	003fd306 	br	80214898 <__reset+0xfa1f4898>
8021494c:	1000541e 	bne	r2,zero,80214aa0 <__subdf3+0x488>
80214950:	80800044 	addi	r2,r16,1
80214954:	1081ffcc 	andi	r2,r2,2047
80214958:	01000044 	movi	r4,1
8021495c:	2080a20e 	bge	r4,r2,80214be8 <__subdf3+0x5d0>
80214960:	8989c83a 	sub	r4,r17,r6
80214964:	8905803a 	cmpltu	r2,r17,r4
80214968:	1967c83a 	sub	r19,r3,r5
8021496c:	98a7c83a 	sub	r19,r19,r2
80214970:	9880202c 	andhi	r2,r19,128
80214974:	10006326 	beq	r2,zero,80214b04 <__subdf3+0x4ec>
80214978:	3463c83a 	sub	r17,r6,r17
8021497c:	28c7c83a 	sub	r3,r5,r3
80214980:	344d803a 	cmpltu	r6,r6,r17
80214984:	19a7c83a 	sub	r19,r3,r6
80214988:	3825883a 	mov	r18,r7
8021498c:	983f861e 	bne	r19,zero,802147a8 <__reset+0xfa1f47a8>
80214990:	8809883a 	mov	r4,r17
80214994:	02050500 	call	80205050 <__clzsi2>
80214998:	10800804 	addi	r2,r2,32
8021499c:	113ffe04 	addi	r4,r2,-8
802149a0:	00c007c4 	movi	r3,31
802149a4:	193f850e 	bge	r3,r4,802147bc <__reset+0xfa1f47bc>
802149a8:	10bff604 	addi	r2,r2,-40
802149ac:	8884983a 	sll	r2,r17,r2
802149b0:	0023883a 	mov	r17,zero
802149b4:	243f880e 	bge	r4,r16,802147d8 <__reset+0xfa1f47d8>
802149b8:	00ffe034 	movhi	r3,65408
802149bc:	18ffffc4 	addi	r3,r3,-1
802149c0:	8121c83a 	sub	r16,r16,r4
802149c4:	10c6703a 	and	r3,r2,r3
802149c8:	003f3406 	br	8021469c <__reset+0xfa1f469c>
802149cc:	9100004c 	andi	r4,r18,1
802149d0:	000b883a 	mov	r5,zero
802149d4:	0005883a 	mov	r2,zero
802149d8:	003f4806 	br	802146fc <__reset+0xfa1f46fc>
802149dc:	298cb03a 	or	r6,r5,r6
802149e0:	300cc03a 	cmpne	r6,r6,zero
802149e4:	0005883a 	mov	r2,zero
802149e8:	003f6406 	br	8021477c <__reset+0xfa1f477c>
802149ec:	10009a1e 	bne	r2,zero,80214c58 <__subdf3+0x640>
802149f0:	82400044 	addi	r9,r16,1
802149f4:	4881ffcc 	andi	r2,r9,2047
802149f8:	02800044 	movi	r10,1
802149fc:	5080670e 	bge	r10,r2,80214b9c <__subdf3+0x584>
80214a00:	0081ffc4 	movi	r2,2047
80214a04:	4880af26 	beq	r9,r2,80214cc4 <__subdf3+0x6ac>
80214a08:	898d883a 	add	r6,r17,r6
80214a0c:	1945883a 	add	r2,r3,r5
80214a10:	3447803a 	cmpltu	r3,r6,r17
80214a14:	1887883a 	add	r3,r3,r2
80214a18:	182297fa 	slli	r17,r3,31
80214a1c:	300cd07a 	srli	r6,r6,1
80214a20:	1806d07a 	srli	r3,r3,1
80214a24:	4821883a 	mov	r16,r9
80214a28:	89a2b03a 	or	r17,r17,r6
80214a2c:	003f1b06 	br	8021469c <__reset+0xfa1f469c>
80214a30:	0101ffc4 	movi	r4,2047
80214a34:	813f441e 	bne	r16,r4,80214748 <__reset+0xfa1f4748>
80214a38:	003f1806 	br	8021469c <__reset+0xfa1f469c>
80214a3c:	843ff844 	addi	r16,r16,-31
80214a40:	01400804 	movi	r5,32
80214a44:	1408d83a 	srl	r4,r2,r16
80214a48:	19405026 	beq	r3,r5,80214b8c <__subdf3+0x574>
80214a4c:	01401004 	movi	r5,64
80214a50:	28c7c83a 	sub	r3,r5,r3
80214a54:	10c4983a 	sll	r2,r2,r3
80214a58:	88a2b03a 	or	r17,r17,r2
80214a5c:	8822c03a 	cmpne	r17,r17,zero
80214a60:	2462b03a 	or	r17,r4,r17
80214a64:	0007883a 	mov	r3,zero
80214a68:	0021883a 	mov	r16,zero
80214a6c:	003f6d06 	br	80214824 <__reset+0xfa1f4824>
80214a70:	11fff804 	addi	r7,r2,-32
80214a74:	01000804 	movi	r4,32
80214a78:	29ced83a 	srl	r7,r5,r7
80214a7c:	11004526 	beq	r2,r4,80214b94 <__subdf3+0x57c>
80214a80:	01001004 	movi	r4,64
80214a84:	2089c83a 	sub	r4,r4,r2
80214a88:	2904983a 	sll	r2,r5,r4
80214a8c:	118cb03a 	or	r6,r2,r6
80214a90:	300cc03a 	cmpne	r6,r6,zero
80214a94:	398cb03a 	or	r6,r7,r6
80214a98:	0005883a 	mov	r2,zero
80214a9c:	003f3706 	br	8021477c <__reset+0xfa1f477c>
80214aa0:	80002a26 	beq	r16,zero,80214b4c <__subdf3+0x534>
80214aa4:	0101ffc4 	movi	r4,2047
80214aa8:	49006626 	beq	r9,r4,80214c44 <__subdf3+0x62c>
80214aac:	0085c83a 	sub	r2,zero,r2
80214ab0:	18c02034 	orhi	r3,r3,128
80214ab4:	01000e04 	movi	r4,56
80214ab8:	20807e16 	blt	r4,r2,80214cb4 <__subdf3+0x69c>
80214abc:	010007c4 	movi	r4,31
80214ac0:	2080e716 	blt	r4,r2,80214e60 <__subdf3+0x848>
80214ac4:	01000804 	movi	r4,32
80214ac8:	2089c83a 	sub	r4,r4,r2
80214acc:	1914983a 	sll	r10,r3,r4
80214ad0:	8890d83a 	srl	r8,r17,r2
80214ad4:	8908983a 	sll	r4,r17,r4
80214ad8:	1884d83a 	srl	r2,r3,r2
80214adc:	5222b03a 	or	r17,r10,r8
80214ae0:	2006c03a 	cmpne	r3,r4,zero
80214ae4:	88e2b03a 	or	r17,r17,r3
80214ae8:	3463c83a 	sub	r17,r6,r17
80214aec:	2885c83a 	sub	r2,r5,r2
80214af0:	344d803a 	cmpltu	r6,r6,r17
80214af4:	1187c83a 	sub	r3,r2,r6
80214af8:	4821883a 	mov	r16,r9
80214afc:	3825883a 	mov	r18,r7
80214b00:	003f2306 	br	80214790 <__reset+0xfa1f4790>
80214b04:	24d0b03a 	or	r8,r4,r19
80214b08:	40001b1e 	bne	r8,zero,80214b78 <__subdf3+0x560>
80214b0c:	0005883a 	mov	r2,zero
80214b10:	0009883a 	mov	r4,zero
80214b14:	0021883a 	mov	r16,zero
80214b18:	003f4906 	br	80214840 <__reset+0xfa1f4840>
80214b1c:	010007c4 	movi	r4,31
80214b20:	20803a16 	blt	r4,r2,80214c0c <__subdf3+0x5f4>
80214b24:	01000804 	movi	r4,32
80214b28:	2089c83a 	sub	r4,r4,r2
80214b2c:	2912983a 	sll	r9,r5,r4
80214b30:	3090d83a 	srl	r8,r6,r2
80214b34:	3108983a 	sll	r4,r6,r4
80214b38:	2884d83a 	srl	r2,r5,r2
80214b3c:	4a12b03a 	or	r9,r9,r8
80214b40:	2008c03a 	cmpne	r4,r4,zero
80214b44:	4912b03a 	or	r9,r9,r4
80214b48:	003f4e06 	br	80214884 <__reset+0xfa1f4884>
80214b4c:	1c48b03a 	or	r4,r3,r17
80214b50:	20003c26 	beq	r4,zero,80214c44 <__subdf3+0x62c>
80214b54:	0084303a 	nor	r2,zero,r2
80214b58:	1000381e 	bne	r2,zero,80214c3c <__subdf3+0x624>
80214b5c:	3463c83a 	sub	r17,r6,r17
80214b60:	28c5c83a 	sub	r2,r5,r3
80214b64:	344d803a 	cmpltu	r6,r6,r17
80214b68:	1187c83a 	sub	r3,r2,r6
80214b6c:	4821883a 	mov	r16,r9
80214b70:	3825883a 	mov	r18,r7
80214b74:	003f0606 	br	80214790 <__reset+0xfa1f4790>
80214b78:	2023883a 	mov	r17,r4
80214b7c:	003f0906 	br	802147a4 <__reset+0xfa1f47a4>
80214b80:	0101ffc4 	movi	r4,2047
80214b84:	813f3a1e 	bne	r16,r4,80214870 <__reset+0xfa1f4870>
80214b88:	003ec406 	br	8021469c <__reset+0xfa1f469c>
80214b8c:	0005883a 	mov	r2,zero
80214b90:	003fb106 	br	80214a58 <__reset+0xfa1f4a58>
80214b94:	0005883a 	mov	r2,zero
80214b98:	003fbc06 	br	80214a8c <__reset+0xfa1f4a8c>
80214b9c:	1c44b03a 	or	r2,r3,r17
80214ba0:	80008e1e 	bne	r16,zero,80214ddc <__subdf3+0x7c4>
80214ba4:	1000c826 	beq	r2,zero,80214ec8 <__subdf3+0x8b0>
80214ba8:	2984b03a 	or	r2,r5,r6
80214bac:	103ebb26 	beq	r2,zero,8021469c <__reset+0xfa1f469c>
80214bb0:	8989883a 	add	r4,r17,r6
80214bb4:	1945883a 	add	r2,r3,r5
80214bb8:	2447803a 	cmpltu	r3,r4,r17
80214bbc:	1887883a 	add	r3,r3,r2
80214bc0:	1880202c 	andhi	r2,r3,128
80214bc4:	2023883a 	mov	r17,r4
80214bc8:	103f1626 	beq	r2,zero,80214824 <__reset+0xfa1f4824>
80214bcc:	00bfe034 	movhi	r2,65408
80214bd0:	10bfffc4 	addi	r2,r2,-1
80214bd4:	5021883a 	mov	r16,r10
80214bd8:	1886703a 	and	r3,r3,r2
80214bdc:	003eaf06 	br	8021469c <__reset+0xfa1f469c>
80214be0:	3825883a 	mov	r18,r7
80214be4:	003f0f06 	br	80214824 <__reset+0xfa1f4824>
80214be8:	1c44b03a 	or	r2,r3,r17
80214bec:	8000251e 	bne	r16,zero,80214c84 <__subdf3+0x66c>
80214bf0:	1000661e 	bne	r2,zero,80214d8c <__subdf3+0x774>
80214bf4:	2990b03a 	or	r8,r5,r6
80214bf8:	40009626 	beq	r8,zero,80214e54 <__subdf3+0x83c>
80214bfc:	2807883a 	mov	r3,r5
80214c00:	3023883a 	mov	r17,r6
80214c04:	3825883a 	mov	r18,r7
80214c08:	003ea406 	br	8021469c <__reset+0xfa1f469c>
80214c0c:	127ff804 	addi	r9,r2,-32
80214c10:	01000804 	movi	r4,32
80214c14:	2a52d83a 	srl	r9,r5,r9
80214c18:	11008c26 	beq	r2,r4,80214e4c <__subdf3+0x834>
80214c1c:	01001004 	movi	r4,64
80214c20:	2085c83a 	sub	r2,r4,r2
80214c24:	2884983a 	sll	r2,r5,r2
80214c28:	118cb03a 	or	r6,r2,r6
80214c2c:	300cc03a 	cmpne	r6,r6,zero
80214c30:	4992b03a 	or	r9,r9,r6
80214c34:	0005883a 	mov	r2,zero
80214c38:	003f1206 	br	80214884 <__reset+0xfa1f4884>
80214c3c:	0101ffc4 	movi	r4,2047
80214c40:	493f9c1e 	bne	r9,r4,80214ab4 <__reset+0xfa1f4ab4>
80214c44:	2807883a 	mov	r3,r5
80214c48:	3023883a 	mov	r17,r6
80214c4c:	4821883a 	mov	r16,r9
80214c50:	3825883a 	mov	r18,r7
80214c54:	003e9106 	br	8021469c <__reset+0xfa1f469c>
80214c58:	80001f1e 	bne	r16,zero,80214cd8 <__subdf3+0x6c0>
80214c5c:	1c48b03a 	or	r4,r3,r17
80214c60:	20005a26 	beq	r4,zero,80214dcc <__subdf3+0x7b4>
80214c64:	0084303a 	nor	r2,zero,r2
80214c68:	1000561e 	bne	r2,zero,80214dc4 <__subdf3+0x7ac>
80214c6c:	89a3883a 	add	r17,r17,r6
80214c70:	1945883a 	add	r2,r3,r5
80214c74:	898d803a 	cmpltu	r6,r17,r6
80214c78:	3087883a 	add	r3,r6,r2
80214c7c:	4821883a 	mov	r16,r9
80214c80:	003f0506 	br	80214898 <__reset+0xfa1f4898>
80214c84:	10002b1e 	bne	r2,zero,80214d34 <__subdf3+0x71c>
80214c88:	2984b03a 	or	r2,r5,r6
80214c8c:	10008026 	beq	r2,zero,80214e90 <__subdf3+0x878>
80214c90:	2807883a 	mov	r3,r5
80214c94:	3023883a 	mov	r17,r6
80214c98:	3825883a 	mov	r18,r7
80214c9c:	0401ffc4 	movi	r16,2047
80214ca0:	003e7e06 	br	8021469c <__reset+0xfa1f469c>
80214ca4:	3809883a 	mov	r4,r7
80214ca8:	0011883a 	mov	r8,zero
80214cac:	0005883a 	mov	r2,zero
80214cb0:	003ee306 	br	80214840 <__reset+0xfa1f4840>
80214cb4:	1c62b03a 	or	r17,r3,r17
80214cb8:	8822c03a 	cmpne	r17,r17,zero
80214cbc:	0005883a 	mov	r2,zero
80214cc0:	003f8906 	br	80214ae8 <__reset+0xfa1f4ae8>
80214cc4:	3809883a 	mov	r4,r7
80214cc8:	4821883a 	mov	r16,r9
80214ccc:	0011883a 	mov	r8,zero
80214cd0:	0005883a 	mov	r2,zero
80214cd4:	003eda06 	br	80214840 <__reset+0xfa1f4840>
80214cd8:	0101ffc4 	movi	r4,2047
80214cdc:	49003b26 	beq	r9,r4,80214dcc <__subdf3+0x7b4>
80214ce0:	0085c83a 	sub	r2,zero,r2
80214ce4:	18c02034 	orhi	r3,r3,128
80214ce8:	01000e04 	movi	r4,56
80214cec:	20806e16 	blt	r4,r2,80214ea8 <__subdf3+0x890>
80214cf0:	010007c4 	movi	r4,31
80214cf4:	20807716 	blt	r4,r2,80214ed4 <__subdf3+0x8bc>
80214cf8:	01000804 	movi	r4,32
80214cfc:	2089c83a 	sub	r4,r4,r2
80214d00:	1914983a 	sll	r10,r3,r4
80214d04:	8890d83a 	srl	r8,r17,r2
80214d08:	8908983a 	sll	r4,r17,r4
80214d0c:	1884d83a 	srl	r2,r3,r2
80214d10:	5222b03a 	or	r17,r10,r8
80214d14:	2006c03a 	cmpne	r3,r4,zero
80214d18:	88e2b03a 	or	r17,r17,r3
80214d1c:	89a3883a 	add	r17,r17,r6
80214d20:	1145883a 	add	r2,r2,r5
80214d24:	898d803a 	cmpltu	r6,r17,r6
80214d28:	3087883a 	add	r3,r6,r2
80214d2c:	4821883a 	mov	r16,r9
80214d30:	003ed906 	br	80214898 <__reset+0xfa1f4898>
80214d34:	2984b03a 	or	r2,r5,r6
80214d38:	10004226 	beq	r2,zero,80214e44 <__subdf3+0x82c>
80214d3c:	1808d0fa 	srli	r4,r3,3
80214d40:	8822d0fa 	srli	r17,r17,3
80214d44:	1806977a 	slli	r3,r3,29
80214d48:	2080022c 	andhi	r2,r4,8
80214d4c:	1c62b03a 	or	r17,r3,r17
80214d50:	10000826 	beq	r2,zero,80214d74 <__subdf3+0x75c>
80214d54:	2812d0fa 	srli	r9,r5,3
80214d58:	4880022c 	andhi	r2,r9,8
80214d5c:	1000051e 	bne	r2,zero,80214d74 <__subdf3+0x75c>
80214d60:	300cd0fa 	srli	r6,r6,3
80214d64:	2804977a 	slli	r2,r5,29
80214d68:	4809883a 	mov	r4,r9
80214d6c:	3825883a 	mov	r18,r7
80214d70:	11a2b03a 	or	r17,r2,r6
80214d74:	8806d77a 	srli	r3,r17,29
80214d78:	200890fa 	slli	r4,r4,3
80214d7c:	882290fa 	slli	r17,r17,3
80214d80:	0401ffc4 	movi	r16,2047
80214d84:	1906b03a 	or	r3,r3,r4
80214d88:	003e4406 	br	8021469c <__reset+0xfa1f469c>
80214d8c:	2984b03a 	or	r2,r5,r6
80214d90:	103e4226 	beq	r2,zero,8021469c <__reset+0xfa1f469c>
80214d94:	8989c83a 	sub	r4,r17,r6
80214d98:	8911803a 	cmpltu	r8,r17,r4
80214d9c:	1945c83a 	sub	r2,r3,r5
80214da0:	1205c83a 	sub	r2,r2,r8
80214da4:	1200202c 	andhi	r8,r2,128
80214da8:	403e9a26 	beq	r8,zero,80214814 <__reset+0xfa1f4814>
80214dac:	3463c83a 	sub	r17,r6,r17
80214db0:	28c5c83a 	sub	r2,r5,r3
80214db4:	344d803a 	cmpltu	r6,r6,r17
80214db8:	1187c83a 	sub	r3,r2,r6
80214dbc:	3825883a 	mov	r18,r7
80214dc0:	003e3606 	br	8021469c <__reset+0xfa1f469c>
80214dc4:	0101ffc4 	movi	r4,2047
80214dc8:	493fc71e 	bne	r9,r4,80214ce8 <__reset+0xfa1f4ce8>
80214dcc:	2807883a 	mov	r3,r5
80214dd0:	3023883a 	mov	r17,r6
80214dd4:	4821883a 	mov	r16,r9
80214dd8:	003e3006 	br	8021469c <__reset+0xfa1f469c>
80214ddc:	10003626 	beq	r2,zero,80214eb8 <__subdf3+0x8a0>
80214de0:	2984b03a 	or	r2,r5,r6
80214de4:	10001726 	beq	r2,zero,80214e44 <__subdf3+0x82c>
80214de8:	1808d0fa 	srli	r4,r3,3
80214dec:	8822d0fa 	srli	r17,r17,3
80214df0:	1806977a 	slli	r3,r3,29
80214df4:	2080022c 	andhi	r2,r4,8
80214df8:	1c62b03a 	or	r17,r3,r17
80214dfc:	10000726 	beq	r2,zero,80214e1c <__subdf3+0x804>
80214e00:	2812d0fa 	srli	r9,r5,3
80214e04:	4880022c 	andhi	r2,r9,8
80214e08:	1000041e 	bne	r2,zero,80214e1c <__subdf3+0x804>
80214e0c:	300cd0fa 	srli	r6,r6,3
80214e10:	2804977a 	slli	r2,r5,29
80214e14:	4809883a 	mov	r4,r9
80214e18:	11a2b03a 	or	r17,r2,r6
80214e1c:	8806d77a 	srli	r3,r17,29
80214e20:	200890fa 	slli	r4,r4,3
80214e24:	882290fa 	slli	r17,r17,3
80214e28:	3825883a 	mov	r18,r7
80214e2c:	1906b03a 	or	r3,r3,r4
80214e30:	0401ffc4 	movi	r16,2047
80214e34:	003e1906 	br	8021469c <__reset+0xfa1f469c>
80214e38:	000b883a 	mov	r5,zero
80214e3c:	0005883a 	mov	r2,zero
80214e40:	003e2e06 	br	802146fc <__reset+0xfa1f46fc>
80214e44:	0401ffc4 	movi	r16,2047
80214e48:	003e1406 	br	8021469c <__reset+0xfa1f469c>
80214e4c:	0005883a 	mov	r2,zero
80214e50:	003f7506 	br	80214c28 <__reset+0xfa1f4c28>
80214e54:	0005883a 	mov	r2,zero
80214e58:	0009883a 	mov	r4,zero
80214e5c:	003e7806 	br	80214840 <__reset+0xfa1f4840>
80214e60:	123ff804 	addi	r8,r2,-32
80214e64:	01000804 	movi	r4,32
80214e68:	1a10d83a 	srl	r8,r3,r8
80214e6c:	11002526 	beq	r2,r4,80214f04 <__subdf3+0x8ec>
80214e70:	01001004 	movi	r4,64
80214e74:	2085c83a 	sub	r2,r4,r2
80214e78:	1884983a 	sll	r2,r3,r2
80214e7c:	1444b03a 	or	r2,r2,r17
80214e80:	1004c03a 	cmpne	r2,r2,zero
80214e84:	40a2b03a 	or	r17,r8,r2
80214e88:	0005883a 	mov	r2,zero
80214e8c:	003f1606 	br	80214ae8 <__reset+0xfa1f4ae8>
80214e90:	02000434 	movhi	r8,16
80214e94:	0009883a 	mov	r4,zero
80214e98:	423fffc4 	addi	r8,r8,-1
80214e9c:	00bfffc4 	movi	r2,-1
80214ea0:	0401ffc4 	movi	r16,2047
80214ea4:	003e6606 	br	80214840 <__reset+0xfa1f4840>
80214ea8:	1c62b03a 	or	r17,r3,r17
80214eac:	8822c03a 	cmpne	r17,r17,zero
80214eb0:	0005883a 	mov	r2,zero
80214eb4:	003f9906 	br	80214d1c <__reset+0xfa1f4d1c>
80214eb8:	2807883a 	mov	r3,r5
80214ebc:	3023883a 	mov	r17,r6
80214ec0:	0401ffc4 	movi	r16,2047
80214ec4:	003df506 	br	8021469c <__reset+0xfa1f469c>
80214ec8:	2807883a 	mov	r3,r5
80214ecc:	3023883a 	mov	r17,r6
80214ed0:	003df206 	br	8021469c <__reset+0xfa1f469c>
80214ed4:	123ff804 	addi	r8,r2,-32
80214ed8:	01000804 	movi	r4,32
80214edc:	1a10d83a 	srl	r8,r3,r8
80214ee0:	11000a26 	beq	r2,r4,80214f0c <__subdf3+0x8f4>
80214ee4:	01001004 	movi	r4,64
80214ee8:	2085c83a 	sub	r2,r4,r2
80214eec:	1884983a 	sll	r2,r3,r2
80214ef0:	1444b03a 	or	r2,r2,r17
80214ef4:	1004c03a 	cmpne	r2,r2,zero
80214ef8:	40a2b03a 	or	r17,r8,r2
80214efc:	0005883a 	mov	r2,zero
80214f00:	003f8606 	br	80214d1c <__reset+0xfa1f4d1c>
80214f04:	0005883a 	mov	r2,zero
80214f08:	003fdc06 	br	80214e7c <__reset+0xfa1f4e7c>
80214f0c:	0005883a 	mov	r2,zero
80214f10:	003ff706 	br	80214ef0 <__reset+0xfa1f4ef0>

80214f14 <__fixdfsi>:
80214f14:	280cd53a 	srli	r6,r5,20
80214f18:	00c00434 	movhi	r3,16
80214f1c:	18ffffc4 	addi	r3,r3,-1
80214f20:	3181ffcc 	andi	r6,r6,2047
80214f24:	01c0ff84 	movi	r7,1022
80214f28:	28c6703a 	and	r3,r5,r3
80214f2c:	280ad7fa 	srli	r5,r5,31
80214f30:	3980120e 	bge	r7,r6,80214f7c <__fixdfsi+0x68>
80214f34:	00810744 	movi	r2,1053
80214f38:	11800c16 	blt	r2,r6,80214f6c <__fixdfsi+0x58>
80214f3c:	00810cc4 	movi	r2,1075
80214f40:	1185c83a 	sub	r2,r2,r6
80214f44:	01c007c4 	movi	r7,31
80214f48:	18c00434 	orhi	r3,r3,16
80214f4c:	38800d16 	blt	r7,r2,80214f84 <__fixdfsi+0x70>
80214f50:	31befb44 	addi	r6,r6,-1043
80214f54:	2084d83a 	srl	r2,r4,r2
80214f58:	1986983a 	sll	r3,r3,r6
80214f5c:	1884b03a 	or	r2,r3,r2
80214f60:	28000726 	beq	r5,zero,80214f80 <__fixdfsi+0x6c>
80214f64:	0085c83a 	sub	r2,zero,r2
80214f68:	f800283a 	ret
80214f6c:	00a00034 	movhi	r2,32768
80214f70:	10bfffc4 	addi	r2,r2,-1
80214f74:	2885883a 	add	r2,r5,r2
80214f78:	f800283a 	ret
80214f7c:	0005883a 	mov	r2,zero
80214f80:	f800283a 	ret
80214f84:	008104c4 	movi	r2,1043
80214f88:	1185c83a 	sub	r2,r2,r6
80214f8c:	1884d83a 	srl	r2,r3,r2
80214f90:	003ff306 	br	80214f60 <__reset+0xfa1f4f60>

80214f94 <__floatsidf>:
80214f94:	defffd04 	addi	sp,sp,-12
80214f98:	dfc00215 	stw	ra,8(sp)
80214f9c:	dc400115 	stw	r17,4(sp)
80214fa0:	dc000015 	stw	r16,0(sp)
80214fa4:	20002b26 	beq	r4,zero,80215054 <__floatsidf+0xc0>
80214fa8:	2023883a 	mov	r17,r4
80214fac:	2020d7fa 	srli	r16,r4,31
80214fb0:	20002d16 	blt	r4,zero,80215068 <__floatsidf+0xd4>
80214fb4:	8809883a 	mov	r4,r17
80214fb8:	02050500 	call	80205050 <__clzsi2>
80214fbc:	01410784 	movi	r5,1054
80214fc0:	288bc83a 	sub	r5,r5,r2
80214fc4:	01010cc4 	movi	r4,1075
80214fc8:	2149c83a 	sub	r4,r4,r5
80214fcc:	00c007c4 	movi	r3,31
80214fd0:	1900160e 	bge	r3,r4,8021502c <__floatsidf+0x98>
80214fd4:	00c104c4 	movi	r3,1043
80214fd8:	1947c83a 	sub	r3,r3,r5
80214fdc:	88c6983a 	sll	r3,r17,r3
80214fe0:	00800434 	movhi	r2,16
80214fe4:	10bfffc4 	addi	r2,r2,-1
80214fe8:	1886703a 	and	r3,r3,r2
80214fec:	2941ffcc 	andi	r5,r5,2047
80214ff0:	800d883a 	mov	r6,r16
80214ff4:	0005883a 	mov	r2,zero
80214ff8:	280a953a 	slli	r5,r5,20
80214ffc:	31803fcc 	andi	r6,r6,255
80215000:	01000434 	movhi	r4,16
80215004:	300c97fa 	slli	r6,r6,31
80215008:	213fffc4 	addi	r4,r4,-1
8021500c:	1906703a 	and	r3,r3,r4
80215010:	1946b03a 	or	r3,r3,r5
80215014:	1986b03a 	or	r3,r3,r6
80215018:	dfc00217 	ldw	ra,8(sp)
8021501c:	dc400117 	ldw	r17,4(sp)
80215020:	dc000017 	ldw	r16,0(sp)
80215024:	dec00304 	addi	sp,sp,12
80215028:	f800283a 	ret
8021502c:	00c002c4 	movi	r3,11
80215030:	1887c83a 	sub	r3,r3,r2
80215034:	88c6d83a 	srl	r3,r17,r3
80215038:	8904983a 	sll	r2,r17,r4
8021503c:	01000434 	movhi	r4,16
80215040:	213fffc4 	addi	r4,r4,-1
80215044:	2941ffcc 	andi	r5,r5,2047
80215048:	1906703a 	and	r3,r3,r4
8021504c:	800d883a 	mov	r6,r16
80215050:	003fe906 	br	80214ff8 <__reset+0xfa1f4ff8>
80215054:	000d883a 	mov	r6,zero
80215058:	000b883a 	mov	r5,zero
8021505c:	0007883a 	mov	r3,zero
80215060:	0005883a 	mov	r2,zero
80215064:	003fe406 	br	80214ff8 <__reset+0xfa1f4ff8>
80215068:	0123c83a 	sub	r17,zero,r4
8021506c:	003fd106 	br	80214fb4 <__reset+0xfa1f4fb4>

80215070 <__floatunsidf>:
80215070:	defffe04 	addi	sp,sp,-8
80215074:	dc000015 	stw	r16,0(sp)
80215078:	dfc00115 	stw	ra,4(sp)
8021507c:	2021883a 	mov	r16,r4
80215080:	20002226 	beq	r4,zero,8021510c <__floatunsidf+0x9c>
80215084:	02050500 	call	80205050 <__clzsi2>
80215088:	01010784 	movi	r4,1054
8021508c:	2089c83a 	sub	r4,r4,r2
80215090:	01810cc4 	movi	r6,1075
80215094:	310dc83a 	sub	r6,r6,r4
80215098:	00c007c4 	movi	r3,31
8021509c:	1980120e 	bge	r3,r6,802150e8 <__floatunsidf+0x78>
802150a0:	00c104c4 	movi	r3,1043
802150a4:	1907c83a 	sub	r3,r3,r4
802150a8:	80ca983a 	sll	r5,r16,r3
802150ac:	00800434 	movhi	r2,16
802150b0:	10bfffc4 	addi	r2,r2,-1
802150b4:	2101ffcc 	andi	r4,r4,2047
802150b8:	0021883a 	mov	r16,zero
802150bc:	288a703a 	and	r5,r5,r2
802150c0:	2008953a 	slli	r4,r4,20
802150c4:	00c00434 	movhi	r3,16
802150c8:	18ffffc4 	addi	r3,r3,-1
802150cc:	28c6703a 	and	r3,r5,r3
802150d0:	8005883a 	mov	r2,r16
802150d4:	1906b03a 	or	r3,r3,r4
802150d8:	dfc00117 	ldw	ra,4(sp)
802150dc:	dc000017 	ldw	r16,0(sp)
802150e0:	dec00204 	addi	sp,sp,8
802150e4:	f800283a 	ret
802150e8:	00c002c4 	movi	r3,11
802150ec:	188bc83a 	sub	r5,r3,r2
802150f0:	814ad83a 	srl	r5,r16,r5
802150f4:	00c00434 	movhi	r3,16
802150f8:	18ffffc4 	addi	r3,r3,-1
802150fc:	81a0983a 	sll	r16,r16,r6
80215100:	2101ffcc 	andi	r4,r4,2047
80215104:	28ca703a 	and	r5,r5,r3
80215108:	003fed06 	br	802150c0 <__reset+0xfa1f50c0>
8021510c:	0009883a 	mov	r4,zero
80215110:	000b883a 	mov	r5,zero
80215114:	003fea06 	br	802150c0 <__reset+0xfa1f50c0>

80215118 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
80215118:	defffb04 	addi	sp,sp,-20
8021511c:	df000415 	stw	fp,16(sp)
80215120:	df000404 	addi	fp,sp,16
80215124:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
80215128:	008000c4 	movi	r2,3
8021512c:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
80215130:	e0fffd17 	ldw	r3,-12(fp)
80215134:	008003f4 	movhi	r2,15
80215138:	10909004 	addi	r2,r2,16960
8021513c:	1887383a 	mul	r3,r3,r2
80215140:	00817db4 	movhi	r2,1526
80215144:	10b84004 	addi	r2,r2,-7936
80215148:	10c7203a 	divu	r3,r2,r3
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
8021514c:	00a00034 	movhi	r2,32768
80215150:	10bfffc4 	addi	r2,r2,-1
80215154:	10c5203a 	divu	r2,r2,r3
80215158:	e0ffff17 	ldw	r3,-4(fp)
8021515c:	1885203a 	divu	r2,r3,r2
80215160:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
80215164:	e0bffe17 	ldw	r2,-8(fp)
80215168:	10002526 	beq	r2,zero,80215200 <alt_busy_sleep+0xe8>
  {
    for(i=0;i<big_loops;i++)
8021516c:	e03ffc15 	stw	zero,-16(fp)
80215170:	00001406 	br	802151c4 <alt_busy_sleep+0xac>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
80215174:	00a00034 	movhi	r2,32768
80215178:	10bfffc4 	addi	r2,r2,-1
8021517c:	10bfffc4 	addi	r2,r2,-1
80215180:	103ffe1e 	bne	r2,zero,8021517c <__reset+0xfa1f517c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
80215184:	e0fffd17 	ldw	r3,-12(fp)
80215188:	008003f4 	movhi	r2,15
8021518c:	10909004 	addi	r2,r2,16960
80215190:	1887383a 	mul	r3,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
80215194:	00817db4 	movhi	r2,1526
80215198:	10b84004 	addi	r2,r2,-7936
8021519c:	10c7203a 	divu	r3,r2,r3
802151a0:	00a00034 	movhi	r2,32768
802151a4:	10bfffc4 	addi	r2,r2,-1
802151a8:	10c5203a 	divu	r2,r2,r3
802151ac:	e0ffff17 	ldw	r3,-4(fp)
802151b0:	1885c83a 	sub	r2,r3,r2
802151b4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
802151b8:	e0bffc17 	ldw	r2,-16(fp)
802151bc:	10800044 	addi	r2,r2,1
802151c0:	e0bffc15 	stw	r2,-16(fp)
802151c4:	e0fffc17 	ldw	r3,-16(fp)
802151c8:	e0bffe17 	ldw	r2,-8(fp)
802151cc:	18bfe916 	blt	r3,r2,80215174 <__reset+0xfa1f5174>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
802151d0:	e0fffd17 	ldw	r3,-12(fp)
802151d4:	008003f4 	movhi	r2,15
802151d8:	10909004 	addi	r2,r2,16960
802151dc:	1887383a 	mul	r3,r3,r2
802151e0:	00817db4 	movhi	r2,1526
802151e4:	10b84004 	addi	r2,r2,-7936
802151e8:	10c7203a 	divu	r3,r2,r3
802151ec:	e0bfff17 	ldw	r2,-4(fp)
802151f0:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
802151f4:	10bfffc4 	addi	r2,r2,-1
802151f8:	103ffe1e 	bne	r2,zero,802151f4 <__reset+0xfa1f51f4>
802151fc:	00000b06 	br	8021522c <alt_busy_sleep+0x114>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
80215200:	e0fffd17 	ldw	r3,-12(fp)
80215204:	008003f4 	movhi	r2,15
80215208:	10909004 	addi	r2,r2,16960
8021520c:	1887383a 	mul	r3,r3,r2
80215210:	00817db4 	movhi	r2,1526
80215214:	10b84004 	addi	r2,r2,-7936
80215218:	10c7203a 	divu	r3,r2,r3
8021521c:	e0bfff17 	ldw	r2,-4(fp)
80215220:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
80215224:	10bfffc4 	addi	r2,r2,-1
80215228:	00bffe16 	blt	zero,r2,80215224 <__reset+0xfa1f5224>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
8021522c:	0005883a 	mov	r2,zero
}
80215230:	e037883a 	mov	sp,fp
80215234:	df000017 	ldw	fp,0(sp)
80215238:	dec00104 	addi	sp,sp,4
8021523c:	f800283a 	ret

80215240 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80215240:	defffe04 	addi	sp,sp,-8
80215244:	dfc00115 	stw	ra,4(sp)
80215248:	df000015 	stw	fp,0(sp)
8021524c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80215250:	d0a00c17 	ldw	r2,-32720(gp)
80215254:	10000326 	beq	r2,zero,80215264 <alt_get_errno+0x24>
80215258:	d0a00c17 	ldw	r2,-32720(gp)
8021525c:	103ee83a 	callr	r2
80215260:	00000106 	br	80215268 <alt_get_errno+0x28>
80215264:	d0a02004 	addi	r2,gp,-32640
}
80215268:	e037883a 	mov	sp,fp
8021526c:	dfc00117 	ldw	ra,4(sp)
80215270:	df000017 	ldw	fp,0(sp)
80215274:	dec00204 	addi	sp,sp,8
80215278:	f800283a 	ret

8021527c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
8021527c:	defffb04 	addi	sp,sp,-20
80215280:	dfc00415 	stw	ra,16(sp)
80215284:	df000315 	stw	fp,12(sp)
80215288:	df000304 	addi	fp,sp,12
8021528c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
80215290:	e0bfff17 	ldw	r2,-4(fp)
80215294:	10000616 	blt	r2,zero,802152b0 <close+0x34>
80215298:	e0bfff17 	ldw	r2,-4(fp)
8021529c:	10c00324 	muli	r3,r2,12
802152a0:	00a008b4 	movhi	r2,32802
802152a4:	10b01b04 	addi	r2,r2,-16276
802152a8:	1885883a 	add	r2,r3,r2
802152ac:	00000106 	br	802152b4 <close+0x38>
802152b0:	0005883a 	mov	r2,zero
802152b4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
802152b8:	e0bffd17 	ldw	r2,-12(fp)
802152bc:	10001926 	beq	r2,zero,80215324 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
802152c0:	e0bffd17 	ldw	r2,-12(fp)
802152c4:	10800017 	ldw	r2,0(r2)
802152c8:	10800417 	ldw	r2,16(r2)
802152cc:	10000626 	beq	r2,zero,802152e8 <close+0x6c>
802152d0:	e0bffd17 	ldw	r2,-12(fp)
802152d4:	10800017 	ldw	r2,0(r2)
802152d8:	10800417 	ldw	r2,16(r2)
802152dc:	e13ffd17 	ldw	r4,-12(fp)
802152e0:	103ee83a 	callr	r2
802152e4:	00000106 	br	802152ec <close+0x70>
802152e8:	0005883a 	mov	r2,zero
802152ec:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
802152f0:	e13fff17 	ldw	r4,-4(fp)
802152f4:	02158700 	call	80215870 <alt_release_fd>
    if (rval < 0)
802152f8:	e0bffe17 	ldw	r2,-8(fp)
802152fc:	1000070e 	bge	r2,zero,8021531c <close+0xa0>
    {
      ALT_ERRNO = -rval;
80215300:	02152400 	call	80215240 <alt_get_errno>
80215304:	1007883a 	mov	r3,r2
80215308:	e0bffe17 	ldw	r2,-8(fp)
8021530c:	0085c83a 	sub	r2,zero,r2
80215310:	18800015 	stw	r2,0(r3)
      return -1;
80215314:	00bfffc4 	movi	r2,-1
80215318:	00000706 	br	80215338 <close+0xbc>
    }
    return 0;
8021531c:	0005883a 	mov	r2,zero
80215320:	00000506 	br	80215338 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
80215324:	02152400 	call	80215240 <alt_get_errno>
80215328:	1007883a 	mov	r3,r2
8021532c:	00801444 	movi	r2,81
80215330:	18800015 	stw	r2,0(r3)
    return -1;
80215334:	00bfffc4 	movi	r2,-1
  }
}
80215338:	e037883a 	mov	sp,fp
8021533c:	dfc00117 	ldw	ra,4(sp)
80215340:	df000017 	ldw	fp,0(sp)
80215344:	dec00204 	addi	sp,sp,8
80215348:	f800283a 	ret

8021534c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
8021534c:	deffff04 	addi	sp,sp,-4
80215350:	df000015 	stw	fp,0(sp)
80215354:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
80215358:	0001883a 	nop
8021535c:	e037883a 	mov	sp,fp
80215360:	df000017 	ldw	fp,0(sp)
80215364:	dec00104 	addi	sp,sp,4
80215368:	f800283a 	ret

8021536c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
8021536c:	defffc04 	addi	sp,sp,-16
80215370:	df000315 	stw	fp,12(sp)
80215374:	df000304 	addi	fp,sp,12
80215378:	e13ffd15 	stw	r4,-12(fp)
8021537c:	e17ffe15 	stw	r5,-8(fp)
80215380:	e1bfff15 	stw	r6,-4(fp)
  return len;
80215384:	e0bfff17 	ldw	r2,-4(fp)
}
80215388:	e037883a 	mov	sp,fp
8021538c:	df000017 	ldw	fp,0(sp)
80215390:	dec00104 	addi	sp,sp,4
80215394:	f800283a 	ret

80215398 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80215398:	defffe04 	addi	sp,sp,-8
8021539c:	dfc00115 	stw	ra,4(sp)
802153a0:	df000015 	stw	fp,0(sp)
802153a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
802153a8:	d0a00c17 	ldw	r2,-32720(gp)
802153ac:	10000326 	beq	r2,zero,802153bc <alt_get_errno+0x24>
802153b0:	d0a00c17 	ldw	r2,-32720(gp)
802153b4:	103ee83a 	callr	r2
802153b8:	00000106 	br	802153c0 <alt_get_errno+0x28>
802153bc:	d0a02004 	addi	r2,gp,-32640
}
802153c0:	e037883a 	mov	sp,fp
802153c4:	dfc00117 	ldw	ra,4(sp)
802153c8:	df000017 	ldw	fp,0(sp)
802153cc:	dec00204 	addi	sp,sp,8
802153d0:	f800283a 	ret

802153d4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
802153d4:	defffb04 	addi	sp,sp,-20
802153d8:	dfc00415 	stw	ra,16(sp)
802153dc:	df000315 	stw	fp,12(sp)
802153e0:	df000304 	addi	fp,sp,12
802153e4:	e13ffe15 	stw	r4,-8(fp)
802153e8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
802153ec:	e0bffe17 	ldw	r2,-8(fp)
802153f0:	10000616 	blt	r2,zero,8021540c <fstat+0x38>
802153f4:	e0bffe17 	ldw	r2,-8(fp)
802153f8:	10c00324 	muli	r3,r2,12
802153fc:	00a008b4 	movhi	r2,32802
80215400:	10b01b04 	addi	r2,r2,-16276
80215404:	1885883a 	add	r2,r3,r2
80215408:	00000106 	br	80215410 <fstat+0x3c>
8021540c:	0005883a 	mov	r2,zero
80215410:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
80215414:	e0bffd17 	ldw	r2,-12(fp)
80215418:	10001026 	beq	r2,zero,8021545c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
8021541c:	e0bffd17 	ldw	r2,-12(fp)
80215420:	10800017 	ldw	r2,0(r2)
80215424:	10800817 	ldw	r2,32(r2)
80215428:	10000726 	beq	r2,zero,80215448 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
8021542c:	e0bffd17 	ldw	r2,-12(fp)
80215430:	10800017 	ldw	r2,0(r2)
80215434:	10800817 	ldw	r2,32(r2)
80215438:	e17fff17 	ldw	r5,-4(fp)
8021543c:	e13ffd17 	ldw	r4,-12(fp)
80215440:	103ee83a 	callr	r2
80215444:	00000a06 	br	80215470 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
80215448:	e0bfff17 	ldw	r2,-4(fp)
8021544c:	00c80004 	movi	r3,8192
80215450:	10c00115 	stw	r3,4(r2)
      return 0;
80215454:	0005883a 	mov	r2,zero
80215458:	00000506 	br	80215470 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
8021545c:	02153980 	call	80215398 <alt_get_errno>
80215460:	1007883a 	mov	r3,r2
80215464:	00801444 	movi	r2,81
80215468:	18800015 	stw	r2,0(r3)
    return -1;
8021546c:	00bfffc4 	movi	r2,-1
  }
}
80215470:	e037883a 	mov	sp,fp
80215474:	dfc00117 	ldw	ra,4(sp)
80215478:	df000017 	ldw	fp,0(sp)
8021547c:	dec00204 	addi	sp,sp,8
80215480:	f800283a 	ret

80215484 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80215484:	defffe04 	addi	sp,sp,-8
80215488:	dfc00115 	stw	ra,4(sp)
8021548c:	df000015 	stw	fp,0(sp)
80215490:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80215494:	d0a00c17 	ldw	r2,-32720(gp)
80215498:	10000326 	beq	r2,zero,802154a8 <alt_get_errno+0x24>
8021549c:	d0a00c17 	ldw	r2,-32720(gp)
802154a0:	103ee83a 	callr	r2
802154a4:	00000106 	br	802154ac <alt_get_errno+0x28>
802154a8:	d0a02004 	addi	r2,gp,-32640
}
802154ac:	e037883a 	mov	sp,fp
802154b0:	dfc00117 	ldw	ra,4(sp)
802154b4:	df000017 	ldw	fp,0(sp)
802154b8:	dec00204 	addi	sp,sp,8
802154bc:	f800283a 	ret

802154c0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
802154c0:	deffed04 	addi	sp,sp,-76
802154c4:	dfc01215 	stw	ra,72(sp)
802154c8:	df001115 	stw	fp,68(sp)
802154cc:	df001104 	addi	fp,sp,68
802154d0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
802154d4:	e0bfff17 	ldw	r2,-4(fp)
802154d8:	10000616 	blt	r2,zero,802154f4 <isatty+0x34>
802154dc:	e0bfff17 	ldw	r2,-4(fp)
802154e0:	10c00324 	muli	r3,r2,12
802154e4:	00a008b4 	movhi	r2,32802
802154e8:	10b01b04 	addi	r2,r2,-16276
802154ec:	1885883a 	add	r2,r3,r2
802154f0:	00000106 	br	802154f8 <isatty+0x38>
802154f4:	0005883a 	mov	r2,zero
802154f8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
802154fc:	e0bfef17 	ldw	r2,-68(fp)
80215500:	10000e26 	beq	r2,zero,8021553c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
80215504:	e0bfef17 	ldw	r2,-68(fp)
80215508:	10800017 	ldw	r2,0(r2)
8021550c:	10800817 	ldw	r2,32(r2)
80215510:	1000021e 	bne	r2,zero,8021551c <isatty+0x5c>
    {
      return 1;
80215514:	00800044 	movi	r2,1
80215518:	00000d06 	br	80215550 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
8021551c:	e0bff004 	addi	r2,fp,-64
80215520:	100b883a 	mov	r5,r2
80215524:	e13fff17 	ldw	r4,-4(fp)
80215528:	02153d40 	call	802153d4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
8021552c:	e0bff117 	ldw	r2,-60(fp)
80215530:	10880020 	cmpeqi	r2,r2,8192
80215534:	10803fcc 	andi	r2,r2,255
80215538:	00000506 	br	80215550 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
8021553c:	02154840 	call	80215484 <alt_get_errno>
80215540:	1007883a 	mov	r3,r2
80215544:	00801444 	movi	r2,81
80215548:	18800015 	stw	r2,0(r3)
    return 0;
8021554c:	0005883a 	mov	r2,zero
  }
}
80215550:	e037883a 	mov	sp,fp
80215554:	dfc00117 	ldw	ra,4(sp)
80215558:	df000017 	ldw	fp,0(sp)
8021555c:	dec00204 	addi	sp,sp,8
80215560:	f800283a 	ret

80215564 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80215564:	defffe04 	addi	sp,sp,-8
80215568:	dfc00115 	stw	ra,4(sp)
8021556c:	df000015 	stw	fp,0(sp)
80215570:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80215574:	d0a00c17 	ldw	r2,-32720(gp)
80215578:	10000326 	beq	r2,zero,80215588 <alt_get_errno+0x24>
8021557c:	d0a00c17 	ldw	r2,-32720(gp)
80215580:	103ee83a 	callr	r2
80215584:	00000106 	br	8021558c <alt_get_errno+0x28>
80215588:	d0a02004 	addi	r2,gp,-32640
}
8021558c:	e037883a 	mov	sp,fp
80215590:	dfc00117 	ldw	ra,4(sp)
80215594:	df000017 	ldw	fp,0(sp)
80215598:	dec00204 	addi	sp,sp,8
8021559c:	f800283a 	ret

802155a0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
802155a0:	defff904 	addi	sp,sp,-28
802155a4:	dfc00615 	stw	ra,24(sp)
802155a8:	df000515 	stw	fp,20(sp)
802155ac:	df000504 	addi	fp,sp,20
802155b0:	e13ffd15 	stw	r4,-12(fp)
802155b4:	e17ffe15 	stw	r5,-8(fp)
802155b8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
802155bc:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
802155c0:	e0bffd17 	ldw	r2,-12(fp)
802155c4:	10000616 	blt	r2,zero,802155e0 <lseek+0x40>
802155c8:	e0bffd17 	ldw	r2,-12(fp)
802155cc:	10c00324 	muli	r3,r2,12
802155d0:	00a008b4 	movhi	r2,32802
802155d4:	10b01b04 	addi	r2,r2,-16276
802155d8:	1885883a 	add	r2,r3,r2
802155dc:	00000106 	br	802155e4 <lseek+0x44>
802155e0:	0005883a 	mov	r2,zero
802155e4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
802155e8:	e0bffc17 	ldw	r2,-16(fp)
802155ec:	10001026 	beq	r2,zero,80215630 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
802155f0:	e0bffc17 	ldw	r2,-16(fp)
802155f4:	10800017 	ldw	r2,0(r2)
802155f8:	10800717 	ldw	r2,28(r2)
802155fc:	10000926 	beq	r2,zero,80215624 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
80215600:	e0bffc17 	ldw	r2,-16(fp)
80215604:	10800017 	ldw	r2,0(r2)
80215608:	10800717 	ldw	r2,28(r2)
8021560c:	e1bfff17 	ldw	r6,-4(fp)
80215610:	e17ffe17 	ldw	r5,-8(fp)
80215614:	e13ffc17 	ldw	r4,-16(fp)
80215618:	103ee83a 	callr	r2
8021561c:	e0bffb15 	stw	r2,-20(fp)
80215620:	00000506 	br	80215638 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
80215624:	00bfde84 	movi	r2,-134
80215628:	e0bffb15 	stw	r2,-20(fp)
8021562c:	00000206 	br	80215638 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
80215630:	00bfebc4 	movi	r2,-81
80215634:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
80215638:	e0bffb17 	ldw	r2,-20(fp)
8021563c:	1000070e 	bge	r2,zero,8021565c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
80215640:	02155640 	call	80215564 <alt_get_errno>
80215644:	1007883a 	mov	r3,r2
80215648:	e0bffb17 	ldw	r2,-20(fp)
8021564c:	0085c83a 	sub	r2,zero,r2
80215650:	18800015 	stw	r2,0(r3)
    rc = -1;
80215654:	00bfffc4 	movi	r2,-1
80215658:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
8021565c:	e0bffb17 	ldw	r2,-20(fp)
}
80215660:	e037883a 	mov	sp,fp
80215664:	dfc00117 	ldw	ra,4(sp)
80215668:	df000017 	ldw	fp,0(sp)
8021566c:	dec00204 	addi	sp,sp,8
80215670:	f800283a 	ret

80215674 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
80215674:	defffd04 	addi	sp,sp,-12
80215678:	dfc00215 	stw	ra,8(sp)
8021567c:	df000115 	stw	fp,4(sp)
80215680:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
80215684:	0009883a 	mov	r4,zero
80215688:	0215cc00 	call	80215cc0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
8021568c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
80215690:	0215cf80 	call	80215cf8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
80215694:	01a008b4 	movhi	r6,32802
80215698:	31ad4204 	addi	r6,r6,-19192
8021569c:	016008b4 	movhi	r5,32802
802156a0:	296d4204 	addi	r5,r5,-19192
802156a4:	012008b4 	movhi	r4,32802
802156a8:	212d4204 	addi	r4,r4,-19192
802156ac:	021989c0 	call	8021989c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
802156b0:	02193e80 	call	802193e8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
802156b4:	012008b4 	movhi	r4,32802
802156b8:	21251204 	addi	r4,r4,-27576
802156bc:	021a0400 	call	8021a040 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
802156c0:	d0a02117 	ldw	r2,-32636(gp)
802156c4:	d0e02217 	ldw	r3,-32632(gp)
802156c8:	d1202317 	ldw	r4,-32628(gp)
802156cc:	200d883a 	mov	r6,r4
802156d0:	180b883a 	mov	r5,r3
802156d4:	1009883a 	mov	r4,r2
802156d8:	02047dc0 	call	802047dc <main>
802156dc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
802156e0:	01000044 	movi	r4,1
802156e4:	021527c0 	call	8021527c <close>
  exit (result);
802156e8:	e13fff17 	ldw	r4,-4(fp)
802156ec:	021a0540 	call	8021a054 <exit>

802156f0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
802156f0:	defffe04 	addi	sp,sp,-8
802156f4:	df000115 	stw	fp,4(sp)
802156f8:	df000104 	addi	fp,sp,4
802156fc:	e13fff15 	stw	r4,-4(fp)
}
80215700:	0001883a 	nop
80215704:	e037883a 	mov	sp,fp
80215708:	df000017 	ldw	fp,0(sp)
8021570c:	dec00104 	addi	sp,sp,4
80215710:	f800283a 	ret

80215714 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
80215714:	defffe04 	addi	sp,sp,-8
80215718:	df000115 	stw	fp,4(sp)
8021571c:	df000104 	addi	fp,sp,4
80215720:	e13fff15 	stw	r4,-4(fp)
}
80215724:	0001883a 	nop
80215728:	e037883a 	mov	sp,fp
8021572c:	df000017 	ldw	fp,0(sp)
80215730:	dec00104 	addi	sp,sp,4
80215734:	f800283a 	ret

80215738 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80215738:	defffe04 	addi	sp,sp,-8
8021573c:	dfc00115 	stw	ra,4(sp)
80215740:	df000015 	stw	fp,0(sp)
80215744:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80215748:	d0a00c17 	ldw	r2,-32720(gp)
8021574c:	10000326 	beq	r2,zero,8021575c <alt_get_errno+0x24>
80215750:	d0a00c17 	ldw	r2,-32720(gp)
80215754:	103ee83a 	callr	r2
80215758:	00000106 	br	80215760 <alt_get_errno+0x28>
8021575c:	d0a02004 	addi	r2,gp,-32640
}
80215760:	e037883a 	mov	sp,fp
80215764:	dfc00117 	ldw	ra,4(sp)
80215768:	df000017 	ldw	fp,0(sp)
8021576c:	dec00204 	addi	sp,sp,8
80215770:	f800283a 	ret

80215774 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
80215774:	defff904 	addi	sp,sp,-28
80215778:	dfc00615 	stw	ra,24(sp)
8021577c:	df000515 	stw	fp,20(sp)
80215780:	df000504 	addi	fp,sp,20
80215784:	e13ffd15 	stw	r4,-12(fp)
80215788:	e17ffe15 	stw	r5,-8(fp)
8021578c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
80215790:	e0bffd17 	ldw	r2,-12(fp)
80215794:	10000616 	blt	r2,zero,802157b0 <read+0x3c>
80215798:	e0bffd17 	ldw	r2,-12(fp)
8021579c:	10c00324 	muli	r3,r2,12
802157a0:	00a008b4 	movhi	r2,32802
802157a4:	10b01b04 	addi	r2,r2,-16276
802157a8:	1885883a 	add	r2,r3,r2
802157ac:	00000106 	br	802157b4 <read+0x40>
802157b0:	0005883a 	mov	r2,zero
802157b4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
802157b8:	e0bffb17 	ldw	r2,-20(fp)
802157bc:	10002226 	beq	r2,zero,80215848 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
802157c0:	e0bffb17 	ldw	r2,-20(fp)
802157c4:	10800217 	ldw	r2,8(r2)
802157c8:	108000cc 	andi	r2,r2,3
802157cc:	10800060 	cmpeqi	r2,r2,1
802157d0:	1000181e 	bne	r2,zero,80215834 <read+0xc0>
        (fd->dev->read))
802157d4:	e0bffb17 	ldw	r2,-20(fp)
802157d8:	10800017 	ldw	r2,0(r2)
802157dc:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
802157e0:	10001426 	beq	r2,zero,80215834 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
802157e4:	e0bffb17 	ldw	r2,-20(fp)
802157e8:	10800017 	ldw	r2,0(r2)
802157ec:	10800517 	ldw	r2,20(r2)
802157f0:	e0ffff17 	ldw	r3,-4(fp)
802157f4:	180d883a 	mov	r6,r3
802157f8:	e17ffe17 	ldw	r5,-8(fp)
802157fc:	e13ffb17 	ldw	r4,-20(fp)
80215800:	103ee83a 	callr	r2
80215804:	e0bffc15 	stw	r2,-16(fp)
80215808:	e0bffc17 	ldw	r2,-16(fp)
8021580c:	1000070e 	bge	r2,zero,8021582c <read+0xb8>
        {
          ALT_ERRNO = -rval;
80215810:	02157380 	call	80215738 <alt_get_errno>
80215814:	1007883a 	mov	r3,r2
80215818:	e0bffc17 	ldw	r2,-16(fp)
8021581c:	0085c83a 	sub	r2,zero,r2
80215820:	18800015 	stw	r2,0(r3)
          return -1;
80215824:	00bfffc4 	movi	r2,-1
80215828:	00000c06 	br	8021585c <read+0xe8>
        }
        return rval;
8021582c:	e0bffc17 	ldw	r2,-16(fp)
80215830:	00000a06 	br	8021585c <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
80215834:	02157380 	call	80215738 <alt_get_errno>
80215838:	1007883a 	mov	r3,r2
8021583c:	00800344 	movi	r2,13
80215840:	18800015 	stw	r2,0(r3)
80215844:	00000406 	br	80215858 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
80215848:	02157380 	call	80215738 <alt_get_errno>
8021584c:	1007883a 	mov	r3,r2
80215850:	00801444 	movi	r2,81
80215854:	18800015 	stw	r2,0(r3)
  }
  return -1;
80215858:	00bfffc4 	movi	r2,-1
}
8021585c:	e037883a 	mov	sp,fp
80215860:	dfc00117 	ldw	ra,4(sp)
80215864:	df000017 	ldw	fp,0(sp)
80215868:	dec00204 	addi	sp,sp,8
8021586c:	f800283a 	ret

80215870 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
80215870:	defffe04 	addi	sp,sp,-8
80215874:	df000115 	stw	fp,4(sp)
80215878:	df000104 	addi	fp,sp,4
8021587c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
80215880:	e0bfff17 	ldw	r2,-4(fp)
80215884:	108000d0 	cmplti	r2,r2,3
80215888:	10000d1e 	bne	r2,zero,802158c0 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
8021588c:	00a008b4 	movhi	r2,32802
80215890:	10b01b04 	addi	r2,r2,-16276
80215894:	e0ffff17 	ldw	r3,-4(fp)
80215898:	18c00324 	muli	r3,r3,12
8021589c:	10c5883a 	add	r2,r2,r3
802158a0:	10800204 	addi	r2,r2,8
802158a4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
802158a8:	00a008b4 	movhi	r2,32802
802158ac:	10b01b04 	addi	r2,r2,-16276
802158b0:	e0ffff17 	ldw	r3,-4(fp)
802158b4:	18c00324 	muli	r3,r3,12
802158b8:	10c5883a 	add	r2,r2,r3
802158bc:	10000015 	stw	zero,0(r2)
  }
}
802158c0:	0001883a 	nop
802158c4:	e037883a 	mov	sp,fp
802158c8:	df000017 	ldw	fp,0(sp)
802158cc:	dec00104 	addi	sp,sp,4
802158d0:	f800283a 	ret

802158d4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
802158d4:	defff904 	addi	sp,sp,-28
802158d8:	df000615 	stw	fp,24(sp)
802158dc:	df000604 	addi	fp,sp,24
802158e0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
802158e4:	0005303a 	rdctl	r2,status
802158e8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
802158ec:	e0fffe17 	ldw	r3,-8(fp)
802158f0:	00bfff84 	movi	r2,-2
802158f4:	1884703a 	and	r2,r3,r2
802158f8:	1001703a 	wrctl	status,r2
  
  return context;
802158fc:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
80215900:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
80215904:	d0a00d17 	ldw	r2,-32716(gp)
80215908:	10c000c4 	addi	r3,r2,3
8021590c:	00bfff04 	movi	r2,-4
80215910:	1884703a 	and	r2,r3,r2
80215914:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
80215918:	d0e00d17 	ldw	r3,-32716(gp)
8021591c:	e0bfff17 	ldw	r2,-4(fp)
80215920:	1887883a 	add	r3,r3,r2
80215924:	00a00b74 	movhi	r2,32813
80215928:	10920004 	addi	r2,r2,18432
8021592c:	10c0062e 	bgeu	r2,r3,80215948 <sbrk+0x74>
80215930:	e0bffb17 	ldw	r2,-20(fp)
80215934:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80215938:	e0bffa17 	ldw	r2,-24(fp)
8021593c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
80215940:	00bfffc4 	movi	r2,-1
80215944:	00000b06 	br	80215974 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
80215948:	d0a00d17 	ldw	r2,-32716(gp)
8021594c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
80215950:	d0e00d17 	ldw	r3,-32716(gp)
80215954:	e0bfff17 	ldw	r2,-4(fp)
80215958:	1885883a 	add	r2,r3,r2
8021595c:	d0a00d15 	stw	r2,-32716(gp)
80215960:	e0bffb17 	ldw	r2,-20(fp)
80215964:	e0bffc15 	stw	r2,-16(fp)
80215968:	e0bffc17 	ldw	r2,-16(fp)
8021596c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
80215970:	e0bffd17 	ldw	r2,-12(fp)
} 
80215974:	e037883a 	mov	sp,fp
80215978:	df000017 	ldw	fp,0(sp)
8021597c:	dec00104 	addi	sp,sp,4
80215980:	f800283a 	ret

80215984 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
80215984:	defffa04 	addi	sp,sp,-24
80215988:	df000515 	stw	fp,20(sp)
8021598c:	df000504 	addi	fp,sp,20
80215990:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80215994:	0005303a 	rdctl	r2,status
80215998:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8021599c:	e0fffc17 	ldw	r3,-16(fp)
802159a0:	00bfff84 	movi	r2,-2
802159a4:	1884703a 	and	r2,r3,r2
802159a8:	1001703a 	wrctl	status,r2
  
  return context;
802159ac:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
802159b0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
802159b4:	e0bfff17 	ldw	r2,-4(fp)
802159b8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
802159bc:	e0bffd17 	ldw	r2,-12(fp)
802159c0:	10800017 	ldw	r2,0(r2)
802159c4:	e0fffd17 	ldw	r3,-12(fp)
802159c8:	18c00117 	ldw	r3,4(r3)
802159cc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
802159d0:	e0bffd17 	ldw	r2,-12(fp)
802159d4:	10800117 	ldw	r2,4(r2)
802159d8:	e0fffd17 	ldw	r3,-12(fp)
802159dc:	18c00017 	ldw	r3,0(r3)
802159e0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
802159e4:	e0bffd17 	ldw	r2,-12(fp)
802159e8:	e0fffd17 	ldw	r3,-12(fp)
802159ec:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
802159f0:	e0bffd17 	ldw	r2,-12(fp)
802159f4:	e0fffd17 	ldw	r3,-12(fp)
802159f8:	10c00015 	stw	r3,0(r2)
802159fc:	e0bffb17 	ldw	r2,-20(fp)
80215a00:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80215a04:	e0bffe17 	ldw	r2,-8(fp)
80215a08:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
80215a0c:	0001883a 	nop
80215a10:	e037883a 	mov	sp,fp
80215a14:	df000017 	ldw	fp,0(sp)
80215a18:	dec00104 	addi	sp,sp,4
80215a1c:	f800283a 	ret

80215a20 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
80215a20:	defffb04 	addi	sp,sp,-20
80215a24:	dfc00415 	stw	ra,16(sp)
80215a28:	df000315 	stw	fp,12(sp)
80215a2c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
80215a30:	d0a00e17 	ldw	r2,-32712(gp)
80215a34:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
80215a38:	d0a02517 	ldw	r2,-32620(gp)
80215a3c:	10800044 	addi	r2,r2,1
80215a40:	d0a02515 	stw	r2,-32620(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
80215a44:	00002e06 	br	80215b00 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
80215a48:	e0bffd17 	ldw	r2,-12(fp)
80215a4c:	10800017 	ldw	r2,0(r2)
80215a50:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
80215a54:	e0bffd17 	ldw	r2,-12(fp)
80215a58:	10800403 	ldbu	r2,16(r2)
80215a5c:	10803fcc 	andi	r2,r2,255
80215a60:	10000426 	beq	r2,zero,80215a74 <alt_tick+0x54>
80215a64:	d0a02517 	ldw	r2,-32620(gp)
80215a68:	1000021e 	bne	r2,zero,80215a74 <alt_tick+0x54>
    {
      alarm->rollover = 0;
80215a6c:	e0bffd17 	ldw	r2,-12(fp)
80215a70:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
80215a74:	e0bffd17 	ldw	r2,-12(fp)
80215a78:	10800217 	ldw	r2,8(r2)
80215a7c:	d0e02517 	ldw	r3,-32620(gp)
80215a80:	18801d36 	bltu	r3,r2,80215af8 <alt_tick+0xd8>
80215a84:	e0bffd17 	ldw	r2,-12(fp)
80215a88:	10800403 	ldbu	r2,16(r2)
80215a8c:	10803fcc 	andi	r2,r2,255
80215a90:	1000191e 	bne	r2,zero,80215af8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
80215a94:	e0bffd17 	ldw	r2,-12(fp)
80215a98:	10800317 	ldw	r2,12(r2)
80215a9c:	e0fffd17 	ldw	r3,-12(fp)
80215aa0:	18c00517 	ldw	r3,20(r3)
80215aa4:	1809883a 	mov	r4,r3
80215aa8:	103ee83a 	callr	r2
80215aac:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
80215ab0:	e0bfff17 	ldw	r2,-4(fp)
80215ab4:	1000031e 	bne	r2,zero,80215ac4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
80215ab8:	e13ffd17 	ldw	r4,-12(fp)
80215abc:	02159840 	call	80215984 <alt_alarm_stop>
80215ac0:	00000d06 	br	80215af8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
80215ac4:	e0bffd17 	ldw	r2,-12(fp)
80215ac8:	10c00217 	ldw	r3,8(r2)
80215acc:	e0bfff17 	ldw	r2,-4(fp)
80215ad0:	1887883a 	add	r3,r3,r2
80215ad4:	e0bffd17 	ldw	r2,-12(fp)
80215ad8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
80215adc:	e0bffd17 	ldw	r2,-12(fp)
80215ae0:	10c00217 	ldw	r3,8(r2)
80215ae4:	d0a02517 	ldw	r2,-32620(gp)
80215ae8:	1880032e 	bgeu	r3,r2,80215af8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
80215aec:	e0bffd17 	ldw	r2,-12(fp)
80215af0:	00c00044 	movi	r3,1
80215af4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
80215af8:	e0bffe17 	ldw	r2,-8(fp)
80215afc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
80215b00:	e0fffd17 	ldw	r3,-12(fp)
80215b04:	d0a00e04 	addi	r2,gp,-32712
80215b08:	18bfcf1e 	bne	r3,r2,80215a48 <__reset+0xfa1f5a48>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
80215b0c:	0001883a 	nop
}
80215b10:	0001883a 	nop
80215b14:	e037883a 	mov	sp,fp
80215b18:	dfc00117 	ldw	ra,4(sp)
80215b1c:	df000017 	ldw	fp,0(sp)
80215b20:	dec00204 	addi	sp,sp,8
80215b24:	f800283a 	ret

80215b28 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
80215b28:	defffd04 	addi	sp,sp,-12
80215b2c:	dfc00215 	stw	ra,8(sp)
80215b30:	df000115 	stw	fp,4(sp)
80215b34:	df000104 	addi	fp,sp,4
80215b38:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
80215b3c:	e13fff17 	ldw	r4,-4(fp)
80215b40:	02151180 	call	80215118 <alt_busy_sleep>
}
80215b44:	e037883a 	mov	sp,fp
80215b48:	dfc00117 	ldw	ra,4(sp)
80215b4c:	df000017 	ldw	fp,0(sp)
80215b50:	dec00204 	addi	sp,sp,8
80215b54:	f800283a 	ret

80215b58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80215b58:	defffe04 	addi	sp,sp,-8
80215b5c:	dfc00115 	stw	ra,4(sp)
80215b60:	df000015 	stw	fp,0(sp)
80215b64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80215b68:	d0a00c17 	ldw	r2,-32720(gp)
80215b6c:	10000326 	beq	r2,zero,80215b7c <alt_get_errno+0x24>
80215b70:	d0a00c17 	ldw	r2,-32720(gp)
80215b74:	103ee83a 	callr	r2
80215b78:	00000106 	br	80215b80 <alt_get_errno+0x28>
80215b7c:	d0a02004 	addi	r2,gp,-32640
}
80215b80:	e037883a 	mov	sp,fp
80215b84:	dfc00117 	ldw	ra,4(sp)
80215b88:	df000017 	ldw	fp,0(sp)
80215b8c:	dec00204 	addi	sp,sp,8
80215b90:	f800283a 	ret

80215b94 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
80215b94:	defff904 	addi	sp,sp,-28
80215b98:	dfc00615 	stw	ra,24(sp)
80215b9c:	df000515 	stw	fp,20(sp)
80215ba0:	df000504 	addi	fp,sp,20
80215ba4:	e13ffd15 	stw	r4,-12(fp)
80215ba8:	e17ffe15 	stw	r5,-8(fp)
80215bac:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
80215bb0:	e0bffd17 	ldw	r2,-12(fp)
80215bb4:	10000616 	blt	r2,zero,80215bd0 <write+0x3c>
80215bb8:	e0bffd17 	ldw	r2,-12(fp)
80215bbc:	10c00324 	muli	r3,r2,12
80215bc0:	00a008b4 	movhi	r2,32802
80215bc4:	10b01b04 	addi	r2,r2,-16276
80215bc8:	1885883a 	add	r2,r3,r2
80215bcc:	00000106 	br	80215bd4 <write+0x40>
80215bd0:	0005883a 	mov	r2,zero
80215bd4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
80215bd8:	e0bffb17 	ldw	r2,-20(fp)
80215bdc:	10002126 	beq	r2,zero,80215c64 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
80215be0:	e0bffb17 	ldw	r2,-20(fp)
80215be4:	10800217 	ldw	r2,8(r2)
80215be8:	108000cc 	andi	r2,r2,3
80215bec:	10001826 	beq	r2,zero,80215c50 <write+0xbc>
80215bf0:	e0bffb17 	ldw	r2,-20(fp)
80215bf4:	10800017 	ldw	r2,0(r2)
80215bf8:	10800617 	ldw	r2,24(r2)
80215bfc:	10001426 	beq	r2,zero,80215c50 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
80215c00:	e0bffb17 	ldw	r2,-20(fp)
80215c04:	10800017 	ldw	r2,0(r2)
80215c08:	10800617 	ldw	r2,24(r2)
80215c0c:	e0ffff17 	ldw	r3,-4(fp)
80215c10:	180d883a 	mov	r6,r3
80215c14:	e17ffe17 	ldw	r5,-8(fp)
80215c18:	e13ffb17 	ldw	r4,-20(fp)
80215c1c:	103ee83a 	callr	r2
80215c20:	e0bffc15 	stw	r2,-16(fp)
80215c24:	e0bffc17 	ldw	r2,-16(fp)
80215c28:	1000070e 	bge	r2,zero,80215c48 <write+0xb4>
      {
        ALT_ERRNO = -rval;
80215c2c:	0215b580 	call	80215b58 <alt_get_errno>
80215c30:	1007883a 	mov	r3,r2
80215c34:	e0bffc17 	ldw	r2,-16(fp)
80215c38:	0085c83a 	sub	r2,zero,r2
80215c3c:	18800015 	stw	r2,0(r3)
        return -1;
80215c40:	00bfffc4 	movi	r2,-1
80215c44:	00000c06 	br	80215c78 <write+0xe4>
      }
      return rval;
80215c48:	e0bffc17 	ldw	r2,-16(fp)
80215c4c:	00000a06 	br	80215c78 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
80215c50:	0215b580 	call	80215b58 <alt_get_errno>
80215c54:	1007883a 	mov	r3,r2
80215c58:	00800344 	movi	r2,13
80215c5c:	18800015 	stw	r2,0(r3)
80215c60:	00000406 	br	80215c74 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
80215c64:	0215b580 	call	80215b58 <alt_get_errno>
80215c68:	1007883a 	mov	r3,r2
80215c6c:	00801444 	movi	r2,81
80215c70:	18800015 	stw	r2,0(r3)
  }
  return -1;
80215c74:	00bfffc4 	movi	r2,-1
}
80215c78:	e037883a 	mov	sp,fp
80215c7c:	dfc00117 	ldw	ra,4(sp)
80215c80:	df000017 	ldw	fp,0(sp)
80215c84:	dec00204 	addi	sp,sp,8
80215c88:	f800283a 	ret

80215c8c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
80215c8c:	defffd04 	addi	sp,sp,-12
80215c90:	dfc00215 	stw	ra,8(sp)
80215c94:	df000115 	stw	fp,4(sp)
80215c98:	df000104 	addi	fp,sp,4
80215c9c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
80215ca0:	d1600904 	addi	r5,gp,-32732
80215ca4:	e13fff17 	ldw	r4,-4(fp)
80215ca8:	02193440 	call	80219344 <alt_dev_llist_insert>
}
80215cac:	e037883a 	mov	sp,fp
80215cb0:	dfc00117 	ldw	ra,4(sp)
80215cb4:	df000017 	ldw	fp,0(sp)
80215cb8:	dec00204 	addi	sp,sp,8
80215cbc:	f800283a 	ret

80215cc0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
80215cc0:	defffd04 	addi	sp,sp,-12
80215cc4:	dfc00215 	stw	ra,8(sp)
80215cc8:	df000115 	stw	fp,4(sp)
80215ccc:	df000104 	addi	fp,sp,4
80215cd0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
80215cd4:	0219dd40 	call	80219dd4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
80215cd8:	00800044 	movi	r2,1
80215cdc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
80215ce0:	0001883a 	nop
80215ce4:	e037883a 	mov	sp,fp
80215ce8:	dfc00117 	ldw	ra,4(sp)
80215cec:	df000017 	ldw	fp,0(sp)
80215cf0:	dec00204 	addi	sp,sp,8
80215cf4:	f800283a 	ret

80215cf8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
80215cf8:	defffe04 	addi	sp,sp,-8
80215cfc:	dfc00115 	stw	ra,4(sp)
80215d00:	df000015 	stw	fp,0(sp)
80215d04:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_1MS, timer_1ms);
80215d08:	01c0fa04 	movi	r7,1000
80215d0c:	01800204 	movi	r6,8
80215d10:	000b883a 	mov	r5,zero
80215d14:	01204034 	movhi	r4,33024
80215d18:	21022004 	addi	r4,r4,2176
80215d1c:	02168c00 	call	802168c0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1US, timer_1us);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
80215d20:	018001c4 	movi	r6,7
80215d24:	000b883a 	mov	r5,zero
80215d28:	012008b4 	movhi	r4,32802
80215d2c:	21308604 	addi	r4,r4,-15848
80215d30:	0215f440 	call	80215f44 <altera_avalon_jtag_uart_init>
80215d34:	012008b4 	movhi	r4,32802
80215d38:	21307c04 	addi	r4,r4,-15888
80215d3c:	0215c8c0 	call	80215c8c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
80215d40:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( RS232_UART, rs232_uart);
80215d44:	018002c4 	movi	r6,11
80215d48:	000b883a 	mov	r5,zero
80215d4c:	012008b4 	movhi	r4,32802
80215d50:	21349e04 	addi	r4,r4,-11656
80215d54:	0216a4c0 	call	80216a4c <altera_avalon_uart_init>
80215d58:	012008b4 	movhi	r4,32802
80215d5c:	21349404 	addi	r4,r4,-11696
80215d60:	0215c8c0 	call	80215c8c <alt_dev_reg>
    ALTERA_MSGDMA_INIT ( DMA_DDR_M1, dma_DDR_M1);
80215d64:	00a008b4 	movhi	r2,32802
80215d68:	10b4c804 	addi	r2,r2,-11488
80215d6c:	10c00717 	ldw	r3,28(r2)
80215d70:	00a008b4 	movhi	r2,32802
80215d74:	10b4c804 	addi	r2,r2,-11488
80215d78:	10800817 	ldw	r2,32(r2)
80215d7c:	100d883a 	mov	r6,r2
80215d80:	180b883a 	mov	r5,r3
80215d84:	012008b4 	movhi	r4,32802
80215d88:	2134c804 	addi	r4,r4,-11488
80215d8c:	0218f040 	call	80218f04 <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( DMA_DDR_M2, dma_DDR_M2);
80215d90:	00a008b4 	movhi	r2,32802
80215d94:	10b4e004 	addi	r2,r2,-11392
80215d98:	10c00717 	ldw	r3,28(r2)
80215d9c:	00a008b4 	movhi	r2,32802
80215da0:	10b4e004 	addi	r2,r2,-11392
80215da4:	10800817 	ldw	r2,32(r2)
80215da8:	100d883a 	mov	r6,r2
80215dac:	180b883a 	mov	r5,r3
80215db0:	012008b4 	movhi	r4,32802
80215db4:	2134e004 	addi	r4,r4,-11392
80215db8:	0218f040 	call	80218f04 <alt_msgdma_init>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
80215dbc:	012008b4 	movhi	r4,32802
80215dc0:	2134f804 	addi	r4,r4,-11296
80215dc4:	0215c8c0 	call	80215c8c <alt_dev_reg>
}
80215dc8:	0001883a 	nop
80215dcc:	e037883a 	mov	sp,fp
80215dd0:	dfc00117 	ldw	ra,4(sp)
80215dd4:	df000017 	ldw	fp,0(sp)
80215dd8:	dec00204 	addi	sp,sp,8
80215ddc:	f800283a 	ret

80215de0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
80215de0:	defffa04 	addi	sp,sp,-24
80215de4:	dfc00515 	stw	ra,20(sp)
80215de8:	df000415 	stw	fp,16(sp)
80215dec:	df000404 	addi	fp,sp,16
80215df0:	e13ffd15 	stw	r4,-12(fp)
80215df4:	e17ffe15 	stw	r5,-8(fp)
80215df8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
80215dfc:	e0bffd17 	ldw	r2,-12(fp)
80215e00:	10800017 	ldw	r2,0(r2)
80215e04:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
80215e08:	e0bffc17 	ldw	r2,-16(fp)
80215e0c:	10c00a04 	addi	r3,r2,40
80215e10:	e0bffd17 	ldw	r2,-12(fp)
80215e14:	10800217 	ldw	r2,8(r2)
80215e18:	100f883a 	mov	r7,r2
80215e1c:	e1bfff17 	ldw	r6,-4(fp)
80215e20:	e17ffe17 	ldw	r5,-8(fp)
80215e24:	1809883a 	mov	r4,r3
80215e28:	02164080 	call	80216408 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
80215e2c:	e037883a 	mov	sp,fp
80215e30:	dfc00117 	ldw	ra,4(sp)
80215e34:	df000017 	ldw	fp,0(sp)
80215e38:	dec00204 	addi	sp,sp,8
80215e3c:	f800283a 	ret

80215e40 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
80215e40:	defffa04 	addi	sp,sp,-24
80215e44:	dfc00515 	stw	ra,20(sp)
80215e48:	df000415 	stw	fp,16(sp)
80215e4c:	df000404 	addi	fp,sp,16
80215e50:	e13ffd15 	stw	r4,-12(fp)
80215e54:	e17ffe15 	stw	r5,-8(fp)
80215e58:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
80215e5c:	e0bffd17 	ldw	r2,-12(fp)
80215e60:	10800017 	ldw	r2,0(r2)
80215e64:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
80215e68:	e0bffc17 	ldw	r2,-16(fp)
80215e6c:	10c00a04 	addi	r3,r2,40
80215e70:	e0bffd17 	ldw	r2,-12(fp)
80215e74:	10800217 	ldw	r2,8(r2)
80215e78:	100f883a 	mov	r7,r2
80215e7c:	e1bfff17 	ldw	r6,-4(fp)
80215e80:	e17ffe17 	ldw	r5,-8(fp)
80215e84:	1809883a 	mov	r4,r3
80215e88:	02166240 	call	80216624 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
80215e8c:	e037883a 	mov	sp,fp
80215e90:	dfc00117 	ldw	ra,4(sp)
80215e94:	df000017 	ldw	fp,0(sp)
80215e98:	dec00204 	addi	sp,sp,8
80215e9c:	f800283a 	ret

80215ea0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
80215ea0:	defffc04 	addi	sp,sp,-16
80215ea4:	dfc00315 	stw	ra,12(sp)
80215ea8:	df000215 	stw	fp,8(sp)
80215eac:	df000204 	addi	fp,sp,8
80215eb0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
80215eb4:	e0bfff17 	ldw	r2,-4(fp)
80215eb8:	10800017 	ldw	r2,0(r2)
80215ebc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
80215ec0:	e0bffe17 	ldw	r2,-8(fp)
80215ec4:	10c00a04 	addi	r3,r2,40
80215ec8:	e0bfff17 	ldw	r2,-4(fp)
80215ecc:	10800217 	ldw	r2,8(r2)
80215ed0:	100b883a 	mov	r5,r2
80215ed4:	1809883a 	mov	r4,r3
80215ed8:	02162b00 	call	802162b0 <altera_avalon_jtag_uart_close>
}
80215edc:	e037883a 	mov	sp,fp
80215ee0:	dfc00117 	ldw	ra,4(sp)
80215ee4:	df000017 	ldw	fp,0(sp)
80215ee8:	dec00204 	addi	sp,sp,8
80215eec:	f800283a 	ret

80215ef0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
80215ef0:	defffa04 	addi	sp,sp,-24
80215ef4:	dfc00515 	stw	ra,20(sp)
80215ef8:	df000415 	stw	fp,16(sp)
80215efc:	df000404 	addi	fp,sp,16
80215f00:	e13ffd15 	stw	r4,-12(fp)
80215f04:	e17ffe15 	stw	r5,-8(fp)
80215f08:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
80215f0c:	e0bffd17 	ldw	r2,-12(fp)
80215f10:	10800017 	ldw	r2,0(r2)
80215f14:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
80215f18:	e0bffc17 	ldw	r2,-16(fp)
80215f1c:	10800a04 	addi	r2,r2,40
80215f20:	e1bfff17 	ldw	r6,-4(fp)
80215f24:	e17ffe17 	ldw	r5,-8(fp)
80215f28:	1009883a 	mov	r4,r2
80215f2c:	02163180 	call	80216318 <altera_avalon_jtag_uart_ioctl>
}
80215f30:	e037883a 	mov	sp,fp
80215f34:	dfc00117 	ldw	ra,4(sp)
80215f38:	df000017 	ldw	fp,0(sp)
80215f3c:	dec00204 	addi	sp,sp,8
80215f40:	f800283a 	ret

80215f44 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
80215f44:	defffa04 	addi	sp,sp,-24
80215f48:	dfc00515 	stw	ra,20(sp)
80215f4c:	df000415 	stw	fp,16(sp)
80215f50:	df000404 	addi	fp,sp,16
80215f54:	e13ffd15 	stw	r4,-12(fp)
80215f58:	e17ffe15 	stw	r5,-8(fp)
80215f5c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
80215f60:	e0bffd17 	ldw	r2,-12(fp)
80215f64:	00c00044 	movi	r3,1
80215f68:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
80215f6c:	e0bffd17 	ldw	r2,-12(fp)
80215f70:	10800017 	ldw	r2,0(r2)
80215f74:	10800104 	addi	r2,r2,4
80215f78:	1007883a 	mov	r3,r2
80215f7c:	e0bffd17 	ldw	r2,-12(fp)
80215f80:	10800817 	ldw	r2,32(r2)
80215f84:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
80215f88:	e0bffe17 	ldw	r2,-8(fp)
80215f8c:	e0ffff17 	ldw	r3,-4(fp)
80215f90:	d8000015 	stw	zero,0(sp)
80215f94:	e1fffd17 	ldw	r7,-12(fp)
80215f98:	01a00874 	movhi	r6,32801
80215f9c:	31980104 	addi	r6,r6,24580
80215fa0:	180b883a 	mov	r5,r3
80215fa4:	1009883a 	mov	r4,r2
80215fa8:	02195380 	call	80219538 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
80215fac:	e0bffd17 	ldw	r2,-12(fp)
80215fb0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
80215fb4:	e0bffd17 	ldw	r2,-12(fp)
80215fb8:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
80215fbc:	d0e02417 	ldw	r3,-32624(gp)
80215fc0:	e1fffd17 	ldw	r7,-12(fp)
80215fc4:	01a00874 	movhi	r6,32801
80215fc8:	31988404 	addi	r6,r6,25104
80215fcc:	180b883a 	mov	r5,r3
80215fd0:	1009883a 	mov	r4,r2
80215fd4:	02191b40 	call	802191b4 <alt_alarm_start>
80215fd8:	1000040e 	bge	r2,zero,80215fec <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
80215fdc:	e0fffd17 	ldw	r3,-12(fp)
80215fe0:	00a00034 	movhi	r2,32768
80215fe4:	10bfffc4 	addi	r2,r2,-1
80215fe8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
80215fec:	0001883a 	nop
80215ff0:	e037883a 	mov	sp,fp
80215ff4:	dfc00117 	ldw	ra,4(sp)
80215ff8:	df000017 	ldw	fp,0(sp)
80215ffc:	dec00204 	addi	sp,sp,8
80216000:	f800283a 	ret

80216004 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
80216004:	defff804 	addi	sp,sp,-32
80216008:	df000715 	stw	fp,28(sp)
8021600c:	df000704 	addi	fp,sp,28
80216010:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
80216014:	e0bfff17 	ldw	r2,-4(fp)
80216018:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
8021601c:	e0bffb17 	ldw	r2,-20(fp)
80216020:	10800017 	ldw	r2,0(r2)
80216024:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
80216028:	e0bffc17 	ldw	r2,-16(fp)
8021602c:	10800104 	addi	r2,r2,4
80216030:	10800037 	ldwio	r2,0(r2)
80216034:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
80216038:	e0bffd17 	ldw	r2,-12(fp)
8021603c:	1080c00c 	andi	r2,r2,768
80216040:	10006d26 	beq	r2,zero,802161f8 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
80216044:	e0bffd17 	ldw	r2,-12(fp)
80216048:	1080400c 	andi	r2,r2,256
8021604c:	10003526 	beq	r2,zero,80216124 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
80216050:	00800074 	movhi	r2,1
80216054:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
80216058:	e0bffb17 	ldw	r2,-20(fp)
8021605c:	10800a17 	ldw	r2,40(r2)
80216060:	10800044 	addi	r2,r2,1
80216064:	1081ffcc 	andi	r2,r2,2047
80216068:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
8021606c:	e0bffb17 	ldw	r2,-20(fp)
80216070:	10c00b17 	ldw	r3,44(r2)
80216074:	e0bffe17 	ldw	r2,-8(fp)
80216078:	18801526 	beq	r3,r2,802160d0 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
8021607c:	e0bffc17 	ldw	r2,-16(fp)
80216080:	10800037 	ldwio	r2,0(r2)
80216084:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
80216088:	e0bff917 	ldw	r2,-28(fp)
8021608c:	10a0000c 	andi	r2,r2,32768
80216090:	10001126 	beq	r2,zero,802160d8 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
80216094:	e0bffb17 	ldw	r2,-20(fp)
80216098:	10800a17 	ldw	r2,40(r2)
8021609c:	e0fff917 	ldw	r3,-28(fp)
802160a0:	1809883a 	mov	r4,r3
802160a4:	e0fffb17 	ldw	r3,-20(fp)
802160a8:	1885883a 	add	r2,r3,r2
802160ac:	10800e04 	addi	r2,r2,56
802160b0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
802160b4:	e0bffb17 	ldw	r2,-20(fp)
802160b8:	10800a17 	ldw	r2,40(r2)
802160bc:	10800044 	addi	r2,r2,1
802160c0:	10c1ffcc 	andi	r3,r2,2047
802160c4:	e0bffb17 	ldw	r2,-20(fp)
802160c8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
802160cc:	003fe206 	br	80216058 <__reset+0xfa1f6058>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
802160d0:	0001883a 	nop
802160d4:	00000106 	br	802160dc <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
802160d8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
802160dc:	e0bff917 	ldw	r2,-28(fp)
802160e0:	10bfffec 	andhi	r2,r2,65535
802160e4:	10000f26 	beq	r2,zero,80216124 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
802160e8:	e0bffb17 	ldw	r2,-20(fp)
802160ec:	10c00817 	ldw	r3,32(r2)
802160f0:	00bfff84 	movi	r2,-2
802160f4:	1886703a 	and	r3,r3,r2
802160f8:	e0bffb17 	ldw	r2,-20(fp)
802160fc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
80216100:	e0bffc17 	ldw	r2,-16(fp)
80216104:	10800104 	addi	r2,r2,4
80216108:	1007883a 	mov	r3,r2
8021610c:	e0bffb17 	ldw	r2,-20(fp)
80216110:	10800817 	ldw	r2,32(r2)
80216114:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
80216118:	e0bffc17 	ldw	r2,-16(fp)
8021611c:	10800104 	addi	r2,r2,4
80216120:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
80216124:	e0bffd17 	ldw	r2,-12(fp)
80216128:	1080800c 	andi	r2,r2,512
8021612c:	103fbe26 	beq	r2,zero,80216028 <__reset+0xfa1f6028>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
80216130:	e0bffd17 	ldw	r2,-12(fp)
80216134:	1004d43a 	srli	r2,r2,16
80216138:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
8021613c:	00001406 	br	80216190 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
80216140:	e0bffc17 	ldw	r2,-16(fp)
80216144:	e0fffb17 	ldw	r3,-20(fp)
80216148:	18c00d17 	ldw	r3,52(r3)
8021614c:	e13ffb17 	ldw	r4,-20(fp)
80216150:	20c7883a 	add	r3,r4,r3
80216154:	18c20e04 	addi	r3,r3,2104
80216158:	18c00003 	ldbu	r3,0(r3)
8021615c:	18c03fcc 	andi	r3,r3,255
80216160:	18c0201c 	xori	r3,r3,128
80216164:	18ffe004 	addi	r3,r3,-128
80216168:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
8021616c:	e0bffb17 	ldw	r2,-20(fp)
80216170:	10800d17 	ldw	r2,52(r2)
80216174:	10800044 	addi	r2,r2,1
80216178:	10c1ffcc 	andi	r3,r2,2047
8021617c:	e0bffb17 	ldw	r2,-20(fp)
80216180:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
80216184:	e0bffa17 	ldw	r2,-24(fp)
80216188:	10bfffc4 	addi	r2,r2,-1
8021618c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
80216190:	e0bffa17 	ldw	r2,-24(fp)
80216194:	10000526 	beq	r2,zero,802161ac <altera_avalon_jtag_uart_irq+0x1a8>
80216198:	e0bffb17 	ldw	r2,-20(fp)
8021619c:	10c00d17 	ldw	r3,52(r2)
802161a0:	e0bffb17 	ldw	r2,-20(fp)
802161a4:	10800c17 	ldw	r2,48(r2)
802161a8:	18bfe51e 	bne	r3,r2,80216140 <__reset+0xfa1f6140>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
802161ac:	e0bffa17 	ldw	r2,-24(fp)
802161b0:	103f9d26 	beq	r2,zero,80216028 <__reset+0xfa1f6028>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
802161b4:	e0bffb17 	ldw	r2,-20(fp)
802161b8:	10c00817 	ldw	r3,32(r2)
802161bc:	00bfff44 	movi	r2,-3
802161c0:	1886703a 	and	r3,r3,r2
802161c4:	e0bffb17 	ldw	r2,-20(fp)
802161c8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
802161cc:	e0bffb17 	ldw	r2,-20(fp)
802161d0:	10800017 	ldw	r2,0(r2)
802161d4:	10800104 	addi	r2,r2,4
802161d8:	1007883a 	mov	r3,r2
802161dc:	e0bffb17 	ldw	r2,-20(fp)
802161e0:	10800817 	ldw	r2,32(r2)
802161e4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
802161e8:	e0bffc17 	ldw	r2,-16(fp)
802161ec:	10800104 	addi	r2,r2,4
802161f0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
802161f4:	003f8c06 	br	80216028 <__reset+0xfa1f6028>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
802161f8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
802161fc:	0001883a 	nop
80216200:	e037883a 	mov	sp,fp
80216204:	df000017 	ldw	fp,0(sp)
80216208:	dec00104 	addi	sp,sp,4
8021620c:	f800283a 	ret

80216210 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
80216210:	defff804 	addi	sp,sp,-32
80216214:	df000715 	stw	fp,28(sp)
80216218:	df000704 	addi	fp,sp,28
8021621c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
80216220:	e0bffb17 	ldw	r2,-20(fp)
80216224:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
80216228:	e0bff917 	ldw	r2,-28(fp)
8021622c:	10800017 	ldw	r2,0(r2)
80216230:	10800104 	addi	r2,r2,4
80216234:	10800037 	ldwio	r2,0(r2)
80216238:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
8021623c:	e0bffa17 	ldw	r2,-24(fp)
80216240:	1081000c 	andi	r2,r2,1024
80216244:	10000b26 	beq	r2,zero,80216274 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
80216248:	e0bff917 	ldw	r2,-28(fp)
8021624c:	10800017 	ldw	r2,0(r2)
80216250:	10800104 	addi	r2,r2,4
80216254:	1007883a 	mov	r3,r2
80216258:	e0bff917 	ldw	r2,-28(fp)
8021625c:	10800817 	ldw	r2,32(r2)
80216260:	10810014 	ori	r2,r2,1024
80216264:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
80216268:	e0bff917 	ldw	r2,-28(fp)
8021626c:	10000915 	stw	zero,36(r2)
80216270:	00000a06 	br	8021629c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
80216274:	e0bff917 	ldw	r2,-28(fp)
80216278:	10c00917 	ldw	r3,36(r2)
8021627c:	00a00034 	movhi	r2,32768
80216280:	10bfff04 	addi	r2,r2,-4
80216284:	10c00536 	bltu	r2,r3,8021629c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
80216288:	e0bff917 	ldw	r2,-28(fp)
8021628c:	10800917 	ldw	r2,36(r2)
80216290:	10c00044 	addi	r3,r2,1
80216294:	e0bff917 	ldw	r2,-28(fp)
80216298:	10c00915 	stw	r3,36(r2)
8021629c:	d0a02417 	ldw	r2,-32624(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
802162a0:	e037883a 	mov	sp,fp
802162a4:	df000017 	ldw	fp,0(sp)
802162a8:	dec00104 	addi	sp,sp,4
802162ac:	f800283a 	ret

802162b0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
802162b0:	defffd04 	addi	sp,sp,-12
802162b4:	df000215 	stw	fp,8(sp)
802162b8:	df000204 	addi	fp,sp,8
802162bc:	e13ffe15 	stw	r4,-8(fp)
802162c0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
802162c4:	00000506 	br	802162dc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
802162c8:	e0bfff17 	ldw	r2,-4(fp)
802162cc:	1090000c 	andi	r2,r2,16384
802162d0:	10000226 	beq	r2,zero,802162dc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
802162d4:	00bffd44 	movi	r2,-11
802162d8:	00000b06 	br	80216308 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
802162dc:	e0bffe17 	ldw	r2,-8(fp)
802162e0:	10c00d17 	ldw	r3,52(r2)
802162e4:	e0bffe17 	ldw	r2,-8(fp)
802162e8:	10800c17 	ldw	r2,48(r2)
802162ec:	18800526 	beq	r3,r2,80216304 <altera_avalon_jtag_uart_close+0x54>
802162f0:	e0bffe17 	ldw	r2,-8(fp)
802162f4:	10c00917 	ldw	r3,36(r2)
802162f8:	e0bffe17 	ldw	r2,-8(fp)
802162fc:	10800117 	ldw	r2,4(r2)
80216300:	18bff136 	bltu	r3,r2,802162c8 <__reset+0xfa1f62c8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
80216304:	0005883a 	mov	r2,zero
}
80216308:	e037883a 	mov	sp,fp
8021630c:	df000017 	ldw	fp,0(sp)
80216310:	dec00104 	addi	sp,sp,4
80216314:	f800283a 	ret

80216318 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
80216318:	defffa04 	addi	sp,sp,-24
8021631c:	df000515 	stw	fp,20(sp)
80216320:	df000504 	addi	fp,sp,20
80216324:	e13ffd15 	stw	r4,-12(fp)
80216328:	e17ffe15 	stw	r5,-8(fp)
8021632c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
80216330:	00bff9c4 	movi	r2,-25
80216334:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
80216338:	e0bffe17 	ldw	r2,-8(fp)
8021633c:	10da8060 	cmpeqi	r3,r2,27137
80216340:	1800031e 	bne	r3,zero,80216350 <altera_avalon_jtag_uart_ioctl+0x38>
80216344:	109a80a0 	cmpeqi	r2,r2,27138
80216348:	1000181e 	bne	r2,zero,802163ac <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
8021634c:	00002906 	br	802163f4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
80216350:	e0bffd17 	ldw	r2,-12(fp)
80216354:	10c00117 	ldw	r3,4(r2)
80216358:	00a00034 	movhi	r2,32768
8021635c:	10bfffc4 	addi	r2,r2,-1
80216360:	18802126 	beq	r3,r2,802163e8 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
80216364:	e0bfff17 	ldw	r2,-4(fp)
80216368:	10800017 	ldw	r2,0(r2)
8021636c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
80216370:	e0bffc17 	ldw	r2,-16(fp)
80216374:	10800090 	cmplti	r2,r2,2
80216378:	1000061e 	bne	r2,zero,80216394 <altera_avalon_jtag_uart_ioctl+0x7c>
8021637c:	e0fffc17 	ldw	r3,-16(fp)
80216380:	00a00034 	movhi	r2,32768
80216384:	10bfffc4 	addi	r2,r2,-1
80216388:	18800226 	beq	r3,r2,80216394 <altera_avalon_jtag_uart_ioctl+0x7c>
8021638c:	e0bffc17 	ldw	r2,-16(fp)
80216390:	00000206 	br	8021639c <altera_avalon_jtag_uart_ioctl+0x84>
80216394:	00a00034 	movhi	r2,32768
80216398:	10bfff84 	addi	r2,r2,-2
8021639c:	e0fffd17 	ldw	r3,-12(fp)
802163a0:	18800115 	stw	r2,4(r3)
      rc = 0;
802163a4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
802163a8:	00000f06 	br	802163e8 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
802163ac:	e0bffd17 	ldw	r2,-12(fp)
802163b0:	10c00117 	ldw	r3,4(r2)
802163b4:	00a00034 	movhi	r2,32768
802163b8:	10bfffc4 	addi	r2,r2,-1
802163bc:	18800c26 	beq	r3,r2,802163f0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
802163c0:	e0bffd17 	ldw	r2,-12(fp)
802163c4:	10c00917 	ldw	r3,36(r2)
802163c8:	e0bffd17 	ldw	r2,-12(fp)
802163cc:	10800117 	ldw	r2,4(r2)
802163d0:	1885803a 	cmpltu	r2,r3,r2
802163d4:	10c03fcc 	andi	r3,r2,255
802163d8:	e0bfff17 	ldw	r2,-4(fp)
802163dc:	10c00015 	stw	r3,0(r2)
      rc = 0;
802163e0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
802163e4:	00000206 	br	802163f0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
802163e8:	0001883a 	nop
802163ec:	00000106 	br	802163f4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
802163f0:	0001883a 	nop

  default:
    break;
  }

  return rc;
802163f4:	e0bffb17 	ldw	r2,-20(fp)
}
802163f8:	e037883a 	mov	sp,fp
802163fc:	df000017 	ldw	fp,0(sp)
80216400:	dec00104 	addi	sp,sp,4
80216404:	f800283a 	ret

80216408 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
80216408:	defff304 	addi	sp,sp,-52
8021640c:	dfc00c15 	stw	ra,48(sp)
80216410:	df000b15 	stw	fp,44(sp)
80216414:	df000b04 	addi	fp,sp,44
80216418:	e13ffc15 	stw	r4,-16(fp)
8021641c:	e17ffd15 	stw	r5,-12(fp)
80216420:	e1bffe15 	stw	r6,-8(fp)
80216424:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
80216428:	e0bffd17 	ldw	r2,-12(fp)
8021642c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
80216430:	00004706 	br	80216550 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
80216434:	e0bffc17 	ldw	r2,-16(fp)
80216438:	10800a17 	ldw	r2,40(r2)
8021643c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
80216440:	e0bffc17 	ldw	r2,-16(fp)
80216444:	10800b17 	ldw	r2,44(r2)
80216448:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
8021644c:	e0fff717 	ldw	r3,-36(fp)
80216450:	e0bff817 	ldw	r2,-32(fp)
80216454:	18800536 	bltu	r3,r2,8021646c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
80216458:	e0fff717 	ldw	r3,-36(fp)
8021645c:	e0bff817 	ldw	r2,-32(fp)
80216460:	1885c83a 	sub	r2,r3,r2
80216464:	e0bff615 	stw	r2,-40(fp)
80216468:	00000406 	br	8021647c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
8021646c:	00c20004 	movi	r3,2048
80216470:	e0bff817 	ldw	r2,-32(fp)
80216474:	1885c83a 	sub	r2,r3,r2
80216478:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
8021647c:	e0bff617 	ldw	r2,-40(fp)
80216480:	10001e26 	beq	r2,zero,802164fc <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
80216484:	e0fffe17 	ldw	r3,-8(fp)
80216488:	e0bff617 	ldw	r2,-40(fp)
8021648c:	1880022e 	bgeu	r3,r2,80216498 <altera_avalon_jtag_uart_read+0x90>
        n = space;
80216490:	e0bffe17 	ldw	r2,-8(fp)
80216494:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
80216498:	e0bffc17 	ldw	r2,-16(fp)
8021649c:	10c00e04 	addi	r3,r2,56
802164a0:	e0bff817 	ldw	r2,-32(fp)
802164a4:	1885883a 	add	r2,r3,r2
802164a8:	e1bff617 	ldw	r6,-40(fp)
802164ac:	100b883a 	mov	r5,r2
802164b0:	e13ff517 	ldw	r4,-44(fp)
802164b4:	02051b40 	call	802051b4 <memcpy>
      ptr   += n;
802164b8:	e0fff517 	ldw	r3,-44(fp)
802164bc:	e0bff617 	ldw	r2,-40(fp)
802164c0:	1885883a 	add	r2,r3,r2
802164c4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
802164c8:	e0fffe17 	ldw	r3,-8(fp)
802164cc:	e0bff617 	ldw	r2,-40(fp)
802164d0:	1885c83a 	sub	r2,r3,r2
802164d4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
802164d8:	e0fff817 	ldw	r3,-32(fp)
802164dc:	e0bff617 	ldw	r2,-40(fp)
802164e0:	1885883a 	add	r2,r3,r2
802164e4:	10c1ffcc 	andi	r3,r2,2047
802164e8:	e0bffc17 	ldw	r2,-16(fp)
802164ec:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
802164f0:	e0bffe17 	ldw	r2,-8(fp)
802164f4:	00bfcf16 	blt	zero,r2,80216434 <__reset+0xfa1f6434>
802164f8:	00000106 	br	80216500 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
802164fc:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
80216500:	e0fff517 	ldw	r3,-44(fp)
80216504:	e0bffd17 	ldw	r2,-12(fp)
80216508:	1880141e 	bne	r3,r2,8021655c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
8021650c:	e0bfff17 	ldw	r2,-4(fp)
80216510:	1090000c 	andi	r2,r2,16384
80216514:	1000131e 	bne	r2,zero,80216564 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
80216518:	0001883a 	nop
8021651c:	e0bffc17 	ldw	r2,-16(fp)
80216520:	10c00a17 	ldw	r3,40(r2)
80216524:	e0bff717 	ldw	r2,-36(fp)
80216528:	1880051e 	bne	r3,r2,80216540 <altera_avalon_jtag_uart_read+0x138>
8021652c:	e0bffc17 	ldw	r2,-16(fp)
80216530:	10c00917 	ldw	r3,36(r2)
80216534:	e0bffc17 	ldw	r2,-16(fp)
80216538:	10800117 	ldw	r2,4(r2)
8021653c:	18bff736 	bltu	r3,r2,8021651c <__reset+0xfa1f651c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
80216540:	e0bffc17 	ldw	r2,-16(fp)
80216544:	10c00a17 	ldw	r3,40(r2)
80216548:	e0bff717 	ldw	r2,-36(fp)
8021654c:	18800726 	beq	r3,r2,8021656c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
80216550:	e0bffe17 	ldw	r2,-8(fp)
80216554:	00bfb716 	blt	zero,r2,80216434 <__reset+0xfa1f6434>
80216558:	00000506 	br	80216570 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
8021655c:	0001883a 	nop
80216560:	00000306 	br	80216570 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
80216564:	0001883a 	nop
80216568:	00000106 	br	80216570 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
8021656c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
80216570:	e0fff517 	ldw	r3,-44(fp)
80216574:	e0bffd17 	ldw	r2,-12(fp)
80216578:	18801826 	beq	r3,r2,802165dc <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8021657c:	0005303a 	rdctl	r2,status
80216580:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80216584:	e0fffb17 	ldw	r3,-20(fp)
80216588:	00bfff84 	movi	r2,-2
8021658c:	1884703a 	and	r2,r3,r2
80216590:	1001703a 	wrctl	status,r2
  
  return context;
80216594:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
80216598:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
8021659c:	e0bffc17 	ldw	r2,-16(fp)
802165a0:	10800817 	ldw	r2,32(r2)
802165a4:	10c00054 	ori	r3,r2,1
802165a8:	e0bffc17 	ldw	r2,-16(fp)
802165ac:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
802165b0:	e0bffc17 	ldw	r2,-16(fp)
802165b4:	10800017 	ldw	r2,0(r2)
802165b8:	10800104 	addi	r2,r2,4
802165bc:	1007883a 	mov	r3,r2
802165c0:	e0bffc17 	ldw	r2,-16(fp)
802165c4:	10800817 	ldw	r2,32(r2)
802165c8:	18800035 	stwio	r2,0(r3)
802165cc:	e0bffa17 	ldw	r2,-24(fp)
802165d0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
802165d4:	e0bff917 	ldw	r2,-28(fp)
802165d8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
802165dc:	e0fff517 	ldw	r3,-44(fp)
802165e0:	e0bffd17 	ldw	r2,-12(fp)
802165e4:	18800426 	beq	r3,r2,802165f8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
802165e8:	e0fff517 	ldw	r3,-44(fp)
802165ec:	e0bffd17 	ldw	r2,-12(fp)
802165f0:	1885c83a 	sub	r2,r3,r2
802165f4:	00000606 	br	80216610 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
802165f8:	e0bfff17 	ldw	r2,-4(fp)
802165fc:	1090000c 	andi	r2,r2,16384
80216600:	10000226 	beq	r2,zero,8021660c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
80216604:	00bffd44 	movi	r2,-11
80216608:	00000106 	br	80216610 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
8021660c:	00bffec4 	movi	r2,-5
}
80216610:	e037883a 	mov	sp,fp
80216614:	dfc00117 	ldw	ra,4(sp)
80216618:	df000017 	ldw	fp,0(sp)
8021661c:	dec00204 	addi	sp,sp,8
80216620:	f800283a 	ret

80216624 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
80216624:	defff304 	addi	sp,sp,-52
80216628:	dfc00c15 	stw	ra,48(sp)
8021662c:	df000b15 	stw	fp,44(sp)
80216630:	df000b04 	addi	fp,sp,44
80216634:	e13ffc15 	stw	r4,-16(fp)
80216638:	e17ffd15 	stw	r5,-12(fp)
8021663c:	e1bffe15 	stw	r6,-8(fp)
80216640:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
80216644:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
80216648:	e0bffd17 	ldw	r2,-12(fp)
8021664c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
80216650:	00003706 	br	80216730 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
80216654:	e0bffc17 	ldw	r2,-16(fp)
80216658:	10800c17 	ldw	r2,48(r2)
8021665c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
80216660:	e0bffc17 	ldw	r2,-16(fp)
80216664:	10800d17 	ldw	r2,52(r2)
80216668:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
8021666c:	e0fff917 	ldw	r3,-28(fp)
80216670:	e0bff517 	ldw	r2,-44(fp)
80216674:	1880062e 	bgeu	r3,r2,80216690 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
80216678:	e0fff517 	ldw	r3,-44(fp)
8021667c:	e0bff917 	ldw	r2,-28(fp)
80216680:	1885c83a 	sub	r2,r3,r2
80216684:	10bfffc4 	addi	r2,r2,-1
80216688:	e0bff615 	stw	r2,-40(fp)
8021668c:	00000b06 	br	802166bc <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
80216690:	e0bff517 	ldw	r2,-44(fp)
80216694:	10000526 	beq	r2,zero,802166ac <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
80216698:	00c20004 	movi	r3,2048
8021669c:	e0bff917 	ldw	r2,-28(fp)
802166a0:	1885c83a 	sub	r2,r3,r2
802166a4:	e0bff615 	stw	r2,-40(fp)
802166a8:	00000406 	br	802166bc <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
802166ac:	00c1ffc4 	movi	r3,2047
802166b0:	e0bff917 	ldw	r2,-28(fp)
802166b4:	1885c83a 	sub	r2,r3,r2
802166b8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
802166bc:	e0bff617 	ldw	r2,-40(fp)
802166c0:	10001e26 	beq	r2,zero,8021673c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
802166c4:	e0fffe17 	ldw	r3,-8(fp)
802166c8:	e0bff617 	ldw	r2,-40(fp)
802166cc:	1880022e 	bgeu	r3,r2,802166d8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
802166d0:	e0bffe17 	ldw	r2,-8(fp)
802166d4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
802166d8:	e0bffc17 	ldw	r2,-16(fp)
802166dc:	10c20e04 	addi	r3,r2,2104
802166e0:	e0bff917 	ldw	r2,-28(fp)
802166e4:	1885883a 	add	r2,r3,r2
802166e8:	e1bff617 	ldw	r6,-40(fp)
802166ec:	e17ffd17 	ldw	r5,-12(fp)
802166f0:	1009883a 	mov	r4,r2
802166f4:	02051b40 	call	802051b4 <memcpy>
      ptr   += n;
802166f8:	e0fffd17 	ldw	r3,-12(fp)
802166fc:	e0bff617 	ldw	r2,-40(fp)
80216700:	1885883a 	add	r2,r3,r2
80216704:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
80216708:	e0fffe17 	ldw	r3,-8(fp)
8021670c:	e0bff617 	ldw	r2,-40(fp)
80216710:	1885c83a 	sub	r2,r3,r2
80216714:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
80216718:	e0fff917 	ldw	r3,-28(fp)
8021671c:	e0bff617 	ldw	r2,-40(fp)
80216720:	1885883a 	add	r2,r3,r2
80216724:	10c1ffcc 	andi	r3,r2,2047
80216728:	e0bffc17 	ldw	r2,-16(fp)
8021672c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
80216730:	e0bffe17 	ldw	r2,-8(fp)
80216734:	00bfc716 	blt	zero,r2,80216654 <__reset+0xfa1f6654>
80216738:	00000106 	br	80216740 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
8021673c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80216740:	0005303a 	rdctl	r2,status
80216744:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80216748:	e0fffb17 	ldw	r3,-20(fp)
8021674c:	00bfff84 	movi	r2,-2
80216750:	1884703a 	and	r2,r3,r2
80216754:	1001703a 	wrctl	status,r2
  
  return context;
80216758:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
8021675c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
80216760:	e0bffc17 	ldw	r2,-16(fp)
80216764:	10800817 	ldw	r2,32(r2)
80216768:	10c00094 	ori	r3,r2,2
8021676c:	e0bffc17 	ldw	r2,-16(fp)
80216770:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
80216774:	e0bffc17 	ldw	r2,-16(fp)
80216778:	10800017 	ldw	r2,0(r2)
8021677c:	10800104 	addi	r2,r2,4
80216780:	1007883a 	mov	r3,r2
80216784:	e0bffc17 	ldw	r2,-16(fp)
80216788:	10800817 	ldw	r2,32(r2)
8021678c:	18800035 	stwio	r2,0(r3)
80216790:	e0bffa17 	ldw	r2,-24(fp)
80216794:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80216798:	e0bff817 	ldw	r2,-32(fp)
8021679c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
802167a0:	e0bffe17 	ldw	r2,-8(fp)
802167a4:	0080100e 	bge	zero,r2,802167e8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
802167a8:	e0bfff17 	ldw	r2,-4(fp)
802167ac:	1090000c 	andi	r2,r2,16384
802167b0:	1000101e 	bne	r2,zero,802167f4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
802167b4:	0001883a 	nop
802167b8:	e0bffc17 	ldw	r2,-16(fp)
802167bc:	10c00d17 	ldw	r3,52(r2)
802167c0:	e0bff517 	ldw	r2,-44(fp)
802167c4:	1880051e 	bne	r3,r2,802167dc <altera_avalon_jtag_uart_write+0x1b8>
802167c8:	e0bffc17 	ldw	r2,-16(fp)
802167cc:	10c00917 	ldw	r3,36(r2)
802167d0:	e0bffc17 	ldw	r2,-16(fp)
802167d4:	10800117 	ldw	r2,4(r2)
802167d8:	18bff736 	bltu	r3,r2,802167b8 <__reset+0xfa1f67b8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
802167dc:	e0bffc17 	ldw	r2,-16(fp)
802167e0:	10800917 	ldw	r2,36(r2)
802167e4:	1000051e 	bne	r2,zero,802167fc <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
802167e8:	e0bffe17 	ldw	r2,-8(fp)
802167ec:	00bfd016 	blt	zero,r2,80216730 <__reset+0xfa1f6730>
802167f0:	00000306 	br	80216800 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
802167f4:	0001883a 	nop
802167f8:	00000106 	br	80216800 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
802167fc:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
80216800:	e0fffd17 	ldw	r3,-12(fp)
80216804:	e0bff717 	ldw	r2,-36(fp)
80216808:	18800426 	beq	r3,r2,8021681c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
8021680c:	e0fffd17 	ldw	r3,-12(fp)
80216810:	e0bff717 	ldw	r2,-36(fp)
80216814:	1885c83a 	sub	r2,r3,r2
80216818:	00000606 	br	80216834 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
8021681c:	e0bfff17 	ldw	r2,-4(fp)
80216820:	1090000c 	andi	r2,r2,16384
80216824:	10000226 	beq	r2,zero,80216830 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
80216828:	00bffd44 	movi	r2,-11
8021682c:	00000106 	br	80216834 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
80216830:	00bffec4 	movi	r2,-5
}
80216834:	e037883a 	mov	sp,fp
80216838:	dfc00117 	ldw	ra,4(sp)
8021683c:	df000017 	ldw	fp,0(sp)
80216840:	dec00204 	addi	sp,sp,8
80216844:	f800283a 	ret

80216848 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
80216848:	defffa04 	addi	sp,sp,-24
8021684c:	dfc00515 	stw	ra,20(sp)
80216850:	df000415 	stw	fp,16(sp)
80216854:	df000404 	addi	fp,sp,16
80216858:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
8021685c:	0007883a 	mov	r3,zero
80216860:	e0bfff17 	ldw	r2,-4(fp)
80216864:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
80216868:	e0bfff17 	ldw	r2,-4(fp)
8021686c:	10800104 	addi	r2,r2,4
80216870:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80216874:	0005303a 	rdctl	r2,status
80216878:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8021687c:	e0fffd17 	ldw	r3,-12(fp)
80216880:	00bfff84 	movi	r2,-2
80216884:	1884703a 	and	r2,r3,r2
80216888:	1001703a 	wrctl	status,r2
  
  return context;
8021688c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
80216890:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
80216894:	0215a200 	call	80215a20 <alt_tick>
80216898:	e0bffc17 	ldw	r2,-16(fp)
8021689c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
802168a0:	e0bffe17 	ldw	r2,-8(fp)
802168a4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
802168a8:	0001883a 	nop
802168ac:	e037883a 	mov	sp,fp
802168b0:	dfc00117 	ldw	ra,4(sp)
802168b4:	df000017 	ldw	fp,0(sp)
802168b8:	dec00204 	addi	sp,sp,8
802168bc:	f800283a 	ret

802168c0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
802168c0:	defff804 	addi	sp,sp,-32
802168c4:	dfc00715 	stw	ra,28(sp)
802168c8:	df000615 	stw	fp,24(sp)
802168cc:	df000604 	addi	fp,sp,24
802168d0:	e13ffc15 	stw	r4,-16(fp)
802168d4:	e17ffd15 	stw	r5,-12(fp)
802168d8:	e1bffe15 	stw	r6,-8(fp)
802168dc:	e1ffff15 	stw	r7,-4(fp)
802168e0:	e0bfff17 	ldw	r2,-4(fp)
802168e4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
802168e8:	d0a02417 	ldw	r2,-32624(gp)
802168ec:	1000021e 	bne	r2,zero,802168f8 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
802168f0:	e0bffb17 	ldw	r2,-20(fp)
802168f4:	d0a02415 	stw	r2,-32624(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
802168f8:	e0bffc17 	ldw	r2,-16(fp)
802168fc:	10800104 	addi	r2,r2,4
80216900:	00c001c4 	movi	r3,7
80216904:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
80216908:	d8000015 	stw	zero,0(sp)
8021690c:	e1fffc17 	ldw	r7,-16(fp)
80216910:	01a00874 	movhi	r6,32801
80216914:	319a1204 	addi	r6,r6,26696
80216918:	e17ffe17 	ldw	r5,-8(fp)
8021691c:	e13ffd17 	ldw	r4,-12(fp)
80216920:	02195380 	call	80219538 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
80216924:	0001883a 	nop
80216928:	e037883a 	mov	sp,fp
8021692c:	dfc00117 	ldw	ra,4(sp)
80216930:	df000017 	ldw	fp,0(sp)
80216934:	dec00204 	addi	sp,sp,8
80216938:	f800283a 	ret

8021693c <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
8021693c:	defffa04 	addi	sp,sp,-24
80216940:	dfc00515 	stw	ra,20(sp)
80216944:	df000415 	stw	fp,16(sp)
80216948:	df000404 	addi	fp,sp,16
8021694c:	e13ffd15 	stw	r4,-12(fp)
80216950:	e17ffe15 	stw	r5,-8(fp)
80216954:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
80216958:	e0bffd17 	ldw	r2,-12(fp)
8021695c:	10800017 	ldw	r2,0(r2)
80216960:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
80216964:	e0bffc17 	ldw	r2,-16(fp)
80216968:	10c00a04 	addi	r3,r2,40
8021696c:	e0bffd17 	ldw	r2,-12(fp)
80216970:	10800217 	ldw	r2,8(r2)
80216974:	100f883a 	mov	r7,r2
80216978:	e1bfff17 	ldw	r6,-4(fp)
8021697c:	e17ffe17 	ldw	r5,-8(fp)
80216980:	1809883a 	mov	r4,r3
80216984:	0216e500 	call	80216e50 <altera_avalon_uart_read>
      fd->fd_flags);
}
80216988:	e037883a 	mov	sp,fp
8021698c:	dfc00117 	ldw	ra,4(sp)
80216990:	df000017 	ldw	fp,0(sp)
80216994:	dec00204 	addi	sp,sp,8
80216998:	f800283a 	ret

8021699c <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
8021699c:	defffa04 	addi	sp,sp,-24
802169a0:	dfc00515 	stw	ra,20(sp)
802169a4:	df000415 	stw	fp,16(sp)
802169a8:	df000404 	addi	fp,sp,16
802169ac:	e13ffd15 	stw	r4,-12(fp)
802169b0:	e17ffe15 	stw	r5,-8(fp)
802169b4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
802169b8:	e0bffd17 	ldw	r2,-12(fp)
802169bc:	10800017 	ldw	r2,0(r2)
802169c0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
802169c4:	e0bffc17 	ldw	r2,-16(fp)
802169c8:	10c00a04 	addi	r3,r2,40
802169cc:	e0bffd17 	ldw	r2,-12(fp)
802169d0:	10800217 	ldw	r2,8(r2)
802169d4:	100f883a 	mov	r7,r2
802169d8:	e1bfff17 	ldw	r6,-4(fp)
802169dc:	e17ffe17 	ldw	r5,-8(fp)
802169e0:	1809883a 	mov	r4,r3
802169e4:	02170680 	call	80217068 <altera_avalon_uart_write>
      fd->fd_flags);
}
802169e8:	e037883a 	mov	sp,fp
802169ec:	dfc00117 	ldw	ra,4(sp)
802169f0:	df000017 	ldw	fp,0(sp)
802169f4:	dec00204 	addi	sp,sp,8
802169f8:	f800283a 	ret

802169fc <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
802169fc:	defffc04 	addi	sp,sp,-16
80216a00:	dfc00315 	stw	ra,12(sp)
80216a04:	df000215 	stw	fp,8(sp)
80216a08:	df000204 	addi	fp,sp,8
80216a0c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
80216a10:	e0bfff17 	ldw	r2,-4(fp)
80216a14:	10800017 	ldw	r2,0(r2)
80216a18:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
80216a1c:	e0bffe17 	ldw	r2,-8(fp)
80216a20:	10c00a04 	addi	r3,r2,40
80216a24:	e0bfff17 	ldw	r2,-4(fp)
80216a28:	10800217 	ldw	r2,8(r2)
80216a2c:	100b883a 	mov	r5,r2
80216a30:	1809883a 	mov	r4,r3
80216a34:	0216dc00 	call	80216dc0 <altera_avalon_uart_close>
}
80216a38:	e037883a 	mov	sp,fp
80216a3c:	dfc00117 	ldw	ra,4(sp)
80216a40:	df000017 	ldw	fp,0(sp)
80216a44:	dec00204 	addi	sp,sp,8
80216a48:	f800283a 	ret

80216a4c <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
80216a4c:	defff804 	addi	sp,sp,-32
80216a50:	dfc00715 	stw	ra,28(sp)
80216a54:	df000615 	stw	fp,24(sp)
80216a58:	df000604 	addi	fp,sp,24
80216a5c:	e13ffd15 	stw	r4,-12(fp)
80216a60:	e17ffe15 	stw	r5,-8(fp)
80216a64:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
80216a68:	e0bffd17 	ldw	r2,-12(fp)
80216a6c:	10800017 	ldw	r2,0(r2)
80216a70:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
80216a74:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
80216a78:	1000041e 	bne	r2,zero,80216a8c <altera_avalon_uart_init+0x40>
80216a7c:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
80216a80:	1000021e 	bne	r2,zero,80216a8c <altera_avalon_uart_init+0x40>
80216a84:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
80216a88:	10000226 	beq	r2,zero,80216a94 <altera_avalon_uart_init+0x48>
80216a8c:	00800044 	movi	r2,1
80216a90:	00000106 	br	80216a98 <altera_avalon_uart_init+0x4c>
80216a94:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
80216a98:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
80216a9c:	e0bffc17 	ldw	r2,-16(fp)
80216aa0:	10000f1e 	bne	r2,zero,80216ae0 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
80216aa4:	e0bffd17 	ldw	r2,-12(fp)
80216aa8:	00c32004 	movi	r3,3200
80216aac:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
80216ab0:	e0bffb17 	ldw	r2,-20(fp)
80216ab4:	10800304 	addi	r2,r2,12
80216ab8:	e0fffd17 	ldw	r3,-12(fp)
80216abc:	18c00117 	ldw	r3,4(r3)
80216ac0:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
80216ac4:	d8000015 	stw	zero,0(sp)
80216ac8:	e1fffd17 	ldw	r7,-12(fp)
80216acc:	01a00874 	movhi	r6,32801
80216ad0:	319abe04 	addi	r6,r6,27384
80216ad4:	e17fff17 	ldw	r5,-4(fp)
80216ad8:	e13ffe17 	ldw	r4,-8(fp)
80216adc:	02195380 	call	80219538 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
80216ae0:	0001883a 	nop
80216ae4:	e037883a 	mov	sp,fp
80216ae8:	dfc00117 	ldw	ra,4(sp)
80216aec:	df000017 	ldw	fp,0(sp)
80216af0:	dec00204 	addi	sp,sp,8
80216af4:	f800283a 	ret

80216af8 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
80216af8:	defffa04 	addi	sp,sp,-24
80216afc:	dfc00515 	stw	ra,20(sp)
80216b00:	df000415 	stw	fp,16(sp)
80216b04:	df000404 	addi	fp,sp,16
80216b08:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
80216b0c:	e0bfff17 	ldw	r2,-4(fp)
80216b10:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
80216b14:	e0bffc17 	ldw	r2,-16(fp)
80216b18:	10800017 	ldw	r2,0(r2)
80216b1c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
80216b20:	e0bffd17 	ldw	r2,-12(fp)
80216b24:	10800204 	addi	r2,r2,8
80216b28:	10800037 	ldwio	r2,0(r2)
80216b2c:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
80216b30:	e0bffd17 	ldw	r2,-12(fp)
80216b34:	10800204 	addi	r2,r2,8
80216b38:	0007883a 	mov	r3,zero
80216b3c:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
80216b40:	e0bffd17 	ldw	r2,-12(fp)
80216b44:	10800204 	addi	r2,r2,8
80216b48:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
80216b4c:	e0bffe17 	ldw	r2,-8(fp)
80216b50:	1080200c 	andi	r2,r2,128
80216b54:	10000326 	beq	r2,zero,80216b64 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
80216b58:	e17ffe17 	ldw	r5,-8(fp)
80216b5c:	e13ffc17 	ldw	r4,-16(fp)
80216b60:	0216b940 	call	80216b94 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
80216b64:	e0bffe17 	ldw	r2,-8(fp)
80216b68:	1081100c 	andi	r2,r2,1088
80216b6c:	10000326 	beq	r2,zero,80216b7c <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
80216b70:	e17ffe17 	ldw	r5,-8(fp)
80216b74:	e13ffc17 	ldw	r4,-16(fp)
80216b78:	0216c780 	call	80216c78 <altera_avalon_uart_txirq>
  }
  

}
80216b7c:	0001883a 	nop
80216b80:	e037883a 	mov	sp,fp
80216b84:	dfc00117 	ldw	ra,4(sp)
80216b88:	df000017 	ldw	fp,0(sp)
80216b8c:	dec00204 	addi	sp,sp,8
80216b90:	f800283a 	ret

80216b94 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
80216b94:	defffc04 	addi	sp,sp,-16
80216b98:	df000315 	stw	fp,12(sp)
80216b9c:	df000304 	addi	fp,sp,12
80216ba0:	e13ffe15 	stw	r4,-8(fp)
80216ba4:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
80216ba8:	e0bfff17 	ldw	r2,-4(fp)
80216bac:	108000cc 	andi	r2,r2,3
80216bb0:	10002c1e 	bne	r2,zero,80216c64 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
80216bb4:	e0bffe17 	ldw	r2,-8(fp)
80216bb8:	10800317 	ldw	r2,12(r2)
80216bbc:	e0bffe17 	ldw	r2,-8(fp)
80216bc0:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
80216bc4:	e0bffe17 	ldw	r2,-8(fp)
80216bc8:	10800317 	ldw	r2,12(r2)
80216bcc:	10800044 	addi	r2,r2,1
80216bd0:	10800fcc 	andi	r2,r2,63
80216bd4:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
80216bd8:	e0bffe17 	ldw	r2,-8(fp)
80216bdc:	10800317 	ldw	r2,12(r2)
80216be0:	e0fffe17 	ldw	r3,-8(fp)
80216be4:	18c00017 	ldw	r3,0(r3)
80216be8:	18c00037 	ldwio	r3,0(r3)
80216bec:	1809883a 	mov	r4,r3
80216bf0:	e0fffe17 	ldw	r3,-8(fp)
80216bf4:	1885883a 	add	r2,r3,r2
80216bf8:	10800704 	addi	r2,r2,28
80216bfc:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
80216c00:	e0bffe17 	ldw	r2,-8(fp)
80216c04:	e0fffd17 	ldw	r3,-12(fp)
80216c08:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
80216c0c:	e0bffe17 	ldw	r2,-8(fp)
80216c10:	10800317 	ldw	r2,12(r2)
80216c14:	10800044 	addi	r2,r2,1
80216c18:	10800fcc 	andi	r2,r2,63
80216c1c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
80216c20:	e0bffe17 	ldw	r2,-8(fp)
80216c24:	10c00217 	ldw	r3,8(r2)
80216c28:	e0bffd17 	ldw	r2,-12(fp)
80216c2c:	18800e1e 	bne	r3,r2,80216c68 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
80216c30:	e0bffe17 	ldw	r2,-8(fp)
80216c34:	10c00117 	ldw	r3,4(r2)
80216c38:	00bfdfc4 	movi	r2,-129
80216c3c:	1886703a 	and	r3,r3,r2
80216c40:	e0bffe17 	ldw	r2,-8(fp)
80216c44:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
80216c48:	e0bffe17 	ldw	r2,-8(fp)
80216c4c:	10800017 	ldw	r2,0(r2)
80216c50:	10800304 	addi	r2,r2,12
80216c54:	e0fffe17 	ldw	r3,-8(fp)
80216c58:	18c00117 	ldw	r3,4(r3)
80216c5c:	10c00035 	stwio	r3,0(r2)
80216c60:	00000106 	br	80216c68 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
80216c64:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
80216c68:	e037883a 	mov	sp,fp
80216c6c:	df000017 	ldw	fp,0(sp)
80216c70:	dec00104 	addi	sp,sp,4
80216c74:	f800283a 	ret

80216c78 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
80216c78:	defffb04 	addi	sp,sp,-20
80216c7c:	df000415 	stw	fp,16(sp)
80216c80:	df000404 	addi	fp,sp,16
80216c84:	e13ffc15 	stw	r4,-16(fp)
80216c88:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
80216c8c:	e0bffc17 	ldw	r2,-16(fp)
80216c90:	10c00417 	ldw	r3,16(r2)
80216c94:	e0bffc17 	ldw	r2,-16(fp)
80216c98:	10800517 	ldw	r2,20(r2)
80216c9c:	18803226 	beq	r3,r2,80216d68 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
80216ca0:	e0bffc17 	ldw	r2,-16(fp)
80216ca4:	10800617 	ldw	r2,24(r2)
80216ca8:	1080008c 	andi	r2,r2,2
80216cac:	10000326 	beq	r2,zero,80216cbc <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
80216cb0:	e0bffd17 	ldw	r2,-12(fp)
80216cb4:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
80216cb8:	10001d26 	beq	r2,zero,80216d30 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
80216cbc:	e0bffc17 	ldw	r2,-16(fp)
80216cc0:	10800417 	ldw	r2,16(r2)
80216cc4:	e0bffc17 	ldw	r2,-16(fp)
80216cc8:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
80216ccc:	e0bffc17 	ldw	r2,-16(fp)
80216cd0:	10800017 	ldw	r2,0(r2)
80216cd4:	10800104 	addi	r2,r2,4
80216cd8:	e0fffc17 	ldw	r3,-16(fp)
80216cdc:	18c00417 	ldw	r3,16(r3)
80216ce0:	e13ffc17 	ldw	r4,-16(fp)
80216ce4:	20c7883a 	add	r3,r4,r3
80216ce8:	18c01704 	addi	r3,r3,92
80216cec:	18c00003 	ldbu	r3,0(r3)
80216cf0:	18c03fcc 	andi	r3,r3,255
80216cf4:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
80216cf8:	e0bffc17 	ldw	r2,-16(fp)
80216cfc:	10800417 	ldw	r2,16(r2)
80216d00:	10800044 	addi	r2,r2,1
80216d04:	e0fffc17 	ldw	r3,-16(fp)
80216d08:	18800415 	stw	r2,16(r3)
80216d0c:	10c00fcc 	andi	r3,r2,63
80216d10:	e0bffc17 	ldw	r2,-16(fp)
80216d14:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
80216d18:	e0bffc17 	ldw	r2,-16(fp)
80216d1c:	10800117 	ldw	r2,4(r2)
80216d20:	10c01014 	ori	r3,r2,64
80216d24:	e0bffc17 	ldw	r2,-16(fp)
80216d28:	10c00115 	stw	r3,4(r2)
80216d2c:	00000e06 	br	80216d68 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
80216d30:	e0bffc17 	ldw	r2,-16(fp)
80216d34:	10800017 	ldw	r2,0(r2)
80216d38:	10800204 	addi	r2,r2,8
80216d3c:	10800037 	ldwio	r2,0(r2)
80216d40:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
80216d44:	e0bffd17 	ldw	r2,-12(fp)
80216d48:	1082000c 	andi	r2,r2,2048
80216d4c:	1000061e 	bne	r2,zero,80216d68 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
80216d50:	e0bffc17 	ldw	r2,-16(fp)
80216d54:	10c00117 	ldw	r3,4(r2)
80216d58:	00bfefc4 	movi	r2,-65
80216d5c:	1886703a 	and	r3,r3,r2
80216d60:	e0bffc17 	ldw	r2,-16(fp)
80216d64:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
80216d68:	e0bffc17 	ldw	r2,-16(fp)
80216d6c:	10c00417 	ldw	r3,16(r2)
80216d70:	e0bffc17 	ldw	r2,-16(fp)
80216d74:	10800517 	ldw	r2,20(r2)
80216d78:	1880061e 	bne	r3,r2,80216d94 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
80216d7c:	e0bffc17 	ldw	r2,-16(fp)
80216d80:	10c00117 	ldw	r3,4(r2)
80216d84:	00beefc4 	movi	r2,-1089
80216d88:	1886703a 	and	r3,r3,r2
80216d8c:	e0bffc17 	ldw	r2,-16(fp)
80216d90:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
80216d94:	e0bffc17 	ldw	r2,-16(fp)
80216d98:	10800017 	ldw	r2,0(r2)
80216d9c:	10800304 	addi	r2,r2,12
80216da0:	e0fffc17 	ldw	r3,-16(fp)
80216da4:	18c00117 	ldw	r3,4(r3)
80216da8:	10c00035 	stwio	r3,0(r2)
}
80216dac:	0001883a 	nop
80216db0:	e037883a 	mov	sp,fp
80216db4:	df000017 	ldw	fp,0(sp)
80216db8:	dec00104 	addi	sp,sp,4
80216dbc:	f800283a 	ret

80216dc0 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
80216dc0:	defffd04 	addi	sp,sp,-12
80216dc4:	df000215 	stw	fp,8(sp)
80216dc8:	df000204 	addi	fp,sp,8
80216dcc:	e13ffe15 	stw	r4,-8(fp)
80216dd0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
80216dd4:	00000506 	br	80216dec <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
80216dd8:	e0bfff17 	ldw	r2,-4(fp)
80216ddc:	1090000c 	andi	r2,r2,16384
80216de0:	10000226 	beq	r2,zero,80216dec <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
80216de4:	00bffd44 	movi	r2,-11
80216de8:	00000606 	br	80216e04 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
80216dec:	e0bffe17 	ldw	r2,-8(fp)
80216df0:	10c00417 	ldw	r3,16(r2)
80216df4:	e0bffe17 	ldw	r2,-8(fp)
80216df8:	10800517 	ldw	r2,20(r2)
80216dfc:	18bff61e 	bne	r3,r2,80216dd8 <__reset+0xfa1f6dd8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
80216e00:	0005883a 	mov	r2,zero
}
80216e04:	e037883a 	mov	sp,fp
80216e08:	df000017 	ldw	fp,0(sp)
80216e0c:	dec00104 	addi	sp,sp,4
80216e10:	f800283a 	ret

80216e14 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80216e14:	defffe04 	addi	sp,sp,-8
80216e18:	dfc00115 	stw	ra,4(sp)
80216e1c:	df000015 	stw	fp,0(sp)
80216e20:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80216e24:	d0a00c17 	ldw	r2,-32720(gp)
80216e28:	10000326 	beq	r2,zero,80216e38 <alt_get_errno+0x24>
80216e2c:	d0a00c17 	ldw	r2,-32720(gp)
80216e30:	103ee83a 	callr	r2
80216e34:	00000106 	br	80216e3c <alt_get_errno+0x28>
80216e38:	d0a02004 	addi	r2,gp,-32640
}
80216e3c:	e037883a 	mov	sp,fp
80216e40:	dfc00117 	ldw	ra,4(sp)
80216e44:	df000017 	ldw	fp,0(sp)
80216e48:	dec00204 	addi	sp,sp,8
80216e4c:	f800283a 	ret

80216e50 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
80216e50:	defff204 	addi	sp,sp,-56
80216e54:	dfc00d15 	stw	ra,52(sp)
80216e58:	df000c15 	stw	fp,48(sp)
80216e5c:	df000c04 	addi	fp,sp,48
80216e60:	e13ffc15 	stw	r4,-16(fp)
80216e64:	e17ffd15 	stw	r5,-12(fp)
80216e68:	e1bffe15 	stw	r6,-8(fp)
80216e6c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
80216e70:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
80216e74:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
80216e78:	e0bfff17 	ldw	r2,-4(fp)
80216e7c:	1090000c 	andi	r2,r2,16384
80216e80:	1005003a 	cmpeq	r2,r2,zero
80216e84:	10803fcc 	andi	r2,r2,255
80216e88:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
80216e8c:	00001306 	br	80216edc <altera_avalon_uart_read+0x8c>
    {
      count++;
80216e90:	e0bff517 	ldw	r2,-44(fp)
80216e94:	10800044 	addi	r2,r2,1
80216e98:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
80216e9c:	e0bffd17 	ldw	r2,-12(fp)
80216ea0:	10c00044 	addi	r3,r2,1
80216ea4:	e0fffd15 	stw	r3,-12(fp)
80216ea8:	e0fffc17 	ldw	r3,-16(fp)
80216eac:	18c00217 	ldw	r3,8(r3)
80216eb0:	e13ffc17 	ldw	r4,-16(fp)
80216eb4:	20c7883a 	add	r3,r4,r3
80216eb8:	18c00704 	addi	r3,r3,28
80216ebc:	18c00003 	ldbu	r3,0(r3)
80216ec0:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
80216ec4:	e0bffc17 	ldw	r2,-16(fp)
80216ec8:	10800217 	ldw	r2,8(r2)
80216ecc:	10800044 	addi	r2,r2,1
80216ed0:	10c00fcc 	andi	r3,r2,63
80216ed4:	e0bffc17 	ldw	r2,-16(fp)
80216ed8:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
80216edc:	e0fff517 	ldw	r3,-44(fp)
80216ee0:	e0bffe17 	ldw	r2,-8(fp)
80216ee4:	1880050e 	bge	r3,r2,80216efc <altera_avalon_uart_read+0xac>
80216ee8:	e0bffc17 	ldw	r2,-16(fp)
80216eec:	10c00217 	ldw	r3,8(r2)
80216ef0:	e0bffc17 	ldw	r2,-16(fp)
80216ef4:	10800317 	ldw	r2,12(r2)
80216ef8:	18bfe51e 	bne	r3,r2,80216e90 <__reset+0xfa1f6e90>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
80216efc:	e0bff517 	ldw	r2,-44(fp)
80216f00:	1000251e 	bne	r2,zero,80216f98 <altera_avalon_uart_read+0x148>
80216f04:	e0bffc17 	ldw	r2,-16(fp)
80216f08:	10c00217 	ldw	r3,8(r2)
80216f0c:	e0bffc17 	ldw	r2,-16(fp)
80216f10:	10800317 	ldw	r2,12(r2)
80216f14:	1880201e 	bne	r3,r2,80216f98 <altera_avalon_uart_read+0x148>
    {
      if (!block)
80216f18:	e0bff617 	ldw	r2,-40(fp)
80216f1c:	1000071e 	bne	r2,zero,80216f3c <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
80216f20:	0216e140 	call	80216e14 <alt_get_errno>
80216f24:	1007883a 	mov	r3,r2
80216f28:	008002c4 	movi	r2,11
80216f2c:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
80216f30:	00800044 	movi	r2,1
80216f34:	e0bff405 	stb	r2,-48(fp)
        break;
80216f38:	00001b06 	br	80216fa8 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80216f3c:	0005303a 	rdctl	r2,status
80216f40:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80216f44:	e0fff917 	ldw	r3,-28(fp)
80216f48:	00bfff84 	movi	r2,-2
80216f4c:	1884703a 	and	r2,r3,r2
80216f50:	1001703a 	wrctl	status,r2
  
  return context;
80216f54:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
80216f58:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
80216f5c:	e0bffc17 	ldw	r2,-16(fp)
80216f60:	10800117 	ldw	r2,4(r2)
80216f64:	10c02014 	ori	r3,r2,128
80216f68:	e0bffc17 	ldw	r2,-16(fp)
80216f6c:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
80216f70:	e0bffc17 	ldw	r2,-16(fp)
80216f74:	10800017 	ldw	r2,0(r2)
80216f78:	10800304 	addi	r2,r2,12
80216f7c:	e0fffc17 	ldw	r3,-16(fp)
80216f80:	18c00117 	ldw	r3,4(r3)
80216f84:	10c00035 	stwio	r3,0(r2)
80216f88:	e0bff817 	ldw	r2,-32(fp)
80216f8c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80216f90:	e0bffa17 	ldw	r2,-24(fp)
80216f94:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
80216f98:	e0bff517 	ldw	r2,-44(fp)
80216f9c:	1000021e 	bne	r2,zero,80216fa8 <altera_avalon_uart_read+0x158>
80216fa0:	e0bffe17 	ldw	r2,-8(fp)
80216fa4:	103fcd1e 	bne	r2,zero,80216edc <__reset+0xfa1f6edc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80216fa8:	0005303a 	rdctl	r2,status
80216fac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80216fb0:	e0fffb17 	ldw	r3,-20(fp)
80216fb4:	00bfff84 	movi	r2,-2
80216fb8:	1884703a 	and	r2,r3,r2
80216fbc:	1001703a 	wrctl	status,r2
  
  return context;
80216fc0:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
80216fc4:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
80216fc8:	e0bffc17 	ldw	r2,-16(fp)
80216fcc:	10800117 	ldw	r2,4(r2)
80216fd0:	10c02014 	ori	r3,r2,128
80216fd4:	e0bffc17 	ldw	r2,-16(fp)
80216fd8:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
80216fdc:	e0bffc17 	ldw	r2,-16(fp)
80216fe0:	10800017 	ldw	r2,0(r2)
80216fe4:	10800304 	addi	r2,r2,12
80216fe8:	e0fffc17 	ldw	r3,-16(fp)
80216fec:	18c00117 	ldw	r3,4(r3)
80216ff0:	10c00035 	stwio	r3,0(r2)
80216ff4:	e0bff817 	ldw	r2,-32(fp)
80216ff8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80216ffc:	e0bff717 	ldw	r2,-36(fp)
80217000:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
80217004:	e0bff403 	ldbu	r2,-48(fp)
80217008:	10000226 	beq	r2,zero,80217014 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
8021700c:	00bffd44 	movi	r2,-11
80217010:	00000106 	br	80217018 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
80217014:	e0bff517 	ldw	r2,-44(fp)
  }
}
80217018:	e037883a 	mov	sp,fp
8021701c:	dfc00117 	ldw	ra,4(sp)
80217020:	df000017 	ldw	fp,0(sp)
80217024:	dec00204 	addi	sp,sp,8
80217028:	f800283a 	ret

8021702c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8021702c:	defffe04 	addi	sp,sp,-8
80217030:	dfc00115 	stw	ra,4(sp)
80217034:	df000015 	stw	fp,0(sp)
80217038:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8021703c:	d0a00c17 	ldw	r2,-32720(gp)
80217040:	10000326 	beq	r2,zero,80217050 <alt_get_errno+0x24>
80217044:	d0a00c17 	ldw	r2,-32720(gp)
80217048:	103ee83a 	callr	r2
8021704c:	00000106 	br	80217054 <alt_get_errno+0x28>
80217050:	d0a02004 	addi	r2,gp,-32640
}
80217054:	e037883a 	mov	sp,fp
80217058:	dfc00117 	ldw	ra,4(sp)
8021705c:	df000017 	ldw	fp,0(sp)
80217060:	dec00204 	addi	sp,sp,8
80217064:	f800283a 	ret

80217068 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
80217068:	defff204 	addi	sp,sp,-56
8021706c:	dfc00d15 	stw	ra,52(sp)
80217070:	df000c15 	stw	fp,48(sp)
80217074:	df000c04 	addi	fp,sp,48
80217078:	e13ffc15 	stw	r4,-16(fp)
8021707c:	e17ffd15 	stw	r5,-12(fp)
80217080:	e1bffe15 	stw	r6,-8(fp)
80217084:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
80217088:	e0bffe17 	ldw	r2,-8(fp)
8021708c:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
80217090:	e0bfff17 	ldw	r2,-4(fp)
80217094:	1090000c 	andi	r2,r2,16384
80217098:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
8021709c:	00003c06 	br	80217190 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
802170a0:	e0bffc17 	ldw	r2,-16(fp)
802170a4:	10800517 	ldw	r2,20(r2)
802170a8:	10800044 	addi	r2,r2,1
802170ac:	10800fcc 	andi	r2,r2,63
802170b0:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
802170b4:	e0bffc17 	ldw	r2,-16(fp)
802170b8:	10c00417 	ldw	r3,16(r2)
802170bc:	e0bff717 	ldw	r2,-36(fp)
802170c0:	1880221e 	bne	r3,r2,8021714c <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
802170c4:	e0bff517 	ldw	r2,-44(fp)
802170c8:	10000526 	beq	r2,zero,802170e0 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
802170cc:	021702c0 	call	8021702c <alt_get_errno>
802170d0:	1007883a 	mov	r3,r2
802170d4:	008002c4 	movi	r2,11
802170d8:	18800015 	stw	r2,0(r3)
        break;
802170dc:	00002e06 	br	80217198 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
802170e0:	0005303a 	rdctl	r2,status
802170e4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
802170e8:	e0fff917 	ldw	r3,-28(fp)
802170ec:	00bfff84 	movi	r2,-2
802170f0:	1884703a 	and	r2,r3,r2
802170f4:	1001703a 	wrctl	status,r2
  
  return context;
802170f8:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
802170fc:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
80217100:	e0bffc17 	ldw	r2,-16(fp)
80217104:	10800117 	ldw	r2,4(r2)
80217108:	10c11014 	ori	r3,r2,1088
8021710c:	e0bffc17 	ldw	r2,-16(fp)
80217110:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
80217114:	e0bffc17 	ldw	r2,-16(fp)
80217118:	10800017 	ldw	r2,0(r2)
8021711c:	10800304 	addi	r2,r2,12
80217120:	e0fffc17 	ldw	r3,-16(fp)
80217124:	18c00117 	ldw	r3,4(r3)
80217128:	10c00035 	stwio	r3,0(r2)
8021712c:	e0bff817 	ldw	r2,-32(fp)
80217130:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80217134:	e0bff617 	ldw	r2,-40(fp)
80217138:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
8021713c:	e0bffc17 	ldw	r2,-16(fp)
80217140:	10c00417 	ldw	r3,16(r2)
80217144:	e0bff717 	ldw	r2,-36(fp)
80217148:	18bffc26 	beq	r3,r2,8021713c <__reset+0xfa1f713c>
      }
    }

    count--;
8021714c:	e0bff417 	ldw	r2,-48(fp)
80217150:	10bfffc4 	addi	r2,r2,-1
80217154:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
80217158:	e0bffc17 	ldw	r2,-16(fp)
8021715c:	10c00517 	ldw	r3,20(r2)
80217160:	e0bffd17 	ldw	r2,-12(fp)
80217164:	11000044 	addi	r4,r2,1
80217168:	e13ffd15 	stw	r4,-12(fp)
8021716c:	10800003 	ldbu	r2,0(r2)
80217170:	1009883a 	mov	r4,r2
80217174:	e0bffc17 	ldw	r2,-16(fp)
80217178:	10c5883a 	add	r2,r2,r3
8021717c:	10801704 	addi	r2,r2,92
80217180:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
80217184:	e0bffc17 	ldw	r2,-16(fp)
80217188:	e0fff717 	ldw	r3,-36(fp)
8021718c:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
80217190:	e0bff417 	ldw	r2,-48(fp)
80217194:	103fc21e 	bne	r2,zero,802170a0 <__reset+0xfa1f70a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80217198:	0005303a 	rdctl	r2,status
8021719c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
802171a0:	e0fffb17 	ldw	r3,-20(fp)
802171a4:	00bfff84 	movi	r2,-2
802171a8:	1884703a 	and	r2,r3,r2
802171ac:	1001703a 	wrctl	status,r2
  
  return context;
802171b0:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
802171b4:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
802171b8:	e0bffc17 	ldw	r2,-16(fp)
802171bc:	10800117 	ldw	r2,4(r2)
802171c0:	10c11014 	ori	r3,r2,1088
802171c4:	e0bffc17 	ldw	r2,-16(fp)
802171c8:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
802171cc:	e0bffc17 	ldw	r2,-16(fp)
802171d0:	10800017 	ldw	r2,0(r2)
802171d4:	10800304 	addi	r2,r2,12
802171d8:	e0fffc17 	ldw	r3,-16(fp)
802171dc:	18c00117 	ldw	r3,4(r3)
802171e0:	10c00035 	stwio	r3,0(r2)
802171e4:	e0bff817 	ldw	r2,-32(fp)
802171e8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
802171ec:	e0bffa17 	ldw	r2,-24(fp)
802171f0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
802171f4:	e0fffe17 	ldw	r3,-8(fp)
802171f8:	e0bff417 	ldw	r2,-48(fp)
802171fc:	1885c83a 	sub	r2,r3,r2
}
80217200:	e037883a 	mov	sp,fp
80217204:	dfc00117 	ldw	ra,4(sp)
80217208:	df000017 	ldw	fp,0(sp)
8021720c:	dec00204 	addi	sp,sp,8
80217210:	f800283a 	ret

80217214 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80217214:	defffe04 	addi	sp,sp,-8
80217218:	dfc00115 	stw	ra,4(sp)
8021721c:	df000015 	stw	fp,0(sp)
80217220:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80217224:	d0a00c17 	ldw	r2,-32720(gp)
80217228:	10000326 	beq	r2,zero,80217238 <alt_get_errno+0x24>
8021722c:	d0a00c17 	ldw	r2,-32720(gp)
80217230:	103ee83a 	callr	r2
80217234:	00000106 	br	8021723c <alt_get_errno+0x28>
80217238:	d0a02004 	addi	r2,gp,-32640
}
8021723c:	e037883a 	mov	sp,fp
80217240:	dfc00117 	ldw	ra,4(sp)
80217244:	df000017 	ldw	fp,0(sp)
80217248:	dec00204 	addi	sp,sp,8
8021724c:	f800283a 	ret

80217250 <alt_msgdma_write_standard_descriptor>:
 */
static int alt_msgdma_write_standard_descriptor (
    alt_u32 *csr_base, 
    alt_u32 *descriptor_base,
    alt_msgdma_standard_descriptor *descriptor)
{
80217250:	defffc04 	addi	sp,sp,-16
80217254:	df000315 	stw	fp,12(sp)
80217258:	df000304 	addi	fp,sp,12
8021725c:	e13ffd15 	stw	r4,-12(fp)
80217260:	e17ffe15 	stw	r5,-8(fp)
80217264:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
80217268:	e0bffd17 	ldw	r2,-12(fp)
8021726c:	10800037 	ldwio	r2,0(r2)
80217270:	1080010c 	andi	r2,r2,4
80217274:	10000226 	beq	r2,zero,80217280 <alt_msgdma_write_standard_descriptor+0x30>
        ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
        is non-blocking*/
        return -ENOSPC;
80217278:	00bff904 	movi	r2,-28
8021727c:	00001506 	br	802172d4 <alt_msgdma_write_standard_descriptor+0x84>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base, 
80217280:	e0bfff17 	ldw	r2,-4(fp)
80217284:	10800017 	ldw	r2,0(r2)
80217288:	1007883a 	mov	r3,r2
8021728c:	e0bffe17 	ldw	r2,-8(fp)
80217290:	10c00035 	stwio	r3,0(r2)
        (alt_u32)descriptor->read_address);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base, 
80217294:	e0bffe17 	ldw	r2,-8(fp)
80217298:	10800104 	addi	r2,r2,4
8021729c:	e0ffff17 	ldw	r3,-4(fp)
802172a0:	18c00117 	ldw	r3,4(r3)
802172a4:	10c00035 	stwio	r3,0(r2)
    (    alt_u32)descriptor->write_address);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base, 
802172a8:	e0bffe17 	ldw	r2,-8(fp)
802172ac:	10800204 	addi	r2,r2,8
802172b0:	e0ffff17 	ldw	r3,-4(fp)
802172b4:	18c00217 	ldw	r3,8(r3)
802172b8:	10c00035 	stwio	r3,0(r2)
        descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_STANDARD(descriptor_base, 
802172bc:	e0bffe17 	ldw	r2,-8(fp)
802172c0:	10800304 	addi	r2,r2,12
802172c4:	e0ffff17 	ldw	r3,-4(fp)
802172c8:	18c00317 	ldw	r3,12(r3)
802172cc:	10c00035 	stwio	r3,0(r2)
        descriptor->control);
        return 0;
802172d0:	0005883a 	mov	r2,zero
}
802172d4:	e037883a 	mov	sp,fp
802172d8:	df000017 	ldw	fp,0(sp)
802172dc:	dec00104 	addi	sp,sp,4
802172e0:	f800283a 	ret

802172e4 <alt_msgdma_write_extended_descriptor>:
 */
static int alt_msgdma_write_extended_descriptor (
    alt_u32 *csr_base, 
    alt_u32 *descriptor_base,
    alt_msgdma_extended_descriptor *descriptor)
{
802172e4:	defffc04 	addi	sp,sp,-16
802172e8:	df000315 	stw	fp,12(sp)
802172ec:	df000304 	addi	fp,sp,12
802172f0:	e13ffd15 	stw	r4,-12(fp)
802172f4:	e17ffe15 	stw	r5,-8(fp)
802172f8:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
802172fc:	e0bffd17 	ldw	r2,-12(fp)
80217300:	10800037 	ldwio	r2,0(r2)
80217304:	1080010c 	andi	r2,r2,4
80217308:	10000226 	beq	r2,zero,80217314 <alt_msgdma_write_extended_descriptor+0x30>
        ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
    is non-blocking*/
        return -ENOSPC;
8021730c:	00bff904 	movi	r2,-28
80217310:	00003b06 	br	80217400 <alt_msgdma_write_extended_descriptor+0x11c>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(
80217314:	e0bfff17 	ldw	r2,-4(fp)
80217318:	10800017 	ldw	r2,0(r2)
8021731c:	1007883a 	mov	r3,r2
80217320:	e0bffe17 	ldw	r2,-8(fp)
80217324:	10c00035 	stwio	r3,0(r2)
        descriptor_base, 
        (alt_u32)descriptor->read_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(
80217328:	e0bffe17 	ldw	r2,-8(fp)
8021732c:	10800104 	addi	r2,r2,4
80217330:	e0ffff17 	ldw	r3,-4(fp)
80217334:	18c00117 	ldw	r3,4(r3)
80217338:	10c00035 	stwio	r3,0(r2)
        descriptor_base, 
        (alt_u32)descriptor->write_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(
8021733c:	e0bffe17 	ldw	r2,-8(fp)
80217340:	10800204 	addi	r2,r2,8
80217344:	e0ffff17 	ldw	r3,-4(fp)
80217348:	18c00217 	ldw	r3,8(r3)
8021734c:	10c00035 	stwio	r3,0(r2)
        descriptor_base, 
        descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(
80217350:	e0bffe17 	ldw	r2,-8(fp)
80217354:	10800304 	addi	r2,r2,12
80217358:	e0ffff17 	ldw	r3,-4(fp)
8021735c:	18c0030b 	ldhu	r3,12(r3)
80217360:	18ffffcc 	andi	r3,r3,65535
80217364:	10c0002d 	sthio	r3,0(r2)
        descriptor_base, 
        descriptor->sequence_number);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(
80217368:	e0bffe17 	ldw	r2,-8(fp)
8021736c:	10800384 	addi	r2,r2,14
80217370:	e0ffff17 	ldw	r3,-4(fp)
80217374:	18c00383 	ldbu	r3,14(r3)
80217378:	18c03fcc 	andi	r3,r3,255
8021737c:	10c00025 	stbio	r3,0(r2)
        descriptor_base, 
        descriptor->read_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(
80217380:	e0bffe17 	ldw	r2,-8(fp)
80217384:	108003c4 	addi	r2,r2,15
80217388:	e0ffff17 	ldw	r3,-4(fp)
8021738c:	18c003c3 	ldbu	r3,15(r3)
80217390:	18c03fcc 	andi	r3,r3,255
80217394:	10c00025 	stbio	r3,0(r2)
        descriptor_base, 
        descriptor->write_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(
80217398:	e0bffe17 	ldw	r2,-8(fp)
8021739c:	10800404 	addi	r2,r2,16
802173a0:	e0ffff17 	ldw	r3,-4(fp)
802173a4:	18c0040b 	ldhu	r3,16(r3)
802173a8:	18ffffcc 	andi	r3,r3,65535
802173ac:	10c0002d 	sthio	r3,0(r2)
        descriptor_base, 
        descriptor->read_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(
802173b0:	e0bffe17 	ldw	r2,-8(fp)
802173b4:	10800484 	addi	r2,r2,18
802173b8:	e0ffff17 	ldw	r3,-4(fp)
802173bc:	18c0048b 	ldhu	r3,18(r3)
802173c0:	18ffffcc 	andi	r3,r3,65535
802173c4:	10c0002d 	sthio	r3,0(r2)
        descriptor_base, 
        descriptor->write_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base, 0);
802173c8:	e0bffe17 	ldw	r2,-8(fp)
802173cc:	10800504 	addi	r2,r2,20
802173d0:	0007883a 	mov	r3,zero
802173d4:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base, 0);
802173d8:	e0bffe17 	ldw	r2,-8(fp)
802173dc:	10800604 	addi	r2,r2,24
802173e0:	0007883a 	mov	r3,zero
802173e4:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(
802173e8:	e0bffe17 	ldw	r2,-8(fp)
802173ec:	10800704 	addi	r2,r2,28
802173f0:	e0ffff17 	ldw	r3,-4(fp)
802173f4:	18c00717 	ldw	r3,28(r3)
802173f8:	10c00035 	stwio	r3,0(r2)
        descriptor_base, 
        descriptor->control);
    return 0;
802173fc:	0005883a 	mov	r2,zero
}
80217400:	e037883a 	mov	sp,fp
80217404:	df000017 	ldw	fp,0(sp)
80217408:	dec00104 	addi	sp,sp,4
8021740c:	f800283a 	ret

80217410 <alt_msgdma_irq>:
 * alt_msgdma_irq()
 *
 * Interrupt handler for the Modular Scatter-Gather DMA controller.
 */
static void alt_msgdma_irq(void *context)
{
80217410:	defff804 	addi	sp,sp,-32
80217414:	dfc00715 	stw	ra,28(sp)
80217418:	df000615 	stw	fp,24(sp)
8021741c:	df000604 	addi	fp,sp,24
80217420:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev *dev = (alt_msgdma_dev *) context;
80217424:	e0bfff17 	ldw	r2,-4(fp)
80217428:	e0bffa15 	stw	r2,-24(fp)
    alt_irq_context cpu_sr;
    alt_u32 temporary_control;

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
8021742c:	e0bffa17 	ldw	r2,-24(fp)
80217430:	10801783 	ldbu	r2,94(r2)
80217434:	10803fcc 	andi	r2,r2,255
80217438:	10001126 	beq	r2,zero,80217480 <alt_msgdma_irq+0x70>
    {
        temporary_control = 
                IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
8021743c:	e0bffa17 	ldw	r2,-24(fp)
80217440:	10800617 	ldw	r2,24(r2)
80217444:	10800037 	ldwio	r2,0(r2)

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
    {
        temporary_control = 
80217448:	1007883a 	mov	r3,r2
8021744c:	00bffdc4 	movi	r2,-9
80217450:	1884703a 	and	r2,r3,r2
80217454:	e0bffb15 	stw	r2,-20(fp)
                IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
                & ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
80217458:	e0bffa17 	ldw	r2,-24(fp)
8021745c:	10800617 	ldw	r2,24(r2)
80217460:	e0fffb17 	ldw	r3,-20(fp)
80217464:	10c00035 	stwio	r3,0(r2)
                temporary_control);
        
        /* clear the IRQ status- W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base,
80217468:	e0bffa17 	ldw	r2,-24(fp)
8021746c:	10800617 	ldw	r2,24(r2)
80217470:	10800404 	addi	r2,r2,16
80217474:	00c00044 	movi	r3,1
80217478:	10c00035 	stwio	r3,0(r2)
8021747c:	00001106 	br	802174c4 <alt_msgdma_irq+0xb4>
                ALT_MSGDMA_PREFETCHER_STATUS_IRQ_SET_MASK);
    }
    else
    {
        temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
80217480:	e0bffa17 	ldw	r2,-24(fp)
80217484:	10800317 	ldw	r2,12(r2)
80217488:	10800104 	addi	r2,r2,4
8021748c:	10800037 	ldwio	r2,0(r2)
80217490:	1007883a 	mov	r3,r2
80217494:	00bffbc4 	movi	r2,-17
80217498:	1884703a 	and	r2,r3,r2
8021749c:	e0bffb15 	stw	r2,-20(fp)
                & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
802174a0:	e0bffa17 	ldw	r2,-24(fp)
802174a4:	10800317 	ldw	r2,12(r2)
802174a8:	10800104 	addi	r2,r2,4
802174ac:	e0fffb17 	ldw	r3,-20(fp)
802174b0:	10c00035 	stwio	r3,0(r2)
        /* clear the IRQ status */
        IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
802174b4:	e0bffa17 	ldw	r2,-24(fp)
802174b8:	10800317 	ldw	r2,12(r2)
802174bc:	00c08004 	movi	r3,512
802174c0:	10c00035 	stwio	r3,0(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
802174c4:	e0bffa17 	ldw	r2,-24(fp)
802174c8:	10800b17 	ldw	r2,44(r2)
802174cc:	10001226 	beq	r2,zero,80217518 <alt_msgdma_irq+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
802174d0:	0005303a 	rdctl	r2,status
802174d4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
802174d8:	e0fffd17 	ldw	r3,-12(fp)
802174dc:	00bfff84 	movi	r2,-2
802174e0:	1884703a 	and	r2,r3,r2
802174e4:	1001703a 	wrctl	status,r2
  
  return context;
802174e8:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
802174ec:	e0bffc15 	stw	r2,-16(fp)
        dev->callback (dev->callback_context);
802174f0:	e0bffa17 	ldw	r2,-24(fp)
802174f4:	10800b17 	ldw	r2,44(r2)
802174f8:	e0fffa17 	ldw	r3,-24(fp)
802174fc:	18c00c17 	ldw	r3,48(r3)
80217500:	1809883a 	mov	r4,r3
80217504:	103ee83a 	callr	r2
80217508:	e0bffc17 	ldw	r2,-16(fp)
8021750c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80217510:	e0bffe17 	ldw	r2,-8(fp)
80217514:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
80217518:	e0bffa17 	ldw	r2,-24(fp)
8021751c:	10801783 	ldbu	r2,94(r2)
80217520:	10803fcc 	andi	r2,r2,255
80217524:	10000a26 	beq	r2,zero,80217550 <alt_msgdma_irq+0x140>
    {
        temporary_control = 
                IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
80217528:	e0bffa17 	ldw	r2,-24(fp)
8021752c:	10800617 	ldw	r2,24(r2)
80217530:	10800037 	ldwio	r2,0(r2)
                | ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
80217534:	10800214 	ori	r2,r2,8
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
    {
        temporary_control = 
80217538:	e0bffb15 	stw	r2,-20(fp)
                IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
                | ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
8021753c:	e0bffa17 	ldw	r2,-24(fp)
80217540:	10800617 	ldw	r2,24(r2)
80217544:	e0fffb17 	ldw	r3,-20(fp)
80217548:	10c00035 	stwio	r3,0(r2)
                | (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
    }

    return;
8021754c:	00000c06 	br	80217580 <alt_msgdma_irq+0x170>
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
                temporary_control);
    }
    else
    {
        temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
80217550:	e0bffa17 	ldw	r2,-24(fp)
80217554:	10800317 	ldw	r2,12(r2)
80217558:	10800104 	addi	r2,r2,4
8021755c:	10800037 	ldwio	r2,0(r2)
                | (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
80217560:	10800414 	ori	r2,r2,16
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
                temporary_control);
    }
    else
    {
        temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
80217564:	e0bffb15 	stw	r2,-20(fp)
                | (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
80217568:	e0bffa17 	ldw	r2,-24(fp)
8021756c:	10800317 	ldw	r2,12(r2)
80217570:	10800104 	addi	r2,r2,4
80217574:	e0fffb17 	ldw	r3,-20(fp)
80217578:	10c00035 	stwio	r3,0(r2)
    }

    return;
8021757c:	0001883a 	nop
}
80217580:	e037883a 	mov	sp,fp
80217584:	dfc00117 	ldw	ra,4(sp)
80217588:	df000017 	ldw	fp,0(sp)
8021758c:	dec00204 	addi	sp,sp,8
80217590:	f800283a 	ret

80217594 <alt_msgdma_construct_standard_descriptor>:
    alt_msgdma_standard_descriptor *descriptor,
    alt_u32 *read_address, 
    alt_u32 *write_address, 
    alt_u32 length, 
    alt_u32 control)
{
80217594:	defffb04 	addi	sp,sp,-20
80217598:	df000415 	stw	fp,16(sp)
8021759c:	df000404 	addi	fp,sp,16
802175a0:	e13ffc15 	stw	r4,-16(fp)
802175a4:	e17ffd15 	stw	r5,-12(fp)
802175a8:	e1bffe15 	stw	r6,-8(fp)
802175ac:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
802175b0:	e0bffc17 	ldw	r2,-16(fp)
802175b4:	10c01217 	ldw	r3,72(r2)
802175b8:	e0800117 	ldw	r2,4(fp)
802175bc:	18800436 	bltu	r3,r2,802175d0 <alt_msgdma_construct_standard_descriptor+0x3c>
       dev->enhanced_features != 0
802175c0:	e0bffc17 	ldw	r2,-16(fp)
802175c4:	10801703 	ldbu	r2,92(r2)
    alt_u32 *read_address, 
    alt_u32 *write_address, 
    alt_u32 length, 
    alt_u32 control)
{
    if(dev->max_byte < length ||
802175c8:	10803fcc 	andi	r2,r2,255
802175cc:	10000226 	beq	r2,zero,802175d8 <alt_msgdma_construct_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
802175d0:	00bffa84 	movi	r2,-22
802175d4:	00000e06 	br	80217610 <alt_msgdma_construct_standard_descriptor+0x7c>
    }
    descriptor->read_address = read_address;
802175d8:	e0bffd17 	ldw	r2,-12(fp)
802175dc:	e0fffe17 	ldw	r3,-8(fp)
802175e0:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
802175e4:	e0bffd17 	ldw	r2,-12(fp)
802175e8:	e0ffff17 	ldw	r3,-4(fp)
802175ec:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
802175f0:	e0bffd17 	ldw	r2,-12(fp)
802175f4:	e0c00117 	ldw	r3,4(fp)
802175f8:	10c00215 	stw	r3,8(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
802175fc:	e0800217 	ldw	r2,8(fp)
80217600:	10e00034 	orhi	r3,r2,32768
80217604:	e0bffd17 	ldw	r2,-12(fp)
80217608:	10c00315 	stw	r3,12(r2)
    
    return 0;
8021760c:	0005883a 	mov	r2,zero
}
80217610:	e037883a 	mov	sp,fp
80217614:	df000017 	ldw	fp,0(sp)
80217618:	dec00104 	addi	sp,sp,4
8021761c:	f800283a 	ret

80217620 <alt_msgdma_construct_extended_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
80217620:	defff604 	addi	sp,sp,-40
80217624:	df000915 	stw	fp,36(sp)
80217628:	df000904 	addi	fp,sp,36
8021762c:	e13ff715 	stw	r4,-36(fp)
80217630:	e17ff815 	stw	r5,-32(fp)
80217634:	e1bff915 	stw	r6,-28(fp)
80217638:	e1fffa15 	stw	r7,-24(fp)
8021763c:	e1800317 	ldw	r6,12(fp)
80217640:	e1400417 	ldw	r5,16(fp)
80217644:	e1000517 	ldw	r4,20(fp)
80217648:	e0c00617 	ldw	r3,24(fp)
8021764c:	e0800717 	ldw	r2,28(fp)
80217650:	e1bffb0d 	sth	r6,-20(fp)
80217654:	e17ffc05 	stb	r5,-16(fp)
80217658:	e13ffd05 	stb	r4,-12(fp)
8021765c:	e0fffe0d 	sth	r3,-8(fp)
80217660:	e0bfff0d 	sth	r2,-4(fp)
    if(dev->max_byte < length ||
80217664:	e0bff717 	ldw	r2,-36(fp)
80217668:	10c01217 	ldw	r3,72(r2)
8021766c:	e0800117 	ldw	r2,4(fp)
80217670:	18801936 	bltu	r3,r2,802176d8 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
80217674:	e13ff717 	ldw	r4,-36(fp)
80217678:	20801317 	ldw	r2,76(r4)
8021767c:	20c01417 	ldw	r3,80(r4)
80217680:	e13ffe0b 	ldhu	r4,-8(fp)
80217684:	213fffcc 	andi	r4,r4,65535
80217688:	2015883a 	mov	r10,r4
8021768c:	0017883a 	mov	r11,zero
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
    if(dev->max_byte < length ||
80217690:	1ac01136 	bltu	r3,r11,802176d8 <alt_msgdma_construct_extended_descriptor+0xb8>
80217694:	58c0011e 	bne	r11,r3,8021769c <alt_msgdma_construct_extended_descriptor+0x7c>
80217698:	12800f36 	bltu	r2,r10,802176d8 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
8021769c:	e13ff717 	ldw	r4,-36(fp)
802176a0:	20801317 	ldw	r2,76(r4)
802176a4:	20c01417 	ldw	r3,80(r4)
802176a8:	e13fff0b 	ldhu	r4,-4(fp)
802176ac:	213fffcc 	andi	r4,r4,65535
802176b0:	2011883a 	mov	r8,r4
802176b4:	0013883a 	mov	r9,zero
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
802176b8:	1a400736 	bltu	r3,r9,802176d8 <alt_msgdma_construct_extended_descriptor+0xb8>
802176bc:	48c0011e 	bne	r9,r3,802176c4 <alt_msgdma_construct_extended_descriptor+0xa4>
802176c0:	12000536 	bltu	r2,r8,802176d8 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
802176c4:	e0bff717 	ldw	r2,-36(fp)
802176c8:	10801703 	ldbu	r2,92(r2)
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
802176cc:	10803fcc 	andi	r2,r2,255
802176d0:	10800060 	cmpeqi	r2,r2,1
802176d4:	1000021e 	bne	r2,zero,802176e0 <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
802176d8:	00bffa84 	movi	r2,-22
802176dc:	00002106 	br	80217764 <alt_msgdma_construct_extended_descriptor+0x144>
    }
    
    descriptor->read_address_low = read_address;
802176e0:	e0bff817 	ldw	r2,-32(fp)
802176e4:	e0fff917 	ldw	r3,-28(fp)
802176e8:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_low = write_address;
802176ec:	e0bff817 	ldw	r2,-32(fp)
802176f0:	e0fffa17 	ldw	r3,-24(fp)
802176f4:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
802176f8:	e0bff817 	ldw	r2,-32(fp)
802176fc:	e0c00117 	ldw	r3,4(fp)
80217700:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
80217704:	e0bff817 	ldw	r2,-32(fp)
80217708:	e0fffb0b 	ldhu	r3,-20(fp)
8021770c:	10c0030d 	sth	r3,12(r2)
    descriptor->read_burst_count = read_burst_count;
80217710:	e0bff817 	ldw	r2,-32(fp)
80217714:	e0fffc03 	ldbu	r3,-16(fp)
80217718:	10c00385 	stb	r3,14(r2)
    descriptor->write_burst_count = write_burst_count;
8021771c:	e0bff817 	ldw	r2,-32(fp)
80217720:	e0fffd03 	ldbu	r3,-12(fp)
80217724:	10c003c5 	stb	r3,15(r2)
    descriptor->read_stride = read_stride;
80217728:	e0bff817 	ldw	r2,-32(fp)
8021772c:	e0fffe0b 	ldhu	r3,-8(fp)
80217730:	10c0040d 	sth	r3,16(r2)
    descriptor->write_stride = write_stride;
80217734:	e0bff817 	ldw	r2,-32(fp)
80217738:	e0ffff0b 	ldhu	r3,-4(fp)
8021773c:	10c0048d 	sth	r3,18(r2)
    descriptor->read_address_high = NULL;
80217740:	e0bff817 	ldw	r2,-32(fp)
80217744:	10000515 	stw	zero,20(r2)
    descriptor->write_address_high = NULL;
80217748:	e0bff817 	ldw	r2,-32(fp)
8021774c:	10000615 	stw	zero,24(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
80217750:	e0800217 	ldw	r2,8(fp)
80217754:	10e00034 	orhi	r3,r2,32768
80217758:	e0bff817 	ldw	r2,-32(fp)
8021775c:	10c00715 	stw	r3,28(r2)

  return 0 ;
80217760:	0005883a 	mov	r2,zero

}
80217764:	e037883a 	mov	sp,fp
80217768:	df000017 	ldw	fp,0(sp)
8021776c:	dec00104 	addi	sp,sp,4
80217770:	f800283a 	ret

80217774 <alt_msgdma_descriptor_async_transfer>:
 */
static int alt_msgdma_descriptor_async_transfer (
    alt_msgdma_dev *dev, 
    alt_msgdma_standard_descriptor *standard_desc, 
    alt_msgdma_extended_descriptor *extended_desc)
{
80217774:	defff004 	addi	sp,sp,-64
80217778:	dfc00f15 	stw	ra,60(sp)
8021777c:	df000e15 	stw	fp,56(sp)
80217780:	df000e04 	addi	fp,sp,56
80217784:	e13ffd15 	stw	r4,-12(fp)
80217788:	e17ffe15 	stw	r5,-8(fp)
8021778c:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control = 0;
80217790:	e03ff315 	stw	zero,-52(fp)
    alt_irq_context context = 0;
80217794:	e03ff415 	stw	zero,-48(fp)
    alt_u16 counter = 0;
80217798:	e03ff20d 	sth	zero,-56(fp)
    alt_u32 fifo_read_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8021779c:	e0bffd17 	ldw	r2,-12(fp)
802177a0:	10800317 	ldw	r2,12(r2)
802177a4:	10800204 	addi	r2,r2,8
802177a8:	10800037 	ldwio	r2,0(r2)
    alt_msgdma_extended_descriptor *extended_desc)
{
    alt_u32 control = 0;
    alt_irq_context context = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
802177ac:	10bfffcc 	andi	r2,r2,65535
802177b0:	e0bff515 	stw	r2,-44(fp)
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
802177b4:	e0bffd17 	ldw	r2,-12(fp)
802177b8:	10800317 	ldw	r2,12(r2)
802177bc:	10800204 	addi	r2,r2,8
802177c0:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
802177c4:	1004d43a 	srli	r2,r2,16
802177c8:	e0bff615 	stw	r2,-40(fp)
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

    /* Return with error immediately if one of read/write buffer is full */
    if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
802177cc:	e0bffd17 	ldw	r2,-12(fp)
802177d0:	10800917 	ldw	r2,36(r2)
802177d4:	e0fff617 	ldw	r3,-40(fp)
802177d8:	1880042e 	bgeu	r3,r2,802177ec <alt_msgdma_descriptor_async_transfer+0x78>
        (dev->descriptor_fifo_depth <= fifo_read_fill_level))
802177dc:	e0bffd17 	ldw	r2,-12(fp)
802177e0:	10800917 	ldw	r2,36(r2)
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

    /* Return with error immediately if one of read/write buffer is full */
    if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
802177e4:	e0fff517 	ldw	r3,-44(fp)
802177e8:	18800236 	bltu	r3,r2,802177f4 <alt_msgdma_descriptor_async_transfer+0x80>
        (dev->descriptor_fifo_depth <= fifo_read_fill_level))
    {
        /*at least one write or read FIFO descriptor buffer is full,
        returning so that this function is non-blocking*/
        return -ENOSPC;
802177ec:	00bff904 	movi	r2,-28
802177f0:	00008f06 	br	80217a30 <alt_msgdma_descriptor_async_transfer+0x2bc>
    ALT_SEM_PEND (dev->regs_lock, 0);
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
802177f4:	00800804 	movi	r2,32
802177f8:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
802177fc:	0005303a 	rdctl	r2,status
80217800:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80217804:	e0fff717 	ldw	r3,-36(fp)
80217808:	00bfff84 	movi	r2,-2
8021780c:	1884703a 	and	r2,r3,r2
80217810:	1001703a 	wrctl	status,r2
  
  return context;
80217814:	e0bff717 	ldw	r2,-36(fp)
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
80217818:	e0bff415 	stw	r2,-48(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
8021781c:	e0bffd17 	ldw	r2,-12(fp)
80217820:	10800317 	ldw	r2,12(r2)
80217824:	10800104 	addi	r2,r2,4
80217828:	e0fff317 	ldw	r3,-52(fp)
8021782c:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
80217830:	e0bffd17 	ldw	r2,-12(fp)
80217834:	10800317 	ldw	r2,12(r2)
80217838:	e0fffd17 	ldw	r3,-12(fp)
8021783c:	18c00317 	ldw	r3,12(r3)
80217840:	18c00037 	ldwio	r3,0(r3)
80217844:	10c00035 	stwio	r3,0(r2)
80217848:	e0bff417 	ldw	r2,-48(fp)
8021784c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80217850:	e0bffc17 	ldw	r2,-16(fp)
80217854:	1001703a 	wrctl	status,r2
        dev->csr_base, 
        IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
80217858:	e0bffe17 	ldw	r2,-8(fp)
8021785c:	10001a26 	beq	r2,zero,802178c8 <alt_msgdma_descriptor_async_transfer+0x154>
80217860:	e0bfff17 	ldw	r2,-4(fp)
80217864:	1000181e 	bne	r2,zero,802178c8 <alt_msgdma_descriptor_async_transfer+0x154>
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
      write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
80217868:	00000d06 	br	802178a0 <alt_msgdma_descriptor_async_transfer+0x12c>
        dev->csr_base, dev->descriptor_base, standard_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
8021786c:	01000044 	movi	r4,1
80217870:	02151180 	call	80215118 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
80217874:	e0bff20b 	ldhu	r2,-56(fp)
80217878:	1084e230 	cmpltui	r2,r2,5000
8021787c:	1000051e 	bne	r2,zero,80217894 <alt_msgdma_descriptor_async_transfer+0x120>
            {
                alt_printf("time out after 5 msec while waiting" 
80217880:	012008b4 	movhi	r4,32802
80217884:	212d6b04 	addi	r4,r4,-19028
80217888:	0219b6c0 	call	80219b6c <alt_printf>
                * registers semaphore so that other threads can access the 
                * registers.
                */
                ALT_SEM_POST (dev->regs_lock);
                
                return -ETIME;
8021788c:	00bff084 	movi	r2,-62
80217890:	00006706 	br	80217a30 <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
80217894:	e0bff20b 	ldhu	r2,-56(fp)
80217898:	10800044 	addi	r2,r2,1
8021789c:	e0bff20d 	sth	r2,-56(fp)

    if (NULL != standard_desc && NULL == extended_desc)
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
      write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
802178a0:	e0bffd17 	ldw	r2,-12(fp)
802178a4:	10c00317 	ldw	r3,12(r2)
802178a8:	e0bffd17 	ldw	r2,-12(fp)
802178ac:	10800417 	ldw	r2,16(r2)
802178b0:	e1bffe17 	ldw	r6,-8(fp)
802178b4:	100b883a 	mov	r5,r2
802178b8:	1809883a 	mov	r4,r3
802178bc:	02172500 	call	80217250 <alt_msgdma_write_standard_descriptor>
802178c0:	103fea1e 	bne	r2,zero,8021786c <__reset+0xfa1f786c>
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
        dev->csr_base, 
        IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
802178c4:	00001f06 	br	80217944 <alt_msgdma_descriptor_async_transfer+0x1d0>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
802178c8:	e0bffe17 	ldw	r2,-8(fp)
802178cc:	10001b1e 	bne	r2,zero,8021793c <alt_msgdma_descriptor_async_transfer+0x1c8>
802178d0:	e0bfff17 	ldw	r2,-4(fp)
802178d4:	10001926 	beq	r2,zero,8021793c <alt_msgdma_descriptor_async_transfer+0x1c8>
    {
        counter = 0; /* reset counter */
802178d8:	e03ff20d 	sth	zero,-56(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
      write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
802178dc:	00000d06 	br	80217914 <alt_msgdma_descriptor_async_transfer+0x1a0>
        dev->csr_base, 
        dev->descriptor_base, 
        extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
802178e0:	01000044 	movi	r4,1
802178e4:	02151180 	call	80215118 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
802178e8:	e0bff20b 	ldhu	r2,-56(fp)
802178ec:	1084e230 	cmpltui	r2,r2,5000
802178f0:	1000051e 	bne	r2,zero,80217908 <alt_msgdma_descriptor_async_transfer+0x194>
            {
                alt_printf("time out after 5 msec while waiting free FIFO buffer" 
802178f4:	012008b4 	movhi	r4,32802
802178f8:	212d8104 	addi	r4,r4,-18940
802178fc:	0219b6c0 	call	80219b6c <alt_printf>
                * registers semaphore so that other threads can access the 
                * registers.
                */
                ALT_SEM_POST (dev->regs_lock);
                
                return -ETIME;
80217900:	00bff084 	movi	r2,-62
80217904:	00004a06 	br	80217a30 <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
80217908:	e0bff20b 	ldhu	r2,-56(fp)
8021790c:	10800044 	addi	r2,r2,1
80217910:	e0bff20d 	sth	r2,-56(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
      write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
80217914:	e0bffd17 	ldw	r2,-12(fp)
80217918:	10c00317 	ldw	r3,12(r2)
8021791c:	e0bffd17 	ldw	r2,-12(fp)
80217920:	10800417 	ldw	r2,16(r2)
80217924:	e1bfff17 	ldw	r6,-4(fp)
80217928:	100b883a 	mov	r5,r2
8021792c:	1809883a 	mov	r4,r3
80217930:	02172e40 	call	802172e4 <alt_msgdma_write_extended_descriptor>
80217934:	103fea1e 	bne	r2,zero,802178e0 <__reset+0xfa1f78e0>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
80217938:	00000206 	br	80217944 <alt_msgdma_descriptor_async_transfer+0x1d0>
        * semaphore so that other threads can access the registers.
        */
        ALT_SEM_POST (dev->regs_lock);
        
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
8021793c:	00bfffc4 	movi	r2,-1
80217940:	00003b06 	br	80217a30 <alt_msgdma_descriptor_async_transfer+0x2bc>
    * If a callback routine has been previously registered which will be
    * called from the msgdma ISR. Set up controller to:
    *  - Run
    *  - Stop on an error with any particular descriptor
    */
    if(dev->callback)
80217944:	e0bffd17 	ldw	r2,-12(fp)
80217948:	10800b17 	ldw	r2,44(r2)
8021794c:	10001c26 	beq	r2,zero,802179c0 <alt_msgdma_descriptor_async_transfer+0x24c>
    {

        control |= (dev->control |
80217950:	e0bffd17 	ldw	r2,-12(fp)
80217954:	10c00d17 	ldw	r3,52(r2)
80217958:	e0bff317 	ldw	r2,-52(fp)
8021795c:	1884b03a 	or	r2,r3,r2
80217960:	10800514 	ori	r2,r2,20
80217964:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
                    ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
80217968:	e0fff317 	ldw	r3,-52(fp)
8021796c:	00bff7c4 	movi	r2,-33
80217970:	1884703a 	and	r2,r3,r2
80217974:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80217978:	0005303a 	rdctl	r2,status
8021797c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80217980:	e0fffa17 	ldw	r3,-24(fp)
80217984:	00bfff84 	movi	r2,-2
80217988:	1884703a 	and	r2,r3,r2
8021798c:	1001703a 	wrctl	status,r2
  
  return context;
80217990:	e0bffa17 	ldw	r2,-24(fp)
    /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
80217994:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
80217998:	e0bffd17 	ldw	r2,-12(fp)
8021799c:	10800317 	ldw	r2,12(r2)
802179a0:	10800104 	addi	r2,r2,4
802179a4:	e0fff317 	ldw	r3,-52(fp)
802179a8:	10c00035 	stwio	r3,0(r2)
802179ac:	e0bff417 	ldw	r2,-48(fp)
802179b0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
802179b4:	e0bff817 	ldw	r2,-32(fp)
802179b8:	1001703a 	wrctl	status,r2
802179bc:	00001b06 	br	80217a2c <alt_msgdma_descriptor_async_transfer+0x2b8>
    *   - Stop on an error with any particular descriptor
    *   - Disable interrupt generation
    */
    else
    {
        control |= (dev->control |
802179c0:	e0bffd17 	ldw	r2,-12(fp)
802179c4:	10c00d17 	ldw	r3,52(r2)
802179c8:	e0bff317 	ldw	r2,-52(fp)
802179cc:	1884b03a 	or	r2,r3,r2
802179d0:	10800114 	ori	r2,r2,4
802179d4:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK );
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
802179d8:	e0fff317 	ldw	r3,-52(fp)
802179dc:	00bff3c4 	movi	r2,-49
802179e0:	1884703a 	and	r2,r3,r2
802179e4:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
802179e8:	0005303a 	rdctl	r2,status
802179ec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
802179f0:	e0fffb17 	ldw	r3,-20(fp)
802179f4:	00bfff84 	movi	r2,-2
802179f8:	1884703a 	and	r2,r3,r2
802179fc:	1001703a 	wrctl	status,r2
  
  return context;
80217a00:	e0bffb17 	ldw	r2,-20(fp)
                   (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all();
80217a04:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
80217a08:	e0bffd17 	ldw	r2,-12(fp)
80217a0c:	10800317 	ldw	r2,12(r2)
80217a10:	10800104 	addi	r2,r2,4
80217a14:	e0fff317 	ldw	r3,-52(fp)
80217a18:	10c00035 	stwio	r3,0(r2)
80217a1c:	e0bff417 	ldw	r2,-48(fp)
80217a20:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80217a24:	e0bff917 	ldw	r2,-28(fp)
80217a28:	1001703a 	wrctl	status,r2
     * Now that access to the registers is complete, release the registers
     * semaphore so that other threads can access the registers.
     */
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
80217a2c:	0005883a 	mov	r2,zero
}
80217a30:	e037883a 	mov	sp,fp
80217a34:	dfc00117 	ldw	ra,4(sp)
80217a38:	df000017 	ldw	fp,0(sp)
80217a3c:	dec00204 	addi	sp,sp,8
80217a40:	f800283a 	ret

80217a44 <alt_msgdma_descriptor_sync_transfer>:
 */
static int alt_msgdma_descriptor_sync_transfer (
    alt_msgdma_dev *dev, 
    alt_msgdma_standard_descriptor *standard_desc, 
    alt_msgdma_extended_descriptor *extended_desc)
{
80217a44:	defff004 	addi	sp,sp,-64
80217a48:	dfc00f15 	stw	ra,60(sp)
80217a4c:	df000e15 	stw	fp,56(sp)
80217a50:	df000e04 	addi	fp,sp,56
80217a54:	e13ffd15 	stw	r4,-12(fp)
80217a58:	e17ffe15 	stw	r5,-8(fp)
80217a5c:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control=0;
80217a60:	e03ff615 	stw	zero,-40(fp)
    alt_irq_context context=0;
80217a64:	e03ff715 	stw	zero,-36(fp)
    alt_u32 csr_status = 0;
80217a68:	e03ff215 	stw	zero,-56(fp)
    alt_u16 counter = 0;
80217a6c:	e03ff30d 	sth	zero,-52(fp)
    alt_u32 fifo_read_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
80217a70:	e0bffd17 	ldw	r2,-12(fp)
80217a74:	10800317 	ldw	r2,12(r2)
80217a78:	10800204 	addi	r2,r2,8
80217a7c:	10800037 	ldwio	r2,0(r2)
{
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
80217a80:	10bfffcc 	andi	r2,r2,65535
80217a84:	e0bff415 	stw	r2,-48(fp)
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
80217a88:	e0bffd17 	ldw	r2,-12(fp)
80217a8c:	10800317 	ldw	r2,12(r2)
80217a90:	10800204 	addi	r2,r2,8
80217a94:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
80217a98:	1004d43a 	srli	r2,r2,16
80217a9c:	e0bff515 	stw	r2,-44(fp)
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
    alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK | 
80217aa0:	00807804 	movi	r2,480
80217aa4:	e0bff815 	stw	r2,-32(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
80217aa8:	00001906 	br	80217b10 <alt_msgdma_descriptor_sync_transfer+0xcc>
        (dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
80217aac:	01000044 	movi	r4,1
80217ab0:	02151180 	call	80215118 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
80217ab4:	e0bff30b 	ldhu	r2,-52(fp)
80217ab8:	1084e230 	cmpltui	r2,r2,5000
80217abc:	1000051e 	bne	r2,zero,80217ad4 <alt_msgdma_descriptor_sync_transfer+0x90>
        {
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
80217ac0:	012008b4 	movhi	r4,32802
80217ac4:	212d9704 	addi	r4,r4,-18852
80217ac8:	0219b6c0 	call	80219b6c <alt_printf>
                " for storing descriptor\n");
            return -ETIME;
80217acc:	00bff084 	movi	r2,-62
80217ad0:	0000b506 	br	80217da8 <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;  
80217ad4:	e0bff30b 	ldhu	r2,-52(fp)
80217ad8:	10800044 	addi	r2,r2,1
80217adc:	e0bff30d 	sth	r2,-52(fp)
        fifo_read_fill_level = (
            IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
80217ae0:	e0bffd17 	ldw	r2,-12(fp)
80217ae4:	10800317 	ldw	r2,12(r2)
80217ae8:	10800204 	addi	r2,r2,8
80217aec:	10800037 	ldwio	r2,0(r2)
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
                " for storing descriptor\n");
            return -ETIME;
        }
        counter++;  
        fifo_read_fill_level = (
80217af0:	10bfffcc 	andi	r2,r2,65535
80217af4:	e0bff415 	stw	r2,-48(fp)
            IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
            ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
            ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
            IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
80217af8:	e0bffd17 	ldw	r2,-12(fp)
80217afc:	10800317 	ldw	r2,12(r2)
80217b00:	10800204 	addi	r2,r2,8
80217b04:	10800037 	ldwio	r2,0(r2)
        counter++;  
        fifo_read_fill_level = (
            IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
            ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
            ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
80217b08:	1004d43a 	srli	r2,r2,16
80217b0c:	e0bff515 	stw	r2,-44(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
80217b10:	e0bffd17 	ldw	r2,-12(fp)
80217b14:	10800917 	ldw	r2,36(r2)
80217b18:	e0fff517 	ldw	r3,-44(fp)
80217b1c:	18bfe32e 	bgeu	r3,r2,80217aac <__reset+0xfa1f7aac>
        (dev->descriptor_fifo_depth <= fifo_read_fill_level))
80217b20:	e0bffd17 	ldw	r2,-12(fp)
80217b24:	10800917 	ldw	r2,36(r2)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
80217b28:	e0fff417 	ldw	r3,-48(fp)
80217b2c:	18bfdf2e 	bgeu	r3,r2,80217aac <__reset+0xfa1f7aac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80217b30:	0005303a 	rdctl	r2,status
80217b34:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80217b38:	e0fffc17 	ldw	r3,-16(fp)
80217b3c:	00bfff84 	movi	r2,-2
80217b40:	1884703a 	and	r2,r3,r2
80217b44:	1001703a 	wrctl	status,r2
  
  return context;
80217b48:	e0bffc17 	ldw	r2,-16(fp)
    ALT_SEM_PEND (dev->regs_lock, 0);
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
80217b4c:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
80217b50:	e0bffd17 	ldw	r2,-12(fp)
80217b54:	10800317 	ldw	r2,12(r2)
80217b58:	10800104 	addi	r2,r2,4
80217b5c:	00c00804 	movi	r3,32
80217b60:	10c00035 	stwio	r3,0(r2)
        ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
80217b64:	e0bffd17 	ldw	r2,-12(fp)
80217b68:	10800317 	ldw	r2,12(r2)
80217b6c:	e0fffd17 	ldw	r3,-12(fp)
80217b70:	18c00317 	ldw	r3,12(r3)
80217b74:	18c00037 	ldwio	r3,0(r3)
80217b78:	10c00035 	stwio	r3,0(r2)
        dev->csr_base, 
        IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
80217b7c:	e0bffe17 	ldw	r2,-8(fp)
80217b80:	10001b26 	beq	r2,zero,80217bf0 <alt_msgdma_descriptor_sync_transfer+0x1ac>
80217b84:	e0bfff17 	ldw	r2,-4(fp)
80217b88:	1000191e 	bne	r2,zero,80217bf0 <alt_msgdma_descriptor_sync_transfer+0x1ac>
    {
        counter = 0; /* reset counter */
80217b8c:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
          write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
80217b90:	00000d06 	br	80217bc8 <alt_msgdma_descriptor_sync_transfer+0x184>
            dev->csr_base, dev->descriptor_base, standard_desc))
        {     
            alt_busy_sleep(1); /* delay 1us */
80217b94:	01000044 	movi	r4,1
80217b98:	02151180 	call	80215118 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
80217b9c:	e0bff30b 	ldhu	r2,-52(fp)
80217ba0:	1084e230 	cmpltui	r2,r2,5000
80217ba4:	1000051e 	bne	r2,zero,80217bbc <alt_msgdma_descriptor_sync_transfer+0x178>
            {
                alt_printf("time out after 5 msec while writing standard" 
80217ba8:	012008b4 	movhi	r4,32802
80217bac:	212dab04 	addi	r4,r4,-18772
80217bb0:	0219b6c0 	call	80219b6c <alt_printf>
                * registers semaphore so that other threads can access the 
                * registers.
                */
                ALT_SEM_POST (dev->regs_lock);
                
                return -ETIME;
80217bb4:	00bff084 	movi	r2,-62
80217bb8:	00007b06 	br	80217da8 <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;    
80217bbc:	e0bff30b 	ldhu	r2,-52(fp)
80217bc0:	10800044 	addi	r2,r2,1
80217bc4:	e0bff30d 	sth	r2,-52(fp)
    if (NULL != standard_desc && NULL == extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
          write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
80217bc8:	e0bffd17 	ldw	r2,-12(fp)
80217bcc:	10c00317 	ldw	r3,12(r2)
80217bd0:	e0bffd17 	ldw	r2,-12(fp)
80217bd4:	10800417 	ldw	r2,16(r2)
80217bd8:	e1bffe17 	ldw	r6,-8(fp)
80217bdc:	100b883a 	mov	r5,r2
80217be0:	1809883a 	mov	r4,r3
80217be4:	02172500 	call	80217250 <alt_msgdma_write_standard_descriptor>
80217be8:	103fea1e 	bne	r2,zero,80217b94 <__reset+0xfa1f7b94>
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
        dev->csr_base, 
        IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
80217bec:	00001f06 	br	80217c6c <alt_msgdma_descriptor_sync_transfer+0x228>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
80217bf0:	e0bffe17 	ldw	r2,-8(fp)
80217bf4:	10001b1e 	bne	r2,zero,80217c64 <alt_msgdma_descriptor_sync_transfer+0x220>
80217bf8:	e0bfff17 	ldw	r2,-4(fp)
80217bfc:	10001926 	beq	r2,zero,80217c64 <alt_msgdma_descriptor_sync_transfer+0x220>
    {
        counter = 0; /* reset counter */
80217c00:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
          write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
80217c04:	00000d06 	br	80217c3c <alt_msgdma_descriptor_sync_transfer+0x1f8>
            dev->csr_base, dev->descriptor_base, extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
80217c08:	01000044 	movi	r4,1
80217c0c:	02151180 	call	80215118 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
80217c10:	e0bff30b 	ldhu	r2,-52(fp)
80217c14:	1084e230 	cmpltui	r2,r2,5000
80217c18:	1000051e 	bne	r2,zero,80217c30 <alt_msgdma_descriptor_sync_transfer+0x1ec>
            {
                alt_printf("time out after 5 msec while writing extended" 
80217c1c:	012008b4 	movhi	r4,32802
80217c20:	212dbc04 	addi	r4,r4,-18704
80217c24:	0219b6c0 	call	80219b6c <alt_printf>
                * registers semaphore so that other threads can access the 
                * registers.
                */
                ALT_SEM_POST (dev->regs_lock);
                
                return -ETIME;
80217c28:	00bff084 	movi	r2,-62
80217c2c:	00005e06 	br	80217da8 <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;
80217c30:	e0bff30b 	ldhu	r2,-52(fp)
80217c34:	10800044 	addi	r2,r2,1
80217c38:	e0bff30d 	sth	r2,-52(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
          write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
80217c3c:	e0bffd17 	ldw	r2,-12(fp)
80217c40:	10c00317 	ldw	r3,12(r2)
80217c44:	e0bffd17 	ldw	r2,-12(fp)
80217c48:	10800417 	ldw	r2,16(r2)
80217c4c:	e1bfff17 	ldw	r6,-4(fp)
80217c50:	100b883a 	mov	r5,r2
80217c54:	1809883a 	mov	r4,r3
80217c58:	02172e40 	call	802172e4 <alt_msgdma_write_extended_descriptor>
80217c5c:	103fea1e 	bne	r2,zero,80217c08 <__reset+0xfa1f7c08>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
80217c60:	00000206 	br	80217c6c <alt_msgdma_descriptor_sync_transfer+0x228>
        * semaphore so that other threads can access the registers.
        */
        ALT_SEM_POST (dev->regs_lock);
        
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
80217c64:	00bfffc4 	movi	r2,-1
80217c68:	00004f06 	br	80217da8 <alt_msgdma_descriptor_sync_transfer+0x364>
    * Set up msgdma controller to:
    * - Disable interrupt generation
    * - Run once a valid descriptor is written to controller
    * - Stop on an error with any particular descriptor
    */
     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
80217c6c:	e0bffd17 	ldw	r2,-12(fp)
80217c70:	10800317 	ldw	r2,12(r2)
80217c74:	10800104 	addi	r2,r2,4
80217c78:	e0fffd17 	ldw	r3,-12(fp)
80217c7c:	19000d17 	ldw	r4,52(r3)
80217c80:	00fff2c4 	movi	r3,-53
80217c84:	20c6703a 	and	r3,r4,r3
80217c88:	18c00114 	ori	r3,r3,4
80217c8c:	10c00035 	stwio	r3,0(r2)
80217c90:	e0bff717 	ldw	r2,-36(fp)
80217c94:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80217c98:	e0bff917 	ldw	r2,-28(fp)
80217c9c:	1001703a 	wrctl	status,r2
        (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
        (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK)) ;
     
    alt_irq_enable_all(context);
     
    counter = 0; /* reset counter */ 
80217ca0:	e03ff30d 	sth	zero,-52(fp)
    
    csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
80217ca4:	e0bffd17 	ldw	r2,-12(fp)
80217ca8:	10800317 	ldw	r2,12(r2)
80217cac:	10800037 	ldwio	r2,0(r2)
80217cb0:	e0bff215 	stw	r2,-56(fp)
    
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
80217cb4:	00001106 	br	80217cfc <alt_msgdma_descriptor_sync_transfer+0x2b8>
    {
        alt_busy_sleep(1); /* delay 1us */
80217cb8:	01000044 	movi	r4,1
80217cbc:	02151180 	call	80215118 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
80217cc0:	e0bff30b 	ldhu	r2,-52(fp)
80217cc4:	1084e230 	cmpltui	r2,r2,5000
80217cc8:	1000051e 	bne	r2,zero,80217ce0 <alt_msgdma_descriptor_sync_transfer+0x29c>
        {
            alt_printf("time out after 5 msec while waiting for any pending" 
80217ccc:	012008b4 	movhi	r4,32802
80217cd0:	212dcd04 	addi	r4,r4,-18636
80217cd4:	0219b6c0 	call	80219b6c <alt_printf>
            * Now that access to the registers is complete, release the registers
            * semaphore so that other threads can access the registers.
            */
            ALT_SEM_POST (dev->regs_lock);
            
            return -ETIME;
80217cd8:	00bff084 	movi	r2,-62
80217cdc:	00003206 	br	80217da8 <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;
80217ce0:	e0bff30b 	ldhu	r2,-52(fp)
80217ce4:	10800044 	addi	r2,r2,1
80217ce8:	e0bff30d 	sth	r2,-52(fp)
        csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
80217cec:	e0bffd17 	ldw	r2,-12(fp)
80217cf0:	10800317 	ldw	r2,12(r2)
80217cf4:	10800037 	ldwio	r2,0(r2)
80217cf8:	e0bff215 	stw	r2,-56(fp)
    
    csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
    
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
80217cfc:	e0fff217 	ldw	r3,-56(fp)
80217d00:	e0bff817 	ldw	r2,-32(fp)
80217d04:	1884703a 	and	r2,r3,r2
80217d08:	1000031e 	bne	r2,zero,80217d18 <alt_msgdma_descriptor_sync_transfer+0x2d4>
80217d0c:	e0bff217 	ldw	r2,-56(fp)
80217d10:	1080004c 	andi	r2,r2,1
80217d14:	103fe81e 	bne	r2,zero,80217cb8 <__reset+0xfa1f7cb8>
    }
    

    /*Errors or conditions causing the dispatcher stopping issuing read/write 
      commands to masters*/
    if(0 != (csr_status & error))
80217d18:	e0fff217 	ldw	r3,-56(fp)
80217d1c:	e0bff817 	ldw	r2,-32(fp)
80217d20:	1884703a 	and	r2,r3,r2
80217d24:	10000226 	beq	r2,zero,80217d30 <alt_msgdma_descriptor_sync_transfer+0x2ec>
        * Now that access to the registers is complete, release the registers
        * semaphore so that other threads can access the registers.
        */
        ALT_SEM_POST (dev->regs_lock);
        
        return error;
80217d28:	e0bff817 	ldw	r2,-32(fp)
80217d2c:	00001e06 	br	80217da8 <alt_msgdma_descriptor_sync_transfer+0x364>
    }

    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) | 
80217d30:	e0bffd17 	ldw	r2,-12(fp)
80217d34:	10800317 	ldw	r2,12(r2)
80217d38:	10800104 	addi	r2,r2,4
80217d3c:	10800037 	ldwio	r2,0(r2)
80217d40:	10800814 	ori	r2,r2,32
80217d44:	e0bff615 	stw	r2,-40(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80217d48:	0005303a 	rdctl	r2,status
80217d4c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80217d50:	e0fffa17 	ldw	r3,-24(fp)
80217d54:	00bfff84 	movi	r2,-2
80217d58:	1884703a 	and	r2,r3,r2
80217d5c:	1001703a 	wrctl	status,r2
  
  return context;
80217d60:	e0bffa17 	ldw	r2,-24(fp)
    ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();  
80217d64:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
80217d68:	e0bffd17 	ldw	r2,-12(fp)
80217d6c:	10800317 	ldw	r2,12(r2)
80217d70:	10800104 	addi	r2,r2,4
80217d74:	e0fff617 	ldw	r3,-40(fp)
80217d78:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
80217d7c:	e0bffd17 	ldw	r2,-12(fp)
80217d80:	10800317 	ldw	r2,12(r2)
80217d84:	e0fffd17 	ldw	r3,-12(fp)
80217d88:	18c00317 	ldw	r3,12(r3)
80217d8c:	18c00037 	ldwio	r3,0(r3)
80217d90:	10c00035 	stwio	r3,0(r2)
80217d94:	e0bff717 	ldw	r2,-36(fp)
80217d98:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80217d9c:	e0bffb17 	ldw	r2,-20(fp)
80217da0:	1001703a 	wrctl	status,r2
    * Now that access to the registers is complete, release the registers
    * semaphore so that other threads can access the registers.
    */
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
80217da4:	0005883a 	mov	r2,zero

}
80217da8:	e037883a 	mov	sp,fp
80217dac:	dfc00117 	ldw	ra,4(sp)
80217db0:	df000017 	ldw	fp,0(sp)
80217db4:	dec00204 	addi	sp,sp,8
80217db8:	f800283a 	ret

80217dbc <alt_msgdma_construct_standard_st_to_mm_descriptor>:
 */
int alt_msgdma_construct_standard_st_to_mm_descriptor (
    alt_msgdma_dev *dev,
    alt_msgdma_standard_descriptor *descriptor,
    alt_u32 *write_address, alt_u32 length, alt_u32 control)
{
80217dbc:	defff804 	addi	sp,sp,-32
80217dc0:	dfc00715 	stw	ra,28(sp)
80217dc4:	df000615 	stw	fp,24(sp)
80217dc8:	df000604 	addi	fp,sp,24
80217dcc:	e13ffc15 	stw	r4,-16(fp)
80217dd0:	e17ffd15 	stw	r5,-12(fp)
80217dd4:	e1bffe15 	stw	r6,-8(fp)
80217dd8:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, NULL, 
80217ddc:	e0800217 	ldw	r2,8(fp)
80217de0:	d8800115 	stw	r2,4(sp)
80217de4:	e0bfff17 	ldw	r2,-4(fp)
80217de8:	d8800015 	stw	r2,0(sp)
80217dec:	e1fffe17 	ldw	r7,-8(fp)
80217df0:	000d883a 	mov	r6,zero
80217df4:	e17ffd17 	ldw	r5,-12(fp)
80217df8:	e13ffc17 	ldw	r4,-16(fp)
80217dfc:	02175940 	call	80217594 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
80217e00:	e037883a 	mov	sp,fp
80217e04:	dfc00117 	ldw	ra,4(sp)
80217e08:	df000017 	ldw	fp,0(sp)
80217e0c:	dec00204 	addi	sp,sp,8
80217e10:	f800283a 	ret

80217e14 <alt_msgdma_construct_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
    alt_msgdma_standard_descriptor *descriptor,
    alt_u32 *read_address,
    alt_u32 length,
    alt_u32 control)
{
80217e14:	defff804 	addi	sp,sp,-32
80217e18:	dfc00715 	stw	ra,28(sp)
80217e1c:	df000615 	stw	fp,24(sp)
80217e20:	df000604 	addi	fp,sp,24
80217e24:	e13ffc15 	stw	r4,-16(fp)
80217e28:	e17ffd15 	stw	r5,-12(fp)
80217e2c:	e1bffe15 	stw	r6,-8(fp)
80217e30:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
80217e34:	e0800217 	ldw	r2,8(fp)
80217e38:	d8800115 	stw	r2,4(sp)
80217e3c:	e0bfff17 	ldw	r2,-4(fp)
80217e40:	d8800015 	stw	r2,0(sp)
80217e44:	000f883a 	mov	r7,zero
80217e48:	e1bffe17 	ldw	r6,-8(fp)
80217e4c:	e17ffd17 	ldw	r5,-12(fp)
80217e50:	e13ffc17 	ldw	r4,-16(fp)
80217e54:	02175940 	call	80217594 <alt_msgdma_construct_standard_descriptor>
            NULL, length, control);

}
80217e58:	e037883a 	mov	sp,fp
80217e5c:	dfc00117 	ldw	ra,4(sp)
80217e60:	df000017 	ldw	fp,0(sp)
80217e64:	dec00204 	addi	sp,sp,8
80217e68:	f800283a 	ret

80217e6c <alt_msgdma_construct_standard_mm_to_mm_descriptor>:
    alt_msgdma_standard_descriptor *descriptor,
    alt_u32 *read_address, 
    alt_u32 *write_address, 
    alt_u32 length, 
    alt_u32 control)
{
80217e6c:	defff804 	addi	sp,sp,-32
80217e70:	dfc00715 	stw	ra,28(sp)
80217e74:	df000615 	stw	fp,24(sp)
80217e78:	df000604 	addi	fp,sp,24
80217e7c:	e13ffc15 	stw	r4,-16(fp)
80217e80:	e17ffd15 	stw	r5,-12(fp)
80217e84:	e1bffe15 	stw	r6,-8(fp)
80217e88:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
80217e8c:	e0800317 	ldw	r2,12(fp)
80217e90:	d8800115 	stw	r2,4(sp)
80217e94:	e0800217 	ldw	r2,8(fp)
80217e98:	d8800015 	stw	r2,0(sp)
80217e9c:	e1ffff17 	ldw	r7,-4(fp)
80217ea0:	e1bffe17 	ldw	r6,-8(fp)
80217ea4:	e17ffd17 	ldw	r5,-12(fp)
80217ea8:	e13ffc17 	ldw	r4,-16(fp)
80217eac:	02175940 	call	80217594 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
80217eb0:	e037883a 	mov	sp,fp
80217eb4:	dfc00117 	ldw	ra,4(sp)
80217eb8:	df000017 	ldw	fp,0(sp)
80217ebc:	dec00204 	addi	sp,sp,8
80217ec0:	f800283a 	ret

80217ec4 <alt_msgdma_construct_extended_st_to_mm_descriptor>:
    alt_u32 length, 
    alt_u32 control, 
    alt_u16 sequence_number, 
    alt_u8 write_burst_count, 
    alt_u16 write_stride)
{
80217ec4:	defff004 	addi	sp,sp,-64
80217ec8:	dfc00f15 	stw	ra,60(sp)
80217ecc:	df000e15 	stw	fp,56(sp)
80217ed0:	df000e04 	addi	fp,sp,56
80217ed4:	e13ff915 	stw	r4,-28(fp)
80217ed8:	e17ffa15 	stw	r5,-24(fp)
80217edc:	e1bffb15 	stw	r6,-20(fp)
80217ee0:	e1fffc15 	stw	r7,-16(fp)
80217ee4:	e1000317 	ldw	r4,12(fp)
80217ee8:	e0c00417 	ldw	r3,16(fp)
80217eec:	e0800517 	ldw	r2,20(fp)
80217ef0:	e13ffd0d 	sth	r4,-12(fp)
80217ef4:	e0fffe05 	stb	r3,-8(fp)
80217ef8:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
80217efc:	e0bffd0b 	ldhu	r2,-12(fp)
80217f00:	e0fffe03 	ldbu	r3,-8(fp)
80217f04:	e13fff0b 	ldhu	r4,-4(fp)
80217f08:	d9000615 	stw	r4,24(sp)
80217f0c:	d8000515 	stw	zero,20(sp)
80217f10:	d8c00415 	stw	r3,16(sp)
80217f14:	d8000315 	stw	zero,12(sp)
80217f18:	d8800215 	stw	r2,8(sp)
80217f1c:	e0800217 	ldw	r2,8(fp)
80217f20:	d8800115 	stw	r2,4(sp)
80217f24:	e0bffc17 	ldw	r2,-16(fp)
80217f28:	d8800015 	stw	r2,0(sp)
80217f2c:	e1fffb17 	ldw	r7,-20(fp)
80217f30:	000d883a 	mov	r6,zero
80217f34:	e17ffa17 	ldw	r5,-24(fp)
80217f38:	e13ff917 	ldw	r4,-28(fp)
80217f3c:	02176200 	call	80217620 <alt_msgdma_construct_extended_descriptor>
            NULL, write_address, length, control, sequence_number, 0, 
            write_burst_count, 0, write_stride);
}
80217f40:	e037883a 	mov	sp,fp
80217f44:	dfc00117 	ldw	ra,4(sp)
80217f48:	df000017 	ldw	fp,0(sp)
80217f4c:	dec00204 	addi	sp,sp,8
80217f50:	f800283a 	ret

80217f54 <alt_msgdma_construct_extended_mm_to_st_descriptor>:
    alt_u32 length,
    alt_u32 control,
    alt_u16 sequence_number,
    alt_u8 read_burst_count, 
    alt_u16 read_stride)
{
80217f54:	defff004 	addi	sp,sp,-64
80217f58:	dfc00f15 	stw	ra,60(sp)
80217f5c:	df000e15 	stw	fp,56(sp)
80217f60:	df000e04 	addi	fp,sp,56
80217f64:	e13ff915 	stw	r4,-28(fp)
80217f68:	e17ffa15 	stw	r5,-24(fp)
80217f6c:	e1bffb15 	stw	r6,-20(fp)
80217f70:	e1fffc15 	stw	r7,-16(fp)
80217f74:	e1000317 	ldw	r4,12(fp)
80217f78:	e0c00417 	ldw	r3,16(fp)
80217f7c:	e0800517 	ldw	r2,20(fp)
80217f80:	e13ffd0d 	sth	r4,-12(fp)
80217f84:	e0fffe05 	stb	r3,-8(fp)
80217f88:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, read_address, 
80217f8c:	e0bffd0b 	ldhu	r2,-12(fp)
80217f90:	e0fffe03 	ldbu	r3,-8(fp)
80217f94:	e13fff0b 	ldhu	r4,-4(fp)
80217f98:	d8000615 	stw	zero,24(sp)
80217f9c:	d9000515 	stw	r4,20(sp)
80217fa0:	d8000415 	stw	zero,16(sp)
80217fa4:	d8c00315 	stw	r3,12(sp)
80217fa8:	d8800215 	stw	r2,8(sp)
80217fac:	e0800217 	ldw	r2,8(fp)
80217fb0:	d8800115 	stw	r2,4(sp)
80217fb4:	e0bffc17 	ldw	r2,-16(fp)
80217fb8:	d8800015 	stw	r2,0(sp)
80217fbc:	000f883a 	mov	r7,zero
80217fc0:	e1bffb17 	ldw	r6,-20(fp)
80217fc4:	e17ffa17 	ldw	r5,-24(fp)
80217fc8:	e13ff917 	ldw	r4,-28(fp)
80217fcc:	02176200 	call	80217620 <alt_msgdma_construct_extended_descriptor>
            NULL, length, control, sequence_number, read_burst_count, 0, 
            read_stride, 0);

}
80217fd0:	e037883a 	mov	sp,fp
80217fd4:	dfc00117 	ldw	ra,4(sp)
80217fd8:	df000017 	ldw	fp,0(sp)
80217fdc:	dec00204 	addi	sp,sp,8
80217fe0:	f800283a 	ret

80217fe4 <alt_msgdma_construct_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
80217fe4:	deffee04 	addi	sp,sp,-72
80217fe8:	dfc01115 	stw	ra,68(sp)
80217fec:	df001015 	stw	fp,64(sp)
80217ff0:	df001004 	addi	fp,sp,64
80217ff4:	e13ff715 	stw	r4,-36(fp)
80217ff8:	e17ff815 	stw	r5,-32(fp)
80217ffc:	e1bff915 	stw	r6,-28(fp)
80218000:	e1fffa15 	stw	r7,-24(fp)
80218004:	e1800417 	ldw	r6,16(fp)
80218008:	e1400517 	ldw	r5,20(fp)
8021800c:	e1000617 	ldw	r4,24(fp)
80218010:	e0c00717 	ldw	r3,28(fp)
80218014:	e0800817 	ldw	r2,32(fp)
80218018:	e1bffb0d 	sth	r6,-20(fp)
8021801c:	e17ffc05 	stb	r5,-16(fp)
80218020:	e13ffd05 	stb	r4,-12(fp)
80218024:	e0fffe0d 	sth	r3,-8(fp)
80218028:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
8021802c:	e0bffb0b 	ldhu	r2,-20(fp)
80218030:	e0fffc03 	ldbu	r3,-16(fp)
80218034:	e13ffd03 	ldbu	r4,-12(fp)
80218038:	e17ffe0b 	ldhu	r5,-8(fp)
8021803c:	e1bfff0b 	ldhu	r6,-4(fp)
80218040:	d9800615 	stw	r6,24(sp)
80218044:	d9400515 	stw	r5,20(sp)
80218048:	d9000415 	stw	r4,16(sp)
8021804c:	d8c00315 	stw	r3,12(sp)
80218050:	d8800215 	stw	r2,8(sp)
80218054:	e0800317 	ldw	r2,12(fp)
80218058:	d8800115 	stw	r2,4(sp)
8021805c:	e0800217 	ldw	r2,8(fp)
80218060:	d8800015 	stw	r2,0(sp)
80218064:	e1fffa17 	ldw	r7,-24(fp)
80218068:	e1bff917 	ldw	r6,-28(fp)
8021806c:	e17ff817 	ldw	r5,-32(fp)
80218070:	e13ff717 	ldw	r4,-36(fp)
80218074:	02176200 	call	80217620 <alt_msgdma_construct_extended_descriptor>
            read_address, write_address, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
80218078:	e037883a 	mov	sp,fp
8021807c:	dfc00117 	ldw	ra,4(sp)
80218080:	df000017 	ldw	fp,0(sp)
80218084:	dec00204 	addi	sp,sp,8
80218088:	f800283a 	ret

8021808c <alt_msgdma_construct_prefetcher_standard_descriptor>:
    alt_msgdma_prefetcher_standard_descriptor *descriptor,
    alt_u32 read_address, 
    alt_u32 write_address, 
    alt_u32 length, 
    alt_u32 control)
{
8021808c:	defffb04 	addi	sp,sp,-20
80218090:	df000415 	stw	fp,16(sp)
80218094:	df000404 	addi	fp,sp,16
80218098:	e13ffc15 	stw	r4,-16(fp)
8021809c:	e17ffd15 	stw	r5,-12(fp)
802180a0:	e1bffe15 	stw	r6,-8(fp)
802180a4:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
802180a8:	e0bffc17 	ldw	r2,-16(fp)
802180ac:	10c01217 	ldw	r3,72(r2)
802180b0:	e0800117 	ldw	r2,4(fp)
802180b4:	18800436 	bltu	r3,r2,802180c8 <alt_msgdma_construct_prefetcher_standard_descriptor+0x3c>
       dev->enhanced_features != 0
802180b8:	e0bffc17 	ldw	r2,-16(fp)
802180bc:	10801703 	ldbu	r2,92(r2)
    alt_u32 read_address, 
    alt_u32 write_address, 
    alt_u32 length, 
    alt_u32 control)
{
    if(dev->max_byte < length ||
802180c0:	10803fcc 	andi	r2,r2,255
802180c4:	10000226 	beq	r2,zero,802180d0 <alt_msgdma_construct_prefetcher_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
802180c8:	00bffa84 	movi	r2,-22
802180cc:	00001406 	br	80218120 <alt_msgdma_construct_prefetcher_standard_descriptor+0x94>
    }
    descriptor->read_address = read_address;
802180d0:	e0bffd17 	ldw	r2,-12(fp)
802180d4:	e0fffe17 	ldw	r3,-8(fp)
802180d8:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
802180dc:	e0bffd17 	ldw	r2,-12(fp)
802180e0:	e0ffff17 	ldw	r3,-4(fp)
802180e4:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
802180e8:	e0bffd17 	ldw	r2,-12(fp)
802180ec:	e0c00117 	ldw	r3,4(fp)
802180f0:	10c00215 	stw	r3,8(r2)
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
802180f4:	e0fffd17 	ldw	r3,-12(fp)
802180f8:	e0bffd17 	ldw	r2,-12(fp)
802180fc:	10c00315 	stw	r3,12(r2)
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
80218100:	e0c00217 	ldw	r3,8(fp)
80218104:	00900034 	movhi	r2,16384
80218108:	10bfffc4 	addi	r2,r2,-1
8021810c:	1884703a 	and	r2,r3,r2
80218110:	10e00034 	orhi	r3,r2,32768
    descriptor->transfer_length = length;
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
80218114:	e0bffd17 	ldw	r2,-12(fp)
80218118:	10c00715 	stw	r3,28(r2)
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
8021811c:	0005883a 	mov	r2,zero
}
80218120:	e037883a 	mov	sp,fp
80218124:	df000017 	ldw	fp,0(sp)
80218128:	dec00104 	addi	sp,sp,4
8021812c:	f800283a 	ret

80218130 <alt_msgdma_construct_prefetcher_extended_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
80218130:	defff404 	addi	sp,sp,-48
80218134:	df000b15 	stw	fp,44(sp)
80218138:	df000b04 	addi	fp,sp,44
8021813c:	e13ff715 	stw	r4,-36(fp)
80218140:	e17ff815 	stw	r5,-32(fp)
80218144:	e1bff915 	stw	r6,-28(fp)
80218148:	e1fffa15 	stw	r7,-24(fp)
8021814c:	e1800517 	ldw	r6,20(fp)
80218150:	e1400617 	ldw	r5,24(fp)
80218154:	e1000717 	ldw	r4,28(fp)
80218158:	e0c00817 	ldw	r3,32(fp)
8021815c:	e0800917 	ldw	r2,36(fp)
80218160:	e1bffb0d 	sth	r6,-20(fp)
80218164:	e17ffc05 	stb	r5,-16(fp)
80218168:	e13ffd05 	stb	r4,-12(fp)
8021816c:	e0fffe0d 	sth	r3,-8(fp)
80218170:	e0bfff0d 	sth	r2,-4(fp)
    msgdma_addr64 node_addr;
    
    if(dev->max_byte < length ||
80218174:	e0bff717 	ldw	r2,-36(fp)
80218178:	10c01217 	ldw	r3,72(r2)
8021817c:	e0800317 	ldw	r2,12(fp)
80218180:	18801936 	bltu	r3,r2,802181e8 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
80218184:	e13ff717 	ldw	r4,-36(fp)
80218188:	20801317 	ldw	r2,76(r4)
8021818c:	20c01417 	ldw	r3,80(r4)
80218190:	e13ffe0b 	ldhu	r4,-8(fp)
80218194:	213fffcc 	andi	r4,r4,65535
80218198:	2015883a 	mov	r10,r4
8021819c:	0017883a 	mov	r11,zero
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
    msgdma_addr64 node_addr;
    
    if(dev->max_byte < length ||
802181a0:	1ac01136 	bltu	r3,r11,802181e8 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
802181a4:	58c0011e 	bne	r11,r3,802181ac <alt_msgdma_construct_prefetcher_extended_descriptor+0x7c>
802181a8:	12800f36 	bltu	r2,r10,802181e8 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
802181ac:	e13ff717 	ldw	r4,-36(fp)
802181b0:	20801317 	ldw	r2,76(r4)
802181b4:	20c01417 	ldw	r3,80(r4)
802181b8:	e13fff0b 	ldhu	r4,-4(fp)
802181bc:	213fffcc 	andi	r4,r4,65535
802181c0:	2011883a 	mov	r8,r4
802181c4:	0013883a 	mov	r9,zero
    alt_u16 write_stride)
{
    msgdma_addr64 node_addr;
    
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
802181c8:	1a400736 	bltu	r3,r9,802181e8 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
802181cc:	48c0011e 	bne	r9,r3,802181d4 <alt_msgdma_construct_prefetcher_extended_descriptor+0xa4>
802181d0:	12000536 	bltu	r2,r8,802181e8 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
802181d4:	e0bff717 	ldw	r2,-36(fp)
802181d8:	10801703 	ldbu	r2,92(r2)
{
    msgdma_addr64 node_addr;
    
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
802181dc:	10803fcc 	andi	r2,r2,255
802181e0:	10800060 	cmpeqi	r2,r2,1
802181e4:	1000021e 	bne	r2,zero,802181f0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
802181e8:	00bffa84 	movi	r2,-22
802181ec:	00003106 	br	802182b4 <alt_msgdma_construct_prefetcher_extended_descriptor+0x184>
    }
    
    descriptor->read_address_high = read_address_high;
802181f0:	e0bff817 	ldw	r2,-32(fp)
802181f4:	e0fff917 	ldw	r3,-28(fp)
802181f8:	10c00915 	stw	r3,36(r2)
    descriptor->read_address_low = read_address_low;
802181fc:	e0bff817 	ldw	r2,-32(fp)
80218200:	e0fffa17 	ldw	r3,-24(fp)
80218204:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_high = write_address_high;
80218208:	e0bff817 	ldw	r2,-32(fp)
8021820c:	e0c00117 	ldw	r3,4(fp)
80218210:	10c00a15 	stw	r3,40(r2)
    descriptor->write_address_low = write_address_low;
80218214:	e0bff817 	ldw	r2,-32(fp)
80218218:	e0c00217 	ldw	r3,8(fp)
8021821c:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
80218220:	e0bff817 	ldw	r2,-32(fp)
80218224:	e0c00317 	ldw	r3,12(fp)
80218228:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
8021822c:	e0bff817 	ldw	r2,-32(fp)
80218230:	e0fffb0b 	ldhu	r3,-20(fp)
80218234:	10c0070d 	sth	r3,28(r2)
    descriptor->read_burst_count = read_burst_count;
80218238:	e0bff817 	ldw	r2,-32(fp)
8021823c:	e0fffc03 	ldbu	r3,-16(fp)
80218240:	10c00785 	stb	r3,30(r2)
    descriptor->write_burst_count = write_burst_count;
80218244:	e0bff817 	ldw	r2,-32(fp)
80218248:	e0fffd03 	ldbu	r3,-12(fp)
8021824c:	10c007c5 	stb	r3,31(r2)
    descriptor->read_stride = read_stride;
80218250:	e0bff817 	ldw	r2,-32(fp)
80218254:	e0fffe0b 	ldhu	r3,-8(fp)
80218258:	10c0080d 	sth	r3,32(r2)
    descriptor->write_stride = write_stride;
8021825c:	e0bff817 	ldw	r2,-32(fp)
80218260:	e0ffff0b 	ldhu	r3,-4(fp)
80218264:	10c0088d 	sth	r3,34(r2)
    /* have descriptor point to itself */
    node_addr.u64 = (uintptr_t)descriptor;
80218268:	e0bff817 	ldw	r2,-32(fp)
8021826c:	1019883a 	mov	r12,r2
80218270:	001b883a 	mov	r13,zero
80218274:	e33ff515 	stw	r12,-44(fp)
80218278:	e37ff615 	stw	r13,-40(fp)
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
8021827c:	e0fff517 	ldw	r3,-44(fp)
80218280:	e0bff817 	ldw	r2,-32(fp)
80218284:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
80218288:	e0fff617 	ldw	r3,-40(fp)
8021828c:	e0bff817 	ldw	r2,-32(fp)
80218290:	10c00b15 	stw	r3,44(r2)
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
80218294:	e0c00417 	ldw	r3,16(fp)
80218298:	00900034 	movhi	r2,16384
8021829c:	10bfffc4 	addi	r2,r2,-1
802182a0:	1884703a 	and	r2,r3,r2
802182a4:	10e00034 	orhi	r3,r2,32768
    node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
802182a8:	e0bff817 	ldw	r2,-32(fp)
802182ac:	10c00f15 	stw	r3,60(r2)
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
802182b0:	0005883a 	mov	r2,zero
}
802182b4:	e037883a 	mov	sp,fp
802182b8:	df000017 	ldw	fp,0(sp)
802182bc:	dec00104 	addi	sp,sp,4
802182c0:	f800283a 	ret

802182c4 <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor>:
    alt_msgdma_prefetcher_standard_descriptor *descriptor,
    alt_u32 read_address,
    alt_u32 write_address,
    alt_u32 length,
    alt_u32 control)
{
802182c4:	defff804 	addi	sp,sp,-32
802182c8:	dfc00715 	stw	ra,28(sp)
802182cc:	df000615 	stw	fp,24(sp)
802182d0:	df000604 	addi	fp,sp,24
802182d4:	e13ffc15 	stw	r4,-16(fp)
802182d8:	e17ffd15 	stw	r5,-12(fp)
802182dc:	e1bffe15 	stw	r6,-8(fp)
802182e0:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
802182e4:	e0800317 	ldw	r2,12(fp)
802182e8:	d8800115 	stw	r2,4(sp)
802182ec:	e0800217 	ldw	r2,8(fp)
802182f0:	d8800015 	stw	r2,0(sp)
802182f4:	e1ffff17 	ldw	r7,-4(fp)
802182f8:	e1bffe17 	ldw	r6,-8(fp)
802182fc:	e17ffd17 	ldw	r5,-12(fp)
80218300:	e13ffc17 	ldw	r4,-16(fp)
80218304:	021808c0 	call	8021808c <alt_msgdma_construct_prefetcher_standard_descriptor>
            read_address, write_address, length, control);
}
80218308:	e037883a 	mov	sp,fp
8021830c:	dfc00117 	ldw	ra,4(sp)
80218310:	df000017 	ldw	fp,0(sp)
80218314:	dec00204 	addi	sp,sp,8
80218318:	f800283a 	ret

8021831c <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor>:
    alt_msgdma_dev *dev,
    alt_msgdma_prefetcher_standard_descriptor *descriptor, 
    alt_u32 write_address, 
    alt_u32 length, 
    alt_u32 control)
{
8021831c:	defff804 	addi	sp,sp,-32
80218320:	dfc00715 	stw	ra,28(sp)
80218324:	df000615 	stw	fp,24(sp)
80218328:	df000604 	addi	fp,sp,24
8021832c:	e13ffc15 	stw	r4,-16(fp)
80218330:	e17ffd15 	stw	r5,-12(fp)
80218334:	e1bffe15 	stw	r6,-8(fp)
80218338:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
8021833c:	e0800217 	ldw	r2,8(fp)
80218340:	d8800115 	stw	r2,4(sp)
80218344:	e0bfff17 	ldw	r2,-4(fp)
80218348:	d8800015 	stw	r2,0(sp)
8021834c:	e1fffe17 	ldw	r7,-8(fp)
80218350:	000d883a 	mov	r6,zero
80218354:	e17ffd17 	ldw	r5,-12(fp)
80218358:	e13ffc17 	ldw	r4,-16(fp)
8021835c:	021808c0 	call	8021808c <alt_msgdma_construct_prefetcher_standard_descriptor>
            0, write_address, length, control);
}
80218360:	e037883a 	mov	sp,fp
80218364:	dfc00117 	ldw	ra,4(sp)
80218368:	df000017 	ldw	fp,0(sp)
8021836c:	dec00204 	addi	sp,sp,8
80218370:	f800283a 	ret

80218374 <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
    alt_msgdma_prefetcher_standard_descriptor *descriptor, 
    alt_u32 read_address, 
    alt_u32 length, 
    alt_u32 control)
{
80218374:	defff804 	addi	sp,sp,-32
80218378:	dfc00715 	stw	ra,28(sp)
8021837c:	df000615 	stw	fp,24(sp)
80218380:	df000604 	addi	fp,sp,24
80218384:	e13ffc15 	stw	r4,-16(fp)
80218388:	e17ffd15 	stw	r5,-12(fp)
8021838c:	e1bffe15 	stw	r6,-8(fp)
80218390:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
80218394:	e0800217 	ldw	r2,8(fp)
80218398:	d8800115 	stw	r2,4(sp)
8021839c:	e0bfff17 	ldw	r2,-4(fp)
802183a0:	d8800015 	stw	r2,0(sp)
802183a4:	000f883a 	mov	r7,zero
802183a8:	e1bffe17 	ldw	r6,-8(fp)
802183ac:	e17ffd17 	ldw	r5,-12(fp)
802183b0:	e13ffc17 	ldw	r4,-16(fp)
802183b4:	021808c0 	call	8021808c <alt_msgdma_construct_prefetcher_standard_descriptor>
            read_address, 0, length, control);
}
802183b8:	e037883a 	mov	sp,fp
802183bc:	dfc00117 	ldw	ra,4(sp)
802183c0:	df000017 	ldw	fp,0(sp)
802183c4:	dec00204 	addi	sp,sp,8
802183c8:	f800283a 	ret

802183cc <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor>:
    alt_u32 length, 
    alt_u32 control, 
    alt_u16 sequence_number,
    alt_u8 write_burst_count,
    alt_u16 write_stride)
{
802183cc:	deffee04 	addi	sp,sp,-72
802183d0:	dfc01115 	stw	ra,68(sp)
802183d4:	df001015 	stw	fp,64(sp)
802183d8:	df001004 	addi	fp,sp,64
802183dc:	e13ff915 	stw	r4,-28(fp)
802183e0:	e17ffa15 	stw	r5,-24(fp)
802183e4:	e1bffb15 	stw	r6,-20(fp)
802183e8:	e1fffc15 	stw	r7,-16(fp)
802183ec:	e1000417 	ldw	r4,16(fp)
802183f0:	e0c00517 	ldw	r3,20(fp)
802183f4:	e0800617 	ldw	r2,24(fp)
802183f8:	e13ffd0d 	sth	r4,-12(fp)
802183fc:	e0fffe05 	stb	r3,-8(fp)
80218400:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor, 
80218404:	e0bffd0b 	ldhu	r2,-12(fp)
80218408:	e0fffe03 	ldbu	r3,-8(fp)
8021840c:	e13fff0b 	ldhu	r4,-4(fp)
80218410:	d9000815 	stw	r4,32(sp)
80218414:	d8000715 	stw	zero,28(sp)
80218418:	d8c00615 	stw	r3,24(sp)
8021841c:	d8000515 	stw	zero,20(sp)
80218420:	d8800415 	stw	r2,16(sp)
80218424:	e0800317 	ldw	r2,12(fp)
80218428:	d8800315 	stw	r2,12(sp)
8021842c:	e0800217 	ldw	r2,8(fp)
80218430:	d8800215 	stw	r2,8(sp)
80218434:	e0bffc17 	ldw	r2,-16(fp)
80218438:	d8800115 	stw	r2,4(sp)
8021843c:	e0bffb17 	ldw	r2,-20(fp)
80218440:	d8800015 	stw	r2,0(sp)
80218444:	000f883a 	mov	r7,zero
80218448:	000d883a 	mov	r6,zero
8021844c:	e17ffa17 	ldw	r5,-24(fp)
80218450:	e13ff917 	ldw	r4,-28(fp)
80218454:	02181300 	call	80218130 <alt_msgdma_construct_prefetcher_extended_descriptor>
            0, 0, write_address_high, write_address_low, length, control, 
            sequence_number, 0, write_burst_count, 0, write_stride);
}
80218458:	e037883a 	mov	sp,fp
8021845c:	dfc00117 	ldw	ra,4(sp)
80218460:	df000017 	ldw	fp,0(sp)
80218464:	dec00204 	addi	sp,sp,8
80218468:	f800283a 	ret

8021846c <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor>:
    alt_u32 length, 
    alt_u32 control, 
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u16 read_stride)
{
8021846c:	deffee04 	addi	sp,sp,-72
80218470:	dfc01115 	stw	ra,68(sp)
80218474:	df001015 	stw	fp,64(sp)
80218478:	df001004 	addi	fp,sp,64
8021847c:	e13ff915 	stw	r4,-28(fp)
80218480:	e17ffa15 	stw	r5,-24(fp)
80218484:	e1bffb15 	stw	r6,-20(fp)
80218488:	e1fffc15 	stw	r7,-16(fp)
8021848c:	e1000417 	ldw	r4,16(fp)
80218490:	e0c00517 	ldw	r3,20(fp)
80218494:	e0800617 	ldw	r2,24(fp)
80218498:	e13ffd0d 	sth	r4,-12(fp)
8021849c:	e0fffe05 	stb	r3,-8(fp)
802184a0:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
802184a4:	e0bffd0b 	ldhu	r2,-12(fp)
802184a8:	e0fffe03 	ldbu	r3,-8(fp)
802184ac:	e13fff0b 	ldhu	r4,-4(fp)
802184b0:	d8000815 	stw	zero,32(sp)
802184b4:	d9000715 	stw	r4,28(sp)
802184b8:	d8000615 	stw	zero,24(sp)
802184bc:	d8c00515 	stw	r3,20(sp)
802184c0:	d8800415 	stw	r2,16(sp)
802184c4:	e0800317 	ldw	r2,12(fp)
802184c8:	d8800315 	stw	r2,12(sp)
802184cc:	e0800217 	ldw	r2,8(fp)
802184d0:	d8800215 	stw	r2,8(sp)
802184d4:	d8000115 	stw	zero,4(sp)
802184d8:	d8000015 	stw	zero,0(sp)
802184dc:	e1fffc17 	ldw	r7,-16(fp)
802184e0:	e1bffb17 	ldw	r6,-20(fp)
802184e4:	e17ffa17 	ldw	r5,-24(fp)
802184e8:	e13ff917 	ldw	r4,-28(fp)
802184ec:	02181300 	call	80218130 <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, 0, 0, length, control, 
            sequence_number, read_burst_count, 0, read_stride, 0);
}
802184f0:	e037883a 	mov	sp,fp
802184f4:	dfc00117 	ldw	ra,4(sp)
802184f8:	df000017 	ldw	fp,0(sp)
802184fc:	dec00204 	addi	sp,sp,8
80218500:	f800283a 	ret

80218504 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number,
    alt_u8 read_burst_count,
    alt_u8 write_burst_count, 
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
80218504:	deffec04 	addi	sp,sp,-80
80218508:	dfc01315 	stw	ra,76(sp)
8021850c:	df001215 	stw	fp,72(sp)
80218510:	df001204 	addi	fp,sp,72
80218514:	e13ff715 	stw	r4,-36(fp)
80218518:	e17ff815 	stw	r5,-32(fp)
8021851c:	e1bff915 	stw	r6,-28(fp)
80218520:	e1fffa15 	stw	r7,-24(fp)
80218524:	e1800617 	ldw	r6,24(fp)
80218528:	e1400717 	ldw	r5,28(fp)
8021852c:	e1000817 	ldw	r4,32(fp)
80218530:	e0c00917 	ldw	r3,36(fp)
80218534:	e0800a17 	ldw	r2,40(fp)
80218538:	e1bffb0d 	sth	r6,-20(fp)
8021853c:	e17ffc05 	stb	r5,-16(fp)
80218540:	e13ffd05 	stb	r4,-12(fp)
80218544:	e0fffe0d 	sth	r3,-8(fp)
80218548:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
8021854c:	e0bffb0b 	ldhu	r2,-20(fp)
80218550:	e0fffc03 	ldbu	r3,-16(fp)
80218554:	e13ffd03 	ldbu	r4,-12(fp)
80218558:	e17ffe0b 	ldhu	r5,-8(fp)
8021855c:	e1bfff0b 	ldhu	r6,-4(fp)
80218560:	d9800815 	stw	r6,32(sp)
80218564:	d9400715 	stw	r5,28(sp)
80218568:	d9000615 	stw	r4,24(sp)
8021856c:	d8c00515 	stw	r3,20(sp)
80218570:	d8800415 	stw	r2,16(sp)
80218574:	e0800517 	ldw	r2,20(fp)
80218578:	d8800315 	stw	r2,12(sp)
8021857c:	e0800417 	ldw	r2,16(fp)
80218580:	d8800215 	stw	r2,8(sp)
80218584:	e0800317 	ldw	r2,12(fp)
80218588:	d8800115 	stw	r2,4(sp)
8021858c:	e0800217 	ldw	r2,8(fp)
80218590:	d8800015 	stw	r2,0(sp)
80218594:	e1fffa17 	ldw	r7,-24(fp)
80218598:	e1bff917 	ldw	r6,-28(fp)
8021859c:	e17ff817 	ldw	r5,-32(fp)
802185a0:	e13ff717 	ldw	r4,-36(fp)
802185a4:	02181300 	call	80218130 <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, write_address_high, 
            write_address_low, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
802185a8:	e037883a 	mov	sp,fp
802185ac:	dfc00117 	ldw	ra,4(sp)
802185b0:	df000017 	ldw	fp,0(sp)
802185b4:	dec00204 	addi	sp,sp,8
802185b8:	f800283a 	ret

802185bc <alt_msgdma_prefetcher_add_standard_desc_to_list>:
 *           descriptor.next_ptr not pointing back to itslef)
 */
int alt_msgdma_prefetcher_add_standard_desc_to_list (
    alt_msgdma_prefetcher_standard_descriptor** list,
    alt_msgdma_prefetcher_standard_descriptor* descriptor)
{
802185bc:	defffc04 	addi	sp,sp,-16
802185c0:	df000315 	stw	fp,12(sp)
802185c4:	df000304 	addi	fp,sp,12
802185c8:	e13ffe15 	stw	r4,-8(fp)
802185cc:	e17fff15 	stw	r5,-4(fp)
    alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
    
    if (descriptor == NULL)
802185d0:	e0bfff17 	ldw	r2,-4(fp)
802185d4:	1000021e 	bne	r2,zero,802185e0 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x24>
    {
        return -EINVAL;  /* this descriptor cannot be NULL */
802185d8:	00bffa84 	movi	r2,-22
802185dc:	00002f06 	br	8021869c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
    }
    if (descriptor->next_desc_ptr != (alt_u32)descriptor)
802185e0:	e0bfff17 	ldw	r2,-4(fp)
802185e4:	10c00317 	ldw	r3,12(r2)
802185e8:	e0bfff17 	ldw	r2,-4(fp)
802185ec:	18800226 	beq	r3,r2,802185f8 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x3c>
    {
        return -EINVAL;  /* descriptor.next_ptr must point to itself */
802185f0:	00bffa84 	movi	r2,-22
802185f4:	00002906 	br	8021869c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
    }
    if (*list == NULL)
802185f8:	e0bffe17 	ldw	r2,-8(fp)
802185fc:	10800017 	ldw	r2,0(r2)
80218600:	1000051e 	bne	r2,zero,80218618 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x5c>
    {
        *list = descriptor;  /* make this root-node if list is empty */
80218604:	e0bffe17 	ldw	r2,-8(fp)
80218608:	e0ffff17 	ldw	r3,-4(fp)
8021860c:	10c00015 	stw	r3,0(r2)
        return 0;  /* successfully added */
80218610:	0005883a 	mov	r2,zero
80218614:	00002106 	br	8021869c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
    }
    if (*list == descriptor)
80218618:	e0bffe17 	ldw	r2,-8(fp)
8021861c:	10c00017 	ldw	r3,0(r2)
80218620:	e0bfff17 	ldw	r2,-4(fp)
80218624:	1880021e 	bne	r3,r2,80218630 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x74>
    {
        return -EINVAL;  /* this descriptor cannot already be root-node */
80218628:	00bffa84 	movi	r2,-22
8021862c:	00001b06 	br	8021869c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
    }
    
    /* get to last node in the list */
    last_descr_ptr = *list; /* start at list root-node */
80218630:	e0bffe17 	ldw	r2,-8(fp)
80218634:	10800017 	ldw	r2,0(r2)
80218638:	e0bffd15 	stw	r2,-12(fp)
    /* traverse list until you get the last node */
    while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
8021863c:	00000906 	br	80218664 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xa8>
    {
        if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
80218640:	e0bffd17 	ldw	r2,-12(fp)
80218644:	10c00317 	ldw	r3,12(r2)
80218648:	e0bfff17 	ldw	r2,-4(fp)
8021864c:	1880021e 	bne	r3,r2,80218658 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x9c>
        {
            return -EINVAL;  /* descriptor cannot already be in the list */
80218650:	00bffa84 	movi	r2,-22
80218654:	00001106 	br	8021869c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
        }
        last_descr_ptr = 
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
80218658:	e0bffd17 	ldw	r2,-12(fp)
8021865c:	10800317 	ldw	r2,12(r2)
    {
        if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
        {
            return -EINVAL;  /* descriptor cannot already be in the list */
        }
        last_descr_ptr = 
80218660:	e0bffd15 	stw	r2,-12(fp)
    }
    
    /* get to last node in the list */
    last_descr_ptr = *list; /* start at list root-node */
    /* traverse list until you get the last node */
    while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
80218664:	e0bffd17 	ldw	r2,-12(fp)
80218668:	10800317 	ldw	r2,12(r2)
8021866c:	e0fffe17 	ldw	r3,-8(fp)
80218670:	18c00017 	ldw	r3,0(r3)
80218674:	10fff21e 	bne	r2,r3,80218640 <__reset+0xfa1f8640>
        }
        last_descr_ptr = 
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
    }
    /* add this descriptor to end of list */
    last_descr_ptr->next_desc_ptr = (alt_u32)((uintptr_t)descriptor);
80218678:	e0ffff17 	ldw	r3,-4(fp)
8021867c:	e0bffd17 	ldw	r2,-12(fp)
80218680:	10c00315 	stw	r3,12(r2)
    /* ensure new last pointer points the start of the list */
    descriptor->next_desc_ptr = (alt_u32)((uintptr_t)*list);  
80218684:	e0bffe17 	ldw	r2,-8(fp)
80218688:	10800017 	ldw	r2,0(r2)
8021868c:	1007883a 	mov	r3,r2
80218690:	e0bfff17 	ldw	r2,-4(fp)
80218694:	10c00315 	stw	r3,12(r2)
    return 0; /* successfully added */
80218698:	0005883a 	mov	r2,zero
}
8021869c:	e037883a 	mov	sp,fp
802186a0:	df000017 	ldw	fp,0(sp)
802186a4:	dec00104 	addi	sp,sp,4
802186a8:	f800283a 	ret

802186ac <alt_msgdma_prefetcher_add_extended_desc_to_list>:

int alt_msgdma_prefetcher_add_extended_desc_to_list (
    alt_msgdma_prefetcher_extended_descriptor** list,
    alt_msgdma_prefetcher_extended_descriptor* descriptor)
{
802186ac:	defff804 	addi	sp,sp,-32
802186b0:	df000715 	stw	fp,28(sp)
802186b4:	df000704 	addi	fp,sp,28
802186b8:	e13ffe15 	stw	r4,-8(fp)
802186bc:	e17fff15 	stw	r5,-4(fp)
    alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
    msgdma_addr64 root_node_addr, next_node_addr;
    
    if (descriptor == NULL)
802186c0:	e13fff17 	ldw	r4,-4(fp)
802186c4:	2000021e 	bne	r4,zero,802186d0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x24>
    {
        return -EINVAL;  /* this descriptor cannot be NULL */
802186c8:	00bffa84 	movi	r2,-22
802186cc:	00005906 	br	80218834 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
    }
    
    next_node_addr.u64 = (uintptr_t)descriptor;
802186d0:	e13fff17 	ldw	r4,-4(fp)
802186d4:	2015883a 	mov	r10,r4
802186d8:	0017883a 	mov	r11,zero
802186dc:	e2bffc15 	stw	r10,-16(fp)
802186e0:	e2fffd15 	stw	r11,-12(fp)
    if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) ||
802186e4:	e13fff17 	ldw	r4,-4(fp)
802186e8:	21400317 	ldw	r5,12(r4)
802186ec:	e13ffc17 	ldw	r4,-16(fp)
802186f0:	2900041e 	bne	r5,r4,80218704 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x58>
        (descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
802186f4:	e13fff17 	ldw	r4,-4(fp)
802186f8:	21400b17 	ldw	r5,44(r4)
802186fc:	e13ffd17 	ldw	r4,-12(fp)
    {
        return -EINVAL;  /* this descriptor cannot be NULL */
    }
    
    next_node_addr.u64 = (uintptr_t)descriptor;
    if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) ||
80218700:	29000226 	beq	r5,r4,8021870c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
        (descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
    {
        return -EINVAL;  /* descriptor.next_ptr must point to itself */
80218704:	00bffa84 	movi	r2,-22
80218708:	00004a06 	br	80218834 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
    }
    
    if (*list == NULL)
8021870c:	e13ffe17 	ldw	r4,-8(fp)
80218710:	21000017 	ldw	r4,0(r4)
80218714:	2000051e 	bne	r4,zero,8021872c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x80>
    {
        *list = descriptor;  /* make this the root-node if list is empty */
80218718:	e0bffe17 	ldw	r2,-8(fp)
8021871c:	e0ffff17 	ldw	r3,-4(fp)
80218720:	10c00015 	stw	r3,0(r2)
        return 0;
80218724:	0005883a 	mov	r2,zero
80218728:	00004206 	br	80218834 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
    }
    if (*list == descriptor)
8021872c:	e13ffe17 	ldw	r4,-8(fp)
80218730:	21400017 	ldw	r5,0(r4)
80218734:	e13fff17 	ldw	r4,-4(fp)
80218738:	2900021e 	bne	r5,r4,80218744 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x98>
    {
        return -EINVAL;  /* this descriptor cannot already be root-node */
8021873c:	00bffa84 	movi	r2,-22
80218740:	00003c06 	br	80218834 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
    }
    
    /* get to last node in the list */
    last_descr_ptr = *list; /* start at list root-node */
80218744:	e13ffe17 	ldw	r4,-8(fp)
80218748:	21000017 	ldw	r4,0(r4)
8021874c:	e13ff915 	stw	r4,-28(fp)
    /* the last nodes next ptr should point to the root node*/
    root_node_addr.u64 = (uintptr_t)*list;
80218750:	e13ffe17 	ldw	r4,-8(fp)
80218754:	21000017 	ldw	r4,0(r4)
80218758:	2011883a 	mov	r8,r4
8021875c:	0013883a 	mov	r9,zero
80218760:	e23ffa15 	stw	r8,-24(fp)
80218764:	e27ffb15 	stw	r9,-20(fp)
    
    /* traverse list until you get the last node */
    while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
80218768:	00001806 	br	802187cc <alt_msgdma_prefetcher_add_extended_desc_to_list+0x120>
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
    {
        /* first check if descriptor already in the list */
        next_node_addr.u64 = (uintptr_t)descriptor;
8021876c:	e13fff17 	ldw	r4,-4(fp)
80218770:	200d883a 	mov	r6,r4
80218774:	000f883a 	mov	r7,zero
80218778:	e1bffc15 	stw	r6,-16(fp)
8021877c:	e1fffd15 	stw	r7,-12(fp)
        if ((last_descr_ptr->next_desc_ptr_low == next_node_addr.u32[0])
80218780:	e13ff917 	ldw	r4,-28(fp)
80218784:	21400317 	ldw	r5,12(r4)
80218788:	e13ffc17 	ldw	r4,-16(fp)
8021878c:	2900061e 	bne	r5,r4,802187a8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
            && (last_descr_ptr->next_desc_ptr_high == next_node_addr.u32[1]))
80218790:	e13ff917 	ldw	r4,-28(fp)
80218794:	21400b17 	ldw	r5,44(r4)
80218798:	e13ffd17 	ldw	r4,-12(fp)
8021879c:	2900021e 	bne	r5,r4,802187a8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
        {
            return -EINVAL;  /* descriptor cannot already be in the list */
802187a0:	00bffa84 	movi	r2,-22
802187a4:	00002306 	br	80218834 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
        }
        /* go to next node in list, using 64 bit address */
        next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
802187a8:	e13ff917 	ldw	r4,-28(fp)
802187ac:	21000317 	ldw	r4,12(r4)
802187b0:	e13ffc15 	stw	r4,-16(fp)
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
802187b4:	e13ff917 	ldw	r4,-28(fp)
802187b8:	21000b17 	ldw	r4,44(r4)
802187bc:	e13ffd15 	stw	r4,-12(fp)
        last_descr_ptr = 
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
802187c0:	e13ffc17 	ldw	r4,-16(fp)
802187c4:	e17ffd17 	ldw	r5,-12(fp)
            return -EINVAL;  /* descriptor cannot already be in the list */
        }
        /* go to next node in list, using 64 bit address */
        next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
        last_descr_ptr = 
802187c8:	e13ff915 	stw	r4,-28(fp)
    last_descr_ptr = *list; /* start at list root-node */
    /* the last nodes next ptr should point to the root node*/
    root_node_addr.u64 = (uintptr_t)*list;
    
    /* traverse list until you get the last node */
    while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
802187cc:	e13ff917 	ldw	r4,-28(fp)
802187d0:	21400317 	ldw	r5,12(r4)
802187d4:	e13ffa17 	ldw	r4,-24(fp)
802187d8:	293fe41e 	bne	r5,r4,8021876c <__reset+0xfa1f876c>
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
802187dc:	e13ff917 	ldw	r4,-28(fp)
802187e0:	21400b17 	ldw	r5,44(r4)
802187e4:	e13ffb17 	ldw	r4,-20(fp)
802187e8:	293fe01e 	bne	r5,r4,8021876c <__reset+0xfa1f876c>
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
        last_descr_ptr = 
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
    }
    /* add this descriptor to end of list */
    next_node_addr.u64 = (uintptr_t)descriptor;
802187ec:	e13fff17 	ldw	r4,-4(fp)
802187f0:	2005883a 	mov	r2,r4
802187f4:	0007883a 	mov	r3,zero
802187f8:	e0bffc15 	stw	r2,-16(fp)
802187fc:	e0fffd15 	stw	r3,-12(fp)
    last_descr_ptr->next_desc_ptr_low = next_node_addr.u32[0];
80218800:	e0fffc17 	ldw	r3,-16(fp)
80218804:	e0bff917 	ldw	r2,-28(fp)
80218808:	10c00315 	stw	r3,12(r2)
    last_descr_ptr->next_desc_ptr_high = next_node_addr.u32[1];
8021880c:	e0fffd17 	ldw	r3,-12(fp)
80218810:	e0bff917 	ldw	r2,-28(fp)
80218814:	10c00b15 	stw	r3,44(r2)
    /* ensure new last pointer points the beginning of the list */
    descriptor->next_desc_ptr_low = root_node_addr.u32[0];
80218818:	e0fffa17 	ldw	r3,-24(fp)
8021881c:	e0bfff17 	ldw	r2,-4(fp)
80218820:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = root_node_addr.u32[1];
80218824:	e0fffb17 	ldw	r3,-20(fp)
80218828:	e0bfff17 	ldw	r2,-4(fp)
8021882c:	10c00b15 	stw	r3,44(r2)
    return 0;
80218830:	0005883a 	mov	r2,zero
}
80218834:	e037883a 	mov	sp,fp
80218838:	df000017 	ldw	fp,0(sp)
8021883c:	dec00104 	addi	sp,sp,4
80218840:	f800283a 	ret

80218844 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>:
 */ 
int alt_msgdma_prefetcher_set_std_list_own_by_hw_bits (
    alt_msgdma_prefetcher_standard_descriptor *list,
    alt_u8 last_desc_owned_by_sw,
    alt_u8 dcache_flush_desc_list)    
{
80218844:	defff804 	addi	sp,sp,-32
80218848:	dfc00715 	stw	ra,28(sp)
8021884c:	df000615 	stw	fp,24(sp)
80218850:	df000604 	addi	fp,sp,24
80218854:	e13ffd15 	stw	r4,-12(fp)
80218858:	2807883a 	mov	r3,r5
8021885c:	3005883a 	mov	r2,r6
80218860:	e0fffe05 	stb	r3,-8(fp)
80218864:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 descriptor_control_field = 0;
80218868:	e03ffc15 	stw	zero,-16(fp)
    alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
    alt_u32 descriptor_count = 0;
8021886c:	e03ffb15 	stw	zero,-20(fp)
    
    if (list == NULL)
80218870:	e0bffd17 	ldw	r2,-12(fp)
80218874:	1000021e 	bne	r2,zero,80218880 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x3c>
    {
        return -EINVAL;  /* this list cannot be empty */
80218878:	00bffa84 	movi	r2,-22
8021887c:	00002f06 	br	8021893c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xf8>
    }

    /* update all nodes in the list */
    last_descr_ptr = list; /* start at list root-node */
80218880:	e0bffd17 	ldw	r2,-12(fp)
80218884:	e0bffa15 	stw	r2,-24(fp)
    /* traverse list to update all of the nodes */
    while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
80218888:	00000d06 	br	802188c0 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x7c>
    {
        /* get current value */
        descriptor_control_field = last_descr_ptr->control;
8021888c:	e0bffa17 	ldw	r2,-24(fp)
80218890:	10800717 	ldw	r2,28(r2)
80218894:	e0bffc15 	stw	r2,-16(fp)
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
80218898:	e0bffc17 	ldw	r2,-16(fp)
8021889c:	10d00034 	orhi	r3,r2,16384
    while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
    {
        /* get current value */
        descriptor_control_field = last_descr_ptr->control;
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
802188a0:	e0bffa17 	ldw	r2,-24(fp)
802188a4:	10c00715 	stw	r3,28(r2)
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
        /* go to next node in list */
        last_descr_ptr = 
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
802188a8:	e0bffa17 	ldw	r2,-24(fp)
802188ac:	10800317 	ldw	r2,12(r2)
        descriptor_control_field = last_descr_ptr->control;
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
        /* go to next node in list */
        last_descr_ptr = 
802188b0:	e0bffa15 	stw	r2,-24(fp)
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
            
        descriptor_count++;
802188b4:	e0bffb17 	ldw	r2,-20(fp)
802188b8:	10800044 	addi	r2,r2,1
802188bc:	e0bffb15 	stw	r2,-20(fp)
    }

    /* update all nodes in the list */
    last_descr_ptr = list; /* start at list root-node */
    /* traverse list to update all of the nodes */
    while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
802188c0:	e0bffa17 	ldw	r2,-24(fp)
802188c4:	10c00317 	ldw	r3,12(r2)
802188c8:	e0bffd17 	ldw	r2,-12(fp)
802188cc:	18bfef1e 	bne	r3,r2,8021888c <__reset+0xfa1f888c>
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
            
        descriptor_count++;
    }
    /* update the last node in the list, currently last_descr_ptr after while loop */
    descriptor_control_field = last_descr_ptr->control;    /* get current value */
802188d0:	e0bffa17 	ldw	r2,-24(fp)
802188d4:	10800717 	ldw	r2,28(r2)
802188d8:	e0bffc15 	stw	r2,-16(fp)
    /* update own_by_hw bit only */
    if (last_desc_owned_by_sw)
802188dc:	e0bffe03 	ldbu	r2,-8(fp)
802188e0:	10000726 	beq	r2,zero,80218900 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xbc>
    {
        last_descr_ptr->control = descriptor_control_field 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
802188e4:	e0fffc17 	ldw	r3,-16(fp)
802188e8:	00b00034 	movhi	r2,49152
802188ec:	10bfffc4 	addi	r2,r2,-1
802188f0:	1886703a 	and	r3,r3,r2
    /* update the last node in the list, currently last_descr_ptr after while loop */
    descriptor_control_field = last_descr_ptr->control;    /* get current value */
    /* update own_by_hw bit only */
    if (last_desc_owned_by_sw)
    {
        last_descr_ptr->control = descriptor_control_field 
802188f4:	e0bffa17 	ldw	r2,-24(fp)
802188f8:	10c00715 	stw	r3,28(r2)
802188fc:	00000406 	br	80218910 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xcc>
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
    }
    else {
        last_descr_ptr->control = descriptor_control_field 
            | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;        
80218900:	e0bffc17 	ldw	r2,-16(fp)
80218904:	10d00034 	orhi	r3,r2,16384
    {
        last_descr_ptr->control = descriptor_control_field 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
    }
    else {
        last_descr_ptr->control = descriptor_control_field 
80218908:	e0bffa17 	ldw	r2,-24(fp)
8021890c:	10c00715 	stw	r3,28(r2)
            | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;        
    }
    
    descriptor_count++;
80218910:	e0bffb17 	ldw	r2,-20(fp)
80218914:	10800044 	addi	r2,r2,1
80218918:	e0bffb15 	stw	r2,-20(fp)
    
    if (dcache_flush_desc_list)
8021891c:	e0bfff03 	ldbu	r2,-4(fp)
80218920:	10000526 	beq	r2,zero,80218938 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xf4>
    {        
        alt_dcache_flush(list,sizeof(alt_msgdma_prefetcher_standard_descriptor) * descriptor_count);
80218924:	e0bffb17 	ldw	r2,-20(fp)
80218928:	1004917a 	slli	r2,r2,5
8021892c:	100b883a 	mov	r5,r2
80218930:	e13ffd17 	ldw	r4,-12(fp)
80218934:	02192e00 	call	802192e0 <alt_dcache_flush>
    }
    
    return 0;
80218938:	0005883a 	mov	r2,zero
}
8021893c:	e037883a 	mov	sp,fp
80218940:	dfc00117 	ldw	ra,4(sp)
80218944:	df000017 	ldw	fp,0(sp)
80218948:	dec00204 	addi	sp,sp,8
8021894c:	f800283a 	ret

80218950 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>:
 */    
int alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits (
    alt_msgdma_prefetcher_extended_descriptor *list,
    alt_u8 last_desc_owned_by_sw,
    alt_u8 dcache_flush_desc_list) 
{    
80218950:	defff404 	addi	sp,sp,-48
80218954:	dfc00b15 	stw	ra,44(sp)
80218958:	df000a15 	stw	fp,40(sp)
8021895c:	df000a04 	addi	fp,sp,40
80218960:	e13ffd15 	stw	r4,-12(fp)
80218964:	3009883a 	mov	r4,r6
80218968:	e17ffe05 	stb	r5,-8(fp)
8021896c:	e13fff05 	stb	r4,-4(fp)
    alt_u32 descriptor_control_field = 0;
80218970:	e03ff815 	stw	zero,-32(fp)
    msgdma_addr64 root_node_addr, next_node_addr;
    alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
    alt_u32 descriptor_count = 0;
80218974:	e03ff715 	stw	zero,-36(fp)
    
    if (list == NULL)
80218978:	e13ffd17 	ldw	r4,-12(fp)
8021897c:	2000021e 	bne	r4,zero,80218988 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x38>
    {
        return -EINVAL;  /* this list cannot be empty */
80218980:	00bffa84 	movi	r2,-22
80218984:	00003e06 	br	80218a80 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x130>
    }
    
    /* update all nodes in the list */
    last_descr_ptr = list; /* start at list root-node */
80218988:	e13ffd17 	ldw	r4,-12(fp)
8021898c:	e13ff615 	stw	r4,-40(fp)
    /* the last nodes next ptr should point to the root node*/
    root_node_addr.u64 = (uintptr_t)list;
80218990:	e13ffd17 	ldw	r4,-12(fp)
80218994:	2005883a 	mov	r2,r4
80218998:	0007883a 	mov	r3,zero
8021899c:	e0bff915 	stw	r2,-28(fp)
802189a0:	e0fffa15 	stw	r3,-24(fp)

    /* traverse list until you get the last node */
    while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
802189a4:	00001306 	br	802189f4 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xa4>
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
    {
        /* start with current value */
        descriptor_control_field = last_descr_ptr->control;
802189a8:	e0bff617 	ldw	r2,-40(fp)
802189ac:	10800f17 	ldw	r2,60(r2)
802189b0:	e0bff815 	stw	r2,-32(fp)
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
802189b4:	e0bff817 	ldw	r2,-32(fp)
802189b8:	10d00034 	orhi	r3,r2,16384
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
    {
        /* start with current value */
        descriptor_control_field = last_descr_ptr->control;
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
802189bc:	e0bff617 	ldw	r2,-40(fp)
802189c0:	10c00f15 	stw	r3,60(r2)
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
        /* go to next node in list, using 64 bit address */
        next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
802189c4:	e0bff617 	ldw	r2,-40(fp)
802189c8:	10800317 	ldw	r2,12(r2)
802189cc:	e0bffb15 	stw	r2,-20(fp)
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
802189d0:	e0bff617 	ldw	r2,-40(fp)
802189d4:	10800b17 	ldw	r2,44(r2)
802189d8:	e0bffc15 	stw	r2,-16(fp)
        last_descr_ptr = 
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
802189dc:	e0bffb17 	ldw	r2,-20(fp)
802189e0:	e0fffc17 	ldw	r3,-16(fp)
        last_descr_ptr->control = descriptor_control_field 
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
        /* go to next node in list, using 64 bit address */
        next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
        last_descr_ptr = 
802189e4:	e0bff615 	stw	r2,-40(fp)
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
        descriptor_count++;            
802189e8:	e0bff717 	ldw	r2,-36(fp)
802189ec:	10800044 	addi	r2,r2,1
802189f0:	e0bff715 	stw	r2,-36(fp)
    last_descr_ptr = list; /* start at list root-node */
    /* the last nodes next ptr should point to the root node*/
    root_node_addr.u64 = (uintptr_t)list;

    /* traverse list until you get the last node */
    while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
802189f4:	e0bff617 	ldw	r2,-40(fp)
802189f8:	10c00317 	ldw	r3,12(r2)
802189fc:	e0bff917 	ldw	r2,-28(fp)
80218a00:	18bfe91e 	bne	r3,r2,802189a8 <__reset+0xfa1f89a8>
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
80218a04:	e0bff617 	ldw	r2,-40(fp)
80218a08:	10c00b17 	ldw	r3,44(r2)
80218a0c:	e0bffa17 	ldw	r2,-24(fp)
80218a10:	18bfe51e 	bne	r3,r2,802189a8 <__reset+0xfa1f89a8>
        last_descr_ptr = 
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
        descriptor_count++;            
    }
    /* update the last node in the list, currently last_descr_ptr after while loop */
    descriptor_control_field = last_descr_ptr->control;    /* start with current value */
80218a14:	e0bff617 	ldw	r2,-40(fp)
80218a18:	10800f17 	ldw	r2,60(r2)
80218a1c:	e0bff815 	stw	r2,-32(fp)
    /* update own_by_hw bit only */
    if (last_desc_owned_by_sw)
80218a20:	e0bffe03 	ldbu	r2,-8(fp)
80218a24:	10000726 	beq	r2,zero,80218a44 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xf4>
    {
        last_descr_ptr->control = descriptor_control_field 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
80218a28:	e0fff817 	ldw	r3,-32(fp)
80218a2c:	00b00034 	movhi	r2,49152
80218a30:	10bfffc4 	addi	r2,r2,-1
80218a34:	1886703a 	and	r3,r3,r2
    /* update the last node in the list, currently last_descr_ptr after while loop */
    descriptor_control_field = last_descr_ptr->control;    /* start with current value */
    /* update own_by_hw bit only */
    if (last_desc_owned_by_sw)
    {
        last_descr_ptr->control = descriptor_control_field 
80218a38:	e0bff617 	ldw	r2,-40(fp)
80218a3c:	10c00f15 	stw	r3,60(r2)
80218a40:	00000406 	br	80218a54 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x104>
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
    }
    else {
        last_descr_ptr->control = descriptor_control_field 
            | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;        
80218a44:	e0bff817 	ldw	r2,-32(fp)
80218a48:	10d00034 	orhi	r3,r2,16384
    {
        last_descr_ptr->control = descriptor_control_field 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
    }
    else {
        last_descr_ptr->control = descriptor_control_field 
80218a4c:	e0bff617 	ldw	r2,-40(fp)
80218a50:	10c00f15 	stw	r3,60(r2)
            | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;        
    }
    
    descriptor_count++;
80218a54:	e0bff717 	ldw	r2,-36(fp)
80218a58:	10800044 	addi	r2,r2,1
80218a5c:	e0bff715 	stw	r2,-36(fp)
    
    if (dcache_flush_desc_list)
80218a60:	e0bfff03 	ldbu	r2,-4(fp)
80218a64:	10000526 	beq	r2,zero,80218a7c <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x12c>
    {        
        alt_dcache_flush(list,sizeof(alt_msgdma_prefetcher_extended_descriptor) * descriptor_count);        
80218a68:	e0bff717 	ldw	r2,-36(fp)
80218a6c:	100491ba 	slli	r2,r2,6
80218a70:	100b883a 	mov	r5,r2
80218a74:	e13ffd17 	ldw	r4,-12(fp)
80218a78:	02192e00 	call	802192e0 <alt_dcache_flush>
    }
    
    return 0;
80218a7c:	0005883a 	mov	r2,zero
}
80218a80:	e037883a 	mov	sp,fp
80218a84:	dfc00117 	ldw	ra,4(sp)
80218a88:	df000017 	ldw	fp,0(sp)
80218a8c:	dec00204 	addi	sp,sp,8
80218a90:	f800283a 	ret

80218a94 <alt_msgdma_start_prefetcher_with_list_addr>:
int alt_msgdma_start_prefetcher_with_list_addr (
    alt_msgdma_dev *dev,
    alt_u64  list_addr,
    alt_u8 park_mode_en,
    alt_u8 poll_en)
{
80218a94:	deffef04 	addi	sp,sp,-68
80218a98:	df001015 	stw	fp,64(sp)
80218a9c:	df001004 	addi	fp,sp,64
80218aa0:	e13ffb15 	stw	r4,-20(fp)
80218aa4:	e17ffc15 	stw	r5,-16(fp)
80218aa8:	e1bffd15 	stw	r6,-12(fp)
80218aac:	3807883a 	mov	r3,r7
80218ab0:	e0800117 	ldw	r2,4(fp)
80218ab4:	e0fffe05 	stb	r3,-8(fp)
80218ab8:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 prefetcher_ctl = 0;
80218abc:	e03ff015 	stw	zero,-64(fp)
    alt_u32 dispatcher_ctl = 0;
80218ac0:	e03ff115 	stw	zero,-60(fp)
    alt_irq_context context = 0;
80218ac4:	e03ff215 	stw	zero,-56(fp)
    
    /* use helper struct to get easy access to hi/low address */
    msgdma_addr64 root_node_addr;
    root_node_addr.u64 = list_addr;  
80218ac8:	e0bffc17 	ldw	r2,-16(fp)
80218acc:	e0bff915 	stw	r2,-28(fp)
80218ad0:	e0bffd17 	ldw	r2,-12(fp)
80218ad4:	e0bffa15 	stw	r2,-24(fp)
     * semaphore. This ensures that accessing registers is thread-safe.
     */
    ALT_SEM_PEND (dev->regs_lock, 0);
    
    /* case where prefetcher already started, return busy error */ 
    prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
80218ad8:	e0bffb17 	ldw	r2,-20(fp)
80218adc:	10800617 	ldw	r2,24(r2)
80218ae0:	10800037 	ldwio	r2,0(r2)
80218ae4:	e0bff015 	stw	r2,-64(fp)
    if(ALT_MSGDMA_PREFETCHER_CTRL_RUN_GET(prefetcher_ctl)){
80218ae8:	e0bff017 	ldw	r2,-64(fp)
80218aec:	1080004c 	andi	r2,r2,1
80218af0:	10000226 	beq	r2,zero,80218afc <alt_msgdma_start_prefetcher_with_list_addr+0x68>
        /* release the registers semaphore */
        ALT_SEM_POST (dev->regs_lock);
        return -EBUSY;
80218af4:	00bffc04 	movi	r2,-16
80218af8:	00009206 	br	80218d44 <alt_msgdma_start_prefetcher_with_list_addr+0x2b0>
    }
        
    /* Stop the msgdma dispatcher from issuing more descriptors to the
       read or write masters  */
    /* stop issuing more descriptors */
    dispatcher_ctl = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
80218afc:	00800804 	movi	r2,32
80218b00:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80218b04:	0005303a 	rdctl	r2,status
80218b08:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80218b0c:	e0fff517 	ldw	r3,-44(fp)
80218b10:	00bfff84 	movi	r2,-2
80218b14:	1884703a 	and	r2,r3,r2
80218b18:	1001703a 	wrctl	status,r2
  
  return context;
80218b1c:	e0bff517 	ldw	r2,-44(fp)
    
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
80218b20:	e0bff215 	stw	r2,-56(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
80218b24:	e0bffb17 	ldw	r2,-20(fp)
80218b28:	10800317 	ldw	r2,12(r2)
80218b2c:	10800104 	addi	r2,r2,4
80218b30:	e0fff117 	ldw	r3,-60(fp)
80218b34:	10c00035 	stwio	r3,0(r2)
    /*
     * Clear any (previous) status register information
     * that might occlude our error checking later.
     */
    IOWR_ALTERA_MSGDMA_CSR_STATUS( dev->csr_base, 
80218b38:	e0bffb17 	ldw	r2,-20(fp)
80218b3c:	10800317 	ldw	r2,12(r2)
80218b40:	e0fffb17 	ldw	r3,-20(fp)
80218b44:	18c00317 	ldw	r3,12(r3)
80218b48:	18c00037 	ldwio	r3,0(r3)
80218b4c:	10c00035 	stwio	r3,0(r2)
80218b50:	e0bff217 	ldw	r2,-56(fp)
80218b54:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80218b58:	e0bff317 	ldw	r2,-52(fp)
80218b5c:	1001703a 	wrctl	status,r2
     * If a callback routine has been previously registered which will be
     * called from the msgdma ISR. Set up dispatcher to:
     *  - Run
     *  - Stop on an error with any particular descriptor
     */
    if(dev->callback)
80218b60:	e0bffb17 	ldw	r2,-20(fp)
80218b64:	10800b17 	ldw	r2,44(r2)
80218b68:	10002326 	beq	r2,zero,80218bf8 <alt_msgdma_start_prefetcher_with_list_addr+0x164>
    {
        dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
80218b6c:	e0bffb17 	ldw	r2,-20(fp)
80218b70:	10c00d17 	ldw	r3,52(r2)
80218b74:	e0bff117 	ldw	r2,-60(fp)
80218b78:	1884b03a 	or	r2,r3,r2
80218b7c:	10800514 	ori	r2,r2,20
80218b80:	e0bff115 	stw	r2,-60(fp)
                | ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
80218b84:	e0fff117 	ldw	r3,-60(fp)
80218b88:	00bff7c4 	movi	r2,-33
80218b8c:	1884703a 	and	r2,r3,r2
80218b90:	e0bff115 	stw	r2,-60(fp)
        
        prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
80218b94:	e0bff017 	ldw	r2,-64(fp)
80218b98:	10800214 	ori	r2,r2,8
80218b9c:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80218ba0:	0005303a 	rdctl	r2,status
80218ba4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80218ba8:	e0fff717 	ldw	r3,-36(fp)
80218bac:	00bfff84 	movi	r2,-2
80218bb0:	1884703a 	and	r2,r3,r2
80218bb4:	1001703a 	wrctl	status,r2
  
  return context;
80218bb8:	e0bff717 	ldw	r2,-36(fp)
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
80218bbc:	e0bff215 	stw	r2,-56(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
80218bc0:	e0bffb17 	ldw	r2,-20(fp)
80218bc4:	10800317 	ldw	r2,12(r2)
80218bc8:	10800104 	addi	r2,r2,4
80218bcc:	e0fff117 	ldw	r3,-60(fp)
80218bd0:	10c00035 	stwio	r3,0(r2)
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
80218bd4:	e0bffb17 	ldw	r2,-20(fp)
80218bd8:	10800617 	ldw	r2,24(r2)
80218bdc:	e0fff017 	ldw	r3,-64(fp)
80218be0:	10c00035 	stwio	r3,0(r2)
80218be4:	e0bff217 	ldw	r2,-56(fp)
80218be8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80218bec:	e0bff417 	ldw	r2,-48(fp)
80218bf0:	1001703a 	wrctl	status,r2
80218bf4:	00002306 	br	80218c84 <alt_msgdma_start_prefetcher_with_list_addr+0x1f0>
      *   - Stop on an error with any particular descriptor
      *   - Disable interrupt generation
      */
     else
     {
         dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
80218bf8:	e0bffb17 	ldw	r2,-20(fp)
80218bfc:	10c00d17 	ldw	r3,52(r2)
80218c00:	e0bff117 	ldw	r2,-60(fp)
80218c04:	1884b03a 	or	r2,r3,r2
80218c08:	10800114 	ori	r2,r2,4
80218c0c:	e0bff115 	stw	r2,-60(fp)
         dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
80218c10:	e0fff117 	ldw	r3,-60(fp)
80218c14:	00bff3c4 	movi	r2,-49
80218c18:	1884703a 	and	r2,r3,r2
80218c1c:	e0bff115 	stw	r2,-60(fp)
                 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
         prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
80218c20:	e0fff017 	ldw	r3,-64(fp)
80218c24:	00bffdc4 	movi	r2,-9
80218c28:	1884703a 	and	r2,r3,r2
80218c2c:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80218c30:	0005303a 	rdctl	r2,status
80218c34:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80218c38:	e0fff817 	ldw	r3,-32(fp)
80218c3c:	00bfff84 	movi	r2,-2
80218c40:	1884703a 	and	r2,r3,r2
80218c44:	1001703a 	wrctl	status,r2
  
  return context;
80218c48:	e0bff817 	ldw	r2,-32(fp)
         /* making sure the read-modify-write below can't be pre-empted */
         context = alt_irq_disable_all();
80218c4c:	e0bff215 	stw	r2,-56(fp)
         IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
80218c50:	e0bffb17 	ldw	r2,-20(fp)
80218c54:	10800317 	ldw	r2,12(r2)
80218c58:	10800104 	addi	r2,r2,4
80218c5c:	e0fff117 	ldw	r3,-60(fp)
80218c60:	10c00035 	stwio	r3,0(r2)
         IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
80218c64:	e0bffb17 	ldw	r2,-20(fp)
80218c68:	10800617 	ldw	r2,24(r2)
80218c6c:	e0fff017 	ldw	r3,-64(fp)
80218c70:	10c00035 	stwio	r3,0(r2)
80218c74:	e0bff217 	ldw	r2,-56(fp)
80218c78:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80218c7c:	e0bff617 	ldw	r2,-40(fp)
80218c80:	1001703a 	wrctl	status,r2
         alt_irq_enable_all(context);
     }   
    
     /* set next descriptor registers to point to the list root-node */
     IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_LOW(dev->prefetcher_base,
80218c84:	e0bffb17 	ldw	r2,-20(fp)
80218c88:	10800617 	ldw	r2,24(r2)
80218c8c:	10800104 	addi	r2,r2,4
80218c90:	e0fff917 	ldw	r3,-28(fp)
80218c94:	10c00035 	stwio	r3,0(r2)
             root_node_addr.u32[0]);
     IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_HIGH(dev->prefetcher_base,
80218c98:	e0bffb17 	ldw	r2,-20(fp)
80218c9c:	10800617 	ldw	r2,24(r2)
80218ca0:	10800204 	addi	r2,r2,8
80218ca4:	e0fffa17 	ldw	r3,-24(fp)
80218ca8:	10c00035 	stwio	r3,0(r2)
             root_node_addr.u32[1]);
        
     /* set park-mode */
     if (park_mode_en){
80218cac:	e0bffe03 	ldbu	r2,-8(fp)
80218cb0:	10000426 	beq	r2,zero,80218cc4 <alt_msgdma_start_prefetcher_with_list_addr+0x230>
         prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
80218cb4:	e0bff017 	ldw	r2,-64(fp)
80218cb8:	10800414 	ori	r2,r2,16
80218cbc:	e0bff015 	stw	r2,-64(fp)
80218cc0:	00000406 	br	80218cd4 <alt_msgdma_start_prefetcher_with_list_addr+0x240>
     }
     else {
         prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
80218cc4:	e0fff017 	ldw	r3,-64(fp)
80218cc8:	00bffbc4 	movi	r2,-17
80218ccc:	1884703a 	and	r2,r3,r2
80218cd0:	e0bff015 	stw	r2,-64(fp)
     }
     
     /* set poll-en */
     if (poll_en){
80218cd4:	e0bfff03 	ldbu	r2,-4(fp)
80218cd8:	10000e26 	beq	r2,zero,80218d14 <alt_msgdma_start_prefetcher_with_list_addr+0x280>
         prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
80218cdc:	e0bff017 	ldw	r2,-64(fp)
80218ce0:	10800094 	ori	r2,r2,2
80218ce4:	e0bff015 	stw	r2,-64(fp)
         if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
80218ce8:	e0bffb17 	ldw	r2,-20(fp)
80218cec:	10800617 	ldw	r2,24(r2)
80218cf0:	10800304 	addi	r2,r2,12
80218cf4:	10800037 	ldwio	r2,0(r2)
80218cf8:	10000a1e 	bne	r2,zero,80218d24 <alt_msgdma_start_prefetcher_with_list_addr+0x290>
                 dev->prefetcher_base) == 0){
             /* set poll frequency to some non-zero default value */
             IOWR_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
80218cfc:	e0bffb17 	ldw	r2,-20(fp)
80218d00:	10800617 	ldw	r2,24(r2)
80218d04:	10800304 	addi	r2,r2,12
80218d08:	00c03fc4 	movi	r3,255
80218d0c:	10c00035 	stwio	r3,0(r2)
80218d10:	00000406 	br	80218d24 <alt_msgdma_start_prefetcher_with_list_addr+0x290>
                     dev->prefetcher_base, 0xFF);
         }
     }
     else {
         prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_CLR_MASK; 
80218d14:	e0fff017 	ldw	r3,-64(fp)
80218d18:	00bfff44 	movi	r2,-3
80218d1c:	1884703a 	and	r2,r3,r2
80218d20:	e0bff015 	stw	r2,-64(fp)
     }
     
     /* set the prefetcher run bit */
     prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_RUN_SET_MASK;
80218d24:	e0bff017 	ldw	r2,-64(fp)
80218d28:	10800054 	ori	r2,r2,1
80218d2c:	e0bff015 	stw	r2,-64(fp)
     /* start the dma since run bit is set */
     IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
80218d30:	e0bffb17 	ldw	r2,-20(fp)
80218d34:	10800617 	ldw	r2,24(r2)
80218d38:	e0fff017 	ldw	r3,-64(fp)
80218d3c:	10c00035 	stwio	r3,0(r2)
      * Now that access to the registers is complete, release the registers
      * semaphore so that other threads can access the registers.
      */
     ALT_SEM_POST (dev->regs_lock);
     
     return 0;
80218d40:	0005883a 	mov	r2,zero
}
80218d44:	e037883a 	mov	sp,fp
80218d48:	df000017 	ldw	fp,0(sp)
80218d4c:	dec00104 	addi	sp,sp,4
80218d50:	f800283a 	ret

80218d54 <alt_msgdma_start_prefetcher_with_std_desc_list>:
    alt_msgdma_prefetcher_standard_descriptor *list,
    alt_u8 park_mode_en,
    alt_u8 poll_en,
    alt_u8 last_desc_owned_by_sw,
    alt_u8 dcache_flush_desc_list)
{    
80218d54:	defff504 	addi	sp,sp,-44
80218d58:	dfc00a15 	stw	ra,40(sp)
80218d5c:	df000915 	stw	fp,36(sp)
80218d60:	dc400815 	stw	r17,32(sp)
80218d64:	dc000715 	stw	r16,28(sp)
80218d68:	df000904 	addi	fp,sp,36
80218d6c:	e13ff815 	stw	r4,-32(fp)
80218d70:	e17ff915 	stw	r5,-28(fp)
80218d74:	300b883a 	mov	r5,r6
80218d78:	3809883a 	mov	r4,r7
80218d7c:	e0c00217 	ldw	r3,8(fp)
80218d80:	e0800317 	ldw	r2,12(fp)
80218d84:	e17ffa05 	stb	r5,-24(fp)
80218d88:	e13ffb05 	stb	r4,-20(fp)
80218d8c:	e0fffc05 	stb	r3,-16(fp)
80218d90:	e0bffd05 	stb	r2,-12(fp)
    if (alt_msgdma_prefetcher_set_std_list_own_by_hw_bits(list,last_desc_owned_by_sw,dcache_flush_desc_list) != 0)
80218d94:	e0bffc03 	ldbu	r2,-16(fp)
80218d98:	e0fffd03 	ldbu	r3,-12(fp)
80218d9c:	180d883a 	mov	r6,r3
80218da0:	100b883a 	mov	r5,r2
80218da4:	e13ff917 	ldw	r4,-28(fp)
80218da8:	02188440 	call	80218844 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>
80218dac:	10000226 	beq	r2,zero,80218db8 <alt_msgdma_start_prefetcher_with_std_desc_list+0x64>
    {
        return -EINVAL;
80218db0:	00bffa84 	movi	r2,-22
80218db4:	00000b06 	br	80218de4 <alt_msgdma_start_prefetcher_with_std_desc_list+0x90>
    }

    return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list,
80218db8:	e0bff917 	ldw	r2,-28(fp)
80218dbc:	1021883a 	mov	r16,r2
80218dc0:	0023883a 	mov	r17,zero
80218dc4:	e0fffa03 	ldbu	r3,-24(fp)
80218dc8:	e0bffb03 	ldbu	r2,-20(fp)
80218dcc:	d8800015 	stw	r2,0(sp)
80218dd0:	180f883a 	mov	r7,r3
80218dd4:	800b883a 	mov	r5,r16
80218dd8:	880d883a 	mov	r6,r17
80218ddc:	e13ff817 	ldw	r4,-32(fp)
80218de0:	0218a940 	call	80218a94 <alt_msgdma_start_prefetcher_with_list_addr>
            park_mode_en, poll_en);
}
80218de4:	e6fffe04 	addi	sp,fp,-8
80218de8:	dfc00317 	ldw	ra,12(sp)
80218dec:	df000217 	ldw	fp,8(sp)
80218df0:	dc400117 	ldw	r17,4(sp)
80218df4:	dc000017 	ldw	r16,0(sp)
80218df8:	dec00404 	addi	sp,sp,16
80218dfc:	f800283a 	ret

80218e00 <alt_msgdma_start_prefetcher_with_extd_desc_list>:
    alt_msgdma_prefetcher_extended_descriptor *list,
    alt_u8 park_mode_en,
    alt_u8 poll_en,
    alt_u8 last_desc_owned_by_sw,
    alt_u8 dcache_flush_desc_list)
{
80218e00:	defff504 	addi	sp,sp,-44
80218e04:	dfc00a15 	stw	ra,40(sp)
80218e08:	df000915 	stw	fp,36(sp)
80218e0c:	dc400815 	stw	r17,32(sp)
80218e10:	dc000715 	stw	r16,28(sp)
80218e14:	df000904 	addi	fp,sp,36
80218e18:	e13ff815 	stw	r4,-32(fp)
80218e1c:	e17ff915 	stw	r5,-28(fp)
80218e20:	300b883a 	mov	r5,r6
80218e24:	3809883a 	mov	r4,r7
80218e28:	e0c00217 	ldw	r3,8(fp)
80218e2c:	e0800317 	ldw	r2,12(fp)
80218e30:	e17ffa05 	stb	r5,-24(fp)
80218e34:	e13ffb05 	stb	r4,-20(fp)
80218e38:	e0fffc05 	stb	r3,-16(fp)
80218e3c:	e0bffd05 	stb	r2,-12(fp)
    
     if (alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits(list,last_desc_owned_by_sw,dcache_flush_desc_list) != 0)
80218e40:	e0bffc03 	ldbu	r2,-16(fp)
80218e44:	e0fffd03 	ldbu	r3,-12(fp)
80218e48:	180d883a 	mov	r6,r3
80218e4c:	100b883a 	mov	r5,r2
80218e50:	e13ff917 	ldw	r4,-28(fp)
80218e54:	02189500 	call	80218950 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>
80218e58:	10000226 	beq	r2,zero,80218e64 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x64>
    {
        return -EINVAL;
80218e5c:	00bffa84 	movi	r2,-22
80218e60:	00000b06 	br	80218e90 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x90>
    }
        
    return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list, 
80218e64:	e0bff917 	ldw	r2,-28(fp)
80218e68:	1021883a 	mov	r16,r2
80218e6c:	0023883a 	mov	r17,zero
80218e70:	e0fffa03 	ldbu	r3,-24(fp)
80218e74:	e0bffb03 	ldbu	r2,-20(fp)
80218e78:	d8800015 	stw	r2,0(sp)
80218e7c:	180f883a 	mov	r7,r3
80218e80:	800b883a 	mov	r5,r16
80218e84:	880d883a 	mov	r6,r17
80218e88:	e13ff817 	ldw	r4,-32(fp)
80218e8c:	0218a940 	call	80218a94 <alt_msgdma_start_prefetcher_with_list_addr>
            park_mode_en, poll_en);
}
80218e90:	e6fffe04 	addi	sp,fp,-8
80218e94:	dfc00317 	ldw	ra,12(sp)
80218e98:	df000217 	ldw	fp,8(sp)
80218e9c:	dc400117 	ldw	r17,4(sp)
80218ea0:	dc000017 	ldw	r16,0(sp)
80218ea4:	dec00404 	addi	sp,sp,16
80218ea8:	f800283a 	ret

80218eac <alt_msgdma_open>:
 * Returns:
 * - Pointer to msgdma device instance structure, or null if the device
 *   could not be opened.
 */
alt_msgdma_dev* alt_msgdma_open (const char* name)
{
80218eac:	defffc04 	addi	sp,sp,-16
80218eb0:	dfc00315 	stw	ra,12(sp)
80218eb4:	df000215 	stw	fp,8(sp)
80218eb8:	df000204 	addi	fp,sp,8
80218ebc:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev* dev = NULL;
80218ec0:	e03ffe15 	stw	zero,-8(fp)

    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);
80218ec4:	d1601004 	addi	r5,gp,-32704
80218ec8:	e13fff17 	ldw	r4,-4(fp)
80218ecc:	02194a80 	call	802194a8 <alt_find_dev>
80218ed0:	e0bffe15 	stw	r2,-8(fp)

    if (NULL == dev)
80218ed4:	e0bffe17 	ldw	r2,-8(fp)
80218ed8:	1000041e 	bne	r2,zero,80218eec <alt_msgdma_open+0x40>
    {
        ALT_ERRNO = ENODEV;
80218edc:	02172140 	call	80217214 <alt_get_errno>
80218ee0:	1007883a 	mov	r3,r2
80218ee4:	008004c4 	movi	r2,19
80218ee8:	18800015 	stw	r2,0(r3)
    }

    return dev;
80218eec:	e0bffe17 	ldw	r2,-8(fp)
}
80218ef0:	e037883a 	mov	sp,fp
80218ef4:	dfc00117 	ldw	ra,4(sp)
80218ef8:	df000017 	ldw	fp,0(sp)
80218efc:	dec00204 	addi	sp,sp,8
80218f00:	f800283a 	ret

80218f04 <alt_msgdma_init>:
 * This routine disables interrupts, descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_msgdma_init (alt_msgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
80218f04:	defff804 	addi	sp,sp,-32
80218f08:	dfc00715 	stw	ra,28(sp)
80218f0c:	df000615 	stw	fp,24(sp)
80218f10:	df000604 	addi	fp,sp,24
80218f14:	e13ffd15 	stw	r4,-12(fp)
80218f18:	e17ffe15 	stw	r5,-8(fp)
80218f1c:	e1bfff15 	stw	r6,-4(fp)
    extern alt_llist alt_msgdma_list;
    alt_u32 temporary_control;
    int error;

    if (dev->prefetcher_enable)
80218f20:	e0bffd17 	ldw	r2,-12(fp)
80218f24:	10801783 	ldbu	r2,94(r2)
80218f28:	10803fcc 	andi	r2,r2,255
80218f2c:	10000b26 	beq	r2,zero,80218f5c <alt_msgdma_init+0x58>
    {
        /* start prefetcher reset sequence */
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, 
80218f30:	e0bffd17 	ldw	r2,-12(fp)
80218f34:	10800617 	ldw	r2,24(r2)
80218f38:	00c00104 	movi	r3,4
80218f3c:	10c00035 	stwio	r3,0(r2)
                ALT_MSGDMA_PREFETCHER_CTRL_RESET_SET_MASK);
        /* wait until hw clears the bit */
        while(ALT_MSGDMA_PREFETCHER_CTRL_RESET_GET(
80218f40:	0001883a 	nop
80218f44:	e0bffd17 	ldw	r2,-12(fp)
80218f48:	10800617 	ldw	r2,24(r2)
80218f4c:	10800037 	ldwio	r2,0(r2)
80218f50:	1080010c 	andi	r2,r2,4
80218f54:	1005d0ba 	srai	r2,r2,2
80218f58:	103ffa1e 	bne	r2,zero,80218f44 <__reset+0xfa1f8f44>
    }    
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
80218f5c:	e0bffd17 	ldw	r2,-12(fp)
80218f60:	10800317 	ldw	r2,12(r2)
80218f64:	10800104 	addi	r2,r2,4
80218f68:	00c00084 	movi	r3,2
80218f6c:	10c00035 	stwio	r3,0(r2)
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
80218f70:	0001883a 	nop
80218f74:	e0bffd17 	ldw	r2,-12(fp)
80218f78:	10800317 	ldw	r2,12(r2)
80218f7c:	10800037 	ldwio	r2,0(r2)
            & ALTERA_MSGDMA_CSR_RESET_STATE_MASK));
80218f80:	1080100c 	andi	r2,r2,64
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
80218f84:	103ffb1e 	bne	r2,zero,80218f74 <__reset+0xfa1f8f74>
    * Disable interrupts, halt descriptor processing,
    * and clear status register content
    */

    /* disable global interrupt */
    temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
80218f88:	e0bffd17 	ldw	r2,-12(fp)
80218f8c:	10800317 	ldw	r2,12(r2)
80218f90:	10800104 	addi	r2,r2,4
80218f94:	10800037 	ldwio	r2,0(r2)
80218f98:	1007883a 	mov	r3,r2
80218f9c:	00bffbc4 	movi	r2,-17
80218fa0:	1884703a 	and	r2,r3,r2
80218fa4:	e0bffb15 	stw	r2,-20(fp)
            & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    /* stopping descriptor */
    temporary_control |= ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
80218fa8:	e0bffb17 	ldw	r2,-20(fp)
80218fac:	10800814 	ori	r2,r2,32
80218fb0:	e0bffb15 	stw	r2,-20(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
80218fb4:	e0bffd17 	ldw	r2,-12(fp)
80218fb8:	10800317 	ldw	r2,12(r2)
80218fbc:	10800104 	addi	r2,r2,4
80218fc0:	e0fffb17 	ldw	r3,-20(fp)
80218fc4:	10c00035 	stwio	r3,0(r2)

    /* clear the CSR status register */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base, 
80218fc8:	e0bffd17 	ldw	r2,-12(fp)
80218fcc:	10800317 	ldw	r2,12(r2)
80218fd0:	e0fffd17 	ldw	r3,-12(fp)
80218fd4:	18c00317 	ldw	r3,12(r3)
80218fd8:	18c00037 	ldwio	r3,0(r3)
80218fdc:	10c00035 	stwio	r3,0(r2)
            IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    
    if (dev->prefetcher_enable)
80218fe0:	e0bffd17 	ldw	r2,-12(fp)
80218fe4:	10801783 	ldbu	r2,94(r2)
80218fe8:	10803fcc 	andi	r2,r2,255
80218fec:	10000826 	beq	r2,zero,80219010 <alt_msgdma_init+0x10c>
    {
        /* clear all status bits that are set, since theyre W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base, 
80218ff0:	e0bffd17 	ldw	r2,-12(fp)
80218ff4:	10800617 	ldw	r2,24(r2)
80218ff8:	10800404 	addi	r2,r2,16
80218ffc:	e0fffd17 	ldw	r3,-12(fp)
80219000:	18c00617 	ldw	r3,24(r3)
80219004:	18c00404 	addi	r3,r3,16
80219008:	18c00037 	ldwio	r3,0(r3)
8021900c:	10c00035 	stwio	r3,0(r2)
                IORD_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base));
    }

    /* Register this instance of the msgdma controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_msgdma_list);
80219010:	d1601004 	addi	r5,gp,-32704
80219014:	e13ffd17 	ldw	r4,-12(fp)
80219018:	02193440 	call	80219344 <alt_dev_llist_insert>
8021901c:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
80219020:	e0bffc15 	stw	r2,-16(fp)
            
    if (!error)
80219024:	e0bffc17 	ldw	r2,-16(fp)
80219028:	1000081e 	bne	r2,zero,8021904c <alt_msgdma_init+0x148>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
8021902c:	d8000015 	stw	zero,0(sp)
80219030:	e1fffd17 	ldw	r7,-12(fp)
80219034:	01a00874 	movhi	r6,32801
80219038:	319d0404 	addi	r6,r6,29712
8021903c:	e17fff17 	ldw	r5,-4(fp)
80219040:	e13ffe17 	ldw	r4,-8(fp)
80219044:	02195380 	call	80219538 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }
    
    return;
80219048:	00000406 	br	8021905c <alt_msgdma_init+0x158>
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
8021904c:	012008b4 	movhi	r4,32802
80219050:	212ddf04 	addi	r4,r4,-18564
80219054:	0219b6c0 	call	80219b6c <alt_printf>
    }
    
    return;
80219058:	0001883a 	nop

}
8021905c:	e037883a 	mov	sp,fp
80219060:	dfc00117 	ldw	ra,4(sp)
80219064:	df000017 	ldw	fp,0(sp)
80219068:	dec00204 	addi	sp,sp,8
8021906c:	f800283a 	ret

80219070 <alt_msgdma_register_callback>:
void alt_msgdma_register_callback(
    alt_msgdma_dev *dev,
    alt_msgdma_callback callback,
    alt_u32 control,
    void *context)
{
80219070:	defffb04 	addi	sp,sp,-20
80219074:	df000415 	stw	fp,16(sp)
80219078:	df000404 	addi	fp,sp,16
8021907c:	e13ffc15 	stw	r4,-16(fp)
80219080:	e17ffd15 	stw	r5,-12(fp)
80219084:	e1bffe15 	stw	r6,-8(fp)
80219088:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
8021908c:	e0bffc17 	ldw	r2,-16(fp)
80219090:	e0fffd17 	ldw	r3,-12(fp)
80219094:	10c00b15 	stw	r3,44(r2)
    dev->callback_context = context;
80219098:	e0bffc17 	ldw	r2,-16(fp)
8021909c:	e0ffff17 	ldw	r3,-4(fp)
802190a0:	10c00c15 	stw	r3,48(r2)
    dev->control          = control;
802190a4:	e0bffc17 	ldw	r2,-16(fp)
802190a8:	e0fffe17 	ldw	r3,-8(fp)
802190ac:	10c00d15 	stw	r3,52(r2)

    return ;
802190b0:	0001883a 	nop
}
802190b4:	e037883a 	mov	sp,fp
802190b8:	df000017 	ldw	fp,0(sp)
802190bc:	dec00104 	addi	sp,sp,4
802190c0:	f800283a 	ret

802190c4 <alt_msgdma_standard_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_standard_descriptor_async_transfer(
    alt_msgdma_dev *dev,
    alt_msgdma_standard_descriptor *desc)
{
802190c4:	defffc04 	addi	sp,sp,-16
802190c8:	dfc00315 	stw	ra,12(sp)
802190cc:	df000215 	stw	fp,8(sp)
802190d0:	df000204 	addi	fp,sp,8
802190d4:	e13ffe15 	stw	r4,-8(fp)
802190d8:	e17fff15 	stw	r5,-4(fp)
   /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
    return alt_msgdma_descriptor_async_transfer(dev, desc, NULL);
802190dc:	000d883a 	mov	r6,zero
802190e0:	e17fff17 	ldw	r5,-4(fp)
802190e4:	e13ffe17 	ldw	r4,-8(fp)
802190e8:	02177740 	call	80217774 <alt_msgdma_descriptor_async_transfer>

}
802190ec:	e037883a 	mov	sp,fp
802190f0:	dfc00117 	ldw	ra,4(sp)
802190f4:	df000017 	ldw	fp,0(sp)
802190f8:	dec00204 	addi	sp,sp,8
802190fc:	f800283a 	ret

80219100 <alt_msgdma_extended_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_extended_descriptor_async_transfer(
    alt_msgdma_dev *dev,
    alt_msgdma_extended_descriptor *desc)
{
80219100:	defffc04 	addi	sp,sp,-16
80219104:	dfc00315 	stw	ra,12(sp)
80219108:	df000215 	stw	fp,8(sp)
8021910c:	df000204 	addi	fp,sp,8
80219110:	e13ffe15 	stw	r4,-8(fp)
80219114:	e17fff15 	stw	r5,-4(fp)
    /*
    * Error detection/handling should be performed at the application
    * or callback level as appropriate.
    */
    return alt_msgdma_descriptor_async_transfer(dev, NULL, desc);
80219118:	e1bfff17 	ldw	r6,-4(fp)
8021911c:	000b883a 	mov	r5,zero
80219120:	e13ffe17 	ldw	r4,-8(fp)
80219124:	02177740 	call	80217774 <alt_msgdma_descriptor_async_transfer>
}
80219128:	e037883a 	mov	sp,fp
8021912c:	dfc00117 	ldw	ra,4(sp)
80219130:	df000017 	ldw	fp,0(sp)
80219134:	dec00204 	addi	sp,sp,8
80219138:	f800283a 	ret

8021913c <alt_msgdma_standard_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_standard_descriptor_sync_transfer(
    alt_msgdma_dev *dev,
    alt_msgdma_standard_descriptor *desc)
{
8021913c:	defffc04 	addi	sp,sp,-16
80219140:	dfc00315 	stw	ra,12(sp)
80219144:	df000215 	stw	fp,8(sp)
80219148:	df000204 	addi	fp,sp,8
8021914c:	e13ffe15 	stw	r4,-8(fp)
80219150:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, desc, NULL);
80219154:	000d883a 	mov	r6,zero
80219158:	e17fff17 	ldw	r5,-4(fp)
8021915c:	e13ffe17 	ldw	r4,-8(fp)
80219160:	0217a440 	call	80217a44 <alt_msgdma_descriptor_sync_transfer>
}
80219164:	e037883a 	mov	sp,fp
80219168:	dfc00117 	ldw	ra,4(sp)
8021916c:	df000017 	ldw	fp,0(sp)
80219170:	dec00204 	addi	sp,sp,8
80219174:	f800283a 	ret

80219178 <alt_msgdma_extended_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_extended_descriptor_sync_transfer(
    alt_msgdma_dev *dev,
    alt_msgdma_extended_descriptor *desc)
{
80219178:	defffc04 	addi	sp,sp,-16
8021917c:	dfc00315 	stw	ra,12(sp)
80219180:	df000215 	stw	fp,8(sp)
80219184:	df000204 	addi	fp,sp,8
80219188:	e13ffe15 	stw	r4,-8(fp)
8021918c:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, NULL, desc);
80219190:	e1bfff17 	ldw	r6,-4(fp)
80219194:	000b883a 	mov	r5,zero
80219198:	e13ffe17 	ldw	r4,-8(fp)
8021919c:	0217a440 	call	80217a44 <alt_msgdma_descriptor_sync_transfer>
}
802191a0:	e037883a 	mov	sp,fp
802191a4:	dfc00117 	ldw	ra,4(sp)
802191a8:	df000017 	ldw	fp,0(sp)
802191ac:	dec00204 	addi	sp,sp,8
802191b0:	f800283a 	ret

802191b4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
802191b4:	defff504 	addi	sp,sp,-44
802191b8:	df000a15 	stw	fp,40(sp)
802191bc:	df000a04 	addi	fp,sp,40
802191c0:	e13ffc15 	stw	r4,-16(fp)
802191c4:	e17ffd15 	stw	r5,-12(fp)
802191c8:	e1bffe15 	stw	r6,-8(fp)
802191cc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
802191d0:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
802191d4:	d0a02417 	ldw	r2,-32624(gp)
  
  if (alt_ticks_per_second ())
802191d8:	10003c26 	beq	r2,zero,802192cc <alt_alarm_start+0x118>
  {
    if (alarm)
802191dc:	e0bffc17 	ldw	r2,-16(fp)
802191e0:	10003826 	beq	r2,zero,802192c4 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
802191e4:	e0bffc17 	ldw	r2,-16(fp)
802191e8:	e0fffe17 	ldw	r3,-8(fp)
802191ec:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
802191f0:	e0bffc17 	ldw	r2,-16(fp)
802191f4:	e0ffff17 	ldw	r3,-4(fp)
802191f8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
802191fc:	0005303a 	rdctl	r2,status
80219200:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80219204:	e0fff917 	ldw	r3,-28(fp)
80219208:	00bfff84 	movi	r2,-2
8021920c:	1884703a 	and	r2,r3,r2
80219210:	1001703a 	wrctl	status,r2
  
  return context;
80219214:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
80219218:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
8021921c:	d0a02517 	ldw	r2,-32620(gp)
      
      current_nticks = alt_nticks();
80219220:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
80219224:	e0fffd17 	ldw	r3,-12(fp)
80219228:	e0bff617 	ldw	r2,-40(fp)
8021922c:	1885883a 	add	r2,r3,r2
80219230:	10c00044 	addi	r3,r2,1
80219234:	e0bffc17 	ldw	r2,-16(fp)
80219238:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
8021923c:	e0bffc17 	ldw	r2,-16(fp)
80219240:	10c00217 	ldw	r3,8(r2)
80219244:	e0bff617 	ldw	r2,-40(fp)
80219248:	1880042e 	bgeu	r3,r2,8021925c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
8021924c:	e0bffc17 	ldw	r2,-16(fp)
80219250:	00c00044 	movi	r3,1
80219254:	10c00405 	stb	r3,16(r2)
80219258:	00000206 	br	80219264 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
8021925c:	e0bffc17 	ldw	r2,-16(fp)
80219260:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
80219264:	e0bffc17 	ldw	r2,-16(fp)
80219268:	d0e00e04 	addi	r3,gp,-32712
8021926c:	e0fffa15 	stw	r3,-24(fp)
80219270:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
80219274:	e0bffb17 	ldw	r2,-20(fp)
80219278:	e0fffa17 	ldw	r3,-24(fp)
8021927c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
80219280:	e0bffa17 	ldw	r2,-24(fp)
80219284:	10c00017 	ldw	r3,0(r2)
80219288:	e0bffb17 	ldw	r2,-20(fp)
8021928c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
80219290:	e0bffa17 	ldw	r2,-24(fp)
80219294:	10800017 	ldw	r2,0(r2)
80219298:	e0fffb17 	ldw	r3,-20(fp)
8021929c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
802192a0:	e0bffa17 	ldw	r2,-24(fp)
802192a4:	e0fffb17 	ldw	r3,-20(fp)
802192a8:	10c00015 	stw	r3,0(r2)
802192ac:	e0bff817 	ldw	r2,-32(fp)
802192b0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
802192b4:	e0bff717 	ldw	r2,-36(fp)
802192b8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
802192bc:	0005883a 	mov	r2,zero
802192c0:	00000306 	br	802192d0 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
802192c4:	00bffa84 	movi	r2,-22
802192c8:	00000106 	br	802192d0 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
802192cc:	00bfde84 	movi	r2,-134
  }
}
802192d0:	e037883a 	mov	sp,fp
802192d4:	df000017 	ldw	fp,0(sp)
802192d8:	dec00104 	addi	sp,sp,4
802192dc:	f800283a 	ret

802192e0 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
802192e0:	defffd04 	addi	sp,sp,-12
802192e4:	df000215 	stw	fp,8(sp)
802192e8:	df000204 	addi	fp,sp,8
802192ec:	e13ffe15 	stw	r4,-8(fp)
802192f0:	e17fff15 	stw	r5,-4(fp)
  {
    ALT_FLUSH_DATA(i);
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
802192f4:	0001883a 	nop
802192f8:	e037883a 	mov	sp,fp
802192fc:	df000017 	ldw	fp,0(sp)
80219300:	dec00104 	addi	sp,sp,4
80219304:	f800283a 	ret

80219308 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80219308:	defffe04 	addi	sp,sp,-8
8021930c:	dfc00115 	stw	ra,4(sp)
80219310:	df000015 	stw	fp,0(sp)
80219314:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80219318:	d0a00c17 	ldw	r2,-32720(gp)
8021931c:	10000326 	beq	r2,zero,8021932c <alt_get_errno+0x24>
80219320:	d0a00c17 	ldw	r2,-32720(gp)
80219324:	103ee83a 	callr	r2
80219328:	00000106 	br	80219330 <alt_get_errno+0x28>
8021932c:	d0a02004 	addi	r2,gp,-32640
}
80219330:	e037883a 	mov	sp,fp
80219334:	dfc00117 	ldw	ra,4(sp)
80219338:	df000017 	ldw	fp,0(sp)
8021933c:	dec00204 	addi	sp,sp,8
80219340:	f800283a 	ret

80219344 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
80219344:	defffa04 	addi	sp,sp,-24
80219348:	dfc00515 	stw	ra,20(sp)
8021934c:	df000415 	stw	fp,16(sp)
80219350:	df000404 	addi	fp,sp,16
80219354:	e13ffe15 	stw	r4,-8(fp)
80219358:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
8021935c:	e0bffe17 	ldw	r2,-8(fp)
80219360:	10000326 	beq	r2,zero,80219370 <alt_dev_llist_insert+0x2c>
80219364:	e0bffe17 	ldw	r2,-8(fp)
80219368:	10800217 	ldw	r2,8(r2)
8021936c:	1000061e 	bne	r2,zero,80219388 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
80219370:	02193080 	call	80219308 <alt_get_errno>
80219374:	1007883a 	mov	r3,r2
80219378:	00800584 	movi	r2,22
8021937c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
80219380:	00bffa84 	movi	r2,-22
80219384:	00001306 	br	802193d4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
80219388:	e0bffe17 	ldw	r2,-8(fp)
8021938c:	e0ffff17 	ldw	r3,-4(fp)
80219390:	e0fffc15 	stw	r3,-16(fp)
80219394:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
80219398:	e0bffd17 	ldw	r2,-12(fp)
8021939c:	e0fffc17 	ldw	r3,-16(fp)
802193a0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
802193a4:	e0bffc17 	ldw	r2,-16(fp)
802193a8:	10c00017 	ldw	r3,0(r2)
802193ac:	e0bffd17 	ldw	r2,-12(fp)
802193b0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
802193b4:	e0bffc17 	ldw	r2,-16(fp)
802193b8:	10800017 	ldw	r2,0(r2)
802193bc:	e0fffd17 	ldw	r3,-12(fp)
802193c0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
802193c4:	e0bffc17 	ldw	r2,-16(fp)
802193c8:	e0fffd17 	ldw	r3,-12(fp)
802193cc:	10c00015 	stw	r3,0(r2)

  return 0;  
802193d0:	0005883a 	mov	r2,zero
}
802193d4:	e037883a 	mov	sp,fp
802193d8:	dfc00117 	ldw	ra,4(sp)
802193dc:	df000017 	ldw	fp,0(sp)
802193e0:	dec00204 	addi	sp,sp,8
802193e4:	f800283a 	ret

802193e8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
802193e8:	defffd04 	addi	sp,sp,-12
802193ec:	dfc00215 	stw	ra,8(sp)
802193f0:	df000115 	stw	fp,4(sp)
802193f4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
802193f8:	00a008b4 	movhi	r2,32802
802193fc:	10a94e04 	addi	r2,r2,-23240
80219400:	e0bfff15 	stw	r2,-4(fp)
80219404:	00000606 	br	80219420 <_do_ctors+0x38>
        (*ctor) (); 
80219408:	e0bfff17 	ldw	r2,-4(fp)
8021940c:	10800017 	ldw	r2,0(r2)
80219410:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
80219414:	e0bfff17 	ldw	r2,-4(fp)
80219418:	10bfff04 	addi	r2,r2,-4
8021941c:	e0bfff15 	stw	r2,-4(fp)
80219420:	e0ffff17 	ldw	r3,-4(fp)
80219424:	00a008b4 	movhi	r2,32802
80219428:	10a94f04 	addi	r2,r2,-23236
8021942c:	18bff62e 	bgeu	r3,r2,80219408 <__reset+0xfa1f9408>
        (*ctor) (); 
}
80219430:	0001883a 	nop
80219434:	e037883a 	mov	sp,fp
80219438:	dfc00117 	ldw	ra,4(sp)
8021943c:	df000017 	ldw	fp,0(sp)
80219440:	dec00204 	addi	sp,sp,8
80219444:	f800283a 	ret

80219448 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
80219448:	defffd04 	addi	sp,sp,-12
8021944c:	dfc00215 	stw	ra,8(sp)
80219450:	df000115 	stw	fp,4(sp)
80219454:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
80219458:	00a008b4 	movhi	r2,32802
8021945c:	10a94e04 	addi	r2,r2,-23240
80219460:	e0bfff15 	stw	r2,-4(fp)
80219464:	00000606 	br	80219480 <_do_dtors+0x38>
        (*dtor) (); 
80219468:	e0bfff17 	ldw	r2,-4(fp)
8021946c:	10800017 	ldw	r2,0(r2)
80219470:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
80219474:	e0bfff17 	ldw	r2,-4(fp)
80219478:	10bfff04 	addi	r2,r2,-4
8021947c:	e0bfff15 	stw	r2,-4(fp)
80219480:	e0ffff17 	ldw	r3,-4(fp)
80219484:	00a008b4 	movhi	r2,32802
80219488:	10a94f04 	addi	r2,r2,-23236
8021948c:	18bff62e 	bgeu	r3,r2,80219468 <__reset+0xfa1f9468>
        (*dtor) (); 
}
80219490:	0001883a 	nop
80219494:	e037883a 	mov	sp,fp
80219498:	dfc00117 	ldw	ra,4(sp)
8021949c:	df000017 	ldw	fp,0(sp)
802194a0:	dec00204 	addi	sp,sp,8
802194a4:	f800283a 	ret

802194a8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
802194a8:	defffa04 	addi	sp,sp,-24
802194ac:	dfc00515 	stw	ra,20(sp)
802194b0:	df000415 	stw	fp,16(sp)
802194b4:	df000404 	addi	fp,sp,16
802194b8:	e13ffe15 	stw	r4,-8(fp)
802194bc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
802194c0:	e0bfff17 	ldw	r2,-4(fp)
802194c4:	10800017 	ldw	r2,0(r2)
802194c8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
802194cc:	e13ffe17 	ldw	r4,-8(fp)
802194d0:	02055000 	call	80205500 <strlen>
802194d4:	10800044 	addi	r2,r2,1
802194d8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
802194dc:	00000d06 	br	80219514 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
802194e0:	e0bffc17 	ldw	r2,-16(fp)
802194e4:	10800217 	ldw	r2,8(r2)
802194e8:	e0fffd17 	ldw	r3,-12(fp)
802194ec:	180d883a 	mov	r6,r3
802194f0:	e17ffe17 	ldw	r5,-8(fp)
802194f4:	1009883a 	mov	r4,r2
802194f8:	021a08c0 	call	8021a08c <memcmp>
802194fc:	1000021e 	bne	r2,zero,80219508 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
80219500:	e0bffc17 	ldw	r2,-16(fp)
80219504:	00000706 	br	80219524 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
80219508:	e0bffc17 	ldw	r2,-16(fp)
8021950c:	10800017 	ldw	r2,0(r2)
80219510:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
80219514:	e0fffc17 	ldw	r3,-16(fp)
80219518:	e0bfff17 	ldw	r2,-4(fp)
8021951c:	18bff01e 	bne	r3,r2,802194e0 <__reset+0xfa1f94e0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
80219520:	0005883a 	mov	r2,zero
}
80219524:	e037883a 	mov	sp,fp
80219528:	dfc00117 	ldw	ra,4(sp)
8021952c:	df000017 	ldw	fp,0(sp)
80219530:	dec00204 	addi	sp,sp,8
80219534:	f800283a 	ret

80219538 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
80219538:	defff904 	addi	sp,sp,-28
8021953c:	dfc00615 	stw	ra,24(sp)
80219540:	df000515 	stw	fp,20(sp)
80219544:	df000504 	addi	fp,sp,20
80219548:	e13ffc15 	stw	r4,-16(fp)
8021954c:	e17ffd15 	stw	r5,-12(fp)
80219550:	e1bffe15 	stw	r6,-8(fp)
80219554:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
80219558:	e0800217 	ldw	r2,8(fp)
8021955c:	d8800015 	stw	r2,0(sp)
80219560:	e1ffff17 	ldw	r7,-4(fp)
80219564:	e1bffe17 	ldw	r6,-8(fp)
80219568:	e17ffd17 	ldw	r5,-12(fp)
8021956c:	e13ffc17 	ldw	r4,-16(fp)
80219570:	02196e80 	call	802196e8 <alt_iic_isr_register>
}  
80219574:	e037883a 	mov	sp,fp
80219578:	dfc00117 	ldw	ra,4(sp)
8021957c:	df000017 	ldw	fp,0(sp)
80219580:	dec00204 	addi	sp,sp,8
80219584:	f800283a 	ret

80219588 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
80219588:	defff904 	addi	sp,sp,-28
8021958c:	df000615 	stw	fp,24(sp)
80219590:	df000604 	addi	fp,sp,24
80219594:	e13ffe15 	stw	r4,-8(fp)
80219598:	e17fff15 	stw	r5,-4(fp)
8021959c:	e0bfff17 	ldw	r2,-4(fp)
802195a0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
802195a4:	0005303a 	rdctl	r2,status
802195a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
802195ac:	e0fffb17 	ldw	r3,-20(fp)
802195b0:	00bfff84 	movi	r2,-2
802195b4:	1884703a 	and	r2,r3,r2
802195b8:	1001703a 	wrctl	status,r2
  
  return context;
802195bc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
802195c0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
802195c4:	00c00044 	movi	r3,1
802195c8:	e0bffa17 	ldw	r2,-24(fp)
802195cc:	1884983a 	sll	r2,r3,r2
802195d0:	1007883a 	mov	r3,r2
802195d4:	d0a02617 	ldw	r2,-32616(gp)
802195d8:	1884b03a 	or	r2,r3,r2
802195dc:	d0a02615 	stw	r2,-32616(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
802195e0:	d0a02617 	ldw	r2,-32616(gp)
802195e4:	100170fa 	wrctl	ienable,r2
802195e8:	e0bffc17 	ldw	r2,-16(fp)
802195ec:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
802195f0:	e0bffd17 	ldw	r2,-12(fp)
802195f4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
802195f8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
802195fc:	0001883a 	nop
}
80219600:	e037883a 	mov	sp,fp
80219604:	df000017 	ldw	fp,0(sp)
80219608:	dec00104 	addi	sp,sp,4
8021960c:	f800283a 	ret

80219610 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
80219610:	defff904 	addi	sp,sp,-28
80219614:	df000615 	stw	fp,24(sp)
80219618:	df000604 	addi	fp,sp,24
8021961c:	e13ffe15 	stw	r4,-8(fp)
80219620:	e17fff15 	stw	r5,-4(fp)
80219624:	e0bfff17 	ldw	r2,-4(fp)
80219628:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8021962c:	0005303a 	rdctl	r2,status
80219630:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80219634:	e0fffb17 	ldw	r3,-20(fp)
80219638:	00bfff84 	movi	r2,-2
8021963c:	1884703a 	and	r2,r3,r2
80219640:	1001703a 	wrctl	status,r2
  
  return context;
80219644:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
80219648:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
8021964c:	00c00044 	movi	r3,1
80219650:	e0bffa17 	ldw	r2,-24(fp)
80219654:	1884983a 	sll	r2,r3,r2
80219658:	0084303a 	nor	r2,zero,r2
8021965c:	1007883a 	mov	r3,r2
80219660:	d0a02617 	ldw	r2,-32616(gp)
80219664:	1884703a 	and	r2,r3,r2
80219668:	d0a02615 	stw	r2,-32616(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
8021966c:	d0a02617 	ldw	r2,-32616(gp)
80219670:	100170fa 	wrctl	ienable,r2
80219674:	e0bffc17 	ldw	r2,-16(fp)
80219678:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8021967c:	e0bffd17 	ldw	r2,-12(fp)
80219680:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
80219684:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
80219688:	0001883a 	nop
}
8021968c:	e037883a 	mov	sp,fp
80219690:	df000017 	ldw	fp,0(sp)
80219694:	dec00104 	addi	sp,sp,4
80219698:	f800283a 	ret

8021969c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
8021969c:	defffc04 	addi	sp,sp,-16
802196a0:	df000315 	stw	fp,12(sp)
802196a4:	df000304 	addi	fp,sp,12
802196a8:	e13ffe15 	stw	r4,-8(fp)
802196ac:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
802196b0:	000530fa 	rdctl	r2,ienable
802196b4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
802196b8:	00c00044 	movi	r3,1
802196bc:	e0bfff17 	ldw	r2,-4(fp)
802196c0:	1884983a 	sll	r2,r3,r2
802196c4:	1007883a 	mov	r3,r2
802196c8:	e0bffd17 	ldw	r2,-12(fp)
802196cc:	1884703a 	and	r2,r3,r2
802196d0:	1004c03a 	cmpne	r2,r2,zero
802196d4:	10803fcc 	andi	r2,r2,255
}
802196d8:	e037883a 	mov	sp,fp
802196dc:	df000017 	ldw	fp,0(sp)
802196e0:	dec00104 	addi	sp,sp,4
802196e4:	f800283a 	ret

802196e8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
802196e8:	defff504 	addi	sp,sp,-44
802196ec:	dfc00a15 	stw	ra,40(sp)
802196f0:	df000915 	stw	fp,36(sp)
802196f4:	df000904 	addi	fp,sp,36
802196f8:	e13ffc15 	stw	r4,-16(fp)
802196fc:	e17ffd15 	stw	r5,-12(fp)
80219700:	e1bffe15 	stw	r6,-8(fp)
80219704:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
80219708:	00bffa84 	movi	r2,-22
8021970c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
80219710:	e0bffd17 	ldw	r2,-12(fp)
80219714:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
80219718:	e0bff817 	ldw	r2,-32(fp)
8021971c:	10800808 	cmpgei	r2,r2,32
80219720:	1000271e 	bne	r2,zero,802197c0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80219724:	0005303a 	rdctl	r2,status
80219728:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8021972c:	e0fffb17 	ldw	r3,-20(fp)
80219730:	00bfff84 	movi	r2,-2
80219734:	1884703a 	and	r2,r3,r2
80219738:	1001703a 	wrctl	status,r2
  
  return context;
8021973c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
80219740:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
80219744:	00a008b4 	movhi	r2,32802
80219748:	10b67504 	addi	r2,r2,-9772
8021974c:	e0fff817 	ldw	r3,-32(fp)
80219750:	180690fa 	slli	r3,r3,3
80219754:	10c5883a 	add	r2,r2,r3
80219758:	e0fffe17 	ldw	r3,-8(fp)
8021975c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
80219760:	00a008b4 	movhi	r2,32802
80219764:	10b67504 	addi	r2,r2,-9772
80219768:	e0fff817 	ldw	r3,-32(fp)
8021976c:	180690fa 	slli	r3,r3,3
80219770:	10c5883a 	add	r2,r2,r3
80219774:	10800104 	addi	r2,r2,4
80219778:	e0ffff17 	ldw	r3,-4(fp)
8021977c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
80219780:	e0bffe17 	ldw	r2,-8(fp)
80219784:	10000526 	beq	r2,zero,8021979c <alt_iic_isr_register+0xb4>
80219788:	e0bff817 	ldw	r2,-32(fp)
8021978c:	100b883a 	mov	r5,r2
80219790:	e13ffc17 	ldw	r4,-16(fp)
80219794:	02195880 	call	80219588 <alt_ic_irq_enable>
80219798:	00000406 	br	802197ac <alt_iic_isr_register+0xc4>
8021979c:	e0bff817 	ldw	r2,-32(fp)
802197a0:	100b883a 	mov	r5,r2
802197a4:	e13ffc17 	ldw	r4,-16(fp)
802197a8:	02196100 	call	80219610 <alt_ic_irq_disable>
802197ac:	e0bff715 	stw	r2,-36(fp)
802197b0:	e0bffa17 	ldw	r2,-24(fp)
802197b4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
802197b8:	e0bff917 	ldw	r2,-28(fp)
802197bc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
802197c0:	e0bff717 	ldw	r2,-36(fp)
}
802197c4:	e037883a 	mov	sp,fp
802197c8:	dfc00117 	ldw	ra,4(sp)
802197cc:	df000017 	ldw	fp,0(sp)
802197d0:	dec00204 	addi	sp,sp,8
802197d4:	f800283a 	ret

802197d8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
802197d8:	defff904 	addi	sp,sp,-28
802197dc:	dfc00615 	stw	ra,24(sp)
802197e0:	df000515 	stw	fp,20(sp)
802197e4:	df000504 	addi	fp,sp,20
802197e8:	e13ffc15 	stw	r4,-16(fp)
802197ec:	e17ffd15 	stw	r5,-12(fp)
802197f0:	e1bffe15 	stw	r6,-8(fp)
802197f4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
802197f8:	e1bfff17 	ldw	r6,-4(fp)
802197fc:	e17ffe17 	ldw	r5,-8(fp)
80219800:	e13ffd17 	ldw	r4,-12(fp)
80219804:	0219a180 	call	80219a18 <open>
80219808:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
8021980c:	e0bffb17 	ldw	r2,-20(fp)
80219810:	10001c16 	blt	r2,zero,80219884 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
80219814:	00a008b4 	movhi	r2,32802
80219818:	10b01b04 	addi	r2,r2,-16276
8021981c:	e0fffb17 	ldw	r3,-20(fp)
80219820:	18c00324 	muli	r3,r3,12
80219824:	10c5883a 	add	r2,r2,r3
80219828:	10c00017 	ldw	r3,0(r2)
8021982c:	e0bffc17 	ldw	r2,-16(fp)
80219830:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
80219834:	00a008b4 	movhi	r2,32802
80219838:	10b01b04 	addi	r2,r2,-16276
8021983c:	e0fffb17 	ldw	r3,-20(fp)
80219840:	18c00324 	muli	r3,r3,12
80219844:	10c5883a 	add	r2,r2,r3
80219848:	10800104 	addi	r2,r2,4
8021984c:	10c00017 	ldw	r3,0(r2)
80219850:	e0bffc17 	ldw	r2,-16(fp)
80219854:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
80219858:	00a008b4 	movhi	r2,32802
8021985c:	10b01b04 	addi	r2,r2,-16276
80219860:	e0fffb17 	ldw	r3,-20(fp)
80219864:	18c00324 	muli	r3,r3,12
80219868:	10c5883a 	add	r2,r2,r3
8021986c:	10800204 	addi	r2,r2,8
80219870:	10c00017 	ldw	r3,0(r2)
80219874:	e0bffc17 	ldw	r2,-16(fp)
80219878:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
8021987c:	e13ffb17 	ldw	r4,-20(fp)
80219880:	02158700 	call	80215870 <alt_release_fd>
  }
} 
80219884:	0001883a 	nop
80219888:	e037883a 	mov	sp,fp
8021988c:	dfc00117 	ldw	ra,4(sp)
80219890:	df000017 	ldw	fp,0(sp)
80219894:	dec00204 	addi	sp,sp,8
80219898:	f800283a 	ret

8021989c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
8021989c:	defffb04 	addi	sp,sp,-20
802198a0:	dfc00415 	stw	ra,16(sp)
802198a4:	df000315 	stw	fp,12(sp)
802198a8:	df000304 	addi	fp,sp,12
802198ac:	e13ffd15 	stw	r4,-12(fp)
802198b0:	e17ffe15 	stw	r5,-8(fp)
802198b4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
802198b8:	01c07fc4 	movi	r7,511
802198bc:	01800044 	movi	r6,1
802198c0:	e17ffd17 	ldw	r5,-12(fp)
802198c4:	012008b4 	movhi	r4,32802
802198c8:	21301e04 	addi	r4,r4,-16264
802198cc:	02197d80 	call	802197d8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
802198d0:	01c07fc4 	movi	r7,511
802198d4:	000d883a 	mov	r6,zero
802198d8:	e17ffe17 	ldw	r5,-8(fp)
802198dc:	012008b4 	movhi	r4,32802
802198e0:	21301b04 	addi	r4,r4,-16276
802198e4:	02197d80 	call	802197d8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
802198e8:	01c07fc4 	movi	r7,511
802198ec:	01800044 	movi	r6,1
802198f0:	e17fff17 	ldw	r5,-4(fp)
802198f4:	012008b4 	movhi	r4,32802
802198f8:	21302104 	addi	r4,r4,-16252
802198fc:	02197d80 	call	802197d8 <alt_open_fd>
}  
80219900:	0001883a 	nop
80219904:	e037883a 	mov	sp,fp
80219908:	dfc00117 	ldw	ra,4(sp)
8021990c:	df000017 	ldw	fp,0(sp)
80219910:	dec00204 	addi	sp,sp,8
80219914:	f800283a 	ret

80219918 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80219918:	defffe04 	addi	sp,sp,-8
8021991c:	dfc00115 	stw	ra,4(sp)
80219920:	df000015 	stw	fp,0(sp)
80219924:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80219928:	d0a00c17 	ldw	r2,-32720(gp)
8021992c:	10000326 	beq	r2,zero,8021993c <alt_get_errno+0x24>
80219930:	d0a00c17 	ldw	r2,-32720(gp)
80219934:	103ee83a 	callr	r2
80219938:	00000106 	br	80219940 <alt_get_errno+0x28>
8021993c:	d0a02004 	addi	r2,gp,-32640
}
80219940:	e037883a 	mov	sp,fp
80219944:	dfc00117 	ldw	ra,4(sp)
80219948:	df000017 	ldw	fp,0(sp)
8021994c:	dec00204 	addi	sp,sp,8
80219950:	f800283a 	ret

80219954 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
80219954:	defffd04 	addi	sp,sp,-12
80219958:	df000215 	stw	fp,8(sp)
8021995c:	df000204 	addi	fp,sp,8
80219960:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
80219964:	e0bfff17 	ldw	r2,-4(fp)
80219968:	10800217 	ldw	r2,8(r2)
8021996c:	10d00034 	orhi	r3,r2,16384
80219970:	e0bfff17 	ldw	r2,-4(fp)
80219974:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
80219978:	e03ffe15 	stw	zero,-8(fp)
8021997c:	00001d06 	br	802199f4 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
80219980:	00a008b4 	movhi	r2,32802
80219984:	10b01b04 	addi	r2,r2,-16276
80219988:	e0fffe17 	ldw	r3,-8(fp)
8021998c:	18c00324 	muli	r3,r3,12
80219990:	10c5883a 	add	r2,r2,r3
80219994:	10c00017 	ldw	r3,0(r2)
80219998:	e0bfff17 	ldw	r2,-4(fp)
8021999c:	10800017 	ldw	r2,0(r2)
802199a0:	1880111e 	bne	r3,r2,802199e8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
802199a4:	00a008b4 	movhi	r2,32802
802199a8:	10b01b04 	addi	r2,r2,-16276
802199ac:	e0fffe17 	ldw	r3,-8(fp)
802199b0:	18c00324 	muli	r3,r3,12
802199b4:	10c5883a 	add	r2,r2,r3
802199b8:	10800204 	addi	r2,r2,8
802199bc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
802199c0:	1000090e 	bge	r2,zero,802199e8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
802199c4:	e0bffe17 	ldw	r2,-8(fp)
802199c8:	10c00324 	muli	r3,r2,12
802199cc:	00a008b4 	movhi	r2,32802
802199d0:	10b01b04 	addi	r2,r2,-16276
802199d4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
802199d8:	e0bfff17 	ldw	r2,-4(fp)
802199dc:	18800226 	beq	r3,r2,802199e8 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
802199e0:	00bffcc4 	movi	r2,-13
802199e4:	00000806 	br	80219a08 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
802199e8:	e0bffe17 	ldw	r2,-8(fp)
802199ec:	10800044 	addi	r2,r2,1
802199f0:	e0bffe15 	stw	r2,-8(fp)
802199f4:	d0a00b17 	ldw	r2,-32724(gp)
802199f8:	1007883a 	mov	r3,r2
802199fc:	e0bffe17 	ldw	r2,-8(fp)
80219a00:	18bfdf2e 	bgeu	r3,r2,80219980 <__reset+0xfa1f9980>
    }
  }
  
  /* The device is not locked */
 
  return 0;
80219a04:	0005883a 	mov	r2,zero
}
80219a08:	e037883a 	mov	sp,fp
80219a0c:	df000017 	ldw	fp,0(sp)
80219a10:	dec00104 	addi	sp,sp,4
80219a14:	f800283a 	ret

80219a18 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
80219a18:	defff604 	addi	sp,sp,-40
80219a1c:	dfc00915 	stw	ra,36(sp)
80219a20:	df000815 	stw	fp,32(sp)
80219a24:	df000804 	addi	fp,sp,32
80219a28:	e13ffd15 	stw	r4,-12(fp)
80219a2c:	e17ffe15 	stw	r5,-8(fp)
80219a30:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
80219a34:	00bfffc4 	movi	r2,-1
80219a38:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
80219a3c:	00bffb44 	movi	r2,-19
80219a40:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
80219a44:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
80219a48:	d1600904 	addi	r5,gp,-32732
80219a4c:	e13ffd17 	ldw	r4,-12(fp)
80219a50:	02194a80 	call	802194a8 <alt_find_dev>
80219a54:	e0bff815 	stw	r2,-32(fp)
80219a58:	e0bff817 	ldw	r2,-32(fp)
80219a5c:	1000051e 	bne	r2,zero,80219a74 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
80219a60:	e13ffd17 	ldw	r4,-12(fp)
80219a64:	0219df80 	call	80219df8 <alt_find_file>
80219a68:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
80219a6c:	00800044 	movi	r2,1
80219a70:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
80219a74:	e0bff817 	ldw	r2,-32(fp)
80219a78:	10002926 	beq	r2,zero,80219b20 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
80219a7c:	e13ff817 	ldw	r4,-32(fp)
80219a80:	0219f000 	call	80219f00 <alt_get_fd>
80219a84:	e0bff915 	stw	r2,-28(fp)
80219a88:	e0bff917 	ldw	r2,-28(fp)
80219a8c:	1000030e 	bge	r2,zero,80219a9c <open+0x84>
    {
      status = index;
80219a90:	e0bff917 	ldw	r2,-28(fp)
80219a94:	e0bffa15 	stw	r2,-24(fp)
80219a98:	00002306 	br	80219b28 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
80219a9c:	e0bff917 	ldw	r2,-28(fp)
80219aa0:	10c00324 	muli	r3,r2,12
80219aa4:	00a008b4 	movhi	r2,32802
80219aa8:	10b01b04 	addi	r2,r2,-16276
80219aac:	1885883a 	add	r2,r3,r2
80219ab0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
80219ab4:	e0fffe17 	ldw	r3,-8(fp)
80219ab8:	00900034 	movhi	r2,16384
80219abc:	10bfffc4 	addi	r2,r2,-1
80219ac0:	1886703a 	and	r3,r3,r2
80219ac4:	e0bffc17 	ldw	r2,-16(fp)
80219ac8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
80219acc:	e0bffb17 	ldw	r2,-20(fp)
80219ad0:	1000051e 	bne	r2,zero,80219ae8 <open+0xd0>
80219ad4:	e13ffc17 	ldw	r4,-16(fp)
80219ad8:	02199540 	call	80219954 <alt_file_locked>
80219adc:	e0bffa15 	stw	r2,-24(fp)
80219ae0:	e0bffa17 	ldw	r2,-24(fp)
80219ae4:	10001016 	blt	r2,zero,80219b28 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
80219ae8:	e0bff817 	ldw	r2,-32(fp)
80219aec:	10800317 	ldw	r2,12(r2)
80219af0:	10000826 	beq	r2,zero,80219b14 <open+0xfc>
80219af4:	e0bff817 	ldw	r2,-32(fp)
80219af8:	10800317 	ldw	r2,12(r2)
80219afc:	e1ffff17 	ldw	r7,-4(fp)
80219b00:	e1bffe17 	ldw	r6,-8(fp)
80219b04:	e17ffd17 	ldw	r5,-12(fp)
80219b08:	e13ffc17 	ldw	r4,-16(fp)
80219b0c:	103ee83a 	callr	r2
80219b10:	00000106 	br	80219b18 <open+0x100>
80219b14:	0005883a 	mov	r2,zero
80219b18:	e0bffa15 	stw	r2,-24(fp)
80219b1c:	00000206 	br	80219b28 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
80219b20:	00bffb44 	movi	r2,-19
80219b24:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
80219b28:	e0bffa17 	ldw	r2,-24(fp)
80219b2c:	1000090e 	bge	r2,zero,80219b54 <open+0x13c>
  {
    alt_release_fd (index);  
80219b30:	e13ff917 	ldw	r4,-28(fp)
80219b34:	02158700 	call	80215870 <alt_release_fd>
    ALT_ERRNO = -status;
80219b38:	02199180 	call	80219918 <alt_get_errno>
80219b3c:	1007883a 	mov	r3,r2
80219b40:	e0bffa17 	ldw	r2,-24(fp)
80219b44:	0085c83a 	sub	r2,zero,r2
80219b48:	18800015 	stw	r2,0(r3)
    return -1;
80219b4c:	00bfffc4 	movi	r2,-1
80219b50:	00000106 	br	80219b58 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
80219b54:	e0bff917 	ldw	r2,-28(fp)
}
80219b58:	e037883a 	mov	sp,fp
80219b5c:	dfc00117 	ldw	ra,4(sp)
80219b60:	df000017 	ldw	fp,0(sp)
80219b64:	dec00204 	addi	sp,sp,8
80219b68:	f800283a 	ret

80219b6c <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
80219b6c:	defff204 	addi	sp,sp,-56
80219b70:	dfc00a15 	stw	ra,40(sp)
80219b74:	df000915 	stw	fp,36(sp)
80219b78:	df000904 	addi	fp,sp,36
80219b7c:	e13fff15 	stw	r4,-4(fp)
80219b80:	e1400215 	stw	r5,8(fp)
80219b84:	e1800315 	stw	r6,12(fp)
80219b88:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
80219b8c:	e0800204 	addi	r2,fp,8
80219b90:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
80219b94:	e0bfff17 	ldw	r2,-4(fp)
80219b98:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
80219b9c:	00006f06 	br	80219d5c <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
80219ba0:	e0bff807 	ldb	r2,-32(fp)
80219ba4:	10800960 	cmpeqi	r2,r2,37
80219ba8:	1000041e 	bne	r2,zero,80219bbc <alt_printf+0x50>
        {
            alt_putchar(c);
80219bac:	e0bff807 	ldb	r2,-32(fp)
80219bb0:	1009883a 	mov	r4,r2
80219bb4:	0219d980 	call	80219d98 <alt_putchar>
80219bb8:	00006806 	br	80219d5c <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
80219bbc:	e0bff717 	ldw	r2,-36(fp)
80219bc0:	10c00044 	addi	r3,r2,1
80219bc4:	e0fff715 	stw	r3,-36(fp)
80219bc8:	10800003 	ldbu	r2,0(r2)
80219bcc:	e0bff805 	stb	r2,-32(fp)
80219bd0:	e0bff807 	ldb	r2,-32(fp)
80219bd4:	10006926 	beq	r2,zero,80219d7c <alt_printf+0x210>
            {
                if (c == '%')
80219bd8:	e0bff807 	ldb	r2,-32(fp)
80219bdc:	10800958 	cmpnei	r2,r2,37
80219be0:	1000041e 	bne	r2,zero,80219bf4 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
80219be4:	e0bff807 	ldb	r2,-32(fp)
80219be8:	1009883a 	mov	r4,r2
80219bec:	0219d980 	call	80219d98 <alt_putchar>
80219bf0:	00005a06 	br	80219d5c <alt_printf+0x1f0>
                } 
                else if (c == 'c')
80219bf4:	e0bff807 	ldb	r2,-32(fp)
80219bf8:	108018d8 	cmpnei	r2,r2,99
80219bfc:	1000081e 	bne	r2,zero,80219c20 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
80219c00:	e0bffe17 	ldw	r2,-8(fp)
80219c04:	10c00104 	addi	r3,r2,4
80219c08:	e0fffe15 	stw	r3,-8(fp)
80219c0c:	10800017 	ldw	r2,0(r2)
80219c10:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
80219c14:	e13ffd17 	ldw	r4,-12(fp)
80219c18:	0219d980 	call	80219d98 <alt_putchar>
80219c1c:	00004f06 	br	80219d5c <alt_printf+0x1f0>
                }
                else if (c == 'x')
80219c20:	e0bff807 	ldb	r2,-32(fp)
80219c24:	10801e18 	cmpnei	r2,r2,120
80219c28:	1000341e 	bne	r2,zero,80219cfc <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
80219c2c:	e0bffe17 	ldw	r2,-8(fp)
80219c30:	10c00104 	addi	r3,r2,4
80219c34:	e0fffe15 	stw	r3,-8(fp)
80219c38:	10800017 	ldw	r2,0(r2)
80219c3c:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
80219c40:	e0bffb17 	ldw	r2,-20(fp)
80219c44:	1000031e 	bne	r2,zero,80219c54 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
80219c48:	01000c04 	movi	r4,48
80219c4c:	0219d980 	call	80219d98 <alt_putchar>
                        continue;
80219c50:	00004206 	br	80219d5c <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
80219c54:	00800704 	movi	r2,28
80219c58:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
80219c5c:	00000306 	br	80219c6c <alt_printf+0x100>
                        digit_shift -= 4;
80219c60:	e0bff917 	ldw	r2,-28(fp)
80219c64:	10bfff04 	addi	r2,r2,-4
80219c68:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
80219c6c:	00c003c4 	movi	r3,15
80219c70:	e0bff917 	ldw	r2,-28(fp)
80219c74:	1884983a 	sll	r2,r3,r2
80219c78:	1007883a 	mov	r3,r2
80219c7c:	e0bffb17 	ldw	r2,-20(fp)
80219c80:	1884703a 	and	r2,r3,r2
80219c84:	103ff626 	beq	r2,zero,80219c60 <__reset+0xfa1f9c60>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
80219c88:	00001906 	br	80219cf0 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
80219c8c:	00c003c4 	movi	r3,15
80219c90:	e0bff917 	ldw	r2,-28(fp)
80219c94:	1884983a 	sll	r2,r3,r2
80219c98:	1007883a 	mov	r3,r2
80219c9c:	e0bffb17 	ldw	r2,-20(fp)
80219ca0:	1886703a 	and	r3,r3,r2
80219ca4:	e0bff917 	ldw	r2,-28(fp)
80219ca8:	1884d83a 	srl	r2,r3,r2
80219cac:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
80219cb0:	e0bffc17 	ldw	r2,-16(fp)
80219cb4:	108002a8 	cmpgeui	r2,r2,10
80219cb8:	1000041e 	bne	r2,zero,80219ccc <alt_printf+0x160>
                            c = '0' + digit;
80219cbc:	e0bffc17 	ldw	r2,-16(fp)
80219cc0:	10800c04 	addi	r2,r2,48
80219cc4:	e0bff805 	stb	r2,-32(fp)
80219cc8:	00000306 	br	80219cd8 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
80219ccc:	e0bffc17 	ldw	r2,-16(fp)
80219cd0:	108015c4 	addi	r2,r2,87
80219cd4:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
80219cd8:	e0bff807 	ldb	r2,-32(fp)
80219cdc:	1009883a 	mov	r4,r2
80219ce0:	0219d980 	call	80219d98 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
80219ce4:	e0bff917 	ldw	r2,-28(fp)
80219ce8:	10bfff04 	addi	r2,r2,-4
80219cec:	e0bff915 	stw	r2,-28(fp)
80219cf0:	e0bff917 	ldw	r2,-28(fp)
80219cf4:	103fe50e 	bge	r2,zero,80219c8c <__reset+0xfa1f9c8c>
80219cf8:	00001806 	br	80219d5c <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
80219cfc:	e0bff807 	ldb	r2,-32(fp)
80219d00:	10801cd8 	cmpnei	r2,r2,115
80219d04:	1000151e 	bne	r2,zero,80219d5c <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
80219d08:	e0bffe17 	ldw	r2,-8(fp)
80219d0c:	10c00104 	addi	r3,r2,4
80219d10:	e0fffe15 	stw	r3,-8(fp)
80219d14:	10800017 	ldw	r2,0(r2)
80219d18:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
80219d1c:	00000906 	br	80219d44 <alt_printf+0x1d8>
                      alt_putchar(*s++);
80219d20:	e0bffa17 	ldw	r2,-24(fp)
80219d24:	10c00044 	addi	r3,r2,1
80219d28:	e0fffa15 	stw	r3,-24(fp)
80219d2c:	10800003 	ldbu	r2,0(r2)
80219d30:	10803fcc 	andi	r2,r2,255
80219d34:	1080201c 	xori	r2,r2,128
80219d38:	10bfe004 	addi	r2,r2,-128
80219d3c:	1009883a 	mov	r4,r2
80219d40:	0219d980 	call	80219d98 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
80219d44:	e0bffa17 	ldw	r2,-24(fp)
80219d48:	10800003 	ldbu	r2,0(r2)
80219d4c:	10803fcc 	andi	r2,r2,255
80219d50:	1080201c 	xori	r2,r2,128
80219d54:	10bfe004 	addi	r2,r2,-128
80219d58:	103ff11e 	bne	r2,zero,80219d20 <__reset+0xfa1f9d20>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
80219d5c:	e0bff717 	ldw	r2,-36(fp)
80219d60:	10c00044 	addi	r3,r2,1
80219d64:	e0fff715 	stw	r3,-36(fp)
80219d68:	10800003 	ldbu	r2,0(r2)
80219d6c:	e0bff805 	stb	r2,-32(fp)
80219d70:	e0bff807 	ldb	r2,-32(fp)
80219d74:	103f8a1e 	bne	r2,zero,80219ba0 <__reset+0xfa1f9ba0>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
80219d78:	00000106 	br	80219d80 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
80219d7c:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
80219d80:	0001883a 	nop
80219d84:	e037883a 	mov	sp,fp
80219d88:	dfc00117 	ldw	ra,4(sp)
80219d8c:	df000017 	ldw	fp,0(sp)
80219d90:	dec00504 	addi	sp,sp,20
80219d94:	f800283a 	ret

80219d98 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
80219d98:	defffd04 	addi	sp,sp,-12
80219d9c:	dfc00215 	stw	ra,8(sp)
80219da0:	df000115 	stw	fp,4(sp)
80219da4:	df000104 	addi	fp,sp,4
80219da8:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
80219dac:	d0a00217 	ldw	r2,-32760(gp)
80219db0:	10800217 	ldw	r2,8(r2)
80219db4:	100b883a 	mov	r5,r2
80219db8:	e13fff17 	ldw	r4,-4(fp)
80219dbc:	021a1a80 	call	8021a1a8 <putc>
#endif
#endif
}
80219dc0:	e037883a 	mov	sp,fp
80219dc4:	dfc00117 	ldw	ra,4(sp)
80219dc8:	df000017 	ldw	fp,0(sp)
80219dcc:	dec00204 	addi	sp,sp,8
80219dd0:	f800283a 	ret

80219dd4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
80219dd4:	deffff04 	addi	sp,sp,-4
80219dd8:	df000015 	stw	fp,0(sp)
80219ddc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
80219de0:	000170fa 	wrctl	ienable,zero
}
80219de4:	0001883a 	nop
80219de8:	e037883a 	mov	sp,fp
80219dec:	df000017 	ldw	fp,0(sp)
80219df0:	dec00104 	addi	sp,sp,4
80219df4:	f800283a 	ret

80219df8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
80219df8:	defffb04 	addi	sp,sp,-20
80219dfc:	dfc00415 	stw	ra,16(sp)
80219e00:	df000315 	stw	fp,12(sp)
80219e04:	df000304 	addi	fp,sp,12
80219e08:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
80219e0c:	d0a00717 	ldw	r2,-32740(gp)
80219e10:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
80219e14:	00003106 	br	80219edc <alt_find_file+0xe4>
  {
    len = strlen(next->name);
80219e18:	e0bffd17 	ldw	r2,-12(fp)
80219e1c:	10800217 	ldw	r2,8(r2)
80219e20:	1009883a 	mov	r4,r2
80219e24:	02055000 	call	80205500 <strlen>
80219e28:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
80219e2c:	e0bffd17 	ldw	r2,-12(fp)
80219e30:	10c00217 	ldw	r3,8(r2)
80219e34:	e0bffe17 	ldw	r2,-8(fp)
80219e38:	10bfffc4 	addi	r2,r2,-1
80219e3c:	1885883a 	add	r2,r3,r2
80219e40:	10800003 	ldbu	r2,0(r2)
80219e44:	10803fcc 	andi	r2,r2,255
80219e48:	1080201c 	xori	r2,r2,128
80219e4c:	10bfe004 	addi	r2,r2,-128
80219e50:	10800bd8 	cmpnei	r2,r2,47
80219e54:	1000031e 	bne	r2,zero,80219e64 <alt_find_file+0x6c>
    {
      len -= 1;
80219e58:	e0bffe17 	ldw	r2,-8(fp)
80219e5c:	10bfffc4 	addi	r2,r2,-1
80219e60:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
80219e64:	e0bffe17 	ldw	r2,-8(fp)
80219e68:	e0ffff17 	ldw	r3,-4(fp)
80219e6c:	1885883a 	add	r2,r3,r2
80219e70:	10800003 	ldbu	r2,0(r2)
80219e74:	10803fcc 	andi	r2,r2,255
80219e78:	1080201c 	xori	r2,r2,128
80219e7c:	10bfe004 	addi	r2,r2,-128
80219e80:	10800be0 	cmpeqi	r2,r2,47
80219e84:	1000081e 	bne	r2,zero,80219ea8 <alt_find_file+0xb0>
80219e88:	e0bffe17 	ldw	r2,-8(fp)
80219e8c:	e0ffff17 	ldw	r3,-4(fp)
80219e90:	1885883a 	add	r2,r3,r2
80219e94:	10800003 	ldbu	r2,0(r2)
80219e98:	10803fcc 	andi	r2,r2,255
80219e9c:	1080201c 	xori	r2,r2,128
80219ea0:	10bfe004 	addi	r2,r2,-128
80219ea4:	10000a1e 	bne	r2,zero,80219ed0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
80219ea8:	e0bffd17 	ldw	r2,-12(fp)
80219eac:	10800217 	ldw	r2,8(r2)
80219eb0:	e0fffe17 	ldw	r3,-8(fp)
80219eb4:	180d883a 	mov	r6,r3
80219eb8:	e17fff17 	ldw	r5,-4(fp)
80219ebc:	1009883a 	mov	r4,r2
80219ec0:	021a08c0 	call	8021a08c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
80219ec4:	1000021e 	bne	r2,zero,80219ed0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
80219ec8:	e0bffd17 	ldw	r2,-12(fp)
80219ecc:	00000706 	br	80219eec <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
80219ed0:	e0bffd17 	ldw	r2,-12(fp)
80219ed4:	10800017 	ldw	r2,0(r2)
80219ed8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
80219edc:	e0fffd17 	ldw	r3,-12(fp)
80219ee0:	d0a00704 	addi	r2,gp,-32740
80219ee4:	18bfcc1e 	bne	r3,r2,80219e18 <__reset+0xfa1f9e18>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
80219ee8:	0005883a 	mov	r2,zero
}
80219eec:	e037883a 	mov	sp,fp
80219ef0:	dfc00117 	ldw	ra,4(sp)
80219ef4:	df000017 	ldw	fp,0(sp)
80219ef8:	dec00204 	addi	sp,sp,8
80219efc:	f800283a 	ret

80219f00 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
80219f00:	defffc04 	addi	sp,sp,-16
80219f04:	df000315 	stw	fp,12(sp)
80219f08:	df000304 	addi	fp,sp,12
80219f0c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
80219f10:	00bffa04 	movi	r2,-24
80219f14:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
80219f18:	e03ffd15 	stw	zero,-12(fp)
80219f1c:	00001906 	br	80219f84 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
80219f20:	00a008b4 	movhi	r2,32802
80219f24:	10b01b04 	addi	r2,r2,-16276
80219f28:	e0fffd17 	ldw	r3,-12(fp)
80219f2c:	18c00324 	muli	r3,r3,12
80219f30:	10c5883a 	add	r2,r2,r3
80219f34:	10800017 	ldw	r2,0(r2)
80219f38:	10000f1e 	bne	r2,zero,80219f78 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
80219f3c:	00a008b4 	movhi	r2,32802
80219f40:	10b01b04 	addi	r2,r2,-16276
80219f44:	e0fffd17 	ldw	r3,-12(fp)
80219f48:	18c00324 	muli	r3,r3,12
80219f4c:	10c5883a 	add	r2,r2,r3
80219f50:	e0ffff17 	ldw	r3,-4(fp)
80219f54:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
80219f58:	d0e00b17 	ldw	r3,-32724(gp)
80219f5c:	e0bffd17 	ldw	r2,-12(fp)
80219f60:	1880020e 	bge	r3,r2,80219f6c <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
80219f64:	e0bffd17 	ldw	r2,-12(fp)
80219f68:	d0a00b15 	stw	r2,-32724(gp)
      }
      rc = i;
80219f6c:	e0bffd17 	ldw	r2,-12(fp)
80219f70:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
80219f74:	00000606 	br	80219f90 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
80219f78:	e0bffd17 	ldw	r2,-12(fp)
80219f7c:	10800044 	addi	r2,r2,1
80219f80:	e0bffd15 	stw	r2,-12(fp)
80219f84:	e0bffd17 	ldw	r2,-12(fp)
80219f88:	10800810 	cmplti	r2,r2,32
80219f8c:	103fe41e 	bne	r2,zero,80219f20 <__reset+0xfa1f9f20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
80219f90:	e0bffe17 	ldw	r2,-8(fp)
}
80219f94:	e037883a 	mov	sp,fp
80219f98:	df000017 	ldw	fp,0(sp)
80219f9c:	dec00104 	addi	sp,sp,4
80219fa0:	f800283a 	ret

80219fa4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
80219fa4:	defffe04 	addi	sp,sp,-8
80219fa8:	df000115 	stw	fp,4(sp)
80219fac:	df000104 	addi	fp,sp,4
80219fb0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
80219fb4:	e0bfff17 	ldw	r2,-4(fp)
80219fb8:	10bffe84 	addi	r2,r2,-6
80219fbc:	10c00428 	cmpgeui	r3,r2,16
80219fc0:	18001a1e 	bne	r3,zero,8021a02c <alt_exception_cause_generated_bad_addr+0x88>
80219fc4:	100690ba 	slli	r3,r2,2
80219fc8:	00a008b4 	movhi	r2,32802
80219fcc:	10a7f704 	addi	r2,r2,-24612
80219fd0:	1885883a 	add	r2,r3,r2
80219fd4:	10800017 	ldw	r2,0(r2)
80219fd8:	1000683a 	jmp	r2
80219fdc:	8021a01c 	xori	zero,r16,34432
80219fe0:	8021a01c 	xori	zero,r16,34432
80219fe4:	8021a02c 	andhi	zero,r16,34432
80219fe8:	8021a02c 	andhi	zero,r16,34432
80219fec:	8021a02c 	andhi	zero,r16,34432
80219ff0:	8021a01c 	xori	zero,r16,34432
80219ff4:	8021a024 	muli	zero,r16,-31104
80219ff8:	8021a02c 	andhi	zero,r16,34432
80219ffc:	8021a01c 	xori	zero,r16,34432
8021a000:	8021a01c 	xori	zero,r16,34432
8021a004:	8021a02c 	andhi	zero,r16,34432
8021a008:	8021a01c 	xori	zero,r16,34432
8021a00c:	8021a024 	muli	zero,r16,-31104
8021a010:	8021a02c 	andhi	zero,r16,34432
8021a014:	8021a02c 	andhi	zero,r16,34432
8021a018:	8021a01c 	xori	zero,r16,34432
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
8021a01c:	00800044 	movi	r2,1
8021a020:	00000306 	br	8021a030 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
8021a024:	0005883a 	mov	r2,zero
8021a028:	00000106 	br	8021a030 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
8021a02c:	0005883a 	mov	r2,zero
  }
}
8021a030:	e037883a 	mov	sp,fp
8021a034:	df000017 	ldw	fp,0(sp)
8021a038:	dec00104 	addi	sp,sp,4
8021a03c:	f800283a 	ret

8021a040 <atexit>:
8021a040:	200b883a 	mov	r5,r4
8021a044:	000f883a 	mov	r7,zero
8021a048:	000d883a 	mov	r6,zero
8021a04c:	0009883a 	mov	r4,zero
8021a050:	021a2701 	jmpi	8021a270 <__register_exitproc>

8021a054 <exit>:
8021a054:	defffe04 	addi	sp,sp,-8
8021a058:	000b883a 	mov	r5,zero
8021a05c:	dc000015 	stw	r16,0(sp)
8021a060:	dfc00115 	stw	ra,4(sp)
8021a064:	2021883a 	mov	r16,r4
8021a068:	021a3880 	call	8021a388 <__call_exitprocs>
8021a06c:	00a008b4 	movhi	r2,32802
8021a070:	10b50404 	addi	r2,r2,-11248
8021a074:	11000017 	ldw	r4,0(r2)
8021a078:	20800f17 	ldw	r2,60(r4)
8021a07c:	10000126 	beq	r2,zero,8021a084 <exit+0x30>
8021a080:	103ee83a 	callr	r2
8021a084:	8009883a 	mov	r4,r16
8021a088:	021a5080 	call	8021a508 <_exit>

8021a08c <memcmp>:
8021a08c:	01c000c4 	movi	r7,3
8021a090:	3980192e 	bgeu	r7,r6,8021a0f8 <memcmp+0x6c>
8021a094:	2144b03a 	or	r2,r4,r5
8021a098:	11c4703a 	and	r2,r2,r7
8021a09c:	10000f26 	beq	r2,zero,8021a0dc <memcmp+0x50>
8021a0a0:	20800003 	ldbu	r2,0(r4)
8021a0a4:	28c00003 	ldbu	r3,0(r5)
8021a0a8:	10c0151e 	bne	r2,r3,8021a100 <memcmp+0x74>
8021a0ac:	31bfff84 	addi	r6,r6,-2
8021a0b0:	01ffffc4 	movi	r7,-1
8021a0b4:	00000406 	br	8021a0c8 <memcmp+0x3c>
8021a0b8:	20800003 	ldbu	r2,0(r4)
8021a0bc:	28c00003 	ldbu	r3,0(r5)
8021a0c0:	31bfffc4 	addi	r6,r6,-1
8021a0c4:	10c00e1e 	bne	r2,r3,8021a100 <memcmp+0x74>
8021a0c8:	21000044 	addi	r4,r4,1
8021a0cc:	29400044 	addi	r5,r5,1
8021a0d0:	31fff91e 	bne	r6,r7,8021a0b8 <__reset+0xfa1fa0b8>
8021a0d4:	0005883a 	mov	r2,zero
8021a0d8:	f800283a 	ret
8021a0dc:	20c00017 	ldw	r3,0(r4)
8021a0e0:	28800017 	ldw	r2,0(r5)
8021a0e4:	18bfee1e 	bne	r3,r2,8021a0a0 <__reset+0xfa1fa0a0>
8021a0e8:	31bfff04 	addi	r6,r6,-4
8021a0ec:	21000104 	addi	r4,r4,4
8021a0f0:	29400104 	addi	r5,r5,4
8021a0f4:	39bff936 	bltu	r7,r6,8021a0dc <__reset+0xfa1fa0dc>
8021a0f8:	303fe91e 	bne	r6,zero,8021a0a0 <__reset+0xfa1fa0a0>
8021a0fc:	003ff506 	br	8021a0d4 <__reset+0xfa1fa0d4>
8021a100:	10c5c83a 	sub	r2,r2,r3
8021a104:	f800283a 	ret

8021a108 <_putc_r>:
8021a108:	defffc04 	addi	sp,sp,-16
8021a10c:	dc000215 	stw	r16,8(sp)
8021a110:	dfc00315 	stw	ra,12(sp)
8021a114:	2021883a 	mov	r16,r4
8021a118:	20000226 	beq	r4,zero,8021a124 <_putc_r+0x1c>
8021a11c:	20800e17 	ldw	r2,56(r4)
8021a120:	10001b26 	beq	r2,zero,8021a190 <_putc_r+0x88>
8021a124:	30800217 	ldw	r2,8(r6)
8021a128:	10bfffc4 	addi	r2,r2,-1
8021a12c:	30800215 	stw	r2,8(r6)
8021a130:	10000a16 	blt	r2,zero,8021a15c <_putc_r+0x54>
8021a134:	30800017 	ldw	r2,0(r6)
8021a138:	11400005 	stb	r5,0(r2)
8021a13c:	30800017 	ldw	r2,0(r6)
8021a140:	10c00044 	addi	r3,r2,1
8021a144:	30c00015 	stw	r3,0(r6)
8021a148:	10800003 	ldbu	r2,0(r2)
8021a14c:	dfc00317 	ldw	ra,12(sp)
8021a150:	dc000217 	ldw	r16,8(sp)
8021a154:	dec00404 	addi	sp,sp,16
8021a158:	f800283a 	ret
8021a15c:	30c00617 	ldw	r3,24(r6)
8021a160:	10c00616 	blt	r2,r3,8021a17c <_putc_r+0x74>
8021a164:	30800017 	ldw	r2,0(r6)
8021a168:	00c00284 	movi	r3,10
8021a16c:	11400005 	stb	r5,0(r2)
8021a170:	30800017 	ldw	r2,0(r6)
8021a174:	11400003 	ldbu	r5,0(r2)
8021a178:	28fff11e 	bne	r5,r3,8021a140 <__reset+0xfa1fa140>
8021a17c:	8009883a 	mov	r4,r16
8021a180:	dfc00317 	ldw	ra,12(sp)
8021a184:	dc000217 	ldw	r16,8(sp)
8021a188:	dec00404 	addi	sp,sp,16
8021a18c:	0211b701 	jmpi	80211b70 <__swbuf_r>
8021a190:	d9400015 	stw	r5,0(sp)
8021a194:	d9800115 	stw	r6,4(sp)
8021a198:	020ba140 	call	8020ba14 <__sinit>
8021a19c:	d9800117 	ldw	r6,4(sp)
8021a1a0:	d9400017 	ldw	r5,0(sp)
8021a1a4:	003fdf06 	br	8021a124 <__reset+0xfa1fa124>

8021a1a8 <putc>:
8021a1a8:	00a008b4 	movhi	r2,32802
8021a1ac:	defffc04 	addi	sp,sp,-16
8021a1b0:	10b50504 	addi	r2,r2,-11244
8021a1b4:	dc000115 	stw	r16,4(sp)
8021a1b8:	14000017 	ldw	r16,0(r2)
8021a1bc:	dc400215 	stw	r17,8(sp)
8021a1c0:	dfc00315 	stw	ra,12(sp)
8021a1c4:	2023883a 	mov	r17,r4
8021a1c8:	80000226 	beq	r16,zero,8021a1d4 <putc+0x2c>
8021a1cc:	80800e17 	ldw	r2,56(r16)
8021a1d0:	10001a26 	beq	r2,zero,8021a23c <putc+0x94>
8021a1d4:	28800217 	ldw	r2,8(r5)
8021a1d8:	10bfffc4 	addi	r2,r2,-1
8021a1dc:	28800215 	stw	r2,8(r5)
8021a1e0:	10000b16 	blt	r2,zero,8021a210 <putc+0x68>
8021a1e4:	28800017 	ldw	r2,0(r5)
8021a1e8:	14400005 	stb	r17,0(r2)
8021a1ec:	28800017 	ldw	r2,0(r5)
8021a1f0:	10c00044 	addi	r3,r2,1
8021a1f4:	28c00015 	stw	r3,0(r5)
8021a1f8:	10800003 	ldbu	r2,0(r2)
8021a1fc:	dfc00317 	ldw	ra,12(sp)
8021a200:	dc400217 	ldw	r17,8(sp)
8021a204:	dc000117 	ldw	r16,4(sp)
8021a208:	dec00404 	addi	sp,sp,16
8021a20c:	f800283a 	ret
8021a210:	28c00617 	ldw	r3,24(r5)
8021a214:	10c00e16 	blt	r2,r3,8021a250 <putc+0xa8>
8021a218:	28800017 	ldw	r2,0(r5)
8021a21c:	01000284 	movi	r4,10
8021a220:	14400005 	stb	r17,0(r2)
8021a224:	28800017 	ldw	r2,0(r5)
8021a228:	10c00003 	ldbu	r3,0(r2)
8021a22c:	193ff01e 	bne	r3,r4,8021a1f0 <__reset+0xfa1fa1f0>
8021a230:	280d883a 	mov	r6,r5
8021a234:	180b883a 	mov	r5,r3
8021a238:	00000706 	br	8021a258 <putc+0xb0>
8021a23c:	8009883a 	mov	r4,r16
8021a240:	d9400015 	stw	r5,0(sp)
8021a244:	020ba140 	call	8020ba14 <__sinit>
8021a248:	d9400017 	ldw	r5,0(sp)
8021a24c:	003fe106 	br	8021a1d4 <__reset+0xfa1fa1d4>
8021a250:	280d883a 	mov	r6,r5
8021a254:	880b883a 	mov	r5,r17
8021a258:	8009883a 	mov	r4,r16
8021a25c:	dfc00317 	ldw	ra,12(sp)
8021a260:	dc400217 	ldw	r17,8(sp)
8021a264:	dc000117 	ldw	r16,4(sp)
8021a268:	dec00404 	addi	sp,sp,16
8021a26c:	0211b701 	jmpi	80211b70 <__swbuf_r>

8021a270 <__register_exitproc>:
8021a270:	defffa04 	addi	sp,sp,-24
8021a274:	dc000315 	stw	r16,12(sp)
8021a278:	042008b4 	movhi	r16,32802
8021a27c:	84350404 	addi	r16,r16,-11248
8021a280:	80c00017 	ldw	r3,0(r16)
8021a284:	dc400415 	stw	r17,16(sp)
8021a288:	dfc00515 	stw	ra,20(sp)
8021a28c:	18805217 	ldw	r2,328(r3)
8021a290:	2023883a 	mov	r17,r4
8021a294:	10003726 	beq	r2,zero,8021a374 <__register_exitproc+0x104>
8021a298:	10c00117 	ldw	r3,4(r2)
8021a29c:	010007c4 	movi	r4,31
8021a2a0:	20c00e16 	blt	r4,r3,8021a2dc <__register_exitproc+0x6c>
8021a2a4:	1a000044 	addi	r8,r3,1
8021a2a8:	8800221e 	bne	r17,zero,8021a334 <__register_exitproc+0xc4>
8021a2ac:	18c00084 	addi	r3,r3,2
8021a2b0:	18c7883a 	add	r3,r3,r3
8021a2b4:	18c7883a 	add	r3,r3,r3
8021a2b8:	12000115 	stw	r8,4(r2)
8021a2bc:	10c7883a 	add	r3,r2,r3
8021a2c0:	19400015 	stw	r5,0(r3)
8021a2c4:	0005883a 	mov	r2,zero
8021a2c8:	dfc00517 	ldw	ra,20(sp)
8021a2cc:	dc400417 	ldw	r17,16(sp)
8021a2d0:	dc000317 	ldw	r16,12(sp)
8021a2d4:	dec00604 	addi	sp,sp,24
8021a2d8:	f800283a 	ret
8021a2dc:	00800034 	movhi	r2,0
8021a2e0:	10800004 	addi	r2,r2,0
8021a2e4:	10002626 	beq	r2,zero,8021a380 <__register_exitproc+0x110>
8021a2e8:	01006404 	movi	r4,400
8021a2ec:	d9400015 	stw	r5,0(sp)
8021a2f0:	d9800115 	stw	r6,4(sp)
8021a2f4:	d9c00215 	stw	r7,8(sp)
8021a2f8:	00000000 	call	80000000 <__alt_mem_onchip_memory-0x200000>
8021a2fc:	d9400017 	ldw	r5,0(sp)
8021a300:	d9800117 	ldw	r6,4(sp)
8021a304:	d9c00217 	ldw	r7,8(sp)
8021a308:	10001d26 	beq	r2,zero,8021a380 <__register_exitproc+0x110>
8021a30c:	81000017 	ldw	r4,0(r16)
8021a310:	10000115 	stw	zero,4(r2)
8021a314:	02000044 	movi	r8,1
8021a318:	22405217 	ldw	r9,328(r4)
8021a31c:	0007883a 	mov	r3,zero
8021a320:	12400015 	stw	r9,0(r2)
8021a324:	20805215 	stw	r2,328(r4)
8021a328:	10006215 	stw	zero,392(r2)
8021a32c:	10006315 	stw	zero,396(r2)
8021a330:	883fde26 	beq	r17,zero,8021a2ac <__reset+0xfa1fa2ac>
8021a334:	18c9883a 	add	r4,r3,r3
8021a338:	2109883a 	add	r4,r4,r4
8021a33c:	1109883a 	add	r4,r2,r4
8021a340:	21802215 	stw	r6,136(r4)
8021a344:	01800044 	movi	r6,1
8021a348:	12406217 	ldw	r9,392(r2)
8021a34c:	30cc983a 	sll	r6,r6,r3
8021a350:	4992b03a 	or	r9,r9,r6
8021a354:	12406215 	stw	r9,392(r2)
8021a358:	21c04215 	stw	r7,264(r4)
8021a35c:	01000084 	movi	r4,2
8021a360:	893fd21e 	bne	r17,r4,8021a2ac <__reset+0xfa1fa2ac>
8021a364:	11006317 	ldw	r4,396(r2)
8021a368:	218cb03a 	or	r6,r4,r6
8021a36c:	11806315 	stw	r6,396(r2)
8021a370:	003fce06 	br	8021a2ac <__reset+0xfa1fa2ac>
8021a374:	18805304 	addi	r2,r3,332
8021a378:	18805215 	stw	r2,328(r3)
8021a37c:	003fc606 	br	8021a298 <__reset+0xfa1fa298>
8021a380:	00bfffc4 	movi	r2,-1
8021a384:	003fd006 	br	8021a2c8 <__reset+0xfa1fa2c8>

8021a388 <__call_exitprocs>:
8021a388:	defff504 	addi	sp,sp,-44
8021a38c:	df000915 	stw	fp,36(sp)
8021a390:	dd400615 	stw	r21,24(sp)
8021a394:	dc800315 	stw	r18,12(sp)
8021a398:	dfc00a15 	stw	ra,40(sp)
8021a39c:	ddc00815 	stw	r23,32(sp)
8021a3a0:	dd800715 	stw	r22,28(sp)
8021a3a4:	dd000515 	stw	r20,20(sp)
8021a3a8:	dcc00415 	stw	r19,16(sp)
8021a3ac:	dc400215 	stw	r17,8(sp)
8021a3b0:	dc000115 	stw	r16,4(sp)
8021a3b4:	d9000015 	stw	r4,0(sp)
8021a3b8:	2839883a 	mov	fp,r5
8021a3bc:	04800044 	movi	r18,1
8021a3c0:	057fffc4 	movi	r21,-1
8021a3c4:	00a008b4 	movhi	r2,32802
8021a3c8:	10b50404 	addi	r2,r2,-11248
8021a3cc:	12000017 	ldw	r8,0(r2)
8021a3d0:	45005217 	ldw	r20,328(r8)
8021a3d4:	44c05204 	addi	r19,r8,328
8021a3d8:	a0001c26 	beq	r20,zero,8021a44c <__call_exitprocs+0xc4>
8021a3dc:	a0800117 	ldw	r2,4(r20)
8021a3e0:	15ffffc4 	addi	r23,r2,-1
8021a3e4:	b8000d16 	blt	r23,zero,8021a41c <__call_exitprocs+0x94>
8021a3e8:	14000044 	addi	r16,r2,1
8021a3ec:	8421883a 	add	r16,r16,r16
8021a3f0:	8421883a 	add	r16,r16,r16
8021a3f4:	84402004 	addi	r17,r16,128
8021a3f8:	a463883a 	add	r17,r20,r17
8021a3fc:	a421883a 	add	r16,r20,r16
8021a400:	e0001e26 	beq	fp,zero,8021a47c <__call_exitprocs+0xf4>
8021a404:	80804017 	ldw	r2,256(r16)
8021a408:	e0801c26 	beq	fp,r2,8021a47c <__call_exitprocs+0xf4>
8021a40c:	bdffffc4 	addi	r23,r23,-1
8021a410:	843fff04 	addi	r16,r16,-4
8021a414:	8c7fff04 	addi	r17,r17,-4
8021a418:	bd7ff91e 	bne	r23,r21,8021a400 <__reset+0xfa1fa400>
8021a41c:	00800034 	movhi	r2,0
8021a420:	10800004 	addi	r2,r2,0
8021a424:	10000926 	beq	r2,zero,8021a44c <__call_exitprocs+0xc4>
8021a428:	a0800117 	ldw	r2,4(r20)
8021a42c:	1000301e 	bne	r2,zero,8021a4f0 <__call_exitprocs+0x168>
8021a430:	a0800017 	ldw	r2,0(r20)
8021a434:	10003226 	beq	r2,zero,8021a500 <__call_exitprocs+0x178>
8021a438:	a009883a 	mov	r4,r20
8021a43c:	98800015 	stw	r2,0(r19)
8021a440:	00000000 	call	80000000 <__alt_mem_onchip_memory-0x200000>
8021a444:	9d000017 	ldw	r20,0(r19)
8021a448:	a03fe41e 	bne	r20,zero,8021a3dc <__reset+0xfa1fa3dc>
8021a44c:	dfc00a17 	ldw	ra,40(sp)
8021a450:	df000917 	ldw	fp,36(sp)
8021a454:	ddc00817 	ldw	r23,32(sp)
8021a458:	dd800717 	ldw	r22,28(sp)
8021a45c:	dd400617 	ldw	r21,24(sp)
8021a460:	dd000517 	ldw	r20,20(sp)
8021a464:	dcc00417 	ldw	r19,16(sp)
8021a468:	dc800317 	ldw	r18,12(sp)
8021a46c:	dc400217 	ldw	r17,8(sp)
8021a470:	dc000117 	ldw	r16,4(sp)
8021a474:	dec00b04 	addi	sp,sp,44
8021a478:	f800283a 	ret
8021a47c:	a0800117 	ldw	r2,4(r20)
8021a480:	80c00017 	ldw	r3,0(r16)
8021a484:	10bfffc4 	addi	r2,r2,-1
8021a488:	15c01426 	beq	r2,r23,8021a4dc <__call_exitprocs+0x154>
8021a48c:	80000015 	stw	zero,0(r16)
8021a490:	183fde26 	beq	r3,zero,8021a40c <__reset+0xfa1fa40c>
8021a494:	95c8983a 	sll	r4,r18,r23
8021a498:	a0806217 	ldw	r2,392(r20)
8021a49c:	a5800117 	ldw	r22,4(r20)
8021a4a0:	2084703a 	and	r2,r4,r2
8021a4a4:	10000b26 	beq	r2,zero,8021a4d4 <__call_exitprocs+0x14c>
8021a4a8:	a0806317 	ldw	r2,396(r20)
8021a4ac:	2088703a 	and	r4,r4,r2
8021a4b0:	20000c1e 	bne	r4,zero,8021a4e4 <__call_exitprocs+0x15c>
8021a4b4:	89400017 	ldw	r5,0(r17)
8021a4b8:	d9000017 	ldw	r4,0(sp)
8021a4bc:	183ee83a 	callr	r3
8021a4c0:	a0800117 	ldw	r2,4(r20)
8021a4c4:	15bfbf1e 	bne	r2,r22,8021a3c4 <__reset+0xfa1fa3c4>
8021a4c8:	98800017 	ldw	r2,0(r19)
8021a4cc:	153fcf26 	beq	r2,r20,8021a40c <__reset+0xfa1fa40c>
8021a4d0:	003fbc06 	br	8021a3c4 <__reset+0xfa1fa3c4>
8021a4d4:	183ee83a 	callr	r3
8021a4d8:	003ff906 	br	8021a4c0 <__reset+0xfa1fa4c0>
8021a4dc:	a5c00115 	stw	r23,4(r20)
8021a4e0:	003feb06 	br	8021a490 <__reset+0xfa1fa490>
8021a4e4:	89000017 	ldw	r4,0(r17)
8021a4e8:	183ee83a 	callr	r3
8021a4ec:	003ff406 	br	8021a4c0 <__reset+0xfa1fa4c0>
8021a4f0:	a0800017 	ldw	r2,0(r20)
8021a4f4:	a027883a 	mov	r19,r20
8021a4f8:	1029883a 	mov	r20,r2
8021a4fc:	003fb606 	br	8021a3d8 <__reset+0xfa1fa3d8>
8021a500:	0005883a 	mov	r2,zero
8021a504:	003ffb06 	br	8021a4f4 <__reset+0xfa1fa4f4>

8021a508 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
8021a508:	defffd04 	addi	sp,sp,-12
8021a50c:	df000215 	stw	fp,8(sp)
8021a510:	df000204 	addi	fp,sp,8
8021a514:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
8021a518:	0001883a 	nop
8021a51c:	e0bfff17 	ldw	r2,-4(fp)
8021a520:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
8021a524:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
8021a528:	10000226 	beq	r2,zero,8021a534 <_exit+0x2c>
    ALT_SIM_FAIL();
8021a52c:	002af070 	cmpltui	zero,zero,43969
8021a530:	00000106 	br	8021a538 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
8021a534:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
8021a538:	003fff06 	br	8021a538 <__reset+0xfa1fa538>
