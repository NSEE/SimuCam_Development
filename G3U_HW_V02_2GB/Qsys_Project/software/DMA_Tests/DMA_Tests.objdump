
DMA_Tests.elf:     file format elf32-littlenios2
DMA_Tests.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x80200244

Program Header:
    LOAD off    0x00001020 vaddr 0x80200020 paddr 0x80200020 align 2**12
         filesz 0x0001d418 memsz 0x0001da94 flags rwx
    LOAD off    0x0001f000 vaddr 0x86020000 paddr 0x86020000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  86020000  86020000  0001f000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  80200020  80200020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001a2b0  80200244  80200244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000128c  8021a4f4  8021a4f4  0001b4f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cb8  8021b780  8021b780  0001c780  2**4
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000067c  8021d438  8021d438  0001e438  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  8021dab4  8021dab4  0001f000  2**0
                  CONTENTS
  7 .ext_flash    00000000  86020020  86020020  0001f000  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001f000  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000011b0  00000000  00000000  0001f028  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002e502  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000b754  00000000  00000000  0004e6da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000f81c  00000000  00000000  00059e2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003114  00000000  00000000  0006964c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000509f  00000000  00000000  0006c760  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001d75d  00000000  00000000  000717ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0008ef5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001bf0  00000000  00000000  0008efa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00094fe5  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00094fe8  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00094ff4  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00094ff5  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00094ff6  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00094ffa  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00094ffe  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00095002  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0009500d  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00095018  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000011  00000000  00000000  00095023  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000053  00000000  00000000  00095034  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     001fe215  00000000  00000000  00095087  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
86020000 l    d  .entry	00000000 .entry
80200020 l    d  .exceptions	00000000 .exceptions
80200244 l    d  .text	00000000 .text
8021a4f4 l    d  .rodata	00000000 .rodata
8021b780 l    d  .rwdata	00000000 .rwdata
8021d438 l    d  .bss	00000000 .bss
8021dab4 l    d  .onchip_memory	00000000 .onchip_memory
86020020 l    d  .ext_flash	00000000 .ext_flash
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../DMA_Tests_bsp//obj/HAL/src/crt0.o
80200278 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 ddr2.c
00000000 l    df *ABS*	00000000 simucam_dma.c
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 leds.c
00000000 l    df *ABS*	00000000 msgdma.c
802037ac l     F .text	00000134 msgdma_write_extended_descriptor
802038e0 l     F .text	0000015c msgdma_construct_extended_descriptor
80203a3c l     F .text	00000288 msgdma_descriptor_async_transfer
80203cc4 l     F .text	00000348 msgdma_descriptor_sync_transfer
00000000 l    df *ABS*	00000000 power_spi.c
00000000 l    df *ABS*	00000000 seven_seg.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
8021b780 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
8021b31e l     O .rodata	00000010 zeroes.4389
8021b32e l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 vfprintf.c
8021b33e l     O .rodata	00000010 zeroes.4404
8020993c l     F .text	000000bc __sbprintf
8021b34e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
80209b4c l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
8020b67c l     F .text	00000008 __fp_unlock
8020b690 l     F .text	0000019c __sinit.part.1
8020b82c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
8021bbc4 l     O .rwdata	00000020 lc_ctype_charset
8021bba4 l     O .rwdata	00000020 lc_message_charset
8021bbe4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
8021b37c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
8021b4b0 l     O .rodata	00000010 blanks.4332
8021b4a0 l     O .rodata	00000010 zeroes.4333
00000000 l    df *ABS*	00000000 vfprintf.c
8020feec l     F .text	000000fc __sprint_r.part.0
8021b4d0 l     O .rodata	00000010 blanks.4348
8021b4c0 l     O .rodata	00000010 zeroes.4349
80211478 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
802151f8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
80215324 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
80215350 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
8021543c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
8021551c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
802156f0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
8021d420 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
80215b10 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
80215c44 l     F .text	00000034 alt_dev_reg
8021c1d0 l     O .rwdata	00001060 jtag_uart_0
8021d230 l     O .rwdata	000000c4 rs232_uart
8021d300 l     O .rwdata	00000060 dma_DDR_M1
8021d360 l     O .rwdata	00000060 dma_DDR_M2
8021d3c0 l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
80215fbc l     F .text	0000020c altera_avalon_jtag_uart_irq
802161c8 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
80216800 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
80216ab0 l     F .text	0000009c altera_avalon_uart_irq
80216b4c l     F .text	000000e4 altera_avalon_uart_rxirq
80216c30 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
80216dcc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
80216fe4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_msgdma.c
802171cc l     F .text	0000003c alt_get_errno
80217208 l     F .text	00000094 alt_msgdma_write_standard_descriptor
8021729c l     F .text	0000012c alt_msgdma_write_extended_descriptor
802173c8 l     F .text	00000184 alt_msgdma_irq
8021754c l     F .text	0000008c alt_msgdma_construct_standard_descriptor
802175d8 l     F .text	00000154 alt_msgdma_construct_extended_descriptor
8021772c l     F .text	000002d0 alt_msgdma_descriptor_async_transfer
802179fc l     F .text	00000378 alt_msgdma_descriptor_sync_transfer
80218044 l     F .text	000000a4 alt_msgdma_construct_prefetcher_standard_descriptor
802180e8 l     F .text	00000194 alt_msgdma_construct_prefetcher_extended_descriptor
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
802192c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
80219790 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
802198d0 l     F .text	0000003c alt_get_errno
8021990c l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
8021d488 g     O .bss	00000004 alt_instruction_exception_handler
8021907c g     F .text	0000003c alt_msgdma_standard_descriptor_async_transfer
8020e124 g     F .text	00000074 _mprec_log10
802030e0 g     F .text	00000100 I2C_Read
8020e210 g     F .text	0000008c __any_on
80211a14 g     F .text	00000054 _isatty_r
8021b388 g     O .rodata	00000028 __mprec_tinytens
8021562c g     F .text	0000007c alt_main
80205320 g     F .text	000000c0 _puts_r
8021d9b4 g     O .bss	00000100 alt_irq
80211a68 g     F .text	00000060 _lseek_r
80213c60 g     F .text	00000088 .hidden __eqdf2
80217e24 g     F .text	00000058 alt_msgdma_construct_standard_mm_to_mm_descriptor
8021dab4 g       *ABS*	00000000 __alt_heap_start
8021d44d g     O .bss	00000001 SspdConfigControl
802052e4 g     F .text	0000003c printf
80211c80 g     F .text	0000009c _wcrtomb_r
8020e9a0 g     F .text	0000005c __sseek
8020b9cc g     F .text	00000010 __sinit
802040c4 g     F .text	0000003c iMsgdmaExtendedDescriptorAsyncTransfer
80211b28 g     F .text	00000140 __swbuf_r
8020c494 g     F .text	0000007c _setlocale_r
8021d3ec g     O .rwdata	00000004 LedsPainelControl
8021d4b4 g     O .bss	00000100 cDebugBuffer
8020b834 g     F .text	00000068 __sfmoreglue
802156cc g     F .text	00000024 __malloc_unlock
80202598 g     F .text	00000078 uliXorshift32
802048a4 g     F .text	00000440 .hidden __divsf3
8021d450 g     O .bss	00000004 fp
8020d01c g     F .text	0000015c memmove
8020b9b4 g     F .text	00000018 _cleanup
8020d2a0 g     F .text	000000a8 _Balloc
80217d74 g     F .text	00000058 alt_msgdma_construct_standard_st_to_mm_descriptor
8021d43c g     O .bss	00000004 pxDmaM1Dev
80213ce8 g     F .text	000000dc .hidden __gtdf2
80219d8c g     F .text	00000024 altera_nios2_gen2_irq_init
8020343c g     F .text	00000130 i2c_write
86020000 g     F .entry	00000000 __reset
802119b8 g     F .text	0000005c _fstat_r
8021d46c g     O .bss	00000004 errno
8020e91c g     F .text	00000008 __seofread
8020ecb0 g     F .text	0000123c ___svfiprintf_internal_r
8021d474 g     O .bss	00000004 alt_argv
802253ec g       *ABS*	00000000 _gp
80215ae0 g     F .text	00000030 usleep
802036c4 g     F .text	00000078 bSetBoardLeds
80218908 g     F .text	00000144 alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits
8021c04c g     O .rwdata	00000180 alt_fd_list
80219460 g     F .text	00000090 alt_find_dev
8020516c g     F .text	00000148 memcpy
8020b684 g     F .text	0000000c _cleanup_r
80214f4c g     F .text	000000dc .hidden __floatsidf
80219854 g     F .text	0000007c alt_io_redirect
80213dc4 g     F .text	000000f4 .hidden __ltdf2
802026c4 g     F .text	000000bc bSdmaInitM2Dma
8021a4f4 g       *ABS*	00000000 __DTOR_END__
80218db8 g     F .text	000000ac alt_msgdma_start_prefetcher_with_extd_desc_list
802190b8 g     F .text	0000003c alt_msgdma_extended_descriptor_async_transfer
80219028 g     F .text	00000054 alt_msgdma_register_callback
802053e0 g     F .text	00000014 puts
80219f5c g     F .text	0000009c alt_exception_cause_generated_bad_addr
8020e800 g     F .text	00000074 __fpclassifyd
8020e080 g     F .text	000000a4 __ratio
8021145c g     F .text	0000001c __vfiprintf_internal
802163c0 g     F .text	0000021c altera_avalon_jtag_uart_read
80218574 g     F .text	000000f0 alt_msgdma_prefetcher_add_standard_desc_to_list
802052b4 g     F .text	00000030 _printf_r
80212a10 g     F .text	00000064 .hidden __udivsi3
80215478 g     F .text	000000a4 isatty
8021d44c g     O .bss	00000001 LedsBoardControl
8021b3d8 g     O .rodata	000000c8 __mprec_tens
8020c510 g     F .text	0000000c __locale_charset
802031e0 g     F .text	00000158 I2C_MultipleRead
8021d468 g     O .bss	00000004 __malloc_top_pad
8021d3f8 g     O .rwdata	00000004 __mb_cur_max
8020c540 g     F .text	0000000c _localeconv_r
8020d6ac g     F .text	0000003c __i2b
8020be50 g     F .text	000004bc __sfvwrite_r
8020e874 g     F .text	00000054 _sbrk_r
80211ac8 g     F .text	00000060 _read_r
80219298 g     F .text	00000028 alt_dcache_flush
8020215c g     F .text	0000043c bDdr2MemoryRandomReadTest
8021d418 g     O .rwdata	00000004 alt_max_fd
802116ac g     F .text	000000f0 _fclose_r
8020b64c g     F .text	00000030 fflush
8021d464 g     O .bss	00000004 __malloc_max_sbrked_mem
80204ef8 g     F .text	00000110 .hidden __extendsfdf2
80202f88 g     F .text	00000080 I2C_TestAdress
80212acc g     F .text	000008ac .hidden __adddf3
8020de28 g     F .text	0000010c __b2d
802182d4 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor
802123e0 g     F .text	00000538 .hidden __umoddi3
80215558 g     F .text	000000d4 lseek
8021d3f0 g     O .rwdata	00000004 _global_impure_ptr
802046e4 g     F .text	00000044 bSSDisplayUpdate
8020e29c g     F .text	00000564 _realloc_r
8021dab4 g       *ABS*	00000000 __bss_end
802196a0 g     F .text	000000f0 alt_iic_isr_register
802159d8 g     F .text	00000108 alt_tick
80218ebc g     F .text	0000016c alt_msgdma_init
80211e68 g     F .text	00000578 .hidden __udivdi3
80211914 g     F .text	00000024 _fputwc_r
8021b3b0 g     O .rodata	00000028 __mprec_bigtens
8020d490 g     F .text	00000104 __s2b
80215028 g     F .text	000000a8 .hidden __floatunsidf
8020db68 g     F .text	00000060 __mcmp
80216a04 g     F .text	000000ac altera_avalon_uart_init
80219130 g     F .text	0000003c alt_msgdma_extended_descriptor_sync_transfer
80202b84 g     F .text	00000404 bSdmaDmaM2Transfer
8020b9ec g     F .text	00000018 __fp_lock_all
80219654 g     F .text	0000004c alt_ic_irq_enabled
80203008 g     F .text	000000d8 I2C_Write
8021593c g     F .text	0000009c alt_alarm_stop
8021d484 g     O .bss	00000004 alt_irq_active
802000fc g     F .exceptions	000000d4 alt_irq_handler
8021c024 g     O .rwdata	00000028 alt_dev_null
80217f0c g     F .text	00000090 alt_msgdma_construct_extended_mm_to_st_descriptor
80203338 g     F .text	0000008c i2c_start
80218d0c g     F .text	000000ac alt_msgdma_start_prefetcher_with_std_desc_list
80215304 g     F .text	00000020 alt_dcache_flush_all
8020d594 g     F .text	00000068 __hi0bits
80214ecc g     F .text	00000080 .hidden __fixdfsi
80200000 g       *ABS*	00000000 __alt_mem_onchip_memory
8021d410 g     O .rwdata	00000008 alt_dev_list
80215b4c g     F .text	000000f8 write
8021a0c0 g     F .text	000000a0 _putc_r
8021538c g     F .text	000000b0 fstat
80213dc4 g     F .text	000000f4 .hidden __ledf2
8020d8e0 g     F .text	00000140 __pow5mult
80210000 g     F .text	0000145c ___vfiprintf_internal_r
8021d45c g     O .bss	00000004 __nlocale_changed
80212a74 g     F .text	00000058 .hidden __umodsi3
8021832c g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor
8021dab4 g       *ABS*	00000000 end
80217020 g     F .text	000001ac altera_avalon_uart_write
80215efc g     F .text	000000c0 altera_avalon_jtag_uart_init
802001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
8021a4f4 g       *ABS*	00000000 __CTOR_LIST__
802d4800 g       *ABS*	00000000 __alt_stack_pointer
80201d44 g     F .text	00000418 bDdr2MemoryRandomWriteTest
80216878 g     F .text	0000007c alt_avalon_timer_sc_init
80216954 g     F .text	00000060 altera_avalon_uart_write_fd
80205008 g     F .text	00000064 .hidden __clzsi2
802169b4 g     F .text	00000050 altera_avalon_uart_close_fd
802165dc g     F .text	00000224 altera_avalon_jtag_uart_write
8020b9dc g     F .text	00000004 __sfp_lock_acquire
8020cf38 g     F .text	000000e4 memchr
80207728 g     F .text	000021f8 ___vfprintf_internal_r
802053f4 g     F .text	00000058 _sprintf_r
8020bb40 g     F .text	00000310 _free_r
80219b24 g     F .text	0000022c alt_printf
8020c51c g     F .text	00000010 __locale_mb_cur_max
8021a340 g     F .text	00000180 __call_exitprocs
8021d458 g     O .bss	00000004 __mlocale_changed
8021d3fc g     O .rwdata	00000004 __malloc_sbrk_base
80200244 g     F .text	00000038 _start
8021d47c g     O .bss	00000004 _alt_tick_rate
8020da20 g     F .text	00000148 __lshift
80217dcc g     F .text	00000058 alt_msgdma_construct_standard_mm_to_st_descriptor
8021d480 g     O .bss	00000004 _alt_nticks
8021572c g     F .text	000000fc read
80215cb0 g     F .text	000000e8 alt_sys_init
80204ce4 g     F .text	00000124 .hidden __floatsisf
8020eae0 g     F .text	000001d0 __ssprint_r
80200720 g     F .text	00000b74 bDdr2EepromDump
8021a228 g     F .text	00000118 __register_exitproc
8020d6e8 g     F .text	000001f8 __multiply
80216268 g     F .text	00000068 altera_avalon_jtag_uart_close
8021d48c g     O .bss	00000028 __malloc_current_mallinfo
8020df34 g     F .text	0000014c __d2b
80215d98 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
80219eb8 g     F .text	000000a4 alt_get_fd
802150d0 g     F .text	00000128 alt_busy_sleep
80211594 g     F .text	00000054 _close_r
8021827c g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor
8021a044 g     F .text	0000007c memcmp
80215e58 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
8021dab4 g       *ABS*	00000000 __alt_stack_base
80215ea8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
8020506c g     F .text	000000cc _fwrite_r
80218384 g     F .text	000000a0 alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor
802099f8 g     F .text	00000154 __swsetup_r
80213378 g     F .text	000008e8 .hidden __divdf3
8020b89c g     F .text	00000118 __sfp
8020e198 g     F .text	00000078 __copybits
8021bc1c g     O .rwdata	00000408 __malloc_av_
8020b9e8 g     F .text	00000004 __sinit_lock_release
8021d438 g     O .bss	00000004 uliInitialState
802033c4 g     F .text	00000078 i2c_stop
80213eb8 g     F .text	00000718 .hidden __muldf3
8020e8c8 g     F .text	00000054 __sread
80219db0 g     F .text	00000108 alt_find_file
802192fc g     F .text	000000a4 alt_dev_llist_insert
802156a8 g     F .text	00000024 __malloc_lock
8021588c g     F .text	000000b0 sbrk
80205550 g     F .text	000021d8 ___svfprintf_internal_r
8020b5f0 g     F .text	0000005c _fflush_r
802115e8 g     F .text	000000c4 _calloc_r
8021d438 g       *ABS*	00000000 __bss_start
8020d178 g     F .text	00000128 memset
80218e64 g     F .text	00000058 alt_msgdma_open
80204728 g     F .text	0000017c main
8021d478 g     O .bss	00000004 alt_envp
8021d460 g     O .bss	00000004 __malloc_max_total_mem
80218664 g     F .text	00000198 alt_msgdma_prefetcher_add_extended_desc_to_list
80215df8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
8020356c g     F .text	00000158 i2c_read
80211c68 g     F .text	00000018 __swbuf
8020e9fc g     F .text	00000008 __sclose
802d4800 g       *ABS*	00000000 __alt_heap_limit
8021179c g     F .text	00000014 fclose
80209d4c g     F .text	00001688 _dtoa_r
80218a4c g     F .text	000002c0 alt_msgdma_start_prefetcher_with_list_addr
8020c72c g     F .text	0000080c _malloc_r
80211ddc g     F .text	00000030 __ascii_wctomb
8021d41c g     O .rwdata	00000004 alt_errno
802184bc g     F .text	000000b8 alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor
8020413c g     F .text	000004e0 POWER_SPI_RW
8020c30c g     F .text	000000c4 _fwalk
8021a160 g     F .text	000000c8 putc
80212918 g     F .text	00000084 .hidden __divsi3
8020ba1c g     F .text	00000124 _malloc_trim_r
8021a4f4 g       *ABS*	00000000 __CTOR_END__
8020027c g     F .text	000004a4 bDdr2EepromTest
8020ea04 g     F .text	000000dc strcmp
8021a4f4 g       *ABS*	00000000 __DTOR_LIST__
80213c60 g     F .text	00000088 .hidden __nedf2
80215c78 g     F .text	00000038 alt_irq_init
80215828 g     F .text	00000064 alt_release_fd
802190f4 g     F .text	0000003c alt_msgdma_standard_descriptor_sync_transfer
8020544c g     F .text	0000006c sprintf
8021b1d3 g     O .rodata	00000100 .hidden __clz_tab
8020134c g     F .text	00000538 bDdr2MemoryWriteTest
8021d454 g     O .bss	00000004 _PathLocale
8020400c g     F .text	000000b8 iMsgdmaConstructExtendedMmToMmDescriptor
80219ff8 g     F .text	00000014 atexit
80211534 g     F .text	00000060 _write_r
8020c54c g     F .text	00000018 setlocale
80218424 g     F .text	00000098 alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor
8021d3f4 g     O .rwdata	00000004 _impure_ptr
8021d470 g     O .bss	00000004 alt_argc
8020b3d4 g     F .text	0000021c __sflush_r
80219400 g     F .text	00000060 _do_dtors
8020c538 g     F .text	00000008 __locale_cjk_lang
8021d444 g     O .bss	00000004 ESdmaBufferSide
80200020 g       .exceptions	00000000 alt_irq_entry
8020ddc4 g     F .text	00000064 __ulp
8020ba04 g     F .text	00000018 __fp_unlock_all
8021d408 g     O .rwdata	00000008 alt_fs_list
8021d5b4 g     O .bss	00000400 xSZData
80202610 g     F .text	000000b4 bSdmaInitM1Dma
8020c564 g     F .text	0000000c localeconv
802194f0 g     F .text	00000050 alt_ic_isr_register
80205138 g     F .text	00000034 fwrite
8021d438 g       *ABS*	00000000 _edata
802168f4 g     F .text	00000060 altera_avalon_uart_read_fd
8021dab4 g       *ABS*	00000000 _end
80201294 g     F .text	000000b8 bDdr2SwitchMemory
802117b0 g     F .text	00000164 __fputwc
802162d0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
802195c8 g     F .text	0000008c alt_ic_irq_disable
80202780 g     F .text	00000404 bSdmaDmaM1Transfer
8020e924 g     F .text	0000007c __swrite
8021d400 g     O .rwdata	00000004 __malloc_trim_threshold
8020c52c g     F .text	0000000c __locale_msgcharset
80204100 g     F .text	0000003c iMsgdmaExtendedDescriptorSyncTransfer
8021a00c g     F .text	00000038 exit
8020c3d0 g     F .text	000000c4 _fwalk_reent
802187fc g     F .text	0000010c alt_msgdma_prefetcher_set_std_list_own_by_hw_bits
80204e08 g     F .text	000000f0 .hidden __floatunsisf
8020dbc8 g     F .text	000001fc __mdiff
8021299c g     F .text	00000074 .hidden __modsi3
802d4800 g       *ABS*	00000000 __alt_data_end
80200020 g     F .exceptions	00000000 alt_exception
8020b9e0 g     F .text	00000004 __sfp_lock_release
8020373c g     F .text	00000070 bSetPainelLeds
80217f9c g     F .text	000000a8 alt_msgdma_construct_extended_mm_to_mm_descriptor
80201884 g     F .text	000004c0 bDdr2MemoryReadTest
84000000 g       *ABS*	00000000 __alt_mem_ext_flash
80217e7c g     F .text	00000090 alt_msgdma_construct_extended_st_to_mm_descriptor
80216d78 g     F .text	00000054 altera_avalon_uart_close
8021a4c0 g     F .text	00000034 _exit
8021916c g     F .text	0000012c alt_alarm_start
8021d448 g     O .bss	00000004 ESdmaChBufferId
8020c570 g     F .text	000001bc __smakebuf_r
8021d42c g     O .rwdata	00000008 alt_msgdma_list
802054b8 g     F .text	00000098 strlen
802199d0 g     F .text	00000154 open
80213ce8 g     F .text	000000dc .hidden __gedf2
80219d50 g     F .text	0000003c alt_putchar
8021d404 g     O .rwdata	00000004 __wctomb
8020ffe8 g     F .text	00000018 __sprint_r
8021d440 g     O .bss	00000004 pxDmaM2Dev
8021d434 g     O .rwdata	00000004 alt_priority_mask
8020461c g     F .text	000000c8 bSSDisplayConfig
80219540 g     F .text	00000088 alt_ic_irq_enable
80209920 g     F .text	0000001c __vfprintf_internal
80216e08 g     F .text	000001dc altera_avalon_uart_read
80211e0c g     F .text	0000005c _wctomb_r
802145d0 g     F .text	000008fc .hidden __subdf3
8020d5fc g     F .text	000000b0 __lo0bits
8021d424 g     O .rwdata	00000008 alt_alarm_list
802193a0 g     F .text	00000060 _do_ctors
80211d1c g     F .text	000000c0 wcrtomb
80215234 g     F .text	000000d0 close
80211938 g     F .text	00000080 fputwc
8020b9e4 g     F .text	00000004 __sinit_lock_acquire
8020d370 g     F .text	00000120 __multadd
8020d348 g     F .text	00000028 _Bfree



Disassembly of section .exceptions:

80200020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
80200020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
80200024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
80200028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
8020002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
80200030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
80200034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
80200038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
8020003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
80200040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
80200044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
80200048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
8020004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
80200050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
80200054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
80200058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
8020005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
80200060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
80200064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
80200068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
8020006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
80200070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
80200074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
80200078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
8020007c:	10000326 	beq	r2,zero,8020008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
80200080:	20000226 	beq	r4,zero,8020008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
80200084:	02000fc0 	call	802000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
80200088:	00000706 	br	802000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
8020008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
80200090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
80200094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
80200098:	02001d00 	call	802001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
8020009c:	1000021e 	bne	r2,zero,802000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
802000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
802000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
802000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
802000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
802000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
802000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
802000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
802000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
802000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
802000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
802000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
802000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
802000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
802000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
802000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
802000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
802000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
802000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
802000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
802000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
802000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
802000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
802000f8:	ef80083a 	eret

802000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
802000fc:	defff904 	addi	sp,sp,-28
80200100:	dfc00615 	stw	ra,24(sp)
80200104:	df000515 	stw	fp,20(sp)
80200108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
8020010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
80200110:	0005313a 	rdctl	r2,ipending
80200114:	e0bffe15 	stw	r2,-8(fp)

  return active;
80200118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
8020011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
80200120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
80200124:	00800044 	movi	r2,1
80200128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
8020012c:	e0fffb17 	ldw	r3,-20(fp)
80200130:	e0bffc17 	ldw	r2,-16(fp)
80200134:	1884703a 	and	r2,r3,r2
80200138:	10001426 	beq	r2,zero,8020018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
8020013c:	00a008b4 	movhi	r2,32802
80200140:	10b66d04 	addi	r2,r2,-9804
80200144:	e0fffd17 	ldw	r3,-12(fp)
80200148:	180690fa 	slli	r3,r3,3
8020014c:	10c5883a 	add	r2,r2,r3
80200150:	10c00017 	ldw	r3,0(r2)
80200154:	00a008b4 	movhi	r2,32802
80200158:	10b66d04 	addi	r2,r2,-9804
8020015c:	e13ffd17 	ldw	r4,-12(fp)
80200160:	200890fa 	slli	r4,r4,3
80200164:	1105883a 	add	r2,r2,r4
80200168:	10800104 	addi	r2,r2,4
8020016c:	10800017 	ldw	r2,0(r2)
80200170:	1009883a 	mov	r4,r2
80200174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
80200178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
8020017c:	0005313a 	rdctl	r2,ipending
80200180:	e0bfff15 	stw	r2,-4(fp)

  return active;
80200184:	e0bfff17 	ldw	r2,-4(fp)
80200188:	00000706 	br	802001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
8020018c:	e0bffc17 	ldw	r2,-16(fp)
80200190:	1085883a 	add	r2,r2,r2
80200194:	e0bffc15 	stw	r2,-16(fp)
      i++;
80200198:	e0bffd17 	ldw	r2,-12(fp)
8020019c:	10800044 	addi	r2,r2,1
802001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
802001a4:	003fe106 	br	8020012c <__reset+0xfa1e012c>

    active = alt_irq_pending ();
802001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
802001ac:	e0bffb17 	ldw	r2,-20(fp)
802001b0:	103fdb1e 	bne	r2,zero,80200120 <__reset+0xfa1e0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
802001b4:	0001883a 	nop
}
802001b8:	0001883a 	nop
802001bc:	e037883a 	mov	sp,fp
802001c0:	dfc00117 	ldw	ra,4(sp)
802001c4:	df000017 	ldw	fp,0(sp)
802001c8:	dec00204 	addi	sp,sp,8
802001cc:	f800283a 	ret

802001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
802001d0:	defffb04 	addi	sp,sp,-20
802001d4:	dfc00415 	stw	ra,16(sp)
802001d8:	df000315 	stw	fp,12(sp)
802001dc:	df000304 	addi	fp,sp,12
802001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
802001e4:	000531fa 	rdctl	r2,exception
802001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
802001ec:	e0bffd17 	ldw	r2,-12(fp)
802001f0:	10801f0c 	andi	r2,r2,124
802001f4:	1004d0ba 	srli	r2,r2,2
802001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
802001fc:	0005333a 	rdctl	r2,badaddr
80200200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
80200204:	d0a02717 	ldw	r2,-32612(gp)
80200208:	10000726 	beq	r2,zero,80200228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
8020020c:	d0a02717 	ldw	r2,-32612(gp)
80200210:	e0fffd17 	ldw	r3,-12(fp)
80200214:	e1bffe17 	ldw	r6,-8(fp)
80200218:	e17fff17 	ldw	r5,-4(fp)
8020021c:	1809883a 	mov	r4,r3
80200220:	103ee83a 	callr	r2
80200224:	00000206 	br	80200230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
80200228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
8020022c:	0005883a 	mov	r2,zero
}
80200230:	e037883a 	mov	sp,fp
80200234:	dfc00117 	ldw	ra,4(sp)
80200238:	df000017 	ldw	fp,0(sp)
8020023c:	dec00204 	addi	sp,sp,8
80200240:	f800283a 	ret

Disassembly of section .text:

80200244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
80200244:	06e00b74 	movhi	sp,32813
    ori sp, sp, %lo(__alt_stack_pointer)
80200248:	ded20014 	ori	sp,sp,18432
    movhi gp, %hi(_gp)
8020024c:	06a008b4 	movhi	gp,32802
    ori gp, gp, %lo(_gp)
80200250:	d694fb14 	ori	gp,gp,21484
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
80200254:	00a00874 	movhi	r2,32801
    ori r2, r2, %lo(__bss_start)
80200258:	10b50e14 	ori	r2,r2,54328

    movhi r3, %hi(__bss_end)
8020025c:	00e00874 	movhi	r3,32801
    ori r3, r3, %lo(__bss_end)
80200260:	18f6ad14 	ori	r3,r3,55988

    beq r2, r3, 1f
80200264:	10c00326 	beq	r2,r3,80200274 <_start+0x30>

0:
    stw zero, (r2)
80200268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
8020026c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
80200270:	10fffd36 	bltu	r2,r3,80200268 <__reset+0xfa1e0268>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
80200274:	021562c0 	call	8021562c <alt_main>

80200278 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
80200278:	003fff06 	br	80200278 <__reset+0xfa1e0278>

8020027c <bDdr2EepromTest>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2EepromTest(alt_u8 ucMemoryId) {
8020027c:	defff604 	addi	sp,sp,-40
80200280:	dfc00915 	stw	ra,36(sp)
80200284:	df000815 	stw	fp,32(sp)
80200288:	df000804 	addi	fp,sp,32
8020028c:	2005883a 	mov	r2,r4
80200290:	e0bfff05 	stb	r2,-4(fp)

#if DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 EEPROM Test =====\n");
80200294:	00e008b4 	movhi	r3,32802
80200298:	18f52d04 	addi	r3,r3,-11084
8020029c:	00a008b4 	movhi	r2,32802
802002a0:	10a93d04 	addi	r2,r2,-23308
802002a4:	1009883a 	mov	r4,r2
802002a8:	00800884 	movi	r2,34
802002ac:	100d883a 	mov	r6,r2
802002b0:	200b883a 	mov	r5,r4
802002b4:	1809883a 	mov	r4,r3
802002b8:	020516c0 	call	8020516c <memcpy>
	debug(fp, cDebugBuffer);
802002bc:	012008b4 	movhi	r4,32802
802002c0:	21352d04 	addi	r4,r4,-11084
802002c4:	02052e40 	call	802052e4 <printf>
#endif
	const alt_u8 cucDeviceAddr = DDR2_EEPROM_I2C_ADDRESS;
802002c8:	00bfe804 	movi	r2,-96
802002cc:	e0bffd05 	stb	r2,-12(fp)
	bool bSuccess = FALSE;
802002d0:	e03ff915 	stw	zero,-28(fp)
	alt_u32 uliI2cSclBase;
	alt_u32 uliI2cSdaBase;
	int iI;

	switch (ucMemoryId) {
802002d4:	e0bfff03 	ldbu	r2,-4(fp)
802002d8:	10000326 	beq	r2,zero,802002e8 <bDdr2EepromTest+0x6c>
802002dc:	10800060 	cmpeqi	r2,r2,1
802002e0:	10000a1e 	bne	r2,zero,8020030c <bDdr2EepromTest+0x90>
802002e4:	00001206 	br	80200330 <bDdr2EepromTest+0xb4>
	case DDR2_M1_ID:
		uliI2cSclBase = DDR2_M1_EEPROM_I2C_SCL_BASE;
802002e8:	00a04034 	movhi	r2,33024
802002ec:	10827c04 	addi	r2,r2,2544
802002f0:	e0bffa15 	stw	r2,-24(fp)
		uliI2cSdaBase = DDR2_M1_EEPROM_I2C_SDA_BASE;
802002f4:	00a04034 	movhi	r2,33024
802002f8:	10828004 	addi	r2,r2,2560
802002fc:	e0bffb15 	stw	r2,-20(fp)
		bSuccess = TRUE;
80200300:	00800044 	movi	r2,1
80200304:	e0bff915 	stw	r2,-28(fp)
		break;
80200308:	00001906 	br	80200370 <bDdr2EepromTest+0xf4>
	case DDR2_M2_ID:
		uliI2cSclBase = DDR2_M2_EEPROM_I2C_SCL_BASE;
8020030c:	00a04034 	movhi	r2,33024
80200310:	10825804 	addi	r2,r2,2400
80200314:	e0bffa15 	stw	r2,-24(fp)
		uliI2cSdaBase = DDR2_M2_EEPROM_I2C_SDA_BASE;
80200318:	00a04034 	movhi	r2,33024
8020031c:	10825c04 	addi	r2,r2,2416
80200320:	e0bffb15 	stw	r2,-20(fp)
		bSuccess = TRUE;
80200324:	00800044 	movi	r2,1
80200328:	e0bff915 	stw	r2,-28(fp)
		break;
8020032c:	00001006 	br	80200370 <bDdr2EepromTest+0xf4>
	default:
		bSuccess = FALSE;
80200330:	e03ff915 	stw	zero,-28(fp)
#if DEBUG_ON
		sprintf(cDebugBuffer,
80200334:	00e008b4 	movhi	r3,32802
80200338:	18f52d04 	addi	r3,r3,-11084
8020033c:	00a008b4 	movhi	r2,32802
80200340:	10a94604 	addi	r2,r2,-23272
80200344:	1009883a 	mov	r4,r2
80200348:	00800bc4 	movi	r2,47
8020034c:	100d883a 	mov	r6,r2
80200350:	200b883a 	mov	r5,r4
80200354:	1809883a 	mov	r4,r3
80200358:	020516c0 	call	8020516c <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
8020035c:	012008b4 	movhi	r4,32802
80200360:	21352d04 	addi	r4,r4,-11084
80200364:	02052e40 	call	802052e4 <printf>
		;
#endif
		return bSuccess;
80200368:	e0bff917 	ldw	r2,-28(fp)
8020036c:	0000e706 	br	8020070c <bDdr2EepromTest+0x490>
	}

	alt_u8 ucControlAddr, ucValue;
#if DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 EEPROM Read Test\n");
80200370:	00e008b4 	movhi	r3,32802
80200374:	18f52d04 	addi	r3,r3,-11084
80200378:	00a008b4 	movhi	r2,32802
8020037c:	10a95204 	addi	r2,r2,-23224
80200380:	1009883a 	mov	r4,r2
80200384:	008005c4 	movi	r2,23
80200388:	100d883a 	mov	r6,r2
8020038c:	200b883a 	mov	r5,r4
80200390:	1809883a 	mov	r4,r3
80200394:	020516c0 	call	8020516c <memcpy>
	debug(fp, cDebugBuffer);
80200398:	012008b4 	movhi	r4,32802
8020039c:	21352d04 	addi	r4,r4,-11084
802003a0:	02052e40 	call	802052e4 <printf>
#endif
	usleep(20 * 1000);
802003a4:	01138804 	movi	r4,20000
802003a8:	0215ae00 	call	80215ae0 <usleep>
	for (iI = 0; iI < 256 && bSuccess; iI++) {
802003ac:	e03ffc15 	stw	zero,-16(fp)
802003b0:	00002f06 	br	80200470 <bDdr2EepromTest+0x1f4>
		ucControlAddr = iI;
802003b4:	e0bffc17 	ldw	r2,-16(fp)
802003b8:	e0bffd45 	stb	r2,-11(fp)
		bSuccess = I2C_Read(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
802003bc:	e0bffd03 	ldbu	r2,-12(fp)
802003c0:	10c03fcc 	andi	r3,r2,255
802003c4:	18c0201c 	xori	r3,r3,128
802003c8:	18ffe004 	addi	r3,r3,-128
802003cc:	e13ffd43 	ldbu	r4,-11(fp)
802003d0:	e0bffe04 	addi	r2,fp,-8
802003d4:	d8800015 	stw	r2,0(sp)
802003d8:	200f883a 	mov	r7,r4
802003dc:	180d883a 	mov	r6,r3
802003e0:	e17ffb17 	ldw	r5,-20(fp)
802003e4:	e13ffa17 	ldw	r4,-24(fp)
802003e8:	02030e00 	call	802030e0 <I2C_Read>
802003ec:	e0bff915 	stw	r2,-28(fp)
				ucControlAddr, &ucValue);
		if (bSuccess) {
802003f0:	e0bff917 	ldw	r2,-28(fp)
802003f4:	10000e26 	beq	r2,zero,80200430 <bDdr2EepromTest+0x1b4>
#if DEBUG_ON
			sprintf(cDebugBuffer, "EEPROM[%03d]=%02Xh\n", ucControlAddr,
802003f8:	e0bffd43 	ldbu	r2,-11(fp)
802003fc:	e0fffe03 	ldbu	r3,-8(fp)
80200400:	18c03fcc 	andi	r3,r3,255
80200404:	180f883a 	mov	r7,r3
80200408:	100d883a 	mov	r6,r2
8020040c:	016008b4 	movhi	r5,32802
80200410:	29695804 	addi	r5,r5,-23200
80200414:	012008b4 	movhi	r4,32802
80200418:	21352d04 	addi	r4,r4,-11084
8020041c:	020544c0 	call	8020544c <sprintf>
					ucValue);
			debug(fp, cDebugBuffer);
80200420:	012008b4 	movhi	r4,32802
80200424:	21352d04 	addi	r4,r4,-11084
80200428:	02052e40 	call	802052e4 <printf>
8020042c:	00000d06 	br	80200464 <bDdr2EepromTest+0x1e8>
#endif
		} else {
#if DEBUG_ON
			sprintf(cDebugBuffer, "Failed to read EEPROM\n");
80200430:	00e008b4 	movhi	r3,32802
80200434:	18f52d04 	addi	r3,r3,-11084
80200438:	00a008b4 	movhi	r2,32802
8020043c:	10a95d04 	addi	r2,r2,-23180
80200440:	1009883a 	mov	r4,r2
80200444:	008005c4 	movi	r2,23
80200448:	100d883a 	mov	r6,r2
8020044c:	200b883a 	mov	r5,r4
80200450:	1809883a 	mov	r4,r3
80200454:	020516c0 	call	8020516c <memcpy>
			debug(fp, cDebugBuffer);
80200458:	012008b4 	movhi	r4,32802
8020045c:	21352d04 	addi	r4,r4,-11084
80200460:	02052e40 	call	802052e4 <printf>
#if DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 EEPROM Read Test\n");
	debug(fp, cDebugBuffer);
#endif
	usleep(20 * 1000);
	for (iI = 0; iI < 256 && bSuccess; iI++) {
80200464:	e0bffc17 	ldw	r2,-16(fp)
80200468:	10800044 	addi	r2,r2,1
8020046c:	e0bffc15 	stw	r2,-16(fp)
80200470:	e0bffc17 	ldw	r2,-16(fp)
80200474:	10804008 	cmpgei	r2,r2,256
80200478:	1000021e 	bne	r2,zero,80200484 <bDdr2EepromTest+0x208>
8020047c:	e0bff917 	ldw	r2,-28(fp)
80200480:	103fcc1e 	bne	r2,zero,802003b4 <__reset+0xfa1e03b4>
			sprintf(cDebugBuffer, "Failed to read EEPROM\n");
			debug(fp, cDebugBuffer);
#endif
		}
	}
	if (bSuccess) {
80200484:	e0bff917 	ldw	r2,-28(fp)
80200488:	10000e26 	beq	r2,zero,802004c4 <bDdr2EepromTest+0x248>
#if DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Read Test Completed\n\n");
8020048c:	00e008b4 	movhi	r3,32802
80200490:	18f52d04 	addi	r3,r3,-11084
80200494:	00a008b4 	movhi	r2,32802
80200498:	10a96304 	addi	r2,r2,-23156
8020049c:	1009883a 	mov	r4,r2
802004a0:	00800884 	movi	r2,34
802004a4:	100d883a 	mov	r6,r2
802004a8:	200b883a 	mov	r5,r4
802004ac:	1809883a 	mov	r4,r3
802004b0:	020516c0 	call	8020516c <memcpy>
		debug(fp, cDebugBuffer);
802004b4:	012008b4 	movhi	r4,32802
802004b8:	21352d04 	addi	r4,r4,-11084
802004bc:	02052e40 	call	802052e4 <printf>
802004c0:	00000d06 	br	802004f8 <bDdr2EepromTest+0x27c>
#endif
	} else {
#if DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Read Test Failed\n\n");
802004c4:	00e008b4 	movhi	r3,32802
802004c8:	18f52d04 	addi	r3,r3,-11084
802004cc:	00a008b4 	movhi	r2,32802
802004d0:	10a96c04 	addi	r2,r2,-23120
802004d4:	1009883a 	mov	r4,r2
802004d8:	008007c4 	movi	r2,31
802004dc:	100d883a 	mov	r6,r2
802004e0:	200b883a 	mov	r5,r4
802004e4:	1809883a 	mov	r4,r3
802004e8:	020516c0 	call	8020516c <memcpy>
		debug(fp, cDebugBuffer);
802004ec:	012008b4 	movhi	r4,32802
802004f0:	21352d04 	addi	r4,r4,-11084
802004f4:	02052e40 	call	802052e4 <printf>
#endif
	}

#if DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 EEPROM Write Test\n");
802004f8:	00e008b4 	movhi	r3,32802
802004fc:	18f52d04 	addi	r3,r3,-11084
80200500:	00a008b4 	movhi	r2,32802
80200504:	10a97404 	addi	r2,r2,-23088
80200508:	1009883a 	mov	r4,r2
8020050c:	00800604 	movi	r2,24
80200510:	100d883a 	mov	r6,r2
80200514:	200b883a 	mov	r5,r4
80200518:	1809883a 	mov	r4,r3
8020051c:	020516c0 	call	8020516c <memcpy>
	debug(fp, cDebugBuffer);
80200520:	012008b4 	movhi	r4,32802
80200524:	21352d04 	addi	r4,r4,-11084
80200528:	02052e40 	call	802052e4 <printf>
#endif
	alt_u8 ucWriteData = 0x12, ucTestAddr = 128;
8020052c:	00800484 	movi	r2,18
80200530:	e0bffd85 	stb	r2,-10(fp)
80200534:	00bfe004 	movi	r2,-128
80200538:	e0bffdc5 	stb	r2,-9(fp)
	alt_u8 ucReadData;
	usleep(20 * 1000);
8020053c:	01138804 	movi	r4,20000
80200540:	0215ae00 	call	80215ae0 <usleep>
	bSuccess = I2C_Write(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
80200544:	e0bffd03 	ldbu	r2,-12(fp)
80200548:	10c03fcc 	andi	r3,r2,255
8020054c:	18c0201c 	xori	r3,r3,128
80200550:	18ffe004 	addi	r3,r3,-128
80200554:	e13ffdc3 	ldbu	r4,-9(fp)
80200558:	e0bffd83 	ldbu	r2,-10(fp)
8020055c:	d8800015 	stw	r2,0(sp)
80200560:	200f883a 	mov	r7,r4
80200564:	180d883a 	mov	r6,r3
80200568:	e17ffb17 	ldw	r5,-20(fp)
8020056c:	e13ffa17 	ldw	r4,-24(fp)
80200570:	02030080 	call	80203008 <I2C_Write>
80200574:	e0bff915 	stw	r2,-28(fp)
			ucTestAddr, ucWriteData);
	if (!bSuccess) {
80200578:	e0bff917 	ldw	r2,-28(fp)
8020057c:	10000e1e 	bne	r2,zero,802005b8 <bDdr2EepromTest+0x33c>
#if DEBUG_ON
		sprintf(cDebugBuffer, "Failed to write EEPROM\n");
80200580:	00e008b4 	movhi	r3,32802
80200584:	18f52d04 	addi	r3,r3,-11084
80200588:	00a008b4 	movhi	r2,32802
8020058c:	10a97a04 	addi	r2,r2,-23064
80200590:	1009883a 	mov	r4,r2
80200594:	00800604 	movi	r2,24
80200598:	100d883a 	mov	r6,r2
8020059c:	200b883a 	mov	r5,r4
802005a0:	1809883a 	mov	r4,r3
802005a4:	020516c0 	call	8020516c <memcpy>
		debug(fp, cDebugBuffer);
802005a8:	012008b4 	movhi	r4,32802
802005ac:	21352d04 	addi	r4,r4,-11084
802005b0:	02052e40 	call	802052e4 <printf>
802005b4:	00002f06 	br	80200674 <bDdr2EepromTest+0x3f8>
#endif
	} else {
		bSuccess = I2C_Read(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
802005b8:	e0bffd03 	ldbu	r2,-12(fp)
802005bc:	10c03fcc 	andi	r3,r2,255
802005c0:	18c0201c 	xori	r3,r3,128
802005c4:	18ffe004 	addi	r3,r3,-128
802005c8:	e13ffdc3 	ldbu	r4,-9(fp)
802005cc:	e0bffe44 	addi	r2,fp,-7
802005d0:	d8800015 	stw	r2,0(sp)
802005d4:	200f883a 	mov	r7,r4
802005d8:	180d883a 	mov	r6,r3
802005dc:	e17ffb17 	ldw	r5,-20(fp)
802005e0:	e13ffa17 	ldw	r4,-24(fp)
802005e4:	02030e00 	call	802030e0 <I2C_Read>
802005e8:	e0bff915 	stw	r2,-28(fp)
				ucTestAddr, &ucReadData);
		if (!bSuccess) {
802005ec:	e0bff917 	ldw	r2,-28(fp)
802005f0:	10000e1e 	bne	r2,zero,8020062c <bDdr2EepromTest+0x3b0>
#if DEBUG_ON
			sprintf(cDebugBuffer, "Failed to read EEPROM for verify\n");
802005f4:	00e008b4 	movhi	r3,32802
802005f8:	18f52d04 	addi	r3,r3,-11084
802005fc:	00a008b4 	movhi	r2,32802
80200600:	10a98004 	addi	r2,r2,-23040
80200604:	1009883a 	mov	r4,r2
80200608:	00800884 	movi	r2,34
8020060c:	100d883a 	mov	r6,r2
80200610:	200b883a 	mov	r5,r4
80200614:	1809883a 	mov	r4,r3
80200618:	020516c0 	call	8020516c <memcpy>
			debug(fp, cDebugBuffer);
8020061c:	012008b4 	movhi	r4,32802
80200620:	21352d04 	addi	r4,r4,-11084
80200624:	02052e40 	call	802052e4 <printf>
80200628:	00001206 	br	80200674 <bDdr2EepromTest+0x3f8>
#endif
		} else {
			if (ucReadData != ucWriteData) {
8020062c:	e0bffe43 	ldbu	r2,-7(fp)
80200630:	10c03fcc 	andi	r3,r2,255
80200634:	e0bffd83 	ldbu	r2,-10(fp)
80200638:	18800e26 	beq	r3,r2,80200674 <bDdr2EepromTest+0x3f8>
				bSuccess = FALSE;
8020063c:	e03ff915 	stw	zero,-28(fp)
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200640:	e0bffe43 	ldbu	r2,-7(fp)
80200644:	10803fcc 	andi	r2,r2,255
80200648:	e0fffd83 	ldbu	r3,-10(fp)
8020064c:	180f883a 	mov	r7,r3
80200650:	100d883a 	mov	r6,r2
80200654:	016008b4 	movhi	r5,32802
80200658:	29698904 	addi	r5,r5,-23004
8020065c:	012008b4 	movhi	r4,32802
80200660:	21352d04 	addi	r4,r4,-11084
80200664:	020544c0 	call	8020544c <sprintf>
						"Verify EEPROM write fail, ReadData=%02Xh, WriteData=%02Xh\n",
						ucReadData, ucWriteData);
				debug(fp, cDebugBuffer);
80200668:	012008b4 	movhi	r4,32802
8020066c:	21352d04 	addi	r4,r4,-11084
80200670:	02052e40 	call	802052e4 <printf>
#endif
			}
		}
	}
	if (bSuccess) {
80200674:	e0bff917 	ldw	r2,-28(fp)
80200678:	10000e26 	beq	r2,zero,802006b4 <bDdr2EepromTest+0x438>
#if DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Write Test Completed\n\n");
8020067c:	00e008b4 	movhi	r3,32802
80200680:	18f52d04 	addi	r3,r3,-11084
80200684:	00a008b4 	movhi	r2,32802
80200688:	10a99804 	addi	r2,r2,-22944
8020068c:	1009883a 	mov	r4,r2
80200690:	008008c4 	movi	r2,35
80200694:	100d883a 	mov	r6,r2
80200698:	200b883a 	mov	r5,r4
8020069c:	1809883a 	mov	r4,r3
802006a0:	020516c0 	call	8020516c <memcpy>
		debug(fp, cDebugBuffer);
802006a4:	012008b4 	movhi	r4,32802
802006a8:	21352d04 	addi	r4,r4,-11084
802006ac:	02052e40 	call	802052e4 <printf>
802006b0:	00000d06 	br	802006e8 <bDdr2EepromTest+0x46c>
#endif
	} else {
#if DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Write Test Failed\n\n");
802006b4:	00e008b4 	movhi	r3,32802
802006b8:	18f52d04 	addi	r3,r3,-11084
802006bc:	00a008b4 	movhi	r2,32802
802006c0:	10a9a104 	addi	r2,r2,-22908
802006c4:	1009883a 	mov	r4,r2
802006c8:	00800804 	movi	r2,32
802006cc:	100d883a 	mov	r6,r2
802006d0:	200b883a 	mov	r5,r4
802006d4:	1809883a 	mov	r4,r3
802006d8:	020516c0 	call	8020516c <memcpy>
		debug(fp, cDebugBuffer);
802006dc:	012008b4 	movhi	r4,32802
802006e0:	21352d04 	addi	r4,r4,-11084
802006e4:	02052e40 	call	802052e4 <printf>
#endif
	}
#if DEBUG_ON
	sprintf(cDebugBuffer, "\n");
802006e8:	00a008b4 	movhi	r2,32802
802006ec:	10b52d04 	addi	r2,r2,-11084
802006f0:	00c00284 	movi	r3,10
802006f4:	10c00005 	stb	r3,0(r2)
802006f8:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
802006fc:	012008b4 	movhi	r4,32802
80200700:	21352d04 	addi	r4,r4,-11084
80200704:	02052e40 	call	802052e4 <printf>
#endif

	return bSuccess;
80200708:	e0bff917 	ldw	r2,-28(fp)
}
8020070c:	e037883a 	mov	sp,fp
80200710:	dfc00117 	ldw	ra,4(sp)
80200714:	df000017 	ldw	fp,0(sp)
80200718:	dec00204 	addi	sp,sp,8
8020071c:	f800283a 	ret

80200720 <bDdr2EepromDump>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2EepromDump(alt_u8 ucMemoryId) {
80200720:	deffb704 	addi	sp,sp,-292
80200724:	dfc04815 	stw	ra,288(sp)
80200728:	df004715 	stw	fp,284(sp)
8020072c:	df004704 	addi	fp,sp,284
80200730:	2005883a 	mov	r2,r4
80200734:	e0bfff05 	stb	r2,-4(fp)

#if DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 EEPROM Dump =====\n");
80200738:	00e008b4 	movhi	r3,32802
8020073c:	18f52d04 	addi	r3,r3,-11084
80200740:	00a008b4 	movhi	r2,32802
80200744:	10a9a904 	addi	r2,r2,-22876
80200748:	1009883a 	mov	r4,r2
8020074c:	00800884 	movi	r2,34
80200750:	100d883a 	mov	r6,r2
80200754:	200b883a 	mov	r5,r4
80200758:	1809883a 	mov	r4,r3
8020075c:	020516c0 	call	8020516c <memcpy>
	debug(fp, cDebugBuffer);
80200760:	012008b4 	movhi	r4,32802
80200764:	21352d04 	addi	r4,r4,-11084
80200768:	02052e40 	call	802052e4 <printf>
#endif
	const alt_u8 cucDeviceAddr = DDR2_EEPROM_I2C_ADDRESS;
8020076c:	00bfe804 	movi	r2,-96
80200770:	e0bfbd05 	stb	r2,-268(fp)
	bool bSuccess = FALSE;
80200774:	e03fbe15 	stw	zero,-264(fp)
	alt_u32 uliI2cSclBase;
	alt_u32 uliI2cSdaBase;
	int iI;

	switch (ucMemoryId) {
80200778:	e0bfff03 	ldbu	r2,-4(fp)
8020077c:	10000326 	beq	r2,zero,8020078c <bDdr2EepromDump+0x6c>
80200780:	10800060 	cmpeqi	r2,r2,1
80200784:	10000a1e 	bne	r2,zero,802007b0 <bDdr2EepromDump+0x90>
80200788:	00001206 	br	802007d4 <bDdr2EepromDump+0xb4>
	case DDR2_M1_ID:
		uliI2cSclBase = DDR2_M1_EEPROM_I2C_SCL_BASE;
8020078c:	00a04034 	movhi	r2,33024
80200790:	10827c04 	addi	r2,r2,2544
80200794:	e0bfba15 	stw	r2,-280(fp)
		uliI2cSdaBase = DDR2_M1_EEPROM_I2C_SDA_BASE;
80200798:	00a04034 	movhi	r2,33024
8020079c:	10828004 	addi	r2,r2,2560
802007a0:	e0bfbb15 	stw	r2,-276(fp)
		bSuccess = TRUE;
802007a4:	00800044 	movi	r2,1
802007a8:	e0bfbe15 	stw	r2,-264(fp)
		break;
802007ac:	00001906 	br	80200814 <bDdr2EepromDump+0xf4>
	case DDR2_M2_ID:
		uliI2cSclBase = DDR2_M2_EEPROM_I2C_SCL_BASE;
802007b0:	00a04034 	movhi	r2,33024
802007b4:	10825804 	addi	r2,r2,2400
802007b8:	e0bfba15 	stw	r2,-280(fp)
		uliI2cSdaBase = DDR2_M2_EEPROM_I2C_SDA_BASE;
802007bc:	00a04034 	movhi	r2,33024
802007c0:	10825c04 	addi	r2,r2,2416
802007c4:	e0bfbb15 	stw	r2,-276(fp)
		bSuccess = TRUE;
802007c8:	00800044 	movi	r2,1
802007cc:	e0bfbe15 	stw	r2,-264(fp)
		break;
802007d0:	00001006 	br	80200814 <bDdr2EepromDump+0xf4>
	default:
		bSuccess = FALSE;
802007d4:	e03fbe15 	stw	zero,-264(fp)
#if DEBUG_ON
		sprintf(cDebugBuffer,
802007d8:	00e008b4 	movhi	r3,32802
802007dc:	18f52d04 	addi	r3,r3,-11084
802007e0:	00a008b4 	movhi	r2,32802
802007e4:	10a9b204 	addi	r2,r2,-22840
802007e8:	1009883a 	mov	r4,r2
802007ec:	00800bc4 	movi	r2,47
802007f0:	100d883a 	mov	r6,r2
802007f4:	200b883a 	mov	r5,r4
802007f8:	1809883a 	mov	r4,r3
802007fc:	020516c0 	call	8020516c <memcpy>
				"DR2 Memory ID not identified!! Aborting Dump \n");
		debug(fp, cDebugBuffer)
80200800:	012008b4 	movhi	r4,32802
80200804:	21352d04 	addi	r4,r4,-11084
80200808:	02052e40 	call	802052e4 <printf>
		;
#endif
		return bSuccess;
8020080c:	e0bfbe17 	ldw	r2,-264(fp)
80200810:	00029b06 	br	80201280 <bDdr2EepromDump+0xb60>
	}

	alt_u8 ucSZData[256];
	bSuccess = I2C_MultipleRead(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
80200814:	e0bfbd03 	ldbu	r2,-268(fp)
80200818:	10c03fcc 	andi	r3,r2,255
8020081c:	18c0201c 	xori	r3,r3,128
80200820:	18ffe004 	addi	r3,r3,-128
80200824:	e13fbf04 	addi	r4,fp,-260
80200828:	00804004 	movi	r2,256
8020082c:	d8800015 	stw	r2,0(sp)
80200830:	200f883a 	mov	r7,r4
80200834:	180d883a 	mov	r6,r3
80200838:	e17fbb17 	ldw	r5,-276(fp)
8020083c:	e13fba17 	ldw	r4,-280(fp)
80200840:	02031e00 	call	802031e0 <I2C_MultipleRead>
80200844:	e0bfbe15 	stw	r2,-264(fp)
			ucSZData, sizeof(ucSZData));
	if (bSuccess) {
80200848:	e0bfbe17 	ldw	r2,-264(fp)
8020084c:	10027626 	beq	r2,zero,80201228 <bDdr2EepromDump+0xb08>
		for (iI = 0; iI < 256 && bSuccess; iI++) {
80200850:	e03fbc15 	stw	zero,-272(fp)
80200854:	00026e06 	br	80201210 <bDdr2EepromDump+0xaf0>
			if (iI == 0) {
80200858:	e0bfbc17 	ldw	r2,-272(fp)
8020085c:	1000101e 	bne	r2,zero,802008a0 <bDdr2EepromDump+0x180>
#if DEBUG_ON
				sprintf(cDebugBuffer,
						"(Number of SPD Bytes Used)\n" "EEPROM[%03d]=%02Xh ",
						iI, ucSZData[iI]);
80200860:	e0ffbf04 	addi	r3,fp,-260
80200864:	e0bfbc17 	ldw	r2,-272(fp)
80200868:	1885883a 	add	r2,r3,r2
8020086c:	10800003 	ldbu	r2,0(r2)
			ucSZData, sizeof(ucSZData));
	if (bSuccess) {
		for (iI = 0; iI < 256 && bSuccess; iI++) {
			if (iI == 0) {
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200870:	10803fcc 	andi	r2,r2,255
80200874:	100f883a 	mov	r7,r2
80200878:	e1bfbc17 	ldw	r6,-272(fp)
8020087c:	016008b4 	movhi	r5,32802
80200880:	2969be04 	addi	r5,r5,-22792
80200884:	012008b4 	movhi	r4,32802
80200888:	21352d04 	addi	r4,r4,-11084
8020088c:	020544c0 	call	8020544c <sprintf>
						"(Number of SPD Bytes Used)\n" "EEPROM[%03d]=%02Xh ",
						iI, ucSZData[iI]);
				debug(fp, cDebugBuffer);
80200890:	012008b4 	movhi	r4,32802
80200894:	21352d04 	addi	r4,r4,-11084
80200898:	02052e40 	call	802052e4 <printf>
8020089c:	00025906 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 1) {
802008a0:	e0bfbc17 	ldw	r2,-272(fp)
802008a4:	10800058 	cmpnei	r2,r2,1
802008a8:	10000e1e 	bne	r2,zero,802008e4 <bDdr2EepromDump+0x1c4>
#if DEBUG_ON
				sprintf(cDebugBuffer,
802008ac:	00e008b4 	movhi	r3,32802
802008b0:	18f52d04 	addi	r3,r3,-11084
802008b4:	00a008b4 	movhi	r2,32802
802008b8:	10a9ca04 	addi	r2,r2,-22744
802008bc:	1009883a 	mov	r4,r2
802008c0:	00800c04 	movi	r2,48
802008c4:	100d883a 	mov	r6,r2
802008c8:	200b883a 	mov	r5,r4
802008cc:	1809883a 	mov	r4,r3
802008d0:	020516c0 	call	8020516c <memcpy>
						"(Total Number of Bytes in SPD Device, Log2(N))\n");
				debug(fp, cDebugBuffer);
802008d4:	012008b4 	movhi	r4,32802
802008d8:	21352d04 	addi	r4,r4,-11084
802008dc:	02052e40 	call	802052e4 <printf>
802008e0:	00024806 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 2) {
802008e4:	e0bfbc17 	ldw	r2,-272(fp)
802008e8:	10800098 	cmpnei	r2,r2,2
802008ec:	10000e1e 	bne	r2,zero,80200928 <bDdr2EepromDump+0x208>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(Basic Memory Type[08h:DDR2])\n");
802008f0:	00e008b4 	movhi	r3,32802
802008f4:	18f52d04 	addi	r3,r3,-11084
802008f8:	00a008b4 	movhi	r2,32802
802008fc:	10a9d604 	addi	r2,r2,-22696
80200900:	1009883a 	mov	r4,r2
80200904:	008007c4 	movi	r2,31
80200908:	100d883a 	mov	r6,r2
8020090c:	200b883a 	mov	r5,r4
80200910:	1809883a 	mov	r4,r3
80200914:	020516c0 	call	8020516c <memcpy>
				debug(fp, cDebugBuffer);
80200918:	012008b4 	movhi	r4,32802
8020091c:	21352d04 	addi	r4,r4,-11084
80200920:	02052e40 	call	802052e4 <printf>
80200924:	00023706 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 3) {
80200928:	e0bfbc17 	ldw	r2,-272(fp)
8020092c:	108000d8 	cmpnei	r2,r2,3
80200930:	10000e1e 	bne	r2,zero,8020096c <bDdr2EepromDump+0x24c>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200934:	00e008b4 	movhi	r3,32802
80200938:	18f52d04 	addi	r3,r3,-11084
8020093c:	00a008b4 	movhi	r2,32802
80200940:	10a9de04 	addi	r2,r2,-22664
80200944:	1009883a 	mov	r4,r2
80200948:	008009c4 	movi	r2,39
8020094c:	100d883a 	mov	r6,r2
80200950:	200b883a 	mov	r5,r4
80200954:	1809883a 	mov	r4,r3
80200958:	020516c0 	call	8020516c <memcpy>
						"(Number of Row Addresses on Assembly)\n");
				debug(fp, cDebugBuffer);
8020095c:	012008b4 	movhi	r4,32802
80200960:	21352d04 	addi	r4,r4,-11084
80200964:	02052e40 	call	802052e4 <printf>
80200968:	00022606 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 4) {
8020096c:	e0bfbc17 	ldw	r2,-272(fp)
80200970:	10800118 	cmpnei	r2,r2,4
80200974:	10000e1e 	bne	r2,zero,802009b0 <bDdr2EepromDump+0x290>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200978:	00e008b4 	movhi	r3,32802
8020097c:	18f52d04 	addi	r3,r3,-11084
80200980:	00a008b4 	movhi	r2,32802
80200984:	10a9e804 	addi	r2,r2,-22624
80200988:	1009883a 	mov	r4,r2
8020098c:	00800a84 	movi	r2,42
80200990:	100d883a 	mov	r6,r2
80200994:	200b883a 	mov	r5,r4
80200998:	1809883a 	mov	r4,r3
8020099c:	020516c0 	call	8020516c <memcpy>
						"(Number of Column Addresses on Assembly)\n");
				debug(fp, cDebugBuffer);
802009a0:	012008b4 	movhi	r4,32802
802009a4:	21352d04 	addi	r4,r4,-11084
802009a8:	02052e40 	call	802052e4 <printf>
802009ac:	00021506 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 5) {
802009b0:	e0bfbc17 	ldw	r2,-272(fp)
802009b4:	10800158 	cmpnei	r2,r2,5
802009b8:	10000e1e 	bne	r2,zero,802009f4 <bDdr2EepromDump+0x2d4>
#if DEBUG_ON
				sprintf(cDebugBuffer,
802009bc:	00e008b4 	movhi	r3,32802
802009c0:	18f52d04 	addi	r3,r3,-11084
802009c4:	00a008b4 	movhi	r2,32802
802009c8:	10a9f304 	addi	r2,r2,-22580
802009cc:	1009883a 	mov	r4,r2
802009d0:	00800c04 	movi	r2,48
802009d4:	100d883a 	mov	r6,r2
802009d8:	200b883a 	mov	r5,r4
802009dc:	1809883a 	mov	r4,r3
802009e0:	020516c0 	call	8020516c <memcpy>
						"(DIMM Height and Module Rank Number[b2b1b0+1])\n");
				debug(fp, cDebugBuffer);
802009e4:	012008b4 	movhi	r4,32802
802009e8:	21352d04 	addi	r4,r4,-11084
802009ec:	02052e40 	call	802052e4 <printf>
802009f0:	00020406 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 6) {
802009f4:	e0bfbc17 	ldw	r2,-272(fp)
802009f8:	10800198 	cmpnei	r2,r2,6
802009fc:	10000e1e 	bne	r2,zero,80200a38 <bDdr2EepromDump+0x318>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(Module Data Width)\n");
80200a00:	00e008b4 	movhi	r3,32802
80200a04:	18f52d04 	addi	r3,r3,-11084
80200a08:	00a008b4 	movhi	r2,32802
80200a0c:	10a9ff04 	addi	r2,r2,-22532
80200a10:	1009883a 	mov	r4,r2
80200a14:	00800544 	movi	r2,21
80200a18:	100d883a 	mov	r6,r2
80200a1c:	200b883a 	mov	r5,r4
80200a20:	1809883a 	mov	r4,r3
80200a24:	020516c0 	call	8020516c <memcpy>
				debug(fp, cDebugBuffer);
80200a28:	012008b4 	movhi	r4,32802
80200a2c:	21352d04 	addi	r4,r4,-11084
80200a30:	02052e40 	call	802052e4 <printf>
80200a34:	0001f306 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 7) {
80200a38:	e0bfbc17 	ldw	r2,-272(fp)
80200a3c:	108001d8 	cmpnei	r2,r2,7
80200a40:	10000e1e 	bne	r2,zero,80200a7c <bDdr2EepromDump+0x35c>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(Module Data Width, Continued)\n");
80200a44:	00e008b4 	movhi	r3,32802
80200a48:	18f52d04 	addi	r3,r3,-11084
80200a4c:	00a008b4 	movhi	r2,32802
80200a50:	10aa0504 	addi	r2,r2,-22508
80200a54:	1009883a 	mov	r4,r2
80200a58:	00800804 	movi	r2,32
80200a5c:	100d883a 	mov	r6,r2
80200a60:	200b883a 	mov	r5,r4
80200a64:	1809883a 	mov	r4,r3
80200a68:	020516c0 	call	8020516c <memcpy>
				debug(fp, cDebugBuffer);
80200a6c:	012008b4 	movhi	r4,32802
80200a70:	21352d04 	addi	r4,r4,-11084
80200a74:	02052e40 	call	802052e4 <printf>
80200a78:	0001e206 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 16) {
80200a7c:	e0bfbc17 	ldw	r2,-272(fp)
80200a80:	10800418 	cmpnei	r2,r2,16
80200a84:	10000e1e 	bne	r2,zero,80200ac0 <bDdr2EepromDump+0x3a0>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200a88:	00e008b4 	movhi	r3,32802
80200a8c:	18f52d04 	addi	r3,r3,-11084
80200a90:	00a008b4 	movhi	r2,32802
80200a94:	10aa0d04 	addi	r2,r2,-22476
80200a98:	1009883a 	mov	r4,r2
80200a9c:	00800d04 	movi	r2,52
80200aa0:	100d883a 	mov	r6,r2
80200aa4:	200b883a 	mov	r5,r4
80200aa8:	1809883a 	mov	r4,r3
80200aac:	020516c0 	call	8020516c <memcpy>
						"(Burst Lengths Supported[bitmap: x x x x 8 4 x x])\n");
				debug(fp, cDebugBuffer);
80200ab0:	012008b4 	movhi	r4,32802
80200ab4:	21352d04 	addi	r4,r4,-11084
80200ab8:	02052e40 	call	802052e4 <printf>
80200abc:	0001d106 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 13) {
80200ac0:	e0bfbc17 	ldw	r2,-272(fp)
80200ac4:	10800358 	cmpnei	r2,r2,13
80200ac8:	10000e1e 	bne	r2,zero,80200b04 <bDdr2EepromDump+0x3e4>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(Primary SDRAM width)\n");
80200acc:	00e008b4 	movhi	r3,32802
80200ad0:	18f52d04 	addi	r3,r3,-11084
80200ad4:	00a008b4 	movhi	r2,32802
80200ad8:	10aa1a04 	addi	r2,r2,-22424
80200adc:	1009883a 	mov	r4,r2
80200ae0:	008005c4 	movi	r2,23
80200ae4:	100d883a 	mov	r6,r2
80200ae8:	200b883a 	mov	r5,r4
80200aec:	1809883a 	mov	r4,r3
80200af0:	020516c0 	call	8020516c <memcpy>
				debug(fp, cDebugBuffer);
80200af4:	012008b4 	movhi	r4,32802
80200af8:	21352d04 	addi	r4,r4,-11084
80200afc:	02052e40 	call	802052e4 <printf>
80200b00:	0001c006 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 14) {
80200b04:	e0bfbc17 	ldw	r2,-272(fp)
80200b08:	10800398 	cmpnei	r2,r2,14
80200b0c:	10000e1e 	bne	r2,zero,80200b48 <bDdr2EepromDump+0x428>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(ECC SDRAM width)\n");
80200b10:	00e008b4 	movhi	r3,32802
80200b14:	18f52d04 	addi	r3,r3,-11084
80200b18:	00a008b4 	movhi	r2,32802
80200b1c:	10aa2004 	addi	r2,r2,-22400
80200b20:	1009883a 	mov	r4,r2
80200b24:	008004c4 	movi	r2,19
80200b28:	100d883a 	mov	r6,r2
80200b2c:	200b883a 	mov	r5,r4
80200b30:	1809883a 	mov	r4,r3
80200b34:	020516c0 	call	8020516c <memcpy>
				debug(fp, cDebugBuffer);
80200b38:	012008b4 	movhi	r4,32802
80200b3c:	21352d04 	addi	r4,r4,-11084
80200b40:	02052e40 	call	802052e4 <printf>
80200b44:	0001af06 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 17) {
80200b48:	e0bfbc17 	ldw	r2,-272(fp)
80200b4c:	10800458 	cmpnei	r2,r2,17
80200b50:	10000e1e 	bne	r2,zero,80200b8c <bDdr2EepromDump+0x46c>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(Banks per SDRAM device)\n");
80200b54:	00e008b4 	movhi	r3,32802
80200b58:	18f52d04 	addi	r3,r3,-11084
80200b5c:	00a008b4 	movhi	r2,32802
80200b60:	10aa2504 	addi	r2,r2,-22380
80200b64:	1009883a 	mov	r4,r2
80200b68:	00800684 	movi	r2,26
80200b6c:	100d883a 	mov	r6,r2
80200b70:	200b883a 	mov	r5,r4
80200b74:	1809883a 	mov	r4,r3
80200b78:	020516c0 	call	8020516c <memcpy>
				debug(fp, cDebugBuffer);
80200b7c:	012008b4 	movhi	r4,32802
80200b80:	21352d04 	addi	r4,r4,-11084
80200b84:	02052e40 	call	802052e4 <printf>
80200b88:	00019e06 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 18) {
80200b8c:	e0bfbc17 	ldw	r2,-272(fp)
80200b90:	10800498 	cmpnei	r2,r2,18
80200b94:	10000e1e 	bne	r2,zero,80200bd0 <bDdr2EepromDump+0x4b0>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200b98:	00e008b4 	movhi	r3,32802
80200b9c:	18f52d04 	addi	r3,r3,-11084
80200ba0:	00a008b4 	movhi	r2,32802
80200ba4:	10aa2c04 	addi	r2,r2,-22352
80200ba8:	1009883a 	mov	r4,r2
80200bac:	00800d44 	movi	r2,53
80200bb0:	100d883a 	mov	r6,r2
80200bb4:	200b883a 	mov	r5,r4
80200bb8:	1809883a 	mov	r4,r3
80200bbc:	020516c0 	call	8020516c <memcpy>
						"(CAS lantencies supported[bitmap: x x 5 4 3 2 x x])\n");
				debug(fp, cDebugBuffer);
80200bc0:	012008b4 	movhi	r4,32802
80200bc4:	21352d04 	addi	r4,r4,-11084
80200bc8:	02052e40 	call	802052e4 <printf>
80200bcc:	00018d06 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 20) {
80200bd0:	e0bfbc17 	ldw	r2,-272(fp)
80200bd4:	10800518 	cmpnei	r2,r2,20
80200bd8:	10000e1e 	bne	r2,zero,80200c14 <bDdr2EepromDump+0x4f4>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200bdc:	00e008b4 	movhi	r3,32802
80200be0:	18f52d04 	addi	r3,r3,-11084
80200be4:	00a008b4 	movhi	r2,32802
80200be8:	10aa3a04 	addi	r2,r2,-22296
80200bec:	1009883a 	mov	r4,r2
80200bf0:	00801204 	movi	r2,72
80200bf4:	100d883a 	mov	r6,r2
80200bf8:	200b883a 	mov	r5,r4
80200bfc:	1809883a 	mov	r4,r3
80200c00:	020516c0 	call	8020516c <memcpy>
						"(DIMM Type: x x Mini-UDIMM Mini-RDIMM Micro-DIMM SO-DIMM UDIMMM RDIMM)\n");
				debug(fp, cDebugBuffer);
80200c04:	012008b4 	movhi	r4,32802
80200c08:	21352d04 	addi	r4,r4,-11084
80200c0c:	02052e40 	call	802052e4 <printf>
80200c10:	00017c06 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 22) {
80200c14:	e0bfbc17 	ldw	r2,-272(fp)
80200c18:	10800598 	cmpnei	r2,r2,22
80200c1c:	10000e1e 	bne	r2,zero,80200c58 <bDdr2EepromDump+0x538>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(Memory Chip feature bitmap)\n");
80200c20:	00e008b4 	movhi	r3,32802
80200c24:	18f52d04 	addi	r3,r3,-11084
80200c28:	00a008b4 	movhi	r2,32802
80200c2c:	10aa4c04 	addi	r2,r2,-22224
80200c30:	1009883a 	mov	r4,r2
80200c34:	00800784 	movi	r2,30
80200c38:	100d883a 	mov	r6,r2
80200c3c:	200b883a 	mov	r5,r4
80200c40:	1809883a 	mov	r4,r3
80200c44:	020516c0 	call	8020516c <memcpy>
				debug(fp, cDebugBuffer);
80200c48:	012008b4 	movhi	r4,32802
80200c4c:	21352d04 	addi	r4,r4,-11084
80200c50:	02052e40 	call	802052e4 <printf>
80200c54:	00016b06 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 27) {
80200c58:	e0bfbc17 	ldw	r2,-272(fp)
80200c5c:	108006d8 	cmpnei	r2,r2,27
80200c60:	10000e1e 	bne	r2,zero,80200c9c <bDdr2EepromDump+0x57c>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200c64:	00e008b4 	movhi	r3,32802
80200c68:	18f52d04 	addi	r3,r3,-11084
80200c6c:	00a008b4 	movhi	r2,32802
80200c70:	10aa5404 	addi	r2,r2,-22192
80200c74:	1009883a 	mov	r4,r2
80200c78:	00800a04 	movi	r2,40
80200c7c:	100d883a 	mov	r6,r2
80200c80:	200b883a 	mov	r5,r4
80200c84:	1809883a 	mov	r4,r3
80200c88:	020516c0 	call	8020516c <memcpy>
						"(Minimun row precharge time[tRP;nsx4])\n");
				debug(fp, cDebugBuffer);
80200c8c:	012008b4 	movhi	r4,32802
80200c90:	21352d04 	addi	r4,r4,-11084
80200c94:	02052e40 	call	802052e4 <printf>
80200c98:	00015a06 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 28) {
80200c9c:	e0bfbc17 	ldw	r2,-272(fp)
80200ca0:	10800718 	cmpnei	r2,r2,28
80200ca4:	10000e1e 	bne	r2,zero,80200ce0 <bDdr2EepromDump+0x5c0>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200ca8:	00e008b4 	movhi	r3,32802
80200cac:	18f52d04 	addi	r3,r3,-11084
80200cb0:	00a008b4 	movhi	r2,32802
80200cb4:	10aa5e04 	addi	r2,r2,-22152
80200cb8:	1009883a 	mov	r4,r2
80200cbc:	00800cc4 	movi	r2,51
80200cc0:	100d883a 	mov	r6,r2
80200cc4:	200b883a 	mov	r5,r4
80200cc8:	1809883a 	mov	r4,r3
80200ccc:	020516c0 	call	8020516c <memcpy>
						"(Minimun row active-row activce delay[tRRD;nsx4])\n");
				debug(fp, cDebugBuffer);
80200cd0:	012008b4 	movhi	r4,32802
80200cd4:	21352d04 	addi	r4,r4,-11084
80200cd8:	02052e40 	call	802052e4 <printf>
80200cdc:	00014906 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 29) {
80200ce0:	e0bfbc17 	ldw	r2,-272(fp)
80200ce4:	10800758 	cmpnei	r2,r2,29
80200ce8:	10000e1e 	bne	r2,zero,80200d24 <bDdr2EepromDump+0x604>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200cec:	00e008b4 	movhi	r3,32802
80200cf0:	18f52d04 	addi	r3,r3,-11084
80200cf4:	00a008b4 	movhi	r2,32802
80200cf8:	10aa6b04 	addi	r2,r2,-22100
80200cfc:	1009883a 	mov	r4,r2
80200d00:	008009c4 	movi	r2,39
80200d04:	100d883a 	mov	r6,r2
80200d08:	200b883a 	mov	r5,r4
80200d0c:	1809883a 	mov	r4,r3
80200d10:	020516c0 	call	8020516c <memcpy>
						"(Minimun RAS to CAS delay[tRCD;nsx4])\n");
				debug(fp, cDebugBuffer);
80200d14:	012008b4 	movhi	r4,32802
80200d18:	21352d04 	addi	r4,r4,-11084
80200d1c:	02052e40 	call	802052e4 <printf>
80200d20:	00013806 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 30) {
80200d24:	e0bfbc17 	ldw	r2,-272(fp)
80200d28:	10800798 	cmpnei	r2,r2,30
80200d2c:	10000e1e 	bne	r2,zero,80200d68 <bDdr2EepromDump+0x648>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200d30:	00e008b4 	movhi	r3,32802
80200d34:	18f52d04 	addi	r3,r3,-11084
80200d38:	00a008b4 	movhi	r2,32802
80200d3c:	10aa7504 	addi	r2,r2,-22060
80200d40:	1009883a 	mov	r4,r2
80200d44:	00800b04 	movi	r2,44
80200d48:	100d883a 	mov	r6,r2
80200d4c:	200b883a 	mov	r5,r4
80200d50:	1809883a 	mov	r4,r3
80200d54:	020516c0 	call	8020516c <memcpy>
						"(Minimun acive to precharge time[tRAS;ns])\n");
				debug(fp, cDebugBuffer);
80200d58:	012008b4 	movhi	r4,32802
80200d5c:	21352d04 	addi	r4,r4,-11084
80200d60:	02052e40 	call	802052e4 <printf>
80200d64:	00012706 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 31) {
80200d68:	e0bfbc17 	ldw	r2,-272(fp)
80200d6c:	108007d8 	cmpnei	r2,r2,31
80200d70:	10000e1e 	bne	r2,zero,80200dac <bDdr2EepromDump+0x68c>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200d74:	00e008b4 	movhi	r3,32802
80200d78:	18f52d04 	addi	r3,r3,-11084
80200d7c:	00a008b4 	movhi	r2,32802
80200d80:	10aa8004 	addi	r2,r2,-22016
80200d84:	1009883a 	mov	r4,r2
80200d88:	008010c4 	movi	r2,67
80200d8c:	100d883a 	mov	r6,r2
80200d90:	200b883a 	mov	r5,r4
80200d94:	1809883a 	mov	r4,r3
80200d98:	020516c0 	call	8020516c <memcpy>
						"(Size of each rank[bitmap:512MB,256MB,128MB,16GB,8GB,4GB,2GB,1GB)\n");
				debug(fp, cDebugBuffer);
80200d9c:	012008b4 	movhi	r4,32802
80200da0:	21352d04 	addi	r4,r4,-11084
80200da4:	02052e40 	call	802052e4 <printf>
80200da8:	00011606 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 36) {
80200dac:	e0bfbc17 	ldw	r2,-272(fp)
80200db0:	10800918 	cmpnei	r2,r2,36
80200db4:	10000e1e 	bne	r2,zero,80200df0 <bDdr2EepromDump+0x6d0>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200db8:	00e008b4 	movhi	r3,32802
80200dbc:	18f52d04 	addi	r3,r3,-11084
80200dc0:	00a008b4 	movhi	r2,32802
80200dc4:	10aa9104 	addi	r2,r2,-21948
80200dc8:	1009883a 	mov	r4,r2
80200dcc:	00800a84 	movi	r2,42
80200dd0:	100d883a 	mov	r6,r2
80200dd4:	200b883a 	mov	r5,r4
80200dd8:	1809883a 	mov	r4,r3
80200ddc:	020516c0 	call	8020516c <memcpy>
						"(Minimun write receovery time[tWR;nsx4])\n");
				debug(fp, cDebugBuffer);
80200de0:	012008b4 	movhi	r4,32802
80200de4:	21352d04 	addi	r4,r4,-11084
80200de8:	02052e40 	call	802052e4 <printf>
80200dec:	00010506 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 37) {
80200df0:	e0bfbc17 	ldw	r2,-272(fp)
80200df4:	10800958 	cmpnei	r2,r2,37
80200df8:	10000e1e 	bne	r2,zero,80200e34 <bDdr2EepromDump+0x714>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200dfc:	00e008b4 	movhi	r3,32802
80200e00:	18f52d04 	addi	r3,r3,-11084
80200e04:	00a008b4 	movhi	r2,32802
80200e08:	10aa9c04 	addi	r2,r2,-21904
80200e0c:	1009883a 	mov	r4,r2
80200e10:	00800cc4 	movi	r2,51
80200e14:	100d883a 	mov	r6,r2
80200e18:	200b883a 	mov	r5,r4
80200e1c:	1809883a 	mov	r4,r3
80200e20:	020516c0 	call	8020516c <memcpy>
						"(Internal write to read command delay[tWTR;nsx4])\n");
				debug(fp, cDebugBuffer);
80200e24:	012008b4 	movhi	r4,32802
80200e28:	21352d04 	addi	r4,r4,-11084
80200e2c:	02052e40 	call	802052e4 <printf>
80200e30:	0000f406 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 38) {
80200e34:	e0bfbc17 	ldw	r2,-272(fp)
80200e38:	10800998 	cmpnei	r2,r2,38
80200e3c:	10000e1e 	bne	r2,zero,80200e78 <bDdr2EepromDump+0x758>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200e40:	00e008b4 	movhi	r3,32802
80200e44:	18f52d04 	addi	r3,r3,-11084
80200e48:	00a008b4 	movhi	r2,32802
80200e4c:	10aaa904 	addi	r2,r2,-21852
80200e50:	1009883a 	mov	r4,r2
80200e54:	00800dc4 	movi	r2,55
80200e58:	100d883a 	mov	r6,r2
80200e5c:	200b883a 	mov	r5,r4
80200e60:	1809883a 	mov	r4,r3
80200e64:	020516c0 	call	8020516c <memcpy>
						"(Internal read to precharge command delay[tRTP;nsx4])\n");
				debug(fp, cDebugBuffer);
80200e68:	012008b4 	movhi	r4,32802
80200e6c:	21352d04 	addi	r4,r4,-11084
80200e70:	02052e40 	call	802052e4 <printf>
80200e74:	0000e306 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 41) {
80200e78:	e0bfbc17 	ldw	r2,-272(fp)
80200e7c:	10800a58 	cmpnei	r2,r2,41
80200e80:	10000e1e 	bne	r2,zero,80200ebc <bDdr2EepromDump+0x79c>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200e84:	00e008b4 	movhi	r3,32802
80200e88:	18f52d04 	addi	r3,r3,-11084
80200e8c:	00a008b4 	movhi	r2,32802
80200e90:	10aab704 	addi	r2,r2,-21796
80200e94:	1009883a 	mov	r4,r2
80200e98:	00800c84 	movi	r2,50
80200e9c:	100d883a 	mov	r6,r2
80200ea0:	200b883a 	mov	r5,r4
80200ea4:	1809883a 	mov	r4,r3
80200ea8:	020516c0 	call	8020516c <memcpy>
						"(Minimun activce to active/refresh time[tRC;ns])\n");
				debug(fp, cDebugBuffer);
80200eac:	012008b4 	movhi	r4,32802
80200eb0:	21352d04 	addi	r4,r4,-11084
80200eb4:	02052e40 	call	802052e4 <printf>
80200eb8:	0000d206 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 42) {
80200ebc:	e0bfbc17 	ldw	r2,-272(fp)
80200ec0:	10800a98 	cmpnei	r2,r2,42
80200ec4:	10000e1e 	bne	r2,zero,80200f00 <bDdr2EepromDump+0x7e0>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80200ec8:	00e008b4 	movhi	r3,32802
80200ecc:	18f52d04 	addi	r3,r3,-11084
80200ed0:	00a008b4 	movhi	r2,32802
80200ed4:	10aac404 	addi	r2,r2,-21744
80200ed8:	1009883a 	mov	r4,r2
80200edc:	00800cc4 	movi	r2,51
80200ee0:	100d883a 	mov	r6,r2
80200ee4:	200b883a 	mov	r5,r4
80200ee8:	1809883a 	mov	r4,r3
80200eec:	020516c0 	call	8020516c <memcpy>
						"(Minimun refresh to active/refresh time[tRFC;ns])\n");
				debug(fp, cDebugBuffer);
80200ef0:	012008b4 	movhi	r4,32802
80200ef4:	21352d04 	addi	r4,r4,-11084
80200ef8:	02052e40 	call	802052e4 <printf>
80200efc:	0000c106 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 62) {
80200f00:	e0bfbc17 	ldw	r2,-272(fp)
80200f04:	10800f98 	cmpnei	r2,r2,62
80200f08:	10000e1e 	bne	r2,zero,80200f44 <bDdr2EepromDump+0x824>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(SPD Revision)\n");
80200f0c:	00e008b4 	movhi	r3,32802
80200f10:	18f52d04 	addi	r3,r3,-11084
80200f14:	00a008b4 	movhi	r2,32802
80200f18:	10aad104 	addi	r2,r2,-21692
80200f1c:	1009883a 	mov	r4,r2
80200f20:	00800404 	movi	r2,16
80200f24:	100d883a 	mov	r6,r2
80200f28:	200b883a 	mov	r5,r4
80200f2c:	1809883a 	mov	r4,r3
80200f30:	020516c0 	call	8020516c <memcpy>
				debug(fp, cDebugBuffer);
80200f34:	012008b4 	movhi	r4,32802
80200f38:	21352d04 	addi	r4,r4,-11084
80200f3c:	02052e40 	call	802052e4 <printf>
80200f40:	0000b006 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 63) {
80200f44:	e0bfbc17 	ldw	r2,-272(fp)
80200f48:	10800fd8 	cmpnei	r2,r2,63
80200f4c:	10001d1e 	bne	r2,zero,80200fc4 <bDdr2EepromDump+0x8a4>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(Checksum)\n");
80200f50:	00a008b4 	movhi	r2,32802
80200f54:	10b52d04 	addi	r2,r2,-11084
80200f58:	00c00a04 	movi	r3,40
80200f5c:	10c00005 	stb	r3,0(r2)
80200f60:	00c010c4 	movi	r3,67
80200f64:	10c00045 	stb	r3,1(r2)
80200f68:	00c01a04 	movi	r3,104
80200f6c:	10c00085 	stb	r3,2(r2)
80200f70:	00c01944 	movi	r3,101
80200f74:	10c000c5 	stb	r3,3(r2)
80200f78:	00c018c4 	movi	r3,99
80200f7c:	10c00105 	stb	r3,4(r2)
80200f80:	00c01ac4 	movi	r3,107
80200f84:	10c00145 	stb	r3,5(r2)
80200f88:	00c01cc4 	movi	r3,115
80200f8c:	10c00185 	stb	r3,6(r2)
80200f90:	00c01d44 	movi	r3,117
80200f94:	10c001c5 	stb	r3,7(r2)
80200f98:	00c01b44 	movi	r3,109
80200f9c:	10c00205 	stb	r3,8(r2)
80200fa0:	00c00a44 	movi	r3,41
80200fa4:	10c00245 	stb	r3,9(r2)
80200fa8:	00c00284 	movi	r3,10
80200fac:	10c00285 	stb	r3,10(r2)
80200fb0:	100002c5 	stb	zero,11(r2)
				debug(fp, cDebugBuffer);
80200fb4:	012008b4 	movhi	r4,32802
80200fb8:	21352d04 	addi	r4,r4,-11084
80200fbc:	02052e40 	call	802052e4 <printf>
80200fc0:	00009006 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 64) {
80200fc4:	e0bfbc17 	ldw	r2,-272(fp)
80200fc8:	10801018 	cmpnei	r2,r2,64
80200fcc:	10000e1e 	bne	r2,zero,80201008 <bDdr2EepromDump+0x8e8>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(64~71: Manufacturer JEDEC ID)\n");
80200fd0:	00e008b4 	movhi	r3,32802
80200fd4:	18f52d04 	addi	r3,r3,-11084
80200fd8:	00a008b4 	movhi	r2,32802
80200fdc:	10aad504 	addi	r2,r2,-21676
80200fe0:	1009883a 	mov	r4,r2
80200fe4:	00800804 	movi	r2,32
80200fe8:	100d883a 	mov	r6,r2
80200fec:	200b883a 	mov	r5,r4
80200ff0:	1809883a 	mov	r4,r3
80200ff4:	020516c0 	call	8020516c <memcpy>
				debug(fp, cDebugBuffer);
80200ff8:	012008b4 	movhi	r4,32802
80200ffc:	21352d04 	addi	r4,r4,-11084
80201000:	02052e40 	call	802052e4 <printf>
80201004:	00007f06 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 72) {
80201008:	e0bfbc17 	ldw	r2,-272(fp)
8020100c:	10801218 	cmpnei	r2,r2,72
80201010:	10000e1e 	bne	r2,zero,8020104c <bDdr2EepromDump+0x92c>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80201014:	00e008b4 	movhi	r3,32802
80201018:	18f52d04 	addi	r3,r3,-11084
8020101c:	00a008b4 	movhi	r2,32802
80201020:	10aadd04 	addi	r2,r2,-21644
80201024:	1009883a 	mov	r4,r2
80201028:	00800dc4 	movi	r2,55
8020102c:	100d883a 	mov	r6,r2
80201030:	200b883a 	mov	r5,r4
80201034:	1809883a 	mov	r4,r3
80201038:	020516c0 	call	8020516c <memcpy>
						"(Module manufacturing location[Vendor-specific code])\n");
				debug(fp, cDebugBuffer);
8020103c:	012008b4 	movhi	r4,32802
80201040:	21352d04 	addi	r4,r4,-11084
80201044:	02052e40 	call	802052e4 <printf>
80201048:	00006e06 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 73) {
8020104c:	e0bfbc17 	ldw	r2,-272(fp)
80201050:	10801258 	cmpnei	r2,r2,73
80201054:	10000e1e 	bne	r2,zero,80201090 <bDdr2EepromDump+0x970>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(73~90: Moduloe part number)\n");
80201058:	00e008b4 	movhi	r3,32802
8020105c:	18f52d04 	addi	r3,r3,-11084
80201060:	00a008b4 	movhi	r2,32802
80201064:	10aaeb04 	addi	r2,r2,-21588
80201068:	1009883a 	mov	r4,r2
8020106c:	00800784 	movi	r2,30
80201070:	100d883a 	mov	r6,r2
80201074:	200b883a 	mov	r5,r4
80201078:	1809883a 	mov	r4,r3
8020107c:	020516c0 	call	8020516c <memcpy>
				debug(fp, cDebugBuffer);
80201080:	012008b4 	movhi	r4,32802
80201084:	21352d04 	addi	r4,r4,-11084
80201088:	02052e40 	call	802052e4 <printf>
8020108c:	00005d06 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 91) {
80201090:	e0bfbc17 	ldw	r2,-272(fp)
80201094:	108016d8 	cmpnei	r2,r2,91
80201098:	10000e1e 	bne	r2,zero,802010d4 <bDdr2EepromDump+0x9b4>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(91~92: Moduloe revision code)\n");
8020109c:	00e008b4 	movhi	r3,32802
802010a0:	18f52d04 	addi	r3,r3,-11084
802010a4:	00a008b4 	movhi	r2,32802
802010a8:	10aaf304 	addi	r2,r2,-21556
802010ac:	1009883a 	mov	r4,r2
802010b0:	00800804 	movi	r2,32
802010b4:	100d883a 	mov	r6,r2
802010b8:	200b883a 	mov	r5,r4
802010bc:	1809883a 	mov	r4,r3
802010c0:	020516c0 	call	8020516c <memcpy>
				debug(fp, cDebugBuffer);
802010c4:	012008b4 	movhi	r4,32802
802010c8:	21352d04 	addi	r4,r4,-11084
802010cc:	02052e40 	call	802052e4 <printf>
802010d0:	00004c06 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 93) {
802010d4:	e0bfbc17 	ldw	r2,-272(fp)
802010d8:	10801758 	cmpnei	r2,r2,93
802010dc:	10000e1e 	bne	r2,zero,80201118 <bDdr2EepromDump+0x9f8>
#if DEBUG_ON
				sprintf(cDebugBuffer,
802010e0:	00e008b4 	movhi	r3,32802
802010e4:	18f52d04 	addi	r3,r3,-11084
802010e8:	00a008b4 	movhi	r2,32802
802010ec:	10aafb04 	addi	r2,r2,-21524
802010f0:	1009883a 	mov	r4,r2
802010f4:	008009c4 	movi	r2,39
802010f8:	100d883a 	mov	r6,r2
802010fc:	200b883a 	mov	r5,r4
80201100:	1809883a 	mov	r4,r3
80201104:	020516c0 	call	8020516c <memcpy>
						"(Manufacture Years since 2000[0-255])\n");
				debug(fp, cDebugBuffer);
80201108:	012008b4 	movhi	r4,32802
8020110c:	21352d04 	addi	r4,r4,-11084
80201110:	02052e40 	call	802052e4 <printf>
80201114:	00003b06 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 94) {
80201118:	e0bfbc17 	ldw	r2,-272(fp)
8020111c:	10801798 	cmpnei	r2,r2,94
80201120:	10000e1e 	bne	r2,zero,8020115c <bDdr2EepromDump+0xa3c>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(Manufacture Weeks[1-52])\n");
80201124:	00e008b4 	movhi	r3,32802
80201128:	18f52d04 	addi	r3,r3,-11084
8020112c:	00a008b4 	movhi	r2,32802
80201130:	10ab0504 	addi	r2,r2,-21484
80201134:	1009883a 	mov	r4,r2
80201138:	008006c4 	movi	r2,27
8020113c:	100d883a 	mov	r6,r2
80201140:	200b883a 	mov	r5,r4
80201144:	1809883a 	mov	r4,r3
80201148:	020516c0 	call	8020516c <memcpy>
				debug(fp, cDebugBuffer);
8020114c:	012008b4 	movhi	r4,32802
80201150:	21352d04 	addi	r4,r4,-11084
80201154:	02052e40 	call	802052e4 <printf>
80201158:	00002a06 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 95) {
8020115c:	e0bfbc17 	ldw	r2,-272(fp)
80201160:	108017d8 	cmpnei	r2,r2,95
80201164:	10000e1e 	bne	r2,zero,802011a0 <bDdr2EepromDump+0xa80>
#if DEBUG_ON
				sprintf(cDebugBuffer,
80201168:	00e008b4 	movhi	r3,32802
8020116c:	18f52d04 	addi	r3,r3,-11084
80201170:	00a008b4 	movhi	r2,32802
80201174:	10ab0c04 	addi	r2,r2,-21456
80201178:	1009883a 	mov	r4,r2
8020117c:	00800a04 	movi	r2,40
80201180:	100d883a 	mov	r6,r2
80201184:	200b883a 	mov	r5,r4
80201188:	1809883a 	mov	r4,r3
8020118c:	020516c0 	call	8020516c <memcpy>
						"(95~98[4-bytes]: Module serial number)\n");
				debug(fp, cDebugBuffer);
80201190:	012008b4 	movhi	r4,32802
80201194:	21352d04 	addi	r4,r4,-11084
80201198:	02052e40 	call	802052e4 <printf>
8020119c:	00001906 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else if (iI == 99) {
802011a0:	e0bfbc17 	ldw	r2,-272(fp)
802011a4:	108018d8 	cmpnei	r2,r2,99
802011a8:	10000e1e 	bne	r2,zero,802011e4 <bDdr2EepromDump+0xac4>
#if DEBUG_ON
				sprintf(cDebugBuffer, "(99~128: Manufacturer-specific data)\n");
802011ac:	00e008b4 	movhi	r3,32802
802011b0:	18f52d04 	addi	r3,r3,-11084
802011b4:	00a008b4 	movhi	r2,32802
802011b8:	10ab1604 	addi	r2,r2,-21416
802011bc:	1009883a 	mov	r4,r2
802011c0:	00800984 	movi	r2,38
802011c4:	100d883a 	mov	r6,r2
802011c8:	200b883a 	mov	r5,r4
802011cc:	1809883a 	mov	r4,r3
802011d0:	020516c0 	call	8020516c <memcpy>
				debug(fp, cDebugBuffer);
802011d4:	012008b4 	movhi	r4,32802
802011d8:	21352d04 	addi	r4,r4,-11084
802011dc:	02052e40 	call	802052e4 <printf>
802011e0:	00000806 	br	80201204 <bDdr2EepromDump+0xae4>
#endif
			} else {
#if DEBUG_ON
				sprintf(cDebugBuffer, "\n");
802011e4:	00a008b4 	movhi	r2,32802
802011e8:	10b52d04 	addi	r2,r2,-11084
802011ec:	00c00284 	movi	r3,10
802011f0:	10c00005 	stb	r3,0(r2)
802011f4:	10000045 	stb	zero,1(r2)
				debug(fp, cDebugBuffer);
802011f8:	012008b4 	movhi	r4,32802
802011fc:	21352d04 	addi	r4,r4,-11084
80201200:	02052e40 	call	802052e4 <printf>

	alt_u8 ucSZData[256];
	bSuccess = I2C_MultipleRead(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
			ucSZData, sizeof(ucSZData));
	if (bSuccess) {
		for (iI = 0; iI < 256 && bSuccess; iI++) {
80201204:	e0bfbc17 	ldw	r2,-272(fp)
80201208:	10800044 	addi	r2,r2,1
8020120c:	e0bfbc15 	stw	r2,-272(fp)
80201210:	e0bfbc17 	ldw	r2,-272(fp)
80201214:	10804008 	cmpgei	r2,r2,256
80201218:	1000101e 	bne	r2,zero,8020125c <bDdr2EepromDump+0xb3c>
8020121c:	e0bfbe17 	ldw	r2,-264(fp)
80201220:	103d8d1e 	bne	r2,zero,80200858 <__reset+0xfa1e0858>
80201224:	00000d06 	br	8020125c <bDdr2EepromDump+0xb3c>
#endif
			}
		}
	} else {
#if DEBUG_ON
		sprintf(cDebugBuffer, "Failed to dump EEPROM\n");
80201228:	00e008b4 	movhi	r3,32802
8020122c:	18f52d04 	addi	r3,r3,-11084
80201230:	00a008b4 	movhi	r2,32802
80201234:	10ab2004 	addi	r2,r2,-21376
80201238:	1009883a 	mov	r4,r2
8020123c:	008005c4 	movi	r2,23
80201240:	100d883a 	mov	r6,r2
80201244:	200b883a 	mov	r5,r4
80201248:	1809883a 	mov	r4,r3
8020124c:	020516c0 	call	8020516c <memcpy>
		debug(fp, cDebugBuffer);
80201250:	012008b4 	movhi	r4,32802
80201254:	21352d04 	addi	r4,r4,-11084
80201258:	02052e40 	call	802052e4 <printf>
#endif
	}
#if DEBUG_ON
	sprintf(cDebugBuffer, "\n");
8020125c:	00a008b4 	movhi	r2,32802
80201260:	10b52d04 	addi	r2,r2,-11084
80201264:	00c00284 	movi	r3,10
80201268:	10c00005 	stb	r3,0(r2)
8020126c:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
80201270:	012008b4 	movhi	r4,32802
80201274:	21352d04 	addi	r4,r4,-11084
80201278:	02052e40 	call	802052e4 <printf>
#endif

	return bSuccess;
8020127c:	e0bfbe17 	ldw	r2,-264(fp)
}
80201280:	e037883a 	mov	sp,fp
80201284:	dfc00117 	ldw	ra,4(sp)
80201288:	df000017 	ldw	fp,0(sp)
8020128c:	dec00204 	addi	sp,sp,8
80201290:	f800283a 	ret

80201294 <bDdr2SwitchMemory>:

bool bDdr2SwitchMemory(alt_u8 ucMemoryId) {
80201294:	defffb04 	addi	sp,sp,-20
80201298:	dfc00415 	stw	ra,16(sp)
8020129c:	df000315 	stw	fp,12(sp)
802012a0:	df000304 	addi	fp,sp,12
802012a4:	2005883a 	mov	r2,r4
802012a8:	e0bfff05 	stb	r2,-4(fp)

	bool bSuccess = FALSE;
802012ac:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 *puliDdr2MemAddr = (alt_u32 *) DDR2_EXT_ADDR_CONTROL_BASE;
802012b0:	00a00034 	movhi	r2,32768
802012b4:	10822204 	addi	r2,r2,2184
802012b8:	e0bffe15 	stw	r2,-8(fp)

	switch (ucMemoryId) {
802012bc:	e0bfff03 	ldbu	r2,-4(fp)
802012c0:	10000326 	beq	r2,zero,802012d0 <bDdr2SwitchMemory+0x3c>
802012c4:	10800060 	cmpeqi	r2,r2,1
802012c8:	1000061e 	bne	r2,zero,802012e4 <bDdr2SwitchMemory+0x50>
802012cc:	00000b06 	br	802012fc <bDdr2SwitchMemory+0x68>
	case DDR2_M1_ID:
		*(puliDdr2MemAddr) = (alt_u32) DDR2_M1_MEMORY_WINDOWED_OFFSET;
802012d0:	e0bffe17 	ldw	r2,-8(fp)
802012d4:	10000015 	stw	zero,0(r2)
		bSuccess = TRUE;
802012d8:	00800044 	movi	r2,1
802012dc:	e0bffd15 	stw	r2,-12(fp)
		break;
802012e0:	00001406 	br	80201334 <bDdr2SwitchMemory+0xa0>
	case DDR2_M2_ID:
		*(puliDdr2MemAddr) = (alt_u32) DDR2_M2_MEMORY_WINDOWED_OFFSET;
802012e4:	e0bffe17 	ldw	r2,-8(fp)
802012e8:	00e00034 	movhi	r3,32768
802012ec:	10c00015 	stw	r3,0(r2)
		bSuccess = TRUE;
802012f0:	00800044 	movi	r2,1
802012f4:	e0bffd15 	stw	r2,-12(fp)
		break;
802012f8:	00000e06 	br	80201334 <bDdr2SwitchMemory+0xa0>
	default:
		bSuccess = FALSE;
802012fc:	e03ffd15 	stw	zero,-12(fp)
#if DEBUG_ON
		sprintf(cDebugBuffer,
80201300:	00e008b4 	movhi	r3,32802
80201304:	18f52d04 	addi	r3,r3,-11084
80201308:	00a008b4 	movhi	r2,32802
8020130c:	10ab2604 	addi	r2,r2,-21352
80201310:	1009883a 	mov	r4,r2
80201314:	00800f04 	movi	r2,60
80201318:	100d883a 	mov	r6,r2
8020131c:	200b883a 	mov	r5,r4
80201320:	1809883a 	mov	r4,r3
80201324:	020516c0 	call	8020516c <memcpy>
				"DR2 Memory ID not identified!! Error switching memories!! \n");
		debug(fp, cDebugBuffer)
80201328:	012008b4 	movhi	r4,32802
8020132c:	21352d04 	addi	r4,r4,-11084
80201330:	02052e40 	call	802052e4 <printf>
		;
#endif
	}

	return bSuccess;
80201334:	e0bffd17 	ldw	r2,-12(fp)
}
80201338:	e037883a 	mov	sp,fp
8020133c:	dfc00117 	ldw	ra,4(sp)
80201340:	df000017 	ldw	fp,0(sp)
80201344:	dec00204 	addi	sp,sp,8
80201348:	f800283a 	ret

8020134c <bDdr2MemoryWriteTest>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryWriteTest(alt_u8 ucMemoryId) {
8020134c:	deffe204 	addi	sp,sp,-120
80201350:	dfc01d15 	stw	ra,116(sp)
80201354:	df001c15 	stw	fp,112(sp)
80201358:	dc401b15 	stw	r17,108(sp)
8020135c:	dc001a15 	stw	r16,104(sp)
80201360:	df001c04 	addi	fp,sp,112
80201364:	2005883a 	mov	r2,r4
80201368:	e0bffd05 	stb	r2,-12(fp)

#if DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Write Test =====\n");
8020136c:	00e008b4 	movhi	r3,32802
80201370:	18f52d04 	addi	r3,r3,-11084
80201374:	00a008b4 	movhi	r2,32802
80201378:	10ab3504 	addi	r2,r2,-21292
8020137c:	1009883a 	mov	r4,r2
80201380:	00800a04 	movi	r2,40
80201384:	100d883a 	mov	r6,r2
80201388:	200b883a 	mov	r5,r4
8020138c:	1809883a 	mov	r4,r3
80201390:	020516c0 	call	8020516c <memcpy>
	debug(fp, cDebugBuffer);
80201394:	012008b4 	movhi	r4,32802
80201398:	21352d04 	addi	r4,r4,-11084
8020139c:	02052e40 	call	802052e4 <printf>
#endif
	bool bSuccess = FALSE;
802013a0:	e03fe515 	stw	zero,-108(fp)
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	switch (ucMemoryId) {
802013a4:	e0bffd03 	ldbu	r2,-12(fp)
802013a8:	10000326 	beq	r2,zero,802013b8 <bDdr2MemoryWriteTest+0x6c>
802013ac:	10800060 	cmpeqi	r2,r2,1
802013b0:	10000a1e 	bne	r2,zero,802013dc <bDdr2MemoryWriteTest+0x90>
802013b4:	00001206 	br	80201400 <bDdr2MemoryWriteTest+0xb4>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
802013b8:	e0bffd03 	ldbu	r2,-12(fp)
802013bc:	1009883a 	mov	r4,r2
802013c0:	02012940 	call	80201294 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
802013c4:	e03fe615 	stw	zero,-104(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
802013c8:	00a00034 	movhi	r2,32768
802013cc:	e0bfe715 	stw	r2,-100(fp)
		bSuccess = TRUE;
802013d0:	00800044 	movi	r2,1
802013d4:	e0bfe515 	stw	r2,-108(fp)
		break;
802013d8:	00001906 	br	80201440 <bDdr2MemoryWriteTest+0xf4>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
802013dc:	e0bffd03 	ldbu	r2,-12(fp)
802013e0:	1009883a 	mov	r4,r2
802013e4:	02012940 	call	80201294 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
802013e8:	e03fe615 	stw	zero,-104(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
802013ec:	00a00034 	movhi	r2,32768
802013f0:	e0bfe715 	stw	r2,-100(fp)
		bSuccess = TRUE;
802013f4:	00800044 	movi	r2,1
802013f8:	e0bfe515 	stw	r2,-108(fp)
		break;
802013fc:	00001006 	br	80201440 <bDdr2MemoryWriteTest+0xf4>
	default:
		bSuccess = FALSE;
80201400:	e03fe515 	stw	zero,-108(fp)
#if DEBUG_ON
		sprintf(cDebugBuffer,
80201404:	00e008b4 	movhi	r3,32802
80201408:	18f52d04 	addi	r3,r3,-11084
8020140c:	00a008b4 	movhi	r2,32802
80201410:	10a94604 	addi	r2,r2,-23272
80201414:	1009883a 	mov	r4,r2
80201418:	00800bc4 	movi	r2,47
8020141c:	100d883a 	mov	r6,r2
80201420:	200b883a 	mov	r5,r4
80201424:	1809883a 	mov	r4,r3
80201428:	020516c0 	call	8020516c <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
8020142c:	012008b4 	movhi	r4,32802
80201430:	21352d04 	addi	r4,r4,-11084
80201434:	02052e40 	call	802052e4 <printf>
		;
#endif
		return bSuccess;
80201438:	e0bfe517 	ldw	r2,-108(fp)
8020143c:	00010a06 	br	80201868 <bDdr2MemoryWriteTest+0x51c>
	}

#if DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %ld MBytes\n", uliByteLen / 1024 / 1024);
80201440:	e0bfe717 	ldw	r2,-100(fp)
80201444:	1004d53a 	srli	r2,r2,20
80201448:	100d883a 	mov	r6,r2
8020144c:	016008b4 	movhi	r5,32802
80201450:	296b3f04 	addi	r5,r5,-21252
80201454:	012008b4 	movhi	r4,32802
80201458:	21352d04 	addi	r4,r4,-11084
8020145c:	020544c0 	call	8020544c <sprintf>
	debug(fp, cDebugBuffer);
80201460:	012008b4 	movhi	r4,32802
80201464:	21352d04 	addi	r4,r4,-11084
80201468:	02052e40 	call	802052e4 <printf>

	int iI, iNRemainedLen, iNAccessLen;
	TMyData *pxDes;

	int iNItemNum, iNPos;
	const int ciMyDataSize = sizeof(TMyData);
8020146c:	00800104 	movi	r2,4
80201470:	e0bfee15 	stw	r2,-72(fp)
	int iNProgressIndex = 0;
80201474:	e03fed15 	stw	zero,-76(fp)
	alt_u32 uliInitValue;
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;
80201478:	e03fef15 	stw	zero,-68(fp)

	for (iI = 0; iI < 10; iI++) {
8020147c:	e03fe815 	stw	zero,-96(fp)
80201480:	00001506 	br	802014d8 <bDdr2MemoryWriteTest+0x18c>
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
80201484:	e0ffe717 	ldw	r3,-100(fp)
80201488:	00b33374 	movhi	r2,52429
8020148c:	10b33344 	addi	r2,r2,-13107
80201490:	1888383a 	mulxuu	r4,r3,r2
80201494:	1885383a 	mul	r2,r3,r2
80201498:	1021883a 	mov	r16,r2
8020149c:	2023883a 	mov	r17,r4
802014a0:	8804d0fa 	srli	r2,r17,3
802014a4:	e0ffe817 	ldw	r3,-96(fp)
802014a8:	18c00044 	addi	r3,r3,1
802014ac:	10c7383a 	mul	r3,r2,r3
802014b0:	e0bfe817 	ldw	r2,-96(fp)
802014b4:	1085883a 	add	r2,r2,r2
802014b8:	1085883a 	add	r2,r2,r2
802014bc:	e13fe504 	addi	r4,fp,-108
802014c0:	2085883a 	add	r2,r4,r2
802014c4:	10800e04 	addi	r2,r2,56
802014c8:	10c00015 	stw	r3,0(r2)
	int iNProgressIndex = 0;
	alt_u32 uliInitValue;
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;

	for (iI = 0; iI < 10; iI++) {
802014cc:	e0bfe817 	ldw	r2,-96(fp)
802014d0:	10800044 	addi	r2,r2,1
802014d4:	e0bfe815 	stw	r2,-96(fp)
802014d8:	e0bfe817 	ldw	r2,-96(fp)
802014dc:	10800290 	cmplti	r2,r2,10
802014e0:	103fe81e 	bne	r2,zero,80201484 <__reset+0xfa1e1484>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
802014e4:	d0a02517 	ldw	r2,-32620(gp)
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
	}
	uliInitValue = alt_nticks();
802014e8:	e0bff015 	stw	r2,-64(fp)
	iNItemNum = sizeof(xSZData) / sizeof(xSZData[0]);
802014ec:	00804004 	movi	r2,256
802014f0:	e0bfeb15 	stw	r2,-84(fp)
	for (iI = 0; iI < iNItemNum; iI++) {
802014f4:	e03fe815 	stw	zero,-96(fp)
802014f8:	00001e06 	br	80201574 <bDdr2MemoryWriteTest+0x228>
		if (iI == 0) {
802014fc:	e0bfe817 	ldw	r2,-96(fp)
80201500:	1000091e 	bne	r2,zero,80201528 <bDdr2MemoryWriteTest+0x1dc>
			xSZData[iI] = uliInitValue;
80201504:	00a008b4 	movhi	r2,32802
80201508:	10b56d04 	addi	r2,r2,-10828
8020150c:	e0ffe817 	ldw	r3,-96(fp)
80201510:	18c7883a 	add	r3,r3,r3
80201514:	18c7883a 	add	r3,r3,r3
80201518:	10c5883a 	add	r2,r2,r3
8020151c:	e0fff017 	ldw	r3,-64(fp)
80201520:	10c00015 	stw	r3,0(r2)
80201524:	00001006 	br	80201568 <bDdr2MemoryWriteTest+0x21c>
		} else {
			xSZData[iI] = xSZData[iI - 1] * 13;
80201528:	e0bfe817 	ldw	r2,-96(fp)
8020152c:	10ffffc4 	addi	r3,r2,-1
80201530:	00a008b4 	movhi	r2,32802
80201534:	10b56d04 	addi	r2,r2,-10828
80201538:	18c7883a 	add	r3,r3,r3
8020153c:	18c7883a 	add	r3,r3,r3
80201540:	10c5883a 	add	r2,r2,r3
80201544:	10800017 	ldw	r2,0(r2)
80201548:	11000364 	muli	r4,r2,13
8020154c:	00a008b4 	movhi	r2,32802
80201550:	10b56d04 	addi	r2,r2,-10828
80201554:	e0ffe817 	ldw	r3,-96(fp)
80201558:	18c7883a 	add	r3,r3,r3
8020155c:	18c7883a 	add	r3,r3,r3
80201560:	10c5883a 	add	r2,r2,r3
80201564:	11000015 	stw	r4,0(r2)
	for (iI = 0; iI < 10; iI++) {
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
	}
	uliInitValue = alt_nticks();
	iNItemNum = sizeof(xSZData) / sizeof(xSZData[0]);
	for (iI = 0; iI < iNItemNum; iI++) {
80201568:	e0bfe817 	ldw	r2,-96(fp)
8020156c:	10800044 	addi	r2,r2,1
80201570:	e0bfe815 	stw	r2,-96(fp)
80201574:	e0ffe817 	ldw	r3,-96(fp)
80201578:	e0bfeb17 	ldw	r2,-84(fp)
8020157c:	18bfdf16 	blt	r3,r2,802014fc <__reset+0xfa1e14fc>
			xSZData[iI] = uliInitValue;
		} else {
			xSZData[iI] = xSZData[iI - 1] * 13;
		}
	}
	xSZData[iNItemNum - 1] = 0xAAAAAAAA;
80201580:	e0bfeb17 	ldw	r2,-84(fp)
80201584:	10ffffc4 	addi	r3,r2,-1
80201588:	00a008b4 	movhi	r2,32802
8020158c:	10b56d04 	addi	r2,r2,-10828
80201590:	18c7883a 	add	r3,r3,r3
80201594:	18c7883a 	add	r3,r3,r3
80201598:	10c7883a 	add	r3,r2,r3
8020159c:	00aaaaf4 	movhi	r2,43691
802015a0:	10aaaa84 	addi	r2,r2,-21846
802015a4:	18800015 	stw	r2,0(r3)
	xSZData[iNItemNum - 2] = 0x55555555;
802015a8:	e0bfeb17 	ldw	r2,-84(fp)
802015ac:	10ffff84 	addi	r3,r2,-2
802015b0:	00a008b4 	movhi	r2,32802
802015b4:	10b56d04 	addi	r2,r2,-10828
802015b8:	18c7883a 	add	r3,r3,r3
802015bc:	18c7883a 	add	r3,r3,r3
802015c0:	10c7883a 	add	r3,r2,r3
802015c4:	00955574 	movhi	r2,21845
802015c8:	10955544 	addi	r2,r2,21845
802015cc:	18800015 	stw	r2,0(r3)
	xSZData[iNItemNum - 3] = 0x00000000;
802015d0:	e0bfeb17 	ldw	r2,-84(fp)
802015d4:	10ffff44 	addi	r3,r2,-3
802015d8:	00a008b4 	movhi	r2,32802
802015dc:	10b56d04 	addi	r2,r2,-10828
802015e0:	18c7883a 	add	r3,r3,r3
802015e4:	18c7883a 	add	r3,r3,r3
802015e8:	10c5883a 	add	r2,r2,r3
802015ec:	10000015 	stw	zero,0(r2)
	xSZData[iNItemNum - 4] = 0xFFFFFFFF;
802015f0:	e0bfeb17 	ldw	r2,-84(fp)
802015f4:	10ffff04 	addi	r3,r2,-4
802015f8:	00a008b4 	movhi	r2,32802
802015fc:	10b56d04 	addi	r2,r2,-10828
80201600:	18c7883a 	add	r3,r3,r3
80201604:	18c7883a 	add	r3,r3,r3
80201608:	10c5883a 	add	r2,r2,r3
8020160c:	00ffffc4 	movi	r3,-1
80201610:	10c00015 	stw	r3,0(r2)

#if DEBUG_ON
	sprintf(cDebugBuffer, "Writing data...\n");
80201614:	00e008b4 	movhi	r3,32802
80201618:	18f52d04 	addi	r3,r3,-11084
8020161c:	00a008b4 	movhi	r2,32802
80201620:	10ab4504 	addi	r2,r2,-21228
80201624:	1009883a 	mov	r4,r2
80201628:	00800444 	movi	r2,17
8020162c:	100d883a 	mov	r6,r2
80201630:	200b883a 	mov	r5,r4
80201634:	1809883a 	mov	r4,r3
80201638:	020516c0 	call	8020516c <memcpy>
	debug(fp, cDebugBuffer);
8020163c:	012008b4 	movhi	r4,32802
80201640:	21352d04 	addi	r4,r4,-11084
80201644:	02052e40 	call	802052e4 <printf>
80201648:	d0a02517 	ldw	r2,-32620(gp)
#endif
	iTimeStart = alt_nticks();
8020164c:	e0bff115 	stw	r2,-60(fp)
	pxDes = (TMyData *) uliDdr2Base;
80201650:	e0bfe617 	ldw	r2,-104(fp)
80201654:	e0bfea15 	stw	r2,-88(fp)
	iNAccessLen = sizeof(xSZData);
80201658:	00810004 	movi	r2,1024
8020165c:	e0bfe915 	stw	r2,-92(fp)
	iNItemNum = iNAccessLen / ciMyDataSize;
80201660:	e0ffe917 	ldw	r3,-92(fp)
80201664:	e0bfee17 	ldw	r2,-72(fp)
80201668:	1885283a 	div	r2,r3,r2
8020166c:	e0bfeb15 	stw	r2,-84(fp)
	iNPos = 0;
80201670:	e03fec15 	stw	zero,-80(fp)
	while (iNPos < uliByteLen) {
80201674:	00003806 	br	80201758 <bDdr2MemoryWriteTest+0x40c>
		iNRemainedLen = uliByteLen - iNPos;
80201678:	e0bfec17 	ldw	r2,-80(fp)
8020167c:	e0ffe717 	ldw	r3,-100(fp)
80201680:	1885c83a 	sub	r2,r3,r2
80201684:	e0bff215 	stw	r2,-56(fp)
		if (iNAccessLen > iNRemainedLen) {
80201688:	e0bfe917 	ldw	r2,-92(fp)
8020168c:	e0fff217 	ldw	r3,-56(fp)
80201690:	1880060e 	bge	r3,r2,802016ac <bDdr2MemoryWriteTest+0x360>
			iNAccessLen = iNRemainedLen;
80201694:	e0bff217 	ldw	r2,-56(fp)
80201698:	e0bfe915 	stw	r2,-92(fp)
			iNItemNum = iNAccessLen / ciMyDataSize;
8020169c:	e0ffe917 	ldw	r3,-92(fp)
802016a0:	e0bfee17 	ldw	r2,-72(fp)
802016a4:	1885283a 	div	r2,r3,r2
802016a8:	e0bfeb15 	stw	r2,-84(fp)
		}
		memcpy(pxDes, xSZData, iNAccessLen);
802016ac:	e0bfe917 	ldw	r2,-92(fp)
802016b0:	100d883a 	mov	r6,r2
802016b4:	016008b4 	movhi	r5,32802
802016b8:	29756d04 	addi	r5,r5,-10828
802016bc:	e13fea17 	ldw	r4,-88(fp)
802016c0:	020516c0 	call	8020516c <memcpy>
		pxDes += iNItemNum;
802016c4:	e0bfeb17 	ldw	r2,-84(fp)
802016c8:	1085883a 	add	r2,r2,r2
802016cc:	1085883a 	add	r2,r2,r2
802016d0:	1007883a 	mov	r3,r2
802016d4:	e0bfea17 	ldw	r2,-88(fp)
802016d8:	10c5883a 	add	r2,r2,r3
802016dc:	e0bfea15 	stw	r2,-88(fp)
		iNPos += iNAccessLen;
802016e0:	e0ffec17 	ldw	r3,-80(fp)
802016e4:	e0bfe917 	ldw	r2,-92(fp)
802016e8:	1885883a 	add	r2,r3,r2
802016ec:	e0bfec15 	stw	r2,-80(fp)
		if (iNProgressIndex <= 9 && iNPos >= uliSZProgress[iNProgressIndex]) {
802016f0:	e0bfed17 	ldw	r2,-76(fp)
802016f4:	10800288 	cmpgei	r2,r2,10
802016f8:	1000171e 	bne	r2,zero,80201758 <bDdr2MemoryWriteTest+0x40c>
802016fc:	e0bfed17 	ldw	r2,-76(fp)
80201700:	1085883a 	add	r2,r2,r2
80201704:	1085883a 	add	r2,r2,r2
80201708:	e0ffe504 	addi	r3,fp,-108
8020170c:	1885883a 	add	r2,r3,r2
80201710:	10800e04 	addi	r2,r2,56
80201714:	10800017 	ldw	r2,0(r2)
80201718:	e0ffec17 	ldw	r3,-80(fp)
8020171c:	18800e36 	bltu	r3,r2,80201758 <bDdr2MemoryWriteTest+0x40c>
			iNProgressIndex++;
80201720:	e0bfed17 	ldw	r2,-76(fp)
80201724:	10800044 	addi	r2,r2,1
80201728:	e0bfed15 	stw	r2,-76(fp)
#if DEBUG_ON
			sprintf(cDebugBuffer, "%02d%% ", iNProgressIndex * 10);
8020172c:	e0bfed17 	ldw	r2,-76(fp)
80201730:	108002a4 	muli	r2,r2,10
80201734:	100d883a 	mov	r6,r2
80201738:	016008b4 	movhi	r5,32802
8020173c:	296b4a04 	addi	r5,r5,-21208
80201740:	012008b4 	movhi	r4,32802
80201744:	21352d04 	addi	r4,r4,-11084
80201748:	020544c0 	call	8020544c <sprintf>
			debug(fp, cDebugBuffer);
8020174c:	012008b4 	movhi	r4,32802
80201750:	21352d04 	addi	r4,r4,-11084
80201754:	02052e40 	call	802052e4 <printf>
	iTimeStart = alt_nticks();
	pxDes = (TMyData *) uliDdr2Base;
	iNAccessLen = sizeof(xSZData);
	iNItemNum = iNAccessLen / ciMyDataSize;
	iNPos = 0;
	while (iNPos < uliByteLen) {
80201758:	e0ffec17 	ldw	r3,-80(fp)
8020175c:	e0bfe717 	ldw	r2,-100(fp)
80201760:	18bfc536 	bltu	r3,r2,80201678 <__reset+0xfa1e1678>
			sprintf(cDebugBuffer, "%02d%% ", iNProgressIndex * 10);
			debug(fp, cDebugBuffer);
#endif
		}
	}
	alt_dcache_flush_all();
80201764:	02153040 	call	80215304 <alt_dcache_flush_all>
#if DEBUG_ON
	sprintf(cDebugBuffer, "\n");
80201768:	00a008b4 	movhi	r2,32802
8020176c:	10b52d04 	addi	r2,r2,-11084
80201770:	00c00284 	movi	r3,10
80201774:	10c00005 	stb	r3,0(r2)
80201778:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
8020177c:	012008b4 	movhi	r4,32802
80201780:	21352d04 	addi	r4,r4,-11084
80201784:	02052e40 	call	802052e4 <printf>
80201788:	d0e02517 	ldw	r3,-32620(gp)
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
8020178c:	e0bff117 	ldw	r2,-60(fp)
80201790:	1885c83a 	sub	r2,r3,r2
80201794:	e0bfef15 	stw	r2,-68(fp)
	if (bSuccess) {
80201798:	e0bfe517 	ldw	r2,-108(fp)
8020179c:	10001c26 	beq	r2,zero,80201810 <bDdr2MemoryWriteTest+0x4c4>
#if DEBUG_ON
		sprintf(cDebugBuffer,
				"DDR2 write test pass, size=%lu bytes, %.3f sec\n", uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
802017a0:	e13fef17 	ldw	r4,-68(fp)
802017a4:	0204ce40 	call	80204ce4 <__floatsisf>
802017a8:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
802017ac:	d0a02417 	ldw	r2,-32624(gp)
802017b0:	1009883a 	mov	r4,r2
802017b4:	0204e080 	call	80204e08 <__floatunsisf>
802017b8:	1007883a 	mov	r3,r2
802017bc:	180b883a 	mov	r5,r3
802017c0:	8009883a 	mov	r4,r16
802017c4:	02048a40 	call	802048a4 <__divsf3>
802017c8:	1007883a 	mov	r3,r2
802017cc:	1805883a 	mov	r2,r3
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
	if (bSuccess) {
#if DEBUG_ON
		sprintf(cDebugBuffer,
802017d0:	1009883a 	mov	r4,r2
802017d4:	0204ef80 	call	80204ef8 <__extendsfdf2>
802017d8:	1009883a 	mov	r4,r2
802017dc:	180b883a 	mov	r5,r3
802017e0:	d9400015 	stw	r5,0(sp)
802017e4:	200f883a 	mov	r7,r4
802017e8:	e1bfe717 	ldw	r6,-100(fp)
802017ec:	016008b4 	movhi	r5,32802
802017f0:	296b4c04 	addi	r5,r5,-21200
802017f4:	012008b4 	movhi	r4,32802
802017f8:	21352d04 	addi	r4,r4,-11084
802017fc:	020544c0 	call	8020544c <sprintf>
				"DDR2 write test pass, size=%lu bytes, %.3f sec\n", uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
		debug(fp, cDebugBuffer);
80201800:	012008b4 	movhi	r4,32802
80201804:	21352d04 	addi	r4,r4,-11084
80201808:	02052e40 	call	802052e4 <printf>
8020180c:	00000d06 	br	80201844 <bDdr2MemoryWriteTest+0x4f8>
#endif
	} else {
#if DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 write test fail\n");
80201810:	00e008b4 	movhi	r3,32802
80201814:	18f52d04 	addi	r3,r3,-11084
80201818:	00a008b4 	movhi	r2,32802
8020181c:	10ab5804 	addi	r2,r2,-21152
80201820:	1009883a 	mov	r4,r2
80201824:	00800584 	movi	r2,22
80201828:	100d883a 	mov	r6,r2
8020182c:	200b883a 	mov	r5,r4
80201830:	1809883a 	mov	r4,r3
80201834:	020516c0 	call	8020516c <memcpy>
		debug(fp, cDebugBuffer);
80201838:	012008b4 	movhi	r4,32802
8020183c:	21352d04 	addi	r4,r4,-11084
80201840:	02052e40 	call	802052e4 <printf>
#endif
	}
#if DEBUG_ON
	sprintf(cDebugBuffer, "\n");
80201844:	00a008b4 	movhi	r2,32802
80201848:	10b52d04 	addi	r2,r2,-11084
8020184c:	00c00284 	movi	r3,10
80201850:	10c00005 	stb	r3,0(r2)
80201854:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
80201858:	012008b4 	movhi	r4,32802
8020185c:	21352d04 	addi	r4,r4,-11084
80201860:	02052e40 	call	802052e4 <printf>
#endif

	return bSuccess;
80201864:	e0bfe517 	ldw	r2,-108(fp)
}
80201868:	e6fffe04 	addi	sp,fp,-8
8020186c:	dfc00317 	ldw	ra,12(sp)
80201870:	df000217 	ldw	fp,8(sp)
80201874:	dc400117 	ldw	r17,4(sp)
80201878:	dc000017 	ldw	r16,0(sp)
8020187c:	dec00404 	addi	sp,sp,16
80201880:	f800283a 	ret

80201884 <bDdr2MemoryReadTest>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryReadTest(alt_u8 ucMemoryId) {
80201884:	deffe204 	addi	sp,sp,-120
80201888:	dfc01d15 	stw	ra,116(sp)
8020188c:	df001c15 	stw	fp,112(sp)
80201890:	dc401b15 	stw	r17,108(sp)
80201894:	dc001a15 	stw	r16,104(sp)
80201898:	df001c04 	addi	fp,sp,112
8020189c:	2005883a 	mov	r2,r4
802018a0:	e0bffd05 	stb	r2,-12(fp)

#if DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Read Test =====\n");
802018a4:	00e008b4 	movhi	r3,32802
802018a8:	18f52d04 	addi	r3,r3,-11084
802018ac:	00a008b4 	movhi	r2,32802
802018b0:	10ab5e04 	addi	r2,r2,-21128
802018b4:	1009883a 	mov	r4,r2
802018b8:	008009c4 	movi	r2,39
802018bc:	100d883a 	mov	r6,r2
802018c0:	200b883a 	mov	r5,r4
802018c4:	1809883a 	mov	r4,r3
802018c8:	020516c0 	call	8020516c <memcpy>
	debug(fp, cDebugBuffer);
802018cc:	012008b4 	movhi	r4,32802
802018d0:	21352d04 	addi	r4,r4,-11084
802018d4:	02052e40 	call	802052e4 <printf>
#endif
	bool bSuccess = FALSE;
802018d8:	e03fe515 	stw	zero,-108(fp)
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	switch (ucMemoryId) {
802018dc:	e0bffd03 	ldbu	r2,-12(fp)
802018e0:	10000326 	beq	r2,zero,802018f0 <bDdr2MemoryReadTest+0x6c>
802018e4:	10800060 	cmpeqi	r2,r2,1
802018e8:	10000a1e 	bne	r2,zero,80201914 <bDdr2MemoryReadTest+0x90>
802018ec:	00001206 	br	80201938 <bDdr2MemoryReadTest+0xb4>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
802018f0:	e0bffd03 	ldbu	r2,-12(fp)
802018f4:	1009883a 	mov	r4,r2
802018f8:	02012940 	call	80201294 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
802018fc:	e03fe615 	stw	zero,-104(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
80201900:	00a00034 	movhi	r2,32768
80201904:	e0bfe715 	stw	r2,-100(fp)
		bSuccess = TRUE;
80201908:	00800044 	movi	r2,1
8020190c:	e0bfe515 	stw	r2,-108(fp)
		break;
80201910:	00001906 	br	80201978 <bDdr2MemoryReadTest+0xf4>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
80201914:	e0bffd03 	ldbu	r2,-12(fp)
80201918:	1009883a 	mov	r4,r2
8020191c:	02012940 	call	80201294 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
80201920:	e03fe615 	stw	zero,-104(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
80201924:	00a00034 	movhi	r2,32768
80201928:	e0bfe715 	stw	r2,-100(fp)
		bSuccess = TRUE;
8020192c:	00800044 	movi	r2,1
80201930:	e0bfe515 	stw	r2,-108(fp)
		break;
80201934:	00001006 	br	80201978 <bDdr2MemoryReadTest+0xf4>
	default:
		bSuccess = FALSE;
80201938:	e03fe515 	stw	zero,-108(fp)
#if DEBUG_ON
		sprintf(cDebugBuffer,
8020193c:	00e008b4 	movhi	r3,32802
80201940:	18f52d04 	addi	r3,r3,-11084
80201944:	00a008b4 	movhi	r2,32802
80201948:	10a94604 	addi	r2,r2,-23272
8020194c:	1009883a 	mov	r4,r2
80201950:	00800bc4 	movi	r2,47
80201954:	100d883a 	mov	r6,r2
80201958:	200b883a 	mov	r5,r4
8020195c:	1809883a 	mov	r4,r3
80201960:	020516c0 	call	8020516c <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
80201964:	012008b4 	movhi	r4,32802
80201968:	21352d04 	addi	r4,r4,-11084
8020196c:	02052e40 	call	802052e4 <printf>
		;
#endif
		return bSuccess;
80201970:	e0bfe517 	ldw	r2,-108(fp)
80201974:	0000ec06 	br	80201d28 <bDdr2MemoryReadTest+0x4a4>
	}

#if DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %lu MBytes\n", uliByteLen / 1024 / 1024);
80201978:	e0bfe717 	ldw	r2,-100(fp)
8020197c:	1004d53a 	srli	r2,r2,20
80201980:	100d883a 	mov	r6,r2
80201984:	016008b4 	movhi	r5,32802
80201988:	296b6804 	addi	r5,r5,-21088
8020198c:	012008b4 	movhi	r4,32802
80201990:	21352d04 	addi	r4,r4,-11084
80201994:	020544c0 	call	8020544c <sprintf>
	debug(fp, cDebugBuffer);
80201998:	012008b4 	movhi	r4,32802
8020199c:	21352d04 	addi	r4,r4,-11084
802019a0:	02052e40 	call	802052e4 <printf>
#endif

	int iI, iNRemainedLen, iNAccessLen;
	TMyData *pxDes, *pxSrc;
	int iNItemNum, iNPos;
	iNItemNum = sizeof(xSZData) / sizeof(xSZData[0]);
802019a4:	00804004 	movi	r2,256
802019a8:	e0bfec15 	stw	r2,-80(fp)
	const int ciMyDataSize = sizeof(TMyData);
802019ac:	00800104 	movi	r2,4
802019b0:	e0bfef15 	stw	r2,-68(fp)
	iNAccessLen = iNItemNum * ciMyDataSize;
802019b4:	e0ffec17 	ldw	r3,-80(fp)
802019b8:	e0bfef17 	ldw	r2,-68(fp)
802019bc:	1885383a 	mul	r2,r3,r2
802019c0:	e0bfe915 	stw	r2,-92(fp)
	int iNProgressIndex = 0;
802019c4:	e03fee15 	stw	zero,-72(fp)
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;
802019c8:	e03ff015 	stw	zero,-64(fp)

	for (iI = 0; iI < 10; iI++) {
802019cc:	e03fe815 	stw	zero,-96(fp)
802019d0:	00001506 	br	80201a28 <bDdr2MemoryReadTest+0x1a4>
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
802019d4:	e0ffe717 	ldw	r3,-100(fp)
802019d8:	00b33374 	movhi	r2,52429
802019dc:	10b33344 	addi	r2,r2,-13107
802019e0:	1888383a 	mulxuu	r4,r3,r2
802019e4:	1885383a 	mul	r2,r3,r2
802019e8:	1021883a 	mov	r16,r2
802019ec:	2023883a 	mov	r17,r4
802019f0:	8804d0fa 	srli	r2,r17,3
802019f4:	e0ffe817 	ldw	r3,-96(fp)
802019f8:	18c00044 	addi	r3,r3,1
802019fc:	10c7383a 	mul	r3,r2,r3
80201a00:	e0bfe817 	ldw	r2,-96(fp)
80201a04:	1085883a 	add	r2,r2,r2
80201a08:	1085883a 	add	r2,r2,r2
80201a0c:	e13fe504 	addi	r4,fp,-108
80201a10:	2085883a 	add	r2,r4,r2
80201a14:	10800e04 	addi	r2,r2,56
80201a18:	10c00015 	stw	r3,0(r2)
	iNAccessLen = iNItemNum * ciMyDataSize;
	int iNProgressIndex = 0;
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;

	for (iI = 0; iI < 10; iI++) {
80201a1c:	e0bfe817 	ldw	r2,-96(fp)
80201a20:	10800044 	addi	r2,r2,1
80201a24:	e0bfe815 	stw	r2,-96(fp)
80201a28:	e0bfe817 	ldw	r2,-96(fp)
80201a2c:	10800290 	cmplti	r2,r2,10
80201a30:	103fe81e 	bne	r2,zero,802019d4 <__reset+0xfa1e19d4>
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
	}

	iNProgressIndex = 0;
80201a34:	e03fee15 	stw	zero,-72(fp)
#if DEBUG_ON
	sprintf(cDebugBuffer, "Reading/Verifying Data...\n");
80201a38:	00e008b4 	movhi	r3,32802
80201a3c:	18f52d04 	addi	r3,r3,-11084
80201a40:	00a008b4 	movhi	r2,32802
80201a44:	10ab6e04 	addi	r2,r2,-21064
80201a48:	1009883a 	mov	r4,r2
80201a4c:	008006c4 	movi	r2,27
80201a50:	100d883a 	mov	r6,r2
80201a54:	200b883a 	mov	r5,r4
80201a58:	1809883a 	mov	r4,r3
80201a5c:	020516c0 	call	8020516c <memcpy>
	debug(fp, cDebugBuffer);
80201a60:	012008b4 	movhi	r4,32802
80201a64:	21352d04 	addi	r4,r4,-11084
80201a68:	02052e40 	call	802052e4 <printf>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
80201a6c:	d0a02517 	ldw	r2,-32620(gp)
#endif
	iTimeStart = alt_nticks();
80201a70:	e0bff115 	stw	r2,-60(fp)

	pxSrc = (TMyData *) uliDdr2Base;
80201a74:	e0bfe617 	ldw	r2,-104(fp)
80201a78:	e0bfeb15 	stw	r2,-84(fp)
	iNAccessLen = sizeof(xSZData);
80201a7c:	00810004 	movi	r2,1024
80201a80:	e0bfe915 	stw	r2,-92(fp)
	iNItemNum = iNAccessLen / ciMyDataSize;
80201a84:	e0ffe917 	ldw	r3,-92(fp)
80201a88:	e0bfef17 	ldw	r2,-68(fp)
80201a8c:	1885283a 	div	r2,r3,r2
80201a90:	e0bfec15 	stw	r2,-80(fp)
	iNPos = 0;
80201a94:	e03fed15 	stw	zero,-76(fp)
	while (bSuccess && iNPos < uliByteLen) {
80201a98:	00005e06 	br	80201c14 <bDdr2MemoryReadTest+0x390>
		iNRemainedLen = uliByteLen - iNPos;
80201a9c:	e0bfed17 	ldw	r2,-76(fp)
80201aa0:	e0ffe717 	ldw	r3,-100(fp)
80201aa4:	1885c83a 	sub	r2,r3,r2
80201aa8:	e0bff215 	stw	r2,-56(fp)
		if (iNAccessLen > iNRemainedLen) {
80201aac:	e0bfe917 	ldw	r2,-92(fp)
80201ab0:	e0fff217 	ldw	r3,-56(fp)
80201ab4:	1880060e 	bge	r3,r2,80201ad0 <bDdr2MemoryReadTest+0x24c>
			iNAccessLen = iNRemainedLen;
80201ab8:	e0bff217 	ldw	r2,-56(fp)
80201abc:	e0bfe915 	stw	r2,-92(fp)
			iNItemNum = iNAccessLen / ciMyDataSize;
80201ac0:	e0ffe917 	ldw	r3,-92(fp)
80201ac4:	e0bfef17 	ldw	r2,-68(fp)
80201ac8:	1885283a 	div	r2,r3,r2
80201acc:	e0bfec15 	stw	r2,-80(fp)
		}
		pxDes = xSZData;
80201ad0:	00a008b4 	movhi	r2,32802
80201ad4:	10b56d04 	addi	r2,r2,-10828
80201ad8:	e0bfea15 	stw	r2,-88(fp)
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
80201adc:	e03fe815 	stw	zero,-96(fp)
80201ae0:	00002906 	br	80201b88 <bDdr2MemoryReadTest+0x304>
			if (*pxSrc++ != *pxDes++) {
80201ae4:	e0bfeb17 	ldw	r2,-84(fp)
80201ae8:	10c00104 	addi	r3,r2,4
80201aec:	e0ffeb15 	stw	r3,-84(fp)
80201af0:	10c00017 	ldw	r3,0(r2)
80201af4:	e0bfea17 	ldw	r2,-88(fp)
80201af8:	11000104 	addi	r4,r2,4
80201afc:	e13fea15 	stw	r4,-88(fp)
80201b00:	10800017 	ldw	r2,0(r2)
80201b04:	18801d26 	beq	r3,r2,80201b7c <bDdr2MemoryReadTest+0x2f8>
#if DEBUG_ON
				sprintf(cDebugBuffer,
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
80201b08:	e0bfeb17 	ldw	r2,-84(fp)
80201b0c:	10bfff04 	addi	r2,r2,-4
80201b10:	10800017 	ldw	r2,0(r2)
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
			if (*pxSrc++ != *pxDes++) {
#if DEBUG_ON
				sprintf(cDebugBuffer,
80201b14:	1009883a 	mov	r4,r2
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
80201b18:	00a008b4 	movhi	r2,32802
80201b1c:	10b56d04 	addi	r2,r2,-10828
80201b20:	e0ffe817 	ldw	r3,-96(fp)
80201b24:	18c7883a 	add	r3,r3,r3
80201b28:	18c7883a 	add	r3,r3,r3
80201b2c:	10c5883a 	add	r2,r2,r3
80201b30:	10800017 	ldw	r2,0(r2)
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
			if (*pxSrc++ != *pxDes++) {
#if DEBUG_ON
				sprintf(cDebugBuffer,
80201b34:	100b883a 	mov	r5,r2
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
						(iNPos / ciMyDataSize) + iI);
80201b38:	e0ffed17 	ldw	r3,-76(fp)
80201b3c:	e0bfef17 	ldw	r2,-68(fp)
80201b40:	1887283a 	div	r3,r3,r2
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
			if (*pxSrc++ != *pxDes++) {
#if DEBUG_ON
				sprintf(cDebugBuffer,
80201b44:	e0bfe817 	ldw	r2,-96(fp)
80201b48:	1885883a 	add	r2,r3,r2
80201b4c:	d8800015 	stw	r2,0(sp)
80201b50:	280f883a 	mov	r7,r5
80201b54:	200d883a 	mov	r6,r4
80201b58:	016008b4 	movhi	r5,32802
80201b5c:	296b7504 	addi	r5,r5,-21036
80201b60:	012008b4 	movhi	r4,32802
80201b64:	21352d04 	addi	r4,r4,-11084
80201b68:	020544c0 	call	8020544c <sprintf>
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
						(iNPos / ciMyDataSize) + iI);
				debug(fp, cDebugBuffer);
80201b6c:	012008b4 	movhi	r4,32802
80201b70:	21352d04 	addi	r4,r4,-11084
80201b74:	02052e40 	call	802052e4 <printf>
#endif
				bSuccess = FALSE;
80201b78:	e03fe515 	stw	zero,-108(fp)
		if (iNAccessLen > iNRemainedLen) {
			iNAccessLen = iNRemainedLen;
			iNItemNum = iNAccessLen / ciMyDataSize;
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
80201b7c:	e0bfe817 	ldw	r2,-96(fp)
80201b80:	10800044 	addi	r2,r2,1
80201b84:	e0bfe815 	stw	r2,-96(fp)
80201b88:	e0ffe817 	ldw	r3,-96(fp)
80201b8c:	e0bfec17 	ldw	r2,-80(fp)
80201b90:	1880020e 	bge	r3,r2,80201b9c <bDdr2MemoryReadTest+0x318>
80201b94:	e0bfe517 	ldw	r2,-108(fp)
80201b98:	103fd21e 	bne	r2,zero,80201ae4 <__reset+0xfa1e1ae4>
				debug(fp, cDebugBuffer);
#endif
				bSuccess = FALSE;
			}
		}
		iNPos += iNAccessLen;
80201b9c:	e0ffed17 	ldw	r3,-76(fp)
80201ba0:	e0bfe917 	ldw	r2,-92(fp)
80201ba4:	1885883a 	add	r2,r3,r2
80201ba8:	e0bfed15 	stw	r2,-76(fp)
		if (iNProgressIndex <= 9 && iNPos >= uliSZProgress[iNProgressIndex]) {
80201bac:	e0bfee17 	ldw	r2,-72(fp)
80201bb0:	10800288 	cmpgei	r2,r2,10
80201bb4:	1000171e 	bne	r2,zero,80201c14 <bDdr2MemoryReadTest+0x390>
80201bb8:	e0bfee17 	ldw	r2,-72(fp)
80201bbc:	1085883a 	add	r2,r2,r2
80201bc0:	1085883a 	add	r2,r2,r2
80201bc4:	e0ffe504 	addi	r3,fp,-108
80201bc8:	1885883a 	add	r2,r3,r2
80201bcc:	10800e04 	addi	r2,r2,56
80201bd0:	10800017 	ldw	r2,0(r2)
80201bd4:	e0ffed17 	ldw	r3,-76(fp)
80201bd8:	18800e36 	bltu	r3,r2,80201c14 <bDdr2MemoryReadTest+0x390>
			iNProgressIndex++;
80201bdc:	e0bfee17 	ldw	r2,-72(fp)
80201be0:	10800044 	addi	r2,r2,1
80201be4:	e0bfee15 	stw	r2,-72(fp)
#if DEBUG_ON
			sprintf(cDebugBuffer, "%02d%% ", iNProgressIndex * 10);
80201be8:	e0bfee17 	ldw	r2,-72(fp)
80201bec:	108002a4 	muli	r2,r2,10
80201bf0:	100d883a 	mov	r6,r2
80201bf4:	016008b4 	movhi	r5,32802
80201bf8:	296b4a04 	addi	r5,r5,-21208
80201bfc:	012008b4 	movhi	r4,32802
80201c00:	21352d04 	addi	r4,r4,-11084
80201c04:	020544c0 	call	8020544c <sprintf>
			debug(fp, cDebugBuffer);
80201c08:	012008b4 	movhi	r4,32802
80201c0c:	21352d04 	addi	r4,r4,-11084
80201c10:	02052e40 	call	802052e4 <printf>

	pxSrc = (TMyData *) uliDdr2Base;
	iNAccessLen = sizeof(xSZData);
	iNItemNum = iNAccessLen / ciMyDataSize;
	iNPos = 0;
	while (bSuccess && iNPos < uliByteLen) {
80201c14:	e0bfe517 	ldw	r2,-108(fp)
80201c18:	10000326 	beq	r2,zero,80201c28 <bDdr2MemoryReadTest+0x3a4>
80201c1c:	e0ffed17 	ldw	r3,-76(fp)
80201c20:	e0bfe717 	ldw	r2,-100(fp)
80201c24:	18bf9d36 	bltu	r3,r2,80201a9c <__reset+0xfa1e1a9c>
			debug(fp, cDebugBuffer);
#endif
		}
	}
#if DEBUG_ON
	sprintf(cDebugBuffer, "\n");
80201c28:	00a008b4 	movhi	r2,32802
80201c2c:	10b52d04 	addi	r2,r2,-11084
80201c30:	00c00284 	movi	r3,10
80201c34:	10c00005 	stb	r3,0(r2)
80201c38:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
80201c3c:	012008b4 	movhi	r4,32802
80201c40:	21352d04 	addi	r4,r4,-11084
80201c44:	02052e40 	call	802052e4 <printf>
80201c48:	d0e02517 	ldw	r3,-32620(gp)
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
80201c4c:	e0bff117 	ldw	r2,-60(fp)
80201c50:	1885c83a 	sub	r2,r3,r2
80201c54:	e0bff015 	stw	r2,-64(fp)
	if (bSuccess) {
80201c58:	e0bfe517 	ldw	r2,-108(fp)
80201c5c:	10001c26 	beq	r2,zero,80201cd0 <bDdr2MemoryReadTest+0x44c>
#if DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test pass, size=%ld bytes, %.3f sec\n",
				uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
80201c60:	e13ff017 	ldw	r4,-64(fp)
80201c64:	0204ce40 	call	80204ce4 <__floatsisf>
80201c68:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
80201c6c:	d0a02417 	ldw	r2,-32624(gp)
80201c70:	1009883a 	mov	r4,r2
80201c74:	0204e080 	call	80204e08 <__floatunsisf>
80201c78:	1007883a 	mov	r3,r2
80201c7c:	180b883a 	mov	r5,r3
80201c80:	8009883a 	mov	r4,r16
80201c84:	02048a40 	call	802048a4 <__divsf3>
80201c88:	1007883a 	mov	r3,r2
80201c8c:	1805883a 	mov	r2,r3
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
	if (bSuccess) {
#if DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test pass, size=%ld bytes, %.3f sec\n",
80201c90:	1009883a 	mov	r4,r2
80201c94:	0204ef80 	call	80204ef8 <__extendsfdf2>
80201c98:	1009883a 	mov	r4,r2
80201c9c:	180b883a 	mov	r5,r3
80201ca0:	d9400015 	stw	r5,0(sp)
80201ca4:	200f883a 	mov	r7,r4
80201ca8:	e1bfe717 	ldw	r6,-100(fp)
80201cac:	016008b4 	movhi	r5,32802
80201cb0:	296b8304 	addi	r5,r5,-20980
80201cb4:	012008b4 	movhi	r4,32802
80201cb8:	21352d04 	addi	r4,r4,-11084
80201cbc:	020544c0 	call	8020544c <sprintf>
				uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
		debug(fp, cDebugBuffer);
80201cc0:	012008b4 	movhi	r4,32802
80201cc4:	21352d04 	addi	r4,r4,-11084
80201cc8:	02052e40 	call	802052e4 <printf>
80201ccc:	00000d06 	br	80201d04 <bDdr2MemoryReadTest+0x480>
#endif
	} else {
#if DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test fail\n");
80201cd0:	00e008b4 	movhi	r3,32802
80201cd4:	18f52d04 	addi	r3,r3,-11084
80201cd8:	00a008b4 	movhi	r2,32802
80201cdc:	10ab8f04 	addi	r2,r2,-20932
80201ce0:	1009883a 	mov	r4,r2
80201ce4:	00800544 	movi	r2,21
80201ce8:	100d883a 	mov	r6,r2
80201cec:	200b883a 	mov	r5,r4
80201cf0:	1809883a 	mov	r4,r3
80201cf4:	020516c0 	call	8020516c <memcpy>
		debug(fp, cDebugBuffer);
80201cf8:	012008b4 	movhi	r4,32802
80201cfc:	21352d04 	addi	r4,r4,-11084
80201d00:	02052e40 	call	802052e4 <printf>
#endif
	}
#if DEBUG_ON
	sprintf(cDebugBuffer, "\n");
80201d04:	00a008b4 	movhi	r2,32802
80201d08:	10b52d04 	addi	r2,r2,-11084
80201d0c:	00c00284 	movi	r3,10
80201d10:	10c00005 	stb	r3,0(r2)
80201d14:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
80201d18:	012008b4 	movhi	r4,32802
80201d1c:	21352d04 	addi	r4,r4,-11084
80201d20:	02052e40 	call	802052e4 <printf>
#endif

	return bSuccess;
80201d24:	e0bfe517 	ldw	r2,-108(fp)
}
80201d28:	e6fffe04 	addi	sp,fp,-8
80201d2c:	dfc00317 	ldw	ra,12(sp)
80201d30:	df000217 	ldw	fp,8(sp)
80201d34:	dc400117 	ldw	r17,4(sp)
80201d38:	dc000017 	ldw	r16,0(sp)
80201d3c:	dec00404 	addi	sp,sp,16
80201d40:	f800283a 	ret

80201d44 <bDdr2MemoryRandomWriteTest>:
 * @param [in] bTime  Controla se a duração da função será medida
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryRandomWriteTest(alt_u8 ucMemoryId, bool bVerbose, bool bTime) {
80201d44:	deffec04 	addi	sp,sp,-80
80201d48:	dfc01315 	stw	ra,76(sp)
80201d4c:	df001215 	stw	fp,72(sp)
80201d50:	dcc01115 	stw	r19,68(sp)
80201d54:	dc801015 	stw	r18,64(sp)
80201d58:	dc400f15 	stw	r17,60(sp)
80201d5c:	dc000e15 	stw	r16,56(sp)
80201d60:	df001204 	addi	fp,sp,72
80201d64:	2005883a 	mov	r2,r4
80201d68:	e17ffa15 	stw	r5,-24(fp)
80201d6c:	e1bffb15 	stw	r6,-20(fp)
80201d70:	e0bff905 	stb	r2,-28(fp)

#if DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Random Write Test =====\n");
80201d74:	00e008b4 	movhi	r3,32802
80201d78:	18f52d04 	addi	r3,r3,-11084
80201d7c:	00a008b4 	movhi	r2,32802
80201d80:	10ab9504 	addi	r2,r2,-20908
80201d84:	1009883a 	mov	r4,r2
80201d88:	00800bc4 	movi	r2,47
80201d8c:	100d883a 	mov	r6,r2
80201d90:	200b883a 	mov	r5,r4
80201d94:	1809883a 	mov	r4,r3
80201d98:	020516c0 	call	8020516c <memcpy>
	debug(fp, cDebugBuffer);
80201d9c:	012008b4 	movhi	r4,32802
80201da0:	21352d04 	addi	r4,r4,-11084
80201da4:	02052e40 	call	802052e4 <printf>
#endif
	bool bSuccess = FALSE;
80201da8:	e03fef15 	stw	zero,-68(fp)
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	switch (ucMemoryId) {
80201dac:	e0bff903 	ldbu	r2,-28(fp)
80201db0:	10000326 	beq	r2,zero,80201dc0 <bDdr2MemoryRandomWriteTest+0x7c>
80201db4:	10800060 	cmpeqi	r2,r2,1
80201db8:	10000a1e 	bne	r2,zero,80201de4 <bDdr2MemoryRandomWriteTest+0xa0>
80201dbc:	00001206 	br	80201e08 <bDdr2MemoryRandomWriteTest+0xc4>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
80201dc0:	e0bff903 	ldbu	r2,-28(fp)
80201dc4:	1009883a 	mov	r4,r2
80201dc8:	02012940 	call	80201294 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
80201dcc:	e03ff015 	stw	zero,-64(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
80201dd0:	00a00034 	movhi	r2,32768
80201dd4:	e0bff115 	stw	r2,-60(fp)
		bSuccess = TRUE;
80201dd8:	00800044 	movi	r2,1
80201ddc:	e0bfef15 	stw	r2,-68(fp)
		break;
80201de0:	00001906 	br	80201e48 <bDdr2MemoryRandomWriteTest+0x104>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
80201de4:	e0bff903 	ldbu	r2,-28(fp)
80201de8:	1009883a 	mov	r4,r2
80201dec:	02012940 	call	80201294 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
80201df0:	e03ff015 	stw	zero,-64(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
80201df4:	00a00034 	movhi	r2,32768
80201df8:	e0bff115 	stw	r2,-60(fp)
		bSuccess = TRUE;
80201dfc:	00800044 	movi	r2,1
80201e00:	e0bfef15 	stw	r2,-68(fp)
		break;
80201e04:	00001006 	br	80201e48 <bDdr2MemoryRandomWriteTest+0x104>
	default:
		bSuccess = FALSE;
80201e08:	e03fef15 	stw	zero,-68(fp)
#if DEBUG_ON
		sprintf(cDebugBuffer,
80201e0c:	00e008b4 	movhi	r3,32802
80201e10:	18f52d04 	addi	r3,r3,-11084
80201e14:	00a008b4 	movhi	r2,32802
80201e18:	10a94604 	addi	r2,r2,-23272
80201e1c:	1009883a 	mov	r4,r2
80201e20:	00800bc4 	movi	r2,47
80201e24:	100d883a 	mov	r6,r2
80201e28:	200b883a 	mov	r5,r4
80201e2c:	1809883a 	mov	r4,r3
80201e30:	020516c0 	call	8020516c <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
80201e34:	012008b4 	movhi	r4,32802
80201e38:	21352d04 	addi	r4,r4,-11084
80201e3c:	02052e40 	call	802052e4 <printf>
		;
#endif
		return bSuccess;
80201e40:	e0bfef17 	ldw	r2,-68(fp)
80201e44:	0000bc06 	br	80202138 <bDdr2MemoryRandomWriteTest+0x3f4>
	}

#if DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %ld MBytes\n", uliByteLen / 1024 / 1024);
80201e48:	e0bff117 	ldw	r2,-60(fp)
80201e4c:	1004d53a 	srli	r2,r2,20
80201e50:	100d883a 	mov	r6,r2
80201e54:	016008b4 	movhi	r5,32802
80201e58:	296b3f04 	addi	r5,r5,-21252
80201e5c:	012008b4 	movhi	r4,32802
80201e60:	21352d04 	addi	r4,r4,-11084
80201e64:	020544c0 	call	8020544c <sprintf>
	debug(fp, cDebugBuffer);
80201e68:	012008b4 	movhi	r4,32802
80201e6c:	21352d04 	addi	r4,r4,-11084
80201e70:	02052e40 	call	802052e4 <printf>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
80201e74:	d0a02517 	ldw	r2,-32620(gp)
	alt_u32 uliCurrentState;
	alt_u32 uliMemoryEndAddress;
	alt_u32 uliNextMilestone;
	alt_u8 ucPercentage;

	uliInitialState = alt_nticks();
80201e78:	d0a01315 	stw	r2,-32692(gp)
	uliCurrentState = uliInitialState;
80201e7c:	d0a01317 	ldw	r2,-32692(gp)
80201e80:	e0bff815 	stw	r2,-32(fp)
	uliMemoryEndAddress = uliDdr2Base + uliByteLen;
80201e84:	e0fff017 	ldw	r3,-64(fp)
80201e88:	e0bff117 	ldw	r2,-60(fp)
80201e8c:	1885883a 	add	r2,r3,r2
80201e90:	e0bff515 	stw	r2,-44(fp)
	uliNextMilestone = uliDdr2Base + uliByteLen / 20;
80201e94:	e0fff117 	ldw	r3,-60(fp)
80201e98:	00b33374 	movhi	r2,52429
80201e9c:	10b33344 	addi	r2,r2,-13107
80201ea0:	1888383a 	mulxuu	r4,r3,r2
80201ea4:	1885383a 	mul	r2,r3,r2
80201ea8:	1025883a 	mov	r18,r2
80201eac:	2027883a 	mov	r19,r4
80201eb0:	9806d13a 	srli	r3,r19,4
80201eb4:	e0bff017 	ldw	r2,-64(fp)
80201eb8:	1885883a 	add	r2,r3,r2
80201ebc:	e0bff315 	stw	r2,-52(fp)
	ucPercentage = 5;
80201ec0:	00800144 	movi	r2,5
80201ec4:	e0bff405 	stb	r2,-48(fp)
#if DEBUG_ON
	sprintf(cDebugBuffer, "Writing to memory...\n");
80201ec8:	00e008b4 	movhi	r3,32802
80201ecc:	18f52d04 	addi	r3,r3,-11084
80201ed0:	00a008b4 	movhi	r2,32802
80201ed4:	10aba104 	addi	r2,r2,-20860
80201ed8:	1009883a 	mov	r4,r2
80201edc:	00800584 	movi	r2,22
80201ee0:	100d883a 	mov	r6,r2
80201ee4:	200b883a 	mov	r5,r4
80201ee8:	1809883a 	mov	r4,r3
80201eec:	020516c0 	call	8020516c <memcpy>
	debug(fp, cDebugBuffer);
80201ef0:	012008b4 	movhi	r4,32802
80201ef4:	21352d04 	addi	r4,r4,-11084
80201ef8:	02052e40 	call	802052e4 <printf>
#endif
	if (bVerbose == DDR2_VERBOSE) {
80201efc:	e0bffa17 	ldw	r2,-24(fp)
80201f00:	10800058 	cmpnei	r2,r2,1
80201f04:	1000081e 	bne	r2,zero,80201f28 <bDdr2MemoryRandomWriteTest+0x1e4>
#if DEBUG_ON
		sprintf(cDebugBuffer, "00%%..");
80201f08:	016008b4 	movhi	r5,32802
80201f0c:	296ba704 	addi	r5,r5,-20836
80201f10:	012008b4 	movhi	r4,32802
80201f14:	21352d04 	addi	r4,r4,-11084
80201f18:	020544c0 	call	8020544c <sprintf>
		debug(fp, cDebugBuffer);
80201f1c:	012008b4 	movhi	r4,32802
80201f20:	21352d04 	addi	r4,r4,-11084
80201f24:	02052e40 	call	802052e4 <printf>
#endif
	}
	int TimeStart, TimeElapsed = 0;
80201f28:	e03ff615 	stw	zero,-40(fp)
80201f2c:	d0a02517 	ldw	r2,-32620(gp)

	TimeStart = alt_nticks();
80201f30:	e0bff715 	stw	r2,-36(fp)
	for (puliDestination = (alt_u32*) uliDdr2Base;
80201f34:	e0bff017 	ldw	r2,-64(fp)
80201f38:	e0bff215 	stw	r2,-56(fp)
80201f3c:	00002a06 	br	80201fe8 <bDdr2MemoryRandomWriteTest+0x2a4>
			(alt_u32) puliDestination < uliMemoryEndAddress;
			puliDestination++) {
		*puliDestination = uliXorshift32(&uliCurrentState);
80201f40:	e0bff804 	addi	r2,fp,-32
80201f44:	1009883a 	mov	r4,r2
80201f48:	02025980 	call	80202598 <uliXorshift32>
80201f4c:	1007883a 	mov	r3,r2
80201f50:	e0bff217 	ldw	r2,-56(fp)
80201f54:	10c00015 	stw	r3,0(r2)
		if ((bVerbose == DDR2_VERBOSE)
				& ((alt_u32) puliDestination > uliNextMilestone)) {
80201f58:	e0bffa17 	ldw	r2,-24(fp)
80201f5c:	10800060 	cmpeqi	r2,r2,1
80201f60:	1009883a 	mov	r4,r2
80201f64:	e0bff217 	ldw	r2,-56(fp)
80201f68:	e0fff317 	ldw	r3,-52(fp)
80201f6c:	1885803a 	cmpltu	r2,r3,r2
80201f70:	2084703a 	and	r2,r4,r2
	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
			(alt_u32) puliDestination < uliMemoryEndAddress;
			puliDestination++) {
		*puliDestination = uliXorshift32(&uliCurrentState);
		if ((bVerbose == DDR2_VERBOSE)
80201f74:	10803fcc 	andi	r2,r2,255
80201f78:	10001826 	beq	r2,zero,80201fdc <bDdr2MemoryRandomWriteTest+0x298>
				& ((alt_u32) puliDestination > uliNextMilestone)) {
#if DEBUG_ON
			sprintf(cDebugBuffer, "..%02d%%..", ucPercentage);
80201f7c:	e0bff403 	ldbu	r2,-48(fp)
80201f80:	100d883a 	mov	r6,r2
80201f84:	016008b4 	movhi	r5,32802
80201f88:	296ba904 	addi	r5,r5,-20828
80201f8c:	012008b4 	movhi	r4,32802
80201f90:	21352d04 	addi	r4,r4,-11084
80201f94:	020544c0 	call	8020544c <sprintf>
			debug(fp, cDebugBuffer);
80201f98:	012008b4 	movhi	r4,32802
80201f9c:	21352d04 	addi	r4,r4,-11084
80201fa0:	02052e40 	call	802052e4 <printf>
#endif
			uliNextMilestone += uliByteLen / 20;
80201fa4:	e0fff117 	ldw	r3,-60(fp)
80201fa8:	00b33374 	movhi	r2,52429
80201fac:	10b33344 	addi	r2,r2,-13107
80201fb0:	1888383a 	mulxuu	r4,r3,r2
80201fb4:	1885383a 	mul	r2,r3,r2
80201fb8:	1021883a 	mov	r16,r2
80201fbc:	2023883a 	mov	r17,r4
80201fc0:	8804d13a 	srli	r2,r17,4
80201fc4:	e0fff317 	ldw	r3,-52(fp)
80201fc8:	1885883a 	add	r2,r3,r2
80201fcc:	e0bff315 	stw	r2,-52(fp)
			ucPercentage += 5;
80201fd0:	e0bff403 	ldbu	r2,-48(fp)
80201fd4:	10800144 	addi	r2,r2,5
80201fd8:	e0bff405 	stb	r2,-48(fp)
	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
			(alt_u32) puliDestination < uliMemoryEndAddress;
			puliDestination++) {
80201fdc:	e0bff217 	ldw	r2,-56(fp)
80201fe0:	10800104 	addi	r2,r2,4
80201fe4:	e0bff215 	stw	r2,-56(fp)
	}
	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
			(alt_u32) puliDestination < uliMemoryEndAddress;
80201fe8:	e0fff217 	ldw	r3,-56(fp)
#endif
	}
	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
80201fec:	e0bff517 	ldw	r2,-44(fp)
80201ff0:	18bfd336 	bltu	r3,r2,80201f40 <__reset+0xfa1e1f40>
#endif
			uliNextMilestone += uliByteLen / 20;
			ucPercentage += 5;
		}
	}
	alt_dcache_flush_all();
80201ff4:	02153040 	call	80215304 <alt_dcache_flush_all>
	if (bVerbose == DDR2_VERBOSE) {
80201ff8:	e0bffa17 	ldw	r2,-24(fp)
80201ffc:	10800058 	cmpnei	r2,r2,1
80202000:	1000081e 	bne	r2,zero,80202024 <bDdr2MemoryRandomWriteTest+0x2e0>
#if DEBUG_ON
		sprintf(cDebugBuffer, "..100%%\n");
80202004:	016008b4 	movhi	r5,32802
80202008:	296bac04 	addi	r5,r5,-20816
8020200c:	012008b4 	movhi	r4,32802
80202010:	21352d04 	addi	r4,r4,-11084
80202014:	020544c0 	call	8020544c <sprintf>
		debug(fp, cDebugBuffer);
80202018:	012008b4 	movhi	r4,32802
8020201c:	21352d04 	addi	r4,r4,-11084
80202020:	02052e40 	call	802052e4 <printf>
#endif
	}

	if (bSuccess) {
80202024:	e0bfef17 	ldw	r2,-68(fp)
80202028:	10002d26 	beq	r2,zero,802020e0 <bDdr2MemoryRandomWriteTest+0x39c>
		if (bTime == TRUE) {
8020202c:	e0bffb17 	ldw	r2,-20(fp)
80202030:	10800058 	cmpnei	r2,r2,1
80202034:	1000201e 	bne	r2,zero,802020b8 <bDdr2MemoryRandomWriteTest+0x374>
80202038:	d0e02517 	ldw	r3,-32620(gp)
			TimeElapsed = alt_nticks() - TimeStart;
8020203c:	e0bff717 	ldw	r2,-36(fp)
80202040:	1885c83a 	sub	r2,r3,r2
80202044:	e0bff615 	stw	r2,-40(fp)
#if DEBUG_ON
			sprintf(cDebugBuffer,
					"DDR2 write test pass, size=%ld bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
80202048:	e13ff617 	ldw	r4,-40(fp)
8020204c:	0204ce40 	call	80204ce4 <__floatsisf>
80202050:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
80202054:	d0a02417 	ldw	r2,-32624(gp)
80202058:	1009883a 	mov	r4,r2
8020205c:	0204e080 	call	80204e08 <__floatunsisf>
80202060:	1007883a 	mov	r3,r2
80202064:	180b883a 	mov	r5,r3
80202068:	8009883a 	mov	r4,r16
8020206c:	02048a40 	call	802048a4 <__divsf3>
80202070:	1007883a 	mov	r3,r2
80202074:	1805883a 	mov	r2,r3

	if (bSuccess) {
		if (bTime == TRUE) {
			TimeElapsed = alt_nticks() - TimeStart;
#if DEBUG_ON
			sprintf(cDebugBuffer,
80202078:	1009883a 	mov	r4,r2
8020207c:	0204ef80 	call	80204ef8 <__extendsfdf2>
80202080:	1009883a 	mov	r4,r2
80202084:	180b883a 	mov	r5,r3
80202088:	d9400015 	stw	r5,0(sp)
8020208c:	200f883a 	mov	r7,r4
80202090:	e1bff117 	ldw	r6,-60(fp)
80202094:	016008b4 	movhi	r5,32802
80202098:	296baf04 	addi	r5,r5,-20804
8020209c:	012008b4 	movhi	r4,32802
802020a0:	21352d04 	addi	r4,r4,-11084
802020a4:	020544c0 	call	8020544c <sprintf>
					"DDR2 write test pass, size=%ld bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
			debug(fp, cDebugBuffer);
802020a8:	012008b4 	movhi	r4,32802
802020ac:	21352d04 	addi	r4,r4,-11084
802020b0:	02052e40 	call	802052e4 <printf>
802020b4:	00001706 	br	80202114 <bDdr2MemoryRandomWriteTest+0x3d0>
#endif
		} else {
#if DEBUG_ON
			sprintf(cDebugBuffer, "DDR2 write test pass, size=%ld bytes\n",
802020b8:	e1bff117 	ldw	r6,-60(fp)
802020bc:	016008b4 	movhi	r5,32802
802020c0:	296bbb04 	addi	r5,r5,-20756
802020c4:	012008b4 	movhi	r4,32802
802020c8:	21352d04 	addi	r4,r4,-11084
802020cc:	020544c0 	call	8020544c <sprintf>
					uliByteLen);
			debug(fp, cDebugBuffer);
802020d0:	012008b4 	movhi	r4,32802
802020d4:	21352d04 	addi	r4,r4,-11084
802020d8:	02052e40 	call	802052e4 <printf>
802020dc:	00000d06 	br	80202114 <bDdr2MemoryRandomWriteTest+0x3d0>
#endif
		}
	} else {
#if DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 write test fail\n");
802020e0:	00e008b4 	movhi	r3,32802
802020e4:	18f52d04 	addi	r3,r3,-11084
802020e8:	00a008b4 	movhi	r2,32802
802020ec:	10ab5804 	addi	r2,r2,-21152
802020f0:	1009883a 	mov	r4,r2
802020f4:	00800584 	movi	r2,22
802020f8:	100d883a 	mov	r6,r2
802020fc:	200b883a 	mov	r5,r4
80202100:	1809883a 	mov	r4,r3
80202104:	020516c0 	call	8020516c <memcpy>
		debug(fp, cDebugBuffer);
80202108:	012008b4 	movhi	r4,32802
8020210c:	21352d04 	addi	r4,r4,-11084
80202110:	02052e40 	call	802052e4 <printf>
#endif
	}
#if DEBUG_ON
	sprintf(cDebugBuffer, "\n");
80202114:	00a008b4 	movhi	r2,32802
80202118:	10b52d04 	addi	r2,r2,-11084
8020211c:	00c00284 	movi	r3,10
80202120:	10c00005 	stb	r3,0(r2)
80202124:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
80202128:	012008b4 	movhi	r4,32802
8020212c:	21352d04 	addi	r4,r4,-11084
80202130:	02052e40 	call	802052e4 <printf>
#endif

	return bSuccess;
80202134:	e0bfef17 	ldw	r2,-68(fp)
}
80202138:	e6fffc04 	addi	sp,fp,-16
8020213c:	dfc00517 	ldw	ra,20(sp)
80202140:	df000417 	ldw	fp,16(sp)
80202144:	dcc00317 	ldw	r19,12(sp)
80202148:	dc800217 	ldw	r18,8(sp)
8020214c:	dc400117 	ldw	r17,4(sp)
80202150:	dc000017 	ldw	r16,0(sp)
80202154:	dec00604 	addi	sp,sp,24
80202158:	f800283a 	ret

8020215c <bDdr2MemoryRandomReadTest>:
 * @param [in] bTime  Controla se a duração da função será medida
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryRandomReadTest(alt_u8 ucMemoryId, bool bVerbose, bool bTime) {
8020215c:	deffec04 	addi	sp,sp,-80
80202160:	dfc01315 	stw	ra,76(sp)
80202164:	df001215 	stw	fp,72(sp)
80202168:	dcc01115 	stw	r19,68(sp)
8020216c:	dc801015 	stw	r18,64(sp)
80202170:	dc400f15 	stw	r17,60(sp)
80202174:	dc000e15 	stw	r16,56(sp)
80202178:	df001204 	addi	fp,sp,72
8020217c:	2005883a 	mov	r2,r4
80202180:	e17ffa15 	stw	r5,-24(fp)
80202184:	e1bffb15 	stw	r6,-20(fp)
80202188:	e0bff905 	stb	r2,-28(fp)

#if DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Random Read Test =====\n");
8020218c:	00e008b4 	movhi	r3,32802
80202190:	18f52d04 	addi	r3,r3,-11084
80202194:	00a008b4 	movhi	r2,32802
80202198:	10abc504 	addi	r2,r2,-20716
8020219c:	1009883a 	mov	r4,r2
802021a0:	00800b84 	movi	r2,46
802021a4:	100d883a 	mov	r6,r2
802021a8:	200b883a 	mov	r5,r4
802021ac:	1809883a 	mov	r4,r3
802021b0:	020516c0 	call	8020516c <memcpy>
	debug(fp, cDebugBuffer);
802021b4:	012008b4 	movhi	r4,32802
802021b8:	21352d04 	addi	r4,r4,-11084
802021bc:	02052e40 	call	802052e4 <printf>
#endif
	bool bSuccess = FALSE;
802021c0:	e03fef15 	stw	zero,-68(fp)
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	switch (ucMemoryId) {
802021c4:	e0bff903 	ldbu	r2,-28(fp)
802021c8:	10000326 	beq	r2,zero,802021d8 <bDdr2MemoryRandomReadTest+0x7c>
802021cc:	10800060 	cmpeqi	r2,r2,1
802021d0:	10000a1e 	bne	r2,zero,802021fc <bDdr2MemoryRandomReadTest+0xa0>
802021d4:	00001206 	br	80202220 <bDdr2MemoryRandomReadTest+0xc4>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
802021d8:	e0bff903 	ldbu	r2,-28(fp)
802021dc:	1009883a 	mov	r4,r2
802021e0:	02012940 	call	80201294 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
802021e4:	e03ff015 	stw	zero,-64(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
802021e8:	00a00034 	movhi	r2,32768
802021ec:	e0bff115 	stw	r2,-60(fp)
		bSuccess = TRUE;
802021f0:	00800044 	movi	r2,1
802021f4:	e0bfef15 	stw	r2,-68(fp)
		break;
802021f8:	00001906 	br	80202260 <bDdr2MemoryRandomReadTest+0x104>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
802021fc:	e0bff903 	ldbu	r2,-28(fp)
80202200:	1009883a 	mov	r4,r2
80202204:	02012940 	call	80201294 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
80202208:	e03ff015 	stw	zero,-64(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
8020220c:	00a00034 	movhi	r2,32768
80202210:	e0bff115 	stw	r2,-60(fp)
		bSuccess = TRUE;
80202214:	00800044 	movi	r2,1
80202218:	e0bfef15 	stw	r2,-68(fp)
		break;
8020221c:	00001006 	br	80202260 <bDdr2MemoryRandomReadTest+0x104>
	default:
		bSuccess = FALSE;
80202220:	e03fef15 	stw	zero,-68(fp)
#if DEBUG_ON
		sprintf(cDebugBuffer,
80202224:	00e008b4 	movhi	r3,32802
80202228:	18f52d04 	addi	r3,r3,-11084
8020222c:	00a008b4 	movhi	r2,32802
80202230:	10a94604 	addi	r2,r2,-23272
80202234:	1009883a 	mov	r4,r2
80202238:	00800bc4 	movi	r2,47
8020223c:	100d883a 	mov	r6,r2
80202240:	200b883a 	mov	r5,r4
80202244:	1809883a 	mov	r4,r3
80202248:	020516c0 	call	8020516c <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
8020224c:	012008b4 	movhi	r4,32802
80202250:	21352d04 	addi	r4,r4,-11084
80202254:	02052e40 	call	802052e4 <printf>
		;
#endif
		return bSuccess;
80202258:	e0bfef17 	ldw	r2,-68(fp)
8020225c:	0000c506 	br	80202574 <bDdr2MemoryRandomReadTest+0x418>
	}

#if DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %ld MBytes\n", uliByteLen / 1024 / 1024);
80202260:	e0bff117 	ldw	r2,-60(fp)
80202264:	1004d53a 	srli	r2,r2,20
80202268:	100d883a 	mov	r6,r2
8020226c:	016008b4 	movhi	r5,32802
80202270:	296b3f04 	addi	r5,r5,-21252
80202274:	012008b4 	movhi	r4,32802
80202278:	21352d04 	addi	r4,r4,-11084
8020227c:	020544c0 	call	8020544c <sprintf>
	debug(fp, cDebugBuffer);
80202280:	012008b4 	movhi	r4,32802
80202284:	21352d04 	addi	r4,r4,-11084
80202288:	02052e40 	call	802052e4 <printf>
	alt_u32 uliCurrentState;
	alt_u32 uliMemoryEndAddress;
	alt_u32 uliNextMilestone;
	alt_u8 ucPercentage;

	uliCurrentState = uliInitialState;
8020228c:	d0a01317 	ldw	r2,-32692(gp)
80202290:	e0bff815 	stw	r2,-32(fp)
	uliMemoryEndAddress = uliDdr2Base + uliByteLen;
80202294:	e0fff017 	ldw	r3,-64(fp)
80202298:	e0bff117 	ldw	r2,-60(fp)
8020229c:	1885883a 	add	r2,r3,r2
802022a0:	e0bff515 	stw	r2,-44(fp)
	uliNextMilestone = uliDdr2Base + uliByteLen / 20;
802022a4:	e0fff117 	ldw	r3,-60(fp)
802022a8:	00b33374 	movhi	r2,52429
802022ac:	10b33344 	addi	r2,r2,-13107
802022b0:	1888383a 	mulxuu	r4,r3,r2
802022b4:	1885383a 	mul	r2,r3,r2
802022b8:	1025883a 	mov	r18,r2
802022bc:	2027883a 	mov	r19,r4
802022c0:	9806d13a 	srli	r3,r19,4
802022c4:	e0bff017 	ldw	r2,-64(fp)
802022c8:	1885883a 	add	r2,r3,r2
802022cc:	e0bff315 	stw	r2,-52(fp)
	ucPercentage = 5;
802022d0:	00800144 	movi	r2,5
802022d4:	e0bff405 	stb	r2,-48(fp)
#if DEBUG_ON
	sprintf(cDebugBuffer, "Reading from memory...\n");
802022d8:	00e008b4 	movhi	r3,32802
802022dc:	18f52d04 	addi	r3,r3,-11084
802022e0:	00a008b4 	movhi	r2,32802
802022e4:	10abd104 	addi	r2,r2,-20668
802022e8:	1009883a 	mov	r4,r2
802022ec:	00800604 	movi	r2,24
802022f0:	100d883a 	mov	r6,r2
802022f4:	200b883a 	mov	r5,r4
802022f8:	1809883a 	mov	r4,r3
802022fc:	020516c0 	call	8020516c <memcpy>
	debug(fp, cDebugBuffer);
80202300:	012008b4 	movhi	r4,32802
80202304:	21352d04 	addi	r4,r4,-11084
80202308:	02052e40 	call	802052e4 <printf>
#endif
	if (bVerbose == DDR2_VERBOSE) {
8020230c:	e0bffa17 	ldw	r2,-24(fp)
80202310:	10800058 	cmpnei	r2,r2,1
80202314:	1000081e 	bne	r2,zero,80202338 <bDdr2MemoryRandomReadTest+0x1dc>
#if DEBUG_ON
		sprintf(cDebugBuffer, "00%%..");
80202318:	016008b4 	movhi	r5,32802
8020231c:	296ba704 	addi	r5,r5,-20836
80202320:	012008b4 	movhi	r4,32802
80202324:	21352d04 	addi	r4,r4,-11084
80202328:	020544c0 	call	8020544c <sprintf>
		debug(fp, cDebugBuffer);
8020232c:	012008b4 	movhi	r4,32802
80202330:	21352d04 	addi	r4,r4,-11084
80202334:	02052e40 	call	802052e4 <printf>
#endif
	}

	int TimeStart, TimeElapsed = 0;
80202338:	e03ff615 	stw	zero,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
8020233c:	d0a02517 	ldw	r2,-32620(gp)

	TimeStart = alt_nticks();
80202340:	e0bff715 	stw	r2,-36(fp)
	for (puliSource = (alt_u32*) uliDdr2Base;
80202344:	e0bff017 	ldw	r2,-64(fp)
80202348:	e0bff215 	stw	r2,-56(fp)
8020234c:	00003606 	br	80202428 <bDdr2MemoryRandomReadTest+0x2cc>
			(alt_u32) puliSource < uliMemoryEndAddress; puliSource++) {
		if (uliXorshift32(&uliCurrentState) != *puliSource) {
80202350:	e0bff804 	addi	r2,fp,-32
80202354:	1009883a 	mov	r4,r2
80202358:	02025980 	call	80202598 <uliXorshift32>
8020235c:	1007883a 	mov	r3,r2
80202360:	e0bff217 	ldw	r2,-56(fp)
80202364:	10800017 	ldw	r2,0(r2)
80202368:	18800e26 	beq	r3,r2,802023a4 <bDdr2MemoryRandomReadTest+0x248>
			bSuccess = FALSE;
8020236c:	e03fef15 	stw	zero,-68(fp)
			if (bVerbose == DDR2_VERBOSE) {
80202370:	e0bffa17 	ldw	r2,-24(fp)
80202374:	10800058 	cmpnei	r2,r2,1
80202378:	10000a1e 	bne	r2,zero,802023a4 <bDdr2MemoryRandomReadTest+0x248>
#if DEBUG_ON
				sprintf(cDebugBuffer, "Failed to read adress 0x%08lX\n",
8020237c:	e0bff217 	ldw	r2,-56(fp)
80202380:	100d883a 	mov	r6,r2
80202384:	016008b4 	movhi	r5,32802
80202388:	296bd704 	addi	r5,r5,-20644
8020238c:	012008b4 	movhi	r4,32802
80202390:	21352d04 	addi	r4,r4,-11084
80202394:	020544c0 	call	8020544c <sprintf>
						(alt_u32)puliSource);
				debug(fp, cDebugBuffer);
80202398:	012008b4 	movhi	r4,32802
8020239c:	21352d04 	addi	r4,r4,-11084
802023a0:	02052e40 	call	802052e4 <printf>
#endif
			}
		}
		if ((bVerbose == DDR2_VERBOSE)
802023a4:	e0bffa17 	ldw	r2,-24(fp)
802023a8:	10800058 	cmpnei	r2,r2,1
802023ac:	10001b1e 	bne	r2,zero,8020241c <bDdr2MemoryRandomReadTest+0x2c0>
				&& ((alt_u32) puliSource > uliNextMilestone)) {
802023b0:	e0bff217 	ldw	r2,-56(fp)
802023b4:	e0fff317 	ldw	r3,-52(fp)
802023b8:	1880182e 	bgeu	r3,r2,8020241c <bDdr2MemoryRandomReadTest+0x2c0>
#if DEBUG_ON
			sprintf(cDebugBuffer, "..%02d%%..", ucPercentage);
802023bc:	e0bff403 	ldbu	r2,-48(fp)
802023c0:	100d883a 	mov	r6,r2
802023c4:	016008b4 	movhi	r5,32802
802023c8:	296ba904 	addi	r5,r5,-20828
802023cc:	012008b4 	movhi	r4,32802
802023d0:	21352d04 	addi	r4,r4,-11084
802023d4:	020544c0 	call	8020544c <sprintf>
			debug(fp, cDebugBuffer);
802023d8:	012008b4 	movhi	r4,32802
802023dc:	21352d04 	addi	r4,r4,-11084
802023e0:	02052e40 	call	802052e4 <printf>
#endif
			uliNextMilestone += uliByteLen / 20;
802023e4:	e0fff117 	ldw	r3,-60(fp)
802023e8:	00b33374 	movhi	r2,52429
802023ec:	10b33344 	addi	r2,r2,-13107
802023f0:	1888383a 	mulxuu	r4,r3,r2
802023f4:	1885383a 	mul	r2,r3,r2
802023f8:	1021883a 	mov	r16,r2
802023fc:	2023883a 	mov	r17,r4
80202400:	8804d13a 	srli	r2,r17,4
80202404:	e0fff317 	ldw	r3,-52(fp)
80202408:	1885883a 	add	r2,r3,r2
8020240c:	e0bff315 	stw	r2,-52(fp)
			ucPercentage += 5;
80202410:	e0bff403 	ldbu	r2,-48(fp)
80202414:	10800144 	addi	r2,r2,5
80202418:	e0bff405 	stb	r2,-48(fp)

	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliSource = (alt_u32*) uliDdr2Base;
			(alt_u32) puliSource < uliMemoryEndAddress; puliSource++) {
8020241c:	e0bff217 	ldw	r2,-56(fp)
80202420:	10800104 	addi	r2,r2,4
80202424:	e0bff215 	stw	r2,-56(fp)
80202428:	e0fff217 	ldw	r3,-56(fp)
	}

	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliSource = (alt_u32*) uliDdr2Base;
8020242c:	e0bff517 	ldw	r2,-44(fp)
80202430:	18bfc736 	bltu	r3,r2,80202350 <__reset+0xfa1e2350>
#endif
			uliNextMilestone += uliByteLen / 20;
			ucPercentage += 5;
		}
	}
	if (bVerbose == DDR2_VERBOSE) {
80202434:	e0bffa17 	ldw	r2,-24(fp)
80202438:	10800058 	cmpnei	r2,r2,1
8020243c:	1000081e 	bne	r2,zero,80202460 <bDdr2MemoryRandomReadTest+0x304>
#if DEBUG_ON
		sprintf(cDebugBuffer, "..100%%\n");
80202440:	016008b4 	movhi	r5,32802
80202444:	296bac04 	addi	r5,r5,-20816
80202448:	012008b4 	movhi	r4,32802
8020244c:	21352d04 	addi	r4,r4,-11084
80202450:	020544c0 	call	8020544c <sprintf>
		debug(fp, cDebugBuffer);
80202454:	012008b4 	movhi	r4,32802
80202458:	21352d04 	addi	r4,r4,-11084
8020245c:	02052e40 	call	802052e4 <printf>
#endif
	}

	if (bSuccess) {
80202460:	e0bfef17 	ldw	r2,-68(fp)
80202464:	10002d26 	beq	r2,zero,8020251c <bDdr2MemoryRandomReadTest+0x3c0>
		if (bTime == TRUE) {
80202468:	e0bffb17 	ldw	r2,-20(fp)
8020246c:	10800058 	cmpnei	r2,r2,1
80202470:	1000201e 	bne	r2,zero,802024f4 <bDdr2MemoryRandomReadTest+0x398>
80202474:	d0e02517 	ldw	r3,-32620(gp)
			TimeElapsed = alt_nticks() - TimeStart;
80202478:	e0bff717 	ldw	r2,-36(fp)
8020247c:	1885c83a 	sub	r2,r3,r2
80202480:	e0bff615 	stw	r2,-40(fp)
#if DEBUG_ON
			sprintf(cDebugBuffer,
					"DDR2 read test pass, size=%lu bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
80202484:	e13ff617 	ldw	r4,-40(fp)
80202488:	0204ce40 	call	80204ce4 <__floatsisf>
8020248c:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
80202490:	d0a02417 	ldw	r2,-32624(gp)
80202494:	1009883a 	mov	r4,r2
80202498:	0204e080 	call	80204e08 <__floatunsisf>
8020249c:	1007883a 	mov	r3,r2
802024a0:	180b883a 	mov	r5,r3
802024a4:	8009883a 	mov	r4,r16
802024a8:	02048a40 	call	802048a4 <__divsf3>
802024ac:	1007883a 	mov	r3,r2
802024b0:	1805883a 	mov	r2,r3

	if (bSuccess) {
		if (bTime == TRUE) {
			TimeElapsed = alt_nticks() - TimeStart;
#if DEBUG_ON
			sprintf(cDebugBuffer,
802024b4:	1009883a 	mov	r4,r2
802024b8:	0204ef80 	call	80204ef8 <__extendsfdf2>
802024bc:	1009883a 	mov	r4,r2
802024c0:	180b883a 	mov	r5,r3
802024c4:	d9400015 	stw	r5,0(sp)
802024c8:	200f883a 	mov	r7,r4
802024cc:	e1bff117 	ldw	r6,-60(fp)
802024d0:	016008b4 	movhi	r5,32802
802024d4:	296bdf04 	addi	r5,r5,-20612
802024d8:	012008b4 	movhi	r4,32802
802024dc:	21352d04 	addi	r4,r4,-11084
802024e0:	020544c0 	call	8020544c <sprintf>
					"DDR2 read test pass, size=%lu bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
			debug(fp, cDebugBuffer);
802024e4:	012008b4 	movhi	r4,32802
802024e8:	21352d04 	addi	r4,r4,-11084
802024ec:	02052e40 	call	802052e4 <printf>
802024f0:	00001706 	br	80202550 <bDdr2MemoryRandomReadTest+0x3f4>
#endif
		} else {
#if DEBUG_ON
			sprintf(cDebugBuffer, "DDR2 read test pass, size=%lu bytes\n",
802024f4:	e1bff117 	ldw	r6,-60(fp)
802024f8:	016008b4 	movhi	r5,32802
802024fc:	296beb04 	addi	r5,r5,-20564
80202500:	012008b4 	movhi	r4,32802
80202504:	21352d04 	addi	r4,r4,-11084
80202508:	020544c0 	call	8020544c <sprintf>
					uliByteLen);
			debug(fp, cDebugBuffer);
8020250c:	012008b4 	movhi	r4,32802
80202510:	21352d04 	addi	r4,r4,-11084
80202514:	02052e40 	call	802052e4 <printf>
80202518:	00000d06 	br	80202550 <bDdr2MemoryRandomReadTest+0x3f4>
#endif
		}
	} else {
#if DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test fail\n");
8020251c:	00e008b4 	movhi	r3,32802
80202520:	18f52d04 	addi	r3,r3,-11084
80202524:	00a008b4 	movhi	r2,32802
80202528:	10ab8f04 	addi	r2,r2,-20932
8020252c:	1009883a 	mov	r4,r2
80202530:	00800544 	movi	r2,21
80202534:	100d883a 	mov	r6,r2
80202538:	200b883a 	mov	r5,r4
8020253c:	1809883a 	mov	r4,r3
80202540:	020516c0 	call	8020516c <memcpy>
		debug(fp, cDebugBuffer);
80202544:	012008b4 	movhi	r4,32802
80202548:	21352d04 	addi	r4,r4,-11084
8020254c:	02052e40 	call	802052e4 <printf>
#endif
	}
#if DEBUG_ON
	sprintf(cDebugBuffer, "\n");
80202550:	00a008b4 	movhi	r2,32802
80202554:	10b52d04 	addi	r2,r2,-11084
80202558:	00c00284 	movi	r3,10
8020255c:	10c00005 	stb	r3,0(r2)
80202560:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
80202564:	012008b4 	movhi	r4,32802
80202568:	21352d04 	addi	r4,r4,-11084
8020256c:	02052e40 	call	802052e4 <printf>
#endif

	return bSuccess;
80202570:	e0bfef17 	ldw	r2,-68(fp)
}
80202574:	e6fffc04 	addi	sp,fp,-16
80202578:	dfc00517 	ldw	ra,20(sp)
8020257c:	df000417 	ldw	fp,16(sp)
80202580:	dcc00317 	ldw	r19,12(sp)
80202584:	dc800217 	ldw	r18,8(sp)
80202588:	dc400117 	ldw	r17,4(sp)
8020258c:	dc000017 	ldw	r16,0(sp)
80202590:	dec00604 	addi	sp,sp,24
80202594:	f800283a 	ret

80202598 <uliXorshift32>:
 * @param [in] bDRIVE  Estado atual do RNG
 *
 * @retval Número aleatório resultate do RNG
 *
 */
alt_u32 uliXorshift32(alt_u32 *puliState) {
80202598:	defffd04 	addi	sp,sp,-12
8020259c:	df000215 	stw	fp,8(sp)
802025a0:	df000204 	addi	fp,sp,8
802025a4:	e13fff15 	stw	r4,-4(fp)

	alt_u32 uliX = *puliState;
802025a8:	e0bfff17 	ldw	r2,-4(fp)
802025ac:	10800017 	ldw	r2,0(r2)
802025b0:	e0bffe15 	stw	r2,-8(fp)
	uliX ^= uliX << 13;
802025b4:	e0bffe17 	ldw	r2,-8(fp)
802025b8:	1004937a 	slli	r2,r2,13
802025bc:	e0fffe17 	ldw	r3,-8(fp)
802025c0:	1884f03a 	xor	r2,r3,r2
802025c4:	e0bffe15 	stw	r2,-8(fp)
	uliX ^= uliX >> 17;
802025c8:	e0bffe17 	ldw	r2,-8(fp)
802025cc:	1004d47a 	srli	r2,r2,17
802025d0:	e0fffe17 	ldw	r3,-8(fp)
802025d4:	1884f03a 	xor	r2,r3,r2
802025d8:	e0bffe15 	stw	r2,-8(fp)
	uliX ^= uliX << 5;
802025dc:	e0bffe17 	ldw	r2,-8(fp)
802025e0:	1004917a 	slli	r2,r2,5
802025e4:	e0fffe17 	ldw	r3,-8(fp)
802025e8:	1884f03a 	xor	r2,r3,r2
802025ec:	e0bffe15 	stw	r2,-8(fp)
	*puliState = uliX;
802025f0:	e0bfff17 	ldw	r2,-4(fp)
802025f4:	e0fffe17 	ldw	r3,-8(fp)
802025f8:	10c00015 	stw	r3,0(r2)

	return uliX;
802025fc:	e0bffe17 	ldw	r2,-8(fp)
}
80202600:	e037883a 	mov	sp,fp
80202604:	df000017 	ldw	fp,0(sp)
80202608:	dec00104 	addi	sp,sp,4
8020260c:	f800283a 	ret

80202610 <bSdmaInitM1Dma>:
alt_msgdma_dev *pxDmaM1Dev = NULL;
alt_msgdma_dev *pxDmaM2Dev = NULL;
//! [data memory public global variables]

//! [public functions]
bool bSdmaInitM1Dma(void) {
80202610:	defffb04 	addi	sp,sp,-20
80202614:	dfc00415 	stw	ra,16(sp)
80202618:	df000315 	stw	fp,12(sp)
8020261c:	df000304 	addi	fp,sp,12
	bool bStatus = FALSE;
80202620:	e03ffd15 	stw	zero,-12(fp)
	bool bFailDispatcher = FALSE;
80202624:	e03ffe15 	stw	zero,-8(fp)
	alt_u16 usiCounter = 0;
80202628:	e03fff0d 	sth	zero,-4(fp)

	// open dma device
	pxDmaM1Dev = alt_msgdma_open((char *) SDMA_DMA_M1_NAME);
8020262c:	012008b4 	movhi	r4,32802
80202630:	212bf504 	addi	r4,r4,-20524
80202634:	0218e640 	call	80218e64 <alt_msgdma_open>
80202638:	d0a01415 	stw	r2,-32688(gp)

	// check if the device was opened
	if (pxDmaM1Dev != NULL) {
8020263c:	d0a01417 	ldw	r2,-32688(gp)
80202640:	10001a26 	beq	r2,zero,802026ac <bSdmaInitM1Dma+0x9c>
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM1Dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
80202644:	d0a01417 	ldw	r2,-32688(gp)
80202648:	10800317 	ldw	r2,12(r2)
8020264c:	10800104 	addi	r2,r2,4
80202650:	00c00084 	movi	r3,2
80202654:	10c00035 	stwio	r3,0(r2)
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base) & ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
80202658:	00000b06 	br	80202688 <bSdmaInitM1Dma+0x78>
			usleep(1);
8020265c:	01000044 	movi	r4,1
80202660:	0215ae00 	call	80215ae0 <usleep>
			usiCounter++;
80202664:	e0bfff0b 	ldhu	r2,-4(fp)
80202668:	10800044 	addi	r2,r2,1
8020266c:	e0bfff0d 	sth	r2,-4(fp)
			if (5000 <= usiCounter) { //wait at most 5ms for the device to be reseted
80202670:	e0bfff0b 	ldhu	r2,-4(fp)
80202674:	1084e230 	cmpltui	r2,r2,5000
80202678:	1000031e 	bne	r2,zero,80202688 <bSdmaInitM1Dma+0x78>
				bFailDispatcher = TRUE;
8020267c:	00800044 	movi	r2,1
80202680:	e0bffe15 	stw	r2,-8(fp)
				break;
80202684:	00000506 	br	8020269c <bSdmaInitM1Dma+0x8c>
	// check if the device was opened
	if (pxDmaM1Dev != NULL) {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM1Dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base) & ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
80202688:	d0a01417 	ldw	r2,-32688(gp)
8020268c:	10800317 	ldw	r2,12(r2)
80202690:	10800037 	ldwio	r2,0(r2)
80202694:	1080100c 	andi	r2,r2,64
80202698:	103ff01e 	bne	r2,zero,8020265c <__reset+0xfa1e265c>
			if (5000 <= usiCounter) { //wait at most 5ms for the device to be reseted
				bFailDispatcher = TRUE;
				break;
			}
		}
		if (bFailDispatcher == FALSE)
8020269c:	e0bffe17 	ldw	r2,-8(fp)
802026a0:	1000021e 	bne	r2,zero,802026ac <bSdmaInitM1Dma+0x9c>
			bStatus = TRUE;
802026a4:	00800044 	movi	r2,1
802026a8:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
802026ac:	e0bffd17 	ldw	r2,-12(fp)
}
802026b0:	e037883a 	mov	sp,fp
802026b4:	dfc00117 	ldw	ra,4(sp)
802026b8:	df000017 	ldw	fp,0(sp)
802026bc:	dec00204 	addi	sp,sp,8
802026c0:	f800283a 	ret

802026c4 <bSdmaInitM2Dma>:

bool bSdmaInitM2Dma(void) {
802026c4:	defffb04 	addi	sp,sp,-20
802026c8:	dfc00415 	stw	ra,16(sp)
802026cc:	df000315 	stw	fp,12(sp)
802026d0:	df000304 	addi	fp,sp,12
	bool bStatus = FALSE;
802026d4:	e03ffd15 	stw	zero,-12(fp)
	bool bFailDispatcher = FALSE;
802026d8:	e03ffe15 	stw	zero,-8(fp)
	alt_u16 usiCounter = 0;
802026dc:	e03fff0d 	sth	zero,-4(fp)

	// open dma device
	pxDmaM2Dev = alt_msgdma_open((char *) SDMA_DMA_M2_NAME);
802026e0:	012008b4 	movhi	r4,32802
802026e4:	212bfa04 	addi	r4,r4,-20504
802026e8:	0218e640 	call	80218e64 <alt_msgdma_open>
802026ec:	d0a01515 	stw	r2,-32684(gp)

	// check if the device was opened
	if (pxDmaM2Dev == NULL) {
802026f0:	d0a01517 	ldw	r2,-32684(gp)
802026f4:	1000021e 	bne	r2,zero,80202700 <bSdmaInitM2Dma+0x3c>
		// device not opened
		bStatus = FALSE;
802026f8:	e03ffd15 	stw	zero,-12(fp)
802026fc:	00001a06 	br	80202768 <bSdmaInitM2Dma+0xa4>
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM2Dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
80202700:	d0a01517 	ldw	r2,-32684(gp)
80202704:	10800317 	ldw	r2,12(r2)
80202708:	10800104 	addi	r2,r2,4
8020270c:	00c00084 	movi	r3,2
80202710:	10c00035 	stwio	r3,0(r2)
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base) & ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
80202714:	00000b06 	br	80202744 <bSdmaInitM2Dma+0x80>
			usleep(1);
80202718:	01000044 	movi	r4,1
8020271c:	0215ae00 	call	80215ae0 <usleep>
			usiCounter++;
80202720:	e0bfff0b 	ldhu	r2,-4(fp)
80202724:	10800044 	addi	r2,r2,1
80202728:	e0bfff0d 	sth	r2,-4(fp)
			if (5000 <= usiCounter) { //wait at most 5ms for the device to be reseted
8020272c:	e0bfff0b 	ldhu	r2,-4(fp)
80202730:	1084e230 	cmpltui	r2,r2,5000
80202734:	1000031e 	bne	r2,zero,80202744 <bSdmaInitM2Dma+0x80>
				bFailDispatcher = TRUE;
80202738:	00800044 	movi	r2,1
8020273c:	e0bffe15 	stw	r2,-8(fp)
				break;
80202740:	00000506 	br	80202758 <bSdmaInitM2Dma+0x94>
		bStatus = FALSE;
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM2Dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base) & ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
80202744:	d0a01517 	ldw	r2,-32684(gp)
80202748:	10800317 	ldw	r2,12(r2)
8020274c:	10800037 	ldwio	r2,0(r2)
80202750:	1080100c 	andi	r2,r2,64
80202754:	103ff01e 	bne	r2,zero,80202718 <__reset+0xfa1e2718>
			if (5000 <= usiCounter) { //wait at most 5ms for the device to be reseted
				bFailDispatcher = TRUE;
				break;
			}
		}
		if (bFailDispatcher == FALSE)
80202758:	e0bffe17 	ldw	r2,-8(fp)
8020275c:	1000021e 	bne	r2,zero,80202768 <bSdmaInitM2Dma+0xa4>
			bStatus = TRUE;
80202760:	00800044 	movi	r2,1
80202764:	e0bffd15 	stw	r2,-12(fp)
	}
	return bStatus;
80202768:	e0bffd17 	ldw	r2,-12(fp)
}
8020276c:	e037883a 	mov	sp,fp
80202770:	dfc00117 	ldw	ra,4(sp)
80202774:	df000017 	ldw	fp,0(sp)
80202778:	dec00204 	addi	sp,sp,8
8020277c:	f800283a 	ret

80202780 <bSdmaDmaM1Transfer>:

bool bSdmaDmaM1Transfer(alt_u32 *uliDdrInitialAddr, alt_u16 usiTransferSizeInBlocks, alt_u8 ucBufferSide, alt_u8 ucChBufferId) {
80202780:	deffe804 	addi	sp,sp,-96
80202784:	dfc01715 	stw	ra,92(sp)
80202788:	df001615 	stw	fp,88(sp)
8020278c:	dc001515 	stw	r16,84(sp)
80202790:	df001604 	addi	fp,sp,88
80202794:	e13ffb15 	stw	r4,-20(fp)
80202798:	2809883a 	mov	r4,r5
8020279c:	3007883a 	mov	r3,r6
802027a0:	3805883a 	mov	r2,r7
802027a4:	e13ffc0d 	sth	r4,-16(fp)
802027a8:	e0fffd05 	stb	r3,-12(fp)
802027ac:	e0bffe05 	stb	r2,-8(fp)
802027b0:	defff004 	addi	sp,sp,-64
802027b4:	d8800904 	addi	r2,sp,36
802027b8:	108007c4 	addi	r2,r2,31
802027bc:	1004d17a 	srli	r2,r2,5
802027c0:	1020917a 	slli	r16,r2,5
	bool bStatus;

	alt_msgdma_extended_descriptor xDmaExtendedDescriptor;

	alt_u32 uliDestAddrLow = 0;
802027c4:	e03ff415 	stw	zero,-48(fp)
	alt_u32 uliDestAddrHigh = 0;
802027c8:	e03ff515 	stw	zero,-44(fp)

	alt_u32 uliSrcAddrLow = 0;
802027cc:	e03ff715 	stw	zero,-36(fp)
	alt_u32 uliSrcAddrHigh = 0;
802027d0:	e03ff815 	stw	zero,-32(fp)

	alt_u32 uliControlBits = 0x00000000;
802027d4:	e03ff915 	stw	zero,-28(fp)
	bool bBufferEmptyFlag;
	bool bChannelFlag;

	/* Assuming that the channel selected exist, change to FALSE if doesn't */
	bChannelFlag = TRUE;
802027d8:	00800044 	movi	r2,1
802027dc:	e0bff615 	stw	r2,-40(fp)
	bStatus = FALSE;
802027e0:	e03ff315 	stw	zero,-52(fp)
	bBufferEmptyFlag = FALSE;
802027e4:	e03ffa15 	stw	zero,-24(fp)
	switch (ucChBufferId) {
802027e8:	e0bffe03 	ldbu	r2,-8(fp)
802027ec:	10c00228 	cmpgeui	r3,r2,8
802027f0:	1800a41e 	bne	r3,zero,80202a84 <bSdmaDmaM1Transfer+0x304>
802027f4:	100690ba 	slli	r3,r2,2
802027f8:	00a00834 	movhi	r2,32800
802027fc:	108a0304 	addi	r2,r2,10252
80202800:	1885883a 	add	r2,r3,r2
80202804:	10800017 	ldw	r2,0(r2)
80202808:	1000683a 	jmp	r2
8020280c:	8020282c 	andhi	zero,r16,32928
80202810:	80202870 	cmpltui	zero,r16,32929
80202814:	802028bc 	xorhi	zero,r16,32930
80202818:	80202908 	cmpgei	zero,r16,-32604
8020281c:	80202954 	ori	zero,r16,32933
80202820:	802029a0 	cmpeqi	zero,r16,-32602
80202824:	802029ec 	andhi	zero,r16,32935
80202828:	80202a38 	rdprs	zero,r16,-32600
	case eSdmaCh1Buffer:
		switch (ucBufferSide) {
8020282c:	e0bffd03 	ldbu	r2,-12(fp)
80202830:	10000626 	beq	r2,zero,8020284c <bSdmaDmaM1Transfer+0xcc>
80202834:	10800060 	cmpeqi	r2,r2,1
80202838:	10000926 	beq	r2,zero,80202860 <bSdmaDmaM1Transfer+0xe0>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_LOW;
8020283c:	e03ff415 	stw	zero,-48(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_HIGH;
80202840:	00800044 	movi	r2,1
80202844:	e0bff515 	stw	r2,-44(fp)
			break;
80202848:	00000806 	br	8020286c <bSdmaDmaM1Transfer+0xec>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_LOW;
8020284c:	00800074 	movhi	r2,1
80202850:	e0bff415 	stw	r2,-48(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_HIGH;
80202854:	00800044 	movi	r2,1
80202858:	e0bff515 	stw	r2,-44(fp)
			break;
8020285c:	00000306 	br	8020286c <bSdmaDmaM1Transfer+0xec>
		default:
			bChannelFlag = FALSE;
80202860:	e03ff615 	stw	zero,-40(fp)
			bBufferEmptyFlag = FALSE;
80202864:	e03ffa15 	stw	zero,-24(fp)
			break;
80202868:	0001883a 	nop
		}
		break;
8020286c:	00008706 	br	80202a8c <bSdmaDmaM1Transfer+0x30c>
	case eSdmaCh2Buffer:
		switch (ucBufferSide) {
80202870:	e0bffd03 	ldbu	r2,-12(fp)
80202874:	10000726 	beq	r2,zero,80202894 <bSdmaDmaM1Transfer+0x114>
80202878:	10800060 	cmpeqi	r2,r2,1
8020287c:	10000b26 	beq	r2,zero,802028ac <bSdmaDmaM1Transfer+0x12c>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_LOW;
80202880:	00880004 	movi	r2,8192
80202884:	e0bff415 	stw	r2,-48(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_HIGH;
80202888:	00800044 	movi	r2,1
8020288c:	e0bff515 	stw	r2,-44(fp)
			break;
80202890:	00000906 	br	802028b8 <bSdmaDmaM1Transfer+0x138>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_LOW;
80202894:	00800074 	movhi	r2,1
80202898:	10880004 	addi	r2,r2,8192
8020289c:	e0bff415 	stw	r2,-48(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_HIGH;
802028a0:	00800044 	movi	r2,1
802028a4:	e0bff515 	stw	r2,-44(fp)
			break;
802028a8:	00000306 	br	802028b8 <bSdmaDmaM1Transfer+0x138>
		default:
			bChannelFlag = FALSE;
802028ac:	e03ff615 	stw	zero,-40(fp)
			bBufferEmptyFlag = FALSE;
802028b0:	e03ffa15 	stw	zero,-24(fp)
			break;
802028b4:	0001883a 	nop
		}
		break;
802028b8:	00007406 	br	80202a8c <bSdmaDmaM1Transfer+0x30c>
	case eSdmaCh3Buffer:
		switch (ucBufferSide) {
802028bc:	e0bffd03 	ldbu	r2,-12(fp)
802028c0:	10000726 	beq	r2,zero,802028e0 <bSdmaDmaM1Transfer+0x160>
802028c4:	10800060 	cmpeqi	r2,r2,1
802028c8:	10000b26 	beq	r2,zero,802028f8 <bSdmaDmaM1Transfer+0x178>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_LOW;
802028cc:	00900004 	movi	r2,16384
802028d0:	e0bff415 	stw	r2,-48(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_HIGH;
802028d4:	00800044 	movi	r2,1
802028d8:	e0bff515 	stw	r2,-44(fp)
			break;
802028dc:	00000906 	br	80202904 <bSdmaDmaM1Transfer+0x184>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_LOW;
802028e0:	00800074 	movhi	r2,1
802028e4:	10900004 	addi	r2,r2,16384
802028e8:	e0bff415 	stw	r2,-48(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_HIGH;
802028ec:	00800044 	movi	r2,1
802028f0:	e0bff515 	stw	r2,-44(fp)
			break;
802028f4:	00000306 	br	80202904 <bSdmaDmaM1Transfer+0x184>
		default:
			bChannelFlag = FALSE;
802028f8:	e03ff615 	stw	zero,-40(fp)
			bBufferEmptyFlag = FALSE;
802028fc:	e03ffa15 	stw	zero,-24(fp)
			break;
80202900:	0001883a 	nop
		}
		break;
80202904:	00006106 	br	80202a8c <bSdmaDmaM1Transfer+0x30c>
	case eSdmaCh4Buffer:
		switch (ucBufferSide) {
80202908:	e0bffd03 	ldbu	r2,-12(fp)
8020290c:	10000726 	beq	r2,zero,8020292c <bSdmaDmaM1Transfer+0x1ac>
80202910:	10800060 	cmpeqi	r2,r2,1
80202914:	10000b26 	beq	r2,zero,80202944 <bSdmaDmaM1Transfer+0x1c4>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_LOW;
80202918:	00980004 	movi	r2,24576
8020291c:	e0bff415 	stw	r2,-48(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_HIGH;
80202920:	00800044 	movi	r2,1
80202924:	e0bff515 	stw	r2,-44(fp)
			break;
80202928:	00000906 	br	80202950 <bSdmaDmaM1Transfer+0x1d0>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_LOW;
8020292c:	00800074 	movhi	r2,1
80202930:	10980004 	addi	r2,r2,24576
80202934:	e0bff415 	stw	r2,-48(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_HIGH;
80202938:	00800044 	movi	r2,1
8020293c:	e0bff515 	stw	r2,-44(fp)
			break;
80202940:	00000306 	br	80202950 <bSdmaDmaM1Transfer+0x1d0>
		default:
			bChannelFlag = FALSE;
80202944:	e03ff615 	stw	zero,-40(fp)
			bBufferEmptyFlag = FALSE;
80202948:	e03ffa15 	stw	zero,-24(fp)
			break;
8020294c:	0001883a 	nop
		}
		break;
80202950:	00004e06 	br	80202a8c <bSdmaDmaM1Transfer+0x30c>
	case eSdmaCh5Buffer:
		switch (ucBufferSide) {
80202954:	e0bffd03 	ldbu	r2,-12(fp)
80202958:	10000726 	beq	r2,zero,80202978 <bSdmaDmaM1Transfer+0x1f8>
8020295c:	10800060 	cmpeqi	r2,r2,1
80202960:	10000b26 	beq	r2,zero,80202990 <bSdmaDmaM1Transfer+0x210>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_LOW;
80202964:	00a00014 	movui	r2,32768
80202968:	e0bff415 	stw	r2,-48(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_HIGH;
8020296c:	00800044 	movi	r2,1
80202970:	e0bff515 	stw	r2,-44(fp)
			break;
80202974:	00000906 	br	8020299c <bSdmaDmaM1Transfer+0x21c>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_LOW;
80202978:	008000b4 	movhi	r2,2
8020297c:	10a00004 	addi	r2,r2,-32768
80202980:	e0bff415 	stw	r2,-48(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_HIGH;
80202984:	00800044 	movi	r2,1
80202988:	e0bff515 	stw	r2,-44(fp)
			break;
8020298c:	00000306 	br	8020299c <bSdmaDmaM1Transfer+0x21c>
		default:
			bChannelFlag = FALSE;
80202990:	e03ff615 	stw	zero,-40(fp)
			bBufferEmptyFlag = FALSE;
80202994:	e03ffa15 	stw	zero,-24(fp)
			break;
80202998:	0001883a 	nop
		}
		break;
8020299c:	00003b06 	br	80202a8c <bSdmaDmaM1Transfer+0x30c>
	case eSdmaCh6Buffer:
		switch (ucBufferSide) {
802029a0:	e0bffd03 	ldbu	r2,-12(fp)
802029a4:	10000726 	beq	r2,zero,802029c4 <bSdmaDmaM1Transfer+0x244>
802029a8:	10800060 	cmpeqi	r2,r2,1
802029ac:	10000b26 	beq	r2,zero,802029dc <bSdmaDmaM1Transfer+0x25c>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_LOW;
802029b0:	00a80014 	movui	r2,40960
802029b4:	e0bff415 	stw	r2,-48(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_HIGH;
802029b8:	00800044 	movi	r2,1
802029bc:	e0bff515 	stw	r2,-44(fp)
			break;
802029c0:	00000906 	br	802029e8 <bSdmaDmaM1Transfer+0x268>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_LOW;
802029c4:	008000b4 	movhi	r2,2
802029c8:	10a80004 	addi	r2,r2,-24576
802029cc:	e0bff415 	stw	r2,-48(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_HIGH;
802029d0:	00800044 	movi	r2,1
802029d4:	e0bff515 	stw	r2,-44(fp)
			break;
802029d8:	00000306 	br	802029e8 <bSdmaDmaM1Transfer+0x268>
		default:
			bChannelFlag = FALSE;
802029dc:	e03ff615 	stw	zero,-40(fp)
			bBufferEmptyFlag = FALSE;
802029e0:	e03ffa15 	stw	zero,-24(fp)
			break;
802029e4:	0001883a 	nop
		}
		break;
802029e8:	00002806 	br	80202a8c <bSdmaDmaM1Transfer+0x30c>
	case eSdmaCh7Buffer:
		switch (ucBufferSide) {
802029ec:	e0bffd03 	ldbu	r2,-12(fp)
802029f0:	10000726 	beq	r2,zero,80202a10 <bSdmaDmaM1Transfer+0x290>
802029f4:	10800060 	cmpeqi	r2,r2,1
802029f8:	10000b26 	beq	r2,zero,80202a28 <bSdmaDmaM1Transfer+0x2a8>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_LOW;
802029fc:	00b00014 	movui	r2,49152
80202a00:	e0bff415 	stw	r2,-48(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_HIGH;
80202a04:	00800044 	movi	r2,1
80202a08:	e0bff515 	stw	r2,-44(fp)
			break;
80202a0c:	00000906 	br	80202a34 <bSdmaDmaM1Transfer+0x2b4>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_LOW;
80202a10:	008000b4 	movhi	r2,2
80202a14:	10b00004 	addi	r2,r2,-16384
80202a18:	e0bff415 	stw	r2,-48(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_HIGH;
80202a1c:	00800044 	movi	r2,1
80202a20:	e0bff515 	stw	r2,-44(fp)
			break;
80202a24:	00000306 	br	80202a34 <bSdmaDmaM1Transfer+0x2b4>
		default:
			bChannelFlag = FALSE;
80202a28:	e03ff615 	stw	zero,-40(fp)
			bBufferEmptyFlag = FALSE;
80202a2c:	e03ffa15 	stw	zero,-24(fp)
			break;
80202a30:	0001883a 	nop
		}
		break;
80202a34:	00001506 	br	80202a8c <bSdmaDmaM1Transfer+0x30c>
	case eSdmaCh8Buffer:
		switch (ucBufferSide) {
80202a38:	e0bffd03 	ldbu	r2,-12(fp)
80202a3c:	10000726 	beq	r2,zero,80202a5c <bSdmaDmaM1Transfer+0x2dc>
80202a40:	10800060 	cmpeqi	r2,r2,1
80202a44:	10000b26 	beq	r2,zero,80202a74 <bSdmaDmaM1Transfer+0x2f4>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_LOW;
80202a48:	00b80014 	movui	r2,57344
80202a4c:	e0bff415 	stw	r2,-48(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_HIGH;
80202a50:	00800044 	movi	r2,1
80202a54:	e0bff515 	stw	r2,-44(fp)
			break;
80202a58:	00000906 	br	80202a80 <bSdmaDmaM1Transfer+0x300>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_LOW;
80202a5c:	008000b4 	movhi	r2,2
80202a60:	10b80004 	addi	r2,r2,-8192
80202a64:	e0bff415 	stw	r2,-48(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_HIGH;
80202a68:	00800044 	movi	r2,1
80202a6c:	e0bff515 	stw	r2,-44(fp)
			break;
80202a70:	00000306 	br	80202a80 <bSdmaDmaM1Transfer+0x300>
		default:
			bChannelFlag = FALSE;
80202a74:	e03ff615 	stw	zero,-40(fp)
			bBufferEmptyFlag = FALSE;
80202a78:	e03ffa15 	stw	zero,-24(fp)
			break;
80202a7c:	0001883a 	nop
		}
		break;
80202a80:	00000206 	br	80202a8c <bSdmaDmaM1Transfer+0x30c>
	default:
		bChannelFlag = FALSE;
80202a84:	e03ff615 	stw	zero,-40(fp)
		break;
80202a88:	0001883a 	nop
	}

	uliSrcAddrLow = (alt_u32) SDMA_M1_BASE_ADDR_LOW	+ (alt_u32) uliDdrInitialAddr;
80202a8c:	e0bffb17 	ldw	r2,-20(fp)
80202a90:	e0bff715 	stw	r2,-36(fp)
	uliSrcAddrHigh = (alt_u32) SDMA_M1_BASE_ADDR_HIGH;
80202a94:	e03ff815 	stw	zero,-32(fp)

	bBufferEmptyFlag = TRUE;
80202a98:	00800044 	movi	r2,1
80202a9c:	e0bffa15 	stw	r2,-24(fp)

	if ( (bChannelFlag) && (bBufferEmptyFlag) && (usiTransferSizeInBlocks <= SDMA_MAX_BLOCKS)) {
80202aa0:	e0bff617 	ldw	r2,-40(fp)
80202aa4:	10003026 	beq	r2,zero,80202b68 <bSdmaDmaM1Transfer+0x3e8>
80202aa8:	e0bffa17 	ldw	r2,-24(fp)
80202aac:	10002e26 	beq	r2,zero,80202b68 <bSdmaDmaM1Transfer+0x3e8>
80202ab0:	e0bffc0b 	ldhu	r2,-16(fp)
80202ab4:	10800468 	cmpgeui	r2,r2,17
80202ab8:	10002b1e 	bne	r2,zero,80202b68 <bSdmaDmaM1Transfer+0x3e8>

		if (pxDmaM1Dev != NULL) {
80202abc:	d0a01417 	ldw	r2,-32688(gp)
80202ac0:	10002926 	beq	r2,zero,80202b68 <bSdmaDmaM1Transfer+0x3e8>
			// hold transfers for descriptor fifo space
			while (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
80202ac4:	00000206 	br	80202ad0 <bSdmaDmaM1Transfer+0x350>
				alt_busy_sleep(1); /* delay 1us */
80202ac8:	01000044 	movi	r4,1
80202acc:	02150d00 	call	802150d0 <alt_busy_sleep>

	if ( (bChannelFlag) && (bBufferEmptyFlag) && (usiTransferSizeInBlocks <= SDMA_MAX_BLOCKS)) {

		if (pxDmaM1Dev != NULL) {
			// hold transfers for descriptor fifo space
			while (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
80202ad0:	d0a01417 	ldw	r2,-32688(gp)
80202ad4:	10800317 	ldw	r2,12(r2)
80202ad8:	10800037 	ldwio	r2,0(r2)
80202adc:	1080010c 	andi	r2,r2,4
80202ae0:	103ff91e 	bne	r2,zero,80202ac8 <__reset+0xfa1e2ac8>
				alt_busy_sleep(1); /* delay 1us */
			}
			/* Success = 0 */
			if (0 == iMsgdmaConstructExtendedMmToMmDescriptor(pxDmaM1Dev,
80202ae4:	d2201417 	ldw	r8,-32688(gp)
80202ae8:	e1bff717 	ldw	r6,-36(fp)
80202aec:	e1fff417 	ldw	r7,-48(fp)
80202af0:	e0bffc0b 	ldhu	r2,-16(fp)
80202af4:	10802224 	muli	r2,r2,136
80202af8:	e0fff817 	ldw	r3,-32(fp)
80202afc:	e13ff517 	ldw	r4,-44(fp)
80202b00:	01400044 	movi	r5,1
80202b04:	d9400815 	stw	r5,32(sp)
80202b08:	01400044 	movi	r5,1
80202b0c:	d9400715 	stw	r5,28(sp)
80202b10:	01400044 	movi	r5,1
80202b14:	d9400615 	stw	r5,24(sp)
80202b18:	01400044 	movi	r5,1
80202b1c:	d9400515 	stw	r5,20(sp)
80202b20:	01400044 	movi	r5,1
80202b24:	d9400415 	stw	r5,16(sp)
80202b28:	d9000315 	stw	r4,12(sp)
80202b2c:	d8c00215 	stw	r3,8(sp)
80202b30:	e0fff917 	ldw	r3,-28(fp)
80202b34:	d8c00115 	stw	r3,4(sp)
80202b38:	d8800015 	stw	r2,0(sp)
80202b3c:	800b883a 	mov	r5,r16
80202b40:	4009883a 	mov	r4,r8
80202b44:	020400c0 	call	8020400c <iMsgdmaConstructExtendedMmToMmDescriptor>
80202b48:	1000071e 	bne	r2,zero,80202b68 <bSdmaDmaM1Transfer+0x3e8>
					(alt_u32 *) uliDestAddrLow,
					SDMA_PIXEL_BLOCK_SIZE_BYTES*usiTransferSizeInBlocks, uliControlBits,
					(alt_u32 *) uliSrcAddrHigh, (alt_u32 *) uliDestAddrHigh,
					1, 1, 1, 1, 1)	) {
				/* Success = 0 */
				if (0 == iMsgdmaExtendedDescriptorAsyncTransfer(pxDmaM1Dev,	&xDmaExtendedDescriptor)) {
80202b4c:	d0a01417 	ldw	r2,-32688(gp)
80202b50:	800b883a 	mov	r5,r16
80202b54:	1009883a 	mov	r4,r2
80202b58:	02040c40 	call	802040c4 <iMsgdmaExtendedDescriptorAsyncTransfer>
80202b5c:	1000021e 	bne	r2,zero,80202b68 <bSdmaDmaM1Transfer+0x3e8>
					bStatus = TRUE;
80202b60:	00800044 	movi	r2,1
80202b64:	e0bff315 	stw	r2,-52(fp)
				}
			}
		}
	}
	return bStatus;
80202b68:	e0bff317 	ldw	r2,-52(fp)
}
80202b6c:	e6ffff04 	addi	sp,fp,-4
80202b70:	dfc00217 	ldw	ra,8(sp)
80202b74:	df000117 	ldw	fp,4(sp)
80202b78:	dc000017 	ldw	r16,0(sp)
80202b7c:	dec00304 	addi	sp,sp,12
80202b80:	f800283a 	ret

80202b84 <bSdmaDmaM2Transfer>:

bool bSdmaDmaM2Transfer(alt_u32 *uliDdrInitialAddr, alt_u16 usiTransferSizeInBlocks, alt_u8 ucBufferSide, alt_u8 ucChBufferId) {
80202b84:	deffe804 	addi	sp,sp,-96
80202b88:	dfc01715 	stw	ra,92(sp)
80202b8c:	df001615 	stw	fp,88(sp)
80202b90:	dc001515 	stw	r16,84(sp)
80202b94:	df001604 	addi	fp,sp,88
80202b98:	e13ffb15 	stw	r4,-20(fp)
80202b9c:	2809883a 	mov	r4,r5
80202ba0:	3007883a 	mov	r3,r6
80202ba4:	3805883a 	mov	r2,r7
80202ba8:	e13ffc0d 	sth	r4,-16(fp)
80202bac:	e0fffd05 	stb	r3,-12(fp)
80202bb0:	e0bffe05 	stb	r2,-8(fp)
80202bb4:	defff004 	addi	sp,sp,-64
80202bb8:	d8800904 	addi	r2,sp,36
80202bbc:	108007c4 	addi	r2,r2,31
80202bc0:	1004d17a 	srli	r2,r2,5
80202bc4:	1020917a 	slli	r16,r2,5
	bool bStatus;

	alt_msgdma_extended_descriptor xDmaExtendedDescriptor;

	alt_u32 uliDestAddrLow = 0;
80202bc8:	e03ff415 	stw	zero,-48(fp)
	alt_u32 uliDestAddrHigh = 0;
80202bcc:	e03ff515 	stw	zero,-44(fp)

	alt_u32 uliSrcAddrLow = 0;
80202bd0:	e03ff815 	stw	zero,-32(fp)
	alt_u32 uliSrcAddrHigh = 0;
80202bd4:	e03ff915 	stw	zero,-28(fp)

	alt_u32 uliControlBits = 0x00000000;
80202bd8:	e03ffa15 	stw	zero,-24(fp)
	bool bBufferEmptyFlag;
	bool bChannelFlag;


	/* Assuming that the channel selected exist, change to FALSE if doesn't */
	bChannelFlag = TRUE;
80202bdc:	00800044 	movi	r2,1
80202be0:	e0bff715 	stw	r2,-36(fp)
	bStatus = FALSE;
80202be4:	e03ff315 	stw	zero,-52(fp)
	bBufferEmptyFlag = FALSE;
80202be8:	e03ff615 	stw	zero,-40(fp)
	switch (ucChBufferId) {
80202bec:	e0bffe03 	ldbu	r2,-8(fp)
80202bf0:	10c00228 	cmpgeui	r3,r2,8
80202bf4:	1800a41e 	bne	r3,zero,80202e88 <bSdmaDmaM2Transfer+0x304>
80202bf8:	100690ba 	slli	r3,r2,2
80202bfc:	00a00834 	movhi	r2,32800
80202c00:	108b0404 	addi	r2,r2,11280
80202c04:	1885883a 	add	r2,r3,r2
80202c08:	10800017 	ldw	r2,0(r2)
80202c0c:	1000683a 	jmp	r2
80202c10:	80202c30 	cmpltui	zero,r16,32944
80202c14:	80202c74 	orhi	zero,r16,32945
80202c18:	80202cc0 	call	880202cc <__reset+0x20002cc>
80202c1c:	80202d0c 	andi	zero,r16,32948
80202c20:	80202d58 	cmpnei	zero,r16,-32587
80202c24:	80202da4 	muli	zero,r16,-32586
80202c28:	80202df0 	cmpltui	zero,r16,32951
80202c2c:	80202e3c 	xorhi	zero,r16,32952
	case eSdmaCh1Buffer:
		switch (ucBufferSide) {
80202c30:	e0bffd03 	ldbu	r2,-12(fp)
80202c34:	10000626 	beq	r2,zero,80202c50 <bSdmaDmaM2Transfer+0xcc>
80202c38:	10800060 	cmpeqi	r2,r2,1
80202c3c:	10000926 	beq	r2,zero,80202c64 <bSdmaDmaM2Transfer+0xe0>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_LOW;
80202c40:	e03ff415 	stw	zero,-48(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_HIGH;
80202c44:	00800044 	movi	r2,1
80202c48:	e0bff515 	stw	r2,-44(fp)
			break;
80202c4c:	00000806 	br	80202c70 <bSdmaDmaM2Transfer+0xec>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_LOW;
80202c50:	00800074 	movhi	r2,1
80202c54:	e0bff415 	stw	r2,-48(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_HIGH;
80202c58:	00800044 	movi	r2,1
80202c5c:	e0bff515 	stw	r2,-44(fp)
			break;
80202c60:	00000306 	br	80202c70 <bSdmaDmaM2Transfer+0xec>
		default:
			bChannelFlag = FALSE;
80202c64:	e03ff715 	stw	zero,-36(fp)
			bBufferEmptyFlag = FALSE;
80202c68:	e03ff615 	stw	zero,-40(fp)
			break;
80202c6c:	0001883a 	nop
		}
		break;
80202c70:	00008706 	br	80202e90 <bSdmaDmaM2Transfer+0x30c>
	case eSdmaCh2Buffer:
		switch (ucBufferSide) {
80202c74:	e0bffd03 	ldbu	r2,-12(fp)
80202c78:	10000726 	beq	r2,zero,80202c98 <bSdmaDmaM2Transfer+0x114>
80202c7c:	10800060 	cmpeqi	r2,r2,1
80202c80:	10000b26 	beq	r2,zero,80202cb0 <bSdmaDmaM2Transfer+0x12c>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_LOW;
80202c84:	00880004 	movi	r2,8192
80202c88:	e0bff415 	stw	r2,-48(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_HIGH;
80202c8c:	00800044 	movi	r2,1
80202c90:	e0bff515 	stw	r2,-44(fp)
			break;
80202c94:	00000906 	br	80202cbc <bSdmaDmaM2Transfer+0x138>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_LOW;
80202c98:	00800074 	movhi	r2,1
80202c9c:	10880004 	addi	r2,r2,8192
80202ca0:	e0bff415 	stw	r2,-48(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_HIGH;
80202ca4:	00800044 	movi	r2,1
80202ca8:	e0bff515 	stw	r2,-44(fp)
			break;
80202cac:	00000306 	br	80202cbc <bSdmaDmaM2Transfer+0x138>
		default:
			bChannelFlag = FALSE;
80202cb0:	e03ff715 	stw	zero,-36(fp)
			bBufferEmptyFlag = FALSE;
80202cb4:	e03ff615 	stw	zero,-40(fp)
			break;
80202cb8:	0001883a 	nop
		}
		break;
80202cbc:	00007406 	br	80202e90 <bSdmaDmaM2Transfer+0x30c>
	case eSdmaCh3Buffer:
		switch (ucBufferSide) {
80202cc0:	e0bffd03 	ldbu	r2,-12(fp)
80202cc4:	10000726 	beq	r2,zero,80202ce4 <bSdmaDmaM2Transfer+0x160>
80202cc8:	10800060 	cmpeqi	r2,r2,1
80202ccc:	10000b26 	beq	r2,zero,80202cfc <bSdmaDmaM2Transfer+0x178>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_LOW;
80202cd0:	00900004 	movi	r2,16384
80202cd4:	e0bff415 	stw	r2,-48(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_HIGH;
80202cd8:	00800044 	movi	r2,1
80202cdc:	e0bff515 	stw	r2,-44(fp)
			break;
80202ce0:	00000906 	br	80202d08 <bSdmaDmaM2Transfer+0x184>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_LOW;
80202ce4:	00800074 	movhi	r2,1
80202ce8:	10900004 	addi	r2,r2,16384
80202cec:	e0bff415 	stw	r2,-48(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_HIGH;
80202cf0:	00800044 	movi	r2,1
80202cf4:	e0bff515 	stw	r2,-44(fp)
			break;
80202cf8:	00000306 	br	80202d08 <bSdmaDmaM2Transfer+0x184>
		default:
			bChannelFlag = FALSE;
80202cfc:	e03ff715 	stw	zero,-36(fp)
			bBufferEmptyFlag = FALSE;
80202d00:	e03ff615 	stw	zero,-40(fp)
			break;
80202d04:	0001883a 	nop
		}
		break;
80202d08:	00006106 	br	80202e90 <bSdmaDmaM2Transfer+0x30c>
	case eSdmaCh4Buffer:
		switch (ucBufferSide) {
80202d0c:	e0bffd03 	ldbu	r2,-12(fp)
80202d10:	10000726 	beq	r2,zero,80202d30 <bSdmaDmaM2Transfer+0x1ac>
80202d14:	10800060 	cmpeqi	r2,r2,1
80202d18:	10000b26 	beq	r2,zero,80202d48 <bSdmaDmaM2Transfer+0x1c4>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_LOW;
80202d1c:	00980004 	movi	r2,24576
80202d20:	e0bff415 	stw	r2,-48(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_HIGH;
80202d24:	00800044 	movi	r2,1
80202d28:	e0bff515 	stw	r2,-44(fp)
			break;
80202d2c:	00000906 	br	80202d54 <bSdmaDmaM2Transfer+0x1d0>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_LOW;
80202d30:	00800074 	movhi	r2,1
80202d34:	10980004 	addi	r2,r2,24576
80202d38:	e0bff415 	stw	r2,-48(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_HIGH;
80202d3c:	00800044 	movi	r2,1
80202d40:	e0bff515 	stw	r2,-44(fp)
			break;
80202d44:	00000306 	br	80202d54 <bSdmaDmaM2Transfer+0x1d0>
		default:
			bChannelFlag = FALSE;
80202d48:	e03ff715 	stw	zero,-36(fp)
			bBufferEmptyFlag = FALSE;
80202d4c:	e03ff615 	stw	zero,-40(fp)
			break;
80202d50:	0001883a 	nop
		}
		break;
80202d54:	00004e06 	br	80202e90 <bSdmaDmaM2Transfer+0x30c>
	case eSdmaCh5Buffer:
		switch (ucBufferSide) {
80202d58:	e0bffd03 	ldbu	r2,-12(fp)
80202d5c:	10000726 	beq	r2,zero,80202d7c <bSdmaDmaM2Transfer+0x1f8>
80202d60:	10800060 	cmpeqi	r2,r2,1
80202d64:	10000b26 	beq	r2,zero,80202d94 <bSdmaDmaM2Transfer+0x210>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_LOW;
80202d68:	00a00014 	movui	r2,32768
80202d6c:	e0bff415 	stw	r2,-48(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_HIGH;
80202d70:	00800044 	movi	r2,1
80202d74:	e0bff515 	stw	r2,-44(fp)
			break;
80202d78:	00000906 	br	80202da0 <bSdmaDmaM2Transfer+0x21c>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_LOW;
80202d7c:	008000b4 	movhi	r2,2
80202d80:	10a00004 	addi	r2,r2,-32768
80202d84:	e0bff415 	stw	r2,-48(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_HIGH;
80202d88:	00800044 	movi	r2,1
80202d8c:	e0bff515 	stw	r2,-44(fp)
			break;
80202d90:	00000306 	br	80202da0 <bSdmaDmaM2Transfer+0x21c>
		default:
			bChannelFlag = FALSE;
80202d94:	e03ff715 	stw	zero,-36(fp)
			bBufferEmptyFlag = FALSE;
80202d98:	e03ff615 	stw	zero,-40(fp)
			break;
80202d9c:	0001883a 	nop
		}
		break;
80202da0:	00003b06 	br	80202e90 <bSdmaDmaM2Transfer+0x30c>
	case eSdmaCh6Buffer:
		switch (ucBufferSide) {
80202da4:	e0bffd03 	ldbu	r2,-12(fp)
80202da8:	10000726 	beq	r2,zero,80202dc8 <bSdmaDmaM2Transfer+0x244>
80202dac:	10800060 	cmpeqi	r2,r2,1
80202db0:	10000b26 	beq	r2,zero,80202de0 <bSdmaDmaM2Transfer+0x25c>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_LOW;
80202db4:	00a80014 	movui	r2,40960
80202db8:	e0bff415 	stw	r2,-48(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_HIGH;
80202dbc:	00800044 	movi	r2,1
80202dc0:	e0bff515 	stw	r2,-44(fp)
			break;
80202dc4:	00000906 	br	80202dec <bSdmaDmaM2Transfer+0x268>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_LOW;
80202dc8:	008000b4 	movhi	r2,2
80202dcc:	10a80004 	addi	r2,r2,-24576
80202dd0:	e0bff415 	stw	r2,-48(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_HIGH;
80202dd4:	00800044 	movi	r2,1
80202dd8:	e0bff515 	stw	r2,-44(fp)
			break;
80202ddc:	00000306 	br	80202dec <bSdmaDmaM2Transfer+0x268>
		default:
			bChannelFlag = FALSE;
80202de0:	e03ff715 	stw	zero,-36(fp)
			bBufferEmptyFlag = FALSE;
80202de4:	e03ff615 	stw	zero,-40(fp)
			break;
80202de8:	0001883a 	nop
		}
		break;
80202dec:	00002806 	br	80202e90 <bSdmaDmaM2Transfer+0x30c>
	case eSdmaCh7Buffer:
		switch (ucBufferSide) {
80202df0:	e0bffd03 	ldbu	r2,-12(fp)
80202df4:	10000726 	beq	r2,zero,80202e14 <bSdmaDmaM2Transfer+0x290>
80202df8:	10800060 	cmpeqi	r2,r2,1
80202dfc:	10000b26 	beq	r2,zero,80202e2c <bSdmaDmaM2Transfer+0x2a8>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_LOW;
80202e00:	00b00014 	movui	r2,49152
80202e04:	e0bff415 	stw	r2,-48(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_HIGH;
80202e08:	00800044 	movi	r2,1
80202e0c:	e0bff515 	stw	r2,-44(fp)
			break;
80202e10:	00000906 	br	80202e38 <bSdmaDmaM2Transfer+0x2b4>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_LOW;
80202e14:	008000b4 	movhi	r2,2
80202e18:	10b00004 	addi	r2,r2,-16384
80202e1c:	e0bff415 	stw	r2,-48(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_HIGH;
80202e20:	00800044 	movi	r2,1
80202e24:	e0bff515 	stw	r2,-44(fp)
			break;
80202e28:	00000306 	br	80202e38 <bSdmaDmaM2Transfer+0x2b4>
		default:
			bChannelFlag = FALSE;
80202e2c:	e03ff715 	stw	zero,-36(fp)
			bBufferEmptyFlag = FALSE;
80202e30:	e03ff615 	stw	zero,-40(fp)
			break;
80202e34:	0001883a 	nop
		}
		break;
80202e38:	00001506 	br	80202e90 <bSdmaDmaM2Transfer+0x30c>
	case eSdmaCh8Buffer:
		switch (ucBufferSide) {
80202e3c:	e0bffd03 	ldbu	r2,-12(fp)
80202e40:	10000726 	beq	r2,zero,80202e60 <bSdmaDmaM2Transfer+0x2dc>
80202e44:	10800060 	cmpeqi	r2,r2,1
80202e48:	10000b26 	beq	r2,zero,80202e78 <bSdmaDmaM2Transfer+0x2f4>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_LOW;
80202e4c:	00b80014 	movui	r2,57344
80202e50:	e0bff415 	stw	r2,-48(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_HIGH;
80202e54:	00800044 	movi	r2,1
80202e58:	e0bff515 	stw	r2,-44(fp)
			break;
80202e5c:	00000906 	br	80202e84 <bSdmaDmaM2Transfer+0x300>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_LOW;
80202e60:	008000b4 	movhi	r2,2
80202e64:	10b80004 	addi	r2,r2,-8192
80202e68:	e0bff415 	stw	r2,-48(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_HIGH;
80202e6c:	00800044 	movi	r2,1
80202e70:	e0bff515 	stw	r2,-44(fp)
			break;
80202e74:	00000306 	br	80202e84 <bSdmaDmaM2Transfer+0x300>
		default:
			bChannelFlag = FALSE;
80202e78:	e03ff715 	stw	zero,-36(fp)
			bBufferEmptyFlag = FALSE;
80202e7c:	e03ff615 	stw	zero,-40(fp)
			break;
80202e80:	0001883a 	nop
		}
		break;
80202e84:	00000206 	br	80202e90 <bSdmaDmaM2Transfer+0x30c>
	default:
		bChannelFlag = FALSE;
80202e88:	e03ff715 	stw	zero,-36(fp)
		break;
80202e8c:	0001883a 	nop
	}

	uliSrcAddrLow = (alt_u32) SDMA_M2_BASE_ADDR_LOW
			+ (alt_u32) uliDdrInitialAddr;
80202e90:	e0fffb17 	ldw	r3,-20(fp)
	default:
		bChannelFlag = FALSE;
		break;
	}

	uliSrcAddrLow = (alt_u32) SDMA_M2_BASE_ADDR_LOW
80202e94:	00a00034 	movhi	r2,32768
80202e98:	1885883a 	add	r2,r3,r2
80202e9c:	e0bff815 	stw	r2,-32(fp)
			+ (alt_u32) uliDdrInitialAddr;
	uliSrcAddrHigh = (alt_u32) SDMA_M2_BASE_ADDR_HIGH;
80202ea0:	e03ff915 	stw	zero,-28(fp)

	if ((bChannelFlag) && (bBufferEmptyFlag) && (usiTransferSizeInBlocks <= SDMA_MAX_BLOCKS)) {
80202ea4:	e0bff717 	ldw	r2,-36(fp)
80202ea8:	10003026 	beq	r2,zero,80202f6c <bSdmaDmaM2Transfer+0x3e8>
80202eac:	e0bff617 	ldw	r2,-40(fp)
80202eb0:	10002e26 	beq	r2,zero,80202f6c <bSdmaDmaM2Transfer+0x3e8>
80202eb4:	e0bffc0b 	ldhu	r2,-16(fp)
80202eb8:	10800468 	cmpgeui	r2,r2,17
80202ebc:	10002b1e 	bne	r2,zero,80202f6c <bSdmaDmaM2Transfer+0x3e8>
		if (pxDmaM2Dev != NULL) {
80202ec0:	d0a01517 	ldw	r2,-32684(gp)
80202ec4:	10002926 	beq	r2,zero,80202f6c <bSdmaDmaM2Transfer+0x3e8>

			while (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
80202ec8:	00000206 	br	80202ed4 <bSdmaDmaM2Transfer+0x350>
				alt_busy_sleep(1); /* delay 1us */
80202ecc:	01000044 	movi	r4,1
80202ed0:	02150d00 	call	802150d0 <alt_busy_sleep>
	uliSrcAddrHigh = (alt_u32) SDMA_M2_BASE_ADDR_HIGH;

	if ((bChannelFlag) && (bBufferEmptyFlag) && (usiTransferSizeInBlocks <= SDMA_MAX_BLOCKS)) {
		if (pxDmaM2Dev != NULL) {

			while (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
80202ed4:	d0a01517 	ldw	r2,-32684(gp)
80202ed8:	10800317 	ldw	r2,12(r2)
80202edc:	10800037 	ldwio	r2,0(r2)
80202ee0:	1080010c 	andi	r2,r2,4
80202ee4:	103ff91e 	bne	r2,zero,80202ecc <__reset+0xfa1e2ecc>
				alt_busy_sleep(1); /* delay 1us */
			}
			/* Success = 0 */
			if ( 0 == iMsgdmaConstructExtendedMmToMmDescriptor(pxDmaM2Dev,
80202ee8:	d2201517 	ldw	r8,-32684(gp)
80202eec:	e1bff817 	ldw	r6,-32(fp)
80202ef0:	e1fff417 	ldw	r7,-48(fp)
80202ef4:	e0bffc0b 	ldhu	r2,-16(fp)
80202ef8:	10802224 	muli	r2,r2,136
80202efc:	e0fff917 	ldw	r3,-28(fp)
80202f00:	e13ff517 	ldw	r4,-44(fp)
80202f04:	01400044 	movi	r5,1
80202f08:	d9400815 	stw	r5,32(sp)
80202f0c:	01400044 	movi	r5,1
80202f10:	d9400715 	stw	r5,28(sp)
80202f14:	01400044 	movi	r5,1
80202f18:	d9400615 	stw	r5,24(sp)
80202f1c:	01400044 	movi	r5,1
80202f20:	d9400515 	stw	r5,20(sp)
80202f24:	01400044 	movi	r5,1
80202f28:	d9400415 	stw	r5,16(sp)
80202f2c:	d9000315 	stw	r4,12(sp)
80202f30:	d8c00215 	stw	r3,8(sp)
80202f34:	e0fffa17 	ldw	r3,-24(fp)
80202f38:	d8c00115 	stw	r3,4(sp)
80202f3c:	d8800015 	stw	r2,0(sp)
80202f40:	800b883a 	mov	r5,r16
80202f44:	4009883a 	mov	r4,r8
80202f48:	020400c0 	call	8020400c <iMsgdmaConstructExtendedMmToMmDescriptor>
80202f4c:	1000071e 	bne	r2,zero,80202f6c <bSdmaDmaM2Transfer+0x3e8>
					(alt_u32 *) uliDestAddrLow,
					SDMA_PIXEL_BLOCK_SIZE_BYTES*usiTransferSizeInBlocks, uliControlBits,
					(alt_u32 *) uliSrcAddrHigh, (alt_u32 *) uliDestAddrHigh,
					1, 1, 1, 1, 1)) {
				/* Success = 0 */
				if ( 0 == iMsgdmaExtendedDescriptorSyncTransfer(pxDmaM2Dev,
80202f50:	d0a01517 	ldw	r2,-32684(gp)
80202f54:	800b883a 	mov	r5,r16
80202f58:	1009883a 	mov	r4,r2
80202f5c:	02041000 	call	80204100 <iMsgdmaExtendedDescriptorSyncTransfer>
80202f60:	1000021e 	bne	r2,zero,80202f6c <bSdmaDmaM2Transfer+0x3e8>
						&xDmaExtendedDescriptor)) {
					bStatus = TRUE;
80202f64:	00800044 	movi	r2,1
80202f68:	e0bff315 	stw	r2,-52(fp)
				}
			}
		}
	}
	return bStatus;
80202f6c:	e0bff317 	ldw	r2,-52(fp)
}
80202f70:	e6ffff04 	addi	sp,fp,-4
80202f74:	dfc00217 	ldw	ra,8(sp)
80202f78:	df000117 	ldw	fp,4(sp)
80202f7c:	dc000017 	ldw	r16,0(sp)
80202f80:	dec00304 	addi	sp,sp,12
80202f84:	f800283a 	ret

80202f88 <I2C_TestAdress>:
void i2c_start(alt_u32 clk_base, alt_u32 data_base);
void i2c_stop(alt_u32 clk_base, alt_u32 data_base);
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);

bool I2C_TestAdress(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr){
80202f88:	defffa04 	addi	sp,sp,-24
80202f8c:	dfc00515 	stw	ra,20(sp)
80202f90:	df000415 	stw	fp,16(sp)
80202f94:	df000404 	addi	fp,sp,16
80202f98:	e13ffd15 	stw	r4,-12(fp)
80202f9c:	e17ffe15 	stw	r5,-8(fp)
80202fa0:	3005883a 	mov	r2,r6
80202fa4:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
80202fa8:	00800044 	movi	r2,1
80202fac:	e0bffc15 	stw	r2,-16(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
80202fb0:	e17ffe17 	ldw	r5,-8(fp)
80202fb4:	e13ffd17 	ldw	r4,-12(fp)
80202fb8:	02033380 	call	80203338 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
80202fbc:	e0bfff03 	ldbu	r2,-4(fp)
80202fc0:	10803fcc 	andi	r2,r2,255
80202fc4:	100d883a 	mov	r6,r2
80202fc8:	e17ffe17 	ldw	r5,-8(fp)
80202fcc:	e13ffd17 	ldw	r4,-12(fp)
80202fd0:	020343c0 	call	8020343c <i2c_write>
80202fd4:	1000011e 	bne	r2,zero,80202fdc <I2C_TestAdress+0x54>
        bSuccess = FALSE;
80202fd8:	e03ffc15 	stw	zero,-16(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
80202fdc:	e17ffe17 	ldw	r5,-8(fp)
80202fe0:	e13ffd17 	ldw	r4,-12(fp)
80202fe4:	02033c40 	call	802033c4 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
80202fe8:	0106d604 	movi	r4,7000
80202fec:	0215ae00 	call	80215ae0 <usleep>
    
    return bSuccess;
80202ff0:	e0bffc17 	ldw	r2,-16(fp)

}
80202ff4:	e037883a 	mov	sp,fp
80202ff8:	dfc00117 	ldw	ra,4(sp)
80202ffc:	df000017 	ldw	fp,0(sp)
80203000:	dec00204 	addi	sp,sp,8
80203004:	f800283a 	ret

80203008 <I2C_Write>:

bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
80203008:	defff804 	addi	sp,sp,-32
8020300c:	dfc00715 	stw	ra,28(sp)
80203010:	df000615 	stw	fp,24(sp)
80203014:	df000604 	addi	fp,sp,24
80203018:	e13ffb15 	stw	r4,-20(fp)
8020301c:	e17ffc15 	stw	r5,-16(fp)
80203020:	3009883a 	mov	r4,r6
80203024:	3807883a 	mov	r3,r7
80203028:	e0800217 	ldw	r2,8(fp)
8020302c:	e13ffd05 	stb	r4,-12(fp)
80203030:	e0fffe05 	stb	r3,-8(fp)
80203034:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
80203038:	00800044 	movi	r2,1
8020303c:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
80203040:	e17ffc17 	ldw	r5,-16(fp)
80203044:	e13ffb17 	ldw	r4,-20(fp)
80203048:	02033380 	call	80203338 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
8020304c:	e0bffd03 	ldbu	r2,-12(fp)
80203050:	10803fcc 	andi	r2,r2,255
80203054:	100d883a 	mov	r6,r2
80203058:	e17ffc17 	ldw	r5,-16(fp)
8020305c:	e13ffb17 	ldw	r4,-20(fp)
80203060:	020343c0 	call	8020343c <i2c_write>
80203064:	1000011e 	bne	r2,zero,8020306c <I2C_Write+0x64>
        bSuccess = FALSE;
80203068:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
8020306c:	e0bffa17 	ldw	r2,-24(fp)
80203070:	10000726 	beq	r2,zero,80203090 <I2C_Write+0x88>
80203074:	e0bffe03 	ldbu	r2,-8(fp)
80203078:	100d883a 	mov	r6,r2
8020307c:	e17ffc17 	ldw	r5,-16(fp)
80203080:	e13ffb17 	ldw	r4,-20(fp)
80203084:	020343c0 	call	8020343c <i2c_write>
80203088:	1000011e 	bne	r2,zero,80203090 <I2C_Write+0x88>
        bSuccess = FALSE;
8020308c:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
80203090:	e0bffa17 	ldw	r2,-24(fp)
80203094:	10000726 	beq	r2,zero,802030b4 <I2C_Write+0xac>
80203098:	e0bfff03 	ldbu	r2,-4(fp)
8020309c:	100d883a 	mov	r6,r2
802030a0:	e17ffc17 	ldw	r5,-16(fp)
802030a4:	e13ffb17 	ldw	r4,-20(fp)
802030a8:	020343c0 	call	8020343c <i2c_write>
802030ac:	1000011e 	bne	r2,zero,802030b4 <I2C_Write+0xac>
        bSuccess = FALSE;
802030b0:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
802030b4:	e17ffc17 	ldw	r5,-16(fp)
802030b8:	e13ffb17 	ldw	r4,-20(fp)
802030bc:	02033c40 	call	802033c4 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
802030c0:	0106d604 	movi	r4,7000
802030c4:	0215ae00 	call	80215ae0 <usleep>
    
    return bSuccess;
802030c8:	e0bffa17 	ldw	r2,-24(fp)

}
802030cc:	e037883a 	mov	sp,fp
802030d0:	dfc00117 	ldw	ra,4(sp)
802030d4:	df000017 	ldw	fp,0(sp)
802030d8:	dec00204 	addi	sp,sp,8
802030dc:	f800283a 	ret

802030e0 <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
802030e0:	defff904 	addi	sp,sp,-28
802030e4:	dfc00615 	stw	ra,24(sp)
802030e8:	df000515 	stw	fp,20(sp)
802030ec:	df000504 	addi	fp,sp,20
802030f0:	e13ffc15 	stw	r4,-16(fp)
802030f4:	e17ffd15 	stw	r5,-12(fp)
802030f8:	3007883a 	mov	r3,r6
802030fc:	3805883a 	mov	r2,r7
80203100:	e0fffe05 	stb	r3,-8(fp)
80203104:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
80203108:	00800044 	movi	r2,1
8020310c:	e0bffb15 	stw	r2,-20(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
80203110:	e17ffd17 	ldw	r5,-12(fp)
80203114:	e13ffc17 	ldw	r4,-16(fp)
80203118:	02033380 	call	80203338 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
8020311c:	e0bffe03 	ldbu	r2,-8(fp)
80203120:	10803fcc 	andi	r2,r2,255
80203124:	100d883a 	mov	r6,r2
80203128:	e17ffd17 	ldw	r5,-12(fp)
8020312c:	e13ffc17 	ldw	r4,-16(fp)
80203130:	020343c0 	call	8020343c <i2c_write>
80203134:	1000011e 	bne	r2,zero,8020313c <I2C_Read+0x5c>
        bSuccess = FALSE;
80203138:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
8020313c:	e0bffb17 	ldw	r2,-20(fp)
80203140:	10000726 	beq	r2,zero,80203160 <I2C_Read+0x80>
80203144:	e0bfff03 	ldbu	r2,-4(fp)
80203148:	100d883a 	mov	r6,r2
8020314c:	e17ffd17 	ldw	r5,-12(fp)
80203150:	e13ffc17 	ldw	r4,-16(fp)
80203154:	020343c0 	call	8020343c <i2c_write>
80203158:	1000011e 	bne	r2,zero,80203160 <I2C_Read+0x80>
        bSuccess = FALSE;
8020315c:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    i2c_start(clk_base, data_base);  // restart
80203160:	e17ffd17 	ldw	r5,-12(fp)
80203164:	e13ffc17 	ldw	r4,-16(fp)
80203168:	02033380 	call	80203338 <i2c_start>
    DeviceAddr |= 1; // Read
8020316c:	e0bffe03 	ldbu	r2,-8(fp)
80203170:	10800054 	ori	r2,r2,1
80203174:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
80203178:	e0bffb17 	ldw	r2,-20(fp)
8020317c:	10000826 	beq	r2,zero,802031a0 <I2C_Read+0xc0>
80203180:	e0bffe03 	ldbu	r2,-8(fp)
80203184:	10803fcc 	andi	r2,r2,255
80203188:	100d883a 	mov	r6,r2
8020318c:	e17ffd17 	ldw	r5,-12(fp)
80203190:	e13ffc17 	ldw	r4,-16(fp)
80203194:	020343c0 	call	8020343c <i2c_write>
80203198:	1000011e 	bne	r2,zero,802031a0 <I2C_Read+0xc0>
        bSuccess = FALSE;
8020319c:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
802031a0:	e0bffb17 	ldw	r2,-20(fp)
802031a4:	10000526 	beq	r2,zero,802031bc <I2C_Read+0xdc>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
802031a8:	000f883a 	mov	r7,zero
802031ac:	e1800217 	ldw	r6,8(fp)
802031b0:	e17ffd17 	ldw	r5,-12(fp)
802031b4:	e13ffc17 	ldw	r4,-16(fp)
802031b8:	020356c0 	call	8020356c <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
802031bc:	e17ffd17 	ldw	r5,-12(fp)
802031c0:	e13ffc17 	ldw	r4,-16(fp)
802031c4:	02033c40 	call	802033c4 <i2c_stop>
    
    return bSuccess;
802031c8:	e0bffb17 	ldw	r2,-20(fp)
}
802031cc:	e037883a 	mov	sp,fp
802031d0:	dfc00117 	ldw	ra,4(sp)
802031d4:	df000017 	ldw	fp,0(sp)
802031d8:	dec00204 	addi	sp,sp,8
802031dc:	f800283a 	ret

802031e0 <I2C_MultipleRead>:

bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 szData[], alt_u16 len){
802031e0:	defff604 	addi	sp,sp,-40
802031e4:	dfc00915 	stw	ra,36(sp)
802031e8:	df000815 	stw	fp,32(sp)
802031ec:	df000804 	addi	fp,sp,32
802031f0:	e13ffb15 	stw	r4,-20(fp)
802031f4:	e17ffc15 	stw	r5,-16(fp)
802031f8:	3007883a 	mov	r3,r6
802031fc:	e1fffe15 	stw	r7,-8(fp)
80203200:	e0800217 	ldw	r2,8(fp)
80203204:	e0fffd05 	stb	r3,-12(fp)
80203208:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
8020320c:	00800044 	movi	r2,1
80203210:	e0bff915 	stw	r2,-28(fp)
    //alt_u8 DeviceAddr, 
    alt_u8 ControlAddr = 0;
80203214:	e03ffa05 	stb	zero,-24(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
80203218:	e17ffc17 	ldw	r5,-16(fp)
8020321c:	e13ffb17 	ldw	r4,-20(fp)
80203220:	02033380 	call	80203338 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
80203224:	e0bffd03 	ldbu	r2,-12(fp)
80203228:	10803fcc 	andi	r2,r2,255
8020322c:	100d883a 	mov	r6,r2
80203230:	e17ffc17 	ldw	r5,-16(fp)
80203234:	e13ffb17 	ldw	r4,-20(fp)
80203238:	020343c0 	call	8020343c <i2c_write>
8020323c:	1000011e 	bne	r2,zero,80203244 <I2C_MultipleRead+0x64>
        bSuccess = FALSE;
80203240:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
80203244:	e0bff917 	ldw	r2,-28(fp)
80203248:	10000726 	beq	r2,zero,80203268 <I2C_MultipleRead+0x88>
8020324c:	e0bffa03 	ldbu	r2,-24(fp)
80203250:	100d883a 	mov	r6,r2
80203254:	e17ffc17 	ldw	r5,-16(fp)
80203258:	e13ffb17 	ldw	r4,-20(fp)
8020325c:	020343c0 	call	8020343c <i2c_write>
80203260:	1000011e 	bne	r2,zero,80203268 <I2C_MultipleRead+0x88>
        bSuccess = FALSE;
80203264:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }    
    if (bSuccess)        
80203268:	e0bff917 	ldw	r2,-28(fp)
8020326c:	10000326 	beq	r2,zero,8020327c <I2C_MultipleRead+0x9c>
        i2c_start(clk_base, data_base);  // restart
80203270:	e17ffc17 	ldw	r5,-16(fp)
80203274:	e13ffb17 	ldw	r4,-20(fp)
80203278:	02033380 	call	80203338 <i2c_start>
    DeviceAddr |= 1; // Read
8020327c:	e0bffd03 	ldbu	r2,-12(fp)
80203280:	10800054 	ori	r2,r2,1
80203284:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
80203288:	e0bff917 	ldw	r2,-28(fp)
8020328c:	10000826 	beq	r2,zero,802032b0 <I2C_MultipleRead+0xd0>
80203290:	e0bffd03 	ldbu	r2,-12(fp)
80203294:	10803fcc 	andi	r2,r2,255
80203298:	100d883a 	mov	r6,r2
8020329c:	e17ffc17 	ldw	r5,-16(fp)
802032a0:	e13ffb17 	ldw	r4,-20(fp)
802032a4:	020343c0 	call	8020343c <i2c_write>
802032a8:	1000011e 	bne	r2,zero,802032b0 <I2C_MultipleRead+0xd0>
        bSuccess = FALSE;
802032ac:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
802032b0:	e0bff917 	ldw	r2,-28(fp)
802032b4:	10001726 	beq	r2,zero,80203314 <I2C_MultipleRead+0x134>
        for(i=0;i<len && bSuccess;i++){
802032b8:	e03ff815 	stw	zero,-32(fp)
802032bc:	00001006 	br	80203300 <I2C_MultipleRead+0x120>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
802032c0:	e0bff817 	ldw	r2,-32(fp)
802032c4:	e0fffe17 	ldw	r3,-8(fp)
802032c8:	1889883a 	add	r4,r3,r2
802032cc:	e0bfff0b 	ldhu	r2,-4(fp)
802032d0:	10ffffc4 	addi	r3,r2,-1
802032d4:	e0bff817 	ldw	r2,-32(fp)
802032d8:	1884c03a 	cmpne	r2,r3,r2
802032dc:	10803fcc 	andi	r2,r2,255
802032e0:	100f883a 	mov	r7,r2
802032e4:	200d883a 	mov	r6,r4
802032e8:	e17ffc17 	ldw	r5,-16(fp)
802032ec:	e13ffb17 	ldw	r4,-20(fp)
802032f0:	020356c0 	call	8020356c <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
802032f4:	e0bff817 	ldw	r2,-32(fp)
802032f8:	10800044 	addi	r2,r2,1
802032fc:	e0bff815 	stw	r2,-32(fp)
80203300:	e0bfff0b 	ldhu	r2,-4(fp)
80203304:	e0fff817 	ldw	r3,-32(fp)
80203308:	1880020e 	bge	r3,r2,80203314 <I2C_MultipleRead+0x134>
8020330c:	e0bff917 	ldw	r2,-28(fp)
80203310:	103feb1e 	bne	r2,zero,802032c0 <__reset+0xfa1e32c0>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }            
    }        
    i2c_stop(clk_base, data_base);
80203314:	e17ffc17 	ldw	r5,-16(fp)
80203318:	e13ffb17 	ldw	r4,-20(fp)
8020331c:	02033c40 	call	802033c4 <i2c_stop>
    
    return bSuccess;    
80203320:	e0bff917 	ldw	r2,-28(fp)
    
}
80203324:	e037883a 	mov	sp,fp
80203328:	dfc00117 	ldw	ra,4(sp)
8020332c:	df000017 	ldw	fp,0(sp)
80203330:	dec00204 	addi	sp,sp,8
80203334:	f800283a 	ret

80203338 <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
80203338:	defffc04 	addi	sp,sp,-16
8020333c:	dfc00315 	stw	ra,12(sp)
80203340:	df000215 	stw	fp,8(sp)
80203344:	df000204 	addi	fp,sp,8
80203348:	e13ffe15 	stw	r4,-8(fp)
8020334c:	e17fff15 	stw	r5,-4(fp)
    
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
80203350:	e0bfff17 	ldw	r2,-4(fp)
80203354:	10800104 	addi	r2,r2,4
80203358:	1007883a 	mov	r3,r2
8020335c:	00800044 	movi	r2,1
80203360:	18800035 	stwio	r2,0(r3)
    
    
    
    // start condition
    SDA_HIGH(data_base); // data high
80203364:	e0bfff17 	ldw	r2,-4(fp)
80203368:	00c00044 	movi	r3,1
8020336c:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base);
80203370:	e0bffe17 	ldw	r2,-8(fp)
80203374:	00c00044 	movi	r3,1
80203378:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
8020337c:	01000044 	movi	r4,1
80203380:	0215ae00 	call	80215ae0 <usleep>
     
    SDA_LOW(data_base); // data low
80203384:	e0bfff17 	ldw	r2,-4(fp)
80203388:	0007883a 	mov	r3,zero
8020338c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; 
80203390:	01000044 	movi	r4,1
80203394:	0215ae00 	call	80215ae0 <usleep>
    SCL_LOW(clk_base); // clock low
80203398:	e0bffe17 	ldw	r2,-8(fp)
8020339c:	0007883a 	mov	r3,zero
802033a0:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
802033a4:	01000044 	movi	r4,1
802033a8:	0215ae00 	call	80215ae0 <usleep>
}
802033ac:	0001883a 	nop
802033b0:	e037883a 	mov	sp,fp
802033b4:	dfc00117 	ldw	ra,4(sp)
802033b8:	df000017 	ldw	fp,0(sp)
802033bc:	dec00204 	addi	sp,sp,8
802033c0:	f800283a 	ret

802033c4 <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
802033c4:	defffc04 	addi	sp,sp,-16
802033c8:	dfc00315 	stw	ra,12(sp)
802033cc:	df000215 	stw	fp,8(sp)
802033d0:	df000204 	addi	fp,sp,8
802033d4:	e13ffe15 	stw	r4,-8(fp)
802033d8:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
802033dc:	e0bfff17 	ldw	r2,-4(fp)
802033e0:	10800104 	addi	r2,r2,4
802033e4:	1007883a 	mov	r3,r2
802033e8:	00800044 	movi	r2,1
802033ec:	18800035 	stwio	r2,0(r3)
    SDA_LOW(data_base); // Data Low
802033f0:	e0bfff17 	ldw	r2,-4(fp)
802033f4:	0007883a 	mov	r3,zero
802033f8:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY; 
    SCL_HIGH(clk_base);  // clock high
802033fc:	e0bffe17 	ldw	r2,-8(fp)
80203400:	00c00044 	movi	r3,1
80203404:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high long delay
80203408:	01000044 	movi	r4,1
8020340c:	0215ae00 	call	80215ae0 <usleep>
    SDA_HIGH(data_base); // data high
80203410:	e0bfff17 	ldw	r2,-4(fp)
80203414:	00c00044 	movi	r3,1
80203418:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data high delay
8020341c:	01000044 	movi	r4,1
80203420:	0215ae00 	call	80215ae0 <usleep>
    

    
}
80203424:	0001883a 	nop
80203428:	e037883a 	mov	sp,fp
8020342c:	dfc00117 	ldw	ra,4(sp)
80203430:	df000017 	ldw	fp,0(sp)
80203434:	dec00204 	addi	sp,sp,8
80203438:	f800283a 	ret

8020343c <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
8020343c:	defff804 	addi	sp,sp,-32
80203440:	dfc00715 	stw	ra,28(sp)
80203444:	df000615 	stw	fp,24(sp)
80203448:	df000604 	addi	fp,sp,24
8020344c:	e13ffd15 	stw	r4,-12(fp)
80203450:	e17ffe15 	stw	r5,-8(fp)
80203454:	3005883a 	mov	r2,r6
80203458:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 Mask = 0x80;
8020345c:	00bfe004 	movi	r2,-128
80203460:	e0bffa05 	stb	r2,-24(fp)
    bool bAck;
    int i;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
80203464:	e0bffe17 	ldw	r2,-8(fp)
80203468:	10800104 	addi	r2,r2,4
8020346c:	1007883a 	mov	r3,r2
80203470:	00800044 	movi	r2,1
80203474:	18800035 	stwio	r2,0(r3)
    
    for(i=0;i<8;i++){
80203478:	e03ffb15 	stw	zero,-20(fp)
8020347c:	00001f06 	br	802034fc <i2c_write+0xc0>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
80203480:	e0bffd17 	ldw	r2,-12(fp)
80203484:	0007883a 	mov	r3,zero
80203488:	10c00035 	stwio	r3,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
8020348c:	e0ffff03 	ldbu	r3,-4(fp)
80203490:	e0bffa03 	ldbu	r2,-24(fp)
80203494:	1884703a 	and	r2,r3,r2
80203498:	10803fcc 	andi	r2,r2,255
8020349c:	10000426 	beq	r2,zero,802034b0 <i2c_write+0x74>
            SDA_HIGH(data_base);
802034a0:	e0bffe17 	ldw	r2,-8(fp)
802034a4:	00c00044 	movi	r3,1
802034a8:	10c00035 	stwio	r3,0(r2)
802034ac:	00000306 	br	802034bc <i2c_write+0x80>
        }else{    
            SDA_LOW(data_base);
802034b0:	e0bffe17 	ldw	r2,-8(fp)
802034b4:	0007883a 	mov	r3,zero
802034b8:	10c00035 	stwio	r3,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
802034bc:	e0bffa03 	ldbu	r2,-24(fp)
802034c0:	1004d07a 	srli	r2,r2,1
802034c4:	e0bffa05 	stb	r2,-24(fp)
        // clock high
        SCL_HIGH(clk_base);
802034c8:	e0bffd17 	ldw	r2,-12(fp)
802034cc:	00c00044 	movi	r3,1
802034d0:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
802034d4:	01000044 	movi	r4,1
802034d8:	0215ae00 	call	80215ae0 <usleep>
        SCL_LOW(clk_base);
802034dc:	e0bffd17 	ldw	r2,-12(fp)
802034e0:	0007883a 	mov	r3,zero
802034e4:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
802034e8:	01000044 	movi	r4,1
802034ec:	0215ae00 	call	80215ae0 <usleep>
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for(i=0;i<8;i++){
802034f0:	e0bffb17 	ldw	r2,-20(fp)
802034f4:	10800044 	addi	r2,r2,1
802034f8:	e0bffb15 	stw	r2,-20(fp)
802034fc:	e0bffb17 	ldw	r2,-20(fp)
80203500:	10800210 	cmplti	r2,r2,8
80203504:	103fde1e 	bne	r2,zero,80203480 <__reset+0xfa1e3480>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
80203508:	e0bffe17 	ldw	r2,-8(fp)
8020350c:	10800104 	addi	r2,r2,4
80203510:	0007883a 	mov	r3,zero
80203514:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
80203518:	e0bffd17 	ldw	r2,-12(fp)
8020351c:	00c00044 	movi	r3,1
80203520:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;  // clock high delay
80203524:	01000044 	movi	r4,1
80203528:	0215ae00 	call	80215ae0 <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
8020352c:	e0bffe17 	ldw	r2,-8(fp)
80203530:	10800037 	ldwio	r2,0(r2)
80203534:	1005003a 	cmpeq	r2,r2,zero
80203538:	10803fcc 	andi	r2,r2,255
8020353c:	e0bffc15 	stw	r2,-16(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
80203540:	e0bffd17 	ldw	r2,-12(fp)
80203544:	0007883a 	mov	r3,zero
80203548:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
8020354c:	01000044 	movi	r4,1
80203550:	0215ae00 	call	80215ae0 <usleep>
    return bAck;
80203554:	e0bffc17 	ldw	r2,-16(fp)
}    
80203558:	e037883a 	mov	sp,fp
8020355c:	dfc00117 	ldw	ra,4(sp)
80203560:	df000017 	ldw	fp,0(sp)
80203564:	dec00204 	addi	sp,sp,8
80203568:	f800283a 	ret

8020356c <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
8020356c:	defff804 	addi	sp,sp,-32
80203570:	dfc00715 	stw	ra,28(sp)
80203574:	df000615 	stw	fp,24(sp)
80203578:	df000604 	addi	fp,sp,24
8020357c:	e13ffc15 	stw	r4,-16(fp)
80203580:	e17ffd15 	stw	r5,-12(fp)
80203584:	e1bffe15 	stw	r6,-8(fp)
80203588:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
8020358c:	e03ffa05 	stb	zero,-24(fp)
    int i;
    
    // assume SCL = low
    
    SDA_DIR_IN(data_base);  // set data read mode
80203590:	e0bffd17 	ldw	r2,-12(fp)
80203594:	10800104 	addi	r2,r2,4
80203598:	0007883a 	mov	r3,zero
8020359c:	10c00035 	stwio	r3,0(r2)
    SCL_LOW(clk_base); // clock low
802035a0:	e0bffc17 	ldw	r2,-16(fp)
802035a4:	0007883a 	mov	r3,zero
802035a8:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
802035ac:	01000044 	movi	r4,1
802035b0:	0215ae00 	call	80215ae0 <usleep>

    for(i=0;i<8;i++){
802035b4:	e03ffb15 	stw	zero,-20(fp)
802035b8:	00001606 	br	80203614 <i2c_read+0xa8>
        Data <<= 1;
802035bc:	e0bffa03 	ldbu	r2,-24(fp)
802035c0:	1085883a 	add	r2,r2,r2
802035c4:	e0bffa05 	stb	r2,-24(fp)
        SCL_HIGH(clk_base);  // clock high
802035c8:	e0bffc17 	ldw	r2,-16(fp)
802035cc:	00c00044 	movi	r3,1
802035d0:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
802035d4:	01000044 	movi	r4,1
802035d8:	0215ae00 	call	80215ae0 <usleep>
        if (SDA_READ(data_base))  // read data   
802035dc:	e0bffd17 	ldw	r2,-12(fp)
802035e0:	10800037 	ldwio	r2,0(r2)
802035e4:	10000326 	beq	r2,zero,802035f4 <i2c_read+0x88>
            Data |= 0x01;
802035e8:	e0bffa03 	ldbu	r2,-24(fp)
802035ec:	10800054 	ori	r2,r2,1
802035f0:	e0bffa05 	stb	r2,-24(fp)
        SCL_LOW(clk_base);  // clock log  
802035f4:	e0bffc17 	ldw	r2,-16(fp)
802035f8:	0007883a 	mov	r3,zero
802035fc:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
80203600:	01000044 	movi	r4,1
80203604:	0215ae00 	call	80215ae0 <usleep>
    
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
80203608:	e0bffb17 	ldw	r2,-20(fp)
8020360c:	10800044 	addi	r2,r2,1
80203610:	e0bffb15 	stw	r2,-20(fp)
80203614:	e0bffb17 	ldw	r2,-20(fp)
80203618:	10800210 	cmplti	r2,r2,8
8020361c:	103fe71e 	bne	r2,zero,802035bc <__reset+0xfa1e35bc>
        SCL_LOW(clk_base);  // clock log  
        SCL_DELAY;
    }
    
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
80203620:	e0bffc17 	ldw	r2,-16(fp)
80203624:	0007883a 	mov	r3,zero
80203628:	10c00035 	stwio	r3,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
8020362c:	e0bffd17 	ldw	r2,-12(fp)
80203630:	10800104 	addi	r2,r2,4
80203634:	1007883a 	mov	r3,r2
80203638:	00800044 	movi	r2,1
8020363c:	18800035 	stwio	r2,0(r3)
    if (bAck)
80203640:	e0bfff17 	ldw	r2,-4(fp)
80203644:	10000426 	beq	r2,zero,80203658 <i2c_read+0xec>
        SDA_LOW(data_base);
80203648:	e0bffd17 	ldw	r2,-12(fp)
8020364c:	0007883a 	mov	r3,zero
80203650:	10c00035 	stwio	r3,0(r2)
80203654:	00000306 	br	80203664 <i2c_read+0xf8>
    else
        SDA_HIGH(data_base);
80203658:	e0bffd17 	ldw	r2,-12(fp)
8020365c:	00c00044 	movi	r3,1
80203660:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base); // clock high
80203664:	e0bffc17 	ldw	r2,-16(fp)
80203668:	00c00044 	movi	r3,1
8020366c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high  delay
80203670:	01000044 	movi	r4,1
80203674:	0215ae00 	call	80215ae0 <usleep>
    SCL_LOW(clk_base); // clock low
80203678:	e0bffc17 	ldw	r2,-16(fp)
8020367c:	0007883a 	mov	r3,zero
80203680:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
80203684:	01000044 	movi	r4,1
80203688:	0215ae00 	call	80215ae0 <usleep>
    SDA_LOW(data_base);  // data low
8020368c:	e0bffd17 	ldw	r2,-12(fp)
80203690:	0007883a 	mov	r3,zero
80203694:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data low delay
80203698:	01000044 	movi	r4,1
8020369c:	0215ae00 	call	80215ae0 <usleep>
//    SDA_DIR_IN;  // set data read mode
    
    *pData = Data;
802036a0:	e0bffe17 	ldw	r2,-8(fp)
802036a4:	e0fffa03 	ldbu	r3,-24(fp)
802036a8:	10c00005 	stb	r3,0(r2)
}
802036ac:	0001883a 	nop
802036b0:	e037883a 	mov	sp,fp
802036b4:	dfc00117 	ldw	ra,4(sp)
802036b8:	df000017 	ldw	fp,0(sp)
802036bc:	dec00204 	addi	sp,sp,8
802036c0:	f800283a 	ret

802036c4 <bSetBoardLeds>:
 * @param [in] LedsMask  Mascara de leds a serem modificados
 *
 * @retval TRUE : Sucesso
 *
 */
bool bSetBoardLeds(bool bDRIVE, alt_u8 LedsMask){
802036c4:	defffd04 	addi	sp,sp,-12
802036c8:	df000215 	stw	fp,8(sp)
802036cc:	df000204 	addi	fp,sp,8
802036d0:	e13ffe15 	stw	r4,-8(fp)
802036d4:	2805883a 	mov	r2,r5
802036d8:	e0bfff05 	stb	r2,-4(fp)

  // Board LEDs state: ON = 0; OFF = 1;

  if (bDRIVE == LEDS_ON){
802036dc:	e0bffe17 	ldw	r2,-8(fp)
802036e0:	10800058 	cmpnei	r2,r2,1
802036e4:	1000071e 	bne	r2,zero,80203704 <bSetBoardLeds+0x40>
	LedsBoardControl &= (~LedsMask);
802036e8:	e0bfff03 	ldbu	r2,-4(fp)
802036ec:	0084303a 	nor	r2,zero,r2
802036f0:	1007883a 	mov	r3,r2
802036f4:	d0a01803 	ldbu	r2,-32672(gp)
802036f8:	1884703a 	and	r2,r3,r2
802036fc:	d0a01805 	stb	r2,-32672(gp)
80203700:	00000406 	br	80203714 <bSetBoardLeds+0x50>
  } else {
	LedsBoardControl |= LedsMask;
80203704:	d0e01803 	ldbu	r3,-32672(gp)
80203708:	e0bfff03 	ldbu	r2,-4(fp)
8020370c:	1884b03a 	or	r2,r3,r2
80203710:	d0a01805 	stb	r2,-32672(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BOARD_BASE, LedsBoardControl);
80203714:	d0a01803 	ldbu	r2,-32672(gp)
80203718:	10c03fcc 	andi	r3,r2,255
8020371c:	00a04034 	movhi	r2,33024
80203720:	10827404 	addi	r2,r2,2512
80203724:	10c00035 	stwio	r3,0(r2)

  return TRUE;
80203728:	00800044 	movi	r2,1
}
8020372c:	e037883a 	mov	sp,fp
80203730:	df000017 	ldw	fp,0(sp)
80203734:	dec00104 	addi	sp,sp,4
80203738:	f800283a 	ret

8020373c <bSetPainelLeds>:
 * @param [in] LedsMask  Mascara de leds a serem modificados
 *
 * @retval TRUE : Sucesso
 *
 */
bool bSetPainelLeds(bool bDRIVE, alt_u32 LedsMask){
8020373c:	defffd04 	addi	sp,sp,-12
80203740:	df000215 	stw	fp,8(sp)
80203744:	df000204 	addi	fp,sp,8
80203748:	e13ffe15 	stw	r4,-8(fp)
8020374c:	e17fff15 	stw	r5,-4(fp)

  // Painel LEDs state: ON = 1; OFF = 0;

  if (bDRIVE == LEDS_ON){
80203750:	e0bffe17 	ldw	r2,-8(fp)
80203754:	10800058 	cmpnei	r2,r2,1
80203758:	1000051e 	bne	r2,zero,80203770 <bSetPainelLeds+0x34>
	LedsPainelControl |= LedsMask;
8020375c:	d0e00017 	ldw	r3,-32768(gp)
80203760:	e0bfff17 	ldw	r2,-4(fp)
80203764:	1884b03a 	or	r2,r3,r2
80203768:	d0a00015 	stw	r2,-32768(gp)
8020376c:	00000506 	br	80203784 <bSetPainelLeds+0x48>
  } else {
	LedsPainelControl &= (~LedsMask);
80203770:	e0bfff17 	ldw	r2,-4(fp)
80203774:	0086303a 	nor	r3,zero,r2
80203778:	d0a00017 	ldw	r2,-32768(gp)
8020377c:	1884703a 	and	r2,r3,r2
80203780:	d0a00015 	stw	r2,-32768(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PAINEL_BASE, LedsPainelControl);
80203784:	d0a00017 	ldw	r2,-32768(gp)
80203788:	1007883a 	mov	r3,r2
8020378c:	00a04034 	movhi	r2,33024
80203790:	10824004 	addi	r2,r2,2304
80203794:	10c00035 	stwio	r3,0(r2)

  return TRUE;
80203798:	00800044 	movi	r2,1
}
8020379c:	e037883a 	mov	sp,fp
802037a0:	df000017 	ldw	fp,0(sp)
802037a4:	dec00104 	addi	sp,sp,4
802037a8:	f800283a 	ret

802037ac <msgdma_write_extended_descriptor>:
/*
 * This function is used for writing extended descriptors to the dispatcher.  
 It handles only 32-bit descriptors.
 */
static int msgdma_write_extended_descriptor(alt_u32 *csr_base,
		alt_u32 *descriptor_base, alt_msgdma_extended_descriptor *descriptor) {
802037ac:	defffc04 	addi	sp,sp,-16
802037b0:	df000315 	stw	fp,12(sp)
802037b4:	df000304 	addi	fp,sp,12
802037b8:	e13ffd15 	stw	r4,-12(fp)
802037bc:	e17ffe15 	stw	r5,-8(fp)
802037c0:	e1bfff15 	stw	r6,-4(fp)
	if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) &
802037c4:	e0bffd17 	ldw	r2,-12(fp)
802037c8:	10800037 	ldwio	r2,0(r2)
802037cc:	1080010c 	andi	r2,r2,4
802037d0:	10000226 	beq	r2,zero,802037dc <msgdma_write_extended_descriptor+0x30>
	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
		/*at least one descriptor buffer is full, returning so that this function
		 is non-blocking*/
		return -ENOSPC;
802037d4:	00bff904 	movi	r2,-28
802037d8:	00003d06 	br	802038d0 <msgdma_write_extended_descriptor+0x124>
	}

	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base,
802037dc:	e0bfff17 	ldw	r2,-4(fp)
802037e0:	10800017 	ldw	r2,0(r2)
802037e4:	1007883a 	mov	r3,r2
802037e8:	e0bffe17 	ldw	r2,-8(fp)
802037ec:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->read_address_low);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base,
802037f0:	e0bffe17 	ldw	r2,-8(fp)
802037f4:	10800104 	addi	r2,r2,4
802037f8:	e0ffff17 	ldw	r3,-4(fp)
802037fc:	18c00117 	ldw	r3,4(r3)
80203800:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->write_address_low);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base,
80203804:	e0bffe17 	ldw	r2,-8(fp)
80203808:	10800204 	addi	r2,r2,8
8020380c:	e0ffff17 	ldw	r3,-4(fp)
80203810:	18c00217 	ldw	r3,8(r3)
80203814:	10c00035 	stwio	r3,0(r2)
			descriptor->transfer_length);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(descriptor_base,
80203818:	e0bffe17 	ldw	r2,-8(fp)
8020381c:	10800304 	addi	r2,r2,12
80203820:	e0ffff17 	ldw	r3,-4(fp)
80203824:	18c0030b 	ldhu	r3,12(r3)
80203828:	18ffffcc 	andi	r3,r3,65535
8020382c:	10c0002d 	sthio	r3,0(r2)
			descriptor->sequence_number);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(descriptor_base,
80203830:	e0bffe17 	ldw	r2,-8(fp)
80203834:	10800384 	addi	r2,r2,14
80203838:	e0ffff17 	ldw	r3,-4(fp)
8020383c:	18c00383 	ldbu	r3,14(r3)
80203840:	18c03fcc 	andi	r3,r3,255
80203844:	10c00025 	stbio	r3,0(r2)
			descriptor->read_burst_count);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(descriptor_base,
80203848:	e0bffe17 	ldw	r2,-8(fp)
8020384c:	108003c4 	addi	r2,r2,15
80203850:	e0ffff17 	ldw	r3,-4(fp)
80203854:	18c003c3 	ldbu	r3,15(r3)
80203858:	18c03fcc 	andi	r3,r3,255
8020385c:	10c00025 	stbio	r3,0(r2)
			descriptor->write_burst_count);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(descriptor_base,
80203860:	e0bffe17 	ldw	r2,-8(fp)
80203864:	10800404 	addi	r2,r2,16
80203868:	e0ffff17 	ldw	r3,-4(fp)
8020386c:	18c0040b 	ldhu	r3,16(r3)
80203870:	18ffffcc 	andi	r3,r3,65535
80203874:	10c0002d 	sthio	r3,0(r2)
			descriptor->read_stride);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(descriptor_base,
80203878:	e0bffe17 	ldw	r2,-8(fp)
8020387c:	10800484 	addi	r2,r2,18
80203880:	e0ffff17 	ldw	r3,-4(fp)
80203884:	18c0048b 	ldhu	r3,18(r3)
80203888:	18ffffcc 	andi	r3,r3,65535
8020388c:	10c0002d 	sthio	r3,0(r2)
			descriptor->write_stride);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base,
80203890:	e0bffe17 	ldw	r2,-8(fp)
80203894:	10800504 	addi	r2,r2,20
80203898:	e0ffff17 	ldw	r3,-4(fp)
8020389c:	18c00517 	ldw	r3,20(r3)
802038a0:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->read_address_high);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base,
802038a4:	e0bffe17 	ldw	r2,-8(fp)
802038a8:	10800604 	addi	r2,r2,24
802038ac:	e0ffff17 	ldw	r3,-4(fp)
802038b0:	18c00617 	ldw	r3,24(r3)
802038b4:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->write_address_high);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(descriptor_base,
802038b8:	e0bffe17 	ldw	r2,-8(fp)
802038bc:	10800704 	addi	r2,r2,28
802038c0:	e0ffff17 	ldw	r3,-4(fp)
802038c4:	18c00717 	ldw	r3,28(r3)
802038c8:	10c00035 	stwio	r3,0(r2)
			descriptor->control);
	return 0;
802038cc:	0005883a 	mov	r2,zero
}
802038d0:	e037883a 	mov	sp,fp
802038d4:	df000017 	ldw	fp,0(sp)
802038d8:	dec00104 	addi	sp,sp,4
802038dc:	f800283a 	ret

802038e0 <msgdma_construct_extended_descriptor>:
static int msgdma_construct_extended_descriptor(alt_msgdma_dev *dev,
		alt_msgdma_extended_descriptor *descriptor, alt_u32 *read_address,
		alt_u32 *write_address, alt_u32 length, alt_u32 control,
		alt_u32 *read_address_high, alt_u32 *write_address_high,
		alt_u16 sequence_number, alt_u8 read_burst_count,
		alt_u8 write_burst_count, alt_u16 read_stride, alt_u16 write_stride) {
802038e0:	defff604 	addi	sp,sp,-40
802038e4:	df000915 	stw	fp,36(sp)
802038e8:	df000904 	addi	fp,sp,36
802038ec:	e13ff715 	stw	r4,-36(fp)
802038f0:	e17ff815 	stw	r5,-32(fp)
802038f4:	e1bff915 	stw	r6,-28(fp)
802038f8:	e1fffa15 	stw	r7,-24(fp)
802038fc:	e1800517 	ldw	r6,20(fp)
80203900:	e1400617 	ldw	r5,24(fp)
80203904:	e1000717 	ldw	r4,28(fp)
80203908:	e0c00817 	ldw	r3,32(fp)
8020390c:	e0800917 	ldw	r2,36(fp)
80203910:	e1bffb0d 	sth	r6,-20(fp)
80203914:	e17ffc05 	stb	r5,-16(fp)
80203918:	e13ffd05 	stb	r4,-12(fp)
8020391c:	e0fffe0d 	sth	r3,-8(fp)
80203920:	e0bfff0d 	sth	r2,-4(fp)
	if (dev->max_byte < length || dev->max_stride < read_stride
80203924:	e0bff717 	ldw	r2,-36(fp)
80203928:	10c01217 	ldw	r3,72(r2)
8020392c:	e0800117 	ldw	r2,4(fp)
80203930:	18801936 	bltu	r3,r2,80203998 <msgdma_construct_extended_descriptor+0xb8>
80203934:	e13ff717 	ldw	r4,-36(fp)
80203938:	20801317 	ldw	r2,76(r4)
8020393c:	20c01417 	ldw	r3,80(r4)
80203940:	e13ffe0b 	ldhu	r4,-8(fp)
80203944:	213fffcc 	andi	r4,r4,65535
80203948:	2015883a 	mov	r10,r4
8020394c:	0017883a 	mov	r11,zero
80203950:	1ac01136 	bltu	r3,r11,80203998 <msgdma_construct_extended_descriptor+0xb8>
80203954:	58c0011e 	bne	r11,r3,8020395c <msgdma_construct_extended_descriptor+0x7c>
80203958:	12800f36 	bltu	r2,r10,80203998 <msgdma_construct_extended_descriptor+0xb8>
			|| dev->max_stride < write_stride || dev->enhanced_features != 1) {
8020395c:	e13ff717 	ldw	r4,-36(fp)
80203960:	20801317 	ldw	r2,76(r4)
80203964:	20c01417 	ldw	r3,80(r4)
80203968:	e13fff0b 	ldhu	r4,-4(fp)
8020396c:	213fffcc 	andi	r4,r4,65535
80203970:	2011883a 	mov	r8,r4
80203974:	0013883a 	mov	r9,zero
80203978:	1a400736 	bltu	r3,r9,80203998 <msgdma_construct_extended_descriptor+0xb8>
8020397c:	48c0011e 	bne	r9,r3,80203984 <msgdma_construct_extended_descriptor+0xa4>
80203980:	12000536 	bltu	r2,r8,80203998 <msgdma_construct_extended_descriptor+0xb8>
80203984:	e0bff717 	ldw	r2,-36(fp)
80203988:	10801703 	ldbu	r2,92(r2)
8020398c:	10803fcc 	andi	r2,r2,255
80203990:	10800060 	cmpeqi	r2,r2,1
80203994:	1000021e 	bne	r2,zero,802039a0 <msgdma_construct_extended_descriptor+0xc0>
		return -EINVAL;
80203998:	00bffa84 	movi	r2,-22
8020399c:	00002306 	br	80203a2c <msgdma_construct_extended_descriptor+0x14c>
	}

	descriptor->read_address_low = read_address;
802039a0:	e0bff817 	ldw	r2,-32(fp)
802039a4:	e0fff917 	ldw	r3,-28(fp)
802039a8:	10c00015 	stw	r3,0(r2)
	descriptor->write_address_low = write_address;
802039ac:	e0bff817 	ldw	r2,-32(fp)
802039b0:	e0fffa17 	ldw	r3,-24(fp)
802039b4:	10c00115 	stw	r3,4(r2)
	descriptor->transfer_length = length;
802039b8:	e0bff817 	ldw	r2,-32(fp)
802039bc:	e0c00117 	ldw	r3,4(fp)
802039c0:	10c00215 	stw	r3,8(r2)
	descriptor->sequence_number = sequence_number;
802039c4:	e0bff817 	ldw	r2,-32(fp)
802039c8:	e0fffb0b 	ldhu	r3,-20(fp)
802039cc:	10c0030d 	sth	r3,12(r2)
	descriptor->read_burst_count = read_burst_count;
802039d0:	e0bff817 	ldw	r2,-32(fp)
802039d4:	e0fffc03 	ldbu	r3,-16(fp)
802039d8:	10c00385 	stb	r3,14(r2)
	descriptor->write_burst_count = write_burst_count;
802039dc:	e0bff817 	ldw	r2,-32(fp)
802039e0:	e0fffd03 	ldbu	r3,-12(fp)
802039e4:	10c003c5 	stb	r3,15(r2)
	descriptor->read_stride = read_stride;
802039e8:	e0bff817 	ldw	r2,-32(fp)
802039ec:	e0fffe0b 	ldhu	r3,-8(fp)
802039f0:	10c0040d 	sth	r3,16(r2)
	descriptor->write_stride = write_stride;
802039f4:	e0bff817 	ldw	r2,-32(fp)
802039f8:	e0ffff0b 	ldhu	r3,-4(fp)
802039fc:	10c0048d 	sth	r3,18(r2)
	descriptor->read_address_high = read_address_high;
80203a00:	e0bff817 	ldw	r2,-32(fp)
80203a04:	e0c00317 	ldw	r3,12(fp)
80203a08:	10c00515 	stw	r3,20(r2)
	descriptor->write_address_high = write_address_high;
80203a0c:	e0bff817 	ldw	r2,-32(fp)
80203a10:	e0c00417 	ldw	r3,16(fp)
80203a14:	10c00615 	stw	r3,24(r2)
	descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
80203a18:	e0800217 	ldw	r2,8(fp)
80203a1c:	10e00034 	orhi	r3,r2,32768
80203a20:	e0bff817 	ldw	r2,-32(fp)
80203a24:	10c00715 	stw	r3,28(r2)

	return 0;
80203a28:	0005883a 	mov	r2,zero

}
80203a2c:	e037883a 	mov	sp,fp
80203a30:	df000017 	ldw	fp,0(sp)
80203a34:	dec00104 	addi	sp,sp,4
80203a38:	f800283a 	ret

80203a3c <msgdma_descriptor_async_transfer>:
 * -EPERM -> operation not permitted due to descriptor type conflict
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
static int msgdma_descriptor_async_transfer(alt_msgdma_dev *dev,
		alt_msgdma_standard_descriptor *standard_desc,
		alt_msgdma_extended_descriptor *extended_desc) {
80203a3c:	defff004 	addi	sp,sp,-64
80203a40:	dfc00f15 	stw	ra,60(sp)
80203a44:	df000e15 	stw	fp,56(sp)
80203a48:	df000e04 	addi	fp,sp,56
80203a4c:	e13ffd15 	stw	r4,-12(fp)
80203a50:	e17ffe15 	stw	r5,-8(fp)
80203a54:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 control = 0;
80203a58:	e03ff315 	stw	zero,-52(fp)
	alt_irq_context context = 0;
80203a5c:	e03ff415 	stw	zero,-48(fp)
	alt_u16 counter = 0;
80203a60:	e03ff20d 	sth	zero,-56(fp)
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
80203a64:	e0bffd17 	ldw	r2,-12(fp)
80203a68:	10800317 	ldw	r2,12(r2)
80203a6c:	10800204 	addi	r2,r2,8
80203a70:	10800037 	ldwio	r2,0(r2)
		alt_msgdma_standard_descriptor *standard_desc,
		alt_msgdma_extended_descriptor *extended_desc) {
	alt_u32 control = 0;
	alt_irq_context context = 0;
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
80203a74:	10bfffcc 	andi	r2,r2,65535
80203a78:	e0bff515 	stw	r2,-44(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
80203a7c:	e0bffd17 	ldw	r2,-12(fp)
80203a80:	10800317 	ldw	r2,12(r2)
80203a84:	10800204 	addi	r2,r2,8
80203a88:	10800037 	ldwio	r2,0(r2)
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
80203a8c:	1004d43a 	srli	r2,r2,16
80203a90:	e0bff615 	stw	r2,-40(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if ((dev->descriptor_fifo_depth <= fifo_write_fill_level)
80203a94:	e0bffd17 	ldw	r2,-12(fp)
80203a98:	10800917 	ldw	r2,36(r2)
80203a9c:	e0fff617 	ldw	r3,-40(fp)
80203aa0:	1880042e 	bgeu	r3,r2,80203ab4 <msgdma_descriptor_async_transfer+0x78>
			|| (dev->descriptor_fifo_depth <= fifo_read_fill_level)) {
80203aa4:	e0bffd17 	ldw	r2,-12(fp)
80203aa8:	10800917 	ldw	r2,36(r2)
80203aac:	e0fff517 	ldw	r3,-44(fp)
80203ab0:	18800236 	bltu	r3,r2,80203abc <msgdma_descriptor_async_transfer+0x80>
		/*at least one write or read FIFO descriptor buffer is full,
		 returning so that this function is non-blocking*/
		return -ENOSPC;
80203ab4:	00bff904 	movi	r2,-28
80203ab8:	00007d06 	br	80203cb0 <msgdma_descriptor_async_transfer+0x274>
	ALT_SEM_PEND(dev->regs_lock, 0);

	/* Stop the msgdma dispatcher from issuing more descriptors to the
	 read or write masters  */
	/* stop issuing more descriptors */
	control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
80203abc:	00800804 	movi	r2,32
80203ac0:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80203ac4:	0005303a 	rdctl	r2,status
80203ac8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80203acc:	e0fff717 	ldw	r3,-36(fp)
80203ad0:	00bfff84 	movi	r2,-2
80203ad4:	1884703a 	and	r2,r3,r2
80203ad8:	1001703a 	wrctl	status,r2
  
  return context;
80203adc:	e0bff717 	ldw	r2,-36(fp)
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
80203ae0:	e0bff415 	stw	r2,-48(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
80203ae4:	e0bffd17 	ldw	r2,-12(fp)
80203ae8:	10800317 	ldw	r2,12(r2)
80203aec:	10800104 	addi	r2,r2,4
80203af0:	e0fff317 	ldw	r3,-52(fp)
80203af4:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
80203af8:	e0bffd17 	ldw	r2,-12(fp)
80203afc:	10800317 	ldw	r2,12(r2)
80203b00:	e0fffd17 	ldw	r3,-12(fp)
80203b04:	18c00317 	ldw	r3,12(r3)
80203b08:	18c00037 	ldwio	r3,0(r3)
80203b0c:	10c00035 	stwio	r3,0(r2)
80203b10:	e0bff417 	ldw	r2,-48(fp)
80203b14:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80203b18:	e0bffc17 	ldw	r2,-16(fp)
80203b1c:	1001703a 	wrctl	status,r2
			IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

	if (NULL != standard_desc && NULL == extended_desc) {
80203b20:	e0bffe17 	ldw	r2,-8(fp)
80203b24:	10000826 	beq	r2,zero,80203b48 <msgdma_descriptor_async_transfer+0x10c>
80203b28:	e0bfff17 	ldw	r2,-4(fp)
80203b2c:	1000061e 	bne	r2,zero,80203b48 <msgdma_descriptor_async_transfer+0x10c>
		counter = 0; /* reset counter */
80203b30:	e03ff20d 	sth	zero,-56(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
#if DEBUG_ON
		debug(fp, "invalid dma descriptor option\n");
80203b34:	012008b4 	movhi	r4,32802
80203b38:	212bff04 	addi	r4,r4,-20484
80203b3c:	02053e00 	call	802053e0 <puts>
		 * registers semaphore so that other threads can access the
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return -ETIME;
80203b40:	00bff084 	movi	r2,-62
80203b44:	00005a06 	br	80203cb0 <msgdma_descriptor_async_transfer+0x274>
	} else if (NULL == standard_desc && NULL != extended_desc) {
80203b48:	e0bffe17 	ldw	r2,-8(fp)
80203b4c:	10001b1e 	bne	r2,zero,80203bbc <msgdma_descriptor_async_transfer+0x180>
80203b50:	e0bfff17 	ldw	r2,-4(fp)
80203b54:	10001926 	beq	r2,zero,80203bbc <msgdma_descriptor_async_transfer+0x180>
		counter = 0; /* reset counter */
80203b58:	e03ff20d 	sth	zero,-56(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
80203b5c:	00000d06 	br	80203b94 <msgdma_descriptor_async_transfer+0x158>
				!= msgdma_write_extended_descriptor(dev->csr_base,
						dev->descriptor_base, extended_desc)) {
			alt_busy_sleep(1); /* delay 1us */
80203b60:	01000044 	movi	r4,1
80203b64:	02150d00 	call	802150d0 <alt_busy_sleep>
			if (5000 <= counter) /* time_out if waiting longer than 5 msec */
80203b68:	e0bff20b 	ldhu	r2,-56(fp)
80203b6c:	1084e230 	cmpltui	r2,r2,5000
80203b70:	1000051e 	bne	r2,zero,80203b88 <msgdma_descriptor_async_transfer+0x14c>
			{
				#if DEBUG_ON
					debug(fp, "time out after 5 msec while waiting free FIFO buffer for storing extended descriptor\n");
80203b74:	012008b4 	movhi	r4,32802
80203b78:	212c0704 	addi	r4,r4,-20452
80203b7c:	02053e00 	call	802053e0 <puts>
				 * registers semaphore so that other threads can access the
				 * registers.
				 */
				ALT_SEM_POST(dev->regs_lock);

				return -ETIME;
80203b80:	00bff084 	movi	r2,-62
80203b84:	00004a06 	br	80203cb0 <msgdma_descriptor_async_transfer+0x274>
			}
			counter++;
80203b88:	e0bff20b 	ldhu	r2,-56(fp)
80203b8c:	10800044 	addi	r2,r2,1
80203b90:	e0bff20d 	sth	r2,-56(fp)
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
				!= msgdma_write_extended_descriptor(dev->csr_base,
80203b94:	e0bffd17 	ldw	r2,-12(fp)
80203b98:	10c00317 	ldw	r3,12(r2)
80203b9c:	e0bffd17 	ldw	r2,-12(fp)
80203ba0:	10800417 	ldw	r2,16(r2)
80203ba4:	e1bfff17 	ldw	r6,-4(fp)
80203ba8:	100b883a 	mov	r5,r2
80203bac:	1809883a 	mov	r4,r3
80203bb0:	02037ac0 	call	802037ac <msgdma_write_extended_descriptor>
		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
80203bb4:	103fea1e 	bne	r2,zero,80203b60 <__reset+0xfa1e3b60>
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
80203bb8:	00000206 	br	80203bc4 <msgdma_descriptor_async_transfer+0x188>
		 * semaphore so that other threads can access the registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		/* operation not permitted due to descriptor type conflict */
		return -EPERM;
80203bbc:	00bfffc4 	movi	r2,-1
80203bc0:	00003b06 	br	80203cb0 <msgdma_descriptor_async_transfer+0x274>
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up controller to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if (dev->callback) {
80203bc4:	e0bffd17 	ldw	r2,-12(fp)
80203bc8:	10800b17 	ldw	r2,44(r2)
80203bcc:	10001c26 	beq	r2,zero,80203c40 <msgdma_descriptor_async_transfer+0x204>

		control |= (dev->control |
80203bd0:	e0bffd17 	ldw	r2,-12(fp)
80203bd4:	10c00d17 	ldw	r3,52(r2)
80203bd8:	e0bff317 	ldw	r2,-52(fp)
80203bdc:	1884b03a 	or	r2,r3,r2
80203be0:	10800514 	ori	r2,r2,20
80203be4:	e0bff315 	stw	r2,-52(fp)
		ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
		ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
80203be8:	e0fff317 	ldw	r3,-52(fp)
80203bec:	00bff7c4 	movi	r2,-33
80203bf0:	1884703a 	and	r2,r3,r2
80203bf4:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80203bf8:	0005303a 	rdctl	r2,status
80203bfc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80203c00:	e0fff917 	ldw	r3,-28(fp)
80203c04:	00bfff84 	movi	r2,-2
80203c08:	1884703a 	and	r2,r3,r2
80203c0c:	1001703a 	wrctl	status,r2
  
  return context;
80203c10:	e0bff917 	ldw	r2,-28(fp)
		/* making sure the read-modify-write below can't be pre-empted */
		context = alt_irq_disable_all();
80203c14:	e0bff415 	stw	r2,-48(fp)
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
80203c18:	e0bffd17 	ldw	r2,-12(fp)
80203c1c:	10800317 	ldw	r2,12(r2)
80203c20:	10800104 	addi	r2,r2,4
80203c24:	e0fff317 	ldw	r3,-52(fp)
80203c28:	10c00035 	stwio	r3,0(r2)
80203c2c:	e0bff417 	ldw	r2,-48(fp)
80203c30:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80203c34:	e0bffb17 	ldw	r2,-20(fp)
80203c38:	1001703a 	wrctl	status,r2
80203c3c:	00001b06 	br	80203cac <msgdma_descriptor_async_transfer+0x270>
	 *   - Run
	 *   - Stop on an error with any particular descriptor
	 *   - Disable interrupt generation
	 */
	else {
		control |= (dev->control |
80203c40:	e0bffd17 	ldw	r2,-12(fp)
80203c44:	10c00d17 	ldw	r3,52(r2)
80203c48:	e0bff317 	ldw	r2,-52(fp)
80203c4c:	1884b03a 	or	r2,r3,r2
80203c50:	10800114 	ori	r2,r2,4
80203c54:	e0bff315 	stw	r2,-52(fp)
		ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
		control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK)
80203c58:	e0fff317 	ldw	r3,-52(fp)
80203c5c:	00bff3c4 	movi	r2,-49
80203c60:	1884703a 	and	r2,r3,r2
80203c64:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80203c68:	0005303a 	rdctl	r2,status
80203c6c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80203c70:	e0fffa17 	ldw	r3,-24(fp)
80203c74:	00bfff84 	movi	r2,-2
80203c78:	1884703a 	and	r2,r3,r2
80203c7c:	1001703a 	wrctl	status,r2
  
  return context;
80203c80:	e0bffa17 	ldw	r2,-24(fp)
				& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		/* making sure the read-modify-write below can't be pre-empted */
		context = alt_irq_disable_all();
80203c84:	e0bff415 	stw	r2,-48(fp)
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
80203c88:	e0bffd17 	ldw	r2,-12(fp)
80203c8c:	10800317 	ldw	r2,12(r2)
80203c90:	10800104 	addi	r2,r2,4
80203c94:	e0fff317 	ldw	r3,-52(fp)
80203c98:	10c00035 	stwio	r3,0(r2)
80203c9c:	e0bff417 	ldw	r2,-48(fp)
80203ca0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80203ca4:	e0bff817 	ldw	r2,-32(fp)
80203ca8:	1001703a 	wrctl	status,r2
	 * Now that access to the registers is complete, release the registers
	 * semaphore so that other threads can access the registers.
	 */
	ALT_SEM_POST(dev->regs_lock);

	return 0;
80203cac:	0005883a 	mov	r2,zero
}
80203cb0:	e037883a 	mov	sp,fp
80203cb4:	dfc00117 	ldw	ra,4(sp)
80203cb8:	df000017 	ldw	fp,0(sp)
80203cbc:	dec00204 	addi	sp,sp,8
80203cc0:	f800283a 	ret

80203cc4 <msgdma_descriptor_sync_transfer>:
 * -EPERM -> operation not permitted due to descriptor type conflict
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
static int msgdma_descriptor_sync_transfer(alt_msgdma_dev *dev,
		alt_msgdma_standard_descriptor *standard_desc,
		alt_msgdma_extended_descriptor *extended_desc) {
80203cc4:	defff004 	addi	sp,sp,-64
80203cc8:	dfc00f15 	stw	ra,60(sp)
80203ccc:	df000e15 	stw	fp,56(sp)
80203cd0:	df000e04 	addi	fp,sp,56
80203cd4:	e13ffd15 	stw	r4,-12(fp)
80203cd8:	e17ffe15 	stw	r5,-8(fp)
80203cdc:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 control = 0;
80203ce0:	e03ff615 	stw	zero,-40(fp)
	alt_irq_context context = 0;
80203ce4:	e03ff715 	stw	zero,-36(fp)
	alt_u32 csr_status = 0;
80203ce8:	e03ff215 	stw	zero,-56(fp)
	alt_u16 counter = 0;
80203cec:	e03ff30d 	sth	zero,-52(fp)
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
80203cf0:	e0bffd17 	ldw	r2,-12(fp)
80203cf4:	10800317 	ldw	r2,12(r2)
80203cf8:	10800204 	addi	r2,r2,8
80203cfc:	10800037 	ldwio	r2,0(r2)
		alt_msgdma_extended_descriptor *extended_desc) {
	alt_u32 control = 0;
	alt_irq_context context = 0;
	alt_u32 csr_status = 0;
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
80203d00:	10bfffcc 	andi	r2,r2,65535
80203d04:	e0bff415 	stw	r2,-48(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
80203d08:	e0bffd17 	ldw	r2,-12(fp)
80203d0c:	10800317 	ldw	r2,12(r2)
80203d10:	10800204 	addi	r2,r2,8
80203d14:	10800037 	ldwio	r2,0(r2)
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
80203d18:	1004d43a 	srli	r2,r2,16
80203d1c:	e0bff515 	stw	r2,-44(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
	alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK |
80203d20:	00807804 	movi	r2,480
80203d24:	e0bff815 	stw	r2,-32(fp)
	ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
	ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
	ALTERA_MSGDMA_CSR_RESET_STATE_MASK;

	/* Wait for available FIFO buffer to store new descriptor*/
	while ((dev->descriptor_fifo_depth <= fifo_write_fill_level)
80203d28:	00002006 	br	80203dac <msgdma_descriptor_sync_transfer+0xe8>
			|| (dev->descriptor_fifo_depth <= fifo_read_fill_level)) {
		alt_busy_sleep(1); /* delay 1us */
80203d2c:	01000044 	movi	r4,1
80203d30:	02150d00 	call	802150d0 <alt_busy_sleep>
#if DEBUG_ON
		fprintf(fp,"\n-- DMA can't write in the descriptor \n ");
80203d34:	d0a01917 	ldw	r2,-32668(gp)
80203d38:	100f883a 	mov	r7,r2
80203d3c:	01800a04 	movi	r6,40
80203d40:	01400044 	movi	r5,1
80203d44:	012008b4 	movhi	r4,32802
80203d48:	212c1d04 	addi	r4,r4,-20364
80203d4c:	02051380 	call	80205138 <fwrite>
#endif
		if (5000 <= counter) /* time_out if waiting longer than 5 msec */
80203d50:	e0bff30b 	ldhu	r2,-52(fp)
80203d54:	1084e230 	cmpltui	r2,r2,5000
80203d58:	1000051e 	bne	r2,zero,80203d70 <msgdma_descriptor_sync_transfer+0xac>
		{
#if DEBUG_ON
		debug(fp, "time out after 5 msec while waiting free FIFO buffer for storing descriptor\n");
80203d5c:	012008b4 	movhi	r4,32802
80203d60:	212c2804 	addi	r4,r4,-20320
80203d64:	02053e00 	call	802053e0 <puts>
#endif
			return -ETIME;
80203d68:	00bff084 	movi	r2,-62
80203d6c:	0000a206 	br	80203ff8 <msgdma_descriptor_sync_transfer+0x334>
		}
		counter++;
80203d70:	e0bff30b 	ldhu	r2,-52(fp)
80203d74:	10800044 	addi	r2,r2,1
80203d78:	e0bff30d 	sth	r2,-52(fp)
		fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
80203d7c:	e0bffd17 	ldw	r2,-12(fp)
80203d80:	10800317 	ldw	r2,12(r2)
80203d84:	10800204 	addi	r2,r2,8
80203d88:	10800037 	ldwio	r2,0(r2)
		debug(fp, "time out after 5 msec while waiting free FIFO buffer for storing descriptor\n");
#endif
			return -ETIME;
		}
		counter++;
		fifo_read_fill_level = (
80203d8c:	10bfffcc 	andi	r2,r2,65535
80203d90:	e0bff415 	stw	r2,-48(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
		fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
80203d94:	e0bffd17 	ldw	r2,-12(fp)
80203d98:	10800317 	ldw	r2,12(r2)
80203d9c:	10800204 	addi	r2,r2,8
80203da0:	10800037 	ldwio	r2,0(r2)
		counter++;
		fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
		fifo_write_fill_level = (
80203da4:	1004d43a 	srli	r2,r2,16
80203da8:	e0bff515 	stw	r2,-44(fp)
	ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
	ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
	ALTERA_MSGDMA_CSR_RESET_STATE_MASK;

	/* Wait for available FIFO buffer to store new descriptor*/
	while ((dev->descriptor_fifo_depth <= fifo_write_fill_level)
80203dac:	e0bffd17 	ldw	r2,-12(fp)
80203db0:	10800917 	ldw	r2,36(r2)
80203db4:	e0fff517 	ldw	r3,-44(fp)
80203db8:	18bfdc2e 	bgeu	r3,r2,80203d2c <__reset+0xfa1e3d2c>
			|| (dev->descriptor_fifo_depth <= fifo_read_fill_level)) {
80203dbc:	e0bffd17 	ldw	r2,-12(fp)
80203dc0:	10800917 	ldw	r2,36(r2)
80203dc4:	e0fff417 	ldw	r3,-48(fp)
80203dc8:	18bfd82e 	bgeu	r3,r2,80203d2c <__reset+0xfa1e3d2c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80203dcc:	0005303a 	rdctl	r2,status
80203dd0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80203dd4:	e0fffc17 	ldw	r3,-16(fp)
80203dd8:	00bfff84 	movi	r2,-2
80203ddc:	1884703a 	and	r2,r3,r2
80203de0:	1001703a 	wrctl	status,r2
  
  return context;
80203de4:	e0bffc17 	ldw	r2,-16(fp)
	ALT_SEM_PEND(dev->regs_lock, 0);

	/* Stop the msgdma dispatcher from issuing more descriptors to the
	 read or write masters  */
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
80203de8:	e0bff715 	stw	r2,-36(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
80203dec:	e0bffd17 	ldw	r2,-12(fp)
80203df0:	10800317 	ldw	r2,12(r2)
80203df4:	10800104 	addi	r2,r2,4
80203df8:	00c00804 	movi	r3,32
80203dfc:	10c00035 	stwio	r3,0(r2)
			ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
80203e00:	e0bffd17 	ldw	r2,-12(fp)
80203e04:	10800317 	ldw	r2,12(r2)
80203e08:	e0fffd17 	ldw	r3,-12(fp)
80203e0c:	18c00317 	ldw	r3,12(r3)
80203e10:	18c00037 	ldwio	r3,0(r3)
80203e14:	10c00035 	stwio	r3,0(r2)
			IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

	if (NULL != standard_desc && NULL == extended_desc) {
80203e18:	e0bffe17 	ldw	r2,-8(fp)
80203e1c:	10000826 	beq	r2,zero,80203e40 <msgdma_descriptor_sync_transfer+0x17c>
80203e20:	e0bfff17 	ldw	r2,-4(fp)
80203e24:	1000061e 	bne	r2,zero,80203e40 <msgdma_descriptor_sync_transfer+0x17c>
		counter = 0; /* reset counter */
80203e28:	e03ff30d 	sth	zero,-52(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		#if DEBUG_ON
			debug(fp, "invalid dma descriptor option\n");
80203e2c:	012008b4 	movhi	r4,32802
80203e30:	212bff04 	addi	r4,r4,-20484
80203e34:	02053e00 	call	802053e0 <puts>
		 * registers semaphore so that other threads can access the
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return -ETIME;
80203e38:	00bff084 	movi	r2,-62
80203e3c:	00006e06 	br	80203ff8 <msgdma_descriptor_sync_transfer+0x334>
	} else if (NULL == standard_desc && NULL != extended_desc) {
80203e40:	e0bffe17 	ldw	r2,-8(fp)
80203e44:	10001b1e 	bne	r2,zero,80203eb4 <msgdma_descriptor_sync_transfer+0x1f0>
80203e48:	e0bfff17 	ldw	r2,-4(fp)
80203e4c:	10001926 	beq	r2,zero,80203eb4 <msgdma_descriptor_sync_transfer+0x1f0>
		counter = 0; /* reset counter */
80203e50:	e03ff30d 	sth	zero,-52(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
80203e54:	00000d06 	br	80203e8c <msgdma_descriptor_sync_transfer+0x1c8>
				!= msgdma_write_extended_descriptor(dev->csr_base,
						dev->descriptor_base, extended_desc)) {
			alt_busy_sleep(1); /* delay 1us */
80203e58:	01000044 	movi	r4,1
80203e5c:	02150d00 	call	802150d0 <alt_busy_sleep>
			if (5000 <= counter) /* time_out if waiting longer than 5 msec */
80203e60:	e0bff30b 	ldhu	r2,-52(fp)
80203e64:	1084e230 	cmpltui	r2,r2,5000
80203e68:	1000051e 	bne	r2,zero,80203e80 <msgdma_descriptor_sync_transfer+0x1bc>
			{
				#if DEBUG_ON
					debug(fp, "time out after 5 msec while writing extended descriptor to FIFO\n");
80203e6c:	012008b4 	movhi	r4,32802
80203e70:	212c3b04 	addi	r4,r4,-20244
80203e74:	02053e00 	call	802053e0 <puts>
				 * registers semaphore so that other threads can access the
				 * registers.
				 */
				ALT_SEM_POST(dev->regs_lock);

				return -ETIME;
80203e78:	00bff084 	movi	r2,-62
80203e7c:	00005e06 	br	80203ff8 <msgdma_descriptor_sync_transfer+0x334>
			}
			counter++;
80203e80:	e0bff30b 	ldhu	r2,-52(fp)
80203e84:	10800044 	addi	r2,r2,1
80203e88:	e0bff30d 	sth	r2,-52(fp)
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
				!= msgdma_write_extended_descriptor(dev->csr_base,
80203e8c:	e0bffd17 	ldw	r2,-12(fp)
80203e90:	10c00317 	ldw	r3,12(r2)
80203e94:	e0bffd17 	ldw	r2,-12(fp)
80203e98:	10800417 	ldw	r2,16(r2)
80203e9c:	e1bfff17 	ldw	r6,-4(fp)
80203ea0:	100b883a 	mov	r5,r2
80203ea4:	1809883a 	mov	r4,r3
80203ea8:	02037ac0 	call	802037ac <msgdma_write_extended_descriptor>
		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
80203eac:	103fea1e 	bne	r2,zero,80203e58 <__reset+0xfa1e3e58>
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
80203eb0:	00000206 	br	80203ebc <msgdma_descriptor_sync_transfer+0x1f8>
		 * semaphore so that other threads can access the registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		/* operation not permitted due to descriptor type conflict */
		return -EPERM;
80203eb4:	00bfffc4 	movi	r2,-1
80203eb8:	00004f06 	br	80203ff8 <msgdma_descriptor_sync_transfer+0x334>
	 * Set up msgdma controller to:
	 * - Disable interrupt generation
	 * - Run once a valid descriptor is written to controller
	 * - Stop on an error with any particular descriptor
	 */
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
80203ebc:	e0bffd17 	ldw	r2,-12(fp)
80203ec0:	10800317 	ldw	r2,12(r2)
80203ec4:	10800104 	addi	r2,r2,4
80203ec8:	e0fffd17 	ldw	r3,-12(fp)
80203ecc:	19000d17 	ldw	r4,52(r3)
80203ed0:	00fff2c4 	movi	r3,-53
80203ed4:	20c6703a 	and	r3,r4,r3
80203ed8:	18c00114 	ori	r3,r3,4
80203edc:	10c00035 	stwio	r3,0(r2)
80203ee0:	e0bff717 	ldw	r2,-36(fp)
80203ee4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80203ee8:	e0bffb17 	ldw	r2,-20(fp)
80203eec:	1001703a 	wrctl	status,r2
			(dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK ) & (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK));

	alt_irq_enable_all(context);

	counter = 0; /* reset counter */
80203ef0:	e03ff30d 	sth	zero,-52(fp)

	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
80203ef4:	e0bffd17 	ldw	r2,-12(fp)
80203ef8:	10800317 	ldw	r2,12(r2)
80203efc:	10800037 	ldwio	r2,0(r2)
80203f00:	e0bff215 	stw	r2,-56(fp)

	/* Wait for any pending transfers to complete or checking any errors or
	 conditions causing descriptor to stop dispatching */
	while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK)) {
80203f04:	00001106 	br	80203f4c <msgdma_descriptor_sync_transfer+0x288>
		alt_busy_sleep(1); /* delay 1us */
80203f08:	01000044 	movi	r4,1
80203f0c:	02150d00 	call	802150d0 <alt_busy_sleep>
		if (5000 <= counter) /* time_out if waiting longer than 5 msec */
80203f10:	e0bff30b 	ldhu	r2,-52(fp)
80203f14:	1084e230 	cmpltui	r2,r2,5000
80203f18:	1000051e 	bne	r2,zero,80203f30 <msgdma_descriptor_sync_transfer+0x26c>
		{
			#if DEBUG_ON
				debug(fp, "time out after 5 msec while waiting for any pending transfer complete\n");
80203f1c:	012008b4 	movhi	r4,32802
80203f20:	212c4b04 	addi	r4,r4,-20180
80203f24:	02053e00 	call	802053e0 <puts>
			 * Now that access to the registers is complete, release the registers
			 * semaphore so that other threads can access the registers.
			 */
			ALT_SEM_POST(dev->regs_lock);

			return -ETIME;
80203f28:	00bff084 	movi	r2,-62
80203f2c:	00003206 	br	80203ff8 <msgdma_descriptor_sync_transfer+0x334>
		}
		counter++;
80203f30:	e0bff30b 	ldhu	r2,-52(fp)
80203f34:	10800044 	addi	r2,r2,1
80203f38:	e0bff30d 	sth	r2,-52(fp)
		csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
80203f3c:	e0bffd17 	ldw	r2,-12(fp)
80203f40:	10800317 	ldw	r2,12(r2)
80203f44:	10800037 	ldwio	r2,0(r2)
80203f48:	e0bff215 	stw	r2,-56(fp)

	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);

	/* Wait for any pending transfers to complete or checking any errors or
	 conditions causing descriptor to stop dispatching */
	while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK)) {
80203f4c:	e0fff217 	ldw	r3,-56(fp)
80203f50:	e0bff817 	ldw	r2,-32(fp)
80203f54:	1884703a 	and	r2,r3,r2
80203f58:	1000031e 	bne	r2,zero,80203f68 <msgdma_descriptor_sync_transfer+0x2a4>
80203f5c:	e0bff217 	ldw	r2,-56(fp)
80203f60:	1080004c 	andi	r2,r2,1
80203f64:	103fe81e 	bne	r2,zero,80203f08 <__reset+0xfa1e3f08>
		csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
	}

	/*Errors or conditions causing the dispatcher stopping issuing read/write
	 commands to masters*/
	if (0 != (csr_status & error)) {
80203f68:	e0fff217 	ldw	r3,-56(fp)
80203f6c:	e0bff817 	ldw	r2,-32(fp)
80203f70:	1884703a 	and	r2,r3,r2
80203f74:	10000226 	beq	r2,zero,80203f80 <msgdma_descriptor_sync_transfer+0x2bc>
		 * Now that access to the registers is complete, release the registers
		 * semaphore so that other threads can access the registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return error;
80203f78:	e0bff817 	ldw	r2,-32(fp)
80203f7c:	00001e06 	br	80203ff8 <msgdma_descriptor_sync_transfer+0x334>
	}

	/* Stop the msgdma dispatcher from issuing more descriptors to the
	 read or write masters  */
	/* stop issuing more descriptors */
	control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) |
80203f80:	e0bffd17 	ldw	r2,-12(fp)
80203f84:	10800317 	ldw	r2,12(r2)
80203f88:	10800104 	addi	r2,r2,4
80203f8c:	10800037 	ldwio	r2,0(r2)
80203f90:	10800814 	ori	r2,r2,32
80203f94:	e0bff615 	stw	r2,-40(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80203f98:	0005303a 	rdctl	r2,status
80203f9c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80203fa0:	e0fff917 	ldw	r3,-28(fp)
80203fa4:	00bfff84 	movi	r2,-2
80203fa8:	1884703a 	and	r2,r3,r2
80203fac:	1001703a 	wrctl	status,r2
  
  return context;
80203fb0:	e0bff917 	ldw	r2,-28(fp)
	ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
80203fb4:	e0bff715 	stw	r2,-36(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
80203fb8:	e0bffd17 	ldw	r2,-12(fp)
80203fbc:	10800317 	ldw	r2,12(r2)
80203fc0:	10800104 	addi	r2,r2,4
80203fc4:	e0fff617 	ldw	r3,-40(fp)
80203fc8:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
80203fcc:	e0bffd17 	ldw	r2,-12(fp)
80203fd0:	10800317 	ldw	r2,12(r2)
80203fd4:	e0fffd17 	ldw	r3,-12(fp)
80203fd8:	18c00317 	ldw	r3,12(r3)
80203fdc:	18c00037 	ldwio	r3,0(r3)
80203fe0:	10c00035 	stwio	r3,0(r2)
80203fe4:	e0bff717 	ldw	r2,-36(fp)
80203fe8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80203fec:	e0bffa17 	ldw	r2,-24(fp)
80203ff0:	1001703a 	wrctl	status,r2
	 * Now that access to the registers is complete, release the registers
	 * semaphore so that other threads can access the registers.
	 */
	ALT_SEM_POST(dev->regs_lock);

	return 0;
80203ff4:	0005883a 	mov	r2,zero

}
80203ff8:	e037883a 	mov	sp,fp
80203ffc:	dfc00117 	ldw	ra,4(sp)
80204000:	df000017 	ldw	fp,0(sp)
80204004:	dec00204 	addi	sp,sp,8
80204008:	f800283a 	ret

8020400c <iMsgdmaConstructExtendedMmToMmDescriptor>:
int iMsgdmaConstructExtendedMmToMmDescriptor(alt_msgdma_dev *pxDev,
		alt_msgdma_extended_descriptor *pxDescriptor, alt_u32 *puliReadAddress,
		alt_u32 *puliWriteAddress, alt_u32 uliLength, alt_u32 uliControl,
		alt_u32 *puliReadAddressHigh, alt_u32 *puliWriteAddressHigh,
		alt_u16 usiSequenceNumber, alt_u8 ucReadBurstCount,
		alt_u8 ucWriteBurstCount, alt_u16 usiReadStride, alt_u16 usiWriteStride) {
8020400c:	deffec04 	addi	sp,sp,-80
80204010:	dfc01315 	stw	ra,76(sp)
80204014:	df001215 	stw	fp,72(sp)
80204018:	df001204 	addi	fp,sp,72
8020401c:	e13ff715 	stw	r4,-36(fp)
80204020:	e17ff815 	stw	r5,-32(fp)
80204024:	e1bff915 	stw	r6,-28(fp)
80204028:	e1fffa15 	stw	r7,-24(fp)
8020402c:	e1800617 	ldw	r6,24(fp)
80204030:	e1400717 	ldw	r5,28(fp)
80204034:	e1000817 	ldw	r4,32(fp)
80204038:	e0c00917 	ldw	r3,36(fp)
8020403c:	e0800a17 	ldw	r2,40(fp)
80204040:	e1bffb0d 	sth	r6,-20(fp)
80204044:	e17ffc05 	stb	r5,-16(fp)
80204048:	e13ffd05 	stb	r4,-12(fp)
8020404c:	e0fffe0d 	sth	r3,-8(fp)
80204050:	e0bfff0d 	sth	r2,-4(fp)

	return msgdma_construct_extended_descriptor(pxDev, pxDescriptor,
80204054:	e0bffb0b 	ldhu	r2,-20(fp)
80204058:	e0fffc03 	ldbu	r3,-16(fp)
8020405c:	e13ffd03 	ldbu	r4,-12(fp)
80204060:	e17ffe0b 	ldhu	r5,-8(fp)
80204064:	e1bfff0b 	ldhu	r6,-4(fp)
80204068:	d9800815 	stw	r6,32(sp)
8020406c:	d9400715 	stw	r5,28(sp)
80204070:	d9000615 	stw	r4,24(sp)
80204074:	d8c00515 	stw	r3,20(sp)
80204078:	d8800415 	stw	r2,16(sp)
8020407c:	e0800517 	ldw	r2,20(fp)
80204080:	d8800315 	stw	r2,12(sp)
80204084:	e0800417 	ldw	r2,16(fp)
80204088:	d8800215 	stw	r2,8(sp)
8020408c:	e0800317 	ldw	r2,12(fp)
80204090:	d8800115 	stw	r2,4(sp)
80204094:	e0800217 	ldw	r2,8(fp)
80204098:	d8800015 	stw	r2,0(sp)
8020409c:	e1fffa17 	ldw	r7,-24(fp)
802040a0:	e1bff917 	ldw	r6,-28(fp)
802040a4:	e17ff817 	ldw	r5,-32(fp)
802040a8:	e13ff717 	ldw	r4,-36(fp)
802040ac:	02038e00 	call	802038e0 <msgdma_construct_extended_descriptor>
			puliReadAddress, puliWriteAddress, uliLength, uliControl,
			puliReadAddressHigh, puliWriteAddressHigh, usiSequenceNumber,
			ucReadBurstCount, ucWriteBurstCount, usiReadStride, usiWriteStride);

}
802040b0:	e037883a 	mov	sp,fp
802040b4:	dfc00117 	ldw	ra,4(sp)
802040b8:	df000017 	ldw	fp,0(sp)
802040bc:	dec00204 	addi	sp,sp,8
802040c0:	f800283a 	ret

802040c4 <iMsgdmaExtendedDescriptorAsyncTransfer>:
 * -ENOSPC -> FIFO descriptor buffer is full
 * -EPERM -> operation not permitted due to descriptor type conflict
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int iMsgdmaExtendedDescriptorAsyncTransfer(alt_msgdma_dev *pxDev,
		alt_msgdma_extended_descriptor *pxDesc) {
802040c4:	defffc04 	addi	sp,sp,-16
802040c8:	dfc00315 	stw	ra,12(sp)
802040cc:	df000215 	stw	fp,8(sp)
802040d0:	df000204 	addi	fp,sp,8
802040d4:	e13ffe15 	stw	r4,-8(fp)
802040d8:	e17fff15 	stw	r5,-4(fp)
	/*
	 * Error detection/handling should be performed at the application
	 * or callback level as appropriate.
	 */
	return msgdma_descriptor_async_transfer(pxDev, NULL, pxDesc);
802040dc:	e1bfff17 	ldw	r6,-4(fp)
802040e0:	000b883a 	mov	r5,zero
802040e4:	e13ffe17 	ldw	r4,-8(fp)
802040e8:	0203a3c0 	call	80203a3c <msgdma_descriptor_async_transfer>
}
802040ec:	e037883a 	mov	sp,fp
802040f0:	dfc00117 	ldw	ra,4(sp)
802040f4:	df000017 	ldw	fp,0(sp)
802040f8:	dec00204 	addi	sp,sp,8
802040fc:	f800283a 	ret

80204100 <iMsgdmaExtendedDescriptorSyncTransfer>:
 *           return -EPERM (operation not permitted due to descriptor type 
 *		conflict)
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int iMsgdmaExtendedDescriptorSyncTransfer(alt_msgdma_dev *pxDev,
		alt_msgdma_extended_descriptor *pxDesc) {
80204100:	defffc04 	addi	sp,sp,-16
80204104:	dfc00315 	stw	ra,12(sp)
80204108:	df000215 	stw	fp,8(sp)
8020410c:	df000204 	addi	fp,sp,8
80204110:	e13ffe15 	stw	r4,-8(fp)
80204114:	e17fff15 	stw	r5,-4(fp)
	return msgdma_descriptor_sync_transfer(pxDev, NULL, pxDesc);
80204118:	e1bfff17 	ldw	r6,-4(fp)
8020411c:	000b883a 	mov	r5,zero
80204120:	e13ffe17 	ldw	r4,-8(fp)
80204124:	0203cc40 	call	80203cc4 <msgdma_descriptor_sync_transfer>
}
80204128:	e037883a 	mov	sp,fp
8020412c:	dfc00117 	ldw	ra,4(sp)
80204130:	df000017 	ldw	fp,0(sp)
80204134:	dec00204 	addi	sp,sp,8
80204138:	f800283a 	ret

8020413c <POWER_SPI_RW>:
#define SPI_SDI(x)    IOWR_ALTERA_AVALON_PIO_DATA(CSENSE_SDI_BASE,x)
#define SPI_SDO       (IORD_ALTERA_AVALON_PIO_DATA(CSENSE_SDO_BASE) & 0x01)
#define SPI_DELAY     usleep(15)  // based on 50MHZ of CPU clock
// Note. SCK: typical 19.2KHZ (53 ms)
bool POWER_SPI_RW(alt_u8 IcIndex, alt_u8 NextChannel, bool bEN, bool bSIGN,
		bool bSGL, alt_u32 *pValue) {
8020413c:	defff204 	addi	sp,sp,-56
80204140:	dfc00d15 	stw	ra,52(sp)
80204144:	df000c15 	stw	fp,48(sp)
80204148:	df000c04 	addi	fp,sp,48
8020414c:	2007883a 	mov	r3,r4
80204150:	2805883a 	mov	r2,r5
80204154:	e1bffe15 	stw	r6,-8(fp)
80204158:	e1ffff15 	stw	r7,-4(fp)
8020415c:	e0fffc05 	stb	r3,-16(fp)
80204160:	e0bffd05 	stb	r2,-12(fp)
	bool bSuccess;
	alt_u8 Config8;
	alt_u32 Value32 = 0, Mask32;
80204164:	e03ff515 	stw	zero,-44(fp)
	int i, nWait = 0, nZeroCnt;
80204168:	e03ff815 	stw	zero,-32(fp)
	const int nMaxWait = 1000000;
8020416c:	008003f4 	movhi	r2,15
80204170:	10909004 	addi	r2,r2,16960
80204174:	e0bffa15 	stw	r2,-24(fp)

	//
	Config8 = 0x80;
80204178:	00bfe004 	movi	r2,-128
8020417c:	e0bff405 	stb	r2,-48(fp)
	Config8 |= (bEN) ? 0x20 : 0x00;
80204180:	e0bffe17 	ldw	r2,-8(fp)
80204184:	10000226 	beq	r2,zero,80204190 <POWER_SPI_RW+0x54>
80204188:	00800804 	movi	r2,32
8020418c:	00000106 	br	80204194 <POWER_SPI_RW+0x58>
80204190:	0005883a 	mov	r2,zero
80204194:	e0fff403 	ldbu	r3,-48(fp)
80204198:	10c4b03a 	or	r2,r2,r3
8020419c:	e0bff405 	stb	r2,-48(fp)
	Config8 |= (bSGL) ? 0x10 : 0x00;
802041a0:	e0800217 	ldw	r2,8(fp)
802041a4:	10000226 	beq	r2,zero,802041b0 <POWER_SPI_RW+0x74>
802041a8:	00800404 	movi	r2,16
802041ac:	00000106 	br	802041b4 <POWER_SPI_RW+0x78>
802041b0:	0005883a 	mov	r2,zero
802041b4:	e0fff403 	ldbu	r3,-48(fp)
802041b8:	10c4b03a 	or	r2,r2,r3
802041bc:	e0bff405 	stb	r2,-48(fp)
	Config8 |= (bSIGN) ? 0x08 : 0x00;
802041c0:	e0bfff17 	ldw	r2,-4(fp)
802041c4:	10000226 	beq	r2,zero,802041d0 <POWER_SPI_RW+0x94>
802041c8:	00800204 	movi	r2,8
802041cc:	00000106 	br	802041d4 <POWER_SPI_RW+0x98>
802041d0:	0005883a 	mov	r2,zero
802041d4:	e0fff403 	ldbu	r3,-48(fp)
802041d8:	10c4b03a 	or	r2,r2,r3
802041dc:	e0bff405 	stb	r2,-48(fp)
	Config8 |= NextChannel & 0x07; // channel
802041e0:	e0bffd03 	ldbu	r2,-12(fp)
802041e4:	108001cc 	andi	r2,r2,7
802041e8:	1007883a 	mov	r3,r2
802041ec:	e0bff403 	ldbu	r2,-48(fp)
802041f0:	1884b03a 	or	r2,r3,r2
802041f4:	e0bff405 	stb	r2,-48(fp)

	SPI_FO(0); // use internal conversion clock
802041f8:	0007883a 	mov	r3,zero
802041fc:	00a04034 	movhi	r2,33024
80204200:	10824404 	addi	r2,r2,2320
80204204:	10c00035 	stwio	r3,0(r2)
	SPI_SCK(0);  // set low to active extenal serial clock mode.
80204208:	0007883a 	mov	r3,zero
8020420c:	00a04034 	movhi	r2,33024
80204210:	10824c04 	addi	r2,r2,2352
80204214:	10c00035 	stwio	r3,0(r2)
	SPI_CS_N(IcIndex, 0);  // chip select: active
80204218:	e0bffc03 	ldbu	r2,-16(fp)
8020421c:	1000021e 	bne	r2,zero,80204228 <POWER_SPI_RW+0xec>
80204220:	00c00084 	movi	r3,2
80204224:	00000106 	br	8020422c <POWER_SPI_RW+0xf0>
80204228:	00c00044 	movi	r3,1
8020422c:	00a04034 	movhi	r2,33024
80204230:	10824804 	addi	r2,r2,2336
80204234:	10c00035 	stwio	r3,0(r2)
	SPI_DELAY;
80204238:	010003c4 	movi	r4,15
8020423c:	0215ae00 	call	80215ae0 <usleep>

	// wait for converion end (when conversion done, SPI_SDO is low)
	while (SPI_SDO && nWait < nMaxWait) {
80204240:	00000306 	br	80204250 <POWER_SPI_RW+0x114>
		nWait++;
80204244:	e0bff817 	ldw	r2,-32(fp)
80204248:	10800044 	addi	r2,r2,1
8020424c:	e0bff815 	stw	r2,-32(fp)
	SPI_SCK(0);  // set low to active extenal serial clock mode.
	SPI_CS_N(IcIndex, 0);  // chip select: active
	SPI_DELAY;

	// wait for converion end (when conversion done, SPI_SDO is low)
	while (SPI_SDO && nWait < nMaxWait) {
80204250:	00a04034 	movhi	r2,33024
80204254:	10825404 	addi	r2,r2,2384
80204258:	10800037 	ldwio	r2,0(r2)
8020425c:	1080004c 	andi	r2,r2,1
80204260:	10000326 	beq	r2,zero,80204270 <POWER_SPI_RW+0x134>
80204264:	e0fff817 	ldw	r3,-32(fp)
80204268:	e0bffa17 	ldw	r2,-24(fp)
8020426c:	18bff516 	blt	r3,r2,80204244 <__reset+0xfa1e4244>
		nWait++;
	}

	if (SPI_SDO) {
80204270:	00a04034 	movhi	r2,33024
80204274:	10825404 	addi	r2,r2,2384
80204278:	10800037 	ldwio	r2,0(r2)
8020427c:	1080004c 	andi	r2,r2,1
80204280:	10000626 	beq	r2,zero,8020429c <POWER_SPI_RW+0x160>
		SPI_CS_N(IcIndex, 1);  // chip select: inactive
80204284:	00c000c4 	movi	r3,3
80204288:	00a04034 	movhi	r2,33024
8020428c:	10824804 	addi	r2,r2,2336
80204290:	10c00035 	stwio	r3,0(r2)
		return FALSE;
80204294:	0005883a 	mov	r2,zero
80204298:	0000db06 	br	80204608 <POWER_SPI_RW+0x4cc>
	}

	for (i = 0; i < 2; i++) // send config bits 7:6,
8020429c:	e03ff715 	stw	zero,-36(fp)
802042a0:	00002406 	br	80204334 <POWER_SPI_RW+0x1f8>
			// ignore EOC/ and DMY bits
			{
		SPI_SDI((Config8 & 0x80) ? 1 : 0);    //sdi=nextch.7; // put data on pin
802042a4:	e0bff403 	ldbu	r2,-48(fp)
802042a8:	10803fcc 	andi	r2,r2,255
802042ac:	1004d1fa 	srli	r2,r2,7
802042b0:	10c03fcc 	andi	r3,r2,255
802042b4:	00a04034 	movhi	r2,33024
802042b8:	10825004 	addi	r2,r2,2368
802042bc:	10c00035 	stwio	r3,0(r2)
		Config8 <<= 1; //nextch = rl(nextch); // get next config bit ready
802042c0:	e0bff403 	ldbu	r2,-48(fp)
802042c4:	1085883a 	add	r2,r2,r2
802042c8:	e0bff405 	stb	r2,-48(fp)
		Value32 <<= 1; //result_0 = rl(result_0);// get ready to load lsb
802042cc:	e0bff517 	ldw	r2,-44(fp)
802042d0:	1085883a 	add	r2,r2,r2
802042d4:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_0.0 = sdo; // load lsb
802042d8:	00a04034 	movhi	r2,33024
802042dc:	10825404 	addi	r2,r2,2384
802042e0:	10800037 	ldwio	r2,0(r2)
802042e4:	1080004c 	andi	r2,r2,1
802042e8:	1007883a 	mov	r3,r2
802042ec:	e0bff517 	ldw	r2,-44(fp)
802042f0:	10c4b03a 	or	r2,r2,r3
802042f4:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
802042f8:	00c00044 	movi	r3,1
802042fc:	00a04034 	movhi	r2,33024
80204300:	10824c04 	addi	r2,r2,2352
80204304:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
80204308:	010003c4 	movi	r4,15
8020430c:	0215ae00 	call	80215ae0 <usleep>
		SPI_SCK(0); //sck=0; // clock low
80204310:	0007883a 	mov	r3,zero
80204314:	00a04034 	movhi	r2,33024
80204318:	10824c04 	addi	r2,r2,2352
8020431c:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
80204320:	010003c4 	movi	r4,15
80204324:	0215ae00 	call	80215ae0 <usleep>
	if (SPI_SDO) {
		SPI_CS_N(IcIndex, 1);  // chip select: inactive
		return FALSE;
	}

	for (i = 0; i < 2; i++) // send config bits 7:6,
80204328:	e0bff717 	ldw	r2,-36(fp)
8020432c:	10800044 	addi	r2,r2,1
80204330:	e0bff715 	stw	r2,-36(fp)
80204334:	e0bff717 	ldw	r2,-36(fp)
80204338:	10800090 	cmplti	r2,r2,2
8020433c:	103fd91e 	bne	r2,zero,802042a4 <__reset+0xfa1e42a4>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // send config, read byte 3
80204340:	e03ff715 	stw	zero,-36(fp)
80204344:	00002406 	br	802043d8 <POWER_SPI_RW+0x29c>
			{
		SPI_SDI((Config8 & 0x80) ? 1 : 0); //sdi=nextch.7; // put data on pin
80204348:	e0bff403 	ldbu	r2,-48(fp)
8020434c:	10803fcc 	andi	r2,r2,255
80204350:	1004d1fa 	srli	r2,r2,7
80204354:	10c03fcc 	andi	r3,r2,255
80204358:	00a04034 	movhi	r2,33024
8020435c:	10825004 	addi	r2,r2,2368
80204360:	10c00035 	stwio	r3,0(r2)
		Config8 <<= 1; //nextch = rl(nextch); // get next config bit ready
80204364:	e0bff403 	ldbu	r2,-48(fp)
80204368:	1085883a 	add	r2,r2,r2
8020436c:	e0bff405 	stb	r2,-48(fp)

		Value32 <<= 1; //result_3 = rl(result_3);// get ready to load lsb
80204370:	e0bff517 	ldw	r2,-44(fp)
80204374:	1085883a 	add	r2,r2,r2
80204378:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_3.0 = sdo; // load lsb
8020437c:	00a04034 	movhi	r2,33024
80204380:	10825404 	addi	r2,r2,2384
80204384:	10800037 	ldwio	r2,0(r2)
80204388:	1080004c 	andi	r2,r2,1
8020438c:	1007883a 	mov	r3,r2
80204390:	e0bff517 	ldw	r2,-44(fp)
80204394:	10c4b03a 	or	r2,r2,r3
80204398:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
8020439c:	00c00044 	movi	r3,1
802043a0:	00a04034 	movhi	r2,33024
802043a4:	10824c04 	addi	r2,r2,2352
802043a8:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
802043ac:	010003c4 	movi	r4,15
802043b0:	0215ae00 	call	80215ae0 <usleep>
		SPI_SCK(0); //sck=0; // clock low
802043b4:	0007883a 	mov	r3,zero
802043b8:	00a04034 	movhi	r2,33024
802043bc:	10824c04 	addi	r2,r2,2352
802043c0:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
802043c4:	010003c4 	movi	r4,15
802043c8:	0215ae00 	call	80215ae0 <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // send config, read byte 3
802043cc:	e0bff717 	ldw	r2,-36(fp)
802043d0:	10800044 	addi	r2,r2,1
802043d4:	e0bff715 	stw	r2,-36(fp)
802043d8:	e0bff717 	ldw	r2,-36(fp)
802043dc:	10800210 	cmplti	r2,r2,8
802043e0:	103fd91e 	bne	r2,zero,80204348 <__reset+0xfa1e4348>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 2
802043e4:	e03ff715 	stw	zero,-36(fp)
802043e8:	00001a06 	br	80204454 <POWER_SPI_RW+0x318>
			{
		Value32 <<= 1; //result_2 = rl(result_2);// get ready to load lsb
802043ec:	e0bff517 	ldw	r2,-44(fp)
802043f0:	1085883a 	add	r2,r2,r2
802043f4:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_2.0 = sdo; // load lsb
802043f8:	00a04034 	movhi	r2,33024
802043fc:	10825404 	addi	r2,r2,2384
80204400:	10800037 	ldwio	r2,0(r2)
80204404:	1080004c 	andi	r2,r2,1
80204408:	1007883a 	mov	r3,r2
8020440c:	e0bff517 	ldw	r2,-44(fp)
80204410:	10c4b03a 	or	r2,r2,r3
80204414:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
80204418:	00c00044 	movi	r3,1
8020441c:	00a04034 	movhi	r2,33024
80204420:	10824c04 	addi	r2,r2,2352
80204424:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
80204428:	010003c4 	movi	r4,15
8020442c:	0215ae00 	call	80215ae0 <usleep>
		SPI_SCK(0); //sck=0; // clock low
80204430:	0007883a 	mov	r3,zero
80204434:	00a04034 	movhi	r2,33024
80204438:	10824c04 	addi	r2,r2,2352
8020443c:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
80204440:	010003c4 	movi	r4,15
80204444:	0215ae00 	call	80215ae0 <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 2
80204448:	e0bff717 	ldw	r2,-36(fp)
8020444c:	10800044 	addi	r2,r2,1
80204450:	e0bff715 	stw	r2,-36(fp)
80204454:	e0bff717 	ldw	r2,-36(fp)
80204458:	10800210 	cmplti	r2,r2,8
8020445c:	103fe31e 	bne	r2,zero,802043ec <__reset+0xfa1e43ec>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 1
80204460:	e03ff715 	stw	zero,-36(fp)
80204464:	00001a06 	br	802044d0 <POWER_SPI_RW+0x394>
			{
		Value32 <<= 1; //result_1 = rl(result_1);// get ready to load lsb
80204468:	e0bff517 	ldw	r2,-44(fp)
8020446c:	1085883a 	add	r2,r2,r2
80204470:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_1.0 = sdo; // load lsb
80204474:	00a04034 	movhi	r2,33024
80204478:	10825404 	addi	r2,r2,2384
8020447c:	10800037 	ldwio	r2,0(r2)
80204480:	1080004c 	andi	r2,r2,1
80204484:	1007883a 	mov	r3,r2
80204488:	e0bff517 	ldw	r2,-44(fp)
8020448c:	10c4b03a 	or	r2,r2,r3
80204490:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
80204494:	00c00044 	movi	r3,1
80204498:	00a04034 	movhi	r2,33024
8020449c:	10824c04 	addi	r2,r2,2352
802044a0:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
802044a4:	010003c4 	movi	r4,15
802044a8:	0215ae00 	call	80215ae0 <usleep>
		SPI_SCK(0); //sck=0; // clock low
802044ac:	0007883a 	mov	r3,zero
802044b0:	00a04034 	movhi	r2,33024
802044b4:	10824c04 	addi	r2,r2,2352
802044b8:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
802044bc:	010003c4 	movi	r4,15
802044c0:	0215ae00 	call	80215ae0 <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 1
802044c4:	e0bff717 	ldw	r2,-36(fp)
802044c8:	10800044 	addi	r2,r2,1
802044cc:	e0bff715 	stw	r2,-36(fp)
802044d0:	e0bff717 	ldw	r2,-36(fp)
802044d4:	10800210 	cmplti	r2,r2,8
802044d8:	103fe31e 	bne	r2,zero,80204468 <__reset+0xfa1e4468>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 6; i++) // read byte 0
802044dc:	e03ff715 	stw	zero,-36(fp)
802044e0:	00001a06 	br	8020454c <POWER_SPI_RW+0x410>
			{
		Value32 <<= 1; //result_0 = rl(result_0);// get ready to load lsb
802044e4:	e0bff517 	ldw	r2,-44(fp)
802044e8:	1085883a 	add	r2,r2,r2
802044ec:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_0.0 = sdo; // load lsb
802044f0:	00a04034 	movhi	r2,33024
802044f4:	10825404 	addi	r2,r2,2384
802044f8:	10800037 	ldwio	r2,0(r2)
802044fc:	1080004c 	andi	r2,r2,1
80204500:	1007883a 	mov	r3,r2
80204504:	e0bff517 	ldw	r2,-44(fp)
80204508:	10c4b03a 	or	r2,r2,r3
8020450c:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
80204510:	00c00044 	movi	r3,1
80204514:	00a04034 	movhi	r2,33024
80204518:	10824c04 	addi	r2,r2,2352
8020451c:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
80204520:	010003c4 	movi	r4,15
80204524:	0215ae00 	call	80215ae0 <usleep>
		SPI_SCK(0); //sck=0; // clock low
80204528:	0007883a 	mov	r3,zero
8020452c:	00a04034 	movhi	r2,33024
80204530:	10824c04 	addi	r2,r2,2352
80204534:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
80204538:	010003c4 	movi	r4,15
8020453c:	0215ae00 	call	80215ae0 <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 6; i++) // read byte 0
80204540:	e0bff717 	ldw	r2,-36(fp)
80204544:	10800044 	addi	r2,r2,1
80204548:	e0bff715 	stw	r2,-36(fp)
8020454c:	e0bff717 	ldw	r2,-36(fp)
80204550:	10800190 	cmplti	r2,r2,6
80204554:	103fe31e 	bne	r2,zero,802044e4 <__reset+0xfa1e44e4>
		SPI_SCK(1); //sck=1; // clock high
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}
	SPI_SCK(1);
80204558:	00c00044 	movi	r3,1
8020455c:	00a04034 	movhi	r2,33024
80204560:	10824c04 	addi	r2,r2,2352
80204564:	10c00035 	stwio	r3,0(r2)
	SPI_DELAY;
80204568:	010003c4 	movi	r4,15
8020456c:	0215ae00 	call	80215ae0 <usleep>
	SPI_CS_N(IcIndex, 1);  // chip select: inactive
80204570:	00c000c4 	movi	r3,3
80204574:	00a04034 	movhi	r2,33024
80204578:	10824804 	addi	r2,r2,2336
8020457c:	10c00035 	stwio	r3,0(r2)

	// check parity
	nZeroCnt = 0;
80204580:	e03ff915 	stw	zero,-28(fp)
	Mask32 = 0x01;
80204584:	00800044 	movi	r2,1
80204588:	e0bff615 	stw	r2,-40(fp)
	for (i = 0; i < 32; i++) {
8020458c:	e03ff715 	stw	zero,-36(fp)
80204590:	00000d06 	br	802045c8 <POWER_SPI_RW+0x48c>
		if ((Value32 & Mask32) == 0x00) {
80204594:	e0fff517 	ldw	r3,-44(fp)
80204598:	e0bff617 	ldw	r2,-40(fp)
8020459c:	1884703a 	and	r2,r3,r2
802045a0:	1000031e 	bne	r2,zero,802045b0 <POWER_SPI_RW+0x474>
			nZeroCnt++;
802045a4:	e0bff917 	ldw	r2,-28(fp)
802045a8:	10800044 	addi	r2,r2,1
802045ac:	e0bff915 	stw	r2,-28(fp)
		}
		Mask32 <<= 1;
802045b0:	e0bff617 	ldw	r2,-40(fp)
802045b4:	1085883a 	add	r2,r2,r2
802045b8:	e0bff615 	stw	r2,-40(fp)
	SPI_CS_N(IcIndex, 1);  // chip select: inactive

	// check parity
	nZeroCnt = 0;
	Mask32 = 0x01;
	for (i = 0; i < 32; i++) {
802045bc:	e0bff717 	ldw	r2,-36(fp)
802045c0:	10800044 	addi	r2,r2,1
802045c4:	e0bff715 	stw	r2,-36(fp)
802045c8:	e0bff717 	ldw	r2,-36(fp)
802045cc:	10800810 	cmplti	r2,r2,32
802045d0:	103ff01e 	bne	r2,zero,80204594 <__reset+0xfa1e4594>
		if ((Value32 & Mask32) == 0x00) {
			nZeroCnt++;
		}
		Mask32 <<= 1;
	}
	bSuccess = (nZeroCnt & 0x01) ? FALSE : TRUE;
802045d4:	e0bff917 	ldw	r2,-28(fp)
802045d8:	1080004c 	andi	r2,r2,1
802045dc:	1005003a 	cmpeq	r2,r2,zero
802045e0:	10803fcc 	andi	r2,r2,255
802045e4:	e0bffb15 	stw	r2,-20(fp)
	if (!bSuccess) {
802045e8:	e0bffb17 	ldw	r2,-20(fp)
802045ec:	1000021e 	bne	r2,zero,802045f8 <POWER_SPI_RW+0x4bc>
		return FALSE;
802045f0:	0005883a 	mov	r2,zero
802045f4:	00000406 	br	80204608 <POWER_SPI_RW+0x4cc>
	}

	*pValue = Value32;
802045f8:	e0800317 	ldw	r2,12(fp)
802045fc:	e0fff517 	ldw	r3,-44(fp)
80204600:	10c00015 	stw	r3,0(r2)

	return bSuccess;
80204604:	e0bffb17 	ldw	r2,-20(fp)
}
80204608:	e037883a 	mov	sp,fp
8020460c:	dfc00117 	ldw	ra,4(sp)
80204610:	df000017 	ldw	fp,0(sp)
80204614:	dec00204 	addi	sp,sp,8
80204618:	f800283a 	ret

8020461c <bSSDisplayConfig>:
 *
 * @retval TRUE : Sucesso
 * @retval FALSE : Configuração não especificada
 *
 */
bool bSSDisplayConfig(alt_u8 SsdpConfig){
8020461c:	defffd04 	addi	sp,sp,-12
80204620:	df000215 	stw	fp,8(sp)
80204624:	df000204 	addi	fp,sp,8
80204628:	2005883a 	mov	r2,r4
8020462c:	e0bfff05 	stb	r2,-4(fp)

    switch(SsdpConfig){
80204630:	e0bfff03 	ldbu	r2,-4(fp)
80204634:	10c00168 	cmpgeui	r3,r2,5
80204638:	18001c1e 	bne	r3,zero,802046ac <bSSDisplayConfig+0x90>
8020463c:	100690ba 	slli	r3,r2,2
80204640:	00a00834 	movhi	r2,32800
80204644:	10919504 	addi	r2,r2,18004
80204648:	1885883a 	add	r2,r3,r2
8020464c:	10800017 	ldw	r2,0(r2)
80204650:	1000683a 	jmp	r2
80204654:	80204668 	cmpgeui	zero,r16,33049
80204658:	80204674 	orhi	zero,r16,33049
8020465c:	80204680 	call	88020468 <__reset+0x2000468>
80204660:	80204694 	ori	zero,r16,33050
80204664:	802046a4 	muli	zero,r16,-32486
	    case SSDP_NORMAL_MODE:
	        SspdConfigControl = (SSDP_ON_MASK | SSDP_UNLOCK_MASK);
80204668:	00800cc4 	movi	r2,51
8020466c:	d0a01845 	stb	r2,-32671(gp)
	    break;
80204670:	00001006 	br	802046b4 <bSSDisplayConfig+0x98>
		
	    case SSDP_TEST_MODE:
	        SspdConfigControl = (SSDP_ON_MASK | SSDP_TEST_MASK);
80204674:	00801544 	movi	r2,85
80204678:	d0a01845 	stb	r2,-32671(gp)
	    break;
8020467c:	00000d06 	br	802046b4 <bSSDisplayConfig+0x98>
		
	    case SSDP_LOCK:
	        SspdConfigControl &= (~SSDP_UNLOCK_MASK);
80204680:	d0e01843 	ldbu	r3,-32671(gp)
80204684:	00bff744 	movi	r2,-35
80204688:	1884703a 	and	r2,r3,r2
8020468c:	d0a01845 	stb	r2,-32671(gp)
	    break;
80204690:	00000806 	br	802046b4 <bSSDisplayConfig+0x98>
		
	    case SSDP_UNLOCK:
	        SspdConfigControl |= SSDP_UNLOCK_MASK;
80204694:	d0a01843 	ldbu	r2,-32671(gp)
80204698:	10800894 	ori	r2,r2,34
8020469c:	d0a01845 	stb	r2,-32671(gp)
	    break;
802046a0:	00000406 	br	802046b4 <bSSDisplayConfig+0x98>
		
	    case SSDP_OFF:
	        SspdConfigControl = SSDP_OFF_MASK;
802046a4:	d0201845 	stb	zero,-32671(gp)
	    break;
802046a8:	00000206 	br	802046b4 <bSSDisplayConfig+0x98>
		
		default:
		    return FALSE;
802046ac:	0005883a 	mov	r2,zero
802046b0:	00000806 	br	802046d4 <bSSDisplayConfig+0xb8>
	}

	alt_u32 *pSsdpAddr = (alt_u32 *)SSDP_BASE;
802046b4:	00a04034 	movhi	r2,33024
802046b8:	10828404 	addi	r2,r2,2576
802046bc:	e0bffe15 	stw	r2,-8(fp)
	*(pSsdpAddr + SSDP_CONTROL_REG_OFFSET) = (alt_u32) SspdConfigControl;
802046c0:	d0a01843 	ldbu	r2,-32671(gp)
802046c4:	10c03fcc 	andi	r3,r2,255
802046c8:	e0bffe17 	ldw	r2,-8(fp)
802046cc:	10c00015 	stw	r3,0(r2)
	
	return TRUE;
802046d0:	00800044 	movi	r2,1
}
802046d4:	e037883a 	mov	sp,fp
802046d8:	df000017 	ldw	fp,0(sp)
802046dc:	dec00104 	addi	sp,sp,4
802046e0:	f800283a 	ret

802046e4 <bSSDisplayUpdate>:
 * @param [in] SsdpData Dado a ser colocado no display de sete segmentos, do tipo unsigned char (alt_u8)
 *
 * @retval TRUE : Sucesso
 *
 */
bool bSSDisplayUpdate(alt_u8 SsdpData){
802046e4:	defffd04 	addi	sp,sp,-12
802046e8:	df000215 	stw	fp,8(sp)
802046ec:	df000204 	addi	fp,sp,8
802046f0:	2005883a 	mov	r2,r4
802046f4:	e0bfff05 	stb	r2,-4(fp)

	alt_u32 *pSsdpAddr = (alt_u32 *)SSDP_BASE;
802046f8:	00a04034 	movhi	r2,33024
802046fc:	10828404 	addi	r2,r2,2576
80204700:	e0bffe15 	stw	r2,-8(fp)
	*(pSsdpAddr + SSDP_DATA_REG_OFFSET) = (alt_u32) SsdpData;
80204704:	e0bffe17 	ldw	r2,-8(fp)
80204708:	10800104 	addi	r2,r2,4
8020470c:	e0ffff03 	ldbu	r3,-4(fp)
80204710:	10c00015 	stw	r3,0(r2)
	
	return TRUE;
80204714:	00800044 	movi	r2,1
}
80204718:	e037883a 	mov	sp,fp
8020471c:	df000017 	ldw	fp,0(sp)
80204720:	dec00104 	addi	sp,sp,4
80204724:	f800283a 	ret

80204728 <main>:
#include "api_driver/simucam_dma/simucam_dma.h"

FILE* fp;

int main()
{
80204728:	defffa04 	addi	sp,sp,-24
8020472c:	dfc00515 	stw	ra,20(sp)
80204730:	df000415 	stw	fp,16(sp)
80204734:	df000404 	addi	fp,sp,16
  printf("Hello from Nios II!\n\n");
80204738:	012008b4 	movhi	r4,32802
8020473c:	212c5d04 	addi	r4,r4,-20108
80204740:	02053e00 	call	802053e0 <puts>

  // write test data in memory
  bDdr2SwitchMemory(DDR2_M1_ID);
80204744:	0009883a 	mov	r4,zero
80204748:	02012940 	call	80201294 <bDdr2SwitchMemory>

  alt_u32 uliDdr2Base;
  alt_u8 *pxDes;
  alt_u32 *pxDes32;

  alt_u16 uiDataCnt = 0;
8020474c:	e03ffe0d 	sth	zero,-8(fp)

  uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
80204750:	e03fff15 	stw	zero,-4(fp)

  pxDes = (alt_u8 *) uliDdr2Base;
80204754:	e0bfff17 	ldw	r2,-4(fp)
80204758:	e0bffc15 	stw	r2,-16(fp)
  for (uiDataCnt = 0; uiDataCnt < 2176; uiDataCnt++) {
8020475c:	e03ffe0d 	sth	zero,-8(fp)
80204760:	00000a06 	br	8020478c <main+0x64>
	  *pxDes = (alt_u8)uiDataCnt;
80204764:	e0bffe0b 	ldhu	r2,-8(fp)
80204768:	1007883a 	mov	r3,r2
8020476c:	e0bffc17 	ldw	r2,-16(fp)
80204770:	10c00005 	stb	r3,0(r2)
	  pxDes++;
80204774:	e0bffc17 	ldw	r2,-16(fp)
80204778:	10800044 	addi	r2,r2,1
8020477c:	e0bffc15 	stw	r2,-16(fp)
  alt_u16 uiDataCnt = 0;

  uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;

  pxDes = (alt_u8 *) uliDdr2Base;
  for (uiDataCnt = 0; uiDataCnt < 2176; uiDataCnt++) {
80204780:	e0bffe0b 	ldhu	r2,-8(fp)
80204784:	10800044 	addi	r2,r2,1
80204788:	e0bffe0d 	sth	r2,-8(fp)
8020478c:	e0bffe0b 	ldhu	r2,-8(fp)
80204790:	10822030 	cmpltui	r2,r2,2176
80204794:	103ff31e 	bne	r2,zero,80204764 <__reset+0xfa1e4764>
	  *pxDes = (alt_u8)uiDataCnt;
	  pxDes++;
  }

  pxDes = (alt_u8 *) uliDdr2Base;
80204798:	e0bfff17 	ldw	r2,-4(fp)
8020479c:	e0bffc15 	stw	r2,-16(fp)
  for (uiDataCnt = 0; uiDataCnt < 2176; uiDataCnt++) {
802047a0:	e03ffe0d 	sth	zero,-8(fp)
802047a4:	00000f06 	br	802047e4 <main+0xbc>
	  printf("Addr: %04lu; Data: %02X \n", (alt_u32)pxDes, *pxDes);
802047a8:	e0fffc17 	ldw	r3,-16(fp)
802047ac:	e0bffc17 	ldw	r2,-16(fp)
802047b0:	10800003 	ldbu	r2,0(r2)
802047b4:	10803fcc 	andi	r2,r2,255
802047b8:	100d883a 	mov	r6,r2
802047bc:	180b883a 	mov	r5,r3
802047c0:	012008b4 	movhi	r4,32802
802047c4:	212c6304 	addi	r4,r4,-20084
802047c8:	02052e40 	call	802052e4 <printf>
	  pxDes++;
802047cc:	e0bffc17 	ldw	r2,-16(fp)
802047d0:	10800044 	addi	r2,r2,1
802047d4:	e0bffc15 	stw	r2,-16(fp)
	  *pxDes = (alt_u8)uiDataCnt;
	  pxDes++;
  }

  pxDes = (alt_u8 *) uliDdr2Base;
  for (uiDataCnt = 0; uiDataCnt < 2176; uiDataCnt++) {
802047d8:	e0bffe0b 	ldhu	r2,-8(fp)
802047dc:	10800044 	addi	r2,r2,1
802047e0:	e0bffe0d 	sth	r2,-8(fp)
802047e4:	e0bffe0b 	ldhu	r2,-8(fp)
802047e8:	10822030 	cmpltui	r2,r2,2176
802047ec:	103fee1e 	bne	r2,zero,802047a8 <__reset+0xfa1e47a8>
	  printf("Addr: %04lu; Data: %02X \n", (alt_u32)pxDes, *pxDes);
	  pxDes++;
  }

  if (bSdmaInitM1Dma()){
802047f0:	02026100 	call	80202610 <bSdmaInitM1Dma>
802047f4:	10000326 	beq	r2,zero,80204804 <main+0xdc>
	  printf("Ok1 \n");
802047f8:	012008b4 	movhi	r4,32802
802047fc:	212c6a04 	addi	r4,r4,-20056
80204800:	02053e00 	call	802053e0 <puts>
  }
  if (bSdmaDmaM1Transfer((alt_u32 *)0, 16, eSdmaLeftBuffer, eSdmaCh1Buffer)){
80204804:	000f883a 	mov	r7,zero
80204808:	000d883a 	mov	r6,zero
8020480c:	01400404 	movi	r5,16
80204810:	0009883a 	mov	r4,zero
80204814:	02027800 	call	80202780 <bSdmaDmaM1Transfer>
80204818:	10000326 	beq	r2,zero,80204828 <main+0x100>
	  printf("Ok2 \n");
8020481c:	012008b4 	movhi	r4,32802
80204820:	212c6c04 	addi	r4,r4,-20048
80204824:	02053e00 	call	802053e0 <puts>
  }

  usleep(1000*1000*5);
80204828:	01001334 	movhi	r4,76
8020482c:	2112d004 	addi	r4,r4,19264
80204830:	0215ae00 	call	80215ae0 <usleep>

  pxDes32 = (alt_u32 *) AVSTAP64_0_BASE;
80204834:	00a00034 	movhi	r2,32768
80204838:	10900004 	addi	r2,r2,16384
8020483c:	e0bffd15 	stw	r2,-12(fp)
    for (uiDataCnt = 0; uiDataCnt < (2176/4 + 4); uiDataCnt++) {
80204840:	e03ffe0d 	sth	zero,-8(fp)
80204844:	00000e06 	br	80204880 <main+0x158>
  	  printf("Addr: %04lu; Data: %08lX \n", (alt_u32)pxDes32, *pxDes32);
80204848:	e0fffd17 	ldw	r3,-12(fp)
8020484c:	e0bffd17 	ldw	r2,-12(fp)
80204850:	10800017 	ldw	r2,0(r2)
80204854:	100d883a 	mov	r6,r2
80204858:	180b883a 	mov	r5,r3
8020485c:	012008b4 	movhi	r4,32802
80204860:	212c6e04 	addi	r4,r4,-20040
80204864:	02052e40 	call	802052e4 <printf>
  	  pxDes32++;
80204868:	e0bffd17 	ldw	r2,-12(fp)
8020486c:	10800104 	addi	r2,r2,4
80204870:	e0bffd15 	stw	r2,-12(fp)
  }

  usleep(1000*1000*5);

  pxDes32 = (alt_u32 *) AVSTAP64_0_BASE;
    for (uiDataCnt = 0; uiDataCnt < (2176/4 + 4); uiDataCnt++) {
80204874:	e0bffe0b 	ldhu	r2,-8(fp)
80204878:	10800044 	addi	r2,r2,1
8020487c:	e0bffe0d 	sth	r2,-8(fp)
80204880:	e0bffe0b 	ldhu	r2,-8(fp)
80204884:	10808930 	cmpltui	r2,r2,548
80204888:	103fef1e 	bne	r2,zero,80204848 <__reset+0xfa1e4848>
  	  printf("Addr: %04lu; Data: %08lX \n", (alt_u32)pxDes32, *pxDes32);
  	  pxDes32++;
    }

  return 0;
8020488c:	0005883a 	mov	r2,zero
}
80204890:	e037883a 	mov	sp,fp
80204894:	dfc00117 	ldw	ra,4(sp)
80204898:	df000017 	ldw	fp,0(sp)
8020489c:	dec00204 	addi	sp,sp,8
802048a0:	f800283a 	ret

802048a4 <__divsf3>:
802048a4:	defff504 	addi	sp,sp,-44
802048a8:	200cd5fa 	srli	r6,r4,23
802048ac:	dcc00415 	stw	r19,16(sp)
802048b0:	2026d7fa 	srli	r19,r4,31
802048b4:	00c02034 	movhi	r3,128
802048b8:	dd800715 	stw	r22,28(sp)
802048bc:	dd000515 	stw	r20,20(sp)
802048c0:	dc800315 	stw	r18,12(sp)
802048c4:	18ffffc4 	addi	r3,r3,-1
802048c8:	dfc00a15 	stw	ra,40(sp)
802048cc:	df000915 	stw	fp,36(sp)
802048d0:	ddc00815 	stw	r23,32(sp)
802048d4:	dd400615 	stw	r21,24(sp)
802048d8:	dc400215 	stw	r17,8(sp)
802048dc:	dc000115 	stw	r16,4(sp)
802048e0:	35003fcc 	andi	r20,r6,255
802048e4:	1924703a 	and	r18,r3,r4
802048e8:	9d803fcc 	andi	r22,r19,255
802048ec:	a0005226 	beq	r20,zero,80204a38 <__divsf3+0x194>
802048f0:	00803fc4 	movi	r2,255
802048f4:	a0802e26 	beq	r20,r2,802049b0 <__divsf3+0x10c>
802048f8:	91002034 	orhi	r4,r18,128
802048fc:	202490fa 	slli	r18,r4,3
80204900:	a53fe044 	addi	r20,r20,-127
80204904:	0021883a 	mov	r16,zero
80204908:	002f883a 	mov	r23,zero
8020490c:	280cd5fa 	srli	r6,r5,23
80204910:	282ad7fa 	srli	r21,r5,31
80204914:	00c02034 	movhi	r3,128
80204918:	18ffffc4 	addi	r3,r3,-1
8020491c:	31803fcc 	andi	r6,r6,255
80204920:	1962703a 	and	r17,r3,r5
80204924:	af003fcc 	andi	fp,r21,255
80204928:	30004a26 	beq	r6,zero,80204a54 <__divsf3+0x1b0>
8020492c:	00803fc4 	movi	r2,255
80204930:	30804526 	beq	r6,r2,80204a48 <__divsf3+0x1a4>
80204934:	89402034 	orhi	r5,r17,128
80204938:	282290fa 	slli	r17,r5,3
8020493c:	31bfe044 	addi	r6,r6,-127
80204940:	000b883a 	mov	r5,zero
80204944:	2c20b03a 	or	r16,r5,r16
80204948:	802090ba 	slli	r16,r16,2
8020494c:	00a00834 	movhi	r2,32800
80204950:	10925c04 	addi	r2,r2,18800
80204954:	80a1883a 	add	r16,r16,r2
80204958:	81000017 	ldw	r4,0(r16)
8020495c:	9d46f03a 	xor	r3,r19,r21
80204960:	180f883a 	mov	r7,r3
80204964:	18803fcc 	andi	r2,r3,255
80204968:	a18dc83a 	sub	r6,r20,r6
8020496c:	2000683a 	jmp	r4
80204970:	80204b54 	ori	zero,r16,33069
80204974:	802049d8 	cmpnei	zero,r16,-32473
80204978:	80204b48 	cmpgei	zero,r16,-32467
8020497c:	802049c4 	addi	zero,r16,-32473
80204980:	80204b48 	cmpgei	zero,r16,-32467
80204984:	80204b20 	cmpeqi	zero,r16,-32468
80204988:	80204b48 	cmpgei	zero,r16,-32467
8020498c:	802049c4 	addi	zero,r16,-32473
80204990:	802049d8 	cmpnei	zero,r16,-32473
80204994:	802049d8 	cmpnei	zero,r16,-32473
80204998:	80204b20 	cmpeqi	zero,r16,-32468
8020499c:	802049c4 	addi	zero,r16,-32473
802049a0:	80204c34 	orhi	zero,r16,33072
802049a4:	80204c34 	orhi	zero,r16,33072
802049a8:	80204c34 	orhi	zero,r16,33072
802049ac:	80204be8 	cmpgeui	zero,r16,33071
802049b0:	9000581e 	bne	r18,zero,80204b14 <__divsf3+0x270>
802049b4:	04000204 	movi	r16,8
802049b8:	05c00084 	movi	r23,2
802049bc:	003fd306 	br	8020490c <__reset+0xfa1e490c>
802049c0:	0023883a 	mov	r17,zero
802049c4:	e02d883a 	mov	r22,fp
802049c8:	282f883a 	mov	r23,r5
802049cc:	00800084 	movi	r2,2
802049d0:	b8808f1e 	bne	r23,r2,80204c10 <__divsf3+0x36c>
802049d4:	b005883a 	mov	r2,r22
802049d8:	11c0004c 	andi	r7,r2,1
802049dc:	013fffc4 	movi	r4,-1
802049e0:	000d883a 	mov	r6,zero
802049e4:	21003fcc 	andi	r4,r4,255
802049e8:	200895fa 	slli	r4,r4,23
802049ec:	38803fcc 	andi	r2,r7,255
802049f0:	00c02034 	movhi	r3,128
802049f4:	100497fa 	slli	r2,r2,31
802049f8:	18ffffc4 	addi	r3,r3,-1
802049fc:	30c6703a 	and	r3,r6,r3
80204a00:	1906b03a 	or	r3,r3,r4
80204a04:	1884b03a 	or	r2,r3,r2
80204a08:	dfc00a17 	ldw	ra,40(sp)
80204a0c:	df000917 	ldw	fp,36(sp)
80204a10:	ddc00817 	ldw	r23,32(sp)
80204a14:	dd800717 	ldw	r22,28(sp)
80204a18:	dd400617 	ldw	r21,24(sp)
80204a1c:	dd000517 	ldw	r20,20(sp)
80204a20:	dcc00417 	ldw	r19,16(sp)
80204a24:	dc800317 	ldw	r18,12(sp)
80204a28:	dc400217 	ldw	r17,8(sp)
80204a2c:	dc000117 	ldw	r16,4(sp)
80204a30:	dec00b04 	addi	sp,sp,44
80204a34:	f800283a 	ret
80204a38:	90002b1e 	bne	r18,zero,80204ae8 <__divsf3+0x244>
80204a3c:	04000104 	movi	r16,4
80204a40:	05c00044 	movi	r23,1
80204a44:	003fb106 	br	8020490c <__reset+0xfa1e490c>
80204a48:	8800251e 	bne	r17,zero,80204ae0 <__divsf3+0x23c>
80204a4c:	01400084 	movi	r5,2
80204a50:	00000206 	br	80204a5c <__divsf3+0x1b8>
80204a54:	88001a1e 	bne	r17,zero,80204ac0 <__divsf3+0x21c>
80204a58:	01400044 	movi	r5,1
80204a5c:	8160b03a 	or	r16,r16,r5
80204a60:	802090ba 	slli	r16,r16,2
80204a64:	00e00834 	movhi	r3,32800
80204a68:	18d2a004 	addi	r3,r3,19072
80204a6c:	80e1883a 	add	r16,r16,r3
80204a70:	80c00017 	ldw	r3,0(r16)
80204a74:	9d44f03a 	xor	r2,r19,r21
80204a78:	a18dc83a 	sub	r6,r20,r6
80204a7c:	1800683a 	jmp	r3
80204a80:	802049d8 	cmpnei	zero,r16,-32473
80204a84:	802049d8 	cmpnei	zero,r16,-32473
80204a88:	80204c24 	muli	zero,r16,-32464
80204a8c:	802049c0 	call	8802049c <__reset+0x200049c>
80204a90:	80204c24 	muli	zero,r16,-32464
80204a94:	80204b20 	cmpeqi	zero,r16,-32468
80204a98:	80204c24 	muli	zero,r16,-32464
80204a9c:	802049c0 	call	8802049c <__reset+0x200049c>
80204aa0:	802049d8 	cmpnei	zero,r16,-32473
80204aa4:	802049d8 	cmpnei	zero,r16,-32473
80204aa8:	80204b20 	cmpeqi	zero,r16,-32468
80204aac:	802049c0 	call	8802049c <__reset+0x200049c>
80204ab0:	80204c34 	orhi	zero,r16,33072
80204ab4:	80204c34 	orhi	zero,r16,33072
80204ab8:	80204c34 	orhi	zero,r16,33072
80204abc:	80204c4c 	andi	zero,r16,33073
80204ac0:	8809883a 	mov	r4,r17
80204ac4:	02050080 	call	80205008 <__clzsi2>
80204ac8:	10fffec4 	addi	r3,r2,-5
80204acc:	10801d84 	addi	r2,r2,118
80204ad0:	88e2983a 	sll	r17,r17,r3
80204ad4:	008dc83a 	sub	r6,zero,r2
80204ad8:	000b883a 	mov	r5,zero
80204adc:	003f9906 	br	80204944 <__reset+0xfa1e4944>
80204ae0:	014000c4 	movi	r5,3
80204ae4:	003f9706 	br	80204944 <__reset+0xfa1e4944>
80204ae8:	9009883a 	mov	r4,r18
80204aec:	d9400015 	stw	r5,0(sp)
80204af0:	02050080 	call	80205008 <__clzsi2>
80204af4:	10fffec4 	addi	r3,r2,-5
80204af8:	11801d84 	addi	r6,r2,118
80204afc:	90e4983a 	sll	r18,r18,r3
80204b00:	01a9c83a 	sub	r20,zero,r6
80204b04:	0021883a 	mov	r16,zero
80204b08:	002f883a 	mov	r23,zero
80204b0c:	d9400017 	ldw	r5,0(sp)
80204b10:	003f7e06 	br	8020490c <__reset+0xfa1e490c>
80204b14:	04000304 	movi	r16,12
80204b18:	05c000c4 	movi	r23,3
80204b1c:	003f7b06 	br	8020490c <__reset+0xfa1e490c>
80204b20:	01802034 	movhi	r6,128
80204b24:	000f883a 	mov	r7,zero
80204b28:	31bfffc4 	addi	r6,r6,-1
80204b2c:	013fffc4 	movi	r4,-1
80204b30:	003fac06 	br	802049e4 <__reset+0xfa1e49e4>
80204b34:	01400044 	movi	r5,1
80204b38:	2909c83a 	sub	r4,r5,r4
80204b3c:	00c006c4 	movi	r3,27
80204b40:	19004b0e 	bge	r3,r4,80204c70 <__divsf3+0x3cc>
80204b44:	114e703a 	and	r7,r2,r5
80204b48:	0009883a 	mov	r4,zero
80204b4c:	000d883a 	mov	r6,zero
80204b50:	003fa406 	br	802049e4 <__reset+0xfa1e49e4>
80204b54:	9006917a 	slli	r3,r18,5
80204b58:	8822917a 	slli	r17,r17,5
80204b5c:	1c40372e 	bgeu	r3,r17,80204c3c <__divsf3+0x398>
80204b60:	31bfffc4 	addi	r6,r6,-1
80204b64:	010006c4 	movi	r4,27
80204b68:	000b883a 	mov	r5,zero
80204b6c:	180f883a 	mov	r7,r3
80204b70:	294b883a 	add	r5,r5,r5
80204b74:	18c7883a 	add	r3,r3,r3
80204b78:	38000116 	blt	r7,zero,80204b80 <__divsf3+0x2dc>
80204b7c:	1c400236 	bltu	r3,r17,80204b88 <__divsf3+0x2e4>
80204b80:	1c47c83a 	sub	r3,r3,r17
80204b84:	29400054 	ori	r5,r5,1
80204b88:	213fffc4 	addi	r4,r4,-1
80204b8c:	203ff71e 	bne	r4,zero,80204b6c <__reset+0xfa1e4b6c>
80204b90:	1806c03a 	cmpne	r3,r3,zero
80204b94:	1962b03a 	or	r17,r3,r5
80204b98:	31001fc4 	addi	r4,r6,127
80204b9c:	013fe50e 	bge	zero,r4,80204b34 <__reset+0xfa1e4b34>
80204ba0:	88c001cc 	andi	r3,r17,7
80204ba4:	18000426 	beq	r3,zero,80204bb8 <__divsf3+0x314>
80204ba8:	88c003cc 	andi	r3,r17,15
80204bac:	01400104 	movi	r5,4
80204bb0:	19400126 	beq	r3,r5,80204bb8 <__divsf3+0x314>
80204bb4:	8963883a 	add	r17,r17,r5
80204bb8:	88c2002c 	andhi	r3,r17,2048
80204bbc:	18000426 	beq	r3,zero,80204bd0 <__divsf3+0x32c>
80204bc0:	00fe0034 	movhi	r3,63488
80204bc4:	18ffffc4 	addi	r3,r3,-1
80204bc8:	31002004 	addi	r4,r6,128
80204bcc:	88e2703a 	and	r17,r17,r3
80204bd0:	00c03f84 	movi	r3,254
80204bd4:	193f8016 	blt	r3,r4,802049d8 <__reset+0xfa1e49d8>
80204bd8:	880c91ba 	slli	r6,r17,6
80204bdc:	11c0004c 	andi	r7,r2,1
80204be0:	300cd27a 	srli	r6,r6,9
80204be4:	003f7f06 	br	802049e4 <__reset+0xfa1e49e4>
80204be8:	9080102c 	andhi	r2,r18,64
80204bec:	10000226 	beq	r2,zero,80204bf8 <__divsf3+0x354>
80204bf0:	8880102c 	andhi	r2,r17,64
80204bf4:	10001826 	beq	r2,zero,80204c58 <__divsf3+0x3b4>
80204bf8:	00802034 	movhi	r2,128
80204bfc:	91801034 	orhi	r6,r18,64
80204c00:	10bfffc4 	addi	r2,r2,-1
80204c04:	980f883a 	mov	r7,r19
80204c08:	308c703a 	and	r6,r6,r2
80204c0c:	003fc706 	br	80204b2c <__reset+0xfa1e4b2c>
80204c10:	008000c4 	movi	r2,3
80204c14:	b8802d26 	beq	r23,r2,80204ccc <__divsf3+0x428>
80204c18:	00c00044 	movi	r3,1
80204c1c:	b005883a 	mov	r2,r22
80204c20:	b8ffdd1e 	bne	r23,r3,80204b98 <__reset+0xfa1e4b98>
80204c24:	11c0004c 	andi	r7,r2,1
80204c28:	0009883a 	mov	r4,zero
80204c2c:	000d883a 	mov	r6,zero
80204c30:	003f6c06 	br	802049e4 <__reset+0xfa1e49e4>
80204c34:	9023883a 	mov	r17,r18
80204c38:	003f6406 	br	802049cc <__reset+0xfa1e49cc>
80204c3c:	1c47c83a 	sub	r3,r3,r17
80204c40:	01000684 	movi	r4,26
80204c44:	01400044 	movi	r5,1
80204c48:	003fc806 	br	80204b6c <__reset+0xfa1e4b6c>
80204c4c:	9080102c 	andhi	r2,r18,64
80204c50:	103fe926 	beq	r2,zero,80204bf8 <__reset+0xfa1e4bf8>
80204c54:	0023883a 	mov	r17,zero
80204c58:	00802034 	movhi	r2,128
80204c5c:	89801034 	orhi	r6,r17,64
80204c60:	10bfffc4 	addi	r2,r2,-1
80204c64:	a80f883a 	mov	r7,r21
80204c68:	308c703a 	and	r6,r6,r2
80204c6c:	003faf06 	br	80204b2c <__reset+0xfa1e4b2c>
80204c70:	01c00804 	movi	r7,32
80204c74:	390fc83a 	sub	r7,r7,r4
80204c78:	89ce983a 	sll	r7,r17,r7
80204c7c:	890ad83a 	srl	r5,r17,r4
80204c80:	380ec03a 	cmpne	r7,r7,zero
80204c84:	29cab03a 	or	r5,r5,r7
80204c88:	28c001cc 	andi	r3,r5,7
80204c8c:	18000426 	beq	r3,zero,80204ca0 <__divsf3+0x3fc>
80204c90:	28c003cc 	andi	r3,r5,15
80204c94:	01000104 	movi	r4,4
80204c98:	19000126 	beq	r3,r4,80204ca0 <__divsf3+0x3fc>
80204c9c:	290b883a 	add	r5,r5,r4
80204ca0:	28c1002c 	andhi	r3,r5,1024
80204ca4:	18000426 	beq	r3,zero,80204cb8 <__divsf3+0x414>
80204ca8:	11c0004c 	andi	r7,r2,1
80204cac:	01000044 	movi	r4,1
80204cb0:	000d883a 	mov	r6,zero
80204cb4:	003f4b06 	br	802049e4 <__reset+0xfa1e49e4>
80204cb8:	280a91ba 	slli	r5,r5,6
80204cbc:	11c0004c 	andi	r7,r2,1
80204cc0:	0009883a 	mov	r4,zero
80204cc4:	280cd27a 	srli	r6,r5,9
80204cc8:	003f4606 	br	802049e4 <__reset+0xfa1e49e4>
80204ccc:	00802034 	movhi	r2,128
80204cd0:	89801034 	orhi	r6,r17,64
80204cd4:	10bfffc4 	addi	r2,r2,-1
80204cd8:	b00f883a 	mov	r7,r22
80204cdc:	308c703a 	and	r6,r6,r2
80204ce0:	003f9206 	br	80204b2c <__reset+0xfa1e4b2c>

80204ce4 <__floatsisf>:
80204ce4:	defffd04 	addi	sp,sp,-12
80204ce8:	dfc00215 	stw	ra,8(sp)
80204cec:	dc400115 	stw	r17,4(sp)
80204cf0:	dc000015 	stw	r16,0(sp)
80204cf4:	20003526 	beq	r4,zero,80204dcc <__floatsisf+0xe8>
80204cf8:	2021883a 	mov	r16,r4
80204cfc:	2022d7fa 	srli	r17,r4,31
80204d00:	20003616 	blt	r4,zero,80204ddc <__floatsisf+0xf8>
80204d04:	8009883a 	mov	r4,r16
80204d08:	02050080 	call	80205008 <__clzsi2>
80204d0c:	00c02784 	movi	r3,158
80204d10:	1887c83a 	sub	r3,r3,r2
80204d14:	01002584 	movi	r4,150
80204d18:	20c01416 	blt	r4,r3,80204d6c <__floatsisf+0x88>
80204d1c:	20c9c83a 	sub	r4,r4,r3
80204d20:	8120983a 	sll	r16,r16,r4
80204d24:	00802034 	movhi	r2,128
80204d28:	10bfffc4 	addi	r2,r2,-1
80204d2c:	8809883a 	mov	r4,r17
80204d30:	80a0703a 	and	r16,r16,r2
80204d34:	18803fcc 	andi	r2,r3,255
80204d38:	100695fa 	slli	r3,r2,23
80204d3c:	20803fcc 	andi	r2,r4,255
80204d40:	100897fa 	slli	r4,r2,31
80204d44:	00802034 	movhi	r2,128
80204d48:	10bfffc4 	addi	r2,r2,-1
80204d4c:	8084703a 	and	r2,r16,r2
80204d50:	10c4b03a 	or	r2,r2,r3
80204d54:	1104b03a 	or	r2,r2,r4
80204d58:	dfc00217 	ldw	ra,8(sp)
80204d5c:	dc400117 	ldw	r17,4(sp)
80204d60:	dc000017 	ldw	r16,0(sp)
80204d64:	dec00304 	addi	sp,sp,12
80204d68:	f800283a 	ret
80204d6c:	01002644 	movi	r4,153
80204d70:	20c01c16 	blt	r4,r3,80204de4 <__floatsisf+0x100>
80204d74:	20c9c83a 	sub	r4,r4,r3
80204d78:	8120983a 	sll	r16,r16,r4
80204d7c:	013f0034 	movhi	r4,64512
80204d80:	213fffc4 	addi	r4,r4,-1
80204d84:	814001cc 	andi	r5,r16,7
80204d88:	8108703a 	and	r4,r16,r4
80204d8c:	28000426 	beq	r5,zero,80204da0 <__floatsisf+0xbc>
80204d90:	840003cc 	andi	r16,r16,15
80204d94:	01400104 	movi	r5,4
80204d98:	81400126 	beq	r16,r5,80204da0 <__floatsisf+0xbc>
80204d9c:	2149883a 	add	r4,r4,r5
80204da0:	2141002c 	andhi	r5,r4,1024
80204da4:	28000526 	beq	r5,zero,80204dbc <__floatsisf+0xd8>
80204da8:	00c027c4 	movi	r3,159
80204dac:	1887c83a 	sub	r3,r3,r2
80204db0:	00bf0034 	movhi	r2,64512
80204db4:	10bfffc4 	addi	r2,r2,-1
80204db8:	2088703a 	and	r4,r4,r2
80204dbc:	202091ba 	slli	r16,r4,6
80204dc0:	8809883a 	mov	r4,r17
80204dc4:	8020d27a 	srli	r16,r16,9
80204dc8:	003fda06 	br	80204d34 <__reset+0xfa1e4d34>
80204dcc:	0009883a 	mov	r4,zero
80204dd0:	0007883a 	mov	r3,zero
80204dd4:	0021883a 	mov	r16,zero
80204dd8:	003fd606 	br	80204d34 <__reset+0xfa1e4d34>
80204ddc:	0121c83a 	sub	r16,zero,r4
80204de0:	003fc806 	br	80204d04 <__reset+0xfa1e4d04>
80204de4:	01002e44 	movi	r4,185
80204de8:	20c9c83a 	sub	r4,r4,r3
80204dec:	01400144 	movi	r5,5
80204df0:	8108983a 	sll	r4,r16,r4
80204df4:	288bc83a 	sub	r5,r5,r2
80204df8:	8160d83a 	srl	r16,r16,r5
80204dfc:	2008c03a 	cmpne	r4,r4,zero
80204e00:	8120b03a 	or	r16,r16,r4
80204e04:	003fdd06 	br	80204d7c <__reset+0xfa1e4d7c>

80204e08 <__floatunsisf>:
80204e08:	defffe04 	addi	sp,sp,-8
80204e0c:	dfc00115 	stw	ra,4(sp)
80204e10:	dc000015 	stw	r16,0(sp)
80204e14:	20002c26 	beq	r4,zero,80204ec8 <__floatunsisf+0xc0>
80204e18:	2021883a 	mov	r16,r4
80204e1c:	02050080 	call	80205008 <__clzsi2>
80204e20:	00c02784 	movi	r3,158
80204e24:	1887c83a 	sub	r3,r3,r2
80204e28:	01002584 	movi	r4,150
80204e2c:	20c00f16 	blt	r4,r3,80204e6c <__floatunsisf+0x64>
80204e30:	20c9c83a 	sub	r4,r4,r3
80204e34:	8108983a 	sll	r4,r16,r4
80204e38:	00802034 	movhi	r2,128
80204e3c:	10bfffc4 	addi	r2,r2,-1
80204e40:	2088703a 	and	r4,r4,r2
80204e44:	18803fcc 	andi	r2,r3,255
80204e48:	100695fa 	slli	r3,r2,23
80204e4c:	00802034 	movhi	r2,128
80204e50:	10bfffc4 	addi	r2,r2,-1
80204e54:	2084703a 	and	r2,r4,r2
80204e58:	10c4b03a 	or	r2,r2,r3
80204e5c:	dfc00117 	ldw	ra,4(sp)
80204e60:	dc000017 	ldw	r16,0(sp)
80204e64:	dec00204 	addi	sp,sp,8
80204e68:	f800283a 	ret
80204e6c:	01002644 	movi	r4,153
80204e70:	20c01816 	blt	r4,r3,80204ed4 <__floatunsisf+0xcc>
80204e74:	20c9c83a 	sub	r4,r4,r3
80204e78:	8108983a 	sll	r4,r16,r4
80204e7c:	017f0034 	movhi	r5,64512
80204e80:	297fffc4 	addi	r5,r5,-1
80204e84:	218001cc 	andi	r6,r4,7
80204e88:	214a703a 	and	r5,r4,r5
80204e8c:	30000426 	beq	r6,zero,80204ea0 <__floatunsisf+0x98>
80204e90:	210003cc 	andi	r4,r4,15
80204e94:	01800104 	movi	r6,4
80204e98:	21800126 	beq	r4,r6,80204ea0 <__floatunsisf+0x98>
80204e9c:	298b883a 	add	r5,r5,r6
80204ea0:	2901002c 	andhi	r4,r5,1024
80204ea4:	20000526 	beq	r4,zero,80204ebc <__floatunsisf+0xb4>
80204ea8:	00c027c4 	movi	r3,159
80204eac:	1887c83a 	sub	r3,r3,r2
80204eb0:	00bf0034 	movhi	r2,64512
80204eb4:	10bfffc4 	addi	r2,r2,-1
80204eb8:	288a703a 	and	r5,r5,r2
80204ebc:	280891ba 	slli	r4,r5,6
80204ec0:	2008d27a 	srli	r4,r4,9
80204ec4:	003fdf06 	br	80204e44 <__reset+0xfa1e4e44>
80204ec8:	0007883a 	mov	r3,zero
80204ecc:	0009883a 	mov	r4,zero
80204ed0:	003fdc06 	br	80204e44 <__reset+0xfa1e4e44>
80204ed4:	01402e44 	movi	r5,185
80204ed8:	28cbc83a 	sub	r5,r5,r3
80204edc:	01000144 	movi	r4,5
80204ee0:	2089c83a 	sub	r4,r4,r2
80204ee4:	814a983a 	sll	r5,r16,r5
80204ee8:	8108d83a 	srl	r4,r16,r4
80204eec:	2820c03a 	cmpne	r16,r5,zero
80204ef0:	2408b03a 	or	r4,r4,r16
80204ef4:	003fe106 	br	80204e7c <__reset+0xfa1e4e7c>

80204ef8 <__extendsfdf2>:
80204ef8:	200ad5fa 	srli	r5,r4,23
80204efc:	defffd04 	addi	sp,sp,-12
80204f00:	dc400115 	stw	r17,4(sp)
80204f04:	29403fcc 	andi	r5,r5,255
80204f08:	29800044 	addi	r6,r5,1
80204f0c:	04402034 	movhi	r17,128
80204f10:	dc000015 	stw	r16,0(sp)
80204f14:	8c7fffc4 	addi	r17,r17,-1
80204f18:	dfc00215 	stw	ra,8(sp)
80204f1c:	31803fcc 	andi	r6,r6,255
80204f20:	00800044 	movi	r2,1
80204f24:	8922703a 	and	r17,r17,r4
80204f28:	2020d7fa 	srli	r16,r4,31
80204f2c:	1180110e 	bge	r2,r6,80204f74 <__extendsfdf2+0x7c>
80204f30:	880cd0fa 	srli	r6,r17,3
80204f34:	8822977a 	slli	r17,r17,29
80204f38:	2940e004 	addi	r5,r5,896
80204f3c:	2941ffcc 	andi	r5,r5,2047
80204f40:	2804953a 	slli	r2,r5,20
80204f44:	01400434 	movhi	r5,16
80204f48:	800697fa 	slli	r3,r16,31
80204f4c:	297fffc4 	addi	r5,r5,-1
80204f50:	314a703a 	and	r5,r6,r5
80204f54:	288ab03a 	or	r5,r5,r2
80204f58:	28c6b03a 	or	r3,r5,r3
80204f5c:	8805883a 	mov	r2,r17
80204f60:	dfc00217 	ldw	ra,8(sp)
80204f64:	dc400117 	ldw	r17,4(sp)
80204f68:	dc000017 	ldw	r16,0(sp)
80204f6c:	dec00304 	addi	sp,sp,12
80204f70:	f800283a 	ret
80204f74:	2800111e 	bne	r5,zero,80204fbc <__extendsfdf2+0xc4>
80204f78:	88001c26 	beq	r17,zero,80204fec <__extendsfdf2+0xf4>
80204f7c:	8809883a 	mov	r4,r17
80204f80:	02050080 	call	80205008 <__clzsi2>
80204f84:	00c00284 	movi	r3,10
80204f88:	18801b16 	blt	r3,r2,80204ff8 <__extendsfdf2+0x100>
80204f8c:	018002c4 	movi	r6,11
80204f90:	308dc83a 	sub	r6,r6,r2
80204f94:	11000544 	addi	r4,r2,21
80204f98:	8986d83a 	srl	r3,r17,r6
80204f9c:	8922983a 	sll	r17,r17,r4
80204fa0:	0180e244 	movi	r6,905
80204fa4:	01400434 	movhi	r5,16
80204fa8:	3085c83a 	sub	r2,r6,r2
80204fac:	297fffc4 	addi	r5,r5,-1
80204fb0:	194c703a 	and	r6,r3,r5
80204fb4:	1141ffcc 	andi	r5,r2,2047
80204fb8:	003fe006 	br	80204f3c <__reset+0xfa1e4f3c>
80204fbc:	88000826 	beq	r17,zero,80204fe0 <__extendsfdf2+0xe8>
80204fc0:	880cd0fa 	srli	r6,r17,3
80204fc4:	00800434 	movhi	r2,16
80204fc8:	10bfffc4 	addi	r2,r2,-1
80204fcc:	31800234 	orhi	r6,r6,8
80204fd0:	8822977a 	slli	r17,r17,29
80204fd4:	308c703a 	and	r6,r6,r2
80204fd8:	0141ffc4 	movi	r5,2047
80204fdc:	003fd706 	br	80204f3c <__reset+0xfa1e4f3c>
80204fe0:	0141ffc4 	movi	r5,2047
80204fe4:	000d883a 	mov	r6,zero
80204fe8:	003fd406 	br	80204f3c <__reset+0xfa1e4f3c>
80204fec:	000b883a 	mov	r5,zero
80204ff0:	000d883a 	mov	r6,zero
80204ff4:	003fd106 	br	80204f3c <__reset+0xfa1e4f3c>
80204ff8:	11bffd44 	addi	r6,r2,-11
80204ffc:	8986983a 	sll	r3,r17,r6
80205000:	0023883a 	mov	r17,zero
80205004:	003fe606 	br	80204fa0 <__reset+0xfa1e4fa0>

80205008 <__clzsi2>:
80205008:	00bfffd4 	movui	r2,65535
8020500c:	11000536 	bltu	r2,r4,80205024 <__clzsi2+0x1c>
80205010:	00803fc4 	movi	r2,255
80205014:	11000f36 	bltu	r2,r4,80205054 <__clzsi2+0x4c>
80205018:	00800804 	movi	r2,32
8020501c:	0007883a 	mov	r3,zero
80205020:	00000506 	br	80205038 <__clzsi2+0x30>
80205024:	00804034 	movhi	r2,256
80205028:	10bfffc4 	addi	r2,r2,-1
8020502c:	11000c2e 	bgeu	r2,r4,80205060 <__clzsi2+0x58>
80205030:	00800204 	movi	r2,8
80205034:	00c00604 	movi	r3,24
80205038:	20c8d83a 	srl	r4,r4,r3
8020503c:	00e008b4 	movhi	r3,32802
80205040:	18ec74c4 	addi	r3,r3,-20013
80205044:	1909883a 	add	r4,r3,r4
80205048:	20c00003 	ldbu	r3,0(r4)
8020504c:	10c5c83a 	sub	r2,r2,r3
80205050:	f800283a 	ret
80205054:	00800604 	movi	r2,24
80205058:	00c00204 	movi	r3,8
8020505c:	003ff606 	br	80205038 <__reset+0xfa1e5038>
80205060:	00800404 	movi	r2,16
80205064:	1007883a 	mov	r3,r2
80205068:	003ff306 	br	80205038 <__reset+0xfa1e5038>

8020506c <_fwrite_r>:
8020506c:	defff504 	addi	sp,sp,-44
80205070:	dc800815 	stw	r18,32(sp)
80205074:	39a5383a 	mul	r18,r7,r6
80205078:	d8800304 	addi	r2,sp,12
8020507c:	d8800015 	stw	r2,0(sp)
80205080:	00800044 	movi	r2,1
80205084:	dcc00915 	stw	r19,36(sp)
80205088:	dc400715 	stw	r17,28(sp)
8020508c:	dc000615 	stw	r16,24(sp)
80205090:	d9400315 	stw	r5,12(sp)
80205094:	dfc00a15 	stw	ra,40(sp)
80205098:	dc800415 	stw	r18,16(sp)
8020509c:	dc800215 	stw	r18,8(sp)
802050a0:	d8800115 	stw	r2,4(sp)
802050a4:	3027883a 	mov	r19,r6
802050a8:	3821883a 	mov	r16,r7
802050ac:	2023883a 	mov	r17,r4
802050b0:	d9400b17 	ldw	r5,44(sp)
802050b4:	20000226 	beq	r4,zero,802050c0 <_fwrite_r+0x54>
802050b8:	20800e17 	ldw	r2,56(r4)
802050bc:	10001a26 	beq	r2,zero,80205128 <_fwrite_r+0xbc>
802050c0:	2880030b 	ldhu	r2,12(r5)
802050c4:	10c8000c 	andi	r3,r2,8192
802050c8:	1800061e 	bne	r3,zero,802050e4 <_fwrite_r+0x78>
802050cc:	29001917 	ldw	r4,100(r5)
802050d0:	00f7ffc4 	movi	r3,-8193
802050d4:	10880014 	ori	r2,r2,8192
802050d8:	20c6703a 	and	r3,r4,r3
802050dc:	2880030d 	sth	r2,12(r5)
802050e0:	28c01915 	stw	r3,100(r5)
802050e4:	d80d883a 	mov	r6,sp
802050e8:	8809883a 	mov	r4,r17
802050ec:	020be500 	call	8020be50 <__sfvwrite_r>
802050f0:	10000b26 	beq	r2,zero,80205120 <_fwrite_r+0xb4>
802050f4:	d9000217 	ldw	r4,8(sp)
802050f8:	980b883a 	mov	r5,r19
802050fc:	9109c83a 	sub	r4,r18,r4
80205100:	0212a100 	call	80212a10 <__udivsi3>
80205104:	dfc00a17 	ldw	ra,40(sp)
80205108:	dcc00917 	ldw	r19,36(sp)
8020510c:	dc800817 	ldw	r18,32(sp)
80205110:	dc400717 	ldw	r17,28(sp)
80205114:	dc000617 	ldw	r16,24(sp)
80205118:	dec00b04 	addi	sp,sp,44
8020511c:	f800283a 	ret
80205120:	8005883a 	mov	r2,r16
80205124:	003ff706 	br	80205104 <__reset+0xfa1e5104>
80205128:	d9400515 	stw	r5,20(sp)
8020512c:	020b9cc0 	call	8020b9cc <__sinit>
80205130:	d9400517 	ldw	r5,20(sp)
80205134:	003fe206 	br	802050c0 <__reset+0xfa1e50c0>

80205138 <fwrite>:
80205138:	defffe04 	addi	sp,sp,-8
8020513c:	00a008b4 	movhi	r2,32802
80205140:	d9c00015 	stw	r7,0(sp)
80205144:	10b4fd04 	addi	r2,r2,-11276
80205148:	300f883a 	mov	r7,r6
8020514c:	280d883a 	mov	r6,r5
80205150:	200b883a 	mov	r5,r4
80205154:	11000017 	ldw	r4,0(r2)
80205158:	dfc00115 	stw	ra,4(sp)
8020515c:	020506c0 	call	8020506c <_fwrite_r>
80205160:	dfc00117 	ldw	ra,4(sp)
80205164:	dec00204 	addi	sp,sp,8
80205168:	f800283a 	ret

8020516c <memcpy>:
8020516c:	defffd04 	addi	sp,sp,-12
80205170:	dfc00215 	stw	ra,8(sp)
80205174:	dc400115 	stw	r17,4(sp)
80205178:	dc000015 	stw	r16,0(sp)
8020517c:	00c003c4 	movi	r3,15
80205180:	2005883a 	mov	r2,r4
80205184:	1980452e 	bgeu	r3,r6,8020529c <memcpy+0x130>
80205188:	2906b03a 	or	r3,r5,r4
8020518c:	18c000cc 	andi	r3,r3,3
80205190:	1800441e 	bne	r3,zero,802052a4 <memcpy+0x138>
80205194:	347ffc04 	addi	r17,r6,-16
80205198:	8822d13a 	srli	r17,r17,4
8020519c:	28c00104 	addi	r3,r5,4
802051a0:	23400104 	addi	r13,r4,4
802051a4:	8820913a 	slli	r16,r17,4
802051a8:	2b000204 	addi	r12,r5,8
802051ac:	22c00204 	addi	r11,r4,8
802051b0:	84000504 	addi	r16,r16,20
802051b4:	2a800304 	addi	r10,r5,12
802051b8:	22400304 	addi	r9,r4,12
802051bc:	2c21883a 	add	r16,r5,r16
802051c0:	2811883a 	mov	r8,r5
802051c4:	200f883a 	mov	r7,r4
802051c8:	41000017 	ldw	r4,0(r8)
802051cc:	1fc00017 	ldw	ra,0(r3)
802051d0:	63c00017 	ldw	r15,0(r12)
802051d4:	39000015 	stw	r4,0(r7)
802051d8:	53800017 	ldw	r14,0(r10)
802051dc:	6fc00015 	stw	ra,0(r13)
802051e0:	5bc00015 	stw	r15,0(r11)
802051e4:	4b800015 	stw	r14,0(r9)
802051e8:	18c00404 	addi	r3,r3,16
802051ec:	39c00404 	addi	r7,r7,16
802051f0:	42000404 	addi	r8,r8,16
802051f4:	6b400404 	addi	r13,r13,16
802051f8:	63000404 	addi	r12,r12,16
802051fc:	5ac00404 	addi	r11,r11,16
80205200:	52800404 	addi	r10,r10,16
80205204:	4a400404 	addi	r9,r9,16
80205208:	1c3fef1e 	bne	r3,r16,802051c8 <__reset+0xfa1e51c8>
8020520c:	89c00044 	addi	r7,r17,1
80205210:	380e913a 	slli	r7,r7,4
80205214:	310003cc 	andi	r4,r6,15
80205218:	02c000c4 	movi	r11,3
8020521c:	11c7883a 	add	r3,r2,r7
80205220:	29cb883a 	add	r5,r5,r7
80205224:	5900212e 	bgeu	r11,r4,802052ac <memcpy+0x140>
80205228:	1813883a 	mov	r9,r3
8020522c:	2811883a 	mov	r8,r5
80205230:	200f883a 	mov	r7,r4
80205234:	42800017 	ldw	r10,0(r8)
80205238:	4a400104 	addi	r9,r9,4
8020523c:	39ffff04 	addi	r7,r7,-4
80205240:	4abfff15 	stw	r10,-4(r9)
80205244:	42000104 	addi	r8,r8,4
80205248:	59fffa36 	bltu	r11,r7,80205234 <__reset+0xfa1e5234>
8020524c:	213fff04 	addi	r4,r4,-4
80205250:	2008d0ba 	srli	r4,r4,2
80205254:	318000cc 	andi	r6,r6,3
80205258:	21000044 	addi	r4,r4,1
8020525c:	2109883a 	add	r4,r4,r4
80205260:	2109883a 	add	r4,r4,r4
80205264:	1907883a 	add	r3,r3,r4
80205268:	290b883a 	add	r5,r5,r4
8020526c:	30000626 	beq	r6,zero,80205288 <memcpy+0x11c>
80205270:	198d883a 	add	r6,r3,r6
80205274:	29c00003 	ldbu	r7,0(r5)
80205278:	18c00044 	addi	r3,r3,1
8020527c:	29400044 	addi	r5,r5,1
80205280:	19ffffc5 	stb	r7,-1(r3)
80205284:	19bffb1e 	bne	r3,r6,80205274 <__reset+0xfa1e5274>
80205288:	dfc00217 	ldw	ra,8(sp)
8020528c:	dc400117 	ldw	r17,4(sp)
80205290:	dc000017 	ldw	r16,0(sp)
80205294:	dec00304 	addi	sp,sp,12
80205298:	f800283a 	ret
8020529c:	2007883a 	mov	r3,r4
802052a0:	003ff206 	br	8020526c <__reset+0xfa1e526c>
802052a4:	2007883a 	mov	r3,r4
802052a8:	003ff106 	br	80205270 <__reset+0xfa1e5270>
802052ac:	200d883a 	mov	r6,r4
802052b0:	003fee06 	br	8020526c <__reset+0xfa1e526c>

802052b4 <_printf_r>:
802052b4:	defffd04 	addi	sp,sp,-12
802052b8:	2805883a 	mov	r2,r5
802052bc:	dfc00015 	stw	ra,0(sp)
802052c0:	d9800115 	stw	r6,4(sp)
802052c4:	d9c00215 	stw	r7,8(sp)
802052c8:	21400217 	ldw	r5,8(r4)
802052cc:	d9c00104 	addi	r7,sp,4
802052d0:	100d883a 	mov	r6,r2
802052d4:	02077280 	call	80207728 <___vfprintf_internal_r>
802052d8:	dfc00017 	ldw	ra,0(sp)
802052dc:	dec00304 	addi	sp,sp,12
802052e0:	f800283a 	ret

802052e4 <printf>:
802052e4:	defffc04 	addi	sp,sp,-16
802052e8:	dfc00015 	stw	ra,0(sp)
802052ec:	d9400115 	stw	r5,4(sp)
802052f0:	d9800215 	stw	r6,8(sp)
802052f4:	d9c00315 	stw	r7,12(sp)
802052f8:	00a008b4 	movhi	r2,32802
802052fc:	10b4fd04 	addi	r2,r2,-11276
80205300:	10800017 	ldw	r2,0(r2)
80205304:	200b883a 	mov	r5,r4
80205308:	d9800104 	addi	r6,sp,4
8020530c:	11000217 	ldw	r4,8(r2)
80205310:	02099200 	call	80209920 <__vfprintf_internal>
80205314:	dfc00017 	ldw	ra,0(sp)
80205318:	dec00404 	addi	sp,sp,16
8020531c:	f800283a 	ret

80205320 <_puts_r>:
80205320:	defff604 	addi	sp,sp,-40
80205324:	dc000715 	stw	r16,28(sp)
80205328:	2021883a 	mov	r16,r4
8020532c:	2809883a 	mov	r4,r5
80205330:	dc400815 	stw	r17,32(sp)
80205334:	dfc00915 	stw	ra,36(sp)
80205338:	2823883a 	mov	r17,r5
8020533c:	02054b80 	call	802054b8 <strlen>
80205340:	10c00044 	addi	r3,r2,1
80205344:	d8800115 	stw	r2,4(sp)
80205348:	00a008b4 	movhi	r2,32802
8020534c:	10acb604 	addi	r2,r2,-19752
80205350:	d8800215 	stw	r2,8(sp)
80205354:	00800044 	movi	r2,1
80205358:	d8800315 	stw	r2,12(sp)
8020535c:	00800084 	movi	r2,2
80205360:	dc400015 	stw	r17,0(sp)
80205364:	d8c00615 	stw	r3,24(sp)
80205368:	dec00415 	stw	sp,16(sp)
8020536c:	d8800515 	stw	r2,20(sp)
80205370:	80000226 	beq	r16,zero,8020537c <_puts_r+0x5c>
80205374:	80800e17 	ldw	r2,56(r16)
80205378:	10001426 	beq	r2,zero,802053cc <_puts_r+0xac>
8020537c:	81400217 	ldw	r5,8(r16)
80205380:	2880030b 	ldhu	r2,12(r5)
80205384:	10c8000c 	andi	r3,r2,8192
80205388:	1800061e 	bne	r3,zero,802053a4 <_puts_r+0x84>
8020538c:	29001917 	ldw	r4,100(r5)
80205390:	00f7ffc4 	movi	r3,-8193
80205394:	10880014 	ori	r2,r2,8192
80205398:	20c6703a 	and	r3,r4,r3
8020539c:	2880030d 	sth	r2,12(r5)
802053a0:	28c01915 	stw	r3,100(r5)
802053a4:	d9800404 	addi	r6,sp,16
802053a8:	8009883a 	mov	r4,r16
802053ac:	020be500 	call	8020be50 <__sfvwrite_r>
802053b0:	1000091e 	bne	r2,zero,802053d8 <_puts_r+0xb8>
802053b4:	00800284 	movi	r2,10
802053b8:	dfc00917 	ldw	ra,36(sp)
802053bc:	dc400817 	ldw	r17,32(sp)
802053c0:	dc000717 	ldw	r16,28(sp)
802053c4:	dec00a04 	addi	sp,sp,40
802053c8:	f800283a 	ret
802053cc:	8009883a 	mov	r4,r16
802053d0:	020b9cc0 	call	8020b9cc <__sinit>
802053d4:	003fe906 	br	8020537c <__reset+0xfa1e537c>
802053d8:	00bfffc4 	movi	r2,-1
802053dc:	003ff606 	br	802053b8 <__reset+0xfa1e53b8>

802053e0 <puts>:
802053e0:	00a008b4 	movhi	r2,32802
802053e4:	10b4fd04 	addi	r2,r2,-11276
802053e8:	200b883a 	mov	r5,r4
802053ec:	11000017 	ldw	r4,0(r2)
802053f0:	02053201 	jmpi	80205320 <_puts_r>

802053f4 <_sprintf_r>:
802053f4:	deffe404 	addi	sp,sp,-112
802053f8:	2807883a 	mov	r3,r5
802053fc:	dfc01a15 	stw	ra,104(sp)
80205400:	d9c01b15 	stw	r7,108(sp)
80205404:	00a00034 	movhi	r2,32768
80205408:	10bfffc4 	addi	r2,r2,-1
8020540c:	02008204 	movi	r8,520
80205410:	d8800215 	stw	r2,8(sp)
80205414:	d8800515 	stw	r2,20(sp)
80205418:	d9c01b04 	addi	r7,sp,108
8020541c:	d80b883a 	mov	r5,sp
80205420:	00bfffc4 	movi	r2,-1
80205424:	d8c00015 	stw	r3,0(sp)
80205428:	d8c00415 	stw	r3,16(sp)
8020542c:	da00030d 	sth	r8,12(sp)
80205430:	d880038d 	sth	r2,14(sp)
80205434:	02055500 	call	80205550 <___svfprintf_internal_r>
80205438:	d8c00017 	ldw	r3,0(sp)
8020543c:	18000005 	stb	zero,0(r3)
80205440:	dfc01a17 	ldw	ra,104(sp)
80205444:	dec01c04 	addi	sp,sp,112
80205448:	f800283a 	ret

8020544c <sprintf>:
8020544c:	deffe304 	addi	sp,sp,-116
80205450:	2007883a 	mov	r3,r4
80205454:	dfc01a15 	stw	ra,104(sp)
80205458:	d9801b15 	stw	r6,108(sp)
8020545c:	d9c01c15 	stw	r7,112(sp)
80205460:	012008b4 	movhi	r4,32802
80205464:	2134fd04 	addi	r4,r4,-11276
80205468:	21000017 	ldw	r4,0(r4)
8020546c:	00a00034 	movhi	r2,32768
80205470:	10bfffc4 	addi	r2,r2,-1
80205474:	280d883a 	mov	r6,r5
80205478:	02008204 	movi	r8,520
8020547c:	d8800215 	stw	r2,8(sp)
80205480:	d8800515 	stw	r2,20(sp)
80205484:	d9c01b04 	addi	r7,sp,108
80205488:	d80b883a 	mov	r5,sp
8020548c:	00bfffc4 	movi	r2,-1
80205490:	d8c00015 	stw	r3,0(sp)
80205494:	d8c00415 	stw	r3,16(sp)
80205498:	da00030d 	sth	r8,12(sp)
8020549c:	d880038d 	sth	r2,14(sp)
802054a0:	02055500 	call	80205550 <___svfprintf_internal_r>
802054a4:	d8c00017 	ldw	r3,0(sp)
802054a8:	18000005 	stb	zero,0(r3)
802054ac:	dfc01a17 	ldw	ra,104(sp)
802054b0:	dec01d04 	addi	sp,sp,116
802054b4:	f800283a 	ret

802054b8 <strlen>:
802054b8:	208000cc 	andi	r2,r4,3
802054bc:	10002026 	beq	r2,zero,80205540 <strlen+0x88>
802054c0:	20800007 	ldb	r2,0(r4)
802054c4:	10002026 	beq	r2,zero,80205548 <strlen+0x90>
802054c8:	2005883a 	mov	r2,r4
802054cc:	00000206 	br	802054d8 <strlen+0x20>
802054d0:	10c00007 	ldb	r3,0(r2)
802054d4:	18001826 	beq	r3,zero,80205538 <strlen+0x80>
802054d8:	10800044 	addi	r2,r2,1
802054dc:	10c000cc 	andi	r3,r2,3
802054e0:	183ffb1e 	bne	r3,zero,802054d0 <__reset+0xfa1e54d0>
802054e4:	10c00017 	ldw	r3,0(r2)
802054e8:	01ffbff4 	movhi	r7,65279
802054ec:	39ffbfc4 	addi	r7,r7,-257
802054f0:	00ca303a 	nor	r5,zero,r3
802054f4:	01a02074 	movhi	r6,32897
802054f8:	19c7883a 	add	r3,r3,r7
802054fc:	31a02004 	addi	r6,r6,-32640
80205500:	1946703a 	and	r3,r3,r5
80205504:	1986703a 	and	r3,r3,r6
80205508:	1800091e 	bne	r3,zero,80205530 <strlen+0x78>
8020550c:	10800104 	addi	r2,r2,4
80205510:	10c00017 	ldw	r3,0(r2)
80205514:	19cb883a 	add	r5,r3,r7
80205518:	00c6303a 	nor	r3,zero,r3
8020551c:	28c6703a 	and	r3,r5,r3
80205520:	1986703a 	and	r3,r3,r6
80205524:	183ff926 	beq	r3,zero,8020550c <__reset+0xfa1e550c>
80205528:	00000106 	br	80205530 <strlen+0x78>
8020552c:	10800044 	addi	r2,r2,1
80205530:	10c00007 	ldb	r3,0(r2)
80205534:	183ffd1e 	bne	r3,zero,8020552c <__reset+0xfa1e552c>
80205538:	1105c83a 	sub	r2,r2,r4
8020553c:	f800283a 	ret
80205540:	2005883a 	mov	r2,r4
80205544:	003fe706 	br	802054e4 <__reset+0xfa1e54e4>
80205548:	0005883a 	mov	r2,zero
8020554c:	f800283a 	ret

80205550 <___svfprintf_internal_r>:
80205550:	deffb704 	addi	sp,sp,-292
80205554:	dfc04815 	stw	ra,288(sp)
80205558:	ddc04615 	stw	r23,280(sp)
8020555c:	d9402c15 	stw	r5,176(sp)
80205560:	d9003915 	stw	r4,228(sp)
80205564:	302f883a 	mov	r23,r6
80205568:	d9c02d15 	stw	r7,180(sp)
8020556c:	df004715 	stw	fp,284(sp)
80205570:	dd804515 	stw	r22,276(sp)
80205574:	dd404415 	stw	r21,272(sp)
80205578:	dd004315 	stw	r20,268(sp)
8020557c:	dcc04215 	stw	r19,264(sp)
80205580:	dc804115 	stw	r18,260(sp)
80205584:	dc404015 	stw	r17,256(sp)
80205588:	dc003f15 	stw	r16,252(sp)
8020558c:	020c5400 	call	8020c540 <_localeconv_r>
80205590:	10800017 	ldw	r2,0(r2)
80205594:	1009883a 	mov	r4,r2
80205598:	d8803415 	stw	r2,208(sp)
8020559c:	02054b80 	call	802054b8 <strlen>
802055a0:	d8c02c17 	ldw	r3,176(sp)
802055a4:	d8803815 	stw	r2,224(sp)
802055a8:	1880030b 	ldhu	r2,12(r3)
802055ac:	1080200c 	andi	r2,r2,128
802055b0:	10000226 	beq	r2,zero,802055bc <___svfprintf_internal_r+0x6c>
802055b4:	18800417 	ldw	r2,16(r3)
802055b8:	10067f26 	beq	r2,zero,80206fb8 <___svfprintf_internal_r+0x1a68>
802055bc:	dcc03917 	ldw	r19,228(sp)
802055c0:	d8c00404 	addi	r3,sp,16
802055c4:	056008b4 	movhi	r21,32802
802055c8:	d9001e04 	addi	r4,sp,120
802055cc:	ad6cc784 	addi	r21,r21,-19682
802055d0:	d8c01e15 	stw	r3,120(sp)
802055d4:	d8002015 	stw	zero,128(sp)
802055d8:	d8001f15 	stw	zero,124(sp)
802055dc:	d8003315 	stw	zero,204(sp)
802055e0:	d8003615 	stw	zero,216(sp)
802055e4:	d8003715 	stw	zero,220(sp)
802055e8:	1811883a 	mov	r8,r3
802055ec:	d8003a15 	stw	zero,232(sp)
802055f0:	d8003b15 	stw	zero,236(sp)
802055f4:	d8002f15 	stw	zero,188(sp)
802055f8:	d9002815 	stw	r4,160(sp)
802055fc:	b8800007 	ldb	r2,0(r23)
80205600:	10026726 	beq	r2,zero,80205fa0 <___svfprintf_internal_r+0xa50>
80205604:	00c00944 	movi	r3,37
80205608:	b821883a 	mov	r16,r23
8020560c:	10c0021e 	bne	r2,r3,80205618 <___svfprintf_internal_r+0xc8>
80205610:	00001406 	br	80205664 <___svfprintf_internal_r+0x114>
80205614:	10c00326 	beq	r2,r3,80205624 <___svfprintf_internal_r+0xd4>
80205618:	84000044 	addi	r16,r16,1
8020561c:	80800007 	ldb	r2,0(r16)
80205620:	103ffc1e 	bne	r2,zero,80205614 <__reset+0xfa1e5614>
80205624:	85e3c83a 	sub	r17,r16,r23
80205628:	88000e26 	beq	r17,zero,80205664 <___svfprintf_internal_r+0x114>
8020562c:	d8c02017 	ldw	r3,128(sp)
80205630:	d8801f17 	ldw	r2,124(sp)
80205634:	45c00015 	stw	r23,0(r8)
80205638:	1c47883a 	add	r3,r3,r17
8020563c:	10800044 	addi	r2,r2,1
80205640:	d8c02015 	stw	r3,128(sp)
80205644:	44400115 	stw	r17,4(r8)
80205648:	d8801f15 	stw	r2,124(sp)
8020564c:	00c001c4 	movi	r3,7
80205650:	18809716 	blt	r3,r2,802058b0 <___svfprintf_internal_r+0x360>
80205654:	42000204 	addi	r8,r8,8
80205658:	d9402f17 	ldw	r5,188(sp)
8020565c:	2c4b883a 	add	r5,r5,r17
80205660:	d9402f15 	stw	r5,188(sp)
80205664:	80800007 	ldb	r2,0(r16)
80205668:	10009826 	beq	r2,zero,802058cc <___svfprintf_internal_r+0x37c>
8020566c:	84400047 	ldb	r17,1(r16)
80205670:	00bfffc4 	movi	r2,-1
80205674:	85c00044 	addi	r23,r16,1
80205678:	d8002785 	stb	zero,158(sp)
8020567c:	0007883a 	mov	r3,zero
80205680:	000f883a 	mov	r7,zero
80205684:	d8802915 	stw	r2,164(sp)
80205688:	d8003115 	stw	zero,196(sp)
8020568c:	0025883a 	mov	r18,zero
80205690:	01401604 	movi	r5,88
80205694:	01800244 	movi	r6,9
80205698:	02800a84 	movi	r10,42
8020569c:	02401b04 	movi	r9,108
802056a0:	bdc00044 	addi	r23,r23,1
802056a4:	88bff804 	addi	r2,r17,-32
802056a8:	2882f036 	bltu	r5,r2,8020626c <___svfprintf_internal_r+0xd1c>
802056ac:	100490ba 	slli	r2,r2,2
802056b0:	01200834 	movhi	r4,32800
802056b4:	2115b104 	addi	r4,r4,22212
802056b8:	1105883a 	add	r2,r2,r4
802056bc:	10800017 	ldw	r2,0(r2)
802056c0:	1000683a 	jmp	r2
802056c4:	802061d4 	ori	zero,r16,33159
802056c8:	8020626c 	andhi	zero,r16,33161
802056cc:	8020626c 	andhi	zero,r16,33161
802056d0:	802061c8 	cmpgei	zero,r16,-32377
802056d4:	8020626c 	andhi	zero,r16,33161
802056d8:	8020626c 	andhi	zero,r16,33161
802056dc:	8020626c 	andhi	zero,r16,33161
802056e0:	8020626c 	andhi	zero,r16,33161
802056e4:	8020626c 	andhi	zero,r16,33161
802056e8:	8020626c 	andhi	zero,r16,33161
802056ec:	80205928 	cmpgeui	zero,r16,33124
802056f0:	80206104 	addi	zero,r16,-32380
802056f4:	8020626c 	andhi	zero,r16,33161
802056f8:	80205838 	rdprs	zero,r16,-32416
802056fc:	80205950 	cmplti	zero,r16,-32411
80205700:	8020626c 	andhi	zero,r16,33161
80205704:	802059c4 	addi	zero,r16,-32409
80205708:	80205990 	cmplti	zero,r16,-32410
8020570c:	80205990 	cmplti	zero,r16,-32410
80205710:	80205990 	cmplti	zero,r16,-32410
80205714:	80205990 	cmplti	zero,r16,-32410
80205718:	80205990 	cmplti	zero,r16,-32410
8020571c:	80205990 	cmplti	zero,r16,-32410
80205720:	80205990 	cmplti	zero,r16,-32410
80205724:	80205990 	cmplti	zero,r16,-32410
80205728:	80205990 	cmplti	zero,r16,-32410
8020572c:	8020626c 	andhi	zero,r16,33161
80205730:	8020626c 	andhi	zero,r16,33161
80205734:	8020626c 	andhi	zero,r16,33161
80205738:	8020626c 	andhi	zero,r16,33161
8020573c:	8020626c 	andhi	zero,r16,33161
80205740:	8020626c 	andhi	zero,r16,33161
80205744:	8020626c 	andhi	zero,r16,33161
80205748:	8020626c 	andhi	zero,r16,33161
8020574c:	8020626c 	andhi	zero,r16,33161
80205750:	8020626c 	andhi	zero,r16,33161
80205754:	80205a7c 	xorhi	zero,r16,33129
80205758:	802059d0 	cmplti	zero,r16,-32409
8020575c:	8020626c 	andhi	zero,r16,33161
80205760:	802059d0 	cmplti	zero,r16,-32409
80205764:	8020626c 	andhi	zero,r16,33161
80205768:	8020626c 	andhi	zero,r16,33161
8020576c:	8020626c 	andhi	zero,r16,33161
80205770:	8020626c 	andhi	zero,r16,33161
80205774:	80205a70 	cmpltui	zero,r16,33129
80205778:	8020626c 	andhi	zero,r16,33161
8020577c:	8020626c 	andhi	zero,r16,33161
80205780:	80205b38 	rdprs	zero,r16,-32404
80205784:	8020626c 	andhi	zero,r16,33161
80205788:	8020626c 	andhi	zero,r16,33161
8020578c:	8020626c 	andhi	zero,r16,33161
80205790:	8020626c 	andhi	zero,r16,33161
80205794:	8020626c 	andhi	zero,r16,33161
80205798:	80205fa8 	cmpgeui	zero,r16,33150
8020579c:	8020626c 	andhi	zero,r16,33161
802057a0:	8020626c 	andhi	zero,r16,33161
802057a4:	80206008 	cmpgei	zero,r16,-32384
802057a8:	8020626c 	andhi	zero,r16,33161
802057ac:	8020626c 	andhi	zero,r16,33161
802057b0:	8020626c 	andhi	zero,r16,33161
802057b4:	8020626c 	andhi	zero,r16,33161
802057b8:	8020626c 	andhi	zero,r16,33161
802057bc:	8020626c 	andhi	zero,r16,33161
802057c0:	8020626c 	andhi	zero,r16,33161
802057c4:	8020626c 	andhi	zero,r16,33161
802057c8:	8020626c 	andhi	zero,r16,33161
802057cc:	8020626c 	andhi	zero,r16,33161
802057d0:	802060b8 	rdprs	zero,r16,-32382
802057d4:	802061f4 	orhi	zero,r16,33159
802057d8:	802059d0 	cmplti	zero,r16,-32409
802057dc:	802059d0 	cmplti	zero,r16,-32409
802057e0:	802059d0 	cmplti	zero,r16,-32409
802057e4:	80206248 	cmpgei	zero,r16,-32375
802057e8:	802061f4 	orhi	zero,r16,33159
802057ec:	8020626c 	andhi	zero,r16,33161
802057f0:	8020626c 	andhi	zero,r16,33161
802057f4:	80206204 	addi	zero,r16,-32376
802057f8:	8020626c 	andhi	zero,r16,33161
802057fc:	80206214 	ori	zero,r16,33160
80205800:	802060f4 	orhi	zero,r16,33155
80205804:	80205844 	addi	zero,r16,-32415
80205808:	80206114 	ori	zero,r16,33156
8020580c:	8020626c 	andhi	zero,r16,33161
80205810:	80206120 	cmpeqi	zero,r16,-32380
80205814:	8020626c 	andhi	zero,r16,33161
80205818:	8020617c 	xorhi	zero,r16,33157
8020581c:	8020626c 	andhi	zero,r16,33161
80205820:	8020626c 	andhi	zero,r16,33161
80205824:	8020618c 	andi	zero,r16,33158
80205828:	d9003117 	ldw	r4,196(sp)
8020582c:	d8802d15 	stw	r2,180(sp)
80205830:	0109c83a 	sub	r4,zero,r4
80205834:	d9003115 	stw	r4,196(sp)
80205838:	94800114 	ori	r18,r18,4
8020583c:	bc400007 	ldb	r17,0(r23)
80205840:	003f9706 	br	802056a0 <__reset+0xfa1e56a0>
80205844:	00800c04 	movi	r2,48
80205848:	d9002d17 	ldw	r4,180(sp)
8020584c:	d9402917 	ldw	r5,164(sp)
80205850:	d8802705 	stb	r2,156(sp)
80205854:	00801e04 	movi	r2,120
80205858:	d8802745 	stb	r2,157(sp)
8020585c:	d8002785 	stb	zero,158(sp)
80205860:	20c00104 	addi	r3,r4,4
80205864:	25000017 	ldw	r20,0(r4)
80205868:	002d883a 	mov	r22,zero
8020586c:	90800094 	ori	r2,r18,2
80205870:	28028616 	blt	r5,zero,8020628c <___svfprintf_internal_r+0xd3c>
80205874:	00bfdfc4 	movi	r2,-129
80205878:	90a4703a 	and	r18,r18,r2
8020587c:	d8c02d15 	stw	r3,180(sp)
80205880:	94800094 	ori	r18,r18,2
80205884:	a002731e 	bne	r20,zero,80206254 <___svfprintf_internal_r+0xd04>
80205888:	00a008b4 	movhi	r2,32802
8020588c:	10acc004 	addi	r2,r2,-19712
80205890:	d8803a15 	stw	r2,232(sp)
80205894:	04401e04 	movi	r17,120
80205898:	d8c02917 	ldw	r3,164(sp)
8020589c:	0039883a 	mov	fp,zero
802058a0:	1801d526 	beq	r3,zero,80205ff8 <___svfprintf_internal_r+0xaa8>
802058a4:	0029883a 	mov	r20,zero
802058a8:	002d883a 	mov	r22,zero
802058ac:	0001f106 	br	80206074 <___svfprintf_internal_r+0xb24>
802058b0:	d9402c17 	ldw	r5,176(sp)
802058b4:	d9801e04 	addi	r6,sp,120
802058b8:	9809883a 	mov	r4,r19
802058bc:	020eae00 	call	8020eae0 <__ssprint_r>
802058c0:	1000081e 	bne	r2,zero,802058e4 <___svfprintf_internal_r+0x394>
802058c4:	da000404 	addi	r8,sp,16
802058c8:	003f6306 	br	80205658 <__reset+0xfa1e5658>
802058cc:	d8802017 	ldw	r2,128(sp)
802058d0:	10000426 	beq	r2,zero,802058e4 <___svfprintf_internal_r+0x394>
802058d4:	d9402c17 	ldw	r5,176(sp)
802058d8:	d9003917 	ldw	r4,228(sp)
802058dc:	d9801e04 	addi	r6,sp,120
802058e0:	020eae00 	call	8020eae0 <__ssprint_r>
802058e4:	d8802c17 	ldw	r2,176(sp)
802058e8:	10c0030b 	ldhu	r3,12(r2)
802058ec:	d8802f17 	ldw	r2,188(sp)
802058f0:	18c0100c 	andi	r3,r3,64
802058f4:	1805f51e 	bne	r3,zero,802070cc <___svfprintf_internal_r+0x1b7c>
802058f8:	dfc04817 	ldw	ra,288(sp)
802058fc:	df004717 	ldw	fp,284(sp)
80205900:	ddc04617 	ldw	r23,280(sp)
80205904:	dd804517 	ldw	r22,276(sp)
80205908:	dd404417 	ldw	r21,272(sp)
8020590c:	dd004317 	ldw	r20,268(sp)
80205910:	dcc04217 	ldw	r19,264(sp)
80205914:	dc804117 	ldw	r18,260(sp)
80205918:	dc404017 	ldw	r17,256(sp)
8020591c:	dc003f17 	ldw	r16,252(sp)
80205920:	dec04904 	addi	sp,sp,292
80205924:	f800283a 	ret
80205928:	d8802d17 	ldw	r2,180(sp)
8020592c:	d9002d17 	ldw	r4,180(sp)
80205930:	10800017 	ldw	r2,0(r2)
80205934:	d8803115 	stw	r2,196(sp)
80205938:	20800104 	addi	r2,r4,4
8020593c:	d9003117 	ldw	r4,196(sp)
80205940:	203fb916 	blt	r4,zero,80205828 <__reset+0xfa1e5828>
80205944:	d8802d15 	stw	r2,180(sp)
80205948:	bc400007 	ldb	r17,0(r23)
8020594c:	003f5406 	br	802056a0 <__reset+0xfa1e56a0>
80205950:	bc400007 	ldb	r17,0(r23)
80205954:	bac00044 	addi	r11,r23,1
80205958:	8a873926 	beq	r17,r10,80207640 <___svfprintf_internal_r+0x20f0>
8020595c:	88bff404 	addi	r2,r17,-48
80205960:	0009883a 	mov	r4,zero
80205964:	30868836 	bltu	r6,r2,80207388 <___svfprintf_internal_r+0x1e38>
80205968:	5c400007 	ldb	r17,0(r11)
8020596c:	210002a4 	muli	r4,r4,10
80205970:	5dc00044 	addi	r23,r11,1
80205974:	b817883a 	mov	r11,r23
80205978:	2089883a 	add	r4,r4,r2
8020597c:	88bff404 	addi	r2,r17,-48
80205980:	30bff92e 	bgeu	r6,r2,80205968 <__reset+0xfa1e5968>
80205984:	2005d716 	blt	r4,zero,802070e4 <___svfprintf_internal_r+0x1b94>
80205988:	d9002915 	stw	r4,164(sp)
8020598c:	003f4506 	br	802056a4 <__reset+0xfa1e56a4>
80205990:	b809883a 	mov	r4,r23
80205994:	d8003115 	stw	zero,196(sp)
80205998:	88bff404 	addi	r2,r17,-48
8020599c:	0017883a 	mov	r11,zero
802059a0:	24400007 	ldb	r17,0(r4)
802059a4:	5ac002a4 	muli	r11,r11,10
802059a8:	bdc00044 	addi	r23,r23,1
802059ac:	b809883a 	mov	r4,r23
802059b0:	12d7883a 	add	r11,r2,r11
802059b4:	88bff404 	addi	r2,r17,-48
802059b8:	30bff92e 	bgeu	r6,r2,802059a0 <__reset+0xfa1e59a0>
802059bc:	dac03115 	stw	r11,196(sp)
802059c0:	003f3806 	br	802056a4 <__reset+0xfa1e56a4>
802059c4:	94802014 	ori	r18,r18,128
802059c8:	bc400007 	ldb	r17,0(r23)
802059cc:	003f3406 	br	802056a0 <__reset+0xfa1e56a0>
802059d0:	18c03fcc 	andi	r3,r3,255
802059d4:	1807471e 	bne	r3,zero,802076f4 <___svfprintf_internal_r+0x21a4>
802059d8:	9080020c 	andi	r2,r18,8
802059dc:	10047d26 	beq	r2,zero,80206bd4 <___svfprintf_internal_r+0x1684>
802059e0:	d8c02d17 	ldw	r3,180(sp)
802059e4:	d9002d17 	ldw	r4,180(sp)
802059e8:	d9402d17 	ldw	r5,180(sp)
802059ec:	18c00017 	ldw	r3,0(r3)
802059f0:	21000117 	ldw	r4,4(r4)
802059f4:	29400204 	addi	r5,r5,8
802059f8:	d8c03615 	stw	r3,216(sp)
802059fc:	d9003715 	stw	r4,220(sp)
80205a00:	d9402d15 	stw	r5,180(sp)
80205a04:	d9003617 	ldw	r4,216(sp)
80205a08:	d9403717 	ldw	r5,220(sp)
80205a0c:	da003e15 	stw	r8,248(sp)
80205a10:	04000044 	movi	r16,1
80205a14:	020e8000 	call	8020e800 <__fpclassifyd>
80205a18:	da003e17 	ldw	r8,248(sp)
80205a1c:	14044b1e 	bne	r2,r16,80206b4c <___svfprintf_internal_r+0x15fc>
80205a20:	d9003617 	ldw	r4,216(sp)
80205a24:	d9403717 	ldw	r5,220(sp)
80205a28:	000d883a 	mov	r6,zero
80205a2c:	000f883a 	mov	r7,zero
80205a30:	0213dc40 	call	80213dc4 <__ledf2>
80205a34:	da003e17 	ldw	r8,248(sp)
80205a38:	1005f316 	blt	r2,zero,80207208 <___svfprintf_internal_r+0x1cb8>
80205a3c:	df002783 	ldbu	fp,158(sp)
80205a40:	008011c4 	movi	r2,71
80205a44:	1445590e 	bge	r2,r17,80206fac <___svfprintf_internal_r+0x1a5c>
80205a48:	042008b4 	movhi	r16,32802
80205a4c:	842cb804 	addi	r16,r16,-19744
80205a50:	00c000c4 	movi	r3,3
80205a54:	00bfdfc4 	movi	r2,-129
80205a58:	d8c02a15 	stw	r3,168(sp)
80205a5c:	90a4703a 	and	r18,r18,r2
80205a60:	d8c02e15 	stw	r3,184(sp)
80205a64:	d8002915 	stw	zero,164(sp)
80205a68:	d8003215 	stw	zero,200(sp)
80205a6c:	00006606 	br	80205c08 <___svfprintf_internal_r+0x6b8>
80205a70:	94800214 	ori	r18,r18,8
80205a74:	bc400007 	ldb	r17,0(r23)
80205a78:	003f0906 	br	802056a0 <__reset+0xfa1e56a0>
80205a7c:	18c03fcc 	andi	r3,r3,255
80205a80:	1807181e 	bne	r3,zero,802076e4 <___svfprintf_internal_r+0x2194>
80205a84:	94800414 	ori	r18,r18,16
80205a88:	9080080c 	andi	r2,r18,32
80205a8c:	10039626 	beq	r2,zero,802068e8 <___svfprintf_internal_r+0x1398>
80205a90:	d9402d17 	ldw	r5,180(sp)
80205a94:	28800117 	ldw	r2,4(r5)
80205a98:	2d000017 	ldw	r20,0(r5)
80205a9c:	29400204 	addi	r5,r5,8
80205aa0:	d9402d15 	stw	r5,180(sp)
80205aa4:	102d883a 	mov	r22,r2
80205aa8:	10039816 	blt	r2,zero,8020690c <___svfprintf_internal_r+0x13bc>
80205aac:	d9402917 	ldw	r5,164(sp)
80205ab0:	df002783 	ldbu	fp,158(sp)
80205ab4:	2803ab16 	blt	r5,zero,80206964 <___svfprintf_internal_r+0x1414>
80205ab8:	00ffdfc4 	movi	r3,-129
80205abc:	a584b03a 	or	r2,r20,r22
80205ac0:	90e4703a 	and	r18,r18,r3
80205ac4:	10014a26 	beq	r2,zero,80205ff0 <___svfprintf_internal_r+0xaa0>
80205ac8:	b0034b26 	beq	r22,zero,802067f8 <___svfprintf_internal_r+0x12a8>
80205acc:	dc402a15 	stw	r17,168(sp)
80205ad0:	dc001e04 	addi	r16,sp,120
80205ad4:	b023883a 	mov	r17,r22
80205ad8:	402d883a 	mov	r22,r8
80205adc:	a009883a 	mov	r4,r20
80205ae0:	880b883a 	mov	r5,r17
80205ae4:	01800284 	movi	r6,10
80205ae8:	000f883a 	mov	r7,zero
80205aec:	02123e00 	call	802123e0 <__umoddi3>
80205af0:	10800c04 	addi	r2,r2,48
80205af4:	843fffc4 	addi	r16,r16,-1
80205af8:	a009883a 	mov	r4,r20
80205afc:	880b883a 	mov	r5,r17
80205b00:	80800005 	stb	r2,0(r16)
80205b04:	01800284 	movi	r6,10
80205b08:	000f883a 	mov	r7,zero
80205b0c:	0211e680 	call	80211e68 <__udivdi3>
80205b10:	1029883a 	mov	r20,r2
80205b14:	10c4b03a 	or	r2,r2,r3
80205b18:	1823883a 	mov	r17,r3
80205b1c:	103fef1e 	bne	r2,zero,80205adc <__reset+0xfa1e5adc>
80205b20:	d8c02817 	ldw	r3,160(sp)
80205b24:	dc402a17 	ldw	r17,168(sp)
80205b28:	b011883a 	mov	r8,r22
80205b2c:	1c07c83a 	sub	r3,r3,r16
80205b30:	d8c02e15 	stw	r3,184(sp)
80205b34:	00002e06 	br	80205bf0 <___svfprintf_internal_r+0x6a0>
80205b38:	18c03fcc 	andi	r3,r3,255
80205b3c:	1806e71e 	bne	r3,zero,802076dc <___svfprintf_internal_r+0x218c>
80205b40:	94800414 	ori	r18,r18,16
80205b44:	9080080c 	andi	r2,r18,32
80205b48:	1002d426 	beq	r2,zero,8020669c <___svfprintf_internal_r+0x114c>
80205b4c:	d9402d17 	ldw	r5,180(sp)
80205b50:	d8c02917 	ldw	r3,164(sp)
80205b54:	d8002785 	stb	zero,158(sp)
80205b58:	28800204 	addi	r2,r5,8
80205b5c:	2d000017 	ldw	r20,0(r5)
80205b60:	2d800117 	ldw	r22,4(r5)
80205b64:	18041516 	blt	r3,zero,80206bbc <___svfprintf_internal_r+0x166c>
80205b68:	013fdfc4 	movi	r4,-129
80205b6c:	a586b03a 	or	r3,r20,r22
80205b70:	d8802d15 	stw	r2,180(sp)
80205b74:	9124703a 	and	r18,r18,r4
80205b78:	1802d51e 	bne	r3,zero,802066d0 <___svfprintf_internal_r+0x1180>
80205b7c:	d9402917 	ldw	r5,164(sp)
80205b80:	0039883a 	mov	fp,zero
80205b84:	2806be26 	beq	r5,zero,80207680 <___svfprintf_internal_r+0x2130>
80205b88:	0029883a 	mov	r20,zero
80205b8c:	002d883a 	mov	r22,zero
80205b90:	dc001e04 	addi	r16,sp,120
80205b94:	a006d0fa 	srli	r3,r20,3
80205b98:	b008977a 	slli	r4,r22,29
80205b9c:	b02cd0fa 	srli	r22,r22,3
80205ba0:	a50001cc 	andi	r20,r20,7
80205ba4:	a0800c04 	addi	r2,r20,48
80205ba8:	843fffc4 	addi	r16,r16,-1
80205bac:	20e8b03a 	or	r20,r4,r3
80205bb0:	80800005 	stb	r2,0(r16)
80205bb4:	a586b03a 	or	r3,r20,r22
80205bb8:	183ff61e 	bne	r3,zero,80205b94 <__reset+0xfa1e5b94>
80205bbc:	90c0004c 	andi	r3,r18,1
80205bc0:	18013926 	beq	r3,zero,802060a8 <___svfprintf_internal_r+0xb58>
80205bc4:	10803fcc 	andi	r2,r2,255
80205bc8:	1080201c 	xori	r2,r2,128
80205bcc:	10bfe004 	addi	r2,r2,-128
80205bd0:	00c00c04 	movi	r3,48
80205bd4:	10c13426 	beq	r2,r3,802060a8 <___svfprintf_internal_r+0xb58>
80205bd8:	80ffffc5 	stb	r3,-1(r16)
80205bdc:	d8c02817 	ldw	r3,160(sp)
80205be0:	80bfffc4 	addi	r2,r16,-1
80205be4:	1021883a 	mov	r16,r2
80205be8:	1887c83a 	sub	r3,r3,r2
80205bec:	d8c02e15 	stw	r3,184(sp)
80205bf0:	d8802e17 	ldw	r2,184(sp)
80205bf4:	d9002917 	ldw	r4,164(sp)
80205bf8:	1100010e 	bge	r2,r4,80205c00 <___svfprintf_internal_r+0x6b0>
80205bfc:	2005883a 	mov	r2,r4
80205c00:	d8802a15 	stw	r2,168(sp)
80205c04:	d8003215 	stw	zero,200(sp)
80205c08:	e7003fcc 	andi	fp,fp,255
80205c0c:	e700201c 	xori	fp,fp,128
80205c10:	e73fe004 	addi	fp,fp,-128
80205c14:	e0000326 	beq	fp,zero,80205c24 <___svfprintf_internal_r+0x6d4>
80205c18:	d8c02a17 	ldw	r3,168(sp)
80205c1c:	18c00044 	addi	r3,r3,1
80205c20:	d8c02a15 	stw	r3,168(sp)
80205c24:	90c0008c 	andi	r3,r18,2
80205c28:	d8c02b15 	stw	r3,172(sp)
80205c2c:	18000326 	beq	r3,zero,80205c3c <___svfprintf_internal_r+0x6ec>
80205c30:	d8c02a17 	ldw	r3,168(sp)
80205c34:	18c00084 	addi	r3,r3,2
80205c38:	d8c02a15 	stw	r3,168(sp)
80205c3c:	90c0210c 	andi	r3,r18,132
80205c40:	d8c03015 	stw	r3,192(sp)
80205c44:	1801a11e 	bne	r3,zero,802062cc <___svfprintf_internal_r+0xd7c>
80205c48:	d9003117 	ldw	r4,196(sp)
80205c4c:	d8c02a17 	ldw	r3,168(sp)
80205c50:	20e9c83a 	sub	r20,r4,r3
80205c54:	05019d0e 	bge	zero,r20,802062cc <___svfprintf_internal_r+0xd7c>
80205c58:	02400404 	movi	r9,16
80205c5c:	d8c02017 	ldw	r3,128(sp)
80205c60:	d8801f17 	ldw	r2,124(sp)
80205c64:	4d051b0e 	bge	r9,r20,802070d4 <___svfprintf_internal_r+0x1b84>
80205c68:	016008b4 	movhi	r5,32802
80205c6c:	296ccb84 	addi	r5,r5,-19666
80205c70:	dc403c15 	stw	r17,240(sp)
80205c74:	d9403515 	stw	r5,212(sp)
80205c78:	a023883a 	mov	r17,r20
80205c7c:	482d883a 	mov	r22,r9
80205c80:	9029883a 	mov	r20,r18
80205c84:	070001c4 	movi	fp,7
80205c88:	8025883a 	mov	r18,r16
80205c8c:	dc002c17 	ldw	r16,176(sp)
80205c90:	00000306 	br	80205ca0 <___svfprintf_internal_r+0x750>
80205c94:	8c7ffc04 	addi	r17,r17,-16
80205c98:	42000204 	addi	r8,r8,8
80205c9c:	b440130e 	bge	r22,r17,80205cec <___svfprintf_internal_r+0x79c>
80205ca0:	012008b4 	movhi	r4,32802
80205ca4:	18c00404 	addi	r3,r3,16
80205ca8:	10800044 	addi	r2,r2,1
80205cac:	212ccb84 	addi	r4,r4,-19666
80205cb0:	41000015 	stw	r4,0(r8)
80205cb4:	45800115 	stw	r22,4(r8)
80205cb8:	d8c02015 	stw	r3,128(sp)
80205cbc:	d8801f15 	stw	r2,124(sp)
80205cc0:	e0bff40e 	bge	fp,r2,80205c94 <__reset+0xfa1e5c94>
80205cc4:	d9801e04 	addi	r6,sp,120
80205cc8:	800b883a 	mov	r5,r16
80205ccc:	9809883a 	mov	r4,r19
80205cd0:	020eae00 	call	8020eae0 <__ssprint_r>
80205cd4:	103f031e 	bne	r2,zero,802058e4 <__reset+0xfa1e58e4>
80205cd8:	8c7ffc04 	addi	r17,r17,-16
80205cdc:	d8c02017 	ldw	r3,128(sp)
80205ce0:	d8801f17 	ldw	r2,124(sp)
80205ce4:	da000404 	addi	r8,sp,16
80205ce8:	b47fed16 	blt	r22,r17,80205ca0 <__reset+0xfa1e5ca0>
80205cec:	9021883a 	mov	r16,r18
80205cf0:	a025883a 	mov	r18,r20
80205cf4:	8829883a 	mov	r20,r17
80205cf8:	dc403c17 	ldw	r17,240(sp)
80205cfc:	d9403517 	ldw	r5,212(sp)
80205d00:	a0c7883a 	add	r3,r20,r3
80205d04:	10800044 	addi	r2,r2,1
80205d08:	41400015 	stw	r5,0(r8)
80205d0c:	45000115 	stw	r20,4(r8)
80205d10:	d8c02015 	stw	r3,128(sp)
80205d14:	d8801f15 	stw	r2,124(sp)
80205d18:	010001c4 	movi	r4,7
80205d1c:	20829f16 	blt	r4,r2,8020679c <___svfprintf_internal_r+0x124c>
80205d20:	df002787 	ldb	fp,158(sp)
80205d24:	42000204 	addi	r8,r8,8
80205d28:	e0000c26 	beq	fp,zero,80205d5c <___svfprintf_internal_r+0x80c>
80205d2c:	d8801f17 	ldw	r2,124(sp)
80205d30:	d9002784 	addi	r4,sp,158
80205d34:	18c00044 	addi	r3,r3,1
80205d38:	10800044 	addi	r2,r2,1
80205d3c:	41000015 	stw	r4,0(r8)
80205d40:	01000044 	movi	r4,1
80205d44:	41000115 	stw	r4,4(r8)
80205d48:	d8c02015 	stw	r3,128(sp)
80205d4c:	d8801f15 	stw	r2,124(sp)
80205d50:	010001c4 	movi	r4,7
80205d54:	20823816 	blt	r4,r2,80206638 <___svfprintf_internal_r+0x10e8>
80205d58:	42000204 	addi	r8,r8,8
80205d5c:	d8802b17 	ldw	r2,172(sp)
80205d60:	10000c26 	beq	r2,zero,80205d94 <___svfprintf_internal_r+0x844>
80205d64:	d8801f17 	ldw	r2,124(sp)
80205d68:	d9002704 	addi	r4,sp,156
80205d6c:	18c00084 	addi	r3,r3,2
80205d70:	10800044 	addi	r2,r2,1
80205d74:	41000015 	stw	r4,0(r8)
80205d78:	01000084 	movi	r4,2
80205d7c:	41000115 	stw	r4,4(r8)
80205d80:	d8c02015 	stw	r3,128(sp)
80205d84:	d8801f15 	stw	r2,124(sp)
80205d88:	010001c4 	movi	r4,7
80205d8c:	20823216 	blt	r4,r2,80206658 <___svfprintf_internal_r+0x1108>
80205d90:	42000204 	addi	r8,r8,8
80205d94:	d9003017 	ldw	r4,192(sp)
80205d98:	00802004 	movi	r2,128
80205d9c:	20819726 	beq	r4,r2,802063fc <___svfprintf_internal_r+0xeac>
80205da0:	d9402917 	ldw	r5,164(sp)
80205da4:	d8802e17 	ldw	r2,184(sp)
80205da8:	28adc83a 	sub	r22,r5,r2
80205dac:	05802f0e 	bge	zero,r22,80205e6c <___svfprintf_internal_r+0x91c>
80205db0:	07000404 	movi	fp,16
80205db4:	d8801f17 	ldw	r2,124(sp)
80205db8:	e583c00e 	bge	fp,r22,80206cbc <___svfprintf_internal_r+0x176c>
80205dbc:	016008b4 	movhi	r5,32802
80205dc0:	296cc784 	addi	r5,r5,-19682
80205dc4:	dc402915 	stw	r17,164(sp)
80205dc8:	d9402b15 	stw	r5,172(sp)
80205dcc:	b023883a 	mov	r17,r22
80205dd0:	050001c4 	movi	r20,7
80205dd4:	902d883a 	mov	r22,r18
80205dd8:	8025883a 	mov	r18,r16
80205ddc:	dc002c17 	ldw	r16,176(sp)
80205de0:	00000306 	br	80205df0 <___svfprintf_internal_r+0x8a0>
80205de4:	8c7ffc04 	addi	r17,r17,-16
80205de8:	42000204 	addi	r8,r8,8
80205dec:	e440110e 	bge	fp,r17,80205e34 <___svfprintf_internal_r+0x8e4>
80205df0:	18c00404 	addi	r3,r3,16
80205df4:	10800044 	addi	r2,r2,1
80205df8:	45400015 	stw	r21,0(r8)
80205dfc:	47000115 	stw	fp,4(r8)
80205e00:	d8c02015 	stw	r3,128(sp)
80205e04:	d8801f15 	stw	r2,124(sp)
80205e08:	a0bff60e 	bge	r20,r2,80205de4 <__reset+0xfa1e5de4>
80205e0c:	d9801e04 	addi	r6,sp,120
80205e10:	800b883a 	mov	r5,r16
80205e14:	9809883a 	mov	r4,r19
80205e18:	020eae00 	call	8020eae0 <__ssprint_r>
80205e1c:	103eb11e 	bne	r2,zero,802058e4 <__reset+0xfa1e58e4>
80205e20:	8c7ffc04 	addi	r17,r17,-16
80205e24:	d8c02017 	ldw	r3,128(sp)
80205e28:	d8801f17 	ldw	r2,124(sp)
80205e2c:	da000404 	addi	r8,sp,16
80205e30:	e47fef16 	blt	fp,r17,80205df0 <__reset+0xfa1e5df0>
80205e34:	9021883a 	mov	r16,r18
80205e38:	b025883a 	mov	r18,r22
80205e3c:	882d883a 	mov	r22,r17
80205e40:	dc402917 	ldw	r17,164(sp)
80205e44:	d9002b17 	ldw	r4,172(sp)
80205e48:	1d87883a 	add	r3,r3,r22
80205e4c:	10800044 	addi	r2,r2,1
80205e50:	41000015 	stw	r4,0(r8)
80205e54:	45800115 	stw	r22,4(r8)
80205e58:	d8c02015 	stw	r3,128(sp)
80205e5c:	d8801f15 	stw	r2,124(sp)
80205e60:	010001c4 	movi	r4,7
80205e64:	2081ec16 	blt	r4,r2,80206618 <___svfprintf_internal_r+0x10c8>
80205e68:	42000204 	addi	r8,r8,8
80205e6c:	9080400c 	andi	r2,r18,256
80205e70:	1001181e 	bne	r2,zero,802062d4 <___svfprintf_internal_r+0xd84>
80205e74:	d9402e17 	ldw	r5,184(sp)
80205e78:	d8801f17 	ldw	r2,124(sp)
80205e7c:	44000015 	stw	r16,0(r8)
80205e80:	1947883a 	add	r3,r3,r5
80205e84:	10800044 	addi	r2,r2,1
80205e88:	41400115 	stw	r5,4(r8)
80205e8c:	d8c02015 	stw	r3,128(sp)
80205e90:	d8801f15 	stw	r2,124(sp)
80205e94:	010001c4 	movi	r4,7
80205e98:	2081d116 	blt	r4,r2,802065e0 <___svfprintf_internal_r+0x1090>
80205e9c:	42000204 	addi	r8,r8,8
80205ea0:	9480010c 	andi	r18,r18,4
80205ea4:	90003226 	beq	r18,zero,80205f70 <___svfprintf_internal_r+0xa20>
80205ea8:	d9403117 	ldw	r5,196(sp)
80205eac:	d8802a17 	ldw	r2,168(sp)
80205eb0:	28a1c83a 	sub	r16,r5,r2
80205eb4:	04002e0e 	bge	zero,r16,80205f70 <___svfprintf_internal_r+0xa20>
80205eb8:	04400404 	movi	r17,16
80205ebc:	d8801f17 	ldw	r2,124(sp)
80205ec0:	8c04b90e 	bge	r17,r16,802071a8 <___svfprintf_internal_r+0x1c58>
80205ec4:	016008b4 	movhi	r5,32802
80205ec8:	296ccb84 	addi	r5,r5,-19666
80205ecc:	d9403515 	stw	r5,212(sp)
80205ed0:	048001c4 	movi	r18,7
80205ed4:	dd002c17 	ldw	r20,176(sp)
80205ed8:	00000306 	br	80205ee8 <___svfprintf_internal_r+0x998>
80205edc:	843ffc04 	addi	r16,r16,-16
80205ee0:	42000204 	addi	r8,r8,8
80205ee4:	8c00130e 	bge	r17,r16,80205f34 <___svfprintf_internal_r+0x9e4>
80205ee8:	012008b4 	movhi	r4,32802
80205eec:	18c00404 	addi	r3,r3,16
80205ef0:	10800044 	addi	r2,r2,1
80205ef4:	212ccb84 	addi	r4,r4,-19666
80205ef8:	41000015 	stw	r4,0(r8)
80205efc:	44400115 	stw	r17,4(r8)
80205f00:	d8c02015 	stw	r3,128(sp)
80205f04:	d8801f15 	stw	r2,124(sp)
80205f08:	90bff40e 	bge	r18,r2,80205edc <__reset+0xfa1e5edc>
80205f0c:	d9801e04 	addi	r6,sp,120
80205f10:	a00b883a 	mov	r5,r20
80205f14:	9809883a 	mov	r4,r19
80205f18:	020eae00 	call	8020eae0 <__ssprint_r>
80205f1c:	103e711e 	bne	r2,zero,802058e4 <__reset+0xfa1e58e4>
80205f20:	843ffc04 	addi	r16,r16,-16
80205f24:	d8c02017 	ldw	r3,128(sp)
80205f28:	d8801f17 	ldw	r2,124(sp)
80205f2c:	da000404 	addi	r8,sp,16
80205f30:	8c3fed16 	blt	r17,r16,80205ee8 <__reset+0xfa1e5ee8>
80205f34:	d9403517 	ldw	r5,212(sp)
80205f38:	1c07883a 	add	r3,r3,r16
80205f3c:	10800044 	addi	r2,r2,1
80205f40:	41400015 	stw	r5,0(r8)
80205f44:	44000115 	stw	r16,4(r8)
80205f48:	d8c02015 	stw	r3,128(sp)
80205f4c:	d8801f15 	stw	r2,124(sp)
80205f50:	010001c4 	movi	r4,7
80205f54:	2080060e 	bge	r4,r2,80205f70 <___svfprintf_internal_r+0xa20>
80205f58:	d9402c17 	ldw	r5,176(sp)
80205f5c:	d9801e04 	addi	r6,sp,120
80205f60:	9809883a 	mov	r4,r19
80205f64:	020eae00 	call	8020eae0 <__ssprint_r>
80205f68:	103e5e1e 	bne	r2,zero,802058e4 <__reset+0xfa1e58e4>
80205f6c:	d8c02017 	ldw	r3,128(sp)
80205f70:	d8803117 	ldw	r2,196(sp)
80205f74:	d9002a17 	ldw	r4,168(sp)
80205f78:	1100010e 	bge	r2,r4,80205f80 <___svfprintf_internal_r+0xa30>
80205f7c:	2005883a 	mov	r2,r4
80205f80:	d9402f17 	ldw	r5,188(sp)
80205f84:	288b883a 	add	r5,r5,r2
80205f88:	d9402f15 	stw	r5,188(sp)
80205f8c:	18019c1e 	bne	r3,zero,80206600 <___svfprintf_internal_r+0x10b0>
80205f90:	b8800007 	ldb	r2,0(r23)
80205f94:	d8001f15 	stw	zero,124(sp)
80205f98:	da000404 	addi	r8,sp,16
80205f9c:	103d991e 	bne	r2,zero,80205604 <__reset+0xfa1e5604>
80205fa0:	b821883a 	mov	r16,r23
80205fa4:	003daf06 	br	80205664 <__reset+0xfa1e5664>
80205fa8:	18c03fcc 	andi	r3,r3,255
80205fac:	1805c71e 	bne	r3,zero,802076cc <___svfprintf_internal_r+0x217c>
80205fb0:	94800414 	ori	r18,r18,16
80205fb4:	9080080c 	andi	r2,r18,32
80205fb8:	10020126 	beq	r2,zero,802067c0 <___svfprintf_internal_r+0x1270>
80205fbc:	d8802d17 	ldw	r2,180(sp)
80205fc0:	d9002917 	ldw	r4,164(sp)
80205fc4:	d8002785 	stb	zero,158(sp)
80205fc8:	10c00204 	addi	r3,r2,8
80205fcc:	15000017 	ldw	r20,0(r2)
80205fd0:	15800117 	ldw	r22,4(r2)
80205fd4:	20038e16 	blt	r4,zero,80206e10 <___svfprintf_internal_r+0x18c0>
80205fd8:	013fdfc4 	movi	r4,-129
80205fdc:	a584b03a 	or	r2,r20,r22
80205fe0:	d8c02d15 	stw	r3,180(sp)
80205fe4:	9124703a 	and	r18,r18,r4
80205fe8:	0039883a 	mov	fp,zero
80205fec:	103eb61e 	bne	r2,zero,80205ac8 <__reset+0xfa1e5ac8>
80205ff0:	d8802917 	ldw	r2,164(sp)
80205ff4:	1002c81e 	bne	r2,zero,80206b18 <___svfprintf_internal_r+0x15c8>
80205ff8:	d8002915 	stw	zero,164(sp)
80205ffc:	d8002e15 	stw	zero,184(sp)
80206000:	dc001e04 	addi	r16,sp,120
80206004:	003efa06 	br	80205bf0 <__reset+0xfa1e5bf0>
80206008:	18c03fcc 	andi	r3,r3,255
8020600c:	1805ad1e 	bne	r3,zero,802076c4 <___svfprintf_internal_r+0x2174>
80206010:	016008b4 	movhi	r5,32802
80206014:	296cbb04 	addi	r5,r5,-19732
80206018:	d9403a15 	stw	r5,232(sp)
8020601c:	9080080c 	andi	r2,r18,32
80206020:	10006126 	beq	r2,zero,802061a8 <___svfprintf_internal_r+0xc58>
80206024:	d8802d17 	ldw	r2,180(sp)
80206028:	15000017 	ldw	r20,0(r2)
8020602c:	15800117 	ldw	r22,4(r2)
80206030:	10800204 	addi	r2,r2,8
80206034:	d8802d15 	stw	r2,180(sp)
80206038:	9080004c 	andi	r2,r18,1
8020603c:	10018e26 	beq	r2,zero,80206678 <___svfprintf_internal_r+0x1128>
80206040:	a584b03a 	or	r2,r20,r22
80206044:	10030926 	beq	r2,zero,80206c6c <___svfprintf_internal_r+0x171c>
80206048:	d8c02917 	ldw	r3,164(sp)
8020604c:	00800c04 	movi	r2,48
80206050:	d8802705 	stb	r2,156(sp)
80206054:	dc402745 	stb	r17,157(sp)
80206058:	d8002785 	stb	zero,158(sp)
8020605c:	90800094 	ori	r2,r18,2
80206060:	18048716 	blt	r3,zero,80207280 <___svfprintf_internal_r+0x1d30>
80206064:	00bfdfc4 	movi	r2,-129
80206068:	90a4703a 	and	r18,r18,r2
8020606c:	94800094 	ori	r18,r18,2
80206070:	0039883a 	mov	fp,zero
80206074:	d9003a17 	ldw	r4,232(sp)
80206078:	dc001e04 	addi	r16,sp,120
8020607c:	a08003cc 	andi	r2,r20,15
80206080:	b006973a 	slli	r3,r22,28
80206084:	2085883a 	add	r2,r4,r2
80206088:	a028d13a 	srli	r20,r20,4
8020608c:	10800003 	ldbu	r2,0(r2)
80206090:	b02cd13a 	srli	r22,r22,4
80206094:	843fffc4 	addi	r16,r16,-1
80206098:	1d28b03a 	or	r20,r3,r20
8020609c:	80800005 	stb	r2,0(r16)
802060a0:	a584b03a 	or	r2,r20,r22
802060a4:	103ff51e 	bne	r2,zero,8020607c <__reset+0xfa1e607c>
802060a8:	d8c02817 	ldw	r3,160(sp)
802060ac:	1c07c83a 	sub	r3,r3,r16
802060b0:	d8c02e15 	stw	r3,184(sp)
802060b4:	003ece06 	br	80205bf0 <__reset+0xfa1e5bf0>
802060b8:	d8c02d17 	ldw	r3,180(sp)
802060bc:	d9002d17 	ldw	r4,180(sp)
802060c0:	d8002785 	stb	zero,158(sp)
802060c4:	18800017 	ldw	r2,0(r3)
802060c8:	21000104 	addi	r4,r4,4
802060cc:	00c00044 	movi	r3,1
802060d0:	d8c02a15 	stw	r3,168(sp)
802060d4:	d8801405 	stb	r2,80(sp)
802060d8:	d9002d15 	stw	r4,180(sp)
802060dc:	d8c02e15 	stw	r3,184(sp)
802060e0:	d8002915 	stw	zero,164(sp)
802060e4:	d8003215 	stw	zero,200(sp)
802060e8:	dc001404 	addi	r16,sp,80
802060ec:	0039883a 	mov	fp,zero
802060f0:	003ecc06 	br	80205c24 <__reset+0xfa1e5c24>
802060f4:	18c03fcc 	andi	r3,r3,255
802060f8:	183e9226 	beq	r3,zero,80205b44 <__reset+0xfa1e5b44>
802060fc:	d9c02785 	stb	r7,158(sp)
80206100:	003e9006 	br	80205b44 <__reset+0xfa1e5b44>
80206104:	00c00044 	movi	r3,1
80206108:	01c00ac4 	movi	r7,43
8020610c:	bc400007 	ldb	r17,0(r23)
80206110:	003d6306 	br	802056a0 <__reset+0xfa1e56a0>
80206114:	94800814 	ori	r18,r18,32
80206118:	bc400007 	ldb	r17,0(r23)
8020611c:	003d6006 	br	802056a0 <__reset+0xfa1e56a0>
80206120:	d8c02d17 	ldw	r3,180(sp)
80206124:	d8002785 	stb	zero,158(sp)
80206128:	1c000017 	ldw	r16,0(r3)
8020612c:	1d000104 	addi	r20,r3,4
80206130:	80040f26 	beq	r16,zero,80207170 <___svfprintf_internal_r+0x1c20>
80206134:	d9002917 	ldw	r4,164(sp)
80206138:	2003dc16 	blt	r4,zero,802070ac <___svfprintf_internal_r+0x1b5c>
8020613c:	200d883a 	mov	r6,r4
80206140:	000b883a 	mov	r5,zero
80206144:	8009883a 	mov	r4,r16
80206148:	da003e15 	stw	r8,248(sp)
8020614c:	020cf380 	call	8020cf38 <memchr>
80206150:	da003e17 	ldw	r8,248(sp)
80206154:	10045826 	beq	r2,zero,802072b8 <___svfprintf_internal_r+0x1d68>
80206158:	1405c83a 	sub	r2,r2,r16
8020615c:	d8802e15 	stw	r2,184(sp)
80206160:	1003d816 	blt	r2,zero,802070c4 <___svfprintf_internal_r+0x1b74>
80206164:	df002783 	ldbu	fp,158(sp)
80206168:	d8802a15 	stw	r2,168(sp)
8020616c:	dd002d15 	stw	r20,180(sp)
80206170:	d8002915 	stw	zero,164(sp)
80206174:	d8003215 	stw	zero,200(sp)
80206178:	003ea306 	br	80205c08 <__reset+0xfa1e5c08>
8020617c:	18c03fcc 	andi	r3,r3,255
80206180:	183f8c26 	beq	r3,zero,80205fb4 <__reset+0xfa1e5fb4>
80206184:	d9c02785 	stb	r7,158(sp)
80206188:	003f8a06 	br	80205fb4 <__reset+0xfa1e5fb4>
8020618c:	18c03fcc 	andi	r3,r3,255
80206190:	1805631e 	bne	r3,zero,80207720 <___svfprintf_internal_r+0x21d0>
80206194:	016008b4 	movhi	r5,32802
80206198:	296cc004 	addi	r5,r5,-19712
8020619c:	d9403a15 	stw	r5,232(sp)
802061a0:	9080080c 	andi	r2,r18,32
802061a4:	103f9f1e 	bne	r2,zero,80206024 <__reset+0xfa1e6024>
802061a8:	9080040c 	andi	r2,r18,16
802061ac:	10029c26 	beq	r2,zero,80206c20 <___svfprintf_internal_r+0x16d0>
802061b0:	d8c02d17 	ldw	r3,180(sp)
802061b4:	002d883a 	mov	r22,zero
802061b8:	1d000017 	ldw	r20,0(r3)
802061bc:	18c00104 	addi	r3,r3,4
802061c0:	d8c02d15 	stw	r3,180(sp)
802061c4:	003f9c06 	br	80206038 <__reset+0xfa1e6038>
802061c8:	94800054 	ori	r18,r18,1
802061cc:	bc400007 	ldb	r17,0(r23)
802061d0:	003d3306 	br	802056a0 <__reset+0xfa1e56a0>
802061d4:	38803fcc 	andi	r2,r7,255
802061d8:	1080201c 	xori	r2,r2,128
802061dc:	10bfe004 	addi	r2,r2,-128
802061e0:	1002971e 	bne	r2,zero,80206c40 <___svfprintf_internal_r+0x16f0>
802061e4:	00c00044 	movi	r3,1
802061e8:	01c00804 	movi	r7,32
802061ec:	bc400007 	ldb	r17,0(r23)
802061f0:	003d2b06 	br	802056a0 <__reset+0xfa1e56a0>
802061f4:	18c03fcc 	andi	r3,r3,255
802061f8:	183e2326 	beq	r3,zero,80205a88 <__reset+0xfa1e5a88>
802061fc:	d9c02785 	stb	r7,158(sp)
80206200:	003e2106 	br	80205a88 <__reset+0xfa1e5a88>
80206204:	bc400007 	ldb	r17,0(r23)
80206208:	8a430426 	beq	r17,r9,80206e1c <___svfprintf_internal_r+0x18cc>
8020620c:	94800414 	ori	r18,r18,16
80206210:	003d2306 	br	802056a0 <__reset+0xfa1e56a0>
80206214:	18c03fcc 	andi	r3,r3,255
80206218:	18053f1e 	bne	r3,zero,80207718 <___svfprintf_internal_r+0x21c8>
8020621c:	9080080c 	andi	r2,r18,32
80206220:	10028926 	beq	r2,zero,80206c48 <___svfprintf_internal_r+0x16f8>
80206224:	d9402d17 	ldw	r5,180(sp)
80206228:	d9002f17 	ldw	r4,188(sp)
8020622c:	28800017 	ldw	r2,0(r5)
80206230:	2007d7fa 	srai	r3,r4,31
80206234:	29400104 	addi	r5,r5,4
80206238:	d9402d15 	stw	r5,180(sp)
8020623c:	11000015 	stw	r4,0(r2)
80206240:	10c00115 	stw	r3,4(r2)
80206244:	003ced06 	br	802055fc <__reset+0xfa1e55fc>
80206248:	94801014 	ori	r18,r18,64
8020624c:	bc400007 	ldb	r17,0(r23)
80206250:	003d1306 	br	802056a0 <__reset+0xfa1e56a0>
80206254:	012008b4 	movhi	r4,32802
80206258:	212cc004 	addi	r4,r4,-19712
8020625c:	0039883a 	mov	fp,zero
80206260:	d9003a15 	stw	r4,232(sp)
80206264:	04401e04 	movi	r17,120
80206268:	003f8206 	br	80206074 <__reset+0xfa1e6074>
8020626c:	18c03fcc 	andi	r3,r3,255
80206270:	1805221e 	bne	r3,zero,802076fc <___svfprintf_internal_r+0x21ac>
80206274:	883d9526 	beq	r17,zero,802058cc <__reset+0xfa1e58cc>
80206278:	00c00044 	movi	r3,1
8020627c:	d8c02a15 	stw	r3,168(sp)
80206280:	dc401405 	stb	r17,80(sp)
80206284:	d8002785 	stb	zero,158(sp)
80206288:	003f9406 	br	802060dc <__reset+0xfa1e60dc>
8020628c:	012008b4 	movhi	r4,32802
80206290:	212cc004 	addi	r4,r4,-19712
80206294:	d9003a15 	stw	r4,232(sp)
80206298:	d8c02d15 	stw	r3,180(sp)
8020629c:	1025883a 	mov	r18,r2
802062a0:	04401e04 	movi	r17,120
802062a4:	a584b03a 	or	r2,r20,r22
802062a8:	1000fa1e 	bne	r2,zero,80206694 <___svfprintf_internal_r+0x1144>
802062ac:	0039883a 	mov	fp,zero
802062b0:	00800084 	movi	r2,2
802062b4:	10803fcc 	andi	r2,r2,255
802062b8:	00c00044 	movi	r3,1
802062bc:	10c21626 	beq	r2,r3,80206b18 <___svfprintf_internal_r+0x15c8>
802062c0:	00c00084 	movi	r3,2
802062c4:	10fe301e 	bne	r2,r3,80205b88 <__reset+0xfa1e5b88>
802062c8:	003d7606 	br	802058a4 <__reset+0xfa1e58a4>
802062cc:	d8c02017 	ldw	r3,128(sp)
802062d0:	003e9506 	br	80205d28 <__reset+0xfa1e5d28>
802062d4:	00801944 	movi	r2,101
802062d8:	14407c0e 	bge	r2,r17,802064cc <___svfprintf_internal_r+0xf7c>
802062dc:	d9003617 	ldw	r4,216(sp)
802062e0:	d9403717 	ldw	r5,220(sp)
802062e4:	000d883a 	mov	r6,zero
802062e8:	000f883a 	mov	r7,zero
802062ec:	d8c03d15 	stw	r3,244(sp)
802062f0:	da003e15 	stw	r8,248(sp)
802062f4:	0213c600 	call	80213c60 <__eqdf2>
802062f8:	d8c03d17 	ldw	r3,244(sp)
802062fc:	da003e17 	ldw	r8,248(sp)
80206300:	1000f51e 	bne	r2,zero,802066d8 <___svfprintf_internal_r+0x1188>
80206304:	d8801f17 	ldw	r2,124(sp)
80206308:	012008b4 	movhi	r4,32802
8020630c:	212cc704 	addi	r4,r4,-19684
80206310:	18c00044 	addi	r3,r3,1
80206314:	10800044 	addi	r2,r2,1
80206318:	41000015 	stw	r4,0(r8)
8020631c:	01000044 	movi	r4,1
80206320:	41000115 	stw	r4,4(r8)
80206324:	d8c02015 	stw	r3,128(sp)
80206328:	d8801f15 	stw	r2,124(sp)
8020632c:	010001c4 	movi	r4,7
80206330:	20826616 	blt	r4,r2,80206ccc <___svfprintf_internal_r+0x177c>
80206334:	42000204 	addi	r8,r8,8
80206338:	d8802617 	ldw	r2,152(sp)
8020633c:	d9403317 	ldw	r5,204(sp)
80206340:	11400216 	blt	r2,r5,8020634c <___svfprintf_internal_r+0xdfc>
80206344:	9080004c 	andi	r2,r18,1
80206348:	103ed526 	beq	r2,zero,80205ea0 <__reset+0xfa1e5ea0>
8020634c:	d8803817 	ldw	r2,224(sp)
80206350:	d9003417 	ldw	r4,208(sp)
80206354:	d9403817 	ldw	r5,224(sp)
80206358:	1887883a 	add	r3,r3,r2
8020635c:	d8801f17 	ldw	r2,124(sp)
80206360:	41000015 	stw	r4,0(r8)
80206364:	41400115 	stw	r5,4(r8)
80206368:	10800044 	addi	r2,r2,1
8020636c:	d8c02015 	stw	r3,128(sp)
80206370:	d8801f15 	stw	r2,124(sp)
80206374:	010001c4 	movi	r4,7
80206378:	2082af16 	blt	r4,r2,80206e38 <___svfprintf_internal_r+0x18e8>
8020637c:	42000204 	addi	r8,r8,8
80206380:	d8803317 	ldw	r2,204(sp)
80206384:	143fffc4 	addi	r16,r2,-1
80206388:	043ec50e 	bge	zero,r16,80205ea0 <__reset+0xfa1e5ea0>
8020638c:	04400404 	movi	r17,16
80206390:	d8801f17 	ldw	r2,124(sp)
80206394:	8c00860e 	bge	r17,r16,802065b0 <___svfprintf_internal_r+0x1060>
80206398:	016008b4 	movhi	r5,32802
8020639c:	296cc784 	addi	r5,r5,-19682
802063a0:	d9402b15 	stw	r5,172(sp)
802063a4:	058001c4 	movi	r22,7
802063a8:	dd002c17 	ldw	r20,176(sp)
802063ac:	00000306 	br	802063bc <___svfprintf_internal_r+0xe6c>
802063b0:	42000204 	addi	r8,r8,8
802063b4:	843ffc04 	addi	r16,r16,-16
802063b8:	8c00800e 	bge	r17,r16,802065bc <___svfprintf_internal_r+0x106c>
802063bc:	18c00404 	addi	r3,r3,16
802063c0:	10800044 	addi	r2,r2,1
802063c4:	45400015 	stw	r21,0(r8)
802063c8:	44400115 	stw	r17,4(r8)
802063cc:	d8c02015 	stw	r3,128(sp)
802063d0:	d8801f15 	stw	r2,124(sp)
802063d4:	b0bff60e 	bge	r22,r2,802063b0 <__reset+0xfa1e63b0>
802063d8:	d9801e04 	addi	r6,sp,120
802063dc:	a00b883a 	mov	r5,r20
802063e0:	9809883a 	mov	r4,r19
802063e4:	020eae00 	call	8020eae0 <__ssprint_r>
802063e8:	103d3e1e 	bne	r2,zero,802058e4 <__reset+0xfa1e58e4>
802063ec:	d8c02017 	ldw	r3,128(sp)
802063f0:	d8801f17 	ldw	r2,124(sp)
802063f4:	da000404 	addi	r8,sp,16
802063f8:	003fee06 	br	802063b4 <__reset+0xfa1e63b4>
802063fc:	d9403117 	ldw	r5,196(sp)
80206400:	d8802a17 	ldw	r2,168(sp)
80206404:	28adc83a 	sub	r22,r5,r2
80206408:	05be650e 	bge	zero,r22,80205da0 <__reset+0xfa1e5da0>
8020640c:	07000404 	movi	fp,16
80206410:	d8801f17 	ldw	r2,124(sp)
80206414:	e583a20e 	bge	fp,r22,802072a0 <___svfprintf_internal_r+0x1d50>
80206418:	016008b4 	movhi	r5,32802
8020641c:	296cc784 	addi	r5,r5,-19682
80206420:	dc403015 	stw	r17,192(sp)
80206424:	d9402b15 	stw	r5,172(sp)
80206428:	b023883a 	mov	r17,r22
8020642c:	050001c4 	movi	r20,7
80206430:	902d883a 	mov	r22,r18
80206434:	8025883a 	mov	r18,r16
80206438:	dc002c17 	ldw	r16,176(sp)
8020643c:	00000306 	br	8020644c <___svfprintf_internal_r+0xefc>
80206440:	8c7ffc04 	addi	r17,r17,-16
80206444:	42000204 	addi	r8,r8,8
80206448:	e440110e 	bge	fp,r17,80206490 <___svfprintf_internal_r+0xf40>
8020644c:	18c00404 	addi	r3,r3,16
80206450:	10800044 	addi	r2,r2,1
80206454:	45400015 	stw	r21,0(r8)
80206458:	47000115 	stw	fp,4(r8)
8020645c:	d8c02015 	stw	r3,128(sp)
80206460:	d8801f15 	stw	r2,124(sp)
80206464:	a0bff60e 	bge	r20,r2,80206440 <__reset+0xfa1e6440>
80206468:	d9801e04 	addi	r6,sp,120
8020646c:	800b883a 	mov	r5,r16
80206470:	9809883a 	mov	r4,r19
80206474:	020eae00 	call	8020eae0 <__ssprint_r>
80206478:	103d1a1e 	bne	r2,zero,802058e4 <__reset+0xfa1e58e4>
8020647c:	8c7ffc04 	addi	r17,r17,-16
80206480:	d8c02017 	ldw	r3,128(sp)
80206484:	d8801f17 	ldw	r2,124(sp)
80206488:	da000404 	addi	r8,sp,16
8020648c:	e47fef16 	blt	fp,r17,8020644c <__reset+0xfa1e644c>
80206490:	9021883a 	mov	r16,r18
80206494:	b025883a 	mov	r18,r22
80206498:	882d883a 	mov	r22,r17
8020649c:	dc403017 	ldw	r17,192(sp)
802064a0:	d9002b17 	ldw	r4,172(sp)
802064a4:	1d87883a 	add	r3,r3,r22
802064a8:	10800044 	addi	r2,r2,1
802064ac:	41000015 	stw	r4,0(r8)
802064b0:	45800115 	stw	r22,4(r8)
802064b4:	d8c02015 	stw	r3,128(sp)
802064b8:	d8801f15 	stw	r2,124(sp)
802064bc:	010001c4 	movi	r4,7
802064c0:	20819a16 	blt	r4,r2,80206b2c <___svfprintf_internal_r+0x15dc>
802064c4:	42000204 	addi	r8,r8,8
802064c8:	003e3506 	br	80205da0 <__reset+0xfa1e5da0>
802064cc:	d9403317 	ldw	r5,204(sp)
802064d0:	00800044 	movi	r2,1
802064d4:	18c00044 	addi	r3,r3,1
802064d8:	1141710e 	bge	r2,r5,80206aa0 <___svfprintf_internal_r+0x1550>
802064dc:	dc401f17 	ldw	r17,124(sp)
802064e0:	00800044 	movi	r2,1
802064e4:	40800115 	stw	r2,4(r8)
802064e8:	8c400044 	addi	r17,r17,1
802064ec:	44000015 	stw	r16,0(r8)
802064f0:	d8c02015 	stw	r3,128(sp)
802064f4:	dc401f15 	stw	r17,124(sp)
802064f8:	008001c4 	movi	r2,7
802064fc:	14417416 	blt	r2,r17,80206ad0 <___svfprintf_internal_r+0x1580>
80206500:	42000204 	addi	r8,r8,8
80206504:	d8803817 	ldw	r2,224(sp)
80206508:	d9003417 	ldw	r4,208(sp)
8020650c:	8c400044 	addi	r17,r17,1
80206510:	10c7883a 	add	r3,r2,r3
80206514:	40800115 	stw	r2,4(r8)
80206518:	41000015 	stw	r4,0(r8)
8020651c:	d8c02015 	stw	r3,128(sp)
80206520:	dc401f15 	stw	r17,124(sp)
80206524:	008001c4 	movi	r2,7
80206528:	14417216 	blt	r2,r17,80206af4 <___svfprintf_internal_r+0x15a4>
8020652c:	45800204 	addi	r22,r8,8
80206530:	d9003617 	ldw	r4,216(sp)
80206534:	d9403717 	ldw	r5,220(sp)
80206538:	000d883a 	mov	r6,zero
8020653c:	000f883a 	mov	r7,zero
80206540:	d8c03d15 	stw	r3,244(sp)
80206544:	0213c600 	call	80213c60 <__eqdf2>
80206548:	d8c03d17 	ldw	r3,244(sp)
8020654c:	1000b326 	beq	r2,zero,8020681c <___svfprintf_internal_r+0x12cc>
80206550:	d9403317 	ldw	r5,204(sp)
80206554:	84000044 	addi	r16,r16,1
80206558:	8c400044 	addi	r17,r17,1
8020655c:	28bfffc4 	addi	r2,r5,-1
80206560:	1887883a 	add	r3,r3,r2
80206564:	b0800115 	stw	r2,4(r22)
80206568:	b4000015 	stw	r16,0(r22)
8020656c:	d8c02015 	stw	r3,128(sp)
80206570:	dc401f15 	stw	r17,124(sp)
80206574:	008001c4 	movi	r2,7
80206578:	1440d216 	blt	r2,r17,802068c4 <___svfprintf_internal_r+0x1374>
8020657c:	b5800204 	addi	r22,r22,8
80206580:	d9003b17 	ldw	r4,236(sp)
80206584:	df0022c4 	addi	fp,sp,139
80206588:	8c400044 	addi	r17,r17,1
8020658c:	20c7883a 	add	r3,r4,r3
80206590:	b7000015 	stw	fp,0(r22)
80206594:	b1000115 	stw	r4,4(r22)
80206598:	d8c02015 	stw	r3,128(sp)
8020659c:	dc401f15 	stw	r17,124(sp)
802065a0:	008001c4 	movi	r2,7
802065a4:	14400e16 	blt	r2,r17,802065e0 <___svfprintf_internal_r+0x1090>
802065a8:	b2000204 	addi	r8,r22,8
802065ac:	003e3c06 	br	80205ea0 <__reset+0xfa1e5ea0>
802065b0:	012008b4 	movhi	r4,32802
802065b4:	212cc784 	addi	r4,r4,-19682
802065b8:	d9002b15 	stw	r4,172(sp)
802065bc:	d9002b17 	ldw	r4,172(sp)
802065c0:	1c07883a 	add	r3,r3,r16
802065c4:	44000115 	stw	r16,4(r8)
802065c8:	41000015 	stw	r4,0(r8)
802065cc:	10800044 	addi	r2,r2,1
802065d0:	d8c02015 	stw	r3,128(sp)
802065d4:	d8801f15 	stw	r2,124(sp)
802065d8:	010001c4 	movi	r4,7
802065dc:	20be2f0e 	bge	r4,r2,80205e9c <__reset+0xfa1e5e9c>
802065e0:	d9402c17 	ldw	r5,176(sp)
802065e4:	d9801e04 	addi	r6,sp,120
802065e8:	9809883a 	mov	r4,r19
802065ec:	020eae00 	call	8020eae0 <__ssprint_r>
802065f0:	103cbc1e 	bne	r2,zero,802058e4 <__reset+0xfa1e58e4>
802065f4:	d8c02017 	ldw	r3,128(sp)
802065f8:	da000404 	addi	r8,sp,16
802065fc:	003e2806 	br	80205ea0 <__reset+0xfa1e5ea0>
80206600:	d9402c17 	ldw	r5,176(sp)
80206604:	d9801e04 	addi	r6,sp,120
80206608:	9809883a 	mov	r4,r19
8020660c:	020eae00 	call	8020eae0 <__ssprint_r>
80206610:	103e5f26 	beq	r2,zero,80205f90 <__reset+0xfa1e5f90>
80206614:	003cb306 	br	802058e4 <__reset+0xfa1e58e4>
80206618:	d9402c17 	ldw	r5,176(sp)
8020661c:	d9801e04 	addi	r6,sp,120
80206620:	9809883a 	mov	r4,r19
80206624:	020eae00 	call	8020eae0 <__ssprint_r>
80206628:	103cae1e 	bne	r2,zero,802058e4 <__reset+0xfa1e58e4>
8020662c:	d8c02017 	ldw	r3,128(sp)
80206630:	da000404 	addi	r8,sp,16
80206634:	003e0d06 	br	80205e6c <__reset+0xfa1e5e6c>
80206638:	d9402c17 	ldw	r5,176(sp)
8020663c:	d9801e04 	addi	r6,sp,120
80206640:	9809883a 	mov	r4,r19
80206644:	020eae00 	call	8020eae0 <__ssprint_r>
80206648:	103ca61e 	bne	r2,zero,802058e4 <__reset+0xfa1e58e4>
8020664c:	d8c02017 	ldw	r3,128(sp)
80206650:	da000404 	addi	r8,sp,16
80206654:	003dc106 	br	80205d5c <__reset+0xfa1e5d5c>
80206658:	d9402c17 	ldw	r5,176(sp)
8020665c:	d9801e04 	addi	r6,sp,120
80206660:	9809883a 	mov	r4,r19
80206664:	020eae00 	call	8020eae0 <__ssprint_r>
80206668:	103c9e1e 	bne	r2,zero,802058e4 <__reset+0xfa1e58e4>
8020666c:	d8c02017 	ldw	r3,128(sp)
80206670:	da000404 	addi	r8,sp,16
80206674:	003dc706 	br	80205d94 <__reset+0xfa1e5d94>
80206678:	d8802917 	ldw	r2,164(sp)
8020667c:	d8002785 	stb	zero,158(sp)
80206680:	103f0816 	blt	r2,zero,802062a4 <__reset+0xfa1e62a4>
80206684:	00ffdfc4 	movi	r3,-129
80206688:	a584b03a 	or	r2,r20,r22
8020668c:	90e4703a 	and	r18,r18,r3
80206690:	103c8126 	beq	r2,zero,80205898 <__reset+0xfa1e5898>
80206694:	0039883a 	mov	fp,zero
80206698:	003e7606 	br	80206074 <__reset+0xfa1e6074>
8020669c:	9080040c 	andi	r2,r18,16
802066a0:	10013d26 	beq	r2,zero,80206b98 <___svfprintf_internal_r+0x1648>
802066a4:	d9002d17 	ldw	r4,180(sp)
802066a8:	d9402917 	ldw	r5,164(sp)
802066ac:	d8002785 	stb	zero,158(sp)
802066b0:	20800104 	addi	r2,r4,4
802066b4:	25000017 	ldw	r20,0(r4)
802066b8:	002d883a 	mov	r22,zero
802066bc:	28013f16 	blt	r5,zero,80206bbc <___svfprintf_internal_r+0x166c>
802066c0:	00ffdfc4 	movi	r3,-129
802066c4:	d8802d15 	stw	r2,180(sp)
802066c8:	90e4703a 	and	r18,r18,r3
802066cc:	a03d2b26 	beq	r20,zero,80205b7c <__reset+0xfa1e5b7c>
802066d0:	0039883a 	mov	fp,zero
802066d4:	003d2e06 	br	80205b90 <__reset+0xfa1e5b90>
802066d8:	dc402617 	ldw	r17,152(sp)
802066dc:	0441830e 	bge	zero,r17,80206cec <___svfprintf_internal_r+0x179c>
802066e0:	dc403217 	ldw	r17,200(sp)
802066e4:	d8803317 	ldw	r2,204(sp)
802066e8:	1440010e 	bge	r2,r17,802066f0 <___svfprintf_internal_r+0x11a0>
802066ec:	1023883a 	mov	r17,r2
802066f0:	04400a0e 	bge	zero,r17,8020671c <___svfprintf_internal_r+0x11cc>
802066f4:	d8801f17 	ldw	r2,124(sp)
802066f8:	1c47883a 	add	r3,r3,r17
802066fc:	44000015 	stw	r16,0(r8)
80206700:	10800044 	addi	r2,r2,1
80206704:	44400115 	stw	r17,4(r8)
80206708:	d8c02015 	stw	r3,128(sp)
8020670c:	d8801f15 	stw	r2,124(sp)
80206710:	010001c4 	movi	r4,7
80206714:	20827516 	blt	r4,r2,802070ec <___svfprintf_internal_r+0x1b9c>
80206718:	42000204 	addi	r8,r8,8
8020671c:	88027b16 	blt	r17,zero,8020710c <___svfprintf_internal_r+0x1bbc>
80206720:	d9003217 	ldw	r4,200(sp)
80206724:	2463c83a 	sub	r17,r4,r17
80206728:	0440990e 	bge	zero,r17,80206990 <___svfprintf_internal_r+0x1440>
8020672c:	05800404 	movi	r22,16
80206730:	d8801f17 	ldw	r2,124(sp)
80206734:	b441530e 	bge	r22,r17,80206c84 <___svfprintf_internal_r+0x1734>
80206738:	012008b4 	movhi	r4,32802
8020673c:	212cc784 	addi	r4,r4,-19682
80206740:	d9002b15 	stw	r4,172(sp)
80206744:	070001c4 	movi	fp,7
80206748:	dd002c17 	ldw	r20,176(sp)
8020674c:	00000306 	br	8020675c <___svfprintf_internal_r+0x120c>
80206750:	42000204 	addi	r8,r8,8
80206754:	8c7ffc04 	addi	r17,r17,-16
80206758:	b4414d0e 	bge	r22,r17,80206c90 <___svfprintf_internal_r+0x1740>
8020675c:	18c00404 	addi	r3,r3,16
80206760:	10800044 	addi	r2,r2,1
80206764:	45400015 	stw	r21,0(r8)
80206768:	45800115 	stw	r22,4(r8)
8020676c:	d8c02015 	stw	r3,128(sp)
80206770:	d8801f15 	stw	r2,124(sp)
80206774:	e0bff60e 	bge	fp,r2,80206750 <__reset+0xfa1e6750>
80206778:	d9801e04 	addi	r6,sp,120
8020677c:	a00b883a 	mov	r5,r20
80206780:	9809883a 	mov	r4,r19
80206784:	020eae00 	call	8020eae0 <__ssprint_r>
80206788:	103c561e 	bne	r2,zero,802058e4 <__reset+0xfa1e58e4>
8020678c:	d8c02017 	ldw	r3,128(sp)
80206790:	d8801f17 	ldw	r2,124(sp)
80206794:	da000404 	addi	r8,sp,16
80206798:	003fee06 	br	80206754 <__reset+0xfa1e6754>
8020679c:	d9402c17 	ldw	r5,176(sp)
802067a0:	d9801e04 	addi	r6,sp,120
802067a4:	9809883a 	mov	r4,r19
802067a8:	020eae00 	call	8020eae0 <__ssprint_r>
802067ac:	103c4d1e 	bne	r2,zero,802058e4 <__reset+0xfa1e58e4>
802067b0:	d8c02017 	ldw	r3,128(sp)
802067b4:	df002787 	ldb	fp,158(sp)
802067b8:	da000404 	addi	r8,sp,16
802067bc:	003d5a06 	br	80205d28 <__reset+0xfa1e5d28>
802067c0:	9080040c 	andi	r2,r18,16
802067c4:	10005c26 	beq	r2,zero,80206938 <___svfprintf_internal_r+0x13e8>
802067c8:	d9402d17 	ldw	r5,180(sp)
802067cc:	d8c02917 	ldw	r3,164(sp)
802067d0:	d8002785 	stb	zero,158(sp)
802067d4:	28800104 	addi	r2,r5,4
802067d8:	2d000017 	ldw	r20,0(r5)
802067dc:	002d883a 	mov	r22,zero
802067e0:	18005e16 	blt	r3,zero,8020695c <___svfprintf_internal_r+0x140c>
802067e4:	00ffdfc4 	movi	r3,-129
802067e8:	d8802d15 	stw	r2,180(sp)
802067ec:	90e4703a 	and	r18,r18,r3
802067f0:	0039883a 	mov	fp,zero
802067f4:	a03dfe26 	beq	r20,zero,80205ff0 <__reset+0xfa1e5ff0>
802067f8:	00800244 	movi	r2,9
802067fc:	153cb336 	bltu	r2,r20,80205acc <__reset+0xfa1e5acc>
80206800:	a5000c04 	addi	r20,r20,48
80206804:	dc001dc4 	addi	r16,sp,119
80206808:	dd001dc5 	stb	r20,119(sp)
8020680c:	d8c02817 	ldw	r3,160(sp)
80206810:	1c07c83a 	sub	r3,r3,r16
80206814:	d8c02e15 	stw	r3,184(sp)
80206818:	003cf506 	br	80205bf0 <__reset+0xfa1e5bf0>
8020681c:	d8803317 	ldw	r2,204(sp)
80206820:	143fffc4 	addi	r16,r2,-1
80206824:	043f560e 	bge	zero,r16,80206580 <__reset+0xfa1e6580>
80206828:	07000404 	movi	fp,16
8020682c:	e403530e 	bge	fp,r16,8020757c <___svfprintf_internal_r+0x202c>
80206830:	016008b4 	movhi	r5,32802
80206834:	296cc784 	addi	r5,r5,-19682
80206838:	d9402b15 	stw	r5,172(sp)
8020683c:	01c001c4 	movi	r7,7
80206840:	dd002c17 	ldw	r20,176(sp)
80206844:	00000306 	br	80206854 <___svfprintf_internal_r+0x1304>
80206848:	843ffc04 	addi	r16,r16,-16
8020684c:	b5800204 	addi	r22,r22,8
80206850:	e400130e 	bge	fp,r16,802068a0 <___svfprintf_internal_r+0x1350>
80206854:	18c00404 	addi	r3,r3,16
80206858:	8c400044 	addi	r17,r17,1
8020685c:	b5400015 	stw	r21,0(r22)
80206860:	b7000115 	stw	fp,4(r22)
80206864:	d8c02015 	stw	r3,128(sp)
80206868:	dc401f15 	stw	r17,124(sp)
8020686c:	3c7ff60e 	bge	r7,r17,80206848 <__reset+0xfa1e6848>
80206870:	d9801e04 	addi	r6,sp,120
80206874:	a00b883a 	mov	r5,r20
80206878:	9809883a 	mov	r4,r19
8020687c:	d9c03d15 	stw	r7,244(sp)
80206880:	020eae00 	call	8020eae0 <__ssprint_r>
80206884:	d9c03d17 	ldw	r7,244(sp)
80206888:	103c161e 	bne	r2,zero,802058e4 <__reset+0xfa1e58e4>
8020688c:	843ffc04 	addi	r16,r16,-16
80206890:	d8c02017 	ldw	r3,128(sp)
80206894:	dc401f17 	ldw	r17,124(sp)
80206898:	dd800404 	addi	r22,sp,16
8020689c:	e43fed16 	blt	fp,r16,80206854 <__reset+0xfa1e6854>
802068a0:	d8802b17 	ldw	r2,172(sp)
802068a4:	1c07883a 	add	r3,r3,r16
802068a8:	8c400044 	addi	r17,r17,1
802068ac:	b0800015 	stw	r2,0(r22)
802068b0:	b4000115 	stw	r16,4(r22)
802068b4:	d8c02015 	stw	r3,128(sp)
802068b8:	dc401f15 	stw	r17,124(sp)
802068bc:	008001c4 	movi	r2,7
802068c0:	147f2e0e 	bge	r2,r17,8020657c <__reset+0xfa1e657c>
802068c4:	d9402c17 	ldw	r5,176(sp)
802068c8:	d9801e04 	addi	r6,sp,120
802068cc:	9809883a 	mov	r4,r19
802068d0:	020eae00 	call	8020eae0 <__ssprint_r>
802068d4:	103c031e 	bne	r2,zero,802058e4 <__reset+0xfa1e58e4>
802068d8:	d8c02017 	ldw	r3,128(sp)
802068dc:	dc401f17 	ldw	r17,124(sp)
802068e0:	dd800404 	addi	r22,sp,16
802068e4:	003f2606 	br	80206580 <__reset+0xfa1e6580>
802068e8:	9080040c 	andi	r2,r18,16
802068ec:	1000c326 	beq	r2,zero,80206bfc <___svfprintf_internal_r+0x16ac>
802068f0:	d8802d17 	ldw	r2,180(sp)
802068f4:	15000017 	ldw	r20,0(r2)
802068f8:	10800104 	addi	r2,r2,4
802068fc:	d8802d15 	stw	r2,180(sp)
80206900:	a02dd7fa 	srai	r22,r20,31
80206904:	b005883a 	mov	r2,r22
80206908:	103c680e 	bge	r2,zero,80205aac <__reset+0xfa1e5aac>
8020690c:	0529c83a 	sub	r20,zero,r20
80206910:	a004c03a 	cmpne	r2,r20,zero
80206914:	05adc83a 	sub	r22,zero,r22
80206918:	b0adc83a 	sub	r22,r22,r2
8020691c:	d8802917 	ldw	r2,164(sp)
80206920:	07000b44 	movi	fp,45
80206924:	df002785 	stb	fp,158(sp)
80206928:	10022e16 	blt	r2,zero,802071e4 <___svfprintf_internal_r+0x1c94>
8020692c:	00bfdfc4 	movi	r2,-129
80206930:	90a4703a 	and	r18,r18,r2
80206934:	003c6406 	br	80205ac8 <__reset+0xfa1e5ac8>
80206938:	9080100c 	andi	r2,r18,64
8020693c:	d8002785 	stb	zero,158(sp)
80206940:	10012526 	beq	r2,zero,80206dd8 <___svfprintf_internal_r+0x1888>
80206944:	d9002d17 	ldw	r4,180(sp)
80206948:	d9402917 	ldw	r5,164(sp)
8020694c:	002d883a 	mov	r22,zero
80206950:	20800104 	addi	r2,r4,4
80206954:	2500000b 	ldhu	r20,0(r4)
80206958:	283fa20e 	bge	r5,zero,802067e4 <__reset+0xfa1e67e4>
8020695c:	d8802d15 	stw	r2,180(sp)
80206960:	0039883a 	mov	fp,zero
80206964:	a584b03a 	or	r2,r20,r22
80206968:	103c571e 	bne	r2,zero,80205ac8 <__reset+0xfa1e5ac8>
8020696c:	00800044 	movi	r2,1
80206970:	003e5006 	br	802062b4 <__reset+0xfa1e62b4>
80206974:	d9402c17 	ldw	r5,176(sp)
80206978:	d9801e04 	addi	r6,sp,120
8020697c:	9809883a 	mov	r4,r19
80206980:	020eae00 	call	8020eae0 <__ssprint_r>
80206984:	103bd71e 	bne	r2,zero,802058e4 <__reset+0xfa1e58e4>
80206988:	d8c02017 	ldw	r3,128(sp)
8020698c:	da000404 	addi	r8,sp,16
80206990:	d9003217 	ldw	r4,200(sp)
80206994:	d8802617 	ldw	r2,152(sp)
80206998:	d9403317 	ldw	r5,204(sp)
8020699c:	8123883a 	add	r17,r16,r4
802069a0:	11400216 	blt	r2,r5,802069ac <___svfprintf_internal_r+0x145c>
802069a4:	9100004c 	andi	r4,r18,1
802069a8:	20000d26 	beq	r4,zero,802069e0 <___svfprintf_internal_r+0x1490>
802069ac:	d9003817 	ldw	r4,224(sp)
802069b0:	d9403417 	ldw	r5,208(sp)
802069b4:	1907883a 	add	r3,r3,r4
802069b8:	d9001f17 	ldw	r4,124(sp)
802069bc:	41400015 	stw	r5,0(r8)
802069c0:	d9403817 	ldw	r5,224(sp)
802069c4:	21000044 	addi	r4,r4,1
802069c8:	d8c02015 	stw	r3,128(sp)
802069cc:	41400115 	stw	r5,4(r8)
802069d0:	d9001f15 	stw	r4,124(sp)
802069d4:	014001c4 	movi	r5,7
802069d8:	2901dc16 	blt	r5,r4,8020714c <___svfprintf_internal_r+0x1bfc>
802069dc:	42000204 	addi	r8,r8,8
802069e0:	d9003317 	ldw	r4,204(sp)
802069e4:	8121883a 	add	r16,r16,r4
802069e8:	2085c83a 	sub	r2,r4,r2
802069ec:	8461c83a 	sub	r16,r16,r17
802069f0:	1400010e 	bge	r2,r16,802069f8 <___svfprintf_internal_r+0x14a8>
802069f4:	1021883a 	mov	r16,r2
802069f8:	04000a0e 	bge	zero,r16,80206a24 <___svfprintf_internal_r+0x14d4>
802069fc:	d9001f17 	ldw	r4,124(sp)
80206a00:	1c07883a 	add	r3,r3,r16
80206a04:	44400015 	stw	r17,0(r8)
80206a08:	21000044 	addi	r4,r4,1
80206a0c:	44000115 	stw	r16,4(r8)
80206a10:	d8c02015 	stw	r3,128(sp)
80206a14:	d9001f15 	stw	r4,124(sp)
80206a18:	014001c4 	movi	r5,7
80206a1c:	2901e616 	blt	r5,r4,802071b8 <___svfprintf_internal_r+0x1c68>
80206a20:	42000204 	addi	r8,r8,8
80206a24:	8001f616 	blt	r16,zero,80207200 <___svfprintf_internal_r+0x1cb0>
80206a28:	1421c83a 	sub	r16,r2,r16
80206a2c:	043d1c0e 	bge	zero,r16,80205ea0 <__reset+0xfa1e5ea0>
80206a30:	04400404 	movi	r17,16
80206a34:	d8801f17 	ldw	r2,124(sp)
80206a38:	8c3edd0e 	bge	r17,r16,802065b0 <__reset+0xfa1e65b0>
80206a3c:	016008b4 	movhi	r5,32802
80206a40:	296cc784 	addi	r5,r5,-19682
80206a44:	d9402b15 	stw	r5,172(sp)
80206a48:	058001c4 	movi	r22,7
80206a4c:	dd002c17 	ldw	r20,176(sp)
80206a50:	00000306 	br	80206a60 <___svfprintf_internal_r+0x1510>
80206a54:	42000204 	addi	r8,r8,8
80206a58:	843ffc04 	addi	r16,r16,-16
80206a5c:	8c3ed70e 	bge	r17,r16,802065bc <__reset+0xfa1e65bc>
80206a60:	18c00404 	addi	r3,r3,16
80206a64:	10800044 	addi	r2,r2,1
80206a68:	45400015 	stw	r21,0(r8)
80206a6c:	44400115 	stw	r17,4(r8)
80206a70:	d8c02015 	stw	r3,128(sp)
80206a74:	d8801f15 	stw	r2,124(sp)
80206a78:	b0bff60e 	bge	r22,r2,80206a54 <__reset+0xfa1e6a54>
80206a7c:	d9801e04 	addi	r6,sp,120
80206a80:	a00b883a 	mov	r5,r20
80206a84:	9809883a 	mov	r4,r19
80206a88:	020eae00 	call	8020eae0 <__ssprint_r>
80206a8c:	103b951e 	bne	r2,zero,802058e4 <__reset+0xfa1e58e4>
80206a90:	d8c02017 	ldw	r3,128(sp)
80206a94:	d8801f17 	ldw	r2,124(sp)
80206a98:	da000404 	addi	r8,sp,16
80206a9c:	003fee06 	br	80206a58 <__reset+0xfa1e6a58>
80206aa0:	9088703a 	and	r4,r18,r2
80206aa4:	203e8d1e 	bne	r4,zero,802064dc <__reset+0xfa1e64dc>
80206aa8:	dc401f17 	ldw	r17,124(sp)
80206aac:	40800115 	stw	r2,4(r8)
80206ab0:	44000015 	stw	r16,0(r8)
80206ab4:	8c400044 	addi	r17,r17,1
80206ab8:	d8c02015 	stw	r3,128(sp)
80206abc:	dc401f15 	stw	r17,124(sp)
80206ac0:	008001c4 	movi	r2,7
80206ac4:	147f7f16 	blt	r2,r17,802068c4 <__reset+0xfa1e68c4>
80206ac8:	45800204 	addi	r22,r8,8
80206acc:	003eac06 	br	80206580 <__reset+0xfa1e6580>
80206ad0:	d9402c17 	ldw	r5,176(sp)
80206ad4:	d9801e04 	addi	r6,sp,120
80206ad8:	9809883a 	mov	r4,r19
80206adc:	020eae00 	call	8020eae0 <__ssprint_r>
80206ae0:	103b801e 	bne	r2,zero,802058e4 <__reset+0xfa1e58e4>
80206ae4:	d8c02017 	ldw	r3,128(sp)
80206ae8:	dc401f17 	ldw	r17,124(sp)
80206aec:	da000404 	addi	r8,sp,16
80206af0:	003e8406 	br	80206504 <__reset+0xfa1e6504>
80206af4:	d9402c17 	ldw	r5,176(sp)
80206af8:	d9801e04 	addi	r6,sp,120
80206afc:	9809883a 	mov	r4,r19
80206b00:	020eae00 	call	8020eae0 <__ssprint_r>
80206b04:	103b771e 	bne	r2,zero,802058e4 <__reset+0xfa1e58e4>
80206b08:	d8c02017 	ldw	r3,128(sp)
80206b0c:	dc401f17 	ldw	r17,124(sp)
80206b10:	dd800404 	addi	r22,sp,16
80206b14:	003e8606 	br	80206530 <__reset+0xfa1e6530>
80206b18:	0029883a 	mov	r20,zero
80206b1c:	a5000c04 	addi	r20,r20,48
80206b20:	dc001dc4 	addi	r16,sp,119
80206b24:	dd001dc5 	stb	r20,119(sp)
80206b28:	003f3806 	br	8020680c <__reset+0xfa1e680c>
80206b2c:	d9402c17 	ldw	r5,176(sp)
80206b30:	d9801e04 	addi	r6,sp,120
80206b34:	9809883a 	mov	r4,r19
80206b38:	020eae00 	call	8020eae0 <__ssprint_r>
80206b3c:	103b691e 	bne	r2,zero,802058e4 <__reset+0xfa1e58e4>
80206b40:	d8c02017 	ldw	r3,128(sp)
80206b44:	da000404 	addi	r8,sp,16
80206b48:	003c9506 	br	80205da0 <__reset+0xfa1e5da0>
80206b4c:	d9003617 	ldw	r4,216(sp)
80206b50:	d9403717 	ldw	r5,220(sp)
80206b54:	da003e15 	stw	r8,248(sp)
80206b58:	020e8000 	call	8020e800 <__fpclassifyd>
80206b5c:	da003e17 	ldw	r8,248(sp)
80206b60:	1000bd1e 	bne	r2,zero,80206e58 <___svfprintf_internal_r+0x1908>
80206b64:	008011c4 	movi	r2,71
80206b68:	14411e0e 	bge	r2,r17,80206fe4 <___svfprintf_internal_r+0x1a94>
80206b6c:	042008b4 	movhi	r16,32802
80206b70:	842cba04 	addi	r16,r16,-19736
80206b74:	00c000c4 	movi	r3,3
80206b78:	00bfdfc4 	movi	r2,-129
80206b7c:	d8c02a15 	stw	r3,168(sp)
80206b80:	90a4703a 	and	r18,r18,r2
80206b84:	df002783 	ldbu	fp,158(sp)
80206b88:	d8c02e15 	stw	r3,184(sp)
80206b8c:	d8002915 	stw	zero,164(sp)
80206b90:	d8003215 	stw	zero,200(sp)
80206b94:	003c1c06 	br	80205c08 <__reset+0xfa1e5c08>
80206b98:	9080100c 	andi	r2,r18,64
80206b9c:	d8002785 	stb	zero,158(sp)
80206ba0:	10009426 	beq	r2,zero,80206df4 <___svfprintf_internal_r+0x18a4>
80206ba4:	d8c02d17 	ldw	r3,180(sp)
80206ba8:	d9002917 	ldw	r4,164(sp)
80206bac:	002d883a 	mov	r22,zero
80206bb0:	18800104 	addi	r2,r3,4
80206bb4:	1d00000b 	ldhu	r20,0(r3)
80206bb8:	203ec10e 	bge	r4,zero,802066c0 <__reset+0xfa1e66c0>
80206bbc:	a586b03a 	or	r3,r20,r22
80206bc0:	d8802d15 	stw	r2,180(sp)
80206bc4:	183ec21e 	bne	r3,zero,802066d0 <__reset+0xfa1e66d0>
80206bc8:	0039883a 	mov	fp,zero
80206bcc:	0005883a 	mov	r2,zero
80206bd0:	003db806 	br	802062b4 <__reset+0xfa1e62b4>
80206bd4:	d8802d17 	ldw	r2,180(sp)
80206bd8:	d8c02d17 	ldw	r3,180(sp)
80206bdc:	d9002d17 	ldw	r4,180(sp)
80206be0:	10800017 	ldw	r2,0(r2)
80206be4:	18c00117 	ldw	r3,4(r3)
80206be8:	21000204 	addi	r4,r4,8
80206bec:	d8803615 	stw	r2,216(sp)
80206bf0:	d8c03715 	stw	r3,220(sp)
80206bf4:	d9002d15 	stw	r4,180(sp)
80206bf8:	003b8206 	br	80205a04 <__reset+0xfa1e5a04>
80206bfc:	9080100c 	andi	r2,r18,64
80206c00:	10010726 	beq	r2,zero,80207020 <___svfprintf_internal_r+0x1ad0>
80206c04:	d8c02d17 	ldw	r3,180(sp)
80206c08:	1d00000f 	ldh	r20,0(r3)
80206c0c:	18c00104 	addi	r3,r3,4
80206c10:	d8c02d15 	stw	r3,180(sp)
80206c14:	a02dd7fa 	srai	r22,r20,31
80206c18:	b005883a 	mov	r2,r22
80206c1c:	003ba206 	br	80205aa8 <__reset+0xfa1e5aa8>
80206c20:	9080100c 	andi	r2,r18,64
80206c24:	10010526 	beq	r2,zero,8020703c <___svfprintf_internal_r+0x1aec>
80206c28:	d9002d17 	ldw	r4,180(sp)
80206c2c:	002d883a 	mov	r22,zero
80206c30:	2500000b 	ldhu	r20,0(r4)
80206c34:	21000104 	addi	r4,r4,4
80206c38:	d9002d15 	stw	r4,180(sp)
80206c3c:	003cfe06 	br	80206038 <__reset+0xfa1e6038>
80206c40:	bc400007 	ldb	r17,0(r23)
80206c44:	003a9606 	br	802056a0 <__reset+0xfa1e56a0>
80206c48:	9080040c 	andi	r2,r18,16
80206c4c:	10010126 	beq	r2,zero,80207054 <___svfprintf_internal_r+0x1b04>
80206c50:	d9402d17 	ldw	r5,180(sp)
80206c54:	d8c02f17 	ldw	r3,188(sp)
80206c58:	28800017 	ldw	r2,0(r5)
80206c5c:	29400104 	addi	r5,r5,4
80206c60:	d9402d15 	stw	r5,180(sp)
80206c64:	10c00015 	stw	r3,0(r2)
80206c68:	003a6406 	br	802055fc <__reset+0xfa1e55fc>
80206c6c:	d9002917 	ldw	r4,164(sp)
80206c70:	d8002785 	stb	zero,158(sp)
80206c74:	203d8d16 	blt	r4,zero,802062ac <__reset+0xfa1e62ac>
80206c78:	00bfdfc4 	movi	r2,-129
80206c7c:	90a4703a 	and	r18,r18,r2
80206c80:	003b0506 	br	80205898 <__reset+0xfa1e5898>
80206c84:	016008b4 	movhi	r5,32802
80206c88:	296cc784 	addi	r5,r5,-19682
80206c8c:	d9402b15 	stw	r5,172(sp)
80206c90:	d9402b17 	ldw	r5,172(sp)
80206c94:	1c47883a 	add	r3,r3,r17
80206c98:	10800044 	addi	r2,r2,1
80206c9c:	41400015 	stw	r5,0(r8)
80206ca0:	44400115 	stw	r17,4(r8)
80206ca4:	d8c02015 	stw	r3,128(sp)
80206ca8:	d8801f15 	stw	r2,124(sp)
80206cac:	010001c4 	movi	r4,7
80206cb0:	20bf3016 	blt	r4,r2,80206974 <__reset+0xfa1e6974>
80206cb4:	42000204 	addi	r8,r8,8
80206cb8:	003f3506 	br	80206990 <__reset+0xfa1e6990>
80206cbc:	012008b4 	movhi	r4,32802
80206cc0:	212cc784 	addi	r4,r4,-19682
80206cc4:	d9002b15 	stw	r4,172(sp)
80206cc8:	003c5e06 	br	80205e44 <__reset+0xfa1e5e44>
80206ccc:	d9402c17 	ldw	r5,176(sp)
80206cd0:	d9801e04 	addi	r6,sp,120
80206cd4:	9809883a 	mov	r4,r19
80206cd8:	020eae00 	call	8020eae0 <__ssprint_r>
80206cdc:	103b011e 	bne	r2,zero,802058e4 <__reset+0xfa1e58e4>
80206ce0:	d8c02017 	ldw	r3,128(sp)
80206ce4:	da000404 	addi	r8,sp,16
80206ce8:	003d9306 	br	80206338 <__reset+0xfa1e6338>
80206cec:	d8801f17 	ldw	r2,124(sp)
80206cf0:	016008b4 	movhi	r5,32802
80206cf4:	01000044 	movi	r4,1
80206cf8:	18c00044 	addi	r3,r3,1
80206cfc:	10800044 	addi	r2,r2,1
80206d00:	296cc704 	addi	r5,r5,-19684
80206d04:	41000115 	stw	r4,4(r8)
80206d08:	41400015 	stw	r5,0(r8)
80206d0c:	d8c02015 	stw	r3,128(sp)
80206d10:	d8801f15 	stw	r2,124(sp)
80206d14:	010001c4 	movi	r4,7
80206d18:	2080b516 	blt	r4,r2,80206ff0 <___svfprintf_internal_r+0x1aa0>
80206d1c:	42000204 	addi	r8,r8,8
80206d20:	8800041e 	bne	r17,zero,80206d34 <___svfprintf_internal_r+0x17e4>
80206d24:	d8803317 	ldw	r2,204(sp)
80206d28:	1000021e 	bne	r2,zero,80206d34 <___svfprintf_internal_r+0x17e4>
80206d2c:	9080004c 	andi	r2,r18,1
80206d30:	103c5b26 	beq	r2,zero,80205ea0 <__reset+0xfa1e5ea0>
80206d34:	d9003817 	ldw	r4,224(sp)
80206d38:	d8801f17 	ldw	r2,124(sp)
80206d3c:	d9403417 	ldw	r5,208(sp)
80206d40:	20c7883a 	add	r3,r4,r3
80206d44:	10800044 	addi	r2,r2,1
80206d48:	41000115 	stw	r4,4(r8)
80206d4c:	41400015 	stw	r5,0(r8)
80206d50:	d8c02015 	stw	r3,128(sp)
80206d54:	d8801f15 	stw	r2,124(sp)
80206d58:	010001c4 	movi	r4,7
80206d5c:	20818016 	blt	r4,r2,80207360 <___svfprintf_internal_r+0x1e10>
80206d60:	42000204 	addi	r8,r8,8
80206d64:	0463c83a 	sub	r17,zero,r17
80206d68:	0440cb0e 	bge	zero,r17,80207098 <___svfprintf_internal_r+0x1b48>
80206d6c:	05800404 	movi	r22,16
80206d70:	b440e80e 	bge	r22,r17,80207114 <___svfprintf_internal_r+0x1bc4>
80206d74:	016008b4 	movhi	r5,32802
80206d78:	296cc784 	addi	r5,r5,-19682
80206d7c:	d9402b15 	stw	r5,172(sp)
80206d80:	070001c4 	movi	fp,7
80206d84:	dd002c17 	ldw	r20,176(sp)
80206d88:	00000306 	br	80206d98 <___svfprintf_internal_r+0x1848>
80206d8c:	42000204 	addi	r8,r8,8
80206d90:	8c7ffc04 	addi	r17,r17,-16
80206d94:	b440e20e 	bge	r22,r17,80207120 <___svfprintf_internal_r+0x1bd0>
80206d98:	18c00404 	addi	r3,r3,16
80206d9c:	10800044 	addi	r2,r2,1
80206da0:	45400015 	stw	r21,0(r8)
80206da4:	45800115 	stw	r22,4(r8)
80206da8:	d8c02015 	stw	r3,128(sp)
80206dac:	d8801f15 	stw	r2,124(sp)
80206db0:	e0bff60e 	bge	fp,r2,80206d8c <__reset+0xfa1e6d8c>
80206db4:	d9801e04 	addi	r6,sp,120
80206db8:	a00b883a 	mov	r5,r20
80206dbc:	9809883a 	mov	r4,r19
80206dc0:	020eae00 	call	8020eae0 <__ssprint_r>
80206dc4:	103ac71e 	bne	r2,zero,802058e4 <__reset+0xfa1e58e4>
80206dc8:	d8c02017 	ldw	r3,128(sp)
80206dcc:	d8801f17 	ldw	r2,124(sp)
80206dd0:	da000404 	addi	r8,sp,16
80206dd4:	003fee06 	br	80206d90 <__reset+0xfa1e6d90>
80206dd8:	d8c02d17 	ldw	r3,180(sp)
80206ddc:	d9002917 	ldw	r4,164(sp)
80206de0:	002d883a 	mov	r22,zero
80206de4:	18800104 	addi	r2,r3,4
80206de8:	1d000017 	ldw	r20,0(r3)
80206dec:	203e7d0e 	bge	r4,zero,802067e4 <__reset+0xfa1e67e4>
80206df0:	003eda06 	br	8020695c <__reset+0xfa1e695c>
80206df4:	d9402d17 	ldw	r5,180(sp)
80206df8:	d8c02917 	ldw	r3,164(sp)
80206dfc:	002d883a 	mov	r22,zero
80206e00:	28800104 	addi	r2,r5,4
80206e04:	2d000017 	ldw	r20,0(r5)
80206e08:	183e2d0e 	bge	r3,zero,802066c0 <__reset+0xfa1e66c0>
80206e0c:	003f6b06 	br	80206bbc <__reset+0xfa1e6bbc>
80206e10:	d8c02d15 	stw	r3,180(sp)
80206e14:	0039883a 	mov	fp,zero
80206e18:	003ed206 	br	80206964 <__reset+0xfa1e6964>
80206e1c:	bc400043 	ldbu	r17,1(r23)
80206e20:	94800814 	ori	r18,r18,32
80206e24:	bdc00044 	addi	r23,r23,1
80206e28:	8c403fcc 	andi	r17,r17,255
80206e2c:	8c40201c 	xori	r17,r17,128
80206e30:	8c7fe004 	addi	r17,r17,-128
80206e34:	003a1a06 	br	802056a0 <__reset+0xfa1e56a0>
80206e38:	d9402c17 	ldw	r5,176(sp)
80206e3c:	d9801e04 	addi	r6,sp,120
80206e40:	9809883a 	mov	r4,r19
80206e44:	020eae00 	call	8020eae0 <__ssprint_r>
80206e48:	103aa61e 	bne	r2,zero,802058e4 <__reset+0xfa1e58e4>
80206e4c:	d8c02017 	ldw	r3,128(sp)
80206e50:	da000404 	addi	r8,sp,16
80206e54:	003d4a06 	br	80206380 <__reset+0xfa1e6380>
80206e58:	d9002917 	ldw	r4,164(sp)
80206e5c:	05bff7c4 	movi	r22,-33
80206e60:	00bfffc4 	movi	r2,-1
80206e64:	8dac703a 	and	r22,r17,r22
80206e68:	20806a26 	beq	r4,r2,80207014 <___svfprintf_internal_r+0x1ac4>
80206e6c:	008011c4 	movi	r2,71
80206e70:	b0813726 	beq	r22,r2,80207350 <___svfprintf_internal_r+0x1e00>
80206e74:	d9003717 	ldw	r4,220(sp)
80206e78:	90c04014 	ori	r3,r18,256
80206e7c:	d8c02b15 	stw	r3,172(sp)
80206e80:	20015d16 	blt	r4,zero,802073f8 <___svfprintf_internal_r+0x1ea8>
80206e84:	dd003717 	ldw	r20,220(sp)
80206e88:	d8002a05 	stb	zero,168(sp)
80206e8c:	00801984 	movi	r2,102
80206e90:	88814026 	beq	r17,r2,80207394 <___svfprintf_internal_r+0x1e44>
80206e94:	00801184 	movi	r2,70
80206e98:	88817126 	beq	r17,r2,80207460 <___svfprintf_internal_r+0x1f10>
80206e9c:	00801144 	movi	r2,69
80206ea0:	b0816226 	beq	r22,r2,8020742c <___svfprintf_internal_r+0x1edc>
80206ea4:	d8c02917 	ldw	r3,164(sp)
80206ea8:	d8802104 	addi	r2,sp,132
80206eac:	d8800315 	stw	r2,12(sp)
80206eb0:	d9403617 	ldw	r5,216(sp)
80206eb4:	d8802504 	addi	r2,sp,148
80206eb8:	d8800215 	stw	r2,8(sp)
80206ebc:	d8802604 	addi	r2,sp,152
80206ec0:	d8c00015 	stw	r3,0(sp)
80206ec4:	d8800115 	stw	r2,4(sp)
80206ec8:	01c00084 	movi	r7,2
80206ecc:	a00d883a 	mov	r6,r20
80206ed0:	9809883a 	mov	r4,r19
80206ed4:	d8c03d15 	stw	r3,244(sp)
80206ed8:	da003e15 	stw	r8,248(sp)
80206edc:	0209d4c0 	call	80209d4c <_dtoa_r>
80206ee0:	1021883a 	mov	r16,r2
80206ee4:	008019c4 	movi	r2,103
80206ee8:	d8c03d17 	ldw	r3,244(sp)
80206eec:	da003e17 	ldw	r8,248(sp)
80206ef0:	8880e726 	beq	r17,r2,80207290 <___svfprintf_internal_r+0x1d40>
80206ef4:	008011c4 	movi	r2,71
80206ef8:	8880d426 	beq	r17,r2,8020724c <___svfprintf_internal_r+0x1cfc>
80206efc:	80f9883a 	add	fp,r16,r3
80206f00:	d9003617 	ldw	r4,216(sp)
80206f04:	000d883a 	mov	r6,zero
80206f08:	000f883a 	mov	r7,zero
80206f0c:	a00b883a 	mov	r5,r20
80206f10:	da003e15 	stw	r8,248(sp)
80206f14:	0213c600 	call	80213c60 <__eqdf2>
80206f18:	da003e17 	ldw	r8,248(sp)
80206f1c:	1000e426 	beq	r2,zero,802072b0 <___svfprintf_internal_r+0x1d60>
80206f20:	d8802117 	ldw	r2,132(sp)
80206f24:	1700062e 	bgeu	r2,fp,80206f40 <___svfprintf_internal_r+0x19f0>
80206f28:	01000c04 	movi	r4,48
80206f2c:	10c00044 	addi	r3,r2,1
80206f30:	d8c02115 	stw	r3,132(sp)
80206f34:	11000005 	stb	r4,0(r2)
80206f38:	d8802117 	ldw	r2,132(sp)
80206f3c:	173ffb36 	bltu	r2,fp,80206f2c <__reset+0xfa1e6f2c>
80206f40:	1405c83a 	sub	r2,r2,r16
80206f44:	d8803315 	stw	r2,204(sp)
80206f48:	008011c4 	movi	r2,71
80206f4c:	b080c526 	beq	r22,r2,80207264 <___svfprintf_internal_r+0x1d14>
80206f50:	00801944 	movi	r2,101
80206f54:	1441d90e 	bge	r2,r17,802076bc <___svfprintf_internal_r+0x216c>
80206f58:	d8c02617 	ldw	r3,152(sp)
80206f5c:	00801984 	movi	r2,102
80206f60:	d8c03215 	stw	r3,200(sp)
80206f64:	88813426 	beq	r17,r2,80207438 <___svfprintf_internal_r+0x1ee8>
80206f68:	d8c03217 	ldw	r3,200(sp)
80206f6c:	d9003317 	ldw	r4,204(sp)
80206f70:	19012516 	blt	r3,r4,80207408 <___svfprintf_internal_r+0x1eb8>
80206f74:	9480004c 	andi	r18,r18,1
80206f78:	9001841e 	bne	r18,zero,8020758c <___svfprintf_internal_r+0x203c>
80206f7c:	1805883a 	mov	r2,r3
80206f80:	1801cc16 	blt	r3,zero,802076b4 <___svfprintf_internal_r+0x2164>
80206f84:	d8c03217 	ldw	r3,200(sp)
80206f88:	044019c4 	movi	r17,103
80206f8c:	d8c02e15 	stw	r3,184(sp)
80206f90:	df002a07 	ldb	fp,168(sp)
80206f94:	e000a61e 	bne	fp,zero,80207230 <___svfprintf_internal_r+0x1ce0>
80206f98:	df002783 	ldbu	fp,158(sp)
80206f9c:	d8802a15 	stw	r2,168(sp)
80206fa0:	dc802b17 	ldw	r18,172(sp)
80206fa4:	d8002915 	stw	zero,164(sp)
80206fa8:	003b1706 	br	80205c08 <__reset+0xfa1e5c08>
80206fac:	042008b4 	movhi	r16,32802
80206fb0:	842cb704 	addi	r16,r16,-19748
80206fb4:	003aa606 	br	80205a50 <__reset+0xfa1e5a50>
80206fb8:	d9003917 	ldw	r4,228(sp)
80206fbc:	04001004 	movi	r16,64
80206fc0:	800b883a 	mov	r5,r16
80206fc4:	020c72c0 	call	8020c72c <_malloc_r>
80206fc8:	d9002c17 	ldw	r4,176(sp)
80206fcc:	20800015 	stw	r2,0(r4)
80206fd0:	20800415 	stw	r2,16(r4)
80206fd4:	1001cb26 	beq	r2,zero,80207704 <___svfprintf_internal_r+0x21b4>
80206fd8:	d8802c17 	ldw	r2,176(sp)
80206fdc:	14000515 	stw	r16,20(r2)
80206fe0:	00397606 	br	802055bc <__reset+0xfa1e55bc>
80206fe4:	042008b4 	movhi	r16,32802
80206fe8:	842cb904 	addi	r16,r16,-19740
80206fec:	003ee106 	br	80206b74 <__reset+0xfa1e6b74>
80206ff0:	d9402c17 	ldw	r5,176(sp)
80206ff4:	d9801e04 	addi	r6,sp,120
80206ff8:	9809883a 	mov	r4,r19
80206ffc:	020eae00 	call	8020eae0 <__ssprint_r>
80207000:	103a381e 	bne	r2,zero,802058e4 <__reset+0xfa1e58e4>
80207004:	dc402617 	ldw	r17,152(sp)
80207008:	d8c02017 	ldw	r3,128(sp)
8020700c:	da000404 	addi	r8,sp,16
80207010:	003f4306 	br	80206d20 <__reset+0xfa1e6d20>
80207014:	01400184 	movi	r5,6
80207018:	d9402915 	stw	r5,164(sp)
8020701c:	003f9506 	br	80206e74 <__reset+0xfa1e6e74>
80207020:	d9002d17 	ldw	r4,180(sp)
80207024:	25000017 	ldw	r20,0(r4)
80207028:	21000104 	addi	r4,r4,4
8020702c:	d9002d15 	stw	r4,180(sp)
80207030:	a02dd7fa 	srai	r22,r20,31
80207034:	b005883a 	mov	r2,r22
80207038:	003a9b06 	br	80205aa8 <__reset+0xfa1e5aa8>
8020703c:	d9402d17 	ldw	r5,180(sp)
80207040:	002d883a 	mov	r22,zero
80207044:	2d000017 	ldw	r20,0(r5)
80207048:	29400104 	addi	r5,r5,4
8020704c:	d9402d15 	stw	r5,180(sp)
80207050:	003bf906 	br	80206038 <__reset+0xfa1e6038>
80207054:	9480100c 	andi	r18,r18,64
80207058:	90006e26 	beq	r18,zero,80207214 <___svfprintf_internal_r+0x1cc4>
8020705c:	d9002d17 	ldw	r4,180(sp)
80207060:	d9402f17 	ldw	r5,188(sp)
80207064:	20800017 	ldw	r2,0(r4)
80207068:	21000104 	addi	r4,r4,4
8020706c:	d9002d15 	stw	r4,180(sp)
80207070:	1140000d 	sth	r5,0(r2)
80207074:	00396106 	br	802055fc <__reset+0xfa1e55fc>
80207078:	d9402c17 	ldw	r5,176(sp)
8020707c:	d9801e04 	addi	r6,sp,120
80207080:	9809883a 	mov	r4,r19
80207084:	020eae00 	call	8020eae0 <__ssprint_r>
80207088:	103a161e 	bne	r2,zero,802058e4 <__reset+0xfa1e58e4>
8020708c:	d8c02017 	ldw	r3,128(sp)
80207090:	d8801f17 	ldw	r2,124(sp)
80207094:	da000404 	addi	r8,sp,16
80207098:	d9403317 	ldw	r5,204(sp)
8020709c:	10800044 	addi	r2,r2,1
802070a0:	44000015 	stw	r16,0(r8)
802070a4:	28c7883a 	add	r3,r5,r3
802070a8:	003b7706 	br	80205e88 <__reset+0xfa1e5e88>
802070ac:	8009883a 	mov	r4,r16
802070b0:	da003e15 	stw	r8,248(sp)
802070b4:	02054b80 	call	802054b8 <strlen>
802070b8:	d8802e15 	stw	r2,184(sp)
802070bc:	da003e17 	ldw	r8,248(sp)
802070c0:	103c280e 	bge	r2,zero,80206164 <__reset+0xfa1e6164>
802070c4:	0005883a 	mov	r2,zero
802070c8:	003c2606 	br	80206164 <__reset+0xfa1e6164>
802070cc:	00bfffc4 	movi	r2,-1
802070d0:	003a0906 	br	802058f8 <__reset+0xfa1e58f8>
802070d4:	012008b4 	movhi	r4,32802
802070d8:	212ccb84 	addi	r4,r4,-19666
802070dc:	d9003515 	stw	r4,212(sp)
802070e0:	003b0606 	br	80205cfc <__reset+0xfa1e5cfc>
802070e4:	013fffc4 	movi	r4,-1
802070e8:	003a2706 	br	80205988 <__reset+0xfa1e5988>
802070ec:	d9402c17 	ldw	r5,176(sp)
802070f0:	d9801e04 	addi	r6,sp,120
802070f4:	9809883a 	mov	r4,r19
802070f8:	020eae00 	call	8020eae0 <__ssprint_r>
802070fc:	1039f91e 	bne	r2,zero,802058e4 <__reset+0xfa1e58e4>
80207100:	d8c02017 	ldw	r3,128(sp)
80207104:	da000404 	addi	r8,sp,16
80207108:	003d8406 	br	8020671c <__reset+0xfa1e671c>
8020710c:	0023883a 	mov	r17,zero
80207110:	003d8306 	br	80206720 <__reset+0xfa1e6720>
80207114:	012008b4 	movhi	r4,32802
80207118:	212cc784 	addi	r4,r4,-19682
8020711c:	d9002b15 	stw	r4,172(sp)
80207120:	d9002b17 	ldw	r4,172(sp)
80207124:	1c47883a 	add	r3,r3,r17
80207128:	10800044 	addi	r2,r2,1
8020712c:	41000015 	stw	r4,0(r8)
80207130:	44400115 	stw	r17,4(r8)
80207134:	d8c02015 	stw	r3,128(sp)
80207138:	d8801f15 	stw	r2,124(sp)
8020713c:	010001c4 	movi	r4,7
80207140:	20bfcd16 	blt	r4,r2,80207078 <__reset+0xfa1e7078>
80207144:	42000204 	addi	r8,r8,8
80207148:	003fd306 	br	80207098 <__reset+0xfa1e7098>
8020714c:	d9402c17 	ldw	r5,176(sp)
80207150:	d9801e04 	addi	r6,sp,120
80207154:	9809883a 	mov	r4,r19
80207158:	020eae00 	call	8020eae0 <__ssprint_r>
8020715c:	1039e11e 	bne	r2,zero,802058e4 <__reset+0xfa1e58e4>
80207160:	d8802617 	ldw	r2,152(sp)
80207164:	d8c02017 	ldw	r3,128(sp)
80207168:	da000404 	addi	r8,sp,16
8020716c:	003e1c06 	br	802069e0 <__reset+0xfa1e69e0>
80207170:	d8802917 	ldw	r2,164(sp)
80207174:	00c00184 	movi	r3,6
80207178:	1880012e 	bgeu	r3,r2,80207180 <___svfprintf_internal_r+0x1c30>
8020717c:	1805883a 	mov	r2,r3
80207180:	d8802e15 	stw	r2,184(sp)
80207184:	1000f316 	blt	r2,zero,80207554 <___svfprintf_internal_r+0x2004>
80207188:	042008b4 	movhi	r16,32802
8020718c:	d8802a15 	stw	r2,168(sp)
80207190:	dd002d15 	stw	r20,180(sp)
80207194:	d8002915 	stw	zero,164(sp)
80207198:	d8003215 	stw	zero,200(sp)
8020719c:	842cc504 	addi	r16,r16,-19692
802071a0:	0039883a 	mov	fp,zero
802071a4:	003a9f06 	br	80205c24 <__reset+0xfa1e5c24>
802071a8:	012008b4 	movhi	r4,32802
802071ac:	212ccb84 	addi	r4,r4,-19666
802071b0:	d9003515 	stw	r4,212(sp)
802071b4:	003b5f06 	br	80205f34 <__reset+0xfa1e5f34>
802071b8:	d9402c17 	ldw	r5,176(sp)
802071bc:	d9801e04 	addi	r6,sp,120
802071c0:	9809883a 	mov	r4,r19
802071c4:	020eae00 	call	8020eae0 <__ssprint_r>
802071c8:	1039c61e 	bne	r2,zero,802058e4 <__reset+0xfa1e58e4>
802071cc:	d8802617 	ldw	r2,152(sp)
802071d0:	d9403317 	ldw	r5,204(sp)
802071d4:	d8c02017 	ldw	r3,128(sp)
802071d8:	da000404 	addi	r8,sp,16
802071dc:	2885c83a 	sub	r2,r5,r2
802071e0:	003e1006 	br	80206a24 <__reset+0xfa1e6a24>
802071e4:	00800044 	movi	r2,1
802071e8:	10803fcc 	andi	r2,r2,255
802071ec:	00c00044 	movi	r3,1
802071f0:	10fa3526 	beq	r2,r3,80205ac8 <__reset+0xfa1e5ac8>
802071f4:	00c00084 	movi	r3,2
802071f8:	10fb9e26 	beq	r2,r3,80206074 <__reset+0xfa1e6074>
802071fc:	003a6406 	br	80205b90 <__reset+0xfa1e5b90>
80207200:	0021883a 	mov	r16,zero
80207204:	003e0806 	br	80206a28 <__reset+0xfa1e6a28>
80207208:	07000b44 	movi	fp,45
8020720c:	df002785 	stb	fp,158(sp)
80207210:	003a0b06 	br	80205a40 <__reset+0xfa1e5a40>
80207214:	d8c02d17 	ldw	r3,180(sp)
80207218:	d9002f17 	ldw	r4,188(sp)
8020721c:	18800017 	ldw	r2,0(r3)
80207220:	18c00104 	addi	r3,r3,4
80207224:	d8c02d15 	stw	r3,180(sp)
80207228:	11000015 	stw	r4,0(r2)
8020722c:	0038f306 	br	802055fc <__reset+0xfa1e55fc>
80207230:	00c00b44 	movi	r3,45
80207234:	d8c02785 	stb	r3,158(sp)
80207238:	d8802a15 	stw	r2,168(sp)
8020723c:	dc802b17 	ldw	r18,172(sp)
80207240:	d8002915 	stw	zero,164(sp)
80207244:	07000b44 	movi	fp,45
80207248:	003a7306 	br	80205c18 <__reset+0xfa1e5c18>
8020724c:	9080004c 	andi	r2,r18,1
80207250:	1000941e 	bne	r2,zero,802074a4 <___svfprintf_internal_r+0x1f54>
80207254:	d8802117 	ldw	r2,132(sp)
80207258:	1405c83a 	sub	r2,r2,r16
8020725c:	d8803315 	stw	r2,204(sp)
80207260:	b441161e 	bne	r22,r17,802076bc <___svfprintf_internal_r+0x216c>
80207264:	dd802617 	ldw	r22,152(sp)
80207268:	00bfff44 	movi	r2,-3
8020726c:	b0801a16 	blt	r22,r2,802072d8 <___svfprintf_internal_r+0x1d88>
80207270:	d9402917 	ldw	r5,164(sp)
80207274:	2d801816 	blt	r5,r22,802072d8 <___svfprintf_internal_r+0x1d88>
80207278:	dd803215 	stw	r22,200(sp)
8020727c:	003f3a06 	br	80206f68 <__reset+0xfa1e6f68>
80207280:	1025883a 	mov	r18,r2
80207284:	0039883a 	mov	fp,zero
80207288:	00800084 	movi	r2,2
8020728c:	003fd606 	br	802071e8 <__reset+0xfa1e71e8>
80207290:	9080004c 	andi	r2,r18,1
80207294:	103f191e 	bne	r2,zero,80206efc <__reset+0xfa1e6efc>
80207298:	d8802117 	ldw	r2,132(sp)
8020729c:	003f2806 	br	80206f40 <__reset+0xfa1e6f40>
802072a0:	012008b4 	movhi	r4,32802
802072a4:	212cc784 	addi	r4,r4,-19682
802072a8:	d9002b15 	stw	r4,172(sp)
802072ac:	003c7c06 	br	802064a0 <__reset+0xfa1e64a0>
802072b0:	e005883a 	mov	r2,fp
802072b4:	003f2206 	br	80206f40 <__reset+0xfa1e6f40>
802072b8:	d9402917 	ldw	r5,164(sp)
802072bc:	df002783 	ldbu	fp,158(sp)
802072c0:	dd002d15 	stw	r20,180(sp)
802072c4:	d9402a15 	stw	r5,168(sp)
802072c8:	d9402e15 	stw	r5,184(sp)
802072cc:	d8002915 	stw	zero,164(sp)
802072d0:	d8003215 	stw	zero,200(sp)
802072d4:	003a4c06 	br	80205c08 <__reset+0xfa1e5c08>
802072d8:	8c7fff84 	addi	r17,r17,-2
802072dc:	b5bfffc4 	addi	r22,r22,-1
802072e0:	dd802615 	stw	r22,152(sp)
802072e4:	dc4022c5 	stb	r17,139(sp)
802072e8:	b000c316 	blt	r22,zero,802075f8 <___svfprintf_internal_r+0x20a8>
802072ec:	00800ac4 	movi	r2,43
802072f0:	d8802305 	stb	r2,140(sp)
802072f4:	00800244 	movi	r2,9
802072f8:	15806e16 	blt	r2,r22,802074b4 <___svfprintf_internal_r+0x1f64>
802072fc:	00800c04 	movi	r2,48
80207300:	b5800c04 	addi	r22,r22,48
80207304:	d8802345 	stb	r2,141(sp)
80207308:	dd802385 	stb	r22,142(sp)
8020730c:	d88023c4 	addi	r2,sp,143
80207310:	df0022c4 	addi	fp,sp,139
80207314:	d8c03317 	ldw	r3,204(sp)
80207318:	1739c83a 	sub	fp,r2,fp
8020731c:	d9003317 	ldw	r4,204(sp)
80207320:	e0c7883a 	add	r3,fp,r3
80207324:	df003b15 	stw	fp,236(sp)
80207328:	d8c02e15 	stw	r3,184(sp)
8020732c:	00800044 	movi	r2,1
80207330:	1100b70e 	bge	r2,r4,80207610 <___svfprintf_internal_r+0x20c0>
80207334:	d8c02e17 	ldw	r3,184(sp)
80207338:	18c00044 	addi	r3,r3,1
8020733c:	d8c02e15 	stw	r3,184(sp)
80207340:	1805883a 	mov	r2,r3
80207344:	1800b016 	blt	r3,zero,80207608 <___svfprintf_internal_r+0x20b8>
80207348:	d8003215 	stw	zero,200(sp)
8020734c:	003f1006 	br	80206f90 <__reset+0xfa1e6f90>
80207350:	d8802917 	ldw	r2,164(sp)
80207354:	103ec71e 	bne	r2,zero,80206e74 <__reset+0xfa1e6e74>
80207358:	dc002915 	stw	r16,164(sp)
8020735c:	003ec506 	br	80206e74 <__reset+0xfa1e6e74>
80207360:	d9402c17 	ldw	r5,176(sp)
80207364:	d9801e04 	addi	r6,sp,120
80207368:	9809883a 	mov	r4,r19
8020736c:	020eae00 	call	8020eae0 <__ssprint_r>
80207370:	10395c1e 	bne	r2,zero,802058e4 <__reset+0xfa1e58e4>
80207374:	dc402617 	ldw	r17,152(sp)
80207378:	d8c02017 	ldw	r3,128(sp)
8020737c:	d8801f17 	ldw	r2,124(sp)
80207380:	da000404 	addi	r8,sp,16
80207384:	003e7706 	br	80206d64 <__reset+0xfa1e6d64>
80207388:	582f883a 	mov	r23,r11
8020738c:	d8002915 	stw	zero,164(sp)
80207390:	0038c406 	br	802056a4 <__reset+0xfa1e56a4>
80207394:	d8c02917 	ldw	r3,164(sp)
80207398:	d8802104 	addi	r2,sp,132
8020739c:	d8800315 	stw	r2,12(sp)
802073a0:	d9403617 	ldw	r5,216(sp)
802073a4:	d8802504 	addi	r2,sp,148
802073a8:	d8800215 	stw	r2,8(sp)
802073ac:	d8802604 	addi	r2,sp,152
802073b0:	d8c00015 	stw	r3,0(sp)
802073b4:	9809883a 	mov	r4,r19
802073b8:	d8800115 	stw	r2,4(sp)
802073bc:	01c000c4 	movi	r7,3
802073c0:	a00d883a 	mov	r6,r20
802073c4:	da003e15 	stw	r8,248(sp)
802073c8:	0209d4c0 	call	80209d4c <_dtoa_r>
802073cc:	d9002917 	ldw	r4,164(sp)
802073d0:	da003e17 	ldw	r8,248(sp)
802073d4:	1021883a 	mov	r16,r2
802073d8:	1139883a 	add	fp,r2,r4
802073dc:	2007883a 	mov	r3,r4
802073e0:	81000007 	ldb	r4,0(r16)
802073e4:	00800c04 	movi	r2,48
802073e8:	20806f26 	beq	r4,r2,802075a8 <___svfprintf_internal_r+0x2058>
802073ec:	d8c02617 	ldw	r3,152(sp)
802073f0:	e0f9883a 	add	fp,fp,r3
802073f4:	003ec206 	br	80206f00 <__reset+0xfa1e6f00>
802073f8:	00c00b44 	movi	r3,45
802073fc:	2520003c 	xorhi	r20,r4,32768
80207400:	d8c02a05 	stb	r3,168(sp)
80207404:	003ea106 	br	80206e8c <__reset+0xfa1e6e8c>
80207408:	d8c03217 	ldw	r3,200(sp)
8020740c:	00c0890e 	bge	zero,r3,80207634 <___svfprintf_internal_r+0x20e4>
80207410:	00800044 	movi	r2,1
80207414:	d9003317 	ldw	r4,204(sp)
80207418:	1105883a 	add	r2,r2,r4
8020741c:	d8802e15 	stw	r2,184(sp)
80207420:	10005f16 	blt	r2,zero,802075a0 <___svfprintf_internal_r+0x2050>
80207424:	044019c4 	movi	r17,103
80207428:	003ed906 	br	80206f90 <__reset+0xfa1e6f90>
8020742c:	d9002917 	ldw	r4,164(sp)
80207430:	20c00044 	addi	r3,r4,1
80207434:	003e9c06 	br	80206ea8 <__reset+0xfa1e6ea8>
80207438:	d9002917 	ldw	r4,164(sp)
8020743c:	00c0680e 	bge	zero,r3,802075e0 <___svfprintf_internal_r+0x2090>
80207440:	2000461e 	bne	r4,zero,8020755c <___svfprintf_internal_r+0x200c>
80207444:	9480004c 	andi	r18,r18,1
80207448:	9000441e 	bne	r18,zero,8020755c <___svfprintf_internal_r+0x200c>
8020744c:	1805883a 	mov	r2,r3
80207450:	1800a016 	blt	r3,zero,802076d4 <___svfprintf_internal_r+0x2184>
80207454:	d8c03217 	ldw	r3,200(sp)
80207458:	d8c02e15 	stw	r3,184(sp)
8020745c:	003ecc06 	br	80206f90 <__reset+0xfa1e6f90>
80207460:	d9402917 	ldw	r5,164(sp)
80207464:	d8802104 	addi	r2,sp,132
80207468:	d8800315 	stw	r2,12(sp)
8020746c:	d9400015 	stw	r5,0(sp)
80207470:	d8802504 	addi	r2,sp,148
80207474:	d9403617 	ldw	r5,216(sp)
80207478:	d8800215 	stw	r2,8(sp)
8020747c:	d8802604 	addi	r2,sp,152
80207480:	d8800115 	stw	r2,4(sp)
80207484:	01c000c4 	movi	r7,3
80207488:	a00d883a 	mov	r6,r20
8020748c:	9809883a 	mov	r4,r19
80207490:	da003e15 	stw	r8,248(sp)
80207494:	0209d4c0 	call	80209d4c <_dtoa_r>
80207498:	d8c02917 	ldw	r3,164(sp)
8020749c:	da003e17 	ldw	r8,248(sp)
802074a0:	1021883a 	mov	r16,r2
802074a4:	00801184 	movi	r2,70
802074a8:	80f9883a 	add	fp,r16,r3
802074ac:	88bfcc26 	beq	r17,r2,802073e0 <__reset+0xfa1e73e0>
802074b0:	003e9306 	br	80206f00 <__reset+0xfa1e6f00>
802074b4:	df0022c4 	addi	fp,sp,139
802074b8:	dc002915 	stw	r16,164(sp)
802074bc:	9829883a 	mov	r20,r19
802074c0:	e021883a 	mov	r16,fp
802074c4:	4027883a 	mov	r19,r8
802074c8:	b009883a 	mov	r4,r22
802074cc:	01400284 	movi	r5,10
802074d0:	021299c0 	call	8021299c <__modsi3>
802074d4:	10800c04 	addi	r2,r2,48
802074d8:	843fffc4 	addi	r16,r16,-1
802074dc:	b009883a 	mov	r4,r22
802074e0:	01400284 	movi	r5,10
802074e4:	80800005 	stb	r2,0(r16)
802074e8:	02129180 	call	80212918 <__divsi3>
802074ec:	102d883a 	mov	r22,r2
802074f0:	00800244 	movi	r2,9
802074f4:	15bff416 	blt	r2,r22,802074c8 <__reset+0xfa1e74c8>
802074f8:	9811883a 	mov	r8,r19
802074fc:	b0800c04 	addi	r2,r22,48
80207500:	a027883a 	mov	r19,r20
80207504:	8029883a 	mov	r20,r16
80207508:	a17fffc4 	addi	r5,r20,-1
8020750c:	a0bfffc5 	stb	r2,-1(r20)
80207510:	dc002917 	ldw	r16,164(sp)
80207514:	2f00752e 	bgeu	r5,fp,802076ec <___svfprintf_internal_r+0x219c>
80207518:	d9c02384 	addi	r7,sp,142
8020751c:	3d0fc83a 	sub	r7,r7,r20
80207520:	d9002344 	addi	r4,sp,141
80207524:	e1cf883a 	add	r7,fp,r7
80207528:	00000106 	br	80207530 <___svfprintf_internal_r+0x1fe0>
8020752c:	28800003 	ldbu	r2,0(r5)
80207530:	20800005 	stb	r2,0(r4)
80207534:	21000044 	addi	r4,r4,1
80207538:	29400044 	addi	r5,r5,1
8020753c:	21fffb1e 	bne	r4,r7,8020752c <__reset+0xfa1e752c>
80207540:	d8802304 	addi	r2,sp,140
80207544:	1505c83a 	sub	r2,r2,r20
80207548:	d8c02344 	addi	r3,sp,141
8020754c:	1885883a 	add	r2,r3,r2
80207550:	003f7006 	br	80207314 <__reset+0xfa1e7314>
80207554:	0005883a 	mov	r2,zero
80207558:	003f0b06 	br	80207188 <__reset+0xfa1e7188>
8020755c:	d9002917 	ldw	r4,164(sp)
80207560:	d8c03217 	ldw	r3,200(sp)
80207564:	20800044 	addi	r2,r4,1
80207568:	1885883a 	add	r2,r3,r2
8020756c:	d8802e15 	stw	r2,184(sp)
80207570:	103e870e 	bge	r2,zero,80206f90 <__reset+0xfa1e6f90>
80207574:	0005883a 	mov	r2,zero
80207578:	003e8506 	br	80206f90 <__reset+0xfa1e6f90>
8020757c:	012008b4 	movhi	r4,32802
80207580:	212cc784 	addi	r4,r4,-19682
80207584:	d9002b15 	stw	r4,172(sp)
80207588:	003cc506 	br	802068a0 <__reset+0xfa1e68a0>
8020758c:	d8c03217 	ldw	r3,200(sp)
80207590:	18c00044 	addi	r3,r3,1
80207594:	d8c02e15 	stw	r3,184(sp)
80207598:	1805883a 	mov	r2,r3
8020759c:	183fa10e 	bge	r3,zero,80207424 <__reset+0xfa1e7424>
802075a0:	0005883a 	mov	r2,zero
802075a4:	003f9f06 	br	80207424 <__reset+0xfa1e7424>
802075a8:	d9003617 	ldw	r4,216(sp)
802075ac:	000d883a 	mov	r6,zero
802075b0:	000f883a 	mov	r7,zero
802075b4:	a00b883a 	mov	r5,r20
802075b8:	d8c03d15 	stw	r3,244(sp)
802075bc:	da003e15 	stw	r8,248(sp)
802075c0:	0213c600 	call	80213c60 <__eqdf2>
802075c4:	d8c03d17 	ldw	r3,244(sp)
802075c8:	da003e17 	ldw	r8,248(sp)
802075cc:	103f8726 	beq	r2,zero,802073ec <__reset+0xfa1e73ec>
802075d0:	00800044 	movi	r2,1
802075d4:	10c7c83a 	sub	r3,r2,r3
802075d8:	d8c02615 	stw	r3,152(sp)
802075dc:	003f8406 	br	802073f0 <__reset+0xfa1e73f0>
802075e0:	20000e1e 	bne	r4,zero,8020761c <___svfprintf_internal_r+0x20cc>
802075e4:	9480004c 	andi	r18,r18,1
802075e8:	90000c1e 	bne	r18,zero,8020761c <___svfprintf_internal_r+0x20cc>
802075ec:	00800044 	movi	r2,1
802075f0:	d8802e15 	stw	r2,184(sp)
802075f4:	003e6606 	br	80206f90 <__reset+0xfa1e6f90>
802075f8:	00800b44 	movi	r2,45
802075fc:	05adc83a 	sub	r22,zero,r22
80207600:	d8802305 	stb	r2,140(sp)
80207604:	003f3b06 	br	802072f4 <__reset+0xfa1e72f4>
80207608:	0005883a 	mov	r2,zero
8020760c:	003f4e06 	br	80207348 <__reset+0xfa1e7348>
80207610:	90a4703a 	and	r18,r18,r2
80207614:	903f4a26 	beq	r18,zero,80207340 <__reset+0xfa1e7340>
80207618:	003f4606 	br	80207334 <__reset+0xfa1e7334>
8020761c:	d8c02917 	ldw	r3,164(sp)
80207620:	18c00084 	addi	r3,r3,2
80207624:	d8c02e15 	stw	r3,184(sp)
80207628:	1805883a 	mov	r2,r3
8020762c:	183e580e 	bge	r3,zero,80206f90 <__reset+0xfa1e6f90>
80207630:	003fd006 	br	80207574 <__reset+0xfa1e7574>
80207634:	00800084 	movi	r2,2
80207638:	10c5c83a 	sub	r2,r2,r3
8020763c:	003f7506 	br	80207414 <__reset+0xfa1e7414>
80207640:	d8802d17 	ldw	r2,180(sp)
80207644:	d9002d17 	ldw	r4,180(sp)
80207648:	bc400043 	ldbu	r17,1(r23)
8020764c:	10800017 	ldw	r2,0(r2)
80207650:	582f883a 	mov	r23,r11
80207654:	d8802915 	stw	r2,164(sp)
80207658:	20800104 	addi	r2,r4,4
8020765c:	d9002917 	ldw	r4,164(sp)
80207660:	d8802d15 	stw	r2,180(sp)
80207664:	203df00e 	bge	r4,zero,80206e28 <__reset+0xfa1e6e28>
80207668:	8c403fcc 	andi	r17,r17,255
8020766c:	00bfffc4 	movi	r2,-1
80207670:	8c40201c 	xori	r17,r17,128
80207674:	d8802915 	stw	r2,164(sp)
80207678:	8c7fe004 	addi	r17,r17,-128
8020767c:	00380806 	br	802056a0 <__reset+0xfa1e56a0>
80207680:	9080004c 	andi	r2,r18,1
80207684:	0039883a 	mov	fp,zero
80207688:	10000726 	beq	r2,zero,802076a8 <___svfprintf_internal_r+0x2158>
8020768c:	d8c02817 	ldw	r3,160(sp)
80207690:	dc001dc4 	addi	r16,sp,119
80207694:	00800c04 	movi	r2,48
80207698:	1c07c83a 	sub	r3,r3,r16
8020769c:	d8801dc5 	stb	r2,119(sp)
802076a0:	d8c02e15 	stw	r3,184(sp)
802076a4:	00395206 	br	80205bf0 <__reset+0xfa1e5bf0>
802076a8:	d8002e15 	stw	zero,184(sp)
802076ac:	dc001e04 	addi	r16,sp,120
802076b0:	00394f06 	br	80205bf0 <__reset+0xfa1e5bf0>
802076b4:	0005883a 	mov	r2,zero
802076b8:	003e3206 	br	80206f84 <__reset+0xfa1e6f84>
802076bc:	dd802617 	ldw	r22,152(sp)
802076c0:	003f0606 	br	802072dc <__reset+0xfa1e72dc>
802076c4:	d9c02785 	stb	r7,158(sp)
802076c8:	003a5106 	br	80206010 <__reset+0xfa1e6010>
802076cc:	d9c02785 	stb	r7,158(sp)
802076d0:	003a3706 	br	80205fb0 <__reset+0xfa1e5fb0>
802076d4:	0005883a 	mov	r2,zero
802076d8:	003f5e06 	br	80207454 <__reset+0xfa1e7454>
802076dc:	d9c02785 	stb	r7,158(sp)
802076e0:	00391706 	br	80205b40 <__reset+0xfa1e5b40>
802076e4:	d9c02785 	stb	r7,158(sp)
802076e8:	0038e606 	br	80205a84 <__reset+0xfa1e5a84>
802076ec:	d8802344 	addi	r2,sp,141
802076f0:	003f0806 	br	80207314 <__reset+0xfa1e7314>
802076f4:	d9c02785 	stb	r7,158(sp)
802076f8:	0038b706 	br	802059d8 <__reset+0xfa1e59d8>
802076fc:	d9c02785 	stb	r7,158(sp)
80207700:	003adc06 	br	80206274 <__reset+0xfa1e6274>
80207704:	d9403917 	ldw	r5,228(sp)
80207708:	00800304 	movi	r2,12
8020770c:	28800015 	stw	r2,0(r5)
80207710:	00bfffc4 	movi	r2,-1
80207714:	00387806 	br	802058f8 <__reset+0xfa1e58f8>
80207718:	d9c02785 	stb	r7,158(sp)
8020771c:	003abf06 	br	8020621c <__reset+0xfa1e621c>
80207720:	d9c02785 	stb	r7,158(sp)
80207724:	003a9b06 	br	80206194 <__reset+0xfa1e6194>

80207728 <___vfprintf_internal_r>:
80207728:	deffb804 	addi	sp,sp,-288
8020772c:	dfc04715 	stw	ra,284(sp)
80207730:	ddc04515 	stw	r23,276(sp)
80207734:	dd404315 	stw	r21,268(sp)
80207738:	d9002c15 	stw	r4,176(sp)
8020773c:	282f883a 	mov	r23,r5
80207740:	302b883a 	mov	r21,r6
80207744:	d9c02d15 	stw	r7,180(sp)
80207748:	df004615 	stw	fp,280(sp)
8020774c:	dd804415 	stw	r22,272(sp)
80207750:	dd004215 	stw	r20,264(sp)
80207754:	dcc04115 	stw	r19,260(sp)
80207758:	dc804015 	stw	r18,256(sp)
8020775c:	dc403f15 	stw	r17,252(sp)
80207760:	dc003e15 	stw	r16,248(sp)
80207764:	020c5400 	call	8020c540 <_localeconv_r>
80207768:	10800017 	ldw	r2,0(r2)
8020776c:	1009883a 	mov	r4,r2
80207770:	d8803415 	stw	r2,208(sp)
80207774:	02054b80 	call	802054b8 <strlen>
80207778:	d8803715 	stw	r2,220(sp)
8020777c:	d8802c17 	ldw	r2,176(sp)
80207780:	10000226 	beq	r2,zero,8020778c <___vfprintf_internal_r+0x64>
80207784:	10800e17 	ldw	r2,56(r2)
80207788:	1000f926 	beq	r2,zero,80207b70 <___vfprintf_internal_r+0x448>
8020778c:	b880030b 	ldhu	r2,12(r23)
80207790:	10c8000c 	andi	r3,r2,8192
80207794:	1800061e 	bne	r3,zero,802077b0 <___vfprintf_internal_r+0x88>
80207798:	b9001917 	ldw	r4,100(r23)
8020779c:	00f7ffc4 	movi	r3,-8193
802077a0:	10880014 	ori	r2,r2,8192
802077a4:	20c6703a 	and	r3,r4,r3
802077a8:	b880030d 	sth	r2,12(r23)
802077ac:	b8c01915 	stw	r3,100(r23)
802077b0:	10c0020c 	andi	r3,r2,8
802077b4:	1800c126 	beq	r3,zero,80207abc <___vfprintf_internal_r+0x394>
802077b8:	b8c00417 	ldw	r3,16(r23)
802077bc:	1800bf26 	beq	r3,zero,80207abc <___vfprintf_internal_r+0x394>
802077c0:	1080068c 	andi	r2,r2,26
802077c4:	00c00284 	movi	r3,10
802077c8:	10c0c426 	beq	r2,r3,80207adc <___vfprintf_internal_r+0x3b4>
802077cc:	d8c00404 	addi	r3,sp,16
802077d0:	052008b4 	movhi	r20,32802
802077d4:	d9001e04 	addi	r4,sp,120
802077d8:	a52ccf84 	addi	r20,r20,-19650
802077dc:	d8c01e15 	stw	r3,120(sp)
802077e0:	d8002015 	stw	zero,128(sp)
802077e4:	d8001f15 	stw	zero,124(sp)
802077e8:	d8003315 	stw	zero,204(sp)
802077ec:	d8003615 	stw	zero,216(sp)
802077f0:	d8003815 	stw	zero,224(sp)
802077f4:	1811883a 	mov	r8,r3
802077f8:	d8003915 	stw	zero,228(sp)
802077fc:	d8003a15 	stw	zero,232(sp)
80207800:	d8002f15 	stw	zero,188(sp)
80207804:	d9002815 	stw	r4,160(sp)
80207808:	a8800007 	ldb	r2,0(r21)
8020780c:	10027b26 	beq	r2,zero,802081fc <___vfprintf_internal_r+0xad4>
80207810:	00c00944 	movi	r3,37
80207814:	a821883a 	mov	r16,r21
80207818:	10c0021e 	bne	r2,r3,80207824 <___vfprintf_internal_r+0xfc>
8020781c:	00001406 	br	80207870 <___vfprintf_internal_r+0x148>
80207820:	10c00326 	beq	r2,r3,80207830 <___vfprintf_internal_r+0x108>
80207824:	84000044 	addi	r16,r16,1
80207828:	80800007 	ldb	r2,0(r16)
8020782c:	103ffc1e 	bne	r2,zero,80207820 <__reset+0xfa1e7820>
80207830:	8563c83a 	sub	r17,r16,r21
80207834:	88000e26 	beq	r17,zero,80207870 <___vfprintf_internal_r+0x148>
80207838:	d8c02017 	ldw	r3,128(sp)
8020783c:	d8801f17 	ldw	r2,124(sp)
80207840:	45400015 	stw	r21,0(r8)
80207844:	1c47883a 	add	r3,r3,r17
80207848:	10800044 	addi	r2,r2,1
8020784c:	d8c02015 	stw	r3,128(sp)
80207850:	44400115 	stw	r17,4(r8)
80207854:	d8801f15 	stw	r2,124(sp)
80207858:	00c001c4 	movi	r3,7
8020785c:	1880a716 	blt	r3,r2,80207afc <___vfprintf_internal_r+0x3d4>
80207860:	42000204 	addi	r8,r8,8
80207864:	d9402f17 	ldw	r5,188(sp)
80207868:	2c4b883a 	add	r5,r5,r17
8020786c:	d9402f15 	stw	r5,188(sp)
80207870:	80800007 	ldb	r2,0(r16)
80207874:	1000a826 	beq	r2,zero,80207b18 <___vfprintf_internal_r+0x3f0>
80207878:	84400047 	ldb	r17,1(r16)
8020787c:	00bfffc4 	movi	r2,-1
80207880:	85400044 	addi	r21,r16,1
80207884:	d8002785 	stb	zero,158(sp)
80207888:	0007883a 	mov	r3,zero
8020788c:	000f883a 	mov	r7,zero
80207890:	d8802915 	stw	r2,164(sp)
80207894:	d8003115 	stw	zero,196(sp)
80207898:	0025883a 	mov	r18,zero
8020789c:	01401604 	movi	r5,88
802078a0:	01800244 	movi	r6,9
802078a4:	02800a84 	movi	r10,42
802078a8:	02401b04 	movi	r9,108
802078ac:	ad400044 	addi	r21,r21,1
802078b0:	88bff804 	addi	r2,r17,-32
802078b4:	28830436 	bltu	r5,r2,802084c8 <___vfprintf_internal_r+0xda0>
802078b8:	100490ba 	slli	r2,r2,2
802078bc:	01200834 	movhi	r4,32800
802078c0:	211e3404 	addi	r4,r4,30928
802078c4:	1105883a 	add	r2,r2,r4
802078c8:	10800017 	ldw	r2,0(r2)
802078cc:	1000683a 	jmp	r2
802078d0:	802083e8 	cmpgeui	zero,r16,33295
802078d4:	802084c8 	cmpgei	zero,r16,-32237
802078d8:	802084c8 	cmpgei	zero,r16,-32237
802078dc:	80208408 	cmpgei	zero,r16,-32240
802078e0:	802084c8 	cmpgei	zero,r16,-32237
802078e4:	802084c8 	cmpgei	zero,r16,-32237
802078e8:	802084c8 	cmpgei	zero,r16,-32237
802078ec:	802084c8 	cmpgei	zero,r16,-32237
802078f0:	802084c8 	cmpgei	zero,r16,-32237
802078f4:	802084c8 	cmpgei	zero,r16,-32237
802078f8:	80207b7c 	xorhi	zero,r16,33261
802078fc:	80208324 	muli	zero,r16,-32244
80207900:	802084c8 	cmpgei	zero,r16,-32237
80207904:	80207a44 	addi	zero,r16,-32279
80207908:	80207ba4 	muli	zero,r16,-32274
8020790c:	802084c8 	cmpgei	zero,r16,-32237
80207910:	80207be4 	muli	zero,r16,-32273
80207914:	80207bf0 	cmpltui	zero,r16,33263
80207918:	80207bf0 	cmpltui	zero,r16,33263
8020791c:	80207bf0 	cmpltui	zero,r16,33263
80207920:	80207bf0 	cmpltui	zero,r16,33263
80207924:	80207bf0 	cmpltui	zero,r16,33263
80207928:	80207bf0 	cmpltui	zero,r16,33263
8020792c:	80207bf0 	cmpltui	zero,r16,33263
80207930:	80207bf0 	cmpltui	zero,r16,33263
80207934:	80207bf0 	cmpltui	zero,r16,33263
80207938:	802084c8 	cmpgei	zero,r16,-32237
8020793c:	802084c8 	cmpgei	zero,r16,-32237
80207940:	802084c8 	cmpgei	zero,r16,-32237
80207944:	802084c8 	cmpgei	zero,r16,-32237
80207948:	802084c8 	cmpgei	zero,r16,-32237
8020794c:	802084c8 	cmpgei	zero,r16,-32237
80207950:	802084c8 	cmpgei	zero,r16,-32237
80207954:	802084c8 	cmpgei	zero,r16,-32237
80207958:	802084c8 	cmpgei	zero,r16,-32237
8020795c:	802084c8 	cmpgei	zero,r16,-32237
80207960:	80207c24 	muli	zero,r16,-32272
80207964:	80207ce0 	cmpeqi	zero,r16,-32269
80207968:	802084c8 	cmpgei	zero,r16,-32237
8020796c:	80207ce0 	cmpeqi	zero,r16,-32269
80207970:	802084c8 	cmpgei	zero,r16,-32237
80207974:	802084c8 	cmpgei	zero,r16,-32237
80207978:	802084c8 	cmpgei	zero,r16,-32237
8020797c:	802084c8 	cmpgei	zero,r16,-32237
80207980:	80207d80 	call	880207d8 <__reset+0x20007d8>
80207984:	802084c8 	cmpgei	zero,r16,-32237
80207988:	802084c8 	cmpgei	zero,r16,-32237
8020798c:	80207d8c 	andi	zero,r16,33270
80207990:	802084c8 	cmpgei	zero,r16,-32237
80207994:	802084c8 	cmpgei	zero,r16,-32237
80207998:	802084c8 	cmpgei	zero,r16,-32237
8020799c:	802084c8 	cmpgei	zero,r16,-32237
802079a0:	802084c8 	cmpgei	zero,r16,-32237
802079a4:	80208204 	addi	zero,r16,-32248
802079a8:	802084c8 	cmpgei	zero,r16,-32237
802079ac:	802084c8 	cmpgei	zero,r16,-32237
802079b0:	80208264 	muli	zero,r16,-32247
802079b4:	802084c8 	cmpgei	zero,r16,-32237
802079b8:	802084c8 	cmpgei	zero,r16,-32237
802079bc:	802084c8 	cmpgei	zero,r16,-32237
802079c0:	802084c8 	cmpgei	zero,r16,-32237
802079c4:	802084c8 	cmpgei	zero,r16,-32237
802079c8:	802084c8 	cmpgei	zero,r16,-32237
802079cc:	802084c8 	cmpgei	zero,r16,-32237
802079d0:	802084c8 	cmpgei	zero,r16,-32237
802079d4:	802084c8 	cmpgei	zero,r16,-32237
802079d8:	802084c8 	cmpgei	zero,r16,-32237
802079dc:	80208474 	orhi	zero,r16,33297
802079e0:	80208414 	ori	zero,r16,33296
802079e4:	80207ce0 	cmpeqi	zero,r16,-32269
802079e8:	80207ce0 	cmpeqi	zero,r16,-32269
802079ec:	80207ce0 	cmpeqi	zero,r16,-32269
802079f0:	80208424 	muli	zero,r16,-32240
802079f4:	80208414 	ori	zero,r16,33296
802079f8:	802084c8 	cmpgei	zero,r16,-32237
802079fc:	802084c8 	cmpgei	zero,r16,-32237
80207a00:	80208430 	cmpltui	zero,r16,33296
80207a04:	802084c8 	cmpgei	zero,r16,-32237
80207a08:	80208440 	call	88020844 <__reset+0x2000844>
80207a0c:	80208314 	ori	zero,r16,33292
80207a10:	80207a50 	cmplti	zero,r16,-32279
80207a14:	80208334 	orhi	zero,r16,33292
80207a18:	802084c8 	cmpgei	zero,r16,-32237
80207a1c:	80208340 	call	88020834 <__reset+0x2000834>
80207a20:	802084c8 	cmpgei	zero,r16,-32237
80207a24:	8020839c 	xori	zero,r16,33294
80207a28:	802084c8 	cmpgei	zero,r16,-32237
80207a2c:	802084c8 	cmpgei	zero,r16,-32237
80207a30:	802083ac 	andhi	zero,r16,33294
80207a34:	d9003117 	ldw	r4,196(sp)
80207a38:	d8802d15 	stw	r2,180(sp)
80207a3c:	0109c83a 	sub	r4,zero,r4
80207a40:	d9003115 	stw	r4,196(sp)
80207a44:	94800114 	ori	r18,r18,4
80207a48:	ac400007 	ldb	r17,0(r21)
80207a4c:	003f9706 	br	802078ac <__reset+0xfa1e78ac>
80207a50:	00800c04 	movi	r2,48
80207a54:	d9002d17 	ldw	r4,180(sp)
80207a58:	d9402917 	ldw	r5,164(sp)
80207a5c:	d8802705 	stb	r2,156(sp)
80207a60:	00801e04 	movi	r2,120
80207a64:	d8802745 	stb	r2,157(sp)
80207a68:	d8002785 	stb	zero,158(sp)
80207a6c:	20c00104 	addi	r3,r4,4
80207a70:	24c00017 	ldw	r19,0(r4)
80207a74:	002d883a 	mov	r22,zero
80207a78:	90800094 	ori	r2,r18,2
80207a7c:	28029a16 	blt	r5,zero,802084e8 <___vfprintf_internal_r+0xdc0>
80207a80:	00bfdfc4 	movi	r2,-129
80207a84:	90a4703a 	and	r18,r18,r2
80207a88:	d8c02d15 	stw	r3,180(sp)
80207a8c:	94800094 	ori	r18,r18,2
80207a90:	9802871e 	bne	r19,zero,802084b0 <___vfprintf_internal_r+0xd88>
80207a94:	00a008b4 	movhi	r2,32802
80207a98:	10acc004 	addi	r2,r2,-19712
80207a9c:	d8803915 	stw	r2,228(sp)
80207aa0:	04401e04 	movi	r17,120
80207aa4:	d8802917 	ldw	r2,164(sp)
80207aa8:	0039883a 	mov	fp,zero
80207aac:	1001e926 	beq	r2,zero,80208254 <___vfprintf_internal_r+0xb2c>
80207ab0:	0027883a 	mov	r19,zero
80207ab4:	002d883a 	mov	r22,zero
80207ab8:	00020506 	br	802082d0 <___vfprintf_internal_r+0xba8>
80207abc:	d9002c17 	ldw	r4,176(sp)
80207ac0:	b80b883a 	mov	r5,r23
80207ac4:	02099f80 	call	802099f8 <__swsetup_r>
80207ac8:	1005ac1e 	bne	r2,zero,8020917c <___vfprintf_internal_r+0x1a54>
80207acc:	b880030b 	ldhu	r2,12(r23)
80207ad0:	00c00284 	movi	r3,10
80207ad4:	1080068c 	andi	r2,r2,26
80207ad8:	10ff3c1e 	bne	r2,r3,802077cc <__reset+0xfa1e77cc>
80207adc:	b880038f 	ldh	r2,14(r23)
80207ae0:	103f3a16 	blt	r2,zero,802077cc <__reset+0xfa1e77cc>
80207ae4:	d9c02d17 	ldw	r7,180(sp)
80207ae8:	d9002c17 	ldw	r4,176(sp)
80207aec:	a80d883a 	mov	r6,r21
80207af0:	b80b883a 	mov	r5,r23
80207af4:	020993c0 	call	8020993c <__sbprintf>
80207af8:	00001106 	br	80207b40 <___vfprintf_internal_r+0x418>
80207afc:	d9002c17 	ldw	r4,176(sp)
80207b00:	d9801e04 	addi	r6,sp,120
80207b04:	b80b883a 	mov	r5,r23
80207b08:	020ffe80 	call	8020ffe8 <__sprint_r>
80207b0c:	1000081e 	bne	r2,zero,80207b30 <___vfprintf_internal_r+0x408>
80207b10:	da000404 	addi	r8,sp,16
80207b14:	003f5306 	br	80207864 <__reset+0xfa1e7864>
80207b18:	d8802017 	ldw	r2,128(sp)
80207b1c:	10000426 	beq	r2,zero,80207b30 <___vfprintf_internal_r+0x408>
80207b20:	d9002c17 	ldw	r4,176(sp)
80207b24:	d9801e04 	addi	r6,sp,120
80207b28:	b80b883a 	mov	r5,r23
80207b2c:	020ffe80 	call	8020ffe8 <__sprint_r>
80207b30:	b880030b 	ldhu	r2,12(r23)
80207b34:	1080100c 	andi	r2,r2,64
80207b38:	1005901e 	bne	r2,zero,8020917c <___vfprintf_internal_r+0x1a54>
80207b3c:	d8802f17 	ldw	r2,188(sp)
80207b40:	dfc04717 	ldw	ra,284(sp)
80207b44:	df004617 	ldw	fp,280(sp)
80207b48:	ddc04517 	ldw	r23,276(sp)
80207b4c:	dd804417 	ldw	r22,272(sp)
80207b50:	dd404317 	ldw	r21,268(sp)
80207b54:	dd004217 	ldw	r20,264(sp)
80207b58:	dcc04117 	ldw	r19,260(sp)
80207b5c:	dc804017 	ldw	r18,256(sp)
80207b60:	dc403f17 	ldw	r17,252(sp)
80207b64:	dc003e17 	ldw	r16,248(sp)
80207b68:	dec04804 	addi	sp,sp,288
80207b6c:	f800283a 	ret
80207b70:	d9002c17 	ldw	r4,176(sp)
80207b74:	020b9cc0 	call	8020b9cc <__sinit>
80207b78:	003f0406 	br	8020778c <__reset+0xfa1e778c>
80207b7c:	d8802d17 	ldw	r2,180(sp)
80207b80:	d9002d17 	ldw	r4,180(sp)
80207b84:	10800017 	ldw	r2,0(r2)
80207b88:	d8803115 	stw	r2,196(sp)
80207b8c:	20800104 	addi	r2,r4,4
80207b90:	d9003117 	ldw	r4,196(sp)
80207b94:	203fa716 	blt	r4,zero,80207a34 <__reset+0xfa1e7a34>
80207b98:	d8802d15 	stw	r2,180(sp)
80207b9c:	ac400007 	ldb	r17,0(r21)
80207ba0:	003f4206 	br	802078ac <__reset+0xfa1e78ac>
80207ba4:	ac400007 	ldb	r17,0(r21)
80207ba8:	aac00044 	addi	r11,r21,1
80207bac:	8a872826 	beq	r17,r10,80209850 <___vfprintf_internal_r+0x2128>
80207bb0:	88bff404 	addi	r2,r17,-48
80207bb4:	0009883a 	mov	r4,zero
80207bb8:	30867d36 	bltu	r6,r2,802095b0 <___vfprintf_internal_r+0x1e88>
80207bbc:	5c400007 	ldb	r17,0(r11)
80207bc0:	210002a4 	muli	r4,r4,10
80207bc4:	5d400044 	addi	r21,r11,1
80207bc8:	a817883a 	mov	r11,r21
80207bcc:	2089883a 	add	r4,r4,r2
80207bd0:	88bff404 	addi	r2,r17,-48
80207bd4:	30bff92e 	bgeu	r6,r2,80207bbc <__reset+0xfa1e7bbc>
80207bd8:	2005c916 	blt	r4,zero,80209300 <___vfprintf_internal_r+0x1bd8>
80207bdc:	d9002915 	stw	r4,164(sp)
80207be0:	003f3306 	br	802078b0 <__reset+0xfa1e78b0>
80207be4:	94802014 	ori	r18,r18,128
80207be8:	ac400007 	ldb	r17,0(r21)
80207bec:	003f2f06 	br	802078ac <__reset+0xfa1e78ac>
80207bf0:	a809883a 	mov	r4,r21
80207bf4:	d8003115 	stw	zero,196(sp)
80207bf8:	88bff404 	addi	r2,r17,-48
80207bfc:	0017883a 	mov	r11,zero
80207c00:	24400007 	ldb	r17,0(r4)
80207c04:	5ac002a4 	muli	r11,r11,10
80207c08:	ad400044 	addi	r21,r21,1
80207c0c:	a809883a 	mov	r4,r21
80207c10:	12d7883a 	add	r11,r2,r11
80207c14:	88bff404 	addi	r2,r17,-48
80207c18:	30bff92e 	bgeu	r6,r2,80207c00 <__reset+0xfa1e7c00>
80207c1c:	dac03115 	stw	r11,196(sp)
80207c20:	003f2306 	br	802078b0 <__reset+0xfa1e78b0>
80207c24:	18c03fcc 	andi	r3,r3,255
80207c28:	18072b1e 	bne	r3,zero,802098d8 <___vfprintf_internal_r+0x21b0>
80207c2c:	94800414 	ori	r18,r18,16
80207c30:	9080080c 	andi	r2,r18,32
80207c34:	10037b26 	beq	r2,zero,80208a24 <___vfprintf_internal_r+0x12fc>
80207c38:	d9402d17 	ldw	r5,180(sp)
80207c3c:	28800117 	ldw	r2,4(r5)
80207c40:	2cc00017 	ldw	r19,0(r5)
80207c44:	29400204 	addi	r5,r5,8
80207c48:	d9402d15 	stw	r5,180(sp)
80207c4c:	102d883a 	mov	r22,r2
80207c50:	10044b16 	blt	r2,zero,80208d80 <___vfprintf_internal_r+0x1658>
80207c54:	d9402917 	ldw	r5,164(sp)
80207c58:	df002783 	ldbu	fp,158(sp)
80207c5c:	2803bc16 	blt	r5,zero,80208b50 <___vfprintf_internal_r+0x1428>
80207c60:	00ffdfc4 	movi	r3,-129
80207c64:	9d84b03a 	or	r2,r19,r22
80207c68:	90e4703a 	and	r18,r18,r3
80207c6c:	10017726 	beq	r2,zero,8020824c <___vfprintf_internal_r+0xb24>
80207c70:	b0038326 	beq	r22,zero,80208a80 <___vfprintf_internal_r+0x1358>
80207c74:	dc402a15 	stw	r17,168(sp)
80207c78:	dc001e04 	addi	r16,sp,120
80207c7c:	b023883a 	mov	r17,r22
80207c80:	402d883a 	mov	r22,r8
80207c84:	9809883a 	mov	r4,r19
80207c88:	880b883a 	mov	r5,r17
80207c8c:	01800284 	movi	r6,10
80207c90:	000f883a 	mov	r7,zero
80207c94:	02123e00 	call	802123e0 <__umoddi3>
80207c98:	10800c04 	addi	r2,r2,48
80207c9c:	843fffc4 	addi	r16,r16,-1
80207ca0:	9809883a 	mov	r4,r19
80207ca4:	880b883a 	mov	r5,r17
80207ca8:	80800005 	stb	r2,0(r16)
80207cac:	01800284 	movi	r6,10
80207cb0:	000f883a 	mov	r7,zero
80207cb4:	0211e680 	call	80211e68 <__udivdi3>
80207cb8:	1027883a 	mov	r19,r2
80207cbc:	10c4b03a 	or	r2,r2,r3
80207cc0:	1823883a 	mov	r17,r3
80207cc4:	103fef1e 	bne	r2,zero,80207c84 <__reset+0xfa1e7c84>
80207cc8:	d8c02817 	ldw	r3,160(sp)
80207ccc:	dc402a17 	ldw	r17,168(sp)
80207cd0:	b011883a 	mov	r8,r22
80207cd4:	1c07c83a 	sub	r3,r3,r16
80207cd8:	d8c02e15 	stw	r3,184(sp)
80207cdc:	00005906 	br	80207e44 <___vfprintf_internal_r+0x71c>
80207ce0:	18c03fcc 	andi	r3,r3,255
80207ce4:	1806fa1e 	bne	r3,zero,802098d0 <___vfprintf_internal_r+0x21a8>
80207ce8:	9080020c 	andi	r2,r18,8
80207cec:	10048a26 	beq	r2,zero,80208f18 <___vfprintf_internal_r+0x17f0>
80207cf0:	d8c02d17 	ldw	r3,180(sp)
80207cf4:	d9002d17 	ldw	r4,180(sp)
80207cf8:	d9402d17 	ldw	r5,180(sp)
80207cfc:	18c00017 	ldw	r3,0(r3)
80207d00:	21000117 	ldw	r4,4(r4)
80207d04:	29400204 	addi	r5,r5,8
80207d08:	d8c03615 	stw	r3,216(sp)
80207d0c:	d9003815 	stw	r4,224(sp)
80207d10:	d9402d15 	stw	r5,180(sp)
80207d14:	d9003617 	ldw	r4,216(sp)
80207d18:	d9403817 	ldw	r5,224(sp)
80207d1c:	da003d15 	stw	r8,244(sp)
80207d20:	04000044 	movi	r16,1
80207d24:	020e8000 	call	8020e800 <__fpclassifyd>
80207d28:	da003d17 	ldw	r8,244(sp)
80207d2c:	14041f1e 	bne	r2,r16,80208dac <___vfprintf_internal_r+0x1684>
80207d30:	d9003617 	ldw	r4,216(sp)
80207d34:	d9403817 	ldw	r5,224(sp)
80207d38:	000d883a 	mov	r6,zero
80207d3c:	000f883a 	mov	r7,zero
80207d40:	0213dc40 	call	80213dc4 <__ledf2>
80207d44:	da003d17 	ldw	r8,244(sp)
80207d48:	1005be16 	blt	r2,zero,80209444 <___vfprintf_internal_r+0x1d1c>
80207d4c:	df002783 	ldbu	fp,158(sp)
80207d50:	008011c4 	movi	r2,71
80207d54:	1445330e 	bge	r2,r17,80209224 <___vfprintf_internal_r+0x1afc>
80207d58:	042008b4 	movhi	r16,32802
80207d5c:	842cb804 	addi	r16,r16,-19744
80207d60:	00c000c4 	movi	r3,3
80207d64:	00bfdfc4 	movi	r2,-129
80207d68:	d8c02a15 	stw	r3,168(sp)
80207d6c:	90a4703a 	and	r18,r18,r2
80207d70:	d8c02e15 	stw	r3,184(sp)
80207d74:	d8002915 	stw	zero,164(sp)
80207d78:	d8003215 	stw	zero,200(sp)
80207d7c:	00003706 	br	80207e5c <___vfprintf_internal_r+0x734>
80207d80:	94800214 	ori	r18,r18,8
80207d84:	ac400007 	ldb	r17,0(r21)
80207d88:	003ec806 	br	802078ac <__reset+0xfa1e78ac>
80207d8c:	18c03fcc 	andi	r3,r3,255
80207d90:	1806db1e 	bne	r3,zero,80209900 <___vfprintf_internal_r+0x21d8>
80207d94:	94800414 	ori	r18,r18,16
80207d98:	9080080c 	andi	r2,r18,32
80207d9c:	1002d826 	beq	r2,zero,80208900 <___vfprintf_internal_r+0x11d8>
80207da0:	d9402d17 	ldw	r5,180(sp)
80207da4:	d8c02917 	ldw	r3,164(sp)
80207da8:	d8002785 	stb	zero,158(sp)
80207dac:	28800204 	addi	r2,r5,8
80207db0:	2cc00017 	ldw	r19,0(r5)
80207db4:	2d800117 	ldw	r22,4(r5)
80207db8:	18048f16 	blt	r3,zero,80208ff8 <___vfprintf_internal_r+0x18d0>
80207dbc:	013fdfc4 	movi	r4,-129
80207dc0:	9d86b03a 	or	r3,r19,r22
80207dc4:	d8802d15 	stw	r2,180(sp)
80207dc8:	9124703a 	and	r18,r18,r4
80207dcc:	1802d91e 	bne	r3,zero,80208934 <___vfprintf_internal_r+0x120c>
80207dd0:	d8c02917 	ldw	r3,164(sp)
80207dd4:	0039883a 	mov	fp,zero
80207dd8:	1805c326 	beq	r3,zero,802094e8 <___vfprintf_internal_r+0x1dc0>
80207ddc:	0027883a 	mov	r19,zero
80207de0:	002d883a 	mov	r22,zero
80207de4:	dc001e04 	addi	r16,sp,120
80207de8:	9806d0fa 	srli	r3,r19,3
80207dec:	b008977a 	slli	r4,r22,29
80207df0:	b02cd0fa 	srli	r22,r22,3
80207df4:	9cc001cc 	andi	r19,r19,7
80207df8:	98800c04 	addi	r2,r19,48
80207dfc:	843fffc4 	addi	r16,r16,-1
80207e00:	20e6b03a 	or	r19,r4,r3
80207e04:	80800005 	stb	r2,0(r16)
80207e08:	9d86b03a 	or	r3,r19,r22
80207e0c:	183ff61e 	bne	r3,zero,80207de8 <__reset+0xfa1e7de8>
80207e10:	90c0004c 	andi	r3,r18,1
80207e14:	18013b26 	beq	r3,zero,80208304 <___vfprintf_internal_r+0xbdc>
80207e18:	10803fcc 	andi	r2,r2,255
80207e1c:	1080201c 	xori	r2,r2,128
80207e20:	10bfe004 	addi	r2,r2,-128
80207e24:	00c00c04 	movi	r3,48
80207e28:	10c13626 	beq	r2,r3,80208304 <___vfprintf_internal_r+0xbdc>
80207e2c:	80ffffc5 	stb	r3,-1(r16)
80207e30:	d8c02817 	ldw	r3,160(sp)
80207e34:	80bfffc4 	addi	r2,r16,-1
80207e38:	1021883a 	mov	r16,r2
80207e3c:	1887c83a 	sub	r3,r3,r2
80207e40:	d8c02e15 	stw	r3,184(sp)
80207e44:	d8802e17 	ldw	r2,184(sp)
80207e48:	d9002917 	ldw	r4,164(sp)
80207e4c:	1100010e 	bge	r2,r4,80207e54 <___vfprintf_internal_r+0x72c>
80207e50:	2005883a 	mov	r2,r4
80207e54:	d8802a15 	stw	r2,168(sp)
80207e58:	d8003215 	stw	zero,200(sp)
80207e5c:	e7003fcc 	andi	fp,fp,255
80207e60:	e700201c 	xori	fp,fp,128
80207e64:	e73fe004 	addi	fp,fp,-128
80207e68:	e0000326 	beq	fp,zero,80207e78 <___vfprintf_internal_r+0x750>
80207e6c:	d8c02a17 	ldw	r3,168(sp)
80207e70:	18c00044 	addi	r3,r3,1
80207e74:	d8c02a15 	stw	r3,168(sp)
80207e78:	90c0008c 	andi	r3,r18,2
80207e7c:	d8c02b15 	stw	r3,172(sp)
80207e80:	18000326 	beq	r3,zero,80207e90 <___vfprintf_internal_r+0x768>
80207e84:	d8c02a17 	ldw	r3,168(sp)
80207e88:	18c00084 	addi	r3,r3,2
80207e8c:	d8c02a15 	stw	r3,168(sp)
80207e90:	90c0210c 	andi	r3,r18,132
80207e94:	d8c03015 	stw	r3,192(sp)
80207e98:	1801a31e 	bne	r3,zero,80208528 <___vfprintf_internal_r+0xe00>
80207e9c:	d9003117 	ldw	r4,196(sp)
80207ea0:	d8c02a17 	ldw	r3,168(sp)
80207ea4:	20e7c83a 	sub	r19,r4,r3
80207ea8:	04c19f0e 	bge	zero,r19,80208528 <___vfprintf_internal_r+0xe00>
80207eac:	02400404 	movi	r9,16
80207eb0:	d8c02017 	ldw	r3,128(sp)
80207eb4:	d8801f17 	ldw	r2,124(sp)
80207eb8:	4cc50d0e 	bge	r9,r19,802092f0 <___vfprintf_internal_r+0x1bc8>
80207ebc:	016008b4 	movhi	r5,32802
80207ec0:	296cd384 	addi	r5,r5,-19634
80207ec4:	dc403b15 	stw	r17,236(sp)
80207ec8:	d9403515 	stw	r5,212(sp)
80207ecc:	9823883a 	mov	r17,r19
80207ed0:	482d883a 	mov	r22,r9
80207ed4:	9027883a 	mov	r19,r18
80207ed8:	070001c4 	movi	fp,7
80207edc:	8025883a 	mov	r18,r16
80207ee0:	dc002c17 	ldw	r16,176(sp)
80207ee4:	00000306 	br	80207ef4 <___vfprintf_internal_r+0x7cc>
80207ee8:	8c7ffc04 	addi	r17,r17,-16
80207eec:	42000204 	addi	r8,r8,8
80207ef0:	b440130e 	bge	r22,r17,80207f40 <___vfprintf_internal_r+0x818>
80207ef4:	012008b4 	movhi	r4,32802
80207ef8:	18c00404 	addi	r3,r3,16
80207efc:	10800044 	addi	r2,r2,1
80207f00:	212cd384 	addi	r4,r4,-19634
80207f04:	41000015 	stw	r4,0(r8)
80207f08:	45800115 	stw	r22,4(r8)
80207f0c:	d8c02015 	stw	r3,128(sp)
80207f10:	d8801f15 	stw	r2,124(sp)
80207f14:	e0bff40e 	bge	fp,r2,80207ee8 <__reset+0xfa1e7ee8>
80207f18:	d9801e04 	addi	r6,sp,120
80207f1c:	b80b883a 	mov	r5,r23
80207f20:	8009883a 	mov	r4,r16
80207f24:	020ffe80 	call	8020ffe8 <__sprint_r>
80207f28:	103f011e 	bne	r2,zero,80207b30 <__reset+0xfa1e7b30>
80207f2c:	8c7ffc04 	addi	r17,r17,-16
80207f30:	d8c02017 	ldw	r3,128(sp)
80207f34:	d8801f17 	ldw	r2,124(sp)
80207f38:	da000404 	addi	r8,sp,16
80207f3c:	b47fed16 	blt	r22,r17,80207ef4 <__reset+0xfa1e7ef4>
80207f40:	9021883a 	mov	r16,r18
80207f44:	9825883a 	mov	r18,r19
80207f48:	8827883a 	mov	r19,r17
80207f4c:	dc403b17 	ldw	r17,236(sp)
80207f50:	d9403517 	ldw	r5,212(sp)
80207f54:	98c7883a 	add	r3,r19,r3
80207f58:	10800044 	addi	r2,r2,1
80207f5c:	41400015 	stw	r5,0(r8)
80207f60:	44c00115 	stw	r19,4(r8)
80207f64:	d8c02015 	stw	r3,128(sp)
80207f68:	d8801f15 	stw	r2,124(sp)
80207f6c:	010001c4 	movi	r4,7
80207f70:	2082a316 	blt	r4,r2,80208a00 <___vfprintf_internal_r+0x12d8>
80207f74:	df002787 	ldb	fp,158(sp)
80207f78:	42000204 	addi	r8,r8,8
80207f7c:	e0000c26 	beq	fp,zero,80207fb0 <___vfprintf_internal_r+0x888>
80207f80:	d8801f17 	ldw	r2,124(sp)
80207f84:	d9002784 	addi	r4,sp,158
80207f88:	18c00044 	addi	r3,r3,1
80207f8c:	10800044 	addi	r2,r2,1
80207f90:	41000015 	stw	r4,0(r8)
80207f94:	01000044 	movi	r4,1
80207f98:	41000115 	stw	r4,4(r8)
80207f9c:	d8c02015 	stw	r3,128(sp)
80207fa0:	d8801f15 	stw	r2,124(sp)
80207fa4:	010001c4 	movi	r4,7
80207fa8:	20823c16 	blt	r4,r2,8020889c <___vfprintf_internal_r+0x1174>
80207fac:	42000204 	addi	r8,r8,8
80207fb0:	d8802b17 	ldw	r2,172(sp)
80207fb4:	10000c26 	beq	r2,zero,80207fe8 <___vfprintf_internal_r+0x8c0>
80207fb8:	d8801f17 	ldw	r2,124(sp)
80207fbc:	d9002704 	addi	r4,sp,156
80207fc0:	18c00084 	addi	r3,r3,2
80207fc4:	10800044 	addi	r2,r2,1
80207fc8:	41000015 	stw	r4,0(r8)
80207fcc:	01000084 	movi	r4,2
80207fd0:	41000115 	stw	r4,4(r8)
80207fd4:	d8c02015 	stw	r3,128(sp)
80207fd8:	d8801f15 	stw	r2,124(sp)
80207fdc:	010001c4 	movi	r4,7
80207fe0:	20823616 	blt	r4,r2,802088bc <___vfprintf_internal_r+0x1194>
80207fe4:	42000204 	addi	r8,r8,8
80207fe8:	d9003017 	ldw	r4,192(sp)
80207fec:	00802004 	movi	r2,128
80207ff0:	20819926 	beq	r4,r2,80208658 <___vfprintf_internal_r+0xf30>
80207ff4:	d9402917 	ldw	r5,164(sp)
80207ff8:	d8802e17 	ldw	r2,184(sp)
80207ffc:	28adc83a 	sub	r22,r5,r2
80208000:	0580310e 	bge	zero,r22,802080c8 <___vfprintf_internal_r+0x9a0>
80208004:	07000404 	movi	fp,16
80208008:	d8801f17 	ldw	r2,124(sp)
8020800c:	e584140e 	bge	fp,r22,80209060 <___vfprintf_internal_r+0x1938>
80208010:	016008b4 	movhi	r5,32802
80208014:	296ccf84 	addi	r5,r5,-19650
80208018:	dc402915 	stw	r17,164(sp)
8020801c:	d9402b15 	stw	r5,172(sp)
80208020:	b023883a 	mov	r17,r22
80208024:	04c001c4 	movi	r19,7
80208028:	a82d883a 	mov	r22,r21
8020802c:	902b883a 	mov	r21,r18
80208030:	8025883a 	mov	r18,r16
80208034:	dc002c17 	ldw	r16,176(sp)
80208038:	00000306 	br	80208048 <___vfprintf_internal_r+0x920>
8020803c:	8c7ffc04 	addi	r17,r17,-16
80208040:	42000204 	addi	r8,r8,8
80208044:	e440110e 	bge	fp,r17,8020808c <___vfprintf_internal_r+0x964>
80208048:	18c00404 	addi	r3,r3,16
8020804c:	10800044 	addi	r2,r2,1
80208050:	45000015 	stw	r20,0(r8)
80208054:	47000115 	stw	fp,4(r8)
80208058:	d8c02015 	stw	r3,128(sp)
8020805c:	d8801f15 	stw	r2,124(sp)
80208060:	98bff60e 	bge	r19,r2,8020803c <__reset+0xfa1e803c>
80208064:	d9801e04 	addi	r6,sp,120
80208068:	b80b883a 	mov	r5,r23
8020806c:	8009883a 	mov	r4,r16
80208070:	020ffe80 	call	8020ffe8 <__sprint_r>
80208074:	103eae1e 	bne	r2,zero,80207b30 <__reset+0xfa1e7b30>
80208078:	8c7ffc04 	addi	r17,r17,-16
8020807c:	d8c02017 	ldw	r3,128(sp)
80208080:	d8801f17 	ldw	r2,124(sp)
80208084:	da000404 	addi	r8,sp,16
80208088:	e47fef16 	blt	fp,r17,80208048 <__reset+0xfa1e8048>
8020808c:	9021883a 	mov	r16,r18
80208090:	a825883a 	mov	r18,r21
80208094:	b02b883a 	mov	r21,r22
80208098:	882d883a 	mov	r22,r17
8020809c:	dc402917 	ldw	r17,164(sp)
802080a0:	d9002b17 	ldw	r4,172(sp)
802080a4:	1d87883a 	add	r3,r3,r22
802080a8:	10800044 	addi	r2,r2,1
802080ac:	41000015 	stw	r4,0(r8)
802080b0:	45800115 	stw	r22,4(r8)
802080b4:	d8c02015 	stw	r3,128(sp)
802080b8:	d8801f15 	stw	r2,124(sp)
802080bc:	010001c4 	movi	r4,7
802080c0:	2081ee16 	blt	r4,r2,8020887c <___vfprintf_internal_r+0x1154>
802080c4:	42000204 	addi	r8,r8,8
802080c8:	9080400c 	andi	r2,r18,256
802080cc:	1001181e 	bne	r2,zero,80208530 <___vfprintf_internal_r+0xe08>
802080d0:	d9402e17 	ldw	r5,184(sp)
802080d4:	d8801f17 	ldw	r2,124(sp)
802080d8:	44000015 	stw	r16,0(r8)
802080dc:	1947883a 	add	r3,r3,r5
802080e0:	10800044 	addi	r2,r2,1
802080e4:	41400115 	stw	r5,4(r8)
802080e8:	d8c02015 	stw	r3,128(sp)
802080ec:	d8801f15 	stw	r2,124(sp)
802080f0:	010001c4 	movi	r4,7
802080f4:	2081d316 	blt	r4,r2,80208844 <___vfprintf_internal_r+0x111c>
802080f8:	42000204 	addi	r8,r8,8
802080fc:	9480010c 	andi	r18,r18,4
80208100:	90003226 	beq	r18,zero,802081cc <___vfprintf_internal_r+0xaa4>
80208104:	d9403117 	ldw	r5,196(sp)
80208108:	d8802a17 	ldw	r2,168(sp)
8020810c:	28a1c83a 	sub	r16,r5,r2
80208110:	04002e0e 	bge	zero,r16,802081cc <___vfprintf_internal_r+0xaa4>
80208114:	04400404 	movi	r17,16
80208118:	d8801f17 	ldw	r2,124(sp)
8020811c:	8c04a20e 	bge	r17,r16,802093a8 <___vfprintf_internal_r+0x1c80>
80208120:	016008b4 	movhi	r5,32802
80208124:	296cd384 	addi	r5,r5,-19634
80208128:	d9403515 	stw	r5,212(sp)
8020812c:	048001c4 	movi	r18,7
80208130:	dcc02c17 	ldw	r19,176(sp)
80208134:	00000306 	br	80208144 <___vfprintf_internal_r+0xa1c>
80208138:	843ffc04 	addi	r16,r16,-16
8020813c:	42000204 	addi	r8,r8,8
80208140:	8c00130e 	bge	r17,r16,80208190 <___vfprintf_internal_r+0xa68>
80208144:	012008b4 	movhi	r4,32802
80208148:	18c00404 	addi	r3,r3,16
8020814c:	10800044 	addi	r2,r2,1
80208150:	212cd384 	addi	r4,r4,-19634
80208154:	41000015 	stw	r4,0(r8)
80208158:	44400115 	stw	r17,4(r8)
8020815c:	d8c02015 	stw	r3,128(sp)
80208160:	d8801f15 	stw	r2,124(sp)
80208164:	90bff40e 	bge	r18,r2,80208138 <__reset+0xfa1e8138>
80208168:	d9801e04 	addi	r6,sp,120
8020816c:	b80b883a 	mov	r5,r23
80208170:	9809883a 	mov	r4,r19
80208174:	020ffe80 	call	8020ffe8 <__sprint_r>
80208178:	103e6d1e 	bne	r2,zero,80207b30 <__reset+0xfa1e7b30>
8020817c:	843ffc04 	addi	r16,r16,-16
80208180:	d8c02017 	ldw	r3,128(sp)
80208184:	d8801f17 	ldw	r2,124(sp)
80208188:	da000404 	addi	r8,sp,16
8020818c:	8c3fed16 	blt	r17,r16,80208144 <__reset+0xfa1e8144>
80208190:	d9403517 	ldw	r5,212(sp)
80208194:	1c07883a 	add	r3,r3,r16
80208198:	10800044 	addi	r2,r2,1
8020819c:	41400015 	stw	r5,0(r8)
802081a0:	44000115 	stw	r16,4(r8)
802081a4:	d8c02015 	stw	r3,128(sp)
802081a8:	d8801f15 	stw	r2,124(sp)
802081ac:	010001c4 	movi	r4,7
802081b0:	2080060e 	bge	r4,r2,802081cc <___vfprintf_internal_r+0xaa4>
802081b4:	d9002c17 	ldw	r4,176(sp)
802081b8:	d9801e04 	addi	r6,sp,120
802081bc:	b80b883a 	mov	r5,r23
802081c0:	020ffe80 	call	8020ffe8 <__sprint_r>
802081c4:	103e5a1e 	bne	r2,zero,80207b30 <__reset+0xfa1e7b30>
802081c8:	d8c02017 	ldw	r3,128(sp)
802081cc:	d8803117 	ldw	r2,196(sp)
802081d0:	d9002a17 	ldw	r4,168(sp)
802081d4:	1100010e 	bge	r2,r4,802081dc <___vfprintf_internal_r+0xab4>
802081d8:	2005883a 	mov	r2,r4
802081dc:	d9402f17 	ldw	r5,188(sp)
802081e0:	288b883a 	add	r5,r5,r2
802081e4:	d9402f15 	stw	r5,188(sp)
802081e8:	18019e1e 	bne	r3,zero,80208864 <___vfprintf_internal_r+0x113c>
802081ec:	a8800007 	ldb	r2,0(r21)
802081f0:	d8001f15 	stw	zero,124(sp)
802081f4:	da000404 	addi	r8,sp,16
802081f8:	103d851e 	bne	r2,zero,80207810 <__reset+0xfa1e7810>
802081fc:	a821883a 	mov	r16,r21
80208200:	003d9b06 	br	80207870 <__reset+0xfa1e7870>
80208204:	18c03fcc 	andi	r3,r3,255
80208208:	1805c11e 	bne	r3,zero,80209910 <___vfprintf_internal_r+0x21e8>
8020820c:	94800414 	ori	r18,r18,16
80208210:	9080080c 	andi	r2,r18,32
80208214:	10020c26 	beq	r2,zero,80208a48 <___vfprintf_internal_r+0x1320>
80208218:	d8802d17 	ldw	r2,180(sp)
8020821c:	d9002917 	ldw	r4,164(sp)
80208220:	d8002785 	stb	zero,158(sp)
80208224:	10c00204 	addi	r3,r2,8
80208228:	14c00017 	ldw	r19,0(r2)
8020822c:	15800117 	ldw	r22,4(r2)
80208230:	20040f16 	blt	r4,zero,80209270 <___vfprintf_internal_r+0x1b48>
80208234:	013fdfc4 	movi	r4,-129
80208238:	9d84b03a 	or	r2,r19,r22
8020823c:	d8c02d15 	stw	r3,180(sp)
80208240:	9124703a 	and	r18,r18,r4
80208244:	0039883a 	mov	fp,zero
80208248:	103e891e 	bne	r2,zero,80207c70 <__reset+0xfa1e7c70>
8020824c:	d9002917 	ldw	r4,164(sp)
80208250:	2002c11e 	bne	r4,zero,80208d58 <___vfprintf_internal_r+0x1630>
80208254:	d8002915 	stw	zero,164(sp)
80208258:	d8002e15 	stw	zero,184(sp)
8020825c:	dc001e04 	addi	r16,sp,120
80208260:	003ef806 	br	80207e44 <__reset+0xfa1e7e44>
80208264:	18c03fcc 	andi	r3,r3,255
80208268:	18059d1e 	bne	r3,zero,802098e0 <___vfprintf_internal_r+0x21b8>
8020826c:	016008b4 	movhi	r5,32802
80208270:	296cbb04 	addi	r5,r5,-19732
80208274:	d9403915 	stw	r5,228(sp)
80208278:	9080080c 	andi	r2,r18,32
8020827c:	10005226 	beq	r2,zero,802083c8 <___vfprintf_internal_r+0xca0>
80208280:	d8802d17 	ldw	r2,180(sp)
80208284:	14c00017 	ldw	r19,0(r2)
80208288:	15800117 	ldw	r22,4(r2)
8020828c:	10800204 	addi	r2,r2,8
80208290:	d8802d15 	stw	r2,180(sp)
80208294:	9080004c 	andi	r2,r18,1
80208298:	10019026 	beq	r2,zero,802088dc <___vfprintf_internal_r+0x11b4>
8020829c:	9d84b03a 	or	r2,r19,r22
802082a0:	10036926 	beq	r2,zero,80209048 <___vfprintf_internal_r+0x1920>
802082a4:	d8c02917 	ldw	r3,164(sp)
802082a8:	00800c04 	movi	r2,48
802082ac:	d8802705 	stb	r2,156(sp)
802082b0:	dc402745 	stb	r17,157(sp)
802082b4:	d8002785 	stb	zero,158(sp)
802082b8:	90800094 	ori	r2,r18,2
802082bc:	18045d16 	blt	r3,zero,80209434 <___vfprintf_internal_r+0x1d0c>
802082c0:	00bfdfc4 	movi	r2,-129
802082c4:	90a4703a 	and	r18,r18,r2
802082c8:	94800094 	ori	r18,r18,2
802082cc:	0039883a 	mov	fp,zero
802082d0:	d9003917 	ldw	r4,228(sp)
802082d4:	dc001e04 	addi	r16,sp,120
802082d8:	988003cc 	andi	r2,r19,15
802082dc:	b006973a 	slli	r3,r22,28
802082e0:	2085883a 	add	r2,r4,r2
802082e4:	9826d13a 	srli	r19,r19,4
802082e8:	10800003 	ldbu	r2,0(r2)
802082ec:	b02cd13a 	srli	r22,r22,4
802082f0:	843fffc4 	addi	r16,r16,-1
802082f4:	1ce6b03a 	or	r19,r3,r19
802082f8:	80800005 	stb	r2,0(r16)
802082fc:	9d84b03a 	or	r2,r19,r22
80208300:	103ff51e 	bne	r2,zero,802082d8 <__reset+0xfa1e82d8>
80208304:	d8c02817 	ldw	r3,160(sp)
80208308:	1c07c83a 	sub	r3,r3,r16
8020830c:	d8c02e15 	stw	r3,184(sp)
80208310:	003ecc06 	br	80207e44 <__reset+0xfa1e7e44>
80208314:	18c03fcc 	andi	r3,r3,255
80208318:	183e9f26 	beq	r3,zero,80207d98 <__reset+0xfa1e7d98>
8020831c:	d9c02785 	stb	r7,158(sp)
80208320:	003e9d06 	br	80207d98 <__reset+0xfa1e7d98>
80208324:	00c00044 	movi	r3,1
80208328:	01c00ac4 	movi	r7,43
8020832c:	ac400007 	ldb	r17,0(r21)
80208330:	003d5e06 	br	802078ac <__reset+0xfa1e78ac>
80208334:	94800814 	ori	r18,r18,32
80208338:	ac400007 	ldb	r17,0(r21)
8020833c:	003d5b06 	br	802078ac <__reset+0xfa1e78ac>
80208340:	d8c02d17 	ldw	r3,180(sp)
80208344:	d8002785 	stb	zero,158(sp)
80208348:	1c000017 	ldw	r16,0(r3)
8020834c:	1cc00104 	addi	r19,r3,4
80208350:	80041926 	beq	r16,zero,802093b8 <___vfprintf_internal_r+0x1c90>
80208354:	d9002917 	ldw	r4,164(sp)
80208358:	2003d016 	blt	r4,zero,8020929c <___vfprintf_internal_r+0x1b74>
8020835c:	200d883a 	mov	r6,r4
80208360:	000b883a 	mov	r5,zero
80208364:	8009883a 	mov	r4,r16
80208368:	da003d15 	stw	r8,244(sp)
8020836c:	020cf380 	call	8020cf38 <memchr>
80208370:	da003d17 	ldw	r8,244(sp)
80208374:	10045426 	beq	r2,zero,802094c8 <___vfprintf_internal_r+0x1da0>
80208378:	1405c83a 	sub	r2,r2,r16
8020837c:	d8802e15 	stw	r2,184(sp)
80208380:	1003cc16 	blt	r2,zero,802092b4 <___vfprintf_internal_r+0x1b8c>
80208384:	df002783 	ldbu	fp,158(sp)
80208388:	d8802a15 	stw	r2,168(sp)
8020838c:	dcc02d15 	stw	r19,180(sp)
80208390:	d8002915 	stw	zero,164(sp)
80208394:	d8003215 	stw	zero,200(sp)
80208398:	003eb006 	br	80207e5c <__reset+0xfa1e7e5c>
8020839c:	18c03fcc 	andi	r3,r3,255
802083a0:	183f9b26 	beq	r3,zero,80208210 <__reset+0xfa1e8210>
802083a4:	d9c02785 	stb	r7,158(sp)
802083a8:	003f9906 	br	80208210 <__reset+0xfa1e8210>
802083ac:	18c03fcc 	andi	r3,r3,255
802083b0:	1805551e 	bne	r3,zero,80209908 <___vfprintf_internal_r+0x21e0>
802083b4:	016008b4 	movhi	r5,32802
802083b8:	296cc004 	addi	r5,r5,-19712
802083bc:	d9403915 	stw	r5,228(sp)
802083c0:	9080080c 	andi	r2,r18,32
802083c4:	103fae1e 	bne	r2,zero,80208280 <__reset+0xfa1e8280>
802083c8:	9080040c 	andi	r2,r18,16
802083cc:	1002de26 	beq	r2,zero,80208f48 <___vfprintf_internal_r+0x1820>
802083d0:	d8c02d17 	ldw	r3,180(sp)
802083d4:	002d883a 	mov	r22,zero
802083d8:	1cc00017 	ldw	r19,0(r3)
802083dc:	18c00104 	addi	r3,r3,4
802083e0:	d8c02d15 	stw	r3,180(sp)
802083e4:	003fab06 	br	80208294 <__reset+0xfa1e8294>
802083e8:	38803fcc 	andi	r2,r7,255
802083ec:	1080201c 	xori	r2,r2,128
802083f0:	10bfe004 	addi	r2,r2,-128
802083f4:	1002d21e 	bne	r2,zero,80208f40 <___vfprintf_internal_r+0x1818>
802083f8:	00c00044 	movi	r3,1
802083fc:	01c00804 	movi	r7,32
80208400:	ac400007 	ldb	r17,0(r21)
80208404:	003d2906 	br	802078ac <__reset+0xfa1e78ac>
80208408:	94800054 	ori	r18,r18,1
8020840c:	ac400007 	ldb	r17,0(r21)
80208410:	003d2606 	br	802078ac <__reset+0xfa1e78ac>
80208414:	18c03fcc 	andi	r3,r3,255
80208418:	183e0526 	beq	r3,zero,80207c30 <__reset+0xfa1e7c30>
8020841c:	d9c02785 	stb	r7,158(sp)
80208420:	003e0306 	br	80207c30 <__reset+0xfa1e7c30>
80208424:	94801014 	ori	r18,r18,64
80208428:	ac400007 	ldb	r17,0(r21)
8020842c:	003d1f06 	br	802078ac <__reset+0xfa1e78ac>
80208430:	ac400007 	ldb	r17,0(r21)
80208434:	8a438726 	beq	r17,r9,80209254 <___vfprintf_internal_r+0x1b2c>
80208438:	94800414 	ori	r18,r18,16
8020843c:	003d1b06 	br	802078ac <__reset+0xfa1e78ac>
80208440:	18c03fcc 	andi	r3,r3,255
80208444:	1805341e 	bne	r3,zero,80209918 <___vfprintf_internal_r+0x21f0>
80208448:	9080080c 	andi	r2,r18,32
8020844c:	1002cd26 	beq	r2,zero,80208f84 <___vfprintf_internal_r+0x185c>
80208450:	d9402d17 	ldw	r5,180(sp)
80208454:	d9002f17 	ldw	r4,188(sp)
80208458:	28800017 	ldw	r2,0(r5)
8020845c:	2007d7fa 	srai	r3,r4,31
80208460:	29400104 	addi	r5,r5,4
80208464:	d9402d15 	stw	r5,180(sp)
80208468:	11000015 	stw	r4,0(r2)
8020846c:	10c00115 	stw	r3,4(r2)
80208470:	003ce506 	br	80207808 <__reset+0xfa1e7808>
80208474:	d8c02d17 	ldw	r3,180(sp)
80208478:	d9002d17 	ldw	r4,180(sp)
8020847c:	d8002785 	stb	zero,158(sp)
80208480:	18800017 	ldw	r2,0(r3)
80208484:	21000104 	addi	r4,r4,4
80208488:	00c00044 	movi	r3,1
8020848c:	d8c02a15 	stw	r3,168(sp)
80208490:	d8801405 	stb	r2,80(sp)
80208494:	d9002d15 	stw	r4,180(sp)
80208498:	d8c02e15 	stw	r3,184(sp)
8020849c:	d8002915 	stw	zero,164(sp)
802084a0:	d8003215 	stw	zero,200(sp)
802084a4:	dc001404 	addi	r16,sp,80
802084a8:	0039883a 	mov	fp,zero
802084ac:	003e7206 	br	80207e78 <__reset+0xfa1e7e78>
802084b0:	012008b4 	movhi	r4,32802
802084b4:	212cc004 	addi	r4,r4,-19712
802084b8:	0039883a 	mov	fp,zero
802084bc:	d9003915 	stw	r4,228(sp)
802084c0:	04401e04 	movi	r17,120
802084c4:	003f8206 	br	802082d0 <__reset+0xfa1e82d0>
802084c8:	18c03fcc 	andi	r3,r3,255
802084cc:	1805061e 	bne	r3,zero,802098e8 <___vfprintf_internal_r+0x21c0>
802084d0:	883d9126 	beq	r17,zero,80207b18 <__reset+0xfa1e7b18>
802084d4:	00c00044 	movi	r3,1
802084d8:	d8c02a15 	stw	r3,168(sp)
802084dc:	dc401405 	stb	r17,80(sp)
802084e0:	d8002785 	stb	zero,158(sp)
802084e4:	003fec06 	br	80208498 <__reset+0xfa1e8498>
802084e8:	016008b4 	movhi	r5,32802
802084ec:	296cc004 	addi	r5,r5,-19712
802084f0:	d9403915 	stw	r5,228(sp)
802084f4:	d8c02d15 	stw	r3,180(sp)
802084f8:	1025883a 	mov	r18,r2
802084fc:	04401e04 	movi	r17,120
80208500:	9d84b03a 	or	r2,r19,r22
80208504:	1000fc1e 	bne	r2,zero,802088f8 <___vfprintf_internal_r+0x11d0>
80208508:	0039883a 	mov	fp,zero
8020850c:	00800084 	movi	r2,2
80208510:	10803fcc 	andi	r2,r2,255
80208514:	00c00044 	movi	r3,1
80208518:	10c20f26 	beq	r2,r3,80208d58 <___vfprintf_internal_r+0x1630>
8020851c:	00c00084 	movi	r3,2
80208520:	10fd6326 	beq	r2,r3,80207ab0 <__reset+0xfa1e7ab0>
80208524:	003e2d06 	br	80207ddc <__reset+0xfa1e7ddc>
80208528:	d8c02017 	ldw	r3,128(sp)
8020852c:	003e9306 	br	80207f7c <__reset+0xfa1e7f7c>
80208530:	00801944 	movi	r2,101
80208534:	14407e0e 	bge	r2,r17,80208730 <___vfprintf_internal_r+0x1008>
80208538:	d9003617 	ldw	r4,216(sp)
8020853c:	d9403817 	ldw	r5,224(sp)
80208540:	000d883a 	mov	r6,zero
80208544:	000f883a 	mov	r7,zero
80208548:	d8c03c15 	stw	r3,240(sp)
8020854c:	da003d15 	stw	r8,244(sp)
80208550:	0213c600 	call	80213c60 <__eqdf2>
80208554:	d8c03c17 	ldw	r3,240(sp)
80208558:	da003d17 	ldw	r8,244(sp)
8020855c:	1000f71e 	bne	r2,zero,8020893c <___vfprintf_internal_r+0x1214>
80208560:	d8801f17 	ldw	r2,124(sp)
80208564:	012008b4 	movhi	r4,32802
80208568:	212cc704 	addi	r4,r4,-19684
8020856c:	18c00044 	addi	r3,r3,1
80208570:	10800044 	addi	r2,r2,1
80208574:	41000015 	stw	r4,0(r8)
80208578:	01000044 	movi	r4,1
8020857c:	41000115 	stw	r4,4(r8)
80208580:	d8c02015 	stw	r3,128(sp)
80208584:	d8801f15 	stw	r2,124(sp)
80208588:	010001c4 	movi	r4,7
8020858c:	2082b816 	blt	r4,r2,80209070 <___vfprintf_internal_r+0x1948>
80208590:	42000204 	addi	r8,r8,8
80208594:	d8802617 	ldw	r2,152(sp)
80208598:	d9403317 	ldw	r5,204(sp)
8020859c:	11400216 	blt	r2,r5,802085a8 <___vfprintf_internal_r+0xe80>
802085a0:	9080004c 	andi	r2,r18,1
802085a4:	103ed526 	beq	r2,zero,802080fc <__reset+0xfa1e80fc>
802085a8:	d8803717 	ldw	r2,220(sp)
802085ac:	d9003417 	ldw	r4,208(sp)
802085b0:	d9403717 	ldw	r5,220(sp)
802085b4:	1887883a 	add	r3,r3,r2
802085b8:	d8801f17 	ldw	r2,124(sp)
802085bc:	41000015 	stw	r4,0(r8)
802085c0:	41400115 	stw	r5,4(r8)
802085c4:	10800044 	addi	r2,r2,1
802085c8:	d8c02015 	stw	r3,128(sp)
802085cc:	d8801f15 	stw	r2,124(sp)
802085d0:	010001c4 	movi	r4,7
802085d4:	20832916 	blt	r4,r2,8020927c <___vfprintf_internal_r+0x1b54>
802085d8:	42000204 	addi	r8,r8,8
802085dc:	d8803317 	ldw	r2,204(sp)
802085e0:	143fffc4 	addi	r16,r2,-1
802085e4:	043ec50e 	bge	zero,r16,802080fc <__reset+0xfa1e80fc>
802085e8:	04400404 	movi	r17,16
802085ec:	d8801f17 	ldw	r2,124(sp)
802085f0:	8c00880e 	bge	r17,r16,80208814 <___vfprintf_internal_r+0x10ec>
802085f4:	016008b4 	movhi	r5,32802
802085f8:	296ccf84 	addi	r5,r5,-19650
802085fc:	d9402b15 	stw	r5,172(sp)
80208600:	058001c4 	movi	r22,7
80208604:	dcc02c17 	ldw	r19,176(sp)
80208608:	00000306 	br	80208618 <___vfprintf_internal_r+0xef0>
8020860c:	42000204 	addi	r8,r8,8
80208610:	843ffc04 	addi	r16,r16,-16
80208614:	8c00820e 	bge	r17,r16,80208820 <___vfprintf_internal_r+0x10f8>
80208618:	18c00404 	addi	r3,r3,16
8020861c:	10800044 	addi	r2,r2,1
80208620:	45000015 	stw	r20,0(r8)
80208624:	44400115 	stw	r17,4(r8)
80208628:	d8c02015 	stw	r3,128(sp)
8020862c:	d8801f15 	stw	r2,124(sp)
80208630:	b0bff60e 	bge	r22,r2,8020860c <__reset+0xfa1e860c>
80208634:	d9801e04 	addi	r6,sp,120
80208638:	b80b883a 	mov	r5,r23
8020863c:	9809883a 	mov	r4,r19
80208640:	020ffe80 	call	8020ffe8 <__sprint_r>
80208644:	103d3a1e 	bne	r2,zero,80207b30 <__reset+0xfa1e7b30>
80208648:	d8c02017 	ldw	r3,128(sp)
8020864c:	d8801f17 	ldw	r2,124(sp)
80208650:	da000404 	addi	r8,sp,16
80208654:	003fee06 	br	80208610 <__reset+0xfa1e8610>
80208658:	d9403117 	ldw	r5,196(sp)
8020865c:	d8802a17 	ldw	r2,168(sp)
80208660:	28adc83a 	sub	r22,r5,r2
80208664:	05be630e 	bge	zero,r22,80207ff4 <__reset+0xfa1e7ff4>
80208668:	07000404 	movi	fp,16
8020866c:	d8801f17 	ldw	r2,124(sp)
80208670:	e5838f0e 	bge	fp,r22,802094b0 <___vfprintf_internal_r+0x1d88>
80208674:	016008b4 	movhi	r5,32802
80208678:	296ccf84 	addi	r5,r5,-19650
8020867c:	dc403015 	stw	r17,192(sp)
80208680:	d9402b15 	stw	r5,172(sp)
80208684:	b023883a 	mov	r17,r22
80208688:	04c001c4 	movi	r19,7
8020868c:	a82d883a 	mov	r22,r21
80208690:	902b883a 	mov	r21,r18
80208694:	8025883a 	mov	r18,r16
80208698:	dc002c17 	ldw	r16,176(sp)
8020869c:	00000306 	br	802086ac <___vfprintf_internal_r+0xf84>
802086a0:	8c7ffc04 	addi	r17,r17,-16
802086a4:	42000204 	addi	r8,r8,8
802086a8:	e440110e 	bge	fp,r17,802086f0 <___vfprintf_internal_r+0xfc8>
802086ac:	18c00404 	addi	r3,r3,16
802086b0:	10800044 	addi	r2,r2,1
802086b4:	45000015 	stw	r20,0(r8)
802086b8:	47000115 	stw	fp,4(r8)
802086bc:	d8c02015 	stw	r3,128(sp)
802086c0:	d8801f15 	stw	r2,124(sp)
802086c4:	98bff60e 	bge	r19,r2,802086a0 <__reset+0xfa1e86a0>
802086c8:	d9801e04 	addi	r6,sp,120
802086cc:	b80b883a 	mov	r5,r23
802086d0:	8009883a 	mov	r4,r16
802086d4:	020ffe80 	call	8020ffe8 <__sprint_r>
802086d8:	103d151e 	bne	r2,zero,80207b30 <__reset+0xfa1e7b30>
802086dc:	8c7ffc04 	addi	r17,r17,-16
802086e0:	d8c02017 	ldw	r3,128(sp)
802086e4:	d8801f17 	ldw	r2,124(sp)
802086e8:	da000404 	addi	r8,sp,16
802086ec:	e47fef16 	blt	fp,r17,802086ac <__reset+0xfa1e86ac>
802086f0:	9021883a 	mov	r16,r18
802086f4:	a825883a 	mov	r18,r21
802086f8:	b02b883a 	mov	r21,r22
802086fc:	882d883a 	mov	r22,r17
80208700:	dc403017 	ldw	r17,192(sp)
80208704:	d9002b17 	ldw	r4,172(sp)
80208708:	1d87883a 	add	r3,r3,r22
8020870c:	10800044 	addi	r2,r2,1
80208710:	41000015 	stw	r4,0(r8)
80208714:	45800115 	stw	r22,4(r8)
80208718:	d8c02015 	stw	r3,128(sp)
8020871c:	d8801f15 	stw	r2,124(sp)
80208720:	010001c4 	movi	r4,7
80208724:	20818e16 	blt	r4,r2,80208d60 <___vfprintf_internal_r+0x1638>
80208728:	42000204 	addi	r8,r8,8
8020872c:	003e3106 	br	80207ff4 <__reset+0xfa1e7ff4>
80208730:	d9403317 	ldw	r5,204(sp)
80208734:	00800044 	movi	r2,1
80208738:	18c00044 	addi	r3,r3,1
8020873c:	1141530e 	bge	r2,r5,80208c8c <___vfprintf_internal_r+0x1564>
80208740:	dc401f17 	ldw	r17,124(sp)
80208744:	00800044 	movi	r2,1
80208748:	40800115 	stw	r2,4(r8)
8020874c:	8c400044 	addi	r17,r17,1
80208750:	44000015 	stw	r16,0(r8)
80208754:	d8c02015 	stw	r3,128(sp)
80208758:	dc401f15 	stw	r17,124(sp)
8020875c:	008001c4 	movi	r2,7
80208760:	14416b16 	blt	r2,r17,80208d10 <___vfprintf_internal_r+0x15e8>
80208764:	42000204 	addi	r8,r8,8
80208768:	d8803717 	ldw	r2,220(sp)
8020876c:	d9003417 	ldw	r4,208(sp)
80208770:	8c400044 	addi	r17,r17,1
80208774:	10c7883a 	add	r3,r2,r3
80208778:	40800115 	stw	r2,4(r8)
8020877c:	41000015 	stw	r4,0(r8)
80208780:	d8c02015 	stw	r3,128(sp)
80208784:	dc401f15 	stw	r17,124(sp)
80208788:	008001c4 	movi	r2,7
8020878c:	14416916 	blt	r2,r17,80208d34 <___vfprintf_internal_r+0x160c>
80208790:	45800204 	addi	r22,r8,8
80208794:	d9003617 	ldw	r4,216(sp)
80208798:	d9403817 	ldw	r5,224(sp)
8020879c:	000d883a 	mov	r6,zero
802087a0:	000f883a 	mov	r7,zero
802087a4:	d8c03c15 	stw	r3,240(sp)
802087a8:	0213c600 	call	80213c60 <__eqdf2>
802087ac:	d8c03c17 	ldw	r3,240(sp)
802087b0:	1000bc26 	beq	r2,zero,80208aa4 <___vfprintf_internal_r+0x137c>
802087b4:	d9403317 	ldw	r5,204(sp)
802087b8:	84000044 	addi	r16,r16,1
802087bc:	8c400044 	addi	r17,r17,1
802087c0:	28bfffc4 	addi	r2,r5,-1
802087c4:	1887883a 	add	r3,r3,r2
802087c8:	b0800115 	stw	r2,4(r22)
802087cc:	b4000015 	stw	r16,0(r22)
802087d0:	d8c02015 	stw	r3,128(sp)
802087d4:	dc401f15 	stw	r17,124(sp)
802087d8:	008001c4 	movi	r2,7
802087dc:	14414316 	blt	r2,r17,80208cec <___vfprintf_internal_r+0x15c4>
802087e0:	b5800204 	addi	r22,r22,8
802087e4:	d9003a17 	ldw	r4,232(sp)
802087e8:	df0022c4 	addi	fp,sp,139
802087ec:	8c400044 	addi	r17,r17,1
802087f0:	20c7883a 	add	r3,r4,r3
802087f4:	b7000015 	stw	fp,0(r22)
802087f8:	b1000115 	stw	r4,4(r22)
802087fc:	d8c02015 	stw	r3,128(sp)
80208800:	dc401f15 	stw	r17,124(sp)
80208804:	008001c4 	movi	r2,7
80208808:	14400e16 	blt	r2,r17,80208844 <___vfprintf_internal_r+0x111c>
8020880c:	b2000204 	addi	r8,r22,8
80208810:	003e3a06 	br	802080fc <__reset+0xfa1e80fc>
80208814:	012008b4 	movhi	r4,32802
80208818:	212ccf84 	addi	r4,r4,-19650
8020881c:	d9002b15 	stw	r4,172(sp)
80208820:	d9002b17 	ldw	r4,172(sp)
80208824:	1c07883a 	add	r3,r3,r16
80208828:	44000115 	stw	r16,4(r8)
8020882c:	41000015 	stw	r4,0(r8)
80208830:	10800044 	addi	r2,r2,1
80208834:	d8c02015 	stw	r3,128(sp)
80208838:	d8801f15 	stw	r2,124(sp)
8020883c:	010001c4 	movi	r4,7
80208840:	20be2d0e 	bge	r4,r2,802080f8 <__reset+0xfa1e80f8>
80208844:	d9002c17 	ldw	r4,176(sp)
80208848:	d9801e04 	addi	r6,sp,120
8020884c:	b80b883a 	mov	r5,r23
80208850:	020ffe80 	call	8020ffe8 <__sprint_r>
80208854:	103cb61e 	bne	r2,zero,80207b30 <__reset+0xfa1e7b30>
80208858:	d8c02017 	ldw	r3,128(sp)
8020885c:	da000404 	addi	r8,sp,16
80208860:	003e2606 	br	802080fc <__reset+0xfa1e80fc>
80208864:	d9002c17 	ldw	r4,176(sp)
80208868:	d9801e04 	addi	r6,sp,120
8020886c:	b80b883a 	mov	r5,r23
80208870:	020ffe80 	call	8020ffe8 <__sprint_r>
80208874:	103e5d26 	beq	r2,zero,802081ec <__reset+0xfa1e81ec>
80208878:	003cad06 	br	80207b30 <__reset+0xfa1e7b30>
8020887c:	d9002c17 	ldw	r4,176(sp)
80208880:	d9801e04 	addi	r6,sp,120
80208884:	b80b883a 	mov	r5,r23
80208888:	020ffe80 	call	8020ffe8 <__sprint_r>
8020888c:	103ca81e 	bne	r2,zero,80207b30 <__reset+0xfa1e7b30>
80208890:	d8c02017 	ldw	r3,128(sp)
80208894:	da000404 	addi	r8,sp,16
80208898:	003e0b06 	br	802080c8 <__reset+0xfa1e80c8>
8020889c:	d9002c17 	ldw	r4,176(sp)
802088a0:	d9801e04 	addi	r6,sp,120
802088a4:	b80b883a 	mov	r5,r23
802088a8:	020ffe80 	call	8020ffe8 <__sprint_r>
802088ac:	103ca01e 	bne	r2,zero,80207b30 <__reset+0xfa1e7b30>
802088b0:	d8c02017 	ldw	r3,128(sp)
802088b4:	da000404 	addi	r8,sp,16
802088b8:	003dbd06 	br	80207fb0 <__reset+0xfa1e7fb0>
802088bc:	d9002c17 	ldw	r4,176(sp)
802088c0:	d9801e04 	addi	r6,sp,120
802088c4:	b80b883a 	mov	r5,r23
802088c8:	020ffe80 	call	8020ffe8 <__sprint_r>
802088cc:	103c981e 	bne	r2,zero,80207b30 <__reset+0xfa1e7b30>
802088d0:	d8c02017 	ldw	r3,128(sp)
802088d4:	da000404 	addi	r8,sp,16
802088d8:	003dc306 	br	80207fe8 <__reset+0xfa1e7fe8>
802088dc:	d8802917 	ldw	r2,164(sp)
802088e0:	d8002785 	stb	zero,158(sp)
802088e4:	103f0616 	blt	r2,zero,80208500 <__reset+0xfa1e8500>
802088e8:	00ffdfc4 	movi	r3,-129
802088ec:	9d84b03a 	or	r2,r19,r22
802088f0:	90e4703a 	and	r18,r18,r3
802088f4:	103c6b26 	beq	r2,zero,80207aa4 <__reset+0xfa1e7aa4>
802088f8:	0039883a 	mov	fp,zero
802088fc:	003e7406 	br	802082d0 <__reset+0xfa1e82d0>
80208900:	9080040c 	andi	r2,r18,16
80208904:	1001b326 	beq	r2,zero,80208fd4 <___vfprintf_internal_r+0x18ac>
80208908:	d9002d17 	ldw	r4,180(sp)
8020890c:	d9402917 	ldw	r5,164(sp)
80208910:	d8002785 	stb	zero,158(sp)
80208914:	20800104 	addi	r2,r4,4
80208918:	24c00017 	ldw	r19,0(r4)
8020891c:	002d883a 	mov	r22,zero
80208920:	2801b516 	blt	r5,zero,80208ff8 <___vfprintf_internal_r+0x18d0>
80208924:	00ffdfc4 	movi	r3,-129
80208928:	d8802d15 	stw	r2,180(sp)
8020892c:	90e4703a 	and	r18,r18,r3
80208930:	983d2726 	beq	r19,zero,80207dd0 <__reset+0xfa1e7dd0>
80208934:	0039883a 	mov	fp,zero
80208938:	003d2a06 	br	80207de4 <__reset+0xfa1e7de4>
8020893c:	dc402617 	ldw	r17,152(sp)
80208940:	0441d30e 	bge	zero,r17,80209090 <___vfprintf_internal_r+0x1968>
80208944:	dc403217 	ldw	r17,200(sp)
80208948:	d8803317 	ldw	r2,204(sp)
8020894c:	1440010e 	bge	r2,r17,80208954 <___vfprintf_internal_r+0x122c>
80208950:	1023883a 	mov	r17,r2
80208954:	04400a0e 	bge	zero,r17,80208980 <___vfprintf_internal_r+0x1258>
80208958:	d8801f17 	ldw	r2,124(sp)
8020895c:	1c47883a 	add	r3,r3,r17
80208960:	44000015 	stw	r16,0(r8)
80208964:	10800044 	addi	r2,r2,1
80208968:	44400115 	stw	r17,4(r8)
8020896c:	d8c02015 	stw	r3,128(sp)
80208970:	d8801f15 	stw	r2,124(sp)
80208974:	010001c4 	movi	r4,7
80208978:	20826516 	blt	r4,r2,80209310 <___vfprintf_internal_r+0x1be8>
8020897c:	42000204 	addi	r8,r8,8
80208980:	88026116 	blt	r17,zero,80209308 <___vfprintf_internal_r+0x1be0>
80208984:	d9003217 	ldw	r4,200(sp)
80208988:	2463c83a 	sub	r17,r4,r17
8020898c:	04407b0e 	bge	zero,r17,80208b7c <___vfprintf_internal_r+0x1454>
80208990:	05800404 	movi	r22,16
80208994:	d8801f17 	ldw	r2,124(sp)
80208998:	b4419d0e 	bge	r22,r17,80209010 <___vfprintf_internal_r+0x18e8>
8020899c:	012008b4 	movhi	r4,32802
802089a0:	212ccf84 	addi	r4,r4,-19650
802089a4:	d9002b15 	stw	r4,172(sp)
802089a8:	070001c4 	movi	fp,7
802089ac:	dcc02c17 	ldw	r19,176(sp)
802089b0:	00000306 	br	802089c0 <___vfprintf_internal_r+0x1298>
802089b4:	42000204 	addi	r8,r8,8
802089b8:	8c7ffc04 	addi	r17,r17,-16
802089bc:	b441970e 	bge	r22,r17,8020901c <___vfprintf_internal_r+0x18f4>
802089c0:	18c00404 	addi	r3,r3,16
802089c4:	10800044 	addi	r2,r2,1
802089c8:	45000015 	stw	r20,0(r8)
802089cc:	45800115 	stw	r22,4(r8)
802089d0:	d8c02015 	stw	r3,128(sp)
802089d4:	d8801f15 	stw	r2,124(sp)
802089d8:	e0bff60e 	bge	fp,r2,802089b4 <__reset+0xfa1e89b4>
802089dc:	d9801e04 	addi	r6,sp,120
802089e0:	b80b883a 	mov	r5,r23
802089e4:	9809883a 	mov	r4,r19
802089e8:	020ffe80 	call	8020ffe8 <__sprint_r>
802089ec:	103c501e 	bne	r2,zero,80207b30 <__reset+0xfa1e7b30>
802089f0:	d8c02017 	ldw	r3,128(sp)
802089f4:	d8801f17 	ldw	r2,124(sp)
802089f8:	da000404 	addi	r8,sp,16
802089fc:	003fee06 	br	802089b8 <__reset+0xfa1e89b8>
80208a00:	d9002c17 	ldw	r4,176(sp)
80208a04:	d9801e04 	addi	r6,sp,120
80208a08:	b80b883a 	mov	r5,r23
80208a0c:	020ffe80 	call	8020ffe8 <__sprint_r>
80208a10:	103c471e 	bne	r2,zero,80207b30 <__reset+0xfa1e7b30>
80208a14:	d8c02017 	ldw	r3,128(sp)
80208a18:	df002787 	ldb	fp,158(sp)
80208a1c:	da000404 	addi	r8,sp,16
80208a20:	003d5606 	br	80207f7c <__reset+0xfa1e7f7c>
80208a24:	9080040c 	andi	r2,r18,16
80208a28:	10016126 	beq	r2,zero,80208fb0 <___vfprintf_internal_r+0x1888>
80208a2c:	d8802d17 	ldw	r2,180(sp)
80208a30:	14c00017 	ldw	r19,0(r2)
80208a34:	10800104 	addi	r2,r2,4
80208a38:	d8802d15 	stw	r2,180(sp)
80208a3c:	982dd7fa 	srai	r22,r19,31
80208a40:	b005883a 	mov	r2,r22
80208a44:	003c8206 	br	80207c50 <__reset+0xfa1e7c50>
80208a48:	9080040c 	andi	r2,r18,16
80208a4c:	10003526 	beq	r2,zero,80208b24 <___vfprintf_internal_r+0x13fc>
80208a50:	d9402d17 	ldw	r5,180(sp)
80208a54:	d8c02917 	ldw	r3,164(sp)
80208a58:	d8002785 	stb	zero,158(sp)
80208a5c:	28800104 	addi	r2,r5,4
80208a60:	2cc00017 	ldw	r19,0(r5)
80208a64:	002d883a 	mov	r22,zero
80208a68:	18003716 	blt	r3,zero,80208b48 <___vfprintf_internal_r+0x1420>
80208a6c:	00ffdfc4 	movi	r3,-129
80208a70:	d8802d15 	stw	r2,180(sp)
80208a74:	90e4703a 	and	r18,r18,r3
80208a78:	0039883a 	mov	fp,zero
80208a7c:	983df326 	beq	r19,zero,8020824c <__reset+0xfa1e824c>
80208a80:	00800244 	movi	r2,9
80208a84:	14fc7b36 	bltu	r2,r19,80207c74 <__reset+0xfa1e7c74>
80208a88:	d8c02817 	ldw	r3,160(sp)
80208a8c:	dc001dc4 	addi	r16,sp,119
80208a90:	9cc00c04 	addi	r19,r19,48
80208a94:	1c07c83a 	sub	r3,r3,r16
80208a98:	dcc01dc5 	stb	r19,119(sp)
80208a9c:	d8c02e15 	stw	r3,184(sp)
80208aa0:	003ce806 	br	80207e44 <__reset+0xfa1e7e44>
80208aa4:	d8803317 	ldw	r2,204(sp)
80208aa8:	143fffc4 	addi	r16,r2,-1
80208aac:	043f4d0e 	bge	zero,r16,802087e4 <__reset+0xfa1e87e4>
80208ab0:	07000404 	movi	fp,16
80208ab4:	e400810e 	bge	fp,r16,80208cbc <___vfprintf_internal_r+0x1594>
80208ab8:	016008b4 	movhi	r5,32802
80208abc:	296ccf84 	addi	r5,r5,-19650
80208ac0:	d9402b15 	stw	r5,172(sp)
80208ac4:	01c001c4 	movi	r7,7
80208ac8:	dcc02c17 	ldw	r19,176(sp)
80208acc:	00000306 	br	80208adc <___vfprintf_internal_r+0x13b4>
80208ad0:	b5800204 	addi	r22,r22,8
80208ad4:	843ffc04 	addi	r16,r16,-16
80208ad8:	e4007b0e 	bge	fp,r16,80208cc8 <___vfprintf_internal_r+0x15a0>
80208adc:	18c00404 	addi	r3,r3,16
80208ae0:	8c400044 	addi	r17,r17,1
80208ae4:	b5000015 	stw	r20,0(r22)
80208ae8:	b7000115 	stw	fp,4(r22)
80208aec:	d8c02015 	stw	r3,128(sp)
80208af0:	dc401f15 	stw	r17,124(sp)
80208af4:	3c7ff60e 	bge	r7,r17,80208ad0 <__reset+0xfa1e8ad0>
80208af8:	d9801e04 	addi	r6,sp,120
80208afc:	b80b883a 	mov	r5,r23
80208b00:	9809883a 	mov	r4,r19
80208b04:	d9c03c15 	stw	r7,240(sp)
80208b08:	020ffe80 	call	8020ffe8 <__sprint_r>
80208b0c:	d9c03c17 	ldw	r7,240(sp)
80208b10:	103c071e 	bne	r2,zero,80207b30 <__reset+0xfa1e7b30>
80208b14:	d8c02017 	ldw	r3,128(sp)
80208b18:	dc401f17 	ldw	r17,124(sp)
80208b1c:	dd800404 	addi	r22,sp,16
80208b20:	003fec06 	br	80208ad4 <__reset+0xfa1e8ad4>
80208b24:	9080100c 	andi	r2,r18,64
80208b28:	d8002785 	stb	zero,158(sp)
80208b2c:	10010e26 	beq	r2,zero,80208f68 <___vfprintf_internal_r+0x1840>
80208b30:	d9002d17 	ldw	r4,180(sp)
80208b34:	d9402917 	ldw	r5,164(sp)
80208b38:	002d883a 	mov	r22,zero
80208b3c:	20800104 	addi	r2,r4,4
80208b40:	24c0000b 	ldhu	r19,0(r4)
80208b44:	283fc90e 	bge	r5,zero,80208a6c <__reset+0xfa1e8a6c>
80208b48:	d8802d15 	stw	r2,180(sp)
80208b4c:	0039883a 	mov	fp,zero
80208b50:	9d84b03a 	or	r2,r19,r22
80208b54:	103c461e 	bne	r2,zero,80207c70 <__reset+0xfa1e7c70>
80208b58:	00800044 	movi	r2,1
80208b5c:	003e6c06 	br	80208510 <__reset+0xfa1e8510>
80208b60:	d9002c17 	ldw	r4,176(sp)
80208b64:	d9801e04 	addi	r6,sp,120
80208b68:	b80b883a 	mov	r5,r23
80208b6c:	020ffe80 	call	8020ffe8 <__sprint_r>
80208b70:	103bef1e 	bne	r2,zero,80207b30 <__reset+0xfa1e7b30>
80208b74:	d8c02017 	ldw	r3,128(sp)
80208b78:	da000404 	addi	r8,sp,16
80208b7c:	d9003217 	ldw	r4,200(sp)
80208b80:	d8802617 	ldw	r2,152(sp)
80208b84:	d9403317 	ldw	r5,204(sp)
80208b88:	8123883a 	add	r17,r16,r4
80208b8c:	11400216 	blt	r2,r5,80208b98 <___vfprintf_internal_r+0x1470>
80208b90:	9100004c 	andi	r4,r18,1
80208b94:	20000d26 	beq	r4,zero,80208bcc <___vfprintf_internal_r+0x14a4>
80208b98:	d9003717 	ldw	r4,220(sp)
80208b9c:	d9403417 	ldw	r5,208(sp)
80208ba0:	1907883a 	add	r3,r3,r4
80208ba4:	d9001f17 	ldw	r4,124(sp)
80208ba8:	41400015 	stw	r5,0(r8)
80208bac:	d9403717 	ldw	r5,220(sp)
80208bb0:	21000044 	addi	r4,r4,1
80208bb4:	d8c02015 	stw	r3,128(sp)
80208bb8:	41400115 	stw	r5,4(r8)
80208bbc:	d9001f15 	stw	r4,124(sp)
80208bc0:	014001c4 	movi	r5,7
80208bc4:	2901e816 	blt	r5,r4,80209368 <___vfprintf_internal_r+0x1c40>
80208bc8:	42000204 	addi	r8,r8,8
80208bcc:	d9003317 	ldw	r4,204(sp)
80208bd0:	8121883a 	add	r16,r16,r4
80208bd4:	2085c83a 	sub	r2,r4,r2
80208bd8:	8461c83a 	sub	r16,r16,r17
80208bdc:	1400010e 	bge	r2,r16,80208be4 <___vfprintf_internal_r+0x14bc>
80208be0:	1021883a 	mov	r16,r2
80208be4:	04000a0e 	bge	zero,r16,80208c10 <___vfprintf_internal_r+0x14e8>
80208be8:	d9001f17 	ldw	r4,124(sp)
80208bec:	1c07883a 	add	r3,r3,r16
80208bf0:	44400015 	stw	r17,0(r8)
80208bf4:	21000044 	addi	r4,r4,1
80208bf8:	44000115 	stw	r16,4(r8)
80208bfc:	d8c02015 	stw	r3,128(sp)
80208c00:	d9001f15 	stw	r4,124(sp)
80208c04:	014001c4 	movi	r5,7
80208c08:	2901fb16 	blt	r5,r4,802093f8 <___vfprintf_internal_r+0x1cd0>
80208c0c:	42000204 	addi	r8,r8,8
80208c10:	8001f716 	blt	r16,zero,802093f0 <___vfprintf_internal_r+0x1cc8>
80208c14:	1421c83a 	sub	r16,r2,r16
80208c18:	043d380e 	bge	zero,r16,802080fc <__reset+0xfa1e80fc>
80208c1c:	04400404 	movi	r17,16
80208c20:	d8801f17 	ldw	r2,124(sp)
80208c24:	8c3efb0e 	bge	r17,r16,80208814 <__reset+0xfa1e8814>
80208c28:	016008b4 	movhi	r5,32802
80208c2c:	296ccf84 	addi	r5,r5,-19650
80208c30:	d9402b15 	stw	r5,172(sp)
80208c34:	058001c4 	movi	r22,7
80208c38:	dcc02c17 	ldw	r19,176(sp)
80208c3c:	00000306 	br	80208c4c <___vfprintf_internal_r+0x1524>
80208c40:	42000204 	addi	r8,r8,8
80208c44:	843ffc04 	addi	r16,r16,-16
80208c48:	8c3ef50e 	bge	r17,r16,80208820 <__reset+0xfa1e8820>
80208c4c:	18c00404 	addi	r3,r3,16
80208c50:	10800044 	addi	r2,r2,1
80208c54:	45000015 	stw	r20,0(r8)
80208c58:	44400115 	stw	r17,4(r8)
80208c5c:	d8c02015 	stw	r3,128(sp)
80208c60:	d8801f15 	stw	r2,124(sp)
80208c64:	b0bff60e 	bge	r22,r2,80208c40 <__reset+0xfa1e8c40>
80208c68:	d9801e04 	addi	r6,sp,120
80208c6c:	b80b883a 	mov	r5,r23
80208c70:	9809883a 	mov	r4,r19
80208c74:	020ffe80 	call	8020ffe8 <__sprint_r>
80208c78:	103bad1e 	bne	r2,zero,80207b30 <__reset+0xfa1e7b30>
80208c7c:	d8c02017 	ldw	r3,128(sp)
80208c80:	d8801f17 	ldw	r2,124(sp)
80208c84:	da000404 	addi	r8,sp,16
80208c88:	003fee06 	br	80208c44 <__reset+0xfa1e8c44>
80208c8c:	9088703a 	and	r4,r18,r2
80208c90:	203eab1e 	bne	r4,zero,80208740 <__reset+0xfa1e8740>
80208c94:	dc401f17 	ldw	r17,124(sp)
80208c98:	40800115 	stw	r2,4(r8)
80208c9c:	44000015 	stw	r16,0(r8)
80208ca0:	8c400044 	addi	r17,r17,1
80208ca4:	d8c02015 	stw	r3,128(sp)
80208ca8:	dc401f15 	stw	r17,124(sp)
80208cac:	008001c4 	movi	r2,7
80208cb0:	14400e16 	blt	r2,r17,80208cec <___vfprintf_internal_r+0x15c4>
80208cb4:	45800204 	addi	r22,r8,8
80208cb8:	003eca06 	br	802087e4 <__reset+0xfa1e87e4>
80208cbc:	012008b4 	movhi	r4,32802
80208cc0:	212ccf84 	addi	r4,r4,-19650
80208cc4:	d9002b15 	stw	r4,172(sp)
80208cc8:	d8802b17 	ldw	r2,172(sp)
80208ccc:	1c07883a 	add	r3,r3,r16
80208cd0:	8c400044 	addi	r17,r17,1
80208cd4:	b0800015 	stw	r2,0(r22)
80208cd8:	b4000115 	stw	r16,4(r22)
80208cdc:	d8c02015 	stw	r3,128(sp)
80208ce0:	dc401f15 	stw	r17,124(sp)
80208ce4:	008001c4 	movi	r2,7
80208ce8:	147ebd0e 	bge	r2,r17,802087e0 <__reset+0xfa1e87e0>
80208cec:	d9002c17 	ldw	r4,176(sp)
80208cf0:	d9801e04 	addi	r6,sp,120
80208cf4:	b80b883a 	mov	r5,r23
80208cf8:	020ffe80 	call	8020ffe8 <__sprint_r>
80208cfc:	103b8c1e 	bne	r2,zero,80207b30 <__reset+0xfa1e7b30>
80208d00:	d8c02017 	ldw	r3,128(sp)
80208d04:	dc401f17 	ldw	r17,124(sp)
80208d08:	dd800404 	addi	r22,sp,16
80208d0c:	003eb506 	br	802087e4 <__reset+0xfa1e87e4>
80208d10:	d9002c17 	ldw	r4,176(sp)
80208d14:	d9801e04 	addi	r6,sp,120
80208d18:	b80b883a 	mov	r5,r23
80208d1c:	020ffe80 	call	8020ffe8 <__sprint_r>
80208d20:	103b831e 	bne	r2,zero,80207b30 <__reset+0xfa1e7b30>
80208d24:	d8c02017 	ldw	r3,128(sp)
80208d28:	dc401f17 	ldw	r17,124(sp)
80208d2c:	da000404 	addi	r8,sp,16
80208d30:	003e8d06 	br	80208768 <__reset+0xfa1e8768>
80208d34:	d9002c17 	ldw	r4,176(sp)
80208d38:	d9801e04 	addi	r6,sp,120
80208d3c:	b80b883a 	mov	r5,r23
80208d40:	020ffe80 	call	8020ffe8 <__sprint_r>
80208d44:	103b7a1e 	bne	r2,zero,80207b30 <__reset+0xfa1e7b30>
80208d48:	d8c02017 	ldw	r3,128(sp)
80208d4c:	dc401f17 	ldw	r17,124(sp)
80208d50:	dd800404 	addi	r22,sp,16
80208d54:	003e8f06 	br	80208794 <__reset+0xfa1e8794>
80208d58:	0027883a 	mov	r19,zero
80208d5c:	003f4a06 	br	80208a88 <__reset+0xfa1e8a88>
80208d60:	d9002c17 	ldw	r4,176(sp)
80208d64:	d9801e04 	addi	r6,sp,120
80208d68:	b80b883a 	mov	r5,r23
80208d6c:	020ffe80 	call	8020ffe8 <__sprint_r>
80208d70:	103b6f1e 	bne	r2,zero,80207b30 <__reset+0xfa1e7b30>
80208d74:	d8c02017 	ldw	r3,128(sp)
80208d78:	da000404 	addi	r8,sp,16
80208d7c:	003c9d06 	br	80207ff4 <__reset+0xfa1e7ff4>
80208d80:	04e7c83a 	sub	r19,zero,r19
80208d84:	9804c03a 	cmpne	r2,r19,zero
80208d88:	05adc83a 	sub	r22,zero,r22
80208d8c:	b0adc83a 	sub	r22,r22,r2
80208d90:	d8802917 	ldw	r2,164(sp)
80208d94:	07000b44 	movi	fp,45
80208d98:	df002785 	stb	fp,158(sp)
80208d9c:	10017b16 	blt	r2,zero,8020938c <___vfprintf_internal_r+0x1c64>
80208da0:	00bfdfc4 	movi	r2,-129
80208da4:	90a4703a 	and	r18,r18,r2
80208da8:	003bb106 	br	80207c70 <__reset+0xfa1e7c70>
80208dac:	d9003617 	ldw	r4,216(sp)
80208db0:	d9403817 	ldw	r5,224(sp)
80208db4:	da003d15 	stw	r8,244(sp)
80208db8:	020e8000 	call	8020e800 <__fpclassifyd>
80208dbc:	da003d17 	ldw	r8,244(sp)
80208dc0:	1000f026 	beq	r2,zero,80209184 <___vfprintf_internal_r+0x1a5c>
80208dc4:	d9002917 	ldw	r4,164(sp)
80208dc8:	05bff7c4 	movi	r22,-33
80208dcc:	00bfffc4 	movi	r2,-1
80208dd0:	8dac703a 	and	r22,r17,r22
80208dd4:	20820026 	beq	r4,r2,802095d8 <___vfprintf_internal_r+0x1eb0>
80208dd8:	008011c4 	movi	r2,71
80208ddc:	b081f726 	beq	r22,r2,802095bc <___vfprintf_internal_r+0x1e94>
80208de0:	d9003817 	ldw	r4,224(sp)
80208de4:	90c04014 	ori	r3,r18,256
80208de8:	d8c02b15 	stw	r3,172(sp)
80208dec:	20021516 	blt	r4,zero,80209644 <___vfprintf_internal_r+0x1f1c>
80208df0:	dcc03817 	ldw	r19,224(sp)
80208df4:	d8002a05 	stb	zero,168(sp)
80208df8:	00801984 	movi	r2,102
80208dfc:	8881f926 	beq	r17,r2,802095e4 <___vfprintf_internal_r+0x1ebc>
80208e00:	00801184 	movi	r2,70
80208e04:	88821c26 	beq	r17,r2,80209678 <___vfprintf_internal_r+0x1f50>
80208e08:	00801144 	movi	r2,69
80208e0c:	b081ef26 	beq	r22,r2,802095cc <___vfprintf_internal_r+0x1ea4>
80208e10:	d8c02917 	ldw	r3,164(sp)
80208e14:	d8802104 	addi	r2,sp,132
80208e18:	d8800315 	stw	r2,12(sp)
80208e1c:	d9403617 	ldw	r5,216(sp)
80208e20:	d8802504 	addi	r2,sp,148
80208e24:	d9002c17 	ldw	r4,176(sp)
80208e28:	d8800215 	stw	r2,8(sp)
80208e2c:	d8802604 	addi	r2,sp,152
80208e30:	d8c00015 	stw	r3,0(sp)
80208e34:	d8800115 	stw	r2,4(sp)
80208e38:	01c00084 	movi	r7,2
80208e3c:	980d883a 	mov	r6,r19
80208e40:	d8c03c15 	stw	r3,240(sp)
80208e44:	da003d15 	stw	r8,244(sp)
80208e48:	0209d4c0 	call	80209d4c <_dtoa_r>
80208e4c:	1021883a 	mov	r16,r2
80208e50:	008019c4 	movi	r2,103
80208e54:	d8c03c17 	ldw	r3,240(sp)
80208e58:	da003d17 	ldw	r8,244(sp)
80208e5c:	88817126 	beq	r17,r2,80209424 <___vfprintf_internal_r+0x1cfc>
80208e60:	008011c4 	movi	r2,71
80208e64:	88829226 	beq	r17,r2,802098b0 <___vfprintf_internal_r+0x2188>
80208e68:	80f9883a 	add	fp,r16,r3
80208e6c:	d9003617 	ldw	r4,216(sp)
80208e70:	000d883a 	mov	r6,zero
80208e74:	000f883a 	mov	r7,zero
80208e78:	980b883a 	mov	r5,r19
80208e7c:	da003d15 	stw	r8,244(sp)
80208e80:	0213c600 	call	80213c60 <__eqdf2>
80208e84:	da003d17 	ldw	r8,244(sp)
80208e88:	10018d26 	beq	r2,zero,802094c0 <___vfprintf_internal_r+0x1d98>
80208e8c:	d8802117 	ldw	r2,132(sp)
80208e90:	1700062e 	bgeu	r2,fp,80208eac <___vfprintf_internal_r+0x1784>
80208e94:	01000c04 	movi	r4,48
80208e98:	10c00044 	addi	r3,r2,1
80208e9c:	d8c02115 	stw	r3,132(sp)
80208ea0:	11000005 	stb	r4,0(r2)
80208ea4:	d8802117 	ldw	r2,132(sp)
80208ea8:	173ffb36 	bltu	r2,fp,80208e98 <__reset+0xfa1e8e98>
80208eac:	1405c83a 	sub	r2,r2,r16
80208eb0:	d8803315 	stw	r2,204(sp)
80208eb4:	008011c4 	movi	r2,71
80208eb8:	b0817626 	beq	r22,r2,80209494 <___vfprintf_internal_r+0x1d6c>
80208ebc:	00801944 	movi	r2,101
80208ec0:	1442810e 	bge	r2,r17,802098c8 <___vfprintf_internal_r+0x21a0>
80208ec4:	d8c02617 	ldw	r3,152(sp)
80208ec8:	00801984 	movi	r2,102
80208ecc:	d8c03215 	stw	r3,200(sp)
80208ed0:	8881fe26 	beq	r17,r2,802096cc <___vfprintf_internal_r+0x1fa4>
80208ed4:	d8c03217 	ldw	r3,200(sp)
80208ed8:	d9003317 	ldw	r4,204(sp)
80208edc:	1901dd16 	blt	r3,r4,80209654 <___vfprintf_internal_r+0x1f2c>
80208ee0:	9480004c 	andi	r18,r18,1
80208ee4:	90022b1e 	bne	r18,zero,80209794 <___vfprintf_internal_r+0x206c>
80208ee8:	1805883a 	mov	r2,r3
80208eec:	18028016 	blt	r3,zero,802098f0 <___vfprintf_internal_r+0x21c8>
80208ef0:	d8c03217 	ldw	r3,200(sp)
80208ef4:	044019c4 	movi	r17,103
80208ef8:	d8c02e15 	stw	r3,184(sp)
80208efc:	df002a07 	ldb	fp,168(sp)
80208f00:	e001531e 	bne	fp,zero,80209450 <___vfprintf_internal_r+0x1d28>
80208f04:	df002783 	ldbu	fp,158(sp)
80208f08:	d8802a15 	stw	r2,168(sp)
80208f0c:	dc802b17 	ldw	r18,172(sp)
80208f10:	d8002915 	stw	zero,164(sp)
80208f14:	003bd106 	br	80207e5c <__reset+0xfa1e7e5c>
80208f18:	d8802d17 	ldw	r2,180(sp)
80208f1c:	d8c02d17 	ldw	r3,180(sp)
80208f20:	d9002d17 	ldw	r4,180(sp)
80208f24:	10800017 	ldw	r2,0(r2)
80208f28:	18c00117 	ldw	r3,4(r3)
80208f2c:	21000204 	addi	r4,r4,8
80208f30:	d8803615 	stw	r2,216(sp)
80208f34:	d8c03815 	stw	r3,224(sp)
80208f38:	d9002d15 	stw	r4,180(sp)
80208f3c:	003b7506 	br	80207d14 <__reset+0xfa1e7d14>
80208f40:	ac400007 	ldb	r17,0(r21)
80208f44:	003a5906 	br	802078ac <__reset+0xfa1e78ac>
80208f48:	9080100c 	andi	r2,r18,64
80208f4c:	1000a826 	beq	r2,zero,802091f0 <___vfprintf_internal_r+0x1ac8>
80208f50:	d9002d17 	ldw	r4,180(sp)
80208f54:	002d883a 	mov	r22,zero
80208f58:	24c0000b 	ldhu	r19,0(r4)
80208f5c:	21000104 	addi	r4,r4,4
80208f60:	d9002d15 	stw	r4,180(sp)
80208f64:	003ccb06 	br	80208294 <__reset+0xfa1e8294>
80208f68:	d8c02d17 	ldw	r3,180(sp)
80208f6c:	d9002917 	ldw	r4,164(sp)
80208f70:	002d883a 	mov	r22,zero
80208f74:	18800104 	addi	r2,r3,4
80208f78:	1cc00017 	ldw	r19,0(r3)
80208f7c:	203ebb0e 	bge	r4,zero,80208a6c <__reset+0xfa1e8a6c>
80208f80:	003ef106 	br	80208b48 <__reset+0xfa1e8b48>
80208f84:	9080040c 	andi	r2,r18,16
80208f88:	1000921e 	bne	r2,zero,802091d4 <___vfprintf_internal_r+0x1aac>
80208f8c:	9480100c 	andi	r18,r18,64
80208f90:	90013926 	beq	r18,zero,80209478 <___vfprintf_internal_r+0x1d50>
80208f94:	d9002d17 	ldw	r4,180(sp)
80208f98:	d9402f17 	ldw	r5,188(sp)
80208f9c:	20800017 	ldw	r2,0(r4)
80208fa0:	21000104 	addi	r4,r4,4
80208fa4:	d9002d15 	stw	r4,180(sp)
80208fa8:	1140000d 	sth	r5,0(r2)
80208fac:	003a1606 	br	80207808 <__reset+0xfa1e7808>
80208fb0:	9080100c 	andi	r2,r18,64
80208fb4:	10008026 	beq	r2,zero,802091b8 <___vfprintf_internal_r+0x1a90>
80208fb8:	d8c02d17 	ldw	r3,180(sp)
80208fbc:	1cc0000f 	ldh	r19,0(r3)
80208fc0:	18c00104 	addi	r3,r3,4
80208fc4:	d8c02d15 	stw	r3,180(sp)
80208fc8:	982dd7fa 	srai	r22,r19,31
80208fcc:	b005883a 	mov	r2,r22
80208fd0:	003b1f06 	br	80207c50 <__reset+0xfa1e7c50>
80208fd4:	9080100c 	andi	r2,r18,64
80208fd8:	d8002785 	stb	zero,158(sp)
80208fdc:	10008a1e 	bne	r2,zero,80209208 <___vfprintf_internal_r+0x1ae0>
80208fe0:	d9402d17 	ldw	r5,180(sp)
80208fe4:	d8c02917 	ldw	r3,164(sp)
80208fe8:	002d883a 	mov	r22,zero
80208fec:	28800104 	addi	r2,r5,4
80208ff0:	2cc00017 	ldw	r19,0(r5)
80208ff4:	183e4b0e 	bge	r3,zero,80208924 <__reset+0xfa1e8924>
80208ff8:	9d86b03a 	or	r3,r19,r22
80208ffc:	d8802d15 	stw	r2,180(sp)
80209000:	183e4c1e 	bne	r3,zero,80208934 <__reset+0xfa1e8934>
80209004:	0039883a 	mov	fp,zero
80209008:	0005883a 	mov	r2,zero
8020900c:	003d4006 	br	80208510 <__reset+0xfa1e8510>
80209010:	016008b4 	movhi	r5,32802
80209014:	296ccf84 	addi	r5,r5,-19650
80209018:	d9402b15 	stw	r5,172(sp)
8020901c:	d9402b17 	ldw	r5,172(sp)
80209020:	1c47883a 	add	r3,r3,r17
80209024:	10800044 	addi	r2,r2,1
80209028:	41400015 	stw	r5,0(r8)
8020902c:	44400115 	stw	r17,4(r8)
80209030:	d8c02015 	stw	r3,128(sp)
80209034:	d8801f15 	stw	r2,124(sp)
80209038:	010001c4 	movi	r4,7
8020903c:	20bec816 	blt	r4,r2,80208b60 <__reset+0xfa1e8b60>
80209040:	42000204 	addi	r8,r8,8
80209044:	003ecd06 	br	80208b7c <__reset+0xfa1e8b7c>
80209048:	d9002917 	ldw	r4,164(sp)
8020904c:	d8002785 	stb	zero,158(sp)
80209050:	203d2d16 	blt	r4,zero,80208508 <__reset+0xfa1e8508>
80209054:	00bfdfc4 	movi	r2,-129
80209058:	90a4703a 	and	r18,r18,r2
8020905c:	003a9106 	br	80207aa4 <__reset+0xfa1e7aa4>
80209060:	012008b4 	movhi	r4,32802
80209064:	212ccf84 	addi	r4,r4,-19650
80209068:	d9002b15 	stw	r4,172(sp)
8020906c:	003c0c06 	br	802080a0 <__reset+0xfa1e80a0>
80209070:	d9002c17 	ldw	r4,176(sp)
80209074:	d9801e04 	addi	r6,sp,120
80209078:	b80b883a 	mov	r5,r23
8020907c:	020ffe80 	call	8020ffe8 <__sprint_r>
80209080:	103aab1e 	bne	r2,zero,80207b30 <__reset+0xfa1e7b30>
80209084:	d8c02017 	ldw	r3,128(sp)
80209088:	da000404 	addi	r8,sp,16
8020908c:	003d4106 	br	80208594 <__reset+0xfa1e8594>
80209090:	d8801f17 	ldw	r2,124(sp)
80209094:	016008b4 	movhi	r5,32802
80209098:	01000044 	movi	r4,1
8020909c:	18c00044 	addi	r3,r3,1
802090a0:	10800044 	addi	r2,r2,1
802090a4:	296cc704 	addi	r5,r5,-19684
802090a8:	41000115 	stw	r4,4(r8)
802090ac:	41400015 	stw	r5,0(r8)
802090b0:	d8c02015 	stw	r3,128(sp)
802090b4:	d8801f15 	stw	r2,124(sp)
802090b8:	010001c4 	movi	r4,7
802090bc:	20805c16 	blt	r4,r2,80209230 <___vfprintf_internal_r+0x1b08>
802090c0:	42000204 	addi	r8,r8,8
802090c4:	8800041e 	bne	r17,zero,802090d8 <___vfprintf_internal_r+0x19b0>
802090c8:	d8803317 	ldw	r2,204(sp)
802090cc:	1000021e 	bne	r2,zero,802090d8 <___vfprintf_internal_r+0x19b0>
802090d0:	9080004c 	andi	r2,r18,1
802090d4:	103c0926 	beq	r2,zero,802080fc <__reset+0xfa1e80fc>
802090d8:	d9003717 	ldw	r4,220(sp)
802090dc:	d8801f17 	ldw	r2,124(sp)
802090e0:	d9403417 	ldw	r5,208(sp)
802090e4:	20c7883a 	add	r3,r4,r3
802090e8:	10800044 	addi	r2,r2,1
802090ec:	41000115 	stw	r4,4(r8)
802090f0:	41400015 	stw	r5,0(r8)
802090f4:	d8c02015 	stw	r3,128(sp)
802090f8:	d8801f15 	stw	r2,124(sp)
802090fc:	010001c4 	movi	r4,7
80209100:	20812116 	blt	r4,r2,80209588 <___vfprintf_internal_r+0x1e60>
80209104:	42000204 	addi	r8,r8,8
80209108:	0463c83a 	sub	r17,zero,r17
8020910c:	0440730e 	bge	zero,r17,802092dc <___vfprintf_internal_r+0x1bb4>
80209110:	05800404 	movi	r22,16
80209114:	b440860e 	bge	r22,r17,80209330 <___vfprintf_internal_r+0x1c08>
80209118:	016008b4 	movhi	r5,32802
8020911c:	296ccf84 	addi	r5,r5,-19650
80209120:	d9402b15 	stw	r5,172(sp)
80209124:	070001c4 	movi	fp,7
80209128:	dcc02c17 	ldw	r19,176(sp)
8020912c:	00000306 	br	8020913c <___vfprintf_internal_r+0x1a14>
80209130:	42000204 	addi	r8,r8,8
80209134:	8c7ffc04 	addi	r17,r17,-16
80209138:	b440800e 	bge	r22,r17,8020933c <___vfprintf_internal_r+0x1c14>
8020913c:	18c00404 	addi	r3,r3,16
80209140:	10800044 	addi	r2,r2,1
80209144:	45000015 	stw	r20,0(r8)
80209148:	45800115 	stw	r22,4(r8)
8020914c:	d8c02015 	stw	r3,128(sp)
80209150:	d8801f15 	stw	r2,124(sp)
80209154:	e0bff60e 	bge	fp,r2,80209130 <__reset+0xfa1e9130>
80209158:	d9801e04 	addi	r6,sp,120
8020915c:	b80b883a 	mov	r5,r23
80209160:	9809883a 	mov	r4,r19
80209164:	020ffe80 	call	8020ffe8 <__sprint_r>
80209168:	103a711e 	bne	r2,zero,80207b30 <__reset+0xfa1e7b30>
8020916c:	d8c02017 	ldw	r3,128(sp)
80209170:	d8801f17 	ldw	r2,124(sp)
80209174:	da000404 	addi	r8,sp,16
80209178:	003fee06 	br	80209134 <__reset+0xfa1e9134>
8020917c:	00bfffc4 	movi	r2,-1
80209180:	003a6f06 	br	80207b40 <__reset+0xfa1e7b40>
80209184:	008011c4 	movi	r2,71
80209188:	1440b816 	blt	r2,r17,8020946c <___vfprintf_internal_r+0x1d44>
8020918c:	042008b4 	movhi	r16,32802
80209190:	842cb904 	addi	r16,r16,-19740
80209194:	00c000c4 	movi	r3,3
80209198:	00bfdfc4 	movi	r2,-129
8020919c:	d8c02a15 	stw	r3,168(sp)
802091a0:	90a4703a 	and	r18,r18,r2
802091a4:	df002783 	ldbu	fp,158(sp)
802091a8:	d8c02e15 	stw	r3,184(sp)
802091ac:	d8002915 	stw	zero,164(sp)
802091b0:	d8003215 	stw	zero,200(sp)
802091b4:	003b2906 	br	80207e5c <__reset+0xfa1e7e5c>
802091b8:	d9002d17 	ldw	r4,180(sp)
802091bc:	24c00017 	ldw	r19,0(r4)
802091c0:	21000104 	addi	r4,r4,4
802091c4:	d9002d15 	stw	r4,180(sp)
802091c8:	982dd7fa 	srai	r22,r19,31
802091cc:	b005883a 	mov	r2,r22
802091d0:	003a9f06 	br	80207c50 <__reset+0xfa1e7c50>
802091d4:	d9402d17 	ldw	r5,180(sp)
802091d8:	d8c02f17 	ldw	r3,188(sp)
802091dc:	28800017 	ldw	r2,0(r5)
802091e0:	29400104 	addi	r5,r5,4
802091e4:	d9402d15 	stw	r5,180(sp)
802091e8:	10c00015 	stw	r3,0(r2)
802091ec:	00398606 	br	80207808 <__reset+0xfa1e7808>
802091f0:	d9402d17 	ldw	r5,180(sp)
802091f4:	002d883a 	mov	r22,zero
802091f8:	2cc00017 	ldw	r19,0(r5)
802091fc:	29400104 	addi	r5,r5,4
80209200:	d9402d15 	stw	r5,180(sp)
80209204:	003c2306 	br	80208294 <__reset+0xfa1e8294>
80209208:	d8c02d17 	ldw	r3,180(sp)
8020920c:	d9002917 	ldw	r4,164(sp)
80209210:	002d883a 	mov	r22,zero
80209214:	18800104 	addi	r2,r3,4
80209218:	1cc0000b 	ldhu	r19,0(r3)
8020921c:	203dc10e 	bge	r4,zero,80208924 <__reset+0xfa1e8924>
80209220:	003f7506 	br	80208ff8 <__reset+0xfa1e8ff8>
80209224:	042008b4 	movhi	r16,32802
80209228:	842cb704 	addi	r16,r16,-19748
8020922c:	003acc06 	br	80207d60 <__reset+0xfa1e7d60>
80209230:	d9002c17 	ldw	r4,176(sp)
80209234:	d9801e04 	addi	r6,sp,120
80209238:	b80b883a 	mov	r5,r23
8020923c:	020ffe80 	call	8020ffe8 <__sprint_r>
80209240:	103a3b1e 	bne	r2,zero,80207b30 <__reset+0xfa1e7b30>
80209244:	dc402617 	ldw	r17,152(sp)
80209248:	d8c02017 	ldw	r3,128(sp)
8020924c:	da000404 	addi	r8,sp,16
80209250:	003f9c06 	br	802090c4 <__reset+0xfa1e90c4>
80209254:	ac400043 	ldbu	r17,1(r21)
80209258:	94800814 	ori	r18,r18,32
8020925c:	ad400044 	addi	r21,r21,1
80209260:	8c403fcc 	andi	r17,r17,255
80209264:	8c40201c 	xori	r17,r17,128
80209268:	8c7fe004 	addi	r17,r17,-128
8020926c:	00398f06 	br	802078ac <__reset+0xfa1e78ac>
80209270:	d8c02d15 	stw	r3,180(sp)
80209274:	0039883a 	mov	fp,zero
80209278:	003e3506 	br	80208b50 <__reset+0xfa1e8b50>
8020927c:	d9002c17 	ldw	r4,176(sp)
80209280:	d9801e04 	addi	r6,sp,120
80209284:	b80b883a 	mov	r5,r23
80209288:	020ffe80 	call	8020ffe8 <__sprint_r>
8020928c:	103a281e 	bne	r2,zero,80207b30 <__reset+0xfa1e7b30>
80209290:	d8c02017 	ldw	r3,128(sp)
80209294:	da000404 	addi	r8,sp,16
80209298:	003cd006 	br	802085dc <__reset+0xfa1e85dc>
8020929c:	8009883a 	mov	r4,r16
802092a0:	da003d15 	stw	r8,244(sp)
802092a4:	02054b80 	call	802054b8 <strlen>
802092a8:	d8802e15 	stw	r2,184(sp)
802092ac:	da003d17 	ldw	r8,244(sp)
802092b0:	103c340e 	bge	r2,zero,80208384 <__reset+0xfa1e8384>
802092b4:	0005883a 	mov	r2,zero
802092b8:	003c3206 	br	80208384 <__reset+0xfa1e8384>
802092bc:	d9002c17 	ldw	r4,176(sp)
802092c0:	d9801e04 	addi	r6,sp,120
802092c4:	b80b883a 	mov	r5,r23
802092c8:	020ffe80 	call	8020ffe8 <__sprint_r>
802092cc:	103a181e 	bne	r2,zero,80207b30 <__reset+0xfa1e7b30>
802092d0:	d8c02017 	ldw	r3,128(sp)
802092d4:	d8801f17 	ldw	r2,124(sp)
802092d8:	da000404 	addi	r8,sp,16
802092dc:	d9403317 	ldw	r5,204(sp)
802092e0:	10800044 	addi	r2,r2,1
802092e4:	44000015 	stw	r16,0(r8)
802092e8:	28c7883a 	add	r3,r5,r3
802092ec:	003b7d06 	br	802080e4 <__reset+0xfa1e80e4>
802092f0:	012008b4 	movhi	r4,32802
802092f4:	212cd384 	addi	r4,r4,-19634
802092f8:	d9003515 	stw	r4,212(sp)
802092fc:	003b1406 	br	80207f50 <__reset+0xfa1e7f50>
80209300:	013fffc4 	movi	r4,-1
80209304:	003a3506 	br	80207bdc <__reset+0xfa1e7bdc>
80209308:	0023883a 	mov	r17,zero
8020930c:	003d9d06 	br	80208984 <__reset+0xfa1e8984>
80209310:	d9002c17 	ldw	r4,176(sp)
80209314:	d9801e04 	addi	r6,sp,120
80209318:	b80b883a 	mov	r5,r23
8020931c:	020ffe80 	call	8020ffe8 <__sprint_r>
80209320:	103a031e 	bne	r2,zero,80207b30 <__reset+0xfa1e7b30>
80209324:	d8c02017 	ldw	r3,128(sp)
80209328:	da000404 	addi	r8,sp,16
8020932c:	003d9406 	br	80208980 <__reset+0xfa1e8980>
80209330:	012008b4 	movhi	r4,32802
80209334:	212ccf84 	addi	r4,r4,-19650
80209338:	d9002b15 	stw	r4,172(sp)
8020933c:	d9002b17 	ldw	r4,172(sp)
80209340:	1c47883a 	add	r3,r3,r17
80209344:	10800044 	addi	r2,r2,1
80209348:	41000015 	stw	r4,0(r8)
8020934c:	44400115 	stw	r17,4(r8)
80209350:	d8c02015 	stw	r3,128(sp)
80209354:	d8801f15 	stw	r2,124(sp)
80209358:	010001c4 	movi	r4,7
8020935c:	20bfd716 	blt	r4,r2,802092bc <__reset+0xfa1e92bc>
80209360:	42000204 	addi	r8,r8,8
80209364:	003fdd06 	br	802092dc <__reset+0xfa1e92dc>
80209368:	d9002c17 	ldw	r4,176(sp)
8020936c:	d9801e04 	addi	r6,sp,120
80209370:	b80b883a 	mov	r5,r23
80209374:	020ffe80 	call	8020ffe8 <__sprint_r>
80209378:	1039ed1e 	bne	r2,zero,80207b30 <__reset+0xfa1e7b30>
8020937c:	d8802617 	ldw	r2,152(sp)
80209380:	d8c02017 	ldw	r3,128(sp)
80209384:	da000404 	addi	r8,sp,16
80209388:	003e1006 	br	80208bcc <__reset+0xfa1e8bcc>
8020938c:	00800044 	movi	r2,1
80209390:	10803fcc 	andi	r2,r2,255
80209394:	00c00044 	movi	r3,1
80209398:	10fa3526 	beq	r2,r3,80207c70 <__reset+0xfa1e7c70>
8020939c:	00c00084 	movi	r3,2
802093a0:	10fbcb26 	beq	r2,r3,802082d0 <__reset+0xfa1e82d0>
802093a4:	003a8f06 	br	80207de4 <__reset+0xfa1e7de4>
802093a8:	012008b4 	movhi	r4,32802
802093ac:	212cd384 	addi	r4,r4,-19634
802093b0:	d9003515 	stw	r4,212(sp)
802093b4:	003b7606 	br	80208190 <__reset+0xfa1e8190>
802093b8:	d8802917 	ldw	r2,164(sp)
802093bc:	00c00184 	movi	r3,6
802093c0:	1880012e 	bgeu	r3,r2,802093c8 <___vfprintf_internal_r+0x1ca0>
802093c4:	1805883a 	mov	r2,r3
802093c8:	d8802e15 	stw	r2,184(sp)
802093cc:	1000ef16 	blt	r2,zero,8020978c <___vfprintf_internal_r+0x2064>
802093d0:	042008b4 	movhi	r16,32802
802093d4:	d8802a15 	stw	r2,168(sp)
802093d8:	dcc02d15 	stw	r19,180(sp)
802093dc:	d8002915 	stw	zero,164(sp)
802093e0:	d8003215 	stw	zero,200(sp)
802093e4:	842cc504 	addi	r16,r16,-19692
802093e8:	0039883a 	mov	fp,zero
802093ec:	003aa206 	br	80207e78 <__reset+0xfa1e7e78>
802093f0:	0021883a 	mov	r16,zero
802093f4:	003e0706 	br	80208c14 <__reset+0xfa1e8c14>
802093f8:	d9002c17 	ldw	r4,176(sp)
802093fc:	d9801e04 	addi	r6,sp,120
80209400:	b80b883a 	mov	r5,r23
80209404:	020ffe80 	call	8020ffe8 <__sprint_r>
80209408:	1039c91e 	bne	r2,zero,80207b30 <__reset+0xfa1e7b30>
8020940c:	d8802617 	ldw	r2,152(sp)
80209410:	d9403317 	ldw	r5,204(sp)
80209414:	d8c02017 	ldw	r3,128(sp)
80209418:	da000404 	addi	r8,sp,16
8020941c:	2885c83a 	sub	r2,r5,r2
80209420:	003dfb06 	br	80208c10 <__reset+0xfa1e8c10>
80209424:	9080004c 	andi	r2,r18,1
80209428:	103e8f1e 	bne	r2,zero,80208e68 <__reset+0xfa1e8e68>
8020942c:	d8802117 	ldw	r2,132(sp)
80209430:	003e9e06 	br	80208eac <__reset+0xfa1e8eac>
80209434:	1025883a 	mov	r18,r2
80209438:	0039883a 	mov	fp,zero
8020943c:	00800084 	movi	r2,2
80209440:	003fd306 	br	80209390 <__reset+0xfa1e9390>
80209444:	07000b44 	movi	fp,45
80209448:	df002785 	stb	fp,158(sp)
8020944c:	003a4006 	br	80207d50 <__reset+0xfa1e7d50>
80209450:	00c00b44 	movi	r3,45
80209454:	d8c02785 	stb	r3,158(sp)
80209458:	d8802a15 	stw	r2,168(sp)
8020945c:	dc802b17 	ldw	r18,172(sp)
80209460:	d8002915 	stw	zero,164(sp)
80209464:	07000b44 	movi	fp,45
80209468:	003a8006 	br	80207e6c <__reset+0xfa1e7e6c>
8020946c:	042008b4 	movhi	r16,32802
80209470:	842cba04 	addi	r16,r16,-19736
80209474:	003f4706 	br	80209194 <__reset+0xfa1e9194>
80209478:	d8c02d17 	ldw	r3,180(sp)
8020947c:	d9002f17 	ldw	r4,188(sp)
80209480:	18800017 	ldw	r2,0(r3)
80209484:	18c00104 	addi	r3,r3,4
80209488:	d8c02d15 	stw	r3,180(sp)
8020948c:	11000015 	stw	r4,0(r2)
80209490:	0038dd06 	br	80207808 <__reset+0xfa1e7808>
80209494:	dd802617 	ldw	r22,152(sp)
80209498:	00bfff44 	movi	r2,-3
8020949c:	b0801c16 	blt	r22,r2,80209510 <___vfprintf_internal_r+0x1de8>
802094a0:	d9402917 	ldw	r5,164(sp)
802094a4:	2d801a16 	blt	r5,r22,80209510 <___vfprintf_internal_r+0x1de8>
802094a8:	dd803215 	stw	r22,200(sp)
802094ac:	003e8906 	br	80208ed4 <__reset+0xfa1e8ed4>
802094b0:	012008b4 	movhi	r4,32802
802094b4:	212ccf84 	addi	r4,r4,-19650
802094b8:	d9002b15 	stw	r4,172(sp)
802094bc:	003c9106 	br	80208704 <__reset+0xfa1e8704>
802094c0:	e005883a 	mov	r2,fp
802094c4:	003e7906 	br	80208eac <__reset+0xfa1e8eac>
802094c8:	d9402917 	ldw	r5,164(sp)
802094cc:	df002783 	ldbu	fp,158(sp)
802094d0:	dcc02d15 	stw	r19,180(sp)
802094d4:	d9402a15 	stw	r5,168(sp)
802094d8:	d9402e15 	stw	r5,184(sp)
802094dc:	d8002915 	stw	zero,164(sp)
802094e0:	d8003215 	stw	zero,200(sp)
802094e4:	003a5d06 	br	80207e5c <__reset+0xfa1e7e5c>
802094e8:	9080004c 	andi	r2,r18,1
802094ec:	0039883a 	mov	fp,zero
802094f0:	10000426 	beq	r2,zero,80209504 <___vfprintf_internal_r+0x1ddc>
802094f4:	00800c04 	movi	r2,48
802094f8:	dc001dc4 	addi	r16,sp,119
802094fc:	d8801dc5 	stb	r2,119(sp)
80209500:	003b8006 	br	80208304 <__reset+0xfa1e8304>
80209504:	d8002e15 	stw	zero,184(sp)
80209508:	dc001e04 	addi	r16,sp,120
8020950c:	003a4d06 	br	80207e44 <__reset+0xfa1e7e44>
80209510:	8c7fff84 	addi	r17,r17,-2
80209514:	b5bfffc4 	addi	r22,r22,-1
80209518:	dd802615 	stw	r22,152(sp)
8020951c:	dc4022c5 	stb	r17,139(sp)
80209520:	b000bf16 	blt	r22,zero,80209820 <___vfprintf_internal_r+0x20f8>
80209524:	00800ac4 	movi	r2,43
80209528:	d8802305 	stb	r2,140(sp)
8020952c:	00800244 	movi	r2,9
80209530:	15807016 	blt	r2,r22,802096f4 <___vfprintf_internal_r+0x1fcc>
80209534:	00800c04 	movi	r2,48
80209538:	b5800c04 	addi	r22,r22,48
8020953c:	d8802345 	stb	r2,141(sp)
80209540:	dd802385 	stb	r22,142(sp)
80209544:	d88023c4 	addi	r2,sp,143
80209548:	df0022c4 	addi	fp,sp,139
8020954c:	d8c03317 	ldw	r3,204(sp)
80209550:	1739c83a 	sub	fp,r2,fp
80209554:	d9003317 	ldw	r4,204(sp)
80209558:	e0c7883a 	add	r3,fp,r3
8020955c:	df003a15 	stw	fp,232(sp)
80209560:	d8c02e15 	stw	r3,184(sp)
80209564:	00800044 	movi	r2,1
80209568:	1100b30e 	bge	r2,r4,80209838 <___vfprintf_internal_r+0x2110>
8020956c:	d8c02e17 	ldw	r3,184(sp)
80209570:	18c00044 	addi	r3,r3,1
80209574:	d8c02e15 	stw	r3,184(sp)
80209578:	1805883a 	mov	r2,r3
8020957c:	1800ac16 	blt	r3,zero,80209830 <___vfprintf_internal_r+0x2108>
80209580:	d8003215 	stw	zero,200(sp)
80209584:	003e5d06 	br	80208efc <__reset+0xfa1e8efc>
80209588:	d9002c17 	ldw	r4,176(sp)
8020958c:	d9801e04 	addi	r6,sp,120
80209590:	b80b883a 	mov	r5,r23
80209594:	020ffe80 	call	8020ffe8 <__sprint_r>
80209598:	1039651e 	bne	r2,zero,80207b30 <__reset+0xfa1e7b30>
8020959c:	dc402617 	ldw	r17,152(sp)
802095a0:	d8c02017 	ldw	r3,128(sp)
802095a4:	d8801f17 	ldw	r2,124(sp)
802095a8:	da000404 	addi	r8,sp,16
802095ac:	003ed606 	br	80209108 <__reset+0xfa1e9108>
802095b0:	582b883a 	mov	r21,r11
802095b4:	d8002915 	stw	zero,164(sp)
802095b8:	0038bd06 	br	802078b0 <__reset+0xfa1e78b0>
802095bc:	d8802917 	ldw	r2,164(sp)
802095c0:	103e071e 	bne	r2,zero,80208de0 <__reset+0xfa1e8de0>
802095c4:	dc002915 	stw	r16,164(sp)
802095c8:	003e0506 	br	80208de0 <__reset+0xfa1e8de0>
802095cc:	d9002917 	ldw	r4,164(sp)
802095d0:	20c00044 	addi	r3,r4,1
802095d4:	003e0f06 	br	80208e14 <__reset+0xfa1e8e14>
802095d8:	01400184 	movi	r5,6
802095dc:	d9402915 	stw	r5,164(sp)
802095e0:	003dff06 	br	80208de0 <__reset+0xfa1e8de0>
802095e4:	d8802104 	addi	r2,sp,132
802095e8:	d8800315 	stw	r2,12(sp)
802095ec:	d8802504 	addi	r2,sp,148
802095f0:	d8800215 	stw	r2,8(sp)
802095f4:	d8802604 	addi	r2,sp,152
802095f8:	d8800115 	stw	r2,4(sp)
802095fc:	d8802917 	ldw	r2,164(sp)
80209600:	d9403617 	ldw	r5,216(sp)
80209604:	d9002c17 	ldw	r4,176(sp)
80209608:	d8800015 	stw	r2,0(sp)
8020960c:	01c000c4 	movi	r7,3
80209610:	980d883a 	mov	r6,r19
80209614:	da003d15 	stw	r8,244(sp)
80209618:	0209d4c0 	call	80209d4c <_dtoa_r>
8020961c:	d8c02917 	ldw	r3,164(sp)
80209620:	da003d17 	ldw	r8,244(sp)
80209624:	1021883a 	mov	r16,r2
80209628:	10f9883a 	add	fp,r2,r3
8020962c:	81000007 	ldb	r4,0(r16)
80209630:	00800c04 	movi	r2,48
80209634:	20805e26 	beq	r4,r2,802097b0 <___vfprintf_internal_r+0x2088>
80209638:	d8c02617 	ldw	r3,152(sp)
8020963c:	e0f9883a 	add	fp,fp,r3
80209640:	003e0a06 	br	80208e6c <__reset+0xfa1e8e6c>
80209644:	00c00b44 	movi	r3,45
80209648:	24e0003c 	xorhi	r19,r4,32768
8020964c:	d8c02a05 	stb	r3,168(sp)
80209650:	003de906 	br	80208df8 <__reset+0xfa1e8df8>
80209654:	d8c03217 	ldw	r3,200(sp)
80209658:	00c07a0e 	bge	zero,r3,80209844 <___vfprintf_internal_r+0x211c>
8020965c:	00800044 	movi	r2,1
80209660:	d9003317 	ldw	r4,204(sp)
80209664:	1105883a 	add	r2,r2,r4
80209668:	d8802e15 	stw	r2,184(sp)
8020966c:	10004e16 	blt	r2,zero,802097a8 <___vfprintf_internal_r+0x2080>
80209670:	044019c4 	movi	r17,103
80209674:	003e2106 	br	80208efc <__reset+0xfa1e8efc>
80209678:	d9002917 	ldw	r4,164(sp)
8020967c:	d8802104 	addi	r2,sp,132
80209680:	d8800315 	stw	r2,12(sp)
80209684:	d9000015 	stw	r4,0(sp)
80209688:	d8802504 	addi	r2,sp,148
8020968c:	d9403617 	ldw	r5,216(sp)
80209690:	d9002c17 	ldw	r4,176(sp)
80209694:	d8800215 	stw	r2,8(sp)
80209698:	d8802604 	addi	r2,sp,152
8020969c:	d8800115 	stw	r2,4(sp)
802096a0:	01c000c4 	movi	r7,3
802096a4:	980d883a 	mov	r6,r19
802096a8:	da003d15 	stw	r8,244(sp)
802096ac:	0209d4c0 	call	80209d4c <_dtoa_r>
802096b0:	d8c02917 	ldw	r3,164(sp)
802096b4:	da003d17 	ldw	r8,244(sp)
802096b8:	1021883a 	mov	r16,r2
802096bc:	00801184 	movi	r2,70
802096c0:	80f9883a 	add	fp,r16,r3
802096c4:	88bfd926 	beq	r17,r2,8020962c <__reset+0xfa1e962c>
802096c8:	003de806 	br	80208e6c <__reset+0xfa1e8e6c>
802096cc:	d9002917 	ldw	r4,164(sp)
802096d0:	00c04d0e 	bge	zero,r3,80209808 <___vfprintf_internal_r+0x20e0>
802096d4:	2000441e 	bne	r4,zero,802097e8 <___vfprintf_internal_r+0x20c0>
802096d8:	9480004c 	andi	r18,r18,1
802096dc:	9000421e 	bne	r18,zero,802097e8 <___vfprintf_internal_r+0x20c0>
802096e0:	1805883a 	mov	r2,r3
802096e4:	18007016 	blt	r3,zero,802098a8 <___vfprintf_internal_r+0x2180>
802096e8:	d8c03217 	ldw	r3,200(sp)
802096ec:	d8c02e15 	stw	r3,184(sp)
802096f0:	003e0206 	br	80208efc <__reset+0xfa1e8efc>
802096f4:	df0022c4 	addi	fp,sp,139
802096f8:	dc002915 	stw	r16,164(sp)
802096fc:	4027883a 	mov	r19,r8
80209700:	e021883a 	mov	r16,fp
80209704:	b009883a 	mov	r4,r22
80209708:	01400284 	movi	r5,10
8020970c:	021299c0 	call	8021299c <__modsi3>
80209710:	10800c04 	addi	r2,r2,48
80209714:	843fffc4 	addi	r16,r16,-1
80209718:	b009883a 	mov	r4,r22
8020971c:	01400284 	movi	r5,10
80209720:	80800005 	stb	r2,0(r16)
80209724:	02129180 	call	80212918 <__divsi3>
80209728:	102d883a 	mov	r22,r2
8020972c:	00800244 	movi	r2,9
80209730:	15bff416 	blt	r2,r22,80209704 <__reset+0xfa1e9704>
80209734:	9811883a 	mov	r8,r19
80209738:	b0800c04 	addi	r2,r22,48
8020973c:	8027883a 	mov	r19,r16
80209740:	997fffc4 	addi	r5,r19,-1
80209744:	98bfffc5 	stb	r2,-1(r19)
80209748:	dc002917 	ldw	r16,164(sp)
8020974c:	2f006a2e 	bgeu	r5,fp,802098f8 <___vfprintf_internal_r+0x21d0>
80209750:	d9c02384 	addi	r7,sp,142
80209754:	3ccfc83a 	sub	r7,r7,r19
80209758:	d9002344 	addi	r4,sp,141
8020975c:	e1cf883a 	add	r7,fp,r7
80209760:	00000106 	br	80209768 <___vfprintf_internal_r+0x2040>
80209764:	28800003 	ldbu	r2,0(r5)
80209768:	20800005 	stb	r2,0(r4)
8020976c:	21000044 	addi	r4,r4,1
80209770:	29400044 	addi	r5,r5,1
80209774:	393ffb1e 	bne	r7,r4,80209764 <__reset+0xfa1e9764>
80209778:	d8802304 	addi	r2,sp,140
8020977c:	14c5c83a 	sub	r2,r2,r19
80209780:	d8c02344 	addi	r3,sp,141
80209784:	1885883a 	add	r2,r3,r2
80209788:	003f7006 	br	8020954c <__reset+0xfa1e954c>
8020978c:	0005883a 	mov	r2,zero
80209790:	003f0f06 	br	802093d0 <__reset+0xfa1e93d0>
80209794:	d8c03217 	ldw	r3,200(sp)
80209798:	18c00044 	addi	r3,r3,1
8020979c:	d8c02e15 	stw	r3,184(sp)
802097a0:	1805883a 	mov	r2,r3
802097a4:	183fb20e 	bge	r3,zero,80209670 <__reset+0xfa1e9670>
802097a8:	0005883a 	mov	r2,zero
802097ac:	003fb006 	br	80209670 <__reset+0xfa1e9670>
802097b0:	d9003617 	ldw	r4,216(sp)
802097b4:	000d883a 	mov	r6,zero
802097b8:	000f883a 	mov	r7,zero
802097bc:	980b883a 	mov	r5,r19
802097c0:	d8c03c15 	stw	r3,240(sp)
802097c4:	da003d15 	stw	r8,244(sp)
802097c8:	0213c600 	call	80213c60 <__eqdf2>
802097cc:	d8c03c17 	ldw	r3,240(sp)
802097d0:	da003d17 	ldw	r8,244(sp)
802097d4:	103f9826 	beq	r2,zero,80209638 <__reset+0xfa1e9638>
802097d8:	00800044 	movi	r2,1
802097dc:	10c7c83a 	sub	r3,r2,r3
802097e0:	d8c02615 	stw	r3,152(sp)
802097e4:	003f9506 	br	8020963c <__reset+0xfa1e963c>
802097e8:	d9002917 	ldw	r4,164(sp)
802097ec:	d8c03217 	ldw	r3,200(sp)
802097f0:	20800044 	addi	r2,r4,1
802097f4:	1885883a 	add	r2,r3,r2
802097f8:	d8802e15 	stw	r2,184(sp)
802097fc:	103dbf0e 	bge	r2,zero,80208efc <__reset+0xfa1e8efc>
80209800:	0005883a 	mov	r2,zero
80209804:	003dbd06 	br	80208efc <__reset+0xfa1e8efc>
80209808:	2000211e 	bne	r4,zero,80209890 <___vfprintf_internal_r+0x2168>
8020980c:	9480004c 	andi	r18,r18,1
80209810:	90001f1e 	bne	r18,zero,80209890 <___vfprintf_internal_r+0x2168>
80209814:	00800044 	movi	r2,1
80209818:	d8802e15 	stw	r2,184(sp)
8020981c:	003db706 	br	80208efc <__reset+0xfa1e8efc>
80209820:	00800b44 	movi	r2,45
80209824:	05adc83a 	sub	r22,zero,r22
80209828:	d8802305 	stb	r2,140(sp)
8020982c:	003f3f06 	br	8020952c <__reset+0xfa1e952c>
80209830:	0005883a 	mov	r2,zero
80209834:	003f5206 	br	80209580 <__reset+0xfa1e9580>
80209838:	90a4703a 	and	r18,r18,r2
8020983c:	903f4e26 	beq	r18,zero,80209578 <__reset+0xfa1e9578>
80209840:	003f4a06 	br	8020956c <__reset+0xfa1e956c>
80209844:	00800084 	movi	r2,2
80209848:	10c5c83a 	sub	r2,r2,r3
8020984c:	003f8406 	br	80209660 <__reset+0xfa1e9660>
80209850:	d8802d17 	ldw	r2,180(sp)
80209854:	d9002d17 	ldw	r4,180(sp)
80209858:	ac400043 	ldbu	r17,1(r21)
8020985c:	10800017 	ldw	r2,0(r2)
80209860:	582b883a 	mov	r21,r11
80209864:	d8802915 	stw	r2,164(sp)
80209868:	20800104 	addi	r2,r4,4
8020986c:	d9002917 	ldw	r4,164(sp)
80209870:	d8802d15 	stw	r2,180(sp)
80209874:	203e7a0e 	bge	r4,zero,80209260 <__reset+0xfa1e9260>
80209878:	8c403fcc 	andi	r17,r17,255
8020987c:	00bfffc4 	movi	r2,-1
80209880:	8c40201c 	xori	r17,r17,128
80209884:	d8802915 	stw	r2,164(sp)
80209888:	8c7fe004 	addi	r17,r17,-128
8020988c:	00380706 	br	802078ac <__reset+0xfa1e78ac>
80209890:	d8c02917 	ldw	r3,164(sp)
80209894:	18c00084 	addi	r3,r3,2
80209898:	d8c02e15 	stw	r3,184(sp)
8020989c:	1805883a 	mov	r2,r3
802098a0:	183d960e 	bge	r3,zero,80208efc <__reset+0xfa1e8efc>
802098a4:	003fd606 	br	80209800 <__reset+0xfa1e9800>
802098a8:	0005883a 	mov	r2,zero
802098ac:	003f8e06 	br	802096e8 <__reset+0xfa1e96e8>
802098b0:	9080004c 	andi	r2,r18,1
802098b4:	103f811e 	bne	r2,zero,802096bc <__reset+0xfa1e96bc>
802098b8:	d8802117 	ldw	r2,132(sp)
802098bc:	1405c83a 	sub	r2,r2,r16
802098c0:	d8803315 	stw	r2,204(sp)
802098c4:	b47ef326 	beq	r22,r17,80209494 <__reset+0xfa1e9494>
802098c8:	dd802617 	ldw	r22,152(sp)
802098cc:	003f1106 	br	80209514 <__reset+0xfa1e9514>
802098d0:	d9c02785 	stb	r7,158(sp)
802098d4:	00390406 	br	80207ce8 <__reset+0xfa1e7ce8>
802098d8:	d9c02785 	stb	r7,158(sp)
802098dc:	0038d306 	br	80207c2c <__reset+0xfa1e7c2c>
802098e0:	d9c02785 	stb	r7,158(sp)
802098e4:	003a6106 	br	8020826c <__reset+0xfa1e826c>
802098e8:	d9c02785 	stb	r7,158(sp)
802098ec:	003af806 	br	802084d0 <__reset+0xfa1e84d0>
802098f0:	0005883a 	mov	r2,zero
802098f4:	003d7e06 	br	80208ef0 <__reset+0xfa1e8ef0>
802098f8:	d8802344 	addi	r2,sp,141
802098fc:	003f1306 	br	8020954c <__reset+0xfa1e954c>
80209900:	d9c02785 	stb	r7,158(sp)
80209904:	00392306 	br	80207d94 <__reset+0xfa1e7d94>
80209908:	d9c02785 	stb	r7,158(sp)
8020990c:	003aa906 	br	802083b4 <__reset+0xfa1e83b4>
80209910:	d9c02785 	stb	r7,158(sp)
80209914:	003a3d06 	br	8020820c <__reset+0xfa1e820c>
80209918:	d9c02785 	stb	r7,158(sp)
8020991c:	003aca06 	br	80208448 <__reset+0xfa1e8448>

80209920 <__vfprintf_internal>:
80209920:	00a008b4 	movhi	r2,32802
80209924:	10b4fd04 	addi	r2,r2,-11276
80209928:	300f883a 	mov	r7,r6
8020992c:	280d883a 	mov	r6,r5
80209930:	200b883a 	mov	r5,r4
80209934:	11000017 	ldw	r4,0(r2)
80209938:	02077281 	jmpi	80207728 <___vfprintf_internal_r>

8020993c <__sbprintf>:
8020993c:	2880030b 	ldhu	r2,12(r5)
80209940:	2ac01917 	ldw	r11,100(r5)
80209944:	2a80038b 	ldhu	r10,14(r5)
80209948:	2a400717 	ldw	r9,28(r5)
8020994c:	2a000917 	ldw	r8,36(r5)
80209950:	defee204 	addi	sp,sp,-1144
80209954:	00c10004 	movi	r3,1024
80209958:	dc011a15 	stw	r16,1128(sp)
8020995c:	10bfff4c 	andi	r2,r2,65533
80209960:	2821883a 	mov	r16,r5
80209964:	d8cb883a 	add	r5,sp,r3
80209968:	dc811c15 	stw	r18,1136(sp)
8020996c:	dc411b15 	stw	r17,1132(sp)
80209970:	dfc11d15 	stw	ra,1140(sp)
80209974:	2025883a 	mov	r18,r4
80209978:	d881030d 	sth	r2,1036(sp)
8020997c:	dac11915 	stw	r11,1124(sp)
80209980:	da81038d 	sth	r10,1038(sp)
80209984:	da410715 	stw	r9,1052(sp)
80209988:	da010915 	stw	r8,1060(sp)
8020998c:	dec10015 	stw	sp,1024(sp)
80209990:	dec10415 	stw	sp,1040(sp)
80209994:	d8c10215 	stw	r3,1032(sp)
80209998:	d8c10515 	stw	r3,1044(sp)
8020999c:	d8010615 	stw	zero,1048(sp)
802099a0:	02077280 	call	80207728 <___vfprintf_internal_r>
802099a4:	1023883a 	mov	r17,r2
802099a8:	10000416 	blt	r2,zero,802099bc <__sbprintf+0x80>
802099ac:	d9410004 	addi	r5,sp,1024
802099b0:	9009883a 	mov	r4,r18
802099b4:	020b5f00 	call	8020b5f0 <_fflush_r>
802099b8:	10000d1e 	bne	r2,zero,802099f0 <__sbprintf+0xb4>
802099bc:	d881030b 	ldhu	r2,1036(sp)
802099c0:	1080100c 	andi	r2,r2,64
802099c4:	10000326 	beq	r2,zero,802099d4 <__sbprintf+0x98>
802099c8:	8080030b 	ldhu	r2,12(r16)
802099cc:	10801014 	ori	r2,r2,64
802099d0:	8080030d 	sth	r2,12(r16)
802099d4:	8805883a 	mov	r2,r17
802099d8:	dfc11d17 	ldw	ra,1140(sp)
802099dc:	dc811c17 	ldw	r18,1136(sp)
802099e0:	dc411b17 	ldw	r17,1132(sp)
802099e4:	dc011a17 	ldw	r16,1128(sp)
802099e8:	dec11e04 	addi	sp,sp,1144
802099ec:	f800283a 	ret
802099f0:	047fffc4 	movi	r17,-1
802099f4:	003ff106 	br	802099bc <__reset+0xfa1e99bc>

802099f8 <__swsetup_r>:
802099f8:	00a008b4 	movhi	r2,32802
802099fc:	defffd04 	addi	sp,sp,-12
80209a00:	10b4fd04 	addi	r2,r2,-11276
80209a04:	dc400115 	stw	r17,4(sp)
80209a08:	2023883a 	mov	r17,r4
80209a0c:	11000017 	ldw	r4,0(r2)
80209a10:	dc000015 	stw	r16,0(sp)
80209a14:	dfc00215 	stw	ra,8(sp)
80209a18:	2821883a 	mov	r16,r5
80209a1c:	20000226 	beq	r4,zero,80209a28 <__swsetup_r+0x30>
80209a20:	20800e17 	ldw	r2,56(r4)
80209a24:	10003126 	beq	r2,zero,80209aec <__swsetup_r+0xf4>
80209a28:	8080030b 	ldhu	r2,12(r16)
80209a2c:	10c0020c 	andi	r3,r2,8
80209a30:	1009883a 	mov	r4,r2
80209a34:	18000f26 	beq	r3,zero,80209a74 <__swsetup_r+0x7c>
80209a38:	80c00417 	ldw	r3,16(r16)
80209a3c:	18001526 	beq	r3,zero,80209a94 <__swsetup_r+0x9c>
80209a40:	1100004c 	andi	r4,r2,1
80209a44:	20001c1e 	bne	r4,zero,80209ab8 <__swsetup_r+0xc0>
80209a48:	1080008c 	andi	r2,r2,2
80209a4c:	1000291e 	bne	r2,zero,80209af4 <__swsetup_r+0xfc>
80209a50:	80800517 	ldw	r2,20(r16)
80209a54:	80800215 	stw	r2,8(r16)
80209a58:	18001c26 	beq	r3,zero,80209acc <__swsetup_r+0xd4>
80209a5c:	0005883a 	mov	r2,zero
80209a60:	dfc00217 	ldw	ra,8(sp)
80209a64:	dc400117 	ldw	r17,4(sp)
80209a68:	dc000017 	ldw	r16,0(sp)
80209a6c:	dec00304 	addi	sp,sp,12
80209a70:	f800283a 	ret
80209a74:	2080040c 	andi	r2,r4,16
80209a78:	10002e26 	beq	r2,zero,80209b34 <__swsetup_r+0x13c>
80209a7c:	2080010c 	andi	r2,r4,4
80209a80:	10001e1e 	bne	r2,zero,80209afc <__swsetup_r+0x104>
80209a84:	80c00417 	ldw	r3,16(r16)
80209a88:	20800214 	ori	r2,r4,8
80209a8c:	8080030d 	sth	r2,12(r16)
80209a90:	183feb1e 	bne	r3,zero,80209a40 <__reset+0xfa1e9a40>
80209a94:	1100a00c 	andi	r4,r2,640
80209a98:	01408004 	movi	r5,512
80209a9c:	217fe826 	beq	r4,r5,80209a40 <__reset+0xfa1e9a40>
80209aa0:	800b883a 	mov	r5,r16
80209aa4:	8809883a 	mov	r4,r17
80209aa8:	020c5700 	call	8020c570 <__smakebuf_r>
80209aac:	8080030b 	ldhu	r2,12(r16)
80209ab0:	80c00417 	ldw	r3,16(r16)
80209ab4:	003fe206 	br	80209a40 <__reset+0xfa1e9a40>
80209ab8:	80800517 	ldw	r2,20(r16)
80209abc:	80000215 	stw	zero,8(r16)
80209ac0:	0085c83a 	sub	r2,zero,r2
80209ac4:	80800615 	stw	r2,24(r16)
80209ac8:	183fe41e 	bne	r3,zero,80209a5c <__reset+0xfa1e9a5c>
80209acc:	80c0030b 	ldhu	r3,12(r16)
80209ad0:	0005883a 	mov	r2,zero
80209ad4:	1900200c 	andi	r4,r3,128
80209ad8:	203fe126 	beq	r4,zero,80209a60 <__reset+0xfa1e9a60>
80209adc:	18c01014 	ori	r3,r3,64
80209ae0:	80c0030d 	sth	r3,12(r16)
80209ae4:	00bfffc4 	movi	r2,-1
80209ae8:	003fdd06 	br	80209a60 <__reset+0xfa1e9a60>
80209aec:	020b9cc0 	call	8020b9cc <__sinit>
80209af0:	003fcd06 	br	80209a28 <__reset+0xfa1e9a28>
80209af4:	0005883a 	mov	r2,zero
80209af8:	003fd606 	br	80209a54 <__reset+0xfa1e9a54>
80209afc:	81400c17 	ldw	r5,48(r16)
80209b00:	28000626 	beq	r5,zero,80209b1c <__swsetup_r+0x124>
80209b04:	80801004 	addi	r2,r16,64
80209b08:	28800326 	beq	r5,r2,80209b18 <__swsetup_r+0x120>
80209b0c:	8809883a 	mov	r4,r17
80209b10:	020bb400 	call	8020bb40 <_free_r>
80209b14:	8100030b 	ldhu	r4,12(r16)
80209b18:	80000c15 	stw	zero,48(r16)
80209b1c:	80c00417 	ldw	r3,16(r16)
80209b20:	00bff6c4 	movi	r2,-37
80209b24:	1108703a 	and	r4,r2,r4
80209b28:	80000115 	stw	zero,4(r16)
80209b2c:	80c00015 	stw	r3,0(r16)
80209b30:	003fd506 	br	80209a88 <__reset+0xfa1e9a88>
80209b34:	00800244 	movi	r2,9
80209b38:	88800015 	stw	r2,0(r17)
80209b3c:	20801014 	ori	r2,r4,64
80209b40:	8080030d 	sth	r2,12(r16)
80209b44:	00bfffc4 	movi	r2,-1
80209b48:	003fc506 	br	80209a60 <__reset+0xfa1e9a60>

80209b4c <quorem>:
80209b4c:	defff704 	addi	sp,sp,-36
80209b50:	dc800215 	stw	r18,8(sp)
80209b54:	20800417 	ldw	r2,16(r4)
80209b58:	2c800417 	ldw	r18,16(r5)
80209b5c:	dfc00815 	stw	ra,32(sp)
80209b60:	ddc00715 	stw	r23,28(sp)
80209b64:	dd800615 	stw	r22,24(sp)
80209b68:	dd400515 	stw	r21,20(sp)
80209b6c:	dd000415 	stw	r20,16(sp)
80209b70:	dcc00315 	stw	r19,12(sp)
80209b74:	dc400115 	stw	r17,4(sp)
80209b78:	dc000015 	stw	r16,0(sp)
80209b7c:	14807116 	blt	r2,r18,80209d44 <quorem+0x1f8>
80209b80:	94bfffc4 	addi	r18,r18,-1
80209b84:	94ad883a 	add	r22,r18,r18
80209b88:	b5ad883a 	add	r22,r22,r22
80209b8c:	2c400504 	addi	r17,r5,20
80209b90:	8da9883a 	add	r20,r17,r22
80209b94:	25400504 	addi	r21,r4,20
80209b98:	282f883a 	mov	r23,r5
80209b9c:	adad883a 	add	r22,r21,r22
80209ba0:	a1400017 	ldw	r5,0(r20)
80209ba4:	2021883a 	mov	r16,r4
80209ba8:	b1000017 	ldw	r4,0(r22)
80209bac:	29400044 	addi	r5,r5,1
80209bb0:	0212a100 	call	80212a10 <__udivsi3>
80209bb4:	1027883a 	mov	r19,r2
80209bb8:	10002c26 	beq	r2,zero,80209c6c <quorem+0x120>
80209bbc:	a813883a 	mov	r9,r21
80209bc0:	880b883a 	mov	r5,r17
80209bc4:	0009883a 	mov	r4,zero
80209bc8:	000d883a 	mov	r6,zero
80209bcc:	2a000017 	ldw	r8,0(r5)
80209bd0:	49c00017 	ldw	r7,0(r9)
80209bd4:	29400104 	addi	r5,r5,4
80209bd8:	40bfffcc 	andi	r2,r8,65535
80209bdc:	14c5383a 	mul	r2,r2,r19
80209be0:	4010d43a 	srli	r8,r8,16
80209be4:	38ffffcc 	andi	r3,r7,65535
80209be8:	1105883a 	add	r2,r2,r4
80209bec:	1008d43a 	srli	r4,r2,16
80209bf0:	44d1383a 	mul	r8,r8,r19
80209bf4:	198d883a 	add	r6,r3,r6
80209bf8:	10ffffcc 	andi	r3,r2,65535
80209bfc:	30c7c83a 	sub	r3,r6,r3
80209c00:	380ed43a 	srli	r7,r7,16
80209c04:	4105883a 	add	r2,r8,r4
80209c08:	180dd43a 	srai	r6,r3,16
80209c0c:	113fffcc 	andi	r4,r2,65535
80209c10:	390fc83a 	sub	r7,r7,r4
80209c14:	398d883a 	add	r6,r7,r6
80209c18:	300e943a 	slli	r7,r6,16
80209c1c:	18ffffcc 	andi	r3,r3,65535
80209c20:	1008d43a 	srli	r4,r2,16
80209c24:	38ceb03a 	or	r7,r7,r3
80209c28:	49c00015 	stw	r7,0(r9)
80209c2c:	300dd43a 	srai	r6,r6,16
80209c30:	4a400104 	addi	r9,r9,4
80209c34:	a17fe52e 	bgeu	r20,r5,80209bcc <__reset+0xfa1e9bcc>
80209c38:	b0800017 	ldw	r2,0(r22)
80209c3c:	10000b1e 	bne	r2,zero,80209c6c <quorem+0x120>
80209c40:	b0bfff04 	addi	r2,r22,-4
80209c44:	a880082e 	bgeu	r21,r2,80209c68 <quorem+0x11c>
80209c48:	b0ffff17 	ldw	r3,-4(r22)
80209c4c:	18000326 	beq	r3,zero,80209c5c <quorem+0x110>
80209c50:	00000506 	br	80209c68 <quorem+0x11c>
80209c54:	10c00017 	ldw	r3,0(r2)
80209c58:	1800031e 	bne	r3,zero,80209c68 <quorem+0x11c>
80209c5c:	10bfff04 	addi	r2,r2,-4
80209c60:	94bfffc4 	addi	r18,r18,-1
80209c64:	a8bffb36 	bltu	r21,r2,80209c54 <__reset+0xfa1e9c54>
80209c68:	84800415 	stw	r18,16(r16)
80209c6c:	b80b883a 	mov	r5,r23
80209c70:	8009883a 	mov	r4,r16
80209c74:	020db680 	call	8020db68 <__mcmp>
80209c78:	10002616 	blt	r2,zero,80209d14 <quorem+0x1c8>
80209c7c:	9cc00044 	addi	r19,r19,1
80209c80:	a805883a 	mov	r2,r21
80209c84:	000b883a 	mov	r5,zero
80209c88:	11000017 	ldw	r4,0(r2)
80209c8c:	89800017 	ldw	r6,0(r17)
80209c90:	10800104 	addi	r2,r2,4
80209c94:	20ffffcc 	andi	r3,r4,65535
80209c98:	194b883a 	add	r5,r3,r5
80209c9c:	30ffffcc 	andi	r3,r6,65535
80209ca0:	28c7c83a 	sub	r3,r5,r3
80209ca4:	300cd43a 	srli	r6,r6,16
80209ca8:	2008d43a 	srli	r4,r4,16
80209cac:	180bd43a 	srai	r5,r3,16
80209cb0:	18ffffcc 	andi	r3,r3,65535
80209cb4:	2189c83a 	sub	r4,r4,r6
80209cb8:	2149883a 	add	r4,r4,r5
80209cbc:	200c943a 	slli	r6,r4,16
80209cc0:	8c400104 	addi	r17,r17,4
80209cc4:	200bd43a 	srai	r5,r4,16
80209cc8:	30c6b03a 	or	r3,r6,r3
80209ccc:	10ffff15 	stw	r3,-4(r2)
80209cd0:	a47fed2e 	bgeu	r20,r17,80209c88 <__reset+0xfa1e9c88>
80209cd4:	9485883a 	add	r2,r18,r18
80209cd8:	1085883a 	add	r2,r2,r2
80209cdc:	a887883a 	add	r3,r21,r2
80209ce0:	18800017 	ldw	r2,0(r3)
80209ce4:	10000b1e 	bne	r2,zero,80209d14 <quorem+0x1c8>
80209ce8:	18bfff04 	addi	r2,r3,-4
80209cec:	a880082e 	bgeu	r21,r2,80209d10 <quorem+0x1c4>
80209cf0:	18ffff17 	ldw	r3,-4(r3)
80209cf4:	18000326 	beq	r3,zero,80209d04 <quorem+0x1b8>
80209cf8:	00000506 	br	80209d10 <quorem+0x1c4>
80209cfc:	10c00017 	ldw	r3,0(r2)
80209d00:	1800031e 	bne	r3,zero,80209d10 <quorem+0x1c4>
80209d04:	10bfff04 	addi	r2,r2,-4
80209d08:	94bfffc4 	addi	r18,r18,-1
80209d0c:	a8bffb36 	bltu	r21,r2,80209cfc <__reset+0xfa1e9cfc>
80209d10:	84800415 	stw	r18,16(r16)
80209d14:	9805883a 	mov	r2,r19
80209d18:	dfc00817 	ldw	ra,32(sp)
80209d1c:	ddc00717 	ldw	r23,28(sp)
80209d20:	dd800617 	ldw	r22,24(sp)
80209d24:	dd400517 	ldw	r21,20(sp)
80209d28:	dd000417 	ldw	r20,16(sp)
80209d2c:	dcc00317 	ldw	r19,12(sp)
80209d30:	dc800217 	ldw	r18,8(sp)
80209d34:	dc400117 	ldw	r17,4(sp)
80209d38:	dc000017 	ldw	r16,0(sp)
80209d3c:	dec00904 	addi	sp,sp,36
80209d40:	f800283a 	ret
80209d44:	0005883a 	mov	r2,zero
80209d48:	003ff306 	br	80209d18 <__reset+0xfa1e9d18>

80209d4c <_dtoa_r>:
80209d4c:	20801017 	ldw	r2,64(r4)
80209d50:	deffde04 	addi	sp,sp,-136
80209d54:	df002015 	stw	fp,128(sp)
80209d58:	dcc01b15 	stw	r19,108(sp)
80209d5c:	dc801a15 	stw	r18,104(sp)
80209d60:	dc401915 	stw	r17,100(sp)
80209d64:	dc001815 	stw	r16,96(sp)
80209d68:	dfc02115 	stw	ra,132(sp)
80209d6c:	ddc01f15 	stw	r23,124(sp)
80209d70:	dd801e15 	stw	r22,120(sp)
80209d74:	dd401d15 	stw	r21,116(sp)
80209d78:	dd001c15 	stw	r20,112(sp)
80209d7c:	d9c00315 	stw	r7,12(sp)
80209d80:	2039883a 	mov	fp,r4
80209d84:	3023883a 	mov	r17,r6
80209d88:	2825883a 	mov	r18,r5
80209d8c:	dc002417 	ldw	r16,144(sp)
80209d90:	3027883a 	mov	r19,r6
80209d94:	10000826 	beq	r2,zero,80209db8 <_dtoa_r+0x6c>
80209d98:	21801117 	ldw	r6,68(r4)
80209d9c:	00c00044 	movi	r3,1
80209da0:	100b883a 	mov	r5,r2
80209da4:	1986983a 	sll	r3,r3,r6
80209da8:	11800115 	stw	r6,4(r2)
80209dac:	10c00215 	stw	r3,8(r2)
80209db0:	020d3480 	call	8020d348 <_Bfree>
80209db4:	e0001015 	stw	zero,64(fp)
80209db8:	88002e16 	blt	r17,zero,80209e74 <_dtoa_r+0x128>
80209dbc:	80000015 	stw	zero,0(r16)
80209dc0:	889ffc2c 	andhi	r2,r17,32752
80209dc4:	00dffc34 	movhi	r3,32752
80209dc8:	10c01c26 	beq	r2,r3,80209e3c <_dtoa_r+0xf0>
80209dcc:	000d883a 	mov	r6,zero
80209dd0:	000f883a 	mov	r7,zero
80209dd4:	9009883a 	mov	r4,r18
80209dd8:	980b883a 	mov	r5,r19
80209ddc:	0213c600 	call	80213c60 <__eqdf2>
80209de0:	10002b1e 	bne	r2,zero,80209e90 <_dtoa_r+0x144>
80209de4:	d9c02317 	ldw	r7,140(sp)
80209de8:	00800044 	movi	r2,1
80209dec:	38800015 	stw	r2,0(r7)
80209df0:	d8802517 	ldw	r2,148(sp)
80209df4:	10019e26 	beq	r2,zero,8020a470 <_dtoa_r+0x724>
80209df8:	d8c02517 	ldw	r3,148(sp)
80209dfc:	00a008b4 	movhi	r2,32802
80209e00:	10acc744 	addi	r2,r2,-19683
80209e04:	18800015 	stw	r2,0(r3)
80209e08:	10bfffc4 	addi	r2,r2,-1
80209e0c:	dfc02117 	ldw	ra,132(sp)
80209e10:	df002017 	ldw	fp,128(sp)
80209e14:	ddc01f17 	ldw	r23,124(sp)
80209e18:	dd801e17 	ldw	r22,120(sp)
80209e1c:	dd401d17 	ldw	r21,116(sp)
80209e20:	dd001c17 	ldw	r20,112(sp)
80209e24:	dcc01b17 	ldw	r19,108(sp)
80209e28:	dc801a17 	ldw	r18,104(sp)
80209e2c:	dc401917 	ldw	r17,100(sp)
80209e30:	dc001817 	ldw	r16,96(sp)
80209e34:	dec02204 	addi	sp,sp,136
80209e38:	f800283a 	ret
80209e3c:	d8c02317 	ldw	r3,140(sp)
80209e40:	0089c3c4 	movi	r2,9999
80209e44:	18800015 	stw	r2,0(r3)
80209e48:	90017726 	beq	r18,zero,8020a428 <_dtoa_r+0x6dc>
80209e4c:	00a008b4 	movhi	r2,32802
80209e50:	10acdb04 	addi	r2,r2,-19604
80209e54:	d9002517 	ldw	r4,148(sp)
80209e58:	203fec26 	beq	r4,zero,80209e0c <__reset+0xfa1e9e0c>
80209e5c:	10c000c7 	ldb	r3,3(r2)
80209e60:	1801781e 	bne	r3,zero,8020a444 <_dtoa_r+0x6f8>
80209e64:	10c000c4 	addi	r3,r2,3
80209e68:	d9802517 	ldw	r6,148(sp)
80209e6c:	30c00015 	stw	r3,0(r6)
80209e70:	003fe606 	br	80209e0c <__reset+0xfa1e9e0c>
80209e74:	04e00034 	movhi	r19,32768
80209e78:	9cffffc4 	addi	r19,r19,-1
80209e7c:	00800044 	movi	r2,1
80209e80:	8ce6703a 	and	r19,r17,r19
80209e84:	80800015 	stw	r2,0(r16)
80209e88:	9823883a 	mov	r17,r19
80209e8c:	003fcc06 	br	80209dc0 <__reset+0xfa1e9dc0>
80209e90:	d8800204 	addi	r2,sp,8
80209e94:	d8800015 	stw	r2,0(sp)
80209e98:	d9c00104 	addi	r7,sp,4
80209e9c:	900b883a 	mov	r5,r18
80209ea0:	980d883a 	mov	r6,r19
80209ea4:	e009883a 	mov	r4,fp
80209ea8:	8820d53a 	srli	r16,r17,20
80209eac:	020df340 	call	8020df34 <__d2b>
80209eb0:	d8800915 	stw	r2,36(sp)
80209eb4:	8001651e 	bne	r16,zero,8020a44c <_dtoa_r+0x700>
80209eb8:	dd800217 	ldw	r22,8(sp)
80209ebc:	dc000117 	ldw	r16,4(sp)
80209ec0:	00800804 	movi	r2,32
80209ec4:	b421883a 	add	r16,r22,r16
80209ec8:	80c10c84 	addi	r3,r16,1074
80209ecc:	10c2d10e 	bge	r2,r3,8020aa14 <_dtoa_r+0xcc8>
80209ed0:	00801004 	movi	r2,64
80209ed4:	81010484 	addi	r4,r16,1042
80209ed8:	10c7c83a 	sub	r3,r2,r3
80209edc:	9108d83a 	srl	r4,r18,r4
80209ee0:	88e2983a 	sll	r17,r17,r3
80209ee4:	2448b03a 	or	r4,r4,r17
80209ee8:	02150280 	call	80215028 <__floatunsidf>
80209eec:	017f8434 	movhi	r5,65040
80209ef0:	01800044 	movi	r6,1
80209ef4:	1009883a 	mov	r4,r2
80209ef8:	194b883a 	add	r5,r3,r5
80209efc:	843fffc4 	addi	r16,r16,-1
80209f00:	d9801115 	stw	r6,68(sp)
80209f04:	000d883a 	mov	r6,zero
80209f08:	01cffe34 	movhi	r7,16376
80209f0c:	02145d00 	call	802145d0 <__subdf3>
80209f10:	0198dbf4 	movhi	r6,25455
80209f14:	01cff4f4 	movhi	r7,16339
80209f18:	3190d844 	addi	r6,r6,17249
80209f1c:	39e1e9c4 	addi	r7,r7,-30809
80209f20:	1009883a 	mov	r4,r2
80209f24:	180b883a 	mov	r5,r3
80209f28:	0213eb80 	call	80213eb8 <__muldf3>
80209f2c:	01a2d874 	movhi	r6,35681
80209f30:	01cff1f4 	movhi	r7,16327
80209f34:	31b22cc4 	addi	r6,r6,-14157
80209f38:	39e28a04 	addi	r7,r7,-30168
80209f3c:	180b883a 	mov	r5,r3
80209f40:	1009883a 	mov	r4,r2
80209f44:	0212acc0 	call	80212acc <__adddf3>
80209f48:	8009883a 	mov	r4,r16
80209f4c:	1029883a 	mov	r20,r2
80209f50:	1823883a 	mov	r17,r3
80209f54:	0214f4c0 	call	80214f4c <__floatsidf>
80209f58:	019427f4 	movhi	r6,20639
80209f5c:	01cff4f4 	movhi	r7,16339
80209f60:	319e7ec4 	addi	r6,r6,31227
80209f64:	39d104c4 	addi	r7,r7,17427
80209f68:	1009883a 	mov	r4,r2
80209f6c:	180b883a 	mov	r5,r3
80209f70:	0213eb80 	call	80213eb8 <__muldf3>
80209f74:	100d883a 	mov	r6,r2
80209f78:	180f883a 	mov	r7,r3
80209f7c:	a009883a 	mov	r4,r20
80209f80:	880b883a 	mov	r5,r17
80209f84:	0212acc0 	call	80212acc <__adddf3>
80209f88:	1009883a 	mov	r4,r2
80209f8c:	180b883a 	mov	r5,r3
80209f90:	1029883a 	mov	r20,r2
80209f94:	1823883a 	mov	r17,r3
80209f98:	0214ecc0 	call	80214ecc <__fixdfsi>
80209f9c:	000d883a 	mov	r6,zero
80209fa0:	000f883a 	mov	r7,zero
80209fa4:	a009883a 	mov	r4,r20
80209fa8:	880b883a 	mov	r5,r17
80209fac:	d8800515 	stw	r2,20(sp)
80209fb0:	0213dc40 	call	80213dc4 <__ledf2>
80209fb4:	10028716 	blt	r2,zero,8020a9d4 <_dtoa_r+0xc88>
80209fb8:	d8c00517 	ldw	r3,20(sp)
80209fbc:	00800584 	movi	r2,22
80209fc0:	10c27536 	bltu	r2,r3,8020a998 <_dtoa_r+0xc4c>
80209fc4:	180490fa 	slli	r2,r3,3
80209fc8:	00e008b4 	movhi	r3,32802
80209fcc:	18ecf604 	addi	r3,r3,-19496
80209fd0:	1885883a 	add	r2,r3,r2
80209fd4:	11000017 	ldw	r4,0(r2)
80209fd8:	11400117 	ldw	r5,4(r2)
80209fdc:	900d883a 	mov	r6,r18
80209fe0:	980f883a 	mov	r7,r19
80209fe4:	0213ce80 	call	80213ce8 <__gedf2>
80209fe8:	00828d0e 	bge	zero,r2,8020aa20 <_dtoa_r+0xcd4>
80209fec:	d9000517 	ldw	r4,20(sp)
80209ff0:	d8000e15 	stw	zero,56(sp)
80209ff4:	213fffc4 	addi	r4,r4,-1
80209ff8:	d9000515 	stw	r4,20(sp)
80209ffc:	b42dc83a 	sub	r22,r22,r16
8020a000:	b5bfffc4 	addi	r22,r22,-1
8020a004:	b0026f16 	blt	r22,zero,8020a9c4 <_dtoa_r+0xc78>
8020a008:	d8000815 	stw	zero,32(sp)
8020a00c:	d9c00517 	ldw	r7,20(sp)
8020a010:	38026416 	blt	r7,zero,8020a9a4 <_dtoa_r+0xc58>
8020a014:	b1ed883a 	add	r22,r22,r7
8020a018:	d9c00d15 	stw	r7,52(sp)
8020a01c:	d8000a15 	stw	zero,40(sp)
8020a020:	d9800317 	ldw	r6,12(sp)
8020a024:	00800244 	movi	r2,9
8020a028:	11811436 	bltu	r2,r6,8020a47c <_dtoa_r+0x730>
8020a02c:	00800144 	movi	r2,5
8020a030:	1184e10e 	bge	r2,r6,8020b3b8 <_dtoa_r+0x166c>
8020a034:	31bfff04 	addi	r6,r6,-4
8020a038:	d9800315 	stw	r6,12(sp)
8020a03c:	0023883a 	mov	r17,zero
8020a040:	d9800317 	ldw	r6,12(sp)
8020a044:	008000c4 	movi	r2,3
8020a048:	30836726 	beq	r6,r2,8020ade8 <_dtoa_r+0x109c>
8020a04c:	1183410e 	bge	r2,r6,8020ad54 <_dtoa_r+0x1008>
8020a050:	d9c00317 	ldw	r7,12(sp)
8020a054:	00800104 	movi	r2,4
8020a058:	38827c26 	beq	r7,r2,8020aa4c <_dtoa_r+0xd00>
8020a05c:	00800144 	movi	r2,5
8020a060:	3884c41e 	bne	r7,r2,8020b374 <_dtoa_r+0x1628>
8020a064:	00800044 	movi	r2,1
8020a068:	d8800b15 	stw	r2,44(sp)
8020a06c:	d8c00517 	ldw	r3,20(sp)
8020a070:	d9002217 	ldw	r4,136(sp)
8020a074:	1907883a 	add	r3,r3,r4
8020a078:	19800044 	addi	r6,r3,1
8020a07c:	d8c00c15 	stw	r3,48(sp)
8020a080:	d9800615 	stw	r6,24(sp)
8020a084:	0183a40e 	bge	zero,r6,8020af18 <_dtoa_r+0x11cc>
8020a088:	d9800617 	ldw	r6,24(sp)
8020a08c:	3021883a 	mov	r16,r6
8020a090:	e0001115 	stw	zero,68(fp)
8020a094:	008005c4 	movi	r2,23
8020a098:	1184c92e 	bgeu	r2,r6,8020b3c0 <_dtoa_r+0x1674>
8020a09c:	00c00044 	movi	r3,1
8020a0a0:	00800104 	movi	r2,4
8020a0a4:	1085883a 	add	r2,r2,r2
8020a0a8:	11000504 	addi	r4,r2,20
8020a0ac:	180b883a 	mov	r5,r3
8020a0b0:	18c00044 	addi	r3,r3,1
8020a0b4:	313ffb2e 	bgeu	r6,r4,8020a0a4 <__reset+0xfa1ea0a4>
8020a0b8:	e1401115 	stw	r5,68(fp)
8020a0bc:	e009883a 	mov	r4,fp
8020a0c0:	020d2a00 	call	8020d2a0 <_Balloc>
8020a0c4:	d8800715 	stw	r2,28(sp)
8020a0c8:	e0801015 	stw	r2,64(fp)
8020a0cc:	00800384 	movi	r2,14
8020a0d0:	1400f736 	bltu	r2,r16,8020a4b0 <_dtoa_r+0x764>
8020a0d4:	8800f626 	beq	r17,zero,8020a4b0 <_dtoa_r+0x764>
8020a0d8:	d9c00517 	ldw	r7,20(sp)
8020a0dc:	01c39a0e 	bge	zero,r7,8020af48 <_dtoa_r+0x11fc>
8020a0e0:	388003cc 	andi	r2,r7,15
8020a0e4:	100490fa 	slli	r2,r2,3
8020a0e8:	382bd13a 	srai	r21,r7,4
8020a0ec:	00e008b4 	movhi	r3,32802
8020a0f0:	18ecf604 	addi	r3,r3,-19496
8020a0f4:	1885883a 	add	r2,r3,r2
8020a0f8:	a8c0040c 	andi	r3,r21,16
8020a0fc:	12400017 	ldw	r9,0(r2)
8020a100:	12000117 	ldw	r8,4(r2)
8020a104:	18037926 	beq	r3,zero,8020aeec <_dtoa_r+0x11a0>
8020a108:	00a008b4 	movhi	r2,32802
8020a10c:	10acec04 	addi	r2,r2,-19536
8020a110:	11800817 	ldw	r6,32(r2)
8020a114:	11c00917 	ldw	r7,36(r2)
8020a118:	9009883a 	mov	r4,r18
8020a11c:	980b883a 	mov	r5,r19
8020a120:	da001715 	stw	r8,92(sp)
8020a124:	da401615 	stw	r9,88(sp)
8020a128:	02133780 	call	80213378 <__divdf3>
8020a12c:	da001717 	ldw	r8,92(sp)
8020a130:	da401617 	ldw	r9,88(sp)
8020a134:	ad4003cc 	andi	r21,r21,15
8020a138:	040000c4 	movi	r16,3
8020a13c:	1023883a 	mov	r17,r2
8020a140:	1829883a 	mov	r20,r3
8020a144:	a8001126 	beq	r21,zero,8020a18c <_dtoa_r+0x440>
8020a148:	05e008b4 	movhi	r23,32802
8020a14c:	bdecec04 	addi	r23,r23,-19536
8020a150:	4805883a 	mov	r2,r9
8020a154:	4007883a 	mov	r3,r8
8020a158:	a980004c 	andi	r6,r21,1
8020a15c:	1009883a 	mov	r4,r2
8020a160:	a82bd07a 	srai	r21,r21,1
8020a164:	180b883a 	mov	r5,r3
8020a168:	30000426 	beq	r6,zero,8020a17c <_dtoa_r+0x430>
8020a16c:	b9800017 	ldw	r6,0(r23)
8020a170:	b9c00117 	ldw	r7,4(r23)
8020a174:	84000044 	addi	r16,r16,1
8020a178:	0213eb80 	call	80213eb8 <__muldf3>
8020a17c:	bdc00204 	addi	r23,r23,8
8020a180:	a83ff51e 	bne	r21,zero,8020a158 <__reset+0xfa1ea158>
8020a184:	1013883a 	mov	r9,r2
8020a188:	1811883a 	mov	r8,r3
8020a18c:	480d883a 	mov	r6,r9
8020a190:	400f883a 	mov	r7,r8
8020a194:	8809883a 	mov	r4,r17
8020a198:	a00b883a 	mov	r5,r20
8020a19c:	02133780 	call	80213378 <__divdf3>
8020a1a0:	d8800f15 	stw	r2,60(sp)
8020a1a4:	d8c01015 	stw	r3,64(sp)
8020a1a8:	d8c00e17 	ldw	r3,56(sp)
8020a1ac:	18000626 	beq	r3,zero,8020a1c8 <_dtoa_r+0x47c>
8020a1b0:	d9000f17 	ldw	r4,60(sp)
8020a1b4:	d9401017 	ldw	r5,64(sp)
8020a1b8:	000d883a 	mov	r6,zero
8020a1bc:	01cffc34 	movhi	r7,16368
8020a1c0:	0213dc40 	call	80213dc4 <__ledf2>
8020a1c4:	10040b16 	blt	r2,zero,8020b1f4 <_dtoa_r+0x14a8>
8020a1c8:	8009883a 	mov	r4,r16
8020a1cc:	0214f4c0 	call	80214f4c <__floatsidf>
8020a1d0:	d9800f17 	ldw	r6,60(sp)
8020a1d4:	d9c01017 	ldw	r7,64(sp)
8020a1d8:	1009883a 	mov	r4,r2
8020a1dc:	180b883a 	mov	r5,r3
8020a1e0:	0213eb80 	call	80213eb8 <__muldf3>
8020a1e4:	000d883a 	mov	r6,zero
8020a1e8:	01d00734 	movhi	r7,16412
8020a1ec:	1009883a 	mov	r4,r2
8020a1f0:	180b883a 	mov	r5,r3
8020a1f4:	0212acc0 	call	80212acc <__adddf3>
8020a1f8:	1021883a 	mov	r16,r2
8020a1fc:	d8800617 	ldw	r2,24(sp)
8020a200:	047f3034 	movhi	r17,64704
8020a204:	1c63883a 	add	r17,r3,r17
8020a208:	10031826 	beq	r2,zero,8020ae6c <_dtoa_r+0x1120>
8020a20c:	d8c00517 	ldw	r3,20(sp)
8020a210:	db000617 	ldw	r12,24(sp)
8020a214:	d8c01315 	stw	r3,76(sp)
8020a218:	d9000b17 	ldw	r4,44(sp)
8020a21c:	20038f26 	beq	r4,zero,8020b05c <_dtoa_r+0x1310>
8020a220:	60bfffc4 	addi	r2,r12,-1
8020a224:	100490fa 	slli	r2,r2,3
8020a228:	00e008b4 	movhi	r3,32802
8020a22c:	18ecf604 	addi	r3,r3,-19496
8020a230:	1885883a 	add	r2,r3,r2
8020a234:	11800017 	ldw	r6,0(r2)
8020a238:	11c00117 	ldw	r7,4(r2)
8020a23c:	d8800717 	ldw	r2,28(sp)
8020a240:	0009883a 	mov	r4,zero
8020a244:	014ff834 	movhi	r5,16352
8020a248:	db001615 	stw	r12,88(sp)
8020a24c:	15c00044 	addi	r23,r2,1
8020a250:	02133780 	call	80213378 <__divdf3>
8020a254:	800d883a 	mov	r6,r16
8020a258:	880f883a 	mov	r7,r17
8020a25c:	1009883a 	mov	r4,r2
8020a260:	180b883a 	mov	r5,r3
8020a264:	02145d00 	call	802145d0 <__subdf3>
8020a268:	d9401017 	ldw	r5,64(sp)
8020a26c:	d9000f17 	ldw	r4,60(sp)
8020a270:	102b883a 	mov	r21,r2
8020a274:	d8c01215 	stw	r3,72(sp)
8020a278:	0214ecc0 	call	80214ecc <__fixdfsi>
8020a27c:	1009883a 	mov	r4,r2
8020a280:	1029883a 	mov	r20,r2
8020a284:	0214f4c0 	call	80214f4c <__floatsidf>
8020a288:	d9000f17 	ldw	r4,60(sp)
8020a28c:	d9401017 	ldw	r5,64(sp)
8020a290:	100d883a 	mov	r6,r2
8020a294:	180f883a 	mov	r7,r3
8020a298:	02145d00 	call	802145d0 <__subdf3>
8020a29c:	1823883a 	mov	r17,r3
8020a2a0:	d8c00717 	ldw	r3,28(sp)
8020a2a4:	d9401217 	ldw	r5,72(sp)
8020a2a8:	a2000c04 	addi	r8,r20,48
8020a2ac:	1021883a 	mov	r16,r2
8020a2b0:	1a000005 	stb	r8,0(r3)
8020a2b4:	800d883a 	mov	r6,r16
8020a2b8:	880f883a 	mov	r7,r17
8020a2bc:	a809883a 	mov	r4,r21
8020a2c0:	4029883a 	mov	r20,r8
8020a2c4:	0213ce80 	call	80213ce8 <__gedf2>
8020a2c8:	00841d16 	blt	zero,r2,8020b340 <_dtoa_r+0x15f4>
8020a2cc:	800d883a 	mov	r6,r16
8020a2d0:	880f883a 	mov	r7,r17
8020a2d4:	0009883a 	mov	r4,zero
8020a2d8:	014ffc34 	movhi	r5,16368
8020a2dc:	02145d00 	call	802145d0 <__subdf3>
8020a2e0:	d9401217 	ldw	r5,72(sp)
8020a2e4:	100d883a 	mov	r6,r2
8020a2e8:	180f883a 	mov	r7,r3
8020a2ec:	a809883a 	mov	r4,r21
8020a2f0:	0213ce80 	call	80213ce8 <__gedf2>
8020a2f4:	db001617 	ldw	r12,88(sp)
8020a2f8:	00840e16 	blt	zero,r2,8020b334 <_dtoa_r+0x15e8>
8020a2fc:	00800044 	movi	r2,1
8020a300:	13006b0e 	bge	r2,r12,8020a4b0 <_dtoa_r+0x764>
8020a304:	d9000717 	ldw	r4,28(sp)
8020a308:	dd800f15 	stw	r22,60(sp)
8020a30c:	dcc01015 	stw	r19,64(sp)
8020a310:	2319883a 	add	r12,r4,r12
8020a314:	dcc01217 	ldw	r19,72(sp)
8020a318:	602d883a 	mov	r22,r12
8020a31c:	dc801215 	stw	r18,72(sp)
8020a320:	b825883a 	mov	r18,r23
8020a324:	00000906 	br	8020a34c <_dtoa_r+0x600>
8020a328:	02145d00 	call	802145d0 <__subdf3>
8020a32c:	a80d883a 	mov	r6,r21
8020a330:	980f883a 	mov	r7,r19
8020a334:	1009883a 	mov	r4,r2
8020a338:	180b883a 	mov	r5,r3
8020a33c:	0213dc40 	call	80213dc4 <__ledf2>
8020a340:	1003e816 	blt	r2,zero,8020b2e4 <_dtoa_r+0x1598>
8020a344:	b825883a 	mov	r18,r23
8020a348:	bd83e926 	beq	r23,r22,8020b2f0 <_dtoa_r+0x15a4>
8020a34c:	a809883a 	mov	r4,r21
8020a350:	980b883a 	mov	r5,r19
8020a354:	000d883a 	mov	r6,zero
8020a358:	01d00934 	movhi	r7,16420
8020a35c:	0213eb80 	call	80213eb8 <__muldf3>
8020a360:	000d883a 	mov	r6,zero
8020a364:	01d00934 	movhi	r7,16420
8020a368:	8009883a 	mov	r4,r16
8020a36c:	880b883a 	mov	r5,r17
8020a370:	102b883a 	mov	r21,r2
8020a374:	1827883a 	mov	r19,r3
8020a378:	0213eb80 	call	80213eb8 <__muldf3>
8020a37c:	180b883a 	mov	r5,r3
8020a380:	1009883a 	mov	r4,r2
8020a384:	1821883a 	mov	r16,r3
8020a388:	1023883a 	mov	r17,r2
8020a38c:	0214ecc0 	call	80214ecc <__fixdfsi>
8020a390:	1009883a 	mov	r4,r2
8020a394:	1029883a 	mov	r20,r2
8020a398:	0214f4c0 	call	80214f4c <__floatsidf>
8020a39c:	8809883a 	mov	r4,r17
8020a3a0:	800b883a 	mov	r5,r16
8020a3a4:	100d883a 	mov	r6,r2
8020a3a8:	180f883a 	mov	r7,r3
8020a3ac:	02145d00 	call	802145d0 <__subdf3>
8020a3b0:	a5000c04 	addi	r20,r20,48
8020a3b4:	a80d883a 	mov	r6,r21
8020a3b8:	980f883a 	mov	r7,r19
8020a3bc:	1009883a 	mov	r4,r2
8020a3c0:	180b883a 	mov	r5,r3
8020a3c4:	95000005 	stb	r20,0(r18)
8020a3c8:	1021883a 	mov	r16,r2
8020a3cc:	1823883a 	mov	r17,r3
8020a3d0:	0213dc40 	call	80213dc4 <__ledf2>
8020a3d4:	bdc00044 	addi	r23,r23,1
8020a3d8:	800d883a 	mov	r6,r16
8020a3dc:	880f883a 	mov	r7,r17
8020a3e0:	0009883a 	mov	r4,zero
8020a3e4:	014ffc34 	movhi	r5,16368
8020a3e8:	103fcf0e 	bge	r2,zero,8020a328 <__reset+0xfa1ea328>
8020a3ec:	d8c01317 	ldw	r3,76(sp)
8020a3f0:	d8c00515 	stw	r3,20(sp)
8020a3f4:	d9400917 	ldw	r5,36(sp)
8020a3f8:	e009883a 	mov	r4,fp
8020a3fc:	020d3480 	call	8020d348 <_Bfree>
8020a400:	d9000517 	ldw	r4,20(sp)
8020a404:	d9802317 	ldw	r6,140(sp)
8020a408:	d9c02517 	ldw	r7,148(sp)
8020a40c:	b8000005 	stb	zero,0(r23)
8020a410:	20800044 	addi	r2,r4,1
8020a414:	30800015 	stw	r2,0(r6)
8020a418:	3802aa26 	beq	r7,zero,8020aec4 <_dtoa_r+0x1178>
8020a41c:	3dc00015 	stw	r23,0(r7)
8020a420:	d8800717 	ldw	r2,28(sp)
8020a424:	003e7906 	br	80209e0c <__reset+0xfa1e9e0c>
8020a428:	00800434 	movhi	r2,16
8020a42c:	10bfffc4 	addi	r2,r2,-1
8020a430:	88a2703a 	and	r17,r17,r2
8020a434:	883e851e 	bne	r17,zero,80209e4c <__reset+0xfa1e9e4c>
8020a438:	00a008b4 	movhi	r2,32802
8020a43c:	10acd804 	addi	r2,r2,-19616
8020a440:	003e8406 	br	80209e54 <__reset+0xfa1e9e54>
8020a444:	10c00204 	addi	r3,r2,8
8020a448:	003e8706 	br	80209e68 <__reset+0xfa1e9e68>
8020a44c:	01400434 	movhi	r5,16
8020a450:	297fffc4 	addi	r5,r5,-1
8020a454:	994a703a 	and	r5,r19,r5
8020a458:	9009883a 	mov	r4,r18
8020a45c:	843f0044 	addi	r16,r16,-1023
8020a460:	294ffc34 	orhi	r5,r5,16368
8020a464:	dd800217 	ldw	r22,8(sp)
8020a468:	d8001115 	stw	zero,68(sp)
8020a46c:	003ea506 	br	80209f04 <__reset+0xfa1e9f04>
8020a470:	00a008b4 	movhi	r2,32802
8020a474:	10acc704 	addi	r2,r2,-19684
8020a478:	003e6406 	br	80209e0c <__reset+0xfa1e9e0c>
8020a47c:	e0001115 	stw	zero,68(fp)
8020a480:	000b883a 	mov	r5,zero
8020a484:	e009883a 	mov	r4,fp
8020a488:	020d2a00 	call	8020d2a0 <_Balloc>
8020a48c:	01bfffc4 	movi	r6,-1
8020a490:	01c00044 	movi	r7,1
8020a494:	d8800715 	stw	r2,28(sp)
8020a498:	d9800c15 	stw	r6,48(sp)
8020a49c:	e0801015 	stw	r2,64(fp)
8020a4a0:	d8000315 	stw	zero,12(sp)
8020a4a4:	d9c00b15 	stw	r7,44(sp)
8020a4a8:	d9800615 	stw	r6,24(sp)
8020a4ac:	d8002215 	stw	zero,136(sp)
8020a4b0:	d8800117 	ldw	r2,4(sp)
8020a4b4:	10008916 	blt	r2,zero,8020a6dc <_dtoa_r+0x990>
8020a4b8:	d9000517 	ldw	r4,20(sp)
8020a4bc:	00c00384 	movi	r3,14
8020a4c0:	19008616 	blt	r3,r4,8020a6dc <_dtoa_r+0x990>
8020a4c4:	200490fa 	slli	r2,r4,3
8020a4c8:	00e008b4 	movhi	r3,32802
8020a4cc:	d9802217 	ldw	r6,136(sp)
8020a4d0:	18ecf604 	addi	r3,r3,-19496
8020a4d4:	1885883a 	add	r2,r3,r2
8020a4d8:	14000017 	ldw	r16,0(r2)
8020a4dc:	14400117 	ldw	r17,4(r2)
8020a4e0:	30016316 	blt	r6,zero,8020aa70 <_dtoa_r+0xd24>
8020a4e4:	800d883a 	mov	r6,r16
8020a4e8:	880f883a 	mov	r7,r17
8020a4ec:	9009883a 	mov	r4,r18
8020a4f0:	980b883a 	mov	r5,r19
8020a4f4:	02133780 	call	80213378 <__divdf3>
8020a4f8:	180b883a 	mov	r5,r3
8020a4fc:	1009883a 	mov	r4,r2
8020a500:	0214ecc0 	call	80214ecc <__fixdfsi>
8020a504:	1009883a 	mov	r4,r2
8020a508:	102b883a 	mov	r21,r2
8020a50c:	0214f4c0 	call	80214f4c <__floatsidf>
8020a510:	800d883a 	mov	r6,r16
8020a514:	880f883a 	mov	r7,r17
8020a518:	1009883a 	mov	r4,r2
8020a51c:	180b883a 	mov	r5,r3
8020a520:	0213eb80 	call	80213eb8 <__muldf3>
8020a524:	100d883a 	mov	r6,r2
8020a528:	180f883a 	mov	r7,r3
8020a52c:	9009883a 	mov	r4,r18
8020a530:	980b883a 	mov	r5,r19
8020a534:	02145d00 	call	802145d0 <__subdf3>
8020a538:	d9c00717 	ldw	r7,28(sp)
8020a53c:	1009883a 	mov	r4,r2
8020a540:	a8800c04 	addi	r2,r21,48
8020a544:	38800005 	stb	r2,0(r7)
8020a548:	3dc00044 	addi	r23,r7,1
8020a54c:	d9c00617 	ldw	r7,24(sp)
8020a550:	01800044 	movi	r6,1
8020a554:	180b883a 	mov	r5,r3
8020a558:	2005883a 	mov	r2,r4
8020a55c:	39803826 	beq	r7,r6,8020a640 <_dtoa_r+0x8f4>
8020a560:	000d883a 	mov	r6,zero
8020a564:	01d00934 	movhi	r7,16420
8020a568:	0213eb80 	call	80213eb8 <__muldf3>
8020a56c:	000d883a 	mov	r6,zero
8020a570:	000f883a 	mov	r7,zero
8020a574:	1009883a 	mov	r4,r2
8020a578:	180b883a 	mov	r5,r3
8020a57c:	1025883a 	mov	r18,r2
8020a580:	1827883a 	mov	r19,r3
8020a584:	0213c600 	call	80213c60 <__eqdf2>
8020a588:	103f9a26 	beq	r2,zero,8020a3f4 <__reset+0xfa1ea3f4>
8020a58c:	d9c00617 	ldw	r7,24(sp)
8020a590:	d8c00717 	ldw	r3,28(sp)
8020a594:	b829883a 	mov	r20,r23
8020a598:	38bfffc4 	addi	r2,r7,-1
8020a59c:	18ad883a 	add	r22,r3,r2
8020a5a0:	00000a06 	br	8020a5cc <_dtoa_r+0x880>
8020a5a4:	0213eb80 	call	80213eb8 <__muldf3>
8020a5a8:	000d883a 	mov	r6,zero
8020a5ac:	000f883a 	mov	r7,zero
8020a5b0:	1009883a 	mov	r4,r2
8020a5b4:	180b883a 	mov	r5,r3
8020a5b8:	1025883a 	mov	r18,r2
8020a5bc:	1827883a 	mov	r19,r3
8020a5c0:	b829883a 	mov	r20,r23
8020a5c4:	0213c600 	call	80213c60 <__eqdf2>
8020a5c8:	103f8a26 	beq	r2,zero,8020a3f4 <__reset+0xfa1ea3f4>
8020a5cc:	800d883a 	mov	r6,r16
8020a5d0:	880f883a 	mov	r7,r17
8020a5d4:	9009883a 	mov	r4,r18
8020a5d8:	980b883a 	mov	r5,r19
8020a5dc:	02133780 	call	80213378 <__divdf3>
8020a5e0:	180b883a 	mov	r5,r3
8020a5e4:	1009883a 	mov	r4,r2
8020a5e8:	0214ecc0 	call	80214ecc <__fixdfsi>
8020a5ec:	1009883a 	mov	r4,r2
8020a5f0:	102b883a 	mov	r21,r2
8020a5f4:	0214f4c0 	call	80214f4c <__floatsidf>
8020a5f8:	800d883a 	mov	r6,r16
8020a5fc:	880f883a 	mov	r7,r17
8020a600:	1009883a 	mov	r4,r2
8020a604:	180b883a 	mov	r5,r3
8020a608:	0213eb80 	call	80213eb8 <__muldf3>
8020a60c:	100d883a 	mov	r6,r2
8020a610:	180f883a 	mov	r7,r3
8020a614:	9009883a 	mov	r4,r18
8020a618:	980b883a 	mov	r5,r19
8020a61c:	02145d00 	call	802145d0 <__subdf3>
8020a620:	aa000c04 	addi	r8,r21,48
8020a624:	a2000005 	stb	r8,0(r20)
8020a628:	000d883a 	mov	r6,zero
8020a62c:	01d00934 	movhi	r7,16420
8020a630:	1009883a 	mov	r4,r2
8020a634:	180b883a 	mov	r5,r3
8020a638:	a5c00044 	addi	r23,r20,1
8020a63c:	b53fd91e 	bne	r22,r20,8020a5a4 <__reset+0xfa1ea5a4>
8020a640:	100d883a 	mov	r6,r2
8020a644:	180f883a 	mov	r7,r3
8020a648:	1009883a 	mov	r4,r2
8020a64c:	180b883a 	mov	r5,r3
8020a650:	0212acc0 	call	80212acc <__adddf3>
8020a654:	100d883a 	mov	r6,r2
8020a658:	180f883a 	mov	r7,r3
8020a65c:	8009883a 	mov	r4,r16
8020a660:	880b883a 	mov	r5,r17
8020a664:	1027883a 	mov	r19,r2
8020a668:	1825883a 	mov	r18,r3
8020a66c:	0213dc40 	call	80213dc4 <__ledf2>
8020a670:	10000816 	blt	r2,zero,8020a694 <_dtoa_r+0x948>
8020a674:	980d883a 	mov	r6,r19
8020a678:	900f883a 	mov	r7,r18
8020a67c:	8009883a 	mov	r4,r16
8020a680:	880b883a 	mov	r5,r17
8020a684:	0213c600 	call	80213c60 <__eqdf2>
8020a688:	103f5a1e 	bne	r2,zero,8020a3f4 <__reset+0xfa1ea3f4>
8020a68c:	ad40004c 	andi	r21,r21,1
8020a690:	a83f5826 	beq	r21,zero,8020a3f4 <__reset+0xfa1ea3f4>
8020a694:	bd3fffc3 	ldbu	r20,-1(r23)
8020a698:	b8bfffc4 	addi	r2,r23,-1
8020a69c:	1007883a 	mov	r3,r2
8020a6a0:	01400e44 	movi	r5,57
8020a6a4:	d9800717 	ldw	r6,28(sp)
8020a6a8:	00000506 	br	8020a6c0 <_dtoa_r+0x974>
8020a6ac:	18ffffc4 	addi	r3,r3,-1
8020a6b0:	11824726 	beq	r2,r6,8020afd0 <_dtoa_r+0x1284>
8020a6b4:	1d000003 	ldbu	r20,0(r3)
8020a6b8:	102f883a 	mov	r23,r2
8020a6bc:	10bfffc4 	addi	r2,r2,-1
8020a6c0:	a1003fcc 	andi	r4,r20,255
8020a6c4:	2100201c 	xori	r4,r4,128
8020a6c8:	213fe004 	addi	r4,r4,-128
8020a6cc:	217ff726 	beq	r4,r5,8020a6ac <__reset+0xfa1ea6ac>
8020a6d0:	a2000044 	addi	r8,r20,1
8020a6d4:	12000005 	stb	r8,0(r2)
8020a6d8:	003f4606 	br	8020a3f4 <__reset+0xfa1ea3f4>
8020a6dc:	d9000b17 	ldw	r4,44(sp)
8020a6e0:	2000c826 	beq	r4,zero,8020aa04 <_dtoa_r+0xcb8>
8020a6e4:	d9800317 	ldw	r6,12(sp)
8020a6e8:	00c00044 	movi	r3,1
8020a6ec:	1980f90e 	bge	r3,r6,8020aad4 <_dtoa_r+0xd88>
8020a6f0:	d8800617 	ldw	r2,24(sp)
8020a6f4:	d8c00a17 	ldw	r3,40(sp)
8020a6f8:	157fffc4 	addi	r21,r2,-1
8020a6fc:	1d41f316 	blt	r3,r21,8020aecc <_dtoa_r+0x1180>
8020a700:	1d6bc83a 	sub	r21,r3,r21
8020a704:	d9c00617 	ldw	r7,24(sp)
8020a708:	3802aa16 	blt	r7,zero,8020b1b4 <_dtoa_r+0x1468>
8020a70c:	dd000817 	ldw	r20,32(sp)
8020a710:	d8800617 	ldw	r2,24(sp)
8020a714:	d8c00817 	ldw	r3,32(sp)
8020a718:	01400044 	movi	r5,1
8020a71c:	e009883a 	mov	r4,fp
8020a720:	1887883a 	add	r3,r3,r2
8020a724:	d8c00815 	stw	r3,32(sp)
8020a728:	b0ad883a 	add	r22,r22,r2
8020a72c:	020d6ac0 	call	8020d6ac <__i2b>
8020a730:	1023883a 	mov	r17,r2
8020a734:	a0000826 	beq	r20,zero,8020a758 <_dtoa_r+0xa0c>
8020a738:	0580070e 	bge	zero,r22,8020a758 <_dtoa_r+0xa0c>
8020a73c:	a005883a 	mov	r2,r20
8020a740:	b500b916 	blt	r22,r20,8020aa28 <_dtoa_r+0xcdc>
8020a744:	d9000817 	ldw	r4,32(sp)
8020a748:	a0a9c83a 	sub	r20,r20,r2
8020a74c:	b0adc83a 	sub	r22,r22,r2
8020a750:	2089c83a 	sub	r4,r4,r2
8020a754:	d9000815 	stw	r4,32(sp)
8020a758:	d9800a17 	ldw	r6,40(sp)
8020a75c:	0181810e 	bge	zero,r6,8020ad64 <_dtoa_r+0x1018>
8020a760:	d9c00b17 	ldw	r7,44(sp)
8020a764:	3800b326 	beq	r7,zero,8020aa34 <_dtoa_r+0xce8>
8020a768:	a800b226 	beq	r21,zero,8020aa34 <_dtoa_r+0xce8>
8020a76c:	880b883a 	mov	r5,r17
8020a770:	a80d883a 	mov	r6,r21
8020a774:	e009883a 	mov	r4,fp
8020a778:	020d8e00 	call	8020d8e0 <__pow5mult>
8020a77c:	d9800917 	ldw	r6,36(sp)
8020a780:	100b883a 	mov	r5,r2
8020a784:	e009883a 	mov	r4,fp
8020a788:	1023883a 	mov	r17,r2
8020a78c:	020d6e80 	call	8020d6e8 <__multiply>
8020a790:	1021883a 	mov	r16,r2
8020a794:	d8800a17 	ldw	r2,40(sp)
8020a798:	d9400917 	ldw	r5,36(sp)
8020a79c:	e009883a 	mov	r4,fp
8020a7a0:	1545c83a 	sub	r2,r2,r21
8020a7a4:	d8800a15 	stw	r2,40(sp)
8020a7a8:	020d3480 	call	8020d348 <_Bfree>
8020a7ac:	d8c00a17 	ldw	r3,40(sp)
8020a7b0:	18009f1e 	bne	r3,zero,8020aa30 <_dtoa_r+0xce4>
8020a7b4:	05c00044 	movi	r23,1
8020a7b8:	e009883a 	mov	r4,fp
8020a7bc:	b80b883a 	mov	r5,r23
8020a7c0:	020d6ac0 	call	8020d6ac <__i2b>
8020a7c4:	d9000d17 	ldw	r4,52(sp)
8020a7c8:	102b883a 	mov	r21,r2
8020a7cc:	2000ce26 	beq	r4,zero,8020ab08 <_dtoa_r+0xdbc>
8020a7d0:	200d883a 	mov	r6,r4
8020a7d4:	100b883a 	mov	r5,r2
8020a7d8:	e009883a 	mov	r4,fp
8020a7dc:	020d8e00 	call	8020d8e0 <__pow5mult>
8020a7e0:	d9800317 	ldw	r6,12(sp)
8020a7e4:	102b883a 	mov	r21,r2
8020a7e8:	b981810e 	bge	r23,r6,8020adf0 <_dtoa_r+0x10a4>
8020a7ec:	0027883a 	mov	r19,zero
8020a7f0:	a8800417 	ldw	r2,16(r21)
8020a7f4:	05c00804 	movi	r23,32
8020a7f8:	10800104 	addi	r2,r2,4
8020a7fc:	1085883a 	add	r2,r2,r2
8020a800:	1085883a 	add	r2,r2,r2
8020a804:	a885883a 	add	r2,r21,r2
8020a808:	11000017 	ldw	r4,0(r2)
8020a80c:	020d5940 	call	8020d594 <__hi0bits>
8020a810:	b885c83a 	sub	r2,r23,r2
8020a814:	1585883a 	add	r2,r2,r22
8020a818:	108007cc 	andi	r2,r2,31
8020a81c:	1000b326 	beq	r2,zero,8020aaec <_dtoa_r+0xda0>
8020a820:	00c00804 	movi	r3,32
8020a824:	1887c83a 	sub	r3,r3,r2
8020a828:	01000104 	movi	r4,4
8020a82c:	20c2cd0e 	bge	r4,r3,8020b364 <_dtoa_r+0x1618>
8020a830:	00c00704 	movi	r3,28
8020a834:	1885c83a 	sub	r2,r3,r2
8020a838:	d8c00817 	ldw	r3,32(sp)
8020a83c:	a0a9883a 	add	r20,r20,r2
8020a840:	b0ad883a 	add	r22,r22,r2
8020a844:	1887883a 	add	r3,r3,r2
8020a848:	d8c00815 	stw	r3,32(sp)
8020a84c:	d9800817 	ldw	r6,32(sp)
8020a850:	0180040e 	bge	zero,r6,8020a864 <_dtoa_r+0xb18>
8020a854:	800b883a 	mov	r5,r16
8020a858:	e009883a 	mov	r4,fp
8020a85c:	020da200 	call	8020da20 <__lshift>
8020a860:	1021883a 	mov	r16,r2
8020a864:	0580050e 	bge	zero,r22,8020a87c <_dtoa_r+0xb30>
8020a868:	a80b883a 	mov	r5,r21
8020a86c:	b00d883a 	mov	r6,r22
8020a870:	e009883a 	mov	r4,fp
8020a874:	020da200 	call	8020da20 <__lshift>
8020a878:	102b883a 	mov	r21,r2
8020a87c:	d9c00e17 	ldw	r7,56(sp)
8020a880:	3801211e 	bne	r7,zero,8020ad08 <_dtoa_r+0xfbc>
8020a884:	d9800617 	ldw	r6,24(sp)
8020a888:	0181380e 	bge	zero,r6,8020ad6c <_dtoa_r+0x1020>
8020a88c:	d8c00b17 	ldw	r3,44(sp)
8020a890:	1800ab1e 	bne	r3,zero,8020ab40 <_dtoa_r+0xdf4>
8020a894:	dc800717 	ldw	r18,28(sp)
8020a898:	dcc00617 	ldw	r19,24(sp)
8020a89c:	9029883a 	mov	r20,r18
8020a8a0:	00000206 	br	8020a8ac <_dtoa_r+0xb60>
8020a8a4:	020d3700 	call	8020d370 <__multadd>
8020a8a8:	1021883a 	mov	r16,r2
8020a8ac:	a80b883a 	mov	r5,r21
8020a8b0:	8009883a 	mov	r4,r16
8020a8b4:	0209b4c0 	call	80209b4c <quorem>
8020a8b8:	10800c04 	addi	r2,r2,48
8020a8bc:	90800005 	stb	r2,0(r18)
8020a8c0:	94800044 	addi	r18,r18,1
8020a8c4:	9507c83a 	sub	r3,r18,r20
8020a8c8:	000f883a 	mov	r7,zero
8020a8cc:	01800284 	movi	r6,10
8020a8d0:	800b883a 	mov	r5,r16
8020a8d4:	e009883a 	mov	r4,fp
8020a8d8:	1cfff216 	blt	r3,r19,8020a8a4 <__reset+0xfa1ea8a4>
8020a8dc:	1011883a 	mov	r8,r2
8020a8e0:	d8800617 	ldw	r2,24(sp)
8020a8e4:	0082370e 	bge	zero,r2,8020b1c4 <_dtoa_r+0x1478>
8020a8e8:	d9000717 	ldw	r4,28(sp)
8020a8ec:	0025883a 	mov	r18,zero
8020a8f0:	20af883a 	add	r23,r4,r2
8020a8f4:	01800044 	movi	r6,1
8020a8f8:	800b883a 	mov	r5,r16
8020a8fc:	e009883a 	mov	r4,fp
8020a900:	da001715 	stw	r8,92(sp)
8020a904:	020da200 	call	8020da20 <__lshift>
8020a908:	a80b883a 	mov	r5,r21
8020a90c:	1009883a 	mov	r4,r2
8020a910:	d8800915 	stw	r2,36(sp)
8020a914:	020db680 	call	8020db68 <__mcmp>
8020a918:	da001717 	ldw	r8,92(sp)
8020a91c:	0081800e 	bge	zero,r2,8020af20 <_dtoa_r+0x11d4>
8020a920:	b93fffc3 	ldbu	r4,-1(r23)
8020a924:	b8bfffc4 	addi	r2,r23,-1
8020a928:	1007883a 	mov	r3,r2
8020a92c:	01800e44 	movi	r6,57
8020a930:	d9c00717 	ldw	r7,28(sp)
8020a934:	00000506 	br	8020a94c <_dtoa_r+0xc00>
8020a938:	18ffffc4 	addi	r3,r3,-1
8020a93c:	11c12326 	beq	r2,r7,8020adcc <_dtoa_r+0x1080>
8020a940:	19000003 	ldbu	r4,0(r3)
8020a944:	102f883a 	mov	r23,r2
8020a948:	10bfffc4 	addi	r2,r2,-1
8020a94c:	21403fcc 	andi	r5,r4,255
8020a950:	2940201c 	xori	r5,r5,128
8020a954:	297fe004 	addi	r5,r5,-128
8020a958:	29bff726 	beq	r5,r6,8020a938 <__reset+0xfa1ea938>
8020a95c:	21000044 	addi	r4,r4,1
8020a960:	11000005 	stb	r4,0(r2)
8020a964:	a80b883a 	mov	r5,r21
8020a968:	e009883a 	mov	r4,fp
8020a96c:	020d3480 	call	8020d348 <_Bfree>
8020a970:	883ea026 	beq	r17,zero,8020a3f4 <__reset+0xfa1ea3f4>
8020a974:	90000426 	beq	r18,zero,8020a988 <_dtoa_r+0xc3c>
8020a978:	94400326 	beq	r18,r17,8020a988 <_dtoa_r+0xc3c>
8020a97c:	900b883a 	mov	r5,r18
8020a980:	e009883a 	mov	r4,fp
8020a984:	020d3480 	call	8020d348 <_Bfree>
8020a988:	880b883a 	mov	r5,r17
8020a98c:	e009883a 	mov	r4,fp
8020a990:	020d3480 	call	8020d348 <_Bfree>
8020a994:	003e9706 	br	8020a3f4 <__reset+0xfa1ea3f4>
8020a998:	01800044 	movi	r6,1
8020a99c:	d9800e15 	stw	r6,56(sp)
8020a9a0:	003d9606 	br	80209ffc <__reset+0xfa1e9ffc>
8020a9a4:	d8800817 	ldw	r2,32(sp)
8020a9a8:	d8c00517 	ldw	r3,20(sp)
8020a9ac:	d8000d15 	stw	zero,52(sp)
8020a9b0:	10c5c83a 	sub	r2,r2,r3
8020a9b4:	00c9c83a 	sub	r4,zero,r3
8020a9b8:	d8800815 	stw	r2,32(sp)
8020a9bc:	d9000a15 	stw	r4,40(sp)
8020a9c0:	003d9706 	br	8020a020 <__reset+0xfa1ea020>
8020a9c4:	05adc83a 	sub	r22,zero,r22
8020a9c8:	dd800815 	stw	r22,32(sp)
8020a9cc:	002d883a 	mov	r22,zero
8020a9d0:	003d8e06 	br	8020a00c <__reset+0xfa1ea00c>
8020a9d4:	d9000517 	ldw	r4,20(sp)
8020a9d8:	0214f4c0 	call	80214f4c <__floatsidf>
8020a9dc:	100d883a 	mov	r6,r2
8020a9e0:	180f883a 	mov	r7,r3
8020a9e4:	a009883a 	mov	r4,r20
8020a9e8:	880b883a 	mov	r5,r17
8020a9ec:	0213c600 	call	80213c60 <__eqdf2>
8020a9f0:	103d7126 	beq	r2,zero,80209fb8 <__reset+0xfa1e9fb8>
8020a9f4:	d9c00517 	ldw	r7,20(sp)
8020a9f8:	39ffffc4 	addi	r7,r7,-1
8020a9fc:	d9c00515 	stw	r7,20(sp)
8020aa00:	003d6d06 	br	80209fb8 <__reset+0xfa1e9fb8>
8020aa04:	dd400a17 	ldw	r21,40(sp)
8020aa08:	dd000817 	ldw	r20,32(sp)
8020aa0c:	0023883a 	mov	r17,zero
8020aa10:	003f4806 	br	8020a734 <__reset+0xfa1ea734>
8020aa14:	10e3c83a 	sub	r17,r2,r3
8020aa18:	9448983a 	sll	r4,r18,r17
8020aa1c:	003d3206 	br	80209ee8 <__reset+0xfa1e9ee8>
8020aa20:	d8000e15 	stw	zero,56(sp)
8020aa24:	003d7506 	br	80209ffc <__reset+0xfa1e9ffc>
8020aa28:	b005883a 	mov	r2,r22
8020aa2c:	003f4506 	br	8020a744 <__reset+0xfa1ea744>
8020aa30:	dc000915 	stw	r16,36(sp)
8020aa34:	d9800a17 	ldw	r6,40(sp)
8020aa38:	d9400917 	ldw	r5,36(sp)
8020aa3c:	e009883a 	mov	r4,fp
8020aa40:	020d8e00 	call	8020d8e0 <__pow5mult>
8020aa44:	1021883a 	mov	r16,r2
8020aa48:	003f5a06 	br	8020a7b4 <__reset+0xfa1ea7b4>
8020aa4c:	01c00044 	movi	r7,1
8020aa50:	d9c00b15 	stw	r7,44(sp)
8020aa54:	d8802217 	ldw	r2,136(sp)
8020aa58:	0081280e 	bge	zero,r2,8020aefc <_dtoa_r+0x11b0>
8020aa5c:	100d883a 	mov	r6,r2
8020aa60:	1021883a 	mov	r16,r2
8020aa64:	d8800c15 	stw	r2,48(sp)
8020aa68:	d8800615 	stw	r2,24(sp)
8020aa6c:	003d8806 	br	8020a090 <__reset+0xfa1ea090>
8020aa70:	d8800617 	ldw	r2,24(sp)
8020aa74:	00be9b16 	blt	zero,r2,8020a4e4 <__reset+0xfa1ea4e4>
8020aa78:	10010f1e 	bne	r2,zero,8020aeb8 <_dtoa_r+0x116c>
8020aa7c:	880b883a 	mov	r5,r17
8020aa80:	000d883a 	mov	r6,zero
8020aa84:	01d00534 	movhi	r7,16404
8020aa88:	8009883a 	mov	r4,r16
8020aa8c:	0213eb80 	call	80213eb8 <__muldf3>
8020aa90:	900d883a 	mov	r6,r18
8020aa94:	980f883a 	mov	r7,r19
8020aa98:	1009883a 	mov	r4,r2
8020aa9c:	180b883a 	mov	r5,r3
8020aaa0:	0213ce80 	call	80213ce8 <__gedf2>
8020aaa4:	002b883a 	mov	r21,zero
8020aaa8:	0023883a 	mov	r17,zero
8020aaac:	1000bf16 	blt	r2,zero,8020adac <_dtoa_r+0x1060>
8020aab0:	d9802217 	ldw	r6,136(sp)
8020aab4:	ddc00717 	ldw	r23,28(sp)
8020aab8:	018c303a 	nor	r6,zero,r6
8020aabc:	d9800515 	stw	r6,20(sp)
8020aac0:	a80b883a 	mov	r5,r21
8020aac4:	e009883a 	mov	r4,fp
8020aac8:	020d3480 	call	8020d348 <_Bfree>
8020aacc:	883e4926 	beq	r17,zero,8020a3f4 <__reset+0xfa1ea3f4>
8020aad0:	003fad06 	br	8020a988 <__reset+0xfa1ea988>
8020aad4:	d9c01117 	ldw	r7,68(sp)
8020aad8:	3801bc26 	beq	r7,zero,8020b1cc <_dtoa_r+0x1480>
8020aadc:	10810cc4 	addi	r2,r2,1075
8020aae0:	dd400a17 	ldw	r21,40(sp)
8020aae4:	dd000817 	ldw	r20,32(sp)
8020aae8:	003f0a06 	br	8020a714 <__reset+0xfa1ea714>
8020aaec:	00800704 	movi	r2,28
8020aaf0:	d9000817 	ldw	r4,32(sp)
8020aaf4:	a0a9883a 	add	r20,r20,r2
8020aaf8:	b0ad883a 	add	r22,r22,r2
8020aafc:	2089883a 	add	r4,r4,r2
8020ab00:	d9000815 	stw	r4,32(sp)
8020ab04:	003f5106 	br	8020a84c <__reset+0xfa1ea84c>
8020ab08:	d8c00317 	ldw	r3,12(sp)
8020ab0c:	b8c1fc0e 	bge	r23,r3,8020b300 <_dtoa_r+0x15b4>
8020ab10:	0027883a 	mov	r19,zero
8020ab14:	b805883a 	mov	r2,r23
8020ab18:	003f3e06 	br	8020a814 <__reset+0xfa1ea814>
8020ab1c:	880b883a 	mov	r5,r17
8020ab20:	e009883a 	mov	r4,fp
8020ab24:	000f883a 	mov	r7,zero
8020ab28:	01800284 	movi	r6,10
8020ab2c:	020d3700 	call	8020d370 <__multadd>
8020ab30:	d9000c17 	ldw	r4,48(sp)
8020ab34:	1023883a 	mov	r17,r2
8020ab38:	0102040e 	bge	zero,r4,8020b34c <_dtoa_r+0x1600>
8020ab3c:	d9000615 	stw	r4,24(sp)
8020ab40:	0500050e 	bge	zero,r20,8020ab58 <_dtoa_r+0xe0c>
8020ab44:	880b883a 	mov	r5,r17
8020ab48:	a00d883a 	mov	r6,r20
8020ab4c:	e009883a 	mov	r4,fp
8020ab50:	020da200 	call	8020da20 <__lshift>
8020ab54:	1023883a 	mov	r17,r2
8020ab58:	9801241e 	bne	r19,zero,8020afec <_dtoa_r+0x12a0>
8020ab5c:	8829883a 	mov	r20,r17
8020ab60:	d9000617 	ldw	r4,24(sp)
8020ab64:	dcc00717 	ldw	r19,28(sp)
8020ab68:	9480004c 	andi	r18,r18,1
8020ab6c:	20bfffc4 	addi	r2,r4,-1
8020ab70:	9885883a 	add	r2,r19,r2
8020ab74:	d8800415 	stw	r2,16(sp)
8020ab78:	dc800615 	stw	r18,24(sp)
8020ab7c:	a80b883a 	mov	r5,r21
8020ab80:	8009883a 	mov	r4,r16
8020ab84:	0209b4c0 	call	80209b4c <quorem>
8020ab88:	880b883a 	mov	r5,r17
8020ab8c:	8009883a 	mov	r4,r16
8020ab90:	102f883a 	mov	r23,r2
8020ab94:	020db680 	call	8020db68 <__mcmp>
8020ab98:	a80b883a 	mov	r5,r21
8020ab9c:	a00d883a 	mov	r6,r20
8020aba0:	e009883a 	mov	r4,fp
8020aba4:	102d883a 	mov	r22,r2
8020aba8:	020dbc80 	call	8020dbc8 <__mdiff>
8020abac:	1007883a 	mov	r3,r2
8020abb0:	10800317 	ldw	r2,12(r2)
8020abb4:	bc800c04 	addi	r18,r23,48
8020abb8:	180b883a 	mov	r5,r3
8020abbc:	10004e1e 	bne	r2,zero,8020acf8 <_dtoa_r+0xfac>
8020abc0:	8009883a 	mov	r4,r16
8020abc4:	d8c01615 	stw	r3,88(sp)
8020abc8:	020db680 	call	8020db68 <__mcmp>
8020abcc:	d8c01617 	ldw	r3,88(sp)
8020abd0:	e009883a 	mov	r4,fp
8020abd4:	d8801615 	stw	r2,88(sp)
8020abd8:	180b883a 	mov	r5,r3
8020abdc:	020d3480 	call	8020d348 <_Bfree>
8020abe0:	d8801617 	ldw	r2,88(sp)
8020abe4:	1000041e 	bne	r2,zero,8020abf8 <_dtoa_r+0xeac>
8020abe8:	d9800317 	ldw	r6,12(sp)
8020abec:	3000021e 	bne	r6,zero,8020abf8 <_dtoa_r+0xeac>
8020abf0:	d8c00617 	ldw	r3,24(sp)
8020abf4:	18003726 	beq	r3,zero,8020acd4 <_dtoa_r+0xf88>
8020abf8:	b0002016 	blt	r22,zero,8020ac7c <_dtoa_r+0xf30>
8020abfc:	b000041e 	bne	r22,zero,8020ac10 <_dtoa_r+0xec4>
8020ac00:	d9000317 	ldw	r4,12(sp)
8020ac04:	2000021e 	bne	r4,zero,8020ac10 <_dtoa_r+0xec4>
8020ac08:	d8c00617 	ldw	r3,24(sp)
8020ac0c:	18001b26 	beq	r3,zero,8020ac7c <_dtoa_r+0xf30>
8020ac10:	00810716 	blt	zero,r2,8020b030 <_dtoa_r+0x12e4>
8020ac14:	d8c00417 	ldw	r3,16(sp)
8020ac18:	9d800044 	addi	r22,r19,1
8020ac1c:	9c800005 	stb	r18,0(r19)
8020ac20:	b02f883a 	mov	r23,r22
8020ac24:	98c10626 	beq	r19,r3,8020b040 <_dtoa_r+0x12f4>
8020ac28:	800b883a 	mov	r5,r16
8020ac2c:	000f883a 	mov	r7,zero
8020ac30:	01800284 	movi	r6,10
8020ac34:	e009883a 	mov	r4,fp
8020ac38:	020d3700 	call	8020d370 <__multadd>
8020ac3c:	1021883a 	mov	r16,r2
8020ac40:	000f883a 	mov	r7,zero
8020ac44:	01800284 	movi	r6,10
8020ac48:	880b883a 	mov	r5,r17
8020ac4c:	e009883a 	mov	r4,fp
8020ac50:	8d002526 	beq	r17,r20,8020ace8 <_dtoa_r+0xf9c>
8020ac54:	020d3700 	call	8020d370 <__multadd>
8020ac58:	a00b883a 	mov	r5,r20
8020ac5c:	000f883a 	mov	r7,zero
8020ac60:	01800284 	movi	r6,10
8020ac64:	e009883a 	mov	r4,fp
8020ac68:	1023883a 	mov	r17,r2
8020ac6c:	020d3700 	call	8020d370 <__multadd>
8020ac70:	1029883a 	mov	r20,r2
8020ac74:	b027883a 	mov	r19,r22
8020ac78:	003fc006 	br	8020ab7c <__reset+0xfa1eab7c>
8020ac7c:	9011883a 	mov	r8,r18
8020ac80:	00800e0e 	bge	zero,r2,8020acbc <_dtoa_r+0xf70>
8020ac84:	800b883a 	mov	r5,r16
8020ac88:	01800044 	movi	r6,1
8020ac8c:	e009883a 	mov	r4,fp
8020ac90:	da001715 	stw	r8,92(sp)
8020ac94:	020da200 	call	8020da20 <__lshift>
8020ac98:	a80b883a 	mov	r5,r21
8020ac9c:	1009883a 	mov	r4,r2
8020aca0:	1021883a 	mov	r16,r2
8020aca4:	020db680 	call	8020db68 <__mcmp>
8020aca8:	da001717 	ldw	r8,92(sp)
8020acac:	0081960e 	bge	zero,r2,8020b308 <_dtoa_r+0x15bc>
8020acb0:	00800e44 	movi	r2,57
8020acb4:	40817026 	beq	r8,r2,8020b278 <_dtoa_r+0x152c>
8020acb8:	ba000c44 	addi	r8,r23,49
8020acbc:	8825883a 	mov	r18,r17
8020acc0:	9dc00044 	addi	r23,r19,1
8020acc4:	9a000005 	stb	r8,0(r19)
8020acc8:	a023883a 	mov	r17,r20
8020accc:	dc000915 	stw	r16,36(sp)
8020acd0:	003f2406 	br	8020a964 <__reset+0xfa1ea964>
8020acd4:	00800e44 	movi	r2,57
8020acd8:	9011883a 	mov	r8,r18
8020acdc:	90816626 	beq	r18,r2,8020b278 <_dtoa_r+0x152c>
8020ace0:	05bff516 	blt	zero,r22,8020acb8 <__reset+0xfa1eacb8>
8020ace4:	003ff506 	br	8020acbc <__reset+0xfa1eacbc>
8020ace8:	020d3700 	call	8020d370 <__multadd>
8020acec:	1023883a 	mov	r17,r2
8020acf0:	1029883a 	mov	r20,r2
8020acf4:	003fdf06 	br	8020ac74 <__reset+0xfa1eac74>
8020acf8:	e009883a 	mov	r4,fp
8020acfc:	020d3480 	call	8020d348 <_Bfree>
8020ad00:	00800044 	movi	r2,1
8020ad04:	003fbc06 	br	8020abf8 <__reset+0xfa1eabf8>
8020ad08:	a80b883a 	mov	r5,r21
8020ad0c:	8009883a 	mov	r4,r16
8020ad10:	020db680 	call	8020db68 <__mcmp>
8020ad14:	103edb0e 	bge	r2,zero,8020a884 <__reset+0xfa1ea884>
8020ad18:	800b883a 	mov	r5,r16
8020ad1c:	000f883a 	mov	r7,zero
8020ad20:	01800284 	movi	r6,10
8020ad24:	e009883a 	mov	r4,fp
8020ad28:	020d3700 	call	8020d370 <__multadd>
8020ad2c:	1021883a 	mov	r16,r2
8020ad30:	d8800517 	ldw	r2,20(sp)
8020ad34:	d8c00b17 	ldw	r3,44(sp)
8020ad38:	10bfffc4 	addi	r2,r2,-1
8020ad3c:	d8800515 	stw	r2,20(sp)
8020ad40:	183f761e 	bne	r3,zero,8020ab1c <__reset+0xfa1eab1c>
8020ad44:	d9000c17 	ldw	r4,48(sp)
8020ad48:	0101730e 	bge	zero,r4,8020b318 <_dtoa_r+0x15cc>
8020ad4c:	d9000615 	stw	r4,24(sp)
8020ad50:	003ed006 	br	8020a894 <__reset+0xfa1ea894>
8020ad54:	00800084 	movi	r2,2
8020ad58:	3081861e 	bne	r6,r2,8020b374 <_dtoa_r+0x1628>
8020ad5c:	d8000b15 	stw	zero,44(sp)
8020ad60:	003f3c06 	br	8020aa54 <__reset+0xfa1eaa54>
8020ad64:	dc000917 	ldw	r16,36(sp)
8020ad68:	003e9206 	br	8020a7b4 <__reset+0xfa1ea7b4>
8020ad6c:	d9c00317 	ldw	r7,12(sp)
8020ad70:	00800084 	movi	r2,2
8020ad74:	11fec50e 	bge	r2,r7,8020a88c <__reset+0xfa1ea88c>
8020ad78:	d9000617 	ldw	r4,24(sp)
8020ad7c:	20013c1e 	bne	r4,zero,8020b270 <_dtoa_r+0x1524>
8020ad80:	a80b883a 	mov	r5,r21
8020ad84:	000f883a 	mov	r7,zero
8020ad88:	01800144 	movi	r6,5
8020ad8c:	e009883a 	mov	r4,fp
8020ad90:	020d3700 	call	8020d370 <__multadd>
8020ad94:	100b883a 	mov	r5,r2
8020ad98:	8009883a 	mov	r4,r16
8020ad9c:	102b883a 	mov	r21,r2
8020ada0:	020db680 	call	8020db68 <__mcmp>
8020ada4:	dc000915 	stw	r16,36(sp)
8020ada8:	00bf410e 	bge	zero,r2,8020aab0 <__reset+0xfa1eaab0>
8020adac:	d9c00717 	ldw	r7,28(sp)
8020adb0:	00800c44 	movi	r2,49
8020adb4:	38800005 	stb	r2,0(r7)
8020adb8:	d8800517 	ldw	r2,20(sp)
8020adbc:	3dc00044 	addi	r23,r7,1
8020adc0:	10800044 	addi	r2,r2,1
8020adc4:	d8800515 	stw	r2,20(sp)
8020adc8:	003f3d06 	br	8020aac0 <__reset+0xfa1eaac0>
8020adcc:	d9800517 	ldw	r6,20(sp)
8020add0:	d9c00717 	ldw	r7,28(sp)
8020add4:	00800c44 	movi	r2,49
8020add8:	31800044 	addi	r6,r6,1
8020addc:	d9800515 	stw	r6,20(sp)
8020ade0:	38800005 	stb	r2,0(r7)
8020ade4:	003edf06 	br	8020a964 <__reset+0xfa1ea964>
8020ade8:	d8000b15 	stw	zero,44(sp)
8020adec:	003c9f06 	br	8020a06c <__reset+0xfa1ea06c>
8020adf0:	903e7e1e 	bne	r18,zero,8020a7ec <__reset+0xfa1ea7ec>
8020adf4:	00800434 	movhi	r2,16
8020adf8:	10bfffc4 	addi	r2,r2,-1
8020adfc:	9884703a 	and	r2,r19,r2
8020ae00:	1000ea1e 	bne	r2,zero,8020b1ac <_dtoa_r+0x1460>
8020ae04:	9cdffc2c 	andhi	r19,r19,32752
8020ae08:	9800e826 	beq	r19,zero,8020b1ac <_dtoa_r+0x1460>
8020ae0c:	d9c00817 	ldw	r7,32(sp)
8020ae10:	b5800044 	addi	r22,r22,1
8020ae14:	04c00044 	movi	r19,1
8020ae18:	39c00044 	addi	r7,r7,1
8020ae1c:	d9c00815 	stw	r7,32(sp)
8020ae20:	d8800d17 	ldw	r2,52(sp)
8020ae24:	103e721e 	bne	r2,zero,8020a7f0 <__reset+0xfa1ea7f0>
8020ae28:	00800044 	movi	r2,1
8020ae2c:	003e7906 	br	8020a814 <__reset+0xfa1ea814>
8020ae30:	8009883a 	mov	r4,r16
8020ae34:	0214f4c0 	call	80214f4c <__floatsidf>
8020ae38:	d9800f17 	ldw	r6,60(sp)
8020ae3c:	d9c01017 	ldw	r7,64(sp)
8020ae40:	1009883a 	mov	r4,r2
8020ae44:	180b883a 	mov	r5,r3
8020ae48:	0213eb80 	call	80213eb8 <__muldf3>
8020ae4c:	000d883a 	mov	r6,zero
8020ae50:	01d00734 	movhi	r7,16412
8020ae54:	1009883a 	mov	r4,r2
8020ae58:	180b883a 	mov	r5,r3
8020ae5c:	0212acc0 	call	80212acc <__adddf3>
8020ae60:	047f3034 	movhi	r17,64704
8020ae64:	1021883a 	mov	r16,r2
8020ae68:	1c63883a 	add	r17,r3,r17
8020ae6c:	d9000f17 	ldw	r4,60(sp)
8020ae70:	d9401017 	ldw	r5,64(sp)
8020ae74:	000d883a 	mov	r6,zero
8020ae78:	01d00534 	movhi	r7,16404
8020ae7c:	02145d00 	call	802145d0 <__subdf3>
8020ae80:	800d883a 	mov	r6,r16
8020ae84:	880f883a 	mov	r7,r17
8020ae88:	1009883a 	mov	r4,r2
8020ae8c:	180b883a 	mov	r5,r3
8020ae90:	102b883a 	mov	r21,r2
8020ae94:	1829883a 	mov	r20,r3
8020ae98:	0213ce80 	call	80213ce8 <__gedf2>
8020ae9c:	00806c16 	blt	zero,r2,8020b050 <_dtoa_r+0x1304>
8020aea0:	89e0003c 	xorhi	r7,r17,32768
8020aea4:	800d883a 	mov	r6,r16
8020aea8:	a809883a 	mov	r4,r21
8020aeac:	a00b883a 	mov	r5,r20
8020aeb0:	0213dc40 	call	80213dc4 <__ledf2>
8020aeb4:	103d7e0e 	bge	r2,zero,8020a4b0 <__reset+0xfa1ea4b0>
8020aeb8:	002b883a 	mov	r21,zero
8020aebc:	0023883a 	mov	r17,zero
8020aec0:	003efb06 	br	8020aab0 <__reset+0xfa1eaab0>
8020aec4:	d8800717 	ldw	r2,28(sp)
8020aec8:	003bd006 	br	80209e0c <__reset+0xfa1e9e0c>
8020aecc:	d9000a17 	ldw	r4,40(sp)
8020aed0:	d9800d17 	ldw	r6,52(sp)
8020aed4:	dd400a15 	stw	r21,40(sp)
8020aed8:	a905c83a 	sub	r2,r21,r4
8020aedc:	308d883a 	add	r6,r6,r2
8020aee0:	d9800d15 	stw	r6,52(sp)
8020aee4:	002b883a 	mov	r21,zero
8020aee8:	003e0606 	br	8020a704 <__reset+0xfa1ea704>
8020aeec:	9023883a 	mov	r17,r18
8020aef0:	9829883a 	mov	r20,r19
8020aef4:	04000084 	movi	r16,2
8020aef8:	003c9206 	br	8020a144 <__reset+0xfa1ea144>
8020aefc:	04000044 	movi	r16,1
8020af00:	dc000c15 	stw	r16,48(sp)
8020af04:	dc000615 	stw	r16,24(sp)
8020af08:	dc002215 	stw	r16,136(sp)
8020af0c:	e0001115 	stw	zero,68(fp)
8020af10:	000b883a 	mov	r5,zero
8020af14:	003c6906 	br	8020a0bc <__reset+0xfa1ea0bc>
8020af18:	3021883a 	mov	r16,r6
8020af1c:	003ffb06 	br	8020af0c <__reset+0xfa1eaf0c>
8020af20:	1000021e 	bne	r2,zero,8020af2c <_dtoa_r+0x11e0>
8020af24:	4200004c 	andi	r8,r8,1
8020af28:	403e7d1e 	bne	r8,zero,8020a920 <__reset+0xfa1ea920>
8020af2c:	01000c04 	movi	r4,48
8020af30:	00000106 	br	8020af38 <_dtoa_r+0x11ec>
8020af34:	102f883a 	mov	r23,r2
8020af38:	b8bfffc4 	addi	r2,r23,-1
8020af3c:	10c00007 	ldb	r3,0(r2)
8020af40:	193ffc26 	beq	r3,r4,8020af34 <__reset+0xfa1eaf34>
8020af44:	003e8706 	br	8020a964 <__reset+0xfa1ea964>
8020af48:	d8800517 	ldw	r2,20(sp)
8020af4c:	00a3c83a 	sub	r17,zero,r2
8020af50:	8800a426 	beq	r17,zero,8020b1e4 <_dtoa_r+0x1498>
8020af54:	888003cc 	andi	r2,r17,15
8020af58:	100490fa 	slli	r2,r2,3
8020af5c:	00e008b4 	movhi	r3,32802
8020af60:	18ecf604 	addi	r3,r3,-19496
8020af64:	1885883a 	add	r2,r3,r2
8020af68:	11800017 	ldw	r6,0(r2)
8020af6c:	11c00117 	ldw	r7,4(r2)
8020af70:	9009883a 	mov	r4,r18
8020af74:	980b883a 	mov	r5,r19
8020af78:	8823d13a 	srai	r17,r17,4
8020af7c:	0213eb80 	call	80213eb8 <__muldf3>
8020af80:	d8800f15 	stw	r2,60(sp)
8020af84:	d8c01015 	stw	r3,64(sp)
8020af88:	8800e826 	beq	r17,zero,8020b32c <_dtoa_r+0x15e0>
8020af8c:	052008b4 	movhi	r20,32802
8020af90:	a52cec04 	addi	r20,r20,-19536
8020af94:	04000084 	movi	r16,2
8020af98:	8980004c 	andi	r6,r17,1
8020af9c:	1009883a 	mov	r4,r2
8020afa0:	8823d07a 	srai	r17,r17,1
8020afa4:	180b883a 	mov	r5,r3
8020afa8:	30000426 	beq	r6,zero,8020afbc <_dtoa_r+0x1270>
8020afac:	a1800017 	ldw	r6,0(r20)
8020afb0:	a1c00117 	ldw	r7,4(r20)
8020afb4:	84000044 	addi	r16,r16,1
8020afb8:	0213eb80 	call	80213eb8 <__muldf3>
8020afbc:	a5000204 	addi	r20,r20,8
8020afc0:	883ff51e 	bne	r17,zero,8020af98 <__reset+0xfa1eaf98>
8020afc4:	d8800f15 	stw	r2,60(sp)
8020afc8:	d8c01015 	stw	r3,64(sp)
8020afcc:	003c7606 	br	8020a1a8 <__reset+0xfa1ea1a8>
8020afd0:	00c00c04 	movi	r3,48
8020afd4:	10c00005 	stb	r3,0(r2)
8020afd8:	d8c00517 	ldw	r3,20(sp)
8020afdc:	bd3fffc3 	ldbu	r20,-1(r23)
8020afe0:	18c00044 	addi	r3,r3,1
8020afe4:	d8c00515 	stw	r3,20(sp)
8020afe8:	003db906 	br	8020a6d0 <__reset+0xfa1ea6d0>
8020afec:	89400117 	ldw	r5,4(r17)
8020aff0:	e009883a 	mov	r4,fp
8020aff4:	020d2a00 	call	8020d2a0 <_Balloc>
8020aff8:	89800417 	ldw	r6,16(r17)
8020affc:	89400304 	addi	r5,r17,12
8020b000:	11000304 	addi	r4,r2,12
8020b004:	31800084 	addi	r6,r6,2
8020b008:	318d883a 	add	r6,r6,r6
8020b00c:	318d883a 	add	r6,r6,r6
8020b010:	1027883a 	mov	r19,r2
8020b014:	020516c0 	call	8020516c <memcpy>
8020b018:	01800044 	movi	r6,1
8020b01c:	980b883a 	mov	r5,r19
8020b020:	e009883a 	mov	r4,fp
8020b024:	020da200 	call	8020da20 <__lshift>
8020b028:	1029883a 	mov	r20,r2
8020b02c:	003ecc06 	br	8020ab60 <__reset+0xfa1eab60>
8020b030:	00800e44 	movi	r2,57
8020b034:	90809026 	beq	r18,r2,8020b278 <_dtoa_r+0x152c>
8020b038:	92000044 	addi	r8,r18,1
8020b03c:	003f1f06 	br	8020acbc <__reset+0xfa1eacbc>
8020b040:	9011883a 	mov	r8,r18
8020b044:	8825883a 	mov	r18,r17
8020b048:	a023883a 	mov	r17,r20
8020b04c:	003e2906 	br	8020a8f4 <__reset+0xfa1ea8f4>
8020b050:	002b883a 	mov	r21,zero
8020b054:	0023883a 	mov	r17,zero
8020b058:	003f5406 	br	8020adac <__reset+0xfa1eadac>
8020b05c:	61bfffc4 	addi	r6,r12,-1
8020b060:	300490fa 	slli	r2,r6,3
8020b064:	00e008b4 	movhi	r3,32802
8020b068:	18ecf604 	addi	r3,r3,-19496
8020b06c:	1885883a 	add	r2,r3,r2
8020b070:	11000017 	ldw	r4,0(r2)
8020b074:	11400117 	ldw	r5,4(r2)
8020b078:	d8800717 	ldw	r2,28(sp)
8020b07c:	880f883a 	mov	r7,r17
8020b080:	d9801215 	stw	r6,72(sp)
8020b084:	800d883a 	mov	r6,r16
8020b088:	db001615 	stw	r12,88(sp)
8020b08c:	15c00044 	addi	r23,r2,1
8020b090:	0213eb80 	call	80213eb8 <__muldf3>
8020b094:	d9401017 	ldw	r5,64(sp)
8020b098:	d9000f17 	ldw	r4,60(sp)
8020b09c:	d8c01515 	stw	r3,84(sp)
8020b0a0:	d8801415 	stw	r2,80(sp)
8020b0a4:	0214ecc0 	call	80214ecc <__fixdfsi>
8020b0a8:	1009883a 	mov	r4,r2
8020b0ac:	1021883a 	mov	r16,r2
8020b0b0:	0214f4c0 	call	80214f4c <__floatsidf>
8020b0b4:	d9000f17 	ldw	r4,60(sp)
8020b0b8:	d9401017 	ldw	r5,64(sp)
8020b0bc:	100d883a 	mov	r6,r2
8020b0c0:	180f883a 	mov	r7,r3
8020b0c4:	02145d00 	call	802145d0 <__subdf3>
8020b0c8:	1829883a 	mov	r20,r3
8020b0cc:	d8c00717 	ldw	r3,28(sp)
8020b0d0:	84000c04 	addi	r16,r16,48
8020b0d4:	1023883a 	mov	r17,r2
8020b0d8:	1c000005 	stb	r16,0(r3)
8020b0dc:	db001617 	ldw	r12,88(sp)
8020b0e0:	00800044 	movi	r2,1
8020b0e4:	60802226 	beq	r12,r2,8020b170 <_dtoa_r+0x1424>
8020b0e8:	d9c00717 	ldw	r7,28(sp)
8020b0ec:	8805883a 	mov	r2,r17
8020b0f0:	b82b883a 	mov	r21,r23
8020b0f4:	3b19883a 	add	r12,r7,r12
8020b0f8:	6023883a 	mov	r17,r12
8020b0fc:	a007883a 	mov	r3,r20
8020b100:	dc800f15 	stw	r18,60(sp)
8020b104:	000d883a 	mov	r6,zero
8020b108:	01d00934 	movhi	r7,16420
8020b10c:	1009883a 	mov	r4,r2
8020b110:	180b883a 	mov	r5,r3
8020b114:	0213eb80 	call	80213eb8 <__muldf3>
8020b118:	180b883a 	mov	r5,r3
8020b11c:	1009883a 	mov	r4,r2
8020b120:	1829883a 	mov	r20,r3
8020b124:	1025883a 	mov	r18,r2
8020b128:	0214ecc0 	call	80214ecc <__fixdfsi>
8020b12c:	1009883a 	mov	r4,r2
8020b130:	1021883a 	mov	r16,r2
8020b134:	0214f4c0 	call	80214f4c <__floatsidf>
8020b138:	100d883a 	mov	r6,r2
8020b13c:	180f883a 	mov	r7,r3
8020b140:	9009883a 	mov	r4,r18
8020b144:	a00b883a 	mov	r5,r20
8020b148:	84000c04 	addi	r16,r16,48
8020b14c:	02145d00 	call	802145d0 <__subdf3>
8020b150:	ad400044 	addi	r21,r21,1
8020b154:	ac3fffc5 	stb	r16,-1(r21)
8020b158:	ac7fea1e 	bne	r21,r17,8020b104 <__reset+0xfa1eb104>
8020b15c:	1023883a 	mov	r17,r2
8020b160:	d8801217 	ldw	r2,72(sp)
8020b164:	dc800f17 	ldw	r18,60(sp)
8020b168:	1829883a 	mov	r20,r3
8020b16c:	b8af883a 	add	r23,r23,r2
8020b170:	d9001417 	ldw	r4,80(sp)
8020b174:	d9401517 	ldw	r5,84(sp)
8020b178:	000d883a 	mov	r6,zero
8020b17c:	01cff834 	movhi	r7,16352
8020b180:	0212acc0 	call	80212acc <__adddf3>
8020b184:	880d883a 	mov	r6,r17
8020b188:	a00f883a 	mov	r7,r20
8020b18c:	1009883a 	mov	r4,r2
8020b190:	180b883a 	mov	r5,r3
8020b194:	0213dc40 	call	80213dc4 <__ledf2>
8020b198:	10003e0e 	bge	r2,zero,8020b294 <_dtoa_r+0x1548>
8020b19c:	d9001317 	ldw	r4,76(sp)
8020b1a0:	bd3fffc3 	ldbu	r20,-1(r23)
8020b1a4:	d9000515 	stw	r4,20(sp)
8020b1a8:	003d3b06 	br	8020a698 <__reset+0xfa1ea698>
8020b1ac:	0027883a 	mov	r19,zero
8020b1b0:	003f1b06 	br	8020ae20 <__reset+0xfa1eae20>
8020b1b4:	d8800817 	ldw	r2,32(sp)
8020b1b8:	11e9c83a 	sub	r20,r2,r7
8020b1bc:	0005883a 	mov	r2,zero
8020b1c0:	003d5406 	br	8020a714 <__reset+0xfa1ea714>
8020b1c4:	00800044 	movi	r2,1
8020b1c8:	003dc706 	br	8020a8e8 <__reset+0xfa1ea8e8>
8020b1cc:	d8c00217 	ldw	r3,8(sp)
8020b1d0:	00800d84 	movi	r2,54
8020b1d4:	dd400a17 	ldw	r21,40(sp)
8020b1d8:	10c5c83a 	sub	r2,r2,r3
8020b1dc:	dd000817 	ldw	r20,32(sp)
8020b1e0:	003d4c06 	br	8020a714 <__reset+0xfa1ea714>
8020b1e4:	dc800f15 	stw	r18,60(sp)
8020b1e8:	dcc01015 	stw	r19,64(sp)
8020b1ec:	04000084 	movi	r16,2
8020b1f0:	003bed06 	br	8020a1a8 <__reset+0xfa1ea1a8>
8020b1f4:	d9000617 	ldw	r4,24(sp)
8020b1f8:	203f0d26 	beq	r4,zero,8020ae30 <__reset+0xfa1eae30>
8020b1fc:	d9800c17 	ldw	r6,48(sp)
8020b200:	01bcab0e 	bge	zero,r6,8020a4b0 <__reset+0xfa1ea4b0>
8020b204:	d9401017 	ldw	r5,64(sp)
8020b208:	d9000f17 	ldw	r4,60(sp)
8020b20c:	000d883a 	mov	r6,zero
8020b210:	01d00934 	movhi	r7,16420
8020b214:	0213eb80 	call	80213eb8 <__muldf3>
8020b218:	81000044 	addi	r4,r16,1
8020b21c:	d8800f15 	stw	r2,60(sp)
8020b220:	d8c01015 	stw	r3,64(sp)
8020b224:	0214f4c0 	call	80214f4c <__floatsidf>
8020b228:	d9800f17 	ldw	r6,60(sp)
8020b22c:	d9c01017 	ldw	r7,64(sp)
8020b230:	1009883a 	mov	r4,r2
8020b234:	180b883a 	mov	r5,r3
8020b238:	0213eb80 	call	80213eb8 <__muldf3>
8020b23c:	01d00734 	movhi	r7,16412
8020b240:	000d883a 	mov	r6,zero
8020b244:	1009883a 	mov	r4,r2
8020b248:	180b883a 	mov	r5,r3
8020b24c:	0212acc0 	call	80212acc <__adddf3>
8020b250:	d9c00517 	ldw	r7,20(sp)
8020b254:	047f3034 	movhi	r17,64704
8020b258:	1021883a 	mov	r16,r2
8020b25c:	39ffffc4 	addi	r7,r7,-1
8020b260:	d9c01315 	stw	r7,76(sp)
8020b264:	1c63883a 	add	r17,r3,r17
8020b268:	db000c17 	ldw	r12,48(sp)
8020b26c:	003bea06 	br	8020a218 <__reset+0xfa1ea218>
8020b270:	dc000915 	stw	r16,36(sp)
8020b274:	003e0e06 	br	8020aab0 <__reset+0xfa1eaab0>
8020b278:	01000e44 	movi	r4,57
8020b27c:	8825883a 	mov	r18,r17
8020b280:	9dc00044 	addi	r23,r19,1
8020b284:	99000005 	stb	r4,0(r19)
8020b288:	a023883a 	mov	r17,r20
8020b28c:	dc000915 	stw	r16,36(sp)
8020b290:	003da406 	br	8020a924 <__reset+0xfa1ea924>
8020b294:	d9801417 	ldw	r6,80(sp)
8020b298:	d9c01517 	ldw	r7,84(sp)
8020b29c:	0009883a 	mov	r4,zero
8020b2a0:	014ff834 	movhi	r5,16352
8020b2a4:	02145d00 	call	802145d0 <__subdf3>
8020b2a8:	880d883a 	mov	r6,r17
8020b2ac:	a00f883a 	mov	r7,r20
8020b2b0:	1009883a 	mov	r4,r2
8020b2b4:	180b883a 	mov	r5,r3
8020b2b8:	0213ce80 	call	80213ce8 <__gedf2>
8020b2bc:	00bc7c0e 	bge	zero,r2,8020a4b0 <__reset+0xfa1ea4b0>
8020b2c0:	01000c04 	movi	r4,48
8020b2c4:	00000106 	br	8020b2cc <_dtoa_r+0x1580>
8020b2c8:	102f883a 	mov	r23,r2
8020b2cc:	b8bfffc4 	addi	r2,r23,-1
8020b2d0:	10c00007 	ldb	r3,0(r2)
8020b2d4:	193ffc26 	beq	r3,r4,8020b2c8 <__reset+0xfa1eb2c8>
8020b2d8:	d9801317 	ldw	r6,76(sp)
8020b2dc:	d9800515 	stw	r6,20(sp)
8020b2e0:	003c4406 	br	8020a3f4 <__reset+0xfa1ea3f4>
8020b2e4:	d9801317 	ldw	r6,76(sp)
8020b2e8:	d9800515 	stw	r6,20(sp)
8020b2ec:	003cea06 	br	8020a698 <__reset+0xfa1ea698>
8020b2f0:	dd800f17 	ldw	r22,60(sp)
8020b2f4:	dcc01017 	ldw	r19,64(sp)
8020b2f8:	dc801217 	ldw	r18,72(sp)
8020b2fc:	003c6c06 	br	8020a4b0 <__reset+0xfa1ea4b0>
8020b300:	903e031e 	bne	r18,zero,8020ab10 <__reset+0xfa1eab10>
8020b304:	003ebb06 	br	8020adf4 <__reset+0xfa1eadf4>
8020b308:	103e6c1e 	bne	r2,zero,8020acbc <__reset+0xfa1eacbc>
8020b30c:	4080004c 	andi	r2,r8,1
8020b310:	103e6a26 	beq	r2,zero,8020acbc <__reset+0xfa1eacbc>
8020b314:	003e6606 	br	8020acb0 <__reset+0xfa1eacb0>
8020b318:	d8c00317 	ldw	r3,12(sp)
8020b31c:	00800084 	movi	r2,2
8020b320:	10c02916 	blt	r2,r3,8020b3c8 <_dtoa_r+0x167c>
8020b324:	d9000c17 	ldw	r4,48(sp)
8020b328:	003e8806 	br	8020ad4c <__reset+0xfa1ead4c>
8020b32c:	04000084 	movi	r16,2
8020b330:	003b9d06 	br	8020a1a8 <__reset+0xfa1ea1a8>
8020b334:	d9001317 	ldw	r4,76(sp)
8020b338:	d9000515 	stw	r4,20(sp)
8020b33c:	003cd606 	br	8020a698 <__reset+0xfa1ea698>
8020b340:	d8801317 	ldw	r2,76(sp)
8020b344:	d8800515 	stw	r2,20(sp)
8020b348:	003c2a06 	br	8020a3f4 <__reset+0xfa1ea3f4>
8020b34c:	d9800317 	ldw	r6,12(sp)
8020b350:	00800084 	movi	r2,2
8020b354:	11801516 	blt	r2,r6,8020b3ac <_dtoa_r+0x1660>
8020b358:	d9c00c17 	ldw	r7,48(sp)
8020b35c:	d9c00615 	stw	r7,24(sp)
8020b360:	003df706 	br	8020ab40 <__reset+0xfa1eab40>
8020b364:	193d3926 	beq	r3,r4,8020a84c <__reset+0xfa1ea84c>
8020b368:	00c00f04 	movi	r3,60
8020b36c:	1885c83a 	sub	r2,r3,r2
8020b370:	003ddf06 	br	8020aaf0 <__reset+0xfa1eaaf0>
8020b374:	e009883a 	mov	r4,fp
8020b378:	e0001115 	stw	zero,68(fp)
8020b37c:	000b883a 	mov	r5,zero
8020b380:	020d2a00 	call	8020d2a0 <_Balloc>
8020b384:	d8800715 	stw	r2,28(sp)
8020b388:	d8c00717 	ldw	r3,28(sp)
8020b38c:	00bfffc4 	movi	r2,-1
8020b390:	01000044 	movi	r4,1
8020b394:	d8800c15 	stw	r2,48(sp)
8020b398:	e0c01015 	stw	r3,64(fp)
8020b39c:	d9000b15 	stw	r4,44(sp)
8020b3a0:	d8800615 	stw	r2,24(sp)
8020b3a4:	d8002215 	stw	zero,136(sp)
8020b3a8:	003c4106 	br	8020a4b0 <__reset+0xfa1ea4b0>
8020b3ac:	d8c00c17 	ldw	r3,48(sp)
8020b3b0:	d8c00615 	stw	r3,24(sp)
8020b3b4:	003e7006 	br	8020ad78 <__reset+0xfa1ead78>
8020b3b8:	04400044 	movi	r17,1
8020b3bc:	003b2006 	br	8020a040 <__reset+0xfa1ea040>
8020b3c0:	000b883a 	mov	r5,zero
8020b3c4:	003b3d06 	br	8020a0bc <__reset+0xfa1ea0bc>
8020b3c8:	d8800c17 	ldw	r2,48(sp)
8020b3cc:	d8800615 	stw	r2,24(sp)
8020b3d0:	003e6906 	br	8020ad78 <__reset+0xfa1ead78>

8020b3d4 <__sflush_r>:
8020b3d4:	2880030b 	ldhu	r2,12(r5)
8020b3d8:	defffb04 	addi	sp,sp,-20
8020b3dc:	dcc00315 	stw	r19,12(sp)
8020b3e0:	dc400115 	stw	r17,4(sp)
8020b3e4:	dfc00415 	stw	ra,16(sp)
8020b3e8:	dc800215 	stw	r18,8(sp)
8020b3ec:	dc000015 	stw	r16,0(sp)
8020b3f0:	10c0020c 	andi	r3,r2,8
8020b3f4:	2823883a 	mov	r17,r5
8020b3f8:	2027883a 	mov	r19,r4
8020b3fc:	1800311e 	bne	r3,zero,8020b4c4 <__sflush_r+0xf0>
8020b400:	28c00117 	ldw	r3,4(r5)
8020b404:	10820014 	ori	r2,r2,2048
8020b408:	2880030d 	sth	r2,12(r5)
8020b40c:	00c04b0e 	bge	zero,r3,8020b53c <__sflush_r+0x168>
8020b410:	8a000a17 	ldw	r8,40(r17)
8020b414:	40002326 	beq	r8,zero,8020b4a4 <__sflush_r+0xd0>
8020b418:	9c000017 	ldw	r16,0(r19)
8020b41c:	10c4000c 	andi	r3,r2,4096
8020b420:	98000015 	stw	zero,0(r19)
8020b424:	18004826 	beq	r3,zero,8020b548 <__sflush_r+0x174>
8020b428:	89801417 	ldw	r6,80(r17)
8020b42c:	10c0010c 	andi	r3,r2,4
8020b430:	18000626 	beq	r3,zero,8020b44c <__sflush_r+0x78>
8020b434:	88c00117 	ldw	r3,4(r17)
8020b438:	88800c17 	ldw	r2,48(r17)
8020b43c:	30cdc83a 	sub	r6,r6,r3
8020b440:	10000226 	beq	r2,zero,8020b44c <__sflush_r+0x78>
8020b444:	88800f17 	ldw	r2,60(r17)
8020b448:	308dc83a 	sub	r6,r6,r2
8020b44c:	89400717 	ldw	r5,28(r17)
8020b450:	000f883a 	mov	r7,zero
8020b454:	9809883a 	mov	r4,r19
8020b458:	403ee83a 	callr	r8
8020b45c:	00ffffc4 	movi	r3,-1
8020b460:	10c04426 	beq	r2,r3,8020b574 <__sflush_r+0x1a0>
8020b464:	88c0030b 	ldhu	r3,12(r17)
8020b468:	89000417 	ldw	r4,16(r17)
8020b46c:	88000115 	stw	zero,4(r17)
8020b470:	197dffcc 	andi	r5,r3,63487
8020b474:	8940030d 	sth	r5,12(r17)
8020b478:	89000015 	stw	r4,0(r17)
8020b47c:	18c4000c 	andi	r3,r3,4096
8020b480:	18002c1e 	bne	r3,zero,8020b534 <__sflush_r+0x160>
8020b484:	89400c17 	ldw	r5,48(r17)
8020b488:	9c000015 	stw	r16,0(r19)
8020b48c:	28000526 	beq	r5,zero,8020b4a4 <__sflush_r+0xd0>
8020b490:	88801004 	addi	r2,r17,64
8020b494:	28800226 	beq	r5,r2,8020b4a0 <__sflush_r+0xcc>
8020b498:	9809883a 	mov	r4,r19
8020b49c:	020bb400 	call	8020bb40 <_free_r>
8020b4a0:	88000c15 	stw	zero,48(r17)
8020b4a4:	0005883a 	mov	r2,zero
8020b4a8:	dfc00417 	ldw	ra,16(sp)
8020b4ac:	dcc00317 	ldw	r19,12(sp)
8020b4b0:	dc800217 	ldw	r18,8(sp)
8020b4b4:	dc400117 	ldw	r17,4(sp)
8020b4b8:	dc000017 	ldw	r16,0(sp)
8020b4bc:	dec00504 	addi	sp,sp,20
8020b4c0:	f800283a 	ret
8020b4c4:	2c800417 	ldw	r18,16(r5)
8020b4c8:	903ff626 	beq	r18,zero,8020b4a4 <__reset+0xfa1eb4a4>
8020b4cc:	2c000017 	ldw	r16,0(r5)
8020b4d0:	108000cc 	andi	r2,r2,3
8020b4d4:	2c800015 	stw	r18,0(r5)
8020b4d8:	84a1c83a 	sub	r16,r16,r18
8020b4dc:	1000131e 	bne	r2,zero,8020b52c <__sflush_r+0x158>
8020b4e0:	28800517 	ldw	r2,20(r5)
8020b4e4:	88800215 	stw	r2,8(r17)
8020b4e8:	04000316 	blt	zero,r16,8020b4f8 <__sflush_r+0x124>
8020b4ec:	003fed06 	br	8020b4a4 <__reset+0xfa1eb4a4>
8020b4f0:	90a5883a 	add	r18,r18,r2
8020b4f4:	043feb0e 	bge	zero,r16,8020b4a4 <__reset+0xfa1eb4a4>
8020b4f8:	88800917 	ldw	r2,36(r17)
8020b4fc:	89400717 	ldw	r5,28(r17)
8020b500:	800f883a 	mov	r7,r16
8020b504:	900d883a 	mov	r6,r18
8020b508:	9809883a 	mov	r4,r19
8020b50c:	103ee83a 	callr	r2
8020b510:	80a1c83a 	sub	r16,r16,r2
8020b514:	00bff616 	blt	zero,r2,8020b4f0 <__reset+0xfa1eb4f0>
8020b518:	88c0030b 	ldhu	r3,12(r17)
8020b51c:	00bfffc4 	movi	r2,-1
8020b520:	18c01014 	ori	r3,r3,64
8020b524:	88c0030d 	sth	r3,12(r17)
8020b528:	003fdf06 	br	8020b4a8 <__reset+0xfa1eb4a8>
8020b52c:	0005883a 	mov	r2,zero
8020b530:	003fec06 	br	8020b4e4 <__reset+0xfa1eb4e4>
8020b534:	88801415 	stw	r2,80(r17)
8020b538:	003fd206 	br	8020b484 <__reset+0xfa1eb484>
8020b53c:	28c00f17 	ldw	r3,60(r5)
8020b540:	00ffb316 	blt	zero,r3,8020b410 <__reset+0xfa1eb410>
8020b544:	003fd706 	br	8020b4a4 <__reset+0xfa1eb4a4>
8020b548:	89400717 	ldw	r5,28(r17)
8020b54c:	000d883a 	mov	r6,zero
8020b550:	01c00044 	movi	r7,1
8020b554:	9809883a 	mov	r4,r19
8020b558:	403ee83a 	callr	r8
8020b55c:	100d883a 	mov	r6,r2
8020b560:	00bfffc4 	movi	r2,-1
8020b564:	30801426 	beq	r6,r2,8020b5b8 <__sflush_r+0x1e4>
8020b568:	8880030b 	ldhu	r2,12(r17)
8020b56c:	8a000a17 	ldw	r8,40(r17)
8020b570:	003fae06 	br	8020b42c <__reset+0xfa1eb42c>
8020b574:	98c00017 	ldw	r3,0(r19)
8020b578:	183fba26 	beq	r3,zero,8020b464 <__reset+0xfa1eb464>
8020b57c:	01000744 	movi	r4,29
8020b580:	19000626 	beq	r3,r4,8020b59c <__sflush_r+0x1c8>
8020b584:	01000584 	movi	r4,22
8020b588:	19000426 	beq	r3,r4,8020b59c <__sflush_r+0x1c8>
8020b58c:	88c0030b 	ldhu	r3,12(r17)
8020b590:	18c01014 	ori	r3,r3,64
8020b594:	88c0030d 	sth	r3,12(r17)
8020b598:	003fc306 	br	8020b4a8 <__reset+0xfa1eb4a8>
8020b59c:	8880030b 	ldhu	r2,12(r17)
8020b5a0:	88c00417 	ldw	r3,16(r17)
8020b5a4:	88000115 	stw	zero,4(r17)
8020b5a8:	10bdffcc 	andi	r2,r2,63487
8020b5ac:	8880030d 	sth	r2,12(r17)
8020b5b0:	88c00015 	stw	r3,0(r17)
8020b5b4:	003fb306 	br	8020b484 <__reset+0xfa1eb484>
8020b5b8:	98800017 	ldw	r2,0(r19)
8020b5bc:	103fea26 	beq	r2,zero,8020b568 <__reset+0xfa1eb568>
8020b5c0:	00c00744 	movi	r3,29
8020b5c4:	10c00226 	beq	r2,r3,8020b5d0 <__sflush_r+0x1fc>
8020b5c8:	00c00584 	movi	r3,22
8020b5cc:	10c0031e 	bne	r2,r3,8020b5dc <__sflush_r+0x208>
8020b5d0:	9c000015 	stw	r16,0(r19)
8020b5d4:	0005883a 	mov	r2,zero
8020b5d8:	003fb306 	br	8020b4a8 <__reset+0xfa1eb4a8>
8020b5dc:	88c0030b 	ldhu	r3,12(r17)
8020b5e0:	3005883a 	mov	r2,r6
8020b5e4:	18c01014 	ori	r3,r3,64
8020b5e8:	88c0030d 	sth	r3,12(r17)
8020b5ec:	003fae06 	br	8020b4a8 <__reset+0xfa1eb4a8>

8020b5f0 <_fflush_r>:
8020b5f0:	defffd04 	addi	sp,sp,-12
8020b5f4:	dc000115 	stw	r16,4(sp)
8020b5f8:	dfc00215 	stw	ra,8(sp)
8020b5fc:	2021883a 	mov	r16,r4
8020b600:	20000226 	beq	r4,zero,8020b60c <_fflush_r+0x1c>
8020b604:	20800e17 	ldw	r2,56(r4)
8020b608:	10000c26 	beq	r2,zero,8020b63c <_fflush_r+0x4c>
8020b60c:	2880030f 	ldh	r2,12(r5)
8020b610:	1000051e 	bne	r2,zero,8020b628 <_fflush_r+0x38>
8020b614:	0005883a 	mov	r2,zero
8020b618:	dfc00217 	ldw	ra,8(sp)
8020b61c:	dc000117 	ldw	r16,4(sp)
8020b620:	dec00304 	addi	sp,sp,12
8020b624:	f800283a 	ret
8020b628:	8009883a 	mov	r4,r16
8020b62c:	dfc00217 	ldw	ra,8(sp)
8020b630:	dc000117 	ldw	r16,4(sp)
8020b634:	dec00304 	addi	sp,sp,12
8020b638:	020b3d41 	jmpi	8020b3d4 <__sflush_r>
8020b63c:	d9400015 	stw	r5,0(sp)
8020b640:	020b9cc0 	call	8020b9cc <__sinit>
8020b644:	d9400017 	ldw	r5,0(sp)
8020b648:	003ff006 	br	8020b60c <__reset+0xfa1eb60c>

8020b64c <fflush>:
8020b64c:	20000526 	beq	r4,zero,8020b664 <fflush+0x18>
8020b650:	00a008b4 	movhi	r2,32802
8020b654:	10b4fd04 	addi	r2,r2,-11276
8020b658:	200b883a 	mov	r5,r4
8020b65c:	11000017 	ldw	r4,0(r2)
8020b660:	020b5f01 	jmpi	8020b5f0 <_fflush_r>
8020b664:	00a008b4 	movhi	r2,32802
8020b668:	10b4fc04 	addi	r2,r2,-11280
8020b66c:	11000017 	ldw	r4,0(r2)
8020b670:	01600874 	movhi	r5,32801
8020b674:	296d7c04 	addi	r5,r5,-18960
8020b678:	020c3d01 	jmpi	8020c3d0 <_fwalk_reent>

8020b67c <__fp_unlock>:
8020b67c:	0005883a 	mov	r2,zero
8020b680:	f800283a 	ret

8020b684 <_cleanup_r>:
8020b684:	01600874 	movhi	r5,32801
8020b688:	2945ab04 	addi	r5,r5,5804
8020b68c:	020c3d01 	jmpi	8020c3d0 <_fwalk_reent>

8020b690 <__sinit.part.1>:
8020b690:	defff704 	addi	sp,sp,-36
8020b694:	00e00874 	movhi	r3,32801
8020b698:	dfc00815 	stw	ra,32(sp)
8020b69c:	ddc00715 	stw	r23,28(sp)
8020b6a0:	dd800615 	stw	r22,24(sp)
8020b6a4:	dd400515 	stw	r21,20(sp)
8020b6a8:	dd000415 	stw	r20,16(sp)
8020b6ac:	dcc00315 	stw	r19,12(sp)
8020b6b0:	dc800215 	stw	r18,8(sp)
8020b6b4:	dc400115 	stw	r17,4(sp)
8020b6b8:	dc000015 	stw	r16,0(sp)
8020b6bc:	18eda104 	addi	r3,r3,-18812
8020b6c0:	24000117 	ldw	r16,4(r4)
8020b6c4:	20c00f15 	stw	r3,60(r4)
8020b6c8:	2080bb04 	addi	r2,r4,748
8020b6cc:	00c000c4 	movi	r3,3
8020b6d0:	20c0b915 	stw	r3,740(r4)
8020b6d4:	2080ba15 	stw	r2,744(r4)
8020b6d8:	2000b815 	stw	zero,736(r4)
8020b6dc:	05c00204 	movi	r23,8
8020b6e0:	00800104 	movi	r2,4
8020b6e4:	2025883a 	mov	r18,r4
8020b6e8:	b80d883a 	mov	r6,r23
8020b6ec:	81001704 	addi	r4,r16,92
8020b6f0:	000b883a 	mov	r5,zero
8020b6f4:	80000015 	stw	zero,0(r16)
8020b6f8:	80000115 	stw	zero,4(r16)
8020b6fc:	80000215 	stw	zero,8(r16)
8020b700:	8080030d 	sth	r2,12(r16)
8020b704:	80001915 	stw	zero,100(r16)
8020b708:	8000038d 	sth	zero,14(r16)
8020b70c:	80000415 	stw	zero,16(r16)
8020b710:	80000515 	stw	zero,20(r16)
8020b714:	80000615 	stw	zero,24(r16)
8020b718:	020d1780 	call	8020d178 <memset>
8020b71c:	05a00874 	movhi	r22,32801
8020b720:	94400217 	ldw	r17,8(r18)
8020b724:	05600874 	movhi	r21,32801
8020b728:	05200874 	movhi	r20,32801
8020b72c:	04e00874 	movhi	r19,32801
8020b730:	b5ba3204 	addi	r22,r22,-5944
8020b734:	ad7a4904 	addi	r21,r21,-5852
8020b738:	a53a6804 	addi	r20,r20,-5728
8020b73c:	9cfa7f04 	addi	r19,r19,-5636
8020b740:	85800815 	stw	r22,32(r16)
8020b744:	85400915 	stw	r21,36(r16)
8020b748:	85000a15 	stw	r20,40(r16)
8020b74c:	84c00b15 	stw	r19,44(r16)
8020b750:	84000715 	stw	r16,28(r16)
8020b754:	00800284 	movi	r2,10
8020b758:	8880030d 	sth	r2,12(r17)
8020b75c:	00800044 	movi	r2,1
8020b760:	b80d883a 	mov	r6,r23
8020b764:	89001704 	addi	r4,r17,92
8020b768:	000b883a 	mov	r5,zero
8020b76c:	88000015 	stw	zero,0(r17)
8020b770:	88000115 	stw	zero,4(r17)
8020b774:	88000215 	stw	zero,8(r17)
8020b778:	88001915 	stw	zero,100(r17)
8020b77c:	8880038d 	sth	r2,14(r17)
8020b780:	88000415 	stw	zero,16(r17)
8020b784:	88000515 	stw	zero,20(r17)
8020b788:	88000615 	stw	zero,24(r17)
8020b78c:	020d1780 	call	8020d178 <memset>
8020b790:	94000317 	ldw	r16,12(r18)
8020b794:	00800484 	movi	r2,18
8020b798:	8c400715 	stw	r17,28(r17)
8020b79c:	8d800815 	stw	r22,32(r17)
8020b7a0:	8d400915 	stw	r21,36(r17)
8020b7a4:	8d000a15 	stw	r20,40(r17)
8020b7a8:	8cc00b15 	stw	r19,44(r17)
8020b7ac:	8080030d 	sth	r2,12(r16)
8020b7b0:	00800084 	movi	r2,2
8020b7b4:	80000015 	stw	zero,0(r16)
8020b7b8:	80000115 	stw	zero,4(r16)
8020b7bc:	80000215 	stw	zero,8(r16)
8020b7c0:	80001915 	stw	zero,100(r16)
8020b7c4:	8080038d 	sth	r2,14(r16)
8020b7c8:	80000415 	stw	zero,16(r16)
8020b7cc:	80000515 	stw	zero,20(r16)
8020b7d0:	80000615 	stw	zero,24(r16)
8020b7d4:	b80d883a 	mov	r6,r23
8020b7d8:	000b883a 	mov	r5,zero
8020b7dc:	81001704 	addi	r4,r16,92
8020b7e0:	020d1780 	call	8020d178 <memset>
8020b7e4:	00800044 	movi	r2,1
8020b7e8:	84000715 	stw	r16,28(r16)
8020b7ec:	85800815 	stw	r22,32(r16)
8020b7f0:	85400915 	stw	r21,36(r16)
8020b7f4:	85000a15 	stw	r20,40(r16)
8020b7f8:	84c00b15 	stw	r19,44(r16)
8020b7fc:	90800e15 	stw	r2,56(r18)
8020b800:	dfc00817 	ldw	ra,32(sp)
8020b804:	ddc00717 	ldw	r23,28(sp)
8020b808:	dd800617 	ldw	r22,24(sp)
8020b80c:	dd400517 	ldw	r21,20(sp)
8020b810:	dd000417 	ldw	r20,16(sp)
8020b814:	dcc00317 	ldw	r19,12(sp)
8020b818:	dc800217 	ldw	r18,8(sp)
8020b81c:	dc400117 	ldw	r17,4(sp)
8020b820:	dc000017 	ldw	r16,0(sp)
8020b824:	dec00904 	addi	sp,sp,36
8020b828:	f800283a 	ret

8020b82c <__fp_lock>:
8020b82c:	0005883a 	mov	r2,zero
8020b830:	f800283a 	ret

8020b834 <__sfmoreglue>:
8020b834:	defffc04 	addi	sp,sp,-16
8020b838:	dc400115 	stw	r17,4(sp)
8020b83c:	2c7fffc4 	addi	r17,r5,-1
8020b840:	8c401a24 	muli	r17,r17,104
8020b844:	dc800215 	stw	r18,8(sp)
8020b848:	2825883a 	mov	r18,r5
8020b84c:	89401d04 	addi	r5,r17,116
8020b850:	dc000015 	stw	r16,0(sp)
8020b854:	dfc00315 	stw	ra,12(sp)
8020b858:	020c72c0 	call	8020c72c <_malloc_r>
8020b85c:	1021883a 	mov	r16,r2
8020b860:	10000726 	beq	r2,zero,8020b880 <__sfmoreglue+0x4c>
8020b864:	11000304 	addi	r4,r2,12
8020b868:	10000015 	stw	zero,0(r2)
8020b86c:	14800115 	stw	r18,4(r2)
8020b870:	11000215 	stw	r4,8(r2)
8020b874:	89801a04 	addi	r6,r17,104
8020b878:	000b883a 	mov	r5,zero
8020b87c:	020d1780 	call	8020d178 <memset>
8020b880:	8005883a 	mov	r2,r16
8020b884:	dfc00317 	ldw	ra,12(sp)
8020b888:	dc800217 	ldw	r18,8(sp)
8020b88c:	dc400117 	ldw	r17,4(sp)
8020b890:	dc000017 	ldw	r16,0(sp)
8020b894:	dec00404 	addi	sp,sp,16
8020b898:	f800283a 	ret

8020b89c <__sfp>:
8020b89c:	defffb04 	addi	sp,sp,-20
8020b8a0:	dc000015 	stw	r16,0(sp)
8020b8a4:	042008b4 	movhi	r16,32802
8020b8a8:	8434fc04 	addi	r16,r16,-11280
8020b8ac:	dcc00315 	stw	r19,12(sp)
8020b8b0:	2027883a 	mov	r19,r4
8020b8b4:	81000017 	ldw	r4,0(r16)
8020b8b8:	dfc00415 	stw	ra,16(sp)
8020b8bc:	dc800215 	stw	r18,8(sp)
8020b8c0:	20800e17 	ldw	r2,56(r4)
8020b8c4:	dc400115 	stw	r17,4(sp)
8020b8c8:	1000021e 	bne	r2,zero,8020b8d4 <__sfp+0x38>
8020b8cc:	020b6900 	call	8020b690 <__sinit.part.1>
8020b8d0:	81000017 	ldw	r4,0(r16)
8020b8d4:	2480b804 	addi	r18,r4,736
8020b8d8:	047fffc4 	movi	r17,-1
8020b8dc:	91000117 	ldw	r4,4(r18)
8020b8e0:	94000217 	ldw	r16,8(r18)
8020b8e4:	213fffc4 	addi	r4,r4,-1
8020b8e8:	20000a16 	blt	r4,zero,8020b914 <__sfp+0x78>
8020b8ec:	8080030f 	ldh	r2,12(r16)
8020b8f0:	10000c26 	beq	r2,zero,8020b924 <__sfp+0x88>
8020b8f4:	80c01d04 	addi	r3,r16,116
8020b8f8:	00000206 	br	8020b904 <__sfp+0x68>
8020b8fc:	18bfe60f 	ldh	r2,-104(r3)
8020b900:	10000826 	beq	r2,zero,8020b924 <__sfp+0x88>
8020b904:	213fffc4 	addi	r4,r4,-1
8020b908:	1c3ffd04 	addi	r16,r3,-12
8020b90c:	18c01a04 	addi	r3,r3,104
8020b910:	247ffa1e 	bne	r4,r17,8020b8fc <__reset+0xfa1eb8fc>
8020b914:	90800017 	ldw	r2,0(r18)
8020b918:	10001d26 	beq	r2,zero,8020b990 <__sfp+0xf4>
8020b91c:	1025883a 	mov	r18,r2
8020b920:	003fee06 	br	8020b8dc <__reset+0xfa1eb8dc>
8020b924:	00bfffc4 	movi	r2,-1
8020b928:	8080038d 	sth	r2,14(r16)
8020b92c:	00800044 	movi	r2,1
8020b930:	8080030d 	sth	r2,12(r16)
8020b934:	80001915 	stw	zero,100(r16)
8020b938:	80000015 	stw	zero,0(r16)
8020b93c:	80000215 	stw	zero,8(r16)
8020b940:	80000115 	stw	zero,4(r16)
8020b944:	80000415 	stw	zero,16(r16)
8020b948:	80000515 	stw	zero,20(r16)
8020b94c:	80000615 	stw	zero,24(r16)
8020b950:	01800204 	movi	r6,8
8020b954:	000b883a 	mov	r5,zero
8020b958:	81001704 	addi	r4,r16,92
8020b95c:	020d1780 	call	8020d178 <memset>
8020b960:	8005883a 	mov	r2,r16
8020b964:	80000c15 	stw	zero,48(r16)
8020b968:	80000d15 	stw	zero,52(r16)
8020b96c:	80001115 	stw	zero,68(r16)
8020b970:	80001215 	stw	zero,72(r16)
8020b974:	dfc00417 	ldw	ra,16(sp)
8020b978:	dcc00317 	ldw	r19,12(sp)
8020b97c:	dc800217 	ldw	r18,8(sp)
8020b980:	dc400117 	ldw	r17,4(sp)
8020b984:	dc000017 	ldw	r16,0(sp)
8020b988:	dec00504 	addi	sp,sp,20
8020b98c:	f800283a 	ret
8020b990:	01400104 	movi	r5,4
8020b994:	9809883a 	mov	r4,r19
8020b998:	020b8340 	call	8020b834 <__sfmoreglue>
8020b99c:	90800015 	stw	r2,0(r18)
8020b9a0:	103fde1e 	bne	r2,zero,8020b91c <__reset+0xfa1eb91c>
8020b9a4:	00800304 	movi	r2,12
8020b9a8:	98800015 	stw	r2,0(r19)
8020b9ac:	0005883a 	mov	r2,zero
8020b9b0:	003ff006 	br	8020b974 <__reset+0xfa1eb974>

8020b9b4 <_cleanup>:
8020b9b4:	00a008b4 	movhi	r2,32802
8020b9b8:	10b4fc04 	addi	r2,r2,-11280
8020b9bc:	11000017 	ldw	r4,0(r2)
8020b9c0:	01600874 	movhi	r5,32801
8020b9c4:	2945ab04 	addi	r5,r5,5804
8020b9c8:	020c3d01 	jmpi	8020c3d0 <_fwalk_reent>

8020b9cc <__sinit>:
8020b9cc:	20800e17 	ldw	r2,56(r4)
8020b9d0:	10000126 	beq	r2,zero,8020b9d8 <__sinit+0xc>
8020b9d4:	f800283a 	ret
8020b9d8:	020b6901 	jmpi	8020b690 <__sinit.part.1>

8020b9dc <__sfp_lock_acquire>:
8020b9dc:	f800283a 	ret

8020b9e0 <__sfp_lock_release>:
8020b9e0:	f800283a 	ret

8020b9e4 <__sinit_lock_acquire>:
8020b9e4:	f800283a 	ret

8020b9e8 <__sinit_lock_release>:
8020b9e8:	f800283a 	ret

8020b9ec <__fp_lock_all>:
8020b9ec:	00a008b4 	movhi	r2,32802
8020b9f0:	10b4fd04 	addi	r2,r2,-11276
8020b9f4:	11000017 	ldw	r4,0(r2)
8020b9f8:	01600874 	movhi	r5,32801
8020b9fc:	296e0b04 	addi	r5,r5,-18388
8020ba00:	020c30c1 	jmpi	8020c30c <_fwalk>

8020ba04 <__fp_unlock_all>:
8020ba04:	00a008b4 	movhi	r2,32802
8020ba08:	10b4fd04 	addi	r2,r2,-11276
8020ba0c:	11000017 	ldw	r4,0(r2)
8020ba10:	01600874 	movhi	r5,32801
8020ba14:	296d9f04 	addi	r5,r5,-18820
8020ba18:	020c30c1 	jmpi	8020c30c <_fwalk>

8020ba1c <_malloc_trim_r>:
8020ba1c:	defffb04 	addi	sp,sp,-20
8020ba20:	dcc00315 	stw	r19,12(sp)
8020ba24:	04e008b4 	movhi	r19,32802
8020ba28:	dc800215 	stw	r18,8(sp)
8020ba2c:	dc400115 	stw	r17,4(sp)
8020ba30:	dc000015 	stw	r16,0(sp)
8020ba34:	dfc00415 	stw	ra,16(sp)
8020ba38:	2821883a 	mov	r16,r5
8020ba3c:	9cef0704 	addi	r19,r19,-17380
8020ba40:	2025883a 	mov	r18,r4
8020ba44:	02156a80 	call	802156a8 <__malloc_lock>
8020ba48:	98800217 	ldw	r2,8(r19)
8020ba4c:	14400117 	ldw	r17,4(r2)
8020ba50:	00bfff04 	movi	r2,-4
8020ba54:	88a2703a 	and	r17,r17,r2
8020ba58:	8c21c83a 	sub	r16,r17,r16
8020ba5c:	8403fbc4 	addi	r16,r16,4079
8020ba60:	8020d33a 	srli	r16,r16,12
8020ba64:	0083ffc4 	movi	r2,4095
8020ba68:	843fffc4 	addi	r16,r16,-1
8020ba6c:	8020933a 	slli	r16,r16,12
8020ba70:	1400060e 	bge	r2,r16,8020ba8c <_malloc_trim_r+0x70>
8020ba74:	000b883a 	mov	r5,zero
8020ba78:	9009883a 	mov	r4,r18
8020ba7c:	020e8740 	call	8020e874 <_sbrk_r>
8020ba80:	98c00217 	ldw	r3,8(r19)
8020ba84:	1c47883a 	add	r3,r3,r17
8020ba88:	10c00a26 	beq	r2,r3,8020bab4 <_malloc_trim_r+0x98>
8020ba8c:	9009883a 	mov	r4,r18
8020ba90:	02156cc0 	call	802156cc <__malloc_unlock>
8020ba94:	0005883a 	mov	r2,zero
8020ba98:	dfc00417 	ldw	ra,16(sp)
8020ba9c:	dcc00317 	ldw	r19,12(sp)
8020baa0:	dc800217 	ldw	r18,8(sp)
8020baa4:	dc400117 	ldw	r17,4(sp)
8020baa8:	dc000017 	ldw	r16,0(sp)
8020baac:	dec00504 	addi	sp,sp,20
8020bab0:	f800283a 	ret
8020bab4:	040bc83a 	sub	r5,zero,r16
8020bab8:	9009883a 	mov	r4,r18
8020babc:	020e8740 	call	8020e874 <_sbrk_r>
8020bac0:	00ffffc4 	movi	r3,-1
8020bac4:	10c00d26 	beq	r2,r3,8020bafc <_malloc_trim_r+0xe0>
8020bac8:	00e008b4 	movhi	r3,32802
8020bacc:	18f52304 	addi	r3,r3,-11124
8020bad0:	18800017 	ldw	r2,0(r3)
8020bad4:	99000217 	ldw	r4,8(r19)
8020bad8:	8c23c83a 	sub	r17,r17,r16
8020badc:	8c400054 	ori	r17,r17,1
8020bae0:	1421c83a 	sub	r16,r2,r16
8020bae4:	24400115 	stw	r17,4(r4)
8020bae8:	9009883a 	mov	r4,r18
8020baec:	1c000015 	stw	r16,0(r3)
8020baf0:	02156cc0 	call	802156cc <__malloc_unlock>
8020baf4:	00800044 	movi	r2,1
8020baf8:	003fe706 	br	8020ba98 <__reset+0xfa1eba98>
8020bafc:	000b883a 	mov	r5,zero
8020bb00:	9009883a 	mov	r4,r18
8020bb04:	020e8740 	call	8020e874 <_sbrk_r>
8020bb08:	99000217 	ldw	r4,8(r19)
8020bb0c:	014003c4 	movi	r5,15
8020bb10:	1107c83a 	sub	r3,r2,r4
8020bb14:	28ffdd0e 	bge	r5,r3,8020ba8c <__reset+0xfa1eba8c>
8020bb18:	016008b4 	movhi	r5,32802
8020bb1c:	2974ff04 	addi	r5,r5,-11268
8020bb20:	29400017 	ldw	r5,0(r5)
8020bb24:	18c00054 	ori	r3,r3,1
8020bb28:	20c00115 	stw	r3,4(r4)
8020bb2c:	00e008b4 	movhi	r3,32802
8020bb30:	1145c83a 	sub	r2,r2,r5
8020bb34:	18f52304 	addi	r3,r3,-11124
8020bb38:	18800015 	stw	r2,0(r3)
8020bb3c:	003fd306 	br	8020ba8c <__reset+0xfa1eba8c>

8020bb40 <_free_r>:
8020bb40:	28004126 	beq	r5,zero,8020bc48 <_free_r+0x108>
8020bb44:	defffd04 	addi	sp,sp,-12
8020bb48:	dc400115 	stw	r17,4(sp)
8020bb4c:	dc000015 	stw	r16,0(sp)
8020bb50:	2023883a 	mov	r17,r4
8020bb54:	2821883a 	mov	r16,r5
8020bb58:	dfc00215 	stw	ra,8(sp)
8020bb5c:	02156a80 	call	802156a8 <__malloc_lock>
8020bb60:	81ffff17 	ldw	r7,-4(r16)
8020bb64:	00bfff84 	movi	r2,-2
8020bb68:	012008b4 	movhi	r4,32802
8020bb6c:	81bffe04 	addi	r6,r16,-8
8020bb70:	3884703a 	and	r2,r7,r2
8020bb74:	212f0704 	addi	r4,r4,-17380
8020bb78:	308b883a 	add	r5,r6,r2
8020bb7c:	2a400117 	ldw	r9,4(r5)
8020bb80:	22000217 	ldw	r8,8(r4)
8020bb84:	00ffff04 	movi	r3,-4
8020bb88:	48c6703a 	and	r3,r9,r3
8020bb8c:	2a005726 	beq	r5,r8,8020bcec <_free_r+0x1ac>
8020bb90:	28c00115 	stw	r3,4(r5)
8020bb94:	39c0004c 	andi	r7,r7,1
8020bb98:	3800091e 	bne	r7,zero,8020bbc0 <_free_r+0x80>
8020bb9c:	823ffe17 	ldw	r8,-8(r16)
8020bba0:	22400204 	addi	r9,r4,8
8020bba4:	320dc83a 	sub	r6,r6,r8
8020bba8:	31c00217 	ldw	r7,8(r6)
8020bbac:	1205883a 	add	r2,r2,r8
8020bbb0:	3a406526 	beq	r7,r9,8020bd48 <_free_r+0x208>
8020bbb4:	32000317 	ldw	r8,12(r6)
8020bbb8:	3a000315 	stw	r8,12(r7)
8020bbbc:	41c00215 	stw	r7,8(r8)
8020bbc0:	28cf883a 	add	r7,r5,r3
8020bbc4:	39c00117 	ldw	r7,4(r7)
8020bbc8:	39c0004c 	andi	r7,r7,1
8020bbcc:	38003a26 	beq	r7,zero,8020bcb8 <_free_r+0x178>
8020bbd0:	10c00054 	ori	r3,r2,1
8020bbd4:	30c00115 	stw	r3,4(r6)
8020bbd8:	3087883a 	add	r3,r6,r2
8020bbdc:	18800015 	stw	r2,0(r3)
8020bbe0:	00c07fc4 	movi	r3,511
8020bbe4:	18801936 	bltu	r3,r2,8020bc4c <_free_r+0x10c>
8020bbe8:	1004d0fa 	srli	r2,r2,3
8020bbec:	01c00044 	movi	r7,1
8020bbf0:	21400117 	ldw	r5,4(r4)
8020bbf4:	10c00044 	addi	r3,r2,1
8020bbf8:	18c7883a 	add	r3,r3,r3
8020bbfc:	1005d0ba 	srai	r2,r2,2
8020bc00:	18c7883a 	add	r3,r3,r3
8020bc04:	18c7883a 	add	r3,r3,r3
8020bc08:	1907883a 	add	r3,r3,r4
8020bc0c:	3884983a 	sll	r2,r7,r2
8020bc10:	19c00017 	ldw	r7,0(r3)
8020bc14:	1a3ffe04 	addi	r8,r3,-8
8020bc18:	1144b03a 	or	r2,r2,r5
8020bc1c:	32000315 	stw	r8,12(r6)
8020bc20:	31c00215 	stw	r7,8(r6)
8020bc24:	20800115 	stw	r2,4(r4)
8020bc28:	19800015 	stw	r6,0(r3)
8020bc2c:	39800315 	stw	r6,12(r7)
8020bc30:	8809883a 	mov	r4,r17
8020bc34:	dfc00217 	ldw	ra,8(sp)
8020bc38:	dc400117 	ldw	r17,4(sp)
8020bc3c:	dc000017 	ldw	r16,0(sp)
8020bc40:	dec00304 	addi	sp,sp,12
8020bc44:	02156cc1 	jmpi	802156cc <__malloc_unlock>
8020bc48:	f800283a 	ret
8020bc4c:	100ad27a 	srli	r5,r2,9
8020bc50:	00c00104 	movi	r3,4
8020bc54:	19404a36 	bltu	r3,r5,8020bd80 <_free_r+0x240>
8020bc58:	100ad1ba 	srli	r5,r2,6
8020bc5c:	28c00e44 	addi	r3,r5,57
8020bc60:	18c7883a 	add	r3,r3,r3
8020bc64:	29400e04 	addi	r5,r5,56
8020bc68:	18c7883a 	add	r3,r3,r3
8020bc6c:	18c7883a 	add	r3,r3,r3
8020bc70:	1909883a 	add	r4,r3,r4
8020bc74:	20c00017 	ldw	r3,0(r4)
8020bc78:	01e008b4 	movhi	r7,32802
8020bc7c:	213ffe04 	addi	r4,r4,-8
8020bc80:	39ef0704 	addi	r7,r7,-17380
8020bc84:	20c04426 	beq	r4,r3,8020bd98 <_free_r+0x258>
8020bc88:	01ffff04 	movi	r7,-4
8020bc8c:	19400117 	ldw	r5,4(r3)
8020bc90:	29ca703a 	and	r5,r5,r7
8020bc94:	1140022e 	bgeu	r2,r5,8020bca0 <_free_r+0x160>
8020bc98:	18c00217 	ldw	r3,8(r3)
8020bc9c:	20fffb1e 	bne	r4,r3,8020bc8c <__reset+0xfa1ebc8c>
8020bca0:	19000317 	ldw	r4,12(r3)
8020bca4:	31000315 	stw	r4,12(r6)
8020bca8:	30c00215 	stw	r3,8(r6)
8020bcac:	21800215 	stw	r6,8(r4)
8020bcb0:	19800315 	stw	r6,12(r3)
8020bcb4:	003fde06 	br	8020bc30 <__reset+0xfa1ebc30>
8020bcb8:	29c00217 	ldw	r7,8(r5)
8020bcbc:	10c5883a 	add	r2,r2,r3
8020bcc0:	00e008b4 	movhi	r3,32802
8020bcc4:	18ef0904 	addi	r3,r3,-17372
8020bcc8:	38c03b26 	beq	r7,r3,8020bdb8 <_free_r+0x278>
8020bccc:	2a000317 	ldw	r8,12(r5)
8020bcd0:	11400054 	ori	r5,r2,1
8020bcd4:	3087883a 	add	r3,r6,r2
8020bcd8:	3a000315 	stw	r8,12(r7)
8020bcdc:	41c00215 	stw	r7,8(r8)
8020bce0:	31400115 	stw	r5,4(r6)
8020bce4:	18800015 	stw	r2,0(r3)
8020bce8:	003fbd06 	br	8020bbe0 <__reset+0xfa1ebbe0>
8020bcec:	39c0004c 	andi	r7,r7,1
8020bcf0:	10c5883a 	add	r2,r2,r3
8020bcf4:	3800071e 	bne	r7,zero,8020bd14 <_free_r+0x1d4>
8020bcf8:	81fffe17 	ldw	r7,-8(r16)
8020bcfc:	31cdc83a 	sub	r6,r6,r7
8020bd00:	30c00317 	ldw	r3,12(r6)
8020bd04:	31400217 	ldw	r5,8(r6)
8020bd08:	11c5883a 	add	r2,r2,r7
8020bd0c:	28c00315 	stw	r3,12(r5)
8020bd10:	19400215 	stw	r5,8(r3)
8020bd14:	10c00054 	ori	r3,r2,1
8020bd18:	30c00115 	stw	r3,4(r6)
8020bd1c:	00e008b4 	movhi	r3,32802
8020bd20:	18f50004 	addi	r3,r3,-11264
8020bd24:	18c00017 	ldw	r3,0(r3)
8020bd28:	21800215 	stw	r6,8(r4)
8020bd2c:	10ffc036 	bltu	r2,r3,8020bc30 <__reset+0xfa1ebc30>
8020bd30:	00a008b4 	movhi	r2,32802
8020bd34:	10b51a04 	addi	r2,r2,-11160
8020bd38:	11400017 	ldw	r5,0(r2)
8020bd3c:	8809883a 	mov	r4,r17
8020bd40:	020ba1c0 	call	8020ba1c <_malloc_trim_r>
8020bd44:	003fba06 	br	8020bc30 <__reset+0xfa1ebc30>
8020bd48:	28c9883a 	add	r4,r5,r3
8020bd4c:	21000117 	ldw	r4,4(r4)
8020bd50:	2100004c 	andi	r4,r4,1
8020bd54:	2000391e 	bne	r4,zero,8020be3c <_free_r+0x2fc>
8020bd58:	29c00217 	ldw	r7,8(r5)
8020bd5c:	29000317 	ldw	r4,12(r5)
8020bd60:	1885883a 	add	r2,r3,r2
8020bd64:	10c00054 	ori	r3,r2,1
8020bd68:	39000315 	stw	r4,12(r7)
8020bd6c:	21c00215 	stw	r7,8(r4)
8020bd70:	30c00115 	stw	r3,4(r6)
8020bd74:	308d883a 	add	r6,r6,r2
8020bd78:	30800015 	stw	r2,0(r6)
8020bd7c:	003fac06 	br	8020bc30 <__reset+0xfa1ebc30>
8020bd80:	00c00504 	movi	r3,20
8020bd84:	19401536 	bltu	r3,r5,8020bddc <_free_r+0x29c>
8020bd88:	28c01704 	addi	r3,r5,92
8020bd8c:	18c7883a 	add	r3,r3,r3
8020bd90:	294016c4 	addi	r5,r5,91
8020bd94:	003fb406 	br	8020bc68 <__reset+0xfa1ebc68>
8020bd98:	280bd0ba 	srai	r5,r5,2
8020bd9c:	00c00044 	movi	r3,1
8020bda0:	38800117 	ldw	r2,4(r7)
8020bda4:	194a983a 	sll	r5,r3,r5
8020bda8:	2007883a 	mov	r3,r4
8020bdac:	2884b03a 	or	r2,r5,r2
8020bdb0:	38800115 	stw	r2,4(r7)
8020bdb4:	003fbb06 	br	8020bca4 <__reset+0xfa1ebca4>
8020bdb8:	21800515 	stw	r6,20(r4)
8020bdbc:	21800415 	stw	r6,16(r4)
8020bdc0:	10c00054 	ori	r3,r2,1
8020bdc4:	31c00315 	stw	r7,12(r6)
8020bdc8:	31c00215 	stw	r7,8(r6)
8020bdcc:	30c00115 	stw	r3,4(r6)
8020bdd0:	308d883a 	add	r6,r6,r2
8020bdd4:	30800015 	stw	r2,0(r6)
8020bdd8:	003f9506 	br	8020bc30 <__reset+0xfa1ebc30>
8020bddc:	00c01504 	movi	r3,84
8020bde0:	19400536 	bltu	r3,r5,8020bdf8 <_free_r+0x2b8>
8020bde4:	100ad33a 	srli	r5,r2,12
8020bde8:	28c01bc4 	addi	r3,r5,111
8020bdec:	18c7883a 	add	r3,r3,r3
8020bdf0:	29401b84 	addi	r5,r5,110
8020bdf4:	003f9c06 	br	8020bc68 <__reset+0xfa1ebc68>
8020bdf8:	00c05504 	movi	r3,340
8020bdfc:	19400536 	bltu	r3,r5,8020be14 <_free_r+0x2d4>
8020be00:	100ad3fa 	srli	r5,r2,15
8020be04:	28c01e04 	addi	r3,r5,120
8020be08:	18c7883a 	add	r3,r3,r3
8020be0c:	29401dc4 	addi	r5,r5,119
8020be10:	003f9506 	br	8020bc68 <__reset+0xfa1ebc68>
8020be14:	00c15504 	movi	r3,1364
8020be18:	19400536 	bltu	r3,r5,8020be30 <_free_r+0x2f0>
8020be1c:	100ad4ba 	srli	r5,r2,18
8020be20:	28c01f44 	addi	r3,r5,125
8020be24:	18c7883a 	add	r3,r3,r3
8020be28:	29401f04 	addi	r5,r5,124
8020be2c:	003f8e06 	br	8020bc68 <__reset+0xfa1ebc68>
8020be30:	00c03f84 	movi	r3,254
8020be34:	01401f84 	movi	r5,126
8020be38:	003f8b06 	br	8020bc68 <__reset+0xfa1ebc68>
8020be3c:	10c00054 	ori	r3,r2,1
8020be40:	30c00115 	stw	r3,4(r6)
8020be44:	308d883a 	add	r6,r6,r2
8020be48:	30800015 	stw	r2,0(r6)
8020be4c:	003f7806 	br	8020bc30 <__reset+0xfa1ebc30>

8020be50 <__sfvwrite_r>:
8020be50:	30800217 	ldw	r2,8(r6)
8020be54:	10006726 	beq	r2,zero,8020bff4 <__sfvwrite_r+0x1a4>
8020be58:	28c0030b 	ldhu	r3,12(r5)
8020be5c:	defff404 	addi	sp,sp,-48
8020be60:	dd400715 	stw	r21,28(sp)
8020be64:	dd000615 	stw	r20,24(sp)
8020be68:	dc000215 	stw	r16,8(sp)
8020be6c:	dfc00b15 	stw	ra,44(sp)
8020be70:	df000a15 	stw	fp,40(sp)
8020be74:	ddc00915 	stw	r23,36(sp)
8020be78:	dd800815 	stw	r22,32(sp)
8020be7c:	dcc00515 	stw	r19,20(sp)
8020be80:	dc800415 	stw	r18,16(sp)
8020be84:	dc400315 	stw	r17,12(sp)
8020be88:	1880020c 	andi	r2,r3,8
8020be8c:	2821883a 	mov	r16,r5
8020be90:	202b883a 	mov	r21,r4
8020be94:	3029883a 	mov	r20,r6
8020be98:	10002726 	beq	r2,zero,8020bf38 <__sfvwrite_r+0xe8>
8020be9c:	28800417 	ldw	r2,16(r5)
8020bea0:	10002526 	beq	r2,zero,8020bf38 <__sfvwrite_r+0xe8>
8020bea4:	1880008c 	andi	r2,r3,2
8020bea8:	a4400017 	ldw	r17,0(r20)
8020beac:	10002a26 	beq	r2,zero,8020bf58 <__sfvwrite_r+0x108>
8020beb0:	05a00034 	movhi	r22,32768
8020beb4:	0027883a 	mov	r19,zero
8020beb8:	0025883a 	mov	r18,zero
8020bebc:	b5bf0004 	addi	r22,r22,-1024
8020bec0:	980d883a 	mov	r6,r19
8020bec4:	a809883a 	mov	r4,r21
8020bec8:	90004626 	beq	r18,zero,8020bfe4 <__sfvwrite_r+0x194>
8020becc:	900f883a 	mov	r7,r18
8020bed0:	b480022e 	bgeu	r22,r18,8020bedc <__sfvwrite_r+0x8c>
8020bed4:	01e00034 	movhi	r7,32768
8020bed8:	39ff0004 	addi	r7,r7,-1024
8020bedc:	80800917 	ldw	r2,36(r16)
8020bee0:	81400717 	ldw	r5,28(r16)
8020bee4:	103ee83a 	callr	r2
8020bee8:	0080570e 	bge	zero,r2,8020c048 <__sfvwrite_r+0x1f8>
8020beec:	a0c00217 	ldw	r3,8(r20)
8020bef0:	98a7883a 	add	r19,r19,r2
8020bef4:	90a5c83a 	sub	r18,r18,r2
8020bef8:	1885c83a 	sub	r2,r3,r2
8020befc:	a0800215 	stw	r2,8(r20)
8020bf00:	103fef1e 	bne	r2,zero,8020bec0 <__reset+0xfa1ebec0>
8020bf04:	0005883a 	mov	r2,zero
8020bf08:	dfc00b17 	ldw	ra,44(sp)
8020bf0c:	df000a17 	ldw	fp,40(sp)
8020bf10:	ddc00917 	ldw	r23,36(sp)
8020bf14:	dd800817 	ldw	r22,32(sp)
8020bf18:	dd400717 	ldw	r21,28(sp)
8020bf1c:	dd000617 	ldw	r20,24(sp)
8020bf20:	dcc00517 	ldw	r19,20(sp)
8020bf24:	dc800417 	ldw	r18,16(sp)
8020bf28:	dc400317 	ldw	r17,12(sp)
8020bf2c:	dc000217 	ldw	r16,8(sp)
8020bf30:	dec00c04 	addi	sp,sp,48
8020bf34:	f800283a 	ret
8020bf38:	800b883a 	mov	r5,r16
8020bf3c:	a809883a 	mov	r4,r21
8020bf40:	02099f80 	call	802099f8 <__swsetup_r>
8020bf44:	1000eb1e 	bne	r2,zero,8020c2f4 <__sfvwrite_r+0x4a4>
8020bf48:	80c0030b 	ldhu	r3,12(r16)
8020bf4c:	a4400017 	ldw	r17,0(r20)
8020bf50:	1880008c 	andi	r2,r3,2
8020bf54:	103fd61e 	bne	r2,zero,8020beb0 <__reset+0xfa1ebeb0>
8020bf58:	1880004c 	andi	r2,r3,1
8020bf5c:	10003f1e 	bne	r2,zero,8020c05c <__sfvwrite_r+0x20c>
8020bf60:	0039883a 	mov	fp,zero
8020bf64:	0025883a 	mov	r18,zero
8020bf68:	90001a26 	beq	r18,zero,8020bfd4 <__sfvwrite_r+0x184>
8020bf6c:	1880800c 	andi	r2,r3,512
8020bf70:	84c00217 	ldw	r19,8(r16)
8020bf74:	10002126 	beq	r2,zero,8020bffc <__sfvwrite_r+0x1ac>
8020bf78:	982f883a 	mov	r23,r19
8020bf7c:	94c09336 	bltu	r18,r19,8020c1cc <__sfvwrite_r+0x37c>
8020bf80:	1881200c 	andi	r2,r3,1152
8020bf84:	10009e1e 	bne	r2,zero,8020c200 <__sfvwrite_r+0x3b0>
8020bf88:	81000017 	ldw	r4,0(r16)
8020bf8c:	b80d883a 	mov	r6,r23
8020bf90:	e00b883a 	mov	r5,fp
8020bf94:	020d01c0 	call	8020d01c <memmove>
8020bf98:	80c00217 	ldw	r3,8(r16)
8020bf9c:	81000017 	ldw	r4,0(r16)
8020bfa0:	9005883a 	mov	r2,r18
8020bfa4:	1ce7c83a 	sub	r19,r3,r19
8020bfa8:	25cf883a 	add	r7,r4,r23
8020bfac:	84c00215 	stw	r19,8(r16)
8020bfb0:	81c00015 	stw	r7,0(r16)
8020bfb4:	a0c00217 	ldw	r3,8(r20)
8020bfb8:	e0b9883a 	add	fp,fp,r2
8020bfbc:	90a5c83a 	sub	r18,r18,r2
8020bfc0:	18a7c83a 	sub	r19,r3,r2
8020bfc4:	a4c00215 	stw	r19,8(r20)
8020bfc8:	983fce26 	beq	r19,zero,8020bf04 <__reset+0xfa1ebf04>
8020bfcc:	80c0030b 	ldhu	r3,12(r16)
8020bfd0:	903fe61e 	bne	r18,zero,8020bf6c <__reset+0xfa1ebf6c>
8020bfd4:	8f000017 	ldw	fp,0(r17)
8020bfd8:	8c800117 	ldw	r18,4(r17)
8020bfdc:	8c400204 	addi	r17,r17,8
8020bfe0:	003fe106 	br	8020bf68 <__reset+0xfa1ebf68>
8020bfe4:	8cc00017 	ldw	r19,0(r17)
8020bfe8:	8c800117 	ldw	r18,4(r17)
8020bfec:	8c400204 	addi	r17,r17,8
8020bff0:	003fb306 	br	8020bec0 <__reset+0xfa1ebec0>
8020bff4:	0005883a 	mov	r2,zero
8020bff8:	f800283a 	ret
8020bffc:	81000017 	ldw	r4,0(r16)
8020c000:	80800417 	ldw	r2,16(r16)
8020c004:	11005736 	bltu	r2,r4,8020c164 <__sfvwrite_r+0x314>
8020c008:	85c00517 	ldw	r23,20(r16)
8020c00c:	95c05536 	bltu	r18,r23,8020c164 <__sfvwrite_r+0x314>
8020c010:	00a00034 	movhi	r2,32768
8020c014:	10bfffc4 	addi	r2,r2,-1
8020c018:	9009883a 	mov	r4,r18
8020c01c:	1480012e 	bgeu	r2,r18,8020c024 <__sfvwrite_r+0x1d4>
8020c020:	1009883a 	mov	r4,r2
8020c024:	b80b883a 	mov	r5,r23
8020c028:	02129180 	call	80212918 <__divsi3>
8020c02c:	15cf383a 	mul	r7,r2,r23
8020c030:	81400717 	ldw	r5,28(r16)
8020c034:	80800917 	ldw	r2,36(r16)
8020c038:	e00d883a 	mov	r6,fp
8020c03c:	a809883a 	mov	r4,r21
8020c040:	103ee83a 	callr	r2
8020c044:	00bfdb16 	blt	zero,r2,8020bfb4 <__reset+0xfa1ebfb4>
8020c048:	8080030b 	ldhu	r2,12(r16)
8020c04c:	10801014 	ori	r2,r2,64
8020c050:	8080030d 	sth	r2,12(r16)
8020c054:	00bfffc4 	movi	r2,-1
8020c058:	003fab06 	br	8020bf08 <__reset+0xfa1ebf08>
8020c05c:	0027883a 	mov	r19,zero
8020c060:	0011883a 	mov	r8,zero
8020c064:	0039883a 	mov	fp,zero
8020c068:	0025883a 	mov	r18,zero
8020c06c:	90001f26 	beq	r18,zero,8020c0ec <__sfvwrite_r+0x29c>
8020c070:	40005a26 	beq	r8,zero,8020c1dc <__sfvwrite_r+0x38c>
8020c074:	982d883a 	mov	r22,r19
8020c078:	94c0012e 	bgeu	r18,r19,8020c080 <__sfvwrite_r+0x230>
8020c07c:	902d883a 	mov	r22,r18
8020c080:	81000017 	ldw	r4,0(r16)
8020c084:	80800417 	ldw	r2,16(r16)
8020c088:	b02f883a 	mov	r23,r22
8020c08c:	81c00517 	ldw	r7,20(r16)
8020c090:	1100032e 	bgeu	r2,r4,8020c0a0 <__sfvwrite_r+0x250>
8020c094:	80c00217 	ldw	r3,8(r16)
8020c098:	38c7883a 	add	r3,r7,r3
8020c09c:	1d801816 	blt	r3,r22,8020c100 <__sfvwrite_r+0x2b0>
8020c0a0:	b1c03e16 	blt	r22,r7,8020c19c <__sfvwrite_r+0x34c>
8020c0a4:	80800917 	ldw	r2,36(r16)
8020c0a8:	81400717 	ldw	r5,28(r16)
8020c0ac:	e00d883a 	mov	r6,fp
8020c0b0:	da000115 	stw	r8,4(sp)
8020c0b4:	a809883a 	mov	r4,r21
8020c0b8:	103ee83a 	callr	r2
8020c0bc:	102f883a 	mov	r23,r2
8020c0c0:	da000117 	ldw	r8,4(sp)
8020c0c4:	00bfe00e 	bge	zero,r2,8020c048 <__reset+0xfa1ec048>
8020c0c8:	9de7c83a 	sub	r19,r19,r23
8020c0cc:	98001f26 	beq	r19,zero,8020c14c <__sfvwrite_r+0x2fc>
8020c0d0:	a0800217 	ldw	r2,8(r20)
8020c0d4:	e5f9883a 	add	fp,fp,r23
8020c0d8:	95e5c83a 	sub	r18,r18,r23
8020c0dc:	15efc83a 	sub	r23,r2,r23
8020c0e0:	a5c00215 	stw	r23,8(r20)
8020c0e4:	b83f8726 	beq	r23,zero,8020bf04 <__reset+0xfa1ebf04>
8020c0e8:	903fe11e 	bne	r18,zero,8020c070 <__reset+0xfa1ec070>
8020c0ec:	8f000017 	ldw	fp,0(r17)
8020c0f0:	8c800117 	ldw	r18,4(r17)
8020c0f4:	0011883a 	mov	r8,zero
8020c0f8:	8c400204 	addi	r17,r17,8
8020c0fc:	003fdb06 	br	8020c06c <__reset+0xfa1ec06c>
8020c100:	180d883a 	mov	r6,r3
8020c104:	e00b883a 	mov	r5,fp
8020c108:	da000115 	stw	r8,4(sp)
8020c10c:	d8c00015 	stw	r3,0(sp)
8020c110:	020d01c0 	call	8020d01c <memmove>
8020c114:	d8c00017 	ldw	r3,0(sp)
8020c118:	80800017 	ldw	r2,0(r16)
8020c11c:	800b883a 	mov	r5,r16
8020c120:	a809883a 	mov	r4,r21
8020c124:	10c5883a 	add	r2,r2,r3
8020c128:	80800015 	stw	r2,0(r16)
8020c12c:	d8c00015 	stw	r3,0(sp)
8020c130:	020b5f00 	call	8020b5f0 <_fflush_r>
8020c134:	d8c00017 	ldw	r3,0(sp)
8020c138:	da000117 	ldw	r8,4(sp)
8020c13c:	103fc21e 	bne	r2,zero,8020c048 <__reset+0xfa1ec048>
8020c140:	182f883a 	mov	r23,r3
8020c144:	9de7c83a 	sub	r19,r19,r23
8020c148:	983fe11e 	bne	r19,zero,8020c0d0 <__reset+0xfa1ec0d0>
8020c14c:	800b883a 	mov	r5,r16
8020c150:	a809883a 	mov	r4,r21
8020c154:	020b5f00 	call	8020b5f0 <_fflush_r>
8020c158:	103fbb1e 	bne	r2,zero,8020c048 <__reset+0xfa1ec048>
8020c15c:	0011883a 	mov	r8,zero
8020c160:	003fdb06 	br	8020c0d0 <__reset+0xfa1ec0d0>
8020c164:	94c0012e 	bgeu	r18,r19,8020c16c <__sfvwrite_r+0x31c>
8020c168:	9027883a 	mov	r19,r18
8020c16c:	980d883a 	mov	r6,r19
8020c170:	e00b883a 	mov	r5,fp
8020c174:	020d01c0 	call	8020d01c <memmove>
8020c178:	80800217 	ldw	r2,8(r16)
8020c17c:	80c00017 	ldw	r3,0(r16)
8020c180:	14c5c83a 	sub	r2,r2,r19
8020c184:	1cc7883a 	add	r3,r3,r19
8020c188:	80800215 	stw	r2,8(r16)
8020c18c:	80c00015 	stw	r3,0(r16)
8020c190:	10004326 	beq	r2,zero,8020c2a0 <__sfvwrite_r+0x450>
8020c194:	9805883a 	mov	r2,r19
8020c198:	003f8606 	br	8020bfb4 <__reset+0xfa1ebfb4>
8020c19c:	b00d883a 	mov	r6,r22
8020c1a0:	e00b883a 	mov	r5,fp
8020c1a4:	da000115 	stw	r8,4(sp)
8020c1a8:	020d01c0 	call	8020d01c <memmove>
8020c1ac:	80800217 	ldw	r2,8(r16)
8020c1b0:	80c00017 	ldw	r3,0(r16)
8020c1b4:	da000117 	ldw	r8,4(sp)
8020c1b8:	1585c83a 	sub	r2,r2,r22
8020c1bc:	1dad883a 	add	r22,r3,r22
8020c1c0:	80800215 	stw	r2,8(r16)
8020c1c4:	85800015 	stw	r22,0(r16)
8020c1c8:	003fbf06 	br	8020c0c8 <__reset+0xfa1ec0c8>
8020c1cc:	81000017 	ldw	r4,0(r16)
8020c1d0:	9027883a 	mov	r19,r18
8020c1d4:	902f883a 	mov	r23,r18
8020c1d8:	003f6c06 	br	8020bf8c <__reset+0xfa1ebf8c>
8020c1dc:	900d883a 	mov	r6,r18
8020c1e0:	01400284 	movi	r5,10
8020c1e4:	e009883a 	mov	r4,fp
8020c1e8:	020cf380 	call	8020cf38 <memchr>
8020c1ec:	10003e26 	beq	r2,zero,8020c2e8 <__sfvwrite_r+0x498>
8020c1f0:	10800044 	addi	r2,r2,1
8020c1f4:	1727c83a 	sub	r19,r2,fp
8020c1f8:	02000044 	movi	r8,1
8020c1fc:	003f9d06 	br	8020c074 <__reset+0xfa1ec074>
8020c200:	80800517 	ldw	r2,20(r16)
8020c204:	81400417 	ldw	r5,16(r16)
8020c208:	81c00017 	ldw	r7,0(r16)
8020c20c:	10a7883a 	add	r19,r2,r2
8020c210:	9885883a 	add	r2,r19,r2
8020c214:	1026d7fa 	srli	r19,r2,31
8020c218:	396dc83a 	sub	r22,r7,r5
8020c21c:	b1000044 	addi	r4,r22,1
8020c220:	9885883a 	add	r2,r19,r2
8020c224:	1027d07a 	srai	r19,r2,1
8020c228:	2485883a 	add	r2,r4,r18
8020c22c:	980d883a 	mov	r6,r19
8020c230:	9880022e 	bgeu	r19,r2,8020c23c <__sfvwrite_r+0x3ec>
8020c234:	1027883a 	mov	r19,r2
8020c238:	100d883a 	mov	r6,r2
8020c23c:	18c1000c 	andi	r3,r3,1024
8020c240:	18001c26 	beq	r3,zero,8020c2b4 <__sfvwrite_r+0x464>
8020c244:	300b883a 	mov	r5,r6
8020c248:	a809883a 	mov	r4,r21
8020c24c:	020c72c0 	call	8020c72c <_malloc_r>
8020c250:	102f883a 	mov	r23,r2
8020c254:	10002926 	beq	r2,zero,8020c2fc <__sfvwrite_r+0x4ac>
8020c258:	81400417 	ldw	r5,16(r16)
8020c25c:	b00d883a 	mov	r6,r22
8020c260:	1009883a 	mov	r4,r2
8020c264:	020516c0 	call	8020516c <memcpy>
8020c268:	8080030b 	ldhu	r2,12(r16)
8020c26c:	00fedfc4 	movi	r3,-1153
8020c270:	10c4703a 	and	r2,r2,r3
8020c274:	10802014 	ori	r2,r2,128
8020c278:	8080030d 	sth	r2,12(r16)
8020c27c:	bd89883a 	add	r4,r23,r22
8020c280:	9d8fc83a 	sub	r7,r19,r22
8020c284:	85c00415 	stw	r23,16(r16)
8020c288:	84c00515 	stw	r19,20(r16)
8020c28c:	81000015 	stw	r4,0(r16)
8020c290:	9027883a 	mov	r19,r18
8020c294:	81c00215 	stw	r7,8(r16)
8020c298:	902f883a 	mov	r23,r18
8020c29c:	003f3b06 	br	8020bf8c <__reset+0xfa1ebf8c>
8020c2a0:	800b883a 	mov	r5,r16
8020c2a4:	a809883a 	mov	r4,r21
8020c2a8:	020b5f00 	call	8020b5f0 <_fflush_r>
8020c2ac:	103fb926 	beq	r2,zero,8020c194 <__reset+0xfa1ec194>
8020c2b0:	003f6506 	br	8020c048 <__reset+0xfa1ec048>
8020c2b4:	a809883a 	mov	r4,r21
8020c2b8:	020e29c0 	call	8020e29c <_realloc_r>
8020c2bc:	102f883a 	mov	r23,r2
8020c2c0:	103fee1e 	bne	r2,zero,8020c27c <__reset+0xfa1ec27c>
8020c2c4:	81400417 	ldw	r5,16(r16)
8020c2c8:	a809883a 	mov	r4,r21
8020c2cc:	020bb400 	call	8020bb40 <_free_r>
8020c2d0:	8080030b 	ldhu	r2,12(r16)
8020c2d4:	00ffdfc4 	movi	r3,-129
8020c2d8:	1884703a 	and	r2,r3,r2
8020c2dc:	00c00304 	movi	r3,12
8020c2e0:	a8c00015 	stw	r3,0(r21)
8020c2e4:	003f5906 	br	8020c04c <__reset+0xfa1ec04c>
8020c2e8:	94c00044 	addi	r19,r18,1
8020c2ec:	02000044 	movi	r8,1
8020c2f0:	003f6006 	br	8020c074 <__reset+0xfa1ec074>
8020c2f4:	00bfffc4 	movi	r2,-1
8020c2f8:	003f0306 	br	8020bf08 <__reset+0xfa1ebf08>
8020c2fc:	00800304 	movi	r2,12
8020c300:	a8800015 	stw	r2,0(r21)
8020c304:	8080030b 	ldhu	r2,12(r16)
8020c308:	003f5006 	br	8020c04c <__reset+0xfa1ec04c>

8020c30c <_fwalk>:
8020c30c:	defff704 	addi	sp,sp,-36
8020c310:	dd000415 	stw	r20,16(sp)
8020c314:	dfc00815 	stw	ra,32(sp)
8020c318:	ddc00715 	stw	r23,28(sp)
8020c31c:	dd800615 	stw	r22,24(sp)
8020c320:	dd400515 	stw	r21,20(sp)
8020c324:	dcc00315 	stw	r19,12(sp)
8020c328:	dc800215 	stw	r18,8(sp)
8020c32c:	dc400115 	stw	r17,4(sp)
8020c330:	dc000015 	stw	r16,0(sp)
8020c334:	2500b804 	addi	r20,r4,736
8020c338:	a0002326 	beq	r20,zero,8020c3c8 <_fwalk+0xbc>
8020c33c:	282b883a 	mov	r21,r5
8020c340:	002f883a 	mov	r23,zero
8020c344:	05800044 	movi	r22,1
8020c348:	04ffffc4 	movi	r19,-1
8020c34c:	a4400117 	ldw	r17,4(r20)
8020c350:	a4800217 	ldw	r18,8(r20)
8020c354:	8c7fffc4 	addi	r17,r17,-1
8020c358:	88000d16 	blt	r17,zero,8020c390 <_fwalk+0x84>
8020c35c:	94000304 	addi	r16,r18,12
8020c360:	94800384 	addi	r18,r18,14
8020c364:	8080000b 	ldhu	r2,0(r16)
8020c368:	8c7fffc4 	addi	r17,r17,-1
8020c36c:	813ffd04 	addi	r4,r16,-12
8020c370:	b080042e 	bgeu	r22,r2,8020c384 <_fwalk+0x78>
8020c374:	9080000f 	ldh	r2,0(r18)
8020c378:	14c00226 	beq	r2,r19,8020c384 <_fwalk+0x78>
8020c37c:	a83ee83a 	callr	r21
8020c380:	b8aeb03a 	or	r23,r23,r2
8020c384:	84001a04 	addi	r16,r16,104
8020c388:	94801a04 	addi	r18,r18,104
8020c38c:	8cfff51e 	bne	r17,r19,8020c364 <__reset+0xfa1ec364>
8020c390:	a5000017 	ldw	r20,0(r20)
8020c394:	a03fed1e 	bne	r20,zero,8020c34c <__reset+0xfa1ec34c>
8020c398:	b805883a 	mov	r2,r23
8020c39c:	dfc00817 	ldw	ra,32(sp)
8020c3a0:	ddc00717 	ldw	r23,28(sp)
8020c3a4:	dd800617 	ldw	r22,24(sp)
8020c3a8:	dd400517 	ldw	r21,20(sp)
8020c3ac:	dd000417 	ldw	r20,16(sp)
8020c3b0:	dcc00317 	ldw	r19,12(sp)
8020c3b4:	dc800217 	ldw	r18,8(sp)
8020c3b8:	dc400117 	ldw	r17,4(sp)
8020c3bc:	dc000017 	ldw	r16,0(sp)
8020c3c0:	dec00904 	addi	sp,sp,36
8020c3c4:	f800283a 	ret
8020c3c8:	002f883a 	mov	r23,zero
8020c3cc:	003ff206 	br	8020c398 <__reset+0xfa1ec398>

8020c3d0 <_fwalk_reent>:
8020c3d0:	defff704 	addi	sp,sp,-36
8020c3d4:	dd000415 	stw	r20,16(sp)
8020c3d8:	dfc00815 	stw	ra,32(sp)
8020c3dc:	ddc00715 	stw	r23,28(sp)
8020c3e0:	dd800615 	stw	r22,24(sp)
8020c3e4:	dd400515 	stw	r21,20(sp)
8020c3e8:	dcc00315 	stw	r19,12(sp)
8020c3ec:	dc800215 	stw	r18,8(sp)
8020c3f0:	dc400115 	stw	r17,4(sp)
8020c3f4:	dc000015 	stw	r16,0(sp)
8020c3f8:	2500b804 	addi	r20,r4,736
8020c3fc:	a0002326 	beq	r20,zero,8020c48c <_fwalk_reent+0xbc>
8020c400:	282b883a 	mov	r21,r5
8020c404:	2027883a 	mov	r19,r4
8020c408:	002f883a 	mov	r23,zero
8020c40c:	05800044 	movi	r22,1
8020c410:	04bfffc4 	movi	r18,-1
8020c414:	a4400117 	ldw	r17,4(r20)
8020c418:	a4000217 	ldw	r16,8(r20)
8020c41c:	8c7fffc4 	addi	r17,r17,-1
8020c420:	88000c16 	blt	r17,zero,8020c454 <_fwalk_reent+0x84>
8020c424:	84000304 	addi	r16,r16,12
8020c428:	8080000b 	ldhu	r2,0(r16)
8020c42c:	8c7fffc4 	addi	r17,r17,-1
8020c430:	817ffd04 	addi	r5,r16,-12
8020c434:	b080052e 	bgeu	r22,r2,8020c44c <_fwalk_reent+0x7c>
8020c438:	8080008f 	ldh	r2,2(r16)
8020c43c:	9809883a 	mov	r4,r19
8020c440:	14800226 	beq	r2,r18,8020c44c <_fwalk_reent+0x7c>
8020c444:	a83ee83a 	callr	r21
8020c448:	b8aeb03a 	or	r23,r23,r2
8020c44c:	84001a04 	addi	r16,r16,104
8020c450:	8cbff51e 	bne	r17,r18,8020c428 <__reset+0xfa1ec428>
8020c454:	a5000017 	ldw	r20,0(r20)
8020c458:	a03fee1e 	bne	r20,zero,8020c414 <__reset+0xfa1ec414>
8020c45c:	b805883a 	mov	r2,r23
8020c460:	dfc00817 	ldw	ra,32(sp)
8020c464:	ddc00717 	ldw	r23,28(sp)
8020c468:	dd800617 	ldw	r22,24(sp)
8020c46c:	dd400517 	ldw	r21,20(sp)
8020c470:	dd000417 	ldw	r20,16(sp)
8020c474:	dcc00317 	ldw	r19,12(sp)
8020c478:	dc800217 	ldw	r18,8(sp)
8020c47c:	dc400117 	ldw	r17,4(sp)
8020c480:	dc000017 	ldw	r16,0(sp)
8020c484:	dec00904 	addi	sp,sp,36
8020c488:	f800283a 	ret
8020c48c:	002f883a 	mov	r23,zero
8020c490:	003ff206 	br	8020c45c <__reset+0xfa1ec45c>

8020c494 <_setlocale_r>:
8020c494:	30001b26 	beq	r6,zero,8020c504 <_setlocale_r+0x70>
8020c498:	016008b4 	movhi	r5,32802
8020c49c:	defffe04 	addi	sp,sp,-8
8020c4a0:	296cdc04 	addi	r5,r5,-19600
8020c4a4:	3009883a 	mov	r4,r6
8020c4a8:	dc000015 	stw	r16,0(sp)
8020c4ac:	dfc00115 	stw	ra,4(sp)
8020c4b0:	3021883a 	mov	r16,r6
8020c4b4:	020ea040 	call	8020ea04 <strcmp>
8020c4b8:	1000061e 	bne	r2,zero,8020c4d4 <_setlocale_r+0x40>
8020c4bc:	00a008b4 	movhi	r2,32802
8020c4c0:	10acb504 	addi	r2,r2,-19756
8020c4c4:	dfc00117 	ldw	ra,4(sp)
8020c4c8:	dc000017 	ldw	r16,0(sp)
8020c4cc:	dec00204 	addi	sp,sp,8
8020c4d0:	f800283a 	ret
8020c4d4:	016008b4 	movhi	r5,32802
8020c4d8:	296cb504 	addi	r5,r5,-19756
8020c4dc:	8009883a 	mov	r4,r16
8020c4e0:	020ea040 	call	8020ea04 <strcmp>
8020c4e4:	103ff526 	beq	r2,zero,8020c4bc <__reset+0xfa1ec4bc>
8020c4e8:	016008b4 	movhi	r5,32802
8020c4ec:	296cbf04 	addi	r5,r5,-19716
8020c4f0:	8009883a 	mov	r4,r16
8020c4f4:	020ea040 	call	8020ea04 <strcmp>
8020c4f8:	103ff026 	beq	r2,zero,8020c4bc <__reset+0xfa1ec4bc>
8020c4fc:	0005883a 	mov	r2,zero
8020c500:	003ff006 	br	8020c4c4 <__reset+0xfa1ec4c4>
8020c504:	00a008b4 	movhi	r2,32802
8020c508:	10acb504 	addi	r2,r2,-19756
8020c50c:	f800283a 	ret

8020c510 <__locale_charset>:
8020c510:	00a008b4 	movhi	r2,32802
8020c514:	10aef104 	addi	r2,r2,-17468
8020c518:	f800283a 	ret

8020c51c <__locale_mb_cur_max>:
8020c51c:	00a008b4 	movhi	r2,32802
8020c520:	10b4fe04 	addi	r2,r2,-11272
8020c524:	10800017 	ldw	r2,0(r2)
8020c528:	f800283a 	ret

8020c52c <__locale_msgcharset>:
8020c52c:	00a008b4 	movhi	r2,32802
8020c530:	10aee904 	addi	r2,r2,-17500
8020c534:	f800283a 	ret

8020c538 <__locale_cjk_lang>:
8020c538:	0005883a 	mov	r2,zero
8020c53c:	f800283a 	ret

8020c540 <_localeconv_r>:
8020c540:	00a008b4 	movhi	r2,32802
8020c544:	10aef904 	addi	r2,r2,-17436
8020c548:	f800283a 	ret

8020c54c <setlocale>:
8020c54c:	00a008b4 	movhi	r2,32802
8020c550:	10b4fd04 	addi	r2,r2,-11276
8020c554:	280d883a 	mov	r6,r5
8020c558:	200b883a 	mov	r5,r4
8020c55c:	11000017 	ldw	r4,0(r2)
8020c560:	020c4941 	jmpi	8020c494 <_setlocale_r>

8020c564 <localeconv>:
8020c564:	00a008b4 	movhi	r2,32802
8020c568:	10aef904 	addi	r2,r2,-17436
8020c56c:	f800283a 	ret

8020c570 <__smakebuf_r>:
8020c570:	2880030b 	ldhu	r2,12(r5)
8020c574:	10c0008c 	andi	r3,r2,2
8020c578:	1800411e 	bne	r3,zero,8020c680 <__smakebuf_r+0x110>
8020c57c:	deffec04 	addi	sp,sp,-80
8020c580:	dc000f15 	stw	r16,60(sp)
8020c584:	2821883a 	mov	r16,r5
8020c588:	2940038f 	ldh	r5,14(r5)
8020c58c:	dc401015 	stw	r17,64(sp)
8020c590:	dfc01315 	stw	ra,76(sp)
8020c594:	dcc01215 	stw	r19,72(sp)
8020c598:	dc801115 	stw	r18,68(sp)
8020c59c:	2023883a 	mov	r17,r4
8020c5a0:	28001c16 	blt	r5,zero,8020c614 <__smakebuf_r+0xa4>
8020c5a4:	d80d883a 	mov	r6,sp
8020c5a8:	02119b80 	call	802119b8 <_fstat_r>
8020c5ac:	10001816 	blt	r2,zero,8020c610 <__smakebuf_r+0xa0>
8020c5b0:	d8800117 	ldw	r2,4(sp)
8020c5b4:	00e00014 	movui	r3,32768
8020c5b8:	10bc000c 	andi	r2,r2,61440
8020c5bc:	14c80020 	cmpeqi	r19,r2,8192
8020c5c0:	10c03726 	beq	r2,r3,8020c6a0 <__smakebuf_r+0x130>
8020c5c4:	80c0030b 	ldhu	r3,12(r16)
8020c5c8:	18c20014 	ori	r3,r3,2048
8020c5cc:	80c0030d 	sth	r3,12(r16)
8020c5d0:	00c80004 	movi	r3,8192
8020c5d4:	10c0521e 	bne	r2,r3,8020c720 <__smakebuf_r+0x1b0>
8020c5d8:	8140038f 	ldh	r5,14(r16)
8020c5dc:	8809883a 	mov	r4,r17
8020c5e0:	0211a140 	call	80211a14 <_isatty_r>
8020c5e4:	10004c26 	beq	r2,zero,8020c718 <__smakebuf_r+0x1a8>
8020c5e8:	8080030b 	ldhu	r2,12(r16)
8020c5ec:	80c010c4 	addi	r3,r16,67
8020c5f0:	80c00015 	stw	r3,0(r16)
8020c5f4:	10800054 	ori	r2,r2,1
8020c5f8:	8080030d 	sth	r2,12(r16)
8020c5fc:	00800044 	movi	r2,1
8020c600:	80c00415 	stw	r3,16(r16)
8020c604:	80800515 	stw	r2,20(r16)
8020c608:	04810004 	movi	r18,1024
8020c60c:	00000706 	br	8020c62c <__smakebuf_r+0xbc>
8020c610:	8080030b 	ldhu	r2,12(r16)
8020c614:	10c0200c 	andi	r3,r2,128
8020c618:	18001f1e 	bne	r3,zero,8020c698 <__smakebuf_r+0x128>
8020c61c:	04810004 	movi	r18,1024
8020c620:	10820014 	ori	r2,r2,2048
8020c624:	8080030d 	sth	r2,12(r16)
8020c628:	0027883a 	mov	r19,zero
8020c62c:	900b883a 	mov	r5,r18
8020c630:	8809883a 	mov	r4,r17
8020c634:	020c72c0 	call	8020c72c <_malloc_r>
8020c638:	10002c26 	beq	r2,zero,8020c6ec <__smakebuf_r+0x17c>
8020c63c:	80c0030b 	ldhu	r3,12(r16)
8020c640:	01200874 	movhi	r4,32801
8020c644:	212da104 	addi	r4,r4,-18812
8020c648:	89000f15 	stw	r4,60(r17)
8020c64c:	18c02014 	ori	r3,r3,128
8020c650:	80c0030d 	sth	r3,12(r16)
8020c654:	80800015 	stw	r2,0(r16)
8020c658:	80800415 	stw	r2,16(r16)
8020c65c:	84800515 	stw	r18,20(r16)
8020c660:	98001a1e 	bne	r19,zero,8020c6cc <__smakebuf_r+0x15c>
8020c664:	dfc01317 	ldw	ra,76(sp)
8020c668:	dcc01217 	ldw	r19,72(sp)
8020c66c:	dc801117 	ldw	r18,68(sp)
8020c670:	dc401017 	ldw	r17,64(sp)
8020c674:	dc000f17 	ldw	r16,60(sp)
8020c678:	dec01404 	addi	sp,sp,80
8020c67c:	f800283a 	ret
8020c680:	288010c4 	addi	r2,r5,67
8020c684:	28800015 	stw	r2,0(r5)
8020c688:	28800415 	stw	r2,16(r5)
8020c68c:	00800044 	movi	r2,1
8020c690:	28800515 	stw	r2,20(r5)
8020c694:	f800283a 	ret
8020c698:	04801004 	movi	r18,64
8020c69c:	003fe006 	br	8020c620 <__reset+0xfa1ec620>
8020c6a0:	81000a17 	ldw	r4,40(r16)
8020c6a4:	00e00874 	movhi	r3,32801
8020c6a8:	18fa6804 	addi	r3,r3,-5728
8020c6ac:	20ffc51e 	bne	r4,r3,8020c5c4 <__reset+0xfa1ec5c4>
8020c6b0:	8080030b 	ldhu	r2,12(r16)
8020c6b4:	04810004 	movi	r18,1024
8020c6b8:	84801315 	stw	r18,76(r16)
8020c6bc:	1484b03a 	or	r2,r2,r18
8020c6c0:	8080030d 	sth	r2,12(r16)
8020c6c4:	0027883a 	mov	r19,zero
8020c6c8:	003fd806 	br	8020c62c <__reset+0xfa1ec62c>
8020c6cc:	8140038f 	ldh	r5,14(r16)
8020c6d0:	8809883a 	mov	r4,r17
8020c6d4:	0211a140 	call	80211a14 <_isatty_r>
8020c6d8:	103fe226 	beq	r2,zero,8020c664 <__reset+0xfa1ec664>
8020c6dc:	8080030b 	ldhu	r2,12(r16)
8020c6e0:	10800054 	ori	r2,r2,1
8020c6e4:	8080030d 	sth	r2,12(r16)
8020c6e8:	003fde06 	br	8020c664 <__reset+0xfa1ec664>
8020c6ec:	8080030b 	ldhu	r2,12(r16)
8020c6f0:	10c0800c 	andi	r3,r2,512
8020c6f4:	183fdb1e 	bne	r3,zero,8020c664 <__reset+0xfa1ec664>
8020c6f8:	10800094 	ori	r2,r2,2
8020c6fc:	80c010c4 	addi	r3,r16,67
8020c700:	8080030d 	sth	r2,12(r16)
8020c704:	00800044 	movi	r2,1
8020c708:	80c00015 	stw	r3,0(r16)
8020c70c:	80c00415 	stw	r3,16(r16)
8020c710:	80800515 	stw	r2,20(r16)
8020c714:	003fd306 	br	8020c664 <__reset+0xfa1ec664>
8020c718:	04810004 	movi	r18,1024
8020c71c:	003fc306 	br	8020c62c <__reset+0xfa1ec62c>
8020c720:	0027883a 	mov	r19,zero
8020c724:	04810004 	movi	r18,1024
8020c728:	003fc006 	br	8020c62c <__reset+0xfa1ec62c>

8020c72c <_malloc_r>:
8020c72c:	defff504 	addi	sp,sp,-44
8020c730:	dc800315 	stw	r18,12(sp)
8020c734:	dfc00a15 	stw	ra,40(sp)
8020c738:	df000915 	stw	fp,36(sp)
8020c73c:	ddc00815 	stw	r23,32(sp)
8020c740:	dd800715 	stw	r22,28(sp)
8020c744:	dd400615 	stw	r21,24(sp)
8020c748:	dd000515 	stw	r20,20(sp)
8020c74c:	dcc00415 	stw	r19,16(sp)
8020c750:	dc400215 	stw	r17,8(sp)
8020c754:	dc000115 	stw	r16,4(sp)
8020c758:	288002c4 	addi	r2,r5,11
8020c75c:	00c00584 	movi	r3,22
8020c760:	2025883a 	mov	r18,r4
8020c764:	18807f2e 	bgeu	r3,r2,8020c964 <_malloc_r+0x238>
8020c768:	047ffe04 	movi	r17,-8
8020c76c:	1462703a 	and	r17,r2,r17
8020c770:	8800a316 	blt	r17,zero,8020ca00 <_malloc_r+0x2d4>
8020c774:	8940a236 	bltu	r17,r5,8020ca00 <_malloc_r+0x2d4>
8020c778:	02156a80 	call	802156a8 <__malloc_lock>
8020c77c:	00807dc4 	movi	r2,503
8020c780:	1441e92e 	bgeu	r2,r17,8020cf28 <_malloc_r+0x7fc>
8020c784:	8804d27a 	srli	r2,r17,9
8020c788:	1000a126 	beq	r2,zero,8020ca10 <_malloc_r+0x2e4>
8020c78c:	00c00104 	movi	r3,4
8020c790:	18811e36 	bltu	r3,r2,8020cc0c <_malloc_r+0x4e0>
8020c794:	8804d1ba 	srli	r2,r17,6
8020c798:	12000e44 	addi	r8,r2,57
8020c79c:	11c00e04 	addi	r7,r2,56
8020c7a0:	4209883a 	add	r4,r8,r8
8020c7a4:	04e008b4 	movhi	r19,32802
8020c7a8:	2109883a 	add	r4,r4,r4
8020c7ac:	9cef0704 	addi	r19,r19,-17380
8020c7b0:	2109883a 	add	r4,r4,r4
8020c7b4:	9909883a 	add	r4,r19,r4
8020c7b8:	24000117 	ldw	r16,4(r4)
8020c7bc:	213ffe04 	addi	r4,r4,-8
8020c7c0:	24009726 	beq	r4,r16,8020ca20 <_malloc_r+0x2f4>
8020c7c4:	80800117 	ldw	r2,4(r16)
8020c7c8:	01bfff04 	movi	r6,-4
8020c7cc:	014003c4 	movi	r5,15
8020c7d0:	1184703a 	and	r2,r2,r6
8020c7d4:	1447c83a 	sub	r3,r2,r17
8020c7d8:	28c00716 	blt	r5,r3,8020c7f8 <_malloc_r+0xcc>
8020c7dc:	1800920e 	bge	r3,zero,8020ca28 <_malloc_r+0x2fc>
8020c7e0:	84000317 	ldw	r16,12(r16)
8020c7e4:	24008e26 	beq	r4,r16,8020ca20 <_malloc_r+0x2f4>
8020c7e8:	80800117 	ldw	r2,4(r16)
8020c7ec:	1184703a 	and	r2,r2,r6
8020c7f0:	1447c83a 	sub	r3,r2,r17
8020c7f4:	28fff90e 	bge	r5,r3,8020c7dc <__reset+0xfa1ec7dc>
8020c7f8:	3809883a 	mov	r4,r7
8020c7fc:	01a008b4 	movhi	r6,32802
8020c800:	9c000417 	ldw	r16,16(r19)
8020c804:	31af0704 	addi	r6,r6,-17380
8020c808:	32000204 	addi	r8,r6,8
8020c80c:	82013426 	beq	r16,r8,8020cce0 <_malloc_r+0x5b4>
8020c810:	80c00117 	ldw	r3,4(r16)
8020c814:	00bfff04 	movi	r2,-4
8020c818:	188e703a 	and	r7,r3,r2
8020c81c:	3c45c83a 	sub	r2,r7,r17
8020c820:	00c003c4 	movi	r3,15
8020c824:	18811f16 	blt	r3,r2,8020cca4 <_malloc_r+0x578>
8020c828:	32000515 	stw	r8,20(r6)
8020c82c:	32000415 	stw	r8,16(r6)
8020c830:	10007f0e 	bge	r2,zero,8020ca30 <_malloc_r+0x304>
8020c834:	00807fc4 	movi	r2,511
8020c838:	11c0fd36 	bltu	r2,r7,8020cc30 <_malloc_r+0x504>
8020c83c:	3806d0fa 	srli	r3,r7,3
8020c840:	01c00044 	movi	r7,1
8020c844:	30800117 	ldw	r2,4(r6)
8020c848:	19400044 	addi	r5,r3,1
8020c84c:	294b883a 	add	r5,r5,r5
8020c850:	1807d0ba 	srai	r3,r3,2
8020c854:	294b883a 	add	r5,r5,r5
8020c858:	294b883a 	add	r5,r5,r5
8020c85c:	298b883a 	add	r5,r5,r6
8020c860:	38c6983a 	sll	r3,r7,r3
8020c864:	29c00017 	ldw	r7,0(r5)
8020c868:	2a7ffe04 	addi	r9,r5,-8
8020c86c:	1886b03a 	or	r3,r3,r2
8020c870:	82400315 	stw	r9,12(r16)
8020c874:	81c00215 	stw	r7,8(r16)
8020c878:	30c00115 	stw	r3,4(r6)
8020c87c:	2c000015 	stw	r16,0(r5)
8020c880:	3c000315 	stw	r16,12(r7)
8020c884:	2005d0ba 	srai	r2,r4,2
8020c888:	01400044 	movi	r5,1
8020c88c:	288a983a 	sll	r5,r5,r2
8020c890:	19406f36 	bltu	r3,r5,8020ca50 <_malloc_r+0x324>
8020c894:	28c4703a 	and	r2,r5,r3
8020c898:	10000a1e 	bne	r2,zero,8020c8c4 <_malloc_r+0x198>
8020c89c:	00bfff04 	movi	r2,-4
8020c8a0:	294b883a 	add	r5,r5,r5
8020c8a4:	2088703a 	and	r4,r4,r2
8020c8a8:	28c4703a 	and	r2,r5,r3
8020c8ac:	21000104 	addi	r4,r4,4
8020c8b0:	1000041e 	bne	r2,zero,8020c8c4 <_malloc_r+0x198>
8020c8b4:	294b883a 	add	r5,r5,r5
8020c8b8:	28c4703a 	and	r2,r5,r3
8020c8bc:	21000104 	addi	r4,r4,4
8020c8c0:	103ffc26 	beq	r2,zero,8020c8b4 <__reset+0xfa1ec8b4>
8020c8c4:	02bfff04 	movi	r10,-4
8020c8c8:	024003c4 	movi	r9,15
8020c8cc:	21800044 	addi	r6,r4,1
8020c8d0:	318d883a 	add	r6,r6,r6
8020c8d4:	318d883a 	add	r6,r6,r6
8020c8d8:	318d883a 	add	r6,r6,r6
8020c8dc:	998d883a 	add	r6,r19,r6
8020c8e0:	333ffe04 	addi	r12,r6,-8
8020c8e4:	2017883a 	mov	r11,r4
8020c8e8:	31800104 	addi	r6,r6,4
8020c8ec:	34000017 	ldw	r16,0(r6)
8020c8f0:	31fffd04 	addi	r7,r6,-12
8020c8f4:	81c0041e 	bne	r16,r7,8020c908 <_malloc_r+0x1dc>
8020c8f8:	0000fb06 	br	8020cce8 <_malloc_r+0x5bc>
8020c8fc:	1801030e 	bge	r3,zero,8020cd0c <_malloc_r+0x5e0>
8020c900:	84000317 	ldw	r16,12(r16)
8020c904:	81c0f826 	beq	r16,r7,8020cce8 <_malloc_r+0x5bc>
8020c908:	80800117 	ldw	r2,4(r16)
8020c90c:	1284703a 	and	r2,r2,r10
8020c910:	1447c83a 	sub	r3,r2,r17
8020c914:	48fff90e 	bge	r9,r3,8020c8fc <__reset+0xfa1ec8fc>
8020c918:	80800317 	ldw	r2,12(r16)
8020c91c:	81000217 	ldw	r4,8(r16)
8020c920:	89400054 	ori	r5,r17,1
8020c924:	81400115 	stw	r5,4(r16)
8020c928:	20800315 	stw	r2,12(r4)
8020c92c:	11000215 	stw	r4,8(r2)
8020c930:	8463883a 	add	r17,r16,r17
8020c934:	9c400515 	stw	r17,20(r19)
8020c938:	9c400415 	stw	r17,16(r19)
8020c93c:	18800054 	ori	r2,r3,1
8020c940:	88800115 	stw	r2,4(r17)
8020c944:	8a000315 	stw	r8,12(r17)
8020c948:	8a000215 	stw	r8,8(r17)
8020c94c:	88e3883a 	add	r17,r17,r3
8020c950:	88c00015 	stw	r3,0(r17)
8020c954:	9009883a 	mov	r4,r18
8020c958:	02156cc0 	call	802156cc <__malloc_unlock>
8020c95c:	80800204 	addi	r2,r16,8
8020c960:	00001b06 	br	8020c9d0 <_malloc_r+0x2a4>
8020c964:	04400404 	movi	r17,16
8020c968:	89402536 	bltu	r17,r5,8020ca00 <_malloc_r+0x2d4>
8020c96c:	02156a80 	call	802156a8 <__malloc_lock>
8020c970:	00800184 	movi	r2,6
8020c974:	01000084 	movi	r4,2
8020c978:	04e008b4 	movhi	r19,32802
8020c97c:	1085883a 	add	r2,r2,r2
8020c980:	9cef0704 	addi	r19,r19,-17380
8020c984:	1085883a 	add	r2,r2,r2
8020c988:	9885883a 	add	r2,r19,r2
8020c98c:	14000117 	ldw	r16,4(r2)
8020c990:	10fffe04 	addi	r3,r2,-8
8020c994:	80c0d926 	beq	r16,r3,8020ccfc <_malloc_r+0x5d0>
8020c998:	80c00117 	ldw	r3,4(r16)
8020c99c:	81000317 	ldw	r4,12(r16)
8020c9a0:	00bfff04 	movi	r2,-4
8020c9a4:	1884703a 	and	r2,r3,r2
8020c9a8:	81400217 	ldw	r5,8(r16)
8020c9ac:	8085883a 	add	r2,r16,r2
8020c9b0:	10c00117 	ldw	r3,4(r2)
8020c9b4:	29000315 	stw	r4,12(r5)
8020c9b8:	21400215 	stw	r5,8(r4)
8020c9bc:	18c00054 	ori	r3,r3,1
8020c9c0:	10c00115 	stw	r3,4(r2)
8020c9c4:	9009883a 	mov	r4,r18
8020c9c8:	02156cc0 	call	802156cc <__malloc_unlock>
8020c9cc:	80800204 	addi	r2,r16,8
8020c9d0:	dfc00a17 	ldw	ra,40(sp)
8020c9d4:	df000917 	ldw	fp,36(sp)
8020c9d8:	ddc00817 	ldw	r23,32(sp)
8020c9dc:	dd800717 	ldw	r22,28(sp)
8020c9e0:	dd400617 	ldw	r21,24(sp)
8020c9e4:	dd000517 	ldw	r20,20(sp)
8020c9e8:	dcc00417 	ldw	r19,16(sp)
8020c9ec:	dc800317 	ldw	r18,12(sp)
8020c9f0:	dc400217 	ldw	r17,8(sp)
8020c9f4:	dc000117 	ldw	r16,4(sp)
8020c9f8:	dec00b04 	addi	sp,sp,44
8020c9fc:	f800283a 	ret
8020ca00:	00800304 	movi	r2,12
8020ca04:	90800015 	stw	r2,0(r18)
8020ca08:	0005883a 	mov	r2,zero
8020ca0c:	003ff006 	br	8020c9d0 <__reset+0xfa1ec9d0>
8020ca10:	01002004 	movi	r4,128
8020ca14:	02001004 	movi	r8,64
8020ca18:	01c00fc4 	movi	r7,63
8020ca1c:	003f6106 	br	8020c7a4 <__reset+0xfa1ec7a4>
8020ca20:	4009883a 	mov	r4,r8
8020ca24:	003f7506 	br	8020c7fc <__reset+0xfa1ec7fc>
8020ca28:	81000317 	ldw	r4,12(r16)
8020ca2c:	003fde06 	br	8020c9a8 <__reset+0xfa1ec9a8>
8020ca30:	81c5883a 	add	r2,r16,r7
8020ca34:	11400117 	ldw	r5,4(r2)
8020ca38:	9009883a 	mov	r4,r18
8020ca3c:	29400054 	ori	r5,r5,1
8020ca40:	11400115 	stw	r5,4(r2)
8020ca44:	02156cc0 	call	802156cc <__malloc_unlock>
8020ca48:	80800204 	addi	r2,r16,8
8020ca4c:	003fe006 	br	8020c9d0 <__reset+0xfa1ec9d0>
8020ca50:	9c000217 	ldw	r16,8(r19)
8020ca54:	00bfff04 	movi	r2,-4
8020ca58:	85800117 	ldw	r22,4(r16)
8020ca5c:	b0ac703a 	and	r22,r22,r2
8020ca60:	b4400336 	bltu	r22,r17,8020ca70 <_malloc_r+0x344>
8020ca64:	b445c83a 	sub	r2,r22,r17
8020ca68:	00c003c4 	movi	r3,15
8020ca6c:	18805d16 	blt	r3,r2,8020cbe4 <_malloc_r+0x4b8>
8020ca70:	05e008b4 	movhi	r23,32802
8020ca74:	00a008b4 	movhi	r2,32802
8020ca78:	10b51a04 	addi	r2,r2,-11160
8020ca7c:	bdf4ff04 	addi	r23,r23,-11268
8020ca80:	15400017 	ldw	r21,0(r2)
8020ca84:	b8c00017 	ldw	r3,0(r23)
8020ca88:	00bfffc4 	movi	r2,-1
8020ca8c:	858d883a 	add	r6,r16,r22
8020ca90:	8d6b883a 	add	r21,r17,r21
8020ca94:	1880ea26 	beq	r3,r2,8020ce40 <_malloc_r+0x714>
8020ca98:	ad4403c4 	addi	r21,r21,4111
8020ca9c:	00bc0004 	movi	r2,-4096
8020caa0:	a8aa703a 	and	r21,r21,r2
8020caa4:	a80b883a 	mov	r5,r21
8020caa8:	9009883a 	mov	r4,r18
8020caac:	d9800015 	stw	r6,0(sp)
8020cab0:	020e8740 	call	8020e874 <_sbrk_r>
8020cab4:	1029883a 	mov	r20,r2
8020cab8:	00bfffc4 	movi	r2,-1
8020cabc:	d9800017 	ldw	r6,0(sp)
8020cac0:	a080e826 	beq	r20,r2,8020ce64 <_malloc_r+0x738>
8020cac4:	a180a636 	bltu	r20,r6,8020cd60 <_malloc_r+0x634>
8020cac8:	072008b4 	movhi	fp,32802
8020cacc:	e7352304 	addi	fp,fp,-11124
8020cad0:	e0800017 	ldw	r2,0(fp)
8020cad4:	a887883a 	add	r3,r21,r2
8020cad8:	e0c00015 	stw	r3,0(fp)
8020cadc:	3500e626 	beq	r6,r20,8020ce78 <_malloc_r+0x74c>
8020cae0:	b9000017 	ldw	r4,0(r23)
8020cae4:	00bfffc4 	movi	r2,-1
8020cae8:	2080ee26 	beq	r4,r2,8020cea4 <_malloc_r+0x778>
8020caec:	a185c83a 	sub	r2,r20,r6
8020caf0:	10c5883a 	add	r2,r2,r3
8020caf4:	e0800015 	stw	r2,0(fp)
8020caf8:	a0c001cc 	andi	r3,r20,7
8020cafc:	1800bc26 	beq	r3,zero,8020cdf0 <_malloc_r+0x6c4>
8020cb00:	a0e9c83a 	sub	r20,r20,r3
8020cb04:	00840204 	movi	r2,4104
8020cb08:	a5000204 	addi	r20,r20,8
8020cb0c:	10c7c83a 	sub	r3,r2,r3
8020cb10:	a545883a 	add	r2,r20,r21
8020cb14:	1083ffcc 	andi	r2,r2,4095
8020cb18:	18abc83a 	sub	r21,r3,r2
8020cb1c:	a80b883a 	mov	r5,r21
8020cb20:	9009883a 	mov	r4,r18
8020cb24:	020e8740 	call	8020e874 <_sbrk_r>
8020cb28:	00ffffc4 	movi	r3,-1
8020cb2c:	10c0e126 	beq	r2,r3,8020ceb4 <_malloc_r+0x788>
8020cb30:	1505c83a 	sub	r2,r2,r20
8020cb34:	1545883a 	add	r2,r2,r21
8020cb38:	10800054 	ori	r2,r2,1
8020cb3c:	e0c00017 	ldw	r3,0(fp)
8020cb40:	9d000215 	stw	r20,8(r19)
8020cb44:	a0800115 	stw	r2,4(r20)
8020cb48:	a8c7883a 	add	r3,r21,r3
8020cb4c:	e0c00015 	stw	r3,0(fp)
8020cb50:	84c00e26 	beq	r16,r19,8020cb8c <_malloc_r+0x460>
8020cb54:	018003c4 	movi	r6,15
8020cb58:	3580a72e 	bgeu	r6,r22,8020cdf8 <_malloc_r+0x6cc>
8020cb5c:	81400117 	ldw	r5,4(r16)
8020cb60:	013ffe04 	movi	r4,-8
8020cb64:	b0bffd04 	addi	r2,r22,-12
8020cb68:	1104703a 	and	r2,r2,r4
8020cb6c:	2900004c 	andi	r4,r5,1
8020cb70:	2088b03a 	or	r4,r4,r2
8020cb74:	81000115 	stw	r4,4(r16)
8020cb78:	01400144 	movi	r5,5
8020cb7c:	8089883a 	add	r4,r16,r2
8020cb80:	21400115 	stw	r5,4(r4)
8020cb84:	21400215 	stw	r5,8(r4)
8020cb88:	3080cd36 	bltu	r6,r2,8020cec0 <_malloc_r+0x794>
8020cb8c:	00a008b4 	movhi	r2,32802
8020cb90:	10b51904 	addi	r2,r2,-11164
8020cb94:	11000017 	ldw	r4,0(r2)
8020cb98:	20c0012e 	bgeu	r4,r3,8020cba0 <_malloc_r+0x474>
8020cb9c:	10c00015 	stw	r3,0(r2)
8020cba0:	00a008b4 	movhi	r2,32802
8020cba4:	10b51804 	addi	r2,r2,-11168
8020cba8:	11000017 	ldw	r4,0(r2)
8020cbac:	9c000217 	ldw	r16,8(r19)
8020cbb0:	20c0012e 	bgeu	r4,r3,8020cbb8 <_malloc_r+0x48c>
8020cbb4:	10c00015 	stw	r3,0(r2)
8020cbb8:	80c00117 	ldw	r3,4(r16)
8020cbbc:	00bfff04 	movi	r2,-4
8020cbc0:	1886703a 	and	r3,r3,r2
8020cbc4:	1c45c83a 	sub	r2,r3,r17
8020cbc8:	1c400236 	bltu	r3,r17,8020cbd4 <_malloc_r+0x4a8>
8020cbcc:	00c003c4 	movi	r3,15
8020cbd0:	18800416 	blt	r3,r2,8020cbe4 <_malloc_r+0x4b8>
8020cbd4:	9009883a 	mov	r4,r18
8020cbd8:	02156cc0 	call	802156cc <__malloc_unlock>
8020cbdc:	0005883a 	mov	r2,zero
8020cbe0:	003f7b06 	br	8020c9d0 <__reset+0xfa1ec9d0>
8020cbe4:	88c00054 	ori	r3,r17,1
8020cbe8:	80c00115 	stw	r3,4(r16)
8020cbec:	8463883a 	add	r17,r16,r17
8020cbf0:	10800054 	ori	r2,r2,1
8020cbf4:	9c400215 	stw	r17,8(r19)
8020cbf8:	88800115 	stw	r2,4(r17)
8020cbfc:	9009883a 	mov	r4,r18
8020cc00:	02156cc0 	call	802156cc <__malloc_unlock>
8020cc04:	80800204 	addi	r2,r16,8
8020cc08:	003f7106 	br	8020c9d0 <__reset+0xfa1ec9d0>
8020cc0c:	00c00504 	movi	r3,20
8020cc10:	18804a2e 	bgeu	r3,r2,8020cd3c <_malloc_r+0x610>
8020cc14:	00c01504 	movi	r3,84
8020cc18:	18806e36 	bltu	r3,r2,8020cdd4 <_malloc_r+0x6a8>
8020cc1c:	8804d33a 	srli	r2,r17,12
8020cc20:	12001bc4 	addi	r8,r2,111
8020cc24:	11c01b84 	addi	r7,r2,110
8020cc28:	4209883a 	add	r4,r8,r8
8020cc2c:	003edd06 	br	8020c7a4 <__reset+0xfa1ec7a4>
8020cc30:	3804d27a 	srli	r2,r7,9
8020cc34:	00c00104 	movi	r3,4
8020cc38:	1880442e 	bgeu	r3,r2,8020cd4c <_malloc_r+0x620>
8020cc3c:	00c00504 	movi	r3,20
8020cc40:	18808136 	bltu	r3,r2,8020ce48 <_malloc_r+0x71c>
8020cc44:	11401704 	addi	r5,r2,92
8020cc48:	10c016c4 	addi	r3,r2,91
8020cc4c:	294b883a 	add	r5,r5,r5
8020cc50:	294b883a 	add	r5,r5,r5
8020cc54:	294b883a 	add	r5,r5,r5
8020cc58:	994b883a 	add	r5,r19,r5
8020cc5c:	28800017 	ldw	r2,0(r5)
8020cc60:	01a008b4 	movhi	r6,32802
8020cc64:	297ffe04 	addi	r5,r5,-8
8020cc68:	31af0704 	addi	r6,r6,-17380
8020cc6c:	28806526 	beq	r5,r2,8020ce04 <_malloc_r+0x6d8>
8020cc70:	01bfff04 	movi	r6,-4
8020cc74:	10c00117 	ldw	r3,4(r2)
8020cc78:	1986703a 	and	r3,r3,r6
8020cc7c:	38c0022e 	bgeu	r7,r3,8020cc88 <_malloc_r+0x55c>
8020cc80:	10800217 	ldw	r2,8(r2)
8020cc84:	28bffb1e 	bne	r5,r2,8020cc74 <__reset+0xfa1ecc74>
8020cc88:	11400317 	ldw	r5,12(r2)
8020cc8c:	98c00117 	ldw	r3,4(r19)
8020cc90:	81400315 	stw	r5,12(r16)
8020cc94:	80800215 	stw	r2,8(r16)
8020cc98:	2c000215 	stw	r16,8(r5)
8020cc9c:	14000315 	stw	r16,12(r2)
8020cca0:	003ef806 	br	8020c884 <__reset+0xfa1ec884>
8020cca4:	88c00054 	ori	r3,r17,1
8020cca8:	80c00115 	stw	r3,4(r16)
8020ccac:	8463883a 	add	r17,r16,r17
8020ccb0:	34400515 	stw	r17,20(r6)
8020ccb4:	34400415 	stw	r17,16(r6)
8020ccb8:	10c00054 	ori	r3,r2,1
8020ccbc:	8a000315 	stw	r8,12(r17)
8020ccc0:	8a000215 	stw	r8,8(r17)
8020ccc4:	88c00115 	stw	r3,4(r17)
8020ccc8:	88a3883a 	add	r17,r17,r2
8020cccc:	88800015 	stw	r2,0(r17)
8020ccd0:	9009883a 	mov	r4,r18
8020ccd4:	02156cc0 	call	802156cc <__malloc_unlock>
8020ccd8:	80800204 	addi	r2,r16,8
8020ccdc:	003f3c06 	br	8020c9d0 <__reset+0xfa1ec9d0>
8020cce0:	30c00117 	ldw	r3,4(r6)
8020cce4:	003ee706 	br	8020c884 <__reset+0xfa1ec884>
8020cce8:	5ac00044 	addi	r11,r11,1
8020ccec:	588000cc 	andi	r2,r11,3
8020ccf0:	31800204 	addi	r6,r6,8
8020ccf4:	103efd1e 	bne	r2,zero,8020c8ec <__reset+0xfa1ec8ec>
8020ccf8:	00002406 	br	8020cd8c <_malloc_r+0x660>
8020ccfc:	14000317 	ldw	r16,12(r2)
8020cd00:	143f251e 	bne	r2,r16,8020c998 <__reset+0xfa1ec998>
8020cd04:	21000084 	addi	r4,r4,2
8020cd08:	003ebc06 	br	8020c7fc <__reset+0xfa1ec7fc>
8020cd0c:	8085883a 	add	r2,r16,r2
8020cd10:	10c00117 	ldw	r3,4(r2)
8020cd14:	81000317 	ldw	r4,12(r16)
8020cd18:	81400217 	ldw	r5,8(r16)
8020cd1c:	18c00054 	ori	r3,r3,1
8020cd20:	10c00115 	stw	r3,4(r2)
8020cd24:	29000315 	stw	r4,12(r5)
8020cd28:	21400215 	stw	r5,8(r4)
8020cd2c:	9009883a 	mov	r4,r18
8020cd30:	02156cc0 	call	802156cc <__malloc_unlock>
8020cd34:	80800204 	addi	r2,r16,8
8020cd38:	003f2506 	br	8020c9d0 <__reset+0xfa1ec9d0>
8020cd3c:	12001704 	addi	r8,r2,92
8020cd40:	11c016c4 	addi	r7,r2,91
8020cd44:	4209883a 	add	r4,r8,r8
8020cd48:	003e9606 	br	8020c7a4 <__reset+0xfa1ec7a4>
8020cd4c:	3804d1ba 	srli	r2,r7,6
8020cd50:	11400e44 	addi	r5,r2,57
8020cd54:	10c00e04 	addi	r3,r2,56
8020cd58:	294b883a 	add	r5,r5,r5
8020cd5c:	003fbc06 	br	8020cc50 <__reset+0xfa1ecc50>
8020cd60:	84ff5926 	beq	r16,r19,8020cac8 <__reset+0xfa1ecac8>
8020cd64:	00a008b4 	movhi	r2,32802
8020cd68:	10af0704 	addi	r2,r2,-17380
8020cd6c:	14000217 	ldw	r16,8(r2)
8020cd70:	00bfff04 	movi	r2,-4
8020cd74:	80c00117 	ldw	r3,4(r16)
8020cd78:	1886703a 	and	r3,r3,r2
8020cd7c:	003f9106 	br	8020cbc4 <__reset+0xfa1ecbc4>
8020cd80:	60800217 	ldw	r2,8(r12)
8020cd84:	213fffc4 	addi	r4,r4,-1
8020cd88:	1300651e 	bne	r2,r12,8020cf20 <_malloc_r+0x7f4>
8020cd8c:	208000cc 	andi	r2,r4,3
8020cd90:	633ffe04 	addi	r12,r12,-8
8020cd94:	103ffa1e 	bne	r2,zero,8020cd80 <__reset+0xfa1ecd80>
8020cd98:	98800117 	ldw	r2,4(r19)
8020cd9c:	0146303a 	nor	r3,zero,r5
8020cda0:	1884703a 	and	r2,r3,r2
8020cda4:	98800115 	stw	r2,4(r19)
8020cda8:	294b883a 	add	r5,r5,r5
8020cdac:	117f2836 	bltu	r2,r5,8020ca50 <__reset+0xfa1eca50>
8020cdb0:	283f2726 	beq	r5,zero,8020ca50 <__reset+0xfa1eca50>
8020cdb4:	2886703a 	and	r3,r5,r2
8020cdb8:	5809883a 	mov	r4,r11
8020cdbc:	183ec31e 	bne	r3,zero,8020c8cc <__reset+0xfa1ec8cc>
8020cdc0:	294b883a 	add	r5,r5,r5
8020cdc4:	2886703a 	and	r3,r5,r2
8020cdc8:	21000104 	addi	r4,r4,4
8020cdcc:	183ffc26 	beq	r3,zero,8020cdc0 <__reset+0xfa1ecdc0>
8020cdd0:	003ebe06 	br	8020c8cc <__reset+0xfa1ec8cc>
8020cdd4:	00c05504 	movi	r3,340
8020cdd8:	18801236 	bltu	r3,r2,8020ce24 <_malloc_r+0x6f8>
8020cddc:	8804d3fa 	srli	r2,r17,15
8020cde0:	12001e04 	addi	r8,r2,120
8020cde4:	11c01dc4 	addi	r7,r2,119
8020cde8:	4209883a 	add	r4,r8,r8
8020cdec:	003e6d06 	br	8020c7a4 <__reset+0xfa1ec7a4>
8020cdf0:	00c40004 	movi	r3,4096
8020cdf4:	003f4606 	br	8020cb10 <__reset+0xfa1ecb10>
8020cdf8:	00800044 	movi	r2,1
8020cdfc:	a0800115 	stw	r2,4(r20)
8020ce00:	003f7406 	br	8020cbd4 <__reset+0xfa1ecbd4>
8020ce04:	1805d0ba 	srai	r2,r3,2
8020ce08:	01c00044 	movi	r7,1
8020ce0c:	30c00117 	ldw	r3,4(r6)
8020ce10:	388e983a 	sll	r7,r7,r2
8020ce14:	2805883a 	mov	r2,r5
8020ce18:	38c6b03a 	or	r3,r7,r3
8020ce1c:	30c00115 	stw	r3,4(r6)
8020ce20:	003f9b06 	br	8020cc90 <__reset+0xfa1ecc90>
8020ce24:	00c15504 	movi	r3,1364
8020ce28:	18801a36 	bltu	r3,r2,8020ce94 <_malloc_r+0x768>
8020ce2c:	8804d4ba 	srli	r2,r17,18
8020ce30:	12001f44 	addi	r8,r2,125
8020ce34:	11c01f04 	addi	r7,r2,124
8020ce38:	4209883a 	add	r4,r8,r8
8020ce3c:	003e5906 	br	8020c7a4 <__reset+0xfa1ec7a4>
8020ce40:	ad400404 	addi	r21,r21,16
8020ce44:	003f1706 	br	8020caa4 <__reset+0xfa1ecaa4>
8020ce48:	00c01504 	movi	r3,84
8020ce4c:	18802336 	bltu	r3,r2,8020cedc <_malloc_r+0x7b0>
8020ce50:	3804d33a 	srli	r2,r7,12
8020ce54:	11401bc4 	addi	r5,r2,111
8020ce58:	10c01b84 	addi	r3,r2,110
8020ce5c:	294b883a 	add	r5,r5,r5
8020ce60:	003f7b06 	br	8020cc50 <__reset+0xfa1ecc50>
8020ce64:	9c000217 	ldw	r16,8(r19)
8020ce68:	00bfff04 	movi	r2,-4
8020ce6c:	80c00117 	ldw	r3,4(r16)
8020ce70:	1886703a 	and	r3,r3,r2
8020ce74:	003f5306 	br	8020cbc4 <__reset+0xfa1ecbc4>
8020ce78:	3083ffcc 	andi	r2,r6,4095
8020ce7c:	103f181e 	bne	r2,zero,8020cae0 <__reset+0xfa1ecae0>
8020ce80:	99000217 	ldw	r4,8(r19)
8020ce84:	b545883a 	add	r2,r22,r21
8020ce88:	10800054 	ori	r2,r2,1
8020ce8c:	20800115 	stw	r2,4(r4)
8020ce90:	003f3e06 	br	8020cb8c <__reset+0xfa1ecb8c>
8020ce94:	01003f84 	movi	r4,254
8020ce98:	02001fc4 	movi	r8,127
8020ce9c:	01c01f84 	movi	r7,126
8020cea0:	003e4006 	br	8020c7a4 <__reset+0xfa1ec7a4>
8020cea4:	00a008b4 	movhi	r2,32802
8020cea8:	10b4ff04 	addi	r2,r2,-11268
8020ceac:	15000015 	stw	r20,0(r2)
8020ceb0:	003f1106 	br	8020caf8 <__reset+0xfa1ecaf8>
8020ceb4:	00800044 	movi	r2,1
8020ceb8:	002b883a 	mov	r21,zero
8020cebc:	003f1f06 	br	8020cb3c <__reset+0xfa1ecb3c>
8020cec0:	81400204 	addi	r5,r16,8
8020cec4:	9009883a 	mov	r4,r18
8020cec8:	020bb400 	call	8020bb40 <_free_r>
8020cecc:	00a008b4 	movhi	r2,32802
8020ced0:	10b52304 	addi	r2,r2,-11124
8020ced4:	10c00017 	ldw	r3,0(r2)
8020ced8:	003f2c06 	br	8020cb8c <__reset+0xfa1ecb8c>
8020cedc:	00c05504 	movi	r3,340
8020cee0:	18800536 	bltu	r3,r2,8020cef8 <_malloc_r+0x7cc>
8020cee4:	3804d3fa 	srli	r2,r7,15
8020cee8:	11401e04 	addi	r5,r2,120
8020ceec:	10c01dc4 	addi	r3,r2,119
8020cef0:	294b883a 	add	r5,r5,r5
8020cef4:	003f5606 	br	8020cc50 <__reset+0xfa1ecc50>
8020cef8:	00c15504 	movi	r3,1364
8020cefc:	18800536 	bltu	r3,r2,8020cf14 <_malloc_r+0x7e8>
8020cf00:	3804d4ba 	srli	r2,r7,18
8020cf04:	11401f44 	addi	r5,r2,125
8020cf08:	10c01f04 	addi	r3,r2,124
8020cf0c:	294b883a 	add	r5,r5,r5
8020cf10:	003f4f06 	br	8020cc50 <__reset+0xfa1ecc50>
8020cf14:	01403f84 	movi	r5,254
8020cf18:	00c01f84 	movi	r3,126
8020cf1c:	003f4c06 	br	8020cc50 <__reset+0xfa1ecc50>
8020cf20:	98800117 	ldw	r2,4(r19)
8020cf24:	003fa006 	br	8020cda8 <__reset+0xfa1ecda8>
8020cf28:	8808d0fa 	srli	r4,r17,3
8020cf2c:	20800044 	addi	r2,r4,1
8020cf30:	1085883a 	add	r2,r2,r2
8020cf34:	003e9006 	br	8020c978 <__reset+0xfa1ec978>

8020cf38 <memchr>:
8020cf38:	208000cc 	andi	r2,r4,3
8020cf3c:	280f883a 	mov	r7,r5
8020cf40:	10003426 	beq	r2,zero,8020d014 <memchr+0xdc>
8020cf44:	30bfffc4 	addi	r2,r6,-1
8020cf48:	30001a26 	beq	r6,zero,8020cfb4 <memchr+0x7c>
8020cf4c:	20c00003 	ldbu	r3,0(r4)
8020cf50:	29803fcc 	andi	r6,r5,255
8020cf54:	30c0051e 	bne	r6,r3,8020cf6c <memchr+0x34>
8020cf58:	00001806 	br	8020cfbc <memchr+0x84>
8020cf5c:	10001526 	beq	r2,zero,8020cfb4 <memchr+0x7c>
8020cf60:	20c00003 	ldbu	r3,0(r4)
8020cf64:	10bfffc4 	addi	r2,r2,-1
8020cf68:	30c01426 	beq	r6,r3,8020cfbc <memchr+0x84>
8020cf6c:	21000044 	addi	r4,r4,1
8020cf70:	20c000cc 	andi	r3,r4,3
8020cf74:	183ff91e 	bne	r3,zero,8020cf5c <__reset+0xfa1ecf5c>
8020cf78:	020000c4 	movi	r8,3
8020cf7c:	40801136 	bltu	r8,r2,8020cfc4 <memchr+0x8c>
8020cf80:	10000c26 	beq	r2,zero,8020cfb4 <memchr+0x7c>
8020cf84:	20c00003 	ldbu	r3,0(r4)
8020cf88:	29403fcc 	andi	r5,r5,255
8020cf8c:	28c00b26 	beq	r5,r3,8020cfbc <memchr+0x84>
8020cf90:	20c00044 	addi	r3,r4,1
8020cf94:	39803fcc 	andi	r6,r7,255
8020cf98:	2089883a 	add	r4,r4,r2
8020cf9c:	00000306 	br	8020cfac <memchr+0x74>
8020cfa0:	18c00044 	addi	r3,r3,1
8020cfa4:	197fffc3 	ldbu	r5,-1(r3)
8020cfa8:	31400526 	beq	r6,r5,8020cfc0 <memchr+0x88>
8020cfac:	1805883a 	mov	r2,r3
8020cfb0:	20fffb1e 	bne	r4,r3,8020cfa0 <__reset+0xfa1ecfa0>
8020cfb4:	0005883a 	mov	r2,zero
8020cfb8:	f800283a 	ret
8020cfbc:	2005883a 	mov	r2,r4
8020cfc0:	f800283a 	ret
8020cfc4:	28c03fcc 	andi	r3,r5,255
8020cfc8:	1812923a 	slli	r9,r3,8
8020cfcc:	02ffbff4 	movhi	r11,65279
8020cfd0:	02a02074 	movhi	r10,32897
8020cfd4:	48d2b03a 	or	r9,r9,r3
8020cfd8:	4806943a 	slli	r3,r9,16
8020cfdc:	5affbfc4 	addi	r11,r11,-257
8020cfe0:	52a02004 	addi	r10,r10,-32640
8020cfe4:	48d2b03a 	or	r9,r9,r3
8020cfe8:	20c00017 	ldw	r3,0(r4)
8020cfec:	48c6f03a 	xor	r3,r9,r3
8020cff0:	1acd883a 	add	r6,r3,r11
8020cff4:	00c6303a 	nor	r3,zero,r3
8020cff8:	30c6703a 	and	r3,r6,r3
8020cffc:	1a86703a 	and	r3,r3,r10
8020d000:	183fe01e 	bne	r3,zero,8020cf84 <__reset+0xfa1ecf84>
8020d004:	10bfff04 	addi	r2,r2,-4
8020d008:	21000104 	addi	r4,r4,4
8020d00c:	40bff636 	bltu	r8,r2,8020cfe8 <__reset+0xfa1ecfe8>
8020d010:	003fdb06 	br	8020cf80 <__reset+0xfa1ecf80>
8020d014:	3005883a 	mov	r2,r6
8020d018:	003fd706 	br	8020cf78 <__reset+0xfa1ecf78>

8020d01c <memmove>:
8020d01c:	2005883a 	mov	r2,r4
8020d020:	29000b2e 	bgeu	r5,r4,8020d050 <memmove+0x34>
8020d024:	298f883a 	add	r7,r5,r6
8020d028:	21c0092e 	bgeu	r4,r7,8020d050 <memmove+0x34>
8020d02c:	2187883a 	add	r3,r4,r6
8020d030:	198bc83a 	sub	r5,r3,r6
8020d034:	30004826 	beq	r6,zero,8020d158 <memmove+0x13c>
8020d038:	39ffffc4 	addi	r7,r7,-1
8020d03c:	39000003 	ldbu	r4,0(r7)
8020d040:	18ffffc4 	addi	r3,r3,-1
8020d044:	19000005 	stb	r4,0(r3)
8020d048:	28fffb1e 	bne	r5,r3,8020d038 <__reset+0xfa1ed038>
8020d04c:	f800283a 	ret
8020d050:	00c003c4 	movi	r3,15
8020d054:	1980412e 	bgeu	r3,r6,8020d15c <memmove+0x140>
8020d058:	2886b03a 	or	r3,r5,r2
8020d05c:	18c000cc 	andi	r3,r3,3
8020d060:	1800401e 	bne	r3,zero,8020d164 <memmove+0x148>
8020d064:	33fffc04 	addi	r15,r6,-16
8020d068:	781ed13a 	srli	r15,r15,4
8020d06c:	28c00104 	addi	r3,r5,4
8020d070:	13400104 	addi	r13,r2,4
8020d074:	781c913a 	slli	r14,r15,4
8020d078:	2b000204 	addi	r12,r5,8
8020d07c:	12c00204 	addi	r11,r2,8
8020d080:	73800504 	addi	r14,r14,20
8020d084:	2a800304 	addi	r10,r5,12
8020d088:	12400304 	addi	r9,r2,12
8020d08c:	2b9d883a 	add	r14,r5,r14
8020d090:	2811883a 	mov	r8,r5
8020d094:	100f883a 	mov	r7,r2
8020d098:	41000017 	ldw	r4,0(r8)
8020d09c:	39c00404 	addi	r7,r7,16
8020d0a0:	18c00404 	addi	r3,r3,16
8020d0a4:	393ffc15 	stw	r4,-16(r7)
8020d0a8:	193ffc17 	ldw	r4,-16(r3)
8020d0ac:	6b400404 	addi	r13,r13,16
8020d0b0:	5ac00404 	addi	r11,r11,16
8020d0b4:	693ffc15 	stw	r4,-16(r13)
8020d0b8:	61000017 	ldw	r4,0(r12)
8020d0bc:	4a400404 	addi	r9,r9,16
8020d0c0:	42000404 	addi	r8,r8,16
8020d0c4:	593ffc15 	stw	r4,-16(r11)
8020d0c8:	51000017 	ldw	r4,0(r10)
8020d0cc:	63000404 	addi	r12,r12,16
8020d0d0:	52800404 	addi	r10,r10,16
8020d0d4:	493ffc15 	stw	r4,-16(r9)
8020d0d8:	1bbfef1e 	bne	r3,r14,8020d098 <__reset+0xfa1ed098>
8020d0dc:	79000044 	addi	r4,r15,1
8020d0e0:	2008913a 	slli	r4,r4,4
8020d0e4:	328003cc 	andi	r10,r6,15
8020d0e8:	02c000c4 	movi	r11,3
8020d0ec:	1107883a 	add	r3,r2,r4
8020d0f0:	290b883a 	add	r5,r5,r4
8020d0f4:	5a801e2e 	bgeu	r11,r10,8020d170 <memmove+0x154>
8020d0f8:	1813883a 	mov	r9,r3
8020d0fc:	2811883a 	mov	r8,r5
8020d100:	500f883a 	mov	r7,r10
8020d104:	41000017 	ldw	r4,0(r8)
8020d108:	4a400104 	addi	r9,r9,4
8020d10c:	39ffff04 	addi	r7,r7,-4
8020d110:	493fff15 	stw	r4,-4(r9)
8020d114:	42000104 	addi	r8,r8,4
8020d118:	59fffa36 	bltu	r11,r7,8020d104 <__reset+0xfa1ed104>
8020d11c:	513fff04 	addi	r4,r10,-4
8020d120:	2008d0ba 	srli	r4,r4,2
8020d124:	318000cc 	andi	r6,r6,3
8020d128:	21000044 	addi	r4,r4,1
8020d12c:	2109883a 	add	r4,r4,r4
8020d130:	2109883a 	add	r4,r4,r4
8020d134:	1907883a 	add	r3,r3,r4
8020d138:	290b883a 	add	r5,r5,r4
8020d13c:	30000b26 	beq	r6,zero,8020d16c <memmove+0x150>
8020d140:	198d883a 	add	r6,r3,r6
8020d144:	29c00003 	ldbu	r7,0(r5)
8020d148:	18c00044 	addi	r3,r3,1
8020d14c:	29400044 	addi	r5,r5,1
8020d150:	19ffffc5 	stb	r7,-1(r3)
8020d154:	19bffb1e 	bne	r3,r6,8020d144 <__reset+0xfa1ed144>
8020d158:	f800283a 	ret
8020d15c:	1007883a 	mov	r3,r2
8020d160:	003ff606 	br	8020d13c <__reset+0xfa1ed13c>
8020d164:	1007883a 	mov	r3,r2
8020d168:	003ff506 	br	8020d140 <__reset+0xfa1ed140>
8020d16c:	f800283a 	ret
8020d170:	500d883a 	mov	r6,r10
8020d174:	003ff106 	br	8020d13c <__reset+0xfa1ed13c>

8020d178 <memset>:
8020d178:	20c000cc 	andi	r3,r4,3
8020d17c:	2005883a 	mov	r2,r4
8020d180:	18004426 	beq	r3,zero,8020d294 <memset+0x11c>
8020d184:	31ffffc4 	addi	r7,r6,-1
8020d188:	30004026 	beq	r6,zero,8020d28c <memset+0x114>
8020d18c:	2813883a 	mov	r9,r5
8020d190:	200d883a 	mov	r6,r4
8020d194:	2007883a 	mov	r3,r4
8020d198:	00000406 	br	8020d1ac <memset+0x34>
8020d19c:	3a3fffc4 	addi	r8,r7,-1
8020d1a0:	31800044 	addi	r6,r6,1
8020d1a4:	38003926 	beq	r7,zero,8020d28c <memset+0x114>
8020d1a8:	400f883a 	mov	r7,r8
8020d1ac:	18c00044 	addi	r3,r3,1
8020d1b0:	32400005 	stb	r9,0(r6)
8020d1b4:	1a0000cc 	andi	r8,r3,3
8020d1b8:	403ff81e 	bne	r8,zero,8020d19c <__reset+0xfa1ed19c>
8020d1bc:	010000c4 	movi	r4,3
8020d1c0:	21c02d2e 	bgeu	r4,r7,8020d278 <memset+0x100>
8020d1c4:	29003fcc 	andi	r4,r5,255
8020d1c8:	200c923a 	slli	r6,r4,8
8020d1cc:	3108b03a 	or	r4,r6,r4
8020d1d0:	200c943a 	slli	r6,r4,16
8020d1d4:	218cb03a 	or	r6,r4,r6
8020d1d8:	010003c4 	movi	r4,15
8020d1dc:	21c0182e 	bgeu	r4,r7,8020d240 <memset+0xc8>
8020d1e0:	3b3ffc04 	addi	r12,r7,-16
8020d1e4:	6018d13a 	srli	r12,r12,4
8020d1e8:	1a000104 	addi	r8,r3,4
8020d1ec:	1ac00204 	addi	r11,r3,8
8020d1f0:	6008913a 	slli	r4,r12,4
8020d1f4:	1a800304 	addi	r10,r3,12
8020d1f8:	1813883a 	mov	r9,r3
8020d1fc:	21000504 	addi	r4,r4,20
8020d200:	1909883a 	add	r4,r3,r4
8020d204:	49800015 	stw	r6,0(r9)
8020d208:	41800015 	stw	r6,0(r8)
8020d20c:	59800015 	stw	r6,0(r11)
8020d210:	51800015 	stw	r6,0(r10)
8020d214:	42000404 	addi	r8,r8,16
8020d218:	4a400404 	addi	r9,r9,16
8020d21c:	5ac00404 	addi	r11,r11,16
8020d220:	52800404 	addi	r10,r10,16
8020d224:	413ff71e 	bne	r8,r4,8020d204 <__reset+0xfa1ed204>
8020d228:	63000044 	addi	r12,r12,1
8020d22c:	6018913a 	slli	r12,r12,4
8020d230:	39c003cc 	andi	r7,r7,15
8020d234:	010000c4 	movi	r4,3
8020d238:	1b07883a 	add	r3,r3,r12
8020d23c:	21c00e2e 	bgeu	r4,r7,8020d278 <memset+0x100>
8020d240:	1813883a 	mov	r9,r3
8020d244:	3811883a 	mov	r8,r7
8020d248:	010000c4 	movi	r4,3
8020d24c:	49800015 	stw	r6,0(r9)
8020d250:	423fff04 	addi	r8,r8,-4
8020d254:	4a400104 	addi	r9,r9,4
8020d258:	223ffc36 	bltu	r4,r8,8020d24c <__reset+0xfa1ed24c>
8020d25c:	393fff04 	addi	r4,r7,-4
8020d260:	2008d0ba 	srli	r4,r4,2
8020d264:	39c000cc 	andi	r7,r7,3
8020d268:	21000044 	addi	r4,r4,1
8020d26c:	2109883a 	add	r4,r4,r4
8020d270:	2109883a 	add	r4,r4,r4
8020d274:	1907883a 	add	r3,r3,r4
8020d278:	38000526 	beq	r7,zero,8020d290 <memset+0x118>
8020d27c:	19cf883a 	add	r7,r3,r7
8020d280:	19400005 	stb	r5,0(r3)
8020d284:	18c00044 	addi	r3,r3,1
8020d288:	38fffd1e 	bne	r7,r3,8020d280 <__reset+0xfa1ed280>
8020d28c:	f800283a 	ret
8020d290:	f800283a 	ret
8020d294:	2007883a 	mov	r3,r4
8020d298:	300f883a 	mov	r7,r6
8020d29c:	003fc706 	br	8020d1bc <__reset+0xfa1ed1bc>

8020d2a0 <_Balloc>:
8020d2a0:	20801317 	ldw	r2,76(r4)
8020d2a4:	defffc04 	addi	sp,sp,-16
8020d2a8:	dc400115 	stw	r17,4(sp)
8020d2ac:	dc000015 	stw	r16,0(sp)
8020d2b0:	dfc00315 	stw	ra,12(sp)
8020d2b4:	dc800215 	stw	r18,8(sp)
8020d2b8:	2023883a 	mov	r17,r4
8020d2bc:	2821883a 	mov	r16,r5
8020d2c0:	10000f26 	beq	r2,zero,8020d300 <_Balloc+0x60>
8020d2c4:	8407883a 	add	r3,r16,r16
8020d2c8:	18c7883a 	add	r3,r3,r3
8020d2cc:	10c7883a 	add	r3,r2,r3
8020d2d0:	18800017 	ldw	r2,0(r3)
8020d2d4:	10001126 	beq	r2,zero,8020d31c <_Balloc+0x7c>
8020d2d8:	11000017 	ldw	r4,0(r2)
8020d2dc:	19000015 	stw	r4,0(r3)
8020d2e0:	10000415 	stw	zero,16(r2)
8020d2e4:	10000315 	stw	zero,12(r2)
8020d2e8:	dfc00317 	ldw	ra,12(sp)
8020d2ec:	dc800217 	ldw	r18,8(sp)
8020d2f0:	dc400117 	ldw	r17,4(sp)
8020d2f4:	dc000017 	ldw	r16,0(sp)
8020d2f8:	dec00404 	addi	sp,sp,16
8020d2fc:	f800283a 	ret
8020d300:	01800844 	movi	r6,33
8020d304:	01400104 	movi	r5,4
8020d308:	02115e80 	call	802115e8 <_calloc_r>
8020d30c:	88801315 	stw	r2,76(r17)
8020d310:	103fec1e 	bne	r2,zero,8020d2c4 <__reset+0xfa1ed2c4>
8020d314:	0005883a 	mov	r2,zero
8020d318:	003ff306 	br	8020d2e8 <__reset+0xfa1ed2e8>
8020d31c:	01400044 	movi	r5,1
8020d320:	2c24983a 	sll	r18,r5,r16
8020d324:	8809883a 	mov	r4,r17
8020d328:	91800144 	addi	r6,r18,5
8020d32c:	318d883a 	add	r6,r6,r6
8020d330:	318d883a 	add	r6,r6,r6
8020d334:	02115e80 	call	802115e8 <_calloc_r>
8020d338:	103ff626 	beq	r2,zero,8020d314 <__reset+0xfa1ed314>
8020d33c:	14000115 	stw	r16,4(r2)
8020d340:	14800215 	stw	r18,8(r2)
8020d344:	003fe606 	br	8020d2e0 <__reset+0xfa1ed2e0>

8020d348 <_Bfree>:
8020d348:	28000826 	beq	r5,zero,8020d36c <_Bfree+0x24>
8020d34c:	28c00117 	ldw	r3,4(r5)
8020d350:	20801317 	ldw	r2,76(r4)
8020d354:	18c7883a 	add	r3,r3,r3
8020d358:	18c7883a 	add	r3,r3,r3
8020d35c:	10c5883a 	add	r2,r2,r3
8020d360:	10c00017 	ldw	r3,0(r2)
8020d364:	28c00015 	stw	r3,0(r5)
8020d368:	11400015 	stw	r5,0(r2)
8020d36c:	f800283a 	ret

8020d370 <__multadd>:
8020d370:	defffa04 	addi	sp,sp,-24
8020d374:	dc800315 	stw	r18,12(sp)
8020d378:	dc400215 	stw	r17,8(sp)
8020d37c:	dc000115 	stw	r16,4(sp)
8020d380:	2823883a 	mov	r17,r5
8020d384:	2c000417 	ldw	r16,16(r5)
8020d388:	dfc00515 	stw	ra,20(sp)
8020d38c:	dcc00415 	stw	r19,16(sp)
8020d390:	2025883a 	mov	r18,r4
8020d394:	29400504 	addi	r5,r5,20
8020d398:	0011883a 	mov	r8,zero
8020d39c:	28c00017 	ldw	r3,0(r5)
8020d3a0:	29400104 	addi	r5,r5,4
8020d3a4:	42000044 	addi	r8,r8,1
8020d3a8:	18bfffcc 	andi	r2,r3,65535
8020d3ac:	1185383a 	mul	r2,r2,r6
8020d3b0:	1806d43a 	srli	r3,r3,16
8020d3b4:	11cf883a 	add	r7,r2,r7
8020d3b8:	3808d43a 	srli	r4,r7,16
8020d3bc:	1987383a 	mul	r3,r3,r6
8020d3c0:	38bfffcc 	andi	r2,r7,65535
8020d3c4:	1907883a 	add	r3,r3,r4
8020d3c8:	1808943a 	slli	r4,r3,16
8020d3cc:	180ed43a 	srli	r7,r3,16
8020d3d0:	2085883a 	add	r2,r4,r2
8020d3d4:	28bfff15 	stw	r2,-4(r5)
8020d3d8:	443ff016 	blt	r8,r16,8020d39c <__reset+0xfa1ed39c>
8020d3dc:	38000926 	beq	r7,zero,8020d404 <__multadd+0x94>
8020d3e0:	88800217 	ldw	r2,8(r17)
8020d3e4:	80800f0e 	bge	r16,r2,8020d424 <__multadd+0xb4>
8020d3e8:	80800144 	addi	r2,r16,5
8020d3ec:	1085883a 	add	r2,r2,r2
8020d3f0:	1085883a 	add	r2,r2,r2
8020d3f4:	8885883a 	add	r2,r17,r2
8020d3f8:	11c00015 	stw	r7,0(r2)
8020d3fc:	84000044 	addi	r16,r16,1
8020d400:	8c000415 	stw	r16,16(r17)
8020d404:	8805883a 	mov	r2,r17
8020d408:	dfc00517 	ldw	ra,20(sp)
8020d40c:	dcc00417 	ldw	r19,16(sp)
8020d410:	dc800317 	ldw	r18,12(sp)
8020d414:	dc400217 	ldw	r17,8(sp)
8020d418:	dc000117 	ldw	r16,4(sp)
8020d41c:	dec00604 	addi	sp,sp,24
8020d420:	f800283a 	ret
8020d424:	89400117 	ldw	r5,4(r17)
8020d428:	9009883a 	mov	r4,r18
8020d42c:	d9c00015 	stw	r7,0(sp)
8020d430:	29400044 	addi	r5,r5,1
8020d434:	020d2a00 	call	8020d2a0 <_Balloc>
8020d438:	89800417 	ldw	r6,16(r17)
8020d43c:	89400304 	addi	r5,r17,12
8020d440:	11000304 	addi	r4,r2,12
8020d444:	31800084 	addi	r6,r6,2
8020d448:	318d883a 	add	r6,r6,r6
8020d44c:	318d883a 	add	r6,r6,r6
8020d450:	1027883a 	mov	r19,r2
8020d454:	020516c0 	call	8020516c <memcpy>
8020d458:	d9c00017 	ldw	r7,0(sp)
8020d45c:	88000a26 	beq	r17,zero,8020d488 <__multadd+0x118>
8020d460:	88c00117 	ldw	r3,4(r17)
8020d464:	90801317 	ldw	r2,76(r18)
8020d468:	18c7883a 	add	r3,r3,r3
8020d46c:	18c7883a 	add	r3,r3,r3
8020d470:	10c5883a 	add	r2,r2,r3
8020d474:	10c00017 	ldw	r3,0(r2)
8020d478:	88c00015 	stw	r3,0(r17)
8020d47c:	14400015 	stw	r17,0(r2)
8020d480:	9823883a 	mov	r17,r19
8020d484:	003fd806 	br	8020d3e8 <__reset+0xfa1ed3e8>
8020d488:	9823883a 	mov	r17,r19
8020d48c:	003fd606 	br	8020d3e8 <__reset+0xfa1ed3e8>

8020d490 <__s2b>:
8020d490:	defff904 	addi	sp,sp,-28
8020d494:	dc400115 	stw	r17,4(sp)
8020d498:	dc000015 	stw	r16,0(sp)
8020d49c:	2023883a 	mov	r17,r4
8020d4a0:	2821883a 	mov	r16,r5
8020d4a4:	39000204 	addi	r4,r7,8
8020d4a8:	01400244 	movi	r5,9
8020d4ac:	dcc00315 	stw	r19,12(sp)
8020d4b0:	dc800215 	stw	r18,8(sp)
8020d4b4:	dfc00615 	stw	ra,24(sp)
8020d4b8:	dd400515 	stw	r21,20(sp)
8020d4bc:	dd000415 	stw	r20,16(sp)
8020d4c0:	3825883a 	mov	r18,r7
8020d4c4:	3027883a 	mov	r19,r6
8020d4c8:	02129180 	call	80212918 <__divsi3>
8020d4cc:	00c00044 	movi	r3,1
8020d4d0:	000b883a 	mov	r5,zero
8020d4d4:	1880030e 	bge	r3,r2,8020d4e4 <__s2b+0x54>
8020d4d8:	18c7883a 	add	r3,r3,r3
8020d4dc:	29400044 	addi	r5,r5,1
8020d4e0:	18bffd16 	blt	r3,r2,8020d4d8 <__reset+0xfa1ed4d8>
8020d4e4:	8809883a 	mov	r4,r17
8020d4e8:	020d2a00 	call	8020d2a0 <_Balloc>
8020d4ec:	d8c00717 	ldw	r3,28(sp)
8020d4f0:	10c00515 	stw	r3,20(r2)
8020d4f4:	00c00044 	movi	r3,1
8020d4f8:	10c00415 	stw	r3,16(r2)
8020d4fc:	00c00244 	movi	r3,9
8020d500:	1cc0210e 	bge	r3,r19,8020d588 <__s2b+0xf8>
8020d504:	80eb883a 	add	r21,r16,r3
8020d508:	a829883a 	mov	r20,r21
8020d50c:	84e1883a 	add	r16,r16,r19
8020d510:	a1c00007 	ldb	r7,0(r20)
8020d514:	01800284 	movi	r6,10
8020d518:	a5000044 	addi	r20,r20,1
8020d51c:	100b883a 	mov	r5,r2
8020d520:	39fff404 	addi	r7,r7,-48
8020d524:	8809883a 	mov	r4,r17
8020d528:	020d3700 	call	8020d370 <__multadd>
8020d52c:	a43ff81e 	bne	r20,r16,8020d510 <__reset+0xfa1ed510>
8020d530:	ace1883a 	add	r16,r21,r19
8020d534:	843ffe04 	addi	r16,r16,-8
8020d538:	9c800a0e 	bge	r19,r18,8020d564 <__s2b+0xd4>
8020d53c:	94e5c83a 	sub	r18,r18,r19
8020d540:	84a5883a 	add	r18,r16,r18
8020d544:	81c00007 	ldb	r7,0(r16)
8020d548:	01800284 	movi	r6,10
8020d54c:	84000044 	addi	r16,r16,1
8020d550:	100b883a 	mov	r5,r2
8020d554:	39fff404 	addi	r7,r7,-48
8020d558:	8809883a 	mov	r4,r17
8020d55c:	020d3700 	call	8020d370 <__multadd>
8020d560:	84bff81e 	bne	r16,r18,8020d544 <__reset+0xfa1ed544>
8020d564:	dfc00617 	ldw	ra,24(sp)
8020d568:	dd400517 	ldw	r21,20(sp)
8020d56c:	dd000417 	ldw	r20,16(sp)
8020d570:	dcc00317 	ldw	r19,12(sp)
8020d574:	dc800217 	ldw	r18,8(sp)
8020d578:	dc400117 	ldw	r17,4(sp)
8020d57c:	dc000017 	ldw	r16,0(sp)
8020d580:	dec00704 	addi	sp,sp,28
8020d584:	f800283a 	ret
8020d588:	84000284 	addi	r16,r16,10
8020d58c:	1827883a 	mov	r19,r3
8020d590:	003fe906 	br	8020d538 <__reset+0xfa1ed538>

8020d594 <__hi0bits>:
8020d594:	20bfffec 	andhi	r2,r4,65535
8020d598:	1000141e 	bne	r2,zero,8020d5ec <__hi0bits+0x58>
8020d59c:	2008943a 	slli	r4,r4,16
8020d5a0:	00800404 	movi	r2,16
8020d5a4:	20ffc02c 	andhi	r3,r4,65280
8020d5a8:	1800021e 	bne	r3,zero,8020d5b4 <__hi0bits+0x20>
8020d5ac:	2008923a 	slli	r4,r4,8
8020d5b0:	10800204 	addi	r2,r2,8
8020d5b4:	20fc002c 	andhi	r3,r4,61440
8020d5b8:	1800021e 	bne	r3,zero,8020d5c4 <__hi0bits+0x30>
8020d5bc:	2008913a 	slli	r4,r4,4
8020d5c0:	10800104 	addi	r2,r2,4
8020d5c4:	20f0002c 	andhi	r3,r4,49152
8020d5c8:	1800031e 	bne	r3,zero,8020d5d8 <__hi0bits+0x44>
8020d5cc:	2109883a 	add	r4,r4,r4
8020d5d0:	10800084 	addi	r2,r2,2
8020d5d4:	2109883a 	add	r4,r4,r4
8020d5d8:	20000316 	blt	r4,zero,8020d5e8 <__hi0bits+0x54>
8020d5dc:	2110002c 	andhi	r4,r4,16384
8020d5e0:	2000041e 	bne	r4,zero,8020d5f4 <__hi0bits+0x60>
8020d5e4:	00800804 	movi	r2,32
8020d5e8:	f800283a 	ret
8020d5ec:	0005883a 	mov	r2,zero
8020d5f0:	003fec06 	br	8020d5a4 <__reset+0xfa1ed5a4>
8020d5f4:	10800044 	addi	r2,r2,1
8020d5f8:	f800283a 	ret

8020d5fc <__lo0bits>:
8020d5fc:	20c00017 	ldw	r3,0(r4)
8020d600:	188001cc 	andi	r2,r3,7
8020d604:	10000826 	beq	r2,zero,8020d628 <__lo0bits+0x2c>
8020d608:	1880004c 	andi	r2,r3,1
8020d60c:	1000211e 	bne	r2,zero,8020d694 <__lo0bits+0x98>
8020d610:	1880008c 	andi	r2,r3,2
8020d614:	1000211e 	bne	r2,zero,8020d69c <__lo0bits+0xa0>
8020d618:	1806d0ba 	srli	r3,r3,2
8020d61c:	00800084 	movi	r2,2
8020d620:	20c00015 	stw	r3,0(r4)
8020d624:	f800283a 	ret
8020d628:	18bfffcc 	andi	r2,r3,65535
8020d62c:	10001326 	beq	r2,zero,8020d67c <__lo0bits+0x80>
8020d630:	0005883a 	mov	r2,zero
8020d634:	19403fcc 	andi	r5,r3,255
8020d638:	2800021e 	bne	r5,zero,8020d644 <__lo0bits+0x48>
8020d63c:	1806d23a 	srli	r3,r3,8
8020d640:	10800204 	addi	r2,r2,8
8020d644:	194003cc 	andi	r5,r3,15
8020d648:	2800021e 	bne	r5,zero,8020d654 <__lo0bits+0x58>
8020d64c:	1806d13a 	srli	r3,r3,4
8020d650:	10800104 	addi	r2,r2,4
8020d654:	194000cc 	andi	r5,r3,3
8020d658:	2800021e 	bne	r5,zero,8020d664 <__lo0bits+0x68>
8020d65c:	1806d0ba 	srli	r3,r3,2
8020d660:	10800084 	addi	r2,r2,2
8020d664:	1940004c 	andi	r5,r3,1
8020d668:	2800081e 	bne	r5,zero,8020d68c <__lo0bits+0x90>
8020d66c:	1806d07a 	srli	r3,r3,1
8020d670:	1800051e 	bne	r3,zero,8020d688 <__lo0bits+0x8c>
8020d674:	00800804 	movi	r2,32
8020d678:	f800283a 	ret
8020d67c:	1806d43a 	srli	r3,r3,16
8020d680:	00800404 	movi	r2,16
8020d684:	003feb06 	br	8020d634 <__reset+0xfa1ed634>
8020d688:	10800044 	addi	r2,r2,1
8020d68c:	20c00015 	stw	r3,0(r4)
8020d690:	f800283a 	ret
8020d694:	0005883a 	mov	r2,zero
8020d698:	f800283a 	ret
8020d69c:	1806d07a 	srli	r3,r3,1
8020d6a0:	00800044 	movi	r2,1
8020d6a4:	20c00015 	stw	r3,0(r4)
8020d6a8:	f800283a 	ret

8020d6ac <__i2b>:
8020d6ac:	defffd04 	addi	sp,sp,-12
8020d6b0:	dc000015 	stw	r16,0(sp)
8020d6b4:	04000044 	movi	r16,1
8020d6b8:	dc400115 	stw	r17,4(sp)
8020d6bc:	2823883a 	mov	r17,r5
8020d6c0:	800b883a 	mov	r5,r16
8020d6c4:	dfc00215 	stw	ra,8(sp)
8020d6c8:	020d2a00 	call	8020d2a0 <_Balloc>
8020d6cc:	14400515 	stw	r17,20(r2)
8020d6d0:	14000415 	stw	r16,16(r2)
8020d6d4:	dfc00217 	ldw	ra,8(sp)
8020d6d8:	dc400117 	ldw	r17,4(sp)
8020d6dc:	dc000017 	ldw	r16,0(sp)
8020d6e0:	dec00304 	addi	sp,sp,12
8020d6e4:	f800283a 	ret

8020d6e8 <__multiply>:
8020d6e8:	defffa04 	addi	sp,sp,-24
8020d6ec:	dcc00315 	stw	r19,12(sp)
8020d6f0:	dc800215 	stw	r18,8(sp)
8020d6f4:	34c00417 	ldw	r19,16(r6)
8020d6f8:	2c800417 	ldw	r18,16(r5)
8020d6fc:	dd000415 	stw	r20,16(sp)
8020d700:	dc400115 	stw	r17,4(sp)
8020d704:	dfc00515 	stw	ra,20(sp)
8020d708:	dc000015 	stw	r16,0(sp)
8020d70c:	2829883a 	mov	r20,r5
8020d710:	3023883a 	mov	r17,r6
8020d714:	94c0050e 	bge	r18,r19,8020d72c <__multiply+0x44>
8020d718:	9007883a 	mov	r3,r18
8020d71c:	3029883a 	mov	r20,r6
8020d720:	9825883a 	mov	r18,r19
8020d724:	2823883a 	mov	r17,r5
8020d728:	1827883a 	mov	r19,r3
8020d72c:	a0800217 	ldw	r2,8(r20)
8020d730:	94e1883a 	add	r16,r18,r19
8020d734:	a1400117 	ldw	r5,4(r20)
8020d738:	1400010e 	bge	r2,r16,8020d740 <__multiply+0x58>
8020d73c:	29400044 	addi	r5,r5,1
8020d740:	020d2a00 	call	8020d2a0 <_Balloc>
8020d744:	8415883a 	add	r10,r16,r16
8020d748:	12c00504 	addi	r11,r2,20
8020d74c:	5295883a 	add	r10,r10,r10
8020d750:	5a95883a 	add	r10,r11,r10
8020d754:	5807883a 	mov	r3,r11
8020d758:	5a80032e 	bgeu	r11,r10,8020d768 <__multiply+0x80>
8020d75c:	18000015 	stw	zero,0(r3)
8020d760:	18c00104 	addi	r3,r3,4
8020d764:	1abffd36 	bltu	r3,r10,8020d75c <__reset+0xfa1ed75c>
8020d768:	9ce7883a 	add	r19,r19,r19
8020d76c:	94a5883a 	add	r18,r18,r18
8020d770:	89800504 	addi	r6,r17,20
8020d774:	9ce7883a 	add	r19,r19,r19
8020d778:	a3400504 	addi	r13,r20,20
8020d77c:	94a5883a 	add	r18,r18,r18
8020d780:	34d9883a 	add	r12,r6,r19
8020d784:	6c93883a 	add	r9,r13,r18
8020d788:	3300422e 	bgeu	r6,r12,8020d894 <__multiply+0x1ac>
8020d78c:	37c00017 	ldw	ra,0(r6)
8020d790:	fbffffcc 	andi	r15,ra,65535
8020d794:	78001b26 	beq	r15,zero,8020d804 <__multiply+0x11c>
8020d798:	5811883a 	mov	r8,r11
8020d79c:	681d883a 	mov	r14,r13
8020d7a0:	000f883a 	mov	r7,zero
8020d7a4:	71000017 	ldw	r4,0(r14)
8020d7a8:	40c00017 	ldw	r3,0(r8)
8020d7ac:	73800104 	addi	r14,r14,4
8020d7b0:	217fffcc 	andi	r5,r4,65535
8020d7b4:	2bcb383a 	mul	r5,r5,r15
8020d7b8:	2008d43a 	srli	r4,r4,16
8020d7bc:	1c7fffcc 	andi	r17,r3,65535
8020d7c0:	2c4b883a 	add	r5,r5,r17
8020d7c4:	29cb883a 	add	r5,r5,r7
8020d7c8:	23c9383a 	mul	r4,r4,r15
8020d7cc:	1806d43a 	srli	r3,r3,16
8020d7d0:	280ed43a 	srli	r7,r5,16
8020d7d4:	297fffcc 	andi	r5,r5,65535
8020d7d8:	20c7883a 	add	r3,r4,r3
8020d7dc:	19c7883a 	add	r3,r3,r7
8020d7e0:	1808943a 	slli	r4,r3,16
8020d7e4:	4023883a 	mov	r17,r8
8020d7e8:	180ed43a 	srli	r7,r3,16
8020d7ec:	214ab03a 	or	r5,r4,r5
8020d7f0:	41400015 	stw	r5,0(r8)
8020d7f4:	42000104 	addi	r8,r8,4
8020d7f8:	727fea36 	bltu	r14,r9,8020d7a4 <__reset+0xfa1ed7a4>
8020d7fc:	89c00115 	stw	r7,4(r17)
8020d800:	37c00017 	ldw	ra,0(r6)
8020d804:	f83ed43a 	srli	ra,ra,16
8020d808:	f8001f26 	beq	ra,zero,8020d888 <__multiply+0x1a0>
8020d80c:	58c00017 	ldw	r3,0(r11)
8020d810:	681d883a 	mov	r14,r13
8020d814:	581f883a 	mov	r15,r11
8020d818:	1811883a 	mov	r8,r3
8020d81c:	5825883a 	mov	r18,r11
8020d820:	000f883a 	mov	r7,zero
8020d824:	00000106 	br	8020d82c <__multiply+0x144>
8020d828:	8825883a 	mov	r18,r17
8020d82c:	7140000b 	ldhu	r5,0(r14)
8020d830:	4010d43a 	srli	r8,r8,16
8020d834:	193fffcc 	andi	r4,r3,65535
8020d838:	2fcb383a 	mul	r5,r5,ra
8020d83c:	7bc00104 	addi	r15,r15,4
8020d840:	73800104 	addi	r14,r14,4
8020d844:	2a0b883a 	add	r5,r5,r8
8020d848:	29cb883a 	add	r5,r5,r7
8020d84c:	2806943a 	slli	r3,r5,16
8020d850:	94400104 	addi	r17,r18,4
8020d854:	280ad43a 	srli	r5,r5,16
8020d858:	1908b03a 	or	r4,r3,r4
8020d85c:	793fff15 	stw	r4,-4(r15)
8020d860:	70ffff17 	ldw	r3,-4(r14)
8020d864:	8a000017 	ldw	r8,0(r17)
8020d868:	1806d43a 	srli	r3,r3,16
8020d86c:	413fffcc 	andi	r4,r8,65535
8020d870:	1fc7383a 	mul	r3,r3,ra
8020d874:	1907883a 	add	r3,r3,r4
8020d878:	1947883a 	add	r3,r3,r5
8020d87c:	180ed43a 	srli	r7,r3,16
8020d880:	727fe936 	bltu	r14,r9,8020d828 <__reset+0xfa1ed828>
8020d884:	90c00115 	stw	r3,4(r18)
8020d888:	31800104 	addi	r6,r6,4
8020d88c:	5ac00104 	addi	r11,r11,4
8020d890:	333fbe36 	bltu	r6,r12,8020d78c <__reset+0xfa1ed78c>
8020d894:	0400090e 	bge	zero,r16,8020d8bc <__multiply+0x1d4>
8020d898:	50ffff17 	ldw	r3,-4(r10)
8020d89c:	52bfff04 	addi	r10,r10,-4
8020d8a0:	18000326 	beq	r3,zero,8020d8b0 <__multiply+0x1c8>
8020d8a4:	00000506 	br	8020d8bc <__multiply+0x1d4>
8020d8a8:	50c00017 	ldw	r3,0(r10)
8020d8ac:	1800031e 	bne	r3,zero,8020d8bc <__multiply+0x1d4>
8020d8b0:	843fffc4 	addi	r16,r16,-1
8020d8b4:	52bfff04 	addi	r10,r10,-4
8020d8b8:	803ffb1e 	bne	r16,zero,8020d8a8 <__reset+0xfa1ed8a8>
8020d8bc:	14000415 	stw	r16,16(r2)
8020d8c0:	dfc00517 	ldw	ra,20(sp)
8020d8c4:	dd000417 	ldw	r20,16(sp)
8020d8c8:	dcc00317 	ldw	r19,12(sp)
8020d8cc:	dc800217 	ldw	r18,8(sp)
8020d8d0:	dc400117 	ldw	r17,4(sp)
8020d8d4:	dc000017 	ldw	r16,0(sp)
8020d8d8:	dec00604 	addi	sp,sp,24
8020d8dc:	f800283a 	ret

8020d8e0 <__pow5mult>:
8020d8e0:	defffa04 	addi	sp,sp,-24
8020d8e4:	dcc00315 	stw	r19,12(sp)
8020d8e8:	dc000015 	stw	r16,0(sp)
8020d8ec:	dfc00515 	stw	ra,20(sp)
8020d8f0:	dd000415 	stw	r20,16(sp)
8020d8f4:	dc800215 	stw	r18,8(sp)
8020d8f8:	dc400115 	stw	r17,4(sp)
8020d8fc:	308000cc 	andi	r2,r6,3
8020d900:	3021883a 	mov	r16,r6
8020d904:	2027883a 	mov	r19,r4
8020d908:	10002f1e 	bne	r2,zero,8020d9c8 <__pow5mult+0xe8>
8020d90c:	2825883a 	mov	r18,r5
8020d910:	8021d0ba 	srai	r16,r16,2
8020d914:	80001a26 	beq	r16,zero,8020d980 <__pow5mult+0xa0>
8020d918:	9c401217 	ldw	r17,72(r19)
8020d91c:	8800061e 	bne	r17,zero,8020d938 <__pow5mult+0x58>
8020d920:	00003406 	br	8020d9f4 <__pow5mult+0x114>
8020d924:	8021d07a 	srai	r16,r16,1
8020d928:	80001526 	beq	r16,zero,8020d980 <__pow5mult+0xa0>
8020d92c:	88800017 	ldw	r2,0(r17)
8020d930:	10001c26 	beq	r2,zero,8020d9a4 <__pow5mult+0xc4>
8020d934:	1023883a 	mov	r17,r2
8020d938:	8080004c 	andi	r2,r16,1
8020d93c:	103ff926 	beq	r2,zero,8020d924 <__reset+0xfa1ed924>
8020d940:	880d883a 	mov	r6,r17
8020d944:	900b883a 	mov	r5,r18
8020d948:	9809883a 	mov	r4,r19
8020d94c:	020d6e80 	call	8020d6e8 <__multiply>
8020d950:	90001b26 	beq	r18,zero,8020d9c0 <__pow5mult+0xe0>
8020d954:	91000117 	ldw	r4,4(r18)
8020d958:	98c01317 	ldw	r3,76(r19)
8020d95c:	8021d07a 	srai	r16,r16,1
8020d960:	2109883a 	add	r4,r4,r4
8020d964:	2109883a 	add	r4,r4,r4
8020d968:	1907883a 	add	r3,r3,r4
8020d96c:	19000017 	ldw	r4,0(r3)
8020d970:	91000015 	stw	r4,0(r18)
8020d974:	1c800015 	stw	r18,0(r3)
8020d978:	1025883a 	mov	r18,r2
8020d97c:	803feb1e 	bne	r16,zero,8020d92c <__reset+0xfa1ed92c>
8020d980:	9005883a 	mov	r2,r18
8020d984:	dfc00517 	ldw	ra,20(sp)
8020d988:	dd000417 	ldw	r20,16(sp)
8020d98c:	dcc00317 	ldw	r19,12(sp)
8020d990:	dc800217 	ldw	r18,8(sp)
8020d994:	dc400117 	ldw	r17,4(sp)
8020d998:	dc000017 	ldw	r16,0(sp)
8020d99c:	dec00604 	addi	sp,sp,24
8020d9a0:	f800283a 	ret
8020d9a4:	880d883a 	mov	r6,r17
8020d9a8:	880b883a 	mov	r5,r17
8020d9ac:	9809883a 	mov	r4,r19
8020d9b0:	020d6e80 	call	8020d6e8 <__multiply>
8020d9b4:	88800015 	stw	r2,0(r17)
8020d9b8:	10000015 	stw	zero,0(r2)
8020d9bc:	003fdd06 	br	8020d934 <__reset+0xfa1ed934>
8020d9c0:	1025883a 	mov	r18,r2
8020d9c4:	003fd706 	br	8020d924 <__reset+0xfa1ed924>
8020d9c8:	10bfffc4 	addi	r2,r2,-1
8020d9cc:	1085883a 	add	r2,r2,r2
8020d9d0:	00e008b4 	movhi	r3,32802
8020d9d4:	18ecdf04 	addi	r3,r3,-19588
8020d9d8:	1085883a 	add	r2,r2,r2
8020d9dc:	1885883a 	add	r2,r3,r2
8020d9e0:	11800017 	ldw	r6,0(r2)
8020d9e4:	000f883a 	mov	r7,zero
8020d9e8:	020d3700 	call	8020d370 <__multadd>
8020d9ec:	1025883a 	mov	r18,r2
8020d9f0:	003fc706 	br	8020d910 <__reset+0xfa1ed910>
8020d9f4:	05000044 	movi	r20,1
8020d9f8:	a00b883a 	mov	r5,r20
8020d9fc:	9809883a 	mov	r4,r19
8020da00:	020d2a00 	call	8020d2a0 <_Balloc>
8020da04:	1023883a 	mov	r17,r2
8020da08:	00809c44 	movi	r2,625
8020da0c:	88800515 	stw	r2,20(r17)
8020da10:	8d000415 	stw	r20,16(r17)
8020da14:	9c401215 	stw	r17,72(r19)
8020da18:	88000015 	stw	zero,0(r17)
8020da1c:	003fc606 	br	8020d938 <__reset+0xfa1ed938>

8020da20 <__lshift>:
8020da20:	defff904 	addi	sp,sp,-28
8020da24:	dd400515 	stw	r21,20(sp)
8020da28:	dcc00315 	stw	r19,12(sp)
8020da2c:	302bd17a 	srai	r21,r6,5
8020da30:	2cc00417 	ldw	r19,16(r5)
8020da34:	28800217 	ldw	r2,8(r5)
8020da38:	dd000415 	stw	r20,16(sp)
8020da3c:	ace7883a 	add	r19,r21,r19
8020da40:	dc800215 	stw	r18,8(sp)
8020da44:	dc400115 	stw	r17,4(sp)
8020da48:	dc000015 	stw	r16,0(sp)
8020da4c:	dfc00615 	stw	ra,24(sp)
8020da50:	9c000044 	addi	r16,r19,1
8020da54:	2823883a 	mov	r17,r5
8020da58:	3029883a 	mov	r20,r6
8020da5c:	2025883a 	mov	r18,r4
8020da60:	29400117 	ldw	r5,4(r5)
8020da64:	1400030e 	bge	r2,r16,8020da74 <__lshift+0x54>
8020da68:	1085883a 	add	r2,r2,r2
8020da6c:	29400044 	addi	r5,r5,1
8020da70:	143ffd16 	blt	r2,r16,8020da68 <__reset+0xfa1eda68>
8020da74:	9009883a 	mov	r4,r18
8020da78:	020d2a00 	call	8020d2a0 <_Balloc>
8020da7c:	10c00504 	addi	r3,r2,20
8020da80:	0540070e 	bge	zero,r21,8020daa0 <__lshift+0x80>
8020da84:	ad6b883a 	add	r21,r21,r21
8020da88:	ad6b883a 	add	r21,r21,r21
8020da8c:	1809883a 	mov	r4,r3
8020da90:	1d47883a 	add	r3,r3,r21
8020da94:	20000015 	stw	zero,0(r4)
8020da98:	21000104 	addi	r4,r4,4
8020da9c:	193ffd1e 	bne	r3,r4,8020da94 <__reset+0xfa1eda94>
8020daa0:	8a000417 	ldw	r8,16(r17)
8020daa4:	89000504 	addi	r4,r17,20
8020daa8:	a18007cc 	andi	r6,r20,31
8020daac:	4211883a 	add	r8,r8,r8
8020dab0:	4211883a 	add	r8,r8,r8
8020dab4:	2211883a 	add	r8,r4,r8
8020dab8:	30002326 	beq	r6,zero,8020db48 <__lshift+0x128>
8020dabc:	02400804 	movi	r9,32
8020dac0:	4993c83a 	sub	r9,r9,r6
8020dac4:	000b883a 	mov	r5,zero
8020dac8:	21c00017 	ldw	r7,0(r4)
8020dacc:	1815883a 	mov	r10,r3
8020dad0:	18c00104 	addi	r3,r3,4
8020dad4:	398e983a 	sll	r7,r7,r6
8020dad8:	21000104 	addi	r4,r4,4
8020dadc:	394ab03a 	or	r5,r7,r5
8020dae0:	197fff15 	stw	r5,-4(r3)
8020dae4:	217fff17 	ldw	r5,-4(r4)
8020dae8:	2a4ad83a 	srl	r5,r5,r9
8020daec:	223ff636 	bltu	r4,r8,8020dac8 <__reset+0xfa1edac8>
8020daf0:	51400115 	stw	r5,4(r10)
8020daf4:	28001a1e 	bne	r5,zero,8020db60 <__lshift+0x140>
8020daf8:	843fffc4 	addi	r16,r16,-1
8020dafc:	14000415 	stw	r16,16(r2)
8020db00:	88000826 	beq	r17,zero,8020db24 <__lshift+0x104>
8020db04:	89000117 	ldw	r4,4(r17)
8020db08:	90c01317 	ldw	r3,76(r18)
8020db0c:	2109883a 	add	r4,r4,r4
8020db10:	2109883a 	add	r4,r4,r4
8020db14:	1907883a 	add	r3,r3,r4
8020db18:	19000017 	ldw	r4,0(r3)
8020db1c:	89000015 	stw	r4,0(r17)
8020db20:	1c400015 	stw	r17,0(r3)
8020db24:	dfc00617 	ldw	ra,24(sp)
8020db28:	dd400517 	ldw	r21,20(sp)
8020db2c:	dd000417 	ldw	r20,16(sp)
8020db30:	dcc00317 	ldw	r19,12(sp)
8020db34:	dc800217 	ldw	r18,8(sp)
8020db38:	dc400117 	ldw	r17,4(sp)
8020db3c:	dc000017 	ldw	r16,0(sp)
8020db40:	dec00704 	addi	sp,sp,28
8020db44:	f800283a 	ret
8020db48:	21400017 	ldw	r5,0(r4)
8020db4c:	18c00104 	addi	r3,r3,4
8020db50:	21000104 	addi	r4,r4,4
8020db54:	197fff15 	stw	r5,-4(r3)
8020db58:	223ffb36 	bltu	r4,r8,8020db48 <__reset+0xfa1edb48>
8020db5c:	003fe606 	br	8020daf8 <__reset+0xfa1edaf8>
8020db60:	9c000084 	addi	r16,r19,2
8020db64:	003fe406 	br	8020daf8 <__reset+0xfa1edaf8>

8020db68 <__mcmp>:
8020db68:	20800417 	ldw	r2,16(r4)
8020db6c:	28c00417 	ldw	r3,16(r5)
8020db70:	10c5c83a 	sub	r2,r2,r3
8020db74:	1000111e 	bne	r2,zero,8020dbbc <__mcmp+0x54>
8020db78:	18c7883a 	add	r3,r3,r3
8020db7c:	18c7883a 	add	r3,r3,r3
8020db80:	21000504 	addi	r4,r4,20
8020db84:	29400504 	addi	r5,r5,20
8020db88:	20c5883a 	add	r2,r4,r3
8020db8c:	28cb883a 	add	r5,r5,r3
8020db90:	00000106 	br	8020db98 <__mcmp+0x30>
8020db94:	20800a2e 	bgeu	r4,r2,8020dbc0 <__mcmp+0x58>
8020db98:	10bfff04 	addi	r2,r2,-4
8020db9c:	297fff04 	addi	r5,r5,-4
8020dba0:	11800017 	ldw	r6,0(r2)
8020dba4:	28c00017 	ldw	r3,0(r5)
8020dba8:	30fffa26 	beq	r6,r3,8020db94 <__reset+0xfa1edb94>
8020dbac:	30c00236 	bltu	r6,r3,8020dbb8 <__mcmp+0x50>
8020dbb0:	00800044 	movi	r2,1
8020dbb4:	f800283a 	ret
8020dbb8:	00bfffc4 	movi	r2,-1
8020dbbc:	f800283a 	ret
8020dbc0:	0005883a 	mov	r2,zero
8020dbc4:	f800283a 	ret

8020dbc8 <__mdiff>:
8020dbc8:	28c00417 	ldw	r3,16(r5)
8020dbcc:	30800417 	ldw	r2,16(r6)
8020dbd0:	defffa04 	addi	sp,sp,-24
8020dbd4:	dcc00315 	stw	r19,12(sp)
8020dbd8:	dc800215 	stw	r18,8(sp)
8020dbdc:	dfc00515 	stw	ra,20(sp)
8020dbe0:	dd000415 	stw	r20,16(sp)
8020dbe4:	dc400115 	stw	r17,4(sp)
8020dbe8:	dc000015 	stw	r16,0(sp)
8020dbec:	1887c83a 	sub	r3,r3,r2
8020dbf0:	2825883a 	mov	r18,r5
8020dbf4:	3027883a 	mov	r19,r6
8020dbf8:	1800141e 	bne	r3,zero,8020dc4c <__mdiff+0x84>
8020dbfc:	1085883a 	add	r2,r2,r2
8020dc00:	1085883a 	add	r2,r2,r2
8020dc04:	2a000504 	addi	r8,r5,20
8020dc08:	34000504 	addi	r16,r6,20
8020dc0c:	4087883a 	add	r3,r8,r2
8020dc10:	8085883a 	add	r2,r16,r2
8020dc14:	00000106 	br	8020dc1c <__mdiff+0x54>
8020dc18:	40c0592e 	bgeu	r8,r3,8020dd80 <__mdiff+0x1b8>
8020dc1c:	18ffff04 	addi	r3,r3,-4
8020dc20:	10bfff04 	addi	r2,r2,-4
8020dc24:	19c00017 	ldw	r7,0(r3)
8020dc28:	11400017 	ldw	r5,0(r2)
8020dc2c:	397ffa26 	beq	r7,r5,8020dc18 <__reset+0xfa1edc18>
8020dc30:	3940592e 	bgeu	r7,r5,8020dd98 <__mdiff+0x1d0>
8020dc34:	9005883a 	mov	r2,r18
8020dc38:	4023883a 	mov	r17,r8
8020dc3c:	9825883a 	mov	r18,r19
8020dc40:	05000044 	movi	r20,1
8020dc44:	1027883a 	mov	r19,r2
8020dc48:	00000406 	br	8020dc5c <__mdiff+0x94>
8020dc4c:	18005616 	blt	r3,zero,8020dda8 <__mdiff+0x1e0>
8020dc50:	34400504 	addi	r17,r6,20
8020dc54:	2c000504 	addi	r16,r5,20
8020dc58:	0029883a 	mov	r20,zero
8020dc5c:	91400117 	ldw	r5,4(r18)
8020dc60:	020d2a00 	call	8020d2a0 <_Balloc>
8020dc64:	92400417 	ldw	r9,16(r18)
8020dc68:	9b000417 	ldw	r12,16(r19)
8020dc6c:	12c00504 	addi	r11,r2,20
8020dc70:	4a51883a 	add	r8,r9,r9
8020dc74:	6319883a 	add	r12,r12,r12
8020dc78:	4211883a 	add	r8,r8,r8
8020dc7c:	6319883a 	add	r12,r12,r12
8020dc80:	15000315 	stw	r20,12(r2)
8020dc84:	8211883a 	add	r8,r16,r8
8020dc88:	8b19883a 	add	r12,r17,r12
8020dc8c:	0007883a 	mov	r3,zero
8020dc90:	81400017 	ldw	r5,0(r16)
8020dc94:	89c00017 	ldw	r7,0(r17)
8020dc98:	59800104 	addi	r6,r11,4
8020dc9c:	293fffcc 	andi	r4,r5,65535
8020dca0:	20c7883a 	add	r3,r4,r3
8020dca4:	393fffcc 	andi	r4,r7,65535
8020dca8:	1909c83a 	sub	r4,r3,r4
8020dcac:	280ad43a 	srli	r5,r5,16
8020dcb0:	380ed43a 	srli	r7,r7,16
8020dcb4:	2007d43a 	srai	r3,r4,16
8020dcb8:	213fffcc 	andi	r4,r4,65535
8020dcbc:	29cbc83a 	sub	r5,r5,r7
8020dcc0:	28c7883a 	add	r3,r5,r3
8020dcc4:	180a943a 	slli	r5,r3,16
8020dcc8:	8c400104 	addi	r17,r17,4
8020dccc:	84000104 	addi	r16,r16,4
8020dcd0:	2908b03a 	or	r4,r5,r4
8020dcd4:	59000015 	stw	r4,0(r11)
8020dcd8:	1807d43a 	srai	r3,r3,16
8020dcdc:	3015883a 	mov	r10,r6
8020dce0:	3017883a 	mov	r11,r6
8020dce4:	8b3fea36 	bltu	r17,r12,8020dc90 <__reset+0xfa1edc90>
8020dce8:	8200162e 	bgeu	r16,r8,8020dd44 <__mdiff+0x17c>
8020dcec:	8017883a 	mov	r11,r16
8020dcf0:	59400017 	ldw	r5,0(r11)
8020dcf4:	31800104 	addi	r6,r6,4
8020dcf8:	5ac00104 	addi	r11,r11,4
8020dcfc:	293fffcc 	andi	r4,r5,65535
8020dd00:	20c7883a 	add	r3,r4,r3
8020dd04:	280ed43a 	srli	r7,r5,16
8020dd08:	180bd43a 	srai	r5,r3,16
8020dd0c:	193fffcc 	andi	r4,r3,65535
8020dd10:	3947883a 	add	r3,r7,r5
8020dd14:	180a943a 	slli	r5,r3,16
8020dd18:	1807d43a 	srai	r3,r3,16
8020dd1c:	2908b03a 	or	r4,r5,r4
8020dd20:	313fff15 	stw	r4,-4(r6)
8020dd24:	5a3ff236 	bltu	r11,r8,8020dcf0 <__reset+0xfa1edcf0>
8020dd28:	0406303a 	nor	r3,zero,r16
8020dd2c:	1a07883a 	add	r3,r3,r8
8020dd30:	1806d0ba 	srli	r3,r3,2
8020dd34:	18c00044 	addi	r3,r3,1
8020dd38:	18c7883a 	add	r3,r3,r3
8020dd3c:	18c7883a 	add	r3,r3,r3
8020dd40:	50d5883a 	add	r10,r10,r3
8020dd44:	50ffff04 	addi	r3,r10,-4
8020dd48:	2000041e 	bne	r4,zero,8020dd5c <__mdiff+0x194>
8020dd4c:	18ffff04 	addi	r3,r3,-4
8020dd50:	19000017 	ldw	r4,0(r3)
8020dd54:	4a7fffc4 	addi	r9,r9,-1
8020dd58:	203ffc26 	beq	r4,zero,8020dd4c <__reset+0xfa1edd4c>
8020dd5c:	12400415 	stw	r9,16(r2)
8020dd60:	dfc00517 	ldw	ra,20(sp)
8020dd64:	dd000417 	ldw	r20,16(sp)
8020dd68:	dcc00317 	ldw	r19,12(sp)
8020dd6c:	dc800217 	ldw	r18,8(sp)
8020dd70:	dc400117 	ldw	r17,4(sp)
8020dd74:	dc000017 	ldw	r16,0(sp)
8020dd78:	dec00604 	addi	sp,sp,24
8020dd7c:	f800283a 	ret
8020dd80:	000b883a 	mov	r5,zero
8020dd84:	020d2a00 	call	8020d2a0 <_Balloc>
8020dd88:	00c00044 	movi	r3,1
8020dd8c:	10c00415 	stw	r3,16(r2)
8020dd90:	10000515 	stw	zero,20(r2)
8020dd94:	003ff206 	br	8020dd60 <__reset+0xfa1edd60>
8020dd98:	8023883a 	mov	r17,r16
8020dd9c:	0029883a 	mov	r20,zero
8020dda0:	4021883a 	mov	r16,r8
8020dda4:	003fad06 	br	8020dc5c <__reset+0xfa1edc5c>
8020dda8:	9005883a 	mov	r2,r18
8020ddac:	94400504 	addi	r17,r18,20
8020ddb0:	9c000504 	addi	r16,r19,20
8020ddb4:	9825883a 	mov	r18,r19
8020ddb8:	05000044 	movi	r20,1
8020ddbc:	1027883a 	mov	r19,r2
8020ddc0:	003fa606 	br	8020dc5c <__reset+0xfa1edc5c>

8020ddc4 <__ulp>:
8020ddc4:	295ffc2c 	andhi	r5,r5,32752
8020ddc8:	00bf3034 	movhi	r2,64704
8020ddcc:	2887883a 	add	r3,r5,r2
8020ddd0:	00c0020e 	bge	zero,r3,8020dddc <__ulp+0x18>
8020ddd4:	0005883a 	mov	r2,zero
8020ddd8:	f800283a 	ret
8020dddc:	00c7c83a 	sub	r3,zero,r3
8020dde0:	1807d53a 	srai	r3,r3,20
8020dde4:	008004c4 	movi	r2,19
8020dde8:	10c00b0e 	bge	r2,r3,8020de18 <__ulp+0x54>
8020ddec:	18bffb04 	addi	r2,r3,-20
8020ddf0:	01000784 	movi	r4,30
8020ddf4:	0007883a 	mov	r3,zero
8020ddf8:	20800516 	blt	r4,r2,8020de10 <__ulp+0x4c>
8020ddfc:	010007c4 	movi	r4,31
8020de00:	2089c83a 	sub	r4,r4,r2
8020de04:	00800044 	movi	r2,1
8020de08:	1104983a 	sll	r2,r2,r4
8020de0c:	f800283a 	ret
8020de10:	00800044 	movi	r2,1
8020de14:	f800283a 	ret
8020de18:	01400234 	movhi	r5,8
8020de1c:	28c7d83a 	sra	r3,r5,r3
8020de20:	0005883a 	mov	r2,zero
8020de24:	f800283a 	ret

8020de28 <__b2d>:
8020de28:	defffa04 	addi	sp,sp,-24
8020de2c:	dc000015 	stw	r16,0(sp)
8020de30:	24000417 	ldw	r16,16(r4)
8020de34:	dc400115 	stw	r17,4(sp)
8020de38:	24400504 	addi	r17,r4,20
8020de3c:	8421883a 	add	r16,r16,r16
8020de40:	8421883a 	add	r16,r16,r16
8020de44:	8c21883a 	add	r16,r17,r16
8020de48:	dc800215 	stw	r18,8(sp)
8020de4c:	84bfff17 	ldw	r18,-4(r16)
8020de50:	dd000415 	stw	r20,16(sp)
8020de54:	dcc00315 	stw	r19,12(sp)
8020de58:	9009883a 	mov	r4,r18
8020de5c:	2829883a 	mov	r20,r5
8020de60:	dfc00515 	stw	ra,20(sp)
8020de64:	020d5940 	call	8020d594 <__hi0bits>
8020de68:	00c00804 	movi	r3,32
8020de6c:	1889c83a 	sub	r4,r3,r2
8020de70:	a1000015 	stw	r4,0(r20)
8020de74:	01000284 	movi	r4,10
8020de78:	84ffff04 	addi	r19,r16,-4
8020de7c:	20801216 	blt	r4,r2,8020dec8 <__b2d+0xa0>
8020de80:	018002c4 	movi	r6,11
8020de84:	308dc83a 	sub	r6,r6,r2
8020de88:	9186d83a 	srl	r3,r18,r6
8020de8c:	18cffc34 	orhi	r3,r3,16368
8020de90:	8cc0212e 	bgeu	r17,r19,8020df18 <__b2d+0xf0>
8020de94:	813ffe17 	ldw	r4,-8(r16)
8020de98:	218cd83a 	srl	r6,r4,r6
8020de9c:	10800544 	addi	r2,r2,21
8020dea0:	9084983a 	sll	r2,r18,r2
8020dea4:	1184b03a 	or	r2,r2,r6
8020dea8:	dfc00517 	ldw	ra,20(sp)
8020deac:	dd000417 	ldw	r20,16(sp)
8020deb0:	dcc00317 	ldw	r19,12(sp)
8020deb4:	dc800217 	ldw	r18,8(sp)
8020deb8:	dc400117 	ldw	r17,4(sp)
8020debc:	dc000017 	ldw	r16,0(sp)
8020dec0:	dec00604 	addi	sp,sp,24
8020dec4:	f800283a 	ret
8020dec8:	8cc00f2e 	bgeu	r17,r19,8020df08 <__b2d+0xe0>
8020decc:	117ffd44 	addi	r5,r2,-11
8020ded0:	80bffe17 	ldw	r2,-8(r16)
8020ded4:	28000e26 	beq	r5,zero,8020df10 <__b2d+0xe8>
8020ded8:	1949c83a 	sub	r4,r3,r5
8020dedc:	9164983a 	sll	r18,r18,r5
8020dee0:	1106d83a 	srl	r3,r2,r4
8020dee4:	81bffe04 	addi	r6,r16,-8
8020dee8:	948ffc34 	orhi	r18,r18,16368
8020deec:	90c6b03a 	or	r3,r18,r3
8020def0:	89800e2e 	bgeu	r17,r6,8020df2c <__b2d+0x104>
8020def4:	81bffd17 	ldw	r6,-12(r16)
8020def8:	1144983a 	sll	r2,r2,r5
8020defc:	310ad83a 	srl	r5,r6,r4
8020df00:	2884b03a 	or	r2,r5,r2
8020df04:	003fe806 	br	8020dea8 <__reset+0xfa1edea8>
8020df08:	10bffd44 	addi	r2,r2,-11
8020df0c:	1000041e 	bne	r2,zero,8020df20 <__b2d+0xf8>
8020df10:	90cffc34 	orhi	r3,r18,16368
8020df14:	003fe406 	br	8020dea8 <__reset+0xfa1edea8>
8020df18:	000d883a 	mov	r6,zero
8020df1c:	003fdf06 	br	8020de9c <__reset+0xfa1ede9c>
8020df20:	90a4983a 	sll	r18,r18,r2
8020df24:	0005883a 	mov	r2,zero
8020df28:	003ff906 	br	8020df10 <__reset+0xfa1edf10>
8020df2c:	1144983a 	sll	r2,r2,r5
8020df30:	003fdd06 	br	8020dea8 <__reset+0xfa1edea8>

8020df34 <__d2b>:
8020df34:	defff804 	addi	sp,sp,-32
8020df38:	dc000215 	stw	r16,8(sp)
8020df3c:	3021883a 	mov	r16,r6
8020df40:	dc400315 	stw	r17,12(sp)
8020df44:	8022907a 	slli	r17,r16,1
8020df48:	dd000615 	stw	r20,24(sp)
8020df4c:	2829883a 	mov	r20,r5
8020df50:	01400044 	movi	r5,1
8020df54:	dcc00515 	stw	r19,20(sp)
8020df58:	dc800415 	stw	r18,16(sp)
8020df5c:	dfc00715 	stw	ra,28(sp)
8020df60:	3825883a 	mov	r18,r7
8020df64:	8822d57a 	srli	r17,r17,21
8020df68:	020d2a00 	call	8020d2a0 <_Balloc>
8020df6c:	1027883a 	mov	r19,r2
8020df70:	00800434 	movhi	r2,16
8020df74:	10bfffc4 	addi	r2,r2,-1
8020df78:	808c703a 	and	r6,r16,r2
8020df7c:	88000126 	beq	r17,zero,8020df84 <__d2b+0x50>
8020df80:	31800434 	orhi	r6,r6,16
8020df84:	d9800015 	stw	r6,0(sp)
8020df88:	a0002426 	beq	r20,zero,8020e01c <__d2b+0xe8>
8020df8c:	d9000104 	addi	r4,sp,4
8020df90:	dd000115 	stw	r20,4(sp)
8020df94:	020d5fc0 	call	8020d5fc <__lo0bits>
8020df98:	d8c00017 	ldw	r3,0(sp)
8020df9c:	10002f1e 	bne	r2,zero,8020e05c <__d2b+0x128>
8020dfa0:	d9000117 	ldw	r4,4(sp)
8020dfa4:	99000515 	stw	r4,20(r19)
8020dfa8:	1821003a 	cmpeq	r16,r3,zero
8020dfac:	01000084 	movi	r4,2
8020dfb0:	2421c83a 	sub	r16,r4,r16
8020dfb4:	98c00615 	stw	r3,24(r19)
8020dfb8:	9c000415 	stw	r16,16(r19)
8020dfbc:	88001f1e 	bne	r17,zero,8020e03c <__d2b+0x108>
8020dfc0:	10bef384 	addi	r2,r2,-1074
8020dfc4:	90800015 	stw	r2,0(r18)
8020dfc8:	00900034 	movhi	r2,16384
8020dfcc:	10bfffc4 	addi	r2,r2,-1
8020dfd0:	8085883a 	add	r2,r16,r2
8020dfd4:	1085883a 	add	r2,r2,r2
8020dfd8:	1085883a 	add	r2,r2,r2
8020dfdc:	9885883a 	add	r2,r19,r2
8020dfe0:	11000517 	ldw	r4,20(r2)
8020dfe4:	8020917a 	slli	r16,r16,5
8020dfe8:	020d5940 	call	8020d594 <__hi0bits>
8020dfec:	d8c00817 	ldw	r3,32(sp)
8020dff0:	8085c83a 	sub	r2,r16,r2
8020dff4:	18800015 	stw	r2,0(r3)
8020dff8:	9805883a 	mov	r2,r19
8020dffc:	dfc00717 	ldw	ra,28(sp)
8020e000:	dd000617 	ldw	r20,24(sp)
8020e004:	dcc00517 	ldw	r19,20(sp)
8020e008:	dc800417 	ldw	r18,16(sp)
8020e00c:	dc400317 	ldw	r17,12(sp)
8020e010:	dc000217 	ldw	r16,8(sp)
8020e014:	dec00804 	addi	sp,sp,32
8020e018:	f800283a 	ret
8020e01c:	d809883a 	mov	r4,sp
8020e020:	020d5fc0 	call	8020d5fc <__lo0bits>
8020e024:	d8c00017 	ldw	r3,0(sp)
8020e028:	04000044 	movi	r16,1
8020e02c:	9c000415 	stw	r16,16(r19)
8020e030:	98c00515 	stw	r3,20(r19)
8020e034:	10800804 	addi	r2,r2,32
8020e038:	883fe126 	beq	r17,zero,8020dfc0 <__reset+0xfa1edfc0>
8020e03c:	00c00d44 	movi	r3,53
8020e040:	8c7ef344 	addi	r17,r17,-1075
8020e044:	88a3883a 	add	r17,r17,r2
8020e048:	1885c83a 	sub	r2,r3,r2
8020e04c:	d8c00817 	ldw	r3,32(sp)
8020e050:	94400015 	stw	r17,0(r18)
8020e054:	18800015 	stw	r2,0(r3)
8020e058:	003fe706 	br	8020dff8 <__reset+0xfa1edff8>
8020e05c:	01000804 	movi	r4,32
8020e060:	2089c83a 	sub	r4,r4,r2
8020e064:	1908983a 	sll	r4,r3,r4
8020e068:	d9400117 	ldw	r5,4(sp)
8020e06c:	1886d83a 	srl	r3,r3,r2
8020e070:	2148b03a 	or	r4,r4,r5
8020e074:	99000515 	stw	r4,20(r19)
8020e078:	d8c00015 	stw	r3,0(sp)
8020e07c:	003fca06 	br	8020dfa8 <__reset+0xfa1edfa8>

8020e080 <__ratio>:
8020e080:	defff904 	addi	sp,sp,-28
8020e084:	dc400315 	stw	r17,12(sp)
8020e088:	2823883a 	mov	r17,r5
8020e08c:	d9400104 	addi	r5,sp,4
8020e090:	dfc00615 	stw	ra,24(sp)
8020e094:	dcc00515 	stw	r19,20(sp)
8020e098:	dc800415 	stw	r18,16(sp)
8020e09c:	2027883a 	mov	r19,r4
8020e0a0:	dc000215 	stw	r16,8(sp)
8020e0a4:	020de280 	call	8020de28 <__b2d>
8020e0a8:	d80b883a 	mov	r5,sp
8020e0ac:	8809883a 	mov	r4,r17
8020e0b0:	1025883a 	mov	r18,r2
8020e0b4:	1821883a 	mov	r16,r3
8020e0b8:	020de280 	call	8020de28 <__b2d>
8020e0bc:	8a000417 	ldw	r8,16(r17)
8020e0c0:	99000417 	ldw	r4,16(r19)
8020e0c4:	d9400117 	ldw	r5,4(sp)
8020e0c8:	2209c83a 	sub	r4,r4,r8
8020e0cc:	2010917a 	slli	r8,r4,5
8020e0d0:	d9000017 	ldw	r4,0(sp)
8020e0d4:	2909c83a 	sub	r4,r5,r4
8020e0d8:	4109883a 	add	r4,r8,r4
8020e0dc:	01000e0e 	bge	zero,r4,8020e118 <__ratio+0x98>
8020e0e0:	2008953a 	slli	r4,r4,20
8020e0e4:	2421883a 	add	r16,r4,r16
8020e0e8:	100d883a 	mov	r6,r2
8020e0ec:	180f883a 	mov	r7,r3
8020e0f0:	9009883a 	mov	r4,r18
8020e0f4:	800b883a 	mov	r5,r16
8020e0f8:	02133780 	call	80213378 <__divdf3>
8020e0fc:	dfc00617 	ldw	ra,24(sp)
8020e100:	dcc00517 	ldw	r19,20(sp)
8020e104:	dc800417 	ldw	r18,16(sp)
8020e108:	dc400317 	ldw	r17,12(sp)
8020e10c:	dc000217 	ldw	r16,8(sp)
8020e110:	dec00704 	addi	sp,sp,28
8020e114:	f800283a 	ret
8020e118:	2008953a 	slli	r4,r4,20
8020e11c:	1907c83a 	sub	r3,r3,r4
8020e120:	003ff106 	br	8020e0e8 <__reset+0xfa1ee0e8>

8020e124 <_mprec_log10>:
8020e124:	defffe04 	addi	sp,sp,-8
8020e128:	dc000015 	stw	r16,0(sp)
8020e12c:	dfc00115 	stw	ra,4(sp)
8020e130:	008005c4 	movi	r2,23
8020e134:	2021883a 	mov	r16,r4
8020e138:	11000d0e 	bge	r2,r4,8020e170 <_mprec_log10+0x4c>
8020e13c:	0005883a 	mov	r2,zero
8020e140:	00cffc34 	movhi	r3,16368
8020e144:	843fffc4 	addi	r16,r16,-1
8020e148:	000d883a 	mov	r6,zero
8020e14c:	01d00934 	movhi	r7,16420
8020e150:	1009883a 	mov	r4,r2
8020e154:	180b883a 	mov	r5,r3
8020e158:	0213eb80 	call	80213eb8 <__muldf3>
8020e15c:	803ff91e 	bne	r16,zero,8020e144 <__reset+0xfa1ee144>
8020e160:	dfc00117 	ldw	ra,4(sp)
8020e164:	dc000017 	ldw	r16,0(sp)
8020e168:	dec00204 	addi	sp,sp,8
8020e16c:	f800283a 	ret
8020e170:	202090fa 	slli	r16,r4,3
8020e174:	00a008b4 	movhi	r2,32802
8020e178:	10acf604 	addi	r2,r2,-19496
8020e17c:	1421883a 	add	r16,r2,r16
8020e180:	80800017 	ldw	r2,0(r16)
8020e184:	80c00117 	ldw	r3,4(r16)
8020e188:	dfc00117 	ldw	ra,4(sp)
8020e18c:	dc000017 	ldw	r16,0(sp)
8020e190:	dec00204 	addi	sp,sp,8
8020e194:	f800283a 	ret

8020e198 <__copybits>:
8020e198:	297fffc4 	addi	r5,r5,-1
8020e19c:	280fd17a 	srai	r7,r5,5
8020e1a0:	30c00417 	ldw	r3,16(r6)
8020e1a4:	30800504 	addi	r2,r6,20
8020e1a8:	39c00044 	addi	r7,r7,1
8020e1ac:	18c7883a 	add	r3,r3,r3
8020e1b0:	39cf883a 	add	r7,r7,r7
8020e1b4:	18c7883a 	add	r3,r3,r3
8020e1b8:	39cf883a 	add	r7,r7,r7
8020e1bc:	10c7883a 	add	r3,r2,r3
8020e1c0:	21cf883a 	add	r7,r4,r7
8020e1c4:	10c00d2e 	bgeu	r2,r3,8020e1fc <__copybits+0x64>
8020e1c8:	200b883a 	mov	r5,r4
8020e1cc:	12000017 	ldw	r8,0(r2)
8020e1d0:	29400104 	addi	r5,r5,4
8020e1d4:	10800104 	addi	r2,r2,4
8020e1d8:	2a3fff15 	stw	r8,-4(r5)
8020e1dc:	10fffb36 	bltu	r2,r3,8020e1cc <__reset+0xfa1ee1cc>
8020e1e0:	1985c83a 	sub	r2,r3,r6
8020e1e4:	10bffac4 	addi	r2,r2,-21
8020e1e8:	1004d0ba 	srli	r2,r2,2
8020e1ec:	10800044 	addi	r2,r2,1
8020e1f0:	1085883a 	add	r2,r2,r2
8020e1f4:	1085883a 	add	r2,r2,r2
8020e1f8:	2089883a 	add	r4,r4,r2
8020e1fc:	21c0032e 	bgeu	r4,r7,8020e20c <__copybits+0x74>
8020e200:	20000015 	stw	zero,0(r4)
8020e204:	21000104 	addi	r4,r4,4
8020e208:	21fffd36 	bltu	r4,r7,8020e200 <__reset+0xfa1ee200>
8020e20c:	f800283a 	ret

8020e210 <__any_on>:
8020e210:	20c00417 	ldw	r3,16(r4)
8020e214:	2805d17a 	srai	r2,r5,5
8020e218:	21000504 	addi	r4,r4,20
8020e21c:	18800d0e 	bge	r3,r2,8020e254 <__any_on+0x44>
8020e220:	18c7883a 	add	r3,r3,r3
8020e224:	18c7883a 	add	r3,r3,r3
8020e228:	20c7883a 	add	r3,r4,r3
8020e22c:	20c0192e 	bgeu	r4,r3,8020e294 <__any_on+0x84>
8020e230:	18bfff17 	ldw	r2,-4(r3)
8020e234:	18ffff04 	addi	r3,r3,-4
8020e238:	1000041e 	bne	r2,zero,8020e24c <__any_on+0x3c>
8020e23c:	20c0142e 	bgeu	r4,r3,8020e290 <__any_on+0x80>
8020e240:	18ffff04 	addi	r3,r3,-4
8020e244:	19400017 	ldw	r5,0(r3)
8020e248:	283ffc26 	beq	r5,zero,8020e23c <__reset+0xfa1ee23c>
8020e24c:	00800044 	movi	r2,1
8020e250:	f800283a 	ret
8020e254:	10c00a0e 	bge	r2,r3,8020e280 <__any_on+0x70>
8020e258:	1085883a 	add	r2,r2,r2
8020e25c:	1085883a 	add	r2,r2,r2
8020e260:	294007cc 	andi	r5,r5,31
8020e264:	2087883a 	add	r3,r4,r2
8020e268:	283ff026 	beq	r5,zero,8020e22c <__reset+0xfa1ee22c>
8020e26c:	19800017 	ldw	r6,0(r3)
8020e270:	3144d83a 	srl	r2,r6,r5
8020e274:	114a983a 	sll	r5,r2,r5
8020e278:	317ff41e 	bne	r6,r5,8020e24c <__reset+0xfa1ee24c>
8020e27c:	003feb06 	br	8020e22c <__reset+0xfa1ee22c>
8020e280:	1085883a 	add	r2,r2,r2
8020e284:	1085883a 	add	r2,r2,r2
8020e288:	2087883a 	add	r3,r4,r2
8020e28c:	003fe706 	br	8020e22c <__reset+0xfa1ee22c>
8020e290:	f800283a 	ret
8020e294:	0005883a 	mov	r2,zero
8020e298:	f800283a 	ret

8020e29c <_realloc_r>:
8020e29c:	defff604 	addi	sp,sp,-40
8020e2a0:	dc800215 	stw	r18,8(sp)
8020e2a4:	dfc00915 	stw	ra,36(sp)
8020e2a8:	df000815 	stw	fp,32(sp)
8020e2ac:	ddc00715 	stw	r23,28(sp)
8020e2b0:	dd800615 	stw	r22,24(sp)
8020e2b4:	dd400515 	stw	r21,20(sp)
8020e2b8:	dd000415 	stw	r20,16(sp)
8020e2bc:	dcc00315 	stw	r19,12(sp)
8020e2c0:	dc400115 	stw	r17,4(sp)
8020e2c4:	dc000015 	stw	r16,0(sp)
8020e2c8:	3025883a 	mov	r18,r6
8020e2cc:	2800b726 	beq	r5,zero,8020e5ac <_realloc_r+0x310>
8020e2d0:	282b883a 	mov	r21,r5
8020e2d4:	2029883a 	mov	r20,r4
8020e2d8:	02156a80 	call	802156a8 <__malloc_lock>
8020e2dc:	a8bfff17 	ldw	r2,-4(r21)
8020e2e0:	043fff04 	movi	r16,-4
8020e2e4:	90c002c4 	addi	r3,r18,11
8020e2e8:	01000584 	movi	r4,22
8020e2ec:	acfffe04 	addi	r19,r21,-8
8020e2f0:	1420703a 	and	r16,r2,r16
8020e2f4:	20c0332e 	bgeu	r4,r3,8020e3c4 <_realloc_r+0x128>
8020e2f8:	047ffe04 	movi	r17,-8
8020e2fc:	1c62703a 	and	r17,r3,r17
8020e300:	8807883a 	mov	r3,r17
8020e304:	88005816 	blt	r17,zero,8020e468 <_realloc_r+0x1cc>
8020e308:	8c805736 	bltu	r17,r18,8020e468 <_realloc_r+0x1cc>
8020e30c:	80c0300e 	bge	r16,r3,8020e3d0 <_realloc_r+0x134>
8020e310:	072008b4 	movhi	fp,32802
8020e314:	e72f0704 	addi	fp,fp,-17380
8020e318:	e1c00217 	ldw	r7,8(fp)
8020e31c:	9c09883a 	add	r4,r19,r16
8020e320:	22000117 	ldw	r8,4(r4)
8020e324:	21c06326 	beq	r4,r7,8020e4b4 <_realloc_r+0x218>
8020e328:	017fff84 	movi	r5,-2
8020e32c:	414a703a 	and	r5,r8,r5
8020e330:	214b883a 	add	r5,r4,r5
8020e334:	29800117 	ldw	r6,4(r5)
8020e338:	3180004c 	andi	r6,r6,1
8020e33c:	30003f26 	beq	r6,zero,8020e43c <_realloc_r+0x1a0>
8020e340:	1080004c 	andi	r2,r2,1
8020e344:	10008326 	beq	r2,zero,8020e554 <_realloc_r+0x2b8>
8020e348:	900b883a 	mov	r5,r18
8020e34c:	a009883a 	mov	r4,r20
8020e350:	020c72c0 	call	8020c72c <_malloc_r>
8020e354:	1025883a 	mov	r18,r2
8020e358:	10011e26 	beq	r2,zero,8020e7d4 <_realloc_r+0x538>
8020e35c:	a93fff17 	ldw	r4,-4(r21)
8020e360:	10fffe04 	addi	r3,r2,-8
8020e364:	00bfff84 	movi	r2,-2
8020e368:	2084703a 	and	r2,r4,r2
8020e36c:	9885883a 	add	r2,r19,r2
8020e370:	1880ee26 	beq	r3,r2,8020e72c <_realloc_r+0x490>
8020e374:	81bfff04 	addi	r6,r16,-4
8020e378:	00800904 	movi	r2,36
8020e37c:	1180b836 	bltu	r2,r6,8020e660 <_realloc_r+0x3c4>
8020e380:	00c004c4 	movi	r3,19
8020e384:	19809636 	bltu	r3,r6,8020e5e0 <_realloc_r+0x344>
8020e388:	9005883a 	mov	r2,r18
8020e38c:	a807883a 	mov	r3,r21
8020e390:	19000017 	ldw	r4,0(r3)
8020e394:	11000015 	stw	r4,0(r2)
8020e398:	19000117 	ldw	r4,4(r3)
8020e39c:	11000115 	stw	r4,4(r2)
8020e3a0:	18c00217 	ldw	r3,8(r3)
8020e3a4:	10c00215 	stw	r3,8(r2)
8020e3a8:	a80b883a 	mov	r5,r21
8020e3ac:	a009883a 	mov	r4,r20
8020e3b0:	020bb400 	call	8020bb40 <_free_r>
8020e3b4:	a009883a 	mov	r4,r20
8020e3b8:	02156cc0 	call	802156cc <__malloc_unlock>
8020e3bc:	9005883a 	mov	r2,r18
8020e3c0:	00001206 	br	8020e40c <_realloc_r+0x170>
8020e3c4:	00c00404 	movi	r3,16
8020e3c8:	1823883a 	mov	r17,r3
8020e3cc:	003fce06 	br	8020e308 <__reset+0xfa1ee308>
8020e3d0:	a825883a 	mov	r18,r21
8020e3d4:	8445c83a 	sub	r2,r16,r17
8020e3d8:	00c003c4 	movi	r3,15
8020e3dc:	18802636 	bltu	r3,r2,8020e478 <_realloc_r+0x1dc>
8020e3e0:	99800117 	ldw	r6,4(r19)
8020e3e4:	9c07883a 	add	r3,r19,r16
8020e3e8:	3180004c 	andi	r6,r6,1
8020e3ec:	3420b03a 	or	r16,r6,r16
8020e3f0:	9c000115 	stw	r16,4(r19)
8020e3f4:	18800117 	ldw	r2,4(r3)
8020e3f8:	10800054 	ori	r2,r2,1
8020e3fc:	18800115 	stw	r2,4(r3)
8020e400:	a009883a 	mov	r4,r20
8020e404:	02156cc0 	call	802156cc <__malloc_unlock>
8020e408:	9005883a 	mov	r2,r18
8020e40c:	dfc00917 	ldw	ra,36(sp)
8020e410:	df000817 	ldw	fp,32(sp)
8020e414:	ddc00717 	ldw	r23,28(sp)
8020e418:	dd800617 	ldw	r22,24(sp)
8020e41c:	dd400517 	ldw	r21,20(sp)
8020e420:	dd000417 	ldw	r20,16(sp)
8020e424:	dcc00317 	ldw	r19,12(sp)
8020e428:	dc800217 	ldw	r18,8(sp)
8020e42c:	dc400117 	ldw	r17,4(sp)
8020e430:	dc000017 	ldw	r16,0(sp)
8020e434:	dec00a04 	addi	sp,sp,40
8020e438:	f800283a 	ret
8020e43c:	017fff04 	movi	r5,-4
8020e440:	414a703a 	and	r5,r8,r5
8020e444:	814d883a 	add	r6,r16,r5
8020e448:	30c01f16 	blt	r6,r3,8020e4c8 <_realloc_r+0x22c>
8020e44c:	20800317 	ldw	r2,12(r4)
8020e450:	20c00217 	ldw	r3,8(r4)
8020e454:	a825883a 	mov	r18,r21
8020e458:	3021883a 	mov	r16,r6
8020e45c:	18800315 	stw	r2,12(r3)
8020e460:	10c00215 	stw	r3,8(r2)
8020e464:	003fdb06 	br	8020e3d4 <__reset+0xfa1ee3d4>
8020e468:	00800304 	movi	r2,12
8020e46c:	a0800015 	stw	r2,0(r20)
8020e470:	0005883a 	mov	r2,zero
8020e474:	003fe506 	br	8020e40c <__reset+0xfa1ee40c>
8020e478:	98c00117 	ldw	r3,4(r19)
8020e47c:	9c4b883a 	add	r5,r19,r17
8020e480:	11000054 	ori	r4,r2,1
8020e484:	18c0004c 	andi	r3,r3,1
8020e488:	1c62b03a 	or	r17,r3,r17
8020e48c:	9c400115 	stw	r17,4(r19)
8020e490:	29000115 	stw	r4,4(r5)
8020e494:	2885883a 	add	r2,r5,r2
8020e498:	10c00117 	ldw	r3,4(r2)
8020e49c:	29400204 	addi	r5,r5,8
8020e4a0:	a009883a 	mov	r4,r20
8020e4a4:	18c00054 	ori	r3,r3,1
8020e4a8:	10c00115 	stw	r3,4(r2)
8020e4ac:	020bb400 	call	8020bb40 <_free_r>
8020e4b0:	003fd306 	br	8020e400 <__reset+0xfa1ee400>
8020e4b4:	017fff04 	movi	r5,-4
8020e4b8:	414a703a 	and	r5,r8,r5
8020e4bc:	89800404 	addi	r6,r17,16
8020e4c0:	8151883a 	add	r8,r16,r5
8020e4c4:	4180590e 	bge	r8,r6,8020e62c <_realloc_r+0x390>
8020e4c8:	1080004c 	andi	r2,r2,1
8020e4cc:	103f9e1e 	bne	r2,zero,8020e348 <__reset+0xfa1ee348>
8020e4d0:	adbffe17 	ldw	r22,-8(r21)
8020e4d4:	00bfff04 	movi	r2,-4
8020e4d8:	9dadc83a 	sub	r22,r19,r22
8020e4dc:	b1800117 	ldw	r6,4(r22)
8020e4e0:	3084703a 	and	r2,r6,r2
8020e4e4:	20002026 	beq	r4,zero,8020e568 <_realloc_r+0x2cc>
8020e4e8:	80af883a 	add	r23,r16,r2
8020e4ec:	b96f883a 	add	r23,r23,r5
8020e4f0:	21c05f26 	beq	r4,r7,8020e670 <_realloc_r+0x3d4>
8020e4f4:	b8c01c16 	blt	r23,r3,8020e568 <_realloc_r+0x2cc>
8020e4f8:	20800317 	ldw	r2,12(r4)
8020e4fc:	20c00217 	ldw	r3,8(r4)
8020e500:	81bfff04 	addi	r6,r16,-4
8020e504:	01000904 	movi	r4,36
8020e508:	18800315 	stw	r2,12(r3)
8020e50c:	10c00215 	stw	r3,8(r2)
8020e510:	b0c00217 	ldw	r3,8(r22)
8020e514:	b0800317 	ldw	r2,12(r22)
8020e518:	b4800204 	addi	r18,r22,8
8020e51c:	18800315 	stw	r2,12(r3)
8020e520:	10c00215 	stw	r3,8(r2)
8020e524:	21801b36 	bltu	r4,r6,8020e594 <_realloc_r+0x2f8>
8020e528:	008004c4 	movi	r2,19
8020e52c:	1180352e 	bgeu	r2,r6,8020e604 <_realloc_r+0x368>
8020e530:	a8800017 	ldw	r2,0(r21)
8020e534:	b0800215 	stw	r2,8(r22)
8020e538:	a8800117 	ldw	r2,4(r21)
8020e53c:	b0800315 	stw	r2,12(r22)
8020e540:	008006c4 	movi	r2,27
8020e544:	11807f36 	bltu	r2,r6,8020e744 <_realloc_r+0x4a8>
8020e548:	b0800404 	addi	r2,r22,16
8020e54c:	ad400204 	addi	r21,r21,8
8020e550:	00002d06 	br	8020e608 <_realloc_r+0x36c>
8020e554:	adbffe17 	ldw	r22,-8(r21)
8020e558:	00bfff04 	movi	r2,-4
8020e55c:	9dadc83a 	sub	r22,r19,r22
8020e560:	b1000117 	ldw	r4,4(r22)
8020e564:	2084703a 	and	r2,r4,r2
8020e568:	b03f7726 	beq	r22,zero,8020e348 <__reset+0xfa1ee348>
8020e56c:	80af883a 	add	r23,r16,r2
8020e570:	b8ff7516 	blt	r23,r3,8020e348 <__reset+0xfa1ee348>
8020e574:	b0800317 	ldw	r2,12(r22)
8020e578:	b0c00217 	ldw	r3,8(r22)
8020e57c:	81bfff04 	addi	r6,r16,-4
8020e580:	01000904 	movi	r4,36
8020e584:	18800315 	stw	r2,12(r3)
8020e588:	10c00215 	stw	r3,8(r2)
8020e58c:	b4800204 	addi	r18,r22,8
8020e590:	21bfe52e 	bgeu	r4,r6,8020e528 <__reset+0xfa1ee528>
8020e594:	a80b883a 	mov	r5,r21
8020e598:	9009883a 	mov	r4,r18
8020e59c:	020d01c0 	call	8020d01c <memmove>
8020e5a0:	b821883a 	mov	r16,r23
8020e5a4:	b027883a 	mov	r19,r22
8020e5a8:	003f8a06 	br	8020e3d4 <__reset+0xfa1ee3d4>
8020e5ac:	300b883a 	mov	r5,r6
8020e5b0:	dfc00917 	ldw	ra,36(sp)
8020e5b4:	df000817 	ldw	fp,32(sp)
8020e5b8:	ddc00717 	ldw	r23,28(sp)
8020e5bc:	dd800617 	ldw	r22,24(sp)
8020e5c0:	dd400517 	ldw	r21,20(sp)
8020e5c4:	dd000417 	ldw	r20,16(sp)
8020e5c8:	dcc00317 	ldw	r19,12(sp)
8020e5cc:	dc800217 	ldw	r18,8(sp)
8020e5d0:	dc400117 	ldw	r17,4(sp)
8020e5d4:	dc000017 	ldw	r16,0(sp)
8020e5d8:	dec00a04 	addi	sp,sp,40
8020e5dc:	020c72c1 	jmpi	8020c72c <_malloc_r>
8020e5e0:	a8c00017 	ldw	r3,0(r21)
8020e5e4:	90c00015 	stw	r3,0(r18)
8020e5e8:	a8c00117 	ldw	r3,4(r21)
8020e5ec:	90c00115 	stw	r3,4(r18)
8020e5f0:	00c006c4 	movi	r3,27
8020e5f4:	19804536 	bltu	r3,r6,8020e70c <_realloc_r+0x470>
8020e5f8:	90800204 	addi	r2,r18,8
8020e5fc:	a8c00204 	addi	r3,r21,8
8020e600:	003f6306 	br	8020e390 <__reset+0xfa1ee390>
8020e604:	9005883a 	mov	r2,r18
8020e608:	a8c00017 	ldw	r3,0(r21)
8020e60c:	b821883a 	mov	r16,r23
8020e610:	b027883a 	mov	r19,r22
8020e614:	10c00015 	stw	r3,0(r2)
8020e618:	a8c00117 	ldw	r3,4(r21)
8020e61c:	10c00115 	stw	r3,4(r2)
8020e620:	a8c00217 	ldw	r3,8(r21)
8020e624:	10c00215 	stw	r3,8(r2)
8020e628:	003f6a06 	br	8020e3d4 <__reset+0xfa1ee3d4>
8020e62c:	9c67883a 	add	r19,r19,r17
8020e630:	4445c83a 	sub	r2,r8,r17
8020e634:	e4c00215 	stw	r19,8(fp)
8020e638:	10800054 	ori	r2,r2,1
8020e63c:	98800115 	stw	r2,4(r19)
8020e640:	a8bfff17 	ldw	r2,-4(r21)
8020e644:	a009883a 	mov	r4,r20
8020e648:	1080004c 	andi	r2,r2,1
8020e64c:	1462b03a 	or	r17,r2,r17
8020e650:	ac7fff15 	stw	r17,-4(r21)
8020e654:	02156cc0 	call	802156cc <__malloc_unlock>
8020e658:	a805883a 	mov	r2,r21
8020e65c:	003f6b06 	br	8020e40c <__reset+0xfa1ee40c>
8020e660:	a80b883a 	mov	r5,r21
8020e664:	9009883a 	mov	r4,r18
8020e668:	020d01c0 	call	8020d01c <memmove>
8020e66c:	003f4e06 	br	8020e3a8 <__reset+0xfa1ee3a8>
8020e670:	89000404 	addi	r4,r17,16
8020e674:	b93fbc16 	blt	r23,r4,8020e568 <__reset+0xfa1ee568>
8020e678:	b0800317 	ldw	r2,12(r22)
8020e67c:	b0c00217 	ldw	r3,8(r22)
8020e680:	81bfff04 	addi	r6,r16,-4
8020e684:	01000904 	movi	r4,36
8020e688:	18800315 	stw	r2,12(r3)
8020e68c:	10c00215 	stw	r3,8(r2)
8020e690:	b4800204 	addi	r18,r22,8
8020e694:	21804336 	bltu	r4,r6,8020e7a4 <_realloc_r+0x508>
8020e698:	008004c4 	movi	r2,19
8020e69c:	11803f2e 	bgeu	r2,r6,8020e79c <_realloc_r+0x500>
8020e6a0:	a8800017 	ldw	r2,0(r21)
8020e6a4:	b0800215 	stw	r2,8(r22)
8020e6a8:	a8800117 	ldw	r2,4(r21)
8020e6ac:	b0800315 	stw	r2,12(r22)
8020e6b0:	008006c4 	movi	r2,27
8020e6b4:	11803f36 	bltu	r2,r6,8020e7b4 <_realloc_r+0x518>
8020e6b8:	b0800404 	addi	r2,r22,16
8020e6bc:	ad400204 	addi	r21,r21,8
8020e6c0:	a8c00017 	ldw	r3,0(r21)
8020e6c4:	10c00015 	stw	r3,0(r2)
8020e6c8:	a8c00117 	ldw	r3,4(r21)
8020e6cc:	10c00115 	stw	r3,4(r2)
8020e6d0:	a8c00217 	ldw	r3,8(r21)
8020e6d4:	10c00215 	stw	r3,8(r2)
8020e6d8:	b447883a 	add	r3,r22,r17
8020e6dc:	bc45c83a 	sub	r2,r23,r17
8020e6e0:	e0c00215 	stw	r3,8(fp)
8020e6e4:	10800054 	ori	r2,r2,1
8020e6e8:	18800115 	stw	r2,4(r3)
8020e6ec:	b0800117 	ldw	r2,4(r22)
8020e6f0:	a009883a 	mov	r4,r20
8020e6f4:	1080004c 	andi	r2,r2,1
8020e6f8:	1462b03a 	or	r17,r2,r17
8020e6fc:	b4400115 	stw	r17,4(r22)
8020e700:	02156cc0 	call	802156cc <__malloc_unlock>
8020e704:	9005883a 	mov	r2,r18
8020e708:	003f4006 	br	8020e40c <__reset+0xfa1ee40c>
8020e70c:	a8c00217 	ldw	r3,8(r21)
8020e710:	90c00215 	stw	r3,8(r18)
8020e714:	a8c00317 	ldw	r3,12(r21)
8020e718:	90c00315 	stw	r3,12(r18)
8020e71c:	30801126 	beq	r6,r2,8020e764 <_realloc_r+0x4c8>
8020e720:	90800404 	addi	r2,r18,16
8020e724:	a8c00404 	addi	r3,r21,16
8020e728:	003f1906 	br	8020e390 <__reset+0xfa1ee390>
8020e72c:	90ffff17 	ldw	r3,-4(r18)
8020e730:	00bfff04 	movi	r2,-4
8020e734:	a825883a 	mov	r18,r21
8020e738:	1884703a 	and	r2,r3,r2
8020e73c:	80a1883a 	add	r16,r16,r2
8020e740:	003f2406 	br	8020e3d4 <__reset+0xfa1ee3d4>
8020e744:	a8800217 	ldw	r2,8(r21)
8020e748:	b0800415 	stw	r2,16(r22)
8020e74c:	a8800317 	ldw	r2,12(r21)
8020e750:	b0800515 	stw	r2,20(r22)
8020e754:	31000a26 	beq	r6,r4,8020e780 <_realloc_r+0x4e4>
8020e758:	b0800604 	addi	r2,r22,24
8020e75c:	ad400404 	addi	r21,r21,16
8020e760:	003fa906 	br	8020e608 <__reset+0xfa1ee608>
8020e764:	a9000417 	ldw	r4,16(r21)
8020e768:	90800604 	addi	r2,r18,24
8020e76c:	a8c00604 	addi	r3,r21,24
8020e770:	91000415 	stw	r4,16(r18)
8020e774:	a9000517 	ldw	r4,20(r21)
8020e778:	91000515 	stw	r4,20(r18)
8020e77c:	003f0406 	br	8020e390 <__reset+0xfa1ee390>
8020e780:	a8c00417 	ldw	r3,16(r21)
8020e784:	ad400604 	addi	r21,r21,24
8020e788:	b0800804 	addi	r2,r22,32
8020e78c:	b0c00615 	stw	r3,24(r22)
8020e790:	a8ffff17 	ldw	r3,-4(r21)
8020e794:	b0c00715 	stw	r3,28(r22)
8020e798:	003f9b06 	br	8020e608 <__reset+0xfa1ee608>
8020e79c:	9005883a 	mov	r2,r18
8020e7a0:	003fc706 	br	8020e6c0 <__reset+0xfa1ee6c0>
8020e7a4:	a80b883a 	mov	r5,r21
8020e7a8:	9009883a 	mov	r4,r18
8020e7ac:	020d01c0 	call	8020d01c <memmove>
8020e7b0:	003fc906 	br	8020e6d8 <__reset+0xfa1ee6d8>
8020e7b4:	a8800217 	ldw	r2,8(r21)
8020e7b8:	b0800415 	stw	r2,16(r22)
8020e7bc:	a8800317 	ldw	r2,12(r21)
8020e7c0:	b0800515 	stw	r2,20(r22)
8020e7c4:	31000726 	beq	r6,r4,8020e7e4 <_realloc_r+0x548>
8020e7c8:	b0800604 	addi	r2,r22,24
8020e7cc:	ad400404 	addi	r21,r21,16
8020e7d0:	003fbb06 	br	8020e6c0 <__reset+0xfa1ee6c0>
8020e7d4:	a009883a 	mov	r4,r20
8020e7d8:	02156cc0 	call	802156cc <__malloc_unlock>
8020e7dc:	0005883a 	mov	r2,zero
8020e7e0:	003f0a06 	br	8020e40c <__reset+0xfa1ee40c>
8020e7e4:	a8c00417 	ldw	r3,16(r21)
8020e7e8:	ad400604 	addi	r21,r21,24
8020e7ec:	b0800804 	addi	r2,r22,32
8020e7f0:	b0c00615 	stw	r3,24(r22)
8020e7f4:	a8ffff17 	ldw	r3,-4(r21)
8020e7f8:	b0c00715 	stw	r3,28(r22)
8020e7fc:	003fb006 	br	8020e6c0 <__reset+0xfa1ee6c0>

8020e800 <__fpclassifyd>:
8020e800:	00a00034 	movhi	r2,32768
8020e804:	10bfffc4 	addi	r2,r2,-1
8020e808:	2884703a 	and	r2,r5,r2
8020e80c:	10000726 	beq	r2,zero,8020e82c <__fpclassifyd+0x2c>
8020e810:	00fffc34 	movhi	r3,65520
8020e814:	019ff834 	movhi	r6,32736
8020e818:	28c7883a 	add	r3,r5,r3
8020e81c:	31bfffc4 	addi	r6,r6,-1
8020e820:	30c00536 	bltu	r6,r3,8020e838 <__fpclassifyd+0x38>
8020e824:	00800104 	movi	r2,4
8020e828:	f800283a 	ret
8020e82c:	2000021e 	bne	r4,zero,8020e838 <__fpclassifyd+0x38>
8020e830:	00800084 	movi	r2,2
8020e834:	f800283a 	ret
8020e838:	00dffc34 	movhi	r3,32752
8020e83c:	019ff834 	movhi	r6,32736
8020e840:	28cb883a 	add	r5,r5,r3
8020e844:	31bfffc4 	addi	r6,r6,-1
8020e848:	317ff62e 	bgeu	r6,r5,8020e824 <__reset+0xfa1ee824>
8020e84c:	01400434 	movhi	r5,16
8020e850:	297fffc4 	addi	r5,r5,-1
8020e854:	28800236 	bltu	r5,r2,8020e860 <__fpclassifyd+0x60>
8020e858:	008000c4 	movi	r2,3
8020e85c:	f800283a 	ret
8020e860:	10c00226 	beq	r2,r3,8020e86c <__fpclassifyd+0x6c>
8020e864:	0005883a 	mov	r2,zero
8020e868:	f800283a 	ret
8020e86c:	2005003a 	cmpeq	r2,r4,zero
8020e870:	f800283a 	ret

8020e874 <_sbrk_r>:
8020e874:	defffd04 	addi	sp,sp,-12
8020e878:	dc000015 	stw	r16,0(sp)
8020e87c:	042008b4 	movhi	r16,32802
8020e880:	dc400115 	stw	r17,4(sp)
8020e884:	84351b04 	addi	r16,r16,-11156
8020e888:	2023883a 	mov	r17,r4
8020e88c:	2809883a 	mov	r4,r5
8020e890:	dfc00215 	stw	ra,8(sp)
8020e894:	80000015 	stw	zero,0(r16)
8020e898:	021588c0 	call	8021588c <sbrk>
8020e89c:	00ffffc4 	movi	r3,-1
8020e8a0:	10c00526 	beq	r2,r3,8020e8b8 <_sbrk_r+0x44>
8020e8a4:	dfc00217 	ldw	ra,8(sp)
8020e8a8:	dc400117 	ldw	r17,4(sp)
8020e8ac:	dc000017 	ldw	r16,0(sp)
8020e8b0:	dec00304 	addi	sp,sp,12
8020e8b4:	f800283a 	ret
8020e8b8:	80c00017 	ldw	r3,0(r16)
8020e8bc:	183ff926 	beq	r3,zero,8020e8a4 <__reset+0xfa1ee8a4>
8020e8c0:	88c00015 	stw	r3,0(r17)
8020e8c4:	003ff706 	br	8020e8a4 <__reset+0xfa1ee8a4>

8020e8c8 <__sread>:
8020e8c8:	defffe04 	addi	sp,sp,-8
8020e8cc:	dc000015 	stw	r16,0(sp)
8020e8d0:	2821883a 	mov	r16,r5
8020e8d4:	2940038f 	ldh	r5,14(r5)
8020e8d8:	dfc00115 	stw	ra,4(sp)
8020e8dc:	0211ac80 	call	80211ac8 <_read_r>
8020e8e0:	10000716 	blt	r2,zero,8020e900 <__sread+0x38>
8020e8e4:	80c01417 	ldw	r3,80(r16)
8020e8e8:	1887883a 	add	r3,r3,r2
8020e8ec:	80c01415 	stw	r3,80(r16)
8020e8f0:	dfc00117 	ldw	ra,4(sp)
8020e8f4:	dc000017 	ldw	r16,0(sp)
8020e8f8:	dec00204 	addi	sp,sp,8
8020e8fc:	f800283a 	ret
8020e900:	80c0030b 	ldhu	r3,12(r16)
8020e904:	18fbffcc 	andi	r3,r3,61439
8020e908:	80c0030d 	sth	r3,12(r16)
8020e90c:	dfc00117 	ldw	ra,4(sp)
8020e910:	dc000017 	ldw	r16,0(sp)
8020e914:	dec00204 	addi	sp,sp,8
8020e918:	f800283a 	ret

8020e91c <__seofread>:
8020e91c:	0005883a 	mov	r2,zero
8020e920:	f800283a 	ret

8020e924 <__swrite>:
8020e924:	2880030b 	ldhu	r2,12(r5)
8020e928:	defffb04 	addi	sp,sp,-20
8020e92c:	dcc00315 	stw	r19,12(sp)
8020e930:	dc800215 	stw	r18,8(sp)
8020e934:	dc400115 	stw	r17,4(sp)
8020e938:	dc000015 	stw	r16,0(sp)
8020e93c:	dfc00415 	stw	ra,16(sp)
8020e940:	10c0400c 	andi	r3,r2,256
8020e944:	2821883a 	mov	r16,r5
8020e948:	2023883a 	mov	r17,r4
8020e94c:	3025883a 	mov	r18,r6
8020e950:	3827883a 	mov	r19,r7
8020e954:	18000526 	beq	r3,zero,8020e96c <__swrite+0x48>
8020e958:	2940038f 	ldh	r5,14(r5)
8020e95c:	01c00084 	movi	r7,2
8020e960:	000d883a 	mov	r6,zero
8020e964:	0211a680 	call	80211a68 <_lseek_r>
8020e968:	8080030b 	ldhu	r2,12(r16)
8020e96c:	8140038f 	ldh	r5,14(r16)
8020e970:	10bbffcc 	andi	r2,r2,61439
8020e974:	980f883a 	mov	r7,r19
8020e978:	900d883a 	mov	r6,r18
8020e97c:	8809883a 	mov	r4,r17
8020e980:	8080030d 	sth	r2,12(r16)
8020e984:	dfc00417 	ldw	ra,16(sp)
8020e988:	dcc00317 	ldw	r19,12(sp)
8020e98c:	dc800217 	ldw	r18,8(sp)
8020e990:	dc400117 	ldw	r17,4(sp)
8020e994:	dc000017 	ldw	r16,0(sp)
8020e998:	dec00504 	addi	sp,sp,20
8020e99c:	02115341 	jmpi	80211534 <_write_r>

8020e9a0 <__sseek>:
8020e9a0:	defffe04 	addi	sp,sp,-8
8020e9a4:	dc000015 	stw	r16,0(sp)
8020e9a8:	2821883a 	mov	r16,r5
8020e9ac:	2940038f 	ldh	r5,14(r5)
8020e9b0:	dfc00115 	stw	ra,4(sp)
8020e9b4:	0211a680 	call	80211a68 <_lseek_r>
8020e9b8:	00ffffc4 	movi	r3,-1
8020e9bc:	10c00826 	beq	r2,r3,8020e9e0 <__sseek+0x40>
8020e9c0:	80c0030b 	ldhu	r3,12(r16)
8020e9c4:	80801415 	stw	r2,80(r16)
8020e9c8:	18c40014 	ori	r3,r3,4096
8020e9cc:	80c0030d 	sth	r3,12(r16)
8020e9d0:	dfc00117 	ldw	ra,4(sp)
8020e9d4:	dc000017 	ldw	r16,0(sp)
8020e9d8:	dec00204 	addi	sp,sp,8
8020e9dc:	f800283a 	ret
8020e9e0:	80c0030b 	ldhu	r3,12(r16)
8020e9e4:	18fbffcc 	andi	r3,r3,61439
8020e9e8:	80c0030d 	sth	r3,12(r16)
8020e9ec:	dfc00117 	ldw	ra,4(sp)
8020e9f0:	dc000017 	ldw	r16,0(sp)
8020e9f4:	dec00204 	addi	sp,sp,8
8020e9f8:	f800283a 	ret

8020e9fc <__sclose>:
8020e9fc:	2940038f 	ldh	r5,14(r5)
8020ea00:	02115941 	jmpi	80211594 <_close_r>

8020ea04 <strcmp>:
8020ea04:	2144b03a 	or	r2,r4,r5
8020ea08:	108000cc 	andi	r2,r2,3
8020ea0c:	1000171e 	bne	r2,zero,8020ea6c <strcmp+0x68>
8020ea10:	20800017 	ldw	r2,0(r4)
8020ea14:	28c00017 	ldw	r3,0(r5)
8020ea18:	10c0141e 	bne	r2,r3,8020ea6c <strcmp+0x68>
8020ea1c:	027fbff4 	movhi	r9,65279
8020ea20:	4a7fbfc4 	addi	r9,r9,-257
8020ea24:	0086303a 	nor	r3,zero,r2
8020ea28:	02202074 	movhi	r8,32897
8020ea2c:	1245883a 	add	r2,r2,r9
8020ea30:	42202004 	addi	r8,r8,-32640
8020ea34:	10c4703a 	and	r2,r2,r3
8020ea38:	1204703a 	and	r2,r2,r8
8020ea3c:	10000226 	beq	r2,zero,8020ea48 <strcmp+0x44>
8020ea40:	00002306 	br	8020ead0 <strcmp+0xcc>
8020ea44:	1000221e 	bne	r2,zero,8020ead0 <strcmp+0xcc>
8020ea48:	21000104 	addi	r4,r4,4
8020ea4c:	20c00017 	ldw	r3,0(r4)
8020ea50:	29400104 	addi	r5,r5,4
8020ea54:	29800017 	ldw	r6,0(r5)
8020ea58:	1a4f883a 	add	r7,r3,r9
8020ea5c:	00c4303a 	nor	r2,zero,r3
8020ea60:	3884703a 	and	r2,r7,r2
8020ea64:	1204703a 	and	r2,r2,r8
8020ea68:	19bff626 	beq	r3,r6,8020ea44 <__reset+0xfa1eea44>
8020ea6c:	20800003 	ldbu	r2,0(r4)
8020ea70:	10c03fcc 	andi	r3,r2,255
8020ea74:	18c0201c 	xori	r3,r3,128
8020ea78:	18ffe004 	addi	r3,r3,-128
8020ea7c:	18000c26 	beq	r3,zero,8020eab0 <strcmp+0xac>
8020ea80:	29800007 	ldb	r6,0(r5)
8020ea84:	19800326 	beq	r3,r6,8020ea94 <strcmp+0x90>
8020ea88:	00001306 	br	8020ead8 <strcmp+0xd4>
8020ea8c:	29800007 	ldb	r6,0(r5)
8020ea90:	11800b1e 	bne	r2,r6,8020eac0 <strcmp+0xbc>
8020ea94:	21000044 	addi	r4,r4,1
8020ea98:	20c00003 	ldbu	r3,0(r4)
8020ea9c:	29400044 	addi	r5,r5,1
8020eaa0:	18803fcc 	andi	r2,r3,255
8020eaa4:	1080201c 	xori	r2,r2,128
8020eaa8:	10bfe004 	addi	r2,r2,-128
8020eaac:	103ff71e 	bne	r2,zero,8020ea8c <__reset+0xfa1eea8c>
8020eab0:	0007883a 	mov	r3,zero
8020eab4:	28800003 	ldbu	r2,0(r5)
8020eab8:	1885c83a 	sub	r2,r3,r2
8020eabc:	f800283a 	ret
8020eac0:	28800003 	ldbu	r2,0(r5)
8020eac4:	18c03fcc 	andi	r3,r3,255
8020eac8:	1885c83a 	sub	r2,r3,r2
8020eacc:	f800283a 	ret
8020ead0:	0005883a 	mov	r2,zero
8020ead4:	f800283a 	ret
8020ead8:	10c03fcc 	andi	r3,r2,255
8020eadc:	003ff506 	br	8020eab4 <__reset+0xfa1eeab4>

8020eae0 <__ssprint_r>:
8020eae0:	30800217 	ldw	r2,8(r6)
8020eae4:	defff604 	addi	sp,sp,-40
8020eae8:	dc800215 	stw	r18,8(sp)
8020eaec:	dfc00915 	stw	ra,36(sp)
8020eaf0:	df000815 	stw	fp,32(sp)
8020eaf4:	ddc00715 	stw	r23,28(sp)
8020eaf8:	dd800615 	stw	r22,24(sp)
8020eafc:	dd400515 	stw	r21,20(sp)
8020eb00:	dd000415 	stw	r20,16(sp)
8020eb04:	dcc00315 	stw	r19,12(sp)
8020eb08:	dc400115 	stw	r17,4(sp)
8020eb0c:	dc000015 	stw	r16,0(sp)
8020eb10:	3025883a 	mov	r18,r6
8020eb14:	10005826 	beq	r2,zero,8020ec78 <__ssprint_r+0x198>
8020eb18:	2027883a 	mov	r19,r4
8020eb1c:	35c00017 	ldw	r23,0(r6)
8020eb20:	29000017 	ldw	r4,0(r5)
8020eb24:	28800217 	ldw	r2,8(r5)
8020eb28:	2823883a 	mov	r17,r5
8020eb2c:	0039883a 	mov	fp,zero
8020eb30:	0021883a 	mov	r16,zero
8020eb34:	80003926 	beq	r16,zero,8020ec1c <__ssprint_r+0x13c>
8020eb38:	102b883a 	mov	r21,r2
8020eb3c:	102d883a 	mov	r22,r2
8020eb40:	80803a36 	bltu	r16,r2,8020ec2c <__ssprint_r+0x14c>
8020eb44:	88c0030b 	ldhu	r3,12(r17)
8020eb48:	1881200c 	andi	r2,r3,1152
8020eb4c:	10002626 	beq	r2,zero,8020ebe8 <__ssprint_r+0x108>
8020eb50:	88800517 	ldw	r2,20(r17)
8020eb54:	89400417 	ldw	r5,16(r17)
8020eb58:	81800044 	addi	r6,r16,1
8020eb5c:	108f883a 	add	r7,r2,r2
8020eb60:	3885883a 	add	r2,r7,r2
8020eb64:	100ed7fa 	srli	r7,r2,31
8020eb68:	216dc83a 	sub	r22,r4,r5
8020eb6c:	3589883a 	add	r4,r6,r22
8020eb70:	3885883a 	add	r2,r7,r2
8020eb74:	102bd07a 	srai	r21,r2,1
8020eb78:	a80d883a 	mov	r6,r21
8020eb7c:	a900022e 	bgeu	r21,r4,8020eb88 <__ssprint_r+0xa8>
8020eb80:	202b883a 	mov	r21,r4
8020eb84:	200d883a 	mov	r6,r4
8020eb88:	18c1000c 	andi	r3,r3,1024
8020eb8c:	18002a26 	beq	r3,zero,8020ec38 <__ssprint_r+0x158>
8020eb90:	300b883a 	mov	r5,r6
8020eb94:	9809883a 	mov	r4,r19
8020eb98:	020c72c0 	call	8020c72c <_malloc_r>
8020eb9c:	1029883a 	mov	r20,r2
8020eba0:	10002c26 	beq	r2,zero,8020ec54 <__ssprint_r+0x174>
8020eba4:	89400417 	ldw	r5,16(r17)
8020eba8:	b00d883a 	mov	r6,r22
8020ebac:	1009883a 	mov	r4,r2
8020ebb0:	020516c0 	call	8020516c <memcpy>
8020ebb4:	8880030b 	ldhu	r2,12(r17)
8020ebb8:	00fedfc4 	movi	r3,-1153
8020ebbc:	10c4703a 	and	r2,r2,r3
8020ebc0:	10802014 	ori	r2,r2,128
8020ebc4:	8880030d 	sth	r2,12(r17)
8020ebc8:	a589883a 	add	r4,r20,r22
8020ebcc:	adadc83a 	sub	r22,r21,r22
8020ebd0:	8d400515 	stw	r21,20(r17)
8020ebd4:	8d800215 	stw	r22,8(r17)
8020ebd8:	8d000415 	stw	r20,16(r17)
8020ebdc:	89000015 	stw	r4,0(r17)
8020ebe0:	802b883a 	mov	r21,r16
8020ebe4:	802d883a 	mov	r22,r16
8020ebe8:	b00d883a 	mov	r6,r22
8020ebec:	e00b883a 	mov	r5,fp
8020ebf0:	020d01c0 	call	8020d01c <memmove>
8020ebf4:	88800217 	ldw	r2,8(r17)
8020ebf8:	89000017 	ldw	r4,0(r17)
8020ebfc:	90c00217 	ldw	r3,8(r18)
8020ec00:	1545c83a 	sub	r2,r2,r21
8020ec04:	2589883a 	add	r4,r4,r22
8020ec08:	88800215 	stw	r2,8(r17)
8020ec0c:	89000015 	stw	r4,0(r17)
8020ec10:	1c21c83a 	sub	r16,r3,r16
8020ec14:	94000215 	stw	r16,8(r18)
8020ec18:	80001726 	beq	r16,zero,8020ec78 <__ssprint_r+0x198>
8020ec1c:	bf000017 	ldw	fp,0(r23)
8020ec20:	bc000117 	ldw	r16,4(r23)
8020ec24:	bdc00204 	addi	r23,r23,8
8020ec28:	003fc206 	br	8020eb34 <__reset+0xfa1eeb34>
8020ec2c:	802b883a 	mov	r21,r16
8020ec30:	802d883a 	mov	r22,r16
8020ec34:	003fec06 	br	8020ebe8 <__reset+0xfa1eebe8>
8020ec38:	9809883a 	mov	r4,r19
8020ec3c:	020e29c0 	call	8020e29c <_realloc_r>
8020ec40:	1029883a 	mov	r20,r2
8020ec44:	103fe01e 	bne	r2,zero,8020ebc8 <__reset+0xfa1eebc8>
8020ec48:	89400417 	ldw	r5,16(r17)
8020ec4c:	9809883a 	mov	r4,r19
8020ec50:	020bb400 	call	8020bb40 <_free_r>
8020ec54:	88c0030b 	ldhu	r3,12(r17)
8020ec58:	00800304 	movi	r2,12
8020ec5c:	98800015 	stw	r2,0(r19)
8020ec60:	18c01014 	ori	r3,r3,64
8020ec64:	88c0030d 	sth	r3,12(r17)
8020ec68:	00bfffc4 	movi	r2,-1
8020ec6c:	90000215 	stw	zero,8(r18)
8020ec70:	90000115 	stw	zero,4(r18)
8020ec74:	00000206 	br	8020ec80 <__ssprint_r+0x1a0>
8020ec78:	90000115 	stw	zero,4(r18)
8020ec7c:	0005883a 	mov	r2,zero
8020ec80:	dfc00917 	ldw	ra,36(sp)
8020ec84:	df000817 	ldw	fp,32(sp)
8020ec88:	ddc00717 	ldw	r23,28(sp)
8020ec8c:	dd800617 	ldw	r22,24(sp)
8020ec90:	dd400517 	ldw	r21,20(sp)
8020ec94:	dd000417 	ldw	r20,16(sp)
8020ec98:	dcc00317 	ldw	r19,12(sp)
8020ec9c:	dc800217 	ldw	r18,8(sp)
8020eca0:	dc400117 	ldw	r17,4(sp)
8020eca4:	dc000017 	ldw	r16,0(sp)
8020eca8:	dec00a04 	addi	sp,sp,40
8020ecac:	f800283a 	ret

8020ecb0 <___svfiprintf_internal_r>:
8020ecb0:	2880030b 	ldhu	r2,12(r5)
8020ecb4:	deffc804 	addi	sp,sp,-224
8020ecb8:	dcc03115 	stw	r19,196(sp)
8020ecbc:	dfc03715 	stw	ra,220(sp)
8020ecc0:	df003615 	stw	fp,216(sp)
8020ecc4:	ddc03515 	stw	r23,212(sp)
8020ecc8:	dd803415 	stw	r22,208(sp)
8020eccc:	dd403315 	stw	r21,204(sp)
8020ecd0:	dd003215 	stw	r20,200(sp)
8020ecd4:	dc803015 	stw	r18,192(sp)
8020ecd8:	dc402f15 	stw	r17,188(sp)
8020ecdc:	dc002e15 	stw	r16,184(sp)
8020ece0:	d9402715 	stw	r5,156(sp)
8020ece4:	d9002a15 	stw	r4,168(sp)
8020ece8:	1080200c 	andi	r2,r2,128
8020ecec:	d9c02315 	stw	r7,140(sp)
8020ecf0:	3027883a 	mov	r19,r6
8020ecf4:	10000226 	beq	r2,zero,8020ed00 <___svfiprintf_internal_r+0x50>
8020ecf8:	28800417 	ldw	r2,16(r5)
8020ecfc:	10041d26 	beq	r2,zero,8020fd74 <___svfiprintf_internal_r+0x10c4>
8020ed00:	dac01a04 	addi	r11,sp,104
8020ed04:	dac01e15 	stw	r11,120(sp)
8020ed08:	d8801e17 	ldw	r2,120(sp)
8020ed0c:	dac019c4 	addi	r11,sp,103
8020ed10:	dd402a17 	ldw	r21,168(sp)
8020ed14:	ddc02717 	ldw	r23,156(sp)
8020ed18:	05a008b4 	movhi	r22,32802
8020ed1c:	052008b4 	movhi	r20,32802
8020ed20:	dac01f15 	stw	r11,124(sp)
8020ed24:	12d7c83a 	sub	r11,r2,r11
8020ed28:	b5ad2c04 	addi	r22,r22,-19280
8020ed2c:	a52d2804 	addi	r20,r20,-19296
8020ed30:	dec01a15 	stw	sp,104(sp)
8020ed34:	d8001c15 	stw	zero,112(sp)
8020ed38:	d8001b15 	stw	zero,108(sp)
8020ed3c:	d811883a 	mov	r8,sp
8020ed40:	d8002915 	stw	zero,164(sp)
8020ed44:	d8002515 	stw	zero,148(sp)
8020ed48:	dac02b15 	stw	r11,172(sp)
8020ed4c:	98800007 	ldb	r2,0(r19)
8020ed50:	1002dd26 	beq	r2,zero,8020f8c8 <___svfiprintf_internal_r+0xc18>
8020ed54:	00c00944 	movi	r3,37
8020ed58:	9823883a 	mov	r17,r19
8020ed5c:	10c0021e 	bne	r2,r3,8020ed68 <___svfiprintf_internal_r+0xb8>
8020ed60:	00001406 	br	8020edb4 <___svfiprintf_internal_r+0x104>
8020ed64:	10c00326 	beq	r2,r3,8020ed74 <___svfiprintf_internal_r+0xc4>
8020ed68:	8c400044 	addi	r17,r17,1
8020ed6c:	88800007 	ldb	r2,0(r17)
8020ed70:	103ffc1e 	bne	r2,zero,8020ed64 <__reset+0xfa1eed64>
8020ed74:	8ce1c83a 	sub	r16,r17,r19
8020ed78:	80000e26 	beq	r16,zero,8020edb4 <___svfiprintf_internal_r+0x104>
8020ed7c:	d8c01c17 	ldw	r3,112(sp)
8020ed80:	d8801b17 	ldw	r2,108(sp)
8020ed84:	44c00015 	stw	r19,0(r8)
8020ed88:	1c07883a 	add	r3,r3,r16
8020ed8c:	10800044 	addi	r2,r2,1
8020ed90:	d8c01c15 	stw	r3,112(sp)
8020ed94:	44000115 	stw	r16,4(r8)
8020ed98:	d8801b15 	stw	r2,108(sp)
8020ed9c:	00c001c4 	movi	r3,7
8020eda0:	18831e16 	blt	r3,r2,8020fa1c <___svfiprintf_internal_r+0xd6c>
8020eda4:	42000204 	addi	r8,r8,8
8020eda8:	dac02517 	ldw	r11,148(sp)
8020edac:	5c17883a 	add	r11,r11,r16
8020edb0:	dac02515 	stw	r11,148(sp)
8020edb4:	88800007 	ldb	r2,0(r17)
8020edb8:	1002c526 	beq	r2,zero,8020f8d0 <___svfiprintf_internal_r+0xc20>
8020edbc:	88c00047 	ldb	r3,1(r17)
8020edc0:	8cc00044 	addi	r19,r17,1
8020edc4:	d8001d85 	stb	zero,118(sp)
8020edc8:	0009883a 	mov	r4,zero
8020edcc:	000f883a 	mov	r7,zero
8020edd0:	043fffc4 	movi	r16,-1
8020edd4:	d8002415 	stw	zero,144(sp)
8020edd8:	0025883a 	mov	r18,zero
8020eddc:	01401604 	movi	r5,88
8020ede0:	01800244 	movi	r6,9
8020ede4:	02800a84 	movi	r10,42
8020ede8:	02401b04 	movi	r9,108
8020edec:	9cc00044 	addi	r19,r19,1
8020edf0:	18bff804 	addi	r2,r3,-32
8020edf4:	2881dd36 	bltu	r5,r2,8020f56c <___svfiprintf_internal_r+0x8bc>
8020edf8:	100490ba 	slli	r2,r2,2
8020edfc:	02e00874 	movhi	r11,32801
8020ee00:	5afb8404 	addi	r11,r11,-4592
8020ee04:	12c5883a 	add	r2,r2,r11
8020ee08:	10800017 	ldw	r2,0(r2)
8020ee0c:	1000683a 	jmp	r2
8020ee10:	8020f00c 	andi	zero,r16,33728
8020ee14:	8020f56c 	andhi	zero,r16,33749
8020ee18:	8020f56c 	andhi	zero,r16,33749
8020ee1c:	8020f000 	call	88020f00 <__reset+0x2000f00>
8020ee20:	8020f56c 	andhi	zero,r16,33749
8020ee24:	8020f56c 	andhi	zero,r16,33749
8020ee28:	8020f56c 	andhi	zero,r16,33749
8020ee2c:	8020f56c 	andhi	zero,r16,33749
8020ee30:	8020f56c 	andhi	zero,r16,33749
8020ee34:	8020f56c 	andhi	zero,r16,33749
8020ee38:	8020ef74 	orhi	zero,r16,33725
8020ee3c:	8020f150 	cmplti	zero,r16,-31803
8020ee40:	8020f56c 	andhi	zero,r16,33749
8020ee44:	8020efa0 	cmpeqi	zero,r16,-31810
8020ee48:	8020f5a0 	cmpeqi	zero,r16,-31786
8020ee4c:	8020f56c 	andhi	zero,r16,33749
8020ee50:	8020f594 	ori	zero,r16,33750
8020ee54:	8020f534 	orhi	zero,r16,33748
8020ee58:	8020f534 	orhi	zero,r16,33748
8020ee5c:	8020f534 	orhi	zero,r16,33748
8020ee60:	8020f534 	orhi	zero,r16,33748
8020ee64:	8020f534 	orhi	zero,r16,33748
8020ee68:	8020f534 	orhi	zero,r16,33748
8020ee6c:	8020f534 	orhi	zero,r16,33748
8020ee70:	8020f534 	orhi	zero,r16,33748
8020ee74:	8020f534 	orhi	zero,r16,33748
8020ee78:	8020f56c 	andhi	zero,r16,33749
8020ee7c:	8020f56c 	andhi	zero,r16,33749
8020ee80:	8020f56c 	andhi	zero,r16,33749
8020ee84:	8020f56c 	andhi	zero,r16,33749
8020ee88:	8020f56c 	andhi	zero,r16,33749
8020ee8c:	8020f56c 	andhi	zero,r16,33749
8020ee90:	8020f56c 	andhi	zero,r16,33749
8020ee94:	8020f56c 	andhi	zero,r16,33749
8020ee98:	8020f56c 	andhi	zero,r16,33749
8020ee9c:	8020f56c 	andhi	zero,r16,33749
8020eea0:	8020f4d0 	cmplti	zero,r16,-31789
8020eea4:	8020f56c 	andhi	zero,r16,33749
8020eea8:	8020f56c 	andhi	zero,r16,33749
8020eeac:	8020f56c 	andhi	zero,r16,33749
8020eeb0:	8020f56c 	andhi	zero,r16,33749
8020eeb4:	8020f56c 	andhi	zero,r16,33749
8020eeb8:	8020f56c 	andhi	zero,r16,33749
8020eebc:	8020f56c 	andhi	zero,r16,33749
8020eec0:	8020f56c 	andhi	zero,r16,33749
8020eec4:	8020f56c 	andhi	zero,r16,33749
8020eec8:	8020f56c 	andhi	zero,r16,33749
8020eecc:	8020f648 	cmpgei	zero,r16,-31783
8020eed0:	8020f56c 	andhi	zero,r16,33749
8020eed4:	8020f56c 	andhi	zero,r16,33749
8020eed8:	8020f56c 	andhi	zero,r16,33749
8020eedc:	8020f56c 	andhi	zero,r16,33749
8020eee0:	8020f56c 	andhi	zero,r16,33749
8020eee4:	8020f5e0 	cmpeqi	zero,r16,-31785
8020eee8:	8020f56c 	andhi	zero,r16,33749
8020eeec:	8020f56c 	andhi	zero,r16,33749
8020eef0:	8020f314 	ori	zero,r16,33740
8020eef4:	8020f56c 	andhi	zero,r16,33749
8020eef8:	8020f56c 	andhi	zero,r16,33749
8020eefc:	8020f56c 	andhi	zero,r16,33749
8020ef00:	8020f56c 	andhi	zero,r16,33749
8020ef04:	8020f56c 	andhi	zero,r16,33749
8020ef08:	8020f56c 	andhi	zero,r16,33749
8020ef0c:	8020f56c 	andhi	zero,r16,33749
8020ef10:	8020f56c 	andhi	zero,r16,33749
8020ef14:	8020f56c 	andhi	zero,r16,33749
8020ef18:	8020f56c 	andhi	zero,r16,33749
8020ef1c:	8020f204 	addi	zero,r16,-31800
8020ef20:	8020f3b0 	cmpltui	zero,r16,33742
8020ef24:	8020f56c 	andhi	zero,r16,33749
8020ef28:	8020f56c 	andhi	zero,r16,33749
8020ef2c:	8020f56c 	andhi	zero,r16,33749
8020ef30:	8020f3a4 	muli	zero,r16,-31794
8020ef34:	8020f3b0 	cmpltui	zero,r16,33742
8020ef38:	8020f56c 	andhi	zero,r16,33749
8020ef3c:	8020f56c 	andhi	zero,r16,33749
8020ef40:	8020f394 	ori	zero,r16,33742
8020ef44:	8020f56c 	andhi	zero,r16,33749
8020ef48:	8020f358 	cmpnei	zero,r16,-31795
8020ef4c:	8020f160 	cmpeqi	zero,r16,-31803
8020ef50:	8020efac 	andhi	zero,r16,33726
8020ef54:	8020f4c4 	addi	zero,r16,-31789
8020ef58:	8020f56c 	andhi	zero,r16,33749
8020ef5c:	8020f478 	rdprs	zero,r16,-31791
8020ef60:	8020f56c 	andhi	zero,r16,33749
8020ef64:	8020f0d0 	cmplti	zero,r16,-31805
8020ef68:	8020f56c 	andhi	zero,r16,33749
8020ef6c:	8020f56c 	andhi	zero,r16,33749
8020ef70:	8020f02c 	andhi	zero,r16,33728
8020ef74:	dac02317 	ldw	r11,140(sp)
8020ef78:	5ac00017 	ldw	r11,0(r11)
8020ef7c:	dac02415 	stw	r11,144(sp)
8020ef80:	dac02317 	ldw	r11,140(sp)
8020ef84:	58800104 	addi	r2,r11,4
8020ef88:	dac02417 	ldw	r11,144(sp)
8020ef8c:	5802e90e 	bge	r11,zero,8020fb34 <___svfiprintf_internal_r+0xe84>
8020ef90:	dac02417 	ldw	r11,144(sp)
8020ef94:	d8802315 	stw	r2,140(sp)
8020ef98:	02d7c83a 	sub	r11,zero,r11
8020ef9c:	dac02415 	stw	r11,144(sp)
8020efa0:	94800114 	ori	r18,r18,4
8020efa4:	98c00007 	ldb	r3,0(r19)
8020efa8:	003f9006 	br	8020edec <__reset+0xfa1eedec>
8020efac:	00800c04 	movi	r2,48
8020efb0:	dac02317 	ldw	r11,140(sp)
8020efb4:	d8801d05 	stb	r2,116(sp)
8020efb8:	00801e04 	movi	r2,120
8020efbc:	d8801d45 	stb	r2,117(sp)
8020efc0:	d8001d85 	stb	zero,118(sp)
8020efc4:	58c00104 	addi	r3,r11,4
8020efc8:	5f000017 	ldw	fp,0(r11)
8020efcc:	0013883a 	mov	r9,zero
8020efd0:	90800094 	ori	r2,r18,2
8020efd4:	80032b16 	blt	r16,zero,8020fc84 <___svfiprintf_internal_r+0xfd4>
8020efd8:	00bfdfc4 	movi	r2,-129
8020efdc:	90a4703a 	and	r18,r18,r2
8020efe0:	d8c02315 	stw	r3,140(sp)
8020efe4:	94800094 	ori	r18,r18,2
8020efe8:	e002dc26 	beq	fp,zero,8020fb5c <___svfiprintf_internal_r+0xeac>
8020efec:	012008b4 	movhi	r4,32802
8020eff0:	212cc004 	addi	r4,r4,-19712
8020eff4:	0015883a 	mov	r10,zero
8020eff8:	d9002915 	stw	r4,164(sp)
8020effc:	00002306 	br	8020f08c <___svfiprintf_internal_r+0x3dc>
8020f000:	94800054 	ori	r18,r18,1
8020f004:	98c00007 	ldb	r3,0(r19)
8020f008:	003f7806 	br	8020edec <__reset+0xfa1eedec>
8020f00c:	38803fcc 	andi	r2,r7,255
8020f010:	1080201c 	xori	r2,r2,128
8020f014:	10bfe004 	addi	r2,r2,-128
8020f018:	1002f31e 	bne	r2,zero,8020fbe8 <___svfiprintf_internal_r+0xf38>
8020f01c:	01000044 	movi	r4,1
8020f020:	01c00804 	movi	r7,32
8020f024:	98c00007 	ldb	r3,0(r19)
8020f028:	003f7006 	br	8020edec <__reset+0xfa1eedec>
8020f02c:	21003fcc 	andi	r4,r4,255
8020f030:	2003aa1e 	bne	r4,zero,8020fedc <___svfiprintf_internal_r+0x122c>
8020f034:	00a008b4 	movhi	r2,32802
8020f038:	10acc004 	addi	r2,r2,-19712
8020f03c:	d8802915 	stw	r2,164(sp)
8020f040:	9080080c 	andi	r2,r18,32
8020f044:	1000ba26 	beq	r2,zero,8020f330 <___svfiprintf_internal_r+0x680>
8020f048:	dac02317 	ldw	r11,140(sp)
8020f04c:	5f000017 	ldw	fp,0(r11)
8020f050:	5a400117 	ldw	r9,4(r11)
8020f054:	5ac00204 	addi	r11,r11,8
8020f058:	dac02315 	stw	r11,140(sp)
8020f05c:	9080004c 	andi	r2,r18,1
8020f060:	10029026 	beq	r2,zero,8020faa4 <___svfiprintf_internal_r+0xdf4>
8020f064:	e244b03a 	or	r2,fp,r9
8020f068:	1002d41e 	bne	r2,zero,8020fbbc <___svfiprintf_internal_r+0xf0c>
8020f06c:	d8001d85 	stb	zero,118(sp)
8020f070:	80030b16 	blt	r16,zero,8020fca0 <___svfiprintf_internal_r+0xff0>
8020f074:	00bfdfc4 	movi	r2,-129
8020f078:	90a4703a 	and	r18,r18,r2
8020f07c:	0015883a 	mov	r10,zero
8020f080:	80002426 	beq	r16,zero,8020f114 <___svfiprintf_internal_r+0x464>
8020f084:	0039883a 	mov	fp,zero
8020f088:	0013883a 	mov	r9,zero
8020f08c:	d9002917 	ldw	r4,164(sp)
8020f090:	dc401a04 	addi	r17,sp,104
8020f094:	e08003cc 	andi	r2,fp,15
8020f098:	4806973a 	slli	r3,r9,28
8020f09c:	2085883a 	add	r2,r4,r2
8020f0a0:	e038d13a 	srli	fp,fp,4
8020f0a4:	10800003 	ldbu	r2,0(r2)
8020f0a8:	4812d13a 	srli	r9,r9,4
8020f0ac:	8c7fffc4 	addi	r17,r17,-1
8020f0b0:	1f38b03a 	or	fp,r3,fp
8020f0b4:	88800005 	stb	r2,0(r17)
8020f0b8:	e244b03a 	or	r2,fp,r9
8020f0bc:	103ff51e 	bne	r2,zero,8020f094 <__reset+0xfa1ef094>
8020f0c0:	dac01e17 	ldw	r11,120(sp)
8020f0c4:	5c57c83a 	sub	r11,r11,r17
8020f0c8:	dac02115 	stw	r11,132(sp)
8020f0cc:	00001406 	br	8020f120 <___svfiprintf_internal_r+0x470>
8020f0d0:	21003fcc 	andi	r4,r4,255
8020f0d4:	2003741e 	bne	r4,zero,8020fea8 <___svfiprintf_internal_r+0x11f8>
8020f0d8:	9080080c 	andi	r2,r18,32
8020f0dc:	10014526 	beq	r2,zero,8020f5f4 <___svfiprintf_internal_r+0x944>
8020f0e0:	dac02317 	ldw	r11,140(sp)
8020f0e4:	d8001d85 	stb	zero,118(sp)
8020f0e8:	58c00204 	addi	r3,r11,8
8020f0ec:	5f000017 	ldw	fp,0(r11)
8020f0f0:	5a400117 	ldw	r9,4(r11)
8020f0f4:	8002d916 	blt	r16,zero,8020fc5c <___svfiprintf_internal_r+0xfac>
8020f0f8:	013fdfc4 	movi	r4,-129
8020f0fc:	e244b03a 	or	r2,fp,r9
8020f100:	d8c02315 	stw	r3,140(sp)
8020f104:	9124703a 	and	r18,r18,r4
8020f108:	0015883a 	mov	r10,zero
8020f10c:	1000b91e 	bne	r2,zero,8020f3f4 <___svfiprintf_internal_r+0x744>
8020f110:	8002e61e 	bne	r16,zero,8020fcac <___svfiprintf_internal_r+0xffc>
8020f114:	0021883a 	mov	r16,zero
8020f118:	d8002115 	stw	zero,132(sp)
8020f11c:	dc401a04 	addi	r17,sp,104
8020f120:	d8c02117 	ldw	r3,132(sp)
8020f124:	dc002015 	stw	r16,128(sp)
8020f128:	80c0010e 	bge	r16,r3,8020f130 <___svfiprintf_internal_r+0x480>
8020f12c:	d8c02015 	stw	r3,128(sp)
8020f130:	52803fcc 	andi	r10,r10,255
8020f134:	5280201c 	xori	r10,r10,128
8020f138:	52bfe004 	addi	r10,r10,-128
8020f13c:	50003c26 	beq	r10,zero,8020f230 <___svfiprintf_internal_r+0x580>
8020f140:	dac02017 	ldw	r11,128(sp)
8020f144:	5ac00044 	addi	r11,r11,1
8020f148:	dac02015 	stw	r11,128(sp)
8020f14c:	00003806 	br	8020f230 <___svfiprintf_internal_r+0x580>
8020f150:	01000044 	movi	r4,1
8020f154:	01c00ac4 	movi	r7,43
8020f158:	98c00007 	ldb	r3,0(r19)
8020f15c:	003f2306 	br	8020edec <__reset+0xfa1eedec>
8020f160:	21003fcc 	andi	r4,r4,255
8020f164:	2003481e 	bne	r4,zero,8020fe88 <___svfiprintf_internal_r+0x11d8>
8020f168:	9080080c 	andi	r2,r18,32
8020f16c:	10013b26 	beq	r2,zero,8020f65c <___svfiprintf_internal_r+0x9ac>
8020f170:	dac02317 	ldw	r11,140(sp)
8020f174:	d8001d85 	stb	zero,118(sp)
8020f178:	58800204 	addi	r2,r11,8
8020f17c:	5f000017 	ldw	fp,0(r11)
8020f180:	5a400117 	ldw	r9,4(r11)
8020f184:	8002a816 	blt	r16,zero,8020fc28 <___svfiprintf_internal_r+0xf78>
8020f188:	013fdfc4 	movi	r4,-129
8020f18c:	e246b03a 	or	r3,fp,r9
8020f190:	d8802315 	stw	r2,140(sp)
8020f194:	9124703a 	and	r18,r18,r4
8020f198:	18013c26 	beq	r3,zero,8020f68c <___svfiprintf_internal_r+0x9dc>
8020f19c:	0015883a 	mov	r10,zero
8020f1a0:	dc401a04 	addi	r17,sp,104
8020f1a4:	e006d0fa 	srli	r3,fp,3
8020f1a8:	4808977a 	slli	r4,r9,29
8020f1ac:	4812d0fa 	srli	r9,r9,3
8020f1b0:	e70001cc 	andi	fp,fp,7
8020f1b4:	e0800c04 	addi	r2,fp,48
8020f1b8:	8c7fffc4 	addi	r17,r17,-1
8020f1bc:	20f8b03a 	or	fp,r4,r3
8020f1c0:	88800005 	stb	r2,0(r17)
8020f1c4:	e246b03a 	or	r3,fp,r9
8020f1c8:	183ff61e 	bne	r3,zero,8020f1a4 <__reset+0xfa1ef1a4>
8020f1cc:	90c0004c 	andi	r3,r18,1
8020f1d0:	1800a526 	beq	r3,zero,8020f468 <___svfiprintf_internal_r+0x7b8>
8020f1d4:	10803fcc 	andi	r2,r2,255
8020f1d8:	1080201c 	xori	r2,r2,128
8020f1dc:	10bfe004 	addi	r2,r2,-128
8020f1e0:	00c00c04 	movi	r3,48
8020f1e4:	10ffb626 	beq	r2,r3,8020f0c0 <__reset+0xfa1ef0c0>
8020f1e8:	88ffffc5 	stb	r3,-1(r17)
8020f1ec:	d8c01e17 	ldw	r3,120(sp)
8020f1f0:	88bfffc4 	addi	r2,r17,-1
8020f1f4:	1023883a 	mov	r17,r2
8020f1f8:	1887c83a 	sub	r3,r3,r2
8020f1fc:	d8c02115 	stw	r3,132(sp)
8020f200:	003fc706 	br	8020f120 <__reset+0xfa1ef120>
8020f204:	dac02317 	ldw	r11,140(sp)
8020f208:	00c00044 	movi	r3,1
8020f20c:	d8c02015 	stw	r3,128(sp)
8020f210:	58800017 	ldw	r2,0(r11)
8020f214:	5ac00104 	addi	r11,r11,4
8020f218:	d8001d85 	stb	zero,118(sp)
8020f21c:	d8801005 	stb	r2,64(sp)
8020f220:	dac02315 	stw	r11,140(sp)
8020f224:	d8c02115 	stw	r3,132(sp)
8020f228:	dc401004 	addi	r17,sp,64
8020f22c:	0021883a 	mov	r16,zero
8020f230:	90c0008c 	andi	r3,r18,2
8020f234:	d8c02215 	stw	r3,136(sp)
8020f238:	18000326 	beq	r3,zero,8020f248 <___svfiprintf_internal_r+0x598>
8020f23c:	dac02017 	ldw	r11,128(sp)
8020f240:	5ac00084 	addi	r11,r11,2
8020f244:	dac02015 	stw	r11,128(sp)
8020f248:	90c0210c 	andi	r3,r18,132
8020f24c:	d8c02615 	stw	r3,152(sp)
8020f250:	1801131e 	bne	r3,zero,8020f6a0 <___svfiprintf_internal_r+0x9f0>
8020f254:	dac02417 	ldw	r11,144(sp)
8020f258:	d8c02017 	ldw	r3,128(sp)
8020f25c:	58f9c83a 	sub	fp,r11,r3
8020f260:	07010f0e 	bge	zero,fp,8020f6a0 <___svfiprintf_internal_r+0x9f0>
8020f264:	02400404 	movi	r9,16
8020f268:	d8c01c17 	ldw	r3,112(sp)
8020f26c:	d8801b17 	ldw	r2,108(sp)
8020f270:	4f02d60e 	bge	r9,fp,8020fdcc <___svfiprintf_internal_r+0x111c>
8020f274:	016008b4 	movhi	r5,32802
8020f278:	296d2c04 	addi	r5,r5,-19280
8020f27c:	d9402815 	stw	r5,160(sp)
8020f280:	028001c4 	movi	r10,7
8020f284:	00000306 	br	8020f294 <___svfiprintf_internal_r+0x5e4>
8020f288:	e73ffc04 	addi	fp,fp,-16
8020f28c:	42000204 	addi	r8,r8,8
8020f290:	4f00150e 	bge	r9,fp,8020f2e8 <___svfiprintf_internal_r+0x638>
8020f294:	18c00404 	addi	r3,r3,16
8020f298:	10800044 	addi	r2,r2,1
8020f29c:	45800015 	stw	r22,0(r8)
8020f2a0:	42400115 	stw	r9,4(r8)
8020f2a4:	d8c01c15 	stw	r3,112(sp)
8020f2a8:	d8801b15 	stw	r2,108(sp)
8020f2ac:	50bff60e 	bge	r10,r2,8020f288 <__reset+0xfa1ef288>
8020f2b0:	d9801a04 	addi	r6,sp,104
8020f2b4:	b80b883a 	mov	r5,r23
8020f2b8:	a809883a 	mov	r4,r21
8020f2bc:	da402c15 	stw	r9,176(sp)
8020f2c0:	da802d15 	stw	r10,180(sp)
8020f2c4:	020eae00 	call	8020eae0 <__ssprint_r>
8020f2c8:	da402c17 	ldw	r9,176(sp)
8020f2cc:	da802d17 	ldw	r10,180(sp)
8020f2d0:	1001851e 	bne	r2,zero,8020f8e8 <___svfiprintf_internal_r+0xc38>
8020f2d4:	e73ffc04 	addi	fp,fp,-16
8020f2d8:	d8c01c17 	ldw	r3,112(sp)
8020f2dc:	d8801b17 	ldw	r2,108(sp)
8020f2e0:	d811883a 	mov	r8,sp
8020f2e4:	4f3feb16 	blt	r9,fp,8020f294 <__reset+0xfa1ef294>
8020f2e8:	dac02817 	ldw	r11,160(sp)
8020f2ec:	e0c7883a 	add	r3,fp,r3
8020f2f0:	10800044 	addi	r2,r2,1
8020f2f4:	42c00015 	stw	r11,0(r8)
8020f2f8:	47000115 	stw	fp,4(r8)
8020f2fc:	d8c01c15 	stw	r3,112(sp)
8020f300:	d8801b15 	stw	r2,108(sp)
8020f304:	010001c4 	movi	r4,7
8020f308:	2081ee16 	blt	r4,r2,8020fac4 <___svfiprintf_internal_r+0xe14>
8020f30c:	42000204 	addi	r8,r8,8
8020f310:	0000e506 	br	8020f6a8 <___svfiprintf_internal_r+0x9f8>
8020f314:	21003fcc 	andi	r4,r4,255
8020f318:	2002dd1e 	bne	r4,zero,8020fe90 <___svfiprintf_internal_r+0x11e0>
8020f31c:	00a008b4 	movhi	r2,32802
8020f320:	10acbb04 	addi	r2,r2,-19732
8020f324:	d8802915 	stw	r2,164(sp)
8020f328:	9080080c 	andi	r2,r18,32
8020f32c:	103f461e 	bne	r2,zero,8020f048 <__reset+0xfa1ef048>
8020f330:	9080040c 	andi	r2,r18,16
8020f334:	10022e1e 	bne	r2,zero,8020fbf0 <___svfiprintf_internal_r+0xf40>
8020f338:	9080100c 	andi	r2,r18,64
8020f33c:	dac02317 	ldw	r11,140(sp)
8020f340:	10027326 	beq	r2,zero,8020fd10 <___svfiprintf_internal_r+0x1060>
8020f344:	5f00000b 	ldhu	fp,0(r11)
8020f348:	5ac00104 	addi	r11,r11,4
8020f34c:	0013883a 	mov	r9,zero
8020f350:	dac02315 	stw	r11,140(sp)
8020f354:	003f4106 	br	8020f05c <__reset+0xfa1ef05c>
8020f358:	21003fcc 	andi	r4,r4,255
8020f35c:	2002e11e 	bne	r4,zero,8020fee4 <___svfiprintf_internal_r+0x1234>
8020f360:	9080080c 	andi	r2,r18,32
8020f364:	1002011e 	bne	r2,zero,8020fb6c <___svfiprintf_internal_r+0xebc>
8020f368:	9080040c 	andi	r2,r18,16
8020f36c:	10023e1e 	bne	r2,zero,8020fc68 <___svfiprintf_internal_r+0xfb8>
8020f370:	9480100c 	andi	r18,r18,64
8020f374:	90023c26 	beq	r18,zero,8020fc68 <___svfiprintf_internal_r+0xfb8>
8020f378:	dac02317 	ldw	r11,140(sp)
8020f37c:	58800017 	ldw	r2,0(r11)
8020f380:	5ac00104 	addi	r11,r11,4
8020f384:	dac02315 	stw	r11,140(sp)
8020f388:	dac02517 	ldw	r11,148(sp)
8020f38c:	12c0000d 	sth	r11,0(r2)
8020f390:	003e6e06 	br	8020ed4c <__reset+0xfa1eed4c>
8020f394:	98c00007 	ldb	r3,0(r19)
8020f398:	1a422926 	beq	r3,r9,8020fc40 <___svfiprintf_internal_r+0xf90>
8020f39c:	94800414 	ori	r18,r18,16
8020f3a0:	003e9206 	br	8020edec <__reset+0xfa1eedec>
8020f3a4:	94801014 	ori	r18,r18,64
8020f3a8:	98c00007 	ldb	r3,0(r19)
8020f3ac:	003e8f06 	br	8020edec <__reset+0xfa1eedec>
8020f3b0:	21003fcc 	andi	r4,r4,255
8020f3b4:	2002c71e 	bne	r4,zero,8020fed4 <___svfiprintf_internal_r+0x1224>
8020f3b8:	9080080c 	andi	r2,r18,32
8020f3bc:	10004926 	beq	r2,zero,8020f4e4 <___svfiprintf_internal_r+0x834>
8020f3c0:	dac02317 	ldw	r11,140(sp)
8020f3c4:	58800117 	ldw	r2,4(r11)
8020f3c8:	5f000017 	ldw	fp,0(r11)
8020f3cc:	5ac00204 	addi	r11,r11,8
8020f3d0:	dac02315 	stw	r11,140(sp)
8020f3d4:	1013883a 	mov	r9,r2
8020f3d8:	10004b16 	blt	r2,zero,8020f508 <___svfiprintf_internal_r+0x858>
8020f3dc:	da801d83 	ldbu	r10,118(sp)
8020f3e0:	8001cb16 	blt	r16,zero,8020fb10 <___svfiprintf_internal_r+0xe60>
8020f3e4:	00ffdfc4 	movi	r3,-129
8020f3e8:	e244b03a 	or	r2,fp,r9
8020f3ec:	90e4703a 	and	r18,r18,r3
8020f3f0:	103f4726 	beq	r2,zero,8020f110 <__reset+0xfa1ef110>
8020f3f4:	48008c26 	beq	r9,zero,8020f628 <___svfiprintf_internal_r+0x978>
8020f3f8:	dc802015 	stw	r18,128(sp)
8020f3fc:	dc002115 	stw	r16,132(sp)
8020f400:	dc401a04 	addi	r17,sp,104
8020f404:	e021883a 	mov	r16,fp
8020f408:	da002215 	stw	r8,136(sp)
8020f40c:	5039883a 	mov	fp,r10
8020f410:	4825883a 	mov	r18,r9
8020f414:	8009883a 	mov	r4,r16
8020f418:	900b883a 	mov	r5,r18
8020f41c:	01800284 	movi	r6,10
8020f420:	000f883a 	mov	r7,zero
8020f424:	02123e00 	call	802123e0 <__umoddi3>
8020f428:	10800c04 	addi	r2,r2,48
8020f42c:	8c7fffc4 	addi	r17,r17,-1
8020f430:	8009883a 	mov	r4,r16
8020f434:	900b883a 	mov	r5,r18
8020f438:	88800005 	stb	r2,0(r17)
8020f43c:	01800284 	movi	r6,10
8020f440:	000f883a 	mov	r7,zero
8020f444:	0211e680 	call	80211e68 <__udivdi3>
8020f448:	1021883a 	mov	r16,r2
8020f44c:	10c4b03a 	or	r2,r2,r3
8020f450:	1825883a 	mov	r18,r3
8020f454:	103fef1e 	bne	r2,zero,8020f414 <__reset+0xfa1ef414>
8020f458:	dc802017 	ldw	r18,128(sp)
8020f45c:	dc002117 	ldw	r16,132(sp)
8020f460:	da002217 	ldw	r8,136(sp)
8020f464:	e015883a 	mov	r10,fp
8020f468:	d8c01e17 	ldw	r3,120(sp)
8020f46c:	1c47c83a 	sub	r3,r3,r17
8020f470:	d8c02115 	stw	r3,132(sp)
8020f474:	003f2a06 	br	8020f120 <__reset+0xfa1ef120>
8020f478:	dac02317 	ldw	r11,140(sp)
8020f47c:	d8001d85 	stb	zero,118(sp)
8020f480:	5c400017 	ldw	r17,0(r11)
8020f484:	5f000104 	addi	fp,r11,4
8020f488:	88022f26 	beq	r17,zero,8020fd48 <___svfiprintf_internal_r+0x1098>
8020f48c:	80022516 	blt	r16,zero,8020fd24 <___svfiprintf_internal_r+0x1074>
8020f490:	800d883a 	mov	r6,r16
8020f494:	000b883a 	mov	r5,zero
8020f498:	8809883a 	mov	r4,r17
8020f49c:	da002c15 	stw	r8,176(sp)
8020f4a0:	020cf380 	call	8020cf38 <memchr>
8020f4a4:	da002c17 	ldw	r8,176(sp)
8020f4a8:	10026426 	beq	r2,zero,8020fe3c <___svfiprintf_internal_r+0x118c>
8020f4ac:	1445c83a 	sub	r2,r2,r17
8020f4b0:	d8802115 	stw	r2,132(sp)
8020f4b4:	da801d83 	ldbu	r10,118(sp)
8020f4b8:	df002315 	stw	fp,140(sp)
8020f4bc:	0021883a 	mov	r16,zero
8020f4c0:	003f1706 	br	8020f120 <__reset+0xfa1ef120>
8020f4c4:	94800814 	ori	r18,r18,32
8020f4c8:	98c00007 	ldb	r3,0(r19)
8020f4cc:	003e4706 	br	8020edec <__reset+0xfa1eedec>
8020f4d0:	21003fcc 	andi	r4,r4,255
8020f4d4:	2002701e 	bne	r4,zero,8020fe98 <___svfiprintf_internal_r+0x11e8>
8020f4d8:	94800414 	ori	r18,r18,16
8020f4dc:	9080080c 	andi	r2,r18,32
8020f4e0:	103fb71e 	bne	r2,zero,8020f3c0 <__reset+0xfa1ef3c0>
8020f4e4:	9080040c 	andi	r2,r18,16
8020f4e8:	1001ab26 	beq	r2,zero,8020fb98 <___svfiprintf_internal_r+0xee8>
8020f4ec:	dac02317 	ldw	r11,140(sp)
8020f4f0:	5f000017 	ldw	fp,0(r11)
8020f4f4:	5ac00104 	addi	r11,r11,4
8020f4f8:	dac02315 	stw	r11,140(sp)
8020f4fc:	e013d7fa 	srai	r9,fp,31
8020f500:	4805883a 	mov	r2,r9
8020f504:	103fb50e 	bge	r2,zero,8020f3dc <__reset+0xfa1ef3dc>
8020f508:	0739c83a 	sub	fp,zero,fp
8020f50c:	02800b44 	movi	r10,45
8020f510:	e004c03a 	cmpne	r2,fp,zero
8020f514:	0253c83a 	sub	r9,zero,r9
8020f518:	da801d85 	stb	r10,118(sp)
8020f51c:	4893c83a 	sub	r9,r9,r2
8020f520:	80023016 	blt	r16,zero,8020fde4 <___svfiprintf_internal_r+0x1134>
8020f524:	00bfdfc4 	movi	r2,-129
8020f528:	90a4703a 	and	r18,r18,r2
8020f52c:	483fb21e 	bne	r9,zero,8020f3f8 <__reset+0xfa1ef3f8>
8020f530:	00003d06 	br	8020f628 <___svfiprintf_internal_r+0x978>
8020f534:	9817883a 	mov	r11,r19
8020f538:	d8002415 	stw	zero,144(sp)
8020f53c:	18bff404 	addi	r2,r3,-48
8020f540:	0019883a 	mov	r12,zero
8020f544:	58c00007 	ldb	r3,0(r11)
8020f548:	630002a4 	muli	r12,r12,10
8020f54c:	9cc00044 	addi	r19,r19,1
8020f550:	9817883a 	mov	r11,r19
8020f554:	1319883a 	add	r12,r2,r12
8020f558:	18bff404 	addi	r2,r3,-48
8020f55c:	30bff92e 	bgeu	r6,r2,8020f544 <__reset+0xfa1ef544>
8020f560:	db002415 	stw	r12,144(sp)
8020f564:	18bff804 	addi	r2,r3,-32
8020f568:	28be232e 	bgeu	r5,r2,8020edf8 <__reset+0xfa1eedf8>
8020f56c:	21003fcc 	andi	r4,r4,255
8020f570:	20024b1e 	bne	r4,zero,8020fea0 <___svfiprintf_internal_r+0x11f0>
8020f574:	1800d626 	beq	r3,zero,8020f8d0 <___svfiprintf_internal_r+0xc20>
8020f578:	02c00044 	movi	r11,1
8020f57c:	dac02015 	stw	r11,128(sp)
8020f580:	d8c01005 	stb	r3,64(sp)
8020f584:	d8001d85 	stb	zero,118(sp)
8020f588:	dac02115 	stw	r11,132(sp)
8020f58c:	dc401004 	addi	r17,sp,64
8020f590:	003f2606 	br	8020f22c <__reset+0xfa1ef22c>
8020f594:	94802014 	ori	r18,r18,128
8020f598:	98c00007 	ldb	r3,0(r19)
8020f59c:	003e1306 	br	8020edec <__reset+0xfa1eedec>
8020f5a0:	98c00007 	ldb	r3,0(r19)
8020f5a4:	9ac00044 	addi	r11,r19,1
8020f5a8:	1a822b26 	beq	r3,r10,8020fe58 <___svfiprintf_internal_r+0x11a8>
8020f5ac:	18bff404 	addi	r2,r3,-48
8020f5b0:	0021883a 	mov	r16,zero
8020f5b4:	30821e36 	bltu	r6,r2,8020fe30 <___svfiprintf_internal_r+0x1180>
8020f5b8:	58c00007 	ldb	r3,0(r11)
8020f5bc:	840002a4 	muli	r16,r16,10
8020f5c0:	5cc00044 	addi	r19,r11,1
8020f5c4:	9817883a 	mov	r11,r19
8020f5c8:	80a1883a 	add	r16,r16,r2
8020f5cc:	18bff404 	addi	r2,r3,-48
8020f5d0:	30bff92e 	bgeu	r6,r2,8020f5b8 <__reset+0xfa1ef5b8>
8020f5d4:	803e060e 	bge	r16,zero,8020edf0 <__reset+0xfa1eedf0>
8020f5d8:	043fffc4 	movi	r16,-1
8020f5dc:	003e0406 	br	8020edf0 <__reset+0xfa1eedf0>
8020f5e0:	21003fcc 	andi	r4,r4,255
8020f5e4:	2002371e 	bne	r4,zero,8020fec4 <___svfiprintf_internal_r+0x1214>
8020f5e8:	94800414 	ori	r18,r18,16
8020f5ec:	9080080c 	andi	r2,r18,32
8020f5f0:	103ebb1e 	bne	r2,zero,8020f0e0 <__reset+0xfa1ef0e0>
8020f5f4:	9080040c 	andi	r2,r18,16
8020f5f8:	10013b26 	beq	r2,zero,8020fae8 <___svfiprintf_internal_r+0xe38>
8020f5fc:	dac02317 	ldw	r11,140(sp)
8020f600:	d8001d85 	stb	zero,118(sp)
8020f604:	0013883a 	mov	r9,zero
8020f608:	58800104 	addi	r2,r11,4
8020f60c:	5f000017 	ldw	fp,0(r11)
8020f610:	80013d16 	blt	r16,zero,8020fb08 <___svfiprintf_internal_r+0xe58>
8020f614:	00ffdfc4 	movi	r3,-129
8020f618:	d8802315 	stw	r2,140(sp)
8020f61c:	90e4703a 	and	r18,r18,r3
8020f620:	0015883a 	mov	r10,zero
8020f624:	e03eba26 	beq	fp,zero,8020f110 <__reset+0xfa1ef110>
8020f628:	00800244 	movi	r2,9
8020f62c:	173f7236 	bltu	r2,fp,8020f3f8 <__reset+0xfa1ef3f8>
8020f630:	dac02b17 	ldw	r11,172(sp)
8020f634:	e7000c04 	addi	fp,fp,48
8020f638:	df0019c5 	stb	fp,103(sp)
8020f63c:	dac02115 	stw	r11,132(sp)
8020f640:	dc4019c4 	addi	r17,sp,103
8020f644:	003eb606 	br	8020f120 <__reset+0xfa1ef120>
8020f648:	21003fcc 	andi	r4,r4,255
8020f64c:	20021f1e 	bne	r4,zero,8020fecc <___svfiprintf_internal_r+0x121c>
8020f650:	94800414 	ori	r18,r18,16
8020f654:	9080080c 	andi	r2,r18,32
8020f658:	103ec51e 	bne	r2,zero,8020f170 <__reset+0xfa1ef170>
8020f65c:	9080040c 	andi	r2,r18,16
8020f660:	10016926 	beq	r2,zero,8020fc08 <___svfiprintf_internal_r+0xf58>
8020f664:	dac02317 	ldw	r11,140(sp)
8020f668:	d8001d85 	stb	zero,118(sp)
8020f66c:	0013883a 	mov	r9,zero
8020f670:	58800104 	addi	r2,r11,4
8020f674:	5f000017 	ldw	fp,0(r11)
8020f678:	80016b16 	blt	r16,zero,8020fc28 <___svfiprintf_internal_r+0xf78>
8020f67c:	00ffdfc4 	movi	r3,-129
8020f680:	d8802315 	stw	r2,140(sp)
8020f684:	90e4703a 	and	r18,r18,r3
8020f688:	e03ec41e 	bne	fp,zero,8020f19c <__reset+0xfa1ef19c>
8020f68c:	0015883a 	mov	r10,zero
8020f690:	8001c226 	beq	r16,zero,8020fd9c <___svfiprintf_internal_r+0x10ec>
8020f694:	0039883a 	mov	fp,zero
8020f698:	0013883a 	mov	r9,zero
8020f69c:	003ec006 	br	8020f1a0 <__reset+0xfa1ef1a0>
8020f6a0:	d8c01c17 	ldw	r3,112(sp)
8020f6a4:	d8801b17 	ldw	r2,108(sp)
8020f6a8:	d9001d87 	ldb	r4,118(sp)
8020f6ac:	20000b26 	beq	r4,zero,8020f6dc <___svfiprintf_internal_r+0xa2c>
8020f6b0:	d9001d84 	addi	r4,sp,118
8020f6b4:	18c00044 	addi	r3,r3,1
8020f6b8:	10800044 	addi	r2,r2,1
8020f6bc:	41000015 	stw	r4,0(r8)
8020f6c0:	01000044 	movi	r4,1
8020f6c4:	41000115 	stw	r4,4(r8)
8020f6c8:	d8c01c15 	stw	r3,112(sp)
8020f6cc:	d8801b15 	stw	r2,108(sp)
8020f6d0:	010001c4 	movi	r4,7
8020f6d4:	2080e116 	blt	r4,r2,8020fa5c <___svfiprintf_internal_r+0xdac>
8020f6d8:	42000204 	addi	r8,r8,8
8020f6dc:	dac02217 	ldw	r11,136(sp)
8020f6e0:	58000b26 	beq	r11,zero,8020f710 <___svfiprintf_internal_r+0xa60>
8020f6e4:	d9001d04 	addi	r4,sp,116
8020f6e8:	18c00084 	addi	r3,r3,2
8020f6ec:	10800044 	addi	r2,r2,1
8020f6f0:	41000015 	stw	r4,0(r8)
8020f6f4:	01000084 	movi	r4,2
8020f6f8:	41000115 	stw	r4,4(r8)
8020f6fc:	d8c01c15 	stw	r3,112(sp)
8020f700:	d8801b15 	stw	r2,108(sp)
8020f704:	010001c4 	movi	r4,7
8020f708:	2080dd16 	blt	r4,r2,8020fa80 <___svfiprintf_internal_r+0xdd0>
8020f70c:	42000204 	addi	r8,r8,8
8020f710:	dac02617 	ldw	r11,152(sp)
8020f714:	01002004 	movi	r4,128
8020f718:	59008426 	beq	r11,r4,8020f92c <___svfiprintf_internal_r+0xc7c>
8020f71c:	dac02117 	ldw	r11,132(sp)
8020f720:	82e1c83a 	sub	r16,r16,r11
8020f724:	0400270e 	bge	zero,r16,8020f7c4 <___svfiprintf_internal_r+0xb14>
8020f728:	01c00404 	movi	r7,16
8020f72c:	3c016a0e 	bge	r7,r16,8020fcd8 <___svfiprintf_internal_r+0x1028>
8020f730:	016008b4 	movhi	r5,32802
8020f734:	296d2804 	addi	r5,r5,-19296
8020f738:	d9402215 	stw	r5,136(sp)
8020f73c:	070001c4 	movi	fp,7
8020f740:	00000306 	br	8020f750 <___svfiprintf_internal_r+0xaa0>
8020f744:	843ffc04 	addi	r16,r16,-16
8020f748:	42000204 	addi	r8,r8,8
8020f74c:	3c00130e 	bge	r7,r16,8020f79c <___svfiprintf_internal_r+0xaec>
8020f750:	18c00404 	addi	r3,r3,16
8020f754:	10800044 	addi	r2,r2,1
8020f758:	45000015 	stw	r20,0(r8)
8020f75c:	41c00115 	stw	r7,4(r8)
8020f760:	d8c01c15 	stw	r3,112(sp)
8020f764:	d8801b15 	stw	r2,108(sp)
8020f768:	e0bff60e 	bge	fp,r2,8020f744 <__reset+0xfa1ef744>
8020f76c:	d9801a04 	addi	r6,sp,104
8020f770:	b80b883a 	mov	r5,r23
8020f774:	a809883a 	mov	r4,r21
8020f778:	d9c02c15 	stw	r7,176(sp)
8020f77c:	020eae00 	call	8020eae0 <__ssprint_r>
8020f780:	d9c02c17 	ldw	r7,176(sp)
8020f784:	1000581e 	bne	r2,zero,8020f8e8 <___svfiprintf_internal_r+0xc38>
8020f788:	843ffc04 	addi	r16,r16,-16
8020f78c:	d8c01c17 	ldw	r3,112(sp)
8020f790:	d8801b17 	ldw	r2,108(sp)
8020f794:	d811883a 	mov	r8,sp
8020f798:	3c3fed16 	blt	r7,r16,8020f750 <__reset+0xfa1ef750>
8020f79c:	dac02217 	ldw	r11,136(sp)
8020f7a0:	1c07883a 	add	r3,r3,r16
8020f7a4:	10800044 	addi	r2,r2,1
8020f7a8:	42c00015 	stw	r11,0(r8)
8020f7ac:	44000115 	stw	r16,4(r8)
8020f7b0:	d8c01c15 	stw	r3,112(sp)
8020f7b4:	d8801b15 	stw	r2,108(sp)
8020f7b8:	010001c4 	movi	r4,7
8020f7bc:	20809e16 	blt	r4,r2,8020fa38 <___svfiprintf_internal_r+0xd88>
8020f7c0:	42000204 	addi	r8,r8,8
8020f7c4:	dac02117 	ldw	r11,132(sp)
8020f7c8:	10800044 	addi	r2,r2,1
8020f7cc:	44400015 	stw	r17,0(r8)
8020f7d0:	58c7883a 	add	r3,r11,r3
8020f7d4:	42c00115 	stw	r11,4(r8)
8020f7d8:	d8c01c15 	stw	r3,112(sp)
8020f7dc:	d8801b15 	stw	r2,108(sp)
8020f7e0:	010001c4 	movi	r4,7
8020f7e4:	20807f16 	blt	r4,r2,8020f9e4 <___svfiprintf_internal_r+0xd34>
8020f7e8:	42000204 	addi	r8,r8,8
8020f7ec:	9480010c 	andi	r18,r18,4
8020f7f0:	90002926 	beq	r18,zero,8020f898 <___svfiprintf_internal_r+0xbe8>
8020f7f4:	dac02417 	ldw	r11,144(sp)
8020f7f8:	d8802017 	ldw	r2,128(sp)
8020f7fc:	58a1c83a 	sub	r16,r11,r2
8020f800:	0400250e 	bge	zero,r16,8020f898 <___svfiprintf_internal_r+0xbe8>
8020f804:	04400404 	movi	r17,16
8020f808:	d8801b17 	ldw	r2,108(sp)
8020f80c:	8c017c0e 	bge	r17,r16,8020fe00 <___svfiprintf_internal_r+0x1150>
8020f810:	016008b4 	movhi	r5,32802
8020f814:	296d2c04 	addi	r5,r5,-19280
8020f818:	d9402815 	stw	r5,160(sp)
8020f81c:	048001c4 	movi	r18,7
8020f820:	00000306 	br	8020f830 <___svfiprintf_internal_r+0xb80>
8020f824:	843ffc04 	addi	r16,r16,-16
8020f828:	42000204 	addi	r8,r8,8
8020f82c:	8c00110e 	bge	r17,r16,8020f874 <___svfiprintf_internal_r+0xbc4>
8020f830:	18c00404 	addi	r3,r3,16
8020f834:	10800044 	addi	r2,r2,1
8020f838:	45800015 	stw	r22,0(r8)
8020f83c:	44400115 	stw	r17,4(r8)
8020f840:	d8c01c15 	stw	r3,112(sp)
8020f844:	d8801b15 	stw	r2,108(sp)
8020f848:	90bff60e 	bge	r18,r2,8020f824 <__reset+0xfa1ef824>
8020f84c:	d9801a04 	addi	r6,sp,104
8020f850:	b80b883a 	mov	r5,r23
8020f854:	a809883a 	mov	r4,r21
8020f858:	020eae00 	call	8020eae0 <__ssprint_r>
8020f85c:	1000221e 	bne	r2,zero,8020f8e8 <___svfiprintf_internal_r+0xc38>
8020f860:	843ffc04 	addi	r16,r16,-16
8020f864:	d8c01c17 	ldw	r3,112(sp)
8020f868:	d8801b17 	ldw	r2,108(sp)
8020f86c:	d811883a 	mov	r8,sp
8020f870:	8c3fef16 	blt	r17,r16,8020f830 <__reset+0xfa1ef830>
8020f874:	dac02817 	ldw	r11,160(sp)
8020f878:	1c07883a 	add	r3,r3,r16
8020f87c:	10800044 	addi	r2,r2,1
8020f880:	42c00015 	stw	r11,0(r8)
8020f884:	44000115 	stw	r16,4(r8)
8020f888:	d8c01c15 	stw	r3,112(sp)
8020f88c:	d8801b15 	stw	r2,108(sp)
8020f890:	010001c4 	movi	r4,7
8020f894:	2080aa16 	blt	r4,r2,8020fb40 <___svfiprintf_internal_r+0xe90>
8020f898:	d8802417 	ldw	r2,144(sp)
8020f89c:	dac02017 	ldw	r11,128(sp)
8020f8a0:	12c0010e 	bge	r2,r11,8020f8a8 <___svfiprintf_internal_r+0xbf8>
8020f8a4:	5805883a 	mov	r2,r11
8020f8a8:	dac02517 	ldw	r11,148(sp)
8020f8ac:	5897883a 	add	r11,r11,r2
8020f8b0:	dac02515 	stw	r11,148(sp)
8020f8b4:	1800531e 	bne	r3,zero,8020fa04 <___svfiprintf_internal_r+0xd54>
8020f8b8:	98800007 	ldb	r2,0(r19)
8020f8bc:	d8001b15 	stw	zero,108(sp)
8020f8c0:	d811883a 	mov	r8,sp
8020f8c4:	103d231e 	bne	r2,zero,8020ed54 <__reset+0xfa1eed54>
8020f8c8:	9823883a 	mov	r17,r19
8020f8cc:	003d3906 	br	8020edb4 <__reset+0xfa1eedb4>
8020f8d0:	d8801c17 	ldw	r2,112(sp)
8020f8d4:	10000426 	beq	r2,zero,8020f8e8 <___svfiprintf_internal_r+0xc38>
8020f8d8:	d9402717 	ldw	r5,156(sp)
8020f8dc:	d9002a17 	ldw	r4,168(sp)
8020f8e0:	d9801a04 	addi	r6,sp,104
8020f8e4:	020eae00 	call	8020eae0 <__ssprint_r>
8020f8e8:	dac02717 	ldw	r11,156(sp)
8020f8ec:	d8802517 	ldw	r2,148(sp)
8020f8f0:	58c0030b 	ldhu	r3,12(r11)
8020f8f4:	18c0100c 	andi	r3,r3,64
8020f8f8:	1801381e 	bne	r3,zero,8020fddc <___svfiprintf_internal_r+0x112c>
8020f8fc:	dfc03717 	ldw	ra,220(sp)
8020f900:	df003617 	ldw	fp,216(sp)
8020f904:	ddc03517 	ldw	r23,212(sp)
8020f908:	dd803417 	ldw	r22,208(sp)
8020f90c:	dd403317 	ldw	r21,204(sp)
8020f910:	dd003217 	ldw	r20,200(sp)
8020f914:	dcc03117 	ldw	r19,196(sp)
8020f918:	dc803017 	ldw	r18,192(sp)
8020f91c:	dc402f17 	ldw	r17,188(sp)
8020f920:	dc002e17 	ldw	r16,184(sp)
8020f924:	dec03804 	addi	sp,sp,224
8020f928:	f800283a 	ret
8020f92c:	dac02417 	ldw	r11,144(sp)
8020f930:	d9002017 	ldw	r4,128(sp)
8020f934:	5939c83a 	sub	fp,r11,r4
8020f938:	073f780e 	bge	zero,fp,8020f71c <__reset+0xfa1ef71c>
8020f93c:	02400404 	movi	r9,16
8020f940:	4f01370e 	bge	r9,fp,8020fe20 <___svfiprintf_internal_r+0x1170>
8020f944:	02e008b4 	movhi	r11,32802
8020f948:	5aed2804 	addi	r11,r11,-19296
8020f94c:	dac02215 	stw	r11,136(sp)
8020f950:	028001c4 	movi	r10,7
8020f954:	00000306 	br	8020f964 <___svfiprintf_internal_r+0xcb4>
8020f958:	e73ffc04 	addi	fp,fp,-16
8020f95c:	42000204 	addi	r8,r8,8
8020f960:	4f00150e 	bge	r9,fp,8020f9b8 <___svfiprintf_internal_r+0xd08>
8020f964:	18c00404 	addi	r3,r3,16
8020f968:	10800044 	addi	r2,r2,1
8020f96c:	45000015 	stw	r20,0(r8)
8020f970:	42400115 	stw	r9,4(r8)
8020f974:	d8c01c15 	stw	r3,112(sp)
8020f978:	d8801b15 	stw	r2,108(sp)
8020f97c:	50bff60e 	bge	r10,r2,8020f958 <__reset+0xfa1ef958>
8020f980:	d9801a04 	addi	r6,sp,104
8020f984:	b80b883a 	mov	r5,r23
8020f988:	a809883a 	mov	r4,r21
8020f98c:	da402c15 	stw	r9,176(sp)
8020f990:	da802d15 	stw	r10,180(sp)
8020f994:	020eae00 	call	8020eae0 <__ssprint_r>
8020f998:	da402c17 	ldw	r9,176(sp)
8020f99c:	da802d17 	ldw	r10,180(sp)
8020f9a0:	103fd11e 	bne	r2,zero,8020f8e8 <__reset+0xfa1ef8e8>
8020f9a4:	e73ffc04 	addi	fp,fp,-16
8020f9a8:	d8c01c17 	ldw	r3,112(sp)
8020f9ac:	d8801b17 	ldw	r2,108(sp)
8020f9b0:	d811883a 	mov	r8,sp
8020f9b4:	4f3feb16 	blt	r9,fp,8020f964 <__reset+0xfa1ef964>
8020f9b8:	dac02217 	ldw	r11,136(sp)
8020f9bc:	1f07883a 	add	r3,r3,fp
8020f9c0:	10800044 	addi	r2,r2,1
8020f9c4:	42c00015 	stw	r11,0(r8)
8020f9c8:	47000115 	stw	fp,4(r8)
8020f9cc:	d8c01c15 	stw	r3,112(sp)
8020f9d0:	d8801b15 	stw	r2,108(sp)
8020f9d4:	010001c4 	movi	r4,7
8020f9d8:	2080b616 	blt	r4,r2,8020fcb4 <___svfiprintf_internal_r+0x1004>
8020f9dc:	42000204 	addi	r8,r8,8
8020f9e0:	003f4e06 	br	8020f71c <__reset+0xfa1ef71c>
8020f9e4:	d9801a04 	addi	r6,sp,104
8020f9e8:	b80b883a 	mov	r5,r23
8020f9ec:	a809883a 	mov	r4,r21
8020f9f0:	020eae00 	call	8020eae0 <__ssprint_r>
8020f9f4:	103fbc1e 	bne	r2,zero,8020f8e8 <__reset+0xfa1ef8e8>
8020f9f8:	d8c01c17 	ldw	r3,112(sp)
8020f9fc:	d811883a 	mov	r8,sp
8020fa00:	003f7a06 	br	8020f7ec <__reset+0xfa1ef7ec>
8020fa04:	d9801a04 	addi	r6,sp,104
8020fa08:	b80b883a 	mov	r5,r23
8020fa0c:	a809883a 	mov	r4,r21
8020fa10:	020eae00 	call	8020eae0 <__ssprint_r>
8020fa14:	103fa826 	beq	r2,zero,8020f8b8 <__reset+0xfa1ef8b8>
8020fa18:	003fb306 	br	8020f8e8 <__reset+0xfa1ef8e8>
8020fa1c:	d9801a04 	addi	r6,sp,104
8020fa20:	b80b883a 	mov	r5,r23
8020fa24:	a809883a 	mov	r4,r21
8020fa28:	020eae00 	call	8020eae0 <__ssprint_r>
8020fa2c:	103fae1e 	bne	r2,zero,8020f8e8 <__reset+0xfa1ef8e8>
8020fa30:	d811883a 	mov	r8,sp
8020fa34:	003cdc06 	br	8020eda8 <__reset+0xfa1eeda8>
8020fa38:	d9801a04 	addi	r6,sp,104
8020fa3c:	b80b883a 	mov	r5,r23
8020fa40:	a809883a 	mov	r4,r21
8020fa44:	020eae00 	call	8020eae0 <__ssprint_r>
8020fa48:	103fa71e 	bne	r2,zero,8020f8e8 <__reset+0xfa1ef8e8>
8020fa4c:	d8c01c17 	ldw	r3,112(sp)
8020fa50:	d8801b17 	ldw	r2,108(sp)
8020fa54:	d811883a 	mov	r8,sp
8020fa58:	003f5a06 	br	8020f7c4 <__reset+0xfa1ef7c4>
8020fa5c:	d9801a04 	addi	r6,sp,104
8020fa60:	b80b883a 	mov	r5,r23
8020fa64:	a809883a 	mov	r4,r21
8020fa68:	020eae00 	call	8020eae0 <__ssprint_r>
8020fa6c:	103f9e1e 	bne	r2,zero,8020f8e8 <__reset+0xfa1ef8e8>
8020fa70:	d8c01c17 	ldw	r3,112(sp)
8020fa74:	d8801b17 	ldw	r2,108(sp)
8020fa78:	d811883a 	mov	r8,sp
8020fa7c:	003f1706 	br	8020f6dc <__reset+0xfa1ef6dc>
8020fa80:	d9801a04 	addi	r6,sp,104
8020fa84:	b80b883a 	mov	r5,r23
8020fa88:	a809883a 	mov	r4,r21
8020fa8c:	020eae00 	call	8020eae0 <__ssprint_r>
8020fa90:	103f951e 	bne	r2,zero,8020f8e8 <__reset+0xfa1ef8e8>
8020fa94:	d8c01c17 	ldw	r3,112(sp)
8020fa98:	d8801b17 	ldw	r2,108(sp)
8020fa9c:	d811883a 	mov	r8,sp
8020faa0:	003f1b06 	br	8020f710 <__reset+0xfa1ef710>
8020faa4:	d8001d85 	stb	zero,118(sp)
8020faa8:	80007b16 	blt	r16,zero,8020fc98 <___svfiprintf_internal_r+0xfe8>
8020faac:	00ffdfc4 	movi	r3,-129
8020fab0:	e244b03a 	or	r2,fp,r9
8020fab4:	90e4703a 	and	r18,r18,r3
8020fab8:	103d7026 	beq	r2,zero,8020f07c <__reset+0xfa1ef07c>
8020fabc:	0015883a 	mov	r10,zero
8020fac0:	003d7206 	br	8020f08c <__reset+0xfa1ef08c>
8020fac4:	d9801a04 	addi	r6,sp,104
8020fac8:	b80b883a 	mov	r5,r23
8020facc:	a809883a 	mov	r4,r21
8020fad0:	020eae00 	call	8020eae0 <__ssprint_r>
8020fad4:	103f841e 	bne	r2,zero,8020f8e8 <__reset+0xfa1ef8e8>
8020fad8:	d8c01c17 	ldw	r3,112(sp)
8020fadc:	d8801b17 	ldw	r2,108(sp)
8020fae0:	d811883a 	mov	r8,sp
8020fae4:	003ef006 	br	8020f6a8 <__reset+0xfa1ef6a8>
8020fae8:	9080100c 	andi	r2,r18,64
8020faec:	d8001d85 	stb	zero,118(sp)
8020faf0:	dac02317 	ldw	r11,140(sp)
8020faf4:	10008126 	beq	r2,zero,8020fcfc <___svfiprintf_internal_r+0x104c>
8020faf8:	58800104 	addi	r2,r11,4
8020fafc:	5f00000b 	ldhu	fp,0(r11)
8020fb00:	0013883a 	mov	r9,zero
8020fb04:	803ec30e 	bge	r16,zero,8020f614 <__reset+0xfa1ef614>
8020fb08:	d8802315 	stw	r2,140(sp)
8020fb0c:	0015883a 	mov	r10,zero
8020fb10:	e244b03a 	or	r2,fp,r9
8020fb14:	103e371e 	bne	r2,zero,8020f3f4 <__reset+0xfa1ef3f4>
8020fb18:	00800044 	movi	r2,1
8020fb1c:	10803fcc 	andi	r2,r2,255
8020fb20:	00c00044 	movi	r3,1
8020fb24:	10c06126 	beq	r2,r3,8020fcac <___svfiprintf_internal_r+0xffc>
8020fb28:	00c00084 	movi	r3,2
8020fb2c:	10fd5526 	beq	r2,r3,8020f084 <__reset+0xfa1ef084>
8020fb30:	003ed806 	br	8020f694 <__reset+0xfa1ef694>
8020fb34:	d8802315 	stw	r2,140(sp)
8020fb38:	98c00007 	ldb	r3,0(r19)
8020fb3c:	003cab06 	br	8020edec <__reset+0xfa1eedec>
8020fb40:	d9801a04 	addi	r6,sp,104
8020fb44:	b80b883a 	mov	r5,r23
8020fb48:	a809883a 	mov	r4,r21
8020fb4c:	020eae00 	call	8020eae0 <__ssprint_r>
8020fb50:	103f651e 	bne	r2,zero,8020f8e8 <__reset+0xfa1ef8e8>
8020fb54:	d8c01c17 	ldw	r3,112(sp)
8020fb58:	003f4f06 	br	8020f898 <__reset+0xfa1ef898>
8020fb5c:	00a008b4 	movhi	r2,32802
8020fb60:	10acc004 	addi	r2,r2,-19712
8020fb64:	d8802915 	stw	r2,164(sp)
8020fb68:	003d4406 	br	8020f07c <__reset+0xfa1ef07c>
8020fb6c:	dac02317 	ldw	r11,140(sp)
8020fb70:	58800017 	ldw	r2,0(r11)
8020fb74:	dac02517 	ldw	r11,148(sp)
8020fb78:	5807d7fa 	srai	r3,r11,31
8020fb7c:	dac02317 	ldw	r11,140(sp)
8020fb80:	10c00115 	stw	r3,4(r2)
8020fb84:	5ac00104 	addi	r11,r11,4
8020fb88:	dac02315 	stw	r11,140(sp)
8020fb8c:	dac02517 	ldw	r11,148(sp)
8020fb90:	12c00015 	stw	r11,0(r2)
8020fb94:	003c6d06 	br	8020ed4c <__reset+0xfa1eed4c>
8020fb98:	9080100c 	andi	r2,r18,64
8020fb9c:	dac02317 	ldw	r11,140(sp)
8020fba0:	103e5326 	beq	r2,zero,8020f4f0 <__reset+0xfa1ef4f0>
8020fba4:	5f00000f 	ldh	fp,0(r11)
8020fba8:	5ac00104 	addi	r11,r11,4
8020fbac:	dac02315 	stw	r11,140(sp)
8020fbb0:	e013d7fa 	srai	r9,fp,31
8020fbb4:	4805883a 	mov	r2,r9
8020fbb8:	003e0706 	br	8020f3d8 <__reset+0xfa1ef3d8>
8020fbbc:	00800c04 	movi	r2,48
8020fbc0:	d8801d05 	stb	r2,116(sp)
8020fbc4:	d8c01d45 	stb	r3,117(sp)
8020fbc8:	d8001d85 	stb	zero,118(sp)
8020fbcc:	90800094 	ori	r2,r18,2
8020fbd0:	80008f16 	blt	r16,zero,8020fe10 <___svfiprintf_internal_r+0x1160>
8020fbd4:	00bfdfc4 	movi	r2,-129
8020fbd8:	90a4703a 	and	r18,r18,r2
8020fbdc:	94800094 	ori	r18,r18,2
8020fbe0:	0015883a 	mov	r10,zero
8020fbe4:	003d2906 	br	8020f08c <__reset+0xfa1ef08c>
8020fbe8:	98c00007 	ldb	r3,0(r19)
8020fbec:	003c7f06 	br	8020edec <__reset+0xfa1eedec>
8020fbf0:	dac02317 	ldw	r11,140(sp)
8020fbf4:	0013883a 	mov	r9,zero
8020fbf8:	5f000017 	ldw	fp,0(r11)
8020fbfc:	5ac00104 	addi	r11,r11,4
8020fc00:	dac02315 	stw	r11,140(sp)
8020fc04:	003d1506 	br	8020f05c <__reset+0xfa1ef05c>
8020fc08:	9080100c 	andi	r2,r18,64
8020fc0c:	d8001d85 	stb	zero,118(sp)
8020fc10:	dac02317 	ldw	r11,140(sp)
8020fc14:	10003426 	beq	r2,zero,8020fce8 <___svfiprintf_internal_r+0x1038>
8020fc18:	58800104 	addi	r2,r11,4
8020fc1c:	5f00000b 	ldhu	fp,0(r11)
8020fc20:	0013883a 	mov	r9,zero
8020fc24:	803e950e 	bge	r16,zero,8020f67c <__reset+0xfa1ef67c>
8020fc28:	e246b03a 	or	r3,fp,r9
8020fc2c:	d8802315 	stw	r2,140(sp)
8020fc30:	183d5a1e 	bne	r3,zero,8020f19c <__reset+0xfa1ef19c>
8020fc34:	0015883a 	mov	r10,zero
8020fc38:	0005883a 	mov	r2,zero
8020fc3c:	003fb706 	br	8020fb1c <__reset+0xfa1efb1c>
8020fc40:	98c00043 	ldbu	r3,1(r19)
8020fc44:	94800814 	ori	r18,r18,32
8020fc48:	9cc00044 	addi	r19,r19,1
8020fc4c:	18c03fcc 	andi	r3,r3,255
8020fc50:	18c0201c 	xori	r3,r3,128
8020fc54:	18ffe004 	addi	r3,r3,-128
8020fc58:	003c6406 	br	8020edec <__reset+0xfa1eedec>
8020fc5c:	d8c02315 	stw	r3,140(sp)
8020fc60:	0015883a 	mov	r10,zero
8020fc64:	003faa06 	br	8020fb10 <__reset+0xfa1efb10>
8020fc68:	dac02317 	ldw	r11,140(sp)
8020fc6c:	58800017 	ldw	r2,0(r11)
8020fc70:	5ac00104 	addi	r11,r11,4
8020fc74:	dac02315 	stw	r11,140(sp)
8020fc78:	dac02517 	ldw	r11,148(sp)
8020fc7c:	12c00015 	stw	r11,0(r2)
8020fc80:	003c3206 	br	8020ed4c <__reset+0xfa1eed4c>
8020fc84:	012008b4 	movhi	r4,32802
8020fc88:	212cc004 	addi	r4,r4,-19712
8020fc8c:	d9002915 	stw	r4,164(sp)
8020fc90:	d8c02315 	stw	r3,140(sp)
8020fc94:	1025883a 	mov	r18,r2
8020fc98:	e244b03a 	or	r2,fp,r9
8020fc9c:	103f871e 	bne	r2,zero,8020fabc <__reset+0xfa1efabc>
8020fca0:	0015883a 	mov	r10,zero
8020fca4:	00800084 	movi	r2,2
8020fca8:	003f9c06 	br	8020fb1c <__reset+0xfa1efb1c>
8020fcac:	0039883a 	mov	fp,zero
8020fcb0:	003e5f06 	br	8020f630 <__reset+0xfa1ef630>
8020fcb4:	d9801a04 	addi	r6,sp,104
8020fcb8:	b80b883a 	mov	r5,r23
8020fcbc:	a809883a 	mov	r4,r21
8020fcc0:	020eae00 	call	8020eae0 <__ssprint_r>
8020fcc4:	103f081e 	bne	r2,zero,8020f8e8 <__reset+0xfa1ef8e8>
8020fcc8:	d8c01c17 	ldw	r3,112(sp)
8020fccc:	d8801b17 	ldw	r2,108(sp)
8020fcd0:	d811883a 	mov	r8,sp
8020fcd4:	003e9106 	br	8020f71c <__reset+0xfa1ef71c>
8020fcd8:	012008b4 	movhi	r4,32802
8020fcdc:	212d2804 	addi	r4,r4,-19296
8020fce0:	d9002215 	stw	r4,136(sp)
8020fce4:	003ead06 	br	8020f79c <__reset+0xfa1ef79c>
8020fce8:	58800104 	addi	r2,r11,4
8020fcec:	5f000017 	ldw	fp,0(r11)
8020fcf0:	0013883a 	mov	r9,zero
8020fcf4:	803e610e 	bge	r16,zero,8020f67c <__reset+0xfa1ef67c>
8020fcf8:	003fcb06 	br	8020fc28 <__reset+0xfa1efc28>
8020fcfc:	58800104 	addi	r2,r11,4
8020fd00:	5f000017 	ldw	fp,0(r11)
8020fd04:	0013883a 	mov	r9,zero
8020fd08:	803e420e 	bge	r16,zero,8020f614 <__reset+0xfa1ef614>
8020fd0c:	003f7e06 	br	8020fb08 <__reset+0xfa1efb08>
8020fd10:	5f000017 	ldw	fp,0(r11)
8020fd14:	5ac00104 	addi	r11,r11,4
8020fd18:	0013883a 	mov	r9,zero
8020fd1c:	dac02315 	stw	r11,140(sp)
8020fd20:	003cce06 	br	8020f05c <__reset+0xfa1ef05c>
8020fd24:	8809883a 	mov	r4,r17
8020fd28:	da002c15 	stw	r8,176(sp)
8020fd2c:	02054b80 	call	802054b8 <strlen>
8020fd30:	d8802115 	stw	r2,132(sp)
8020fd34:	da801d83 	ldbu	r10,118(sp)
8020fd38:	df002315 	stw	fp,140(sp)
8020fd3c:	0021883a 	mov	r16,zero
8020fd40:	da002c17 	ldw	r8,176(sp)
8020fd44:	003cf606 	br	8020f120 <__reset+0xfa1ef120>
8020fd48:	00800184 	movi	r2,6
8020fd4c:	1400012e 	bgeu	r2,r16,8020fd54 <___svfiprintf_internal_r+0x10a4>
8020fd50:	1021883a 	mov	r16,r2
8020fd54:	dc002115 	stw	r16,132(sp)
8020fd58:	8005883a 	mov	r2,r16
8020fd5c:	80003c16 	blt	r16,zero,8020fe50 <___svfiprintf_internal_r+0x11a0>
8020fd60:	046008b4 	movhi	r17,32802
8020fd64:	d8802015 	stw	r2,128(sp)
8020fd68:	df002315 	stw	fp,140(sp)
8020fd6c:	8c6cc504 	addi	r17,r17,-19692
8020fd70:	003d2e06 	br	8020f22c <__reset+0xfa1ef22c>
8020fd74:	04001004 	movi	r16,64
8020fd78:	800b883a 	mov	r5,r16
8020fd7c:	020c72c0 	call	8020c72c <_malloc_r>
8020fd80:	dac02717 	ldw	r11,156(sp)
8020fd84:	58800015 	stw	r2,0(r11)
8020fd88:	58800415 	stw	r2,16(r11)
8020fd8c:	10004826 	beq	r2,zero,8020feb0 <___svfiprintf_internal_r+0x1200>
8020fd90:	dac02717 	ldw	r11,156(sp)
8020fd94:	5c000515 	stw	r16,20(r11)
8020fd98:	003bd906 	br	8020ed00 <__reset+0xfa1eed00>
8020fd9c:	9080004c 	andi	r2,r18,1
8020fda0:	0015883a 	mov	r10,zero
8020fda4:	10000626 	beq	r2,zero,8020fdc0 <___svfiprintf_internal_r+0x1110>
8020fda8:	dac02b17 	ldw	r11,172(sp)
8020fdac:	00800c04 	movi	r2,48
8020fdb0:	d88019c5 	stb	r2,103(sp)
8020fdb4:	dac02115 	stw	r11,132(sp)
8020fdb8:	dc4019c4 	addi	r17,sp,103
8020fdbc:	003cd806 	br	8020f120 <__reset+0xfa1ef120>
8020fdc0:	d8002115 	stw	zero,132(sp)
8020fdc4:	dc401a04 	addi	r17,sp,104
8020fdc8:	003cd506 	br	8020f120 <__reset+0xfa1ef120>
8020fdcc:	012008b4 	movhi	r4,32802
8020fdd0:	212d2c04 	addi	r4,r4,-19280
8020fdd4:	d9002815 	stw	r4,160(sp)
8020fdd8:	003d4306 	br	8020f2e8 <__reset+0xfa1ef2e8>
8020fddc:	00bfffc4 	movi	r2,-1
8020fde0:	003ec606 	br	8020f8fc <__reset+0xfa1ef8fc>
8020fde4:	00800044 	movi	r2,1
8020fde8:	10803fcc 	andi	r2,r2,255
8020fdec:	00c00044 	movi	r3,1
8020fdf0:	10fd8026 	beq	r2,r3,8020f3f4 <__reset+0xfa1ef3f4>
8020fdf4:	00c00084 	movi	r3,2
8020fdf8:	10fca426 	beq	r2,r3,8020f08c <__reset+0xfa1ef08c>
8020fdfc:	003ce806 	br	8020f1a0 <__reset+0xfa1ef1a0>
8020fe00:	012008b4 	movhi	r4,32802
8020fe04:	212d2c04 	addi	r4,r4,-19280
8020fe08:	d9002815 	stw	r4,160(sp)
8020fe0c:	003e9906 	br	8020f874 <__reset+0xfa1ef874>
8020fe10:	1025883a 	mov	r18,r2
8020fe14:	0015883a 	mov	r10,zero
8020fe18:	00800084 	movi	r2,2
8020fe1c:	003ff206 	br	8020fde8 <__reset+0xfa1efde8>
8020fe20:	016008b4 	movhi	r5,32802
8020fe24:	296d2804 	addi	r5,r5,-19296
8020fe28:	d9402215 	stw	r5,136(sp)
8020fe2c:	003ee206 	br	8020f9b8 <__reset+0xfa1ef9b8>
8020fe30:	5827883a 	mov	r19,r11
8020fe34:	0021883a 	mov	r16,zero
8020fe38:	003bed06 	br	8020edf0 <__reset+0xfa1eedf0>
8020fe3c:	dc002115 	stw	r16,132(sp)
8020fe40:	da801d83 	ldbu	r10,118(sp)
8020fe44:	df002315 	stw	fp,140(sp)
8020fe48:	0021883a 	mov	r16,zero
8020fe4c:	003cb406 	br	8020f120 <__reset+0xfa1ef120>
8020fe50:	0005883a 	mov	r2,zero
8020fe54:	003fc206 	br	8020fd60 <__reset+0xfa1efd60>
8020fe58:	d8802317 	ldw	r2,140(sp)
8020fe5c:	98c00043 	ldbu	r3,1(r19)
8020fe60:	5827883a 	mov	r19,r11
8020fe64:	14000017 	ldw	r16,0(r2)
8020fe68:	10800104 	addi	r2,r2,4
8020fe6c:	d8802315 	stw	r2,140(sp)
8020fe70:	803f760e 	bge	r16,zero,8020fc4c <__reset+0xfa1efc4c>
8020fe74:	18c03fcc 	andi	r3,r3,255
8020fe78:	18c0201c 	xori	r3,r3,128
8020fe7c:	043fffc4 	movi	r16,-1
8020fe80:	18ffe004 	addi	r3,r3,-128
8020fe84:	003bd906 	br	8020edec <__reset+0xfa1eedec>
8020fe88:	d9c01d85 	stb	r7,118(sp)
8020fe8c:	003cb606 	br	8020f168 <__reset+0xfa1ef168>
8020fe90:	d9c01d85 	stb	r7,118(sp)
8020fe94:	003d2106 	br	8020f31c <__reset+0xfa1ef31c>
8020fe98:	d9c01d85 	stb	r7,118(sp)
8020fe9c:	003d8e06 	br	8020f4d8 <__reset+0xfa1ef4d8>
8020fea0:	d9c01d85 	stb	r7,118(sp)
8020fea4:	003db306 	br	8020f574 <__reset+0xfa1ef574>
8020fea8:	d9c01d85 	stb	r7,118(sp)
8020feac:	003c8a06 	br	8020f0d8 <__reset+0xfa1ef0d8>
8020feb0:	dac02a17 	ldw	r11,168(sp)
8020feb4:	00800304 	movi	r2,12
8020feb8:	58800015 	stw	r2,0(r11)
8020febc:	00bfffc4 	movi	r2,-1
8020fec0:	003e8e06 	br	8020f8fc <__reset+0xfa1ef8fc>
8020fec4:	d9c01d85 	stb	r7,118(sp)
8020fec8:	003dc706 	br	8020f5e8 <__reset+0xfa1ef5e8>
8020fecc:	d9c01d85 	stb	r7,118(sp)
8020fed0:	003ddf06 	br	8020f650 <__reset+0xfa1ef650>
8020fed4:	d9c01d85 	stb	r7,118(sp)
8020fed8:	003d3706 	br	8020f3b8 <__reset+0xfa1ef3b8>
8020fedc:	d9c01d85 	stb	r7,118(sp)
8020fee0:	003c5406 	br	8020f034 <__reset+0xfa1ef034>
8020fee4:	d9c01d85 	stb	r7,118(sp)
8020fee8:	003d1d06 	br	8020f360 <__reset+0xfa1ef360>

8020feec <__sprint_r.part.0>:
8020feec:	28801917 	ldw	r2,100(r5)
8020fef0:	defff604 	addi	sp,sp,-40
8020fef4:	dd400515 	stw	r21,20(sp)
8020fef8:	dfc00915 	stw	ra,36(sp)
8020fefc:	df000815 	stw	fp,32(sp)
8020ff00:	ddc00715 	stw	r23,28(sp)
8020ff04:	dd800615 	stw	r22,24(sp)
8020ff08:	dd000415 	stw	r20,16(sp)
8020ff0c:	dcc00315 	stw	r19,12(sp)
8020ff10:	dc800215 	stw	r18,8(sp)
8020ff14:	dc400115 	stw	r17,4(sp)
8020ff18:	dc000015 	stw	r16,0(sp)
8020ff1c:	1088000c 	andi	r2,r2,8192
8020ff20:	302b883a 	mov	r21,r6
8020ff24:	10002e26 	beq	r2,zero,8020ffe0 <__sprint_r.part.0+0xf4>
8020ff28:	30800217 	ldw	r2,8(r6)
8020ff2c:	35800017 	ldw	r22,0(r6)
8020ff30:	10002926 	beq	r2,zero,8020ffd8 <__sprint_r.part.0+0xec>
8020ff34:	2827883a 	mov	r19,r5
8020ff38:	2029883a 	mov	r20,r4
8020ff3c:	b5c00104 	addi	r23,r22,4
8020ff40:	04bfffc4 	movi	r18,-1
8020ff44:	bc400017 	ldw	r17,0(r23)
8020ff48:	b4000017 	ldw	r16,0(r22)
8020ff4c:	0039883a 	mov	fp,zero
8020ff50:	8822d0ba 	srli	r17,r17,2
8020ff54:	8800031e 	bne	r17,zero,8020ff64 <__sprint_r.part.0+0x78>
8020ff58:	00001806 	br	8020ffbc <__sprint_r.part.0+0xd0>
8020ff5c:	84000104 	addi	r16,r16,4
8020ff60:	8f001526 	beq	r17,fp,8020ffb8 <__sprint_r.part.0+0xcc>
8020ff64:	81400017 	ldw	r5,0(r16)
8020ff68:	980d883a 	mov	r6,r19
8020ff6c:	a009883a 	mov	r4,r20
8020ff70:	02119140 	call	80211914 <_fputwc_r>
8020ff74:	e7000044 	addi	fp,fp,1
8020ff78:	14bff81e 	bne	r2,r18,8020ff5c <__reset+0xfa1eff5c>
8020ff7c:	9005883a 	mov	r2,r18
8020ff80:	a8000215 	stw	zero,8(r21)
8020ff84:	a8000115 	stw	zero,4(r21)
8020ff88:	dfc00917 	ldw	ra,36(sp)
8020ff8c:	df000817 	ldw	fp,32(sp)
8020ff90:	ddc00717 	ldw	r23,28(sp)
8020ff94:	dd800617 	ldw	r22,24(sp)
8020ff98:	dd400517 	ldw	r21,20(sp)
8020ff9c:	dd000417 	ldw	r20,16(sp)
8020ffa0:	dcc00317 	ldw	r19,12(sp)
8020ffa4:	dc800217 	ldw	r18,8(sp)
8020ffa8:	dc400117 	ldw	r17,4(sp)
8020ffac:	dc000017 	ldw	r16,0(sp)
8020ffb0:	dec00a04 	addi	sp,sp,40
8020ffb4:	f800283a 	ret
8020ffb8:	a8800217 	ldw	r2,8(r21)
8020ffbc:	8c63883a 	add	r17,r17,r17
8020ffc0:	8c63883a 	add	r17,r17,r17
8020ffc4:	1445c83a 	sub	r2,r2,r17
8020ffc8:	a8800215 	stw	r2,8(r21)
8020ffcc:	b5800204 	addi	r22,r22,8
8020ffd0:	bdc00204 	addi	r23,r23,8
8020ffd4:	103fdb1e 	bne	r2,zero,8020ff44 <__reset+0xfa1eff44>
8020ffd8:	0005883a 	mov	r2,zero
8020ffdc:	003fe806 	br	8020ff80 <__reset+0xfa1eff80>
8020ffe0:	020be500 	call	8020be50 <__sfvwrite_r>
8020ffe4:	003fe606 	br	8020ff80 <__reset+0xfa1eff80>

8020ffe8 <__sprint_r>:
8020ffe8:	30c00217 	ldw	r3,8(r6)
8020ffec:	18000126 	beq	r3,zero,8020fff4 <__sprint_r+0xc>
8020fff0:	020feec1 	jmpi	8020feec <__sprint_r.part.0>
8020fff4:	30000115 	stw	zero,4(r6)
8020fff8:	0005883a 	mov	r2,zero
8020fffc:	f800283a 	ret

80210000 <___vfiprintf_internal_r>:
80210000:	deffc904 	addi	sp,sp,-220
80210004:	df003515 	stw	fp,212(sp)
80210008:	dd003115 	stw	r20,196(sp)
8021000c:	dfc03615 	stw	ra,216(sp)
80210010:	ddc03415 	stw	r23,208(sp)
80210014:	dd803315 	stw	r22,204(sp)
80210018:	dd403215 	stw	r21,200(sp)
8021001c:	dcc03015 	stw	r19,192(sp)
80210020:	dc802f15 	stw	r18,188(sp)
80210024:	dc402e15 	stw	r17,184(sp)
80210028:	dc002d15 	stw	r16,180(sp)
8021002c:	d9002015 	stw	r4,128(sp)
80210030:	d9c02215 	stw	r7,136(sp)
80210034:	2829883a 	mov	r20,r5
80210038:	3039883a 	mov	fp,r6
8021003c:	20000226 	beq	r4,zero,80210048 <___vfiprintf_internal_r+0x48>
80210040:	20800e17 	ldw	r2,56(r4)
80210044:	1000cf26 	beq	r2,zero,80210384 <___vfiprintf_internal_r+0x384>
80210048:	a080030b 	ldhu	r2,12(r20)
8021004c:	10c8000c 	andi	r3,r2,8192
80210050:	1800061e 	bne	r3,zero,8021006c <___vfiprintf_internal_r+0x6c>
80210054:	a1001917 	ldw	r4,100(r20)
80210058:	00f7ffc4 	movi	r3,-8193
8021005c:	10880014 	ori	r2,r2,8192
80210060:	20c6703a 	and	r3,r4,r3
80210064:	a080030d 	sth	r2,12(r20)
80210068:	a0c01915 	stw	r3,100(r20)
8021006c:	10c0020c 	andi	r3,r2,8
80210070:	1800a926 	beq	r3,zero,80210318 <___vfiprintf_internal_r+0x318>
80210074:	a0c00417 	ldw	r3,16(r20)
80210078:	1800a726 	beq	r3,zero,80210318 <___vfiprintf_internal_r+0x318>
8021007c:	1080068c 	andi	r2,r2,26
80210080:	00c00284 	movi	r3,10
80210084:	10c0ac26 	beq	r2,r3,80210338 <___vfiprintf_internal_r+0x338>
80210088:	da801a04 	addi	r10,sp,104
8021008c:	da801e15 	stw	r10,120(sp)
80210090:	d8801e17 	ldw	r2,120(sp)
80210094:	da8019c4 	addi	r10,sp,103
80210098:	05a008b4 	movhi	r22,32802
8021009c:	05e008b4 	movhi	r23,32802
802100a0:	da801f15 	stw	r10,124(sp)
802100a4:	1295c83a 	sub	r10,r2,r10
802100a8:	b5ad3404 	addi	r22,r22,-19248
802100ac:	bded3004 	addi	r23,r23,-19264
802100b0:	dec01a15 	stw	sp,104(sp)
802100b4:	d8001c15 	stw	zero,112(sp)
802100b8:	d8001b15 	stw	zero,108(sp)
802100bc:	d8002615 	stw	zero,152(sp)
802100c0:	d8002315 	stw	zero,140(sp)
802100c4:	da802715 	stw	r10,156(sp)
802100c8:	d811883a 	mov	r8,sp
802100cc:	dd002115 	stw	r20,132(sp)
802100d0:	e021883a 	mov	r16,fp
802100d4:	80800007 	ldb	r2,0(r16)
802100d8:	1003ea26 	beq	r2,zero,80211084 <___vfiprintf_internal_r+0x1084>
802100dc:	00c00944 	movi	r3,37
802100e0:	8025883a 	mov	r18,r16
802100e4:	10c0021e 	bne	r2,r3,802100f0 <___vfiprintf_internal_r+0xf0>
802100e8:	00001606 	br	80210144 <___vfiprintf_internal_r+0x144>
802100ec:	10c00326 	beq	r2,r3,802100fc <___vfiprintf_internal_r+0xfc>
802100f0:	94800044 	addi	r18,r18,1
802100f4:	90800007 	ldb	r2,0(r18)
802100f8:	103ffc1e 	bne	r2,zero,802100ec <__reset+0xfa1f00ec>
802100fc:	9423c83a 	sub	r17,r18,r16
80210100:	88001026 	beq	r17,zero,80210144 <___vfiprintf_internal_r+0x144>
80210104:	d8c01c17 	ldw	r3,112(sp)
80210108:	d8801b17 	ldw	r2,108(sp)
8021010c:	44000015 	stw	r16,0(r8)
80210110:	88c7883a 	add	r3,r17,r3
80210114:	10800044 	addi	r2,r2,1
80210118:	44400115 	stw	r17,4(r8)
8021011c:	d8c01c15 	stw	r3,112(sp)
80210120:	d8801b15 	stw	r2,108(sp)
80210124:	010001c4 	movi	r4,7
80210128:	2080760e 	bge	r4,r2,80210304 <___vfiprintf_internal_r+0x304>
8021012c:	1803821e 	bne	r3,zero,80210f38 <___vfiprintf_internal_r+0xf38>
80210130:	da802317 	ldw	r10,140(sp)
80210134:	d8001b15 	stw	zero,108(sp)
80210138:	d811883a 	mov	r8,sp
8021013c:	5455883a 	add	r10,r10,r17
80210140:	da802315 	stw	r10,140(sp)
80210144:	90800007 	ldb	r2,0(r18)
80210148:	10044626 	beq	r2,zero,80211264 <___vfiprintf_internal_r+0x1264>
8021014c:	90c00047 	ldb	r3,1(r18)
80210150:	94000044 	addi	r16,r18,1
80210154:	d8001d85 	stb	zero,118(sp)
80210158:	0009883a 	mov	r4,zero
8021015c:	000f883a 	mov	r7,zero
80210160:	027fffc4 	movi	r9,-1
80210164:	0023883a 	mov	r17,zero
80210168:	0029883a 	mov	r20,zero
8021016c:	01401604 	movi	r5,88
80210170:	01800244 	movi	r6,9
80210174:	03400a84 	movi	r13,42
80210178:	03001b04 	movi	r12,108
8021017c:	84000044 	addi	r16,r16,1
80210180:	18bff804 	addi	r2,r3,-32
80210184:	28827336 	bltu	r5,r2,80210b54 <___vfiprintf_internal_r+0xb54>
80210188:	100490ba 	slli	r2,r2,2
8021018c:	02a00874 	movhi	r10,32801
80210190:	52806804 	addi	r10,r10,416
80210194:	1285883a 	add	r2,r2,r10
80210198:	10800017 	ldw	r2,0(r2)
8021019c:	1000683a 	jmp	r2
802101a0:	80210888 	cmpgei	zero,r16,-31710
802101a4:	80210b54 	ori	zero,r16,33837
802101a8:	80210b54 	ori	zero,r16,33837
802101ac:	802108a8 	cmpgeui	zero,r16,33826
802101b0:	80210b54 	ori	zero,r16,33837
802101b4:	80210b54 	ori	zero,r16,33837
802101b8:	80210b54 	ori	zero,r16,33837
802101bc:	80210b54 	ori	zero,r16,33837
802101c0:	80210b54 	ori	zero,r16,33837
802101c4:	80210b54 	ori	zero,r16,33837
802101c8:	80210a90 	cmplti	zero,r16,-31702
802101cc:	80210aac 	andhi	zero,r16,33834
802101d0:	80210b54 	ori	zero,r16,33837
802101d4:	80210394 	ori	zero,r16,33806
802101d8:	80210abc 	xorhi	zero,r16,33834
802101dc:	80210b54 	ori	zero,r16,33837
802101e0:	802108b4 	orhi	zero,r16,33826
802101e4:	802108c0 	call	8802108c <__reset+0x200108c>
802101e8:	802108c0 	call	8802108c <__reset+0x200108c>
802101ec:	802108c0 	call	8802108c <__reset+0x200108c>
802101f0:	802108c0 	call	8802108c <__reset+0x200108c>
802101f4:	802108c0 	call	8802108c <__reset+0x200108c>
802101f8:	802108c0 	call	8802108c <__reset+0x200108c>
802101fc:	802108c0 	call	8802108c <__reset+0x200108c>
80210200:	802108c0 	call	8802108c <__reset+0x200108c>
80210204:	802108c0 	call	8802108c <__reset+0x200108c>
80210208:	80210b54 	ori	zero,r16,33837
8021020c:	80210b54 	ori	zero,r16,33837
80210210:	80210b54 	ori	zero,r16,33837
80210214:	80210b54 	ori	zero,r16,33837
80210218:	80210b54 	ori	zero,r16,33837
8021021c:	80210b54 	ori	zero,r16,33837
80210220:	80210b54 	ori	zero,r16,33837
80210224:	80210b54 	ori	zero,r16,33837
80210228:	80210b54 	ori	zero,r16,33837
8021022c:	80210b54 	ori	zero,r16,33837
80210230:	802108ec 	andhi	zero,r16,33827
80210234:	80210b54 	ori	zero,r16,33837
80210238:	80210b54 	ori	zero,r16,33837
8021023c:	80210b54 	ori	zero,r16,33837
80210240:	80210b54 	ori	zero,r16,33837
80210244:	80210b54 	ori	zero,r16,33837
80210248:	80210b54 	ori	zero,r16,33837
8021024c:	80210b54 	ori	zero,r16,33837
80210250:	80210b54 	ori	zero,r16,33837
80210254:	80210b54 	ori	zero,r16,33837
80210258:	80210b54 	ori	zero,r16,33837
8021025c:	80210924 	muli	zero,r16,-31708
80210260:	80210b54 	ori	zero,r16,33837
80210264:	80210b54 	ori	zero,r16,33837
80210268:	80210b54 	ori	zero,r16,33837
8021026c:	80210b54 	ori	zero,r16,33837
80210270:	80210b54 	ori	zero,r16,33837
80210274:	8021097c 	xorhi	zero,r16,33829
80210278:	80210b54 	ori	zero,r16,33837
8021027c:	80210b54 	ori	zero,r16,33837
80210280:	802109ec 	andhi	zero,r16,33831
80210284:	80210b54 	ori	zero,r16,33837
80210288:	80210b54 	ori	zero,r16,33837
8021028c:	80210b54 	ori	zero,r16,33837
80210290:	80210b54 	ori	zero,r16,33837
80210294:	80210b54 	ori	zero,r16,33837
80210298:	80210b54 	ori	zero,r16,33837
8021029c:	80210b54 	ori	zero,r16,33837
802102a0:	80210b54 	ori	zero,r16,33837
802102a4:	80210b54 	ori	zero,r16,33837
802102a8:	80210b54 	ori	zero,r16,33837
802102ac:	80210798 	cmpnei	zero,r16,-31714
802102b0:	802107c4 	addi	zero,r16,-31713
802102b4:	80210b54 	ori	zero,r16,33837
802102b8:	80210b54 	ori	zero,r16,33837
802102bc:	80210b54 	ori	zero,r16,33837
802102c0:	80210afc 	xorhi	zero,r16,33835
802102c4:	802107c4 	addi	zero,r16,-31713
802102c8:	80210b54 	ori	zero,r16,33837
802102cc:	80210b54 	ori	zero,r16,33837
802102d0:	80210658 	cmpnei	zero,r16,-31719
802102d4:	80210b54 	ori	zero,r16,33837
802102d8:	80210668 	cmpgeui	zero,r16,33817
802102dc:	802106a4 	muli	zero,r16,-31718
802102e0:	802103a0 	cmpeqi	zero,r16,-31730
802102e4:	8021064c 	andi	zero,r16,33817
802102e8:	80210b54 	ori	zero,r16,33837
802102ec:	80210a28 	cmpgeui	zero,r16,33832
802102f0:	80210b54 	ori	zero,r16,33837
802102f4:	80210a80 	call	880210a8 <__reset+0x20010a8>
802102f8:	80210b54 	ori	zero,r16,33837
802102fc:	80210b54 	ori	zero,r16,33837
80210300:	80210744 	addi	zero,r16,-31715
80210304:	42000204 	addi	r8,r8,8
80210308:	da802317 	ldw	r10,140(sp)
8021030c:	5455883a 	add	r10,r10,r17
80210310:	da802315 	stw	r10,140(sp)
80210314:	003f8b06 	br	80210144 <__reset+0xfa1f0144>
80210318:	d9002017 	ldw	r4,128(sp)
8021031c:	a00b883a 	mov	r5,r20
80210320:	02099f80 	call	802099f8 <__swsetup_r>
80210324:	1003b11e 	bne	r2,zero,802111ec <___vfiprintf_internal_r+0x11ec>
80210328:	a080030b 	ldhu	r2,12(r20)
8021032c:	00c00284 	movi	r3,10
80210330:	1080068c 	andi	r2,r2,26
80210334:	10ff541e 	bne	r2,r3,80210088 <__reset+0xfa1f0088>
80210338:	a080038f 	ldh	r2,14(r20)
8021033c:	103f5216 	blt	r2,zero,80210088 <__reset+0xfa1f0088>
80210340:	d9c02217 	ldw	r7,136(sp)
80210344:	d9002017 	ldw	r4,128(sp)
80210348:	e00d883a 	mov	r6,fp
8021034c:	a00b883a 	mov	r5,r20
80210350:	02114780 	call	80211478 <__sbprintf>
80210354:	dfc03617 	ldw	ra,216(sp)
80210358:	df003517 	ldw	fp,212(sp)
8021035c:	ddc03417 	ldw	r23,208(sp)
80210360:	dd803317 	ldw	r22,204(sp)
80210364:	dd403217 	ldw	r21,200(sp)
80210368:	dd003117 	ldw	r20,196(sp)
8021036c:	dcc03017 	ldw	r19,192(sp)
80210370:	dc802f17 	ldw	r18,188(sp)
80210374:	dc402e17 	ldw	r17,184(sp)
80210378:	dc002d17 	ldw	r16,180(sp)
8021037c:	dec03704 	addi	sp,sp,220
80210380:	f800283a 	ret
80210384:	020b9cc0 	call	8020b9cc <__sinit>
80210388:	003f2f06 	br	80210048 <__reset+0xfa1f0048>
8021038c:	0463c83a 	sub	r17,zero,r17
80210390:	d8802215 	stw	r2,136(sp)
80210394:	a5000114 	ori	r20,r20,4
80210398:	80c00007 	ldb	r3,0(r16)
8021039c:	003f7706 	br	8021017c <__reset+0xfa1f017c>
802103a0:	00800c04 	movi	r2,48
802103a4:	da802217 	ldw	r10,136(sp)
802103a8:	d8801d05 	stb	r2,116(sp)
802103ac:	00801e04 	movi	r2,120
802103b0:	d8801d45 	stb	r2,117(sp)
802103b4:	d8001d85 	stb	zero,118(sp)
802103b8:	50c00104 	addi	r3,r10,4
802103bc:	54800017 	ldw	r18,0(r10)
802103c0:	0027883a 	mov	r19,zero
802103c4:	a0800094 	ori	r2,r20,2
802103c8:	48030b16 	blt	r9,zero,80210ff8 <___vfiprintf_internal_r+0xff8>
802103cc:	00bfdfc4 	movi	r2,-129
802103d0:	a096703a 	and	r11,r20,r2
802103d4:	d8c02215 	stw	r3,136(sp)
802103d8:	5d000094 	ori	r20,r11,2
802103dc:	90032b1e 	bne	r18,zero,8021108c <___vfiprintf_internal_r+0x108c>
802103e0:	00a008b4 	movhi	r2,32802
802103e4:	10acc004 	addi	r2,r2,-19712
802103e8:	d8802615 	stw	r2,152(sp)
802103ec:	0039883a 	mov	fp,zero
802103f0:	48017b1e 	bne	r9,zero,802109e0 <___vfiprintf_internal_r+0x9e0>
802103f4:	0013883a 	mov	r9,zero
802103f8:	0027883a 	mov	r19,zero
802103fc:	dd401a04 	addi	r21,sp,104
80210400:	4825883a 	mov	r18,r9
80210404:	4cc0010e 	bge	r9,r19,8021040c <___vfiprintf_internal_r+0x40c>
80210408:	9825883a 	mov	r18,r19
8021040c:	e7003fcc 	andi	fp,fp,255
80210410:	e700201c 	xori	fp,fp,128
80210414:	e73fe004 	addi	fp,fp,-128
80210418:	e0000126 	beq	fp,zero,80210420 <___vfiprintf_internal_r+0x420>
8021041c:	94800044 	addi	r18,r18,1
80210420:	a380008c 	andi	r14,r20,2
80210424:	70000126 	beq	r14,zero,8021042c <___vfiprintf_internal_r+0x42c>
80210428:	94800084 	addi	r18,r18,2
8021042c:	a700210c 	andi	fp,r20,132
80210430:	e001df1e 	bne	fp,zero,80210bb0 <___vfiprintf_internal_r+0xbb0>
80210434:	8c87c83a 	sub	r3,r17,r18
80210438:	00c1dd0e 	bge	zero,r3,80210bb0 <___vfiprintf_internal_r+0xbb0>
8021043c:	01c00404 	movi	r7,16
80210440:	d8801c17 	ldw	r2,112(sp)
80210444:	38c3ad0e 	bge	r7,r3,802112fc <___vfiprintf_internal_r+0x12fc>
80210448:	02a008b4 	movhi	r10,32802
8021044c:	52ad3404 	addi	r10,r10,-19248
80210450:	dc002915 	stw	r16,164(sp)
80210454:	d9801b17 	ldw	r6,108(sp)
80210458:	da802415 	stw	r10,144(sp)
8021045c:	03c001c4 	movi	r15,7
80210460:	da402515 	stw	r9,148(sp)
80210464:	db802815 	stw	r14,160(sp)
80210468:	1821883a 	mov	r16,r3
8021046c:	00000506 	br	80210484 <___vfiprintf_internal_r+0x484>
80210470:	31400084 	addi	r5,r6,2
80210474:	42000204 	addi	r8,r8,8
80210478:	200d883a 	mov	r6,r4
8021047c:	843ffc04 	addi	r16,r16,-16
80210480:	3c000d0e 	bge	r7,r16,802104b8 <___vfiprintf_internal_r+0x4b8>
80210484:	10800404 	addi	r2,r2,16
80210488:	31000044 	addi	r4,r6,1
8021048c:	45800015 	stw	r22,0(r8)
80210490:	41c00115 	stw	r7,4(r8)
80210494:	d8801c15 	stw	r2,112(sp)
80210498:	d9001b15 	stw	r4,108(sp)
8021049c:	793ff40e 	bge	r15,r4,80210470 <__reset+0xfa1f0470>
802104a0:	1001b51e 	bne	r2,zero,80210b78 <___vfiprintf_internal_r+0xb78>
802104a4:	843ffc04 	addi	r16,r16,-16
802104a8:	000d883a 	mov	r6,zero
802104ac:	01400044 	movi	r5,1
802104b0:	d811883a 	mov	r8,sp
802104b4:	3c3ff316 	blt	r7,r16,80210484 <__reset+0xfa1f0484>
802104b8:	8007883a 	mov	r3,r16
802104bc:	da402517 	ldw	r9,148(sp)
802104c0:	db802817 	ldw	r14,160(sp)
802104c4:	dc002917 	ldw	r16,164(sp)
802104c8:	da802417 	ldw	r10,144(sp)
802104cc:	1885883a 	add	r2,r3,r2
802104d0:	40c00115 	stw	r3,4(r8)
802104d4:	42800015 	stw	r10,0(r8)
802104d8:	d8801c15 	stw	r2,112(sp)
802104dc:	d9401b15 	stw	r5,108(sp)
802104e0:	00c001c4 	movi	r3,7
802104e4:	19426016 	blt	r3,r5,80210e68 <___vfiprintf_internal_r+0xe68>
802104e8:	d8c01d87 	ldb	r3,118(sp)
802104ec:	42000204 	addi	r8,r8,8
802104f0:	29000044 	addi	r4,r5,1
802104f4:	1801b31e 	bne	r3,zero,80210bc4 <___vfiprintf_internal_r+0xbc4>
802104f8:	7001c026 	beq	r14,zero,80210bfc <___vfiprintf_internal_r+0xbfc>
802104fc:	d8c01d04 	addi	r3,sp,116
80210500:	10800084 	addi	r2,r2,2
80210504:	40c00015 	stw	r3,0(r8)
80210508:	00c00084 	movi	r3,2
8021050c:	40c00115 	stw	r3,4(r8)
80210510:	d8801c15 	stw	r2,112(sp)
80210514:	d9001b15 	stw	r4,108(sp)
80210518:	00c001c4 	movi	r3,7
8021051c:	1902650e 	bge	r3,r4,80210eb4 <___vfiprintf_internal_r+0xeb4>
80210520:	10029a1e 	bne	r2,zero,80210f8c <___vfiprintf_internal_r+0xf8c>
80210524:	00c02004 	movi	r3,128
80210528:	01000044 	movi	r4,1
8021052c:	000b883a 	mov	r5,zero
80210530:	d811883a 	mov	r8,sp
80210534:	e0c1b31e 	bne	fp,r3,80210c04 <___vfiprintf_internal_r+0xc04>
80210538:	8cb9c83a 	sub	fp,r17,r18
8021053c:	0701b10e 	bge	zero,fp,80210c04 <___vfiprintf_internal_r+0xc04>
80210540:	01c00404 	movi	r7,16
80210544:	3f03890e 	bge	r7,fp,8021136c <___vfiprintf_internal_r+0x136c>
80210548:	00e008b4 	movhi	r3,32802
8021054c:	18ed3004 	addi	r3,r3,-19264
80210550:	d8c02415 	stw	r3,144(sp)
80210554:	8007883a 	mov	r3,r16
80210558:	034001c4 	movi	r13,7
8021055c:	e021883a 	mov	r16,fp
80210560:	da402515 	stw	r9,148(sp)
80210564:	1839883a 	mov	fp,r3
80210568:	00000506 	br	80210580 <___vfiprintf_internal_r+0x580>
8021056c:	29800084 	addi	r6,r5,2
80210570:	42000204 	addi	r8,r8,8
80210574:	180b883a 	mov	r5,r3
80210578:	843ffc04 	addi	r16,r16,-16
8021057c:	3c000d0e 	bge	r7,r16,802105b4 <___vfiprintf_internal_r+0x5b4>
80210580:	10800404 	addi	r2,r2,16
80210584:	28c00044 	addi	r3,r5,1
80210588:	45c00015 	stw	r23,0(r8)
8021058c:	41c00115 	stw	r7,4(r8)
80210590:	d8801c15 	stw	r2,112(sp)
80210594:	d8c01b15 	stw	r3,108(sp)
80210598:	68fff40e 	bge	r13,r3,8021056c <__reset+0xfa1f056c>
8021059c:	1002241e 	bne	r2,zero,80210e30 <___vfiprintf_internal_r+0xe30>
802105a0:	843ffc04 	addi	r16,r16,-16
802105a4:	01800044 	movi	r6,1
802105a8:	000b883a 	mov	r5,zero
802105ac:	d811883a 	mov	r8,sp
802105b0:	3c3ff316 	blt	r7,r16,80210580 <__reset+0xfa1f0580>
802105b4:	da402517 	ldw	r9,148(sp)
802105b8:	e007883a 	mov	r3,fp
802105bc:	8039883a 	mov	fp,r16
802105c0:	1821883a 	mov	r16,r3
802105c4:	d8c02417 	ldw	r3,144(sp)
802105c8:	1705883a 	add	r2,r2,fp
802105cc:	47000115 	stw	fp,4(r8)
802105d0:	40c00015 	stw	r3,0(r8)
802105d4:	d8801c15 	stw	r2,112(sp)
802105d8:	d9801b15 	stw	r6,108(sp)
802105dc:	00c001c4 	movi	r3,7
802105e0:	19827616 	blt	r3,r6,80210fbc <___vfiprintf_internal_r+0xfbc>
802105e4:	4cf9c83a 	sub	fp,r9,r19
802105e8:	42000204 	addi	r8,r8,8
802105ec:	31000044 	addi	r4,r6,1
802105f0:	300b883a 	mov	r5,r6
802105f4:	07018516 	blt	zero,fp,80210c0c <___vfiprintf_internal_r+0xc0c>
802105f8:	9885883a 	add	r2,r19,r2
802105fc:	45400015 	stw	r21,0(r8)
80210600:	44c00115 	stw	r19,4(r8)
80210604:	d8801c15 	stw	r2,112(sp)
80210608:	d9001b15 	stw	r4,108(sp)
8021060c:	00c001c4 	movi	r3,7
80210610:	1901dd0e 	bge	r3,r4,80210d88 <___vfiprintf_internal_r+0xd88>
80210614:	1002401e 	bne	r2,zero,80210f18 <___vfiprintf_internal_r+0xf18>
80210618:	d8001b15 	stw	zero,108(sp)
8021061c:	a2c0010c 	andi	r11,r20,4
80210620:	58000226 	beq	r11,zero,8021062c <___vfiprintf_internal_r+0x62c>
80210624:	8ca7c83a 	sub	r19,r17,r18
80210628:	04c2f216 	blt	zero,r19,802111f4 <___vfiprintf_internal_r+0x11f4>
8021062c:	8c80010e 	bge	r17,r18,80210634 <___vfiprintf_internal_r+0x634>
80210630:	9023883a 	mov	r17,r18
80210634:	da802317 	ldw	r10,140(sp)
80210638:	5455883a 	add	r10,r10,r17
8021063c:	da802315 	stw	r10,140(sp)
80210640:	d8001b15 	stw	zero,108(sp)
80210644:	d811883a 	mov	r8,sp
80210648:	003ea206 	br	802100d4 <__reset+0xfa1f00d4>
8021064c:	a5000814 	ori	r20,r20,32
80210650:	80c00007 	ldb	r3,0(r16)
80210654:	003ec906 	br	8021017c <__reset+0xfa1f017c>
80210658:	80c00007 	ldb	r3,0(r16)
8021065c:	1b030926 	beq	r3,r12,80211284 <___vfiprintf_internal_r+0x1284>
80210660:	a5000414 	ori	r20,r20,16
80210664:	003ec506 	br	8021017c <__reset+0xfa1f017c>
80210668:	21003fcc 	andi	r4,r4,255
8021066c:	20035e1e 	bne	r4,zero,802113e8 <___vfiprintf_internal_r+0x13e8>
80210670:	a080080c 	andi	r2,r20,32
80210674:	1002a526 	beq	r2,zero,8021110c <___vfiprintf_internal_r+0x110c>
80210678:	da802217 	ldw	r10,136(sp)
8021067c:	50800017 	ldw	r2,0(r10)
80210680:	da802317 	ldw	r10,140(sp)
80210684:	5007d7fa 	srai	r3,r10,31
80210688:	da802217 	ldw	r10,136(sp)
8021068c:	10c00115 	stw	r3,4(r2)
80210690:	52800104 	addi	r10,r10,4
80210694:	da802215 	stw	r10,136(sp)
80210698:	da802317 	ldw	r10,140(sp)
8021069c:	12800015 	stw	r10,0(r2)
802106a0:	003e8c06 	br	802100d4 <__reset+0xfa1f00d4>
802106a4:	21003fcc 	andi	r4,r4,255
802106a8:	2003511e 	bne	r4,zero,802113f0 <___vfiprintf_internal_r+0x13f0>
802106ac:	a080080c 	andi	r2,r20,32
802106b0:	1000a126 	beq	r2,zero,80210938 <___vfiprintf_internal_r+0x938>
802106b4:	da802217 	ldw	r10,136(sp)
802106b8:	d8001d85 	stb	zero,118(sp)
802106bc:	50800204 	addi	r2,r10,8
802106c0:	54800017 	ldw	r18,0(r10)
802106c4:	54c00117 	ldw	r19,4(r10)
802106c8:	4802b416 	blt	r9,zero,8021119c <___vfiprintf_internal_r+0x119c>
802106cc:	013fdfc4 	movi	r4,-129
802106d0:	94c6b03a 	or	r3,r18,r19
802106d4:	d8802215 	stw	r2,136(sp)
802106d8:	a128703a 	and	r20,r20,r4
802106dc:	1800a226 	beq	r3,zero,80210968 <___vfiprintf_internal_r+0x968>
802106e0:	0039883a 	mov	fp,zero
802106e4:	dd401a04 	addi	r21,sp,104
802106e8:	9006d0fa 	srli	r3,r18,3
802106ec:	9808977a 	slli	r4,r19,29
802106f0:	9826d0fa 	srli	r19,r19,3
802106f4:	948001cc 	andi	r18,r18,7
802106f8:	90800c04 	addi	r2,r18,48
802106fc:	ad7fffc4 	addi	r21,r21,-1
80210700:	20e4b03a 	or	r18,r4,r3
80210704:	a8800005 	stb	r2,0(r21)
80210708:	94c6b03a 	or	r3,r18,r19
8021070c:	183ff61e 	bne	r3,zero,802106e8 <__reset+0xfa1f06e8>
80210710:	a0c0004c 	andi	r3,r20,1
80210714:	18005926 	beq	r3,zero,8021087c <___vfiprintf_internal_r+0x87c>
80210718:	10803fcc 	andi	r2,r2,255
8021071c:	1080201c 	xori	r2,r2,128
80210720:	10bfe004 	addi	r2,r2,-128
80210724:	00c00c04 	movi	r3,48
80210728:	10c05426 	beq	r2,r3,8021087c <___vfiprintf_internal_r+0x87c>
8021072c:	da801e17 	ldw	r10,120(sp)
80210730:	a8bfffc4 	addi	r2,r21,-1
80210734:	a8ffffc5 	stb	r3,-1(r21)
80210738:	50a7c83a 	sub	r19,r10,r2
8021073c:	102b883a 	mov	r21,r2
80210740:	003f2f06 	br	80210400 <__reset+0xfa1f0400>
80210744:	21003fcc 	andi	r4,r4,255
80210748:	2003421e 	bne	r4,zero,80211454 <___vfiprintf_internal_r+0x1454>
8021074c:	00a008b4 	movhi	r2,32802
80210750:	10acc004 	addi	r2,r2,-19712
80210754:	d8802615 	stw	r2,152(sp)
80210758:	a080080c 	andi	r2,r20,32
8021075c:	1000aa26 	beq	r2,zero,80210a08 <___vfiprintf_internal_r+0xa08>
80210760:	da802217 	ldw	r10,136(sp)
80210764:	54800017 	ldw	r18,0(r10)
80210768:	54c00117 	ldw	r19,4(r10)
8021076c:	52800204 	addi	r10,r10,8
80210770:	da802215 	stw	r10,136(sp)
80210774:	a080004c 	andi	r2,r20,1
80210778:	1001d226 	beq	r2,zero,80210ec4 <___vfiprintf_internal_r+0xec4>
8021077c:	94c4b03a 	or	r2,r18,r19
80210780:	1002351e 	bne	r2,zero,80211058 <___vfiprintf_internal_r+0x1058>
80210784:	d8001d85 	stb	zero,118(sp)
80210788:	48022216 	blt	r9,zero,80211014 <___vfiprintf_internal_r+0x1014>
8021078c:	00bfdfc4 	movi	r2,-129
80210790:	a0a8703a 	and	r20,r20,r2
80210794:	003f1506 	br	802103ec <__reset+0xfa1f03ec>
80210798:	da802217 	ldw	r10,136(sp)
8021079c:	04800044 	movi	r18,1
802107a0:	d8001d85 	stb	zero,118(sp)
802107a4:	50800017 	ldw	r2,0(r10)
802107a8:	52800104 	addi	r10,r10,4
802107ac:	da802215 	stw	r10,136(sp)
802107b0:	d8801005 	stb	r2,64(sp)
802107b4:	9027883a 	mov	r19,r18
802107b8:	dd401004 	addi	r21,sp,64
802107bc:	0013883a 	mov	r9,zero
802107c0:	003f1706 	br	80210420 <__reset+0xfa1f0420>
802107c4:	21003fcc 	andi	r4,r4,255
802107c8:	2003201e 	bne	r4,zero,8021144c <___vfiprintf_internal_r+0x144c>
802107cc:	a080080c 	andi	r2,r20,32
802107d0:	10004b26 	beq	r2,zero,80210900 <___vfiprintf_internal_r+0x900>
802107d4:	da802217 	ldw	r10,136(sp)
802107d8:	50800117 	ldw	r2,4(r10)
802107dc:	54800017 	ldw	r18,0(r10)
802107e0:	52800204 	addi	r10,r10,8
802107e4:	da802215 	stw	r10,136(sp)
802107e8:	1027883a 	mov	r19,r2
802107ec:	10022c16 	blt	r2,zero,802110a0 <___vfiprintf_internal_r+0x10a0>
802107f0:	df001d83 	ldbu	fp,118(sp)
802107f4:	48007216 	blt	r9,zero,802109c0 <___vfiprintf_internal_r+0x9c0>
802107f8:	00ffdfc4 	movi	r3,-129
802107fc:	94c4b03a 	or	r2,r18,r19
80210800:	a0e8703a 	and	r20,r20,r3
80210804:	1000cc26 	beq	r2,zero,80210b38 <___vfiprintf_internal_r+0xb38>
80210808:	98021026 	beq	r19,zero,8021104c <___vfiprintf_internal_r+0x104c>
8021080c:	dc402415 	stw	r17,144(sp)
80210810:	dc002515 	stw	r16,148(sp)
80210814:	9823883a 	mov	r17,r19
80210818:	9021883a 	mov	r16,r18
8021081c:	dd401a04 	addi	r21,sp,104
80210820:	4825883a 	mov	r18,r9
80210824:	4027883a 	mov	r19,r8
80210828:	8009883a 	mov	r4,r16
8021082c:	880b883a 	mov	r5,r17
80210830:	01800284 	movi	r6,10
80210834:	000f883a 	mov	r7,zero
80210838:	02123e00 	call	802123e0 <__umoddi3>
8021083c:	10800c04 	addi	r2,r2,48
80210840:	ad7fffc4 	addi	r21,r21,-1
80210844:	8009883a 	mov	r4,r16
80210848:	880b883a 	mov	r5,r17
8021084c:	a8800005 	stb	r2,0(r21)
80210850:	01800284 	movi	r6,10
80210854:	000f883a 	mov	r7,zero
80210858:	0211e680 	call	80211e68 <__udivdi3>
8021085c:	1021883a 	mov	r16,r2
80210860:	10c4b03a 	or	r2,r2,r3
80210864:	1823883a 	mov	r17,r3
80210868:	103fef1e 	bne	r2,zero,80210828 <__reset+0xfa1f0828>
8021086c:	dc402417 	ldw	r17,144(sp)
80210870:	dc002517 	ldw	r16,148(sp)
80210874:	9013883a 	mov	r9,r18
80210878:	9811883a 	mov	r8,r19
8021087c:	da801e17 	ldw	r10,120(sp)
80210880:	5567c83a 	sub	r19,r10,r21
80210884:	003ede06 	br	80210400 <__reset+0xfa1f0400>
80210888:	38803fcc 	andi	r2,r7,255
8021088c:	1080201c 	xori	r2,r2,128
80210890:	10bfe004 	addi	r2,r2,-128
80210894:	1002371e 	bne	r2,zero,80211174 <___vfiprintf_internal_r+0x1174>
80210898:	01000044 	movi	r4,1
8021089c:	01c00804 	movi	r7,32
802108a0:	80c00007 	ldb	r3,0(r16)
802108a4:	003e3506 	br	8021017c <__reset+0xfa1f017c>
802108a8:	a5000054 	ori	r20,r20,1
802108ac:	80c00007 	ldb	r3,0(r16)
802108b0:	003e3206 	br	8021017c <__reset+0xfa1f017c>
802108b4:	a5002014 	ori	r20,r20,128
802108b8:	80c00007 	ldb	r3,0(r16)
802108bc:	003e2f06 	br	8021017c <__reset+0xfa1f017c>
802108c0:	8015883a 	mov	r10,r16
802108c4:	0023883a 	mov	r17,zero
802108c8:	18bff404 	addi	r2,r3,-48
802108cc:	50c00007 	ldb	r3,0(r10)
802108d0:	8c4002a4 	muli	r17,r17,10
802108d4:	84000044 	addi	r16,r16,1
802108d8:	8015883a 	mov	r10,r16
802108dc:	1463883a 	add	r17,r2,r17
802108e0:	18bff404 	addi	r2,r3,-48
802108e4:	30bff92e 	bgeu	r6,r2,802108cc <__reset+0xfa1f08cc>
802108e8:	003e2506 	br	80210180 <__reset+0xfa1f0180>
802108ec:	21003fcc 	andi	r4,r4,255
802108f0:	2002d41e 	bne	r4,zero,80211444 <___vfiprintf_internal_r+0x1444>
802108f4:	a5000414 	ori	r20,r20,16
802108f8:	a080080c 	andi	r2,r20,32
802108fc:	103fb51e 	bne	r2,zero,802107d4 <__reset+0xfa1f07d4>
80210900:	a080040c 	andi	r2,r20,16
80210904:	1001f826 	beq	r2,zero,802110e8 <___vfiprintf_internal_r+0x10e8>
80210908:	da802217 	ldw	r10,136(sp)
8021090c:	54800017 	ldw	r18,0(r10)
80210910:	52800104 	addi	r10,r10,4
80210914:	da802215 	stw	r10,136(sp)
80210918:	9027d7fa 	srai	r19,r18,31
8021091c:	9805883a 	mov	r2,r19
80210920:	003fb206 	br	802107ec <__reset+0xfa1f07ec>
80210924:	21003fcc 	andi	r4,r4,255
80210928:	2002c41e 	bne	r4,zero,8021143c <___vfiprintf_internal_r+0x143c>
8021092c:	a5000414 	ori	r20,r20,16
80210930:	a080080c 	andi	r2,r20,32
80210934:	103f5f1e 	bne	r2,zero,802106b4 <__reset+0xfa1f06b4>
80210938:	a080040c 	andi	r2,r20,16
8021093c:	10020f26 	beq	r2,zero,8021117c <___vfiprintf_internal_r+0x117c>
80210940:	da802217 	ldw	r10,136(sp)
80210944:	d8001d85 	stb	zero,118(sp)
80210948:	0027883a 	mov	r19,zero
8021094c:	50800104 	addi	r2,r10,4
80210950:	54800017 	ldw	r18,0(r10)
80210954:	48021116 	blt	r9,zero,8021119c <___vfiprintf_internal_r+0x119c>
80210958:	00ffdfc4 	movi	r3,-129
8021095c:	d8802215 	stw	r2,136(sp)
80210960:	a0e8703a 	and	r20,r20,r3
80210964:	903f5e1e 	bne	r18,zero,802106e0 <__reset+0xfa1f06e0>
80210968:	0039883a 	mov	fp,zero
8021096c:	4802a626 	beq	r9,zero,80211408 <___vfiprintf_internal_r+0x1408>
80210970:	0025883a 	mov	r18,zero
80210974:	0027883a 	mov	r19,zero
80210978:	003f5a06 	br	802106e4 <__reset+0xfa1f06e4>
8021097c:	21003fcc 	andi	r4,r4,255
80210980:	20029f1e 	bne	r4,zero,80211400 <___vfiprintf_internal_r+0x1400>
80210984:	a5000414 	ori	r20,r20,16
80210988:	a080080c 	andi	r2,r20,32
8021098c:	10005e1e 	bne	r2,zero,80210b08 <___vfiprintf_internal_r+0xb08>
80210990:	a080040c 	andi	r2,r20,16
80210994:	1001a21e 	bne	r2,zero,80211020 <___vfiprintf_internal_r+0x1020>
80210998:	a080100c 	andi	r2,r20,64
8021099c:	d8001d85 	stb	zero,118(sp)
802109a0:	da802217 	ldw	r10,136(sp)
802109a4:	1002231e 	bne	r2,zero,80211234 <___vfiprintf_internal_r+0x1234>
802109a8:	50800104 	addi	r2,r10,4
802109ac:	54800017 	ldw	r18,0(r10)
802109b0:	0027883a 	mov	r19,zero
802109b4:	4801a00e 	bge	r9,zero,80211038 <___vfiprintf_internal_r+0x1038>
802109b8:	d8802215 	stw	r2,136(sp)
802109bc:	0039883a 	mov	fp,zero
802109c0:	94c4b03a 	or	r2,r18,r19
802109c4:	103f901e 	bne	r2,zero,80210808 <__reset+0xfa1f0808>
802109c8:	00800044 	movi	r2,1
802109cc:	10803fcc 	andi	r2,r2,255
802109d0:	00c00044 	movi	r3,1
802109d4:	10c05926 	beq	r2,r3,80210b3c <___vfiprintf_internal_r+0xb3c>
802109d8:	00c00084 	movi	r3,2
802109dc:	10ffe41e 	bne	r2,r3,80210970 <__reset+0xfa1f0970>
802109e0:	0025883a 	mov	r18,zero
802109e4:	0027883a 	mov	r19,zero
802109e8:	00013d06 	br	80210ee0 <___vfiprintf_internal_r+0xee0>
802109ec:	21003fcc 	andi	r4,r4,255
802109f0:	2002811e 	bne	r4,zero,802113f8 <___vfiprintf_internal_r+0x13f8>
802109f4:	00a008b4 	movhi	r2,32802
802109f8:	10acbb04 	addi	r2,r2,-19732
802109fc:	d8802615 	stw	r2,152(sp)
80210a00:	a080080c 	andi	r2,r20,32
80210a04:	103f561e 	bne	r2,zero,80210760 <__reset+0xfa1f0760>
80210a08:	a080040c 	andi	r2,r20,16
80210a0c:	1001d126 	beq	r2,zero,80211154 <___vfiprintf_internal_r+0x1154>
80210a10:	da802217 	ldw	r10,136(sp)
80210a14:	0027883a 	mov	r19,zero
80210a18:	54800017 	ldw	r18,0(r10)
80210a1c:	52800104 	addi	r10,r10,4
80210a20:	da802215 	stw	r10,136(sp)
80210a24:	003f5306 	br	80210774 <__reset+0xfa1f0774>
80210a28:	da802217 	ldw	r10,136(sp)
80210a2c:	d8001d85 	stb	zero,118(sp)
80210a30:	55400017 	ldw	r21,0(r10)
80210a34:	50c00104 	addi	r3,r10,4
80210a38:	a8024226 	beq	r21,zero,80211344 <___vfiprintf_internal_r+0x1344>
80210a3c:	48021816 	blt	r9,zero,802112a0 <___vfiprintf_internal_r+0x12a0>
80210a40:	480d883a 	mov	r6,r9
80210a44:	000b883a 	mov	r5,zero
80210a48:	a809883a 	mov	r4,r21
80210a4c:	d8c02a15 	stw	r3,168(sp)
80210a50:	da002b15 	stw	r8,172(sp)
80210a54:	da402c15 	stw	r9,176(sp)
80210a58:	020cf380 	call	8020cf38 <memchr>
80210a5c:	d8c02a17 	ldw	r3,168(sp)
80210a60:	da002b17 	ldw	r8,172(sp)
80210a64:	da402c17 	ldw	r9,176(sp)
80210a68:	10024826 	beq	r2,zero,8021138c <___vfiprintf_internal_r+0x138c>
80210a6c:	1567c83a 	sub	r19,r2,r21
80210a70:	df001d83 	ldbu	fp,118(sp)
80210a74:	d8c02215 	stw	r3,136(sp)
80210a78:	0013883a 	mov	r9,zero
80210a7c:	003e6006 	br	80210400 <__reset+0xfa1f0400>
80210a80:	21003fcc 	andi	r4,r4,255
80210a84:	203fc026 	beq	r4,zero,80210988 <__reset+0xfa1f0988>
80210a88:	d9c01d85 	stb	r7,118(sp)
80210a8c:	003fbe06 	br	80210988 <__reset+0xfa1f0988>
80210a90:	da802217 	ldw	r10,136(sp)
80210a94:	54400017 	ldw	r17,0(r10)
80210a98:	50800104 	addi	r2,r10,4
80210a9c:	883e3b16 	blt	r17,zero,8021038c <__reset+0xfa1f038c>
80210aa0:	d8802215 	stw	r2,136(sp)
80210aa4:	80c00007 	ldb	r3,0(r16)
80210aa8:	003db406 	br	8021017c <__reset+0xfa1f017c>
80210aac:	01000044 	movi	r4,1
80210ab0:	01c00ac4 	movi	r7,43
80210ab4:	80c00007 	ldb	r3,0(r16)
80210ab8:	003db006 	br	8021017c <__reset+0xfa1f017c>
80210abc:	80c00007 	ldb	r3,0(r16)
80210ac0:	82800044 	addi	r10,r16,1
80210ac4:	1b423c26 	beq	r3,r13,802113b8 <___vfiprintf_internal_r+0x13b8>
80210ac8:	18bff404 	addi	r2,r3,-48
80210acc:	0013883a 	mov	r9,zero
80210ad0:	30822b36 	bltu	r6,r2,80211380 <___vfiprintf_internal_r+0x1380>
80210ad4:	50c00007 	ldb	r3,0(r10)
80210ad8:	4a4002a4 	muli	r9,r9,10
80210adc:	54000044 	addi	r16,r10,1
80210ae0:	8015883a 	mov	r10,r16
80210ae4:	4893883a 	add	r9,r9,r2
80210ae8:	18bff404 	addi	r2,r3,-48
80210aec:	30bff92e 	bgeu	r6,r2,80210ad4 <__reset+0xfa1f0ad4>
80210af0:	483da30e 	bge	r9,zero,80210180 <__reset+0xfa1f0180>
80210af4:	027fffc4 	movi	r9,-1
80210af8:	003da106 	br	80210180 <__reset+0xfa1f0180>
80210afc:	a5001014 	ori	r20,r20,64
80210b00:	80c00007 	ldb	r3,0(r16)
80210b04:	003d9d06 	br	8021017c <__reset+0xfa1f017c>
80210b08:	da802217 	ldw	r10,136(sp)
80210b0c:	d8001d85 	stb	zero,118(sp)
80210b10:	50c00204 	addi	r3,r10,8
80210b14:	54800017 	ldw	r18,0(r10)
80210b18:	54c00117 	ldw	r19,4(r10)
80210b1c:	4801ca16 	blt	r9,zero,80211248 <___vfiprintf_internal_r+0x1248>
80210b20:	013fdfc4 	movi	r4,-129
80210b24:	94c4b03a 	or	r2,r18,r19
80210b28:	d8c02215 	stw	r3,136(sp)
80210b2c:	a128703a 	and	r20,r20,r4
80210b30:	0039883a 	mov	fp,zero
80210b34:	103f341e 	bne	r2,zero,80210808 <__reset+0xfa1f0808>
80210b38:	483e2e26 	beq	r9,zero,802103f4 <__reset+0xfa1f03f4>
80210b3c:	0025883a 	mov	r18,zero
80210b40:	94800c04 	addi	r18,r18,48
80210b44:	dc8019c5 	stb	r18,103(sp)
80210b48:	dcc02717 	ldw	r19,156(sp)
80210b4c:	dd4019c4 	addi	r21,sp,103
80210b50:	003e2b06 	br	80210400 <__reset+0xfa1f0400>
80210b54:	21003fcc 	andi	r4,r4,255
80210b58:	2002361e 	bne	r4,zero,80211434 <___vfiprintf_internal_r+0x1434>
80210b5c:	1801c126 	beq	r3,zero,80211264 <___vfiprintf_internal_r+0x1264>
80210b60:	04800044 	movi	r18,1
80210b64:	d8c01005 	stb	r3,64(sp)
80210b68:	d8001d85 	stb	zero,118(sp)
80210b6c:	9027883a 	mov	r19,r18
80210b70:	dd401004 	addi	r21,sp,64
80210b74:	003f1106 	br	802107bc <__reset+0xfa1f07bc>
80210b78:	d9402117 	ldw	r5,132(sp)
80210b7c:	d9002017 	ldw	r4,128(sp)
80210b80:	d9801a04 	addi	r6,sp,104
80210b84:	d9c02b15 	stw	r7,172(sp)
80210b88:	dbc02a15 	stw	r15,168(sp)
80210b8c:	020feec0 	call	8020feec <__sprint_r.part.0>
80210b90:	d9c02b17 	ldw	r7,172(sp)
80210b94:	dbc02a17 	ldw	r15,168(sp)
80210b98:	10006d1e 	bne	r2,zero,80210d50 <___vfiprintf_internal_r+0xd50>
80210b9c:	d9801b17 	ldw	r6,108(sp)
80210ba0:	d8801c17 	ldw	r2,112(sp)
80210ba4:	d811883a 	mov	r8,sp
80210ba8:	31400044 	addi	r5,r6,1
80210bac:	003e3306 	br	8021047c <__reset+0xfa1f047c>
80210bb0:	d9401b17 	ldw	r5,108(sp)
80210bb4:	d8801c17 	ldw	r2,112(sp)
80210bb8:	29000044 	addi	r4,r5,1
80210bbc:	d8c01d87 	ldb	r3,118(sp)
80210bc0:	183e4d26 	beq	r3,zero,802104f8 <__reset+0xfa1f04f8>
80210bc4:	00c00044 	movi	r3,1
80210bc8:	d9401d84 	addi	r5,sp,118
80210bcc:	10c5883a 	add	r2,r2,r3
80210bd0:	41400015 	stw	r5,0(r8)
80210bd4:	40c00115 	stw	r3,4(r8)
80210bd8:	d8801c15 	stw	r2,112(sp)
80210bdc:	d9001b15 	stw	r4,108(sp)
80210be0:	014001c4 	movi	r5,7
80210be4:	2900a90e 	bge	r5,r4,80210e8c <___vfiprintf_internal_r+0xe8c>
80210be8:	1000da1e 	bne	r2,zero,80210f54 <___vfiprintf_internal_r+0xf54>
80210bec:	7000ab1e 	bne	r14,zero,80210e9c <___vfiprintf_internal_r+0xe9c>
80210bf0:	000b883a 	mov	r5,zero
80210bf4:	1809883a 	mov	r4,r3
80210bf8:	d811883a 	mov	r8,sp
80210bfc:	00c02004 	movi	r3,128
80210c00:	e0fe4d26 	beq	fp,r3,80210538 <__reset+0xfa1f0538>
80210c04:	4cf9c83a 	sub	fp,r9,r19
80210c08:	073e7b0e 	bge	zero,fp,802105f8 <__reset+0xfa1f05f8>
80210c0c:	01c00404 	movi	r7,16
80210c10:	3f01900e 	bge	r7,fp,80211254 <___vfiprintf_internal_r+0x1254>
80210c14:	00e008b4 	movhi	r3,32802
80210c18:	18ed3004 	addi	r3,r3,-19264
80210c1c:	d8c02415 	stw	r3,144(sp)
80210c20:	034001c4 	movi	r13,7
80210c24:	00000506 	br	80210c3c <___vfiprintf_internal_r+0xc3c>
80210c28:	29000084 	addi	r4,r5,2
80210c2c:	42000204 	addi	r8,r8,8
80210c30:	180b883a 	mov	r5,r3
80210c34:	e73ffc04 	addi	fp,fp,-16
80210c38:	3f000d0e 	bge	r7,fp,80210c70 <___vfiprintf_internal_r+0xc70>
80210c3c:	10800404 	addi	r2,r2,16
80210c40:	28c00044 	addi	r3,r5,1
80210c44:	45c00015 	stw	r23,0(r8)
80210c48:	41c00115 	stw	r7,4(r8)
80210c4c:	d8801c15 	stw	r2,112(sp)
80210c50:	d8c01b15 	stw	r3,108(sp)
80210c54:	68fff40e 	bge	r13,r3,80210c28 <__reset+0xfa1f0c28>
80210c58:	1000101e 	bne	r2,zero,80210c9c <___vfiprintf_internal_r+0xc9c>
80210c5c:	e73ffc04 	addi	fp,fp,-16
80210c60:	01000044 	movi	r4,1
80210c64:	000b883a 	mov	r5,zero
80210c68:	d811883a 	mov	r8,sp
80210c6c:	3f3ff316 	blt	r7,fp,80210c3c <__reset+0xfa1f0c3c>
80210c70:	da802417 	ldw	r10,144(sp)
80210c74:	1705883a 	add	r2,r2,fp
80210c78:	47000115 	stw	fp,4(r8)
80210c7c:	42800015 	stw	r10,0(r8)
80210c80:	d8801c15 	stw	r2,112(sp)
80210c84:	d9001b15 	stw	r4,108(sp)
80210c88:	00c001c4 	movi	r3,7
80210c8c:	19003616 	blt	r3,r4,80210d68 <___vfiprintf_internal_r+0xd68>
80210c90:	42000204 	addi	r8,r8,8
80210c94:	21000044 	addi	r4,r4,1
80210c98:	003e5706 	br	802105f8 <__reset+0xfa1f05f8>
80210c9c:	d9402117 	ldw	r5,132(sp)
80210ca0:	d9002017 	ldw	r4,128(sp)
80210ca4:	d9801a04 	addi	r6,sp,104
80210ca8:	d9c02b15 	stw	r7,172(sp)
80210cac:	db402a15 	stw	r13,168(sp)
80210cb0:	020feec0 	call	8020feec <__sprint_r.part.0>
80210cb4:	d9c02b17 	ldw	r7,172(sp)
80210cb8:	db402a17 	ldw	r13,168(sp)
80210cbc:	1000241e 	bne	r2,zero,80210d50 <___vfiprintf_internal_r+0xd50>
80210cc0:	d9401b17 	ldw	r5,108(sp)
80210cc4:	d8801c17 	ldw	r2,112(sp)
80210cc8:	d811883a 	mov	r8,sp
80210ccc:	29000044 	addi	r4,r5,1
80210cd0:	003fd806 	br	80210c34 <__reset+0xfa1f0c34>
80210cd4:	d9401b17 	ldw	r5,108(sp)
80210cd8:	00e008b4 	movhi	r3,32802
80210cdc:	18ed3404 	addi	r3,r3,-19248
80210ce0:	d8c02415 	stw	r3,144(sp)
80210ce4:	29400044 	addi	r5,r5,1
80210ce8:	d8c02417 	ldw	r3,144(sp)
80210cec:	14c5883a 	add	r2,r2,r19
80210cf0:	44c00115 	stw	r19,4(r8)
80210cf4:	40c00015 	stw	r3,0(r8)
80210cf8:	d8801c15 	stw	r2,112(sp)
80210cfc:	d9401b15 	stw	r5,108(sp)
80210d00:	00c001c4 	movi	r3,7
80210d04:	1940070e 	bge	r3,r5,80210d24 <___vfiprintf_internal_r+0xd24>
80210d08:	103e4826 	beq	r2,zero,8021062c <__reset+0xfa1f062c>
80210d0c:	d9402117 	ldw	r5,132(sp)
80210d10:	d9002017 	ldw	r4,128(sp)
80210d14:	d9801a04 	addi	r6,sp,104
80210d18:	020feec0 	call	8020feec <__sprint_r.part.0>
80210d1c:	10000c1e 	bne	r2,zero,80210d50 <___vfiprintf_internal_r+0xd50>
80210d20:	d8801c17 	ldw	r2,112(sp)
80210d24:	8c80010e 	bge	r17,r18,80210d2c <___vfiprintf_internal_r+0xd2c>
80210d28:	9023883a 	mov	r17,r18
80210d2c:	da802317 	ldw	r10,140(sp)
80210d30:	5455883a 	add	r10,r10,r17
80210d34:	da802315 	stw	r10,140(sp)
80210d38:	103e4126 	beq	r2,zero,80210640 <__reset+0xfa1f0640>
80210d3c:	d9402117 	ldw	r5,132(sp)
80210d40:	d9002017 	ldw	r4,128(sp)
80210d44:	d9801a04 	addi	r6,sp,104
80210d48:	020feec0 	call	8020feec <__sprint_r.part.0>
80210d4c:	103e3c26 	beq	r2,zero,80210640 <__reset+0xfa1f0640>
80210d50:	dd002117 	ldw	r20,132(sp)
80210d54:	a080030b 	ldhu	r2,12(r20)
80210d58:	1080100c 	andi	r2,r2,64
80210d5c:	1001231e 	bne	r2,zero,802111ec <___vfiprintf_internal_r+0x11ec>
80210d60:	d8802317 	ldw	r2,140(sp)
80210d64:	003d7b06 	br	80210354 <__reset+0xfa1f0354>
80210d68:	1000991e 	bne	r2,zero,80210fd0 <___vfiprintf_internal_r+0xfd0>
80210d6c:	00c00044 	movi	r3,1
80210d70:	9805883a 	mov	r2,r19
80210d74:	dd400015 	stw	r21,0(sp)
80210d78:	dcc00115 	stw	r19,4(sp)
80210d7c:	dcc01c15 	stw	r19,112(sp)
80210d80:	d8c01b15 	stw	r3,108(sp)
80210d84:	d811883a 	mov	r8,sp
80210d88:	42000204 	addi	r8,r8,8
80210d8c:	a2c0010c 	andi	r11,r20,4
80210d90:	583fe426 	beq	r11,zero,80210d24 <__reset+0xfa1f0d24>
80210d94:	8ca7c83a 	sub	r19,r17,r18
80210d98:	04ffe20e 	bge	zero,r19,80210d24 <__reset+0xfa1f0d24>
80210d9c:	01c00404 	movi	r7,16
80210da0:	3cffcc0e 	bge	r7,r19,80210cd4 <__reset+0xfa1f0cd4>
80210da4:	02a008b4 	movhi	r10,32802
80210da8:	52ad3404 	addi	r10,r10,-19248
80210dac:	d9001b17 	ldw	r4,108(sp)
80210db0:	da802415 	stw	r10,144(sp)
80210db4:	382b883a 	mov	r21,r7
80210db8:	050001c4 	movi	r20,7
80210dbc:	df002017 	ldw	fp,128(sp)
80210dc0:	00000506 	br	80210dd8 <___vfiprintf_internal_r+0xdd8>
80210dc4:	21400084 	addi	r5,r4,2
80210dc8:	42000204 	addi	r8,r8,8
80210dcc:	1809883a 	mov	r4,r3
80210dd0:	9cfffc04 	addi	r19,r19,-16
80210dd4:	acffc40e 	bge	r21,r19,80210ce8 <__reset+0xfa1f0ce8>
80210dd8:	10800404 	addi	r2,r2,16
80210ddc:	20c00044 	addi	r3,r4,1
80210de0:	45800015 	stw	r22,0(r8)
80210de4:	45400115 	stw	r21,4(r8)
80210de8:	d8801c15 	stw	r2,112(sp)
80210dec:	d8c01b15 	stw	r3,108(sp)
80210df0:	a0fff40e 	bge	r20,r3,80210dc4 <__reset+0xfa1f0dc4>
80210df4:	1000041e 	bne	r2,zero,80210e08 <___vfiprintf_internal_r+0xe08>
80210df8:	01400044 	movi	r5,1
80210dfc:	0009883a 	mov	r4,zero
80210e00:	d811883a 	mov	r8,sp
80210e04:	003ff206 	br	80210dd0 <__reset+0xfa1f0dd0>
80210e08:	d9402117 	ldw	r5,132(sp)
80210e0c:	d9801a04 	addi	r6,sp,104
80210e10:	e009883a 	mov	r4,fp
80210e14:	020feec0 	call	8020feec <__sprint_r.part.0>
80210e18:	103fcd1e 	bne	r2,zero,80210d50 <__reset+0xfa1f0d50>
80210e1c:	d9001b17 	ldw	r4,108(sp)
80210e20:	d8801c17 	ldw	r2,112(sp)
80210e24:	d811883a 	mov	r8,sp
80210e28:	21400044 	addi	r5,r4,1
80210e2c:	003fe806 	br	80210dd0 <__reset+0xfa1f0dd0>
80210e30:	d9402117 	ldw	r5,132(sp)
80210e34:	d9002017 	ldw	r4,128(sp)
80210e38:	d9801a04 	addi	r6,sp,104
80210e3c:	d9c02b15 	stw	r7,172(sp)
80210e40:	db402a15 	stw	r13,168(sp)
80210e44:	020feec0 	call	8020feec <__sprint_r.part.0>
80210e48:	d9c02b17 	ldw	r7,172(sp)
80210e4c:	db402a17 	ldw	r13,168(sp)
80210e50:	103fbf1e 	bne	r2,zero,80210d50 <__reset+0xfa1f0d50>
80210e54:	d9401b17 	ldw	r5,108(sp)
80210e58:	d8801c17 	ldw	r2,112(sp)
80210e5c:	d811883a 	mov	r8,sp
80210e60:	29800044 	addi	r6,r5,1
80210e64:	003dc406 	br	80210578 <__reset+0xfa1f0578>
80210e68:	1000d21e 	bne	r2,zero,802111b4 <___vfiprintf_internal_r+0x11b4>
80210e6c:	d8c01d87 	ldb	r3,118(sp)
80210e70:	18009526 	beq	r3,zero,802110c8 <___vfiprintf_internal_r+0x10c8>
80210e74:	00800044 	movi	r2,1
80210e78:	d8c01d84 	addi	r3,sp,118
80210e7c:	1009883a 	mov	r4,r2
80210e80:	d8c00015 	stw	r3,0(sp)
80210e84:	d8800115 	stw	r2,4(sp)
80210e88:	d811883a 	mov	r8,sp
80210e8c:	200b883a 	mov	r5,r4
80210e90:	42000204 	addi	r8,r8,8
80210e94:	21000044 	addi	r4,r4,1
80210e98:	003d9706 	br	802104f8 <__reset+0xfa1f04f8>
80210e9c:	d9001d04 	addi	r4,sp,116
80210ea0:	00800084 	movi	r2,2
80210ea4:	d9000015 	stw	r4,0(sp)
80210ea8:	d8800115 	stw	r2,4(sp)
80210eac:	1809883a 	mov	r4,r3
80210eb0:	d811883a 	mov	r8,sp
80210eb4:	200b883a 	mov	r5,r4
80210eb8:	42000204 	addi	r8,r8,8
80210ebc:	21000044 	addi	r4,r4,1
80210ec0:	003f4e06 	br	80210bfc <__reset+0xfa1f0bfc>
80210ec4:	d8001d85 	stb	zero,118(sp)
80210ec8:	48005016 	blt	r9,zero,8021100c <___vfiprintf_internal_r+0x100c>
80210ecc:	00ffdfc4 	movi	r3,-129
80210ed0:	94c4b03a 	or	r2,r18,r19
80210ed4:	a0e8703a 	and	r20,r20,r3
80210ed8:	103d4426 	beq	r2,zero,802103ec <__reset+0xfa1f03ec>
80210edc:	0039883a 	mov	fp,zero
80210ee0:	d9002617 	ldw	r4,152(sp)
80210ee4:	dd401a04 	addi	r21,sp,104
80210ee8:	908003cc 	andi	r2,r18,15
80210eec:	9806973a 	slli	r3,r19,28
80210ef0:	2085883a 	add	r2,r4,r2
80210ef4:	9024d13a 	srli	r18,r18,4
80210ef8:	10800003 	ldbu	r2,0(r2)
80210efc:	9826d13a 	srli	r19,r19,4
80210f00:	ad7fffc4 	addi	r21,r21,-1
80210f04:	1ca4b03a 	or	r18,r3,r18
80210f08:	a8800005 	stb	r2,0(r21)
80210f0c:	94c4b03a 	or	r2,r18,r19
80210f10:	103ff51e 	bne	r2,zero,80210ee8 <__reset+0xfa1f0ee8>
80210f14:	003e5906 	br	8021087c <__reset+0xfa1f087c>
80210f18:	d9402117 	ldw	r5,132(sp)
80210f1c:	d9002017 	ldw	r4,128(sp)
80210f20:	d9801a04 	addi	r6,sp,104
80210f24:	020feec0 	call	8020feec <__sprint_r.part.0>
80210f28:	103f891e 	bne	r2,zero,80210d50 <__reset+0xfa1f0d50>
80210f2c:	d8801c17 	ldw	r2,112(sp)
80210f30:	d811883a 	mov	r8,sp
80210f34:	003f9506 	br	80210d8c <__reset+0xfa1f0d8c>
80210f38:	d9402117 	ldw	r5,132(sp)
80210f3c:	d9002017 	ldw	r4,128(sp)
80210f40:	d9801a04 	addi	r6,sp,104
80210f44:	020feec0 	call	8020feec <__sprint_r.part.0>
80210f48:	103f811e 	bne	r2,zero,80210d50 <__reset+0xfa1f0d50>
80210f4c:	d811883a 	mov	r8,sp
80210f50:	003ced06 	br	80210308 <__reset+0xfa1f0308>
80210f54:	d9402117 	ldw	r5,132(sp)
80210f58:	d9002017 	ldw	r4,128(sp)
80210f5c:	d9801a04 	addi	r6,sp,104
80210f60:	da402c15 	stw	r9,176(sp)
80210f64:	db802a15 	stw	r14,168(sp)
80210f68:	020feec0 	call	8020feec <__sprint_r.part.0>
80210f6c:	da402c17 	ldw	r9,176(sp)
80210f70:	db802a17 	ldw	r14,168(sp)
80210f74:	103f761e 	bne	r2,zero,80210d50 <__reset+0xfa1f0d50>
80210f78:	d9401b17 	ldw	r5,108(sp)
80210f7c:	d8801c17 	ldw	r2,112(sp)
80210f80:	d811883a 	mov	r8,sp
80210f84:	29000044 	addi	r4,r5,1
80210f88:	003d5b06 	br	802104f8 <__reset+0xfa1f04f8>
80210f8c:	d9402117 	ldw	r5,132(sp)
80210f90:	d9002017 	ldw	r4,128(sp)
80210f94:	d9801a04 	addi	r6,sp,104
80210f98:	da402c15 	stw	r9,176(sp)
80210f9c:	020feec0 	call	8020feec <__sprint_r.part.0>
80210fa0:	da402c17 	ldw	r9,176(sp)
80210fa4:	103f6a1e 	bne	r2,zero,80210d50 <__reset+0xfa1f0d50>
80210fa8:	d9401b17 	ldw	r5,108(sp)
80210fac:	d8801c17 	ldw	r2,112(sp)
80210fb0:	d811883a 	mov	r8,sp
80210fb4:	29000044 	addi	r4,r5,1
80210fb8:	003f1006 	br	80210bfc <__reset+0xfa1f0bfc>
80210fbc:	1000c31e 	bne	r2,zero,802112cc <___vfiprintf_internal_r+0x12cc>
80210fc0:	01000044 	movi	r4,1
80210fc4:	000b883a 	mov	r5,zero
80210fc8:	d811883a 	mov	r8,sp
80210fcc:	003f0d06 	br	80210c04 <__reset+0xfa1f0c04>
80210fd0:	d9402117 	ldw	r5,132(sp)
80210fd4:	d9002017 	ldw	r4,128(sp)
80210fd8:	d9801a04 	addi	r6,sp,104
80210fdc:	020feec0 	call	8020feec <__sprint_r.part.0>
80210fe0:	103f5b1e 	bne	r2,zero,80210d50 <__reset+0xfa1f0d50>
80210fe4:	d9001b17 	ldw	r4,108(sp)
80210fe8:	d8801c17 	ldw	r2,112(sp)
80210fec:	d811883a 	mov	r8,sp
80210ff0:	21000044 	addi	r4,r4,1
80210ff4:	003d8006 	br	802105f8 <__reset+0xfa1f05f8>
80210ff8:	012008b4 	movhi	r4,32802
80210ffc:	212cc004 	addi	r4,r4,-19712
80211000:	d9002615 	stw	r4,152(sp)
80211004:	d8c02215 	stw	r3,136(sp)
80211008:	1029883a 	mov	r20,r2
8021100c:	94c4b03a 	or	r2,r18,r19
80211010:	103fb21e 	bne	r2,zero,80210edc <__reset+0xfa1f0edc>
80211014:	0039883a 	mov	fp,zero
80211018:	00800084 	movi	r2,2
8021101c:	003e6b06 	br	802109cc <__reset+0xfa1f09cc>
80211020:	da802217 	ldw	r10,136(sp)
80211024:	d8001d85 	stb	zero,118(sp)
80211028:	0027883a 	mov	r19,zero
8021102c:	50800104 	addi	r2,r10,4
80211030:	54800017 	ldw	r18,0(r10)
80211034:	483e6016 	blt	r9,zero,802109b8 <__reset+0xfa1f09b8>
80211038:	00ffdfc4 	movi	r3,-129
8021103c:	d8802215 	stw	r2,136(sp)
80211040:	a0e8703a 	and	r20,r20,r3
80211044:	0039883a 	mov	fp,zero
80211048:	903ebb26 	beq	r18,zero,80210b38 <__reset+0xfa1f0b38>
8021104c:	00800244 	movi	r2,9
80211050:	14bdee36 	bltu	r2,r18,8021080c <__reset+0xfa1f080c>
80211054:	003eba06 	br	80210b40 <__reset+0xfa1f0b40>
80211058:	00800c04 	movi	r2,48
8021105c:	d8c01d45 	stb	r3,117(sp)
80211060:	d8801d05 	stb	r2,116(sp)
80211064:	d8001d85 	stb	zero,118(sp)
80211068:	a0c00094 	ori	r3,r20,2
8021106c:	4800a916 	blt	r9,zero,80211314 <___vfiprintf_internal_r+0x1314>
80211070:	00bfdfc4 	movi	r2,-129
80211074:	a096703a 	and	r11,r20,r2
80211078:	5d000094 	ori	r20,r11,2
8021107c:	0039883a 	mov	fp,zero
80211080:	003f9706 	br	80210ee0 <__reset+0xfa1f0ee0>
80211084:	8025883a 	mov	r18,r16
80211088:	003c2e06 	br	80210144 <__reset+0xfa1f0144>
8021108c:	00a008b4 	movhi	r2,32802
80211090:	10acc004 	addi	r2,r2,-19712
80211094:	0039883a 	mov	fp,zero
80211098:	d8802615 	stw	r2,152(sp)
8021109c:	003f9006 	br	80210ee0 <__reset+0xfa1f0ee0>
802110a0:	04a5c83a 	sub	r18,zero,r18
802110a4:	07000b44 	movi	fp,45
802110a8:	9004c03a 	cmpne	r2,r18,zero
802110ac:	04e7c83a 	sub	r19,zero,r19
802110b0:	df001d85 	stb	fp,118(sp)
802110b4:	98a7c83a 	sub	r19,r19,r2
802110b8:	48009f16 	blt	r9,zero,80211338 <___vfiprintf_internal_r+0x1338>
802110bc:	00bfdfc4 	movi	r2,-129
802110c0:	a0a8703a 	and	r20,r20,r2
802110c4:	003dd006 	br	80210808 <__reset+0xfa1f0808>
802110c8:	70004c26 	beq	r14,zero,802111fc <___vfiprintf_internal_r+0x11fc>
802110cc:	00800084 	movi	r2,2
802110d0:	d8c01d04 	addi	r3,sp,116
802110d4:	d8c00015 	stw	r3,0(sp)
802110d8:	d8800115 	stw	r2,4(sp)
802110dc:	01000044 	movi	r4,1
802110e0:	d811883a 	mov	r8,sp
802110e4:	003f7306 	br	80210eb4 <__reset+0xfa1f0eb4>
802110e8:	a080100c 	andi	r2,r20,64
802110ec:	da802217 	ldw	r10,136(sp)
802110f0:	103e0626 	beq	r2,zero,8021090c <__reset+0xfa1f090c>
802110f4:	5480000f 	ldh	r18,0(r10)
802110f8:	52800104 	addi	r10,r10,4
802110fc:	da802215 	stw	r10,136(sp)
80211100:	9027d7fa 	srai	r19,r18,31
80211104:	9805883a 	mov	r2,r19
80211108:	003db806 	br	802107ec <__reset+0xfa1f07ec>
8021110c:	a080040c 	andi	r2,r20,16
80211110:	1000091e 	bne	r2,zero,80211138 <___vfiprintf_internal_r+0x1138>
80211114:	a2c0100c 	andi	r11,r20,64
80211118:	58000726 	beq	r11,zero,80211138 <___vfiprintf_internal_r+0x1138>
8021111c:	da802217 	ldw	r10,136(sp)
80211120:	50800017 	ldw	r2,0(r10)
80211124:	52800104 	addi	r10,r10,4
80211128:	da802215 	stw	r10,136(sp)
8021112c:	da802317 	ldw	r10,140(sp)
80211130:	1280000d 	sth	r10,0(r2)
80211134:	003be706 	br	802100d4 <__reset+0xfa1f00d4>
80211138:	da802217 	ldw	r10,136(sp)
8021113c:	50800017 	ldw	r2,0(r10)
80211140:	52800104 	addi	r10,r10,4
80211144:	da802215 	stw	r10,136(sp)
80211148:	da802317 	ldw	r10,140(sp)
8021114c:	12800015 	stw	r10,0(r2)
80211150:	003be006 	br	802100d4 <__reset+0xfa1f00d4>
80211154:	a080100c 	andi	r2,r20,64
80211158:	da802217 	ldw	r10,136(sp)
8021115c:	10003026 	beq	r2,zero,80211220 <___vfiprintf_internal_r+0x1220>
80211160:	5480000b 	ldhu	r18,0(r10)
80211164:	52800104 	addi	r10,r10,4
80211168:	0027883a 	mov	r19,zero
8021116c:	da802215 	stw	r10,136(sp)
80211170:	003d8006 	br	80210774 <__reset+0xfa1f0774>
80211174:	80c00007 	ldb	r3,0(r16)
80211178:	003c0006 	br	8021017c <__reset+0xfa1f017c>
8021117c:	a080100c 	andi	r2,r20,64
80211180:	d8001d85 	stb	zero,118(sp)
80211184:	da802217 	ldw	r10,136(sp)
80211188:	1000201e 	bne	r2,zero,8021120c <___vfiprintf_internal_r+0x120c>
8021118c:	50800104 	addi	r2,r10,4
80211190:	54800017 	ldw	r18,0(r10)
80211194:	0027883a 	mov	r19,zero
80211198:	483def0e 	bge	r9,zero,80210958 <__reset+0xfa1f0958>
8021119c:	94c6b03a 	or	r3,r18,r19
802111a0:	d8802215 	stw	r2,136(sp)
802111a4:	183d4e1e 	bne	r3,zero,802106e0 <__reset+0xfa1f06e0>
802111a8:	0039883a 	mov	fp,zero
802111ac:	0005883a 	mov	r2,zero
802111b0:	003e0606 	br	802109cc <__reset+0xfa1f09cc>
802111b4:	d9402117 	ldw	r5,132(sp)
802111b8:	d9002017 	ldw	r4,128(sp)
802111bc:	d9801a04 	addi	r6,sp,104
802111c0:	da402c15 	stw	r9,176(sp)
802111c4:	db802a15 	stw	r14,168(sp)
802111c8:	020feec0 	call	8020feec <__sprint_r.part.0>
802111cc:	da402c17 	ldw	r9,176(sp)
802111d0:	db802a17 	ldw	r14,168(sp)
802111d4:	103ede1e 	bne	r2,zero,80210d50 <__reset+0xfa1f0d50>
802111d8:	d9401b17 	ldw	r5,108(sp)
802111dc:	d8801c17 	ldw	r2,112(sp)
802111e0:	d811883a 	mov	r8,sp
802111e4:	29000044 	addi	r4,r5,1
802111e8:	003e7406 	br	80210bbc <__reset+0xfa1f0bbc>
802111ec:	00bfffc4 	movi	r2,-1
802111f0:	003c5806 	br	80210354 <__reset+0xfa1f0354>
802111f4:	d811883a 	mov	r8,sp
802111f8:	003ee806 	br	80210d9c <__reset+0xfa1f0d9c>
802111fc:	000b883a 	mov	r5,zero
80211200:	01000044 	movi	r4,1
80211204:	d811883a 	mov	r8,sp
80211208:	003e7c06 	br	80210bfc <__reset+0xfa1f0bfc>
8021120c:	50800104 	addi	r2,r10,4
80211210:	5480000b 	ldhu	r18,0(r10)
80211214:	0027883a 	mov	r19,zero
80211218:	483dcf0e 	bge	r9,zero,80210958 <__reset+0xfa1f0958>
8021121c:	003fdf06 	br	8021119c <__reset+0xfa1f119c>
80211220:	54800017 	ldw	r18,0(r10)
80211224:	52800104 	addi	r10,r10,4
80211228:	0027883a 	mov	r19,zero
8021122c:	da802215 	stw	r10,136(sp)
80211230:	003d5006 	br	80210774 <__reset+0xfa1f0774>
80211234:	50800104 	addi	r2,r10,4
80211238:	5480000b 	ldhu	r18,0(r10)
8021123c:	0027883a 	mov	r19,zero
80211240:	483f7d0e 	bge	r9,zero,80211038 <__reset+0xfa1f1038>
80211244:	003ddc06 	br	802109b8 <__reset+0xfa1f09b8>
80211248:	d8c02215 	stw	r3,136(sp)
8021124c:	0039883a 	mov	fp,zero
80211250:	003ddb06 	br	802109c0 <__reset+0xfa1f09c0>
80211254:	02a008b4 	movhi	r10,32802
80211258:	52ad3004 	addi	r10,r10,-19264
8021125c:	da802415 	stw	r10,144(sp)
80211260:	003e8306 	br	80210c70 <__reset+0xfa1f0c70>
80211264:	d8801c17 	ldw	r2,112(sp)
80211268:	dd002117 	ldw	r20,132(sp)
8021126c:	103eb926 	beq	r2,zero,80210d54 <__reset+0xfa1f0d54>
80211270:	d9002017 	ldw	r4,128(sp)
80211274:	d9801a04 	addi	r6,sp,104
80211278:	a00b883a 	mov	r5,r20
8021127c:	020feec0 	call	8020feec <__sprint_r.part.0>
80211280:	003eb406 	br	80210d54 <__reset+0xfa1f0d54>
80211284:	80c00043 	ldbu	r3,1(r16)
80211288:	a5000814 	ori	r20,r20,32
8021128c:	84000044 	addi	r16,r16,1
80211290:	18c03fcc 	andi	r3,r3,255
80211294:	18c0201c 	xori	r3,r3,128
80211298:	18ffe004 	addi	r3,r3,-128
8021129c:	003bb706 	br	8021017c <__reset+0xfa1f017c>
802112a0:	a809883a 	mov	r4,r21
802112a4:	d8c02a15 	stw	r3,168(sp)
802112a8:	da002b15 	stw	r8,172(sp)
802112ac:	02054b80 	call	802054b8 <strlen>
802112b0:	d8c02a17 	ldw	r3,168(sp)
802112b4:	1027883a 	mov	r19,r2
802112b8:	df001d83 	ldbu	fp,118(sp)
802112bc:	d8c02215 	stw	r3,136(sp)
802112c0:	0013883a 	mov	r9,zero
802112c4:	da002b17 	ldw	r8,172(sp)
802112c8:	003c4d06 	br	80210400 <__reset+0xfa1f0400>
802112cc:	d9402117 	ldw	r5,132(sp)
802112d0:	d9002017 	ldw	r4,128(sp)
802112d4:	d9801a04 	addi	r6,sp,104
802112d8:	da402c15 	stw	r9,176(sp)
802112dc:	020feec0 	call	8020feec <__sprint_r.part.0>
802112e0:	da402c17 	ldw	r9,176(sp)
802112e4:	103e9a1e 	bne	r2,zero,80210d50 <__reset+0xfa1f0d50>
802112e8:	d9401b17 	ldw	r5,108(sp)
802112ec:	d8801c17 	ldw	r2,112(sp)
802112f0:	d811883a 	mov	r8,sp
802112f4:	29000044 	addi	r4,r5,1
802112f8:	003e4206 	br	80210c04 <__reset+0xfa1f0c04>
802112fc:	d9401b17 	ldw	r5,108(sp)
80211300:	012008b4 	movhi	r4,32802
80211304:	212d3404 	addi	r4,r4,-19248
80211308:	d9002415 	stw	r4,144(sp)
8021130c:	29400044 	addi	r5,r5,1
80211310:	003c6d06 	br	802104c8 <__reset+0xfa1f04c8>
80211314:	0039883a 	mov	fp,zero
80211318:	00800084 	movi	r2,2
8021131c:	10803fcc 	andi	r2,r2,255
80211320:	01000044 	movi	r4,1
80211324:	11001e26 	beq	r2,r4,802113a0 <___vfiprintf_internal_r+0x13a0>
80211328:	01000084 	movi	r4,2
8021132c:	11001e1e 	bne	r2,r4,802113a8 <___vfiprintf_internal_r+0x13a8>
80211330:	1829883a 	mov	r20,r3
80211334:	003eea06 	br	80210ee0 <__reset+0xfa1f0ee0>
80211338:	a007883a 	mov	r3,r20
8021133c:	00800044 	movi	r2,1
80211340:	003ff606 	br	8021131c <__reset+0xfa1f131c>
80211344:	00800184 	movi	r2,6
80211348:	1240012e 	bgeu	r2,r9,80211350 <___vfiprintf_internal_r+0x1350>
8021134c:	1013883a 	mov	r9,r2
80211350:	4827883a 	mov	r19,r9
80211354:	4825883a 	mov	r18,r9
80211358:	48001516 	blt	r9,zero,802113b0 <___vfiprintf_internal_r+0x13b0>
8021135c:	056008b4 	movhi	r21,32802
80211360:	d8c02215 	stw	r3,136(sp)
80211364:	ad6cc504 	addi	r21,r21,-19692
80211368:	003d1406 	br	802107bc <__reset+0xfa1f07bc>
8021136c:	02a008b4 	movhi	r10,32802
80211370:	52ad3004 	addi	r10,r10,-19264
80211374:	da802415 	stw	r10,144(sp)
80211378:	200d883a 	mov	r6,r4
8021137c:	003c9106 	br	802105c4 <__reset+0xfa1f05c4>
80211380:	5021883a 	mov	r16,r10
80211384:	0013883a 	mov	r9,zero
80211388:	003b7d06 	br	80210180 <__reset+0xfa1f0180>
8021138c:	4827883a 	mov	r19,r9
80211390:	df001d83 	ldbu	fp,118(sp)
80211394:	d8c02215 	stw	r3,136(sp)
80211398:	0013883a 	mov	r9,zero
8021139c:	003c1806 	br	80210400 <__reset+0xfa1f0400>
802113a0:	1829883a 	mov	r20,r3
802113a4:	003d1806 	br	80210808 <__reset+0xfa1f0808>
802113a8:	1829883a 	mov	r20,r3
802113ac:	003ccd06 	br	802106e4 <__reset+0xfa1f06e4>
802113b0:	0025883a 	mov	r18,zero
802113b4:	003fe906 	br	8021135c <__reset+0xfa1f135c>
802113b8:	d8802217 	ldw	r2,136(sp)
802113bc:	80c00043 	ldbu	r3,1(r16)
802113c0:	5021883a 	mov	r16,r10
802113c4:	12400017 	ldw	r9,0(r2)
802113c8:	10800104 	addi	r2,r2,4
802113cc:	d8802215 	stw	r2,136(sp)
802113d0:	483faf0e 	bge	r9,zero,80211290 <__reset+0xfa1f1290>
802113d4:	18c03fcc 	andi	r3,r3,255
802113d8:	18c0201c 	xori	r3,r3,128
802113dc:	027fffc4 	movi	r9,-1
802113e0:	18ffe004 	addi	r3,r3,-128
802113e4:	003b6506 	br	8021017c <__reset+0xfa1f017c>
802113e8:	d9c01d85 	stb	r7,118(sp)
802113ec:	003ca006 	br	80210670 <__reset+0xfa1f0670>
802113f0:	d9c01d85 	stb	r7,118(sp)
802113f4:	003cad06 	br	802106ac <__reset+0xfa1f06ac>
802113f8:	d9c01d85 	stb	r7,118(sp)
802113fc:	003d7d06 	br	802109f4 <__reset+0xfa1f09f4>
80211400:	d9c01d85 	stb	r7,118(sp)
80211404:	003d5f06 	br	80210984 <__reset+0xfa1f0984>
80211408:	a080004c 	andi	r2,r20,1
8021140c:	0039883a 	mov	fp,zero
80211410:	10000526 	beq	r2,zero,80211428 <___vfiprintf_internal_r+0x1428>
80211414:	00800c04 	movi	r2,48
80211418:	d88019c5 	stb	r2,103(sp)
8021141c:	dcc02717 	ldw	r19,156(sp)
80211420:	dd4019c4 	addi	r21,sp,103
80211424:	003bf606 	br	80210400 <__reset+0xfa1f0400>
80211428:	0027883a 	mov	r19,zero
8021142c:	dd401a04 	addi	r21,sp,104
80211430:	003bf306 	br	80210400 <__reset+0xfa1f0400>
80211434:	d9c01d85 	stb	r7,118(sp)
80211438:	003dc806 	br	80210b5c <__reset+0xfa1f0b5c>
8021143c:	d9c01d85 	stb	r7,118(sp)
80211440:	003d3a06 	br	8021092c <__reset+0xfa1f092c>
80211444:	d9c01d85 	stb	r7,118(sp)
80211448:	003d2a06 	br	802108f4 <__reset+0xfa1f08f4>
8021144c:	d9c01d85 	stb	r7,118(sp)
80211450:	003cde06 	br	802107cc <__reset+0xfa1f07cc>
80211454:	d9c01d85 	stb	r7,118(sp)
80211458:	003cbc06 	br	8021074c <__reset+0xfa1f074c>

8021145c <__vfiprintf_internal>:
8021145c:	00a008b4 	movhi	r2,32802
80211460:	10b4fd04 	addi	r2,r2,-11276
80211464:	300f883a 	mov	r7,r6
80211468:	280d883a 	mov	r6,r5
8021146c:	200b883a 	mov	r5,r4
80211470:	11000017 	ldw	r4,0(r2)
80211474:	02100001 	jmpi	80210000 <___vfiprintf_internal_r>

80211478 <__sbprintf>:
80211478:	2880030b 	ldhu	r2,12(r5)
8021147c:	2ac01917 	ldw	r11,100(r5)
80211480:	2a80038b 	ldhu	r10,14(r5)
80211484:	2a400717 	ldw	r9,28(r5)
80211488:	2a000917 	ldw	r8,36(r5)
8021148c:	defee204 	addi	sp,sp,-1144
80211490:	00c10004 	movi	r3,1024
80211494:	dc011a15 	stw	r16,1128(sp)
80211498:	10bfff4c 	andi	r2,r2,65533
8021149c:	2821883a 	mov	r16,r5
802114a0:	d8cb883a 	add	r5,sp,r3
802114a4:	dc811c15 	stw	r18,1136(sp)
802114a8:	dc411b15 	stw	r17,1132(sp)
802114ac:	dfc11d15 	stw	ra,1140(sp)
802114b0:	2025883a 	mov	r18,r4
802114b4:	d881030d 	sth	r2,1036(sp)
802114b8:	dac11915 	stw	r11,1124(sp)
802114bc:	da81038d 	sth	r10,1038(sp)
802114c0:	da410715 	stw	r9,1052(sp)
802114c4:	da010915 	stw	r8,1060(sp)
802114c8:	dec10015 	stw	sp,1024(sp)
802114cc:	dec10415 	stw	sp,1040(sp)
802114d0:	d8c10215 	stw	r3,1032(sp)
802114d4:	d8c10515 	stw	r3,1044(sp)
802114d8:	d8010615 	stw	zero,1048(sp)
802114dc:	02100000 	call	80210000 <___vfiprintf_internal_r>
802114e0:	1023883a 	mov	r17,r2
802114e4:	10000416 	blt	r2,zero,802114f8 <__sbprintf+0x80>
802114e8:	d9410004 	addi	r5,sp,1024
802114ec:	9009883a 	mov	r4,r18
802114f0:	020b5f00 	call	8020b5f0 <_fflush_r>
802114f4:	10000d1e 	bne	r2,zero,8021152c <__sbprintf+0xb4>
802114f8:	d881030b 	ldhu	r2,1036(sp)
802114fc:	1080100c 	andi	r2,r2,64
80211500:	10000326 	beq	r2,zero,80211510 <__sbprintf+0x98>
80211504:	8080030b 	ldhu	r2,12(r16)
80211508:	10801014 	ori	r2,r2,64
8021150c:	8080030d 	sth	r2,12(r16)
80211510:	8805883a 	mov	r2,r17
80211514:	dfc11d17 	ldw	ra,1140(sp)
80211518:	dc811c17 	ldw	r18,1136(sp)
8021151c:	dc411b17 	ldw	r17,1132(sp)
80211520:	dc011a17 	ldw	r16,1128(sp)
80211524:	dec11e04 	addi	sp,sp,1144
80211528:	f800283a 	ret
8021152c:	047fffc4 	movi	r17,-1
80211530:	003ff106 	br	802114f8 <__reset+0xfa1f14f8>

80211534 <_write_r>:
80211534:	defffd04 	addi	sp,sp,-12
80211538:	2805883a 	mov	r2,r5
8021153c:	dc000015 	stw	r16,0(sp)
80211540:	042008b4 	movhi	r16,32802
80211544:	dc400115 	stw	r17,4(sp)
80211548:	300b883a 	mov	r5,r6
8021154c:	84351b04 	addi	r16,r16,-11156
80211550:	2023883a 	mov	r17,r4
80211554:	380d883a 	mov	r6,r7
80211558:	1009883a 	mov	r4,r2
8021155c:	dfc00215 	stw	ra,8(sp)
80211560:	80000015 	stw	zero,0(r16)
80211564:	0215b4c0 	call	80215b4c <write>
80211568:	00ffffc4 	movi	r3,-1
8021156c:	10c00526 	beq	r2,r3,80211584 <_write_r+0x50>
80211570:	dfc00217 	ldw	ra,8(sp)
80211574:	dc400117 	ldw	r17,4(sp)
80211578:	dc000017 	ldw	r16,0(sp)
8021157c:	dec00304 	addi	sp,sp,12
80211580:	f800283a 	ret
80211584:	80c00017 	ldw	r3,0(r16)
80211588:	183ff926 	beq	r3,zero,80211570 <__reset+0xfa1f1570>
8021158c:	88c00015 	stw	r3,0(r17)
80211590:	003ff706 	br	80211570 <__reset+0xfa1f1570>

80211594 <_close_r>:
80211594:	defffd04 	addi	sp,sp,-12
80211598:	dc000015 	stw	r16,0(sp)
8021159c:	042008b4 	movhi	r16,32802
802115a0:	dc400115 	stw	r17,4(sp)
802115a4:	84351b04 	addi	r16,r16,-11156
802115a8:	2023883a 	mov	r17,r4
802115ac:	2809883a 	mov	r4,r5
802115b0:	dfc00215 	stw	ra,8(sp)
802115b4:	80000015 	stw	zero,0(r16)
802115b8:	02152340 	call	80215234 <close>
802115bc:	00ffffc4 	movi	r3,-1
802115c0:	10c00526 	beq	r2,r3,802115d8 <_close_r+0x44>
802115c4:	dfc00217 	ldw	ra,8(sp)
802115c8:	dc400117 	ldw	r17,4(sp)
802115cc:	dc000017 	ldw	r16,0(sp)
802115d0:	dec00304 	addi	sp,sp,12
802115d4:	f800283a 	ret
802115d8:	80c00017 	ldw	r3,0(r16)
802115dc:	183ff926 	beq	r3,zero,802115c4 <__reset+0xfa1f15c4>
802115e0:	88c00015 	stw	r3,0(r17)
802115e4:	003ff706 	br	802115c4 <__reset+0xfa1f15c4>

802115e8 <_calloc_r>:
802115e8:	298b383a 	mul	r5,r5,r6
802115ec:	defffe04 	addi	sp,sp,-8
802115f0:	dfc00115 	stw	ra,4(sp)
802115f4:	dc000015 	stw	r16,0(sp)
802115f8:	020c72c0 	call	8020c72c <_malloc_r>
802115fc:	10002926 	beq	r2,zero,802116a4 <_calloc_r+0xbc>
80211600:	11bfff17 	ldw	r6,-4(r2)
80211604:	1021883a 	mov	r16,r2
80211608:	00bfff04 	movi	r2,-4
8021160c:	308c703a 	and	r6,r6,r2
80211610:	00c00904 	movi	r3,36
80211614:	308d883a 	add	r6,r6,r2
80211618:	19801636 	bltu	r3,r6,80211674 <_calloc_r+0x8c>
8021161c:	008004c4 	movi	r2,19
80211620:	11800b2e 	bgeu	r2,r6,80211650 <_calloc_r+0x68>
80211624:	80000015 	stw	zero,0(r16)
80211628:	80000115 	stw	zero,4(r16)
8021162c:	008006c4 	movi	r2,27
80211630:	11801a2e 	bgeu	r2,r6,8021169c <_calloc_r+0xb4>
80211634:	80000215 	stw	zero,8(r16)
80211638:	80000315 	stw	zero,12(r16)
8021163c:	30c0151e 	bne	r6,r3,80211694 <_calloc_r+0xac>
80211640:	80000415 	stw	zero,16(r16)
80211644:	80800604 	addi	r2,r16,24
80211648:	80000515 	stw	zero,20(r16)
8021164c:	00000106 	br	80211654 <_calloc_r+0x6c>
80211650:	8005883a 	mov	r2,r16
80211654:	10000015 	stw	zero,0(r2)
80211658:	10000115 	stw	zero,4(r2)
8021165c:	10000215 	stw	zero,8(r2)
80211660:	8005883a 	mov	r2,r16
80211664:	dfc00117 	ldw	ra,4(sp)
80211668:	dc000017 	ldw	r16,0(sp)
8021166c:	dec00204 	addi	sp,sp,8
80211670:	f800283a 	ret
80211674:	000b883a 	mov	r5,zero
80211678:	8009883a 	mov	r4,r16
8021167c:	020d1780 	call	8020d178 <memset>
80211680:	8005883a 	mov	r2,r16
80211684:	dfc00117 	ldw	ra,4(sp)
80211688:	dc000017 	ldw	r16,0(sp)
8021168c:	dec00204 	addi	sp,sp,8
80211690:	f800283a 	ret
80211694:	80800404 	addi	r2,r16,16
80211698:	003fee06 	br	80211654 <__reset+0xfa1f1654>
8021169c:	80800204 	addi	r2,r16,8
802116a0:	003fec06 	br	80211654 <__reset+0xfa1f1654>
802116a4:	0005883a 	mov	r2,zero
802116a8:	003fee06 	br	80211664 <__reset+0xfa1f1664>

802116ac <_fclose_r>:
802116ac:	28003926 	beq	r5,zero,80211794 <_fclose_r+0xe8>
802116b0:	defffc04 	addi	sp,sp,-16
802116b4:	dc400115 	stw	r17,4(sp)
802116b8:	dc000015 	stw	r16,0(sp)
802116bc:	dfc00315 	stw	ra,12(sp)
802116c0:	dc800215 	stw	r18,8(sp)
802116c4:	2023883a 	mov	r17,r4
802116c8:	2821883a 	mov	r16,r5
802116cc:	20000226 	beq	r4,zero,802116d8 <_fclose_r+0x2c>
802116d0:	20800e17 	ldw	r2,56(r4)
802116d4:	10002726 	beq	r2,zero,80211774 <_fclose_r+0xc8>
802116d8:	8080030f 	ldh	r2,12(r16)
802116dc:	1000071e 	bne	r2,zero,802116fc <_fclose_r+0x50>
802116e0:	0005883a 	mov	r2,zero
802116e4:	dfc00317 	ldw	ra,12(sp)
802116e8:	dc800217 	ldw	r18,8(sp)
802116ec:	dc400117 	ldw	r17,4(sp)
802116f0:	dc000017 	ldw	r16,0(sp)
802116f4:	dec00404 	addi	sp,sp,16
802116f8:	f800283a 	ret
802116fc:	800b883a 	mov	r5,r16
80211700:	8809883a 	mov	r4,r17
80211704:	020b3d40 	call	8020b3d4 <__sflush_r>
80211708:	1025883a 	mov	r18,r2
8021170c:	80800b17 	ldw	r2,44(r16)
80211710:	10000426 	beq	r2,zero,80211724 <_fclose_r+0x78>
80211714:	81400717 	ldw	r5,28(r16)
80211718:	8809883a 	mov	r4,r17
8021171c:	103ee83a 	callr	r2
80211720:	10001616 	blt	r2,zero,8021177c <_fclose_r+0xd0>
80211724:	8080030b 	ldhu	r2,12(r16)
80211728:	1080200c 	andi	r2,r2,128
8021172c:	1000151e 	bne	r2,zero,80211784 <_fclose_r+0xd8>
80211730:	81400c17 	ldw	r5,48(r16)
80211734:	28000526 	beq	r5,zero,8021174c <_fclose_r+0xa0>
80211738:	80801004 	addi	r2,r16,64
8021173c:	28800226 	beq	r5,r2,80211748 <_fclose_r+0x9c>
80211740:	8809883a 	mov	r4,r17
80211744:	020bb400 	call	8020bb40 <_free_r>
80211748:	80000c15 	stw	zero,48(r16)
8021174c:	81401117 	ldw	r5,68(r16)
80211750:	28000326 	beq	r5,zero,80211760 <_fclose_r+0xb4>
80211754:	8809883a 	mov	r4,r17
80211758:	020bb400 	call	8020bb40 <_free_r>
8021175c:	80001115 	stw	zero,68(r16)
80211760:	020b9dc0 	call	8020b9dc <__sfp_lock_acquire>
80211764:	8000030d 	sth	zero,12(r16)
80211768:	020b9e00 	call	8020b9e0 <__sfp_lock_release>
8021176c:	9005883a 	mov	r2,r18
80211770:	003fdc06 	br	802116e4 <__reset+0xfa1f16e4>
80211774:	020b9cc0 	call	8020b9cc <__sinit>
80211778:	003fd706 	br	802116d8 <__reset+0xfa1f16d8>
8021177c:	04bfffc4 	movi	r18,-1
80211780:	003fe806 	br	80211724 <__reset+0xfa1f1724>
80211784:	81400417 	ldw	r5,16(r16)
80211788:	8809883a 	mov	r4,r17
8021178c:	020bb400 	call	8020bb40 <_free_r>
80211790:	003fe706 	br	80211730 <__reset+0xfa1f1730>
80211794:	0005883a 	mov	r2,zero
80211798:	f800283a 	ret

8021179c <fclose>:
8021179c:	00a008b4 	movhi	r2,32802
802117a0:	10b4fd04 	addi	r2,r2,-11276
802117a4:	200b883a 	mov	r5,r4
802117a8:	11000017 	ldw	r4,0(r2)
802117ac:	02116ac1 	jmpi	802116ac <_fclose_r>

802117b0 <__fputwc>:
802117b0:	defff804 	addi	sp,sp,-32
802117b4:	dcc00415 	stw	r19,16(sp)
802117b8:	dc800315 	stw	r18,12(sp)
802117bc:	dc000115 	stw	r16,4(sp)
802117c0:	dfc00715 	stw	ra,28(sp)
802117c4:	dd400615 	stw	r21,24(sp)
802117c8:	dd000515 	stw	r20,20(sp)
802117cc:	dc400215 	stw	r17,8(sp)
802117d0:	2027883a 	mov	r19,r4
802117d4:	2825883a 	mov	r18,r5
802117d8:	3021883a 	mov	r16,r6
802117dc:	020c51c0 	call	8020c51c <__locale_mb_cur_max>
802117e0:	00c00044 	movi	r3,1
802117e4:	10c03e26 	beq	r2,r3,802118e0 <__fputwc+0x130>
802117e8:	81c01704 	addi	r7,r16,92
802117ec:	900d883a 	mov	r6,r18
802117f0:	d80b883a 	mov	r5,sp
802117f4:	9809883a 	mov	r4,r19
802117f8:	0211c800 	call	80211c80 <_wcrtomb_r>
802117fc:	1029883a 	mov	r20,r2
80211800:	00bfffc4 	movi	r2,-1
80211804:	a0802026 	beq	r20,r2,80211888 <__fputwc+0xd8>
80211808:	d9400003 	ldbu	r5,0(sp)
8021180c:	a0001c26 	beq	r20,zero,80211880 <__fputwc+0xd0>
80211810:	0023883a 	mov	r17,zero
80211814:	05400284 	movi	r21,10
80211818:	00000906 	br	80211840 <__fputwc+0x90>
8021181c:	80800017 	ldw	r2,0(r16)
80211820:	11400005 	stb	r5,0(r2)
80211824:	80c00017 	ldw	r3,0(r16)
80211828:	18c00044 	addi	r3,r3,1
8021182c:	80c00015 	stw	r3,0(r16)
80211830:	8c400044 	addi	r17,r17,1
80211834:	dc45883a 	add	r2,sp,r17
80211838:	8d00112e 	bgeu	r17,r20,80211880 <__fputwc+0xd0>
8021183c:	11400003 	ldbu	r5,0(r2)
80211840:	80c00217 	ldw	r3,8(r16)
80211844:	18ffffc4 	addi	r3,r3,-1
80211848:	80c00215 	stw	r3,8(r16)
8021184c:	183ff30e 	bge	r3,zero,8021181c <__reset+0xfa1f181c>
80211850:	80800617 	ldw	r2,24(r16)
80211854:	18801916 	blt	r3,r2,802118bc <__fputwc+0x10c>
80211858:	80800017 	ldw	r2,0(r16)
8021185c:	11400005 	stb	r5,0(r2)
80211860:	80800017 	ldw	r2,0(r16)
80211864:	10c00003 	ldbu	r3,0(r2)
80211868:	10800044 	addi	r2,r2,1
8021186c:	1d402326 	beq	r3,r21,802118fc <__fputwc+0x14c>
80211870:	80800015 	stw	r2,0(r16)
80211874:	8c400044 	addi	r17,r17,1
80211878:	dc45883a 	add	r2,sp,r17
8021187c:	8d3fef36 	bltu	r17,r20,8021183c <__reset+0xfa1f183c>
80211880:	9005883a 	mov	r2,r18
80211884:	00000406 	br	80211898 <__fputwc+0xe8>
80211888:	80c0030b 	ldhu	r3,12(r16)
8021188c:	a005883a 	mov	r2,r20
80211890:	18c01014 	ori	r3,r3,64
80211894:	80c0030d 	sth	r3,12(r16)
80211898:	dfc00717 	ldw	ra,28(sp)
8021189c:	dd400617 	ldw	r21,24(sp)
802118a0:	dd000517 	ldw	r20,20(sp)
802118a4:	dcc00417 	ldw	r19,16(sp)
802118a8:	dc800317 	ldw	r18,12(sp)
802118ac:	dc400217 	ldw	r17,8(sp)
802118b0:	dc000117 	ldw	r16,4(sp)
802118b4:	dec00804 	addi	sp,sp,32
802118b8:	f800283a 	ret
802118bc:	800d883a 	mov	r6,r16
802118c0:	29403fcc 	andi	r5,r5,255
802118c4:	9809883a 	mov	r4,r19
802118c8:	0211b280 	call	80211b28 <__swbuf_r>
802118cc:	10bfffe0 	cmpeqi	r2,r2,-1
802118d0:	10803fcc 	andi	r2,r2,255
802118d4:	103fd626 	beq	r2,zero,80211830 <__reset+0xfa1f1830>
802118d8:	00bfffc4 	movi	r2,-1
802118dc:	003fee06 	br	80211898 <__reset+0xfa1f1898>
802118e0:	90ffffc4 	addi	r3,r18,-1
802118e4:	01003f84 	movi	r4,254
802118e8:	20ffbf36 	bltu	r4,r3,802117e8 <__reset+0xfa1f17e8>
802118ec:	900b883a 	mov	r5,r18
802118f0:	dc800005 	stb	r18,0(sp)
802118f4:	1029883a 	mov	r20,r2
802118f8:	003fc506 	br	80211810 <__reset+0xfa1f1810>
802118fc:	800d883a 	mov	r6,r16
80211900:	a80b883a 	mov	r5,r21
80211904:	9809883a 	mov	r4,r19
80211908:	0211b280 	call	80211b28 <__swbuf_r>
8021190c:	10bfffe0 	cmpeqi	r2,r2,-1
80211910:	003fef06 	br	802118d0 <__reset+0xfa1f18d0>

80211914 <_fputwc_r>:
80211914:	3080030b 	ldhu	r2,12(r6)
80211918:	10c8000c 	andi	r3,r2,8192
8021191c:	1800051e 	bne	r3,zero,80211934 <_fputwc_r+0x20>
80211920:	30c01917 	ldw	r3,100(r6)
80211924:	10880014 	ori	r2,r2,8192
80211928:	3080030d 	sth	r2,12(r6)
8021192c:	18880014 	ori	r2,r3,8192
80211930:	30801915 	stw	r2,100(r6)
80211934:	02117b01 	jmpi	802117b0 <__fputwc>

80211938 <fputwc>:
80211938:	00a008b4 	movhi	r2,32802
8021193c:	defffc04 	addi	sp,sp,-16
80211940:	10b4fd04 	addi	r2,r2,-11276
80211944:	dc000115 	stw	r16,4(sp)
80211948:	14000017 	ldw	r16,0(r2)
8021194c:	dc400215 	stw	r17,8(sp)
80211950:	dfc00315 	stw	ra,12(sp)
80211954:	2023883a 	mov	r17,r4
80211958:	80000226 	beq	r16,zero,80211964 <fputwc+0x2c>
8021195c:	80800e17 	ldw	r2,56(r16)
80211960:	10001026 	beq	r2,zero,802119a4 <fputwc+0x6c>
80211964:	2880030b 	ldhu	r2,12(r5)
80211968:	10c8000c 	andi	r3,r2,8192
8021196c:	1800051e 	bne	r3,zero,80211984 <fputwc+0x4c>
80211970:	28c01917 	ldw	r3,100(r5)
80211974:	10880014 	ori	r2,r2,8192
80211978:	2880030d 	sth	r2,12(r5)
8021197c:	18880014 	ori	r2,r3,8192
80211980:	28801915 	stw	r2,100(r5)
80211984:	280d883a 	mov	r6,r5
80211988:	8009883a 	mov	r4,r16
8021198c:	880b883a 	mov	r5,r17
80211990:	dfc00317 	ldw	ra,12(sp)
80211994:	dc400217 	ldw	r17,8(sp)
80211998:	dc000117 	ldw	r16,4(sp)
8021199c:	dec00404 	addi	sp,sp,16
802119a0:	02117b01 	jmpi	802117b0 <__fputwc>
802119a4:	8009883a 	mov	r4,r16
802119a8:	d9400015 	stw	r5,0(sp)
802119ac:	020b9cc0 	call	8020b9cc <__sinit>
802119b0:	d9400017 	ldw	r5,0(sp)
802119b4:	003feb06 	br	80211964 <__reset+0xfa1f1964>

802119b8 <_fstat_r>:
802119b8:	defffd04 	addi	sp,sp,-12
802119bc:	2805883a 	mov	r2,r5
802119c0:	dc000015 	stw	r16,0(sp)
802119c4:	042008b4 	movhi	r16,32802
802119c8:	dc400115 	stw	r17,4(sp)
802119cc:	84351b04 	addi	r16,r16,-11156
802119d0:	2023883a 	mov	r17,r4
802119d4:	300b883a 	mov	r5,r6
802119d8:	1009883a 	mov	r4,r2
802119dc:	dfc00215 	stw	ra,8(sp)
802119e0:	80000015 	stw	zero,0(r16)
802119e4:	021538c0 	call	8021538c <fstat>
802119e8:	00ffffc4 	movi	r3,-1
802119ec:	10c00526 	beq	r2,r3,80211a04 <_fstat_r+0x4c>
802119f0:	dfc00217 	ldw	ra,8(sp)
802119f4:	dc400117 	ldw	r17,4(sp)
802119f8:	dc000017 	ldw	r16,0(sp)
802119fc:	dec00304 	addi	sp,sp,12
80211a00:	f800283a 	ret
80211a04:	80c00017 	ldw	r3,0(r16)
80211a08:	183ff926 	beq	r3,zero,802119f0 <__reset+0xfa1f19f0>
80211a0c:	88c00015 	stw	r3,0(r17)
80211a10:	003ff706 	br	802119f0 <__reset+0xfa1f19f0>

80211a14 <_isatty_r>:
80211a14:	defffd04 	addi	sp,sp,-12
80211a18:	dc000015 	stw	r16,0(sp)
80211a1c:	042008b4 	movhi	r16,32802
80211a20:	dc400115 	stw	r17,4(sp)
80211a24:	84351b04 	addi	r16,r16,-11156
80211a28:	2023883a 	mov	r17,r4
80211a2c:	2809883a 	mov	r4,r5
80211a30:	dfc00215 	stw	ra,8(sp)
80211a34:	80000015 	stw	zero,0(r16)
80211a38:	02154780 	call	80215478 <isatty>
80211a3c:	00ffffc4 	movi	r3,-1
80211a40:	10c00526 	beq	r2,r3,80211a58 <_isatty_r+0x44>
80211a44:	dfc00217 	ldw	ra,8(sp)
80211a48:	dc400117 	ldw	r17,4(sp)
80211a4c:	dc000017 	ldw	r16,0(sp)
80211a50:	dec00304 	addi	sp,sp,12
80211a54:	f800283a 	ret
80211a58:	80c00017 	ldw	r3,0(r16)
80211a5c:	183ff926 	beq	r3,zero,80211a44 <__reset+0xfa1f1a44>
80211a60:	88c00015 	stw	r3,0(r17)
80211a64:	003ff706 	br	80211a44 <__reset+0xfa1f1a44>

80211a68 <_lseek_r>:
80211a68:	defffd04 	addi	sp,sp,-12
80211a6c:	2805883a 	mov	r2,r5
80211a70:	dc000015 	stw	r16,0(sp)
80211a74:	042008b4 	movhi	r16,32802
80211a78:	dc400115 	stw	r17,4(sp)
80211a7c:	300b883a 	mov	r5,r6
80211a80:	84351b04 	addi	r16,r16,-11156
80211a84:	2023883a 	mov	r17,r4
80211a88:	380d883a 	mov	r6,r7
80211a8c:	1009883a 	mov	r4,r2
80211a90:	dfc00215 	stw	ra,8(sp)
80211a94:	80000015 	stw	zero,0(r16)
80211a98:	02155580 	call	80215558 <lseek>
80211a9c:	00ffffc4 	movi	r3,-1
80211aa0:	10c00526 	beq	r2,r3,80211ab8 <_lseek_r+0x50>
80211aa4:	dfc00217 	ldw	ra,8(sp)
80211aa8:	dc400117 	ldw	r17,4(sp)
80211aac:	dc000017 	ldw	r16,0(sp)
80211ab0:	dec00304 	addi	sp,sp,12
80211ab4:	f800283a 	ret
80211ab8:	80c00017 	ldw	r3,0(r16)
80211abc:	183ff926 	beq	r3,zero,80211aa4 <__reset+0xfa1f1aa4>
80211ac0:	88c00015 	stw	r3,0(r17)
80211ac4:	003ff706 	br	80211aa4 <__reset+0xfa1f1aa4>

80211ac8 <_read_r>:
80211ac8:	defffd04 	addi	sp,sp,-12
80211acc:	2805883a 	mov	r2,r5
80211ad0:	dc000015 	stw	r16,0(sp)
80211ad4:	042008b4 	movhi	r16,32802
80211ad8:	dc400115 	stw	r17,4(sp)
80211adc:	300b883a 	mov	r5,r6
80211ae0:	84351b04 	addi	r16,r16,-11156
80211ae4:	2023883a 	mov	r17,r4
80211ae8:	380d883a 	mov	r6,r7
80211aec:	1009883a 	mov	r4,r2
80211af0:	dfc00215 	stw	ra,8(sp)
80211af4:	80000015 	stw	zero,0(r16)
80211af8:	021572c0 	call	8021572c <read>
80211afc:	00ffffc4 	movi	r3,-1
80211b00:	10c00526 	beq	r2,r3,80211b18 <_read_r+0x50>
80211b04:	dfc00217 	ldw	ra,8(sp)
80211b08:	dc400117 	ldw	r17,4(sp)
80211b0c:	dc000017 	ldw	r16,0(sp)
80211b10:	dec00304 	addi	sp,sp,12
80211b14:	f800283a 	ret
80211b18:	80c00017 	ldw	r3,0(r16)
80211b1c:	183ff926 	beq	r3,zero,80211b04 <__reset+0xfa1f1b04>
80211b20:	88c00015 	stw	r3,0(r17)
80211b24:	003ff706 	br	80211b04 <__reset+0xfa1f1b04>

80211b28 <__swbuf_r>:
80211b28:	defffb04 	addi	sp,sp,-20
80211b2c:	dcc00315 	stw	r19,12(sp)
80211b30:	dc800215 	stw	r18,8(sp)
80211b34:	dc000015 	stw	r16,0(sp)
80211b38:	dfc00415 	stw	ra,16(sp)
80211b3c:	dc400115 	stw	r17,4(sp)
80211b40:	2025883a 	mov	r18,r4
80211b44:	2827883a 	mov	r19,r5
80211b48:	3021883a 	mov	r16,r6
80211b4c:	20000226 	beq	r4,zero,80211b58 <__swbuf_r+0x30>
80211b50:	20800e17 	ldw	r2,56(r4)
80211b54:	10004226 	beq	r2,zero,80211c60 <__swbuf_r+0x138>
80211b58:	80800617 	ldw	r2,24(r16)
80211b5c:	8100030b 	ldhu	r4,12(r16)
80211b60:	80800215 	stw	r2,8(r16)
80211b64:	2080020c 	andi	r2,r4,8
80211b68:	10003626 	beq	r2,zero,80211c44 <__swbuf_r+0x11c>
80211b6c:	80c00417 	ldw	r3,16(r16)
80211b70:	18003426 	beq	r3,zero,80211c44 <__swbuf_r+0x11c>
80211b74:	2088000c 	andi	r2,r4,8192
80211b78:	9c403fcc 	andi	r17,r19,255
80211b7c:	10001a26 	beq	r2,zero,80211be8 <__swbuf_r+0xc0>
80211b80:	80800017 	ldw	r2,0(r16)
80211b84:	81000517 	ldw	r4,20(r16)
80211b88:	10c7c83a 	sub	r3,r2,r3
80211b8c:	1900200e 	bge	r3,r4,80211c10 <__swbuf_r+0xe8>
80211b90:	18c00044 	addi	r3,r3,1
80211b94:	81000217 	ldw	r4,8(r16)
80211b98:	11400044 	addi	r5,r2,1
80211b9c:	81400015 	stw	r5,0(r16)
80211ba0:	213fffc4 	addi	r4,r4,-1
80211ba4:	81000215 	stw	r4,8(r16)
80211ba8:	14c00005 	stb	r19,0(r2)
80211bac:	80800517 	ldw	r2,20(r16)
80211bb0:	10c01e26 	beq	r2,r3,80211c2c <__swbuf_r+0x104>
80211bb4:	8080030b 	ldhu	r2,12(r16)
80211bb8:	1080004c 	andi	r2,r2,1
80211bbc:	10000226 	beq	r2,zero,80211bc8 <__swbuf_r+0xa0>
80211bc0:	00800284 	movi	r2,10
80211bc4:	88801926 	beq	r17,r2,80211c2c <__swbuf_r+0x104>
80211bc8:	8805883a 	mov	r2,r17
80211bcc:	dfc00417 	ldw	ra,16(sp)
80211bd0:	dcc00317 	ldw	r19,12(sp)
80211bd4:	dc800217 	ldw	r18,8(sp)
80211bd8:	dc400117 	ldw	r17,4(sp)
80211bdc:	dc000017 	ldw	r16,0(sp)
80211be0:	dec00504 	addi	sp,sp,20
80211be4:	f800283a 	ret
80211be8:	81401917 	ldw	r5,100(r16)
80211bec:	00b7ffc4 	movi	r2,-8193
80211bf0:	21080014 	ori	r4,r4,8192
80211bf4:	2884703a 	and	r2,r5,r2
80211bf8:	80801915 	stw	r2,100(r16)
80211bfc:	80800017 	ldw	r2,0(r16)
80211c00:	8100030d 	sth	r4,12(r16)
80211c04:	81000517 	ldw	r4,20(r16)
80211c08:	10c7c83a 	sub	r3,r2,r3
80211c0c:	193fe016 	blt	r3,r4,80211b90 <__reset+0xfa1f1b90>
80211c10:	800b883a 	mov	r5,r16
80211c14:	9009883a 	mov	r4,r18
80211c18:	020b5f00 	call	8020b5f0 <_fflush_r>
80211c1c:	1000071e 	bne	r2,zero,80211c3c <__swbuf_r+0x114>
80211c20:	80800017 	ldw	r2,0(r16)
80211c24:	00c00044 	movi	r3,1
80211c28:	003fda06 	br	80211b94 <__reset+0xfa1f1b94>
80211c2c:	800b883a 	mov	r5,r16
80211c30:	9009883a 	mov	r4,r18
80211c34:	020b5f00 	call	8020b5f0 <_fflush_r>
80211c38:	103fe326 	beq	r2,zero,80211bc8 <__reset+0xfa1f1bc8>
80211c3c:	00bfffc4 	movi	r2,-1
80211c40:	003fe206 	br	80211bcc <__reset+0xfa1f1bcc>
80211c44:	800b883a 	mov	r5,r16
80211c48:	9009883a 	mov	r4,r18
80211c4c:	02099f80 	call	802099f8 <__swsetup_r>
80211c50:	103ffa1e 	bne	r2,zero,80211c3c <__reset+0xfa1f1c3c>
80211c54:	8100030b 	ldhu	r4,12(r16)
80211c58:	80c00417 	ldw	r3,16(r16)
80211c5c:	003fc506 	br	80211b74 <__reset+0xfa1f1b74>
80211c60:	020b9cc0 	call	8020b9cc <__sinit>
80211c64:	003fbc06 	br	80211b58 <__reset+0xfa1f1b58>

80211c68 <__swbuf>:
80211c68:	00a008b4 	movhi	r2,32802
80211c6c:	10b4fd04 	addi	r2,r2,-11276
80211c70:	280d883a 	mov	r6,r5
80211c74:	200b883a 	mov	r5,r4
80211c78:	11000017 	ldw	r4,0(r2)
80211c7c:	0211b281 	jmpi	80211b28 <__swbuf_r>

80211c80 <_wcrtomb_r>:
80211c80:	defff604 	addi	sp,sp,-40
80211c84:	00a008b4 	movhi	r2,32802
80211c88:	dc800815 	stw	r18,32(sp)
80211c8c:	dc400715 	stw	r17,28(sp)
80211c90:	dc000615 	stw	r16,24(sp)
80211c94:	10b50104 	addi	r2,r2,-11260
80211c98:	dfc00915 	stw	ra,36(sp)
80211c9c:	2021883a 	mov	r16,r4
80211ca0:	3823883a 	mov	r17,r7
80211ca4:	14800017 	ldw	r18,0(r2)
80211ca8:	28001426 	beq	r5,zero,80211cfc <_wcrtomb_r+0x7c>
80211cac:	d9400415 	stw	r5,16(sp)
80211cb0:	d9800515 	stw	r6,20(sp)
80211cb4:	020c5100 	call	8020c510 <__locale_charset>
80211cb8:	d9800517 	ldw	r6,20(sp)
80211cbc:	d9400417 	ldw	r5,16(sp)
80211cc0:	100f883a 	mov	r7,r2
80211cc4:	dc400015 	stw	r17,0(sp)
80211cc8:	8009883a 	mov	r4,r16
80211ccc:	903ee83a 	callr	r18
80211cd0:	00ffffc4 	movi	r3,-1
80211cd4:	10c0031e 	bne	r2,r3,80211ce4 <_wcrtomb_r+0x64>
80211cd8:	88000015 	stw	zero,0(r17)
80211cdc:	00c02284 	movi	r3,138
80211ce0:	80c00015 	stw	r3,0(r16)
80211ce4:	dfc00917 	ldw	ra,36(sp)
80211ce8:	dc800817 	ldw	r18,32(sp)
80211cec:	dc400717 	ldw	r17,28(sp)
80211cf0:	dc000617 	ldw	r16,24(sp)
80211cf4:	dec00a04 	addi	sp,sp,40
80211cf8:	f800283a 	ret
80211cfc:	020c5100 	call	8020c510 <__locale_charset>
80211d00:	100f883a 	mov	r7,r2
80211d04:	dc400015 	stw	r17,0(sp)
80211d08:	000d883a 	mov	r6,zero
80211d0c:	d9400104 	addi	r5,sp,4
80211d10:	8009883a 	mov	r4,r16
80211d14:	903ee83a 	callr	r18
80211d18:	003fed06 	br	80211cd0 <__reset+0xfa1f1cd0>

80211d1c <wcrtomb>:
80211d1c:	defff604 	addi	sp,sp,-40
80211d20:	00a008b4 	movhi	r2,32802
80211d24:	dc800615 	stw	r18,24(sp)
80211d28:	dc400515 	stw	r17,20(sp)
80211d2c:	10b4fd04 	addi	r2,r2,-11276
80211d30:	dfc00915 	stw	ra,36(sp)
80211d34:	dd000815 	stw	r20,32(sp)
80211d38:	dcc00715 	stw	r19,28(sp)
80211d3c:	dc000415 	stw	r16,16(sp)
80211d40:	3025883a 	mov	r18,r6
80211d44:	14400017 	ldw	r17,0(r2)
80211d48:	20001926 	beq	r4,zero,80211db0 <wcrtomb+0x94>
80211d4c:	00a008b4 	movhi	r2,32802
80211d50:	10b50104 	addi	r2,r2,-11260
80211d54:	15000017 	ldw	r20,0(r2)
80211d58:	2021883a 	mov	r16,r4
80211d5c:	2827883a 	mov	r19,r5
80211d60:	020c5100 	call	8020c510 <__locale_charset>
80211d64:	100f883a 	mov	r7,r2
80211d68:	dc800015 	stw	r18,0(sp)
80211d6c:	980d883a 	mov	r6,r19
80211d70:	800b883a 	mov	r5,r16
80211d74:	8809883a 	mov	r4,r17
80211d78:	a03ee83a 	callr	r20
80211d7c:	00ffffc4 	movi	r3,-1
80211d80:	10c0031e 	bne	r2,r3,80211d90 <wcrtomb+0x74>
80211d84:	90000015 	stw	zero,0(r18)
80211d88:	00c02284 	movi	r3,138
80211d8c:	88c00015 	stw	r3,0(r17)
80211d90:	dfc00917 	ldw	ra,36(sp)
80211d94:	dd000817 	ldw	r20,32(sp)
80211d98:	dcc00717 	ldw	r19,28(sp)
80211d9c:	dc800617 	ldw	r18,24(sp)
80211da0:	dc400517 	ldw	r17,20(sp)
80211da4:	dc000417 	ldw	r16,16(sp)
80211da8:	dec00a04 	addi	sp,sp,40
80211dac:	f800283a 	ret
80211db0:	00a008b4 	movhi	r2,32802
80211db4:	10b50104 	addi	r2,r2,-11260
80211db8:	14000017 	ldw	r16,0(r2)
80211dbc:	020c5100 	call	8020c510 <__locale_charset>
80211dc0:	100f883a 	mov	r7,r2
80211dc4:	dc800015 	stw	r18,0(sp)
80211dc8:	000d883a 	mov	r6,zero
80211dcc:	d9400104 	addi	r5,sp,4
80211dd0:	8809883a 	mov	r4,r17
80211dd4:	803ee83a 	callr	r16
80211dd8:	003fe806 	br	80211d7c <__reset+0xfa1f1d7c>

80211ddc <__ascii_wctomb>:
80211ddc:	28000526 	beq	r5,zero,80211df4 <__ascii_wctomb+0x18>
80211de0:	00803fc4 	movi	r2,255
80211de4:	11800536 	bltu	r2,r6,80211dfc <__ascii_wctomb+0x20>
80211de8:	29800005 	stb	r6,0(r5)
80211dec:	00800044 	movi	r2,1
80211df0:	f800283a 	ret
80211df4:	0005883a 	mov	r2,zero
80211df8:	f800283a 	ret
80211dfc:	00802284 	movi	r2,138
80211e00:	20800015 	stw	r2,0(r4)
80211e04:	00bfffc4 	movi	r2,-1
80211e08:	f800283a 	ret

80211e0c <_wctomb_r>:
80211e0c:	00a008b4 	movhi	r2,32802
80211e10:	defff904 	addi	sp,sp,-28
80211e14:	10b50104 	addi	r2,r2,-11260
80211e18:	dfc00615 	stw	ra,24(sp)
80211e1c:	dc400515 	stw	r17,20(sp)
80211e20:	dc000415 	stw	r16,16(sp)
80211e24:	3823883a 	mov	r17,r7
80211e28:	14000017 	ldw	r16,0(r2)
80211e2c:	d9000115 	stw	r4,4(sp)
80211e30:	d9400215 	stw	r5,8(sp)
80211e34:	d9800315 	stw	r6,12(sp)
80211e38:	020c5100 	call	8020c510 <__locale_charset>
80211e3c:	d9800317 	ldw	r6,12(sp)
80211e40:	d9400217 	ldw	r5,8(sp)
80211e44:	d9000117 	ldw	r4,4(sp)
80211e48:	100f883a 	mov	r7,r2
80211e4c:	dc400015 	stw	r17,0(sp)
80211e50:	803ee83a 	callr	r16
80211e54:	dfc00617 	ldw	ra,24(sp)
80211e58:	dc400517 	ldw	r17,20(sp)
80211e5c:	dc000417 	ldw	r16,16(sp)
80211e60:	dec00704 	addi	sp,sp,28
80211e64:	f800283a 	ret

80211e68 <__udivdi3>:
80211e68:	defff504 	addi	sp,sp,-44
80211e6c:	dcc00415 	stw	r19,16(sp)
80211e70:	dc000115 	stw	r16,4(sp)
80211e74:	dfc00a15 	stw	ra,40(sp)
80211e78:	df000915 	stw	fp,36(sp)
80211e7c:	ddc00815 	stw	r23,32(sp)
80211e80:	dd800715 	stw	r22,28(sp)
80211e84:	dd400615 	stw	r21,24(sp)
80211e88:	dd000515 	stw	r20,20(sp)
80211e8c:	dc800315 	stw	r18,12(sp)
80211e90:	dc400215 	stw	r17,8(sp)
80211e94:	2027883a 	mov	r19,r4
80211e98:	2821883a 	mov	r16,r5
80211e9c:	3800411e 	bne	r7,zero,80211fa4 <__udivdi3+0x13c>
80211ea0:	3023883a 	mov	r17,r6
80211ea4:	2025883a 	mov	r18,r4
80211ea8:	2980522e 	bgeu	r5,r6,80211ff4 <__udivdi3+0x18c>
80211eac:	00bfffd4 	movui	r2,65535
80211eb0:	282d883a 	mov	r22,r5
80211eb4:	1180a836 	bltu	r2,r6,80212158 <__udivdi3+0x2f0>
80211eb8:	00803fc4 	movi	r2,255
80211ebc:	1185803a 	cmpltu	r2,r2,r6
80211ec0:	100490fa 	slli	r2,r2,3
80211ec4:	3086d83a 	srl	r3,r6,r2
80211ec8:	012008b4 	movhi	r4,32802
80211ecc:	212c74c4 	addi	r4,r4,-20013
80211ed0:	20c7883a 	add	r3,r4,r3
80211ed4:	18c00003 	ldbu	r3,0(r3)
80211ed8:	1885883a 	add	r2,r3,r2
80211edc:	00c00804 	movi	r3,32
80211ee0:	1887c83a 	sub	r3,r3,r2
80211ee4:	18000526 	beq	r3,zero,80211efc <__udivdi3+0x94>
80211ee8:	80e0983a 	sll	r16,r16,r3
80211eec:	9884d83a 	srl	r2,r19,r2
80211ef0:	30e2983a 	sll	r17,r6,r3
80211ef4:	98e4983a 	sll	r18,r19,r3
80211ef8:	142cb03a 	or	r22,r2,r16
80211efc:	882ad43a 	srli	r21,r17,16
80211f00:	b009883a 	mov	r4,r22
80211f04:	8d3fffcc 	andi	r20,r17,65535
80211f08:	a80b883a 	mov	r5,r21
80211f0c:	0212a740 	call	80212a74 <__umodsi3>
80211f10:	b009883a 	mov	r4,r22
80211f14:	a80b883a 	mov	r5,r21
80211f18:	1027883a 	mov	r19,r2
80211f1c:	0212a100 	call	80212a10 <__udivsi3>
80211f20:	102d883a 	mov	r22,r2
80211f24:	9826943a 	slli	r19,r19,16
80211f28:	9004d43a 	srli	r2,r18,16
80211f2c:	a5a1383a 	mul	r16,r20,r22
80211f30:	14c4b03a 	or	r2,r2,r19
80211f34:	1400052e 	bgeu	r2,r16,80211f4c <__udivdi3+0xe4>
80211f38:	1445883a 	add	r2,r2,r17
80211f3c:	b0ffffc4 	addi	r3,r22,-1
80211f40:	14400136 	bltu	r2,r17,80211f48 <__udivdi3+0xe0>
80211f44:	14012336 	bltu	r2,r16,802123d4 <__udivdi3+0x56c>
80211f48:	182d883a 	mov	r22,r3
80211f4c:	1421c83a 	sub	r16,r2,r16
80211f50:	a80b883a 	mov	r5,r21
80211f54:	8009883a 	mov	r4,r16
80211f58:	0212a740 	call	80212a74 <__umodsi3>
80211f5c:	1027883a 	mov	r19,r2
80211f60:	a80b883a 	mov	r5,r21
80211f64:	8009883a 	mov	r4,r16
80211f68:	0212a100 	call	80212a10 <__udivsi3>
80211f6c:	9826943a 	slli	r19,r19,16
80211f70:	a0a9383a 	mul	r20,r20,r2
80211f74:	94bfffcc 	andi	r18,r18,65535
80211f78:	94e4b03a 	or	r18,r18,r19
80211f7c:	9500052e 	bgeu	r18,r20,80211f94 <__udivdi3+0x12c>
80211f80:	8ca5883a 	add	r18,r17,r18
80211f84:	10ffffc4 	addi	r3,r2,-1
80211f88:	9440f136 	bltu	r18,r17,80212350 <__udivdi3+0x4e8>
80211f8c:	9500f02e 	bgeu	r18,r20,80212350 <__udivdi3+0x4e8>
80211f90:	10bfff84 	addi	r2,r2,-2
80211f94:	b00c943a 	slli	r6,r22,16
80211f98:	0007883a 	mov	r3,zero
80211f9c:	3084b03a 	or	r2,r6,r2
80211fa0:	00005906 	br	80212108 <__udivdi3+0x2a0>
80211fa4:	29c05636 	bltu	r5,r7,80212100 <__udivdi3+0x298>
80211fa8:	00bfffd4 	movui	r2,65535
80211fac:	11c0622e 	bgeu	r2,r7,80212138 <__udivdi3+0x2d0>
80211fb0:	00804034 	movhi	r2,256
80211fb4:	10bfffc4 	addi	r2,r2,-1
80211fb8:	11c0ee36 	bltu	r2,r7,80212374 <__udivdi3+0x50c>
80211fbc:	00800404 	movi	r2,16
80211fc0:	3886d83a 	srl	r3,r7,r2
80211fc4:	012008b4 	movhi	r4,32802
80211fc8:	212c74c4 	addi	r4,r4,-20013
80211fcc:	20c7883a 	add	r3,r4,r3
80211fd0:	18c00003 	ldbu	r3,0(r3)
80211fd4:	05400804 	movi	r21,32
80211fd8:	1885883a 	add	r2,r3,r2
80211fdc:	a8abc83a 	sub	r21,r21,r2
80211fe0:	a800621e 	bne	r21,zero,8021216c <__udivdi3+0x304>
80211fe4:	3c00e936 	bltu	r7,r16,8021238c <__udivdi3+0x524>
80211fe8:	9985403a 	cmpgeu	r2,r19,r6
80211fec:	0007883a 	mov	r3,zero
80211ff0:	00004506 	br	80212108 <__udivdi3+0x2a0>
80211ff4:	3000041e 	bne	r6,zero,80212008 <__udivdi3+0x1a0>
80211ff8:	000b883a 	mov	r5,zero
80211ffc:	01000044 	movi	r4,1
80212000:	0212a100 	call	80212a10 <__udivsi3>
80212004:	1023883a 	mov	r17,r2
80212008:	00bfffd4 	movui	r2,65535
8021200c:	14404e2e 	bgeu	r2,r17,80212148 <__udivdi3+0x2e0>
80212010:	00804034 	movhi	r2,256
80212014:	10bfffc4 	addi	r2,r2,-1
80212018:	1440d836 	bltu	r2,r17,8021237c <__udivdi3+0x514>
8021201c:	00800404 	movi	r2,16
80212020:	8886d83a 	srl	r3,r17,r2
80212024:	012008b4 	movhi	r4,32802
80212028:	212c74c4 	addi	r4,r4,-20013
8021202c:	20c7883a 	add	r3,r4,r3
80212030:	18c00003 	ldbu	r3,0(r3)
80212034:	1885883a 	add	r2,r3,r2
80212038:	00c00804 	movi	r3,32
8021203c:	1887c83a 	sub	r3,r3,r2
80212040:	18008f1e 	bne	r3,zero,80212280 <__udivdi3+0x418>
80212044:	882ad43a 	srli	r21,r17,16
80212048:	8461c83a 	sub	r16,r16,r17
8021204c:	8d3fffcc 	andi	r20,r17,65535
80212050:	00c00044 	movi	r3,1
80212054:	8009883a 	mov	r4,r16
80212058:	a80b883a 	mov	r5,r21
8021205c:	d8c00015 	stw	r3,0(sp)
80212060:	0212a740 	call	80212a74 <__umodsi3>
80212064:	8009883a 	mov	r4,r16
80212068:	a80b883a 	mov	r5,r21
8021206c:	1027883a 	mov	r19,r2
80212070:	0212a100 	call	80212a10 <__udivsi3>
80212074:	9826943a 	slli	r19,r19,16
80212078:	9008d43a 	srli	r4,r18,16
8021207c:	1521383a 	mul	r16,r2,r20
80212080:	102d883a 	mov	r22,r2
80212084:	24c8b03a 	or	r4,r4,r19
80212088:	d8c00017 	ldw	r3,0(sp)
8021208c:	2400052e 	bgeu	r4,r16,802120a4 <__udivdi3+0x23c>
80212090:	2449883a 	add	r4,r4,r17
80212094:	b0bfffc4 	addi	r2,r22,-1
80212098:	24400136 	bltu	r4,r17,802120a0 <__udivdi3+0x238>
8021209c:	2400ca36 	bltu	r4,r16,802123c8 <__udivdi3+0x560>
802120a0:	102d883a 	mov	r22,r2
802120a4:	2421c83a 	sub	r16,r4,r16
802120a8:	a80b883a 	mov	r5,r21
802120ac:	8009883a 	mov	r4,r16
802120b0:	d8c00015 	stw	r3,0(sp)
802120b4:	0212a740 	call	80212a74 <__umodsi3>
802120b8:	1027883a 	mov	r19,r2
802120bc:	a80b883a 	mov	r5,r21
802120c0:	8009883a 	mov	r4,r16
802120c4:	0212a100 	call	80212a10 <__udivsi3>
802120c8:	9826943a 	slli	r19,r19,16
802120cc:	1529383a 	mul	r20,r2,r20
802120d0:	94bfffcc 	andi	r18,r18,65535
802120d4:	94e4b03a 	or	r18,r18,r19
802120d8:	d8c00017 	ldw	r3,0(sp)
802120dc:	9500052e 	bgeu	r18,r20,802120f4 <__udivdi3+0x28c>
802120e0:	8ca5883a 	add	r18,r17,r18
802120e4:	113fffc4 	addi	r4,r2,-1
802120e8:	94409736 	bltu	r18,r17,80212348 <__udivdi3+0x4e0>
802120ec:	9500962e 	bgeu	r18,r20,80212348 <__udivdi3+0x4e0>
802120f0:	10bfff84 	addi	r2,r2,-2
802120f4:	b00c943a 	slli	r6,r22,16
802120f8:	3084b03a 	or	r2,r6,r2
802120fc:	00000206 	br	80212108 <__udivdi3+0x2a0>
80212100:	0007883a 	mov	r3,zero
80212104:	0005883a 	mov	r2,zero
80212108:	dfc00a17 	ldw	ra,40(sp)
8021210c:	df000917 	ldw	fp,36(sp)
80212110:	ddc00817 	ldw	r23,32(sp)
80212114:	dd800717 	ldw	r22,28(sp)
80212118:	dd400617 	ldw	r21,24(sp)
8021211c:	dd000517 	ldw	r20,20(sp)
80212120:	dcc00417 	ldw	r19,16(sp)
80212124:	dc800317 	ldw	r18,12(sp)
80212128:	dc400217 	ldw	r17,8(sp)
8021212c:	dc000117 	ldw	r16,4(sp)
80212130:	dec00b04 	addi	sp,sp,44
80212134:	f800283a 	ret
80212138:	00803fc4 	movi	r2,255
8021213c:	11c5803a 	cmpltu	r2,r2,r7
80212140:	100490fa 	slli	r2,r2,3
80212144:	003f9e06 	br	80211fc0 <__reset+0xfa1f1fc0>
80212148:	00803fc4 	movi	r2,255
8021214c:	1445803a 	cmpltu	r2,r2,r17
80212150:	100490fa 	slli	r2,r2,3
80212154:	003fb206 	br	80212020 <__reset+0xfa1f2020>
80212158:	00804034 	movhi	r2,256
8021215c:	10bfffc4 	addi	r2,r2,-1
80212160:	11808836 	bltu	r2,r6,80212384 <__udivdi3+0x51c>
80212164:	00800404 	movi	r2,16
80212168:	003f5606 	br	80211ec4 <__reset+0xfa1f1ec4>
8021216c:	30aed83a 	srl	r23,r6,r2
80212170:	3d4e983a 	sll	r7,r7,r21
80212174:	80acd83a 	srl	r22,r16,r2
80212178:	9884d83a 	srl	r2,r19,r2
8021217c:	3deeb03a 	or	r23,r7,r23
80212180:	b824d43a 	srli	r18,r23,16
80212184:	8560983a 	sll	r16,r16,r21
80212188:	b009883a 	mov	r4,r22
8021218c:	900b883a 	mov	r5,r18
80212190:	3568983a 	sll	r20,r6,r21
80212194:	1420b03a 	or	r16,r2,r16
80212198:	0212a740 	call	80212a74 <__umodsi3>
8021219c:	b009883a 	mov	r4,r22
802121a0:	900b883a 	mov	r5,r18
802121a4:	1023883a 	mov	r17,r2
802121a8:	0212a100 	call	80212a10 <__udivsi3>
802121ac:	8808943a 	slli	r4,r17,16
802121b0:	bf3fffcc 	andi	fp,r23,65535
802121b4:	8006d43a 	srli	r3,r16,16
802121b8:	e0a3383a 	mul	r17,fp,r2
802121bc:	100d883a 	mov	r6,r2
802121c0:	1906b03a 	or	r3,r3,r4
802121c4:	1c40042e 	bgeu	r3,r17,802121d8 <__udivdi3+0x370>
802121c8:	1dc7883a 	add	r3,r3,r23
802121cc:	10bfffc4 	addi	r2,r2,-1
802121d0:	1dc0752e 	bgeu	r3,r23,802123a8 <__udivdi3+0x540>
802121d4:	100d883a 	mov	r6,r2
802121d8:	1c63c83a 	sub	r17,r3,r17
802121dc:	900b883a 	mov	r5,r18
802121e0:	8809883a 	mov	r4,r17
802121e4:	d9800015 	stw	r6,0(sp)
802121e8:	0212a740 	call	80212a74 <__umodsi3>
802121ec:	102d883a 	mov	r22,r2
802121f0:	8809883a 	mov	r4,r17
802121f4:	900b883a 	mov	r5,r18
802121f8:	0212a100 	call	80212a10 <__udivsi3>
802121fc:	b02c943a 	slli	r22,r22,16
80212200:	e089383a 	mul	r4,fp,r2
80212204:	843fffcc 	andi	r16,r16,65535
80212208:	85a0b03a 	or	r16,r16,r22
8021220c:	d9800017 	ldw	r6,0(sp)
80212210:	8100042e 	bgeu	r16,r4,80212224 <__udivdi3+0x3bc>
80212214:	85e1883a 	add	r16,r16,r23
80212218:	10ffffc4 	addi	r3,r2,-1
8021221c:	85c05e2e 	bgeu	r16,r23,80212398 <__udivdi3+0x530>
80212220:	1805883a 	mov	r2,r3
80212224:	300c943a 	slli	r6,r6,16
80212228:	a17fffcc 	andi	r5,r20,65535
8021222c:	a028d43a 	srli	r20,r20,16
80212230:	3084b03a 	or	r2,r6,r2
80212234:	10ffffcc 	andi	r3,r2,65535
80212238:	100cd43a 	srli	r6,r2,16
8021223c:	194f383a 	mul	r7,r3,r5
80212240:	1d07383a 	mul	r3,r3,r20
80212244:	314b383a 	mul	r5,r6,r5
80212248:	3810d43a 	srli	r8,r7,16
8021224c:	8121c83a 	sub	r16,r16,r4
80212250:	1947883a 	add	r3,r3,r5
80212254:	40c7883a 	add	r3,r8,r3
80212258:	350d383a 	mul	r6,r6,r20
8021225c:	1940022e 	bgeu	r3,r5,80212268 <__udivdi3+0x400>
80212260:	01000074 	movhi	r4,1
80212264:	310d883a 	add	r6,r6,r4
80212268:	1828d43a 	srli	r20,r3,16
8021226c:	a18d883a 	add	r6,r20,r6
80212270:	81803e36 	bltu	r16,r6,8021236c <__udivdi3+0x504>
80212274:	81803826 	beq	r16,r6,80212358 <__udivdi3+0x4f0>
80212278:	0007883a 	mov	r3,zero
8021227c:	003fa206 	br	80212108 <__reset+0xfa1f2108>
80212280:	88e2983a 	sll	r17,r17,r3
80212284:	80a8d83a 	srl	r20,r16,r2
80212288:	80e0983a 	sll	r16,r16,r3
8021228c:	882ad43a 	srli	r21,r17,16
80212290:	9884d83a 	srl	r2,r19,r2
80212294:	a009883a 	mov	r4,r20
80212298:	a80b883a 	mov	r5,r21
8021229c:	142eb03a 	or	r23,r2,r16
802122a0:	98e4983a 	sll	r18,r19,r3
802122a4:	0212a740 	call	80212a74 <__umodsi3>
802122a8:	a009883a 	mov	r4,r20
802122ac:	a80b883a 	mov	r5,r21
802122b0:	1021883a 	mov	r16,r2
802122b4:	0212a100 	call	80212a10 <__udivsi3>
802122b8:	1039883a 	mov	fp,r2
802122bc:	8d3fffcc 	andi	r20,r17,65535
802122c0:	8020943a 	slli	r16,r16,16
802122c4:	b804d43a 	srli	r2,r23,16
802122c8:	a72d383a 	mul	r22,r20,fp
802122cc:	1404b03a 	or	r2,r2,r16
802122d0:	1580062e 	bgeu	r2,r22,802122ec <__udivdi3+0x484>
802122d4:	1445883a 	add	r2,r2,r17
802122d8:	e0ffffc4 	addi	r3,fp,-1
802122dc:	14403836 	bltu	r2,r17,802123c0 <__udivdi3+0x558>
802122e0:	1580372e 	bgeu	r2,r22,802123c0 <__udivdi3+0x558>
802122e4:	e73fff84 	addi	fp,fp,-2
802122e8:	1445883a 	add	r2,r2,r17
802122ec:	15adc83a 	sub	r22,r2,r22
802122f0:	a80b883a 	mov	r5,r21
802122f4:	b009883a 	mov	r4,r22
802122f8:	0212a740 	call	80212a74 <__umodsi3>
802122fc:	1027883a 	mov	r19,r2
80212300:	b009883a 	mov	r4,r22
80212304:	a80b883a 	mov	r5,r21
80212308:	0212a100 	call	80212a10 <__udivsi3>
8021230c:	9826943a 	slli	r19,r19,16
80212310:	a0a1383a 	mul	r16,r20,r2
80212314:	b93fffcc 	andi	r4,r23,65535
80212318:	24c8b03a 	or	r4,r4,r19
8021231c:	2400062e 	bgeu	r4,r16,80212338 <__udivdi3+0x4d0>
80212320:	2449883a 	add	r4,r4,r17
80212324:	10ffffc4 	addi	r3,r2,-1
80212328:	24402336 	bltu	r4,r17,802123b8 <__udivdi3+0x550>
8021232c:	2400222e 	bgeu	r4,r16,802123b8 <__udivdi3+0x550>
80212330:	10bfff84 	addi	r2,r2,-2
80212334:	2449883a 	add	r4,r4,r17
80212338:	e038943a 	slli	fp,fp,16
8021233c:	2421c83a 	sub	r16,r4,r16
80212340:	e086b03a 	or	r3,fp,r2
80212344:	003f4306 	br	80212054 <__reset+0xfa1f2054>
80212348:	2005883a 	mov	r2,r4
8021234c:	003f6906 	br	802120f4 <__reset+0xfa1f20f4>
80212350:	1805883a 	mov	r2,r3
80212354:	003f0f06 	br	80211f94 <__reset+0xfa1f1f94>
80212358:	1806943a 	slli	r3,r3,16
8021235c:	9d66983a 	sll	r19,r19,r21
80212360:	39ffffcc 	andi	r7,r7,65535
80212364:	19c7883a 	add	r3,r3,r7
80212368:	98ffc32e 	bgeu	r19,r3,80212278 <__reset+0xfa1f2278>
8021236c:	10bfffc4 	addi	r2,r2,-1
80212370:	003fc106 	br	80212278 <__reset+0xfa1f2278>
80212374:	00800604 	movi	r2,24
80212378:	003f1106 	br	80211fc0 <__reset+0xfa1f1fc0>
8021237c:	00800604 	movi	r2,24
80212380:	003f2706 	br	80212020 <__reset+0xfa1f2020>
80212384:	00800604 	movi	r2,24
80212388:	003ece06 	br	80211ec4 <__reset+0xfa1f1ec4>
8021238c:	0007883a 	mov	r3,zero
80212390:	00800044 	movi	r2,1
80212394:	003f5c06 	br	80212108 <__reset+0xfa1f2108>
80212398:	813fa12e 	bgeu	r16,r4,80212220 <__reset+0xfa1f2220>
8021239c:	10bfff84 	addi	r2,r2,-2
802123a0:	85e1883a 	add	r16,r16,r23
802123a4:	003f9f06 	br	80212224 <__reset+0xfa1f2224>
802123a8:	1c7f8a2e 	bgeu	r3,r17,802121d4 <__reset+0xfa1f21d4>
802123ac:	31bfff84 	addi	r6,r6,-2
802123b0:	1dc7883a 	add	r3,r3,r23
802123b4:	003f8806 	br	802121d8 <__reset+0xfa1f21d8>
802123b8:	1805883a 	mov	r2,r3
802123bc:	003fde06 	br	80212338 <__reset+0xfa1f2338>
802123c0:	1839883a 	mov	fp,r3
802123c4:	003fc906 	br	802122ec <__reset+0xfa1f22ec>
802123c8:	b5bfff84 	addi	r22,r22,-2
802123cc:	2449883a 	add	r4,r4,r17
802123d0:	003f3406 	br	802120a4 <__reset+0xfa1f20a4>
802123d4:	b5bfff84 	addi	r22,r22,-2
802123d8:	1445883a 	add	r2,r2,r17
802123dc:	003edb06 	br	80211f4c <__reset+0xfa1f1f4c>

802123e0 <__umoddi3>:
802123e0:	defff404 	addi	sp,sp,-48
802123e4:	df000a15 	stw	fp,40(sp)
802123e8:	dc400315 	stw	r17,12(sp)
802123ec:	dc000215 	stw	r16,8(sp)
802123f0:	dfc00b15 	stw	ra,44(sp)
802123f4:	ddc00915 	stw	r23,36(sp)
802123f8:	dd800815 	stw	r22,32(sp)
802123fc:	dd400715 	stw	r21,28(sp)
80212400:	dd000615 	stw	r20,24(sp)
80212404:	dcc00515 	stw	r19,20(sp)
80212408:	dc800415 	stw	r18,16(sp)
8021240c:	2021883a 	mov	r16,r4
80212410:	2823883a 	mov	r17,r5
80212414:	2839883a 	mov	fp,r5
80212418:	38003c1e 	bne	r7,zero,8021250c <__umoddi3+0x12c>
8021241c:	3027883a 	mov	r19,r6
80212420:	2029883a 	mov	r20,r4
80212424:	2980512e 	bgeu	r5,r6,8021256c <__umoddi3+0x18c>
80212428:	00bfffd4 	movui	r2,65535
8021242c:	11809a36 	bltu	r2,r6,80212698 <__umoddi3+0x2b8>
80212430:	01003fc4 	movi	r4,255
80212434:	2189803a 	cmpltu	r4,r4,r6
80212438:	200890fa 	slli	r4,r4,3
8021243c:	3104d83a 	srl	r2,r6,r4
80212440:	00e008b4 	movhi	r3,32802
80212444:	18ec74c4 	addi	r3,r3,-20013
80212448:	1885883a 	add	r2,r3,r2
8021244c:	10c00003 	ldbu	r3,0(r2)
80212450:	00800804 	movi	r2,32
80212454:	1909883a 	add	r4,r3,r4
80212458:	1125c83a 	sub	r18,r2,r4
8021245c:	90000526 	beq	r18,zero,80212474 <__umoddi3+0x94>
80212460:	8ca2983a 	sll	r17,r17,r18
80212464:	8108d83a 	srl	r4,r16,r4
80212468:	34a6983a 	sll	r19,r6,r18
8021246c:	84a8983a 	sll	r20,r16,r18
80212470:	2478b03a 	or	fp,r4,r17
80212474:	982ed43a 	srli	r23,r19,16
80212478:	e009883a 	mov	r4,fp
8021247c:	9dbfffcc 	andi	r22,r19,65535
80212480:	b80b883a 	mov	r5,r23
80212484:	0212a740 	call	80212a74 <__umodsi3>
80212488:	e009883a 	mov	r4,fp
8021248c:	b80b883a 	mov	r5,r23
80212490:	102b883a 	mov	r21,r2
80212494:	0212a100 	call	80212a10 <__udivsi3>
80212498:	a806943a 	slli	r3,r21,16
8021249c:	a008d43a 	srli	r4,r20,16
802124a0:	b085383a 	mul	r2,r22,r2
802124a4:	20c8b03a 	or	r4,r4,r3
802124a8:	2080032e 	bgeu	r4,r2,802124b8 <__umoddi3+0xd8>
802124ac:	24c9883a 	add	r4,r4,r19
802124b0:	24c00136 	bltu	r4,r19,802124b8 <__umoddi3+0xd8>
802124b4:	20811036 	bltu	r4,r2,802128f8 <__umoddi3+0x518>
802124b8:	20abc83a 	sub	r21,r4,r2
802124bc:	b80b883a 	mov	r5,r23
802124c0:	a809883a 	mov	r4,r21
802124c4:	0212a740 	call	80212a74 <__umodsi3>
802124c8:	1023883a 	mov	r17,r2
802124cc:	b80b883a 	mov	r5,r23
802124d0:	a809883a 	mov	r4,r21
802124d4:	0212a100 	call	80212a10 <__udivsi3>
802124d8:	8822943a 	slli	r17,r17,16
802124dc:	b085383a 	mul	r2,r22,r2
802124e0:	a0ffffcc 	andi	r3,r20,65535
802124e4:	1c46b03a 	or	r3,r3,r17
802124e8:	1880042e 	bgeu	r3,r2,802124fc <__umoddi3+0x11c>
802124ec:	1cc7883a 	add	r3,r3,r19
802124f0:	1cc00236 	bltu	r3,r19,802124fc <__umoddi3+0x11c>
802124f4:	1880012e 	bgeu	r3,r2,802124fc <__umoddi3+0x11c>
802124f8:	1cc7883a 	add	r3,r3,r19
802124fc:	1885c83a 	sub	r2,r3,r2
80212500:	1484d83a 	srl	r2,r2,r18
80212504:	0007883a 	mov	r3,zero
80212508:	00004f06 	br	80212648 <__umoddi3+0x268>
8021250c:	29c04c36 	bltu	r5,r7,80212640 <__umoddi3+0x260>
80212510:	00bfffd4 	movui	r2,65535
80212514:	11c0582e 	bgeu	r2,r7,80212678 <__umoddi3+0x298>
80212518:	00804034 	movhi	r2,256
8021251c:	10bfffc4 	addi	r2,r2,-1
80212520:	11c0e736 	bltu	r2,r7,802128c0 <__umoddi3+0x4e0>
80212524:	01000404 	movi	r4,16
80212528:	3904d83a 	srl	r2,r7,r4
8021252c:	00e008b4 	movhi	r3,32802
80212530:	18ec74c4 	addi	r3,r3,-20013
80212534:	1885883a 	add	r2,r3,r2
80212538:	14c00003 	ldbu	r19,0(r2)
8021253c:	00c00804 	movi	r3,32
80212540:	9927883a 	add	r19,r19,r4
80212544:	1ce9c83a 	sub	r20,r3,r19
80212548:	a000581e 	bne	r20,zero,802126ac <__umoddi3+0x2cc>
8021254c:	3c400136 	bltu	r7,r17,80212554 <__umoddi3+0x174>
80212550:	8180eb36 	bltu	r16,r6,80212900 <__umoddi3+0x520>
80212554:	8185c83a 	sub	r2,r16,r6
80212558:	89e3c83a 	sub	r17,r17,r7
8021255c:	8089803a 	cmpltu	r4,r16,r2
80212560:	8939c83a 	sub	fp,r17,r4
80212564:	e007883a 	mov	r3,fp
80212568:	00003706 	br	80212648 <__umoddi3+0x268>
8021256c:	3000041e 	bne	r6,zero,80212580 <__umoddi3+0x1a0>
80212570:	000b883a 	mov	r5,zero
80212574:	01000044 	movi	r4,1
80212578:	0212a100 	call	80212a10 <__udivsi3>
8021257c:	1027883a 	mov	r19,r2
80212580:	00bfffd4 	movui	r2,65535
80212584:	14c0402e 	bgeu	r2,r19,80212688 <__umoddi3+0x2a8>
80212588:	00804034 	movhi	r2,256
8021258c:	10bfffc4 	addi	r2,r2,-1
80212590:	14c0cd36 	bltu	r2,r19,802128c8 <__umoddi3+0x4e8>
80212594:	00800404 	movi	r2,16
80212598:	9886d83a 	srl	r3,r19,r2
8021259c:	012008b4 	movhi	r4,32802
802125a0:	212c74c4 	addi	r4,r4,-20013
802125a4:	20c7883a 	add	r3,r4,r3
802125a8:	18c00003 	ldbu	r3,0(r3)
802125ac:	1887883a 	add	r3,r3,r2
802125b0:	00800804 	movi	r2,32
802125b4:	10e5c83a 	sub	r18,r2,r3
802125b8:	9000901e 	bne	r18,zero,802127fc <__umoddi3+0x41c>
802125bc:	982cd43a 	srli	r22,r19,16
802125c0:	8ce3c83a 	sub	r17,r17,r19
802125c4:	9d7fffcc 	andi	r21,r19,65535
802125c8:	b00b883a 	mov	r5,r22
802125cc:	8809883a 	mov	r4,r17
802125d0:	0212a740 	call	80212a74 <__umodsi3>
802125d4:	8809883a 	mov	r4,r17
802125d8:	b00b883a 	mov	r5,r22
802125dc:	1021883a 	mov	r16,r2
802125e0:	0212a100 	call	80212a10 <__udivsi3>
802125e4:	8006943a 	slli	r3,r16,16
802125e8:	a008d43a 	srli	r4,r20,16
802125ec:	1545383a 	mul	r2,r2,r21
802125f0:	20c8b03a 	or	r4,r4,r3
802125f4:	2080042e 	bgeu	r4,r2,80212608 <__umoddi3+0x228>
802125f8:	24c9883a 	add	r4,r4,r19
802125fc:	24c00236 	bltu	r4,r19,80212608 <__umoddi3+0x228>
80212600:	2080012e 	bgeu	r4,r2,80212608 <__umoddi3+0x228>
80212604:	24c9883a 	add	r4,r4,r19
80212608:	20a1c83a 	sub	r16,r4,r2
8021260c:	b00b883a 	mov	r5,r22
80212610:	8009883a 	mov	r4,r16
80212614:	0212a740 	call	80212a74 <__umodsi3>
80212618:	1023883a 	mov	r17,r2
8021261c:	b00b883a 	mov	r5,r22
80212620:	8009883a 	mov	r4,r16
80212624:	0212a100 	call	80212a10 <__udivsi3>
80212628:	8822943a 	slli	r17,r17,16
8021262c:	1545383a 	mul	r2,r2,r21
80212630:	a53fffcc 	andi	r20,r20,65535
80212634:	a446b03a 	or	r3,r20,r17
80212638:	18bfb02e 	bgeu	r3,r2,802124fc <__reset+0xfa1f24fc>
8021263c:	003fab06 	br	802124ec <__reset+0xfa1f24ec>
80212640:	2005883a 	mov	r2,r4
80212644:	2807883a 	mov	r3,r5
80212648:	dfc00b17 	ldw	ra,44(sp)
8021264c:	df000a17 	ldw	fp,40(sp)
80212650:	ddc00917 	ldw	r23,36(sp)
80212654:	dd800817 	ldw	r22,32(sp)
80212658:	dd400717 	ldw	r21,28(sp)
8021265c:	dd000617 	ldw	r20,24(sp)
80212660:	dcc00517 	ldw	r19,20(sp)
80212664:	dc800417 	ldw	r18,16(sp)
80212668:	dc400317 	ldw	r17,12(sp)
8021266c:	dc000217 	ldw	r16,8(sp)
80212670:	dec00c04 	addi	sp,sp,48
80212674:	f800283a 	ret
80212678:	04c03fc4 	movi	r19,255
8021267c:	99c9803a 	cmpltu	r4,r19,r7
80212680:	200890fa 	slli	r4,r4,3
80212684:	003fa806 	br	80212528 <__reset+0xfa1f2528>
80212688:	00803fc4 	movi	r2,255
8021268c:	14c5803a 	cmpltu	r2,r2,r19
80212690:	100490fa 	slli	r2,r2,3
80212694:	003fc006 	br	80212598 <__reset+0xfa1f2598>
80212698:	00804034 	movhi	r2,256
8021269c:	10bfffc4 	addi	r2,r2,-1
802126a0:	11808b36 	bltu	r2,r6,802128d0 <__umoddi3+0x4f0>
802126a4:	01000404 	movi	r4,16
802126a8:	003f6406 	br	8021243c <__reset+0xfa1f243c>
802126ac:	34c4d83a 	srl	r2,r6,r19
802126b0:	3d0e983a 	sll	r7,r7,r20
802126b4:	8cf8d83a 	srl	fp,r17,r19
802126b8:	8d10983a 	sll	r8,r17,r20
802126bc:	38aab03a 	or	r21,r7,r2
802126c0:	a82cd43a 	srli	r22,r21,16
802126c4:	84e2d83a 	srl	r17,r16,r19
802126c8:	e009883a 	mov	r4,fp
802126cc:	b00b883a 	mov	r5,r22
802126d0:	8a22b03a 	or	r17,r17,r8
802126d4:	3524983a 	sll	r18,r6,r20
802126d8:	0212a740 	call	80212a74 <__umodsi3>
802126dc:	e009883a 	mov	r4,fp
802126e0:	b00b883a 	mov	r5,r22
802126e4:	102f883a 	mov	r23,r2
802126e8:	0212a100 	call	80212a10 <__udivsi3>
802126ec:	100d883a 	mov	r6,r2
802126f0:	b808943a 	slli	r4,r23,16
802126f4:	aa3fffcc 	andi	r8,r21,65535
802126f8:	8804d43a 	srli	r2,r17,16
802126fc:	41af383a 	mul	r23,r8,r6
80212700:	8520983a 	sll	r16,r16,r20
80212704:	1104b03a 	or	r2,r2,r4
80212708:	15c0042e 	bgeu	r2,r23,8021271c <__umoddi3+0x33c>
8021270c:	1545883a 	add	r2,r2,r21
80212710:	30ffffc4 	addi	r3,r6,-1
80212714:	1540742e 	bgeu	r2,r21,802128e8 <__umoddi3+0x508>
80212718:	180d883a 	mov	r6,r3
8021271c:	15efc83a 	sub	r23,r2,r23
80212720:	b00b883a 	mov	r5,r22
80212724:	b809883a 	mov	r4,r23
80212728:	d9800115 	stw	r6,4(sp)
8021272c:	da000015 	stw	r8,0(sp)
80212730:	0212a740 	call	80212a74 <__umodsi3>
80212734:	b00b883a 	mov	r5,r22
80212738:	b809883a 	mov	r4,r23
8021273c:	1039883a 	mov	fp,r2
80212740:	0212a100 	call	80212a10 <__udivsi3>
80212744:	da000017 	ldw	r8,0(sp)
80212748:	e038943a 	slli	fp,fp,16
8021274c:	100b883a 	mov	r5,r2
80212750:	4089383a 	mul	r4,r8,r2
80212754:	8a3fffcc 	andi	r8,r17,65535
80212758:	4710b03a 	or	r8,r8,fp
8021275c:	d9800117 	ldw	r6,4(sp)
80212760:	4100042e 	bgeu	r8,r4,80212774 <__umoddi3+0x394>
80212764:	4551883a 	add	r8,r8,r21
80212768:	10bfffc4 	addi	r2,r2,-1
8021276c:	45405a2e 	bgeu	r8,r21,802128d8 <__umoddi3+0x4f8>
80212770:	100b883a 	mov	r5,r2
80212774:	300c943a 	slli	r6,r6,16
80212778:	91ffffcc 	andi	r7,r18,65535
8021277c:	9004d43a 	srli	r2,r18,16
80212780:	314cb03a 	or	r6,r6,r5
80212784:	317fffcc 	andi	r5,r6,65535
80212788:	300cd43a 	srli	r6,r6,16
8021278c:	29d3383a 	mul	r9,r5,r7
80212790:	288b383a 	mul	r5,r5,r2
80212794:	31cf383a 	mul	r7,r6,r7
80212798:	4806d43a 	srli	r3,r9,16
8021279c:	4111c83a 	sub	r8,r8,r4
802127a0:	29cb883a 	add	r5,r5,r7
802127a4:	194b883a 	add	r5,r3,r5
802127a8:	3085383a 	mul	r2,r6,r2
802127ac:	29c0022e 	bgeu	r5,r7,802127b8 <__umoddi3+0x3d8>
802127b0:	00c00074 	movhi	r3,1
802127b4:	10c5883a 	add	r2,r2,r3
802127b8:	2808d43a 	srli	r4,r5,16
802127bc:	280a943a 	slli	r5,r5,16
802127c0:	4a7fffcc 	andi	r9,r9,65535
802127c4:	2085883a 	add	r2,r4,r2
802127c8:	2a4b883a 	add	r5,r5,r9
802127cc:	40803636 	bltu	r8,r2,802128a8 <__umoddi3+0x4c8>
802127d0:	40804d26 	beq	r8,r2,80212908 <__umoddi3+0x528>
802127d4:	4089c83a 	sub	r4,r8,r2
802127d8:	280f883a 	mov	r7,r5
802127dc:	81cfc83a 	sub	r7,r16,r7
802127e0:	81c7803a 	cmpltu	r3,r16,r7
802127e4:	20c7c83a 	sub	r3,r4,r3
802127e8:	1cc4983a 	sll	r2,r3,r19
802127ec:	3d0ed83a 	srl	r7,r7,r20
802127f0:	1d06d83a 	srl	r3,r3,r20
802127f4:	11c4b03a 	or	r2,r2,r7
802127f8:	003f9306 	br	80212648 <__reset+0xfa1f2648>
802127fc:	9ca6983a 	sll	r19,r19,r18
80212800:	88e8d83a 	srl	r20,r17,r3
80212804:	80c4d83a 	srl	r2,r16,r3
80212808:	982cd43a 	srli	r22,r19,16
8021280c:	8ca2983a 	sll	r17,r17,r18
80212810:	a009883a 	mov	r4,r20
80212814:	b00b883a 	mov	r5,r22
80212818:	1478b03a 	or	fp,r2,r17
8021281c:	0212a740 	call	80212a74 <__umodsi3>
80212820:	a009883a 	mov	r4,r20
80212824:	b00b883a 	mov	r5,r22
80212828:	1023883a 	mov	r17,r2
8021282c:	0212a100 	call	80212a10 <__udivsi3>
80212830:	9d7fffcc 	andi	r21,r19,65535
80212834:	880a943a 	slli	r5,r17,16
80212838:	e008d43a 	srli	r4,fp,16
8021283c:	a885383a 	mul	r2,r21,r2
80212840:	84a8983a 	sll	r20,r16,r18
80212844:	2148b03a 	or	r4,r4,r5
80212848:	2080042e 	bgeu	r4,r2,8021285c <__umoddi3+0x47c>
8021284c:	24c9883a 	add	r4,r4,r19
80212850:	24c00236 	bltu	r4,r19,8021285c <__umoddi3+0x47c>
80212854:	2080012e 	bgeu	r4,r2,8021285c <__umoddi3+0x47c>
80212858:	24c9883a 	add	r4,r4,r19
8021285c:	20a3c83a 	sub	r17,r4,r2
80212860:	b00b883a 	mov	r5,r22
80212864:	8809883a 	mov	r4,r17
80212868:	0212a740 	call	80212a74 <__umodsi3>
8021286c:	102f883a 	mov	r23,r2
80212870:	8809883a 	mov	r4,r17
80212874:	b00b883a 	mov	r5,r22
80212878:	0212a100 	call	80212a10 <__udivsi3>
8021287c:	b82e943a 	slli	r23,r23,16
80212880:	a885383a 	mul	r2,r21,r2
80212884:	e13fffcc 	andi	r4,fp,65535
80212888:	25c8b03a 	or	r4,r4,r23
8021288c:	2080042e 	bgeu	r4,r2,802128a0 <__umoddi3+0x4c0>
80212890:	24c9883a 	add	r4,r4,r19
80212894:	24c00236 	bltu	r4,r19,802128a0 <__umoddi3+0x4c0>
80212898:	2080012e 	bgeu	r4,r2,802128a0 <__umoddi3+0x4c0>
8021289c:	24c9883a 	add	r4,r4,r19
802128a0:	20a3c83a 	sub	r17,r4,r2
802128a4:	003f4806 	br	802125c8 <__reset+0xfa1f25c8>
802128a8:	2c8fc83a 	sub	r7,r5,r18
802128ac:	1545c83a 	sub	r2,r2,r21
802128b0:	29cb803a 	cmpltu	r5,r5,r7
802128b4:	1145c83a 	sub	r2,r2,r5
802128b8:	4089c83a 	sub	r4,r8,r2
802128bc:	003fc706 	br	802127dc <__reset+0xfa1f27dc>
802128c0:	01000604 	movi	r4,24
802128c4:	003f1806 	br	80212528 <__reset+0xfa1f2528>
802128c8:	00800604 	movi	r2,24
802128cc:	003f3206 	br	80212598 <__reset+0xfa1f2598>
802128d0:	01000604 	movi	r4,24
802128d4:	003ed906 	br	8021243c <__reset+0xfa1f243c>
802128d8:	413fa52e 	bgeu	r8,r4,80212770 <__reset+0xfa1f2770>
802128dc:	297fff84 	addi	r5,r5,-2
802128e0:	4551883a 	add	r8,r8,r21
802128e4:	003fa306 	br	80212774 <__reset+0xfa1f2774>
802128e8:	15ff8b2e 	bgeu	r2,r23,80212718 <__reset+0xfa1f2718>
802128ec:	31bfff84 	addi	r6,r6,-2
802128f0:	1545883a 	add	r2,r2,r21
802128f4:	003f8906 	br	8021271c <__reset+0xfa1f271c>
802128f8:	24c9883a 	add	r4,r4,r19
802128fc:	003eee06 	br	802124b8 <__reset+0xfa1f24b8>
80212900:	8005883a 	mov	r2,r16
80212904:	003f1706 	br	80212564 <__reset+0xfa1f2564>
80212908:	817fe736 	bltu	r16,r5,802128a8 <__reset+0xfa1f28a8>
8021290c:	280f883a 	mov	r7,r5
80212910:	0009883a 	mov	r4,zero
80212914:	003fb106 	br	802127dc <__reset+0xfa1f27dc>

80212918 <__divsi3>:
80212918:	20001b16 	blt	r4,zero,80212988 <__divsi3+0x70>
8021291c:	000f883a 	mov	r7,zero
80212920:	28001616 	blt	r5,zero,8021297c <__divsi3+0x64>
80212924:	200d883a 	mov	r6,r4
80212928:	29001a2e 	bgeu	r5,r4,80212994 <__divsi3+0x7c>
8021292c:	00800804 	movi	r2,32
80212930:	00c00044 	movi	r3,1
80212934:	00000106 	br	8021293c <__divsi3+0x24>
80212938:	10000d26 	beq	r2,zero,80212970 <__divsi3+0x58>
8021293c:	294b883a 	add	r5,r5,r5
80212940:	10bfffc4 	addi	r2,r2,-1
80212944:	18c7883a 	add	r3,r3,r3
80212948:	293ffb36 	bltu	r5,r4,80212938 <__reset+0xfa1f2938>
8021294c:	0005883a 	mov	r2,zero
80212950:	18000726 	beq	r3,zero,80212970 <__divsi3+0x58>
80212954:	0005883a 	mov	r2,zero
80212958:	31400236 	bltu	r6,r5,80212964 <__divsi3+0x4c>
8021295c:	314dc83a 	sub	r6,r6,r5
80212960:	10c4b03a 	or	r2,r2,r3
80212964:	1806d07a 	srli	r3,r3,1
80212968:	280ad07a 	srli	r5,r5,1
8021296c:	183ffa1e 	bne	r3,zero,80212958 <__reset+0xfa1f2958>
80212970:	38000126 	beq	r7,zero,80212978 <__divsi3+0x60>
80212974:	0085c83a 	sub	r2,zero,r2
80212978:	f800283a 	ret
8021297c:	014bc83a 	sub	r5,zero,r5
80212980:	39c0005c 	xori	r7,r7,1
80212984:	003fe706 	br	80212924 <__reset+0xfa1f2924>
80212988:	0109c83a 	sub	r4,zero,r4
8021298c:	01c00044 	movi	r7,1
80212990:	003fe306 	br	80212920 <__reset+0xfa1f2920>
80212994:	00c00044 	movi	r3,1
80212998:	003fee06 	br	80212954 <__reset+0xfa1f2954>

8021299c <__modsi3>:
8021299c:	20001716 	blt	r4,zero,802129fc <__modsi3+0x60>
802129a0:	000f883a 	mov	r7,zero
802129a4:	2005883a 	mov	r2,r4
802129a8:	28001216 	blt	r5,zero,802129f4 <__modsi3+0x58>
802129ac:	2900162e 	bgeu	r5,r4,80212a08 <__modsi3+0x6c>
802129b0:	01800804 	movi	r6,32
802129b4:	00c00044 	movi	r3,1
802129b8:	00000106 	br	802129c0 <__modsi3+0x24>
802129bc:	30000a26 	beq	r6,zero,802129e8 <__modsi3+0x4c>
802129c0:	294b883a 	add	r5,r5,r5
802129c4:	31bfffc4 	addi	r6,r6,-1
802129c8:	18c7883a 	add	r3,r3,r3
802129cc:	293ffb36 	bltu	r5,r4,802129bc <__reset+0xfa1f29bc>
802129d0:	18000526 	beq	r3,zero,802129e8 <__modsi3+0x4c>
802129d4:	1806d07a 	srli	r3,r3,1
802129d8:	11400136 	bltu	r2,r5,802129e0 <__modsi3+0x44>
802129dc:	1145c83a 	sub	r2,r2,r5
802129e0:	280ad07a 	srli	r5,r5,1
802129e4:	183ffb1e 	bne	r3,zero,802129d4 <__reset+0xfa1f29d4>
802129e8:	38000126 	beq	r7,zero,802129f0 <__modsi3+0x54>
802129ec:	0085c83a 	sub	r2,zero,r2
802129f0:	f800283a 	ret
802129f4:	014bc83a 	sub	r5,zero,r5
802129f8:	003fec06 	br	802129ac <__reset+0xfa1f29ac>
802129fc:	0109c83a 	sub	r4,zero,r4
80212a00:	01c00044 	movi	r7,1
80212a04:	003fe706 	br	802129a4 <__reset+0xfa1f29a4>
80212a08:	00c00044 	movi	r3,1
80212a0c:	003ff106 	br	802129d4 <__reset+0xfa1f29d4>

80212a10 <__udivsi3>:
80212a10:	200d883a 	mov	r6,r4
80212a14:	2900152e 	bgeu	r5,r4,80212a6c <__udivsi3+0x5c>
80212a18:	28001416 	blt	r5,zero,80212a6c <__udivsi3+0x5c>
80212a1c:	00800804 	movi	r2,32
80212a20:	00c00044 	movi	r3,1
80212a24:	00000206 	br	80212a30 <__udivsi3+0x20>
80212a28:	10000e26 	beq	r2,zero,80212a64 <__udivsi3+0x54>
80212a2c:	28000516 	blt	r5,zero,80212a44 <__udivsi3+0x34>
80212a30:	294b883a 	add	r5,r5,r5
80212a34:	10bfffc4 	addi	r2,r2,-1
80212a38:	18c7883a 	add	r3,r3,r3
80212a3c:	293ffa36 	bltu	r5,r4,80212a28 <__reset+0xfa1f2a28>
80212a40:	18000826 	beq	r3,zero,80212a64 <__udivsi3+0x54>
80212a44:	0005883a 	mov	r2,zero
80212a48:	31400236 	bltu	r6,r5,80212a54 <__udivsi3+0x44>
80212a4c:	314dc83a 	sub	r6,r6,r5
80212a50:	10c4b03a 	or	r2,r2,r3
80212a54:	1806d07a 	srli	r3,r3,1
80212a58:	280ad07a 	srli	r5,r5,1
80212a5c:	183ffa1e 	bne	r3,zero,80212a48 <__reset+0xfa1f2a48>
80212a60:	f800283a 	ret
80212a64:	0005883a 	mov	r2,zero
80212a68:	f800283a 	ret
80212a6c:	00c00044 	movi	r3,1
80212a70:	003ff406 	br	80212a44 <__reset+0xfa1f2a44>

80212a74 <__umodsi3>:
80212a74:	2005883a 	mov	r2,r4
80212a78:	2900122e 	bgeu	r5,r4,80212ac4 <__umodsi3+0x50>
80212a7c:	28001116 	blt	r5,zero,80212ac4 <__umodsi3+0x50>
80212a80:	01800804 	movi	r6,32
80212a84:	00c00044 	movi	r3,1
80212a88:	00000206 	br	80212a94 <__umodsi3+0x20>
80212a8c:	30000c26 	beq	r6,zero,80212ac0 <__umodsi3+0x4c>
80212a90:	28000516 	blt	r5,zero,80212aa8 <__umodsi3+0x34>
80212a94:	294b883a 	add	r5,r5,r5
80212a98:	31bfffc4 	addi	r6,r6,-1
80212a9c:	18c7883a 	add	r3,r3,r3
80212aa0:	293ffa36 	bltu	r5,r4,80212a8c <__reset+0xfa1f2a8c>
80212aa4:	18000626 	beq	r3,zero,80212ac0 <__umodsi3+0x4c>
80212aa8:	1806d07a 	srli	r3,r3,1
80212aac:	11400136 	bltu	r2,r5,80212ab4 <__umodsi3+0x40>
80212ab0:	1145c83a 	sub	r2,r2,r5
80212ab4:	280ad07a 	srli	r5,r5,1
80212ab8:	183ffb1e 	bne	r3,zero,80212aa8 <__reset+0xfa1f2aa8>
80212abc:	f800283a 	ret
80212ac0:	f800283a 	ret
80212ac4:	00c00044 	movi	r3,1
80212ac8:	003ff706 	br	80212aa8 <__reset+0xfa1f2aa8>

80212acc <__adddf3>:
80212acc:	02c00434 	movhi	r11,16
80212ad0:	5affffc4 	addi	r11,r11,-1
80212ad4:	2806d7fa 	srli	r3,r5,31
80212ad8:	2ad4703a 	and	r10,r5,r11
80212adc:	3ad2703a 	and	r9,r7,r11
80212ae0:	3804d53a 	srli	r2,r7,20
80212ae4:	3018d77a 	srli	r12,r6,29
80212ae8:	280ad53a 	srli	r5,r5,20
80212aec:	501490fa 	slli	r10,r10,3
80212af0:	2010d77a 	srli	r8,r4,29
80212af4:	481290fa 	slli	r9,r9,3
80212af8:	380ed7fa 	srli	r7,r7,31
80212afc:	defffb04 	addi	sp,sp,-20
80212b00:	dc800215 	stw	r18,8(sp)
80212b04:	dc400115 	stw	r17,4(sp)
80212b08:	dc000015 	stw	r16,0(sp)
80212b0c:	dfc00415 	stw	ra,16(sp)
80212b10:	dcc00315 	stw	r19,12(sp)
80212b14:	1c803fcc 	andi	r18,r3,255
80212b18:	2c01ffcc 	andi	r16,r5,2047
80212b1c:	5210b03a 	or	r8,r10,r8
80212b20:	202290fa 	slli	r17,r4,3
80212b24:	1081ffcc 	andi	r2,r2,2047
80212b28:	4b12b03a 	or	r9,r9,r12
80212b2c:	300c90fa 	slli	r6,r6,3
80212b30:	91c07526 	beq	r18,r7,80212d08 <__adddf3+0x23c>
80212b34:	8087c83a 	sub	r3,r16,r2
80212b38:	00c0ab0e 	bge	zero,r3,80212de8 <__adddf3+0x31c>
80212b3c:	10002a1e 	bne	r2,zero,80212be8 <__adddf3+0x11c>
80212b40:	4984b03a 	or	r2,r9,r6
80212b44:	1000961e 	bne	r2,zero,80212da0 <__adddf3+0x2d4>
80212b48:	888001cc 	andi	r2,r17,7
80212b4c:	10000726 	beq	r2,zero,80212b6c <__adddf3+0xa0>
80212b50:	888003cc 	andi	r2,r17,15
80212b54:	00c00104 	movi	r3,4
80212b58:	10c00426 	beq	r2,r3,80212b6c <__adddf3+0xa0>
80212b5c:	88c7883a 	add	r3,r17,r3
80212b60:	1c63803a 	cmpltu	r17,r3,r17
80212b64:	4451883a 	add	r8,r8,r17
80212b68:	1823883a 	mov	r17,r3
80212b6c:	4080202c 	andhi	r2,r8,128
80212b70:	10005926 	beq	r2,zero,80212cd8 <__adddf3+0x20c>
80212b74:	84000044 	addi	r16,r16,1
80212b78:	0081ffc4 	movi	r2,2047
80212b7c:	8080ba26 	beq	r16,r2,80212e68 <__adddf3+0x39c>
80212b80:	00bfe034 	movhi	r2,65408
80212b84:	10bfffc4 	addi	r2,r2,-1
80212b88:	4090703a 	and	r8,r8,r2
80212b8c:	4004977a 	slli	r2,r8,29
80212b90:	4010927a 	slli	r8,r8,9
80212b94:	8822d0fa 	srli	r17,r17,3
80212b98:	8401ffcc 	andi	r16,r16,2047
80212b9c:	4010d33a 	srli	r8,r8,12
80212ba0:	9007883a 	mov	r3,r18
80212ba4:	1444b03a 	or	r2,r2,r17
80212ba8:	8401ffcc 	andi	r16,r16,2047
80212bac:	8020953a 	slli	r16,r16,20
80212bb0:	18c03fcc 	andi	r3,r3,255
80212bb4:	01000434 	movhi	r4,16
80212bb8:	213fffc4 	addi	r4,r4,-1
80212bbc:	180697fa 	slli	r3,r3,31
80212bc0:	4110703a 	and	r8,r8,r4
80212bc4:	4410b03a 	or	r8,r8,r16
80212bc8:	40c6b03a 	or	r3,r8,r3
80212bcc:	dfc00417 	ldw	ra,16(sp)
80212bd0:	dcc00317 	ldw	r19,12(sp)
80212bd4:	dc800217 	ldw	r18,8(sp)
80212bd8:	dc400117 	ldw	r17,4(sp)
80212bdc:	dc000017 	ldw	r16,0(sp)
80212be0:	dec00504 	addi	sp,sp,20
80212be4:	f800283a 	ret
80212be8:	0081ffc4 	movi	r2,2047
80212bec:	80bfd626 	beq	r16,r2,80212b48 <__reset+0xfa1f2b48>
80212bf0:	4a402034 	orhi	r9,r9,128
80212bf4:	00800e04 	movi	r2,56
80212bf8:	10c09f16 	blt	r2,r3,80212e78 <__adddf3+0x3ac>
80212bfc:	008007c4 	movi	r2,31
80212c00:	10c0c216 	blt	r2,r3,80212f0c <__adddf3+0x440>
80212c04:	00800804 	movi	r2,32
80212c08:	10c5c83a 	sub	r2,r2,r3
80212c0c:	488a983a 	sll	r5,r9,r2
80212c10:	30c8d83a 	srl	r4,r6,r3
80212c14:	3084983a 	sll	r2,r6,r2
80212c18:	48c6d83a 	srl	r3,r9,r3
80212c1c:	290cb03a 	or	r6,r5,r4
80212c20:	1004c03a 	cmpne	r2,r2,zero
80212c24:	308cb03a 	or	r6,r6,r2
80212c28:	898dc83a 	sub	r6,r17,r6
80212c2c:	89a3803a 	cmpltu	r17,r17,r6
80212c30:	40d1c83a 	sub	r8,r8,r3
80212c34:	4451c83a 	sub	r8,r8,r17
80212c38:	3023883a 	mov	r17,r6
80212c3c:	4080202c 	andhi	r2,r8,128
80212c40:	10002326 	beq	r2,zero,80212cd0 <__adddf3+0x204>
80212c44:	04c02034 	movhi	r19,128
80212c48:	9cffffc4 	addi	r19,r19,-1
80212c4c:	44e6703a 	and	r19,r8,r19
80212c50:	98007626 	beq	r19,zero,80212e2c <__adddf3+0x360>
80212c54:	9809883a 	mov	r4,r19
80212c58:	02050080 	call	80205008 <__clzsi2>
80212c5c:	10fffe04 	addi	r3,r2,-8
80212c60:	010007c4 	movi	r4,31
80212c64:	20c07716 	blt	r4,r3,80212e44 <__adddf3+0x378>
80212c68:	00800804 	movi	r2,32
80212c6c:	10c5c83a 	sub	r2,r2,r3
80212c70:	8884d83a 	srl	r2,r17,r2
80212c74:	98d0983a 	sll	r8,r19,r3
80212c78:	88e2983a 	sll	r17,r17,r3
80212c7c:	1204b03a 	or	r2,r2,r8
80212c80:	1c007416 	blt	r3,r16,80212e54 <__adddf3+0x388>
80212c84:	1c21c83a 	sub	r16,r3,r16
80212c88:	82000044 	addi	r8,r16,1
80212c8c:	00c007c4 	movi	r3,31
80212c90:	1a009116 	blt	r3,r8,80212ed8 <__adddf3+0x40c>
80212c94:	00c00804 	movi	r3,32
80212c98:	1a07c83a 	sub	r3,r3,r8
80212c9c:	8a08d83a 	srl	r4,r17,r8
80212ca0:	88e2983a 	sll	r17,r17,r3
80212ca4:	10c6983a 	sll	r3,r2,r3
80212ca8:	1210d83a 	srl	r8,r2,r8
80212cac:	8804c03a 	cmpne	r2,r17,zero
80212cb0:	1906b03a 	or	r3,r3,r4
80212cb4:	18a2b03a 	or	r17,r3,r2
80212cb8:	0021883a 	mov	r16,zero
80212cbc:	003fa206 	br	80212b48 <__reset+0xfa1f2b48>
80212cc0:	1890b03a 	or	r8,r3,r2
80212cc4:	40017d26 	beq	r8,zero,802132bc <__adddf3+0x7f0>
80212cc8:	1011883a 	mov	r8,r2
80212ccc:	1823883a 	mov	r17,r3
80212cd0:	888001cc 	andi	r2,r17,7
80212cd4:	103f9e1e 	bne	r2,zero,80212b50 <__reset+0xfa1f2b50>
80212cd8:	4004977a 	slli	r2,r8,29
80212cdc:	8822d0fa 	srli	r17,r17,3
80212ce0:	4010d0fa 	srli	r8,r8,3
80212ce4:	9007883a 	mov	r3,r18
80212ce8:	1444b03a 	or	r2,r2,r17
80212cec:	0101ffc4 	movi	r4,2047
80212cf0:	81002426 	beq	r16,r4,80212d84 <__adddf3+0x2b8>
80212cf4:	8120703a 	and	r16,r16,r4
80212cf8:	01000434 	movhi	r4,16
80212cfc:	213fffc4 	addi	r4,r4,-1
80212d00:	4110703a 	and	r8,r8,r4
80212d04:	003fa806 	br	80212ba8 <__reset+0xfa1f2ba8>
80212d08:	8089c83a 	sub	r4,r16,r2
80212d0c:	01005e0e 	bge	zero,r4,80212e88 <__adddf3+0x3bc>
80212d10:	10002b26 	beq	r2,zero,80212dc0 <__adddf3+0x2f4>
80212d14:	0081ffc4 	movi	r2,2047
80212d18:	80bf8b26 	beq	r16,r2,80212b48 <__reset+0xfa1f2b48>
80212d1c:	4a402034 	orhi	r9,r9,128
80212d20:	00800e04 	movi	r2,56
80212d24:	1100a40e 	bge	r2,r4,80212fb8 <__adddf3+0x4ec>
80212d28:	498cb03a 	or	r6,r9,r6
80212d2c:	300ac03a 	cmpne	r5,r6,zero
80212d30:	0013883a 	mov	r9,zero
80212d34:	2c4b883a 	add	r5,r5,r17
80212d38:	2c63803a 	cmpltu	r17,r5,r17
80212d3c:	4a11883a 	add	r8,r9,r8
80212d40:	8a11883a 	add	r8,r17,r8
80212d44:	2823883a 	mov	r17,r5
80212d48:	4080202c 	andhi	r2,r8,128
80212d4c:	103fe026 	beq	r2,zero,80212cd0 <__reset+0xfa1f2cd0>
80212d50:	84000044 	addi	r16,r16,1
80212d54:	0081ffc4 	movi	r2,2047
80212d58:	8080d226 	beq	r16,r2,802130a4 <__adddf3+0x5d8>
80212d5c:	00bfe034 	movhi	r2,65408
80212d60:	10bfffc4 	addi	r2,r2,-1
80212d64:	4090703a 	and	r8,r8,r2
80212d68:	880ad07a 	srli	r5,r17,1
80212d6c:	400897fa 	slli	r4,r8,31
80212d70:	88c0004c 	andi	r3,r17,1
80212d74:	28e2b03a 	or	r17,r5,r3
80212d78:	4010d07a 	srli	r8,r8,1
80212d7c:	2462b03a 	or	r17,r4,r17
80212d80:	003f7106 	br	80212b48 <__reset+0xfa1f2b48>
80212d84:	4088b03a 	or	r4,r8,r2
80212d88:	20014526 	beq	r4,zero,802132a0 <__adddf3+0x7d4>
80212d8c:	01000434 	movhi	r4,16
80212d90:	42000234 	orhi	r8,r8,8
80212d94:	213fffc4 	addi	r4,r4,-1
80212d98:	4110703a 	and	r8,r8,r4
80212d9c:	003f8206 	br	80212ba8 <__reset+0xfa1f2ba8>
80212da0:	18ffffc4 	addi	r3,r3,-1
80212da4:	1800491e 	bne	r3,zero,80212ecc <__adddf3+0x400>
80212da8:	898bc83a 	sub	r5,r17,r6
80212dac:	8963803a 	cmpltu	r17,r17,r5
80212db0:	4251c83a 	sub	r8,r8,r9
80212db4:	4451c83a 	sub	r8,r8,r17
80212db8:	2823883a 	mov	r17,r5
80212dbc:	003f9f06 	br	80212c3c <__reset+0xfa1f2c3c>
80212dc0:	4984b03a 	or	r2,r9,r6
80212dc4:	103f6026 	beq	r2,zero,80212b48 <__reset+0xfa1f2b48>
80212dc8:	213fffc4 	addi	r4,r4,-1
80212dcc:	2000931e 	bne	r4,zero,8021301c <__adddf3+0x550>
80212dd0:	898d883a 	add	r6,r17,r6
80212dd4:	3463803a 	cmpltu	r17,r6,r17
80212dd8:	4251883a 	add	r8,r8,r9
80212ddc:	8a11883a 	add	r8,r17,r8
80212de0:	3023883a 	mov	r17,r6
80212de4:	003fd806 	br	80212d48 <__reset+0xfa1f2d48>
80212de8:	1800541e 	bne	r3,zero,80212f3c <__adddf3+0x470>
80212dec:	80800044 	addi	r2,r16,1
80212df0:	1081ffcc 	andi	r2,r2,2047
80212df4:	00c00044 	movi	r3,1
80212df8:	1880a00e 	bge	r3,r2,8021307c <__adddf3+0x5b0>
80212dfc:	8989c83a 	sub	r4,r17,r6
80212e00:	8905803a 	cmpltu	r2,r17,r4
80212e04:	4267c83a 	sub	r19,r8,r9
80212e08:	98a7c83a 	sub	r19,r19,r2
80212e0c:	9880202c 	andhi	r2,r19,128
80212e10:	10006326 	beq	r2,zero,80212fa0 <__adddf3+0x4d4>
80212e14:	3463c83a 	sub	r17,r6,r17
80212e18:	4a07c83a 	sub	r3,r9,r8
80212e1c:	344d803a 	cmpltu	r6,r6,r17
80212e20:	19a7c83a 	sub	r19,r3,r6
80212e24:	3825883a 	mov	r18,r7
80212e28:	983f8a1e 	bne	r19,zero,80212c54 <__reset+0xfa1f2c54>
80212e2c:	8809883a 	mov	r4,r17
80212e30:	02050080 	call	80205008 <__clzsi2>
80212e34:	10800804 	addi	r2,r2,32
80212e38:	10fffe04 	addi	r3,r2,-8
80212e3c:	010007c4 	movi	r4,31
80212e40:	20ff890e 	bge	r4,r3,80212c68 <__reset+0xfa1f2c68>
80212e44:	10bff604 	addi	r2,r2,-40
80212e48:	8884983a 	sll	r2,r17,r2
80212e4c:	0023883a 	mov	r17,zero
80212e50:	1c3f8c0e 	bge	r3,r16,80212c84 <__reset+0xfa1f2c84>
80212e54:	023fe034 	movhi	r8,65408
80212e58:	423fffc4 	addi	r8,r8,-1
80212e5c:	80e1c83a 	sub	r16,r16,r3
80212e60:	1210703a 	and	r8,r2,r8
80212e64:	003f3806 	br	80212b48 <__reset+0xfa1f2b48>
80212e68:	9007883a 	mov	r3,r18
80212e6c:	0011883a 	mov	r8,zero
80212e70:	0005883a 	mov	r2,zero
80212e74:	003f4c06 	br	80212ba8 <__reset+0xfa1f2ba8>
80212e78:	498cb03a 	or	r6,r9,r6
80212e7c:	300cc03a 	cmpne	r6,r6,zero
80212e80:	0007883a 	mov	r3,zero
80212e84:	003f6806 	br	80212c28 <__reset+0xfa1f2c28>
80212e88:	20009c1e 	bne	r4,zero,802130fc <__adddf3+0x630>
80212e8c:	80800044 	addi	r2,r16,1
80212e90:	1141ffcc 	andi	r5,r2,2047
80212e94:	01000044 	movi	r4,1
80212e98:	2140670e 	bge	r4,r5,80213038 <__adddf3+0x56c>
80212e9c:	0101ffc4 	movi	r4,2047
80212ea0:	11007f26 	beq	r2,r4,802130a0 <__adddf3+0x5d4>
80212ea4:	898d883a 	add	r6,r17,r6
80212ea8:	4247883a 	add	r3,r8,r9
80212eac:	3451803a 	cmpltu	r8,r6,r17
80212eb0:	40d1883a 	add	r8,r8,r3
80212eb4:	402297fa 	slli	r17,r8,31
80212eb8:	300cd07a 	srli	r6,r6,1
80212ebc:	4010d07a 	srli	r8,r8,1
80212ec0:	1021883a 	mov	r16,r2
80212ec4:	89a2b03a 	or	r17,r17,r6
80212ec8:	003f1f06 	br	80212b48 <__reset+0xfa1f2b48>
80212ecc:	0081ffc4 	movi	r2,2047
80212ed0:	80bf481e 	bne	r16,r2,80212bf4 <__reset+0xfa1f2bf4>
80212ed4:	003f1c06 	br	80212b48 <__reset+0xfa1f2b48>
80212ed8:	843ff844 	addi	r16,r16,-31
80212edc:	01000804 	movi	r4,32
80212ee0:	1406d83a 	srl	r3,r2,r16
80212ee4:	41005026 	beq	r8,r4,80213028 <__adddf3+0x55c>
80212ee8:	01001004 	movi	r4,64
80212eec:	2211c83a 	sub	r8,r4,r8
80212ef0:	1204983a 	sll	r2,r2,r8
80212ef4:	88a2b03a 	or	r17,r17,r2
80212ef8:	8822c03a 	cmpne	r17,r17,zero
80212efc:	1c62b03a 	or	r17,r3,r17
80212f00:	0011883a 	mov	r8,zero
80212f04:	0021883a 	mov	r16,zero
80212f08:	003f7106 	br	80212cd0 <__reset+0xfa1f2cd0>
80212f0c:	193ff804 	addi	r4,r3,-32
80212f10:	00800804 	movi	r2,32
80212f14:	4908d83a 	srl	r4,r9,r4
80212f18:	18804526 	beq	r3,r2,80213030 <__adddf3+0x564>
80212f1c:	00801004 	movi	r2,64
80212f20:	10c5c83a 	sub	r2,r2,r3
80212f24:	4886983a 	sll	r3,r9,r2
80212f28:	198cb03a 	or	r6,r3,r6
80212f2c:	300cc03a 	cmpne	r6,r6,zero
80212f30:	218cb03a 	or	r6,r4,r6
80212f34:	0007883a 	mov	r3,zero
80212f38:	003f3b06 	br	80212c28 <__reset+0xfa1f2c28>
80212f3c:	80002a26 	beq	r16,zero,80212fe8 <__adddf3+0x51c>
80212f40:	0101ffc4 	movi	r4,2047
80212f44:	11006826 	beq	r2,r4,802130e8 <__adddf3+0x61c>
80212f48:	00c7c83a 	sub	r3,zero,r3
80212f4c:	42002034 	orhi	r8,r8,128
80212f50:	01000e04 	movi	r4,56
80212f54:	20c07c16 	blt	r4,r3,80213148 <__adddf3+0x67c>
80212f58:	010007c4 	movi	r4,31
80212f5c:	20c0da16 	blt	r4,r3,802132c8 <__adddf3+0x7fc>
80212f60:	01000804 	movi	r4,32
80212f64:	20c9c83a 	sub	r4,r4,r3
80212f68:	4114983a 	sll	r10,r8,r4
80212f6c:	88cad83a 	srl	r5,r17,r3
80212f70:	8908983a 	sll	r4,r17,r4
80212f74:	40c6d83a 	srl	r3,r8,r3
80212f78:	5162b03a 	or	r17,r10,r5
80212f7c:	2008c03a 	cmpne	r4,r4,zero
80212f80:	8922b03a 	or	r17,r17,r4
80212f84:	3463c83a 	sub	r17,r6,r17
80212f88:	48c7c83a 	sub	r3,r9,r3
80212f8c:	344d803a 	cmpltu	r6,r6,r17
80212f90:	1991c83a 	sub	r8,r3,r6
80212f94:	1021883a 	mov	r16,r2
80212f98:	3825883a 	mov	r18,r7
80212f9c:	003f2706 	br	80212c3c <__reset+0xfa1f2c3c>
80212fa0:	24d0b03a 	or	r8,r4,r19
80212fa4:	40001b1e 	bne	r8,zero,80213014 <__adddf3+0x548>
80212fa8:	0005883a 	mov	r2,zero
80212fac:	0007883a 	mov	r3,zero
80212fb0:	0021883a 	mov	r16,zero
80212fb4:	003f4d06 	br	80212cec <__reset+0xfa1f2cec>
80212fb8:	008007c4 	movi	r2,31
80212fbc:	11003c16 	blt	r2,r4,802130b0 <__adddf3+0x5e4>
80212fc0:	00800804 	movi	r2,32
80212fc4:	1105c83a 	sub	r2,r2,r4
80212fc8:	488e983a 	sll	r7,r9,r2
80212fcc:	310ad83a 	srl	r5,r6,r4
80212fd0:	3084983a 	sll	r2,r6,r2
80212fd4:	4912d83a 	srl	r9,r9,r4
80212fd8:	394ab03a 	or	r5,r7,r5
80212fdc:	1004c03a 	cmpne	r2,r2,zero
80212fe0:	288ab03a 	or	r5,r5,r2
80212fe4:	003f5306 	br	80212d34 <__reset+0xfa1f2d34>
80212fe8:	4448b03a 	or	r4,r8,r17
80212fec:	20003e26 	beq	r4,zero,802130e8 <__adddf3+0x61c>
80212ff0:	00c6303a 	nor	r3,zero,r3
80212ff4:	18003a1e 	bne	r3,zero,802130e0 <__adddf3+0x614>
80212ff8:	3463c83a 	sub	r17,r6,r17
80212ffc:	4a07c83a 	sub	r3,r9,r8
80213000:	344d803a 	cmpltu	r6,r6,r17
80213004:	1991c83a 	sub	r8,r3,r6
80213008:	1021883a 	mov	r16,r2
8021300c:	3825883a 	mov	r18,r7
80213010:	003f0a06 	br	80212c3c <__reset+0xfa1f2c3c>
80213014:	2023883a 	mov	r17,r4
80213018:	003f0d06 	br	80212c50 <__reset+0xfa1f2c50>
8021301c:	0081ffc4 	movi	r2,2047
80213020:	80bf3f1e 	bne	r16,r2,80212d20 <__reset+0xfa1f2d20>
80213024:	003ec806 	br	80212b48 <__reset+0xfa1f2b48>
80213028:	0005883a 	mov	r2,zero
8021302c:	003fb106 	br	80212ef4 <__reset+0xfa1f2ef4>
80213030:	0007883a 	mov	r3,zero
80213034:	003fbc06 	br	80212f28 <__reset+0xfa1f2f28>
80213038:	4444b03a 	or	r2,r8,r17
8021303c:	8000871e 	bne	r16,zero,8021325c <__adddf3+0x790>
80213040:	1000ba26 	beq	r2,zero,8021332c <__adddf3+0x860>
80213044:	4984b03a 	or	r2,r9,r6
80213048:	103ebf26 	beq	r2,zero,80212b48 <__reset+0xfa1f2b48>
8021304c:	8985883a 	add	r2,r17,r6
80213050:	4247883a 	add	r3,r8,r9
80213054:	1451803a 	cmpltu	r8,r2,r17
80213058:	40d1883a 	add	r8,r8,r3
8021305c:	40c0202c 	andhi	r3,r8,128
80213060:	1023883a 	mov	r17,r2
80213064:	183f1a26 	beq	r3,zero,80212cd0 <__reset+0xfa1f2cd0>
80213068:	00bfe034 	movhi	r2,65408
8021306c:	10bfffc4 	addi	r2,r2,-1
80213070:	2021883a 	mov	r16,r4
80213074:	4090703a 	and	r8,r8,r2
80213078:	003eb306 	br	80212b48 <__reset+0xfa1f2b48>
8021307c:	4444b03a 	or	r2,r8,r17
80213080:	8000291e 	bne	r16,zero,80213128 <__adddf3+0x65c>
80213084:	10004b1e 	bne	r2,zero,802131b4 <__adddf3+0x6e8>
80213088:	4990b03a 	or	r8,r9,r6
8021308c:	40008b26 	beq	r8,zero,802132bc <__adddf3+0x7f0>
80213090:	4811883a 	mov	r8,r9
80213094:	3023883a 	mov	r17,r6
80213098:	3825883a 	mov	r18,r7
8021309c:	003eaa06 	br	80212b48 <__reset+0xfa1f2b48>
802130a0:	1021883a 	mov	r16,r2
802130a4:	0011883a 	mov	r8,zero
802130a8:	0005883a 	mov	r2,zero
802130ac:	003f0f06 	br	80212cec <__reset+0xfa1f2cec>
802130b0:	217ff804 	addi	r5,r4,-32
802130b4:	00800804 	movi	r2,32
802130b8:	494ad83a 	srl	r5,r9,r5
802130bc:	20807d26 	beq	r4,r2,802132b4 <__adddf3+0x7e8>
802130c0:	00801004 	movi	r2,64
802130c4:	1109c83a 	sub	r4,r2,r4
802130c8:	4912983a 	sll	r9,r9,r4
802130cc:	498cb03a 	or	r6,r9,r6
802130d0:	300cc03a 	cmpne	r6,r6,zero
802130d4:	298ab03a 	or	r5,r5,r6
802130d8:	0013883a 	mov	r9,zero
802130dc:	003f1506 	br	80212d34 <__reset+0xfa1f2d34>
802130e0:	0101ffc4 	movi	r4,2047
802130e4:	113f9a1e 	bne	r2,r4,80212f50 <__reset+0xfa1f2f50>
802130e8:	4811883a 	mov	r8,r9
802130ec:	3023883a 	mov	r17,r6
802130f0:	1021883a 	mov	r16,r2
802130f4:	3825883a 	mov	r18,r7
802130f8:	003e9306 	br	80212b48 <__reset+0xfa1f2b48>
802130fc:	8000161e 	bne	r16,zero,80213158 <__adddf3+0x68c>
80213100:	444ab03a 	or	r5,r8,r17
80213104:	28005126 	beq	r5,zero,8021324c <__adddf3+0x780>
80213108:	0108303a 	nor	r4,zero,r4
8021310c:	20004d1e 	bne	r4,zero,80213244 <__adddf3+0x778>
80213110:	89a3883a 	add	r17,r17,r6
80213114:	4253883a 	add	r9,r8,r9
80213118:	898d803a 	cmpltu	r6,r17,r6
8021311c:	3251883a 	add	r8,r6,r9
80213120:	1021883a 	mov	r16,r2
80213124:	003f0806 	br	80212d48 <__reset+0xfa1f2d48>
80213128:	1000301e 	bne	r2,zero,802131ec <__adddf3+0x720>
8021312c:	4984b03a 	or	r2,r9,r6
80213130:	10007126 	beq	r2,zero,802132f8 <__adddf3+0x82c>
80213134:	4811883a 	mov	r8,r9
80213138:	3023883a 	mov	r17,r6
8021313c:	3825883a 	mov	r18,r7
80213140:	0401ffc4 	movi	r16,2047
80213144:	003e8006 	br	80212b48 <__reset+0xfa1f2b48>
80213148:	4462b03a 	or	r17,r8,r17
8021314c:	8822c03a 	cmpne	r17,r17,zero
80213150:	0007883a 	mov	r3,zero
80213154:	003f8b06 	br	80212f84 <__reset+0xfa1f2f84>
80213158:	0141ffc4 	movi	r5,2047
8021315c:	11403b26 	beq	r2,r5,8021324c <__adddf3+0x780>
80213160:	0109c83a 	sub	r4,zero,r4
80213164:	42002034 	orhi	r8,r8,128
80213168:	01400e04 	movi	r5,56
8021316c:	29006716 	blt	r5,r4,8021330c <__adddf3+0x840>
80213170:	014007c4 	movi	r5,31
80213174:	29007016 	blt	r5,r4,80213338 <__adddf3+0x86c>
80213178:	01400804 	movi	r5,32
8021317c:	290bc83a 	sub	r5,r5,r4
80213180:	4154983a 	sll	r10,r8,r5
80213184:	890ed83a 	srl	r7,r17,r4
80213188:	894a983a 	sll	r5,r17,r5
8021318c:	4108d83a 	srl	r4,r8,r4
80213190:	51e2b03a 	or	r17,r10,r7
80213194:	280ac03a 	cmpne	r5,r5,zero
80213198:	8962b03a 	or	r17,r17,r5
8021319c:	89a3883a 	add	r17,r17,r6
802131a0:	2253883a 	add	r9,r4,r9
802131a4:	898d803a 	cmpltu	r6,r17,r6
802131a8:	3251883a 	add	r8,r6,r9
802131ac:	1021883a 	mov	r16,r2
802131b0:	003ee506 	br	80212d48 <__reset+0xfa1f2d48>
802131b4:	4984b03a 	or	r2,r9,r6
802131b8:	103e6326 	beq	r2,zero,80212b48 <__reset+0xfa1f2b48>
802131bc:	8987c83a 	sub	r3,r17,r6
802131c0:	88c9803a 	cmpltu	r4,r17,r3
802131c4:	4245c83a 	sub	r2,r8,r9
802131c8:	1105c83a 	sub	r2,r2,r4
802131cc:	1100202c 	andhi	r4,r2,128
802131d0:	203ebb26 	beq	r4,zero,80212cc0 <__reset+0xfa1f2cc0>
802131d4:	3463c83a 	sub	r17,r6,r17
802131d8:	4a07c83a 	sub	r3,r9,r8
802131dc:	344d803a 	cmpltu	r6,r6,r17
802131e0:	1991c83a 	sub	r8,r3,r6
802131e4:	3825883a 	mov	r18,r7
802131e8:	003e5706 	br	80212b48 <__reset+0xfa1f2b48>
802131ec:	4984b03a 	or	r2,r9,r6
802131f0:	10002e26 	beq	r2,zero,802132ac <__adddf3+0x7e0>
802131f4:	4004d0fa 	srli	r2,r8,3
802131f8:	8822d0fa 	srli	r17,r17,3
802131fc:	4010977a 	slli	r8,r8,29
80213200:	10c0022c 	andhi	r3,r2,8
80213204:	4462b03a 	or	r17,r8,r17
80213208:	18000826 	beq	r3,zero,8021322c <__adddf3+0x760>
8021320c:	4808d0fa 	srli	r4,r9,3
80213210:	20c0022c 	andhi	r3,r4,8
80213214:	1800051e 	bne	r3,zero,8021322c <__adddf3+0x760>
80213218:	300cd0fa 	srli	r6,r6,3
8021321c:	4806977a 	slli	r3,r9,29
80213220:	2005883a 	mov	r2,r4
80213224:	3825883a 	mov	r18,r7
80213228:	19a2b03a 	or	r17,r3,r6
8021322c:	8810d77a 	srli	r8,r17,29
80213230:	100490fa 	slli	r2,r2,3
80213234:	882290fa 	slli	r17,r17,3
80213238:	0401ffc4 	movi	r16,2047
8021323c:	4090b03a 	or	r8,r8,r2
80213240:	003e4106 	br	80212b48 <__reset+0xfa1f2b48>
80213244:	0141ffc4 	movi	r5,2047
80213248:	117fc71e 	bne	r2,r5,80213168 <__reset+0xfa1f3168>
8021324c:	4811883a 	mov	r8,r9
80213250:	3023883a 	mov	r17,r6
80213254:	1021883a 	mov	r16,r2
80213258:	003e3b06 	br	80212b48 <__reset+0xfa1f2b48>
8021325c:	10002f26 	beq	r2,zero,8021331c <__adddf3+0x850>
80213260:	4984b03a 	or	r2,r9,r6
80213264:	10001126 	beq	r2,zero,802132ac <__adddf3+0x7e0>
80213268:	4004d0fa 	srli	r2,r8,3
8021326c:	8822d0fa 	srli	r17,r17,3
80213270:	4010977a 	slli	r8,r8,29
80213274:	10c0022c 	andhi	r3,r2,8
80213278:	4462b03a 	or	r17,r8,r17
8021327c:	183feb26 	beq	r3,zero,8021322c <__reset+0xfa1f322c>
80213280:	4808d0fa 	srli	r4,r9,3
80213284:	20c0022c 	andhi	r3,r4,8
80213288:	183fe81e 	bne	r3,zero,8021322c <__reset+0xfa1f322c>
8021328c:	300cd0fa 	srli	r6,r6,3
80213290:	4806977a 	slli	r3,r9,29
80213294:	2005883a 	mov	r2,r4
80213298:	19a2b03a 	or	r17,r3,r6
8021329c:	003fe306 	br	8021322c <__reset+0xfa1f322c>
802132a0:	0011883a 	mov	r8,zero
802132a4:	0005883a 	mov	r2,zero
802132a8:	003e3f06 	br	80212ba8 <__reset+0xfa1f2ba8>
802132ac:	0401ffc4 	movi	r16,2047
802132b0:	003e2506 	br	80212b48 <__reset+0xfa1f2b48>
802132b4:	0013883a 	mov	r9,zero
802132b8:	003f8406 	br	802130cc <__reset+0xfa1f30cc>
802132bc:	0005883a 	mov	r2,zero
802132c0:	0007883a 	mov	r3,zero
802132c4:	003e8906 	br	80212cec <__reset+0xfa1f2cec>
802132c8:	197ff804 	addi	r5,r3,-32
802132cc:	01000804 	movi	r4,32
802132d0:	414ad83a 	srl	r5,r8,r5
802132d4:	19002426 	beq	r3,r4,80213368 <__adddf3+0x89c>
802132d8:	01001004 	movi	r4,64
802132dc:	20c7c83a 	sub	r3,r4,r3
802132e0:	40c6983a 	sll	r3,r8,r3
802132e4:	1c46b03a 	or	r3,r3,r17
802132e8:	1806c03a 	cmpne	r3,r3,zero
802132ec:	28e2b03a 	or	r17,r5,r3
802132f0:	0007883a 	mov	r3,zero
802132f4:	003f2306 	br	80212f84 <__reset+0xfa1f2f84>
802132f8:	0007883a 	mov	r3,zero
802132fc:	5811883a 	mov	r8,r11
80213300:	00bfffc4 	movi	r2,-1
80213304:	0401ffc4 	movi	r16,2047
80213308:	003e7806 	br	80212cec <__reset+0xfa1f2cec>
8021330c:	4462b03a 	or	r17,r8,r17
80213310:	8822c03a 	cmpne	r17,r17,zero
80213314:	0009883a 	mov	r4,zero
80213318:	003fa006 	br	8021319c <__reset+0xfa1f319c>
8021331c:	4811883a 	mov	r8,r9
80213320:	3023883a 	mov	r17,r6
80213324:	0401ffc4 	movi	r16,2047
80213328:	003e0706 	br	80212b48 <__reset+0xfa1f2b48>
8021332c:	4811883a 	mov	r8,r9
80213330:	3023883a 	mov	r17,r6
80213334:	003e0406 	br	80212b48 <__reset+0xfa1f2b48>
80213338:	21fff804 	addi	r7,r4,-32
8021333c:	01400804 	movi	r5,32
80213340:	41ced83a 	srl	r7,r8,r7
80213344:	21400a26 	beq	r4,r5,80213370 <__adddf3+0x8a4>
80213348:	01401004 	movi	r5,64
8021334c:	2909c83a 	sub	r4,r5,r4
80213350:	4108983a 	sll	r4,r8,r4
80213354:	2448b03a 	or	r4,r4,r17
80213358:	2008c03a 	cmpne	r4,r4,zero
8021335c:	3922b03a 	or	r17,r7,r4
80213360:	0009883a 	mov	r4,zero
80213364:	003f8d06 	br	8021319c <__reset+0xfa1f319c>
80213368:	0007883a 	mov	r3,zero
8021336c:	003fdd06 	br	802132e4 <__reset+0xfa1f32e4>
80213370:	0009883a 	mov	r4,zero
80213374:	003ff706 	br	80213354 <__reset+0xfa1f3354>

80213378 <__divdf3>:
80213378:	defff204 	addi	sp,sp,-56
8021337c:	dd400915 	stw	r21,36(sp)
80213380:	282ad53a 	srli	r21,r5,20
80213384:	dd000815 	stw	r20,32(sp)
80213388:	2828d7fa 	srli	r20,r5,31
8021338c:	dc000415 	stw	r16,16(sp)
80213390:	04000434 	movhi	r16,16
80213394:	df000c15 	stw	fp,48(sp)
80213398:	843fffc4 	addi	r16,r16,-1
8021339c:	dfc00d15 	stw	ra,52(sp)
802133a0:	ddc00b15 	stw	r23,44(sp)
802133a4:	dd800a15 	stw	r22,40(sp)
802133a8:	dcc00715 	stw	r19,28(sp)
802133ac:	dc800615 	stw	r18,24(sp)
802133b0:	dc400515 	stw	r17,20(sp)
802133b4:	ad41ffcc 	andi	r21,r21,2047
802133b8:	2c20703a 	and	r16,r5,r16
802133bc:	a7003fcc 	andi	fp,r20,255
802133c0:	a8006126 	beq	r21,zero,80213548 <__divdf3+0x1d0>
802133c4:	0081ffc4 	movi	r2,2047
802133c8:	2025883a 	mov	r18,r4
802133cc:	a8803726 	beq	r21,r2,802134ac <__divdf3+0x134>
802133d0:	80800434 	orhi	r2,r16,16
802133d4:	100490fa 	slli	r2,r2,3
802133d8:	2020d77a 	srli	r16,r4,29
802133dc:	202490fa 	slli	r18,r4,3
802133e0:	ad7f0044 	addi	r21,r21,-1023
802133e4:	80a0b03a 	or	r16,r16,r2
802133e8:	0027883a 	mov	r19,zero
802133ec:	0013883a 	mov	r9,zero
802133f0:	3804d53a 	srli	r2,r7,20
802133f4:	382cd7fa 	srli	r22,r7,31
802133f8:	04400434 	movhi	r17,16
802133fc:	8c7fffc4 	addi	r17,r17,-1
80213400:	1081ffcc 	andi	r2,r2,2047
80213404:	3011883a 	mov	r8,r6
80213408:	3c62703a 	and	r17,r7,r17
8021340c:	b5c03fcc 	andi	r23,r22,255
80213410:	10006c26 	beq	r2,zero,802135c4 <__divdf3+0x24c>
80213414:	00c1ffc4 	movi	r3,2047
80213418:	10c06426 	beq	r2,r3,802135ac <__divdf3+0x234>
8021341c:	88c00434 	orhi	r3,r17,16
80213420:	180690fa 	slli	r3,r3,3
80213424:	3022d77a 	srli	r17,r6,29
80213428:	301090fa 	slli	r8,r6,3
8021342c:	10bf0044 	addi	r2,r2,-1023
80213430:	88e2b03a 	or	r17,r17,r3
80213434:	000f883a 	mov	r7,zero
80213438:	a58cf03a 	xor	r6,r20,r22
8021343c:	3cc8b03a 	or	r4,r7,r19
80213440:	a8abc83a 	sub	r21,r21,r2
80213444:	008003c4 	movi	r2,15
80213448:	3007883a 	mov	r3,r6
8021344c:	34c03fcc 	andi	r19,r6,255
80213450:	11009036 	bltu	r2,r4,80213694 <__divdf3+0x31c>
80213454:	200890ba 	slli	r4,r4,2
80213458:	00a00874 	movhi	r2,32801
8021345c:	108d1b04 	addi	r2,r2,13420
80213460:	2089883a 	add	r4,r4,r2
80213464:	20800017 	ldw	r2,0(r4)
80213468:	1000683a 	jmp	r2
8021346c:	80213694 	ori	zero,r16,34010
80213470:	802134e4 	muli	zero,r16,-31533
80213474:	80213684 	addi	zero,r16,-31526
80213478:	802134d8 	cmpnei	zero,r16,-31533
8021347c:	80213684 	addi	zero,r16,-31526
80213480:	80213658 	cmpnei	zero,r16,-31527
80213484:	80213684 	addi	zero,r16,-31526
80213488:	802134d8 	cmpnei	zero,r16,-31533
8021348c:	802134e4 	muli	zero,r16,-31533
80213490:	802134e4 	muli	zero,r16,-31533
80213494:	80213658 	cmpnei	zero,r16,-31527
80213498:	802134d8 	cmpnei	zero,r16,-31533
8021349c:	802134c8 	cmpgei	zero,r16,-31533
802134a0:	802134c8 	cmpgei	zero,r16,-31533
802134a4:	802134c8 	cmpgei	zero,r16,-31533
802134a8:	80213978 	rdprs	zero,r16,-31515
802134ac:	2404b03a 	or	r2,r4,r16
802134b0:	1000661e 	bne	r2,zero,8021364c <__divdf3+0x2d4>
802134b4:	04c00204 	movi	r19,8
802134b8:	0021883a 	mov	r16,zero
802134bc:	0025883a 	mov	r18,zero
802134c0:	02400084 	movi	r9,2
802134c4:	003fca06 	br	802133f0 <__reset+0xfa1f33f0>
802134c8:	8023883a 	mov	r17,r16
802134cc:	9011883a 	mov	r8,r18
802134d0:	e02f883a 	mov	r23,fp
802134d4:	480f883a 	mov	r7,r9
802134d8:	00800084 	movi	r2,2
802134dc:	3881311e 	bne	r7,r2,802139a4 <__divdf3+0x62c>
802134e0:	b827883a 	mov	r19,r23
802134e4:	98c0004c 	andi	r3,r19,1
802134e8:	0081ffc4 	movi	r2,2047
802134ec:	000b883a 	mov	r5,zero
802134f0:	0025883a 	mov	r18,zero
802134f4:	1004953a 	slli	r2,r2,20
802134f8:	18c03fcc 	andi	r3,r3,255
802134fc:	04400434 	movhi	r17,16
80213500:	8c7fffc4 	addi	r17,r17,-1
80213504:	180697fa 	slli	r3,r3,31
80213508:	2c4a703a 	and	r5,r5,r17
8021350c:	288ab03a 	or	r5,r5,r2
80213510:	28c6b03a 	or	r3,r5,r3
80213514:	9005883a 	mov	r2,r18
80213518:	dfc00d17 	ldw	ra,52(sp)
8021351c:	df000c17 	ldw	fp,48(sp)
80213520:	ddc00b17 	ldw	r23,44(sp)
80213524:	dd800a17 	ldw	r22,40(sp)
80213528:	dd400917 	ldw	r21,36(sp)
8021352c:	dd000817 	ldw	r20,32(sp)
80213530:	dcc00717 	ldw	r19,28(sp)
80213534:	dc800617 	ldw	r18,24(sp)
80213538:	dc400517 	ldw	r17,20(sp)
8021353c:	dc000417 	ldw	r16,16(sp)
80213540:	dec00e04 	addi	sp,sp,56
80213544:	f800283a 	ret
80213548:	2404b03a 	or	r2,r4,r16
8021354c:	2027883a 	mov	r19,r4
80213550:	10003926 	beq	r2,zero,80213638 <__divdf3+0x2c0>
80213554:	80012e26 	beq	r16,zero,80213a10 <__divdf3+0x698>
80213558:	8009883a 	mov	r4,r16
8021355c:	d9800315 	stw	r6,12(sp)
80213560:	d9c00215 	stw	r7,8(sp)
80213564:	02050080 	call	80205008 <__clzsi2>
80213568:	d9800317 	ldw	r6,12(sp)
8021356c:	d9c00217 	ldw	r7,8(sp)
80213570:	113ffd44 	addi	r4,r2,-11
80213574:	00c00704 	movi	r3,28
80213578:	19012116 	blt	r3,r4,80213a00 <__divdf3+0x688>
8021357c:	00c00744 	movi	r3,29
80213580:	147ffe04 	addi	r17,r2,-8
80213584:	1907c83a 	sub	r3,r3,r4
80213588:	8460983a 	sll	r16,r16,r17
8021358c:	98c6d83a 	srl	r3,r19,r3
80213590:	9c64983a 	sll	r18,r19,r17
80213594:	1c20b03a 	or	r16,r3,r16
80213598:	1080fcc4 	addi	r2,r2,1011
8021359c:	00abc83a 	sub	r21,zero,r2
802135a0:	0027883a 	mov	r19,zero
802135a4:	0013883a 	mov	r9,zero
802135a8:	003f9106 	br	802133f0 <__reset+0xfa1f33f0>
802135ac:	3446b03a 	or	r3,r6,r17
802135b0:	18001f1e 	bne	r3,zero,80213630 <__divdf3+0x2b8>
802135b4:	0023883a 	mov	r17,zero
802135b8:	0011883a 	mov	r8,zero
802135bc:	01c00084 	movi	r7,2
802135c0:	003f9d06 	br	80213438 <__reset+0xfa1f3438>
802135c4:	3446b03a 	or	r3,r6,r17
802135c8:	18001526 	beq	r3,zero,80213620 <__divdf3+0x2a8>
802135cc:	88011b26 	beq	r17,zero,80213a3c <__divdf3+0x6c4>
802135d0:	8809883a 	mov	r4,r17
802135d4:	d9800315 	stw	r6,12(sp)
802135d8:	da400115 	stw	r9,4(sp)
802135dc:	02050080 	call	80205008 <__clzsi2>
802135e0:	d9800317 	ldw	r6,12(sp)
802135e4:	da400117 	ldw	r9,4(sp)
802135e8:	113ffd44 	addi	r4,r2,-11
802135ec:	00c00704 	movi	r3,28
802135f0:	19010e16 	blt	r3,r4,80213a2c <__divdf3+0x6b4>
802135f4:	00c00744 	movi	r3,29
802135f8:	123ffe04 	addi	r8,r2,-8
802135fc:	1907c83a 	sub	r3,r3,r4
80213600:	8a22983a 	sll	r17,r17,r8
80213604:	30c6d83a 	srl	r3,r6,r3
80213608:	3210983a 	sll	r8,r6,r8
8021360c:	1c62b03a 	or	r17,r3,r17
80213610:	1080fcc4 	addi	r2,r2,1011
80213614:	0085c83a 	sub	r2,zero,r2
80213618:	000f883a 	mov	r7,zero
8021361c:	003f8606 	br	80213438 <__reset+0xfa1f3438>
80213620:	0023883a 	mov	r17,zero
80213624:	0011883a 	mov	r8,zero
80213628:	01c00044 	movi	r7,1
8021362c:	003f8206 	br	80213438 <__reset+0xfa1f3438>
80213630:	01c000c4 	movi	r7,3
80213634:	003f8006 	br	80213438 <__reset+0xfa1f3438>
80213638:	04c00104 	movi	r19,4
8021363c:	0021883a 	mov	r16,zero
80213640:	0025883a 	mov	r18,zero
80213644:	02400044 	movi	r9,1
80213648:	003f6906 	br	802133f0 <__reset+0xfa1f33f0>
8021364c:	04c00304 	movi	r19,12
80213650:	024000c4 	movi	r9,3
80213654:	003f6606 	br	802133f0 <__reset+0xfa1f33f0>
80213658:	01400434 	movhi	r5,16
8021365c:	0007883a 	mov	r3,zero
80213660:	297fffc4 	addi	r5,r5,-1
80213664:	04bfffc4 	movi	r18,-1
80213668:	0081ffc4 	movi	r2,2047
8021366c:	003fa106 	br	802134f4 <__reset+0xfa1f34f4>
80213670:	00c00044 	movi	r3,1
80213674:	1887c83a 	sub	r3,r3,r2
80213678:	01000e04 	movi	r4,56
8021367c:	20c1210e 	bge	r4,r3,80213b04 <__divdf3+0x78c>
80213680:	98c0004c 	andi	r3,r19,1
80213684:	0005883a 	mov	r2,zero
80213688:	000b883a 	mov	r5,zero
8021368c:	0025883a 	mov	r18,zero
80213690:	003f9806 	br	802134f4 <__reset+0xfa1f34f4>
80213694:	8c00fd36 	bltu	r17,r16,80213a8c <__divdf3+0x714>
80213698:	8440fb26 	beq	r16,r17,80213a88 <__divdf3+0x710>
8021369c:	8007883a 	mov	r3,r16
802136a0:	ad7fffc4 	addi	r21,r21,-1
802136a4:	0021883a 	mov	r16,zero
802136a8:	4004d63a 	srli	r2,r8,24
802136ac:	8822923a 	slli	r17,r17,8
802136b0:	1809883a 	mov	r4,r3
802136b4:	402c923a 	slli	r22,r8,8
802136b8:	88b8b03a 	or	fp,r17,r2
802136bc:	e028d43a 	srli	r20,fp,16
802136c0:	d8c00015 	stw	r3,0(sp)
802136c4:	e5ffffcc 	andi	r23,fp,65535
802136c8:	a00b883a 	mov	r5,r20
802136cc:	0212a100 	call	80212a10 <__udivsi3>
802136d0:	d8c00017 	ldw	r3,0(sp)
802136d4:	a00b883a 	mov	r5,r20
802136d8:	d8800315 	stw	r2,12(sp)
802136dc:	1809883a 	mov	r4,r3
802136e0:	0212a740 	call	80212a74 <__umodsi3>
802136e4:	d9800317 	ldw	r6,12(sp)
802136e8:	1006943a 	slli	r3,r2,16
802136ec:	9004d43a 	srli	r2,r18,16
802136f0:	b9a3383a 	mul	r17,r23,r6
802136f4:	10c4b03a 	or	r2,r2,r3
802136f8:	1440062e 	bgeu	r2,r17,80213714 <__divdf3+0x39c>
802136fc:	1705883a 	add	r2,r2,fp
80213700:	30ffffc4 	addi	r3,r6,-1
80213704:	1700ee36 	bltu	r2,fp,80213ac0 <__divdf3+0x748>
80213708:	1440ed2e 	bgeu	r2,r17,80213ac0 <__divdf3+0x748>
8021370c:	31bfff84 	addi	r6,r6,-2
80213710:	1705883a 	add	r2,r2,fp
80213714:	1463c83a 	sub	r17,r2,r17
80213718:	a00b883a 	mov	r5,r20
8021371c:	8809883a 	mov	r4,r17
80213720:	d9800315 	stw	r6,12(sp)
80213724:	0212a100 	call	80212a10 <__udivsi3>
80213728:	a00b883a 	mov	r5,r20
8021372c:	8809883a 	mov	r4,r17
80213730:	d8800215 	stw	r2,8(sp)
80213734:	0212a740 	call	80212a74 <__umodsi3>
80213738:	d9c00217 	ldw	r7,8(sp)
8021373c:	1004943a 	slli	r2,r2,16
80213740:	94bfffcc 	andi	r18,r18,65535
80213744:	b9d1383a 	mul	r8,r23,r7
80213748:	90a4b03a 	or	r18,r18,r2
8021374c:	d9800317 	ldw	r6,12(sp)
80213750:	9200062e 	bgeu	r18,r8,8021376c <__divdf3+0x3f4>
80213754:	9725883a 	add	r18,r18,fp
80213758:	38bfffc4 	addi	r2,r7,-1
8021375c:	9700d636 	bltu	r18,fp,80213ab8 <__divdf3+0x740>
80213760:	9200d52e 	bgeu	r18,r8,80213ab8 <__divdf3+0x740>
80213764:	39ffff84 	addi	r7,r7,-2
80213768:	9725883a 	add	r18,r18,fp
8021376c:	3004943a 	slli	r2,r6,16
80213770:	b012d43a 	srli	r9,r22,16
80213774:	b1bfffcc 	andi	r6,r22,65535
80213778:	11e2b03a 	or	r17,r2,r7
8021377c:	8806d43a 	srli	r3,r17,16
80213780:	893fffcc 	andi	r4,r17,65535
80213784:	218b383a 	mul	r5,r4,r6
80213788:	30c5383a 	mul	r2,r6,r3
8021378c:	2249383a 	mul	r4,r4,r9
80213790:	280ed43a 	srli	r7,r5,16
80213794:	9225c83a 	sub	r18,r18,r8
80213798:	2089883a 	add	r4,r4,r2
8021379c:	3909883a 	add	r4,r7,r4
802137a0:	1a47383a 	mul	r3,r3,r9
802137a4:	2080022e 	bgeu	r4,r2,802137b0 <__divdf3+0x438>
802137a8:	00800074 	movhi	r2,1
802137ac:	1887883a 	add	r3,r3,r2
802137b0:	2004d43a 	srli	r2,r4,16
802137b4:	2008943a 	slli	r4,r4,16
802137b8:	297fffcc 	andi	r5,r5,65535
802137bc:	10c7883a 	add	r3,r2,r3
802137c0:	2149883a 	add	r4,r4,r5
802137c4:	90c0a536 	bltu	r18,r3,80213a5c <__divdf3+0x6e4>
802137c8:	90c0bf26 	beq	r18,r3,80213ac8 <__divdf3+0x750>
802137cc:	90c7c83a 	sub	r3,r18,r3
802137d0:	810fc83a 	sub	r7,r16,r4
802137d4:	81e5803a 	cmpltu	r18,r16,r7
802137d8:	1ca5c83a 	sub	r18,r3,r18
802137dc:	e480c126 	beq	fp,r18,80213ae4 <__divdf3+0x76c>
802137e0:	a00b883a 	mov	r5,r20
802137e4:	9009883a 	mov	r4,r18
802137e8:	d9800315 	stw	r6,12(sp)
802137ec:	d9c00215 	stw	r7,8(sp)
802137f0:	da400115 	stw	r9,4(sp)
802137f4:	0212a100 	call	80212a10 <__udivsi3>
802137f8:	a00b883a 	mov	r5,r20
802137fc:	9009883a 	mov	r4,r18
80213800:	d8800015 	stw	r2,0(sp)
80213804:	0212a740 	call	80212a74 <__umodsi3>
80213808:	d9c00217 	ldw	r7,8(sp)
8021380c:	da000017 	ldw	r8,0(sp)
80213810:	1006943a 	slli	r3,r2,16
80213814:	3804d43a 	srli	r2,r7,16
80213818:	ba21383a 	mul	r16,r23,r8
8021381c:	d9800317 	ldw	r6,12(sp)
80213820:	10c4b03a 	or	r2,r2,r3
80213824:	da400117 	ldw	r9,4(sp)
80213828:	1400062e 	bgeu	r2,r16,80213844 <__divdf3+0x4cc>
8021382c:	1705883a 	add	r2,r2,fp
80213830:	40ffffc4 	addi	r3,r8,-1
80213834:	1700ad36 	bltu	r2,fp,80213aec <__divdf3+0x774>
80213838:	1400ac2e 	bgeu	r2,r16,80213aec <__divdf3+0x774>
8021383c:	423fff84 	addi	r8,r8,-2
80213840:	1705883a 	add	r2,r2,fp
80213844:	1421c83a 	sub	r16,r2,r16
80213848:	a00b883a 	mov	r5,r20
8021384c:	8009883a 	mov	r4,r16
80213850:	d9800315 	stw	r6,12(sp)
80213854:	d9c00215 	stw	r7,8(sp)
80213858:	da000015 	stw	r8,0(sp)
8021385c:	da400115 	stw	r9,4(sp)
80213860:	0212a100 	call	80212a10 <__udivsi3>
80213864:	8009883a 	mov	r4,r16
80213868:	a00b883a 	mov	r5,r20
8021386c:	1025883a 	mov	r18,r2
80213870:	0212a740 	call	80212a74 <__umodsi3>
80213874:	d9c00217 	ldw	r7,8(sp)
80213878:	1004943a 	slli	r2,r2,16
8021387c:	bcaf383a 	mul	r23,r23,r18
80213880:	393fffcc 	andi	r4,r7,65535
80213884:	2088b03a 	or	r4,r4,r2
80213888:	d9800317 	ldw	r6,12(sp)
8021388c:	da000017 	ldw	r8,0(sp)
80213890:	da400117 	ldw	r9,4(sp)
80213894:	25c0062e 	bgeu	r4,r23,802138b0 <__divdf3+0x538>
80213898:	2709883a 	add	r4,r4,fp
8021389c:	90bfffc4 	addi	r2,r18,-1
802138a0:	27009436 	bltu	r4,fp,80213af4 <__divdf3+0x77c>
802138a4:	25c0932e 	bgeu	r4,r23,80213af4 <__divdf3+0x77c>
802138a8:	94bfff84 	addi	r18,r18,-2
802138ac:	2709883a 	add	r4,r4,fp
802138b0:	4004943a 	slli	r2,r8,16
802138b4:	25efc83a 	sub	r23,r4,r23
802138b8:	1490b03a 	or	r8,r2,r18
802138bc:	4008d43a 	srli	r4,r8,16
802138c0:	40ffffcc 	andi	r3,r8,65535
802138c4:	30c5383a 	mul	r2,r6,r3
802138c8:	1a47383a 	mul	r3,r3,r9
802138cc:	310d383a 	mul	r6,r6,r4
802138d0:	100ad43a 	srli	r5,r2,16
802138d4:	4913383a 	mul	r9,r9,r4
802138d8:	1987883a 	add	r3,r3,r6
802138dc:	28c7883a 	add	r3,r5,r3
802138e0:	1980022e 	bgeu	r3,r6,802138ec <__divdf3+0x574>
802138e4:	01000074 	movhi	r4,1
802138e8:	4913883a 	add	r9,r9,r4
802138ec:	1808d43a 	srli	r4,r3,16
802138f0:	1806943a 	slli	r3,r3,16
802138f4:	10bfffcc 	andi	r2,r2,65535
802138f8:	2253883a 	add	r9,r4,r9
802138fc:	1887883a 	add	r3,r3,r2
80213900:	ba403836 	bltu	r23,r9,802139e4 <__divdf3+0x66c>
80213904:	ba403626 	beq	r23,r9,802139e0 <__divdf3+0x668>
80213908:	42000054 	ori	r8,r8,1
8021390c:	a880ffc4 	addi	r2,r21,1023
80213910:	00bf570e 	bge	zero,r2,80213670 <__reset+0xfa1f3670>
80213914:	40c001cc 	andi	r3,r8,7
80213918:	18000726 	beq	r3,zero,80213938 <__divdf3+0x5c0>
8021391c:	40c003cc 	andi	r3,r8,15
80213920:	01000104 	movi	r4,4
80213924:	19000426 	beq	r3,r4,80213938 <__divdf3+0x5c0>
80213928:	4107883a 	add	r3,r8,r4
8021392c:	1a11803a 	cmpltu	r8,r3,r8
80213930:	8a23883a 	add	r17,r17,r8
80213934:	1811883a 	mov	r8,r3
80213938:	88c0402c 	andhi	r3,r17,256
8021393c:	18000426 	beq	r3,zero,80213950 <__divdf3+0x5d8>
80213940:	00ffc034 	movhi	r3,65280
80213944:	18ffffc4 	addi	r3,r3,-1
80213948:	a8810004 	addi	r2,r21,1024
8021394c:	88e2703a 	and	r17,r17,r3
80213950:	00c1ff84 	movi	r3,2046
80213954:	18bee316 	blt	r3,r2,802134e4 <__reset+0xfa1f34e4>
80213958:	8824977a 	slli	r18,r17,29
8021395c:	4010d0fa 	srli	r8,r8,3
80213960:	8822927a 	slli	r17,r17,9
80213964:	1081ffcc 	andi	r2,r2,2047
80213968:	9224b03a 	or	r18,r18,r8
8021396c:	880ad33a 	srli	r5,r17,12
80213970:	98c0004c 	andi	r3,r19,1
80213974:	003edf06 	br	802134f4 <__reset+0xfa1f34f4>
80213978:	8080022c 	andhi	r2,r16,8
8021397c:	10001226 	beq	r2,zero,802139c8 <__divdf3+0x650>
80213980:	8880022c 	andhi	r2,r17,8
80213984:	1000101e 	bne	r2,zero,802139c8 <__divdf3+0x650>
80213988:	00800434 	movhi	r2,16
8021398c:	89400234 	orhi	r5,r17,8
80213990:	10bfffc4 	addi	r2,r2,-1
80213994:	b007883a 	mov	r3,r22
80213998:	288a703a 	and	r5,r5,r2
8021399c:	4025883a 	mov	r18,r8
802139a0:	003f3106 	br	80213668 <__reset+0xfa1f3668>
802139a4:	008000c4 	movi	r2,3
802139a8:	3880a626 	beq	r7,r2,80213c44 <__divdf3+0x8cc>
802139ac:	00800044 	movi	r2,1
802139b0:	3880521e 	bne	r7,r2,80213afc <__divdf3+0x784>
802139b4:	b807883a 	mov	r3,r23
802139b8:	0005883a 	mov	r2,zero
802139bc:	000b883a 	mov	r5,zero
802139c0:	0025883a 	mov	r18,zero
802139c4:	003ecb06 	br	802134f4 <__reset+0xfa1f34f4>
802139c8:	00800434 	movhi	r2,16
802139cc:	81400234 	orhi	r5,r16,8
802139d0:	10bfffc4 	addi	r2,r2,-1
802139d4:	a007883a 	mov	r3,r20
802139d8:	288a703a 	and	r5,r5,r2
802139dc:	003f2206 	br	80213668 <__reset+0xfa1f3668>
802139e0:	183fca26 	beq	r3,zero,8021390c <__reset+0xfa1f390c>
802139e4:	e5ef883a 	add	r23,fp,r23
802139e8:	40bfffc4 	addi	r2,r8,-1
802139ec:	bf00392e 	bgeu	r23,fp,80213ad4 <__divdf3+0x75c>
802139f0:	1011883a 	mov	r8,r2
802139f4:	ba7fc41e 	bne	r23,r9,80213908 <__reset+0xfa1f3908>
802139f8:	b0ffc31e 	bne	r22,r3,80213908 <__reset+0xfa1f3908>
802139fc:	003fc306 	br	8021390c <__reset+0xfa1f390c>
80213a00:	143ff604 	addi	r16,r2,-40
80213a04:	9c20983a 	sll	r16,r19,r16
80213a08:	0025883a 	mov	r18,zero
80213a0c:	003ee206 	br	80213598 <__reset+0xfa1f3598>
80213a10:	d9800315 	stw	r6,12(sp)
80213a14:	d9c00215 	stw	r7,8(sp)
80213a18:	02050080 	call	80205008 <__clzsi2>
80213a1c:	10800804 	addi	r2,r2,32
80213a20:	d9c00217 	ldw	r7,8(sp)
80213a24:	d9800317 	ldw	r6,12(sp)
80213a28:	003ed106 	br	80213570 <__reset+0xfa1f3570>
80213a2c:	147ff604 	addi	r17,r2,-40
80213a30:	3462983a 	sll	r17,r6,r17
80213a34:	0011883a 	mov	r8,zero
80213a38:	003ef506 	br	80213610 <__reset+0xfa1f3610>
80213a3c:	3009883a 	mov	r4,r6
80213a40:	d9800315 	stw	r6,12(sp)
80213a44:	da400115 	stw	r9,4(sp)
80213a48:	02050080 	call	80205008 <__clzsi2>
80213a4c:	10800804 	addi	r2,r2,32
80213a50:	da400117 	ldw	r9,4(sp)
80213a54:	d9800317 	ldw	r6,12(sp)
80213a58:	003ee306 	br	802135e8 <__reset+0xfa1f35e8>
80213a5c:	85a1883a 	add	r16,r16,r22
80213a60:	8585803a 	cmpltu	r2,r16,r22
80213a64:	1705883a 	add	r2,r2,fp
80213a68:	14a5883a 	add	r18,r2,r18
80213a6c:	88bfffc4 	addi	r2,r17,-1
80213a70:	e4800c2e 	bgeu	fp,r18,80213aa4 <__divdf3+0x72c>
80213a74:	90c03e36 	bltu	r18,r3,80213b70 <__divdf3+0x7f8>
80213a78:	1c806926 	beq	r3,r18,80213c20 <__divdf3+0x8a8>
80213a7c:	90c7c83a 	sub	r3,r18,r3
80213a80:	1023883a 	mov	r17,r2
80213a84:	003f5206 	br	802137d0 <__reset+0xfa1f37d0>
80213a88:	923f0436 	bltu	r18,r8,8021369c <__reset+0xfa1f369c>
80213a8c:	800897fa 	slli	r4,r16,31
80213a90:	9004d07a 	srli	r2,r18,1
80213a94:	8006d07a 	srli	r3,r16,1
80213a98:	902097fa 	slli	r16,r18,31
80213a9c:	20a4b03a 	or	r18,r4,r2
80213aa0:	003f0106 	br	802136a8 <__reset+0xfa1f36a8>
80213aa4:	e4bff51e 	bne	fp,r18,80213a7c <__reset+0xfa1f3a7c>
80213aa8:	85bff22e 	bgeu	r16,r22,80213a74 <__reset+0xfa1f3a74>
80213aac:	e0c7c83a 	sub	r3,fp,r3
80213ab0:	1023883a 	mov	r17,r2
80213ab4:	003f4606 	br	802137d0 <__reset+0xfa1f37d0>
80213ab8:	100f883a 	mov	r7,r2
80213abc:	003f2b06 	br	8021376c <__reset+0xfa1f376c>
80213ac0:	180d883a 	mov	r6,r3
80213ac4:	003f1306 	br	80213714 <__reset+0xfa1f3714>
80213ac8:	813fe436 	bltu	r16,r4,80213a5c <__reset+0xfa1f3a5c>
80213acc:	0007883a 	mov	r3,zero
80213ad0:	003f3f06 	br	802137d0 <__reset+0xfa1f37d0>
80213ad4:	ba402c36 	bltu	r23,r9,80213b88 <__divdf3+0x810>
80213ad8:	4dc05426 	beq	r9,r23,80213c2c <__divdf3+0x8b4>
80213adc:	1011883a 	mov	r8,r2
80213ae0:	003f8906 	br	80213908 <__reset+0xfa1f3908>
80213ae4:	023fffc4 	movi	r8,-1
80213ae8:	003f8806 	br	8021390c <__reset+0xfa1f390c>
80213aec:	1811883a 	mov	r8,r3
80213af0:	003f5406 	br	80213844 <__reset+0xfa1f3844>
80213af4:	1025883a 	mov	r18,r2
80213af8:	003f6d06 	br	802138b0 <__reset+0xfa1f38b0>
80213afc:	b827883a 	mov	r19,r23
80213b00:	003f8206 	br	8021390c <__reset+0xfa1f390c>
80213b04:	010007c4 	movi	r4,31
80213b08:	20c02616 	blt	r4,r3,80213ba4 <__divdf3+0x82c>
80213b0c:	00800804 	movi	r2,32
80213b10:	10c5c83a 	sub	r2,r2,r3
80213b14:	888a983a 	sll	r5,r17,r2
80213b18:	40c8d83a 	srl	r4,r8,r3
80213b1c:	4084983a 	sll	r2,r8,r2
80213b20:	88e2d83a 	srl	r17,r17,r3
80213b24:	2906b03a 	or	r3,r5,r4
80213b28:	1004c03a 	cmpne	r2,r2,zero
80213b2c:	1886b03a 	or	r3,r3,r2
80213b30:	188001cc 	andi	r2,r3,7
80213b34:	10000726 	beq	r2,zero,80213b54 <__divdf3+0x7dc>
80213b38:	188003cc 	andi	r2,r3,15
80213b3c:	01000104 	movi	r4,4
80213b40:	11000426 	beq	r2,r4,80213b54 <__divdf3+0x7dc>
80213b44:	1805883a 	mov	r2,r3
80213b48:	10c00104 	addi	r3,r2,4
80213b4c:	1885803a 	cmpltu	r2,r3,r2
80213b50:	88a3883a 	add	r17,r17,r2
80213b54:	8880202c 	andhi	r2,r17,128
80213b58:	10002726 	beq	r2,zero,80213bf8 <__divdf3+0x880>
80213b5c:	98c0004c 	andi	r3,r19,1
80213b60:	00800044 	movi	r2,1
80213b64:	000b883a 	mov	r5,zero
80213b68:	0025883a 	mov	r18,zero
80213b6c:	003e6106 	br	802134f4 <__reset+0xfa1f34f4>
80213b70:	85a1883a 	add	r16,r16,r22
80213b74:	8585803a 	cmpltu	r2,r16,r22
80213b78:	1705883a 	add	r2,r2,fp
80213b7c:	14a5883a 	add	r18,r2,r18
80213b80:	8c7fff84 	addi	r17,r17,-2
80213b84:	003f1106 	br	802137cc <__reset+0xfa1f37cc>
80213b88:	b589883a 	add	r4,r22,r22
80213b8c:	25ad803a 	cmpltu	r22,r4,r22
80213b90:	b739883a 	add	fp,r22,fp
80213b94:	40bfff84 	addi	r2,r8,-2
80213b98:	bf2f883a 	add	r23,r23,fp
80213b9c:	202d883a 	mov	r22,r4
80213ba0:	003f9306 	br	802139f0 <__reset+0xfa1f39f0>
80213ba4:	013ff844 	movi	r4,-31
80213ba8:	2085c83a 	sub	r2,r4,r2
80213bac:	8888d83a 	srl	r4,r17,r2
80213bb0:	00800804 	movi	r2,32
80213bb4:	18802126 	beq	r3,r2,80213c3c <__divdf3+0x8c4>
80213bb8:	00801004 	movi	r2,64
80213bbc:	10c5c83a 	sub	r2,r2,r3
80213bc0:	8884983a 	sll	r2,r17,r2
80213bc4:	1204b03a 	or	r2,r2,r8
80213bc8:	1004c03a 	cmpne	r2,r2,zero
80213bcc:	2084b03a 	or	r2,r4,r2
80213bd0:	144001cc 	andi	r17,r2,7
80213bd4:	88000d1e 	bne	r17,zero,80213c0c <__divdf3+0x894>
80213bd8:	000b883a 	mov	r5,zero
80213bdc:	1024d0fa 	srli	r18,r2,3
80213be0:	98c0004c 	andi	r3,r19,1
80213be4:	0005883a 	mov	r2,zero
80213be8:	9464b03a 	or	r18,r18,r17
80213bec:	003e4106 	br	802134f4 <__reset+0xfa1f34f4>
80213bf0:	1007883a 	mov	r3,r2
80213bf4:	0023883a 	mov	r17,zero
80213bf8:	880a927a 	slli	r5,r17,9
80213bfc:	1805883a 	mov	r2,r3
80213c00:	8822977a 	slli	r17,r17,29
80213c04:	280ad33a 	srli	r5,r5,12
80213c08:	003ff406 	br	80213bdc <__reset+0xfa1f3bdc>
80213c0c:	10c003cc 	andi	r3,r2,15
80213c10:	01000104 	movi	r4,4
80213c14:	193ff626 	beq	r3,r4,80213bf0 <__reset+0xfa1f3bf0>
80213c18:	0023883a 	mov	r17,zero
80213c1c:	003fca06 	br	80213b48 <__reset+0xfa1f3b48>
80213c20:	813fd336 	bltu	r16,r4,80213b70 <__reset+0xfa1f3b70>
80213c24:	1023883a 	mov	r17,r2
80213c28:	003fa806 	br	80213acc <__reset+0xfa1f3acc>
80213c2c:	b0ffd636 	bltu	r22,r3,80213b88 <__reset+0xfa1f3b88>
80213c30:	1011883a 	mov	r8,r2
80213c34:	b0ff341e 	bne	r22,r3,80213908 <__reset+0xfa1f3908>
80213c38:	003f3406 	br	8021390c <__reset+0xfa1f390c>
80213c3c:	0005883a 	mov	r2,zero
80213c40:	003fe006 	br	80213bc4 <__reset+0xfa1f3bc4>
80213c44:	00800434 	movhi	r2,16
80213c48:	89400234 	orhi	r5,r17,8
80213c4c:	10bfffc4 	addi	r2,r2,-1
80213c50:	b807883a 	mov	r3,r23
80213c54:	288a703a 	and	r5,r5,r2
80213c58:	4025883a 	mov	r18,r8
80213c5c:	003e8206 	br	80213668 <__reset+0xfa1f3668>

80213c60 <__eqdf2>:
80213c60:	2804d53a 	srli	r2,r5,20
80213c64:	3806d53a 	srli	r3,r7,20
80213c68:	02000434 	movhi	r8,16
80213c6c:	423fffc4 	addi	r8,r8,-1
80213c70:	1081ffcc 	andi	r2,r2,2047
80213c74:	0281ffc4 	movi	r10,2047
80213c78:	2a12703a 	and	r9,r5,r8
80213c7c:	18c1ffcc 	andi	r3,r3,2047
80213c80:	3a10703a 	and	r8,r7,r8
80213c84:	280ad7fa 	srli	r5,r5,31
80213c88:	380ed7fa 	srli	r7,r7,31
80213c8c:	12801026 	beq	r2,r10,80213cd0 <__eqdf2+0x70>
80213c90:	0281ffc4 	movi	r10,2047
80213c94:	1a800a26 	beq	r3,r10,80213cc0 <__eqdf2+0x60>
80213c98:	10c00226 	beq	r2,r3,80213ca4 <__eqdf2+0x44>
80213c9c:	00800044 	movi	r2,1
80213ca0:	f800283a 	ret
80213ca4:	4a3ffd1e 	bne	r9,r8,80213c9c <__reset+0xfa1f3c9c>
80213ca8:	21bffc1e 	bne	r4,r6,80213c9c <__reset+0xfa1f3c9c>
80213cac:	29c00c26 	beq	r5,r7,80213ce0 <__eqdf2+0x80>
80213cb0:	103ffa1e 	bne	r2,zero,80213c9c <__reset+0xfa1f3c9c>
80213cb4:	2244b03a 	or	r2,r4,r9
80213cb8:	1004c03a 	cmpne	r2,r2,zero
80213cbc:	f800283a 	ret
80213cc0:	3214b03a 	or	r10,r6,r8
80213cc4:	503ff426 	beq	r10,zero,80213c98 <__reset+0xfa1f3c98>
80213cc8:	00800044 	movi	r2,1
80213ccc:	f800283a 	ret
80213cd0:	2254b03a 	or	r10,r4,r9
80213cd4:	503fee26 	beq	r10,zero,80213c90 <__reset+0xfa1f3c90>
80213cd8:	00800044 	movi	r2,1
80213cdc:	f800283a 	ret
80213ce0:	0005883a 	mov	r2,zero
80213ce4:	f800283a 	ret

80213ce8 <__gedf2>:
80213ce8:	2804d53a 	srli	r2,r5,20
80213cec:	3806d53a 	srli	r3,r7,20
80213cf0:	02000434 	movhi	r8,16
80213cf4:	423fffc4 	addi	r8,r8,-1
80213cf8:	1081ffcc 	andi	r2,r2,2047
80213cfc:	0241ffc4 	movi	r9,2047
80213d00:	2a14703a 	and	r10,r5,r8
80213d04:	18c1ffcc 	andi	r3,r3,2047
80213d08:	3a10703a 	and	r8,r7,r8
80213d0c:	280ad7fa 	srli	r5,r5,31
80213d10:	380ed7fa 	srli	r7,r7,31
80213d14:	12401d26 	beq	r2,r9,80213d8c <__gedf2+0xa4>
80213d18:	0241ffc4 	movi	r9,2047
80213d1c:	1a401226 	beq	r3,r9,80213d68 <__gedf2+0x80>
80213d20:	1000081e 	bne	r2,zero,80213d44 <__gedf2+0x5c>
80213d24:	2296b03a 	or	r11,r4,r10
80213d28:	5813003a 	cmpeq	r9,r11,zero
80213d2c:	1800091e 	bne	r3,zero,80213d54 <__gedf2+0x6c>
80213d30:	3218b03a 	or	r12,r6,r8
80213d34:	6000071e 	bne	r12,zero,80213d54 <__gedf2+0x6c>
80213d38:	0005883a 	mov	r2,zero
80213d3c:	5800101e 	bne	r11,zero,80213d80 <__gedf2+0x98>
80213d40:	f800283a 	ret
80213d44:	18000c1e 	bne	r3,zero,80213d78 <__gedf2+0x90>
80213d48:	3212b03a 	or	r9,r6,r8
80213d4c:	48000c26 	beq	r9,zero,80213d80 <__gedf2+0x98>
80213d50:	0013883a 	mov	r9,zero
80213d54:	39c03fcc 	andi	r7,r7,255
80213d58:	48000826 	beq	r9,zero,80213d7c <__gedf2+0x94>
80213d5c:	38000926 	beq	r7,zero,80213d84 <__gedf2+0x9c>
80213d60:	00800044 	movi	r2,1
80213d64:	f800283a 	ret
80213d68:	3212b03a 	or	r9,r6,r8
80213d6c:	483fec26 	beq	r9,zero,80213d20 <__reset+0xfa1f3d20>
80213d70:	00bfff84 	movi	r2,-2
80213d74:	f800283a 	ret
80213d78:	39c03fcc 	andi	r7,r7,255
80213d7c:	29c00626 	beq	r5,r7,80213d98 <__gedf2+0xb0>
80213d80:	283ff726 	beq	r5,zero,80213d60 <__reset+0xfa1f3d60>
80213d84:	00bfffc4 	movi	r2,-1
80213d88:	f800283a 	ret
80213d8c:	2292b03a 	or	r9,r4,r10
80213d90:	483fe126 	beq	r9,zero,80213d18 <__reset+0xfa1f3d18>
80213d94:	003ff606 	br	80213d70 <__reset+0xfa1f3d70>
80213d98:	18bff916 	blt	r3,r2,80213d80 <__reset+0xfa1f3d80>
80213d9c:	10c00316 	blt	r2,r3,80213dac <__gedf2+0xc4>
80213da0:	42bff736 	bltu	r8,r10,80213d80 <__reset+0xfa1f3d80>
80213da4:	52000326 	beq	r10,r8,80213db4 <__gedf2+0xcc>
80213da8:	5200042e 	bgeu	r10,r8,80213dbc <__gedf2+0xd4>
80213dac:	283fec1e 	bne	r5,zero,80213d60 <__reset+0xfa1f3d60>
80213db0:	003ff406 	br	80213d84 <__reset+0xfa1f3d84>
80213db4:	313ff236 	bltu	r6,r4,80213d80 <__reset+0xfa1f3d80>
80213db8:	21bffc36 	bltu	r4,r6,80213dac <__reset+0xfa1f3dac>
80213dbc:	0005883a 	mov	r2,zero
80213dc0:	f800283a 	ret

80213dc4 <__ledf2>:
80213dc4:	2804d53a 	srli	r2,r5,20
80213dc8:	3810d53a 	srli	r8,r7,20
80213dcc:	00c00434 	movhi	r3,16
80213dd0:	18ffffc4 	addi	r3,r3,-1
80213dd4:	1081ffcc 	andi	r2,r2,2047
80213dd8:	0241ffc4 	movi	r9,2047
80213ddc:	28d4703a 	and	r10,r5,r3
80213de0:	4201ffcc 	andi	r8,r8,2047
80213de4:	38c6703a 	and	r3,r7,r3
80213de8:	280ad7fa 	srli	r5,r5,31
80213dec:	380ed7fa 	srli	r7,r7,31
80213df0:	12401f26 	beq	r2,r9,80213e70 <__ledf2+0xac>
80213df4:	0241ffc4 	movi	r9,2047
80213df8:	42401426 	beq	r8,r9,80213e4c <__ledf2+0x88>
80213dfc:	1000091e 	bne	r2,zero,80213e24 <__ledf2+0x60>
80213e00:	2296b03a 	or	r11,r4,r10
80213e04:	5813003a 	cmpeq	r9,r11,zero
80213e08:	29403fcc 	andi	r5,r5,255
80213e0c:	40000a1e 	bne	r8,zero,80213e38 <__ledf2+0x74>
80213e10:	30d8b03a 	or	r12,r6,r3
80213e14:	6000081e 	bne	r12,zero,80213e38 <__ledf2+0x74>
80213e18:	0005883a 	mov	r2,zero
80213e1c:	5800111e 	bne	r11,zero,80213e64 <__ledf2+0xa0>
80213e20:	f800283a 	ret
80213e24:	29403fcc 	andi	r5,r5,255
80213e28:	40000c1e 	bne	r8,zero,80213e5c <__ledf2+0x98>
80213e2c:	30d2b03a 	or	r9,r6,r3
80213e30:	48000c26 	beq	r9,zero,80213e64 <__ledf2+0xa0>
80213e34:	0013883a 	mov	r9,zero
80213e38:	39c03fcc 	andi	r7,r7,255
80213e3c:	48000826 	beq	r9,zero,80213e60 <__ledf2+0x9c>
80213e40:	38001126 	beq	r7,zero,80213e88 <__ledf2+0xc4>
80213e44:	00800044 	movi	r2,1
80213e48:	f800283a 	ret
80213e4c:	30d2b03a 	or	r9,r6,r3
80213e50:	483fea26 	beq	r9,zero,80213dfc <__reset+0xfa1f3dfc>
80213e54:	00800084 	movi	r2,2
80213e58:	f800283a 	ret
80213e5c:	39c03fcc 	andi	r7,r7,255
80213e60:	39400726 	beq	r7,r5,80213e80 <__ledf2+0xbc>
80213e64:	2800081e 	bne	r5,zero,80213e88 <__ledf2+0xc4>
80213e68:	00800044 	movi	r2,1
80213e6c:	f800283a 	ret
80213e70:	2292b03a 	or	r9,r4,r10
80213e74:	483fdf26 	beq	r9,zero,80213df4 <__reset+0xfa1f3df4>
80213e78:	00800084 	movi	r2,2
80213e7c:	f800283a 	ret
80213e80:	4080030e 	bge	r8,r2,80213e90 <__ledf2+0xcc>
80213e84:	383fef26 	beq	r7,zero,80213e44 <__reset+0xfa1f3e44>
80213e88:	00bfffc4 	movi	r2,-1
80213e8c:	f800283a 	ret
80213e90:	123feb16 	blt	r2,r8,80213e40 <__reset+0xfa1f3e40>
80213e94:	1abff336 	bltu	r3,r10,80213e64 <__reset+0xfa1f3e64>
80213e98:	50c00326 	beq	r10,r3,80213ea8 <__ledf2+0xe4>
80213e9c:	50c0042e 	bgeu	r10,r3,80213eb0 <__ledf2+0xec>
80213ea0:	283fe81e 	bne	r5,zero,80213e44 <__reset+0xfa1f3e44>
80213ea4:	003ff806 	br	80213e88 <__reset+0xfa1f3e88>
80213ea8:	313fee36 	bltu	r6,r4,80213e64 <__reset+0xfa1f3e64>
80213eac:	21bffc36 	bltu	r4,r6,80213ea0 <__reset+0xfa1f3ea0>
80213eb0:	0005883a 	mov	r2,zero
80213eb4:	f800283a 	ret

80213eb8 <__muldf3>:
80213eb8:	defff304 	addi	sp,sp,-52
80213ebc:	2804d53a 	srli	r2,r5,20
80213ec0:	dd800915 	stw	r22,36(sp)
80213ec4:	282cd7fa 	srli	r22,r5,31
80213ec8:	dc000315 	stw	r16,12(sp)
80213ecc:	04000434 	movhi	r16,16
80213ed0:	dd400815 	stw	r21,32(sp)
80213ed4:	dc800515 	stw	r18,20(sp)
80213ed8:	843fffc4 	addi	r16,r16,-1
80213edc:	dfc00c15 	stw	ra,48(sp)
80213ee0:	df000b15 	stw	fp,44(sp)
80213ee4:	ddc00a15 	stw	r23,40(sp)
80213ee8:	dd000715 	stw	r20,28(sp)
80213eec:	dcc00615 	stw	r19,24(sp)
80213ef0:	dc400415 	stw	r17,16(sp)
80213ef4:	1481ffcc 	andi	r18,r2,2047
80213ef8:	2c20703a 	and	r16,r5,r16
80213efc:	b02b883a 	mov	r21,r22
80213f00:	b2403fcc 	andi	r9,r22,255
80213f04:	90006026 	beq	r18,zero,80214088 <__muldf3+0x1d0>
80213f08:	0081ffc4 	movi	r2,2047
80213f0c:	2029883a 	mov	r20,r4
80213f10:	90803626 	beq	r18,r2,80213fec <__muldf3+0x134>
80213f14:	80800434 	orhi	r2,r16,16
80213f18:	100490fa 	slli	r2,r2,3
80213f1c:	2020d77a 	srli	r16,r4,29
80213f20:	202890fa 	slli	r20,r4,3
80213f24:	94bf0044 	addi	r18,r18,-1023
80213f28:	80a0b03a 	or	r16,r16,r2
80213f2c:	0027883a 	mov	r19,zero
80213f30:	0039883a 	mov	fp,zero
80213f34:	3804d53a 	srli	r2,r7,20
80213f38:	382ed7fa 	srli	r23,r7,31
80213f3c:	04400434 	movhi	r17,16
80213f40:	8c7fffc4 	addi	r17,r17,-1
80213f44:	1081ffcc 	andi	r2,r2,2047
80213f48:	3011883a 	mov	r8,r6
80213f4c:	3c62703a 	and	r17,r7,r17
80213f50:	ba803fcc 	andi	r10,r23,255
80213f54:	10006d26 	beq	r2,zero,8021410c <__muldf3+0x254>
80213f58:	00c1ffc4 	movi	r3,2047
80213f5c:	10c06526 	beq	r2,r3,802140f4 <__muldf3+0x23c>
80213f60:	88c00434 	orhi	r3,r17,16
80213f64:	180690fa 	slli	r3,r3,3
80213f68:	3022d77a 	srli	r17,r6,29
80213f6c:	301090fa 	slli	r8,r6,3
80213f70:	10bf0044 	addi	r2,r2,-1023
80213f74:	88e2b03a 	or	r17,r17,r3
80213f78:	000b883a 	mov	r5,zero
80213f7c:	9085883a 	add	r2,r18,r2
80213f80:	2cc8b03a 	or	r4,r5,r19
80213f84:	00c003c4 	movi	r3,15
80213f88:	bdacf03a 	xor	r22,r23,r22
80213f8c:	12c00044 	addi	r11,r2,1
80213f90:	19009936 	bltu	r3,r4,802141f8 <__muldf3+0x340>
80213f94:	200890ba 	slli	r4,r4,2
80213f98:	00e00874 	movhi	r3,32801
80213f9c:	18cfeb04 	addi	r3,r3,16300
80213fa0:	20c9883a 	add	r4,r4,r3
80213fa4:	20c00017 	ldw	r3,0(r4)
80213fa8:	1800683a 	jmp	r3
80213fac:	802141f8 	rdprs	zero,r16,-31481
80213fb0:	8021400c 	andi	zero,r16,34048
80213fb4:	8021400c 	andi	zero,r16,34048
80213fb8:	80214008 	cmpgei	zero,r16,-31488
80213fbc:	802141d4 	ori	zero,r16,34055
80213fc0:	802141d4 	ori	zero,r16,34055
80213fc4:	802141bc 	xorhi	zero,r16,34054
80213fc8:	80214008 	cmpgei	zero,r16,-31488
80213fcc:	802141d4 	ori	zero,r16,34055
80213fd0:	802141bc 	xorhi	zero,r16,34054
80213fd4:	802141d4 	ori	zero,r16,34055
80213fd8:	80214008 	cmpgei	zero,r16,-31488
80213fdc:	802141e4 	muli	zero,r16,-31481
80213fe0:	802141e4 	muli	zero,r16,-31481
80213fe4:	802141e4 	muli	zero,r16,-31481
80213fe8:	80214400 	call	88021440 <__reset+0x2001440>
80213fec:	2404b03a 	or	r2,r4,r16
80213ff0:	10006f1e 	bne	r2,zero,802141b0 <__muldf3+0x2f8>
80213ff4:	04c00204 	movi	r19,8
80213ff8:	0021883a 	mov	r16,zero
80213ffc:	0029883a 	mov	r20,zero
80214000:	07000084 	movi	fp,2
80214004:	003fcb06 	br	80213f34 <__reset+0xfa1f3f34>
80214008:	502d883a 	mov	r22,r10
8021400c:	00800084 	movi	r2,2
80214010:	28805726 	beq	r5,r2,80214170 <__muldf3+0x2b8>
80214014:	008000c4 	movi	r2,3
80214018:	28816626 	beq	r5,r2,802145b4 <__muldf3+0x6fc>
8021401c:	00800044 	movi	r2,1
80214020:	2881411e 	bne	r5,r2,80214528 <__muldf3+0x670>
80214024:	b02b883a 	mov	r21,r22
80214028:	0005883a 	mov	r2,zero
8021402c:	000b883a 	mov	r5,zero
80214030:	0029883a 	mov	r20,zero
80214034:	1004953a 	slli	r2,r2,20
80214038:	a8c03fcc 	andi	r3,r21,255
8021403c:	04400434 	movhi	r17,16
80214040:	8c7fffc4 	addi	r17,r17,-1
80214044:	180697fa 	slli	r3,r3,31
80214048:	2c4a703a 	and	r5,r5,r17
8021404c:	288ab03a 	or	r5,r5,r2
80214050:	28c6b03a 	or	r3,r5,r3
80214054:	a005883a 	mov	r2,r20
80214058:	dfc00c17 	ldw	ra,48(sp)
8021405c:	df000b17 	ldw	fp,44(sp)
80214060:	ddc00a17 	ldw	r23,40(sp)
80214064:	dd800917 	ldw	r22,36(sp)
80214068:	dd400817 	ldw	r21,32(sp)
8021406c:	dd000717 	ldw	r20,28(sp)
80214070:	dcc00617 	ldw	r19,24(sp)
80214074:	dc800517 	ldw	r18,20(sp)
80214078:	dc400417 	ldw	r17,16(sp)
8021407c:	dc000317 	ldw	r16,12(sp)
80214080:	dec00d04 	addi	sp,sp,52
80214084:	f800283a 	ret
80214088:	2404b03a 	or	r2,r4,r16
8021408c:	2027883a 	mov	r19,r4
80214090:	10004226 	beq	r2,zero,8021419c <__muldf3+0x2e4>
80214094:	8000fc26 	beq	r16,zero,80214488 <__muldf3+0x5d0>
80214098:	8009883a 	mov	r4,r16
8021409c:	d9800215 	stw	r6,8(sp)
802140a0:	d9c00015 	stw	r7,0(sp)
802140a4:	da400115 	stw	r9,4(sp)
802140a8:	02050080 	call	80205008 <__clzsi2>
802140ac:	d9800217 	ldw	r6,8(sp)
802140b0:	d9c00017 	ldw	r7,0(sp)
802140b4:	da400117 	ldw	r9,4(sp)
802140b8:	113ffd44 	addi	r4,r2,-11
802140bc:	00c00704 	movi	r3,28
802140c0:	1900ed16 	blt	r3,r4,80214478 <__muldf3+0x5c0>
802140c4:	00c00744 	movi	r3,29
802140c8:	147ffe04 	addi	r17,r2,-8
802140cc:	1907c83a 	sub	r3,r3,r4
802140d0:	8460983a 	sll	r16,r16,r17
802140d4:	98c6d83a 	srl	r3,r19,r3
802140d8:	9c68983a 	sll	r20,r19,r17
802140dc:	1c20b03a 	or	r16,r3,r16
802140e0:	1080fcc4 	addi	r2,r2,1011
802140e4:	00a5c83a 	sub	r18,zero,r2
802140e8:	0027883a 	mov	r19,zero
802140ec:	0039883a 	mov	fp,zero
802140f0:	003f9006 	br	80213f34 <__reset+0xfa1f3f34>
802140f4:	3446b03a 	or	r3,r6,r17
802140f8:	1800261e 	bne	r3,zero,80214194 <__muldf3+0x2dc>
802140fc:	0023883a 	mov	r17,zero
80214100:	0011883a 	mov	r8,zero
80214104:	01400084 	movi	r5,2
80214108:	003f9c06 	br	80213f7c <__reset+0xfa1f3f7c>
8021410c:	3446b03a 	or	r3,r6,r17
80214110:	18001c26 	beq	r3,zero,80214184 <__muldf3+0x2cc>
80214114:	8800ce26 	beq	r17,zero,80214450 <__muldf3+0x598>
80214118:	8809883a 	mov	r4,r17
8021411c:	d9800215 	stw	r6,8(sp)
80214120:	da400115 	stw	r9,4(sp)
80214124:	da800015 	stw	r10,0(sp)
80214128:	02050080 	call	80205008 <__clzsi2>
8021412c:	d9800217 	ldw	r6,8(sp)
80214130:	da400117 	ldw	r9,4(sp)
80214134:	da800017 	ldw	r10,0(sp)
80214138:	113ffd44 	addi	r4,r2,-11
8021413c:	00c00704 	movi	r3,28
80214140:	1900bf16 	blt	r3,r4,80214440 <__muldf3+0x588>
80214144:	00c00744 	movi	r3,29
80214148:	123ffe04 	addi	r8,r2,-8
8021414c:	1907c83a 	sub	r3,r3,r4
80214150:	8a22983a 	sll	r17,r17,r8
80214154:	30c6d83a 	srl	r3,r6,r3
80214158:	3210983a 	sll	r8,r6,r8
8021415c:	1c62b03a 	or	r17,r3,r17
80214160:	1080fcc4 	addi	r2,r2,1011
80214164:	0085c83a 	sub	r2,zero,r2
80214168:	000b883a 	mov	r5,zero
8021416c:	003f8306 	br	80213f7c <__reset+0xfa1f3f7c>
80214170:	b02b883a 	mov	r21,r22
80214174:	0081ffc4 	movi	r2,2047
80214178:	000b883a 	mov	r5,zero
8021417c:	0029883a 	mov	r20,zero
80214180:	003fac06 	br	80214034 <__reset+0xfa1f4034>
80214184:	0023883a 	mov	r17,zero
80214188:	0011883a 	mov	r8,zero
8021418c:	01400044 	movi	r5,1
80214190:	003f7a06 	br	80213f7c <__reset+0xfa1f3f7c>
80214194:	014000c4 	movi	r5,3
80214198:	003f7806 	br	80213f7c <__reset+0xfa1f3f7c>
8021419c:	04c00104 	movi	r19,4
802141a0:	0021883a 	mov	r16,zero
802141a4:	0029883a 	mov	r20,zero
802141a8:	07000044 	movi	fp,1
802141ac:	003f6106 	br	80213f34 <__reset+0xfa1f3f34>
802141b0:	04c00304 	movi	r19,12
802141b4:	070000c4 	movi	fp,3
802141b8:	003f5e06 	br	80213f34 <__reset+0xfa1f3f34>
802141bc:	01400434 	movhi	r5,16
802141c0:	002b883a 	mov	r21,zero
802141c4:	297fffc4 	addi	r5,r5,-1
802141c8:	053fffc4 	movi	r20,-1
802141cc:	0081ffc4 	movi	r2,2047
802141d0:	003f9806 	br	80214034 <__reset+0xfa1f4034>
802141d4:	8023883a 	mov	r17,r16
802141d8:	a011883a 	mov	r8,r20
802141dc:	e00b883a 	mov	r5,fp
802141e0:	003f8a06 	br	8021400c <__reset+0xfa1f400c>
802141e4:	8023883a 	mov	r17,r16
802141e8:	a011883a 	mov	r8,r20
802141ec:	482d883a 	mov	r22,r9
802141f0:	e00b883a 	mov	r5,fp
802141f4:	003f8506 	br	8021400c <__reset+0xfa1f400c>
802141f8:	a00ad43a 	srli	r5,r20,16
802141fc:	401ad43a 	srli	r13,r8,16
80214200:	a53fffcc 	andi	r20,r20,65535
80214204:	423fffcc 	andi	r8,r8,65535
80214208:	4519383a 	mul	r12,r8,r20
8021420c:	4147383a 	mul	r3,r8,r5
80214210:	6d09383a 	mul	r4,r13,r20
80214214:	600cd43a 	srli	r6,r12,16
80214218:	2b5d383a 	mul	r14,r5,r13
8021421c:	20c9883a 	add	r4,r4,r3
80214220:	310d883a 	add	r6,r6,r4
80214224:	30c0022e 	bgeu	r6,r3,80214230 <__muldf3+0x378>
80214228:	00c00074 	movhi	r3,1
8021422c:	70dd883a 	add	r14,r14,r3
80214230:	8826d43a 	srli	r19,r17,16
80214234:	8bffffcc 	andi	r15,r17,65535
80214238:	7d23383a 	mul	r17,r15,r20
8021423c:	7949383a 	mul	r4,r15,r5
80214240:	9d29383a 	mul	r20,r19,r20
80214244:	8814d43a 	srli	r10,r17,16
80214248:	3012943a 	slli	r9,r6,16
8021424c:	a129883a 	add	r20,r20,r4
80214250:	633fffcc 	andi	r12,r12,65535
80214254:	5515883a 	add	r10,r10,r20
80214258:	3006d43a 	srli	r3,r6,16
8021425c:	4b13883a 	add	r9,r9,r12
80214260:	2ccb383a 	mul	r5,r5,r19
80214264:	5100022e 	bgeu	r10,r4,80214270 <__muldf3+0x3b8>
80214268:	01000074 	movhi	r4,1
8021426c:	290b883a 	add	r5,r5,r4
80214270:	802ad43a 	srli	r21,r16,16
80214274:	843fffcc 	andi	r16,r16,65535
80214278:	440d383a 	mul	r6,r8,r16
8021427c:	4565383a 	mul	r18,r8,r21
80214280:	8349383a 	mul	r4,r16,r13
80214284:	500e943a 	slli	r7,r10,16
80214288:	3010d43a 	srli	r8,r6,16
8021428c:	5028d43a 	srli	r20,r10,16
80214290:	2489883a 	add	r4,r4,r18
80214294:	8abfffcc 	andi	r10,r17,65535
80214298:	3a95883a 	add	r10,r7,r10
8021429c:	4119883a 	add	r12,r8,r4
802142a0:	a169883a 	add	r20,r20,r5
802142a4:	1a87883a 	add	r3,r3,r10
802142a8:	6d5b383a 	mul	r13,r13,r21
802142ac:	6480022e 	bgeu	r12,r18,802142b8 <__muldf3+0x400>
802142b0:	01000074 	movhi	r4,1
802142b4:	691b883a 	add	r13,r13,r4
802142b8:	7c25383a 	mul	r18,r15,r16
802142bc:	7d4b383a 	mul	r5,r15,r21
802142c0:	84cf383a 	mul	r7,r16,r19
802142c4:	901ed43a 	srli	r15,r18,16
802142c8:	6008d43a 	srli	r4,r12,16
802142cc:	6010943a 	slli	r8,r12,16
802142d0:	394f883a 	add	r7,r7,r5
802142d4:	333fffcc 	andi	r12,r6,65535
802142d8:	79df883a 	add	r15,r15,r7
802142dc:	235b883a 	add	r13,r4,r13
802142e0:	9d63383a 	mul	r17,r19,r21
802142e4:	4309883a 	add	r4,r8,r12
802142e8:	7940022e 	bgeu	r15,r5,802142f4 <__muldf3+0x43c>
802142ec:	01400074 	movhi	r5,1
802142f0:	8963883a 	add	r17,r17,r5
802142f4:	780a943a 	slli	r5,r15,16
802142f8:	91bfffcc 	andi	r6,r18,65535
802142fc:	70c7883a 	add	r3,r14,r3
80214300:	298d883a 	add	r6,r5,r6
80214304:	1a8f803a 	cmpltu	r7,r3,r10
80214308:	350b883a 	add	r5,r6,r20
8021430c:	20c7883a 	add	r3,r4,r3
80214310:	3955883a 	add	r10,r7,r5
80214314:	1909803a 	cmpltu	r4,r3,r4
80214318:	6a91883a 	add	r8,r13,r10
8021431c:	780cd43a 	srli	r6,r15,16
80214320:	2219883a 	add	r12,r4,r8
80214324:	2d0b803a 	cmpltu	r5,r5,r20
80214328:	51cf803a 	cmpltu	r7,r10,r7
8021432c:	29ceb03a 	or	r7,r5,r7
80214330:	4351803a 	cmpltu	r8,r8,r13
80214334:	610b803a 	cmpltu	r5,r12,r4
80214338:	4148b03a 	or	r4,r8,r5
8021433c:	398f883a 	add	r7,r7,r6
80214340:	3909883a 	add	r4,r7,r4
80214344:	1810927a 	slli	r8,r3,9
80214348:	2449883a 	add	r4,r4,r17
8021434c:	2008927a 	slli	r4,r4,9
80214350:	6022d5fa 	srli	r17,r12,23
80214354:	1806d5fa 	srli	r3,r3,23
80214358:	4252b03a 	or	r9,r8,r9
8021435c:	600a927a 	slli	r5,r12,9
80214360:	4810c03a 	cmpne	r8,r9,zero
80214364:	2462b03a 	or	r17,r4,r17
80214368:	40c6b03a 	or	r3,r8,r3
8021436c:	8900402c 	andhi	r4,r17,256
80214370:	1950b03a 	or	r8,r3,r5
80214374:	20000726 	beq	r4,zero,80214394 <__muldf3+0x4dc>
80214378:	4006d07a 	srli	r3,r8,1
8021437c:	880497fa 	slli	r2,r17,31
80214380:	4200004c 	andi	r8,r8,1
80214384:	8822d07a 	srli	r17,r17,1
80214388:	1a10b03a 	or	r8,r3,r8
8021438c:	1210b03a 	or	r8,r2,r8
80214390:	5805883a 	mov	r2,r11
80214394:	1140ffc4 	addi	r5,r2,1023
80214398:	0140440e 	bge	zero,r5,802144ac <__muldf3+0x5f4>
8021439c:	40c001cc 	andi	r3,r8,7
802143a0:	18000726 	beq	r3,zero,802143c0 <__muldf3+0x508>
802143a4:	40c003cc 	andi	r3,r8,15
802143a8:	01000104 	movi	r4,4
802143ac:	19000426 	beq	r3,r4,802143c0 <__muldf3+0x508>
802143b0:	4107883a 	add	r3,r8,r4
802143b4:	1a11803a 	cmpltu	r8,r3,r8
802143b8:	8a23883a 	add	r17,r17,r8
802143bc:	1811883a 	mov	r8,r3
802143c0:	88c0402c 	andhi	r3,r17,256
802143c4:	18000426 	beq	r3,zero,802143d8 <__muldf3+0x520>
802143c8:	11410004 	addi	r5,r2,1024
802143cc:	00bfc034 	movhi	r2,65280
802143d0:	10bfffc4 	addi	r2,r2,-1
802143d4:	88a2703a 	and	r17,r17,r2
802143d8:	0081ff84 	movi	r2,2046
802143dc:	117f6416 	blt	r2,r5,80214170 <__reset+0xfa1f4170>
802143e0:	8828977a 	slli	r20,r17,29
802143e4:	4010d0fa 	srli	r8,r8,3
802143e8:	8822927a 	slli	r17,r17,9
802143ec:	2881ffcc 	andi	r2,r5,2047
802143f0:	a228b03a 	or	r20,r20,r8
802143f4:	880ad33a 	srli	r5,r17,12
802143f8:	b02b883a 	mov	r21,r22
802143fc:	003f0d06 	br	80214034 <__reset+0xfa1f4034>
80214400:	8080022c 	andhi	r2,r16,8
80214404:	10000926 	beq	r2,zero,8021442c <__muldf3+0x574>
80214408:	8880022c 	andhi	r2,r17,8
8021440c:	1000071e 	bne	r2,zero,8021442c <__muldf3+0x574>
80214410:	00800434 	movhi	r2,16
80214414:	89400234 	orhi	r5,r17,8
80214418:	10bfffc4 	addi	r2,r2,-1
8021441c:	b82b883a 	mov	r21,r23
80214420:	288a703a 	and	r5,r5,r2
80214424:	4029883a 	mov	r20,r8
80214428:	003f6806 	br	802141cc <__reset+0xfa1f41cc>
8021442c:	00800434 	movhi	r2,16
80214430:	81400234 	orhi	r5,r16,8
80214434:	10bfffc4 	addi	r2,r2,-1
80214438:	288a703a 	and	r5,r5,r2
8021443c:	003f6306 	br	802141cc <__reset+0xfa1f41cc>
80214440:	147ff604 	addi	r17,r2,-40
80214444:	3462983a 	sll	r17,r6,r17
80214448:	0011883a 	mov	r8,zero
8021444c:	003f4406 	br	80214160 <__reset+0xfa1f4160>
80214450:	3009883a 	mov	r4,r6
80214454:	d9800215 	stw	r6,8(sp)
80214458:	da400115 	stw	r9,4(sp)
8021445c:	da800015 	stw	r10,0(sp)
80214460:	02050080 	call	80205008 <__clzsi2>
80214464:	10800804 	addi	r2,r2,32
80214468:	da800017 	ldw	r10,0(sp)
8021446c:	da400117 	ldw	r9,4(sp)
80214470:	d9800217 	ldw	r6,8(sp)
80214474:	003f3006 	br	80214138 <__reset+0xfa1f4138>
80214478:	143ff604 	addi	r16,r2,-40
8021447c:	9c20983a 	sll	r16,r19,r16
80214480:	0029883a 	mov	r20,zero
80214484:	003f1606 	br	802140e0 <__reset+0xfa1f40e0>
80214488:	d9800215 	stw	r6,8(sp)
8021448c:	d9c00015 	stw	r7,0(sp)
80214490:	da400115 	stw	r9,4(sp)
80214494:	02050080 	call	80205008 <__clzsi2>
80214498:	10800804 	addi	r2,r2,32
8021449c:	da400117 	ldw	r9,4(sp)
802144a0:	d9c00017 	ldw	r7,0(sp)
802144a4:	d9800217 	ldw	r6,8(sp)
802144a8:	003f0306 	br	802140b8 <__reset+0xfa1f40b8>
802144ac:	00c00044 	movi	r3,1
802144b0:	1947c83a 	sub	r3,r3,r5
802144b4:	00800e04 	movi	r2,56
802144b8:	10feda16 	blt	r2,r3,80214024 <__reset+0xfa1f4024>
802144bc:	008007c4 	movi	r2,31
802144c0:	10c01b16 	blt	r2,r3,80214530 <__muldf3+0x678>
802144c4:	00800804 	movi	r2,32
802144c8:	10c5c83a 	sub	r2,r2,r3
802144cc:	888a983a 	sll	r5,r17,r2
802144d0:	40c8d83a 	srl	r4,r8,r3
802144d4:	4084983a 	sll	r2,r8,r2
802144d8:	88e2d83a 	srl	r17,r17,r3
802144dc:	2906b03a 	or	r3,r5,r4
802144e0:	1004c03a 	cmpne	r2,r2,zero
802144e4:	1886b03a 	or	r3,r3,r2
802144e8:	188001cc 	andi	r2,r3,7
802144ec:	10000726 	beq	r2,zero,8021450c <__muldf3+0x654>
802144f0:	188003cc 	andi	r2,r3,15
802144f4:	01000104 	movi	r4,4
802144f8:	11000426 	beq	r2,r4,8021450c <__muldf3+0x654>
802144fc:	1805883a 	mov	r2,r3
80214500:	10c00104 	addi	r3,r2,4
80214504:	1885803a 	cmpltu	r2,r3,r2
80214508:	88a3883a 	add	r17,r17,r2
8021450c:	8880202c 	andhi	r2,r17,128
80214510:	10001c26 	beq	r2,zero,80214584 <__muldf3+0x6cc>
80214514:	b02b883a 	mov	r21,r22
80214518:	00800044 	movi	r2,1
8021451c:	000b883a 	mov	r5,zero
80214520:	0029883a 	mov	r20,zero
80214524:	003ec306 	br	80214034 <__reset+0xfa1f4034>
80214528:	5805883a 	mov	r2,r11
8021452c:	003f9906 	br	80214394 <__reset+0xfa1f4394>
80214530:	00bff844 	movi	r2,-31
80214534:	1145c83a 	sub	r2,r2,r5
80214538:	8888d83a 	srl	r4,r17,r2
8021453c:	00800804 	movi	r2,32
80214540:	18801a26 	beq	r3,r2,802145ac <__muldf3+0x6f4>
80214544:	00801004 	movi	r2,64
80214548:	10c5c83a 	sub	r2,r2,r3
8021454c:	8884983a 	sll	r2,r17,r2
80214550:	1204b03a 	or	r2,r2,r8
80214554:	1004c03a 	cmpne	r2,r2,zero
80214558:	2084b03a 	or	r2,r4,r2
8021455c:	144001cc 	andi	r17,r2,7
80214560:	88000d1e 	bne	r17,zero,80214598 <__muldf3+0x6e0>
80214564:	000b883a 	mov	r5,zero
80214568:	1028d0fa 	srli	r20,r2,3
8021456c:	b02b883a 	mov	r21,r22
80214570:	0005883a 	mov	r2,zero
80214574:	a468b03a 	or	r20,r20,r17
80214578:	003eae06 	br	80214034 <__reset+0xfa1f4034>
8021457c:	1007883a 	mov	r3,r2
80214580:	0023883a 	mov	r17,zero
80214584:	880a927a 	slli	r5,r17,9
80214588:	1805883a 	mov	r2,r3
8021458c:	8822977a 	slli	r17,r17,29
80214590:	280ad33a 	srli	r5,r5,12
80214594:	003ff406 	br	80214568 <__reset+0xfa1f4568>
80214598:	10c003cc 	andi	r3,r2,15
8021459c:	01000104 	movi	r4,4
802145a0:	193ff626 	beq	r3,r4,8021457c <__reset+0xfa1f457c>
802145a4:	0023883a 	mov	r17,zero
802145a8:	003fd506 	br	80214500 <__reset+0xfa1f4500>
802145ac:	0005883a 	mov	r2,zero
802145b0:	003fe706 	br	80214550 <__reset+0xfa1f4550>
802145b4:	00800434 	movhi	r2,16
802145b8:	89400234 	orhi	r5,r17,8
802145bc:	10bfffc4 	addi	r2,r2,-1
802145c0:	b02b883a 	mov	r21,r22
802145c4:	288a703a 	and	r5,r5,r2
802145c8:	4029883a 	mov	r20,r8
802145cc:	003eff06 	br	802141cc <__reset+0xfa1f41cc>

802145d0 <__subdf3>:
802145d0:	02000434 	movhi	r8,16
802145d4:	423fffc4 	addi	r8,r8,-1
802145d8:	defffb04 	addi	sp,sp,-20
802145dc:	2a14703a 	and	r10,r5,r8
802145e0:	3812d53a 	srli	r9,r7,20
802145e4:	3a10703a 	and	r8,r7,r8
802145e8:	2006d77a 	srli	r3,r4,29
802145ec:	3004d77a 	srli	r2,r6,29
802145f0:	dc000015 	stw	r16,0(sp)
802145f4:	501490fa 	slli	r10,r10,3
802145f8:	2820d53a 	srli	r16,r5,20
802145fc:	401090fa 	slli	r8,r8,3
80214600:	dc800215 	stw	r18,8(sp)
80214604:	dc400115 	stw	r17,4(sp)
80214608:	dfc00415 	stw	ra,16(sp)
8021460c:	202290fa 	slli	r17,r4,3
80214610:	dcc00315 	stw	r19,12(sp)
80214614:	4a41ffcc 	andi	r9,r9,2047
80214618:	0101ffc4 	movi	r4,2047
8021461c:	2824d7fa 	srli	r18,r5,31
80214620:	8401ffcc 	andi	r16,r16,2047
80214624:	50c6b03a 	or	r3,r10,r3
80214628:	380ed7fa 	srli	r7,r7,31
8021462c:	408ab03a 	or	r5,r8,r2
80214630:	300c90fa 	slli	r6,r6,3
80214634:	49009626 	beq	r9,r4,80214890 <__subdf3+0x2c0>
80214638:	39c0005c 	xori	r7,r7,1
8021463c:	8245c83a 	sub	r2,r16,r9
80214640:	3c807426 	beq	r7,r18,80214814 <__subdf3+0x244>
80214644:	0080af0e 	bge	zero,r2,80214904 <__subdf3+0x334>
80214648:	48002a1e 	bne	r9,zero,802146f4 <__subdf3+0x124>
8021464c:	2988b03a 	or	r4,r5,r6
80214650:	20009a1e 	bne	r4,zero,802148bc <__subdf3+0x2ec>
80214654:	888001cc 	andi	r2,r17,7
80214658:	10000726 	beq	r2,zero,80214678 <__subdf3+0xa8>
8021465c:	888003cc 	andi	r2,r17,15
80214660:	01000104 	movi	r4,4
80214664:	11000426 	beq	r2,r4,80214678 <__subdf3+0xa8>
80214668:	890b883a 	add	r5,r17,r4
8021466c:	2c63803a 	cmpltu	r17,r5,r17
80214670:	1c47883a 	add	r3,r3,r17
80214674:	2823883a 	mov	r17,r5
80214678:	1880202c 	andhi	r2,r3,128
8021467c:	10005926 	beq	r2,zero,802147e4 <__subdf3+0x214>
80214680:	84000044 	addi	r16,r16,1
80214684:	0081ffc4 	movi	r2,2047
80214688:	8080be26 	beq	r16,r2,80214984 <__subdf3+0x3b4>
8021468c:	017fe034 	movhi	r5,65408
80214690:	297fffc4 	addi	r5,r5,-1
80214694:	1946703a 	and	r3,r3,r5
80214698:	1804977a 	slli	r2,r3,29
8021469c:	1806927a 	slli	r3,r3,9
802146a0:	8822d0fa 	srli	r17,r17,3
802146a4:	8401ffcc 	andi	r16,r16,2047
802146a8:	180ad33a 	srli	r5,r3,12
802146ac:	9100004c 	andi	r4,r18,1
802146b0:	1444b03a 	or	r2,r2,r17
802146b4:	80c1ffcc 	andi	r3,r16,2047
802146b8:	1820953a 	slli	r16,r3,20
802146bc:	20c03fcc 	andi	r3,r4,255
802146c0:	180897fa 	slli	r4,r3,31
802146c4:	00c00434 	movhi	r3,16
802146c8:	18ffffc4 	addi	r3,r3,-1
802146cc:	28c6703a 	and	r3,r5,r3
802146d0:	1c06b03a 	or	r3,r3,r16
802146d4:	1906b03a 	or	r3,r3,r4
802146d8:	dfc00417 	ldw	ra,16(sp)
802146dc:	dcc00317 	ldw	r19,12(sp)
802146e0:	dc800217 	ldw	r18,8(sp)
802146e4:	dc400117 	ldw	r17,4(sp)
802146e8:	dc000017 	ldw	r16,0(sp)
802146ec:	dec00504 	addi	sp,sp,20
802146f0:	f800283a 	ret
802146f4:	0101ffc4 	movi	r4,2047
802146f8:	813fd626 	beq	r16,r4,80214654 <__reset+0xfa1f4654>
802146fc:	29402034 	orhi	r5,r5,128
80214700:	01000e04 	movi	r4,56
80214704:	2080a316 	blt	r4,r2,80214994 <__subdf3+0x3c4>
80214708:	010007c4 	movi	r4,31
8021470c:	2080c616 	blt	r4,r2,80214a28 <__subdf3+0x458>
80214710:	01000804 	movi	r4,32
80214714:	2089c83a 	sub	r4,r4,r2
80214718:	2910983a 	sll	r8,r5,r4
8021471c:	308ed83a 	srl	r7,r6,r2
80214720:	3108983a 	sll	r4,r6,r4
80214724:	2884d83a 	srl	r2,r5,r2
80214728:	41ccb03a 	or	r6,r8,r7
8021472c:	2008c03a 	cmpne	r4,r4,zero
80214730:	310cb03a 	or	r6,r6,r4
80214734:	898dc83a 	sub	r6,r17,r6
80214738:	89a3803a 	cmpltu	r17,r17,r6
8021473c:	1887c83a 	sub	r3,r3,r2
80214740:	1c47c83a 	sub	r3,r3,r17
80214744:	3023883a 	mov	r17,r6
80214748:	1880202c 	andhi	r2,r3,128
8021474c:	10002326 	beq	r2,zero,802147dc <__subdf3+0x20c>
80214750:	04c02034 	movhi	r19,128
80214754:	9cffffc4 	addi	r19,r19,-1
80214758:	1ce6703a 	and	r19,r3,r19
8021475c:	98007a26 	beq	r19,zero,80214948 <__subdf3+0x378>
80214760:	9809883a 	mov	r4,r19
80214764:	02050080 	call	80205008 <__clzsi2>
80214768:	113ffe04 	addi	r4,r2,-8
8021476c:	00c007c4 	movi	r3,31
80214770:	19007b16 	blt	r3,r4,80214960 <__subdf3+0x390>
80214774:	00800804 	movi	r2,32
80214778:	1105c83a 	sub	r2,r2,r4
8021477c:	8884d83a 	srl	r2,r17,r2
80214780:	9906983a 	sll	r3,r19,r4
80214784:	8922983a 	sll	r17,r17,r4
80214788:	10c4b03a 	or	r2,r2,r3
8021478c:	24007816 	blt	r4,r16,80214970 <__subdf3+0x3a0>
80214790:	2421c83a 	sub	r16,r4,r16
80214794:	80c00044 	addi	r3,r16,1
80214798:	010007c4 	movi	r4,31
8021479c:	20c09516 	blt	r4,r3,802149f4 <__subdf3+0x424>
802147a0:	01400804 	movi	r5,32
802147a4:	28cbc83a 	sub	r5,r5,r3
802147a8:	88c8d83a 	srl	r4,r17,r3
802147ac:	8962983a 	sll	r17,r17,r5
802147b0:	114a983a 	sll	r5,r2,r5
802147b4:	10c6d83a 	srl	r3,r2,r3
802147b8:	8804c03a 	cmpne	r2,r17,zero
802147bc:	290ab03a 	or	r5,r5,r4
802147c0:	28a2b03a 	or	r17,r5,r2
802147c4:	0021883a 	mov	r16,zero
802147c8:	003fa206 	br	80214654 <__reset+0xfa1f4654>
802147cc:	2090b03a 	or	r8,r4,r2
802147d0:	40018e26 	beq	r8,zero,80214e0c <__subdf3+0x83c>
802147d4:	1007883a 	mov	r3,r2
802147d8:	2023883a 	mov	r17,r4
802147dc:	888001cc 	andi	r2,r17,7
802147e0:	103f9e1e 	bne	r2,zero,8021465c <__reset+0xfa1f465c>
802147e4:	1804977a 	slli	r2,r3,29
802147e8:	8822d0fa 	srli	r17,r17,3
802147ec:	1810d0fa 	srli	r8,r3,3
802147f0:	9100004c 	andi	r4,r18,1
802147f4:	1444b03a 	or	r2,r2,r17
802147f8:	00c1ffc4 	movi	r3,2047
802147fc:	80c02826 	beq	r16,r3,802148a0 <__subdf3+0x2d0>
80214800:	01400434 	movhi	r5,16
80214804:	297fffc4 	addi	r5,r5,-1
80214808:	80e0703a 	and	r16,r16,r3
8021480c:	414a703a 	and	r5,r8,r5
80214810:	003fa806 	br	802146b4 <__reset+0xfa1f46b4>
80214814:	0080630e 	bge	zero,r2,802149a4 <__subdf3+0x3d4>
80214818:	48003026 	beq	r9,zero,802148dc <__subdf3+0x30c>
8021481c:	0101ffc4 	movi	r4,2047
80214820:	813f8c26 	beq	r16,r4,80214654 <__reset+0xfa1f4654>
80214824:	29402034 	orhi	r5,r5,128
80214828:	01000e04 	movi	r4,56
8021482c:	2080a90e 	bge	r4,r2,80214ad4 <__subdf3+0x504>
80214830:	298cb03a 	or	r6,r5,r6
80214834:	3012c03a 	cmpne	r9,r6,zero
80214838:	0005883a 	mov	r2,zero
8021483c:	4c53883a 	add	r9,r9,r17
80214840:	4c63803a 	cmpltu	r17,r9,r17
80214844:	10c7883a 	add	r3,r2,r3
80214848:	88c7883a 	add	r3,r17,r3
8021484c:	4823883a 	mov	r17,r9
80214850:	1880202c 	andhi	r2,r3,128
80214854:	1000d026 	beq	r2,zero,80214b98 <__subdf3+0x5c8>
80214858:	84000044 	addi	r16,r16,1
8021485c:	0081ffc4 	movi	r2,2047
80214860:	8080fe26 	beq	r16,r2,80214c5c <__subdf3+0x68c>
80214864:	00bfe034 	movhi	r2,65408
80214868:	10bfffc4 	addi	r2,r2,-1
8021486c:	1886703a 	and	r3,r3,r2
80214870:	880ad07a 	srli	r5,r17,1
80214874:	180497fa 	slli	r2,r3,31
80214878:	8900004c 	andi	r4,r17,1
8021487c:	2922b03a 	or	r17,r5,r4
80214880:	1806d07a 	srli	r3,r3,1
80214884:	1462b03a 	or	r17,r2,r17
80214888:	3825883a 	mov	r18,r7
8021488c:	003f7106 	br	80214654 <__reset+0xfa1f4654>
80214890:	2984b03a 	or	r2,r5,r6
80214894:	103f6826 	beq	r2,zero,80214638 <__reset+0xfa1f4638>
80214898:	39c03fcc 	andi	r7,r7,255
8021489c:	003f6706 	br	8021463c <__reset+0xfa1f463c>
802148a0:	4086b03a 	or	r3,r8,r2
802148a4:	18015226 	beq	r3,zero,80214df0 <__subdf3+0x820>
802148a8:	00c00434 	movhi	r3,16
802148ac:	41400234 	orhi	r5,r8,8
802148b0:	18ffffc4 	addi	r3,r3,-1
802148b4:	28ca703a 	and	r5,r5,r3
802148b8:	003f7e06 	br	802146b4 <__reset+0xfa1f46b4>
802148bc:	10bfffc4 	addi	r2,r2,-1
802148c0:	1000491e 	bne	r2,zero,802149e8 <__subdf3+0x418>
802148c4:	898fc83a 	sub	r7,r17,r6
802148c8:	89e3803a 	cmpltu	r17,r17,r7
802148cc:	1947c83a 	sub	r3,r3,r5
802148d0:	1c47c83a 	sub	r3,r3,r17
802148d4:	3823883a 	mov	r17,r7
802148d8:	003f9b06 	br	80214748 <__reset+0xfa1f4748>
802148dc:	2988b03a 	or	r4,r5,r6
802148e0:	203f5c26 	beq	r4,zero,80214654 <__reset+0xfa1f4654>
802148e4:	10bfffc4 	addi	r2,r2,-1
802148e8:	1000931e 	bne	r2,zero,80214b38 <__subdf3+0x568>
802148ec:	898d883a 	add	r6,r17,r6
802148f0:	3463803a 	cmpltu	r17,r6,r17
802148f4:	1947883a 	add	r3,r3,r5
802148f8:	88c7883a 	add	r3,r17,r3
802148fc:	3023883a 	mov	r17,r6
80214900:	003fd306 	br	80214850 <__reset+0xfa1f4850>
80214904:	1000541e 	bne	r2,zero,80214a58 <__subdf3+0x488>
80214908:	80800044 	addi	r2,r16,1
8021490c:	1081ffcc 	andi	r2,r2,2047
80214910:	01000044 	movi	r4,1
80214914:	2080a20e 	bge	r4,r2,80214ba0 <__subdf3+0x5d0>
80214918:	8989c83a 	sub	r4,r17,r6
8021491c:	8905803a 	cmpltu	r2,r17,r4
80214920:	1967c83a 	sub	r19,r3,r5
80214924:	98a7c83a 	sub	r19,r19,r2
80214928:	9880202c 	andhi	r2,r19,128
8021492c:	10006326 	beq	r2,zero,80214abc <__subdf3+0x4ec>
80214930:	3463c83a 	sub	r17,r6,r17
80214934:	28c7c83a 	sub	r3,r5,r3
80214938:	344d803a 	cmpltu	r6,r6,r17
8021493c:	19a7c83a 	sub	r19,r3,r6
80214940:	3825883a 	mov	r18,r7
80214944:	983f861e 	bne	r19,zero,80214760 <__reset+0xfa1f4760>
80214948:	8809883a 	mov	r4,r17
8021494c:	02050080 	call	80205008 <__clzsi2>
80214950:	10800804 	addi	r2,r2,32
80214954:	113ffe04 	addi	r4,r2,-8
80214958:	00c007c4 	movi	r3,31
8021495c:	193f850e 	bge	r3,r4,80214774 <__reset+0xfa1f4774>
80214960:	10bff604 	addi	r2,r2,-40
80214964:	8884983a 	sll	r2,r17,r2
80214968:	0023883a 	mov	r17,zero
8021496c:	243f880e 	bge	r4,r16,80214790 <__reset+0xfa1f4790>
80214970:	00ffe034 	movhi	r3,65408
80214974:	18ffffc4 	addi	r3,r3,-1
80214978:	8121c83a 	sub	r16,r16,r4
8021497c:	10c6703a 	and	r3,r2,r3
80214980:	003f3406 	br	80214654 <__reset+0xfa1f4654>
80214984:	9100004c 	andi	r4,r18,1
80214988:	000b883a 	mov	r5,zero
8021498c:	0005883a 	mov	r2,zero
80214990:	003f4806 	br	802146b4 <__reset+0xfa1f46b4>
80214994:	298cb03a 	or	r6,r5,r6
80214998:	300cc03a 	cmpne	r6,r6,zero
8021499c:	0005883a 	mov	r2,zero
802149a0:	003f6406 	br	80214734 <__reset+0xfa1f4734>
802149a4:	10009a1e 	bne	r2,zero,80214c10 <__subdf3+0x640>
802149a8:	82400044 	addi	r9,r16,1
802149ac:	4881ffcc 	andi	r2,r9,2047
802149b0:	02800044 	movi	r10,1
802149b4:	5080670e 	bge	r10,r2,80214b54 <__subdf3+0x584>
802149b8:	0081ffc4 	movi	r2,2047
802149bc:	4880af26 	beq	r9,r2,80214c7c <__subdf3+0x6ac>
802149c0:	898d883a 	add	r6,r17,r6
802149c4:	1945883a 	add	r2,r3,r5
802149c8:	3447803a 	cmpltu	r3,r6,r17
802149cc:	1887883a 	add	r3,r3,r2
802149d0:	182297fa 	slli	r17,r3,31
802149d4:	300cd07a 	srli	r6,r6,1
802149d8:	1806d07a 	srli	r3,r3,1
802149dc:	4821883a 	mov	r16,r9
802149e0:	89a2b03a 	or	r17,r17,r6
802149e4:	003f1b06 	br	80214654 <__reset+0xfa1f4654>
802149e8:	0101ffc4 	movi	r4,2047
802149ec:	813f441e 	bne	r16,r4,80214700 <__reset+0xfa1f4700>
802149f0:	003f1806 	br	80214654 <__reset+0xfa1f4654>
802149f4:	843ff844 	addi	r16,r16,-31
802149f8:	01400804 	movi	r5,32
802149fc:	1408d83a 	srl	r4,r2,r16
80214a00:	19405026 	beq	r3,r5,80214b44 <__subdf3+0x574>
80214a04:	01401004 	movi	r5,64
80214a08:	28c7c83a 	sub	r3,r5,r3
80214a0c:	10c4983a 	sll	r2,r2,r3
80214a10:	88a2b03a 	or	r17,r17,r2
80214a14:	8822c03a 	cmpne	r17,r17,zero
80214a18:	2462b03a 	or	r17,r4,r17
80214a1c:	0007883a 	mov	r3,zero
80214a20:	0021883a 	mov	r16,zero
80214a24:	003f6d06 	br	802147dc <__reset+0xfa1f47dc>
80214a28:	11fff804 	addi	r7,r2,-32
80214a2c:	01000804 	movi	r4,32
80214a30:	29ced83a 	srl	r7,r5,r7
80214a34:	11004526 	beq	r2,r4,80214b4c <__subdf3+0x57c>
80214a38:	01001004 	movi	r4,64
80214a3c:	2089c83a 	sub	r4,r4,r2
80214a40:	2904983a 	sll	r2,r5,r4
80214a44:	118cb03a 	or	r6,r2,r6
80214a48:	300cc03a 	cmpne	r6,r6,zero
80214a4c:	398cb03a 	or	r6,r7,r6
80214a50:	0005883a 	mov	r2,zero
80214a54:	003f3706 	br	80214734 <__reset+0xfa1f4734>
80214a58:	80002a26 	beq	r16,zero,80214b04 <__subdf3+0x534>
80214a5c:	0101ffc4 	movi	r4,2047
80214a60:	49006626 	beq	r9,r4,80214bfc <__subdf3+0x62c>
80214a64:	0085c83a 	sub	r2,zero,r2
80214a68:	18c02034 	orhi	r3,r3,128
80214a6c:	01000e04 	movi	r4,56
80214a70:	20807e16 	blt	r4,r2,80214c6c <__subdf3+0x69c>
80214a74:	010007c4 	movi	r4,31
80214a78:	2080e716 	blt	r4,r2,80214e18 <__subdf3+0x848>
80214a7c:	01000804 	movi	r4,32
80214a80:	2089c83a 	sub	r4,r4,r2
80214a84:	1914983a 	sll	r10,r3,r4
80214a88:	8890d83a 	srl	r8,r17,r2
80214a8c:	8908983a 	sll	r4,r17,r4
80214a90:	1884d83a 	srl	r2,r3,r2
80214a94:	5222b03a 	or	r17,r10,r8
80214a98:	2006c03a 	cmpne	r3,r4,zero
80214a9c:	88e2b03a 	or	r17,r17,r3
80214aa0:	3463c83a 	sub	r17,r6,r17
80214aa4:	2885c83a 	sub	r2,r5,r2
80214aa8:	344d803a 	cmpltu	r6,r6,r17
80214aac:	1187c83a 	sub	r3,r2,r6
80214ab0:	4821883a 	mov	r16,r9
80214ab4:	3825883a 	mov	r18,r7
80214ab8:	003f2306 	br	80214748 <__reset+0xfa1f4748>
80214abc:	24d0b03a 	or	r8,r4,r19
80214ac0:	40001b1e 	bne	r8,zero,80214b30 <__subdf3+0x560>
80214ac4:	0005883a 	mov	r2,zero
80214ac8:	0009883a 	mov	r4,zero
80214acc:	0021883a 	mov	r16,zero
80214ad0:	003f4906 	br	802147f8 <__reset+0xfa1f47f8>
80214ad4:	010007c4 	movi	r4,31
80214ad8:	20803a16 	blt	r4,r2,80214bc4 <__subdf3+0x5f4>
80214adc:	01000804 	movi	r4,32
80214ae0:	2089c83a 	sub	r4,r4,r2
80214ae4:	2912983a 	sll	r9,r5,r4
80214ae8:	3090d83a 	srl	r8,r6,r2
80214aec:	3108983a 	sll	r4,r6,r4
80214af0:	2884d83a 	srl	r2,r5,r2
80214af4:	4a12b03a 	or	r9,r9,r8
80214af8:	2008c03a 	cmpne	r4,r4,zero
80214afc:	4912b03a 	or	r9,r9,r4
80214b00:	003f4e06 	br	8021483c <__reset+0xfa1f483c>
80214b04:	1c48b03a 	or	r4,r3,r17
80214b08:	20003c26 	beq	r4,zero,80214bfc <__subdf3+0x62c>
80214b0c:	0084303a 	nor	r2,zero,r2
80214b10:	1000381e 	bne	r2,zero,80214bf4 <__subdf3+0x624>
80214b14:	3463c83a 	sub	r17,r6,r17
80214b18:	28c5c83a 	sub	r2,r5,r3
80214b1c:	344d803a 	cmpltu	r6,r6,r17
80214b20:	1187c83a 	sub	r3,r2,r6
80214b24:	4821883a 	mov	r16,r9
80214b28:	3825883a 	mov	r18,r7
80214b2c:	003f0606 	br	80214748 <__reset+0xfa1f4748>
80214b30:	2023883a 	mov	r17,r4
80214b34:	003f0906 	br	8021475c <__reset+0xfa1f475c>
80214b38:	0101ffc4 	movi	r4,2047
80214b3c:	813f3a1e 	bne	r16,r4,80214828 <__reset+0xfa1f4828>
80214b40:	003ec406 	br	80214654 <__reset+0xfa1f4654>
80214b44:	0005883a 	mov	r2,zero
80214b48:	003fb106 	br	80214a10 <__reset+0xfa1f4a10>
80214b4c:	0005883a 	mov	r2,zero
80214b50:	003fbc06 	br	80214a44 <__reset+0xfa1f4a44>
80214b54:	1c44b03a 	or	r2,r3,r17
80214b58:	80008e1e 	bne	r16,zero,80214d94 <__subdf3+0x7c4>
80214b5c:	1000c826 	beq	r2,zero,80214e80 <__subdf3+0x8b0>
80214b60:	2984b03a 	or	r2,r5,r6
80214b64:	103ebb26 	beq	r2,zero,80214654 <__reset+0xfa1f4654>
80214b68:	8989883a 	add	r4,r17,r6
80214b6c:	1945883a 	add	r2,r3,r5
80214b70:	2447803a 	cmpltu	r3,r4,r17
80214b74:	1887883a 	add	r3,r3,r2
80214b78:	1880202c 	andhi	r2,r3,128
80214b7c:	2023883a 	mov	r17,r4
80214b80:	103f1626 	beq	r2,zero,802147dc <__reset+0xfa1f47dc>
80214b84:	00bfe034 	movhi	r2,65408
80214b88:	10bfffc4 	addi	r2,r2,-1
80214b8c:	5021883a 	mov	r16,r10
80214b90:	1886703a 	and	r3,r3,r2
80214b94:	003eaf06 	br	80214654 <__reset+0xfa1f4654>
80214b98:	3825883a 	mov	r18,r7
80214b9c:	003f0f06 	br	802147dc <__reset+0xfa1f47dc>
80214ba0:	1c44b03a 	or	r2,r3,r17
80214ba4:	8000251e 	bne	r16,zero,80214c3c <__subdf3+0x66c>
80214ba8:	1000661e 	bne	r2,zero,80214d44 <__subdf3+0x774>
80214bac:	2990b03a 	or	r8,r5,r6
80214bb0:	40009626 	beq	r8,zero,80214e0c <__subdf3+0x83c>
80214bb4:	2807883a 	mov	r3,r5
80214bb8:	3023883a 	mov	r17,r6
80214bbc:	3825883a 	mov	r18,r7
80214bc0:	003ea406 	br	80214654 <__reset+0xfa1f4654>
80214bc4:	127ff804 	addi	r9,r2,-32
80214bc8:	01000804 	movi	r4,32
80214bcc:	2a52d83a 	srl	r9,r5,r9
80214bd0:	11008c26 	beq	r2,r4,80214e04 <__subdf3+0x834>
80214bd4:	01001004 	movi	r4,64
80214bd8:	2085c83a 	sub	r2,r4,r2
80214bdc:	2884983a 	sll	r2,r5,r2
80214be0:	118cb03a 	or	r6,r2,r6
80214be4:	300cc03a 	cmpne	r6,r6,zero
80214be8:	4992b03a 	or	r9,r9,r6
80214bec:	0005883a 	mov	r2,zero
80214bf0:	003f1206 	br	8021483c <__reset+0xfa1f483c>
80214bf4:	0101ffc4 	movi	r4,2047
80214bf8:	493f9c1e 	bne	r9,r4,80214a6c <__reset+0xfa1f4a6c>
80214bfc:	2807883a 	mov	r3,r5
80214c00:	3023883a 	mov	r17,r6
80214c04:	4821883a 	mov	r16,r9
80214c08:	3825883a 	mov	r18,r7
80214c0c:	003e9106 	br	80214654 <__reset+0xfa1f4654>
80214c10:	80001f1e 	bne	r16,zero,80214c90 <__subdf3+0x6c0>
80214c14:	1c48b03a 	or	r4,r3,r17
80214c18:	20005a26 	beq	r4,zero,80214d84 <__subdf3+0x7b4>
80214c1c:	0084303a 	nor	r2,zero,r2
80214c20:	1000561e 	bne	r2,zero,80214d7c <__subdf3+0x7ac>
80214c24:	89a3883a 	add	r17,r17,r6
80214c28:	1945883a 	add	r2,r3,r5
80214c2c:	898d803a 	cmpltu	r6,r17,r6
80214c30:	3087883a 	add	r3,r6,r2
80214c34:	4821883a 	mov	r16,r9
80214c38:	003f0506 	br	80214850 <__reset+0xfa1f4850>
80214c3c:	10002b1e 	bne	r2,zero,80214cec <__subdf3+0x71c>
80214c40:	2984b03a 	or	r2,r5,r6
80214c44:	10008026 	beq	r2,zero,80214e48 <__subdf3+0x878>
80214c48:	2807883a 	mov	r3,r5
80214c4c:	3023883a 	mov	r17,r6
80214c50:	3825883a 	mov	r18,r7
80214c54:	0401ffc4 	movi	r16,2047
80214c58:	003e7e06 	br	80214654 <__reset+0xfa1f4654>
80214c5c:	3809883a 	mov	r4,r7
80214c60:	0011883a 	mov	r8,zero
80214c64:	0005883a 	mov	r2,zero
80214c68:	003ee306 	br	802147f8 <__reset+0xfa1f47f8>
80214c6c:	1c62b03a 	or	r17,r3,r17
80214c70:	8822c03a 	cmpne	r17,r17,zero
80214c74:	0005883a 	mov	r2,zero
80214c78:	003f8906 	br	80214aa0 <__reset+0xfa1f4aa0>
80214c7c:	3809883a 	mov	r4,r7
80214c80:	4821883a 	mov	r16,r9
80214c84:	0011883a 	mov	r8,zero
80214c88:	0005883a 	mov	r2,zero
80214c8c:	003eda06 	br	802147f8 <__reset+0xfa1f47f8>
80214c90:	0101ffc4 	movi	r4,2047
80214c94:	49003b26 	beq	r9,r4,80214d84 <__subdf3+0x7b4>
80214c98:	0085c83a 	sub	r2,zero,r2
80214c9c:	18c02034 	orhi	r3,r3,128
80214ca0:	01000e04 	movi	r4,56
80214ca4:	20806e16 	blt	r4,r2,80214e60 <__subdf3+0x890>
80214ca8:	010007c4 	movi	r4,31
80214cac:	20807716 	blt	r4,r2,80214e8c <__subdf3+0x8bc>
80214cb0:	01000804 	movi	r4,32
80214cb4:	2089c83a 	sub	r4,r4,r2
80214cb8:	1914983a 	sll	r10,r3,r4
80214cbc:	8890d83a 	srl	r8,r17,r2
80214cc0:	8908983a 	sll	r4,r17,r4
80214cc4:	1884d83a 	srl	r2,r3,r2
80214cc8:	5222b03a 	or	r17,r10,r8
80214ccc:	2006c03a 	cmpne	r3,r4,zero
80214cd0:	88e2b03a 	or	r17,r17,r3
80214cd4:	89a3883a 	add	r17,r17,r6
80214cd8:	1145883a 	add	r2,r2,r5
80214cdc:	898d803a 	cmpltu	r6,r17,r6
80214ce0:	3087883a 	add	r3,r6,r2
80214ce4:	4821883a 	mov	r16,r9
80214ce8:	003ed906 	br	80214850 <__reset+0xfa1f4850>
80214cec:	2984b03a 	or	r2,r5,r6
80214cf0:	10004226 	beq	r2,zero,80214dfc <__subdf3+0x82c>
80214cf4:	1808d0fa 	srli	r4,r3,3
80214cf8:	8822d0fa 	srli	r17,r17,3
80214cfc:	1806977a 	slli	r3,r3,29
80214d00:	2080022c 	andhi	r2,r4,8
80214d04:	1c62b03a 	or	r17,r3,r17
80214d08:	10000826 	beq	r2,zero,80214d2c <__subdf3+0x75c>
80214d0c:	2812d0fa 	srli	r9,r5,3
80214d10:	4880022c 	andhi	r2,r9,8
80214d14:	1000051e 	bne	r2,zero,80214d2c <__subdf3+0x75c>
80214d18:	300cd0fa 	srli	r6,r6,3
80214d1c:	2804977a 	slli	r2,r5,29
80214d20:	4809883a 	mov	r4,r9
80214d24:	3825883a 	mov	r18,r7
80214d28:	11a2b03a 	or	r17,r2,r6
80214d2c:	8806d77a 	srli	r3,r17,29
80214d30:	200890fa 	slli	r4,r4,3
80214d34:	882290fa 	slli	r17,r17,3
80214d38:	0401ffc4 	movi	r16,2047
80214d3c:	1906b03a 	or	r3,r3,r4
80214d40:	003e4406 	br	80214654 <__reset+0xfa1f4654>
80214d44:	2984b03a 	or	r2,r5,r6
80214d48:	103e4226 	beq	r2,zero,80214654 <__reset+0xfa1f4654>
80214d4c:	8989c83a 	sub	r4,r17,r6
80214d50:	8911803a 	cmpltu	r8,r17,r4
80214d54:	1945c83a 	sub	r2,r3,r5
80214d58:	1205c83a 	sub	r2,r2,r8
80214d5c:	1200202c 	andhi	r8,r2,128
80214d60:	403e9a26 	beq	r8,zero,802147cc <__reset+0xfa1f47cc>
80214d64:	3463c83a 	sub	r17,r6,r17
80214d68:	28c5c83a 	sub	r2,r5,r3
80214d6c:	344d803a 	cmpltu	r6,r6,r17
80214d70:	1187c83a 	sub	r3,r2,r6
80214d74:	3825883a 	mov	r18,r7
80214d78:	003e3606 	br	80214654 <__reset+0xfa1f4654>
80214d7c:	0101ffc4 	movi	r4,2047
80214d80:	493fc71e 	bne	r9,r4,80214ca0 <__reset+0xfa1f4ca0>
80214d84:	2807883a 	mov	r3,r5
80214d88:	3023883a 	mov	r17,r6
80214d8c:	4821883a 	mov	r16,r9
80214d90:	003e3006 	br	80214654 <__reset+0xfa1f4654>
80214d94:	10003626 	beq	r2,zero,80214e70 <__subdf3+0x8a0>
80214d98:	2984b03a 	or	r2,r5,r6
80214d9c:	10001726 	beq	r2,zero,80214dfc <__subdf3+0x82c>
80214da0:	1808d0fa 	srli	r4,r3,3
80214da4:	8822d0fa 	srli	r17,r17,3
80214da8:	1806977a 	slli	r3,r3,29
80214dac:	2080022c 	andhi	r2,r4,8
80214db0:	1c62b03a 	or	r17,r3,r17
80214db4:	10000726 	beq	r2,zero,80214dd4 <__subdf3+0x804>
80214db8:	2812d0fa 	srli	r9,r5,3
80214dbc:	4880022c 	andhi	r2,r9,8
80214dc0:	1000041e 	bne	r2,zero,80214dd4 <__subdf3+0x804>
80214dc4:	300cd0fa 	srli	r6,r6,3
80214dc8:	2804977a 	slli	r2,r5,29
80214dcc:	4809883a 	mov	r4,r9
80214dd0:	11a2b03a 	or	r17,r2,r6
80214dd4:	8806d77a 	srli	r3,r17,29
80214dd8:	200890fa 	slli	r4,r4,3
80214ddc:	882290fa 	slli	r17,r17,3
80214de0:	3825883a 	mov	r18,r7
80214de4:	1906b03a 	or	r3,r3,r4
80214de8:	0401ffc4 	movi	r16,2047
80214dec:	003e1906 	br	80214654 <__reset+0xfa1f4654>
80214df0:	000b883a 	mov	r5,zero
80214df4:	0005883a 	mov	r2,zero
80214df8:	003e2e06 	br	802146b4 <__reset+0xfa1f46b4>
80214dfc:	0401ffc4 	movi	r16,2047
80214e00:	003e1406 	br	80214654 <__reset+0xfa1f4654>
80214e04:	0005883a 	mov	r2,zero
80214e08:	003f7506 	br	80214be0 <__reset+0xfa1f4be0>
80214e0c:	0005883a 	mov	r2,zero
80214e10:	0009883a 	mov	r4,zero
80214e14:	003e7806 	br	802147f8 <__reset+0xfa1f47f8>
80214e18:	123ff804 	addi	r8,r2,-32
80214e1c:	01000804 	movi	r4,32
80214e20:	1a10d83a 	srl	r8,r3,r8
80214e24:	11002526 	beq	r2,r4,80214ebc <__subdf3+0x8ec>
80214e28:	01001004 	movi	r4,64
80214e2c:	2085c83a 	sub	r2,r4,r2
80214e30:	1884983a 	sll	r2,r3,r2
80214e34:	1444b03a 	or	r2,r2,r17
80214e38:	1004c03a 	cmpne	r2,r2,zero
80214e3c:	40a2b03a 	or	r17,r8,r2
80214e40:	0005883a 	mov	r2,zero
80214e44:	003f1606 	br	80214aa0 <__reset+0xfa1f4aa0>
80214e48:	02000434 	movhi	r8,16
80214e4c:	0009883a 	mov	r4,zero
80214e50:	423fffc4 	addi	r8,r8,-1
80214e54:	00bfffc4 	movi	r2,-1
80214e58:	0401ffc4 	movi	r16,2047
80214e5c:	003e6606 	br	802147f8 <__reset+0xfa1f47f8>
80214e60:	1c62b03a 	or	r17,r3,r17
80214e64:	8822c03a 	cmpne	r17,r17,zero
80214e68:	0005883a 	mov	r2,zero
80214e6c:	003f9906 	br	80214cd4 <__reset+0xfa1f4cd4>
80214e70:	2807883a 	mov	r3,r5
80214e74:	3023883a 	mov	r17,r6
80214e78:	0401ffc4 	movi	r16,2047
80214e7c:	003df506 	br	80214654 <__reset+0xfa1f4654>
80214e80:	2807883a 	mov	r3,r5
80214e84:	3023883a 	mov	r17,r6
80214e88:	003df206 	br	80214654 <__reset+0xfa1f4654>
80214e8c:	123ff804 	addi	r8,r2,-32
80214e90:	01000804 	movi	r4,32
80214e94:	1a10d83a 	srl	r8,r3,r8
80214e98:	11000a26 	beq	r2,r4,80214ec4 <__subdf3+0x8f4>
80214e9c:	01001004 	movi	r4,64
80214ea0:	2085c83a 	sub	r2,r4,r2
80214ea4:	1884983a 	sll	r2,r3,r2
80214ea8:	1444b03a 	or	r2,r2,r17
80214eac:	1004c03a 	cmpne	r2,r2,zero
80214eb0:	40a2b03a 	or	r17,r8,r2
80214eb4:	0005883a 	mov	r2,zero
80214eb8:	003f8606 	br	80214cd4 <__reset+0xfa1f4cd4>
80214ebc:	0005883a 	mov	r2,zero
80214ec0:	003fdc06 	br	80214e34 <__reset+0xfa1f4e34>
80214ec4:	0005883a 	mov	r2,zero
80214ec8:	003ff706 	br	80214ea8 <__reset+0xfa1f4ea8>

80214ecc <__fixdfsi>:
80214ecc:	280cd53a 	srli	r6,r5,20
80214ed0:	00c00434 	movhi	r3,16
80214ed4:	18ffffc4 	addi	r3,r3,-1
80214ed8:	3181ffcc 	andi	r6,r6,2047
80214edc:	01c0ff84 	movi	r7,1022
80214ee0:	28c6703a 	and	r3,r5,r3
80214ee4:	280ad7fa 	srli	r5,r5,31
80214ee8:	3980120e 	bge	r7,r6,80214f34 <__fixdfsi+0x68>
80214eec:	00810744 	movi	r2,1053
80214ef0:	11800c16 	blt	r2,r6,80214f24 <__fixdfsi+0x58>
80214ef4:	00810cc4 	movi	r2,1075
80214ef8:	1185c83a 	sub	r2,r2,r6
80214efc:	01c007c4 	movi	r7,31
80214f00:	18c00434 	orhi	r3,r3,16
80214f04:	38800d16 	blt	r7,r2,80214f3c <__fixdfsi+0x70>
80214f08:	31befb44 	addi	r6,r6,-1043
80214f0c:	2084d83a 	srl	r2,r4,r2
80214f10:	1986983a 	sll	r3,r3,r6
80214f14:	1884b03a 	or	r2,r3,r2
80214f18:	28000726 	beq	r5,zero,80214f38 <__fixdfsi+0x6c>
80214f1c:	0085c83a 	sub	r2,zero,r2
80214f20:	f800283a 	ret
80214f24:	00a00034 	movhi	r2,32768
80214f28:	10bfffc4 	addi	r2,r2,-1
80214f2c:	2885883a 	add	r2,r5,r2
80214f30:	f800283a 	ret
80214f34:	0005883a 	mov	r2,zero
80214f38:	f800283a 	ret
80214f3c:	008104c4 	movi	r2,1043
80214f40:	1185c83a 	sub	r2,r2,r6
80214f44:	1884d83a 	srl	r2,r3,r2
80214f48:	003ff306 	br	80214f18 <__reset+0xfa1f4f18>

80214f4c <__floatsidf>:
80214f4c:	defffd04 	addi	sp,sp,-12
80214f50:	dfc00215 	stw	ra,8(sp)
80214f54:	dc400115 	stw	r17,4(sp)
80214f58:	dc000015 	stw	r16,0(sp)
80214f5c:	20002b26 	beq	r4,zero,8021500c <__floatsidf+0xc0>
80214f60:	2023883a 	mov	r17,r4
80214f64:	2020d7fa 	srli	r16,r4,31
80214f68:	20002d16 	blt	r4,zero,80215020 <__floatsidf+0xd4>
80214f6c:	8809883a 	mov	r4,r17
80214f70:	02050080 	call	80205008 <__clzsi2>
80214f74:	01410784 	movi	r5,1054
80214f78:	288bc83a 	sub	r5,r5,r2
80214f7c:	01010cc4 	movi	r4,1075
80214f80:	2149c83a 	sub	r4,r4,r5
80214f84:	00c007c4 	movi	r3,31
80214f88:	1900160e 	bge	r3,r4,80214fe4 <__floatsidf+0x98>
80214f8c:	00c104c4 	movi	r3,1043
80214f90:	1947c83a 	sub	r3,r3,r5
80214f94:	88c6983a 	sll	r3,r17,r3
80214f98:	00800434 	movhi	r2,16
80214f9c:	10bfffc4 	addi	r2,r2,-1
80214fa0:	1886703a 	and	r3,r3,r2
80214fa4:	2941ffcc 	andi	r5,r5,2047
80214fa8:	800d883a 	mov	r6,r16
80214fac:	0005883a 	mov	r2,zero
80214fb0:	280a953a 	slli	r5,r5,20
80214fb4:	31803fcc 	andi	r6,r6,255
80214fb8:	01000434 	movhi	r4,16
80214fbc:	300c97fa 	slli	r6,r6,31
80214fc0:	213fffc4 	addi	r4,r4,-1
80214fc4:	1906703a 	and	r3,r3,r4
80214fc8:	1946b03a 	or	r3,r3,r5
80214fcc:	1986b03a 	or	r3,r3,r6
80214fd0:	dfc00217 	ldw	ra,8(sp)
80214fd4:	dc400117 	ldw	r17,4(sp)
80214fd8:	dc000017 	ldw	r16,0(sp)
80214fdc:	dec00304 	addi	sp,sp,12
80214fe0:	f800283a 	ret
80214fe4:	00c002c4 	movi	r3,11
80214fe8:	1887c83a 	sub	r3,r3,r2
80214fec:	88c6d83a 	srl	r3,r17,r3
80214ff0:	8904983a 	sll	r2,r17,r4
80214ff4:	01000434 	movhi	r4,16
80214ff8:	213fffc4 	addi	r4,r4,-1
80214ffc:	2941ffcc 	andi	r5,r5,2047
80215000:	1906703a 	and	r3,r3,r4
80215004:	800d883a 	mov	r6,r16
80215008:	003fe906 	br	80214fb0 <__reset+0xfa1f4fb0>
8021500c:	000d883a 	mov	r6,zero
80215010:	000b883a 	mov	r5,zero
80215014:	0007883a 	mov	r3,zero
80215018:	0005883a 	mov	r2,zero
8021501c:	003fe406 	br	80214fb0 <__reset+0xfa1f4fb0>
80215020:	0123c83a 	sub	r17,zero,r4
80215024:	003fd106 	br	80214f6c <__reset+0xfa1f4f6c>

80215028 <__floatunsidf>:
80215028:	defffe04 	addi	sp,sp,-8
8021502c:	dc000015 	stw	r16,0(sp)
80215030:	dfc00115 	stw	ra,4(sp)
80215034:	2021883a 	mov	r16,r4
80215038:	20002226 	beq	r4,zero,802150c4 <__floatunsidf+0x9c>
8021503c:	02050080 	call	80205008 <__clzsi2>
80215040:	01010784 	movi	r4,1054
80215044:	2089c83a 	sub	r4,r4,r2
80215048:	01810cc4 	movi	r6,1075
8021504c:	310dc83a 	sub	r6,r6,r4
80215050:	00c007c4 	movi	r3,31
80215054:	1980120e 	bge	r3,r6,802150a0 <__floatunsidf+0x78>
80215058:	00c104c4 	movi	r3,1043
8021505c:	1907c83a 	sub	r3,r3,r4
80215060:	80ca983a 	sll	r5,r16,r3
80215064:	00800434 	movhi	r2,16
80215068:	10bfffc4 	addi	r2,r2,-1
8021506c:	2101ffcc 	andi	r4,r4,2047
80215070:	0021883a 	mov	r16,zero
80215074:	288a703a 	and	r5,r5,r2
80215078:	2008953a 	slli	r4,r4,20
8021507c:	00c00434 	movhi	r3,16
80215080:	18ffffc4 	addi	r3,r3,-1
80215084:	28c6703a 	and	r3,r5,r3
80215088:	8005883a 	mov	r2,r16
8021508c:	1906b03a 	or	r3,r3,r4
80215090:	dfc00117 	ldw	ra,4(sp)
80215094:	dc000017 	ldw	r16,0(sp)
80215098:	dec00204 	addi	sp,sp,8
8021509c:	f800283a 	ret
802150a0:	00c002c4 	movi	r3,11
802150a4:	188bc83a 	sub	r5,r3,r2
802150a8:	814ad83a 	srl	r5,r16,r5
802150ac:	00c00434 	movhi	r3,16
802150b0:	18ffffc4 	addi	r3,r3,-1
802150b4:	81a0983a 	sll	r16,r16,r6
802150b8:	2101ffcc 	andi	r4,r4,2047
802150bc:	28ca703a 	and	r5,r5,r3
802150c0:	003fed06 	br	80215078 <__reset+0xfa1f5078>
802150c4:	0009883a 	mov	r4,zero
802150c8:	000b883a 	mov	r5,zero
802150cc:	003fea06 	br	80215078 <__reset+0xfa1f5078>

802150d0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
802150d0:	defffb04 	addi	sp,sp,-20
802150d4:	df000415 	stw	fp,16(sp)
802150d8:	df000404 	addi	fp,sp,16
802150dc:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
802150e0:	008000c4 	movi	r2,3
802150e4:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
802150e8:	e0fffd17 	ldw	r3,-12(fp)
802150ec:	008003f4 	movhi	r2,15
802150f0:	10909004 	addi	r2,r2,16960
802150f4:	1887383a 	mul	r3,r3,r2
802150f8:	00817db4 	movhi	r2,1526
802150fc:	10b84004 	addi	r2,r2,-7936
80215100:	10c7203a 	divu	r3,r2,r3
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
80215104:	00a00034 	movhi	r2,32768
80215108:	10bfffc4 	addi	r2,r2,-1
8021510c:	10c5203a 	divu	r2,r2,r3
80215110:	e0ffff17 	ldw	r3,-4(fp)
80215114:	1885203a 	divu	r2,r3,r2
80215118:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
8021511c:	e0bffe17 	ldw	r2,-8(fp)
80215120:	10002526 	beq	r2,zero,802151b8 <alt_busy_sleep+0xe8>
  {
    for(i=0;i<big_loops;i++)
80215124:	e03ffc15 	stw	zero,-16(fp)
80215128:	00001406 	br	8021517c <alt_busy_sleep+0xac>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
8021512c:	00a00034 	movhi	r2,32768
80215130:	10bfffc4 	addi	r2,r2,-1
80215134:	10bfffc4 	addi	r2,r2,-1
80215138:	103ffe1e 	bne	r2,zero,80215134 <__reset+0xfa1f5134>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
8021513c:	e0fffd17 	ldw	r3,-12(fp)
80215140:	008003f4 	movhi	r2,15
80215144:	10909004 	addi	r2,r2,16960
80215148:	1887383a 	mul	r3,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
8021514c:	00817db4 	movhi	r2,1526
80215150:	10b84004 	addi	r2,r2,-7936
80215154:	10c7203a 	divu	r3,r2,r3
80215158:	00a00034 	movhi	r2,32768
8021515c:	10bfffc4 	addi	r2,r2,-1
80215160:	10c5203a 	divu	r2,r2,r3
80215164:	e0ffff17 	ldw	r3,-4(fp)
80215168:	1885c83a 	sub	r2,r3,r2
8021516c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
80215170:	e0bffc17 	ldw	r2,-16(fp)
80215174:	10800044 	addi	r2,r2,1
80215178:	e0bffc15 	stw	r2,-16(fp)
8021517c:	e0fffc17 	ldw	r3,-16(fp)
80215180:	e0bffe17 	ldw	r2,-8(fp)
80215184:	18bfe916 	blt	r3,r2,8021512c <__reset+0xfa1f512c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
80215188:	e0fffd17 	ldw	r3,-12(fp)
8021518c:	008003f4 	movhi	r2,15
80215190:	10909004 	addi	r2,r2,16960
80215194:	1887383a 	mul	r3,r3,r2
80215198:	00817db4 	movhi	r2,1526
8021519c:	10b84004 	addi	r2,r2,-7936
802151a0:	10c7203a 	divu	r3,r2,r3
802151a4:	e0bfff17 	ldw	r2,-4(fp)
802151a8:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
802151ac:	10bfffc4 	addi	r2,r2,-1
802151b0:	103ffe1e 	bne	r2,zero,802151ac <__reset+0xfa1f51ac>
802151b4:	00000b06 	br	802151e4 <alt_busy_sleep+0x114>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
802151b8:	e0fffd17 	ldw	r3,-12(fp)
802151bc:	008003f4 	movhi	r2,15
802151c0:	10909004 	addi	r2,r2,16960
802151c4:	1887383a 	mul	r3,r3,r2
802151c8:	00817db4 	movhi	r2,1526
802151cc:	10b84004 	addi	r2,r2,-7936
802151d0:	10c7203a 	divu	r3,r2,r3
802151d4:	e0bfff17 	ldw	r2,-4(fp)
802151d8:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
802151dc:	10bfffc4 	addi	r2,r2,-1
802151e0:	00bffe16 	blt	zero,r2,802151dc <__reset+0xfa1f51dc>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
802151e4:	0005883a 	mov	r2,zero
}
802151e8:	e037883a 	mov	sp,fp
802151ec:	df000017 	ldw	fp,0(sp)
802151f0:	dec00104 	addi	sp,sp,4
802151f4:	f800283a 	ret

802151f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
802151f8:	defffe04 	addi	sp,sp,-8
802151fc:	dfc00115 	stw	ra,4(sp)
80215200:	df000015 	stw	fp,0(sp)
80215204:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80215208:	d0a00c17 	ldw	r2,-32720(gp)
8021520c:	10000326 	beq	r2,zero,8021521c <alt_get_errno+0x24>
80215210:	d0a00c17 	ldw	r2,-32720(gp)
80215214:	103ee83a 	callr	r2
80215218:	00000106 	br	80215220 <alt_get_errno+0x28>
8021521c:	d0a02004 	addi	r2,gp,-32640
}
80215220:	e037883a 	mov	sp,fp
80215224:	dfc00117 	ldw	ra,4(sp)
80215228:	df000017 	ldw	fp,0(sp)
8021522c:	dec00204 	addi	sp,sp,8
80215230:	f800283a 	ret

80215234 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
80215234:	defffb04 	addi	sp,sp,-20
80215238:	dfc00415 	stw	ra,16(sp)
8021523c:	df000315 	stw	fp,12(sp)
80215240:	df000304 	addi	fp,sp,12
80215244:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
80215248:	e0bfff17 	ldw	r2,-4(fp)
8021524c:	10000616 	blt	r2,zero,80215268 <close+0x34>
80215250:	e0bfff17 	ldw	r2,-4(fp)
80215254:	10c00324 	muli	r3,r2,12
80215258:	00a008b4 	movhi	r2,32802
8021525c:	10b01304 	addi	r2,r2,-16308
80215260:	1885883a 	add	r2,r3,r2
80215264:	00000106 	br	8021526c <close+0x38>
80215268:	0005883a 	mov	r2,zero
8021526c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
80215270:	e0bffd17 	ldw	r2,-12(fp)
80215274:	10001926 	beq	r2,zero,802152dc <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
80215278:	e0bffd17 	ldw	r2,-12(fp)
8021527c:	10800017 	ldw	r2,0(r2)
80215280:	10800417 	ldw	r2,16(r2)
80215284:	10000626 	beq	r2,zero,802152a0 <close+0x6c>
80215288:	e0bffd17 	ldw	r2,-12(fp)
8021528c:	10800017 	ldw	r2,0(r2)
80215290:	10800417 	ldw	r2,16(r2)
80215294:	e13ffd17 	ldw	r4,-12(fp)
80215298:	103ee83a 	callr	r2
8021529c:	00000106 	br	802152a4 <close+0x70>
802152a0:	0005883a 	mov	r2,zero
802152a4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
802152a8:	e13fff17 	ldw	r4,-4(fp)
802152ac:	02158280 	call	80215828 <alt_release_fd>
    if (rval < 0)
802152b0:	e0bffe17 	ldw	r2,-8(fp)
802152b4:	1000070e 	bge	r2,zero,802152d4 <close+0xa0>
    {
      ALT_ERRNO = -rval;
802152b8:	02151f80 	call	802151f8 <alt_get_errno>
802152bc:	1007883a 	mov	r3,r2
802152c0:	e0bffe17 	ldw	r2,-8(fp)
802152c4:	0085c83a 	sub	r2,zero,r2
802152c8:	18800015 	stw	r2,0(r3)
      return -1;
802152cc:	00bfffc4 	movi	r2,-1
802152d0:	00000706 	br	802152f0 <close+0xbc>
    }
    return 0;
802152d4:	0005883a 	mov	r2,zero
802152d8:	00000506 	br	802152f0 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
802152dc:	02151f80 	call	802151f8 <alt_get_errno>
802152e0:	1007883a 	mov	r3,r2
802152e4:	00801444 	movi	r2,81
802152e8:	18800015 	stw	r2,0(r3)
    return -1;
802152ec:	00bfffc4 	movi	r2,-1
  }
}
802152f0:	e037883a 	mov	sp,fp
802152f4:	dfc00117 	ldw	ra,4(sp)
802152f8:	df000017 	ldw	fp,0(sp)
802152fc:	dec00204 	addi	sp,sp,8
80215300:	f800283a 	ret

80215304 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
80215304:	deffff04 	addi	sp,sp,-4
80215308:	df000015 	stw	fp,0(sp)
8021530c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
80215310:	0001883a 	nop
80215314:	e037883a 	mov	sp,fp
80215318:	df000017 	ldw	fp,0(sp)
8021531c:	dec00104 	addi	sp,sp,4
80215320:	f800283a 	ret

80215324 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
80215324:	defffc04 	addi	sp,sp,-16
80215328:	df000315 	stw	fp,12(sp)
8021532c:	df000304 	addi	fp,sp,12
80215330:	e13ffd15 	stw	r4,-12(fp)
80215334:	e17ffe15 	stw	r5,-8(fp)
80215338:	e1bfff15 	stw	r6,-4(fp)
  return len;
8021533c:	e0bfff17 	ldw	r2,-4(fp)
}
80215340:	e037883a 	mov	sp,fp
80215344:	df000017 	ldw	fp,0(sp)
80215348:	dec00104 	addi	sp,sp,4
8021534c:	f800283a 	ret

80215350 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80215350:	defffe04 	addi	sp,sp,-8
80215354:	dfc00115 	stw	ra,4(sp)
80215358:	df000015 	stw	fp,0(sp)
8021535c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80215360:	d0a00c17 	ldw	r2,-32720(gp)
80215364:	10000326 	beq	r2,zero,80215374 <alt_get_errno+0x24>
80215368:	d0a00c17 	ldw	r2,-32720(gp)
8021536c:	103ee83a 	callr	r2
80215370:	00000106 	br	80215378 <alt_get_errno+0x28>
80215374:	d0a02004 	addi	r2,gp,-32640
}
80215378:	e037883a 	mov	sp,fp
8021537c:	dfc00117 	ldw	ra,4(sp)
80215380:	df000017 	ldw	fp,0(sp)
80215384:	dec00204 	addi	sp,sp,8
80215388:	f800283a 	ret

8021538c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
8021538c:	defffb04 	addi	sp,sp,-20
80215390:	dfc00415 	stw	ra,16(sp)
80215394:	df000315 	stw	fp,12(sp)
80215398:	df000304 	addi	fp,sp,12
8021539c:	e13ffe15 	stw	r4,-8(fp)
802153a0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
802153a4:	e0bffe17 	ldw	r2,-8(fp)
802153a8:	10000616 	blt	r2,zero,802153c4 <fstat+0x38>
802153ac:	e0bffe17 	ldw	r2,-8(fp)
802153b0:	10c00324 	muli	r3,r2,12
802153b4:	00a008b4 	movhi	r2,32802
802153b8:	10b01304 	addi	r2,r2,-16308
802153bc:	1885883a 	add	r2,r3,r2
802153c0:	00000106 	br	802153c8 <fstat+0x3c>
802153c4:	0005883a 	mov	r2,zero
802153c8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
802153cc:	e0bffd17 	ldw	r2,-12(fp)
802153d0:	10001026 	beq	r2,zero,80215414 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
802153d4:	e0bffd17 	ldw	r2,-12(fp)
802153d8:	10800017 	ldw	r2,0(r2)
802153dc:	10800817 	ldw	r2,32(r2)
802153e0:	10000726 	beq	r2,zero,80215400 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
802153e4:	e0bffd17 	ldw	r2,-12(fp)
802153e8:	10800017 	ldw	r2,0(r2)
802153ec:	10800817 	ldw	r2,32(r2)
802153f0:	e17fff17 	ldw	r5,-4(fp)
802153f4:	e13ffd17 	ldw	r4,-12(fp)
802153f8:	103ee83a 	callr	r2
802153fc:	00000a06 	br	80215428 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
80215400:	e0bfff17 	ldw	r2,-4(fp)
80215404:	00c80004 	movi	r3,8192
80215408:	10c00115 	stw	r3,4(r2)
      return 0;
8021540c:	0005883a 	mov	r2,zero
80215410:	00000506 	br	80215428 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
80215414:	02153500 	call	80215350 <alt_get_errno>
80215418:	1007883a 	mov	r3,r2
8021541c:	00801444 	movi	r2,81
80215420:	18800015 	stw	r2,0(r3)
    return -1;
80215424:	00bfffc4 	movi	r2,-1
  }
}
80215428:	e037883a 	mov	sp,fp
8021542c:	dfc00117 	ldw	ra,4(sp)
80215430:	df000017 	ldw	fp,0(sp)
80215434:	dec00204 	addi	sp,sp,8
80215438:	f800283a 	ret

8021543c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8021543c:	defffe04 	addi	sp,sp,-8
80215440:	dfc00115 	stw	ra,4(sp)
80215444:	df000015 	stw	fp,0(sp)
80215448:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8021544c:	d0a00c17 	ldw	r2,-32720(gp)
80215450:	10000326 	beq	r2,zero,80215460 <alt_get_errno+0x24>
80215454:	d0a00c17 	ldw	r2,-32720(gp)
80215458:	103ee83a 	callr	r2
8021545c:	00000106 	br	80215464 <alt_get_errno+0x28>
80215460:	d0a02004 	addi	r2,gp,-32640
}
80215464:	e037883a 	mov	sp,fp
80215468:	dfc00117 	ldw	ra,4(sp)
8021546c:	df000017 	ldw	fp,0(sp)
80215470:	dec00204 	addi	sp,sp,8
80215474:	f800283a 	ret

80215478 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
80215478:	deffed04 	addi	sp,sp,-76
8021547c:	dfc01215 	stw	ra,72(sp)
80215480:	df001115 	stw	fp,68(sp)
80215484:	df001104 	addi	fp,sp,68
80215488:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
8021548c:	e0bfff17 	ldw	r2,-4(fp)
80215490:	10000616 	blt	r2,zero,802154ac <isatty+0x34>
80215494:	e0bfff17 	ldw	r2,-4(fp)
80215498:	10c00324 	muli	r3,r2,12
8021549c:	00a008b4 	movhi	r2,32802
802154a0:	10b01304 	addi	r2,r2,-16308
802154a4:	1885883a 	add	r2,r3,r2
802154a8:	00000106 	br	802154b0 <isatty+0x38>
802154ac:	0005883a 	mov	r2,zero
802154b0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
802154b4:	e0bfef17 	ldw	r2,-68(fp)
802154b8:	10000e26 	beq	r2,zero,802154f4 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
802154bc:	e0bfef17 	ldw	r2,-68(fp)
802154c0:	10800017 	ldw	r2,0(r2)
802154c4:	10800817 	ldw	r2,32(r2)
802154c8:	1000021e 	bne	r2,zero,802154d4 <isatty+0x5c>
    {
      return 1;
802154cc:	00800044 	movi	r2,1
802154d0:	00000d06 	br	80215508 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
802154d4:	e0bff004 	addi	r2,fp,-64
802154d8:	100b883a 	mov	r5,r2
802154dc:	e13fff17 	ldw	r4,-4(fp)
802154e0:	021538c0 	call	8021538c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
802154e4:	e0bff117 	ldw	r2,-60(fp)
802154e8:	10880020 	cmpeqi	r2,r2,8192
802154ec:	10803fcc 	andi	r2,r2,255
802154f0:	00000506 	br	80215508 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
802154f4:	021543c0 	call	8021543c <alt_get_errno>
802154f8:	1007883a 	mov	r3,r2
802154fc:	00801444 	movi	r2,81
80215500:	18800015 	stw	r2,0(r3)
    return 0;
80215504:	0005883a 	mov	r2,zero
  }
}
80215508:	e037883a 	mov	sp,fp
8021550c:	dfc00117 	ldw	ra,4(sp)
80215510:	df000017 	ldw	fp,0(sp)
80215514:	dec00204 	addi	sp,sp,8
80215518:	f800283a 	ret

8021551c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8021551c:	defffe04 	addi	sp,sp,-8
80215520:	dfc00115 	stw	ra,4(sp)
80215524:	df000015 	stw	fp,0(sp)
80215528:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8021552c:	d0a00c17 	ldw	r2,-32720(gp)
80215530:	10000326 	beq	r2,zero,80215540 <alt_get_errno+0x24>
80215534:	d0a00c17 	ldw	r2,-32720(gp)
80215538:	103ee83a 	callr	r2
8021553c:	00000106 	br	80215544 <alt_get_errno+0x28>
80215540:	d0a02004 	addi	r2,gp,-32640
}
80215544:	e037883a 	mov	sp,fp
80215548:	dfc00117 	ldw	ra,4(sp)
8021554c:	df000017 	ldw	fp,0(sp)
80215550:	dec00204 	addi	sp,sp,8
80215554:	f800283a 	ret

80215558 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
80215558:	defff904 	addi	sp,sp,-28
8021555c:	dfc00615 	stw	ra,24(sp)
80215560:	df000515 	stw	fp,20(sp)
80215564:	df000504 	addi	fp,sp,20
80215568:	e13ffd15 	stw	r4,-12(fp)
8021556c:	e17ffe15 	stw	r5,-8(fp)
80215570:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
80215574:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
80215578:	e0bffd17 	ldw	r2,-12(fp)
8021557c:	10000616 	blt	r2,zero,80215598 <lseek+0x40>
80215580:	e0bffd17 	ldw	r2,-12(fp)
80215584:	10c00324 	muli	r3,r2,12
80215588:	00a008b4 	movhi	r2,32802
8021558c:	10b01304 	addi	r2,r2,-16308
80215590:	1885883a 	add	r2,r3,r2
80215594:	00000106 	br	8021559c <lseek+0x44>
80215598:	0005883a 	mov	r2,zero
8021559c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
802155a0:	e0bffc17 	ldw	r2,-16(fp)
802155a4:	10001026 	beq	r2,zero,802155e8 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
802155a8:	e0bffc17 	ldw	r2,-16(fp)
802155ac:	10800017 	ldw	r2,0(r2)
802155b0:	10800717 	ldw	r2,28(r2)
802155b4:	10000926 	beq	r2,zero,802155dc <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
802155b8:	e0bffc17 	ldw	r2,-16(fp)
802155bc:	10800017 	ldw	r2,0(r2)
802155c0:	10800717 	ldw	r2,28(r2)
802155c4:	e1bfff17 	ldw	r6,-4(fp)
802155c8:	e17ffe17 	ldw	r5,-8(fp)
802155cc:	e13ffc17 	ldw	r4,-16(fp)
802155d0:	103ee83a 	callr	r2
802155d4:	e0bffb15 	stw	r2,-20(fp)
802155d8:	00000506 	br	802155f0 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
802155dc:	00bfde84 	movi	r2,-134
802155e0:	e0bffb15 	stw	r2,-20(fp)
802155e4:	00000206 	br	802155f0 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
802155e8:	00bfebc4 	movi	r2,-81
802155ec:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
802155f0:	e0bffb17 	ldw	r2,-20(fp)
802155f4:	1000070e 	bge	r2,zero,80215614 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
802155f8:	021551c0 	call	8021551c <alt_get_errno>
802155fc:	1007883a 	mov	r3,r2
80215600:	e0bffb17 	ldw	r2,-20(fp)
80215604:	0085c83a 	sub	r2,zero,r2
80215608:	18800015 	stw	r2,0(r3)
    rc = -1;
8021560c:	00bfffc4 	movi	r2,-1
80215610:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
80215614:	e0bffb17 	ldw	r2,-20(fp)
}
80215618:	e037883a 	mov	sp,fp
8021561c:	dfc00117 	ldw	ra,4(sp)
80215620:	df000017 	ldw	fp,0(sp)
80215624:	dec00204 	addi	sp,sp,8
80215628:	f800283a 	ret

8021562c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
8021562c:	defffd04 	addi	sp,sp,-12
80215630:	dfc00215 	stw	ra,8(sp)
80215634:	df000115 	stw	fp,4(sp)
80215638:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
8021563c:	0009883a 	mov	r4,zero
80215640:	0215c780 	call	80215c78 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
80215644:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
80215648:	0215cb00 	call	80215cb0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
8021564c:	01a008b4 	movhi	r6,32802
80215650:	31ad3b04 	addi	r6,r6,-19220
80215654:	016008b4 	movhi	r5,32802
80215658:	296d3b04 	addi	r5,r5,-19220
8021565c:	012008b4 	movhi	r4,32802
80215660:	212d3b04 	addi	r4,r4,-19220
80215664:	02198540 	call	80219854 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
80215668:	02193a00 	call	802193a0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
8021566c:	012008b4 	movhi	r4,32802
80215670:	21250004 	addi	r4,r4,-27648
80215674:	0219ff80 	call	80219ff8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
80215678:	d0a02117 	ldw	r2,-32636(gp)
8021567c:	d0e02217 	ldw	r3,-32632(gp)
80215680:	d1202317 	ldw	r4,-32628(gp)
80215684:	200d883a 	mov	r6,r4
80215688:	180b883a 	mov	r5,r3
8021568c:	1009883a 	mov	r4,r2
80215690:	02047280 	call	80204728 <main>
80215694:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
80215698:	01000044 	movi	r4,1
8021569c:	02152340 	call	80215234 <close>
  exit (result);
802156a0:	e13fff17 	ldw	r4,-4(fp)
802156a4:	021a00c0 	call	8021a00c <exit>

802156a8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
802156a8:	defffe04 	addi	sp,sp,-8
802156ac:	df000115 	stw	fp,4(sp)
802156b0:	df000104 	addi	fp,sp,4
802156b4:	e13fff15 	stw	r4,-4(fp)
}
802156b8:	0001883a 	nop
802156bc:	e037883a 	mov	sp,fp
802156c0:	df000017 	ldw	fp,0(sp)
802156c4:	dec00104 	addi	sp,sp,4
802156c8:	f800283a 	ret

802156cc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
802156cc:	defffe04 	addi	sp,sp,-8
802156d0:	df000115 	stw	fp,4(sp)
802156d4:	df000104 	addi	fp,sp,4
802156d8:	e13fff15 	stw	r4,-4(fp)
}
802156dc:	0001883a 	nop
802156e0:	e037883a 	mov	sp,fp
802156e4:	df000017 	ldw	fp,0(sp)
802156e8:	dec00104 	addi	sp,sp,4
802156ec:	f800283a 	ret

802156f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
802156f0:	defffe04 	addi	sp,sp,-8
802156f4:	dfc00115 	stw	ra,4(sp)
802156f8:	df000015 	stw	fp,0(sp)
802156fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80215700:	d0a00c17 	ldw	r2,-32720(gp)
80215704:	10000326 	beq	r2,zero,80215714 <alt_get_errno+0x24>
80215708:	d0a00c17 	ldw	r2,-32720(gp)
8021570c:	103ee83a 	callr	r2
80215710:	00000106 	br	80215718 <alt_get_errno+0x28>
80215714:	d0a02004 	addi	r2,gp,-32640
}
80215718:	e037883a 	mov	sp,fp
8021571c:	dfc00117 	ldw	ra,4(sp)
80215720:	df000017 	ldw	fp,0(sp)
80215724:	dec00204 	addi	sp,sp,8
80215728:	f800283a 	ret

8021572c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
8021572c:	defff904 	addi	sp,sp,-28
80215730:	dfc00615 	stw	ra,24(sp)
80215734:	df000515 	stw	fp,20(sp)
80215738:	df000504 	addi	fp,sp,20
8021573c:	e13ffd15 	stw	r4,-12(fp)
80215740:	e17ffe15 	stw	r5,-8(fp)
80215744:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
80215748:	e0bffd17 	ldw	r2,-12(fp)
8021574c:	10000616 	blt	r2,zero,80215768 <read+0x3c>
80215750:	e0bffd17 	ldw	r2,-12(fp)
80215754:	10c00324 	muli	r3,r2,12
80215758:	00a008b4 	movhi	r2,32802
8021575c:	10b01304 	addi	r2,r2,-16308
80215760:	1885883a 	add	r2,r3,r2
80215764:	00000106 	br	8021576c <read+0x40>
80215768:	0005883a 	mov	r2,zero
8021576c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
80215770:	e0bffb17 	ldw	r2,-20(fp)
80215774:	10002226 	beq	r2,zero,80215800 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
80215778:	e0bffb17 	ldw	r2,-20(fp)
8021577c:	10800217 	ldw	r2,8(r2)
80215780:	108000cc 	andi	r2,r2,3
80215784:	10800060 	cmpeqi	r2,r2,1
80215788:	1000181e 	bne	r2,zero,802157ec <read+0xc0>
        (fd->dev->read))
8021578c:	e0bffb17 	ldw	r2,-20(fp)
80215790:	10800017 	ldw	r2,0(r2)
80215794:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
80215798:	10001426 	beq	r2,zero,802157ec <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
8021579c:	e0bffb17 	ldw	r2,-20(fp)
802157a0:	10800017 	ldw	r2,0(r2)
802157a4:	10800517 	ldw	r2,20(r2)
802157a8:	e0ffff17 	ldw	r3,-4(fp)
802157ac:	180d883a 	mov	r6,r3
802157b0:	e17ffe17 	ldw	r5,-8(fp)
802157b4:	e13ffb17 	ldw	r4,-20(fp)
802157b8:	103ee83a 	callr	r2
802157bc:	e0bffc15 	stw	r2,-16(fp)
802157c0:	e0bffc17 	ldw	r2,-16(fp)
802157c4:	1000070e 	bge	r2,zero,802157e4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
802157c8:	02156f00 	call	802156f0 <alt_get_errno>
802157cc:	1007883a 	mov	r3,r2
802157d0:	e0bffc17 	ldw	r2,-16(fp)
802157d4:	0085c83a 	sub	r2,zero,r2
802157d8:	18800015 	stw	r2,0(r3)
          return -1;
802157dc:	00bfffc4 	movi	r2,-1
802157e0:	00000c06 	br	80215814 <read+0xe8>
        }
        return rval;
802157e4:	e0bffc17 	ldw	r2,-16(fp)
802157e8:	00000a06 	br	80215814 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
802157ec:	02156f00 	call	802156f0 <alt_get_errno>
802157f0:	1007883a 	mov	r3,r2
802157f4:	00800344 	movi	r2,13
802157f8:	18800015 	stw	r2,0(r3)
802157fc:	00000406 	br	80215810 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
80215800:	02156f00 	call	802156f0 <alt_get_errno>
80215804:	1007883a 	mov	r3,r2
80215808:	00801444 	movi	r2,81
8021580c:	18800015 	stw	r2,0(r3)
  }
  return -1;
80215810:	00bfffc4 	movi	r2,-1
}
80215814:	e037883a 	mov	sp,fp
80215818:	dfc00117 	ldw	ra,4(sp)
8021581c:	df000017 	ldw	fp,0(sp)
80215820:	dec00204 	addi	sp,sp,8
80215824:	f800283a 	ret

80215828 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
80215828:	defffe04 	addi	sp,sp,-8
8021582c:	df000115 	stw	fp,4(sp)
80215830:	df000104 	addi	fp,sp,4
80215834:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
80215838:	e0bfff17 	ldw	r2,-4(fp)
8021583c:	108000d0 	cmplti	r2,r2,3
80215840:	10000d1e 	bne	r2,zero,80215878 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
80215844:	00a008b4 	movhi	r2,32802
80215848:	10b01304 	addi	r2,r2,-16308
8021584c:	e0ffff17 	ldw	r3,-4(fp)
80215850:	18c00324 	muli	r3,r3,12
80215854:	10c5883a 	add	r2,r2,r3
80215858:	10800204 	addi	r2,r2,8
8021585c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
80215860:	00a008b4 	movhi	r2,32802
80215864:	10b01304 	addi	r2,r2,-16308
80215868:	e0ffff17 	ldw	r3,-4(fp)
8021586c:	18c00324 	muli	r3,r3,12
80215870:	10c5883a 	add	r2,r2,r3
80215874:	10000015 	stw	zero,0(r2)
  }
}
80215878:	0001883a 	nop
8021587c:	e037883a 	mov	sp,fp
80215880:	df000017 	ldw	fp,0(sp)
80215884:	dec00104 	addi	sp,sp,4
80215888:	f800283a 	ret

8021588c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
8021588c:	defff904 	addi	sp,sp,-28
80215890:	df000615 	stw	fp,24(sp)
80215894:	df000604 	addi	fp,sp,24
80215898:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8021589c:	0005303a 	rdctl	r2,status
802158a0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
802158a4:	e0fffe17 	ldw	r3,-8(fp)
802158a8:	00bfff84 	movi	r2,-2
802158ac:	1884703a 	and	r2,r3,r2
802158b0:	1001703a 	wrctl	status,r2
  
  return context;
802158b4:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
802158b8:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
802158bc:	d0a00d17 	ldw	r2,-32716(gp)
802158c0:	10c000c4 	addi	r3,r2,3
802158c4:	00bfff04 	movi	r2,-4
802158c8:	1884703a 	and	r2,r3,r2
802158cc:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
802158d0:	d0e00d17 	ldw	r3,-32716(gp)
802158d4:	e0bfff17 	ldw	r2,-4(fp)
802158d8:	1887883a 	add	r3,r3,r2
802158dc:	00a00b74 	movhi	r2,32813
802158e0:	10920004 	addi	r2,r2,18432
802158e4:	10c0062e 	bgeu	r2,r3,80215900 <sbrk+0x74>
802158e8:	e0bffb17 	ldw	r2,-20(fp)
802158ec:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
802158f0:	e0bffa17 	ldw	r2,-24(fp)
802158f4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
802158f8:	00bfffc4 	movi	r2,-1
802158fc:	00000b06 	br	8021592c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
80215900:	d0a00d17 	ldw	r2,-32716(gp)
80215904:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
80215908:	d0e00d17 	ldw	r3,-32716(gp)
8021590c:	e0bfff17 	ldw	r2,-4(fp)
80215910:	1885883a 	add	r2,r3,r2
80215914:	d0a00d15 	stw	r2,-32716(gp)
80215918:	e0bffb17 	ldw	r2,-20(fp)
8021591c:	e0bffc15 	stw	r2,-16(fp)
80215920:	e0bffc17 	ldw	r2,-16(fp)
80215924:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
80215928:	e0bffd17 	ldw	r2,-12(fp)
} 
8021592c:	e037883a 	mov	sp,fp
80215930:	df000017 	ldw	fp,0(sp)
80215934:	dec00104 	addi	sp,sp,4
80215938:	f800283a 	ret

8021593c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
8021593c:	defffa04 	addi	sp,sp,-24
80215940:	df000515 	stw	fp,20(sp)
80215944:	df000504 	addi	fp,sp,20
80215948:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8021594c:	0005303a 	rdctl	r2,status
80215950:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80215954:	e0fffc17 	ldw	r3,-16(fp)
80215958:	00bfff84 	movi	r2,-2
8021595c:	1884703a 	and	r2,r3,r2
80215960:	1001703a 	wrctl	status,r2
  
  return context;
80215964:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
80215968:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
8021596c:	e0bfff17 	ldw	r2,-4(fp)
80215970:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
80215974:	e0bffd17 	ldw	r2,-12(fp)
80215978:	10800017 	ldw	r2,0(r2)
8021597c:	e0fffd17 	ldw	r3,-12(fp)
80215980:	18c00117 	ldw	r3,4(r3)
80215984:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
80215988:	e0bffd17 	ldw	r2,-12(fp)
8021598c:	10800117 	ldw	r2,4(r2)
80215990:	e0fffd17 	ldw	r3,-12(fp)
80215994:	18c00017 	ldw	r3,0(r3)
80215998:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
8021599c:	e0bffd17 	ldw	r2,-12(fp)
802159a0:	e0fffd17 	ldw	r3,-12(fp)
802159a4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
802159a8:	e0bffd17 	ldw	r2,-12(fp)
802159ac:	e0fffd17 	ldw	r3,-12(fp)
802159b0:	10c00015 	stw	r3,0(r2)
802159b4:	e0bffb17 	ldw	r2,-20(fp)
802159b8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
802159bc:	e0bffe17 	ldw	r2,-8(fp)
802159c0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
802159c4:	0001883a 	nop
802159c8:	e037883a 	mov	sp,fp
802159cc:	df000017 	ldw	fp,0(sp)
802159d0:	dec00104 	addi	sp,sp,4
802159d4:	f800283a 	ret

802159d8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
802159d8:	defffb04 	addi	sp,sp,-20
802159dc:	dfc00415 	stw	ra,16(sp)
802159e0:	df000315 	stw	fp,12(sp)
802159e4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
802159e8:	d0a00e17 	ldw	r2,-32712(gp)
802159ec:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
802159f0:	d0a02517 	ldw	r2,-32620(gp)
802159f4:	10800044 	addi	r2,r2,1
802159f8:	d0a02515 	stw	r2,-32620(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
802159fc:	00002e06 	br	80215ab8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
80215a00:	e0bffd17 	ldw	r2,-12(fp)
80215a04:	10800017 	ldw	r2,0(r2)
80215a08:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
80215a0c:	e0bffd17 	ldw	r2,-12(fp)
80215a10:	10800403 	ldbu	r2,16(r2)
80215a14:	10803fcc 	andi	r2,r2,255
80215a18:	10000426 	beq	r2,zero,80215a2c <alt_tick+0x54>
80215a1c:	d0a02517 	ldw	r2,-32620(gp)
80215a20:	1000021e 	bne	r2,zero,80215a2c <alt_tick+0x54>
    {
      alarm->rollover = 0;
80215a24:	e0bffd17 	ldw	r2,-12(fp)
80215a28:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
80215a2c:	e0bffd17 	ldw	r2,-12(fp)
80215a30:	10800217 	ldw	r2,8(r2)
80215a34:	d0e02517 	ldw	r3,-32620(gp)
80215a38:	18801d36 	bltu	r3,r2,80215ab0 <alt_tick+0xd8>
80215a3c:	e0bffd17 	ldw	r2,-12(fp)
80215a40:	10800403 	ldbu	r2,16(r2)
80215a44:	10803fcc 	andi	r2,r2,255
80215a48:	1000191e 	bne	r2,zero,80215ab0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
80215a4c:	e0bffd17 	ldw	r2,-12(fp)
80215a50:	10800317 	ldw	r2,12(r2)
80215a54:	e0fffd17 	ldw	r3,-12(fp)
80215a58:	18c00517 	ldw	r3,20(r3)
80215a5c:	1809883a 	mov	r4,r3
80215a60:	103ee83a 	callr	r2
80215a64:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
80215a68:	e0bfff17 	ldw	r2,-4(fp)
80215a6c:	1000031e 	bne	r2,zero,80215a7c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
80215a70:	e13ffd17 	ldw	r4,-12(fp)
80215a74:	021593c0 	call	8021593c <alt_alarm_stop>
80215a78:	00000d06 	br	80215ab0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
80215a7c:	e0bffd17 	ldw	r2,-12(fp)
80215a80:	10c00217 	ldw	r3,8(r2)
80215a84:	e0bfff17 	ldw	r2,-4(fp)
80215a88:	1887883a 	add	r3,r3,r2
80215a8c:	e0bffd17 	ldw	r2,-12(fp)
80215a90:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
80215a94:	e0bffd17 	ldw	r2,-12(fp)
80215a98:	10c00217 	ldw	r3,8(r2)
80215a9c:	d0a02517 	ldw	r2,-32620(gp)
80215aa0:	1880032e 	bgeu	r3,r2,80215ab0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
80215aa4:	e0bffd17 	ldw	r2,-12(fp)
80215aa8:	00c00044 	movi	r3,1
80215aac:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
80215ab0:	e0bffe17 	ldw	r2,-8(fp)
80215ab4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
80215ab8:	e0fffd17 	ldw	r3,-12(fp)
80215abc:	d0a00e04 	addi	r2,gp,-32712
80215ac0:	18bfcf1e 	bne	r3,r2,80215a00 <__reset+0xfa1f5a00>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
80215ac4:	0001883a 	nop
}
80215ac8:	0001883a 	nop
80215acc:	e037883a 	mov	sp,fp
80215ad0:	dfc00117 	ldw	ra,4(sp)
80215ad4:	df000017 	ldw	fp,0(sp)
80215ad8:	dec00204 	addi	sp,sp,8
80215adc:	f800283a 	ret

80215ae0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
80215ae0:	defffd04 	addi	sp,sp,-12
80215ae4:	dfc00215 	stw	ra,8(sp)
80215ae8:	df000115 	stw	fp,4(sp)
80215aec:	df000104 	addi	fp,sp,4
80215af0:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
80215af4:	e13fff17 	ldw	r4,-4(fp)
80215af8:	02150d00 	call	802150d0 <alt_busy_sleep>
}
80215afc:	e037883a 	mov	sp,fp
80215b00:	dfc00117 	ldw	ra,4(sp)
80215b04:	df000017 	ldw	fp,0(sp)
80215b08:	dec00204 	addi	sp,sp,8
80215b0c:	f800283a 	ret

80215b10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80215b10:	defffe04 	addi	sp,sp,-8
80215b14:	dfc00115 	stw	ra,4(sp)
80215b18:	df000015 	stw	fp,0(sp)
80215b1c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80215b20:	d0a00c17 	ldw	r2,-32720(gp)
80215b24:	10000326 	beq	r2,zero,80215b34 <alt_get_errno+0x24>
80215b28:	d0a00c17 	ldw	r2,-32720(gp)
80215b2c:	103ee83a 	callr	r2
80215b30:	00000106 	br	80215b38 <alt_get_errno+0x28>
80215b34:	d0a02004 	addi	r2,gp,-32640
}
80215b38:	e037883a 	mov	sp,fp
80215b3c:	dfc00117 	ldw	ra,4(sp)
80215b40:	df000017 	ldw	fp,0(sp)
80215b44:	dec00204 	addi	sp,sp,8
80215b48:	f800283a 	ret

80215b4c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
80215b4c:	defff904 	addi	sp,sp,-28
80215b50:	dfc00615 	stw	ra,24(sp)
80215b54:	df000515 	stw	fp,20(sp)
80215b58:	df000504 	addi	fp,sp,20
80215b5c:	e13ffd15 	stw	r4,-12(fp)
80215b60:	e17ffe15 	stw	r5,-8(fp)
80215b64:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
80215b68:	e0bffd17 	ldw	r2,-12(fp)
80215b6c:	10000616 	blt	r2,zero,80215b88 <write+0x3c>
80215b70:	e0bffd17 	ldw	r2,-12(fp)
80215b74:	10c00324 	muli	r3,r2,12
80215b78:	00a008b4 	movhi	r2,32802
80215b7c:	10b01304 	addi	r2,r2,-16308
80215b80:	1885883a 	add	r2,r3,r2
80215b84:	00000106 	br	80215b8c <write+0x40>
80215b88:	0005883a 	mov	r2,zero
80215b8c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
80215b90:	e0bffb17 	ldw	r2,-20(fp)
80215b94:	10002126 	beq	r2,zero,80215c1c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
80215b98:	e0bffb17 	ldw	r2,-20(fp)
80215b9c:	10800217 	ldw	r2,8(r2)
80215ba0:	108000cc 	andi	r2,r2,3
80215ba4:	10001826 	beq	r2,zero,80215c08 <write+0xbc>
80215ba8:	e0bffb17 	ldw	r2,-20(fp)
80215bac:	10800017 	ldw	r2,0(r2)
80215bb0:	10800617 	ldw	r2,24(r2)
80215bb4:	10001426 	beq	r2,zero,80215c08 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
80215bb8:	e0bffb17 	ldw	r2,-20(fp)
80215bbc:	10800017 	ldw	r2,0(r2)
80215bc0:	10800617 	ldw	r2,24(r2)
80215bc4:	e0ffff17 	ldw	r3,-4(fp)
80215bc8:	180d883a 	mov	r6,r3
80215bcc:	e17ffe17 	ldw	r5,-8(fp)
80215bd0:	e13ffb17 	ldw	r4,-20(fp)
80215bd4:	103ee83a 	callr	r2
80215bd8:	e0bffc15 	stw	r2,-16(fp)
80215bdc:	e0bffc17 	ldw	r2,-16(fp)
80215be0:	1000070e 	bge	r2,zero,80215c00 <write+0xb4>
      {
        ALT_ERRNO = -rval;
80215be4:	0215b100 	call	80215b10 <alt_get_errno>
80215be8:	1007883a 	mov	r3,r2
80215bec:	e0bffc17 	ldw	r2,-16(fp)
80215bf0:	0085c83a 	sub	r2,zero,r2
80215bf4:	18800015 	stw	r2,0(r3)
        return -1;
80215bf8:	00bfffc4 	movi	r2,-1
80215bfc:	00000c06 	br	80215c30 <write+0xe4>
      }
      return rval;
80215c00:	e0bffc17 	ldw	r2,-16(fp)
80215c04:	00000a06 	br	80215c30 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
80215c08:	0215b100 	call	80215b10 <alt_get_errno>
80215c0c:	1007883a 	mov	r3,r2
80215c10:	00800344 	movi	r2,13
80215c14:	18800015 	stw	r2,0(r3)
80215c18:	00000406 	br	80215c2c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
80215c1c:	0215b100 	call	80215b10 <alt_get_errno>
80215c20:	1007883a 	mov	r3,r2
80215c24:	00801444 	movi	r2,81
80215c28:	18800015 	stw	r2,0(r3)
  }
  return -1;
80215c2c:	00bfffc4 	movi	r2,-1
}
80215c30:	e037883a 	mov	sp,fp
80215c34:	dfc00117 	ldw	ra,4(sp)
80215c38:	df000017 	ldw	fp,0(sp)
80215c3c:	dec00204 	addi	sp,sp,8
80215c40:	f800283a 	ret

80215c44 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
80215c44:	defffd04 	addi	sp,sp,-12
80215c48:	dfc00215 	stw	ra,8(sp)
80215c4c:	df000115 	stw	fp,4(sp)
80215c50:	df000104 	addi	fp,sp,4
80215c54:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
80215c58:	d1600904 	addi	r5,gp,-32732
80215c5c:	e13fff17 	ldw	r4,-4(fp)
80215c60:	02192fc0 	call	802192fc <alt_dev_llist_insert>
}
80215c64:	e037883a 	mov	sp,fp
80215c68:	dfc00117 	ldw	ra,4(sp)
80215c6c:	df000017 	ldw	fp,0(sp)
80215c70:	dec00204 	addi	sp,sp,8
80215c74:	f800283a 	ret

80215c78 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
80215c78:	defffd04 	addi	sp,sp,-12
80215c7c:	dfc00215 	stw	ra,8(sp)
80215c80:	df000115 	stw	fp,4(sp)
80215c84:	df000104 	addi	fp,sp,4
80215c88:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
80215c8c:	0219d8c0 	call	80219d8c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
80215c90:	00800044 	movi	r2,1
80215c94:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
80215c98:	0001883a 	nop
80215c9c:	e037883a 	mov	sp,fp
80215ca0:	dfc00117 	ldw	ra,4(sp)
80215ca4:	df000017 	ldw	fp,0(sp)
80215ca8:	dec00204 	addi	sp,sp,8
80215cac:	f800283a 	ret

80215cb0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
80215cb0:	defffe04 	addi	sp,sp,-8
80215cb4:	dfc00115 	stw	ra,4(sp)
80215cb8:	df000015 	stw	fp,0(sp)
80215cbc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_1MS, timer_1ms);
80215cc0:	01c0fa04 	movi	r7,1000
80215cc4:	01800204 	movi	r6,8
80215cc8:	000b883a 	mov	r5,zero
80215ccc:	01204034 	movhi	r4,33024
80215cd0:	21022004 	addi	r4,r4,2176
80215cd4:	02168780 	call	80216878 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1US, timer_1us);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
80215cd8:	018001c4 	movi	r6,7
80215cdc:	000b883a 	mov	r5,zero
80215ce0:	012008b4 	movhi	r4,32802
80215ce4:	21307e04 	addi	r4,r4,-15880
80215ce8:	0215efc0 	call	80215efc <altera_avalon_jtag_uart_init>
80215cec:	012008b4 	movhi	r4,32802
80215cf0:	21307404 	addi	r4,r4,-15920
80215cf4:	0215c440 	call	80215c44 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
80215cf8:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( RS232_UART, rs232_uart);
80215cfc:	018002c4 	movi	r6,11
80215d00:	000b883a 	mov	r5,zero
80215d04:	012008b4 	movhi	r4,32802
80215d08:	21349604 	addi	r4,r4,-11688
80215d0c:	0216a040 	call	80216a04 <altera_avalon_uart_init>
80215d10:	012008b4 	movhi	r4,32802
80215d14:	21348c04 	addi	r4,r4,-11728
80215d18:	0215c440 	call	80215c44 <alt_dev_reg>
    ALTERA_MSGDMA_INIT ( DMA_DDR_M1, dma_DDR_M1);
80215d1c:	00a008b4 	movhi	r2,32802
80215d20:	10b4c004 	addi	r2,r2,-11520
80215d24:	10c00717 	ldw	r3,28(r2)
80215d28:	00a008b4 	movhi	r2,32802
80215d2c:	10b4c004 	addi	r2,r2,-11520
80215d30:	10800817 	ldw	r2,32(r2)
80215d34:	100d883a 	mov	r6,r2
80215d38:	180b883a 	mov	r5,r3
80215d3c:	012008b4 	movhi	r4,32802
80215d40:	2134c004 	addi	r4,r4,-11520
80215d44:	0218ebc0 	call	80218ebc <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( DMA_DDR_M2, dma_DDR_M2);
80215d48:	00a008b4 	movhi	r2,32802
80215d4c:	10b4d804 	addi	r2,r2,-11424
80215d50:	10c00717 	ldw	r3,28(r2)
80215d54:	00a008b4 	movhi	r2,32802
80215d58:	10b4d804 	addi	r2,r2,-11424
80215d5c:	10800817 	ldw	r2,32(r2)
80215d60:	100d883a 	mov	r6,r2
80215d64:	180b883a 	mov	r5,r3
80215d68:	012008b4 	movhi	r4,32802
80215d6c:	2134d804 	addi	r4,r4,-11424
80215d70:	0218ebc0 	call	80218ebc <alt_msgdma_init>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
80215d74:	012008b4 	movhi	r4,32802
80215d78:	2134f004 	addi	r4,r4,-11328
80215d7c:	0215c440 	call	80215c44 <alt_dev_reg>
}
80215d80:	0001883a 	nop
80215d84:	e037883a 	mov	sp,fp
80215d88:	dfc00117 	ldw	ra,4(sp)
80215d8c:	df000017 	ldw	fp,0(sp)
80215d90:	dec00204 	addi	sp,sp,8
80215d94:	f800283a 	ret

80215d98 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
80215d98:	defffa04 	addi	sp,sp,-24
80215d9c:	dfc00515 	stw	ra,20(sp)
80215da0:	df000415 	stw	fp,16(sp)
80215da4:	df000404 	addi	fp,sp,16
80215da8:	e13ffd15 	stw	r4,-12(fp)
80215dac:	e17ffe15 	stw	r5,-8(fp)
80215db0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
80215db4:	e0bffd17 	ldw	r2,-12(fp)
80215db8:	10800017 	ldw	r2,0(r2)
80215dbc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
80215dc0:	e0bffc17 	ldw	r2,-16(fp)
80215dc4:	10c00a04 	addi	r3,r2,40
80215dc8:	e0bffd17 	ldw	r2,-12(fp)
80215dcc:	10800217 	ldw	r2,8(r2)
80215dd0:	100f883a 	mov	r7,r2
80215dd4:	e1bfff17 	ldw	r6,-4(fp)
80215dd8:	e17ffe17 	ldw	r5,-8(fp)
80215ddc:	1809883a 	mov	r4,r3
80215de0:	02163c00 	call	802163c0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
80215de4:	e037883a 	mov	sp,fp
80215de8:	dfc00117 	ldw	ra,4(sp)
80215dec:	df000017 	ldw	fp,0(sp)
80215df0:	dec00204 	addi	sp,sp,8
80215df4:	f800283a 	ret

80215df8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
80215df8:	defffa04 	addi	sp,sp,-24
80215dfc:	dfc00515 	stw	ra,20(sp)
80215e00:	df000415 	stw	fp,16(sp)
80215e04:	df000404 	addi	fp,sp,16
80215e08:	e13ffd15 	stw	r4,-12(fp)
80215e0c:	e17ffe15 	stw	r5,-8(fp)
80215e10:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
80215e14:	e0bffd17 	ldw	r2,-12(fp)
80215e18:	10800017 	ldw	r2,0(r2)
80215e1c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
80215e20:	e0bffc17 	ldw	r2,-16(fp)
80215e24:	10c00a04 	addi	r3,r2,40
80215e28:	e0bffd17 	ldw	r2,-12(fp)
80215e2c:	10800217 	ldw	r2,8(r2)
80215e30:	100f883a 	mov	r7,r2
80215e34:	e1bfff17 	ldw	r6,-4(fp)
80215e38:	e17ffe17 	ldw	r5,-8(fp)
80215e3c:	1809883a 	mov	r4,r3
80215e40:	02165dc0 	call	802165dc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
80215e44:	e037883a 	mov	sp,fp
80215e48:	dfc00117 	ldw	ra,4(sp)
80215e4c:	df000017 	ldw	fp,0(sp)
80215e50:	dec00204 	addi	sp,sp,8
80215e54:	f800283a 	ret

80215e58 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
80215e58:	defffc04 	addi	sp,sp,-16
80215e5c:	dfc00315 	stw	ra,12(sp)
80215e60:	df000215 	stw	fp,8(sp)
80215e64:	df000204 	addi	fp,sp,8
80215e68:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
80215e6c:	e0bfff17 	ldw	r2,-4(fp)
80215e70:	10800017 	ldw	r2,0(r2)
80215e74:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
80215e78:	e0bffe17 	ldw	r2,-8(fp)
80215e7c:	10c00a04 	addi	r3,r2,40
80215e80:	e0bfff17 	ldw	r2,-4(fp)
80215e84:	10800217 	ldw	r2,8(r2)
80215e88:	100b883a 	mov	r5,r2
80215e8c:	1809883a 	mov	r4,r3
80215e90:	02162680 	call	80216268 <altera_avalon_jtag_uart_close>
}
80215e94:	e037883a 	mov	sp,fp
80215e98:	dfc00117 	ldw	ra,4(sp)
80215e9c:	df000017 	ldw	fp,0(sp)
80215ea0:	dec00204 	addi	sp,sp,8
80215ea4:	f800283a 	ret

80215ea8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
80215ea8:	defffa04 	addi	sp,sp,-24
80215eac:	dfc00515 	stw	ra,20(sp)
80215eb0:	df000415 	stw	fp,16(sp)
80215eb4:	df000404 	addi	fp,sp,16
80215eb8:	e13ffd15 	stw	r4,-12(fp)
80215ebc:	e17ffe15 	stw	r5,-8(fp)
80215ec0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
80215ec4:	e0bffd17 	ldw	r2,-12(fp)
80215ec8:	10800017 	ldw	r2,0(r2)
80215ecc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
80215ed0:	e0bffc17 	ldw	r2,-16(fp)
80215ed4:	10800a04 	addi	r2,r2,40
80215ed8:	e1bfff17 	ldw	r6,-4(fp)
80215edc:	e17ffe17 	ldw	r5,-8(fp)
80215ee0:	1009883a 	mov	r4,r2
80215ee4:	02162d00 	call	802162d0 <altera_avalon_jtag_uart_ioctl>
}
80215ee8:	e037883a 	mov	sp,fp
80215eec:	dfc00117 	ldw	ra,4(sp)
80215ef0:	df000017 	ldw	fp,0(sp)
80215ef4:	dec00204 	addi	sp,sp,8
80215ef8:	f800283a 	ret

80215efc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
80215efc:	defffa04 	addi	sp,sp,-24
80215f00:	dfc00515 	stw	ra,20(sp)
80215f04:	df000415 	stw	fp,16(sp)
80215f08:	df000404 	addi	fp,sp,16
80215f0c:	e13ffd15 	stw	r4,-12(fp)
80215f10:	e17ffe15 	stw	r5,-8(fp)
80215f14:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
80215f18:	e0bffd17 	ldw	r2,-12(fp)
80215f1c:	00c00044 	movi	r3,1
80215f20:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
80215f24:	e0bffd17 	ldw	r2,-12(fp)
80215f28:	10800017 	ldw	r2,0(r2)
80215f2c:	10800104 	addi	r2,r2,4
80215f30:	1007883a 	mov	r3,r2
80215f34:	e0bffd17 	ldw	r2,-12(fp)
80215f38:	10800817 	ldw	r2,32(r2)
80215f3c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
80215f40:	e0bffe17 	ldw	r2,-8(fp)
80215f44:	e0ffff17 	ldw	r3,-4(fp)
80215f48:	d8000015 	stw	zero,0(sp)
80215f4c:	e1fffd17 	ldw	r7,-12(fp)
80215f50:	01a00874 	movhi	r6,32801
80215f54:	3197ef04 	addi	r6,r6,24508
80215f58:	180b883a 	mov	r5,r3
80215f5c:	1009883a 	mov	r4,r2
80215f60:	02194f00 	call	802194f0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
80215f64:	e0bffd17 	ldw	r2,-12(fp)
80215f68:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
80215f6c:	e0bffd17 	ldw	r2,-12(fp)
80215f70:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
80215f74:	d0e02417 	ldw	r3,-32624(gp)
80215f78:	e1fffd17 	ldw	r7,-12(fp)
80215f7c:	01a00874 	movhi	r6,32801
80215f80:	31987204 	addi	r6,r6,25032
80215f84:	180b883a 	mov	r5,r3
80215f88:	1009883a 	mov	r4,r2
80215f8c:	021916c0 	call	8021916c <alt_alarm_start>
80215f90:	1000040e 	bge	r2,zero,80215fa4 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
80215f94:	e0fffd17 	ldw	r3,-12(fp)
80215f98:	00a00034 	movhi	r2,32768
80215f9c:	10bfffc4 	addi	r2,r2,-1
80215fa0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
80215fa4:	0001883a 	nop
80215fa8:	e037883a 	mov	sp,fp
80215fac:	dfc00117 	ldw	ra,4(sp)
80215fb0:	df000017 	ldw	fp,0(sp)
80215fb4:	dec00204 	addi	sp,sp,8
80215fb8:	f800283a 	ret

80215fbc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
80215fbc:	defff804 	addi	sp,sp,-32
80215fc0:	df000715 	stw	fp,28(sp)
80215fc4:	df000704 	addi	fp,sp,28
80215fc8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
80215fcc:	e0bfff17 	ldw	r2,-4(fp)
80215fd0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
80215fd4:	e0bffb17 	ldw	r2,-20(fp)
80215fd8:	10800017 	ldw	r2,0(r2)
80215fdc:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
80215fe0:	e0bffc17 	ldw	r2,-16(fp)
80215fe4:	10800104 	addi	r2,r2,4
80215fe8:	10800037 	ldwio	r2,0(r2)
80215fec:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
80215ff0:	e0bffd17 	ldw	r2,-12(fp)
80215ff4:	1080c00c 	andi	r2,r2,768
80215ff8:	10006d26 	beq	r2,zero,802161b0 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
80215ffc:	e0bffd17 	ldw	r2,-12(fp)
80216000:	1080400c 	andi	r2,r2,256
80216004:	10003526 	beq	r2,zero,802160dc <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
80216008:	00800074 	movhi	r2,1
8021600c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
80216010:	e0bffb17 	ldw	r2,-20(fp)
80216014:	10800a17 	ldw	r2,40(r2)
80216018:	10800044 	addi	r2,r2,1
8021601c:	1081ffcc 	andi	r2,r2,2047
80216020:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
80216024:	e0bffb17 	ldw	r2,-20(fp)
80216028:	10c00b17 	ldw	r3,44(r2)
8021602c:	e0bffe17 	ldw	r2,-8(fp)
80216030:	18801526 	beq	r3,r2,80216088 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
80216034:	e0bffc17 	ldw	r2,-16(fp)
80216038:	10800037 	ldwio	r2,0(r2)
8021603c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
80216040:	e0bff917 	ldw	r2,-28(fp)
80216044:	10a0000c 	andi	r2,r2,32768
80216048:	10001126 	beq	r2,zero,80216090 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
8021604c:	e0bffb17 	ldw	r2,-20(fp)
80216050:	10800a17 	ldw	r2,40(r2)
80216054:	e0fff917 	ldw	r3,-28(fp)
80216058:	1809883a 	mov	r4,r3
8021605c:	e0fffb17 	ldw	r3,-20(fp)
80216060:	1885883a 	add	r2,r3,r2
80216064:	10800e04 	addi	r2,r2,56
80216068:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
8021606c:	e0bffb17 	ldw	r2,-20(fp)
80216070:	10800a17 	ldw	r2,40(r2)
80216074:	10800044 	addi	r2,r2,1
80216078:	10c1ffcc 	andi	r3,r2,2047
8021607c:	e0bffb17 	ldw	r2,-20(fp)
80216080:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
80216084:	003fe206 	br	80216010 <__reset+0xfa1f6010>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
80216088:	0001883a 	nop
8021608c:	00000106 	br	80216094 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
80216090:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
80216094:	e0bff917 	ldw	r2,-28(fp)
80216098:	10bfffec 	andhi	r2,r2,65535
8021609c:	10000f26 	beq	r2,zero,802160dc <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
802160a0:	e0bffb17 	ldw	r2,-20(fp)
802160a4:	10c00817 	ldw	r3,32(r2)
802160a8:	00bfff84 	movi	r2,-2
802160ac:	1886703a 	and	r3,r3,r2
802160b0:	e0bffb17 	ldw	r2,-20(fp)
802160b4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
802160b8:	e0bffc17 	ldw	r2,-16(fp)
802160bc:	10800104 	addi	r2,r2,4
802160c0:	1007883a 	mov	r3,r2
802160c4:	e0bffb17 	ldw	r2,-20(fp)
802160c8:	10800817 	ldw	r2,32(r2)
802160cc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
802160d0:	e0bffc17 	ldw	r2,-16(fp)
802160d4:	10800104 	addi	r2,r2,4
802160d8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
802160dc:	e0bffd17 	ldw	r2,-12(fp)
802160e0:	1080800c 	andi	r2,r2,512
802160e4:	103fbe26 	beq	r2,zero,80215fe0 <__reset+0xfa1f5fe0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
802160e8:	e0bffd17 	ldw	r2,-12(fp)
802160ec:	1004d43a 	srli	r2,r2,16
802160f0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
802160f4:	00001406 	br	80216148 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
802160f8:	e0bffc17 	ldw	r2,-16(fp)
802160fc:	e0fffb17 	ldw	r3,-20(fp)
80216100:	18c00d17 	ldw	r3,52(r3)
80216104:	e13ffb17 	ldw	r4,-20(fp)
80216108:	20c7883a 	add	r3,r4,r3
8021610c:	18c20e04 	addi	r3,r3,2104
80216110:	18c00003 	ldbu	r3,0(r3)
80216114:	18c03fcc 	andi	r3,r3,255
80216118:	18c0201c 	xori	r3,r3,128
8021611c:	18ffe004 	addi	r3,r3,-128
80216120:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
80216124:	e0bffb17 	ldw	r2,-20(fp)
80216128:	10800d17 	ldw	r2,52(r2)
8021612c:	10800044 	addi	r2,r2,1
80216130:	10c1ffcc 	andi	r3,r2,2047
80216134:	e0bffb17 	ldw	r2,-20(fp)
80216138:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
8021613c:	e0bffa17 	ldw	r2,-24(fp)
80216140:	10bfffc4 	addi	r2,r2,-1
80216144:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
80216148:	e0bffa17 	ldw	r2,-24(fp)
8021614c:	10000526 	beq	r2,zero,80216164 <altera_avalon_jtag_uart_irq+0x1a8>
80216150:	e0bffb17 	ldw	r2,-20(fp)
80216154:	10c00d17 	ldw	r3,52(r2)
80216158:	e0bffb17 	ldw	r2,-20(fp)
8021615c:	10800c17 	ldw	r2,48(r2)
80216160:	18bfe51e 	bne	r3,r2,802160f8 <__reset+0xfa1f60f8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
80216164:	e0bffa17 	ldw	r2,-24(fp)
80216168:	103f9d26 	beq	r2,zero,80215fe0 <__reset+0xfa1f5fe0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
8021616c:	e0bffb17 	ldw	r2,-20(fp)
80216170:	10c00817 	ldw	r3,32(r2)
80216174:	00bfff44 	movi	r2,-3
80216178:	1886703a 	and	r3,r3,r2
8021617c:	e0bffb17 	ldw	r2,-20(fp)
80216180:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
80216184:	e0bffb17 	ldw	r2,-20(fp)
80216188:	10800017 	ldw	r2,0(r2)
8021618c:	10800104 	addi	r2,r2,4
80216190:	1007883a 	mov	r3,r2
80216194:	e0bffb17 	ldw	r2,-20(fp)
80216198:	10800817 	ldw	r2,32(r2)
8021619c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
802161a0:	e0bffc17 	ldw	r2,-16(fp)
802161a4:	10800104 	addi	r2,r2,4
802161a8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
802161ac:	003f8c06 	br	80215fe0 <__reset+0xfa1f5fe0>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
802161b0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
802161b4:	0001883a 	nop
802161b8:	e037883a 	mov	sp,fp
802161bc:	df000017 	ldw	fp,0(sp)
802161c0:	dec00104 	addi	sp,sp,4
802161c4:	f800283a 	ret

802161c8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
802161c8:	defff804 	addi	sp,sp,-32
802161cc:	df000715 	stw	fp,28(sp)
802161d0:	df000704 	addi	fp,sp,28
802161d4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
802161d8:	e0bffb17 	ldw	r2,-20(fp)
802161dc:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
802161e0:	e0bff917 	ldw	r2,-28(fp)
802161e4:	10800017 	ldw	r2,0(r2)
802161e8:	10800104 	addi	r2,r2,4
802161ec:	10800037 	ldwio	r2,0(r2)
802161f0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
802161f4:	e0bffa17 	ldw	r2,-24(fp)
802161f8:	1081000c 	andi	r2,r2,1024
802161fc:	10000b26 	beq	r2,zero,8021622c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
80216200:	e0bff917 	ldw	r2,-28(fp)
80216204:	10800017 	ldw	r2,0(r2)
80216208:	10800104 	addi	r2,r2,4
8021620c:	1007883a 	mov	r3,r2
80216210:	e0bff917 	ldw	r2,-28(fp)
80216214:	10800817 	ldw	r2,32(r2)
80216218:	10810014 	ori	r2,r2,1024
8021621c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
80216220:	e0bff917 	ldw	r2,-28(fp)
80216224:	10000915 	stw	zero,36(r2)
80216228:	00000a06 	br	80216254 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
8021622c:	e0bff917 	ldw	r2,-28(fp)
80216230:	10c00917 	ldw	r3,36(r2)
80216234:	00a00034 	movhi	r2,32768
80216238:	10bfff04 	addi	r2,r2,-4
8021623c:	10c00536 	bltu	r2,r3,80216254 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
80216240:	e0bff917 	ldw	r2,-28(fp)
80216244:	10800917 	ldw	r2,36(r2)
80216248:	10c00044 	addi	r3,r2,1
8021624c:	e0bff917 	ldw	r2,-28(fp)
80216250:	10c00915 	stw	r3,36(r2)
80216254:	d0a02417 	ldw	r2,-32624(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
80216258:	e037883a 	mov	sp,fp
8021625c:	df000017 	ldw	fp,0(sp)
80216260:	dec00104 	addi	sp,sp,4
80216264:	f800283a 	ret

80216268 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
80216268:	defffd04 	addi	sp,sp,-12
8021626c:	df000215 	stw	fp,8(sp)
80216270:	df000204 	addi	fp,sp,8
80216274:	e13ffe15 	stw	r4,-8(fp)
80216278:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
8021627c:	00000506 	br	80216294 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
80216280:	e0bfff17 	ldw	r2,-4(fp)
80216284:	1090000c 	andi	r2,r2,16384
80216288:	10000226 	beq	r2,zero,80216294 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
8021628c:	00bffd44 	movi	r2,-11
80216290:	00000b06 	br	802162c0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
80216294:	e0bffe17 	ldw	r2,-8(fp)
80216298:	10c00d17 	ldw	r3,52(r2)
8021629c:	e0bffe17 	ldw	r2,-8(fp)
802162a0:	10800c17 	ldw	r2,48(r2)
802162a4:	18800526 	beq	r3,r2,802162bc <altera_avalon_jtag_uart_close+0x54>
802162a8:	e0bffe17 	ldw	r2,-8(fp)
802162ac:	10c00917 	ldw	r3,36(r2)
802162b0:	e0bffe17 	ldw	r2,-8(fp)
802162b4:	10800117 	ldw	r2,4(r2)
802162b8:	18bff136 	bltu	r3,r2,80216280 <__reset+0xfa1f6280>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
802162bc:	0005883a 	mov	r2,zero
}
802162c0:	e037883a 	mov	sp,fp
802162c4:	df000017 	ldw	fp,0(sp)
802162c8:	dec00104 	addi	sp,sp,4
802162cc:	f800283a 	ret

802162d0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
802162d0:	defffa04 	addi	sp,sp,-24
802162d4:	df000515 	stw	fp,20(sp)
802162d8:	df000504 	addi	fp,sp,20
802162dc:	e13ffd15 	stw	r4,-12(fp)
802162e0:	e17ffe15 	stw	r5,-8(fp)
802162e4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
802162e8:	00bff9c4 	movi	r2,-25
802162ec:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
802162f0:	e0bffe17 	ldw	r2,-8(fp)
802162f4:	10da8060 	cmpeqi	r3,r2,27137
802162f8:	1800031e 	bne	r3,zero,80216308 <altera_avalon_jtag_uart_ioctl+0x38>
802162fc:	109a80a0 	cmpeqi	r2,r2,27138
80216300:	1000181e 	bne	r2,zero,80216364 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
80216304:	00002906 	br	802163ac <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
80216308:	e0bffd17 	ldw	r2,-12(fp)
8021630c:	10c00117 	ldw	r3,4(r2)
80216310:	00a00034 	movhi	r2,32768
80216314:	10bfffc4 	addi	r2,r2,-1
80216318:	18802126 	beq	r3,r2,802163a0 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
8021631c:	e0bfff17 	ldw	r2,-4(fp)
80216320:	10800017 	ldw	r2,0(r2)
80216324:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
80216328:	e0bffc17 	ldw	r2,-16(fp)
8021632c:	10800090 	cmplti	r2,r2,2
80216330:	1000061e 	bne	r2,zero,8021634c <altera_avalon_jtag_uart_ioctl+0x7c>
80216334:	e0fffc17 	ldw	r3,-16(fp)
80216338:	00a00034 	movhi	r2,32768
8021633c:	10bfffc4 	addi	r2,r2,-1
80216340:	18800226 	beq	r3,r2,8021634c <altera_avalon_jtag_uart_ioctl+0x7c>
80216344:	e0bffc17 	ldw	r2,-16(fp)
80216348:	00000206 	br	80216354 <altera_avalon_jtag_uart_ioctl+0x84>
8021634c:	00a00034 	movhi	r2,32768
80216350:	10bfff84 	addi	r2,r2,-2
80216354:	e0fffd17 	ldw	r3,-12(fp)
80216358:	18800115 	stw	r2,4(r3)
      rc = 0;
8021635c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
80216360:	00000f06 	br	802163a0 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
80216364:	e0bffd17 	ldw	r2,-12(fp)
80216368:	10c00117 	ldw	r3,4(r2)
8021636c:	00a00034 	movhi	r2,32768
80216370:	10bfffc4 	addi	r2,r2,-1
80216374:	18800c26 	beq	r3,r2,802163a8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
80216378:	e0bffd17 	ldw	r2,-12(fp)
8021637c:	10c00917 	ldw	r3,36(r2)
80216380:	e0bffd17 	ldw	r2,-12(fp)
80216384:	10800117 	ldw	r2,4(r2)
80216388:	1885803a 	cmpltu	r2,r3,r2
8021638c:	10c03fcc 	andi	r3,r2,255
80216390:	e0bfff17 	ldw	r2,-4(fp)
80216394:	10c00015 	stw	r3,0(r2)
      rc = 0;
80216398:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
8021639c:	00000206 	br	802163a8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
802163a0:	0001883a 	nop
802163a4:	00000106 	br	802163ac <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
802163a8:	0001883a 	nop

  default:
    break;
  }

  return rc;
802163ac:	e0bffb17 	ldw	r2,-20(fp)
}
802163b0:	e037883a 	mov	sp,fp
802163b4:	df000017 	ldw	fp,0(sp)
802163b8:	dec00104 	addi	sp,sp,4
802163bc:	f800283a 	ret

802163c0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
802163c0:	defff304 	addi	sp,sp,-52
802163c4:	dfc00c15 	stw	ra,48(sp)
802163c8:	df000b15 	stw	fp,44(sp)
802163cc:	df000b04 	addi	fp,sp,44
802163d0:	e13ffc15 	stw	r4,-16(fp)
802163d4:	e17ffd15 	stw	r5,-12(fp)
802163d8:	e1bffe15 	stw	r6,-8(fp)
802163dc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
802163e0:	e0bffd17 	ldw	r2,-12(fp)
802163e4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
802163e8:	00004706 	br	80216508 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
802163ec:	e0bffc17 	ldw	r2,-16(fp)
802163f0:	10800a17 	ldw	r2,40(r2)
802163f4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
802163f8:	e0bffc17 	ldw	r2,-16(fp)
802163fc:	10800b17 	ldw	r2,44(r2)
80216400:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
80216404:	e0fff717 	ldw	r3,-36(fp)
80216408:	e0bff817 	ldw	r2,-32(fp)
8021640c:	18800536 	bltu	r3,r2,80216424 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
80216410:	e0fff717 	ldw	r3,-36(fp)
80216414:	e0bff817 	ldw	r2,-32(fp)
80216418:	1885c83a 	sub	r2,r3,r2
8021641c:	e0bff615 	stw	r2,-40(fp)
80216420:	00000406 	br	80216434 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
80216424:	00c20004 	movi	r3,2048
80216428:	e0bff817 	ldw	r2,-32(fp)
8021642c:	1885c83a 	sub	r2,r3,r2
80216430:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
80216434:	e0bff617 	ldw	r2,-40(fp)
80216438:	10001e26 	beq	r2,zero,802164b4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
8021643c:	e0fffe17 	ldw	r3,-8(fp)
80216440:	e0bff617 	ldw	r2,-40(fp)
80216444:	1880022e 	bgeu	r3,r2,80216450 <altera_avalon_jtag_uart_read+0x90>
        n = space;
80216448:	e0bffe17 	ldw	r2,-8(fp)
8021644c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
80216450:	e0bffc17 	ldw	r2,-16(fp)
80216454:	10c00e04 	addi	r3,r2,56
80216458:	e0bff817 	ldw	r2,-32(fp)
8021645c:	1885883a 	add	r2,r3,r2
80216460:	e1bff617 	ldw	r6,-40(fp)
80216464:	100b883a 	mov	r5,r2
80216468:	e13ff517 	ldw	r4,-44(fp)
8021646c:	020516c0 	call	8020516c <memcpy>
      ptr   += n;
80216470:	e0fff517 	ldw	r3,-44(fp)
80216474:	e0bff617 	ldw	r2,-40(fp)
80216478:	1885883a 	add	r2,r3,r2
8021647c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
80216480:	e0fffe17 	ldw	r3,-8(fp)
80216484:	e0bff617 	ldw	r2,-40(fp)
80216488:	1885c83a 	sub	r2,r3,r2
8021648c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
80216490:	e0fff817 	ldw	r3,-32(fp)
80216494:	e0bff617 	ldw	r2,-40(fp)
80216498:	1885883a 	add	r2,r3,r2
8021649c:	10c1ffcc 	andi	r3,r2,2047
802164a0:	e0bffc17 	ldw	r2,-16(fp)
802164a4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
802164a8:	e0bffe17 	ldw	r2,-8(fp)
802164ac:	00bfcf16 	blt	zero,r2,802163ec <__reset+0xfa1f63ec>
802164b0:	00000106 	br	802164b8 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
802164b4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
802164b8:	e0fff517 	ldw	r3,-44(fp)
802164bc:	e0bffd17 	ldw	r2,-12(fp)
802164c0:	1880141e 	bne	r3,r2,80216514 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
802164c4:	e0bfff17 	ldw	r2,-4(fp)
802164c8:	1090000c 	andi	r2,r2,16384
802164cc:	1000131e 	bne	r2,zero,8021651c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
802164d0:	0001883a 	nop
802164d4:	e0bffc17 	ldw	r2,-16(fp)
802164d8:	10c00a17 	ldw	r3,40(r2)
802164dc:	e0bff717 	ldw	r2,-36(fp)
802164e0:	1880051e 	bne	r3,r2,802164f8 <altera_avalon_jtag_uart_read+0x138>
802164e4:	e0bffc17 	ldw	r2,-16(fp)
802164e8:	10c00917 	ldw	r3,36(r2)
802164ec:	e0bffc17 	ldw	r2,-16(fp)
802164f0:	10800117 	ldw	r2,4(r2)
802164f4:	18bff736 	bltu	r3,r2,802164d4 <__reset+0xfa1f64d4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
802164f8:	e0bffc17 	ldw	r2,-16(fp)
802164fc:	10c00a17 	ldw	r3,40(r2)
80216500:	e0bff717 	ldw	r2,-36(fp)
80216504:	18800726 	beq	r3,r2,80216524 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
80216508:	e0bffe17 	ldw	r2,-8(fp)
8021650c:	00bfb716 	blt	zero,r2,802163ec <__reset+0xfa1f63ec>
80216510:	00000506 	br	80216528 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
80216514:	0001883a 	nop
80216518:	00000306 	br	80216528 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
8021651c:	0001883a 	nop
80216520:	00000106 	br	80216528 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
80216524:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
80216528:	e0fff517 	ldw	r3,-44(fp)
8021652c:	e0bffd17 	ldw	r2,-12(fp)
80216530:	18801826 	beq	r3,r2,80216594 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80216534:	0005303a 	rdctl	r2,status
80216538:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8021653c:	e0fffb17 	ldw	r3,-20(fp)
80216540:	00bfff84 	movi	r2,-2
80216544:	1884703a 	and	r2,r3,r2
80216548:	1001703a 	wrctl	status,r2
  
  return context;
8021654c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
80216550:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
80216554:	e0bffc17 	ldw	r2,-16(fp)
80216558:	10800817 	ldw	r2,32(r2)
8021655c:	10c00054 	ori	r3,r2,1
80216560:	e0bffc17 	ldw	r2,-16(fp)
80216564:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
80216568:	e0bffc17 	ldw	r2,-16(fp)
8021656c:	10800017 	ldw	r2,0(r2)
80216570:	10800104 	addi	r2,r2,4
80216574:	1007883a 	mov	r3,r2
80216578:	e0bffc17 	ldw	r2,-16(fp)
8021657c:	10800817 	ldw	r2,32(r2)
80216580:	18800035 	stwio	r2,0(r3)
80216584:	e0bffa17 	ldw	r2,-24(fp)
80216588:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8021658c:	e0bff917 	ldw	r2,-28(fp)
80216590:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
80216594:	e0fff517 	ldw	r3,-44(fp)
80216598:	e0bffd17 	ldw	r2,-12(fp)
8021659c:	18800426 	beq	r3,r2,802165b0 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
802165a0:	e0fff517 	ldw	r3,-44(fp)
802165a4:	e0bffd17 	ldw	r2,-12(fp)
802165a8:	1885c83a 	sub	r2,r3,r2
802165ac:	00000606 	br	802165c8 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
802165b0:	e0bfff17 	ldw	r2,-4(fp)
802165b4:	1090000c 	andi	r2,r2,16384
802165b8:	10000226 	beq	r2,zero,802165c4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
802165bc:	00bffd44 	movi	r2,-11
802165c0:	00000106 	br	802165c8 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
802165c4:	00bffec4 	movi	r2,-5
}
802165c8:	e037883a 	mov	sp,fp
802165cc:	dfc00117 	ldw	ra,4(sp)
802165d0:	df000017 	ldw	fp,0(sp)
802165d4:	dec00204 	addi	sp,sp,8
802165d8:	f800283a 	ret

802165dc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
802165dc:	defff304 	addi	sp,sp,-52
802165e0:	dfc00c15 	stw	ra,48(sp)
802165e4:	df000b15 	stw	fp,44(sp)
802165e8:	df000b04 	addi	fp,sp,44
802165ec:	e13ffc15 	stw	r4,-16(fp)
802165f0:	e17ffd15 	stw	r5,-12(fp)
802165f4:	e1bffe15 	stw	r6,-8(fp)
802165f8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
802165fc:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
80216600:	e0bffd17 	ldw	r2,-12(fp)
80216604:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
80216608:	00003706 	br	802166e8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
8021660c:	e0bffc17 	ldw	r2,-16(fp)
80216610:	10800c17 	ldw	r2,48(r2)
80216614:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
80216618:	e0bffc17 	ldw	r2,-16(fp)
8021661c:	10800d17 	ldw	r2,52(r2)
80216620:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
80216624:	e0fff917 	ldw	r3,-28(fp)
80216628:	e0bff517 	ldw	r2,-44(fp)
8021662c:	1880062e 	bgeu	r3,r2,80216648 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
80216630:	e0fff517 	ldw	r3,-44(fp)
80216634:	e0bff917 	ldw	r2,-28(fp)
80216638:	1885c83a 	sub	r2,r3,r2
8021663c:	10bfffc4 	addi	r2,r2,-1
80216640:	e0bff615 	stw	r2,-40(fp)
80216644:	00000b06 	br	80216674 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
80216648:	e0bff517 	ldw	r2,-44(fp)
8021664c:	10000526 	beq	r2,zero,80216664 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
80216650:	00c20004 	movi	r3,2048
80216654:	e0bff917 	ldw	r2,-28(fp)
80216658:	1885c83a 	sub	r2,r3,r2
8021665c:	e0bff615 	stw	r2,-40(fp)
80216660:	00000406 	br	80216674 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
80216664:	00c1ffc4 	movi	r3,2047
80216668:	e0bff917 	ldw	r2,-28(fp)
8021666c:	1885c83a 	sub	r2,r3,r2
80216670:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
80216674:	e0bff617 	ldw	r2,-40(fp)
80216678:	10001e26 	beq	r2,zero,802166f4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
8021667c:	e0fffe17 	ldw	r3,-8(fp)
80216680:	e0bff617 	ldw	r2,-40(fp)
80216684:	1880022e 	bgeu	r3,r2,80216690 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
80216688:	e0bffe17 	ldw	r2,-8(fp)
8021668c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
80216690:	e0bffc17 	ldw	r2,-16(fp)
80216694:	10c20e04 	addi	r3,r2,2104
80216698:	e0bff917 	ldw	r2,-28(fp)
8021669c:	1885883a 	add	r2,r3,r2
802166a0:	e1bff617 	ldw	r6,-40(fp)
802166a4:	e17ffd17 	ldw	r5,-12(fp)
802166a8:	1009883a 	mov	r4,r2
802166ac:	020516c0 	call	8020516c <memcpy>
      ptr   += n;
802166b0:	e0fffd17 	ldw	r3,-12(fp)
802166b4:	e0bff617 	ldw	r2,-40(fp)
802166b8:	1885883a 	add	r2,r3,r2
802166bc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
802166c0:	e0fffe17 	ldw	r3,-8(fp)
802166c4:	e0bff617 	ldw	r2,-40(fp)
802166c8:	1885c83a 	sub	r2,r3,r2
802166cc:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
802166d0:	e0fff917 	ldw	r3,-28(fp)
802166d4:	e0bff617 	ldw	r2,-40(fp)
802166d8:	1885883a 	add	r2,r3,r2
802166dc:	10c1ffcc 	andi	r3,r2,2047
802166e0:	e0bffc17 	ldw	r2,-16(fp)
802166e4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
802166e8:	e0bffe17 	ldw	r2,-8(fp)
802166ec:	00bfc716 	blt	zero,r2,8021660c <__reset+0xfa1f660c>
802166f0:	00000106 	br	802166f8 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
802166f4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
802166f8:	0005303a 	rdctl	r2,status
802166fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80216700:	e0fffb17 	ldw	r3,-20(fp)
80216704:	00bfff84 	movi	r2,-2
80216708:	1884703a 	and	r2,r3,r2
8021670c:	1001703a 	wrctl	status,r2
  
  return context;
80216710:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
80216714:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
80216718:	e0bffc17 	ldw	r2,-16(fp)
8021671c:	10800817 	ldw	r2,32(r2)
80216720:	10c00094 	ori	r3,r2,2
80216724:	e0bffc17 	ldw	r2,-16(fp)
80216728:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
8021672c:	e0bffc17 	ldw	r2,-16(fp)
80216730:	10800017 	ldw	r2,0(r2)
80216734:	10800104 	addi	r2,r2,4
80216738:	1007883a 	mov	r3,r2
8021673c:	e0bffc17 	ldw	r2,-16(fp)
80216740:	10800817 	ldw	r2,32(r2)
80216744:	18800035 	stwio	r2,0(r3)
80216748:	e0bffa17 	ldw	r2,-24(fp)
8021674c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80216750:	e0bff817 	ldw	r2,-32(fp)
80216754:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
80216758:	e0bffe17 	ldw	r2,-8(fp)
8021675c:	0080100e 	bge	zero,r2,802167a0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
80216760:	e0bfff17 	ldw	r2,-4(fp)
80216764:	1090000c 	andi	r2,r2,16384
80216768:	1000101e 	bne	r2,zero,802167ac <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
8021676c:	0001883a 	nop
80216770:	e0bffc17 	ldw	r2,-16(fp)
80216774:	10c00d17 	ldw	r3,52(r2)
80216778:	e0bff517 	ldw	r2,-44(fp)
8021677c:	1880051e 	bne	r3,r2,80216794 <altera_avalon_jtag_uart_write+0x1b8>
80216780:	e0bffc17 	ldw	r2,-16(fp)
80216784:	10c00917 	ldw	r3,36(r2)
80216788:	e0bffc17 	ldw	r2,-16(fp)
8021678c:	10800117 	ldw	r2,4(r2)
80216790:	18bff736 	bltu	r3,r2,80216770 <__reset+0xfa1f6770>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
80216794:	e0bffc17 	ldw	r2,-16(fp)
80216798:	10800917 	ldw	r2,36(r2)
8021679c:	1000051e 	bne	r2,zero,802167b4 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
802167a0:	e0bffe17 	ldw	r2,-8(fp)
802167a4:	00bfd016 	blt	zero,r2,802166e8 <__reset+0xfa1f66e8>
802167a8:	00000306 	br	802167b8 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
802167ac:	0001883a 	nop
802167b0:	00000106 	br	802167b8 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
802167b4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
802167b8:	e0fffd17 	ldw	r3,-12(fp)
802167bc:	e0bff717 	ldw	r2,-36(fp)
802167c0:	18800426 	beq	r3,r2,802167d4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
802167c4:	e0fffd17 	ldw	r3,-12(fp)
802167c8:	e0bff717 	ldw	r2,-36(fp)
802167cc:	1885c83a 	sub	r2,r3,r2
802167d0:	00000606 	br	802167ec <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
802167d4:	e0bfff17 	ldw	r2,-4(fp)
802167d8:	1090000c 	andi	r2,r2,16384
802167dc:	10000226 	beq	r2,zero,802167e8 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
802167e0:	00bffd44 	movi	r2,-11
802167e4:	00000106 	br	802167ec <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
802167e8:	00bffec4 	movi	r2,-5
}
802167ec:	e037883a 	mov	sp,fp
802167f0:	dfc00117 	ldw	ra,4(sp)
802167f4:	df000017 	ldw	fp,0(sp)
802167f8:	dec00204 	addi	sp,sp,8
802167fc:	f800283a 	ret

80216800 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
80216800:	defffa04 	addi	sp,sp,-24
80216804:	dfc00515 	stw	ra,20(sp)
80216808:	df000415 	stw	fp,16(sp)
8021680c:	df000404 	addi	fp,sp,16
80216810:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
80216814:	0007883a 	mov	r3,zero
80216818:	e0bfff17 	ldw	r2,-4(fp)
8021681c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
80216820:	e0bfff17 	ldw	r2,-4(fp)
80216824:	10800104 	addi	r2,r2,4
80216828:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8021682c:	0005303a 	rdctl	r2,status
80216830:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80216834:	e0fffd17 	ldw	r3,-12(fp)
80216838:	00bfff84 	movi	r2,-2
8021683c:	1884703a 	and	r2,r3,r2
80216840:	1001703a 	wrctl	status,r2
  
  return context;
80216844:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
80216848:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
8021684c:	02159d80 	call	802159d8 <alt_tick>
80216850:	e0bffc17 	ldw	r2,-16(fp)
80216854:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80216858:	e0bffe17 	ldw	r2,-8(fp)
8021685c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
80216860:	0001883a 	nop
80216864:	e037883a 	mov	sp,fp
80216868:	dfc00117 	ldw	ra,4(sp)
8021686c:	df000017 	ldw	fp,0(sp)
80216870:	dec00204 	addi	sp,sp,8
80216874:	f800283a 	ret

80216878 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
80216878:	defff804 	addi	sp,sp,-32
8021687c:	dfc00715 	stw	ra,28(sp)
80216880:	df000615 	stw	fp,24(sp)
80216884:	df000604 	addi	fp,sp,24
80216888:	e13ffc15 	stw	r4,-16(fp)
8021688c:	e17ffd15 	stw	r5,-12(fp)
80216890:	e1bffe15 	stw	r6,-8(fp)
80216894:	e1ffff15 	stw	r7,-4(fp)
80216898:	e0bfff17 	ldw	r2,-4(fp)
8021689c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
802168a0:	d0a02417 	ldw	r2,-32624(gp)
802168a4:	1000021e 	bne	r2,zero,802168b0 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
802168a8:	e0bffb17 	ldw	r2,-20(fp)
802168ac:	d0a02415 	stw	r2,-32624(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
802168b0:	e0bffc17 	ldw	r2,-16(fp)
802168b4:	10800104 	addi	r2,r2,4
802168b8:	00c001c4 	movi	r3,7
802168bc:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
802168c0:	d8000015 	stw	zero,0(sp)
802168c4:	e1fffc17 	ldw	r7,-16(fp)
802168c8:	01a00874 	movhi	r6,32801
802168cc:	319a0004 	addi	r6,r6,26624
802168d0:	e17ffe17 	ldw	r5,-8(fp)
802168d4:	e13ffd17 	ldw	r4,-12(fp)
802168d8:	02194f00 	call	802194f0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
802168dc:	0001883a 	nop
802168e0:	e037883a 	mov	sp,fp
802168e4:	dfc00117 	ldw	ra,4(sp)
802168e8:	df000017 	ldw	fp,0(sp)
802168ec:	dec00204 	addi	sp,sp,8
802168f0:	f800283a 	ret

802168f4 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
802168f4:	defffa04 	addi	sp,sp,-24
802168f8:	dfc00515 	stw	ra,20(sp)
802168fc:	df000415 	stw	fp,16(sp)
80216900:	df000404 	addi	fp,sp,16
80216904:	e13ffd15 	stw	r4,-12(fp)
80216908:	e17ffe15 	stw	r5,-8(fp)
8021690c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
80216910:	e0bffd17 	ldw	r2,-12(fp)
80216914:	10800017 	ldw	r2,0(r2)
80216918:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
8021691c:	e0bffc17 	ldw	r2,-16(fp)
80216920:	10c00a04 	addi	r3,r2,40
80216924:	e0bffd17 	ldw	r2,-12(fp)
80216928:	10800217 	ldw	r2,8(r2)
8021692c:	100f883a 	mov	r7,r2
80216930:	e1bfff17 	ldw	r6,-4(fp)
80216934:	e17ffe17 	ldw	r5,-8(fp)
80216938:	1809883a 	mov	r4,r3
8021693c:	0216e080 	call	80216e08 <altera_avalon_uart_read>
      fd->fd_flags);
}
80216940:	e037883a 	mov	sp,fp
80216944:	dfc00117 	ldw	ra,4(sp)
80216948:	df000017 	ldw	fp,0(sp)
8021694c:	dec00204 	addi	sp,sp,8
80216950:	f800283a 	ret

80216954 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
80216954:	defffa04 	addi	sp,sp,-24
80216958:	dfc00515 	stw	ra,20(sp)
8021695c:	df000415 	stw	fp,16(sp)
80216960:	df000404 	addi	fp,sp,16
80216964:	e13ffd15 	stw	r4,-12(fp)
80216968:	e17ffe15 	stw	r5,-8(fp)
8021696c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
80216970:	e0bffd17 	ldw	r2,-12(fp)
80216974:	10800017 	ldw	r2,0(r2)
80216978:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
8021697c:	e0bffc17 	ldw	r2,-16(fp)
80216980:	10c00a04 	addi	r3,r2,40
80216984:	e0bffd17 	ldw	r2,-12(fp)
80216988:	10800217 	ldw	r2,8(r2)
8021698c:	100f883a 	mov	r7,r2
80216990:	e1bfff17 	ldw	r6,-4(fp)
80216994:	e17ffe17 	ldw	r5,-8(fp)
80216998:	1809883a 	mov	r4,r3
8021699c:	02170200 	call	80217020 <altera_avalon_uart_write>
      fd->fd_flags);
}
802169a0:	e037883a 	mov	sp,fp
802169a4:	dfc00117 	ldw	ra,4(sp)
802169a8:	df000017 	ldw	fp,0(sp)
802169ac:	dec00204 	addi	sp,sp,8
802169b0:	f800283a 	ret

802169b4 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
802169b4:	defffc04 	addi	sp,sp,-16
802169b8:	dfc00315 	stw	ra,12(sp)
802169bc:	df000215 	stw	fp,8(sp)
802169c0:	df000204 	addi	fp,sp,8
802169c4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
802169c8:	e0bfff17 	ldw	r2,-4(fp)
802169cc:	10800017 	ldw	r2,0(r2)
802169d0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
802169d4:	e0bffe17 	ldw	r2,-8(fp)
802169d8:	10c00a04 	addi	r3,r2,40
802169dc:	e0bfff17 	ldw	r2,-4(fp)
802169e0:	10800217 	ldw	r2,8(r2)
802169e4:	100b883a 	mov	r5,r2
802169e8:	1809883a 	mov	r4,r3
802169ec:	0216d780 	call	80216d78 <altera_avalon_uart_close>
}
802169f0:	e037883a 	mov	sp,fp
802169f4:	dfc00117 	ldw	ra,4(sp)
802169f8:	df000017 	ldw	fp,0(sp)
802169fc:	dec00204 	addi	sp,sp,8
80216a00:	f800283a 	ret

80216a04 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
80216a04:	defff804 	addi	sp,sp,-32
80216a08:	dfc00715 	stw	ra,28(sp)
80216a0c:	df000615 	stw	fp,24(sp)
80216a10:	df000604 	addi	fp,sp,24
80216a14:	e13ffd15 	stw	r4,-12(fp)
80216a18:	e17ffe15 	stw	r5,-8(fp)
80216a1c:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
80216a20:	e0bffd17 	ldw	r2,-12(fp)
80216a24:	10800017 	ldw	r2,0(r2)
80216a28:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
80216a2c:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
80216a30:	1000041e 	bne	r2,zero,80216a44 <altera_avalon_uart_init+0x40>
80216a34:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
80216a38:	1000021e 	bne	r2,zero,80216a44 <altera_avalon_uart_init+0x40>
80216a3c:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
80216a40:	10000226 	beq	r2,zero,80216a4c <altera_avalon_uart_init+0x48>
80216a44:	00800044 	movi	r2,1
80216a48:	00000106 	br	80216a50 <altera_avalon_uart_init+0x4c>
80216a4c:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
80216a50:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
80216a54:	e0bffc17 	ldw	r2,-16(fp)
80216a58:	10000f1e 	bne	r2,zero,80216a98 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
80216a5c:	e0bffd17 	ldw	r2,-12(fp)
80216a60:	00c32004 	movi	r3,3200
80216a64:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
80216a68:	e0bffb17 	ldw	r2,-20(fp)
80216a6c:	10800304 	addi	r2,r2,12
80216a70:	e0fffd17 	ldw	r3,-12(fp)
80216a74:	18c00117 	ldw	r3,4(r3)
80216a78:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
80216a7c:	d8000015 	stw	zero,0(sp)
80216a80:	e1fffd17 	ldw	r7,-12(fp)
80216a84:	01a00874 	movhi	r6,32801
80216a88:	319aac04 	addi	r6,r6,27312
80216a8c:	e17fff17 	ldw	r5,-4(fp)
80216a90:	e13ffe17 	ldw	r4,-8(fp)
80216a94:	02194f00 	call	802194f0 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
80216a98:	0001883a 	nop
80216a9c:	e037883a 	mov	sp,fp
80216aa0:	dfc00117 	ldw	ra,4(sp)
80216aa4:	df000017 	ldw	fp,0(sp)
80216aa8:	dec00204 	addi	sp,sp,8
80216aac:	f800283a 	ret

80216ab0 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
80216ab0:	defffa04 	addi	sp,sp,-24
80216ab4:	dfc00515 	stw	ra,20(sp)
80216ab8:	df000415 	stw	fp,16(sp)
80216abc:	df000404 	addi	fp,sp,16
80216ac0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
80216ac4:	e0bfff17 	ldw	r2,-4(fp)
80216ac8:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
80216acc:	e0bffc17 	ldw	r2,-16(fp)
80216ad0:	10800017 	ldw	r2,0(r2)
80216ad4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
80216ad8:	e0bffd17 	ldw	r2,-12(fp)
80216adc:	10800204 	addi	r2,r2,8
80216ae0:	10800037 	ldwio	r2,0(r2)
80216ae4:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
80216ae8:	e0bffd17 	ldw	r2,-12(fp)
80216aec:	10800204 	addi	r2,r2,8
80216af0:	0007883a 	mov	r3,zero
80216af4:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
80216af8:	e0bffd17 	ldw	r2,-12(fp)
80216afc:	10800204 	addi	r2,r2,8
80216b00:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
80216b04:	e0bffe17 	ldw	r2,-8(fp)
80216b08:	1080200c 	andi	r2,r2,128
80216b0c:	10000326 	beq	r2,zero,80216b1c <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
80216b10:	e17ffe17 	ldw	r5,-8(fp)
80216b14:	e13ffc17 	ldw	r4,-16(fp)
80216b18:	0216b4c0 	call	80216b4c <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
80216b1c:	e0bffe17 	ldw	r2,-8(fp)
80216b20:	1081100c 	andi	r2,r2,1088
80216b24:	10000326 	beq	r2,zero,80216b34 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
80216b28:	e17ffe17 	ldw	r5,-8(fp)
80216b2c:	e13ffc17 	ldw	r4,-16(fp)
80216b30:	0216c300 	call	80216c30 <altera_avalon_uart_txirq>
  }
  

}
80216b34:	0001883a 	nop
80216b38:	e037883a 	mov	sp,fp
80216b3c:	dfc00117 	ldw	ra,4(sp)
80216b40:	df000017 	ldw	fp,0(sp)
80216b44:	dec00204 	addi	sp,sp,8
80216b48:	f800283a 	ret

80216b4c <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
80216b4c:	defffc04 	addi	sp,sp,-16
80216b50:	df000315 	stw	fp,12(sp)
80216b54:	df000304 	addi	fp,sp,12
80216b58:	e13ffe15 	stw	r4,-8(fp)
80216b5c:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
80216b60:	e0bfff17 	ldw	r2,-4(fp)
80216b64:	108000cc 	andi	r2,r2,3
80216b68:	10002c1e 	bne	r2,zero,80216c1c <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
80216b6c:	e0bffe17 	ldw	r2,-8(fp)
80216b70:	10800317 	ldw	r2,12(r2)
80216b74:	e0bffe17 	ldw	r2,-8(fp)
80216b78:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
80216b7c:	e0bffe17 	ldw	r2,-8(fp)
80216b80:	10800317 	ldw	r2,12(r2)
80216b84:	10800044 	addi	r2,r2,1
80216b88:	10800fcc 	andi	r2,r2,63
80216b8c:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
80216b90:	e0bffe17 	ldw	r2,-8(fp)
80216b94:	10800317 	ldw	r2,12(r2)
80216b98:	e0fffe17 	ldw	r3,-8(fp)
80216b9c:	18c00017 	ldw	r3,0(r3)
80216ba0:	18c00037 	ldwio	r3,0(r3)
80216ba4:	1809883a 	mov	r4,r3
80216ba8:	e0fffe17 	ldw	r3,-8(fp)
80216bac:	1885883a 	add	r2,r3,r2
80216bb0:	10800704 	addi	r2,r2,28
80216bb4:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
80216bb8:	e0bffe17 	ldw	r2,-8(fp)
80216bbc:	e0fffd17 	ldw	r3,-12(fp)
80216bc0:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
80216bc4:	e0bffe17 	ldw	r2,-8(fp)
80216bc8:	10800317 	ldw	r2,12(r2)
80216bcc:	10800044 	addi	r2,r2,1
80216bd0:	10800fcc 	andi	r2,r2,63
80216bd4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
80216bd8:	e0bffe17 	ldw	r2,-8(fp)
80216bdc:	10c00217 	ldw	r3,8(r2)
80216be0:	e0bffd17 	ldw	r2,-12(fp)
80216be4:	18800e1e 	bne	r3,r2,80216c20 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
80216be8:	e0bffe17 	ldw	r2,-8(fp)
80216bec:	10c00117 	ldw	r3,4(r2)
80216bf0:	00bfdfc4 	movi	r2,-129
80216bf4:	1886703a 	and	r3,r3,r2
80216bf8:	e0bffe17 	ldw	r2,-8(fp)
80216bfc:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
80216c00:	e0bffe17 	ldw	r2,-8(fp)
80216c04:	10800017 	ldw	r2,0(r2)
80216c08:	10800304 	addi	r2,r2,12
80216c0c:	e0fffe17 	ldw	r3,-8(fp)
80216c10:	18c00117 	ldw	r3,4(r3)
80216c14:	10c00035 	stwio	r3,0(r2)
80216c18:	00000106 	br	80216c20 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
80216c1c:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
80216c20:	e037883a 	mov	sp,fp
80216c24:	df000017 	ldw	fp,0(sp)
80216c28:	dec00104 	addi	sp,sp,4
80216c2c:	f800283a 	ret

80216c30 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
80216c30:	defffb04 	addi	sp,sp,-20
80216c34:	df000415 	stw	fp,16(sp)
80216c38:	df000404 	addi	fp,sp,16
80216c3c:	e13ffc15 	stw	r4,-16(fp)
80216c40:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
80216c44:	e0bffc17 	ldw	r2,-16(fp)
80216c48:	10c00417 	ldw	r3,16(r2)
80216c4c:	e0bffc17 	ldw	r2,-16(fp)
80216c50:	10800517 	ldw	r2,20(r2)
80216c54:	18803226 	beq	r3,r2,80216d20 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
80216c58:	e0bffc17 	ldw	r2,-16(fp)
80216c5c:	10800617 	ldw	r2,24(r2)
80216c60:	1080008c 	andi	r2,r2,2
80216c64:	10000326 	beq	r2,zero,80216c74 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
80216c68:	e0bffd17 	ldw	r2,-12(fp)
80216c6c:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
80216c70:	10001d26 	beq	r2,zero,80216ce8 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
80216c74:	e0bffc17 	ldw	r2,-16(fp)
80216c78:	10800417 	ldw	r2,16(r2)
80216c7c:	e0bffc17 	ldw	r2,-16(fp)
80216c80:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
80216c84:	e0bffc17 	ldw	r2,-16(fp)
80216c88:	10800017 	ldw	r2,0(r2)
80216c8c:	10800104 	addi	r2,r2,4
80216c90:	e0fffc17 	ldw	r3,-16(fp)
80216c94:	18c00417 	ldw	r3,16(r3)
80216c98:	e13ffc17 	ldw	r4,-16(fp)
80216c9c:	20c7883a 	add	r3,r4,r3
80216ca0:	18c01704 	addi	r3,r3,92
80216ca4:	18c00003 	ldbu	r3,0(r3)
80216ca8:	18c03fcc 	andi	r3,r3,255
80216cac:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
80216cb0:	e0bffc17 	ldw	r2,-16(fp)
80216cb4:	10800417 	ldw	r2,16(r2)
80216cb8:	10800044 	addi	r2,r2,1
80216cbc:	e0fffc17 	ldw	r3,-16(fp)
80216cc0:	18800415 	stw	r2,16(r3)
80216cc4:	10c00fcc 	andi	r3,r2,63
80216cc8:	e0bffc17 	ldw	r2,-16(fp)
80216ccc:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
80216cd0:	e0bffc17 	ldw	r2,-16(fp)
80216cd4:	10800117 	ldw	r2,4(r2)
80216cd8:	10c01014 	ori	r3,r2,64
80216cdc:	e0bffc17 	ldw	r2,-16(fp)
80216ce0:	10c00115 	stw	r3,4(r2)
80216ce4:	00000e06 	br	80216d20 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
80216ce8:	e0bffc17 	ldw	r2,-16(fp)
80216cec:	10800017 	ldw	r2,0(r2)
80216cf0:	10800204 	addi	r2,r2,8
80216cf4:	10800037 	ldwio	r2,0(r2)
80216cf8:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
80216cfc:	e0bffd17 	ldw	r2,-12(fp)
80216d00:	1082000c 	andi	r2,r2,2048
80216d04:	1000061e 	bne	r2,zero,80216d20 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
80216d08:	e0bffc17 	ldw	r2,-16(fp)
80216d0c:	10c00117 	ldw	r3,4(r2)
80216d10:	00bfefc4 	movi	r2,-65
80216d14:	1886703a 	and	r3,r3,r2
80216d18:	e0bffc17 	ldw	r2,-16(fp)
80216d1c:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
80216d20:	e0bffc17 	ldw	r2,-16(fp)
80216d24:	10c00417 	ldw	r3,16(r2)
80216d28:	e0bffc17 	ldw	r2,-16(fp)
80216d2c:	10800517 	ldw	r2,20(r2)
80216d30:	1880061e 	bne	r3,r2,80216d4c <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
80216d34:	e0bffc17 	ldw	r2,-16(fp)
80216d38:	10c00117 	ldw	r3,4(r2)
80216d3c:	00beefc4 	movi	r2,-1089
80216d40:	1886703a 	and	r3,r3,r2
80216d44:	e0bffc17 	ldw	r2,-16(fp)
80216d48:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
80216d4c:	e0bffc17 	ldw	r2,-16(fp)
80216d50:	10800017 	ldw	r2,0(r2)
80216d54:	10800304 	addi	r2,r2,12
80216d58:	e0fffc17 	ldw	r3,-16(fp)
80216d5c:	18c00117 	ldw	r3,4(r3)
80216d60:	10c00035 	stwio	r3,0(r2)
}
80216d64:	0001883a 	nop
80216d68:	e037883a 	mov	sp,fp
80216d6c:	df000017 	ldw	fp,0(sp)
80216d70:	dec00104 	addi	sp,sp,4
80216d74:	f800283a 	ret

80216d78 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
80216d78:	defffd04 	addi	sp,sp,-12
80216d7c:	df000215 	stw	fp,8(sp)
80216d80:	df000204 	addi	fp,sp,8
80216d84:	e13ffe15 	stw	r4,-8(fp)
80216d88:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
80216d8c:	00000506 	br	80216da4 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
80216d90:	e0bfff17 	ldw	r2,-4(fp)
80216d94:	1090000c 	andi	r2,r2,16384
80216d98:	10000226 	beq	r2,zero,80216da4 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
80216d9c:	00bffd44 	movi	r2,-11
80216da0:	00000606 	br	80216dbc <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
80216da4:	e0bffe17 	ldw	r2,-8(fp)
80216da8:	10c00417 	ldw	r3,16(r2)
80216dac:	e0bffe17 	ldw	r2,-8(fp)
80216db0:	10800517 	ldw	r2,20(r2)
80216db4:	18bff61e 	bne	r3,r2,80216d90 <__reset+0xfa1f6d90>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
80216db8:	0005883a 	mov	r2,zero
}
80216dbc:	e037883a 	mov	sp,fp
80216dc0:	df000017 	ldw	fp,0(sp)
80216dc4:	dec00104 	addi	sp,sp,4
80216dc8:	f800283a 	ret

80216dcc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80216dcc:	defffe04 	addi	sp,sp,-8
80216dd0:	dfc00115 	stw	ra,4(sp)
80216dd4:	df000015 	stw	fp,0(sp)
80216dd8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80216ddc:	d0a00c17 	ldw	r2,-32720(gp)
80216de0:	10000326 	beq	r2,zero,80216df0 <alt_get_errno+0x24>
80216de4:	d0a00c17 	ldw	r2,-32720(gp)
80216de8:	103ee83a 	callr	r2
80216dec:	00000106 	br	80216df4 <alt_get_errno+0x28>
80216df0:	d0a02004 	addi	r2,gp,-32640
}
80216df4:	e037883a 	mov	sp,fp
80216df8:	dfc00117 	ldw	ra,4(sp)
80216dfc:	df000017 	ldw	fp,0(sp)
80216e00:	dec00204 	addi	sp,sp,8
80216e04:	f800283a 	ret

80216e08 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
80216e08:	defff204 	addi	sp,sp,-56
80216e0c:	dfc00d15 	stw	ra,52(sp)
80216e10:	df000c15 	stw	fp,48(sp)
80216e14:	df000c04 	addi	fp,sp,48
80216e18:	e13ffc15 	stw	r4,-16(fp)
80216e1c:	e17ffd15 	stw	r5,-12(fp)
80216e20:	e1bffe15 	stw	r6,-8(fp)
80216e24:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
80216e28:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
80216e2c:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
80216e30:	e0bfff17 	ldw	r2,-4(fp)
80216e34:	1090000c 	andi	r2,r2,16384
80216e38:	1005003a 	cmpeq	r2,r2,zero
80216e3c:	10803fcc 	andi	r2,r2,255
80216e40:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
80216e44:	00001306 	br	80216e94 <altera_avalon_uart_read+0x8c>
    {
      count++;
80216e48:	e0bff517 	ldw	r2,-44(fp)
80216e4c:	10800044 	addi	r2,r2,1
80216e50:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
80216e54:	e0bffd17 	ldw	r2,-12(fp)
80216e58:	10c00044 	addi	r3,r2,1
80216e5c:	e0fffd15 	stw	r3,-12(fp)
80216e60:	e0fffc17 	ldw	r3,-16(fp)
80216e64:	18c00217 	ldw	r3,8(r3)
80216e68:	e13ffc17 	ldw	r4,-16(fp)
80216e6c:	20c7883a 	add	r3,r4,r3
80216e70:	18c00704 	addi	r3,r3,28
80216e74:	18c00003 	ldbu	r3,0(r3)
80216e78:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
80216e7c:	e0bffc17 	ldw	r2,-16(fp)
80216e80:	10800217 	ldw	r2,8(r2)
80216e84:	10800044 	addi	r2,r2,1
80216e88:	10c00fcc 	andi	r3,r2,63
80216e8c:	e0bffc17 	ldw	r2,-16(fp)
80216e90:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
80216e94:	e0fff517 	ldw	r3,-44(fp)
80216e98:	e0bffe17 	ldw	r2,-8(fp)
80216e9c:	1880050e 	bge	r3,r2,80216eb4 <altera_avalon_uart_read+0xac>
80216ea0:	e0bffc17 	ldw	r2,-16(fp)
80216ea4:	10c00217 	ldw	r3,8(r2)
80216ea8:	e0bffc17 	ldw	r2,-16(fp)
80216eac:	10800317 	ldw	r2,12(r2)
80216eb0:	18bfe51e 	bne	r3,r2,80216e48 <__reset+0xfa1f6e48>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
80216eb4:	e0bff517 	ldw	r2,-44(fp)
80216eb8:	1000251e 	bne	r2,zero,80216f50 <altera_avalon_uart_read+0x148>
80216ebc:	e0bffc17 	ldw	r2,-16(fp)
80216ec0:	10c00217 	ldw	r3,8(r2)
80216ec4:	e0bffc17 	ldw	r2,-16(fp)
80216ec8:	10800317 	ldw	r2,12(r2)
80216ecc:	1880201e 	bne	r3,r2,80216f50 <altera_avalon_uart_read+0x148>
    {
      if (!block)
80216ed0:	e0bff617 	ldw	r2,-40(fp)
80216ed4:	1000071e 	bne	r2,zero,80216ef4 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
80216ed8:	0216dcc0 	call	80216dcc <alt_get_errno>
80216edc:	1007883a 	mov	r3,r2
80216ee0:	008002c4 	movi	r2,11
80216ee4:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
80216ee8:	00800044 	movi	r2,1
80216eec:	e0bff405 	stb	r2,-48(fp)
        break;
80216ef0:	00001b06 	br	80216f60 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80216ef4:	0005303a 	rdctl	r2,status
80216ef8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80216efc:	e0fff917 	ldw	r3,-28(fp)
80216f00:	00bfff84 	movi	r2,-2
80216f04:	1884703a 	and	r2,r3,r2
80216f08:	1001703a 	wrctl	status,r2
  
  return context;
80216f0c:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
80216f10:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
80216f14:	e0bffc17 	ldw	r2,-16(fp)
80216f18:	10800117 	ldw	r2,4(r2)
80216f1c:	10c02014 	ori	r3,r2,128
80216f20:	e0bffc17 	ldw	r2,-16(fp)
80216f24:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
80216f28:	e0bffc17 	ldw	r2,-16(fp)
80216f2c:	10800017 	ldw	r2,0(r2)
80216f30:	10800304 	addi	r2,r2,12
80216f34:	e0fffc17 	ldw	r3,-16(fp)
80216f38:	18c00117 	ldw	r3,4(r3)
80216f3c:	10c00035 	stwio	r3,0(r2)
80216f40:	e0bff817 	ldw	r2,-32(fp)
80216f44:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80216f48:	e0bffa17 	ldw	r2,-24(fp)
80216f4c:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
80216f50:	e0bff517 	ldw	r2,-44(fp)
80216f54:	1000021e 	bne	r2,zero,80216f60 <altera_avalon_uart_read+0x158>
80216f58:	e0bffe17 	ldw	r2,-8(fp)
80216f5c:	103fcd1e 	bne	r2,zero,80216e94 <__reset+0xfa1f6e94>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80216f60:	0005303a 	rdctl	r2,status
80216f64:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80216f68:	e0fffb17 	ldw	r3,-20(fp)
80216f6c:	00bfff84 	movi	r2,-2
80216f70:	1884703a 	and	r2,r3,r2
80216f74:	1001703a 	wrctl	status,r2
  
  return context;
80216f78:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
80216f7c:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
80216f80:	e0bffc17 	ldw	r2,-16(fp)
80216f84:	10800117 	ldw	r2,4(r2)
80216f88:	10c02014 	ori	r3,r2,128
80216f8c:	e0bffc17 	ldw	r2,-16(fp)
80216f90:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
80216f94:	e0bffc17 	ldw	r2,-16(fp)
80216f98:	10800017 	ldw	r2,0(r2)
80216f9c:	10800304 	addi	r2,r2,12
80216fa0:	e0fffc17 	ldw	r3,-16(fp)
80216fa4:	18c00117 	ldw	r3,4(r3)
80216fa8:	10c00035 	stwio	r3,0(r2)
80216fac:	e0bff817 	ldw	r2,-32(fp)
80216fb0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80216fb4:	e0bff717 	ldw	r2,-36(fp)
80216fb8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
80216fbc:	e0bff403 	ldbu	r2,-48(fp)
80216fc0:	10000226 	beq	r2,zero,80216fcc <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
80216fc4:	00bffd44 	movi	r2,-11
80216fc8:	00000106 	br	80216fd0 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
80216fcc:	e0bff517 	ldw	r2,-44(fp)
  }
}
80216fd0:	e037883a 	mov	sp,fp
80216fd4:	dfc00117 	ldw	ra,4(sp)
80216fd8:	df000017 	ldw	fp,0(sp)
80216fdc:	dec00204 	addi	sp,sp,8
80216fe0:	f800283a 	ret

80216fe4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80216fe4:	defffe04 	addi	sp,sp,-8
80216fe8:	dfc00115 	stw	ra,4(sp)
80216fec:	df000015 	stw	fp,0(sp)
80216ff0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80216ff4:	d0a00c17 	ldw	r2,-32720(gp)
80216ff8:	10000326 	beq	r2,zero,80217008 <alt_get_errno+0x24>
80216ffc:	d0a00c17 	ldw	r2,-32720(gp)
80217000:	103ee83a 	callr	r2
80217004:	00000106 	br	8021700c <alt_get_errno+0x28>
80217008:	d0a02004 	addi	r2,gp,-32640
}
8021700c:	e037883a 	mov	sp,fp
80217010:	dfc00117 	ldw	ra,4(sp)
80217014:	df000017 	ldw	fp,0(sp)
80217018:	dec00204 	addi	sp,sp,8
8021701c:	f800283a 	ret

80217020 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
80217020:	defff204 	addi	sp,sp,-56
80217024:	dfc00d15 	stw	ra,52(sp)
80217028:	df000c15 	stw	fp,48(sp)
8021702c:	df000c04 	addi	fp,sp,48
80217030:	e13ffc15 	stw	r4,-16(fp)
80217034:	e17ffd15 	stw	r5,-12(fp)
80217038:	e1bffe15 	stw	r6,-8(fp)
8021703c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
80217040:	e0bffe17 	ldw	r2,-8(fp)
80217044:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
80217048:	e0bfff17 	ldw	r2,-4(fp)
8021704c:	1090000c 	andi	r2,r2,16384
80217050:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
80217054:	00003c06 	br	80217148 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
80217058:	e0bffc17 	ldw	r2,-16(fp)
8021705c:	10800517 	ldw	r2,20(r2)
80217060:	10800044 	addi	r2,r2,1
80217064:	10800fcc 	andi	r2,r2,63
80217068:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
8021706c:	e0bffc17 	ldw	r2,-16(fp)
80217070:	10c00417 	ldw	r3,16(r2)
80217074:	e0bff717 	ldw	r2,-36(fp)
80217078:	1880221e 	bne	r3,r2,80217104 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
8021707c:	e0bff517 	ldw	r2,-44(fp)
80217080:	10000526 	beq	r2,zero,80217098 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
80217084:	0216fe40 	call	80216fe4 <alt_get_errno>
80217088:	1007883a 	mov	r3,r2
8021708c:	008002c4 	movi	r2,11
80217090:	18800015 	stw	r2,0(r3)
        break;
80217094:	00002e06 	br	80217150 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80217098:	0005303a 	rdctl	r2,status
8021709c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
802170a0:	e0fff917 	ldw	r3,-28(fp)
802170a4:	00bfff84 	movi	r2,-2
802170a8:	1884703a 	and	r2,r3,r2
802170ac:	1001703a 	wrctl	status,r2
  
  return context;
802170b0:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
802170b4:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
802170b8:	e0bffc17 	ldw	r2,-16(fp)
802170bc:	10800117 	ldw	r2,4(r2)
802170c0:	10c11014 	ori	r3,r2,1088
802170c4:	e0bffc17 	ldw	r2,-16(fp)
802170c8:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
802170cc:	e0bffc17 	ldw	r2,-16(fp)
802170d0:	10800017 	ldw	r2,0(r2)
802170d4:	10800304 	addi	r2,r2,12
802170d8:	e0fffc17 	ldw	r3,-16(fp)
802170dc:	18c00117 	ldw	r3,4(r3)
802170e0:	10c00035 	stwio	r3,0(r2)
802170e4:	e0bff817 	ldw	r2,-32(fp)
802170e8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
802170ec:	e0bff617 	ldw	r2,-40(fp)
802170f0:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
802170f4:	e0bffc17 	ldw	r2,-16(fp)
802170f8:	10c00417 	ldw	r3,16(r2)
802170fc:	e0bff717 	ldw	r2,-36(fp)
80217100:	18bffc26 	beq	r3,r2,802170f4 <__reset+0xfa1f70f4>
      }
    }

    count--;
80217104:	e0bff417 	ldw	r2,-48(fp)
80217108:	10bfffc4 	addi	r2,r2,-1
8021710c:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
80217110:	e0bffc17 	ldw	r2,-16(fp)
80217114:	10c00517 	ldw	r3,20(r2)
80217118:	e0bffd17 	ldw	r2,-12(fp)
8021711c:	11000044 	addi	r4,r2,1
80217120:	e13ffd15 	stw	r4,-12(fp)
80217124:	10800003 	ldbu	r2,0(r2)
80217128:	1009883a 	mov	r4,r2
8021712c:	e0bffc17 	ldw	r2,-16(fp)
80217130:	10c5883a 	add	r2,r2,r3
80217134:	10801704 	addi	r2,r2,92
80217138:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
8021713c:	e0bffc17 	ldw	r2,-16(fp)
80217140:	e0fff717 	ldw	r3,-36(fp)
80217144:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
80217148:	e0bff417 	ldw	r2,-48(fp)
8021714c:	103fc21e 	bne	r2,zero,80217058 <__reset+0xfa1f7058>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80217150:	0005303a 	rdctl	r2,status
80217154:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80217158:	e0fffb17 	ldw	r3,-20(fp)
8021715c:	00bfff84 	movi	r2,-2
80217160:	1884703a 	and	r2,r3,r2
80217164:	1001703a 	wrctl	status,r2
  
  return context;
80217168:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
8021716c:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
80217170:	e0bffc17 	ldw	r2,-16(fp)
80217174:	10800117 	ldw	r2,4(r2)
80217178:	10c11014 	ori	r3,r2,1088
8021717c:	e0bffc17 	ldw	r2,-16(fp)
80217180:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
80217184:	e0bffc17 	ldw	r2,-16(fp)
80217188:	10800017 	ldw	r2,0(r2)
8021718c:	10800304 	addi	r2,r2,12
80217190:	e0fffc17 	ldw	r3,-16(fp)
80217194:	18c00117 	ldw	r3,4(r3)
80217198:	10c00035 	stwio	r3,0(r2)
8021719c:	e0bff817 	ldw	r2,-32(fp)
802171a0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
802171a4:	e0bffa17 	ldw	r2,-24(fp)
802171a8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
802171ac:	e0fffe17 	ldw	r3,-8(fp)
802171b0:	e0bff417 	ldw	r2,-48(fp)
802171b4:	1885c83a 	sub	r2,r3,r2
}
802171b8:	e037883a 	mov	sp,fp
802171bc:	dfc00117 	ldw	ra,4(sp)
802171c0:	df000017 	ldw	fp,0(sp)
802171c4:	dec00204 	addi	sp,sp,8
802171c8:	f800283a 	ret

802171cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
802171cc:	defffe04 	addi	sp,sp,-8
802171d0:	dfc00115 	stw	ra,4(sp)
802171d4:	df000015 	stw	fp,0(sp)
802171d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
802171dc:	d0a00c17 	ldw	r2,-32720(gp)
802171e0:	10000326 	beq	r2,zero,802171f0 <alt_get_errno+0x24>
802171e4:	d0a00c17 	ldw	r2,-32720(gp)
802171e8:	103ee83a 	callr	r2
802171ec:	00000106 	br	802171f4 <alt_get_errno+0x28>
802171f0:	d0a02004 	addi	r2,gp,-32640
}
802171f4:	e037883a 	mov	sp,fp
802171f8:	dfc00117 	ldw	ra,4(sp)
802171fc:	df000017 	ldw	fp,0(sp)
80217200:	dec00204 	addi	sp,sp,8
80217204:	f800283a 	ret

80217208 <alt_msgdma_write_standard_descriptor>:
 */
static int alt_msgdma_write_standard_descriptor (
    alt_u32 *csr_base, 
    alt_u32 *descriptor_base,
    alt_msgdma_standard_descriptor *descriptor)
{
80217208:	defffc04 	addi	sp,sp,-16
8021720c:	df000315 	stw	fp,12(sp)
80217210:	df000304 	addi	fp,sp,12
80217214:	e13ffd15 	stw	r4,-12(fp)
80217218:	e17ffe15 	stw	r5,-8(fp)
8021721c:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
80217220:	e0bffd17 	ldw	r2,-12(fp)
80217224:	10800037 	ldwio	r2,0(r2)
80217228:	1080010c 	andi	r2,r2,4
8021722c:	10000226 	beq	r2,zero,80217238 <alt_msgdma_write_standard_descriptor+0x30>
        ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
        is non-blocking*/
        return -ENOSPC;
80217230:	00bff904 	movi	r2,-28
80217234:	00001506 	br	8021728c <alt_msgdma_write_standard_descriptor+0x84>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base, 
80217238:	e0bfff17 	ldw	r2,-4(fp)
8021723c:	10800017 	ldw	r2,0(r2)
80217240:	1007883a 	mov	r3,r2
80217244:	e0bffe17 	ldw	r2,-8(fp)
80217248:	10c00035 	stwio	r3,0(r2)
        (alt_u32)descriptor->read_address);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base, 
8021724c:	e0bffe17 	ldw	r2,-8(fp)
80217250:	10800104 	addi	r2,r2,4
80217254:	e0ffff17 	ldw	r3,-4(fp)
80217258:	18c00117 	ldw	r3,4(r3)
8021725c:	10c00035 	stwio	r3,0(r2)
    (    alt_u32)descriptor->write_address);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base, 
80217260:	e0bffe17 	ldw	r2,-8(fp)
80217264:	10800204 	addi	r2,r2,8
80217268:	e0ffff17 	ldw	r3,-4(fp)
8021726c:	18c00217 	ldw	r3,8(r3)
80217270:	10c00035 	stwio	r3,0(r2)
        descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_STANDARD(descriptor_base, 
80217274:	e0bffe17 	ldw	r2,-8(fp)
80217278:	10800304 	addi	r2,r2,12
8021727c:	e0ffff17 	ldw	r3,-4(fp)
80217280:	18c00317 	ldw	r3,12(r3)
80217284:	10c00035 	stwio	r3,0(r2)
        descriptor->control);
        return 0;
80217288:	0005883a 	mov	r2,zero
}
8021728c:	e037883a 	mov	sp,fp
80217290:	df000017 	ldw	fp,0(sp)
80217294:	dec00104 	addi	sp,sp,4
80217298:	f800283a 	ret

8021729c <alt_msgdma_write_extended_descriptor>:
 */
static int alt_msgdma_write_extended_descriptor (
    alt_u32 *csr_base, 
    alt_u32 *descriptor_base,
    alt_msgdma_extended_descriptor *descriptor)
{
8021729c:	defffc04 	addi	sp,sp,-16
802172a0:	df000315 	stw	fp,12(sp)
802172a4:	df000304 	addi	fp,sp,12
802172a8:	e13ffd15 	stw	r4,-12(fp)
802172ac:	e17ffe15 	stw	r5,-8(fp)
802172b0:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
802172b4:	e0bffd17 	ldw	r2,-12(fp)
802172b8:	10800037 	ldwio	r2,0(r2)
802172bc:	1080010c 	andi	r2,r2,4
802172c0:	10000226 	beq	r2,zero,802172cc <alt_msgdma_write_extended_descriptor+0x30>
        ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
    is non-blocking*/
        return -ENOSPC;
802172c4:	00bff904 	movi	r2,-28
802172c8:	00003b06 	br	802173b8 <alt_msgdma_write_extended_descriptor+0x11c>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(
802172cc:	e0bfff17 	ldw	r2,-4(fp)
802172d0:	10800017 	ldw	r2,0(r2)
802172d4:	1007883a 	mov	r3,r2
802172d8:	e0bffe17 	ldw	r2,-8(fp)
802172dc:	10c00035 	stwio	r3,0(r2)
        descriptor_base, 
        (alt_u32)descriptor->read_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(
802172e0:	e0bffe17 	ldw	r2,-8(fp)
802172e4:	10800104 	addi	r2,r2,4
802172e8:	e0ffff17 	ldw	r3,-4(fp)
802172ec:	18c00117 	ldw	r3,4(r3)
802172f0:	10c00035 	stwio	r3,0(r2)
        descriptor_base, 
        (alt_u32)descriptor->write_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(
802172f4:	e0bffe17 	ldw	r2,-8(fp)
802172f8:	10800204 	addi	r2,r2,8
802172fc:	e0ffff17 	ldw	r3,-4(fp)
80217300:	18c00217 	ldw	r3,8(r3)
80217304:	10c00035 	stwio	r3,0(r2)
        descriptor_base, 
        descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(
80217308:	e0bffe17 	ldw	r2,-8(fp)
8021730c:	10800304 	addi	r2,r2,12
80217310:	e0ffff17 	ldw	r3,-4(fp)
80217314:	18c0030b 	ldhu	r3,12(r3)
80217318:	18ffffcc 	andi	r3,r3,65535
8021731c:	10c0002d 	sthio	r3,0(r2)
        descriptor_base, 
        descriptor->sequence_number);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(
80217320:	e0bffe17 	ldw	r2,-8(fp)
80217324:	10800384 	addi	r2,r2,14
80217328:	e0ffff17 	ldw	r3,-4(fp)
8021732c:	18c00383 	ldbu	r3,14(r3)
80217330:	18c03fcc 	andi	r3,r3,255
80217334:	10c00025 	stbio	r3,0(r2)
        descriptor_base, 
        descriptor->read_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(
80217338:	e0bffe17 	ldw	r2,-8(fp)
8021733c:	108003c4 	addi	r2,r2,15
80217340:	e0ffff17 	ldw	r3,-4(fp)
80217344:	18c003c3 	ldbu	r3,15(r3)
80217348:	18c03fcc 	andi	r3,r3,255
8021734c:	10c00025 	stbio	r3,0(r2)
        descriptor_base, 
        descriptor->write_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(
80217350:	e0bffe17 	ldw	r2,-8(fp)
80217354:	10800404 	addi	r2,r2,16
80217358:	e0ffff17 	ldw	r3,-4(fp)
8021735c:	18c0040b 	ldhu	r3,16(r3)
80217360:	18ffffcc 	andi	r3,r3,65535
80217364:	10c0002d 	sthio	r3,0(r2)
        descriptor_base, 
        descriptor->read_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(
80217368:	e0bffe17 	ldw	r2,-8(fp)
8021736c:	10800484 	addi	r2,r2,18
80217370:	e0ffff17 	ldw	r3,-4(fp)
80217374:	18c0048b 	ldhu	r3,18(r3)
80217378:	18ffffcc 	andi	r3,r3,65535
8021737c:	10c0002d 	sthio	r3,0(r2)
        descriptor_base, 
        descriptor->write_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base, 0);
80217380:	e0bffe17 	ldw	r2,-8(fp)
80217384:	10800504 	addi	r2,r2,20
80217388:	0007883a 	mov	r3,zero
8021738c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base, 0);
80217390:	e0bffe17 	ldw	r2,-8(fp)
80217394:	10800604 	addi	r2,r2,24
80217398:	0007883a 	mov	r3,zero
8021739c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(
802173a0:	e0bffe17 	ldw	r2,-8(fp)
802173a4:	10800704 	addi	r2,r2,28
802173a8:	e0ffff17 	ldw	r3,-4(fp)
802173ac:	18c00717 	ldw	r3,28(r3)
802173b0:	10c00035 	stwio	r3,0(r2)
        descriptor_base, 
        descriptor->control);
    return 0;
802173b4:	0005883a 	mov	r2,zero
}
802173b8:	e037883a 	mov	sp,fp
802173bc:	df000017 	ldw	fp,0(sp)
802173c0:	dec00104 	addi	sp,sp,4
802173c4:	f800283a 	ret

802173c8 <alt_msgdma_irq>:
 * alt_msgdma_irq()
 *
 * Interrupt handler for the Modular Scatter-Gather DMA controller.
 */
static void alt_msgdma_irq(void *context)
{
802173c8:	defff804 	addi	sp,sp,-32
802173cc:	dfc00715 	stw	ra,28(sp)
802173d0:	df000615 	stw	fp,24(sp)
802173d4:	df000604 	addi	fp,sp,24
802173d8:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev *dev = (alt_msgdma_dev *) context;
802173dc:	e0bfff17 	ldw	r2,-4(fp)
802173e0:	e0bffa15 	stw	r2,-24(fp)
    alt_irq_context cpu_sr;
    alt_u32 temporary_control;

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
802173e4:	e0bffa17 	ldw	r2,-24(fp)
802173e8:	10801783 	ldbu	r2,94(r2)
802173ec:	10803fcc 	andi	r2,r2,255
802173f0:	10001126 	beq	r2,zero,80217438 <alt_msgdma_irq+0x70>
    {
        temporary_control = 
                IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
802173f4:	e0bffa17 	ldw	r2,-24(fp)
802173f8:	10800617 	ldw	r2,24(r2)
802173fc:	10800037 	ldwio	r2,0(r2)

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
    {
        temporary_control = 
80217400:	1007883a 	mov	r3,r2
80217404:	00bffdc4 	movi	r2,-9
80217408:	1884703a 	and	r2,r3,r2
8021740c:	e0bffb15 	stw	r2,-20(fp)
                IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
                & ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
80217410:	e0bffa17 	ldw	r2,-24(fp)
80217414:	10800617 	ldw	r2,24(r2)
80217418:	e0fffb17 	ldw	r3,-20(fp)
8021741c:	10c00035 	stwio	r3,0(r2)
                temporary_control);
        
        /* clear the IRQ status- W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base,
80217420:	e0bffa17 	ldw	r2,-24(fp)
80217424:	10800617 	ldw	r2,24(r2)
80217428:	10800404 	addi	r2,r2,16
8021742c:	00c00044 	movi	r3,1
80217430:	10c00035 	stwio	r3,0(r2)
80217434:	00001106 	br	8021747c <alt_msgdma_irq+0xb4>
                ALT_MSGDMA_PREFETCHER_STATUS_IRQ_SET_MASK);
    }
    else
    {
        temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
80217438:	e0bffa17 	ldw	r2,-24(fp)
8021743c:	10800317 	ldw	r2,12(r2)
80217440:	10800104 	addi	r2,r2,4
80217444:	10800037 	ldwio	r2,0(r2)
80217448:	1007883a 	mov	r3,r2
8021744c:	00bffbc4 	movi	r2,-17
80217450:	1884703a 	and	r2,r3,r2
80217454:	e0bffb15 	stw	r2,-20(fp)
                & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
80217458:	e0bffa17 	ldw	r2,-24(fp)
8021745c:	10800317 	ldw	r2,12(r2)
80217460:	10800104 	addi	r2,r2,4
80217464:	e0fffb17 	ldw	r3,-20(fp)
80217468:	10c00035 	stwio	r3,0(r2)
        /* clear the IRQ status */
        IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
8021746c:	e0bffa17 	ldw	r2,-24(fp)
80217470:	10800317 	ldw	r2,12(r2)
80217474:	00c08004 	movi	r3,512
80217478:	10c00035 	stwio	r3,0(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
8021747c:	e0bffa17 	ldw	r2,-24(fp)
80217480:	10800b17 	ldw	r2,44(r2)
80217484:	10001226 	beq	r2,zero,802174d0 <alt_msgdma_irq+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80217488:	0005303a 	rdctl	r2,status
8021748c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80217490:	e0fffd17 	ldw	r3,-12(fp)
80217494:	00bfff84 	movi	r2,-2
80217498:	1884703a 	and	r2,r3,r2
8021749c:	1001703a 	wrctl	status,r2
  
  return context;
802174a0:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
802174a4:	e0bffc15 	stw	r2,-16(fp)
        dev->callback (dev->callback_context);
802174a8:	e0bffa17 	ldw	r2,-24(fp)
802174ac:	10800b17 	ldw	r2,44(r2)
802174b0:	e0fffa17 	ldw	r3,-24(fp)
802174b4:	18c00c17 	ldw	r3,48(r3)
802174b8:	1809883a 	mov	r4,r3
802174bc:	103ee83a 	callr	r2
802174c0:	e0bffc17 	ldw	r2,-16(fp)
802174c4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
802174c8:	e0bffe17 	ldw	r2,-8(fp)
802174cc:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
802174d0:	e0bffa17 	ldw	r2,-24(fp)
802174d4:	10801783 	ldbu	r2,94(r2)
802174d8:	10803fcc 	andi	r2,r2,255
802174dc:	10000a26 	beq	r2,zero,80217508 <alt_msgdma_irq+0x140>
    {
        temporary_control = 
                IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
802174e0:	e0bffa17 	ldw	r2,-24(fp)
802174e4:	10800617 	ldw	r2,24(r2)
802174e8:	10800037 	ldwio	r2,0(r2)
                | ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
802174ec:	10800214 	ori	r2,r2,8
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
    {
        temporary_control = 
802174f0:	e0bffb15 	stw	r2,-20(fp)
                IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
                | ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
802174f4:	e0bffa17 	ldw	r2,-24(fp)
802174f8:	10800617 	ldw	r2,24(r2)
802174fc:	e0fffb17 	ldw	r3,-20(fp)
80217500:	10c00035 	stwio	r3,0(r2)
                | (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
    }

    return;
80217504:	00000c06 	br	80217538 <alt_msgdma_irq+0x170>
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
                temporary_control);
    }
    else
    {
        temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
80217508:	e0bffa17 	ldw	r2,-24(fp)
8021750c:	10800317 	ldw	r2,12(r2)
80217510:	10800104 	addi	r2,r2,4
80217514:	10800037 	ldwio	r2,0(r2)
                | (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
80217518:	10800414 	ori	r2,r2,16
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
                temporary_control);
    }
    else
    {
        temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
8021751c:	e0bffb15 	stw	r2,-20(fp)
                | (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
80217520:	e0bffa17 	ldw	r2,-24(fp)
80217524:	10800317 	ldw	r2,12(r2)
80217528:	10800104 	addi	r2,r2,4
8021752c:	e0fffb17 	ldw	r3,-20(fp)
80217530:	10c00035 	stwio	r3,0(r2)
    }

    return;
80217534:	0001883a 	nop
}
80217538:	e037883a 	mov	sp,fp
8021753c:	dfc00117 	ldw	ra,4(sp)
80217540:	df000017 	ldw	fp,0(sp)
80217544:	dec00204 	addi	sp,sp,8
80217548:	f800283a 	ret

8021754c <alt_msgdma_construct_standard_descriptor>:
    alt_msgdma_standard_descriptor *descriptor,
    alt_u32 *read_address, 
    alt_u32 *write_address, 
    alt_u32 length, 
    alt_u32 control)
{
8021754c:	defffb04 	addi	sp,sp,-20
80217550:	df000415 	stw	fp,16(sp)
80217554:	df000404 	addi	fp,sp,16
80217558:	e13ffc15 	stw	r4,-16(fp)
8021755c:	e17ffd15 	stw	r5,-12(fp)
80217560:	e1bffe15 	stw	r6,-8(fp)
80217564:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
80217568:	e0bffc17 	ldw	r2,-16(fp)
8021756c:	10c01217 	ldw	r3,72(r2)
80217570:	e0800117 	ldw	r2,4(fp)
80217574:	18800436 	bltu	r3,r2,80217588 <alt_msgdma_construct_standard_descriptor+0x3c>
       dev->enhanced_features != 0
80217578:	e0bffc17 	ldw	r2,-16(fp)
8021757c:	10801703 	ldbu	r2,92(r2)
    alt_u32 *read_address, 
    alt_u32 *write_address, 
    alt_u32 length, 
    alt_u32 control)
{
    if(dev->max_byte < length ||
80217580:	10803fcc 	andi	r2,r2,255
80217584:	10000226 	beq	r2,zero,80217590 <alt_msgdma_construct_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
80217588:	00bffa84 	movi	r2,-22
8021758c:	00000e06 	br	802175c8 <alt_msgdma_construct_standard_descriptor+0x7c>
    }
    descriptor->read_address = read_address;
80217590:	e0bffd17 	ldw	r2,-12(fp)
80217594:	e0fffe17 	ldw	r3,-8(fp)
80217598:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
8021759c:	e0bffd17 	ldw	r2,-12(fp)
802175a0:	e0ffff17 	ldw	r3,-4(fp)
802175a4:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
802175a8:	e0bffd17 	ldw	r2,-12(fp)
802175ac:	e0c00117 	ldw	r3,4(fp)
802175b0:	10c00215 	stw	r3,8(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
802175b4:	e0800217 	ldw	r2,8(fp)
802175b8:	10e00034 	orhi	r3,r2,32768
802175bc:	e0bffd17 	ldw	r2,-12(fp)
802175c0:	10c00315 	stw	r3,12(r2)
    
    return 0;
802175c4:	0005883a 	mov	r2,zero
}
802175c8:	e037883a 	mov	sp,fp
802175cc:	df000017 	ldw	fp,0(sp)
802175d0:	dec00104 	addi	sp,sp,4
802175d4:	f800283a 	ret

802175d8 <alt_msgdma_construct_extended_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
802175d8:	defff604 	addi	sp,sp,-40
802175dc:	df000915 	stw	fp,36(sp)
802175e0:	df000904 	addi	fp,sp,36
802175e4:	e13ff715 	stw	r4,-36(fp)
802175e8:	e17ff815 	stw	r5,-32(fp)
802175ec:	e1bff915 	stw	r6,-28(fp)
802175f0:	e1fffa15 	stw	r7,-24(fp)
802175f4:	e1800317 	ldw	r6,12(fp)
802175f8:	e1400417 	ldw	r5,16(fp)
802175fc:	e1000517 	ldw	r4,20(fp)
80217600:	e0c00617 	ldw	r3,24(fp)
80217604:	e0800717 	ldw	r2,28(fp)
80217608:	e1bffb0d 	sth	r6,-20(fp)
8021760c:	e17ffc05 	stb	r5,-16(fp)
80217610:	e13ffd05 	stb	r4,-12(fp)
80217614:	e0fffe0d 	sth	r3,-8(fp)
80217618:	e0bfff0d 	sth	r2,-4(fp)
    if(dev->max_byte < length ||
8021761c:	e0bff717 	ldw	r2,-36(fp)
80217620:	10c01217 	ldw	r3,72(r2)
80217624:	e0800117 	ldw	r2,4(fp)
80217628:	18801936 	bltu	r3,r2,80217690 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
8021762c:	e13ff717 	ldw	r4,-36(fp)
80217630:	20801317 	ldw	r2,76(r4)
80217634:	20c01417 	ldw	r3,80(r4)
80217638:	e13ffe0b 	ldhu	r4,-8(fp)
8021763c:	213fffcc 	andi	r4,r4,65535
80217640:	2015883a 	mov	r10,r4
80217644:	0017883a 	mov	r11,zero
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
    if(dev->max_byte < length ||
80217648:	1ac01136 	bltu	r3,r11,80217690 <alt_msgdma_construct_extended_descriptor+0xb8>
8021764c:	58c0011e 	bne	r11,r3,80217654 <alt_msgdma_construct_extended_descriptor+0x7c>
80217650:	12800f36 	bltu	r2,r10,80217690 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
80217654:	e13ff717 	ldw	r4,-36(fp)
80217658:	20801317 	ldw	r2,76(r4)
8021765c:	20c01417 	ldw	r3,80(r4)
80217660:	e13fff0b 	ldhu	r4,-4(fp)
80217664:	213fffcc 	andi	r4,r4,65535
80217668:	2011883a 	mov	r8,r4
8021766c:	0013883a 	mov	r9,zero
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
80217670:	1a400736 	bltu	r3,r9,80217690 <alt_msgdma_construct_extended_descriptor+0xb8>
80217674:	48c0011e 	bne	r9,r3,8021767c <alt_msgdma_construct_extended_descriptor+0xa4>
80217678:	12000536 	bltu	r2,r8,80217690 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
8021767c:	e0bff717 	ldw	r2,-36(fp)
80217680:	10801703 	ldbu	r2,92(r2)
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
80217684:	10803fcc 	andi	r2,r2,255
80217688:	10800060 	cmpeqi	r2,r2,1
8021768c:	1000021e 	bne	r2,zero,80217698 <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
80217690:	00bffa84 	movi	r2,-22
80217694:	00002106 	br	8021771c <alt_msgdma_construct_extended_descriptor+0x144>
    }
    
    descriptor->read_address_low = read_address;
80217698:	e0bff817 	ldw	r2,-32(fp)
8021769c:	e0fff917 	ldw	r3,-28(fp)
802176a0:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_low = write_address;
802176a4:	e0bff817 	ldw	r2,-32(fp)
802176a8:	e0fffa17 	ldw	r3,-24(fp)
802176ac:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
802176b0:	e0bff817 	ldw	r2,-32(fp)
802176b4:	e0c00117 	ldw	r3,4(fp)
802176b8:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
802176bc:	e0bff817 	ldw	r2,-32(fp)
802176c0:	e0fffb0b 	ldhu	r3,-20(fp)
802176c4:	10c0030d 	sth	r3,12(r2)
    descriptor->read_burst_count = read_burst_count;
802176c8:	e0bff817 	ldw	r2,-32(fp)
802176cc:	e0fffc03 	ldbu	r3,-16(fp)
802176d0:	10c00385 	stb	r3,14(r2)
    descriptor->write_burst_count = write_burst_count;
802176d4:	e0bff817 	ldw	r2,-32(fp)
802176d8:	e0fffd03 	ldbu	r3,-12(fp)
802176dc:	10c003c5 	stb	r3,15(r2)
    descriptor->read_stride = read_stride;
802176e0:	e0bff817 	ldw	r2,-32(fp)
802176e4:	e0fffe0b 	ldhu	r3,-8(fp)
802176e8:	10c0040d 	sth	r3,16(r2)
    descriptor->write_stride = write_stride;
802176ec:	e0bff817 	ldw	r2,-32(fp)
802176f0:	e0ffff0b 	ldhu	r3,-4(fp)
802176f4:	10c0048d 	sth	r3,18(r2)
    descriptor->read_address_high = NULL;
802176f8:	e0bff817 	ldw	r2,-32(fp)
802176fc:	10000515 	stw	zero,20(r2)
    descriptor->write_address_high = NULL;
80217700:	e0bff817 	ldw	r2,-32(fp)
80217704:	10000615 	stw	zero,24(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
80217708:	e0800217 	ldw	r2,8(fp)
8021770c:	10e00034 	orhi	r3,r2,32768
80217710:	e0bff817 	ldw	r2,-32(fp)
80217714:	10c00715 	stw	r3,28(r2)

  return 0 ;
80217718:	0005883a 	mov	r2,zero

}
8021771c:	e037883a 	mov	sp,fp
80217720:	df000017 	ldw	fp,0(sp)
80217724:	dec00104 	addi	sp,sp,4
80217728:	f800283a 	ret

8021772c <alt_msgdma_descriptor_async_transfer>:
 */
static int alt_msgdma_descriptor_async_transfer (
    alt_msgdma_dev *dev, 
    alt_msgdma_standard_descriptor *standard_desc, 
    alt_msgdma_extended_descriptor *extended_desc)
{
8021772c:	defff004 	addi	sp,sp,-64
80217730:	dfc00f15 	stw	ra,60(sp)
80217734:	df000e15 	stw	fp,56(sp)
80217738:	df000e04 	addi	fp,sp,56
8021773c:	e13ffd15 	stw	r4,-12(fp)
80217740:	e17ffe15 	stw	r5,-8(fp)
80217744:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control = 0;
80217748:	e03ff315 	stw	zero,-52(fp)
    alt_irq_context context = 0;
8021774c:	e03ff415 	stw	zero,-48(fp)
    alt_u16 counter = 0;
80217750:	e03ff20d 	sth	zero,-56(fp)
    alt_u32 fifo_read_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
80217754:	e0bffd17 	ldw	r2,-12(fp)
80217758:	10800317 	ldw	r2,12(r2)
8021775c:	10800204 	addi	r2,r2,8
80217760:	10800037 	ldwio	r2,0(r2)
    alt_msgdma_extended_descriptor *extended_desc)
{
    alt_u32 control = 0;
    alt_irq_context context = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
80217764:	10bfffcc 	andi	r2,r2,65535
80217768:	e0bff515 	stw	r2,-44(fp)
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8021776c:	e0bffd17 	ldw	r2,-12(fp)
80217770:	10800317 	ldw	r2,12(r2)
80217774:	10800204 	addi	r2,r2,8
80217778:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
8021777c:	1004d43a 	srli	r2,r2,16
80217780:	e0bff615 	stw	r2,-40(fp)
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

    /* Return with error immediately if one of read/write buffer is full */
    if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
80217784:	e0bffd17 	ldw	r2,-12(fp)
80217788:	10800917 	ldw	r2,36(r2)
8021778c:	e0fff617 	ldw	r3,-40(fp)
80217790:	1880042e 	bgeu	r3,r2,802177a4 <alt_msgdma_descriptor_async_transfer+0x78>
        (dev->descriptor_fifo_depth <= fifo_read_fill_level))
80217794:	e0bffd17 	ldw	r2,-12(fp)
80217798:	10800917 	ldw	r2,36(r2)
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

    /* Return with error immediately if one of read/write buffer is full */
    if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8021779c:	e0fff517 	ldw	r3,-44(fp)
802177a0:	18800236 	bltu	r3,r2,802177ac <alt_msgdma_descriptor_async_transfer+0x80>
        (dev->descriptor_fifo_depth <= fifo_read_fill_level))
    {
        /*at least one write or read FIFO descriptor buffer is full,
        returning so that this function is non-blocking*/
        return -ENOSPC;
802177a4:	00bff904 	movi	r2,-28
802177a8:	00008f06 	br	802179e8 <alt_msgdma_descriptor_async_transfer+0x2bc>
    ALT_SEM_PEND (dev->regs_lock, 0);
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
802177ac:	00800804 	movi	r2,32
802177b0:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
802177b4:	0005303a 	rdctl	r2,status
802177b8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
802177bc:	e0fff717 	ldw	r3,-36(fp)
802177c0:	00bfff84 	movi	r2,-2
802177c4:	1884703a 	and	r2,r3,r2
802177c8:	1001703a 	wrctl	status,r2
  
  return context;
802177cc:	e0bff717 	ldw	r2,-36(fp)
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
802177d0:	e0bff415 	stw	r2,-48(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
802177d4:	e0bffd17 	ldw	r2,-12(fp)
802177d8:	10800317 	ldw	r2,12(r2)
802177dc:	10800104 	addi	r2,r2,4
802177e0:	e0fff317 	ldw	r3,-52(fp)
802177e4:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
802177e8:	e0bffd17 	ldw	r2,-12(fp)
802177ec:	10800317 	ldw	r2,12(r2)
802177f0:	e0fffd17 	ldw	r3,-12(fp)
802177f4:	18c00317 	ldw	r3,12(r3)
802177f8:	18c00037 	ldwio	r3,0(r3)
802177fc:	10c00035 	stwio	r3,0(r2)
80217800:	e0bff417 	ldw	r2,-48(fp)
80217804:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80217808:	e0bffc17 	ldw	r2,-16(fp)
8021780c:	1001703a 	wrctl	status,r2
        dev->csr_base, 
        IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
80217810:	e0bffe17 	ldw	r2,-8(fp)
80217814:	10001a26 	beq	r2,zero,80217880 <alt_msgdma_descriptor_async_transfer+0x154>
80217818:	e0bfff17 	ldw	r2,-4(fp)
8021781c:	1000181e 	bne	r2,zero,80217880 <alt_msgdma_descriptor_async_transfer+0x154>
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
      write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
80217820:	00000d06 	br	80217858 <alt_msgdma_descriptor_async_transfer+0x12c>
        dev->csr_base, dev->descriptor_base, standard_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
80217824:	01000044 	movi	r4,1
80217828:	02150d00 	call	802150d0 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8021782c:	e0bff20b 	ldhu	r2,-56(fp)
80217830:	1084e230 	cmpltui	r2,r2,5000
80217834:	1000051e 	bne	r2,zero,8021784c <alt_msgdma_descriptor_async_transfer+0x120>
            {
                alt_printf("time out after 5 msec while waiting" 
80217838:	012008b4 	movhi	r4,32802
8021783c:	212d6404 	addi	r4,r4,-19056
80217840:	0219b240 	call	80219b24 <alt_printf>
                * registers semaphore so that other threads can access the 
                * registers.
                */
                ALT_SEM_POST (dev->regs_lock);
                
                return -ETIME;
80217844:	00bff084 	movi	r2,-62
80217848:	00006706 	br	802179e8 <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
8021784c:	e0bff20b 	ldhu	r2,-56(fp)
80217850:	10800044 	addi	r2,r2,1
80217854:	e0bff20d 	sth	r2,-56(fp)

    if (NULL != standard_desc && NULL == extended_desc)
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
      write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
80217858:	e0bffd17 	ldw	r2,-12(fp)
8021785c:	10c00317 	ldw	r3,12(r2)
80217860:	e0bffd17 	ldw	r2,-12(fp)
80217864:	10800417 	ldw	r2,16(r2)
80217868:	e1bffe17 	ldw	r6,-8(fp)
8021786c:	100b883a 	mov	r5,r2
80217870:	1809883a 	mov	r4,r3
80217874:	02172080 	call	80217208 <alt_msgdma_write_standard_descriptor>
80217878:	103fea1e 	bne	r2,zero,80217824 <__reset+0xfa1f7824>
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
        dev->csr_base, 
        IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
8021787c:	00001f06 	br	802178fc <alt_msgdma_descriptor_async_transfer+0x1d0>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
80217880:	e0bffe17 	ldw	r2,-8(fp)
80217884:	10001b1e 	bne	r2,zero,802178f4 <alt_msgdma_descriptor_async_transfer+0x1c8>
80217888:	e0bfff17 	ldw	r2,-4(fp)
8021788c:	10001926 	beq	r2,zero,802178f4 <alt_msgdma_descriptor_async_transfer+0x1c8>
    {
        counter = 0; /* reset counter */
80217890:	e03ff20d 	sth	zero,-56(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
      write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
80217894:	00000d06 	br	802178cc <alt_msgdma_descriptor_async_transfer+0x1a0>
        dev->csr_base, 
        dev->descriptor_base, 
        extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
80217898:	01000044 	movi	r4,1
8021789c:	02150d00 	call	802150d0 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
802178a0:	e0bff20b 	ldhu	r2,-56(fp)
802178a4:	1084e230 	cmpltui	r2,r2,5000
802178a8:	1000051e 	bne	r2,zero,802178c0 <alt_msgdma_descriptor_async_transfer+0x194>
            {
                alt_printf("time out after 5 msec while waiting free FIFO buffer" 
802178ac:	012008b4 	movhi	r4,32802
802178b0:	212d7a04 	addi	r4,r4,-18968
802178b4:	0219b240 	call	80219b24 <alt_printf>
                * registers semaphore so that other threads can access the 
                * registers.
                */
                ALT_SEM_POST (dev->regs_lock);
                
                return -ETIME;
802178b8:	00bff084 	movi	r2,-62
802178bc:	00004a06 	br	802179e8 <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
802178c0:	e0bff20b 	ldhu	r2,-56(fp)
802178c4:	10800044 	addi	r2,r2,1
802178c8:	e0bff20d 	sth	r2,-56(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
      write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
802178cc:	e0bffd17 	ldw	r2,-12(fp)
802178d0:	10c00317 	ldw	r3,12(r2)
802178d4:	e0bffd17 	ldw	r2,-12(fp)
802178d8:	10800417 	ldw	r2,16(r2)
802178dc:	e1bfff17 	ldw	r6,-4(fp)
802178e0:	100b883a 	mov	r5,r2
802178e4:	1809883a 	mov	r4,r3
802178e8:	021729c0 	call	8021729c <alt_msgdma_write_extended_descriptor>
802178ec:	103fea1e 	bne	r2,zero,80217898 <__reset+0xfa1f7898>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
802178f0:	00000206 	br	802178fc <alt_msgdma_descriptor_async_transfer+0x1d0>
        * semaphore so that other threads can access the registers.
        */
        ALT_SEM_POST (dev->regs_lock);
        
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
802178f4:	00bfffc4 	movi	r2,-1
802178f8:	00003b06 	br	802179e8 <alt_msgdma_descriptor_async_transfer+0x2bc>
    * If a callback routine has been previously registered which will be
    * called from the msgdma ISR. Set up controller to:
    *  - Run
    *  - Stop on an error with any particular descriptor
    */
    if(dev->callback)
802178fc:	e0bffd17 	ldw	r2,-12(fp)
80217900:	10800b17 	ldw	r2,44(r2)
80217904:	10001c26 	beq	r2,zero,80217978 <alt_msgdma_descriptor_async_transfer+0x24c>
    {

        control |= (dev->control |
80217908:	e0bffd17 	ldw	r2,-12(fp)
8021790c:	10c00d17 	ldw	r3,52(r2)
80217910:	e0bff317 	ldw	r2,-52(fp)
80217914:	1884b03a 	or	r2,r3,r2
80217918:	10800514 	ori	r2,r2,20
8021791c:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
                    ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
80217920:	e0fff317 	ldw	r3,-52(fp)
80217924:	00bff7c4 	movi	r2,-33
80217928:	1884703a 	and	r2,r3,r2
8021792c:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80217930:	0005303a 	rdctl	r2,status
80217934:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80217938:	e0fffa17 	ldw	r3,-24(fp)
8021793c:	00bfff84 	movi	r2,-2
80217940:	1884703a 	and	r2,r3,r2
80217944:	1001703a 	wrctl	status,r2
  
  return context;
80217948:	e0bffa17 	ldw	r2,-24(fp)
    /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
8021794c:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
80217950:	e0bffd17 	ldw	r2,-12(fp)
80217954:	10800317 	ldw	r2,12(r2)
80217958:	10800104 	addi	r2,r2,4
8021795c:	e0fff317 	ldw	r3,-52(fp)
80217960:	10c00035 	stwio	r3,0(r2)
80217964:	e0bff417 	ldw	r2,-48(fp)
80217968:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8021796c:	e0bff817 	ldw	r2,-32(fp)
80217970:	1001703a 	wrctl	status,r2
80217974:	00001b06 	br	802179e4 <alt_msgdma_descriptor_async_transfer+0x2b8>
    *   - Stop on an error with any particular descriptor
    *   - Disable interrupt generation
    */
    else
    {
        control |= (dev->control |
80217978:	e0bffd17 	ldw	r2,-12(fp)
8021797c:	10c00d17 	ldw	r3,52(r2)
80217980:	e0bff317 	ldw	r2,-52(fp)
80217984:	1884b03a 	or	r2,r3,r2
80217988:	10800114 	ori	r2,r2,4
8021798c:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK );
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
80217990:	e0fff317 	ldw	r3,-52(fp)
80217994:	00bff3c4 	movi	r2,-49
80217998:	1884703a 	and	r2,r3,r2
8021799c:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
802179a0:	0005303a 	rdctl	r2,status
802179a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
802179a8:	e0fffb17 	ldw	r3,-20(fp)
802179ac:	00bfff84 	movi	r2,-2
802179b0:	1884703a 	and	r2,r3,r2
802179b4:	1001703a 	wrctl	status,r2
  
  return context;
802179b8:	e0bffb17 	ldw	r2,-20(fp)
                   (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all();
802179bc:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
802179c0:	e0bffd17 	ldw	r2,-12(fp)
802179c4:	10800317 	ldw	r2,12(r2)
802179c8:	10800104 	addi	r2,r2,4
802179cc:	e0fff317 	ldw	r3,-52(fp)
802179d0:	10c00035 	stwio	r3,0(r2)
802179d4:	e0bff417 	ldw	r2,-48(fp)
802179d8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
802179dc:	e0bff917 	ldw	r2,-28(fp)
802179e0:	1001703a 	wrctl	status,r2
     * Now that access to the registers is complete, release the registers
     * semaphore so that other threads can access the registers.
     */
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
802179e4:	0005883a 	mov	r2,zero
}
802179e8:	e037883a 	mov	sp,fp
802179ec:	dfc00117 	ldw	ra,4(sp)
802179f0:	df000017 	ldw	fp,0(sp)
802179f4:	dec00204 	addi	sp,sp,8
802179f8:	f800283a 	ret

802179fc <alt_msgdma_descriptor_sync_transfer>:
 */
static int alt_msgdma_descriptor_sync_transfer (
    alt_msgdma_dev *dev, 
    alt_msgdma_standard_descriptor *standard_desc, 
    alt_msgdma_extended_descriptor *extended_desc)
{
802179fc:	defff004 	addi	sp,sp,-64
80217a00:	dfc00f15 	stw	ra,60(sp)
80217a04:	df000e15 	stw	fp,56(sp)
80217a08:	df000e04 	addi	fp,sp,56
80217a0c:	e13ffd15 	stw	r4,-12(fp)
80217a10:	e17ffe15 	stw	r5,-8(fp)
80217a14:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control=0;
80217a18:	e03ff615 	stw	zero,-40(fp)
    alt_irq_context context=0;
80217a1c:	e03ff715 	stw	zero,-36(fp)
    alt_u32 csr_status = 0;
80217a20:	e03ff215 	stw	zero,-56(fp)
    alt_u16 counter = 0;
80217a24:	e03ff30d 	sth	zero,-52(fp)
    alt_u32 fifo_read_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
80217a28:	e0bffd17 	ldw	r2,-12(fp)
80217a2c:	10800317 	ldw	r2,12(r2)
80217a30:	10800204 	addi	r2,r2,8
80217a34:	10800037 	ldwio	r2,0(r2)
{
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
80217a38:	10bfffcc 	andi	r2,r2,65535
80217a3c:	e0bff415 	stw	r2,-48(fp)
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
80217a40:	e0bffd17 	ldw	r2,-12(fp)
80217a44:	10800317 	ldw	r2,12(r2)
80217a48:	10800204 	addi	r2,r2,8
80217a4c:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
80217a50:	1004d43a 	srli	r2,r2,16
80217a54:	e0bff515 	stw	r2,-44(fp)
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
    alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK | 
80217a58:	00807804 	movi	r2,480
80217a5c:	e0bff815 	stw	r2,-32(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
80217a60:	00001906 	br	80217ac8 <alt_msgdma_descriptor_sync_transfer+0xcc>
        (dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
80217a64:	01000044 	movi	r4,1
80217a68:	02150d00 	call	802150d0 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
80217a6c:	e0bff30b 	ldhu	r2,-52(fp)
80217a70:	1084e230 	cmpltui	r2,r2,5000
80217a74:	1000051e 	bne	r2,zero,80217a8c <alt_msgdma_descriptor_sync_transfer+0x90>
        {
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
80217a78:	012008b4 	movhi	r4,32802
80217a7c:	212d9004 	addi	r4,r4,-18880
80217a80:	0219b240 	call	80219b24 <alt_printf>
                " for storing descriptor\n");
            return -ETIME;
80217a84:	00bff084 	movi	r2,-62
80217a88:	0000b506 	br	80217d60 <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;  
80217a8c:	e0bff30b 	ldhu	r2,-52(fp)
80217a90:	10800044 	addi	r2,r2,1
80217a94:	e0bff30d 	sth	r2,-52(fp)
        fifo_read_fill_level = (
            IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
80217a98:	e0bffd17 	ldw	r2,-12(fp)
80217a9c:	10800317 	ldw	r2,12(r2)
80217aa0:	10800204 	addi	r2,r2,8
80217aa4:	10800037 	ldwio	r2,0(r2)
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
                " for storing descriptor\n");
            return -ETIME;
        }
        counter++;  
        fifo_read_fill_level = (
80217aa8:	10bfffcc 	andi	r2,r2,65535
80217aac:	e0bff415 	stw	r2,-48(fp)
            IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
            ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
            ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
            IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
80217ab0:	e0bffd17 	ldw	r2,-12(fp)
80217ab4:	10800317 	ldw	r2,12(r2)
80217ab8:	10800204 	addi	r2,r2,8
80217abc:	10800037 	ldwio	r2,0(r2)
        counter++;  
        fifo_read_fill_level = (
            IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
            ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
            ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
80217ac0:	1004d43a 	srli	r2,r2,16
80217ac4:	e0bff515 	stw	r2,-44(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
80217ac8:	e0bffd17 	ldw	r2,-12(fp)
80217acc:	10800917 	ldw	r2,36(r2)
80217ad0:	e0fff517 	ldw	r3,-44(fp)
80217ad4:	18bfe32e 	bgeu	r3,r2,80217a64 <__reset+0xfa1f7a64>
        (dev->descriptor_fifo_depth <= fifo_read_fill_level))
80217ad8:	e0bffd17 	ldw	r2,-12(fp)
80217adc:	10800917 	ldw	r2,36(r2)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
80217ae0:	e0fff417 	ldw	r3,-48(fp)
80217ae4:	18bfdf2e 	bgeu	r3,r2,80217a64 <__reset+0xfa1f7a64>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80217ae8:	0005303a 	rdctl	r2,status
80217aec:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80217af0:	e0fffc17 	ldw	r3,-16(fp)
80217af4:	00bfff84 	movi	r2,-2
80217af8:	1884703a 	and	r2,r3,r2
80217afc:	1001703a 	wrctl	status,r2
  
  return context;
80217b00:	e0bffc17 	ldw	r2,-16(fp)
    ALT_SEM_PEND (dev->regs_lock, 0);
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
80217b04:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
80217b08:	e0bffd17 	ldw	r2,-12(fp)
80217b0c:	10800317 	ldw	r2,12(r2)
80217b10:	10800104 	addi	r2,r2,4
80217b14:	00c00804 	movi	r3,32
80217b18:	10c00035 	stwio	r3,0(r2)
        ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
80217b1c:	e0bffd17 	ldw	r2,-12(fp)
80217b20:	10800317 	ldw	r2,12(r2)
80217b24:	e0fffd17 	ldw	r3,-12(fp)
80217b28:	18c00317 	ldw	r3,12(r3)
80217b2c:	18c00037 	ldwio	r3,0(r3)
80217b30:	10c00035 	stwio	r3,0(r2)
        dev->csr_base, 
        IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
80217b34:	e0bffe17 	ldw	r2,-8(fp)
80217b38:	10001b26 	beq	r2,zero,80217ba8 <alt_msgdma_descriptor_sync_transfer+0x1ac>
80217b3c:	e0bfff17 	ldw	r2,-4(fp)
80217b40:	1000191e 	bne	r2,zero,80217ba8 <alt_msgdma_descriptor_sync_transfer+0x1ac>
    {
        counter = 0; /* reset counter */
80217b44:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
          write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
80217b48:	00000d06 	br	80217b80 <alt_msgdma_descriptor_sync_transfer+0x184>
            dev->csr_base, dev->descriptor_base, standard_desc))
        {     
            alt_busy_sleep(1); /* delay 1us */
80217b4c:	01000044 	movi	r4,1
80217b50:	02150d00 	call	802150d0 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
80217b54:	e0bff30b 	ldhu	r2,-52(fp)
80217b58:	1084e230 	cmpltui	r2,r2,5000
80217b5c:	1000051e 	bne	r2,zero,80217b74 <alt_msgdma_descriptor_sync_transfer+0x178>
            {
                alt_printf("time out after 5 msec while writing standard" 
80217b60:	012008b4 	movhi	r4,32802
80217b64:	212da404 	addi	r4,r4,-18800
80217b68:	0219b240 	call	80219b24 <alt_printf>
                * registers semaphore so that other threads can access the 
                * registers.
                */
                ALT_SEM_POST (dev->regs_lock);
                
                return -ETIME;
80217b6c:	00bff084 	movi	r2,-62
80217b70:	00007b06 	br	80217d60 <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;    
80217b74:	e0bff30b 	ldhu	r2,-52(fp)
80217b78:	10800044 	addi	r2,r2,1
80217b7c:	e0bff30d 	sth	r2,-52(fp)
    if (NULL != standard_desc && NULL == extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
          write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
80217b80:	e0bffd17 	ldw	r2,-12(fp)
80217b84:	10c00317 	ldw	r3,12(r2)
80217b88:	e0bffd17 	ldw	r2,-12(fp)
80217b8c:	10800417 	ldw	r2,16(r2)
80217b90:	e1bffe17 	ldw	r6,-8(fp)
80217b94:	100b883a 	mov	r5,r2
80217b98:	1809883a 	mov	r4,r3
80217b9c:	02172080 	call	80217208 <alt_msgdma_write_standard_descriptor>
80217ba0:	103fea1e 	bne	r2,zero,80217b4c <__reset+0xfa1f7b4c>
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
        dev->csr_base, 
        IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
80217ba4:	00001f06 	br	80217c24 <alt_msgdma_descriptor_sync_transfer+0x228>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
80217ba8:	e0bffe17 	ldw	r2,-8(fp)
80217bac:	10001b1e 	bne	r2,zero,80217c1c <alt_msgdma_descriptor_sync_transfer+0x220>
80217bb0:	e0bfff17 	ldw	r2,-4(fp)
80217bb4:	10001926 	beq	r2,zero,80217c1c <alt_msgdma_descriptor_sync_transfer+0x220>
    {
        counter = 0; /* reset counter */
80217bb8:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
          write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
80217bbc:	00000d06 	br	80217bf4 <alt_msgdma_descriptor_sync_transfer+0x1f8>
            dev->csr_base, dev->descriptor_base, extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
80217bc0:	01000044 	movi	r4,1
80217bc4:	02150d00 	call	802150d0 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
80217bc8:	e0bff30b 	ldhu	r2,-52(fp)
80217bcc:	1084e230 	cmpltui	r2,r2,5000
80217bd0:	1000051e 	bne	r2,zero,80217be8 <alt_msgdma_descriptor_sync_transfer+0x1ec>
            {
                alt_printf("time out after 5 msec while writing extended" 
80217bd4:	012008b4 	movhi	r4,32802
80217bd8:	212db504 	addi	r4,r4,-18732
80217bdc:	0219b240 	call	80219b24 <alt_printf>
                * registers semaphore so that other threads can access the 
                * registers.
                */
                ALT_SEM_POST (dev->regs_lock);
                
                return -ETIME;
80217be0:	00bff084 	movi	r2,-62
80217be4:	00005e06 	br	80217d60 <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;
80217be8:	e0bff30b 	ldhu	r2,-52(fp)
80217bec:	10800044 	addi	r2,r2,1
80217bf0:	e0bff30d 	sth	r2,-52(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
          write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
80217bf4:	e0bffd17 	ldw	r2,-12(fp)
80217bf8:	10c00317 	ldw	r3,12(r2)
80217bfc:	e0bffd17 	ldw	r2,-12(fp)
80217c00:	10800417 	ldw	r2,16(r2)
80217c04:	e1bfff17 	ldw	r6,-4(fp)
80217c08:	100b883a 	mov	r5,r2
80217c0c:	1809883a 	mov	r4,r3
80217c10:	021729c0 	call	8021729c <alt_msgdma_write_extended_descriptor>
80217c14:	103fea1e 	bne	r2,zero,80217bc0 <__reset+0xfa1f7bc0>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
80217c18:	00000206 	br	80217c24 <alt_msgdma_descriptor_sync_transfer+0x228>
        * semaphore so that other threads can access the registers.
        */
        ALT_SEM_POST (dev->regs_lock);
        
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
80217c1c:	00bfffc4 	movi	r2,-1
80217c20:	00004f06 	br	80217d60 <alt_msgdma_descriptor_sync_transfer+0x364>
    * Set up msgdma controller to:
    * - Disable interrupt generation
    * - Run once a valid descriptor is written to controller
    * - Stop on an error with any particular descriptor
    */
     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
80217c24:	e0bffd17 	ldw	r2,-12(fp)
80217c28:	10800317 	ldw	r2,12(r2)
80217c2c:	10800104 	addi	r2,r2,4
80217c30:	e0fffd17 	ldw	r3,-12(fp)
80217c34:	19000d17 	ldw	r4,52(r3)
80217c38:	00fff2c4 	movi	r3,-53
80217c3c:	20c6703a 	and	r3,r4,r3
80217c40:	18c00114 	ori	r3,r3,4
80217c44:	10c00035 	stwio	r3,0(r2)
80217c48:	e0bff717 	ldw	r2,-36(fp)
80217c4c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80217c50:	e0bff917 	ldw	r2,-28(fp)
80217c54:	1001703a 	wrctl	status,r2
        (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
        (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK)) ;
     
    alt_irq_enable_all(context);
     
    counter = 0; /* reset counter */ 
80217c58:	e03ff30d 	sth	zero,-52(fp)
    
    csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
80217c5c:	e0bffd17 	ldw	r2,-12(fp)
80217c60:	10800317 	ldw	r2,12(r2)
80217c64:	10800037 	ldwio	r2,0(r2)
80217c68:	e0bff215 	stw	r2,-56(fp)
    
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
80217c6c:	00001106 	br	80217cb4 <alt_msgdma_descriptor_sync_transfer+0x2b8>
    {
        alt_busy_sleep(1); /* delay 1us */
80217c70:	01000044 	movi	r4,1
80217c74:	02150d00 	call	802150d0 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
80217c78:	e0bff30b 	ldhu	r2,-52(fp)
80217c7c:	1084e230 	cmpltui	r2,r2,5000
80217c80:	1000051e 	bne	r2,zero,80217c98 <alt_msgdma_descriptor_sync_transfer+0x29c>
        {
            alt_printf("time out after 5 msec while waiting for any pending" 
80217c84:	012008b4 	movhi	r4,32802
80217c88:	212dc604 	addi	r4,r4,-18664
80217c8c:	0219b240 	call	80219b24 <alt_printf>
            * Now that access to the registers is complete, release the registers
            * semaphore so that other threads can access the registers.
            */
            ALT_SEM_POST (dev->regs_lock);
            
            return -ETIME;
80217c90:	00bff084 	movi	r2,-62
80217c94:	00003206 	br	80217d60 <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;
80217c98:	e0bff30b 	ldhu	r2,-52(fp)
80217c9c:	10800044 	addi	r2,r2,1
80217ca0:	e0bff30d 	sth	r2,-52(fp)
        csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
80217ca4:	e0bffd17 	ldw	r2,-12(fp)
80217ca8:	10800317 	ldw	r2,12(r2)
80217cac:	10800037 	ldwio	r2,0(r2)
80217cb0:	e0bff215 	stw	r2,-56(fp)
    
    csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
    
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
80217cb4:	e0fff217 	ldw	r3,-56(fp)
80217cb8:	e0bff817 	ldw	r2,-32(fp)
80217cbc:	1884703a 	and	r2,r3,r2
80217cc0:	1000031e 	bne	r2,zero,80217cd0 <alt_msgdma_descriptor_sync_transfer+0x2d4>
80217cc4:	e0bff217 	ldw	r2,-56(fp)
80217cc8:	1080004c 	andi	r2,r2,1
80217ccc:	103fe81e 	bne	r2,zero,80217c70 <__reset+0xfa1f7c70>
    }
    

    /*Errors or conditions causing the dispatcher stopping issuing read/write 
      commands to masters*/
    if(0 != (csr_status & error))
80217cd0:	e0fff217 	ldw	r3,-56(fp)
80217cd4:	e0bff817 	ldw	r2,-32(fp)
80217cd8:	1884703a 	and	r2,r3,r2
80217cdc:	10000226 	beq	r2,zero,80217ce8 <alt_msgdma_descriptor_sync_transfer+0x2ec>
        * Now that access to the registers is complete, release the registers
        * semaphore so that other threads can access the registers.
        */
        ALT_SEM_POST (dev->regs_lock);
        
        return error;
80217ce0:	e0bff817 	ldw	r2,-32(fp)
80217ce4:	00001e06 	br	80217d60 <alt_msgdma_descriptor_sync_transfer+0x364>
    }

    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) | 
80217ce8:	e0bffd17 	ldw	r2,-12(fp)
80217cec:	10800317 	ldw	r2,12(r2)
80217cf0:	10800104 	addi	r2,r2,4
80217cf4:	10800037 	ldwio	r2,0(r2)
80217cf8:	10800814 	ori	r2,r2,32
80217cfc:	e0bff615 	stw	r2,-40(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80217d00:	0005303a 	rdctl	r2,status
80217d04:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80217d08:	e0fffa17 	ldw	r3,-24(fp)
80217d0c:	00bfff84 	movi	r2,-2
80217d10:	1884703a 	and	r2,r3,r2
80217d14:	1001703a 	wrctl	status,r2
  
  return context;
80217d18:	e0bffa17 	ldw	r2,-24(fp)
    ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();  
80217d1c:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
80217d20:	e0bffd17 	ldw	r2,-12(fp)
80217d24:	10800317 	ldw	r2,12(r2)
80217d28:	10800104 	addi	r2,r2,4
80217d2c:	e0fff617 	ldw	r3,-40(fp)
80217d30:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
80217d34:	e0bffd17 	ldw	r2,-12(fp)
80217d38:	10800317 	ldw	r2,12(r2)
80217d3c:	e0fffd17 	ldw	r3,-12(fp)
80217d40:	18c00317 	ldw	r3,12(r3)
80217d44:	18c00037 	ldwio	r3,0(r3)
80217d48:	10c00035 	stwio	r3,0(r2)
80217d4c:	e0bff717 	ldw	r2,-36(fp)
80217d50:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80217d54:	e0bffb17 	ldw	r2,-20(fp)
80217d58:	1001703a 	wrctl	status,r2
    * Now that access to the registers is complete, release the registers
    * semaphore so that other threads can access the registers.
    */
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
80217d5c:	0005883a 	mov	r2,zero

}
80217d60:	e037883a 	mov	sp,fp
80217d64:	dfc00117 	ldw	ra,4(sp)
80217d68:	df000017 	ldw	fp,0(sp)
80217d6c:	dec00204 	addi	sp,sp,8
80217d70:	f800283a 	ret

80217d74 <alt_msgdma_construct_standard_st_to_mm_descriptor>:
 */
int alt_msgdma_construct_standard_st_to_mm_descriptor (
    alt_msgdma_dev *dev,
    alt_msgdma_standard_descriptor *descriptor,
    alt_u32 *write_address, alt_u32 length, alt_u32 control)
{
80217d74:	defff804 	addi	sp,sp,-32
80217d78:	dfc00715 	stw	ra,28(sp)
80217d7c:	df000615 	stw	fp,24(sp)
80217d80:	df000604 	addi	fp,sp,24
80217d84:	e13ffc15 	stw	r4,-16(fp)
80217d88:	e17ffd15 	stw	r5,-12(fp)
80217d8c:	e1bffe15 	stw	r6,-8(fp)
80217d90:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, NULL, 
80217d94:	e0800217 	ldw	r2,8(fp)
80217d98:	d8800115 	stw	r2,4(sp)
80217d9c:	e0bfff17 	ldw	r2,-4(fp)
80217da0:	d8800015 	stw	r2,0(sp)
80217da4:	e1fffe17 	ldw	r7,-8(fp)
80217da8:	000d883a 	mov	r6,zero
80217dac:	e17ffd17 	ldw	r5,-12(fp)
80217db0:	e13ffc17 	ldw	r4,-16(fp)
80217db4:	021754c0 	call	8021754c <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
80217db8:	e037883a 	mov	sp,fp
80217dbc:	dfc00117 	ldw	ra,4(sp)
80217dc0:	df000017 	ldw	fp,0(sp)
80217dc4:	dec00204 	addi	sp,sp,8
80217dc8:	f800283a 	ret

80217dcc <alt_msgdma_construct_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
    alt_msgdma_standard_descriptor *descriptor,
    alt_u32 *read_address,
    alt_u32 length,
    alt_u32 control)
{
80217dcc:	defff804 	addi	sp,sp,-32
80217dd0:	dfc00715 	stw	ra,28(sp)
80217dd4:	df000615 	stw	fp,24(sp)
80217dd8:	df000604 	addi	fp,sp,24
80217ddc:	e13ffc15 	stw	r4,-16(fp)
80217de0:	e17ffd15 	stw	r5,-12(fp)
80217de4:	e1bffe15 	stw	r6,-8(fp)
80217de8:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
80217dec:	e0800217 	ldw	r2,8(fp)
80217df0:	d8800115 	stw	r2,4(sp)
80217df4:	e0bfff17 	ldw	r2,-4(fp)
80217df8:	d8800015 	stw	r2,0(sp)
80217dfc:	000f883a 	mov	r7,zero
80217e00:	e1bffe17 	ldw	r6,-8(fp)
80217e04:	e17ffd17 	ldw	r5,-12(fp)
80217e08:	e13ffc17 	ldw	r4,-16(fp)
80217e0c:	021754c0 	call	8021754c <alt_msgdma_construct_standard_descriptor>
            NULL, length, control);

}
80217e10:	e037883a 	mov	sp,fp
80217e14:	dfc00117 	ldw	ra,4(sp)
80217e18:	df000017 	ldw	fp,0(sp)
80217e1c:	dec00204 	addi	sp,sp,8
80217e20:	f800283a 	ret

80217e24 <alt_msgdma_construct_standard_mm_to_mm_descriptor>:
    alt_msgdma_standard_descriptor *descriptor,
    alt_u32 *read_address, 
    alt_u32 *write_address, 
    alt_u32 length, 
    alt_u32 control)
{
80217e24:	defff804 	addi	sp,sp,-32
80217e28:	dfc00715 	stw	ra,28(sp)
80217e2c:	df000615 	stw	fp,24(sp)
80217e30:	df000604 	addi	fp,sp,24
80217e34:	e13ffc15 	stw	r4,-16(fp)
80217e38:	e17ffd15 	stw	r5,-12(fp)
80217e3c:	e1bffe15 	stw	r6,-8(fp)
80217e40:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
80217e44:	e0800317 	ldw	r2,12(fp)
80217e48:	d8800115 	stw	r2,4(sp)
80217e4c:	e0800217 	ldw	r2,8(fp)
80217e50:	d8800015 	stw	r2,0(sp)
80217e54:	e1ffff17 	ldw	r7,-4(fp)
80217e58:	e1bffe17 	ldw	r6,-8(fp)
80217e5c:	e17ffd17 	ldw	r5,-12(fp)
80217e60:	e13ffc17 	ldw	r4,-16(fp)
80217e64:	021754c0 	call	8021754c <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
80217e68:	e037883a 	mov	sp,fp
80217e6c:	dfc00117 	ldw	ra,4(sp)
80217e70:	df000017 	ldw	fp,0(sp)
80217e74:	dec00204 	addi	sp,sp,8
80217e78:	f800283a 	ret

80217e7c <alt_msgdma_construct_extended_st_to_mm_descriptor>:
    alt_u32 length, 
    alt_u32 control, 
    alt_u16 sequence_number, 
    alt_u8 write_burst_count, 
    alt_u16 write_stride)
{
80217e7c:	defff004 	addi	sp,sp,-64
80217e80:	dfc00f15 	stw	ra,60(sp)
80217e84:	df000e15 	stw	fp,56(sp)
80217e88:	df000e04 	addi	fp,sp,56
80217e8c:	e13ff915 	stw	r4,-28(fp)
80217e90:	e17ffa15 	stw	r5,-24(fp)
80217e94:	e1bffb15 	stw	r6,-20(fp)
80217e98:	e1fffc15 	stw	r7,-16(fp)
80217e9c:	e1000317 	ldw	r4,12(fp)
80217ea0:	e0c00417 	ldw	r3,16(fp)
80217ea4:	e0800517 	ldw	r2,20(fp)
80217ea8:	e13ffd0d 	sth	r4,-12(fp)
80217eac:	e0fffe05 	stb	r3,-8(fp)
80217eb0:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
80217eb4:	e0bffd0b 	ldhu	r2,-12(fp)
80217eb8:	e0fffe03 	ldbu	r3,-8(fp)
80217ebc:	e13fff0b 	ldhu	r4,-4(fp)
80217ec0:	d9000615 	stw	r4,24(sp)
80217ec4:	d8000515 	stw	zero,20(sp)
80217ec8:	d8c00415 	stw	r3,16(sp)
80217ecc:	d8000315 	stw	zero,12(sp)
80217ed0:	d8800215 	stw	r2,8(sp)
80217ed4:	e0800217 	ldw	r2,8(fp)
80217ed8:	d8800115 	stw	r2,4(sp)
80217edc:	e0bffc17 	ldw	r2,-16(fp)
80217ee0:	d8800015 	stw	r2,0(sp)
80217ee4:	e1fffb17 	ldw	r7,-20(fp)
80217ee8:	000d883a 	mov	r6,zero
80217eec:	e17ffa17 	ldw	r5,-24(fp)
80217ef0:	e13ff917 	ldw	r4,-28(fp)
80217ef4:	02175d80 	call	802175d8 <alt_msgdma_construct_extended_descriptor>
            NULL, write_address, length, control, sequence_number, 0, 
            write_burst_count, 0, write_stride);
}
80217ef8:	e037883a 	mov	sp,fp
80217efc:	dfc00117 	ldw	ra,4(sp)
80217f00:	df000017 	ldw	fp,0(sp)
80217f04:	dec00204 	addi	sp,sp,8
80217f08:	f800283a 	ret

80217f0c <alt_msgdma_construct_extended_mm_to_st_descriptor>:
    alt_u32 length,
    alt_u32 control,
    alt_u16 sequence_number,
    alt_u8 read_burst_count, 
    alt_u16 read_stride)
{
80217f0c:	defff004 	addi	sp,sp,-64
80217f10:	dfc00f15 	stw	ra,60(sp)
80217f14:	df000e15 	stw	fp,56(sp)
80217f18:	df000e04 	addi	fp,sp,56
80217f1c:	e13ff915 	stw	r4,-28(fp)
80217f20:	e17ffa15 	stw	r5,-24(fp)
80217f24:	e1bffb15 	stw	r6,-20(fp)
80217f28:	e1fffc15 	stw	r7,-16(fp)
80217f2c:	e1000317 	ldw	r4,12(fp)
80217f30:	e0c00417 	ldw	r3,16(fp)
80217f34:	e0800517 	ldw	r2,20(fp)
80217f38:	e13ffd0d 	sth	r4,-12(fp)
80217f3c:	e0fffe05 	stb	r3,-8(fp)
80217f40:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, read_address, 
80217f44:	e0bffd0b 	ldhu	r2,-12(fp)
80217f48:	e0fffe03 	ldbu	r3,-8(fp)
80217f4c:	e13fff0b 	ldhu	r4,-4(fp)
80217f50:	d8000615 	stw	zero,24(sp)
80217f54:	d9000515 	stw	r4,20(sp)
80217f58:	d8000415 	stw	zero,16(sp)
80217f5c:	d8c00315 	stw	r3,12(sp)
80217f60:	d8800215 	stw	r2,8(sp)
80217f64:	e0800217 	ldw	r2,8(fp)
80217f68:	d8800115 	stw	r2,4(sp)
80217f6c:	e0bffc17 	ldw	r2,-16(fp)
80217f70:	d8800015 	stw	r2,0(sp)
80217f74:	000f883a 	mov	r7,zero
80217f78:	e1bffb17 	ldw	r6,-20(fp)
80217f7c:	e17ffa17 	ldw	r5,-24(fp)
80217f80:	e13ff917 	ldw	r4,-28(fp)
80217f84:	02175d80 	call	802175d8 <alt_msgdma_construct_extended_descriptor>
            NULL, length, control, sequence_number, read_burst_count, 0, 
            read_stride, 0);

}
80217f88:	e037883a 	mov	sp,fp
80217f8c:	dfc00117 	ldw	ra,4(sp)
80217f90:	df000017 	ldw	fp,0(sp)
80217f94:	dec00204 	addi	sp,sp,8
80217f98:	f800283a 	ret

80217f9c <alt_msgdma_construct_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
80217f9c:	deffee04 	addi	sp,sp,-72
80217fa0:	dfc01115 	stw	ra,68(sp)
80217fa4:	df001015 	stw	fp,64(sp)
80217fa8:	df001004 	addi	fp,sp,64
80217fac:	e13ff715 	stw	r4,-36(fp)
80217fb0:	e17ff815 	stw	r5,-32(fp)
80217fb4:	e1bff915 	stw	r6,-28(fp)
80217fb8:	e1fffa15 	stw	r7,-24(fp)
80217fbc:	e1800417 	ldw	r6,16(fp)
80217fc0:	e1400517 	ldw	r5,20(fp)
80217fc4:	e1000617 	ldw	r4,24(fp)
80217fc8:	e0c00717 	ldw	r3,28(fp)
80217fcc:	e0800817 	ldw	r2,32(fp)
80217fd0:	e1bffb0d 	sth	r6,-20(fp)
80217fd4:	e17ffc05 	stb	r5,-16(fp)
80217fd8:	e13ffd05 	stb	r4,-12(fp)
80217fdc:	e0fffe0d 	sth	r3,-8(fp)
80217fe0:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
80217fe4:	e0bffb0b 	ldhu	r2,-20(fp)
80217fe8:	e0fffc03 	ldbu	r3,-16(fp)
80217fec:	e13ffd03 	ldbu	r4,-12(fp)
80217ff0:	e17ffe0b 	ldhu	r5,-8(fp)
80217ff4:	e1bfff0b 	ldhu	r6,-4(fp)
80217ff8:	d9800615 	stw	r6,24(sp)
80217ffc:	d9400515 	stw	r5,20(sp)
80218000:	d9000415 	stw	r4,16(sp)
80218004:	d8c00315 	stw	r3,12(sp)
80218008:	d8800215 	stw	r2,8(sp)
8021800c:	e0800317 	ldw	r2,12(fp)
80218010:	d8800115 	stw	r2,4(sp)
80218014:	e0800217 	ldw	r2,8(fp)
80218018:	d8800015 	stw	r2,0(sp)
8021801c:	e1fffa17 	ldw	r7,-24(fp)
80218020:	e1bff917 	ldw	r6,-28(fp)
80218024:	e17ff817 	ldw	r5,-32(fp)
80218028:	e13ff717 	ldw	r4,-36(fp)
8021802c:	02175d80 	call	802175d8 <alt_msgdma_construct_extended_descriptor>
            read_address, write_address, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
80218030:	e037883a 	mov	sp,fp
80218034:	dfc00117 	ldw	ra,4(sp)
80218038:	df000017 	ldw	fp,0(sp)
8021803c:	dec00204 	addi	sp,sp,8
80218040:	f800283a 	ret

80218044 <alt_msgdma_construct_prefetcher_standard_descriptor>:
    alt_msgdma_prefetcher_standard_descriptor *descriptor,
    alt_u32 read_address, 
    alt_u32 write_address, 
    alt_u32 length, 
    alt_u32 control)
{
80218044:	defffb04 	addi	sp,sp,-20
80218048:	df000415 	stw	fp,16(sp)
8021804c:	df000404 	addi	fp,sp,16
80218050:	e13ffc15 	stw	r4,-16(fp)
80218054:	e17ffd15 	stw	r5,-12(fp)
80218058:	e1bffe15 	stw	r6,-8(fp)
8021805c:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
80218060:	e0bffc17 	ldw	r2,-16(fp)
80218064:	10c01217 	ldw	r3,72(r2)
80218068:	e0800117 	ldw	r2,4(fp)
8021806c:	18800436 	bltu	r3,r2,80218080 <alt_msgdma_construct_prefetcher_standard_descriptor+0x3c>
       dev->enhanced_features != 0
80218070:	e0bffc17 	ldw	r2,-16(fp)
80218074:	10801703 	ldbu	r2,92(r2)
    alt_u32 read_address, 
    alt_u32 write_address, 
    alt_u32 length, 
    alt_u32 control)
{
    if(dev->max_byte < length ||
80218078:	10803fcc 	andi	r2,r2,255
8021807c:	10000226 	beq	r2,zero,80218088 <alt_msgdma_construct_prefetcher_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
80218080:	00bffa84 	movi	r2,-22
80218084:	00001406 	br	802180d8 <alt_msgdma_construct_prefetcher_standard_descriptor+0x94>
    }
    descriptor->read_address = read_address;
80218088:	e0bffd17 	ldw	r2,-12(fp)
8021808c:	e0fffe17 	ldw	r3,-8(fp)
80218090:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
80218094:	e0bffd17 	ldw	r2,-12(fp)
80218098:	e0ffff17 	ldw	r3,-4(fp)
8021809c:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
802180a0:	e0bffd17 	ldw	r2,-12(fp)
802180a4:	e0c00117 	ldw	r3,4(fp)
802180a8:	10c00215 	stw	r3,8(r2)
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
802180ac:	e0fffd17 	ldw	r3,-12(fp)
802180b0:	e0bffd17 	ldw	r2,-12(fp)
802180b4:	10c00315 	stw	r3,12(r2)
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
802180b8:	e0c00217 	ldw	r3,8(fp)
802180bc:	00900034 	movhi	r2,16384
802180c0:	10bfffc4 	addi	r2,r2,-1
802180c4:	1884703a 	and	r2,r3,r2
802180c8:	10e00034 	orhi	r3,r2,32768
    descriptor->transfer_length = length;
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
802180cc:	e0bffd17 	ldw	r2,-12(fp)
802180d0:	10c00715 	stw	r3,28(r2)
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
802180d4:	0005883a 	mov	r2,zero
}
802180d8:	e037883a 	mov	sp,fp
802180dc:	df000017 	ldw	fp,0(sp)
802180e0:	dec00104 	addi	sp,sp,4
802180e4:	f800283a 	ret

802180e8 <alt_msgdma_construct_prefetcher_extended_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
802180e8:	defff404 	addi	sp,sp,-48
802180ec:	df000b15 	stw	fp,44(sp)
802180f0:	df000b04 	addi	fp,sp,44
802180f4:	e13ff715 	stw	r4,-36(fp)
802180f8:	e17ff815 	stw	r5,-32(fp)
802180fc:	e1bff915 	stw	r6,-28(fp)
80218100:	e1fffa15 	stw	r7,-24(fp)
80218104:	e1800517 	ldw	r6,20(fp)
80218108:	e1400617 	ldw	r5,24(fp)
8021810c:	e1000717 	ldw	r4,28(fp)
80218110:	e0c00817 	ldw	r3,32(fp)
80218114:	e0800917 	ldw	r2,36(fp)
80218118:	e1bffb0d 	sth	r6,-20(fp)
8021811c:	e17ffc05 	stb	r5,-16(fp)
80218120:	e13ffd05 	stb	r4,-12(fp)
80218124:	e0fffe0d 	sth	r3,-8(fp)
80218128:	e0bfff0d 	sth	r2,-4(fp)
    msgdma_addr64 node_addr;
    
    if(dev->max_byte < length ||
8021812c:	e0bff717 	ldw	r2,-36(fp)
80218130:	10c01217 	ldw	r3,72(r2)
80218134:	e0800317 	ldw	r2,12(fp)
80218138:	18801936 	bltu	r3,r2,802181a0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
8021813c:	e13ff717 	ldw	r4,-36(fp)
80218140:	20801317 	ldw	r2,76(r4)
80218144:	20c01417 	ldw	r3,80(r4)
80218148:	e13ffe0b 	ldhu	r4,-8(fp)
8021814c:	213fffcc 	andi	r4,r4,65535
80218150:	2015883a 	mov	r10,r4
80218154:	0017883a 	mov	r11,zero
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
    msgdma_addr64 node_addr;
    
    if(dev->max_byte < length ||
80218158:	1ac01136 	bltu	r3,r11,802181a0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
8021815c:	58c0011e 	bne	r11,r3,80218164 <alt_msgdma_construct_prefetcher_extended_descriptor+0x7c>
80218160:	12800f36 	bltu	r2,r10,802181a0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
80218164:	e13ff717 	ldw	r4,-36(fp)
80218168:	20801317 	ldw	r2,76(r4)
8021816c:	20c01417 	ldw	r3,80(r4)
80218170:	e13fff0b 	ldhu	r4,-4(fp)
80218174:	213fffcc 	andi	r4,r4,65535
80218178:	2011883a 	mov	r8,r4
8021817c:	0013883a 	mov	r9,zero
    alt_u16 write_stride)
{
    msgdma_addr64 node_addr;
    
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
80218180:	1a400736 	bltu	r3,r9,802181a0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
80218184:	48c0011e 	bne	r9,r3,8021818c <alt_msgdma_construct_prefetcher_extended_descriptor+0xa4>
80218188:	12000536 	bltu	r2,r8,802181a0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
8021818c:	e0bff717 	ldw	r2,-36(fp)
80218190:	10801703 	ldbu	r2,92(r2)
{
    msgdma_addr64 node_addr;
    
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
80218194:	10803fcc 	andi	r2,r2,255
80218198:	10800060 	cmpeqi	r2,r2,1
8021819c:	1000021e 	bne	r2,zero,802181a8 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
802181a0:	00bffa84 	movi	r2,-22
802181a4:	00003106 	br	8021826c <alt_msgdma_construct_prefetcher_extended_descriptor+0x184>
    }
    
    descriptor->read_address_high = read_address_high;
802181a8:	e0bff817 	ldw	r2,-32(fp)
802181ac:	e0fff917 	ldw	r3,-28(fp)
802181b0:	10c00915 	stw	r3,36(r2)
    descriptor->read_address_low = read_address_low;
802181b4:	e0bff817 	ldw	r2,-32(fp)
802181b8:	e0fffa17 	ldw	r3,-24(fp)
802181bc:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_high = write_address_high;
802181c0:	e0bff817 	ldw	r2,-32(fp)
802181c4:	e0c00117 	ldw	r3,4(fp)
802181c8:	10c00a15 	stw	r3,40(r2)
    descriptor->write_address_low = write_address_low;
802181cc:	e0bff817 	ldw	r2,-32(fp)
802181d0:	e0c00217 	ldw	r3,8(fp)
802181d4:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
802181d8:	e0bff817 	ldw	r2,-32(fp)
802181dc:	e0c00317 	ldw	r3,12(fp)
802181e0:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
802181e4:	e0bff817 	ldw	r2,-32(fp)
802181e8:	e0fffb0b 	ldhu	r3,-20(fp)
802181ec:	10c0070d 	sth	r3,28(r2)
    descriptor->read_burst_count = read_burst_count;
802181f0:	e0bff817 	ldw	r2,-32(fp)
802181f4:	e0fffc03 	ldbu	r3,-16(fp)
802181f8:	10c00785 	stb	r3,30(r2)
    descriptor->write_burst_count = write_burst_count;
802181fc:	e0bff817 	ldw	r2,-32(fp)
80218200:	e0fffd03 	ldbu	r3,-12(fp)
80218204:	10c007c5 	stb	r3,31(r2)
    descriptor->read_stride = read_stride;
80218208:	e0bff817 	ldw	r2,-32(fp)
8021820c:	e0fffe0b 	ldhu	r3,-8(fp)
80218210:	10c0080d 	sth	r3,32(r2)
    descriptor->write_stride = write_stride;
80218214:	e0bff817 	ldw	r2,-32(fp)
80218218:	e0ffff0b 	ldhu	r3,-4(fp)
8021821c:	10c0088d 	sth	r3,34(r2)
    /* have descriptor point to itself */
    node_addr.u64 = (uintptr_t)descriptor;
80218220:	e0bff817 	ldw	r2,-32(fp)
80218224:	1019883a 	mov	r12,r2
80218228:	001b883a 	mov	r13,zero
8021822c:	e33ff515 	stw	r12,-44(fp)
80218230:	e37ff615 	stw	r13,-40(fp)
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
80218234:	e0fff517 	ldw	r3,-44(fp)
80218238:	e0bff817 	ldw	r2,-32(fp)
8021823c:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
80218240:	e0fff617 	ldw	r3,-40(fp)
80218244:	e0bff817 	ldw	r2,-32(fp)
80218248:	10c00b15 	stw	r3,44(r2)
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
8021824c:	e0c00417 	ldw	r3,16(fp)
80218250:	00900034 	movhi	r2,16384
80218254:	10bfffc4 	addi	r2,r2,-1
80218258:	1884703a 	and	r2,r3,r2
8021825c:	10e00034 	orhi	r3,r2,32768
    node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
80218260:	e0bff817 	ldw	r2,-32(fp)
80218264:	10c00f15 	stw	r3,60(r2)
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
80218268:	0005883a 	mov	r2,zero
}
8021826c:	e037883a 	mov	sp,fp
80218270:	df000017 	ldw	fp,0(sp)
80218274:	dec00104 	addi	sp,sp,4
80218278:	f800283a 	ret

8021827c <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor>:
    alt_msgdma_prefetcher_standard_descriptor *descriptor,
    alt_u32 read_address,
    alt_u32 write_address,
    alt_u32 length,
    alt_u32 control)
{
8021827c:	defff804 	addi	sp,sp,-32
80218280:	dfc00715 	stw	ra,28(sp)
80218284:	df000615 	stw	fp,24(sp)
80218288:	df000604 	addi	fp,sp,24
8021828c:	e13ffc15 	stw	r4,-16(fp)
80218290:	e17ffd15 	stw	r5,-12(fp)
80218294:	e1bffe15 	stw	r6,-8(fp)
80218298:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
8021829c:	e0800317 	ldw	r2,12(fp)
802182a0:	d8800115 	stw	r2,4(sp)
802182a4:	e0800217 	ldw	r2,8(fp)
802182a8:	d8800015 	stw	r2,0(sp)
802182ac:	e1ffff17 	ldw	r7,-4(fp)
802182b0:	e1bffe17 	ldw	r6,-8(fp)
802182b4:	e17ffd17 	ldw	r5,-12(fp)
802182b8:	e13ffc17 	ldw	r4,-16(fp)
802182bc:	02180440 	call	80218044 <alt_msgdma_construct_prefetcher_standard_descriptor>
            read_address, write_address, length, control);
}
802182c0:	e037883a 	mov	sp,fp
802182c4:	dfc00117 	ldw	ra,4(sp)
802182c8:	df000017 	ldw	fp,0(sp)
802182cc:	dec00204 	addi	sp,sp,8
802182d0:	f800283a 	ret

802182d4 <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor>:
    alt_msgdma_dev *dev,
    alt_msgdma_prefetcher_standard_descriptor *descriptor, 
    alt_u32 write_address, 
    alt_u32 length, 
    alt_u32 control)
{
802182d4:	defff804 	addi	sp,sp,-32
802182d8:	dfc00715 	stw	ra,28(sp)
802182dc:	df000615 	stw	fp,24(sp)
802182e0:	df000604 	addi	fp,sp,24
802182e4:	e13ffc15 	stw	r4,-16(fp)
802182e8:	e17ffd15 	stw	r5,-12(fp)
802182ec:	e1bffe15 	stw	r6,-8(fp)
802182f0:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
802182f4:	e0800217 	ldw	r2,8(fp)
802182f8:	d8800115 	stw	r2,4(sp)
802182fc:	e0bfff17 	ldw	r2,-4(fp)
80218300:	d8800015 	stw	r2,0(sp)
80218304:	e1fffe17 	ldw	r7,-8(fp)
80218308:	000d883a 	mov	r6,zero
8021830c:	e17ffd17 	ldw	r5,-12(fp)
80218310:	e13ffc17 	ldw	r4,-16(fp)
80218314:	02180440 	call	80218044 <alt_msgdma_construct_prefetcher_standard_descriptor>
            0, write_address, length, control);
}
80218318:	e037883a 	mov	sp,fp
8021831c:	dfc00117 	ldw	ra,4(sp)
80218320:	df000017 	ldw	fp,0(sp)
80218324:	dec00204 	addi	sp,sp,8
80218328:	f800283a 	ret

8021832c <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
    alt_msgdma_prefetcher_standard_descriptor *descriptor, 
    alt_u32 read_address, 
    alt_u32 length, 
    alt_u32 control)
{
8021832c:	defff804 	addi	sp,sp,-32
80218330:	dfc00715 	stw	ra,28(sp)
80218334:	df000615 	stw	fp,24(sp)
80218338:	df000604 	addi	fp,sp,24
8021833c:	e13ffc15 	stw	r4,-16(fp)
80218340:	e17ffd15 	stw	r5,-12(fp)
80218344:	e1bffe15 	stw	r6,-8(fp)
80218348:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
8021834c:	e0800217 	ldw	r2,8(fp)
80218350:	d8800115 	stw	r2,4(sp)
80218354:	e0bfff17 	ldw	r2,-4(fp)
80218358:	d8800015 	stw	r2,0(sp)
8021835c:	000f883a 	mov	r7,zero
80218360:	e1bffe17 	ldw	r6,-8(fp)
80218364:	e17ffd17 	ldw	r5,-12(fp)
80218368:	e13ffc17 	ldw	r4,-16(fp)
8021836c:	02180440 	call	80218044 <alt_msgdma_construct_prefetcher_standard_descriptor>
            read_address, 0, length, control);
}
80218370:	e037883a 	mov	sp,fp
80218374:	dfc00117 	ldw	ra,4(sp)
80218378:	df000017 	ldw	fp,0(sp)
8021837c:	dec00204 	addi	sp,sp,8
80218380:	f800283a 	ret

80218384 <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor>:
    alt_u32 length, 
    alt_u32 control, 
    alt_u16 sequence_number,
    alt_u8 write_burst_count,
    alt_u16 write_stride)
{
80218384:	deffee04 	addi	sp,sp,-72
80218388:	dfc01115 	stw	ra,68(sp)
8021838c:	df001015 	stw	fp,64(sp)
80218390:	df001004 	addi	fp,sp,64
80218394:	e13ff915 	stw	r4,-28(fp)
80218398:	e17ffa15 	stw	r5,-24(fp)
8021839c:	e1bffb15 	stw	r6,-20(fp)
802183a0:	e1fffc15 	stw	r7,-16(fp)
802183a4:	e1000417 	ldw	r4,16(fp)
802183a8:	e0c00517 	ldw	r3,20(fp)
802183ac:	e0800617 	ldw	r2,24(fp)
802183b0:	e13ffd0d 	sth	r4,-12(fp)
802183b4:	e0fffe05 	stb	r3,-8(fp)
802183b8:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor, 
802183bc:	e0bffd0b 	ldhu	r2,-12(fp)
802183c0:	e0fffe03 	ldbu	r3,-8(fp)
802183c4:	e13fff0b 	ldhu	r4,-4(fp)
802183c8:	d9000815 	stw	r4,32(sp)
802183cc:	d8000715 	stw	zero,28(sp)
802183d0:	d8c00615 	stw	r3,24(sp)
802183d4:	d8000515 	stw	zero,20(sp)
802183d8:	d8800415 	stw	r2,16(sp)
802183dc:	e0800317 	ldw	r2,12(fp)
802183e0:	d8800315 	stw	r2,12(sp)
802183e4:	e0800217 	ldw	r2,8(fp)
802183e8:	d8800215 	stw	r2,8(sp)
802183ec:	e0bffc17 	ldw	r2,-16(fp)
802183f0:	d8800115 	stw	r2,4(sp)
802183f4:	e0bffb17 	ldw	r2,-20(fp)
802183f8:	d8800015 	stw	r2,0(sp)
802183fc:	000f883a 	mov	r7,zero
80218400:	000d883a 	mov	r6,zero
80218404:	e17ffa17 	ldw	r5,-24(fp)
80218408:	e13ff917 	ldw	r4,-28(fp)
8021840c:	02180e80 	call	802180e8 <alt_msgdma_construct_prefetcher_extended_descriptor>
            0, 0, write_address_high, write_address_low, length, control, 
            sequence_number, 0, write_burst_count, 0, write_stride);
}
80218410:	e037883a 	mov	sp,fp
80218414:	dfc00117 	ldw	ra,4(sp)
80218418:	df000017 	ldw	fp,0(sp)
8021841c:	dec00204 	addi	sp,sp,8
80218420:	f800283a 	ret

80218424 <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor>:
    alt_u32 length, 
    alt_u32 control, 
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u16 read_stride)
{
80218424:	deffee04 	addi	sp,sp,-72
80218428:	dfc01115 	stw	ra,68(sp)
8021842c:	df001015 	stw	fp,64(sp)
80218430:	df001004 	addi	fp,sp,64
80218434:	e13ff915 	stw	r4,-28(fp)
80218438:	e17ffa15 	stw	r5,-24(fp)
8021843c:	e1bffb15 	stw	r6,-20(fp)
80218440:	e1fffc15 	stw	r7,-16(fp)
80218444:	e1000417 	ldw	r4,16(fp)
80218448:	e0c00517 	ldw	r3,20(fp)
8021844c:	e0800617 	ldw	r2,24(fp)
80218450:	e13ffd0d 	sth	r4,-12(fp)
80218454:	e0fffe05 	stb	r3,-8(fp)
80218458:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
8021845c:	e0bffd0b 	ldhu	r2,-12(fp)
80218460:	e0fffe03 	ldbu	r3,-8(fp)
80218464:	e13fff0b 	ldhu	r4,-4(fp)
80218468:	d8000815 	stw	zero,32(sp)
8021846c:	d9000715 	stw	r4,28(sp)
80218470:	d8000615 	stw	zero,24(sp)
80218474:	d8c00515 	stw	r3,20(sp)
80218478:	d8800415 	stw	r2,16(sp)
8021847c:	e0800317 	ldw	r2,12(fp)
80218480:	d8800315 	stw	r2,12(sp)
80218484:	e0800217 	ldw	r2,8(fp)
80218488:	d8800215 	stw	r2,8(sp)
8021848c:	d8000115 	stw	zero,4(sp)
80218490:	d8000015 	stw	zero,0(sp)
80218494:	e1fffc17 	ldw	r7,-16(fp)
80218498:	e1bffb17 	ldw	r6,-20(fp)
8021849c:	e17ffa17 	ldw	r5,-24(fp)
802184a0:	e13ff917 	ldw	r4,-28(fp)
802184a4:	02180e80 	call	802180e8 <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, 0, 0, length, control, 
            sequence_number, read_burst_count, 0, read_stride, 0);
}
802184a8:	e037883a 	mov	sp,fp
802184ac:	dfc00117 	ldw	ra,4(sp)
802184b0:	df000017 	ldw	fp,0(sp)
802184b4:	dec00204 	addi	sp,sp,8
802184b8:	f800283a 	ret

802184bc <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number,
    alt_u8 read_burst_count,
    alt_u8 write_burst_count, 
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
802184bc:	deffec04 	addi	sp,sp,-80
802184c0:	dfc01315 	stw	ra,76(sp)
802184c4:	df001215 	stw	fp,72(sp)
802184c8:	df001204 	addi	fp,sp,72
802184cc:	e13ff715 	stw	r4,-36(fp)
802184d0:	e17ff815 	stw	r5,-32(fp)
802184d4:	e1bff915 	stw	r6,-28(fp)
802184d8:	e1fffa15 	stw	r7,-24(fp)
802184dc:	e1800617 	ldw	r6,24(fp)
802184e0:	e1400717 	ldw	r5,28(fp)
802184e4:	e1000817 	ldw	r4,32(fp)
802184e8:	e0c00917 	ldw	r3,36(fp)
802184ec:	e0800a17 	ldw	r2,40(fp)
802184f0:	e1bffb0d 	sth	r6,-20(fp)
802184f4:	e17ffc05 	stb	r5,-16(fp)
802184f8:	e13ffd05 	stb	r4,-12(fp)
802184fc:	e0fffe0d 	sth	r3,-8(fp)
80218500:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
80218504:	e0bffb0b 	ldhu	r2,-20(fp)
80218508:	e0fffc03 	ldbu	r3,-16(fp)
8021850c:	e13ffd03 	ldbu	r4,-12(fp)
80218510:	e17ffe0b 	ldhu	r5,-8(fp)
80218514:	e1bfff0b 	ldhu	r6,-4(fp)
80218518:	d9800815 	stw	r6,32(sp)
8021851c:	d9400715 	stw	r5,28(sp)
80218520:	d9000615 	stw	r4,24(sp)
80218524:	d8c00515 	stw	r3,20(sp)
80218528:	d8800415 	stw	r2,16(sp)
8021852c:	e0800517 	ldw	r2,20(fp)
80218530:	d8800315 	stw	r2,12(sp)
80218534:	e0800417 	ldw	r2,16(fp)
80218538:	d8800215 	stw	r2,8(sp)
8021853c:	e0800317 	ldw	r2,12(fp)
80218540:	d8800115 	stw	r2,4(sp)
80218544:	e0800217 	ldw	r2,8(fp)
80218548:	d8800015 	stw	r2,0(sp)
8021854c:	e1fffa17 	ldw	r7,-24(fp)
80218550:	e1bff917 	ldw	r6,-28(fp)
80218554:	e17ff817 	ldw	r5,-32(fp)
80218558:	e13ff717 	ldw	r4,-36(fp)
8021855c:	02180e80 	call	802180e8 <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, write_address_high, 
            write_address_low, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
80218560:	e037883a 	mov	sp,fp
80218564:	dfc00117 	ldw	ra,4(sp)
80218568:	df000017 	ldw	fp,0(sp)
8021856c:	dec00204 	addi	sp,sp,8
80218570:	f800283a 	ret

80218574 <alt_msgdma_prefetcher_add_standard_desc_to_list>:
 *           descriptor.next_ptr not pointing back to itslef)
 */
int alt_msgdma_prefetcher_add_standard_desc_to_list (
    alt_msgdma_prefetcher_standard_descriptor** list,
    alt_msgdma_prefetcher_standard_descriptor* descriptor)
{
80218574:	defffc04 	addi	sp,sp,-16
80218578:	df000315 	stw	fp,12(sp)
8021857c:	df000304 	addi	fp,sp,12
80218580:	e13ffe15 	stw	r4,-8(fp)
80218584:	e17fff15 	stw	r5,-4(fp)
    alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
    
    if (descriptor == NULL)
80218588:	e0bfff17 	ldw	r2,-4(fp)
8021858c:	1000021e 	bne	r2,zero,80218598 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x24>
    {
        return -EINVAL;  /* this descriptor cannot be NULL */
80218590:	00bffa84 	movi	r2,-22
80218594:	00002f06 	br	80218654 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
    }
    if (descriptor->next_desc_ptr != (alt_u32)descriptor)
80218598:	e0bfff17 	ldw	r2,-4(fp)
8021859c:	10c00317 	ldw	r3,12(r2)
802185a0:	e0bfff17 	ldw	r2,-4(fp)
802185a4:	18800226 	beq	r3,r2,802185b0 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x3c>
    {
        return -EINVAL;  /* descriptor.next_ptr must point to itself */
802185a8:	00bffa84 	movi	r2,-22
802185ac:	00002906 	br	80218654 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
    }
    if (*list == NULL)
802185b0:	e0bffe17 	ldw	r2,-8(fp)
802185b4:	10800017 	ldw	r2,0(r2)
802185b8:	1000051e 	bne	r2,zero,802185d0 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x5c>
    {
        *list = descriptor;  /* make this root-node if list is empty */
802185bc:	e0bffe17 	ldw	r2,-8(fp)
802185c0:	e0ffff17 	ldw	r3,-4(fp)
802185c4:	10c00015 	stw	r3,0(r2)
        return 0;  /* successfully added */
802185c8:	0005883a 	mov	r2,zero
802185cc:	00002106 	br	80218654 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
    }
    if (*list == descriptor)
802185d0:	e0bffe17 	ldw	r2,-8(fp)
802185d4:	10c00017 	ldw	r3,0(r2)
802185d8:	e0bfff17 	ldw	r2,-4(fp)
802185dc:	1880021e 	bne	r3,r2,802185e8 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x74>
    {
        return -EINVAL;  /* this descriptor cannot already be root-node */
802185e0:	00bffa84 	movi	r2,-22
802185e4:	00001b06 	br	80218654 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
    }
    
    /* get to last node in the list */
    last_descr_ptr = *list; /* start at list root-node */
802185e8:	e0bffe17 	ldw	r2,-8(fp)
802185ec:	10800017 	ldw	r2,0(r2)
802185f0:	e0bffd15 	stw	r2,-12(fp)
    /* traverse list until you get the last node */
    while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
802185f4:	00000906 	br	8021861c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xa8>
    {
        if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
802185f8:	e0bffd17 	ldw	r2,-12(fp)
802185fc:	10c00317 	ldw	r3,12(r2)
80218600:	e0bfff17 	ldw	r2,-4(fp)
80218604:	1880021e 	bne	r3,r2,80218610 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x9c>
        {
            return -EINVAL;  /* descriptor cannot already be in the list */
80218608:	00bffa84 	movi	r2,-22
8021860c:	00001106 	br	80218654 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
        }
        last_descr_ptr = 
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
80218610:	e0bffd17 	ldw	r2,-12(fp)
80218614:	10800317 	ldw	r2,12(r2)
    {
        if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
        {
            return -EINVAL;  /* descriptor cannot already be in the list */
        }
        last_descr_ptr = 
80218618:	e0bffd15 	stw	r2,-12(fp)
    }
    
    /* get to last node in the list */
    last_descr_ptr = *list; /* start at list root-node */
    /* traverse list until you get the last node */
    while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
8021861c:	e0bffd17 	ldw	r2,-12(fp)
80218620:	10800317 	ldw	r2,12(r2)
80218624:	e0fffe17 	ldw	r3,-8(fp)
80218628:	18c00017 	ldw	r3,0(r3)
8021862c:	10fff21e 	bne	r2,r3,802185f8 <__reset+0xfa1f85f8>
        }
        last_descr_ptr = 
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
    }
    /* add this descriptor to end of list */
    last_descr_ptr->next_desc_ptr = (alt_u32)((uintptr_t)descriptor);
80218630:	e0ffff17 	ldw	r3,-4(fp)
80218634:	e0bffd17 	ldw	r2,-12(fp)
80218638:	10c00315 	stw	r3,12(r2)
    /* ensure new last pointer points the start of the list */
    descriptor->next_desc_ptr = (alt_u32)((uintptr_t)*list);  
8021863c:	e0bffe17 	ldw	r2,-8(fp)
80218640:	10800017 	ldw	r2,0(r2)
80218644:	1007883a 	mov	r3,r2
80218648:	e0bfff17 	ldw	r2,-4(fp)
8021864c:	10c00315 	stw	r3,12(r2)
    return 0; /* successfully added */
80218650:	0005883a 	mov	r2,zero
}
80218654:	e037883a 	mov	sp,fp
80218658:	df000017 	ldw	fp,0(sp)
8021865c:	dec00104 	addi	sp,sp,4
80218660:	f800283a 	ret

80218664 <alt_msgdma_prefetcher_add_extended_desc_to_list>:

int alt_msgdma_prefetcher_add_extended_desc_to_list (
    alt_msgdma_prefetcher_extended_descriptor** list,
    alt_msgdma_prefetcher_extended_descriptor* descriptor)
{
80218664:	defff804 	addi	sp,sp,-32
80218668:	df000715 	stw	fp,28(sp)
8021866c:	df000704 	addi	fp,sp,28
80218670:	e13ffe15 	stw	r4,-8(fp)
80218674:	e17fff15 	stw	r5,-4(fp)
    alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
    msgdma_addr64 root_node_addr, next_node_addr;
    
    if (descriptor == NULL)
80218678:	e13fff17 	ldw	r4,-4(fp)
8021867c:	2000021e 	bne	r4,zero,80218688 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x24>
    {
        return -EINVAL;  /* this descriptor cannot be NULL */
80218680:	00bffa84 	movi	r2,-22
80218684:	00005906 	br	802187ec <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
    }
    
    next_node_addr.u64 = (uintptr_t)descriptor;
80218688:	e13fff17 	ldw	r4,-4(fp)
8021868c:	2015883a 	mov	r10,r4
80218690:	0017883a 	mov	r11,zero
80218694:	e2bffc15 	stw	r10,-16(fp)
80218698:	e2fffd15 	stw	r11,-12(fp)
    if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) ||
8021869c:	e13fff17 	ldw	r4,-4(fp)
802186a0:	21400317 	ldw	r5,12(r4)
802186a4:	e13ffc17 	ldw	r4,-16(fp)
802186a8:	2900041e 	bne	r5,r4,802186bc <alt_msgdma_prefetcher_add_extended_desc_to_list+0x58>
        (descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
802186ac:	e13fff17 	ldw	r4,-4(fp)
802186b0:	21400b17 	ldw	r5,44(r4)
802186b4:	e13ffd17 	ldw	r4,-12(fp)
    {
        return -EINVAL;  /* this descriptor cannot be NULL */
    }
    
    next_node_addr.u64 = (uintptr_t)descriptor;
    if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) ||
802186b8:	29000226 	beq	r5,r4,802186c4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
        (descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
    {
        return -EINVAL;  /* descriptor.next_ptr must point to itself */
802186bc:	00bffa84 	movi	r2,-22
802186c0:	00004a06 	br	802187ec <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
    }
    
    if (*list == NULL)
802186c4:	e13ffe17 	ldw	r4,-8(fp)
802186c8:	21000017 	ldw	r4,0(r4)
802186cc:	2000051e 	bne	r4,zero,802186e4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x80>
    {
        *list = descriptor;  /* make this the root-node if list is empty */
802186d0:	e0bffe17 	ldw	r2,-8(fp)
802186d4:	e0ffff17 	ldw	r3,-4(fp)
802186d8:	10c00015 	stw	r3,0(r2)
        return 0;
802186dc:	0005883a 	mov	r2,zero
802186e0:	00004206 	br	802187ec <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
    }
    if (*list == descriptor)
802186e4:	e13ffe17 	ldw	r4,-8(fp)
802186e8:	21400017 	ldw	r5,0(r4)
802186ec:	e13fff17 	ldw	r4,-4(fp)
802186f0:	2900021e 	bne	r5,r4,802186fc <alt_msgdma_prefetcher_add_extended_desc_to_list+0x98>
    {
        return -EINVAL;  /* this descriptor cannot already be root-node */
802186f4:	00bffa84 	movi	r2,-22
802186f8:	00003c06 	br	802187ec <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
    }
    
    /* get to last node in the list */
    last_descr_ptr = *list; /* start at list root-node */
802186fc:	e13ffe17 	ldw	r4,-8(fp)
80218700:	21000017 	ldw	r4,0(r4)
80218704:	e13ff915 	stw	r4,-28(fp)
    /* the last nodes next ptr should point to the root node*/
    root_node_addr.u64 = (uintptr_t)*list;
80218708:	e13ffe17 	ldw	r4,-8(fp)
8021870c:	21000017 	ldw	r4,0(r4)
80218710:	2011883a 	mov	r8,r4
80218714:	0013883a 	mov	r9,zero
80218718:	e23ffa15 	stw	r8,-24(fp)
8021871c:	e27ffb15 	stw	r9,-20(fp)
    
    /* traverse list until you get the last node */
    while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
80218720:	00001806 	br	80218784 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x120>
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
    {
        /* first check if descriptor already in the list */
        next_node_addr.u64 = (uintptr_t)descriptor;
80218724:	e13fff17 	ldw	r4,-4(fp)
80218728:	200d883a 	mov	r6,r4
8021872c:	000f883a 	mov	r7,zero
80218730:	e1bffc15 	stw	r6,-16(fp)
80218734:	e1fffd15 	stw	r7,-12(fp)
        if ((last_descr_ptr->next_desc_ptr_low == next_node_addr.u32[0])
80218738:	e13ff917 	ldw	r4,-28(fp)
8021873c:	21400317 	ldw	r5,12(r4)
80218740:	e13ffc17 	ldw	r4,-16(fp)
80218744:	2900061e 	bne	r5,r4,80218760 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
            && (last_descr_ptr->next_desc_ptr_high == next_node_addr.u32[1]))
80218748:	e13ff917 	ldw	r4,-28(fp)
8021874c:	21400b17 	ldw	r5,44(r4)
80218750:	e13ffd17 	ldw	r4,-12(fp)
80218754:	2900021e 	bne	r5,r4,80218760 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
        {
            return -EINVAL;  /* descriptor cannot already be in the list */
80218758:	00bffa84 	movi	r2,-22
8021875c:	00002306 	br	802187ec <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
        }
        /* go to next node in list, using 64 bit address */
        next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
80218760:	e13ff917 	ldw	r4,-28(fp)
80218764:	21000317 	ldw	r4,12(r4)
80218768:	e13ffc15 	stw	r4,-16(fp)
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
8021876c:	e13ff917 	ldw	r4,-28(fp)
80218770:	21000b17 	ldw	r4,44(r4)
80218774:	e13ffd15 	stw	r4,-12(fp)
        last_descr_ptr = 
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
80218778:	e13ffc17 	ldw	r4,-16(fp)
8021877c:	e17ffd17 	ldw	r5,-12(fp)
            return -EINVAL;  /* descriptor cannot already be in the list */
        }
        /* go to next node in list, using 64 bit address */
        next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
        last_descr_ptr = 
80218780:	e13ff915 	stw	r4,-28(fp)
    last_descr_ptr = *list; /* start at list root-node */
    /* the last nodes next ptr should point to the root node*/
    root_node_addr.u64 = (uintptr_t)*list;
    
    /* traverse list until you get the last node */
    while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
80218784:	e13ff917 	ldw	r4,-28(fp)
80218788:	21400317 	ldw	r5,12(r4)
8021878c:	e13ffa17 	ldw	r4,-24(fp)
80218790:	293fe41e 	bne	r5,r4,80218724 <__reset+0xfa1f8724>
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
80218794:	e13ff917 	ldw	r4,-28(fp)
80218798:	21400b17 	ldw	r5,44(r4)
8021879c:	e13ffb17 	ldw	r4,-20(fp)
802187a0:	293fe01e 	bne	r5,r4,80218724 <__reset+0xfa1f8724>
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
        last_descr_ptr = 
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
    }
    /* add this descriptor to end of list */
    next_node_addr.u64 = (uintptr_t)descriptor;
802187a4:	e13fff17 	ldw	r4,-4(fp)
802187a8:	2005883a 	mov	r2,r4
802187ac:	0007883a 	mov	r3,zero
802187b0:	e0bffc15 	stw	r2,-16(fp)
802187b4:	e0fffd15 	stw	r3,-12(fp)
    last_descr_ptr->next_desc_ptr_low = next_node_addr.u32[0];
802187b8:	e0fffc17 	ldw	r3,-16(fp)
802187bc:	e0bff917 	ldw	r2,-28(fp)
802187c0:	10c00315 	stw	r3,12(r2)
    last_descr_ptr->next_desc_ptr_high = next_node_addr.u32[1];
802187c4:	e0fffd17 	ldw	r3,-12(fp)
802187c8:	e0bff917 	ldw	r2,-28(fp)
802187cc:	10c00b15 	stw	r3,44(r2)
    /* ensure new last pointer points the beginning of the list */
    descriptor->next_desc_ptr_low = root_node_addr.u32[0];
802187d0:	e0fffa17 	ldw	r3,-24(fp)
802187d4:	e0bfff17 	ldw	r2,-4(fp)
802187d8:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = root_node_addr.u32[1];
802187dc:	e0fffb17 	ldw	r3,-20(fp)
802187e0:	e0bfff17 	ldw	r2,-4(fp)
802187e4:	10c00b15 	stw	r3,44(r2)
    return 0;
802187e8:	0005883a 	mov	r2,zero
}
802187ec:	e037883a 	mov	sp,fp
802187f0:	df000017 	ldw	fp,0(sp)
802187f4:	dec00104 	addi	sp,sp,4
802187f8:	f800283a 	ret

802187fc <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>:
 */ 
int alt_msgdma_prefetcher_set_std_list_own_by_hw_bits (
    alt_msgdma_prefetcher_standard_descriptor *list,
    alt_u8 last_desc_owned_by_sw,
    alt_u8 dcache_flush_desc_list)    
{
802187fc:	defff804 	addi	sp,sp,-32
80218800:	dfc00715 	stw	ra,28(sp)
80218804:	df000615 	stw	fp,24(sp)
80218808:	df000604 	addi	fp,sp,24
8021880c:	e13ffd15 	stw	r4,-12(fp)
80218810:	2807883a 	mov	r3,r5
80218814:	3005883a 	mov	r2,r6
80218818:	e0fffe05 	stb	r3,-8(fp)
8021881c:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 descriptor_control_field = 0;
80218820:	e03ffc15 	stw	zero,-16(fp)
    alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
    alt_u32 descriptor_count = 0;
80218824:	e03ffb15 	stw	zero,-20(fp)
    
    if (list == NULL)
80218828:	e0bffd17 	ldw	r2,-12(fp)
8021882c:	1000021e 	bne	r2,zero,80218838 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x3c>
    {
        return -EINVAL;  /* this list cannot be empty */
80218830:	00bffa84 	movi	r2,-22
80218834:	00002f06 	br	802188f4 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xf8>
    }

    /* update all nodes in the list */
    last_descr_ptr = list; /* start at list root-node */
80218838:	e0bffd17 	ldw	r2,-12(fp)
8021883c:	e0bffa15 	stw	r2,-24(fp)
    /* traverse list to update all of the nodes */
    while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
80218840:	00000d06 	br	80218878 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x7c>
    {
        /* get current value */
        descriptor_control_field = last_descr_ptr->control;
80218844:	e0bffa17 	ldw	r2,-24(fp)
80218848:	10800717 	ldw	r2,28(r2)
8021884c:	e0bffc15 	stw	r2,-16(fp)
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
80218850:	e0bffc17 	ldw	r2,-16(fp)
80218854:	10d00034 	orhi	r3,r2,16384
    while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
    {
        /* get current value */
        descriptor_control_field = last_descr_ptr->control;
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
80218858:	e0bffa17 	ldw	r2,-24(fp)
8021885c:	10c00715 	stw	r3,28(r2)
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
        /* go to next node in list */
        last_descr_ptr = 
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
80218860:	e0bffa17 	ldw	r2,-24(fp)
80218864:	10800317 	ldw	r2,12(r2)
        descriptor_control_field = last_descr_ptr->control;
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
        /* go to next node in list */
        last_descr_ptr = 
80218868:	e0bffa15 	stw	r2,-24(fp)
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
            
        descriptor_count++;
8021886c:	e0bffb17 	ldw	r2,-20(fp)
80218870:	10800044 	addi	r2,r2,1
80218874:	e0bffb15 	stw	r2,-20(fp)
    }

    /* update all nodes in the list */
    last_descr_ptr = list; /* start at list root-node */
    /* traverse list to update all of the nodes */
    while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
80218878:	e0bffa17 	ldw	r2,-24(fp)
8021887c:	10c00317 	ldw	r3,12(r2)
80218880:	e0bffd17 	ldw	r2,-12(fp)
80218884:	18bfef1e 	bne	r3,r2,80218844 <__reset+0xfa1f8844>
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
            
        descriptor_count++;
    }
    /* update the last node in the list, currently last_descr_ptr after while loop */
    descriptor_control_field = last_descr_ptr->control;    /* get current value */
80218888:	e0bffa17 	ldw	r2,-24(fp)
8021888c:	10800717 	ldw	r2,28(r2)
80218890:	e0bffc15 	stw	r2,-16(fp)
    /* update own_by_hw bit only */
    if (last_desc_owned_by_sw)
80218894:	e0bffe03 	ldbu	r2,-8(fp)
80218898:	10000726 	beq	r2,zero,802188b8 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xbc>
    {
        last_descr_ptr->control = descriptor_control_field 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
8021889c:	e0fffc17 	ldw	r3,-16(fp)
802188a0:	00b00034 	movhi	r2,49152
802188a4:	10bfffc4 	addi	r2,r2,-1
802188a8:	1886703a 	and	r3,r3,r2
    /* update the last node in the list, currently last_descr_ptr after while loop */
    descriptor_control_field = last_descr_ptr->control;    /* get current value */
    /* update own_by_hw bit only */
    if (last_desc_owned_by_sw)
    {
        last_descr_ptr->control = descriptor_control_field 
802188ac:	e0bffa17 	ldw	r2,-24(fp)
802188b0:	10c00715 	stw	r3,28(r2)
802188b4:	00000406 	br	802188c8 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xcc>
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
    }
    else {
        last_descr_ptr->control = descriptor_control_field 
            | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;        
802188b8:	e0bffc17 	ldw	r2,-16(fp)
802188bc:	10d00034 	orhi	r3,r2,16384
    {
        last_descr_ptr->control = descriptor_control_field 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
    }
    else {
        last_descr_ptr->control = descriptor_control_field 
802188c0:	e0bffa17 	ldw	r2,-24(fp)
802188c4:	10c00715 	stw	r3,28(r2)
            | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;        
    }
    
    descriptor_count++;
802188c8:	e0bffb17 	ldw	r2,-20(fp)
802188cc:	10800044 	addi	r2,r2,1
802188d0:	e0bffb15 	stw	r2,-20(fp)
    
    if (dcache_flush_desc_list)
802188d4:	e0bfff03 	ldbu	r2,-4(fp)
802188d8:	10000526 	beq	r2,zero,802188f0 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xf4>
    {        
        alt_dcache_flush(list,sizeof(alt_msgdma_prefetcher_standard_descriptor) * descriptor_count);
802188dc:	e0bffb17 	ldw	r2,-20(fp)
802188e0:	1004917a 	slli	r2,r2,5
802188e4:	100b883a 	mov	r5,r2
802188e8:	e13ffd17 	ldw	r4,-12(fp)
802188ec:	02192980 	call	80219298 <alt_dcache_flush>
    }
    
    return 0;
802188f0:	0005883a 	mov	r2,zero
}
802188f4:	e037883a 	mov	sp,fp
802188f8:	dfc00117 	ldw	ra,4(sp)
802188fc:	df000017 	ldw	fp,0(sp)
80218900:	dec00204 	addi	sp,sp,8
80218904:	f800283a 	ret

80218908 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>:
 */    
int alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits (
    alt_msgdma_prefetcher_extended_descriptor *list,
    alt_u8 last_desc_owned_by_sw,
    alt_u8 dcache_flush_desc_list) 
{    
80218908:	defff404 	addi	sp,sp,-48
8021890c:	dfc00b15 	stw	ra,44(sp)
80218910:	df000a15 	stw	fp,40(sp)
80218914:	df000a04 	addi	fp,sp,40
80218918:	e13ffd15 	stw	r4,-12(fp)
8021891c:	3009883a 	mov	r4,r6
80218920:	e17ffe05 	stb	r5,-8(fp)
80218924:	e13fff05 	stb	r4,-4(fp)
    alt_u32 descriptor_control_field = 0;
80218928:	e03ff815 	stw	zero,-32(fp)
    msgdma_addr64 root_node_addr, next_node_addr;
    alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
    alt_u32 descriptor_count = 0;
8021892c:	e03ff715 	stw	zero,-36(fp)
    
    if (list == NULL)
80218930:	e13ffd17 	ldw	r4,-12(fp)
80218934:	2000021e 	bne	r4,zero,80218940 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x38>
    {
        return -EINVAL;  /* this list cannot be empty */
80218938:	00bffa84 	movi	r2,-22
8021893c:	00003e06 	br	80218a38 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x130>
    }
    
    /* update all nodes in the list */
    last_descr_ptr = list; /* start at list root-node */
80218940:	e13ffd17 	ldw	r4,-12(fp)
80218944:	e13ff615 	stw	r4,-40(fp)
    /* the last nodes next ptr should point to the root node*/
    root_node_addr.u64 = (uintptr_t)list;
80218948:	e13ffd17 	ldw	r4,-12(fp)
8021894c:	2005883a 	mov	r2,r4
80218950:	0007883a 	mov	r3,zero
80218954:	e0bff915 	stw	r2,-28(fp)
80218958:	e0fffa15 	stw	r3,-24(fp)

    /* traverse list until you get the last node */
    while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
8021895c:	00001306 	br	802189ac <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xa4>
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
    {
        /* start with current value */
        descriptor_control_field = last_descr_ptr->control;
80218960:	e0bff617 	ldw	r2,-40(fp)
80218964:	10800f17 	ldw	r2,60(r2)
80218968:	e0bff815 	stw	r2,-32(fp)
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
8021896c:	e0bff817 	ldw	r2,-32(fp)
80218970:	10d00034 	orhi	r3,r2,16384
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
    {
        /* start with current value */
        descriptor_control_field = last_descr_ptr->control;
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
80218974:	e0bff617 	ldw	r2,-40(fp)
80218978:	10c00f15 	stw	r3,60(r2)
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
        /* go to next node in list, using 64 bit address */
        next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
8021897c:	e0bff617 	ldw	r2,-40(fp)
80218980:	10800317 	ldw	r2,12(r2)
80218984:	e0bffb15 	stw	r2,-20(fp)
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
80218988:	e0bff617 	ldw	r2,-40(fp)
8021898c:	10800b17 	ldw	r2,44(r2)
80218990:	e0bffc15 	stw	r2,-16(fp)
        last_descr_ptr = 
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
80218994:	e0bffb17 	ldw	r2,-20(fp)
80218998:	e0fffc17 	ldw	r3,-16(fp)
        last_descr_ptr->control = descriptor_control_field 
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
        /* go to next node in list, using 64 bit address */
        next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
        last_descr_ptr = 
8021899c:	e0bff615 	stw	r2,-40(fp)
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
        descriptor_count++;            
802189a0:	e0bff717 	ldw	r2,-36(fp)
802189a4:	10800044 	addi	r2,r2,1
802189a8:	e0bff715 	stw	r2,-36(fp)
    last_descr_ptr = list; /* start at list root-node */
    /* the last nodes next ptr should point to the root node*/
    root_node_addr.u64 = (uintptr_t)list;

    /* traverse list until you get the last node */
    while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
802189ac:	e0bff617 	ldw	r2,-40(fp)
802189b0:	10c00317 	ldw	r3,12(r2)
802189b4:	e0bff917 	ldw	r2,-28(fp)
802189b8:	18bfe91e 	bne	r3,r2,80218960 <__reset+0xfa1f8960>
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
802189bc:	e0bff617 	ldw	r2,-40(fp)
802189c0:	10c00b17 	ldw	r3,44(r2)
802189c4:	e0bffa17 	ldw	r2,-24(fp)
802189c8:	18bfe51e 	bne	r3,r2,80218960 <__reset+0xfa1f8960>
        last_descr_ptr = 
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
        descriptor_count++;            
    }
    /* update the last node in the list, currently last_descr_ptr after while loop */
    descriptor_control_field = last_descr_ptr->control;    /* start with current value */
802189cc:	e0bff617 	ldw	r2,-40(fp)
802189d0:	10800f17 	ldw	r2,60(r2)
802189d4:	e0bff815 	stw	r2,-32(fp)
    /* update own_by_hw bit only */
    if (last_desc_owned_by_sw)
802189d8:	e0bffe03 	ldbu	r2,-8(fp)
802189dc:	10000726 	beq	r2,zero,802189fc <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xf4>
    {
        last_descr_ptr->control = descriptor_control_field 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
802189e0:	e0fff817 	ldw	r3,-32(fp)
802189e4:	00b00034 	movhi	r2,49152
802189e8:	10bfffc4 	addi	r2,r2,-1
802189ec:	1886703a 	and	r3,r3,r2
    /* update the last node in the list, currently last_descr_ptr after while loop */
    descriptor_control_field = last_descr_ptr->control;    /* start with current value */
    /* update own_by_hw bit only */
    if (last_desc_owned_by_sw)
    {
        last_descr_ptr->control = descriptor_control_field 
802189f0:	e0bff617 	ldw	r2,-40(fp)
802189f4:	10c00f15 	stw	r3,60(r2)
802189f8:	00000406 	br	80218a0c <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x104>
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
    }
    else {
        last_descr_ptr->control = descriptor_control_field 
            | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;        
802189fc:	e0bff817 	ldw	r2,-32(fp)
80218a00:	10d00034 	orhi	r3,r2,16384
    {
        last_descr_ptr->control = descriptor_control_field 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
    }
    else {
        last_descr_ptr->control = descriptor_control_field 
80218a04:	e0bff617 	ldw	r2,-40(fp)
80218a08:	10c00f15 	stw	r3,60(r2)
            | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;        
    }
    
    descriptor_count++;
80218a0c:	e0bff717 	ldw	r2,-36(fp)
80218a10:	10800044 	addi	r2,r2,1
80218a14:	e0bff715 	stw	r2,-36(fp)
    
    if (dcache_flush_desc_list)
80218a18:	e0bfff03 	ldbu	r2,-4(fp)
80218a1c:	10000526 	beq	r2,zero,80218a34 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x12c>
    {        
        alt_dcache_flush(list,sizeof(alt_msgdma_prefetcher_extended_descriptor) * descriptor_count);        
80218a20:	e0bff717 	ldw	r2,-36(fp)
80218a24:	100491ba 	slli	r2,r2,6
80218a28:	100b883a 	mov	r5,r2
80218a2c:	e13ffd17 	ldw	r4,-12(fp)
80218a30:	02192980 	call	80219298 <alt_dcache_flush>
    }
    
    return 0;
80218a34:	0005883a 	mov	r2,zero
}
80218a38:	e037883a 	mov	sp,fp
80218a3c:	dfc00117 	ldw	ra,4(sp)
80218a40:	df000017 	ldw	fp,0(sp)
80218a44:	dec00204 	addi	sp,sp,8
80218a48:	f800283a 	ret

80218a4c <alt_msgdma_start_prefetcher_with_list_addr>:
int alt_msgdma_start_prefetcher_with_list_addr (
    alt_msgdma_dev *dev,
    alt_u64  list_addr,
    alt_u8 park_mode_en,
    alt_u8 poll_en)
{
80218a4c:	deffef04 	addi	sp,sp,-68
80218a50:	df001015 	stw	fp,64(sp)
80218a54:	df001004 	addi	fp,sp,64
80218a58:	e13ffb15 	stw	r4,-20(fp)
80218a5c:	e17ffc15 	stw	r5,-16(fp)
80218a60:	e1bffd15 	stw	r6,-12(fp)
80218a64:	3807883a 	mov	r3,r7
80218a68:	e0800117 	ldw	r2,4(fp)
80218a6c:	e0fffe05 	stb	r3,-8(fp)
80218a70:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 prefetcher_ctl = 0;
80218a74:	e03ff015 	stw	zero,-64(fp)
    alt_u32 dispatcher_ctl = 0;
80218a78:	e03ff115 	stw	zero,-60(fp)
    alt_irq_context context = 0;
80218a7c:	e03ff215 	stw	zero,-56(fp)
    
    /* use helper struct to get easy access to hi/low address */
    msgdma_addr64 root_node_addr;
    root_node_addr.u64 = list_addr;  
80218a80:	e0bffc17 	ldw	r2,-16(fp)
80218a84:	e0bff915 	stw	r2,-28(fp)
80218a88:	e0bffd17 	ldw	r2,-12(fp)
80218a8c:	e0bffa15 	stw	r2,-24(fp)
     * semaphore. This ensures that accessing registers is thread-safe.
     */
    ALT_SEM_PEND (dev->regs_lock, 0);
    
    /* case where prefetcher already started, return busy error */ 
    prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
80218a90:	e0bffb17 	ldw	r2,-20(fp)
80218a94:	10800617 	ldw	r2,24(r2)
80218a98:	10800037 	ldwio	r2,0(r2)
80218a9c:	e0bff015 	stw	r2,-64(fp)
    if(ALT_MSGDMA_PREFETCHER_CTRL_RUN_GET(prefetcher_ctl)){
80218aa0:	e0bff017 	ldw	r2,-64(fp)
80218aa4:	1080004c 	andi	r2,r2,1
80218aa8:	10000226 	beq	r2,zero,80218ab4 <alt_msgdma_start_prefetcher_with_list_addr+0x68>
        /* release the registers semaphore */
        ALT_SEM_POST (dev->regs_lock);
        return -EBUSY;
80218aac:	00bffc04 	movi	r2,-16
80218ab0:	00009206 	br	80218cfc <alt_msgdma_start_prefetcher_with_list_addr+0x2b0>
    }
        
    /* Stop the msgdma dispatcher from issuing more descriptors to the
       read or write masters  */
    /* stop issuing more descriptors */
    dispatcher_ctl = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
80218ab4:	00800804 	movi	r2,32
80218ab8:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80218abc:	0005303a 	rdctl	r2,status
80218ac0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80218ac4:	e0fff517 	ldw	r3,-44(fp)
80218ac8:	00bfff84 	movi	r2,-2
80218acc:	1884703a 	and	r2,r3,r2
80218ad0:	1001703a 	wrctl	status,r2
  
  return context;
80218ad4:	e0bff517 	ldw	r2,-44(fp)
    
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
80218ad8:	e0bff215 	stw	r2,-56(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
80218adc:	e0bffb17 	ldw	r2,-20(fp)
80218ae0:	10800317 	ldw	r2,12(r2)
80218ae4:	10800104 	addi	r2,r2,4
80218ae8:	e0fff117 	ldw	r3,-60(fp)
80218aec:	10c00035 	stwio	r3,0(r2)
    /*
     * Clear any (previous) status register information
     * that might occlude our error checking later.
     */
    IOWR_ALTERA_MSGDMA_CSR_STATUS( dev->csr_base, 
80218af0:	e0bffb17 	ldw	r2,-20(fp)
80218af4:	10800317 	ldw	r2,12(r2)
80218af8:	e0fffb17 	ldw	r3,-20(fp)
80218afc:	18c00317 	ldw	r3,12(r3)
80218b00:	18c00037 	ldwio	r3,0(r3)
80218b04:	10c00035 	stwio	r3,0(r2)
80218b08:	e0bff217 	ldw	r2,-56(fp)
80218b0c:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80218b10:	e0bff317 	ldw	r2,-52(fp)
80218b14:	1001703a 	wrctl	status,r2
     * If a callback routine has been previously registered which will be
     * called from the msgdma ISR. Set up dispatcher to:
     *  - Run
     *  - Stop on an error with any particular descriptor
     */
    if(dev->callback)
80218b18:	e0bffb17 	ldw	r2,-20(fp)
80218b1c:	10800b17 	ldw	r2,44(r2)
80218b20:	10002326 	beq	r2,zero,80218bb0 <alt_msgdma_start_prefetcher_with_list_addr+0x164>
    {
        dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
80218b24:	e0bffb17 	ldw	r2,-20(fp)
80218b28:	10c00d17 	ldw	r3,52(r2)
80218b2c:	e0bff117 	ldw	r2,-60(fp)
80218b30:	1884b03a 	or	r2,r3,r2
80218b34:	10800514 	ori	r2,r2,20
80218b38:	e0bff115 	stw	r2,-60(fp)
                | ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
80218b3c:	e0fff117 	ldw	r3,-60(fp)
80218b40:	00bff7c4 	movi	r2,-33
80218b44:	1884703a 	and	r2,r3,r2
80218b48:	e0bff115 	stw	r2,-60(fp)
        
        prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
80218b4c:	e0bff017 	ldw	r2,-64(fp)
80218b50:	10800214 	ori	r2,r2,8
80218b54:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80218b58:	0005303a 	rdctl	r2,status
80218b5c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80218b60:	e0fff717 	ldw	r3,-36(fp)
80218b64:	00bfff84 	movi	r2,-2
80218b68:	1884703a 	and	r2,r3,r2
80218b6c:	1001703a 	wrctl	status,r2
  
  return context;
80218b70:	e0bff717 	ldw	r2,-36(fp)
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
80218b74:	e0bff215 	stw	r2,-56(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
80218b78:	e0bffb17 	ldw	r2,-20(fp)
80218b7c:	10800317 	ldw	r2,12(r2)
80218b80:	10800104 	addi	r2,r2,4
80218b84:	e0fff117 	ldw	r3,-60(fp)
80218b88:	10c00035 	stwio	r3,0(r2)
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
80218b8c:	e0bffb17 	ldw	r2,-20(fp)
80218b90:	10800617 	ldw	r2,24(r2)
80218b94:	e0fff017 	ldw	r3,-64(fp)
80218b98:	10c00035 	stwio	r3,0(r2)
80218b9c:	e0bff217 	ldw	r2,-56(fp)
80218ba0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80218ba4:	e0bff417 	ldw	r2,-48(fp)
80218ba8:	1001703a 	wrctl	status,r2
80218bac:	00002306 	br	80218c3c <alt_msgdma_start_prefetcher_with_list_addr+0x1f0>
      *   - Stop on an error with any particular descriptor
      *   - Disable interrupt generation
      */
     else
     {
         dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
80218bb0:	e0bffb17 	ldw	r2,-20(fp)
80218bb4:	10c00d17 	ldw	r3,52(r2)
80218bb8:	e0bff117 	ldw	r2,-60(fp)
80218bbc:	1884b03a 	or	r2,r3,r2
80218bc0:	10800114 	ori	r2,r2,4
80218bc4:	e0bff115 	stw	r2,-60(fp)
         dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
80218bc8:	e0fff117 	ldw	r3,-60(fp)
80218bcc:	00bff3c4 	movi	r2,-49
80218bd0:	1884703a 	and	r2,r3,r2
80218bd4:	e0bff115 	stw	r2,-60(fp)
                 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
         prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
80218bd8:	e0fff017 	ldw	r3,-64(fp)
80218bdc:	00bffdc4 	movi	r2,-9
80218be0:	1884703a 	and	r2,r3,r2
80218be4:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80218be8:	0005303a 	rdctl	r2,status
80218bec:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80218bf0:	e0fff817 	ldw	r3,-32(fp)
80218bf4:	00bfff84 	movi	r2,-2
80218bf8:	1884703a 	and	r2,r3,r2
80218bfc:	1001703a 	wrctl	status,r2
  
  return context;
80218c00:	e0bff817 	ldw	r2,-32(fp)
         /* making sure the read-modify-write below can't be pre-empted */
         context = alt_irq_disable_all();
80218c04:	e0bff215 	stw	r2,-56(fp)
         IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
80218c08:	e0bffb17 	ldw	r2,-20(fp)
80218c0c:	10800317 	ldw	r2,12(r2)
80218c10:	10800104 	addi	r2,r2,4
80218c14:	e0fff117 	ldw	r3,-60(fp)
80218c18:	10c00035 	stwio	r3,0(r2)
         IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
80218c1c:	e0bffb17 	ldw	r2,-20(fp)
80218c20:	10800617 	ldw	r2,24(r2)
80218c24:	e0fff017 	ldw	r3,-64(fp)
80218c28:	10c00035 	stwio	r3,0(r2)
80218c2c:	e0bff217 	ldw	r2,-56(fp)
80218c30:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80218c34:	e0bff617 	ldw	r2,-40(fp)
80218c38:	1001703a 	wrctl	status,r2
         alt_irq_enable_all(context);
     }   
    
     /* set next descriptor registers to point to the list root-node */
     IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_LOW(dev->prefetcher_base,
80218c3c:	e0bffb17 	ldw	r2,-20(fp)
80218c40:	10800617 	ldw	r2,24(r2)
80218c44:	10800104 	addi	r2,r2,4
80218c48:	e0fff917 	ldw	r3,-28(fp)
80218c4c:	10c00035 	stwio	r3,0(r2)
             root_node_addr.u32[0]);
     IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_HIGH(dev->prefetcher_base,
80218c50:	e0bffb17 	ldw	r2,-20(fp)
80218c54:	10800617 	ldw	r2,24(r2)
80218c58:	10800204 	addi	r2,r2,8
80218c5c:	e0fffa17 	ldw	r3,-24(fp)
80218c60:	10c00035 	stwio	r3,0(r2)
             root_node_addr.u32[1]);
        
     /* set park-mode */
     if (park_mode_en){
80218c64:	e0bffe03 	ldbu	r2,-8(fp)
80218c68:	10000426 	beq	r2,zero,80218c7c <alt_msgdma_start_prefetcher_with_list_addr+0x230>
         prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
80218c6c:	e0bff017 	ldw	r2,-64(fp)
80218c70:	10800414 	ori	r2,r2,16
80218c74:	e0bff015 	stw	r2,-64(fp)
80218c78:	00000406 	br	80218c8c <alt_msgdma_start_prefetcher_with_list_addr+0x240>
     }
     else {
         prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
80218c7c:	e0fff017 	ldw	r3,-64(fp)
80218c80:	00bffbc4 	movi	r2,-17
80218c84:	1884703a 	and	r2,r3,r2
80218c88:	e0bff015 	stw	r2,-64(fp)
     }
     
     /* set poll-en */
     if (poll_en){
80218c8c:	e0bfff03 	ldbu	r2,-4(fp)
80218c90:	10000e26 	beq	r2,zero,80218ccc <alt_msgdma_start_prefetcher_with_list_addr+0x280>
         prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
80218c94:	e0bff017 	ldw	r2,-64(fp)
80218c98:	10800094 	ori	r2,r2,2
80218c9c:	e0bff015 	stw	r2,-64(fp)
         if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
80218ca0:	e0bffb17 	ldw	r2,-20(fp)
80218ca4:	10800617 	ldw	r2,24(r2)
80218ca8:	10800304 	addi	r2,r2,12
80218cac:	10800037 	ldwio	r2,0(r2)
80218cb0:	10000a1e 	bne	r2,zero,80218cdc <alt_msgdma_start_prefetcher_with_list_addr+0x290>
                 dev->prefetcher_base) == 0){
             /* set poll frequency to some non-zero default value */
             IOWR_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
80218cb4:	e0bffb17 	ldw	r2,-20(fp)
80218cb8:	10800617 	ldw	r2,24(r2)
80218cbc:	10800304 	addi	r2,r2,12
80218cc0:	00c03fc4 	movi	r3,255
80218cc4:	10c00035 	stwio	r3,0(r2)
80218cc8:	00000406 	br	80218cdc <alt_msgdma_start_prefetcher_with_list_addr+0x290>
                     dev->prefetcher_base, 0xFF);
         }
     }
     else {
         prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_CLR_MASK; 
80218ccc:	e0fff017 	ldw	r3,-64(fp)
80218cd0:	00bfff44 	movi	r2,-3
80218cd4:	1884703a 	and	r2,r3,r2
80218cd8:	e0bff015 	stw	r2,-64(fp)
     }
     
     /* set the prefetcher run bit */
     prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_RUN_SET_MASK;
80218cdc:	e0bff017 	ldw	r2,-64(fp)
80218ce0:	10800054 	ori	r2,r2,1
80218ce4:	e0bff015 	stw	r2,-64(fp)
     /* start the dma since run bit is set */
     IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
80218ce8:	e0bffb17 	ldw	r2,-20(fp)
80218cec:	10800617 	ldw	r2,24(r2)
80218cf0:	e0fff017 	ldw	r3,-64(fp)
80218cf4:	10c00035 	stwio	r3,0(r2)
      * Now that access to the registers is complete, release the registers
      * semaphore so that other threads can access the registers.
      */
     ALT_SEM_POST (dev->regs_lock);
     
     return 0;
80218cf8:	0005883a 	mov	r2,zero
}
80218cfc:	e037883a 	mov	sp,fp
80218d00:	df000017 	ldw	fp,0(sp)
80218d04:	dec00104 	addi	sp,sp,4
80218d08:	f800283a 	ret

80218d0c <alt_msgdma_start_prefetcher_with_std_desc_list>:
    alt_msgdma_prefetcher_standard_descriptor *list,
    alt_u8 park_mode_en,
    alt_u8 poll_en,
    alt_u8 last_desc_owned_by_sw,
    alt_u8 dcache_flush_desc_list)
{    
80218d0c:	defff504 	addi	sp,sp,-44
80218d10:	dfc00a15 	stw	ra,40(sp)
80218d14:	df000915 	stw	fp,36(sp)
80218d18:	dc400815 	stw	r17,32(sp)
80218d1c:	dc000715 	stw	r16,28(sp)
80218d20:	df000904 	addi	fp,sp,36
80218d24:	e13ff815 	stw	r4,-32(fp)
80218d28:	e17ff915 	stw	r5,-28(fp)
80218d2c:	300b883a 	mov	r5,r6
80218d30:	3809883a 	mov	r4,r7
80218d34:	e0c00217 	ldw	r3,8(fp)
80218d38:	e0800317 	ldw	r2,12(fp)
80218d3c:	e17ffa05 	stb	r5,-24(fp)
80218d40:	e13ffb05 	stb	r4,-20(fp)
80218d44:	e0fffc05 	stb	r3,-16(fp)
80218d48:	e0bffd05 	stb	r2,-12(fp)
    if (alt_msgdma_prefetcher_set_std_list_own_by_hw_bits(list,last_desc_owned_by_sw,dcache_flush_desc_list) != 0)
80218d4c:	e0bffc03 	ldbu	r2,-16(fp)
80218d50:	e0fffd03 	ldbu	r3,-12(fp)
80218d54:	180d883a 	mov	r6,r3
80218d58:	100b883a 	mov	r5,r2
80218d5c:	e13ff917 	ldw	r4,-28(fp)
80218d60:	02187fc0 	call	802187fc <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>
80218d64:	10000226 	beq	r2,zero,80218d70 <alt_msgdma_start_prefetcher_with_std_desc_list+0x64>
    {
        return -EINVAL;
80218d68:	00bffa84 	movi	r2,-22
80218d6c:	00000b06 	br	80218d9c <alt_msgdma_start_prefetcher_with_std_desc_list+0x90>
    }

    return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list,
80218d70:	e0bff917 	ldw	r2,-28(fp)
80218d74:	1021883a 	mov	r16,r2
80218d78:	0023883a 	mov	r17,zero
80218d7c:	e0fffa03 	ldbu	r3,-24(fp)
80218d80:	e0bffb03 	ldbu	r2,-20(fp)
80218d84:	d8800015 	stw	r2,0(sp)
80218d88:	180f883a 	mov	r7,r3
80218d8c:	800b883a 	mov	r5,r16
80218d90:	880d883a 	mov	r6,r17
80218d94:	e13ff817 	ldw	r4,-32(fp)
80218d98:	0218a4c0 	call	80218a4c <alt_msgdma_start_prefetcher_with_list_addr>
            park_mode_en, poll_en);
}
80218d9c:	e6fffe04 	addi	sp,fp,-8
80218da0:	dfc00317 	ldw	ra,12(sp)
80218da4:	df000217 	ldw	fp,8(sp)
80218da8:	dc400117 	ldw	r17,4(sp)
80218dac:	dc000017 	ldw	r16,0(sp)
80218db0:	dec00404 	addi	sp,sp,16
80218db4:	f800283a 	ret

80218db8 <alt_msgdma_start_prefetcher_with_extd_desc_list>:
    alt_msgdma_prefetcher_extended_descriptor *list,
    alt_u8 park_mode_en,
    alt_u8 poll_en,
    alt_u8 last_desc_owned_by_sw,
    alt_u8 dcache_flush_desc_list)
{
80218db8:	defff504 	addi	sp,sp,-44
80218dbc:	dfc00a15 	stw	ra,40(sp)
80218dc0:	df000915 	stw	fp,36(sp)
80218dc4:	dc400815 	stw	r17,32(sp)
80218dc8:	dc000715 	stw	r16,28(sp)
80218dcc:	df000904 	addi	fp,sp,36
80218dd0:	e13ff815 	stw	r4,-32(fp)
80218dd4:	e17ff915 	stw	r5,-28(fp)
80218dd8:	300b883a 	mov	r5,r6
80218ddc:	3809883a 	mov	r4,r7
80218de0:	e0c00217 	ldw	r3,8(fp)
80218de4:	e0800317 	ldw	r2,12(fp)
80218de8:	e17ffa05 	stb	r5,-24(fp)
80218dec:	e13ffb05 	stb	r4,-20(fp)
80218df0:	e0fffc05 	stb	r3,-16(fp)
80218df4:	e0bffd05 	stb	r2,-12(fp)
    
     if (alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits(list,last_desc_owned_by_sw,dcache_flush_desc_list) != 0)
80218df8:	e0bffc03 	ldbu	r2,-16(fp)
80218dfc:	e0fffd03 	ldbu	r3,-12(fp)
80218e00:	180d883a 	mov	r6,r3
80218e04:	100b883a 	mov	r5,r2
80218e08:	e13ff917 	ldw	r4,-28(fp)
80218e0c:	02189080 	call	80218908 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>
80218e10:	10000226 	beq	r2,zero,80218e1c <alt_msgdma_start_prefetcher_with_extd_desc_list+0x64>
    {
        return -EINVAL;
80218e14:	00bffa84 	movi	r2,-22
80218e18:	00000b06 	br	80218e48 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x90>
    }
        
    return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list, 
80218e1c:	e0bff917 	ldw	r2,-28(fp)
80218e20:	1021883a 	mov	r16,r2
80218e24:	0023883a 	mov	r17,zero
80218e28:	e0fffa03 	ldbu	r3,-24(fp)
80218e2c:	e0bffb03 	ldbu	r2,-20(fp)
80218e30:	d8800015 	stw	r2,0(sp)
80218e34:	180f883a 	mov	r7,r3
80218e38:	800b883a 	mov	r5,r16
80218e3c:	880d883a 	mov	r6,r17
80218e40:	e13ff817 	ldw	r4,-32(fp)
80218e44:	0218a4c0 	call	80218a4c <alt_msgdma_start_prefetcher_with_list_addr>
            park_mode_en, poll_en);
}
80218e48:	e6fffe04 	addi	sp,fp,-8
80218e4c:	dfc00317 	ldw	ra,12(sp)
80218e50:	df000217 	ldw	fp,8(sp)
80218e54:	dc400117 	ldw	r17,4(sp)
80218e58:	dc000017 	ldw	r16,0(sp)
80218e5c:	dec00404 	addi	sp,sp,16
80218e60:	f800283a 	ret

80218e64 <alt_msgdma_open>:
 * Returns:
 * - Pointer to msgdma device instance structure, or null if the device
 *   could not be opened.
 */
alt_msgdma_dev* alt_msgdma_open (const char* name)
{
80218e64:	defffc04 	addi	sp,sp,-16
80218e68:	dfc00315 	stw	ra,12(sp)
80218e6c:	df000215 	stw	fp,8(sp)
80218e70:	df000204 	addi	fp,sp,8
80218e74:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev* dev = NULL;
80218e78:	e03ffe15 	stw	zero,-8(fp)

    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);
80218e7c:	d1601004 	addi	r5,gp,-32704
80218e80:	e13fff17 	ldw	r4,-4(fp)
80218e84:	02194600 	call	80219460 <alt_find_dev>
80218e88:	e0bffe15 	stw	r2,-8(fp)

    if (NULL == dev)
80218e8c:	e0bffe17 	ldw	r2,-8(fp)
80218e90:	1000041e 	bne	r2,zero,80218ea4 <alt_msgdma_open+0x40>
    {
        ALT_ERRNO = ENODEV;
80218e94:	02171cc0 	call	802171cc <alt_get_errno>
80218e98:	1007883a 	mov	r3,r2
80218e9c:	008004c4 	movi	r2,19
80218ea0:	18800015 	stw	r2,0(r3)
    }

    return dev;
80218ea4:	e0bffe17 	ldw	r2,-8(fp)
}
80218ea8:	e037883a 	mov	sp,fp
80218eac:	dfc00117 	ldw	ra,4(sp)
80218eb0:	df000017 	ldw	fp,0(sp)
80218eb4:	dec00204 	addi	sp,sp,8
80218eb8:	f800283a 	ret

80218ebc <alt_msgdma_init>:
 * This routine disables interrupts, descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_msgdma_init (alt_msgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
80218ebc:	defff804 	addi	sp,sp,-32
80218ec0:	dfc00715 	stw	ra,28(sp)
80218ec4:	df000615 	stw	fp,24(sp)
80218ec8:	df000604 	addi	fp,sp,24
80218ecc:	e13ffd15 	stw	r4,-12(fp)
80218ed0:	e17ffe15 	stw	r5,-8(fp)
80218ed4:	e1bfff15 	stw	r6,-4(fp)
    extern alt_llist alt_msgdma_list;
    alt_u32 temporary_control;
    int error;

    if (dev->prefetcher_enable)
80218ed8:	e0bffd17 	ldw	r2,-12(fp)
80218edc:	10801783 	ldbu	r2,94(r2)
80218ee0:	10803fcc 	andi	r2,r2,255
80218ee4:	10000b26 	beq	r2,zero,80218f14 <alt_msgdma_init+0x58>
    {
        /* start prefetcher reset sequence */
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, 
80218ee8:	e0bffd17 	ldw	r2,-12(fp)
80218eec:	10800617 	ldw	r2,24(r2)
80218ef0:	00c00104 	movi	r3,4
80218ef4:	10c00035 	stwio	r3,0(r2)
                ALT_MSGDMA_PREFETCHER_CTRL_RESET_SET_MASK);
        /* wait until hw clears the bit */
        while(ALT_MSGDMA_PREFETCHER_CTRL_RESET_GET(
80218ef8:	0001883a 	nop
80218efc:	e0bffd17 	ldw	r2,-12(fp)
80218f00:	10800617 	ldw	r2,24(r2)
80218f04:	10800037 	ldwio	r2,0(r2)
80218f08:	1080010c 	andi	r2,r2,4
80218f0c:	1005d0ba 	srai	r2,r2,2
80218f10:	103ffa1e 	bne	r2,zero,80218efc <__reset+0xfa1f8efc>
    }    
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
80218f14:	e0bffd17 	ldw	r2,-12(fp)
80218f18:	10800317 	ldw	r2,12(r2)
80218f1c:	10800104 	addi	r2,r2,4
80218f20:	00c00084 	movi	r3,2
80218f24:	10c00035 	stwio	r3,0(r2)
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
80218f28:	0001883a 	nop
80218f2c:	e0bffd17 	ldw	r2,-12(fp)
80218f30:	10800317 	ldw	r2,12(r2)
80218f34:	10800037 	ldwio	r2,0(r2)
            & ALTERA_MSGDMA_CSR_RESET_STATE_MASK));
80218f38:	1080100c 	andi	r2,r2,64
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
80218f3c:	103ffb1e 	bne	r2,zero,80218f2c <__reset+0xfa1f8f2c>
    * Disable interrupts, halt descriptor processing,
    * and clear status register content
    */

    /* disable global interrupt */
    temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
80218f40:	e0bffd17 	ldw	r2,-12(fp)
80218f44:	10800317 	ldw	r2,12(r2)
80218f48:	10800104 	addi	r2,r2,4
80218f4c:	10800037 	ldwio	r2,0(r2)
80218f50:	1007883a 	mov	r3,r2
80218f54:	00bffbc4 	movi	r2,-17
80218f58:	1884703a 	and	r2,r3,r2
80218f5c:	e0bffb15 	stw	r2,-20(fp)
            & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    /* stopping descriptor */
    temporary_control |= ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
80218f60:	e0bffb17 	ldw	r2,-20(fp)
80218f64:	10800814 	ori	r2,r2,32
80218f68:	e0bffb15 	stw	r2,-20(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
80218f6c:	e0bffd17 	ldw	r2,-12(fp)
80218f70:	10800317 	ldw	r2,12(r2)
80218f74:	10800104 	addi	r2,r2,4
80218f78:	e0fffb17 	ldw	r3,-20(fp)
80218f7c:	10c00035 	stwio	r3,0(r2)

    /* clear the CSR status register */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base, 
80218f80:	e0bffd17 	ldw	r2,-12(fp)
80218f84:	10800317 	ldw	r2,12(r2)
80218f88:	e0fffd17 	ldw	r3,-12(fp)
80218f8c:	18c00317 	ldw	r3,12(r3)
80218f90:	18c00037 	ldwio	r3,0(r3)
80218f94:	10c00035 	stwio	r3,0(r2)
            IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    
    if (dev->prefetcher_enable)
80218f98:	e0bffd17 	ldw	r2,-12(fp)
80218f9c:	10801783 	ldbu	r2,94(r2)
80218fa0:	10803fcc 	andi	r2,r2,255
80218fa4:	10000826 	beq	r2,zero,80218fc8 <alt_msgdma_init+0x10c>
    {
        /* clear all status bits that are set, since theyre W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base, 
80218fa8:	e0bffd17 	ldw	r2,-12(fp)
80218fac:	10800617 	ldw	r2,24(r2)
80218fb0:	10800404 	addi	r2,r2,16
80218fb4:	e0fffd17 	ldw	r3,-12(fp)
80218fb8:	18c00617 	ldw	r3,24(r3)
80218fbc:	18c00404 	addi	r3,r3,16
80218fc0:	18c00037 	ldwio	r3,0(r3)
80218fc4:	10c00035 	stwio	r3,0(r2)
                IORD_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base));
    }

    /* Register this instance of the msgdma controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_msgdma_list);
80218fc8:	d1601004 	addi	r5,gp,-32704
80218fcc:	e13ffd17 	ldw	r4,-12(fp)
80218fd0:	02192fc0 	call	802192fc <alt_dev_llist_insert>
80218fd4:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
80218fd8:	e0bffc15 	stw	r2,-16(fp)
            
    if (!error)
80218fdc:	e0bffc17 	ldw	r2,-16(fp)
80218fe0:	1000081e 	bne	r2,zero,80219004 <alt_msgdma_init+0x148>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
80218fe4:	d8000015 	stw	zero,0(sp)
80218fe8:	e1fffd17 	ldw	r7,-12(fp)
80218fec:	01a00874 	movhi	r6,32801
80218ff0:	319cf204 	addi	r6,r6,29640
80218ff4:	e17fff17 	ldw	r5,-4(fp)
80218ff8:	e13ffe17 	ldw	r4,-8(fp)
80218ffc:	02194f00 	call	802194f0 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }
    
    return;
80219000:	00000406 	br	80219014 <alt_msgdma_init+0x158>
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
80219004:	012008b4 	movhi	r4,32802
80219008:	212dd804 	addi	r4,r4,-18592
8021900c:	0219b240 	call	80219b24 <alt_printf>
    }
    
    return;
80219010:	0001883a 	nop

}
80219014:	e037883a 	mov	sp,fp
80219018:	dfc00117 	ldw	ra,4(sp)
8021901c:	df000017 	ldw	fp,0(sp)
80219020:	dec00204 	addi	sp,sp,8
80219024:	f800283a 	ret

80219028 <alt_msgdma_register_callback>:
void alt_msgdma_register_callback(
    alt_msgdma_dev *dev,
    alt_msgdma_callback callback,
    alt_u32 control,
    void *context)
{
80219028:	defffb04 	addi	sp,sp,-20
8021902c:	df000415 	stw	fp,16(sp)
80219030:	df000404 	addi	fp,sp,16
80219034:	e13ffc15 	stw	r4,-16(fp)
80219038:	e17ffd15 	stw	r5,-12(fp)
8021903c:	e1bffe15 	stw	r6,-8(fp)
80219040:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
80219044:	e0bffc17 	ldw	r2,-16(fp)
80219048:	e0fffd17 	ldw	r3,-12(fp)
8021904c:	10c00b15 	stw	r3,44(r2)
    dev->callback_context = context;
80219050:	e0bffc17 	ldw	r2,-16(fp)
80219054:	e0ffff17 	ldw	r3,-4(fp)
80219058:	10c00c15 	stw	r3,48(r2)
    dev->control          = control;
8021905c:	e0bffc17 	ldw	r2,-16(fp)
80219060:	e0fffe17 	ldw	r3,-8(fp)
80219064:	10c00d15 	stw	r3,52(r2)

    return ;
80219068:	0001883a 	nop
}
8021906c:	e037883a 	mov	sp,fp
80219070:	df000017 	ldw	fp,0(sp)
80219074:	dec00104 	addi	sp,sp,4
80219078:	f800283a 	ret

8021907c <alt_msgdma_standard_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_standard_descriptor_async_transfer(
    alt_msgdma_dev *dev,
    alt_msgdma_standard_descriptor *desc)
{
8021907c:	defffc04 	addi	sp,sp,-16
80219080:	dfc00315 	stw	ra,12(sp)
80219084:	df000215 	stw	fp,8(sp)
80219088:	df000204 	addi	fp,sp,8
8021908c:	e13ffe15 	stw	r4,-8(fp)
80219090:	e17fff15 	stw	r5,-4(fp)
   /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
    return alt_msgdma_descriptor_async_transfer(dev, desc, NULL);
80219094:	000d883a 	mov	r6,zero
80219098:	e17fff17 	ldw	r5,-4(fp)
8021909c:	e13ffe17 	ldw	r4,-8(fp)
802190a0:	021772c0 	call	8021772c <alt_msgdma_descriptor_async_transfer>

}
802190a4:	e037883a 	mov	sp,fp
802190a8:	dfc00117 	ldw	ra,4(sp)
802190ac:	df000017 	ldw	fp,0(sp)
802190b0:	dec00204 	addi	sp,sp,8
802190b4:	f800283a 	ret

802190b8 <alt_msgdma_extended_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_extended_descriptor_async_transfer(
    alt_msgdma_dev *dev,
    alt_msgdma_extended_descriptor *desc)
{
802190b8:	defffc04 	addi	sp,sp,-16
802190bc:	dfc00315 	stw	ra,12(sp)
802190c0:	df000215 	stw	fp,8(sp)
802190c4:	df000204 	addi	fp,sp,8
802190c8:	e13ffe15 	stw	r4,-8(fp)
802190cc:	e17fff15 	stw	r5,-4(fp)
    /*
    * Error detection/handling should be performed at the application
    * or callback level as appropriate.
    */
    return alt_msgdma_descriptor_async_transfer(dev, NULL, desc);
802190d0:	e1bfff17 	ldw	r6,-4(fp)
802190d4:	000b883a 	mov	r5,zero
802190d8:	e13ffe17 	ldw	r4,-8(fp)
802190dc:	021772c0 	call	8021772c <alt_msgdma_descriptor_async_transfer>
}
802190e0:	e037883a 	mov	sp,fp
802190e4:	dfc00117 	ldw	ra,4(sp)
802190e8:	df000017 	ldw	fp,0(sp)
802190ec:	dec00204 	addi	sp,sp,8
802190f0:	f800283a 	ret

802190f4 <alt_msgdma_standard_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_standard_descriptor_sync_transfer(
    alt_msgdma_dev *dev,
    alt_msgdma_standard_descriptor *desc)
{
802190f4:	defffc04 	addi	sp,sp,-16
802190f8:	dfc00315 	stw	ra,12(sp)
802190fc:	df000215 	stw	fp,8(sp)
80219100:	df000204 	addi	fp,sp,8
80219104:	e13ffe15 	stw	r4,-8(fp)
80219108:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, desc, NULL);
8021910c:	000d883a 	mov	r6,zero
80219110:	e17fff17 	ldw	r5,-4(fp)
80219114:	e13ffe17 	ldw	r4,-8(fp)
80219118:	02179fc0 	call	802179fc <alt_msgdma_descriptor_sync_transfer>
}
8021911c:	e037883a 	mov	sp,fp
80219120:	dfc00117 	ldw	ra,4(sp)
80219124:	df000017 	ldw	fp,0(sp)
80219128:	dec00204 	addi	sp,sp,8
8021912c:	f800283a 	ret

80219130 <alt_msgdma_extended_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_extended_descriptor_sync_transfer(
    alt_msgdma_dev *dev,
    alt_msgdma_extended_descriptor *desc)
{
80219130:	defffc04 	addi	sp,sp,-16
80219134:	dfc00315 	stw	ra,12(sp)
80219138:	df000215 	stw	fp,8(sp)
8021913c:	df000204 	addi	fp,sp,8
80219140:	e13ffe15 	stw	r4,-8(fp)
80219144:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, NULL, desc);
80219148:	e1bfff17 	ldw	r6,-4(fp)
8021914c:	000b883a 	mov	r5,zero
80219150:	e13ffe17 	ldw	r4,-8(fp)
80219154:	02179fc0 	call	802179fc <alt_msgdma_descriptor_sync_transfer>
}
80219158:	e037883a 	mov	sp,fp
8021915c:	dfc00117 	ldw	ra,4(sp)
80219160:	df000017 	ldw	fp,0(sp)
80219164:	dec00204 	addi	sp,sp,8
80219168:	f800283a 	ret

8021916c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
8021916c:	defff504 	addi	sp,sp,-44
80219170:	df000a15 	stw	fp,40(sp)
80219174:	df000a04 	addi	fp,sp,40
80219178:	e13ffc15 	stw	r4,-16(fp)
8021917c:	e17ffd15 	stw	r5,-12(fp)
80219180:	e1bffe15 	stw	r6,-8(fp)
80219184:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
80219188:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
8021918c:	d0a02417 	ldw	r2,-32624(gp)
  
  if (alt_ticks_per_second ())
80219190:	10003c26 	beq	r2,zero,80219284 <alt_alarm_start+0x118>
  {
    if (alarm)
80219194:	e0bffc17 	ldw	r2,-16(fp)
80219198:	10003826 	beq	r2,zero,8021927c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
8021919c:	e0bffc17 	ldw	r2,-16(fp)
802191a0:	e0fffe17 	ldw	r3,-8(fp)
802191a4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
802191a8:	e0bffc17 	ldw	r2,-16(fp)
802191ac:	e0ffff17 	ldw	r3,-4(fp)
802191b0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
802191b4:	0005303a 	rdctl	r2,status
802191b8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
802191bc:	e0fff917 	ldw	r3,-28(fp)
802191c0:	00bfff84 	movi	r2,-2
802191c4:	1884703a 	and	r2,r3,r2
802191c8:	1001703a 	wrctl	status,r2
  
  return context;
802191cc:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
802191d0:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
802191d4:	d0a02517 	ldw	r2,-32620(gp)
      
      current_nticks = alt_nticks();
802191d8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
802191dc:	e0fffd17 	ldw	r3,-12(fp)
802191e0:	e0bff617 	ldw	r2,-40(fp)
802191e4:	1885883a 	add	r2,r3,r2
802191e8:	10c00044 	addi	r3,r2,1
802191ec:	e0bffc17 	ldw	r2,-16(fp)
802191f0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
802191f4:	e0bffc17 	ldw	r2,-16(fp)
802191f8:	10c00217 	ldw	r3,8(r2)
802191fc:	e0bff617 	ldw	r2,-40(fp)
80219200:	1880042e 	bgeu	r3,r2,80219214 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
80219204:	e0bffc17 	ldw	r2,-16(fp)
80219208:	00c00044 	movi	r3,1
8021920c:	10c00405 	stb	r3,16(r2)
80219210:	00000206 	br	8021921c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
80219214:	e0bffc17 	ldw	r2,-16(fp)
80219218:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
8021921c:	e0bffc17 	ldw	r2,-16(fp)
80219220:	d0e00e04 	addi	r3,gp,-32712
80219224:	e0fffa15 	stw	r3,-24(fp)
80219228:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
8021922c:	e0bffb17 	ldw	r2,-20(fp)
80219230:	e0fffa17 	ldw	r3,-24(fp)
80219234:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
80219238:	e0bffa17 	ldw	r2,-24(fp)
8021923c:	10c00017 	ldw	r3,0(r2)
80219240:	e0bffb17 	ldw	r2,-20(fp)
80219244:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
80219248:	e0bffa17 	ldw	r2,-24(fp)
8021924c:	10800017 	ldw	r2,0(r2)
80219250:	e0fffb17 	ldw	r3,-20(fp)
80219254:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
80219258:	e0bffa17 	ldw	r2,-24(fp)
8021925c:	e0fffb17 	ldw	r3,-20(fp)
80219260:	10c00015 	stw	r3,0(r2)
80219264:	e0bff817 	ldw	r2,-32(fp)
80219268:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8021926c:	e0bff717 	ldw	r2,-36(fp)
80219270:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
80219274:	0005883a 	mov	r2,zero
80219278:	00000306 	br	80219288 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
8021927c:	00bffa84 	movi	r2,-22
80219280:	00000106 	br	80219288 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
80219284:	00bfde84 	movi	r2,-134
  }
}
80219288:	e037883a 	mov	sp,fp
8021928c:	df000017 	ldw	fp,0(sp)
80219290:	dec00104 	addi	sp,sp,4
80219294:	f800283a 	ret

80219298 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
80219298:	defffd04 	addi	sp,sp,-12
8021929c:	df000215 	stw	fp,8(sp)
802192a0:	df000204 	addi	fp,sp,8
802192a4:	e13ffe15 	stw	r4,-8(fp)
802192a8:	e17fff15 	stw	r5,-4(fp)
  {
    ALT_FLUSH_DATA(i);
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
802192ac:	0001883a 	nop
802192b0:	e037883a 	mov	sp,fp
802192b4:	df000017 	ldw	fp,0(sp)
802192b8:	dec00104 	addi	sp,sp,4
802192bc:	f800283a 	ret

802192c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
802192c0:	defffe04 	addi	sp,sp,-8
802192c4:	dfc00115 	stw	ra,4(sp)
802192c8:	df000015 	stw	fp,0(sp)
802192cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
802192d0:	d0a00c17 	ldw	r2,-32720(gp)
802192d4:	10000326 	beq	r2,zero,802192e4 <alt_get_errno+0x24>
802192d8:	d0a00c17 	ldw	r2,-32720(gp)
802192dc:	103ee83a 	callr	r2
802192e0:	00000106 	br	802192e8 <alt_get_errno+0x28>
802192e4:	d0a02004 	addi	r2,gp,-32640
}
802192e8:	e037883a 	mov	sp,fp
802192ec:	dfc00117 	ldw	ra,4(sp)
802192f0:	df000017 	ldw	fp,0(sp)
802192f4:	dec00204 	addi	sp,sp,8
802192f8:	f800283a 	ret

802192fc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
802192fc:	defffa04 	addi	sp,sp,-24
80219300:	dfc00515 	stw	ra,20(sp)
80219304:	df000415 	stw	fp,16(sp)
80219308:	df000404 	addi	fp,sp,16
8021930c:	e13ffe15 	stw	r4,-8(fp)
80219310:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
80219314:	e0bffe17 	ldw	r2,-8(fp)
80219318:	10000326 	beq	r2,zero,80219328 <alt_dev_llist_insert+0x2c>
8021931c:	e0bffe17 	ldw	r2,-8(fp)
80219320:	10800217 	ldw	r2,8(r2)
80219324:	1000061e 	bne	r2,zero,80219340 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
80219328:	02192c00 	call	802192c0 <alt_get_errno>
8021932c:	1007883a 	mov	r3,r2
80219330:	00800584 	movi	r2,22
80219334:	18800015 	stw	r2,0(r3)
    return -EINVAL;
80219338:	00bffa84 	movi	r2,-22
8021933c:	00001306 	br	8021938c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
80219340:	e0bffe17 	ldw	r2,-8(fp)
80219344:	e0ffff17 	ldw	r3,-4(fp)
80219348:	e0fffc15 	stw	r3,-16(fp)
8021934c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
80219350:	e0bffd17 	ldw	r2,-12(fp)
80219354:	e0fffc17 	ldw	r3,-16(fp)
80219358:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
8021935c:	e0bffc17 	ldw	r2,-16(fp)
80219360:	10c00017 	ldw	r3,0(r2)
80219364:	e0bffd17 	ldw	r2,-12(fp)
80219368:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
8021936c:	e0bffc17 	ldw	r2,-16(fp)
80219370:	10800017 	ldw	r2,0(r2)
80219374:	e0fffd17 	ldw	r3,-12(fp)
80219378:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
8021937c:	e0bffc17 	ldw	r2,-16(fp)
80219380:	e0fffd17 	ldw	r3,-12(fp)
80219384:	10c00015 	stw	r3,0(r2)

  return 0;  
80219388:	0005883a 	mov	r2,zero
}
8021938c:	e037883a 	mov	sp,fp
80219390:	dfc00117 	ldw	ra,4(sp)
80219394:	df000017 	ldw	fp,0(sp)
80219398:	dec00204 	addi	sp,sp,8
8021939c:	f800283a 	ret

802193a0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
802193a0:	defffd04 	addi	sp,sp,-12
802193a4:	dfc00215 	stw	ra,8(sp)
802193a8:	df000115 	stw	fp,4(sp)
802193ac:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
802193b0:	00a008b4 	movhi	r2,32802
802193b4:	10a93c04 	addi	r2,r2,-23312
802193b8:	e0bfff15 	stw	r2,-4(fp)
802193bc:	00000606 	br	802193d8 <_do_ctors+0x38>
        (*ctor) (); 
802193c0:	e0bfff17 	ldw	r2,-4(fp)
802193c4:	10800017 	ldw	r2,0(r2)
802193c8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
802193cc:	e0bfff17 	ldw	r2,-4(fp)
802193d0:	10bfff04 	addi	r2,r2,-4
802193d4:	e0bfff15 	stw	r2,-4(fp)
802193d8:	e0ffff17 	ldw	r3,-4(fp)
802193dc:	00a008b4 	movhi	r2,32802
802193e0:	10a93d04 	addi	r2,r2,-23308
802193e4:	18bff62e 	bgeu	r3,r2,802193c0 <__reset+0xfa1f93c0>
        (*ctor) (); 
}
802193e8:	0001883a 	nop
802193ec:	e037883a 	mov	sp,fp
802193f0:	dfc00117 	ldw	ra,4(sp)
802193f4:	df000017 	ldw	fp,0(sp)
802193f8:	dec00204 	addi	sp,sp,8
802193fc:	f800283a 	ret

80219400 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
80219400:	defffd04 	addi	sp,sp,-12
80219404:	dfc00215 	stw	ra,8(sp)
80219408:	df000115 	stw	fp,4(sp)
8021940c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
80219410:	00a008b4 	movhi	r2,32802
80219414:	10a93c04 	addi	r2,r2,-23312
80219418:	e0bfff15 	stw	r2,-4(fp)
8021941c:	00000606 	br	80219438 <_do_dtors+0x38>
        (*dtor) (); 
80219420:	e0bfff17 	ldw	r2,-4(fp)
80219424:	10800017 	ldw	r2,0(r2)
80219428:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
8021942c:	e0bfff17 	ldw	r2,-4(fp)
80219430:	10bfff04 	addi	r2,r2,-4
80219434:	e0bfff15 	stw	r2,-4(fp)
80219438:	e0ffff17 	ldw	r3,-4(fp)
8021943c:	00a008b4 	movhi	r2,32802
80219440:	10a93d04 	addi	r2,r2,-23308
80219444:	18bff62e 	bgeu	r3,r2,80219420 <__reset+0xfa1f9420>
        (*dtor) (); 
}
80219448:	0001883a 	nop
8021944c:	e037883a 	mov	sp,fp
80219450:	dfc00117 	ldw	ra,4(sp)
80219454:	df000017 	ldw	fp,0(sp)
80219458:	dec00204 	addi	sp,sp,8
8021945c:	f800283a 	ret

80219460 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
80219460:	defffa04 	addi	sp,sp,-24
80219464:	dfc00515 	stw	ra,20(sp)
80219468:	df000415 	stw	fp,16(sp)
8021946c:	df000404 	addi	fp,sp,16
80219470:	e13ffe15 	stw	r4,-8(fp)
80219474:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
80219478:	e0bfff17 	ldw	r2,-4(fp)
8021947c:	10800017 	ldw	r2,0(r2)
80219480:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
80219484:	e13ffe17 	ldw	r4,-8(fp)
80219488:	02054b80 	call	802054b8 <strlen>
8021948c:	10800044 	addi	r2,r2,1
80219490:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
80219494:	00000d06 	br	802194cc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
80219498:	e0bffc17 	ldw	r2,-16(fp)
8021949c:	10800217 	ldw	r2,8(r2)
802194a0:	e0fffd17 	ldw	r3,-12(fp)
802194a4:	180d883a 	mov	r6,r3
802194a8:	e17ffe17 	ldw	r5,-8(fp)
802194ac:	1009883a 	mov	r4,r2
802194b0:	021a0440 	call	8021a044 <memcmp>
802194b4:	1000021e 	bne	r2,zero,802194c0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
802194b8:	e0bffc17 	ldw	r2,-16(fp)
802194bc:	00000706 	br	802194dc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
802194c0:	e0bffc17 	ldw	r2,-16(fp)
802194c4:	10800017 	ldw	r2,0(r2)
802194c8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
802194cc:	e0fffc17 	ldw	r3,-16(fp)
802194d0:	e0bfff17 	ldw	r2,-4(fp)
802194d4:	18bff01e 	bne	r3,r2,80219498 <__reset+0xfa1f9498>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
802194d8:	0005883a 	mov	r2,zero
}
802194dc:	e037883a 	mov	sp,fp
802194e0:	dfc00117 	ldw	ra,4(sp)
802194e4:	df000017 	ldw	fp,0(sp)
802194e8:	dec00204 	addi	sp,sp,8
802194ec:	f800283a 	ret

802194f0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
802194f0:	defff904 	addi	sp,sp,-28
802194f4:	dfc00615 	stw	ra,24(sp)
802194f8:	df000515 	stw	fp,20(sp)
802194fc:	df000504 	addi	fp,sp,20
80219500:	e13ffc15 	stw	r4,-16(fp)
80219504:	e17ffd15 	stw	r5,-12(fp)
80219508:	e1bffe15 	stw	r6,-8(fp)
8021950c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
80219510:	e0800217 	ldw	r2,8(fp)
80219514:	d8800015 	stw	r2,0(sp)
80219518:	e1ffff17 	ldw	r7,-4(fp)
8021951c:	e1bffe17 	ldw	r6,-8(fp)
80219520:	e17ffd17 	ldw	r5,-12(fp)
80219524:	e13ffc17 	ldw	r4,-16(fp)
80219528:	02196a00 	call	802196a0 <alt_iic_isr_register>
}  
8021952c:	e037883a 	mov	sp,fp
80219530:	dfc00117 	ldw	ra,4(sp)
80219534:	df000017 	ldw	fp,0(sp)
80219538:	dec00204 	addi	sp,sp,8
8021953c:	f800283a 	ret

80219540 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
80219540:	defff904 	addi	sp,sp,-28
80219544:	df000615 	stw	fp,24(sp)
80219548:	df000604 	addi	fp,sp,24
8021954c:	e13ffe15 	stw	r4,-8(fp)
80219550:	e17fff15 	stw	r5,-4(fp)
80219554:	e0bfff17 	ldw	r2,-4(fp)
80219558:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8021955c:	0005303a 	rdctl	r2,status
80219560:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80219564:	e0fffb17 	ldw	r3,-20(fp)
80219568:	00bfff84 	movi	r2,-2
8021956c:	1884703a 	and	r2,r3,r2
80219570:	1001703a 	wrctl	status,r2
  
  return context;
80219574:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
80219578:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
8021957c:	00c00044 	movi	r3,1
80219580:	e0bffa17 	ldw	r2,-24(fp)
80219584:	1884983a 	sll	r2,r3,r2
80219588:	1007883a 	mov	r3,r2
8021958c:	d0a02617 	ldw	r2,-32616(gp)
80219590:	1884b03a 	or	r2,r3,r2
80219594:	d0a02615 	stw	r2,-32616(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
80219598:	d0a02617 	ldw	r2,-32616(gp)
8021959c:	100170fa 	wrctl	ienable,r2
802195a0:	e0bffc17 	ldw	r2,-16(fp)
802195a4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
802195a8:	e0bffd17 	ldw	r2,-12(fp)
802195ac:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
802195b0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
802195b4:	0001883a 	nop
}
802195b8:	e037883a 	mov	sp,fp
802195bc:	df000017 	ldw	fp,0(sp)
802195c0:	dec00104 	addi	sp,sp,4
802195c4:	f800283a 	ret

802195c8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
802195c8:	defff904 	addi	sp,sp,-28
802195cc:	df000615 	stw	fp,24(sp)
802195d0:	df000604 	addi	fp,sp,24
802195d4:	e13ffe15 	stw	r4,-8(fp)
802195d8:	e17fff15 	stw	r5,-4(fp)
802195dc:	e0bfff17 	ldw	r2,-4(fp)
802195e0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
802195e4:	0005303a 	rdctl	r2,status
802195e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
802195ec:	e0fffb17 	ldw	r3,-20(fp)
802195f0:	00bfff84 	movi	r2,-2
802195f4:	1884703a 	and	r2,r3,r2
802195f8:	1001703a 	wrctl	status,r2
  
  return context;
802195fc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
80219600:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
80219604:	00c00044 	movi	r3,1
80219608:	e0bffa17 	ldw	r2,-24(fp)
8021960c:	1884983a 	sll	r2,r3,r2
80219610:	0084303a 	nor	r2,zero,r2
80219614:	1007883a 	mov	r3,r2
80219618:	d0a02617 	ldw	r2,-32616(gp)
8021961c:	1884703a 	and	r2,r3,r2
80219620:	d0a02615 	stw	r2,-32616(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
80219624:	d0a02617 	ldw	r2,-32616(gp)
80219628:	100170fa 	wrctl	ienable,r2
8021962c:	e0bffc17 	ldw	r2,-16(fp)
80219630:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80219634:	e0bffd17 	ldw	r2,-12(fp)
80219638:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
8021963c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
80219640:	0001883a 	nop
}
80219644:	e037883a 	mov	sp,fp
80219648:	df000017 	ldw	fp,0(sp)
8021964c:	dec00104 	addi	sp,sp,4
80219650:	f800283a 	ret

80219654 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
80219654:	defffc04 	addi	sp,sp,-16
80219658:	df000315 	stw	fp,12(sp)
8021965c:	df000304 	addi	fp,sp,12
80219660:	e13ffe15 	stw	r4,-8(fp)
80219664:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
80219668:	000530fa 	rdctl	r2,ienable
8021966c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
80219670:	00c00044 	movi	r3,1
80219674:	e0bfff17 	ldw	r2,-4(fp)
80219678:	1884983a 	sll	r2,r3,r2
8021967c:	1007883a 	mov	r3,r2
80219680:	e0bffd17 	ldw	r2,-12(fp)
80219684:	1884703a 	and	r2,r3,r2
80219688:	1004c03a 	cmpne	r2,r2,zero
8021968c:	10803fcc 	andi	r2,r2,255
}
80219690:	e037883a 	mov	sp,fp
80219694:	df000017 	ldw	fp,0(sp)
80219698:	dec00104 	addi	sp,sp,4
8021969c:	f800283a 	ret

802196a0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
802196a0:	defff504 	addi	sp,sp,-44
802196a4:	dfc00a15 	stw	ra,40(sp)
802196a8:	df000915 	stw	fp,36(sp)
802196ac:	df000904 	addi	fp,sp,36
802196b0:	e13ffc15 	stw	r4,-16(fp)
802196b4:	e17ffd15 	stw	r5,-12(fp)
802196b8:	e1bffe15 	stw	r6,-8(fp)
802196bc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
802196c0:	00bffa84 	movi	r2,-22
802196c4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
802196c8:	e0bffd17 	ldw	r2,-12(fp)
802196cc:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
802196d0:	e0bff817 	ldw	r2,-32(fp)
802196d4:	10800808 	cmpgei	r2,r2,32
802196d8:	1000271e 	bne	r2,zero,80219778 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
802196dc:	0005303a 	rdctl	r2,status
802196e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
802196e4:	e0fffb17 	ldw	r3,-20(fp)
802196e8:	00bfff84 	movi	r2,-2
802196ec:	1884703a 	and	r2,r3,r2
802196f0:	1001703a 	wrctl	status,r2
  
  return context;
802196f4:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
802196f8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
802196fc:	00a008b4 	movhi	r2,32802
80219700:	10b66d04 	addi	r2,r2,-9804
80219704:	e0fff817 	ldw	r3,-32(fp)
80219708:	180690fa 	slli	r3,r3,3
8021970c:	10c5883a 	add	r2,r2,r3
80219710:	e0fffe17 	ldw	r3,-8(fp)
80219714:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
80219718:	00a008b4 	movhi	r2,32802
8021971c:	10b66d04 	addi	r2,r2,-9804
80219720:	e0fff817 	ldw	r3,-32(fp)
80219724:	180690fa 	slli	r3,r3,3
80219728:	10c5883a 	add	r2,r2,r3
8021972c:	10800104 	addi	r2,r2,4
80219730:	e0ffff17 	ldw	r3,-4(fp)
80219734:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
80219738:	e0bffe17 	ldw	r2,-8(fp)
8021973c:	10000526 	beq	r2,zero,80219754 <alt_iic_isr_register+0xb4>
80219740:	e0bff817 	ldw	r2,-32(fp)
80219744:	100b883a 	mov	r5,r2
80219748:	e13ffc17 	ldw	r4,-16(fp)
8021974c:	02195400 	call	80219540 <alt_ic_irq_enable>
80219750:	00000406 	br	80219764 <alt_iic_isr_register+0xc4>
80219754:	e0bff817 	ldw	r2,-32(fp)
80219758:	100b883a 	mov	r5,r2
8021975c:	e13ffc17 	ldw	r4,-16(fp)
80219760:	02195c80 	call	802195c8 <alt_ic_irq_disable>
80219764:	e0bff715 	stw	r2,-36(fp)
80219768:	e0bffa17 	ldw	r2,-24(fp)
8021976c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80219770:	e0bff917 	ldw	r2,-28(fp)
80219774:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
80219778:	e0bff717 	ldw	r2,-36(fp)
}
8021977c:	e037883a 	mov	sp,fp
80219780:	dfc00117 	ldw	ra,4(sp)
80219784:	df000017 	ldw	fp,0(sp)
80219788:	dec00204 	addi	sp,sp,8
8021978c:	f800283a 	ret

80219790 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
80219790:	defff904 	addi	sp,sp,-28
80219794:	dfc00615 	stw	ra,24(sp)
80219798:	df000515 	stw	fp,20(sp)
8021979c:	df000504 	addi	fp,sp,20
802197a0:	e13ffc15 	stw	r4,-16(fp)
802197a4:	e17ffd15 	stw	r5,-12(fp)
802197a8:	e1bffe15 	stw	r6,-8(fp)
802197ac:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
802197b0:	e1bfff17 	ldw	r6,-4(fp)
802197b4:	e17ffe17 	ldw	r5,-8(fp)
802197b8:	e13ffd17 	ldw	r4,-12(fp)
802197bc:	02199d00 	call	802199d0 <open>
802197c0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
802197c4:	e0bffb17 	ldw	r2,-20(fp)
802197c8:	10001c16 	blt	r2,zero,8021983c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
802197cc:	00a008b4 	movhi	r2,32802
802197d0:	10b01304 	addi	r2,r2,-16308
802197d4:	e0fffb17 	ldw	r3,-20(fp)
802197d8:	18c00324 	muli	r3,r3,12
802197dc:	10c5883a 	add	r2,r2,r3
802197e0:	10c00017 	ldw	r3,0(r2)
802197e4:	e0bffc17 	ldw	r2,-16(fp)
802197e8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
802197ec:	00a008b4 	movhi	r2,32802
802197f0:	10b01304 	addi	r2,r2,-16308
802197f4:	e0fffb17 	ldw	r3,-20(fp)
802197f8:	18c00324 	muli	r3,r3,12
802197fc:	10c5883a 	add	r2,r2,r3
80219800:	10800104 	addi	r2,r2,4
80219804:	10c00017 	ldw	r3,0(r2)
80219808:	e0bffc17 	ldw	r2,-16(fp)
8021980c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
80219810:	00a008b4 	movhi	r2,32802
80219814:	10b01304 	addi	r2,r2,-16308
80219818:	e0fffb17 	ldw	r3,-20(fp)
8021981c:	18c00324 	muli	r3,r3,12
80219820:	10c5883a 	add	r2,r2,r3
80219824:	10800204 	addi	r2,r2,8
80219828:	10c00017 	ldw	r3,0(r2)
8021982c:	e0bffc17 	ldw	r2,-16(fp)
80219830:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
80219834:	e13ffb17 	ldw	r4,-20(fp)
80219838:	02158280 	call	80215828 <alt_release_fd>
  }
} 
8021983c:	0001883a 	nop
80219840:	e037883a 	mov	sp,fp
80219844:	dfc00117 	ldw	ra,4(sp)
80219848:	df000017 	ldw	fp,0(sp)
8021984c:	dec00204 	addi	sp,sp,8
80219850:	f800283a 	ret

80219854 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
80219854:	defffb04 	addi	sp,sp,-20
80219858:	dfc00415 	stw	ra,16(sp)
8021985c:	df000315 	stw	fp,12(sp)
80219860:	df000304 	addi	fp,sp,12
80219864:	e13ffd15 	stw	r4,-12(fp)
80219868:	e17ffe15 	stw	r5,-8(fp)
8021986c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
80219870:	01c07fc4 	movi	r7,511
80219874:	01800044 	movi	r6,1
80219878:	e17ffd17 	ldw	r5,-12(fp)
8021987c:	012008b4 	movhi	r4,32802
80219880:	21301604 	addi	r4,r4,-16296
80219884:	02197900 	call	80219790 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
80219888:	01c07fc4 	movi	r7,511
8021988c:	000d883a 	mov	r6,zero
80219890:	e17ffe17 	ldw	r5,-8(fp)
80219894:	012008b4 	movhi	r4,32802
80219898:	21301304 	addi	r4,r4,-16308
8021989c:	02197900 	call	80219790 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
802198a0:	01c07fc4 	movi	r7,511
802198a4:	01800044 	movi	r6,1
802198a8:	e17fff17 	ldw	r5,-4(fp)
802198ac:	012008b4 	movhi	r4,32802
802198b0:	21301904 	addi	r4,r4,-16284
802198b4:	02197900 	call	80219790 <alt_open_fd>
}  
802198b8:	0001883a 	nop
802198bc:	e037883a 	mov	sp,fp
802198c0:	dfc00117 	ldw	ra,4(sp)
802198c4:	df000017 	ldw	fp,0(sp)
802198c8:	dec00204 	addi	sp,sp,8
802198cc:	f800283a 	ret

802198d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
802198d0:	defffe04 	addi	sp,sp,-8
802198d4:	dfc00115 	stw	ra,4(sp)
802198d8:	df000015 	stw	fp,0(sp)
802198dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
802198e0:	d0a00c17 	ldw	r2,-32720(gp)
802198e4:	10000326 	beq	r2,zero,802198f4 <alt_get_errno+0x24>
802198e8:	d0a00c17 	ldw	r2,-32720(gp)
802198ec:	103ee83a 	callr	r2
802198f0:	00000106 	br	802198f8 <alt_get_errno+0x28>
802198f4:	d0a02004 	addi	r2,gp,-32640
}
802198f8:	e037883a 	mov	sp,fp
802198fc:	dfc00117 	ldw	ra,4(sp)
80219900:	df000017 	ldw	fp,0(sp)
80219904:	dec00204 	addi	sp,sp,8
80219908:	f800283a 	ret

8021990c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
8021990c:	defffd04 	addi	sp,sp,-12
80219910:	df000215 	stw	fp,8(sp)
80219914:	df000204 	addi	fp,sp,8
80219918:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
8021991c:	e0bfff17 	ldw	r2,-4(fp)
80219920:	10800217 	ldw	r2,8(r2)
80219924:	10d00034 	orhi	r3,r2,16384
80219928:	e0bfff17 	ldw	r2,-4(fp)
8021992c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
80219930:	e03ffe15 	stw	zero,-8(fp)
80219934:	00001d06 	br	802199ac <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
80219938:	00a008b4 	movhi	r2,32802
8021993c:	10b01304 	addi	r2,r2,-16308
80219940:	e0fffe17 	ldw	r3,-8(fp)
80219944:	18c00324 	muli	r3,r3,12
80219948:	10c5883a 	add	r2,r2,r3
8021994c:	10c00017 	ldw	r3,0(r2)
80219950:	e0bfff17 	ldw	r2,-4(fp)
80219954:	10800017 	ldw	r2,0(r2)
80219958:	1880111e 	bne	r3,r2,802199a0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
8021995c:	00a008b4 	movhi	r2,32802
80219960:	10b01304 	addi	r2,r2,-16308
80219964:	e0fffe17 	ldw	r3,-8(fp)
80219968:	18c00324 	muli	r3,r3,12
8021996c:	10c5883a 	add	r2,r2,r3
80219970:	10800204 	addi	r2,r2,8
80219974:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
80219978:	1000090e 	bge	r2,zero,802199a0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
8021997c:	e0bffe17 	ldw	r2,-8(fp)
80219980:	10c00324 	muli	r3,r2,12
80219984:	00a008b4 	movhi	r2,32802
80219988:	10b01304 	addi	r2,r2,-16308
8021998c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
80219990:	e0bfff17 	ldw	r2,-4(fp)
80219994:	18800226 	beq	r3,r2,802199a0 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
80219998:	00bffcc4 	movi	r2,-13
8021999c:	00000806 	br	802199c0 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
802199a0:	e0bffe17 	ldw	r2,-8(fp)
802199a4:	10800044 	addi	r2,r2,1
802199a8:	e0bffe15 	stw	r2,-8(fp)
802199ac:	d0a00b17 	ldw	r2,-32724(gp)
802199b0:	1007883a 	mov	r3,r2
802199b4:	e0bffe17 	ldw	r2,-8(fp)
802199b8:	18bfdf2e 	bgeu	r3,r2,80219938 <__reset+0xfa1f9938>
    }
  }
  
  /* The device is not locked */
 
  return 0;
802199bc:	0005883a 	mov	r2,zero
}
802199c0:	e037883a 	mov	sp,fp
802199c4:	df000017 	ldw	fp,0(sp)
802199c8:	dec00104 	addi	sp,sp,4
802199cc:	f800283a 	ret

802199d0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
802199d0:	defff604 	addi	sp,sp,-40
802199d4:	dfc00915 	stw	ra,36(sp)
802199d8:	df000815 	stw	fp,32(sp)
802199dc:	df000804 	addi	fp,sp,32
802199e0:	e13ffd15 	stw	r4,-12(fp)
802199e4:	e17ffe15 	stw	r5,-8(fp)
802199e8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
802199ec:	00bfffc4 	movi	r2,-1
802199f0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
802199f4:	00bffb44 	movi	r2,-19
802199f8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
802199fc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
80219a00:	d1600904 	addi	r5,gp,-32732
80219a04:	e13ffd17 	ldw	r4,-12(fp)
80219a08:	02194600 	call	80219460 <alt_find_dev>
80219a0c:	e0bff815 	stw	r2,-32(fp)
80219a10:	e0bff817 	ldw	r2,-32(fp)
80219a14:	1000051e 	bne	r2,zero,80219a2c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
80219a18:	e13ffd17 	ldw	r4,-12(fp)
80219a1c:	0219db00 	call	80219db0 <alt_find_file>
80219a20:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
80219a24:	00800044 	movi	r2,1
80219a28:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
80219a2c:	e0bff817 	ldw	r2,-32(fp)
80219a30:	10002926 	beq	r2,zero,80219ad8 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
80219a34:	e13ff817 	ldw	r4,-32(fp)
80219a38:	0219eb80 	call	80219eb8 <alt_get_fd>
80219a3c:	e0bff915 	stw	r2,-28(fp)
80219a40:	e0bff917 	ldw	r2,-28(fp)
80219a44:	1000030e 	bge	r2,zero,80219a54 <open+0x84>
    {
      status = index;
80219a48:	e0bff917 	ldw	r2,-28(fp)
80219a4c:	e0bffa15 	stw	r2,-24(fp)
80219a50:	00002306 	br	80219ae0 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
80219a54:	e0bff917 	ldw	r2,-28(fp)
80219a58:	10c00324 	muli	r3,r2,12
80219a5c:	00a008b4 	movhi	r2,32802
80219a60:	10b01304 	addi	r2,r2,-16308
80219a64:	1885883a 	add	r2,r3,r2
80219a68:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
80219a6c:	e0fffe17 	ldw	r3,-8(fp)
80219a70:	00900034 	movhi	r2,16384
80219a74:	10bfffc4 	addi	r2,r2,-1
80219a78:	1886703a 	and	r3,r3,r2
80219a7c:	e0bffc17 	ldw	r2,-16(fp)
80219a80:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
80219a84:	e0bffb17 	ldw	r2,-20(fp)
80219a88:	1000051e 	bne	r2,zero,80219aa0 <open+0xd0>
80219a8c:	e13ffc17 	ldw	r4,-16(fp)
80219a90:	021990c0 	call	8021990c <alt_file_locked>
80219a94:	e0bffa15 	stw	r2,-24(fp)
80219a98:	e0bffa17 	ldw	r2,-24(fp)
80219a9c:	10001016 	blt	r2,zero,80219ae0 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
80219aa0:	e0bff817 	ldw	r2,-32(fp)
80219aa4:	10800317 	ldw	r2,12(r2)
80219aa8:	10000826 	beq	r2,zero,80219acc <open+0xfc>
80219aac:	e0bff817 	ldw	r2,-32(fp)
80219ab0:	10800317 	ldw	r2,12(r2)
80219ab4:	e1ffff17 	ldw	r7,-4(fp)
80219ab8:	e1bffe17 	ldw	r6,-8(fp)
80219abc:	e17ffd17 	ldw	r5,-12(fp)
80219ac0:	e13ffc17 	ldw	r4,-16(fp)
80219ac4:	103ee83a 	callr	r2
80219ac8:	00000106 	br	80219ad0 <open+0x100>
80219acc:	0005883a 	mov	r2,zero
80219ad0:	e0bffa15 	stw	r2,-24(fp)
80219ad4:	00000206 	br	80219ae0 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
80219ad8:	00bffb44 	movi	r2,-19
80219adc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
80219ae0:	e0bffa17 	ldw	r2,-24(fp)
80219ae4:	1000090e 	bge	r2,zero,80219b0c <open+0x13c>
  {
    alt_release_fd (index);  
80219ae8:	e13ff917 	ldw	r4,-28(fp)
80219aec:	02158280 	call	80215828 <alt_release_fd>
    ALT_ERRNO = -status;
80219af0:	02198d00 	call	802198d0 <alt_get_errno>
80219af4:	1007883a 	mov	r3,r2
80219af8:	e0bffa17 	ldw	r2,-24(fp)
80219afc:	0085c83a 	sub	r2,zero,r2
80219b00:	18800015 	stw	r2,0(r3)
    return -1;
80219b04:	00bfffc4 	movi	r2,-1
80219b08:	00000106 	br	80219b10 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
80219b0c:	e0bff917 	ldw	r2,-28(fp)
}
80219b10:	e037883a 	mov	sp,fp
80219b14:	dfc00117 	ldw	ra,4(sp)
80219b18:	df000017 	ldw	fp,0(sp)
80219b1c:	dec00204 	addi	sp,sp,8
80219b20:	f800283a 	ret

80219b24 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
80219b24:	defff204 	addi	sp,sp,-56
80219b28:	dfc00a15 	stw	ra,40(sp)
80219b2c:	df000915 	stw	fp,36(sp)
80219b30:	df000904 	addi	fp,sp,36
80219b34:	e13fff15 	stw	r4,-4(fp)
80219b38:	e1400215 	stw	r5,8(fp)
80219b3c:	e1800315 	stw	r6,12(fp)
80219b40:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
80219b44:	e0800204 	addi	r2,fp,8
80219b48:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
80219b4c:	e0bfff17 	ldw	r2,-4(fp)
80219b50:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
80219b54:	00006f06 	br	80219d14 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
80219b58:	e0bff807 	ldb	r2,-32(fp)
80219b5c:	10800960 	cmpeqi	r2,r2,37
80219b60:	1000041e 	bne	r2,zero,80219b74 <alt_printf+0x50>
        {
            alt_putchar(c);
80219b64:	e0bff807 	ldb	r2,-32(fp)
80219b68:	1009883a 	mov	r4,r2
80219b6c:	0219d500 	call	80219d50 <alt_putchar>
80219b70:	00006806 	br	80219d14 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
80219b74:	e0bff717 	ldw	r2,-36(fp)
80219b78:	10c00044 	addi	r3,r2,1
80219b7c:	e0fff715 	stw	r3,-36(fp)
80219b80:	10800003 	ldbu	r2,0(r2)
80219b84:	e0bff805 	stb	r2,-32(fp)
80219b88:	e0bff807 	ldb	r2,-32(fp)
80219b8c:	10006926 	beq	r2,zero,80219d34 <alt_printf+0x210>
            {
                if (c == '%')
80219b90:	e0bff807 	ldb	r2,-32(fp)
80219b94:	10800958 	cmpnei	r2,r2,37
80219b98:	1000041e 	bne	r2,zero,80219bac <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
80219b9c:	e0bff807 	ldb	r2,-32(fp)
80219ba0:	1009883a 	mov	r4,r2
80219ba4:	0219d500 	call	80219d50 <alt_putchar>
80219ba8:	00005a06 	br	80219d14 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
80219bac:	e0bff807 	ldb	r2,-32(fp)
80219bb0:	108018d8 	cmpnei	r2,r2,99
80219bb4:	1000081e 	bne	r2,zero,80219bd8 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
80219bb8:	e0bffe17 	ldw	r2,-8(fp)
80219bbc:	10c00104 	addi	r3,r2,4
80219bc0:	e0fffe15 	stw	r3,-8(fp)
80219bc4:	10800017 	ldw	r2,0(r2)
80219bc8:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
80219bcc:	e13ffd17 	ldw	r4,-12(fp)
80219bd0:	0219d500 	call	80219d50 <alt_putchar>
80219bd4:	00004f06 	br	80219d14 <alt_printf+0x1f0>
                }
                else if (c == 'x')
80219bd8:	e0bff807 	ldb	r2,-32(fp)
80219bdc:	10801e18 	cmpnei	r2,r2,120
80219be0:	1000341e 	bne	r2,zero,80219cb4 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
80219be4:	e0bffe17 	ldw	r2,-8(fp)
80219be8:	10c00104 	addi	r3,r2,4
80219bec:	e0fffe15 	stw	r3,-8(fp)
80219bf0:	10800017 	ldw	r2,0(r2)
80219bf4:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
80219bf8:	e0bffb17 	ldw	r2,-20(fp)
80219bfc:	1000031e 	bne	r2,zero,80219c0c <alt_printf+0xe8>
                    {
                        alt_putchar('0');
80219c00:	01000c04 	movi	r4,48
80219c04:	0219d500 	call	80219d50 <alt_putchar>
                        continue;
80219c08:	00004206 	br	80219d14 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
80219c0c:	00800704 	movi	r2,28
80219c10:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
80219c14:	00000306 	br	80219c24 <alt_printf+0x100>
                        digit_shift -= 4;
80219c18:	e0bff917 	ldw	r2,-28(fp)
80219c1c:	10bfff04 	addi	r2,r2,-4
80219c20:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
80219c24:	00c003c4 	movi	r3,15
80219c28:	e0bff917 	ldw	r2,-28(fp)
80219c2c:	1884983a 	sll	r2,r3,r2
80219c30:	1007883a 	mov	r3,r2
80219c34:	e0bffb17 	ldw	r2,-20(fp)
80219c38:	1884703a 	and	r2,r3,r2
80219c3c:	103ff626 	beq	r2,zero,80219c18 <__reset+0xfa1f9c18>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
80219c40:	00001906 	br	80219ca8 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
80219c44:	00c003c4 	movi	r3,15
80219c48:	e0bff917 	ldw	r2,-28(fp)
80219c4c:	1884983a 	sll	r2,r3,r2
80219c50:	1007883a 	mov	r3,r2
80219c54:	e0bffb17 	ldw	r2,-20(fp)
80219c58:	1886703a 	and	r3,r3,r2
80219c5c:	e0bff917 	ldw	r2,-28(fp)
80219c60:	1884d83a 	srl	r2,r3,r2
80219c64:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
80219c68:	e0bffc17 	ldw	r2,-16(fp)
80219c6c:	108002a8 	cmpgeui	r2,r2,10
80219c70:	1000041e 	bne	r2,zero,80219c84 <alt_printf+0x160>
                            c = '0' + digit;
80219c74:	e0bffc17 	ldw	r2,-16(fp)
80219c78:	10800c04 	addi	r2,r2,48
80219c7c:	e0bff805 	stb	r2,-32(fp)
80219c80:	00000306 	br	80219c90 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
80219c84:	e0bffc17 	ldw	r2,-16(fp)
80219c88:	108015c4 	addi	r2,r2,87
80219c8c:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
80219c90:	e0bff807 	ldb	r2,-32(fp)
80219c94:	1009883a 	mov	r4,r2
80219c98:	0219d500 	call	80219d50 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
80219c9c:	e0bff917 	ldw	r2,-28(fp)
80219ca0:	10bfff04 	addi	r2,r2,-4
80219ca4:	e0bff915 	stw	r2,-28(fp)
80219ca8:	e0bff917 	ldw	r2,-28(fp)
80219cac:	103fe50e 	bge	r2,zero,80219c44 <__reset+0xfa1f9c44>
80219cb0:	00001806 	br	80219d14 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
80219cb4:	e0bff807 	ldb	r2,-32(fp)
80219cb8:	10801cd8 	cmpnei	r2,r2,115
80219cbc:	1000151e 	bne	r2,zero,80219d14 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
80219cc0:	e0bffe17 	ldw	r2,-8(fp)
80219cc4:	10c00104 	addi	r3,r2,4
80219cc8:	e0fffe15 	stw	r3,-8(fp)
80219ccc:	10800017 	ldw	r2,0(r2)
80219cd0:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
80219cd4:	00000906 	br	80219cfc <alt_printf+0x1d8>
                      alt_putchar(*s++);
80219cd8:	e0bffa17 	ldw	r2,-24(fp)
80219cdc:	10c00044 	addi	r3,r2,1
80219ce0:	e0fffa15 	stw	r3,-24(fp)
80219ce4:	10800003 	ldbu	r2,0(r2)
80219ce8:	10803fcc 	andi	r2,r2,255
80219cec:	1080201c 	xori	r2,r2,128
80219cf0:	10bfe004 	addi	r2,r2,-128
80219cf4:	1009883a 	mov	r4,r2
80219cf8:	0219d500 	call	80219d50 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
80219cfc:	e0bffa17 	ldw	r2,-24(fp)
80219d00:	10800003 	ldbu	r2,0(r2)
80219d04:	10803fcc 	andi	r2,r2,255
80219d08:	1080201c 	xori	r2,r2,128
80219d0c:	10bfe004 	addi	r2,r2,-128
80219d10:	103ff11e 	bne	r2,zero,80219cd8 <__reset+0xfa1f9cd8>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
80219d14:	e0bff717 	ldw	r2,-36(fp)
80219d18:	10c00044 	addi	r3,r2,1
80219d1c:	e0fff715 	stw	r3,-36(fp)
80219d20:	10800003 	ldbu	r2,0(r2)
80219d24:	e0bff805 	stb	r2,-32(fp)
80219d28:	e0bff807 	ldb	r2,-32(fp)
80219d2c:	103f8a1e 	bne	r2,zero,80219b58 <__reset+0xfa1f9b58>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
80219d30:	00000106 	br	80219d38 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
80219d34:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
80219d38:	0001883a 	nop
80219d3c:	e037883a 	mov	sp,fp
80219d40:	dfc00117 	ldw	ra,4(sp)
80219d44:	df000017 	ldw	fp,0(sp)
80219d48:	dec00504 	addi	sp,sp,20
80219d4c:	f800283a 	ret

80219d50 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
80219d50:	defffd04 	addi	sp,sp,-12
80219d54:	dfc00215 	stw	ra,8(sp)
80219d58:	df000115 	stw	fp,4(sp)
80219d5c:	df000104 	addi	fp,sp,4
80219d60:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
80219d64:	d0a00217 	ldw	r2,-32760(gp)
80219d68:	10800217 	ldw	r2,8(r2)
80219d6c:	100b883a 	mov	r5,r2
80219d70:	e13fff17 	ldw	r4,-4(fp)
80219d74:	021a1600 	call	8021a160 <putc>
#endif
#endif
}
80219d78:	e037883a 	mov	sp,fp
80219d7c:	dfc00117 	ldw	ra,4(sp)
80219d80:	df000017 	ldw	fp,0(sp)
80219d84:	dec00204 	addi	sp,sp,8
80219d88:	f800283a 	ret

80219d8c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
80219d8c:	deffff04 	addi	sp,sp,-4
80219d90:	df000015 	stw	fp,0(sp)
80219d94:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
80219d98:	000170fa 	wrctl	ienable,zero
}
80219d9c:	0001883a 	nop
80219da0:	e037883a 	mov	sp,fp
80219da4:	df000017 	ldw	fp,0(sp)
80219da8:	dec00104 	addi	sp,sp,4
80219dac:	f800283a 	ret

80219db0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
80219db0:	defffb04 	addi	sp,sp,-20
80219db4:	dfc00415 	stw	ra,16(sp)
80219db8:	df000315 	stw	fp,12(sp)
80219dbc:	df000304 	addi	fp,sp,12
80219dc0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
80219dc4:	d0a00717 	ldw	r2,-32740(gp)
80219dc8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
80219dcc:	00003106 	br	80219e94 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
80219dd0:	e0bffd17 	ldw	r2,-12(fp)
80219dd4:	10800217 	ldw	r2,8(r2)
80219dd8:	1009883a 	mov	r4,r2
80219ddc:	02054b80 	call	802054b8 <strlen>
80219de0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
80219de4:	e0bffd17 	ldw	r2,-12(fp)
80219de8:	10c00217 	ldw	r3,8(r2)
80219dec:	e0bffe17 	ldw	r2,-8(fp)
80219df0:	10bfffc4 	addi	r2,r2,-1
80219df4:	1885883a 	add	r2,r3,r2
80219df8:	10800003 	ldbu	r2,0(r2)
80219dfc:	10803fcc 	andi	r2,r2,255
80219e00:	1080201c 	xori	r2,r2,128
80219e04:	10bfe004 	addi	r2,r2,-128
80219e08:	10800bd8 	cmpnei	r2,r2,47
80219e0c:	1000031e 	bne	r2,zero,80219e1c <alt_find_file+0x6c>
    {
      len -= 1;
80219e10:	e0bffe17 	ldw	r2,-8(fp)
80219e14:	10bfffc4 	addi	r2,r2,-1
80219e18:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
80219e1c:	e0bffe17 	ldw	r2,-8(fp)
80219e20:	e0ffff17 	ldw	r3,-4(fp)
80219e24:	1885883a 	add	r2,r3,r2
80219e28:	10800003 	ldbu	r2,0(r2)
80219e2c:	10803fcc 	andi	r2,r2,255
80219e30:	1080201c 	xori	r2,r2,128
80219e34:	10bfe004 	addi	r2,r2,-128
80219e38:	10800be0 	cmpeqi	r2,r2,47
80219e3c:	1000081e 	bne	r2,zero,80219e60 <alt_find_file+0xb0>
80219e40:	e0bffe17 	ldw	r2,-8(fp)
80219e44:	e0ffff17 	ldw	r3,-4(fp)
80219e48:	1885883a 	add	r2,r3,r2
80219e4c:	10800003 	ldbu	r2,0(r2)
80219e50:	10803fcc 	andi	r2,r2,255
80219e54:	1080201c 	xori	r2,r2,128
80219e58:	10bfe004 	addi	r2,r2,-128
80219e5c:	10000a1e 	bne	r2,zero,80219e88 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
80219e60:	e0bffd17 	ldw	r2,-12(fp)
80219e64:	10800217 	ldw	r2,8(r2)
80219e68:	e0fffe17 	ldw	r3,-8(fp)
80219e6c:	180d883a 	mov	r6,r3
80219e70:	e17fff17 	ldw	r5,-4(fp)
80219e74:	1009883a 	mov	r4,r2
80219e78:	021a0440 	call	8021a044 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
80219e7c:	1000021e 	bne	r2,zero,80219e88 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
80219e80:	e0bffd17 	ldw	r2,-12(fp)
80219e84:	00000706 	br	80219ea4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
80219e88:	e0bffd17 	ldw	r2,-12(fp)
80219e8c:	10800017 	ldw	r2,0(r2)
80219e90:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
80219e94:	e0fffd17 	ldw	r3,-12(fp)
80219e98:	d0a00704 	addi	r2,gp,-32740
80219e9c:	18bfcc1e 	bne	r3,r2,80219dd0 <__reset+0xfa1f9dd0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
80219ea0:	0005883a 	mov	r2,zero
}
80219ea4:	e037883a 	mov	sp,fp
80219ea8:	dfc00117 	ldw	ra,4(sp)
80219eac:	df000017 	ldw	fp,0(sp)
80219eb0:	dec00204 	addi	sp,sp,8
80219eb4:	f800283a 	ret

80219eb8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
80219eb8:	defffc04 	addi	sp,sp,-16
80219ebc:	df000315 	stw	fp,12(sp)
80219ec0:	df000304 	addi	fp,sp,12
80219ec4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
80219ec8:	00bffa04 	movi	r2,-24
80219ecc:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
80219ed0:	e03ffd15 	stw	zero,-12(fp)
80219ed4:	00001906 	br	80219f3c <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
80219ed8:	00a008b4 	movhi	r2,32802
80219edc:	10b01304 	addi	r2,r2,-16308
80219ee0:	e0fffd17 	ldw	r3,-12(fp)
80219ee4:	18c00324 	muli	r3,r3,12
80219ee8:	10c5883a 	add	r2,r2,r3
80219eec:	10800017 	ldw	r2,0(r2)
80219ef0:	10000f1e 	bne	r2,zero,80219f30 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
80219ef4:	00a008b4 	movhi	r2,32802
80219ef8:	10b01304 	addi	r2,r2,-16308
80219efc:	e0fffd17 	ldw	r3,-12(fp)
80219f00:	18c00324 	muli	r3,r3,12
80219f04:	10c5883a 	add	r2,r2,r3
80219f08:	e0ffff17 	ldw	r3,-4(fp)
80219f0c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
80219f10:	d0e00b17 	ldw	r3,-32724(gp)
80219f14:	e0bffd17 	ldw	r2,-12(fp)
80219f18:	1880020e 	bge	r3,r2,80219f24 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
80219f1c:	e0bffd17 	ldw	r2,-12(fp)
80219f20:	d0a00b15 	stw	r2,-32724(gp)
      }
      rc = i;
80219f24:	e0bffd17 	ldw	r2,-12(fp)
80219f28:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
80219f2c:	00000606 	br	80219f48 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
80219f30:	e0bffd17 	ldw	r2,-12(fp)
80219f34:	10800044 	addi	r2,r2,1
80219f38:	e0bffd15 	stw	r2,-12(fp)
80219f3c:	e0bffd17 	ldw	r2,-12(fp)
80219f40:	10800810 	cmplti	r2,r2,32
80219f44:	103fe41e 	bne	r2,zero,80219ed8 <__reset+0xfa1f9ed8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
80219f48:	e0bffe17 	ldw	r2,-8(fp)
}
80219f4c:	e037883a 	mov	sp,fp
80219f50:	df000017 	ldw	fp,0(sp)
80219f54:	dec00104 	addi	sp,sp,4
80219f58:	f800283a 	ret

80219f5c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
80219f5c:	defffe04 	addi	sp,sp,-8
80219f60:	df000115 	stw	fp,4(sp)
80219f64:	df000104 	addi	fp,sp,4
80219f68:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
80219f6c:	e0bfff17 	ldw	r2,-4(fp)
80219f70:	10bffe84 	addi	r2,r2,-6
80219f74:	10c00428 	cmpgeui	r3,r2,16
80219f78:	18001a1e 	bne	r3,zero,80219fe4 <alt_exception_cause_generated_bad_addr+0x88>
80219f7c:	100690ba 	slli	r3,r2,2
80219f80:	00a008b4 	movhi	r2,32802
80219f84:	10a7e504 	addi	r2,r2,-24684
80219f88:	1885883a 	add	r2,r3,r2
80219f8c:	10800017 	ldw	r2,0(r2)
80219f90:	1000683a 	jmp	r2
80219f94:	80219fd4 	ori	zero,r16,34431
80219f98:	80219fd4 	ori	zero,r16,34431
80219f9c:	80219fe4 	muli	zero,r16,-31105
80219fa0:	80219fe4 	muli	zero,r16,-31105
80219fa4:	80219fe4 	muli	zero,r16,-31105
80219fa8:	80219fd4 	ori	zero,r16,34431
80219fac:	80219fdc 	xori	zero,r16,34431
80219fb0:	80219fe4 	muli	zero,r16,-31105
80219fb4:	80219fd4 	ori	zero,r16,34431
80219fb8:	80219fd4 	ori	zero,r16,34431
80219fbc:	80219fe4 	muli	zero,r16,-31105
80219fc0:	80219fd4 	ori	zero,r16,34431
80219fc4:	80219fdc 	xori	zero,r16,34431
80219fc8:	80219fe4 	muli	zero,r16,-31105
80219fcc:	80219fe4 	muli	zero,r16,-31105
80219fd0:	80219fd4 	ori	zero,r16,34431
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
80219fd4:	00800044 	movi	r2,1
80219fd8:	00000306 	br	80219fe8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
80219fdc:	0005883a 	mov	r2,zero
80219fe0:	00000106 	br	80219fe8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
80219fe4:	0005883a 	mov	r2,zero
  }
}
80219fe8:	e037883a 	mov	sp,fp
80219fec:	df000017 	ldw	fp,0(sp)
80219ff0:	dec00104 	addi	sp,sp,4
80219ff4:	f800283a 	ret

80219ff8 <atexit>:
80219ff8:	200b883a 	mov	r5,r4
80219ffc:	000f883a 	mov	r7,zero
8021a000:	000d883a 	mov	r6,zero
8021a004:	0009883a 	mov	r4,zero
8021a008:	021a2281 	jmpi	8021a228 <__register_exitproc>

8021a00c <exit>:
8021a00c:	defffe04 	addi	sp,sp,-8
8021a010:	000b883a 	mov	r5,zero
8021a014:	dc000015 	stw	r16,0(sp)
8021a018:	dfc00115 	stw	ra,4(sp)
8021a01c:	2021883a 	mov	r16,r4
8021a020:	021a3400 	call	8021a340 <__call_exitprocs>
8021a024:	00a008b4 	movhi	r2,32802
8021a028:	10b4fc04 	addi	r2,r2,-11280
8021a02c:	11000017 	ldw	r4,0(r2)
8021a030:	20800f17 	ldw	r2,60(r4)
8021a034:	10000126 	beq	r2,zero,8021a03c <exit+0x30>
8021a038:	103ee83a 	callr	r2
8021a03c:	8009883a 	mov	r4,r16
8021a040:	021a4c00 	call	8021a4c0 <_exit>

8021a044 <memcmp>:
8021a044:	01c000c4 	movi	r7,3
8021a048:	3980192e 	bgeu	r7,r6,8021a0b0 <memcmp+0x6c>
8021a04c:	2144b03a 	or	r2,r4,r5
8021a050:	11c4703a 	and	r2,r2,r7
8021a054:	10000f26 	beq	r2,zero,8021a094 <memcmp+0x50>
8021a058:	20800003 	ldbu	r2,0(r4)
8021a05c:	28c00003 	ldbu	r3,0(r5)
8021a060:	10c0151e 	bne	r2,r3,8021a0b8 <memcmp+0x74>
8021a064:	31bfff84 	addi	r6,r6,-2
8021a068:	01ffffc4 	movi	r7,-1
8021a06c:	00000406 	br	8021a080 <memcmp+0x3c>
8021a070:	20800003 	ldbu	r2,0(r4)
8021a074:	28c00003 	ldbu	r3,0(r5)
8021a078:	31bfffc4 	addi	r6,r6,-1
8021a07c:	10c00e1e 	bne	r2,r3,8021a0b8 <memcmp+0x74>
8021a080:	21000044 	addi	r4,r4,1
8021a084:	29400044 	addi	r5,r5,1
8021a088:	31fff91e 	bne	r6,r7,8021a070 <__reset+0xfa1fa070>
8021a08c:	0005883a 	mov	r2,zero
8021a090:	f800283a 	ret
8021a094:	20c00017 	ldw	r3,0(r4)
8021a098:	28800017 	ldw	r2,0(r5)
8021a09c:	18bfee1e 	bne	r3,r2,8021a058 <__reset+0xfa1fa058>
8021a0a0:	31bfff04 	addi	r6,r6,-4
8021a0a4:	21000104 	addi	r4,r4,4
8021a0a8:	29400104 	addi	r5,r5,4
8021a0ac:	39bff936 	bltu	r7,r6,8021a094 <__reset+0xfa1fa094>
8021a0b0:	303fe91e 	bne	r6,zero,8021a058 <__reset+0xfa1fa058>
8021a0b4:	003ff506 	br	8021a08c <__reset+0xfa1fa08c>
8021a0b8:	10c5c83a 	sub	r2,r2,r3
8021a0bc:	f800283a 	ret

8021a0c0 <_putc_r>:
8021a0c0:	defffc04 	addi	sp,sp,-16
8021a0c4:	dc000215 	stw	r16,8(sp)
8021a0c8:	dfc00315 	stw	ra,12(sp)
8021a0cc:	2021883a 	mov	r16,r4
8021a0d0:	20000226 	beq	r4,zero,8021a0dc <_putc_r+0x1c>
8021a0d4:	20800e17 	ldw	r2,56(r4)
8021a0d8:	10001b26 	beq	r2,zero,8021a148 <_putc_r+0x88>
8021a0dc:	30800217 	ldw	r2,8(r6)
8021a0e0:	10bfffc4 	addi	r2,r2,-1
8021a0e4:	30800215 	stw	r2,8(r6)
8021a0e8:	10000a16 	blt	r2,zero,8021a114 <_putc_r+0x54>
8021a0ec:	30800017 	ldw	r2,0(r6)
8021a0f0:	11400005 	stb	r5,0(r2)
8021a0f4:	30800017 	ldw	r2,0(r6)
8021a0f8:	10c00044 	addi	r3,r2,1
8021a0fc:	30c00015 	stw	r3,0(r6)
8021a100:	10800003 	ldbu	r2,0(r2)
8021a104:	dfc00317 	ldw	ra,12(sp)
8021a108:	dc000217 	ldw	r16,8(sp)
8021a10c:	dec00404 	addi	sp,sp,16
8021a110:	f800283a 	ret
8021a114:	30c00617 	ldw	r3,24(r6)
8021a118:	10c00616 	blt	r2,r3,8021a134 <_putc_r+0x74>
8021a11c:	30800017 	ldw	r2,0(r6)
8021a120:	00c00284 	movi	r3,10
8021a124:	11400005 	stb	r5,0(r2)
8021a128:	30800017 	ldw	r2,0(r6)
8021a12c:	11400003 	ldbu	r5,0(r2)
8021a130:	28fff11e 	bne	r5,r3,8021a0f8 <__reset+0xfa1fa0f8>
8021a134:	8009883a 	mov	r4,r16
8021a138:	dfc00317 	ldw	ra,12(sp)
8021a13c:	dc000217 	ldw	r16,8(sp)
8021a140:	dec00404 	addi	sp,sp,16
8021a144:	0211b281 	jmpi	80211b28 <__swbuf_r>
8021a148:	d9400015 	stw	r5,0(sp)
8021a14c:	d9800115 	stw	r6,4(sp)
8021a150:	020b9cc0 	call	8020b9cc <__sinit>
8021a154:	d9800117 	ldw	r6,4(sp)
8021a158:	d9400017 	ldw	r5,0(sp)
8021a15c:	003fdf06 	br	8021a0dc <__reset+0xfa1fa0dc>

8021a160 <putc>:
8021a160:	00a008b4 	movhi	r2,32802
8021a164:	defffc04 	addi	sp,sp,-16
8021a168:	10b4fd04 	addi	r2,r2,-11276
8021a16c:	dc000115 	stw	r16,4(sp)
8021a170:	14000017 	ldw	r16,0(r2)
8021a174:	dc400215 	stw	r17,8(sp)
8021a178:	dfc00315 	stw	ra,12(sp)
8021a17c:	2023883a 	mov	r17,r4
8021a180:	80000226 	beq	r16,zero,8021a18c <putc+0x2c>
8021a184:	80800e17 	ldw	r2,56(r16)
8021a188:	10001a26 	beq	r2,zero,8021a1f4 <putc+0x94>
8021a18c:	28800217 	ldw	r2,8(r5)
8021a190:	10bfffc4 	addi	r2,r2,-1
8021a194:	28800215 	stw	r2,8(r5)
8021a198:	10000b16 	blt	r2,zero,8021a1c8 <putc+0x68>
8021a19c:	28800017 	ldw	r2,0(r5)
8021a1a0:	14400005 	stb	r17,0(r2)
8021a1a4:	28800017 	ldw	r2,0(r5)
8021a1a8:	10c00044 	addi	r3,r2,1
8021a1ac:	28c00015 	stw	r3,0(r5)
8021a1b0:	10800003 	ldbu	r2,0(r2)
8021a1b4:	dfc00317 	ldw	ra,12(sp)
8021a1b8:	dc400217 	ldw	r17,8(sp)
8021a1bc:	dc000117 	ldw	r16,4(sp)
8021a1c0:	dec00404 	addi	sp,sp,16
8021a1c4:	f800283a 	ret
8021a1c8:	28c00617 	ldw	r3,24(r5)
8021a1cc:	10c00e16 	blt	r2,r3,8021a208 <putc+0xa8>
8021a1d0:	28800017 	ldw	r2,0(r5)
8021a1d4:	01000284 	movi	r4,10
8021a1d8:	14400005 	stb	r17,0(r2)
8021a1dc:	28800017 	ldw	r2,0(r5)
8021a1e0:	10c00003 	ldbu	r3,0(r2)
8021a1e4:	193ff01e 	bne	r3,r4,8021a1a8 <__reset+0xfa1fa1a8>
8021a1e8:	280d883a 	mov	r6,r5
8021a1ec:	180b883a 	mov	r5,r3
8021a1f0:	00000706 	br	8021a210 <putc+0xb0>
8021a1f4:	8009883a 	mov	r4,r16
8021a1f8:	d9400015 	stw	r5,0(sp)
8021a1fc:	020b9cc0 	call	8020b9cc <__sinit>
8021a200:	d9400017 	ldw	r5,0(sp)
8021a204:	003fe106 	br	8021a18c <__reset+0xfa1fa18c>
8021a208:	280d883a 	mov	r6,r5
8021a20c:	880b883a 	mov	r5,r17
8021a210:	8009883a 	mov	r4,r16
8021a214:	dfc00317 	ldw	ra,12(sp)
8021a218:	dc400217 	ldw	r17,8(sp)
8021a21c:	dc000117 	ldw	r16,4(sp)
8021a220:	dec00404 	addi	sp,sp,16
8021a224:	0211b281 	jmpi	80211b28 <__swbuf_r>

8021a228 <__register_exitproc>:
8021a228:	defffa04 	addi	sp,sp,-24
8021a22c:	dc000315 	stw	r16,12(sp)
8021a230:	042008b4 	movhi	r16,32802
8021a234:	8434fc04 	addi	r16,r16,-11280
8021a238:	80c00017 	ldw	r3,0(r16)
8021a23c:	dc400415 	stw	r17,16(sp)
8021a240:	dfc00515 	stw	ra,20(sp)
8021a244:	18805217 	ldw	r2,328(r3)
8021a248:	2023883a 	mov	r17,r4
8021a24c:	10003726 	beq	r2,zero,8021a32c <__register_exitproc+0x104>
8021a250:	10c00117 	ldw	r3,4(r2)
8021a254:	010007c4 	movi	r4,31
8021a258:	20c00e16 	blt	r4,r3,8021a294 <__register_exitproc+0x6c>
8021a25c:	1a000044 	addi	r8,r3,1
8021a260:	8800221e 	bne	r17,zero,8021a2ec <__register_exitproc+0xc4>
8021a264:	18c00084 	addi	r3,r3,2
8021a268:	18c7883a 	add	r3,r3,r3
8021a26c:	18c7883a 	add	r3,r3,r3
8021a270:	12000115 	stw	r8,4(r2)
8021a274:	10c7883a 	add	r3,r2,r3
8021a278:	19400015 	stw	r5,0(r3)
8021a27c:	0005883a 	mov	r2,zero
8021a280:	dfc00517 	ldw	ra,20(sp)
8021a284:	dc400417 	ldw	r17,16(sp)
8021a288:	dc000317 	ldw	r16,12(sp)
8021a28c:	dec00604 	addi	sp,sp,24
8021a290:	f800283a 	ret
8021a294:	00800034 	movhi	r2,0
8021a298:	10800004 	addi	r2,r2,0
8021a29c:	10002626 	beq	r2,zero,8021a338 <__register_exitproc+0x110>
8021a2a0:	01006404 	movi	r4,400
8021a2a4:	d9400015 	stw	r5,0(sp)
8021a2a8:	d9800115 	stw	r6,4(sp)
8021a2ac:	d9c00215 	stw	r7,8(sp)
8021a2b0:	00000000 	call	80000000 <__alt_mem_onchip_memory-0x200000>
8021a2b4:	d9400017 	ldw	r5,0(sp)
8021a2b8:	d9800117 	ldw	r6,4(sp)
8021a2bc:	d9c00217 	ldw	r7,8(sp)
8021a2c0:	10001d26 	beq	r2,zero,8021a338 <__register_exitproc+0x110>
8021a2c4:	81000017 	ldw	r4,0(r16)
8021a2c8:	10000115 	stw	zero,4(r2)
8021a2cc:	02000044 	movi	r8,1
8021a2d0:	22405217 	ldw	r9,328(r4)
8021a2d4:	0007883a 	mov	r3,zero
8021a2d8:	12400015 	stw	r9,0(r2)
8021a2dc:	20805215 	stw	r2,328(r4)
8021a2e0:	10006215 	stw	zero,392(r2)
8021a2e4:	10006315 	stw	zero,396(r2)
8021a2e8:	883fde26 	beq	r17,zero,8021a264 <__reset+0xfa1fa264>
8021a2ec:	18c9883a 	add	r4,r3,r3
8021a2f0:	2109883a 	add	r4,r4,r4
8021a2f4:	1109883a 	add	r4,r2,r4
8021a2f8:	21802215 	stw	r6,136(r4)
8021a2fc:	01800044 	movi	r6,1
8021a300:	12406217 	ldw	r9,392(r2)
8021a304:	30cc983a 	sll	r6,r6,r3
8021a308:	4992b03a 	or	r9,r9,r6
8021a30c:	12406215 	stw	r9,392(r2)
8021a310:	21c04215 	stw	r7,264(r4)
8021a314:	01000084 	movi	r4,2
8021a318:	893fd21e 	bne	r17,r4,8021a264 <__reset+0xfa1fa264>
8021a31c:	11006317 	ldw	r4,396(r2)
8021a320:	218cb03a 	or	r6,r4,r6
8021a324:	11806315 	stw	r6,396(r2)
8021a328:	003fce06 	br	8021a264 <__reset+0xfa1fa264>
8021a32c:	18805304 	addi	r2,r3,332
8021a330:	18805215 	stw	r2,328(r3)
8021a334:	003fc606 	br	8021a250 <__reset+0xfa1fa250>
8021a338:	00bfffc4 	movi	r2,-1
8021a33c:	003fd006 	br	8021a280 <__reset+0xfa1fa280>

8021a340 <__call_exitprocs>:
8021a340:	defff504 	addi	sp,sp,-44
8021a344:	df000915 	stw	fp,36(sp)
8021a348:	dd400615 	stw	r21,24(sp)
8021a34c:	dc800315 	stw	r18,12(sp)
8021a350:	dfc00a15 	stw	ra,40(sp)
8021a354:	ddc00815 	stw	r23,32(sp)
8021a358:	dd800715 	stw	r22,28(sp)
8021a35c:	dd000515 	stw	r20,20(sp)
8021a360:	dcc00415 	stw	r19,16(sp)
8021a364:	dc400215 	stw	r17,8(sp)
8021a368:	dc000115 	stw	r16,4(sp)
8021a36c:	d9000015 	stw	r4,0(sp)
8021a370:	2839883a 	mov	fp,r5
8021a374:	04800044 	movi	r18,1
8021a378:	057fffc4 	movi	r21,-1
8021a37c:	00a008b4 	movhi	r2,32802
8021a380:	10b4fc04 	addi	r2,r2,-11280
8021a384:	12000017 	ldw	r8,0(r2)
8021a388:	45005217 	ldw	r20,328(r8)
8021a38c:	44c05204 	addi	r19,r8,328
8021a390:	a0001c26 	beq	r20,zero,8021a404 <__call_exitprocs+0xc4>
8021a394:	a0800117 	ldw	r2,4(r20)
8021a398:	15ffffc4 	addi	r23,r2,-1
8021a39c:	b8000d16 	blt	r23,zero,8021a3d4 <__call_exitprocs+0x94>
8021a3a0:	14000044 	addi	r16,r2,1
8021a3a4:	8421883a 	add	r16,r16,r16
8021a3a8:	8421883a 	add	r16,r16,r16
8021a3ac:	84402004 	addi	r17,r16,128
8021a3b0:	a463883a 	add	r17,r20,r17
8021a3b4:	a421883a 	add	r16,r20,r16
8021a3b8:	e0001e26 	beq	fp,zero,8021a434 <__call_exitprocs+0xf4>
8021a3bc:	80804017 	ldw	r2,256(r16)
8021a3c0:	e0801c26 	beq	fp,r2,8021a434 <__call_exitprocs+0xf4>
8021a3c4:	bdffffc4 	addi	r23,r23,-1
8021a3c8:	843fff04 	addi	r16,r16,-4
8021a3cc:	8c7fff04 	addi	r17,r17,-4
8021a3d0:	bd7ff91e 	bne	r23,r21,8021a3b8 <__reset+0xfa1fa3b8>
8021a3d4:	00800034 	movhi	r2,0
8021a3d8:	10800004 	addi	r2,r2,0
8021a3dc:	10000926 	beq	r2,zero,8021a404 <__call_exitprocs+0xc4>
8021a3e0:	a0800117 	ldw	r2,4(r20)
8021a3e4:	1000301e 	bne	r2,zero,8021a4a8 <__call_exitprocs+0x168>
8021a3e8:	a0800017 	ldw	r2,0(r20)
8021a3ec:	10003226 	beq	r2,zero,8021a4b8 <__call_exitprocs+0x178>
8021a3f0:	a009883a 	mov	r4,r20
8021a3f4:	98800015 	stw	r2,0(r19)
8021a3f8:	00000000 	call	80000000 <__alt_mem_onchip_memory-0x200000>
8021a3fc:	9d000017 	ldw	r20,0(r19)
8021a400:	a03fe41e 	bne	r20,zero,8021a394 <__reset+0xfa1fa394>
8021a404:	dfc00a17 	ldw	ra,40(sp)
8021a408:	df000917 	ldw	fp,36(sp)
8021a40c:	ddc00817 	ldw	r23,32(sp)
8021a410:	dd800717 	ldw	r22,28(sp)
8021a414:	dd400617 	ldw	r21,24(sp)
8021a418:	dd000517 	ldw	r20,20(sp)
8021a41c:	dcc00417 	ldw	r19,16(sp)
8021a420:	dc800317 	ldw	r18,12(sp)
8021a424:	dc400217 	ldw	r17,8(sp)
8021a428:	dc000117 	ldw	r16,4(sp)
8021a42c:	dec00b04 	addi	sp,sp,44
8021a430:	f800283a 	ret
8021a434:	a0800117 	ldw	r2,4(r20)
8021a438:	80c00017 	ldw	r3,0(r16)
8021a43c:	10bfffc4 	addi	r2,r2,-1
8021a440:	15c01426 	beq	r2,r23,8021a494 <__call_exitprocs+0x154>
8021a444:	80000015 	stw	zero,0(r16)
8021a448:	183fde26 	beq	r3,zero,8021a3c4 <__reset+0xfa1fa3c4>
8021a44c:	95c8983a 	sll	r4,r18,r23
8021a450:	a0806217 	ldw	r2,392(r20)
8021a454:	a5800117 	ldw	r22,4(r20)
8021a458:	2084703a 	and	r2,r4,r2
8021a45c:	10000b26 	beq	r2,zero,8021a48c <__call_exitprocs+0x14c>
8021a460:	a0806317 	ldw	r2,396(r20)
8021a464:	2088703a 	and	r4,r4,r2
8021a468:	20000c1e 	bne	r4,zero,8021a49c <__call_exitprocs+0x15c>
8021a46c:	89400017 	ldw	r5,0(r17)
8021a470:	d9000017 	ldw	r4,0(sp)
8021a474:	183ee83a 	callr	r3
8021a478:	a0800117 	ldw	r2,4(r20)
8021a47c:	15bfbf1e 	bne	r2,r22,8021a37c <__reset+0xfa1fa37c>
8021a480:	98800017 	ldw	r2,0(r19)
8021a484:	153fcf26 	beq	r2,r20,8021a3c4 <__reset+0xfa1fa3c4>
8021a488:	003fbc06 	br	8021a37c <__reset+0xfa1fa37c>
8021a48c:	183ee83a 	callr	r3
8021a490:	003ff906 	br	8021a478 <__reset+0xfa1fa478>
8021a494:	a5c00115 	stw	r23,4(r20)
8021a498:	003feb06 	br	8021a448 <__reset+0xfa1fa448>
8021a49c:	89000017 	ldw	r4,0(r17)
8021a4a0:	183ee83a 	callr	r3
8021a4a4:	003ff406 	br	8021a478 <__reset+0xfa1fa478>
8021a4a8:	a0800017 	ldw	r2,0(r20)
8021a4ac:	a027883a 	mov	r19,r20
8021a4b0:	1029883a 	mov	r20,r2
8021a4b4:	003fb606 	br	8021a390 <__reset+0xfa1fa390>
8021a4b8:	0005883a 	mov	r2,zero
8021a4bc:	003ffb06 	br	8021a4ac <__reset+0xfa1fa4ac>

8021a4c0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
8021a4c0:	defffd04 	addi	sp,sp,-12
8021a4c4:	df000215 	stw	fp,8(sp)
8021a4c8:	df000204 	addi	fp,sp,8
8021a4cc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
8021a4d0:	0001883a 	nop
8021a4d4:	e0bfff17 	ldw	r2,-4(fp)
8021a4d8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
8021a4dc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
8021a4e0:	10000226 	beq	r2,zero,8021a4ec <_exit+0x2c>
    ALT_SIM_FAIL();
8021a4e4:	002af070 	cmpltui	zero,zero,43969
8021a4e8:	00000106 	br	8021a4f0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
8021a4ec:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
8021a4f0:	003fff06 	br	8021a4f0 <__reset+0xfa1fa4f0>
