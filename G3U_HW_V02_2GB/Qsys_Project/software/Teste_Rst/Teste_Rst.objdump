
Teste_Rst.elf:     file format elf32-littlenios2
Teste_Rst.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x80200244

Program Header:
    LOAD off    0x00001020 vaddr 0x80200020 paddr 0x80200020 align 2**12
         filesz 0x0000a76c memsz 0x0000a8c0 flags rwx
    LOAD off    0x0000c000 vaddr 0x86020000 paddr 0x86020000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  86020000  86020000  0000c000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  80200020  80200020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000863c  80200244  80200244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000002c4  80208880  80208880  00009880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c3c  80208b50  80208b50  00009b50  2**4
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  8020a78c  8020a78c  0000b78c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  8020a8e0  8020a8e0  0000c000  2**0
                  CONTENTS
  7 .ext_flash    00000000  86020020  86020020  0000c000  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0000c000  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000b58  00000000  00000000  0000c028  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0001ace2  00000000  00000000  0000cb80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000708c  00000000  00000000  00027862  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00007cee  00000000  00000000  0002e8ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001f08  00000000  00000000  000365dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000361d  00000000  00000000  000384e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004e22  00000000  00000000  0003bb01  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00040924  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000006d8  00000000  00000000  00040968  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000441cd  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000441d0  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000441dc  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000441dd  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000441de  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000441e2  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000441e6  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  000441ea  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  000441f5  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00044200  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000011  00000000  00000000  0004420b  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000053  00000000  00000000  0004421c  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     001fba20  00000000  00000000  0004426f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
86020000 l    d  .entry	00000000 .entry
80200020 l    d  .exceptions	00000000 .exceptions
80200244 l    d  .text	00000000 .text
80208880 l    d  .rodata	00000000 .rodata
80208b50 l    d  .rwdata	00000000 .rwdata
8020a78c l    d  .bss	00000000 .bss
8020a8e0 l    d  .onchip_memory	00000000 .onchip_memory
86020020 l    d  .ext_flash	00000000 .ext_flash
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Teste_Rst_bsp//obj/HAL/src/crt0.o
80200278 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 reset.c
8020046c l     F .text	00000048 uliRstReadReg
80200420 l     F .text	0000004c vRstcWriteReg
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
802006c8 l     F .text	00000008 __fp_unlock
802006dc l     F .text	0000019c __sinit.part.1
80200878 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
80208b50 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
80203324 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
80203430 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
8020345c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
80203548 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
80203628 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
802037fc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
8020a774 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
80203a78 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
80203bac l     F .text	00000034 alt_dev_reg
80209530 l     O .rwdata	00001060 jtag_uart_0
8020a590 l     O .rwdata	000000c4 rs232_uart
8020a660 l     O .rwdata	00000060 dma_DDR_M1
8020a6c0 l     O .rwdata	00000060 dma_DDR_M2
8020a720 l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
80203f24 l     F .text	0000020c altera_avalon_jtag_uart_irq
80204130 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
80204768 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
80204a18 l     F .text	0000009c altera_avalon_uart_irq
80204ab4 l     F .text	000000e4 altera_avalon_uart_rxirq
80204b98 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
80204d34 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
80204f4c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_msgdma.c
80205134 l     F .text	0000003c alt_get_errno
80205170 l     F .text	00000094 alt_msgdma_write_standard_descriptor
80205204 l     F .text	0000012c alt_msgdma_write_extended_descriptor
80205330 l     F .text	00000184 alt_msgdma_irq
802054b4 l     F .text	0000008c alt_msgdma_construct_standard_descriptor
80205540 l     F .text	00000154 alt_msgdma_construct_extended_descriptor
80205694 l     F .text	000002d0 alt_msgdma_descriptor_async_transfer
80205964 l     F .text	00000378 alt_msgdma_descriptor_sync_transfer
80205fac l     F .text	000000a4 alt_msgdma_construct_prefetcher_standard_descriptor
80206050 l     F .text	00000194 alt_msgdma_construct_prefetcher_extended_descriptor
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
80207350 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
80207820 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
80207960 l     F .text	0000003c alt_get_errno
8020799c l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
8020a7b4 g     O .bss	00000004 alt_instruction_exception_handler
80206fe4 g     F .text	0000003c alt_msgdma_standard_descriptor_async_transfer
8020311c g     F .text	00000054 _isatty_r
80203738 g     F .text	0000007c alt_main
8020055c g     F .text	000000c0 _puts_r
8020a7e0 g     O .bss	00000100 alt_irq
80202e44 g     F .text	00000060 _lseek_r
80205d8c g     F .text	00000058 alt_msgdma_construct_standard_mm_to_mm_descriptor
8020a8e0 g       *ABS*	00000000 __alt_heap_start
802023f8 g     F .text	0000005c __sseek
80200a18 g     F .text	00000010 __sinit
8020845c g     F .text	00000140 __swbuf_r
80200880 g     F .text	00000068 __sfmoreglue
802037d8 g     F .text	00000024 __malloc_unlock
80201ae4 g     F .text	0000015c memmove
80200a00 g     F .text	00000018 _cleanup
80205cdc g     F .text	00000058 alt_msgdma_construct_standard_st_to_mm_descriptor
80207fc0 g     F .text	00000024 altera_nios2_gen2_irq_init
86020000 g     F .entry	00000000 __reset
802030c0 g     F .text	0000005c _fstat_r
8020a798 g     O .bss	00000004 errno
80202374 g     F .text	00000008 __seofread
8020a7a0 g     O .bss	00000004 alt_argv
8021274c g       *ABS*	00000000 _gp
80203a48 g     F .text	00000030 usleep
80206870 g     F .text	00000144 alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits
802093a4 g     O .rwdata	00000180 alt_fd_list
802074f0 g     F .text	00000090 alt_find_dev
8020199c g     F .text	00000148 memcpy
802006d0 g     F .text	0000000c _cleanup_r
802078e4 g     F .text	0000007c alt_io_redirect
80208880 g       *ABS*	00000000 __DTOR_END__
80206d20 g     F .text	000000ac alt_msgdma_start_prefetcher_with_extd_desc_list
80207020 g     F .text	0000003c alt_msgdma_extended_descriptor_async_transfer
80206f90 g     F .text	00000054 alt_msgdma_register_callback
8020061c g     F .text	00000014 puts
80208190 g     F .text	0000009c alt_exception_cause_generated_bad_addr
80204328 g     F .text	0000021c altera_avalon_jtag_uart_read
802064dc g     F .text	000000f0 alt_msgdma_prefetcher_add_standard_desc_to_list
80203268 g     F .text	00000064 .hidden __udivsi3
80203584 g     F .text	000000a4 isatty
8020a794 g     O .bss	00000004 __malloc_top_pad
802003b8 g     F .text	00000068 vRstcHoldDeviceReset
80200a68 g     F .text	000004bc __sfvwrite_r
802022cc g     F .text	00000054 _sbrk_r
80203060 g     F .text	00000060 _read_r
80207328 g     F .text	00000028 alt_dcache_flush
8020a76c g     O .rwdata	00000004 alt_max_fd
80202664 g     F .text	000000f0 _fclose_r
802029e0 g     F .text	00000030 fflush
8020a790 g     O .bss	00000004 __malloc_max_sbrked_mem
8020623c g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor
80203664 g     F .text	000000d4 lseek
8020a74c g     O .rwdata	00000004 _global_impure_ptr
80201d68 g     F .text	00000564 _realloc_r
8020a8e0 g       *ABS*	00000000 __bss_end
80207730 g     F .text	000000f0 alt_iic_isr_register
80207eb8 g     F .text	00000108 alt_tick
80206e24 g     F .text	0000016c alt_msgdma_init
8020496c g     F .text	000000ac altera_avalon_uart_init
80207098 g     F .text	0000003c alt_msgdma_extended_descriptor_sync_transfer
80200a38 g     F .text	00000018 __fp_lock_all
802076e4 g     F .text	0000004c alt_ic_irq_enabled
80207e1c g     F .text	0000009c alt_alarm_stop
8020a7a8 g     O .bss	00000004 alt_irq_active
802000fc g     F .exceptions	000000d4 alt_irq_handler
8020937c g     O .rwdata	00000028 alt_dev_null
80205e74 g     F .text	00000090 alt_msgdma_construct_extended_mm_to_st_descriptor
80206c74 g     F .text	000000ac alt_msgdma_start_prefetcher_with_std_desc_list
80200000 g       *ABS*	00000000 __alt_mem_onchip_memory
8020a764 g     O .rwdata	00000008 alt_dev_list
80203ab4 g     F .text	000000f8 write
802082f4 g     F .text	000000a0 _putc_r
80203498 g     F .text	000000b0 fstat
802032cc g     F .text	00000058 .hidden __umodsi3
80206294 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor
8020a8e0 g       *ABS*	00000000 end
80204f88 g     F .text	000001ac altera_avalon_uart_write
80203e64 g     F .text	000000c0 altera_avalon_jtag_uart_init
802001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
80208880 g       *ABS*	00000000 __CTOR_LIST__
80300000 g       *ABS*	00000000 __alt_stack_pointer
802047e0 g     F .text	0000007c alt_avalon_timer_sc_init
802048bc g     F .text	00000060 altera_avalon_uart_write_fd
8020491c g     F .text	00000050 altera_avalon_uart_close_fd
80204544 g     F .text	00000224 altera_avalon_jtag_uart_write
80200a28 g     F .text	00000004 __sfp_lock_acquire
802018b8 g     F .text	000000e4 memchr
80202b34 g     F .text	00000310 _free_r
80207bb4 g     F .text	0000022c alt_printf
802086cc g     F .text	00000180 __call_exitprocs
8020a754 g     O .rwdata	00000004 __malloc_sbrk_base
80200244 g     F .text	00000038 _start
8020a7ac g     O .bss	00000004 _alt_tick_rate
8020a7b0 g     O .bss	00000004 _alt_nticks
80205d34 g     F .text	00000058 alt_msgdma_construct_standard_mm_to_st_descriptor
80203838 g     F .text	000000fc read
80203c18 g     F .text	000000e8 alt_sys_init
802085b4 g     F .text	00000118 __register_exitproc
802041d0 g     F .text	00000068 altera_avalon_jtag_uart_close
8020a7b8 g     O .bss	00000028 __malloc_current_mallinfo
80203d00 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
802080ec g     F .text	000000a4 alt_get_fd
80207200 g     F .text	00000128 alt_busy_sleep
80202610 g     F .text	00000054 _close_r
802061e4 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor
80208278 g     F .text	0000007c memcmp
80203dc0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
8020a8e0 g       *ABS*	00000000 __alt_stack_base
80203e10 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
802062ec g     F .text	000000a0 alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor
802024bc g     F .text	00000154 __swsetup_r
802002e8 g     F .text	00000064 vRstcHoldSimucamReset
802008e8 g     F .text	00000118 __sfp
80208f74 g     O .rwdata	00000408 __malloc_av_
80200a34 g     F .text	00000004 __sinit_lock_release
80202320 g     F .text	00000054 __sread
80207fe4 g     F .text	00000108 alt_find_file
8020738c g     F .text	000000a4 alt_dev_llist_insert
802037b4 g     F .text	00000024 __malloc_lock
80203998 g     F .text	000000b0 sbrk
80202984 g     F .text	0000005c _fflush_r
8020a78c g       *ABS*	00000000 __bss_start
80201c40 g     F .text	00000128 memset
80206dcc g     F .text	00000058 alt_msgdma_open
802004b4 g     F .text	000000a8 main
8020027c g     F .text	0000006c vRstcReleaseSimucamReset
8020a7a4 g     O .bss	00000004 alt_envp
8020a78c g     O .bss	00000004 __malloc_max_total_mem
802065cc g     F .text	00000198 alt_msgdma_prefetcher_add_extended_desc_to_list
80203d60 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
8020859c g     F .text	00000018 __swbuf
80202454 g     F .text	00000008 __sclose
80300000 g       *ABS*	00000000 __alt_heap_limit
80202754 g     F .text	00000014 fclose
802069b4 g     F .text	000002c0 alt_msgdma_start_prefetcher_with_list_addr
802010ac g     F .text	0000080c _malloc_r
8020a770 g     O .rwdata	00000004 alt_errno
80206424 g     F .text	000000b8 alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor
80200f24 g     F .text	000000c4 _fwalk
80208394 g     F .text	000000c8 putc
80203170 g     F .text	00000084 .hidden __divsi3
80202a10 g     F .text	00000124 _malloc_trim_r
80208880 g       *ABS*	00000000 __CTOR_END__
80208880 g       *ABS*	00000000 __DTOR_LIST__
80203be0 g     F .text	00000038 alt_irq_init
80203934 g     F .text	00000064 alt_release_fd
8020705c g     F .text	0000003c alt_msgdma_standard_descriptor_sync_transfer
8020822c g     F .text	00000014 atexit
8020245c g     F .text	00000060 _write_r
8020034c g     F .text	0000006c vRstcReleaseDeviceReset
8020638c g     F .text	00000098 alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor
8020a750 g     O .rwdata	00000004 _impure_ptr
8020a79c g     O .bss	00000004 alt_argc
80202768 g     F .text	0000021c __sflush_r
80207490 g     F .text	00000060 _do_dtors
80200020 g       .exceptions	00000000 alt_irq_entry
80200a50 g     F .text	00000018 __fp_unlock_all
8020a75c g     O .rwdata	00000008 alt_fs_list
80207580 g     F .text	00000050 alt_ic_isr_register
8020a78c g       *ABS*	00000000 _edata
8020485c g     F .text	00000060 altera_avalon_uart_read_fd
8020a8e0 g       *ABS*	00000000 _end
80204238 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
80207658 g     F .text	0000008c alt_ic_irq_disable
8020237c g     F .text	0000007c __swrite
8020a758 g     O .rwdata	00000004 __malloc_trim_threshold
80208240 g     F .text	00000038 exit
80200fe8 g     F .text	000000c4 _fwalk_reent
80206764 g     F .text	0000010c alt_msgdma_prefetcher_set_std_list_own_by_hw_bits
802031f4 g     F .text	00000074 .hidden __modsi3
80300000 g       *ABS*	00000000 __alt_data_end
80200020 g     F .exceptions	00000000 alt_exception
80200a2c g     F .text	00000004 __sfp_lock_release
80205f04 g     F .text	000000a8 alt_msgdma_construct_extended_mm_to_mm_descriptor
84000000 g       *ABS*	00000000 __alt_mem_ext_flash
80205de4 g     F .text	00000090 alt_msgdma_construct_extended_st_to_mm_descriptor
80204ce0 g     F .text	00000054 altera_avalon_uart_close
8020884c g     F .text	00000034 _exit
802070d4 g     F .text	0000012c alt_alarm_start
80202ea4 g     F .text	000001bc __smakebuf_r
8020a778 g     O .rwdata	00000008 alt_msgdma_list
80200630 g     F .text	00000098 strlen
80207a60 g     F .text	00000154 open
80207de0 g     F .text	0000003c alt_putchar
8020a780 g     O .rwdata	00000004 alt_priority_mask
802075d0 g     F .text	00000088 alt_ic_irq_enable
80204d70 g     F .text	000001dc altera_avalon_uart_read
8020a784 g     O .rwdata	00000008 alt_alarm_list
80207430 g     F .text	00000060 _do_ctors
80203360 g     F .text	000000d0 close
80200a30 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .exceptions:

80200020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
80200020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
80200024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
80200028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
8020002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
80200030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
80200034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
80200038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
8020003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
80200040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
80200044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
80200048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
8020004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
80200050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
80200054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
80200058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
8020005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
80200060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
80200064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
80200068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
8020006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
80200070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
80200074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
80200078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
8020007c:	10000326 	beq	r2,zero,8020008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
80200080:	20000226 	beq	r4,zero,8020008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
80200084:	02000fc0 	call	802000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
80200088:	00000706 	br	802000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
8020008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
80200090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
80200094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
80200098:	02001d00 	call	802001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
8020009c:	1000021e 	bne	r2,zero,802000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
802000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
802000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
802000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
802000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
802000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
802000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
802000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
802000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
802000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
802000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
802000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
802000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
802000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
802000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
802000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
802000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
802000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
802000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
802000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
802000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
802000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
802000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
802000f8:	ef80083a 	eret

802000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
802000fc:	defff904 	addi	sp,sp,-28
80200100:	dfc00615 	stw	ra,24(sp)
80200104:	df000515 	stw	fp,20(sp)
80200108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
8020010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
80200110:	0005313a 	rdctl	r2,ipending
80200114:	e0bffe15 	stw	r2,-8(fp)

  return active;
80200118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
8020011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
80200120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
80200124:	00800044 	movi	r2,1
80200128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
8020012c:	e0fffb17 	ldw	r3,-20(fp)
80200130:	e0bffc17 	ldw	r2,-16(fp)
80200134:	1884703a 	and	r2,r3,r2
80200138:	10001426 	beq	r2,zero,8020018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
8020013c:	00a00874 	movhi	r2,32801
80200140:	10a9f804 	addi	r2,r2,-22560
80200144:	e0fffd17 	ldw	r3,-12(fp)
80200148:	180690fa 	slli	r3,r3,3
8020014c:	10c5883a 	add	r2,r2,r3
80200150:	10c00017 	ldw	r3,0(r2)
80200154:	00a00874 	movhi	r2,32801
80200158:	10a9f804 	addi	r2,r2,-22560
8020015c:	e13ffd17 	ldw	r4,-12(fp)
80200160:	200890fa 	slli	r4,r4,3
80200164:	1105883a 	add	r2,r2,r4
80200168:	10800104 	addi	r2,r2,4
8020016c:	10800017 	ldw	r2,0(r2)
80200170:	1009883a 	mov	r4,r2
80200174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
80200178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
8020017c:	0005313a 	rdctl	r2,ipending
80200180:	e0bfff15 	stw	r2,-4(fp)

  return active;
80200184:	e0bfff17 	ldw	r2,-4(fp)
80200188:	00000706 	br	802001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
8020018c:	e0bffc17 	ldw	r2,-16(fp)
80200190:	1085883a 	add	r2,r2,r2
80200194:	e0bffc15 	stw	r2,-16(fp)
      i++;
80200198:	e0bffd17 	ldw	r2,-12(fp)
8020019c:	10800044 	addi	r2,r2,1
802001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
802001a4:	003fe106 	br	8020012c <__reset+0xfa1e012c>

    active = alt_irq_pending ();
802001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
802001ac:	e0bffb17 	ldw	r2,-20(fp)
802001b0:	103fdb1e 	bne	r2,zero,80200120 <__reset+0xfa1e0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
802001b4:	0001883a 	nop
}
802001b8:	0001883a 	nop
802001bc:	e037883a 	mov	sp,fp
802001c0:	dfc00117 	ldw	ra,4(sp)
802001c4:	df000017 	ldw	fp,0(sp)
802001c8:	dec00204 	addi	sp,sp,8
802001cc:	f800283a 	ret

802001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
802001d0:	defffb04 	addi	sp,sp,-20
802001d4:	dfc00415 	stw	ra,16(sp)
802001d8:	df000315 	stw	fp,12(sp)
802001dc:	df000304 	addi	fp,sp,12
802001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
802001e4:	000531fa 	rdctl	r2,exception
802001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
802001ec:	e0bffd17 	ldw	r2,-12(fp)
802001f0:	10801f0c 	andi	r2,r2,124
802001f4:	1004d0ba 	srli	r2,r2,2
802001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
802001fc:	0005333a 	rdctl	r2,badaddr
80200200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
80200204:	d0a01a17 	ldw	r2,-32664(gp)
80200208:	10000726 	beq	r2,zero,80200228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
8020020c:	d0a01a17 	ldw	r2,-32664(gp)
80200210:	e0fffd17 	ldw	r3,-12(fp)
80200214:	e1bffe17 	ldw	r6,-8(fp)
80200218:	e17fff17 	ldw	r5,-4(fp)
8020021c:	1809883a 	mov	r4,r3
80200220:	103ee83a 	callr	r2
80200224:	00000206 	br	80200230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
80200228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
8020022c:	0005883a 	mov	r2,zero
}
80200230:	e037883a 	mov	sp,fp
80200234:	dfc00117 	ldw	ra,4(sp)
80200238:	df000017 	ldw	fp,0(sp)
8020023c:	dec00204 	addi	sp,sp,8
80200240:	f800283a 	ret

Disassembly of section .text:

80200244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
80200244:	06e00c34 	movhi	sp,32816
    ori sp, sp, %lo(__alt_stack_pointer)
80200248:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
8020024c:	06a00874 	movhi	gp,32801
    ori gp, gp, %lo(_gp)
80200250:	d689d314 	ori	gp,gp,10060
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
80200254:	00a00834 	movhi	r2,32800
    ori r2, r2, %lo(__bss_start)
80200258:	10a9e314 	ori	r2,r2,42892

    movhi r3, %hi(__bss_end)
8020025c:	00e00834 	movhi	r3,32800
    ori r3, r3, %lo(__bss_end)
80200260:	18ea3814 	ori	r3,r3,43232

    beq r2, r3, 1f
80200264:	10c00326 	beq	r2,r3,80200274 <_start+0x30>

0:
    stw zero, (r2)
80200268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
8020026c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
80200270:	10fffd36 	bltu	r2,r3,80200268 <__reset+0xfa1e0268>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
80200274:	02037380 	call	80203738 <alt_main>

80200278 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
80200278:	003fff06 	br	80200278 <__reset+0xfa1e0278>

8020027c <vRstcReleaseSimucamReset>:

//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
void vRstcReleaseSimucamReset(alt_u32 uliRstCnt) {
8020027c:	defffc04 	addi	sp,sp,-16
80200280:	dfc00315 	stw	ra,12(sp)
80200284:	df000215 	stw	fp,8(sp)
80200288:	df000204 	addi	fp,sp,8
8020028c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliReg = 0;
80200290:	e03ffe15 	stw	zero,-8(fp)

	uliReg = uliRstReadReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR, RSTC_SIMUCAM_RESET_REG_OFFSET);
80200294:	000b883a 	mov	r5,zero
80200298:	01204034 	movhi	r4,33024
8020029c:	21020004 	addi	r4,r4,2048
802002a0:	020046c0 	call	8020046c <uliRstReadReg>
802002a4:	e0bffe15 	stw	r2,-8(fp)
//	uliReg |= (alt_u32) (uliRstCnt & RSTC_SIMUCAM_RST_TMR_MSK);
	uliReg &= ~((alt_u32) RSTC_SIMUCAM_RST_CTRL_MSK);
802002a8:	e0fffe17 	ldw	r3,-8(fp)
802002ac:	00a00034 	movhi	r2,32768
802002b0:	10bfffc4 	addi	r2,r2,-1
802002b4:	1884703a 	and	r2,r3,r2
802002b8:	e0bffe15 	stw	r2,-8(fp)
	vRstcWriteReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR, RSTC_SIMUCAM_RESET_REG_OFFSET, uliReg);
802002bc:	e1bffe17 	ldw	r6,-8(fp)
802002c0:	000b883a 	mov	r5,zero
802002c4:	01204034 	movhi	r4,33024
802002c8:	21020004 	addi	r4,r4,2048
802002cc:	02004200 	call	80200420 <vRstcWriteReg>
}
802002d0:	0001883a 	nop
802002d4:	e037883a 	mov	sp,fp
802002d8:	dfc00117 	ldw	ra,4(sp)
802002dc:	df000017 	ldw	fp,0(sp)
802002e0:	dec00204 	addi	sp,sp,8
802002e4:	f800283a 	ret

802002e8 <vRstcHoldSimucamReset>:

void vRstcHoldSimucamReset(alt_u32 uliRstCnt) {
802002e8:	defffc04 	addi	sp,sp,-16
802002ec:	dfc00315 	stw	ra,12(sp)
802002f0:	df000215 	stw	fp,8(sp)
802002f4:	df000204 	addi	fp,sp,8
802002f8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliReg = 0;
802002fc:	e03ffe15 	stw	zero,-8(fp)

	uliReg = uliRstReadReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR, RSTC_SIMUCAM_RESET_REG_OFFSET);
80200300:	000b883a 	mov	r5,zero
80200304:	01204034 	movhi	r4,33024
80200308:	21020004 	addi	r4,r4,2048
8020030c:	020046c0 	call	8020046c <uliRstReadReg>
80200310:	e0bffe15 	stw	r2,-8(fp)
//	uliReg |= (alt_u32) (uliRstCnt & RSTC_SIMUCAM_RST_TMR_MSK);
	uliReg |= (alt_u32) RSTC_SIMUCAM_RST_CTRL_MSK;
80200314:	e0bffe17 	ldw	r2,-8(fp)
80200318:	10a00034 	orhi	r2,r2,32768
8020031c:	e0bffe15 	stw	r2,-8(fp)
	vRstcWriteReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR, RSTC_SIMUCAM_RESET_REG_OFFSET, uliReg);
80200320:	e1bffe17 	ldw	r6,-8(fp)
80200324:	000b883a 	mov	r5,zero
80200328:	01204034 	movhi	r4,33024
8020032c:	21020004 	addi	r4,r4,2048
80200330:	02004200 	call	80200420 <vRstcWriteReg>
}
80200334:	0001883a 	nop
80200338:	e037883a 	mov	sp,fp
8020033c:	dfc00117 	ldw	ra,4(sp)
80200340:	df000017 	ldw	fp,0(sp)
80200344:	dec00204 	addi	sp,sp,8
80200348:	f800283a 	ret

8020034c <vRstcReleaseDeviceReset>:

void vRstcReleaseDeviceReset(alt_u32 usiRstMask) {
8020034c:	defffc04 	addi	sp,sp,-16
80200350:	dfc00315 	stw	ra,12(sp)
80200354:	df000215 	stw	fp,8(sp)
80200358:	df000204 	addi	fp,sp,8
8020035c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliReg = 0;
80200360:	e03ffe15 	stw	zero,-8(fp)

	uliReg = uliRstReadReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
80200364:	01400044 	movi	r5,1
80200368:	01204034 	movhi	r4,33024
8020036c:	21020004 	addi	r4,r4,2048
80200370:	020046c0 	call	8020046c <uliRstReadReg>
80200374:	e0bffe15 	stw	r2,-8(fp)
	RSTC_DEVICE_RESET_REG_OFFSET);
	uliReg &= ~((alt_u32) usiRstMask);
80200378:	e0bfff17 	ldw	r2,-4(fp)
8020037c:	0084303a 	nor	r2,zero,r2
80200380:	e0fffe17 	ldw	r3,-8(fp)
80200384:	1884703a 	and	r2,r3,r2
80200388:	e0bffe15 	stw	r2,-8(fp)
	vRstcWriteReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
8020038c:	e1bffe17 	ldw	r6,-8(fp)
80200390:	01400044 	movi	r5,1
80200394:	01204034 	movhi	r4,33024
80200398:	21020004 	addi	r4,r4,2048
8020039c:	02004200 	call	80200420 <vRstcWriteReg>
	RSTC_DEVICE_RESET_REG_OFFSET, uliReg);
}
802003a0:	0001883a 	nop
802003a4:	e037883a 	mov	sp,fp
802003a8:	dfc00117 	ldw	ra,4(sp)
802003ac:	df000017 	ldw	fp,0(sp)
802003b0:	dec00204 	addi	sp,sp,8
802003b4:	f800283a 	ret

802003b8 <vRstcHoldDeviceReset>:

void vRstcHoldDeviceReset(alt_u32 usiRstMask) {
802003b8:	defffc04 	addi	sp,sp,-16
802003bc:	dfc00315 	stw	ra,12(sp)
802003c0:	df000215 	stw	fp,8(sp)
802003c4:	df000204 	addi	fp,sp,8
802003c8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliReg = 0;
802003cc:	e03ffe15 	stw	zero,-8(fp)

	uliReg = uliRstReadReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
802003d0:	01400044 	movi	r5,1
802003d4:	01204034 	movhi	r4,33024
802003d8:	21020004 	addi	r4,r4,2048
802003dc:	020046c0 	call	8020046c <uliRstReadReg>
802003e0:	e0bffe15 	stw	r2,-8(fp)
	RSTC_DEVICE_RESET_REG_OFFSET);
	uliReg |= (alt_u32) usiRstMask;
802003e4:	e0fffe17 	ldw	r3,-8(fp)
802003e8:	e0bfff17 	ldw	r2,-4(fp)
802003ec:	1884b03a 	or	r2,r3,r2
802003f0:	e0bffe15 	stw	r2,-8(fp)
	vRstcWriteReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
802003f4:	e1bffe17 	ldw	r6,-8(fp)
802003f8:	01400044 	movi	r5,1
802003fc:	01204034 	movhi	r4,33024
80200400:	21020004 	addi	r4,r4,2048
80200404:	02004200 	call	80200420 <vRstcWriteReg>
	RSTC_DEVICE_RESET_REG_OFFSET, uliReg);
}
80200408:	0001883a 	nop
8020040c:	e037883a 	mov	sp,fp
80200410:	dfc00117 	ldw	ra,4(sp)
80200414:	df000017 	ldw	fp,0(sp)
80200418:	dec00204 	addi	sp,sp,8
8020041c:	f800283a 	ret

80200420 <vRstcWriteReg>:
//! [public functions]

//! [private functions]
static void vRstcWriteReg(alt_u32 *puliAddr, alt_u32 uliOffset,
		alt_u32 uliValue) {
80200420:	defffc04 	addi	sp,sp,-16
80200424:	df000315 	stw	fp,12(sp)
80200428:	df000304 	addi	fp,sp,12
8020042c:	e13ffd15 	stw	r4,-12(fp)
80200430:	e17ffe15 	stw	r5,-8(fp)
80200434:	e1bfff15 	stw	r6,-4(fp)
	*(puliAddr + uliOffset) = uliValue;
80200438:	e0bffe17 	ldw	r2,-8(fp)
8020043c:	1085883a 	add	r2,r2,r2
80200440:	1085883a 	add	r2,r2,r2
80200444:	1007883a 	mov	r3,r2
80200448:	e0bffd17 	ldw	r2,-12(fp)
8020044c:	10c5883a 	add	r2,r2,r3
80200450:	e0ffff17 	ldw	r3,-4(fp)
80200454:	10c00015 	stw	r3,0(r2)
}
80200458:	0001883a 	nop
8020045c:	e037883a 	mov	sp,fp
80200460:	df000017 	ldw	fp,0(sp)
80200464:	dec00104 	addi	sp,sp,4
80200468:	f800283a 	ret

8020046c <uliRstReadReg>:

static alt_u32 uliRstReadReg(alt_u32 *puliAddr, alt_u32 uliOffset) {
8020046c:	defffc04 	addi	sp,sp,-16
80200470:	df000315 	stw	fp,12(sp)
80200474:	df000304 	addi	fp,sp,12
80200478:	e13ffe15 	stw	r4,-8(fp)
8020047c:	e17fff15 	stw	r5,-4(fp)
	alt_u32 uliValue;

	uliValue = *(puliAddr + uliOffset);
80200480:	e0bfff17 	ldw	r2,-4(fp)
80200484:	1085883a 	add	r2,r2,r2
80200488:	1085883a 	add	r2,r2,r2
8020048c:	1007883a 	mov	r3,r2
80200490:	e0bffe17 	ldw	r2,-8(fp)
80200494:	10c5883a 	add	r2,r2,r3
80200498:	10800017 	ldw	r2,0(r2)
8020049c:	e0bffd15 	stw	r2,-12(fp)
	return uliValue;
802004a0:	e0bffd17 	ldw	r2,-12(fp)
}
802004a4:	e037883a 	mov	sp,fp
802004a8:	df000017 	ldw	fp,0(sp)
802004ac:	dec00104 	addi	sp,sp,4
802004b0:	f800283a 	ret

802004b4 <main>:
#include "system.h"
#include <sys/alt_timestamp.h>
#include <unistd.h>

int main()
{
802004b4:	defffe04 	addi	sp,sp,-8
802004b8:	dfc00115 	stw	ra,4(sp)
802004bc:	df000015 	stw	fp,0(sp)
802004c0:	d839883a 	mov	fp,sp

  vRstcReleaseSimucamReset(0);
802004c4:	0009883a 	mov	r4,zero
802004c8:	020027c0 	call	8020027c <vRstcReleaseSimucamReset>

  printf("Hello from Nios II!\n");
802004cc:	01200874 	movhi	r4,32801
802004d0:	21222004 	addi	r4,r4,-30592
802004d4:	020061c0 	call	8020061c <puts>

  while (1) {
	  usleep(1000*1000*1);
802004d8:	010003f4 	movhi	r4,15
802004dc:	21109004 	addi	r4,r4,16960
802004e0:	0203a480 	call	80203a48 <usleep>
	  printf("Alive!\n");
802004e4:	01200874 	movhi	r4,32801
802004e8:	21222504 	addi	r4,r4,-30572
802004ec:	020061c0 	call	8020061c <puts>
	  usleep(1000*1000*1);
802004f0:	010003f4 	movhi	r4,15
802004f4:	21109004 	addi	r4,r4,16960
802004f8:	0203a480 	call	80203a48 <usleep>
	  printf("Alive!\n");
802004fc:	01200874 	movhi	r4,32801
80200500:	21222504 	addi	r4,r4,-30572
80200504:	020061c0 	call	8020061c <puts>
	  usleep(1000*1000*1);
80200508:	010003f4 	movhi	r4,15
8020050c:	21109004 	addi	r4,r4,16960
80200510:	0203a480 	call	80203a48 <usleep>
	  printf("Alive!\n");
80200514:	01200874 	movhi	r4,32801
80200518:	21222504 	addi	r4,r4,-30572
8020051c:	020061c0 	call	8020061c <puts>
	  usleep(1000*1000*1);
80200520:	010003f4 	movhi	r4,15
80200524:	21109004 	addi	r4,r4,16960
80200528:	0203a480 	call	80203a48 <usleep>
	  printf("Alive!\n");
8020052c:	01200874 	movhi	r4,32801
80200530:	21222504 	addi	r4,r4,-30572
80200534:	020061c0 	call	8020061c <puts>
	  usleep(1000*1000*1);
80200538:	010003f4 	movhi	r4,15
8020053c:	21109004 	addi	r4,r4,16960
80200540:	0203a480 	call	80203a48 <usleep>
	  printf("Alive!\n");
80200544:	01200874 	movhi	r4,32801
80200548:	21222504 	addi	r4,r4,-30572
8020054c:	020061c0 	call	8020061c <puts>
	  vRstcHoldSimucamReset(0);
80200550:	0009883a 	mov	r4,zero
80200554:	02002e80 	call	802002e8 <vRstcHoldSimucamReset>
  }
80200558:	003fdf06 	br	802004d8 <__reset+0xfa1e04d8>

8020055c <_puts_r>:
8020055c:	defff604 	addi	sp,sp,-40
80200560:	dc000715 	stw	r16,28(sp)
80200564:	2021883a 	mov	r16,r4
80200568:	2809883a 	mov	r4,r5
8020056c:	dc400815 	stw	r17,32(sp)
80200570:	dfc00915 	stw	ra,36(sp)
80200574:	2823883a 	mov	r17,r5
80200578:	02006300 	call	80200630 <strlen>
8020057c:	10c00044 	addi	r3,r2,1
80200580:	d8800115 	stw	r2,4(sp)
80200584:	00a00874 	movhi	r2,32801
80200588:	10a22704 	addi	r2,r2,-30564
8020058c:	d8800215 	stw	r2,8(sp)
80200590:	00800044 	movi	r2,1
80200594:	d8800315 	stw	r2,12(sp)
80200598:	00800084 	movi	r2,2
8020059c:	dc400015 	stw	r17,0(sp)
802005a0:	d8c00615 	stw	r3,24(sp)
802005a4:	dec00415 	stw	sp,16(sp)
802005a8:	d8800515 	stw	r2,20(sp)
802005ac:	80000226 	beq	r16,zero,802005b8 <_puts_r+0x5c>
802005b0:	80800e17 	ldw	r2,56(r16)
802005b4:	10001426 	beq	r2,zero,80200608 <_puts_r+0xac>
802005b8:	81400217 	ldw	r5,8(r16)
802005bc:	2880030b 	ldhu	r2,12(r5)
802005c0:	10c8000c 	andi	r3,r2,8192
802005c4:	1800061e 	bne	r3,zero,802005e0 <_puts_r+0x84>
802005c8:	29001917 	ldw	r4,100(r5)
802005cc:	00f7ffc4 	movi	r3,-8193
802005d0:	10880014 	ori	r2,r2,8192
802005d4:	20c6703a 	and	r3,r4,r3
802005d8:	2880030d 	sth	r2,12(r5)
802005dc:	28c01915 	stw	r3,100(r5)
802005e0:	d9800404 	addi	r6,sp,16
802005e4:	8009883a 	mov	r4,r16
802005e8:	0200a680 	call	80200a68 <__sfvwrite_r>
802005ec:	1000091e 	bne	r2,zero,80200614 <_puts_r+0xb8>
802005f0:	00800284 	movi	r2,10
802005f4:	dfc00917 	ldw	ra,36(sp)
802005f8:	dc400817 	ldw	r17,32(sp)
802005fc:	dc000717 	ldw	r16,28(sp)
80200600:	dec00a04 	addi	sp,sp,40
80200604:	f800283a 	ret
80200608:	8009883a 	mov	r4,r16
8020060c:	0200a180 	call	80200a18 <__sinit>
80200610:	003fe906 	br	802005b8 <__reset+0xfa1e05b8>
80200614:	00bfffc4 	movi	r2,-1
80200618:	003ff606 	br	802005f4 <__reset+0xfa1e05f4>

8020061c <puts>:
8020061c:	00a00874 	movhi	r2,32801
80200620:	10a9d404 	addi	r2,r2,-22704
80200624:	200b883a 	mov	r5,r4
80200628:	11000017 	ldw	r4,0(r2)
8020062c:	020055c1 	jmpi	8020055c <_puts_r>

80200630 <strlen>:
80200630:	208000cc 	andi	r2,r4,3
80200634:	10002026 	beq	r2,zero,802006b8 <strlen+0x88>
80200638:	20800007 	ldb	r2,0(r4)
8020063c:	10002026 	beq	r2,zero,802006c0 <strlen+0x90>
80200640:	2005883a 	mov	r2,r4
80200644:	00000206 	br	80200650 <strlen+0x20>
80200648:	10c00007 	ldb	r3,0(r2)
8020064c:	18001826 	beq	r3,zero,802006b0 <strlen+0x80>
80200650:	10800044 	addi	r2,r2,1
80200654:	10c000cc 	andi	r3,r2,3
80200658:	183ffb1e 	bne	r3,zero,80200648 <__reset+0xfa1e0648>
8020065c:	10c00017 	ldw	r3,0(r2)
80200660:	01ffbff4 	movhi	r7,65279
80200664:	39ffbfc4 	addi	r7,r7,-257
80200668:	00ca303a 	nor	r5,zero,r3
8020066c:	01a02074 	movhi	r6,32897
80200670:	19c7883a 	add	r3,r3,r7
80200674:	31a02004 	addi	r6,r6,-32640
80200678:	1946703a 	and	r3,r3,r5
8020067c:	1986703a 	and	r3,r3,r6
80200680:	1800091e 	bne	r3,zero,802006a8 <strlen+0x78>
80200684:	10800104 	addi	r2,r2,4
80200688:	10c00017 	ldw	r3,0(r2)
8020068c:	19cb883a 	add	r5,r3,r7
80200690:	00c6303a 	nor	r3,zero,r3
80200694:	28c6703a 	and	r3,r5,r3
80200698:	1986703a 	and	r3,r3,r6
8020069c:	183ff926 	beq	r3,zero,80200684 <__reset+0xfa1e0684>
802006a0:	00000106 	br	802006a8 <strlen+0x78>
802006a4:	10800044 	addi	r2,r2,1
802006a8:	10c00007 	ldb	r3,0(r2)
802006ac:	183ffd1e 	bne	r3,zero,802006a4 <__reset+0xfa1e06a4>
802006b0:	1105c83a 	sub	r2,r2,r4
802006b4:	f800283a 	ret
802006b8:	2005883a 	mov	r2,r4
802006bc:	003fe706 	br	8020065c <__reset+0xfa1e065c>
802006c0:	0005883a 	mov	r2,zero
802006c4:	f800283a 	ret

802006c8 <__fp_unlock>:
802006c8:	0005883a 	mov	r2,zero
802006cc:	f800283a 	ret

802006d0 <_cleanup_r>:
802006d0:	01600834 	movhi	r5,32800
802006d4:	29499904 	addi	r5,r5,9828
802006d8:	0200fe81 	jmpi	80200fe8 <_fwalk_reent>

802006dc <__sinit.part.1>:
802006dc:	defff704 	addi	sp,sp,-36
802006e0:	00e00834 	movhi	r3,32800
802006e4:	dfc00815 	stw	ra,32(sp)
802006e8:	ddc00715 	stw	r23,28(sp)
802006ec:	dd800615 	stw	r22,24(sp)
802006f0:	dd400515 	stw	r21,20(sp)
802006f4:	dd000415 	stw	r20,16(sp)
802006f8:	dcc00315 	stw	r19,12(sp)
802006fc:	dc800215 	stw	r18,8(sp)
80200700:	dc400115 	stw	r17,4(sp)
80200704:	dc000015 	stw	r16,0(sp)
80200708:	18c1b404 	addi	r3,r3,1744
8020070c:	24000117 	ldw	r16,4(r4)
80200710:	20c00f15 	stw	r3,60(r4)
80200714:	2080bb04 	addi	r2,r4,748
80200718:	00c000c4 	movi	r3,3
8020071c:	20c0b915 	stw	r3,740(r4)
80200720:	2080ba15 	stw	r2,744(r4)
80200724:	2000b815 	stw	zero,736(r4)
80200728:	05c00204 	movi	r23,8
8020072c:	00800104 	movi	r2,4
80200730:	2025883a 	mov	r18,r4
80200734:	b80d883a 	mov	r6,r23
80200738:	81001704 	addi	r4,r16,92
8020073c:	000b883a 	mov	r5,zero
80200740:	80000015 	stw	zero,0(r16)
80200744:	80000115 	stw	zero,4(r16)
80200748:	80000215 	stw	zero,8(r16)
8020074c:	8080030d 	sth	r2,12(r16)
80200750:	80001915 	stw	zero,100(r16)
80200754:	8000038d 	sth	zero,14(r16)
80200758:	80000415 	stw	zero,16(r16)
8020075c:	80000515 	stw	zero,20(r16)
80200760:	80000615 	stw	zero,24(r16)
80200764:	0201c400 	call	80201c40 <memset>
80200768:	05a00834 	movhi	r22,32800
8020076c:	94400217 	ldw	r17,8(r18)
80200770:	05600834 	movhi	r21,32800
80200774:	05200834 	movhi	r20,32800
80200778:	04e00834 	movhi	r19,32800
8020077c:	b588c804 	addi	r22,r22,8992
80200780:	ad48df04 	addi	r21,r21,9084
80200784:	a508fe04 	addi	r20,r20,9208
80200788:	9cc91504 	addi	r19,r19,9300
8020078c:	85800815 	stw	r22,32(r16)
80200790:	85400915 	stw	r21,36(r16)
80200794:	85000a15 	stw	r20,40(r16)
80200798:	84c00b15 	stw	r19,44(r16)
8020079c:	84000715 	stw	r16,28(r16)
802007a0:	00800284 	movi	r2,10
802007a4:	8880030d 	sth	r2,12(r17)
802007a8:	00800044 	movi	r2,1
802007ac:	b80d883a 	mov	r6,r23
802007b0:	89001704 	addi	r4,r17,92
802007b4:	000b883a 	mov	r5,zero
802007b8:	88000015 	stw	zero,0(r17)
802007bc:	88000115 	stw	zero,4(r17)
802007c0:	88000215 	stw	zero,8(r17)
802007c4:	88001915 	stw	zero,100(r17)
802007c8:	8880038d 	sth	r2,14(r17)
802007cc:	88000415 	stw	zero,16(r17)
802007d0:	88000515 	stw	zero,20(r17)
802007d4:	88000615 	stw	zero,24(r17)
802007d8:	0201c400 	call	80201c40 <memset>
802007dc:	94000317 	ldw	r16,12(r18)
802007e0:	00800484 	movi	r2,18
802007e4:	8c400715 	stw	r17,28(r17)
802007e8:	8d800815 	stw	r22,32(r17)
802007ec:	8d400915 	stw	r21,36(r17)
802007f0:	8d000a15 	stw	r20,40(r17)
802007f4:	8cc00b15 	stw	r19,44(r17)
802007f8:	8080030d 	sth	r2,12(r16)
802007fc:	00800084 	movi	r2,2
80200800:	80000015 	stw	zero,0(r16)
80200804:	80000115 	stw	zero,4(r16)
80200808:	80000215 	stw	zero,8(r16)
8020080c:	80001915 	stw	zero,100(r16)
80200810:	8080038d 	sth	r2,14(r16)
80200814:	80000415 	stw	zero,16(r16)
80200818:	80000515 	stw	zero,20(r16)
8020081c:	80000615 	stw	zero,24(r16)
80200820:	b80d883a 	mov	r6,r23
80200824:	000b883a 	mov	r5,zero
80200828:	81001704 	addi	r4,r16,92
8020082c:	0201c400 	call	80201c40 <memset>
80200830:	00800044 	movi	r2,1
80200834:	84000715 	stw	r16,28(r16)
80200838:	85800815 	stw	r22,32(r16)
8020083c:	85400915 	stw	r21,36(r16)
80200840:	85000a15 	stw	r20,40(r16)
80200844:	84c00b15 	stw	r19,44(r16)
80200848:	90800e15 	stw	r2,56(r18)
8020084c:	dfc00817 	ldw	ra,32(sp)
80200850:	ddc00717 	ldw	r23,28(sp)
80200854:	dd800617 	ldw	r22,24(sp)
80200858:	dd400517 	ldw	r21,20(sp)
8020085c:	dd000417 	ldw	r20,16(sp)
80200860:	dcc00317 	ldw	r19,12(sp)
80200864:	dc800217 	ldw	r18,8(sp)
80200868:	dc400117 	ldw	r17,4(sp)
8020086c:	dc000017 	ldw	r16,0(sp)
80200870:	dec00904 	addi	sp,sp,36
80200874:	f800283a 	ret

80200878 <__fp_lock>:
80200878:	0005883a 	mov	r2,zero
8020087c:	f800283a 	ret

80200880 <__sfmoreglue>:
80200880:	defffc04 	addi	sp,sp,-16
80200884:	dc400115 	stw	r17,4(sp)
80200888:	2c7fffc4 	addi	r17,r5,-1
8020088c:	8c401a24 	muli	r17,r17,104
80200890:	dc800215 	stw	r18,8(sp)
80200894:	2825883a 	mov	r18,r5
80200898:	89401d04 	addi	r5,r17,116
8020089c:	dc000015 	stw	r16,0(sp)
802008a0:	dfc00315 	stw	ra,12(sp)
802008a4:	02010ac0 	call	802010ac <_malloc_r>
802008a8:	1021883a 	mov	r16,r2
802008ac:	10000726 	beq	r2,zero,802008cc <__sfmoreglue+0x4c>
802008b0:	11000304 	addi	r4,r2,12
802008b4:	10000015 	stw	zero,0(r2)
802008b8:	14800115 	stw	r18,4(r2)
802008bc:	11000215 	stw	r4,8(r2)
802008c0:	89801a04 	addi	r6,r17,104
802008c4:	000b883a 	mov	r5,zero
802008c8:	0201c400 	call	80201c40 <memset>
802008cc:	8005883a 	mov	r2,r16
802008d0:	dfc00317 	ldw	ra,12(sp)
802008d4:	dc800217 	ldw	r18,8(sp)
802008d8:	dc400117 	ldw	r17,4(sp)
802008dc:	dc000017 	ldw	r16,0(sp)
802008e0:	dec00404 	addi	sp,sp,16
802008e4:	f800283a 	ret

802008e8 <__sfp>:
802008e8:	defffb04 	addi	sp,sp,-20
802008ec:	dc000015 	stw	r16,0(sp)
802008f0:	04200874 	movhi	r16,32801
802008f4:	8429d304 	addi	r16,r16,-22708
802008f8:	dcc00315 	stw	r19,12(sp)
802008fc:	2027883a 	mov	r19,r4
80200900:	81000017 	ldw	r4,0(r16)
80200904:	dfc00415 	stw	ra,16(sp)
80200908:	dc800215 	stw	r18,8(sp)
8020090c:	20800e17 	ldw	r2,56(r4)
80200910:	dc400115 	stw	r17,4(sp)
80200914:	1000021e 	bne	r2,zero,80200920 <__sfp+0x38>
80200918:	02006dc0 	call	802006dc <__sinit.part.1>
8020091c:	81000017 	ldw	r4,0(r16)
80200920:	2480b804 	addi	r18,r4,736
80200924:	047fffc4 	movi	r17,-1
80200928:	91000117 	ldw	r4,4(r18)
8020092c:	94000217 	ldw	r16,8(r18)
80200930:	213fffc4 	addi	r4,r4,-1
80200934:	20000a16 	blt	r4,zero,80200960 <__sfp+0x78>
80200938:	8080030f 	ldh	r2,12(r16)
8020093c:	10000c26 	beq	r2,zero,80200970 <__sfp+0x88>
80200940:	80c01d04 	addi	r3,r16,116
80200944:	00000206 	br	80200950 <__sfp+0x68>
80200948:	18bfe60f 	ldh	r2,-104(r3)
8020094c:	10000826 	beq	r2,zero,80200970 <__sfp+0x88>
80200950:	213fffc4 	addi	r4,r4,-1
80200954:	1c3ffd04 	addi	r16,r3,-12
80200958:	18c01a04 	addi	r3,r3,104
8020095c:	247ffa1e 	bne	r4,r17,80200948 <__reset+0xfa1e0948>
80200960:	90800017 	ldw	r2,0(r18)
80200964:	10001d26 	beq	r2,zero,802009dc <__sfp+0xf4>
80200968:	1025883a 	mov	r18,r2
8020096c:	003fee06 	br	80200928 <__reset+0xfa1e0928>
80200970:	00bfffc4 	movi	r2,-1
80200974:	8080038d 	sth	r2,14(r16)
80200978:	00800044 	movi	r2,1
8020097c:	8080030d 	sth	r2,12(r16)
80200980:	80001915 	stw	zero,100(r16)
80200984:	80000015 	stw	zero,0(r16)
80200988:	80000215 	stw	zero,8(r16)
8020098c:	80000115 	stw	zero,4(r16)
80200990:	80000415 	stw	zero,16(r16)
80200994:	80000515 	stw	zero,20(r16)
80200998:	80000615 	stw	zero,24(r16)
8020099c:	01800204 	movi	r6,8
802009a0:	000b883a 	mov	r5,zero
802009a4:	81001704 	addi	r4,r16,92
802009a8:	0201c400 	call	80201c40 <memset>
802009ac:	8005883a 	mov	r2,r16
802009b0:	80000c15 	stw	zero,48(r16)
802009b4:	80000d15 	stw	zero,52(r16)
802009b8:	80001115 	stw	zero,68(r16)
802009bc:	80001215 	stw	zero,72(r16)
802009c0:	dfc00417 	ldw	ra,16(sp)
802009c4:	dcc00317 	ldw	r19,12(sp)
802009c8:	dc800217 	ldw	r18,8(sp)
802009cc:	dc400117 	ldw	r17,4(sp)
802009d0:	dc000017 	ldw	r16,0(sp)
802009d4:	dec00504 	addi	sp,sp,20
802009d8:	f800283a 	ret
802009dc:	01400104 	movi	r5,4
802009e0:	9809883a 	mov	r4,r19
802009e4:	02008800 	call	80200880 <__sfmoreglue>
802009e8:	90800015 	stw	r2,0(r18)
802009ec:	103fde1e 	bne	r2,zero,80200968 <__reset+0xfa1e0968>
802009f0:	00800304 	movi	r2,12
802009f4:	98800015 	stw	r2,0(r19)
802009f8:	0005883a 	mov	r2,zero
802009fc:	003ff006 	br	802009c0 <__reset+0xfa1e09c0>

80200a00 <_cleanup>:
80200a00:	00a00874 	movhi	r2,32801
80200a04:	10a9d304 	addi	r2,r2,-22708
80200a08:	11000017 	ldw	r4,0(r2)
80200a0c:	01600834 	movhi	r5,32800
80200a10:	29499904 	addi	r5,r5,9828
80200a14:	0200fe81 	jmpi	80200fe8 <_fwalk_reent>

80200a18 <__sinit>:
80200a18:	20800e17 	ldw	r2,56(r4)
80200a1c:	10000126 	beq	r2,zero,80200a24 <__sinit+0xc>
80200a20:	f800283a 	ret
80200a24:	02006dc1 	jmpi	802006dc <__sinit.part.1>

80200a28 <__sfp_lock_acquire>:
80200a28:	f800283a 	ret

80200a2c <__sfp_lock_release>:
80200a2c:	f800283a 	ret

80200a30 <__sinit_lock_acquire>:
80200a30:	f800283a 	ret

80200a34 <__sinit_lock_release>:
80200a34:	f800283a 	ret

80200a38 <__fp_lock_all>:
80200a38:	00a00874 	movhi	r2,32801
80200a3c:	10a9d404 	addi	r2,r2,-22704
80200a40:	11000017 	ldw	r4,0(r2)
80200a44:	01600834 	movhi	r5,32800
80200a48:	29421e04 	addi	r5,r5,2168
80200a4c:	0200f241 	jmpi	80200f24 <_fwalk>

80200a50 <__fp_unlock_all>:
80200a50:	00a00874 	movhi	r2,32801
80200a54:	10a9d404 	addi	r2,r2,-22704
80200a58:	11000017 	ldw	r4,0(r2)
80200a5c:	01600834 	movhi	r5,32800
80200a60:	2941b204 	addi	r5,r5,1736
80200a64:	0200f241 	jmpi	80200f24 <_fwalk>

80200a68 <__sfvwrite_r>:
80200a68:	30800217 	ldw	r2,8(r6)
80200a6c:	10006726 	beq	r2,zero,80200c0c <__sfvwrite_r+0x1a4>
80200a70:	28c0030b 	ldhu	r3,12(r5)
80200a74:	defff404 	addi	sp,sp,-48
80200a78:	dd400715 	stw	r21,28(sp)
80200a7c:	dd000615 	stw	r20,24(sp)
80200a80:	dc000215 	stw	r16,8(sp)
80200a84:	dfc00b15 	stw	ra,44(sp)
80200a88:	df000a15 	stw	fp,40(sp)
80200a8c:	ddc00915 	stw	r23,36(sp)
80200a90:	dd800815 	stw	r22,32(sp)
80200a94:	dcc00515 	stw	r19,20(sp)
80200a98:	dc800415 	stw	r18,16(sp)
80200a9c:	dc400315 	stw	r17,12(sp)
80200aa0:	1880020c 	andi	r2,r3,8
80200aa4:	2821883a 	mov	r16,r5
80200aa8:	202b883a 	mov	r21,r4
80200aac:	3029883a 	mov	r20,r6
80200ab0:	10002726 	beq	r2,zero,80200b50 <__sfvwrite_r+0xe8>
80200ab4:	28800417 	ldw	r2,16(r5)
80200ab8:	10002526 	beq	r2,zero,80200b50 <__sfvwrite_r+0xe8>
80200abc:	1880008c 	andi	r2,r3,2
80200ac0:	a4400017 	ldw	r17,0(r20)
80200ac4:	10002a26 	beq	r2,zero,80200b70 <__sfvwrite_r+0x108>
80200ac8:	05a00034 	movhi	r22,32768
80200acc:	0027883a 	mov	r19,zero
80200ad0:	0025883a 	mov	r18,zero
80200ad4:	b5bf0004 	addi	r22,r22,-1024
80200ad8:	980d883a 	mov	r6,r19
80200adc:	a809883a 	mov	r4,r21
80200ae0:	90004626 	beq	r18,zero,80200bfc <__sfvwrite_r+0x194>
80200ae4:	900f883a 	mov	r7,r18
80200ae8:	b480022e 	bgeu	r22,r18,80200af4 <__sfvwrite_r+0x8c>
80200aec:	01e00034 	movhi	r7,32768
80200af0:	39ff0004 	addi	r7,r7,-1024
80200af4:	80800917 	ldw	r2,36(r16)
80200af8:	81400717 	ldw	r5,28(r16)
80200afc:	103ee83a 	callr	r2
80200b00:	0080570e 	bge	zero,r2,80200c60 <__sfvwrite_r+0x1f8>
80200b04:	a0c00217 	ldw	r3,8(r20)
80200b08:	98a7883a 	add	r19,r19,r2
80200b0c:	90a5c83a 	sub	r18,r18,r2
80200b10:	1885c83a 	sub	r2,r3,r2
80200b14:	a0800215 	stw	r2,8(r20)
80200b18:	103fef1e 	bne	r2,zero,80200ad8 <__reset+0xfa1e0ad8>
80200b1c:	0005883a 	mov	r2,zero
80200b20:	dfc00b17 	ldw	ra,44(sp)
80200b24:	df000a17 	ldw	fp,40(sp)
80200b28:	ddc00917 	ldw	r23,36(sp)
80200b2c:	dd800817 	ldw	r22,32(sp)
80200b30:	dd400717 	ldw	r21,28(sp)
80200b34:	dd000617 	ldw	r20,24(sp)
80200b38:	dcc00517 	ldw	r19,20(sp)
80200b3c:	dc800417 	ldw	r18,16(sp)
80200b40:	dc400317 	ldw	r17,12(sp)
80200b44:	dc000217 	ldw	r16,8(sp)
80200b48:	dec00c04 	addi	sp,sp,48
80200b4c:	f800283a 	ret
80200b50:	800b883a 	mov	r5,r16
80200b54:	a809883a 	mov	r4,r21
80200b58:	02024bc0 	call	802024bc <__swsetup_r>
80200b5c:	1000eb1e 	bne	r2,zero,80200f0c <__sfvwrite_r+0x4a4>
80200b60:	80c0030b 	ldhu	r3,12(r16)
80200b64:	a4400017 	ldw	r17,0(r20)
80200b68:	1880008c 	andi	r2,r3,2
80200b6c:	103fd61e 	bne	r2,zero,80200ac8 <__reset+0xfa1e0ac8>
80200b70:	1880004c 	andi	r2,r3,1
80200b74:	10003f1e 	bne	r2,zero,80200c74 <__sfvwrite_r+0x20c>
80200b78:	0039883a 	mov	fp,zero
80200b7c:	0025883a 	mov	r18,zero
80200b80:	90001a26 	beq	r18,zero,80200bec <__sfvwrite_r+0x184>
80200b84:	1880800c 	andi	r2,r3,512
80200b88:	84c00217 	ldw	r19,8(r16)
80200b8c:	10002126 	beq	r2,zero,80200c14 <__sfvwrite_r+0x1ac>
80200b90:	982f883a 	mov	r23,r19
80200b94:	94c09336 	bltu	r18,r19,80200de4 <__sfvwrite_r+0x37c>
80200b98:	1881200c 	andi	r2,r3,1152
80200b9c:	10009e1e 	bne	r2,zero,80200e18 <__sfvwrite_r+0x3b0>
80200ba0:	81000017 	ldw	r4,0(r16)
80200ba4:	b80d883a 	mov	r6,r23
80200ba8:	e00b883a 	mov	r5,fp
80200bac:	0201ae40 	call	80201ae4 <memmove>
80200bb0:	80c00217 	ldw	r3,8(r16)
80200bb4:	81000017 	ldw	r4,0(r16)
80200bb8:	9005883a 	mov	r2,r18
80200bbc:	1ce7c83a 	sub	r19,r3,r19
80200bc0:	25cf883a 	add	r7,r4,r23
80200bc4:	84c00215 	stw	r19,8(r16)
80200bc8:	81c00015 	stw	r7,0(r16)
80200bcc:	a0c00217 	ldw	r3,8(r20)
80200bd0:	e0b9883a 	add	fp,fp,r2
80200bd4:	90a5c83a 	sub	r18,r18,r2
80200bd8:	18a7c83a 	sub	r19,r3,r2
80200bdc:	a4c00215 	stw	r19,8(r20)
80200be0:	983fce26 	beq	r19,zero,80200b1c <__reset+0xfa1e0b1c>
80200be4:	80c0030b 	ldhu	r3,12(r16)
80200be8:	903fe61e 	bne	r18,zero,80200b84 <__reset+0xfa1e0b84>
80200bec:	8f000017 	ldw	fp,0(r17)
80200bf0:	8c800117 	ldw	r18,4(r17)
80200bf4:	8c400204 	addi	r17,r17,8
80200bf8:	003fe106 	br	80200b80 <__reset+0xfa1e0b80>
80200bfc:	8cc00017 	ldw	r19,0(r17)
80200c00:	8c800117 	ldw	r18,4(r17)
80200c04:	8c400204 	addi	r17,r17,8
80200c08:	003fb306 	br	80200ad8 <__reset+0xfa1e0ad8>
80200c0c:	0005883a 	mov	r2,zero
80200c10:	f800283a 	ret
80200c14:	81000017 	ldw	r4,0(r16)
80200c18:	80800417 	ldw	r2,16(r16)
80200c1c:	11005736 	bltu	r2,r4,80200d7c <__sfvwrite_r+0x314>
80200c20:	85c00517 	ldw	r23,20(r16)
80200c24:	95c05536 	bltu	r18,r23,80200d7c <__sfvwrite_r+0x314>
80200c28:	00a00034 	movhi	r2,32768
80200c2c:	10bfffc4 	addi	r2,r2,-1
80200c30:	9009883a 	mov	r4,r18
80200c34:	1480012e 	bgeu	r2,r18,80200c3c <__sfvwrite_r+0x1d4>
80200c38:	1009883a 	mov	r4,r2
80200c3c:	b80b883a 	mov	r5,r23
80200c40:	02031700 	call	80203170 <__divsi3>
80200c44:	15cf383a 	mul	r7,r2,r23
80200c48:	81400717 	ldw	r5,28(r16)
80200c4c:	80800917 	ldw	r2,36(r16)
80200c50:	e00d883a 	mov	r6,fp
80200c54:	a809883a 	mov	r4,r21
80200c58:	103ee83a 	callr	r2
80200c5c:	00bfdb16 	blt	zero,r2,80200bcc <__reset+0xfa1e0bcc>
80200c60:	8080030b 	ldhu	r2,12(r16)
80200c64:	10801014 	ori	r2,r2,64
80200c68:	8080030d 	sth	r2,12(r16)
80200c6c:	00bfffc4 	movi	r2,-1
80200c70:	003fab06 	br	80200b20 <__reset+0xfa1e0b20>
80200c74:	0027883a 	mov	r19,zero
80200c78:	0011883a 	mov	r8,zero
80200c7c:	0039883a 	mov	fp,zero
80200c80:	0025883a 	mov	r18,zero
80200c84:	90001f26 	beq	r18,zero,80200d04 <__sfvwrite_r+0x29c>
80200c88:	40005a26 	beq	r8,zero,80200df4 <__sfvwrite_r+0x38c>
80200c8c:	982d883a 	mov	r22,r19
80200c90:	94c0012e 	bgeu	r18,r19,80200c98 <__sfvwrite_r+0x230>
80200c94:	902d883a 	mov	r22,r18
80200c98:	81000017 	ldw	r4,0(r16)
80200c9c:	80800417 	ldw	r2,16(r16)
80200ca0:	b02f883a 	mov	r23,r22
80200ca4:	81c00517 	ldw	r7,20(r16)
80200ca8:	1100032e 	bgeu	r2,r4,80200cb8 <__sfvwrite_r+0x250>
80200cac:	80c00217 	ldw	r3,8(r16)
80200cb0:	38c7883a 	add	r3,r7,r3
80200cb4:	1d801816 	blt	r3,r22,80200d18 <__sfvwrite_r+0x2b0>
80200cb8:	b1c03e16 	blt	r22,r7,80200db4 <__sfvwrite_r+0x34c>
80200cbc:	80800917 	ldw	r2,36(r16)
80200cc0:	81400717 	ldw	r5,28(r16)
80200cc4:	e00d883a 	mov	r6,fp
80200cc8:	da000115 	stw	r8,4(sp)
80200ccc:	a809883a 	mov	r4,r21
80200cd0:	103ee83a 	callr	r2
80200cd4:	102f883a 	mov	r23,r2
80200cd8:	da000117 	ldw	r8,4(sp)
80200cdc:	00bfe00e 	bge	zero,r2,80200c60 <__reset+0xfa1e0c60>
80200ce0:	9de7c83a 	sub	r19,r19,r23
80200ce4:	98001f26 	beq	r19,zero,80200d64 <__sfvwrite_r+0x2fc>
80200ce8:	a0800217 	ldw	r2,8(r20)
80200cec:	e5f9883a 	add	fp,fp,r23
80200cf0:	95e5c83a 	sub	r18,r18,r23
80200cf4:	15efc83a 	sub	r23,r2,r23
80200cf8:	a5c00215 	stw	r23,8(r20)
80200cfc:	b83f8726 	beq	r23,zero,80200b1c <__reset+0xfa1e0b1c>
80200d00:	903fe11e 	bne	r18,zero,80200c88 <__reset+0xfa1e0c88>
80200d04:	8f000017 	ldw	fp,0(r17)
80200d08:	8c800117 	ldw	r18,4(r17)
80200d0c:	0011883a 	mov	r8,zero
80200d10:	8c400204 	addi	r17,r17,8
80200d14:	003fdb06 	br	80200c84 <__reset+0xfa1e0c84>
80200d18:	180d883a 	mov	r6,r3
80200d1c:	e00b883a 	mov	r5,fp
80200d20:	da000115 	stw	r8,4(sp)
80200d24:	d8c00015 	stw	r3,0(sp)
80200d28:	0201ae40 	call	80201ae4 <memmove>
80200d2c:	d8c00017 	ldw	r3,0(sp)
80200d30:	80800017 	ldw	r2,0(r16)
80200d34:	800b883a 	mov	r5,r16
80200d38:	a809883a 	mov	r4,r21
80200d3c:	10c5883a 	add	r2,r2,r3
80200d40:	80800015 	stw	r2,0(r16)
80200d44:	d8c00015 	stw	r3,0(sp)
80200d48:	02029840 	call	80202984 <_fflush_r>
80200d4c:	d8c00017 	ldw	r3,0(sp)
80200d50:	da000117 	ldw	r8,4(sp)
80200d54:	103fc21e 	bne	r2,zero,80200c60 <__reset+0xfa1e0c60>
80200d58:	182f883a 	mov	r23,r3
80200d5c:	9de7c83a 	sub	r19,r19,r23
80200d60:	983fe11e 	bne	r19,zero,80200ce8 <__reset+0xfa1e0ce8>
80200d64:	800b883a 	mov	r5,r16
80200d68:	a809883a 	mov	r4,r21
80200d6c:	02029840 	call	80202984 <_fflush_r>
80200d70:	103fbb1e 	bne	r2,zero,80200c60 <__reset+0xfa1e0c60>
80200d74:	0011883a 	mov	r8,zero
80200d78:	003fdb06 	br	80200ce8 <__reset+0xfa1e0ce8>
80200d7c:	94c0012e 	bgeu	r18,r19,80200d84 <__sfvwrite_r+0x31c>
80200d80:	9027883a 	mov	r19,r18
80200d84:	980d883a 	mov	r6,r19
80200d88:	e00b883a 	mov	r5,fp
80200d8c:	0201ae40 	call	80201ae4 <memmove>
80200d90:	80800217 	ldw	r2,8(r16)
80200d94:	80c00017 	ldw	r3,0(r16)
80200d98:	14c5c83a 	sub	r2,r2,r19
80200d9c:	1cc7883a 	add	r3,r3,r19
80200da0:	80800215 	stw	r2,8(r16)
80200da4:	80c00015 	stw	r3,0(r16)
80200da8:	10004326 	beq	r2,zero,80200eb8 <__sfvwrite_r+0x450>
80200dac:	9805883a 	mov	r2,r19
80200db0:	003f8606 	br	80200bcc <__reset+0xfa1e0bcc>
80200db4:	b00d883a 	mov	r6,r22
80200db8:	e00b883a 	mov	r5,fp
80200dbc:	da000115 	stw	r8,4(sp)
80200dc0:	0201ae40 	call	80201ae4 <memmove>
80200dc4:	80800217 	ldw	r2,8(r16)
80200dc8:	80c00017 	ldw	r3,0(r16)
80200dcc:	da000117 	ldw	r8,4(sp)
80200dd0:	1585c83a 	sub	r2,r2,r22
80200dd4:	1dad883a 	add	r22,r3,r22
80200dd8:	80800215 	stw	r2,8(r16)
80200ddc:	85800015 	stw	r22,0(r16)
80200de0:	003fbf06 	br	80200ce0 <__reset+0xfa1e0ce0>
80200de4:	81000017 	ldw	r4,0(r16)
80200de8:	9027883a 	mov	r19,r18
80200dec:	902f883a 	mov	r23,r18
80200df0:	003f6c06 	br	80200ba4 <__reset+0xfa1e0ba4>
80200df4:	900d883a 	mov	r6,r18
80200df8:	01400284 	movi	r5,10
80200dfc:	e009883a 	mov	r4,fp
80200e00:	02018b80 	call	802018b8 <memchr>
80200e04:	10003e26 	beq	r2,zero,80200f00 <__sfvwrite_r+0x498>
80200e08:	10800044 	addi	r2,r2,1
80200e0c:	1727c83a 	sub	r19,r2,fp
80200e10:	02000044 	movi	r8,1
80200e14:	003f9d06 	br	80200c8c <__reset+0xfa1e0c8c>
80200e18:	80800517 	ldw	r2,20(r16)
80200e1c:	81400417 	ldw	r5,16(r16)
80200e20:	81c00017 	ldw	r7,0(r16)
80200e24:	10a7883a 	add	r19,r2,r2
80200e28:	9885883a 	add	r2,r19,r2
80200e2c:	1026d7fa 	srli	r19,r2,31
80200e30:	396dc83a 	sub	r22,r7,r5
80200e34:	b1000044 	addi	r4,r22,1
80200e38:	9885883a 	add	r2,r19,r2
80200e3c:	1027d07a 	srai	r19,r2,1
80200e40:	2485883a 	add	r2,r4,r18
80200e44:	980d883a 	mov	r6,r19
80200e48:	9880022e 	bgeu	r19,r2,80200e54 <__sfvwrite_r+0x3ec>
80200e4c:	1027883a 	mov	r19,r2
80200e50:	100d883a 	mov	r6,r2
80200e54:	18c1000c 	andi	r3,r3,1024
80200e58:	18001c26 	beq	r3,zero,80200ecc <__sfvwrite_r+0x464>
80200e5c:	300b883a 	mov	r5,r6
80200e60:	a809883a 	mov	r4,r21
80200e64:	02010ac0 	call	802010ac <_malloc_r>
80200e68:	102f883a 	mov	r23,r2
80200e6c:	10002926 	beq	r2,zero,80200f14 <__sfvwrite_r+0x4ac>
80200e70:	81400417 	ldw	r5,16(r16)
80200e74:	b00d883a 	mov	r6,r22
80200e78:	1009883a 	mov	r4,r2
80200e7c:	020199c0 	call	8020199c <memcpy>
80200e80:	8080030b 	ldhu	r2,12(r16)
80200e84:	00fedfc4 	movi	r3,-1153
80200e88:	10c4703a 	and	r2,r2,r3
80200e8c:	10802014 	ori	r2,r2,128
80200e90:	8080030d 	sth	r2,12(r16)
80200e94:	bd89883a 	add	r4,r23,r22
80200e98:	9d8fc83a 	sub	r7,r19,r22
80200e9c:	85c00415 	stw	r23,16(r16)
80200ea0:	84c00515 	stw	r19,20(r16)
80200ea4:	81000015 	stw	r4,0(r16)
80200ea8:	9027883a 	mov	r19,r18
80200eac:	81c00215 	stw	r7,8(r16)
80200eb0:	902f883a 	mov	r23,r18
80200eb4:	003f3b06 	br	80200ba4 <__reset+0xfa1e0ba4>
80200eb8:	800b883a 	mov	r5,r16
80200ebc:	a809883a 	mov	r4,r21
80200ec0:	02029840 	call	80202984 <_fflush_r>
80200ec4:	103fb926 	beq	r2,zero,80200dac <__reset+0xfa1e0dac>
80200ec8:	003f6506 	br	80200c60 <__reset+0xfa1e0c60>
80200ecc:	a809883a 	mov	r4,r21
80200ed0:	0201d680 	call	80201d68 <_realloc_r>
80200ed4:	102f883a 	mov	r23,r2
80200ed8:	103fee1e 	bne	r2,zero,80200e94 <__reset+0xfa1e0e94>
80200edc:	81400417 	ldw	r5,16(r16)
80200ee0:	a809883a 	mov	r4,r21
80200ee4:	0202b340 	call	80202b34 <_free_r>
80200ee8:	8080030b 	ldhu	r2,12(r16)
80200eec:	00ffdfc4 	movi	r3,-129
80200ef0:	1884703a 	and	r2,r3,r2
80200ef4:	00c00304 	movi	r3,12
80200ef8:	a8c00015 	stw	r3,0(r21)
80200efc:	003f5906 	br	80200c64 <__reset+0xfa1e0c64>
80200f00:	94c00044 	addi	r19,r18,1
80200f04:	02000044 	movi	r8,1
80200f08:	003f6006 	br	80200c8c <__reset+0xfa1e0c8c>
80200f0c:	00bfffc4 	movi	r2,-1
80200f10:	003f0306 	br	80200b20 <__reset+0xfa1e0b20>
80200f14:	00800304 	movi	r2,12
80200f18:	a8800015 	stw	r2,0(r21)
80200f1c:	8080030b 	ldhu	r2,12(r16)
80200f20:	003f5006 	br	80200c64 <__reset+0xfa1e0c64>

80200f24 <_fwalk>:
80200f24:	defff704 	addi	sp,sp,-36
80200f28:	dd000415 	stw	r20,16(sp)
80200f2c:	dfc00815 	stw	ra,32(sp)
80200f30:	ddc00715 	stw	r23,28(sp)
80200f34:	dd800615 	stw	r22,24(sp)
80200f38:	dd400515 	stw	r21,20(sp)
80200f3c:	dcc00315 	stw	r19,12(sp)
80200f40:	dc800215 	stw	r18,8(sp)
80200f44:	dc400115 	stw	r17,4(sp)
80200f48:	dc000015 	stw	r16,0(sp)
80200f4c:	2500b804 	addi	r20,r4,736
80200f50:	a0002326 	beq	r20,zero,80200fe0 <_fwalk+0xbc>
80200f54:	282b883a 	mov	r21,r5
80200f58:	002f883a 	mov	r23,zero
80200f5c:	05800044 	movi	r22,1
80200f60:	04ffffc4 	movi	r19,-1
80200f64:	a4400117 	ldw	r17,4(r20)
80200f68:	a4800217 	ldw	r18,8(r20)
80200f6c:	8c7fffc4 	addi	r17,r17,-1
80200f70:	88000d16 	blt	r17,zero,80200fa8 <_fwalk+0x84>
80200f74:	94000304 	addi	r16,r18,12
80200f78:	94800384 	addi	r18,r18,14
80200f7c:	8080000b 	ldhu	r2,0(r16)
80200f80:	8c7fffc4 	addi	r17,r17,-1
80200f84:	813ffd04 	addi	r4,r16,-12
80200f88:	b080042e 	bgeu	r22,r2,80200f9c <_fwalk+0x78>
80200f8c:	9080000f 	ldh	r2,0(r18)
80200f90:	14c00226 	beq	r2,r19,80200f9c <_fwalk+0x78>
80200f94:	a83ee83a 	callr	r21
80200f98:	b8aeb03a 	or	r23,r23,r2
80200f9c:	84001a04 	addi	r16,r16,104
80200fa0:	94801a04 	addi	r18,r18,104
80200fa4:	8cfff51e 	bne	r17,r19,80200f7c <__reset+0xfa1e0f7c>
80200fa8:	a5000017 	ldw	r20,0(r20)
80200fac:	a03fed1e 	bne	r20,zero,80200f64 <__reset+0xfa1e0f64>
80200fb0:	b805883a 	mov	r2,r23
80200fb4:	dfc00817 	ldw	ra,32(sp)
80200fb8:	ddc00717 	ldw	r23,28(sp)
80200fbc:	dd800617 	ldw	r22,24(sp)
80200fc0:	dd400517 	ldw	r21,20(sp)
80200fc4:	dd000417 	ldw	r20,16(sp)
80200fc8:	dcc00317 	ldw	r19,12(sp)
80200fcc:	dc800217 	ldw	r18,8(sp)
80200fd0:	dc400117 	ldw	r17,4(sp)
80200fd4:	dc000017 	ldw	r16,0(sp)
80200fd8:	dec00904 	addi	sp,sp,36
80200fdc:	f800283a 	ret
80200fe0:	002f883a 	mov	r23,zero
80200fe4:	003ff206 	br	80200fb0 <__reset+0xfa1e0fb0>

80200fe8 <_fwalk_reent>:
80200fe8:	defff704 	addi	sp,sp,-36
80200fec:	dd000415 	stw	r20,16(sp)
80200ff0:	dfc00815 	stw	ra,32(sp)
80200ff4:	ddc00715 	stw	r23,28(sp)
80200ff8:	dd800615 	stw	r22,24(sp)
80200ffc:	dd400515 	stw	r21,20(sp)
80201000:	dcc00315 	stw	r19,12(sp)
80201004:	dc800215 	stw	r18,8(sp)
80201008:	dc400115 	stw	r17,4(sp)
8020100c:	dc000015 	stw	r16,0(sp)
80201010:	2500b804 	addi	r20,r4,736
80201014:	a0002326 	beq	r20,zero,802010a4 <_fwalk_reent+0xbc>
80201018:	282b883a 	mov	r21,r5
8020101c:	2027883a 	mov	r19,r4
80201020:	002f883a 	mov	r23,zero
80201024:	05800044 	movi	r22,1
80201028:	04bfffc4 	movi	r18,-1
8020102c:	a4400117 	ldw	r17,4(r20)
80201030:	a4000217 	ldw	r16,8(r20)
80201034:	8c7fffc4 	addi	r17,r17,-1
80201038:	88000c16 	blt	r17,zero,8020106c <_fwalk_reent+0x84>
8020103c:	84000304 	addi	r16,r16,12
80201040:	8080000b 	ldhu	r2,0(r16)
80201044:	8c7fffc4 	addi	r17,r17,-1
80201048:	817ffd04 	addi	r5,r16,-12
8020104c:	b080052e 	bgeu	r22,r2,80201064 <_fwalk_reent+0x7c>
80201050:	8080008f 	ldh	r2,2(r16)
80201054:	9809883a 	mov	r4,r19
80201058:	14800226 	beq	r2,r18,80201064 <_fwalk_reent+0x7c>
8020105c:	a83ee83a 	callr	r21
80201060:	b8aeb03a 	or	r23,r23,r2
80201064:	84001a04 	addi	r16,r16,104
80201068:	8cbff51e 	bne	r17,r18,80201040 <__reset+0xfa1e1040>
8020106c:	a5000017 	ldw	r20,0(r20)
80201070:	a03fee1e 	bne	r20,zero,8020102c <__reset+0xfa1e102c>
80201074:	b805883a 	mov	r2,r23
80201078:	dfc00817 	ldw	ra,32(sp)
8020107c:	ddc00717 	ldw	r23,28(sp)
80201080:	dd800617 	ldw	r22,24(sp)
80201084:	dd400517 	ldw	r21,20(sp)
80201088:	dd000417 	ldw	r20,16(sp)
8020108c:	dcc00317 	ldw	r19,12(sp)
80201090:	dc800217 	ldw	r18,8(sp)
80201094:	dc400117 	ldw	r17,4(sp)
80201098:	dc000017 	ldw	r16,0(sp)
8020109c:	dec00904 	addi	sp,sp,36
802010a0:	f800283a 	ret
802010a4:	002f883a 	mov	r23,zero
802010a8:	003ff206 	br	80201074 <__reset+0xfa1e1074>

802010ac <_malloc_r>:
802010ac:	defff504 	addi	sp,sp,-44
802010b0:	dc800315 	stw	r18,12(sp)
802010b4:	dfc00a15 	stw	ra,40(sp)
802010b8:	df000915 	stw	fp,36(sp)
802010bc:	ddc00815 	stw	r23,32(sp)
802010c0:	dd800715 	stw	r22,28(sp)
802010c4:	dd400615 	stw	r21,24(sp)
802010c8:	dd000515 	stw	r20,20(sp)
802010cc:	dcc00415 	stw	r19,16(sp)
802010d0:	dc400215 	stw	r17,8(sp)
802010d4:	dc000115 	stw	r16,4(sp)
802010d8:	288002c4 	addi	r2,r5,11
802010dc:	00c00584 	movi	r3,22
802010e0:	2025883a 	mov	r18,r4
802010e4:	18807f2e 	bgeu	r3,r2,802012e4 <_malloc_r+0x238>
802010e8:	047ffe04 	movi	r17,-8
802010ec:	1462703a 	and	r17,r2,r17
802010f0:	8800a316 	blt	r17,zero,80201380 <_malloc_r+0x2d4>
802010f4:	8940a236 	bltu	r17,r5,80201380 <_malloc_r+0x2d4>
802010f8:	02037b40 	call	802037b4 <__malloc_lock>
802010fc:	00807dc4 	movi	r2,503
80201100:	1441e92e 	bgeu	r2,r17,802018a8 <_malloc_r+0x7fc>
80201104:	8804d27a 	srli	r2,r17,9
80201108:	1000a126 	beq	r2,zero,80201390 <_malloc_r+0x2e4>
8020110c:	00c00104 	movi	r3,4
80201110:	18811e36 	bltu	r3,r2,8020158c <_malloc_r+0x4e0>
80201114:	8804d1ba 	srli	r2,r17,6
80201118:	12000e44 	addi	r8,r2,57
8020111c:	11c00e04 	addi	r7,r2,56
80201120:	4209883a 	add	r4,r8,r8
80201124:	04e00874 	movhi	r19,32801
80201128:	2109883a 	add	r4,r4,r4
8020112c:	9ce3dd04 	addi	r19,r19,-28812
80201130:	2109883a 	add	r4,r4,r4
80201134:	9909883a 	add	r4,r19,r4
80201138:	24000117 	ldw	r16,4(r4)
8020113c:	213ffe04 	addi	r4,r4,-8
80201140:	24009726 	beq	r4,r16,802013a0 <_malloc_r+0x2f4>
80201144:	80800117 	ldw	r2,4(r16)
80201148:	01bfff04 	movi	r6,-4
8020114c:	014003c4 	movi	r5,15
80201150:	1184703a 	and	r2,r2,r6
80201154:	1447c83a 	sub	r3,r2,r17
80201158:	28c00716 	blt	r5,r3,80201178 <_malloc_r+0xcc>
8020115c:	1800920e 	bge	r3,zero,802013a8 <_malloc_r+0x2fc>
80201160:	84000317 	ldw	r16,12(r16)
80201164:	24008e26 	beq	r4,r16,802013a0 <_malloc_r+0x2f4>
80201168:	80800117 	ldw	r2,4(r16)
8020116c:	1184703a 	and	r2,r2,r6
80201170:	1447c83a 	sub	r3,r2,r17
80201174:	28fff90e 	bge	r5,r3,8020115c <__reset+0xfa1e115c>
80201178:	3809883a 	mov	r4,r7
8020117c:	01a00874 	movhi	r6,32801
80201180:	9c000417 	ldw	r16,16(r19)
80201184:	31a3dd04 	addi	r6,r6,-28812
80201188:	32000204 	addi	r8,r6,8
8020118c:	82013426 	beq	r16,r8,80201660 <_malloc_r+0x5b4>
80201190:	80c00117 	ldw	r3,4(r16)
80201194:	00bfff04 	movi	r2,-4
80201198:	188e703a 	and	r7,r3,r2
8020119c:	3c45c83a 	sub	r2,r7,r17
802011a0:	00c003c4 	movi	r3,15
802011a4:	18811f16 	blt	r3,r2,80201624 <_malloc_r+0x578>
802011a8:	32000515 	stw	r8,20(r6)
802011ac:	32000415 	stw	r8,16(r6)
802011b0:	10007f0e 	bge	r2,zero,802013b0 <_malloc_r+0x304>
802011b4:	00807fc4 	movi	r2,511
802011b8:	11c0fd36 	bltu	r2,r7,802015b0 <_malloc_r+0x504>
802011bc:	3806d0fa 	srli	r3,r7,3
802011c0:	01c00044 	movi	r7,1
802011c4:	30800117 	ldw	r2,4(r6)
802011c8:	19400044 	addi	r5,r3,1
802011cc:	294b883a 	add	r5,r5,r5
802011d0:	1807d0ba 	srai	r3,r3,2
802011d4:	294b883a 	add	r5,r5,r5
802011d8:	294b883a 	add	r5,r5,r5
802011dc:	298b883a 	add	r5,r5,r6
802011e0:	38c6983a 	sll	r3,r7,r3
802011e4:	29c00017 	ldw	r7,0(r5)
802011e8:	2a7ffe04 	addi	r9,r5,-8
802011ec:	1886b03a 	or	r3,r3,r2
802011f0:	82400315 	stw	r9,12(r16)
802011f4:	81c00215 	stw	r7,8(r16)
802011f8:	30c00115 	stw	r3,4(r6)
802011fc:	2c000015 	stw	r16,0(r5)
80201200:	3c000315 	stw	r16,12(r7)
80201204:	2005d0ba 	srai	r2,r4,2
80201208:	01400044 	movi	r5,1
8020120c:	288a983a 	sll	r5,r5,r2
80201210:	19406f36 	bltu	r3,r5,802013d0 <_malloc_r+0x324>
80201214:	28c4703a 	and	r2,r5,r3
80201218:	10000a1e 	bne	r2,zero,80201244 <_malloc_r+0x198>
8020121c:	00bfff04 	movi	r2,-4
80201220:	294b883a 	add	r5,r5,r5
80201224:	2088703a 	and	r4,r4,r2
80201228:	28c4703a 	and	r2,r5,r3
8020122c:	21000104 	addi	r4,r4,4
80201230:	1000041e 	bne	r2,zero,80201244 <_malloc_r+0x198>
80201234:	294b883a 	add	r5,r5,r5
80201238:	28c4703a 	and	r2,r5,r3
8020123c:	21000104 	addi	r4,r4,4
80201240:	103ffc26 	beq	r2,zero,80201234 <__reset+0xfa1e1234>
80201244:	02bfff04 	movi	r10,-4
80201248:	024003c4 	movi	r9,15
8020124c:	21800044 	addi	r6,r4,1
80201250:	318d883a 	add	r6,r6,r6
80201254:	318d883a 	add	r6,r6,r6
80201258:	318d883a 	add	r6,r6,r6
8020125c:	998d883a 	add	r6,r19,r6
80201260:	333ffe04 	addi	r12,r6,-8
80201264:	2017883a 	mov	r11,r4
80201268:	31800104 	addi	r6,r6,4
8020126c:	34000017 	ldw	r16,0(r6)
80201270:	31fffd04 	addi	r7,r6,-12
80201274:	81c0041e 	bne	r16,r7,80201288 <_malloc_r+0x1dc>
80201278:	0000fb06 	br	80201668 <_malloc_r+0x5bc>
8020127c:	1801030e 	bge	r3,zero,8020168c <_malloc_r+0x5e0>
80201280:	84000317 	ldw	r16,12(r16)
80201284:	81c0f826 	beq	r16,r7,80201668 <_malloc_r+0x5bc>
80201288:	80800117 	ldw	r2,4(r16)
8020128c:	1284703a 	and	r2,r2,r10
80201290:	1447c83a 	sub	r3,r2,r17
80201294:	48fff90e 	bge	r9,r3,8020127c <__reset+0xfa1e127c>
80201298:	80800317 	ldw	r2,12(r16)
8020129c:	81000217 	ldw	r4,8(r16)
802012a0:	89400054 	ori	r5,r17,1
802012a4:	81400115 	stw	r5,4(r16)
802012a8:	20800315 	stw	r2,12(r4)
802012ac:	11000215 	stw	r4,8(r2)
802012b0:	8463883a 	add	r17,r16,r17
802012b4:	9c400515 	stw	r17,20(r19)
802012b8:	9c400415 	stw	r17,16(r19)
802012bc:	18800054 	ori	r2,r3,1
802012c0:	88800115 	stw	r2,4(r17)
802012c4:	8a000315 	stw	r8,12(r17)
802012c8:	8a000215 	stw	r8,8(r17)
802012cc:	88e3883a 	add	r17,r17,r3
802012d0:	88c00015 	stw	r3,0(r17)
802012d4:	9009883a 	mov	r4,r18
802012d8:	02037d80 	call	802037d8 <__malloc_unlock>
802012dc:	80800204 	addi	r2,r16,8
802012e0:	00001b06 	br	80201350 <_malloc_r+0x2a4>
802012e4:	04400404 	movi	r17,16
802012e8:	89402536 	bltu	r17,r5,80201380 <_malloc_r+0x2d4>
802012ec:	02037b40 	call	802037b4 <__malloc_lock>
802012f0:	00800184 	movi	r2,6
802012f4:	01000084 	movi	r4,2
802012f8:	04e00874 	movhi	r19,32801
802012fc:	1085883a 	add	r2,r2,r2
80201300:	9ce3dd04 	addi	r19,r19,-28812
80201304:	1085883a 	add	r2,r2,r2
80201308:	9885883a 	add	r2,r19,r2
8020130c:	14000117 	ldw	r16,4(r2)
80201310:	10fffe04 	addi	r3,r2,-8
80201314:	80c0d926 	beq	r16,r3,8020167c <_malloc_r+0x5d0>
80201318:	80c00117 	ldw	r3,4(r16)
8020131c:	81000317 	ldw	r4,12(r16)
80201320:	00bfff04 	movi	r2,-4
80201324:	1884703a 	and	r2,r3,r2
80201328:	81400217 	ldw	r5,8(r16)
8020132c:	8085883a 	add	r2,r16,r2
80201330:	10c00117 	ldw	r3,4(r2)
80201334:	29000315 	stw	r4,12(r5)
80201338:	21400215 	stw	r5,8(r4)
8020133c:	18c00054 	ori	r3,r3,1
80201340:	10c00115 	stw	r3,4(r2)
80201344:	9009883a 	mov	r4,r18
80201348:	02037d80 	call	802037d8 <__malloc_unlock>
8020134c:	80800204 	addi	r2,r16,8
80201350:	dfc00a17 	ldw	ra,40(sp)
80201354:	df000917 	ldw	fp,36(sp)
80201358:	ddc00817 	ldw	r23,32(sp)
8020135c:	dd800717 	ldw	r22,28(sp)
80201360:	dd400617 	ldw	r21,24(sp)
80201364:	dd000517 	ldw	r20,20(sp)
80201368:	dcc00417 	ldw	r19,16(sp)
8020136c:	dc800317 	ldw	r18,12(sp)
80201370:	dc400217 	ldw	r17,8(sp)
80201374:	dc000117 	ldw	r16,4(sp)
80201378:	dec00b04 	addi	sp,sp,44
8020137c:	f800283a 	ret
80201380:	00800304 	movi	r2,12
80201384:	90800015 	stw	r2,0(r18)
80201388:	0005883a 	mov	r2,zero
8020138c:	003ff006 	br	80201350 <__reset+0xfa1e1350>
80201390:	01002004 	movi	r4,128
80201394:	02001004 	movi	r8,64
80201398:	01c00fc4 	movi	r7,63
8020139c:	003f6106 	br	80201124 <__reset+0xfa1e1124>
802013a0:	4009883a 	mov	r4,r8
802013a4:	003f7506 	br	8020117c <__reset+0xfa1e117c>
802013a8:	81000317 	ldw	r4,12(r16)
802013ac:	003fde06 	br	80201328 <__reset+0xfa1e1328>
802013b0:	81c5883a 	add	r2,r16,r7
802013b4:	11400117 	ldw	r5,4(r2)
802013b8:	9009883a 	mov	r4,r18
802013bc:	29400054 	ori	r5,r5,1
802013c0:	11400115 	stw	r5,4(r2)
802013c4:	02037d80 	call	802037d8 <__malloc_unlock>
802013c8:	80800204 	addi	r2,r16,8
802013cc:	003fe006 	br	80201350 <__reset+0xfa1e1350>
802013d0:	9c000217 	ldw	r16,8(r19)
802013d4:	00bfff04 	movi	r2,-4
802013d8:	85800117 	ldw	r22,4(r16)
802013dc:	b0ac703a 	and	r22,r22,r2
802013e0:	b4400336 	bltu	r22,r17,802013f0 <_malloc_r+0x344>
802013e4:	b445c83a 	sub	r2,r22,r17
802013e8:	00c003c4 	movi	r3,15
802013ec:	18805d16 	blt	r3,r2,80201564 <_malloc_r+0x4b8>
802013f0:	05e00874 	movhi	r23,32801
802013f4:	00a00874 	movhi	r2,32801
802013f8:	10a9e504 	addi	r2,r2,-22636
802013fc:	bde9d504 	addi	r23,r23,-22700
80201400:	15400017 	ldw	r21,0(r2)
80201404:	b8c00017 	ldw	r3,0(r23)
80201408:	00bfffc4 	movi	r2,-1
8020140c:	858d883a 	add	r6,r16,r22
80201410:	8d6b883a 	add	r21,r17,r21
80201414:	1880ea26 	beq	r3,r2,802017c0 <_malloc_r+0x714>
80201418:	ad4403c4 	addi	r21,r21,4111
8020141c:	00bc0004 	movi	r2,-4096
80201420:	a8aa703a 	and	r21,r21,r2
80201424:	a80b883a 	mov	r5,r21
80201428:	9009883a 	mov	r4,r18
8020142c:	d9800015 	stw	r6,0(sp)
80201430:	02022cc0 	call	802022cc <_sbrk_r>
80201434:	1029883a 	mov	r20,r2
80201438:	00bfffc4 	movi	r2,-1
8020143c:	d9800017 	ldw	r6,0(sp)
80201440:	a080e826 	beq	r20,r2,802017e4 <_malloc_r+0x738>
80201444:	a180a636 	bltu	r20,r6,802016e0 <_malloc_r+0x634>
80201448:	07200874 	movhi	fp,32801
8020144c:	e729ee04 	addi	fp,fp,-22600
80201450:	e0800017 	ldw	r2,0(fp)
80201454:	a887883a 	add	r3,r21,r2
80201458:	e0c00015 	stw	r3,0(fp)
8020145c:	3500e626 	beq	r6,r20,802017f8 <_malloc_r+0x74c>
80201460:	b9000017 	ldw	r4,0(r23)
80201464:	00bfffc4 	movi	r2,-1
80201468:	2080ee26 	beq	r4,r2,80201824 <_malloc_r+0x778>
8020146c:	a185c83a 	sub	r2,r20,r6
80201470:	10c5883a 	add	r2,r2,r3
80201474:	e0800015 	stw	r2,0(fp)
80201478:	a0c001cc 	andi	r3,r20,7
8020147c:	1800bc26 	beq	r3,zero,80201770 <_malloc_r+0x6c4>
80201480:	a0e9c83a 	sub	r20,r20,r3
80201484:	00840204 	movi	r2,4104
80201488:	a5000204 	addi	r20,r20,8
8020148c:	10c7c83a 	sub	r3,r2,r3
80201490:	a545883a 	add	r2,r20,r21
80201494:	1083ffcc 	andi	r2,r2,4095
80201498:	18abc83a 	sub	r21,r3,r2
8020149c:	a80b883a 	mov	r5,r21
802014a0:	9009883a 	mov	r4,r18
802014a4:	02022cc0 	call	802022cc <_sbrk_r>
802014a8:	00ffffc4 	movi	r3,-1
802014ac:	10c0e126 	beq	r2,r3,80201834 <_malloc_r+0x788>
802014b0:	1505c83a 	sub	r2,r2,r20
802014b4:	1545883a 	add	r2,r2,r21
802014b8:	10800054 	ori	r2,r2,1
802014bc:	e0c00017 	ldw	r3,0(fp)
802014c0:	9d000215 	stw	r20,8(r19)
802014c4:	a0800115 	stw	r2,4(r20)
802014c8:	a8c7883a 	add	r3,r21,r3
802014cc:	e0c00015 	stw	r3,0(fp)
802014d0:	84c00e26 	beq	r16,r19,8020150c <_malloc_r+0x460>
802014d4:	018003c4 	movi	r6,15
802014d8:	3580a72e 	bgeu	r6,r22,80201778 <_malloc_r+0x6cc>
802014dc:	81400117 	ldw	r5,4(r16)
802014e0:	013ffe04 	movi	r4,-8
802014e4:	b0bffd04 	addi	r2,r22,-12
802014e8:	1104703a 	and	r2,r2,r4
802014ec:	2900004c 	andi	r4,r5,1
802014f0:	2088b03a 	or	r4,r4,r2
802014f4:	81000115 	stw	r4,4(r16)
802014f8:	01400144 	movi	r5,5
802014fc:	8089883a 	add	r4,r16,r2
80201500:	21400115 	stw	r5,4(r4)
80201504:	21400215 	stw	r5,8(r4)
80201508:	3080cd36 	bltu	r6,r2,80201840 <_malloc_r+0x794>
8020150c:	00a00874 	movhi	r2,32801
80201510:	10a9e404 	addi	r2,r2,-22640
80201514:	11000017 	ldw	r4,0(r2)
80201518:	20c0012e 	bgeu	r4,r3,80201520 <_malloc_r+0x474>
8020151c:	10c00015 	stw	r3,0(r2)
80201520:	00a00874 	movhi	r2,32801
80201524:	10a9e304 	addi	r2,r2,-22644
80201528:	11000017 	ldw	r4,0(r2)
8020152c:	9c000217 	ldw	r16,8(r19)
80201530:	20c0012e 	bgeu	r4,r3,80201538 <_malloc_r+0x48c>
80201534:	10c00015 	stw	r3,0(r2)
80201538:	80c00117 	ldw	r3,4(r16)
8020153c:	00bfff04 	movi	r2,-4
80201540:	1886703a 	and	r3,r3,r2
80201544:	1c45c83a 	sub	r2,r3,r17
80201548:	1c400236 	bltu	r3,r17,80201554 <_malloc_r+0x4a8>
8020154c:	00c003c4 	movi	r3,15
80201550:	18800416 	blt	r3,r2,80201564 <_malloc_r+0x4b8>
80201554:	9009883a 	mov	r4,r18
80201558:	02037d80 	call	802037d8 <__malloc_unlock>
8020155c:	0005883a 	mov	r2,zero
80201560:	003f7b06 	br	80201350 <__reset+0xfa1e1350>
80201564:	88c00054 	ori	r3,r17,1
80201568:	80c00115 	stw	r3,4(r16)
8020156c:	8463883a 	add	r17,r16,r17
80201570:	10800054 	ori	r2,r2,1
80201574:	9c400215 	stw	r17,8(r19)
80201578:	88800115 	stw	r2,4(r17)
8020157c:	9009883a 	mov	r4,r18
80201580:	02037d80 	call	802037d8 <__malloc_unlock>
80201584:	80800204 	addi	r2,r16,8
80201588:	003f7106 	br	80201350 <__reset+0xfa1e1350>
8020158c:	00c00504 	movi	r3,20
80201590:	18804a2e 	bgeu	r3,r2,802016bc <_malloc_r+0x610>
80201594:	00c01504 	movi	r3,84
80201598:	18806e36 	bltu	r3,r2,80201754 <_malloc_r+0x6a8>
8020159c:	8804d33a 	srli	r2,r17,12
802015a0:	12001bc4 	addi	r8,r2,111
802015a4:	11c01b84 	addi	r7,r2,110
802015a8:	4209883a 	add	r4,r8,r8
802015ac:	003edd06 	br	80201124 <__reset+0xfa1e1124>
802015b0:	3804d27a 	srli	r2,r7,9
802015b4:	00c00104 	movi	r3,4
802015b8:	1880442e 	bgeu	r3,r2,802016cc <_malloc_r+0x620>
802015bc:	00c00504 	movi	r3,20
802015c0:	18808136 	bltu	r3,r2,802017c8 <_malloc_r+0x71c>
802015c4:	11401704 	addi	r5,r2,92
802015c8:	10c016c4 	addi	r3,r2,91
802015cc:	294b883a 	add	r5,r5,r5
802015d0:	294b883a 	add	r5,r5,r5
802015d4:	294b883a 	add	r5,r5,r5
802015d8:	994b883a 	add	r5,r19,r5
802015dc:	28800017 	ldw	r2,0(r5)
802015e0:	01a00874 	movhi	r6,32801
802015e4:	297ffe04 	addi	r5,r5,-8
802015e8:	31a3dd04 	addi	r6,r6,-28812
802015ec:	28806526 	beq	r5,r2,80201784 <_malloc_r+0x6d8>
802015f0:	01bfff04 	movi	r6,-4
802015f4:	10c00117 	ldw	r3,4(r2)
802015f8:	1986703a 	and	r3,r3,r6
802015fc:	38c0022e 	bgeu	r7,r3,80201608 <_malloc_r+0x55c>
80201600:	10800217 	ldw	r2,8(r2)
80201604:	28bffb1e 	bne	r5,r2,802015f4 <__reset+0xfa1e15f4>
80201608:	11400317 	ldw	r5,12(r2)
8020160c:	98c00117 	ldw	r3,4(r19)
80201610:	81400315 	stw	r5,12(r16)
80201614:	80800215 	stw	r2,8(r16)
80201618:	2c000215 	stw	r16,8(r5)
8020161c:	14000315 	stw	r16,12(r2)
80201620:	003ef806 	br	80201204 <__reset+0xfa1e1204>
80201624:	88c00054 	ori	r3,r17,1
80201628:	80c00115 	stw	r3,4(r16)
8020162c:	8463883a 	add	r17,r16,r17
80201630:	34400515 	stw	r17,20(r6)
80201634:	34400415 	stw	r17,16(r6)
80201638:	10c00054 	ori	r3,r2,1
8020163c:	8a000315 	stw	r8,12(r17)
80201640:	8a000215 	stw	r8,8(r17)
80201644:	88c00115 	stw	r3,4(r17)
80201648:	88a3883a 	add	r17,r17,r2
8020164c:	88800015 	stw	r2,0(r17)
80201650:	9009883a 	mov	r4,r18
80201654:	02037d80 	call	802037d8 <__malloc_unlock>
80201658:	80800204 	addi	r2,r16,8
8020165c:	003f3c06 	br	80201350 <__reset+0xfa1e1350>
80201660:	30c00117 	ldw	r3,4(r6)
80201664:	003ee706 	br	80201204 <__reset+0xfa1e1204>
80201668:	5ac00044 	addi	r11,r11,1
8020166c:	588000cc 	andi	r2,r11,3
80201670:	31800204 	addi	r6,r6,8
80201674:	103efd1e 	bne	r2,zero,8020126c <__reset+0xfa1e126c>
80201678:	00002406 	br	8020170c <_malloc_r+0x660>
8020167c:	14000317 	ldw	r16,12(r2)
80201680:	143f251e 	bne	r2,r16,80201318 <__reset+0xfa1e1318>
80201684:	21000084 	addi	r4,r4,2
80201688:	003ebc06 	br	8020117c <__reset+0xfa1e117c>
8020168c:	8085883a 	add	r2,r16,r2
80201690:	10c00117 	ldw	r3,4(r2)
80201694:	81000317 	ldw	r4,12(r16)
80201698:	81400217 	ldw	r5,8(r16)
8020169c:	18c00054 	ori	r3,r3,1
802016a0:	10c00115 	stw	r3,4(r2)
802016a4:	29000315 	stw	r4,12(r5)
802016a8:	21400215 	stw	r5,8(r4)
802016ac:	9009883a 	mov	r4,r18
802016b0:	02037d80 	call	802037d8 <__malloc_unlock>
802016b4:	80800204 	addi	r2,r16,8
802016b8:	003f2506 	br	80201350 <__reset+0xfa1e1350>
802016bc:	12001704 	addi	r8,r2,92
802016c0:	11c016c4 	addi	r7,r2,91
802016c4:	4209883a 	add	r4,r8,r8
802016c8:	003e9606 	br	80201124 <__reset+0xfa1e1124>
802016cc:	3804d1ba 	srli	r2,r7,6
802016d0:	11400e44 	addi	r5,r2,57
802016d4:	10c00e04 	addi	r3,r2,56
802016d8:	294b883a 	add	r5,r5,r5
802016dc:	003fbc06 	br	802015d0 <__reset+0xfa1e15d0>
802016e0:	84ff5926 	beq	r16,r19,80201448 <__reset+0xfa1e1448>
802016e4:	00a00874 	movhi	r2,32801
802016e8:	10a3dd04 	addi	r2,r2,-28812
802016ec:	14000217 	ldw	r16,8(r2)
802016f0:	00bfff04 	movi	r2,-4
802016f4:	80c00117 	ldw	r3,4(r16)
802016f8:	1886703a 	and	r3,r3,r2
802016fc:	003f9106 	br	80201544 <__reset+0xfa1e1544>
80201700:	60800217 	ldw	r2,8(r12)
80201704:	213fffc4 	addi	r4,r4,-1
80201708:	1300651e 	bne	r2,r12,802018a0 <_malloc_r+0x7f4>
8020170c:	208000cc 	andi	r2,r4,3
80201710:	633ffe04 	addi	r12,r12,-8
80201714:	103ffa1e 	bne	r2,zero,80201700 <__reset+0xfa1e1700>
80201718:	98800117 	ldw	r2,4(r19)
8020171c:	0146303a 	nor	r3,zero,r5
80201720:	1884703a 	and	r2,r3,r2
80201724:	98800115 	stw	r2,4(r19)
80201728:	294b883a 	add	r5,r5,r5
8020172c:	117f2836 	bltu	r2,r5,802013d0 <__reset+0xfa1e13d0>
80201730:	283f2726 	beq	r5,zero,802013d0 <__reset+0xfa1e13d0>
80201734:	2886703a 	and	r3,r5,r2
80201738:	5809883a 	mov	r4,r11
8020173c:	183ec31e 	bne	r3,zero,8020124c <__reset+0xfa1e124c>
80201740:	294b883a 	add	r5,r5,r5
80201744:	2886703a 	and	r3,r5,r2
80201748:	21000104 	addi	r4,r4,4
8020174c:	183ffc26 	beq	r3,zero,80201740 <__reset+0xfa1e1740>
80201750:	003ebe06 	br	8020124c <__reset+0xfa1e124c>
80201754:	00c05504 	movi	r3,340
80201758:	18801236 	bltu	r3,r2,802017a4 <_malloc_r+0x6f8>
8020175c:	8804d3fa 	srli	r2,r17,15
80201760:	12001e04 	addi	r8,r2,120
80201764:	11c01dc4 	addi	r7,r2,119
80201768:	4209883a 	add	r4,r8,r8
8020176c:	003e6d06 	br	80201124 <__reset+0xfa1e1124>
80201770:	00c40004 	movi	r3,4096
80201774:	003f4606 	br	80201490 <__reset+0xfa1e1490>
80201778:	00800044 	movi	r2,1
8020177c:	a0800115 	stw	r2,4(r20)
80201780:	003f7406 	br	80201554 <__reset+0xfa1e1554>
80201784:	1805d0ba 	srai	r2,r3,2
80201788:	01c00044 	movi	r7,1
8020178c:	30c00117 	ldw	r3,4(r6)
80201790:	388e983a 	sll	r7,r7,r2
80201794:	2805883a 	mov	r2,r5
80201798:	38c6b03a 	or	r3,r7,r3
8020179c:	30c00115 	stw	r3,4(r6)
802017a0:	003f9b06 	br	80201610 <__reset+0xfa1e1610>
802017a4:	00c15504 	movi	r3,1364
802017a8:	18801a36 	bltu	r3,r2,80201814 <_malloc_r+0x768>
802017ac:	8804d4ba 	srli	r2,r17,18
802017b0:	12001f44 	addi	r8,r2,125
802017b4:	11c01f04 	addi	r7,r2,124
802017b8:	4209883a 	add	r4,r8,r8
802017bc:	003e5906 	br	80201124 <__reset+0xfa1e1124>
802017c0:	ad400404 	addi	r21,r21,16
802017c4:	003f1706 	br	80201424 <__reset+0xfa1e1424>
802017c8:	00c01504 	movi	r3,84
802017cc:	18802336 	bltu	r3,r2,8020185c <_malloc_r+0x7b0>
802017d0:	3804d33a 	srli	r2,r7,12
802017d4:	11401bc4 	addi	r5,r2,111
802017d8:	10c01b84 	addi	r3,r2,110
802017dc:	294b883a 	add	r5,r5,r5
802017e0:	003f7b06 	br	802015d0 <__reset+0xfa1e15d0>
802017e4:	9c000217 	ldw	r16,8(r19)
802017e8:	00bfff04 	movi	r2,-4
802017ec:	80c00117 	ldw	r3,4(r16)
802017f0:	1886703a 	and	r3,r3,r2
802017f4:	003f5306 	br	80201544 <__reset+0xfa1e1544>
802017f8:	3083ffcc 	andi	r2,r6,4095
802017fc:	103f181e 	bne	r2,zero,80201460 <__reset+0xfa1e1460>
80201800:	99000217 	ldw	r4,8(r19)
80201804:	b545883a 	add	r2,r22,r21
80201808:	10800054 	ori	r2,r2,1
8020180c:	20800115 	stw	r2,4(r4)
80201810:	003f3e06 	br	8020150c <__reset+0xfa1e150c>
80201814:	01003f84 	movi	r4,254
80201818:	02001fc4 	movi	r8,127
8020181c:	01c01f84 	movi	r7,126
80201820:	003e4006 	br	80201124 <__reset+0xfa1e1124>
80201824:	00a00874 	movhi	r2,32801
80201828:	10a9d504 	addi	r2,r2,-22700
8020182c:	15000015 	stw	r20,0(r2)
80201830:	003f1106 	br	80201478 <__reset+0xfa1e1478>
80201834:	00800044 	movi	r2,1
80201838:	002b883a 	mov	r21,zero
8020183c:	003f1f06 	br	802014bc <__reset+0xfa1e14bc>
80201840:	81400204 	addi	r5,r16,8
80201844:	9009883a 	mov	r4,r18
80201848:	0202b340 	call	80202b34 <_free_r>
8020184c:	00a00874 	movhi	r2,32801
80201850:	10a9ee04 	addi	r2,r2,-22600
80201854:	10c00017 	ldw	r3,0(r2)
80201858:	003f2c06 	br	8020150c <__reset+0xfa1e150c>
8020185c:	00c05504 	movi	r3,340
80201860:	18800536 	bltu	r3,r2,80201878 <_malloc_r+0x7cc>
80201864:	3804d3fa 	srli	r2,r7,15
80201868:	11401e04 	addi	r5,r2,120
8020186c:	10c01dc4 	addi	r3,r2,119
80201870:	294b883a 	add	r5,r5,r5
80201874:	003f5606 	br	802015d0 <__reset+0xfa1e15d0>
80201878:	00c15504 	movi	r3,1364
8020187c:	18800536 	bltu	r3,r2,80201894 <_malloc_r+0x7e8>
80201880:	3804d4ba 	srli	r2,r7,18
80201884:	11401f44 	addi	r5,r2,125
80201888:	10c01f04 	addi	r3,r2,124
8020188c:	294b883a 	add	r5,r5,r5
80201890:	003f4f06 	br	802015d0 <__reset+0xfa1e15d0>
80201894:	01403f84 	movi	r5,254
80201898:	00c01f84 	movi	r3,126
8020189c:	003f4c06 	br	802015d0 <__reset+0xfa1e15d0>
802018a0:	98800117 	ldw	r2,4(r19)
802018a4:	003fa006 	br	80201728 <__reset+0xfa1e1728>
802018a8:	8808d0fa 	srli	r4,r17,3
802018ac:	20800044 	addi	r2,r4,1
802018b0:	1085883a 	add	r2,r2,r2
802018b4:	003e9006 	br	802012f8 <__reset+0xfa1e12f8>

802018b8 <memchr>:
802018b8:	208000cc 	andi	r2,r4,3
802018bc:	280f883a 	mov	r7,r5
802018c0:	10003426 	beq	r2,zero,80201994 <memchr+0xdc>
802018c4:	30bfffc4 	addi	r2,r6,-1
802018c8:	30001a26 	beq	r6,zero,80201934 <memchr+0x7c>
802018cc:	20c00003 	ldbu	r3,0(r4)
802018d0:	29803fcc 	andi	r6,r5,255
802018d4:	30c0051e 	bne	r6,r3,802018ec <memchr+0x34>
802018d8:	00001806 	br	8020193c <memchr+0x84>
802018dc:	10001526 	beq	r2,zero,80201934 <memchr+0x7c>
802018e0:	20c00003 	ldbu	r3,0(r4)
802018e4:	10bfffc4 	addi	r2,r2,-1
802018e8:	30c01426 	beq	r6,r3,8020193c <memchr+0x84>
802018ec:	21000044 	addi	r4,r4,1
802018f0:	20c000cc 	andi	r3,r4,3
802018f4:	183ff91e 	bne	r3,zero,802018dc <__reset+0xfa1e18dc>
802018f8:	020000c4 	movi	r8,3
802018fc:	40801136 	bltu	r8,r2,80201944 <memchr+0x8c>
80201900:	10000c26 	beq	r2,zero,80201934 <memchr+0x7c>
80201904:	20c00003 	ldbu	r3,0(r4)
80201908:	29403fcc 	andi	r5,r5,255
8020190c:	28c00b26 	beq	r5,r3,8020193c <memchr+0x84>
80201910:	20c00044 	addi	r3,r4,1
80201914:	39803fcc 	andi	r6,r7,255
80201918:	2089883a 	add	r4,r4,r2
8020191c:	00000306 	br	8020192c <memchr+0x74>
80201920:	18c00044 	addi	r3,r3,1
80201924:	197fffc3 	ldbu	r5,-1(r3)
80201928:	31400526 	beq	r6,r5,80201940 <memchr+0x88>
8020192c:	1805883a 	mov	r2,r3
80201930:	20fffb1e 	bne	r4,r3,80201920 <__reset+0xfa1e1920>
80201934:	0005883a 	mov	r2,zero
80201938:	f800283a 	ret
8020193c:	2005883a 	mov	r2,r4
80201940:	f800283a 	ret
80201944:	28c03fcc 	andi	r3,r5,255
80201948:	1812923a 	slli	r9,r3,8
8020194c:	02ffbff4 	movhi	r11,65279
80201950:	02a02074 	movhi	r10,32897
80201954:	48d2b03a 	or	r9,r9,r3
80201958:	4806943a 	slli	r3,r9,16
8020195c:	5affbfc4 	addi	r11,r11,-257
80201960:	52a02004 	addi	r10,r10,-32640
80201964:	48d2b03a 	or	r9,r9,r3
80201968:	20c00017 	ldw	r3,0(r4)
8020196c:	48c6f03a 	xor	r3,r9,r3
80201970:	1acd883a 	add	r6,r3,r11
80201974:	00c6303a 	nor	r3,zero,r3
80201978:	30c6703a 	and	r3,r6,r3
8020197c:	1a86703a 	and	r3,r3,r10
80201980:	183fe01e 	bne	r3,zero,80201904 <__reset+0xfa1e1904>
80201984:	10bfff04 	addi	r2,r2,-4
80201988:	21000104 	addi	r4,r4,4
8020198c:	40bff636 	bltu	r8,r2,80201968 <__reset+0xfa1e1968>
80201990:	003fdb06 	br	80201900 <__reset+0xfa1e1900>
80201994:	3005883a 	mov	r2,r6
80201998:	003fd706 	br	802018f8 <__reset+0xfa1e18f8>

8020199c <memcpy>:
8020199c:	defffd04 	addi	sp,sp,-12
802019a0:	dfc00215 	stw	ra,8(sp)
802019a4:	dc400115 	stw	r17,4(sp)
802019a8:	dc000015 	stw	r16,0(sp)
802019ac:	00c003c4 	movi	r3,15
802019b0:	2005883a 	mov	r2,r4
802019b4:	1980452e 	bgeu	r3,r6,80201acc <memcpy+0x130>
802019b8:	2906b03a 	or	r3,r5,r4
802019bc:	18c000cc 	andi	r3,r3,3
802019c0:	1800441e 	bne	r3,zero,80201ad4 <memcpy+0x138>
802019c4:	347ffc04 	addi	r17,r6,-16
802019c8:	8822d13a 	srli	r17,r17,4
802019cc:	28c00104 	addi	r3,r5,4
802019d0:	23400104 	addi	r13,r4,4
802019d4:	8820913a 	slli	r16,r17,4
802019d8:	2b000204 	addi	r12,r5,8
802019dc:	22c00204 	addi	r11,r4,8
802019e0:	84000504 	addi	r16,r16,20
802019e4:	2a800304 	addi	r10,r5,12
802019e8:	22400304 	addi	r9,r4,12
802019ec:	2c21883a 	add	r16,r5,r16
802019f0:	2811883a 	mov	r8,r5
802019f4:	200f883a 	mov	r7,r4
802019f8:	41000017 	ldw	r4,0(r8)
802019fc:	1fc00017 	ldw	ra,0(r3)
80201a00:	63c00017 	ldw	r15,0(r12)
80201a04:	39000015 	stw	r4,0(r7)
80201a08:	53800017 	ldw	r14,0(r10)
80201a0c:	6fc00015 	stw	ra,0(r13)
80201a10:	5bc00015 	stw	r15,0(r11)
80201a14:	4b800015 	stw	r14,0(r9)
80201a18:	18c00404 	addi	r3,r3,16
80201a1c:	39c00404 	addi	r7,r7,16
80201a20:	42000404 	addi	r8,r8,16
80201a24:	6b400404 	addi	r13,r13,16
80201a28:	63000404 	addi	r12,r12,16
80201a2c:	5ac00404 	addi	r11,r11,16
80201a30:	52800404 	addi	r10,r10,16
80201a34:	4a400404 	addi	r9,r9,16
80201a38:	1c3fef1e 	bne	r3,r16,802019f8 <__reset+0xfa1e19f8>
80201a3c:	89c00044 	addi	r7,r17,1
80201a40:	380e913a 	slli	r7,r7,4
80201a44:	310003cc 	andi	r4,r6,15
80201a48:	02c000c4 	movi	r11,3
80201a4c:	11c7883a 	add	r3,r2,r7
80201a50:	29cb883a 	add	r5,r5,r7
80201a54:	5900212e 	bgeu	r11,r4,80201adc <memcpy+0x140>
80201a58:	1813883a 	mov	r9,r3
80201a5c:	2811883a 	mov	r8,r5
80201a60:	200f883a 	mov	r7,r4
80201a64:	42800017 	ldw	r10,0(r8)
80201a68:	4a400104 	addi	r9,r9,4
80201a6c:	39ffff04 	addi	r7,r7,-4
80201a70:	4abfff15 	stw	r10,-4(r9)
80201a74:	42000104 	addi	r8,r8,4
80201a78:	59fffa36 	bltu	r11,r7,80201a64 <__reset+0xfa1e1a64>
80201a7c:	213fff04 	addi	r4,r4,-4
80201a80:	2008d0ba 	srli	r4,r4,2
80201a84:	318000cc 	andi	r6,r6,3
80201a88:	21000044 	addi	r4,r4,1
80201a8c:	2109883a 	add	r4,r4,r4
80201a90:	2109883a 	add	r4,r4,r4
80201a94:	1907883a 	add	r3,r3,r4
80201a98:	290b883a 	add	r5,r5,r4
80201a9c:	30000626 	beq	r6,zero,80201ab8 <memcpy+0x11c>
80201aa0:	198d883a 	add	r6,r3,r6
80201aa4:	29c00003 	ldbu	r7,0(r5)
80201aa8:	18c00044 	addi	r3,r3,1
80201aac:	29400044 	addi	r5,r5,1
80201ab0:	19ffffc5 	stb	r7,-1(r3)
80201ab4:	19bffb1e 	bne	r3,r6,80201aa4 <__reset+0xfa1e1aa4>
80201ab8:	dfc00217 	ldw	ra,8(sp)
80201abc:	dc400117 	ldw	r17,4(sp)
80201ac0:	dc000017 	ldw	r16,0(sp)
80201ac4:	dec00304 	addi	sp,sp,12
80201ac8:	f800283a 	ret
80201acc:	2007883a 	mov	r3,r4
80201ad0:	003ff206 	br	80201a9c <__reset+0xfa1e1a9c>
80201ad4:	2007883a 	mov	r3,r4
80201ad8:	003ff106 	br	80201aa0 <__reset+0xfa1e1aa0>
80201adc:	200d883a 	mov	r6,r4
80201ae0:	003fee06 	br	80201a9c <__reset+0xfa1e1a9c>

80201ae4 <memmove>:
80201ae4:	2005883a 	mov	r2,r4
80201ae8:	29000b2e 	bgeu	r5,r4,80201b18 <memmove+0x34>
80201aec:	298f883a 	add	r7,r5,r6
80201af0:	21c0092e 	bgeu	r4,r7,80201b18 <memmove+0x34>
80201af4:	2187883a 	add	r3,r4,r6
80201af8:	198bc83a 	sub	r5,r3,r6
80201afc:	30004826 	beq	r6,zero,80201c20 <memmove+0x13c>
80201b00:	39ffffc4 	addi	r7,r7,-1
80201b04:	39000003 	ldbu	r4,0(r7)
80201b08:	18ffffc4 	addi	r3,r3,-1
80201b0c:	19000005 	stb	r4,0(r3)
80201b10:	28fffb1e 	bne	r5,r3,80201b00 <__reset+0xfa1e1b00>
80201b14:	f800283a 	ret
80201b18:	00c003c4 	movi	r3,15
80201b1c:	1980412e 	bgeu	r3,r6,80201c24 <memmove+0x140>
80201b20:	2886b03a 	or	r3,r5,r2
80201b24:	18c000cc 	andi	r3,r3,3
80201b28:	1800401e 	bne	r3,zero,80201c2c <memmove+0x148>
80201b2c:	33fffc04 	addi	r15,r6,-16
80201b30:	781ed13a 	srli	r15,r15,4
80201b34:	28c00104 	addi	r3,r5,4
80201b38:	13400104 	addi	r13,r2,4
80201b3c:	781c913a 	slli	r14,r15,4
80201b40:	2b000204 	addi	r12,r5,8
80201b44:	12c00204 	addi	r11,r2,8
80201b48:	73800504 	addi	r14,r14,20
80201b4c:	2a800304 	addi	r10,r5,12
80201b50:	12400304 	addi	r9,r2,12
80201b54:	2b9d883a 	add	r14,r5,r14
80201b58:	2811883a 	mov	r8,r5
80201b5c:	100f883a 	mov	r7,r2
80201b60:	41000017 	ldw	r4,0(r8)
80201b64:	39c00404 	addi	r7,r7,16
80201b68:	18c00404 	addi	r3,r3,16
80201b6c:	393ffc15 	stw	r4,-16(r7)
80201b70:	193ffc17 	ldw	r4,-16(r3)
80201b74:	6b400404 	addi	r13,r13,16
80201b78:	5ac00404 	addi	r11,r11,16
80201b7c:	693ffc15 	stw	r4,-16(r13)
80201b80:	61000017 	ldw	r4,0(r12)
80201b84:	4a400404 	addi	r9,r9,16
80201b88:	42000404 	addi	r8,r8,16
80201b8c:	593ffc15 	stw	r4,-16(r11)
80201b90:	51000017 	ldw	r4,0(r10)
80201b94:	63000404 	addi	r12,r12,16
80201b98:	52800404 	addi	r10,r10,16
80201b9c:	493ffc15 	stw	r4,-16(r9)
80201ba0:	1bbfef1e 	bne	r3,r14,80201b60 <__reset+0xfa1e1b60>
80201ba4:	79000044 	addi	r4,r15,1
80201ba8:	2008913a 	slli	r4,r4,4
80201bac:	328003cc 	andi	r10,r6,15
80201bb0:	02c000c4 	movi	r11,3
80201bb4:	1107883a 	add	r3,r2,r4
80201bb8:	290b883a 	add	r5,r5,r4
80201bbc:	5a801e2e 	bgeu	r11,r10,80201c38 <memmove+0x154>
80201bc0:	1813883a 	mov	r9,r3
80201bc4:	2811883a 	mov	r8,r5
80201bc8:	500f883a 	mov	r7,r10
80201bcc:	41000017 	ldw	r4,0(r8)
80201bd0:	4a400104 	addi	r9,r9,4
80201bd4:	39ffff04 	addi	r7,r7,-4
80201bd8:	493fff15 	stw	r4,-4(r9)
80201bdc:	42000104 	addi	r8,r8,4
80201be0:	59fffa36 	bltu	r11,r7,80201bcc <__reset+0xfa1e1bcc>
80201be4:	513fff04 	addi	r4,r10,-4
80201be8:	2008d0ba 	srli	r4,r4,2
80201bec:	318000cc 	andi	r6,r6,3
80201bf0:	21000044 	addi	r4,r4,1
80201bf4:	2109883a 	add	r4,r4,r4
80201bf8:	2109883a 	add	r4,r4,r4
80201bfc:	1907883a 	add	r3,r3,r4
80201c00:	290b883a 	add	r5,r5,r4
80201c04:	30000b26 	beq	r6,zero,80201c34 <memmove+0x150>
80201c08:	198d883a 	add	r6,r3,r6
80201c0c:	29c00003 	ldbu	r7,0(r5)
80201c10:	18c00044 	addi	r3,r3,1
80201c14:	29400044 	addi	r5,r5,1
80201c18:	19ffffc5 	stb	r7,-1(r3)
80201c1c:	19bffb1e 	bne	r3,r6,80201c0c <__reset+0xfa1e1c0c>
80201c20:	f800283a 	ret
80201c24:	1007883a 	mov	r3,r2
80201c28:	003ff606 	br	80201c04 <__reset+0xfa1e1c04>
80201c2c:	1007883a 	mov	r3,r2
80201c30:	003ff506 	br	80201c08 <__reset+0xfa1e1c08>
80201c34:	f800283a 	ret
80201c38:	500d883a 	mov	r6,r10
80201c3c:	003ff106 	br	80201c04 <__reset+0xfa1e1c04>

80201c40 <memset>:
80201c40:	20c000cc 	andi	r3,r4,3
80201c44:	2005883a 	mov	r2,r4
80201c48:	18004426 	beq	r3,zero,80201d5c <memset+0x11c>
80201c4c:	31ffffc4 	addi	r7,r6,-1
80201c50:	30004026 	beq	r6,zero,80201d54 <memset+0x114>
80201c54:	2813883a 	mov	r9,r5
80201c58:	200d883a 	mov	r6,r4
80201c5c:	2007883a 	mov	r3,r4
80201c60:	00000406 	br	80201c74 <memset+0x34>
80201c64:	3a3fffc4 	addi	r8,r7,-1
80201c68:	31800044 	addi	r6,r6,1
80201c6c:	38003926 	beq	r7,zero,80201d54 <memset+0x114>
80201c70:	400f883a 	mov	r7,r8
80201c74:	18c00044 	addi	r3,r3,1
80201c78:	32400005 	stb	r9,0(r6)
80201c7c:	1a0000cc 	andi	r8,r3,3
80201c80:	403ff81e 	bne	r8,zero,80201c64 <__reset+0xfa1e1c64>
80201c84:	010000c4 	movi	r4,3
80201c88:	21c02d2e 	bgeu	r4,r7,80201d40 <memset+0x100>
80201c8c:	29003fcc 	andi	r4,r5,255
80201c90:	200c923a 	slli	r6,r4,8
80201c94:	3108b03a 	or	r4,r6,r4
80201c98:	200c943a 	slli	r6,r4,16
80201c9c:	218cb03a 	or	r6,r4,r6
80201ca0:	010003c4 	movi	r4,15
80201ca4:	21c0182e 	bgeu	r4,r7,80201d08 <memset+0xc8>
80201ca8:	3b3ffc04 	addi	r12,r7,-16
80201cac:	6018d13a 	srli	r12,r12,4
80201cb0:	1a000104 	addi	r8,r3,4
80201cb4:	1ac00204 	addi	r11,r3,8
80201cb8:	6008913a 	slli	r4,r12,4
80201cbc:	1a800304 	addi	r10,r3,12
80201cc0:	1813883a 	mov	r9,r3
80201cc4:	21000504 	addi	r4,r4,20
80201cc8:	1909883a 	add	r4,r3,r4
80201ccc:	49800015 	stw	r6,0(r9)
80201cd0:	41800015 	stw	r6,0(r8)
80201cd4:	59800015 	stw	r6,0(r11)
80201cd8:	51800015 	stw	r6,0(r10)
80201cdc:	42000404 	addi	r8,r8,16
80201ce0:	4a400404 	addi	r9,r9,16
80201ce4:	5ac00404 	addi	r11,r11,16
80201ce8:	52800404 	addi	r10,r10,16
80201cec:	413ff71e 	bne	r8,r4,80201ccc <__reset+0xfa1e1ccc>
80201cf0:	63000044 	addi	r12,r12,1
80201cf4:	6018913a 	slli	r12,r12,4
80201cf8:	39c003cc 	andi	r7,r7,15
80201cfc:	010000c4 	movi	r4,3
80201d00:	1b07883a 	add	r3,r3,r12
80201d04:	21c00e2e 	bgeu	r4,r7,80201d40 <memset+0x100>
80201d08:	1813883a 	mov	r9,r3
80201d0c:	3811883a 	mov	r8,r7
80201d10:	010000c4 	movi	r4,3
80201d14:	49800015 	stw	r6,0(r9)
80201d18:	423fff04 	addi	r8,r8,-4
80201d1c:	4a400104 	addi	r9,r9,4
80201d20:	223ffc36 	bltu	r4,r8,80201d14 <__reset+0xfa1e1d14>
80201d24:	393fff04 	addi	r4,r7,-4
80201d28:	2008d0ba 	srli	r4,r4,2
80201d2c:	39c000cc 	andi	r7,r7,3
80201d30:	21000044 	addi	r4,r4,1
80201d34:	2109883a 	add	r4,r4,r4
80201d38:	2109883a 	add	r4,r4,r4
80201d3c:	1907883a 	add	r3,r3,r4
80201d40:	38000526 	beq	r7,zero,80201d58 <memset+0x118>
80201d44:	19cf883a 	add	r7,r3,r7
80201d48:	19400005 	stb	r5,0(r3)
80201d4c:	18c00044 	addi	r3,r3,1
80201d50:	38fffd1e 	bne	r7,r3,80201d48 <__reset+0xfa1e1d48>
80201d54:	f800283a 	ret
80201d58:	f800283a 	ret
80201d5c:	2007883a 	mov	r3,r4
80201d60:	300f883a 	mov	r7,r6
80201d64:	003fc706 	br	80201c84 <__reset+0xfa1e1c84>

80201d68 <_realloc_r>:
80201d68:	defff604 	addi	sp,sp,-40
80201d6c:	dc800215 	stw	r18,8(sp)
80201d70:	dfc00915 	stw	ra,36(sp)
80201d74:	df000815 	stw	fp,32(sp)
80201d78:	ddc00715 	stw	r23,28(sp)
80201d7c:	dd800615 	stw	r22,24(sp)
80201d80:	dd400515 	stw	r21,20(sp)
80201d84:	dd000415 	stw	r20,16(sp)
80201d88:	dcc00315 	stw	r19,12(sp)
80201d8c:	dc400115 	stw	r17,4(sp)
80201d90:	dc000015 	stw	r16,0(sp)
80201d94:	3025883a 	mov	r18,r6
80201d98:	2800b726 	beq	r5,zero,80202078 <_realloc_r+0x310>
80201d9c:	282b883a 	mov	r21,r5
80201da0:	2029883a 	mov	r20,r4
80201da4:	02037b40 	call	802037b4 <__malloc_lock>
80201da8:	a8bfff17 	ldw	r2,-4(r21)
80201dac:	043fff04 	movi	r16,-4
80201db0:	90c002c4 	addi	r3,r18,11
80201db4:	01000584 	movi	r4,22
80201db8:	acfffe04 	addi	r19,r21,-8
80201dbc:	1420703a 	and	r16,r2,r16
80201dc0:	20c0332e 	bgeu	r4,r3,80201e90 <_realloc_r+0x128>
80201dc4:	047ffe04 	movi	r17,-8
80201dc8:	1c62703a 	and	r17,r3,r17
80201dcc:	8807883a 	mov	r3,r17
80201dd0:	88005816 	blt	r17,zero,80201f34 <_realloc_r+0x1cc>
80201dd4:	8c805736 	bltu	r17,r18,80201f34 <_realloc_r+0x1cc>
80201dd8:	80c0300e 	bge	r16,r3,80201e9c <_realloc_r+0x134>
80201ddc:	07200874 	movhi	fp,32801
80201de0:	e723dd04 	addi	fp,fp,-28812
80201de4:	e1c00217 	ldw	r7,8(fp)
80201de8:	9c09883a 	add	r4,r19,r16
80201dec:	22000117 	ldw	r8,4(r4)
80201df0:	21c06326 	beq	r4,r7,80201f80 <_realloc_r+0x218>
80201df4:	017fff84 	movi	r5,-2
80201df8:	414a703a 	and	r5,r8,r5
80201dfc:	214b883a 	add	r5,r4,r5
80201e00:	29800117 	ldw	r6,4(r5)
80201e04:	3180004c 	andi	r6,r6,1
80201e08:	30003f26 	beq	r6,zero,80201f08 <_realloc_r+0x1a0>
80201e0c:	1080004c 	andi	r2,r2,1
80201e10:	10008326 	beq	r2,zero,80202020 <_realloc_r+0x2b8>
80201e14:	900b883a 	mov	r5,r18
80201e18:	a009883a 	mov	r4,r20
80201e1c:	02010ac0 	call	802010ac <_malloc_r>
80201e20:	1025883a 	mov	r18,r2
80201e24:	10011e26 	beq	r2,zero,802022a0 <_realloc_r+0x538>
80201e28:	a93fff17 	ldw	r4,-4(r21)
80201e2c:	10fffe04 	addi	r3,r2,-8
80201e30:	00bfff84 	movi	r2,-2
80201e34:	2084703a 	and	r2,r4,r2
80201e38:	9885883a 	add	r2,r19,r2
80201e3c:	1880ee26 	beq	r3,r2,802021f8 <_realloc_r+0x490>
80201e40:	81bfff04 	addi	r6,r16,-4
80201e44:	00800904 	movi	r2,36
80201e48:	1180b836 	bltu	r2,r6,8020212c <_realloc_r+0x3c4>
80201e4c:	00c004c4 	movi	r3,19
80201e50:	19809636 	bltu	r3,r6,802020ac <_realloc_r+0x344>
80201e54:	9005883a 	mov	r2,r18
80201e58:	a807883a 	mov	r3,r21
80201e5c:	19000017 	ldw	r4,0(r3)
80201e60:	11000015 	stw	r4,0(r2)
80201e64:	19000117 	ldw	r4,4(r3)
80201e68:	11000115 	stw	r4,4(r2)
80201e6c:	18c00217 	ldw	r3,8(r3)
80201e70:	10c00215 	stw	r3,8(r2)
80201e74:	a80b883a 	mov	r5,r21
80201e78:	a009883a 	mov	r4,r20
80201e7c:	0202b340 	call	80202b34 <_free_r>
80201e80:	a009883a 	mov	r4,r20
80201e84:	02037d80 	call	802037d8 <__malloc_unlock>
80201e88:	9005883a 	mov	r2,r18
80201e8c:	00001206 	br	80201ed8 <_realloc_r+0x170>
80201e90:	00c00404 	movi	r3,16
80201e94:	1823883a 	mov	r17,r3
80201e98:	003fce06 	br	80201dd4 <__reset+0xfa1e1dd4>
80201e9c:	a825883a 	mov	r18,r21
80201ea0:	8445c83a 	sub	r2,r16,r17
80201ea4:	00c003c4 	movi	r3,15
80201ea8:	18802636 	bltu	r3,r2,80201f44 <_realloc_r+0x1dc>
80201eac:	99800117 	ldw	r6,4(r19)
80201eb0:	9c07883a 	add	r3,r19,r16
80201eb4:	3180004c 	andi	r6,r6,1
80201eb8:	3420b03a 	or	r16,r6,r16
80201ebc:	9c000115 	stw	r16,4(r19)
80201ec0:	18800117 	ldw	r2,4(r3)
80201ec4:	10800054 	ori	r2,r2,1
80201ec8:	18800115 	stw	r2,4(r3)
80201ecc:	a009883a 	mov	r4,r20
80201ed0:	02037d80 	call	802037d8 <__malloc_unlock>
80201ed4:	9005883a 	mov	r2,r18
80201ed8:	dfc00917 	ldw	ra,36(sp)
80201edc:	df000817 	ldw	fp,32(sp)
80201ee0:	ddc00717 	ldw	r23,28(sp)
80201ee4:	dd800617 	ldw	r22,24(sp)
80201ee8:	dd400517 	ldw	r21,20(sp)
80201eec:	dd000417 	ldw	r20,16(sp)
80201ef0:	dcc00317 	ldw	r19,12(sp)
80201ef4:	dc800217 	ldw	r18,8(sp)
80201ef8:	dc400117 	ldw	r17,4(sp)
80201efc:	dc000017 	ldw	r16,0(sp)
80201f00:	dec00a04 	addi	sp,sp,40
80201f04:	f800283a 	ret
80201f08:	017fff04 	movi	r5,-4
80201f0c:	414a703a 	and	r5,r8,r5
80201f10:	814d883a 	add	r6,r16,r5
80201f14:	30c01f16 	blt	r6,r3,80201f94 <_realloc_r+0x22c>
80201f18:	20800317 	ldw	r2,12(r4)
80201f1c:	20c00217 	ldw	r3,8(r4)
80201f20:	a825883a 	mov	r18,r21
80201f24:	3021883a 	mov	r16,r6
80201f28:	18800315 	stw	r2,12(r3)
80201f2c:	10c00215 	stw	r3,8(r2)
80201f30:	003fdb06 	br	80201ea0 <__reset+0xfa1e1ea0>
80201f34:	00800304 	movi	r2,12
80201f38:	a0800015 	stw	r2,0(r20)
80201f3c:	0005883a 	mov	r2,zero
80201f40:	003fe506 	br	80201ed8 <__reset+0xfa1e1ed8>
80201f44:	98c00117 	ldw	r3,4(r19)
80201f48:	9c4b883a 	add	r5,r19,r17
80201f4c:	11000054 	ori	r4,r2,1
80201f50:	18c0004c 	andi	r3,r3,1
80201f54:	1c62b03a 	or	r17,r3,r17
80201f58:	9c400115 	stw	r17,4(r19)
80201f5c:	29000115 	stw	r4,4(r5)
80201f60:	2885883a 	add	r2,r5,r2
80201f64:	10c00117 	ldw	r3,4(r2)
80201f68:	29400204 	addi	r5,r5,8
80201f6c:	a009883a 	mov	r4,r20
80201f70:	18c00054 	ori	r3,r3,1
80201f74:	10c00115 	stw	r3,4(r2)
80201f78:	0202b340 	call	80202b34 <_free_r>
80201f7c:	003fd306 	br	80201ecc <__reset+0xfa1e1ecc>
80201f80:	017fff04 	movi	r5,-4
80201f84:	414a703a 	and	r5,r8,r5
80201f88:	89800404 	addi	r6,r17,16
80201f8c:	8151883a 	add	r8,r16,r5
80201f90:	4180590e 	bge	r8,r6,802020f8 <_realloc_r+0x390>
80201f94:	1080004c 	andi	r2,r2,1
80201f98:	103f9e1e 	bne	r2,zero,80201e14 <__reset+0xfa1e1e14>
80201f9c:	adbffe17 	ldw	r22,-8(r21)
80201fa0:	00bfff04 	movi	r2,-4
80201fa4:	9dadc83a 	sub	r22,r19,r22
80201fa8:	b1800117 	ldw	r6,4(r22)
80201fac:	3084703a 	and	r2,r6,r2
80201fb0:	20002026 	beq	r4,zero,80202034 <_realloc_r+0x2cc>
80201fb4:	80af883a 	add	r23,r16,r2
80201fb8:	b96f883a 	add	r23,r23,r5
80201fbc:	21c05f26 	beq	r4,r7,8020213c <_realloc_r+0x3d4>
80201fc0:	b8c01c16 	blt	r23,r3,80202034 <_realloc_r+0x2cc>
80201fc4:	20800317 	ldw	r2,12(r4)
80201fc8:	20c00217 	ldw	r3,8(r4)
80201fcc:	81bfff04 	addi	r6,r16,-4
80201fd0:	01000904 	movi	r4,36
80201fd4:	18800315 	stw	r2,12(r3)
80201fd8:	10c00215 	stw	r3,8(r2)
80201fdc:	b0c00217 	ldw	r3,8(r22)
80201fe0:	b0800317 	ldw	r2,12(r22)
80201fe4:	b4800204 	addi	r18,r22,8
80201fe8:	18800315 	stw	r2,12(r3)
80201fec:	10c00215 	stw	r3,8(r2)
80201ff0:	21801b36 	bltu	r4,r6,80202060 <_realloc_r+0x2f8>
80201ff4:	008004c4 	movi	r2,19
80201ff8:	1180352e 	bgeu	r2,r6,802020d0 <_realloc_r+0x368>
80201ffc:	a8800017 	ldw	r2,0(r21)
80202000:	b0800215 	stw	r2,8(r22)
80202004:	a8800117 	ldw	r2,4(r21)
80202008:	b0800315 	stw	r2,12(r22)
8020200c:	008006c4 	movi	r2,27
80202010:	11807f36 	bltu	r2,r6,80202210 <_realloc_r+0x4a8>
80202014:	b0800404 	addi	r2,r22,16
80202018:	ad400204 	addi	r21,r21,8
8020201c:	00002d06 	br	802020d4 <_realloc_r+0x36c>
80202020:	adbffe17 	ldw	r22,-8(r21)
80202024:	00bfff04 	movi	r2,-4
80202028:	9dadc83a 	sub	r22,r19,r22
8020202c:	b1000117 	ldw	r4,4(r22)
80202030:	2084703a 	and	r2,r4,r2
80202034:	b03f7726 	beq	r22,zero,80201e14 <__reset+0xfa1e1e14>
80202038:	80af883a 	add	r23,r16,r2
8020203c:	b8ff7516 	blt	r23,r3,80201e14 <__reset+0xfa1e1e14>
80202040:	b0800317 	ldw	r2,12(r22)
80202044:	b0c00217 	ldw	r3,8(r22)
80202048:	81bfff04 	addi	r6,r16,-4
8020204c:	01000904 	movi	r4,36
80202050:	18800315 	stw	r2,12(r3)
80202054:	10c00215 	stw	r3,8(r2)
80202058:	b4800204 	addi	r18,r22,8
8020205c:	21bfe52e 	bgeu	r4,r6,80201ff4 <__reset+0xfa1e1ff4>
80202060:	a80b883a 	mov	r5,r21
80202064:	9009883a 	mov	r4,r18
80202068:	0201ae40 	call	80201ae4 <memmove>
8020206c:	b821883a 	mov	r16,r23
80202070:	b027883a 	mov	r19,r22
80202074:	003f8a06 	br	80201ea0 <__reset+0xfa1e1ea0>
80202078:	300b883a 	mov	r5,r6
8020207c:	dfc00917 	ldw	ra,36(sp)
80202080:	df000817 	ldw	fp,32(sp)
80202084:	ddc00717 	ldw	r23,28(sp)
80202088:	dd800617 	ldw	r22,24(sp)
8020208c:	dd400517 	ldw	r21,20(sp)
80202090:	dd000417 	ldw	r20,16(sp)
80202094:	dcc00317 	ldw	r19,12(sp)
80202098:	dc800217 	ldw	r18,8(sp)
8020209c:	dc400117 	ldw	r17,4(sp)
802020a0:	dc000017 	ldw	r16,0(sp)
802020a4:	dec00a04 	addi	sp,sp,40
802020a8:	02010ac1 	jmpi	802010ac <_malloc_r>
802020ac:	a8c00017 	ldw	r3,0(r21)
802020b0:	90c00015 	stw	r3,0(r18)
802020b4:	a8c00117 	ldw	r3,4(r21)
802020b8:	90c00115 	stw	r3,4(r18)
802020bc:	00c006c4 	movi	r3,27
802020c0:	19804536 	bltu	r3,r6,802021d8 <_realloc_r+0x470>
802020c4:	90800204 	addi	r2,r18,8
802020c8:	a8c00204 	addi	r3,r21,8
802020cc:	003f6306 	br	80201e5c <__reset+0xfa1e1e5c>
802020d0:	9005883a 	mov	r2,r18
802020d4:	a8c00017 	ldw	r3,0(r21)
802020d8:	b821883a 	mov	r16,r23
802020dc:	b027883a 	mov	r19,r22
802020e0:	10c00015 	stw	r3,0(r2)
802020e4:	a8c00117 	ldw	r3,4(r21)
802020e8:	10c00115 	stw	r3,4(r2)
802020ec:	a8c00217 	ldw	r3,8(r21)
802020f0:	10c00215 	stw	r3,8(r2)
802020f4:	003f6a06 	br	80201ea0 <__reset+0xfa1e1ea0>
802020f8:	9c67883a 	add	r19,r19,r17
802020fc:	4445c83a 	sub	r2,r8,r17
80202100:	e4c00215 	stw	r19,8(fp)
80202104:	10800054 	ori	r2,r2,1
80202108:	98800115 	stw	r2,4(r19)
8020210c:	a8bfff17 	ldw	r2,-4(r21)
80202110:	a009883a 	mov	r4,r20
80202114:	1080004c 	andi	r2,r2,1
80202118:	1462b03a 	or	r17,r2,r17
8020211c:	ac7fff15 	stw	r17,-4(r21)
80202120:	02037d80 	call	802037d8 <__malloc_unlock>
80202124:	a805883a 	mov	r2,r21
80202128:	003f6b06 	br	80201ed8 <__reset+0xfa1e1ed8>
8020212c:	a80b883a 	mov	r5,r21
80202130:	9009883a 	mov	r4,r18
80202134:	0201ae40 	call	80201ae4 <memmove>
80202138:	003f4e06 	br	80201e74 <__reset+0xfa1e1e74>
8020213c:	89000404 	addi	r4,r17,16
80202140:	b93fbc16 	blt	r23,r4,80202034 <__reset+0xfa1e2034>
80202144:	b0800317 	ldw	r2,12(r22)
80202148:	b0c00217 	ldw	r3,8(r22)
8020214c:	81bfff04 	addi	r6,r16,-4
80202150:	01000904 	movi	r4,36
80202154:	18800315 	stw	r2,12(r3)
80202158:	10c00215 	stw	r3,8(r2)
8020215c:	b4800204 	addi	r18,r22,8
80202160:	21804336 	bltu	r4,r6,80202270 <_realloc_r+0x508>
80202164:	008004c4 	movi	r2,19
80202168:	11803f2e 	bgeu	r2,r6,80202268 <_realloc_r+0x500>
8020216c:	a8800017 	ldw	r2,0(r21)
80202170:	b0800215 	stw	r2,8(r22)
80202174:	a8800117 	ldw	r2,4(r21)
80202178:	b0800315 	stw	r2,12(r22)
8020217c:	008006c4 	movi	r2,27
80202180:	11803f36 	bltu	r2,r6,80202280 <_realloc_r+0x518>
80202184:	b0800404 	addi	r2,r22,16
80202188:	ad400204 	addi	r21,r21,8
8020218c:	a8c00017 	ldw	r3,0(r21)
80202190:	10c00015 	stw	r3,0(r2)
80202194:	a8c00117 	ldw	r3,4(r21)
80202198:	10c00115 	stw	r3,4(r2)
8020219c:	a8c00217 	ldw	r3,8(r21)
802021a0:	10c00215 	stw	r3,8(r2)
802021a4:	b447883a 	add	r3,r22,r17
802021a8:	bc45c83a 	sub	r2,r23,r17
802021ac:	e0c00215 	stw	r3,8(fp)
802021b0:	10800054 	ori	r2,r2,1
802021b4:	18800115 	stw	r2,4(r3)
802021b8:	b0800117 	ldw	r2,4(r22)
802021bc:	a009883a 	mov	r4,r20
802021c0:	1080004c 	andi	r2,r2,1
802021c4:	1462b03a 	or	r17,r2,r17
802021c8:	b4400115 	stw	r17,4(r22)
802021cc:	02037d80 	call	802037d8 <__malloc_unlock>
802021d0:	9005883a 	mov	r2,r18
802021d4:	003f4006 	br	80201ed8 <__reset+0xfa1e1ed8>
802021d8:	a8c00217 	ldw	r3,8(r21)
802021dc:	90c00215 	stw	r3,8(r18)
802021e0:	a8c00317 	ldw	r3,12(r21)
802021e4:	90c00315 	stw	r3,12(r18)
802021e8:	30801126 	beq	r6,r2,80202230 <_realloc_r+0x4c8>
802021ec:	90800404 	addi	r2,r18,16
802021f0:	a8c00404 	addi	r3,r21,16
802021f4:	003f1906 	br	80201e5c <__reset+0xfa1e1e5c>
802021f8:	90ffff17 	ldw	r3,-4(r18)
802021fc:	00bfff04 	movi	r2,-4
80202200:	a825883a 	mov	r18,r21
80202204:	1884703a 	and	r2,r3,r2
80202208:	80a1883a 	add	r16,r16,r2
8020220c:	003f2406 	br	80201ea0 <__reset+0xfa1e1ea0>
80202210:	a8800217 	ldw	r2,8(r21)
80202214:	b0800415 	stw	r2,16(r22)
80202218:	a8800317 	ldw	r2,12(r21)
8020221c:	b0800515 	stw	r2,20(r22)
80202220:	31000a26 	beq	r6,r4,8020224c <_realloc_r+0x4e4>
80202224:	b0800604 	addi	r2,r22,24
80202228:	ad400404 	addi	r21,r21,16
8020222c:	003fa906 	br	802020d4 <__reset+0xfa1e20d4>
80202230:	a9000417 	ldw	r4,16(r21)
80202234:	90800604 	addi	r2,r18,24
80202238:	a8c00604 	addi	r3,r21,24
8020223c:	91000415 	stw	r4,16(r18)
80202240:	a9000517 	ldw	r4,20(r21)
80202244:	91000515 	stw	r4,20(r18)
80202248:	003f0406 	br	80201e5c <__reset+0xfa1e1e5c>
8020224c:	a8c00417 	ldw	r3,16(r21)
80202250:	ad400604 	addi	r21,r21,24
80202254:	b0800804 	addi	r2,r22,32
80202258:	b0c00615 	stw	r3,24(r22)
8020225c:	a8ffff17 	ldw	r3,-4(r21)
80202260:	b0c00715 	stw	r3,28(r22)
80202264:	003f9b06 	br	802020d4 <__reset+0xfa1e20d4>
80202268:	9005883a 	mov	r2,r18
8020226c:	003fc706 	br	8020218c <__reset+0xfa1e218c>
80202270:	a80b883a 	mov	r5,r21
80202274:	9009883a 	mov	r4,r18
80202278:	0201ae40 	call	80201ae4 <memmove>
8020227c:	003fc906 	br	802021a4 <__reset+0xfa1e21a4>
80202280:	a8800217 	ldw	r2,8(r21)
80202284:	b0800415 	stw	r2,16(r22)
80202288:	a8800317 	ldw	r2,12(r21)
8020228c:	b0800515 	stw	r2,20(r22)
80202290:	31000726 	beq	r6,r4,802022b0 <_realloc_r+0x548>
80202294:	b0800604 	addi	r2,r22,24
80202298:	ad400404 	addi	r21,r21,16
8020229c:	003fbb06 	br	8020218c <__reset+0xfa1e218c>
802022a0:	a009883a 	mov	r4,r20
802022a4:	02037d80 	call	802037d8 <__malloc_unlock>
802022a8:	0005883a 	mov	r2,zero
802022ac:	003f0a06 	br	80201ed8 <__reset+0xfa1e1ed8>
802022b0:	a8c00417 	ldw	r3,16(r21)
802022b4:	ad400604 	addi	r21,r21,24
802022b8:	b0800804 	addi	r2,r22,32
802022bc:	b0c00615 	stw	r3,24(r22)
802022c0:	a8ffff17 	ldw	r3,-4(r21)
802022c4:	b0c00715 	stw	r3,28(r22)
802022c8:	003fb006 	br	8020218c <__reset+0xfa1e218c>

802022cc <_sbrk_r>:
802022cc:	defffd04 	addi	sp,sp,-12
802022d0:	dc000015 	stw	r16,0(sp)
802022d4:	04200874 	movhi	r16,32801
802022d8:	dc400115 	stw	r17,4(sp)
802022dc:	8429e604 	addi	r16,r16,-22632
802022e0:	2023883a 	mov	r17,r4
802022e4:	2809883a 	mov	r4,r5
802022e8:	dfc00215 	stw	ra,8(sp)
802022ec:	80000015 	stw	zero,0(r16)
802022f0:	02039980 	call	80203998 <sbrk>
802022f4:	00ffffc4 	movi	r3,-1
802022f8:	10c00526 	beq	r2,r3,80202310 <_sbrk_r+0x44>
802022fc:	dfc00217 	ldw	ra,8(sp)
80202300:	dc400117 	ldw	r17,4(sp)
80202304:	dc000017 	ldw	r16,0(sp)
80202308:	dec00304 	addi	sp,sp,12
8020230c:	f800283a 	ret
80202310:	80c00017 	ldw	r3,0(r16)
80202314:	183ff926 	beq	r3,zero,802022fc <__reset+0xfa1e22fc>
80202318:	88c00015 	stw	r3,0(r17)
8020231c:	003ff706 	br	802022fc <__reset+0xfa1e22fc>

80202320 <__sread>:
80202320:	defffe04 	addi	sp,sp,-8
80202324:	dc000015 	stw	r16,0(sp)
80202328:	2821883a 	mov	r16,r5
8020232c:	2940038f 	ldh	r5,14(r5)
80202330:	dfc00115 	stw	ra,4(sp)
80202334:	02030600 	call	80203060 <_read_r>
80202338:	10000716 	blt	r2,zero,80202358 <__sread+0x38>
8020233c:	80c01417 	ldw	r3,80(r16)
80202340:	1887883a 	add	r3,r3,r2
80202344:	80c01415 	stw	r3,80(r16)
80202348:	dfc00117 	ldw	ra,4(sp)
8020234c:	dc000017 	ldw	r16,0(sp)
80202350:	dec00204 	addi	sp,sp,8
80202354:	f800283a 	ret
80202358:	80c0030b 	ldhu	r3,12(r16)
8020235c:	18fbffcc 	andi	r3,r3,61439
80202360:	80c0030d 	sth	r3,12(r16)
80202364:	dfc00117 	ldw	ra,4(sp)
80202368:	dc000017 	ldw	r16,0(sp)
8020236c:	dec00204 	addi	sp,sp,8
80202370:	f800283a 	ret

80202374 <__seofread>:
80202374:	0005883a 	mov	r2,zero
80202378:	f800283a 	ret

8020237c <__swrite>:
8020237c:	2880030b 	ldhu	r2,12(r5)
80202380:	defffb04 	addi	sp,sp,-20
80202384:	dcc00315 	stw	r19,12(sp)
80202388:	dc800215 	stw	r18,8(sp)
8020238c:	dc400115 	stw	r17,4(sp)
80202390:	dc000015 	stw	r16,0(sp)
80202394:	dfc00415 	stw	ra,16(sp)
80202398:	10c0400c 	andi	r3,r2,256
8020239c:	2821883a 	mov	r16,r5
802023a0:	2023883a 	mov	r17,r4
802023a4:	3025883a 	mov	r18,r6
802023a8:	3827883a 	mov	r19,r7
802023ac:	18000526 	beq	r3,zero,802023c4 <__swrite+0x48>
802023b0:	2940038f 	ldh	r5,14(r5)
802023b4:	01c00084 	movi	r7,2
802023b8:	000d883a 	mov	r6,zero
802023bc:	0202e440 	call	80202e44 <_lseek_r>
802023c0:	8080030b 	ldhu	r2,12(r16)
802023c4:	8140038f 	ldh	r5,14(r16)
802023c8:	10bbffcc 	andi	r2,r2,61439
802023cc:	980f883a 	mov	r7,r19
802023d0:	900d883a 	mov	r6,r18
802023d4:	8809883a 	mov	r4,r17
802023d8:	8080030d 	sth	r2,12(r16)
802023dc:	dfc00417 	ldw	ra,16(sp)
802023e0:	dcc00317 	ldw	r19,12(sp)
802023e4:	dc800217 	ldw	r18,8(sp)
802023e8:	dc400117 	ldw	r17,4(sp)
802023ec:	dc000017 	ldw	r16,0(sp)
802023f0:	dec00504 	addi	sp,sp,20
802023f4:	020245c1 	jmpi	8020245c <_write_r>

802023f8 <__sseek>:
802023f8:	defffe04 	addi	sp,sp,-8
802023fc:	dc000015 	stw	r16,0(sp)
80202400:	2821883a 	mov	r16,r5
80202404:	2940038f 	ldh	r5,14(r5)
80202408:	dfc00115 	stw	ra,4(sp)
8020240c:	0202e440 	call	80202e44 <_lseek_r>
80202410:	00ffffc4 	movi	r3,-1
80202414:	10c00826 	beq	r2,r3,80202438 <__sseek+0x40>
80202418:	80c0030b 	ldhu	r3,12(r16)
8020241c:	80801415 	stw	r2,80(r16)
80202420:	18c40014 	ori	r3,r3,4096
80202424:	80c0030d 	sth	r3,12(r16)
80202428:	dfc00117 	ldw	ra,4(sp)
8020242c:	dc000017 	ldw	r16,0(sp)
80202430:	dec00204 	addi	sp,sp,8
80202434:	f800283a 	ret
80202438:	80c0030b 	ldhu	r3,12(r16)
8020243c:	18fbffcc 	andi	r3,r3,61439
80202440:	80c0030d 	sth	r3,12(r16)
80202444:	dfc00117 	ldw	ra,4(sp)
80202448:	dc000017 	ldw	r16,0(sp)
8020244c:	dec00204 	addi	sp,sp,8
80202450:	f800283a 	ret

80202454 <__sclose>:
80202454:	2940038f 	ldh	r5,14(r5)
80202458:	02026101 	jmpi	80202610 <_close_r>

8020245c <_write_r>:
8020245c:	defffd04 	addi	sp,sp,-12
80202460:	2805883a 	mov	r2,r5
80202464:	dc000015 	stw	r16,0(sp)
80202468:	04200874 	movhi	r16,32801
8020246c:	dc400115 	stw	r17,4(sp)
80202470:	300b883a 	mov	r5,r6
80202474:	8429e604 	addi	r16,r16,-22632
80202478:	2023883a 	mov	r17,r4
8020247c:	380d883a 	mov	r6,r7
80202480:	1009883a 	mov	r4,r2
80202484:	dfc00215 	stw	ra,8(sp)
80202488:	80000015 	stw	zero,0(r16)
8020248c:	0203ab40 	call	80203ab4 <write>
80202490:	00ffffc4 	movi	r3,-1
80202494:	10c00526 	beq	r2,r3,802024ac <_write_r+0x50>
80202498:	dfc00217 	ldw	ra,8(sp)
8020249c:	dc400117 	ldw	r17,4(sp)
802024a0:	dc000017 	ldw	r16,0(sp)
802024a4:	dec00304 	addi	sp,sp,12
802024a8:	f800283a 	ret
802024ac:	80c00017 	ldw	r3,0(r16)
802024b0:	183ff926 	beq	r3,zero,80202498 <__reset+0xfa1e2498>
802024b4:	88c00015 	stw	r3,0(r17)
802024b8:	003ff706 	br	80202498 <__reset+0xfa1e2498>

802024bc <__swsetup_r>:
802024bc:	00a00874 	movhi	r2,32801
802024c0:	defffd04 	addi	sp,sp,-12
802024c4:	10a9d404 	addi	r2,r2,-22704
802024c8:	dc400115 	stw	r17,4(sp)
802024cc:	2023883a 	mov	r17,r4
802024d0:	11000017 	ldw	r4,0(r2)
802024d4:	dc000015 	stw	r16,0(sp)
802024d8:	dfc00215 	stw	ra,8(sp)
802024dc:	2821883a 	mov	r16,r5
802024e0:	20000226 	beq	r4,zero,802024ec <__swsetup_r+0x30>
802024e4:	20800e17 	ldw	r2,56(r4)
802024e8:	10003126 	beq	r2,zero,802025b0 <__swsetup_r+0xf4>
802024ec:	8080030b 	ldhu	r2,12(r16)
802024f0:	10c0020c 	andi	r3,r2,8
802024f4:	1009883a 	mov	r4,r2
802024f8:	18000f26 	beq	r3,zero,80202538 <__swsetup_r+0x7c>
802024fc:	80c00417 	ldw	r3,16(r16)
80202500:	18001526 	beq	r3,zero,80202558 <__swsetup_r+0x9c>
80202504:	1100004c 	andi	r4,r2,1
80202508:	20001c1e 	bne	r4,zero,8020257c <__swsetup_r+0xc0>
8020250c:	1080008c 	andi	r2,r2,2
80202510:	1000291e 	bne	r2,zero,802025b8 <__swsetup_r+0xfc>
80202514:	80800517 	ldw	r2,20(r16)
80202518:	80800215 	stw	r2,8(r16)
8020251c:	18001c26 	beq	r3,zero,80202590 <__swsetup_r+0xd4>
80202520:	0005883a 	mov	r2,zero
80202524:	dfc00217 	ldw	ra,8(sp)
80202528:	dc400117 	ldw	r17,4(sp)
8020252c:	dc000017 	ldw	r16,0(sp)
80202530:	dec00304 	addi	sp,sp,12
80202534:	f800283a 	ret
80202538:	2080040c 	andi	r2,r4,16
8020253c:	10002e26 	beq	r2,zero,802025f8 <__swsetup_r+0x13c>
80202540:	2080010c 	andi	r2,r4,4
80202544:	10001e1e 	bne	r2,zero,802025c0 <__swsetup_r+0x104>
80202548:	80c00417 	ldw	r3,16(r16)
8020254c:	20800214 	ori	r2,r4,8
80202550:	8080030d 	sth	r2,12(r16)
80202554:	183feb1e 	bne	r3,zero,80202504 <__reset+0xfa1e2504>
80202558:	1100a00c 	andi	r4,r2,640
8020255c:	01408004 	movi	r5,512
80202560:	217fe826 	beq	r4,r5,80202504 <__reset+0xfa1e2504>
80202564:	800b883a 	mov	r5,r16
80202568:	8809883a 	mov	r4,r17
8020256c:	0202ea40 	call	80202ea4 <__smakebuf_r>
80202570:	8080030b 	ldhu	r2,12(r16)
80202574:	80c00417 	ldw	r3,16(r16)
80202578:	003fe206 	br	80202504 <__reset+0xfa1e2504>
8020257c:	80800517 	ldw	r2,20(r16)
80202580:	80000215 	stw	zero,8(r16)
80202584:	0085c83a 	sub	r2,zero,r2
80202588:	80800615 	stw	r2,24(r16)
8020258c:	183fe41e 	bne	r3,zero,80202520 <__reset+0xfa1e2520>
80202590:	80c0030b 	ldhu	r3,12(r16)
80202594:	0005883a 	mov	r2,zero
80202598:	1900200c 	andi	r4,r3,128
8020259c:	203fe126 	beq	r4,zero,80202524 <__reset+0xfa1e2524>
802025a0:	18c01014 	ori	r3,r3,64
802025a4:	80c0030d 	sth	r3,12(r16)
802025a8:	00bfffc4 	movi	r2,-1
802025ac:	003fdd06 	br	80202524 <__reset+0xfa1e2524>
802025b0:	0200a180 	call	80200a18 <__sinit>
802025b4:	003fcd06 	br	802024ec <__reset+0xfa1e24ec>
802025b8:	0005883a 	mov	r2,zero
802025bc:	003fd606 	br	80202518 <__reset+0xfa1e2518>
802025c0:	81400c17 	ldw	r5,48(r16)
802025c4:	28000626 	beq	r5,zero,802025e0 <__swsetup_r+0x124>
802025c8:	80801004 	addi	r2,r16,64
802025cc:	28800326 	beq	r5,r2,802025dc <__swsetup_r+0x120>
802025d0:	8809883a 	mov	r4,r17
802025d4:	0202b340 	call	80202b34 <_free_r>
802025d8:	8100030b 	ldhu	r4,12(r16)
802025dc:	80000c15 	stw	zero,48(r16)
802025e0:	80c00417 	ldw	r3,16(r16)
802025e4:	00bff6c4 	movi	r2,-37
802025e8:	1108703a 	and	r4,r2,r4
802025ec:	80000115 	stw	zero,4(r16)
802025f0:	80c00015 	stw	r3,0(r16)
802025f4:	003fd506 	br	8020254c <__reset+0xfa1e254c>
802025f8:	00800244 	movi	r2,9
802025fc:	88800015 	stw	r2,0(r17)
80202600:	20801014 	ori	r2,r4,64
80202604:	8080030d 	sth	r2,12(r16)
80202608:	00bfffc4 	movi	r2,-1
8020260c:	003fc506 	br	80202524 <__reset+0xfa1e2524>

80202610 <_close_r>:
80202610:	defffd04 	addi	sp,sp,-12
80202614:	dc000015 	stw	r16,0(sp)
80202618:	04200874 	movhi	r16,32801
8020261c:	dc400115 	stw	r17,4(sp)
80202620:	8429e604 	addi	r16,r16,-22632
80202624:	2023883a 	mov	r17,r4
80202628:	2809883a 	mov	r4,r5
8020262c:	dfc00215 	stw	ra,8(sp)
80202630:	80000015 	stw	zero,0(r16)
80202634:	02033600 	call	80203360 <close>
80202638:	00ffffc4 	movi	r3,-1
8020263c:	10c00526 	beq	r2,r3,80202654 <_close_r+0x44>
80202640:	dfc00217 	ldw	ra,8(sp)
80202644:	dc400117 	ldw	r17,4(sp)
80202648:	dc000017 	ldw	r16,0(sp)
8020264c:	dec00304 	addi	sp,sp,12
80202650:	f800283a 	ret
80202654:	80c00017 	ldw	r3,0(r16)
80202658:	183ff926 	beq	r3,zero,80202640 <__reset+0xfa1e2640>
8020265c:	88c00015 	stw	r3,0(r17)
80202660:	003ff706 	br	80202640 <__reset+0xfa1e2640>

80202664 <_fclose_r>:
80202664:	28003926 	beq	r5,zero,8020274c <_fclose_r+0xe8>
80202668:	defffc04 	addi	sp,sp,-16
8020266c:	dc400115 	stw	r17,4(sp)
80202670:	dc000015 	stw	r16,0(sp)
80202674:	dfc00315 	stw	ra,12(sp)
80202678:	dc800215 	stw	r18,8(sp)
8020267c:	2023883a 	mov	r17,r4
80202680:	2821883a 	mov	r16,r5
80202684:	20000226 	beq	r4,zero,80202690 <_fclose_r+0x2c>
80202688:	20800e17 	ldw	r2,56(r4)
8020268c:	10002726 	beq	r2,zero,8020272c <_fclose_r+0xc8>
80202690:	8080030f 	ldh	r2,12(r16)
80202694:	1000071e 	bne	r2,zero,802026b4 <_fclose_r+0x50>
80202698:	0005883a 	mov	r2,zero
8020269c:	dfc00317 	ldw	ra,12(sp)
802026a0:	dc800217 	ldw	r18,8(sp)
802026a4:	dc400117 	ldw	r17,4(sp)
802026a8:	dc000017 	ldw	r16,0(sp)
802026ac:	dec00404 	addi	sp,sp,16
802026b0:	f800283a 	ret
802026b4:	800b883a 	mov	r5,r16
802026b8:	8809883a 	mov	r4,r17
802026bc:	02027680 	call	80202768 <__sflush_r>
802026c0:	1025883a 	mov	r18,r2
802026c4:	80800b17 	ldw	r2,44(r16)
802026c8:	10000426 	beq	r2,zero,802026dc <_fclose_r+0x78>
802026cc:	81400717 	ldw	r5,28(r16)
802026d0:	8809883a 	mov	r4,r17
802026d4:	103ee83a 	callr	r2
802026d8:	10001616 	blt	r2,zero,80202734 <_fclose_r+0xd0>
802026dc:	8080030b 	ldhu	r2,12(r16)
802026e0:	1080200c 	andi	r2,r2,128
802026e4:	1000151e 	bne	r2,zero,8020273c <_fclose_r+0xd8>
802026e8:	81400c17 	ldw	r5,48(r16)
802026ec:	28000526 	beq	r5,zero,80202704 <_fclose_r+0xa0>
802026f0:	80801004 	addi	r2,r16,64
802026f4:	28800226 	beq	r5,r2,80202700 <_fclose_r+0x9c>
802026f8:	8809883a 	mov	r4,r17
802026fc:	0202b340 	call	80202b34 <_free_r>
80202700:	80000c15 	stw	zero,48(r16)
80202704:	81401117 	ldw	r5,68(r16)
80202708:	28000326 	beq	r5,zero,80202718 <_fclose_r+0xb4>
8020270c:	8809883a 	mov	r4,r17
80202710:	0202b340 	call	80202b34 <_free_r>
80202714:	80001115 	stw	zero,68(r16)
80202718:	0200a280 	call	80200a28 <__sfp_lock_acquire>
8020271c:	8000030d 	sth	zero,12(r16)
80202720:	0200a2c0 	call	80200a2c <__sfp_lock_release>
80202724:	9005883a 	mov	r2,r18
80202728:	003fdc06 	br	8020269c <__reset+0xfa1e269c>
8020272c:	0200a180 	call	80200a18 <__sinit>
80202730:	003fd706 	br	80202690 <__reset+0xfa1e2690>
80202734:	04bfffc4 	movi	r18,-1
80202738:	003fe806 	br	802026dc <__reset+0xfa1e26dc>
8020273c:	81400417 	ldw	r5,16(r16)
80202740:	8809883a 	mov	r4,r17
80202744:	0202b340 	call	80202b34 <_free_r>
80202748:	003fe706 	br	802026e8 <__reset+0xfa1e26e8>
8020274c:	0005883a 	mov	r2,zero
80202750:	f800283a 	ret

80202754 <fclose>:
80202754:	00a00874 	movhi	r2,32801
80202758:	10a9d404 	addi	r2,r2,-22704
8020275c:	200b883a 	mov	r5,r4
80202760:	11000017 	ldw	r4,0(r2)
80202764:	02026641 	jmpi	80202664 <_fclose_r>

80202768 <__sflush_r>:
80202768:	2880030b 	ldhu	r2,12(r5)
8020276c:	defffb04 	addi	sp,sp,-20
80202770:	dcc00315 	stw	r19,12(sp)
80202774:	dc400115 	stw	r17,4(sp)
80202778:	dfc00415 	stw	ra,16(sp)
8020277c:	dc800215 	stw	r18,8(sp)
80202780:	dc000015 	stw	r16,0(sp)
80202784:	10c0020c 	andi	r3,r2,8
80202788:	2823883a 	mov	r17,r5
8020278c:	2027883a 	mov	r19,r4
80202790:	1800311e 	bne	r3,zero,80202858 <__sflush_r+0xf0>
80202794:	28c00117 	ldw	r3,4(r5)
80202798:	10820014 	ori	r2,r2,2048
8020279c:	2880030d 	sth	r2,12(r5)
802027a0:	00c04b0e 	bge	zero,r3,802028d0 <__sflush_r+0x168>
802027a4:	8a000a17 	ldw	r8,40(r17)
802027a8:	40002326 	beq	r8,zero,80202838 <__sflush_r+0xd0>
802027ac:	9c000017 	ldw	r16,0(r19)
802027b0:	10c4000c 	andi	r3,r2,4096
802027b4:	98000015 	stw	zero,0(r19)
802027b8:	18004826 	beq	r3,zero,802028dc <__sflush_r+0x174>
802027bc:	89801417 	ldw	r6,80(r17)
802027c0:	10c0010c 	andi	r3,r2,4
802027c4:	18000626 	beq	r3,zero,802027e0 <__sflush_r+0x78>
802027c8:	88c00117 	ldw	r3,4(r17)
802027cc:	88800c17 	ldw	r2,48(r17)
802027d0:	30cdc83a 	sub	r6,r6,r3
802027d4:	10000226 	beq	r2,zero,802027e0 <__sflush_r+0x78>
802027d8:	88800f17 	ldw	r2,60(r17)
802027dc:	308dc83a 	sub	r6,r6,r2
802027e0:	89400717 	ldw	r5,28(r17)
802027e4:	000f883a 	mov	r7,zero
802027e8:	9809883a 	mov	r4,r19
802027ec:	403ee83a 	callr	r8
802027f0:	00ffffc4 	movi	r3,-1
802027f4:	10c04426 	beq	r2,r3,80202908 <__sflush_r+0x1a0>
802027f8:	88c0030b 	ldhu	r3,12(r17)
802027fc:	89000417 	ldw	r4,16(r17)
80202800:	88000115 	stw	zero,4(r17)
80202804:	197dffcc 	andi	r5,r3,63487
80202808:	8940030d 	sth	r5,12(r17)
8020280c:	89000015 	stw	r4,0(r17)
80202810:	18c4000c 	andi	r3,r3,4096
80202814:	18002c1e 	bne	r3,zero,802028c8 <__sflush_r+0x160>
80202818:	89400c17 	ldw	r5,48(r17)
8020281c:	9c000015 	stw	r16,0(r19)
80202820:	28000526 	beq	r5,zero,80202838 <__sflush_r+0xd0>
80202824:	88801004 	addi	r2,r17,64
80202828:	28800226 	beq	r5,r2,80202834 <__sflush_r+0xcc>
8020282c:	9809883a 	mov	r4,r19
80202830:	0202b340 	call	80202b34 <_free_r>
80202834:	88000c15 	stw	zero,48(r17)
80202838:	0005883a 	mov	r2,zero
8020283c:	dfc00417 	ldw	ra,16(sp)
80202840:	dcc00317 	ldw	r19,12(sp)
80202844:	dc800217 	ldw	r18,8(sp)
80202848:	dc400117 	ldw	r17,4(sp)
8020284c:	dc000017 	ldw	r16,0(sp)
80202850:	dec00504 	addi	sp,sp,20
80202854:	f800283a 	ret
80202858:	2c800417 	ldw	r18,16(r5)
8020285c:	903ff626 	beq	r18,zero,80202838 <__reset+0xfa1e2838>
80202860:	2c000017 	ldw	r16,0(r5)
80202864:	108000cc 	andi	r2,r2,3
80202868:	2c800015 	stw	r18,0(r5)
8020286c:	84a1c83a 	sub	r16,r16,r18
80202870:	1000131e 	bne	r2,zero,802028c0 <__sflush_r+0x158>
80202874:	28800517 	ldw	r2,20(r5)
80202878:	88800215 	stw	r2,8(r17)
8020287c:	04000316 	blt	zero,r16,8020288c <__sflush_r+0x124>
80202880:	003fed06 	br	80202838 <__reset+0xfa1e2838>
80202884:	90a5883a 	add	r18,r18,r2
80202888:	043feb0e 	bge	zero,r16,80202838 <__reset+0xfa1e2838>
8020288c:	88800917 	ldw	r2,36(r17)
80202890:	89400717 	ldw	r5,28(r17)
80202894:	800f883a 	mov	r7,r16
80202898:	900d883a 	mov	r6,r18
8020289c:	9809883a 	mov	r4,r19
802028a0:	103ee83a 	callr	r2
802028a4:	80a1c83a 	sub	r16,r16,r2
802028a8:	00bff616 	blt	zero,r2,80202884 <__reset+0xfa1e2884>
802028ac:	88c0030b 	ldhu	r3,12(r17)
802028b0:	00bfffc4 	movi	r2,-1
802028b4:	18c01014 	ori	r3,r3,64
802028b8:	88c0030d 	sth	r3,12(r17)
802028bc:	003fdf06 	br	8020283c <__reset+0xfa1e283c>
802028c0:	0005883a 	mov	r2,zero
802028c4:	003fec06 	br	80202878 <__reset+0xfa1e2878>
802028c8:	88801415 	stw	r2,80(r17)
802028cc:	003fd206 	br	80202818 <__reset+0xfa1e2818>
802028d0:	28c00f17 	ldw	r3,60(r5)
802028d4:	00ffb316 	blt	zero,r3,802027a4 <__reset+0xfa1e27a4>
802028d8:	003fd706 	br	80202838 <__reset+0xfa1e2838>
802028dc:	89400717 	ldw	r5,28(r17)
802028e0:	000d883a 	mov	r6,zero
802028e4:	01c00044 	movi	r7,1
802028e8:	9809883a 	mov	r4,r19
802028ec:	403ee83a 	callr	r8
802028f0:	100d883a 	mov	r6,r2
802028f4:	00bfffc4 	movi	r2,-1
802028f8:	30801426 	beq	r6,r2,8020294c <__sflush_r+0x1e4>
802028fc:	8880030b 	ldhu	r2,12(r17)
80202900:	8a000a17 	ldw	r8,40(r17)
80202904:	003fae06 	br	802027c0 <__reset+0xfa1e27c0>
80202908:	98c00017 	ldw	r3,0(r19)
8020290c:	183fba26 	beq	r3,zero,802027f8 <__reset+0xfa1e27f8>
80202910:	01000744 	movi	r4,29
80202914:	19000626 	beq	r3,r4,80202930 <__sflush_r+0x1c8>
80202918:	01000584 	movi	r4,22
8020291c:	19000426 	beq	r3,r4,80202930 <__sflush_r+0x1c8>
80202920:	88c0030b 	ldhu	r3,12(r17)
80202924:	18c01014 	ori	r3,r3,64
80202928:	88c0030d 	sth	r3,12(r17)
8020292c:	003fc306 	br	8020283c <__reset+0xfa1e283c>
80202930:	8880030b 	ldhu	r2,12(r17)
80202934:	88c00417 	ldw	r3,16(r17)
80202938:	88000115 	stw	zero,4(r17)
8020293c:	10bdffcc 	andi	r2,r2,63487
80202940:	8880030d 	sth	r2,12(r17)
80202944:	88c00015 	stw	r3,0(r17)
80202948:	003fb306 	br	80202818 <__reset+0xfa1e2818>
8020294c:	98800017 	ldw	r2,0(r19)
80202950:	103fea26 	beq	r2,zero,802028fc <__reset+0xfa1e28fc>
80202954:	00c00744 	movi	r3,29
80202958:	10c00226 	beq	r2,r3,80202964 <__sflush_r+0x1fc>
8020295c:	00c00584 	movi	r3,22
80202960:	10c0031e 	bne	r2,r3,80202970 <__sflush_r+0x208>
80202964:	9c000015 	stw	r16,0(r19)
80202968:	0005883a 	mov	r2,zero
8020296c:	003fb306 	br	8020283c <__reset+0xfa1e283c>
80202970:	88c0030b 	ldhu	r3,12(r17)
80202974:	3005883a 	mov	r2,r6
80202978:	18c01014 	ori	r3,r3,64
8020297c:	88c0030d 	sth	r3,12(r17)
80202980:	003fae06 	br	8020283c <__reset+0xfa1e283c>

80202984 <_fflush_r>:
80202984:	defffd04 	addi	sp,sp,-12
80202988:	dc000115 	stw	r16,4(sp)
8020298c:	dfc00215 	stw	ra,8(sp)
80202990:	2021883a 	mov	r16,r4
80202994:	20000226 	beq	r4,zero,802029a0 <_fflush_r+0x1c>
80202998:	20800e17 	ldw	r2,56(r4)
8020299c:	10000c26 	beq	r2,zero,802029d0 <_fflush_r+0x4c>
802029a0:	2880030f 	ldh	r2,12(r5)
802029a4:	1000051e 	bne	r2,zero,802029bc <_fflush_r+0x38>
802029a8:	0005883a 	mov	r2,zero
802029ac:	dfc00217 	ldw	ra,8(sp)
802029b0:	dc000117 	ldw	r16,4(sp)
802029b4:	dec00304 	addi	sp,sp,12
802029b8:	f800283a 	ret
802029bc:	8009883a 	mov	r4,r16
802029c0:	dfc00217 	ldw	ra,8(sp)
802029c4:	dc000117 	ldw	r16,4(sp)
802029c8:	dec00304 	addi	sp,sp,12
802029cc:	02027681 	jmpi	80202768 <__sflush_r>
802029d0:	d9400015 	stw	r5,0(sp)
802029d4:	0200a180 	call	80200a18 <__sinit>
802029d8:	d9400017 	ldw	r5,0(sp)
802029dc:	003ff006 	br	802029a0 <__reset+0xfa1e29a0>

802029e0 <fflush>:
802029e0:	20000526 	beq	r4,zero,802029f8 <fflush+0x18>
802029e4:	00a00874 	movhi	r2,32801
802029e8:	10a9d404 	addi	r2,r2,-22704
802029ec:	200b883a 	mov	r5,r4
802029f0:	11000017 	ldw	r4,0(r2)
802029f4:	02029841 	jmpi	80202984 <_fflush_r>
802029f8:	00a00874 	movhi	r2,32801
802029fc:	10a9d304 	addi	r2,r2,-22708
80202a00:	11000017 	ldw	r4,0(r2)
80202a04:	01600834 	movhi	r5,32800
80202a08:	294a6104 	addi	r5,r5,10628
80202a0c:	0200fe81 	jmpi	80200fe8 <_fwalk_reent>

80202a10 <_malloc_trim_r>:
80202a10:	defffb04 	addi	sp,sp,-20
80202a14:	dcc00315 	stw	r19,12(sp)
80202a18:	04e00874 	movhi	r19,32801
80202a1c:	dc800215 	stw	r18,8(sp)
80202a20:	dc400115 	stw	r17,4(sp)
80202a24:	dc000015 	stw	r16,0(sp)
80202a28:	dfc00415 	stw	ra,16(sp)
80202a2c:	2821883a 	mov	r16,r5
80202a30:	9ce3dd04 	addi	r19,r19,-28812
80202a34:	2025883a 	mov	r18,r4
80202a38:	02037b40 	call	802037b4 <__malloc_lock>
80202a3c:	98800217 	ldw	r2,8(r19)
80202a40:	14400117 	ldw	r17,4(r2)
80202a44:	00bfff04 	movi	r2,-4
80202a48:	88a2703a 	and	r17,r17,r2
80202a4c:	8c21c83a 	sub	r16,r17,r16
80202a50:	8403fbc4 	addi	r16,r16,4079
80202a54:	8020d33a 	srli	r16,r16,12
80202a58:	0083ffc4 	movi	r2,4095
80202a5c:	843fffc4 	addi	r16,r16,-1
80202a60:	8020933a 	slli	r16,r16,12
80202a64:	1400060e 	bge	r2,r16,80202a80 <_malloc_trim_r+0x70>
80202a68:	000b883a 	mov	r5,zero
80202a6c:	9009883a 	mov	r4,r18
80202a70:	02022cc0 	call	802022cc <_sbrk_r>
80202a74:	98c00217 	ldw	r3,8(r19)
80202a78:	1c47883a 	add	r3,r3,r17
80202a7c:	10c00a26 	beq	r2,r3,80202aa8 <_malloc_trim_r+0x98>
80202a80:	9009883a 	mov	r4,r18
80202a84:	02037d80 	call	802037d8 <__malloc_unlock>
80202a88:	0005883a 	mov	r2,zero
80202a8c:	dfc00417 	ldw	ra,16(sp)
80202a90:	dcc00317 	ldw	r19,12(sp)
80202a94:	dc800217 	ldw	r18,8(sp)
80202a98:	dc400117 	ldw	r17,4(sp)
80202a9c:	dc000017 	ldw	r16,0(sp)
80202aa0:	dec00504 	addi	sp,sp,20
80202aa4:	f800283a 	ret
80202aa8:	040bc83a 	sub	r5,zero,r16
80202aac:	9009883a 	mov	r4,r18
80202ab0:	02022cc0 	call	802022cc <_sbrk_r>
80202ab4:	00ffffc4 	movi	r3,-1
80202ab8:	10c00d26 	beq	r2,r3,80202af0 <_malloc_trim_r+0xe0>
80202abc:	00e00874 	movhi	r3,32801
80202ac0:	18e9ee04 	addi	r3,r3,-22600
80202ac4:	18800017 	ldw	r2,0(r3)
80202ac8:	99000217 	ldw	r4,8(r19)
80202acc:	8c23c83a 	sub	r17,r17,r16
80202ad0:	8c400054 	ori	r17,r17,1
80202ad4:	1421c83a 	sub	r16,r2,r16
80202ad8:	24400115 	stw	r17,4(r4)
80202adc:	9009883a 	mov	r4,r18
80202ae0:	1c000015 	stw	r16,0(r3)
80202ae4:	02037d80 	call	802037d8 <__malloc_unlock>
80202ae8:	00800044 	movi	r2,1
80202aec:	003fe706 	br	80202a8c <__reset+0xfa1e2a8c>
80202af0:	000b883a 	mov	r5,zero
80202af4:	9009883a 	mov	r4,r18
80202af8:	02022cc0 	call	802022cc <_sbrk_r>
80202afc:	99000217 	ldw	r4,8(r19)
80202b00:	014003c4 	movi	r5,15
80202b04:	1107c83a 	sub	r3,r2,r4
80202b08:	28ffdd0e 	bge	r5,r3,80202a80 <__reset+0xfa1e2a80>
80202b0c:	01600874 	movhi	r5,32801
80202b10:	2969d504 	addi	r5,r5,-22700
80202b14:	29400017 	ldw	r5,0(r5)
80202b18:	18c00054 	ori	r3,r3,1
80202b1c:	20c00115 	stw	r3,4(r4)
80202b20:	00e00874 	movhi	r3,32801
80202b24:	1145c83a 	sub	r2,r2,r5
80202b28:	18e9ee04 	addi	r3,r3,-22600
80202b2c:	18800015 	stw	r2,0(r3)
80202b30:	003fd306 	br	80202a80 <__reset+0xfa1e2a80>

80202b34 <_free_r>:
80202b34:	28004126 	beq	r5,zero,80202c3c <_free_r+0x108>
80202b38:	defffd04 	addi	sp,sp,-12
80202b3c:	dc400115 	stw	r17,4(sp)
80202b40:	dc000015 	stw	r16,0(sp)
80202b44:	2023883a 	mov	r17,r4
80202b48:	2821883a 	mov	r16,r5
80202b4c:	dfc00215 	stw	ra,8(sp)
80202b50:	02037b40 	call	802037b4 <__malloc_lock>
80202b54:	81ffff17 	ldw	r7,-4(r16)
80202b58:	00bfff84 	movi	r2,-2
80202b5c:	01200874 	movhi	r4,32801
80202b60:	81bffe04 	addi	r6,r16,-8
80202b64:	3884703a 	and	r2,r7,r2
80202b68:	2123dd04 	addi	r4,r4,-28812
80202b6c:	308b883a 	add	r5,r6,r2
80202b70:	2a400117 	ldw	r9,4(r5)
80202b74:	22000217 	ldw	r8,8(r4)
80202b78:	00ffff04 	movi	r3,-4
80202b7c:	48c6703a 	and	r3,r9,r3
80202b80:	2a005726 	beq	r5,r8,80202ce0 <_free_r+0x1ac>
80202b84:	28c00115 	stw	r3,4(r5)
80202b88:	39c0004c 	andi	r7,r7,1
80202b8c:	3800091e 	bne	r7,zero,80202bb4 <_free_r+0x80>
80202b90:	823ffe17 	ldw	r8,-8(r16)
80202b94:	22400204 	addi	r9,r4,8
80202b98:	320dc83a 	sub	r6,r6,r8
80202b9c:	31c00217 	ldw	r7,8(r6)
80202ba0:	1205883a 	add	r2,r2,r8
80202ba4:	3a406526 	beq	r7,r9,80202d3c <_free_r+0x208>
80202ba8:	32000317 	ldw	r8,12(r6)
80202bac:	3a000315 	stw	r8,12(r7)
80202bb0:	41c00215 	stw	r7,8(r8)
80202bb4:	28cf883a 	add	r7,r5,r3
80202bb8:	39c00117 	ldw	r7,4(r7)
80202bbc:	39c0004c 	andi	r7,r7,1
80202bc0:	38003a26 	beq	r7,zero,80202cac <_free_r+0x178>
80202bc4:	10c00054 	ori	r3,r2,1
80202bc8:	30c00115 	stw	r3,4(r6)
80202bcc:	3087883a 	add	r3,r6,r2
80202bd0:	18800015 	stw	r2,0(r3)
80202bd4:	00c07fc4 	movi	r3,511
80202bd8:	18801936 	bltu	r3,r2,80202c40 <_free_r+0x10c>
80202bdc:	1004d0fa 	srli	r2,r2,3
80202be0:	01c00044 	movi	r7,1
80202be4:	21400117 	ldw	r5,4(r4)
80202be8:	10c00044 	addi	r3,r2,1
80202bec:	18c7883a 	add	r3,r3,r3
80202bf0:	1005d0ba 	srai	r2,r2,2
80202bf4:	18c7883a 	add	r3,r3,r3
80202bf8:	18c7883a 	add	r3,r3,r3
80202bfc:	1907883a 	add	r3,r3,r4
80202c00:	3884983a 	sll	r2,r7,r2
80202c04:	19c00017 	ldw	r7,0(r3)
80202c08:	1a3ffe04 	addi	r8,r3,-8
80202c0c:	1144b03a 	or	r2,r2,r5
80202c10:	32000315 	stw	r8,12(r6)
80202c14:	31c00215 	stw	r7,8(r6)
80202c18:	20800115 	stw	r2,4(r4)
80202c1c:	19800015 	stw	r6,0(r3)
80202c20:	39800315 	stw	r6,12(r7)
80202c24:	8809883a 	mov	r4,r17
80202c28:	dfc00217 	ldw	ra,8(sp)
80202c2c:	dc400117 	ldw	r17,4(sp)
80202c30:	dc000017 	ldw	r16,0(sp)
80202c34:	dec00304 	addi	sp,sp,12
80202c38:	02037d81 	jmpi	802037d8 <__malloc_unlock>
80202c3c:	f800283a 	ret
80202c40:	100ad27a 	srli	r5,r2,9
80202c44:	00c00104 	movi	r3,4
80202c48:	19404a36 	bltu	r3,r5,80202d74 <_free_r+0x240>
80202c4c:	100ad1ba 	srli	r5,r2,6
80202c50:	28c00e44 	addi	r3,r5,57
80202c54:	18c7883a 	add	r3,r3,r3
80202c58:	29400e04 	addi	r5,r5,56
80202c5c:	18c7883a 	add	r3,r3,r3
80202c60:	18c7883a 	add	r3,r3,r3
80202c64:	1909883a 	add	r4,r3,r4
80202c68:	20c00017 	ldw	r3,0(r4)
80202c6c:	01e00874 	movhi	r7,32801
80202c70:	213ffe04 	addi	r4,r4,-8
80202c74:	39e3dd04 	addi	r7,r7,-28812
80202c78:	20c04426 	beq	r4,r3,80202d8c <_free_r+0x258>
80202c7c:	01ffff04 	movi	r7,-4
80202c80:	19400117 	ldw	r5,4(r3)
80202c84:	29ca703a 	and	r5,r5,r7
80202c88:	1140022e 	bgeu	r2,r5,80202c94 <_free_r+0x160>
80202c8c:	18c00217 	ldw	r3,8(r3)
80202c90:	20fffb1e 	bne	r4,r3,80202c80 <__reset+0xfa1e2c80>
80202c94:	19000317 	ldw	r4,12(r3)
80202c98:	31000315 	stw	r4,12(r6)
80202c9c:	30c00215 	stw	r3,8(r6)
80202ca0:	21800215 	stw	r6,8(r4)
80202ca4:	19800315 	stw	r6,12(r3)
80202ca8:	003fde06 	br	80202c24 <__reset+0xfa1e2c24>
80202cac:	29c00217 	ldw	r7,8(r5)
80202cb0:	10c5883a 	add	r2,r2,r3
80202cb4:	00e00874 	movhi	r3,32801
80202cb8:	18e3df04 	addi	r3,r3,-28804
80202cbc:	38c03b26 	beq	r7,r3,80202dac <_free_r+0x278>
80202cc0:	2a000317 	ldw	r8,12(r5)
80202cc4:	11400054 	ori	r5,r2,1
80202cc8:	3087883a 	add	r3,r6,r2
80202ccc:	3a000315 	stw	r8,12(r7)
80202cd0:	41c00215 	stw	r7,8(r8)
80202cd4:	31400115 	stw	r5,4(r6)
80202cd8:	18800015 	stw	r2,0(r3)
80202cdc:	003fbd06 	br	80202bd4 <__reset+0xfa1e2bd4>
80202ce0:	39c0004c 	andi	r7,r7,1
80202ce4:	10c5883a 	add	r2,r2,r3
80202ce8:	3800071e 	bne	r7,zero,80202d08 <_free_r+0x1d4>
80202cec:	81fffe17 	ldw	r7,-8(r16)
80202cf0:	31cdc83a 	sub	r6,r6,r7
80202cf4:	30c00317 	ldw	r3,12(r6)
80202cf8:	31400217 	ldw	r5,8(r6)
80202cfc:	11c5883a 	add	r2,r2,r7
80202d00:	28c00315 	stw	r3,12(r5)
80202d04:	19400215 	stw	r5,8(r3)
80202d08:	10c00054 	ori	r3,r2,1
80202d0c:	30c00115 	stw	r3,4(r6)
80202d10:	00e00874 	movhi	r3,32801
80202d14:	18e9d604 	addi	r3,r3,-22696
80202d18:	18c00017 	ldw	r3,0(r3)
80202d1c:	21800215 	stw	r6,8(r4)
80202d20:	10ffc036 	bltu	r2,r3,80202c24 <__reset+0xfa1e2c24>
80202d24:	00a00874 	movhi	r2,32801
80202d28:	10a9e504 	addi	r2,r2,-22636
80202d2c:	11400017 	ldw	r5,0(r2)
80202d30:	8809883a 	mov	r4,r17
80202d34:	0202a100 	call	80202a10 <_malloc_trim_r>
80202d38:	003fba06 	br	80202c24 <__reset+0xfa1e2c24>
80202d3c:	28c9883a 	add	r4,r5,r3
80202d40:	21000117 	ldw	r4,4(r4)
80202d44:	2100004c 	andi	r4,r4,1
80202d48:	2000391e 	bne	r4,zero,80202e30 <_free_r+0x2fc>
80202d4c:	29c00217 	ldw	r7,8(r5)
80202d50:	29000317 	ldw	r4,12(r5)
80202d54:	1885883a 	add	r2,r3,r2
80202d58:	10c00054 	ori	r3,r2,1
80202d5c:	39000315 	stw	r4,12(r7)
80202d60:	21c00215 	stw	r7,8(r4)
80202d64:	30c00115 	stw	r3,4(r6)
80202d68:	308d883a 	add	r6,r6,r2
80202d6c:	30800015 	stw	r2,0(r6)
80202d70:	003fac06 	br	80202c24 <__reset+0xfa1e2c24>
80202d74:	00c00504 	movi	r3,20
80202d78:	19401536 	bltu	r3,r5,80202dd0 <_free_r+0x29c>
80202d7c:	28c01704 	addi	r3,r5,92
80202d80:	18c7883a 	add	r3,r3,r3
80202d84:	294016c4 	addi	r5,r5,91
80202d88:	003fb406 	br	80202c5c <__reset+0xfa1e2c5c>
80202d8c:	280bd0ba 	srai	r5,r5,2
80202d90:	00c00044 	movi	r3,1
80202d94:	38800117 	ldw	r2,4(r7)
80202d98:	194a983a 	sll	r5,r3,r5
80202d9c:	2007883a 	mov	r3,r4
80202da0:	2884b03a 	or	r2,r5,r2
80202da4:	38800115 	stw	r2,4(r7)
80202da8:	003fbb06 	br	80202c98 <__reset+0xfa1e2c98>
80202dac:	21800515 	stw	r6,20(r4)
80202db0:	21800415 	stw	r6,16(r4)
80202db4:	10c00054 	ori	r3,r2,1
80202db8:	31c00315 	stw	r7,12(r6)
80202dbc:	31c00215 	stw	r7,8(r6)
80202dc0:	30c00115 	stw	r3,4(r6)
80202dc4:	308d883a 	add	r6,r6,r2
80202dc8:	30800015 	stw	r2,0(r6)
80202dcc:	003f9506 	br	80202c24 <__reset+0xfa1e2c24>
80202dd0:	00c01504 	movi	r3,84
80202dd4:	19400536 	bltu	r3,r5,80202dec <_free_r+0x2b8>
80202dd8:	100ad33a 	srli	r5,r2,12
80202ddc:	28c01bc4 	addi	r3,r5,111
80202de0:	18c7883a 	add	r3,r3,r3
80202de4:	29401b84 	addi	r5,r5,110
80202de8:	003f9c06 	br	80202c5c <__reset+0xfa1e2c5c>
80202dec:	00c05504 	movi	r3,340
80202df0:	19400536 	bltu	r3,r5,80202e08 <_free_r+0x2d4>
80202df4:	100ad3fa 	srli	r5,r2,15
80202df8:	28c01e04 	addi	r3,r5,120
80202dfc:	18c7883a 	add	r3,r3,r3
80202e00:	29401dc4 	addi	r5,r5,119
80202e04:	003f9506 	br	80202c5c <__reset+0xfa1e2c5c>
80202e08:	00c15504 	movi	r3,1364
80202e0c:	19400536 	bltu	r3,r5,80202e24 <_free_r+0x2f0>
80202e10:	100ad4ba 	srli	r5,r2,18
80202e14:	28c01f44 	addi	r3,r5,125
80202e18:	18c7883a 	add	r3,r3,r3
80202e1c:	29401f04 	addi	r5,r5,124
80202e20:	003f8e06 	br	80202c5c <__reset+0xfa1e2c5c>
80202e24:	00c03f84 	movi	r3,254
80202e28:	01401f84 	movi	r5,126
80202e2c:	003f8b06 	br	80202c5c <__reset+0xfa1e2c5c>
80202e30:	10c00054 	ori	r3,r2,1
80202e34:	30c00115 	stw	r3,4(r6)
80202e38:	308d883a 	add	r6,r6,r2
80202e3c:	30800015 	stw	r2,0(r6)
80202e40:	003f7806 	br	80202c24 <__reset+0xfa1e2c24>

80202e44 <_lseek_r>:
80202e44:	defffd04 	addi	sp,sp,-12
80202e48:	2805883a 	mov	r2,r5
80202e4c:	dc000015 	stw	r16,0(sp)
80202e50:	04200874 	movhi	r16,32801
80202e54:	dc400115 	stw	r17,4(sp)
80202e58:	300b883a 	mov	r5,r6
80202e5c:	8429e604 	addi	r16,r16,-22632
80202e60:	2023883a 	mov	r17,r4
80202e64:	380d883a 	mov	r6,r7
80202e68:	1009883a 	mov	r4,r2
80202e6c:	dfc00215 	stw	ra,8(sp)
80202e70:	80000015 	stw	zero,0(r16)
80202e74:	02036640 	call	80203664 <lseek>
80202e78:	00ffffc4 	movi	r3,-1
80202e7c:	10c00526 	beq	r2,r3,80202e94 <_lseek_r+0x50>
80202e80:	dfc00217 	ldw	ra,8(sp)
80202e84:	dc400117 	ldw	r17,4(sp)
80202e88:	dc000017 	ldw	r16,0(sp)
80202e8c:	dec00304 	addi	sp,sp,12
80202e90:	f800283a 	ret
80202e94:	80c00017 	ldw	r3,0(r16)
80202e98:	183ff926 	beq	r3,zero,80202e80 <__reset+0xfa1e2e80>
80202e9c:	88c00015 	stw	r3,0(r17)
80202ea0:	003ff706 	br	80202e80 <__reset+0xfa1e2e80>

80202ea4 <__smakebuf_r>:
80202ea4:	2880030b 	ldhu	r2,12(r5)
80202ea8:	10c0008c 	andi	r3,r2,2
80202eac:	1800411e 	bne	r3,zero,80202fb4 <__smakebuf_r+0x110>
80202eb0:	deffec04 	addi	sp,sp,-80
80202eb4:	dc000f15 	stw	r16,60(sp)
80202eb8:	2821883a 	mov	r16,r5
80202ebc:	2940038f 	ldh	r5,14(r5)
80202ec0:	dc401015 	stw	r17,64(sp)
80202ec4:	dfc01315 	stw	ra,76(sp)
80202ec8:	dcc01215 	stw	r19,72(sp)
80202ecc:	dc801115 	stw	r18,68(sp)
80202ed0:	2023883a 	mov	r17,r4
80202ed4:	28001c16 	blt	r5,zero,80202f48 <__smakebuf_r+0xa4>
80202ed8:	d80d883a 	mov	r6,sp
80202edc:	02030c00 	call	802030c0 <_fstat_r>
80202ee0:	10001816 	blt	r2,zero,80202f44 <__smakebuf_r+0xa0>
80202ee4:	d8800117 	ldw	r2,4(sp)
80202ee8:	00e00014 	movui	r3,32768
80202eec:	10bc000c 	andi	r2,r2,61440
80202ef0:	14c80020 	cmpeqi	r19,r2,8192
80202ef4:	10c03726 	beq	r2,r3,80202fd4 <__smakebuf_r+0x130>
80202ef8:	80c0030b 	ldhu	r3,12(r16)
80202efc:	18c20014 	ori	r3,r3,2048
80202f00:	80c0030d 	sth	r3,12(r16)
80202f04:	00c80004 	movi	r3,8192
80202f08:	10c0521e 	bne	r2,r3,80203054 <__smakebuf_r+0x1b0>
80202f0c:	8140038f 	ldh	r5,14(r16)
80202f10:	8809883a 	mov	r4,r17
80202f14:	020311c0 	call	8020311c <_isatty_r>
80202f18:	10004c26 	beq	r2,zero,8020304c <__smakebuf_r+0x1a8>
80202f1c:	8080030b 	ldhu	r2,12(r16)
80202f20:	80c010c4 	addi	r3,r16,67
80202f24:	80c00015 	stw	r3,0(r16)
80202f28:	10800054 	ori	r2,r2,1
80202f2c:	8080030d 	sth	r2,12(r16)
80202f30:	00800044 	movi	r2,1
80202f34:	80c00415 	stw	r3,16(r16)
80202f38:	80800515 	stw	r2,20(r16)
80202f3c:	04810004 	movi	r18,1024
80202f40:	00000706 	br	80202f60 <__smakebuf_r+0xbc>
80202f44:	8080030b 	ldhu	r2,12(r16)
80202f48:	10c0200c 	andi	r3,r2,128
80202f4c:	18001f1e 	bne	r3,zero,80202fcc <__smakebuf_r+0x128>
80202f50:	04810004 	movi	r18,1024
80202f54:	10820014 	ori	r2,r2,2048
80202f58:	8080030d 	sth	r2,12(r16)
80202f5c:	0027883a 	mov	r19,zero
80202f60:	900b883a 	mov	r5,r18
80202f64:	8809883a 	mov	r4,r17
80202f68:	02010ac0 	call	802010ac <_malloc_r>
80202f6c:	10002c26 	beq	r2,zero,80203020 <__smakebuf_r+0x17c>
80202f70:	80c0030b 	ldhu	r3,12(r16)
80202f74:	01200834 	movhi	r4,32800
80202f78:	2101b404 	addi	r4,r4,1744
80202f7c:	89000f15 	stw	r4,60(r17)
80202f80:	18c02014 	ori	r3,r3,128
80202f84:	80c0030d 	sth	r3,12(r16)
80202f88:	80800015 	stw	r2,0(r16)
80202f8c:	80800415 	stw	r2,16(r16)
80202f90:	84800515 	stw	r18,20(r16)
80202f94:	98001a1e 	bne	r19,zero,80203000 <__smakebuf_r+0x15c>
80202f98:	dfc01317 	ldw	ra,76(sp)
80202f9c:	dcc01217 	ldw	r19,72(sp)
80202fa0:	dc801117 	ldw	r18,68(sp)
80202fa4:	dc401017 	ldw	r17,64(sp)
80202fa8:	dc000f17 	ldw	r16,60(sp)
80202fac:	dec01404 	addi	sp,sp,80
80202fb0:	f800283a 	ret
80202fb4:	288010c4 	addi	r2,r5,67
80202fb8:	28800015 	stw	r2,0(r5)
80202fbc:	28800415 	stw	r2,16(r5)
80202fc0:	00800044 	movi	r2,1
80202fc4:	28800515 	stw	r2,20(r5)
80202fc8:	f800283a 	ret
80202fcc:	04801004 	movi	r18,64
80202fd0:	003fe006 	br	80202f54 <__reset+0xfa1e2f54>
80202fd4:	81000a17 	ldw	r4,40(r16)
80202fd8:	00e00834 	movhi	r3,32800
80202fdc:	18c8fe04 	addi	r3,r3,9208
80202fe0:	20ffc51e 	bne	r4,r3,80202ef8 <__reset+0xfa1e2ef8>
80202fe4:	8080030b 	ldhu	r2,12(r16)
80202fe8:	04810004 	movi	r18,1024
80202fec:	84801315 	stw	r18,76(r16)
80202ff0:	1484b03a 	or	r2,r2,r18
80202ff4:	8080030d 	sth	r2,12(r16)
80202ff8:	0027883a 	mov	r19,zero
80202ffc:	003fd806 	br	80202f60 <__reset+0xfa1e2f60>
80203000:	8140038f 	ldh	r5,14(r16)
80203004:	8809883a 	mov	r4,r17
80203008:	020311c0 	call	8020311c <_isatty_r>
8020300c:	103fe226 	beq	r2,zero,80202f98 <__reset+0xfa1e2f98>
80203010:	8080030b 	ldhu	r2,12(r16)
80203014:	10800054 	ori	r2,r2,1
80203018:	8080030d 	sth	r2,12(r16)
8020301c:	003fde06 	br	80202f98 <__reset+0xfa1e2f98>
80203020:	8080030b 	ldhu	r2,12(r16)
80203024:	10c0800c 	andi	r3,r2,512
80203028:	183fdb1e 	bne	r3,zero,80202f98 <__reset+0xfa1e2f98>
8020302c:	10800094 	ori	r2,r2,2
80203030:	80c010c4 	addi	r3,r16,67
80203034:	8080030d 	sth	r2,12(r16)
80203038:	00800044 	movi	r2,1
8020303c:	80c00015 	stw	r3,0(r16)
80203040:	80c00415 	stw	r3,16(r16)
80203044:	80800515 	stw	r2,20(r16)
80203048:	003fd306 	br	80202f98 <__reset+0xfa1e2f98>
8020304c:	04810004 	movi	r18,1024
80203050:	003fc306 	br	80202f60 <__reset+0xfa1e2f60>
80203054:	0027883a 	mov	r19,zero
80203058:	04810004 	movi	r18,1024
8020305c:	003fc006 	br	80202f60 <__reset+0xfa1e2f60>

80203060 <_read_r>:
80203060:	defffd04 	addi	sp,sp,-12
80203064:	2805883a 	mov	r2,r5
80203068:	dc000015 	stw	r16,0(sp)
8020306c:	04200874 	movhi	r16,32801
80203070:	dc400115 	stw	r17,4(sp)
80203074:	300b883a 	mov	r5,r6
80203078:	8429e604 	addi	r16,r16,-22632
8020307c:	2023883a 	mov	r17,r4
80203080:	380d883a 	mov	r6,r7
80203084:	1009883a 	mov	r4,r2
80203088:	dfc00215 	stw	ra,8(sp)
8020308c:	80000015 	stw	zero,0(r16)
80203090:	02038380 	call	80203838 <read>
80203094:	00ffffc4 	movi	r3,-1
80203098:	10c00526 	beq	r2,r3,802030b0 <_read_r+0x50>
8020309c:	dfc00217 	ldw	ra,8(sp)
802030a0:	dc400117 	ldw	r17,4(sp)
802030a4:	dc000017 	ldw	r16,0(sp)
802030a8:	dec00304 	addi	sp,sp,12
802030ac:	f800283a 	ret
802030b0:	80c00017 	ldw	r3,0(r16)
802030b4:	183ff926 	beq	r3,zero,8020309c <__reset+0xfa1e309c>
802030b8:	88c00015 	stw	r3,0(r17)
802030bc:	003ff706 	br	8020309c <__reset+0xfa1e309c>

802030c0 <_fstat_r>:
802030c0:	defffd04 	addi	sp,sp,-12
802030c4:	2805883a 	mov	r2,r5
802030c8:	dc000015 	stw	r16,0(sp)
802030cc:	04200874 	movhi	r16,32801
802030d0:	dc400115 	stw	r17,4(sp)
802030d4:	8429e604 	addi	r16,r16,-22632
802030d8:	2023883a 	mov	r17,r4
802030dc:	300b883a 	mov	r5,r6
802030e0:	1009883a 	mov	r4,r2
802030e4:	dfc00215 	stw	ra,8(sp)
802030e8:	80000015 	stw	zero,0(r16)
802030ec:	02034980 	call	80203498 <fstat>
802030f0:	00ffffc4 	movi	r3,-1
802030f4:	10c00526 	beq	r2,r3,8020310c <_fstat_r+0x4c>
802030f8:	dfc00217 	ldw	ra,8(sp)
802030fc:	dc400117 	ldw	r17,4(sp)
80203100:	dc000017 	ldw	r16,0(sp)
80203104:	dec00304 	addi	sp,sp,12
80203108:	f800283a 	ret
8020310c:	80c00017 	ldw	r3,0(r16)
80203110:	183ff926 	beq	r3,zero,802030f8 <__reset+0xfa1e30f8>
80203114:	88c00015 	stw	r3,0(r17)
80203118:	003ff706 	br	802030f8 <__reset+0xfa1e30f8>

8020311c <_isatty_r>:
8020311c:	defffd04 	addi	sp,sp,-12
80203120:	dc000015 	stw	r16,0(sp)
80203124:	04200874 	movhi	r16,32801
80203128:	dc400115 	stw	r17,4(sp)
8020312c:	8429e604 	addi	r16,r16,-22632
80203130:	2023883a 	mov	r17,r4
80203134:	2809883a 	mov	r4,r5
80203138:	dfc00215 	stw	ra,8(sp)
8020313c:	80000015 	stw	zero,0(r16)
80203140:	02035840 	call	80203584 <isatty>
80203144:	00ffffc4 	movi	r3,-1
80203148:	10c00526 	beq	r2,r3,80203160 <_isatty_r+0x44>
8020314c:	dfc00217 	ldw	ra,8(sp)
80203150:	dc400117 	ldw	r17,4(sp)
80203154:	dc000017 	ldw	r16,0(sp)
80203158:	dec00304 	addi	sp,sp,12
8020315c:	f800283a 	ret
80203160:	80c00017 	ldw	r3,0(r16)
80203164:	183ff926 	beq	r3,zero,8020314c <__reset+0xfa1e314c>
80203168:	88c00015 	stw	r3,0(r17)
8020316c:	003ff706 	br	8020314c <__reset+0xfa1e314c>

80203170 <__divsi3>:
80203170:	20001b16 	blt	r4,zero,802031e0 <__divsi3+0x70>
80203174:	000f883a 	mov	r7,zero
80203178:	28001616 	blt	r5,zero,802031d4 <__divsi3+0x64>
8020317c:	200d883a 	mov	r6,r4
80203180:	29001a2e 	bgeu	r5,r4,802031ec <__divsi3+0x7c>
80203184:	00800804 	movi	r2,32
80203188:	00c00044 	movi	r3,1
8020318c:	00000106 	br	80203194 <__divsi3+0x24>
80203190:	10000d26 	beq	r2,zero,802031c8 <__divsi3+0x58>
80203194:	294b883a 	add	r5,r5,r5
80203198:	10bfffc4 	addi	r2,r2,-1
8020319c:	18c7883a 	add	r3,r3,r3
802031a0:	293ffb36 	bltu	r5,r4,80203190 <__reset+0xfa1e3190>
802031a4:	0005883a 	mov	r2,zero
802031a8:	18000726 	beq	r3,zero,802031c8 <__divsi3+0x58>
802031ac:	0005883a 	mov	r2,zero
802031b0:	31400236 	bltu	r6,r5,802031bc <__divsi3+0x4c>
802031b4:	314dc83a 	sub	r6,r6,r5
802031b8:	10c4b03a 	or	r2,r2,r3
802031bc:	1806d07a 	srli	r3,r3,1
802031c0:	280ad07a 	srli	r5,r5,1
802031c4:	183ffa1e 	bne	r3,zero,802031b0 <__reset+0xfa1e31b0>
802031c8:	38000126 	beq	r7,zero,802031d0 <__divsi3+0x60>
802031cc:	0085c83a 	sub	r2,zero,r2
802031d0:	f800283a 	ret
802031d4:	014bc83a 	sub	r5,zero,r5
802031d8:	39c0005c 	xori	r7,r7,1
802031dc:	003fe706 	br	8020317c <__reset+0xfa1e317c>
802031e0:	0109c83a 	sub	r4,zero,r4
802031e4:	01c00044 	movi	r7,1
802031e8:	003fe306 	br	80203178 <__reset+0xfa1e3178>
802031ec:	00c00044 	movi	r3,1
802031f0:	003fee06 	br	802031ac <__reset+0xfa1e31ac>

802031f4 <__modsi3>:
802031f4:	20001716 	blt	r4,zero,80203254 <__modsi3+0x60>
802031f8:	000f883a 	mov	r7,zero
802031fc:	2005883a 	mov	r2,r4
80203200:	28001216 	blt	r5,zero,8020324c <__modsi3+0x58>
80203204:	2900162e 	bgeu	r5,r4,80203260 <__modsi3+0x6c>
80203208:	01800804 	movi	r6,32
8020320c:	00c00044 	movi	r3,1
80203210:	00000106 	br	80203218 <__modsi3+0x24>
80203214:	30000a26 	beq	r6,zero,80203240 <__modsi3+0x4c>
80203218:	294b883a 	add	r5,r5,r5
8020321c:	31bfffc4 	addi	r6,r6,-1
80203220:	18c7883a 	add	r3,r3,r3
80203224:	293ffb36 	bltu	r5,r4,80203214 <__reset+0xfa1e3214>
80203228:	18000526 	beq	r3,zero,80203240 <__modsi3+0x4c>
8020322c:	1806d07a 	srli	r3,r3,1
80203230:	11400136 	bltu	r2,r5,80203238 <__modsi3+0x44>
80203234:	1145c83a 	sub	r2,r2,r5
80203238:	280ad07a 	srli	r5,r5,1
8020323c:	183ffb1e 	bne	r3,zero,8020322c <__reset+0xfa1e322c>
80203240:	38000126 	beq	r7,zero,80203248 <__modsi3+0x54>
80203244:	0085c83a 	sub	r2,zero,r2
80203248:	f800283a 	ret
8020324c:	014bc83a 	sub	r5,zero,r5
80203250:	003fec06 	br	80203204 <__reset+0xfa1e3204>
80203254:	0109c83a 	sub	r4,zero,r4
80203258:	01c00044 	movi	r7,1
8020325c:	003fe706 	br	802031fc <__reset+0xfa1e31fc>
80203260:	00c00044 	movi	r3,1
80203264:	003ff106 	br	8020322c <__reset+0xfa1e322c>

80203268 <__udivsi3>:
80203268:	200d883a 	mov	r6,r4
8020326c:	2900152e 	bgeu	r5,r4,802032c4 <__udivsi3+0x5c>
80203270:	28001416 	blt	r5,zero,802032c4 <__udivsi3+0x5c>
80203274:	00800804 	movi	r2,32
80203278:	00c00044 	movi	r3,1
8020327c:	00000206 	br	80203288 <__udivsi3+0x20>
80203280:	10000e26 	beq	r2,zero,802032bc <__udivsi3+0x54>
80203284:	28000516 	blt	r5,zero,8020329c <__udivsi3+0x34>
80203288:	294b883a 	add	r5,r5,r5
8020328c:	10bfffc4 	addi	r2,r2,-1
80203290:	18c7883a 	add	r3,r3,r3
80203294:	293ffa36 	bltu	r5,r4,80203280 <__reset+0xfa1e3280>
80203298:	18000826 	beq	r3,zero,802032bc <__udivsi3+0x54>
8020329c:	0005883a 	mov	r2,zero
802032a0:	31400236 	bltu	r6,r5,802032ac <__udivsi3+0x44>
802032a4:	314dc83a 	sub	r6,r6,r5
802032a8:	10c4b03a 	or	r2,r2,r3
802032ac:	1806d07a 	srli	r3,r3,1
802032b0:	280ad07a 	srli	r5,r5,1
802032b4:	183ffa1e 	bne	r3,zero,802032a0 <__reset+0xfa1e32a0>
802032b8:	f800283a 	ret
802032bc:	0005883a 	mov	r2,zero
802032c0:	f800283a 	ret
802032c4:	00c00044 	movi	r3,1
802032c8:	003ff406 	br	8020329c <__reset+0xfa1e329c>

802032cc <__umodsi3>:
802032cc:	2005883a 	mov	r2,r4
802032d0:	2900122e 	bgeu	r5,r4,8020331c <__umodsi3+0x50>
802032d4:	28001116 	blt	r5,zero,8020331c <__umodsi3+0x50>
802032d8:	01800804 	movi	r6,32
802032dc:	00c00044 	movi	r3,1
802032e0:	00000206 	br	802032ec <__umodsi3+0x20>
802032e4:	30000c26 	beq	r6,zero,80203318 <__umodsi3+0x4c>
802032e8:	28000516 	blt	r5,zero,80203300 <__umodsi3+0x34>
802032ec:	294b883a 	add	r5,r5,r5
802032f0:	31bfffc4 	addi	r6,r6,-1
802032f4:	18c7883a 	add	r3,r3,r3
802032f8:	293ffa36 	bltu	r5,r4,802032e4 <__reset+0xfa1e32e4>
802032fc:	18000626 	beq	r3,zero,80203318 <__umodsi3+0x4c>
80203300:	1806d07a 	srli	r3,r3,1
80203304:	11400136 	bltu	r2,r5,8020330c <__umodsi3+0x40>
80203308:	1145c83a 	sub	r2,r2,r5
8020330c:	280ad07a 	srli	r5,r5,1
80203310:	183ffb1e 	bne	r3,zero,80203300 <__reset+0xfa1e3300>
80203314:	f800283a 	ret
80203318:	f800283a 	ret
8020331c:	00c00044 	movi	r3,1
80203320:	003ff706 	br	80203300 <__reset+0xfa1e3300>

80203324 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80203324:	defffe04 	addi	sp,sp,-8
80203328:	dfc00115 	stw	ra,4(sp)
8020332c:	df000015 	stw	fp,0(sp)
80203330:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80203334:	d0a00917 	ldw	r2,-32732(gp)
80203338:	10000326 	beq	r2,zero,80203348 <alt_get_errno+0x24>
8020333c:	d0a00917 	ldw	r2,-32732(gp)
80203340:	103ee83a 	callr	r2
80203344:	00000106 	br	8020334c <alt_get_errno+0x28>
80203348:	d0a01304 	addi	r2,gp,-32692
}
8020334c:	e037883a 	mov	sp,fp
80203350:	dfc00117 	ldw	ra,4(sp)
80203354:	df000017 	ldw	fp,0(sp)
80203358:	dec00204 	addi	sp,sp,8
8020335c:	f800283a 	ret

80203360 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
80203360:	defffb04 	addi	sp,sp,-20
80203364:	dfc00415 	stw	ra,16(sp)
80203368:	df000315 	stw	fp,12(sp)
8020336c:	df000304 	addi	fp,sp,12
80203370:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
80203374:	e0bfff17 	ldw	r2,-4(fp)
80203378:	10000616 	blt	r2,zero,80203394 <close+0x34>
8020337c:	e0bfff17 	ldw	r2,-4(fp)
80203380:	10c00324 	muli	r3,r2,12
80203384:	00a00874 	movhi	r2,32801
80203388:	10a4e904 	addi	r2,r2,-27740
8020338c:	1885883a 	add	r2,r3,r2
80203390:	00000106 	br	80203398 <close+0x38>
80203394:	0005883a 	mov	r2,zero
80203398:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
8020339c:	e0bffd17 	ldw	r2,-12(fp)
802033a0:	10001926 	beq	r2,zero,80203408 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
802033a4:	e0bffd17 	ldw	r2,-12(fp)
802033a8:	10800017 	ldw	r2,0(r2)
802033ac:	10800417 	ldw	r2,16(r2)
802033b0:	10000626 	beq	r2,zero,802033cc <close+0x6c>
802033b4:	e0bffd17 	ldw	r2,-12(fp)
802033b8:	10800017 	ldw	r2,0(r2)
802033bc:	10800417 	ldw	r2,16(r2)
802033c0:	e13ffd17 	ldw	r4,-12(fp)
802033c4:	103ee83a 	callr	r2
802033c8:	00000106 	br	802033d0 <close+0x70>
802033cc:	0005883a 	mov	r2,zero
802033d0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
802033d4:	e13fff17 	ldw	r4,-4(fp)
802033d8:	02039340 	call	80203934 <alt_release_fd>
    if (rval < 0)
802033dc:	e0bffe17 	ldw	r2,-8(fp)
802033e0:	1000070e 	bge	r2,zero,80203400 <close+0xa0>
    {
      ALT_ERRNO = -rval;
802033e4:	02033240 	call	80203324 <alt_get_errno>
802033e8:	1007883a 	mov	r3,r2
802033ec:	e0bffe17 	ldw	r2,-8(fp)
802033f0:	0085c83a 	sub	r2,zero,r2
802033f4:	18800015 	stw	r2,0(r3)
      return -1;
802033f8:	00bfffc4 	movi	r2,-1
802033fc:	00000706 	br	8020341c <close+0xbc>
    }
    return 0;
80203400:	0005883a 	mov	r2,zero
80203404:	00000506 	br	8020341c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
80203408:	02033240 	call	80203324 <alt_get_errno>
8020340c:	1007883a 	mov	r3,r2
80203410:	00801444 	movi	r2,81
80203414:	18800015 	stw	r2,0(r3)
    return -1;
80203418:	00bfffc4 	movi	r2,-1
  }
}
8020341c:	e037883a 	mov	sp,fp
80203420:	dfc00117 	ldw	ra,4(sp)
80203424:	df000017 	ldw	fp,0(sp)
80203428:	dec00204 	addi	sp,sp,8
8020342c:	f800283a 	ret

80203430 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
80203430:	defffc04 	addi	sp,sp,-16
80203434:	df000315 	stw	fp,12(sp)
80203438:	df000304 	addi	fp,sp,12
8020343c:	e13ffd15 	stw	r4,-12(fp)
80203440:	e17ffe15 	stw	r5,-8(fp)
80203444:	e1bfff15 	stw	r6,-4(fp)
  return len;
80203448:	e0bfff17 	ldw	r2,-4(fp)
}
8020344c:	e037883a 	mov	sp,fp
80203450:	df000017 	ldw	fp,0(sp)
80203454:	dec00104 	addi	sp,sp,4
80203458:	f800283a 	ret

8020345c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8020345c:	defffe04 	addi	sp,sp,-8
80203460:	dfc00115 	stw	ra,4(sp)
80203464:	df000015 	stw	fp,0(sp)
80203468:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8020346c:	d0a00917 	ldw	r2,-32732(gp)
80203470:	10000326 	beq	r2,zero,80203480 <alt_get_errno+0x24>
80203474:	d0a00917 	ldw	r2,-32732(gp)
80203478:	103ee83a 	callr	r2
8020347c:	00000106 	br	80203484 <alt_get_errno+0x28>
80203480:	d0a01304 	addi	r2,gp,-32692
}
80203484:	e037883a 	mov	sp,fp
80203488:	dfc00117 	ldw	ra,4(sp)
8020348c:	df000017 	ldw	fp,0(sp)
80203490:	dec00204 	addi	sp,sp,8
80203494:	f800283a 	ret

80203498 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
80203498:	defffb04 	addi	sp,sp,-20
8020349c:	dfc00415 	stw	ra,16(sp)
802034a0:	df000315 	stw	fp,12(sp)
802034a4:	df000304 	addi	fp,sp,12
802034a8:	e13ffe15 	stw	r4,-8(fp)
802034ac:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
802034b0:	e0bffe17 	ldw	r2,-8(fp)
802034b4:	10000616 	blt	r2,zero,802034d0 <fstat+0x38>
802034b8:	e0bffe17 	ldw	r2,-8(fp)
802034bc:	10c00324 	muli	r3,r2,12
802034c0:	00a00874 	movhi	r2,32801
802034c4:	10a4e904 	addi	r2,r2,-27740
802034c8:	1885883a 	add	r2,r3,r2
802034cc:	00000106 	br	802034d4 <fstat+0x3c>
802034d0:	0005883a 	mov	r2,zero
802034d4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
802034d8:	e0bffd17 	ldw	r2,-12(fp)
802034dc:	10001026 	beq	r2,zero,80203520 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
802034e0:	e0bffd17 	ldw	r2,-12(fp)
802034e4:	10800017 	ldw	r2,0(r2)
802034e8:	10800817 	ldw	r2,32(r2)
802034ec:	10000726 	beq	r2,zero,8020350c <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
802034f0:	e0bffd17 	ldw	r2,-12(fp)
802034f4:	10800017 	ldw	r2,0(r2)
802034f8:	10800817 	ldw	r2,32(r2)
802034fc:	e17fff17 	ldw	r5,-4(fp)
80203500:	e13ffd17 	ldw	r4,-12(fp)
80203504:	103ee83a 	callr	r2
80203508:	00000a06 	br	80203534 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
8020350c:	e0bfff17 	ldw	r2,-4(fp)
80203510:	00c80004 	movi	r3,8192
80203514:	10c00115 	stw	r3,4(r2)
      return 0;
80203518:	0005883a 	mov	r2,zero
8020351c:	00000506 	br	80203534 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
80203520:	020345c0 	call	8020345c <alt_get_errno>
80203524:	1007883a 	mov	r3,r2
80203528:	00801444 	movi	r2,81
8020352c:	18800015 	stw	r2,0(r3)
    return -1;
80203530:	00bfffc4 	movi	r2,-1
  }
}
80203534:	e037883a 	mov	sp,fp
80203538:	dfc00117 	ldw	ra,4(sp)
8020353c:	df000017 	ldw	fp,0(sp)
80203540:	dec00204 	addi	sp,sp,8
80203544:	f800283a 	ret

80203548 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80203548:	defffe04 	addi	sp,sp,-8
8020354c:	dfc00115 	stw	ra,4(sp)
80203550:	df000015 	stw	fp,0(sp)
80203554:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80203558:	d0a00917 	ldw	r2,-32732(gp)
8020355c:	10000326 	beq	r2,zero,8020356c <alt_get_errno+0x24>
80203560:	d0a00917 	ldw	r2,-32732(gp)
80203564:	103ee83a 	callr	r2
80203568:	00000106 	br	80203570 <alt_get_errno+0x28>
8020356c:	d0a01304 	addi	r2,gp,-32692
}
80203570:	e037883a 	mov	sp,fp
80203574:	dfc00117 	ldw	ra,4(sp)
80203578:	df000017 	ldw	fp,0(sp)
8020357c:	dec00204 	addi	sp,sp,8
80203580:	f800283a 	ret

80203584 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
80203584:	deffed04 	addi	sp,sp,-76
80203588:	dfc01215 	stw	ra,72(sp)
8020358c:	df001115 	stw	fp,68(sp)
80203590:	df001104 	addi	fp,sp,68
80203594:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
80203598:	e0bfff17 	ldw	r2,-4(fp)
8020359c:	10000616 	blt	r2,zero,802035b8 <isatty+0x34>
802035a0:	e0bfff17 	ldw	r2,-4(fp)
802035a4:	10c00324 	muli	r3,r2,12
802035a8:	00a00874 	movhi	r2,32801
802035ac:	10a4e904 	addi	r2,r2,-27740
802035b0:	1885883a 	add	r2,r3,r2
802035b4:	00000106 	br	802035bc <isatty+0x38>
802035b8:	0005883a 	mov	r2,zero
802035bc:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
802035c0:	e0bfef17 	ldw	r2,-68(fp)
802035c4:	10000e26 	beq	r2,zero,80203600 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
802035c8:	e0bfef17 	ldw	r2,-68(fp)
802035cc:	10800017 	ldw	r2,0(r2)
802035d0:	10800817 	ldw	r2,32(r2)
802035d4:	1000021e 	bne	r2,zero,802035e0 <isatty+0x5c>
    {
      return 1;
802035d8:	00800044 	movi	r2,1
802035dc:	00000d06 	br	80203614 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
802035e0:	e0bff004 	addi	r2,fp,-64
802035e4:	100b883a 	mov	r5,r2
802035e8:	e13fff17 	ldw	r4,-4(fp)
802035ec:	02034980 	call	80203498 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
802035f0:	e0bff117 	ldw	r2,-60(fp)
802035f4:	10880020 	cmpeqi	r2,r2,8192
802035f8:	10803fcc 	andi	r2,r2,255
802035fc:	00000506 	br	80203614 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
80203600:	02035480 	call	80203548 <alt_get_errno>
80203604:	1007883a 	mov	r3,r2
80203608:	00801444 	movi	r2,81
8020360c:	18800015 	stw	r2,0(r3)
    return 0;
80203610:	0005883a 	mov	r2,zero
  }
}
80203614:	e037883a 	mov	sp,fp
80203618:	dfc00117 	ldw	ra,4(sp)
8020361c:	df000017 	ldw	fp,0(sp)
80203620:	dec00204 	addi	sp,sp,8
80203624:	f800283a 	ret

80203628 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80203628:	defffe04 	addi	sp,sp,-8
8020362c:	dfc00115 	stw	ra,4(sp)
80203630:	df000015 	stw	fp,0(sp)
80203634:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80203638:	d0a00917 	ldw	r2,-32732(gp)
8020363c:	10000326 	beq	r2,zero,8020364c <alt_get_errno+0x24>
80203640:	d0a00917 	ldw	r2,-32732(gp)
80203644:	103ee83a 	callr	r2
80203648:	00000106 	br	80203650 <alt_get_errno+0x28>
8020364c:	d0a01304 	addi	r2,gp,-32692
}
80203650:	e037883a 	mov	sp,fp
80203654:	dfc00117 	ldw	ra,4(sp)
80203658:	df000017 	ldw	fp,0(sp)
8020365c:	dec00204 	addi	sp,sp,8
80203660:	f800283a 	ret

80203664 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
80203664:	defff904 	addi	sp,sp,-28
80203668:	dfc00615 	stw	ra,24(sp)
8020366c:	df000515 	stw	fp,20(sp)
80203670:	df000504 	addi	fp,sp,20
80203674:	e13ffd15 	stw	r4,-12(fp)
80203678:	e17ffe15 	stw	r5,-8(fp)
8020367c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
80203680:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
80203684:	e0bffd17 	ldw	r2,-12(fp)
80203688:	10000616 	blt	r2,zero,802036a4 <lseek+0x40>
8020368c:	e0bffd17 	ldw	r2,-12(fp)
80203690:	10c00324 	muli	r3,r2,12
80203694:	00a00874 	movhi	r2,32801
80203698:	10a4e904 	addi	r2,r2,-27740
8020369c:	1885883a 	add	r2,r3,r2
802036a0:	00000106 	br	802036a8 <lseek+0x44>
802036a4:	0005883a 	mov	r2,zero
802036a8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
802036ac:	e0bffc17 	ldw	r2,-16(fp)
802036b0:	10001026 	beq	r2,zero,802036f4 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
802036b4:	e0bffc17 	ldw	r2,-16(fp)
802036b8:	10800017 	ldw	r2,0(r2)
802036bc:	10800717 	ldw	r2,28(r2)
802036c0:	10000926 	beq	r2,zero,802036e8 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
802036c4:	e0bffc17 	ldw	r2,-16(fp)
802036c8:	10800017 	ldw	r2,0(r2)
802036cc:	10800717 	ldw	r2,28(r2)
802036d0:	e1bfff17 	ldw	r6,-4(fp)
802036d4:	e17ffe17 	ldw	r5,-8(fp)
802036d8:	e13ffc17 	ldw	r4,-16(fp)
802036dc:	103ee83a 	callr	r2
802036e0:	e0bffb15 	stw	r2,-20(fp)
802036e4:	00000506 	br	802036fc <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
802036e8:	00bfde84 	movi	r2,-134
802036ec:	e0bffb15 	stw	r2,-20(fp)
802036f0:	00000206 	br	802036fc <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
802036f4:	00bfebc4 	movi	r2,-81
802036f8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
802036fc:	e0bffb17 	ldw	r2,-20(fp)
80203700:	1000070e 	bge	r2,zero,80203720 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
80203704:	02036280 	call	80203628 <alt_get_errno>
80203708:	1007883a 	mov	r3,r2
8020370c:	e0bffb17 	ldw	r2,-20(fp)
80203710:	0085c83a 	sub	r2,zero,r2
80203714:	18800015 	stw	r2,0(r3)
    rc = -1;
80203718:	00bfffc4 	movi	r2,-1
8020371c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
80203720:	e0bffb17 	ldw	r2,-20(fp)
}
80203724:	e037883a 	mov	sp,fp
80203728:	dfc00117 	ldw	ra,4(sp)
8020372c:	df000017 	ldw	fp,0(sp)
80203730:	dec00204 	addi	sp,sp,8
80203734:	f800283a 	ret

80203738 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
80203738:	defffd04 	addi	sp,sp,-12
8020373c:	dfc00215 	stw	ra,8(sp)
80203740:	df000115 	stw	fp,4(sp)
80203744:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
80203748:	0009883a 	mov	r4,zero
8020374c:	0203be00 	call	80203be0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
80203750:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
80203754:	0203c180 	call	80203c18 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
80203758:	01a00874 	movhi	r6,32801
8020375c:	31a22c04 	addi	r6,r6,-30544
80203760:	01600874 	movhi	r5,32801
80203764:	29622c04 	addi	r5,r5,-30544
80203768:	01200874 	movhi	r4,32801
8020376c:	21222c04 	addi	r4,r4,-30544
80203770:	02078e40 	call	802078e4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
80203774:	02074300 	call	80207430 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
80203778:	01200834 	movhi	r4,32800
8020377c:	211d2404 	addi	r4,r4,29840
80203780:	020822c0 	call	8020822c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
80203784:	d0a01417 	ldw	r2,-32688(gp)
80203788:	d0e01517 	ldw	r3,-32684(gp)
8020378c:	d1201617 	ldw	r4,-32680(gp)
80203790:	200d883a 	mov	r6,r4
80203794:	180b883a 	mov	r5,r3
80203798:	1009883a 	mov	r4,r2
8020379c:	02004b40 	call	802004b4 <main>
802037a0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
802037a4:	01000044 	movi	r4,1
802037a8:	02033600 	call	80203360 <close>
  exit (result);
802037ac:	e13fff17 	ldw	r4,-4(fp)
802037b0:	02082400 	call	80208240 <exit>

802037b4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
802037b4:	defffe04 	addi	sp,sp,-8
802037b8:	df000115 	stw	fp,4(sp)
802037bc:	df000104 	addi	fp,sp,4
802037c0:	e13fff15 	stw	r4,-4(fp)
}
802037c4:	0001883a 	nop
802037c8:	e037883a 	mov	sp,fp
802037cc:	df000017 	ldw	fp,0(sp)
802037d0:	dec00104 	addi	sp,sp,4
802037d4:	f800283a 	ret

802037d8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
802037d8:	defffe04 	addi	sp,sp,-8
802037dc:	df000115 	stw	fp,4(sp)
802037e0:	df000104 	addi	fp,sp,4
802037e4:	e13fff15 	stw	r4,-4(fp)
}
802037e8:	0001883a 	nop
802037ec:	e037883a 	mov	sp,fp
802037f0:	df000017 	ldw	fp,0(sp)
802037f4:	dec00104 	addi	sp,sp,4
802037f8:	f800283a 	ret

802037fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
802037fc:	defffe04 	addi	sp,sp,-8
80203800:	dfc00115 	stw	ra,4(sp)
80203804:	df000015 	stw	fp,0(sp)
80203808:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8020380c:	d0a00917 	ldw	r2,-32732(gp)
80203810:	10000326 	beq	r2,zero,80203820 <alt_get_errno+0x24>
80203814:	d0a00917 	ldw	r2,-32732(gp)
80203818:	103ee83a 	callr	r2
8020381c:	00000106 	br	80203824 <alt_get_errno+0x28>
80203820:	d0a01304 	addi	r2,gp,-32692
}
80203824:	e037883a 	mov	sp,fp
80203828:	dfc00117 	ldw	ra,4(sp)
8020382c:	df000017 	ldw	fp,0(sp)
80203830:	dec00204 	addi	sp,sp,8
80203834:	f800283a 	ret

80203838 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
80203838:	defff904 	addi	sp,sp,-28
8020383c:	dfc00615 	stw	ra,24(sp)
80203840:	df000515 	stw	fp,20(sp)
80203844:	df000504 	addi	fp,sp,20
80203848:	e13ffd15 	stw	r4,-12(fp)
8020384c:	e17ffe15 	stw	r5,-8(fp)
80203850:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
80203854:	e0bffd17 	ldw	r2,-12(fp)
80203858:	10000616 	blt	r2,zero,80203874 <read+0x3c>
8020385c:	e0bffd17 	ldw	r2,-12(fp)
80203860:	10c00324 	muli	r3,r2,12
80203864:	00a00874 	movhi	r2,32801
80203868:	10a4e904 	addi	r2,r2,-27740
8020386c:	1885883a 	add	r2,r3,r2
80203870:	00000106 	br	80203878 <read+0x40>
80203874:	0005883a 	mov	r2,zero
80203878:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
8020387c:	e0bffb17 	ldw	r2,-20(fp)
80203880:	10002226 	beq	r2,zero,8020390c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
80203884:	e0bffb17 	ldw	r2,-20(fp)
80203888:	10800217 	ldw	r2,8(r2)
8020388c:	108000cc 	andi	r2,r2,3
80203890:	10800060 	cmpeqi	r2,r2,1
80203894:	1000181e 	bne	r2,zero,802038f8 <read+0xc0>
        (fd->dev->read))
80203898:	e0bffb17 	ldw	r2,-20(fp)
8020389c:	10800017 	ldw	r2,0(r2)
802038a0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
802038a4:	10001426 	beq	r2,zero,802038f8 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
802038a8:	e0bffb17 	ldw	r2,-20(fp)
802038ac:	10800017 	ldw	r2,0(r2)
802038b0:	10800517 	ldw	r2,20(r2)
802038b4:	e0ffff17 	ldw	r3,-4(fp)
802038b8:	180d883a 	mov	r6,r3
802038bc:	e17ffe17 	ldw	r5,-8(fp)
802038c0:	e13ffb17 	ldw	r4,-20(fp)
802038c4:	103ee83a 	callr	r2
802038c8:	e0bffc15 	stw	r2,-16(fp)
802038cc:	e0bffc17 	ldw	r2,-16(fp)
802038d0:	1000070e 	bge	r2,zero,802038f0 <read+0xb8>
        {
          ALT_ERRNO = -rval;
802038d4:	02037fc0 	call	802037fc <alt_get_errno>
802038d8:	1007883a 	mov	r3,r2
802038dc:	e0bffc17 	ldw	r2,-16(fp)
802038e0:	0085c83a 	sub	r2,zero,r2
802038e4:	18800015 	stw	r2,0(r3)
          return -1;
802038e8:	00bfffc4 	movi	r2,-1
802038ec:	00000c06 	br	80203920 <read+0xe8>
        }
        return rval;
802038f0:	e0bffc17 	ldw	r2,-16(fp)
802038f4:	00000a06 	br	80203920 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
802038f8:	02037fc0 	call	802037fc <alt_get_errno>
802038fc:	1007883a 	mov	r3,r2
80203900:	00800344 	movi	r2,13
80203904:	18800015 	stw	r2,0(r3)
80203908:	00000406 	br	8020391c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
8020390c:	02037fc0 	call	802037fc <alt_get_errno>
80203910:	1007883a 	mov	r3,r2
80203914:	00801444 	movi	r2,81
80203918:	18800015 	stw	r2,0(r3)
  }
  return -1;
8020391c:	00bfffc4 	movi	r2,-1
}
80203920:	e037883a 	mov	sp,fp
80203924:	dfc00117 	ldw	ra,4(sp)
80203928:	df000017 	ldw	fp,0(sp)
8020392c:	dec00204 	addi	sp,sp,8
80203930:	f800283a 	ret

80203934 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
80203934:	defffe04 	addi	sp,sp,-8
80203938:	df000115 	stw	fp,4(sp)
8020393c:	df000104 	addi	fp,sp,4
80203940:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
80203944:	e0bfff17 	ldw	r2,-4(fp)
80203948:	108000d0 	cmplti	r2,r2,3
8020394c:	10000d1e 	bne	r2,zero,80203984 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
80203950:	00a00874 	movhi	r2,32801
80203954:	10a4e904 	addi	r2,r2,-27740
80203958:	e0ffff17 	ldw	r3,-4(fp)
8020395c:	18c00324 	muli	r3,r3,12
80203960:	10c5883a 	add	r2,r2,r3
80203964:	10800204 	addi	r2,r2,8
80203968:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
8020396c:	00a00874 	movhi	r2,32801
80203970:	10a4e904 	addi	r2,r2,-27740
80203974:	e0ffff17 	ldw	r3,-4(fp)
80203978:	18c00324 	muli	r3,r3,12
8020397c:	10c5883a 	add	r2,r2,r3
80203980:	10000015 	stw	zero,0(r2)
  }
}
80203984:	0001883a 	nop
80203988:	e037883a 	mov	sp,fp
8020398c:	df000017 	ldw	fp,0(sp)
80203990:	dec00104 	addi	sp,sp,4
80203994:	f800283a 	ret

80203998 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
80203998:	defff904 	addi	sp,sp,-28
8020399c:	df000615 	stw	fp,24(sp)
802039a0:	df000604 	addi	fp,sp,24
802039a4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
802039a8:	0005303a 	rdctl	r2,status
802039ac:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
802039b0:	e0fffe17 	ldw	r3,-8(fp)
802039b4:	00bfff84 	movi	r2,-2
802039b8:	1884703a 	and	r2,r3,r2
802039bc:	1001703a 	wrctl	status,r2
  
  return context;
802039c0:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
802039c4:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
802039c8:	d0a00a17 	ldw	r2,-32728(gp)
802039cc:	10c000c4 	addi	r3,r2,3
802039d0:	00bfff04 	movi	r2,-4
802039d4:	1884703a 	and	r2,r3,r2
802039d8:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
802039dc:	d0e00a17 	ldw	r3,-32728(gp)
802039e0:	e0bfff17 	ldw	r2,-4(fp)
802039e4:	1887883a 	add	r3,r3,r2
802039e8:	00a00c34 	movhi	r2,32816
802039ec:	10800004 	addi	r2,r2,0
802039f0:	10c0062e 	bgeu	r2,r3,80203a0c <sbrk+0x74>
802039f4:	e0bffb17 	ldw	r2,-20(fp)
802039f8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
802039fc:	e0bffa17 	ldw	r2,-24(fp)
80203a00:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
80203a04:	00bfffc4 	movi	r2,-1
80203a08:	00000b06 	br	80203a38 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
80203a0c:	d0a00a17 	ldw	r2,-32728(gp)
80203a10:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
80203a14:	d0e00a17 	ldw	r3,-32728(gp)
80203a18:	e0bfff17 	ldw	r2,-4(fp)
80203a1c:	1885883a 	add	r2,r3,r2
80203a20:	d0a00a15 	stw	r2,-32728(gp)
80203a24:	e0bffb17 	ldw	r2,-20(fp)
80203a28:	e0bffc15 	stw	r2,-16(fp)
80203a2c:	e0bffc17 	ldw	r2,-16(fp)
80203a30:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
80203a34:	e0bffd17 	ldw	r2,-12(fp)
} 
80203a38:	e037883a 	mov	sp,fp
80203a3c:	df000017 	ldw	fp,0(sp)
80203a40:	dec00104 	addi	sp,sp,4
80203a44:	f800283a 	ret

80203a48 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
80203a48:	defffd04 	addi	sp,sp,-12
80203a4c:	dfc00215 	stw	ra,8(sp)
80203a50:	df000115 	stw	fp,4(sp)
80203a54:	df000104 	addi	fp,sp,4
80203a58:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
80203a5c:	e13fff17 	ldw	r4,-4(fp)
80203a60:	02072000 	call	80207200 <alt_busy_sleep>
}
80203a64:	e037883a 	mov	sp,fp
80203a68:	dfc00117 	ldw	ra,4(sp)
80203a6c:	df000017 	ldw	fp,0(sp)
80203a70:	dec00204 	addi	sp,sp,8
80203a74:	f800283a 	ret

80203a78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80203a78:	defffe04 	addi	sp,sp,-8
80203a7c:	dfc00115 	stw	ra,4(sp)
80203a80:	df000015 	stw	fp,0(sp)
80203a84:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80203a88:	d0a00917 	ldw	r2,-32732(gp)
80203a8c:	10000326 	beq	r2,zero,80203a9c <alt_get_errno+0x24>
80203a90:	d0a00917 	ldw	r2,-32732(gp)
80203a94:	103ee83a 	callr	r2
80203a98:	00000106 	br	80203aa0 <alt_get_errno+0x28>
80203a9c:	d0a01304 	addi	r2,gp,-32692
}
80203aa0:	e037883a 	mov	sp,fp
80203aa4:	dfc00117 	ldw	ra,4(sp)
80203aa8:	df000017 	ldw	fp,0(sp)
80203aac:	dec00204 	addi	sp,sp,8
80203ab0:	f800283a 	ret

80203ab4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
80203ab4:	defff904 	addi	sp,sp,-28
80203ab8:	dfc00615 	stw	ra,24(sp)
80203abc:	df000515 	stw	fp,20(sp)
80203ac0:	df000504 	addi	fp,sp,20
80203ac4:	e13ffd15 	stw	r4,-12(fp)
80203ac8:	e17ffe15 	stw	r5,-8(fp)
80203acc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
80203ad0:	e0bffd17 	ldw	r2,-12(fp)
80203ad4:	10000616 	blt	r2,zero,80203af0 <write+0x3c>
80203ad8:	e0bffd17 	ldw	r2,-12(fp)
80203adc:	10c00324 	muli	r3,r2,12
80203ae0:	00a00874 	movhi	r2,32801
80203ae4:	10a4e904 	addi	r2,r2,-27740
80203ae8:	1885883a 	add	r2,r3,r2
80203aec:	00000106 	br	80203af4 <write+0x40>
80203af0:	0005883a 	mov	r2,zero
80203af4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
80203af8:	e0bffb17 	ldw	r2,-20(fp)
80203afc:	10002126 	beq	r2,zero,80203b84 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
80203b00:	e0bffb17 	ldw	r2,-20(fp)
80203b04:	10800217 	ldw	r2,8(r2)
80203b08:	108000cc 	andi	r2,r2,3
80203b0c:	10001826 	beq	r2,zero,80203b70 <write+0xbc>
80203b10:	e0bffb17 	ldw	r2,-20(fp)
80203b14:	10800017 	ldw	r2,0(r2)
80203b18:	10800617 	ldw	r2,24(r2)
80203b1c:	10001426 	beq	r2,zero,80203b70 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
80203b20:	e0bffb17 	ldw	r2,-20(fp)
80203b24:	10800017 	ldw	r2,0(r2)
80203b28:	10800617 	ldw	r2,24(r2)
80203b2c:	e0ffff17 	ldw	r3,-4(fp)
80203b30:	180d883a 	mov	r6,r3
80203b34:	e17ffe17 	ldw	r5,-8(fp)
80203b38:	e13ffb17 	ldw	r4,-20(fp)
80203b3c:	103ee83a 	callr	r2
80203b40:	e0bffc15 	stw	r2,-16(fp)
80203b44:	e0bffc17 	ldw	r2,-16(fp)
80203b48:	1000070e 	bge	r2,zero,80203b68 <write+0xb4>
      {
        ALT_ERRNO = -rval;
80203b4c:	0203a780 	call	80203a78 <alt_get_errno>
80203b50:	1007883a 	mov	r3,r2
80203b54:	e0bffc17 	ldw	r2,-16(fp)
80203b58:	0085c83a 	sub	r2,zero,r2
80203b5c:	18800015 	stw	r2,0(r3)
        return -1;
80203b60:	00bfffc4 	movi	r2,-1
80203b64:	00000c06 	br	80203b98 <write+0xe4>
      }
      return rval;
80203b68:	e0bffc17 	ldw	r2,-16(fp)
80203b6c:	00000a06 	br	80203b98 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
80203b70:	0203a780 	call	80203a78 <alt_get_errno>
80203b74:	1007883a 	mov	r3,r2
80203b78:	00800344 	movi	r2,13
80203b7c:	18800015 	stw	r2,0(r3)
80203b80:	00000406 	br	80203b94 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
80203b84:	0203a780 	call	80203a78 <alt_get_errno>
80203b88:	1007883a 	mov	r3,r2
80203b8c:	00801444 	movi	r2,81
80203b90:	18800015 	stw	r2,0(r3)
  }
  return -1;
80203b94:	00bfffc4 	movi	r2,-1
}
80203b98:	e037883a 	mov	sp,fp
80203b9c:	dfc00117 	ldw	ra,4(sp)
80203ba0:	df000017 	ldw	fp,0(sp)
80203ba4:	dec00204 	addi	sp,sp,8
80203ba8:	f800283a 	ret

80203bac <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
80203bac:	defffd04 	addi	sp,sp,-12
80203bb0:	dfc00215 	stw	ra,8(sp)
80203bb4:	df000115 	stw	fp,4(sp)
80203bb8:	df000104 	addi	fp,sp,4
80203bbc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
80203bc0:	d1600604 	addi	r5,gp,-32744
80203bc4:	e13fff17 	ldw	r4,-4(fp)
80203bc8:	020738c0 	call	8020738c <alt_dev_llist_insert>
}
80203bcc:	e037883a 	mov	sp,fp
80203bd0:	dfc00117 	ldw	ra,4(sp)
80203bd4:	df000017 	ldw	fp,0(sp)
80203bd8:	dec00204 	addi	sp,sp,8
80203bdc:	f800283a 	ret

80203be0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
80203be0:	defffd04 	addi	sp,sp,-12
80203be4:	dfc00215 	stw	ra,8(sp)
80203be8:	df000115 	stw	fp,4(sp)
80203bec:	df000104 	addi	fp,sp,4
80203bf0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
80203bf4:	0207fc00 	call	80207fc0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
80203bf8:	00800044 	movi	r2,1
80203bfc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
80203c00:	0001883a 	nop
80203c04:	e037883a 	mov	sp,fp
80203c08:	dfc00117 	ldw	ra,4(sp)
80203c0c:	df000017 	ldw	fp,0(sp)
80203c10:	dec00204 	addi	sp,sp,8
80203c14:	f800283a 	ret

80203c18 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
80203c18:	defffe04 	addi	sp,sp,-8
80203c1c:	dfc00115 	stw	ra,4(sp)
80203c20:	df000015 	stw	fp,0(sp)
80203c24:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_1MS, timer_1ms);
80203c28:	01c0fa04 	movi	r7,1000
80203c2c:	000d883a 	mov	r6,zero
80203c30:	000b883a 	mov	r5,zero
80203c34:	01204034 	movhi	r4,33024
80203c38:	21022004 	addi	r4,r4,2176
80203c3c:	02047e00 	call	802047e0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1US, timer_1us);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
80203c40:	01800384 	movi	r6,14
80203c44:	000b883a 	mov	r5,zero
80203c48:	01200874 	movhi	r4,32801
80203c4c:	21255604 	addi	r4,r4,-27304
80203c50:	0203e640 	call	80203e64 <altera_avalon_jtag_uart_init>
80203c54:	01200874 	movhi	r4,32801
80203c58:	21254c04 	addi	r4,r4,-27344
80203c5c:	0203bac0 	call	80203bac <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
80203c60:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( RS232_UART, rs232_uart);
80203c64:	01800344 	movi	r6,13
80203c68:	000b883a 	mov	r5,zero
80203c6c:	01200874 	movhi	r4,32801
80203c70:	21296e04 	addi	r4,r4,-23112
80203c74:	020496c0 	call	8020496c <altera_avalon_uart_init>
80203c78:	01200874 	movhi	r4,32801
80203c7c:	21296404 	addi	r4,r4,-23152
80203c80:	0203bac0 	call	80203bac <alt_dev_reg>
    ALTERA_MSGDMA_INIT ( DMA_DDR_M1, dma_DDR_M1);
80203c84:	00a00874 	movhi	r2,32801
80203c88:	10a99804 	addi	r2,r2,-22944
80203c8c:	10c00717 	ldw	r3,28(r2)
80203c90:	00a00874 	movhi	r2,32801
80203c94:	10a99804 	addi	r2,r2,-22944
80203c98:	10800817 	ldw	r2,32(r2)
80203c9c:	100d883a 	mov	r6,r2
80203ca0:	180b883a 	mov	r5,r3
80203ca4:	01200874 	movhi	r4,32801
80203ca8:	21299804 	addi	r4,r4,-22944
80203cac:	0206e240 	call	80206e24 <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( DMA_DDR_M2, dma_DDR_M2);
80203cb0:	00a00874 	movhi	r2,32801
80203cb4:	10a9b004 	addi	r2,r2,-22848
80203cb8:	10c00717 	ldw	r3,28(r2)
80203cbc:	00a00874 	movhi	r2,32801
80203cc0:	10a9b004 	addi	r2,r2,-22848
80203cc4:	10800817 	ldw	r2,32(r2)
80203cc8:	100d883a 	mov	r6,r2
80203ccc:	180b883a 	mov	r5,r3
80203cd0:	01200874 	movhi	r4,32801
80203cd4:	2129b004 	addi	r4,r4,-22848
80203cd8:	0206e240 	call	80206e24 <alt_msgdma_init>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
80203cdc:	01200874 	movhi	r4,32801
80203ce0:	2129c804 	addi	r4,r4,-22752
80203ce4:	0203bac0 	call	80203bac <alt_dev_reg>
}
80203ce8:	0001883a 	nop
80203cec:	e037883a 	mov	sp,fp
80203cf0:	dfc00117 	ldw	ra,4(sp)
80203cf4:	df000017 	ldw	fp,0(sp)
80203cf8:	dec00204 	addi	sp,sp,8
80203cfc:	f800283a 	ret

80203d00 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
80203d00:	defffa04 	addi	sp,sp,-24
80203d04:	dfc00515 	stw	ra,20(sp)
80203d08:	df000415 	stw	fp,16(sp)
80203d0c:	df000404 	addi	fp,sp,16
80203d10:	e13ffd15 	stw	r4,-12(fp)
80203d14:	e17ffe15 	stw	r5,-8(fp)
80203d18:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
80203d1c:	e0bffd17 	ldw	r2,-12(fp)
80203d20:	10800017 	ldw	r2,0(r2)
80203d24:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
80203d28:	e0bffc17 	ldw	r2,-16(fp)
80203d2c:	10c00a04 	addi	r3,r2,40
80203d30:	e0bffd17 	ldw	r2,-12(fp)
80203d34:	10800217 	ldw	r2,8(r2)
80203d38:	100f883a 	mov	r7,r2
80203d3c:	e1bfff17 	ldw	r6,-4(fp)
80203d40:	e17ffe17 	ldw	r5,-8(fp)
80203d44:	1809883a 	mov	r4,r3
80203d48:	02043280 	call	80204328 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
80203d4c:	e037883a 	mov	sp,fp
80203d50:	dfc00117 	ldw	ra,4(sp)
80203d54:	df000017 	ldw	fp,0(sp)
80203d58:	dec00204 	addi	sp,sp,8
80203d5c:	f800283a 	ret

80203d60 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
80203d60:	defffa04 	addi	sp,sp,-24
80203d64:	dfc00515 	stw	ra,20(sp)
80203d68:	df000415 	stw	fp,16(sp)
80203d6c:	df000404 	addi	fp,sp,16
80203d70:	e13ffd15 	stw	r4,-12(fp)
80203d74:	e17ffe15 	stw	r5,-8(fp)
80203d78:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
80203d7c:	e0bffd17 	ldw	r2,-12(fp)
80203d80:	10800017 	ldw	r2,0(r2)
80203d84:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
80203d88:	e0bffc17 	ldw	r2,-16(fp)
80203d8c:	10c00a04 	addi	r3,r2,40
80203d90:	e0bffd17 	ldw	r2,-12(fp)
80203d94:	10800217 	ldw	r2,8(r2)
80203d98:	100f883a 	mov	r7,r2
80203d9c:	e1bfff17 	ldw	r6,-4(fp)
80203da0:	e17ffe17 	ldw	r5,-8(fp)
80203da4:	1809883a 	mov	r4,r3
80203da8:	02045440 	call	80204544 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
80203dac:	e037883a 	mov	sp,fp
80203db0:	dfc00117 	ldw	ra,4(sp)
80203db4:	df000017 	ldw	fp,0(sp)
80203db8:	dec00204 	addi	sp,sp,8
80203dbc:	f800283a 	ret

80203dc0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
80203dc0:	defffc04 	addi	sp,sp,-16
80203dc4:	dfc00315 	stw	ra,12(sp)
80203dc8:	df000215 	stw	fp,8(sp)
80203dcc:	df000204 	addi	fp,sp,8
80203dd0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
80203dd4:	e0bfff17 	ldw	r2,-4(fp)
80203dd8:	10800017 	ldw	r2,0(r2)
80203ddc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
80203de0:	e0bffe17 	ldw	r2,-8(fp)
80203de4:	10c00a04 	addi	r3,r2,40
80203de8:	e0bfff17 	ldw	r2,-4(fp)
80203dec:	10800217 	ldw	r2,8(r2)
80203df0:	100b883a 	mov	r5,r2
80203df4:	1809883a 	mov	r4,r3
80203df8:	02041d00 	call	802041d0 <altera_avalon_jtag_uart_close>
}
80203dfc:	e037883a 	mov	sp,fp
80203e00:	dfc00117 	ldw	ra,4(sp)
80203e04:	df000017 	ldw	fp,0(sp)
80203e08:	dec00204 	addi	sp,sp,8
80203e0c:	f800283a 	ret

80203e10 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
80203e10:	defffa04 	addi	sp,sp,-24
80203e14:	dfc00515 	stw	ra,20(sp)
80203e18:	df000415 	stw	fp,16(sp)
80203e1c:	df000404 	addi	fp,sp,16
80203e20:	e13ffd15 	stw	r4,-12(fp)
80203e24:	e17ffe15 	stw	r5,-8(fp)
80203e28:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
80203e2c:	e0bffd17 	ldw	r2,-12(fp)
80203e30:	10800017 	ldw	r2,0(r2)
80203e34:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
80203e38:	e0bffc17 	ldw	r2,-16(fp)
80203e3c:	10800a04 	addi	r2,r2,40
80203e40:	e1bfff17 	ldw	r6,-4(fp)
80203e44:	e17ffe17 	ldw	r5,-8(fp)
80203e48:	1009883a 	mov	r4,r2
80203e4c:	02042380 	call	80204238 <altera_avalon_jtag_uart_ioctl>
}
80203e50:	e037883a 	mov	sp,fp
80203e54:	dfc00117 	ldw	ra,4(sp)
80203e58:	df000017 	ldw	fp,0(sp)
80203e5c:	dec00204 	addi	sp,sp,8
80203e60:	f800283a 	ret

80203e64 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
80203e64:	defffa04 	addi	sp,sp,-24
80203e68:	dfc00515 	stw	ra,20(sp)
80203e6c:	df000415 	stw	fp,16(sp)
80203e70:	df000404 	addi	fp,sp,16
80203e74:	e13ffd15 	stw	r4,-12(fp)
80203e78:	e17ffe15 	stw	r5,-8(fp)
80203e7c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
80203e80:	e0bffd17 	ldw	r2,-12(fp)
80203e84:	00c00044 	movi	r3,1
80203e88:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
80203e8c:	e0bffd17 	ldw	r2,-12(fp)
80203e90:	10800017 	ldw	r2,0(r2)
80203e94:	10800104 	addi	r2,r2,4
80203e98:	1007883a 	mov	r3,r2
80203e9c:	e0bffd17 	ldw	r2,-12(fp)
80203ea0:	10800817 	ldw	r2,32(r2)
80203ea4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
80203ea8:	e0bffe17 	ldw	r2,-8(fp)
80203eac:	e0ffff17 	ldw	r3,-4(fp)
80203eb0:	d8000015 	stw	zero,0(sp)
80203eb4:	e1fffd17 	ldw	r7,-12(fp)
80203eb8:	01a00834 	movhi	r6,32800
80203ebc:	318fc904 	addi	r6,r6,16164
80203ec0:	180b883a 	mov	r5,r3
80203ec4:	1009883a 	mov	r4,r2
80203ec8:	02075800 	call	80207580 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
80203ecc:	e0bffd17 	ldw	r2,-12(fp)
80203ed0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
80203ed4:	e0bffd17 	ldw	r2,-12(fp)
80203ed8:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
80203edc:	d0e01817 	ldw	r3,-32672(gp)
80203ee0:	e1fffd17 	ldw	r7,-12(fp)
80203ee4:	01a00834 	movhi	r6,32800
80203ee8:	31904c04 	addi	r6,r6,16688
80203eec:	180b883a 	mov	r5,r3
80203ef0:	1009883a 	mov	r4,r2
80203ef4:	02070d40 	call	802070d4 <alt_alarm_start>
80203ef8:	1000040e 	bge	r2,zero,80203f0c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
80203efc:	e0fffd17 	ldw	r3,-12(fp)
80203f00:	00a00034 	movhi	r2,32768
80203f04:	10bfffc4 	addi	r2,r2,-1
80203f08:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
80203f0c:	0001883a 	nop
80203f10:	e037883a 	mov	sp,fp
80203f14:	dfc00117 	ldw	ra,4(sp)
80203f18:	df000017 	ldw	fp,0(sp)
80203f1c:	dec00204 	addi	sp,sp,8
80203f20:	f800283a 	ret

80203f24 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
80203f24:	defff804 	addi	sp,sp,-32
80203f28:	df000715 	stw	fp,28(sp)
80203f2c:	df000704 	addi	fp,sp,28
80203f30:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
80203f34:	e0bfff17 	ldw	r2,-4(fp)
80203f38:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
80203f3c:	e0bffb17 	ldw	r2,-20(fp)
80203f40:	10800017 	ldw	r2,0(r2)
80203f44:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
80203f48:	e0bffc17 	ldw	r2,-16(fp)
80203f4c:	10800104 	addi	r2,r2,4
80203f50:	10800037 	ldwio	r2,0(r2)
80203f54:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
80203f58:	e0bffd17 	ldw	r2,-12(fp)
80203f5c:	1080c00c 	andi	r2,r2,768
80203f60:	10006d26 	beq	r2,zero,80204118 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
80203f64:	e0bffd17 	ldw	r2,-12(fp)
80203f68:	1080400c 	andi	r2,r2,256
80203f6c:	10003526 	beq	r2,zero,80204044 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
80203f70:	00800074 	movhi	r2,1
80203f74:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
80203f78:	e0bffb17 	ldw	r2,-20(fp)
80203f7c:	10800a17 	ldw	r2,40(r2)
80203f80:	10800044 	addi	r2,r2,1
80203f84:	1081ffcc 	andi	r2,r2,2047
80203f88:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
80203f8c:	e0bffb17 	ldw	r2,-20(fp)
80203f90:	10c00b17 	ldw	r3,44(r2)
80203f94:	e0bffe17 	ldw	r2,-8(fp)
80203f98:	18801526 	beq	r3,r2,80203ff0 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
80203f9c:	e0bffc17 	ldw	r2,-16(fp)
80203fa0:	10800037 	ldwio	r2,0(r2)
80203fa4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
80203fa8:	e0bff917 	ldw	r2,-28(fp)
80203fac:	10a0000c 	andi	r2,r2,32768
80203fb0:	10001126 	beq	r2,zero,80203ff8 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
80203fb4:	e0bffb17 	ldw	r2,-20(fp)
80203fb8:	10800a17 	ldw	r2,40(r2)
80203fbc:	e0fff917 	ldw	r3,-28(fp)
80203fc0:	1809883a 	mov	r4,r3
80203fc4:	e0fffb17 	ldw	r3,-20(fp)
80203fc8:	1885883a 	add	r2,r3,r2
80203fcc:	10800e04 	addi	r2,r2,56
80203fd0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
80203fd4:	e0bffb17 	ldw	r2,-20(fp)
80203fd8:	10800a17 	ldw	r2,40(r2)
80203fdc:	10800044 	addi	r2,r2,1
80203fe0:	10c1ffcc 	andi	r3,r2,2047
80203fe4:	e0bffb17 	ldw	r2,-20(fp)
80203fe8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
80203fec:	003fe206 	br	80203f78 <__reset+0xfa1e3f78>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
80203ff0:	0001883a 	nop
80203ff4:	00000106 	br	80203ffc <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
80203ff8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
80203ffc:	e0bff917 	ldw	r2,-28(fp)
80204000:	10bfffec 	andhi	r2,r2,65535
80204004:	10000f26 	beq	r2,zero,80204044 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
80204008:	e0bffb17 	ldw	r2,-20(fp)
8020400c:	10c00817 	ldw	r3,32(r2)
80204010:	00bfff84 	movi	r2,-2
80204014:	1886703a 	and	r3,r3,r2
80204018:	e0bffb17 	ldw	r2,-20(fp)
8020401c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
80204020:	e0bffc17 	ldw	r2,-16(fp)
80204024:	10800104 	addi	r2,r2,4
80204028:	1007883a 	mov	r3,r2
8020402c:	e0bffb17 	ldw	r2,-20(fp)
80204030:	10800817 	ldw	r2,32(r2)
80204034:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
80204038:	e0bffc17 	ldw	r2,-16(fp)
8020403c:	10800104 	addi	r2,r2,4
80204040:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
80204044:	e0bffd17 	ldw	r2,-12(fp)
80204048:	1080800c 	andi	r2,r2,512
8020404c:	103fbe26 	beq	r2,zero,80203f48 <__reset+0xfa1e3f48>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
80204050:	e0bffd17 	ldw	r2,-12(fp)
80204054:	1004d43a 	srli	r2,r2,16
80204058:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
8020405c:	00001406 	br	802040b0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
80204060:	e0bffc17 	ldw	r2,-16(fp)
80204064:	e0fffb17 	ldw	r3,-20(fp)
80204068:	18c00d17 	ldw	r3,52(r3)
8020406c:	e13ffb17 	ldw	r4,-20(fp)
80204070:	20c7883a 	add	r3,r4,r3
80204074:	18c20e04 	addi	r3,r3,2104
80204078:	18c00003 	ldbu	r3,0(r3)
8020407c:	18c03fcc 	andi	r3,r3,255
80204080:	18c0201c 	xori	r3,r3,128
80204084:	18ffe004 	addi	r3,r3,-128
80204088:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
8020408c:	e0bffb17 	ldw	r2,-20(fp)
80204090:	10800d17 	ldw	r2,52(r2)
80204094:	10800044 	addi	r2,r2,1
80204098:	10c1ffcc 	andi	r3,r2,2047
8020409c:	e0bffb17 	ldw	r2,-20(fp)
802040a0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
802040a4:	e0bffa17 	ldw	r2,-24(fp)
802040a8:	10bfffc4 	addi	r2,r2,-1
802040ac:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
802040b0:	e0bffa17 	ldw	r2,-24(fp)
802040b4:	10000526 	beq	r2,zero,802040cc <altera_avalon_jtag_uart_irq+0x1a8>
802040b8:	e0bffb17 	ldw	r2,-20(fp)
802040bc:	10c00d17 	ldw	r3,52(r2)
802040c0:	e0bffb17 	ldw	r2,-20(fp)
802040c4:	10800c17 	ldw	r2,48(r2)
802040c8:	18bfe51e 	bne	r3,r2,80204060 <__reset+0xfa1e4060>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
802040cc:	e0bffa17 	ldw	r2,-24(fp)
802040d0:	103f9d26 	beq	r2,zero,80203f48 <__reset+0xfa1e3f48>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
802040d4:	e0bffb17 	ldw	r2,-20(fp)
802040d8:	10c00817 	ldw	r3,32(r2)
802040dc:	00bfff44 	movi	r2,-3
802040e0:	1886703a 	and	r3,r3,r2
802040e4:	e0bffb17 	ldw	r2,-20(fp)
802040e8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
802040ec:	e0bffb17 	ldw	r2,-20(fp)
802040f0:	10800017 	ldw	r2,0(r2)
802040f4:	10800104 	addi	r2,r2,4
802040f8:	1007883a 	mov	r3,r2
802040fc:	e0bffb17 	ldw	r2,-20(fp)
80204100:	10800817 	ldw	r2,32(r2)
80204104:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
80204108:	e0bffc17 	ldw	r2,-16(fp)
8020410c:	10800104 	addi	r2,r2,4
80204110:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
80204114:	003f8c06 	br	80203f48 <__reset+0xfa1e3f48>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
80204118:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
8020411c:	0001883a 	nop
80204120:	e037883a 	mov	sp,fp
80204124:	df000017 	ldw	fp,0(sp)
80204128:	dec00104 	addi	sp,sp,4
8020412c:	f800283a 	ret

80204130 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
80204130:	defff804 	addi	sp,sp,-32
80204134:	df000715 	stw	fp,28(sp)
80204138:	df000704 	addi	fp,sp,28
8020413c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
80204140:	e0bffb17 	ldw	r2,-20(fp)
80204144:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
80204148:	e0bff917 	ldw	r2,-28(fp)
8020414c:	10800017 	ldw	r2,0(r2)
80204150:	10800104 	addi	r2,r2,4
80204154:	10800037 	ldwio	r2,0(r2)
80204158:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
8020415c:	e0bffa17 	ldw	r2,-24(fp)
80204160:	1081000c 	andi	r2,r2,1024
80204164:	10000b26 	beq	r2,zero,80204194 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
80204168:	e0bff917 	ldw	r2,-28(fp)
8020416c:	10800017 	ldw	r2,0(r2)
80204170:	10800104 	addi	r2,r2,4
80204174:	1007883a 	mov	r3,r2
80204178:	e0bff917 	ldw	r2,-28(fp)
8020417c:	10800817 	ldw	r2,32(r2)
80204180:	10810014 	ori	r2,r2,1024
80204184:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
80204188:	e0bff917 	ldw	r2,-28(fp)
8020418c:	10000915 	stw	zero,36(r2)
80204190:	00000a06 	br	802041bc <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
80204194:	e0bff917 	ldw	r2,-28(fp)
80204198:	10c00917 	ldw	r3,36(r2)
8020419c:	00a00034 	movhi	r2,32768
802041a0:	10bfff04 	addi	r2,r2,-4
802041a4:	10c00536 	bltu	r2,r3,802041bc <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
802041a8:	e0bff917 	ldw	r2,-28(fp)
802041ac:	10800917 	ldw	r2,36(r2)
802041b0:	10c00044 	addi	r3,r2,1
802041b4:	e0bff917 	ldw	r2,-28(fp)
802041b8:	10c00915 	stw	r3,36(r2)
802041bc:	d0a01817 	ldw	r2,-32672(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
802041c0:	e037883a 	mov	sp,fp
802041c4:	df000017 	ldw	fp,0(sp)
802041c8:	dec00104 	addi	sp,sp,4
802041cc:	f800283a 	ret

802041d0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
802041d0:	defffd04 	addi	sp,sp,-12
802041d4:	df000215 	stw	fp,8(sp)
802041d8:	df000204 	addi	fp,sp,8
802041dc:	e13ffe15 	stw	r4,-8(fp)
802041e0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
802041e4:	00000506 	br	802041fc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
802041e8:	e0bfff17 	ldw	r2,-4(fp)
802041ec:	1090000c 	andi	r2,r2,16384
802041f0:	10000226 	beq	r2,zero,802041fc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
802041f4:	00bffd44 	movi	r2,-11
802041f8:	00000b06 	br	80204228 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
802041fc:	e0bffe17 	ldw	r2,-8(fp)
80204200:	10c00d17 	ldw	r3,52(r2)
80204204:	e0bffe17 	ldw	r2,-8(fp)
80204208:	10800c17 	ldw	r2,48(r2)
8020420c:	18800526 	beq	r3,r2,80204224 <altera_avalon_jtag_uart_close+0x54>
80204210:	e0bffe17 	ldw	r2,-8(fp)
80204214:	10c00917 	ldw	r3,36(r2)
80204218:	e0bffe17 	ldw	r2,-8(fp)
8020421c:	10800117 	ldw	r2,4(r2)
80204220:	18bff136 	bltu	r3,r2,802041e8 <__reset+0xfa1e41e8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
80204224:	0005883a 	mov	r2,zero
}
80204228:	e037883a 	mov	sp,fp
8020422c:	df000017 	ldw	fp,0(sp)
80204230:	dec00104 	addi	sp,sp,4
80204234:	f800283a 	ret

80204238 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
80204238:	defffa04 	addi	sp,sp,-24
8020423c:	df000515 	stw	fp,20(sp)
80204240:	df000504 	addi	fp,sp,20
80204244:	e13ffd15 	stw	r4,-12(fp)
80204248:	e17ffe15 	stw	r5,-8(fp)
8020424c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
80204250:	00bff9c4 	movi	r2,-25
80204254:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
80204258:	e0bffe17 	ldw	r2,-8(fp)
8020425c:	10da8060 	cmpeqi	r3,r2,27137
80204260:	1800031e 	bne	r3,zero,80204270 <altera_avalon_jtag_uart_ioctl+0x38>
80204264:	109a80a0 	cmpeqi	r2,r2,27138
80204268:	1000181e 	bne	r2,zero,802042cc <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
8020426c:	00002906 	br	80204314 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
80204270:	e0bffd17 	ldw	r2,-12(fp)
80204274:	10c00117 	ldw	r3,4(r2)
80204278:	00a00034 	movhi	r2,32768
8020427c:	10bfffc4 	addi	r2,r2,-1
80204280:	18802126 	beq	r3,r2,80204308 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
80204284:	e0bfff17 	ldw	r2,-4(fp)
80204288:	10800017 	ldw	r2,0(r2)
8020428c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
80204290:	e0bffc17 	ldw	r2,-16(fp)
80204294:	10800090 	cmplti	r2,r2,2
80204298:	1000061e 	bne	r2,zero,802042b4 <altera_avalon_jtag_uart_ioctl+0x7c>
8020429c:	e0fffc17 	ldw	r3,-16(fp)
802042a0:	00a00034 	movhi	r2,32768
802042a4:	10bfffc4 	addi	r2,r2,-1
802042a8:	18800226 	beq	r3,r2,802042b4 <altera_avalon_jtag_uart_ioctl+0x7c>
802042ac:	e0bffc17 	ldw	r2,-16(fp)
802042b0:	00000206 	br	802042bc <altera_avalon_jtag_uart_ioctl+0x84>
802042b4:	00a00034 	movhi	r2,32768
802042b8:	10bfff84 	addi	r2,r2,-2
802042bc:	e0fffd17 	ldw	r3,-12(fp)
802042c0:	18800115 	stw	r2,4(r3)
      rc = 0;
802042c4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
802042c8:	00000f06 	br	80204308 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
802042cc:	e0bffd17 	ldw	r2,-12(fp)
802042d0:	10c00117 	ldw	r3,4(r2)
802042d4:	00a00034 	movhi	r2,32768
802042d8:	10bfffc4 	addi	r2,r2,-1
802042dc:	18800c26 	beq	r3,r2,80204310 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
802042e0:	e0bffd17 	ldw	r2,-12(fp)
802042e4:	10c00917 	ldw	r3,36(r2)
802042e8:	e0bffd17 	ldw	r2,-12(fp)
802042ec:	10800117 	ldw	r2,4(r2)
802042f0:	1885803a 	cmpltu	r2,r3,r2
802042f4:	10c03fcc 	andi	r3,r2,255
802042f8:	e0bfff17 	ldw	r2,-4(fp)
802042fc:	10c00015 	stw	r3,0(r2)
      rc = 0;
80204300:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
80204304:	00000206 	br	80204310 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
80204308:	0001883a 	nop
8020430c:	00000106 	br	80204314 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
80204310:	0001883a 	nop

  default:
    break;
  }

  return rc;
80204314:	e0bffb17 	ldw	r2,-20(fp)
}
80204318:	e037883a 	mov	sp,fp
8020431c:	df000017 	ldw	fp,0(sp)
80204320:	dec00104 	addi	sp,sp,4
80204324:	f800283a 	ret

80204328 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
80204328:	defff304 	addi	sp,sp,-52
8020432c:	dfc00c15 	stw	ra,48(sp)
80204330:	df000b15 	stw	fp,44(sp)
80204334:	df000b04 	addi	fp,sp,44
80204338:	e13ffc15 	stw	r4,-16(fp)
8020433c:	e17ffd15 	stw	r5,-12(fp)
80204340:	e1bffe15 	stw	r6,-8(fp)
80204344:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
80204348:	e0bffd17 	ldw	r2,-12(fp)
8020434c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
80204350:	00004706 	br	80204470 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
80204354:	e0bffc17 	ldw	r2,-16(fp)
80204358:	10800a17 	ldw	r2,40(r2)
8020435c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
80204360:	e0bffc17 	ldw	r2,-16(fp)
80204364:	10800b17 	ldw	r2,44(r2)
80204368:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
8020436c:	e0fff717 	ldw	r3,-36(fp)
80204370:	e0bff817 	ldw	r2,-32(fp)
80204374:	18800536 	bltu	r3,r2,8020438c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
80204378:	e0fff717 	ldw	r3,-36(fp)
8020437c:	e0bff817 	ldw	r2,-32(fp)
80204380:	1885c83a 	sub	r2,r3,r2
80204384:	e0bff615 	stw	r2,-40(fp)
80204388:	00000406 	br	8020439c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
8020438c:	00c20004 	movi	r3,2048
80204390:	e0bff817 	ldw	r2,-32(fp)
80204394:	1885c83a 	sub	r2,r3,r2
80204398:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
8020439c:	e0bff617 	ldw	r2,-40(fp)
802043a0:	10001e26 	beq	r2,zero,8020441c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
802043a4:	e0fffe17 	ldw	r3,-8(fp)
802043a8:	e0bff617 	ldw	r2,-40(fp)
802043ac:	1880022e 	bgeu	r3,r2,802043b8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
802043b0:	e0bffe17 	ldw	r2,-8(fp)
802043b4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
802043b8:	e0bffc17 	ldw	r2,-16(fp)
802043bc:	10c00e04 	addi	r3,r2,56
802043c0:	e0bff817 	ldw	r2,-32(fp)
802043c4:	1885883a 	add	r2,r3,r2
802043c8:	e1bff617 	ldw	r6,-40(fp)
802043cc:	100b883a 	mov	r5,r2
802043d0:	e13ff517 	ldw	r4,-44(fp)
802043d4:	020199c0 	call	8020199c <memcpy>
      ptr   += n;
802043d8:	e0fff517 	ldw	r3,-44(fp)
802043dc:	e0bff617 	ldw	r2,-40(fp)
802043e0:	1885883a 	add	r2,r3,r2
802043e4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
802043e8:	e0fffe17 	ldw	r3,-8(fp)
802043ec:	e0bff617 	ldw	r2,-40(fp)
802043f0:	1885c83a 	sub	r2,r3,r2
802043f4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
802043f8:	e0fff817 	ldw	r3,-32(fp)
802043fc:	e0bff617 	ldw	r2,-40(fp)
80204400:	1885883a 	add	r2,r3,r2
80204404:	10c1ffcc 	andi	r3,r2,2047
80204408:	e0bffc17 	ldw	r2,-16(fp)
8020440c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
80204410:	e0bffe17 	ldw	r2,-8(fp)
80204414:	00bfcf16 	blt	zero,r2,80204354 <__reset+0xfa1e4354>
80204418:	00000106 	br	80204420 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
8020441c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
80204420:	e0fff517 	ldw	r3,-44(fp)
80204424:	e0bffd17 	ldw	r2,-12(fp)
80204428:	1880141e 	bne	r3,r2,8020447c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
8020442c:	e0bfff17 	ldw	r2,-4(fp)
80204430:	1090000c 	andi	r2,r2,16384
80204434:	1000131e 	bne	r2,zero,80204484 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
80204438:	0001883a 	nop
8020443c:	e0bffc17 	ldw	r2,-16(fp)
80204440:	10c00a17 	ldw	r3,40(r2)
80204444:	e0bff717 	ldw	r2,-36(fp)
80204448:	1880051e 	bne	r3,r2,80204460 <altera_avalon_jtag_uart_read+0x138>
8020444c:	e0bffc17 	ldw	r2,-16(fp)
80204450:	10c00917 	ldw	r3,36(r2)
80204454:	e0bffc17 	ldw	r2,-16(fp)
80204458:	10800117 	ldw	r2,4(r2)
8020445c:	18bff736 	bltu	r3,r2,8020443c <__reset+0xfa1e443c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
80204460:	e0bffc17 	ldw	r2,-16(fp)
80204464:	10c00a17 	ldw	r3,40(r2)
80204468:	e0bff717 	ldw	r2,-36(fp)
8020446c:	18800726 	beq	r3,r2,8020448c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
80204470:	e0bffe17 	ldw	r2,-8(fp)
80204474:	00bfb716 	blt	zero,r2,80204354 <__reset+0xfa1e4354>
80204478:	00000506 	br	80204490 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
8020447c:	0001883a 	nop
80204480:	00000306 	br	80204490 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
80204484:	0001883a 	nop
80204488:	00000106 	br	80204490 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
8020448c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
80204490:	e0fff517 	ldw	r3,-44(fp)
80204494:	e0bffd17 	ldw	r2,-12(fp)
80204498:	18801826 	beq	r3,r2,802044fc <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8020449c:	0005303a 	rdctl	r2,status
802044a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
802044a4:	e0fffb17 	ldw	r3,-20(fp)
802044a8:	00bfff84 	movi	r2,-2
802044ac:	1884703a 	and	r2,r3,r2
802044b0:	1001703a 	wrctl	status,r2
  
  return context;
802044b4:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
802044b8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
802044bc:	e0bffc17 	ldw	r2,-16(fp)
802044c0:	10800817 	ldw	r2,32(r2)
802044c4:	10c00054 	ori	r3,r2,1
802044c8:	e0bffc17 	ldw	r2,-16(fp)
802044cc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
802044d0:	e0bffc17 	ldw	r2,-16(fp)
802044d4:	10800017 	ldw	r2,0(r2)
802044d8:	10800104 	addi	r2,r2,4
802044dc:	1007883a 	mov	r3,r2
802044e0:	e0bffc17 	ldw	r2,-16(fp)
802044e4:	10800817 	ldw	r2,32(r2)
802044e8:	18800035 	stwio	r2,0(r3)
802044ec:	e0bffa17 	ldw	r2,-24(fp)
802044f0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
802044f4:	e0bff917 	ldw	r2,-28(fp)
802044f8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
802044fc:	e0fff517 	ldw	r3,-44(fp)
80204500:	e0bffd17 	ldw	r2,-12(fp)
80204504:	18800426 	beq	r3,r2,80204518 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
80204508:	e0fff517 	ldw	r3,-44(fp)
8020450c:	e0bffd17 	ldw	r2,-12(fp)
80204510:	1885c83a 	sub	r2,r3,r2
80204514:	00000606 	br	80204530 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
80204518:	e0bfff17 	ldw	r2,-4(fp)
8020451c:	1090000c 	andi	r2,r2,16384
80204520:	10000226 	beq	r2,zero,8020452c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
80204524:	00bffd44 	movi	r2,-11
80204528:	00000106 	br	80204530 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
8020452c:	00bffec4 	movi	r2,-5
}
80204530:	e037883a 	mov	sp,fp
80204534:	dfc00117 	ldw	ra,4(sp)
80204538:	df000017 	ldw	fp,0(sp)
8020453c:	dec00204 	addi	sp,sp,8
80204540:	f800283a 	ret

80204544 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
80204544:	defff304 	addi	sp,sp,-52
80204548:	dfc00c15 	stw	ra,48(sp)
8020454c:	df000b15 	stw	fp,44(sp)
80204550:	df000b04 	addi	fp,sp,44
80204554:	e13ffc15 	stw	r4,-16(fp)
80204558:	e17ffd15 	stw	r5,-12(fp)
8020455c:	e1bffe15 	stw	r6,-8(fp)
80204560:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
80204564:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
80204568:	e0bffd17 	ldw	r2,-12(fp)
8020456c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
80204570:	00003706 	br	80204650 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
80204574:	e0bffc17 	ldw	r2,-16(fp)
80204578:	10800c17 	ldw	r2,48(r2)
8020457c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
80204580:	e0bffc17 	ldw	r2,-16(fp)
80204584:	10800d17 	ldw	r2,52(r2)
80204588:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
8020458c:	e0fff917 	ldw	r3,-28(fp)
80204590:	e0bff517 	ldw	r2,-44(fp)
80204594:	1880062e 	bgeu	r3,r2,802045b0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
80204598:	e0fff517 	ldw	r3,-44(fp)
8020459c:	e0bff917 	ldw	r2,-28(fp)
802045a0:	1885c83a 	sub	r2,r3,r2
802045a4:	10bfffc4 	addi	r2,r2,-1
802045a8:	e0bff615 	stw	r2,-40(fp)
802045ac:	00000b06 	br	802045dc <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
802045b0:	e0bff517 	ldw	r2,-44(fp)
802045b4:	10000526 	beq	r2,zero,802045cc <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
802045b8:	00c20004 	movi	r3,2048
802045bc:	e0bff917 	ldw	r2,-28(fp)
802045c0:	1885c83a 	sub	r2,r3,r2
802045c4:	e0bff615 	stw	r2,-40(fp)
802045c8:	00000406 	br	802045dc <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
802045cc:	00c1ffc4 	movi	r3,2047
802045d0:	e0bff917 	ldw	r2,-28(fp)
802045d4:	1885c83a 	sub	r2,r3,r2
802045d8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
802045dc:	e0bff617 	ldw	r2,-40(fp)
802045e0:	10001e26 	beq	r2,zero,8020465c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
802045e4:	e0fffe17 	ldw	r3,-8(fp)
802045e8:	e0bff617 	ldw	r2,-40(fp)
802045ec:	1880022e 	bgeu	r3,r2,802045f8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
802045f0:	e0bffe17 	ldw	r2,-8(fp)
802045f4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
802045f8:	e0bffc17 	ldw	r2,-16(fp)
802045fc:	10c20e04 	addi	r3,r2,2104
80204600:	e0bff917 	ldw	r2,-28(fp)
80204604:	1885883a 	add	r2,r3,r2
80204608:	e1bff617 	ldw	r6,-40(fp)
8020460c:	e17ffd17 	ldw	r5,-12(fp)
80204610:	1009883a 	mov	r4,r2
80204614:	020199c0 	call	8020199c <memcpy>
      ptr   += n;
80204618:	e0fffd17 	ldw	r3,-12(fp)
8020461c:	e0bff617 	ldw	r2,-40(fp)
80204620:	1885883a 	add	r2,r3,r2
80204624:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
80204628:	e0fffe17 	ldw	r3,-8(fp)
8020462c:	e0bff617 	ldw	r2,-40(fp)
80204630:	1885c83a 	sub	r2,r3,r2
80204634:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
80204638:	e0fff917 	ldw	r3,-28(fp)
8020463c:	e0bff617 	ldw	r2,-40(fp)
80204640:	1885883a 	add	r2,r3,r2
80204644:	10c1ffcc 	andi	r3,r2,2047
80204648:	e0bffc17 	ldw	r2,-16(fp)
8020464c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
80204650:	e0bffe17 	ldw	r2,-8(fp)
80204654:	00bfc716 	blt	zero,r2,80204574 <__reset+0xfa1e4574>
80204658:	00000106 	br	80204660 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
8020465c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80204660:	0005303a 	rdctl	r2,status
80204664:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80204668:	e0fffb17 	ldw	r3,-20(fp)
8020466c:	00bfff84 	movi	r2,-2
80204670:	1884703a 	and	r2,r3,r2
80204674:	1001703a 	wrctl	status,r2
  
  return context;
80204678:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
8020467c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
80204680:	e0bffc17 	ldw	r2,-16(fp)
80204684:	10800817 	ldw	r2,32(r2)
80204688:	10c00094 	ori	r3,r2,2
8020468c:	e0bffc17 	ldw	r2,-16(fp)
80204690:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
80204694:	e0bffc17 	ldw	r2,-16(fp)
80204698:	10800017 	ldw	r2,0(r2)
8020469c:	10800104 	addi	r2,r2,4
802046a0:	1007883a 	mov	r3,r2
802046a4:	e0bffc17 	ldw	r2,-16(fp)
802046a8:	10800817 	ldw	r2,32(r2)
802046ac:	18800035 	stwio	r2,0(r3)
802046b0:	e0bffa17 	ldw	r2,-24(fp)
802046b4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
802046b8:	e0bff817 	ldw	r2,-32(fp)
802046bc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
802046c0:	e0bffe17 	ldw	r2,-8(fp)
802046c4:	0080100e 	bge	zero,r2,80204708 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
802046c8:	e0bfff17 	ldw	r2,-4(fp)
802046cc:	1090000c 	andi	r2,r2,16384
802046d0:	1000101e 	bne	r2,zero,80204714 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
802046d4:	0001883a 	nop
802046d8:	e0bffc17 	ldw	r2,-16(fp)
802046dc:	10c00d17 	ldw	r3,52(r2)
802046e0:	e0bff517 	ldw	r2,-44(fp)
802046e4:	1880051e 	bne	r3,r2,802046fc <altera_avalon_jtag_uart_write+0x1b8>
802046e8:	e0bffc17 	ldw	r2,-16(fp)
802046ec:	10c00917 	ldw	r3,36(r2)
802046f0:	e0bffc17 	ldw	r2,-16(fp)
802046f4:	10800117 	ldw	r2,4(r2)
802046f8:	18bff736 	bltu	r3,r2,802046d8 <__reset+0xfa1e46d8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
802046fc:	e0bffc17 	ldw	r2,-16(fp)
80204700:	10800917 	ldw	r2,36(r2)
80204704:	1000051e 	bne	r2,zero,8020471c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
80204708:	e0bffe17 	ldw	r2,-8(fp)
8020470c:	00bfd016 	blt	zero,r2,80204650 <__reset+0xfa1e4650>
80204710:	00000306 	br	80204720 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
80204714:	0001883a 	nop
80204718:	00000106 	br	80204720 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
8020471c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
80204720:	e0fffd17 	ldw	r3,-12(fp)
80204724:	e0bff717 	ldw	r2,-36(fp)
80204728:	18800426 	beq	r3,r2,8020473c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
8020472c:	e0fffd17 	ldw	r3,-12(fp)
80204730:	e0bff717 	ldw	r2,-36(fp)
80204734:	1885c83a 	sub	r2,r3,r2
80204738:	00000606 	br	80204754 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
8020473c:	e0bfff17 	ldw	r2,-4(fp)
80204740:	1090000c 	andi	r2,r2,16384
80204744:	10000226 	beq	r2,zero,80204750 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
80204748:	00bffd44 	movi	r2,-11
8020474c:	00000106 	br	80204754 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
80204750:	00bffec4 	movi	r2,-5
}
80204754:	e037883a 	mov	sp,fp
80204758:	dfc00117 	ldw	ra,4(sp)
8020475c:	df000017 	ldw	fp,0(sp)
80204760:	dec00204 	addi	sp,sp,8
80204764:	f800283a 	ret

80204768 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
80204768:	defffa04 	addi	sp,sp,-24
8020476c:	dfc00515 	stw	ra,20(sp)
80204770:	df000415 	stw	fp,16(sp)
80204774:	df000404 	addi	fp,sp,16
80204778:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
8020477c:	0007883a 	mov	r3,zero
80204780:	e0bfff17 	ldw	r2,-4(fp)
80204784:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
80204788:	e0bfff17 	ldw	r2,-4(fp)
8020478c:	10800104 	addi	r2,r2,4
80204790:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80204794:	0005303a 	rdctl	r2,status
80204798:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8020479c:	e0fffd17 	ldw	r3,-12(fp)
802047a0:	00bfff84 	movi	r2,-2
802047a4:	1884703a 	and	r2,r3,r2
802047a8:	1001703a 	wrctl	status,r2
  
  return context;
802047ac:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
802047b0:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
802047b4:	0207eb80 	call	80207eb8 <alt_tick>
802047b8:	e0bffc17 	ldw	r2,-16(fp)
802047bc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
802047c0:	e0bffe17 	ldw	r2,-8(fp)
802047c4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
802047c8:	0001883a 	nop
802047cc:	e037883a 	mov	sp,fp
802047d0:	dfc00117 	ldw	ra,4(sp)
802047d4:	df000017 	ldw	fp,0(sp)
802047d8:	dec00204 	addi	sp,sp,8
802047dc:	f800283a 	ret

802047e0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
802047e0:	defff804 	addi	sp,sp,-32
802047e4:	dfc00715 	stw	ra,28(sp)
802047e8:	df000615 	stw	fp,24(sp)
802047ec:	df000604 	addi	fp,sp,24
802047f0:	e13ffc15 	stw	r4,-16(fp)
802047f4:	e17ffd15 	stw	r5,-12(fp)
802047f8:	e1bffe15 	stw	r6,-8(fp)
802047fc:	e1ffff15 	stw	r7,-4(fp)
80204800:	e0bfff17 	ldw	r2,-4(fp)
80204804:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
80204808:	d0a01817 	ldw	r2,-32672(gp)
8020480c:	1000021e 	bne	r2,zero,80204818 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
80204810:	e0bffb17 	ldw	r2,-20(fp)
80204814:	d0a01815 	stw	r2,-32672(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
80204818:	e0bffc17 	ldw	r2,-16(fp)
8020481c:	10800104 	addi	r2,r2,4
80204820:	00c001c4 	movi	r3,7
80204824:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
80204828:	d8000015 	stw	zero,0(sp)
8020482c:	e1fffc17 	ldw	r7,-16(fp)
80204830:	01a00834 	movhi	r6,32800
80204834:	3191da04 	addi	r6,r6,18280
80204838:	e17ffe17 	ldw	r5,-8(fp)
8020483c:	e13ffd17 	ldw	r4,-12(fp)
80204840:	02075800 	call	80207580 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
80204844:	0001883a 	nop
80204848:	e037883a 	mov	sp,fp
8020484c:	dfc00117 	ldw	ra,4(sp)
80204850:	df000017 	ldw	fp,0(sp)
80204854:	dec00204 	addi	sp,sp,8
80204858:	f800283a 	ret

8020485c <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
8020485c:	defffa04 	addi	sp,sp,-24
80204860:	dfc00515 	stw	ra,20(sp)
80204864:	df000415 	stw	fp,16(sp)
80204868:	df000404 	addi	fp,sp,16
8020486c:	e13ffd15 	stw	r4,-12(fp)
80204870:	e17ffe15 	stw	r5,-8(fp)
80204874:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
80204878:	e0bffd17 	ldw	r2,-12(fp)
8020487c:	10800017 	ldw	r2,0(r2)
80204880:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
80204884:	e0bffc17 	ldw	r2,-16(fp)
80204888:	10c00a04 	addi	r3,r2,40
8020488c:	e0bffd17 	ldw	r2,-12(fp)
80204890:	10800217 	ldw	r2,8(r2)
80204894:	100f883a 	mov	r7,r2
80204898:	e1bfff17 	ldw	r6,-4(fp)
8020489c:	e17ffe17 	ldw	r5,-8(fp)
802048a0:	1809883a 	mov	r4,r3
802048a4:	0204d700 	call	80204d70 <altera_avalon_uart_read>
      fd->fd_flags);
}
802048a8:	e037883a 	mov	sp,fp
802048ac:	dfc00117 	ldw	ra,4(sp)
802048b0:	df000017 	ldw	fp,0(sp)
802048b4:	dec00204 	addi	sp,sp,8
802048b8:	f800283a 	ret

802048bc <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
802048bc:	defffa04 	addi	sp,sp,-24
802048c0:	dfc00515 	stw	ra,20(sp)
802048c4:	df000415 	stw	fp,16(sp)
802048c8:	df000404 	addi	fp,sp,16
802048cc:	e13ffd15 	stw	r4,-12(fp)
802048d0:	e17ffe15 	stw	r5,-8(fp)
802048d4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
802048d8:	e0bffd17 	ldw	r2,-12(fp)
802048dc:	10800017 	ldw	r2,0(r2)
802048e0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
802048e4:	e0bffc17 	ldw	r2,-16(fp)
802048e8:	10c00a04 	addi	r3,r2,40
802048ec:	e0bffd17 	ldw	r2,-12(fp)
802048f0:	10800217 	ldw	r2,8(r2)
802048f4:	100f883a 	mov	r7,r2
802048f8:	e1bfff17 	ldw	r6,-4(fp)
802048fc:	e17ffe17 	ldw	r5,-8(fp)
80204900:	1809883a 	mov	r4,r3
80204904:	0204f880 	call	80204f88 <altera_avalon_uart_write>
      fd->fd_flags);
}
80204908:	e037883a 	mov	sp,fp
8020490c:	dfc00117 	ldw	ra,4(sp)
80204910:	df000017 	ldw	fp,0(sp)
80204914:	dec00204 	addi	sp,sp,8
80204918:	f800283a 	ret

8020491c <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
8020491c:	defffc04 	addi	sp,sp,-16
80204920:	dfc00315 	stw	ra,12(sp)
80204924:	df000215 	stw	fp,8(sp)
80204928:	df000204 	addi	fp,sp,8
8020492c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
80204930:	e0bfff17 	ldw	r2,-4(fp)
80204934:	10800017 	ldw	r2,0(r2)
80204938:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
8020493c:	e0bffe17 	ldw	r2,-8(fp)
80204940:	10c00a04 	addi	r3,r2,40
80204944:	e0bfff17 	ldw	r2,-4(fp)
80204948:	10800217 	ldw	r2,8(r2)
8020494c:	100b883a 	mov	r5,r2
80204950:	1809883a 	mov	r4,r3
80204954:	0204ce00 	call	80204ce0 <altera_avalon_uart_close>
}
80204958:	e037883a 	mov	sp,fp
8020495c:	dfc00117 	ldw	ra,4(sp)
80204960:	df000017 	ldw	fp,0(sp)
80204964:	dec00204 	addi	sp,sp,8
80204968:	f800283a 	ret

8020496c <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
8020496c:	defff804 	addi	sp,sp,-32
80204970:	dfc00715 	stw	ra,28(sp)
80204974:	df000615 	stw	fp,24(sp)
80204978:	df000604 	addi	fp,sp,24
8020497c:	e13ffd15 	stw	r4,-12(fp)
80204980:	e17ffe15 	stw	r5,-8(fp)
80204984:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
80204988:	e0bffd17 	ldw	r2,-12(fp)
8020498c:	10800017 	ldw	r2,0(r2)
80204990:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
80204994:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
80204998:	1000041e 	bne	r2,zero,802049ac <altera_avalon_uart_init+0x40>
8020499c:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
802049a0:	1000021e 	bne	r2,zero,802049ac <altera_avalon_uart_init+0x40>
802049a4:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
802049a8:	10000226 	beq	r2,zero,802049b4 <altera_avalon_uart_init+0x48>
802049ac:	00800044 	movi	r2,1
802049b0:	00000106 	br	802049b8 <altera_avalon_uart_init+0x4c>
802049b4:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
802049b8:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
802049bc:	e0bffc17 	ldw	r2,-16(fp)
802049c0:	10000f1e 	bne	r2,zero,80204a00 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
802049c4:	e0bffd17 	ldw	r2,-12(fp)
802049c8:	00c32004 	movi	r3,3200
802049cc:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
802049d0:	e0bffb17 	ldw	r2,-20(fp)
802049d4:	10800304 	addi	r2,r2,12
802049d8:	e0fffd17 	ldw	r3,-12(fp)
802049dc:	18c00117 	ldw	r3,4(r3)
802049e0:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
802049e4:	d8000015 	stw	zero,0(sp)
802049e8:	e1fffd17 	ldw	r7,-12(fp)
802049ec:	01a00834 	movhi	r6,32800
802049f0:	31928604 	addi	r6,r6,18968
802049f4:	e17fff17 	ldw	r5,-4(fp)
802049f8:	e13ffe17 	ldw	r4,-8(fp)
802049fc:	02075800 	call	80207580 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
80204a00:	0001883a 	nop
80204a04:	e037883a 	mov	sp,fp
80204a08:	dfc00117 	ldw	ra,4(sp)
80204a0c:	df000017 	ldw	fp,0(sp)
80204a10:	dec00204 	addi	sp,sp,8
80204a14:	f800283a 	ret

80204a18 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
80204a18:	defffa04 	addi	sp,sp,-24
80204a1c:	dfc00515 	stw	ra,20(sp)
80204a20:	df000415 	stw	fp,16(sp)
80204a24:	df000404 	addi	fp,sp,16
80204a28:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
80204a2c:	e0bfff17 	ldw	r2,-4(fp)
80204a30:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
80204a34:	e0bffc17 	ldw	r2,-16(fp)
80204a38:	10800017 	ldw	r2,0(r2)
80204a3c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
80204a40:	e0bffd17 	ldw	r2,-12(fp)
80204a44:	10800204 	addi	r2,r2,8
80204a48:	10800037 	ldwio	r2,0(r2)
80204a4c:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
80204a50:	e0bffd17 	ldw	r2,-12(fp)
80204a54:	10800204 	addi	r2,r2,8
80204a58:	0007883a 	mov	r3,zero
80204a5c:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
80204a60:	e0bffd17 	ldw	r2,-12(fp)
80204a64:	10800204 	addi	r2,r2,8
80204a68:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
80204a6c:	e0bffe17 	ldw	r2,-8(fp)
80204a70:	1080200c 	andi	r2,r2,128
80204a74:	10000326 	beq	r2,zero,80204a84 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
80204a78:	e17ffe17 	ldw	r5,-8(fp)
80204a7c:	e13ffc17 	ldw	r4,-16(fp)
80204a80:	0204ab40 	call	80204ab4 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
80204a84:	e0bffe17 	ldw	r2,-8(fp)
80204a88:	1081100c 	andi	r2,r2,1088
80204a8c:	10000326 	beq	r2,zero,80204a9c <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
80204a90:	e17ffe17 	ldw	r5,-8(fp)
80204a94:	e13ffc17 	ldw	r4,-16(fp)
80204a98:	0204b980 	call	80204b98 <altera_avalon_uart_txirq>
  }
  

}
80204a9c:	0001883a 	nop
80204aa0:	e037883a 	mov	sp,fp
80204aa4:	dfc00117 	ldw	ra,4(sp)
80204aa8:	df000017 	ldw	fp,0(sp)
80204aac:	dec00204 	addi	sp,sp,8
80204ab0:	f800283a 	ret

80204ab4 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
80204ab4:	defffc04 	addi	sp,sp,-16
80204ab8:	df000315 	stw	fp,12(sp)
80204abc:	df000304 	addi	fp,sp,12
80204ac0:	e13ffe15 	stw	r4,-8(fp)
80204ac4:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
80204ac8:	e0bfff17 	ldw	r2,-4(fp)
80204acc:	108000cc 	andi	r2,r2,3
80204ad0:	10002c1e 	bne	r2,zero,80204b84 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
80204ad4:	e0bffe17 	ldw	r2,-8(fp)
80204ad8:	10800317 	ldw	r2,12(r2)
80204adc:	e0bffe17 	ldw	r2,-8(fp)
80204ae0:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
80204ae4:	e0bffe17 	ldw	r2,-8(fp)
80204ae8:	10800317 	ldw	r2,12(r2)
80204aec:	10800044 	addi	r2,r2,1
80204af0:	10800fcc 	andi	r2,r2,63
80204af4:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
80204af8:	e0bffe17 	ldw	r2,-8(fp)
80204afc:	10800317 	ldw	r2,12(r2)
80204b00:	e0fffe17 	ldw	r3,-8(fp)
80204b04:	18c00017 	ldw	r3,0(r3)
80204b08:	18c00037 	ldwio	r3,0(r3)
80204b0c:	1809883a 	mov	r4,r3
80204b10:	e0fffe17 	ldw	r3,-8(fp)
80204b14:	1885883a 	add	r2,r3,r2
80204b18:	10800704 	addi	r2,r2,28
80204b1c:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
80204b20:	e0bffe17 	ldw	r2,-8(fp)
80204b24:	e0fffd17 	ldw	r3,-12(fp)
80204b28:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
80204b2c:	e0bffe17 	ldw	r2,-8(fp)
80204b30:	10800317 	ldw	r2,12(r2)
80204b34:	10800044 	addi	r2,r2,1
80204b38:	10800fcc 	andi	r2,r2,63
80204b3c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
80204b40:	e0bffe17 	ldw	r2,-8(fp)
80204b44:	10c00217 	ldw	r3,8(r2)
80204b48:	e0bffd17 	ldw	r2,-12(fp)
80204b4c:	18800e1e 	bne	r3,r2,80204b88 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
80204b50:	e0bffe17 	ldw	r2,-8(fp)
80204b54:	10c00117 	ldw	r3,4(r2)
80204b58:	00bfdfc4 	movi	r2,-129
80204b5c:	1886703a 	and	r3,r3,r2
80204b60:	e0bffe17 	ldw	r2,-8(fp)
80204b64:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
80204b68:	e0bffe17 	ldw	r2,-8(fp)
80204b6c:	10800017 	ldw	r2,0(r2)
80204b70:	10800304 	addi	r2,r2,12
80204b74:	e0fffe17 	ldw	r3,-8(fp)
80204b78:	18c00117 	ldw	r3,4(r3)
80204b7c:	10c00035 	stwio	r3,0(r2)
80204b80:	00000106 	br	80204b88 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
80204b84:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
80204b88:	e037883a 	mov	sp,fp
80204b8c:	df000017 	ldw	fp,0(sp)
80204b90:	dec00104 	addi	sp,sp,4
80204b94:	f800283a 	ret

80204b98 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
80204b98:	defffb04 	addi	sp,sp,-20
80204b9c:	df000415 	stw	fp,16(sp)
80204ba0:	df000404 	addi	fp,sp,16
80204ba4:	e13ffc15 	stw	r4,-16(fp)
80204ba8:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
80204bac:	e0bffc17 	ldw	r2,-16(fp)
80204bb0:	10c00417 	ldw	r3,16(r2)
80204bb4:	e0bffc17 	ldw	r2,-16(fp)
80204bb8:	10800517 	ldw	r2,20(r2)
80204bbc:	18803226 	beq	r3,r2,80204c88 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
80204bc0:	e0bffc17 	ldw	r2,-16(fp)
80204bc4:	10800617 	ldw	r2,24(r2)
80204bc8:	1080008c 	andi	r2,r2,2
80204bcc:	10000326 	beq	r2,zero,80204bdc <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
80204bd0:	e0bffd17 	ldw	r2,-12(fp)
80204bd4:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
80204bd8:	10001d26 	beq	r2,zero,80204c50 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
80204bdc:	e0bffc17 	ldw	r2,-16(fp)
80204be0:	10800417 	ldw	r2,16(r2)
80204be4:	e0bffc17 	ldw	r2,-16(fp)
80204be8:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
80204bec:	e0bffc17 	ldw	r2,-16(fp)
80204bf0:	10800017 	ldw	r2,0(r2)
80204bf4:	10800104 	addi	r2,r2,4
80204bf8:	e0fffc17 	ldw	r3,-16(fp)
80204bfc:	18c00417 	ldw	r3,16(r3)
80204c00:	e13ffc17 	ldw	r4,-16(fp)
80204c04:	20c7883a 	add	r3,r4,r3
80204c08:	18c01704 	addi	r3,r3,92
80204c0c:	18c00003 	ldbu	r3,0(r3)
80204c10:	18c03fcc 	andi	r3,r3,255
80204c14:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
80204c18:	e0bffc17 	ldw	r2,-16(fp)
80204c1c:	10800417 	ldw	r2,16(r2)
80204c20:	10800044 	addi	r2,r2,1
80204c24:	e0fffc17 	ldw	r3,-16(fp)
80204c28:	18800415 	stw	r2,16(r3)
80204c2c:	10c00fcc 	andi	r3,r2,63
80204c30:	e0bffc17 	ldw	r2,-16(fp)
80204c34:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
80204c38:	e0bffc17 	ldw	r2,-16(fp)
80204c3c:	10800117 	ldw	r2,4(r2)
80204c40:	10c01014 	ori	r3,r2,64
80204c44:	e0bffc17 	ldw	r2,-16(fp)
80204c48:	10c00115 	stw	r3,4(r2)
80204c4c:	00000e06 	br	80204c88 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
80204c50:	e0bffc17 	ldw	r2,-16(fp)
80204c54:	10800017 	ldw	r2,0(r2)
80204c58:	10800204 	addi	r2,r2,8
80204c5c:	10800037 	ldwio	r2,0(r2)
80204c60:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
80204c64:	e0bffd17 	ldw	r2,-12(fp)
80204c68:	1082000c 	andi	r2,r2,2048
80204c6c:	1000061e 	bne	r2,zero,80204c88 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
80204c70:	e0bffc17 	ldw	r2,-16(fp)
80204c74:	10c00117 	ldw	r3,4(r2)
80204c78:	00bfefc4 	movi	r2,-65
80204c7c:	1886703a 	and	r3,r3,r2
80204c80:	e0bffc17 	ldw	r2,-16(fp)
80204c84:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
80204c88:	e0bffc17 	ldw	r2,-16(fp)
80204c8c:	10c00417 	ldw	r3,16(r2)
80204c90:	e0bffc17 	ldw	r2,-16(fp)
80204c94:	10800517 	ldw	r2,20(r2)
80204c98:	1880061e 	bne	r3,r2,80204cb4 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
80204c9c:	e0bffc17 	ldw	r2,-16(fp)
80204ca0:	10c00117 	ldw	r3,4(r2)
80204ca4:	00beefc4 	movi	r2,-1089
80204ca8:	1886703a 	and	r3,r3,r2
80204cac:	e0bffc17 	ldw	r2,-16(fp)
80204cb0:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
80204cb4:	e0bffc17 	ldw	r2,-16(fp)
80204cb8:	10800017 	ldw	r2,0(r2)
80204cbc:	10800304 	addi	r2,r2,12
80204cc0:	e0fffc17 	ldw	r3,-16(fp)
80204cc4:	18c00117 	ldw	r3,4(r3)
80204cc8:	10c00035 	stwio	r3,0(r2)
}
80204ccc:	0001883a 	nop
80204cd0:	e037883a 	mov	sp,fp
80204cd4:	df000017 	ldw	fp,0(sp)
80204cd8:	dec00104 	addi	sp,sp,4
80204cdc:	f800283a 	ret

80204ce0 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
80204ce0:	defffd04 	addi	sp,sp,-12
80204ce4:	df000215 	stw	fp,8(sp)
80204ce8:	df000204 	addi	fp,sp,8
80204cec:	e13ffe15 	stw	r4,-8(fp)
80204cf0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
80204cf4:	00000506 	br	80204d0c <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
80204cf8:	e0bfff17 	ldw	r2,-4(fp)
80204cfc:	1090000c 	andi	r2,r2,16384
80204d00:	10000226 	beq	r2,zero,80204d0c <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
80204d04:	00bffd44 	movi	r2,-11
80204d08:	00000606 	br	80204d24 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
80204d0c:	e0bffe17 	ldw	r2,-8(fp)
80204d10:	10c00417 	ldw	r3,16(r2)
80204d14:	e0bffe17 	ldw	r2,-8(fp)
80204d18:	10800517 	ldw	r2,20(r2)
80204d1c:	18bff61e 	bne	r3,r2,80204cf8 <__reset+0xfa1e4cf8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
80204d20:	0005883a 	mov	r2,zero
}
80204d24:	e037883a 	mov	sp,fp
80204d28:	df000017 	ldw	fp,0(sp)
80204d2c:	dec00104 	addi	sp,sp,4
80204d30:	f800283a 	ret

80204d34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80204d34:	defffe04 	addi	sp,sp,-8
80204d38:	dfc00115 	stw	ra,4(sp)
80204d3c:	df000015 	stw	fp,0(sp)
80204d40:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80204d44:	d0a00917 	ldw	r2,-32732(gp)
80204d48:	10000326 	beq	r2,zero,80204d58 <alt_get_errno+0x24>
80204d4c:	d0a00917 	ldw	r2,-32732(gp)
80204d50:	103ee83a 	callr	r2
80204d54:	00000106 	br	80204d5c <alt_get_errno+0x28>
80204d58:	d0a01304 	addi	r2,gp,-32692
}
80204d5c:	e037883a 	mov	sp,fp
80204d60:	dfc00117 	ldw	ra,4(sp)
80204d64:	df000017 	ldw	fp,0(sp)
80204d68:	dec00204 	addi	sp,sp,8
80204d6c:	f800283a 	ret

80204d70 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
80204d70:	defff204 	addi	sp,sp,-56
80204d74:	dfc00d15 	stw	ra,52(sp)
80204d78:	df000c15 	stw	fp,48(sp)
80204d7c:	df000c04 	addi	fp,sp,48
80204d80:	e13ffc15 	stw	r4,-16(fp)
80204d84:	e17ffd15 	stw	r5,-12(fp)
80204d88:	e1bffe15 	stw	r6,-8(fp)
80204d8c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
80204d90:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
80204d94:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
80204d98:	e0bfff17 	ldw	r2,-4(fp)
80204d9c:	1090000c 	andi	r2,r2,16384
80204da0:	1005003a 	cmpeq	r2,r2,zero
80204da4:	10803fcc 	andi	r2,r2,255
80204da8:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
80204dac:	00001306 	br	80204dfc <altera_avalon_uart_read+0x8c>
    {
      count++;
80204db0:	e0bff517 	ldw	r2,-44(fp)
80204db4:	10800044 	addi	r2,r2,1
80204db8:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
80204dbc:	e0bffd17 	ldw	r2,-12(fp)
80204dc0:	10c00044 	addi	r3,r2,1
80204dc4:	e0fffd15 	stw	r3,-12(fp)
80204dc8:	e0fffc17 	ldw	r3,-16(fp)
80204dcc:	18c00217 	ldw	r3,8(r3)
80204dd0:	e13ffc17 	ldw	r4,-16(fp)
80204dd4:	20c7883a 	add	r3,r4,r3
80204dd8:	18c00704 	addi	r3,r3,28
80204ddc:	18c00003 	ldbu	r3,0(r3)
80204de0:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
80204de4:	e0bffc17 	ldw	r2,-16(fp)
80204de8:	10800217 	ldw	r2,8(r2)
80204dec:	10800044 	addi	r2,r2,1
80204df0:	10c00fcc 	andi	r3,r2,63
80204df4:	e0bffc17 	ldw	r2,-16(fp)
80204df8:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
80204dfc:	e0fff517 	ldw	r3,-44(fp)
80204e00:	e0bffe17 	ldw	r2,-8(fp)
80204e04:	1880050e 	bge	r3,r2,80204e1c <altera_avalon_uart_read+0xac>
80204e08:	e0bffc17 	ldw	r2,-16(fp)
80204e0c:	10c00217 	ldw	r3,8(r2)
80204e10:	e0bffc17 	ldw	r2,-16(fp)
80204e14:	10800317 	ldw	r2,12(r2)
80204e18:	18bfe51e 	bne	r3,r2,80204db0 <__reset+0xfa1e4db0>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
80204e1c:	e0bff517 	ldw	r2,-44(fp)
80204e20:	1000251e 	bne	r2,zero,80204eb8 <altera_avalon_uart_read+0x148>
80204e24:	e0bffc17 	ldw	r2,-16(fp)
80204e28:	10c00217 	ldw	r3,8(r2)
80204e2c:	e0bffc17 	ldw	r2,-16(fp)
80204e30:	10800317 	ldw	r2,12(r2)
80204e34:	1880201e 	bne	r3,r2,80204eb8 <altera_avalon_uart_read+0x148>
    {
      if (!block)
80204e38:	e0bff617 	ldw	r2,-40(fp)
80204e3c:	1000071e 	bne	r2,zero,80204e5c <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
80204e40:	0204d340 	call	80204d34 <alt_get_errno>
80204e44:	1007883a 	mov	r3,r2
80204e48:	008002c4 	movi	r2,11
80204e4c:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
80204e50:	00800044 	movi	r2,1
80204e54:	e0bff405 	stb	r2,-48(fp)
        break;
80204e58:	00001b06 	br	80204ec8 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80204e5c:	0005303a 	rdctl	r2,status
80204e60:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80204e64:	e0fff917 	ldw	r3,-28(fp)
80204e68:	00bfff84 	movi	r2,-2
80204e6c:	1884703a 	and	r2,r3,r2
80204e70:	1001703a 	wrctl	status,r2
  
  return context;
80204e74:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
80204e78:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
80204e7c:	e0bffc17 	ldw	r2,-16(fp)
80204e80:	10800117 	ldw	r2,4(r2)
80204e84:	10c02014 	ori	r3,r2,128
80204e88:	e0bffc17 	ldw	r2,-16(fp)
80204e8c:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
80204e90:	e0bffc17 	ldw	r2,-16(fp)
80204e94:	10800017 	ldw	r2,0(r2)
80204e98:	10800304 	addi	r2,r2,12
80204e9c:	e0fffc17 	ldw	r3,-16(fp)
80204ea0:	18c00117 	ldw	r3,4(r3)
80204ea4:	10c00035 	stwio	r3,0(r2)
80204ea8:	e0bff817 	ldw	r2,-32(fp)
80204eac:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80204eb0:	e0bffa17 	ldw	r2,-24(fp)
80204eb4:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
80204eb8:	e0bff517 	ldw	r2,-44(fp)
80204ebc:	1000021e 	bne	r2,zero,80204ec8 <altera_avalon_uart_read+0x158>
80204ec0:	e0bffe17 	ldw	r2,-8(fp)
80204ec4:	103fcd1e 	bne	r2,zero,80204dfc <__reset+0xfa1e4dfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80204ec8:	0005303a 	rdctl	r2,status
80204ecc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80204ed0:	e0fffb17 	ldw	r3,-20(fp)
80204ed4:	00bfff84 	movi	r2,-2
80204ed8:	1884703a 	and	r2,r3,r2
80204edc:	1001703a 	wrctl	status,r2
  
  return context;
80204ee0:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
80204ee4:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
80204ee8:	e0bffc17 	ldw	r2,-16(fp)
80204eec:	10800117 	ldw	r2,4(r2)
80204ef0:	10c02014 	ori	r3,r2,128
80204ef4:	e0bffc17 	ldw	r2,-16(fp)
80204ef8:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
80204efc:	e0bffc17 	ldw	r2,-16(fp)
80204f00:	10800017 	ldw	r2,0(r2)
80204f04:	10800304 	addi	r2,r2,12
80204f08:	e0fffc17 	ldw	r3,-16(fp)
80204f0c:	18c00117 	ldw	r3,4(r3)
80204f10:	10c00035 	stwio	r3,0(r2)
80204f14:	e0bff817 	ldw	r2,-32(fp)
80204f18:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80204f1c:	e0bff717 	ldw	r2,-36(fp)
80204f20:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
80204f24:	e0bff403 	ldbu	r2,-48(fp)
80204f28:	10000226 	beq	r2,zero,80204f34 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
80204f2c:	00bffd44 	movi	r2,-11
80204f30:	00000106 	br	80204f38 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
80204f34:	e0bff517 	ldw	r2,-44(fp)
  }
}
80204f38:	e037883a 	mov	sp,fp
80204f3c:	dfc00117 	ldw	ra,4(sp)
80204f40:	df000017 	ldw	fp,0(sp)
80204f44:	dec00204 	addi	sp,sp,8
80204f48:	f800283a 	ret

80204f4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80204f4c:	defffe04 	addi	sp,sp,-8
80204f50:	dfc00115 	stw	ra,4(sp)
80204f54:	df000015 	stw	fp,0(sp)
80204f58:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80204f5c:	d0a00917 	ldw	r2,-32732(gp)
80204f60:	10000326 	beq	r2,zero,80204f70 <alt_get_errno+0x24>
80204f64:	d0a00917 	ldw	r2,-32732(gp)
80204f68:	103ee83a 	callr	r2
80204f6c:	00000106 	br	80204f74 <alt_get_errno+0x28>
80204f70:	d0a01304 	addi	r2,gp,-32692
}
80204f74:	e037883a 	mov	sp,fp
80204f78:	dfc00117 	ldw	ra,4(sp)
80204f7c:	df000017 	ldw	fp,0(sp)
80204f80:	dec00204 	addi	sp,sp,8
80204f84:	f800283a 	ret

80204f88 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
80204f88:	defff204 	addi	sp,sp,-56
80204f8c:	dfc00d15 	stw	ra,52(sp)
80204f90:	df000c15 	stw	fp,48(sp)
80204f94:	df000c04 	addi	fp,sp,48
80204f98:	e13ffc15 	stw	r4,-16(fp)
80204f9c:	e17ffd15 	stw	r5,-12(fp)
80204fa0:	e1bffe15 	stw	r6,-8(fp)
80204fa4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
80204fa8:	e0bffe17 	ldw	r2,-8(fp)
80204fac:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
80204fb0:	e0bfff17 	ldw	r2,-4(fp)
80204fb4:	1090000c 	andi	r2,r2,16384
80204fb8:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
80204fbc:	00003c06 	br	802050b0 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
80204fc0:	e0bffc17 	ldw	r2,-16(fp)
80204fc4:	10800517 	ldw	r2,20(r2)
80204fc8:	10800044 	addi	r2,r2,1
80204fcc:	10800fcc 	andi	r2,r2,63
80204fd0:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
80204fd4:	e0bffc17 	ldw	r2,-16(fp)
80204fd8:	10c00417 	ldw	r3,16(r2)
80204fdc:	e0bff717 	ldw	r2,-36(fp)
80204fe0:	1880221e 	bne	r3,r2,8020506c <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
80204fe4:	e0bff517 	ldw	r2,-44(fp)
80204fe8:	10000526 	beq	r2,zero,80205000 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
80204fec:	0204f4c0 	call	80204f4c <alt_get_errno>
80204ff0:	1007883a 	mov	r3,r2
80204ff4:	008002c4 	movi	r2,11
80204ff8:	18800015 	stw	r2,0(r3)
        break;
80204ffc:	00002e06 	br	802050b8 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80205000:	0005303a 	rdctl	r2,status
80205004:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80205008:	e0fff917 	ldw	r3,-28(fp)
8020500c:	00bfff84 	movi	r2,-2
80205010:	1884703a 	and	r2,r3,r2
80205014:	1001703a 	wrctl	status,r2
  
  return context;
80205018:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
8020501c:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
80205020:	e0bffc17 	ldw	r2,-16(fp)
80205024:	10800117 	ldw	r2,4(r2)
80205028:	10c11014 	ori	r3,r2,1088
8020502c:	e0bffc17 	ldw	r2,-16(fp)
80205030:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
80205034:	e0bffc17 	ldw	r2,-16(fp)
80205038:	10800017 	ldw	r2,0(r2)
8020503c:	10800304 	addi	r2,r2,12
80205040:	e0fffc17 	ldw	r3,-16(fp)
80205044:	18c00117 	ldw	r3,4(r3)
80205048:	10c00035 	stwio	r3,0(r2)
8020504c:	e0bff817 	ldw	r2,-32(fp)
80205050:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80205054:	e0bff617 	ldw	r2,-40(fp)
80205058:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
8020505c:	e0bffc17 	ldw	r2,-16(fp)
80205060:	10c00417 	ldw	r3,16(r2)
80205064:	e0bff717 	ldw	r2,-36(fp)
80205068:	18bffc26 	beq	r3,r2,8020505c <__reset+0xfa1e505c>
      }
    }

    count--;
8020506c:	e0bff417 	ldw	r2,-48(fp)
80205070:	10bfffc4 	addi	r2,r2,-1
80205074:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
80205078:	e0bffc17 	ldw	r2,-16(fp)
8020507c:	10c00517 	ldw	r3,20(r2)
80205080:	e0bffd17 	ldw	r2,-12(fp)
80205084:	11000044 	addi	r4,r2,1
80205088:	e13ffd15 	stw	r4,-12(fp)
8020508c:	10800003 	ldbu	r2,0(r2)
80205090:	1009883a 	mov	r4,r2
80205094:	e0bffc17 	ldw	r2,-16(fp)
80205098:	10c5883a 	add	r2,r2,r3
8020509c:	10801704 	addi	r2,r2,92
802050a0:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
802050a4:	e0bffc17 	ldw	r2,-16(fp)
802050a8:	e0fff717 	ldw	r3,-36(fp)
802050ac:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
802050b0:	e0bff417 	ldw	r2,-48(fp)
802050b4:	103fc21e 	bne	r2,zero,80204fc0 <__reset+0xfa1e4fc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
802050b8:	0005303a 	rdctl	r2,status
802050bc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
802050c0:	e0fffb17 	ldw	r3,-20(fp)
802050c4:	00bfff84 	movi	r2,-2
802050c8:	1884703a 	and	r2,r3,r2
802050cc:	1001703a 	wrctl	status,r2
  
  return context;
802050d0:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
802050d4:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
802050d8:	e0bffc17 	ldw	r2,-16(fp)
802050dc:	10800117 	ldw	r2,4(r2)
802050e0:	10c11014 	ori	r3,r2,1088
802050e4:	e0bffc17 	ldw	r2,-16(fp)
802050e8:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
802050ec:	e0bffc17 	ldw	r2,-16(fp)
802050f0:	10800017 	ldw	r2,0(r2)
802050f4:	10800304 	addi	r2,r2,12
802050f8:	e0fffc17 	ldw	r3,-16(fp)
802050fc:	18c00117 	ldw	r3,4(r3)
80205100:	10c00035 	stwio	r3,0(r2)
80205104:	e0bff817 	ldw	r2,-32(fp)
80205108:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8020510c:	e0bffa17 	ldw	r2,-24(fp)
80205110:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
80205114:	e0fffe17 	ldw	r3,-8(fp)
80205118:	e0bff417 	ldw	r2,-48(fp)
8020511c:	1885c83a 	sub	r2,r3,r2
}
80205120:	e037883a 	mov	sp,fp
80205124:	dfc00117 	ldw	ra,4(sp)
80205128:	df000017 	ldw	fp,0(sp)
8020512c:	dec00204 	addi	sp,sp,8
80205130:	f800283a 	ret

80205134 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80205134:	defffe04 	addi	sp,sp,-8
80205138:	dfc00115 	stw	ra,4(sp)
8020513c:	df000015 	stw	fp,0(sp)
80205140:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80205144:	d0a00917 	ldw	r2,-32732(gp)
80205148:	10000326 	beq	r2,zero,80205158 <alt_get_errno+0x24>
8020514c:	d0a00917 	ldw	r2,-32732(gp)
80205150:	103ee83a 	callr	r2
80205154:	00000106 	br	8020515c <alt_get_errno+0x28>
80205158:	d0a01304 	addi	r2,gp,-32692
}
8020515c:	e037883a 	mov	sp,fp
80205160:	dfc00117 	ldw	ra,4(sp)
80205164:	df000017 	ldw	fp,0(sp)
80205168:	dec00204 	addi	sp,sp,8
8020516c:	f800283a 	ret

80205170 <alt_msgdma_write_standard_descriptor>:
 */
static int alt_msgdma_write_standard_descriptor (
    alt_u32 *csr_base, 
    alt_u32 *descriptor_base,
    alt_msgdma_standard_descriptor *descriptor)
{
80205170:	defffc04 	addi	sp,sp,-16
80205174:	df000315 	stw	fp,12(sp)
80205178:	df000304 	addi	fp,sp,12
8020517c:	e13ffd15 	stw	r4,-12(fp)
80205180:	e17ffe15 	stw	r5,-8(fp)
80205184:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
80205188:	e0bffd17 	ldw	r2,-12(fp)
8020518c:	10800037 	ldwio	r2,0(r2)
80205190:	1080010c 	andi	r2,r2,4
80205194:	10000226 	beq	r2,zero,802051a0 <alt_msgdma_write_standard_descriptor+0x30>
        ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
        is non-blocking*/
        return -ENOSPC;
80205198:	00bff904 	movi	r2,-28
8020519c:	00001506 	br	802051f4 <alt_msgdma_write_standard_descriptor+0x84>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base, 
802051a0:	e0bfff17 	ldw	r2,-4(fp)
802051a4:	10800017 	ldw	r2,0(r2)
802051a8:	1007883a 	mov	r3,r2
802051ac:	e0bffe17 	ldw	r2,-8(fp)
802051b0:	10c00035 	stwio	r3,0(r2)
        (alt_u32)descriptor->read_address);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base, 
802051b4:	e0bffe17 	ldw	r2,-8(fp)
802051b8:	10800104 	addi	r2,r2,4
802051bc:	e0ffff17 	ldw	r3,-4(fp)
802051c0:	18c00117 	ldw	r3,4(r3)
802051c4:	10c00035 	stwio	r3,0(r2)
    (    alt_u32)descriptor->write_address);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base, 
802051c8:	e0bffe17 	ldw	r2,-8(fp)
802051cc:	10800204 	addi	r2,r2,8
802051d0:	e0ffff17 	ldw	r3,-4(fp)
802051d4:	18c00217 	ldw	r3,8(r3)
802051d8:	10c00035 	stwio	r3,0(r2)
        descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_STANDARD(descriptor_base, 
802051dc:	e0bffe17 	ldw	r2,-8(fp)
802051e0:	10800304 	addi	r2,r2,12
802051e4:	e0ffff17 	ldw	r3,-4(fp)
802051e8:	18c00317 	ldw	r3,12(r3)
802051ec:	10c00035 	stwio	r3,0(r2)
        descriptor->control);
        return 0;
802051f0:	0005883a 	mov	r2,zero
}
802051f4:	e037883a 	mov	sp,fp
802051f8:	df000017 	ldw	fp,0(sp)
802051fc:	dec00104 	addi	sp,sp,4
80205200:	f800283a 	ret

80205204 <alt_msgdma_write_extended_descriptor>:
 */
static int alt_msgdma_write_extended_descriptor (
    alt_u32 *csr_base, 
    alt_u32 *descriptor_base,
    alt_msgdma_extended_descriptor *descriptor)
{
80205204:	defffc04 	addi	sp,sp,-16
80205208:	df000315 	stw	fp,12(sp)
8020520c:	df000304 	addi	fp,sp,12
80205210:	e13ffd15 	stw	r4,-12(fp)
80205214:	e17ffe15 	stw	r5,-8(fp)
80205218:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
8020521c:	e0bffd17 	ldw	r2,-12(fp)
80205220:	10800037 	ldwio	r2,0(r2)
80205224:	1080010c 	andi	r2,r2,4
80205228:	10000226 	beq	r2,zero,80205234 <alt_msgdma_write_extended_descriptor+0x30>
        ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
    is non-blocking*/
        return -ENOSPC;
8020522c:	00bff904 	movi	r2,-28
80205230:	00003b06 	br	80205320 <alt_msgdma_write_extended_descriptor+0x11c>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(
80205234:	e0bfff17 	ldw	r2,-4(fp)
80205238:	10800017 	ldw	r2,0(r2)
8020523c:	1007883a 	mov	r3,r2
80205240:	e0bffe17 	ldw	r2,-8(fp)
80205244:	10c00035 	stwio	r3,0(r2)
        descriptor_base, 
        (alt_u32)descriptor->read_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(
80205248:	e0bffe17 	ldw	r2,-8(fp)
8020524c:	10800104 	addi	r2,r2,4
80205250:	e0ffff17 	ldw	r3,-4(fp)
80205254:	18c00117 	ldw	r3,4(r3)
80205258:	10c00035 	stwio	r3,0(r2)
        descriptor_base, 
        (alt_u32)descriptor->write_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(
8020525c:	e0bffe17 	ldw	r2,-8(fp)
80205260:	10800204 	addi	r2,r2,8
80205264:	e0ffff17 	ldw	r3,-4(fp)
80205268:	18c00217 	ldw	r3,8(r3)
8020526c:	10c00035 	stwio	r3,0(r2)
        descriptor_base, 
        descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(
80205270:	e0bffe17 	ldw	r2,-8(fp)
80205274:	10800304 	addi	r2,r2,12
80205278:	e0ffff17 	ldw	r3,-4(fp)
8020527c:	18c0030b 	ldhu	r3,12(r3)
80205280:	18ffffcc 	andi	r3,r3,65535
80205284:	10c0002d 	sthio	r3,0(r2)
        descriptor_base, 
        descriptor->sequence_number);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(
80205288:	e0bffe17 	ldw	r2,-8(fp)
8020528c:	10800384 	addi	r2,r2,14
80205290:	e0ffff17 	ldw	r3,-4(fp)
80205294:	18c00383 	ldbu	r3,14(r3)
80205298:	18c03fcc 	andi	r3,r3,255
8020529c:	10c00025 	stbio	r3,0(r2)
        descriptor_base, 
        descriptor->read_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(
802052a0:	e0bffe17 	ldw	r2,-8(fp)
802052a4:	108003c4 	addi	r2,r2,15
802052a8:	e0ffff17 	ldw	r3,-4(fp)
802052ac:	18c003c3 	ldbu	r3,15(r3)
802052b0:	18c03fcc 	andi	r3,r3,255
802052b4:	10c00025 	stbio	r3,0(r2)
        descriptor_base, 
        descriptor->write_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(
802052b8:	e0bffe17 	ldw	r2,-8(fp)
802052bc:	10800404 	addi	r2,r2,16
802052c0:	e0ffff17 	ldw	r3,-4(fp)
802052c4:	18c0040b 	ldhu	r3,16(r3)
802052c8:	18ffffcc 	andi	r3,r3,65535
802052cc:	10c0002d 	sthio	r3,0(r2)
        descriptor_base, 
        descriptor->read_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(
802052d0:	e0bffe17 	ldw	r2,-8(fp)
802052d4:	10800484 	addi	r2,r2,18
802052d8:	e0ffff17 	ldw	r3,-4(fp)
802052dc:	18c0048b 	ldhu	r3,18(r3)
802052e0:	18ffffcc 	andi	r3,r3,65535
802052e4:	10c0002d 	sthio	r3,0(r2)
        descriptor_base, 
        descriptor->write_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base, 0);
802052e8:	e0bffe17 	ldw	r2,-8(fp)
802052ec:	10800504 	addi	r2,r2,20
802052f0:	0007883a 	mov	r3,zero
802052f4:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base, 0);
802052f8:	e0bffe17 	ldw	r2,-8(fp)
802052fc:	10800604 	addi	r2,r2,24
80205300:	0007883a 	mov	r3,zero
80205304:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(
80205308:	e0bffe17 	ldw	r2,-8(fp)
8020530c:	10800704 	addi	r2,r2,28
80205310:	e0ffff17 	ldw	r3,-4(fp)
80205314:	18c00717 	ldw	r3,28(r3)
80205318:	10c00035 	stwio	r3,0(r2)
        descriptor_base, 
        descriptor->control);
    return 0;
8020531c:	0005883a 	mov	r2,zero
}
80205320:	e037883a 	mov	sp,fp
80205324:	df000017 	ldw	fp,0(sp)
80205328:	dec00104 	addi	sp,sp,4
8020532c:	f800283a 	ret

80205330 <alt_msgdma_irq>:
 * alt_msgdma_irq()
 *
 * Interrupt handler for the Modular Scatter-Gather DMA controller.
 */
static void alt_msgdma_irq(void *context)
{
80205330:	defff804 	addi	sp,sp,-32
80205334:	dfc00715 	stw	ra,28(sp)
80205338:	df000615 	stw	fp,24(sp)
8020533c:	df000604 	addi	fp,sp,24
80205340:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev *dev = (alt_msgdma_dev *) context;
80205344:	e0bfff17 	ldw	r2,-4(fp)
80205348:	e0bffa15 	stw	r2,-24(fp)
    alt_irq_context cpu_sr;
    alt_u32 temporary_control;

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
8020534c:	e0bffa17 	ldw	r2,-24(fp)
80205350:	10801783 	ldbu	r2,94(r2)
80205354:	10803fcc 	andi	r2,r2,255
80205358:	10001126 	beq	r2,zero,802053a0 <alt_msgdma_irq+0x70>
    {
        temporary_control = 
                IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
8020535c:	e0bffa17 	ldw	r2,-24(fp)
80205360:	10800617 	ldw	r2,24(r2)
80205364:	10800037 	ldwio	r2,0(r2)

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
    {
        temporary_control = 
80205368:	1007883a 	mov	r3,r2
8020536c:	00bffdc4 	movi	r2,-9
80205370:	1884703a 	and	r2,r3,r2
80205374:	e0bffb15 	stw	r2,-20(fp)
                IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
                & ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
80205378:	e0bffa17 	ldw	r2,-24(fp)
8020537c:	10800617 	ldw	r2,24(r2)
80205380:	e0fffb17 	ldw	r3,-20(fp)
80205384:	10c00035 	stwio	r3,0(r2)
                temporary_control);
        
        /* clear the IRQ status- W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base,
80205388:	e0bffa17 	ldw	r2,-24(fp)
8020538c:	10800617 	ldw	r2,24(r2)
80205390:	10800404 	addi	r2,r2,16
80205394:	00c00044 	movi	r3,1
80205398:	10c00035 	stwio	r3,0(r2)
8020539c:	00001106 	br	802053e4 <alt_msgdma_irq+0xb4>
                ALT_MSGDMA_PREFETCHER_STATUS_IRQ_SET_MASK);
    }
    else
    {
        temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
802053a0:	e0bffa17 	ldw	r2,-24(fp)
802053a4:	10800317 	ldw	r2,12(r2)
802053a8:	10800104 	addi	r2,r2,4
802053ac:	10800037 	ldwio	r2,0(r2)
802053b0:	1007883a 	mov	r3,r2
802053b4:	00bffbc4 	movi	r2,-17
802053b8:	1884703a 	and	r2,r3,r2
802053bc:	e0bffb15 	stw	r2,-20(fp)
                & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
802053c0:	e0bffa17 	ldw	r2,-24(fp)
802053c4:	10800317 	ldw	r2,12(r2)
802053c8:	10800104 	addi	r2,r2,4
802053cc:	e0fffb17 	ldw	r3,-20(fp)
802053d0:	10c00035 	stwio	r3,0(r2)
        /* clear the IRQ status */
        IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
802053d4:	e0bffa17 	ldw	r2,-24(fp)
802053d8:	10800317 	ldw	r2,12(r2)
802053dc:	00c08004 	movi	r3,512
802053e0:	10c00035 	stwio	r3,0(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
802053e4:	e0bffa17 	ldw	r2,-24(fp)
802053e8:	10800b17 	ldw	r2,44(r2)
802053ec:	10001226 	beq	r2,zero,80205438 <alt_msgdma_irq+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
802053f0:	0005303a 	rdctl	r2,status
802053f4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
802053f8:	e0fffd17 	ldw	r3,-12(fp)
802053fc:	00bfff84 	movi	r2,-2
80205400:	1884703a 	and	r2,r3,r2
80205404:	1001703a 	wrctl	status,r2
  
  return context;
80205408:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
8020540c:	e0bffc15 	stw	r2,-16(fp)
        dev->callback (dev->callback_context);
80205410:	e0bffa17 	ldw	r2,-24(fp)
80205414:	10800b17 	ldw	r2,44(r2)
80205418:	e0fffa17 	ldw	r3,-24(fp)
8020541c:	18c00c17 	ldw	r3,48(r3)
80205420:	1809883a 	mov	r4,r3
80205424:	103ee83a 	callr	r2
80205428:	e0bffc17 	ldw	r2,-16(fp)
8020542c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80205430:	e0bffe17 	ldw	r2,-8(fp)
80205434:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
80205438:	e0bffa17 	ldw	r2,-24(fp)
8020543c:	10801783 	ldbu	r2,94(r2)
80205440:	10803fcc 	andi	r2,r2,255
80205444:	10000a26 	beq	r2,zero,80205470 <alt_msgdma_irq+0x140>
    {
        temporary_control = 
                IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
80205448:	e0bffa17 	ldw	r2,-24(fp)
8020544c:	10800617 	ldw	r2,24(r2)
80205450:	10800037 	ldwio	r2,0(r2)
                | ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
80205454:	10800214 	ori	r2,r2,8
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
    {
        temporary_control = 
80205458:	e0bffb15 	stw	r2,-20(fp)
                IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
                | ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
8020545c:	e0bffa17 	ldw	r2,-24(fp)
80205460:	10800617 	ldw	r2,24(r2)
80205464:	e0fffb17 	ldw	r3,-20(fp)
80205468:	10c00035 	stwio	r3,0(r2)
                | (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
    }

    return;
8020546c:	00000c06 	br	802054a0 <alt_msgdma_irq+0x170>
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
                temporary_control);
    }
    else
    {
        temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
80205470:	e0bffa17 	ldw	r2,-24(fp)
80205474:	10800317 	ldw	r2,12(r2)
80205478:	10800104 	addi	r2,r2,4
8020547c:	10800037 	ldwio	r2,0(r2)
                | (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
80205480:	10800414 	ori	r2,r2,16
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
                temporary_control);
    }
    else
    {
        temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
80205484:	e0bffb15 	stw	r2,-20(fp)
                | (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
80205488:	e0bffa17 	ldw	r2,-24(fp)
8020548c:	10800317 	ldw	r2,12(r2)
80205490:	10800104 	addi	r2,r2,4
80205494:	e0fffb17 	ldw	r3,-20(fp)
80205498:	10c00035 	stwio	r3,0(r2)
    }

    return;
8020549c:	0001883a 	nop
}
802054a0:	e037883a 	mov	sp,fp
802054a4:	dfc00117 	ldw	ra,4(sp)
802054a8:	df000017 	ldw	fp,0(sp)
802054ac:	dec00204 	addi	sp,sp,8
802054b0:	f800283a 	ret

802054b4 <alt_msgdma_construct_standard_descriptor>:
    alt_msgdma_standard_descriptor *descriptor,
    alt_u32 *read_address, 
    alt_u32 *write_address, 
    alt_u32 length, 
    alt_u32 control)
{
802054b4:	defffb04 	addi	sp,sp,-20
802054b8:	df000415 	stw	fp,16(sp)
802054bc:	df000404 	addi	fp,sp,16
802054c0:	e13ffc15 	stw	r4,-16(fp)
802054c4:	e17ffd15 	stw	r5,-12(fp)
802054c8:	e1bffe15 	stw	r6,-8(fp)
802054cc:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
802054d0:	e0bffc17 	ldw	r2,-16(fp)
802054d4:	10c01217 	ldw	r3,72(r2)
802054d8:	e0800117 	ldw	r2,4(fp)
802054dc:	18800436 	bltu	r3,r2,802054f0 <alt_msgdma_construct_standard_descriptor+0x3c>
       dev->enhanced_features != 0
802054e0:	e0bffc17 	ldw	r2,-16(fp)
802054e4:	10801703 	ldbu	r2,92(r2)
    alt_u32 *read_address, 
    alt_u32 *write_address, 
    alt_u32 length, 
    alt_u32 control)
{
    if(dev->max_byte < length ||
802054e8:	10803fcc 	andi	r2,r2,255
802054ec:	10000226 	beq	r2,zero,802054f8 <alt_msgdma_construct_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
802054f0:	00bffa84 	movi	r2,-22
802054f4:	00000e06 	br	80205530 <alt_msgdma_construct_standard_descriptor+0x7c>
    }
    descriptor->read_address = read_address;
802054f8:	e0bffd17 	ldw	r2,-12(fp)
802054fc:	e0fffe17 	ldw	r3,-8(fp)
80205500:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
80205504:	e0bffd17 	ldw	r2,-12(fp)
80205508:	e0ffff17 	ldw	r3,-4(fp)
8020550c:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
80205510:	e0bffd17 	ldw	r2,-12(fp)
80205514:	e0c00117 	ldw	r3,4(fp)
80205518:	10c00215 	stw	r3,8(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
8020551c:	e0800217 	ldw	r2,8(fp)
80205520:	10e00034 	orhi	r3,r2,32768
80205524:	e0bffd17 	ldw	r2,-12(fp)
80205528:	10c00315 	stw	r3,12(r2)
    
    return 0;
8020552c:	0005883a 	mov	r2,zero
}
80205530:	e037883a 	mov	sp,fp
80205534:	df000017 	ldw	fp,0(sp)
80205538:	dec00104 	addi	sp,sp,4
8020553c:	f800283a 	ret

80205540 <alt_msgdma_construct_extended_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
80205540:	defff604 	addi	sp,sp,-40
80205544:	df000915 	stw	fp,36(sp)
80205548:	df000904 	addi	fp,sp,36
8020554c:	e13ff715 	stw	r4,-36(fp)
80205550:	e17ff815 	stw	r5,-32(fp)
80205554:	e1bff915 	stw	r6,-28(fp)
80205558:	e1fffa15 	stw	r7,-24(fp)
8020555c:	e1800317 	ldw	r6,12(fp)
80205560:	e1400417 	ldw	r5,16(fp)
80205564:	e1000517 	ldw	r4,20(fp)
80205568:	e0c00617 	ldw	r3,24(fp)
8020556c:	e0800717 	ldw	r2,28(fp)
80205570:	e1bffb0d 	sth	r6,-20(fp)
80205574:	e17ffc05 	stb	r5,-16(fp)
80205578:	e13ffd05 	stb	r4,-12(fp)
8020557c:	e0fffe0d 	sth	r3,-8(fp)
80205580:	e0bfff0d 	sth	r2,-4(fp)
    if(dev->max_byte < length ||
80205584:	e0bff717 	ldw	r2,-36(fp)
80205588:	10c01217 	ldw	r3,72(r2)
8020558c:	e0800117 	ldw	r2,4(fp)
80205590:	18801936 	bltu	r3,r2,802055f8 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
80205594:	e13ff717 	ldw	r4,-36(fp)
80205598:	20801317 	ldw	r2,76(r4)
8020559c:	20c01417 	ldw	r3,80(r4)
802055a0:	e13ffe0b 	ldhu	r4,-8(fp)
802055a4:	213fffcc 	andi	r4,r4,65535
802055a8:	2015883a 	mov	r10,r4
802055ac:	0017883a 	mov	r11,zero
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
    if(dev->max_byte < length ||
802055b0:	1ac01136 	bltu	r3,r11,802055f8 <alt_msgdma_construct_extended_descriptor+0xb8>
802055b4:	58c0011e 	bne	r11,r3,802055bc <alt_msgdma_construct_extended_descriptor+0x7c>
802055b8:	12800f36 	bltu	r2,r10,802055f8 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
802055bc:	e13ff717 	ldw	r4,-36(fp)
802055c0:	20801317 	ldw	r2,76(r4)
802055c4:	20c01417 	ldw	r3,80(r4)
802055c8:	e13fff0b 	ldhu	r4,-4(fp)
802055cc:	213fffcc 	andi	r4,r4,65535
802055d0:	2011883a 	mov	r8,r4
802055d4:	0013883a 	mov	r9,zero
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
802055d8:	1a400736 	bltu	r3,r9,802055f8 <alt_msgdma_construct_extended_descriptor+0xb8>
802055dc:	48c0011e 	bne	r9,r3,802055e4 <alt_msgdma_construct_extended_descriptor+0xa4>
802055e0:	12000536 	bltu	r2,r8,802055f8 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
802055e4:	e0bff717 	ldw	r2,-36(fp)
802055e8:	10801703 	ldbu	r2,92(r2)
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
802055ec:	10803fcc 	andi	r2,r2,255
802055f0:	10800060 	cmpeqi	r2,r2,1
802055f4:	1000021e 	bne	r2,zero,80205600 <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
802055f8:	00bffa84 	movi	r2,-22
802055fc:	00002106 	br	80205684 <alt_msgdma_construct_extended_descriptor+0x144>
    }
    
    descriptor->read_address_low = read_address;
80205600:	e0bff817 	ldw	r2,-32(fp)
80205604:	e0fff917 	ldw	r3,-28(fp)
80205608:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_low = write_address;
8020560c:	e0bff817 	ldw	r2,-32(fp)
80205610:	e0fffa17 	ldw	r3,-24(fp)
80205614:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
80205618:	e0bff817 	ldw	r2,-32(fp)
8020561c:	e0c00117 	ldw	r3,4(fp)
80205620:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
80205624:	e0bff817 	ldw	r2,-32(fp)
80205628:	e0fffb0b 	ldhu	r3,-20(fp)
8020562c:	10c0030d 	sth	r3,12(r2)
    descriptor->read_burst_count = read_burst_count;
80205630:	e0bff817 	ldw	r2,-32(fp)
80205634:	e0fffc03 	ldbu	r3,-16(fp)
80205638:	10c00385 	stb	r3,14(r2)
    descriptor->write_burst_count = write_burst_count;
8020563c:	e0bff817 	ldw	r2,-32(fp)
80205640:	e0fffd03 	ldbu	r3,-12(fp)
80205644:	10c003c5 	stb	r3,15(r2)
    descriptor->read_stride = read_stride;
80205648:	e0bff817 	ldw	r2,-32(fp)
8020564c:	e0fffe0b 	ldhu	r3,-8(fp)
80205650:	10c0040d 	sth	r3,16(r2)
    descriptor->write_stride = write_stride;
80205654:	e0bff817 	ldw	r2,-32(fp)
80205658:	e0ffff0b 	ldhu	r3,-4(fp)
8020565c:	10c0048d 	sth	r3,18(r2)
    descriptor->read_address_high = NULL;
80205660:	e0bff817 	ldw	r2,-32(fp)
80205664:	10000515 	stw	zero,20(r2)
    descriptor->write_address_high = NULL;
80205668:	e0bff817 	ldw	r2,-32(fp)
8020566c:	10000615 	stw	zero,24(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
80205670:	e0800217 	ldw	r2,8(fp)
80205674:	10e00034 	orhi	r3,r2,32768
80205678:	e0bff817 	ldw	r2,-32(fp)
8020567c:	10c00715 	stw	r3,28(r2)

  return 0 ;
80205680:	0005883a 	mov	r2,zero

}
80205684:	e037883a 	mov	sp,fp
80205688:	df000017 	ldw	fp,0(sp)
8020568c:	dec00104 	addi	sp,sp,4
80205690:	f800283a 	ret

80205694 <alt_msgdma_descriptor_async_transfer>:
 */
static int alt_msgdma_descriptor_async_transfer (
    alt_msgdma_dev *dev, 
    alt_msgdma_standard_descriptor *standard_desc, 
    alt_msgdma_extended_descriptor *extended_desc)
{
80205694:	defff004 	addi	sp,sp,-64
80205698:	dfc00f15 	stw	ra,60(sp)
8020569c:	df000e15 	stw	fp,56(sp)
802056a0:	df000e04 	addi	fp,sp,56
802056a4:	e13ffd15 	stw	r4,-12(fp)
802056a8:	e17ffe15 	stw	r5,-8(fp)
802056ac:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control = 0;
802056b0:	e03ff315 	stw	zero,-52(fp)
    alt_irq_context context = 0;
802056b4:	e03ff415 	stw	zero,-48(fp)
    alt_u16 counter = 0;
802056b8:	e03ff20d 	sth	zero,-56(fp)
    alt_u32 fifo_read_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
802056bc:	e0bffd17 	ldw	r2,-12(fp)
802056c0:	10800317 	ldw	r2,12(r2)
802056c4:	10800204 	addi	r2,r2,8
802056c8:	10800037 	ldwio	r2,0(r2)
    alt_msgdma_extended_descriptor *extended_desc)
{
    alt_u32 control = 0;
    alt_irq_context context = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
802056cc:	10bfffcc 	andi	r2,r2,65535
802056d0:	e0bff515 	stw	r2,-44(fp)
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
802056d4:	e0bffd17 	ldw	r2,-12(fp)
802056d8:	10800317 	ldw	r2,12(r2)
802056dc:	10800204 	addi	r2,r2,8
802056e0:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
802056e4:	1004d43a 	srli	r2,r2,16
802056e8:	e0bff615 	stw	r2,-40(fp)
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

    /* Return with error immediately if one of read/write buffer is full */
    if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
802056ec:	e0bffd17 	ldw	r2,-12(fp)
802056f0:	10800917 	ldw	r2,36(r2)
802056f4:	e0fff617 	ldw	r3,-40(fp)
802056f8:	1880042e 	bgeu	r3,r2,8020570c <alt_msgdma_descriptor_async_transfer+0x78>
        (dev->descriptor_fifo_depth <= fifo_read_fill_level))
802056fc:	e0bffd17 	ldw	r2,-12(fp)
80205700:	10800917 	ldw	r2,36(r2)
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

    /* Return with error immediately if one of read/write buffer is full */
    if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
80205704:	e0fff517 	ldw	r3,-44(fp)
80205708:	18800236 	bltu	r3,r2,80205714 <alt_msgdma_descriptor_async_transfer+0x80>
        (dev->descriptor_fifo_depth <= fifo_read_fill_level))
    {
        /*at least one write or read FIFO descriptor buffer is full,
        returning so that this function is non-blocking*/
        return -ENOSPC;
8020570c:	00bff904 	movi	r2,-28
80205710:	00008f06 	br	80205950 <alt_msgdma_descriptor_async_transfer+0x2bc>
    ALT_SEM_PEND (dev->regs_lock, 0);
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
80205714:	00800804 	movi	r2,32
80205718:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8020571c:	0005303a 	rdctl	r2,status
80205720:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80205724:	e0fff717 	ldw	r3,-36(fp)
80205728:	00bfff84 	movi	r2,-2
8020572c:	1884703a 	and	r2,r3,r2
80205730:	1001703a 	wrctl	status,r2
  
  return context;
80205734:	e0bff717 	ldw	r2,-36(fp)
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
80205738:	e0bff415 	stw	r2,-48(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
8020573c:	e0bffd17 	ldw	r2,-12(fp)
80205740:	10800317 	ldw	r2,12(r2)
80205744:	10800104 	addi	r2,r2,4
80205748:	e0fff317 	ldw	r3,-52(fp)
8020574c:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
80205750:	e0bffd17 	ldw	r2,-12(fp)
80205754:	10800317 	ldw	r2,12(r2)
80205758:	e0fffd17 	ldw	r3,-12(fp)
8020575c:	18c00317 	ldw	r3,12(r3)
80205760:	18c00037 	ldwio	r3,0(r3)
80205764:	10c00035 	stwio	r3,0(r2)
80205768:	e0bff417 	ldw	r2,-48(fp)
8020576c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80205770:	e0bffc17 	ldw	r2,-16(fp)
80205774:	1001703a 	wrctl	status,r2
        dev->csr_base, 
        IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
80205778:	e0bffe17 	ldw	r2,-8(fp)
8020577c:	10001a26 	beq	r2,zero,802057e8 <alt_msgdma_descriptor_async_transfer+0x154>
80205780:	e0bfff17 	ldw	r2,-4(fp)
80205784:	1000181e 	bne	r2,zero,802057e8 <alt_msgdma_descriptor_async_transfer+0x154>
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
      write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
80205788:	00000d06 	br	802057c0 <alt_msgdma_descriptor_async_transfer+0x12c>
        dev->csr_base, dev->descriptor_base, standard_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
8020578c:	01000044 	movi	r4,1
80205790:	02072000 	call	80207200 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
80205794:	e0bff20b 	ldhu	r2,-56(fp)
80205798:	1084e230 	cmpltui	r2,r2,5000
8020579c:	1000051e 	bne	r2,zero,802057b4 <alt_msgdma_descriptor_async_transfer+0x120>
            {
                alt_printf("time out after 5 msec while waiting" 
802057a0:	01200874 	movhi	r4,32801
802057a4:	21225504 	addi	r4,r4,-30380
802057a8:	0207bb40 	call	80207bb4 <alt_printf>
                * registers semaphore so that other threads can access the 
                * registers.
                */
                ALT_SEM_POST (dev->regs_lock);
                
                return -ETIME;
802057ac:	00bff084 	movi	r2,-62
802057b0:	00006706 	br	80205950 <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
802057b4:	e0bff20b 	ldhu	r2,-56(fp)
802057b8:	10800044 	addi	r2,r2,1
802057bc:	e0bff20d 	sth	r2,-56(fp)

    if (NULL != standard_desc && NULL == extended_desc)
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
      write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
802057c0:	e0bffd17 	ldw	r2,-12(fp)
802057c4:	10c00317 	ldw	r3,12(r2)
802057c8:	e0bffd17 	ldw	r2,-12(fp)
802057cc:	10800417 	ldw	r2,16(r2)
802057d0:	e1bffe17 	ldw	r6,-8(fp)
802057d4:	100b883a 	mov	r5,r2
802057d8:	1809883a 	mov	r4,r3
802057dc:	02051700 	call	80205170 <alt_msgdma_write_standard_descriptor>
802057e0:	103fea1e 	bne	r2,zero,8020578c <__reset+0xfa1e578c>
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
        dev->csr_base, 
        IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
802057e4:	00001f06 	br	80205864 <alt_msgdma_descriptor_async_transfer+0x1d0>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
802057e8:	e0bffe17 	ldw	r2,-8(fp)
802057ec:	10001b1e 	bne	r2,zero,8020585c <alt_msgdma_descriptor_async_transfer+0x1c8>
802057f0:	e0bfff17 	ldw	r2,-4(fp)
802057f4:	10001926 	beq	r2,zero,8020585c <alt_msgdma_descriptor_async_transfer+0x1c8>
    {
        counter = 0; /* reset counter */
802057f8:	e03ff20d 	sth	zero,-56(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
      write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
802057fc:	00000d06 	br	80205834 <alt_msgdma_descriptor_async_transfer+0x1a0>
        dev->csr_base, 
        dev->descriptor_base, 
        extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
80205800:	01000044 	movi	r4,1
80205804:	02072000 	call	80207200 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
80205808:	e0bff20b 	ldhu	r2,-56(fp)
8020580c:	1084e230 	cmpltui	r2,r2,5000
80205810:	1000051e 	bne	r2,zero,80205828 <alt_msgdma_descriptor_async_transfer+0x194>
            {
                alt_printf("time out after 5 msec while waiting free FIFO buffer" 
80205814:	01200874 	movhi	r4,32801
80205818:	21226b04 	addi	r4,r4,-30292
8020581c:	0207bb40 	call	80207bb4 <alt_printf>
                * registers semaphore so that other threads can access the 
                * registers.
                */
                ALT_SEM_POST (dev->regs_lock);
                
                return -ETIME;
80205820:	00bff084 	movi	r2,-62
80205824:	00004a06 	br	80205950 <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
80205828:	e0bff20b 	ldhu	r2,-56(fp)
8020582c:	10800044 	addi	r2,r2,1
80205830:	e0bff20d 	sth	r2,-56(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
      write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
80205834:	e0bffd17 	ldw	r2,-12(fp)
80205838:	10c00317 	ldw	r3,12(r2)
8020583c:	e0bffd17 	ldw	r2,-12(fp)
80205840:	10800417 	ldw	r2,16(r2)
80205844:	e1bfff17 	ldw	r6,-4(fp)
80205848:	100b883a 	mov	r5,r2
8020584c:	1809883a 	mov	r4,r3
80205850:	02052040 	call	80205204 <alt_msgdma_write_extended_descriptor>
80205854:	103fea1e 	bne	r2,zero,80205800 <__reset+0xfa1e5800>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
80205858:	00000206 	br	80205864 <alt_msgdma_descriptor_async_transfer+0x1d0>
        * semaphore so that other threads can access the registers.
        */
        ALT_SEM_POST (dev->regs_lock);
        
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
8020585c:	00bfffc4 	movi	r2,-1
80205860:	00003b06 	br	80205950 <alt_msgdma_descriptor_async_transfer+0x2bc>
    * If a callback routine has been previously registered which will be
    * called from the msgdma ISR. Set up controller to:
    *  - Run
    *  - Stop on an error with any particular descriptor
    */
    if(dev->callback)
80205864:	e0bffd17 	ldw	r2,-12(fp)
80205868:	10800b17 	ldw	r2,44(r2)
8020586c:	10001c26 	beq	r2,zero,802058e0 <alt_msgdma_descriptor_async_transfer+0x24c>
    {

        control |= (dev->control |
80205870:	e0bffd17 	ldw	r2,-12(fp)
80205874:	10c00d17 	ldw	r3,52(r2)
80205878:	e0bff317 	ldw	r2,-52(fp)
8020587c:	1884b03a 	or	r2,r3,r2
80205880:	10800514 	ori	r2,r2,20
80205884:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
                    ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
80205888:	e0fff317 	ldw	r3,-52(fp)
8020588c:	00bff7c4 	movi	r2,-33
80205890:	1884703a 	and	r2,r3,r2
80205894:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80205898:	0005303a 	rdctl	r2,status
8020589c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
802058a0:	e0fffa17 	ldw	r3,-24(fp)
802058a4:	00bfff84 	movi	r2,-2
802058a8:	1884703a 	and	r2,r3,r2
802058ac:	1001703a 	wrctl	status,r2
  
  return context;
802058b0:	e0bffa17 	ldw	r2,-24(fp)
    /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
802058b4:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
802058b8:	e0bffd17 	ldw	r2,-12(fp)
802058bc:	10800317 	ldw	r2,12(r2)
802058c0:	10800104 	addi	r2,r2,4
802058c4:	e0fff317 	ldw	r3,-52(fp)
802058c8:	10c00035 	stwio	r3,0(r2)
802058cc:	e0bff417 	ldw	r2,-48(fp)
802058d0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
802058d4:	e0bff817 	ldw	r2,-32(fp)
802058d8:	1001703a 	wrctl	status,r2
802058dc:	00001b06 	br	8020594c <alt_msgdma_descriptor_async_transfer+0x2b8>
    *   - Stop on an error with any particular descriptor
    *   - Disable interrupt generation
    */
    else
    {
        control |= (dev->control |
802058e0:	e0bffd17 	ldw	r2,-12(fp)
802058e4:	10c00d17 	ldw	r3,52(r2)
802058e8:	e0bff317 	ldw	r2,-52(fp)
802058ec:	1884b03a 	or	r2,r3,r2
802058f0:	10800114 	ori	r2,r2,4
802058f4:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK );
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
802058f8:	e0fff317 	ldw	r3,-52(fp)
802058fc:	00bff3c4 	movi	r2,-49
80205900:	1884703a 	and	r2,r3,r2
80205904:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80205908:	0005303a 	rdctl	r2,status
8020590c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80205910:	e0fffb17 	ldw	r3,-20(fp)
80205914:	00bfff84 	movi	r2,-2
80205918:	1884703a 	and	r2,r3,r2
8020591c:	1001703a 	wrctl	status,r2
  
  return context;
80205920:	e0bffb17 	ldw	r2,-20(fp)
                   (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all();
80205924:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
80205928:	e0bffd17 	ldw	r2,-12(fp)
8020592c:	10800317 	ldw	r2,12(r2)
80205930:	10800104 	addi	r2,r2,4
80205934:	e0fff317 	ldw	r3,-52(fp)
80205938:	10c00035 	stwio	r3,0(r2)
8020593c:	e0bff417 	ldw	r2,-48(fp)
80205940:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80205944:	e0bff917 	ldw	r2,-28(fp)
80205948:	1001703a 	wrctl	status,r2
     * Now that access to the registers is complete, release the registers
     * semaphore so that other threads can access the registers.
     */
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
8020594c:	0005883a 	mov	r2,zero
}
80205950:	e037883a 	mov	sp,fp
80205954:	dfc00117 	ldw	ra,4(sp)
80205958:	df000017 	ldw	fp,0(sp)
8020595c:	dec00204 	addi	sp,sp,8
80205960:	f800283a 	ret

80205964 <alt_msgdma_descriptor_sync_transfer>:
 */
static int alt_msgdma_descriptor_sync_transfer (
    alt_msgdma_dev *dev, 
    alt_msgdma_standard_descriptor *standard_desc, 
    alt_msgdma_extended_descriptor *extended_desc)
{
80205964:	defff004 	addi	sp,sp,-64
80205968:	dfc00f15 	stw	ra,60(sp)
8020596c:	df000e15 	stw	fp,56(sp)
80205970:	df000e04 	addi	fp,sp,56
80205974:	e13ffd15 	stw	r4,-12(fp)
80205978:	e17ffe15 	stw	r5,-8(fp)
8020597c:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control=0;
80205980:	e03ff615 	stw	zero,-40(fp)
    alt_irq_context context=0;
80205984:	e03ff715 	stw	zero,-36(fp)
    alt_u32 csr_status = 0;
80205988:	e03ff215 	stw	zero,-56(fp)
    alt_u16 counter = 0;
8020598c:	e03ff30d 	sth	zero,-52(fp)
    alt_u32 fifo_read_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
80205990:	e0bffd17 	ldw	r2,-12(fp)
80205994:	10800317 	ldw	r2,12(r2)
80205998:	10800204 	addi	r2,r2,8
8020599c:	10800037 	ldwio	r2,0(r2)
{
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
802059a0:	10bfffcc 	andi	r2,r2,65535
802059a4:	e0bff415 	stw	r2,-48(fp)
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
802059a8:	e0bffd17 	ldw	r2,-12(fp)
802059ac:	10800317 	ldw	r2,12(r2)
802059b0:	10800204 	addi	r2,r2,8
802059b4:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
802059b8:	1004d43a 	srli	r2,r2,16
802059bc:	e0bff515 	stw	r2,-44(fp)
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
    alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK | 
802059c0:	00807804 	movi	r2,480
802059c4:	e0bff815 	stw	r2,-32(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
802059c8:	00001906 	br	80205a30 <alt_msgdma_descriptor_sync_transfer+0xcc>
        (dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
802059cc:	01000044 	movi	r4,1
802059d0:	02072000 	call	80207200 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
802059d4:	e0bff30b 	ldhu	r2,-52(fp)
802059d8:	1084e230 	cmpltui	r2,r2,5000
802059dc:	1000051e 	bne	r2,zero,802059f4 <alt_msgdma_descriptor_sync_transfer+0x90>
        {
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
802059e0:	01200874 	movhi	r4,32801
802059e4:	21228104 	addi	r4,r4,-30204
802059e8:	0207bb40 	call	80207bb4 <alt_printf>
                " for storing descriptor\n");
            return -ETIME;
802059ec:	00bff084 	movi	r2,-62
802059f0:	0000b506 	br	80205cc8 <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;  
802059f4:	e0bff30b 	ldhu	r2,-52(fp)
802059f8:	10800044 	addi	r2,r2,1
802059fc:	e0bff30d 	sth	r2,-52(fp)
        fifo_read_fill_level = (
            IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
80205a00:	e0bffd17 	ldw	r2,-12(fp)
80205a04:	10800317 	ldw	r2,12(r2)
80205a08:	10800204 	addi	r2,r2,8
80205a0c:	10800037 	ldwio	r2,0(r2)
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
                " for storing descriptor\n");
            return -ETIME;
        }
        counter++;  
        fifo_read_fill_level = (
80205a10:	10bfffcc 	andi	r2,r2,65535
80205a14:	e0bff415 	stw	r2,-48(fp)
            IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
            ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
            ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
            IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
80205a18:	e0bffd17 	ldw	r2,-12(fp)
80205a1c:	10800317 	ldw	r2,12(r2)
80205a20:	10800204 	addi	r2,r2,8
80205a24:	10800037 	ldwio	r2,0(r2)
        counter++;  
        fifo_read_fill_level = (
            IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
            ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
            ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
80205a28:	1004d43a 	srli	r2,r2,16
80205a2c:	e0bff515 	stw	r2,-44(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
80205a30:	e0bffd17 	ldw	r2,-12(fp)
80205a34:	10800917 	ldw	r2,36(r2)
80205a38:	e0fff517 	ldw	r3,-44(fp)
80205a3c:	18bfe32e 	bgeu	r3,r2,802059cc <__reset+0xfa1e59cc>
        (dev->descriptor_fifo_depth <= fifo_read_fill_level))
80205a40:	e0bffd17 	ldw	r2,-12(fp)
80205a44:	10800917 	ldw	r2,36(r2)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
80205a48:	e0fff417 	ldw	r3,-48(fp)
80205a4c:	18bfdf2e 	bgeu	r3,r2,802059cc <__reset+0xfa1e59cc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80205a50:	0005303a 	rdctl	r2,status
80205a54:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80205a58:	e0fffc17 	ldw	r3,-16(fp)
80205a5c:	00bfff84 	movi	r2,-2
80205a60:	1884703a 	and	r2,r3,r2
80205a64:	1001703a 	wrctl	status,r2
  
  return context;
80205a68:	e0bffc17 	ldw	r2,-16(fp)
    ALT_SEM_PEND (dev->regs_lock, 0);
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
80205a6c:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
80205a70:	e0bffd17 	ldw	r2,-12(fp)
80205a74:	10800317 	ldw	r2,12(r2)
80205a78:	10800104 	addi	r2,r2,4
80205a7c:	00c00804 	movi	r3,32
80205a80:	10c00035 	stwio	r3,0(r2)
        ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
80205a84:	e0bffd17 	ldw	r2,-12(fp)
80205a88:	10800317 	ldw	r2,12(r2)
80205a8c:	e0fffd17 	ldw	r3,-12(fp)
80205a90:	18c00317 	ldw	r3,12(r3)
80205a94:	18c00037 	ldwio	r3,0(r3)
80205a98:	10c00035 	stwio	r3,0(r2)
        dev->csr_base, 
        IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
80205a9c:	e0bffe17 	ldw	r2,-8(fp)
80205aa0:	10001b26 	beq	r2,zero,80205b10 <alt_msgdma_descriptor_sync_transfer+0x1ac>
80205aa4:	e0bfff17 	ldw	r2,-4(fp)
80205aa8:	1000191e 	bne	r2,zero,80205b10 <alt_msgdma_descriptor_sync_transfer+0x1ac>
    {
        counter = 0; /* reset counter */
80205aac:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
          write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
80205ab0:	00000d06 	br	80205ae8 <alt_msgdma_descriptor_sync_transfer+0x184>
            dev->csr_base, dev->descriptor_base, standard_desc))
        {     
            alt_busy_sleep(1); /* delay 1us */
80205ab4:	01000044 	movi	r4,1
80205ab8:	02072000 	call	80207200 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
80205abc:	e0bff30b 	ldhu	r2,-52(fp)
80205ac0:	1084e230 	cmpltui	r2,r2,5000
80205ac4:	1000051e 	bne	r2,zero,80205adc <alt_msgdma_descriptor_sync_transfer+0x178>
            {
                alt_printf("time out after 5 msec while writing standard" 
80205ac8:	01200874 	movhi	r4,32801
80205acc:	21229504 	addi	r4,r4,-30124
80205ad0:	0207bb40 	call	80207bb4 <alt_printf>
                * registers semaphore so that other threads can access the 
                * registers.
                */
                ALT_SEM_POST (dev->regs_lock);
                
                return -ETIME;
80205ad4:	00bff084 	movi	r2,-62
80205ad8:	00007b06 	br	80205cc8 <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;    
80205adc:	e0bff30b 	ldhu	r2,-52(fp)
80205ae0:	10800044 	addi	r2,r2,1
80205ae4:	e0bff30d 	sth	r2,-52(fp)
    if (NULL != standard_desc && NULL == extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
          write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
80205ae8:	e0bffd17 	ldw	r2,-12(fp)
80205aec:	10c00317 	ldw	r3,12(r2)
80205af0:	e0bffd17 	ldw	r2,-12(fp)
80205af4:	10800417 	ldw	r2,16(r2)
80205af8:	e1bffe17 	ldw	r6,-8(fp)
80205afc:	100b883a 	mov	r5,r2
80205b00:	1809883a 	mov	r4,r3
80205b04:	02051700 	call	80205170 <alt_msgdma_write_standard_descriptor>
80205b08:	103fea1e 	bne	r2,zero,80205ab4 <__reset+0xfa1e5ab4>
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
        dev->csr_base, 
        IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
80205b0c:	00001f06 	br	80205b8c <alt_msgdma_descriptor_sync_transfer+0x228>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
80205b10:	e0bffe17 	ldw	r2,-8(fp)
80205b14:	10001b1e 	bne	r2,zero,80205b84 <alt_msgdma_descriptor_sync_transfer+0x220>
80205b18:	e0bfff17 	ldw	r2,-4(fp)
80205b1c:	10001926 	beq	r2,zero,80205b84 <alt_msgdma_descriptor_sync_transfer+0x220>
    {
        counter = 0; /* reset counter */
80205b20:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
          write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
80205b24:	00000d06 	br	80205b5c <alt_msgdma_descriptor_sync_transfer+0x1f8>
            dev->csr_base, dev->descriptor_base, extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
80205b28:	01000044 	movi	r4,1
80205b2c:	02072000 	call	80207200 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
80205b30:	e0bff30b 	ldhu	r2,-52(fp)
80205b34:	1084e230 	cmpltui	r2,r2,5000
80205b38:	1000051e 	bne	r2,zero,80205b50 <alt_msgdma_descriptor_sync_transfer+0x1ec>
            {
                alt_printf("time out after 5 msec while writing extended" 
80205b3c:	01200874 	movhi	r4,32801
80205b40:	2122a604 	addi	r4,r4,-30056
80205b44:	0207bb40 	call	80207bb4 <alt_printf>
                * registers semaphore so that other threads can access the 
                * registers.
                */
                ALT_SEM_POST (dev->regs_lock);
                
                return -ETIME;
80205b48:	00bff084 	movi	r2,-62
80205b4c:	00005e06 	br	80205cc8 <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;
80205b50:	e0bff30b 	ldhu	r2,-52(fp)
80205b54:	10800044 	addi	r2,r2,1
80205b58:	e0bff30d 	sth	r2,-52(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
          write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
80205b5c:	e0bffd17 	ldw	r2,-12(fp)
80205b60:	10c00317 	ldw	r3,12(r2)
80205b64:	e0bffd17 	ldw	r2,-12(fp)
80205b68:	10800417 	ldw	r2,16(r2)
80205b6c:	e1bfff17 	ldw	r6,-4(fp)
80205b70:	100b883a 	mov	r5,r2
80205b74:	1809883a 	mov	r4,r3
80205b78:	02052040 	call	80205204 <alt_msgdma_write_extended_descriptor>
80205b7c:	103fea1e 	bne	r2,zero,80205b28 <__reset+0xfa1e5b28>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
80205b80:	00000206 	br	80205b8c <alt_msgdma_descriptor_sync_transfer+0x228>
        * semaphore so that other threads can access the registers.
        */
        ALT_SEM_POST (dev->regs_lock);
        
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
80205b84:	00bfffc4 	movi	r2,-1
80205b88:	00004f06 	br	80205cc8 <alt_msgdma_descriptor_sync_transfer+0x364>
    * Set up msgdma controller to:
    * - Disable interrupt generation
    * - Run once a valid descriptor is written to controller
    * - Stop on an error with any particular descriptor
    */
     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
80205b8c:	e0bffd17 	ldw	r2,-12(fp)
80205b90:	10800317 	ldw	r2,12(r2)
80205b94:	10800104 	addi	r2,r2,4
80205b98:	e0fffd17 	ldw	r3,-12(fp)
80205b9c:	19000d17 	ldw	r4,52(r3)
80205ba0:	00fff2c4 	movi	r3,-53
80205ba4:	20c6703a 	and	r3,r4,r3
80205ba8:	18c00114 	ori	r3,r3,4
80205bac:	10c00035 	stwio	r3,0(r2)
80205bb0:	e0bff717 	ldw	r2,-36(fp)
80205bb4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80205bb8:	e0bff917 	ldw	r2,-28(fp)
80205bbc:	1001703a 	wrctl	status,r2
        (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
        (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK)) ;
     
    alt_irq_enable_all(context);
     
    counter = 0; /* reset counter */ 
80205bc0:	e03ff30d 	sth	zero,-52(fp)
    
    csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
80205bc4:	e0bffd17 	ldw	r2,-12(fp)
80205bc8:	10800317 	ldw	r2,12(r2)
80205bcc:	10800037 	ldwio	r2,0(r2)
80205bd0:	e0bff215 	stw	r2,-56(fp)
    
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
80205bd4:	00001106 	br	80205c1c <alt_msgdma_descriptor_sync_transfer+0x2b8>
    {
        alt_busy_sleep(1); /* delay 1us */
80205bd8:	01000044 	movi	r4,1
80205bdc:	02072000 	call	80207200 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
80205be0:	e0bff30b 	ldhu	r2,-52(fp)
80205be4:	1084e230 	cmpltui	r2,r2,5000
80205be8:	1000051e 	bne	r2,zero,80205c00 <alt_msgdma_descriptor_sync_transfer+0x29c>
        {
            alt_printf("time out after 5 msec while waiting for any pending" 
80205bec:	01200874 	movhi	r4,32801
80205bf0:	2122b704 	addi	r4,r4,-29988
80205bf4:	0207bb40 	call	80207bb4 <alt_printf>
            * Now that access to the registers is complete, release the registers
            * semaphore so that other threads can access the registers.
            */
            ALT_SEM_POST (dev->regs_lock);
            
            return -ETIME;
80205bf8:	00bff084 	movi	r2,-62
80205bfc:	00003206 	br	80205cc8 <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;
80205c00:	e0bff30b 	ldhu	r2,-52(fp)
80205c04:	10800044 	addi	r2,r2,1
80205c08:	e0bff30d 	sth	r2,-52(fp)
        csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
80205c0c:	e0bffd17 	ldw	r2,-12(fp)
80205c10:	10800317 	ldw	r2,12(r2)
80205c14:	10800037 	ldwio	r2,0(r2)
80205c18:	e0bff215 	stw	r2,-56(fp)
    
    csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
    
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
80205c1c:	e0fff217 	ldw	r3,-56(fp)
80205c20:	e0bff817 	ldw	r2,-32(fp)
80205c24:	1884703a 	and	r2,r3,r2
80205c28:	1000031e 	bne	r2,zero,80205c38 <alt_msgdma_descriptor_sync_transfer+0x2d4>
80205c2c:	e0bff217 	ldw	r2,-56(fp)
80205c30:	1080004c 	andi	r2,r2,1
80205c34:	103fe81e 	bne	r2,zero,80205bd8 <__reset+0xfa1e5bd8>
    }
    

    /*Errors or conditions causing the dispatcher stopping issuing read/write 
      commands to masters*/
    if(0 != (csr_status & error))
80205c38:	e0fff217 	ldw	r3,-56(fp)
80205c3c:	e0bff817 	ldw	r2,-32(fp)
80205c40:	1884703a 	and	r2,r3,r2
80205c44:	10000226 	beq	r2,zero,80205c50 <alt_msgdma_descriptor_sync_transfer+0x2ec>
        * Now that access to the registers is complete, release the registers
        * semaphore so that other threads can access the registers.
        */
        ALT_SEM_POST (dev->regs_lock);
        
        return error;
80205c48:	e0bff817 	ldw	r2,-32(fp)
80205c4c:	00001e06 	br	80205cc8 <alt_msgdma_descriptor_sync_transfer+0x364>
    }

    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) | 
80205c50:	e0bffd17 	ldw	r2,-12(fp)
80205c54:	10800317 	ldw	r2,12(r2)
80205c58:	10800104 	addi	r2,r2,4
80205c5c:	10800037 	ldwio	r2,0(r2)
80205c60:	10800814 	ori	r2,r2,32
80205c64:	e0bff615 	stw	r2,-40(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80205c68:	0005303a 	rdctl	r2,status
80205c6c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80205c70:	e0fffa17 	ldw	r3,-24(fp)
80205c74:	00bfff84 	movi	r2,-2
80205c78:	1884703a 	and	r2,r3,r2
80205c7c:	1001703a 	wrctl	status,r2
  
  return context;
80205c80:	e0bffa17 	ldw	r2,-24(fp)
    ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();  
80205c84:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
80205c88:	e0bffd17 	ldw	r2,-12(fp)
80205c8c:	10800317 	ldw	r2,12(r2)
80205c90:	10800104 	addi	r2,r2,4
80205c94:	e0fff617 	ldw	r3,-40(fp)
80205c98:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
80205c9c:	e0bffd17 	ldw	r2,-12(fp)
80205ca0:	10800317 	ldw	r2,12(r2)
80205ca4:	e0fffd17 	ldw	r3,-12(fp)
80205ca8:	18c00317 	ldw	r3,12(r3)
80205cac:	18c00037 	ldwio	r3,0(r3)
80205cb0:	10c00035 	stwio	r3,0(r2)
80205cb4:	e0bff717 	ldw	r2,-36(fp)
80205cb8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80205cbc:	e0bffb17 	ldw	r2,-20(fp)
80205cc0:	1001703a 	wrctl	status,r2
    * Now that access to the registers is complete, release the registers
    * semaphore so that other threads can access the registers.
    */
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
80205cc4:	0005883a 	mov	r2,zero

}
80205cc8:	e037883a 	mov	sp,fp
80205ccc:	dfc00117 	ldw	ra,4(sp)
80205cd0:	df000017 	ldw	fp,0(sp)
80205cd4:	dec00204 	addi	sp,sp,8
80205cd8:	f800283a 	ret

80205cdc <alt_msgdma_construct_standard_st_to_mm_descriptor>:
 */
int alt_msgdma_construct_standard_st_to_mm_descriptor (
    alt_msgdma_dev *dev,
    alt_msgdma_standard_descriptor *descriptor,
    alt_u32 *write_address, alt_u32 length, alt_u32 control)
{
80205cdc:	defff804 	addi	sp,sp,-32
80205ce0:	dfc00715 	stw	ra,28(sp)
80205ce4:	df000615 	stw	fp,24(sp)
80205ce8:	df000604 	addi	fp,sp,24
80205cec:	e13ffc15 	stw	r4,-16(fp)
80205cf0:	e17ffd15 	stw	r5,-12(fp)
80205cf4:	e1bffe15 	stw	r6,-8(fp)
80205cf8:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, NULL, 
80205cfc:	e0800217 	ldw	r2,8(fp)
80205d00:	d8800115 	stw	r2,4(sp)
80205d04:	e0bfff17 	ldw	r2,-4(fp)
80205d08:	d8800015 	stw	r2,0(sp)
80205d0c:	e1fffe17 	ldw	r7,-8(fp)
80205d10:	000d883a 	mov	r6,zero
80205d14:	e17ffd17 	ldw	r5,-12(fp)
80205d18:	e13ffc17 	ldw	r4,-16(fp)
80205d1c:	02054b40 	call	802054b4 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
80205d20:	e037883a 	mov	sp,fp
80205d24:	dfc00117 	ldw	ra,4(sp)
80205d28:	df000017 	ldw	fp,0(sp)
80205d2c:	dec00204 	addi	sp,sp,8
80205d30:	f800283a 	ret

80205d34 <alt_msgdma_construct_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
    alt_msgdma_standard_descriptor *descriptor,
    alt_u32 *read_address,
    alt_u32 length,
    alt_u32 control)
{
80205d34:	defff804 	addi	sp,sp,-32
80205d38:	dfc00715 	stw	ra,28(sp)
80205d3c:	df000615 	stw	fp,24(sp)
80205d40:	df000604 	addi	fp,sp,24
80205d44:	e13ffc15 	stw	r4,-16(fp)
80205d48:	e17ffd15 	stw	r5,-12(fp)
80205d4c:	e1bffe15 	stw	r6,-8(fp)
80205d50:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
80205d54:	e0800217 	ldw	r2,8(fp)
80205d58:	d8800115 	stw	r2,4(sp)
80205d5c:	e0bfff17 	ldw	r2,-4(fp)
80205d60:	d8800015 	stw	r2,0(sp)
80205d64:	000f883a 	mov	r7,zero
80205d68:	e1bffe17 	ldw	r6,-8(fp)
80205d6c:	e17ffd17 	ldw	r5,-12(fp)
80205d70:	e13ffc17 	ldw	r4,-16(fp)
80205d74:	02054b40 	call	802054b4 <alt_msgdma_construct_standard_descriptor>
            NULL, length, control);

}
80205d78:	e037883a 	mov	sp,fp
80205d7c:	dfc00117 	ldw	ra,4(sp)
80205d80:	df000017 	ldw	fp,0(sp)
80205d84:	dec00204 	addi	sp,sp,8
80205d88:	f800283a 	ret

80205d8c <alt_msgdma_construct_standard_mm_to_mm_descriptor>:
    alt_msgdma_standard_descriptor *descriptor,
    alt_u32 *read_address, 
    alt_u32 *write_address, 
    alt_u32 length, 
    alt_u32 control)
{
80205d8c:	defff804 	addi	sp,sp,-32
80205d90:	dfc00715 	stw	ra,28(sp)
80205d94:	df000615 	stw	fp,24(sp)
80205d98:	df000604 	addi	fp,sp,24
80205d9c:	e13ffc15 	stw	r4,-16(fp)
80205da0:	e17ffd15 	stw	r5,-12(fp)
80205da4:	e1bffe15 	stw	r6,-8(fp)
80205da8:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
80205dac:	e0800317 	ldw	r2,12(fp)
80205db0:	d8800115 	stw	r2,4(sp)
80205db4:	e0800217 	ldw	r2,8(fp)
80205db8:	d8800015 	stw	r2,0(sp)
80205dbc:	e1ffff17 	ldw	r7,-4(fp)
80205dc0:	e1bffe17 	ldw	r6,-8(fp)
80205dc4:	e17ffd17 	ldw	r5,-12(fp)
80205dc8:	e13ffc17 	ldw	r4,-16(fp)
80205dcc:	02054b40 	call	802054b4 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
80205dd0:	e037883a 	mov	sp,fp
80205dd4:	dfc00117 	ldw	ra,4(sp)
80205dd8:	df000017 	ldw	fp,0(sp)
80205ddc:	dec00204 	addi	sp,sp,8
80205de0:	f800283a 	ret

80205de4 <alt_msgdma_construct_extended_st_to_mm_descriptor>:
    alt_u32 length, 
    alt_u32 control, 
    alt_u16 sequence_number, 
    alt_u8 write_burst_count, 
    alt_u16 write_stride)
{
80205de4:	defff004 	addi	sp,sp,-64
80205de8:	dfc00f15 	stw	ra,60(sp)
80205dec:	df000e15 	stw	fp,56(sp)
80205df0:	df000e04 	addi	fp,sp,56
80205df4:	e13ff915 	stw	r4,-28(fp)
80205df8:	e17ffa15 	stw	r5,-24(fp)
80205dfc:	e1bffb15 	stw	r6,-20(fp)
80205e00:	e1fffc15 	stw	r7,-16(fp)
80205e04:	e1000317 	ldw	r4,12(fp)
80205e08:	e0c00417 	ldw	r3,16(fp)
80205e0c:	e0800517 	ldw	r2,20(fp)
80205e10:	e13ffd0d 	sth	r4,-12(fp)
80205e14:	e0fffe05 	stb	r3,-8(fp)
80205e18:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
80205e1c:	e0bffd0b 	ldhu	r2,-12(fp)
80205e20:	e0fffe03 	ldbu	r3,-8(fp)
80205e24:	e13fff0b 	ldhu	r4,-4(fp)
80205e28:	d9000615 	stw	r4,24(sp)
80205e2c:	d8000515 	stw	zero,20(sp)
80205e30:	d8c00415 	stw	r3,16(sp)
80205e34:	d8000315 	stw	zero,12(sp)
80205e38:	d8800215 	stw	r2,8(sp)
80205e3c:	e0800217 	ldw	r2,8(fp)
80205e40:	d8800115 	stw	r2,4(sp)
80205e44:	e0bffc17 	ldw	r2,-16(fp)
80205e48:	d8800015 	stw	r2,0(sp)
80205e4c:	e1fffb17 	ldw	r7,-20(fp)
80205e50:	000d883a 	mov	r6,zero
80205e54:	e17ffa17 	ldw	r5,-24(fp)
80205e58:	e13ff917 	ldw	r4,-28(fp)
80205e5c:	02055400 	call	80205540 <alt_msgdma_construct_extended_descriptor>
            NULL, write_address, length, control, sequence_number, 0, 
            write_burst_count, 0, write_stride);
}
80205e60:	e037883a 	mov	sp,fp
80205e64:	dfc00117 	ldw	ra,4(sp)
80205e68:	df000017 	ldw	fp,0(sp)
80205e6c:	dec00204 	addi	sp,sp,8
80205e70:	f800283a 	ret

80205e74 <alt_msgdma_construct_extended_mm_to_st_descriptor>:
    alt_u32 length,
    alt_u32 control,
    alt_u16 sequence_number,
    alt_u8 read_burst_count, 
    alt_u16 read_stride)
{
80205e74:	defff004 	addi	sp,sp,-64
80205e78:	dfc00f15 	stw	ra,60(sp)
80205e7c:	df000e15 	stw	fp,56(sp)
80205e80:	df000e04 	addi	fp,sp,56
80205e84:	e13ff915 	stw	r4,-28(fp)
80205e88:	e17ffa15 	stw	r5,-24(fp)
80205e8c:	e1bffb15 	stw	r6,-20(fp)
80205e90:	e1fffc15 	stw	r7,-16(fp)
80205e94:	e1000317 	ldw	r4,12(fp)
80205e98:	e0c00417 	ldw	r3,16(fp)
80205e9c:	e0800517 	ldw	r2,20(fp)
80205ea0:	e13ffd0d 	sth	r4,-12(fp)
80205ea4:	e0fffe05 	stb	r3,-8(fp)
80205ea8:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, read_address, 
80205eac:	e0bffd0b 	ldhu	r2,-12(fp)
80205eb0:	e0fffe03 	ldbu	r3,-8(fp)
80205eb4:	e13fff0b 	ldhu	r4,-4(fp)
80205eb8:	d8000615 	stw	zero,24(sp)
80205ebc:	d9000515 	stw	r4,20(sp)
80205ec0:	d8000415 	stw	zero,16(sp)
80205ec4:	d8c00315 	stw	r3,12(sp)
80205ec8:	d8800215 	stw	r2,8(sp)
80205ecc:	e0800217 	ldw	r2,8(fp)
80205ed0:	d8800115 	stw	r2,4(sp)
80205ed4:	e0bffc17 	ldw	r2,-16(fp)
80205ed8:	d8800015 	stw	r2,0(sp)
80205edc:	000f883a 	mov	r7,zero
80205ee0:	e1bffb17 	ldw	r6,-20(fp)
80205ee4:	e17ffa17 	ldw	r5,-24(fp)
80205ee8:	e13ff917 	ldw	r4,-28(fp)
80205eec:	02055400 	call	80205540 <alt_msgdma_construct_extended_descriptor>
            NULL, length, control, sequence_number, read_burst_count, 0, 
            read_stride, 0);

}
80205ef0:	e037883a 	mov	sp,fp
80205ef4:	dfc00117 	ldw	ra,4(sp)
80205ef8:	df000017 	ldw	fp,0(sp)
80205efc:	dec00204 	addi	sp,sp,8
80205f00:	f800283a 	ret

80205f04 <alt_msgdma_construct_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
80205f04:	deffee04 	addi	sp,sp,-72
80205f08:	dfc01115 	stw	ra,68(sp)
80205f0c:	df001015 	stw	fp,64(sp)
80205f10:	df001004 	addi	fp,sp,64
80205f14:	e13ff715 	stw	r4,-36(fp)
80205f18:	e17ff815 	stw	r5,-32(fp)
80205f1c:	e1bff915 	stw	r6,-28(fp)
80205f20:	e1fffa15 	stw	r7,-24(fp)
80205f24:	e1800417 	ldw	r6,16(fp)
80205f28:	e1400517 	ldw	r5,20(fp)
80205f2c:	e1000617 	ldw	r4,24(fp)
80205f30:	e0c00717 	ldw	r3,28(fp)
80205f34:	e0800817 	ldw	r2,32(fp)
80205f38:	e1bffb0d 	sth	r6,-20(fp)
80205f3c:	e17ffc05 	stb	r5,-16(fp)
80205f40:	e13ffd05 	stb	r4,-12(fp)
80205f44:	e0fffe0d 	sth	r3,-8(fp)
80205f48:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
80205f4c:	e0bffb0b 	ldhu	r2,-20(fp)
80205f50:	e0fffc03 	ldbu	r3,-16(fp)
80205f54:	e13ffd03 	ldbu	r4,-12(fp)
80205f58:	e17ffe0b 	ldhu	r5,-8(fp)
80205f5c:	e1bfff0b 	ldhu	r6,-4(fp)
80205f60:	d9800615 	stw	r6,24(sp)
80205f64:	d9400515 	stw	r5,20(sp)
80205f68:	d9000415 	stw	r4,16(sp)
80205f6c:	d8c00315 	stw	r3,12(sp)
80205f70:	d8800215 	stw	r2,8(sp)
80205f74:	e0800317 	ldw	r2,12(fp)
80205f78:	d8800115 	stw	r2,4(sp)
80205f7c:	e0800217 	ldw	r2,8(fp)
80205f80:	d8800015 	stw	r2,0(sp)
80205f84:	e1fffa17 	ldw	r7,-24(fp)
80205f88:	e1bff917 	ldw	r6,-28(fp)
80205f8c:	e17ff817 	ldw	r5,-32(fp)
80205f90:	e13ff717 	ldw	r4,-36(fp)
80205f94:	02055400 	call	80205540 <alt_msgdma_construct_extended_descriptor>
            read_address, write_address, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
80205f98:	e037883a 	mov	sp,fp
80205f9c:	dfc00117 	ldw	ra,4(sp)
80205fa0:	df000017 	ldw	fp,0(sp)
80205fa4:	dec00204 	addi	sp,sp,8
80205fa8:	f800283a 	ret

80205fac <alt_msgdma_construct_prefetcher_standard_descriptor>:
    alt_msgdma_prefetcher_standard_descriptor *descriptor,
    alt_u32 read_address, 
    alt_u32 write_address, 
    alt_u32 length, 
    alt_u32 control)
{
80205fac:	defffb04 	addi	sp,sp,-20
80205fb0:	df000415 	stw	fp,16(sp)
80205fb4:	df000404 	addi	fp,sp,16
80205fb8:	e13ffc15 	stw	r4,-16(fp)
80205fbc:	e17ffd15 	stw	r5,-12(fp)
80205fc0:	e1bffe15 	stw	r6,-8(fp)
80205fc4:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
80205fc8:	e0bffc17 	ldw	r2,-16(fp)
80205fcc:	10c01217 	ldw	r3,72(r2)
80205fd0:	e0800117 	ldw	r2,4(fp)
80205fd4:	18800436 	bltu	r3,r2,80205fe8 <alt_msgdma_construct_prefetcher_standard_descriptor+0x3c>
       dev->enhanced_features != 0
80205fd8:	e0bffc17 	ldw	r2,-16(fp)
80205fdc:	10801703 	ldbu	r2,92(r2)
    alt_u32 read_address, 
    alt_u32 write_address, 
    alt_u32 length, 
    alt_u32 control)
{
    if(dev->max_byte < length ||
80205fe0:	10803fcc 	andi	r2,r2,255
80205fe4:	10000226 	beq	r2,zero,80205ff0 <alt_msgdma_construct_prefetcher_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
80205fe8:	00bffa84 	movi	r2,-22
80205fec:	00001406 	br	80206040 <alt_msgdma_construct_prefetcher_standard_descriptor+0x94>
    }
    descriptor->read_address = read_address;
80205ff0:	e0bffd17 	ldw	r2,-12(fp)
80205ff4:	e0fffe17 	ldw	r3,-8(fp)
80205ff8:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
80205ffc:	e0bffd17 	ldw	r2,-12(fp)
80206000:	e0ffff17 	ldw	r3,-4(fp)
80206004:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
80206008:	e0bffd17 	ldw	r2,-12(fp)
8020600c:	e0c00117 	ldw	r3,4(fp)
80206010:	10c00215 	stw	r3,8(r2)
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
80206014:	e0fffd17 	ldw	r3,-12(fp)
80206018:	e0bffd17 	ldw	r2,-12(fp)
8020601c:	10c00315 	stw	r3,12(r2)
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
80206020:	e0c00217 	ldw	r3,8(fp)
80206024:	00900034 	movhi	r2,16384
80206028:	10bfffc4 	addi	r2,r2,-1
8020602c:	1884703a 	and	r2,r3,r2
80206030:	10e00034 	orhi	r3,r2,32768
    descriptor->transfer_length = length;
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
80206034:	e0bffd17 	ldw	r2,-12(fp)
80206038:	10c00715 	stw	r3,28(r2)
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
8020603c:	0005883a 	mov	r2,zero
}
80206040:	e037883a 	mov	sp,fp
80206044:	df000017 	ldw	fp,0(sp)
80206048:	dec00104 	addi	sp,sp,4
8020604c:	f800283a 	ret

80206050 <alt_msgdma_construct_prefetcher_extended_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
80206050:	defff404 	addi	sp,sp,-48
80206054:	df000b15 	stw	fp,44(sp)
80206058:	df000b04 	addi	fp,sp,44
8020605c:	e13ff715 	stw	r4,-36(fp)
80206060:	e17ff815 	stw	r5,-32(fp)
80206064:	e1bff915 	stw	r6,-28(fp)
80206068:	e1fffa15 	stw	r7,-24(fp)
8020606c:	e1800517 	ldw	r6,20(fp)
80206070:	e1400617 	ldw	r5,24(fp)
80206074:	e1000717 	ldw	r4,28(fp)
80206078:	e0c00817 	ldw	r3,32(fp)
8020607c:	e0800917 	ldw	r2,36(fp)
80206080:	e1bffb0d 	sth	r6,-20(fp)
80206084:	e17ffc05 	stb	r5,-16(fp)
80206088:	e13ffd05 	stb	r4,-12(fp)
8020608c:	e0fffe0d 	sth	r3,-8(fp)
80206090:	e0bfff0d 	sth	r2,-4(fp)
    msgdma_addr64 node_addr;
    
    if(dev->max_byte < length ||
80206094:	e0bff717 	ldw	r2,-36(fp)
80206098:	10c01217 	ldw	r3,72(r2)
8020609c:	e0800317 	ldw	r2,12(fp)
802060a0:	18801936 	bltu	r3,r2,80206108 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
802060a4:	e13ff717 	ldw	r4,-36(fp)
802060a8:	20801317 	ldw	r2,76(r4)
802060ac:	20c01417 	ldw	r3,80(r4)
802060b0:	e13ffe0b 	ldhu	r4,-8(fp)
802060b4:	213fffcc 	andi	r4,r4,65535
802060b8:	2015883a 	mov	r10,r4
802060bc:	0017883a 	mov	r11,zero
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
    msgdma_addr64 node_addr;
    
    if(dev->max_byte < length ||
802060c0:	1ac01136 	bltu	r3,r11,80206108 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
802060c4:	58c0011e 	bne	r11,r3,802060cc <alt_msgdma_construct_prefetcher_extended_descriptor+0x7c>
802060c8:	12800f36 	bltu	r2,r10,80206108 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
802060cc:	e13ff717 	ldw	r4,-36(fp)
802060d0:	20801317 	ldw	r2,76(r4)
802060d4:	20c01417 	ldw	r3,80(r4)
802060d8:	e13fff0b 	ldhu	r4,-4(fp)
802060dc:	213fffcc 	andi	r4,r4,65535
802060e0:	2011883a 	mov	r8,r4
802060e4:	0013883a 	mov	r9,zero
    alt_u16 write_stride)
{
    msgdma_addr64 node_addr;
    
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
802060e8:	1a400736 	bltu	r3,r9,80206108 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
802060ec:	48c0011e 	bne	r9,r3,802060f4 <alt_msgdma_construct_prefetcher_extended_descriptor+0xa4>
802060f0:	12000536 	bltu	r2,r8,80206108 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
802060f4:	e0bff717 	ldw	r2,-36(fp)
802060f8:	10801703 	ldbu	r2,92(r2)
{
    msgdma_addr64 node_addr;
    
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
802060fc:	10803fcc 	andi	r2,r2,255
80206100:	10800060 	cmpeqi	r2,r2,1
80206104:	1000021e 	bne	r2,zero,80206110 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
80206108:	00bffa84 	movi	r2,-22
8020610c:	00003106 	br	802061d4 <alt_msgdma_construct_prefetcher_extended_descriptor+0x184>
    }
    
    descriptor->read_address_high = read_address_high;
80206110:	e0bff817 	ldw	r2,-32(fp)
80206114:	e0fff917 	ldw	r3,-28(fp)
80206118:	10c00915 	stw	r3,36(r2)
    descriptor->read_address_low = read_address_low;
8020611c:	e0bff817 	ldw	r2,-32(fp)
80206120:	e0fffa17 	ldw	r3,-24(fp)
80206124:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_high = write_address_high;
80206128:	e0bff817 	ldw	r2,-32(fp)
8020612c:	e0c00117 	ldw	r3,4(fp)
80206130:	10c00a15 	stw	r3,40(r2)
    descriptor->write_address_low = write_address_low;
80206134:	e0bff817 	ldw	r2,-32(fp)
80206138:	e0c00217 	ldw	r3,8(fp)
8020613c:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
80206140:	e0bff817 	ldw	r2,-32(fp)
80206144:	e0c00317 	ldw	r3,12(fp)
80206148:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
8020614c:	e0bff817 	ldw	r2,-32(fp)
80206150:	e0fffb0b 	ldhu	r3,-20(fp)
80206154:	10c0070d 	sth	r3,28(r2)
    descriptor->read_burst_count = read_burst_count;
80206158:	e0bff817 	ldw	r2,-32(fp)
8020615c:	e0fffc03 	ldbu	r3,-16(fp)
80206160:	10c00785 	stb	r3,30(r2)
    descriptor->write_burst_count = write_burst_count;
80206164:	e0bff817 	ldw	r2,-32(fp)
80206168:	e0fffd03 	ldbu	r3,-12(fp)
8020616c:	10c007c5 	stb	r3,31(r2)
    descriptor->read_stride = read_stride;
80206170:	e0bff817 	ldw	r2,-32(fp)
80206174:	e0fffe0b 	ldhu	r3,-8(fp)
80206178:	10c0080d 	sth	r3,32(r2)
    descriptor->write_stride = write_stride;
8020617c:	e0bff817 	ldw	r2,-32(fp)
80206180:	e0ffff0b 	ldhu	r3,-4(fp)
80206184:	10c0088d 	sth	r3,34(r2)
    /* have descriptor point to itself */
    node_addr.u64 = (uintptr_t)descriptor;
80206188:	e0bff817 	ldw	r2,-32(fp)
8020618c:	1019883a 	mov	r12,r2
80206190:	001b883a 	mov	r13,zero
80206194:	e33ff515 	stw	r12,-44(fp)
80206198:	e37ff615 	stw	r13,-40(fp)
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
8020619c:	e0fff517 	ldw	r3,-44(fp)
802061a0:	e0bff817 	ldw	r2,-32(fp)
802061a4:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
802061a8:	e0fff617 	ldw	r3,-40(fp)
802061ac:	e0bff817 	ldw	r2,-32(fp)
802061b0:	10c00b15 	stw	r3,44(r2)
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
802061b4:	e0c00417 	ldw	r3,16(fp)
802061b8:	00900034 	movhi	r2,16384
802061bc:	10bfffc4 	addi	r2,r2,-1
802061c0:	1884703a 	and	r2,r3,r2
802061c4:	10e00034 	orhi	r3,r2,32768
    node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
802061c8:	e0bff817 	ldw	r2,-32(fp)
802061cc:	10c00f15 	stw	r3,60(r2)
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
802061d0:	0005883a 	mov	r2,zero
}
802061d4:	e037883a 	mov	sp,fp
802061d8:	df000017 	ldw	fp,0(sp)
802061dc:	dec00104 	addi	sp,sp,4
802061e0:	f800283a 	ret

802061e4 <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor>:
    alt_msgdma_prefetcher_standard_descriptor *descriptor,
    alt_u32 read_address,
    alt_u32 write_address,
    alt_u32 length,
    alt_u32 control)
{
802061e4:	defff804 	addi	sp,sp,-32
802061e8:	dfc00715 	stw	ra,28(sp)
802061ec:	df000615 	stw	fp,24(sp)
802061f0:	df000604 	addi	fp,sp,24
802061f4:	e13ffc15 	stw	r4,-16(fp)
802061f8:	e17ffd15 	stw	r5,-12(fp)
802061fc:	e1bffe15 	stw	r6,-8(fp)
80206200:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
80206204:	e0800317 	ldw	r2,12(fp)
80206208:	d8800115 	stw	r2,4(sp)
8020620c:	e0800217 	ldw	r2,8(fp)
80206210:	d8800015 	stw	r2,0(sp)
80206214:	e1ffff17 	ldw	r7,-4(fp)
80206218:	e1bffe17 	ldw	r6,-8(fp)
8020621c:	e17ffd17 	ldw	r5,-12(fp)
80206220:	e13ffc17 	ldw	r4,-16(fp)
80206224:	0205fac0 	call	80205fac <alt_msgdma_construct_prefetcher_standard_descriptor>
            read_address, write_address, length, control);
}
80206228:	e037883a 	mov	sp,fp
8020622c:	dfc00117 	ldw	ra,4(sp)
80206230:	df000017 	ldw	fp,0(sp)
80206234:	dec00204 	addi	sp,sp,8
80206238:	f800283a 	ret

8020623c <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor>:
    alt_msgdma_dev *dev,
    alt_msgdma_prefetcher_standard_descriptor *descriptor, 
    alt_u32 write_address, 
    alt_u32 length, 
    alt_u32 control)
{
8020623c:	defff804 	addi	sp,sp,-32
80206240:	dfc00715 	stw	ra,28(sp)
80206244:	df000615 	stw	fp,24(sp)
80206248:	df000604 	addi	fp,sp,24
8020624c:	e13ffc15 	stw	r4,-16(fp)
80206250:	e17ffd15 	stw	r5,-12(fp)
80206254:	e1bffe15 	stw	r6,-8(fp)
80206258:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
8020625c:	e0800217 	ldw	r2,8(fp)
80206260:	d8800115 	stw	r2,4(sp)
80206264:	e0bfff17 	ldw	r2,-4(fp)
80206268:	d8800015 	stw	r2,0(sp)
8020626c:	e1fffe17 	ldw	r7,-8(fp)
80206270:	000d883a 	mov	r6,zero
80206274:	e17ffd17 	ldw	r5,-12(fp)
80206278:	e13ffc17 	ldw	r4,-16(fp)
8020627c:	0205fac0 	call	80205fac <alt_msgdma_construct_prefetcher_standard_descriptor>
            0, write_address, length, control);
}
80206280:	e037883a 	mov	sp,fp
80206284:	dfc00117 	ldw	ra,4(sp)
80206288:	df000017 	ldw	fp,0(sp)
8020628c:	dec00204 	addi	sp,sp,8
80206290:	f800283a 	ret

80206294 <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
    alt_msgdma_prefetcher_standard_descriptor *descriptor, 
    alt_u32 read_address, 
    alt_u32 length, 
    alt_u32 control)
{
80206294:	defff804 	addi	sp,sp,-32
80206298:	dfc00715 	stw	ra,28(sp)
8020629c:	df000615 	stw	fp,24(sp)
802062a0:	df000604 	addi	fp,sp,24
802062a4:	e13ffc15 	stw	r4,-16(fp)
802062a8:	e17ffd15 	stw	r5,-12(fp)
802062ac:	e1bffe15 	stw	r6,-8(fp)
802062b0:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
802062b4:	e0800217 	ldw	r2,8(fp)
802062b8:	d8800115 	stw	r2,4(sp)
802062bc:	e0bfff17 	ldw	r2,-4(fp)
802062c0:	d8800015 	stw	r2,0(sp)
802062c4:	000f883a 	mov	r7,zero
802062c8:	e1bffe17 	ldw	r6,-8(fp)
802062cc:	e17ffd17 	ldw	r5,-12(fp)
802062d0:	e13ffc17 	ldw	r4,-16(fp)
802062d4:	0205fac0 	call	80205fac <alt_msgdma_construct_prefetcher_standard_descriptor>
            read_address, 0, length, control);
}
802062d8:	e037883a 	mov	sp,fp
802062dc:	dfc00117 	ldw	ra,4(sp)
802062e0:	df000017 	ldw	fp,0(sp)
802062e4:	dec00204 	addi	sp,sp,8
802062e8:	f800283a 	ret

802062ec <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor>:
    alt_u32 length, 
    alt_u32 control, 
    alt_u16 sequence_number,
    alt_u8 write_burst_count,
    alt_u16 write_stride)
{
802062ec:	deffee04 	addi	sp,sp,-72
802062f0:	dfc01115 	stw	ra,68(sp)
802062f4:	df001015 	stw	fp,64(sp)
802062f8:	df001004 	addi	fp,sp,64
802062fc:	e13ff915 	stw	r4,-28(fp)
80206300:	e17ffa15 	stw	r5,-24(fp)
80206304:	e1bffb15 	stw	r6,-20(fp)
80206308:	e1fffc15 	stw	r7,-16(fp)
8020630c:	e1000417 	ldw	r4,16(fp)
80206310:	e0c00517 	ldw	r3,20(fp)
80206314:	e0800617 	ldw	r2,24(fp)
80206318:	e13ffd0d 	sth	r4,-12(fp)
8020631c:	e0fffe05 	stb	r3,-8(fp)
80206320:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor, 
80206324:	e0bffd0b 	ldhu	r2,-12(fp)
80206328:	e0fffe03 	ldbu	r3,-8(fp)
8020632c:	e13fff0b 	ldhu	r4,-4(fp)
80206330:	d9000815 	stw	r4,32(sp)
80206334:	d8000715 	stw	zero,28(sp)
80206338:	d8c00615 	stw	r3,24(sp)
8020633c:	d8000515 	stw	zero,20(sp)
80206340:	d8800415 	stw	r2,16(sp)
80206344:	e0800317 	ldw	r2,12(fp)
80206348:	d8800315 	stw	r2,12(sp)
8020634c:	e0800217 	ldw	r2,8(fp)
80206350:	d8800215 	stw	r2,8(sp)
80206354:	e0bffc17 	ldw	r2,-16(fp)
80206358:	d8800115 	stw	r2,4(sp)
8020635c:	e0bffb17 	ldw	r2,-20(fp)
80206360:	d8800015 	stw	r2,0(sp)
80206364:	000f883a 	mov	r7,zero
80206368:	000d883a 	mov	r6,zero
8020636c:	e17ffa17 	ldw	r5,-24(fp)
80206370:	e13ff917 	ldw	r4,-28(fp)
80206374:	02060500 	call	80206050 <alt_msgdma_construct_prefetcher_extended_descriptor>
            0, 0, write_address_high, write_address_low, length, control, 
            sequence_number, 0, write_burst_count, 0, write_stride);
}
80206378:	e037883a 	mov	sp,fp
8020637c:	dfc00117 	ldw	ra,4(sp)
80206380:	df000017 	ldw	fp,0(sp)
80206384:	dec00204 	addi	sp,sp,8
80206388:	f800283a 	ret

8020638c <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor>:
    alt_u32 length, 
    alt_u32 control, 
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u16 read_stride)
{
8020638c:	deffee04 	addi	sp,sp,-72
80206390:	dfc01115 	stw	ra,68(sp)
80206394:	df001015 	stw	fp,64(sp)
80206398:	df001004 	addi	fp,sp,64
8020639c:	e13ff915 	stw	r4,-28(fp)
802063a0:	e17ffa15 	stw	r5,-24(fp)
802063a4:	e1bffb15 	stw	r6,-20(fp)
802063a8:	e1fffc15 	stw	r7,-16(fp)
802063ac:	e1000417 	ldw	r4,16(fp)
802063b0:	e0c00517 	ldw	r3,20(fp)
802063b4:	e0800617 	ldw	r2,24(fp)
802063b8:	e13ffd0d 	sth	r4,-12(fp)
802063bc:	e0fffe05 	stb	r3,-8(fp)
802063c0:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
802063c4:	e0bffd0b 	ldhu	r2,-12(fp)
802063c8:	e0fffe03 	ldbu	r3,-8(fp)
802063cc:	e13fff0b 	ldhu	r4,-4(fp)
802063d0:	d8000815 	stw	zero,32(sp)
802063d4:	d9000715 	stw	r4,28(sp)
802063d8:	d8000615 	stw	zero,24(sp)
802063dc:	d8c00515 	stw	r3,20(sp)
802063e0:	d8800415 	stw	r2,16(sp)
802063e4:	e0800317 	ldw	r2,12(fp)
802063e8:	d8800315 	stw	r2,12(sp)
802063ec:	e0800217 	ldw	r2,8(fp)
802063f0:	d8800215 	stw	r2,8(sp)
802063f4:	d8000115 	stw	zero,4(sp)
802063f8:	d8000015 	stw	zero,0(sp)
802063fc:	e1fffc17 	ldw	r7,-16(fp)
80206400:	e1bffb17 	ldw	r6,-20(fp)
80206404:	e17ffa17 	ldw	r5,-24(fp)
80206408:	e13ff917 	ldw	r4,-28(fp)
8020640c:	02060500 	call	80206050 <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, 0, 0, length, control, 
            sequence_number, read_burst_count, 0, read_stride, 0);
}
80206410:	e037883a 	mov	sp,fp
80206414:	dfc00117 	ldw	ra,4(sp)
80206418:	df000017 	ldw	fp,0(sp)
8020641c:	dec00204 	addi	sp,sp,8
80206420:	f800283a 	ret

80206424 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number,
    alt_u8 read_burst_count,
    alt_u8 write_burst_count, 
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
80206424:	deffec04 	addi	sp,sp,-80
80206428:	dfc01315 	stw	ra,76(sp)
8020642c:	df001215 	stw	fp,72(sp)
80206430:	df001204 	addi	fp,sp,72
80206434:	e13ff715 	stw	r4,-36(fp)
80206438:	e17ff815 	stw	r5,-32(fp)
8020643c:	e1bff915 	stw	r6,-28(fp)
80206440:	e1fffa15 	stw	r7,-24(fp)
80206444:	e1800617 	ldw	r6,24(fp)
80206448:	e1400717 	ldw	r5,28(fp)
8020644c:	e1000817 	ldw	r4,32(fp)
80206450:	e0c00917 	ldw	r3,36(fp)
80206454:	e0800a17 	ldw	r2,40(fp)
80206458:	e1bffb0d 	sth	r6,-20(fp)
8020645c:	e17ffc05 	stb	r5,-16(fp)
80206460:	e13ffd05 	stb	r4,-12(fp)
80206464:	e0fffe0d 	sth	r3,-8(fp)
80206468:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
8020646c:	e0bffb0b 	ldhu	r2,-20(fp)
80206470:	e0fffc03 	ldbu	r3,-16(fp)
80206474:	e13ffd03 	ldbu	r4,-12(fp)
80206478:	e17ffe0b 	ldhu	r5,-8(fp)
8020647c:	e1bfff0b 	ldhu	r6,-4(fp)
80206480:	d9800815 	stw	r6,32(sp)
80206484:	d9400715 	stw	r5,28(sp)
80206488:	d9000615 	stw	r4,24(sp)
8020648c:	d8c00515 	stw	r3,20(sp)
80206490:	d8800415 	stw	r2,16(sp)
80206494:	e0800517 	ldw	r2,20(fp)
80206498:	d8800315 	stw	r2,12(sp)
8020649c:	e0800417 	ldw	r2,16(fp)
802064a0:	d8800215 	stw	r2,8(sp)
802064a4:	e0800317 	ldw	r2,12(fp)
802064a8:	d8800115 	stw	r2,4(sp)
802064ac:	e0800217 	ldw	r2,8(fp)
802064b0:	d8800015 	stw	r2,0(sp)
802064b4:	e1fffa17 	ldw	r7,-24(fp)
802064b8:	e1bff917 	ldw	r6,-28(fp)
802064bc:	e17ff817 	ldw	r5,-32(fp)
802064c0:	e13ff717 	ldw	r4,-36(fp)
802064c4:	02060500 	call	80206050 <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, write_address_high, 
            write_address_low, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
802064c8:	e037883a 	mov	sp,fp
802064cc:	dfc00117 	ldw	ra,4(sp)
802064d0:	df000017 	ldw	fp,0(sp)
802064d4:	dec00204 	addi	sp,sp,8
802064d8:	f800283a 	ret

802064dc <alt_msgdma_prefetcher_add_standard_desc_to_list>:
 *           descriptor.next_ptr not pointing back to itslef)
 */
int alt_msgdma_prefetcher_add_standard_desc_to_list (
    alt_msgdma_prefetcher_standard_descriptor** list,
    alt_msgdma_prefetcher_standard_descriptor* descriptor)
{
802064dc:	defffc04 	addi	sp,sp,-16
802064e0:	df000315 	stw	fp,12(sp)
802064e4:	df000304 	addi	fp,sp,12
802064e8:	e13ffe15 	stw	r4,-8(fp)
802064ec:	e17fff15 	stw	r5,-4(fp)
    alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
    
    if (descriptor == NULL)
802064f0:	e0bfff17 	ldw	r2,-4(fp)
802064f4:	1000021e 	bne	r2,zero,80206500 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x24>
    {
        return -EINVAL;  /* this descriptor cannot be NULL */
802064f8:	00bffa84 	movi	r2,-22
802064fc:	00002f06 	br	802065bc <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
    }
    if (descriptor->next_desc_ptr != (alt_u32)descriptor)
80206500:	e0bfff17 	ldw	r2,-4(fp)
80206504:	10c00317 	ldw	r3,12(r2)
80206508:	e0bfff17 	ldw	r2,-4(fp)
8020650c:	18800226 	beq	r3,r2,80206518 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x3c>
    {
        return -EINVAL;  /* descriptor.next_ptr must point to itself */
80206510:	00bffa84 	movi	r2,-22
80206514:	00002906 	br	802065bc <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
    }
    if (*list == NULL)
80206518:	e0bffe17 	ldw	r2,-8(fp)
8020651c:	10800017 	ldw	r2,0(r2)
80206520:	1000051e 	bne	r2,zero,80206538 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x5c>
    {
        *list = descriptor;  /* make this root-node if list is empty */
80206524:	e0bffe17 	ldw	r2,-8(fp)
80206528:	e0ffff17 	ldw	r3,-4(fp)
8020652c:	10c00015 	stw	r3,0(r2)
        return 0;  /* successfully added */
80206530:	0005883a 	mov	r2,zero
80206534:	00002106 	br	802065bc <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
    }
    if (*list == descriptor)
80206538:	e0bffe17 	ldw	r2,-8(fp)
8020653c:	10c00017 	ldw	r3,0(r2)
80206540:	e0bfff17 	ldw	r2,-4(fp)
80206544:	1880021e 	bne	r3,r2,80206550 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x74>
    {
        return -EINVAL;  /* this descriptor cannot already be root-node */
80206548:	00bffa84 	movi	r2,-22
8020654c:	00001b06 	br	802065bc <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
    }
    
    /* get to last node in the list */
    last_descr_ptr = *list; /* start at list root-node */
80206550:	e0bffe17 	ldw	r2,-8(fp)
80206554:	10800017 	ldw	r2,0(r2)
80206558:	e0bffd15 	stw	r2,-12(fp)
    /* traverse list until you get the last node */
    while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
8020655c:	00000906 	br	80206584 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xa8>
    {
        if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
80206560:	e0bffd17 	ldw	r2,-12(fp)
80206564:	10c00317 	ldw	r3,12(r2)
80206568:	e0bfff17 	ldw	r2,-4(fp)
8020656c:	1880021e 	bne	r3,r2,80206578 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x9c>
        {
            return -EINVAL;  /* descriptor cannot already be in the list */
80206570:	00bffa84 	movi	r2,-22
80206574:	00001106 	br	802065bc <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
        }
        last_descr_ptr = 
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
80206578:	e0bffd17 	ldw	r2,-12(fp)
8020657c:	10800317 	ldw	r2,12(r2)
    {
        if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
        {
            return -EINVAL;  /* descriptor cannot already be in the list */
        }
        last_descr_ptr = 
80206580:	e0bffd15 	stw	r2,-12(fp)
    }
    
    /* get to last node in the list */
    last_descr_ptr = *list; /* start at list root-node */
    /* traverse list until you get the last node */
    while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
80206584:	e0bffd17 	ldw	r2,-12(fp)
80206588:	10800317 	ldw	r2,12(r2)
8020658c:	e0fffe17 	ldw	r3,-8(fp)
80206590:	18c00017 	ldw	r3,0(r3)
80206594:	10fff21e 	bne	r2,r3,80206560 <__reset+0xfa1e6560>
        }
        last_descr_ptr = 
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
    }
    /* add this descriptor to end of list */
    last_descr_ptr->next_desc_ptr = (alt_u32)((uintptr_t)descriptor);
80206598:	e0ffff17 	ldw	r3,-4(fp)
8020659c:	e0bffd17 	ldw	r2,-12(fp)
802065a0:	10c00315 	stw	r3,12(r2)
    /* ensure new last pointer points the start of the list */
    descriptor->next_desc_ptr = (alt_u32)((uintptr_t)*list);  
802065a4:	e0bffe17 	ldw	r2,-8(fp)
802065a8:	10800017 	ldw	r2,0(r2)
802065ac:	1007883a 	mov	r3,r2
802065b0:	e0bfff17 	ldw	r2,-4(fp)
802065b4:	10c00315 	stw	r3,12(r2)
    return 0; /* successfully added */
802065b8:	0005883a 	mov	r2,zero
}
802065bc:	e037883a 	mov	sp,fp
802065c0:	df000017 	ldw	fp,0(sp)
802065c4:	dec00104 	addi	sp,sp,4
802065c8:	f800283a 	ret

802065cc <alt_msgdma_prefetcher_add_extended_desc_to_list>:

int alt_msgdma_prefetcher_add_extended_desc_to_list (
    alt_msgdma_prefetcher_extended_descriptor** list,
    alt_msgdma_prefetcher_extended_descriptor* descriptor)
{
802065cc:	defff804 	addi	sp,sp,-32
802065d0:	df000715 	stw	fp,28(sp)
802065d4:	df000704 	addi	fp,sp,28
802065d8:	e13ffe15 	stw	r4,-8(fp)
802065dc:	e17fff15 	stw	r5,-4(fp)
    alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
    msgdma_addr64 root_node_addr, next_node_addr;
    
    if (descriptor == NULL)
802065e0:	e13fff17 	ldw	r4,-4(fp)
802065e4:	2000021e 	bne	r4,zero,802065f0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x24>
    {
        return -EINVAL;  /* this descriptor cannot be NULL */
802065e8:	00bffa84 	movi	r2,-22
802065ec:	00005906 	br	80206754 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
    }
    
    next_node_addr.u64 = (uintptr_t)descriptor;
802065f0:	e13fff17 	ldw	r4,-4(fp)
802065f4:	2015883a 	mov	r10,r4
802065f8:	0017883a 	mov	r11,zero
802065fc:	e2bffc15 	stw	r10,-16(fp)
80206600:	e2fffd15 	stw	r11,-12(fp)
    if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) ||
80206604:	e13fff17 	ldw	r4,-4(fp)
80206608:	21400317 	ldw	r5,12(r4)
8020660c:	e13ffc17 	ldw	r4,-16(fp)
80206610:	2900041e 	bne	r5,r4,80206624 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x58>
        (descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
80206614:	e13fff17 	ldw	r4,-4(fp)
80206618:	21400b17 	ldw	r5,44(r4)
8020661c:	e13ffd17 	ldw	r4,-12(fp)
    {
        return -EINVAL;  /* this descriptor cannot be NULL */
    }
    
    next_node_addr.u64 = (uintptr_t)descriptor;
    if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) ||
80206620:	29000226 	beq	r5,r4,8020662c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
        (descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
    {
        return -EINVAL;  /* descriptor.next_ptr must point to itself */
80206624:	00bffa84 	movi	r2,-22
80206628:	00004a06 	br	80206754 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
    }
    
    if (*list == NULL)
8020662c:	e13ffe17 	ldw	r4,-8(fp)
80206630:	21000017 	ldw	r4,0(r4)
80206634:	2000051e 	bne	r4,zero,8020664c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x80>
    {
        *list = descriptor;  /* make this the root-node if list is empty */
80206638:	e0bffe17 	ldw	r2,-8(fp)
8020663c:	e0ffff17 	ldw	r3,-4(fp)
80206640:	10c00015 	stw	r3,0(r2)
        return 0;
80206644:	0005883a 	mov	r2,zero
80206648:	00004206 	br	80206754 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
    }
    if (*list == descriptor)
8020664c:	e13ffe17 	ldw	r4,-8(fp)
80206650:	21400017 	ldw	r5,0(r4)
80206654:	e13fff17 	ldw	r4,-4(fp)
80206658:	2900021e 	bne	r5,r4,80206664 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x98>
    {
        return -EINVAL;  /* this descriptor cannot already be root-node */
8020665c:	00bffa84 	movi	r2,-22
80206660:	00003c06 	br	80206754 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
    }
    
    /* get to last node in the list */
    last_descr_ptr = *list; /* start at list root-node */
80206664:	e13ffe17 	ldw	r4,-8(fp)
80206668:	21000017 	ldw	r4,0(r4)
8020666c:	e13ff915 	stw	r4,-28(fp)
    /* the last nodes next ptr should point to the root node*/
    root_node_addr.u64 = (uintptr_t)*list;
80206670:	e13ffe17 	ldw	r4,-8(fp)
80206674:	21000017 	ldw	r4,0(r4)
80206678:	2011883a 	mov	r8,r4
8020667c:	0013883a 	mov	r9,zero
80206680:	e23ffa15 	stw	r8,-24(fp)
80206684:	e27ffb15 	stw	r9,-20(fp)
    
    /* traverse list until you get the last node */
    while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
80206688:	00001806 	br	802066ec <alt_msgdma_prefetcher_add_extended_desc_to_list+0x120>
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
    {
        /* first check if descriptor already in the list */
        next_node_addr.u64 = (uintptr_t)descriptor;
8020668c:	e13fff17 	ldw	r4,-4(fp)
80206690:	200d883a 	mov	r6,r4
80206694:	000f883a 	mov	r7,zero
80206698:	e1bffc15 	stw	r6,-16(fp)
8020669c:	e1fffd15 	stw	r7,-12(fp)
        if ((last_descr_ptr->next_desc_ptr_low == next_node_addr.u32[0])
802066a0:	e13ff917 	ldw	r4,-28(fp)
802066a4:	21400317 	ldw	r5,12(r4)
802066a8:	e13ffc17 	ldw	r4,-16(fp)
802066ac:	2900061e 	bne	r5,r4,802066c8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
            && (last_descr_ptr->next_desc_ptr_high == next_node_addr.u32[1]))
802066b0:	e13ff917 	ldw	r4,-28(fp)
802066b4:	21400b17 	ldw	r5,44(r4)
802066b8:	e13ffd17 	ldw	r4,-12(fp)
802066bc:	2900021e 	bne	r5,r4,802066c8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
        {
            return -EINVAL;  /* descriptor cannot already be in the list */
802066c0:	00bffa84 	movi	r2,-22
802066c4:	00002306 	br	80206754 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
        }
        /* go to next node in list, using 64 bit address */
        next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
802066c8:	e13ff917 	ldw	r4,-28(fp)
802066cc:	21000317 	ldw	r4,12(r4)
802066d0:	e13ffc15 	stw	r4,-16(fp)
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
802066d4:	e13ff917 	ldw	r4,-28(fp)
802066d8:	21000b17 	ldw	r4,44(r4)
802066dc:	e13ffd15 	stw	r4,-12(fp)
        last_descr_ptr = 
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
802066e0:	e13ffc17 	ldw	r4,-16(fp)
802066e4:	e17ffd17 	ldw	r5,-12(fp)
            return -EINVAL;  /* descriptor cannot already be in the list */
        }
        /* go to next node in list, using 64 bit address */
        next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
        last_descr_ptr = 
802066e8:	e13ff915 	stw	r4,-28(fp)
    last_descr_ptr = *list; /* start at list root-node */
    /* the last nodes next ptr should point to the root node*/
    root_node_addr.u64 = (uintptr_t)*list;
    
    /* traverse list until you get the last node */
    while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
802066ec:	e13ff917 	ldw	r4,-28(fp)
802066f0:	21400317 	ldw	r5,12(r4)
802066f4:	e13ffa17 	ldw	r4,-24(fp)
802066f8:	293fe41e 	bne	r5,r4,8020668c <__reset+0xfa1e668c>
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
802066fc:	e13ff917 	ldw	r4,-28(fp)
80206700:	21400b17 	ldw	r5,44(r4)
80206704:	e13ffb17 	ldw	r4,-20(fp)
80206708:	293fe01e 	bne	r5,r4,8020668c <__reset+0xfa1e668c>
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
        last_descr_ptr = 
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
    }
    /* add this descriptor to end of list */
    next_node_addr.u64 = (uintptr_t)descriptor;
8020670c:	e13fff17 	ldw	r4,-4(fp)
80206710:	2005883a 	mov	r2,r4
80206714:	0007883a 	mov	r3,zero
80206718:	e0bffc15 	stw	r2,-16(fp)
8020671c:	e0fffd15 	stw	r3,-12(fp)
    last_descr_ptr->next_desc_ptr_low = next_node_addr.u32[0];
80206720:	e0fffc17 	ldw	r3,-16(fp)
80206724:	e0bff917 	ldw	r2,-28(fp)
80206728:	10c00315 	stw	r3,12(r2)
    last_descr_ptr->next_desc_ptr_high = next_node_addr.u32[1];
8020672c:	e0fffd17 	ldw	r3,-12(fp)
80206730:	e0bff917 	ldw	r2,-28(fp)
80206734:	10c00b15 	stw	r3,44(r2)
    /* ensure new last pointer points the beginning of the list */
    descriptor->next_desc_ptr_low = root_node_addr.u32[0];
80206738:	e0fffa17 	ldw	r3,-24(fp)
8020673c:	e0bfff17 	ldw	r2,-4(fp)
80206740:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = root_node_addr.u32[1];
80206744:	e0fffb17 	ldw	r3,-20(fp)
80206748:	e0bfff17 	ldw	r2,-4(fp)
8020674c:	10c00b15 	stw	r3,44(r2)
    return 0;
80206750:	0005883a 	mov	r2,zero
}
80206754:	e037883a 	mov	sp,fp
80206758:	df000017 	ldw	fp,0(sp)
8020675c:	dec00104 	addi	sp,sp,4
80206760:	f800283a 	ret

80206764 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>:
 */ 
int alt_msgdma_prefetcher_set_std_list_own_by_hw_bits (
    alt_msgdma_prefetcher_standard_descriptor *list,
    alt_u8 last_desc_owned_by_sw,
    alt_u8 dcache_flush_desc_list)    
{
80206764:	defff804 	addi	sp,sp,-32
80206768:	dfc00715 	stw	ra,28(sp)
8020676c:	df000615 	stw	fp,24(sp)
80206770:	df000604 	addi	fp,sp,24
80206774:	e13ffd15 	stw	r4,-12(fp)
80206778:	2807883a 	mov	r3,r5
8020677c:	3005883a 	mov	r2,r6
80206780:	e0fffe05 	stb	r3,-8(fp)
80206784:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 descriptor_control_field = 0;
80206788:	e03ffc15 	stw	zero,-16(fp)
    alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
    alt_u32 descriptor_count = 0;
8020678c:	e03ffb15 	stw	zero,-20(fp)
    
    if (list == NULL)
80206790:	e0bffd17 	ldw	r2,-12(fp)
80206794:	1000021e 	bne	r2,zero,802067a0 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x3c>
    {
        return -EINVAL;  /* this list cannot be empty */
80206798:	00bffa84 	movi	r2,-22
8020679c:	00002f06 	br	8020685c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xf8>
    }

    /* update all nodes in the list */
    last_descr_ptr = list; /* start at list root-node */
802067a0:	e0bffd17 	ldw	r2,-12(fp)
802067a4:	e0bffa15 	stw	r2,-24(fp)
    /* traverse list to update all of the nodes */
    while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
802067a8:	00000d06 	br	802067e0 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x7c>
    {
        /* get current value */
        descriptor_control_field = last_descr_ptr->control;
802067ac:	e0bffa17 	ldw	r2,-24(fp)
802067b0:	10800717 	ldw	r2,28(r2)
802067b4:	e0bffc15 	stw	r2,-16(fp)
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
802067b8:	e0bffc17 	ldw	r2,-16(fp)
802067bc:	10d00034 	orhi	r3,r2,16384
    while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
    {
        /* get current value */
        descriptor_control_field = last_descr_ptr->control;
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
802067c0:	e0bffa17 	ldw	r2,-24(fp)
802067c4:	10c00715 	stw	r3,28(r2)
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
        /* go to next node in list */
        last_descr_ptr = 
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
802067c8:	e0bffa17 	ldw	r2,-24(fp)
802067cc:	10800317 	ldw	r2,12(r2)
        descriptor_control_field = last_descr_ptr->control;
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
        /* go to next node in list */
        last_descr_ptr = 
802067d0:	e0bffa15 	stw	r2,-24(fp)
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
            
        descriptor_count++;
802067d4:	e0bffb17 	ldw	r2,-20(fp)
802067d8:	10800044 	addi	r2,r2,1
802067dc:	e0bffb15 	stw	r2,-20(fp)
    }

    /* update all nodes in the list */
    last_descr_ptr = list; /* start at list root-node */
    /* traverse list to update all of the nodes */
    while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
802067e0:	e0bffa17 	ldw	r2,-24(fp)
802067e4:	10c00317 	ldw	r3,12(r2)
802067e8:	e0bffd17 	ldw	r2,-12(fp)
802067ec:	18bfef1e 	bne	r3,r2,802067ac <__reset+0xfa1e67ac>
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
            
        descriptor_count++;
    }
    /* update the last node in the list, currently last_descr_ptr after while loop */
    descriptor_control_field = last_descr_ptr->control;    /* get current value */
802067f0:	e0bffa17 	ldw	r2,-24(fp)
802067f4:	10800717 	ldw	r2,28(r2)
802067f8:	e0bffc15 	stw	r2,-16(fp)
    /* update own_by_hw bit only */
    if (last_desc_owned_by_sw)
802067fc:	e0bffe03 	ldbu	r2,-8(fp)
80206800:	10000726 	beq	r2,zero,80206820 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xbc>
    {
        last_descr_ptr->control = descriptor_control_field 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
80206804:	e0fffc17 	ldw	r3,-16(fp)
80206808:	00b00034 	movhi	r2,49152
8020680c:	10bfffc4 	addi	r2,r2,-1
80206810:	1886703a 	and	r3,r3,r2
    /* update the last node in the list, currently last_descr_ptr after while loop */
    descriptor_control_field = last_descr_ptr->control;    /* get current value */
    /* update own_by_hw bit only */
    if (last_desc_owned_by_sw)
    {
        last_descr_ptr->control = descriptor_control_field 
80206814:	e0bffa17 	ldw	r2,-24(fp)
80206818:	10c00715 	stw	r3,28(r2)
8020681c:	00000406 	br	80206830 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xcc>
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
    }
    else {
        last_descr_ptr->control = descriptor_control_field 
            | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;        
80206820:	e0bffc17 	ldw	r2,-16(fp)
80206824:	10d00034 	orhi	r3,r2,16384
    {
        last_descr_ptr->control = descriptor_control_field 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
    }
    else {
        last_descr_ptr->control = descriptor_control_field 
80206828:	e0bffa17 	ldw	r2,-24(fp)
8020682c:	10c00715 	stw	r3,28(r2)
            | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;        
    }
    
    descriptor_count++;
80206830:	e0bffb17 	ldw	r2,-20(fp)
80206834:	10800044 	addi	r2,r2,1
80206838:	e0bffb15 	stw	r2,-20(fp)
    
    if (dcache_flush_desc_list)
8020683c:	e0bfff03 	ldbu	r2,-4(fp)
80206840:	10000526 	beq	r2,zero,80206858 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xf4>
    {        
        alt_dcache_flush(list,sizeof(alt_msgdma_prefetcher_standard_descriptor) * descriptor_count);
80206844:	e0bffb17 	ldw	r2,-20(fp)
80206848:	1004917a 	slli	r2,r2,5
8020684c:	100b883a 	mov	r5,r2
80206850:	e13ffd17 	ldw	r4,-12(fp)
80206854:	02073280 	call	80207328 <alt_dcache_flush>
    }
    
    return 0;
80206858:	0005883a 	mov	r2,zero
}
8020685c:	e037883a 	mov	sp,fp
80206860:	dfc00117 	ldw	ra,4(sp)
80206864:	df000017 	ldw	fp,0(sp)
80206868:	dec00204 	addi	sp,sp,8
8020686c:	f800283a 	ret

80206870 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>:
 */    
int alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits (
    alt_msgdma_prefetcher_extended_descriptor *list,
    alt_u8 last_desc_owned_by_sw,
    alt_u8 dcache_flush_desc_list) 
{    
80206870:	defff404 	addi	sp,sp,-48
80206874:	dfc00b15 	stw	ra,44(sp)
80206878:	df000a15 	stw	fp,40(sp)
8020687c:	df000a04 	addi	fp,sp,40
80206880:	e13ffd15 	stw	r4,-12(fp)
80206884:	3009883a 	mov	r4,r6
80206888:	e17ffe05 	stb	r5,-8(fp)
8020688c:	e13fff05 	stb	r4,-4(fp)
    alt_u32 descriptor_control_field = 0;
80206890:	e03ff815 	stw	zero,-32(fp)
    msgdma_addr64 root_node_addr, next_node_addr;
    alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
    alt_u32 descriptor_count = 0;
80206894:	e03ff715 	stw	zero,-36(fp)
    
    if (list == NULL)
80206898:	e13ffd17 	ldw	r4,-12(fp)
8020689c:	2000021e 	bne	r4,zero,802068a8 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x38>
    {
        return -EINVAL;  /* this list cannot be empty */
802068a0:	00bffa84 	movi	r2,-22
802068a4:	00003e06 	br	802069a0 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x130>
    }
    
    /* update all nodes in the list */
    last_descr_ptr = list; /* start at list root-node */
802068a8:	e13ffd17 	ldw	r4,-12(fp)
802068ac:	e13ff615 	stw	r4,-40(fp)
    /* the last nodes next ptr should point to the root node*/
    root_node_addr.u64 = (uintptr_t)list;
802068b0:	e13ffd17 	ldw	r4,-12(fp)
802068b4:	2005883a 	mov	r2,r4
802068b8:	0007883a 	mov	r3,zero
802068bc:	e0bff915 	stw	r2,-28(fp)
802068c0:	e0fffa15 	stw	r3,-24(fp)

    /* traverse list until you get the last node */
    while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
802068c4:	00001306 	br	80206914 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xa4>
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
    {
        /* start with current value */
        descriptor_control_field = last_descr_ptr->control;
802068c8:	e0bff617 	ldw	r2,-40(fp)
802068cc:	10800f17 	ldw	r2,60(r2)
802068d0:	e0bff815 	stw	r2,-32(fp)
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
802068d4:	e0bff817 	ldw	r2,-32(fp)
802068d8:	10d00034 	orhi	r3,r2,16384
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
    {
        /* start with current value */
        descriptor_control_field = last_descr_ptr->control;
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
802068dc:	e0bff617 	ldw	r2,-40(fp)
802068e0:	10c00f15 	stw	r3,60(r2)
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
        /* go to next node in list, using 64 bit address */
        next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
802068e4:	e0bff617 	ldw	r2,-40(fp)
802068e8:	10800317 	ldw	r2,12(r2)
802068ec:	e0bffb15 	stw	r2,-20(fp)
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
802068f0:	e0bff617 	ldw	r2,-40(fp)
802068f4:	10800b17 	ldw	r2,44(r2)
802068f8:	e0bffc15 	stw	r2,-16(fp)
        last_descr_ptr = 
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
802068fc:	e0bffb17 	ldw	r2,-20(fp)
80206900:	e0fffc17 	ldw	r3,-16(fp)
        last_descr_ptr->control = descriptor_control_field 
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
        /* go to next node in list, using 64 bit address */
        next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
        last_descr_ptr = 
80206904:	e0bff615 	stw	r2,-40(fp)
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
        descriptor_count++;            
80206908:	e0bff717 	ldw	r2,-36(fp)
8020690c:	10800044 	addi	r2,r2,1
80206910:	e0bff715 	stw	r2,-36(fp)
    last_descr_ptr = list; /* start at list root-node */
    /* the last nodes next ptr should point to the root node*/
    root_node_addr.u64 = (uintptr_t)list;

    /* traverse list until you get the last node */
    while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
80206914:	e0bff617 	ldw	r2,-40(fp)
80206918:	10c00317 	ldw	r3,12(r2)
8020691c:	e0bff917 	ldw	r2,-28(fp)
80206920:	18bfe91e 	bne	r3,r2,802068c8 <__reset+0xfa1e68c8>
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
80206924:	e0bff617 	ldw	r2,-40(fp)
80206928:	10c00b17 	ldw	r3,44(r2)
8020692c:	e0bffa17 	ldw	r2,-24(fp)
80206930:	18bfe51e 	bne	r3,r2,802068c8 <__reset+0xfa1e68c8>
        last_descr_ptr = 
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
        descriptor_count++;            
    }
    /* update the last node in the list, currently last_descr_ptr after while loop */
    descriptor_control_field = last_descr_ptr->control;    /* start with current value */
80206934:	e0bff617 	ldw	r2,-40(fp)
80206938:	10800f17 	ldw	r2,60(r2)
8020693c:	e0bff815 	stw	r2,-32(fp)
    /* update own_by_hw bit only */
    if (last_desc_owned_by_sw)
80206940:	e0bffe03 	ldbu	r2,-8(fp)
80206944:	10000726 	beq	r2,zero,80206964 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xf4>
    {
        last_descr_ptr->control = descriptor_control_field 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
80206948:	e0fff817 	ldw	r3,-32(fp)
8020694c:	00b00034 	movhi	r2,49152
80206950:	10bfffc4 	addi	r2,r2,-1
80206954:	1886703a 	and	r3,r3,r2
    /* update the last node in the list, currently last_descr_ptr after while loop */
    descriptor_control_field = last_descr_ptr->control;    /* start with current value */
    /* update own_by_hw bit only */
    if (last_desc_owned_by_sw)
    {
        last_descr_ptr->control = descriptor_control_field 
80206958:	e0bff617 	ldw	r2,-40(fp)
8020695c:	10c00f15 	stw	r3,60(r2)
80206960:	00000406 	br	80206974 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x104>
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
    }
    else {
        last_descr_ptr->control = descriptor_control_field 
            | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;        
80206964:	e0bff817 	ldw	r2,-32(fp)
80206968:	10d00034 	orhi	r3,r2,16384
    {
        last_descr_ptr->control = descriptor_control_field 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
    }
    else {
        last_descr_ptr->control = descriptor_control_field 
8020696c:	e0bff617 	ldw	r2,-40(fp)
80206970:	10c00f15 	stw	r3,60(r2)
            | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;        
    }
    
    descriptor_count++;
80206974:	e0bff717 	ldw	r2,-36(fp)
80206978:	10800044 	addi	r2,r2,1
8020697c:	e0bff715 	stw	r2,-36(fp)
    
    if (dcache_flush_desc_list)
80206980:	e0bfff03 	ldbu	r2,-4(fp)
80206984:	10000526 	beq	r2,zero,8020699c <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x12c>
    {        
        alt_dcache_flush(list,sizeof(alt_msgdma_prefetcher_extended_descriptor) * descriptor_count);        
80206988:	e0bff717 	ldw	r2,-36(fp)
8020698c:	100491ba 	slli	r2,r2,6
80206990:	100b883a 	mov	r5,r2
80206994:	e13ffd17 	ldw	r4,-12(fp)
80206998:	02073280 	call	80207328 <alt_dcache_flush>
    }
    
    return 0;
8020699c:	0005883a 	mov	r2,zero
}
802069a0:	e037883a 	mov	sp,fp
802069a4:	dfc00117 	ldw	ra,4(sp)
802069a8:	df000017 	ldw	fp,0(sp)
802069ac:	dec00204 	addi	sp,sp,8
802069b0:	f800283a 	ret

802069b4 <alt_msgdma_start_prefetcher_with_list_addr>:
int alt_msgdma_start_prefetcher_with_list_addr (
    alt_msgdma_dev *dev,
    alt_u64  list_addr,
    alt_u8 park_mode_en,
    alt_u8 poll_en)
{
802069b4:	deffef04 	addi	sp,sp,-68
802069b8:	df001015 	stw	fp,64(sp)
802069bc:	df001004 	addi	fp,sp,64
802069c0:	e13ffb15 	stw	r4,-20(fp)
802069c4:	e17ffc15 	stw	r5,-16(fp)
802069c8:	e1bffd15 	stw	r6,-12(fp)
802069cc:	3807883a 	mov	r3,r7
802069d0:	e0800117 	ldw	r2,4(fp)
802069d4:	e0fffe05 	stb	r3,-8(fp)
802069d8:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 prefetcher_ctl = 0;
802069dc:	e03ff015 	stw	zero,-64(fp)
    alt_u32 dispatcher_ctl = 0;
802069e0:	e03ff115 	stw	zero,-60(fp)
    alt_irq_context context = 0;
802069e4:	e03ff215 	stw	zero,-56(fp)
    
    /* use helper struct to get easy access to hi/low address */
    msgdma_addr64 root_node_addr;
    root_node_addr.u64 = list_addr;  
802069e8:	e0bffc17 	ldw	r2,-16(fp)
802069ec:	e0bff915 	stw	r2,-28(fp)
802069f0:	e0bffd17 	ldw	r2,-12(fp)
802069f4:	e0bffa15 	stw	r2,-24(fp)
     * semaphore. This ensures that accessing registers is thread-safe.
     */
    ALT_SEM_PEND (dev->regs_lock, 0);
    
    /* case where prefetcher already started, return busy error */ 
    prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
802069f8:	e0bffb17 	ldw	r2,-20(fp)
802069fc:	10800617 	ldw	r2,24(r2)
80206a00:	10800037 	ldwio	r2,0(r2)
80206a04:	e0bff015 	stw	r2,-64(fp)
    if(ALT_MSGDMA_PREFETCHER_CTRL_RUN_GET(prefetcher_ctl)){
80206a08:	e0bff017 	ldw	r2,-64(fp)
80206a0c:	1080004c 	andi	r2,r2,1
80206a10:	10000226 	beq	r2,zero,80206a1c <alt_msgdma_start_prefetcher_with_list_addr+0x68>
        /* release the registers semaphore */
        ALT_SEM_POST (dev->regs_lock);
        return -EBUSY;
80206a14:	00bffc04 	movi	r2,-16
80206a18:	00009206 	br	80206c64 <alt_msgdma_start_prefetcher_with_list_addr+0x2b0>
    }
        
    /* Stop the msgdma dispatcher from issuing more descriptors to the
       read or write masters  */
    /* stop issuing more descriptors */
    dispatcher_ctl = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
80206a1c:	00800804 	movi	r2,32
80206a20:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80206a24:	0005303a 	rdctl	r2,status
80206a28:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80206a2c:	e0fff517 	ldw	r3,-44(fp)
80206a30:	00bfff84 	movi	r2,-2
80206a34:	1884703a 	and	r2,r3,r2
80206a38:	1001703a 	wrctl	status,r2
  
  return context;
80206a3c:	e0bff517 	ldw	r2,-44(fp)
    
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
80206a40:	e0bff215 	stw	r2,-56(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
80206a44:	e0bffb17 	ldw	r2,-20(fp)
80206a48:	10800317 	ldw	r2,12(r2)
80206a4c:	10800104 	addi	r2,r2,4
80206a50:	e0fff117 	ldw	r3,-60(fp)
80206a54:	10c00035 	stwio	r3,0(r2)
    /*
     * Clear any (previous) status register information
     * that might occlude our error checking later.
     */
    IOWR_ALTERA_MSGDMA_CSR_STATUS( dev->csr_base, 
80206a58:	e0bffb17 	ldw	r2,-20(fp)
80206a5c:	10800317 	ldw	r2,12(r2)
80206a60:	e0fffb17 	ldw	r3,-20(fp)
80206a64:	18c00317 	ldw	r3,12(r3)
80206a68:	18c00037 	ldwio	r3,0(r3)
80206a6c:	10c00035 	stwio	r3,0(r2)
80206a70:	e0bff217 	ldw	r2,-56(fp)
80206a74:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80206a78:	e0bff317 	ldw	r2,-52(fp)
80206a7c:	1001703a 	wrctl	status,r2
     * If a callback routine has been previously registered which will be
     * called from the msgdma ISR. Set up dispatcher to:
     *  - Run
     *  - Stop on an error with any particular descriptor
     */
    if(dev->callback)
80206a80:	e0bffb17 	ldw	r2,-20(fp)
80206a84:	10800b17 	ldw	r2,44(r2)
80206a88:	10002326 	beq	r2,zero,80206b18 <alt_msgdma_start_prefetcher_with_list_addr+0x164>
    {
        dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
80206a8c:	e0bffb17 	ldw	r2,-20(fp)
80206a90:	10c00d17 	ldw	r3,52(r2)
80206a94:	e0bff117 	ldw	r2,-60(fp)
80206a98:	1884b03a 	or	r2,r3,r2
80206a9c:	10800514 	ori	r2,r2,20
80206aa0:	e0bff115 	stw	r2,-60(fp)
                | ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
80206aa4:	e0fff117 	ldw	r3,-60(fp)
80206aa8:	00bff7c4 	movi	r2,-33
80206aac:	1884703a 	and	r2,r3,r2
80206ab0:	e0bff115 	stw	r2,-60(fp)
        
        prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
80206ab4:	e0bff017 	ldw	r2,-64(fp)
80206ab8:	10800214 	ori	r2,r2,8
80206abc:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80206ac0:	0005303a 	rdctl	r2,status
80206ac4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80206ac8:	e0fff717 	ldw	r3,-36(fp)
80206acc:	00bfff84 	movi	r2,-2
80206ad0:	1884703a 	and	r2,r3,r2
80206ad4:	1001703a 	wrctl	status,r2
  
  return context;
80206ad8:	e0bff717 	ldw	r2,-36(fp)
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
80206adc:	e0bff215 	stw	r2,-56(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
80206ae0:	e0bffb17 	ldw	r2,-20(fp)
80206ae4:	10800317 	ldw	r2,12(r2)
80206ae8:	10800104 	addi	r2,r2,4
80206aec:	e0fff117 	ldw	r3,-60(fp)
80206af0:	10c00035 	stwio	r3,0(r2)
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
80206af4:	e0bffb17 	ldw	r2,-20(fp)
80206af8:	10800617 	ldw	r2,24(r2)
80206afc:	e0fff017 	ldw	r3,-64(fp)
80206b00:	10c00035 	stwio	r3,0(r2)
80206b04:	e0bff217 	ldw	r2,-56(fp)
80206b08:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80206b0c:	e0bff417 	ldw	r2,-48(fp)
80206b10:	1001703a 	wrctl	status,r2
80206b14:	00002306 	br	80206ba4 <alt_msgdma_start_prefetcher_with_list_addr+0x1f0>
      *   - Stop on an error with any particular descriptor
      *   - Disable interrupt generation
      */
     else
     {
         dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
80206b18:	e0bffb17 	ldw	r2,-20(fp)
80206b1c:	10c00d17 	ldw	r3,52(r2)
80206b20:	e0bff117 	ldw	r2,-60(fp)
80206b24:	1884b03a 	or	r2,r3,r2
80206b28:	10800114 	ori	r2,r2,4
80206b2c:	e0bff115 	stw	r2,-60(fp)
         dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
80206b30:	e0fff117 	ldw	r3,-60(fp)
80206b34:	00bff3c4 	movi	r2,-49
80206b38:	1884703a 	and	r2,r3,r2
80206b3c:	e0bff115 	stw	r2,-60(fp)
                 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
         prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
80206b40:	e0fff017 	ldw	r3,-64(fp)
80206b44:	00bffdc4 	movi	r2,-9
80206b48:	1884703a 	and	r2,r3,r2
80206b4c:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80206b50:	0005303a 	rdctl	r2,status
80206b54:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80206b58:	e0fff817 	ldw	r3,-32(fp)
80206b5c:	00bfff84 	movi	r2,-2
80206b60:	1884703a 	and	r2,r3,r2
80206b64:	1001703a 	wrctl	status,r2
  
  return context;
80206b68:	e0bff817 	ldw	r2,-32(fp)
         /* making sure the read-modify-write below can't be pre-empted */
         context = alt_irq_disable_all();
80206b6c:	e0bff215 	stw	r2,-56(fp)
         IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
80206b70:	e0bffb17 	ldw	r2,-20(fp)
80206b74:	10800317 	ldw	r2,12(r2)
80206b78:	10800104 	addi	r2,r2,4
80206b7c:	e0fff117 	ldw	r3,-60(fp)
80206b80:	10c00035 	stwio	r3,0(r2)
         IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
80206b84:	e0bffb17 	ldw	r2,-20(fp)
80206b88:	10800617 	ldw	r2,24(r2)
80206b8c:	e0fff017 	ldw	r3,-64(fp)
80206b90:	10c00035 	stwio	r3,0(r2)
80206b94:	e0bff217 	ldw	r2,-56(fp)
80206b98:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80206b9c:	e0bff617 	ldw	r2,-40(fp)
80206ba0:	1001703a 	wrctl	status,r2
         alt_irq_enable_all(context);
     }   
    
     /* set next descriptor registers to point to the list root-node */
     IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_LOW(dev->prefetcher_base,
80206ba4:	e0bffb17 	ldw	r2,-20(fp)
80206ba8:	10800617 	ldw	r2,24(r2)
80206bac:	10800104 	addi	r2,r2,4
80206bb0:	e0fff917 	ldw	r3,-28(fp)
80206bb4:	10c00035 	stwio	r3,0(r2)
             root_node_addr.u32[0]);
     IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_HIGH(dev->prefetcher_base,
80206bb8:	e0bffb17 	ldw	r2,-20(fp)
80206bbc:	10800617 	ldw	r2,24(r2)
80206bc0:	10800204 	addi	r2,r2,8
80206bc4:	e0fffa17 	ldw	r3,-24(fp)
80206bc8:	10c00035 	stwio	r3,0(r2)
             root_node_addr.u32[1]);
        
     /* set park-mode */
     if (park_mode_en){
80206bcc:	e0bffe03 	ldbu	r2,-8(fp)
80206bd0:	10000426 	beq	r2,zero,80206be4 <alt_msgdma_start_prefetcher_with_list_addr+0x230>
         prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
80206bd4:	e0bff017 	ldw	r2,-64(fp)
80206bd8:	10800414 	ori	r2,r2,16
80206bdc:	e0bff015 	stw	r2,-64(fp)
80206be0:	00000406 	br	80206bf4 <alt_msgdma_start_prefetcher_with_list_addr+0x240>
     }
     else {
         prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
80206be4:	e0fff017 	ldw	r3,-64(fp)
80206be8:	00bffbc4 	movi	r2,-17
80206bec:	1884703a 	and	r2,r3,r2
80206bf0:	e0bff015 	stw	r2,-64(fp)
     }
     
     /* set poll-en */
     if (poll_en){
80206bf4:	e0bfff03 	ldbu	r2,-4(fp)
80206bf8:	10000e26 	beq	r2,zero,80206c34 <alt_msgdma_start_prefetcher_with_list_addr+0x280>
         prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
80206bfc:	e0bff017 	ldw	r2,-64(fp)
80206c00:	10800094 	ori	r2,r2,2
80206c04:	e0bff015 	stw	r2,-64(fp)
         if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
80206c08:	e0bffb17 	ldw	r2,-20(fp)
80206c0c:	10800617 	ldw	r2,24(r2)
80206c10:	10800304 	addi	r2,r2,12
80206c14:	10800037 	ldwio	r2,0(r2)
80206c18:	10000a1e 	bne	r2,zero,80206c44 <alt_msgdma_start_prefetcher_with_list_addr+0x290>
                 dev->prefetcher_base) == 0){
             /* set poll frequency to some non-zero default value */
             IOWR_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
80206c1c:	e0bffb17 	ldw	r2,-20(fp)
80206c20:	10800617 	ldw	r2,24(r2)
80206c24:	10800304 	addi	r2,r2,12
80206c28:	00c03fc4 	movi	r3,255
80206c2c:	10c00035 	stwio	r3,0(r2)
80206c30:	00000406 	br	80206c44 <alt_msgdma_start_prefetcher_with_list_addr+0x290>
                     dev->prefetcher_base, 0xFF);
         }
     }
     else {
         prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_CLR_MASK; 
80206c34:	e0fff017 	ldw	r3,-64(fp)
80206c38:	00bfff44 	movi	r2,-3
80206c3c:	1884703a 	and	r2,r3,r2
80206c40:	e0bff015 	stw	r2,-64(fp)
     }
     
     /* set the prefetcher run bit */
     prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_RUN_SET_MASK;
80206c44:	e0bff017 	ldw	r2,-64(fp)
80206c48:	10800054 	ori	r2,r2,1
80206c4c:	e0bff015 	stw	r2,-64(fp)
     /* start the dma since run bit is set */
     IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
80206c50:	e0bffb17 	ldw	r2,-20(fp)
80206c54:	10800617 	ldw	r2,24(r2)
80206c58:	e0fff017 	ldw	r3,-64(fp)
80206c5c:	10c00035 	stwio	r3,0(r2)
      * Now that access to the registers is complete, release the registers
      * semaphore so that other threads can access the registers.
      */
     ALT_SEM_POST (dev->regs_lock);
     
     return 0;
80206c60:	0005883a 	mov	r2,zero
}
80206c64:	e037883a 	mov	sp,fp
80206c68:	df000017 	ldw	fp,0(sp)
80206c6c:	dec00104 	addi	sp,sp,4
80206c70:	f800283a 	ret

80206c74 <alt_msgdma_start_prefetcher_with_std_desc_list>:
    alt_msgdma_prefetcher_standard_descriptor *list,
    alt_u8 park_mode_en,
    alt_u8 poll_en,
    alt_u8 last_desc_owned_by_sw,
    alt_u8 dcache_flush_desc_list)
{    
80206c74:	defff504 	addi	sp,sp,-44
80206c78:	dfc00a15 	stw	ra,40(sp)
80206c7c:	df000915 	stw	fp,36(sp)
80206c80:	dc400815 	stw	r17,32(sp)
80206c84:	dc000715 	stw	r16,28(sp)
80206c88:	df000904 	addi	fp,sp,36
80206c8c:	e13ff815 	stw	r4,-32(fp)
80206c90:	e17ff915 	stw	r5,-28(fp)
80206c94:	300b883a 	mov	r5,r6
80206c98:	3809883a 	mov	r4,r7
80206c9c:	e0c00217 	ldw	r3,8(fp)
80206ca0:	e0800317 	ldw	r2,12(fp)
80206ca4:	e17ffa05 	stb	r5,-24(fp)
80206ca8:	e13ffb05 	stb	r4,-20(fp)
80206cac:	e0fffc05 	stb	r3,-16(fp)
80206cb0:	e0bffd05 	stb	r2,-12(fp)
    if (alt_msgdma_prefetcher_set_std_list_own_by_hw_bits(list,last_desc_owned_by_sw,dcache_flush_desc_list) != 0)
80206cb4:	e0bffc03 	ldbu	r2,-16(fp)
80206cb8:	e0fffd03 	ldbu	r3,-12(fp)
80206cbc:	180d883a 	mov	r6,r3
80206cc0:	100b883a 	mov	r5,r2
80206cc4:	e13ff917 	ldw	r4,-28(fp)
80206cc8:	02067640 	call	80206764 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>
80206ccc:	10000226 	beq	r2,zero,80206cd8 <alt_msgdma_start_prefetcher_with_std_desc_list+0x64>
    {
        return -EINVAL;
80206cd0:	00bffa84 	movi	r2,-22
80206cd4:	00000b06 	br	80206d04 <alt_msgdma_start_prefetcher_with_std_desc_list+0x90>
    }

    return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list,
80206cd8:	e0bff917 	ldw	r2,-28(fp)
80206cdc:	1021883a 	mov	r16,r2
80206ce0:	0023883a 	mov	r17,zero
80206ce4:	e0fffa03 	ldbu	r3,-24(fp)
80206ce8:	e0bffb03 	ldbu	r2,-20(fp)
80206cec:	d8800015 	stw	r2,0(sp)
80206cf0:	180f883a 	mov	r7,r3
80206cf4:	800b883a 	mov	r5,r16
80206cf8:	880d883a 	mov	r6,r17
80206cfc:	e13ff817 	ldw	r4,-32(fp)
80206d00:	02069b40 	call	802069b4 <alt_msgdma_start_prefetcher_with_list_addr>
            park_mode_en, poll_en);
}
80206d04:	e6fffe04 	addi	sp,fp,-8
80206d08:	dfc00317 	ldw	ra,12(sp)
80206d0c:	df000217 	ldw	fp,8(sp)
80206d10:	dc400117 	ldw	r17,4(sp)
80206d14:	dc000017 	ldw	r16,0(sp)
80206d18:	dec00404 	addi	sp,sp,16
80206d1c:	f800283a 	ret

80206d20 <alt_msgdma_start_prefetcher_with_extd_desc_list>:
    alt_msgdma_prefetcher_extended_descriptor *list,
    alt_u8 park_mode_en,
    alt_u8 poll_en,
    alt_u8 last_desc_owned_by_sw,
    alt_u8 dcache_flush_desc_list)
{
80206d20:	defff504 	addi	sp,sp,-44
80206d24:	dfc00a15 	stw	ra,40(sp)
80206d28:	df000915 	stw	fp,36(sp)
80206d2c:	dc400815 	stw	r17,32(sp)
80206d30:	dc000715 	stw	r16,28(sp)
80206d34:	df000904 	addi	fp,sp,36
80206d38:	e13ff815 	stw	r4,-32(fp)
80206d3c:	e17ff915 	stw	r5,-28(fp)
80206d40:	300b883a 	mov	r5,r6
80206d44:	3809883a 	mov	r4,r7
80206d48:	e0c00217 	ldw	r3,8(fp)
80206d4c:	e0800317 	ldw	r2,12(fp)
80206d50:	e17ffa05 	stb	r5,-24(fp)
80206d54:	e13ffb05 	stb	r4,-20(fp)
80206d58:	e0fffc05 	stb	r3,-16(fp)
80206d5c:	e0bffd05 	stb	r2,-12(fp)
    
     if (alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits(list,last_desc_owned_by_sw,dcache_flush_desc_list) != 0)
80206d60:	e0bffc03 	ldbu	r2,-16(fp)
80206d64:	e0fffd03 	ldbu	r3,-12(fp)
80206d68:	180d883a 	mov	r6,r3
80206d6c:	100b883a 	mov	r5,r2
80206d70:	e13ff917 	ldw	r4,-28(fp)
80206d74:	02068700 	call	80206870 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>
80206d78:	10000226 	beq	r2,zero,80206d84 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x64>
    {
        return -EINVAL;
80206d7c:	00bffa84 	movi	r2,-22
80206d80:	00000b06 	br	80206db0 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x90>
    }
        
    return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list, 
80206d84:	e0bff917 	ldw	r2,-28(fp)
80206d88:	1021883a 	mov	r16,r2
80206d8c:	0023883a 	mov	r17,zero
80206d90:	e0fffa03 	ldbu	r3,-24(fp)
80206d94:	e0bffb03 	ldbu	r2,-20(fp)
80206d98:	d8800015 	stw	r2,0(sp)
80206d9c:	180f883a 	mov	r7,r3
80206da0:	800b883a 	mov	r5,r16
80206da4:	880d883a 	mov	r6,r17
80206da8:	e13ff817 	ldw	r4,-32(fp)
80206dac:	02069b40 	call	802069b4 <alt_msgdma_start_prefetcher_with_list_addr>
            park_mode_en, poll_en);
}
80206db0:	e6fffe04 	addi	sp,fp,-8
80206db4:	dfc00317 	ldw	ra,12(sp)
80206db8:	df000217 	ldw	fp,8(sp)
80206dbc:	dc400117 	ldw	r17,4(sp)
80206dc0:	dc000017 	ldw	r16,0(sp)
80206dc4:	dec00404 	addi	sp,sp,16
80206dc8:	f800283a 	ret

80206dcc <alt_msgdma_open>:
 * Returns:
 * - Pointer to msgdma device instance structure, or null if the device
 *   could not be opened.
 */
alt_msgdma_dev* alt_msgdma_open (const char* name)
{
80206dcc:	defffc04 	addi	sp,sp,-16
80206dd0:	dfc00315 	stw	ra,12(sp)
80206dd4:	df000215 	stw	fp,8(sp)
80206dd8:	df000204 	addi	fp,sp,8
80206ddc:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev* dev = NULL;
80206de0:	e03ffe15 	stw	zero,-8(fp)

    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);
80206de4:	d1600b04 	addi	r5,gp,-32724
80206de8:	e13fff17 	ldw	r4,-4(fp)
80206dec:	02074f00 	call	802074f0 <alt_find_dev>
80206df0:	e0bffe15 	stw	r2,-8(fp)

    if (NULL == dev)
80206df4:	e0bffe17 	ldw	r2,-8(fp)
80206df8:	1000041e 	bne	r2,zero,80206e0c <alt_msgdma_open+0x40>
    {
        ALT_ERRNO = ENODEV;
80206dfc:	02051340 	call	80205134 <alt_get_errno>
80206e00:	1007883a 	mov	r3,r2
80206e04:	008004c4 	movi	r2,19
80206e08:	18800015 	stw	r2,0(r3)
    }

    return dev;
80206e0c:	e0bffe17 	ldw	r2,-8(fp)
}
80206e10:	e037883a 	mov	sp,fp
80206e14:	dfc00117 	ldw	ra,4(sp)
80206e18:	df000017 	ldw	fp,0(sp)
80206e1c:	dec00204 	addi	sp,sp,8
80206e20:	f800283a 	ret

80206e24 <alt_msgdma_init>:
 * This routine disables interrupts, descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_msgdma_init (alt_msgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
80206e24:	defff804 	addi	sp,sp,-32
80206e28:	dfc00715 	stw	ra,28(sp)
80206e2c:	df000615 	stw	fp,24(sp)
80206e30:	df000604 	addi	fp,sp,24
80206e34:	e13ffd15 	stw	r4,-12(fp)
80206e38:	e17ffe15 	stw	r5,-8(fp)
80206e3c:	e1bfff15 	stw	r6,-4(fp)
    extern alt_llist alt_msgdma_list;
    alt_u32 temporary_control;
    int error;

    if (dev->prefetcher_enable)
80206e40:	e0bffd17 	ldw	r2,-12(fp)
80206e44:	10801783 	ldbu	r2,94(r2)
80206e48:	10803fcc 	andi	r2,r2,255
80206e4c:	10000b26 	beq	r2,zero,80206e7c <alt_msgdma_init+0x58>
    {
        /* start prefetcher reset sequence */
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, 
80206e50:	e0bffd17 	ldw	r2,-12(fp)
80206e54:	10800617 	ldw	r2,24(r2)
80206e58:	00c00104 	movi	r3,4
80206e5c:	10c00035 	stwio	r3,0(r2)
                ALT_MSGDMA_PREFETCHER_CTRL_RESET_SET_MASK);
        /* wait until hw clears the bit */
        while(ALT_MSGDMA_PREFETCHER_CTRL_RESET_GET(
80206e60:	0001883a 	nop
80206e64:	e0bffd17 	ldw	r2,-12(fp)
80206e68:	10800617 	ldw	r2,24(r2)
80206e6c:	10800037 	ldwio	r2,0(r2)
80206e70:	1080010c 	andi	r2,r2,4
80206e74:	1005d0ba 	srai	r2,r2,2
80206e78:	103ffa1e 	bne	r2,zero,80206e64 <__reset+0xfa1e6e64>
    }    
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
80206e7c:	e0bffd17 	ldw	r2,-12(fp)
80206e80:	10800317 	ldw	r2,12(r2)
80206e84:	10800104 	addi	r2,r2,4
80206e88:	00c00084 	movi	r3,2
80206e8c:	10c00035 	stwio	r3,0(r2)
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
80206e90:	0001883a 	nop
80206e94:	e0bffd17 	ldw	r2,-12(fp)
80206e98:	10800317 	ldw	r2,12(r2)
80206e9c:	10800037 	ldwio	r2,0(r2)
            & ALTERA_MSGDMA_CSR_RESET_STATE_MASK));
80206ea0:	1080100c 	andi	r2,r2,64
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
80206ea4:	103ffb1e 	bne	r2,zero,80206e94 <__reset+0xfa1e6e94>
    * Disable interrupts, halt descriptor processing,
    * and clear status register content
    */

    /* disable global interrupt */
    temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
80206ea8:	e0bffd17 	ldw	r2,-12(fp)
80206eac:	10800317 	ldw	r2,12(r2)
80206eb0:	10800104 	addi	r2,r2,4
80206eb4:	10800037 	ldwio	r2,0(r2)
80206eb8:	1007883a 	mov	r3,r2
80206ebc:	00bffbc4 	movi	r2,-17
80206ec0:	1884703a 	and	r2,r3,r2
80206ec4:	e0bffb15 	stw	r2,-20(fp)
            & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    /* stopping descriptor */
    temporary_control |= ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
80206ec8:	e0bffb17 	ldw	r2,-20(fp)
80206ecc:	10800814 	ori	r2,r2,32
80206ed0:	e0bffb15 	stw	r2,-20(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
80206ed4:	e0bffd17 	ldw	r2,-12(fp)
80206ed8:	10800317 	ldw	r2,12(r2)
80206edc:	10800104 	addi	r2,r2,4
80206ee0:	e0fffb17 	ldw	r3,-20(fp)
80206ee4:	10c00035 	stwio	r3,0(r2)

    /* clear the CSR status register */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base, 
80206ee8:	e0bffd17 	ldw	r2,-12(fp)
80206eec:	10800317 	ldw	r2,12(r2)
80206ef0:	e0fffd17 	ldw	r3,-12(fp)
80206ef4:	18c00317 	ldw	r3,12(r3)
80206ef8:	18c00037 	ldwio	r3,0(r3)
80206efc:	10c00035 	stwio	r3,0(r2)
            IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    
    if (dev->prefetcher_enable)
80206f00:	e0bffd17 	ldw	r2,-12(fp)
80206f04:	10801783 	ldbu	r2,94(r2)
80206f08:	10803fcc 	andi	r2,r2,255
80206f0c:	10000826 	beq	r2,zero,80206f30 <alt_msgdma_init+0x10c>
    {
        /* clear all status bits that are set, since theyre W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base, 
80206f10:	e0bffd17 	ldw	r2,-12(fp)
80206f14:	10800617 	ldw	r2,24(r2)
80206f18:	10800404 	addi	r2,r2,16
80206f1c:	e0fffd17 	ldw	r3,-12(fp)
80206f20:	18c00617 	ldw	r3,24(r3)
80206f24:	18c00404 	addi	r3,r3,16
80206f28:	18c00037 	ldwio	r3,0(r3)
80206f2c:	10c00035 	stwio	r3,0(r2)
                IORD_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base));
    }

    /* Register this instance of the msgdma controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_msgdma_list);
80206f30:	d1600b04 	addi	r5,gp,-32724
80206f34:	e13ffd17 	ldw	r4,-12(fp)
80206f38:	020738c0 	call	8020738c <alt_dev_llist_insert>
80206f3c:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
80206f40:	e0bffc15 	stw	r2,-16(fp)
            
    if (!error)
80206f44:	e0bffc17 	ldw	r2,-16(fp)
80206f48:	1000081e 	bne	r2,zero,80206f6c <alt_msgdma_init+0x148>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
80206f4c:	d8000015 	stw	zero,0(sp)
80206f50:	e1fffd17 	ldw	r7,-12(fp)
80206f54:	01a00834 	movhi	r6,32800
80206f58:	3194cc04 	addi	r6,r6,21296
80206f5c:	e17fff17 	ldw	r5,-4(fp)
80206f60:	e13ffe17 	ldw	r4,-8(fp)
80206f64:	02075800 	call	80207580 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }
    
    return;
80206f68:	00000406 	br	80206f7c <alt_msgdma_init+0x158>
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
80206f6c:	01200874 	movhi	r4,32801
80206f70:	2122c904 	addi	r4,r4,-29916
80206f74:	0207bb40 	call	80207bb4 <alt_printf>
    }
    
    return;
80206f78:	0001883a 	nop

}
80206f7c:	e037883a 	mov	sp,fp
80206f80:	dfc00117 	ldw	ra,4(sp)
80206f84:	df000017 	ldw	fp,0(sp)
80206f88:	dec00204 	addi	sp,sp,8
80206f8c:	f800283a 	ret

80206f90 <alt_msgdma_register_callback>:
void alt_msgdma_register_callback(
    alt_msgdma_dev *dev,
    alt_msgdma_callback callback,
    alt_u32 control,
    void *context)
{
80206f90:	defffb04 	addi	sp,sp,-20
80206f94:	df000415 	stw	fp,16(sp)
80206f98:	df000404 	addi	fp,sp,16
80206f9c:	e13ffc15 	stw	r4,-16(fp)
80206fa0:	e17ffd15 	stw	r5,-12(fp)
80206fa4:	e1bffe15 	stw	r6,-8(fp)
80206fa8:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
80206fac:	e0bffc17 	ldw	r2,-16(fp)
80206fb0:	e0fffd17 	ldw	r3,-12(fp)
80206fb4:	10c00b15 	stw	r3,44(r2)
    dev->callback_context = context;
80206fb8:	e0bffc17 	ldw	r2,-16(fp)
80206fbc:	e0ffff17 	ldw	r3,-4(fp)
80206fc0:	10c00c15 	stw	r3,48(r2)
    dev->control          = control;
80206fc4:	e0bffc17 	ldw	r2,-16(fp)
80206fc8:	e0fffe17 	ldw	r3,-8(fp)
80206fcc:	10c00d15 	stw	r3,52(r2)

    return ;
80206fd0:	0001883a 	nop
}
80206fd4:	e037883a 	mov	sp,fp
80206fd8:	df000017 	ldw	fp,0(sp)
80206fdc:	dec00104 	addi	sp,sp,4
80206fe0:	f800283a 	ret

80206fe4 <alt_msgdma_standard_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_standard_descriptor_async_transfer(
    alt_msgdma_dev *dev,
    alt_msgdma_standard_descriptor *desc)
{
80206fe4:	defffc04 	addi	sp,sp,-16
80206fe8:	dfc00315 	stw	ra,12(sp)
80206fec:	df000215 	stw	fp,8(sp)
80206ff0:	df000204 	addi	fp,sp,8
80206ff4:	e13ffe15 	stw	r4,-8(fp)
80206ff8:	e17fff15 	stw	r5,-4(fp)
   /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
    return alt_msgdma_descriptor_async_transfer(dev, desc, NULL);
80206ffc:	000d883a 	mov	r6,zero
80207000:	e17fff17 	ldw	r5,-4(fp)
80207004:	e13ffe17 	ldw	r4,-8(fp)
80207008:	02056940 	call	80205694 <alt_msgdma_descriptor_async_transfer>

}
8020700c:	e037883a 	mov	sp,fp
80207010:	dfc00117 	ldw	ra,4(sp)
80207014:	df000017 	ldw	fp,0(sp)
80207018:	dec00204 	addi	sp,sp,8
8020701c:	f800283a 	ret

80207020 <alt_msgdma_extended_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_extended_descriptor_async_transfer(
    alt_msgdma_dev *dev,
    alt_msgdma_extended_descriptor *desc)
{
80207020:	defffc04 	addi	sp,sp,-16
80207024:	dfc00315 	stw	ra,12(sp)
80207028:	df000215 	stw	fp,8(sp)
8020702c:	df000204 	addi	fp,sp,8
80207030:	e13ffe15 	stw	r4,-8(fp)
80207034:	e17fff15 	stw	r5,-4(fp)
    /*
    * Error detection/handling should be performed at the application
    * or callback level as appropriate.
    */
    return alt_msgdma_descriptor_async_transfer(dev, NULL, desc);
80207038:	e1bfff17 	ldw	r6,-4(fp)
8020703c:	000b883a 	mov	r5,zero
80207040:	e13ffe17 	ldw	r4,-8(fp)
80207044:	02056940 	call	80205694 <alt_msgdma_descriptor_async_transfer>
}
80207048:	e037883a 	mov	sp,fp
8020704c:	dfc00117 	ldw	ra,4(sp)
80207050:	df000017 	ldw	fp,0(sp)
80207054:	dec00204 	addi	sp,sp,8
80207058:	f800283a 	ret

8020705c <alt_msgdma_standard_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_standard_descriptor_sync_transfer(
    alt_msgdma_dev *dev,
    alt_msgdma_standard_descriptor *desc)
{
8020705c:	defffc04 	addi	sp,sp,-16
80207060:	dfc00315 	stw	ra,12(sp)
80207064:	df000215 	stw	fp,8(sp)
80207068:	df000204 	addi	fp,sp,8
8020706c:	e13ffe15 	stw	r4,-8(fp)
80207070:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, desc, NULL);
80207074:	000d883a 	mov	r6,zero
80207078:	e17fff17 	ldw	r5,-4(fp)
8020707c:	e13ffe17 	ldw	r4,-8(fp)
80207080:	02059640 	call	80205964 <alt_msgdma_descriptor_sync_transfer>
}
80207084:	e037883a 	mov	sp,fp
80207088:	dfc00117 	ldw	ra,4(sp)
8020708c:	df000017 	ldw	fp,0(sp)
80207090:	dec00204 	addi	sp,sp,8
80207094:	f800283a 	ret

80207098 <alt_msgdma_extended_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_extended_descriptor_sync_transfer(
    alt_msgdma_dev *dev,
    alt_msgdma_extended_descriptor *desc)
{
80207098:	defffc04 	addi	sp,sp,-16
8020709c:	dfc00315 	stw	ra,12(sp)
802070a0:	df000215 	stw	fp,8(sp)
802070a4:	df000204 	addi	fp,sp,8
802070a8:	e13ffe15 	stw	r4,-8(fp)
802070ac:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, NULL, desc);
802070b0:	e1bfff17 	ldw	r6,-4(fp)
802070b4:	000b883a 	mov	r5,zero
802070b8:	e13ffe17 	ldw	r4,-8(fp)
802070bc:	02059640 	call	80205964 <alt_msgdma_descriptor_sync_transfer>
}
802070c0:	e037883a 	mov	sp,fp
802070c4:	dfc00117 	ldw	ra,4(sp)
802070c8:	df000017 	ldw	fp,0(sp)
802070cc:	dec00204 	addi	sp,sp,8
802070d0:	f800283a 	ret

802070d4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
802070d4:	defff504 	addi	sp,sp,-44
802070d8:	df000a15 	stw	fp,40(sp)
802070dc:	df000a04 	addi	fp,sp,40
802070e0:	e13ffc15 	stw	r4,-16(fp)
802070e4:	e17ffd15 	stw	r5,-12(fp)
802070e8:	e1bffe15 	stw	r6,-8(fp)
802070ec:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
802070f0:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
802070f4:	d0a01817 	ldw	r2,-32672(gp)
  
  if (alt_ticks_per_second ())
802070f8:	10003c26 	beq	r2,zero,802071ec <alt_alarm_start+0x118>
  {
    if (alarm)
802070fc:	e0bffc17 	ldw	r2,-16(fp)
80207100:	10003826 	beq	r2,zero,802071e4 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
80207104:	e0bffc17 	ldw	r2,-16(fp)
80207108:	e0fffe17 	ldw	r3,-8(fp)
8020710c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
80207110:	e0bffc17 	ldw	r2,-16(fp)
80207114:	e0ffff17 	ldw	r3,-4(fp)
80207118:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8020711c:	0005303a 	rdctl	r2,status
80207120:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80207124:	e0fff917 	ldw	r3,-28(fp)
80207128:	00bfff84 	movi	r2,-2
8020712c:	1884703a 	and	r2,r3,r2
80207130:	1001703a 	wrctl	status,r2
  
  return context;
80207134:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
80207138:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
8020713c:	d0a01917 	ldw	r2,-32668(gp)
      
      current_nticks = alt_nticks();
80207140:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
80207144:	e0fffd17 	ldw	r3,-12(fp)
80207148:	e0bff617 	ldw	r2,-40(fp)
8020714c:	1885883a 	add	r2,r3,r2
80207150:	10c00044 	addi	r3,r2,1
80207154:	e0bffc17 	ldw	r2,-16(fp)
80207158:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
8020715c:	e0bffc17 	ldw	r2,-16(fp)
80207160:	10c00217 	ldw	r3,8(r2)
80207164:	e0bff617 	ldw	r2,-40(fp)
80207168:	1880042e 	bgeu	r3,r2,8020717c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
8020716c:	e0bffc17 	ldw	r2,-16(fp)
80207170:	00c00044 	movi	r3,1
80207174:	10c00405 	stb	r3,16(r2)
80207178:	00000206 	br	80207184 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
8020717c:	e0bffc17 	ldw	r2,-16(fp)
80207180:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
80207184:	e0bffc17 	ldw	r2,-16(fp)
80207188:	d0e00e04 	addi	r3,gp,-32712
8020718c:	e0fffa15 	stw	r3,-24(fp)
80207190:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
80207194:	e0bffb17 	ldw	r2,-20(fp)
80207198:	e0fffa17 	ldw	r3,-24(fp)
8020719c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
802071a0:	e0bffa17 	ldw	r2,-24(fp)
802071a4:	10c00017 	ldw	r3,0(r2)
802071a8:	e0bffb17 	ldw	r2,-20(fp)
802071ac:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
802071b0:	e0bffa17 	ldw	r2,-24(fp)
802071b4:	10800017 	ldw	r2,0(r2)
802071b8:	e0fffb17 	ldw	r3,-20(fp)
802071bc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
802071c0:	e0bffa17 	ldw	r2,-24(fp)
802071c4:	e0fffb17 	ldw	r3,-20(fp)
802071c8:	10c00015 	stw	r3,0(r2)
802071cc:	e0bff817 	ldw	r2,-32(fp)
802071d0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
802071d4:	e0bff717 	ldw	r2,-36(fp)
802071d8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
802071dc:	0005883a 	mov	r2,zero
802071e0:	00000306 	br	802071f0 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
802071e4:	00bffa84 	movi	r2,-22
802071e8:	00000106 	br	802071f0 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
802071ec:	00bfde84 	movi	r2,-134
  }
}
802071f0:	e037883a 	mov	sp,fp
802071f4:	df000017 	ldw	fp,0(sp)
802071f8:	dec00104 	addi	sp,sp,4
802071fc:	f800283a 	ret

80207200 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
80207200:	defffb04 	addi	sp,sp,-20
80207204:	df000415 	stw	fp,16(sp)
80207208:	df000404 	addi	fp,sp,16
8020720c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
80207210:	008000c4 	movi	r2,3
80207214:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
80207218:	e0fffd17 	ldw	r3,-12(fp)
8020721c:	008003f4 	movhi	r2,15
80207220:	10909004 	addi	r2,r2,16960
80207224:	1887383a 	mul	r3,r3,r2
80207228:	00817db4 	movhi	r2,1526
8020722c:	10b84004 	addi	r2,r2,-7936
80207230:	10c7203a 	divu	r3,r2,r3
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
80207234:	00a00034 	movhi	r2,32768
80207238:	10bfffc4 	addi	r2,r2,-1
8020723c:	10c5203a 	divu	r2,r2,r3
80207240:	e0ffff17 	ldw	r3,-4(fp)
80207244:	1885203a 	divu	r2,r3,r2
80207248:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
8020724c:	e0bffe17 	ldw	r2,-8(fp)
80207250:	10002526 	beq	r2,zero,802072e8 <alt_busy_sleep+0xe8>
  {
    for(i=0;i<big_loops;i++)
80207254:	e03ffc15 	stw	zero,-16(fp)
80207258:	00001406 	br	802072ac <alt_busy_sleep+0xac>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
8020725c:	00a00034 	movhi	r2,32768
80207260:	10bfffc4 	addi	r2,r2,-1
80207264:	10bfffc4 	addi	r2,r2,-1
80207268:	103ffe1e 	bne	r2,zero,80207264 <__reset+0xfa1e7264>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
8020726c:	e0fffd17 	ldw	r3,-12(fp)
80207270:	008003f4 	movhi	r2,15
80207274:	10909004 	addi	r2,r2,16960
80207278:	1887383a 	mul	r3,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
8020727c:	00817db4 	movhi	r2,1526
80207280:	10b84004 	addi	r2,r2,-7936
80207284:	10c7203a 	divu	r3,r2,r3
80207288:	00a00034 	movhi	r2,32768
8020728c:	10bfffc4 	addi	r2,r2,-1
80207290:	10c5203a 	divu	r2,r2,r3
80207294:	e0ffff17 	ldw	r3,-4(fp)
80207298:	1885c83a 	sub	r2,r3,r2
8020729c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
802072a0:	e0bffc17 	ldw	r2,-16(fp)
802072a4:	10800044 	addi	r2,r2,1
802072a8:	e0bffc15 	stw	r2,-16(fp)
802072ac:	e0fffc17 	ldw	r3,-16(fp)
802072b0:	e0bffe17 	ldw	r2,-8(fp)
802072b4:	18bfe916 	blt	r3,r2,8020725c <__reset+0xfa1e725c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
802072b8:	e0fffd17 	ldw	r3,-12(fp)
802072bc:	008003f4 	movhi	r2,15
802072c0:	10909004 	addi	r2,r2,16960
802072c4:	1887383a 	mul	r3,r3,r2
802072c8:	00817db4 	movhi	r2,1526
802072cc:	10b84004 	addi	r2,r2,-7936
802072d0:	10c7203a 	divu	r3,r2,r3
802072d4:	e0bfff17 	ldw	r2,-4(fp)
802072d8:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
802072dc:	10bfffc4 	addi	r2,r2,-1
802072e0:	103ffe1e 	bne	r2,zero,802072dc <__reset+0xfa1e72dc>
802072e4:	00000b06 	br	80207314 <alt_busy_sleep+0x114>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
802072e8:	e0fffd17 	ldw	r3,-12(fp)
802072ec:	008003f4 	movhi	r2,15
802072f0:	10909004 	addi	r2,r2,16960
802072f4:	1887383a 	mul	r3,r3,r2
802072f8:	00817db4 	movhi	r2,1526
802072fc:	10b84004 	addi	r2,r2,-7936
80207300:	10c7203a 	divu	r3,r2,r3
80207304:	e0bfff17 	ldw	r2,-4(fp)
80207308:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
8020730c:	10bfffc4 	addi	r2,r2,-1
80207310:	00bffe16 	blt	zero,r2,8020730c <__reset+0xfa1e730c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
80207314:	0005883a 	mov	r2,zero
}
80207318:	e037883a 	mov	sp,fp
8020731c:	df000017 	ldw	fp,0(sp)
80207320:	dec00104 	addi	sp,sp,4
80207324:	f800283a 	ret

80207328 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
80207328:	defffd04 	addi	sp,sp,-12
8020732c:	df000215 	stw	fp,8(sp)
80207330:	df000204 	addi	fp,sp,8
80207334:	e13ffe15 	stw	r4,-8(fp)
80207338:	e17fff15 	stw	r5,-4(fp)
  {
    ALT_FLUSH_DATA(i);
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
8020733c:	0001883a 	nop
80207340:	e037883a 	mov	sp,fp
80207344:	df000017 	ldw	fp,0(sp)
80207348:	dec00104 	addi	sp,sp,4
8020734c:	f800283a 	ret

80207350 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80207350:	defffe04 	addi	sp,sp,-8
80207354:	dfc00115 	stw	ra,4(sp)
80207358:	df000015 	stw	fp,0(sp)
8020735c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80207360:	d0a00917 	ldw	r2,-32732(gp)
80207364:	10000326 	beq	r2,zero,80207374 <alt_get_errno+0x24>
80207368:	d0a00917 	ldw	r2,-32732(gp)
8020736c:	103ee83a 	callr	r2
80207370:	00000106 	br	80207378 <alt_get_errno+0x28>
80207374:	d0a01304 	addi	r2,gp,-32692
}
80207378:	e037883a 	mov	sp,fp
8020737c:	dfc00117 	ldw	ra,4(sp)
80207380:	df000017 	ldw	fp,0(sp)
80207384:	dec00204 	addi	sp,sp,8
80207388:	f800283a 	ret

8020738c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
8020738c:	defffa04 	addi	sp,sp,-24
80207390:	dfc00515 	stw	ra,20(sp)
80207394:	df000415 	stw	fp,16(sp)
80207398:	df000404 	addi	fp,sp,16
8020739c:	e13ffe15 	stw	r4,-8(fp)
802073a0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
802073a4:	e0bffe17 	ldw	r2,-8(fp)
802073a8:	10000326 	beq	r2,zero,802073b8 <alt_dev_llist_insert+0x2c>
802073ac:	e0bffe17 	ldw	r2,-8(fp)
802073b0:	10800217 	ldw	r2,8(r2)
802073b4:	1000061e 	bne	r2,zero,802073d0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
802073b8:	02073500 	call	80207350 <alt_get_errno>
802073bc:	1007883a 	mov	r3,r2
802073c0:	00800584 	movi	r2,22
802073c4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
802073c8:	00bffa84 	movi	r2,-22
802073cc:	00001306 	br	8020741c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
802073d0:	e0bffe17 	ldw	r2,-8(fp)
802073d4:	e0ffff17 	ldw	r3,-4(fp)
802073d8:	e0fffc15 	stw	r3,-16(fp)
802073dc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
802073e0:	e0bffd17 	ldw	r2,-12(fp)
802073e4:	e0fffc17 	ldw	r3,-16(fp)
802073e8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
802073ec:	e0bffc17 	ldw	r2,-16(fp)
802073f0:	10c00017 	ldw	r3,0(r2)
802073f4:	e0bffd17 	ldw	r2,-12(fp)
802073f8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
802073fc:	e0bffc17 	ldw	r2,-16(fp)
80207400:	10800017 	ldw	r2,0(r2)
80207404:	e0fffd17 	ldw	r3,-12(fp)
80207408:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
8020740c:	e0bffc17 	ldw	r2,-16(fp)
80207410:	e0fffd17 	ldw	r3,-12(fp)
80207414:	10c00015 	stw	r3,0(r2)

  return 0;  
80207418:	0005883a 	mov	r2,zero
}
8020741c:	e037883a 	mov	sp,fp
80207420:	dfc00117 	ldw	ra,4(sp)
80207424:	df000017 	ldw	fp,0(sp)
80207428:	dec00204 	addi	sp,sp,8
8020742c:	f800283a 	ret

80207430 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
80207430:	defffd04 	addi	sp,sp,-12
80207434:	dfc00215 	stw	ra,8(sp)
80207438:	df000115 	stw	fp,4(sp)
8020743c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
80207440:	00a00874 	movhi	r2,32801
80207444:	10a21f04 	addi	r2,r2,-30596
80207448:	e0bfff15 	stw	r2,-4(fp)
8020744c:	00000606 	br	80207468 <_do_ctors+0x38>
        (*ctor) (); 
80207450:	e0bfff17 	ldw	r2,-4(fp)
80207454:	10800017 	ldw	r2,0(r2)
80207458:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
8020745c:	e0bfff17 	ldw	r2,-4(fp)
80207460:	10bfff04 	addi	r2,r2,-4
80207464:	e0bfff15 	stw	r2,-4(fp)
80207468:	e0ffff17 	ldw	r3,-4(fp)
8020746c:	00a00874 	movhi	r2,32801
80207470:	10a22004 	addi	r2,r2,-30592
80207474:	18bff62e 	bgeu	r3,r2,80207450 <__reset+0xfa1e7450>
        (*ctor) (); 
}
80207478:	0001883a 	nop
8020747c:	e037883a 	mov	sp,fp
80207480:	dfc00117 	ldw	ra,4(sp)
80207484:	df000017 	ldw	fp,0(sp)
80207488:	dec00204 	addi	sp,sp,8
8020748c:	f800283a 	ret

80207490 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
80207490:	defffd04 	addi	sp,sp,-12
80207494:	dfc00215 	stw	ra,8(sp)
80207498:	df000115 	stw	fp,4(sp)
8020749c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
802074a0:	00a00874 	movhi	r2,32801
802074a4:	10a21f04 	addi	r2,r2,-30596
802074a8:	e0bfff15 	stw	r2,-4(fp)
802074ac:	00000606 	br	802074c8 <_do_dtors+0x38>
        (*dtor) (); 
802074b0:	e0bfff17 	ldw	r2,-4(fp)
802074b4:	10800017 	ldw	r2,0(r2)
802074b8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
802074bc:	e0bfff17 	ldw	r2,-4(fp)
802074c0:	10bfff04 	addi	r2,r2,-4
802074c4:	e0bfff15 	stw	r2,-4(fp)
802074c8:	e0ffff17 	ldw	r3,-4(fp)
802074cc:	00a00874 	movhi	r2,32801
802074d0:	10a22004 	addi	r2,r2,-30592
802074d4:	18bff62e 	bgeu	r3,r2,802074b0 <__reset+0xfa1e74b0>
        (*dtor) (); 
}
802074d8:	0001883a 	nop
802074dc:	e037883a 	mov	sp,fp
802074e0:	dfc00117 	ldw	ra,4(sp)
802074e4:	df000017 	ldw	fp,0(sp)
802074e8:	dec00204 	addi	sp,sp,8
802074ec:	f800283a 	ret

802074f0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
802074f0:	defffa04 	addi	sp,sp,-24
802074f4:	dfc00515 	stw	ra,20(sp)
802074f8:	df000415 	stw	fp,16(sp)
802074fc:	df000404 	addi	fp,sp,16
80207500:	e13ffe15 	stw	r4,-8(fp)
80207504:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
80207508:	e0bfff17 	ldw	r2,-4(fp)
8020750c:	10800017 	ldw	r2,0(r2)
80207510:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
80207514:	e13ffe17 	ldw	r4,-8(fp)
80207518:	02006300 	call	80200630 <strlen>
8020751c:	10800044 	addi	r2,r2,1
80207520:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
80207524:	00000d06 	br	8020755c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
80207528:	e0bffc17 	ldw	r2,-16(fp)
8020752c:	10800217 	ldw	r2,8(r2)
80207530:	e0fffd17 	ldw	r3,-12(fp)
80207534:	180d883a 	mov	r6,r3
80207538:	e17ffe17 	ldw	r5,-8(fp)
8020753c:	1009883a 	mov	r4,r2
80207540:	02082780 	call	80208278 <memcmp>
80207544:	1000021e 	bne	r2,zero,80207550 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
80207548:	e0bffc17 	ldw	r2,-16(fp)
8020754c:	00000706 	br	8020756c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
80207550:	e0bffc17 	ldw	r2,-16(fp)
80207554:	10800017 	ldw	r2,0(r2)
80207558:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
8020755c:	e0fffc17 	ldw	r3,-16(fp)
80207560:	e0bfff17 	ldw	r2,-4(fp)
80207564:	18bff01e 	bne	r3,r2,80207528 <__reset+0xfa1e7528>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
80207568:	0005883a 	mov	r2,zero
}
8020756c:	e037883a 	mov	sp,fp
80207570:	dfc00117 	ldw	ra,4(sp)
80207574:	df000017 	ldw	fp,0(sp)
80207578:	dec00204 	addi	sp,sp,8
8020757c:	f800283a 	ret

80207580 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
80207580:	defff904 	addi	sp,sp,-28
80207584:	dfc00615 	stw	ra,24(sp)
80207588:	df000515 	stw	fp,20(sp)
8020758c:	df000504 	addi	fp,sp,20
80207590:	e13ffc15 	stw	r4,-16(fp)
80207594:	e17ffd15 	stw	r5,-12(fp)
80207598:	e1bffe15 	stw	r6,-8(fp)
8020759c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
802075a0:	e0800217 	ldw	r2,8(fp)
802075a4:	d8800015 	stw	r2,0(sp)
802075a8:	e1ffff17 	ldw	r7,-4(fp)
802075ac:	e1bffe17 	ldw	r6,-8(fp)
802075b0:	e17ffd17 	ldw	r5,-12(fp)
802075b4:	e13ffc17 	ldw	r4,-16(fp)
802075b8:	02077300 	call	80207730 <alt_iic_isr_register>
}  
802075bc:	e037883a 	mov	sp,fp
802075c0:	dfc00117 	ldw	ra,4(sp)
802075c4:	df000017 	ldw	fp,0(sp)
802075c8:	dec00204 	addi	sp,sp,8
802075cc:	f800283a 	ret

802075d0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
802075d0:	defff904 	addi	sp,sp,-28
802075d4:	df000615 	stw	fp,24(sp)
802075d8:	df000604 	addi	fp,sp,24
802075dc:	e13ffe15 	stw	r4,-8(fp)
802075e0:	e17fff15 	stw	r5,-4(fp)
802075e4:	e0bfff17 	ldw	r2,-4(fp)
802075e8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
802075ec:	0005303a 	rdctl	r2,status
802075f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
802075f4:	e0fffb17 	ldw	r3,-20(fp)
802075f8:	00bfff84 	movi	r2,-2
802075fc:	1884703a 	and	r2,r3,r2
80207600:	1001703a 	wrctl	status,r2
  
  return context;
80207604:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
80207608:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
8020760c:	00c00044 	movi	r3,1
80207610:	e0bffa17 	ldw	r2,-24(fp)
80207614:	1884983a 	sll	r2,r3,r2
80207618:	1007883a 	mov	r3,r2
8020761c:	d0a01717 	ldw	r2,-32676(gp)
80207620:	1884b03a 	or	r2,r3,r2
80207624:	d0a01715 	stw	r2,-32676(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
80207628:	d0a01717 	ldw	r2,-32676(gp)
8020762c:	100170fa 	wrctl	ienable,r2
80207630:	e0bffc17 	ldw	r2,-16(fp)
80207634:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80207638:	e0bffd17 	ldw	r2,-12(fp)
8020763c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
80207640:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
80207644:	0001883a 	nop
}
80207648:	e037883a 	mov	sp,fp
8020764c:	df000017 	ldw	fp,0(sp)
80207650:	dec00104 	addi	sp,sp,4
80207654:	f800283a 	ret

80207658 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
80207658:	defff904 	addi	sp,sp,-28
8020765c:	df000615 	stw	fp,24(sp)
80207660:	df000604 	addi	fp,sp,24
80207664:	e13ffe15 	stw	r4,-8(fp)
80207668:	e17fff15 	stw	r5,-4(fp)
8020766c:	e0bfff17 	ldw	r2,-4(fp)
80207670:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80207674:	0005303a 	rdctl	r2,status
80207678:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8020767c:	e0fffb17 	ldw	r3,-20(fp)
80207680:	00bfff84 	movi	r2,-2
80207684:	1884703a 	and	r2,r3,r2
80207688:	1001703a 	wrctl	status,r2
  
  return context;
8020768c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
80207690:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
80207694:	00c00044 	movi	r3,1
80207698:	e0bffa17 	ldw	r2,-24(fp)
8020769c:	1884983a 	sll	r2,r3,r2
802076a0:	0084303a 	nor	r2,zero,r2
802076a4:	1007883a 	mov	r3,r2
802076a8:	d0a01717 	ldw	r2,-32676(gp)
802076ac:	1884703a 	and	r2,r3,r2
802076b0:	d0a01715 	stw	r2,-32676(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
802076b4:	d0a01717 	ldw	r2,-32676(gp)
802076b8:	100170fa 	wrctl	ienable,r2
802076bc:	e0bffc17 	ldw	r2,-16(fp)
802076c0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
802076c4:	e0bffd17 	ldw	r2,-12(fp)
802076c8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
802076cc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
802076d0:	0001883a 	nop
}
802076d4:	e037883a 	mov	sp,fp
802076d8:	df000017 	ldw	fp,0(sp)
802076dc:	dec00104 	addi	sp,sp,4
802076e0:	f800283a 	ret

802076e4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
802076e4:	defffc04 	addi	sp,sp,-16
802076e8:	df000315 	stw	fp,12(sp)
802076ec:	df000304 	addi	fp,sp,12
802076f0:	e13ffe15 	stw	r4,-8(fp)
802076f4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
802076f8:	000530fa 	rdctl	r2,ienable
802076fc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
80207700:	00c00044 	movi	r3,1
80207704:	e0bfff17 	ldw	r2,-4(fp)
80207708:	1884983a 	sll	r2,r3,r2
8020770c:	1007883a 	mov	r3,r2
80207710:	e0bffd17 	ldw	r2,-12(fp)
80207714:	1884703a 	and	r2,r3,r2
80207718:	1004c03a 	cmpne	r2,r2,zero
8020771c:	10803fcc 	andi	r2,r2,255
}
80207720:	e037883a 	mov	sp,fp
80207724:	df000017 	ldw	fp,0(sp)
80207728:	dec00104 	addi	sp,sp,4
8020772c:	f800283a 	ret

80207730 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
80207730:	defff504 	addi	sp,sp,-44
80207734:	dfc00a15 	stw	ra,40(sp)
80207738:	df000915 	stw	fp,36(sp)
8020773c:	df000904 	addi	fp,sp,36
80207740:	e13ffc15 	stw	r4,-16(fp)
80207744:	e17ffd15 	stw	r5,-12(fp)
80207748:	e1bffe15 	stw	r6,-8(fp)
8020774c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
80207750:	00bffa84 	movi	r2,-22
80207754:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
80207758:	e0bffd17 	ldw	r2,-12(fp)
8020775c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
80207760:	e0bff817 	ldw	r2,-32(fp)
80207764:	10800808 	cmpgei	r2,r2,32
80207768:	1000271e 	bne	r2,zero,80207808 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8020776c:	0005303a 	rdctl	r2,status
80207770:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80207774:	e0fffb17 	ldw	r3,-20(fp)
80207778:	00bfff84 	movi	r2,-2
8020777c:	1884703a 	and	r2,r3,r2
80207780:	1001703a 	wrctl	status,r2
  
  return context;
80207784:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
80207788:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
8020778c:	00a00874 	movhi	r2,32801
80207790:	10a9f804 	addi	r2,r2,-22560
80207794:	e0fff817 	ldw	r3,-32(fp)
80207798:	180690fa 	slli	r3,r3,3
8020779c:	10c5883a 	add	r2,r2,r3
802077a0:	e0fffe17 	ldw	r3,-8(fp)
802077a4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
802077a8:	00a00874 	movhi	r2,32801
802077ac:	10a9f804 	addi	r2,r2,-22560
802077b0:	e0fff817 	ldw	r3,-32(fp)
802077b4:	180690fa 	slli	r3,r3,3
802077b8:	10c5883a 	add	r2,r2,r3
802077bc:	10800104 	addi	r2,r2,4
802077c0:	e0ffff17 	ldw	r3,-4(fp)
802077c4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
802077c8:	e0bffe17 	ldw	r2,-8(fp)
802077cc:	10000526 	beq	r2,zero,802077e4 <alt_iic_isr_register+0xb4>
802077d0:	e0bff817 	ldw	r2,-32(fp)
802077d4:	100b883a 	mov	r5,r2
802077d8:	e13ffc17 	ldw	r4,-16(fp)
802077dc:	02075d00 	call	802075d0 <alt_ic_irq_enable>
802077e0:	00000406 	br	802077f4 <alt_iic_isr_register+0xc4>
802077e4:	e0bff817 	ldw	r2,-32(fp)
802077e8:	100b883a 	mov	r5,r2
802077ec:	e13ffc17 	ldw	r4,-16(fp)
802077f0:	02076580 	call	80207658 <alt_ic_irq_disable>
802077f4:	e0bff715 	stw	r2,-36(fp)
802077f8:	e0bffa17 	ldw	r2,-24(fp)
802077fc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80207800:	e0bff917 	ldw	r2,-28(fp)
80207804:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
80207808:	e0bff717 	ldw	r2,-36(fp)
}
8020780c:	e037883a 	mov	sp,fp
80207810:	dfc00117 	ldw	ra,4(sp)
80207814:	df000017 	ldw	fp,0(sp)
80207818:	dec00204 	addi	sp,sp,8
8020781c:	f800283a 	ret

80207820 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
80207820:	defff904 	addi	sp,sp,-28
80207824:	dfc00615 	stw	ra,24(sp)
80207828:	df000515 	stw	fp,20(sp)
8020782c:	df000504 	addi	fp,sp,20
80207830:	e13ffc15 	stw	r4,-16(fp)
80207834:	e17ffd15 	stw	r5,-12(fp)
80207838:	e1bffe15 	stw	r6,-8(fp)
8020783c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
80207840:	e1bfff17 	ldw	r6,-4(fp)
80207844:	e17ffe17 	ldw	r5,-8(fp)
80207848:	e13ffd17 	ldw	r4,-12(fp)
8020784c:	0207a600 	call	80207a60 <open>
80207850:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
80207854:	e0bffb17 	ldw	r2,-20(fp)
80207858:	10001c16 	blt	r2,zero,802078cc <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
8020785c:	00a00874 	movhi	r2,32801
80207860:	10a4e904 	addi	r2,r2,-27740
80207864:	e0fffb17 	ldw	r3,-20(fp)
80207868:	18c00324 	muli	r3,r3,12
8020786c:	10c5883a 	add	r2,r2,r3
80207870:	10c00017 	ldw	r3,0(r2)
80207874:	e0bffc17 	ldw	r2,-16(fp)
80207878:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
8020787c:	00a00874 	movhi	r2,32801
80207880:	10a4e904 	addi	r2,r2,-27740
80207884:	e0fffb17 	ldw	r3,-20(fp)
80207888:	18c00324 	muli	r3,r3,12
8020788c:	10c5883a 	add	r2,r2,r3
80207890:	10800104 	addi	r2,r2,4
80207894:	10c00017 	ldw	r3,0(r2)
80207898:	e0bffc17 	ldw	r2,-16(fp)
8020789c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
802078a0:	00a00874 	movhi	r2,32801
802078a4:	10a4e904 	addi	r2,r2,-27740
802078a8:	e0fffb17 	ldw	r3,-20(fp)
802078ac:	18c00324 	muli	r3,r3,12
802078b0:	10c5883a 	add	r2,r2,r3
802078b4:	10800204 	addi	r2,r2,8
802078b8:	10c00017 	ldw	r3,0(r2)
802078bc:	e0bffc17 	ldw	r2,-16(fp)
802078c0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
802078c4:	e13ffb17 	ldw	r4,-20(fp)
802078c8:	02039340 	call	80203934 <alt_release_fd>
  }
} 
802078cc:	0001883a 	nop
802078d0:	e037883a 	mov	sp,fp
802078d4:	dfc00117 	ldw	ra,4(sp)
802078d8:	df000017 	ldw	fp,0(sp)
802078dc:	dec00204 	addi	sp,sp,8
802078e0:	f800283a 	ret

802078e4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
802078e4:	defffb04 	addi	sp,sp,-20
802078e8:	dfc00415 	stw	ra,16(sp)
802078ec:	df000315 	stw	fp,12(sp)
802078f0:	df000304 	addi	fp,sp,12
802078f4:	e13ffd15 	stw	r4,-12(fp)
802078f8:	e17ffe15 	stw	r5,-8(fp)
802078fc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
80207900:	01c07fc4 	movi	r7,511
80207904:	01800044 	movi	r6,1
80207908:	e17ffd17 	ldw	r5,-12(fp)
8020790c:	01200874 	movhi	r4,32801
80207910:	2124ec04 	addi	r4,r4,-27728
80207914:	02078200 	call	80207820 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
80207918:	01c07fc4 	movi	r7,511
8020791c:	000d883a 	mov	r6,zero
80207920:	e17ffe17 	ldw	r5,-8(fp)
80207924:	01200874 	movhi	r4,32801
80207928:	2124e904 	addi	r4,r4,-27740
8020792c:	02078200 	call	80207820 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
80207930:	01c07fc4 	movi	r7,511
80207934:	01800044 	movi	r6,1
80207938:	e17fff17 	ldw	r5,-4(fp)
8020793c:	01200874 	movhi	r4,32801
80207940:	2124ef04 	addi	r4,r4,-27716
80207944:	02078200 	call	80207820 <alt_open_fd>
}  
80207948:	0001883a 	nop
8020794c:	e037883a 	mov	sp,fp
80207950:	dfc00117 	ldw	ra,4(sp)
80207954:	df000017 	ldw	fp,0(sp)
80207958:	dec00204 	addi	sp,sp,8
8020795c:	f800283a 	ret

80207960 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
80207960:	defffe04 	addi	sp,sp,-8
80207964:	dfc00115 	stw	ra,4(sp)
80207968:	df000015 	stw	fp,0(sp)
8020796c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
80207970:	d0a00917 	ldw	r2,-32732(gp)
80207974:	10000326 	beq	r2,zero,80207984 <alt_get_errno+0x24>
80207978:	d0a00917 	ldw	r2,-32732(gp)
8020797c:	103ee83a 	callr	r2
80207980:	00000106 	br	80207988 <alt_get_errno+0x28>
80207984:	d0a01304 	addi	r2,gp,-32692
}
80207988:	e037883a 	mov	sp,fp
8020798c:	dfc00117 	ldw	ra,4(sp)
80207990:	df000017 	ldw	fp,0(sp)
80207994:	dec00204 	addi	sp,sp,8
80207998:	f800283a 	ret

8020799c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
8020799c:	defffd04 	addi	sp,sp,-12
802079a0:	df000215 	stw	fp,8(sp)
802079a4:	df000204 	addi	fp,sp,8
802079a8:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
802079ac:	e0bfff17 	ldw	r2,-4(fp)
802079b0:	10800217 	ldw	r2,8(r2)
802079b4:	10d00034 	orhi	r3,r2,16384
802079b8:	e0bfff17 	ldw	r2,-4(fp)
802079bc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
802079c0:	e03ffe15 	stw	zero,-8(fp)
802079c4:	00001d06 	br	80207a3c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
802079c8:	00a00874 	movhi	r2,32801
802079cc:	10a4e904 	addi	r2,r2,-27740
802079d0:	e0fffe17 	ldw	r3,-8(fp)
802079d4:	18c00324 	muli	r3,r3,12
802079d8:	10c5883a 	add	r2,r2,r3
802079dc:	10c00017 	ldw	r3,0(r2)
802079e0:	e0bfff17 	ldw	r2,-4(fp)
802079e4:	10800017 	ldw	r2,0(r2)
802079e8:	1880111e 	bne	r3,r2,80207a30 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
802079ec:	00a00874 	movhi	r2,32801
802079f0:	10a4e904 	addi	r2,r2,-27740
802079f4:	e0fffe17 	ldw	r3,-8(fp)
802079f8:	18c00324 	muli	r3,r3,12
802079fc:	10c5883a 	add	r2,r2,r3
80207a00:	10800204 	addi	r2,r2,8
80207a04:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
80207a08:	1000090e 	bge	r2,zero,80207a30 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
80207a0c:	e0bffe17 	ldw	r2,-8(fp)
80207a10:	10c00324 	muli	r3,r2,12
80207a14:	00a00874 	movhi	r2,32801
80207a18:	10a4e904 	addi	r2,r2,-27740
80207a1c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
80207a20:	e0bfff17 	ldw	r2,-4(fp)
80207a24:	18800226 	beq	r3,r2,80207a30 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
80207a28:	00bffcc4 	movi	r2,-13
80207a2c:	00000806 	br	80207a50 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
80207a30:	e0bffe17 	ldw	r2,-8(fp)
80207a34:	10800044 	addi	r2,r2,1
80207a38:	e0bffe15 	stw	r2,-8(fp)
80207a3c:	d0a00817 	ldw	r2,-32736(gp)
80207a40:	1007883a 	mov	r3,r2
80207a44:	e0bffe17 	ldw	r2,-8(fp)
80207a48:	18bfdf2e 	bgeu	r3,r2,802079c8 <__reset+0xfa1e79c8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
80207a4c:	0005883a 	mov	r2,zero
}
80207a50:	e037883a 	mov	sp,fp
80207a54:	df000017 	ldw	fp,0(sp)
80207a58:	dec00104 	addi	sp,sp,4
80207a5c:	f800283a 	ret

80207a60 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
80207a60:	defff604 	addi	sp,sp,-40
80207a64:	dfc00915 	stw	ra,36(sp)
80207a68:	df000815 	stw	fp,32(sp)
80207a6c:	df000804 	addi	fp,sp,32
80207a70:	e13ffd15 	stw	r4,-12(fp)
80207a74:	e17ffe15 	stw	r5,-8(fp)
80207a78:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
80207a7c:	00bfffc4 	movi	r2,-1
80207a80:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
80207a84:	00bffb44 	movi	r2,-19
80207a88:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
80207a8c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
80207a90:	d1600604 	addi	r5,gp,-32744
80207a94:	e13ffd17 	ldw	r4,-12(fp)
80207a98:	02074f00 	call	802074f0 <alt_find_dev>
80207a9c:	e0bff815 	stw	r2,-32(fp)
80207aa0:	e0bff817 	ldw	r2,-32(fp)
80207aa4:	1000051e 	bne	r2,zero,80207abc <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
80207aa8:	e13ffd17 	ldw	r4,-12(fp)
80207aac:	0207fe40 	call	80207fe4 <alt_find_file>
80207ab0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
80207ab4:	00800044 	movi	r2,1
80207ab8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
80207abc:	e0bff817 	ldw	r2,-32(fp)
80207ac0:	10002926 	beq	r2,zero,80207b68 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
80207ac4:	e13ff817 	ldw	r4,-32(fp)
80207ac8:	02080ec0 	call	802080ec <alt_get_fd>
80207acc:	e0bff915 	stw	r2,-28(fp)
80207ad0:	e0bff917 	ldw	r2,-28(fp)
80207ad4:	1000030e 	bge	r2,zero,80207ae4 <open+0x84>
    {
      status = index;
80207ad8:	e0bff917 	ldw	r2,-28(fp)
80207adc:	e0bffa15 	stw	r2,-24(fp)
80207ae0:	00002306 	br	80207b70 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
80207ae4:	e0bff917 	ldw	r2,-28(fp)
80207ae8:	10c00324 	muli	r3,r2,12
80207aec:	00a00874 	movhi	r2,32801
80207af0:	10a4e904 	addi	r2,r2,-27740
80207af4:	1885883a 	add	r2,r3,r2
80207af8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
80207afc:	e0fffe17 	ldw	r3,-8(fp)
80207b00:	00900034 	movhi	r2,16384
80207b04:	10bfffc4 	addi	r2,r2,-1
80207b08:	1886703a 	and	r3,r3,r2
80207b0c:	e0bffc17 	ldw	r2,-16(fp)
80207b10:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
80207b14:	e0bffb17 	ldw	r2,-20(fp)
80207b18:	1000051e 	bne	r2,zero,80207b30 <open+0xd0>
80207b1c:	e13ffc17 	ldw	r4,-16(fp)
80207b20:	020799c0 	call	8020799c <alt_file_locked>
80207b24:	e0bffa15 	stw	r2,-24(fp)
80207b28:	e0bffa17 	ldw	r2,-24(fp)
80207b2c:	10001016 	blt	r2,zero,80207b70 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
80207b30:	e0bff817 	ldw	r2,-32(fp)
80207b34:	10800317 	ldw	r2,12(r2)
80207b38:	10000826 	beq	r2,zero,80207b5c <open+0xfc>
80207b3c:	e0bff817 	ldw	r2,-32(fp)
80207b40:	10800317 	ldw	r2,12(r2)
80207b44:	e1ffff17 	ldw	r7,-4(fp)
80207b48:	e1bffe17 	ldw	r6,-8(fp)
80207b4c:	e17ffd17 	ldw	r5,-12(fp)
80207b50:	e13ffc17 	ldw	r4,-16(fp)
80207b54:	103ee83a 	callr	r2
80207b58:	00000106 	br	80207b60 <open+0x100>
80207b5c:	0005883a 	mov	r2,zero
80207b60:	e0bffa15 	stw	r2,-24(fp)
80207b64:	00000206 	br	80207b70 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
80207b68:	00bffb44 	movi	r2,-19
80207b6c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
80207b70:	e0bffa17 	ldw	r2,-24(fp)
80207b74:	1000090e 	bge	r2,zero,80207b9c <open+0x13c>
  {
    alt_release_fd (index);  
80207b78:	e13ff917 	ldw	r4,-28(fp)
80207b7c:	02039340 	call	80203934 <alt_release_fd>
    ALT_ERRNO = -status;
80207b80:	02079600 	call	80207960 <alt_get_errno>
80207b84:	1007883a 	mov	r3,r2
80207b88:	e0bffa17 	ldw	r2,-24(fp)
80207b8c:	0085c83a 	sub	r2,zero,r2
80207b90:	18800015 	stw	r2,0(r3)
    return -1;
80207b94:	00bfffc4 	movi	r2,-1
80207b98:	00000106 	br	80207ba0 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
80207b9c:	e0bff917 	ldw	r2,-28(fp)
}
80207ba0:	e037883a 	mov	sp,fp
80207ba4:	dfc00117 	ldw	ra,4(sp)
80207ba8:	df000017 	ldw	fp,0(sp)
80207bac:	dec00204 	addi	sp,sp,8
80207bb0:	f800283a 	ret

80207bb4 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
80207bb4:	defff204 	addi	sp,sp,-56
80207bb8:	dfc00a15 	stw	ra,40(sp)
80207bbc:	df000915 	stw	fp,36(sp)
80207bc0:	df000904 	addi	fp,sp,36
80207bc4:	e13fff15 	stw	r4,-4(fp)
80207bc8:	e1400215 	stw	r5,8(fp)
80207bcc:	e1800315 	stw	r6,12(fp)
80207bd0:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
80207bd4:	e0800204 	addi	r2,fp,8
80207bd8:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
80207bdc:	e0bfff17 	ldw	r2,-4(fp)
80207be0:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
80207be4:	00006f06 	br	80207da4 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
80207be8:	e0bff807 	ldb	r2,-32(fp)
80207bec:	10800960 	cmpeqi	r2,r2,37
80207bf0:	1000041e 	bne	r2,zero,80207c04 <alt_printf+0x50>
        {
            alt_putchar(c);
80207bf4:	e0bff807 	ldb	r2,-32(fp)
80207bf8:	1009883a 	mov	r4,r2
80207bfc:	0207de00 	call	80207de0 <alt_putchar>
80207c00:	00006806 	br	80207da4 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
80207c04:	e0bff717 	ldw	r2,-36(fp)
80207c08:	10c00044 	addi	r3,r2,1
80207c0c:	e0fff715 	stw	r3,-36(fp)
80207c10:	10800003 	ldbu	r2,0(r2)
80207c14:	e0bff805 	stb	r2,-32(fp)
80207c18:	e0bff807 	ldb	r2,-32(fp)
80207c1c:	10006926 	beq	r2,zero,80207dc4 <alt_printf+0x210>
            {
                if (c == '%')
80207c20:	e0bff807 	ldb	r2,-32(fp)
80207c24:	10800958 	cmpnei	r2,r2,37
80207c28:	1000041e 	bne	r2,zero,80207c3c <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
80207c2c:	e0bff807 	ldb	r2,-32(fp)
80207c30:	1009883a 	mov	r4,r2
80207c34:	0207de00 	call	80207de0 <alt_putchar>
80207c38:	00005a06 	br	80207da4 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
80207c3c:	e0bff807 	ldb	r2,-32(fp)
80207c40:	108018d8 	cmpnei	r2,r2,99
80207c44:	1000081e 	bne	r2,zero,80207c68 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
80207c48:	e0bffe17 	ldw	r2,-8(fp)
80207c4c:	10c00104 	addi	r3,r2,4
80207c50:	e0fffe15 	stw	r3,-8(fp)
80207c54:	10800017 	ldw	r2,0(r2)
80207c58:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
80207c5c:	e13ffd17 	ldw	r4,-12(fp)
80207c60:	0207de00 	call	80207de0 <alt_putchar>
80207c64:	00004f06 	br	80207da4 <alt_printf+0x1f0>
                }
                else if (c == 'x')
80207c68:	e0bff807 	ldb	r2,-32(fp)
80207c6c:	10801e18 	cmpnei	r2,r2,120
80207c70:	1000341e 	bne	r2,zero,80207d44 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
80207c74:	e0bffe17 	ldw	r2,-8(fp)
80207c78:	10c00104 	addi	r3,r2,4
80207c7c:	e0fffe15 	stw	r3,-8(fp)
80207c80:	10800017 	ldw	r2,0(r2)
80207c84:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
80207c88:	e0bffb17 	ldw	r2,-20(fp)
80207c8c:	1000031e 	bne	r2,zero,80207c9c <alt_printf+0xe8>
                    {
                        alt_putchar('0');
80207c90:	01000c04 	movi	r4,48
80207c94:	0207de00 	call	80207de0 <alt_putchar>
                        continue;
80207c98:	00004206 	br	80207da4 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
80207c9c:	00800704 	movi	r2,28
80207ca0:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
80207ca4:	00000306 	br	80207cb4 <alt_printf+0x100>
                        digit_shift -= 4;
80207ca8:	e0bff917 	ldw	r2,-28(fp)
80207cac:	10bfff04 	addi	r2,r2,-4
80207cb0:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
80207cb4:	00c003c4 	movi	r3,15
80207cb8:	e0bff917 	ldw	r2,-28(fp)
80207cbc:	1884983a 	sll	r2,r3,r2
80207cc0:	1007883a 	mov	r3,r2
80207cc4:	e0bffb17 	ldw	r2,-20(fp)
80207cc8:	1884703a 	and	r2,r3,r2
80207ccc:	103ff626 	beq	r2,zero,80207ca8 <__reset+0xfa1e7ca8>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
80207cd0:	00001906 	br	80207d38 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
80207cd4:	00c003c4 	movi	r3,15
80207cd8:	e0bff917 	ldw	r2,-28(fp)
80207cdc:	1884983a 	sll	r2,r3,r2
80207ce0:	1007883a 	mov	r3,r2
80207ce4:	e0bffb17 	ldw	r2,-20(fp)
80207ce8:	1886703a 	and	r3,r3,r2
80207cec:	e0bff917 	ldw	r2,-28(fp)
80207cf0:	1884d83a 	srl	r2,r3,r2
80207cf4:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
80207cf8:	e0bffc17 	ldw	r2,-16(fp)
80207cfc:	108002a8 	cmpgeui	r2,r2,10
80207d00:	1000041e 	bne	r2,zero,80207d14 <alt_printf+0x160>
                            c = '0' + digit;
80207d04:	e0bffc17 	ldw	r2,-16(fp)
80207d08:	10800c04 	addi	r2,r2,48
80207d0c:	e0bff805 	stb	r2,-32(fp)
80207d10:	00000306 	br	80207d20 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
80207d14:	e0bffc17 	ldw	r2,-16(fp)
80207d18:	108015c4 	addi	r2,r2,87
80207d1c:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
80207d20:	e0bff807 	ldb	r2,-32(fp)
80207d24:	1009883a 	mov	r4,r2
80207d28:	0207de00 	call	80207de0 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
80207d2c:	e0bff917 	ldw	r2,-28(fp)
80207d30:	10bfff04 	addi	r2,r2,-4
80207d34:	e0bff915 	stw	r2,-28(fp)
80207d38:	e0bff917 	ldw	r2,-28(fp)
80207d3c:	103fe50e 	bge	r2,zero,80207cd4 <__reset+0xfa1e7cd4>
80207d40:	00001806 	br	80207da4 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
80207d44:	e0bff807 	ldb	r2,-32(fp)
80207d48:	10801cd8 	cmpnei	r2,r2,115
80207d4c:	1000151e 	bne	r2,zero,80207da4 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
80207d50:	e0bffe17 	ldw	r2,-8(fp)
80207d54:	10c00104 	addi	r3,r2,4
80207d58:	e0fffe15 	stw	r3,-8(fp)
80207d5c:	10800017 	ldw	r2,0(r2)
80207d60:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
80207d64:	00000906 	br	80207d8c <alt_printf+0x1d8>
                      alt_putchar(*s++);
80207d68:	e0bffa17 	ldw	r2,-24(fp)
80207d6c:	10c00044 	addi	r3,r2,1
80207d70:	e0fffa15 	stw	r3,-24(fp)
80207d74:	10800003 	ldbu	r2,0(r2)
80207d78:	10803fcc 	andi	r2,r2,255
80207d7c:	1080201c 	xori	r2,r2,128
80207d80:	10bfe004 	addi	r2,r2,-128
80207d84:	1009883a 	mov	r4,r2
80207d88:	0207de00 	call	80207de0 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
80207d8c:	e0bffa17 	ldw	r2,-24(fp)
80207d90:	10800003 	ldbu	r2,0(r2)
80207d94:	10803fcc 	andi	r2,r2,255
80207d98:	1080201c 	xori	r2,r2,128
80207d9c:	10bfe004 	addi	r2,r2,-128
80207da0:	103ff11e 	bne	r2,zero,80207d68 <__reset+0xfa1e7d68>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
80207da4:	e0bff717 	ldw	r2,-36(fp)
80207da8:	10c00044 	addi	r3,r2,1
80207dac:	e0fff715 	stw	r3,-36(fp)
80207db0:	10800003 	ldbu	r2,0(r2)
80207db4:	e0bff805 	stb	r2,-32(fp)
80207db8:	e0bff807 	ldb	r2,-32(fp)
80207dbc:	103f8a1e 	bne	r2,zero,80207be8 <__reset+0xfa1e7be8>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
80207dc0:	00000106 	br	80207dc8 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
80207dc4:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
80207dc8:	0001883a 	nop
80207dcc:	e037883a 	mov	sp,fp
80207dd0:	dfc00117 	ldw	ra,4(sp)
80207dd4:	df000017 	ldw	fp,0(sp)
80207dd8:	dec00504 	addi	sp,sp,20
80207ddc:	f800283a 	ret

80207de0 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
80207de0:	defffd04 	addi	sp,sp,-12
80207de4:	dfc00215 	stw	ra,8(sp)
80207de8:	df000115 	stw	fp,4(sp)
80207dec:	df000104 	addi	fp,sp,4
80207df0:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
80207df4:	d0a00117 	ldw	r2,-32764(gp)
80207df8:	10800217 	ldw	r2,8(r2)
80207dfc:	100b883a 	mov	r5,r2
80207e00:	e13fff17 	ldw	r4,-4(fp)
80207e04:	02083940 	call	80208394 <putc>
#endif
#endif
}
80207e08:	e037883a 	mov	sp,fp
80207e0c:	dfc00117 	ldw	ra,4(sp)
80207e10:	df000017 	ldw	fp,0(sp)
80207e14:	dec00204 	addi	sp,sp,8
80207e18:	f800283a 	ret

80207e1c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
80207e1c:	defffa04 	addi	sp,sp,-24
80207e20:	df000515 	stw	fp,20(sp)
80207e24:	df000504 	addi	fp,sp,20
80207e28:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
80207e2c:	0005303a 	rdctl	r2,status
80207e30:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
80207e34:	e0fffc17 	ldw	r3,-16(fp)
80207e38:	00bfff84 	movi	r2,-2
80207e3c:	1884703a 	and	r2,r3,r2
80207e40:	1001703a 	wrctl	status,r2
  
  return context;
80207e44:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
80207e48:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
80207e4c:	e0bfff17 	ldw	r2,-4(fp)
80207e50:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
80207e54:	e0bffd17 	ldw	r2,-12(fp)
80207e58:	10800017 	ldw	r2,0(r2)
80207e5c:	e0fffd17 	ldw	r3,-12(fp)
80207e60:	18c00117 	ldw	r3,4(r3)
80207e64:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
80207e68:	e0bffd17 	ldw	r2,-12(fp)
80207e6c:	10800117 	ldw	r2,4(r2)
80207e70:	e0fffd17 	ldw	r3,-12(fp)
80207e74:	18c00017 	ldw	r3,0(r3)
80207e78:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
80207e7c:	e0bffd17 	ldw	r2,-12(fp)
80207e80:	e0fffd17 	ldw	r3,-12(fp)
80207e84:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
80207e88:	e0bffd17 	ldw	r2,-12(fp)
80207e8c:	e0fffd17 	ldw	r3,-12(fp)
80207e90:	10c00015 	stw	r3,0(r2)
80207e94:	e0bffb17 	ldw	r2,-20(fp)
80207e98:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
80207e9c:	e0bffe17 	ldw	r2,-8(fp)
80207ea0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
80207ea4:	0001883a 	nop
80207ea8:	e037883a 	mov	sp,fp
80207eac:	df000017 	ldw	fp,0(sp)
80207eb0:	dec00104 	addi	sp,sp,4
80207eb4:	f800283a 	ret

80207eb8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
80207eb8:	defffb04 	addi	sp,sp,-20
80207ebc:	dfc00415 	stw	ra,16(sp)
80207ec0:	df000315 	stw	fp,12(sp)
80207ec4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
80207ec8:	d0a00e17 	ldw	r2,-32712(gp)
80207ecc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
80207ed0:	d0a01917 	ldw	r2,-32668(gp)
80207ed4:	10800044 	addi	r2,r2,1
80207ed8:	d0a01915 	stw	r2,-32668(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
80207edc:	00002e06 	br	80207f98 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
80207ee0:	e0bffd17 	ldw	r2,-12(fp)
80207ee4:	10800017 	ldw	r2,0(r2)
80207ee8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
80207eec:	e0bffd17 	ldw	r2,-12(fp)
80207ef0:	10800403 	ldbu	r2,16(r2)
80207ef4:	10803fcc 	andi	r2,r2,255
80207ef8:	10000426 	beq	r2,zero,80207f0c <alt_tick+0x54>
80207efc:	d0a01917 	ldw	r2,-32668(gp)
80207f00:	1000021e 	bne	r2,zero,80207f0c <alt_tick+0x54>
    {
      alarm->rollover = 0;
80207f04:	e0bffd17 	ldw	r2,-12(fp)
80207f08:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
80207f0c:	e0bffd17 	ldw	r2,-12(fp)
80207f10:	10800217 	ldw	r2,8(r2)
80207f14:	d0e01917 	ldw	r3,-32668(gp)
80207f18:	18801d36 	bltu	r3,r2,80207f90 <alt_tick+0xd8>
80207f1c:	e0bffd17 	ldw	r2,-12(fp)
80207f20:	10800403 	ldbu	r2,16(r2)
80207f24:	10803fcc 	andi	r2,r2,255
80207f28:	1000191e 	bne	r2,zero,80207f90 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
80207f2c:	e0bffd17 	ldw	r2,-12(fp)
80207f30:	10800317 	ldw	r2,12(r2)
80207f34:	e0fffd17 	ldw	r3,-12(fp)
80207f38:	18c00517 	ldw	r3,20(r3)
80207f3c:	1809883a 	mov	r4,r3
80207f40:	103ee83a 	callr	r2
80207f44:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
80207f48:	e0bfff17 	ldw	r2,-4(fp)
80207f4c:	1000031e 	bne	r2,zero,80207f5c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
80207f50:	e13ffd17 	ldw	r4,-12(fp)
80207f54:	0207e1c0 	call	80207e1c <alt_alarm_stop>
80207f58:	00000d06 	br	80207f90 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
80207f5c:	e0bffd17 	ldw	r2,-12(fp)
80207f60:	10c00217 	ldw	r3,8(r2)
80207f64:	e0bfff17 	ldw	r2,-4(fp)
80207f68:	1887883a 	add	r3,r3,r2
80207f6c:	e0bffd17 	ldw	r2,-12(fp)
80207f70:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
80207f74:	e0bffd17 	ldw	r2,-12(fp)
80207f78:	10c00217 	ldw	r3,8(r2)
80207f7c:	d0a01917 	ldw	r2,-32668(gp)
80207f80:	1880032e 	bgeu	r3,r2,80207f90 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
80207f84:	e0bffd17 	ldw	r2,-12(fp)
80207f88:	00c00044 	movi	r3,1
80207f8c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
80207f90:	e0bffe17 	ldw	r2,-8(fp)
80207f94:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
80207f98:	e0fffd17 	ldw	r3,-12(fp)
80207f9c:	d0a00e04 	addi	r2,gp,-32712
80207fa0:	18bfcf1e 	bne	r3,r2,80207ee0 <__reset+0xfa1e7ee0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
80207fa4:	0001883a 	nop
}
80207fa8:	0001883a 	nop
80207fac:	e037883a 	mov	sp,fp
80207fb0:	dfc00117 	ldw	ra,4(sp)
80207fb4:	df000017 	ldw	fp,0(sp)
80207fb8:	dec00204 	addi	sp,sp,8
80207fbc:	f800283a 	ret

80207fc0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
80207fc0:	deffff04 	addi	sp,sp,-4
80207fc4:	df000015 	stw	fp,0(sp)
80207fc8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
80207fcc:	000170fa 	wrctl	ienable,zero
}
80207fd0:	0001883a 	nop
80207fd4:	e037883a 	mov	sp,fp
80207fd8:	df000017 	ldw	fp,0(sp)
80207fdc:	dec00104 	addi	sp,sp,4
80207fe0:	f800283a 	ret

80207fe4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
80207fe4:	defffb04 	addi	sp,sp,-20
80207fe8:	dfc00415 	stw	ra,16(sp)
80207fec:	df000315 	stw	fp,12(sp)
80207ff0:	df000304 	addi	fp,sp,12
80207ff4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
80207ff8:	d0a00417 	ldw	r2,-32752(gp)
80207ffc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
80208000:	00003106 	br	802080c8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
80208004:	e0bffd17 	ldw	r2,-12(fp)
80208008:	10800217 	ldw	r2,8(r2)
8020800c:	1009883a 	mov	r4,r2
80208010:	02006300 	call	80200630 <strlen>
80208014:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
80208018:	e0bffd17 	ldw	r2,-12(fp)
8020801c:	10c00217 	ldw	r3,8(r2)
80208020:	e0bffe17 	ldw	r2,-8(fp)
80208024:	10bfffc4 	addi	r2,r2,-1
80208028:	1885883a 	add	r2,r3,r2
8020802c:	10800003 	ldbu	r2,0(r2)
80208030:	10803fcc 	andi	r2,r2,255
80208034:	1080201c 	xori	r2,r2,128
80208038:	10bfe004 	addi	r2,r2,-128
8020803c:	10800bd8 	cmpnei	r2,r2,47
80208040:	1000031e 	bne	r2,zero,80208050 <alt_find_file+0x6c>
    {
      len -= 1;
80208044:	e0bffe17 	ldw	r2,-8(fp)
80208048:	10bfffc4 	addi	r2,r2,-1
8020804c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
80208050:	e0bffe17 	ldw	r2,-8(fp)
80208054:	e0ffff17 	ldw	r3,-4(fp)
80208058:	1885883a 	add	r2,r3,r2
8020805c:	10800003 	ldbu	r2,0(r2)
80208060:	10803fcc 	andi	r2,r2,255
80208064:	1080201c 	xori	r2,r2,128
80208068:	10bfe004 	addi	r2,r2,-128
8020806c:	10800be0 	cmpeqi	r2,r2,47
80208070:	1000081e 	bne	r2,zero,80208094 <alt_find_file+0xb0>
80208074:	e0bffe17 	ldw	r2,-8(fp)
80208078:	e0ffff17 	ldw	r3,-4(fp)
8020807c:	1885883a 	add	r2,r3,r2
80208080:	10800003 	ldbu	r2,0(r2)
80208084:	10803fcc 	andi	r2,r2,255
80208088:	1080201c 	xori	r2,r2,128
8020808c:	10bfe004 	addi	r2,r2,-128
80208090:	10000a1e 	bne	r2,zero,802080bc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
80208094:	e0bffd17 	ldw	r2,-12(fp)
80208098:	10800217 	ldw	r2,8(r2)
8020809c:	e0fffe17 	ldw	r3,-8(fp)
802080a0:	180d883a 	mov	r6,r3
802080a4:	e17fff17 	ldw	r5,-4(fp)
802080a8:	1009883a 	mov	r4,r2
802080ac:	02082780 	call	80208278 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
802080b0:	1000021e 	bne	r2,zero,802080bc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
802080b4:	e0bffd17 	ldw	r2,-12(fp)
802080b8:	00000706 	br	802080d8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
802080bc:	e0bffd17 	ldw	r2,-12(fp)
802080c0:	10800017 	ldw	r2,0(r2)
802080c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
802080c8:	e0fffd17 	ldw	r3,-12(fp)
802080cc:	d0a00404 	addi	r2,gp,-32752
802080d0:	18bfcc1e 	bne	r3,r2,80208004 <__reset+0xfa1e8004>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
802080d4:	0005883a 	mov	r2,zero
}
802080d8:	e037883a 	mov	sp,fp
802080dc:	dfc00117 	ldw	ra,4(sp)
802080e0:	df000017 	ldw	fp,0(sp)
802080e4:	dec00204 	addi	sp,sp,8
802080e8:	f800283a 	ret

802080ec <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
802080ec:	defffc04 	addi	sp,sp,-16
802080f0:	df000315 	stw	fp,12(sp)
802080f4:	df000304 	addi	fp,sp,12
802080f8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
802080fc:	00bffa04 	movi	r2,-24
80208100:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
80208104:	e03ffd15 	stw	zero,-12(fp)
80208108:	00001906 	br	80208170 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
8020810c:	00a00874 	movhi	r2,32801
80208110:	10a4e904 	addi	r2,r2,-27740
80208114:	e0fffd17 	ldw	r3,-12(fp)
80208118:	18c00324 	muli	r3,r3,12
8020811c:	10c5883a 	add	r2,r2,r3
80208120:	10800017 	ldw	r2,0(r2)
80208124:	10000f1e 	bne	r2,zero,80208164 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
80208128:	00a00874 	movhi	r2,32801
8020812c:	10a4e904 	addi	r2,r2,-27740
80208130:	e0fffd17 	ldw	r3,-12(fp)
80208134:	18c00324 	muli	r3,r3,12
80208138:	10c5883a 	add	r2,r2,r3
8020813c:	e0ffff17 	ldw	r3,-4(fp)
80208140:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
80208144:	d0e00817 	ldw	r3,-32736(gp)
80208148:	e0bffd17 	ldw	r2,-12(fp)
8020814c:	1880020e 	bge	r3,r2,80208158 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
80208150:	e0bffd17 	ldw	r2,-12(fp)
80208154:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
80208158:	e0bffd17 	ldw	r2,-12(fp)
8020815c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
80208160:	00000606 	br	8020817c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
80208164:	e0bffd17 	ldw	r2,-12(fp)
80208168:	10800044 	addi	r2,r2,1
8020816c:	e0bffd15 	stw	r2,-12(fp)
80208170:	e0bffd17 	ldw	r2,-12(fp)
80208174:	10800810 	cmplti	r2,r2,32
80208178:	103fe41e 	bne	r2,zero,8020810c <__reset+0xfa1e810c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
8020817c:	e0bffe17 	ldw	r2,-8(fp)
}
80208180:	e037883a 	mov	sp,fp
80208184:	df000017 	ldw	fp,0(sp)
80208188:	dec00104 	addi	sp,sp,4
8020818c:	f800283a 	ret

80208190 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
80208190:	defffe04 	addi	sp,sp,-8
80208194:	df000115 	stw	fp,4(sp)
80208198:	df000104 	addi	fp,sp,4
8020819c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
802081a0:	e0bfff17 	ldw	r2,-4(fp)
802081a4:	10bffe84 	addi	r2,r2,-6
802081a8:	10c00428 	cmpgeui	r3,r2,16
802081ac:	18001a1e 	bne	r3,zero,80208218 <alt_exception_cause_generated_bad_addr+0x88>
802081b0:	100690ba 	slli	r3,r2,2
802081b4:	00a00874 	movhi	r2,32801
802081b8:	10a07204 	addi	r2,r2,-32312
802081bc:	1885883a 	add	r2,r3,r2
802081c0:	10800017 	ldw	r2,0(r2)
802081c4:	1000683a 	jmp	r2
802081c8:	80208208 	cmpgei	zero,r16,-32248
802081cc:	80208208 	cmpgei	zero,r16,-32248
802081d0:	80208218 	cmpnei	zero,r16,-32248
802081d4:	80208218 	cmpnei	zero,r16,-32248
802081d8:	80208218 	cmpnei	zero,r16,-32248
802081dc:	80208208 	cmpgei	zero,r16,-32248
802081e0:	80208210 	cmplti	zero,r16,-32248
802081e4:	80208218 	cmpnei	zero,r16,-32248
802081e8:	80208208 	cmpgei	zero,r16,-32248
802081ec:	80208208 	cmpgei	zero,r16,-32248
802081f0:	80208218 	cmpnei	zero,r16,-32248
802081f4:	80208208 	cmpgei	zero,r16,-32248
802081f8:	80208210 	cmplti	zero,r16,-32248
802081fc:	80208218 	cmpnei	zero,r16,-32248
80208200:	80208218 	cmpnei	zero,r16,-32248
80208204:	80208208 	cmpgei	zero,r16,-32248
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
80208208:	00800044 	movi	r2,1
8020820c:	00000306 	br	8020821c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
80208210:	0005883a 	mov	r2,zero
80208214:	00000106 	br	8020821c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
80208218:	0005883a 	mov	r2,zero
  }
}
8020821c:	e037883a 	mov	sp,fp
80208220:	df000017 	ldw	fp,0(sp)
80208224:	dec00104 	addi	sp,sp,4
80208228:	f800283a 	ret

8020822c <atexit>:
8020822c:	200b883a 	mov	r5,r4
80208230:	000f883a 	mov	r7,zero
80208234:	000d883a 	mov	r6,zero
80208238:	0009883a 	mov	r4,zero
8020823c:	02085b41 	jmpi	802085b4 <__register_exitproc>

80208240 <exit>:
80208240:	defffe04 	addi	sp,sp,-8
80208244:	000b883a 	mov	r5,zero
80208248:	dc000015 	stw	r16,0(sp)
8020824c:	dfc00115 	stw	ra,4(sp)
80208250:	2021883a 	mov	r16,r4
80208254:	02086cc0 	call	802086cc <__call_exitprocs>
80208258:	00a00874 	movhi	r2,32801
8020825c:	10a9d304 	addi	r2,r2,-22708
80208260:	11000017 	ldw	r4,0(r2)
80208264:	20800f17 	ldw	r2,60(r4)
80208268:	10000126 	beq	r2,zero,80208270 <exit+0x30>
8020826c:	103ee83a 	callr	r2
80208270:	8009883a 	mov	r4,r16
80208274:	020884c0 	call	8020884c <_exit>

80208278 <memcmp>:
80208278:	01c000c4 	movi	r7,3
8020827c:	3980192e 	bgeu	r7,r6,802082e4 <memcmp+0x6c>
80208280:	2144b03a 	or	r2,r4,r5
80208284:	11c4703a 	and	r2,r2,r7
80208288:	10000f26 	beq	r2,zero,802082c8 <memcmp+0x50>
8020828c:	20800003 	ldbu	r2,0(r4)
80208290:	28c00003 	ldbu	r3,0(r5)
80208294:	10c0151e 	bne	r2,r3,802082ec <memcmp+0x74>
80208298:	31bfff84 	addi	r6,r6,-2
8020829c:	01ffffc4 	movi	r7,-1
802082a0:	00000406 	br	802082b4 <memcmp+0x3c>
802082a4:	20800003 	ldbu	r2,0(r4)
802082a8:	28c00003 	ldbu	r3,0(r5)
802082ac:	31bfffc4 	addi	r6,r6,-1
802082b0:	10c00e1e 	bne	r2,r3,802082ec <memcmp+0x74>
802082b4:	21000044 	addi	r4,r4,1
802082b8:	29400044 	addi	r5,r5,1
802082bc:	31fff91e 	bne	r6,r7,802082a4 <__reset+0xfa1e82a4>
802082c0:	0005883a 	mov	r2,zero
802082c4:	f800283a 	ret
802082c8:	20c00017 	ldw	r3,0(r4)
802082cc:	28800017 	ldw	r2,0(r5)
802082d0:	18bfee1e 	bne	r3,r2,8020828c <__reset+0xfa1e828c>
802082d4:	31bfff04 	addi	r6,r6,-4
802082d8:	21000104 	addi	r4,r4,4
802082dc:	29400104 	addi	r5,r5,4
802082e0:	39bff936 	bltu	r7,r6,802082c8 <__reset+0xfa1e82c8>
802082e4:	303fe91e 	bne	r6,zero,8020828c <__reset+0xfa1e828c>
802082e8:	003ff506 	br	802082c0 <__reset+0xfa1e82c0>
802082ec:	10c5c83a 	sub	r2,r2,r3
802082f0:	f800283a 	ret

802082f4 <_putc_r>:
802082f4:	defffc04 	addi	sp,sp,-16
802082f8:	dc000215 	stw	r16,8(sp)
802082fc:	dfc00315 	stw	ra,12(sp)
80208300:	2021883a 	mov	r16,r4
80208304:	20000226 	beq	r4,zero,80208310 <_putc_r+0x1c>
80208308:	20800e17 	ldw	r2,56(r4)
8020830c:	10001b26 	beq	r2,zero,8020837c <_putc_r+0x88>
80208310:	30800217 	ldw	r2,8(r6)
80208314:	10bfffc4 	addi	r2,r2,-1
80208318:	30800215 	stw	r2,8(r6)
8020831c:	10000a16 	blt	r2,zero,80208348 <_putc_r+0x54>
80208320:	30800017 	ldw	r2,0(r6)
80208324:	11400005 	stb	r5,0(r2)
80208328:	30800017 	ldw	r2,0(r6)
8020832c:	10c00044 	addi	r3,r2,1
80208330:	30c00015 	stw	r3,0(r6)
80208334:	10800003 	ldbu	r2,0(r2)
80208338:	dfc00317 	ldw	ra,12(sp)
8020833c:	dc000217 	ldw	r16,8(sp)
80208340:	dec00404 	addi	sp,sp,16
80208344:	f800283a 	ret
80208348:	30c00617 	ldw	r3,24(r6)
8020834c:	10c00616 	blt	r2,r3,80208368 <_putc_r+0x74>
80208350:	30800017 	ldw	r2,0(r6)
80208354:	00c00284 	movi	r3,10
80208358:	11400005 	stb	r5,0(r2)
8020835c:	30800017 	ldw	r2,0(r6)
80208360:	11400003 	ldbu	r5,0(r2)
80208364:	28fff11e 	bne	r5,r3,8020832c <__reset+0xfa1e832c>
80208368:	8009883a 	mov	r4,r16
8020836c:	dfc00317 	ldw	ra,12(sp)
80208370:	dc000217 	ldw	r16,8(sp)
80208374:	dec00404 	addi	sp,sp,16
80208378:	020845c1 	jmpi	8020845c <__swbuf_r>
8020837c:	d9400015 	stw	r5,0(sp)
80208380:	d9800115 	stw	r6,4(sp)
80208384:	0200a180 	call	80200a18 <__sinit>
80208388:	d9800117 	ldw	r6,4(sp)
8020838c:	d9400017 	ldw	r5,0(sp)
80208390:	003fdf06 	br	80208310 <__reset+0xfa1e8310>

80208394 <putc>:
80208394:	00a00874 	movhi	r2,32801
80208398:	defffc04 	addi	sp,sp,-16
8020839c:	10a9d404 	addi	r2,r2,-22704
802083a0:	dc000115 	stw	r16,4(sp)
802083a4:	14000017 	ldw	r16,0(r2)
802083a8:	dc400215 	stw	r17,8(sp)
802083ac:	dfc00315 	stw	ra,12(sp)
802083b0:	2023883a 	mov	r17,r4
802083b4:	80000226 	beq	r16,zero,802083c0 <putc+0x2c>
802083b8:	80800e17 	ldw	r2,56(r16)
802083bc:	10001a26 	beq	r2,zero,80208428 <putc+0x94>
802083c0:	28800217 	ldw	r2,8(r5)
802083c4:	10bfffc4 	addi	r2,r2,-1
802083c8:	28800215 	stw	r2,8(r5)
802083cc:	10000b16 	blt	r2,zero,802083fc <putc+0x68>
802083d0:	28800017 	ldw	r2,0(r5)
802083d4:	14400005 	stb	r17,0(r2)
802083d8:	28800017 	ldw	r2,0(r5)
802083dc:	10c00044 	addi	r3,r2,1
802083e0:	28c00015 	stw	r3,0(r5)
802083e4:	10800003 	ldbu	r2,0(r2)
802083e8:	dfc00317 	ldw	ra,12(sp)
802083ec:	dc400217 	ldw	r17,8(sp)
802083f0:	dc000117 	ldw	r16,4(sp)
802083f4:	dec00404 	addi	sp,sp,16
802083f8:	f800283a 	ret
802083fc:	28c00617 	ldw	r3,24(r5)
80208400:	10c00e16 	blt	r2,r3,8020843c <putc+0xa8>
80208404:	28800017 	ldw	r2,0(r5)
80208408:	01000284 	movi	r4,10
8020840c:	14400005 	stb	r17,0(r2)
80208410:	28800017 	ldw	r2,0(r5)
80208414:	10c00003 	ldbu	r3,0(r2)
80208418:	193ff01e 	bne	r3,r4,802083dc <__reset+0xfa1e83dc>
8020841c:	280d883a 	mov	r6,r5
80208420:	180b883a 	mov	r5,r3
80208424:	00000706 	br	80208444 <putc+0xb0>
80208428:	8009883a 	mov	r4,r16
8020842c:	d9400015 	stw	r5,0(sp)
80208430:	0200a180 	call	80200a18 <__sinit>
80208434:	d9400017 	ldw	r5,0(sp)
80208438:	003fe106 	br	802083c0 <__reset+0xfa1e83c0>
8020843c:	280d883a 	mov	r6,r5
80208440:	880b883a 	mov	r5,r17
80208444:	8009883a 	mov	r4,r16
80208448:	dfc00317 	ldw	ra,12(sp)
8020844c:	dc400217 	ldw	r17,8(sp)
80208450:	dc000117 	ldw	r16,4(sp)
80208454:	dec00404 	addi	sp,sp,16
80208458:	020845c1 	jmpi	8020845c <__swbuf_r>

8020845c <__swbuf_r>:
8020845c:	defffb04 	addi	sp,sp,-20
80208460:	dcc00315 	stw	r19,12(sp)
80208464:	dc800215 	stw	r18,8(sp)
80208468:	dc000015 	stw	r16,0(sp)
8020846c:	dfc00415 	stw	ra,16(sp)
80208470:	dc400115 	stw	r17,4(sp)
80208474:	2025883a 	mov	r18,r4
80208478:	2827883a 	mov	r19,r5
8020847c:	3021883a 	mov	r16,r6
80208480:	20000226 	beq	r4,zero,8020848c <__swbuf_r+0x30>
80208484:	20800e17 	ldw	r2,56(r4)
80208488:	10004226 	beq	r2,zero,80208594 <__swbuf_r+0x138>
8020848c:	80800617 	ldw	r2,24(r16)
80208490:	8100030b 	ldhu	r4,12(r16)
80208494:	80800215 	stw	r2,8(r16)
80208498:	2080020c 	andi	r2,r4,8
8020849c:	10003626 	beq	r2,zero,80208578 <__swbuf_r+0x11c>
802084a0:	80c00417 	ldw	r3,16(r16)
802084a4:	18003426 	beq	r3,zero,80208578 <__swbuf_r+0x11c>
802084a8:	2088000c 	andi	r2,r4,8192
802084ac:	9c403fcc 	andi	r17,r19,255
802084b0:	10001a26 	beq	r2,zero,8020851c <__swbuf_r+0xc0>
802084b4:	80800017 	ldw	r2,0(r16)
802084b8:	81000517 	ldw	r4,20(r16)
802084bc:	10c7c83a 	sub	r3,r2,r3
802084c0:	1900200e 	bge	r3,r4,80208544 <__swbuf_r+0xe8>
802084c4:	18c00044 	addi	r3,r3,1
802084c8:	81000217 	ldw	r4,8(r16)
802084cc:	11400044 	addi	r5,r2,1
802084d0:	81400015 	stw	r5,0(r16)
802084d4:	213fffc4 	addi	r4,r4,-1
802084d8:	81000215 	stw	r4,8(r16)
802084dc:	14c00005 	stb	r19,0(r2)
802084e0:	80800517 	ldw	r2,20(r16)
802084e4:	10c01e26 	beq	r2,r3,80208560 <__swbuf_r+0x104>
802084e8:	8080030b 	ldhu	r2,12(r16)
802084ec:	1080004c 	andi	r2,r2,1
802084f0:	10000226 	beq	r2,zero,802084fc <__swbuf_r+0xa0>
802084f4:	00800284 	movi	r2,10
802084f8:	88801926 	beq	r17,r2,80208560 <__swbuf_r+0x104>
802084fc:	8805883a 	mov	r2,r17
80208500:	dfc00417 	ldw	ra,16(sp)
80208504:	dcc00317 	ldw	r19,12(sp)
80208508:	dc800217 	ldw	r18,8(sp)
8020850c:	dc400117 	ldw	r17,4(sp)
80208510:	dc000017 	ldw	r16,0(sp)
80208514:	dec00504 	addi	sp,sp,20
80208518:	f800283a 	ret
8020851c:	81401917 	ldw	r5,100(r16)
80208520:	00b7ffc4 	movi	r2,-8193
80208524:	21080014 	ori	r4,r4,8192
80208528:	2884703a 	and	r2,r5,r2
8020852c:	80801915 	stw	r2,100(r16)
80208530:	80800017 	ldw	r2,0(r16)
80208534:	8100030d 	sth	r4,12(r16)
80208538:	81000517 	ldw	r4,20(r16)
8020853c:	10c7c83a 	sub	r3,r2,r3
80208540:	193fe016 	blt	r3,r4,802084c4 <__reset+0xfa1e84c4>
80208544:	800b883a 	mov	r5,r16
80208548:	9009883a 	mov	r4,r18
8020854c:	02029840 	call	80202984 <_fflush_r>
80208550:	1000071e 	bne	r2,zero,80208570 <__swbuf_r+0x114>
80208554:	80800017 	ldw	r2,0(r16)
80208558:	00c00044 	movi	r3,1
8020855c:	003fda06 	br	802084c8 <__reset+0xfa1e84c8>
80208560:	800b883a 	mov	r5,r16
80208564:	9009883a 	mov	r4,r18
80208568:	02029840 	call	80202984 <_fflush_r>
8020856c:	103fe326 	beq	r2,zero,802084fc <__reset+0xfa1e84fc>
80208570:	00bfffc4 	movi	r2,-1
80208574:	003fe206 	br	80208500 <__reset+0xfa1e8500>
80208578:	800b883a 	mov	r5,r16
8020857c:	9009883a 	mov	r4,r18
80208580:	02024bc0 	call	802024bc <__swsetup_r>
80208584:	103ffa1e 	bne	r2,zero,80208570 <__reset+0xfa1e8570>
80208588:	8100030b 	ldhu	r4,12(r16)
8020858c:	80c00417 	ldw	r3,16(r16)
80208590:	003fc506 	br	802084a8 <__reset+0xfa1e84a8>
80208594:	0200a180 	call	80200a18 <__sinit>
80208598:	003fbc06 	br	8020848c <__reset+0xfa1e848c>

8020859c <__swbuf>:
8020859c:	00a00874 	movhi	r2,32801
802085a0:	10a9d404 	addi	r2,r2,-22704
802085a4:	280d883a 	mov	r6,r5
802085a8:	200b883a 	mov	r5,r4
802085ac:	11000017 	ldw	r4,0(r2)
802085b0:	020845c1 	jmpi	8020845c <__swbuf_r>

802085b4 <__register_exitproc>:
802085b4:	defffa04 	addi	sp,sp,-24
802085b8:	dc000315 	stw	r16,12(sp)
802085bc:	04200874 	movhi	r16,32801
802085c0:	8429d304 	addi	r16,r16,-22708
802085c4:	80c00017 	ldw	r3,0(r16)
802085c8:	dc400415 	stw	r17,16(sp)
802085cc:	dfc00515 	stw	ra,20(sp)
802085d0:	18805217 	ldw	r2,328(r3)
802085d4:	2023883a 	mov	r17,r4
802085d8:	10003726 	beq	r2,zero,802086b8 <__register_exitproc+0x104>
802085dc:	10c00117 	ldw	r3,4(r2)
802085e0:	010007c4 	movi	r4,31
802085e4:	20c00e16 	blt	r4,r3,80208620 <__register_exitproc+0x6c>
802085e8:	1a000044 	addi	r8,r3,1
802085ec:	8800221e 	bne	r17,zero,80208678 <__register_exitproc+0xc4>
802085f0:	18c00084 	addi	r3,r3,2
802085f4:	18c7883a 	add	r3,r3,r3
802085f8:	18c7883a 	add	r3,r3,r3
802085fc:	12000115 	stw	r8,4(r2)
80208600:	10c7883a 	add	r3,r2,r3
80208604:	19400015 	stw	r5,0(r3)
80208608:	0005883a 	mov	r2,zero
8020860c:	dfc00517 	ldw	ra,20(sp)
80208610:	dc400417 	ldw	r17,16(sp)
80208614:	dc000317 	ldw	r16,12(sp)
80208618:	dec00604 	addi	sp,sp,24
8020861c:	f800283a 	ret
80208620:	00800034 	movhi	r2,0
80208624:	10800004 	addi	r2,r2,0
80208628:	10002626 	beq	r2,zero,802086c4 <__register_exitproc+0x110>
8020862c:	01006404 	movi	r4,400
80208630:	d9400015 	stw	r5,0(sp)
80208634:	d9800115 	stw	r6,4(sp)
80208638:	d9c00215 	stw	r7,8(sp)
8020863c:	00000000 	call	80000000 <__alt_mem_onchip_memory-0x200000>
80208640:	d9400017 	ldw	r5,0(sp)
80208644:	d9800117 	ldw	r6,4(sp)
80208648:	d9c00217 	ldw	r7,8(sp)
8020864c:	10001d26 	beq	r2,zero,802086c4 <__register_exitproc+0x110>
80208650:	81000017 	ldw	r4,0(r16)
80208654:	10000115 	stw	zero,4(r2)
80208658:	02000044 	movi	r8,1
8020865c:	22405217 	ldw	r9,328(r4)
80208660:	0007883a 	mov	r3,zero
80208664:	12400015 	stw	r9,0(r2)
80208668:	20805215 	stw	r2,328(r4)
8020866c:	10006215 	stw	zero,392(r2)
80208670:	10006315 	stw	zero,396(r2)
80208674:	883fde26 	beq	r17,zero,802085f0 <__reset+0xfa1e85f0>
80208678:	18c9883a 	add	r4,r3,r3
8020867c:	2109883a 	add	r4,r4,r4
80208680:	1109883a 	add	r4,r2,r4
80208684:	21802215 	stw	r6,136(r4)
80208688:	01800044 	movi	r6,1
8020868c:	12406217 	ldw	r9,392(r2)
80208690:	30cc983a 	sll	r6,r6,r3
80208694:	4992b03a 	or	r9,r9,r6
80208698:	12406215 	stw	r9,392(r2)
8020869c:	21c04215 	stw	r7,264(r4)
802086a0:	01000084 	movi	r4,2
802086a4:	893fd21e 	bne	r17,r4,802085f0 <__reset+0xfa1e85f0>
802086a8:	11006317 	ldw	r4,396(r2)
802086ac:	218cb03a 	or	r6,r4,r6
802086b0:	11806315 	stw	r6,396(r2)
802086b4:	003fce06 	br	802085f0 <__reset+0xfa1e85f0>
802086b8:	18805304 	addi	r2,r3,332
802086bc:	18805215 	stw	r2,328(r3)
802086c0:	003fc606 	br	802085dc <__reset+0xfa1e85dc>
802086c4:	00bfffc4 	movi	r2,-1
802086c8:	003fd006 	br	8020860c <__reset+0xfa1e860c>

802086cc <__call_exitprocs>:
802086cc:	defff504 	addi	sp,sp,-44
802086d0:	df000915 	stw	fp,36(sp)
802086d4:	dd400615 	stw	r21,24(sp)
802086d8:	dc800315 	stw	r18,12(sp)
802086dc:	dfc00a15 	stw	ra,40(sp)
802086e0:	ddc00815 	stw	r23,32(sp)
802086e4:	dd800715 	stw	r22,28(sp)
802086e8:	dd000515 	stw	r20,20(sp)
802086ec:	dcc00415 	stw	r19,16(sp)
802086f0:	dc400215 	stw	r17,8(sp)
802086f4:	dc000115 	stw	r16,4(sp)
802086f8:	d9000015 	stw	r4,0(sp)
802086fc:	2839883a 	mov	fp,r5
80208700:	04800044 	movi	r18,1
80208704:	057fffc4 	movi	r21,-1
80208708:	00a00874 	movhi	r2,32801
8020870c:	10a9d304 	addi	r2,r2,-22708
80208710:	12000017 	ldw	r8,0(r2)
80208714:	45005217 	ldw	r20,328(r8)
80208718:	44c05204 	addi	r19,r8,328
8020871c:	a0001c26 	beq	r20,zero,80208790 <__call_exitprocs+0xc4>
80208720:	a0800117 	ldw	r2,4(r20)
80208724:	15ffffc4 	addi	r23,r2,-1
80208728:	b8000d16 	blt	r23,zero,80208760 <__call_exitprocs+0x94>
8020872c:	14000044 	addi	r16,r2,1
80208730:	8421883a 	add	r16,r16,r16
80208734:	8421883a 	add	r16,r16,r16
80208738:	84402004 	addi	r17,r16,128
8020873c:	a463883a 	add	r17,r20,r17
80208740:	a421883a 	add	r16,r20,r16
80208744:	e0001e26 	beq	fp,zero,802087c0 <__call_exitprocs+0xf4>
80208748:	80804017 	ldw	r2,256(r16)
8020874c:	e0801c26 	beq	fp,r2,802087c0 <__call_exitprocs+0xf4>
80208750:	bdffffc4 	addi	r23,r23,-1
80208754:	843fff04 	addi	r16,r16,-4
80208758:	8c7fff04 	addi	r17,r17,-4
8020875c:	bd7ff91e 	bne	r23,r21,80208744 <__reset+0xfa1e8744>
80208760:	00800034 	movhi	r2,0
80208764:	10800004 	addi	r2,r2,0
80208768:	10000926 	beq	r2,zero,80208790 <__call_exitprocs+0xc4>
8020876c:	a0800117 	ldw	r2,4(r20)
80208770:	1000301e 	bne	r2,zero,80208834 <__call_exitprocs+0x168>
80208774:	a0800017 	ldw	r2,0(r20)
80208778:	10003226 	beq	r2,zero,80208844 <__call_exitprocs+0x178>
8020877c:	a009883a 	mov	r4,r20
80208780:	98800015 	stw	r2,0(r19)
80208784:	00000000 	call	80000000 <__alt_mem_onchip_memory-0x200000>
80208788:	9d000017 	ldw	r20,0(r19)
8020878c:	a03fe41e 	bne	r20,zero,80208720 <__reset+0xfa1e8720>
80208790:	dfc00a17 	ldw	ra,40(sp)
80208794:	df000917 	ldw	fp,36(sp)
80208798:	ddc00817 	ldw	r23,32(sp)
8020879c:	dd800717 	ldw	r22,28(sp)
802087a0:	dd400617 	ldw	r21,24(sp)
802087a4:	dd000517 	ldw	r20,20(sp)
802087a8:	dcc00417 	ldw	r19,16(sp)
802087ac:	dc800317 	ldw	r18,12(sp)
802087b0:	dc400217 	ldw	r17,8(sp)
802087b4:	dc000117 	ldw	r16,4(sp)
802087b8:	dec00b04 	addi	sp,sp,44
802087bc:	f800283a 	ret
802087c0:	a0800117 	ldw	r2,4(r20)
802087c4:	80c00017 	ldw	r3,0(r16)
802087c8:	10bfffc4 	addi	r2,r2,-1
802087cc:	15c01426 	beq	r2,r23,80208820 <__call_exitprocs+0x154>
802087d0:	80000015 	stw	zero,0(r16)
802087d4:	183fde26 	beq	r3,zero,80208750 <__reset+0xfa1e8750>
802087d8:	95c8983a 	sll	r4,r18,r23
802087dc:	a0806217 	ldw	r2,392(r20)
802087e0:	a5800117 	ldw	r22,4(r20)
802087e4:	2084703a 	and	r2,r4,r2
802087e8:	10000b26 	beq	r2,zero,80208818 <__call_exitprocs+0x14c>
802087ec:	a0806317 	ldw	r2,396(r20)
802087f0:	2088703a 	and	r4,r4,r2
802087f4:	20000c1e 	bne	r4,zero,80208828 <__call_exitprocs+0x15c>
802087f8:	89400017 	ldw	r5,0(r17)
802087fc:	d9000017 	ldw	r4,0(sp)
80208800:	183ee83a 	callr	r3
80208804:	a0800117 	ldw	r2,4(r20)
80208808:	15bfbf1e 	bne	r2,r22,80208708 <__reset+0xfa1e8708>
8020880c:	98800017 	ldw	r2,0(r19)
80208810:	153fcf26 	beq	r2,r20,80208750 <__reset+0xfa1e8750>
80208814:	003fbc06 	br	80208708 <__reset+0xfa1e8708>
80208818:	183ee83a 	callr	r3
8020881c:	003ff906 	br	80208804 <__reset+0xfa1e8804>
80208820:	a5c00115 	stw	r23,4(r20)
80208824:	003feb06 	br	802087d4 <__reset+0xfa1e87d4>
80208828:	89000017 	ldw	r4,0(r17)
8020882c:	183ee83a 	callr	r3
80208830:	003ff406 	br	80208804 <__reset+0xfa1e8804>
80208834:	a0800017 	ldw	r2,0(r20)
80208838:	a027883a 	mov	r19,r20
8020883c:	1029883a 	mov	r20,r2
80208840:	003fb606 	br	8020871c <__reset+0xfa1e871c>
80208844:	0005883a 	mov	r2,zero
80208848:	003ffb06 	br	80208838 <__reset+0xfa1e8838>

8020884c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
8020884c:	defffd04 	addi	sp,sp,-12
80208850:	df000215 	stw	fp,8(sp)
80208854:	df000204 	addi	fp,sp,8
80208858:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
8020885c:	0001883a 	nop
80208860:	e0bfff17 	ldw	r2,-4(fp)
80208864:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
80208868:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
8020886c:	10000226 	beq	r2,zero,80208878 <_exit+0x2c>
    ALT_SIM_FAIL();
80208870:	002af070 	cmpltui	zero,zero,43969
80208874:	00000106 	br	8020887c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
80208878:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
8020887c:	003fff06 	br	8020887c <__reset+0xfa1e887c>
