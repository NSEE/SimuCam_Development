
Simucam_R0_UART.elf:     file format elf32-littlenios2
Simucam_R0_UART.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x8110025c

Program Header:
    LOAD off    0x00001020 vaddr 0x81100020 paddr 0x81100020 align 2**12
         filesz 0x0003dd78 memsz 0x000659bc flags rwx
    LOAD off    0x0003f000 vaddr 0x86020000 paddr 0x86020000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  86020000  86020000  0003f000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000023c  81100020  81100020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00038f74  8110025c  8110025c  0000125c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00002e58  811391d0  811391d0  0003a1d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001d70  8113c028  8113c028  0003d028  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00027c44  8113dd98  8113dd98  0003ed98  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  811659dc  811659dc  0003f000  2**0
                  CONTENTS
  7 .descriptor_memory 00000000  81200800  81200800  0003f000  2**0
                  CONTENTS
  8 .ext_flash    00000000  86020020  86020020  0003f000  2**0
                  CONTENTS
  9 .comment      00000023  00000000  00000000  0003f000  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00001bd8  00000000  00000000  0003f028  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   000577b4  00000000  00000000  00040c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000140ca  00000000  00000000  000983b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001c9a2  00000000  00000000  000ac47e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000757c  00000000  00000000  000c8e20  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000ad29  00000000  00000000  000d039c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00026d68  00000000  00000000  000db0c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000040  00000000  00000000  00101e30  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00002390  00000000  00000000  00101e70  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000006  00000000  00000000  0010e6b9  2**0
                  CONTENTS, READONLY
 20 .cpu          0000000c  00000000  00000000  0010e6bf  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  0010e6cb  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  0010e6cc  2**0
                  CONTENTS, READONLY
 23 .sysid_hash   00000004  00000000  00000000  0010e6cd  2**0
                  CONTENTS, READONLY
 24 .sysid_base   00000004  00000000  00000000  0010e6d1  2**0
                  CONTENTS, READONLY
 25 .sysid_time   00000004  00000000  00000000  0010e6d5  2**0
                  CONTENTS, READONLY
 26 .stderr_dev   0000000b  00000000  00000000  0010e6d9  2**0
                  CONTENTS, READONLY
 27 .stdin_dev    0000000a  00000000  00000000  0010e6e4  2**0
                  CONTENTS, READONLY
 28 .stdout_dev   0000000a  00000000  00000000  0010e6ee  2**0
                  CONTENTS, READONLY
 29 .sopc_system_name 00000011  00000000  00000000  0010e6f8  2**0
                  CONTENTS, READONLY
 30 .quartus_project_dir 00000043  00000000  00000000  0010e709  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00277c09  00000000  00000000  0010e74c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
86020000 l    d  .entry	00000000 .entry
81100020 l    d  .exceptions	00000000 .exceptions
8110025c l    d  .text	00000000 .text
811391d0 l    d  .rodata	00000000 .rodata
8113c028 l    d  .rwdata	00000000 .rwdata
8113dd98 l    d  .bss	00000000 .bss
811659dc l    d  .onchip_memory	00000000 .onchip_memory
81200800 l    d  .descriptor_memory	00000000 .descriptor_memory
86020020 l    d  .ext_flash	00000000 .ext_flash
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Simucam_R0_UART_bsp//obj/HAL/src/crt0.o
81100294 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 ddr2.c
00000000 l    df *ABS*	00000000 dma.c
00000000 l    df *ABS*	00000000 sense.c
00000000 l    df *ABS*	00000000 spwc.c
00000000 l    df *ABS*	00000000 tran.c
00000000 l    df *ABS*	00000000 eth.c
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 leds.c
00000000 l    df *ABS*	00000000 pgen.c
00000000 l    df *ABS*	00000000 power_spi.c
00000000 l    df *ABS*	00000000 rtcc_spi.c
00000000 l    df *ABS*	00000000 seven_seg.c
00000000 l    df *ABS*	00000000 fee_task.c
00000000 l    df *ABS*	00000000 in_ack_handler_task.c
8113ddea l     O .bss	00000004 xRAckLocal.4460
00000000 l    df *ABS*	00000000 initialization_task.c
00000000 l    df *ABS*	00000000 out_ack_handler_task.c
8113ddee l     O .bss	00000004 xSAckLocal.4456
00000000 l    df *ABS*	00000000 parser_comm_task.c
8113df3c l     O .bss	0000004c PreParsedLocal.4513
00000000 l    df *ABS*	00000000 receiver_uart_task.c
8113df88 l     O .bss	0000004c xPreParsedReader.4514
00000000 l    df *ABS*	00000000 rtos_tasks.c
00000000 l    df *ABS*	00000000 sender_com_task.c
00000000 l    df *ABS*	00000000 sim_meb_task.c
00000000 l    df *ABS*	00000000 timeout_checker_ack_task.c
00000000 l    df *ABS*	00000000 simucam_main.c
00000000 l    df *ABS*	00000000 ccd.c
00000000 l    df *ABS*	00000000 communication_utils.c
00000000 l    df *ABS*	00000000 configs_simucam.c
00000000 l    df *ABS*	00000000 crc8.c
8113a6af l     O .rodata	00000100 crc8_table
00000000 l    df *ABS*	00000000 error_handler_simucam.c
00000000 l    df *ABS*	00000000 fee.c
00000000 l    df *ABS*	00000000 initialization_simucam.c
00000000 l    df *ABS*	00000000 log_manager_simucam.c
00000000 l    df *ABS*	00000000 meb.c
00000000 l    df *ABS*	00000000 sdcard_file_manager.c
00000000 l    df *ABS*	00000000 test_module_simucam.c
00000000 l    df *ABS*	00000000 util.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 ctype_.c
8113b6fd l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
8113c028 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
8110fa74 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 scanf.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcspn.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vfprintf.c
8113b8ca l     O .rodata	00000010 zeroes.4389
8113b8da l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 vfprintf.c
8113b8ea l     O .rodata	00000010 zeroes.4404
811146a8 l     F .text	000000c4 __sbprintf
8113b8fa l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 vfscanf.c
8113b912 l     O .rodata	00000022 basefix.4359
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
81116230 l     F .text	00000208 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
81117d80 l     F .text	00000008 __fp_unlock
81117d94 l     F .text	000001a4 __sinit.part.1
81117f38 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
8113c874 l     O .rwdata	00000020 lc_ctype_charset
8113c854 l     O .rwdata	00000020 lc_message_charset
8113c894 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
8113b950 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strtod.c
8111af20 l     F .text	0000006c sulp
8113ba98 l     O .rodata	00000014 fpi.2737
8113baac l     O .rodata	00000028 tinytens
8113ba84 l     O .rodata	00000014 fpinan.2773
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 vfprintf.c
8113bae4 l     O .rodata	00000010 blanks.4332
8113bad4 l     O .rodata	00000010 zeroes.4333
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 vfprintf.c
8111e590 l     F .text	00000104 __sprint_r.part.0
8113bb04 l     O .rodata	00000010 blanks.4348
8113baf4 l     O .rodata	00000010 zeroes.4349
8111fb2c l     F .text	000000c4 __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
81120140 l     F .text	00000100 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
81123dac l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
81123ef0 l     F .text	00000034 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
81123f24 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
81124020 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
81124110 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_open.c
811242f4 l     F .text	00000044 alt_get_errno
81124338 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
81124560 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
8113dcfc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
81124b00 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
8113dd08 l     O .rwdata	00000004 lockid
8113de80 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
8113dd0c l     O .rwdata	00000004 lockid
8113de88 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
81126604 l     F .text	00000050 OS_InitMisc
81126654 l     F .text	00000074 OS_InitRdyList
811267d8 l     F .text	000000ec OS_InitTCBList
8112651c l     F .text	000000e8 OS_InitEventList
811266c8 l     F .text	00000088 OS_InitTaskIdle
81126750 l     F .text	00000088 OS_InitTaskStat
81126a68 l     F .text	0000007c OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
81128880 l     F .text	000000fc OS_FlagTaskRdy
81128630 l     F .text	00000168 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_mutex.c
8112a16c l     F .text	00000198 OSMutex_RdyAtPrio
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 os_tmr.c
8112eb9c l     F .text	00000044 OSTmr_Lock
8112e63c l     F .text	00000074 OSTmr_Alloc
8112ebe0 l     F .text	0000003c OSTmr_Unlock
8112eaa0 l     F .text	000000fc OSTmr_Unlink
8112e6b0 l     F .text	000000a4 OSTmr_Free
8112e950 l     F .text	00000150 OSTmr_Link
8112e8c8 l     F .text	00000088 OSTmr_InitTask
8112ec1c l     F .text	00000110 OSTmr_Task
00000000 l    df *ABS*	00000000 alt_sys_init.c
8112ed2c l     F .text	0000003c alt_dev_reg
8113ca74 l     O .rwdata	0000106c jtag_uart_0
8113dae0 l     O .rwdata	00000030 sgdma_rx
8113db10 l     O .rwdata	00000030 sgdma_tx
8113db40 l     O .rwdata	000000d0 rs232_uart
8113dc10 l     O .rwdata	00000064 dma_DDR_M
8113dc74 l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
00000000 l    df *ABS*	00000000 Altera_UP_SD_Card_Avalon_Interface.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
8113353c l     F .text	000002ac altera_avalon_jtag_uart_irq
811337e8 l     F .text	0000010c altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_sgdma.c
81133fec l     F .text	00000044 alt_get_errno
81134cac l     F .text	000000c4 alt_avalon_sgdma_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
81134e20 l     F .text	00000080 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
811351b4 l     F .text	000000a4 altera_avalon_uart_irq
81135258 l     F .text	00000140 altera_avalon_uart_rxirq
81135398 l     F .text	000001ac altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
811355a0 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
81135854 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 altera_msgdma.c
81135ad8 l     F .text	00000044 alt_get_errno
81135b1c l     F .text	0000009c alt_msgdma_write_standard_descriptor
81135bb8 l     F .text	00000134 alt_msgdma_write_extended_descriptor
81135cec l     F .text	0000018c alt_msgdma_irq
81135e78 l     F .text	00000094 alt_msgdma_construct_standard_descriptor
81135f0c l     F .text	0000015c alt_msgdma_construct_extended_descriptor
81136068 l     F .text	00000340 alt_msgdma_descriptor_async_transfer
811363a8 l     F .text	00000408 alt_msgdma_descriptor_sync_transfer
81136ab0 l     F .text	000000ac alt_msgdma_construct_prefetcher_standard_descriptor
81136b5c l     F .text	0000019c alt_msgdma_construct_prefetcher_extended_descriptor
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
81137e88 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
8113859c l     F .text	000000cc alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000044 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
8113df34 l     O .bss	00000002 OSTmrCtr
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
8113df38 g     O .bss	00000004 alt_instruction_exception_handler
8110b408 g     F .text	0000004c vFailDeleteInitialization
8113df04 g     O .bss	00000004 aux_status_register
811523fc g     O .bss	00002000 vInAckHandlerTask_stk
81137ae4 g     F .text	00000044 alt_msgdma_standard_descriptor_async_transfer
8110f980 g     F .text	00000018 putchar
81102944 g     F .text	00000130 SPWC_WRITE_REG32
8111a42c g     F .text	0000007c _mprec_log10
81104088 g     F .text	00000130 TRAN_READ_REG32
81105364 g     F .text	00000108 I2C_Read
8113dd5a g     O .rwdata	00000002 OSTaskNameSize
811543fc g     O .bss	00000118 xBuffer64
8111a520 g     F .text	0000008c __any_on
81118ef4 g     F .text	0000005c _isatty_r
8113b95c g     O .rodata	00000028 __mprec_tinytens
81124230 g     F .text	000000c4 alt_main
8113ddf8 g     O .bss	00000004 DMADev
8110f998 g     F .text	000000c8 _puts_r
8113de90 g     O .bss	00000004 OSTmrFreeList
8113dcac g     O .rwdata	00000004 ul_spwc_c_spacewire_link_control_status_register_value
811658dc g     O .bss	00000100 alt_irq
8113ddcc g     O .bss	00000004 ul_tran_d_interface_control_status_register_value
81119064 g     F .text	00000068 _lseek_r
8110c95c g     F .text	00000030 vChangeDefaultAutoResetSync
811290e0 g     F .text	000000d4 OS_MemInit
8110a060 g     F .text	0000098c vLoadDefaultETHConf
8112db7c g     F .text	00000068 OSTimeSet
8113dcb8 g     O .rwdata	00000004 ul_spwc_f_spacewire_link_control_status_register_value
81118138 g     F .text	000000ac __sflags
8112303c g     F .text	00000088 .hidden __eqdf2
81101a14 g     F .text	0000004c DMA_DESCRIPTOR_BUFFER_FULL
8110c7d4 g     F .text	00000034 vLoadDefaultSyncSource
81100f38 g     F .text	000003a0 DDR2_MEMORY_READ_TEST
8112f22c g     F .text	000001ac Check_for_Master_Boot_Record
81160d18 g     O .bss	00000010 OSTmrWheelTbl
81136870 g     F .text	00000060 alt_msgdma_construct_standard_mm_to_mm_descriptor
8113dda0 g     O .bss	00000004 ul_spwc_a_interface_control_status_register_value
811251e4 g     F .text	00000618 OSEventPendMulti
811659dc g       *ABS*	00000000 __alt_heap_start
81138bd4 g     F .text	0000002c OSTaskCreateHook
811330a4 g     F .text	000001c4 alt_up_sd_card_fclose
8113ddfc g     O .bss	00000004 xSemCountBuffer64
8113dde8 g     O .bss	00000001 SspdConfigControl
8110f934 g     F .text	00000044 printf
8113dd32 g     O .rwdata	00000002 OSMboxEn
8110994c g     F .text	00000394 bSendUART128
8113415c g     F .text	00000118 alt_avalon_sgdma_do_sync_transfer
8110cee0 g     F .text	000000a4 aatoh
81125860 g     F .text	00000054 OSIntEnter
81120dac g     F .text	000000a4 _wcrtomb_r
8110b370 g     F .text	0000004c vFailReceiverCreate
8110ff00 g     F .text	00000064 __sseek
811180e8 g     F .text	00000010 __sinit
8111fbf0 g     F .text	00000148 __swbuf_r
811093f8 g     F .text	000002cc bResourcesInitRTOS
8113dd42 g     O .rwdata	00000002 OSQEn
81118f80 g     F .text	00000084 _setlocale_r
8113dde4 g     O .bss	00000004 LedsPainelControl
81117f40 g     F .text	00000070 __sfmoreglue
8111e578 g     F .text	00000018 ungetc
81124ea0 g     F .text	000000d4 __malloc_unlock
81101d04 g     F .text	00000210 DMA_MULTIPLE_TRANSFER
81138c54 g     F .text	00000028 OSTaskStatHook
8110c844 g     F .text	00000030 vChangeDefaultSyncSource
8113de94 g     O .bss	00000001 OSLockNesting
8113de98 g     O .bss	00000004 OSTmrSemSignal
8110be24 g     F .text	000000d8 vNFeeStructureInit
8113de00 g     O .bss	00000004 xSemCommInit
8111af8c g     F .text	00001600 _strtod_r
8113de04 g     O .bss	00000004 xSemCountSenderACK
8110d00c g     F .text	00000448 .hidden __divsf3
81104294 g     F .text	000001fc v_Transparent_Interface_Enable_Control
8113df28 g     O .bss	00000004 current_sector_modified
8113dd80 g     O .rwdata	00000002 OSDataSize
8113de9c g     O .bss	00000001 OSRunning
81104ed0 g     F .text	000002b0 ui_Transparent_Interface_Get_SpaceWire_Data
8113ddc8 g     O .bss	00000004 ul_tran_c_interface_control_status_register_value
81154514 g     O .bss	00002000 senderTask_stk
811348ec g     F .text	000003c0 alt_avalon_sgdma_construct_descriptor_burst
811034b0 g     F .text	00000060 ul_SpaceWire_Interface_Interrupts_Flags_Read
8113de08 g     O .bss	00000004 fp
8113e3fc g     O .bss	00002000 SPWHTaskStk
811193f4 g     F .text	0000015c memmove
81156514 g     O .bss	0000045c xSimMebStruct
81138cd0 g     F .text	0000002c OSInitHookBegin
81103f58 g     F .text	00000130 TRAN_WRITE_REG32
8113dd78 g     O .rwdata	00000002 OSTmrSize
811180d0 g     F .text	00000018 _cleanup
8110cc08 g     F .text	00000040 siCloseFile
81119550 g     F .text	000000b0 _Balloc
8110c8e8 g     F .text	00000038 vLoadDefaultAutoResetSync
81131c80 g     F .text	000000cc alt_up_sd_card_is_Present
811367b0 g     F .text	00000060 alt_msgdma_construct_standard_st_to_mm_descriptor
8110880c g     F .text	000001a0 Set_SpW_Led
811403fc g     O .bss	00002000 SPWFTaskStk
81101aac g     F .text	000000a4 DMA_DISPATCHER_STOP
8112ef54 g     F .text	00000054 Save_Modified_Sector
8113dea0 g     O .bss	00000004 OSIdleCtr
811230c4 g     F .text	000000dc .hidden __gtdf2
81138964 g     F .text	0000002c altera_nios2_gen2_irq_init
81138a4c g       .text	00000000 OSStartTsk
81126dd8 g     F .text	000002dc OS_TCBInit
8110c424 g     F .text	0000006c vInitSimucamBasicHW
81156970 g     O .bss	00002000 vTimeoutCheckerTask_stk
811056e0 g     F .text	00000138 i2c_write
86020000 g     F .entry	00000000 __reset
8113df20 g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
8113dea4 g     O .bss	00000002 OSTmrUsed
8113de0c g     O .bss	00000004 xSemCountBuffer128
81102158 g     F .text	000000f8 TEMP_Read
8113dd7e g     O .rwdata	00000002 OSTmrWheelTblSize
811343e4 g     F .text	00000080 alt_avalon_sgdma_construct_stream_to_mem_desc_burst
8110c2f4 g     F .text	0000002c cFeeSpwChannelDisable
8113dd1e g     O .rwdata	00000002 OSEventSize
8113dea6 g     O .bss	00000001 OSPrioHighRdy
8110ead0 g     F .text	00000064 _fstat_r
81138c00 g     F .text	0000002c OSTaskDelHook
8113de4c g     O .bss	00000004 errno
81115fa0 g     F .text	0000001c __svfscanf
8110fe74 g     F .text	00000008 __seofread
81138a2c g       .text	00000000 OSStartHighRdy
8112c5ac g     F .text	000001ec OSTaskCreateExt
8110b5f4 g     F .text	00000068 vFailGetCountSemaphorePreParsedBuffer
8111d0bc g     F .text	00001244 ___svfiprintf_internal_r
81128160 g     F .text	00000068 OSFlagPendGetFlagsRdy
8113dd5e g     O .rwdata	00000002 OSTaskStatStkSize
81103a08 g     F .text	00000078 uc_SpaceWire_Interface_Get_TimeCode
811272ac g     F .text	00000310 OSFlagAccept
8112a888 g     F .text	000000c0 OSQFlush
8112a304 g     F .text	00000148 OSQAccept
8113de70 g     O .bss	00000004 alt_argv
81145ca0 g       *ABS*	00000000 _gp
8110b038 g     F .text	0000004c vFailSendPreAckReceiverSemaphore
811249c4 g     F .text	0000013c usleep
81132258 g     F .text	00000384 alt_up_sd_card_fopen
8110ca74 g     F .text	00000030 bSDcardIsPresent
8110873c g     F .text	000000d0 Configure_SpW_Autostart
811089ac g     F .text	0000013c vSenderComTask
81131dc0 g     F .text	000000d8 alt_up_sd_card_find_first
81103948 g     F .text	00000064 v_SpaceWire_Interface_Send_TimeCode
8112c3f8 g     F .text	000001b4 OSTaskCreate
8110b794 g     F .text	00000068 vFailSendNack
8113df14 g     O .bss	00000004 command_argument_register
8112bf00 g     F .text	000004f8 OSTaskChangePrio
8113de8c g     O .bss	00000004 alt_heapsem
81103888 g     F .text	00000060 ul_SpaceWire_Interface_Link_Error_Read
81105978 g     F .text	00000080 bSetBoardLeds
811270b4 g     F .text	000001f8 OSDebugInit
8112c798 g     F .text	0000034c OSTaskDel
81108260 g     F .text	00000054 SPWDTask
811291b4 g     F .text	000001ac OSMutexAccept
8110c874 g     F .text	00000040 vSetTimeCode
81137358 g     F .text	000000dc alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits
8113de10 g     O .bss	00000004 xSemCountPreParsed
8113c8f4 g     O .rwdata	00000180 alt_fd_list
81160d28 g     O .bss	00000370 OSFlagTbl
8110b1a0 g     F .text	00000068 vFailGetCountSemaphoreReceiverTask
8110c72c g     F .text	0000003c vLoadDefaultRTValue
8110f978 g     F .text	00000008 _putchar_r
811262e4 g     F .text	000000c0 OS_EventTaskRemove
811314d4 g     F .text	00000134 find_first_empty_record_in_root_directory
81138048 g     F .text	00000098 alt_find_dev
8110f61c g     F .text	00000150 memcpy
81120a78 g     F .text	00000264 __hexnan
811038e8 g     F .text	00000060 ul_SpaceWire_Interface_Link_Status_Read
81158970 g     O .bss	00000130 xBuffer32
8113dd48 g     O .rwdata	00000002 OSRdyTblSize
81161098 g     O .bss	000001a0 OSTmrTbl
81117d88 g     F .text	0000000c _cleanup_r
81123c18 g     F .text	000000e4 .hidden __floatsidf
8113ddd8 g     O .bss	00000004 ul_tran_g_interface_control_status_register_value
8110c3f0 g     F .text	00000034 cFeeRMAPLogDisable
81107200 g     F .text	000002c0 vParserCommTask
81138668 g     F .text	00000084 alt_io_redirect
8110c384 g     F .text	00000034 cFeeRMAPEchoingDisable
811231a0 g     F .text	000000f4 .hidden __ltdf2
8110bd04 g     F .text	00000068 vCouldNotRetransmitB128TimeoutTask
8113de14 g     O .bss	00000004 xMutexReceivedACK
811391d0 g       *ABS*	00000000 __DTOR_END__
811377e0 g     F .text	00000094 alt_msgdma_start_prefetcher_with_extd_desc_list
81137b28 g     F .text	00000044 alt_msgdma_extended_descriptor_async_transfer
81137a88 g     F .text	0000005c alt_msgdma_register_callback
8110a9ec g     F .text	00000330 vShowEthConfig
8113ddbc g     O .bss	00000004 ul_spwc_h_interface_control_status_register_value
8110c490 g     F .text	00000030 bLogWriteSDCard
8110b4bc g     F .text	00000068 vFailSetCountSemaphorexBuffer64
811075d8 g     F .text	000000a0 bTrySendSemaphoreCommInit
8110fa60 g     F .text	00000014 puts
81138d78 g     F .text	000000a4 alt_exception_cause_generated_bad_addr
81124f74 g     F .text	00000128 OSEventNameGet
8113dd2c g     O .rwdata	00000002 OSFlagMax
81119180 g     F .text	000000e0 mbrtowc
811310cc g     F .text	000001b4 find_first_empty_cluster
8111acf8 g     F .text	00000074 __fpclassifyd
81115fbc g     F .text	00000054 _vfscanf_r
81129834 g     F .text	000005a4 OSMutexPend
8113dcc0 g     O .rwdata	00000004 ul_spwc_h_spacewire_link_control_status_register_value
8111a380 g     F .text	000000ac __ratio
81131bbc g     F .text	000000c4 alt_up_sd_card_open_dev
81103510 g     F .text	0000017c v_SpaceWire_Interface_Interrupts_Flags_Clear
811258b4 g     F .text	00000100 OSIntExit
8111fb10 g     F .text	0000001c __vfiprintf_internal
8113dd66 g     O .rwdata	00000002 OSTCBSize
811344ec g     F .text	00000094 alt_avalon_sgdma_construct_mem_to_stream_desc_burst
8113dea7 g     O .bss	00000001 OSPrioCur
81133a5c g     F .text	000002c4 altera_avalon_jtag_uart_read
8110c4c0 g     F .text	0000002c bLogWriteETH
81137020 g     F .text	000000f8 alt_msgdma_prefetcher_add_standard_desc_to_list
8110f8fc g     F .text	00000038 _printf_r
81121be0 g     F .text	00000064 .hidden __udivsi3
81124064 g     F .text	000000ac isatty
8113dde0 g     O .bss	00000001 LedsBoardControl
8113de18 g     O .bss	00000004 xSemCountReceivedACK
8113dd4c g     O .rwdata	00000002 OSStkWidth
81118f50 g     F .text	00000030 iswspace
81104ad0 g     F .text	0000005c b_Transparent_Interface_TX_FIFO_Status_Full
8113b9ac g     O .rodata	000000c8 __mprec_tens
8113dd40 g     O .rwdata	00000002 OSPtrSize
8113ddb8 g     O .bss	00000004 ul_spwc_g_interface_control_status_register_value
8113ddb0 g     O .bss	00000004 ul_spwc_e_interface_control_status_register_value
81119004 g     F .text	0000000c __locale_charset
81121dd0 g     F .text	000000c8 .hidden __lesf2
8113dd20 g     O .rwdata	00000002 OSEventTblSize
81105bec g     F .text	0000003c v_Pattern_Generator_Start
81120fac g     F .text	0000007c .hidden __fixunsdfsi
81138990 g       .text	00000000 OSCtxSw
8110546c g     F .text	00000160 I2C_MultipleRead
8113de58 g     O .bss	00000004 __malloc_top_pad
8113dea8 g     O .bss	00000004 OSTCBList
8112e5fc g     F .text	00000040 OSTmrSignal
8113de68 g     O .bss	00000004 alt_fd_list_lock
8111cbe8 g     F .text	0000001c strtoul
8113dcd8 g     O .rwdata	00000004 __mb_cur_max
81119034 g     F .text	0000000c _localeconv_r
8111cc04 g     F .text	000002e0 _strtoull_r
8110368c g     F .text	000001fc v_SpaceWire_Interface_Link_Control
81119974 g     F .text	00000044 __i2b
81118898 g     F .text	000004c4 __sfvwrite_r
8113463c g     F .text	00000064 alt_avalon_sgdma_stop
811303ac g     F .text	000000c0 get_dir_divider_location
81161238 g     O .bss	00000c30 OSMemTbl
8113deac g     O .bss	00000001 OSTickStepState
81158aa0 g     O .bss	00002000 vReceiverUartTask_stk
8110fc6c g     F .text	0000005c _sbrk_r
8113de1c g     O .bss	00000004 xSemTimeoutChecker
8113006c g     F .text	000000cc filename_to_upper_case
8113dd44 g     O .rwdata	00000002 OSQMax
811325dc g     F .text	00000090 alt_up_sd_card_set_attributes
81129530 g     F .text	00000304 OSMutexDel
81161e68 g     O .bss	00000800 OSTaskStatStk
8110caa4 g     F .text	00000030 bSDcardFAT16Check
81128cfc g     F .text	000000f8 OSMemNameGet
8110ae8c g     F .text	00000060 vFailCreateMutexSResources
8112f3d8 g     F .text	00000284 Read_File_Record_At_Offset
81108120 g     F .text	00000044 MemDMATask
8113dd24 g     O .rwdata	00000002 OSFlagEn
8111a724 g     F .text	00000068 _read_r
8113dd6a g     O .rwdata	00000002 OSTimeTickHookEn
81137e58 g     F .text	00000030 alt_dcache_flush
8112ad50 g     F .text	00000170 OSQPost
8112897c g     F .text	000000ac OS_FlagUnlink
8113dcf4 g     O .rwdata	00000004 alt_max_fd
8110bab0 g     F .text	0000004c vFailTimeoutCheckerTaskCreate
81126920 g     F .text	00000070 OS_MemCopy
81126990 g     F .text	000000d8 OS_Sched
81130c50 g     F .text	0000047c find_file_in_directory
8111fe1c g     F .text	000000f8 _fclose_r
81128c04 g     F .text	000000f8 OSMemGet
8112cddc g     F .text	000001bc OSTaskNameSet
81117d50 g     F .text	00000030 fflush
8113de54 g     O .bss	00000004 __malloc_max_sbrked_mem
8113deb0 g     O .bss	00000004 OSCtxSwCtr
81138c7c g     F .text	00000054 OSTimeTickHook
8115aaa0 g     O .bss	00002000 vOutAckHandlerTask_stk
8113dd2e g     O .rwdata	00000002 OSFlagNameSize
8110835c g     F .text	00000054 SPWGTask
8110e19c g     F .text	00000118 .hidden __extendsfdf2
811263a4 g     F .text	00000108 OS_EventTaskRemoveMulti
81131d4c g     F .text	00000074 alt_up_sd_card_is_FAT16
811051fc g     F .text	00000088 I2C_TestAdress
81121e98 g     F .text	000008b4 .hidden __adddf3
81121c9c g     F .text	00000078 .hidden __nesf2
8112618c g     F .text	00000158 OS_EventTaskWaitMulti
8111a118 g     F .text	00000114 __b2d
81136d58 g     F .text	00000060 alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor
8113dd46 g     O .rwdata	00000002 OSQSize
811215a8 g     F .text	00000540 .hidden __umoddi3
81124154 g     F .text	000000dc lseek
8112b840 g     F .text	00000214 OSSemPend
8113dcc8 g     O .rwdata	00000004 _global_impure_ptr
811066d4 g     F .text	0000004c bSSDisplayUpdate
81130710 g     F .text	00000540 get_home_directory_cluster_for_file
81104b2c g     F .text	0000005c b_Transparent_Interface_TX_FIFO_Status_Empty
8111a78c g     F .text	0000056c _realloc_r
8113dd30 g     O .rwdata	00000002 OSLowestPrio
811659dc g       *ABS*	00000000 __bss_end
811384a4 g     F .text	000000f8 alt_iic_isr_register
81134030 g     F .text	0000012c alt_avalon_sgdma_do_async_transfer
81138d4c g     F .text	0000002c OSTCBInitHook
8113dd76 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
811031ac g     F .text	00000108 v_SpaceWire_Interface_Force_Reset
811248b4 g     F .text	00000110 alt_tick
8110b138 g     F .text	00000068 vFailGetMutexSenderTask
8113bb14 g     O .rodata	00000100 __hexdig
811378d4 g     F .text	000001b4 alt_msgdma_init
81121028 g     F .text	00000580 .hidden __udivdi3
81107dd8 g     F .text	000001a4 setPreAckSenderFreePos
81120094 g     F .text	00000024 _fputwc_r
8113dd18 g     O .rwdata	00000002 OSEventEn
8113b984 g     O .rodata	00000028 __mprec_bigtens
81119750 g     F .text	0000010c __s2b
8113dd72 g     O .rwdata	00000002 OSTmrCfgNameSize
81123cfc g     F .text	000000b0 .hidden __floatunsidf
8110b58c g     F .text	00000068 vFailFoundBufferRetransmission
81119e50 g     F .text	00000060 __mcmp
8113df2c g     O .bss	00000004 current_sector_index
8113504c g     F .text	00000168 altera_avalon_uart_init
81137bb0 g     F .text	00000044 alt_msgdma_extended_descriptor_sync_transfer
8110c8b4 g     F .text	00000034 vResetTimeCode
8110c2c8 g     F .text	0000002c cFeeSpwChannelEnable
81118108 g     F .text	00000018 __fp_lock_all
81138450 g     F .text	00000054 alt_ic_irq_enabled
81105284 g     F .text	000000e0 I2C_Write
8113deb4 g     O .bss	00000002 OSTmrFree
81103ae8 g     F .text	000001b8 b_SpaceWire_Interface_Set_TX_Div
81105b94 g     F .text	00000058 ul_Pattern_Generator_Read_Register
81128798 g     F .text	000000e8 OS_FlagInit
81124810 g     F .text	000000a4 alt_alarm_stop
81110290 g     F .text	0000001c strtol
8112dda8 g     F .text	00000140 OSTmrDel
8112f144 g     F .text	000000e8 mark_cluster
81200800 g       *ABS*	00000000 __alt_mem_descriptor_memory
8113dd54 g     O .rwdata	00000002 OSTaskIdleStkSize
8113df30 g     O .bss	00000004 alt_irq_active
8112b460 g     F .text	000000b8 OSSemAccept
8110e668 g     F .text	0000044c _fseeko_r
81104be0 g     F .text	000001a0 b_Transparent_Interface_Switch_Channel
81128f10 g     F .text	000000e0 OSMemPut
81128a28 g     F .text	000001dc OSMemCreate
8113deb8 g     O .bss	00000004 OSIdleCtrMax
81100104 g     F .exceptions	000000dc alt_irq_handler
8113c8cc g     O .rwdata	00000028 alt_dev_null
81136968 g     F .text	00000098 alt_msgdma_construct_extended_mm_to_st_descriptor
8113dd68 g     O .rwdata	00000002 OSTicksPerSec
81131608 g     F .text	00000194 convert_filename_to_name_extension
81108ae8 g     F .text	00000030 vSimMebTask
8113ddf5 g     O .bss	00000001 tempFPGA
811346a0 g     F .text	0000006c alt_avalon_sgdma_check_descriptor_status
81103df4 g     F .text	000000b4 b_SpaceWire_Interface_Read_RX_Data
811055cc g     F .text	00000094 i2c_start
81138990 g       .text	00000000 OSIntCtxSw
81104970 g     F .text	0000005c b_Transparent_Interface_RX_FIFO_Status_Full
8113774c g     F .text	00000094 alt_msgdma_start_prefetcher_with_std_desc_list
81103ea8 g     F .text	000000b0 ui_SpaceWire_Interface_Get_SpaceWire_Data
81123ec8 g     F .text	00000028 alt_dcache_flush_all
8111985c g     F .text	00000068 __hi0bits
8110c768 g     F .text	0000003c vChangeRTValue
8113df00 g     O .bss	00000004 is_sd_card_formated_as_FAT16
8110bdd4 g     F .text	00000050 vNFeeNotInUse
81123b98 g     F .text	00000080 .hidden __fixdfsi
8115caa0 g     O .bss	00002000 vInitialTask_stk
8113de20 g     O .bss	00000002 usiIdCMD
81131280 g     F .text	00000254 find_first_empty_record_in_a_subdirectory
81107868 g     F .text	00000410 bPreParser
8111c58c g     F .text	00000018 strtod
8113debc g     O .bss	00000004 OSTCBFreeList
8112ba54 g     F .text	00000174 OSSemPendAbort
8110b2d8 g     F .text	0000004c vFailGetMacRTC
81100000 g       *ABS*	00000000 __alt_mem_onchip_memory
8110ba18 g     F .text	0000004c vFailCreateTimerRetransmisison
8110c4ec g     F .text	0000019c vSimucamStructureInit
8113dcec g     O .rwdata	00000008 alt_dev_list
81124b44 g     F .text	00000100 write
811347fc g     F .text	00000088 alt_avalon_sgdma_enable_desc_poll
8111a5ac g     F .text	000000a8 _putc_r
8113df24 g     O .bss	00000004 device_pointer
8113dd6c g     O .rwdata	00000002 OSVersionNbr
81121d14 g     F .text	000000bc .hidden __gtsf2
811074c0 g     F .text	00000118 getPreParsedPacket
81123f68 g     F .text	000000b8 fstat
8110c9c0 g     F .text	00000040 vChangeIdNFEEMaster
8110e61c g     F .text	0000002c fprintf
8110c3b8 g     F .text	00000038 cFeeRMAPLogEnable
81101bf4 g     F .text	00000110 DMA_SINGLE_TRANSFER
8110bb64 g     F .text	00000068 vFailPostBlockingSemTimeoutTask
8110ccb0 g     F .text	00000058 _reg_write
8110ca00 g     F .text	00000034 vChangeDefaultIdNFEEMaster
811231a0 g     F .text	000000f4 .hidden __ledf2
8110422c g     F .text	00000068 ul_Transparent_Interface_Read_Register
8112e028 g     F .text	000001b8 OSTmrRemainGet
8113dd14 g     O .rwdata	00000004 OSEndiannessTest
8110626c g     F .text	00000058 v_spi_start
81119bb8 g     F .text	00000148 __pow5mult
8111e6ac g     F .text	00001464 ___vfiprintf_internal_r
8113de64 g     O .bss	00000004 __nlocale_changed
81121c44 g     F .text	00000058 .hidden __umodsi3
8110cad4 g     F .text	000000f8 bInitializeSDCard
81100b0c g     F .text	0000042c DDR2_MEMORY_WRITE_TEST
8110b934 g     F .text	0000004c vFailParserCommTaskCreate
8110fd0c g     F .text	00000038 _scanf_r
8110b9cc g     F .text	0000004c vFailOutAckHandlerTaskCreate
81134464 g     F .text	00000088 alt_avalon_sgdma_construct_mem_to_stream_desc
8113dd26 g     O .rwdata	00000002 OSFlagGrpSize
81136db8 g     F .text	00000060 alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor
81134580 g     F .text	0000005c alt_avalon_sgdma_register_callback
8112e1e0 g     F .text	000000ec OSTmrStateGet
811659dc g       *ABS*	00000000 end
8110b6c4 g     F .text	00000068 vNoContentInPreParsedBuffer
8110eab4 g     F .text	0000001c fseeko
81105180 g     F .text	0000003c vEthHoldReset
8110e4cc g     F .text	0000000c _atoi_r
81135898 g     F .text	00000240 altera_avalon_uart_write
811032b4 g     F .text	000001fc v_SpaceWire_Interface_Interrupts_Enable_Control
8110e64c g     F .text	0000001c fseek
811098bc g     F .text	00000090 vCCDChangeValues
811333ec g     F .text	00000150 altera_avalon_jtag_uart_init
81126c20 g     F .text	000000e4 OS_TaskStat
8113ddc4 g     O .bss	00000004 ul_tran_b_interface_control_status_register_value
811001e0 g     F .exceptions	0000007c alt_instruction_exception_entry
8110af38 g     F .text	0000004c vFailTestCriticasParts
811391d0 g       *ABS*	00000000 __CTOR_LIST__
811fa000 g       *ABS*	00000000 __alt_stack_pointer
81134884 g     F .text	00000068 alt_avalon_sgdma_disable_desc_poll
81104a24 g     F .text	0000004c v_Transparent_Interface_TX_FIFO_Reset
81134ea0 g     F .text	00000084 alt_avalon_timer_sc_init
81134f8c g     F .text	00000068 altera_avalon_uart_write_fd
8110e45c g     F .text	00000064 .hidden __clzsi2
81105c28 g     F .text	0000003c v_Pattern_Generator_Stop
8113dda8 g     O .bss	00000004 ul_spwc_c_interface_control_status_register_value
81134ff4 g     F .text	00000058 altera_avalon_uart_close_fd
81133d20 g     F .text	000002cc altera_avalon_jtag_uart_write
81134274 g     F .text	0000007c alt_avalon_sgdma_construct_mem_to_mem_desc
8112e754 g     F .text	00000174 OSTmr_Init
8115eaa0 g     O .bss	0000010c xBuffer128
8110468c g     F .text	00000060 ul_Transparent_Interface_Interrupts_Flags_Read
811180f8 g     F .text	00000004 __sfp_lock_acquire
81102250 g     F .text	00000048 sense_log_temp
81119310 g     F .text	000000e4 memchr
811268c4 g     F .text	0000005c OS_MemClr
8111248c g     F .text	00002200 ___vfprintf_internal_r
81138a70 g     F .text	00000164 OSTaskStkInit
8110fd44 g     F .text	00000060 _sprintf_r
81104a70 g     F .text	00000060 ul_Transparent_Interface_TX_FIFO_Status_Read
8113437c g     F .text	00000068 alt_avalon_sgdma_construct_stream_to_mem_desc
81118580 g     F .text	00000318 _free_r
811386ec g     F .text	00000234 alt_printf
8110a010 g     F .text	00000050 vTimeoutCheck
8110cd60 g     F .text	0000010c _print_codec_status
8113dca4 g     O .rwdata	00000004 ul_spwc_a_spacewire_link_control_status_register_value
81119010 g     F .text	00000010 __locale_mb_cur_max
81125ed4 g     F .text	000001a0 OS_EventTaskRdy
81101b50 g     F .text	000000a4 DMA_DISPATCHER_RESET
8113900c g     F .text	00000188 __call_exitprocs
8113dec0 g     O .bss	00000001 OSCPUUsage
81100298 g     F .text	000002ac DDR2_EEPROM_TEST
81100a7c g     F .text	00000090 DDR2_SWITCH_MEMORY
8113de60 g     O .bss	00000004 __mlocale_changed
8113dcd0 g     O .rwdata	00000004 __malloc_sbrk_base
8110025c g     F .text	0000003c _start
8113de78 g     O .bss	00000004 _alt_tick_rate
8112a948 g     F .text	00000294 OSQPend
8111c6ac g     F .text	000002e8 _strtoll_r
8113470c g     F .text	0000005c alt_avalon_sgdma_open
8112d6cc g     F .text	0000010c OSTimeDly
81119d00 g     F .text	00000150 __lshift
81106f78 g     F .text	00000288 vOutAckHandlerTask
8113ddf6 g     O .bss	00000001 tempBoard
81136810 g     F .text	00000060 alt_msgdma_construct_standard_mm_to_st_descriptor
8113de7c g     O .bss	00000004 _alt_nticks
811245a4 g     F .text	00000104 read
8112eda8 g     F .text	000000f0 alt_sys_init
81105ca0 g     F .text	00000050 Pattern_Generator_Status
8110d858 g     F .text	0000012c .hidden __floatsisf
8111cee4 g     F .text	000001d8 __ssprint_r
8110f894 g     F .text	00000068 _open_r
8110cc88 g     F .text	00000028 bTestSimucamCriticalHW
8110ad1c g     F .text	000000a4 ucCrc8
81102c18 g     F .text	00000068 ul_SpaceWire_Interface_Read_Register
81138eec g     F .text	00000120 __register_exitproc
8113dec1 g     O .bss	00000001 OSTaskCtr
811083b0 g     F .text	00000054 SPWHTask
811423fc g     O .bss	00002000 SPWETaskStk
81109fc0 g     F .text	00000050 siPosStr
81120cdc g     F .text	000000d0 strncmp
81105b30 g     F .text	00000064 b_Pattern_Generator_Write_Register
8112d7d8 g     F .text	00000164 OSTimeDlyHMSM
811199b8 g     F .text	00000200 __multiply
811338f4 g     F .text	00000070 altera_avalon_jtag_uart_close
8110643c g     F .text	00000058 v_spi_end
8110cc48 g     F .text	00000040 cGetNextChar
811081b8 g     F .text	00000054 SPWBTask
8113dfd4 g     O .bss	00000028 __malloc_current_mallinfo
8113dd1a g     O .rwdata	00000002 OSEventMax
811051bc g     F .text	00000040 vEthReleaseReset
81121c9c g     F .text	00000078 .hidden __eqsf2
8111a22c g     F .text	00000154 __d2b
8112bbc8 g     F .text	00000118 OSSemPost
8110c7a4 g     F .text	00000030 vChangeDefaultRTValue
8113defc g     O .bss	00000004 initialized
81125a48 g     F .text	000000e4 OSSchedUnlock
81106494 g     F .text	00000170 RTCC_SPI_R_MAC
81133268 g     F .text	00000068 altera_avalon_jtag_uart_read_fd
8111c994 g     F .text	00000254 _strtoul_r
811381f0 g     F .text	000000e4 alt_get_fd
8113dec4 g     O .bss	00000004 OSMemFreeList
81125ba4 g     F .text	000000b8 OSStatInit
81101918 g     F .text	00000064 DMA_OPEN_DEVICE
81165374 g     O .bss	00000014 search_data
81137d28 g     F .text	00000130 alt_busy_sleep
81128564 g     F .text	000000cc OSFlagQuery
8113ddac g     O .bss	00000004 ul_spwc_d_interface_control_status_register_value
8113dd50 g     O .rwdata	00000002 OSTaskCreateExtEn
8110ce6c g     F .text	00000074 _split_codec_status
811161d4 g     F .text	0000005c _close_r
8110b72c g     F .text	00000068 vCouldNotSendEthConfUART
811012d8 g     F .text	000002e8 DDR2_MEMORY_RANDOM_WRITE_TEST
8113dda4 g     O .bss	00000004 ul_spwc_b_interface_control_status_register_value
81106c58 g     F .text	00000320 vInitialTask
81136cf8 g     F .text	00000060 alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor
81138e70 g     F .text	0000007c memcmp
81125eac g     F .text	00000028 OS_Dummy
81133338 g     F .text	00000058 altera_avalon_jtag_uart_close_fd
811659dc g       *ABS*	00000000 __alt_stack_base
81133390 g     F .text	0000005c altera_avalon_jtag_uart_ioctl_fd
8110eb34 g     F .text	000000d4 _fwrite_r
81136e18 g     F .text	000000a8 alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor
81116078 g     F .text	0000015c __swsetup_r
81162668 g     O .bss	000001e0 OSQTbl
81108b18 g     F .text	000008e0 vTimeoutCheckerTask
81160cfc g     O .bss	0000001c xConfEth
8112274c g     F .text	000008f0 .hidden __divdf3
8110c808 g     F .text	0000003c vChangeSyncSource
8113ddd4 g     O .bss	00000004 ul_tran_f_interface_control_status_register_value
81117fb0 g     F .text	00000120 __sfp
81165388 g     O .bss	00000054 boot_sector_data
81101a60 g     F .text	0000004c DMA_DESCRIPTOR_BUFFER_EMPTY
8111a4a8 g     F .text	00000078 __copybits
8113c44c g     O .rwdata	00000408 __malloc_av_
81118104 g     F .text	00000004 __sinit_lock_release
81105660 g     F .text	00000080 i2c_stop
8110cf84 g     F .text	00000054 Verif_Error
8110cfd8 g     F .text	00000034 toInt
8110b084 g     F .text	0000004c vFailSendPreAckSenderSemaphore
8113dec8 g     O .bss	00000004 OSTCBHighRdy
8110da7c g     F .text	00000720 .hidden __muldf3
8110fe18 g     F .text	0000005c __sread
81118418 g     F .text	0000003c fread
8113decc g     O .bss	00000004 OSQFreeList
811380e0 g     F .text	00000110 alt_find_file
81137ecc g     F .text	000000ac alt_dev_llist_insert
81124d78 g     F .text	00000128 __malloc_lock
8110e5ec g     F .text	00000030 _fprintf_r
81124714 g     F .text	000000fc sbrk
8110c244 g     F .text	0000002c vFeeSpwRMAPLoadDefault
811102ac g     F .text	000021e0 ___svfprintf_internal_r
811345dc g     F .text	00000060 alt_avalon_sgdma_start
8112509c g     F .text	00000148 OSEventNameSet
81117cec g     F .text	00000064 _fflush_r
8111fd50 g     F .text	000000cc _calloc_r
81108464 g     F .text	000002d8 Init_Simucam_Tasks
8113ded0 g     O .bss	00000001 OSRdyGrp
8112e2cc g     F .text	00000148 OSTmrStart
8110e5d4 g     F .text	00000018 fopen
8110197c g     F .text	0000004c DMA_CONFIG
8113dd98 g       *ABS*	00000000 __bss_start
81105ad0 g     F .text	00000060 PGEN_READ_REG32
8110f76c g     F .text	00000128 memset
811048b4 g     F .text	00000060 ul_Transparent_Interface_RX_FIFO_Status_Read
811443fc g     O .bss	00002000 SPWDTaskStk
81107c78 g     F .text	00000160 setPreParsedFreePos
81137874 g     F .text	00000060 alt_msgdma_open
81106750 g     F .text	00000508 vInAckHandlerTask
81100544 g     F .text	00000538 DDR2_EEPROM_DUMP
811096f0 g     F .text	00000164 main
8110b208 g     F .text	00000068 vFailGetMutexReceiverTask
8110c6c0 g     F .text	0000003c vChangeEPValue
8113de74 g     O .bss	00000004 alt_envp
811463fc g     O .bss	00002000 SPWATaskStk
8113de50 g     O .bss	00000004 __malloc_max_total_mem
81137118 g     F .text	000001a0 alt_msgdma_prefetcher_add_extended_desc_to_list
81105c64 g     F .text	0000003c v_Pattern_Generator_Reset
8110adc0 g     F .text	0000005c ucCrc8wInit
8110ba64 g     F .text	0000004c vCouldNotCheckBufferTimeOutFunction
811332d0 g     F .text	00000068 altera_avalon_jtag_uart_write_fd
81101f14 g     F .text	00000244 POWER_Read
81105818 g     F .text	00000160 i2c_read
8111fd38 g     F .text	00000018 __swbuf
8113bc44 g     O .rodata	00000100 OSUnMapTbl
81121dd0 g     F .text	000000c8 .hidden __ltsf2
8113266c g     F .text	00000090 alt_up_sd_card_get_attributes
811181e4 g     F .text	00000234 _fread_r
8110b0d0 g     F .text	00000068 vFailGetCountSemaphoreSenderTask
8113dd84 g     O .rwdata	00000008 alt_sgdma_list
8113dd4a g     O .rwdata	00000002 OSSemEn
8112ee98 g     F .text	000000bc Write_Sector_Data
81132a7c g     F .text	00000628 alt_up_sd_card_write
811281c8 g     F .text	0000039c OSFlagPost
8110ff64 g     F .text	00000008 __sclose
8110bd6c g     F .text	00000068 vFailStartTimerRetransmission
811fa000 g       *ABS*	00000000 __alt_heap_limit
8111ff14 g     F .text	00000014 fclose
81126074 g     F .text	00000118 OS_EventTaskWait
8110bc34 g     F .text	00000068 vCouldNotRetransmitB32TimeoutTask
81110050 g     F .text	00000240 _strtol_r
8110e2b4 g     F .text	000001a8 .hidden __truncdfsf2
8113dcb0 g     O .rwdata	00000004 ul_spwc_d_spacewire_link_control_status_register_value
81126d04 g     F .text	000000d4 OS_TaskStatStkChk
8112cae4 g     F .text	00000158 OSTaskDelReq
81116438 g     F .text	00001690 _dtoa_r
81137434 g     F .text	00000318 alt_msgdma_start_prefetcher_with_list_addr
8110ee08 g     F .text	00000814 _malloc_r
81120f18 g     F .text	00000030 __ascii_wctomb
81129360 g     F .text	000001d0 OSMutexCreate
8110bbcc g     F .text	00000068 vFailCouldNotRetransmitTimeoutTask
8113dcf8 g     O .rwdata	00000004 alt_errno
81136f60 g     F .text	000000c0 alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor
81125b2c g     F .text	00000078 OSStart
811483fc g     O .bss	00002000 LogTaskStk
81105d84 g     F .text	000004e8 POWER_SPI_RW
8111e300 g     F .text	000000dc __submore
81124d10 g     F .text	00000068 __env_unlock
81118d5c g     F .text	000000cc _fwalk
8113dd98 g     O .bss	00000004 InitialState
8112cf98 g     F .text	000001dc OSTaskResume
81128ff0 g     F .text	000000f0 OSMemQuery
81102a74 g     F .text	00000130 SPWC_READ_REG32
8113dd5c g     O .rwdata	00000002 OSTaskStatEn
811659dc g       *ABS*	00000000 __alt_stack_limit
8110c920 g     F .text	0000003c vChangeAutoResetSync
811192ac g     F .text	00000064 _mbtowc_r
8113dd36 g     O .rwdata	00000002 OSMemMax
8112aec0 g     F .text	00000178 OSQPostFront
8111a654 g     F .text	000000d0 putc
81121ae8 g     F .text	00000084 .hidden __divsi3
8113ded1 g     O .bss	00000006 OSRdyTbl
8113dd10 g     O .rwdata	00000002 OSDebugEn
81118454 g     F .text	0000012c _malloc_trim_r
811391d0 g       *ABS*	00000000 __CTOR_END__
8113de44 g     O .bss	00000008 xSdHandle
8110d454 g     F .text	00000404 .hidden __mulsf3
8113dd28 g     O .rwdata	00000002 OSFlagNodeSize
8113dd9c g     O .bss	00000004 pnt_memory
8110ca34 g     F .text	00000040 vSyncReset
8113df08 g     O .bss	00000004 status_register
8113dd70 g     O .rwdata	00000002 OSTmrCfgMax
8110b7fc g     F .text	00000068 vFailSetPreAckSenderBuffer
8111ae44 g     F .text	000000dc strcmp
8113df10 g     O .bss	00000004 command_register
8112a44c g     F .text	000001b4 OSQCreate
8112cc3c g     F .text	000001a0 OSTaskNameGet
8115ebac g     O .bss	00000010 xReceivedACK
8112b038 g     F .text	00000214 OSQPostOpt
81125c5c g     F .text	00000228 OSTimeTick
8113dd58 g     O .rwdata	00000002 OSTaskMax
811391d0 g       *ABS*	00000000 __DTOR_LIST__
8112b518 g     F .text	000000e0 OSSemCreate
8113dd7c g     O .rwdata	00000002 OSTmrWheelSize
8110cd08 g     F .text	00000058 _reg_read
81129ff8 g     F .text	00000174 OSMutexQuery
8112303c g     F .text	00000088 .hidden __nedf2
8113dd52 g     O .rwdata	00000002 OSTaskDelEn
8110c688 g     F .text	00000038 vLoadDefaultEPValue
8112bce0 g     F .text	00000118 OSSemQuery
8112a600 g     F .text	00000288 OSQDel
8112abdc g     F .text	00000174 OSQPendAbort
8113de24 g     O .bss	00000004 xMutexPreParsed
8112ed68 g     F .text	00000040 alt_irq_init
811246a8 g     F .text	0000006c alt_release_fd
8112f088 g     F .text	000000bc get_cluster_flag
81137b6c g     F .text	00000044 alt_msgdma_standard_descriptor_sync_transfer
8110fda4 g     F .text	00000074 sprintf
8113b4fc g     O .rodata	00000100 .hidden __clz_tab
8110820c g     F .text	00000054 SPWCTask
8112f65c g     F .text	00000294 Write_File_Record_At_Offset
8110b270 g     F .text	00000068 vFailGetMutexTxUARTSenderTask
8113de5c g     O .bss	00000004 _PathLocale
8112e414 g     F .text	000001e8 OSTmrStop
81109f70 g     F .text	00000050 usiGetIdCMD
8111c5a4 g     F .text	00000108 strtof
81138e1c g     F .text	00000014 atexit
81121d14 g     F .text	000000bc .hidden __gesf2
8110ff6c g     F .text	0000004c strcspn
81116010 g     F .text	00000068 _write_r
8110b980 g     F .text	0000004c vFailInAckHandlerTaskCreate
811259b4 g     F .text	00000094 OSSchedLock
81119040 g     F .text	00000018 setlocale
81136ec0 g     F .text	000000a0 alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor
81162848 g     O .bss	00000800 OSTmrTaskStk
8110fcc8 g     F .text	00000044 scanf
811275bc g     F .text	00000110 OSFlagCreate
8112f8f0 g     F .text	00000688 Check_for_DOS_FAT
8113179c g     F .text	000002d0 create_file
8111ae3c g     F .text	00000008 nanf
8113dccc g     O .rwdata	00000004 _impure_ptr
8113df0c g     O .bss	00000004 CSD_register_w0
8113dcb4 g     O .rwdata	00000004 ul_spwc_e_spacewire_link_control_status_register_value
8113de6c g     O .bss	00000004 alt_argc
811082b4 g     F .text	00000054 SPWETask
8114a3fc g     O .bss	00002000 SPWBTaskStk
81117ac8 g     F .text	00000224 __sflush_r
811190cc g     F .text	000000b4 _mbrtowc_r
8113dffc g     O .bss	00000400 szData
81137fe0 g     F .text	00000068 _do_dtors
8111902c g     F .text	00000008 __locale_cjk_lang
81102298 g     F .text	000006ac sense_log
8113dd22 g     O .rwdata	00000002 OSEventMultiEn
8110e648 g     F .text	00000004 _fseek_r
8115ebbc g     O .bss	00002000 vParserCommTask_stk
8110ae1c g     F .text	00000070 printErrorTask
8110c6fc g     F .text	00000030 vChangeDefaultEPValue
8112dbe4 g     F .text	000001c4 OSTmrCreate
8114c3fc g     O .bss	00002000 SPWGTaskStk
8110fa90 g     F .text	000001dc __srefill_r
8113de28 g     O .bss	00000004 xMutexBuffer32
811276cc g     F .text	00000250 OSFlagDel
8113ded8 g     O .bss	00000004 OSEventFreeList
81100020 g       .exceptions	00000000 alt_irq_entry
81119260 g     F .text	0000004c __ascii_mbtowc
8111a0b4 g     F .text	00000064 __ulp
81127ba0 g     F .text	000005c0 OSFlagPend
8113dd6e g     O .rwdata	00000002 OSTmrEn
81118120 g     F .text	00000018 __fp_unlock_all
81107f7c g     F .text	000001a4 setPreAckReceiverFreePos
8113dce4 g     O .rwdata	00000008 alt_fs_list
8113dddc g     O .bss	00000004 ul_tran_h_interface_control_status_register_value
81130138 g     F .text	00000274 check_file_name_for_FAT16_compliance
8112dee8 g     F .text	00000140 OSTmrNameGet
81126ae4 g     F .text	0000007c OS_StrCopy
8113df18 g     O .bss	00000004 buffer_memory
8113ddc0 g     O .bss	00000004 ul_tran_a_interface_control_status_register_value
8110b65c g     F .text	00000068 vFailGetxMutexPreParsedParserRxTask
81102e7c g     F .text	00000330 b_SpaceWire_Interface_Mode_Control
81104914 g     F .text	0000005c b_Transparent_Interface_RX_FIFO_Status_Empty
8113dd38 g     O .rwdata	00000002 OSMemNameSize
81104868 g     F .text	0000004c v_Transparent_Interface_RX_FIFO_Reset
81138cfc g     F .text	00000028 OSInitHookEnd
8110befc g     F .text	00000348 vUpdateMemMapFEE
8110b8cc g     F .text	00000068 vFailSetPreAckReceiverBuffer
8113dd64 g     O .rwdata	00000002 OSTCBPrioTblMax
81119058 g     F .text	0000000c localeconv
8113de2c g     O .bss	00000004 xTimerRetransmission
81107678 g     F .text	000001f0 vReceiverUartTask
8113dd60 g     O .rwdata	00000002 OSTaskStatStkChkEn
8113de30 g     O .bss	00000004 xMutexBuffer128
8114e3fc g     O .bss	00002000 MemDMATaskStk
811382d4 g     F .text	00000058 alt_ic_isr_register
8113dd34 g     O .rwdata	00000002 OSMemEn
8113dca0 g     O .rwdata	00000004 alt_stack_limit_value
8113ddd0 g     O .bss	00000004 ul_tran_e_interface_control_status_register_value
8110ec08 g     F .text	0000003c fwrite
8113df1c g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
8113dd3e g     O .rwdata	00000002 OSMutexEn
8113dca8 g     O .rwdata	00000004 ul_spwc_b_spacewire_link_control_status_register_value
81108164 g     F .text	00000054 SPWATask
8113dd98 g       *ABS*	00000000 _edata
811015c0 g     F .text	000002d8 DDR2_MEMORY_RANDOM_READ_TEST
81134f24 g     F .text	00000068 altera_avalon_uart_read_fd
8110c98c g     F .text	00000034 vLoadDefaultIdNFEEMaster
811659dc g       *ABS*	00000000 _end
811653dc g     O .bss	00000500 active_files
8113dedc g     O .bss	00000001 OSIntNesting
8110b324 g     F .text	0000004c vFailInitialization
81104b88 g     F .text	00000058 uc_Transparent_Interface_TX_FIFO_Status_Used
8110c320 g     F .text	0000002c cFeeRMAPDump
8113de34 g     O .bss	00000004 xSemCountBuffer32
8111ff28 g     F .text	0000016c __fputwc
8110c270 g     F .text	0000002c vFeeSpwRMAPChangeConfig
81115f30 g     F .text	00000070 vfscanf
81131a6c g     F .text	00000150 copy_file_record_name_to_string
81133964 g     F .text	000000f8 altera_avalon_jtag_uart_ioctl
81102c80 g     F .text	000001fc b_SpaceWire_Interface_Enable_Control
8112d93c g     F .text	000001dc OSTimeDlyResume
8112ff78 g     F .text	000000f4 Look_for_FAT16
81127a4c g     F .text	00000154 OSFlagNameSet
8113de38 g     O .bss	00000004 xMutexBuffer64
81105cf0 g     F .text	00000094 Pattern_Generator_Configure_Initial_State
8112d174 g     F .text	000001c8 OSTaskStkChk
811383bc g     F .text	00000094 alt_ic_irq_disable
8113dd3a g     O .rwdata	00000002 OSMemSize
8110b454 g     F .text	00000068 vFailSetCountSemaphorexBuffer32
81134768 g     F .text	00000094 alt_avalon_sgdma_construct_descriptor
8110fe7c g     F .text	00000084 __swrite
8113dcd4 g     O .rwdata	00000004 __malloc_trim_threshold
81119020 g     F .text	0000000c __locale_msgcharset
8113dee0 g     O .bss	00000004 OSTCBCur
8110bc9c g     F .text	00000068 vCouldNotRetransmitB64TimeoutTask
81138e30 g     F .text	00000040 exit
81129dd8 g     F .text	00000220 OSMutexPost
81131e98 g     F .text	000003c0 alt_up_sd_card_find_next
8113dd3c g     O .rwdata	00000002 OSMemTblSize
81118e28 g     F .text	000000cc _fwalk_reent
811372b8 g     F .text	000000a0 alt_msgdma_prefetcher_set_std_list_own_by_hw_bits
8110d984 g     F .text	000000f8 .hidden __floatunsisf
81119eb0 g     F .text	00000204 __mdiff
8110b3bc g     F .text	0000004c vFailSenderCreate
81121b6c g     F .text	00000074 .hidden __modsi3
8113de3c g     O .bss	00000004 xMutexSenderACK
8110bafc g     F .text	00000068 vFailGetBlockingSemTimeoutTask
8113dcc4 g     O .rwdata	00000004 __ctype_ptr__
8110b864 g     F .text	00000068 vFailSetPreParsedBuffer
8112efa8 g     F .text	000000e0 Read_Sector_Data
811fa000 g       *ABS*	00000000 __alt_data_end
81100020 g     F .exceptions	00000000 alt_exception
811180fc g     F .text	00000004 __sfp_lock_release
811257fc g     F .text	00000064 OSInit
811059f8 g     F .text	00000078 bSetPainelLeds
81136a00 g     F .text	000000b0 alt_msgdma_construct_extended_mm_to_mm_descriptor
81108404 g     F .text	00000060 LogTask
811039ac g     F .text	0000005c b_SpaceWire_Interface_TimeCode_Arrived
8113dee4 g     O .bss	00000004 OSTmrTime
8112d528 g     F .text	0000012c OSTaskQuery
8112b3b0 g     F .text	000000b0 OS_QInit
8111ad6c g     F .text	000000d0 __sccl
8110e4c0 g     F .text	0000000c atoi
81106720 g     F .text	00000030 vFeeTask
81126b60 g     F .text	0000005c OS_StrLen
81128df4 g     F .text	0000011c OSMemNameSet
8113b5fc g     O .rodata	00000101 _ctype_
84000000 g       *ABS*	00000000 __alt_mem_ext_flash
8110b524 g     F .text	00000068 vFailSetCountSemaphorexBuffer128
81103d30 g     F .text	000000c4 b_SpaceWire_Interface_Send_SpaceWire_Data
8113dd56 g     O .rwdata	00000002 OSTaskProfileEn
811368d0 g     F .text	00000098 alt_msgdma_construct_extended_st_to_mm_descriptor
8113de40 g     O .bss	00000004 xTxUARTMutex
8113dee8 g     O .bss	00000004 OSTime
8113dcdc g     O .rwdata	00000004 __mbtowc
81135544 g     F .text	0000005c altera_avalon_uart_close
8113deec g     O .bss	00000004 OSTmrSem
81163048 g     O .bss	00000800 OSTaskIdleStk
8110e4d8 g     F .text	000000fc _fopen_r
811041b8 g     F .text	00000074 b_Transparent_Interface_Write_Register
81139194 g     F .text	0000003c _exit
81137bf4 g     F .text	00000134 alt_alarm_start
8112791c g     F .text	00000130 OSFlagNameGet
8112db18 g     F .text	00000064 OSTimeGet
8113ddf4 g     O .bss	00000001 error_code
811326fc g     F .text	00000380 alt_up_sd_card_read
8110ec44 g     F .text	000001c4 __smakebuf_r
81104d80 g     F .text	00000150 b_Transparent_Interface_Send_SpaceWire_Data
8113dd8c g     O .rwdata	00000008 alt_msgdma_list
8110ffb8 g     F .text	00000098 strlen
81106388 g     F .text	000000b4 uc_spi_get_byte
811049cc g     F .text	00000058 uc_Transparent_Interface_RX_FIFO_Status_Used
81138c2c g     F .text	00000028 OSTaskSwHook
81124404 g     F .text	0000015c open
81163848 g     O .bss	00000c30 OSEventTbl
8110c29c g     F .text	0000002c vFeeSpwRMAPChangeDefault
811230c4 g     F .text	000000dc .hidden __gedf2
8113ddb4 g     O .bss	00000004 ul_spwc_f_interface_control_status_register_value
81160bbc g     O .bss	00000010 xSenderACK
81138920 g     F .text	00000044 alt_putchar
81164478 g     O .bss	00000e58 OSTCBTbl
81120240 g     F .text	00000838 __gethex
8112bdf8 g     F .text	00000108 OSSemSet
8110c34c g     F .text	00000038 cFeeRMAPEchoingEnable
8113dce0 g     O .rwdata	00000004 __wctomb
811096c4 g     F .text	0000002c vVariablesInitialization
8111e694 g     F .text	00000018 __sprint_r
81103a80 g     F .text	00000068 uc_SpaceWire_Interface_Get_TX_Div
8113dcbc g     O .rwdata	00000004 ul_spwc_g_spacewire_link_control_status_register_value
8110aeec g     F .text	0000004c vFailCreateSemaphoreResources
81102ba4 g     F .text	00000074 b_SpaceWire_Interface_Write_Register
8113dd94 g     O .rwdata	00000004 alt_priority_mask
8112b5f8 g     F .text	00000248 OSSemDel
8113def0 g     O .bss	00000004 OSFlagFreeList
811062c4 g     F .text	000000c4 v_spi_send_byte
81106604 g     F .text	000000d0 bSSDisplayConfig
8113832c g     F .text	00000090 alt_ic_irq_enable
8113dd1c g     O .rwdata	00000002 OSEventNameSize
8111468c g     F .text	0000001c __vfprintf_internal
81105a70 g     F .text	00000060 PGEN_WRITE_REG32
8113def4 g     O .bss	00000001 OSStatRdy
811652d0 g     O .bss	000000a4 OSTCBPrioTbl
811355e4 g     F .text	00000270 altera_avalon_uart_read
81120f48 g     F .text	00000064 _wctomb_r
81124c44 g     F .text	000000cc __env_lock
8113dd62 g     O .rwdata	00000002 OSTaskSwHookEn
811342f0 g     F .text	0000008c alt_avalon_sgdma_construct_mem_to_mem_desc_burst
811046ec g     F .text	0000017c v_Transparent_Interface_Interrupts_Flags_Clear
811503fc g     O .bss	00002000 SPWCTaskStk
81123294 g     F .text	00000904 .hidden __subdf3
81160bcc g     O .bss	00000130 xPreParsed
81109ce0 g     F .text	00000290 vSendEthConf
811198c4 g     F .text	000000b0 __lo0bits
8111476c g     F .text	000017c4 __svfscanf_r
8113dd00 g     O .rwdata	00000008 alt_alarm_list
8111e3dc g     F .text	0000019c _ungetc_r
8113dd2a g     O .rwdata	00000002 OSFlagWidth
81137f78 g     F .text	00000068 _do_ctors
811019c8 g     F .text	0000004c DMA_BUSY
81120e50 g     F .text	000000c8 wcrtomb
81109854 g     F .text	00000068 vCCDLoadDefaultValues
81123df0 g     F .text	000000d8 close
81104490 g     F .text	000001fc v_Transparent_Interface_Interrupts_Enable_Control
8113de84 g     O .bss	00000004 alt_envsem
81103ca0 g     F .text	00000090 b_SpaceWire_Interface_Write_TX_Data
8113def8 g     O .bss	00000004 OSIdleCtrRun
81108308 g     F .text	00000054 SPWFTask
81125e84 g     F .text	00000028 OSVersion
8113dd74 g     O .rwdata	00000002 OSTmrCfgWheelSize
81101898 g     F .text	00000080 xorshift32
8112d654 g     F .text	00000078 OS_TaskStkClr
8110cbcc g     F .text	0000003c siOpenFile
8113dd4e g     O .rwdata	00000002 OSTaskCreateEn
8110afec g     F .text	0000004c vFailSendPreParsedSemaphore
8113046c g     F .text	000002a4 match_file_record_to_name_ext
811264ac g     F .text	00000070 OS_EventWaitListInit
81134d70 g     F .text	000000b0 alt_avalon_sgdma_init
811200b8 g     F .text	00000088 fputwc
8110af84 g     F .text	00000068 vFailSendxSemCommInit
81138d24 g     F .text	00000028 OSTaskIdleHook
81118100 g     F .text	00000004 __sinit_lock_acquire
81119628 g     F .text	00000128 __multadd
8112d33c g     F .text	000001ec OSTaskSuspend
81119600 g     F .text	00000028 _Bfree
81126bbc g     F .text	00000064 OS_TaskIdle
8113dd7a g     O .rwdata	00000002 OSTmrTblSize
8112b24c g     F .text	00000164 OSQQuery



Disassembly of section .exceptions:

81100020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
81100020:	deffed04 	addi	sp,sp,-76

#ifdef ALT_STACK_CHECK
        /* Ensure stack didn't just overflow. */
        bltu  sp, et, .Lstack_overflow
81100024:	de003636 	bltu	sp,et,81100100 <alt_exception+0xe0>
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
81100028:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
8110002c:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
81100030:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
81100034:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
81100038:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
8110003c:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
81100040:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
81100044:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
81100048:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
8110004c:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
81100050:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
81100054:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
81100058:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
8110005c:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
81100060:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
81100064:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
81100068:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
8110006c:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
81100070:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
81100074:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
81100078:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
8110007c:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
81100080:	10000326 	beq	r2,zero,81100090 <alt_exception+0x70>
        beq   r4, zero, .Lnot_irq
81100084:	20000226 	beq	r4,zero,81100090 <alt_exception+0x70>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
81100088:	11001040 	call	81100104 <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
8110008c:	00000706 	br	811000ac <alt_exception+0x8c>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
81100090:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
81100094:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
81100098:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
8110009c:	11001e00 	call	811001e0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
811000a0:	1000021e 	bne	r2,zero,811000ac <alt_exception+0x8c>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
811000a4:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
811000a8:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
811000ac:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
811000b0:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
811000b4:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
811000b8:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
811000bc:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
811000c0:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
811000c4:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
811000c8:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
811000cc:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
811000d0:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
811000d4:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
811000d8:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
811000dc:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
811000e0:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
811000e4:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
811000e8:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
811000ec:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
811000f0:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
811000f4:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
811000f8:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
811000fc:	ef80083a 	eret

#ifdef ALT_STACK_CHECK
.Lstack_overflow:
        break 3
81100100:	003da0fa 	break	3

81100104 <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
81100104:	defff904 	addi	sp,sp,-28
81100108:	de00012e 	bgeu	sp,et,81100110 <alt_irq_handler+0xc>
8110010c:	003b68fa 	trap	3
81100110:	dfc00615 	stw	ra,24(sp)
81100114:	df000515 	stw	fp,20(sp)
81100118:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
8110011c:	11258600 	call	81125860 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
81100120:	0005313a 	rdctl	r2,ipending
81100124:	e0bffe15 	stw	r2,-8(fp)

  return active;
81100128:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
8110012c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
81100130:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
81100134:	00800044 	movi	r2,1
81100138:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
8110013c:	e0fffb17 	ldw	r3,-20(fp)
81100140:	e0bffc17 	ldw	r2,-16(fp)
81100144:	1884703a 	and	r2,r3,r2
81100148:	10001426 	beq	r2,zero,8110019c <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
8110014c:	00a045b4 	movhi	r2,33046
81100150:	10963704 	addi	r2,r2,22748
81100154:	e0fffd17 	ldw	r3,-12(fp)
81100158:	180690fa 	slli	r3,r3,3
8110015c:	10c5883a 	add	r2,r2,r3
81100160:	10c00017 	ldw	r3,0(r2)
81100164:	00a045b4 	movhi	r2,33046
81100168:	10963704 	addi	r2,r2,22748
8110016c:	e13ffd17 	ldw	r4,-12(fp)
81100170:	200890fa 	slli	r4,r4,3
81100174:	1105883a 	add	r2,r2,r4
81100178:	10800104 	addi	r2,r2,4
8110017c:	10800017 	ldw	r2,0(r2)
81100180:	1009883a 	mov	r4,r2
81100184:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
81100188:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
8110018c:	0005313a 	rdctl	r2,ipending
81100190:	e0bfff15 	stw	r2,-4(fp)

  return active;
81100194:	e0bfff17 	ldw	r2,-4(fp)
81100198:	00000706 	br	811001b8 <alt_irq_handler+0xb4>
      }
      mask <<= 1;
8110019c:	e0bffc17 	ldw	r2,-16(fp)
811001a0:	1085883a 	add	r2,r2,r2
811001a4:	e0bffc15 	stw	r2,-16(fp)
      i++;
811001a8:	e0bffd17 	ldw	r2,-12(fp)
811001ac:	10800044 	addi	r2,r2,1
811001b0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
811001b4:	003fe106 	br	8110013c <__reset+0xfb0e013c>

    active = alt_irq_pending ();
811001b8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
811001bc:	e0bffb17 	ldw	r2,-20(fp)
811001c0:	103fdb1e 	bne	r2,zero,81100130 <__reset+0xfb0e0130>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
811001c4:	11258b40 	call	811258b4 <OSIntExit>
}
811001c8:	0001883a 	nop
811001cc:	e037883a 	mov	sp,fp
811001d0:	dfc00117 	ldw	ra,4(sp)
811001d4:	df000017 	ldw	fp,0(sp)
811001d8:	dec00204 	addi	sp,sp,8
811001dc:	f800283a 	ret

811001e0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
811001e0:	defffb04 	addi	sp,sp,-20
811001e4:	de00012e 	bgeu	sp,et,811001ec <alt_instruction_exception_entry+0xc>
811001e8:	003b68fa 	trap	3
811001ec:	dfc00415 	stw	ra,16(sp)
811001f0:	df000315 	stw	fp,12(sp)
811001f4:	df000304 	addi	fp,sp,12
811001f8:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
811001fc:	000531fa 	rdctl	r2,exception
81100200:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
81100204:	e0bffd17 	ldw	r2,-12(fp)
81100208:	10801f0c 	andi	r2,r2,124
8110020c:	1004d0ba 	srli	r2,r2,2
81100210:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
81100214:	0005333a 	rdctl	r2,badaddr
81100218:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
8110021c:	d0a0a617 	ldw	r2,-32104(gp)
81100220:	10000726 	beq	r2,zero,81100240 <alt_instruction_exception_entry+0x60>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
81100224:	d0a0a617 	ldw	r2,-32104(gp)
81100228:	e0fffd17 	ldw	r3,-12(fp)
8110022c:	e1bffe17 	ldw	r6,-8(fp)
81100230:	e17fff17 	ldw	r5,-4(fp)
81100234:	1809883a 	mov	r4,r3
81100238:	103ee83a 	callr	r2
8110023c:	00000206 	br	81100248 <alt_instruction_exception_entry+0x68>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
81100240:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
81100244:	0005883a 	mov	r2,zero
}
81100248:	e037883a 	mov	sp,fp
8110024c:	dfc00117 	ldw	ra,4(sp)
81100250:	df000017 	ldw	fp,0(sp)
81100254:	dec00204 	addi	sp,sp,8
81100258:	f800283a 	ret

Disassembly of section .text:

8110025c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
8110025c:	06e047f4 	movhi	sp,33055
    ori sp, sp, %lo(__alt_stack_pointer)
81100260:	dee80014 	ori	sp,sp,40960
    movhi gp, %hi(_gp)
81100264:	06a04534 	movhi	gp,33044
    ori gp, gp, %lo(_gp)
81100268:	d6972814 	ori	gp,gp,23712
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
8110026c:	00a044f4 	movhi	r2,33043
    ori r2, r2, %lo(__bss_start)
81100270:	10b76614 	ori	r2,r2,56728

    movhi r3, %hi(__bss_end)
81100274:	00e045b4 	movhi	r3,33046
    ori r3, r3, %lo(__bss_end)
81100278:	18d67714 	ori	r3,r3,23004

    beq r2, r3, 1f
8110027c:	10c00326 	beq	r2,r3,8110028c <_start+0x30>

0:
    stw zero, (r2)
81100280:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
81100284:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
81100288:	10fffd36 	bltu	r2,r3,81100280 <__reset+0xfb0e0280>
    /*
     * Set up the stack limit (if required).  The linker has set up the
     * copy of the variable which is in memory.
     */

    ldw   et, %gprel(alt_stack_limit_value)(gp)
8110028c:	d6200017 	ldw	et,-32768(gp)

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
81100290:	11242300 	call	81124230 <alt_main>

81100294 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
81100294:	003fff06 	br	81100294 <__reset+0xfb0e0294>

81100298 <DDR2_EEPROM_TEST>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool DDR2_EEPROM_TEST(alt_u8 MemoryId){
81100298:	defff604 	addi	sp,sp,-40
8110029c:	de00012e 	bgeu	sp,et,811002a4 <DDR2_EEPROM_TEST+0xc>
811002a0:	003b68fa 	trap	3
811002a4:	dfc00915 	stw	ra,36(sp)
811002a8:	df000815 	stw	fp,32(sp)
811002ac:	df000804 	addi	fp,sp,32
811002b0:	2005883a 	mov	r2,r4
811002b4:	e0bfff05 	stb	r2,-4(fp)

  printf("===== DE4 DDR2 EEPROM Test =====\n");
811002b8:	01204534 	movhi	r4,33044
811002bc:	21247404 	addi	r4,r4,-28208
811002c0:	110fa600 	call	8110fa60 <puts>
  const alt_u8 DeviceAddr = DDR2_EEPROM_I2C_ADDRESS;
811002c4:	00bfe804 	movi	r2,-96
811002c8:	e0bffd05 	stb	r2,-12(fp)
  bool bSuccess;
  alt_u32 I2cSclBase;
  alt_u32 I2cSdaBase;
  int i;
  
  bSuccess = TRUE;
811002cc:	00800044 	movi	r2,1
811002d0:	e0bff915 	stw	r2,-28(fp)
  switch (MemoryId) {
811002d4:	e0bfff03 	ldbu	r2,-4(fp)
811002d8:	10c00060 	cmpeqi	r3,r2,1
811002dc:	1800031e 	bne	r3,zero,811002ec <DDR2_EEPROM_TEST+0x54>
811002e0:	108000a0 	cmpeqi	r2,r2,2
811002e4:	1000081e 	bne	r2,zero,81100308 <DDR2_EEPROM_TEST+0x70>
811002e8:	00000e06 	br	81100324 <DDR2_EEPROM_TEST+0x8c>
    case DDR2_M1_ID:
      I2cSclBase = DDR2_M1_EEPROM_I2C_SCL_BASE;
811002ec:	00a00034 	movhi	r2,32768
811002f0:	10817404 	addi	r2,r2,1488
811002f4:	e0bffa15 	stw	r2,-24(fp)
      I2cSdaBase = DDR2_M1_EEPROM_I2C_SDA_BASE;
811002f8:	00a00034 	movhi	r2,32768
811002fc:	10817804 	addi	r2,r2,1504
81100300:	e0bffb15 	stw	r2,-20(fp)
    break;
81100304:	00000d06 	br	8110033c <DDR2_EEPROM_TEST+0xa4>
    case DDR2_M2_ID:
      I2cSclBase = DDR2_M2_EEPROM_I2C_SCL_BASE;
81100308:	00a00034 	movhi	r2,32768
8110030c:	10815004 	addi	r2,r2,1344
81100310:	e0bffa15 	stw	r2,-24(fp)
      I2cSdaBase = DDR2_M2_EEPROM_I2C_SDA_BASE;      
81100314:	00a00034 	movhi	r2,32768
81100318:	10815404 	addi	r2,r2,1360
8110031c:	e0bffb15 	stw	r2,-20(fp)
    break;
81100320:	00000606 	br	8110033c <DDR2_EEPROM_TEST+0xa4>
    default:
      bSuccess = FALSE;
81100324:	e03ff915 	stw	zero,-28(fp)
	  printf("DR2 Memory ID not identified!! Aborting Test \n");
81100328:	01204534 	movhi	r4,33044
8110032c:	21247d04 	addi	r4,r4,-28172
81100330:	110fa600 	call	8110fa60 <puts>
      return bSuccess;
81100334:	e0bff917 	ldw	r2,-28(fp)
81100338:	00007d06 	br	81100530 <DDR2_EEPROM_TEST+0x298>
  }
  
  alt_u8 ControlAddr, Value;
  printf("DDR2 EEPROM Read Test\n");
8110033c:	01204534 	movhi	r4,33044
81100340:	21248904 	addi	r4,r4,-28124
81100344:	110fa600 	call	8110fa60 <puts>
  usleep(20*1000);
81100348:	01138804 	movi	r4,20000
8110034c:	11249c40 	call	811249c4 <usleep>
  for(i = 0; i < 256 && bSuccess; i++){
81100350:	e03ffc15 	stw	zero,-16(fp)
81100354:	00002006 	br	811003d8 <DDR2_EEPROM_TEST+0x140>
    ControlAddr = i;
81100358:	e0bffc17 	ldw	r2,-16(fp)
8110035c:	e0bffd45 	stb	r2,-11(fp)
    bSuccess = I2C_Read(I2cSclBase, I2cSdaBase, DeviceAddr, ControlAddr, &Value);
81100360:	e0bffd03 	ldbu	r2,-12(fp)
81100364:	10c03fcc 	andi	r3,r2,255
81100368:	18c0201c 	xori	r3,r3,128
8110036c:	18ffe004 	addi	r3,r3,-128
81100370:	e13ffd43 	ldbu	r4,-11(fp)
81100374:	e0bffe04 	addi	r2,fp,-8
81100378:	d8800015 	stw	r2,0(sp)
8110037c:	200f883a 	mov	r7,r4
81100380:	180d883a 	mov	r6,r3
81100384:	e17ffb17 	ldw	r5,-20(fp)
81100388:	e13ffa17 	ldw	r4,-24(fp)
8110038c:	11053640 	call	81105364 <I2C_Read>
81100390:	e0bff915 	stw	r2,-28(fp)
    if (bSuccess){
81100394:	e0bff917 	ldw	r2,-28(fp)
81100398:	10000926 	beq	r2,zero,811003c0 <DDR2_EEPROM_TEST+0x128>
      printf("EEPROM[%03d]=%02Xh\n", ControlAddr, Value);
8110039c:	e0bffd43 	ldbu	r2,-11(fp)
811003a0:	e0fffe03 	ldbu	r3,-8(fp)
811003a4:	18c03fcc 	andi	r3,r3,255
811003a8:	180d883a 	mov	r6,r3
811003ac:	100b883a 	mov	r5,r2
811003b0:	01204534 	movhi	r4,33044
811003b4:	21248f04 	addi	r4,r4,-28100
811003b8:	110f9340 	call	8110f934 <printf>
811003bc:	00000306 	br	811003cc <DDR2_EEPROM_TEST+0x134>
    }else{
      printf("Failed to read EEPROM\n");
811003c0:	01204534 	movhi	r4,33044
811003c4:	21249404 	addi	r4,r4,-28080
811003c8:	110fa600 	call	8110fa60 <puts>
  }
  
  alt_u8 ControlAddr, Value;
  printf("DDR2 EEPROM Read Test\n");
  usleep(20*1000);
  for(i = 0; i < 256 && bSuccess; i++){
811003cc:	e0bffc17 	ldw	r2,-16(fp)
811003d0:	10800044 	addi	r2,r2,1
811003d4:	e0bffc15 	stw	r2,-16(fp)
811003d8:	e0bffc17 	ldw	r2,-16(fp)
811003dc:	10804008 	cmpgei	r2,r2,256
811003e0:	1000021e 	bne	r2,zero,811003ec <DDR2_EEPROM_TEST+0x154>
811003e4:	e0bff917 	ldw	r2,-28(fp)
811003e8:	103fdb1e 	bne	r2,zero,81100358 <__reset+0xfb0e0358>
      printf("EEPROM[%03d]=%02Xh\n", ControlAddr, Value);
    }else{
      printf("Failed to read EEPROM\n");
    }
  }
  if (bSuccess){
811003ec:	e0bff917 	ldw	r2,-28(fp)
811003f0:	10000426 	beq	r2,zero,81100404 <DDR2_EEPROM_TEST+0x16c>
    printf("DDR2 EEPROM Read Test Completed\n\n");
811003f4:	01204534 	movhi	r4,33044
811003f8:	21249a04 	addi	r4,r4,-28056
811003fc:	110fa600 	call	8110fa60 <puts>
81100400:	00000306 	br	81100410 <DDR2_EEPROM_TEST+0x178>
  } else {
    printf("DDR2 EEPROM Read Test Failed\n\n");
81100404:	01204534 	movhi	r4,33044
81100408:	2124a304 	addi	r4,r4,-28020
8110040c:	110fa600 	call	8110fa60 <puts>
  }
  
  printf("DDR2 EEPROM Write Test\n");
81100410:	01204534 	movhi	r4,33044
81100414:	2124ab04 	addi	r4,r4,-27988
81100418:	110fa600 	call	8110fa60 <puts>
  alt_u8 WriteData = 0x12, TestAddr = 128;
8110041c:	00800484 	movi	r2,18
81100420:	e0bffd85 	stb	r2,-10(fp)
81100424:	00bfe004 	movi	r2,-128
81100428:	e0bffdc5 	stb	r2,-9(fp)
  alt_u8 ReadData;
  usleep(20*1000);
8110042c:	01138804 	movi	r4,20000
81100430:	11249c40 	call	811249c4 <usleep>
  bSuccess = I2C_Write(I2cSclBase, I2cSdaBase, DeviceAddr, TestAddr, WriteData);
81100434:	e0bffd03 	ldbu	r2,-12(fp)
81100438:	10c03fcc 	andi	r3,r2,255
8110043c:	18c0201c 	xori	r3,r3,128
81100440:	18ffe004 	addi	r3,r3,-128
81100444:	e13ffdc3 	ldbu	r4,-9(fp)
81100448:	e0bffd83 	ldbu	r2,-10(fp)
8110044c:	d8800015 	stw	r2,0(sp)
81100450:	200f883a 	mov	r7,r4
81100454:	180d883a 	mov	r6,r3
81100458:	e17ffb17 	ldw	r5,-20(fp)
8110045c:	e13ffa17 	ldw	r4,-24(fp)
81100460:	11052840 	call	81105284 <I2C_Write>
81100464:	e0bff915 	stw	r2,-28(fp)
  if (!bSuccess){
81100468:	e0bff917 	ldw	r2,-28(fp)
8110046c:	1000041e 	bne	r2,zero,81100480 <DDR2_EEPROM_TEST+0x1e8>
    printf("Failed to write EEPROM\n");            
81100470:	01204534 	movhi	r4,33044
81100474:	2124b104 	addi	r4,r4,-27964
81100478:	110fa600 	call	8110fa60 <puts>
8110047c:	00002006 	br	81100500 <DDR2_EEPROM_TEST+0x268>
  } else {
    bSuccess = I2C_Read(I2cSclBase, I2cSdaBase, DeviceAddr, TestAddr, &ReadData);
81100480:	e0bffd03 	ldbu	r2,-12(fp)
81100484:	10c03fcc 	andi	r3,r2,255
81100488:	18c0201c 	xori	r3,r3,128
8110048c:	18ffe004 	addi	r3,r3,-128
81100490:	e13ffdc3 	ldbu	r4,-9(fp)
81100494:	e0bffe44 	addi	r2,fp,-7
81100498:	d8800015 	stw	r2,0(sp)
8110049c:	200f883a 	mov	r7,r4
811004a0:	180d883a 	mov	r6,r3
811004a4:	e17ffb17 	ldw	r5,-20(fp)
811004a8:	e13ffa17 	ldw	r4,-24(fp)
811004ac:	11053640 	call	81105364 <I2C_Read>
811004b0:	e0bff915 	stw	r2,-28(fp)
    if (!bSuccess){
811004b4:	e0bff917 	ldw	r2,-28(fp)
811004b8:	1000041e 	bne	r2,zero,811004cc <DDR2_EEPROM_TEST+0x234>
      printf("Failed to read EEPROM for verify\n");            
811004bc:	01204534 	movhi	r4,33044
811004c0:	2124b704 	addi	r4,r4,-27940
811004c4:	110fa600 	call	8110fa60 <puts>
811004c8:	00000d06 	br	81100500 <DDR2_EEPROM_TEST+0x268>
    } else {
      if (ReadData != WriteData){
811004cc:	e0bffe43 	ldbu	r2,-7(fp)
811004d0:	10c03fcc 	andi	r3,r2,255
811004d4:	e0bffd83 	ldbu	r2,-10(fp)
811004d8:	18800926 	beq	r3,r2,81100500 <DDR2_EEPROM_TEST+0x268>
        bSuccess = FALSE;
811004dc:	e03ff915 	stw	zero,-28(fp)
        printf("Verify EEPROM write fail, ReadData=%02Xh, WriteData=%02Xh\n", ReadData, WriteData);
811004e0:	e0bffe43 	ldbu	r2,-7(fp)
811004e4:	10803fcc 	andi	r2,r2,255
811004e8:	e0fffd83 	ldbu	r3,-10(fp)
811004ec:	180d883a 	mov	r6,r3
811004f0:	100b883a 	mov	r5,r2
811004f4:	01204534 	movhi	r4,33044
811004f8:	2124c004 	addi	r4,r4,-27904
811004fc:	110f9340 	call	8110f934 <printf>
      }
    }
  }
  if (bSuccess){
81100500:	e0bff917 	ldw	r2,-28(fp)
81100504:	10000426 	beq	r2,zero,81100518 <DDR2_EEPROM_TEST+0x280>
    printf("DDR2 EEPROM Write Test Completed\n\n");
81100508:	01204534 	movhi	r4,33044
8110050c:	2124cf04 	addi	r4,r4,-27844
81100510:	110fa600 	call	8110fa60 <puts>
81100514:	00000306 	br	81100524 <DDR2_EEPROM_TEST+0x28c>
  } else {
    printf("DDR2 EEPROM Write Test Failed\n\n");
81100518:	01204534 	movhi	r4,33044
8110051c:	2124d804 	addi	r4,r4,-27808
81100520:	110fa600 	call	8110fa60 <puts>
  }
  printf("\n");
81100524:	01000284 	movi	r4,10
81100528:	110f9800 	call	8110f980 <putchar>

  return bSuccess;
8110052c:	e0bff917 	ldw	r2,-28(fp)
}
81100530:	e037883a 	mov	sp,fp
81100534:	dfc00117 	ldw	ra,4(sp)
81100538:	df000017 	ldw	fp,0(sp)
8110053c:	dec00204 	addi	sp,sp,8
81100540:	f800283a 	ret

81100544 <DDR2_EEPROM_DUMP>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool DDR2_EEPROM_DUMP(alt_u8 MemoryId){
81100544:	deffb704 	addi	sp,sp,-292
81100548:	de00012e 	bgeu	sp,et,81100550 <DDR2_EEPROM_DUMP+0xc>
8110054c:	003b68fa 	trap	3
81100550:	dfc04815 	stw	ra,288(sp)
81100554:	df004715 	stw	fp,284(sp)
81100558:	df004704 	addi	fp,sp,284
8110055c:	2005883a 	mov	r2,r4
81100560:	e0bfff05 	stb	r2,-4(fp)
 
  printf("===== DE4 DDR2 EEPROM Dump =====\n");
81100564:	01204534 	movhi	r4,33044
81100568:	2124e004 	addi	r4,r4,-27776
8110056c:	110fa600 	call	8110fa60 <puts>
  const alt_u8 DeviceAddr = DDR2_EEPROM_I2C_ADDRESS;
81100570:	00bfe804 	movi	r2,-96
81100574:	e0bfbd05 	stb	r2,-268(fp)
  bool bSuccess;
  alt_u32 I2cSclBase;
  alt_u32 I2cSdaBase;
  int i;
  
  bSuccess = TRUE;
81100578:	00800044 	movi	r2,1
8110057c:	e0bfbe15 	stw	r2,-264(fp)
  switch (MemoryId) {
81100580:	e0bfff03 	ldbu	r2,-4(fp)
81100584:	10c00060 	cmpeqi	r3,r2,1
81100588:	1800031e 	bne	r3,zero,81100598 <DDR2_EEPROM_DUMP+0x54>
8110058c:	108000a0 	cmpeqi	r2,r2,2
81100590:	1000081e 	bne	r2,zero,811005b4 <DDR2_EEPROM_DUMP+0x70>
81100594:	00000e06 	br	811005d0 <DDR2_EEPROM_DUMP+0x8c>
    case DDR2_M1_ID:
      I2cSclBase = DDR2_M1_EEPROM_I2C_SCL_BASE;
81100598:	00a00034 	movhi	r2,32768
8110059c:	10817404 	addi	r2,r2,1488
811005a0:	e0bfba15 	stw	r2,-280(fp)
      I2cSdaBase = DDR2_M1_EEPROM_I2C_SDA_BASE;
811005a4:	00a00034 	movhi	r2,32768
811005a8:	10817804 	addi	r2,r2,1504
811005ac:	e0bfbb15 	stw	r2,-276(fp)
    break;
811005b0:	00000d06 	br	811005e8 <DDR2_EEPROM_DUMP+0xa4>
    case DDR2_M2_ID:
      I2cSclBase = DDR2_M2_EEPROM_I2C_SCL_BASE;
811005b4:	00a00034 	movhi	r2,32768
811005b8:	10815004 	addi	r2,r2,1344
811005bc:	e0bfba15 	stw	r2,-280(fp)
      I2cSdaBase = DDR2_M2_EEPROM_I2C_SDA_BASE;      
811005c0:	00a00034 	movhi	r2,32768
811005c4:	10815404 	addi	r2,r2,1360
811005c8:	e0bfbb15 	stw	r2,-276(fp)
    break;
811005cc:	00000606 	br	811005e8 <DDR2_EEPROM_DUMP+0xa4>
    default:
      bSuccess = FALSE;
811005d0:	e03fbe15 	stw	zero,-264(fp)
	  printf("DR2 Memory ID not identified!! Aborting Dump \n");
811005d4:	01204534 	movhi	r4,33044
811005d8:	2124e904 	addi	r4,r4,-27740
811005dc:	110fa600 	call	8110fa60 <puts>
      return bSuccess;
811005e0:	e0bfbe17 	ldw	r2,-264(fp)
811005e4:	00012006 	br	81100a68 <DDR2_EEPROM_DUMP+0x524>
  }

  alt_u8 szData[256];
  bSuccess = I2C_MultipleRead(I2cSclBase, I2cSdaBase, DeviceAddr, szData, sizeof(szData));
811005e8:	e0bfbd03 	ldbu	r2,-268(fp)
811005ec:	10c03fcc 	andi	r3,r2,255
811005f0:	18c0201c 	xori	r3,r3,128
811005f4:	18ffe004 	addi	r3,r3,-128
811005f8:	e13fbf04 	addi	r4,fp,-260
811005fc:	00804004 	movi	r2,256
81100600:	d8800015 	stw	r2,0(sp)
81100604:	200f883a 	mov	r7,r4
81100608:	180d883a 	mov	r6,r3
8110060c:	e17fbb17 	ldw	r5,-276(fp)
81100610:	e13fba17 	ldw	r4,-280(fp)
81100614:	110546c0 	call	8110546c <I2C_MultipleRead>
81100618:	e0bfbe15 	stw	r2,-264(fp)
  if (bSuccess){
8110061c:	e0bfbe17 	ldw	r2,-264(fp)
81100620:	10010b26 	beq	r2,zero,81100a50 <DDR2_EEPROM_DUMP+0x50c>
    for(i = 0; i < 256 && bSuccess; i++){
81100624:	e03fbc15 	stw	zero,-272(fp)
81100628:	00010306 	br	81100a38 <DDR2_EEPROM_DUMP+0x4f4>
      printf("EEPROM[%03d]=%02Xh ", i, szData[i]);
8110062c:	e0ffbf04 	addi	r3,fp,-260
81100630:	e0bfbc17 	ldw	r2,-272(fp)
81100634:	1885883a 	add	r2,r3,r2
81100638:	10800003 	ldbu	r2,0(r2)
8110063c:	10803fcc 	andi	r2,r2,255
81100640:	100d883a 	mov	r6,r2
81100644:	e17fbc17 	ldw	r5,-272(fp)
81100648:	01204534 	movhi	r4,33044
8110064c:	2124f504 	addi	r4,r4,-27692
81100650:	110f9340 	call	8110f934 <printf>
      if (i == 0)
81100654:	e0bfbc17 	ldw	r2,-272(fp)
81100658:	1000041e 	bne	r2,zero,8110066c <DDR2_EEPROM_DUMP+0x128>
        printf("(Number of SPD Bytes Used)\n");
8110065c:	01204534 	movhi	r4,33044
81100660:	2124fa04 	addi	r4,r4,-27672
81100664:	110fa600 	call	8110fa60 <puts>
81100668:	0000f006 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 1)
8110066c:	e0bfbc17 	ldw	r2,-272(fp)
81100670:	10800058 	cmpnei	r2,r2,1
81100674:	1000041e 	bne	r2,zero,81100688 <DDR2_EEPROM_DUMP+0x144>
        printf("(Total Number of Bytes in SPD Device, Log2(N))\n");
81100678:	01204534 	movhi	r4,33044
8110067c:	21250104 	addi	r4,r4,-27644
81100680:	110fa600 	call	8110fa60 <puts>
81100684:	0000e906 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 2)
81100688:	e0bfbc17 	ldw	r2,-272(fp)
8110068c:	10800098 	cmpnei	r2,r2,2
81100690:	1000041e 	bne	r2,zero,811006a4 <DDR2_EEPROM_DUMP+0x160>
        printf("(Basic Memory Type[08h:DDR2])\n");
81100694:	01204534 	movhi	r4,33044
81100698:	21250d04 	addi	r4,r4,-27596
8110069c:	110fa600 	call	8110fa60 <puts>
811006a0:	0000e206 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 3)
811006a4:	e0bfbc17 	ldw	r2,-272(fp)
811006a8:	108000d8 	cmpnei	r2,r2,3
811006ac:	1000041e 	bne	r2,zero,811006c0 <DDR2_EEPROM_DUMP+0x17c>
        printf("(Number of Row Addresses on Assembly)\n");
811006b0:	01204534 	movhi	r4,33044
811006b4:	21251504 	addi	r4,r4,-27564
811006b8:	110fa600 	call	8110fa60 <puts>
811006bc:	0000db06 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 4)
811006c0:	e0bfbc17 	ldw	r2,-272(fp)
811006c4:	10800118 	cmpnei	r2,r2,4
811006c8:	1000041e 	bne	r2,zero,811006dc <DDR2_EEPROM_DUMP+0x198>
        printf("(Number of Column Addresses on Assembly)\n");
811006cc:	01204534 	movhi	r4,33044
811006d0:	21251f04 	addi	r4,r4,-27524
811006d4:	110fa600 	call	8110fa60 <puts>
811006d8:	0000d406 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 5)
811006dc:	e0bfbc17 	ldw	r2,-272(fp)
811006e0:	10800158 	cmpnei	r2,r2,5
811006e4:	1000041e 	bne	r2,zero,811006f8 <DDR2_EEPROM_DUMP+0x1b4>
        printf("(DIMM Height and Module Rank Number[b2b1b0+1])\n");
811006e8:	01204534 	movhi	r4,33044
811006ec:	21252a04 	addi	r4,r4,-27480
811006f0:	110fa600 	call	8110fa60 <puts>
811006f4:	0000cd06 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 6)
811006f8:	e0bfbc17 	ldw	r2,-272(fp)
811006fc:	10800198 	cmpnei	r2,r2,6
81100700:	1000041e 	bne	r2,zero,81100714 <DDR2_EEPROM_DUMP+0x1d0>
        printf("(Module Data Width)\n");
81100704:	01204534 	movhi	r4,33044
81100708:	21253604 	addi	r4,r4,-27432
8110070c:	110fa600 	call	8110fa60 <puts>
81100710:	0000c606 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 7)
81100714:	e0bfbc17 	ldw	r2,-272(fp)
81100718:	108001d8 	cmpnei	r2,r2,7
8110071c:	1000041e 	bne	r2,zero,81100730 <DDR2_EEPROM_DUMP+0x1ec>
        printf("(Module Data Width, Continued)\n");
81100720:	01204534 	movhi	r4,33044
81100724:	21253b04 	addi	r4,r4,-27412
81100728:	110fa600 	call	8110fa60 <puts>
8110072c:	0000bf06 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 16)
81100730:	e0bfbc17 	ldw	r2,-272(fp)
81100734:	10800418 	cmpnei	r2,r2,16
81100738:	1000041e 	bne	r2,zero,8110074c <DDR2_EEPROM_DUMP+0x208>
        printf("(Burst Lengths Supported[bitmap: x x x x 8 4 x x])\n");
8110073c:	01204534 	movhi	r4,33044
81100740:	21254304 	addi	r4,r4,-27380
81100744:	110fa600 	call	8110fa60 <puts>
81100748:	0000b806 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 13)
8110074c:	e0bfbc17 	ldw	r2,-272(fp)
81100750:	10800358 	cmpnei	r2,r2,13
81100754:	1000041e 	bne	r2,zero,81100768 <DDR2_EEPROM_DUMP+0x224>
        printf("(Primary SDRAM width)\n");
81100758:	01204534 	movhi	r4,33044
8110075c:	21255004 	addi	r4,r4,-27328
81100760:	110fa600 	call	8110fa60 <puts>
81100764:	0000b106 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 14)
81100768:	e0bfbc17 	ldw	r2,-272(fp)
8110076c:	10800398 	cmpnei	r2,r2,14
81100770:	1000041e 	bne	r2,zero,81100784 <DDR2_EEPROM_DUMP+0x240>
        printf("(ECC SDRAM width)\n");
81100774:	01204534 	movhi	r4,33044
81100778:	21255604 	addi	r4,r4,-27304
8110077c:	110fa600 	call	8110fa60 <puts>
81100780:	0000aa06 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 17)
81100784:	e0bfbc17 	ldw	r2,-272(fp)
81100788:	10800458 	cmpnei	r2,r2,17
8110078c:	1000041e 	bne	r2,zero,811007a0 <DDR2_EEPROM_DUMP+0x25c>
        printf("(Banks per SDRAM device)\n");
81100790:	01204534 	movhi	r4,33044
81100794:	21255b04 	addi	r4,r4,-27284
81100798:	110fa600 	call	8110fa60 <puts>
8110079c:	0000a306 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 18)
811007a0:	e0bfbc17 	ldw	r2,-272(fp)
811007a4:	10800498 	cmpnei	r2,r2,18
811007a8:	1000041e 	bne	r2,zero,811007bc <DDR2_EEPROM_DUMP+0x278>
        printf("(CAS lantencies supported[bitmap: x x 5 4 3 2 x x])\n");
811007ac:	01204534 	movhi	r4,33044
811007b0:	21256204 	addi	r4,r4,-27256
811007b4:	110fa600 	call	8110fa60 <puts>
811007b8:	00009c06 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 20)
811007bc:	e0bfbc17 	ldw	r2,-272(fp)
811007c0:	10800518 	cmpnei	r2,r2,20
811007c4:	1000041e 	bne	r2,zero,811007d8 <DDR2_EEPROM_DUMP+0x294>
        printf("(DIMM Type: x x Mini-UDIMM Mini-RDIMM Micro-DIMM SO-DIMM UDIMMM RDIMM)\n");
811007c8:	01204534 	movhi	r4,33044
811007cc:	21256f04 	addi	r4,r4,-27204
811007d0:	110fa600 	call	8110fa60 <puts>
811007d4:	00009506 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 22)
811007d8:	e0bfbc17 	ldw	r2,-272(fp)
811007dc:	10800598 	cmpnei	r2,r2,22
811007e0:	1000041e 	bne	r2,zero,811007f4 <DDR2_EEPROM_DUMP+0x2b0>
        printf("(Memory Chip feature bitmap)\n");
811007e4:	01204534 	movhi	r4,33044
811007e8:	21258104 	addi	r4,r4,-27132
811007ec:	110fa600 	call	8110fa60 <puts>
811007f0:	00008e06 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 27)
811007f4:	e0bfbc17 	ldw	r2,-272(fp)
811007f8:	108006d8 	cmpnei	r2,r2,27
811007fc:	1000041e 	bne	r2,zero,81100810 <DDR2_EEPROM_DUMP+0x2cc>
        printf("(Minimun row precharge time[tRP;nsx4])\n");
81100800:	01204534 	movhi	r4,33044
81100804:	21258904 	addi	r4,r4,-27100
81100808:	110fa600 	call	8110fa60 <puts>
8110080c:	00008706 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 28)
81100810:	e0bfbc17 	ldw	r2,-272(fp)
81100814:	10800718 	cmpnei	r2,r2,28
81100818:	1000041e 	bne	r2,zero,8110082c <DDR2_EEPROM_DUMP+0x2e8>
        printf("(Minimun row active-row activce delay[tRRD;nsx4])\n");
8110081c:	01204534 	movhi	r4,33044
81100820:	21259304 	addi	r4,r4,-27060
81100824:	110fa600 	call	8110fa60 <puts>
81100828:	00008006 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 29)
8110082c:	e0bfbc17 	ldw	r2,-272(fp)
81100830:	10800758 	cmpnei	r2,r2,29
81100834:	1000041e 	bne	r2,zero,81100848 <DDR2_EEPROM_DUMP+0x304>
        printf("(Minimun RAS to CAS delay[tRCD;nsx4])\n");
81100838:	01204534 	movhi	r4,33044
8110083c:	2125a004 	addi	r4,r4,-27008
81100840:	110fa600 	call	8110fa60 <puts>
81100844:	00007906 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 30)
81100848:	e0bfbc17 	ldw	r2,-272(fp)
8110084c:	10800798 	cmpnei	r2,r2,30
81100850:	1000041e 	bne	r2,zero,81100864 <DDR2_EEPROM_DUMP+0x320>
        printf("(Minimun acive to precharge time[tRAS;ns])\n");
81100854:	01204534 	movhi	r4,33044
81100858:	2125aa04 	addi	r4,r4,-26968
8110085c:	110fa600 	call	8110fa60 <puts>
81100860:	00007206 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 31)
81100864:	e0bfbc17 	ldw	r2,-272(fp)
81100868:	108007d8 	cmpnei	r2,r2,31
8110086c:	1000041e 	bne	r2,zero,81100880 <DDR2_EEPROM_DUMP+0x33c>
        printf("(Size of each rank[bitmap:512MB,256MB,128MB,16GB,8GB,4GB,2GB,1GB)\n");
81100870:	01204534 	movhi	r4,33044
81100874:	2125b504 	addi	r4,r4,-26924
81100878:	110fa600 	call	8110fa60 <puts>
8110087c:	00006b06 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 36)
81100880:	e0bfbc17 	ldw	r2,-272(fp)
81100884:	10800918 	cmpnei	r2,r2,36
81100888:	1000041e 	bne	r2,zero,8110089c <DDR2_EEPROM_DUMP+0x358>
        printf("(Minimun write receovery time[tWR;nsx4])\n");
8110088c:	01204534 	movhi	r4,33044
81100890:	2125c604 	addi	r4,r4,-26856
81100894:	110fa600 	call	8110fa60 <puts>
81100898:	00006406 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 37)
8110089c:	e0bfbc17 	ldw	r2,-272(fp)
811008a0:	10800958 	cmpnei	r2,r2,37
811008a4:	1000041e 	bne	r2,zero,811008b8 <DDR2_EEPROM_DUMP+0x374>
        printf("(Internal write to read command delay[tWTR;nsx4])\n");
811008a8:	01204534 	movhi	r4,33044
811008ac:	2125d104 	addi	r4,r4,-26812
811008b0:	110fa600 	call	8110fa60 <puts>
811008b4:	00005d06 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 38)
811008b8:	e0bfbc17 	ldw	r2,-272(fp)
811008bc:	10800998 	cmpnei	r2,r2,38
811008c0:	1000041e 	bne	r2,zero,811008d4 <DDR2_EEPROM_DUMP+0x390>
        printf("(Internal read to precharge command delay[tRTP;nsx4])\n");
811008c4:	01204534 	movhi	r4,33044
811008c8:	2125de04 	addi	r4,r4,-26760
811008cc:	110fa600 	call	8110fa60 <puts>
811008d0:	00005606 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 41)
811008d4:	e0bfbc17 	ldw	r2,-272(fp)
811008d8:	10800a58 	cmpnei	r2,r2,41
811008dc:	1000041e 	bne	r2,zero,811008f0 <DDR2_EEPROM_DUMP+0x3ac>
        printf("(Minimun activce to active/refresh time[tRC;ns])\n");
811008e0:	01204534 	movhi	r4,33044
811008e4:	2125ec04 	addi	r4,r4,-26704
811008e8:	110fa600 	call	8110fa60 <puts>
811008ec:	00004f06 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 42)
811008f0:	e0bfbc17 	ldw	r2,-272(fp)
811008f4:	10800a98 	cmpnei	r2,r2,42
811008f8:	1000041e 	bne	r2,zero,8110090c <DDR2_EEPROM_DUMP+0x3c8>
        printf("(Minimun refresh to active/refresh time[tRFC;ns])\n");
811008fc:	01204534 	movhi	r4,33044
81100900:	2125f904 	addi	r4,r4,-26652
81100904:	110fa600 	call	8110fa60 <puts>
81100908:	00004806 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 62)
8110090c:	e0bfbc17 	ldw	r2,-272(fp)
81100910:	10800f98 	cmpnei	r2,r2,62
81100914:	1000041e 	bne	r2,zero,81100928 <DDR2_EEPROM_DUMP+0x3e4>
        printf("(SPD Revision)\n");
81100918:	01204534 	movhi	r4,33044
8110091c:	21260604 	addi	r4,r4,-26600
81100920:	110fa600 	call	8110fa60 <puts>
81100924:	00004106 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 63)
81100928:	e0bfbc17 	ldw	r2,-272(fp)
8110092c:	10800fd8 	cmpnei	r2,r2,63
81100930:	1000041e 	bne	r2,zero,81100944 <DDR2_EEPROM_DUMP+0x400>
        printf("(Checksum)\n");
81100934:	01204534 	movhi	r4,33044
81100938:	21260a04 	addi	r4,r4,-26584
8110093c:	110fa600 	call	8110fa60 <puts>
81100940:	00003a06 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 64)
81100944:	e0bfbc17 	ldw	r2,-272(fp)
81100948:	10801018 	cmpnei	r2,r2,64
8110094c:	1000041e 	bne	r2,zero,81100960 <DDR2_EEPROM_DUMP+0x41c>
        printf("(64~71: Manufacturer JEDEC ID)\n");
81100950:	01204534 	movhi	r4,33044
81100954:	21260d04 	addi	r4,r4,-26572
81100958:	110fa600 	call	8110fa60 <puts>
8110095c:	00003306 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 72)
81100960:	e0bfbc17 	ldw	r2,-272(fp)
81100964:	10801218 	cmpnei	r2,r2,72
81100968:	1000041e 	bne	r2,zero,8110097c <DDR2_EEPROM_DUMP+0x438>
        printf("(Module manufacturing location[Vendor-specific code])\n");
8110096c:	01204534 	movhi	r4,33044
81100970:	21261504 	addi	r4,r4,-26540
81100974:	110fa600 	call	8110fa60 <puts>
81100978:	00002c06 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 73)
8110097c:	e0bfbc17 	ldw	r2,-272(fp)
81100980:	10801258 	cmpnei	r2,r2,73
81100984:	1000041e 	bne	r2,zero,81100998 <DDR2_EEPROM_DUMP+0x454>
        printf("(73~90: Moduloe part number)\n");
81100988:	01204534 	movhi	r4,33044
8110098c:	21262304 	addi	r4,r4,-26484
81100990:	110fa600 	call	8110fa60 <puts>
81100994:	00002506 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 91)
81100998:	e0bfbc17 	ldw	r2,-272(fp)
8110099c:	108016d8 	cmpnei	r2,r2,91
811009a0:	1000041e 	bne	r2,zero,811009b4 <DDR2_EEPROM_DUMP+0x470>
        printf("(91~92: Moduloe revision code)\n");
811009a4:	01204534 	movhi	r4,33044
811009a8:	21262b04 	addi	r4,r4,-26452
811009ac:	110fa600 	call	8110fa60 <puts>
811009b0:	00001e06 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 93)
811009b4:	e0bfbc17 	ldw	r2,-272(fp)
811009b8:	10801758 	cmpnei	r2,r2,93
811009bc:	1000041e 	bne	r2,zero,811009d0 <DDR2_EEPROM_DUMP+0x48c>
        printf("(Manufacture Years since 2000[0-255])\n");
811009c0:	01204534 	movhi	r4,33044
811009c4:	21263304 	addi	r4,r4,-26420
811009c8:	110fa600 	call	8110fa60 <puts>
811009cc:	00001706 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 94)
811009d0:	e0bfbc17 	ldw	r2,-272(fp)
811009d4:	10801798 	cmpnei	r2,r2,94
811009d8:	1000041e 	bne	r2,zero,811009ec <DDR2_EEPROM_DUMP+0x4a8>
        printf("(Manufacture Weeks[1-52])\n");
811009dc:	01204534 	movhi	r4,33044
811009e0:	21263d04 	addi	r4,r4,-26380
811009e4:	110fa600 	call	8110fa60 <puts>
811009e8:	00001006 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 95)
811009ec:	e0bfbc17 	ldw	r2,-272(fp)
811009f0:	108017d8 	cmpnei	r2,r2,95
811009f4:	1000041e 	bne	r2,zero,81100a08 <DDR2_EEPROM_DUMP+0x4c4>
        printf("(95~98[4-bytes]: Module serial number)\n");
811009f8:	01204534 	movhi	r4,33044
811009fc:	21264404 	addi	r4,r4,-26352
81100a00:	110fa600 	call	8110fa60 <puts>
81100a04:	00000906 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 99)
81100a08:	e0bfbc17 	ldw	r2,-272(fp)
81100a0c:	108018d8 	cmpnei	r2,r2,99
81100a10:	1000041e 	bne	r2,zero,81100a24 <DDR2_EEPROM_DUMP+0x4e0>
        printf("(99~128: Manufacturer-specific data)\n");
81100a14:	01204534 	movhi	r4,33044
81100a18:	21264e04 	addi	r4,r4,-26312
81100a1c:	110fa600 	call	8110fa60 <puts>
81100a20:	00000206 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else
        printf("\n");
81100a24:	01000284 	movi	r4,10
81100a28:	110f9800 	call	8110f980 <putchar>
  }

  alt_u8 szData[256];
  bSuccess = I2C_MultipleRead(I2cSclBase, I2cSdaBase, DeviceAddr, szData, sizeof(szData));
  if (bSuccess){
    for(i = 0; i < 256 && bSuccess; i++){
81100a2c:	e0bfbc17 	ldw	r2,-272(fp)
81100a30:	10800044 	addi	r2,r2,1
81100a34:	e0bfbc15 	stw	r2,-272(fp)
81100a38:	e0bfbc17 	ldw	r2,-272(fp)
81100a3c:	10804008 	cmpgei	r2,r2,256
81100a40:	1000061e 	bne	r2,zero,81100a5c <DDR2_EEPROM_DUMP+0x518>
81100a44:	e0bfbe17 	ldw	r2,-264(fp)
81100a48:	103ef81e 	bne	r2,zero,8110062c <__reset+0xfb0e062c>
81100a4c:	00000306 	br	81100a5c <DDR2_EEPROM_DUMP+0x518>
        printf("(99~128: Manufacturer-specific data)\n");
      else
        printf("\n");
    }
  } else {
    printf("Failed to dump EEPROM\n"); 
81100a50:	01204534 	movhi	r4,33044
81100a54:	21265804 	addi	r4,r4,-26272
81100a58:	110fa600 	call	8110fa60 <puts>
  }
  printf("\n");
81100a5c:	01000284 	movi	r4,10
81100a60:	110f9800 	call	8110f980 <putchar>

  return bSuccess;  
81100a64:	e0bfbe17 	ldw	r2,-264(fp)
}
81100a68:	e037883a 	mov	sp,fp
81100a6c:	dfc00117 	ldw	ra,4(sp)
81100a70:	df000017 	ldw	fp,0(sp)
81100a74:	dec00204 	addi	sp,sp,8
81100a78:	f800283a 	ret

81100a7c <DDR2_SWITCH_MEMORY>:

bool DDR2_SWITCH_MEMORY(alt_u8 MemoryId){
81100a7c:	defffb04 	addi	sp,sp,-20
81100a80:	de00012e 	bgeu	sp,et,81100a88 <DDR2_SWITCH_MEMORY+0xc>
81100a84:	003b68fa 	trap	3
81100a88:	dfc00415 	stw	ra,16(sp)
81100a8c:	df000315 	stw	fp,12(sp)
81100a90:	df000304 	addi	fp,sp,12
81100a94:	2005883a 	mov	r2,r4
81100a98:	e0bfff05 	stb	r2,-4(fp)

	bool bSuccess;
	alt_u32 *pDdr2MemAddr = DDR2_EXTENDED_ADDRESS_CONTROL_BASE;
81100a9c:	00a04834 	movhi	r2,33056
81100aa0:	10903204 	addi	r2,r2,16584
81100aa4:	e0bffe15 	stw	r2,-8(fp)

	  bSuccess = TRUE;
81100aa8:	00800044 	movi	r2,1
81100aac:	e0bffd15 	stw	r2,-12(fp)
	  switch (MemoryId) {
81100ab0:	e0bfff03 	ldbu	r2,-4(fp)
81100ab4:	10c00060 	cmpeqi	r3,r2,1
81100ab8:	1800031e 	bne	r3,zero,81100ac8 <DDR2_SWITCH_MEMORY+0x4c>
81100abc:	108000a0 	cmpeqi	r2,r2,2
81100ac0:	1000041e 	bne	r2,zero,81100ad4 <DDR2_SWITCH_MEMORY+0x58>
81100ac4:	00000706 	br	81100ae4 <DDR2_SWITCH_MEMORY+0x68>
	    case DDR2_M1_ID:
	  	  *(pDdr2MemAddr) = (alt_u32) DDR2_M1_MEMORY_WINDOWED_OFFSET;
81100ac8:	e0bffe17 	ldw	r2,-8(fp)
81100acc:	10000015 	stw	zero,0(r2)
	    break;
81100ad0:	00000806 	br	81100af4 <DDR2_SWITCH_MEMORY+0x78>
	    case DDR2_M2_ID:
		  *(pDdr2MemAddr) = (alt_u32) DDR2_M2_MEMORY_WINDOWED_OFFSET;
81100ad4:	e0bffe17 	ldw	r2,-8(fp)
81100ad8:	00e00034 	movhi	r3,32768
81100adc:	10c00015 	stw	r3,0(r2)
	    break;
81100ae0:	00000406 	br	81100af4 <DDR2_SWITCH_MEMORY+0x78>
	    default:
	      bSuccess = FALSE;
81100ae4:	e03ffd15 	stw	zero,-12(fp)
		  printf("DR2 Memory ID not identified!! Error switching memories!! \n");
81100ae8:	01204534 	movhi	r4,33044
81100aec:	21265e04 	addi	r4,r4,-26248
81100af0:	110fa600 	call	8110fa60 <puts>
	  }

	  return bSuccess;
81100af4:	e0bffd17 	ldw	r2,-12(fp)
}
81100af8:	e037883a 	mov	sp,fp
81100afc:	dfc00117 	ldw	ra,4(sp)
81100b00:	df000017 	ldw	fp,0(sp)
81100b04:	dec00204 	addi	sp,sp,8
81100b08:	f800283a 	ret

81100b0c <DDR2_MEMORY_WRITE_TEST>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool DDR2_MEMORY_WRITE_TEST(alt_u8 MemoryId){
81100b0c:	deffe304 	addi	sp,sp,-116
81100b10:	de00012e 	bgeu	sp,et,81100b18 <DDR2_MEMORY_WRITE_TEST+0xc>
81100b14:	003b68fa 	trap	3
81100b18:	dfc01c15 	stw	ra,112(sp)
81100b1c:	df001b15 	stw	fp,108(sp)
81100b20:	dc401a15 	stw	r17,104(sp)
81100b24:	dc001915 	stw	r16,100(sp)
81100b28:	df001b04 	addi	fp,sp,108
81100b2c:	2005883a 	mov	r2,r4
81100b30:	e0bffd05 	stb	r2,-12(fp)

  printf("===== DE4 DDR2 Memory Write Test =====\n");
81100b34:	01204534 	movhi	r4,33044
81100b38:	21266d04 	addi	r4,r4,-26188
81100b3c:	110fa600 	call	8110fa60 <puts>
  bool bSuccess;
  alt_u32 Ddr2Base;
  alt_u32 ByteLen;
  
  bSuccess = TRUE;
81100b40:	00800044 	movi	r2,1
81100b44:	e0bfed15 	stw	r2,-76(fp)
  switch (MemoryId) {
81100b48:	e0bffd03 	ldbu	r2,-12(fp)
81100b4c:	10c00060 	cmpeqi	r3,r2,1
81100b50:	1800031e 	bne	r3,zero,81100b60 <DDR2_MEMORY_WRITE_TEST+0x54>
81100b54:	108000a0 	cmpeqi	r2,r2,2
81100b58:	1000081e 	bne	r2,zero,81100b7c <DDR2_MEMORY_WRITE_TEST+0x70>
81100b5c:	00000e06 	br	81100b98 <DDR2_MEMORY_WRITE_TEST+0x8c>
    case DDR2_M1_ID:
      DDR2_SWITCH_MEMORY(MemoryId);
81100b60:	e0bffd03 	ldbu	r2,-12(fp)
81100b64:	1009883a 	mov	r4,r2
81100b68:	1100a7c0 	call	81100a7c <DDR2_SWITCH_MEMORY>
      Ddr2Base = DDR2_EXTENDED_ADDRESS_WINDOWED_BASE;
81100b6c:	e03fe515 	stw	zero,-108(fp)
      ByteLen = DDR2_M1_MEMORY_SIZE;
81100b70:	00a00034 	movhi	r2,32768
81100b74:	e0bfe615 	stw	r2,-104(fp)
    break;
81100b78:	00000d06 	br	81100bb0 <DDR2_MEMORY_WRITE_TEST+0xa4>
    case DDR2_M2_ID:
      DDR2_SWITCH_MEMORY(MemoryId);
81100b7c:	e0bffd03 	ldbu	r2,-12(fp)
81100b80:	1009883a 	mov	r4,r2
81100b84:	1100a7c0 	call	81100a7c <DDR2_SWITCH_MEMORY>
      Ddr2Base = DDR2_EXTENDED_ADDRESS_WINDOWED_BASE;
81100b88:	e03fe515 	stw	zero,-108(fp)
      ByteLen = DDR2_M2_MEMORY_SIZE;
81100b8c:	00a00034 	movhi	r2,32768
81100b90:	e0bfe615 	stw	r2,-104(fp)
    break;
81100b94:	00000606 	br	81100bb0 <DDR2_MEMORY_WRITE_TEST+0xa4>
    default:
      bSuccess = FALSE;
81100b98:	e03fed15 	stw	zero,-76(fp)
	  printf("DR2 Memory ID not identified!! Aborting Test \n");
81100b9c:	01204534 	movhi	r4,33044
81100ba0:	21247d04 	addi	r4,r4,-28172
81100ba4:	110fa600 	call	8110fa60 <puts>
      return bSuccess;
81100ba8:	e0bfed17 	ldw	r2,-76(fp)
81100bac:	0000db06 	br	81100f1c <DDR2_MEMORY_WRITE_TEST+0x410>
  }
  
  printf("DDR2 Size: %d MBytes\n", ByteLen/1024/1024);
81100bb0:	e0bfe617 	ldw	r2,-104(fp)
81100bb4:	1004d53a 	srli	r2,r2,20
81100bb8:	100b883a 	mov	r5,r2
81100bbc:	01204534 	movhi	r4,33044
81100bc0:	21267704 	addi	r4,r4,-26148
81100bc4:	110f9340 	call	8110f934 <printf>

  int i, nRemainedLen, nAccessLen;
  my_data *pDes;
  
  int nItemNum, nPos;
  const int my_data_size = sizeof(my_data);
81100bc8:	00800104 	movi	r2,4
81100bcc:	e0bfee15 	stw	r2,-72(fp)
  int nProgressIndex = 0;
81100bd0:	e03fec15 	stw	zero,-80(fp)
  alt_u32 InitValue;
  alt_u32 szProgress[10];
  int TimeStart, TimeElapsed = 0;
81100bd4:	e03fef15 	stw	zero,-68(fp)
  
  for(i = 0; i < 10; i++){
81100bd8:	e03fe715 	stw	zero,-100(fp)
81100bdc:	00001506 	br	81100c34 <DDR2_MEMORY_WRITE_TEST+0x128>
    szProgress[i] = ByteLen/10*(i+1);
81100be0:	e0ffe617 	ldw	r3,-104(fp)
81100be4:	00b33374 	movhi	r2,52429
81100be8:	10b33344 	addi	r2,r2,-13107
81100bec:	1888383a 	mulxuu	r4,r3,r2
81100bf0:	1885383a 	mul	r2,r3,r2
81100bf4:	1021883a 	mov	r16,r2
81100bf8:	2023883a 	mov	r17,r4
81100bfc:	8804d0fa 	srli	r2,r17,3
81100c00:	e0ffe717 	ldw	r3,-100(fp)
81100c04:	18c00044 	addi	r3,r3,1
81100c08:	10c7383a 	mul	r3,r2,r3
81100c0c:	e0bfe717 	ldw	r2,-100(fp)
81100c10:	1085883a 	add	r2,r2,r2
81100c14:	1085883a 	add	r2,r2,r2
81100c18:	e13fe504 	addi	r4,fp,-108
81100c1c:	2085883a 	add	r2,r4,r2
81100c20:	10800e04 	addi	r2,r2,56
81100c24:	10c00015 	stw	r3,0(r2)
  int nProgressIndex = 0;
  alt_u32 InitValue;
  alt_u32 szProgress[10];
  int TimeStart, TimeElapsed = 0;
  
  for(i = 0; i < 10; i++){
81100c28:	e0bfe717 	ldw	r2,-100(fp)
81100c2c:	10800044 	addi	r2,r2,1
81100c30:	e0bfe715 	stw	r2,-100(fp)
81100c34:	e0bfe717 	ldw	r2,-100(fp)
81100c38:	10800290 	cmplti	r2,r2,10
81100c3c:	103fe81e 	bne	r2,zero,81100be0 <__reset+0xfb0e0be0>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81100c40:	d0a07717 	ldw	r2,-32292(gp)
    szProgress[i] = ByteLen/10*(i+1);
  }
  InitValue = alt_nticks();
81100c44:	e0bff015 	stw	r2,-64(fp)
  nItemNum = sizeof(szData)/sizeof(szData[0]);
81100c48:	00804004 	movi	r2,256
81100c4c:	e0bfea15 	stw	r2,-88(fp)
  for(i = 0; i < nItemNum; i++){
81100c50:	e03fe715 	stw	zero,-100(fp)
81100c54:	00001e06 	br	81100cd0 <DDR2_MEMORY_WRITE_TEST+0x1c4>
    if (i == 0) {
81100c58:	e0bfe717 	ldw	r2,-100(fp)
81100c5c:	1000091e 	bne	r2,zero,81100c84 <DDR2_MEMORY_WRITE_TEST+0x178>
      szData[i] = InitValue;
81100c60:	00a04534 	movhi	r2,33044
81100c64:	10b7ff04 	addi	r2,r2,-8196
81100c68:	e0ffe717 	ldw	r3,-100(fp)
81100c6c:	18c7883a 	add	r3,r3,r3
81100c70:	18c7883a 	add	r3,r3,r3
81100c74:	10c5883a 	add	r2,r2,r3
81100c78:	e0fff017 	ldw	r3,-64(fp)
81100c7c:	10c00015 	stw	r3,0(r2)
81100c80:	00001006 	br	81100cc4 <DDR2_MEMORY_WRITE_TEST+0x1b8>
    } else {
      szData[i] = szData[i-1] * 13;
81100c84:	e0bfe717 	ldw	r2,-100(fp)
81100c88:	10ffffc4 	addi	r3,r2,-1
81100c8c:	00a04534 	movhi	r2,33044
81100c90:	10b7ff04 	addi	r2,r2,-8196
81100c94:	18c7883a 	add	r3,r3,r3
81100c98:	18c7883a 	add	r3,r3,r3
81100c9c:	10c5883a 	add	r2,r2,r3
81100ca0:	10800017 	ldw	r2,0(r2)
81100ca4:	11000364 	muli	r4,r2,13
81100ca8:	00a04534 	movhi	r2,33044
81100cac:	10b7ff04 	addi	r2,r2,-8196
81100cb0:	e0ffe717 	ldw	r3,-100(fp)
81100cb4:	18c7883a 	add	r3,r3,r3
81100cb8:	18c7883a 	add	r3,r3,r3
81100cbc:	10c5883a 	add	r2,r2,r3
81100cc0:	11000015 	stw	r4,0(r2)
  for(i = 0; i < 10; i++){
    szProgress[i] = ByteLen/10*(i+1);
  }
  InitValue = alt_nticks();
  nItemNum = sizeof(szData)/sizeof(szData[0]);
  for(i = 0; i < nItemNum; i++){
81100cc4:	e0bfe717 	ldw	r2,-100(fp)
81100cc8:	10800044 	addi	r2,r2,1
81100ccc:	e0bfe715 	stw	r2,-100(fp)
81100cd0:	e0ffe717 	ldw	r3,-100(fp)
81100cd4:	e0bfea17 	ldw	r2,-88(fp)
81100cd8:	18bfdf16 	blt	r3,r2,81100c58 <__reset+0xfb0e0c58>
      szData[i] = InitValue;
    } else {
      szData[i] = szData[i-1] * 13;
    }
  }
  szData[nItemNum-1] = 0xAAAAAAAA;
81100cdc:	e0bfea17 	ldw	r2,-88(fp)
81100ce0:	10ffffc4 	addi	r3,r2,-1
81100ce4:	00a04534 	movhi	r2,33044
81100ce8:	10b7ff04 	addi	r2,r2,-8196
81100cec:	18c7883a 	add	r3,r3,r3
81100cf0:	18c7883a 	add	r3,r3,r3
81100cf4:	10c7883a 	add	r3,r2,r3
81100cf8:	00aaaaf4 	movhi	r2,43691
81100cfc:	10aaaa84 	addi	r2,r2,-21846
81100d00:	18800015 	stw	r2,0(r3)
  szData[nItemNum-2] = 0x55555555;
81100d04:	e0bfea17 	ldw	r2,-88(fp)
81100d08:	10ffff84 	addi	r3,r2,-2
81100d0c:	00a04534 	movhi	r2,33044
81100d10:	10b7ff04 	addi	r2,r2,-8196
81100d14:	18c7883a 	add	r3,r3,r3
81100d18:	18c7883a 	add	r3,r3,r3
81100d1c:	10c7883a 	add	r3,r2,r3
81100d20:	00955574 	movhi	r2,21845
81100d24:	10955544 	addi	r2,r2,21845
81100d28:	18800015 	stw	r2,0(r3)
  szData[nItemNum-3] = 0x00000000;
81100d2c:	e0bfea17 	ldw	r2,-88(fp)
81100d30:	10ffff44 	addi	r3,r2,-3
81100d34:	00a04534 	movhi	r2,33044
81100d38:	10b7ff04 	addi	r2,r2,-8196
81100d3c:	18c7883a 	add	r3,r3,r3
81100d40:	18c7883a 	add	r3,r3,r3
81100d44:	10c5883a 	add	r2,r2,r3
81100d48:	10000015 	stw	zero,0(r2)
  szData[nItemNum-4] = 0xFFFFFFFF;
81100d4c:	e0bfea17 	ldw	r2,-88(fp)
81100d50:	10ffff04 	addi	r3,r2,-4
81100d54:	00a04534 	movhi	r2,33044
81100d58:	10b7ff04 	addi	r2,r2,-8196
81100d5c:	18c7883a 	add	r3,r3,r3
81100d60:	18c7883a 	add	r3,r3,r3
81100d64:	10c5883a 	add	r2,r2,r3
81100d68:	00ffffc4 	movi	r3,-1
81100d6c:	10c00015 	stw	r3,0(r2)

  printf("Writing data...\n");
81100d70:	01204534 	movhi	r4,33044
81100d74:	21267d04 	addi	r4,r4,-26124
81100d78:	110fa600 	call	8110fa60 <puts>
81100d7c:	d0a07717 	ldw	r2,-32292(gp)
  TimeStart = alt_nticks();
81100d80:	e0bff115 	stw	r2,-60(fp)
  pDes = (my_data *)Ddr2Base;
81100d84:	e0bfe517 	ldw	r2,-108(fp)
81100d88:	e0bfe915 	stw	r2,-92(fp)
  nAccessLen = sizeof(szData);
81100d8c:	00810004 	movi	r2,1024
81100d90:	e0bfe815 	stw	r2,-96(fp)
  nItemNum = nAccessLen / my_data_size;
81100d94:	e0ffe817 	ldw	r3,-96(fp)
81100d98:	e0bfee17 	ldw	r2,-72(fp)
81100d9c:	1885283a 	div	r2,r3,r2
81100da0:	e0bfea15 	stw	r2,-88(fp)
  nPos = 0;
81100da4:	e03feb15 	stw	zero,-84(fp)
  while(nPos < ByteLen){
81100da8:	00003306 	br	81100e78 <DDR2_MEMORY_WRITE_TEST+0x36c>
    nRemainedLen = ByteLen - nPos;
81100dac:	e0bfeb17 	ldw	r2,-84(fp)
81100db0:	e0ffe617 	ldw	r3,-104(fp)
81100db4:	1885c83a 	sub	r2,r3,r2
81100db8:	e0bff215 	stw	r2,-56(fp)
    if (nAccessLen > nRemainedLen){
81100dbc:	e0bfe817 	ldw	r2,-96(fp)
81100dc0:	e0fff217 	ldw	r3,-56(fp)
81100dc4:	1880060e 	bge	r3,r2,81100de0 <DDR2_MEMORY_WRITE_TEST+0x2d4>
      nAccessLen = nRemainedLen;
81100dc8:	e0bff217 	ldw	r2,-56(fp)
81100dcc:	e0bfe815 	stw	r2,-96(fp)
      nItemNum = nAccessLen / my_data_size;
81100dd0:	e0ffe817 	ldw	r3,-96(fp)
81100dd4:	e0bfee17 	ldw	r2,-72(fp)
81100dd8:	1885283a 	div	r2,r3,r2
81100ddc:	e0bfea15 	stw	r2,-88(fp)
    }
    memcpy(pDes, szData, nAccessLen);
81100de0:	e0bfe817 	ldw	r2,-96(fp)
81100de4:	100d883a 	mov	r6,r2
81100de8:	01604534 	movhi	r5,33044
81100dec:	2977ff04 	addi	r5,r5,-8196
81100df0:	e13fe917 	ldw	r4,-92(fp)
81100df4:	110f61c0 	call	8110f61c <memcpy>
    pDes += nItemNum;
81100df8:	e0bfea17 	ldw	r2,-88(fp)
81100dfc:	1085883a 	add	r2,r2,r2
81100e00:	1085883a 	add	r2,r2,r2
81100e04:	1007883a 	mov	r3,r2
81100e08:	e0bfe917 	ldw	r2,-92(fp)
81100e0c:	10c5883a 	add	r2,r2,r3
81100e10:	e0bfe915 	stw	r2,-92(fp)
    nPos += nAccessLen;
81100e14:	e0ffeb17 	ldw	r3,-84(fp)
81100e18:	e0bfe817 	ldw	r2,-96(fp)
81100e1c:	1885883a 	add	r2,r3,r2
81100e20:	e0bfeb15 	stw	r2,-84(fp)
    if (nProgressIndex <= 9 && nPos >= szProgress[nProgressIndex]){
81100e24:	e0bfec17 	ldw	r2,-80(fp)
81100e28:	10800288 	cmpgei	r2,r2,10
81100e2c:	1000121e 	bne	r2,zero,81100e78 <DDR2_MEMORY_WRITE_TEST+0x36c>
81100e30:	e0bfec17 	ldw	r2,-80(fp)
81100e34:	1085883a 	add	r2,r2,r2
81100e38:	1085883a 	add	r2,r2,r2
81100e3c:	e0ffe504 	addi	r3,fp,-108
81100e40:	1885883a 	add	r2,r3,r2
81100e44:	10800e04 	addi	r2,r2,56
81100e48:	10800017 	ldw	r2,0(r2)
81100e4c:	e0ffeb17 	ldw	r3,-84(fp)
81100e50:	18800936 	bltu	r3,r2,81100e78 <DDR2_MEMORY_WRITE_TEST+0x36c>
      nProgressIndex++;
81100e54:	e0bfec17 	ldw	r2,-80(fp)
81100e58:	10800044 	addi	r2,r2,1
81100e5c:	e0bfec15 	stw	r2,-80(fp)
      printf("%02d%% ", nProgressIndex*10);
81100e60:	e0bfec17 	ldw	r2,-80(fp)
81100e64:	108002a4 	muli	r2,r2,10
81100e68:	100b883a 	mov	r5,r2
81100e6c:	01204534 	movhi	r4,33044
81100e70:	21268104 	addi	r4,r4,-26108
81100e74:	110f9340 	call	8110f934 <printf>
  TimeStart = alt_nticks();
  pDes = (my_data *)Ddr2Base;
  nAccessLen = sizeof(szData);
  nItemNum = nAccessLen / my_data_size;
  nPos = 0;
  while(nPos < ByteLen){
81100e78:	e0ffeb17 	ldw	r3,-84(fp)
81100e7c:	e0bfe617 	ldw	r2,-104(fp)
81100e80:	18bfca36 	bltu	r3,r2,81100dac <__reset+0xfb0e0dac>
    if (nProgressIndex <= 9 && nPos >= szProgress[nProgressIndex]){
      nProgressIndex++;
      printf("%02d%% ", nProgressIndex*10);
    }
  }
  alt_dcache_flush_all();
81100e84:	1123ec80 	call	81123ec8 <alt_dcache_flush_all>
  printf("\n");
81100e88:	01000284 	movi	r4,10
81100e8c:	110f9800 	call	8110f980 <putchar>
81100e90:	d0e07717 	ldw	r3,-32292(gp)

  TimeElapsed = alt_nticks() - TimeStart;
81100e94:	e0bff117 	ldw	r2,-60(fp)
81100e98:	1885c83a 	sub	r2,r3,r2
81100e9c:	e0bfef15 	stw	r2,-68(fp)
  if (bSuccess){
81100ea0:	e0bfed17 	ldw	r2,-76(fp)
81100ea4:	10001726 	beq	r2,zero,81100f04 <DDR2_MEMORY_WRITE_TEST+0x3f8>
    printf("DDR2 write test pass, size=%d bytes, %.3f sec\n", ByteLen, (float)TimeElapsed/(float)alt_ticks_per_second());
81100ea8:	e13fef17 	ldw	r4,-68(fp)
81100eac:	110d8580 	call	8110d858 <__floatsisf>
81100eb0:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81100eb4:	d0a07617 	ldw	r2,-32296(gp)
81100eb8:	1009883a 	mov	r4,r2
81100ebc:	110d9840 	call	8110d984 <__floatunsisf>
81100ec0:	1007883a 	mov	r3,r2
81100ec4:	180b883a 	mov	r5,r3
81100ec8:	8009883a 	mov	r4,r16
81100ecc:	110d00c0 	call	8110d00c <__divsf3>
81100ed0:	1007883a 	mov	r3,r2
81100ed4:	1805883a 	mov	r2,r3
81100ed8:	1009883a 	mov	r4,r2
81100edc:	110e19c0 	call	8110e19c <__extendsfdf2>
81100ee0:	1009883a 	mov	r4,r2
81100ee4:	180b883a 	mov	r5,r3
81100ee8:	200d883a 	mov	r6,r4
81100eec:	280f883a 	mov	r7,r5
81100ef0:	e17fe617 	ldw	r5,-104(fp)
81100ef4:	01204534 	movhi	r4,33044
81100ef8:	21268304 	addi	r4,r4,-26100
81100efc:	110f9340 	call	8110f934 <printf>
81100f00:	00000306 	br	81100f10 <DDR2_MEMORY_WRITE_TEST+0x404>
  } else {
    printf("DDR2 write test fail\n");
81100f04:	01204534 	movhi	r4,33044
81100f08:	21268f04 	addi	r4,r4,-26052
81100f0c:	110fa600 	call	8110fa60 <puts>
  }
  printf("\n");
81100f10:	01000284 	movi	r4,10
81100f14:	110f9800 	call	8110f980 <putchar>

  return bSuccess;
81100f18:	e0bfed17 	ldw	r2,-76(fp)
}
81100f1c:	e6fffe04 	addi	sp,fp,-8
81100f20:	dfc00317 	ldw	ra,12(sp)
81100f24:	df000217 	ldw	fp,8(sp)
81100f28:	dc400117 	ldw	r17,4(sp)
81100f2c:	dc000017 	ldw	r16,0(sp)
81100f30:	dec00404 	addi	sp,sp,16
81100f34:	f800283a 	ret

81100f38 <DDR2_MEMORY_READ_TEST>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool DDR2_MEMORY_READ_TEST(alt_u8 MemoryId){
81100f38:	deffe304 	addi	sp,sp,-116
81100f3c:	de00012e 	bgeu	sp,et,81100f44 <DDR2_MEMORY_READ_TEST+0xc>
81100f40:	003b68fa 	trap	3
81100f44:	dfc01c15 	stw	ra,112(sp)
81100f48:	df001b15 	stw	fp,108(sp)
81100f4c:	dc401a15 	stw	r17,104(sp)
81100f50:	dc001915 	stw	r16,100(sp)
81100f54:	df001b04 	addi	fp,sp,108
81100f58:	2005883a 	mov	r2,r4
81100f5c:	e0bffd05 	stb	r2,-12(fp)

  printf("===== DE4 DDR2 Memory Read Test =====\n");
81100f60:	01204534 	movhi	r4,33044
81100f64:	21269504 	addi	r4,r4,-26028
81100f68:	110fa600 	call	8110fa60 <puts>
  bool bSuccess;
  alt_u32 Ddr2Base;
  alt_u32 ByteLen;
  
  bSuccess = TRUE;
81100f6c:	00800044 	movi	r2,1
81100f70:	e0bfe515 	stw	r2,-108(fp)
  switch (MemoryId) {
81100f74:	e0bffd03 	ldbu	r2,-12(fp)
81100f78:	10c00060 	cmpeqi	r3,r2,1
81100f7c:	1800031e 	bne	r3,zero,81100f8c <DDR2_MEMORY_READ_TEST+0x54>
81100f80:	108000a0 	cmpeqi	r2,r2,2
81100f84:	1000081e 	bne	r2,zero,81100fa8 <DDR2_MEMORY_READ_TEST+0x70>
81100f88:	00000e06 	br	81100fc4 <DDR2_MEMORY_READ_TEST+0x8c>
    case DDR2_M1_ID:
        DDR2_SWITCH_MEMORY(MemoryId);
81100f8c:	e0bffd03 	ldbu	r2,-12(fp)
81100f90:	1009883a 	mov	r4,r2
81100f94:	1100a7c0 	call	81100a7c <DDR2_SWITCH_MEMORY>
        Ddr2Base = DDR2_EXTENDED_ADDRESS_WINDOWED_BASE;
81100f98:	e03fe615 	stw	zero,-104(fp)
        ByteLen = DDR2_M1_MEMORY_SIZE;
81100f9c:	00a00034 	movhi	r2,32768
81100fa0:	e0bfe715 	stw	r2,-100(fp)
    break;
81100fa4:	00000d06 	br	81100fdc <DDR2_MEMORY_READ_TEST+0xa4>
    case DDR2_M2_ID:
        DDR2_SWITCH_MEMORY(MemoryId);
81100fa8:	e0bffd03 	ldbu	r2,-12(fp)
81100fac:	1009883a 	mov	r4,r2
81100fb0:	1100a7c0 	call	81100a7c <DDR2_SWITCH_MEMORY>
        Ddr2Base = DDR2_EXTENDED_ADDRESS_WINDOWED_BASE;
81100fb4:	e03fe615 	stw	zero,-104(fp)
        ByteLen = DDR2_M2_MEMORY_SIZE;
81100fb8:	00a00034 	movhi	r2,32768
81100fbc:	e0bfe715 	stw	r2,-100(fp)
    break;
81100fc0:	00000606 	br	81100fdc <DDR2_MEMORY_READ_TEST+0xa4>
    default:
      bSuccess = FALSE;
81100fc4:	e03fe515 	stw	zero,-108(fp)
	  printf("DR2 Memory ID not identified!! Aborting Test \n");
81100fc8:	01204534 	movhi	r4,33044
81100fcc:	21247d04 	addi	r4,r4,-28172
81100fd0:	110fa600 	call	8110fa60 <puts>
      return bSuccess;
81100fd4:	e0bfe517 	ldw	r2,-108(fp)
81100fd8:	0000b806 	br	811012bc <DDR2_MEMORY_READ_TEST+0x384>
  }
  
  printf("DDR2 Size: %d MBytes\n", ByteLen/1024/1024);
81100fdc:	e0bfe717 	ldw	r2,-100(fp)
81100fe0:	1004d53a 	srli	r2,r2,20
81100fe4:	100b883a 	mov	r5,r2
81100fe8:	01204534 	movhi	r4,33044
81100fec:	21267704 	addi	r4,r4,-26148
81100ff0:	110f9340 	call	8110f934 <printf>

  int i, nRemainedLen, nAccessLen;
  my_data *pDes, *pSrc;
  int nItemNum, nPos;
  nItemNum = sizeof(szData)/sizeof(szData[0]);
81100ff4:	00804004 	movi	r2,256
81100ff8:	e0bfec15 	stw	r2,-80(fp)
  const int my_data_size = sizeof(my_data);
81100ffc:	00800104 	movi	r2,4
81101000:	e0bfef15 	stw	r2,-68(fp)
  nAccessLen = nItemNum * my_data_size;
81101004:	e0ffec17 	ldw	r3,-80(fp)
81101008:	e0bfef17 	ldw	r2,-68(fp)
8110100c:	1885383a 	mul	r2,r3,r2
81101010:	e0bfe915 	stw	r2,-92(fp)
  int nProgressIndex = 0;
81101014:	e03fee15 	stw	zero,-72(fp)
  alt_u32 szProgress[10];
  int TimeStart, TimeElapsed = 0;
81101018:	e03ff015 	stw	zero,-64(fp)

  for(i=0;i<10;i++){
8110101c:	e03fe815 	stw	zero,-96(fp)
81101020:	00001506 	br	81101078 <DDR2_MEMORY_READ_TEST+0x140>
    szProgress[i] = ByteLen/10*(i+1);
81101024:	e0ffe717 	ldw	r3,-100(fp)
81101028:	00b33374 	movhi	r2,52429
8110102c:	10b33344 	addi	r2,r2,-13107
81101030:	1888383a 	mulxuu	r4,r3,r2
81101034:	1885383a 	mul	r2,r3,r2
81101038:	1021883a 	mov	r16,r2
8110103c:	2023883a 	mov	r17,r4
81101040:	8804d0fa 	srli	r2,r17,3
81101044:	e0ffe817 	ldw	r3,-96(fp)
81101048:	18c00044 	addi	r3,r3,1
8110104c:	10c7383a 	mul	r3,r2,r3
81101050:	e0bfe817 	ldw	r2,-96(fp)
81101054:	1085883a 	add	r2,r2,r2
81101058:	1085883a 	add	r2,r2,r2
8110105c:	e13fe504 	addi	r4,fp,-108
81101060:	2085883a 	add	r2,r4,r2
81101064:	10800e04 	addi	r2,r2,56
81101068:	10c00015 	stw	r3,0(r2)
  nAccessLen = nItemNum * my_data_size;
  int nProgressIndex = 0;
  alt_u32 szProgress[10];
  int TimeStart, TimeElapsed = 0;

  for(i=0;i<10;i++){
8110106c:	e0bfe817 	ldw	r2,-96(fp)
81101070:	10800044 	addi	r2,r2,1
81101074:	e0bfe815 	stw	r2,-96(fp)
81101078:	e0bfe817 	ldw	r2,-96(fp)
8110107c:	10800290 	cmplti	r2,r2,10
81101080:	103fe81e 	bne	r2,zero,81101024 <__reset+0xfb0e1024>
    szProgress[i] = ByteLen/10*(i+1);
  }

  nProgressIndex = 0;
81101084:	e03fee15 	stw	zero,-72(fp)
  printf("Reading/Verifying Data...\n");
81101088:	01204534 	movhi	r4,33044
8110108c:	21269f04 	addi	r4,r4,-25988
81101090:	110fa600 	call	8110fa60 <puts>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81101094:	d0a07717 	ldw	r2,-32292(gp)
  TimeStart = alt_nticks();
81101098:	e0bff115 	stw	r2,-60(fp)

  pSrc = (my_data *)Ddr2Base;
8110109c:	e0bfe617 	ldw	r2,-104(fp)
811010a0:	e0bfeb15 	stw	r2,-84(fp)
  nAccessLen = sizeof(szData);
811010a4:	00810004 	movi	r2,1024
811010a8:	e0bfe915 	stw	r2,-92(fp)
  nItemNum = nAccessLen / my_data_size;
811010ac:	e0ffe917 	ldw	r3,-92(fp)
811010b0:	e0bfef17 	ldw	r2,-68(fp)
811010b4:	1885283a 	div	r2,r3,r2
811010b8:	e0bfec15 	stw	r2,-80(fp)
  nPos = 0;
811010bc:	e03fed15 	stw	zero,-76(fp)
  while(bSuccess && nPos < ByteLen){
811010c0:	00005406 	br	81101214 <DDR2_MEMORY_READ_TEST+0x2dc>
    nRemainedLen = ByteLen - nPos;
811010c4:	e0bfed17 	ldw	r2,-76(fp)
811010c8:	e0ffe717 	ldw	r3,-100(fp)
811010cc:	1885c83a 	sub	r2,r3,r2
811010d0:	e0bff215 	stw	r2,-56(fp)
    if (nAccessLen > nRemainedLen){
811010d4:	e0bfe917 	ldw	r2,-92(fp)
811010d8:	e0fff217 	ldw	r3,-56(fp)
811010dc:	1880060e 	bge	r3,r2,811010f8 <DDR2_MEMORY_READ_TEST+0x1c0>
      nAccessLen = nRemainedLen;
811010e0:	e0bff217 	ldw	r2,-56(fp)
811010e4:	e0bfe915 	stw	r2,-92(fp)
      nItemNum = nAccessLen / my_data_size;
811010e8:	e0ffe917 	ldw	r3,-92(fp)
811010ec:	e0bfef17 	ldw	r2,-68(fp)
811010f0:	1885283a 	div	r2,r3,r2
811010f4:	e0bfec15 	stw	r2,-80(fp)
    }
    pDes = szData;
811010f8:	00a04534 	movhi	r2,33044
811010fc:	10b7ff04 	addi	r2,r2,-8196
81101100:	e0bfea15 	stw	r2,-88(fp)
    for(i=0 ; i < nItemNum && bSuccess; i++){
81101104:	e03fe815 	stw	zero,-96(fp)
81101108:	00002406 	br	8110119c <DDR2_MEMORY_READ_TEST+0x264>
      if (*pSrc++ != *pDes++){
8110110c:	e0bfeb17 	ldw	r2,-84(fp)
81101110:	10c00104 	addi	r3,r2,4
81101114:	e0ffeb15 	stw	r3,-84(fp)
81101118:	10c00017 	ldw	r3,0(r2)
8110111c:	e0bfea17 	ldw	r2,-88(fp)
81101120:	11000104 	addi	r4,r2,4
81101124:	e13fea15 	stw	r4,-88(fp)
81101128:	10800017 	ldw	r2,0(r2)
8110112c:	18801826 	beq	r3,r2,81101190 <DDR2_MEMORY_READ_TEST+0x258>
        printf("verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n", (int)*(pSrc-1), (int)szData[i], (nPos/my_data_size)+i);
81101130:	e0bfeb17 	ldw	r2,-84(fp)
81101134:	10bfff04 	addi	r2,r2,-4
81101138:	10800017 	ldw	r2,0(r2)
8110113c:	1009883a 	mov	r4,r2
81101140:	00a04534 	movhi	r2,33044
81101144:	10b7ff04 	addi	r2,r2,-8196
81101148:	e0ffe817 	ldw	r3,-96(fp)
8110114c:	18c7883a 	add	r3,r3,r3
81101150:	18c7883a 	add	r3,r3,r3
81101154:	10c5883a 	add	r2,r2,r3
81101158:	10800017 	ldw	r2,0(r2)
8110115c:	100b883a 	mov	r5,r2
81101160:	e0ffed17 	ldw	r3,-76(fp)
81101164:	e0bfef17 	ldw	r2,-68(fp)
81101168:	1887283a 	div	r3,r3,r2
8110116c:	e0bfe817 	ldw	r2,-96(fp)
81101170:	1885883a 	add	r2,r3,r2
81101174:	100f883a 	mov	r7,r2
81101178:	280d883a 	mov	r6,r5
8110117c:	200b883a 	mov	r5,r4
81101180:	01204534 	movhi	r4,33044
81101184:	2126a604 	addi	r4,r4,-25960
81101188:	110f9340 	call	8110f934 <printf>
        bSuccess = FALSE;
8110118c:	e03fe515 	stw	zero,-108(fp)
    if (nAccessLen > nRemainedLen){
      nAccessLen = nRemainedLen;
      nItemNum = nAccessLen / my_data_size;
    }
    pDes = szData;
    for(i=0 ; i < nItemNum && bSuccess; i++){
81101190:	e0bfe817 	ldw	r2,-96(fp)
81101194:	10800044 	addi	r2,r2,1
81101198:	e0bfe815 	stw	r2,-96(fp)
8110119c:	e0ffe817 	ldw	r3,-96(fp)
811011a0:	e0bfec17 	ldw	r2,-80(fp)
811011a4:	1880020e 	bge	r3,r2,811011b0 <DDR2_MEMORY_READ_TEST+0x278>
811011a8:	e0bfe517 	ldw	r2,-108(fp)
811011ac:	103fd71e 	bne	r2,zero,8110110c <__reset+0xfb0e110c>
      if (*pSrc++ != *pDes++){
        printf("verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n", (int)*(pSrc-1), (int)szData[i], (nPos/my_data_size)+i);
        bSuccess = FALSE;
      }
    }
    nPos += nAccessLen;
811011b0:	e0ffed17 	ldw	r3,-76(fp)
811011b4:	e0bfe917 	ldw	r2,-92(fp)
811011b8:	1885883a 	add	r2,r3,r2
811011bc:	e0bfed15 	stw	r2,-76(fp)
    if (nProgressIndex <= 9 && nPos >= szProgress[nProgressIndex]){
811011c0:	e0bfee17 	ldw	r2,-72(fp)
811011c4:	10800288 	cmpgei	r2,r2,10
811011c8:	1000121e 	bne	r2,zero,81101214 <DDR2_MEMORY_READ_TEST+0x2dc>
811011cc:	e0bfee17 	ldw	r2,-72(fp)
811011d0:	1085883a 	add	r2,r2,r2
811011d4:	1085883a 	add	r2,r2,r2
811011d8:	e0ffe504 	addi	r3,fp,-108
811011dc:	1885883a 	add	r2,r3,r2
811011e0:	10800e04 	addi	r2,r2,56
811011e4:	10800017 	ldw	r2,0(r2)
811011e8:	e0ffed17 	ldw	r3,-76(fp)
811011ec:	18800936 	bltu	r3,r2,81101214 <DDR2_MEMORY_READ_TEST+0x2dc>
      nProgressIndex++;
811011f0:	e0bfee17 	ldw	r2,-72(fp)
811011f4:	10800044 	addi	r2,r2,1
811011f8:	e0bfee15 	stw	r2,-72(fp)
      printf("%02d%% ", nProgressIndex*10);
811011fc:	e0bfee17 	ldw	r2,-72(fp)
81101200:	108002a4 	muli	r2,r2,10
81101204:	100b883a 	mov	r5,r2
81101208:	01204534 	movhi	r4,33044
8110120c:	21268104 	addi	r4,r4,-26108
81101210:	110f9340 	call	8110f934 <printf>

  pSrc = (my_data *)Ddr2Base;
  nAccessLen = sizeof(szData);
  nItemNum = nAccessLen / my_data_size;
  nPos = 0;
  while(bSuccess && nPos < ByteLen){
81101214:	e0bfe517 	ldw	r2,-108(fp)
81101218:	10000326 	beq	r2,zero,81101228 <DDR2_MEMORY_READ_TEST+0x2f0>
8110121c:	e0ffed17 	ldw	r3,-76(fp)
81101220:	e0bfe717 	ldw	r2,-100(fp)
81101224:	18bfa736 	bltu	r3,r2,811010c4 <__reset+0xfb0e10c4>
    if (nProgressIndex <= 9 && nPos >= szProgress[nProgressIndex]){
      nProgressIndex++;
      printf("%02d%% ", nProgressIndex*10);
    }
  }
  printf("\n");
81101228:	01000284 	movi	r4,10
8110122c:	110f9800 	call	8110f980 <putchar>
81101230:	d0e07717 	ldw	r3,-32292(gp)

  TimeElapsed = alt_nticks() - TimeStart;
81101234:	e0bff117 	ldw	r2,-60(fp)
81101238:	1885c83a 	sub	r2,r3,r2
8110123c:	e0bff015 	stw	r2,-64(fp)
  if (bSuccess){
81101240:	e0bfe517 	ldw	r2,-108(fp)
81101244:	10001726 	beq	r2,zero,811012a4 <DDR2_MEMORY_READ_TEST+0x36c>
    printf("DDR2 read test pass, size=%d bytes, %.3f sec\n", ByteLen, (float)TimeElapsed/(float)alt_ticks_per_second());
81101248:	e13ff017 	ldw	r4,-64(fp)
8110124c:	110d8580 	call	8110d858 <__floatsisf>
81101250:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81101254:	d0a07617 	ldw	r2,-32296(gp)
81101258:	1009883a 	mov	r4,r2
8110125c:	110d9840 	call	8110d984 <__floatunsisf>
81101260:	1007883a 	mov	r3,r2
81101264:	180b883a 	mov	r5,r3
81101268:	8009883a 	mov	r4,r16
8110126c:	110d00c0 	call	8110d00c <__divsf3>
81101270:	1007883a 	mov	r3,r2
81101274:	1805883a 	mov	r2,r3
81101278:	1009883a 	mov	r4,r2
8110127c:	110e19c0 	call	8110e19c <__extendsfdf2>
81101280:	1009883a 	mov	r4,r2
81101284:	180b883a 	mov	r5,r3
81101288:	200d883a 	mov	r6,r4
8110128c:	280f883a 	mov	r7,r5
81101290:	e17fe717 	ldw	r5,-100(fp)
81101294:	01204534 	movhi	r4,33044
81101298:	2126b404 	addi	r4,r4,-25904
8110129c:	110f9340 	call	8110f934 <printf>
811012a0:	00000306 	br	811012b0 <DDR2_MEMORY_READ_TEST+0x378>
  } else {
    printf("DDR2 read test fail\n");
811012a4:	01204534 	movhi	r4,33044
811012a8:	2126c004 	addi	r4,r4,-25856
811012ac:	110fa600 	call	8110fa60 <puts>
  }
  printf("\n");
811012b0:	01000284 	movi	r4,10
811012b4:	110f9800 	call	8110f980 <putchar>

  return bSuccess;
811012b8:	e0bfe517 	ldw	r2,-108(fp)
}
811012bc:	e6fffe04 	addi	sp,fp,-8
811012c0:	dfc00317 	ldw	ra,12(sp)
811012c4:	df000217 	ldw	fp,8(sp)
811012c8:	dc400117 	ldw	r17,4(sp)
811012cc:	dc000017 	ldw	r16,0(sp)
811012d0:	dec00404 	addi	sp,sp,16
811012d4:	f800283a 	ret

811012d8 <DDR2_MEMORY_RANDOM_WRITE_TEST>:
 * @param [in] bTime  Controla se a duração da função será medida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DDR2_MEMORY_RANDOM_WRITE_TEST(alt_u8 MemoryId, bool bVerbose, bool bTime){
811012d8:	deffed04 	addi	sp,sp,-76
811012dc:	de00012e 	bgeu	sp,et,811012e4 <DDR2_MEMORY_RANDOM_WRITE_TEST+0xc>
811012e0:	003b68fa 	trap	3
811012e4:	dfc01215 	stw	ra,72(sp)
811012e8:	df001115 	stw	fp,68(sp)
811012ec:	dcc01015 	stw	r19,64(sp)
811012f0:	dc800f15 	stw	r18,60(sp)
811012f4:	dc400e15 	stw	r17,56(sp)
811012f8:	dc000d15 	stw	r16,52(sp)
811012fc:	df001104 	addi	fp,sp,68
81101300:	2005883a 	mov	r2,r4
81101304:	e17ffa15 	stw	r5,-24(fp)
81101308:	e1bffb15 	stw	r6,-20(fp)
8110130c:	e0bff905 	stb	r2,-28(fp)

  printf("===== DE4 DDR2 Memory Random Write Test =====\n");
81101310:	01204534 	movhi	r4,33044
81101314:	2126c504 	addi	r4,r4,-25836
81101318:	110fa600 	call	8110fa60 <puts>
  bool bSuccess;
  alt_u32 Ddr2Base;
  alt_u32 ByteLen;
  
  bSuccess = TRUE;
8110131c:	00800044 	movi	r2,1
81101320:	e0bff415 	stw	r2,-48(fp)
  switch (MemoryId) {
81101324:	e0bff903 	ldbu	r2,-28(fp)
81101328:	10c00060 	cmpeqi	r3,r2,1
8110132c:	1800031e 	bne	r3,zero,8110133c <DDR2_MEMORY_RANDOM_WRITE_TEST+0x64>
81101330:	108000a0 	cmpeqi	r2,r2,2
81101334:	1000081e 	bne	r2,zero,81101358 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x80>
81101338:	00000e06 	br	81101374 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x9c>
    case DDR2_M1_ID:
        DDR2_SWITCH_MEMORY(MemoryId);
8110133c:	e0bff903 	ldbu	r2,-28(fp)
81101340:	1009883a 	mov	r4,r2
81101344:	1100a7c0 	call	81100a7c <DDR2_SWITCH_MEMORY>
        Ddr2Base = DDR2_EXTENDED_ADDRESS_WINDOWED_BASE;
81101348:	e03fef15 	stw	zero,-68(fp)
        ByteLen = DDR2_M1_MEMORY_SIZE;
8110134c:	00a00034 	movhi	r2,32768
81101350:	e0bff015 	stw	r2,-64(fp)
    break;
81101354:	00000d06 	br	8110138c <DDR2_MEMORY_RANDOM_WRITE_TEST+0xb4>
    case DDR2_M2_ID:
        DDR2_SWITCH_MEMORY(MemoryId);
81101358:	e0bff903 	ldbu	r2,-28(fp)
8110135c:	1009883a 	mov	r4,r2
81101360:	1100a7c0 	call	81100a7c <DDR2_SWITCH_MEMORY>
        Ddr2Base = DDR2_EXTENDED_ADDRESS_WINDOWED_BASE;
81101364:	e03fef15 	stw	zero,-68(fp)
        ByteLen = DDR2_M2_MEMORY_SIZE;
81101368:	00a00034 	movhi	r2,32768
8110136c:	e0bff015 	stw	r2,-64(fp)
    break;
81101370:	00000606 	br	8110138c <DDR2_MEMORY_RANDOM_WRITE_TEST+0xb4>
    default:
      bSuccess = FALSE;
81101374:	e03ff415 	stw	zero,-48(fp)
	  printf("DR2 Memory ID not identified!! Aborting Test \n");
81101378:	01204534 	movhi	r4,33044
8110137c:	21247d04 	addi	r4,r4,-28172
81101380:	110fa600 	call	8110fa60 <puts>
      return bSuccess;
81101384:	e0bff417 	ldw	r2,-48(fp)
81101388:	00008406 	br	8110159c <DDR2_MEMORY_RANDOM_WRITE_TEST+0x2c4>
  }
  
  printf("DDR2 Size: %d MBytes\n", ByteLen/1024/1024);
8110138c:	e0bff017 	ldw	r2,-64(fp)
81101390:	1004d53a 	srli	r2,r2,20
81101394:	100b883a 	mov	r5,r2
81101398:	01204534 	movhi	r4,33044
8110139c:	21267704 	addi	r4,r4,-26148
811013a0:	110f9340 	call	8110f934 <printf>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
811013a4:	d0a07717 	ldw	r2,-32292(gp)
  alt_u32 CurrentState;
  alt_u32 MemoryEndAddress;
  alt_u32 NextMilestone;
  alt_u8 Percentage;
  
  InitialState = alt_nticks();
811013a8:	d0a03e15 	stw	r2,-32520(gp)
  CurrentState = InitialState;
811013ac:	d0a03e17 	ldw	r2,-32520(gp)
811013b0:	e0bff815 	stw	r2,-32(fp)
  MemoryEndAddress = Ddr2Base + ByteLen;
811013b4:	e0ffef17 	ldw	r3,-68(fp)
811013b8:	e0bff017 	ldw	r2,-64(fp)
811013bc:	1885883a 	add	r2,r3,r2
811013c0:	e0bff515 	stw	r2,-44(fp)
  NextMilestone = Ddr2Base + ByteLen/20;
811013c4:	e0fff017 	ldw	r3,-64(fp)
811013c8:	00b33374 	movhi	r2,52429
811013cc:	10b33344 	addi	r2,r2,-13107
811013d0:	1888383a 	mulxuu	r4,r3,r2
811013d4:	1885383a 	mul	r2,r3,r2
811013d8:	1025883a 	mov	r18,r2
811013dc:	2027883a 	mov	r19,r4
811013e0:	9806d13a 	srli	r3,r19,4
811013e4:	e0bfef17 	ldw	r2,-68(fp)
811013e8:	1885883a 	add	r2,r3,r2
811013ec:	e0bff215 	stw	r2,-56(fp)
  Percentage = 5;
811013f0:	00800144 	movi	r2,5
811013f4:	e0bff305 	stb	r2,-52(fp)
  printf("Writing to memory...\n");
811013f8:	01204534 	movhi	r4,33044
811013fc:	2126d104 	addi	r4,r4,-25788
81101400:	110fa600 	call	8110fa60 <puts>
  if (bVerbose == DDR2_VERBOSE) {
81101404:	e0bffa17 	ldw	r2,-24(fp)
81101408:	10800058 	cmpnei	r2,r2,1
8110140c:	1000031e 	bne	r2,zero,8110141c <DDR2_MEMORY_RANDOM_WRITE_TEST+0x144>
    printf("00%%..");
81101410:	01204534 	movhi	r4,33044
81101414:	2126d704 	addi	r4,r4,-25764
81101418:	110f9340 	call	8110f934 <printf>
  }
  int TimeStart, TimeElapsed = 0;
8110141c:	e03ff615 	stw	zero,-40(fp)
81101420:	d0a07717 	ldw	r2,-32292(gp)

  TimeStart = alt_nticks();
81101424:	e0bff715 	stw	r2,-36(fp)
  for (pDestination = (alt_u32*)Ddr2Base; (alt_u32)pDestination < MemoryEndAddress; pDestination++){
81101428:	e0bfef17 	ldw	r2,-68(fp)
8110142c:	e0bff115 	stw	r2,-60(fp)
81101430:	00002506 	br	811014c8 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x1f0>
    *pDestination = xorshift32(&CurrentState);
81101434:	e0bff804 	addi	r2,fp,-32
81101438:	1009883a 	mov	r4,r2
8110143c:	11018980 	call	81101898 <xorshift32>
81101440:	1007883a 	mov	r3,r2
81101444:	e0bff117 	ldw	r2,-60(fp)
81101448:	10c00015 	stw	r3,0(r2)
    if ((bVerbose == DDR2_VERBOSE) & ((alt_u32)pDestination > NextMilestone)){
8110144c:	e0bffa17 	ldw	r2,-24(fp)
81101450:	10800060 	cmpeqi	r2,r2,1
81101454:	1009883a 	mov	r4,r2
81101458:	e0bff117 	ldw	r2,-60(fp)
8110145c:	e0fff217 	ldw	r3,-56(fp)
81101460:	1885803a 	cmpltu	r2,r3,r2
81101464:	2084703a 	and	r2,r4,r2
81101468:	10803fcc 	andi	r2,r2,255
8110146c:	10001326 	beq	r2,zero,811014bc <DDR2_MEMORY_RANDOM_WRITE_TEST+0x1e4>
      printf("..%02d%%..",Percentage);
81101470:	e0bff303 	ldbu	r2,-52(fp)
81101474:	100b883a 	mov	r5,r2
81101478:	01204534 	movhi	r4,33044
8110147c:	2126d904 	addi	r4,r4,-25756
81101480:	110f9340 	call	8110f934 <printf>
	  NextMilestone += ByteLen/20;
81101484:	e0fff017 	ldw	r3,-64(fp)
81101488:	00b33374 	movhi	r2,52429
8110148c:	10b33344 	addi	r2,r2,-13107
81101490:	1888383a 	mulxuu	r4,r3,r2
81101494:	1885383a 	mul	r2,r3,r2
81101498:	1021883a 	mov	r16,r2
8110149c:	2023883a 	mov	r17,r4
811014a0:	8804d13a 	srli	r2,r17,4
811014a4:	e0fff217 	ldw	r3,-56(fp)
811014a8:	1885883a 	add	r2,r3,r2
811014ac:	e0bff215 	stw	r2,-56(fp)
	  Percentage += 5;
811014b0:	e0bff303 	ldbu	r2,-52(fp)
811014b4:	10800144 	addi	r2,r2,5
811014b8:	e0bff305 	stb	r2,-52(fp)
    printf("00%%..");
  }
  int TimeStart, TimeElapsed = 0;

  TimeStart = alt_nticks();
  for (pDestination = (alt_u32*)Ddr2Base; (alt_u32)pDestination < MemoryEndAddress; pDestination++){
811014bc:	e0bff117 	ldw	r2,-60(fp)
811014c0:	10800104 	addi	r2,r2,4
811014c4:	e0bff115 	stw	r2,-60(fp)
811014c8:	e0fff117 	ldw	r3,-60(fp)
811014cc:	e0bff517 	ldw	r2,-44(fp)
811014d0:	18bfd836 	bltu	r3,r2,81101434 <__reset+0xfb0e1434>
      printf("..%02d%%..",Percentage);
	  NextMilestone += ByteLen/20;
	  Percentage += 5;
	}
  }
  alt_dcache_flush_all();
811014d4:	1123ec80 	call	81123ec8 <alt_dcache_flush_all>
  if (bVerbose == DDR2_VERBOSE) {
811014d8:	e0bffa17 	ldw	r2,-24(fp)
811014dc:	10800058 	cmpnei	r2,r2,1
811014e0:	1000031e 	bne	r2,zero,811014f0 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x218>
    printf("..100%%\n");
811014e4:	01204534 	movhi	r4,33044
811014e8:	2126dc04 	addi	r4,r4,-25744
811014ec:	110f9340 	call	8110f934 <printf>
  }

  if (bSuccess){
811014f0:	e0bff417 	ldw	r2,-48(fp)
811014f4:	10002326 	beq	r2,zero,81101584 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x2ac>
    if (bTime == TRUE){
811014f8:	e0bffb17 	ldw	r2,-20(fp)
811014fc:	10800058 	cmpnei	r2,r2,1
81101500:	10001b1e 	bne	r2,zero,81101570 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x298>
81101504:	d0e07717 	ldw	r3,-32292(gp)
      TimeElapsed = alt_nticks() - TimeStart;
81101508:	e0bff717 	ldw	r2,-36(fp)
8110150c:	1885c83a 	sub	r2,r3,r2
81101510:	e0bff615 	stw	r2,-40(fp)
      printf("DDR2 write test pass, size=%d bytes, %.3f sec\n", ByteLen, (float)TimeElapsed/(float)alt_ticks_per_second());
81101514:	e13ff617 	ldw	r4,-40(fp)
81101518:	110d8580 	call	8110d858 <__floatsisf>
8110151c:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81101520:	d0a07617 	ldw	r2,-32296(gp)
81101524:	1009883a 	mov	r4,r2
81101528:	110d9840 	call	8110d984 <__floatunsisf>
8110152c:	1007883a 	mov	r3,r2
81101530:	180b883a 	mov	r5,r3
81101534:	8009883a 	mov	r4,r16
81101538:	110d00c0 	call	8110d00c <__divsf3>
8110153c:	1007883a 	mov	r3,r2
81101540:	1805883a 	mov	r2,r3
81101544:	1009883a 	mov	r4,r2
81101548:	110e19c0 	call	8110e19c <__extendsfdf2>
8110154c:	1009883a 	mov	r4,r2
81101550:	180b883a 	mov	r5,r3
81101554:	200d883a 	mov	r6,r4
81101558:	280f883a 	mov	r7,r5
8110155c:	e17ff017 	ldw	r5,-64(fp)
81101560:	01204534 	movhi	r4,33044
81101564:	21268304 	addi	r4,r4,-26100
81101568:	110f9340 	call	8110f934 <printf>
8110156c:	00000806 	br	81101590 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x2b8>
    } else {
      printf("DDR2 write test pass, size=%d bytes\n", ByteLen);
81101570:	e17ff017 	ldw	r5,-64(fp)
81101574:	01204534 	movhi	r4,33044
81101578:	2126df04 	addi	r4,r4,-25732
8110157c:	110f9340 	call	8110f934 <printf>
81101580:	00000306 	br	81101590 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x2b8>
    }
  } else {
    printf("DDR2 write test fail\n");
81101584:	01204534 	movhi	r4,33044
81101588:	21268f04 	addi	r4,r4,-26052
8110158c:	110fa600 	call	8110fa60 <puts>
  }
  printf("\n");
81101590:	01000284 	movi	r4,10
81101594:	110f9800 	call	8110f980 <putchar>

  return bSuccess;
81101598:	e0bff417 	ldw	r2,-48(fp)
}
8110159c:	e6fffc04 	addi	sp,fp,-16
811015a0:	dfc00517 	ldw	ra,20(sp)
811015a4:	df000417 	ldw	fp,16(sp)
811015a8:	dcc00317 	ldw	r19,12(sp)
811015ac:	dc800217 	ldw	r18,8(sp)
811015b0:	dc400117 	ldw	r17,4(sp)
811015b4:	dc000017 	ldw	r16,0(sp)
811015b8:	dec00604 	addi	sp,sp,24
811015bc:	f800283a 	ret

811015c0 <DDR2_MEMORY_RANDOM_READ_TEST>:
 * @param [in] bTime  Controla se a duração da função será medida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DDR2_MEMORY_RANDOM_READ_TEST(alt_u8 MemoryId, bool bVerbose, bool bTime){
811015c0:	deffed04 	addi	sp,sp,-76
811015c4:	de00012e 	bgeu	sp,et,811015cc <DDR2_MEMORY_RANDOM_READ_TEST+0xc>
811015c8:	003b68fa 	trap	3
811015cc:	dfc01215 	stw	ra,72(sp)
811015d0:	df001115 	stw	fp,68(sp)
811015d4:	dcc01015 	stw	r19,64(sp)
811015d8:	dc800f15 	stw	r18,60(sp)
811015dc:	dc400e15 	stw	r17,56(sp)
811015e0:	dc000d15 	stw	r16,52(sp)
811015e4:	df001104 	addi	fp,sp,68
811015e8:	2005883a 	mov	r2,r4
811015ec:	e17ffa15 	stw	r5,-24(fp)
811015f0:	e1bffb15 	stw	r6,-20(fp)
811015f4:	e0bff905 	stb	r2,-28(fp)

  printf("===== DE4 DDR2 Memory Random Read Test =====\n");
811015f8:	01204534 	movhi	r4,33044
811015fc:	2126e904 	addi	r4,r4,-25692
81101600:	110fa600 	call	8110fa60 <puts>
  bool bSuccess;
  alt_u32 Ddr2Base;
  alt_u32 ByteLen;
  
  bSuccess = TRUE;
81101604:	00800044 	movi	r2,1
81101608:	e0bfef15 	stw	r2,-68(fp)
  switch (MemoryId) {
8110160c:	e0bff903 	ldbu	r2,-28(fp)
81101610:	10c00060 	cmpeqi	r3,r2,1
81101614:	1800031e 	bne	r3,zero,81101624 <DDR2_MEMORY_RANDOM_READ_TEST+0x64>
81101618:	108000a0 	cmpeqi	r2,r2,2
8110161c:	1000081e 	bne	r2,zero,81101640 <DDR2_MEMORY_RANDOM_READ_TEST+0x80>
81101620:	00000e06 	br	8110165c <DDR2_MEMORY_RANDOM_READ_TEST+0x9c>
    case DDR2_M1_ID:
        DDR2_SWITCH_MEMORY(MemoryId);
81101624:	e0bff903 	ldbu	r2,-28(fp)
81101628:	1009883a 	mov	r4,r2
8110162c:	1100a7c0 	call	81100a7c <DDR2_SWITCH_MEMORY>
        Ddr2Base = DDR2_EXTENDED_ADDRESS_WINDOWED_BASE;
81101630:	e03ff015 	stw	zero,-64(fp)
        ByteLen = DDR2_M1_MEMORY_SIZE;
81101634:	00a00034 	movhi	r2,32768
81101638:	e0bff115 	stw	r2,-60(fp)
    break;
8110163c:	00000d06 	br	81101674 <DDR2_MEMORY_RANDOM_READ_TEST+0xb4>
    case DDR2_M2_ID:
        DDR2_SWITCH_MEMORY(MemoryId);
81101640:	e0bff903 	ldbu	r2,-28(fp)
81101644:	1009883a 	mov	r4,r2
81101648:	1100a7c0 	call	81100a7c <DDR2_SWITCH_MEMORY>
        Ddr2Base = DDR2_EXTENDED_ADDRESS_WINDOWED_BASE;
8110164c:	e03ff015 	stw	zero,-64(fp)
        ByteLen = DDR2_M2_MEMORY_SIZE;
81101650:	00a00034 	movhi	r2,32768
81101654:	e0bff115 	stw	r2,-60(fp)
    break;
81101658:	00000606 	br	81101674 <DDR2_MEMORY_RANDOM_READ_TEST+0xb4>
    default:
      bSuccess = FALSE;
8110165c:	e03fef15 	stw	zero,-68(fp)
	  printf("DR2 Memory ID not identified!! Aborting Test \n");
81101660:	01204534 	movhi	r4,33044
81101664:	21247d04 	addi	r4,r4,-28172
81101668:	110fa600 	call	8110fa60 <puts>
      return bSuccess;
8110166c:	e0bfef17 	ldw	r2,-68(fp)
81101670:	00008006 	br	81101874 <DDR2_MEMORY_RANDOM_READ_TEST+0x2b4>
  }
  
  printf("DDR2 Size: %d MBytes\n", ByteLen/1024/1024);
81101674:	e0bff117 	ldw	r2,-60(fp)
81101678:	1004d53a 	srli	r2,r2,20
8110167c:	100b883a 	mov	r5,r2
81101680:	01204534 	movhi	r4,33044
81101684:	21267704 	addi	r4,r4,-26148
81101688:	110f9340 	call	8110f934 <printf>
  alt_u32 CurrentState;
  alt_u32 MemoryEndAddress;
  alt_u32 NextMilestone;
  alt_u8 Percentage;
  
  CurrentState = InitialState;
8110168c:	d0a03e17 	ldw	r2,-32520(gp)
81101690:	e0bff815 	stw	r2,-32(fp)
  MemoryEndAddress = Ddr2Base + ByteLen;
81101694:	e0fff017 	ldw	r3,-64(fp)
81101698:	e0bff117 	ldw	r2,-60(fp)
8110169c:	1885883a 	add	r2,r3,r2
811016a0:	e0bff515 	stw	r2,-44(fp)
  NextMilestone = Ddr2Base + ByteLen/20;
811016a4:	e0fff117 	ldw	r3,-60(fp)
811016a8:	00b33374 	movhi	r2,52429
811016ac:	10b33344 	addi	r2,r2,-13107
811016b0:	1888383a 	mulxuu	r4,r3,r2
811016b4:	1885383a 	mul	r2,r3,r2
811016b8:	1025883a 	mov	r18,r2
811016bc:	2027883a 	mov	r19,r4
811016c0:	9806d13a 	srli	r3,r19,4
811016c4:	e0bff017 	ldw	r2,-64(fp)
811016c8:	1885883a 	add	r2,r3,r2
811016cc:	e0bff315 	stw	r2,-52(fp)
  Percentage = 5;
811016d0:	00800144 	movi	r2,5
811016d4:	e0bff405 	stb	r2,-48(fp)
  printf("Reading from memory...\n");
811016d8:	01204534 	movhi	r4,33044
811016dc:	2126f504 	addi	r4,r4,-25644
811016e0:	110fa600 	call	8110fa60 <puts>
  if (bVerbose == DDR2_VERBOSE) {
811016e4:	e0bffa17 	ldw	r2,-24(fp)
811016e8:	10800058 	cmpnei	r2,r2,1
811016ec:	1000031e 	bne	r2,zero,811016fc <DDR2_MEMORY_RANDOM_READ_TEST+0x13c>
    printf("00%%..");
811016f0:	01204534 	movhi	r4,33044
811016f4:	2126d704 	addi	r4,r4,-25764
811016f8:	110f9340 	call	8110f934 <printf>
  }
  
  int TimeStart, TimeElapsed = 0;
811016fc:	e03ff615 	stw	zero,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81101700:	d0a07717 	ldw	r2,-32292(gp)

  TimeStart = alt_nticks();
81101704:	e0bff715 	stw	r2,-36(fp)
  for (pSource = (alt_u32*)Ddr2Base; (alt_u32)pSource < MemoryEndAddress; pSource++){
81101708:	e0bff017 	ldw	r2,-64(fp)
8110170c:	e0bff215 	stw	r2,-56(fp)
81101710:	00002406 	br	811017a4 <DDR2_MEMORY_RANDOM_READ_TEST+0x1e4>
    if (xorshift32(&CurrentState) != *pSource){
81101714:	e0bff804 	addi	r2,fp,-32
81101718:	1009883a 	mov	r4,r2
8110171c:	11018980 	call	81101898 <xorshift32>
81101720:	1007883a 	mov	r3,r2
81101724:	e0bff217 	ldw	r2,-56(fp)
81101728:	10800017 	ldw	r2,0(r2)
8110172c:	18800126 	beq	r3,r2,81101734 <DDR2_MEMORY_RANDOM_READ_TEST+0x174>
      bSuccess = FALSE;
81101730:	e03fef15 	stw	zero,-68(fp)
	  if (bVerbose == DDR2_VERBOSE) {
        //printf("Failed to read adress 0x%08X\n", pSource);
      }
    }
    if ((bVerbose == DDR2_VERBOSE) && ((alt_u32)pSource > NextMilestone)){
81101734:	e0bffa17 	ldw	r2,-24(fp)
81101738:	10800058 	cmpnei	r2,r2,1
8110173c:	1000161e 	bne	r2,zero,81101798 <DDR2_MEMORY_RANDOM_READ_TEST+0x1d8>
81101740:	e0bff217 	ldw	r2,-56(fp)
81101744:	e0fff317 	ldw	r3,-52(fp)
81101748:	1880132e 	bgeu	r3,r2,81101798 <DDR2_MEMORY_RANDOM_READ_TEST+0x1d8>
      printf("..%02d%%..",Percentage);
8110174c:	e0bff403 	ldbu	r2,-48(fp)
81101750:	100b883a 	mov	r5,r2
81101754:	01204534 	movhi	r4,33044
81101758:	2126d904 	addi	r4,r4,-25756
8110175c:	110f9340 	call	8110f934 <printf>
	  NextMilestone += ByteLen/20;
81101760:	e0fff117 	ldw	r3,-60(fp)
81101764:	00b33374 	movhi	r2,52429
81101768:	10b33344 	addi	r2,r2,-13107
8110176c:	1888383a 	mulxuu	r4,r3,r2
81101770:	1885383a 	mul	r2,r3,r2
81101774:	1021883a 	mov	r16,r2
81101778:	2023883a 	mov	r17,r4
8110177c:	8804d13a 	srli	r2,r17,4
81101780:	e0fff317 	ldw	r3,-52(fp)
81101784:	1885883a 	add	r2,r3,r2
81101788:	e0bff315 	stw	r2,-52(fp)
	  Percentage += 5;
8110178c:	e0bff403 	ldbu	r2,-48(fp)
81101790:	10800144 	addi	r2,r2,5
81101794:	e0bff405 	stb	r2,-48(fp)
  }
  
  int TimeStart, TimeElapsed = 0;

  TimeStart = alt_nticks();
  for (pSource = (alt_u32*)Ddr2Base; (alt_u32)pSource < MemoryEndAddress; pSource++){
81101798:	e0bff217 	ldw	r2,-56(fp)
8110179c:	10800104 	addi	r2,r2,4
811017a0:	e0bff215 	stw	r2,-56(fp)
811017a4:	e0fff217 	ldw	r3,-56(fp)
811017a8:	e0bff517 	ldw	r2,-44(fp)
811017ac:	18bfd936 	bltu	r3,r2,81101714 <__reset+0xfb0e1714>
      printf("..%02d%%..",Percentage);
	  NextMilestone += ByteLen/20;
	  Percentage += 5;
	}
  }
  if (bVerbose == DDR2_VERBOSE) {
811017b0:	e0bffa17 	ldw	r2,-24(fp)
811017b4:	10800058 	cmpnei	r2,r2,1
811017b8:	1000031e 	bne	r2,zero,811017c8 <DDR2_MEMORY_RANDOM_READ_TEST+0x208>
    printf("..100%%\n");
811017bc:	01204534 	movhi	r4,33044
811017c0:	2126dc04 	addi	r4,r4,-25744
811017c4:	110f9340 	call	8110f934 <printf>
  }

  if (bSuccess){
811017c8:	e0bfef17 	ldw	r2,-68(fp)
811017cc:	10002326 	beq	r2,zero,8110185c <DDR2_MEMORY_RANDOM_READ_TEST+0x29c>
    if (bTime == TRUE){
811017d0:	e0bffb17 	ldw	r2,-20(fp)
811017d4:	10800058 	cmpnei	r2,r2,1
811017d8:	10001b1e 	bne	r2,zero,81101848 <DDR2_MEMORY_RANDOM_READ_TEST+0x288>
811017dc:	d0e07717 	ldw	r3,-32292(gp)
      TimeElapsed = alt_nticks() - TimeStart;
811017e0:	e0bff717 	ldw	r2,-36(fp)
811017e4:	1885c83a 	sub	r2,r3,r2
811017e8:	e0bff615 	stw	r2,-40(fp)
      printf("DDR2 read test pass, size=%d bytes, %.3f sec\n", ByteLen, (float)TimeElapsed/(float)alt_ticks_per_second());
811017ec:	e13ff617 	ldw	r4,-40(fp)
811017f0:	110d8580 	call	8110d858 <__floatsisf>
811017f4:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
811017f8:	d0a07617 	ldw	r2,-32296(gp)
811017fc:	1009883a 	mov	r4,r2
81101800:	110d9840 	call	8110d984 <__floatunsisf>
81101804:	1007883a 	mov	r3,r2
81101808:	180b883a 	mov	r5,r3
8110180c:	8009883a 	mov	r4,r16
81101810:	110d00c0 	call	8110d00c <__divsf3>
81101814:	1007883a 	mov	r3,r2
81101818:	1805883a 	mov	r2,r3
8110181c:	1009883a 	mov	r4,r2
81101820:	110e19c0 	call	8110e19c <__extendsfdf2>
81101824:	1009883a 	mov	r4,r2
81101828:	180b883a 	mov	r5,r3
8110182c:	200d883a 	mov	r6,r4
81101830:	280f883a 	mov	r7,r5
81101834:	e17ff117 	ldw	r5,-60(fp)
81101838:	01204534 	movhi	r4,33044
8110183c:	2126b404 	addi	r4,r4,-25904
81101840:	110f9340 	call	8110f934 <printf>
81101844:	00000806 	br	81101868 <DDR2_MEMORY_RANDOM_READ_TEST+0x2a8>
    } else {
      printf("DDR2 read test pass, size=%d bytes\n", ByteLen);
81101848:	e17ff117 	ldw	r5,-60(fp)
8110184c:	01204534 	movhi	r4,33044
81101850:	2126fb04 	addi	r4,r4,-25620
81101854:	110f9340 	call	8110f934 <printf>
81101858:	00000306 	br	81101868 <DDR2_MEMORY_RANDOM_READ_TEST+0x2a8>
    }
  } else {
    printf("DDR2 read test fail\n");
8110185c:	01204534 	movhi	r4,33044
81101860:	2126c004 	addi	r4,r4,-25856
81101864:	110fa600 	call	8110fa60 <puts>
  }
  printf("\n");
81101868:	01000284 	movi	r4,10
8110186c:	110f9800 	call	8110f980 <putchar>

  return bSuccess;
81101870:	e0bfef17 	ldw	r2,-68(fp)
}
81101874:	e6fffc04 	addi	sp,fp,-16
81101878:	dfc00517 	ldw	ra,20(sp)
8110187c:	df000417 	ldw	fp,16(sp)
81101880:	dcc00317 	ldw	r19,12(sp)
81101884:	dc800217 	ldw	r18,8(sp)
81101888:	dc400117 	ldw	r17,4(sp)
8110188c:	dc000017 	ldw	r16,0(sp)
81101890:	dec00604 	addi	sp,sp,24
81101894:	f800283a 	ret

81101898 <xorshift32>:
 * @param [in] bDRIVE  Estado atual do RNG
  *
 * @retval Número aleatório resultate do RNG
 *
 */
alt_u32 xorshift32(alt_u32 *State){
81101898:	defffd04 	addi	sp,sp,-12
8110189c:	de00012e 	bgeu	sp,et,811018a4 <xorshift32+0xc>
811018a0:	003b68fa 	trap	3
811018a4:	df000215 	stw	fp,8(sp)
811018a8:	df000204 	addi	fp,sp,8
811018ac:	e13fff15 	stw	r4,-4(fp)

  alt_u32 x = *State;
811018b0:	e0bfff17 	ldw	r2,-4(fp)
811018b4:	10800017 	ldw	r2,0(r2)
811018b8:	e0bffe15 	stw	r2,-8(fp)
  x ^= x << 13;
811018bc:	e0bffe17 	ldw	r2,-8(fp)
811018c0:	1004937a 	slli	r2,r2,13
811018c4:	e0fffe17 	ldw	r3,-8(fp)
811018c8:	1884f03a 	xor	r2,r3,r2
811018cc:	e0bffe15 	stw	r2,-8(fp)
  x ^= x >> 17;
811018d0:	e0bffe17 	ldw	r2,-8(fp)
811018d4:	1004d47a 	srli	r2,r2,17
811018d8:	e0fffe17 	ldw	r3,-8(fp)
811018dc:	1884f03a 	xor	r2,r3,r2
811018e0:	e0bffe15 	stw	r2,-8(fp)
  x ^= x << 5;
811018e4:	e0bffe17 	ldw	r2,-8(fp)
811018e8:	1004917a 	slli	r2,r2,5
811018ec:	e0fffe17 	ldw	r3,-8(fp)
811018f0:	1884f03a 	xor	r2,r3,r2
811018f4:	e0bffe15 	stw	r2,-8(fp)
  *State = x;
811018f8:	e0bfff17 	ldw	r2,-4(fp)
811018fc:	e0fffe17 	ldw	r3,-8(fp)
81101900:	10c00015 	stw	r3,0(r2)

  return x;
81101904:	e0bffe17 	ldw	r2,-8(fp)
}
81101908:	e037883a 	mov	sp,fp
8110190c:	df000017 	ldw	fp,0(sp)
81101910:	dec00104 	addi	sp,sp,4
81101914:	f800283a 	ret

81101918 <DMA_OPEN_DEVICE>:
 * @param [in] DmaName  String com o nome do DMA (XXX_CSR_NAME)
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_OPEN_DEVICE(alt_msgdma_dev **DmaDevice, const char* DmaName){
81101918:	defffb04 	addi	sp,sp,-20
8110191c:	de00012e 	bgeu	sp,et,81101924 <DMA_OPEN_DEVICE+0xc>
81101920:	003b68fa 	trap	3
81101924:	dfc00415 	stw	ra,16(sp)
81101928:	df000315 	stw	fp,12(sp)
8110192c:	df000304 	addi	fp,sp,12
81101930:	e13ffe15 	stw	r4,-8(fp)
81101934:	e17fff15 	stw	r5,-4(fp)
  bool bSuccess = TRUE;
81101938:	00800044 	movi	r2,1
8110193c:	e0bffd15 	stw	r2,-12(fp)
  
  //Open DMA based on name

  *DmaDevice = alt_msgdma_open((char *)DmaName);
81101940:	e13fff17 	ldw	r4,-4(fp)
81101944:	11378740 	call	81137874 <alt_msgdma_open>
81101948:	1007883a 	mov	r3,r2
8110194c:	e0bffe17 	ldw	r2,-8(fp)
81101950:	10c00015 	stw	r3,0(r2)
  
  //Check if DMA opened correctly;
  if(*DmaDevice == NULL){
81101954:	e0bffe17 	ldw	r2,-8(fp)
81101958:	10800017 	ldw	r2,0(r2)
8110195c:	1000011e 	bne	r2,zero,81101964 <DMA_OPEN_DEVICE+0x4c>
    bSuccess = FALSE;
81101960:	e03ffd15 	stw	zero,-12(fp)
  }
  
  return bSuccess;
81101964:	e0bffd17 	ldw	r2,-12(fp)
}
81101968:	e037883a 	mov	sp,fp
8110196c:	dfc00117 	ldw	ra,4(sp)
81101970:	df000017 	ldw	fp,0(sp)
81101974:	dec00204 	addi	sp,sp,8
81101978:	f800283a 	ret

8110197c <DMA_CONFIG>:
 * @param [in] ConfigMask  Mascara com as configurações do DMA (overwrite)
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_CONFIG(alt_msgdma_dev *DmaDevice, alt_u32 ConfigMask){
8110197c:	defffc04 	addi	sp,sp,-16
81101980:	de00012e 	bgeu	sp,et,81101988 <DMA_CONFIG+0xc>
81101984:	003b68fa 	trap	3
81101988:	df000315 	stw	fp,12(sp)
8110198c:	df000304 	addi	fp,sp,12
81101990:	e13ffe15 	stw	r4,-8(fp)
81101994:	e17fff15 	stw	r5,-4(fp)
  bool bSuccess = TRUE;
81101998:	00800044 	movi	r2,1
8110199c:	e0bffd15 	stw	r2,-12(fp)
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ConfigMask);
811019a0:	e0bffe17 	ldw	r2,-8(fp)
811019a4:	10800317 	ldw	r2,12(r2)
811019a8:	10800104 	addi	r2,r2,4
811019ac:	e0ffff17 	ldw	r3,-4(fp)
811019b0:	10c00035 	stwio	r3,0(r2)
  return bSuccess;
811019b4:	e0bffd17 	ldw	r2,-12(fp)
}
811019b8:	e037883a 	mov	sp,fp
811019bc:	df000017 	ldw	fp,0(sp)
811019c0:	dec00104 	addi	sp,sp,4
811019c4:	f800283a 	ret

811019c8 <DMA_BUSY>:
 * @param [in] DmaDevice  Ponteiro para o Device do DMA a ser utilizado
 *
 * @retval TRUE : DMA Ocupado
 *
 */
bool DMA_BUSY(alt_msgdma_dev *DmaDevice){
811019c8:	defffd04 	addi	sp,sp,-12
811019cc:	de00012e 	bgeu	sp,et,811019d4 <DMA_BUSY+0xc>
811019d0:	003b68fa 	trap	3
811019d4:	df000215 	stw	fp,8(sp)
811019d8:	df000204 	addi	fp,sp,8
811019dc:	e13fff15 	stw	r4,-4(fp)
  bool bBusy = FALSE;
811019e0:	e03ffe15 	stw	zero,-8(fp)
  if (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK){
811019e4:	e0bfff17 	ldw	r2,-4(fp)
811019e8:	10800317 	ldw	r2,12(r2)
811019ec:	10800037 	ldwio	r2,0(r2)
811019f0:	1080004c 	andi	r2,r2,1
811019f4:	10000226 	beq	r2,zero,81101a00 <DMA_BUSY+0x38>
    bBusy = TRUE;
811019f8:	00800044 	movi	r2,1
811019fc:	e0bffe15 	stw	r2,-8(fp)
  }
  return bBusy;
81101a00:	e0bffe17 	ldw	r2,-8(fp)
}
81101a04:	e037883a 	mov	sp,fp
81101a08:	df000017 	ldw	fp,0(sp)
81101a0c:	dec00104 	addi	sp,sp,4
81101a10:	f800283a 	ret

81101a14 <DMA_DESCRIPTOR_BUFFER_FULL>:
 * @param [in] DmaDevice  Ponteiro para o Device do DMA a ser utilizado
 *
 * @retval TRUE : Buffer Cheio
 *
 */
bool DMA_DESCRIPTOR_BUFFER_FULL(alt_msgdma_dev *DmaDevice){
81101a14:	defffd04 	addi	sp,sp,-12
81101a18:	de00012e 	bgeu	sp,et,81101a20 <DMA_DESCRIPTOR_BUFFER_FULL+0xc>
81101a1c:	003b68fa 	trap	3
81101a20:	df000215 	stw	fp,8(sp)
81101a24:	df000204 	addi	fp,sp,8
81101a28:	e13fff15 	stw	r4,-4(fp)
  bool bFull = FALSE;
81101a2c:	e03ffe15 	stw	zero,-8(fp)
  if (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK){
81101a30:	e0bfff17 	ldw	r2,-4(fp)
81101a34:	10800317 	ldw	r2,12(r2)
81101a38:	10800037 	ldwio	r2,0(r2)
81101a3c:	1080010c 	andi	r2,r2,4
81101a40:	10000226 	beq	r2,zero,81101a4c <DMA_DESCRIPTOR_BUFFER_FULL+0x38>
    bFull = TRUE;
81101a44:	00800044 	movi	r2,1
81101a48:	e0bffe15 	stw	r2,-8(fp)
  }
  return bFull;
81101a4c:	e0bffe17 	ldw	r2,-8(fp)
}
81101a50:	e037883a 	mov	sp,fp
81101a54:	df000017 	ldw	fp,0(sp)
81101a58:	dec00104 	addi	sp,sp,4
81101a5c:	f800283a 	ret

81101a60 <DMA_DESCRIPTOR_BUFFER_EMPTY>:
 * @param [in] DmaDevice  Ponteiro para o Device do DMA a ser utilizado
 *
 * @retval TRUE : Buffer Vazio
 *
 */
bool DMA_DESCRIPTOR_BUFFER_EMPTY(alt_msgdma_dev *DmaDevice){
81101a60:	defffd04 	addi	sp,sp,-12
81101a64:	de00012e 	bgeu	sp,et,81101a6c <DMA_DESCRIPTOR_BUFFER_EMPTY+0xc>
81101a68:	003b68fa 	trap	3
81101a6c:	df000215 	stw	fp,8(sp)
81101a70:	df000204 	addi	fp,sp,8
81101a74:	e13fff15 	stw	r4,-4(fp)
  bool bEmpty = FALSE;
81101a78:	e03ffe15 	stw	zero,-8(fp)
  if (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_EMPTY_MASK){
81101a7c:	e0bfff17 	ldw	r2,-4(fp)
81101a80:	10800317 	ldw	r2,12(r2)
81101a84:	10800037 	ldwio	r2,0(r2)
81101a88:	1080008c 	andi	r2,r2,2
81101a8c:	10000226 	beq	r2,zero,81101a98 <DMA_DESCRIPTOR_BUFFER_EMPTY+0x38>
    bEmpty = TRUE;
81101a90:	00800044 	movi	r2,1
81101a94:	e0bffe15 	stw	r2,-8(fp)
  }
  return bEmpty;
81101a98:	e0bffe17 	ldw	r2,-8(fp)
}
81101a9c:	e037883a 	mov	sp,fp
81101aa0:	df000017 	ldw	fp,0(sp)
81101aa4:	dec00104 	addi	sp,sp,4
81101aa8:	f800283a 	ret

81101aac <DMA_DISPATCHER_STOP>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_DISPATCHER_STOP(alt_msgdma_dev *DmaDevice, bool bWait, alt_32 WaitPeriodUs){
81101aac:	defffa04 	addi	sp,sp,-24
81101ab0:	de00012e 	bgeu	sp,et,81101ab8 <DMA_DISPATCHER_STOP+0xc>
81101ab4:	003b68fa 	trap	3
81101ab8:	dfc00515 	stw	ra,20(sp)
81101abc:	df000415 	stw	fp,16(sp)
81101ac0:	df000404 	addi	fp,sp,16
81101ac4:	e13ffd15 	stw	r4,-12(fp)
81101ac8:	e17ffe15 	stw	r5,-8(fp)
81101acc:	e1bfff15 	stw	r6,-4(fp)
  bool bSuccess = TRUE;
81101ad0:	00800044 	movi	r2,1
81101ad4:	e0bffc15 	stw	r2,-16(fp)
  
  //Send stop command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_STOP_MASK);
81101ad8:	e0bffd17 	ldw	r2,-12(fp)
81101adc:	10800317 	ldw	r2,12(r2)
81101ae0:	10800104 	addi	r2,r2,4
81101ae4:	00c00044 	movi	r3,1
81101ae8:	10c00035 	stwio	r3,0(r2)
  
  if (bWait == DMA_WAIT) {
81101aec:	e0bffe17 	ldw	r2,-8(fp)
81101af0:	10800058 	cmpnei	r2,r2,1
81101af4:	10000e1e 	bne	r2,zero,81101b30 <DMA_DISPATCHER_STOP+0x84>
    //Wait stop to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_STOP_STATE_MASK) {
81101af8:	00000706 	br	81101b18 <DMA_DISPATCHER_STOP+0x6c>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
81101afc:	e0bfff17 	ldw	r2,-4(fp)
81101b00:	1000031e 	bne	r2,zero,81101b10 <DMA_DISPATCHER_STOP+0x64>
        usleep(1);
81101b04:	01000044 	movi	r4,1
81101b08:	11249c40 	call	811249c4 <usleep>
81101b0c:	00000206 	br	81101b18 <DMA_DISPATCHER_STOP+0x6c>
      } else {
        usleep(WaitPeriodUs);
81101b10:	e13fff17 	ldw	r4,-4(fp)
81101b14:	11249c40 	call	811249c4 <usleep>
  //Send stop command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_STOP_MASK);
  
  if (bWait == DMA_WAIT) {
    //Wait stop to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_STOP_STATE_MASK) {
81101b18:	e0bffd17 	ldw	r2,-12(fp)
81101b1c:	10800317 	ldw	r2,12(r2)
81101b20:	10800037 	ldwio	r2,0(r2)
81101b24:	1080080c 	andi	r2,r2,32
81101b28:	103ff41e 	bne	r2,zero,81101afc <__reset+0xfb0e1afc>
81101b2c:	00000206 	br	81101b38 <DMA_DISPATCHER_STOP+0x8c>
      } else {
        usleep(WaitPeriodUs);
      }
    }
  } else {
    return bSuccess;
81101b30:	e0bffc17 	ldw	r2,-16(fp)
81101b34:	00000106 	br	81101b3c <DMA_DISPATCHER_STOP+0x90>
  }
  
  return bSuccess;
81101b38:	e0bffc17 	ldw	r2,-16(fp)
}
81101b3c:	e037883a 	mov	sp,fp
81101b40:	dfc00117 	ldw	ra,4(sp)
81101b44:	df000017 	ldw	fp,0(sp)
81101b48:	dec00204 	addi	sp,sp,8
81101b4c:	f800283a 	ret

81101b50 <DMA_DISPATCHER_RESET>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_DISPATCHER_RESET(alt_msgdma_dev *DmaDevice, bool bWait, alt_32 WaitPeriodUs){
81101b50:	defffa04 	addi	sp,sp,-24
81101b54:	de00012e 	bgeu	sp,et,81101b5c <DMA_DISPATCHER_RESET+0xc>
81101b58:	003b68fa 	trap	3
81101b5c:	dfc00515 	stw	ra,20(sp)
81101b60:	df000415 	stw	fp,16(sp)
81101b64:	df000404 	addi	fp,sp,16
81101b68:	e13ffd15 	stw	r4,-12(fp)
81101b6c:	e17ffe15 	stw	r5,-8(fp)
81101b70:	e1bfff15 	stw	r6,-4(fp)
  bool bSuccess = TRUE;
81101b74:	00800044 	movi	r2,1
81101b78:	e0bffc15 	stw	r2,-16(fp)
  
  //Send reset command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
81101b7c:	e0bffd17 	ldw	r2,-12(fp)
81101b80:	10800317 	ldw	r2,12(r2)
81101b84:	10800104 	addi	r2,r2,4
81101b88:	00c00084 	movi	r3,2
81101b8c:	10c00035 	stwio	r3,0(r2)
  
  if (bWait == DMA_WAIT) {
81101b90:	e0bffe17 	ldw	r2,-8(fp)
81101b94:	10800058 	cmpnei	r2,r2,1
81101b98:	10000e1e 	bne	r2,zero,81101bd4 <DMA_DISPATCHER_RESET+0x84>
    //Wait reset to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
81101b9c:	00000706 	br	81101bbc <DMA_DISPATCHER_RESET+0x6c>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
81101ba0:	e0bfff17 	ldw	r2,-4(fp)
81101ba4:	1000031e 	bne	r2,zero,81101bb4 <DMA_DISPATCHER_RESET+0x64>
        usleep(1);
81101ba8:	01000044 	movi	r4,1
81101bac:	11249c40 	call	811249c4 <usleep>
81101bb0:	00000206 	br	81101bbc <DMA_DISPATCHER_RESET+0x6c>
      } else {
        usleep(WaitPeriodUs);
81101bb4:	e13fff17 	ldw	r4,-4(fp)
81101bb8:	11249c40 	call	811249c4 <usleep>
  //Send reset command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
  
  if (bWait == DMA_WAIT) {
    //Wait reset to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
81101bbc:	e0bffd17 	ldw	r2,-12(fp)
81101bc0:	10800317 	ldw	r2,12(r2)
81101bc4:	10800037 	ldwio	r2,0(r2)
81101bc8:	1080100c 	andi	r2,r2,64
81101bcc:	103ff41e 	bne	r2,zero,81101ba0 <__reset+0xfb0e1ba0>
81101bd0:	00000206 	br	81101bdc <DMA_DISPATCHER_RESET+0x8c>
      } else {
        usleep(WaitPeriodUs);
      }
    }
  } else {
    return bSuccess;
81101bd4:	e0bffc17 	ldw	r2,-16(fp)
81101bd8:	00000106 	br	81101be0 <DMA_DISPATCHER_RESET+0x90>
  }
  
  return bSuccess;
81101bdc:	e0bffc17 	ldw	r2,-16(fp)
}
81101be0:	e037883a 	mov	sp,fp
81101be4:	dfc00117 	ldw	ra,4(sp)
81101be8:	df000017 	ldw	fp,0(sp)
81101bec:	dec00204 	addi	sp,sp,8
81101bf0:	f800283a 	ret

81101bf4 <DMA_SINGLE_TRANSFER>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_SINGLE_TRANSFER(alt_msgdma_dev *DmaDevice, alt_u32 SourceAddress, alt_u32 DestinationAddress, alt_u32 TransferSize, alt_u32 ControlBits, bool bWait, alt_32 WaitPeriodUs){
81101bf4:	defff604 	addi	sp,sp,-40
81101bf8:	de00012e 	bgeu	sp,et,81101c00 <DMA_SINGLE_TRANSFER+0xc>
81101bfc:	003b68fa 	trap	3
81101c00:	dfc00915 	stw	ra,36(sp)
81101c04:	df000815 	stw	fp,32(sp)
81101c08:	dc000715 	stw	r16,28(sp)
81101c0c:	df000804 	addi	fp,sp,32
81101c10:	e13ffb15 	stw	r4,-20(fp)
81101c14:	e17ffc15 	stw	r5,-16(fp)
81101c18:	e1bffd15 	stw	r6,-12(fp)
81101c1c:	e1fffe15 	stw	r7,-8(fp)
81101c20:	defff804 	addi	sp,sp,-32
81101c24:	d8800204 	addi	r2,sp,8
81101c28:	108003c4 	addi	r2,r2,15
81101c2c:	1004d13a 	srli	r2,r2,4
81101c30:	1020913a 	slli	r16,r2,4
  bool bSuccess = TRUE;
81101c34:	00800044 	movi	r2,1
81101c38:	e0bffa15 	stw	r2,-24(fp)
  alt_msgdma_standard_descriptor DmaDescriptor;

  if (alt_msgdma_construct_standard_mm_to_mm_descriptor(DmaDevice, &DmaDescriptor, (alt_u32 *)SourceAddress, (alt_u32 *)DestinationAddress, TransferSize, ControlBits) != 0){
81101c3c:	e0fffc17 	ldw	r3,-16(fp)
81101c40:	e13ffd17 	ldw	r4,-12(fp)
81101c44:	e0800217 	ldw	r2,8(fp)
81101c48:	d8800115 	stw	r2,4(sp)
81101c4c:	e0bffe17 	ldw	r2,-8(fp)
81101c50:	d8800015 	stw	r2,0(sp)
81101c54:	200f883a 	mov	r7,r4
81101c58:	180d883a 	mov	r6,r3
81101c5c:	800b883a 	mov	r5,r16
81101c60:	e13ffb17 	ldw	r4,-20(fp)
81101c64:	11368700 	call	81136870 <alt_msgdma_construct_standard_mm_to_mm_descriptor>
81101c68:	10000326 	beq	r2,zero,81101c78 <DMA_SINGLE_TRANSFER+0x84>
    bSuccess = FALSE;
81101c6c:	e03ffa15 	stw	zero,-24(fp)
    return bSuccess;
81101c70:	e0bffa17 	ldw	r2,-24(fp)
81101c74:	00001d06 	br	81101cec <DMA_SINGLE_TRANSFER+0xf8>
  } else {
    if (alt_msgdma_standard_descriptor_async_transfer(DmaDevice, &DmaDescriptor) != 0) {
81101c78:	800b883a 	mov	r5,r16
81101c7c:	e13ffb17 	ldw	r4,-20(fp)
81101c80:	1137ae40 	call	81137ae4 <alt_msgdma_standard_descriptor_async_transfer>
81101c84:	10000326 	beq	r2,zero,81101c94 <DMA_SINGLE_TRANSFER+0xa0>
      bSuccess = FALSE;
81101c88:	e03ffa15 	stw	zero,-24(fp)
      return bSuccess;
81101c8c:	e0bffa17 	ldw	r2,-24(fp)
81101c90:	00001606 	br	81101cec <DMA_SINGLE_TRANSFER+0xf8>
    }
  }
  
  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
81101c94:	e0bffa17 	ldw	r2,-24(fp)
81101c98:	10800060 	cmpeqi	r2,r2,1
81101c9c:	1007883a 	mov	r3,r2
81101ca0:	e0800317 	ldw	r2,12(fp)
81101ca4:	10800060 	cmpeqi	r2,r2,1
81101ca8:	1884703a 	and	r2,r3,r2
81101cac:	10803fcc 	andi	r2,r2,255
81101cb0:	10000d26 	beq	r2,zero,81101ce8 <DMA_SINGLE_TRANSFER+0xf4>
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81101cb4:	00000706 	br	81101cd4 <DMA_SINGLE_TRANSFER+0xe0>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
81101cb8:	e0800417 	ldw	r2,16(fp)
81101cbc:	1000031e 	bne	r2,zero,81101ccc <DMA_SINGLE_TRANSFER+0xd8>
        usleep(1000);
81101cc0:	0100fa04 	movi	r4,1000
81101cc4:	11249c40 	call	811249c4 <usleep>
81101cc8:	00000206 	br	81101cd4 <DMA_SINGLE_TRANSFER+0xe0>
      } else {
        usleep(WaitPeriodUs);
81101ccc:	e1000417 	ldw	r4,16(fp)
81101cd0:	11249c40 	call	811249c4 <usleep>
      return bSuccess;
    }
  }
  
  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81101cd4:	e0bffb17 	ldw	r2,-20(fp)
81101cd8:	10800317 	ldw	r2,12(r2)
81101cdc:	10800037 	ldwio	r2,0(r2)
81101ce0:	1080004c 	andi	r2,r2,1
81101ce4:	103ff41e 	bne	r2,zero,81101cb8 <__reset+0xfb0e1cb8>
        usleep(WaitPeriodUs);
      }
    }
  }
  
  return bSuccess;
81101ce8:	e0bffa17 	ldw	r2,-24(fp)
}
81101cec:	e6ffff04 	addi	sp,fp,-4
81101cf0:	dfc00217 	ldw	ra,8(sp)
81101cf4:	df000117 	ldw	fp,4(sp)
81101cf8:	dc000017 	ldw	r16,0(sp)
81101cfc:	dec00304 	addi	sp,sp,12
81101d00:	f800283a 	ret

81101d04 <DMA_MULTIPLE_TRANSFER>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_MULTIPLE_TRANSFER(alt_msgdma_dev *DmaDevice, alt_u32 SourceAddressArray[], alt_u32 DestinationAddressArray[], alt_u8 TransferNumber, alt_u32 TransferSize, alt_u32 ControlBits, bool bWait, alt_32 WaitPeriodUs){
81101d04:	defff504 	addi	sp,sp,-44
81101d08:	de00012e 	bgeu	sp,et,81101d10 <DMA_MULTIPLE_TRANSFER+0xc>
81101d0c:	003b68fa 	trap	3
81101d10:	dfc00a15 	stw	ra,40(sp)
81101d14:	df000915 	stw	fp,36(sp)
81101d18:	dc000815 	stw	r16,32(sp)
81101d1c:	df000904 	addi	fp,sp,36
81101d20:	e13ffb15 	stw	r4,-20(fp)
81101d24:	e17ffc15 	stw	r5,-16(fp)
81101d28:	e1bffd15 	stw	r6,-12(fp)
81101d2c:	3805883a 	mov	r2,r7
81101d30:	e0bffe05 	stb	r2,-8(fp)
81101d34:	defff804 	addi	sp,sp,-32
81101d38:	d8800204 	addi	r2,sp,8
81101d3c:	108003c4 	addi	r2,r2,15
81101d40:	1004d13a 	srli	r2,r2,4
81101d44:	1020913a 	slli	r16,r2,4
  bool bSuccess = TRUE;
81101d48:	00800044 	movi	r2,1
81101d4c:	e0bff915 	stw	r2,-28(fp)
  alt_msgdma_standard_descriptor DmaDescriptor;
  alt_u8 i = 0;
81101d50:	e03ffa05 	stb	zero,-24(fp)

  while ((bSuccess == TRUE) & (i < (TransferNumber - 1))){
81101d54:	00002506 	br	81101dec <DMA_MULTIPLE_TRANSFER+0xe8>
    if (alt_msgdma_construct_standard_mm_to_mm_descriptor(DmaDevice, &DmaDescriptor, (alt_u32 *)SourceAddressArray[i], (alt_u32 *)DestinationAddressArray[i], TransferSize, (ControlBits | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_EARLY_DONE_ENABLE_MASK)) != 0){
81101d58:	e0bffa03 	ldbu	r2,-24(fp)
81101d5c:	1085883a 	add	r2,r2,r2
81101d60:	1085883a 	add	r2,r2,r2
81101d64:	1007883a 	mov	r3,r2
81101d68:	e0bffc17 	ldw	r2,-16(fp)
81101d6c:	10c5883a 	add	r2,r2,r3
81101d70:	10800017 	ldw	r2,0(r2)
81101d74:	1009883a 	mov	r4,r2
81101d78:	e0bffa03 	ldbu	r2,-24(fp)
81101d7c:	1085883a 	add	r2,r2,r2
81101d80:	1085883a 	add	r2,r2,r2
81101d84:	1007883a 	mov	r3,r2
81101d88:	e0bffd17 	ldw	r2,-12(fp)
81101d8c:	10c5883a 	add	r2,r2,r3
81101d90:	10800017 	ldw	r2,0(r2)
81101d94:	1007883a 	mov	r3,r2
81101d98:	e0800317 	ldw	r2,12(fp)
81101d9c:	10804034 	orhi	r2,r2,256
81101da0:	d8800115 	stw	r2,4(sp)
81101da4:	e0800217 	ldw	r2,8(fp)
81101da8:	d8800015 	stw	r2,0(sp)
81101dac:	180f883a 	mov	r7,r3
81101db0:	200d883a 	mov	r6,r4
81101db4:	800b883a 	mov	r5,r16
81101db8:	e13ffb17 	ldw	r4,-20(fp)
81101dbc:	11368700 	call	81136870 <alt_msgdma_construct_standard_mm_to_mm_descriptor>
81101dc0:	10000226 	beq	r2,zero,81101dcc <DMA_MULTIPLE_TRANSFER+0xc8>
      bSuccess = FALSE;
81101dc4:	e03ff915 	stw	zero,-28(fp)
81101dc8:	00000506 	br	81101de0 <DMA_MULTIPLE_TRANSFER+0xdc>
    } else {
      if (alt_msgdma_standard_descriptor_async_transfer(DmaDevice, &DmaDescriptor) != 0) {
81101dcc:	800b883a 	mov	r5,r16
81101dd0:	e13ffb17 	ldw	r4,-20(fp)
81101dd4:	1137ae40 	call	81137ae4 <alt_msgdma_standard_descriptor_async_transfer>
81101dd8:	10000126 	beq	r2,zero,81101de0 <DMA_MULTIPLE_TRANSFER+0xdc>
        bSuccess = FALSE;
81101ddc:	e03ff915 	stw	zero,-28(fp)
      }
    }
	i++;
81101de0:	e0bffa03 	ldbu	r2,-24(fp)
81101de4:	10800044 	addi	r2,r2,1
81101de8:	e0bffa05 	stb	r2,-24(fp)
bool DMA_MULTIPLE_TRANSFER(alt_msgdma_dev *DmaDevice, alt_u32 SourceAddressArray[], alt_u32 DestinationAddressArray[], alt_u8 TransferNumber, alt_u32 TransferSize, alt_u32 ControlBits, bool bWait, alt_32 WaitPeriodUs){
  bool bSuccess = TRUE;
  alt_msgdma_standard_descriptor DmaDescriptor;
  alt_u8 i = 0;

  while ((bSuccess == TRUE) & (i < (TransferNumber - 1))){
81101dec:	e0bff917 	ldw	r2,-28(fp)
81101df0:	10800060 	cmpeqi	r2,r2,1
81101df4:	1009883a 	mov	r4,r2
81101df8:	e0fffa03 	ldbu	r3,-24(fp)
81101dfc:	e0bffe03 	ldbu	r2,-8(fp)
81101e00:	10bfffc4 	addi	r2,r2,-1
81101e04:	1884803a 	cmplt	r2,r3,r2
81101e08:	2084703a 	and	r2,r4,r2
81101e0c:	10803fcc 	andi	r2,r2,255
81101e10:	103fd11e 	bne	r2,zero,81101d58 <__reset+0xfb0e1d58>
        bSuccess = FALSE;
      }
    }
	i++;
  }
  if (bSuccess == TRUE){
81101e14:	e0bff917 	ldw	r2,-28(fp)
81101e18:	10800058 	cmpnei	r2,r2,1
81101e1c:	1000211e 	bne	r2,zero,81101ea4 <DMA_MULTIPLE_TRANSFER+0x1a0>
    if (alt_msgdma_construct_standard_mm_to_mm_descriptor(DmaDevice, &DmaDescriptor, (alt_u32 *)SourceAddressArray[i], (alt_u32 *)DestinationAddressArray[i], TransferSize, ControlBits) != 0){
81101e20:	e0bffa03 	ldbu	r2,-24(fp)
81101e24:	1085883a 	add	r2,r2,r2
81101e28:	1085883a 	add	r2,r2,r2
81101e2c:	1007883a 	mov	r3,r2
81101e30:	e0bffc17 	ldw	r2,-16(fp)
81101e34:	10c5883a 	add	r2,r2,r3
81101e38:	10800017 	ldw	r2,0(r2)
81101e3c:	1009883a 	mov	r4,r2
81101e40:	e0bffa03 	ldbu	r2,-24(fp)
81101e44:	1085883a 	add	r2,r2,r2
81101e48:	1085883a 	add	r2,r2,r2
81101e4c:	1007883a 	mov	r3,r2
81101e50:	e0bffd17 	ldw	r2,-12(fp)
81101e54:	10c5883a 	add	r2,r2,r3
81101e58:	10800017 	ldw	r2,0(r2)
81101e5c:	1007883a 	mov	r3,r2
81101e60:	e0800317 	ldw	r2,12(fp)
81101e64:	d8800115 	stw	r2,4(sp)
81101e68:	e0800217 	ldw	r2,8(fp)
81101e6c:	d8800015 	stw	r2,0(sp)
81101e70:	180f883a 	mov	r7,r3
81101e74:	200d883a 	mov	r6,r4
81101e78:	800b883a 	mov	r5,r16
81101e7c:	e13ffb17 	ldw	r4,-20(fp)
81101e80:	11368700 	call	81136870 <alt_msgdma_construct_standard_mm_to_mm_descriptor>
81101e84:	10000226 	beq	r2,zero,81101e90 <DMA_MULTIPLE_TRANSFER+0x18c>
      bSuccess = FALSE;
81101e88:	e03ff915 	stw	zero,-28(fp)
81101e8c:	00000506 	br	81101ea4 <DMA_MULTIPLE_TRANSFER+0x1a0>
    } else {
      if (alt_msgdma_standard_descriptor_async_transfer(DmaDevice, &DmaDescriptor) != 0) {
81101e90:	800b883a 	mov	r5,r16
81101e94:	e13ffb17 	ldw	r4,-20(fp)
81101e98:	1137ae40 	call	81137ae4 <alt_msgdma_standard_descriptor_async_transfer>
81101e9c:	10000126 	beq	r2,zero,81101ea4 <DMA_MULTIPLE_TRANSFER+0x1a0>
        bSuccess = FALSE;
81101ea0:	e03ff915 	stw	zero,-28(fp)
      }
    }
  }

  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
81101ea4:	e0bff917 	ldw	r2,-28(fp)
81101ea8:	10800060 	cmpeqi	r2,r2,1
81101eac:	1007883a 	mov	r3,r2
81101eb0:	e0800417 	ldw	r2,16(fp)
81101eb4:	10800060 	cmpeqi	r2,r2,1
81101eb8:	1884703a 	and	r2,r3,r2
81101ebc:	10803fcc 	andi	r2,r2,255
81101ec0:	10000d26 	beq	r2,zero,81101ef8 <DMA_MULTIPLE_TRANSFER+0x1f4>
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81101ec4:	00000706 	br	81101ee4 <DMA_MULTIPLE_TRANSFER+0x1e0>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
81101ec8:	e0800517 	ldw	r2,20(fp)
81101ecc:	1000031e 	bne	r2,zero,81101edc <DMA_MULTIPLE_TRANSFER+0x1d8>
    	usleep(1000);
81101ed0:	0100fa04 	movi	r4,1000
81101ed4:	11249c40 	call	811249c4 <usleep>
81101ed8:	00000206 	br	81101ee4 <DMA_MULTIPLE_TRANSFER+0x1e0>
      } else {
    	usleep(WaitPeriodUs);
81101edc:	e1000517 	ldw	r4,20(fp)
81101ee0:	11249c40 	call	811249c4 <usleep>
      }
    }
  }

  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81101ee4:	e0bffb17 	ldw	r2,-20(fp)
81101ee8:	10800317 	ldw	r2,12(r2)
81101eec:	10800037 	ldwio	r2,0(r2)
81101ef0:	1080004c 	andi	r2,r2,1
81101ef4:	103ff41e 	bne	r2,zero,81101ec8 <__reset+0xfb0e1ec8>
    	usleep(WaitPeriodUs);
      }
    }
  }
  
  return bSuccess;
81101ef8:	e0bff917 	ldw	r2,-28(fp)
}
81101efc:	e6ffff04 	addi	sp,fp,-4
81101f00:	dfc00217 	ldw	ra,8(sp)
81101f04:	df000117 	ldw	fp,4(sp)
81101f08:	dc000017 	ldw	r16,0(sp)
81101f0c:	dec00304 	addi	sp,sp,12
81101f10:	f800283a 	ret

81101f14 <POWER_Read>:
#include "sense.h"

bool POWER_Read(alt_u32 szVol[POWER_PORT_NUM]){
81101f14:	deffef04 	addi	sp,sp,-68
81101f18:	de00012e 	bgeu	sp,et,81101f20 <POWER_Read+0xc>
81101f1c:	003b68fa 	trap	3
81101f20:	dfc01015 	stw	ra,64(sp)
81101f24:	df000f15 	stw	fp,60(sp)
81101f28:	df000f04 	addi	fp,sp,60
81101f2c:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = TRUE;
81101f30:	00800044 	movi	r2,1
81101f34:	e0bff315 	stw	r2,-52(fp)
    int i,c, nPortIndex=0;
81101f38:	e03ff615 	stw	zero,-40(fp)
    int szPortNum[] = {POWER_DEVICE0_PORT_NUM, POWER_DEVICE1_PORT_NUM};
81101f3c:	00800204 	movi	r2,8
81101f40:	e0bffc15 	stw	r2,-16(fp)
81101f44:	00800104 	movi	r2,4
81101f48:	e0bffd15 	stw	r2,-12(fp)
    alt_u32 Value32;
    alt_u8 NextChannel,Channel, HEAD, SIGN, SGL, PARITY;
    const bool bEN=TRUE; // alwasy update next conversion channel
81101f4c:	00800044 	movi	r2,1
81101f50:	e0bff715 	stw	r2,-36(fp)
    const bool bSIGN=TRUE; // VolDrop = CH1-CH0
81101f54:	00800044 	movi	r2,1
81101f58:	e0bff815 	stw	r2,-32(fp)
    const bool bSGL=FALSE; // GSGL=FALSE: Diff
81101f5c:	e03ff915 	stw	zero,-28(fp)
    for(c=0;c<POWER_DEVICE_NUM && bSuccess;c++){
81101f60:	e03ff515 	stw	zero,-44(fp)
81101f64:	00007106 	br	8110212c <POWER_Read+0x218>
        NextChannel = 0;
81101f68:	e03ffa05 	stb	zero,-24(fp)
        bSuccess = POWER_SPI_RW(c, NextChannel, bEN, bSIGN, bSGL, &szVol[0]); // set conversion channel: 0
81101f6c:	e0bff517 	ldw	r2,-44(fp)
81101f70:	10c03fcc 	andi	r3,r2,255
81101f74:	e13ffa03 	ldbu	r4,-24(fp)
81101f78:	e0bfff17 	ldw	r2,-4(fp)
81101f7c:	d8800115 	stw	r2,4(sp)
81101f80:	e0bff917 	ldw	r2,-28(fp)
81101f84:	d8800015 	stw	r2,0(sp)
81101f88:	e1fff817 	ldw	r7,-32(fp)
81101f8c:	e1bff717 	ldw	r6,-36(fp)
81101f90:	200b883a 	mov	r5,r4
81101f94:	1809883a 	mov	r4,r3
81101f98:	1105d840 	call	81105d84 <POWER_SPI_RW>
81101f9c:	e0bff315 	stw	r2,-52(fp)
        for(i=0;i<szPortNum[c] && bSuccess;i++){
81101fa0:	e03ff415 	stw	zero,-48(fp)
81101fa4:	00005306 	br	811020f4 <POWER_Read+0x1e0>
            NextChannel = i + 1;
81101fa8:	e0bff417 	ldw	r2,-48(fp)
81101fac:	10800044 	addi	r2,r2,1
81101fb0:	e0bffa05 	stb	r2,-24(fp)
            bSuccess = POWER_SPI_RW(c, NextChannel, bEN, bSIGN, bSGL, &Value32);
81101fb4:	e0bff517 	ldw	r2,-44(fp)
81101fb8:	10c03fcc 	andi	r3,r2,255
81101fbc:	e13ffa03 	ldbu	r4,-24(fp)
81101fc0:	e0bffe04 	addi	r2,fp,-8
81101fc4:	d8800115 	stw	r2,4(sp)
81101fc8:	e0bff917 	ldw	r2,-28(fp)
81101fcc:	d8800015 	stw	r2,0(sp)
81101fd0:	e1fff817 	ldw	r7,-32(fp)
81101fd4:	e1bff717 	ldw	r6,-36(fp)
81101fd8:	200b883a 	mov	r5,r4
81101fdc:	1809883a 	mov	r4,r3
81101fe0:	1105d840 	call	81105d84 <POWER_SPI_RW>
81101fe4:	e0bff315 	stw	r2,-52(fp)
            if (bSuccess){
81101fe8:	e0bff317 	ldw	r2,-52(fp)
81101fec:	10003b26 	beq	r2,zero,811020dc <POWER_Read+0x1c8>
                HEAD = (Value32 >> 30) & 0x03;
81101ff0:	e0bffe17 	ldw	r2,-8(fp)
81101ff4:	1004d7ba 	srli	r2,r2,30
81101ff8:	e0bffa45 	stb	r2,-23(fp)
                Channel = (Value32 >> 1) & 0x07;
81101ffc:	e0bffe17 	ldw	r2,-8(fp)
81102000:	1004d07a 	srli	r2,r2,1
81102004:	108001cc 	andi	r2,r2,7
81102008:	e0bffa85 	stb	r2,-22(fp)
                SIGN = (Value32 >> 4 ) & 0x01;
8110200c:	e0bffe17 	ldw	r2,-8(fp)
81102010:	1004d13a 	srli	r2,r2,4
81102014:	1080004c 	andi	r2,r2,1
81102018:	e0bffac5 	stb	r2,-21(fp)
                SGL = (Value32 >> 5 ) & 0x01;
8110201c:	e0bffe17 	ldw	r2,-8(fp)
81102020:	1004d17a 	srli	r2,r2,5
81102024:	1080004c 	andi	r2,r2,1
81102028:	e0bffb05 	stb	r2,-20(fp)
                PARITY = Value32 & 0x01;
8110202c:	e0bffe17 	ldw	r2,-8(fp)
81102030:	1080004c 	andi	r2,r2,1
81102034:	e0bffb45 	stb	r2,-19(fp)
                if (HEAD != 0){
81102038:	e0bffa43 	ldbu	r2,-23(fp)
8110203c:	10000626 	beq	r2,zero,81102058 <POWER_Read+0x144>
                    printf("[%d]Unexpected HEAD\r\n",i);
81102040:	e17ff417 	ldw	r5,-48(fp)
81102044:	01204534 	movhi	r4,33044
81102048:	21270404 	addi	r4,r4,-25584
8110204c:	110f9340 	call	8110f934 <printf>
                    bSuccess = FALSE;
81102050:	e03ff315 	stw	zero,-52(fp)
81102054:	00001406 	br	811020a8 <POWER_Read+0x194>
                }else if (Channel != i){
81102058:	e0fffa83 	ldbu	r3,-22(fp)
8110205c:	e0bff417 	ldw	r2,-48(fp)
81102060:	18800926 	beq	r3,r2,81102088 <POWER_Read+0x174>
                    printf("[%d]Unexpected Channel. Expected:%d, Read:%d\r\n", i, i, Channel);
81102064:	e0bffa83 	ldbu	r2,-22(fp)
81102068:	100f883a 	mov	r7,r2
8110206c:	e1bff417 	ldw	r6,-48(fp)
81102070:	e17ff417 	ldw	r5,-48(fp)
81102074:	01204534 	movhi	r4,33044
81102078:	21270a04 	addi	r4,r4,-25560
8110207c:	110f9340 	call	8110f934 <printf>
                    bSuccess = FALSE;
81102080:	e03ff315 	stw	zero,-52(fp)
81102084:	00000806 	br	811020a8 <POWER_Read+0x194>
                }else if (SIGN ^ bSIGN){
81102088:	e0fffac3 	ldbu	r3,-21(fp)
8110208c:	e0bff817 	ldw	r2,-32(fp)
81102090:	18800526 	beq	r3,r2,811020a8 <POWER_Read+0x194>
                    printf("[%d]Unexpected SIGN\r\n",i);
81102094:	e17ff417 	ldw	r5,-48(fp)
81102098:	01204534 	movhi	r4,33044
8110209c:	21271604 	addi	r4,r4,-25512
811020a0:	110f9340 	call	8110f934 <printf>
                    bSuccess = FALSE;
811020a4:	e03ff315 	stw	zero,-52(fp)
                }else if (SGL ^ SGL){
                    printf("[%d]Unexpected SGL\r\n",i);
                    bSuccess = FALSE;
                }
                if (bSuccess)
811020a8:	e0bff317 	ldw	r2,-52(fp)
811020ac:	10000e26 	beq	r2,zero,811020e8 <POWER_Read+0x1d4>
                    szVol[nPortIndex++] = Value32; //(Value32 >> 6) & 0xFFFFFF; // 24 bits
811020b0:	e0bff617 	ldw	r2,-40(fp)
811020b4:	10c00044 	addi	r3,r2,1
811020b8:	e0fff615 	stw	r3,-40(fp)
811020bc:	1085883a 	add	r2,r2,r2
811020c0:	1085883a 	add	r2,r2,r2
811020c4:	1007883a 	mov	r3,r2
811020c8:	e0bfff17 	ldw	r2,-4(fp)
811020cc:	10c5883a 	add	r2,r2,r3
811020d0:	e0fffe17 	ldw	r3,-8(fp)
811020d4:	10c00015 	stw	r3,0(r2)
811020d8:	00000306 	br	811020e8 <POWER_Read+0x1d4>
            }else{
                printf("SPI Read Error\r\n");
811020dc:	01204534 	movhi	r4,33044
811020e0:	21271c04 	addi	r4,r4,-25488
811020e4:	110fa600 	call	8110fa60 <puts>
    const bool bSIGN=TRUE; // VolDrop = CH1-CH0
    const bool bSGL=FALSE; // GSGL=FALSE: Diff
    for(c=0;c<POWER_DEVICE_NUM && bSuccess;c++){
        NextChannel = 0;
        bSuccess = POWER_SPI_RW(c, NextChannel, bEN, bSIGN, bSGL, &szVol[0]); // set conversion channel: 0
        for(i=0;i<szPortNum[c] && bSuccess;i++){
811020e8:	e0bff417 	ldw	r2,-48(fp)
811020ec:	10800044 	addi	r2,r2,1
811020f0:	e0bff415 	stw	r2,-48(fp)
811020f4:	e0bff517 	ldw	r2,-44(fp)
811020f8:	1085883a 	add	r2,r2,r2
811020fc:	1085883a 	add	r2,r2,r2
81102100:	e0fff304 	addi	r3,fp,-52
81102104:	1885883a 	add	r2,r3,r2
81102108:	10800904 	addi	r2,r2,36
8110210c:	10800017 	ldw	r2,0(r2)
81102110:	e0fff417 	ldw	r3,-48(fp)
81102114:	1880020e 	bge	r3,r2,81102120 <POWER_Read+0x20c>
81102118:	e0bff317 	ldw	r2,-52(fp)
8110211c:	103fa21e 	bne	r2,zero,81101fa8 <__reset+0xfb0e1fa8>
    alt_u32 Value32;
    alt_u8 NextChannel,Channel, HEAD, SIGN, SGL, PARITY;
    const bool bEN=TRUE; // alwasy update next conversion channel
    const bool bSIGN=TRUE; // VolDrop = CH1-CH0
    const bool bSGL=FALSE; // GSGL=FALSE: Diff
    for(c=0;c<POWER_DEVICE_NUM && bSuccess;c++){
81102120:	e0bff517 	ldw	r2,-44(fp)
81102124:	10800044 	addi	r2,r2,1
81102128:	e0bff515 	stw	r2,-44(fp)
8110212c:	e0bff517 	ldw	r2,-44(fp)
81102130:	10800088 	cmpgei	r2,r2,2
81102134:	1000021e 	bne	r2,zero,81102140 <POWER_Read+0x22c>
81102138:	e0bff317 	ldw	r2,-52(fp)
8110213c:	103f8a1e 	bne	r2,zero,81101f68 <__reset+0xfb0e1f68>
            }else{
                printf("SPI Read Error\r\n");
            }
        } // for i
    } // for c
    return bSuccess;
81102140:	e0bff317 	ldw	r2,-52(fp)
 }
81102144:	e037883a 	mov	sp,fp
81102148:	dfc00117 	ldw	ra,4(sp)
8110214c:	df000017 	ldw	fp,0(sp)
81102150:	dec00204 	addi	sp,sp,8
81102154:	f800283a 	ret

81102158 <TEMP_Read>:

 bool TEMP_Read(alt_8 *pFpgaTemp, alt_8 *pBoardTemp){
81102158:	defff904 	addi	sp,sp,-28
8110215c:	de00012e 	bgeu	sp,et,81102164 <TEMP_Read+0xc>
81102160:	003b68fa 	trap	3
81102164:	dfc00615 	stw	ra,24(sp)
81102168:	df000515 	stw	fp,20(sp)
8110216c:	df000504 	addi	fp,sp,20
81102170:	e13ffe15 	stw	r4,-8(fp)
81102174:	e17fff15 	stw	r5,-4(fp)
        bool bSuccess;
        const alt_u8 DeviceAddr = 0x30;
81102178:	00800c04 	movi	r2,48
8110217c:	e0bffd85 	stb	r2,-10(fp)
        alt_8 FpgaTemp, BoardTemp;
        char Data;

        // read local temp
        bSuccess = I2C_Read(TEMP_SCL_BASE, TEMP_SDA_BASE, DeviceAddr, 0x00, &Data);
81102180:	e0bffd83 	ldbu	r2,-10(fp)
81102184:	10c03fcc 	andi	r3,r2,255
81102188:	18c0201c 	xori	r3,r3,128
8110218c:	18ffe004 	addi	r3,r3,-128
81102190:	e0bffdc4 	addi	r2,fp,-9
81102194:	d8800015 	stw	r2,0(sp)
81102198:	000f883a 	mov	r7,zero
8110219c:	180d883a 	mov	r6,r3
811021a0:	01600034 	movhi	r5,32768
811021a4:	29415804 	addi	r5,r5,1376
811021a8:	01200034 	movhi	r4,32768
811021ac:	21015c04 	addi	r4,r4,1392
811021b0:	11053640 	call	81105364 <I2C_Read>
811021b4:	e0bffc15 	stw	r2,-16(fp)
        if (bSuccess)
811021b8:	e0bffc17 	ldw	r2,-16(fp)
811021bc:	10000226 	beq	r2,zero,811021c8 <TEMP_Read+0x70>
            BoardTemp = Data;
811021c0:	e0bffdc3 	ldbu	r2,-9(fp)
811021c4:	e0bffd45 	stb	r2,-11(fp)

        // read remote temp
        if (bSuccess){
811021c8:	e0bffc17 	ldw	r2,-16(fp)
811021cc:	10001226 	beq	r2,zero,81102218 <TEMP_Read+0xc0>
            bSuccess = I2C_Read(TEMP_SCL_BASE, TEMP_SDA_BASE, DeviceAddr, 0x01, &Data);
811021d0:	e0bffd83 	ldbu	r2,-10(fp)
811021d4:	10c03fcc 	andi	r3,r2,255
811021d8:	18c0201c 	xori	r3,r3,128
811021dc:	18ffe004 	addi	r3,r3,-128
811021e0:	e0bffdc4 	addi	r2,fp,-9
811021e4:	d8800015 	stw	r2,0(sp)
811021e8:	01c00044 	movi	r7,1
811021ec:	180d883a 	mov	r6,r3
811021f0:	01600034 	movhi	r5,32768
811021f4:	29415804 	addi	r5,r5,1376
811021f8:	01200034 	movhi	r4,32768
811021fc:	21015c04 	addi	r4,r4,1392
81102200:	11053640 	call	81105364 <I2C_Read>
81102204:	e0bffc15 	stw	r2,-16(fp)
            if (bSuccess)
81102208:	e0bffc17 	ldw	r2,-16(fp)
8110220c:	10000226 	beq	r2,zero,81102218 <TEMP_Read+0xc0>
                FpgaTemp = Data;
81102210:	e0bffdc3 	ldbu	r2,-9(fp)
81102214:	e0bffd05 	stb	r2,-12(fp)
        }
        //
        if (bSuccess){
81102218:	e0bffc17 	ldw	r2,-16(fp)
8110221c:	10000626 	beq	r2,zero,81102238 <TEMP_Read+0xe0>
           *pFpgaTemp = FpgaTemp;
81102220:	e0bffe17 	ldw	r2,-8(fp)
81102224:	e0fffd03 	ldbu	r3,-12(fp)
81102228:	10c00005 	stb	r3,0(r2)
           *pBoardTemp = BoardTemp;
8110222c:	e0bfff17 	ldw	r2,-4(fp)
81102230:	e0fffd43 	ldbu	r3,-11(fp)
81102234:	10c00005 	stb	r3,0(r2)
        }

        return bSuccess;
81102238:	e0bffc17 	ldw	r2,-16(fp)
 }
8110223c:	e037883a 	mov	sp,fp
81102240:	dfc00117 	ldw	ra,4(sp)
81102244:	df000017 	ldw	fp,0(sp)
81102248:	dec00204 	addi	sp,sp,8
8110224c:	f800283a 	ret

81102250 <sense_log_temp>:


 bool sense_log_temp(alt_u8 *FpgaTemp, alt_u8 *BoardTemp){
81102250:	defffb04 	addi	sp,sp,-20
81102254:	de00012e 	bgeu	sp,et,8110225c <sense_log_temp+0xc>
81102258:	003b68fa 	trap	3
8110225c:	dfc00415 	stw	ra,16(sp)
81102260:	df000315 	stw	fp,12(sp)
81102264:	df000304 	addi	fp,sp,12
81102268:	e13ffe15 	stw	r4,-8(fp)
8110226c:	e17fff15 	stw	r5,-4(fp)
	bool bSuccess;

	 // show temp
	 bSuccess = TEMP_Read(FpgaTemp, BoardTemp);
81102270:	e17fff17 	ldw	r5,-4(fp)
81102274:	e13ffe17 	ldw	r4,-8(fp)
81102278:	11021580 	call	81102158 <TEMP_Read>
8110227c:	e0bffd15 	stw	r2,-12(fp)

	 return(bSuccess);
81102280:	e0bffd17 	ldw	r2,-12(fp)
 }
81102284:	e037883a 	mov	sp,fp
81102288:	dfc00117 	ldw	ra,4(sp)
8110228c:	df000017 	ldw	fp,0(sp)
81102290:	dec00204 	addi	sp,sp,8
81102294:	f800283a 	ret

81102298 <sense_log>:


 void sense_log(void){
81102298:	deff0504 	addi	sp,sp,-1004
8110229c:	de00012e 	bgeu	sp,et,811022a4 <sense_log+0xc>
811022a0:	003b68fa 	trap	3
811022a4:	dfc0fa15 	stw	ra,1000(sp)
811022a8:	df00f915 	stw	fp,996(sp)
811022ac:	dd40f815 	stw	r21,992(sp)
811022b0:	dd00f715 	stw	r20,988(sp)
811022b4:	dcc0f615 	stw	r19,984(sp)
811022b8:	dc80f515 	stw	r18,980(sp)
811022bc:	dc40f415 	stw	r17,976(sp)
811022c0:	dc00f315 	stw	r16,972(sp)
811022c4:	df00f904 	addi	fp,sp,996
 	  bool bSuccess;
 	    int i;
 	    const float fRef = 5.0; // 5.0V
811022c8:	00902834 	movhi	r2,16544
811022cc:	e0bf0e15 	stw	r2,-968(fp)
 	    float fVolDrop, fCurrent, fPower, fVol;
 	    alt_u32 szVol[POWER_PORT_NUM];
 	    alt_u32 SIG, MSB, RESULT;
 	    float szRes[] = {0.003, 0.001, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003};
811022d0:	008ed174 	movhi	r2,15173
811022d4:	10a6e984 	addi	r2,r2,-25690
811022d8:	e0bf2215 	stw	r2,-888(fp)
811022dc:	008ea0f4 	movhi	r2,14979
811022e0:	10849bc4 	addi	r2,r2,4719
811022e4:	e0bf2315 	stw	r2,-884(fp)
811022e8:	008ed174 	movhi	r2,15173
811022ec:	10a6e984 	addi	r2,r2,-25690
811022f0:	e0bf2415 	stw	r2,-880(fp)
811022f4:	008ed174 	movhi	r2,15173
811022f8:	10a6e984 	addi	r2,r2,-25690
811022fc:	e0bf2515 	stw	r2,-876(fp)
81102300:	008ed174 	movhi	r2,15173
81102304:	10a6e984 	addi	r2,r2,-25690
81102308:	e0bf2615 	stw	r2,-872(fp)
8110230c:	008ed174 	movhi	r2,15173
81102310:	10a6e984 	addi	r2,r2,-25690
81102314:	e0bf2715 	stw	r2,-868(fp)
81102318:	008ed174 	movhi	r2,15173
8110231c:	10a6e984 	addi	r2,r2,-25690
81102320:	e0bf2815 	stw	r2,-864(fp)
81102324:	008ed174 	movhi	r2,15173
81102328:	10a6e984 	addi	r2,r2,-25690
8110232c:	e0bf2915 	stw	r2,-860(fp)
81102330:	008ed174 	movhi	r2,15173
81102334:	10a6e984 	addi	r2,r2,-25690
81102338:	e0bf2a15 	stw	r2,-856(fp)
8110233c:	008ed174 	movhi	r2,15173
81102340:	10a6e984 	addi	r2,r2,-25690
81102344:	e0bf2b15 	stw	r2,-852(fp)
81102348:	008ed174 	movhi	r2,15173
8110234c:	10a6e984 	addi	r2,r2,-25690
81102350:	e0bf2c15 	stw	r2,-848(fp)
81102354:	008ed174 	movhi	r2,15173
81102358:	10a6e984 	addi	r2,r2,-25690
8110235c:	e0bf2d15 	stw	r2,-844(fp)
 	    float szRefVol[] = {0.9, 0.9, 3.0, 0.9, 1.8, 2.5, 1.8, 2.5, 1.1, 1.4, 3.3, 2.5};
81102360:	008fd9b4 	movhi	r2,16230
81102364:	10999984 	addi	r2,r2,26214
81102368:	e0bf2e15 	stw	r2,-840(fp)
8110236c:	008fd9b4 	movhi	r2,16230
81102370:	10999984 	addi	r2,r2,26214
81102374:	e0bf2f15 	stw	r2,-836(fp)
81102378:	00901034 	movhi	r2,16448
8110237c:	e0bf3015 	stw	r2,-832(fp)
81102380:	008fd9b4 	movhi	r2,16230
81102384:	10999984 	addi	r2,r2,26214
81102388:	e0bf3115 	stw	r2,-828(fp)
8110238c:	008ff9b4 	movhi	r2,16358
81102390:	10999984 	addi	r2,r2,26214
81102394:	e0bf3215 	stw	r2,-824(fp)
81102398:	00900834 	movhi	r2,16416
8110239c:	e0bf3315 	stw	r2,-820(fp)
811023a0:	008ff9b4 	movhi	r2,16358
811023a4:	10999984 	addi	r2,r2,26214
811023a8:	e0bf3415 	stw	r2,-816(fp)
811023ac:	00900834 	movhi	r2,16416
811023b0:	e0bf3515 	stw	r2,-812(fp)
811023b4:	008fe374 	movhi	r2,16269
811023b8:	10b33344 	addi	r2,r2,-13107
811023bc:	e0bf3615 	stw	r2,-808(fp)
811023c0:	008fecf4 	movhi	r2,16307
811023c4:	108cccc4 	addi	r2,r2,13107
811023c8:	e0bf3715 	stw	r2,-804(fp)
811023cc:	009014f4 	movhi	r2,16467
811023d0:	108cccc4 	addi	r2,r2,13107
811023d4:	e0bf3815 	stw	r2,-800(fp)
811023d8:	00900834 	movhi	r2,16416
811023dc:	e0bf3915 	stw	r2,-796(fp)
 	    char szName[][64] = {
811023e0:	00a04534 	movhi	r2,33044
811023e4:	10a754c4 	addi	r2,r2,-25261
811023e8:	e0ff3a04 	addi	r3,fp,-792
811023ec:	1009883a 	mov	r4,r2
811023f0:	0080c004 	movi	r2,768
811023f4:	100d883a 	mov	r6,r2
811023f8:	200b883a 	mov	r5,r4
811023fc:	1809883a 	mov	r4,r3
81102400:	110f61c0 	call	8110f61c <memcpy>
 	        "VCC3P3_HSMC",
 	        "HSMB_VCCIO",
 	    };

 	        // show power
 	        bSuccess = POWER_Read(szVol);
81102404:	e0bf1604 	addi	r2,fp,-936
81102408:	1009883a 	mov	r4,r2
8110240c:	1101f140 	call	81101f14 <POWER_Read>
81102410:	e0bf0f15 	stw	r2,-964(fp)
 	        if (bSuccess){
81102414:	e0bf0f17 	ldw	r2,-964(fp)
81102418:	10013b26 	beq	r2,zero,81102908 <sense_log+0x670>
 	            for(i=0;i<POWER_PORT_NUM && bSuccess;i++){
8110241c:	e03f0c15 	stw	zero,-976(fp)
81102420:	00013006 	br	811028e4 <sense_log+0x64c>
 	                SIG = (szVol[i] >> 29) & 0x01;
81102424:	e0bf0c17 	ldw	r2,-976(fp)
81102428:	1085883a 	add	r2,r2,r2
8110242c:	1085883a 	add	r2,r2,r2
81102430:	e0ff0c04 	addi	r3,fp,-976
81102434:	1885883a 	add	r2,r3,r2
81102438:	10800a04 	addi	r2,r2,40
8110243c:	10800017 	ldw	r2,0(r2)
81102440:	1004d77a 	srli	r2,r2,29
81102444:	1080004c 	andi	r2,r2,1
81102448:	e0bf1015 	stw	r2,-960(fp)
 	                MSB = (szVol[i] >> 28) & 0x01;
8110244c:	e0bf0c17 	ldw	r2,-976(fp)
81102450:	1085883a 	add	r2,r2,r2
81102454:	1085883a 	add	r2,r2,r2
81102458:	e0ff0c04 	addi	r3,fp,-976
8110245c:	1885883a 	add	r2,r3,r2
81102460:	10800a04 	addi	r2,r2,40
81102464:	10800017 	ldw	r2,0(r2)
81102468:	1004d73a 	srli	r2,r2,28
8110246c:	1080004c 	andi	r2,r2,1
81102470:	e0bf1115 	stw	r2,-956(fp)
 	                RESULT = (szVol[i] >> 6) & 0x3FFFFF; // 22 bits
81102474:	e0bf0c17 	ldw	r2,-976(fp)
81102478:	1085883a 	add	r2,r2,r2
8110247c:	1085883a 	add	r2,r2,r2
81102480:	e0ff0c04 	addi	r3,fp,-976
81102484:	1885883a 	add	r2,r3,r2
81102488:	10800a04 	addi	r2,r2,40
8110248c:	10800017 	ldw	r2,0(r2)
81102490:	1006d1ba 	srli	r3,r2,6
81102494:	00801034 	movhi	r2,64
81102498:	10bfffc4 	addi	r2,r2,-1
8110249c:	1884703a 	and	r2,r3,r2
811024a0:	e0bf1215 	stw	r2,-952(fp)
 	                if (MSB == 0)
811024a4:	e0bf1117 	ldw	r2,-956(fp)
811024a8:	1000091e 	bne	r2,zero,811024d0 <sense_log+0x238>
 	                    fVolDrop = (float)(RESULT)/(float)0x400000;
811024ac:	e13f1217 	ldw	r4,-952(fp)
811024b0:	110d9840 	call	8110d984 <__floatunsisf>
811024b4:	1007883a 	mov	r3,r2
811024b8:	0152a034 	movhi	r5,19072
811024bc:	1809883a 	mov	r4,r3
811024c0:	110d00c0 	call	8110d00c <__divsf3>
811024c4:	1007883a 	mov	r3,r2
811024c8:	e0ff0d15 	stw	r3,-972(fp)
811024cc:	00000106 	br	811024d4 <sense_log+0x23c>
 	                else
 	                    fVolDrop = 0.0; //always be positive in schematic // -(float)(0x400000-RESULT)/(float)0x400000;
811024d0:	e03f0d15 	stw	zero,-972(fp)
 	                if (SIG && MSB){
811024d4:	e0bf1017 	ldw	r2,-960(fp)
811024d8:	10001f26 	beq	r2,zero,81102558 <sense_log+0x2c0>
811024dc:	e0bf1117 	ldw	r2,-956(fp)
811024e0:	10001d26 	beq	r2,zero,81102558 <sense_log+0x2c0>
 	                    fVol = fRef*0.5;
811024e4:	014fc034 	movhi	r5,16128
811024e8:	e13f0e17 	ldw	r4,-968(fp)
811024ec:	110d4540 	call	8110d454 <__mulsf3>
811024f0:	1007883a 	mov	r3,r2
811024f4:	e0ff1315 	stw	r3,-948(fp)
 	                    printf("[%s:%06XH,Over]\r\n  VolDrop:%f(V)\r\n", szName[i], (int)szVol[i], fVol);
811024f8:	e0ff3a04 	addi	r3,fp,-792
811024fc:	e0bf0c17 	ldw	r2,-976(fp)
81102500:	100491ba 	slli	r2,r2,6
81102504:	18a1883a 	add	r16,r3,r2
81102508:	e0bf0c17 	ldw	r2,-976(fp)
8110250c:	1085883a 	add	r2,r2,r2
81102510:	1085883a 	add	r2,r2,r2
81102514:	e0ff0c04 	addi	r3,fp,-976
81102518:	1885883a 	add	r2,r3,r2
8110251c:	10800a04 	addi	r2,r2,40
81102520:	10800017 	ldw	r2,0(r2)
81102524:	1023883a 	mov	r17,r2
81102528:	e13f1317 	ldw	r4,-948(fp)
8110252c:	110e19c0 	call	8110e19c <__extendsfdf2>
81102530:	1009883a 	mov	r4,r2
81102534:	180b883a 	mov	r5,r3
81102538:	d9400015 	stw	r5,0(sp)
8110253c:	200f883a 	mov	r7,r4
81102540:	880d883a 	mov	r6,r17
81102544:	800b883a 	mov	r5,r16
81102548:	01204534 	movhi	r4,33044
8110254c:	21272004 	addi	r4,r4,-25472
81102550:	110f9340 	call	8110f934 <printf>
81102554:	0000e006 	br	811028d8 <sense_log+0x640>
 	                }else if (SIG && !MSB){
81102558:	e0bf1017 	ldw	r2,-960(fp)
8110255c:	10005d26 	beq	r2,zero,811026d4 <sense_log+0x43c>
81102560:	e0bf1117 	ldw	r2,-956(fp)
81102564:	10005b1e 	bne	r2,zero,811026d4 <sense_log+0x43c>
 	                    fVol = fRef*0.5*fVolDrop;
81102568:	e13f0e17 	ldw	r4,-968(fp)
8110256c:	110e19c0 	call	8110e19c <__extendsfdf2>
81102570:	1011883a 	mov	r8,r2
81102574:	1813883a 	mov	r9,r3
81102578:	000d883a 	mov	r6,zero
8110257c:	01cff834 	movhi	r7,16352
81102580:	4009883a 	mov	r4,r8
81102584:	480b883a 	mov	r5,r9
81102588:	110da7c0 	call	8110da7c <__muldf3>
8110258c:	1009883a 	mov	r4,r2
81102590:	180b883a 	mov	r5,r3
81102594:	2021883a 	mov	r16,r4
81102598:	2823883a 	mov	r17,r5
8110259c:	e13f0d17 	ldw	r4,-972(fp)
811025a0:	110e19c0 	call	8110e19c <__extendsfdf2>
811025a4:	1009883a 	mov	r4,r2
811025a8:	180b883a 	mov	r5,r3
811025ac:	200d883a 	mov	r6,r4
811025b0:	280f883a 	mov	r7,r5
811025b4:	8009883a 	mov	r4,r16
811025b8:	880b883a 	mov	r5,r17
811025bc:	110da7c0 	call	8110da7c <__muldf3>
811025c0:	1009883a 	mov	r4,r2
811025c4:	180b883a 	mov	r5,r3
811025c8:	2005883a 	mov	r2,r4
811025cc:	2807883a 	mov	r3,r5
811025d0:	1009883a 	mov	r4,r2
811025d4:	180b883a 	mov	r5,r3
811025d8:	110e2b40 	call	8110e2b4 <__truncdfsf2>
811025dc:	1007883a 	mov	r3,r2
811025e0:	e0ff1315 	stw	r3,-948(fp)
 	                    fCurrent = fVolDrop / szRes[i];
811025e4:	e0bf0c17 	ldw	r2,-976(fp)
811025e8:	1085883a 	add	r2,r2,r2
811025ec:	1085883a 	add	r2,r2,r2
811025f0:	e0ff0c04 	addi	r3,fp,-976
811025f4:	1885883a 	add	r2,r3,r2
811025f8:	10801604 	addi	r2,r2,88
811025fc:	10c00017 	ldw	r3,0(r2)
81102600:	180b883a 	mov	r5,r3
81102604:	e13f0d17 	ldw	r4,-972(fp)
81102608:	110d00c0 	call	8110d00c <__divsf3>
8110260c:	1007883a 	mov	r3,r2
81102610:	e0ff1415 	stw	r3,-944(fp)
 	                    fPower = szRefVol[i] * fCurrent;
81102614:	e0bf0c17 	ldw	r2,-976(fp)
81102618:	1085883a 	add	r2,r2,r2
8110261c:	1085883a 	add	r2,r2,r2
81102620:	e0ff0c04 	addi	r3,fp,-976
81102624:	1885883a 	add	r2,r3,r2
81102628:	10802204 	addi	r2,r2,136
8110262c:	10c00017 	ldw	r3,0(r2)
81102630:	e17f1417 	ldw	r5,-944(fp)
81102634:	1809883a 	mov	r4,r3
81102638:	110d4540 	call	8110d454 <__mulsf3>
8110263c:	1007883a 	mov	r3,r2
81102640:	e0ff1515 	stw	r3,-940(fp)
 	                    printf("[%s:%06XH,Pos]\r\n  VolDrop:%f(V), Current:%f(A), Power:%f(W)\r\n", szName[i], (int)szVol[i], fVolDrop, fCurrent, fPower);
81102644:	e0ff3a04 	addi	r3,fp,-792
81102648:	e0bf0c17 	ldw	r2,-976(fp)
8110264c:	100491ba 	slli	r2,r2,6
81102650:	18a9883a 	add	r20,r3,r2
81102654:	e0bf0c17 	ldw	r2,-976(fp)
81102658:	1085883a 	add	r2,r2,r2
8110265c:	1085883a 	add	r2,r2,r2
81102660:	e0ff0c04 	addi	r3,fp,-976
81102664:	1885883a 	add	r2,r3,r2
81102668:	10800a04 	addi	r2,r2,40
8110266c:	10800017 	ldw	r2,0(r2)
81102670:	102b883a 	mov	r21,r2
81102674:	e13f0d17 	ldw	r4,-972(fp)
81102678:	110e19c0 	call	8110e19c <__extendsfdf2>
8110267c:	1025883a 	mov	r18,r2
81102680:	1827883a 	mov	r19,r3
81102684:	e13f1417 	ldw	r4,-944(fp)
81102688:	110e19c0 	call	8110e19c <__extendsfdf2>
8110268c:	1021883a 	mov	r16,r2
81102690:	1823883a 	mov	r17,r3
81102694:	e13f1517 	ldw	r4,-940(fp)
81102698:	110e19c0 	call	8110e19c <__extendsfdf2>
8110269c:	1009883a 	mov	r4,r2
811026a0:	180b883a 	mov	r5,r3
811026a4:	d9000315 	stw	r4,12(sp)
811026a8:	d9400415 	stw	r5,16(sp)
811026ac:	dc000115 	stw	r16,4(sp)
811026b0:	dc400215 	stw	r17,8(sp)
811026b4:	dcc00015 	stw	r19,0(sp)
811026b8:	900f883a 	mov	r7,r18
811026bc:	a80d883a 	mov	r6,r21
811026c0:	a00b883a 	mov	r5,r20
811026c4:	01204534 	movhi	r4,33044
811026c8:	21272904 	addi	r4,r4,-25436
811026cc:	110f9340 	call	8110f934 <printf>
811026d0:	00008106 	br	811028d8 <sense_log+0x640>
 	                }else if (!SIG && MSB){
811026d4:	e0bf1017 	ldw	r2,-960(fp)
811026d8:	10005d1e 	bne	r2,zero,81102850 <sense_log+0x5b8>
811026dc:	e0bf1117 	ldw	r2,-956(fp)
811026e0:	10005b26 	beq	r2,zero,81102850 <sense_log+0x5b8>
 	                    fVol = fRef*0.5*fVolDrop;
811026e4:	e13f0e17 	ldw	r4,-968(fp)
811026e8:	110e19c0 	call	8110e19c <__extendsfdf2>
811026ec:	1011883a 	mov	r8,r2
811026f0:	1813883a 	mov	r9,r3
811026f4:	000d883a 	mov	r6,zero
811026f8:	01cff834 	movhi	r7,16352
811026fc:	4009883a 	mov	r4,r8
81102700:	480b883a 	mov	r5,r9
81102704:	110da7c0 	call	8110da7c <__muldf3>
81102708:	1009883a 	mov	r4,r2
8110270c:	180b883a 	mov	r5,r3
81102710:	2021883a 	mov	r16,r4
81102714:	2823883a 	mov	r17,r5
81102718:	e13f0d17 	ldw	r4,-972(fp)
8110271c:	110e19c0 	call	8110e19c <__extendsfdf2>
81102720:	1009883a 	mov	r4,r2
81102724:	180b883a 	mov	r5,r3
81102728:	200d883a 	mov	r6,r4
8110272c:	280f883a 	mov	r7,r5
81102730:	8009883a 	mov	r4,r16
81102734:	880b883a 	mov	r5,r17
81102738:	110da7c0 	call	8110da7c <__muldf3>
8110273c:	1009883a 	mov	r4,r2
81102740:	180b883a 	mov	r5,r3
81102744:	2005883a 	mov	r2,r4
81102748:	2807883a 	mov	r3,r5
8110274c:	1009883a 	mov	r4,r2
81102750:	180b883a 	mov	r5,r3
81102754:	110e2b40 	call	8110e2b4 <__truncdfsf2>
81102758:	1007883a 	mov	r3,r2
8110275c:	e0ff1315 	stw	r3,-948(fp)
 	                    fCurrent = fVolDrop / szRes[i];
81102760:	e0bf0c17 	ldw	r2,-976(fp)
81102764:	1085883a 	add	r2,r2,r2
81102768:	1085883a 	add	r2,r2,r2
8110276c:	e0ff0c04 	addi	r3,fp,-976
81102770:	1885883a 	add	r2,r3,r2
81102774:	10801604 	addi	r2,r2,88
81102778:	10c00017 	ldw	r3,0(r2)
8110277c:	180b883a 	mov	r5,r3
81102780:	e13f0d17 	ldw	r4,-972(fp)
81102784:	110d00c0 	call	8110d00c <__divsf3>
81102788:	1007883a 	mov	r3,r2
8110278c:	e0ff1415 	stw	r3,-944(fp)
 	                    fPower = szRefVol[i] * fCurrent;
81102790:	e0bf0c17 	ldw	r2,-976(fp)
81102794:	1085883a 	add	r2,r2,r2
81102798:	1085883a 	add	r2,r2,r2
8110279c:	e0ff0c04 	addi	r3,fp,-976
811027a0:	1885883a 	add	r2,r3,r2
811027a4:	10802204 	addi	r2,r2,136
811027a8:	10c00017 	ldw	r3,0(r2)
811027ac:	e17f1417 	ldw	r5,-944(fp)
811027b0:	1809883a 	mov	r4,r3
811027b4:	110d4540 	call	8110d454 <__mulsf3>
811027b8:	1007883a 	mov	r3,r2
811027bc:	e0ff1515 	stw	r3,-940(fp)
 	                    printf("[%s:%06XH,Neg]\r\n  VolDrop:%f(V), Current:%f(A), Power:%f(W)\r\n", szName[i], (int)szVol[i], fVolDrop, fCurrent, fPower);
811027c0:	e0ff3a04 	addi	r3,fp,-792
811027c4:	e0bf0c17 	ldw	r2,-976(fp)
811027c8:	100491ba 	slli	r2,r2,6
811027cc:	18a9883a 	add	r20,r3,r2
811027d0:	e0bf0c17 	ldw	r2,-976(fp)
811027d4:	1085883a 	add	r2,r2,r2
811027d8:	1085883a 	add	r2,r2,r2
811027dc:	e0ff0c04 	addi	r3,fp,-976
811027e0:	1885883a 	add	r2,r3,r2
811027e4:	10800a04 	addi	r2,r2,40
811027e8:	10800017 	ldw	r2,0(r2)
811027ec:	102b883a 	mov	r21,r2
811027f0:	e13f0d17 	ldw	r4,-972(fp)
811027f4:	110e19c0 	call	8110e19c <__extendsfdf2>
811027f8:	1025883a 	mov	r18,r2
811027fc:	1827883a 	mov	r19,r3
81102800:	e13f1417 	ldw	r4,-944(fp)
81102804:	110e19c0 	call	8110e19c <__extendsfdf2>
81102808:	1021883a 	mov	r16,r2
8110280c:	1823883a 	mov	r17,r3
81102810:	e13f1517 	ldw	r4,-940(fp)
81102814:	110e19c0 	call	8110e19c <__extendsfdf2>
81102818:	1009883a 	mov	r4,r2
8110281c:	180b883a 	mov	r5,r3
81102820:	d9000315 	stw	r4,12(sp)
81102824:	d9400415 	stw	r5,16(sp)
81102828:	dc000115 	stw	r16,4(sp)
8110282c:	dc400215 	stw	r17,8(sp)
81102830:	dcc00015 	stw	r19,0(sp)
81102834:	900f883a 	mov	r7,r18
81102838:	a80d883a 	mov	r6,r21
8110283c:	a00b883a 	mov	r5,r20
81102840:	01204534 	movhi	r4,33044
81102844:	21273904 	addi	r4,r4,-25372
81102848:	110f9340 	call	8110f934 <printf>
8110284c:	00002206 	br	811028d8 <sense_log+0x640>
 	                }else if (!SIG && !MSB){
81102850:	e0bf1017 	ldw	r2,-960(fp)
81102854:	1000201e 	bne	r2,zero,811028d8 <sense_log+0x640>
81102858:	e0bf1117 	ldw	r2,-956(fp)
8110285c:	10001e1e 	bne	r2,zero,811028d8 <sense_log+0x640>
 	                    fVol = -fRef*0.5;
81102860:	e0bf0e17 	ldw	r2,-968(fp)
81102864:	10a0003c 	xorhi	r2,r2,32768
81102868:	014fc034 	movhi	r5,16128
8110286c:	1009883a 	mov	r4,r2
81102870:	110d4540 	call	8110d454 <__mulsf3>
81102874:	1007883a 	mov	r3,r2
81102878:	e0ff1315 	stw	r3,-948(fp)
 	                    printf("[%s:%06XH,Under]\r\n  VolDrop:%f(V)\r\n", szName[i], (int)szVol[i], fVol);
8110287c:	e0ff3a04 	addi	r3,fp,-792
81102880:	e0bf0c17 	ldw	r2,-976(fp)
81102884:	100491ba 	slli	r2,r2,6
81102888:	18a1883a 	add	r16,r3,r2
8110288c:	e0bf0c17 	ldw	r2,-976(fp)
81102890:	1085883a 	add	r2,r2,r2
81102894:	1085883a 	add	r2,r2,r2
81102898:	e0ff0c04 	addi	r3,fp,-976
8110289c:	1885883a 	add	r2,r3,r2
811028a0:	10800a04 	addi	r2,r2,40
811028a4:	10800017 	ldw	r2,0(r2)
811028a8:	1023883a 	mov	r17,r2
811028ac:	e13f1317 	ldw	r4,-948(fp)
811028b0:	110e19c0 	call	8110e19c <__extendsfdf2>
811028b4:	1009883a 	mov	r4,r2
811028b8:	180b883a 	mov	r5,r3
811028bc:	d9400015 	stw	r5,0(sp)
811028c0:	200f883a 	mov	r7,r4
811028c4:	880d883a 	mov	r6,r17
811028c8:	800b883a 	mov	r5,r16
811028cc:	01204534 	movhi	r4,33044
811028d0:	21274904 	addi	r4,r4,-25308
811028d4:	110f9340 	call	8110f934 <printf>
 	    };

 	        // show power
 	        bSuccess = POWER_Read(szVol);
 	        if (bSuccess){
 	            for(i=0;i<POWER_PORT_NUM && bSuccess;i++){
811028d8:	e0bf0c17 	ldw	r2,-976(fp)
811028dc:	10800044 	addi	r2,r2,1
811028e0:	e0bf0c15 	stw	r2,-976(fp)
811028e4:	e0bf0c17 	ldw	r2,-976(fp)
811028e8:	10800308 	cmpgei	r2,r2,12
811028ec:	1000021e 	bne	r2,zero,811028f8 <sense_log+0x660>
811028f0:	e0bf0f17 	ldw	r2,-964(fp)
811028f4:	103ecb1e 	bne	r2,zero,81102424 <__reset+0xfb0e2424>
 	                }else if (!SIG && !MSB){
 	                    fVol = -fRef*0.5;
 	                    printf("[%s:%06XH,Under]\r\n  VolDrop:%f(V)\r\n", szName[i], (int)szVol[i], fVol);
 	                }
 	            }
 	            printf("\r\n");
811028f8:	01204534 	movhi	r4,33044
811028fc:	21275204 	addi	r4,r4,-25272
81102900:	110fa600 	call	8110fa60 <puts>
 	        }else{
 	            printf("Error\r\n");
 	        }
 }
81102904:	00000306 	br	81102914 <sense_log+0x67c>
 	                    printf("[%s:%06XH,Under]\r\n  VolDrop:%f(V)\r\n", szName[i], (int)szVol[i], fVol);
 	                }
 	            }
 	            printf("\r\n");
 	        }else{
 	            printf("Error\r\n");
81102908:	01204534 	movhi	r4,33044
8110290c:	21275304 	addi	r4,r4,-25268
81102910:	110fa600 	call	8110fa60 <puts>
 	        }
 }
81102914:	0001883a 	nop
81102918:	e6fffa04 	addi	sp,fp,-24
8110291c:	dfc00717 	ldw	ra,28(sp)
81102920:	df000617 	ldw	fp,24(sp)
81102924:	dd400517 	ldw	r21,20(sp)
81102928:	dd000417 	ldw	r20,16(sp)
8110292c:	dcc00317 	ldw	r19,12(sp)
81102930:	dc800217 	ldw	r18,8(sp)
81102934:	dc400117 	ldw	r17,4(sp)
81102938:	dc000017 	ldw	r16,0(sp)
8110293c:	dec00804 	addi	sp,sp,32
81102940:	f800283a 	ret

81102944 <SPWC_WRITE_REG32>:
	alt_u32 ul_spwc_g_interface_control_status_register_value      = 0x00000000;
	alt_u32 ul_spwc_g_spacewire_link_control_status_register_value = 0x00000400;
	alt_u32 ul_spwc_h_interface_control_status_register_value      = 0x00000000;
	alt_u32 ul_spwc_h_spacewire_link_control_status_register_value = 0x00000400;

	void SPWC_WRITE_REG32(char c_SpwID, alt_u8 uc_RegisterAddress, alt_u32 ul_RegisterValue){
81102944:	defffb04 	addi	sp,sp,-20
81102948:	de00012e 	bgeu	sp,et,81102950 <SPWC_WRITE_REG32+0xc>
8110294c:	003b68fa 	trap	3
81102950:	df000415 	stw	fp,16(sp)
81102954:	df000404 	addi	fp,sp,16
81102958:	2007883a 	mov	r3,r4
8110295c:	2805883a 	mov	r2,r5
81102960:	e1bfff15 	stw	r6,-4(fp)
81102964:	e0fffd05 	stb	r3,-12(fp)
81102968:	e0bffe05 	stb	r2,-8(fp)
		alt_u32 *pSpwcAddr = (alt_u32 *)SPWC_A_BASE;
8110296c:	00a04834 	movhi	r2,33056
81102970:	108e0004 	addi	r2,r2,14336
81102974:	e0bffc15 	stw	r2,-16(fp)
		switch (c_SpwID) {
81102978:	e0bffd07 	ldb	r2,-12(fp)
8110297c:	10bfefc4 	addi	r2,r2,-65
81102980:	10c00228 	cmpgeui	r3,r2,8
81102984:	18002e1e 	bne	r3,zero,81102a40 <SPWC_WRITE_REG32+0xfc>
81102988:	100690ba 	slli	r3,r2,2
8110298c:	00a04434 	movhi	r2,33040
81102990:	108a6804 	addi	r2,r2,10656
81102994:	1885883a 	add	r2,r3,r2
81102998:	10800017 	ldw	r2,0(r2)
8110299c:	1000683a 	jmp	r2
811029a0:	811029c0 	call	8811029c <__reset+0x20f029c>
811029a4:	811029d0 	cmplti	r4,r16,16551
811029a8:	811029e0 	cmpeqi	r4,r16,16551
811029ac:	811029f0 	cmpltui	r4,r16,16551
811029b0:	81102a00 	call	881102a0 <__reset+0x20f02a0>
811029b4:	81102a10 	cmplti	r4,r16,16552
811029b8:	81102a20 	cmpeqi	r4,r16,16552
811029bc:	81102a30 	cmpltui	r4,r16,16552
			case 'A':
				pSpwcAddr = (alt_u32 *)SPWC_A_BASE;
811029c0:	00a04834 	movhi	r2,33056
811029c4:	108e0004 	addi	r2,r2,14336
811029c8:	e0bffc15 	stw	r2,-16(fp)
			break;
811029cc:	00001c06 	br	81102a40 <SPWC_WRITE_REG32+0xfc>
			case 'B':
				pSpwcAddr = (alt_u32 *)SPWC_B_BASE;
811029d0:	00a04834 	movhi	r2,33056
811029d4:	108d0004 	addi	r2,r2,13312
811029d8:	e0bffc15 	stw	r2,-16(fp)
			break;
811029dc:	00001806 	br	81102a40 <SPWC_WRITE_REG32+0xfc>
			case 'C':
				pSpwcAddr = (alt_u32 *)SPWC_C_BASE;
811029e0:	00a04834 	movhi	r2,33056
811029e4:	108c0004 	addi	r2,r2,12288
811029e8:	e0bffc15 	stw	r2,-16(fp)
			break;
811029ec:	00001406 	br	81102a40 <SPWC_WRITE_REG32+0xfc>
			case 'D':
				pSpwcAddr = (alt_u32 *)SPWC_D_BASE;
811029f0:	00a04834 	movhi	r2,33056
811029f4:	108b0004 	addi	r2,r2,11264
811029f8:	e0bffc15 	stw	r2,-16(fp)
			break;
811029fc:	00001006 	br	81102a40 <SPWC_WRITE_REG32+0xfc>
			case 'E':
				pSpwcAddr = (alt_u32 *)SPWC_E_BASE;
81102a00:	00a04834 	movhi	r2,33056
81102a04:	108a0004 	addi	r2,r2,10240
81102a08:	e0bffc15 	stw	r2,-16(fp)
			break;
81102a0c:	00000c06 	br	81102a40 <SPWC_WRITE_REG32+0xfc>
			case 'F':
				pSpwcAddr = (alt_u32 *)SPWC_F_BASE;
81102a10:	00a04834 	movhi	r2,33056
81102a14:	10890004 	addi	r2,r2,9216
81102a18:	e0bffc15 	stw	r2,-16(fp)
			break;
81102a1c:	00000806 	br	81102a40 <SPWC_WRITE_REG32+0xfc>
			case 'G':
				pSpwcAddr = (alt_u32 *)SPWC_G_BASE;
81102a20:	00a04834 	movhi	r2,33056
81102a24:	10880004 	addi	r2,r2,8192
81102a28:	e0bffc15 	stw	r2,-16(fp)
			break;
81102a2c:	00000406 	br	81102a40 <SPWC_WRITE_REG32+0xfc>
			case 'H':
				pSpwcAddr = (alt_u32 *)SPWC_H_BASE;
81102a30:	00a04834 	movhi	r2,33056
81102a34:	10870004 	addi	r2,r2,7168
81102a38:	e0bffc15 	stw	r2,-16(fp)
			break;
81102a3c:	0001883a 	nop
		}
		*(pSpwcAddr + (alt_u32)uc_RegisterAddress) = (alt_u32) ul_RegisterValue;
81102a40:	e0bffe03 	ldbu	r2,-8(fp)
81102a44:	1085883a 	add	r2,r2,r2
81102a48:	1085883a 	add	r2,r2,r2
81102a4c:	1007883a 	mov	r3,r2
81102a50:	e0bffc17 	ldw	r2,-16(fp)
81102a54:	10c5883a 	add	r2,r2,r3
81102a58:	e0ffff17 	ldw	r3,-4(fp)
81102a5c:	10c00015 	stw	r3,0(r2)
	}
81102a60:	0001883a 	nop
81102a64:	e037883a 	mov	sp,fp
81102a68:	df000017 	ldw	fp,0(sp)
81102a6c:	dec00104 	addi	sp,sp,4
81102a70:	f800283a 	ret

81102a74 <SPWC_READ_REG32>:

	alt_u32 SPWC_READ_REG32(char c_SpwID, alt_u8 uc_RegisterAddress){
81102a74:	defffb04 	addi	sp,sp,-20
81102a78:	de00012e 	bgeu	sp,et,81102a80 <SPWC_READ_REG32+0xc>
81102a7c:	003b68fa 	trap	3
81102a80:	df000415 	stw	fp,16(sp)
81102a84:	df000404 	addi	fp,sp,16
81102a88:	2007883a 	mov	r3,r4
81102a8c:	2805883a 	mov	r2,r5
81102a90:	e0fffe05 	stb	r3,-8(fp)
81102a94:	e0bfff05 	stb	r2,-4(fp)
		alt_u32 RegisterValue = 0;
81102a98:	e03ffd15 	stw	zero,-12(fp)
		alt_u32 *pSpwcAddr = (alt_u32 *)SPWC_A_BASE;
81102a9c:	00a04834 	movhi	r2,33056
81102aa0:	108e0004 	addi	r2,r2,14336
81102aa4:	e0bffc15 	stw	r2,-16(fp)
		switch (c_SpwID) {
81102aa8:	e0bffe07 	ldb	r2,-8(fp)
81102aac:	10bfefc4 	addi	r2,r2,-65
81102ab0:	10c00228 	cmpgeui	r3,r2,8
81102ab4:	18002e1e 	bne	r3,zero,81102b70 <SPWC_READ_REG32+0xfc>
81102ab8:	100690ba 	slli	r3,r2,2
81102abc:	00a04434 	movhi	r2,33040
81102ac0:	108ab404 	addi	r2,r2,10960
81102ac4:	1885883a 	add	r2,r3,r2
81102ac8:	10800017 	ldw	r2,0(r2)
81102acc:	1000683a 	jmp	r2
81102ad0:	81102af0 	cmpltui	r4,r16,16555
81102ad4:	81102b00 	call	881102b0 <__reset+0x20f02b0>
81102ad8:	81102b10 	cmplti	r4,r16,16556
81102adc:	81102b20 	cmpeqi	r4,r16,16556
81102ae0:	81102b30 	cmpltui	r4,r16,16556
81102ae4:	81102b40 	call	881102b4 <__reset+0x20f02b4>
81102ae8:	81102b50 	cmplti	r4,r16,16557
81102aec:	81102b60 	cmpeqi	r4,r16,16557
			case 'A':
				pSpwcAddr = (alt_u32 *)SPWC_A_BASE;
81102af0:	00a04834 	movhi	r2,33056
81102af4:	108e0004 	addi	r2,r2,14336
81102af8:	e0bffc15 	stw	r2,-16(fp)
			break;
81102afc:	00001c06 	br	81102b70 <SPWC_READ_REG32+0xfc>
			case 'B':
				pSpwcAddr = (alt_u32 *)SPWC_B_BASE;
81102b00:	00a04834 	movhi	r2,33056
81102b04:	108d0004 	addi	r2,r2,13312
81102b08:	e0bffc15 	stw	r2,-16(fp)
			break;
81102b0c:	00001806 	br	81102b70 <SPWC_READ_REG32+0xfc>
			case 'C':
				pSpwcAddr = (alt_u32 *)SPWC_C_BASE;
81102b10:	00a04834 	movhi	r2,33056
81102b14:	108c0004 	addi	r2,r2,12288
81102b18:	e0bffc15 	stw	r2,-16(fp)
			break;
81102b1c:	00001406 	br	81102b70 <SPWC_READ_REG32+0xfc>
			case 'D':
				pSpwcAddr = (alt_u32 *)SPWC_D_BASE;
81102b20:	00a04834 	movhi	r2,33056
81102b24:	108b0004 	addi	r2,r2,11264
81102b28:	e0bffc15 	stw	r2,-16(fp)
			break;
81102b2c:	00001006 	br	81102b70 <SPWC_READ_REG32+0xfc>
			case 'E':
				pSpwcAddr = (alt_u32 *)SPWC_E_BASE;
81102b30:	00a04834 	movhi	r2,33056
81102b34:	108a0004 	addi	r2,r2,10240
81102b38:	e0bffc15 	stw	r2,-16(fp)
			break;
81102b3c:	00000c06 	br	81102b70 <SPWC_READ_REG32+0xfc>
			case 'F':
				pSpwcAddr = (alt_u32 *)SPWC_F_BASE;
81102b40:	00a04834 	movhi	r2,33056
81102b44:	10890004 	addi	r2,r2,9216
81102b48:	e0bffc15 	stw	r2,-16(fp)
			break;
81102b4c:	00000806 	br	81102b70 <SPWC_READ_REG32+0xfc>
			case 'G':
				pSpwcAddr = (alt_u32 *)SPWC_G_BASE;
81102b50:	00a04834 	movhi	r2,33056
81102b54:	10880004 	addi	r2,r2,8192
81102b58:	e0bffc15 	stw	r2,-16(fp)
			break;
81102b5c:	00000406 	br	81102b70 <SPWC_READ_REG32+0xfc>
			case 'H':
				pSpwcAddr = (alt_u32 *)SPWC_H_BASE;
81102b60:	00a04834 	movhi	r2,33056
81102b64:	10870004 	addi	r2,r2,7168
81102b68:	e0bffc15 	stw	r2,-16(fp)
			break;
81102b6c:	0001883a 	nop
		}
		RegisterValue = *(pSpwcAddr + (alt_u32)uc_RegisterAddress);
81102b70:	e0bfff03 	ldbu	r2,-4(fp)
81102b74:	1085883a 	add	r2,r2,r2
81102b78:	1085883a 	add	r2,r2,r2
81102b7c:	1007883a 	mov	r3,r2
81102b80:	e0bffc17 	ldw	r2,-16(fp)
81102b84:	10c5883a 	add	r2,r2,r3
81102b88:	10800017 	ldw	r2,0(r2)
81102b8c:	e0bffd15 	stw	r2,-12(fp)
		return RegisterValue;
81102b90:	e0bffd17 	ldw	r2,-12(fp)
	}
81102b94:	e037883a 	mov	sp,fp
81102b98:	df000017 	ldw	fp,0(sp)
81102b9c:	dec00104 	addi	sp,sp,4
81102ba0:	f800283a 	ret

81102ba4 <b_SpaceWire_Interface_Write_Register>:

	bool b_SpaceWire_Interface_Write_Register(char c_SpwID, alt_u8 uc_RegisterAddress, alt_u32 ul_RegisterValue){
81102ba4:	defffa04 	addi	sp,sp,-24
81102ba8:	de00012e 	bgeu	sp,et,81102bb0 <b_SpaceWire_Interface_Write_Register+0xc>
81102bac:	003b68fa 	trap	3
81102bb0:	dfc00515 	stw	ra,20(sp)
81102bb4:	df000415 	stw	fp,16(sp)
81102bb8:	df000404 	addi	fp,sp,16
81102bbc:	2007883a 	mov	r3,r4
81102bc0:	2805883a 	mov	r2,r5
81102bc4:	e1bfff15 	stw	r6,-4(fp)
81102bc8:	e0fffd05 	stb	r3,-12(fp)
81102bcc:	e0bffe05 	stb	r2,-8(fp)

		bool bSuccess = FALSE;
81102bd0:	e03ffc15 	stw	zero,-16(fp)

		if (uc_RegisterAddress <= 0x02) {
81102bd4:	e0bffe03 	ldbu	r2,-8(fp)
81102bd8:	108000e8 	cmpgeui	r2,r2,3
81102bdc:	1000081e 	bne	r2,zero,81102c00 <b_SpaceWire_Interface_Write_Register+0x5c>
			SPWC_WRITE_REG32(c_SpwID, uc_RegisterAddress, ul_RegisterValue);
81102be0:	e0bffd07 	ldb	r2,-12(fp)
81102be4:	e0fffe03 	ldbu	r3,-8(fp)
81102be8:	e1bfff17 	ldw	r6,-4(fp)
81102bec:	180b883a 	mov	r5,r3
81102bf0:	1009883a 	mov	r4,r2
81102bf4:	11029440 	call	81102944 <SPWC_WRITE_REG32>
			bSuccess = TRUE;
81102bf8:	00800044 	movi	r2,1
81102bfc:	e0bffc15 	stw	r2,-16(fp)
		}

		return bSuccess;
81102c00:	e0bffc17 	ldw	r2,-16(fp)
	}
81102c04:	e037883a 	mov	sp,fp
81102c08:	dfc00117 	ldw	ra,4(sp)
81102c0c:	df000017 	ldw	fp,0(sp)
81102c10:	dec00204 	addi	sp,sp,8
81102c14:	f800283a 	ret

81102c18 <ul_SpaceWire_Interface_Read_Register>:

	alt_u32 ul_SpaceWire_Interface_Read_Register(char c_SpwID, alt_u8 uc_RegisterAddress){
81102c18:	defffb04 	addi	sp,sp,-20
81102c1c:	de00012e 	bgeu	sp,et,81102c24 <ul_SpaceWire_Interface_Read_Register+0xc>
81102c20:	003b68fa 	trap	3
81102c24:	dfc00415 	stw	ra,16(sp)
81102c28:	df000315 	stw	fp,12(sp)
81102c2c:	df000304 	addi	fp,sp,12
81102c30:	2007883a 	mov	r3,r4
81102c34:	2805883a 	mov	r2,r5
81102c38:	e0fffe05 	stb	r3,-8(fp)
81102c3c:	e0bfff05 	stb	r2,-4(fp)

		alt_u32 ul_RegisterValue = 0;
81102c40:	e03ffd15 	stw	zero,-12(fp)

		if (uc_RegisterAddress <= 0x02) {
81102c44:	e0bfff03 	ldbu	r2,-4(fp)
81102c48:	108000e8 	cmpgeui	r2,r2,3
81102c4c:	1000061e 	bne	r2,zero,81102c68 <ul_SpaceWire_Interface_Read_Register+0x50>
			ul_RegisterValue = SPWC_READ_REG32(c_SpwID, uc_RegisterAddress);
81102c50:	e0bffe07 	ldb	r2,-8(fp)
81102c54:	e0ffff03 	ldbu	r3,-4(fp)
81102c58:	180b883a 	mov	r5,r3
81102c5c:	1009883a 	mov	r4,r2
81102c60:	1102a740 	call	81102a74 <SPWC_READ_REG32>
81102c64:	e0bffd15 	stw	r2,-12(fp)
		}

		return ul_RegisterValue;
81102c68:	e0bffd17 	ldw	r2,-12(fp)
	}
81102c6c:	e037883a 	mov	sp,fp
81102c70:	dfc00117 	ldw	ra,4(sp)
81102c74:	df000017 	ldw	fp,0(sp)
81102c78:	dec00204 	addi	sp,sp,8
81102c7c:	f800283a 	ret

81102c80 <b_SpaceWire_Interface_Enable_Control>:

	bool b_SpaceWire_Interface_Enable_Control(char c_SpwID, alt_u8 uc_RegisterOperation, alt_u32 ul_EnableMask){
81102c80:	defff804 	addi	sp,sp,-32
81102c84:	de00012e 	bgeu	sp,et,81102c8c <b_SpaceWire_Interface_Enable_Control+0xc>
81102c88:	003b68fa 	trap	3
81102c8c:	dfc00715 	stw	ra,28(sp)
81102c90:	df000615 	stw	fp,24(sp)
81102c94:	df000604 	addi	fp,sp,24
81102c98:	2007883a 	mov	r3,r4
81102c9c:	2805883a 	mov	r2,r5
81102ca0:	e1bfff15 	stw	r6,-4(fp)
81102ca4:	e0fffd05 	stb	r3,-12(fp)
81102ca8:	e0bffe05 	stb	r2,-8(fp)

		bool bSuccess = FALSE;
81102cac:	e03ffa15 	stw	zero,-24(fp)

		const alt_u32 ul_spwc_mask = SPWC_CODEC_ENABLE_CONTROL_BIT_MASK | SPWC_CODEC_RX_ENABLE_CONTROL_BIT_MASK | SPWC_CODEC_TX_ENABLE_CONTROL_BIT_MASK;
81102cb0:	0081c004 	movi	r2,1792
81102cb4:	e0bffc15 	stw	r2,-16(fp)
		alt_u32 *ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
81102cb8:	d0a04004 	addi	r2,gp,-32512
81102cbc:	e0bffb15 	stw	r2,-20(fp)
		switch (c_SpwID) {
81102cc0:	e0bffd07 	ldb	r2,-12(fp)
81102cc4:	10bfefc4 	addi	r2,r2,-65
81102cc8:	10c00228 	cmpgeui	r3,r2,8
81102ccc:	1800361e 	bne	r3,zero,81102da8 <b_SpaceWire_Interface_Enable_Control+0x128>
81102cd0:	100690ba 	slli	r3,r2,2
81102cd4:	00a04434 	movhi	r2,33040
81102cd8:	108b3a04 	addi	r2,r2,11496
81102cdc:	1885883a 	add	r2,r3,r2
81102ce0:	10800017 	ldw	r2,0(r2)
81102ce4:	1000683a 	jmp	r2
81102ce8:	81102d08 	cmpgei	r4,r16,16564
81102cec:	81102d1c 	xori	r4,r16,16564
81102cf0:	81102d30 	cmpltui	r4,r16,16564
81102cf4:	81102d44 	addi	r4,r16,16565
81102cf8:	81102d58 	cmpnei	r4,r16,16565
81102cfc:	81102d6c 	andhi	r4,r16,16565
81102d00:	81102d80 	call	881102d8 <__reset+0x20f02d8>
81102d04:	81102d94 	ori	r4,r16,16566
			case 'A':
				ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
81102d08:	d0a04004 	addi	r2,gp,-32512
81102d0c:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81102d10:	00800044 	movi	r2,1
81102d14:	e0bffa15 	stw	r2,-24(fp)
			break;
81102d18:	00002306 	br	81102da8 <b_SpaceWire_Interface_Enable_Control+0x128>
			case 'B':
				ul_spwc_interface_control_status_register_value = &ul_spwc_b_interface_control_status_register_value;
81102d1c:	d0a04104 	addi	r2,gp,-32508
81102d20:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81102d24:	00800044 	movi	r2,1
81102d28:	e0bffa15 	stw	r2,-24(fp)
			break;
81102d2c:	00001e06 	br	81102da8 <b_SpaceWire_Interface_Enable_Control+0x128>
			case 'C':
				ul_spwc_interface_control_status_register_value = &ul_spwc_c_interface_control_status_register_value;
81102d30:	d0a04204 	addi	r2,gp,-32504
81102d34:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81102d38:	00800044 	movi	r2,1
81102d3c:	e0bffa15 	stw	r2,-24(fp)
			break;
81102d40:	00001906 	br	81102da8 <b_SpaceWire_Interface_Enable_Control+0x128>
			case 'D':
				ul_spwc_interface_control_status_register_value = &ul_spwc_d_interface_control_status_register_value;
81102d44:	d0a04304 	addi	r2,gp,-32500
81102d48:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81102d4c:	00800044 	movi	r2,1
81102d50:	e0bffa15 	stw	r2,-24(fp)
			break;
81102d54:	00001406 	br	81102da8 <b_SpaceWire_Interface_Enable_Control+0x128>
			case 'E':
				ul_spwc_interface_control_status_register_value = &ul_spwc_e_interface_control_status_register_value;
81102d58:	d0a04404 	addi	r2,gp,-32496
81102d5c:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81102d60:	00800044 	movi	r2,1
81102d64:	e0bffa15 	stw	r2,-24(fp)
			break;
81102d68:	00000f06 	br	81102da8 <b_SpaceWire_Interface_Enable_Control+0x128>
			case 'F':
				ul_spwc_interface_control_status_register_value = &ul_spwc_f_interface_control_status_register_value;
81102d6c:	d0a04504 	addi	r2,gp,-32492
81102d70:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81102d74:	00800044 	movi	r2,1
81102d78:	e0bffa15 	stw	r2,-24(fp)
			break;
81102d7c:	00000a06 	br	81102da8 <b_SpaceWire_Interface_Enable_Control+0x128>
			case 'G':
				ul_spwc_interface_control_status_register_value = &ul_spwc_g_interface_control_status_register_value;
81102d80:	d0a04604 	addi	r2,gp,-32488
81102d84:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81102d88:	00800044 	movi	r2,1
81102d8c:	e0bffa15 	stw	r2,-24(fp)
			break;
81102d90:	00000506 	br	81102da8 <b_SpaceWire_Interface_Enable_Control+0x128>
			case 'H':
				ul_spwc_interface_control_status_register_value = &ul_spwc_h_interface_control_status_register_value;
81102d94:	d0a04704 	addi	r2,gp,-32484
81102d98:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81102d9c:	00800044 	movi	r2,1
81102da0:	e0bffa15 	stw	r2,-24(fp)
			break;
81102da4:	0001883a 	nop
		}
		if ((bSuccess == TRUE) && ((ul_EnableMask & ul_spwc_mask) != 0)){
81102da8:	e0bffa17 	ldw	r2,-24(fp)
81102dac:	10800058 	cmpnei	r2,r2,1
81102db0:	10002b1e 	bne	r2,zero,81102e60 <b_SpaceWire_Interface_Enable_Control+0x1e0>
81102db4:	e0ffff17 	ldw	r3,-4(fp)
81102db8:	e0bffc17 	ldw	r2,-16(fp)
81102dbc:	1884703a 	and	r2,r3,r2
81102dc0:	10002726 	beq	r2,zero,81102e60 <b_SpaceWire_Interface_Enable_Control+0x1e0>
			switch (uc_RegisterOperation){
81102dc4:	e0bffe03 	ldbu	r2,-8(fp)
81102dc8:	10000326 	beq	r2,zero,81102dd8 <b_SpaceWire_Interface_Enable_Control+0x158>
81102dcc:	10800060 	cmpeqi	r2,r2,1
81102dd0:	1000121e 	bne	r2,zero,81102e1c <b_SpaceWire_Interface_Enable_Control+0x19c>
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
					bSuccess = TRUE;
				break;

			}
		} else {
81102dd4:	00002306 	br	81102e64 <b_SpaceWire_Interface_Enable_Control+0x1e4>
		}
		if ((bSuccess == TRUE) && ((ul_EnableMask & ul_spwc_mask) != 0)){
			switch (uc_RegisterOperation){

				case SPWC_REG_CLEAR:
					*ul_spwc_interface_control_status_register_value &= ~ul_EnableMask;
81102dd8:	e0bffb17 	ldw	r2,-20(fp)
81102ddc:	10c00017 	ldw	r3,0(r2)
81102de0:	e0bfff17 	ldw	r2,-4(fp)
81102de4:	0084303a 	nor	r2,zero,r2
81102de8:	1886703a 	and	r3,r3,r2
81102dec:	e0bffb17 	ldw	r2,-20(fp)
81102df0:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
81102df4:	e0fffd07 	ldb	r3,-12(fp)
81102df8:	e0bffb17 	ldw	r2,-20(fp)
81102dfc:	10800017 	ldw	r2,0(r2)
81102e00:	100d883a 	mov	r6,r2
81102e04:	000b883a 	mov	r5,zero
81102e08:	1809883a 	mov	r4,r3
81102e0c:	11029440 	call	81102944 <SPWC_WRITE_REG32>
					bSuccess = TRUE;
81102e10:	00800044 	movi	r2,1
81102e14:	e0bffa15 	stw	r2,-24(fp)
				break;
81102e18:	00001006 	br	81102e5c <b_SpaceWire_Interface_Enable_Control+0x1dc>

				case SPWC_REG_SET:
					*ul_spwc_interface_control_status_register_value |= ul_EnableMask;
81102e1c:	e0bffb17 	ldw	r2,-20(fp)
81102e20:	10c00017 	ldw	r3,0(r2)
81102e24:	e0bfff17 	ldw	r2,-4(fp)
81102e28:	1886b03a 	or	r3,r3,r2
81102e2c:	e0bffb17 	ldw	r2,-20(fp)
81102e30:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
81102e34:	e0fffd07 	ldb	r3,-12(fp)
81102e38:	e0bffb17 	ldw	r2,-20(fp)
81102e3c:	10800017 	ldw	r2,0(r2)
81102e40:	100d883a 	mov	r6,r2
81102e44:	000b883a 	mov	r5,zero
81102e48:	1809883a 	mov	r4,r3
81102e4c:	11029440 	call	81102944 <SPWC_WRITE_REG32>
					bSuccess = TRUE;
81102e50:	00800044 	movi	r2,1
81102e54:	e0bffa15 	stw	r2,-24(fp)
				break;
81102e58:	0001883a 	nop

			}
		} else {
81102e5c:	00000106 	br	81102e64 <b_SpaceWire_Interface_Enable_Control+0x1e4>
			bSuccess = FALSE;
81102e60:	e03ffa15 	stw	zero,-24(fp)
		}

		return bSuccess;
81102e64:	e0bffa17 	ldw	r2,-24(fp)
	}
81102e68:	e037883a 	mov	sp,fp
81102e6c:	dfc00117 	ldw	ra,4(sp)
81102e70:	df000017 	ldw	fp,0(sp)
81102e74:	dec00204 	addi	sp,sp,8
81102e78:	f800283a 	ret

81102e7c <b_SpaceWire_Interface_Mode_Control>:

	bool b_SpaceWire_Interface_Mode_Control(char c_SpwID, alt_u8 uc_InterfaceMode){
81102e7c:	defffa04 	addi	sp,sp,-24
81102e80:	de00012e 	bgeu	sp,et,81102e88 <b_SpaceWire_Interface_Mode_Control+0xc>
81102e84:	003b68fa 	trap	3
81102e88:	dfc00515 	stw	ra,20(sp)
81102e8c:	df000415 	stw	fp,16(sp)
81102e90:	df000404 	addi	fp,sp,16
81102e94:	2007883a 	mov	r3,r4
81102e98:	2805883a 	mov	r2,r5
81102e9c:	e0fffe05 	stb	r3,-8(fp)
81102ea0:	e0bfff05 	stb	r2,-4(fp)
		bool bSuccess = FALSE;
81102ea4:	e03ffc15 	stw	zero,-16(fp)

		alt_u32 *ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
81102ea8:	d0a04004 	addi	r2,gp,-32512
81102eac:	e0bffd15 	stw	r2,-12(fp)
		switch (c_SpwID) {
81102eb0:	e0bffe07 	ldb	r2,-8(fp)
81102eb4:	10bfefc4 	addi	r2,r2,-65
81102eb8:	10c00228 	cmpgeui	r3,r2,8
81102ebc:	1800361e 	bne	r3,zero,81102f98 <b_SpaceWire_Interface_Mode_Control+0x11c>
81102ec0:	100690ba 	slli	r3,r2,2
81102ec4:	00a04434 	movhi	r2,33040
81102ec8:	108bb604 	addi	r2,r2,11992
81102ecc:	1885883a 	add	r2,r3,r2
81102ed0:	10800017 	ldw	r2,0(r2)
81102ed4:	1000683a 	jmp	r2
81102ed8:	81102ef8 	rdprs	r4,r16,16571
81102edc:	81102f0c 	andi	r4,r16,16572
81102ee0:	81102f20 	cmpeqi	r4,r16,16572
81102ee4:	81102f34 	orhi	r4,r16,16572
81102ee8:	81102f48 	cmpgei	r4,r16,16573
81102eec:	81102f5c 	xori	r4,r16,16573
81102ef0:	81102f70 	cmpltui	r4,r16,16573
81102ef4:	81102f84 	addi	r4,r16,16574
			case 'A':
				ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
81102ef8:	d0a04004 	addi	r2,gp,-32512
81102efc:	e0bffd15 	stw	r2,-12(fp)
				bSuccess = TRUE;
81102f00:	00800044 	movi	r2,1
81102f04:	e0bffc15 	stw	r2,-16(fp)
			break;
81102f08:	00002306 	br	81102f98 <b_SpaceWire_Interface_Mode_Control+0x11c>
			case 'B':
				ul_spwc_interface_control_status_register_value = &ul_spwc_b_interface_control_status_register_value;
81102f0c:	d0a04104 	addi	r2,gp,-32508
81102f10:	e0bffd15 	stw	r2,-12(fp)
				bSuccess = TRUE;
81102f14:	00800044 	movi	r2,1
81102f18:	e0bffc15 	stw	r2,-16(fp)
			break;
81102f1c:	00001e06 	br	81102f98 <b_SpaceWire_Interface_Mode_Control+0x11c>
			case 'C':
				ul_spwc_interface_control_status_register_value = &ul_spwc_c_interface_control_status_register_value;
81102f20:	d0a04204 	addi	r2,gp,-32504
81102f24:	e0bffd15 	stw	r2,-12(fp)
				bSuccess = TRUE;
81102f28:	00800044 	movi	r2,1
81102f2c:	e0bffc15 	stw	r2,-16(fp)
			break;
81102f30:	00001906 	br	81102f98 <b_SpaceWire_Interface_Mode_Control+0x11c>
			case 'D':
				ul_spwc_interface_control_status_register_value = &ul_spwc_d_interface_control_status_register_value;
81102f34:	d0a04304 	addi	r2,gp,-32500
81102f38:	e0bffd15 	stw	r2,-12(fp)
				bSuccess = TRUE;
81102f3c:	00800044 	movi	r2,1
81102f40:	e0bffc15 	stw	r2,-16(fp)
			break;
81102f44:	00001406 	br	81102f98 <b_SpaceWire_Interface_Mode_Control+0x11c>
			case 'E':
				ul_spwc_interface_control_status_register_value = &ul_spwc_e_interface_control_status_register_value;
81102f48:	d0a04404 	addi	r2,gp,-32496
81102f4c:	e0bffd15 	stw	r2,-12(fp)
				bSuccess = TRUE;
81102f50:	00800044 	movi	r2,1
81102f54:	e0bffc15 	stw	r2,-16(fp)
			break;
81102f58:	00000f06 	br	81102f98 <b_SpaceWire_Interface_Mode_Control+0x11c>
			case 'F':
				ul_spwc_interface_control_status_register_value = &ul_spwc_f_interface_control_status_register_value;
81102f5c:	d0a04504 	addi	r2,gp,-32492
81102f60:	e0bffd15 	stw	r2,-12(fp)
				bSuccess = TRUE;
81102f64:	00800044 	movi	r2,1
81102f68:	e0bffc15 	stw	r2,-16(fp)
			break;
81102f6c:	00000a06 	br	81102f98 <b_SpaceWire_Interface_Mode_Control+0x11c>
			case 'G':
				ul_spwc_interface_control_status_register_value = &ul_spwc_g_interface_control_status_register_value;
81102f70:	d0a04604 	addi	r2,gp,-32488
81102f74:	e0bffd15 	stw	r2,-12(fp)
				bSuccess = TRUE;
81102f78:	00800044 	movi	r2,1
81102f7c:	e0bffc15 	stw	r2,-16(fp)
			break;
81102f80:	00000506 	br	81102f98 <b_SpaceWire_Interface_Mode_Control+0x11c>
			case 'H':
				ul_spwc_interface_control_status_register_value = &ul_spwc_h_interface_control_status_register_value;
81102f84:	d0a04704 	addi	r2,gp,-32484
81102f88:	e0bffd15 	stw	r2,-12(fp)
				bSuccess = TRUE;
81102f8c:	00800044 	movi	r2,1
81102f90:	e0bffc15 	stw	r2,-16(fp)
			break;
81102f94:	0001883a 	nop
		}
		if (bSuccess == TRUE){
81102f98:	e0bffc17 	ldw	r2,-16(fp)
81102f9c:	10800058 	cmpnei	r2,r2,1
81102fa0:	10007b1e 	bne	r2,zero,81103190 <b_SpaceWire_Interface_Mode_Control+0x314>
			switch (uc_InterfaceMode){
81102fa4:	e0bfff03 	ldbu	r2,-4(fp)
81102fa8:	10c00060 	cmpeqi	r3,r2,1
81102fac:	1800241e 	bne	r3,zero,81103040 <b_SpaceWire_Interface_Mode_Control+0x1c4>
81102fb0:	10c00088 	cmpgei	r3,r2,2
81102fb4:	1800021e 	bne	r3,zero,81102fc0 <b_SpaceWire_Interface_Mode_Control+0x144>
81102fb8:	10000626 	beq	r2,zero,81102fd4 <b_SpaceWire_Interface_Mode_Control+0x158>
81102fbc:	00007206 	br	81103188 <b_SpaceWire_Interface_Mode_Control+0x30c>
81102fc0:	10c000a0 	cmpeqi	r3,r2,2
81102fc4:	1800391e 	bne	r3,zero,811030ac <b_SpaceWire_Interface_Mode_Control+0x230>
81102fc8:	108000e0 	cmpeqi	r2,r2,3
81102fcc:	1000521e 	bne	r2,zero,81103118 <b_SpaceWire_Interface_Mode_Control+0x29c>
81102fd0:	00006d06 	br	81103188 <b_SpaceWire_Interface_Mode_Control+0x30c>

				case SPWC_INTERFACE_BACKDOOR_MODE:
					*ul_spwc_interface_control_status_register_value |= (alt_u32)SPWC_BACKDOOR_MODE_CONTROL_BIT_MASK;
81102fd4:	e0bffd17 	ldw	r2,-12(fp)
81102fd8:	10800017 	ldw	r2,0(r2)
81102fdc:	10c40014 	ori	r3,r2,4096
81102fe0:	e0bffd17 	ldw	r2,-12(fp)
81102fe4:	10c00015 	stw	r3,0(r2)
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_EXTERNAL_LOOPBACK_MODE_CONTROL_BIT_MASK);
81102fe8:	e0bffd17 	ldw	r2,-12(fp)
81102fec:	10c00017 	ldw	r3,0(r2)
81102ff0:	00bdffc4 	movi	r2,-2049
81102ff4:	1886703a 	and	r3,r3,r2
81102ff8:	e0bffd17 	ldw	r2,-12(fp)
81102ffc:	10c00015 	stw	r3,0(r2)
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_LOOPBACK_MODE_CONTROL_BIT_MASK);
81103000:	e0bffd17 	ldw	r2,-12(fp)
81103004:	10c00017 	ldw	r3,0(r2)
81103008:	00bfdfc4 	movi	r2,-129
8110300c:	1886703a 	and	r3,r3,r2
81103010:	e0bffd17 	ldw	r2,-12(fp)
81103014:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
81103018:	e0fffe07 	ldb	r3,-8(fp)
8110301c:	e0bffd17 	ldw	r2,-12(fp)
81103020:	10800017 	ldw	r2,0(r2)
81103024:	100d883a 	mov	r6,r2
81103028:	000b883a 	mov	r5,zero
8110302c:	1809883a 	mov	r4,r3
81103030:	11029440 	call	81102944 <SPWC_WRITE_REG32>
					bSuccess = TRUE;
81103034:	00800044 	movi	r2,1
81103038:	e0bffc15 	stw	r2,-16(fp)
				break;
8110303c:	00005506 	br	81103194 <b_SpaceWire_Interface_Mode_Control+0x318>

				case SPWC_INTERFACE_EXTERNAL_LOOPBACK_MODE:
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_BACKDOOR_MODE_CONTROL_BIT_MASK);
81103040:	e0bffd17 	ldw	r2,-12(fp)
81103044:	10c00017 	ldw	r3,0(r2)
81103048:	00bbffc4 	movi	r2,-4097
8110304c:	1886703a 	and	r3,r3,r2
81103050:	e0bffd17 	ldw	r2,-12(fp)
81103054:	10c00015 	stw	r3,0(r2)
					*ul_spwc_interface_control_status_register_value |= (alt_u32)SPWC_EXTERNAL_LOOPBACK_MODE_CONTROL_BIT_MASK;
81103058:	e0bffd17 	ldw	r2,-12(fp)
8110305c:	10800017 	ldw	r2,0(r2)
81103060:	10c20014 	ori	r3,r2,2048
81103064:	e0bffd17 	ldw	r2,-12(fp)
81103068:	10c00015 	stw	r3,0(r2)
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_LOOPBACK_MODE_CONTROL_BIT_MASK);
8110306c:	e0bffd17 	ldw	r2,-12(fp)
81103070:	10c00017 	ldw	r3,0(r2)
81103074:	00bfdfc4 	movi	r2,-129
81103078:	1886703a 	and	r3,r3,r2
8110307c:	e0bffd17 	ldw	r2,-12(fp)
81103080:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
81103084:	e0fffe07 	ldb	r3,-8(fp)
81103088:	e0bffd17 	ldw	r2,-12(fp)
8110308c:	10800017 	ldw	r2,0(r2)
81103090:	100d883a 	mov	r6,r2
81103094:	000b883a 	mov	r5,zero
81103098:	1809883a 	mov	r4,r3
8110309c:	11029440 	call	81102944 <SPWC_WRITE_REG32>
					bSuccess = TRUE;
811030a0:	00800044 	movi	r2,1
811030a4:	e0bffc15 	stw	r2,-16(fp)
				break;
811030a8:	00003a06 	br	81103194 <b_SpaceWire_Interface_Mode_Control+0x318>

				case SPWC_INTERFACE_LOOPBACK_MODE:
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_BACKDOOR_MODE_CONTROL_BIT_MASK);
811030ac:	e0bffd17 	ldw	r2,-12(fp)
811030b0:	10c00017 	ldw	r3,0(r2)
811030b4:	00bbffc4 	movi	r2,-4097
811030b8:	1886703a 	and	r3,r3,r2
811030bc:	e0bffd17 	ldw	r2,-12(fp)
811030c0:	10c00015 	stw	r3,0(r2)
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_EXTERNAL_LOOPBACK_MODE_CONTROL_BIT_MASK);
811030c4:	e0bffd17 	ldw	r2,-12(fp)
811030c8:	10c00017 	ldw	r3,0(r2)
811030cc:	00bdffc4 	movi	r2,-2049
811030d0:	1886703a 	and	r3,r3,r2
811030d4:	e0bffd17 	ldw	r2,-12(fp)
811030d8:	10c00015 	stw	r3,0(r2)
					*ul_spwc_interface_control_status_register_value |= (alt_u32)SPWC_LOOPBACK_MODE_CONTROL_BIT_MASK;
811030dc:	e0bffd17 	ldw	r2,-12(fp)
811030e0:	10800017 	ldw	r2,0(r2)
811030e4:	10c02014 	ori	r3,r2,128
811030e8:	e0bffd17 	ldw	r2,-12(fp)
811030ec:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
811030f0:	e0fffe07 	ldb	r3,-8(fp)
811030f4:	e0bffd17 	ldw	r2,-12(fp)
811030f8:	10800017 	ldw	r2,0(r2)
811030fc:	100d883a 	mov	r6,r2
81103100:	000b883a 	mov	r5,zero
81103104:	1809883a 	mov	r4,r3
81103108:	11029440 	call	81102944 <SPWC_WRITE_REG32>
					bSuccess = TRUE;
8110310c:	00800044 	movi	r2,1
81103110:	e0bffc15 	stw	r2,-16(fp)
				break;
81103114:	00001f06 	br	81103194 <b_SpaceWire_Interface_Mode_Control+0x318>

				case SPWC_INTERFACE_NORMAL_MODE:
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_BACKDOOR_MODE_CONTROL_BIT_MASK);
81103118:	e0bffd17 	ldw	r2,-12(fp)
8110311c:	10c00017 	ldw	r3,0(r2)
81103120:	00bbffc4 	movi	r2,-4097
81103124:	1886703a 	and	r3,r3,r2
81103128:	e0bffd17 	ldw	r2,-12(fp)
8110312c:	10c00015 	stw	r3,0(r2)
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_EXTERNAL_LOOPBACK_MODE_CONTROL_BIT_MASK);
81103130:	e0bffd17 	ldw	r2,-12(fp)
81103134:	10c00017 	ldw	r3,0(r2)
81103138:	00bdffc4 	movi	r2,-2049
8110313c:	1886703a 	and	r3,r3,r2
81103140:	e0bffd17 	ldw	r2,-12(fp)
81103144:	10c00015 	stw	r3,0(r2)
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_LOOPBACK_MODE_CONTROL_BIT_MASK);
81103148:	e0bffd17 	ldw	r2,-12(fp)
8110314c:	10c00017 	ldw	r3,0(r2)
81103150:	00bfdfc4 	movi	r2,-129
81103154:	1886703a 	and	r3,r3,r2
81103158:	e0bffd17 	ldw	r2,-12(fp)
8110315c:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
81103160:	e0fffe07 	ldb	r3,-8(fp)
81103164:	e0bffd17 	ldw	r2,-12(fp)
81103168:	10800017 	ldw	r2,0(r2)
8110316c:	100d883a 	mov	r6,r2
81103170:	000b883a 	mov	r5,zero
81103174:	1809883a 	mov	r4,r3
81103178:	11029440 	call	81102944 <SPWC_WRITE_REG32>
					bSuccess = TRUE;
8110317c:	00800044 	movi	r2,1
81103180:	e0bffc15 	stw	r2,-16(fp)
				break;
81103184:	00000306 	br	81103194 <b_SpaceWire_Interface_Mode_Control+0x318>
				
				default:
					bSuccess = FALSE;
81103188:	e03ffc15 	stw	zero,-16(fp)
8110318c:	00000106 	br	81103194 <b_SpaceWire_Interface_Mode_Control+0x318>
	
			}
		} else {
			bSuccess = FALSE;
81103190:	e03ffc15 	stw	zero,-16(fp)
		}

		return bSuccess;
81103194:	e0bffc17 	ldw	r2,-16(fp)
	}
81103198:	e037883a 	mov	sp,fp
8110319c:	dfc00117 	ldw	ra,4(sp)
811031a0:	df000017 	ldw	fp,0(sp)
811031a4:	dec00204 	addi	sp,sp,8
811031a8:	f800283a 	ret

811031ac <v_SpaceWire_Interface_Force_Reset>:

	void v_SpaceWire_Interface_Force_Reset(char c_SpwID){
811031ac:	defffc04 	addi	sp,sp,-16
811031b0:	de00012e 	bgeu	sp,et,811031b8 <v_SpaceWire_Interface_Force_Reset+0xc>
811031b4:	003b68fa 	trap	3
811031b8:	dfc00315 	stw	ra,12(sp)
811031bc:	df000215 	stw	fp,8(sp)
811031c0:	df000204 	addi	fp,sp,8
811031c4:	2005883a 	mov	r2,r4
811031c8:	e0bfff05 	stb	r2,-4(fp)

		alt_u32 *ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
811031cc:	d0a04004 	addi	r2,gp,-32512
811031d0:	e0bffe15 	stw	r2,-8(fp)
		switch (c_SpwID) {
811031d4:	e0bfff07 	ldb	r2,-4(fp)
811031d8:	10bfefc4 	addi	r2,r2,-65
811031dc:	10c00228 	cmpgeui	r3,r2,8
811031e0:	1800261e 	bne	r3,zero,8110327c <v_SpaceWire_Interface_Force_Reset+0xd0>
811031e4:	100690ba 	slli	r3,r2,2
811031e8:	00a04434 	movhi	r2,33040
811031ec:	108c7f04 	addi	r2,r2,12796
811031f0:	1885883a 	add	r2,r3,r2
811031f4:	10800017 	ldw	r2,0(r2)
811031f8:	1000683a 	jmp	r2
811031fc:	8110321c 	xori	r4,r16,16584
81103200:	81103228 	cmpgeui	r4,r16,16584
81103204:	81103234 	orhi	r4,r16,16584
81103208:	81103240 	call	88110324 <__reset+0x20f0324>
8110320c:	8110324c 	andi	r4,r16,16585
81103210:	81103258 	cmpnei	r4,r16,16585
81103214:	81103264 	muli	r4,r16,16585
81103218:	81103270 	cmpltui	r4,r16,16585
			case 'A':
				ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
8110321c:	d0a04004 	addi	r2,gp,-32512
81103220:	e0bffe15 	stw	r2,-8(fp)
			break;
81103224:	00001506 	br	8110327c <v_SpaceWire_Interface_Force_Reset+0xd0>
			case 'B':
				ul_spwc_interface_control_status_register_value = &ul_spwc_b_interface_control_status_register_value;
81103228:	d0a04104 	addi	r2,gp,-32508
8110322c:	e0bffe15 	stw	r2,-8(fp)
			break;
81103230:	00001206 	br	8110327c <v_SpaceWire_Interface_Force_Reset+0xd0>
			case 'C':
				ul_spwc_interface_control_status_register_value = &ul_spwc_c_interface_control_status_register_value;
81103234:	d0a04204 	addi	r2,gp,-32504
81103238:	e0bffe15 	stw	r2,-8(fp)
			break;
8110323c:	00000f06 	br	8110327c <v_SpaceWire_Interface_Force_Reset+0xd0>
			case 'D':
				ul_spwc_interface_control_status_register_value = &ul_spwc_d_interface_control_status_register_value;
81103240:	d0a04304 	addi	r2,gp,-32500
81103244:	e0bffe15 	stw	r2,-8(fp)
			break;
81103248:	00000c06 	br	8110327c <v_SpaceWire_Interface_Force_Reset+0xd0>
			case 'E':
				ul_spwc_interface_control_status_register_value = &ul_spwc_e_interface_control_status_register_value;
8110324c:	d0a04404 	addi	r2,gp,-32496
81103250:	e0bffe15 	stw	r2,-8(fp)
			break;
81103254:	00000906 	br	8110327c <v_SpaceWire_Interface_Force_Reset+0xd0>
			case 'F':
				ul_spwc_interface_control_status_register_value = &ul_spwc_f_interface_control_status_register_value;
81103258:	d0a04504 	addi	r2,gp,-32492
8110325c:	e0bffe15 	stw	r2,-8(fp)
			break;
81103260:	00000606 	br	8110327c <v_SpaceWire_Interface_Force_Reset+0xd0>
			case 'G':
				ul_spwc_interface_control_status_register_value = &ul_spwc_g_interface_control_status_register_value;
81103264:	d0a04604 	addi	r2,gp,-32488
81103268:	e0bffe15 	stw	r2,-8(fp)
			break;
8110326c:	00000306 	br	8110327c <v_SpaceWire_Interface_Force_Reset+0xd0>
			case 'H':
				ul_spwc_interface_control_status_register_value = &ul_spwc_h_interface_control_status_register_value;
81103270:	d0a04704 	addi	r2,gp,-32484
81103274:	e0bffe15 	stw	r2,-8(fp)
			break;
81103278:	0001883a 	nop
		}
		SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value | SPWC_CODEC_FORCE_RESET_CONTROL_BIT_MASK);
8110327c:	e0ffff07 	ldb	r3,-4(fp)
81103280:	e0bffe17 	ldw	r2,-8(fp)
81103284:	10800017 	ldw	r2,0(r2)
81103288:	10801014 	ori	r2,r2,64
8110328c:	100d883a 	mov	r6,r2
81103290:	000b883a 	mov	r5,zero
81103294:	1809883a 	mov	r4,r3
81103298:	11029440 	call	81102944 <SPWC_WRITE_REG32>

	}
8110329c:	0001883a 	nop
811032a0:	e037883a 	mov	sp,fp
811032a4:	dfc00117 	ldw	ra,4(sp)
811032a8:	df000017 	ldw	fp,0(sp)
811032ac:	dec00204 	addi	sp,sp,8
811032b0:	f800283a 	ret

811032b4 <v_SpaceWire_Interface_Interrupts_Enable_Control>:

	bool v_SpaceWire_Interface_Interrupts_Enable_Control(char c_SpwID, alt_u8 uc_RegisterOperation, alt_u32 ul_InterruptMask){
811032b4:	defff804 	addi	sp,sp,-32
811032b8:	de00012e 	bgeu	sp,et,811032c0 <v_SpaceWire_Interface_Interrupts_Enable_Control+0xc>
811032bc:	003b68fa 	trap	3
811032c0:	dfc00715 	stw	ra,28(sp)
811032c4:	df000615 	stw	fp,24(sp)
811032c8:	df000604 	addi	fp,sp,24
811032cc:	2007883a 	mov	r3,r4
811032d0:	2805883a 	mov	r2,r5
811032d4:	e1bfff15 	stw	r6,-4(fp)
811032d8:	e0fffd05 	stb	r3,-12(fp)
811032dc:	e0bffe05 	stb	r2,-8(fp)

		bool bSuccess = FALSE;
811032e0:	e03ffa15 	stw	zero,-24(fp)

		const alt_u32 ul_spwc_mask = SPWC_LINK_ERROR_INTERRUPT_ENABLE_BIT_MASK | SPWC_TIMECODE_RECEIVED_INTERRUPT_ENABLE_BIT_MASK | SPWC_LINK_RUNNING_INTERRUPT_ENABLE_BIT_MASK;
811032e4:	00800e04 	movi	r2,56
811032e8:	e0bffc15 	stw	r2,-16(fp)
		alt_u32 *ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
811032ec:	d0a04004 	addi	r2,gp,-32512
811032f0:	e0bffb15 	stw	r2,-20(fp)
		switch (c_SpwID) {
811032f4:	e0bffd07 	ldb	r2,-12(fp)
811032f8:	10bfefc4 	addi	r2,r2,-65
811032fc:	10c00228 	cmpgeui	r3,r2,8
81103300:	1800361e 	bne	r3,zero,811033dc <v_SpaceWire_Interface_Interrupts_Enable_Control+0x128>
81103304:	100690ba 	slli	r3,r2,2
81103308:	00a04434 	movhi	r2,33040
8110330c:	108cc704 	addi	r2,r2,13084
81103310:	1885883a 	add	r2,r3,r2
81103314:	10800017 	ldw	r2,0(r2)
81103318:	1000683a 	jmp	r2
8110331c:	8110333c 	xorhi	r4,r16,16588
81103320:	81103350 	cmplti	r4,r16,16589
81103324:	81103364 	muli	r4,r16,16589
81103328:	81103378 	rdprs	r4,r16,16589
8110332c:	8110338c 	andi	r4,r16,16590
81103330:	811033a0 	cmpeqi	r4,r16,16590
81103334:	811033b4 	orhi	r4,r16,16590
81103338:	811033c8 	cmpgei	r4,r16,16591
			case 'A':
				ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
8110333c:	d0a04004 	addi	r2,gp,-32512
81103340:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103344:	00800044 	movi	r2,1
81103348:	e0bffa15 	stw	r2,-24(fp)
			break;
8110334c:	00002306 	br	811033dc <v_SpaceWire_Interface_Interrupts_Enable_Control+0x128>
			case 'B':
				ul_spwc_interface_control_status_register_value = &ul_spwc_b_interface_control_status_register_value;
81103350:	d0a04104 	addi	r2,gp,-32508
81103354:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103358:	00800044 	movi	r2,1
8110335c:	e0bffa15 	stw	r2,-24(fp)
			break;
81103360:	00001e06 	br	811033dc <v_SpaceWire_Interface_Interrupts_Enable_Control+0x128>
			case 'C':
				ul_spwc_interface_control_status_register_value = &ul_spwc_c_interface_control_status_register_value;
81103364:	d0a04204 	addi	r2,gp,-32504
81103368:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
8110336c:	00800044 	movi	r2,1
81103370:	e0bffa15 	stw	r2,-24(fp)
			break;
81103374:	00001906 	br	811033dc <v_SpaceWire_Interface_Interrupts_Enable_Control+0x128>
			case 'D':
				ul_spwc_interface_control_status_register_value = &ul_spwc_d_interface_control_status_register_value;
81103378:	d0a04304 	addi	r2,gp,-32500
8110337c:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103380:	00800044 	movi	r2,1
81103384:	e0bffa15 	stw	r2,-24(fp)
			break;
81103388:	00001406 	br	811033dc <v_SpaceWire_Interface_Interrupts_Enable_Control+0x128>
			case 'E':
				ul_spwc_interface_control_status_register_value = &ul_spwc_e_interface_control_status_register_value;
8110338c:	d0a04404 	addi	r2,gp,-32496
81103390:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103394:	00800044 	movi	r2,1
81103398:	e0bffa15 	stw	r2,-24(fp)
			break;
8110339c:	00000f06 	br	811033dc <v_SpaceWire_Interface_Interrupts_Enable_Control+0x128>
			case 'F':
				ul_spwc_interface_control_status_register_value = &ul_spwc_f_interface_control_status_register_value;
811033a0:	d0a04504 	addi	r2,gp,-32492
811033a4:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811033a8:	00800044 	movi	r2,1
811033ac:	e0bffa15 	stw	r2,-24(fp)
			break;
811033b0:	00000a06 	br	811033dc <v_SpaceWire_Interface_Interrupts_Enable_Control+0x128>
			case 'G':
				ul_spwc_interface_control_status_register_value = &ul_spwc_g_interface_control_status_register_value;
811033b4:	d0a04604 	addi	r2,gp,-32488
811033b8:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811033bc:	00800044 	movi	r2,1
811033c0:	e0bffa15 	stw	r2,-24(fp)
			break;
811033c4:	00000506 	br	811033dc <v_SpaceWire_Interface_Interrupts_Enable_Control+0x128>
			case 'H':
				ul_spwc_interface_control_status_register_value = &ul_spwc_h_interface_control_status_register_value;
811033c8:	d0a04704 	addi	r2,gp,-32484
811033cc:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811033d0:	00800044 	movi	r2,1
811033d4:	e0bffa15 	stw	r2,-24(fp)
			break;
811033d8:	0001883a 	nop
		}
		if ((bSuccess == TRUE) && ((ul_InterruptMask & ul_spwc_mask) != 0)){
811033dc:	e0bffa17 	ldw	r2,-24(fp)
811033e0:	10800058 	cmpnei	r2,r2,1
811033e4:	10002b1e 	bne	r2,zero,81103494 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x1e0>
811033e8:	e0ffff17 	ldw	r3,-4(fp)
811033ec:	e0bffc17 	ldw	r2,-16(fp)
811033f0:	1884703a 	and	r2,r3,r2
811033f4:	10002726 	beq	r2,zero,81103494 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x1e0>
			switch (uc_RegisterOperation){
811033f8:	e0bffe03 	ldbu	r2,-8(fp)
811033fc:	10000326 	beq	r2,zero,8110340c <v_SpaceWire_Interface_Interrupts_Enable_Control+0x158>
81103400:	10800060 	cmpeqi	r2,r2,1
81103404:	1000121e 	bne	r2,zero,81103450 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x19c>
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
					bSuccess = TRUE;
				break;

			}
		} else {
81103408:	00002306 	br	81103498 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x1e4>
		}
		if ((bSuccess == TRUE) && ((ul_InterruptMask & ul_spwc_mask) != 0)){
			switch (uc_RegisterOperation){

				case SPWC_REG_CLEAR:
					*ul_spwc_interface_control_status_register_value &= ~ul_InterruptMask;
8110340c:	e0bffb17 	ldw	r2,-20(fp)
81103410:	10c00017 	ldw	r3,0(r2)
81103414:	e0bfff17 	ldw	r2,-4(fp)
81103418:	0084303a 	nor	r2,zero,r2
8110341c:	1886703a 	and	r3,r3,r2
81103420:	e0bffb17 	ldw	r2,-20(fp)
81103424:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
81103428:	e0fffd07 	ldb	r3,-12(fp)
8110342c:	e0bffb17 	ldw	r2,-20(fp)
81103430:	10800017 	ldw	r2,0(r2)
81103434:	100d883a 	mov	r6,r2
81103438:	000b883a 	mov	r5,zero
8110343c:	1809883a 	mov	r4,r3
81103440:	11029440 	call	81102944 <SPWC_WRITE_REG32>
					bSuccess = TRUE;
81103444:	00800044 	movi	r2,1
81103448:	e0bffa15 	stw	r2,-24(fp)
				break;
8110344c:	00001006 	br	81103490 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x1dc>

				case SPWC_REG_SET:
					*ul_spwc_interface_control_status_register_value |= ul_InterruptMask;
81103450:	e0bffb17 	ldw	r2,-20(fp)
81103454:	10c00017 	ldw	r3,0(r2)
81103458:	e0bfff17 	ldw	r2,-4(fp)
8110345c:	1886b03a 	or	r3,r3,r2
81103460:	e0bffb17 	ldw	r2,-20(fp)
81103464:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
81103468:	e0fffd07 	ldb	r3,-12(fp)
8110346c:	e0bffb17 	ldw	r2,-20(fp)
81103470:	10800017 	ldw	r2,0(r2)
81103474:	100d883a 	mov	r6,r2
81103478:	000b883a 	mov	r5,zero
8110347c:	1809883a 	mov	r4,r3
81103480:	11029440 	call	81102944 <SPWC_WRITE_REG32>
					bSuccess = TRUE;
81103484:	00800044 	movi	r2,1
81103488:	e0bffa15 	stw	r2,-24(fp)
				break;
8110348c:	0001883a 	nop

			}
		} else {
81103490:	00000106 	br	81103498 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x1e4>
			bSuccess = FALSE;
81103494:	e03ffa15 	stw	zero,-24(fp)
		}

		return bSuccess;
81103498:	e0bffa17 	ldw	r2,-24(fp)
	}
8110349c:	e037883a 	mov	sp,fp
811034a0:	dfc00117 	ldw	ra,4(sp)
811034a4:	df000017 	ldw	fp,0(sp)
811034a8:	dec00204 	addi	sp,sp,8
811034ac:	f800283a 	ret

811034b0 <ul_SpaceWire_Interface_Interrupts_Flags_Read>:

	alt_u32 ul_SpaceWire_Interface_Interrupts_Flags_Read(char c_SpwID){
811034b0:	defffb04 	addi	sp,sp,-20
811034b4:	de00012e 	bgeu	sp,et,811034bc <ul_SpaceWire_Interface_Interrupts_Flags_Read+0xc>
811034b8:	003b68fa 	trap	3
811034bc:	dfc00415 	stw	ra,16(sp)
811034c0:	df000315 	stw	fp,12(sp)
811034c4:	df000304 	addi	fp,sp,12
811034c8:	2005883a 	mov	r2,r4
811034cc:	e0bfff05 	stb	r2,-4(fp)

		const alt_u32 ul_spwc_mask = SPWC_LINK_ERROR_INTERRUPT_FLAG_MASK | SPWC_TIMECODE_RECEIVED_INTERRUPT_FLAG_MASK | SPWC_LINK_RUNNING_INTERRUPT_FLAG_MASK;
811034d0:	008001c4 	movi	r2,7
811034d4:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 ul_spwc_interrupts_flags_value = SPWC_READ_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS) & ul_spwc_mask;
811034d8:	e0bfff07 	ldb	r2,-4(fp)
811034dc:	000b883a 	mov	r5,zero
811034e0:	1009883a 	mov	r4,r2
811034e4:	1102a740 	call	81102a74 <SPWC_READ_REG32>
811034e8:	1007883a 	mov	r3,r2
811034ec:	e0bffd17 	ldw	r2,-12(fp)
811034f0:	1884703a 	and	r2,r3,r2
811034f4:	e0bffe15 	stw	r2,-8(fp)

		return ul_spwc_interrupts_flags_value;
811034f8:	e0bffe17 	ldw	r2,-8(fp)
	}
811034fc:	e037883a 	mov	sp,fp
81103500:	dfc00117 	ldw	ra,4(sp)
81103504:	df000017 	ldw	fp,0(sp)
81103508:	dec00204 	addi	sp,sp,8
8110350c:	f800283a 	ret

81103510 <v_SpaceWire_Interface_Interrupts_Flags_Clear>:

	void v_SpaceWire_Interface_Interrupts_Flags_Clear(char c_SpwID, alt_u32 ul_InterruptMask){
81103510:	defff904 	addi	sp,sp,-28
81103514:	de00012e 	bgeu	sp,et,8110351c <v_SpaceWire_Interface_Interrupts_Flags_Clear+0xc>
81103518:	003b68fa 	trap	3
8110351c:	dfc00615 	stw	ra,24(sp)
81103520:	df000515 	stw	fp,20(sp)
81103524:	df000504 	addi	fp,sp,20
81103528:	2005883a 	mov	r2,r4
8110352c:	e17fff15 	stw	r5,-4(fp)
81103530:	e0bffe05 	stb	r2,-8(fp)
		bool bSuccess = FALSE;
81103534:	e03ffb15 	stw	zero,-20(fp)

		const alt_u32 ul_spwc_mask = SPWC_LINK_ERROR_INTERRUPT_FLAG_MASK | SPWC_TIMECODE_RECEIVED_INTERRUPT_FLAG_MASK | SPWC_LINK_RUNNING_INTERRUPT_FLAG_MASK;
81103538:	008001c4 	movi	r2,7
8110353c:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 *ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
81103540:	d0a04004 	addi	r2,gp,-32512
81103544:	e0bffc15 	stw	r2,-16(fp)
		switch (c_SpwID) {
81103548:	e0bffe07 	ldb	r2,-8(fp)
8110354c:	10bfefc4 	addi	r2,r2,-65
81103550:	10c00228 	cmpgeui	r3,r2,8
81103554:	1800361e 	bne	r3,zero,81103630 <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x120>
81103558:	100690ba 	slli	r3,r2,2
8110355c:	00a04434 	movhi	r2,33040
81103560:	108d5c04 	addi	r2,r2,13680
81103564:	1885883a 	add	r2,r3,r2
81103568:	10800017 	ldw	r2,0(r2)
8110356c:	1000683a 	jmp	r2
81103570:	81103590 	cmplti	r4,r16,16598
81103574:	811035a4 	muli	r4,r16,16598
81103578:	811035b8 	rdprs	r4,r16,16598
8110357c:	811035cc 	andi	r4,r16,16599
81103580:	811035e0 	cmpeqi	r4,r16,16599
81103584:	811035f4 	orhi	r4,r16,16599
81103588:	81103608 	cmpgei	r4,r16,16600
8110358c:	8110361c 	xori	r4,r16,16600
			case 'A':
				ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
81103590:	d0a04004 	addi	r2,gp,-32512
81103594:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
81103598:	00800044 	movi	r2,1
8110359c:	e0bffb15 	stw	r2,-20(fp)
			break;
811035a0:	00002306 	br	81103630 <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x120>
			case 'B':
				ul_spwc_interface_control_status_register_value = &ul_spwc_b_interface_control_status_register_value;
811035a4:	d0a04104 	addi	r2,gp,-32508
811035a8:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
811035ac:	00800044 	movi	r2,1
811035b0:	e0bffb15 	stw	r2,-20(fp)
			break;
811035b4:	00001e06 	br	81103630 <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x120>
			case 'C':
				ul_spwc_interface_control_status_register_value = &ul_spwc_c_interface_control_status_register_value;
811035b8:	d0a04204 	addi	r2,gp,-32504
811035bc:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
811035c0:	00800044 	movi	r2,1
811035c4:	e0bffb15 	stw	r2,-20(fp)
			break;
811035c8:	00001906 	br	81103630 <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x120>
			case 'D':
				ul_spwc_interface_control_status_register_value = &ul_spwc_d_interface_control_status_register_value;
811035cc:	d0a04304 	addi	r2,gp,-32500
811035d0:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
811035d4:	00800044 	movi	r2,1
811035d8:	e0bffb15 	stw	r2,-20(fp)
			break;
811035dc:	00001406 	br	81103630 <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x120>
			case 'E':
				ul_spwc_interface_control_status_register_value = &ul_spwc_e_interface_control_status_register_value;
811035e0:	d0a04404 	addi	r2,gp,-32496
811035e4:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
811035e8:	00800044 	movi	r2,1
811035ec:	e0bffb15 	stw	r2,-20(fp)
			break;
811035f0:	00000f06 	br	81103630 <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x120>
			case 'F':
				ul_spwc_interface_control_status_register_value = &ul_spwc_f_interface_control_status_register_value;
811035f4:	d0a04504 	addi	r2,gp,-32492
811035f8:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
811035fc:	00800044 	movi	r2,1
81103600:	e0bffb15 	stw	r2,-20(fp)
			break;
81103604:	00000a06 	br	81103630 <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x120>
			case 'G':
				ul_spwc_interface_control_status_register_value = &ul_spwc_g_interface_control_status_register_value;
81103608:	d0a04604 	addi	r2,gp,-32488
8110360c:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
81103610:	00800044 	movi	r2,1
81103614:	e0bffb15 	stw	r2,-20(fp)
			break;
81103618:	00000506 	br	81103630 <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x120>
			case 'H':
				ul_spwc_interface_control_status_register_value = &ul_spwc_h_interface_control_status_register_value;
8110361c:	d0a04704 	addi	r2,gp,-32484
81103620:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
81103624:	00800044 	movi	r2,1
81103628:	e0bffb15 	stw	r2,-20(fp)
			break;
8110362c:	0001883a 	nop
		}
		if ((bSuccess == TRUE) && ((ul_InterruptMask & ul_spwc_mask) != 0)){
81103630:	e0bffb17 	ldw	r2,-20(fp)
81103634:	10800058 	cmpnei	r2,r2,1
81103638:	10000d1e 	bne	r2,zero,81103670 <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x160>
8110363c:	e0ffff17 	ldw	r3,-4(fp)
81103640:	e0bffd17 	ldw	r2,-12(fp)
81103644:	1884703a 	and	r2,r3,r2
81103648:	10000926 	beq	r2,zero,81103670 <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x160>
			SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, (*ul_spwc_interface_control_status_register_value | ul_spwc_mask));
8110364c:	e13ffe07 	ldb	r4,-8(fp)
81103650:	e0bffc17 	ldw	r2,-16(fp)
81103654:	10c00017 	ldw	r3,0(r2)
81103658:	e0bffd17 	ldw	r2,-12(fp)
8110365c:	1884b03a 	or	r2,r3,r2
81103660:	100d883a 	mov	r6,r2
81103664:	000b883a 	mov	r5,zero
81103668:	11029440 	call	81102944 <SPWC_WRITE_REG32>
8110366c:	00000106 	br	81103674 <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x164>
		} else {
			bSuccess = FALSE;
81103670:	e03ffb15 	stw	zero,-20(fp)
		}
	}
81103674:	0001883a 	nop
81103678:	e037883a 	mov	sp,fp
8110367c:	dfc00117 	ldw	ra,4(sp)
81103680:	df000017 	ldw	fp,0(sp)
81103684:	dec00204 	addi	sp,sp,8
81103688:	f800283a 	ret

8110368c <v_SpaceWire_Interface_Link_Control>:

	bool v_SpaceWire_Interface_Link_Control(char c_SpwID, alt_u8 uc_RegisterOperation, alt_u32 ul_ControlMask){
8110368c:	defff804 	addi	sp,sp,-32
81103690:	de00012e 	bgeu	sp,et,81103698 <v_SpaceWire_Interface_Link_Control+0xc>
81103694:	003b68fa 	trap	3
81103698:	dfc00715 	stw	ra,28(sp)
8110369c:	df000615 	stw	fp,24(sp)
811036a0:	df000604 	addi	fp,sp,24
811036a4:	2007883a 	mov	r3,r4
811036a8:	2805883a 	mov	r2,r5
811036ac:	e1bfff15 	stw	r6,-4(fp)
811036b0:	e0fffd05 	stb	r3,-12(fp)
811036b4:	e0bffe05 	stb	r2,-8(fp)

		bool bSuccess = FALSE;
811036b8:	e03ffa15 	stw	zero,-24(fp)

		const alt_u32 ul_spwc_mask = SPWC_AUTOSTART_CONTROL_BIT_MASK | SPWC_LINK_START_CONTROL_BIT_MASK | SPWC_LINK_DISCONNECT_CONTROL_BIT_MASK;
811036bc:	0080e004 	movi	r2,896
811036c0:	e0bffc15 	stw	r2,-16(fp)
		alt_u32 *ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_a_spacewire_link_control_status_register_value;
811036c4:	d0a00104 	addi	r2,gp,-32764
811036c8:	e0bffb15 	stw	r2,-20(fp)
		switch (c_SpwID) {
811036cc:	e0bffd07 	ldb	r2,-12(fp)
811036d0:	10bfefc4 	addi	r2,r2,-65
811036d4:	10c00228 	cmpgeui	r3,r2,8
811036d8:	1800361e 	bne	r3,zero,811037b4 <v_SpaceWire_Interface_Link_Control+0x128>
811036dc:	100690ba 	slli	r3,r2,2
811036e0:	00a04434 	movhi	r2,33040
811036e4:	108dbd04 	addi	r2,r2,14068
811036e8:	1885883a 	add	r2,r3,r2
811036ec:	10800017 	ldw	r2,0(r2)
811036f0:	1000683a 	jmp	r2
811036f4:	81103714 	ori	r4,r16,16604
811036f8:	81103728 	cmpgeui	r4,r16,16604
811036fc:	8110373c 	xorhi	r4,r16,16604
81103700:	81103750 	cmplti	r4,r16,16605
81103704:	81103764 	muli	r4,r16,16605
81103708:	81103778 	rdprs	r4,r16,16605
8110370c:	8110378c 	andi	r4,r16,16606
81103710:	811037a0 	cmpeqi	r4,r16,16606
			case 'A':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_a_spacewire_link_control_status_register_value;
81103714:	d0a00104 	addi	r2,gp,-32764
81103718:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
8110371c:	00800044 	movi	r2,1
81103720:	e0bffa15 	stw	r2,-24(fp)
			break;
81103724:	00002306 	br	811037b4 <v_SpaceWire_Interface_Link_Control+0x128>
			case 'B':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_b_spacewire_link_control_status_register_value;
81103728:	d0a00204 	addi	r2,gp,-32760
8110372c:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103730:	00800044 	movi	r2,1
81103734:	e0bffa15 	stw	r2,-24(fp)
			break;
81103738:	00001e06 	br	811037b4 <v_SpaceWire_Interface_Link_Control+0x128>
			case 'C':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_c_spacewire_link_control_status_register_value;
8110373c:	d0a00304 	addi	r2,gp,-32756
81103740:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103744:	00800044 	movi	r2,1
81103748:	e0bffa15 	stw	r2,-24(fp)
			break;
8110374c:	00001906 	br	811037b4 <v_SpaceWire_Interface_Link_Control+0x128>
			case 'D':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_d_spacewire_link_control_status_register_value;
81103750:	d0a00404 	addi	r2,gp,-32752
81103754:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103758:	00800044 	movi	r2,1
8110375c:	e0bffa15 	stw	r2,-24(fp)
			break;
81103760:	00001406 	br	811037b4 <v_SpaceWire_Interface_Link_Control+0x128>
			case 'E':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_e_spacewire_link_control_status_register_value;
81103764:	d0a00504 	addi	r2,gp,-32748
81103768:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
8110376c:	00800044 	movi	r2,1
81103770:	e0bffa15 	stw	r2,-24(fp)
			break;
81103774:	00000f06 	br	811037b4 <v_SpaceWire_Interface_Link_Control+0x128>
			case 'F':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_f_spacewire_link_control_status_register_value;
81103778:	d0a00604 	addi	r2,gp,-32744
8110377c:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103780:	00800044 	movi	r2,1
81103784:	e0bffa15 	stw	r2,-24(fp)
			break;
81103788:	00000a06 	br	811037b4 <v_SpaceWire_Interface_Link_Control+0x128>
			case 'G':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_g_spacewire_link_control_status_register_value;
8110378c:	d0a00704 	addi	r2,gp,-32740
81103790:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103794:	00800044 	movi	r2,1
81103798:	e0bffa15 	stw	r2,-24(fp)
			break;
8110379c:	00000506 	br	811037b4 <v_SpaceWire_Interface_Link_Control+0x128>
			case 'H':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_h_spacewire_link_control_status_register_value;
811037a0:	d0a00804 	addi	r2,gp,-32736
811037a4:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811037a8:	00800044 	movi	r2,1
811037ac:	e0bffa15 	stw	r2,-24(fp)
			break;
811037b0:	0001883a 	nop
		}
		if ((bSuccess == TRUE) && ((ul_ControlMask & ul_spwc_mask) != 0)){
811037b4:	e0bffa17 	ldw	r2,-24(fp)
811037b8:	10800058 	cmpnei	r2,r2,1
811037bc:	10002b1e 	bne	r2,zero,8110386c <v_SpaceWire_Interface_Link_Control+0x1e0>
811037c0:	e0ffff17 	ldw	r3,-4(fp)
811037c4:	e0bffc17 	ldw	r2,-16(fp)
811037c8:	1884703a 	and	r2,r3,r2
811037cc:	10002726 	beq	r2,zero,8110386c <v_SpaceWire_Interface_Link_Control+0x1e0>
			switch (uc_RegisterOperation){
811037d0:	e0bffe03 	ldbu	r2,-8(fp)
811037d4:	10000326 	beq	r2,zero,811037e4 <v_SpaceWire_Interface_Link_Control+0x158>
811037d8:	10800060 	cmpeqi	r2,r2,1
811037dc:	1000121e 	bne	r2,zero,81103828 <v_SpaceWire_Interface_Link_Control+0x19c>
					SPWC_WRITE_REG32(c_SpwID, SPWC_SPACEWIRE_LINK_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_spacewire_link_control_status_register_value);
					bSuccess = TRUE;
				break;

			}
		} else {
811037e0:	00002306 	br	81103870 <v_SpaceWire_Interface_Link_Control+0x1e4>
		}
		if ((bSuccess == TRUE) && ((ul_ControlMask & ul_spwc_mask) != 0)){
			switch (uc_RegisterOperation){

				case SPWC_REG_CLEAR:
					*ul_spwc_spacewire_link_control_status_register_value &= ~ul_ControlMask;
811037e4:	e0bffb17 	ldw	r2,-20(fp)
811037e8:	10c00017 	ldw	r3,0(r2)
811037ec:	e0bfff17 	ldw	r2,-4(fp)
811037f0:	0084303a 	nor	r2,zero,r2
811037f4:	1886703a 	and	r3,r3,r2
811037f8:	e0bffb17 	ldw	r2,-20(fp)
811037fc:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_SPACEWIRE_LINK_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_spacewire_link_control_status_register_value);
81103800:	e0fffd07 	ldb	r3,-12(fp)
81103804:	e0bffb17 	ldw	r2,-20(fp)
81103808:	10800017 	ldw	r2,0(r2)
8110380c:	100d883a 	mov	r6,r2
81103810:	01400044 	movi	r5,1
81103814:	1809883a 	mov	r4,r3
81103818:	11029440 	call	81102944 <SPWC_WRITE_REG32>
					bSuccess = TRUE;
8110381c:	00800044 	movi	r2,1
81103820:	e0bffa15 	stw	r2,-24(fp)
				break;
81103824:	00001006 	br	81103868 <v_SpaceWire_Interface_Link_Control+0x1dc>

				case SPWC_REG_SET:
					*ul_spwc_spacewire_link_control_status_register_value |= ul_ControlMask;
81103828:	e0bffb17 	ldw	r2,-20(fp)
8110382c:	10c00017 	ldw	r3,0(r2)
81103830:	e0bfff17 	ldw	r2,-4(fp)
81103834:	1886b03a 	or	r3,r3,r2
81103838:	e0bffb17 	ldw	r2,-20(fp)
8110383c:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_SPACEWIRE_LINK_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_spacewire_link_control_status_register_value);
81103840:	e0fffd07 	ldb	r3,-12(fp)
81103844:	e0bffb17 	ldw	r2,-20(fp)
81103848:	10800017 	ldw	r2,0(r2)
8110384c:	100d883a 	mov	r6,r2
81103850:	01400044 	movi	r5,1
81103854:	1809883a 	mov	r4,r3
81103858:	11029440 	call	81102944 <SPWC_WRITE_REG32>
					bSuccess = TRUE;
8110385c:	00800044 	movi	r2,1
81103860:	e0bffa15 	stw	r2,-24(fp)
				break;
81103864:	0001883a 	nop

			}
		} else {
81103868:	00000106 	br	81103870 <v_SpaceWire_Interface_Link_Control+0x1e4>
			bSuccess = FALSE;
8110386c:	e03ffa15 	stw	zero,-24(fp)
		}

		return bSuccess;
81103870:	e0bffa17 	ldw	r2,-24(fp)
	}
81103874:	e037883a 	mov	sp,fp
81103878:	dfc00117 	ldw	ra,4(sp)
8110387c:	df000017 	ldw	fp,0(sp)
81103880:	dec00204 	addi	sp,sp,8
81103884:	f800283a 	ret

81103888 <ul_SpaceWire_Interface_Link_Error_Read>:

	alt_u32 ul_SpaceWire_Interface_Link_Error_Read(char c_SpwID){
81103888:	defffb04 	addi	sp,sp,-20
8110388c:	de00012e 	bgeu	sp,et,81103894 <ul_SpaceWire_Interface_Link_Error_Read+0xc>
81103890:	003b68fa 	trap	3
81103894:	dfc00415 	stw	ra,16(sp)
81103898:	df000315 	stw	fp,12(sp)
8110389c:	df000304 	addi	fp,sp,12
811038a0:	2005883a 	mov	r2,r4
811038a4:	e0bfff05 	stb	r2,-4(fp)

		const alt_u32 ul_spwc_mask = SPWC_LINK_DISCONNECT_ERROR_BIT_MASK | SPWC_LINK_PARITY_ERROR_BIT_MASK | SPWC_LINK_ESCAPE_ERROR_BIT_MASK | SPWC_LINK_CREDIT_ERROR_BIT_MASK;
811038a8:	00801e04 	movi	r2,120
811038ac:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 ul_spwc_link_error_value = SPWC_READ_REG32(c_SpwID, SPWC_SPACEWIRE_LINK_CONTROL_STATUS_REGISTER_ADDRESS) & ul_spwc_mask;
811038b0:	e0bfff07 	ldb	r2,-4(fp)
811038b4:	01400044 	movi	r5,1
811038b8:	1009883a 	mov	r4,r2
811038bc:	1102a740 	call	81102a74 <SPWC_READ_REG32>
811038c0:	1007883a 	mov	r3,r2
811038c4:	e0bffd17 	ldw	r2,-12(fp)
811038c8:	1884703a 	and	r2,r3,r2
811038cc:	e0bffe15 	stw	r2,-8(fp)

		return ul_spwc_link_error_value;
811038d0:	e0bffe17 	ldw	r2,-8(fp)
	}
811038d4:	e037883a 	mov	sp,fp
811038d8:	dfc00117 	ldw	ra,4(sp)
811038dc:	df000017 	ldw	fp,0(sp)
811038e0:	dec00204 	addi	sp,sp,8
811038e4:	f800283a 	ret

811038e8 <ul_SpaceWire_Interface_Link_Status_Read>:

	alt_u32 ul_SpaceWire_Interface_Link_Status_Read(char c_SpwID){
811038e8:	defffb04 	addi	sp,sp,-20
811038ec:	de00012e 	bgeu	sp,et,811038f4 <ul_SpaceWire_Interface_Link_Status_Read+0xc>
811038f0:	003b68fa 	trap	3
811038f4:	dfc00415 	stw	ra,16(sp)
811038f8:	df000315 	stw	fp,12(sp)
811038fc:	df000304 	addi	fp,sp,12
81103900:	2005883a 	mov	r2,r4
81103904:	e0bfff05 	stb	r2,-4(fp)

		const alt_u32 ul_spwc_mask = SPWC_LINK_STARTED_STATUS_BIT_MASK | SPWC_LINK_CONNECTING_STATUS_BIT_MASK | SPWC_LINK_RUNNING_STATUS_BIT_MASK;
81103908:	008001c4 	movi	r2,7
8110390c:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 ul_spwc_link_status_value = SPWC_READ_REG32(c_SpwID, SPWC_SPACEWIRE_LINK_CONTROL_STATUS_REGISTER_ADDRESS) & ul_spwc_mask;
81103910:	e0bfff07 	ldb	r2,-4(fp)
81103914:	01400044 	movi	r5,1
81103918:	1009883a 	mov	r4,r2
8110391c:	1102a740 	call	81102a74 <SPWC_READ_REG32>
81103920:	1007883a 	mov	r3,r2
81103924:	e0bffd17 	ldw	r2,-12(fp)
81103928:	1884703a 	and	r2,r3,r2
8110392c:	e0bffe15 	stw	r2,-8(fp)

		return ul_spwc_link_status_value;
81103930:	e0bffe17 	ldw	r2,-8(fp)
	}
81103934:	e037883a 	mov	sp,fp
81103938:	dfc00117 	ldw	ra,4(sp)
8110393c:	df000017 	ldw	fp,0(sp)
81103940:	dec00204 	addi	sp,sp,8
81103944:	f800283a 	ret

81103948 <v_SpaceWire_Interface_Send_TimeCode>:

	void v_SpaceWire_Interface_Send_TimeCode(char c_SpwID, alt_u8 TimeCode){
81103948:	defffb04 	addi	sp,sp,-20
8110394c:	de00012e 	bgeu	sp,et,81103954 <v_SpaceWire_Interface_Send_TimeCode+0xc>
81103950:	003b68fa 	trap	3
81103954:	dfc00415 	stw	ra,16(sp)
81103958:	df000315 	stw	fp,12(sp)
8110395c:	df000304 	addi	fp,sp,12
81103960:	2007883a 	mov	r3,r4
81103964:	2805883a 	mov	r2,r5
81103968:	e0fffe05 	stb	r3,-8(fp)
8110396c:	e0bfff05 	stb	r2,-4(fp)

		const alt_u32 ul_spwc_mask = (((alt_u32)TimeCode) << 1) | SPWC_TX_TIMECODE_CONTROL_BIT_MASK;
81103970:	e0bfff03 	ldbu	r2,-4(fp)
81103974:	1085883a 	add	r2,r2,r2
81103978:	10800054 	ori	r2,r2,1
8110397c:	e0bffd15 	stw	r2,-12(fp)
		SPWC_WRITE_REG32(c_SpwID, SPWC_TIMECODE_CONTROL_REGISTER_ADDRESS, ul_spwc_mask);
81103980:	e0bffe07 	ldb	r2,-8(fp)
81103984:	e1bffd17 	ldw	r6,-12(fp)
81103988:	01400084 	movi	r5,2
8110398c:	1009883a 	mov	r4,r2
81103990:	11029440 	call	81102944 <SPWC_WRITE_REG32>

	}
81103994:	0001883a 	nop
81103998:	e037883a 	mov	sp,fp
8110399c:	dfc00117 	ldw	ra,4(sp)
811039a0:	df000017 	ldw	fp,0(sp)
811039a4:	dec00204 	addi	sp,sp,8
811039a8:	f800283a 	ret

811039ac <b_SpaceWire_Interface_TimeCode_Arrived>:

	bool b_SpaceWire_Interface_TimeCode_Arrived(char c_SpwID){
811039ac:	defffc04 	addi	sp,sp,-16
811039b0:	de00012e 	bgeu	sp,et,811039b8 <b_SpaceWire_Interface_TimeCode_Arrived+0xc>
811039b4:	003b68fa 	trap	3
811039b8:	dfc00315 	stw	ra,12(sp)
811039bc:	df000215 	stw	fp,8(sp)
811039c0:	df000204 	addi	fp,sp,8
811039c4:	2005883a 	mov	r2,r4
811039c8:	e0bfff05 	stb	r2,-4(fp)
		
		bool b_timecode_arrived = FALSE;
811039cc:	e03ffe15 	stw	zero,-8(fp)
		
		if (SPWC_READ_REG32(c_SpwID, SPWC_TIMECODE_CONTROL_REGISTER_ADDRESS) & SPWC_RX_TIMECODE_STATUS_BIT_MASK) {
811039d0:	e0bfff07 	ldb	r2,-4(fp)
811039d4:	01400084 	movi	r5,2
811039d8:	1009883a 	mov	r4,r2
811039dc:	1102a740 	call	81102a74 <SPWC_READ_REG32>
811039e0:	1080006c 	andhi	r2,r2,1
811039e4:	10000226 	beq	r2,zero,811039f0 <b_SpaceWire_Interface_TimeCode_Arrived+0x44>
			b_timecode_arrived = TRUE;
811039e8:	00800044 	movi	r2,1
811039ec:	e0bffe15 	stw	r2,-8(fp)
		}
		
		return b_timecode_arrived;
811039f0:	e0bffe17 	ldw	r2,-8(fp)
	}
811039f4:	e037883a 	mov	sp,fp
811039f8:	dfc00117 	ldw	ra,4(sp)
811039fc:	df000017 	ldw	fp,0(sp)
81103a00:	dec00204 	addi	sp,sp,8
81103a04:	f800283a 	ret

81103a08 <uc_SpaceWire_Interface_Get_TimeCode>:
	
	alt_u8 uc_SpaceWire_Interface_Get_TimeCode(char c_SpwID){
81103a08:	defffb04 	addi	sp,sp,-20
81103a0c:	de00012e 	bgeu	sp,et,81103a14 <uc_SpaceWire_Interface_Get_TimeCode+0xc>
81103a10:	003b68fa 	trap	3
81103a14:	dfc00415 	stw	ra,16(sp)
81103a18:	df000315 	stw	fp,12(sp)
81103a1c:	df000304 	addi	fp,sp,12
81103a20:	2005883a 	mov	r2,r4
81103a24:	e0bfff05 	stb	r2,-4(fp)

		alt_u32 ul_timecode_register = SPWC_READ_REG32(c_SpwID, SPWC_TIMECODE_CONTROL_REGISTER_ADDRESS);
81103a28:	e0bfff07 	ldb	r2,-4(fp)
81103a2c:	01400084 	movi	r5,2
81103a30:	1009883a 	mov	r4,r2
81103a34:	1102a740 	call	81102a74 <SPWC_READ_REG32>
81103a38:	e0bffd15 	stw	r2,-12(fp)
		
		alt_u8 uc_timecode_value = (alt_u8)((ul_timecode_register & (SPWC_RX_TIMECODE_CONTROL_BITS_MASK | SPWC_RX_TIMECODE_COUNTER_VALUE_MASK)) >> 17);
81103a3c:	e0bffd17 	ldw	r2,-12(fp)
81103a40:	10807fac 	andhi	r2,r2,510
81103a44:	1004d47a 	srli	r2,r2,17
81103a48:	e0bffe05 	stb	r2,-8(fp)
	
		SPWC_WRITE_REG32(c_SpwID, SPWC_TIMECODE_CONTROL_REGISTER_ADDRESS, (ul_timecode_register | SPWC_RX_TIMECODE_STATUS_BIT_MASK));
81103a4c:	e0ffff07 	ldb	r3,-4(fp)
81103a50:	e0bffd17 	ldw	r2,-12(fp)
81103a54:	10800074 	orhi	r2,r2,1
81103a58:	100d883a 	mov	r6,r2
81103a5c:	01400084 	movi	r5,2
81103a60:	1809883a 	mov	r4,r3
81103a64:	11029440 	call	81102944 <SPWC_WRITE_REG32>

		return uc_timecode_value;
81103a68:	e0bffe03 	ldbu	r2,-8(fp)
	}
81103a6c:	e037883a 	mov	sp,fp
81103a70:	dfc00117 	ldw	ra,4(sp)
81103a74:	df000017 	ldw	fp,0(sp)
81103a78:	dec00204 	addi	sp,sp,8
81103a7c:	f800283a 	ret

81103a80 <uc_SpaceWire_Interface_Get_TX_Div>:

	alt_u8 uc_SpaceWire_Interface_Get_TX_Div(char c_SpwID){
81103a80:	defffb04 	addi	sp,sp,-20
81103a84:	de00012e 	bgeu	sp,et,81103a8c <uc_SpaceWire_Interface_Get_TX_Div+0xc>
81103a88:	003b68fa 	trap	3
81103a8c:	dfc00415 	stw	ra,16(sp)
81103a90:	df000315 	stw	fp,12(sp)
81103a94:	df000304 	addi	fp,sp,12
81103a98:	2005883a 	mov	r2,r4
81103a9c:	e0bfff05 	stb	r2,-4(fp)

		const alt_u32 ul_spwc_mask = SPWC_TX_CLOCK_DIVISOR_VALUE_MASK;
81103aa0:	00800134 	movhi	r2,4
81103aa4:	10bf0004 	addi	r2,r2,-1024
81103aa8:	e0bffd15 	stw	r2,-12(fp)
		alt_u8 uc_txdiv_value = (alt_u8)((SPWC_READ_REG32(c_SpwID, SPWC_SPACEWIRE_LINK_CONTROL_STATUS_REGISTER_ADDRESS) & ul_spwc_mask) >> 10);
81103aac:	e0bfff07 	ldb	r2,-4(fp)
81103ab0:	01400044 	movi	r5,1
81103ab4:	1009883a 	mov	r4,r2
81103ab8:	1102a740 	call	81102a74 <SPWC_READ_REG32>
81103abc:	1007883a 	mov	r3,r2
81103ac0:	e0bffd17 	ldw	r2,-12(fp)
81103ac4:	1884703a 	and	r2,r3,r2
81103ac8:	1004d2ba 	srli	r2,r2,10
81103acc:	e0bffe05 	stb	r2,-8(fp)

		return uc_txdiv_value;
81103ad0:	e0bffe03 	ldbu	r2,-8(fp)
	}
81103ad4:	e037883a 	mov	sp,fp
81103ad8:	dfc00117 	ldw	ra,4(sp)
81103adc:	df000017 	ldw	fp,0(sp)
81103ae0:	dec00204 	addi	sp,sp,8
81103ae4:	f800283a 	ret

81103ae8 <b_SpaceWire_Interface_Set_TX_Div>:

	bool b_SpaceWire_Interface_Set_TX_Div(char c_SpwID, alt_u8 uc_TxDiv){
81103ae8:	defff804 	addi	sp,sp,-32
81103aec:	de00012e 	bgeu	sp,et,81103af4 <b_SpaceWire_Interface_Set_TX_Div+0xc>
81103af0:	003b68fa 	trap	3
81103af4:	dfc00715 	stw	ra,28(sp)
81103af8:	df000615 	stw	fp,24(sp)
81103afc:	df000604 	addi	fp,sp,24
81103b00:	2007883a 	mov	r3,r4
81103b04:	2805883a 	mov	r2,r5
81103b08:	e0fffe05 	stb	r3,-8(fp)
81103b0c:	e0bfff05 	stb	r2,-4(fp)

		bool bSuccess = FALSE;
81103b10:	e03ffa15 	stw	zero,-24(fp)

		const alt_u32 ul_spwc_mask = SPWC_TX_CLOCK_DIVISOR_VALUE_MASK;
81103b14:	00800134 	movhi	r2,4
81103b18:	10bf0004 	addi	r2,r2,-1024
81103b1c:	e0bffc15 	stw	r2,-16(fp)
		const alt_u32 ul_txdiv_mask = (alt_u32)(uc_TxDiv << 10);
81103b20:	e0bfff03 	ldbu	r2,-4(fp)
81103b24:	100492ba 	slli	r2,r2,10
81103b28:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 *ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_a_spacewire_link_control_status_register_value;
81103b2c:	d0a00104 	addi	r2,gp,-32764
81103b30:	e0bffb15 	stw	r2,-20(fp)
		switch (c_SpwID) {
81103b34:	e0bffe07 	ldb	r2,-8(fp)
81103b38:	10bfefc4 	addi	r2,r2,-65
81103b3c:	10c00228 	cmpgeui	r3,r2,8
81103b40:	1800361e 	bne	r3,zero,81103c1c <b_SpaceWire_Interface_Set_TX_Div+0x134>
81103b44:	100690ba 	slli	r3,r2,2
81103b48:	00a04434 	movhi	r2,33040
81103b4c:	108ed704 	addi	r2,r2,15196
81103b50:	1885883a 	add	r2,r3,r2
81103b54:	10800017 	ldw	r2,0(r2)
81103b58:	1000683a 	jmp	r2
81103b5c:	81103b7c 	xorhi	r4,r16,16621
81103b60:	81103b90 	cmplti	r4,r16,16622
81103b64:	81103ba4 	muli	r4,r16,16622
81103b68:	81103bb8 	rdprs	r4,r16,16622
81103b6c:	81103bcc 	andi	r4,r16,16623
81103b70:	81103be0 	cmpeqi	r4,r16,16623
81103b74:	81103bf4 	orhi	r4,r16,16623
81103b78:	81103c08 	cmpgei	r4,r16,16624
			case 'A':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_a_spacewire_link_control_status_register_value;
81103b7c:	d0a00104 	addi	r2,gp,-32764
81103b80:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103b84:	00800044 	movi	r2,1
81103b88:	e0bffa15 	stw	r2,-24(fp)
			break;
81103b8c:	00002306 	br	81103c1c <b_SpaceWire_Interface_Set_TX_Div+0x134>
			case 'B':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_b_spacewire_link_control_status_register_value;
81103b90:	d0a00204 	addi	r2,gp,-32760
81103b94:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103b98:	00800044 	movi	r2,1
81103b9c:	e0bffa15 	stw	r2,-24(fp)
			break;
81103ba0:	00001e06 	br	81103c1c <b_SpaceWire_Interface_Set_TX_Div+0x134>
			case 'C':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_c_spacewire_link_control_status_register_value;
81103ba4:	d0a00304 	addi	r2,gp,-32756
81103ba8:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103bac:	00800044 	movi	r2,1
81103bb0:	e0bffa15 	stw	r2,-24(fp)
			break;
81103bb4:	00001906 	br	81103c1c <b_SpaceWire_Interface_Set_TX_Div+0x134>
			case 'D':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_d_spacewire_link_control_status_register_value;
81103bb8:	d0a00404 	addi	r2,gp,-32752
81103bbc:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103bc0:	00800044 	movi	r2,1
81103bc4:	e0bffa15 	stw	r2,-24(fp)
			break;
81103bc8:	00001406 	br	81103c1c <b_SpaceWire_Interface_Set_TX_Div+0x134>
			case 'E':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_e_spacewire_link_control_status_register_value;
81103bcc:	d0a00504 	addi	r2,gp,-32748
81103bd0:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103bd4:	00800044 	movi	r2,1
81103bd8:	e0bffa15 	stw	r2,-24(fp)
			break;
81103bdc:	00000f06 	br	81103c1c <b_SpaceWire_Interface_Set_TX_Div+0x134>
			case 'F':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_f_spacewire_link_control_status_register_value;
81103be0:	d0a00604 	addi	r2,gp,-32744
81103be4:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103be8:	00800044 	movi	r2,1
81103bec:	e0bffa15 	stw	r2,-24(fp)
			break;
81103bf0:	00000a06 	br	81103c1c <b_SpaceWire_Interface_Set_TX_Div+0x134>
			case 'G':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_g_spacewire_link_control_status_register_value;
81103bf4:	d0a00704 	addi	r2,gp,-32740
81103bf8:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103bfc:	00800044 	movi	r2,1
81103c00:	e0bffa15 	stw	r2,-24(fp)
			break;
81103c04:	00000506 	br	81103c1c <b_SpaceWire_Interface_Set_TX_Div+0x134>
			case 'H':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_h_spacewire_link_control_status_register_value;
81103c08:	d0a00804 	addi	r2,gp,-32736
81103c0c:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103c10:	00800044 	movi	r2,1
81103c14:	e0bffa15 	stw	r2,-24(fp)
			break;
81103c18:	0001883a 	nop
		}
		if (bSuccess == TRUE){
81103c1c:	e0bffa17 	ldw	r2,-24(fp)
81103c20:	10800058 	cmpnei	r2,r2,1
81103c24:	1000171e 	bne	r2,zero,81103c84 <b_SpaceWire_Interface_Set_TX_Div+0x19c>
			*ul_spwc_spacewire_link_control_status_register_value &= ~(ul_spwc_mask);
81103c28:	e0bffb17 	ldw	r2,-20(fp)
81103c2c:	10c00017 	ldw	r3,0(r2)
81103c30:	e0bffc17 	ldw	r2,-16(fp)
81103c34:	0084303a 	nor	r2,zero,r2
81103c38:	1886703a 	and	r3,r3,r2
81103c3c:	e0bffb17 	ldw	r2,-20(fp)
81103c40:	10c00015 	stw	r3,0(r2)
			*ul_spwc_spacewire_link_control_status_register_value |= ul_txdiv_mask;
81103c44:	e0bffb17 	ldw	r2,-20(fp)
81103c48:	10c00017 	ldw	r3,0(r2)
81103c4c:	e0bffd17 	ldw	r2,-12(fp)
81103c50:	1886b03a 	or	r3,r3,r2
81103c54:	e0bffb17 	ldw	r2,-20(fp)
81103c58:	10c00015 	stw	r3,0(r2)
			SPWC_WRITE_REG32(c_SpwID, SPWC_SPACEWIRE_LINK_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_spacewire_link_control_status_register_value);
81103c5c:	e0fffe07 	ldb	r3,-8(fp)
81103c60:	e0bffb17 	ldw	r2,-20(fp)
81103c64:	10800017 	ldw	r2,0(r2)
81103c68:	100d883a 	mov	r6,r2
81103c6c:	01400044 	movi	r5,1
81103c70:	1809883a 	mov	r4,r3
81103c74:	11029440 	call	81102944 <SPWC_WRITE_REG32>
			bSuccess = TRUE;
81103c78:	00800044 	movi	r2,1
81103c7c:	e0bffa15 	stw	r2,-24(fp)
81103c80:	00000106 	br	81103c88 <b_SpaceWire_Interface_Set_TX_Div+0x1a0>
		} else {
			bSuccess = FALSE;
81103c84:	e03ffa15 	stw	zero,-24(fp)
		}

		return bSuccess;
81103c88:	e0bffa17 	ldw	r2,-24(fp)
	}
81103c8c:	e037883a 	mov	sp,fp
81103c90:	dfc00117 	ldw	ra,4(sp)
81103c94:	df000017 	ldw	fp,0(sp)
81103c98:	dec00204 	addi	sp,sp,8
81103c9c:	f800283a 	ret

81103ca0 <b_SpaceWire_Interface_Write_TX_Data>:

	bool b_SpaceWire_Interface_Write_TX_Data(char c_SpwID, alt_u8 uc_TxFlag, alt_u8 uc_TxData){
81103ca0:	defffa04 	addi	sp,sp,-24
81103ca4:	de00012e 	bgeu	sp,et,81103cac <b_SpaceWire_Interface_Write_TX_Data+0xc>
81103ca8:	003b68fa 	trap	3
81103cac:	dfc00515 	stw	ra,20(sp)
81103cb0:	df000415 	stw	fp,16(sp)
81103cb4:	df000404 	addi	fp,sp,16
81103cb8:	2807883a 	mov	r3,r5
81103cbc:	3005883a 	mov	r2,r6
81103cc0:	e13ffd05 	stb	r4,-12(fp)
81103cc4:	e0fffe05 	stb	r3,-8(fp)
81103cc8:	e0bfff05 	stb	r2,-4(fp)

		bool bSuccess = FALSE;
81103ccc:	e03ffc15 	stw	zero,-16(fp)
		if (SPWC_READ_REG32(c_SpwID, SPWC_BACKDOOR_CONTROL_REGISTER_ADDRESS) & SPWC_TX_CODEC_TX_READY_STATUS_BIT_MASK) {
81103cd0:	e0bffd07 	ldb	r2,-12(fp)
81103cd4:	014000c4 	movi	r5,3
81103cd8:	1009883a 	mov	r4,r2
81103cdc:	1102a740 	call	81102a74 <SPWC_READ_REG32>
81103ce0:	1081000c 	andi	r2,r2,1024
81103ce4:	10000c26 	beq	r2,zero,81103d18 <b_SpaceWire_Interface_Write_TX_Data+0x78>
			SPWC_WRITE_REG32(c_SpwID,
81103ce8:	e13ffd07 	ldb	r4,-12(fp)
					         SPWC_BACKDOOR_CONTROL_REGISTER_ADDRESS,
					         (alt_u32)(SPWC_TX_CODEC_TX_WRITE_CONTROL_BIT_MASK | ((uc_TxFlag & 0x01) << 8) | uc_TxData));
81103cec:	e0bffe03 	ldbu	r2,-8(fp)
81103cf0:	1080004c 	andi	r2,r2,1
81103cf4:	1004923a 	slli	r2,r2,8
81103cf8:	10c08014 	ori	r3,r2,512
81103cfc:	e0bfff03 	ldbu	r2,-4(fp)
81103d00:	1884b03a 	or	r2,r3,r2

	bool b_SpaceWire_Interface_Write_TX_Data(char c_SpwID, alt_u8 uc_TxFlag, alt_u8 uc_TxData){

		bool bSuccess = FALSE;
		if (SPWC_READ_REG32(c_SpwID, SPWC_BACKDOOR_CONTROL_REGISTER_ADDRESS) & SPWC_TX_CODEC_TX_READY_STATUS_BIT_MASK) {
			SPWC_WRITE_REG32(c_SpwID,
81103d04:	100d883a 	mov	r6,r2
81103d08:	014000c4 	movi	r5,3
81103d0c:	11029440 	call	81102944 <SPWC_WRITE_REG32>
					         SPWC_BACKDOOR_CONTROL_REGISTER_ADDRESS,
					         (alt_u32)(SPWC_TX_CODEC_TX_WRITE_CONTROL_BIT_MASK | ((uc_TxFlag & 0x01) << 8) | uc_TxData));
			bSuccess = TRUE;
81103d10:	00800044 	movi	r2,1
81103d14:	e0bffc15 	stw	r2,-16(fp)
		}

		return bSuccess;
81103d18:	e0bffc17 	ldw	r2,-16(fp)
	}
81103d1c:	e037883a 	mov	sp,fp
81103d20:	dfc00117 	ldw	ra,4(sp)
81103d24:	df000017 	ldw	fp,0(sp)
81103d28:	dec00204 	addi	sp,sp,8
81103d2c:	f800283a 	ret

81103d30 <b_SpaceWire_Interface_Send_SpaceWire_Data>:

	bool b_SpaceWire_Interface_Send_SpaceWire_Data(char c_SpwID, alt_u8 *data_buffer, alt_u16 data_size){
81103d30:	defff904 	addi	sp,sp,-28
81103d34:	de00012e 	bgeu	sp,et,81103d3c <b_SpaceWire_Interface_Send_SpaceWire_Data+0xc>
81103d38:	003b68fa 	trap	3
81103d3c:	dfc00615 	stw	ra,24(sp)
81103d40:	df000515 	stw	fp,20(sp)
81103d44:	df000504 	addi	fp,sp,20
81103d48:	2007883a 	mov	r3,r4
81103d4c:	e17ffe15 	stw	r5,-8(fp)
81103d50:	3005883a 	mov	r2,r6
81103d54:	e0fffd05 	stb	r3,-12(fp)
81103d58:	e0bfff0d 	sth	r2,-4(fp)
		bool bSuccess = FALSE;
81103d5c:	e03ffb15 	stw	zero,-20(fp)

		alt_u16 cnt = 0;
81103d60:	e03ffc0d 	sth	zero,-16(fp)
		while ((b_SpaceWire_Interface_Write_TX_Data(c_SpwID, 0, data_buffer[cnt])) && (cnt < (data_size - 1))) {
81103d64:	00000306 	br	81103d74 <b_SpaceWire_Interface_Send_SpaceWire_Data+0x44>
			cnt++;
81103d68:	e0bffc0b 	ldhu	r2,-16(fp)
81103d6c:	10800044 	addi	r2,r2,1
81103d70:	e0bffc0d 	sth	r2,-16(fp)

	bool b_SpaceWire_Interface_Send_SpaceWire_Data(char c_SpwID, alt_u8 *data_buffer, alt_u16 data_size){
		bool bSuccess = FALSE;

		alt_u16 cnt = 0;
		while ((b_SpaceWire_Interface_Write_TX_Data(c_SpwID, 0, data_buffer[cnt])) && (cnt < (data_size - 1))) {
81103d74:	e13ffd07 	ldb	r4,-12(fp)
81103d78:	e0bffc0b 	ldhu	r2,-16(fp)
81103d7c:	e0fffe17 	ldw	r3,-8(fp)
81103d80:	1885883a 	add	r2,r3,r2
81103d84:	10800003 	ldbu	r2,0(r2)
81103d88:	10803fcc 	andi	r2,r2,255
81103d8c:	100d883a 	mov	r6,r2
81103d90:	000b883a 	mov	r5,zero
81103d94:	1103ca00 	call	81103ca0 <b_SpaceWire_Interface_Write_TX_Data>
81103d98:	10000426 	beq	r2,zero,81103dac <b_SpaceWire_Interface_Send_SpaceWire_Data+0x7c>
81103d9c:	e0fffc0b 	ldhu	r3,-16(fp)
81103da0:	e0bfff0b 	ldhu	r2,-4(fp)
81103da4:	10bfffc4 	addi	r2,r2,-1
81103da8:	18bfef16 	blt	r3,r2,81103d68 <__reset+0xfb0e3d68>
			cnt++;
		}
		if (cnt == (data_size - 1)) {
81103dac:	e0fffc0b 	ldhu	r3,-16(fp)
81103db0:	e0bfff0b 	ldhu	r2,-4(fp)
81103db4:	10bfffc4 	addi	r2,r2,-1
81103db8:	1880081e 	bne	r3,r2,81103ddc <b_SpaceWire_Interface_Send_SpaceWire_Data+0xac>
			if (b_SpaceWire_Interface_Write_TX_Data(c_SpwID, 1, 0)){
81103dbc:	e0bffd07 	ldb	r2,-12(fp)
81103dc0:	000d883a 	mov	r6,zero
81103dc4:	01400044 	movi	r5,1
81103dc8:	1009883a 	mov	r4,r2
81103dcc:	1103ca00 	call	81103ca0 <b_SpaceWire_Interface_Write_TX_Data>
81103dd0:	10000226 	beq	r2,zero,81103ddc <b_SpaceWire_Interface_Send_SpaceWire_Data+0xac>
				bSuccess = TRUE;
81103dd4:	00800044 	movi	r2,1
81103dd8:	e0bffb15 	stw	r2,-20(fp)
			}
		}

		return bSuccess;
81103ddc:	e0bffb17 	ldw	r2,-20(fp)
	}
81103de0:	e037883a 	mov	sp,fp
81103de4:	dfc00117 	ldw	ra,4(sp)
81103de8:	df000017 	ldw	fp,0(sp)
81103dec:	dec00204 	addi	sp,sp,8
81103df0:	f800283a 	ret

81103df4 <b_SpaceWire_Interface_Read_RX_Data>:

	bool b_SpaceWire_Interface_Read_RX_Data(char c_SpwID, alt_u8 *uc_RxFlag, alt_u8 *uc_RxData){
81103df4:	defff904 	addi	sp,sp,-28
81103df8:	de00012e 	bgeu	sp,et,81103e00 <b_SpaceWire_Interface_Read_RX_Data+0xc>
81103dfc:	003b68fa 	trap	3
81103e00:	dfc00615 	stw	ra,24(sp)
81103e04:	df000515 	stw	fp,20(sp)
81103e08:	df000504 	addi	fp,sp,20
81103e0c:	2005883a 	mov	r2,r4
81103e10:	e17ffe15 	stw	r5,-8(fp)
81103e14:	e1bfff15 	stw	r6,-4(fp)
81103e18:	e0bffd05 	stb	r2,-12(fp)

		bool bSuccess = FALSE;
81103e1c:	e03ffb15 	stw	zero,-20(fp)
		alt_u32 backdoor_register = 0;
81103e20:	e03ffc15 	stw	zero,-16(fp)

		backdoor_register = SPWC_READ_REG32(c_SpwID, SPWC_BACKDOOR_CONTROL_REGISTER_ADDRESS);
81103e24:	e0bffd07 	ldb	r2,-12(fp)
81103e28:	014000c4 	movi	r5,3
81103e2c:	1009883a 	mov	r4,r2
81103e30:	1102a740 	call	81102a74 <SPWC_READ_REG32>
81103e34:	e0bffc15 	stw	r2,-16(fp)
		if (backdoor_register & SPWC_RX_CODEC_RX_DATAVALID_STATUS_BIT_MASK) {
81103e38:	e0bffc17 	ldw	r2,-16(fp)
81103e3c:	1081002c 	andhi	r2,r2,1024
81103e40:	10001326 	beq	r2,zero,81103e90 <b_SpaceWire_Interface_Read_RX_Data+0x9c>

			*uc_RxFlag = (alt_u8)((backdoor_register & SPWC_RX_CODEC_SPACEWIRE_FLAG_VALUE_MASK) >> 24);
81103e44:	e0bffc17 	ldw	r2,-16(fp)
81103e48:	1080402c 	andhi	r2,r2,256
81103e4c:	1004d63a 	srli	r2,r2,24
81103e50:	1007883a 	mov	r3,r2
81103e54:	e0bffe17 	ldw	r2,-8(fp)
81103e58:	10c00005 	stb	r3,0(r2)
			*uc_RxData = (alt_u8)((backdoor_register & SPWC_RX_CODEC_SPACEWIRE_DATA_VALUE_MASK) >> 16);
81103e5c:	e0bffc17 	ldw	r2,-16(fp)
81103e60:	10803fec 	andhi	r2,r2,255
81103e64:	1004d43a 	srli	r2,r2,16
81103e68:	1007883a 	mov	r3,r2
81103e6c:	e0bfff17 	ldw	r2,-4(fp)
81103e70:	10c00005 	stb	r3,0(r2)

			SPWC_WRITE_REG32(c_SpwID,
81103e74:	e0bffd07 	ldb	r2,-12(fp)
81103e78:	01808034 	movhi	r6,512
81103e7c:	014000c4 	movi	r5,3
81103e80:	1009883a 	mov	r4,r2
81103e84:	11029440 	call	81102944 <SPWC_WRITE_REG32>
					         SPWC_BACKDOOR_CONTROL_REGISTER_ADDRESS,
					         (alt_u32)(SPWC_RX_CODEC_RX_READ_CONTROL_BIT_MASK));
			bSuccess = TRUE;
81103e88:	00800044 	movi	r2,1
81103e8c:	e0bffb15 	stw	r2,-20(fp)
		}

		return bSuccess;
81103e90:	e0bffb17 	ldw	r2,-20(fp)
	}
81103e94:	e037883a 	mov	sp,fp
81103e98:	dfc00117 	ldw	ra,4(sp)
81103e9c:	df000017 	ldw	fp,0(sp)
81103ea0:	dec00204 	addi	sp,sp,8
81103ea4:	f800283a 	ret

81103ea8 <ui_SpaceWire_Interface_Get_SpaceWire_Data>:

	alt_u16 ui_SpaceWire_Interface_Get_SpaceWire_Data(char c_SpwID, alt_u8 *data_buffer, alt_u16 buffer_size){
81103ea8:	defffa04 	addi	sp,sp,-24
81103eac:	de00012e 	bgeu	sp,et,81103eb4 <ui_SpaceWire_Interface_Get_SpaceWire_Data+0xc>
81103eb0:	003b68fa 	trap	3
81103eb4:	dfc00515 	stw	ra,20(sp)
81103eb8:	df000415 	stw	fp,16(sp)
81103ebc:	df000404 	addi	fp,sp,16
81103ec0:	2007883a 	mov	r3,r4
81103ec4:	e17ffe15 	stw	r5,-8(fp)
81103ec8:	3005883a 	mov	r2,r6
81103ecc:	e0fffd05 	stb	r3,-12(fp)
81103ed0:	e0bfff0d 	sth	r2,-4(fp)

		alt_u16 ui_rx_data_size = 0;
81103ed4:	e03ffc0d 	sth	zero,-16(fp)

		alt_u8 spw_flag = 0;
81103ed8:	e03ffc85 	stb	zero,-14(fp)
		alt_u8 spw_data = 0;
81103edc:	e03ffcc5 	stb	zero,-13(fp)

		while ((b_SpaceWire_Interface_Read_RX_Data(c_SpwID, &spw_flag, &spw_data)) && (ui_rx_data_size < (buffer_size - 1))) {
81103ee0:	00000b06 	br	81103f10 <ui_SpaceWire_Interface_Get_SpaceWire_Data+0x68>
			if (spw_flag == 0) {
81103ee4:	e0bffc83 	ldbu	r2,-14(fp)
81103ee8:	10803fcc 	andi	r2,r2,255
81103eec:	1000081e 	bne	r2,zero,81103f10 <ui_SpaceWire_Interface_Get_SpaceWire_Data+0x68>
				data_buffer[ui_rx_data_size] = spw_data;
81103ef0:	e0bffc0b 	ldhu	r2,-16(fp)
81103ef4:	e0fffe17 	ldw	r3,-8(fp)
81103ef8:	1885883a 	add	r2,r3,r2
81103efc:	e0fffcc3 	ldbu	r3,-13(fp)
81103f00:	10c00005 	stb	r3,0(r2)
				ui_rx_data_size++;
81103f04:	e0bffc0b 	ldhu	r2,-16(fp)
81103f08:	10800044 	addi	r2,r2,1
81103f0c:	e0bffc0d 	sth	r2,-16(fp)
		alt_u16 ui_rx_data_size = 0;

		alt_u8 spw_flag = 0;
		alt_u8 spw_data = 0;

		while ((b_SpaceWire_Interface_Read_RX_Data(c_SpwID, &spw_flag, &spw_data)) && (ui_rx_data_size < (buffer_size - 1))) {
81103f10:	e0bffd07 	ldb	r2,-12(fp)
81103f14:	e13ffcc4 	addi	r4,fp,-13
81103f18:	e0fffc84 	addi	r3,fp,-14
81103f1c:	200d883a 	mov	r6,r4
81103f20:	180b883a 	mov	r5,r3
81103f24:	1009883a 	mov	r4,r2
81103f28:	1103df40 	call	81103df4 <b_SpaceWire_Interface_Read_RX_Data>
81103f2c:	10000426 	beq	r2,zero,81103f40 <ui_SpaceWire_Interface_Get_SpaceWire_Data+0x98>
81103f30:	e0fffc0b 	ldhu	r3,-16(fp)
81103f34:	e0bfff0b 	ldhu	r2,-4(fp)
81103f38:	10bfffc4 	addi	r2,r2,-1
81103f3c:	18bfe916 	blt	r3,r2,81103ee4 <__reset+0xfb0e3ee4>
				data_buffer[ui_rx_data_size] = spw_data;
				ui_rx_data_size++;
			}
		}

		return ui_rx_data_size;
81103f40:	e0bffc0b 	ldhu	r2,-16(fp)
	}
81103f44:	e037883a 	mov	sp,fp
81103f48:	dfc00117 	ldw	ra,4(sp)
81103f4c:	df000017 	ldw	fp,0(sp)
81103f50:	dec00204 	addi	sp,sp,8
81103f54:	f800283a 	ret

81103f58 <TRAN_WRITE_REG32>:
	alt_u32 ul_tran_e_interface_control_status_register_value = 0x00000000;
	alt_u32 ul_tran_f_interface_control_status_register_value = 0x00000000;
	alt_u32 ul_tran_g_interface_control_status_register_value = 0x00000000;
	alt_u32 ul_tran_h_interface_control_status_register_value = 0x00000000;

	void TRAN_WRITE_REG32(char c_SpwID, alt_u8 RegisterOffset, alt_u32 RegisterValue){
81103f58:	defffb04 	addi	sp,sp,-20
81103f5c:	de00012e 	bgeu	sp,et,81103f64 <TRAN_WRITE_REG32+0xc>
81103f60:	003b68fa 	trap	3
81103f64:	df000415 	stw	fp,16(sp)
81103f68:	df000404 	addi	fp,sp,16
81103f6c:	2007883a 	mov	r3,r4
81103f70:	2805883a 	mov	r2,r5
81103f74:	e1bfff15 	stw	r6,-4(fp)
81103f78:	e0fffd05 	stb	r3,-12(fp)
81103f7c:	e0bffe05 	stb	r2,-8(fp)
		alt_u32 *pTranAddr = (alt_u32 *)TRAN_A_BASE;
81103f80:	00a04834 	movhi	r2,33056
81103f84:	108e0004 	addi	r2,r2,14336
81103f88:	e0bffc15 	stw	r2,-16(fp)
		switch (c_SpwID) {
81103f8c:	e0bffd07 	ldb	r2,-12(fp)
81103f90:	10bfefc4 	addi	r2,r2,-65
81103f94:	10c00228 	cmpgeui	r3,r2,8
81103f98:	18002e1e 	bne	r3,zero,81104054 <TRAN_WRITE_REG32+0xfc>
81103f9c:	100690ba 	slli	r3,r2,2
81103fa0:	00a04434 	movhi	r2,33040
81103fa4:	108fed04 	addi	r2,r2,16308
81103fa8:	1885883a 	add	r2,r3,r2
81103fac:	10800017 	ldw	r2,0(r2)
81103fb0:	1000683a 	jmp	r2
81103fb4:	81103fd4 	ori	r4,r16,16639
81103fb8:	81103fe4 	muli	r4,r16,16639
81103fbc:	81103ff4 	orhi	r4,r16,16639
81103fc0:	81104004 	addi	r4,r16,16640
81103fc4:	81104014 	ori	r4,r16,16640
81103fc8:	81104024 	muli	r4,r16,16640
81103fcc:	81104034 	orhi	r4,r16,16640
81103fd0:	81104044 	addi	r4,r16,16641
			case 'A':
				pTranAddr = (alt_u32 *)TRAN_A_BASE;
81103fd4:	00a04834 	movhi	r2,33056
81103fd8:	108e0004 	addi	r2,r2,14336
81103fdc:	e0bffc15 	stw	r2,-16(fp)
			break;
81103fe0:	00001c06 	br	81104054 <TRAN_WRITE_REG32+0xfc>
			case 'B':
				pTranAddr = (alt_u32 *)TRAN_B_BASE;
81103fe4:	00a04834 	movhi	r2,33056
81103fe8:	108d0004 	addi	r2,r2,13312
81103fec:	e0bffc15 	stw	r2,-16(fp)
			break;
81103ff0:	00001806 	br	81104054 <TRAN_WRITE_REG32+0xfc>
			case 'C':
				pTranAddr = (alt_u32 *)TRAN_C_BASE;
81103ff4:	00a04834 	movhi	r2,33056
81103ff8:	108c0004 	addi	r2,r2,12288
81103ffc:	e0bffc15 	stw	r2,-16(fp)
			break;
81104000:	00001406 	br	81104054 <TRAN_WRITE_REG32+0xfc>
			case 'D':
				pTranAddr = (alt_u32 *)TRAN_D_BASE;
81104004:	00a04834 	movhi	r2,33056
81104008:	108b0004 	addi	r2,r2,11264
8110400c:	e0bffc15 	stw	r2,-16(fp)
			break;
81104010:	00001006 	br	81104054 <TRAN_WRITE_REG32+0xfc>
			case 'E':
				pTranAddr = (alt_u32 *)TRAN_E_BASE;
81104014:	00a04834 	movhi	r2,33056
81104018:	108a0004 	addi	r2,r2,10240
8110401c:	e0bffc15 	stw	r2,-16(fp)
			break;
81104020:	00000c06 	br	81104054 <TRAN_WRITE_REG32+0xfc>
			case 'F':
				pTranAddr = (alt_u32 *)TRAN_F_BASE;
81104024:	00a04834 	movhi	r2,33056
81104028:	10890004 	addi	r2,r2,9216
8110402c:	e0bffc15 	stw	r2,-16(fp)
			break;
81104030:	00000806 	br	81104054 <TRAN_WRITE_REG32+0xfc>
			case 'G':
				pTranAddr = (alt_u32 *)TRAN_G_BASE;
81104034:	00a04834 	movhi	r2,33056
81104038:	10880004 	addi	r2,r2,8192
8110403c:	e0bffc15 	stw	r2,-16(fp)
			break;
81104040:	00000406 	br	81104054 <TRAN_WRITE_REG32+0xfc>
			case 'H':
				pTranAddr = (alt_u32 *)TRAN_H_BASE;
81104044:	00a04834 	movhi	r2,33056
81104048:	10870004 	addi	r2,r2,7168
8110404c:	e0bffc15 	stw	r2,-16(fp)
			break;
81104050:	0001883a 	nop
		}
		*(pTranAddr + (alt_u32)RegisterOffset) = (alt_u32) RegisterValue;
81104054:	e0bffe03 	ldbu	r2,-8(fp)
81104058:	1085883a 	add	r2,r2,r2
8110405c:	1085883a 	add	r2,r2,r2
81104060:	1007883a 	mov	r3,r2
81104064:	e0bffc17 	ldw	r2,-16(fp)
81104068:	10c5883a 	add	r2,r2,r3
8110406c:	e0ffff17 	ldw	r3,-4(fp)
81104070:	10c00015 	stw	r3,0(r2)
	}
81104074:	0001883a 	nop
81104078:	e037883a 	mov	sp,fp
8110407c:	df000017 	ldw	fp,0(sp)
81104080:	dec00104 	addi	sp,sp,4
81104084:	f800283a 	ret

81104088 <TRAN_READ_REG32>:

	alt_u32 TRAN_READ_REG32(char c_SpwID, alt_u8 RegisterOffset){
81104088:	defffb04 	addi	sp,sp,-20
8110408c:	de00012e 	bgeu	sp,et,81104094 <TRAN_READ_REG32+0xc>
81104090:	003b68fa 	trap	3
81104094:	df000415 	stw	fp,16(sp)
81104098:	df000404 	addi	fp,sp,16
8110409c:	2007883a 	mov	r3,r4
811040a0:	2805883a 	mov	r2,r5
811040a4:	e0fffe05 	stb	r3,-8(fp)
811040a8:	e0bfff05 	stb	r2,-4(fp)
		alt_u32 RegisterValue = 0;
811040ac:	e03ffd15 	stw	zero,-12(fp)
		alt_u32 *pTranAddr = (alt_u32 *)TRAN_A_BASE;
811040b0:	00a04834 	movhi	r2,33056
811040b4:	108e0004 	addi	r2,r2,14336
811040b8:	e0bffc15 	stw	r2,-16(fp)
		switch (c_SpwID) {
811040bc:	e0bffe07 	ldb	r2,-8(fp)
811040c0:	10bfefc4 	addi	r2,r2,-65
811040c4:	10c00228 	cmpgeui	r3,r2,8
811040c8:	18002e1e 	bne	r3,zero,81104184 <TRAN_READ_REG32+0xfc>
811040cc:	100690ba 	slli	r3,r2,2
811040d0:	00a04434 	movhi	r2,33040
811040d4:	10903904 	addi	r2,r2,16612
811040d8:	1885883a 	add	r2,r3,r2
811040dc:	10800017 	ldw	r2,0(r2)
811040e0:	1000683a 	jmp	r2
811040e4:	81104104 	addi	r4,r16,16644
811040e8:	81104114 	ori	r4,r16,16644
811040ec:	81104124 	muli	r4,r16,16644
811040f0:	81104134 	orhi	r4,r16,16644
811040f4:	81104144 	addi	r4,r16,16645
811040f8:	81104154 	ori	r4,r16,16645
811040fc:	81104164 	muli	r4,r16,16645
81104100:	81104174 	orhi	r4,r16,16645
			case 'A':
				pTranAddr = (alt_u32 *)TRAN_A_BASE;
81104104:	00a04834 	movhi	r2,33056
81104108:	108e0004 	addi	r2,r2,14336
8110410c:	e0bffc15 	stw	r2,-16(fp)
			break;
81104110:	00001c06 	br	81104184 <TRAN_READ_REG32+0xfc>
			case 'B':
				pTranAddr = (alt_u32 *)TRAN_B_BASE;
81104114:	00a04834 	movhi	r2,33056
81104118:	108d0004 	addi	r2,r2,13312
8110411c:	e0bffc15 	stw	r2,-16(fp)
			break;
81104120:	00001806 	br	81104184 <TRAN_READ_REG32+0xfc>
			case 'C':
				pTranAddr = (alt_u32 *)TRAN_C_BASE;
81104124:	00a04834 	movhi	r2,33056
81104128:	108c0004 	addi	r2,r2,12288
8110412c:	e0bffc15 	stw	r2,-16(fp)
			break;
81104130:	00001406 	br	81104184 <TRAN_READ_REG32+0xfc>
			case 'D':
				pTranAddr = (alt_u32 *)TRAN_D_BASE;
81104134:	00a04834 	movhi	r2,33056
81104138:	108b0004 	addi	r2,r2,11264
8110413c:	e0bffc15 	stw	r2,-16(fp)
			break;
81104140:	00001006 	br	81104184 <TRAN_READ_REG32+0xfc>
			case 'E':
				pTranAddr = (alt_u32 *)TRAN_E_BASE;
81104144:	00a04834 	movhi	r2,33056
81104148:	108a0004 	addi	r2,r2,10240
8110414c:	e0bffc15 	stw	r2,-16(fp)
			break;
81104150:	00000c06 	br	81104184 <TRAN_READ_REG32+0xfc>
			case 'F':
				pTranAddr = (alt_u32 *)TRAN_F_BASE;
81104154:	00a04834 	movhi	r2,33056
81104158:	10890004 	addi	r2,r2,9216
8110415c:	e0bffc15 	stw	r2,-16(fp)
			break;
81104160:	00000806 	br	81104184 <TRAN_READ_REG32+0xfc>
			case 'G':
				pTranAddr = (alt_u32 *)TRAN_G_BASE;
81104164:	00a04834 	movhi	r2,33056
81104168:	10880004 	addi	r2,r2,8192
8110416c:	e0bffc15 	stw	r2,-16(fp)
			break;
81104170:	00000406 	br	81104184 <TRAN_READ_REG32+0xfc>
			case 'H':
				pTranAddr = (alt_u32 *)TRAN_H_BASE;
81104174:	00a04834 	movhi	r2,33056
81104178:	10870004 	addi	r2,r2,7168
8110417c:	e0bffc15 	stw	r2,-16(fp)
			break;
81104180:	0001883a 	nop
		}
		RegisterValue = *(pTranAddr + (alt_u32)RegisterOffset);
81104184:	e0bfff03 	ldbu	r2,-4(fp)
81104188:	1085883a 	add	r2,r2,r2
8110418c:	1085883a 	add	r2,r2,r2
81104190:	1007883a 	mov	r3,r2
81104194:	e0bffc17 	ldw	r2,-16(fp)
81104198:	10c5883a 	add	r2,r2,r3
8110419c:	10800017 	ldw	r2,0(r2)
811041a0:	e0bffd15 	stw	r2,-12(fp)
		return RegisterValue;
811041a4:	e0bffd17 	ldw	r2,-12(fp)
	}
811041a8:	e037883a 	mov	sp,fp
811041ac:	df000017 	ldw	fp,0(sp)
811041b0:	dec00104 	addi	sp,sp,4
811041b4:	f800283a 	ret

811041b8 <b_Transparent_Interface_Write_Register>:

	bool b_Transparent_Interface_Write_Register(char c_SpwID, alt_u8 uc_RegisterAddress, alt_u32 ul_RegisterValue){
811041b8:	defffa04 	addi	sp,sp,-24
811041bc:	de00012e 	bgeu	sp,et,811041c4 <b_Transparent_Interface_Write_Register+0xc>
811041c0:	003b68fa 	trap	3
811041c4:	dfc00515 	stw	ra,20(sp)
811041c8:	df000415 	stw	fp,16(sp)
811041cc:	df000404 	addi	fp,sp,16
811041d0:	2007883a 	mov	r3,r4
811041d4:	2805883a 	mov	r2,r5
811041d8:	e1bfff15 	stw	r6,-4(fp)
811041dc:	e0fffd05 	stb	r3,-12(fp)
811041e0:	e0bffe05 	stb	r2,-8(fp)

		bool bSuccess = FALSE;
811041e4:	e03ffc15 	stw	zero,-16(fp)

		if (uc_RegisterAddress <= 0x02) {
811041e8:	e0bffe03 	ldbu	r2,-8(fp)
811041ec:	108000e8 	cmpgeui	r2,r2,3
811041f0:	1000081e 	bne	r2,zero,81104214 <b_Transparent_Interface_Write_Register+0x5c>
			TRAN_WRITE_REG32(c_SpwID, uc_RegisterAddress, ul_RegisterValue);
811041f4:	e0bffd07 	ldb	r2,-12(fp)
811041f8:	e0fffe03 	ldbu	r3,-8(fp)
811041fc:	e1bfff17 	ldw	r6,-4(fp)
81104200:	180b883a 	mov	r5,r3
81104204:	1009883a 	mov	r4,r2
81104208:	1103f580 	call	81103f58 <TRAN_WRITE_REG32>
			bSuccess = TRUE;
8110420c:	00800044 	movi	r2,1
81104210:	e0bffc15 	stw	r2,-16(fp)
		}

		return bSuccess;
81104214:	e0bffc17 	ldw	r2,-16(fp)
	}
81104218:	e037883a 	mov	sp,fp
8110421c:	dfc00117 	ldw	ra,4(sp)
81104220:	df000017 	ldw	fp,0(sp)
81104224:	dec00204 	addi	sp,sp,8
81104228:	f800283a 	ret

8110422c <ul_Transparent_Interface_Read_Register>:

	alt_u32 ul_Transparent_Interface_Read_Register(char c_SpwID, alt_u8 uc_RegisterAddress){
8110422c:	defffb04 	addi	sp,sp,-20
81104230:	de00012e 	bgeu	sp,et,81104238 <ul_Transparent_Interface_Read_Register+0xc>
81104234:	003b68fa 	trap	3
81104238:	dfc00415 	stw	ra,16(sp)
8110423c:	df000315 	stw	fp,12(sp)
81104240:	df000304 	addi	fp,sp,12
81104244:	2007883a 	mov	r3,r4
81104248:	2805883a 	mov	r2,r5
8110424c:	e0fffe05 	stb	r3,-8(fp)
81104250:	e0bfff05 	stb	r2,-4(fp)

		alt_u32 ul_RegisterValue = 0;
81104254:	e03ffd15 	stw	zero,-12(fp)

		if (uc_RegisterAddress <= 0x02) {
81104258:	e0bfff03 	ldbu	r2,-4(fp)
8110425c:	108000e8 	cmpgeui	r2,r2,3
81104260:	1000061e 	bne	r2,zero,8110427c <ul_Transparent_Interface_Read_Register+0x50>
			ul_RegisterValue = TRAN_READ_REG32(c_SpwID, uc_RegisterAddress);
81104264:	e0bffe07 	ldb	r2,-8(fp)
81104268:	e0ffff03 	ldbu	r3,-4(fp)
8110426c:	180b883a 	mov	r5,r3
81104270:	1009883a 	mov	r4,r2
81104274:	11040880 	call	81104088 <TRAN_READ_REG32>
81104278:	e0bffd15 	stw	r2,-12(fp)
		}

		return ul_RegisterValue;
8110427c:	e0bffd17 	ldw	r2,-12(fp)
	}
81104280:	e037883a 	mov	sp,fp
81104284:	dfc00117 	ldw	ra,4(sp)
81104288:	df000017 	ldw	fp,0(sp)
8110428c:	dec00204 	addi	sp,sp,8
81104290:	f800283a 	ret

81104294 <v_Transparent_Interface_Enable_Control>:

	bool v_Transparent_Interface_Enable_Control(char c_SpwID, alt_u8 uc_RegisterOperation, alt_u32 ul_EnableMask){
81104294:	defff804 	addi	sp,sp,-32
81104298:	de00012e 	bgeu	sp,et,811042a0 <v_Transparent_Interface_Enable_Control+0xc>
8110429c:	003b68fa 	trap	3
811042a0:	dfc00715 	stw	ra,28(sp)
811042a4:	df000615 	stw	fp,24(sp)
811042a8:	df000604 	addi	fp,sp,24
811042ac:	2007883a 	mov	r3,r4
811042b0:	2805883a 	mov	r2,r5
811042b4:	e1bfff15 	stw	r6,-4(fp)
811042b8:	e0fffd05 	stb	r3,-12(fp)
811042bc:	e0bffe05 	stb	r2,-8(fp)

		bool bSuccess = FALSE;
811042c0:	e03ffa15 	stw	zero,-24(fp)

		const alt_u32 ul_tran_mask = TRAN_INTERFACE_ENABLE_CONTROL_BIT_MASK | TRAN_INTERFACE_RX_ENABLE_CONTROL_BIT_MASK | TRAN_INTERFACE_TX_ENABLE_CONTROL_BIT_MASK;
811042c4:	0081c004 	movi	r2,1792
811042c8:	e0bffc15 	stw	r2,-16(fp)
		alt_u32 *ul_tran_interface_control_status_register_value = &ul_tran_a_interface_control_status_register_value;
811042cc:	d0a04804 	addi	r2,gp,-32480
811042d0:	e0bffb15 	stw	r2,-20(fp)
		switch (c_SpwID) {
811042d4:	e0bffd07 	ldb	r2,-12(fp)
811042d8:	10bfefc4 	addi	r2,r2,-65
811042dc:	10c00228 	cmpgeui	r3,r2,8
811042e0:	1800361e 	bne	r3,zero,811043bc <v_Transparent_Interface_Enable_Control+0x128>
811042e4:	100690ba 	slli	r3,r2,2
811042e8:	00a04434 	movhi	r2,33040
811042ec:	1090bf04 	addi	r2,r2,17148
811042f0:	1885883a 	add	r2,r3,r2
811042f4:	10800017 	ldw	r2,0(r2)
811042f8:	1000683a 	jmp	r2
811042fc:	8110431c 	xori	r4,r16,16652
81104300:	81104330 	cmpltui	r4,r16,16652
81104304:	81104344 	addi	r4,r16,16653
81104308:	81104358 	cmpnei	r4,r16,16653
8110430c:	8110436c 	andhi	r4,r16,16653
81104310:	81104380 	call	88110438 <__reset+0x20f0438>
81104314:	81104394 	ori	r4,r16,16654
81104318:	811043a8 	cmpgeui	r4,r16,16654
			case 'A':
				ul_tran_interface_control_status_register_value = &ul_tran_a_interface_control_status_register_value;
8110431c:	d0a04804 	addi	r2,gp,-32480
81104320:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104324:	00800044 	movi	r2,1
81104328:	e0bffa15 	stw	r2,-24(fp)
			break;
8110432c:	00002306 	br	811043bc <v_Transparent_Interface_Enable_Control+0x128>
			case 'B':
				ul_tran_interface_control_status_register_value = &ul_tran_b_interface_control_status_register_value;
81104330:	d0a04904 	addi	r2,gp,-32476
81104334:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104338:	00800044 	movi	r2,1
8110433c:	e0bffa15 	stw	r2,-24(fp)
			break;
81104340:	00001e06 	br	811043bc <v_Transparent_Interface_Enable_Control+0x128>
			case 'C':
				ul_tran_interface_control_status_register_value = &ul_tran_c_interface_control_status_register_value;
81104344:	d0a04a04 	addi	r2,gp,-32472
81104348:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
8110434c:	00800044 	movi	r2,1
81104350:	e0bffa15 	stw	r2,-24(fp)
			break;
81104354:	00001906 	br	811043bc <v_Transparent_Interface_Enable_Control+0x128>
			case 'D':
				ul_tran_interface_control_status_register_value = &ul_tran_d_interface_control_status_register_value;
81104358:	d0a04b04 	addi	r2,gp,-32468
8110435c:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104360:	00800044 	movi	r2,1
81104364:	e0bffa15 	stw	r2,-24(fp)
			break;
81104368:	00001406 	br	811043bc <v_Transparent_Interface_Enable_Control+0x128>
			case 'E':
				ul_tran_interface_control_status_register_value = &ul_tran_e_interface_control_status_register_value;
8110436c:	d0a04c04 	addi	r2,gp,-32464
81104370:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104374:	00800044 	movi	r2,1
81104378:	e0bffa15 	stw	r2,-24(fp)
			break;
8110437c:	00000f06 	br	811043bc <v_Transparent_Interface_Enable_Control+0x128>
			case 'F':
				ul_tran_interface_control_status_register_value = &ul_tran_f_interface_control_status_register_value;
81104380:	d0a04d04 	addi	r2,gp,-32460
81104384:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104388:	00800044 	movi	r2,1
8110438c:	e0bffa15 	stw	r2,-24(fp)
			break;
81104390:	00000a06 	br	811043bc <v_Transparent_Interface_Enable_Control+0x128>
			case 'G':
				ul_tran_interface_control_status_register_value = &ul_tran_g_interface_control_status_register_value;
81104394:	d0a04e04 	addi	r2,gp,-32456
81104398:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
8110439c:	00800044 	movi	r2,1
811043a0:	e0bffa15 	stw	r2,-24(fp)
			break;
811043a4:	00000506 	br	811043bc <v_Transparent_Interface_Enable_Control+0x128>
			case 'H':
				ul_tran_interface_control_status_register_value = &ul_tran_h_interface_control_status_register_value;
811043a8:	d0a04f04 	addi	r2,gp,-32452
811043ac:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811043b0:	00800044 	movi	r2,1
811043b4:	e0bffa15 	stw	r2,-24(fp)
			break;
811043b8:	0001883a 	nop
		}
		if ((bSuccess == TRUE) && ((ul_EnableMask & ul_tran_mask) != 0)){
811043bc:	e0bffa17 	ldw	r2,-24(fp)
811043c0:	10800058 	cmpnei	r2,r2,1
811043c4:	10002b1e 	bne	r2,zero,81104474 <v_Transparent_Interface_Enable_Control+0x1e0>
811043c8:	e0ffff17 	ldw	r3,-4(fp)
811043cc:	e0bffc17 	ldw	r2,-16(fp)
811043d0:	1884703a 	and	r2,r3,r2
811043d4:	10002726 	beq	r2,zero,81104474 <v_Transparent_Interface_Enable_Control+0x1e0>
			switch (uc_RegisterOperation){
811043d8:	e0bffe03 	ldbu	r2,-8(fp)
811043dc:	10000326 	beq	r2,zero,811043ec <v_Transparent_Interface_Enable_Control+0x158>
811043e0:	10800060 	cmpeqi	r2,r2,1
811043e4:	1000121e 	bne	r2,zero,81104430 <v_Transparent_Interface_Enable_Control+0x19c>
					TRAN_WRITE_REG32(c_SpwID, TRAN_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_tran_interface_control_status_register_value);
					bSuccess = TRUE;
				break;

			}
		} else {
811043e8:	00002306 	br	81104478 <v_Transparent_Interface_Enable_Control+0x1e4>
		}
		if ((bSuccess == TRUE) && ((ul_EnableMask & ul_tran_mask) != 0)){
			switch (uc_RegisterOperation){
			
				case TRAN_REG_CLEAR:
					*ul_tran_interface_control_status_register_value &= ~ul_EnableMask;
811043ec:	e0bffb17 	ldw	r2,-20(fp)
811043f0:	10c00017 	ldw	r3,0(r2)
811043f4:	e0bfff17 	ldw	r2,-4(fp)
811043f8:	0084303a 	nor	r2,zero,r2
811043fc:	1886703a 	and	r3,r3,r2
81104400:	e0bffb17 	ldw	r2,-20(fp)
81104404:	10c00015 	stw	r3,0(r2)
					TRAN_WRITE_REG32(c_SpwID, TRAN_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_tran_interface_control_status_register_value);
81104408:	e0fffd07 	ldb	r3,-12(fp)
8110440c:	e0bffb17 	ldw	r2,-20(fp)
81104410:	10800017 	ldw	r2,0(r2)
81104414:	100d883a 	mov	r6,r2
81104418:	01400804 	movi	r5,32
8110441c:	1809883a 	mov	r4,r3
81104420:	1103f580 	call	81103f58 <TRAN_WRITE_REG32>
					bSuccess = TRUE;
81104424:	00800044 	movi	r2,1
81104428:	e0bffa15 	stw	r2,-24(fp)
				break;
8110442c:	00001006 	br	81104470 <v_Transparent_Interface_Enable_Control+0x1dc>

				case TRAN_REG_SET:
					*ul_tran_interface_control_status_register_value |= ul_EnableMask;
81104430:	e0bffb17 	ldw	r2,-20(fp)
81104434:	10c00017 	ldw	r3,0(r2)
81104438:	e0bfff17 	ldw	r2,-4(fp)
8110443c:	1886b03a 	or	r3,r3,r2
81104440:	e0bffb17 	ldw	r2,-20(fp)
81104444:	10c00015 	stw	r3,0(r2)
					TRAN_WRITE_REG32(c_SpwID, TRAN_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_tran_interface_control_status_register_value);
81104448:	e0fffd07 	ldb	r3,-12(fp)
8110444c:	e0bffb17 	ldw	r2,-20(fp)
81104450:	10800017 	ldw	r2,0(r2)
81104454:	100d883a 	mov	r6,r2
81104458:	01400804 	movi	r5,32
8110445c:	1809883a 	mov	r4,r3
81104460:	1103f580 	call	81103f58 <TRAN_WRITE_REG32>
					bSuccess = TRUE;
81104464:	00800044 	movi	r2,1
81104468:	e0bffa15 	stw	r2,-24(fp)
				break;
8110446c:	0001883a 	nop

			}
		} else {
81104470:	00000106 	br	81104478 <v_Transparent_Interface_Enable_Control+0x1e4>
			bSuccess = FALSE;
81104474:	e03ffa15 	stw	zero,-24(fp)
		}

		return bSuccess;
81104478:	e0bffa17 	ldw	r2,-24(fp)
	}
8110447c:	e037883a 	mov	sp,fp
81104480:	dfc00117 	ldw	ra,4(sp)
81104484:	df000017 	ldw	fp,0(sp)
81104488:	dec00204 	addi	sp,sp,8
8110448c:	f800283a 	ret

81104490 <v_Transparent_Interface_Interrupts_Enable_Control>:

	bool v_Transparent_Interface_Interrupts_Enable_Control(char c_SpwID, alt_u8 uc_RegisterOperation, alt_u32 ul_InterruptMask){
81104490:	defff804 	addi	sp,sp,-32
81104494:	de00012e 	bgeu	sp,et,8110449c <v_Transparent_Interface_Interrupts_Enable_Control+0xc>
81104498:	003b68fa 	trap	3
8110449c:	dfc00715 	stw	ra,28(sp)
811044a0:	df000615 	stw	fp,24(sp)
811044a4:	df000604 	addi	fp,sp,24
811044a8:	2007883a 	mov	r3,r4
811044ac:	2805883a 	mov	r2,r5
811044b0:	e1bfff15 	stw	r6,-4(fp)
811044b4:	e0fffd05 	stb	r3,-12(fp)
811044b8:	e0bffe05 	stb	r2,-8(fp)

		bool bSuccess = FALSE;
811044bc:	e03ffa15 	stw	zero,-24(fp)

		const alt_u32 ul_tran_mask = TRAN_INTERFACE_ERROR_INTERRUPT_ENABLE_BIT_MASK | TRAN_DATA_RECEIVED_INTERRUPT_ENABLE_BIT_MASK | TRAN_RX_FIFO_FULL_INTERRUPT_ENABLE_BIT_MASK | TRAN_TX_FIFO_EMPTY_INTERRUPT_ENABLE_BIT_MASK;
811044c0:	00803c04 	movi	r2,240
811044c4:	e0bffc15 	stw	r2,-16(fp)
		alt_u32 *ul_tran_interface_control_status_register_value = &ul_tran_a_interface_control_status_register_value;
811044c8:	d0a04804 	addi	r2,gp,-32480
811044cc:	e0bffb15 	stw	r2,-20(fp)
		switch (c_SpwID) {
811044d0:	e0bffd07 	ldb	r2,-12(fp)
811044d4:	10bfefc4 	addi	r2,r2,-65
811044d8:	10c00228 	cmpgeui	r3,r2,8
811044dc:	1800361e 	bne	r3,zero,811045b8 <v_Transparent_Interface_Interrupts_Enable_Control+0x128>
811044e0:	100690ba 	slli	r3,r2,2
811044e4:	00a04434 	movhi	r2,33040
811044e8:	10913e04 	addi	r2,r2,17656
811044ec:	1885883a 	add	r2,r3,r2
811044f0:	10800017 	ldw	r2,0(r2)
811044f4:	1000683a 	jmp	r2
811044f8:	81104518 	cmpnei	r4,r16,16660
811044fc:	8110452c 	andhi	r4,r16,16660
81104500:	81104540 	call	88110454 <__reset+0x20f0454>
81104504:	81104554 	ori	r4,r16,16661
81104508:	81104568 	cmpgeui	r4,r16,16661
8110450c:	8110457c 	xorhi	r4,r16,16661
81104510:	81104590 	cmplti	r4,r16,16662
81104514:	811045a4 	muli	r4,r16,16662
			case 'A':
				ul_tran_interface_control_status_register_value = &ul_tran_a_interface_control_status_register_value;
81104518:	d0a04804 	addi	r2,gp,-32480
8110451c:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104520:	00800044 	movi	r2,1
81104524:	e0bffa15 	stw	r2,-24(fp)
			break;
81104528:	00002306 	br	811045b8 <v_Transparent_Interface_Interrupts_Enable_Control+0x128>
			case 'B':
				ul_tran_interface_control_status_register_value = &ul_tran_b_interface_control_status_register_value;
8110452c:	d0a04904 	addi	r2,gp,-32476
81104530:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104534:	00800044 	movi	r2,1
81104538:	e0bffa15 	stw	r2,-24(fp)
			break;
8110453c:	00001e06 	br	811045b8 <v_Transparent_Interface_Interrupts_Enable_Control+0x128>
			case 'C':
				ul_tran_interface_control_status_register_value = &ul_tran_c_interface_control_status_register_value;
81104540:	d0a04a04 	addi	r2,gp,-32472
81104544:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104548:	00800044 	movi	r2,1
8110454c:	e0bffa15 	stw	r2,-24(fp)
			break;
81104550:	00001906 	br	811045b8 <v_Transparent_Interface_Interrupts_Enable_Control+0x128>
			case 'D':
				ul_tran_interface_control_status_register_value = &ul_tran_d_interface_control_status_register_value;
81104554:	d0a04b04 	addi	r2,gp,-32468
81104558:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
8110455c:	00800044 	movi	r2,1
81104560:	e0bffa15 	stw	r2,-24(fp)
			break;
81104564:	00001406 	br	811045b8 <v_Transparent_Interface_Interrupts_Enable_Control+0x128>
			case 'E':
				ul_tran_interface_control_status_register_value = &ul_tran_e_interface_control_status_register_value;
81104568:	d0a04c04 	addi	r2,gp,-32464
8110456c:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104570:	00800044 	movi	r2,1
81104574:	e0bffa15 	stw	r2,-24(fp)
			break;
81104578:	00000f06 	br	811045b8 <v_Transparent_Interface_Interrupts_Enable_Control+0x128>
			case 'F':
				ul_tran_interface_control_status_register_value = &ul_tran_f_interface_control_status_register_value;
8110457c:	d0a04d04 	addi	r2,gp,-32460
81104580:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104584:	00800044 	movi	r2,1
81104588:	e0bffa15 	stw	r2,-24(fp)
			break;
8110458c:	00000a06 	br	811045b8 <v_Transparent_Interface_Interrupts_Enable_Control+0x128>
			case 'G':
				ul_tran_interface_control_status_register_value = &ul_tran_g_interface_control_status_register_value;
81104590:	d0a04e04 	addi	r2,gp,-32456
81104594:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104598:	00800044 	movi	r2,1
8110459c:	e0bffa15 	stw	r2,-24(fp)
			break;
811045a0:	00000506 	br	811045b8 <v_Transparent_Interface_Interrupts_Enable_Control+0x128>
			case 'H':
				ul_tran_interface_control_status_register_value = &ul_tran_h_interface_control_status_register_value;
811045a4:	d0a04f04 	addi	r2,gp,-32452
811045a8:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811045ac:	00800044 	movi	r2,1
811045b0:	e0bffa15 	stw	r2,-24(fp)
			break;
811045b4:	0001883a 	nop
		}
		if ((bSuccess == TRUE) && ((ul_InterruptMask & ul_tran_mask) != 0)){
811045b8:	e0bffa17 	ldw	r2,-24(fp)
811045bc:	10800058 	cmpnei	r2,r2,1
811045c0:	10002b1e 	bne	r2,zero,81104670 <v_Transparent_Interface_Interrupts_Enable_Control+0x1e0>
811045c4:	e0ffff17 	ldw	r3,-4(fp)
811045c8:	e0bffc17 	ldw	r2,-16(fp)
811045cc:	1884703a 	and	r2,r3,r2
811045d0:	10002726 	beq	r2,zero,81104670 <v_Transparent_Interface_Interrupts_Enable_Control+0x1e0>
			switch (uc_RegisterOperation){
811045d4:	e0bffe03 	ldbu	r2,-8(fp)
811045d8:	10000326 	beq	r2,zero,811045e8 <v_Transparent_Interface_Interrupts_Enable_Control+0x158>
811045dc:	10800060 	cmpeqi	r2,r2,1
811045e0:	1000121e 	bne	r2,zero,8110462c <v_Transparent_Interface_Interrupts_Enable_Control+0x19c>
					TRAN_WRITE_REG32(c_SpwID, TRAN_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_tran_interface_control_status_register_value);
					bSuccess = TRUE;
				break;

			}
		} else {
811045e4:	00002306 	br	81104674 <v_Transparent_Interface_Interrupts_Enable_Control+0x1e4>
		}
		if ((bSuccess == TRUE) && ((ul_InterruptMask & ul_tran_mask) != 0)){
			switch (uc_RegisterOperation){

				case TRAN_REG_CLEAR:
					*ul_tran_interface_control_status_register_value &= ~ul_InterruptMask;
811045e8:	e0bffb17 	ldw	r2,-20(fp)
811045ec:	10c00017 	ldw	r3,0(r2)
811045f0:	e0bfff17 	ldw	r2,-4(fp)
811045f4:	0084303a 	nor	r2,zero,r2
811045f8:	1886703a 	and	r3,r3,r2
811045fc:	e0bffb17 	ldw	r2,-20(fp)
81104600:	10c00015 	stw	r3,0(r2)
					TRAN_WRITE_REG32(c_SpwID, TRAN_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_tran_interface_control_status_register_value);
81104604:	e0fffd07 	ldb	r3,-12(fp)
81104608:	e0bffb17 	ldw	r2,-20(fp)
8110460c:	10800017 	ldw	r2,0(r2)
81104610:	100d883a 	mov	r6,r2
81104614:	01400804 	movi	r5,32
81104618:	1809883a 	mov	r4,r3
8110461c:	1103f580 	call	81103f58 <TRAN_WRITE_REG32>
					bSuccess = TRUE;
81104620:	00800044 	movi	r2,1
81104624:	e0bffa15 	stw	r2,-24(fp)
				break;
81104628:	00001006 	br	8110466c <v_Transparent_Interface_Interrupts_Enable_Control+0x1dc>

				case TRAN_REG_SET:
					*ul_tran_interface_control_status_register_value |= ul_InterruptMask;
8110462c:	e0bffb17 	ldw	r2,-20(fp)
81104630:	10c00017 	ldw	r3,0(r2)
81104634:	e0bfff17 	ldw	r2,-4(fp)
81104638:	1886b03a 	or	r3,r3,r2
8110463c:	e0bffb17 	ldw	r2,-20(fp)
81104640:	10c00015 	stw	r3,0(r2)
					TRAN_WRITE_REG32(c_SpwID, TRAN_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_tran_interface_control_status_register_value);
81104644:	e0fffd07 	ldb	r3,-12(fp)
81104648:	e0bffb17 	ldw	r2,-20(fp)
8110464c:	10800017 	ldw	r2,0(r2)
81104650:	100d883a 	mov	r6,r2
81104654:	01400804 	movi	r5,32
81104658:	1809883a 	mov	r4,r3
8110465c:	1103f580 	call	81103f58 <TRAN_WRITE_REG32>
					bSuccess = TRUE;
81104660:	00800044 	movi	r2,1
81104664:	e0bffa15 	stw	r2,-24(fp)
				break;
81104668:	0001883a 	nop

			}
		} else {
8110466c:	00000106 	br	81104674 <v_Transparent_Interface_Interrupts_Enable_Control+0x1e4>
			bSuccess = FALSE;
81104670:	e03ffa15 	stw	zero,-24(fp)
		}

		return bSuccess;
81104674:	e0bffa17 	ldw	r2,-24(fp)
	}
81104678:	e037883a 	mov	sp,fp
8110467c:	dfc00117 	ldw	ra,4(sp)
81104680:	df000017 	ldw	fp,0(sp)
81104684:	dec00204 	addi	sp,sp,8
81104688:	f800283a 	ret

8110468c <ul_Transparent_Interface_Interrupts_Flags_Read>:

	alt_u32 ul_Transparent_Interface_Interrupts_Flags_Read(char c_SpwID){
8110468c:	defffb04 	addi	sp,sp,-20
81104690:	de00012e 	bgeu	sp,et,81104698 <ul_Transparent_Interface_Interrupts_Flags_Read+0xc>
81104694:	003b68fa 	trap	3
81104698:	dfc00415 	stw	ra,16(sp)
8110469c:	df000315 	stw	fp,12(sp)
811046a0:	df000304 	addi	fp,sp,12
811046a4:	2005883a 	mov	r2,r4
811046a8:	e0bfff05 	stb	r2,-4(fp)

		const alt_u32 ul_tran_mask = TRAN_INTERFACE_ERROR_INTERRUPT_FLAG_MASK | TRAN_DATA_RECEIVED_INTERRUPT_FLAG_MASK | TRAN_RX_FIFO_FULL_INTERRUPT_FLAG_MASK | TRAN_TX_FIFO_EMPTY_INTERRUPT_FLAG_MASK;
811046ac:	008003c4 	movi	r2,15
811046b0:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 ul_tran_interrupts_flags_value = TRAN_READ_REG32(c_SpwID, TRAN_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS) & ul_tran_mask;
811046b4:	e0bfff07 	ldb	r2,-4(fp)
811046b8:	01400804 	movi	r5,32
811046bc:	1009883a 	mov	r4,r2
811046c0:	11040880 	call	81104088 <TRAN_READ_REG32>
811046c4:	1007883a 	mov	r3,r2
811046c8:	e0bffd17 	ldw	r2,-12(fp)
811046cc:	1884703a 	and	r2,r3,r2
811046d0:	e0bffe15 	stw	r2,-8(fp)

		return ul_tran_interrupts_flags_value;
811046d4:	e0bffe17 	ldw	r2,-8(fp)
	}
811046d8:	e037883a 	mov	sp,fp
811046dc:	dfc00117 	ldw	ra,4(sp)
811046e0:	df000017 	ldw	fp,0(sp)
811046e4:	dec00204 	addi	sp,sp,8
811046e8:	f800283a 	ret

811046ec <v_Transparent_Interface_Interrupts_Flags_Clear>:

	void v_Transparent_Interface_Interrupts_Flags_Clear(char c_SpwID, alt_u32 ul_InterruptMask){
811046ec:	defff904 	addi	sp,sp,-28
811046f0:	de00012e 	bgeu	sp,et,811046f8 <v_Transparent_Interface_Interrupts_Flags_Clear+0xc>
811046f4:	003b68fa 	trap	3
811046f8:	dfc00615 	stw	ra,24(sp)
811046fc:	df000515 	stw	fp,20(sp)
81104700:	df000504 	addi	fp,sp,20
81104704:	2005883a 	mov	r2,r4
81104708:	e17fff15 	stw	r5,-4(fp)
8110470c:	e0bffe05 	stb	r2,-8(fp)
		bool bSuccess = FALSE;
81104710:	e03ffb15 	stw	zero,-20(fp)

		const alt_u32 ul_tran_mask = TRAN_INTERFACE_ERROR_INTERRUPT_FLAG_MASK | TRAN_DATA_RECEIVED_INTERRUPT_FLAG_MASK | TRAN_RX_FIFO_FULL_INTERRUPT_FLAG_MASK | TRAN_TX_FIFO_EMPTY_INTERRUPT_FLAG_MASK;
81104714:	008003c4 	movi	r2,15
81104718:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 *ul_tran_interface_control_status_register_value = &ul_tran_a_interface_control_status_register_value;
8110471c:	d0a04804 	addi	r2,gp,-32480
81104720:	e0bffc15 	stw	r2,-16(fp)
		switch (c_SpwID) {
81104724:	e0bffe07 	ldb	r2,-8(fp)
81104728:	10bfefc4 	addi	r2,r2,-65
8110472c:	10c00228 	cmpgeui	r3,r2,8
81104730:	1800361e 	bne	r3,zero,8110480c <v_Transparent_Interface_Interrupts_Flags_Clear+0x120>
81104734:	100690ba 	slli	r3,r2,2
81104738:	00a04434 	movhi	r2,33040
8110473c:	1091d304 	addi	r2,r2,18252
81104740:	1885883a 	add	r2,r3,r2
81104744:	10800017 	ldw	r2,0(r2)
81104748:	1000683a 	jmp	r2
8110474c:	8110476c 	andhi	r4,r16,16669
81104750:	81104780 	call	88110478 <__reset+0x20f0478>
81104754:	81104794 	ori	r4,r16,16670
81104758:	811047a8 	cmpgeui	r4,r16,16670
8110475c:	811047bc 	xorhi	r4,r16,16670
81104760:	811047d0 	cmplti	r4,r16,16671
81104764:	811047e4 	muli	r4,r16,16671
81104768:	811047f8 	rdprs	r4,r16,16671
			case 'A':
				ul_tran_interface_control_status_register_value = &ul_tran_a_interface_control_status_register_value;
8110476c:	d0a04804 	addi	r2,gp,-32480
81104770:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
81104774:	00800044 	movi	r2,1
81104778:	e0bffb15 	stw	r2,-20(fp)
			break;
8110477c:	00002306 	br	8110480c <v_Transparent_Interface_Interrupts_Flags_Clear+0x120>
			case 'B':
				ul_tran_interface_control_status_register_value = &ul_tran_b_interface_control_status_register_value;
81104780:	d0a04904 	addi	r2,gp,-32476
81104784:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
81104788:	00800044 	movi	r2,1
8110478c:	e0bffb15 	stw	r2,-20(fp)
			break;
81104790:	00001e06 	br	8110480c <v_Transparent_Interface_Interrupts_Flags_Clear+0x120>
			case 'C':
				ul_tran_interface_control_status_register_value = &ul_tran_c_interface_control_status_register_value;
81104794:	d0a04a04 	addi	r2,gp,-32472
81104798:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
8110479c:	00800044 	movi	r2,1
811047a0:	e0bffb15 	stw	r2,-20(fp)
			break;
811047a4:	00001906 	br	8110480c <v_Transparent_Interface_Interrupts_Flags_Clear+0x120>
			case 'D':
				ul_tran_interface_control_status_register_value = &ul_tran_d_interface_control_status_register_value;
811047a8:	d0a04b04 	addi	r2,gp,-32468
811047ac:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
811047b0:	00800044 	movi	r2,1
811047b4:	e0bffb15 	stw	r2,-20(fp)
			break;
811047b8:	00001406 	br	8110480c <v_Transparent_Interface_Interrupts_Flags_Clear+0x120>
			case 'E':
				ul_tran_interface_control_status_register_value = &ul_tran_e_interface_control_status_register_value;
811047bc:	d0a04c04 	addi	r2,gp,-32464
811047c0:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
811047c4:	00800044 	movi	r2,1
811047c8:	e0bffb15 	stw	r2,-20(fp)
			break;
811047cc:	00000f06 	br	8110480c <v_Transparent_Interface_Interrupts_Flags_Clear+0x120>
			case 'F':
				ul_tran_interface_control_status_register_value = &ul_tran_f_interface_control_status_register_value;
811047d0:	d0a04d04 	addi	r2,gp,-32460
811047d4:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
811047d8:	00800044 	movi	r2,1
811047dc:	e0bffb15 	stw	r2,-20(fp)
			break;
811047e0:	00000a06 	br	8110480c <v_Transparent_Interface_Interrupts_Flags_Clear+0x120>
			case 'G':
				ul_tran_interface_control_status_register_value = &ul_tran_g_interface_control_status_register_value;
811047e4:	d0a04e04 	addi	r2,gp,-32456
811047e8:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
811047ec:	00800044 	movi	r2,1
811047f0:	e0bffb15 	stw	r2,-20(fp)
			break;
811047f4:	00000506 	br	8110480c <v_Transparent_Interface_Interrupts_Flags_Clear+0x120>
			case 'H':
				ul_tran_interface_control_status_register_value = &ul_tran_h_interface_control_status_register_value;
811047f8:	d0a04f04 	addi	r2,gp,-32452
811047fc:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
81104800:	00800044 	movi	r2,1
81104804:	e0bffb15 	stw	r2,-20(fp)
			break;
81104808:	0001883a 	nop
		}
		if ((bSuccess == TRUE) && ((ul_InterruptMask & ul_tran_mask) != 0)){
8110480c:	e0bffb17 	ldw	r2,-20(fp)
81104810:	10800058 	cmpnei	r2,r2,1
81104814:	10000d1e 	bne	r2,zero,8110484c <v_Transparent_Interface_Interrupts_Flags_Clear+0x160>
81104818:	e0ffff17 	ldw	r3,-4(fp)
8110481c:	e0bffd17 	ldw	r2,-12(fp)
81104820:	1884703a 	and	r2,r3,r2
81104824:	10000926 	beq	r2,zero,8110484c <v_Transparent_Interface_Interrupts_Flags_Clear+0x160>
			TRAN_WRITE_REG32(c_SpwID, TRAN_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, (*ul_tran_interface_control_status_register_value | ul_InterruptMask));
81104828:	e13ffe07 	ldb	r4,-8(fp)
8110482c:	e0bffc17 	ldw	r2,-16(fp)
81104830:	10c00017 	ldw	r3,0(r2)
81104834:	e0bfff17 	ldw	r2,-4(fp)
81104838:	1884b03a 	or	r2,r3,r2
8110483c:	100d883a 	mov	r6,r2
81104840:	01400804 	movi	r5,32
81104844:	1103f580 	call	81103f58 <TRAN_WRITE_REG32>
81104848:	00000106 	br	81104850 <v_Transparent_Interface_Interrupts_Flags_Clear+0x164>
		} else {
			bSuccess = FALSE;
8110484c:	e03ffb15 	stw	zero,-20(fp)
		}
	}
81104850:	0001883a 	nop
81104854:	e037883a 	mov	sp,fp
81104858:	dfc00117 	ldw	ra,4(sp)
8110485c:	df000017 	ldw	fp,0(sp)
81104860:	dec00204 	addi	sp,sp,8
81104864:	f800283a 	ret

81104868 <v_Transparent_Interface_RX_FIFO_Reset>:

	void v_Transparent_Interface_RX_FIFO_Reset(char c_SpwID){
81104868:	defffd04 	addi	sp,sp,-12
8110486c:	de00012e 	bgeu	sp,et,81104874 <v_Transparent_Interface_RX_FIFO_Reset+0xc>
81104870:	003b68fa 	trap	3
81104874:	dfc00215 	stw	ra,8(sp)
81104878:	df000115 	stw	fp,4(sp)
8110487c:	df000104 	addi	fp,sp,4
81104880:	2005883a 	mov	r2,r4
81104884:	e0bfff05 	stb	r2,-4(fp)

		TRAN_WRITE_REG32(c_SpwID, TRAN_RX_MODE_CONTROL_REGISTER_ADDRESS, (alt_u32)TRAN_RX_FIFO_RESET_CONTROL_BIT_MASK);
81104888:	e0bfff07 	ldb	r2,-4(fp)
8110488c:	01800104 	movi	r6,4
81104890:	01400844 	movi	r5,33
81104894:	1009883a 	mov	r4,r2
81104898:	1103f580 	call	81103f58 <TRAN_WRITE_REG32>

	}
8110489c:	0001883a 	nop
811048a0:	e037883a 	mov	sp,fp
811048a4:	dfc00117 	ldw	ra,4(sp)
811048a8:	df000017 	ldw	fp,0(sp)
811048ac:	dec00204 	addi	sp,sp,8
811048b0:	f800283a 	ret

811048b4 <ul_Transparent_Interface_RX_FIFO_Status_Read>:

	alt_u32 ul_Transparent_Interface_RX_FIFO_Status_Read(char c_SpwID){
811048b4:	defffb04 	addi	sp,sp,-20
811048b8:	de00012e 	bgeu	sp,et,811048c0 <ul_Transparent_Interface_RX_FIFO_Status_Read+0xc>
811048bc:	003b68fa 	trap	3
811048c0:	dfc00415 	stw	ra,16(sp)
811048c4:	df000315 	stw	fp,12(sp)
811048c8:	df000304 	addi	fp,sp,12
811048cc:	2005883a 	mov	r2,r4
811048d0:	e0bfff05 	stb	r2,-4(fp)

		const alt_u32 ul_tran_mask = TRAN_RX_FIFO_USED_SPACE_VALUE_MASK | TRAN_RX_FIFO_EMPTY_STATUS_BIT_MASK | TRAN_RX_FIFO_FULL_STATUS_BIT_MASK;
811048d4:	0081fec4 	movi	r2,2043
811048d8:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 ul_tran_rx_fifo_status_value = TRAN_READ_REG32(c_SpwID, TRAN_RX_MODE_CONTROL_REGISTER_ADDRESS) & ul_tran_mask;
811048dc:	e0bfff07 	ldb	r2,-4(fp)
811048e0:	01400844 	movi	r5,33
811048e4:	1009883a 	mov	r4,r2
811048e8:	11040880 	call	81104088 <TRAN_READ_REG32>
811048ec:	1007883a 	mov	r3,r2
811048f0:	e0bffd17 	ldw	r2,-12(fp)
811048f4:	1884703a 	and	r2,r3,r2
811048f8:	e0bffe15 	stw	r2,-8(fp)

		return ul_tran_rx_fifo_status_value;
811048fc:	e0bffe17 	ldw	r2,-8(fp)
	}
81104900:	e037883a 	mov	sp,fp
81104904:	dfc00117 	ldw	ra,4(sp)
81104908:	df000017 	ldw	fp,0(sp)
8110490c:	dec00204 	addi	sp,sp,8
81104910:	f800283a 	ret

81104914 <b_Transparent_Interface_RX_FIFO_Status_Empty>:

	bool b_Transparent_Interface_RX_FIFO_Status_Empty(char c_SpwID){
81104914:	defffc04 	addi	sp,sp,-16
81104918:	de00012e 	bgeu	sp,et,81104920 <b_Transparent_Interface_RX_FIFO_Status_Empty+0xc>
8110491c:	003b68fa 	trap	3
81104920:	dfc00315 	stw	ra,12(sp)
81104924:	df000215 	stw	fp,8(sp)
81104928:	df000204 	addi	fp,sp,8
8110492c:	2005883a 	mov	r2,r4
81104930:	e0bfff05 	stb	r2,-4(fp)
		
		bool b_rx_fifo_empty = FALSE;
81104934:	e03ffe15 	stw	zero,-8(fp)
		
		if (TRAN_READ_REG32(c_SpwID, TRAN_RX_MODE_CONTROL_REGISTER_ADDRESS) & TRAN_RX_FIFO_EMPTY_STATUS_BIT_MASK) {
81104938:	e0bfff07 	ldb	r2,-4(fp)
8110493c:	01400844 	movi	r5,33
81104940:	1009883a 	mov	r4,r2
81104944:	11040880 	call	81104088 <TRAN_READ_REG32>
81104948:	1080008c 	andi	r2,r2,2
8110494c:	10000226 	beq	r2,zero,81104958 <b_Transparent_Interface_RX_FIFO_Status_Empty+0x44>
			b_rx_fifo_empty = TRUE;
81104950:	00800044 	movi	r2,1
81104954:	e0bffe15 	stw	r2,-8(fp)
		}
		
		return b_rx_fifo_empty;		
81104958:	e0bffe17 	ldw	r2,-8(fp)
	}
8110495c:	e037883a 	mov	sp,fp
81104960:	dfc00117 	ldw	ra,4(sp)
81104964:	df000017 	ldw	fp,0(sp)
81104968:	dec00204 	addi	sp,sp,8
8110496c:	f800283a 	ret

81104970 <b_Transparent_Interface_RX_FIFO_Status_Full>:
	
	bool b_Transparent_Interface_RX_FIFO_Status_Full(char c_SpwID){
81104970:	defffc04 	addi	sp,sp,-16
81104974:	de00012e 	bgeu	sp,et,8110497c <b_Transparent_Interface_RX_FIFO_Status_Full+0xc>
81104978:	003b68fa 	trap	3
8110497c:	dfc00315 	stw	ra,12(sp)
81104980:	df000215 	stw	fp,8(sp)
81104984:	df000204 	addi	fp,sp,8
81104988:	2005883a 	mov	r2,r4
8110498c:	e0bfff05 	stb	r2,-4(fp)
		
		bool b_rx_fifo_full = FALSE;
81104990:	e03ffe15 	stw	zero,-8(fp)
		
		if (TRAN_READ_REG32(c_SpwID, TRAN_RX_MODE_CONTROL_REGISTER_ADDRESS) & TRAN_RX_FIFO_FULL_STATUS_BIT_MASK) {
81104994:	e0bfff07 	ldb	r2,-4(fp)
81104998:	01400844 	movi	r5,33
8110499c:	1009883a 	mov	r4,r2
811049a0:	11040880 	call	81104088 <TRAN_READ_REG32>
811049a4:	1080004c 	andi	r2,r2,1
811049a8:	10000226 	beq	r2,zero,811049b4 <b_Transparent_Interface_RX_FIFO_Status_Full+0x44>
			b_rx_fifo_full = TRUE;
811049ac:	00800044 	movi	r2,1
811049b0:	e0bffe15 	stw	r2,-8(fp)
		}
		
		return b_rx_fifo_full;
811049b4:	e0bffe17 	ldw	r2,-8(fp)
	}
811049b8:	e037883a 	mov	sp,fp
811049bc:	dfc00117 	ldw	ra,4(sp)
811049c0:	df000017 	ldw	fp,0(sp)
811049c4:	dec00204 	addi	sp,sp,8
811049c8:	f800283a 	ret

811049cc <uc_Transparent_Interface_RX_FIFO_Status_Used>:

	alt_u8 uc_Transparent_Interface_RX_FIFO_Status_Used(char c_SpwID){
811049cc:	defffc04 	addi	sp,sp,-16
811049d0:	de00012e 	bgeu	sp,et,811049d8 <uc_Transparent_Interface_RX_FIFO_Status_Used+0xc>
811049d4:	003b68fa 	trap	3
811049d8:	dfc00315 	stw	ra,12(sp)
811049dc:	df000215 	stw	fp,8(sp)
811049e0:	df000204 	addi	fp,sp,8
811049e4:	2005883a 	mov	r2,r4
811049e8:	e0bfff05 	stb	r2,-4(fp)
		
		alt_u8 uc_rx_fifo_used = 0;
811049ec:	e03ffe05 	stb	zero,-8(fp)
		
		uc_rx_fifo_used = (alt_u8)((TRAN_READ_REG32(c_SpwID, TRAN_RX_MODE_CONTROL_REGISTER_ADDRESS) & TRAN_RX_FIFO_USED_SPACE_VALUE_MASK) >> 3);
811049f0:	e0bfff07 	ldb	r2,-4(fp)
811049f4:	01400844 	movi	r5,33
811049f8:	1009883a 	mov	r4,r2
811049fc:	11040880 	call	81104088 <TRAN_READ_REG32>
81104a00:	1081fe0c 	andi	r2,r2,2040
81104a04:	1004d0fa 	srli	r2,r2,3
81104a08:	e0bffe05 	stb	r2,-8(fp)
		
		return uc_rx_fifo_used;
81104a0c:	e0bffe03 	ldbu	r2,-8(fp)
	}
81104a10:	e037883a 	mov	sp,fp
81104a14:	dfc00117 	ldw	ra,4(sp)
81104a18:	df000017 	ldw	fp,0(sp)
81104a1c:	dec00204 	addi	sp,sp,8
81104a20:	f800283a 	ret

81104a24 <v_Transparent_Interface_TX_FIFO_Reset>:
	
	
	void v_Transparent_Interface_TX_FIFO_Reset(char c_SpwID){
81104a24:	defffd04 	addi	sp,sp,-12
81104a28:	de00012e 	bgeu	sp,et,81104a30 <v_Transparent_Interface_TX_FIFO_Reset+0xc>
81104a2c:	003b68fa 	trap	3
81104a30:	dfc00215 	stw	ra,8(sp)
81104a34:	df000115 	stw	fp,4(sp)
81104a38:	df000104 	addi	fp,sp,4
81104a3c:	2005883a 	mov	r2,r4
81104a40:	e0bfff05 	stb	r2,-4(fp)

		TRAN_WRITE_REG32(c_SpwID, TRAN_TX_MODE_CONTROL_REGISTER_ADDRESS, (alt_u32)TRAN_TX_FIFO_RESET_CONTROL_BIT_MASK);
81104a44:	e0bfff07 	ldb	r2,-4(fp)
81104a48:	01800104 	movi	r6,4
81104a4c:	01400884 	movi	r5,34
81104a50:	1009883a 	mov	r4,r2
81104a54:	1103f580 	call	81103f58 <TRAN_WRITE_REG32>

	}
81104a58:	0001883a 	nop
81104a5c:	e037883a 	mov	sp,fp
81104a60:	dfc00117 	ldw	ra,4(sp)
81104a64:	df000017 	ldw	fp,0(sp)
81104a68:	dec00204 	addi	sp,sp,8
81104a6c:	f800283a 	ret

81104a70 <ul_Transparent_Interface_TX_FIFO_Status_Read>:

	alt_u32 ul_Transparent_Interface_TX_FIFO_Status_Read(char c_SpwID){
81104a70:	defffb04 	addi	sp,sp,-20
81104a74:	de00012e 	bgeu	sp,et,81104a7c <ul_Transparent_Interface_TX_FIFO_Status_Read+0xc>
81104a78:	003b68fa 	trap	3
81104a7c:	dfc00415 	stw	ra,16(sp)
81104a80:	df000315 	stw	fp,12(sp)
81104a84:	df000304 	addi	fp,sp,12
81104a88:	2005883a 	mov	r2,r4
81104a8c:	e0bfff05 	stb	r2,-4(fp)

		const alt_u32 ul_tran_mask = TRAN_TX_FIFO_USED_SPACE_VALUE_MASK | TRAN_TX_FIFO_EMPTY_STATUS_BIT_MASK | TRAN_TX_FIFO_FULL_STATUS_BIT_MASK;
81104a90:	0081fec4 	movi	r2,2043
81104a94:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 ul_tran_tx_fifo_status_value = TRAN_READ_REG32(c_SpwID, TRAN_TX_MODE_CONTROL_REGISTER_ADDRESS) & ul_tran_mask;
81104a98:	e0bfff07 	ldb	r2,-4(fp)
81104a9c:	01400884 	movi	r5,34
81104aa0:	1009883a 	mov	r4,r2
81104aa4:	11040880 	call	81104088 <TRAN_READ_REG32>
81104aa8:	1007883a 	mov	r3,r2
81104aac:	e0bffd17 	ldw	r2,-12(fp)
81104ab0:	1884703a 	and	r2,r3,r2
81104ab4:	e0bffe15 	stw	r2,-8(fp)

		return ul_tran_tx_fifo_status_value;
81104ab8:	e0bffe17 	ldw	r2,-8(fp)
	}
81104abc:	e037883a 	mov	sp,fp
81104ac0:	dfc00117 	ldw	ra,4(sp)
81104ac4:	df000017 	ldw	fp,0(sp)
81104ac8:	dec00204 	addi	sp,sp,8
81104acc:	f800283a 	ret

81104ad0 <b_Transparent_Interface_TX_FIFO_Status_Full>:

	bool b_Transparent_Interface_TX_FIFO_Status_Full(char c_SpwID){
81104ad0:	defffc04 	addi	sp,sp,-16
81104ad4:	de00012e 	bgeu	sp,et,81104adc <b_Transparent_Interface_TX_FIFO_Status_Full+0xc>
81104ad8:	003b68fa 	trap	3
81104adc:	dfc00315 	stw	ra,12(sp)
81104ae0:	df000215 	stw	fp,8(sp)
81104ae4:	df000204 	addi	fp,sp,8
81104ae8:	2005883a 	mov	r2,r4
81104aec:	e0bfff05 	stb	r2,-4(fp)
		
		bool b_tx_fifo_empty = FALSE;
81104af0:	e03ffe15 	stw	zero,-8(fp)
		
		if (TRAN_READ_REG32(c_SpwID, TRAN_TX_MODE_CONTROL_REGISTER_ADDRESS) & TRAN_TX_FIFO_EMPTY_STATUS_BIT_MASK) {
81104af4:	e0bfff07 	ldb	r2,-4(fp)
81104af8:	01400884 	movi	r5,34
81104afc:	1009883a 	mov	r4,r2
81104b00:	11040880 	call	81104088 <TRAN_READ_REG32>
81104b04:	1080008c 	andi	r2,r2,2
81104b08:	10000226 	beq	r2,zero,81104b14 <b_Transparent_Interface_TX_FIFO_Status_Full+0x44>
			b_tx_fifo_empty = TRUE;
81104b0c:	00800044 	movi	r2,1
81104b10:	e0bffe15 	stw	r2,-8(fp)
		}
		
		return b_tx_fifo_empty;		
81104b14:	e0bffe17 	ldw	r2,-8(fp)
	}
81104b18:	e037883a 	mov	sp,fp
81104b1c:	dfc00117 	ldw	ra,4(sp)
81104b20:	df000017 	ldw	fp,0(sp)
81104b24:	dec00204 	addi	sp,sp,8
81104b28:	f800283a 	ret

81104b2c <b_Transparent_Interface_TX_FIFO_Status_Empty>:
	
	bool b_Transparent_Interface_TX_FIFO_Status_Empty(char c_SpwID){
81104b2c:	defffc04 	addi	sp,sp,-16
81104b30:	de00012e 	bgeu	sp,et,81104b38 <b_Transparent_Interface_TX_FIFO_Status_Empty+0xc>
81104b34:	003b68fa 	trap	3
81104b38:	dfc00315 	stw	ra,12(sp)
81104b3c:	df000215 	stw	fp,8(sp)
81104b40:	df000204 	addi	fp,sp,8
81104b44:	2005883a 	mov	r2,r4
81104b48:	e0bfff05 	stb	r2,-4(fp)
		
		bool b_tx_fifo_full = FALSE;
81104b4c:	e03ffe15 	stw	zero,-8(fp)
		
		if (TRAN_READ_REG32(c_SpwID, TRAN_TX_MODE_CONTROL_REGISTER_ADDRESS) & TRAN_TX_FIFO_FULL_STATUS_BIT_MASK) {
81104b50:	e0bfff07 	ldb	r2,-4(fp)
81104b54:	01400884 	movi	r5,34
81104b58:	1009883a 	mov	r4,r2
81104b5c:	11040880 	call	81104088 <TRAN_READ_REG32>
81104b60:	1080004c 	andi	r2,r2,1
81104b64:	10000226 	beq	r2,zero,81104b70 <b_Transparent_Interface_TX_FIFO_Status_Empty+0x44>
			b_tx_fifo_full = TRUE;
81104b68:	00800044 	movi	r2,1
81104b6c:	e0bffe15 	stw	r2,-8(fp)
		}
		
		return b_tx_fifo_full;
81104b70:	e0bffe17 	ldw	r2,-8(fp)
	}
81104b74:	e037883a 	mov	sp,fp
81104b78:	dfc00117 	ldw	ra,4(sp)
81104b7c:	df000017 	ldw	fp,0(sp)
81104b80:	dec00204 	addi	sp,sp,8
81104b84:	f800283a 	ret

81104b88 <uc_Transparent_Interface_TX_FIFO_Status_Used>:
	
	alt_u8 uc_Transparent_Interface_TX_FIFO_Status_Used(char c_SpwID){
81104b88:	defffc04 	addi	sp,sp,-16
81104b8c:	de00012e 	bgeu	sp,et,81104b94 <uc_Transparent_Interface_TX_FIFO_Status_Used+0xc>
81104b90:	003b68fa 	trap	3
81104b94:	dfc00315 	stw	ra,12(sp)
81104b98:	df000215 	stw	fp,8(sp)
81104b9c:	df000204 	addi	fp,sp,8
81104ba0:	2005883a 	mov	r2,r4
81104ba4:	e0bfff05 	stb	r2,-4(fp)
		
		alt_u8 uc_tx_fifo_used = 0;
81104ba8:	e03ffe05 	stb	zero,-8(fp)
		
		uc_tx_fifo_used = (alt_u8)((TRAN_READ_REG32(c_SpwID, TRAN_TX_MODE_CONTROL_REGISTER_ADDRESS) & TRAN_TX_FIFO_USED_SPACE_VALUE_MASK) >> 3);
81104bac:	e0bfff07 	ldb	r2,-4(fp)
81104bb0:	01400884 	movi	r5,34
81104bb4:	1009883a 	mov	r4,r2
81104bb8:	11040880 	call	81104088 <TRAN_READ_REG32>
81104bbc:	1081fe0c 	andi	r2,r2,2040
81104bc0:	1004d0fa 	srli	r2,r2,3
81104bc4:	e0bffe05 	stb	r2,-8(fp)
		
		return uc_tx_fifo_used;
81104bc8:	e0bffe03 	ldbu	r2,-8(fp)
	}
81104bcc:	e037883a 	mov	sp,fp
81104bd0:	dfc00117 	ldw	ra,4(sp)
81104bd4:	df000017 	ldw	fp,0(sp)
81104bd8:	dec00204 	addi	sp,sp,8
81104bdc:	f800283a 	ret

81104be0 <b_Transparent_Interface_Switch_Channel>:
	
	bool b_Transparent_Interface_Switch_Channel(char c_SpwID){
81104be0:	defffb04 	addi	sp,sp,-20
81104be4:	de00012e 	bgeu	sp,et,81104bec <b_Transparent_Interface_Switch_Channel+0xc>
81104be8:	003b68fa 	trap	3
81104bec:	dfc00415 	stw	ra,16(sp)
81104bf0:	df000315 	stw	fp,12(sp)
81104bf4:	df000304 	addi	fp,sp,12
81104bf8:	2005883a 	mov	r2,r4
81104bfc:	e0bfff05 	stb	r2,-4(fp)

		bool bSuccess;
		alt_u32 *pTranAddr = DDR2_ADDRESS_SPAN_EXTENDER_CNTL_BASE;
81104c00:	00a04834 	movhi	r2,33056
81104c04:	10903204 	addi	r2,r2,16584
81104c08:	e0bffe15 	stw	r2,-8(fp)

		  bSuccess = TRUE;
81104c0c:	00800044 	movi	r2,1
81104c10:	e0bffd15 	stw	r2,-12(fp)
		  switch (c_SpwID) {
81104c14:	e0bfff07 	ldb	r2,-4(fp)
81104c18:	10bfefc4 	addi	r2,r2,-65
81104c1c:	10c00228 	cmpgeui	r3,r2,8
81104c20:	18004d1e 	bne	r3,zero,81104d58 <b_Transparent_Interface_Switch_Channel+0x178>
81104c24:	100690ba 	slli	r3,r2,2
81104c28:	00a04434 	movhi	r2,33040
81104c2c:	10930f04 	addi	r2,r2,19516
81104c30:	1885883a 	add	r2,r3,r2
81104c34:	10800017 	ldw	r2,0(r2)
81104c38:	1000683a 	jmp	r2
81104c3c:	81104c5c 	xori	r4,r16,16689
81104c40:	81104c7c 	xorhi	r4,r16,16689
81104c44:	81104c9c 	xori	r4,r16,16690
81104c48:	81104cbc 	xorhi	r4,r16,16690
81104c4c:	81104cdc 	xori	r4,r16,16691
81104c50:	81104cfc 	xorhi	r4,r16,16691
81104c54:	81104d1c 	xori	r4,r16,16692
81104c58:	81104d3c 	xorhi	r4,r16,16692
			  case 'A':
				*(pTranAddr)     = (alt_u32)( 0x00000000FFFFFFFF & TRAN_A_CHANNEL_WINDOWED_OFFSET);
81104c5c:	e0bffe17 	ldw	r2,-8(fp)
81104c60:	00f80034 	movhi	r3,57344
81104c64:	10c00015 	stw	r3,0(r2)
				*(pTranAddr + 1) = (alt_u32)((0xFFFFFFFF00000000 & TRAN_A_CHANNEL_WINDOWED_OFFSET) >> 32);
81104c68:	e0bffe17 	ldw	r2,-8(fp)
81104c6c:	10800104 	addi	r2,r2,4
81104c70:	00c00044 	movi	r3,1
81104c74:	10c00015 	stw	r3,0(r2)
			  break;
81104c78:	00003b06 	br	81104d68 <b_Transparent_Interface_Switch_Channel+0x188>
			  case 'B':
					*(pTranAddr)     = (alt_u32)( 0x00000000FFFFFFFF & TRAN_B_CHANNEL_WINDOWED_OFFSET);
81104c7c:	e0bffe17 	ldw	r2,-8(fp)
81104c80:	00f00034 	movhi	r3,49152
81104c84:	10c00015 	stw	r3,0(r2)
					*(pTranAddr + 1) = (alt_u32)((0xFFFFFFFF00000000 & TRAN_B_CHANNEL_WINDOWED_OFFSET) >> 32);
81104c88:	e0bffe17 	ldw	r2,-8(fp)
81104c8c:	10800104 	addi	r2,r2,4
81104c90:	00c00044 	movi	r3,1
81104c94:	10c00015 	stw	r3,0(r2)
				  break;
81104c98:	00003306 	br	81104d68 <b_Transparent_Interface_Switch_Channel+0x188>
			  case 'C':
					*(pTranAddr)     = (alt_u32)( 0x00000000FFFFFFFF & TRAN_C_CHANNEL_WINDOWED_OFFSET);
81104c9c:	e0bffe17 	ldw	r2,-8(fp)
81104ca0:	00e80034 	movhi	r3,40960
81104ca4:	10c00015 	stw	r3,0(r2)
					*(pTranAddr + 1) = (alt_u32)((0xFFFFFFFF00000000 & TRAN_C_CHANNEL_WINDOWED_OFFSET) >> 32);
81104ca8:	e0bffe17 	ldw	r2,-8(fp)
81104cac:	10800104 	addi	r2,r2,4
81104cb0:	00c00044 	movi	r3,1
81104cb4:	10c00015 	stw	r3,0(r2)
				  break;
81104cb8:	00002b06 	br	81104d68 <b_Transparent_Interface_Switch_Channel+0x188>
			  case 'D':
					*(pTranAddr)     = (alt_u32)( 0x00000000FFFFFFFF & TRAN_E_CHANNEL_WINDOWED_OFFSET);
81104cbc:	e0bffe17 	ldw	r2,-8(fp)
81104cc0:	00d80034 	movhi	r3,24576
81104cc4:	10c00015 	stw	r3,0(r2)
					*(pTranAddr + 1) = (alt_u32)((0xFFFFFFFF00000000 & TRAN_E_CHANNEL_WINDOWED_OFFSET) >> 32);
81104cc8:	e0bffe17 	ldw	r2,-8(fp)
81104ccc:	10800104 	addi	r2,r2,4
81104cd0:	00c00044 	movi	r3,1
81104cd4:	10c00015 	stw	r3,0(r2)
				  break;
81104cd8:	00002306 	br	81104d68 <b_Transparent_Interface_Switch_Channel+0x188>
			  case 'E':
					*(pTranAddr)     = (alt_u32)( 0x00000000FFFFFFFF & TRAN_D_CHANNEL_WINDOWED_OFFSET);
81104cdc:	e0bffe17 	ldw	r2,-8(fp)
81104ce0:	00e00034 	movhi	r3,32768
81104ce4:	10c00015 	stw	r3,0(r2)
					*(pTranAddr + 1) = (alt_u32)((0xFFFFFFFF00000000 & TRAN_D_CHANNEL_WINDOWED_OFFSET) >> 32);
81104ce8:	e0bffe17 	ldw	r2,-8(fp)
81104cec:	10800104 	addi	r2,r2,4
81104cf0:	00c00044 	movi	r3,1
81104cf4:	10c00015 	stw	r3,0(r2)
				  break;
81104cf8:	00001b06 	br	81104d68 <b_Transparent_Interface_Switch_Channel+0x188>
			  case 'F':
					*(pTranAddr)     = (alt_u32)( 0x00000000FFFFFFFF & TRAN_F_CHANNEL_WINDOWED_OFFSET);
81104cfc:	e0bffe17 	ldw	r2,-8(fp)
81104d00:	00d00034 	movhi	r3,16384
81104d04:	10c00015 	stw	r3,0(r2)
					*(pTranAddr + 1) = (alt_u32)((0xFFFFFFFF00000000 & TRAN_F_CHANNEL_WINDOWED_OFFSET) >> 32);
81104d08:	e0bffe17 	ldw	r2,-8(fp)
81104d0c:	10800104 	addi	r2,r2,4
81104d10:	00c00044 	movi	r3,1
81104d14:	10c00015 	stw	r3,0(r2)
				  break;
81104d18:	00001306 	br	81104d68 <b_Transparent_Interface_Switch_Channel+0x188>
			  case 'G':
					*(pTranAddr)     = (alt_u32)( 0x00000000FFFFFFFF & TRAN_G_CHANNEL_WINDOWED_OFFSET);
81104d1c:	e0bffe17 	ldw	r2,-8(fp)
81104d20:	00c80034 	movhi	r3,8192
81104d24:	10c00015 	stw	r3,0(r2)
					*(pTranAddr + 1) = (alt_u32)((0xFFFFFFFF00000000 & TRAN_G_CHANNEL_WINDOWED_OFFSET) >> 32);
81104d28:	e0bffe17 	ldw	r2,-8(fp)
81104d2c:	10800104 	addi	r2,r2,4
81104d30:	00c00044 	movi	r3,1
81104d34:	10c00015 	stw	r3,0(r2)
				  break;
81104d38:	00000b06 	br	81104d68 <b_Transparent_Interface_Switch_Channel+0x188>
			  case 'H':
					*(pTranAddr)     = (alt_u32)( 0x00000000FFFFFFFF & TRAN_H_CHANNEL_WINDOWED_OFFSET);
81104d3c:	e0bffe17 	ldw	r2,-8(fp)
81104d40:	10000015 	stw	zero,0(r2)
					*(pTranAddr + 1) = (alt_u32)((0xFFFFFFFF00000000 & TRAN_H_CHANNEL_WINDOWED_OFFSET) >> 32);
81104d44:	e0bffe17 	ldw	r2,-8(fp)
81104d48:	10800104 	addi	r2,r2,4
81104d4c:	00c00044 	movi	r3,1
81104d50:	10c00015 	stw	r3,0(r2)
				  break;
81104d54:	00000406 	br	81104d68 <b_Transparent_Interface_Switch_Channel+0x188>
			  default:
				  bSuccess = FALSE;
81104d58:	e03ffd15 	stw	zero,-12(fp)
				  printf("SpW Channel not identified!! Error switching channels!! \n");
81104d5c:	01204534 	movhi	r4,33044
81104d60:	21281504 	addi	r4,r4,-24492
81104d64:	110fa600 	call	8110fa60 <puts>
		  }

		  return bSuccess;
81104d68:	e0bffd17 	ldw	r2,-12(fp)
	}
81104d6c:	e037883a 	mov	sp,fp
81104d70:	dfc00117 	ldw	ra,4(sp)
81104d74:	df000017 	ldw	fp,0(sp)
81104d78:	dec00204 	addi	sp,sp,8
81104d7c:	f800283a 	ret

81104d80 <b_Transparent_Interface_Send_SpaceWire_Data>:


	bool b_Transparent_Interface_Send_SpaceWire_Data(char c_SpwID, alt_u8 *data_buffer, alt_u16 data_size){
81104d80:	defff704 	addi	sp,sp,-36
81104d84:	de00012e 	bgeu	sp,et,81104d8c <b_Transparent_Interface_Send_SpaceWire_Data+0xc>
81104d88:	003b68fa 	trap	3
81104d8c:	dfc00815 	stw	ra,32(sp)
81104d90:	df000715 	stw	fp,28(sp)
81104d94:	df000704 	addi	fp,sp,28
81104d98:	2007883a 	mov	r3,r4
81104d9c:	e17ffe15 	stw	r5,-8(fp)
81104da0:	3005883a 	mov	r2,r6
81104da4:	e0fffd05 	stb	r3,-12(fp)
81104da8:	e0bfff0d 	sth	r2,-4(fp)
		
		bool bSuccess = FALSE;
81104dac:	e03ff915 	stw	zero,-28(fp)
		
		alt_u32 *memory_location = DDR2_ADDRESS_SPAN_EXTENDER_WINDOWED_SLAVE_BASE;
81104db0:	e03ffb15 	stw	zero,-20(fp)
		printf("memory_location = %u \n", memory_location);
81104db4:	e17ffb17 	ldw	r5,-20(fp)
81104db8:	01204534 	movhi	r4,33044
81104dbc:	21282404 	addi	r4,r4,-24432
81104dc0:	110f9340 	call	8110f934 <printf>
		memory_location += (TRAN_BURST_REGISTERS_OFFSET + TRAN_TX_REGISTER_OFFSET)*2;
81104dc4:	e0bffb17 	ldw	r2,-20(fp)
81104dc8:	10804204 	addi	r2,r2,264
81104dcc:	e0bffb15 	stw	r2,-20(fp)
		printf("memory_location = %u \n", memory_location);
81104dd0:	e17ffb17 	ldw	r5,-20(fp)
81104dd4:	01204534 	movhi	r4,33044
81104dd8:	21282404 	addi	r4,r4,-24432
81104ddc:	110f9340 	call	8110f934 <printf>

		alt_u16 cnt = 0;
81104de0:	e03ffa0d 	sth	zero,-24(fp)
		alt_u8 resto = 0;
81104de4:	e03ffc05 	stb	zero,-16(fp)
		
		/* Initiate the Channel Memory Location for the Transparent Interface */
		if ((c_SpwID >= 'A') && (c_SpwID <= 'H')) {
81104de8:	e0bffd07 	ldb	r2,-12(fp)
81104dec:	10801050 	cmplti	r2,r2,65
81104df0:	1000081e 	bne	r2,zero,81104e14 <b_Transparent_Interface_Send_SpaceWire_Data+0x94>
81104df4:	e0bffd07 	ldb	r2,-12(fp)
81104df8:	10801248 	cmpgei	r2,r2,73
81104dfc:	1000051e 	bne	r2,zero,81104e14 <b_Transparent_Interface_Send_SpaceWire_Data+0x94>
			b_Transparent_Interface_Switch_Channel(c_SpwID);
81104e00:	e0bffd07 	ldb	r2,-12(fp)
81104e04:	1009883a 	mov	r4,r2
81104e08:	1104be00 	call	81104be0 <b_Transparent_Interface_Switch_Channel>
			bSuccess          = TRUE;
81104e0c:	00800044 	movi	r2,1
81104e10:	e0bff915 	stw	r2,-28(fp)
		}

		/* Check if the TX Buffer has enough space for the data */
		/* Each word in TX buffer can hold 4 bytes of data, but a space for the EOP must be left*/
		if ((bSuccess) && (256 - (uc_Transparent_Interface_TX_FIFO_Status_Used(c_SpwID)) >= ((data_size >> 2) + 1))) {
81104e14:	e0bff917 	ldw	r2,-28(fp)
81104e18:	10002626 	beq	r2,zero,81104eb4 <b_Transparent_Interface_Send_SpaceWire_Data+0x134>
81104e1c:	e0bffd07 	ldb	r2,-12(fp)
81104e20:	1009883a 	mov	r4,r2
81104e24:	1104b880 	call	81104b88 <uc_Transparent_Interface_TX_FIFO_Status_Used>
81104e28:	10803fcc 	andi	r2,r2,255
81104e2c:	00c04004 	movi	r3,256
81104e30:	1887c83a 	sub	r3,r3,r2
81104e34:	e0bfff0b 	ldhu	r2,-4(fp)
81104e38:	1004d0ba 	srli	r2,r2,2
81104e3c:	10bfffcc 	andi	r2,r2,65535
81104e40:	10800044 	addi	r2,r2,1
81104e44:	18801b16 	blt	r3,r2,81104eb4 <b_Transparent_Interface_Send_SpaceWire_Data+0x134>
			/* Write the data_buffer data in the correct format to be send by the Transparent Interface in the Channel Memory Location */
			for (cnt = 0; cnt < data_size; cnt++){
81104e48:	e03ffa0d 	sth	zero,-24(fp)
81104e4c:	00000b06 	br	81104e7c <b_Transparent_Interface_Send_SpaceWire_Data+0xfc>
				*memory_location = (alt_u64)(0xFFFFFFFFFFFF0000 | data_buffer[cnt]);
81104e50:	e0bffa0b 	ldhu	r2,-24(fp)
81104e54:	e0fffe17 	ldw	r3,-8(fp)
81104e58:	1885883a 	add	r2,r3,r2
81104e5c:	10800003 	ldbu	r2,0(r2)
81104e60:	10803fcc 	andi	r2,r2,255
81104e64:	10fffff4 	orhi	r3,r2,65535
81104e68:	e0bffb17 	ldw	r2,-20(fp)
81104e6c:	10c00015 	stw	r3,0(r2)

		/* Check if the TX Buffer has enough space for the data */
		/* Each word in TX buffer can hold 4 bytes of data, but a space for the EOP must be left*/
		if ((bSuccess) && (256 - (uc_Transparent_Interface_TX_FIFO_Status_Used(c_SpwID)) >= ((data_size >> 2) + 1))) {
			/* Write the data_buffer data in the correct format to be send by the Transparent Interface in the Channel Memory Location */
			for (cnt = 0; cnt < data_size; cnt++){
81104e70:	e0bffa0b 	ldhu	r2,-24(fp)
81104e74:	10800044 	addi	r2,r2,1
81104e78:	e0bffa0d 	sth	r2,-24(fp)
81104e7c:	e0fffa0b 	ldhu	r3,-24(fp)
81104e80:	e0bfff0b 	ldhu	r2,-4(fp)
81104e84:	18bff236 	bltu	r3,r2,81104e50 <__reset+0xfb0e4e50>
				*memory_location = (alt_u64)(0xFFFFFFFFFFFF0000 | data_buffer[cnt]);
			}
			/* Append an EOP to the end of the data in the Channel Memory Location */
			*memory_location = (alt_u64)(0xFFFFFFFFFFFF0000 | 0x0100 | (alt_u16)data_buffer[data_size]);
81104e88:	e0bfff0b 	ldhu	r2,-4(fp)
81104e8c:	e0fffe17 	ldw	r3,-8(fp)
81104e90:	1885883a 	add	r2,r3,r2
81104e94:	10800003 	ldbu	r2,0(r2)
81104e98:	10c03fcc 	andi	r3,r2,255
81104e9c:	00bffff4 	movhi	r2,65535
81104ea0:	10804004 	addi	r2,r2,256
81104ea4:	1886b03a 	or	r3,r3,r2
81104ea8:	e0bffb17 	ldw	r2,-20(fp)
81104eac:	10c00015 	stw	r3,0(r2)
81104eb0:	00000106 	br	81104eb8 <b_Transparent_Interface_Send_SpaceWire_Data+0x138>
			
		} else {
			bSuccess = FALSE;
81104eb4:	e03ff915 	stw	zero,-28(fp)
		}
		
		return bSuccess;
81104eb8:	e0bff917 	ldw	r2,-28(fp)
	}
81104ebc:	e037883a 	mov	sp,fp
81104ec0:	dfc00117 	ldw	ra,4(sp)
81104ec4:	df000017 	ldw	fp,0(sp)
81104ec8:	dec00204 	addi	sp,sp,8
81104ecc:	f800283a 	ret

81104ed0 <ui_Transparent_Interface_Get_SpaceWire_Data>:
	
	alt_u16 ui_Transparent_Interface_Get_SpaceWire_Data(char c_SpwID, alt_u8 *data_buffer){
81104ed0:	deffeb04 	addi	sp,sp,-84
81104ed4:	de00012e 	bgeu	sp,et,81104edc <ui_Transparent_Interface_Get_SpaceWire_Data+0xc>
81104ed8:	003b68fa 	trap	3
81104edc:	dfc01415 	stw	ra,80(sp)
81104ee0:	df001315 	stw	fp,76(sp)
81104ee4:	ddc01215 	stw	r23,72(sp)
81104ee8:	dd801115 	stw	r22,68(sp)
81104eec:	dd401015 	stw	r21,64(sp)
81104ef0:	dd000f15 	stw	r20,60(sp)
81104ef4:	dcc00e15 	stw	r19,56(sp)
81104ef8:	dc800d15 	stw	r18,52(sp)
81104efc:	dc400c15 	stw	r17,48(sp)
81104f00:	dc000b15 	stw	r16,44(sp)
81104f04:	df001304 	addi	fp,sp,76
81104f08:	2005883a 	mov	r2,r4
81104f0c:	e17ff515 	stw	r5,-44(fp)
81104f10:	e0bff405 	stb	r2,-48(fp)
		
		alt_u16 ui_rx_data_size = 0;
81104f14:	e03fed0d 	sth	zero,-76(fp)
		
		alt_u64 *memory_location = 0;
81104f18:	e03fef15 	stw	zero,-68(fp)
		memory_location += TRAN_BURST_REGISTERS_OFFSET + TRAN_RX_REGISTER_OFFSET;
81104f1c:	e0bfef17 	ldw	r2,-68(fp)
81104f20:	10804004 	addi	r2,r2,256
81104f24:	e0bfef15 	stw	r2,-68(fp)

		alt_u16 cnt = 0;
81104f28:	e03fed8d 	sth	zero,-74(fp)
		alt_u16 rx_buffer_data_size = 0;
81104f2c:	e03fee0d 	sth	zero,-72(fp)
		alt_u64 rx_data = 0;
81104f30:	e03ff015 	stw	zero,-64(fp)
81104f34:	e03ff115 	stw	zero,-60(fp)
		alt_u16 rx_data_buffer[4] = {0,0,0,0};
81104f38:	e03ff20d 	sth	zero,-56(fp)
81104f3c:	e03ff28d 	sth	zero,-54(fp)
81104f40:	e03ff30d 	sth	zero,-52(fp)
81104f44:	e03ff38d 	sth	zero,-50(fp)

		/* Initiate the Channel Memory Location for the Transparent Interface */
		if ((c_SpwID >= 'A') && (c_SpwID <= 'H')) {
81104f48:	e0bff407 	ldb	r2,-48(fp)
81104f4c:	10801050 	cmplti	r2,r2,65
81104f50:	1000081e 	bne	r2,zero,81104f74 <ui_Transparent_Interface_Get_SpaceWire_Data+0xa4>
81104f54:	e0bff407 	ldb	r2,-48(fp)
81104f58:	10801248 	cmpgei	r2,r2,73
81104f5c:	1000051e 	bne	r2,zero,81104f74 <ui_Transparent_Interface_Get_SpaceWire_Data+0xa4>
			b_Transparent_Interface_Switch_Channel(c_SpwID);
81104f60:	e0bff407 	ldb	r2,-48(fp)
81104f64:	1009883a 	mov	r4,r2
81104f68:	1104be00 	call	81104be0 <b_Transparent_Interface_Switch_Channel>
			rx_buffer_data_size = 0xFFFF;
81104f6c:	00bfffc4 	movi	r2,-1
81104f70:	e0bfee0d 	sth	r2,-72(fp)
		}
		
		if (0xFFFF == rx_buffer_data_size) {
81104f74:	e0ffee0b 	ldhu	r3,-72(fp)
81104f78:	00bfffd4 	movui	r2,65535
81104f7c:	1880711e 	bne	r3,r2,81105144 <ui_Transparent_Interface_Get_SpaceWire_Data+0x274>
			/* Check the amount of data in the RX Buffer*/
			rx_buffer_data_size = (alt_u16)(uc_Transparent_Interface_TX_FIFO_Status_Used(c_SpwID));
81104f80:	e0bff407 	ldb	r2,-48(fp)
81104f84:	1009883a 	mov	r4,r2
81104f88:	1104b880 	call	81104b88 <uc_Transparent_Interface_TX_FIFO_Status_Used>
81104f8c:	10803fcc 	andi	r2,r2,255
81104f90:	e0bfee0d 	sth	r2,-72(fp)
			if (rx_buffer_data_size > 0) {
81104f94:	e0bfee0b 	ldhu	r2,-72(fp)
81104f98:	10006826 	beq	r2,zero,8110513c <ui_Transparent_Interface_Get_SpaceWire_Data+0x26c>
				/* Transfer the available data to the Channel Memory Location */
				
				/* Convert all the available data in the Channel Memory Location to the data_buffer */
				for (cnt = 0; cnt < rx_buffer_data_size; cnt++) {
81104f9c:	e03fed8d 	sth	zero,-74(fp)
81104fa0:	00006206 	br	8110512c <ui_Transparent_Interface_Get_SpaceWire_Data+0x25c>

					rx_data = *memory_location;
81104fa4:	e0bfef17 	ldw	r2,-68(fp)
81104fa8:	10c00017 	ldw	r3,0(r2)
81104fac:	e0fff015 	stw	r3,-64(fp)
81104fb0:	10800117 	ldw	r2,4(r2)
81104fb4:	e0bff115 	stw	r2,-60(fp)

					rx_data_buffer[0] = (alt_u16)(0x000000000000FFFF & rx_data);
81104fb8:	e0bff017 	ldw	r2,-64(fp)
81104fbc:	e0bff20d 	sth	r2,-56(fp)
					rx_data_buffer[1] = (alt_u16)((0x00000000FFFF0000 & rx_data) >> 16);
81104fc0:	e0bff017 	ldw	r2,-64(fp)
81104fc4:	143fffec 	andhi	r16,r2,65535
81104fc8:	e0bff117 	ldw	r2,-60(fp)
81104fcc:	1022703a 	and	r17,r2,zero
81104fd0:	8804943a 	slli	r2,r17,16
81104fd4:	8024d43a 	srli	r18,r16,16
81104fd8:	14a4b03a 	or	r18,r2,r18
81104fdc:	8826d43a 	srli	r19,r17,16
81104fe0:	9005883a 	mov	r2,r18
81104fe4:	e0bff28d 	sth	r2,-54(fp)
					rx_data_buffer[2] = (alt_u16)((0x0000FFFF00000000 & rx_data) >> 32);
81104fe8:	e0bff017 	ldw	r2,-64(fp)
81104fec:	1028703a 	and	r20,r2,zero
81104ff0:	e0bff117 	ldw	r2,-60(fp)
81104ff4:	157fffcc 	andi	r21,r2,65535
81104ff8:	a82cd83a 	srl	r22,r21,zero
81104ffc:	002f883a 	mov	r23,zero
81105000:	b005883a 	mov	r2,r22
81105004:	e0bff30d 	sth	r2,-52(fp)
					rx_data_buffer[3] = (alt_u16)((0xFFFF000000000000 & rx_data) >> 48);
81105008:	e0bff117 	ldw	r2,-60(fp)
8110500c:	1004d43a 	srli	r2,r2,16
81105010:	e0bff615 	stw	r2,-40(fp)
81105014:	e03ff715 	stw	zero,-36(fp)
81105018:	e0bff60b 	ldhu	r2,-40(fp)
8110501c:	e0bff38d 	sth	r2,-50(fp)

					/* check if the data is not an eop or invalid */
					if (!((rx_data_buffer[0] & 0x0100) || (rx_data_buffer[0] == 0xFFFF))) {
81105020:	e0bff20b 	ldhu	r2,-56(fp)
81105024:	10bfffcc 	andi	r2,r2,65535
81105028:	1080400c 	andi	r2,r2,256
8110502c:	10000c1e 	bne	r2,zero,81105060 <ui_Transparent_Interface_Get_SpaceWire_Data+0x190>
81105030:	e0bff20b 	ldhu	r2,-56(fp)
81105034:	10ffffcc 	andi	r3,r2,65535
81105038:	00bfffd4 	movui	r2,65535
8110503c:	18800826 	beq	r3,r2,81105060 <ui_Transparent_Interface_Get_SpaceWire_Data+0x190>
						data_buffer[ui_rx_data_size] = (alt_u8)(0x00FF & rx_data_buffer[0]);
81105040:	e0bfed0b 	ldhu	r2,-76(fp)
81105044:	e0fff517 	ldw	r3,-44(fp)
81105048:	1885883a 	add	r2,r3,r2
8110504c:	e0fff20b 	ldhu	r3,-56(fp)
81105050:	10c00005 	stb	r3,0(r2)
						ui_rx_data_size++;
81105054:	e0bfed0b 	ldhu	r2,-76(fp)
81105058:	10800044 	addi	r2,r2,1
8110505c:	e0bfed0d 	sth	r2,-76(fp)
					}

					/* check if the data is not an eop or invalid */
					if (!((rx_data_buffer[1] & 0x0100) || (rx_data_buffer[1] == 0xFFFF))) {
81105060:	e0bff28b 	ldhu	r2,-54(fp)
81105064:	10bfffcc 	andi	r2,r2,65535
81105068:	1080400c 	andi	r2,r2,256
8110506c:	10000c1e 	bne	r2,zero,811050a0 <ui_Transparent_Interface_Get_SpaceWire_Data+0x1d0>
81105070:	e0bff28b 	ldhu	r2,-54(fp)
81105074:	10ffffcc 	andi	r3,r2,65535
81105078:	00bfffd4 	movui	r2,65535
8110507c:	18800826 	beq	r3,r2,811050a0 <ui_Transparent_Interface_Get_SpaceWire_Data+0x1d0>
						data_buffer[ui_rx_data_size] = (alt_u8)(0x00FF & rx_data_buffer[1]);
81105080:	e0bfed0b 	ldhu	r2,-76(fp)
81105084:	e0fff517 	ldw	r3,-44(fp)
81105088:	1885883a 	add	r2,r3,r2
8110508c:	e0fff28b 	ldhu	r3,-54(fp)
81105090:	10c00005 	stb	r3,0(r2)
						ui_rx_data_size++;
81105094:	e0bfed0b 	ldhu	r2,-76(fp)
81105098:	10800044 	addi	r2,r2,1
8110509c:	e0bfed0d 	sth	r2,-76(fp)
					}

					/* check if the data is not an eop or invalid */
					if (!((rx_data_buffer[2] & 0x0100) || (rx_data_buffer[2] == 0xFFFF))) {
811050a0:	e0bff30b 	ldhu	r2,-52(fp)
811050a4:	10bfffcc 	andi	r2,r2,65535
811050a8:	1080400c 	andi	r2,r2,256
811050ac:	10000c1e 	bne	r2,zero,811050e0 <ui_Transparent_Interface_Get_SpaceWire_Data+0x210>
811050b0:	e0bff30b 	ldhu	r2,-52(fp)
811050b4:	10ffffcc 	andi	r3,r2,65535
811050b8:	00bfffd4 	movui	r2,65535
811050bc:	18800826 	beq	r3,r2,811050e0 <ui_Transparent_Interface_Get_SpaceWire_Data+0x210>
						data_buffer[ui_rx_data_size] = (alt_u8)(0x00FF & rx_data_buffer[2]);
811050c0:	e0bfed0b 	ldhu	r2,-76(fp)
811050c4:	e0fff517 	ldw	r3,-44(fp)
811050c8:	1885883a 	add	r2,r3,r2
811050cc:	e0fff30b 	ldhu	r3,-52(fp)
811050d0:	10c00005 	stb	r3,0(r2)
						ui_rx_data_size++;
811050d4:	e0bfed0b 	ldhu	r2,-76(fp)
811050d8:	10800044 	addi	r2,r2,1
811050dc:	e0bfed0d 	sth	r2,-76(fp)
					}

					/* check if the data is not an eop or invalid */
					if (!((rx_data_buffer[3] & 0x0100) || (rx_data_buffer[3] == 0xFFFF))) {
811050e0:	e0bff38b 	ldhu	r2,-50(fp)
811050e4:	10bfffcc 	andi	r2,r2,65535
811050e8:	1080400c 	andi	r2,r2,256
811050ec:	10000c1e 	bne	r2,zero,81105120 <ui_Transparent_Interface_Get_SpaceWire_Data+0x250>
811050f0:	e0bff38b 	ldhu	r2,-50(fp)
811050f4:	10ffffcc 	andi	r3,r2,65535
811050f8:	00bfffd4 	movui	r2,65535
811050fc:	18800826 	beq	r3,r2,81105120 <ui_Transparent_Interface_Get_SpaceWire_Data+0x250>
						data_buffer[ui_rx_data_size] = (alt_u8)(0x00FF & rx_data_buffer[3]);
81105100:	e0bfed0b 	ldhu	r2,-76(fp)
81105104:	e0fff517 	ldw	r3,-44(fp)
81105108:	1885883a 	add	r2,r3,r2
8110510c:	e0fff38b 	ldhu	r3,-50(fp)
81105110:	10c00005 	stb	r3,0(r2)
						ui_rx_data_size++;
81105114:	e0bfed0b 	ldhu	r2,-76(fp)
81105118:	10800044 	addi	r2,r2,1
8110511c:	e0bfed0d 	sth	r2,-76(fp)
			rx_buffer_data_size = (alt_u16)(uc_Transparent_Interface_TX_FIFO_Status_Used(c_SpwID));
			if (rx_buffer_data_size > 0) {
				/* Transfer the available data to the Channel Memory Location */
				
				/* Convert all the available data in the Channel Memory Location to the data_buffer */
				for (cnt = 0; cnt < rx_buffer_data_size; cnt++) {
81105120:	e0bfed8b 	ldhu	r2,-74(fp)
81105124:	10800044 	addi	r2,r2,1
81105128:	e0bfed8d 	sth	r2,-74(fp)
8110512c:	e0ffed8b 	ldhu	r3,-74(fp)
81105130:	e0bfee0b 	ldhu	r2,-72(fp)
81105134:	18bf9b36 	bltu	r3,r2,81104fa4 <__reset+0xfb0e4fa4>
81105138:	00000306 	br	81105148 <ui_Transparent_Interface_Get_SpaceWire_Data+0x278>
						ui_rx_data_size++;
					}

				}
			} else {
				ui_rx_data_size = 0;
8110513c:	e03fed0d 	sth	zero,-76(fp)
81105140:	00000106 	br	81105148 <ui_Transparent_Interface_Get_SpaceWire_Data+0x278>
			}
		} else {
			ui_rx_data_size = 0;
81105144:	e03fed0d 	sth	zero,-76(fp)
		}
	
		return ui_rx_data_size;
81105148:	e0bfed0b 	ldhu	r2,-76(fp)
	}
8110514c:	e6fff804 	addi	sp,fp,-32
81105150:	dfc00917 	ldw	ra,36(sp)
81105154:	df000817 	ldw	fp,32(sp)
81105158:	ddc00717 	ldw	r23,28(sp)
8110515c:	dd800617 	ldw	r22,24(sp)
81105160:	dd400517 	ldw	r21,20(sp)
81105164:	dd000417 	ldw	r20,16(sp)
81105168:	dcc00317 	ldw	r19,12(sp)
8110516c:	dc800217 	ldw	r18,8(sp)
81105170:	dc400117 	ldw	r17,4(sp)
81105174:	dc000017 	ldw	r16,0(sp)
81105178:	dec00a04 	addi	sp,sp,40
8110517c:	f800283a 	ret

81105180 <vEthHoldReset>:
 */

#include "eth.h"

void vEthHoldReset(void)
{
81105180:	defffe04 	addi	sp,sp,-8
81105184:	de00012e 	bgeu	sp,et,8110518c <vEthHoldReset+0xc>
81105188:	003b68fa 	trap	3
8110518c:	df000115 	stw	fp,4(sp)
81105190:	df000104 	addi	fp,sp,4
	alt_u32 *pEthAddr = (alt_u32 *)ETH_RST_BASE;
81105194:	00a00034 	movhi	r2,32768
81105198:	10813404 	addi	r2,r2,1232
8110519c:	e0bfff15 	stw	r2,-4(fp)
	*pEthAddr = (alt_u32) 0x00000000;
811051a0:	e0bfff17 	ldw	r2,-4(fp)
811051a4:	10000015 	stw	zero,0(r2)
}
811051a8:	0001883a 	nop
811051ac:	e037883a 	mov	sp,fp
811051b0:	df000017 	ldw	fp,0(sp)
811051b4:	dec00104 	addi	sp,sp,4
811051b8:	f800283a 	ret

811051bc <vEthReleaseReset>:

void vEthReleaseReset(void)
{
811051bc:	defffe04 	addi	sp,sp,-8
811051c0:	de00012e 	bgeu	sp,et,811051c8 <vEthReleaseReset+0xc>
811051c4:	003b68fa 	trap	3
811051c8:	df000115 	stw	fp,4(sp)
811051cc:	df000104 	addi	fp,sp,4
	alt_u32 *pEthAddr = (alt_u32 *)ETH_RST_BASE;
811051d0:	00a00034 	movhi	r2,32768
811051d4:	10813404 	addi	r2,r2,1232
811051d8:	e0bfff15 	stw	r2,-4(fp)
	*pEthAddr = (alt_u32) 0x00000001;
811051dc:	e0bfff17 	ldw	r2,-4(fp)
811051e0:	00c00044 	movi	r3,1
811051e4:	10c00015 	stw	r3,0(r2)
}
811051e8:	0001883a 	nop
811051ec:	e037883a 	mov	sp,fp
811051f0:	df000017 	ldw	fp,0(sp)
811051f4:	dec00104 	addi	sp,sp,4
811051f8:	f800283a 	ret

811051fc <I2C_TestAdress>:
void i2c_start(alt_u32 clk_base, alt_u32 data_base);
void i2c_stop(alt_u32 clk_base, alt_u32 data_base);
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);

bool I2C_TestAdress(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr){
811051fc:	defffa04 	addi	sp,sp,-24
81105200:	de00012e 	bgeu	sp,et,81105208 <I2C_TestAdress+0xc>
81105204:	003b68fa 	trap	3
81105208:	dfc00515 	stw	ra,20(sp)
8110520c:	df000415 	stw	fp,16(sp)
81105210:	df000404 	addi	fp,sp,16
81105214:	e13ffd15 	stw	r4,-12(fp)
81105218:	e17ffe15 	stw	r5,-8(fp)
8110521c:	3005883a 	mov	r2,r6
81105220:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
81105224:	00800044 	movi	r2,1
81105228:	e0bffc15 	stw	r2,-16(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
8110522c:	e17ffe17 	ldw	r5,-8(fp)
81105230:	e13ffd17 	ldw	r4,-12(fp)
81105234:	11055cc0 	call	811055cc <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81105238:	e0bfff03 	ldbu	r2,-4(fp)
8110523c:	10803fcc 	andi	r2,r2,255
81105240:	100d883a 	mov	r6,r2
81105244:	e17ffe17 	ldw	r5,-8(fp)
81105248:	e13ffd17 	ldw	r4,-12(fp)
8110524c:	11056e00 	call	811056e0 <i2c_write>
81105250:	1000011e 	bne	r2,zero,81105258 <I2C_TestAdress+0x5c>
        bSuccess = FALSE;
81105254:	e03ffc15 	stw	zero,-16(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
81105258:	e17ffe17 	ldw	r5,-8(fp)
8110525c:	e13ffd17 	ldw	r4,-12(fp)
81105260:	11056600 	call	81105660 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
81105264:	0106d604 	movi	r4,7000
81105268:	11249c40 	call	811249c4 <usleep>
    
    return bSuccess;
8110526c:	e0bffc17 	ldw	r2,-16(fp)

}
81105270:	e037883a 	mov	sp,fp
81105274:	dfc00117 	ldw	ra,4(sp)
81105278:	df000017 	ldw	fp,0(sp)
8110527c:	dec00204 	addi	sp,sp,8
81105280:	f800283a 	ret

81105284 <I2C_Write>:

bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
81105284:	defff804 	addi	sp,sp,-32
81105288:	de00012e 	bgeu	sp,et,81105290 <I2C_Write+0xc>
8110528c:	003b68fa 	trap	3
81105290:	dfc00715 	stw	ra,28(sp)
81105294:	df000615 	stw	fp,24(sp)
81105298:	df000604 	addi	fp,sp,24
8110529c:	e13ffb15 	stw	r4,-20(fp)
811052a0:	e17ffc15 	stw	r5,-16(fp)
811052a4:	3009883a 	mov	r4,r6
811052a8:	3807883a 	mov	r3,r7
811052ac:	e0800217 	ldw	r2,8(fp)
811052b0:	e13ffd05 	stb	r4,-12(fp)
811052b4:	e0fffe05 	stb	r3,-8(fp)
811052b8:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
811052bc:	00800044 	movi	r2,1
811052c0:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
811052c4:	e17ffc17 	ldw	r5,-16(fp)
811052c8:	e13ffb17 	ldw	r4,-20(fp)
811052cc:	11055cc0 	call	811055cc <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
811052d0:	e0bffd03 	ldbu	r2,-12(fp)
811052d4:	10803fcc 	andi	r2,r2,255
811052d8:	100d883a 	mov	r6,r2
811052dc:	e17ffc17 	ldw	r5,-16(fp)
811052e0:	e13ffb17 	ldw	r4,-20(fp)
811052e4:	11056e00 	call	811056e0 <i2c_write>
811052e8:	1000011e 	bne	r2,zero,811052f0 <I2C_Write+0x6c>
        bSuccess = FALSE;
811052ec:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
811052f0:	e0bffa17 	ldw	r2,-24(fp)
811052f4:	10000726 	beq	r2,zero,81105314 <I2C_Write+0x90>
811052f8:	e0bffe03 	ldbu	r2,-8(fp)
811052fc:	100d883a 	mov	r6,r2
81105300:	e17ffc17 	ldw	r5,-16(fp)
81105304:	e13ffb17 	ldw	r4,-20(fp)
81105308:	11056e00 	call	811056e0 <i2c_write>
8110530c:	1000011e 	bne	r2,zero,81105314 <I2C_Write+0x90>
        bSuccess = FALSE;
81105310:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
81105314:	e0bffa17 	ldw	r2,-24(fp)
81105318:	10000726 	beq	r2,zero,81105338 <I2C_Write+0xb4>
8110531c:	e0bfff03 	ldbu	r2,-4(fp)
81105320:	100d883a 	mov	r6,r2
81105324:	e17ffc17 	ldw	r5,-16(fp)
81105328:	e13ffb17 	ldw	r4,-20(fp)
8110532c:	11056e00 	call	811056e0 <i2c_write>
81105330:	1000011e 	bne	r2,zero,81105338 <I2C_Write+0xb4>
        bSuccess = FALSE;
81105334:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
81105338:	e17ffc17 	ldw	r5,-16(fp)
8110533c:	e13ffb17 	ldw	r4,-20(fp)
81105340:	11056600 	call	81105660 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
81105344:	0106d604 	movi	r4,7000
81105348:	11249c40 	call	811249c4 <usleep>
    
    return bSuccess;
8110534c:	e0bffa17 	ldw	r2,-24(fp)

}
81105350:	e037883a 	mov	sp,fp
81105354:	dfc00117 	ldw	ra,4(sp)
81105358:	df000017 	ldw	fp,0(sp)
8110535c:	dec00204 	addi	sp,sp,8
81105360:	f800283a 	ret

81105364 <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
81105364:	defff904 	addi	sp,sp,-28
81105368:	de00012e 	bgeu	sp,et,81105370 <I2C_Read+0xc>
8110536c:	003b68fa 	trap	3
81105370:	dfc00615 	stw	ra,24(sp)
81105374:	df000515 	stw	fp,20(sp)
81105378:	df000504 	addi	fp,sp,20
8110537c:	e13ffc15 	stw	r4,-16(fp)
81105380:	e17ffd15 	stw	r5,-12(fp)
81105384:	3007883a 	mov	r3,r6
81105388:	3805883a 	mov	r2,r7
8110538c:	e0fffe05 	stb	r3,-8(fp)
81105390:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
81105394:	00800044 	movi	r2,1
81105398:	e0bffb15 	stw	r2,-20(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
8110539c:	e17ffd17 	ldw	r5,-12(fp)
811053a0:	e13ffc17 	ldw	r4,-16(fp)
811053a4:	11055cc0 	call	811055cc <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
811053a8:	e0bffe03 	ldbu	r2,-8(fp)
811053ac:	10803fcc 	andi	r2,r2,255
811053b0:	100d883a 	mov	r6,r2
811053b4:	e17ffd17 	ldw	r5,-12(fp)
811053b8:	e13ffc17 	ldw	r4,-16(fp)
811053bc:	11056e00 	call	811056e0 <i2c_write>
811053c0:	1000011e 	bne	r2,zero,811053c8 <I2C_Read+0x64>
        bSuccess = FALSE;
811053c4:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
811053c8:	e0bffb17 	ldw	r2,-20(fp)
811053cc:	10000726 	beq	r2,zero,811053ec <I2C_Read+0x88>
811053d0:	e0bfff03 	ldbu	r2,-4(fp)
811053d4:	100d883a 	mov	r6,r2
811053d8:	e17ffd17 	ldw	r5,-12(fp)
811053dc:	e13ffc17 	ldw	r4,-16(fp)
811053e0:	11056e00 	call	811056e0 <i2c_write>
811053e4:	1000011e 	bne	r2,zero,811053ec <I2C_Read+0x88>
        bSuccess = FALSE;
811053e8:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    i2c_start(clk_base, data_base);  // restart
811053ec:	e17ffd17 	ldw	r5,-12(fp)
811053f0:	e13ffc17 	ldw	r4,-16(fp)
811053f4:	11055cc0 	call	811055cc <i2c_start>
    DeviceAddr |= 1; // Read
811053f8:	e0bffe03 	ldbu	r2,-8(fp)
811053fc:	10800054 	ori	r2,r2,1
81105400:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
81105404:	e0bffb17 	ldw	r2,-20(fp)
81105408:	10000826 	beq	r2,zero,8110542c <I2C_Read+0xc8>
8110540c:	e0bffe03 	ldbu	r2,-8(fp)
81105410:	10803fcc 	andi	r2,r2,255
81105414:	100d883a 	mov	r6,r2
81105418:	e17ffd17 	ldw	r5,-12(fp)
8110541c:	e13ffc17 	ldw	r4,-16(fp)
81105420:	11056e00 	call	811056e0 <i2c_write>
81105424:	1000011e 	bne	r2,zero,8110542c <I2C_Read+0xc8>
        bSuccess = FALSE;
81105428:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
8110542c:	e0bffb17 	ldw	r2,-20(fp)
81105430:	10000526 	beq	r2,zero,81105448 <I2C_Read+0xe4>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
81105434:	000f883a 	mov	r7,zero
81105438:	e1800217 	ldw	r6,8(fp)
8110543c:	e17ffd17 	ldw	r5,-12(fp)
81105440:	e13ffc17 	ldw	r4,-16(fp)
81105444:	11058180 	call	81105818 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
81105448:	e17ffd17 	ldw	r5,-12(fp)
8110544c:	e13ffc17 	ldw	r4,-16(fp)
81105450:	11056600 	call	81105660 <i2c_stop>
    
    return bSuccess;
81105454:	e0bffb17 	ldw	r2,-20(fp)
}
81105458:	e037883a 	mov	sp,fp
8110545c:	dfc00117 	ldw	ra,4(sp)
81105460:	df000017 	ldw	fp,0(sp)
81105464:	dec00204 	addi	sp,sp,8
81105468:	f800283a 	ret

8110546c <I2C_MultipleRead>:

bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 szData[], alt_u16 len){
8110546c:	defff604 	addi	sp,sp,-40
81105470:	de00012e 	bgeu	sp,et,81105478 <I2C_MultipleRead+0xc>
81105474:	003b68fa 	trap	3
81105478:	dfc00915 	stw	ra,36(sp)
8110547c:	df000815 	stw	fp,32(sp)
81105480:	df000804 	addi	fp,sp,32
81105484:	e13ffb15 	stw	r4,-20(fp)
81105488:	e17ffc15 	stw	r5,-16(fp)
8110548c:	3007883a 	mov	r3,r6
81105490:	e1fffe15 	stw	r7,-8(fp)
81105494:	e0800217 	ldw	r2,8(fp)
81105498:	e0fffd05 	stb	r3,-12(fp)
8110549c:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
811054a0:	00800044 	movi	r2,1
811054a4:	e0bff915 	stw	r2,-28(fp)
    //alt_u8 DeviceAddr, 
    alt_u8 ControlAddr = 0;
811054a8:	e03ffa05 	stb	zero,-24(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
811054ac:	e17ffc17 	ldw	r5,-16(fp)
811054b0:	e13ffb17 	ldw	r4,-20(fp)
811054b4:	11055cc0 	call	811055cc <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
811054b8:	e0bffd03 	ldbu	r2,-12(fp)
811054bc:	10803fcc 	andi	r2,r2,255
811054c0:	100d883a 	mov	r6,r2
811054c4:	e17ffc17 	ldw	r5,-16(fp)
811054c8:	e13ffb17 	ldw	r4,-20(fp)
811054cc:	11056e00 	call	811056e0 <i2c_write>
811054d0:	1000011e 	bne	r2,zero,811054d8 <I2C_MultipleRead+0x6c>
        bSuccess = FALSE;
811054d4:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
811054d8:	e0bff917 	ldw	r2,-28(fp)
811054dc:	10000726 	beq	r2,zero,811054fc <I2C_MultipleRead+0x90>
811054e0:	e0bffa03 	ldbu	r2,-24(fp)
811054e4:	100d883a 	mov	r6,r2
811054e8:	e17ffc17 	ldw	r5,-16(fp)
811054ec:	e13ffb17 	ldw	r4,-20(fp)
811054f0:	11056e00 	call	811056e0 <i2c_write>
811054f4:	1000011e 	bne	r2,zero,811054fc <I2C_MultipleRead+0x90>
        bSuccess = FALSE;
811054f8:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }    
    if (bSuccess)        
811054fc:	e0bff917 	ldw	r2,-28(fp)
81105500:	10000326 	beq	r2,zero,81105510 <I2C_MultipleRead+0xa4>
        i2c_start(clk_base, data_base);  // restart
81105504:	e17ffc17 	ldw	r5,-16(fp)
81105508:	e13ffb17 	ldw	r4,-20(fp)
8110550c:	11055cc0 	call	811055cc <i2c_start>
    DeviceAddr |= 1; // Read
81105510:	e0bffd03 	ldbu	r2,-12(fp)
81105514:	10800054 	ori	r2,r2,1
81105518:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
8110551c:	e0bff917 	ldw	r2,-28(fp)
81105520:	10000826 	beq	r2,zero,81105544 <I2C_MultipleRead+0xd8>
81105524:	e0bffd03 	ldbu	r2,-12(fp)
81105528:	10803fcc 	andi	r2,r2,255
8110552c:	100d883a 	mov	r6,r2
81105530:	e17ffc17 	ldw	r5,-16(fp)
81105534:	e13ffb17 	ldw	r4,-20(fp)
81105538:	11056e00 	call	811056e0 <i2c_write>
8110553c:	1000011e 	bne	r2,zero,81105544 <I2C_MultipleRead+0xd8>
        bSuccess = FALSE;
81105540:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
81105544:	e0bff917 	ldw	r2,-28(fp)
81105548:	10001726 	beq	r2,zero,811055a8 <I2C_MultipleRead+0x13c>
        for(i=0;i<len && bSuccess;i++){
8110554c:	e03ff815 	stw	zero,-32(fp)
81105550:	00001006 	br	81105594 <I2C_MultipleRead+0x128>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
81105554:	e0bff817 	ldw	r2,-32(fp)
81105558:	e0fffe17 	ldw	r3,-8(fp)
8110555c:	1889883a 	add	r4,r3,r2
81105560:	e0bfff0b 	ldhu	r2,-4(fp)
81105564:	10ffffc4 	addi	r3,r2,-1
81105568:	e0bff817 	ldw	r2,-32(fp)
8110556c:	1884c03a 	cmpne	r2,r3,r2
81105570:	10803fcc 	andi	r2,r2,255
81105574:	100f883a 	mov	r7,r2
81105578:	200d883a 	mov	r6,r4
8110557c:	e17ffc17 	ldw	r5,-16(fp)
81105580:	e13ffb17 	ldw	r4,-20(fp)
81105584:	11058180 	call	81105818 <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
81105588:	e0bff817 	ldw	r2,-32(fp)
8110558c:	10800044 	addi	r2,r2,1
81105590:	e0bff815 	stw	r2,-32(fp)
81105594:	e0bfff0b 	ldhu	r2,-4(fp)
81105598:	e0fff817 	ldw	r3,-32(fp)
8110559c:	1880020e 	bge	r3,r2,811055a8 <I2C_MultipleRead+0x13c>
811055a0:	e0bff917 	ldw	r2,-28(fp)
811055a4:	103feb1e 	bne	r2,zero,81105554 <__reset+0xfb0e5554>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }            
    }        
    i2c_stop(clk_base, data_base);
811055a8:	e17ffc17 	ldw	r5,-16(fp)
811055ac:	e13ffb17 	ldw	r4,-20(fp)
811055b0:	11056600 	call	81105660 <i2c_stop>
    
    return bSuccess;    
811055b4:	e0bff917 	ldw	r2,-28(fp)
    
}
811055b8:	e037883a 	mov	sp,fp
811055bc:	dfc00117 	ldw	ra,4(sp)
811055c0:	df000017 	ldw	fp,0(sp)
811055c4:	dec00204 	addi	sp,sp,8
811055c8:	f800283a 	ret

811055cc <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
811055cc:	defffc04 	addi	sp,sp,-16
811055d0:	de00012e 	bgeu	sp,et,811055d8 <i2c_start+0xc>
811055d4:	003b68fa 	trap	3
811055d8:	dfc00315 	stw	ra,12(sp)
811055dc:	df000215 	stw	fp,8(sp)
811055e0:	df000204 	addi	fp,sp,8
811055e4:	e13ffe15 	stw	r4,-8(fp)
811055e8:	e17fff15 	stw	r5,-4(fp)
    
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
811055ec:	e0bfff17 	ldw	r2,-4(fp)
811055f0:	10800104 	addi	r2,r2,4
811055f4:	1007883a 	mov	r3,r2
811055f8:	00800044 	movi	r2,1
811055fc:	18800035 	stwio	r2,0(r3)
    
    
    
    // start condition
    SDA_HIGH(data_base); // data high
81105600:	e0bfff17 	ldw	r2,-4(fp)
81105604:	00c00044 	movi	r3,1
81105608:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base);
8110560c:	e0bffe17 	ldw	r2,-8(fp)
81105610:	00c00044 	movi	r3,1
81105614:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
81105618:	01000044 	movi	r4,1
8110561c:	11249c40 	call	811249c4 <usleep>
     
    SDA_LOW(data_base); // data low
81105620:	e0bfff17 	ldw	r2,-4(fp)
81105624:	0007883a 	mov	r3,zero
81105628:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; 
8110562c:	01000044 	movi	r4,1
81105630:	11249c40 	call	811249c4 <usleep>
    SCL_LOW(clk_base); // clock low
81105634:	e0bffe17 	ldw	r2,-8(fp)
81105638:	0007883a 	mov	r3,zero
8110563c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
81105640:	01000044 	movi	r4,1
81105644:	11249c40 	call	811249c4 <usleep>
}
81105648:	0001883a 	nop
8110564c:	e037883a 	mov	sp,fp
81105650:	dfc00117 	ldw	ra,4(sp)
81105654:	df000017 	ldw	fp,0(sp)
81105658:	dec00204 	addi	sp,sp,8
8110565c:	f800283a 	ret

81105660 <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
81105660:	defffc04 	addi	sp,sp,-16
81105664:	de00012e 	bgeu	sp,et,8110566c <i2c_stop+0xc>
81105668:	003b68fa 	trap	3
8110566c:	dfc00315 	stw	ra,12(sp)
81105670:	df000215 	stw	fp,8(sp)
81105674:	df000204 	addi	fp,sp,8
81105678:	e13ffe15 	stw	r4,-8(fp)
8110567c:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
81105680:	e0bfff17 	ldw	r2,-4(fp)
81105684:	10800104 	addi	r2,r2,4
81105688:	1007883a 	mov	r3,r2
8110568c:	00800044 	movi	r2,1
81105690:	18800035 	stwio	r2,0(r3)
    SDA_LOW(data_base); // Data Low
81105694:	e0bfff17 	ldw	r2,-4(fp)
81105698:	0007883a 	mov	r3,zero
8110569c:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY; 
    SCL_HIGH(clk_base);  // clock high
811056a0:	e0bffe17 	ldw	r2,-8(fp)
811056a4:	00c00044 	movi	r3,1
811056a8:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high long delay
811056ac:	01000044 	movi	r4,1
811056b0:	11249c40 	call	811249c4 <usleep>
    SDA_HIGH(data_base); // data high
811056b4:	e0bfff17 	ldw	r2,-4(fp)
811056b8:	00c00044 	movi	r3,1
811056bc:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data high delay
811056c0:	01000044 	movi	r4,1
811056c4:	11249c40 	call	811249c4 <usleep>
    

    
}
811056c8:	0001883a 	nop
811056cc:	e037883a 	mov	sp,fp
811056d0:	dfc00117 	ldw	ra,4(sp)
811056d4:	df000017 	ldw	fp,0(sp)
811056d8:	dec00204 	addi	sp,sp,8
811056dc:	f800283a 	ret

811056e0 <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
811056e0:	defff804 	addi	sp,sp,-32
811056e4:	de00012e 	bgeu	sp,et,811056ec <i2c_write+0xc>
811056e8:	003b68fa 	trap	3
811056ec:	dfc00715 	stw	ra,28(sp)
811056f0:	df000615 	stw	fp,24(sp)
811056f4:	df000604 	addi	fp,sp,24
811056f8:	e13ffd15 	stw	r4,-12(fp)
811056fc:	e17ffe15 	stw	r5,-8(fp)
81105700:	3005883a 	mov	r2,r6
81105704:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 Mask = 0x80;
81105708:	00bfe004 	movi	r2,-128
8110570c:	e0bffa05 	stb	r2,-24(fp)
    bool bAck;
    int i;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
81105710:	e0bffe17 	ldw	r2,-8(fp)
81105714:	10800104 	addi	r2,r2,4
81105718:	1007883a 	mov	r3,r2
8110571c:	00800044 	movi	r2,1
81105720:	18800035 	stwio	r2,0(r3)
    
    for(i=0;i<8;i++){
81105724:	e03ffb15 	stw	zero,-20(fp)
81105728:	00001f06 	br	811057a8 <i2c_write+0xc8>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
8110572c:	e0bffd17 	ldw	r2,-12(fp)
81105730:	0007883a 	mov	r3,zero
81105734:	10c00035 	stwio	r3,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
81105738:	e0ffff03 	ldbu	r3,-4(fp)
8110573c:	e0bffa03 	ldbu	r2,-24(fp)
81105740:	1884703a 	and	r2,r3,r2
81105744:	10803fcc 	andi	r2,r2,255
81105748:	10000426 	beq	r2,zero,8110575c <i2c_write+0x7c>
            SDA_HIGH(data_base);
8110574c:	e0bffe17 	ldw	r2,-8(fp)
81105750:	00c00044 	movi	r3,1
81105754:	10c00035 	stwio	r3,0(r2)
81105758:	00000306 	br	81105768 <i2c_write+0x88>
        }else{    
            SDA_LOW(data_base);
8110575c:	e0bffe17 	ldw	r2,-8(fp)
81105760:	0007883a 	mov	r3,zero
81105764:	10c00035 	stwio	r3,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
81105768:	e0bffa03 	ldbu	r2,-24(fp)
8110576c:	1004d07a 	srli	r2,r2,1
81105770:	e0bffa05 	stb	r2,-24(fp)
        // clock high
        SCL_HIGH(clk_base);
81105774:	e0bffd17 	ldw	r2,-12(fp)
81105778:	00c00044 	movi	r3,1
8110577c:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
81105780:	01000044 	movi	r4,1
81105784:	11249c40 	call	811249c4 <usleep>
        SCL_LOW(clk_base);
81105788:	e0bffd17 	ldw	r2,-12(fp)
8110578c:	0007883a 	mov	r3,zero
81105790:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
81105794:	01000044 	movi	r4,1
81105798:	11249c40 	call	811249c4 <usleep>
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for(i=0;i<8;i++){
8110579c:	e0bffb17 	ldw	r2,-20(fp)
811057a0:	10800044 	addi	r2,r2,1
811057a4:	e0bffb15 	stw	r2,-20(fp)
811057a8:	e0bffb17 	ldw	r2,-20(fp)
811057ac:	10800210 	cmplti	r2,r2,8
811057b0:	103fde1e 	bne	r2,zero,8110572c <__reset+0xfb0e572c>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
811057b4:	e0bffe17 	ldw	r2,-8(fp)
811057b8:	10800104 	addi	r2,r2,4
811057bc:	0007883a 	mov	r3,zero
811057c0:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
811057c4:	e0bffd17 	ldw	r2,-12(fp)
811057c8:	00c00044 	movi	r3,1
811057cc:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;  // clock high delay
811057d0:	01000044 	movi	r4,1
811057d4:	11249c40 	call	811249c4 <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
811057d8:	e0bffe17 	ldw	r2,-8(fp)
811057dc:	10800037 	ldwio	r2,0(r2)
811057e0:	1005003a 	cmpeq	r2,r2,zero
811057e4:	10803fcc 	andi	r2,r2,255
811057e8:	e0bffc15 	stw	r2,-16(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
811057ec:	e0bffd17 	ldw	r2,-12(fp)
811057f0:	0007883a 	mov	r3,zero
811057f4:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
811057f8:	01000044 	movi	r4,1
811057fc:	11249c40 	call	811249c4 <usleep>
    return bAck;
81105800:	e0bffc17 	ldw	r2,-16(fp)
}    
81105804:	e037883a 	mov	sp,fp
81105808:	dfc00117 	ldw	ra,4(sp)
8110580c:	df000017 	ldw	fp,0(sp)
81105810:	dec00204 	addi	sp,sp,8
81105814:	f800283a 	ret

81105818 <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
81105818:	defff804 	addi	sp,sp,-32
8110581c:	de00012e 	bgeu	sp,et,81105824 <i2c_read+0xc>
81105820:	003b68fa 	trap	3
81105824:	dfc00715 	stw	ra,28(sp)
81105828:	df000615 	stw	fp,24(sp)
8110582c:	df000604 	addi	fp,sp,24
81105830:	e13ffc15 	stw	r4,-16(fp)
81105834:	e17ffd15 	stw	r5,-12(fp)
81105838:	e1bffe15 	stw	r6,-8(fp)
8110583c:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
81105840:	e03ffa05 	stb	zero,-24(fp)
    int i;
    
    // assume SCL = low
    
    SDA_DIR_IN(data_base);  // set data read mode
81105844:	e0bffd17 	ldw	r2,-12(fp)
81105848:	10800104 	addi	r2,r2,4
8110584c:	0007883a 	mov	r3,zero
81105850:	10c00035 	stwio	r3,0(r2)
    SCL_LOW(clk_base); // clock low
81105854:	e0bffc17 	ldw	r2,-16(fp)
81105858:	0007883a 	mov	r3,zero
8110585c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
81105860:	01000044 	movi	r4,1
81105864:	11249c40 	call	811249c4 <usleep>

    for(i=0;i<8;i++){
81105868:	e03ffb15 	stw	zero,-20(fp)
8110586c:	00001606 	br	811058c8 <i2c_read+0xb0>
        Data <<= 1;
81105870:	e0bffa03 	ldbu	r2,-24(fp)
81105874:	1085883a 	add	r2,r2,r2
81105878:	e0bffa05 	stb	r2,-24(fp)
        SCL_HIGH(clk_base);  // clock high
8110587c:	e0bffc17 	ldw	r2,-16(fp)
81105880:	00c00044 	movi	r3,1
81105884:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
81105888:	01000044 	movi	r4,1
8110588c:	11249c40 	call	811249c4 <usleep>
        if (SDA_READ(data_base))  // read data   
81105890:	e0bffd17 	ldw	r2,-12(fp)
81105894:	10800037 	ldwio	r2,0(r2)
81105898:	10000326 	beq	r2,zero,811058a8 <i2c_read+0x90>
            Data |= 0x01;
8110589c:	e0bffa03 	ldbu	r2,-24(fp)
811058a0:	10800054 	ori	r2,r2,1
811058a4:	e0bffa05 	stb	r2,-24(fp)
        SCL_LOW(clk_base);  // clock log  
811058a8:	e0bffc17 	ldw	r2,-16(fp)
811058ac:	0007883a 	mov	r3,zero
811058b0:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
811058b4:	01000044 	movi	r4,1
811058b8:	11249c40 	call	811249c4 <usleep>
    
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
811058bc:	e0bffb17 	ldw	r2,-20(fp)
811058c0:	10800044 	addi	r2,r2,1
811058c4:	e0bffb15 	stw	r2,-20(fp)
811058c8:	e0bffb17 	ldw	r2,-20(fp)
811058cc:	10800210 	cmplti	r2,r2,8
811058d0:	103fe71e 	bne	r2,zero,81105870 <__reset+0xfb0e5870>
        SCL_LOW(clk_base);  // clock log  
        SCL_DELAY;
    }
    
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
811058d4:	e0bffc17 	ldw	r2,-16(fp)
811058d8:	0007883a 	mov	r3,zero
811058dc:	10c00035 	stwio	r3,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
811058e0:	e0bffd17 	ldw	r2,-12(fp)
811058e4:	10800104 	addi	r2,r2,4
811058e8:	1007883a 	mov	r3,r2
811058ec:	00800044 	movi	r2,1
811058f0:	18800035 	stwio	r2,0(r3)
    if (bAck)
811058f4:	e0bfff17 	ldw	r2,-4(fp)
811058f8:	10000426 	beq	r2,zero,8110590c <i2c_read+0xf4>
        SDA_LOW(data_base);
811058fc:	e0bffd17 	ldw	r2,-12(fp)
81105900:	0007883a 	mov	r3,zero
81105904:	10c00035 	stwio	r3,0(r2)
81105908:	00000306 	br	81105918 <i2c_read+0x100>
    else
        SDA_HIGH(data_base);
8110590c:	e0bffd17 	ldw	r2,-12(fp)
81105910:	00c00044 	movi	r3,1
81105914:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base); // clock high
81105918:	e0bffc17 	ldw	r2,-16(fp)
8110591c:	00c00044 	movi	r3,1
81105920:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high  delay
81105924:	01000044 	movi	r4,1
81105928:	11249c40 	call	811249c4 <usleep>
    SCL_LOW(clk_base); // clock low
8110592c:	e0bffc17 	ldw	r2,-16(fp)
81105930:	0007883a 	mov	r3,zero
81105934:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
81105938:	01000044 	movi	r4,1
8110593c:	11249c40 	call	811249c4 <usleep>
    SDA_LOW(data_base);  // data low
81105940:	e0bffd17 	ldw	r2,-12(fp)
81105944:	0007883a 	mov	r3,zero
81105948:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data low delay
8110594c:	01000044 	movi	r4,1
81105950:	11249c40 	call	811249c4 <usleep>
//    SDA_DIR_IN;  // set data read mode
    
    *pData = Data;
81105954:	e0bffe17 	ldw	r2,-8(fp)
81105958:	e0fffa03 	ldbu	r3,-24(fp)
8110595c:	10c00005 	stb	r3,0(r2)
}
81105960:	0001883a 	nop
81105964:	e037883a 	mov	sp,fp
81105968:	dfc00117 	ldw	ra,4(sp)
8110596c:	df000017 	ldw	fp,0(sp)
81105970:	dec00204 	addi	sp,sp,8
81105974:	f800283a 	ret

81105978 <bSetBoardLeds>:
 * @param [in] LedsMask  Mascara de leds a serem modificados
 *
 * @retval TRUE : Sucesso
 *
 */
bool bSetBoardLeds(bool bDRIVE, alt_u8 LedsMask){
81105978:	defffd04 	addi	sp,sp,-12
8110597c:	de00012e 	bgeu	sp,et,81105984 <bSetBoardLeds+0xc>
81105980:	003b68fa 	trap	3
81105984:	df000215 	stw	fp,8(sp)
81105988:	df000204 	addi	fp,sp,8
8110598c:	e13ffe15 	stw	r4,-8(fp)
81105990:	2805883a 	mov	r2,r5
81105994:	e0bfff05 	stb	r2,-4(fp)

  // Board LEDs state: ON = 0; OFF = 1;

  if (bDRIVE == LEDS_ON){
81105998:	e0bffe17 	ldw	r2,-8(fp)
8110599c:	10800058 	cmpnei	r2,r2,1
811059a0:	1000071e 	bne	r2,zero,811059c0 <bSetBoardLeds+0x48>
	  LedsBoardControl &= (~LedsMask);
811059a4:	e0bfff03 	ldbu	r2,-4(fp)
811059a8:	0084303a 	nor	r2,zero,r2
811059ac:	1007883a 	mov	r3,r2
811059b0:	d0a05003 	ldbu	r2,-32448(gp)
811059b4:	1884703a 	and	r2,r3,r2
811059b8:	d0a05005 	stb	r2,-32448(gp)
811059bc:	00000406 	br	811059d0 <bSetBoardLeds+0x58>
  } else {
	  LedsBoardControl |= LedsMask;
811059c0:	d0e05003 	ldbu	r3,-32448(gp)
811059c4:	e0bfff03 	ldbu	r2,-4(fp)
811059c8:	1884b03a 	or	r2,r3,r2
811059cc:	d0a05005 	stb	r2,-32448(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BOARD_BASE, LedsBoardControl);
811059d0:	d0a05003 	ldbu	r2,-32448(gp)
811059d4:	10c03fcc 	andi	r3,r2,255
811059d8:	00a00034 	movhi	r2,32768
811059dc:	10816c04 	addi	r2,r2,1456
811059e0:	10c00035 	stwio	r3,0(r2)

  return TRUE;
811059e4:	00800044 	movi	r2,1
}
811059e8:	e037883a 	mov	sp,fp
811059ec:	df000017 	ldw	fp,0(sp)
811059f0:	dec00104 	addi	sp,sp,4
811059f4:	f800283a 	ret

811059f8 <bSetPainelLeds>:
 * @param [in] LedsMask  Mascara de leds a serem modificados
 *
 * @retval TRUE : Sucesso
 *
 */
bool bSetPainelLeds(bool bDRIVE, alt_u32 LedsMask){
811059f8:	defffd04 	addi	sp,sp,-12
811059fc:	de00012e 	bgeu	sp,et,81105a04 <bSetPainelLeds+0xc>
81105a00:	003b68fa 	trap	3
81105a04:	df000215 	stw	fp,8(sp)
81105a08:	df000204 	addi	fp,sp,8
81105a0c:	e13ffe15 	stw	r4,-8(fp)
81105a10:	e17fff15 	stw	r5,-4(fp)

  // Painel LEDs state: ON = 1; OFF = 0;

  if (bDRIVE == LEDS_ON){
81105a14:	e0bffe17 	ldw	r2,-8(fp)
81105a18:	10800058 	cmpnei	r2,r2,1
81105a1c:	1000051e 	bne	r2,zero,81105a34 <bSetPainelLeds+0x3c>
	  LedsPainelControl |= LedsMask;
81105a20:	d0e05117 	ldw	r3,-32444(gp)
81105a24:	e0bfff17 	ldw	r2,-4(fp)
81105a28:	1884b03a 	or	r2,r3,r2
81105a2c:	d0a05115 	stw	r2,-32444(gp)
81105a30:	00000506 	br	81105a48 <bSetPainelLeds+0x50>
  } else {
	  LedsPainelControl &= (~LedsMask);
81105a34:	e0bfff17 	ldw	r2,-4(fp)
81105a38:	0086303a 	nor	r3,zero,r2
81105a3c:	d0a05117 	ldw	r2,-32444(gp)
81105a40:	1884703a 	and	r2,r3,r2
81105a44:	d0a05115 	stw	r2,-32444(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PAINEL_BASE, LedsPainelControl);
81105a48:	d0a05117 	ldw	r2,-32444(gp)
81105a4c:	1007883a 	mov	r3,r2
81105a50:	00a00034 	movhi	r2,32768
81105a54:	10813804 	addi	r2,r2,1248
81105a58:	10c00035 	stwio	r3,0(r2)

  return TRUE;
81105a5c:	00800044 	movi	r2,1
}
81105a60:	e037883a 	mov	sp,fp
81105a64:	df000017 	ldw	fp,0(sp)
81105a68:	dec00104 	addi	sp,sp,4
81105a6c:	f800283a 	ret

81105a70 <PGEN_WRITE_REG32>:
 */

	#include "pgen.h"


	void PGEN_WRITE_REG32(alt_u8 uc_RegisterAddress, alt_u32 ul_RegisterValue){
81105a70:	defffc04 	addi	sp,sp,-16
81105a74:	de00012e 	bgeu	sp,et,81105a7c <PGEN_WRITE_REG32+0xc>
81105a78:	003b68fa 	trap	3
81105a7c:	df000315 	stw	fp,12(sp)
81105a80:	df000304 	addi	fp,sp,12
81105a84:	2005883a 	mov	r2,r4
81105a88:	e17fff15 	stw	r5,-4(fp)
81105a8c:	e0bffe05 	stb	r2,-8(fp)
		alt_u32 *pPgenAddr = PGEN_BASE;
81105a90:	00a04834 	movhi	r2,33056
81105a94:	108f0004 	addi	r2,r2,15360
81105a98:	e0bffd15 	stw	r2,-12(fp)
		*(pPgenAddr + (alt_u32)uc_RegisterAddress) = (alt_u32) ul_RegisterValue;
81105a9c:	e0bffe03 	ldbu	r2,-8(fp)
81105aa0:	1085883a 	add	r2,r2,r2
81105aa4:	1085883a 	add	r2,r2,r2
81105aa8:	1007883a 	mov	r3,r2
81105aac:	e0bffd17 	ldw	r2,-12(fp)
81105ab0:	10c5883a 	add	r2,r2,r3
81105ab4:	e0ffff17 	ldw	r3,-4(fp)
81105ab8:	10c00015 	stw	r3,0(r2)
	}
81105abc:	0001883a 	nop
81105ac0:	e037883a 	mov	sp,fp
81105ac4:	df000017 	ldw	fp,0(sp)
81105ac8:	dec00104 	addi	sp,sp,4
81105acc:	f800283a 	ret

81105ad0 <PGEN_READ_REG32>:

	alt_u32 PGEN_READ_REG32(alt_u8 uc_RegisterAddress){
81105ad0:	defffc04 	addi	sp,sp,-16
81105ad4:	de00012e 	bgeu	sp,et,81105adc <PGEN_READ_REG32+0xc>
81105ad8:	003b68fa 	trap	3
81105adc:	df000315 	stw	fp,12(sp)
81105ae0:	df000304 	addi	fp,sp,12
81105ae4:	2005883a 	mov	r2,r4
81105ae8:	e0bfff05 	stb	r2,-4(fp)
		alt_u32 RegisterValue = 0;
81105aec:	e03ffd15 	stw	zero,-12(fp)
		alt_u32 *pPgenAddr = PGEN_BASE;
81105af0:	00a04834 	movhi	r2,33056
81105af4:	108f0004 	addi	r2,r2,15360
81105af8:	e0bffe15 	stw	r2,-8(fp)
		RegisterValue = *(pPgenAddr + (alt_u32)uc_RegisterAddress);
81105afc:	e0bfff03 	ldbu	r2,-4(fp)
81105b00:	1085883a 	add	r2,r2,r2
81105b04:	1085883a 	add	r2,r2,r2
81105b08:	1007883a 	mov	r3,r2
81105b0c:	e0bffe17 	ldw	r2,-8(fp)
81105b10:	10c5883a 	add	r2,r2,r3
81105b14:	10800017 	ldw	r2,0(r2)
81105b18:	e0bffd15 	stw	r2,-12(fp)
		return RegisterValue;
81105b1c:	e0bffd17 	ldw	r2,-12(fp)
	}
81105b20:	e037883a 	mov	sp,fp
81105b24:	df000017 	ldw	fp,0(sp)
81105b28:	dec00104 	addi	sp,sp,4
81105b2c:	f800283a 	ret

81105b30 <b_Pattern_Generator_Write_Register>:

	bool b_Pattern_Generator_Write_Register(alt_u8 uc_RegisterAddress, alt_u32 ul_RegisterValue){
81105b30:	defffb04 	addi	sp,sp,-20
81105b34:	de00012e 	bgeu	sp,et,81105b3c <b_Pattern_Generator_Write_Register+0xc>
81105b38:	003b68fa 	trap	3
81105b3c:	dfc00415 	stw	ra,16(sp)
81105b40:	df000315 	stw	fp,12(sp)
81105b44:	df000304 	addi	fp,sp,12
81105b48:	2005883a 	mov	r2,r4
81105b4c:	e17fff15 	stw	r5,-4(fp)
81105b50:	e0bffe05 	stb	r2,-8(fp)

		bool bSuccess = FALSE;
81105b54:	e03ffd15 	stw	zero,-12(fp)

		if (uc_RegisterAddress <= 0x01) {
81105b58:	e0bffe03 	ldbu	r2,-8(fp)
81105b5c:	108000a8 	cmpgeui	r2,r2,2
81105b60:	1000061e 	bne	r2,zero,81105b7c <b_Pattern_Generator_Write_Register+0x4c>
			PGEN_WRITE_REG32(uc_RegisterAddress, ul_RegisterValue);
81105b64:	e0bffe03 	ldbu	r2,-8(fp)
81105b68:	e17fff17 	ldw	r5,-4(fp)
81105b6c:	1009883a 	mov	r4,r2
81105b70:	1105a700 	call	81105a70 <PGEN_WRITE_REG32>
			bSuccess = TRUE;
81105b74:	00800044 	movi	r2,1
81105b78:	e0bffd15 	stw	r2,-12(fp)
		}

		return bSuccess;
81105b7c:	e0bffd17 	ldw	r2,-12(fp)
	}
81105b80:	e037883a 	mov	sp,fp
81105b84:	dfc00117 	ldw	ra,4(sp)
81105b88:	df000017 	ldw	fp,0(sp)
81105b8c:	dec00204 	addi	sp,sp,8
81105b90:	f800283a 	ret

81105b94 <ul_Pattern_Generator_Read_Register>:

	alt_u32 ul_Pattern_Generator_Read_Register(alt_u8 uc_RegisterAddress){
81105b94:	defffc04 	addi	sp,sp,-16
81105b98:	de00012e 	bgeu	sp,et,81105ba0 <ul_Pattern_Generator_Read_Register+0xc>
81105b9c:	003b68fa 	trap	3
81105ba0:	dfc00315 	stw	ra,12(sp)
81105ba4:	df000215 	stw	fp,8(sp)
81105ba8:	df000204 	addi	fp,sp,8
81105bac:	2005883a 	mov	r2,r4
81105bb0:	e0bfff05 	stb	r2,-4(fp)

		alt_u32 ul_RegisterValue = 0;
81105bb4:	e03ffe15 	stw	zero,-8(fp)

		if (uc_RegisterAddress <= 0x01) {
81105bb8:	e0bfff03 	ldbu	r2,-4(fp)
81105bbc:	108000a8 	cmpgeui	r2,r2,2
81105bc0:	1000041e 	bne	r2,zero,81105bd4 <ul_Pattern_Generator_Read_Register+0x40>
			ul_RegisterValue = PGEN_READ_REG32(uc_RegisterAddress);
81105bc4:	e0bfff03 	ldbu	r2,-4(fp)
81105bc8:	1009883a 	mov	r4,r2
81105bcc:	1105ad00 	call	81105ad0 <PGEN_READ_REG32>
81105bd0:	e0bffe15 	stw	r2,-8(fp)
		}

		return ul_RegisterValue;
81105bd4:	e0bffe17 	ldw	r2,-8(fp)
	}
81105bd8:	e037883a 	mov	sp,fp
81105bdc:	dfc00117 	ldw	ra,4(sp)
81105be0:	df000017 	ldw	fp,0(sp)
81105be4:	dec00204 	addi	sp,sp,8
81105be8:	f800283a 	ret

81105bec <v_Pattern_Generator_Start>:

	void v_Pattern_Generator_Start(void){
81105bec:	defffe04 	addi	sp,sp,-8
81105bf0:	de00012e 	bgeu	sp,et,81105bf8 <v_Pattern_Generator_Start+0xc>
81105bf4:	003b68fa 	trap	3
81105bf8:	dfc00115 	stw	ra,4(sp)
81105bfc:	df000015 	stw	fp,0(sp)
81105c00:	d839883a 	mov	fp,sp

		PGEN_WRITE_REG32(PGEN_GENERATOR_CONTROL_STATUS_REGISTER_ADDRESS, (alt_u32)PGEN_START_CONTROL_BIT_MASK);
81105c04:	01400404 	movi	r5,16
81105c08:	0009883a 	mov	r4,zero
81105c0c:	1105a700 	call	81105a70 <PGEN_WRITE_REG32>

	}
81105c10:	0001883a 	nop
81105c14:	e037883a 	mov	sp,fp
81105c18:	dfc00117 	ldw	ra,4(sp)
81105c1c:	df000017 	ldw	fp,0(sp)
81105c20:	dec00204 	addi	sp,sp,8
81105c24:	f800283a 	ret

81105c28 <v_Pattern_Generator_Stop>:

	void v_Pattern_Generator_Stop(void){
81105c28:	defffe04 	addi	sp,sp,-8
81105c2c:	de00012e 	bgeu	sp,et,81105c34 <v_Pattern_Generator_Stop+0xc>
81105c30:	003b68fa 	trap	3
81105c34:	dfc00115 	stw	ra,4(sp)
81105c38:	df000015 	stw	fp,0(sp)
81105c3c:	d839883a 	mov	fp,sp

		PGEN_WRITE_REG32(PGEN_GENERATOR_CONTROL_STATUS_REGISTER_ADDRESS, (alt_u32)PGEN_STOP_CONTROL_BIT_MASK);
81105c40:	01400204 	movi	r5,8
81105c44:	0009883a 	mov	r4,zero
81105c48:	1105a700 	call	81105a70 <PGEN_WRITE_REG32>

	}
81105c4c:	0001883a 	nop
81105c50:	e037883a 	mov	sp,fp
81105c54:	dfc00117 	ldw	ra,4(sp)
81105c58:	df000017 	ldw	fp,0(sp)
81105c5c:	dec00204 	addi	sp,sp,8
81105c60:	f800283a 	ret

81105c64 <v_Pattern_Generator_Reset>:

	void v_Pattern_Generator_Reset(void){
81105c64:	defffe04 	addi	sp,sp,-8
81105c68:	de00012e 	bgeu	sp,et,81105c70 <v_Pattern_Generator_Reset+0xc>
81105c6c:	003b68fa 	trap	3
81105c70:	dfc00115 	stw	ra,4(sp)
81105c74:	df000015 	stw	fp,0(sp)
81105c78:	d839883a 	mov	fp,sp

		PGEN_WRITE_REG32(PGEN_GENERATOR_CONTROL_STATUS_REGISTER_ADDRESS, (alt_u32)PGEN_RESET_CONTROL_BIT_MASK);
81105c7c:	01400104 	movi	r5,4
81105c80:	0009883a 	mov	r4,zero
81105c84:	1105a700 	call	81105a70 <PGEN_WRITE_REG32>

	}
81105c88:	0001883a 	nop
81105c8c:	e037883a 	mov	sp,fp
81105c90:	dfc00117 	ldw	ra,4(sp)
81105c94:	df000017 	ldw	fp,0(sp)
81105c98:	dec00204 	addi	sp,sp,8
81105c9c:	f800283a 	ret

81105ca0 <Pattern_Generator_Status>:

	alt_u32 Pattern_Generator_Status(void){
81105ca0:	defffc04 	addi	sp,sp,-16
81105ca4:	de00012e 	bgeu	sp,et,81105cac <Pattern_Generator_Status+0xc>
81105ca8:	003b68fa 	trap	3
81105cac:	dfc00315 	stw	ra,12(sp)
81105cb0:	df000215 	stw	fp,8(sp)
81105cb4:	df000204 	addi	fp,sp,8

		const alt_u32 ul_pgen_mask = PGEN_RESETED_STATUS_BIT_MASK | PGEN_STOPPED_STATUS_BIT_MASK;
81105cb8:	008000c4 	movi	r2,3
81105cbc:	e0bffe15 	stw	r2,-8(fp)
		alt_u32 ul_pgen_status_value = PGEN_READ_REG32(PGEN_GENERATOR_CONTROL_STATUS_REGISTER_ADDRESS) & ul_pgen_mask;
81105cc0:	0009883a 	mov	r4,zero
81105cc4:	1105ad00 	call	81105ad0 <PGEN_READ_REG32>
81105cc8:	1007883a 	mov	r3,r2
81105ccc:	e0bffe17 	ldw	r2,-8(fp)
81105cd0:	1884703a 	and	r2,r3,r2
81105cd4:	e0bfff15 	stw	r2,-4(fp)

		return ul_pgen_status_value;
81105cd8:	e0bfff17 	ldw	r2,-4(fp)
	}
81105cdc:	e037883a 	mov	sp,fp
81105ce0:	dfc00117 	ldw	ra,4(sp)
81105ce4:	df000017 	ldw	fp,0(sp)
81105ce8:	dec00204 	addi	sp,sp,8
81105cec:	f800283a 	ret

81105cf0 <Pattern_Generator_Configure_Initial_State>:

	bool Pattern_Generator_Configure_Initial_State(alt_u8 uc_Initial_CCD_ID, alt_u8 uc_Initial_CCD_SIDE, alt_u8 uc_Initial_TimeCode){
81105cf0:	defff904 	addi	sp,sp,-28
81105cf4:	de00012e 	bgeu	sp,et,81105cfc <Pattern_Generator_Configure_Initial_State+0xc>
81105cf8:	003b68fa 	trap	3
81105cfc:	dfc00615 	stw	ra,24(sp)
81105d00:	df000515 	stw	fp,20(sp)
81105d04:	df000504 	addi	fp,sp,20
81105d08:	2807883a 	mov	r3,r5
81105d0c:	3005883a 	mov	r2,r6
81105d10:	e13ffd05 	stb	r4,-12(fp)
81105d14:	e0fffe05 	stb	r3,-8(fp)
81105d18:	e0bfff05 	stb	r2,-4(fp)

		bool bSuccess = FALSE;
81105d1c:	e03ffb15 	stw	zero,-20(fp)

		alt_u32 initial_state_config_value;
		if ((uc_Initial_CCD_ID < 4) && (uc_Initial_CCD_SIDE < 2)) {
81105d20:	e0bffd03 	ldbu	r2,-12(fp)
81105d24:	10800128 	cmpgeui	r2,r2,4
81105d28:	1000101e 	bne	r2,zero,81105d6c <Pattern_Generator_Configure_Initial_State+0x7c>
81105d2c:	e0bffe03 	ldbu	r2,-8(fp)
81105d30:	108000a8 	cmpgeui	r2,r2,2
81105d34:	10000d1e 	bne	r2,zero,81105d6c <Pattern_Generator_Configure_Initial_State+0x7c>
			initial_state_config_value = (((alt_u32)uc_Initial_CCD_ID) << 9) | (((alt_u32)uc_Initial_CCD_SIDE) << 8) | ((alt_u32)uc_Initial_TimeCode);
81105d38:	e0bffd03 	ldbu	r2,-12(fp)
81105d3c:	1006927a 	slli	r3,r2,9
81105d40:	e0bffe03 	ldbu	r2,-8(fp)
81105d44:	1004923a 	slli	r2,r2,8
81105d48:	1886b03a 	or	r3,r3,r2
81105d4c:	e0bfff03 	ldbu	r2,-4(fp)
81105d50:	1884b03a 	or	r2,r3,r2
81105d54:	e0bffc15 	stw	r2,-16(fp)
			PGEN_WRITE_REG32(PGEN_INITIAL_TRANSMISSION_STATE_REGISTER_ADDRESS, initial_state_config_value);
81105d58:	e17ffc17 	ldw	r5,-16(fp)
81105d5c:	01000044 	movi	r4,1
81105d60:	1105a700 	call	81105a70 <PGEN_WRITE_REG32>
			bSuccess = TRUE;
81105d64:	00800044 	movi	r2,1
81105d68:	e0bffb15 	stw	r2,-20(fp)
		}

		return bSuccess;
81105d6c:	e0bffb17 	ldw	r2,-20(fp)
	}
81105d70:	e037883a 	mov	sp,fp
81105d74:	dfc00117 	ldw	ra,4(sp)
81105d78:	df000017 	ldw	fp,0(sp)
81105d7c:	dec00204 	addi	sp,sp,8
81105d80:	f800283a 	ret

81105d84 <POWER_SPI_RW>:
#define SPI_DELAY     usleep(15)  // based on 50MHZ of CPU clock


// Note. SCK: typical 19.2KHZ (53 ms)
bool POWER_SPI_RW(alt_u8 IcIndex, alt_u8 NextChannel, bool bEN, bool bSIGN, bool bSGL, alt_u32 *pValue)
{
81105d84:	defff204 	addi	sp,sp,-56
81105d88:	de00012e 	bgeu	sp,et,81105d90 <POWER_SPI_RW+0xc>
81105d8c:	003b68fa 	trap	3
81105d90:	dfc00d15 	stw	ra,52(sp)
81105d94:	df000c15 	stw	fp,48(sp)
81105d98:	df000c04 	addi	fp,sp,48
81105d9c:	2007883a 	mov	r3,r4
81105da0:	2805883a 	mov	r2,r5
81105da4:	e1bffe15 	stw	r6,-8(fp)
81105da8:	e1ffff15 	stw	r7,-4(fp)
81105dac:	e0fffc05 	stb	r3,-16(fp)
81105db0:	e0bffd05 	stb	r2,-12(fp)
    bool bSuccess;
    alt_u8 Config8;
    alt_u32 Value32=0, Mask32;
81105db4:	e03ff515 	stw	zero,-44(fp)
    int i, nWait = 0, nZeroCnt;
81105db8:	e03ff815 	stw	zero,-32(fp)
    const int nMaxWait = 1000000;
81105dbc:	008003f4 	movhi	r2,15
81105dc0:	10909004 	addi	r2,r2,16960
81105dc4:	e0bffa15 	stw	r2,-24(fp)
    
    //
    Config8 = 0x80; 
81105dc8:	00bfe004 	movi	r2,-128
81105dcc:	e0bff405 	stb	r2,-48(fp)
    Config8 |= (bEN)?0x20:0x00;
81105dd0:	e0bffe17 	ldw	r2,-8(fp)
81105dd4:	10000226 	beq	r2,zero,81105de0 <POWER_SPI_RW+0x5c>
81105dd8:	00800804 	movi	r2,32
81105ddc:	00000106 	br	81105de4 <POWER_SPI_RW+0x60>
81105de0:	0005883a 	mov	r2,zero
81105de4:	e0fff403 	ldbu	r3,-48(fp)
81105de8:	10c4b03a 	or	r2,r2,r3
81105dec:	e0bff405 	stb	r2,-48(fp)
    Config8 |= (bSGL)?0x10:0x00;
81105df0:	e0800217 	ldw	r2,8(fp)
81105df4:	10000226 	beq	r2,zero,81105e00 <POWER_SPI_RW+0x7c>
81105df8:	00800404 	movi	r2,16
81105dfc:	00000106 	br	81105e04 <POWER_SPI_RW+0x80>
81105e00:	0005883a 	mov	r2,zero
81105e04:	e0fff403 	ldbu	r3,-48(fp)
81105e08:	10c4b03a 	or	r2,r2,r3
81105e0c:	e0bff405 	stb	r2,-48(fp)
    Config8 |= (bSIGN)?0x08:0x00;
81105e10:	e0bfff17 	ldw	r2,-4(fp)
81105e14:	10000226 	beq	r2,zero,81105e20 <POWER_SPI_RW+0x9c>
81105e18:	00800204 	movi	r2,8
81105e1c:	00000106 	br	81105e24 <POWER_SPI_RW+0xa0>
81105e20:	0005883a 	mov	r2,zero
81105e24:	e0fff403 	ldbu	r3,-48(fp)
81105e28:	10c4b03a 	or	r2,r2,r3
81105e2c:	e0bff405 	stb	r2,-48(fp)
    Config8 |= NextChannel & 0x07; // channel
81105e30:	e0bffd03 	ldbu	r2,-12(fp)
81105e34:	108001cc 	andi	r2,r2,7
81105e38:	1007883a 	mov	r3,r2
81105e3c:	e0bff403 	ldbu	r2,-48(fp)
81105e40:	1884b03a 	or	r2,r3,r2
81105e44:	e0bff405 	stb	r2,-48(fp)
    
    SPI_FO(0); // use internal conversion clock
81105e48:	0007883a 	mov	r3,zero
81105e4c:	00a00034 	movhi	r2,32768
81105e50:	10813c04 	addi	r2,r2,1264
81105e54:	10c00035 	stwio	r3,0(r2)
    SPI_SCK(0);  // set low to active extenal serial clock mode.
81105e58:	0007883a 	mov	r3,zero
81105e5c:	00a00034 	movhi	r2,32768
81105e60:	10814404 	addi	r2,r2,1296
81105e64:	10c00035 	stwio	r3,0(r2)
    SPI_CS_N(IcIndex, 0);  // chip select: active
81105e68:	e0bffc03 	ldbu	r2,-16(fp)
81105e6c:	1000021e 	bne	r2,zero,81105e78 <POWER_SPI_RW+0xf4>
81105e70:	00c00084 	movi	r3,2
81105e74:	00000106 	br	81105e7c <POWER_SPI_RW+0xf8>
81105e78:	00c00044 	movi	r3,1
81105e7c:	00a00034 	movhi	r2,32768
81105e80:	10814004 	addi	r2,r2,1280
81105e84:	10c00035 	stwio	r3,0(r2)
    SPI_DELAY;
81105e88:	010003c4 	movi	r4,15
81105e8c:	11249c40 	call	811249c4 <usleep>
    
    // wait for converion end (when conversion done, SPI_SDO is low)
    while(SPI_SDO && nWait < nMaxWait){
81105e90:	00000306 	br	81105ea0 <POWER_SPI_RW+0x11c>
        nWait++;
81105e94:	e0bff817 	ldw	r2,-32(fp)
81105e98:	10800044 	addi	r2,r2,1
81105e9c:	e0bff815 	stw	r2,-32(fp)
    SPI_SCK(0);  // set low to active extenal serial clock mode.
    SPI_CS_N(IcIndex, 0);  // chip select: active
    SPI_DELAY;
    
    // wait for converion end (when conversion done, SPI_SDO is low)
    while(SPI_SDO && nWait < nMaxWait){
81105ea0:	00a00034 	movhi	r2,32768
81105ea4:	10814c04 	addi	r2,r2,1328
81105ea8:	10800037 	ldwio	r2,0(r2)
81105eac:	1080004c 	andi	r2,r2,1
81105eb0:	10000326 	beq	r2,zero,81105ec0 <POWER_SPI_RW+0x13c>
81105eb4:	e0fff817 	ldw	r3,-32(fp)
81105eb8:	e0bffa17 	ldw	r2,-24(fp)
81105ebc:	18bff516 	blt	r3,r2,81105e94 <__reset+0xfb0e5e94>
        nWait++;
    }
    
    if (SPI_SDO){
81105ec0:	00a00034 	movhi	r2,32768
81105ec4:	10814c04 	addi	r2,r2,1328
81105ec8:	10800037 	ldwio	r2,0(r2)
81105ecc:	1080004c 	andi	r2,r2,1
81105ed0:	10000626 	beq	r2,zero,81105eec <POWER_SPI_RW+0x168>
        SPI_CS_N(IcIndex, 1);  // chip select: inactive
81105ed4:	00c000c4 	movi	r3,3
81105ed8:	00a00034 	movhi	r2,32768
81105edc:	10814004 	addi	r2,r2,1280
81105ee0:	10c00035 	stwio	r3,0(r2)
//        printf("Timeout \r\n");
        return FALSE;
81105ee4:	0005883a 	mov	r2,zero
81105ee8:	0000db06 	br	81106258 <POWER_SPI_RW+0x4d4>
    }
    
    for(i=0;i<2;i++) // send config bits 7:6,
81105eec:	e03ff715 	stw	zero,-36(fp)
81105ef0:	00002406 	br	81105f84 <POWER_SPI_RW+0x200>
    // ignore EOC/ and DMY bits
    {
        SPI_SDI((Config8 & 0x80)?1:0);//sdi=nextch.7; // put data on pin
81105ef4:	e0bff403 	ldbu	r2,-48(fp)
81105ef8:	10803fcc 	andi	r2,r2,255
81105efc:	1004d1fa 	srli	r2,r2,7
81105f00:	10c03fcc 	andi	r3,r2,255
81105f04:	00a00034 	movhi	r2,32768
81105f08:	10814804 	addi	r2,r2,1312
81105f0c:	10c00035 	stwio	r3,0(r2)
        Config8 <<= 1; //nextch = rl(nextch); // get next config bit ready
81105f10:	e0bff403 	ldbu	r2,-48(fp)
81105f14:	1085883a 	add	r2,r2,r2
81105f18:	e0bff405 	stb	r2,-48(fp)
        Value32 <<= 1;//result_0 = rl(result_0);// get ready to load lsb
81105f1c:	e0bff517 	ldw	r2,-44(fp)
81105f20:	1085883a 	add	r2,r2,r2
81105f24:	e0bff515 	stw	r2,-44(fp)
        Value32 |= SPI_SDO;//result_0.0 = sdo; // load lsb
81105f28:	00a00034 	movhi	r2,32768
81105f2c:	10814c04 	addi	r2,r2,1328
81105f30:	10800037 	ldwio	r2,0(r2)
81105f34:	1080004c 	andi	r2,r2,1
81105f38:	1007883a 	mov	r3,r2
81105f3c:	e0bff517 	ldw	r2,-44(fp)
81105f40:	10c4b03a 	or	r2,r2,r3
81105f44:	e0bff515 	stw	r2,-44(fp)
        
        SPI_SCK(1);//sck=1; // clock high
81105f48:	00c00044 	movi	r3,1
81105f4c:	00a00034 	movhi	r2,32768
81105f50:	10814404 	addi	r2,r2,1296
81105f54:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81105f58:	010003c4 	movi	r4,15
81105f5c:	11249c40 	call	811249c4 <usleep>
        SPI_SCK(0);//sck=0; // clock low
81105f60:	0007883a 	mov	r3,zero
81105f64:	00a00034 	movhi	r2,32768
81105f68:	10814404 	addi	r2,r2,1296
81105f6c:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81105f70:	010003c4 	movi	r4,15
81105f74:	11249c40 	call	811249c4 <usleep>
        SPI_CS_N(IcIndex, 1);  // chip select: inactive
//        printf("Timeout \r\n");
        return FALSE;
    }
    
    for(i=0;i<2;i++) // send config bits 7:6,
81105f78:	e0bff717 	ldw	r2,-36(fp)
81105f7c:	10800044 	addi	r2,r2,1
81105f80:	e0bff715 	stw	r2,-36(fp)
81105f84:	e0bff717 	ldw	r2,-36(fp)
81105f88:	10800090 	cmplti	r2,r2,2
81105f8c:	103fd91e 	bne	r2,zero,81105ef4 <__reset+0xfb0e5ef4>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<8;i++) // send config, read byte 3
81105f90:	e03ff715 	stw	zero,-36(fp)
81105f94:	00002406 	br	81106028 <POWER_SPI_RW+0x2a4>
    {
        SPI_SDI((Config8 & 0x80)?1:0);//sdi=nextch.7; // put data on pin
81105f98:	e0bff403 	ldbu	r2,-48(fp)
81105f9c:	10803fcc 	andi	r2,r2,255
81105fa0:	1004d1fa 	srli	r2,r2,7
81105fa4:	10c03fcc 	andi	r3,r2,255
81105fa8:	00a00034 	movhi	r2,32768
81105fac:	10814804 	addi	r2,r2,1312
81105fb0:	10c00035 	stwio	r3,0(r2)
        Config8 <<= 1; //nextch = rl(nextch); // get next config bit ready
81105fb4:	e0bff403 	ldbu	r2,-48(fp)
81105fb8:	1085883a 	add	r2,r2,r2
81105fbc:	e0bff405 	stb	r2,-48(fp)
        
        Value32 <<= 1; //result_3 = rl(result_3);// get ready to load lsb
81105fc0:	e0bff517 	ldw	r2,-44(fp)
81105fc4:	1085883a 	add	r2,r2,r2
81105fc8:	e0bff515 	stw	r2,-44(fp)
        Value32 |= SPI_SDO; //result_3.0 = sdo; // load lsb
81105fcc:	00a00034 	movhi	r2,32768
81105fd0:	10814c04 	addi	r2,r2,1328
81105fd4:	10800037 	ldwio	r2,0(r2)
81105fd8:	1080004c 	andi	r2,r2,1
81105fdc:	1007883a 	mov	r3,r2
81105fe0:	e0bff517 	ldw	r2,-44(fp)
81105fe4:	10c4b03a 	or	r2,r2,r3
81105fe8:	e0bff515 	stw	r2,-44(fp)
        
        SPI_SCK(1);//sck=1; // clock high
81105fec:	00c00044 	movi	r3,1
81105ff0:	00a00034 	movhi	r2,32768
81105ff4:	10814404 	addi	r2,r2,1296
81105ff8:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81105ffc:	010003c4 	movi	r4,15
81106000:	11249c40 	call	811249c4 <usleep>
        SPI_SCK(0);//sck=0; // clock low
81106004:	0007883a 	mov	r3,zero
81106008:	00a00034 	movhi	r2,32768
8110600c:	10814404 	addi	r2,r2,1296
81106010:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81106014:	010003c4 	movi	r4,15
81106018:	11249c40 	call	811249c4 <usleep>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<8;i++) // send config, read byte 3
8110601c:	e0bff717 	ldw	r2,-36(fp)
81106020:	10800044 	addi	r2,r2,1
81106024:	e0bff715 	stw	r2,-36(fp)
81106028:	e0bff717 	ldw	r2,-36(fp)
8110602c:	10800210 	cmplti	r2,r2,8
81106030:	103fd91e 	bne	r2,zero,81105f98 <__reset+0xfb0e5f98>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<8;i++) // read byte 2
81106034:	e03ff715 	stw	zero,-36(fp)
81106038:	00001a06 	br	811060a4 <POWER_SPI_RW+0x320>
    {
        Value32 <<= 1; //result_2 = rl(result_2);// get ready to load lsb
8110603c:	e0bff517 	ldw	r2,-44(fp)
81106040:	1085883a 	add	r2,r2,r2
81106044:	e0bff515 	stw	r2,-44(fp)
        Value32 |= SPI_SDO; //result_2.0 = sdo; // load lsb
81106048:	00a00034 	movhi	r2,32768
8110604c:	10814c04 	addi	r2,r2,1328
81106050:	10800037 	ldwio	r2,0(r2)
81106054:	1080004c 	andi	r2,r2,1
81106058:	1007883a 	mov	r3,r2
8110605c:	e0bff517 	ldw	r2,-44(fp)
81106060:	10c4b03a 	or	r2,r2,r3
81106064:	e0bff515 	stw	r2,-44(fp)
        
        SPI_SCK(1);//sck=1; // clock high
81106068:	00c00044 	movi	r3,1
8110606c:	00a00034 	movhi	r2,32768
81106070:	10814404 	addi	r2,r2,1296
81106074:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81106078:	010003c4 	movi	r4,15
8110607c:	11249c40 	call	811249c4 <usleep>
        SPI_SCK(0);//sck=0; // clock low
81106080:	0007883a 	mov	r3,zero
81106084:	00a00034 	movhi	r2,32768
81106088:	10814404 	addi	r2,r2,1296
8110608c:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81106090:	010003c4 	movi	r4,15
81106094:	11249c40 	call	811249c4 <usleep>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<8;i++) // read byte 2
81106098:	e0bff717 	ldw	r2,-36(fp)
8110609c:	10800044 	addi	r2,r2,1
811060a0:	e0bff715 	stw	r2,-36(fp)
811060a4:	e0bff717 	ldw	r2,-36(fp)
811060a8:	10800210 	cmplti	r2,r2,8
811060ac:	103fe31e 	bne	r2,zero,8110603c <__reset+0xfb0e603c>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<8;i++) // read byte 1
811060b0:	e03ff715 	stw	zero,-36(fp)
811060b4:	00001a06 	br	81106120 <POWER_SPI_RW+0x39c>
    {
        Value32 <<= 1; //result_1 = rl(result_1);// get ready to load lsb
811060b8:	e0bff517 	ldw	r2,-44(fp)
811060bc:	1085883a 	add	r2,r2,r2
811060c0:	e0bff515 	stw	r2,-44(fp)
        Value32 |= SPI_SDO;//result_1.0 = sdo; // load lsb
811060c4:	00a00034 	movhi	r2,32768
811060c8:	10814c04 	addi	r2,r2,1328
811060cc:	10800037 	ldwio	r2,0(r2)
811060d0:	1080004c 	andi	r2,r2,1
811060d4:	1007883a 	mov	r3,r2
811060d8:	e0bff517 	ldw	r2,-44(fp)
811060dc:	10c4b03a 	or	r2,r2,r3
811060e0:	e0bff515 	stw	r2,-44(fp)
        
        SPI_SCK(1);//sck=1; // clock high
811060e4:	00c00044 	movi	r3,1
811060e8:	00a00034 	movhi	r2,32768
811060ec:	10814404 	addi	r2,r2,1296
811060f0:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
811060f4:	010003c4 	movi	r4,15
811060f8:	11249c40 	call	811249c4 <usleep>
        SPI_SCK(0);//sck=0; // clock low
811060fc:	0007883a 	mov	r3,zero
81106100:	00a00034 	movhi	r2,32768
81106104:	10814404 	addi	r2,r2,1296
81106108:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
8110610c:	010003c4 	movi	r4,15
81106110:	11249c40 	call	811249c4 <usleep>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<8;i++) // read byte 1
81106114:	e0bff717 	ldw	r2,-36(fp)
81106118:	10800044 	addi	r2,r2,1
8110611c:	e0bff715 	stw	r2,-36(fp)
81106120:	e0bff717 	ldw	r2,-36(fp)
81106124:	10800210 	cmplti	r2,r2,8
81106128:	103fe31e 	bne	r2,zero,811060b8 <__reset+0xfb0e60b8>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<6;i++) // read byte 0
8110612c:	e03ff715 	stw	zero,-36(fp)
81106130:	00001a06 	br	8110619c <POWER_SPI_RW+0x418>
    {
        Value32 <<= 1;//result_0 = rl(result_0);// get ready to load lsb
81106134:	e0bff517 	ldw	r2,-44(fp)
81106138:	1085883a 	add	r2,r2,r2
8110613c:	e0bff515 	stw	r2,-44(fp)
        Value32 |= SPI_SDO;//result_0.0 = sdo; // load lsb
81106140:	00a00034 	movhi	r2,32768
81106144:	10814c04 	addi	r2,r2,1328
81106148:	10800037 	ldwio	r2,0(r2)
8110614c:	1080004c 	andi	r2,r2,1
81106150:	1007883a 	mov	r3,r2
81106154:	e0bff517 	ldw	r2,-44(fp)
81106158:	10c4b03a 	or	r2,r2,r3
8110615c:	e0bff515 	stw	r2,-44(fp)
        
        SPI_SCK(1);//sck=1; // clock high
81106160:	00c00044 	movi	r3,1
81106164:	00a00034 	movhi	r2,32768
81106168:	10814404 	addi	r2,r2,1296
8110616c:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81106170:	010003c4 	movi	r4,15
81106174:	11249c40 	call	811249c4 <usleep>
        SPI_SCK(0);//sck=0; // clock low
81106178:	0007883a 	mov	r3,zero
8110617c:	00a00034 	movhi	r2,32768
81106180:	10814404 	addi	r2,r2,1296
81106184:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81106188:	010003c4 	movi	r4,15
8110618c:	11249c40 	call	811249c4 <usleep>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<6;i++) // read byte 0
81106190:	e0bff717 	ldw	r2,-36(fp)
81106194:	10800044 	addi	r2,r2,1
81106198:	e0bff715 	stw	r2,-36(fp)
8110619c:	e0bff717 	ldw	r2,-36(fp)
811061a0:	10800190 	cmplti	r2,r2,6
811061a4:	103fe31e 	bne	r2,zero,81106134 <__reset+0xfb0e6134>
        SPI_SCK(1);//sck=1; // clock high
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    SPI_SCK(1);
811061a8:	00c00044 	movi	r3,1
811061ac:	00a00034 	movhi	r2,32768
811061b0:	10814404 	addi	r2,r2,1296
811061b4:	10c00035 	stwio	r3,0(r2)
    SPI_DELAY;
811061b8:	010003c4 	movi	r4,15
811061bc:	11249c40 	call	811249c4 <usleep>
    SPI_CS_N(IcIndex, 1);  // chip select: inactive
811061c0:	00c000c4 	movi	r3,3
811061c4:	00a00034 	movhi	r2,32768
811061c8:	10814004 	addi	r2,r2,1280
811061cc:	10c00035 	stwio	r3,0(r2)
    
    // check parity
    nZeroCnt = 0;
811061d0:	e03ff915 	stw	zero,-28(fp)
    Mask32 = 0x01;
811061d4:	00800044 	movi	r2,1
811061d8:	e0bff615 	stw	r2,-40(fp)
    for(i=0;i<32;i++){
811061dc:	e03ff715 	stw	zero,-36(fp)
811061e0:	00000d06 	br	81106218 <POWER_SPI_RW+0x494>
        if ((Value32 & Mask32) == 0x00){
811061e4:	e0fff517 	ldw	r3,-44(fp)
811061e8:	e0bff617 	ldw	r2,-40(fp)
811061ec:	1884703a 	and	r2,r3,r2
811061f0:	1000031e 	bne	r2,zero,81106200 <POWER_SPI_RW+0x47c>
            nZeroCnt++;
811061f4:	e0bff917 	ldw	r2,-28(fp)
811061f8:	10800044 	addi	r2,r2,1
811061fc:	e0bff915 	stw	r2,-28(fp)
        }
        Mask32 <<= 1;
81106200:	e0bff617 	ldw	r2,-40(fp)
81106204:	1085883a 	add	r2,r2,r2
81106208:	e0bff615 	stw	r2,-40(fp)
    SPI_CS_N(IcIndex, 1);  // chip select: inactive
    
    // check parity
    nZeroCnt = 0;
    Mask32 = 0x01;
    for(i=0;i<32;i++){
8110620c:	e0bff717 	ldw	r2,-36(fp)
81106210:	10800044 	addi	r2,r2,1
81106214:	e0bff715 	stw	r2,-36(fp)
81106218:	e0bff717 	ldw	r2,-36(fp)
8110621c:	10800810 	cmplti	r2,r2,32
81106220:	103ff01e 	bne	r2,zero,811061e4 <__reset+0xfb0e61e4>
        if ((Value32 & Mask32) == 0x00){
            nZeroCnt++;
        }
        Mask32 <<= 1;
    }
    bSuccess = (nZeroCnt&0x01)?FALSE:TRUE;
81106224:	e0bff917 	ldw	r2,-28(fp)
81106228:	1080004c 	andi	r2,r2,1
8110622c:	1005003a 	cmpeq	r2,r2,zero
81106230:	10803fcc 	andi	r2,r2,255
81106234:	e0bffb15 	stw	r2,-20(fp)
    if (!bSuccess){
81106238:	e0bffb17 	ldw	r2,-20(fp)
8110623c:	1000021e 	bne	r2,zero,81106248 <POWER_SPI_RW+0x4c4>
//        printf("Parity Check Error \r\n");
        return FALSE;
81106240:	0005883a 	mov	r2,zero
81106244:	00000406 	br	81106258 <POWER_SPI_RW+0x4d4>
    }        
    
    
    *pValue = Value32;
81106248:	e0800317 	ldw	r2,12(fp)
8110624c:	e0fff517 	ldw	r3,-44(fp)
81106250:	10c00015 	stw	r3,0(r2)
    
    return bSuccess;
81106254:	e0bffb17 	ldw	r2,-20(fp)
}
81106258:	e037883a 	mov	sp,fp
8110625c:	dfc00117 	ldw	ra,4(sp)
81106260:	df000017 	ldw	fp,0(sp)
81106264:	dec00204 	addi	sp,sp,8
81106268:	f800283a 	ret

8110626c <v_spi_start>:
#define SPI_CS_N(x) IOWR_ALTERA_AVALON_PIO_DATA(RTCC_CS_N_BASE,x)
#define SPI_SDI(x)    IOWR_ALTERA_AVALON_PIO_DATA(RTCC_SDI_BASE,x)
#define SPI_SDO       (IORD_ALTERA_AVALON_PIO_DATA(RTCC_SDO_BASE) & 0x01)
#define SPI_DELAY     usleep(150)  // based on 50MHZ of CPU clock

void v_spi_start(void){
8110626c:	defffe04 	addi	sp,sp,-8
81106270:	de00012e 	bgeu	sp,et,81106278 <v_spi_start+0xc>
81106274:	003b68fa 	trap	3
81106278:	dfc00115 	stw	ra,4(sp)
8110627c:	df000015 	stw	fp,0(sp)
81106280:	d839883a 	mov	fp,sp
    //Pull CS_n Low to start communication
    SPI_SCK(0);
81106284:	0007883a 	mov	r3,zero
81106288:	00a00034 	movhi	r2,32768
8110628c:	10812404 	addi	r2,r2,1168
81106290:	10c00035 	stwio	r3,0(r2)
    SPI_CS_N(0);
81106294:	0007883a 	mov	r3,zero
81106298:	00a00034 	movhi	r2,32768
8110629c:	10812004 	addi	r2,r2,1152
811062a0:	10c00035 	stwio	r3,0(r2)
    SPI_DELAY;
811062a4:	01002584 	movi	r4,150
811062a8:	11249c40 	call	811249c4 <usleep>
}
811062ac:	0001883a 	nop
811062b0:	e037883a 	mov	sp,fp
811062b4:	dfc00117 	ldw	ra,4(sp)
811062b8:	df000017 	ldw	fp,0(sp)
811062bc:	dec00204 	addi	sp,sp,8
811062c0:	f800283a 	ret

811062c4 <v_spi_send_byte>:

void v_spi_send_byte(alt_u8 uc_data){
811062c4:	defffc04 	addi	sp,sp,-16
811062c8:	de00012e 	bgeu	sp,et,811062d0 <v_spi_send_byte+0xc>
811062cc:	003b68fa 	trap	3
811062d0:	dfc00315 	stw	ra,12(sp)
811062d4:	df000215 	stw	fp,8(sp)
811062d8:	df000204 	addi	fp,sp,8
811062dc:	2005883a 	mov	r2,r4
811062e0:	e0bfff05 	stb	r2,-4(fp)

    alt_u8 i = 0;
811062e4:	e03ffe05 	stb	zero,-8(fp)
    alt_u8 uc_data_mask = 0x80;
811062e8:	00bfe004 	movi	r2,-128
811062ec:	e0bffe45 	stb	r2,-7(fp)

    for(i=0;i<8;i++)
811062f0:	e03ffe05 	stb	zero,-8(fp)
811062f4:	00001b06 	br	81106364 <v_spi_send_byte+0xa0>
    {
        SPI_SDI((uc_data & uc_data_mask)?1:0);
811062f8:	e0ffff03 	ldbu	r3,-4(fp)
811062fc:	e0bffe43 	ldbu	r2,-7(fp)
81106300:	1884703a 	and	r2,r3,r2
81106304:	10803fcc 	andi	r2,r2,255
81106308:	1004c03a 	cmpne	r2,r2,zero
8110630c:	10c03fcc 	andi	r3,r2,255
81106310:	00a00034 	movhi	r2,32768
81106314:	10812804 	addi	r2,r2,1184
81106318:	10c00035 	stwio	r3,0(r2)
        uc_data_mask >>= 1;
8110631c:	e0bffe43 	ldbu	r2,-7(fp)
81106320:	1004d07a 	srli	r2,r2,1
81106324:	e0bffe45 	stb	r2,-7(fp)

        SPI_SCK(1);//sck=1; // clock high
81106328:	00c00044 	movi	r3,1
8110632c:	00a00034 	movhi	r2,32768
81106330:	10812404 	addi	r2,r2,1168
81106334:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81106338:	01002584 	movi	r4,150
8110633c:	11249c40 	call	811249c4 <usleep>
        SPI_SCK(0);//sck=0; // clock low
81106340:	0007883a 	mov	r3,zero
81106344:	00a00034 	movhi	r2,32768
81106348:	10812404 	addi	r2,r2,1168
8110634c:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81106350:	01002584 	movi	r4,150
81106354:	11249c40 	call	811249c4 <usleep>
void v_spi_send_byte(alt_u8 uc_data){

    alt_u8 i = 0;
    alt_u8 uc_data_mask = 0x80;

    for(i=0;i<8;i++)
81106358:	e0bffe03 	ldbu	r2,-8(fp)
8110635c:	10800044 	addi	r2,r2,1
81106360:	e0bffe05 	stb	r2,-8(fp)
81106364:	e0bffe03 	ldbu	r2,-8(fp)
81106368:	10800230 	cmpltui	r2,r2,8
8110636c:	103fe21e 	bne	r2,zero,811062f8 <__reset+0xfb0e62f8>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }

}
81106370:	0001883a 	nop
81106374:	e037883a 	mov	sp,fp
81106378:	dfc00117 	ldw	ra,4(sp)
8110637c:	df000017 	ldw	fp,0(sp)
81106380:	dec00204 	addi	sp,sp,8
81106384:	f800283a 	ret

81106388 <uc_spi_get_byte>:

alt_u8 uc_spi_get_byte(void){
81106388:	defffd04 	addi	sp,sp,-12
8110638c:	de00012e 	bgeu	sp,et,81106394 <uc_spi_get_byte+0xc>
81106390:	003b68fa 	trap	3
81106394:	dfc00215 	stw	ra,8(sp)
81106398:	df000115 	stw	fp,4(sp)
8110639c:	df000104 	addi	fp,sp,4

    alt_u8 i = 0;
811063a0:	e03fff05 	stb	zero,-4(fp)
    alt_u8 uc_data = 0;
811063a4:	e03fff45 	stb	zero,-3(fp)

    for(i=0;i<8;i++) // read byte
811063a8:	e03fff05 	stb	zero,-4(fp)
811063ac:	00001a06 	br	81106418 <uc_spi_get_byte+0x90>
    {
        uc_data <<= 1;
811063b0:	e0bfff43 	ldbu	r2,-3(fp)
811063b4:	1085883a 	add	r2,r2,r2
811063b8:	e0bfff45 	stb	r2,-3(fp)
        uc_data |= SPI_SDO;
811063bc:	00a00034 	movhi	r2,32768
811063c0:	10812c04 	addi	r2,r2,1200
811063c4:	10800037 	ldwio	r2,0(r2)
811063c8:	1080004c 	andi	r2,r2,1
811063cc:	1007883a 	mov	r3,r2
811063d0:	e0bfff43 	ldbu	r2,-3(fp)
811063d4:	1884b03a 	or	r2,r3,r2
811063d8:	e0bfff45 	stb	r2,-3(fp)

        SPI_SCK(1);//sck=1; // clock high
811063dc:	00c00044 	movi	r3,1
811063e0:	00a00034 	movhi	r2,32768
811063e4:	10812404 	addi	r2,r2,1168
811063e8:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
811063ec:	01002584 	movi	r4,150
811063f0:	11249c40 	call	811249c4 <usleep>
        SPI_SCK(0);//sck=0; // clock low
811063f4:	0007883a 	mov	r3,zero
811063f8:	00a00034 	movhi	r2,32768
811063fc:	10812404 	addi	r2,r2,1168
81106400:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81106404:	01002584 	movi	r4,150
81106408:	11249c40 	call	811249c4 <usleep>
alt_u8 uc_spi_get_byte(void){

    alt_u8 i = 0;
    alt_u8 uc_data = 0;

    for(i=0;i<8;i++) // read byte
8110640c:	e0bfff03 	ldbu	r2,-4(fp)
81106410:	10800044 	addi	r2,r2,1
81106414:	e0bfff05 	stb	r2,-4(fp)
81106418:	e0bfff03 	ldbu	r2,-4(fp)
8110641c:	10800230 	cmpltui	r2,r2,8
81106420:	103fe31e 	bne	r2,zero,811063b0 <__reset+0xfb0e63b0>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }

    return uc_data;
81106424:	e0bfff43 	ldbu	r2,-3(fp)
}
81106428:	e037883a 	mov	sp,fp
8110642c:	dfc00117 	ldw	ra,4(sp)
81106430:	df000017 	ldw	fp,0(sp)
81106434:	dec00204 	addi	sp,sp,8
81106438:	f800283a 	ret

8110643c <v_spi_end>:

void v_spi_end(void){
8110643c:	defffe04 	addi	sp,sp,-8
81106440:	de00012e 	bgeu	sp,et,81106448 <v_spi_end+0xc>
81106444:	003b68fa 	trap	3
81106448:	dfc00115 	stw	ra,4(sp)
8110644c:	df000015 	stw	fp,0(sp)
81106450:	d839883a 	mov	fp,sp
    //Set CS_n to end communication
    SPI_SCK(0);
81106454:	0007883a 	mov	r3,zero
81106458:	00a00034 	movhi	r2,32768
8110645c:	10812404 	addi	r2,r2,1168
81106460:	10c00035 	stwio	r3,0(r2)
    SPI_DELAY;
81106464:	01002584 	movi	r4,150
81106468:	11249c40 	call	811249c4 <usleep>
    SPI_CS_N(1);
8110646c:	00c00044 	movi	r3,1
81106470:	00a00034 	movhi	r2,32768
81106474:	10812004 	addi	r2,r2,1152
81106478:	10c00035 	stwio	r3,0(r2)
}
8110647c:	0001883a 	nop
81106480:	e037883a 	mov	sp,fp
81106484:	dfc00117 	ldw	ra,4(sp)
81106488:	df000017 	ldw	fp,0(sp)
8110648c:	dec00204 	addi	sp,sp,8
81106490:	f800283a 	ret

81106494 <RTCC_SPI_R_MAC>:

// Note. SCK: typical 19.2KHZ (53 ms)
bool RTCC_SPI_R_MAC(alt_u8 uc_EUI48_array[6])
{
81106494:	defff404 	addi	sp,sp,-48
81106498:	de00012e 	bgeu	sp,et,811064a0 <RTCC_SPI_R_MAC+0xc>
8110649c:	003b68fa 	trap	3
811064a0:	dfc00b15 	stw	ra,44(sp)
811064a4:	df000a15 	stw	fp,40(sp)
811064a8:	df000a04 	addi	fp,sp,40
811064ac:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
811064b0:	e03ff915 	stw	zero,-28(fp)

    alt_u8 uc_EUI48_B0 = 0;
811064b4:	e03ffa05 	stb	zero,-24(fp)
    alt_u8 uc_EUI48_B1 = 0;
811064b8:	e03ffa45 	stb	zero,-23(fp)
    alt_u8 uc_EUI48_B2 = 0;
811064bc:	e03ffa85 	stb	zero,-22(fp)
    alt_u8 uc_EUI48_B3 = 0;
811064c0:	e03ffac5 	stb	zero,-21(fp)
    alt_u8 uc_EUI48_B4 = 0;
811064c4:	e03ffb05 	stb	zero,-20(fp)
    alt_u8 uc_EUI48_B5 = 0;
811064c8:	e03ffb45 	stb	zero,-19(fp)

    alt_u8 uc_sdi_mask;

    const alt_u8 uc_EUI48_B0_addr = 0x02;
811064cc:	00800084 	movi	r2,2
811064d0:	e0bffb85 	stb	r2,-18(fp)
    const alt_u8 uc_EUI48_B1_addr = 0x03;
811064d4:	008000c4 	movi	r2,3
811064d8:	e0bffbc5 	stb	r2,-17(fp)
    const alt_u8 uc_EUI48_B2_addr = 0x04;
811064dc:	00800104 	movi	r2,4
811064e0:	e0bffc05 	stb	r2,-16(fp)
    const alt_u8 uc_EUI48_B3_addr = 0x05;
811064e4:	00800144 	movi	r2,5
811064e8:	e0bffc45 	stb	r2,-15(fp)
    const alt_u8 uc_EUI48_B4_addr = 0x06;
811064ec:	00800184 	movi	r2,6
811064f0:	e0bffc85 	stb	r2,-14(fp)
    const alt_u8 uc_EUI48_B5_addr = 0x07;
811064f4:	008001c4 	movi	r2,7
811064f8:	e0bffcc5 	stb	r2,-13(fp)

    const alt_u8 uc_IDREAD_cmd = 0x33;
811064fc:	00800cc4 	movi	r2,51
81106500:	e0bffd05 	stb	r2,-12(fp)

    int i = 0;
81106504:	e03ffe15 	stw	zero,-8(fp)
    
    // Start Communication
    v_spi_start();
81106508:	110626c0 	call	8110626c <v_spi_start>

    //Send IDREAD (0011 0011)
    v_spi_send_byte(uc_IDREAD_cmd);
8110650c:	e0bffd03 	ldbu	r2,-12(fp)
81106510:	1009883a 	mov	r4,r2
81106514:	11062c40 	call	811062c4 <v_spi_send_byte>

    //Send Address (0x02 - 0x07)
    v_spi_send_byte(uc_EUI48_B0_addr);
81106518:	e0bffb83 	ldbu	r2,-18(fp)
8110651c:	1009883a 	mov	r4,r2
81106520:	11062c40 	call	811062c4 <v_spi_send_byte>

    //Read MAC (EUI-48, 6 bytes)
    uc_EUI48_B0 = uc_spi_get_byte();
81106524:	11063880 	call	81106388 <uc_spi_get_byte>
81106528:	e0bffa05 	stb	r2,-24(fp)
    uc_EUI48_B1 = uc_spi_get_byte();
8110652c:	11063880 	call	81106388 <uc_spi_get_byte>
81106530:	e0bffa45 	stb	r2,-23(fp)
    uc_EUI48_B2 = uc_spi_get_byte();
81106534:	11063880 	call	81106388 <uc_spi_get_byte>
81106538:	e0bffa85 	stb	r2,-22(fp)
    uc_EUI48_B3 = uc_spi_get_byte();
8110653c:	11063880 	call	81106388 <uc_spi_get_byte>
81106540:	e0bffac5 	stb	r2,-21(fp)
    uc_EUI48_B4 = uc_spi_get_byte();
81106544:	11063880 	call	81106388 <uc_spi_get_byte>
81106548:	e0bffb05 	stb	r2,-20(fp)
    uc_EUI48_B5 = uc_spi_get_byte();
8110654c:	11063880 	call	81106388 <uc_spi_get_byte>
81106550:	e0bffb45 	stb	r2,-19(fp)

    // End communication
    v_spi_end();
81106554:	110643c0 	call	8110643c <v_spi_end>

    bSuccess = TRUE;
81106558:	00800044 	movi	r2,1
8110655c:	e0bff915 	stw	r2,-28(fp)
    
    uc_EUI48_array[0] = uc_EUI48_B0;
81106560:	e0bfff17 	ldw	r2,-4(fp)
81106564:	e0fffa03 	ldbu	r3,-24(fp)
81106568:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[1] = uc_EUI48_B1;
8110656c:	e0bfff17 	ldw	r2,-4(fp)
81106570:	10800044 	addi	r2,r2,1
81106574:	e0fffa43 	ldbu	r3,-23(fp)
81106578:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[2] = uc_EUI48_B2;
8110657c:	e0bfff17 	ldw	r2,-4(fp)
81106580:	10800084 	addi	r2,r2,2
81106584:	e0fffa83 	ldbu	r3,-22(fp)
81106588:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[3] = uc_EUI48_B3;
8110658c:	e0bfff17 	ldw	r2,-4(fp)
81106590:	108000c4 	addi	r2,r2,3
81106594:	e0fffac3 	ldbu	r3,-21(fp)
81106598:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[4] = uc_EUI48_B4;
8110659c:	e0bfff17 	ldw	r2,-4(fp)
811065a0:	10800104 	addi	r2,r2,4
811065a4:	e0fffb03 	ldbu	r3,-20(fp)
811065a8:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[5] = uc_EUI48_B5;
811065ac:	e0bfff17 	ldw	r2,-4(fp)
811065b0:	10800144 	addi	r2,r2,5
811065b4:	e0fffb43 	ldbu	r3,-19(fp)
811065b8:	10c00005 	stb	r3,0(r2)

    printf("RTCC EUI-48 MAC Address: 0x%02x:%02x:%02x:%02x:%02x:%02x \n", uc_EUI48_B0, uc_EUI48_B1, uc_EUI48_B2, uc_EUI48_B3, uc_EUI48_B4, uc_EUI48_B5);
811065bc:	e17ffa03 	ldbu	r5,-24(fp)
811065c0:	e1bffa43 	ldbu	r6,-23(fp)
811065c4:	e1fffa83 	ldbu	r7,-22(fp)
811065c8:	e0bffac3 	ldbu	r2,-21(fp)
811065cc:	e0fffb03 	ldbu	r3,-20(fp)
811065d0:	e13ffb43 	ldbu	r4,-19(fp)
811065d4:	d9000215 	stw	r4,8(sp)
811065d8:	d8c00115 	stw	r3,4(sp)
811065dc:	d8800015 	stw	r2,0(sp)
811065e0:	01204534 	movhi	r4,33044
811065e4:	21282a04 	addi	r4,r4,-24408
811065e8:	110f9340 	call	8110f934 <printf>

    return bSuccess;
811065ec:	e0bff917 	ldw	r2,-28(fp)
}
811065f0:	e037883a 	mov	sp,fp
811065f4:	dfc00117 	ldw	ra,4(sp)
811065f8:	df000017 	ldw	fp,0(sp)
811065fc:	dec00204 	addi	sp,sp,8
81106600:	f800283a 	ret

81106604 <bSSDisplayConfig>:
 *
 * @retval TRUE : Sucesso
 * @retval FALSE : Configuração não especificada
 *
 */
bool bSSDisplayConfig(alt_u8 SsdpConfig){
81106604:	defffd04 	addi	sp,sp,-12
81106608:	de00012e 	bgeu	sp,et,81106610 <bSSDisplayConfig+0xc>
8110660c:	003b68fa 	trap	3
81106610:	df000215 	stw	fp,8(sp)
81106614:	df000204 	addi	fp,sp,8
81106618:	2005883a 	mov	r2,r4
8110661c:	e0bfff05 	stb	r2,-4(fp)

    switch(SsdpConfig){
81106620:	e0bfff03 	ldbu	r2,-4(fp)
81106624:	10c00168 	cmpgeui	r3,r2,5
81106628:	18001c1e 	bne	r3,zero,8110669c <bSSDisplayConfig+0x98>
8110662c:	100690ba 	slli	r3,r2,2
81106630:	00a04434 	movhi	r2,33040
81106634:	10999104 	addi	r2,r2,26180
81106638:	1885883a 	add	r2,r3,r2
8110663c:	10800017 	ldw	r2,0(r2)
81106640:	1000683a 	jmp	r2
81106644:	81106658 	cmpnei	r4,r16,16793
81106648:	81106664 	muli	r4,r16,16793
8110664c:	81106670 	cmpltui	r4,r16,16793
81106650:	81106684 	addi	r4,r16,16794
81106654:	81106694 	ori	r4,r16,16794
	    case SSDP_NORMAL_MODE:
	        SspdConfigControl = (SSDP_ON_MASK | SSDP_UNLOCK_MASK);
81106658:	00800cc4 	movi	r2,51
8110665c:	d0a05205 	stb	r2,-32440(gp)
	    break;
81106660:	00001006 	br	811066a4 <bSSDisplayConfig+0xa0>
		
	    case SSDP_TEST_MODE:
	        SspdConfigControl = (SSDP_ON_MASK | SSDP_TEST_MASK);
81106664:	00801544 	movi	r2,85
81106668:	d0a05205 	stb	r2,-32440(gp)
	    break;
8110666c:	00000d06 	br	811066a4 <bSSDisplayConfig+0xa0>
		
	    case SSDP_LOCK:
	        SspdConfigControl &= (~SSDP_UNLOCK_MASK);
81106670:	d0e05203 	ldbu	r3,-32440(gp)
81106674:	00bff744 	movi	r2,-35
81106678:	1884703a 	and	r2,r3,r2
8110667c:	d0a05205 	stb	r2,-32440(gp)
	    break;
81106680:	00000806 	br	811066a4 <bSSDisplayConfig+0xa0>
		
	    case SSDP_UNLOCK:
	        SspdConfigControl |= SSDP_UNLOCK_MASK;
81106684:	d0a05203 	ldbu	r2,-32440(gp)
81106688:	10800894 	ori	r2,r2,34
8110668c:	d0a05205 	stb	r2,-32440(gp)
	    break;
81106690:	00000406 	br	811066a4 <bSSDisplayConfig+0xa0>
		
	    case SSDP_OFF:
	        SspdConfigControl = SSDP_OFF_MASK;
81106694:	d0205205 	stb	zero,-32440(gp)
	    break;
81106698:	00000206 	br	811066a4 <bSSDisplayConfig+0xa0>
		
		default:
		    return FALSE;
8110669c:	0005883a 	mov	r2,zero
811066a0:	00000806 	br	811066c4 <bSSDisplayConfig+0xc0>
	}

	alt_u32 *pSsdpAddr = SSDP_BASE;
811066a4:	00a00034 	movhi	r2,32768
811066a8:	10817c04 	addi	r2,r2,1520
811066ac:	e0bffe15 	stw	r2,-8(fp)
	*(pSsdpAddr + SSDP_CONTROL_REG_OFFSET) = (alt_u32) SspdConfigControl;
811066b0:	d0a05203 	ldbu	r2,-32440(gp)
811066b4:	10c03fcc 	andi	r3,r2,255
811066b8:	e0bffe17 	ldw	r2,-8(fp)
811066bc:	10c00015 	stw	r3,0(r2)
	
	return TRUE;
811066c0:	00800044 	movi	r2,1
}
811066c4:	e037883a 	mov	sp,fp
811066c8:	df000017 	ldw	fp,0(sp)
811066cc:	dec00104 	addi	sp,sp,4
811066d0:	f800283a 	ret

811066d4 <bSSDisplayUpdate>:
 * @param [in] SsdpData Dado a ser colocado no display de sete segmentos, do tipo unsigned char (alt_u8)
 *
 * @retval TRUE : Sucesso
 *
 */
bool bSSDisplayUpdate(alt_u8 SsdpData){
811066d4:	defffd04 	addi	sp,sp,-12
811066d8:	de00012e 	bgeu	sp,et,811066e0 <bSSDisplayUpdate+0xc>
811066dc:	003b68fa 	trap	3
811066e0:	df000215 	stw	fp,8(sp)
811066e4:	df000204 	addi	fp,sp,8
811066e8:	2005883a 	mov	r2,r4
811066ec:	e0bfff05 	stb	r2,-4(fp)

	alt_u32 *pSsdpAddr = SSDP_BASE;
811066f0:	00a00034 	movhi	r2,32768
811066f4:	10817c04 	addi	r2,r2,1520
811066f8:	e0bffe15 	stw	r2,-8(fp)
	*(pSsdpAddr + SSDP_DATA_REG_OFFSET) = (alt_u32) SsdpData;
811066fc:	e0bffe17 	ldw	r2,-8(fp)
81106700:	10800104 	addi	r2,r2,4
81106704:	e0ffff03 	ldbu	r3,-4(fp)
81106708:	10c00015 	stw	r3,0(r2)
	
	return TRUE;
8110670c:	00800044 	movi	r2,1
}
81106710:	e037883a 	mov	sp,fp
81106714:	df000017 	ldw	fp,0(sp)
81106718:	dec00104 	addi	sp,sp,4
8110671c:	f800283a 	ret

81106720 <vFeeTask>:

#include "fee_task.h"



void vFeeTask(void *task_data) {
81106720:	defffd04 	addi	sp,sp,-12
81106724:	de00012e 	bgeu	sp,et,8110672c <vFeeTask+0xc>
81106728:	003b68fa 	trap	3
8110672c:	df000215 	stw	fp,8(sp)
81106730:	df000204 	addi	fp,sp,8
81106734:	e13fff15 	stw	r4,-4(fp)
	tFEEStates eFeeState;
	bool bSuccess = FALSE;
81106738:	e03ffe15 	stw	zero,-8(fp)

		// Check sync ?
			// mudar de estado se isso estiver agendado


}
8110673c:	0001883a 	nop
81106740:	e037883a 	mov	sp,fp
81106744:	df000017 	ldw	fp,0(sp)
81106748:	dec00104 	addi	sp,sp,4
8110674c:	f800283a 	ret

81106750 <vInAckHandlerTask>:


#include "in_ack_handler_task.h"


void vInAckHandlerTask(void *task_data) {
81106750:	defff704 	addi	sp,sp,-36
81106754:	de00012e 	bgeu	sp,et,8110675c <vInAckHandlerTask+0xc>
81106758:	003b68fa 	trap	3
8110675c:	dfc00815 	stw	ra,32(sp)
81106760:	df000715 	stw	fp,28(sp)
81106764:	df000704 	addi	fp,sp,28
81106768:	e13fff15 	stw	r4,-4(fp)

	bool bFound = FALSE;
8110676c:	e03ff915 	stw	zero,-28(fp)
    bool bFinished32 = FALSE;
81106770:	e03ffa15 	stw	zero,-24(fp)
    bool bFinished64 = FALSE;
81106774:	e03ffb15 	stw	zero,-20(fp)
    bool bFinished128 = FALSE;
81106778:	e03ffc15 	stw	zero,-16(fp)
	INT8U error_code;
    INT8U ucReturnMutex;
	tReceiverACKState eReceiverAckState;
	static txReceivedACK xRAckLocal;
    unsigned char ucCountRetries = 0;
8110677c:	e03ffe05 	stb	zero,-8(fp)
    unsigned char i = 0;
81106780:	e03ffe45 	stb	zero,-7(fp)

	#ifdef DEBUG_ON
		debug(fp,"vReceiverAckTask, enter task.\n");
81106784:	d0a05a17 	ldw	r2,-32408(gp)
81106788:	100f883a 	mov	r7,r2
8110678c:	01800784 	movi	r6,30
81106790:	01400044 	movi	r5,1
81106794:	01204534 	movhi	r4,33044
81106798:	21283904 	addi	r4,r4,-24348
8110679c:	110ec080 	call	8110ec08 <fwrite>
	#endif

	eReceiverAckState = sRAConfiguring;
811067a0:	e03ffd15 	stw	zero,-12(fp)

	for(;;){

		switch (eReceiverAckState) {
811067a4:	e0bffd17 	ldw	r2,-12(fp)
811067a8:	10c00060 	cmpeqi	r3,r2,1
811067ac:	1800071e 	bne	r3,zero,811067cc <vInAckHandlerTask+0x7c>
811067b0:	0080032e 	bgeu	zero,r2,811067c0 <vInAckHandlerTask+0x70>
811067b4:	108000a0 	cmpeqi	r2,r2,2
811067b8:	10005a1e 	bne	r2,zero,81106924 <vInAckHandlerTask+0x1d4>
                    vFailFoundBufferRetransmission();
                }
                eReceiverAckState = sRAGettingACK;
				break;
			default:
				break;
811067bc:	00012506 	br	81106c54 <vInAckHandlerTask+0x504>
	for(;;){

		switch (eReceiverAckState) {
			case sRAConfiguring:
                /*For future implementations*/
                eReceiverAckState = sRAGettingACK;
811067c0:	00800044 	movi	r2,1
811067c4:	e0bffd15 	stw	r2,-12(fp)
				break;
811067c8:	00012206 	br	81106c54 <vInAckHandlerTask+0x504>
            case sRAGettingACK:
                /* Waits the semaphore that indicates there are some ack message was received*/
                OSSemPend(xSemCountReceivedACK, 0, &error_code);
811067cc:	d0a05e17 	ldw	r2,-32392(gp)
811067d0:	e0fffec4 	addi	r3,fp,-5
811067d4:	180d883a 	mov	r6,r3
811067d8:	000b883a 	mov	r5,zero
811067dc:	1009883a 	mov	r4,r2
811067e0:	112b8400 	call	8112b840 <OSSemPend>
                if ( error_code == OS_ERR_NONE ) {
811067e4:	e0bffec3 	ldbu	r2,-5(fp)
811067e8:	10803fcc 	andi	r2,r2,255
811067ec:	10004b1e 	bne	r2,zero,8110691c <vInAckHandlerTask+0x1cc>

                    OSMutexPend(xMutexReceivedACK, 0, &error_code);
811067f0:	d0a05d17 	ldw	r2,-32396(gp)
811067f4:	e0fffec4 	addi	r3,fp,-5
811067f8:	180d883a 	mov	r6,r3
811067fc:	000b883a 	mov	r5,zero
81106800:	1009883a 	mov	r4,r2
81106804:	11298340 	call	81129834 <OSMutexPend>
                    if ( error_code == OS_ERR_NONE ) {
81106808:	e0bffec3 	ldbu	r2,-5(fp)
8110680c:	10803fcc 	andi	r2,r2,255
81106810:	1000401e 	bne	r2,zero,81106914 <vInAckHandlerTask+0x1c4>

                        /*Search for the ack*/
                        for(i = 0; i < N_ACKS_RECEIVED; i++)
81106814:	e03ffe45 	stb	zero,-7(fp)
81106818:	00003706 	br	811068f8 <vInAckHandlerTask+0x1a8>
                        {
                            
                            if ( xReceivedACK[i].cType != 0 ) {
8110681c:	e0fffe43 	ldbu	r3,-7(fp)
81106820:	00a045b4 	movhi	r2,33046
81106824:	10baeb04 	addi	r2,r2,-5204
81106828:	18c7883a 	add	r3,r3,r3
8110682c:	18c7883a 	add	r3,r3,r3
81106830:	10c5883a 	add	r2,r2,r3
81106834:	10800003 	ldbu	r2,0(r2)
81106838:	10803fcc 	andi	r2,r2,255
8110683c:	1080201c 	xori	r2,r2,128
81106840:	10bfe004 	addi	r2,r2,-128
81106844:	10002926 	beq	r2,zero,811068ec <vInAckHandlerTask+0x19c>

                                /*  Is it a NACK? */
                                if ( xReceivedACK[i].cType != NACK_CHAR ) {
81106848:	e0fffe43 	ldbu	r3,-7(fp)
8110684c:	00a045b4 	movhi	r2,33046
81106850:	10baeb04 	addi	r2,r2,-5204
81106854:	18c7883a 	add	r3,r3,r3
81106858:	18c7883a 	add	r3,r3,r3
8110685c:	10c5883a 	add	r2,r2,r3
81106860:	10800003 	ldbu	r2,0(r2)
81106864:	10803fcc 	andi	r2,r2,255
81106868:	1080201c 	xori	r2,r2,128
8110686c:	10bfe004 	addi	r2,r2,-128
81106870:	108008e0 	cmpeqi	r2,r2,35
81106874:	10000d1e 	bne	r2,zero,811068ac <vInAckHandlerTask+0x15c>
                                    /* Locate the message, copy for the local variable in order to free the mutex. */
                                    xRAckLocal = xReceivedACK[i];
81106878:	e0fffe43 	ldbu	r3,-7(fp)
8110687c:	00a045b4 	movhi	r2,33046
81106880:	10baeb04 	addi	r2,r2,-5204
81106884:	18c7883a 	add	r3,r3,r3
81106888:	18c7883a 	add	r3,r3,r3
8110688c:	10c5883a 	add	r2,r2,r3
81106890:	10c0000b 	ldhu	r3,0(r2)
81106894:	d0e0528d 	sth	r3,-32438(gp)
81106898:	1080008b 	ldhu	r2,2(r2)
8110689c:	d0a0530d 	sth	r2,-32436(gp)
                                    eReceiverAckState = sRACleanningBuffer;
811068a0:	00800084 	movi	r2,2
811068a4:	e0bffd15 	stw	r2,-12(fp)
                                    break;
811068a8:	00001606 	br	81106904 <vInAckHandlerTask+0x1b4>
                                } else {
                                    /*  Yes is a NACK, do nothing. The packet will be retransmited after timeout, since we can't know which message
                                        was not transmited, is too much expensive retransmit all "waiting ack" packets. So, do nothing, excet clear the pipe buffer*/
                                    #ifdef DEBUG_ON
                                        debug(fp,"NACK received.");
811068ac:	d0a05a17 	ldw	r2,-32408(gp)
811068b0:	100f883a 	mov	r7,r2
811068b4:	01800384 	movi	r6,14
811068b8:	01400044 	movi	r5,1
811068bc:	01204534 	movhi	r4,33044
811068c0:	21284104 	addi	r4,r4,-24316
811068c4:	110ec080 	call	8110ec08 <fwrite>
                                    #endif
                                    eReceiverAckState = sRAGettingACK;
811068c8:	00800044 	movi	r2,1
811068cc:	e0bffd15 	stw	r2,-12(fp)
                                }
                                xReceivedACK[i].cType = 0; /* indicates that this position now can be used by other message*/
811068d0:	e0fffe43 	ldbu	r3,-7(fp)
811068d4:	00a045b4 	movhi	r2,33046
811068d8:	10baeb04 	addi	r2,r2,-5204
811068dc:	18c7883a 	add	r3,r3,r3
811068e0:	18c7883a 	add	r3,r3,r3
811068e4:	10c5883a 	add	r2,r2,r3
811068e8:	10000005 	stb	zero,0(r2)

                    OSMutexPend(xMutexReceivedACK, 0, &error_code);
                    if ( error_code == OS_ERR_NONE ) {

                        /*Search for the ack*/
                        for(i = 0; i < N_ACKS_RECEIVED; i++)
811068ec:	e0bffe43 	ldbu	r2,-7(fp)
811068f0:	10800044 	addi	r2,r2,1
811068f4:	e0bffe45 	stb	r2,-7(fp)
811068f8:	e0bffe43 	ldbu	r2,-7(fp)
811068fc:	10800130 	cmpltui	r2,r2,4
81106900:	103fc61e 	bne	r2,zero,8110681c <__reset+0xfb0e681c>
                                }
                                xReceivedACK[i].cType = 0; /* indicates that this position now can be used by other message*/
                            }

                        }
                        OSMutexPost(xMutexReceivedACK);
81106904:	d0a05d17 	ldw	r2,-32396(gp)
81106908:	1009883a 	mov	r4,r2
8110690c:	1129dd80 	call	81129dd8 <OSMutexPost>
                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreReceiverTask();
                }
                break;
81106910:	0000d006 	br	81106c54 <vInAckHandlerTask+0x504>
                        }
                        OSMutexPost(xMutexReceivedACK);
                    } else {
                        /*  Should never get here, will wait without timeout for the semaphore.
                            But if some error accours we will do nothing but print in the console */
                        vFailGetMutexReceiverTask();
81106914:	110b2080 	call	8110b208 <vFailGetMutexReceiverTask>
                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreReceiverTask();
                }
                break;
81106918:	0000ce06 	br	81106c54 <vInAckHandlerTask+0x504>
                    }

                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreReceiverTask();
8110691c:	110b1a00 	call	8110b1a0 <vFailGetCountSemaphoreReceiverTask>
                }
                break;
81106920:	0000cc06 	br	81106c54 <vInAckHandlerTask+0x504>
			case sRACleanningBuffer:
                /* Now a search will be performed in the three output buffer in order to find
                   the (re)transmission buffer identified by the id and erase it. */

                bFound = FALSE;
81106924:	e03ff915 	stw	zero,-28(fp)
                bFinished32=FALSE;
81106928:	e03ffa15 	stw	zero,-24(fp)
                bFinished64=FALSE;
8110692c:	e03ffb15 	stw	zero,-20(fp)
                bFinished128=FALSE;
81106930:	e03ffc15 	stw	zero,-16(fp)
                ucCountRetries = 0;
81106934:	e03ffe05 	stb	zero,-8(fp)
                /* The mutex will not be blocking, so it will try for five times search in the three (re)transmission buffer */
                while ( ( bFound == FALSE ) && ( ucCountRetries < 6 ) && ( (bFinished32==FALSE) || (bFinished64==FALSE) ||(bFinished128==FALSE) ) ) {
81106938:	0000b506 	br	81106c10 <vInAckHandlerTask+0x4c0>

                    if ( (bFound == FALSE) && (bFinished32 == FALSE) ) {
8110693c:	e0bff917 	ldw	r2,-28(fp)
81106940:	1000361e 	bne	r2,zero,81106a1c <vInAckHandlerTask+0x2cc>
81106944:	e0bffa17 	ldw	r2,-24(fp)
81106948:	1000341e 	bne	r2,zero,81106a1c <vInAckHandlerTask+0x2cc>
                        /* Search in three (re)transmission buffer for the id*/
                        ucReturnMutex = OSMutexAccept(xMutexBuffer32, &error_code); /* Just check the the mutex (non blocking) */
8110694c:	d0a06217 	ldw	r2,-32376(gp)
81106950:	e0fffec4 	addi	r3,fp,-5
81106954:	180b883a 	mov	r5,r3
81106958:	1009883a 	mov	r4,r2
8110695c:	11291b40 	call	811291b4 <OSMutexAccept>
81106960:	e0bffe85 	stb	r2,-6(fp)
                        if ( ucReturnMutex != 0 ) { /* Returning zero = Mutex not available */
81106964:	e0bffe83 	ldbu	r2,-6(fp)
81106968:	10002c26 	beq	r2,zero,81106a1c <vInAckHandlerTask+0x2cc>
                            /*Search for the id*/
                            for(i = 0; i < N_32; i++)
8110696c:	e03ffe45 	stb	zero,-7(fp)
81106970:	00002306 	br	81106a00 <vInAckHandlerTask+0x2b0>
                            {
                                if ( xBuffer32[i].usiId == xRAckLocal.usiId ) {
81106974:	e0fffe43 	ldbu	r3,-7(fp)
81106978:	00a045b4 	movhi	r2,33046
8110697c:	10a25c04 	addi	r2,r2,-30352
81106980:	18c009a4 	muli	r3,r3,38
81106984:	10c5883a 	add	r2,r2,r3
81106988:	10800804 	addi	r2,r2,32
8110698c:	10c0000b 	ldhu	r3,0(r2)
81106990:	d0a0530b 	ldhu	r2,-32436(gp)
81106994:	18ffffcc 	andi	r3,r3,65535
81106998:	10bfffcc 	andi	r2,r2,65535
8110699c:	1880151e 	bne	r3,r2,811069f4 <vInAckHandlerTask+0x2a4>
                                    /* Free the buffer and indicate by setting usiId to Zero. Post in the count semaphore to indicate
                                    that is an free position in the (re)trasmission buffer. */
                                    xBuffer32[i].usiId = 0;
811069a0:	e0fffe43 	ldbu	r3,-7(fp)
811069a4:	00a045b4 	movhi	r2,33046
811069a8:	10a25c04 	addi	r2,r2,-30352
811069ac:	18c009a4 	muli	r3,r3,38
811069b0:	10c5883a 	add	r2,r2,r3
811069b4:	10800804 	addi	r2,r2,32
811069b8:	1000000d 	sth	zero,0(r2)
                                    OSMutexPost(xMutexBuffer32); /* Free the Mutex after use the xBuffer32*/
811069bc:	d0a06217 	ldw	r2,-32376(gp)
811069c0:	1009883a 	mov	r4,r2
811069c4:	1129dd80 	call	81129dd8 <OSMutexPost>
                                    bFound = TRUE;
811069c8:	00800044 	movi	r2,1
811069cc:	e0bff915 	stw	r2,-28(fp)
                                    error_code = OSSemPost(xSemCountBuffer32);
811069d0:	d0a06517 	ldw	r2,-32364(gp)
811069d4:	1009883a 	mov	r4,r2
811069d8:	112bbc80 	call	8112bbc8 <OSSemPost>
811069dc:	e0bffec5 	stb	r2,-5(fp)
                                    if ( error_code != OS_ERR_NONE ) {
811069e0:	e0bffec3 	ldbu	r2,-5(fp)
811069e4:	10803fcc 	andi	r2,r2,255
811069e8:	10000926 	beq	r2,zero,81106a10 <vInAckHandlerTask+0x2c0>
                                        vFailSetCountSemaphorexBuffer32();
811069ec:	110b4540 	call	8110b454 <vFailSetCountSemaphorexBuffer32>
                                    }
                                    break;
811069f0:	00000706 	br	81106a10 <vInAckHandlerTask+0x2c0>
                    if ( (bFound == FALSE) && (bFinished32 == FALSE) ) {
                        /* Search in three (re)transmission buffer for the id*/
                        ucReturnMutex = OSMutexAccept(xMutexBuffer32, &error_code); /* Just check the the mutex (non blocking) */
                        if ( ucReturnMutex != 0 ) { /* Returning zero = Mutex not available */
                            /*Search for the id*/
                            for(i = 0; i < N_32; i++)
811069f4:	e0bffe43 	ldbu	r2,-7(fp)
811069f8:	10800044 	addi	r2,r2,1
811069fc:	e0bffe45 	stb	r2,-7(fp)
81106a00:	e0bffe43 	ldbu	r2,-7(fp)
81106a04:	10800230 	cmpltui	r2,r2,8
81106a08:	103fda1e 	bne	r2,zero,81106974 <__reset+0xfb0e6974>
81106a0c:	00000106 	br	81106a14 <vInAckHandlerTask+0x2c4>
                                    bFound = TRUE;
                                    error_code = OSSemPost(xSemCountBuffer32);
                                    if ( error_code != OS_ERR_NONE ) {
                                        vFailSetCountSemaphorexBuffer32();
                                    }
                                    break;
81106a10:	0001883a 	nop
                                }
                            }
                            bFinished32 = TRUE;
81106a14:	00800044 	movi	r2,1
81106a18:	e0bffa15 	stw	r2,-24(fp)
                        }
                    }


                    if ( (bFound == FALSE) && (bFinished64 == FALSE) ) {
81106a1c:	e0bff917 	ldw	r2,-28(fp)
81106a20:	1000361e 	bne	r2,zero,81106afc <vInAckHandlerTask+0x3ac>
81106a24:	e0bffb17 	ldw	r2,-20(fp)
81106a28:	1000341e 	bne	r2,zero,81106afc <vInAckHandlerTask+0x3ac>
                        /* Search in three (re)transmission buffer for the id*/
                        ucReturnMutex = OSMutexAccept(xMutexBuffer64, &error_code); /* Just check the the mutex (non blocking) */
81106a2c:	d0a06617 	ldw	r2,-32360(gp)
81106a30:	e0fffec4 	addi	r3,fp,-5
81106a34:	180b883a 	mov	r5,r3
81106a38:	1009883a 	mov	r4,r2
81106a3c:	11291b40 	call	811291b4 <OSMutexAccept>
81106a40:	e0bffe85 	stb	r2,-6(fp)
                        if ( ucReturnMutex != 0 ) { /* Returning zero = Mutex not available */
81106a44:	e0bffe83 	ldbu	r2,-6(fp)
81106a48:	10002c26 	beq	r2,zero,81106afc <vInAckHandlerTask+0x3ac>
                            /*Search for the id*/
                            for(i = 0; i < N_64; i++)
81106a4c:	e03ffe45 	stb	zero,-7(fp)
81106a50:	00002306 	br	81106ae0 <vInAckHandlerTask+0x390>
                            {
                                if ( xBuffer64[i].usiId == xRAckLocal.usiId ) {
81106a54:	e0fffe43 	ldbu	r3,-7(fp)
81106a58:	00a04574 	movhi	r2,33045
81106a5c:	1090ff04 	addi	r2,r2,17404
81106a60:	18c011a4 	muli	r3,r3,70
81106a64:	10c5883a 	add	r2,r2,r3
81106a68:	10801004 	addi	r2,r2,64
81106a6c:	10c0000b 	ldhu	r3,0(r2)
81106a70:	d0a0530b 	ldhu	r2,-32436(gp)
81106a74:	18ffffcc 	andi	r3,r3,65535
81106a78:	10bfffcc 	andi	r2,r2,65535
81106a7c:	1880151e 	bne	r3,r2,81106ad4 <vInAckHandlerTask+0x384>
                                    /* Free the buffer and indicate by setting usiId to Zero. Post in the count semaphore to indicate
                                    that is an free position in the (re)trasmission buffer. */
                                    xBuffer64[i].usiId = 0;
81106a80:	e0fffe43 	ldbu	r3,-7(fp)
81106a84:	00a04574 	movhi	r2,33045
81106a88:	1090ff04 	addi	r2,r2,17404
81106a8c:	18c011a4 	muli	r3,r3,70
81106a90:	10c5883a 	add	r2,r2,r3
81106a94:	10801004 	addi	r2,r2,64
81106a98:	1000000d 	sth	zero,0(r2)
                                    OSMutexPost(xMutexBuffer64); /* Free the Mutex after use the xBuffer64*/
81106a9c:	d0a06617 	ldw	r2,-32360(gp)
81106aa0:	1009883a 	mov	r4,r2
81106aa4:	1129dd80 	call	81129dd8 <OSMutexPost>
                                    bFound = TRUE;
81106aa8:	00800044 	movi	r2,1
81106aac:	e0bff915 	stw	r2,-28(fp)
                                    error_code = OSSemPost(xSemCountBuffer64);
81106ab0:	d0a05717 	ldw	r2,-32420(gp)
81106ab4:	1009883a 	mov	r4,r2
81106ab8:	112bbc80 	call	8112bbc8 <OSSemPost>
81106abc:	e0bffec5 	stb	r2,-5(fp)
                                    if ( error_code != OS_ERR_NONE ) {
81106ac0:	e0bffec3 	ldbu	r2,-5(fp)
81106ac4:	10803fcc 	andi	r2,r2,255
81106ac8:	10000926 	beq	r2,zero,81106af0 <vInAckHandlerTask+0x3a0>
                                        vFailSetCountSemaphorexBuffer64();
81106acc:	110b4bc0 	call	8110b4bc <vFailSetCountSemaphorexBuffer64>
                                    }
                                    break;
81106ad0:	00000706 	br	81106af0 <vInAckHandlerTask+0x3a0>
                    if ( (bFound == FALSE) && (bFinished64 == FALSE) ) {
                        /* Search in three (re)transmission buffer for the id*/
                        ucReturnMutex = OSMutexAccept(xMutexBuffer64, &error_code); /* Just check the the mutex (non blocking) */
                        if ( ucReturnMutex != 0 ) { /* Returning zero = Mutex not available */
                            /*Search for the id*/
                            for(i = 0; i < N_64; i++)
81106ad4:	e0bffe43 	ldbu	r2,-7(fp)
81106ad8:	10800044 	addi	r2,r2,1
81106adc:	e0bffe45 	stb	r2,-7(fp)
81106ae0:	e0bffe43 	ldbu	r2,-7(fp)
81106ae4:	10800130 	cmpltui	r2,r2,4
81106ae8:	103fda1e 	bne	r2,zero,81106a54 <__reset+0xfb0e6a54>
81106aec:	00000106 	br	81106af4 <vInAckHandlerTask+0x3a4>
                                    bFound = TRUE;
                                    error_code = OSSemPost(xSemCountBuffer64);
                                    if ( error_code != OS_ERR_NONE ) {
                                        vFailSetCountSemaphorexBuffer64();
                                    }
                                    break;
81106af0:	0001883a 	nop
                                }
                            }
                            bFinished64 = TRUE;
81106af4:	00800044 	movi	r2,1
81106af8:	e0bffb15 	stw	r2,-20(fp)
                        }
                    }

                    if ( (bFound == FALSE) && (bFinished128 == FALSE) ) {
81106afc:	e0bff917 	ldw	r2,-28(fp)
81106b00:	1000361e 	bne	r2,zero,81106bdc <vInAckHandlerTask+0x48c>
81106b04:	e0bffc17 	ldw	r2,-16(fp)
81106b08:	1000341e 	bne	r2,zero,81106bdc <vInAckHandlerTask+0x48c>
                        /* Search in three (re)transmission buffer for the id*/
                        ucReturnMutex = OSMutexAccept(xMutexBuffer128, &error_code); /* Just check the the mutex (non blocking) */
81106b0c:	d0a06417 	ldw	r2,-32368(gp)
81106b10:	e0fffec4 	addi	r3,fp,-5
81106b14:	180b883a 	mov	r5,r3
81106b18:	1009883a 	mov	r4,r2
81106b1c:	11291b40 	call	811291b4 <OSMutexAccept>
81106b20:	e0bffe85 	stb	r2,-6(fp)
                        if ( ucReturnMutex != 0 ) { /* Returning zero = Mutex not available */
81106b24:	e0bffe83 	ldbu	r2,-6(fp)
81106b28:	10002c26 	beq	r2,zero,81106bdc <vInAckHandlerTask+0x48c>
                            /*Search for the id*/
                            for(i = 0; i < N_128; i++)
81106b2c:	e03ffe45 	stb	zero,-7(fp)
81106b30:	00002306 	br	81106bc0 <vInAckHandlerTask+0x470>
                            {
                                if ( xBuffer128[i].usiId == xRAckLocal.usiId ) {
81106b34:	e0fffe43 	ldbu	r3,-7(fp)
81106b38:	00a045b4 	movhi	r2,33046
81106b3c:	10baa804 	addi	r2,r2,-5472
81106b40:	18c021a4 	muli	r3,r3,134
81106b44:	10c5883a 	add	r2,r2,r3
81106b48:	10802004 	addi	r2,r2,128
81106b4c:	10c0000b 	ldhu	r3,0(r2)
81106b50:	d0a0530b 	ldhu	r2,-32436(gp)
81106b54:	18ffffcc 	andi	r3,r3,65535
81106b58:	10bfffcc 	andi	r2,r2,65535
81106b5c:	1880151e 	bne	r3,r2,81106bb4 <vInAckHandlerTask+0x464>
                                    /* Free the buffer and indicate by setting usiId to Zero. Post in the count semaphore to indicate
                                    that is an free position in the (re)trasmission buffer. */
                                    xBuffer128[i].usiId = 0;
81106b60:	e0fffe43 	ldbu	r3,-7(fp)
81106b64:	00a045b4 	movhi	r2,33046
81106b68:	10baa804 	addi	r2,r2,-5472
81106b6c:	18c021a4 	muli	r3,r3,134
81106b70:	10c5883a 	add	r2,r2,r3
81106b74:	10802004 	addi	r2,r2,128
81106b78:	1000000d 	sth	zero,0(r2)
                                    OSMutexPost(xMutexBuffer128); /* Free the Mutex after use the xBuffer128*/
81106b7c:	d0a06417 	ldw	r2,-32368(gp)
81106b80:	1009883a 	mov	r4,r2
81106b84:	1129dd80 	call	81129dd8 <OSMutexPost>
                                    bFound = TRUE;
81106b88:	00800044 	movi	r2,1
81106b8c:	e0bff915 	stw	r2,-28(fp)
                                    error_code = OSSemPost(xSemCountBuffer128);
81106b90:	d0a05b17 	ldw	r2,-32404(gp)
81106b94:	1009883a 	mov	r4,r2
81106b98:	112bbc80 	call	8112bbc8 <OSSemPost>
81106b9c:	e0bffec5 	stb	r2,-5(fp)
                                    if ( error_code != OS_ERR_NONE ) {
81106ba0:	e0bffec3 	ldbu	r2,-5(fp)
81106ba4:	10803fcc 	andi	r2,r2,255
81106ba8:	10000926 	beq	r2,zero,81106bd0 <vInAckHandlerTask+0x480>
                                        vFailSetCountSemaphorexBuffer128();
81106bac:	110b5240 	call	8110b524 <vFailSetCountSemaphorexBuffer128>
                                    }
                                    break;
81106bb0:	00000706 	br	81106bd0 <vInAckHandlerTask+0x480>
                    if ( (bFound == FALSE) && (bFinished128 == FALSE) ) {
                        /* Search in three (re)transmission buffer for the id*/
                        ucReturnMutex = OSMutexAccept(xMutexBuffer128, &error_code); /* Just check the the mutex (non blocking) */
                        if ( ucReturnMutex != 0 ) { /* Returning zero = Mutex not available */
                            /*Search for the id*/
                            for(i = 0; i < N_128; i++)
81106bb4:	e0bffe43 	ldbu	r2,-7(fp)
81106bb8:	10800044 	addi	r2,r2,1
81106bbc:	e0bffe45 	stb	r2,-7(fp)
81106bc0:	e0bffe43 	ldbu	r2,-7(fp)
81106bc4:	108000b0 	cmpltui	r2,r2,2
81106bc8:	103fda1e 	bne	r2,zero,81106b34 <__reset+0xfb0e6b34>
81106bcc:	00000106 	br	81106bd4 <vInAckHandlerTask+0x484>
                                    bFound = TRUE;
                                    error_code = OSSemPost(xSemCountBuffer128);
                                    if ( error_code != OS_ERR_NONE ) {
                                        vFailSetCountSemaphorexBuffer128();
                                    }
                                    break;
81106bd0:	0001883a 	nop
                                }
                            }
                            bFinished128 = TRUE;
81106bd4:	00800044 	movi	r2,1
81106bd8:	e0bffc15 	stw	r2,-16(fp)
                        }
                    }
                    /* Check if finish the search, if not probably some mutex is in use, so put the task to sleep for some time*/
                    if ( ( bFound == FALSE ) && ( (bFinished32==FALSE) || (bFinished64==FALSE) ||(bFinished128==FALSE) )) {
81106bdc:	e0bff917 	ldw	r2,-28(fp)
81106be0:	10000b1e 	bne	r2,zero,81106c10 <vInAckHandlerTask+0x4c0>
81106be4:	e0bffa17 	ldw	r2,-24(fp)
81106be8:	10000426 	beq	r2,zero,81106bfc <vInAckHandlerTask+0x4ac>
81106bec:	e0bffb17 	ldw	r2,-20(fp)
81106bf0:	10000226 	beq	r2,zero,81106bfc <vInAckHandlerTask+0x4ac>
81106bf4:	e0bffc17 	ldw	r2,-16(fp)
81106bf8:	1000051e 	bne	r2,zero,81106c10 <vInAckHandlerTask+0x4c0>
                        OSTimeDly(5); /* Make this task sleep for 5 ticks*/
81106bfc:	01000144 	movi	r4,5
81106c00:	112d6cc0 	call	8112d6cc <OSTimeDly>
                        ucCountRetries++;
81106c04:	e0bffe03 	ldbu	r2,-8(fp)
81106c08:	10800044 	addi	r2,r2,1
81106c0c:	e0bffe05 	stb	r2,-8(fp)
                bFinished32=FALSE;
                bFinished64=FALSE;
                bFinished128=FALSE;
                ucCountRetries = 0;
                /* The mutex will not be blocking, so it will try for five times search in the three (re)transmission buffer */
                while ( ( bFound == FALSE ) && ( ucCountRetries < 6 ) && ( (bFinished32==FALSE) || (bFinished64==FALSE) ||(bFinished128==FALSE) ) ) {
81106c10:	e0bff917 	ldw	r2,-28(fp)
81106c14:	1000091e 	bne	r2,zero,81106c3c <vInAckHandlerTask+0x4ec>
81106c18:	e0bffe03 	ldbu	r2,-8(fp)
81106c1c:	108001a8 	cmpgeui	r2,r2,6
81106c20:	1000061e 	bne	r2,zero,81106c3c <vInAckHandlerTask+0x4ec>
81106c24:	e0bffa17 	ldw	r2,-24(fp)
81106c28:	103f4426 	beq	r2,zero,8110693c <__reset+0xfb0e693c>
81106c2c:	e0bffb17 	ldw	r2,-20(fp)
81106c30:	103f4226 	beq	r2,zero,8110693c <__reset+0xfb0e693c>
81106c34:	e0bffc17 	ldw	r2,-16(fp)
81106c38:	103f4026 	beq	r2,zero,8110693c <__reset+0xfb0e693c>
                        OSTimeDly(5); /* Make this task sleep for 5 ticks*/
                        ucCountRetries++;
                    }
                }
                
                if (bFound == FALSE) {
81106c3c:	e0bff917 	ldw	r2,-28(fp)
81106c40:	1000011e 	bne	r2,zero,81106c48 <vInAckHandlerTask+0x4f8>
                    /* Could not found the buffer with the id received in the ack packet*/
                    vFailFoundBufferRetransmission();
81106c44:	110b58c0 	call	8110b58c <vFailFoundBufferRetransmission>
                }
                eReceiverAckState = sRAGettingACK;
81106c48:	00800044 	movi	r2,1
81106c4c:	e0bffd15 	stw	r2,-12(fp)
				break;
81106c50:	0001883a 	nop
			default:
				break;
		}
	}
81106c54:	003ed306 	br	811067a4 <__reset+0xfb0e67a4>

81106c58 <vInitialTask>:

#include "initialization_task.h"


void vInitialTask(void *task_data)
{
81106c58:	defff704 	addi	sp,sp,-36
81106c5c:	de00012e 	bgeu	sp,et,81106c64 <vInitialTask+0xc>
81106c60:	003b68fa 	trap	3
81106c64:	dfc00815 	stw	ra,32(sp)
81106c68:	df000715 	stw	fp,28(sp)
81106c6c:	df000704 	addi	fp,sp,28
81106c70:	e13fff15 	stw	r4,-4(fp)
  INT8U error_code = OS_ERR_NONE;
81106c74:	e03ffe05 	stb	zero,-8(fp)

	/* READ: Create the task that is responsible to READ UART buffer */
	#if STACK_MONITOR
		error_code = OSTaskCreateExt(vReceiverUartTask,
81106c78:	00800104 	movi	r2,4
81106c7c:	d8800415 	stw	r2,16(sp)
81106c80:	d8000315 	stw	zero,12(sp)
81106c84:	00820004 	movi	r2,2048
81106c88:	d8800215 	stw	r2,8(sp)
81106c8c:	00a045b4 	movhi	r2,33046
81106c90:	10a2a804 	addi	r2,r2,-30048
81106c94:	d8800115 	stw	r2,4(sp)
81106c98:	00800784 	movi	r2,30
81106c9c:	d8800015 	stw	r2,0(sp)
81106ca0:	01c00784 	movi	r7,30
81106ca4:	01a045b4 	movhi	r6,33046
81106ca8:	31aaa704 	addi	r6,r6,-21860
81106cac:	000b883a 	mov	r5,zero
81106cb0:	01204434 	movhi	r4,33040
81106cb4:	211d9e04 	addi	r4,r4,30328
81106cb8:	112c5ac0 	call	8112c5ac <OSTaskCreateExt>
81106cbc:	e0bffe05 	stb	r2,-8(fp)
									NULL,
									0);

	#endif

	if ( error_code != OS_ERR_NONE) {
81106cc0:	e0bffe03 	ldbu	r2,-8(fp)
81106cc4:	10803fcc 	andi	r2,r2,255
81106cc8:	10000526 	beq	r2,zero,81106ce0 <vInitialTask+0x88>
		/* Can't create Task for receive comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );		
81106ccc:	e0bffe03 	ldbu	r2,-8(fp)
81106cd0:	10803fcc 	andi	r2,r2,255
81106cd4:	1009883a 	mov	r4,r2
81106cd8:	110ae1c0 	call	8110ae1c <printErrorTask>
		#endif
		vFailReceiverCreate();
81106cdc:	110b3700 	call	8110b370 <vFailReceiverCreate>
	}


	/* Create the task that is responsible to parse all received messages */
	#if STACK_MONITOR
		error_code = OSTaskCreateExt(vParserCommTask,
81106ce0:	00800104 	movi	r2,4
81106ce4:	d8800415 	stw	r2,16(sp)
81106ce8:	d8000315 	stw	zero,12(sp)
81106cec:	00820004 	movi	r2,2048
81106cf0:	d8800215 	stw	r2,8(sp)
81106cf4:	00a045b4 	movhi	r2,33046
81106cf8:	10baef04 	addi	r2,r2,-5188
81106cfc:	d8800115 	stw	r2,4(sp)
81106d00:	00800684 	movi	r2,26
81106d04:	d8800015 	stw	r2,0(sp)
81106d08:	01c00684 	movi	r7,26
81106d0c:	01a045b4 	movhi	r6,33046
81106d10:	3182ee04 	addi	r6,r6,3000
81106d14:	000b883a 	mov	r5,zero
81106d18:	01204434 	movhi	r4,33040
81106d1c:	211c8004 	addi	r4,r4,29184
81106d20:	112c5ac0 	call	8112c5ac <OSTaskCreateExt>
81106d24:	e0bffe05 	stb	r2,-8(fp)
									NULL,
									0);

	#endif

	if ( error_code != OS_ERR_NONE) {
81106d28:	e0bffe03 	ldbu	r2,-8(fp)
81106d2c:	10803fcc 	andi	r2,r2,255
81106d30:	10000526 	beq	r2,zero,81106d48 <vInitialTask+0xf0>
		/* Can't create Task for receive comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );
81106d34:	e0bffe03 	ldbu	r2,-8(fp)
81106d38:	10803fcc 	andi	r2,r2,255
81106d3c:	1009883a 	mov	r4,r2
81106d40:	110ae1c0 	call	8110ae1c <printErrorTask>
		#endif
		vFailParserCommTaskCreate();
81106d44:	110b9340 	call	8110b934 <vFailParserCommTaskCreate>
	}


	/* Create the task that is responsible to handle incomming ack packet */
	#if STACK_MONITOR
		error_code = OSTaskCreateExt(vInAckHandlerTask,
81106d48:	00800104 	movi	r2,4
81106d4c:	d8800415 	stw	r2,16(sp)
81106d50:	d8000315 	stw	zero,12(sp)
81106d54:	00820004 	movi	r2,2048
81106d58:	d8800215 	stw	r2,8(sp)
81106d5c:	00a04574 	movhi	r2,33045
81106d60:	1088ff04 	addi	r2,r2,9212
81106d64:	d8800115 	stw	r2,4(sp)
81106d68:	008005c4 	movi	r2,23
81106d6c:	d8800015 	stw	r2,0(sp)
81106d70:	01c005c4 	movi	r7,23
81106d74:	01a04574 	movhi	r6,33045
81106d78:	3190fe04 	addi	r6,r6,17400
81106d7c:	000b883a 	mov	r5,zero
81106d80:	01204434 	movhi	r4,33040
81106d84:	2119d404 	addi	r4,r4,26448
81106d88:	112c5ac0 	call	8112c5ac <OSTaskCreateExt>
81106d8c:	e0bffe05 	stb	r2,-8(fp)
									NULL,
									0);

	#endif

	if ( error_code != OS_ERR_NONE) {
81106d90:	e0bffe03 	ldbu	r2,-8(fp)
81106d94:	10803fcc 	andi	r2,r2,255
81106d98:	10000526 	beq	r2,zero,81106db0 <vInitialTask+0x158>
		/* Can't create Task for receive comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );
81106d9c:	e0bffe03 	ldbu	r2,-8(fp)
81106da0:	10803fcc 	andi	r2,r2,255
81106da4:	1009883a 	mov	r4,r2
81106da8:	110ae1c0 	call	8110ae1c <printErrorTask>
		#endif
		vFailInAckHandlerTaskCreate();
81106dac:	110b9800 	call	8110b980 <vFailInAckHandlerTaskCreate>



	/* Create the task that is responsible to send the ack to NUC of the incomming messages */
	#if STACK_MONITOR
		error_code = OSTaskCreateExt(vOutAckHandlerTask,
81106db0:	00800104 	movi	r2,4
81106db4:	d8800415 	stw	r2,16(sp)
81106db8:	d8000315 	stw	zero,12(sp)
81106dbc:	00820004 	movi	r2,2048
81106dc0:	d8800215 	stw	r2,8(sp)
81106dc4:	00a045b4 	movhi	r2,33046
81106dc8:	10aaa804 	addi	r2,r2,-21856
81106dcc:	d8800115 	stw	r2,4(sp)
81106dd0:	00800644 	movi	r2,25
81106dd4:	d8800015 	stw	r2,0(sp)
81106dd8:	01c00644 	movi	r7,25
81106ddc:	01a045b4 	movhi	r6,33046
81106de0:	31b2a704 	addi	r6,r6,-13668
81106de4:	000b883a 	mov	r5,zero
81106de8:	01204434 	movhi	r4,33040
81106dec:	211bde04 	addi	r4,r4,28536
81106df0:	112c5ac0 	call	8112c5ac <OSTaskCreateExt>
81106df4:	e0bffe05 	stb	r2,-8(fp)
									NULL,
									0);

	#endif

	if ( error_code != OS_ERR_NONE) {
81106df8:	e0bffe03 	ldbu	r2,-8(fp)
81106dfc:	10803fcc 	andi	r2,r2,255
81106e00:	10000526 	beq	r2,zero,81106e18 <vInitialTask+0x1c0>
		/* Can't create Task for receive comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );
81106e04:	e0bffe03 	ldbu	r2,-8(fp)
81106e08:	10803fcc 	andi	r2,r2,255
81106e0c:	1009883a 	mov	r4,r2
81106e10:	110ae1c0 	call	8110ae1c <printErrorTask>
		#endif
		vFailOutAckHandlerTaskCreate();
81106e14:	110b9cc0 	call	8110b9cc <vFailOutAckHandlerTaskCreate>
	}


	/* Create the task that is responsible to send the ack to NUC of the incomming messages */
	#if STACK_MONITOR
		error_code = OSTaskCreateExt(vTimeoutCheckerTask,
81106e18:	00800104 	movi	r2,4
81106e1c:	d8800415 	stw	r2,16(sp)
81106e20:	d8000315 	stw	zero,12(sp)
81106e24:	00820004 	movi	r2,2048
81106e28:	d8800215 	stw	r2,8(sp)
81106e2c:	00a04574 	movhi	r2,33045
81106e30:	109a5c04 	addi	r2,r2,26992
81106e34:	d8800115 	stw	r2,4(sp)
81106e38:	00800704 	movi	r2,28
81106e3c:	d8800015 	stw	r2,0(sp)
81106e40:	01c00704 	movi	r7,28
81106e44:	01a045b4 	movhi	r6,33046
81106e48:	31a25b04 	addi	r6,r6,-30356
81106e4c:	000b883a 	mov	r5,zero
81106e50:	01204474 	movhi	r4,33041
81106e54:	2122c604 	addi	r4,r4,-29928
81106e58:	112c5ac0 	call	8112c5ac <OSTaskCreateExt>
81106e5c:	e0bffe05 	stb	r2,-8(fp)
									NULL,
									0);

	#endif

	if ( error_code != OS_ERR_NONE) {
81106e60:	e0bffe03 	ldbu	r2,-8(fp)
81106e64:	10803fcc 	andi	r2,r2,255
81106e68:	10000526 	beq	r2,zero,81106e80 <vInitialTask+0x228>
		/* Can't create Task for receive comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );
81106e6c:	e0bffe03 	ldbu	r2,-8(fp)
81106e70:	10803fcc 	andi	r2,r2,255
81106e74:	1009883a 	mov	r4,r2
81106e78:	110ae1c0 	call	8110ae1c <printErrorTask>
		#endif
		vFailTimeoutCheckerTaskCreate();
81106e7c:	110bab00 	call	8110bab0 <vFailTimeoutCheckerTaskCreate>



	/* SEND: Create the task that is responsible to SEND UART packets */
	#if STACK_MONITOR
		error_code = OSTaskCreateExt(vSenderComTask,
81106e80:	00800104 	movi	r2,4
81106e84:	d8800415 	stw	r2,16(sp)
81106e88:	d8000315 	stw	zero,12(sp)
81106e8c:	00820004 	movi	r2,2048
81106e90:	d8800215 	stw	r2,8(sp)
81106e94:	00a04574 	movhi	r2,33045
81106e98:	10914504 	addi	r2,r2,17684
81106e9c:	d8800115 	stw	r2,4(sp)
81106ea0:	00800604 	movi	r2,24
81106ea4:	d8800015 	stw	r2,0(sp)
81106ea8:	01c00604 	movi	r7,24
81106eac:	01a04574 	movhi	r6,33045
81106eb0:	31994404 	addi	r6,r6,25872
81106eb4:	000b883a 	mov	r5,zero
81106eb8:	01204474 	movhi	r4,33041
81106ebc:	21226b04 	addi	r4,r4,-30292
81106ec0:	112c5ac0 	call	8112c5ac <OSTaskCreateExt>
81106ec4:	e0bffe05 	stb	r2,-8(fp)
									NULL,
									0);

	#endif

	if ( error_code != OS_ERR_NONE) {
81106ec8:	e0bffe03 	ldbu	r2,-8(fp)
81106ecc:	10803fcc 	andi	r2,r2,255
81106ed0:	10000526 	beq	r2,zero,81106ee8 <vInitialTask+0x290>
		/* Can't create Task for sender comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );		
81106ed4:	e0bffe03 	ldbu	r2,-8(fp)
81106ed8:	10803fcc 	andi	r2,r2,255
81106edc:	1009883a 	mov	r4,r2
81106ee0:	110ae1c0 	call	8110ae1c <printErrorTask>
		#endif
		vFailSenderCreate();
81106ee4:	110b3bc0 	call	8110b3bc <vFailSenderCreate>
	}

	/*	This is the timer that's trigger the task that implements the timeout/retransmission logic*/
	OSTmrStart ((OS_TMR *)xTimerRetransmission, (INT8U  *)&error_code);
81106ee8:	d0a06317 	ldw	r2,-32372(gp)
81106eec:	e17ffe04 	addi	r5,fp,-8
81106ef0:	1009883a 	mov	r4,r2
81106ef4:	112e2cc0 	call	8112e2cc <OSTmrStart>
	if ( error_code != OS_ERR_NONE) {
81106ef8:	e0bffe03 	ldbu	r2,-8(fp)
81106efc:	10803fcc 	andi	r2,r2,255
81106f00:	10000126 	beq	r2,zero,81106f08 <vInitialTask+0x2b0>
		/*	Could not create the timer that syncs the task that is responsible to retransmit the packets*/
		vFailStartTimerRetransmission();
81106f04:	110bd6c0 	call	8110bd6c <vFailStartTimerRetransmission>




	/* Delete the Initialization Task  */
	error_code = OSTaskDel(OS_PRIO_SELF); /* OS_PRIO_SELF = Means task self priority */
81106f08:	01003fc4 	movi	r4,255
81106f0c:	112c7980 	call	8112c798 <OSTaskDel>
81106f10:	e0bffe05 	stb	r2,-8(fp)
	if ( error_code != OS_ERR_NONE) {
81106f14:	e0bffe03 	ldbu	r2,-8(fp)
81106f18:	10803fcc 	andi	r2,r2,255
81106f1c:	10001026 	beq	r2,zero,81106f60 <vInitialTask+0x308>
		/*	Can't delete the initialization task, the problem is that the priority of this
			is that the PRIO is so high that will cause starvation if not deleted */
		#ifdef DEBUG_ON
			printErrorTask( error_code );		
81106f20:	e0bffe03 	ldbu	r2,-8(fp)
81106f24:	10803fcc 	andi	r2,r2,255
81106f28:	1009883a 	mov	r4,r2
81106f2c:	110ae1c0 	call	8110ae1c <printErrorTask>
		#endif
		vFailDeleteInitialization();
81106f30:	110b4080 	call	8110b408 <vFailDeleteInitialization>
		/*	To not exit the intire application, the PRIO of this task will be lowered*/
		OSTaskChangePrio( INITIALIZATION_TASK_PRIO , INITIALIZATION_TASK_PRIO_FAIL );
81106f34:	014009c4 	movi	r5,39
81106f38:	01000044 	movi	r4,1
81106f3c:	112bf000 	call	8112bf00 <OSTaskChangePrio>

		for(;;) { /* Correct Program Flow should never get here */
			OSTaskDel(OS_PRIO_SELF); /* Try to delete it self */
81106f40:	01003fc4 	movi	r4,255
81106f44:	112c7980 	call	8112c798 <OSTaskDel>
			OSTimeDlyHMSM(0,0,10,0); /* 1 sec */
81106f48:	000f883a 	mov	r7,zero
81106f4c:	01800284 	movi	r6,10
81106f50:	000b883a 	mov	r5,zero
81106f54:	0009883a 	mov	r4,zero
81106f58:	112d7d80 	call	8112d7d8 <OSTimeDlyHMSM>
		}
81106f5c:	003ff806 	br	81106f40 <__reset+0xfb0e6f40>
	}

}
81106f60:	0001883a 	nop
81106f64:	e037883a 	mov	sp,fp
81106f68:	dfc00117 	ldw	ra,4(sp)
81106f6c:	df000017 	ldw	fp,0(sp)
81106f70:	dec00204 	addi	sp,sp,8
81106f74:	f800283a 	ret

81106f78 <vOutAckHandlerTask>:
 */

#include "out_ack_handler_task.h"


void vOutAckHandlerTask(void *task_data) {
81106f78:	defff604 	addi	sp,sp,-40
81106f7c:	de00012e 	bgeu	sp,et,81106f84 <vOutAckHandlerTask+0xc>
81106f80:	003b68fa 	trap	3
81106f84:	dfc00915 	stw	ra,36(sp)
81106f88:	df000815 	stw	fp,32(sp)
81106f8c:	df000804 	addi	fp,sp,32
81106f90:	e13fff15 	stw	r4,-4(fp)

	bool bSuccess = FALSE;
81106f94:	e03ff815 	stw	zero,-32(fp)
	INT8U error_code;
	tSerderACKState eSenderAckState;
	static txSenderACKs xSAckLocal;
    char cBufferAck[16] = "";
81106f98:	e03ffb15 	stw	zero,-20(fp)
81106f9c:	e03ffc15 	stw	zero,-16(fp)
81106fa0:	e03ffd15 	stw	zero,-12(fp)
81106fa4:	e03ffe15 	stw	zero,-8(fp)
    unsigned char ucCountRetries = 0;
81106fa8:	e03ffa05 	stb	zero,-24(fp)
    unsigned char crc = 0;
81106fac:	e03ffa85 	stb	zero,-22(fp)

	#ifdef DEBUG_ON
		debug(fp,"vSenderAckTask, enter task.\n");
81106fb0:	d0a05a17 	ldw	r2,-32408(gp)
81106fb4:	100f883a 	mov	r7,r2
81106fb8:	01800704 	movi	r6,28
81106fbc:	01400044 	movi	r5,1
81106fc0:	01204534 	movhi	r4,33044
81106fc4:	21284504 	addi	r4,r4,-24300
81106fc8:	110ec080 	call	8110ec08 <fwrite>
	#endif

	eSenderAckState = sSAConfiguring;
81106fcc:	e03ff915 	stw	zero,-28(fp)

	for(;;){

		switch (eSenderAckState) {
81106fd0:	e0bff917 	ldw	r2,-28(fp)
81106fd4:	10c00060 	cmpeqi	r3,r2,1
81106fd8:	1800071e 	bne	r3,zero,81106ff8 <vOutAckHandlerTask+0x80>
81106fdc:	0080032e 	bgeu	zero,r2,81106fec <vOutAckHandlerTask+0x74>
81106fe0:	108000a0 	cmpeqi	r2,r2,2
81106fe4:	1000451e 	bne	r2,zero,811070fc <vOutAckHandlerTask+0x184>
                    vFailGetMutexTxUARTSenderTask();
                }
                eSenderAckState = sSAGettingACK;
				break;
			default:
				break;
81106fe8:	00008406 	br	811071fc <vOutAckHandlerTask+0x284>
	for(;;){

		switch (eSenderAckState) {
			case sSAConfiguring:
                /*For future implementations*/
                eSenderAckState = sSAGettingACK;
81106fec:	00800044 	movi	r2,1
81106ff0:	e0bff915 	stw	r2,-28(fp)
				break;
81106ff4:	00008106 	br	811071fc <vOutAckHandlerTask+0x284>
            case sSAGettingACK:
                /* Waits the semaphore that indicates there are some ack message to send*/
                OSSemPend(xSemCountSenderACK, 0, &error_code);
81106ff8:	d0a05917 	ldw	r2,-32412(gp)
81106ffc:	e0fffac4 	addi	r3,fp,-21
81107000:	180d883a 	mov	r6,r3
81107004:	000b883a 	mov	r5,zero
81107008:	1009883a 	mov	r4,r2
8110700c:	112b8400 	call	8112b840 <OSSemPend>
                if ( error_code == OS_ERR_NONE ) {
81107010:	e0bffac3 	ldbu	r2,-21(fp)
81107014:	10803fcc 	andi	r2,r2,255
81107018:	1000361e 	bne	r2,zero,811070f4 <vOutAckHandlerTask+0x17c>

                    OSMutexPend(xMutexSenderACK, 0, &error_code);
8110701c:	d0a06717 	ldw	r2,-32356(gp)
81107020:	e0fffac4 	addi	r3,fp,-21
81107024:	180d883a 	mov	r6,r3
81107028:	000b883a 	mov	r5,zero
8110702c:	1009883a 	mov	r4,r2
81107030:	11298340 	call	81129834 <OSMutexPend>
                    if ( error_code == OS_ERR_NONE ) {
81107034:	e0bffac3 	ldbu	r2,-21(fp)
81107038:	10803fcc 	andi	r2,r2,255
8110703c:	10002b1e 	bne	r2,zero,811070ec <vOutAckHandlerTask+0x174>
                        /*Search for the ack*/
                        for(unsigned char i = 0; i < N_ACKS_SENDER; i++)
81107040:	e03ffa45 	stb	zero,-23(fp)
81107044:	00002206 	br	811070d0 <vOutAckHandlerTask+0x158>
                        {
                            if ( xSenderACK[i].cType != 0 ) {
81107048:	e0fffa43 	ldbu	r3,-23(fp)
8110704c:	00a045b4 	movhi	r2,33046
81107050:	1082ef04 	addi	r2,r2,3004
81107054:	18c7883a 	add	r3,r3,r3
81107058:	18c7883a 	add	r3,r3,r3
8110705c:	10c5883a 	add	r2,r2,r3
81107060:	10800003 	ldbu	r2,0(r2)
81107064:	10803fcc 	andi	r2,r2,255
81107068:	1080201c 	xori	r2,r2,128
8110706c:	10bfe004 	addi	r2,r2,-128
81107070:	10001426 	beq	r2,zero,811070c4 <vOutAckHandlerTask+0x14c>
                                /* Locate the message, copy for the local variable in order to free the mutex. */
                                xSAckLocal = xSenderACK[i];
81107074:	e0fffa43 	ldbu	r3,-23(fp)
81107078:	00a045b4 	movhi	r2,33046
8110707c:	1082ef04 	addi	r2,r2,3004
81107080:	18c7883a 	add	r3,r3,r3
81107084:	18c7883a 	add	r3,r3,r3
81107088:	10c5883a 	add	r2,r2,r3
8110708c:	10c0000b 	ldhu	r3,0(r2)
81107090:	d0e0538d 	sth	r3,-32434(gp)
81107094:	1080008b 	ldhu	r2,2(r2)
81107098:	d0a0540d 	sth	r2,-32432(gp)
                                eSenderAckState = sSASending;
8110709c:	00800084 	movi	r2,2
811070a0:	e0bff915 	stw	r2,-28(fp)
                                xSenderACK[i].cType = 0; /* indicates that this position now can be used by other message*/
811070a4:	e0fffa43 	ldbu	r3,-23(fp)
811070a8:	00a045b4 	movhi	r2,33046
811070ac:	1082ef04 	addi	r2,r2,3004
811070b0:	18c7883a 	add	r3,r3,r3
811070b4:	18c7883a 	add	r3,r3,r3
811070b8:	10c5883a 	add	r2,r2,r3
811070bc:	10000005 	stb	zero,0(r2)
                                break;
811070c0:	00000606 	br	811070dc <vOutAckHandlerTask+0x164>
                if ( error_code == OS_ERR_NONE ) {

                    OSMutexPend(xMutexSenderACK, 0, &error_code);
                    if ( error_code == OS_ERR_NONE ) {
                        /*Search for the ack*/
                        for(unsigned char i = 0; i < N_ACKS_SENDER; i++)
811070c4:	e0bffa43 	ldbu	r2,-23(fp)
811070c8:	10800044 	addi	r2,r2,1
811070cc:	e0bffa45 	stb	r2,-23(fp)
811070d0:	e0bffa43 	ldbu	r2,-23(fp)
811070d4:	10800130 	cmpltui	r2,r2,4
811070d8:	103fdb1e 	bne	r2,zero,81107048 <__reset+0xfb0e7048>
                                eSenderAckState = sSASending;
                                xSenderACK[i].cType = 0; /* indicates that this position now can be used by other message*/
                                break;
                            }
                        }
                        OSMutexPost(xMutexSenderACK);
811070dc:	d0a06717 	ldw	r2,-32356(gp)
811070e0:	1009883a 	mov	r4,r2
811070e4:	1129dd80 	call	81129dd8 <OSMutexPost>
                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreSenderTask();
                }
                break;
811070e8:	00004406 	br	811071fc <vOutAckHandlerTask+0x284>
                        }
                        OSMutexPost(xMutexSenderACK);
                    } else {
                        /*  Should never get here, will wait without timeout for the semaphore.
                            But if some error accours we will do nothing but print in the console */
                        vFailGetMutexSenderTask();
811070ec:	110b1380 	call	8110b138 <vFailGetMutexSenderTask>
                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreSenderTask();
                }
                break;
811070f0:	00004206 	br	811071fc <vOutAckHandlerTask+0x284>
                    }

                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreSenderTask();
811070f4:	110b0d00 	call	8110b0d0 <vFailGetCountSemaphoreSenderTask>
                }
                break;
811070f8:	00004006 	br	811071fc <vOutAckHandlerTask+0x284>
			case sSASending:
                /* In this state has a parsed ack packet in the variable xSAckLocal
                   we just need to calc the crc8 and create the uart packet to send. */
                sprintf(cBufferAck, ACK_SPRINTF, xSAckLocal.cCommand, xSAckLocal.usiId);
811070fc:	d0a053c3 	ldbu	r2,-32433(gp)
81107100:	10c03fcc 	andi	r3,r2,255
81107104:	18c0201c 	xori	r3,r3,128
81107108:	18ffe004 	addi	r3,r3,-128
8110710c:	d0a0540b 	ldhu	r2,-32432(gp)
81107110:	113fffcc 	andi	r4,r2,65535
81107114:	e0bffb04 	addi	r2,fp,-20
81107118:	200f883a 	mov	r7,r4
8110711c:	180d883a 	mov	r6,r3
81107120:	01604534 	movhi	r5,33044
81107124:	29684d04 	addi	r5,r5,-24268
81107128:	1009883a 	mov	r4,r2
8110712c:	110fda40 	call	8110fda4 <sprintf>
                crc = ucCrc8wInit( cBufferAck , strlen(cBufferAck));
81107130:	e0bffb04 	addi	r2,fp,-20
81107134:	1009883a 	mov	r4,r2
81107138:	110ffb80 	call	8110ffb8 <strlen>
8110713c:	1007883a 	mov	r3,r2
81107140:	e0bffb04 	addi	r2,fp,-20
81107144:	180b883a 	mov	r5,r3
81107148:	1009883a 	mov	r4,r2
8110714c:	110adc00 	call	8110adc0 <ucCrc8wInit>
81107150:	e0bffa85 	stb	r2,-22(fp)
                sprintf(cBufferAck, "%s|%hhu;", cBufferAck, crc);
81107154:	e13ffa83 	ldbu	r4,-22(fp)
81107158:	e0fffb04 	addi	r3,fp,-20
8110715c:	e0bffb04 	addi	r2,fp,-20
81107160:	200f883a 	mov	r7,r4
81107164:	180d883a 	mov	r6,r3
81107168:	01604534 	movhi	r5,33044
8110716c:	29684f04 	addi	r5,r5,-24260
81107170:	1009883a 	mov	r4,r2
81107174:	110fda40 	call	8110fda4 <sprintf>

                bSuccess = FALSE;
81107178:	e03ff815 	stw	zero,-32(fp)
                while ( ( bSuccess == FALSE ) && ( ucCountRetries < 6 ) ) {
8110717c:	00001406 	br	811071d0 <vOutAckHandlerTask+0x258>

                    OSMutexPend(xTxUARTMutex, 5, &error_code); /* Wait 5 ticks = 5 ms */
81107180:	d0a06817 	ldw	r2,-32352(gp)
81107184:	e0fffac4 	addi	r3,fp,-21
81107188:	180d883a 	mov	r6,r3
8110718c:	01400144 	movi	r5,5
81107190:	1009883a 	mov	r4,r2
81107194:	11298340 	call	81129834 <OSMutexPend>
                    if ( error_code == OS_NO_ERR ) {
81107198:	e0bffac3 	ldbu	r2,-21(fp)
8110719c:	10803fcc 	andi	r2,r2,255
811071a0:	1000081e 	bne	r2,zero,811071c4 <vOutAckHandlerTask+0x24c>
                        puts(cBufferAck);
811071a4:	e0bffb04 	addi	r2,fp,-20
811071a8:	1009883a 	mov	r4,r2
811071ac:	110fa600 	call	8110fa60 <puts>
                        OSMutexPost(xTxUARTMutex);
811071b0:	d0a06817 	ldw	r2,-32352(gp)
811071b4:	1009883a 	mov	r4,r2
811071b8:	1129dd80 	call	81129dd8 <OSMutexPost>
                        bSuccess = TRUE;
811071bc:	00800044 	movi	r2,1
811071c0:	e0bff815 	stw	r2,-32(fp)
                    }
                    ucCountRetries++;
811071c4:	e0bffa03 	ldbu	r2,-24(fp)
811071c8:	10800044 	addi	r2,r2,1
811071cc:	e0bffa05 	stb	r2,-24(fp)
                sprintf(cBufferAck, ACK_SPRINTF, xSAckLocal.cCommand, xSAckLocal.usiId);
                crc = ucCrc8wInit( cBufferAck , strlen(cBufferAck));
                sprintf(cBufferAck, "%s|%hhu;", cBufferAck, crc);

                bSuccess = FALSE;
                while ( ( bSuccess == FALSE ) && ( ucCountRetries < 6 ) ) {
811071d0:	e0bff817 	ldw	r2,-32(fp)
811071d4:	1000031e 	bne	r2,zero,811071e4 <vOutAckHandlerTask+0x26c>
811071d8:	e0bffa03 	ldbu	r2,-24(fp)
811071dc:	108001b0 	cmpltui	r2,r2,6
811071e0:	103fe71e 	bne	r2,zero,81107180 <__reset+0xfb0e7180>
                        bSuccess = TRUE;
                    }
                    ucCountRetries++;
                }

                if (bSuccess == FALSE) {
811071e4:	e0bff817 	ldw	r2,-32(fp)
811071e8:	1000011e 	bne	r2,zero,811071f0 <vOutAckHandlerTask+0x278>
                    /* Could not use the uart tx buffer to send the ack*/
                    vFailGetMutexTxUARTSenderTask();
811071ec:	110b2700 	call	8110b270 <vFailGetMutexTxUARTSenderTask>
                }
                eSenderAckState = sSAGettingACK;
811071f0:	00800044 	movi	r2,1
811071f4:	e0bff915 	stw	r2,-28(fp)
				break;
811071f8:	0001883a 	nop
			default:
				break;
		}
	}
811071fc:	003f7406 	br	81106fd0 <__reset+0xfb0e6fd0>

81107200 <vParserCommTask>:


#include "parser_comm_task.h"


void vParserCommTask(void *task_data) {
81107200:	defffa04 	addi	sp,sp,-24
81107204:	de00012e 	bgeu	sp,et,8110720c <vParserCommTask+0xc>
81107208:	003b68fa 	trap	3
8110720c:	dfc00515 	stw	ra,20(sp)
81107210:	df000415 	stw	fp,16(sp)
81107214:	df000404 	addi	fp,sp,16
81107218:	e13fff15 	stw	r4,-4(fp)

	bool bSuccess = FALSE;
8110721c:	e03ffd15 	stw	zero,-12(fp)
	INT8U error_code;
	tParserStates eParserMode;
	static tPreParsed PreParsedLocal;

	#ifdef DEBUG_ON
		debug(fp,"vParserRXTask, enter task.\n");
81107220:	d0a05a17 	ldw	r2,-32408(gp)
81107224:	100f883a 	mov	r7,r2
81107228:	018006c4 	movi	r6,27
8110722c:	01400044 	movi	r5,1
81107230:	01204534 	movhi	r4,33044
81107234:	21285204 	addi	r4,r4,-24248
81107238:	110ec080 	call	8110ec08 <fwrite>
	#endif

	eParserMode = sConfiguring;
8110723c:	e03ffc15 	stw	zero,-16(fp)

	for(;;){

		switch (eParserMode) {
81107240:	e0bffc17 	ldw	r2,-16(fp)
81107244:	10800168 	cmpgeui	r2,r2,5
81107248:	1000981e 	bne	r2,zero,811074ac <vParserCommTask+0x2ac>
8110724c:	e0bffc17 	ldw	r2,-16(fp)
81107250:	100690ba 	slli	r3,r2,2
81107254:	00a04434 	movhi	r2,33040
81107258:	109c9a04 	addi	r2,r2,29288
8110725c:	1885883a 	add	r2,r3,r2
81107260:	10800017 	ldw	r2,0(r2)
81107264:	1000683a 	jmp	r2
81107268:	8110727c 	xorhi	r4,r16,16841
8110726c:	81107288 	cmpgei	r4,r16,16842
81107270:	81107354 	ori	r4,r16,16845
81107274:	811073e8 	cmpgeui	r4,r16,16847
81107278:	81107428 	cmpgeui	r4,r16,16848
			case sConfiguring:
				/*For future implementations*/
				eParserMode = sWaitingConn;
8110727c:	00800044 	movi	r2,1
81107280:	e0bffc15 	stw	r2,-16(fp)
				break;
81107284:	00008d06 	br	811074bc <vParserCommTask+0x2bc>
			case sWaitingConn:

				bSuccess = FALSE;
81107288:	e03ffd15 	stw	zero,-12(fp)
				eParserMode = sWaitingConn;
8110728c:	00800044 	movi	r2,1
81107290:	e0bffc15 	stw	r2,-16(fp)

				OSSemPend(xSemCountPreParsed, 0, &error_code); /*Blocking*/
81107294:	d0a05c17 	ldw	r2,-32400(gp)
81107298:	e0fffe04 	addi	r3,fp,-8
8110729c:	180d883a 	mov	r6,r3
811072a0:	000b883a 	mov	r5,zero
811072a4:	1009883a 	mov	r4,r2
811072a8:	112b8400 	call	8112b840 <OSSemPend>
				if ( error_code == OS_ERR_NONE ) {
811072ac:	e0bffe03 	ldbu	r2,-8(fp)
811072b0:	10803fcc 	andi	r2,r2,255
811072b4:	1000251e 	bne	r2,zero,8110734c <vParserCommTask+0x14c>
					/* There's command waiting to be threat */

					/* Should post the semaphore to the Sender Task stop to send the Initialization message (Request Status) */
					error_code = OSSemPost(xSemCommInit);
811072b8:	d0a05817 	ldw	r2,-32416(gp)
811072bc:	1009883a 	mov	r4,r2
811072c0:	112bbc80 	call	8112bbc8 <OSSemPost>
811072c4:	e0bffe05 	stb	r2,-8(fp)
                    if ( error_code == OS_ERR_NONE ) {
811072c8:	e0bffe03 	ldbu	r2,-8(fp)
811072cc:	10803fcc 	andi	r2,r2,255
811072d0:	1000171e 	bne	r2,zero,81107330 <vParserCommTask+0x130>

                    	bSuccess = getPreParsedPacket(&PreParsedLocal); /*Blocking*/
811072d4:	01204534 	movhi	r4,33044
811072d8:	2137cf04 	addi	r4,r4,-8388
811072dc:	11074c00 	call	811074c0 <getPreParsedPacket>
811072e0:	e0bffd15 	stw	r2,-12(fp)
                    	if (bSuccess == TRUE) {
811072e4:	e0bffd17 	ldw	r2,-12(fp)
811072e8:	10800058 	cmpnei	r2,r2,1
811072ec:	10000e1e 	bne	r2,zero,81107328 <vParserCommTask+0x128>
                    		/* PreParsed Content copied to the local variable */
                            if ( PreParsedLocal.cType == START_REPLY_CHAR )
811072f0:	00a04534 	movhi	r2,33044
811072f4:	10b7cf04 	addi	r2,r2,-8388
811072f8:	10800103 	ldbu	r2,4(r2)
811072fc:	10803fcc 	andi	r2,r2,255
81107300:	1080201c 	xori	r2,r2,128
81107304:	10bfe004 	addi	r2,r2,-128
81107308:	10800858 	cmpnei	r2,r2,33
8110730c:	1000031e 	bne	r2,zero,8110731c <vParserCommTask+0x11c>
                            	eParserMode = sReplyParsing;
81107310:	00800104 	movi	r2,4
81107314:	e0bffc15 	stw	r2,-16(fp)
                    }
				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}

				break;
81107318:	00006706 	br	811074b8 <vParserCommTask+0x2b8>
                    	if (bSuccess == TRUE) {
                    		/* PreParsed Content copied to the local variable */
                            if ( PreParsedLocal.cType == START_REPLY_CHAR )
                            	eParserMode = sReplyParsing;
                            else
                            	eParserMode = sRequestParsing;
8110731c:	008000c4 	movi	r2,3
81107320:	e0bffc15 	stw	r2,-16(fp)
                    }
				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}

				break;
81107324:	00006406 	br	811074b8 <vParserCommTask+0x2b8>
                            	eParserMode = sReplyParsing;
                            else
                            	eParserMode = sRequestParsing;
                    	} else {
							/* Semaphore was post by some task but has no message in the PreParsedBuffer*/
							vNoContentInPreParsedBuffer();
81107328:	110b6c40 	call	8110b6c4 <vNoContentInPreParsedBuffer>
                    }
				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}

				break;
8110732c:	00006206 	br	811074b8 <vParserCommTask+0x2b8>
							vNoContentInPreParsedBuffer();
						}
                    } else {
						/*  Could not post the semaphore that indicates that NUC is connected and send a message.
							this a very IMPORTANT signalization!*/
                    	bSuccess = bTrySendSemaphoreCommInit();
81107330:	11075d80 	call	811075d8 <bTrySendSemaphoreCommInit>
81107334:	e0bffd15 	stw	r2,-12(fp)
						if (bSuccess == TRUE) {
81107338:	e0bffd17 	ldw	r2,-12(fp)
8110733c:	10800058 	cmpnei	r2,r2,1
81107340:	10005d1e 	bne	r2,zero,811074b8 <vParserCommTask+0x2b8>
							vFailSendxSemCommInit();
81107344:	110af840 	call	8110af84 <vFailSendxSemCommInit>
                    }
				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}

				break;
81107348:	00005b06 	br	811074b8 <vParserCommTask+0x2b8>
						if (bSuccess == TRUE) {
							vFailSendxSemCommInit();
						}
                    }
				} else {
					vFailGetCountSemaphorePreParsedBuffer();
8110734c:	110b5f40 	call	8110b5f4 <vFailGetCountSemaphorePreParsedBuffer>
				}

				break;
81107350:	00005906 	br	811074b8 <vParserCommTask+0x2b8>
			case sWaitingMessage:

				bSuccess = FALSE;
81107354:	e03ffd15 	stw	zero,-12(fp)
				eParserMode = sWaitingMessage;
81107358:	00800084 	movi	r2,2
8110735c:	e0bffc15 	stw	r2,-16(fp)

				OSSemPend(xSemCountPreParsed, 0, &error_code); /*Blocking*/
81107360:	d0a05c17 	ldw	r2,-32400(gp)
81107364:	e0fffe04 	addi	r3,fp,-8
81107368:	180d883a 	mov	r6,r3
8110736c:	000b883a 	mov	r5,zero
81107370:	1009883a 	mov	r4,r2
81107374:	112b8400 	call	8112b840 <OSSemPend>
				if ( error_code == OS_ERR_NONE ) {
81107378:	e0bffe03 	ldbu	r2,-8(fp)
8110737c:	10803fcc 	andi	r2,r2,255
81107380:	1000171e 	bne	r2,zero,811073e0 <vParserCommTask+0x1e0>
					/* There's command waiting to be threat */

					bSuccess = getPreParsedPacket(&PreParsedLocal); /*Blocking*/
81107384:	01204534 	movhi	r4,33044
81107388:	2137cf04 	addi	r4,r4,-8388
8110738c:	11074c00 	call	811074c0 <getPreParsedPacket>
81107390:	e0bffd15 	stw	r2,-12(fp)
					if (bSuccess == TRUE) {
81107394:	e0bffd17 	ldw	r2,-12(fp)
81107398:	10800058 	cmpnei	r2,r2,1
8110739c:	10000e1e 	bne	r2,zero,811073d8 <vParserCommTask+0x1d8>
						/* PreParsed Content copied to the local variable */
						if ( PreParsedLocal.cType == START_REPLY_CHAR )
811073a0:	00a04534 	movhi	r2,33044
811073a4:	10b7cf04 	addi	r2,r2,-8388
811073a8:	10800103 	ldbu	r2,4(r2)
811073ac:	10803fcc 	andi	r2,r2,255
811073b0:	1080201c 	xori	r2,r2,128
811073b4:	10bfe004 	addi	r2,r2,-128
811073b8:	10800858 	cmpnei	r2,r2,33
811073bc:	1000031e 	bne	r2,zero,811073cc <vParserCommTask+0x1cc>
							eParserMode = sReplyParsing;
811073c0:	00800104 	movi	r2,4
811073c4:	e0bffc15 	stw	r2,-16(fp)
					}

				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}
				break;
811073c8:	00003c06 	br	811074bc <vParserCommTask+0x2bc>
					if (bSuccess == TRUE) {
						/* PreParsed Content copied to the local variable */
						if ( PreParsedLocal.cType == START_REPLY_CHAR )
							eParserMode = sReplyParsing;
						else
							eParserMode = sRequestParsing;
811073cc:	008000c4 	movi	r2,3
811073d0:	e0bffc15 	stw	r2,-16(fp)
					}

				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}
				break;
811073d4:	00003906 	br	811074bc <vParserCommTask+0x2bc>
							eParserMode = sReplyParsing;
						else
							eParserMode = sRequestParsing;
					} else {
						/* Semaphore was post by some task but has no message in the PreParsedBuffer*/
						vNoContentInPreParsedBuffer();
811073d8:	110b6c40 	call	8110b6c4 <vNoContentInPreParsedBuffer>
					}

				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}
				break;
811073dc:	00003706 	br	811074bc <vParserCommTask+0x2bc>
						/* Semaphore was post by some task but has no message in the PreParsedBuffer*/
						vNoContentInPreParsedBuffer();
					}

				} else {
					vFailGetCountSemaphorePreParsedBuffer();
811073e0:	110b5f40 	call	8110b5f4 <vFailGetCountSemaphorePreParsedBuffer>
				}
				break;
811073e4:	00003506 	br	811074bc <vParserCommTask+0x2bc>
			case sRequestParsing:
				/* Final parssing after identify that is a request packet */
				/* ATTENTION: In order to avoid overhead of process the response to NUC of simple Requests
				   will be threat here, and send from here the parser_rx.*/
			   	switch (PreParsedLocal.cType)
811073e8:	00a04534 	movhi	r2,33044
811073ec:	10b7cf04 	addi	r2,r2,-8388
811073f0:	10800103 	ldbu	r2,4(r2)
811073f4:	10803fcc 	andi	r2,r2,255
811073f8:	1080201c 	xori	r2,r2,128
811073fc:	10bfe004 	addi	r2,r2,-128
81107400:	108010e0 	cmpeqi	r2,r2,67
81107404:	10000426 	beq	r2,zero,81107418 <vParserCommTask+0x218>
				{
					case ETH_CMD: /*NUC requested the ETH Configuration*/
							vSendEthConf();
81107408:	1109ce00 	call	81109ce0 <vSendEthConf>
							eParserMode = sWaitingMessage;
8110740c:	00800084 	movi	r2,2
81107410:	e0bffc15 	stw	r2,-16(fp)
						break;
81107414:	00000306 	br	81107424 <vParserCommTask+0x224>
					default:
						eParserMode = sWaitingMessage;
81107418:	00800084 	movi	r2,2
8110741c:	e0bffc15 	stw	r2,-16(fp)
						break;
81107420:	0001883a 	nop
				}
				break;
81107424:	00002506 	br	811074bc <vParserCommTask+0x2bc>
			case sReplyParsing:
                switch (PreParsedLocal.cType)
81107428:	00a04534 	movhi	r2,33044
8110742c:	10b7cf04 	addi	r2,r2,-8388
81107430:	10800103 	ldbu	r2,4(r2)
81107434:	10803fcc 	andi	r2,r2,255
81107438:	1080201c 	xori	r2,r2,128
8110743c:	10bfe004 	addi	r2,r2,-128
81107440:	10c01220 	cmpeqi	r3,r2,72
81107444:	1800121e 	bne	r3,zero,81107490 <vParserCommTask+0x290>
81107448:	10c01248 	cmpgei	r3,r2,73
8110744c:	1800031e 	bne	r3,zero,8110745c <vParserCommTask+0x25c>
81107450:	10801120 	cmpeqi	r2,r2,68
81107454:	1000081e 	bne	r2,zero,81107478 <vParserCommTask+0x278>
81107458:	00001006 	br	8110749c <vParserCommTask+0x29c>
8110745c:	10c01420 	cmpeqi	r3,r2,80
81107460:	1800081e 	bne	r3,zero,81107484 <vParserCommTask+0x284>
81107464:	108014e0 	cmpeqi	r2,r2,83
81107468:	10000c26 	beq	r2,zero,8110749c <vParserCommTask+0x29c>
                {
                    case NUC_STATUS_CMD: /*Status from NUC*/

						eParserMode = sWaitingMessage;
8110746c:	00800084 	movi	r2,2
81107470:	e0bffc15 	stw	r2,-16(fp)
                        break;
81107474:	00000c06 	br	811074a8 <vParserCommTask+0x2a8>
                    case POWER_OFF_CMD: /*Shut down command from SGSE*/

						eParserMode = sWaitingMessage;
81107478:	00800084 	movi	r2,2
8110747c:	e0bffc15 	stw	r2,-16(fp)
                        break;
81107480:	00000906 	br	811074a8 <vParserCommTask+0x2a8>
                    case PUS_CMD: /*PUS command to MEB*/

						eParserMode = sWaitingMessage;
81107484:	00800084 	movi	r2,2
81107488:	e0bffc15 	stw	r2,-16(fp)
                        break;
8110748c:	00000606 	br	811074a8 <vParserCommTask+0x2a8>
                    case HEART_BEAT_CMD: /*Heart beating (NUC are you there?)*/

						eParserMode = sWaitingMessage;
81107490:	00800084 	movi	r2,2
81107494:	e0bffc15 	stw	r2,-16(fp)
                        break;
81107498:	00000306 	br	811074a8 <vParserCommTask+0x2a8>
                    default:
						eParserMode = sWaitingMessage;
8110749c:	00800084 	movi	r2,2
811074a0:	e0bffc15 	stw	r2,-16(fp)
                        break;
811074a4:	0001883a 	nop
                }
				break;
811074a8:	00000406 	br	811074bc <vParserCommTask+0x2bc>
			default:
				eParserMode = sWaitingMessage;
811074ac:	00800084 	movi	r2,2
811074b0:	e0bffc15 	stw	r2,-16(fp)
				break;
811074b4:	00000106 	br	811074bc <vParserCommTask+0x2bc>
                    }
				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}

				break;
811074b8:	0001883a 	nop
				break;
			default:
				eParserMode = sWaitingMessage;
				break;
		}
	}
811074bc:	003f6006 	br	81107240 <__reset+0xfb0e7240>

811074c0 <getPreParsedPacket>:
}

bool getPreParsedPacket( tPreParsed *xPreParsedParser ) {
811074c0:	defffb04 	addi	sp,sp,-20
811074c4:	de00012e 	bgeu	sp,et,811074cc <getPreParsedPacket+0xc>
811074c8:	003b68fa 	trap	3
811074cc:	dfc00415 	stw	ra,16(sp)
811074d0:	df000315 	stw	fp,12(sp)
811074d4:	df000304 	addi	fp,sp,12
811074d8:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
811074dc:	e03ffd15 	stw	zero,-12(fp)
    INT8U error_code;

	OSMutexPend(xMutexPreParsed, 0, &error_code); /*Blocking*/
811074e0:	d0a06117 	ldw	r2,-32380(gp)
811074e4:	e0fffe44 	addi	r3,fp,-7
811074e8:	180d883a 	mov	r6,r3
811074ec:	000b883a 	mov	r5,zero
811074f0:	1009883a 	mov	r4,r2
811074f4:	11298340 	call	81129834 <OSMutexPend>
	if (error_code == OS_ERR_NONE) {
811074f8:	e0bffe43 	ldbu	r2,-7(fp)
811074fc:	10803fcc 	andi	r2,r2,255
81107500:	10002e1e 	bne	r2,zero,811075bc <getPreParsedPacket+0xfc>
		/* Got the Mutex */
		/*For now, will only get the first, not the packet that is waiting for longer time*/
		for(unsigned char i = 0; i < N_PREPARSED_ENTRIES; i++)
81107504:	e03ffe05 	stb	zero,-8(fp)
81107508:	00002506 	br	811075a0 <getPreParsedPacket+0xe0>
		{
            if ( xPreParsed[i].cType != 0 ) {
8110750c:	e0fffe03 	ldbu	r3,-8(fp)
81107510:	00a045b4 	movhi	r2,33046
81107514:	1082f304 	addi	r2,r2,3020
81107518:	18c01324 	muli	r3,r3,76
8110751c:	10c5883a 	add	r2,r2,r3
81107520:	10800104 	addi	r2,r2,4
81107524:	10800003 	ldbu	r2,0(r2)
81107528:	10803fcc 	andi	r2,r2,255
8110752c:	1080201c 	xori	r2,r2,128
81107530:	10bfe004 	addi	r2,r2,-128
81107534:	10001726 	beq	r2,zero,81107594 <getPreParsedPacket+0xd4>
                /* Locate a filled PreParsed variable in the array*/
            	/* Perform a copy to a local variable */
            	(*xPreParsedParser) = xPreParsed[i];
81107538:	e0fffe03 	ldbu	r3,-8(fp)
8110753c:	e13fff17 	ldw	r4,-4(fp)
81107540:	00a045b4 	movhi	r2,33046
81107544:	1082f304 	addi	r2,r2,3020
81107548:	18c01324 	muli	r3,r3,76
8110754c:	10c5883a 	add	r2,r2,r3
81107550:	2007883a 	mov	r3,r4
81107554:	1009883a 	mov	r4,r2
81107558:	00801304 	movi	r2,76
8110755c:	100d883a 	mov	r6,r2
81107560:	200b883a 	mov	r5,r4
81107564:	1809883a 	mov	r4,r3
81107568:	110f61c0 	call	8110f61c <memcpy>
                bSuccess = TRUE;
8110756c:	00800044 	movi	r2,1
81107570:	e0bffd15 	stw	r2,-12(fp)
                xPreParsed[i].cType = 0;
81107574:	e0fffe03 	ldbu	r3,-8(fp)
81107578:	00a045b4 	movhi	r2,33046
8110757c:	1082f304 	addi	r2,r2,3020
81107580:	18c01324 	muli	r3,r3,76
81107584:	10c5883a 	add	r2,r2,r3
81107588:	10800104 	addi	r2,r2,4
8110758c:	10000005 	stb	zero,0(r2)
                break;
81107590:	00000606 	br	811075ac <getPreParsedPacket+0xec>

	OSMutexPend(xMutexPreParsed, 0, &error_code); /*Blocking*/
	if (error_code == OS_ERR_NONE) {
		/* Got the Mutex */
		/*For now, will only get the first, not the packet that is waiting for longer time*/
		for(unsigned char i = 0; i < N_PREPARSED_ENTRIES; i++)
81107594:	e0bffe03 	ldbu	r2,-8(fp)
81107598:	10800044 	addi	r2,r2,1
8110759c:	e0bffe05 	stb	r2,-8(fp)
811075a0:	e0bffe03 	ldbu	r2,-8(fp)
811075a4:	10800130 	cmpltui	r2,r2,4
811075a8:	103fd81e 	bne	r2,zero,8110750c <__reset+0xfb0e750c>
                bSuccess = TRUE;
                xPreParsed[i].cType = 0;
                break;
            }
		}
		OSMutexPost(xMutexPreParsed);
811075ac:	d0a06117 	ldw	r2,-32380(gp)
811075b0:	1009883a 	mov	r4,r2
811075b4:	1129dd80 	call	81129dd8 <OSMutexPost>
811075b8:	00000106 	br	811075c0 <getPreParsedPacket+0x100>
	} else {
		/* Couldn't get Mutex. (Should not get here since is a blocking call without timeout)*/
		vFailGetxMutexPreParsedParserRxTask();
811075bc:	110b65c0 	call	8110b65c <vFailGetxMutexPreParsedParserRxTask>
	}
	return bSuccess;
811075c0:	e0bffd17 	ldw	r2,-12(fp)
}
811075c4:	e037883a 	mov	sp,fp
811075c8:	dfc00117 	ldw	ra,4(sp)
811075cc:	df000017 	ldw	fp,0(sp)
811075d0:	dec00204 	addi	sp,sp,8
811075d4:	f800283a 	ret

811075d8 <bTrySendSemaphoreCommInit>:

bool bTrySendSemaphoreCommInit( void ) {
811075d8:	defffc04 	addi	sp,sp,-16
811075dc:	de00012e 	bgeu	sp,et,811075e4 <bTrySendSemaphoreCommInit+0xc>
811075e0:	003b68fa 	trap	3
811075e4:	dfc00315 	stw	ra,12(sp)
811075e8:	df000215 	stw	fp,8(sp)
811075ec:	df000204 	addi	fp,sp,8
	bool bSuccess = FALSE;
811075f0:	e03ffe15 	stw	zero,-8(fp)
	unsigned char ucCountRetries = 0;
811075f4:	e03fff05 	stb	zero,-4(fp)
	INT8U error_code;

	#ifdef DEBUG_ON
		debug(fp,"Can't post semaphore to SenderTask. Trying more 10 times.\n");
811075f8:	d0a05a17 	ldw	r2,-32408(gp)
811075fc:	100f883a 	mov	r7,r2
81107600:	01800e84 	movi	r6,58
81107604:	01400044 	movi	r5,1
81107608:	01204534 	movhi	r4,33044
8110760c:	21285904 	addi	r4,r4,-24220
81107610:	110ec080 	call	8110ec08 <fwrite>
	#endif

	ucCountRetries = 0;
81107614:	e03fff05 	stb	zero,-4(fp)
	do
	{
		ucCountRetries++;
81107618:	e0bfff03 	ldbu	r2,-4(fp)
8110761c:	10800044 	addi	r2,r2,1
81107620:	e0bfff05 	stb	r2,-4(fp)
		OSTimeDly(50); /* 50 ticks -> 50 ms -> context switch */
81107624:	01000c84 	movi	r4,50
81107628:	112d6cc0 	call	8112d6cc <OSTimeDly>
		error_code = OSSemPost(xSemCommInit);
8110762c:	d0a05817 	ldw	r2,-32416(gp)
81107630:	1009883a 	mov	r4,r2
81107634:	112bbc80 	call	8112bbc8 <OSSemPost>
81107638:	e0bfff45 	stb	r2,-3(fp)
	} while ((error_code != OS_ERR_NONE) && (ucCountRetries < 11));
8110763c:	e0bfff43 	ldbu	r2,-3(fp)
81107640:	10000326 	beq	r2,zero,81107650 <bTrySendSemaphoreCommInit+0x78>
81107644:	e0bfff03 	ldbu	r2,-4(fp)
81107648:	108002f0 	cmpltui	r2,r2,11
8110764c:	103ff21e 	bne	r2,zero,81107618 <__reset+0xfb0e7618>

	if ( error_code == OS_ERR_NONE ) {
81107650:	e0bfff43 	ldbu	r2,-3(fp)
81107654:	1000021e 	bne	r2,zero,81107660 <bTrySendSemaphoreCommInit+0x88>
		bSuccess = TRUE;
81107658:	00800044 	movi	r2,1
8110765c:	e0bffe15 	stw	r2,-8(fp)
	}

	return bSuccess;
81107660:	e0bffe17 	ldw	r2,-8(fp)
}
81107664:	e037883a 	mov	sp,fp
81107668:	dfc00117 	ldw	ra,4(sp)
8110766c:	df000017 	ldw	fp,0(sp)
81107670:	dec00204 	addi	sp,sp,8
81107674:	f800283a 	ret

81107678 <vReceiverUartTask>:


#include "receiver_uart_task.h"


void vReceiverUartTask(void *task_data) {
81107678:	deffeb04 	addi	sp,sp,-84
8110767c:	de00012e 	bgeu	sp,et,81107684 <vReceiverUartTask+0xc>
81107680:	003b68fa 	trap	3
81107684:	dfc01415 	stw	ra,80(sp)
81107688:	df001315 	stw	fp,76(sp)
8110768c:	df001304 	addi	fp,sp,76
81107690:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
81107694:	e03fee15 	stw	zero,-72(fp)
    char cReceiveBuffer[SIZE_RCV_BUFFER];
    tReaderStates eReaderRXMode;
    static tPreParsed xPreParsedReader;

    #ifdef DEBUG_ON
        debug(fp,"vFastReaderRX, enter task.\n");
81107698:	d0a05a17 	ldw	r2,-32408(gp)
8110769c:	100f883a 	mov	r7,r2
811076a0:	018006c4 	movi	r6,27
811076a4:	01400044 	movi	r5,1
811076a8:	01204534 	movhi	r4,33044
811076ac:	21286804 	addi	r4,r4,-24160
811076b0:	110ec080 	call	8110ec08 <fwrite>
    #endif

    eReaderRXMode = sRConfiguring;
811076b4:	e03fed15 	stw	zero,-76(fp)

    for(;;) {

        switch (eReaderRXMode)
811076b8:	e0bfed17 	ldw	r2,-76(fp)
811076bc:	10c00060 	cmpeqi	r3,r2,1
811076c0:	1800091e 	bne	r3,zero,811076e8 <vReceiverUartTask+0x70>
811076c4:	0080052e 	bgeu	zero,r2,811076dc <vReceiverUartTask+0x64>
811076c8:	10c000a0 	cmpeqi	r3,r2,2
811076cc:	1800451e 	bne	r3,zero,811077e4 <vReceiverUartTask+0x16c>
811076d0:	108000e0 	cmpeqi	r2,r2,3
811076d4:	1000561e 	bne	r2,zero,81107830 <vReceiverUartTask+0x1b8>
811076d8:	00005f06 	br	81107858 <vReceiverUartTask+0x1e0>
        {
            case sRConfiguring:
                /* For future implementations */
                eReaderRXMode = sGetRxUart;
811076dc:	00800044 	movi	r2,1
811076e0:	e0bfed15 	stw	r2,-76(fp)
                break;
811076e4:	00005f06 	br	81107864 <vReceiverUartTask+0x1ec>
            case sGetRxUart:

                memset(cReceiveBuffer, 0, SIZE_RCV_BUFFER);
811076e8:	e0bfef04 	addi	r2,fp,-68
811076ec:	01801004 	movi	r6,64
811076f0:	000b883a 	mov	r5,zero
811076f4:	1009883a 	mov	r4,r2
811076f8:	110f76c0 	call	8110f76c <memset>
                scanf("%s", cReceiveBuffer);
811076fc:	e0bfef04 	addi	r2,fp,-68
81107700:	100b883a 	mov	r5,r2
81107704:	01204534 	movhi	r4,33044
81107708:	21286f04 	addi	r4,r4,-24132
8110770c:	110fcc80 	call	8110fcc8 <scanf>
                bSuccess = bPreParser( cReceiveBuffer , &xPreParsedReader );
81107710:	e0bfef04 	addi	r2,fp,-68
81107714:	01604534 	movhi	r5,33044
81107718:	2977e204 	addi	r5,r5,-8312
8110771c:	1009883a 	mov	r4,r2
81107720:	11078680 	call	81107868 <bPreParser>
81107724:	e0bfee15 	stw	r2,-72(fp)

                if ( bSuccess == TRUE ) {
81107728:	e0bfee17 	ldw	r2,-72(fp)
8110772c:	10800058 	cmpnei	r2,r2,1
81107730:	1000161e 	bne	r2,zero,8110778c <vReceiverUartTask+0x114>

                    if ( (xPreParsedReader.cType == START_REQUEST_CHAR) || (xPreParsedReader.cType == START_REPLY_CHAR) ) {
81107734:	00a04534 	movhi	r2,33044
81107738:	10b7e204 	addi	r2,r2,-8312
8110773c:	10800103 	ldbu	r2,4(r2)
81107740:	10803fcc 	andi	r2,r2,255
81107744:	1080201c 	xori	r2,r2,128
81107748:	10bfe004 	addi	r2,r2,-128
8110774c:	10800fe0 	cmpeqi	r2,r2,63
81107750:	1000081e 	bne	r2,zero,81107774 <vReceiverUartTask+0xfc>
81107754:	00a04534 	movhi	r2,33044
81107758:	10b7e204 	addi	r2,r2,-8312
8110775c:	10800103 	ldbu	r2,4(r2)
81107760:	10803fcc 	andi	r2,r2,255
81107764:	1080201c 	xori	r2,r2,128
81107768:	10bfe004 	addi	r2,r2,-128
8110776c:	10800858 	cmpnei	r2,r2,33
81107770:	1000031e 	bne	r2,zero,81107780 <vReceiverUartTask+0x108>
                        /* The packet is a request or reply sent by the NUC*/
                        eReaderRXMode = sSendToParser;
81107774:	00800084 	movi	r2,2
81107778:	e0bfed15 	stw	r2,-76(fp)
                        vFailSendNack();
                    }
                    eReaderRXMode = sGetRxUart;
                }

                break;
8110777c:	00003906 	br	81107864 <vReceiverUartTask+0x1ec>
                    if ( (xPreParsedReader.cType == START_REQUEST_CHAR) || (xPreParsedReader.cType == START_REPLY_CHAR) ) {
                        /* The packet is a request or reply sent by the NUC*/
                        eReaderRXMode = sSendToParser;
                    } else {
                        /* The packet is an ACK or NACK sent by the NUC*/
                        eReaderRXMode = sSendToACKReceiver;
81107780:	008000c4 	movi	r2,3
81107784:	e0bfed15 	stw	r2,-76(fp)
                        vFailSendNack();
                    }
                    eReaderRXMode = sGetRxUart;
                }

                break;
81107788:	00003606 	br	81107864 <vReceiverUartTask+0x1ec>
                        eReaderRXMode = sSendToACKReceiver;
                    }

                } else {
                    /*Should Send NACK - Mocking value the only parte that metters is the "cType = '#'" part */
                    xPreParsedReader.cType = '#';
8110778c:	00a04534 	movhi	r2,33044
81107790:	10b7e204 	addi	r2,r2,-8312
81107794:	00c008c4 	movi	r3,35
81107798:	10c00105 	stb	r3,4(r2)
                    xPreParsedReader.cCommand = ')';
8110779c:	00a04534 	movhi	r2,33044
811077a0:	10b7e204 	addi	r2,r2,-8312
811077a4:	00c00a44 	movi	r3,41
811077a8:	10c00145 	stb	r3,5(r2)
                    xPreParsedReader.usiValues[0] = 1;
811077ac:	00a04534 	movhi	r2,33044
811077b0:	10b7e204 	addi	r2,r2,-8312
811077b4:	00c00044 	movi	r3,1
811077b8:	10c0020d 	sth	r3,8(r2)

                    /*Try to send ack to the Ack Sender Task*/
                    bSuccess = setPreAckSenderFreePos( &xPreParsedReader );
811077bc:	01204534 	movhi	r4,33044
811077c0:	2137e204 	addi	r4,r4,-8312
811077c4:	1107dd80 	call	81107dd8 <setPreAckSenderFreePos>
811077c8:	e0bfee15 	stw	r2,-72(fp)
                    if ( bSuccess == FALSE ) {
811077cc:	e0bfee17 	ldw	r2,-72(fp)
811077d0:	1000011e 	bne	r2,zero,811077d8 <vReceiverUartTask+0x160>
                        vFailSendNack();
811077d4:	110b7940 	call	8110b794 <vFailSendNack>
                    }
                    eReaderRXMode = sGetRxUart;
811077d8:	00800044 	movi	r2,1
811077dc:	e0bfed15 	stw	r2,-76(fp)
                }

                break;
811077e0:	00002006 	br	81107864 <vReceiverUartTask+0x1ec>
            case sSendToParser:

                /* Try to send ack to the Ack Sender Task*/
                bSuccess = setPreAckSenderFreePos( &xPreParsedReader );
811077e4:	01204534 	movhi	r4,33044
811077e8:	2137e204 	addi	r4,r4,-8312
811077ec:	1107dd80 	call	81107dd8 <setPreAckSenderFreePos>
811077f0:	e0bfee15 	stw	r2,-72(fp)
                if ( bSuccess == TRUE ) {
811077f4:	e0bfee17 	ldw	r2,-72(fp)
811077f8:	10800058 	cmpnei	r2,r2,1
811077fc:	1000081e 	bne	r2,zero,81107820 <vReceiverUartTask+0x1a8>
                    /* If was possible to send ack, then try to send the command to the Parser Task*/
                    bSuccess = setPreParsedFreePos( &xPreParsedReader );
81107800:	01204534 	movhi	r4,33044
81107804:	2137e204 	addi	r4,r4,-8312
81107808:	1107c780 	call	81107c78 <setPreParsedFreePos>
8110780c:	e0bfee15 	stw	r2,-72(fp)
                    if ( bSuccess == FALSE ) {
81107810:	e0bfee17 	ldw	r2,-72(fp)
81107814:	1000031e 	bne	r2,zero,81107824 <vReceiverUartTask+0x1ac>
                        //TODO
                        /* At this point ack was sent but the command was not sent to the Parser task
                           should sent an error message for the NUC and maye to the SGSE*/
                        vFailSetPreParsedBuffer();
81107818:	110b8640 	call	8110b864 <vFailSetPreParsedBuffer>
8110781c:	00000106 	br	81107824 <vReceiverUartTask+0x1ac>
                    }
                } else {
                    vFailSetPreAckSenderBuffer();
81107820:	110b7fc0 	call	8110b7fc <vFailSetPreAckSenderBuffer>
                }
                /* If is not possible to send the ACK for this command then we don't process the command,
                   because it will be sent again by the NUC and we won't wast processing performing the command twice.*/
                eReaderRXMode = sGetRxUart;
81107824:	00800044 	movi	r2,1
81107828:	e0bfed15 	stw	r2,-76(fp)
                break;
8110782c:	00000d06 	br	81107864 <vReceiverUartTask+0x1ec>
            case sSendToACKReceiver:

                bSuccess = setPreAckReceiverFreePos( &xPreParsedReader );
81107830:	01204534 	movhi	r4,33044
81107834:	2137e204 	addi	r4,r4,-8312
81107838:	1107f7c0 	call	81107f7c <setPreAckReceiverFreePos>
8110783c:	e0bfee15 	stw	r2,-72(fp)
                if ( bSuccess == FALSE ) {
81107840:	e0bfee17 	ldw	r2,-72(fp)
81107844:	1000011e 	bne	r2,zero,8110784c <vReceiverUartTask+0x1d4>
                    /*If was not possible to receive the ack do nothing.*/
                    vFailSetPreAckReceiverBuffer();
81107848:	110b8cc0 	call	8110b8cc <vFailSetPreAckReceiverBuffer>
                }
                eReaderRXMode = sGetRxUart;
8110784c:	00800044 	movi	r2,1
81107850:	e0bfed15 	stw	r2,-76(fp)
                break;
81107854:	00000306 	br	81107864 <vReceiverUartTask+0x1ec>
            default:
                eReaderRXMode = sGetRxUart;
81107858:	00800044 	movi	r2,1
8110785c:	e0bfed15 	stw	r2,-76(fp)
                break;
81107860:	0001883a 	nop
        }

    }
81107864:	003f9406 	br	811076b8 <__reset+0xfb0e76b8>

81107868 <bPreParser>:
/*  This function will parse the buffer into a command, will identify if is an request or reply
    also will separate all the values separated by ':'. If the command isn't complete (';' in the final)
    it will return false. */
    /* Max size of parsed value is 6 digits, for now*/
bool bPreParser( char *buffer, tPreParsed *xPerParcedBuffer )
{
81107868:	defff204 	addi	sp,sp,-56
8110786c:	de00012e 	bgeu	sp,et,81107874 <bPreParser+0xc>
81107870:	003b68fa 	trap	3
81107874:	dfc00d15 	stw	ra,52(sp)
81107878:	df000c15 	stw	fp,48(sp)
8110787c:	dc000b15 	stw	r16,44(sp)
81107880:	df000c04 	addi	fp,sp,48
81107884:	e13ffd15 	stw	r4,-12(fp)
81107888:	e17ffe15 	stw	r5,-8(fp)
    bool bSuccess = FALSE;
8110788c:	e03ff415 	stw	zero,-48(fp)
    short int siStrLen, siTeminador, siIniReq, siIniResp, siIniACK, siIniNACK, siCRC;
    unsigned char i;
	char c, *p_inteiro;
	char inteiro[6]; /* Max size of parsed value is 6 digits, for now */

    siStrLen = strlen(buffer);
81107890:	e13ffd17 	ldw	r4,-12(fp)
81107894:	110ffb80 	call	8110ffb8 <strlen>
81107898:	e0bff70d 	sth	r2,-36(fp)
    siTeminador = siPosStr(buffer, FINAL_CHAR);
8110789c:	01400ec4 	movi	r5,59
811078a0:	e13ffd17 	ldw	r4,-12(fp)
811078a4:	1109fc00 	call	81109fc0 <siPosStr>
811078a8:	e0bff78d 	sth	r2,-34(fp)
    siIniACK = siPosStr(buffer, ACK_CHAR);
811078ac:	01401004 	movi	r5,64
811078b0:	e13ffd17 	ldw	r4,-12(fp)
811078b4:	1109fc00 	call	81109fc0 <siPosStr>
811078b8:	e0bff80d 	sth	r2,-32(fp)
    siIniNACK = siPosStr(buffer, NACK_CHAR);
811078bc:	014008c4 	movi	r5,35
811078c0:	e13ffd17 	ldw	r4,-12(fp)
811078c4:	1109fc00 	call	81109fc0 <siPosStr>
811078c8:	e0bff88d 	sth	r2,-30(fp)
    siIniACK = min_sim(siIniACK, siIniNACK);
811078cc:	e17ff80b 	ldhu	r5,-32(fp)
811078d0:	e0bff88b 	ldhu	r2,-30(fp)
811078d4:	10ffffcc 	andi	r3,r2,65535
811078d8:	18e0001c 	xori	r3,r3,32768
811078dc:	18e00004 	addi	r3,r3,-32768
811078e0:	293fffcc 	andi	r4,r5,65535
811078e4:	2120001c 	xori	r4,r4,32768
811078e8:	21200004 	addi	r4,r4,-32768
811078ec:	20c0010e 	bge	r4,r3,811078f4 <bPreParser+0x8c>
811078f0:	2805883a 	mov	r2,r5
811078f4:	e0bff80d 	sth	r2,-32(fp)
    siIniReq = siPosStr(buffer, START_REQUEST_CHAR);
811078f8:	01400fc4 	movi	r5,63
811078fc:	e13ffd17 	ldw	r4,-12(fp)
81107900:	1109fc00 	call	81109fc0 <siPosStr>
81107904:	e0bff90d 	sth	r2,-28(fp)
    siIniResp = siPosStr(buffer, START_REPLY_CHAR);
81107908:	01400844 	movi	r5,33
8110790c:	e13ffd17 	ldw	r4,-12(fp)
81107910:	1109fc00 	call	81109fc0 <siPosStr>
81107914:	e0bff98d 	sth	r2,-26(fp)
    siIniReq = min_sim(siIniReq, siIniResp);
81107918:	e17ff90b 	ldhu	r5,-28(fp)
8110791c:	e0bff98b 	ldhu	r2,-26(fp)
81107920:	10ffffcc 	andi	r3,r2,65535
81107924:	18e0001c 	xori	r3,r3,32768
81107928:	18e00004 	addi	r3,r3,-32768
8110792c:	293fffcc 	andi	r4,r5,65535
81107930:	2120001c 	xori	r4,r4,32768
81107934:	21200004 	addi	r4,r4,-32768
81107938:	20c0010e 	bge	r4,r3,81107940 <bPreParser+0xd8>
8110793c:	2805883a 	mov	r2,r5
81107940:	e0bff90d 	sth	r2,-28(fp)
    siIniReq = min_sim(siIniReq, siIniACK);
81107944:	e17ff90b 	ldhu	r5,-28(fp)
81107948:	e0bff80b 	ldhu	r2,-32(fp)
8110794c:	10ffffcc 	andi	r3,r2,65535
81107950:	18e0001c 	xori	r3,r3,32768
81107954:	18e00004 	addi	r3,r3,-32768
81107958:	293fffcc 	andi	r4,r5,65535
8110795c:	2120001c 	xori	r4,r4,32768
81107960:	21200004 	addi	r4,r4,-32768
81107964:	20c0010e 	bge	r4,r3,8110796c <bPreParser+0x104>
81107968:	2805883a 	mov	r2,r5
8110796c:	e0bff90d 	sth	r2,-28(fp)
    siCRC = siPosStr(buffer, SEPARATOR_CRC);
81107970:	01401f04 	movi	r5,124
81107974:	e13ffd17 	ldw	r4,-12(fp)
81107978:	1109fc00 	call	81109fc0 <siPosStr>
8110797c:	e0bffa0d 	sth	r2,-24(fp)

    /* Check if there is [!|?] , |, ; in the packet*/
    if ( (siTeminador == (siStrLen-1)) && (siCRC < siTeminador) && (siIniReq < siCRC) ) {
81107980:	e0fff78f 	ldh	r3,-34(fp)
81107984:	e0bff70f 	ldh	r2,-36(fp)
81107988:	10bfffc4 	addi	r2,r2,-1
8110798c:	1880ac1e 	bne	r3,r2,81107c40 <bPreParser+0x3d8>
81107990:	e0fffa0f 	ldh	r3,-24(fp)
81107994:	e0bff78f 	ldh	r2,-34(fp)
81107998:	1880a90e 	bge	r3,r2,81107c40 <bPreParser+0x3d8>
8110799c:	e0fff90f 	ldh	r3,-28(fp)
811079a0:	e0bffa0f 	ldh	r2,-24(fp)
811079a4:	1880a60e 	bge	r3,r2,81107c40 <bPreParser+0x3d8>

        xPerParcedBuffer->ucCalculatedCRC8 = ucCrc8wInit(&buffer[siIniReq] , (siCRC - siIniReq) );
811079a8:	e0bff90f 	ldh	r2,-28(fp)
811079ac:	e0fffd17 	ldw	r3,-12(fp)
811079b0:	1889883a 	add	r4,r3,r2
811079b4:	e0fffa0f 	ldh	r3,-24(fp)
811079b8:	e0bff90f 	ldh	r2,-28(fp)
811079bc:	1885c83a 	sub	r2,r3,r2
811079c0:	100b883a 	mov	r5,r2
811079c4:	110adc00 	call	8110adc0 <ucCrc8wInit>
811079c8:	1007883a 	mov	r3,r2
811079cc:	e0bffe17 	ldw	r2,-8(fp)
811079d0:	10c01205 	stb	r3,72(r2)
        xPerParcedBuffer->cType = buffer[siIniReq];
811079d4:	e0bff90f 	ldh	r2,-28(fp)
811079d8:	e0fffd17 	ldw	r3,-12(fp)
811079dc:	1885883a 	add	r2,r3,r2
811079e0:	10c00003 	ldbu	r3,0(r2)
811079e4:	e0bffe17 	ldw	r2,-8(fp)
811079e8:	10c00105 	stb	r3,4(r2)

        if (xPerParcedBuffer->cType == NACK_CHAR ) {
811079ec:	e0bffe17 	ldw	r2,-8(fp)
811079f0:	10800103 	ldbu	r2,4(r2)
811079f4:	10803fcc 	andi	r2,r2,255
811079f8:	1080201c 	xori	r2,r2,128
811079fc:	10bfe004 	addi	r2,r2,-128
81107a00:	108008d8 	cmpnei	r2,r2,35
81107a04:	1000091e 	bne	r2,zero,81107a2c <bPreParser+0x1c4>
            xPerParcedBuffer->ucMessageCRC8 = 54; /*CRC8("#")=54*/
81107a08:	e0bffe17 	ldw	r2,-8(fp)
81107a0c:	00c00d84 	movi	r3,54
81107a10:	10c01245 	stb	r3,73(r2)
            xPerParcedBuffer->ucCalculatedCRC8 = 54; /*Even if calculated crc is wrong we should re-send the commands*/
81107a14:	e0bffe17 	ldw	r2,-8(fp)
81107a18:	00c00d84 	movi	r3,54
81107a1c:	10c01205 	stb	r3,72(r2)
            bSuccess = TRUE;
81107a20:	00800044 	movi	r2,1
81107a24:	e0bff415 	stw	r2,-48(fp)
    if ( (siTeminador == (siStrLen-1)) && (siCRC < siTeminador) && (siIniReq < siCRC) ) {

        xPerParcedBuffer->ucCalculatedCRC8 = ucCrc8wInit(&buffer[siIniReq] , (siCRC - siIniReq) );
        xPerParcedBuffer->cType = buffer[siIniReq];

        if (xPerParcedBuffer->cType == NACK_CHAR ) {
81107a28:	00008606 	br	81107c44 <bPreParser+0x3dc>
            xPerParcedBuffer->ucMessageCRC8 = 54; /*CRC8("#")=54*/
            xPerParcedBuffer->ucCalculatedCRC8 = 54; /*Even if calculated crc is wrong we should re-send the commands*/
            bSuccess = TRUE;
        } else {
            xPerParcedBuffer->cCommand = buffer[siIniReq+1];
81107a2c:	e0bff90f 	ldh	r2,-28(fp)
81107a30:	10800044 	addi	r2,r2,1
81107a34:	e0fffd17 	ldw	r3,-12(fp)
81107a38:	1885883a 	add	r2,r3,r2
81107a3c:	10c00003 	ldbu	r3,0(r2)
81107a40:	e0bffe17 	ldw	r2,-8(fp)
81107a44:	10c00145 	stb	r3,5(r2)
            xPerParcedBuffer->ucNofBytes = 0;
81107a48:	e0bffe17 	ldw	r2,-8(fp)
81107a4c:	10000185 	stb	zero,6(r2)
            memset( xPerParcedBuffer->usiValues , 0 , SIZE_UCVALUES);
81107a50:	e0bffe17 	ldw	r2,-8(fp)
81107a54:	10800204 	addi	r2,r2,8
81107a58:	01800804 	movi	r6,32
81107a5c:	000b883a 	mov	r5,zero
81107a60:	1009883a 	mov	r4,r2
81107a64:	110f76c0 	call	8110f76c <memset>

            i = siIniReq + 3; /* "?C:i..." */
81107a68:	e0bff90b 	ldhu	r2,-28(fp)
81107a6c:	108000c4 	addi	r2,r2,3
81107a70:	e0bff505 	stb	r2,-44(fp)
            do {
                p_inteiro = inteiro;
81107a74:	e0bffac4 	addi	r2,fp,-21
81107a78:	e0bff615 	stw	r2,-40(fp)
                memset( &(inteiro) , 0 , sizeof( inteiro ) );
81107a7c:	e0bffac4 	addi	r2,fp,-21
81107a80:	01800184 	movi	r6,6
81107a84:	000b883a 	mov	r5,zero
81107a88:	1009883a 	mov	r4,r2
81107a8c:	110f76c0 	call	8110f76c <memset>
                do {
                    c = buffer[i];
81107a90:	e0bff503 	ldbu	r2,-44(fp)
81107a94:	e0fffd17 	ldw	r3,-12(fp)
81107a98:	1885883a 	add	r2,r3,r2
81107a9c:	10800003 	ldbu	r2,0(r2)
81107aa0:	e0bffa85 	stb	r2,-22(fp)
                    if ( isdigit( c ) ) {
81107aa4:	d0e00917 	ldw	r3,-32732(gp)
81107aa8:	e0bffa87 	ldb	r2,-22(fp)
81107aac:	10800044 	addi	r2,r2,1
81107ab0:	1885883a 	add	r2,r3,r2
81107ab4:	10800003 	ldbu	r2,0(r2)
81107ab8:	10803fcc 	andi	r2,r2,255
81107abc:	1080010c 	andi	r2,r2,4
81107ac0:	10000626 	beq	r2,zero,81107adc <bPreParser+0x274>
                        (*p_inteiro) = c;
81107ac4:	e0bff617 	ldw	r2,-40(fp)
81107ac8:	e0fffa83 	ldbu	r3,-22(fp)
81107acc:	10c00005 	stb	r3,0(r2)
                        p_inteiro++;
81107ad0:	e0bff617 	ldw	r2,-40(fp)
81107ad4:	10800044 	addi	r2,r2,1
81107ad8:	e0bff615 	stw	r2,-40(fp)
                    }
                    i++;
81107adc:	e0bff503 	ldbu	r2,-44(fp)
81107ae0:	10800044 	addi	r2,r2,1
81107ae4:	e0bff505 	stb	r2,-44(fp)
                } while ( (siStrLen>i) && ( ( c != SEPARATOR_CHAR ) && ( c != FINAL_CHAR ) && ( c != SEPARATOR_CRC )) ); //ASCII: 58 = ':' 59 = ';' and '|'
81107ae8:	e0bff70f 	ldh	r2,-36(fp)
81107aec:	e0fff503 	ldbu	r3,-44(fp)
81107af0:	1880090e 	bge	r3,r2,81107b18 <bPreParser+0x2b0>
81107af4:	e0bffa87 	ldb	r2,-22(fp)
81107af8:	10800ea0 	cmpeqi	r2,r2,58
81107afc:	1000061e 	bne	r2,zero,81107b18 <bPreParser+0x2b0>
81107b00:	e0bffa87 	ldb	r2,-22(fp)
81107b04:	10800ee0 	cmpeqi	r2,r2,59
81107b08:	1000031e 	bne	r2,zero,81107b18 <bPreParser+0x2b0>
81107b0c:	e0bffa87 	ldb	r2,-22(fp)
81107b10:	10801f18 	cmpnei	r2,r2,124
81107b14:	103fde1e 	bne	r2,zero,81107a90 <__reset+0xfb0e7a90>
                (*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
81107b18:	e0bff617 	ldw	r2,-40(fp)
81107b1c:	00c00284 	movi	r3,10
81107b20:	10c00005 	stb	r3,0(r2)

                if ( ( c == SEPARATOR_CHAR ) || ( c == SEPARATOR_CRC ) ) {
81107b24:	e0bffa87 	ldb	r2,-22(fp)
81107b28:	10800ea0 	cmpeqi	r2,r2,58
81107b2c:	1000031e 	bne	r2,zero,81107b3c <bPreParser+0x2d4>
81107b30:	e0bffa87 	ldb	r2,-22(fp)
81107b34:	10801f18 	cmpnei	r2,r2,124
81107b38:	10001a1e 	bne	r2,zero,81107ba4 <bPreParser+0x33c>
                    xPerParcedBuffer->usiValues[min_sim(xPerParcedBuffer->ucNofBytes,SIZE_UCVALUES)] = (unsigned short int)atoi( inteiro );
81107b3c:	e0bffe17 	ldw	r2,-8(fp)
81107b40:	10800183 	ldbu	r2,6(r2)
81107b44:	10803fcc 	andi	r2,r2,255
81107b48:	10800828 	cmpgeui	r2,r2,32
81107b4c:	1000041e 	bne	r2,zero,81107b60 <bPreParser+0x2f8>
81107b50:	e0bffe17 	ldw	r2,-8(fp)
81107b54:	10800183 	ldbu	r2,6(r2)
81107b58:	14003fcc 	andi	r16,r2,255
81107b5c:	00000106 	br	81107b64 <bPreParser+0x2fc>
81107b60:	04000804 	movi	r16,32
81107b64:	e0bffac4 	addi	r2,fp,-21
81107b68:	1009883a 	mov	r4,r2
81107b6c:	110e4c00 	call	8110e4c0 <atoi>
81107b70:	1009883a 	mov	r4,r2
81107b74:	e0fffe17 	ldw	r3,-8(fp)
81107b78:	80800104 	addi	r2,r16,4
81107b7c:	1085883a 	add	r2,r2,r2
81107b80:	1885883a 	add	r2,r3,r2
81107b84:	1100000d 	sth	r4,0(r2)
                    xPerParcedBuffer->ucNofBytes++;
81107b88:	e0bffe17 	ldw	r2,-8(fp)
81107b8c:	10800183 	ldbu	r2,6(r2)
81107b90:	10800044 	addi	r2,r2,1
81107b94:	1007883a 	mov	r3,r2
81107b98:	e0bffe17 	ldw	r2,-8(fp)
81107b9c:	10c00185 	stb	r3,6(r2)
81107ba0:	00000906 	br	81107bc8 <bPreParser+0x360>
                }
                else if ( c == FINAL_CHAR )
81107ba4:	e0bffa87 	ldb	r2,-22(fp)
81107ba8:	10800ed8 	cmpnei	r2,r2,59
81107bac:	1000061e 	bne	r2,zero,81107bc8 <bPreParser+0x360>
                {
                    xPerParcedBuffer->ucMessageCRC8 = (unsigned char)atoi( inteiro );
81107bb0:	e0bffac4 	addi	r2,fp,-21
81107bb4:	1009883a 	mov	r4,r2
81107bb8:	110e4c00 	call	8110e4c0 <atoi>
81107bbc:	1007883a 	mov	r3,r2
81107bc0:	e0bffe17 	ldw	r2,-8(fp)
81107bc4:	10c01245 	stb	r3,73(r2)
                }

            } while ( (c != FINAL_CHAR) && (siStrLen>i) );
81107bc8:	e0bffa87 	ldb	r2,-22(fp)
81107bcc:	10800ee0 	cmpeqi	r2,r2,59
81107bd0:	1000031e 	bne	r2,zero,81107be0 <bPreParser+0x378>
81107bd4:	e0bff70f 	ldh	r2,-36(fp)
81107bd8:	e0fff503 	ldbu	r3,-44(fp)
81107bdc:	18bfa516 	blt	r3,r2,81107a74 <__reset+0xfb0e7a74>

            if ( c == FINAL_CHAR )
81107be0:	e0bffa87 	ldb	r2,-22(fp)
81107be4:	10800ed8 	cmpnei	r2,r2,59
81107be8:	1000131e 	bne	r2,zero,81107c38 <bPreParser+0x3d0>
                if ( xPerParcedBuffer->ucMessageCRC8 == xPerParcedBuffer->ucCalculatedCRC8 ){
81107bec:	e0bffe17 	ldw	r2,-8(fp)
81107bf0:	10c01243 	ldbu	r3,73(r2)
81107bf4:	e0bffe17 	ldw	r2,-8(fp)
81107bf8:	10801203 	ldbu	r2,72(r2)
81107bfc:	18c03fcc 	andi	r3,r3,255
81107c00:	10803fcc 	andi	r2,r2,255
81107c04:	1880031e 	bne	r3,r2,81107c14 <bPreParser+0x3ac>
                    bSuccess = TRUE;
81107c08:	00800044 	movi	r2,1
81107c0c:	e0bff415 	stw	r2,-48(fp)
    if ( (siTeminador == (siStrLen-1)) && (siCRC < siTeminador) && (siIniReq < siCRC) ) {

        xPerParcedBuffer->ucCalculatedCRC8 = ucCrc8wInit(&buffer[siIniReq] , (siCRC - siIniReq) );
        xPerParcedBuffer->cType = buffer[siIniReq];

        if (xPerParcedBuffer->cType == NACK_CHAR ) {
81107c10:	00000c06 	br	81107c44 <bPreParser+0x3dc>
                if ( xPerParcedBuffer->ucMessageCRC8 == xPerParcedBuffer->ucCalculatedCRC8 ){
                    bSuccess = TRUE;
                } else {
                    /* Wrong CRC */
                    #ifdef DEBUG_ON
                        debug(fp,"Wrong CRC. Pre Parsed.\n");
81107c14:	d0a05a17 	ldw	r2,-32408(gp)
81107c18:	100f883a 	mov	r7,r2
81107c1c:	018005c4 	movi	r6,23
81107c20:	01400044 	movi	r5,1
81107c24:	01204534 	movhi	r4,33044
81107c28:	21287004 	addi	r4,r4,-24128
81107c2c:	110ec080 	call	8110ec08 <fwrite>
                    #endif
                    bSuccess = FALSE;
81107c30:	e03ff415 	stw	zero,-48(fp)
    if ( (siTeminador == (siStrLen-1)) && (siCRC < siTeminador) && (siIniReq < siCRC) ) {

        xPerParcedBuffer->ucCalculatedCRC8 = ucCrc8wInit(&buffer[siIniReq] , (siCRC - siIniReq) );
        xPerParcedBuffer->cType = buffer[siIniReq];

        if (xPerParcedBuffer->cType == NACK_CHAR ) {
81107c34:	00000306 	br	81107c44 <bPreParser+0x3dc>
                    #endif
                    bSuccess = FALSE;
                }

            else
                bSuccess = FALSE; /*Index overflow in the buffer*/
81107c38:	e03ff415 	stw	zero,-48(fp)
    if ( (siTeminador == (siStrLen-1)) && (siCRC < siTeminador) && (siIniReq < siCRC) ) {

        xPerParcedBuffer->ucCalculatedCRC8 = ucCrc8wInit(&buffer[siIniReq] , (siCRC - siIniReq) );
        xPerParcedBuffer->cType = buffer[siIniReq];

        if (xPerParcedBuffer->cType == NACK_CHAR ) {
81107c3c:	00000106 	br	81107c44 <bPreParser+0x3dc>
            else
                bSuccess = FALSE; /*Index overflow in the buffer*/
            }
    } else {
        /*Malformed Packet*/
        bSuccess = FALSE;
81107c40:	e03ff415 	stw	zero,-48(fp)
    }
    memset(buffer,0,strlen(buffer));
81107c44:	e13ffd17 	ldw	r4,-12(fp)
81107c48:	110ffb80 	call	8110ffb8 <strlen>
81107c4c:	100d883a 	mov	r6,r2
81107c50:	000b883a 	mov	r5,zero
81107c54:	e13ffd17 	ldw	r4,-12(fp)
81107c58:	110f76c0 	call	8110f76c <memset>

    return bSuccess;
81107c5c:	e0bff417 	ldw	r2,-48(fp)
}
81107c60:	e6ffff04 	addi	sp,fp,-4
81107c64:	dfc00217 	ldw	ra,8(sp)
81107c68:	df000117 	ldw	fp,4(sp)
81107c6c:	dc000017 	ldw	r16,0(sp)
81107c70:	dec00304 	addi	sp,sp,12
81107c74:	f800283a 	ret

81107c78 <setPreParsedFreePos>:

/* Search for a Free location to put the pre parsed packet in the pipe for the ParserTask */
bool setPreParsedFreePos( tPreParsed *xPrePReader ) {
81107c78:	defffb04 	addi	sp,sp,-20
81107c7c:	de00012e 	bgeu	sp,et,81107c84 <setPreParsedFreePos+0xc>
81107c80:	003b68fa 	trap	3
81107c84:	dfc00415 	stw	ra,16(sp)
81107c88:	df000315 	stw	fp,12(sp)
81107c8c:	df000304 	addi	fp,sp,12
81107c90:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
81107c94:	e03ffd15 	stw	zero,-12(fp)
    INT8U error_code;
    unsigned char ucCountRetries = 0;
81107c98:	e03ffe05 	stb	zero,-8(fp)

    while ( ( bSuccess == FALSE ) && ( ucCountRetries < 2 ) ) {
81107c9c:	00004306 	br	81107dac <setPreParsedFreePos+0x134>

        OSMutexPend(xMutexPreParsed, 2, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait 2 ticks = 2 ms */
81107ca0:	d0a06117 	ldw	r2,-32380(gp)
81107ca4:	e0fffe84 	addi	r3,fp,-6
81107ca8:	180d883a 	mov	r6,r3
81107cac:	01400084 	movi	r5,2
81107cb0:	1009883a 	mov	r4,r2
81107cb4:	11298340 	call	81129834 <OSMutexPend>
        if ( error_code == OS_NO_ERR ) {
81107cb8:	e0bffe83 	ldbu	r2,-6(fp)
81107cbc:	10803fcc 	andi	r2,r2,255
81107cc0:	1000371e 	bne	r2,zero,81107da0 <setPreParsedFreePos+0x128>
            /* Have free access to the buffer, check if there's any no threated command using the cType  */

            for(unsigned char i = 0; i < N_PREPARSED_ENTRIES; i++)
81107cc4:	e03ffe45 	stb	zero,-7(fp)
81107cc8:	00002e06 	br	81107d84 <setPreParsedFreePos+0x10c>
            {
                if ( xPreParsed[i].cType == 0 ) {
81107ccc:	e0fffe43 	ldbu	r3,-7(fp)
81107cd0:	00a045b4 	movhi	r2,33046
81107cd4:	1082f304 	addi	r2,r2,3020
81107cd8:	18c01324 	muli	r3,r3,76
81107cdc:	10c5883a 	add	r2,r2,r3
81107ce0:	10800104 	addi	r2,r2,4
81107ce4:	10800003 	ldbu	r2,0(r2)
81107ce8:	10803fcc 	andi	r2,r2,255
81107cec:	1080201c 	xori	r2,r2,128
81107cf0:	10bfe004 	addi	r2,r2,-128
81107cf4:	1000201e 	bne	r2,zero,81107d78 <setPreParsedFreePos+0x100>
                    /* Locate a free place*/
                    /* Need to check if the performance is the same as memcpy*/
                    xPreParsed[i] = (*xPrePReader);
81107cf8:	e0fffe43 	ldbu	r3,-7(fp)
81107cfc:	00a045b4 	movhi	r2,33046
81107d00:	1082f304 	addi	r2,r2,3020
81107d04:	18c01324 	muli	r3,r3,76
81107d08:	10c7883a 	add	r3,r2,r3
81107d0c:	e0bfff17 	ldw	r2,-4(fp)
81107d10:	1009883a 	mov	r4,r2
81107d14:	00801304 	movi	r2,76
81107d18:	100d883a 	mov	r6,r2
81107d1c:	200b883a 	mov	r5,r4
81107d20:	1809883a 	mov	r4,r3
81107d24:	110f61c0 	call	8110f61c <memcpy>
                    error_code = OSSemPost(xSemCountPreParsed);
81107d28:	d0a05c17 	ldw	r2,-32400(gp)
81107d2c:	1009883a 	mov	r4,r2
81107d30:	112bbc80 	call	8112bbc8 <OSSemPost>
81107d34:	e0bffe85 	stb	r2,-6(fp)
                    if ( error_code == OS_ERR_NONE ) {
81107d38:	e0bffe83 	ldbu	r2,-6(fp)
81107d3c:	10803fcc 	andi	r2,r2,255
81107d40:	1000031e 	bne	r2,zero,81107d50 <setPreParsedFreePos+0xd8>
                        bSuccess = TRUE;
81107d44:	00800044 	movi	r2,1
81107d48:	e0bffd15 	stw	r2,-12(fp)
                    } else {
                        vFailSendPreParsedSemaphore();
                        xPreParsed[i].cType = 0;
                        bSuccess = FALSE;
                    }
                    break;
81107d4c:	00001006 	br	81107d90 <setPreParsedFreePos+0x118>
                    xPreParsed[i] = (*xPrePReader);
                    error_code = OSSemPost(xSemCountPreParsed);
                    if ( error_code == OS_ERR_NONE ) {
                        bSuccess = TRUE;
                    } else {
                        vFailSendPreParsedSemaphore();
81107d50:	110afec0 	call	8110afec <vFailSendPreParsedSemaphore>
                        xPreParsed[i].cType = 0;
81107d54:	e0fffe43 	ldbu	r3,-7(fp)
81107d58:	00a045b4 	movhi	r2,33046
81107d5c:	1082f304 	addi	r2,r2,3020
81107d60:	18c01324 	muli	r3,r3,76
81107d64:	10c5883a 	add	r2,r2,r3
81107d68:	10800104 	addi	r2,r2,4
81107d6c:	10000005 	stb	zero,0(r2)
                        bSuccess = FALSE;
81107d70:	e03ffd15 	stw	zero,-12(fp)
                    }
                    break;
81107d74:	00000606 	br	81107d90 <setPreParsedFreePos+0x118>

        OSMutexPend(xMutexPreParsed, 2, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait 2 ticks = 2 ms */
        if ( error_code == OS_NO_ERR ) {
            /* Have free access to the buffer, check if there's any no threated command using the cType  */

            for(unsigned char i = 0; i < N_PREPARSED_ENTRIES; i++)
81107d78:	e0bffe43 	ldbu	r2,-7(fp)
81107d7c:	10800044 	addi	r2,r2,1
81107d80:	e0bffe45 	stb	r2,-7(fp)
81107d84:	e0bffe43 	ldbu	r2,-7(fp)
81107d88:	10800130 	cmpltui	r2,r2,4
81107d8c:	103fcf1e 	bne	r2,zero,81107ccc <__reset+0xfb0e7ccc>
                        bSuccess = FALSE;
                    }
                    break;
                }
            }
            OSMutexPost(xMutexPreParsed);
81107d90:	d0a06117 	ldw	r2,-32380(gp)
81107d94:	1009883a 	mov	r4,r2
81107d98:	1129dd80 	call	81129dd8 <OSMutexPost>
81107d9c:	00000306 	br	81107dac <setPreParsedFreePos+0x134>
        } else {
            ucCountRetries++;
81107da0:	e0bffe03 	ldbu	r2,-8(fp)
81107da4:	10800044 	addi	r2,r2,1
81107da8:	e0bffe05 	stb	r2,-8(fp)
bool setPreParsedFreePos( tPreParsed *xPrePReader ) {
    bool bSuccess = FALSE;
    INT8U error_code;
    unsigned char ucCountRetries = 0;

    while ( ( bSuccess == FALSE ) && ( ucCountRetries < 2 ) ) {
81107dac:	e0bffd17 	ldw	r2,-12(fp)
81107db0:	1000031e 	bne	r2,zero,81107dc0 <setPreParsedFreePos+0x148>
81107db4:	e0bffe03 	ldbu	r2,-8(fp)
81107db8:	108000b0 	cmpltui	r2,r2,2
81107dbc:	103fb81e 	bne	r2,zero,81107ca0 <__reset+0xfb0e7ca0>
            OSMutexPost(xMutexPreParsed);
        } else {
            ucCountRetries++;
        }
    }
    return bSuccess;
81107dc0:	e0bffd17 	ldw	r2,-12(fp)
}
81107dc4:	e037883a 	mov	sp,fp
81107dc8:	dfc00117 	ldw	ra,4(sp)
81107dcc:	df000017 	ldw	fp,0(sp)
81107dd0:	dec00204 	addi	sp,sp,8
81107dd4:	f800283a 	ret

81107dd8 <setPreAckSenderFreePos>:

/* Search for some free location in the xSenderACK array, that comunicates with the AckSenderTask */
bool setPreAckSenderFreePos( tPreParsed *xPrePReader ) {
81107dd8:	defffb04 	addi	sp,sp,-20
81107ddc:	de00012e 	bgeu	sp,et,81107de4 <setPreAckSenderFreePos+0xc>
81107de0:	003b68fa 	trap	3
81107de4:	dfc00415 	stw	ra,16(sp)
81107de8:	df000315 	stw	fp,12(sp)
81107dec:	df000304 	addi	fp,sp,12
81107df0:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
81107df4:	e03ffd15 	stw	zero,-12(fp)
    INT8U error_code;
    unsigned char ucCountRetries = 0;
81107df8:	e03ffe05 	stb	zero,-8(fp)

    /* Try to send the ACK/NACK packet to the Sender Ack Task only 2 times, to not block the fast receiver */
    while ( ( bSuccess == FALSE ) && ( ucCountRetries < 2 ) ) {
81107dfc:	00005406 	br	81107f50 <setPreAckSenderFreePos+0x178>

        OSMutexPend(xMutexSenderACK, 4, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait 4 ticks = 4 ms */
81107e00:	d0a06717 	ldw	r2,-32356(gp)
81107e04:	e0fffe84 	addi	r3,fp,-6
81107e08:	180d883a 	mov	r6,r3
81107e0c:	01400104 	movi	r5,4
81107e10:	1009883a 	mov	r4,r2
81107e14:	11298340 	call	81129834 <OSMutexPend>
        if ( error_code == OS_NO_ERR ) {
81107e18:	e0bffe83 	ldbu	r2,-6(fp)
81107e1c:	10803fcc 	andi	r2,r2,255
81107e20:	1000481e 	bne	r2,zero,81107f44 <setPreAckSenderFreePos+0x16c>
            /* Have free access to the buffer, check if there's any no threated command using the cType  */

            for(unsigned char i = 0; i < N_ACKS_SENDER; i++)
81107e24:	e03ffe45 	stb	zero,-7(fp)
81107e28:	00003f06 	br	81107f28 <setPreAckSenderFreePos+0x150>
            {
                if ( xSenderACK[i].cType == 0 ) {
81107e2c:	e0fffe43 	ldbu	r3,-7(fp)
81107e30:	00a045b4 	movhi	r2,33046
81107e34:	1082ef04 	addi	r2,r2,3004
81107e38:	18c7883a 	add	r3,r3,r3
81107e3c:	18c7883a 	add	r3,r3,r3
81107e40:	10c5883a 	add	r2,r2,r3
81107e44:	10800003 	ldbu	r2,0(r2)
81107e48:	10803fcc 	andi	r2,r2,255
81107e4c:	1080201c 	xori	r2,r2,128
81107e50:	10bfe004 	addi	r2,r2,-128
81107e54:	1000311e 	bne	r2,zero,81107f1c <setPreAckSenderFreePos+0x144>
                    /* Locate a free place*/
                    /* Need to check if the performance is the same as memcpy*/
                    xSenderACK[i].cType = xPrePReader->cType;
81107e58:	e0fffe43 	ldbu	r3,-7(fp)
81107e5c:	e0bfff17 	ldw	r2,-4(fp)
81107e60:	11000103 	ldbu	r4,4(r2)
81107e64:	00a045b4 	movhi	r2,33046
81107e68:	1082ef04 	addi	r2,r2,3004
81107e6c:	18c7883a 	add	r3,r3,r3
81107e70:	18c7883a 	add	r3,r3,r3
81107e74:	10c5883a 	add	r2,r2,r3
81107e78:	11000005 	stb	r4,0(r2)
                    xSenderACK[i].cCommand = xPrePReader->cCommand;
81107e7c:	e0fffe43 	ldbu	r3,-7(fp)
81107e80:	e0bfff17 	ldw	r2,-4(fp)
81107e84:	11000143 	ldbu	r4,5(r2)
81107e88:	00a045b4 	movhi	r2,33046
81107e8c:	1082ef04 	addi	r2,r2,3004
81107e90:	18c7883a 	add	r3,r3,r3
81107e94:	18c7883a 	add	r3,r3,r3
81107e98:	10c5883a 	add	r2,r2,r3
81107e9c:	10800044 	addi	r2,r2,1
81107ea0:	11000005 	stb	r4,0(r2)
                    xSenderACK[i].usiId = xPrePReader->usiValues[0]; /*The first value is always the command id*/
81107ea4:	e0fffe43 	ldbu	r3,-7(fp)
81107ea8:	e0bfff17 	ldw	r2,-4(fp)
81107eac:	1100020b 	ldhu	r4,8(r2)
81107eb0:	00a045b4 	movhi	r2,33046
81107eb4:	1082ef04 	addi	r2,r2,3004
81107eb8:	18c7883a 	add	r3,r3,r3
81107ebc:	18c7883a 	add	r3,r3,r3
81107ec0:	10c5883a 	add	r2,r2,r3
81107ec4:	10800084 	addi	r2,r2,2
81107ec8:	1100000d 	sth	r4,0(r2)

                    error_code = OSSemPost(xSemCountSenderACK);
81107ecc:	d0a05917 	ldw	r2,-32412(gp)
81107ed0:	1009883a 	mov	r4,r2
81107ed4:	112bbc80 	call	8112bbc8 <OSSemPost>
81107ed8:	e0bffe85 	stb	r2,-6(fp)
                    if ( error_code == OS_ERR_NONE ) {
81107edc:	e0bffe83 	ldbu	r2,-6(fp)
81107ee0:	10803fcc 	andi	r2,r2,255
81107ee4:	1000031e 	bne	r2,zero,81107ef4 <setPreAckSenderFreePos+0x11c>
                        bSuccess = TRUE;
81107ee8:	00800044 	movi	r2,1
81107eec:	e0bffd15 	stw	r2,-12(fp)
                    } else {
                        vFailSendPreAckSenderSemaphore();
                        xSenderACK[i].cType = 0;
                        bSuccess = FALSE;
                    }
                    break;
81107ef0:	00001006 	br	81107f34 <setPreAckSenderFreePos+0x15c>

                    error_code = OSSemPost(xSemCountSenderACK);
                    if ( error_code == OS_ERR_NONE ) {
                        bSuccess = TRUE;
                    } else {
                        vFailSendPreAckSenderSemaphore();
81107ef4:	110b0840 	call	8110b084 <vFailSendPreAckSenderSemaphore>
                        xSenderACK[i].cType = 0;
81107ef8:	e0fffe43 	ldbu	r3,-7(fp)
81107efc:	00a045b4 	movhi	r2,33046
81107f00:	1082ef04 	addi	r2,r2,3004
81107f04:	18c7883a 	add	r3,r3,r3
81107f08:	18c7883a 	add	r3,r3,r3
81107f0c:	10c5883a 	add	r2,r2,r3
81107f10:	10000005 	stb	zero,0(r2)
                        bSuccess = FALSE;
81107f14:	e03ffd15 	stw	zero,-12(fp)
                    }
                    break;
81107f18:	00000606 	br	81107f34 <setPreAckSenderFreePos+0x15c>

        OSMutexPend(xMutexSenderACK, 4, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait 4 ticks = 4 ms */
        if ( error_code == OS_NO_ERR ) {
            /* Have free access to the buffer, check if there's any no threated command using the cType  */

            for(unsigned char i = 0; i < N_ACKS_SENDER; i++)
81107f1c:	e0bffe43 	ldbu	r2,-7(fp)
81107f20:	10800044 	addi	r2,r2,1
81107f24:	e0bffe45 	stb	r2,-7(fp)
81107f28:	e0bffe43 	ldbu	r2,-7(fp)
81107f2c:	10800130 	cmpltui	r2,r2,4
81107f30:	103fbe1e 	bne	r2,zero,81107e2c <__reset+0xfb0e7e2c>
                        bSuccess = FALSE;
                    }
                    break;
                }
            }
            OSMutexPost(xMutexSenderACK);
81107f34:	d0a06717 	ldw	r2,-32356(gp)
81107f38:	1009883a 	mov	r4,r2
81107f3c:	1129dd80 	call	81129dd8 <OSMutexPost>
81107f40:	00000306 	br	81107f50 <setPreAckSenderFreePos+0x178>
        } else {
            ucCountRetries++;
81107f44:	e0bffe03 	ldbu	r2,-8(fp)
81107f48:	10800044 	addi	r2,r2,1
81107f4c:	e0bffe05 	stb	r2,-8(fp)
    bool bSuccess = FALSE;
    INT8U error_code;
    unsigned char ucCountRetries = 0;

    /* Try to send the ACK/NACK packet to the Sender Ack Task only 2 times, to not block the fast receiver */
    while ( ( bSuccess == FALSE ) && ( ucCountRetries < 2 ) ) {
81107f50:	e0bffd17 	ldw	r2,-12(fp)
81107f54:	1000031e 	bne	r2,zero,81107f64 <setPreAckSenderFreePos+0x18c>
81107f58:	e0bffe03 	ldbu	r2,-8(fp)
81107f5c:	108000b0 	cmpltui	r2,r2,2
81107f60:	103fa71e 	bne	r2,zero,81107e00 <__reset+0xfb0e7e00>
            OSMutexPost(xMutexSenderACK);
        } else {
            ucCountRetries++;
        }
    }
    return bSuccess;
81107f64:	e0bffd17 	ldw	r2,-12(fp)
}
81107f68:	e037883a 	mov	sp,fp
81107f6c:	dfc00117 	ldw	ra,4(sp)
81107f70:	df000017 	ldw	fp,0(sp)
81107f74:	dec00204 	addi	sp,sp,8
81107f78:	f800283a 	ret

81107f7c <setPreAckReceiverFreePos>:

/* Search for some free location in the xSenderACK array, that comunicates with the AckSenderTask */
bool setPreAckReceiverFreePos( tPreParsed *xPrePReader ) {
81107f7c:	defffb04 	addi	sp,sp,-20
81107f80:	de00012e 	bgeu	sp,et,81107f88 <setPreAckReceiverFreePos+0xc>
81107f84:	003b68fa 	trap	3
81107f88:	dfc00415 	stw	ra,16(sp)
81107f8c:	df000315 	stw	fp,12(sp)
81107f90:	df000304 	addi	fp,sp,12
81107f94:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
81107f98:	e03ffd15 	stw	zero,-12(fp)
    INT8U error_code;
    unsigned char ucCountRetries = 0;
81107f9c:	e03ffe05 	stb	zero,-8(fp)

    while ( ( bSuccess == FALSE ) && ( ucCountRetries < 2 ) ) {
81107fa0:	00005406 	br	811080f4 <setPreAckReceiverFreePos+0x178>

        OSMutexPend(xMutexReceivedACK, 2, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait 2 ticks = 2 ms */
81107fa4:	d0a05d17 	ldw	r2,-32396(gp)
81107fa8:	e0fffe84 	addi	r3,fp,-6
81107fac:	180d883a 	mov	r6,r3
81107fb0:	01400084 	movi	r5,2
81107fb4:	1009883a 	mov	r4,r2
81107fb8:	11298340 	call	81129834 <OSMutexPend>
        if ( error_code == OS_NO_ERR ) {
81107fbc:	e0bffe83 	ldbu	r2,-6(fp)
81107fc0:	10803fcc 	andi	r2,r2,255
81107fc4:	1000481e 	bne	r2,zero,811080e8 <setPreAckReceiverFreePos+0x16c>
            /* Have free access to the buffer, check if there's any no threated command using the cType  */

            for(unsigned char i = 0; i < N_ACKS_RECEIVED; i++)
81107fc8:	e03ffe45 	stb	zero,-7(fp)
81107fcc:	00003f06 	br	811080cc <setPreAckReceiverFreePos+0x150>
            {
                if ( xReceivedACK[i].cType == 0 ) {
81107fd0:	e0fffe43 	ldbu	r3,-7(fp)
81107fd4:	00a045b4 	movhi	r2,33046
81107fd8:	10baeb04 	addi	r2,r2,-5204
81107fdc:	18c7883a 	add	r3,r3,r3
81107fe0:	18c7883a 	add	r3,r3,r3
81107fe4:	10c5883a 	add	r2,r2,r3
81107fe8:	10800003 	ldbu	r2,0(r2)
81107fec:	10803fcc 	andi	r2,r2,255
81107ff0:	1080201c 	xori	r2,r2,128
81107ff4:	10bfe004 	addi	r2,r2,-128
81107ff8:	1000311e 	bne	r2,zero,811080c0 <setPreAckReceiverFreePos+0x144>
                    /* Locate a free place*/
                    /* Need to check if the performance is the same as memcpy*/
                    xReceivedACK[i].cType = xPrePReader->cType;
81107ffc:	e0fffe43 	ldbu	r3,-7(fp)
81108000:	e0bfff17 	ldw	r2,-4(fp)
81108004:	11000103 	ldbu	r4,4(r2)
81108008:	00a045b4 	movhi	r2,33046
8110800c:	10baeb04 	addi	r2,r2,-5204
81108010:	18c7883a 	add	r3,r3,r3
81108014:	18c7883a 	add	r3,r3,r3
81108018:	10c5883a 	add	r2,r2,r3
8110801c:	11000005 	stb	r4,0(r2)
                    xReceivedACK[i].cCommand = xPrePReader->cCommand;
81108020:	e0fffe43 	ldbu	r3,-7(fp)
81108024:	e0bfff17 	ldw	r2,-4(fp)
81108028:	11000143 	ldbu	r4,5(r2)
8110802c:	00a045b4 	movhi	r2,33046
81108030:	10baeb04 	addi	r2,r2,-5204
81108034:	18c7883a 	add	r3,r3,r3
81108038:	18c7883a 	add	r3,r3,r3
8110803c:	10c5883a 	add	r2,r2,r3
81108040:	10800044 	addi	r2,r2,1
81108044:	11000005 	stb	r4,0(r2)
                    xReceivedACK[i].usiId = xPrePReader->usiValues[0];
81108048:	e0fffe43 	ldbu	r3,-7(fp)
8110804c:	e0bfff17 	ldw	r2,-4(fp)
81108050:	1100020b 	ldhu	r4,8(r2)
81108054:	00a045b4 	movhi	r2,33046
81108058:	10baeb04 	addi	r2,r2,-5204
8110805c:	18c7883a 	add	r3,r3,r3
81108060:	18c7883a 	add	r3,r3,r3
81108064:	10c5883a 	add	r2,r2,r3
81108068:	10800084 	addi	r2,r2,2
8110806c:	1100000d 	sth	r4,0(r2)

                    error_code = OSSemPost(xSemCountReceivedACK);
81108070:	d0a05e17 	ldw	r2,-32392(gp)
81108074:	1009883a 	mov	r4,r2
81108078:	112bbc80 	call	8112bbc8 <OSSemPost>
8110807c:	e0bffe85 	stb	r2,-6(fp)
                    if ( error_code == OS_ERR_NONE ) {
81108080:	e0bffe83 	ldbu	r2,-6(fp)
81108084:	10803fcc 	andi	r2,r2,255
81108088:	1000031e 	bne	r2,zero,81108098 <setPreAckReceiverFreePos+0x11c>
                        bSuccess = TRUE;
8110808c:	00800044 	movi	r2,1
81108090:	e0bffd15 	stw	r2,-12(fp)
                    } else {
                        vFailSendPreAckReceiverSemaphore();
                        xReceivedACK[i].cType = 0;
                        bSuccess = FALSE;
                    }
                    break;
81108094:	00001006 	br	811080d8 <setPreAckReceiverFreePos+0x15c>

                    error_code = OSSemPost(xSemCountReceivedACK);
                    if ( error_code == OS_ERR_NONE ) {
                        bSuccess = TRUE;
                    } else {
                        vFailSendPreAckReceiverSemaphore();
81108098:	110b0380 	call	8110b038 <vFailSendPreAckReceiverSemaphore>
                        xReceivedACK[i].cType = 0;
8110809c:	e0fffe43 	ldbu	r3,-7(fp)
811080a0:	00a045b4 	movhi	r2,33046
811080a4:	10baeb04 	addi	r2,r2,-5204
811080a8:	18c7883a 	add	r3,r3,r3
811080ac:	18c7883a 	add	r3,r3,r3
811080b0:	10c5883a 	add	r2,r2,r3
811080b4:	10000005 	stb	zero,0(r2)
                        bSuccess = FALSE;
811080b8:	e03ffd15 	stw	zero,-12(fp)
                    }
                    break;
811080bc:	00000606 	br	811080d8 <setPreAckReceiverFreePos+0x15c>

        OSMutexPend(xMutexReceivedACK, 2, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait 2 ticks = 2 ms */
        if ( error_code == OS_NO_ERR ) {
            /* Have free access to the buffer, check if there's any no threated command using the cType  */

            for(unsigned char i = 0; i < N_ACKS_RECEIVED; i++)
811080c0:	e0bffe43 	ldbu	r2,-7(fp)
811080c4:	10800044 	addi	r2,r2,1
811080c8:	e0bffe45 	stb	r2,-7(fp)
811080cc:	e0bffe43 	ldbu	r2,-7(fp)
811080d0:	10800130 	cmpltui	r2,r2,4
811080d4:	103fbe1e 	bne	r2,zero,81107fd0 <__reset+0xfb0e7fd0>
                        bSuccess = FALSE;
                    }
                    break;
                }
            }
            OSMutexPost(xMutexReceivedACK);
811080d8:	d0a05d17 	ldw	r2,-32396(gp)
811080dc:	1009883a 	mov	r4,r2
811080e0:	1129dd80 	call	81129dd8 <OSMutexPost>
811080e4:	00000306 	br	811080f4 <setPreAckReceiverFreePos+0x178>
        } else {
            ucCountRetries++;
811080e8:	e0bffe03 	ldbu	r2,-8(fp)
811080ec:	10800044 	addi	r2,r2,1
811080f0:	e0bffe05 	stb	r2,-8(fp)
bool setPreAckReceiverFreePos( tPreParsed *xPrePReader ) {
    bool bSuccess = FALSE;
    INT8U error_code;
    unsigned char ucCountRetries = 0;

    while ( ( bSuccess == FALSE ) && ( ucCountRetries < 2 ) ) {
811080f4:	e0bffd17 	ldw	r2,-12(fp)
811080f8:	1000031e 	bne	r2,zero,81108108 <setPreAckReceiverFreePos+0x18c>
811080fc:	e0bffe03 	ldbu	r2,-8(fp)
81108100:	108000b0 	cmpltui	r2,r2,2
81108104:	103fa71e 	bne	r2,zero,81107fa4 <__reset+0xfb0e7fa4>
            OSMutexPost(xMutexReceivedACK);
        } else {
            ucCountRetries++;
        }
    }
    return bSuccess;
81108108:	e0bffd17 	ldw	r2,-12(fp)
}
8110810c:	e037883a 	mov	sp,fp
81108110:	dfc00117 	ldw	ra,4(sp)
81108114:	df000017 	ldw	fp,0(sp)
81108118:	dec00204 	addi	sp,sp,8
8110811c:	f800283a 	ret

81108120 <MemDMATask>:
void Set_SpW_Led(char c_SpwID);

/* OS Tasks */

/* Mem DMA Task, configure and manages the Memories DMA for use of the SpW Transparent Interface*/
void MemDMATask(void *task_data) {
81108120:	defffd04 	addi	sp,sp,-12
81108124:	de00012e 	bgeu	sp,et,8110812c <MemDMATask+0xc>
81108128:	003b68fa 	trap	3
8110812c:	dfc00215 	stw	ra,8(sp)
81108130:	df000115 	stw	fp,4(sp)
81108134:	df000104 	addi	fp,sp,4
81108138:	e13fff15 	stw	r4,-4(fp)
	printf("Created \"mem dma\" Task (Prio:%d) \n", MEM_DMA_TASK_PRIORITY);
8110813c:	014003c4 	movi	r5,15
81108140:	01204534 	movhi	r4,33044
81108144:	21287604 	addi	r4,r4,-24104
81108148:	110f9340 	call	8110f934 <printf>
	/* read address - source address (data buffer) */
	/* write address - destination address (transparent interface) */
	/* transfer size bytes - number of bytes to be transfered */

	while (1) {
		OSTimeDlyHMSM(0, 1, 0, 0);
8110814c:	000f883a 	mov	r7,zero
81108150:	000d883a 	mov	r6,zero
81108154:	01400044 	movi	r5,1
81108158:	0009883a 	mov	r4,zero
8110815c:	112d7d80 	call	8112d7d8 <OSTimeDlyHMSM>
	}
81108160:	003ffa06 	br	8110814c <__reset+0xfb0e814c>

81108164 <SPWATask>:
}

/* SPW A Task, configure and monitor the SpW A channel for incoming connections to set the status leds, update rate of 10 ms */
void SPWATask(void *task_data) {
81108164:	defffd04 	addi	sp,sp,-12
81108168:	de00012e 	bgeu	sp,et,81108170 <SPWATask+0xc>
8110816c:	003b68fa 	trap	3
81108170:	dfc00215 	stw	ra,8(sp)
81108174:	df000115 	stw	fp,4(sp)
81108178:	df000104 	addi	fp,sp,4
8110817c:	e13fff15 	stw	r4,-4(fp)
	printf("Created \"spw a\" Task (Prio:%d) \n", SPW_A_TASK_PRIORITY);
81108180:	01400504 	movi	r5,20
81108184:	01204534 	movhi	r4,33044
81108188:	21287f04 	addi	r4,r4,-24068
8110818c:	110f9340 	call	8110f934 <printf>

	Configure_SpW_Autostart('A');
81108190:	01001044 	movi	r4,65
81108194:	110873c0 	call	8110873c <Configure_SpW_Autostart>
	while (1) {
		Set_SpW_Led('A');
81108198:	01001044 	movi	r4,65
8110819c:	110880c0 	call	8110880c <Set_SpW_Led>
		OSTimeDlyHMSM(0, 0, 0, 10);
811081a0:	01c00284 	movi	r7,10
811081a4:	000d883a 	mov	r6,zero
811081a8:	000b883a 	mov	r5,zero
811081ac:	0009883a 	mov	r4,zero
811081b0:	112d7d80 	call	8112d7d8 <OSTimeDlyHMSM>
	}
811081b4:	003ff806 	br	81108198 <__reset+0xfb0e8198>

811081b8 <SPWBTask>:
}

/* SPW B Task, configure and monitor the SpW B channel for incoming connections to set the status leds, update rate of 10 ms */
void SPWBTask(void *task_data) {
811081b8:	defffd04 	addi	sp,sp,-12
811081bc:	de00012e 	bgeu	sp,et,811081c4 <SPWBTask+0xc>
811081c0:	003b68fa 	trap	3
811081c4:	dfc00215 	stw	ra,8(sp)
811081c8:	df000115 	stw	fp,4(sp)
811081cc:	df000104 	addi	fp,sp,4
811081d0:	e13fff15 	stw	r4,-4(fp)
	printf("Created \"spw b\" Task (Prio:%d) \n", SPW_B_TASK_PRIORITY);
811081d4:	01400544 	movi	r5,21
811081d8:	01204534 	movhi	r4,33044
811081dc:	21288804 	addi	r4,r4,-24032
811081e0:	110f9340 	call	8110f934 <printf>

	Configure_SpW_Autostart('B');
811081e4:	01001084 	movi	r4,66
811081e8:	110873c0 	call	8110873c <Configure_SpW_Autostart>
	while (1) {
		Set_SpW_Led('B');
811081ec:	01001084 	movi	r4,66
811081f0:	110880c0 	call	8110880c <Set_SpW_Led>
		OSTimeDlyHMSM(0, 0, 0, 10);
811081f4:	01c00284 	movi	r7,10
811081f8:	000d883a 	mov	r6,zero
811081fc:	000b883a 	mov	r5,zero
81108200:	0009883a 	mov	r4,zero
81108204:	112d7d80 	call	8112d7d8 <OSTimeDlyHMSM>
	}
81108208:	003ff806 	br	811081ec <__reset+0xfb0e81ec>

8110820c <SPWCTask>:
}

/* SPW C Task, configure and monitor the SpW C channel for incoming connections to set the status leds, update rate of 10 ms */
void SPWCTask(void *task_data) {
8110820c:	defffd04 	addi	sp,sp,-12
81108210:	de00012e 	bgeu	sp,et,81108218 <SPWCTask+0xc>
81108214:	003b68fa 	trap	3
81108218:	dfc00215 	stw	ra,8(sp)
8110821c:	df000115 	stw	fp,4(sp)
81108220:	df000104 	addi	fp,sp,4
81108224:	e13fff15 	stw	r4,-4(fp)
	printf("Created \"spw c\" Task (Prio:%d) \n", SPW_C_TASK_PRIORITY);
81108228:	01400584 	movi	r5,22
8110822c:	01204534 	movhi	r4,33044
81108230:	21289104 	addi	r4,r4,-23996
81108234:	110f9340 	call	8110f934 <printf>

	Configure_SpW_Autostart('C');
81108238:	010010c4 	movi	r4,67
8110823c:	110873c0 	call	8110873c <Configure_SpW_Autostart>
	while (1) {
		Set_SpW_Led('C');
81108240:	010010c4 	movi	r4,67
81108244:	110880c0 	call	8110880c <Set_SpW_Led>
		OSTimeDlyHMSM(0, 0, 0, 10);
81108248:	01c00284 	movi	r7,10
8110824c:	000d883a 	mov	r6,zero
81108250:	000b883a 	mov	r5,zero
81108254:	0009883a 	mov	r4,zero
81108258:	112d7d80 	call	8112d7d8 <OSTimeDlyHMSM>
	}
8110825c:	003ff806 	br	81108240 <__reset+0xfb0e8240>

81108260 <SPWDTask>:
}

/* SPW D Task, configure and monitor the SpW D channel for incoming connections to set the status leds, update rate of 10 ms */
void SPWDTask(void *task_data) {
81108260:	defffd04 	addi	sp,sp,-12
81108264:	de00012e 	bgeu	sp,et,8110826c <SPWDTask+0xc>
81108268:	003b68fa 	trap	3
8110826c:	dfc00215 	stw	ra,8(sp)
81108270:	df000115 	stw	fp,4(sp)
81108274:	df000104 	addi	fp,sp,4
81108278:	e13fff15 	stw	r4,-4(fp)
	printf("Created \"spw d\" Task (Prio:%d) \n", SPW_D_TASK_PRIORITY);
8110827c:	014005c4 	movi	r5,23
81108280:	01204534 	movhi	r4,33044
81108284:	21289a04 	addi	r4,r4,-23960
81108288:	110f9340 	call	8110f934 <printf>

	Configure_SpW_Autostart('D');
8110828c:	01001104 	movi	r4,68
81108290:	110873c0 	call	8110873c <Configure_SpW_Autostart>
	while (1) {
		Set_SpW_Led('D');
81108294:	01001104 	movi	r4,68
81108298:	110880c0 	call	8110880c <Set_SpW_Led>
		OSTimeDlyHMSM(0, 0, 0, 10);
8110829c:	01c00284 	movi	r7,10
811082a0:	000d883a 	mov	r6,zero
811082a4:	000b883a 	mov	r5,zero
811082a8:	0009883a 	mov	r4,zero
811082ac:	112d7d80 	call	8112d7d8 <OSTimeDlyHMSM>
	}
811082b0:	003ff806 	br	81108294 <__reset+0xfb0e8294>

811082b4 <SPWETask>:
}

/* SPW E Task, configure and monitor the SpW E channel for incoming connections to set the status leds, update rate of 10 ms */
void SPWETask(void *task_data) {
811082b4:	defffd04 	addi	sp,sp,-12
811082b8:	de00012e 	bgeu	sp,et,811082c0 <SPWETask+0xc>
811082bc:	003b68fa 	trap	3
811082c0:	dfc00215 	stw	ra,8(sp)
811082c4:	df000115 	stw	fp,4(sp)
811082c8:	df000104 	addi	fp,sp,4
811082cc:	e13fff15 	stw	r4,-4(fp)
	printf("Created \"spw e\" Task (Prio:%d) \n", SPW_E_TASK_PRIORITY);
811082d0:	01400604 	movi	r5,24
811082d4:	01204534 	movhi	r4,33044
811082d8:	2128a304 	addi	r4,r4,-23924
811082dc:	110f9340 	call	8110f934 <printf>

	Configure_SpW_Autostart('E');
811082e0:	01001144 	movi	r4,69
811082e4:	110873c0 	call	8110873c <Configure_SpW_Autostart>
	while (1) {
		Set_SpW_Led('E');
811082e8:	01001144 	movi	r4,69
811082ec:	110880c0 	call	8110880c <Set_SpW_Led>
		OSTimeDlyHMSM(0, 0, 0, 10);
811082f0:	01c00284 	movi	r7,10
811082f4:	000d883a 	mov	r6,zero
811082f8:	000b883a 	mov	r5,zero
811082fc:	0009883a 	mov	r4,zero
81108300:	112d7d80 	call	8112d7d8 <OSTimeDlyHMSM>
	}
81108304:	003ff806 	br	811082e8 <__reset+0xfb0e82e8>

81108308 <SPWFTask>:
}

/* SPW F Task, configure and monitor the SpW F channel for incoming connections to set the status leds, update rate of 10 ms */
void SPWFTask(void *task_data) {
81108308:	defffd04 	addi	sp,sp,-12
8110830c:	de00012e 	bgeu	sp,et,81108314 <SPWFTask+0xc>
81108310:	003b68fa 	trap	3
81108314:	dfc00215 	stw	ra,8(sp)
81108318:	df000115 	stw	fp,4(sp)
8110831c:	df000104 	addi	fp,sp,4
81108320:	e13fff15 	stw	r4,-4(fp)
	printf("Created \"spw f\" Task (Prio:%d) \n", SPW_F_TASK_PRIORITY);
81108324:	01400644 	movi	r5,25
81108328:	01204534 	movhi	r4,33044
8110832c:	2128ac04 	addi	r4,r4,-23888
81108330:	110f9340 	call	8110f934 <printf>

	Configure_SpW_Autostart('F');
81108334:	01001184 	movi	r4,70
81108338:	110873c0 	call	8110873c <Configure_SpW_Autostart>
	while (1) {
		Set_SpW_Led('F');
8110833c:	01001184 	movi	r4,70
81108340:	110880c0 	call	8110880c <Set_SpW_Led>
		OSTimeDlyHMSM(0, 0, 0, 10);
81108344:	01c00284 	movi	r7,10
81108348:	000d883a 	mov	r6,zero
8110834c:	000b883a 	mov	r5,zero
81108350:	0009883a 	mov	r4,zero
81108354:	112d7d80 	call	8112d7d8 <OSTimeDlyHMSM>
	}
81108358:	003ff806 	br	8110833c <__reset+0xfb0e833c>

8110835c <SPWGTask>:
}

/* SPW G Task, configure and monitor the SpW G channel for incoming connections to set the status leds, update rate of 10 ms */
void SPWGTask(void *task_data) {
8110835c:	defffd04 	addi	sp,sp,-12
81108360:	de00012e 	bgeu	sp,et,81108368 <SPWGTask+0xc>
81108364:	003b68fa 	trap	3
81108368:	dfc00215 	stw	ra,8(sp)
8110836c:	df000115 	stw	fp,4(sp)
81108370:	df000104 	addi	fp,sp,4
81108374:	e13fff15 	stw	r4,-4(fp)
	printf("Created \"spw g\" Task (Prio:%d) \n", SPW_G_TASK_PRIORITY);
81108378:	01400684 	movi	r5,26
8110837c:	01204534 	movhi	r4,33044
81108380:	2128b504 	addi	r4,r4,-23852
81108384:	110f9340 	call	8110f934 <printf>

	Configure_SpW_Autostart('G');
81108388:	010011c4 	movi	r4,71
8110838c:	110873c0 	call	8110873c <Configure_SpW_Autostart>
	while (1) {
		Set_SpW_Led('G');
81108390:	010011c4 	movi	r4,71
81108394:	110880c0 	call	8110880c <Set_SpW_Led>
		OSTimeDlyHMSM(0, 0, 0, 10);
81108398:	01c00284 	movi	r7,10
8110839c:	000d883a 	mov	r6,zero
811083a0:	000b883a 	mov	r5,zero
811083a4:	0009883a 	mov	r4,zero
811083a8:	112d7d80 	call	8112d7d8 <OSTimeDlyHMSM>
	}
811083ac:	003ff806 	br	81108390 <__reset+0xfb0e8390>

811083b0 <SPWHTask>:
}

/* SPW H Task, configure and monitor the SpW H channel for incoming connections to set the status leds, update rate of 10 ms */
void SPWHTask(void *task_data) {
811083b0:	defffd04 	addi	sp,sp,-12
811083b4:	de00012e 	bgeu	sp,et,811083bc <SPWHTask+0xc>
811083b8:	003b68fa 	trap	3
811083bc:	dfc00215 	stw	ra,8(sp)
811083c0:	df000115 	stw	fp,4(sp)
811083c4:	df000104 	addi	fp,sp,4
811083c8:	e13fff15 	stw	r4,-4(fp)
	printf("Created \"spw h\" Task (Prio:%d) \n", SPW_H_TASK_PRIORITY);
811083cc:	014006c4 	movi	r5,27
811083d0:	01204534 	movhi	r4,33044
811083d4:	2128be04 	addi	r4,r4,-23816
811083d8:	110f9340 	call	8110f934 <printf>

	Configure_SpW_Autostart('H');
811083dc:	01001204 	movi	r4,72
811083e0:	110873c0 	call	8110873c <Configure_SpW_Autostart>
	while (1) {
		Set_SpW_Led('H');
811083e4:	01001204 	movi	r4,72
811083e8:	110880c0 	call	8110880c <Set_SpW_Led>
		OSTimeDlyHMSM(0, 0, 0, 10);
811083ec:	01c00284 	movi	r7,10
811083f0:	000d883a 	mov	r6,zero
811083f4:	000b883a 	mov	r5,zero
811083f8:	0009883a 	mov	r4,zero
811083fc:	112d7d80 	call	8112d7d8 <OSTimeDlyHMSM>
	}
81108400:	003ff806 	br	811083e4 <__reset+0xfb0e83e4>

81108404 <LogTask>:
}

/* Log Task, show the FPGA core temperature in the seven segments display, update rate of 1 s */
void LogTask(void *task_data) {
81108404:	defffd04 	addi	sp,sp,-12
81108408:	de00012e 	bgeu	sp,et,81108410 <LogTask+0xc>
8110840c:	003b68fa 	trap	3
81108410:	dfc00215 	stw	ra,8(sp)
81108414:	df000115 	stw	fp,4(sp)
81108418:	df000104 	addi	fp,sp,4
8110841c:	e13fff15 	stw	r4,-4(fp)
	printf("Created \"log\" Task (Prio:%d) \n", LOG_TASK_PRIORITY);
81108420:	01400704 	movi	r5,28
81108424:	01204534 	movhi	r4,33044
81108428:	2128c704 	addi	r4,r4,-23780
8110842c:	110f9340 	call	8110f934 <printf>
	while (1) {
		TEMP_Read(&tempFPGA, &tempBoard);
81108430:	d1605584 	addi	r5,gp,-32426
81108434:	d1205544 	addi	r4,gp,-32427
81108438:	11021580 	call	81102158 <TEMP_Read>
		bSSDisplayUpdate(tempFPGA);
8110843c:	d0a05543 	ldbu	r2,-32427(gp)
81108440:	10803fcc 	andi	r2,r2,255
81108444:	1009883a 	mov	r4,r2
81108448:	11066d40 	call	811066d4 <bSSDisplayUpdate>
		OSTimeDlyHMSM(0, 0, 1, 0);
8110844c:	000f883a 	mov	r7,zero
81108450:	01800044 	movi	r6,1
81108454:	000b883a 	mov	r5,zero
81108458:	0009883a 	mov	r4,zero
8110845c:	112d7d80 	call	8112d7d8 <OSTimeDlyHMSM>
	}
81108460:	003ff306 	br	81108430 <__reset+0xfb0e8430>

81108464 <Init_Simucam_Tasks>:
}

/* Initialize the SimuCam Tasks */
void Init_Simucam_Tasks(void) {
81108464:	defff904 	addi	sp,sp,-28
81108468:	de00012e 	bgeu	sp,et,81108470 <Init_Simucam_Tasks+0xc>
8110846c:	003b68fa 	trap	3
81108470:	dfc00615 	stw	ra,24(sp)
81108474:	df000515 	stw	fp,20(sp)
81108478:	df000504 	addi	fp,sp,20

	error_code = OSTaskCreateExt(MemDMATask,
8110847c:	d8000415 	stw	zero,16(sp)
81108480:	d8000315 	stw	zero,12(sp)
81108484:	00820004 	movi	r2,2048
81108488:	d8800215 	stw	r2,8(sp)
8110848c:	00a04574 	movhi	r2,33045
81108490:	10b8ff04 	addi	r2,r2,-7172
81108494:	d8800115 	stw	r2,4(sp)
81108498:	008003c4 	movi	r2,15
8110849c:	d8800015 	stw	r2,0(sp)
811084a0:	01c003c4 	movi	r7,15
811084a4:	01a04574 	movhi	r6,33045
811084a8:	3180ff04 	addi	r6,r6,1020
811084ac:	000b883a 	mov	r5,zero
811084b0:	01204474 	movhi	r4,33041
811084b4:	21204804 	addi	r4,r4,-32480
811084b8:	112c5ac0 	call	8112c5ac <OSTaskCreateExt>
811084bc:	d0a05505 	stb	r2,-32428(gp)
	                             SIMUCAM_TASK_STACKSIZE,
	                             NULL,
	                             0);


	error_code = OSTaskCreateExt(SPWATask,
811084c0:	d8000415 	stw	zero,16(sp)
811084c4:	d8000315 	stw	zero,12(sp)
811084c8:	00820004 	movi	r2,2048
811084cc:	d8800215 	stw	r2,8(sp)
811084d0:	00a04534 	movhi	r2,33044
811084d4:	1098ff04 	addi	r2,r2,25596
811084d8:	d8800115 	stw	r2,4(sp)
811084dc:	00800504 	movi	r2,20
811084e0:	d8800015 	stw	r2,0(sp)
811084e4:	01c00504 	movi	r7,20
811084e8:	01a04574 	movhi	r6,33045
811084ec:	31a0ff04 	addi	r6,r6,-31748
811084f0:	000b883a 	mov	r5,zero
811084f4:	01204474 	movhi	r4,33041
811084f8:	21205904 	addi	r4,r4,-32412
811084fc:	112c5ac0 	call	8112c5ac <OSTaskCreateExt>
81108500:	d0a05505 	stb	r2,-32428(gp)
	                             SIMUCAM_TASK_STACKSIZE,
	                             NULL,
	                             0);


	error_code = OSTaskCreateExt(SPWBTask,
81108504:	d8000415 	stw	zero,16(sp)
81108508:	d8000315 	stw	zero,12(sp)
8110850c:	00820004 	movi	r2,2048
81108510:	d8800215 	stw	r2,8(sp)
81108514:	00a04574 	movhi	r2,33045
81108518:	10a8ff04 	addi	r2,r2,-23556
8110851c:	d8800115 	stw	r2,4(sp)
81108520:	00800544 	movi	r2,21
81108524:	d8800015 	stw	r2,0(sp)
81108528:	01c00544 	movi	r7,21
8110852c:	01a04574 	movhi	r6,33045
81108530:	31b0ff04 	addi	r6,r6,-15364
81108534:	000b883a 	mov	r5,zero
81108538:	01204474 	movhi	r4,33041
8110853c:	21206e04 	addi	r4,r4,-32328
81108540:	112c5ac0 	call	8112c5ac <OSTaskCreateExt>
81108544:	d0a05505 	stb	r2,-32428(gp)
	                             SIMUCAM_TASK_STACKSIZE,
	                             NULL,
	                             0);


	error_code = OSTaskCreateExt(SPWCTask,
81108548:	d8000415 	stw	zero,16(sp)
8110854c:	d8000315 	stw	zero,12(sp)
81108550:	00820004 	movi	r2,2048
81108554:	d8800215 	stw	r2,8(sp)
81108558:	00a04574 	movhi	r2,33045
8110855c:	1080ff04 	addi	r2,r2,1020
81108560:	d8800115 	stw	r2,4(sp)
81108564:	00800584 	movi	r2,22
81108568:	d8800015 	stw	r2,0(sp)
8110856c:	01c00584 	movi	r7,22
81108570:	01a04574 	movhi	r6,33045
81108574:	3188ff04 	addi	r6,r6,9212
81108578:	000b883a 	mov	r5,zero
8110857c:	01204474 	movhi	r4,33041
81108580:	21208304 	addi	r4,r4,-32244
81108584:	112c5ac0 	call	8112c5ac <OSTaskCreateExt>
81108588:	d0a05505 	stb	r2,-32428(gp)
	                             SIMUCAM_TASK_STACKSIZE,
	                             NULL,
	                             0);


	error_code = OSTaskCreateExt(SPWDTask,
8110858c:	d8000415 	stw	zero,16(sp)
81108590:	d8000315 	stw	zero,12(sp)
81108594:	00820004 	movi	r2,2048
81108598:	d8800215 	stw	r2,8(sp)
8110859c:	00a04534 	movhi	r2,33044
811085a0:	1090ff04 	addi	r2,r2,17404
811085a4:	d8800115 	stw	r2,4(sp)
811085a8:	008005c4 	movi	r2,23
811085ac:	d8800015 	stw	r2,0(sp)
811085b0:	01c005c4 	movi	r7,23
811085b4:	01a04534 	movhi	r6,33044
811085b8:	3198ff04 	addi	r6,r6,25596
811085bc:	000b883a 	mov	r5,zero
811085c0:	01204474 	movhi	r4,33041
811085c4:	21209804 	addi	r4,r4,-32160
811085c8:	112c5ac0 	call	8112c5ac <OSTaskCreateExt>
811085cc:	d0a05505 	stb	r2,-32428(gp)
	                             SIMUCAM_TASK_STACKSIZE,
	                             NULL,
	                             0);


	error_code = OSTaskCreateExt(SPWETask,
811085d0:	d8000415 	stw	zero,16(sp)
811085d4:	d8000315 	stw	zero,12(sp)
811085d8:	00820004 	movi	r2,2048
811085dc:	d8800215 	stw	r2,8(sp)
811085e0:	00a04534 	movhi	r2,33044
811085e4:	1088ff04 	addi	r2,r2,9212
811085e8:	d8800115 	stw	r2,4(sp)
811085ec:	00800604 	movi	r2,24
811085f0:	d8800015 	stw	r2,0(sp)
811085f4:	01c00604 	movi	r7,24
811085f8:	01a04534 	movhi	r6,33044
811085fc:	3190ff04 	addi	r6,r6,17404
81108600:	000b883a 	mov	r5,zero
81108604:	01204474 	movhi	r4,33041
81108608:	2120ad04 	addi	r4,r4,-32076
8110860c:	112c5ac0 	call	8112c5ac <OSTaskCreateExt>
81108610:	d0a05505 	stb	r2,-32428(gp)
	                             SIMUCAM_TASK_STACKSIZE,
	                             NULL,
	                             0);


	error_code = OSTaskCreateExt(SPWFTask,
81108614:	d8000415 	stw	zero,16(sp)
81108618:	d8000315 	stw	zero,12(sp)
8110861c:	00820004 	movi	r2,2048
81108620:	d8800215 	stw	r2,8(sp)
81108624:	00a04534 	movhi	r2,33044
81108628:	1080ff04 	addi	r2,r2,1020
8110862c:	d8800115 	stw	r2,4(sp)
81108630:	00800644 	movi	r2,25
81108634:	d8800015 	stw	r2,0(sp)
81108638:	01c00644 	movi	r7,25
8110863c:	01a04534 	movhi	r6,33044
81108640:	3188ff04 	addi	r6,r6,9212
81108644:	000b883a 	mov	r5,zero
81108648:	01204474 	movhi	r4,33041
8110864c:	2120c204 	addi	r4,r4,-31992
81108650:	112c5ac0 	call	8112c5ac <OSTaskCreateExt>
81108654:	d0a05505 	stb	r2,-32428(gp)
	                             SIMUCAM_TASK_STACKSIZE,
	                             NULL,
	                             0);


	error_code = OSTaskCreateExt(SPWGTask,
81108658:	d8000415 	stw	zero,16(sp)
8110865c:	d8000315 	stw	zero,12(sp)
81108660:	00820004 	movi	r2,2048
81108664:	d8800215 	stw	r2,8(sp)
81108668:	00a04574 	movhi	r2,33045
8110866c:	10b0ff04 	addi	r2,r2,-15364
81108670:	d8800115 	stw	r2,4(sp)
81108674:	00800684 	movi	r2,26
81108678:	d8800015 	stw	r2,0(sp)
8110867c:	01c00684 	movi	r7,26
81108680:	01a04574 	movhi	r6,33045
81108684:	31b8ff04 	addi	r6,r6,-7172
81108688:	000b883a 	mov	r5,zero
8110868c:	01204474 	movhi	r4,33041
81108690:	2120d704 	addi	r4,r4,-31908
81108694:	112c5ac0 	call	8112c5ac <OSTaskCreateExt>
81108698:	d0a05505 	stb	r2,-32428(gp)
	                             SIMUCAM_TASK_STACKSIZE,
	                             NULL,
	                             0);


	error_code = OSTaskCreateExt(SPWHTask,
8110869c:	d8000415 	stw	zero,16(sp)
811086a0:	d8000315 	stw	zero,12(sp)
811086a4:	00820004 	movi	r2,2048
811086a8:	d8800215 	stw	r2,8(sp)
811086ac:	00a04534 	movhi	r2,33044
811086b0:	10b8ff04 	addi	r2,r2,-7172
811086b4:	d8800115 	stw	r2,4(sp)
811086b8:	008006c4 	movi	r2,27
811086bc:	d8800015 	stw	r2,0(sp)
811086c0:	01c006c4 	movi	r7,27
811086c4:	01a04534 	movhi	r6,33044
811086c8:	3180ff04 	addi	r6,r6,1020
811086cc:	000b883a 	mov	r5,zero
811086d0:	01204474 	movhi	r4,33041
811086d4:	2120ec04 	addi	r4,r4,-31824
811086d8:	112c5ac0 	call	8112c5ac <OSTaskCreateExt>
811086dc:	d0a05505 	stb	r2,-32428(gp)
	                             SIMUCAM_TASK_STACKSIZE,
	                             NULL,
	                             0);
	

	error_code = OSTaskCreateExt(LogTask,
811086e0:	d8000415 	stw	zero,16(sp)
811086e4:	d8000315 	stw	zero,12(sp)
811086e8:	00820004 	movi	r2,2048
811086ec:	d8800215 	stw	r2,8(sp)
811086f0:	00a04574 	movhi	r2,33045
811086f4:	10a0ff04 	addi	r2,r2,-31748
811086f8:	d8800115 	stw	r2,4(sp)
811086fc:	00800704 	movi	r2,28
81108700:	d8800015 	stw	r2,0(sp)
81108704:	01c00704 	movi	r7,28
81108708:	01a04574 	movhi	r6,33045
8110870c:	31a8ff04 	addi	r6,r6,-23556
81108710:	000b883a 	mov	r5,zero
81108714:	01204474 	movhi	r4,33041
81108718:	21210104 	addi	r4,r4,-31740
8110871c:	112c5ac0 	call	8112c5ac <OSTaskCreateExt>
81108720:	d0a05505 	stb	r2,-32428(gp)
	                             SIMUCAM_TASK_STACKSIZE,
	                             NULL,
	                             0);


}
81108724:	0001883a 	nop
81108728:	e037883a 	mov	sp,fp
8110872c:	dfc00117 	ldw	ra,4(sp)
81108730:	df000017 	ldw	fp,0(sp)
81108734:	dec00204 	addi	sp,sp,8
81108738:	f800283a 	ret

8110873c <Configure_SpW_Autostart>:

void Configure_SpW_Autostart(char c_SpwID) {
8110873c:	defffd04 	addi	sp,sp,-12
81108740:	de00012e 	bgeu	sp,et,81108748 <Configure_SpW_Autostart+0xc>
81108744:	003b68fa 	trap	3
81108748:	dfc00215 	stw	ra,8(sp)
8110874c:	df000115 	stw	fp,4(sp)
81108750:	df000104 	addi	fp,sp,4
81108754:	2005883a 	mov	r2,r4
81108758:	e0bfff05 	stb	r2,-4(fp)
	// Configura COMM
	// Reseta TX e RX Fifo
	v_Transparent_Interface_RX_FIFO_Reset(c_SpwID);
8110875c:	e0bfff07 	ldb	r2,-4(fp)
81108760:	1009883a 	mov	r4,r2
81108764:	11048680 	call	81104868 <v_Transparent_Interface_RX_FIFO_Reset>
	v_Transparent_Interface_TX_FIFO_Reset(c_SpwID);
81108768:	e0bfff07 	ldb	r2,-4(fp)
8110876c:	1009883a 	mov	r4,r2
81108770:	1104a240 	call	81104a24 <v_Transparent_Interface_TX_FIFO_Reset>
	// Habilita a Interface Transparente
	v_Transparent_Interface_Enable_Control(c_SpwID, TRAN_REG_SET,
81108774:	e0bfff07 	ldb	r2,-4(fp)
81108778:	0181c004 	movi	r6,1792
8110877c:	01400044 	movi	r5,1
81108780:	1009883a 	mov	r4,r2
81108784:	11042940 	call	81104294 <v_Transparent_Interface_Enable_Control>
			TRAN_INTERFACE_ENABLE_CONTROL_BIT_MASK
					| TRAN_INTERFACE_TX_ENABLE_CONTROL_BIT_MASK | TRAN_INTERFACE_RX_ENABLE_CONTROL_BIT_MASK);
	// Reseta Codec
	v_SpaceWire_Interface_Force_Reset(c_SpwID);
81108788:	e0bfff07 	ldb	r2,-4(fp)
8110878c:	1009883a 	mov	r4,r2
81108790:	11031ac0 	call	811031ac <v_SpaceWire_Interface_Force_Reset>
	// Habilita a Interface SpaceWire
	b_SpaceWire_Interface_Enable_Control(c_SpwID, SPWC_REG_SET,
81108794:	e0bfff07 	ldb	r2,-4(fp)
81108798:	0181c004 	movi	r6,1792
8110879c:	01400044 	movi	r5,1
811087a0:	1009883a 	mov	r4,r2
811087a4:	1102c800 	call	81102c80 <b_SpaceWire_Interface_Enable_Control>
	SPWC_CODEC_ENABLE_CONTROL_BIT_MASK | SPWC_CODEC_TX_ENABLE_CONTROL_BIT_MASK | SPWC_CODEC_RX_ENABLE_CONTROL_BIT_MASK);
	// Coloca Codec no modo Normal
//	b_SpaceWire_Interface_Mode_Control(c_SpwID, SPWC_INTERFACE_NORMAL_MODE);
	b_SpaceWire_Interface_Mode_Control(c_SpwID, SPWC_INTERFACE_BACKDOOR_MODE);
811087a8:	e0bfff07 	ldb	r2,-4(fp)
811087ac:	000b883a 	mov	r5,zero
811087b0:	1009883a 	mov	r4,r2
811087b4:	1102e7c0 	call	81102e7c <b_SpaceWire_Interface_Mode_Control>
	// Coloca Codec no link Autostart
	v_SpaceWire_Interface_Link_Control(c_SpwID, SPWC_REG_CLEAR,
811087b8:	e0bfff07 	ldb	r2,-4(fp)
811087bc:	01806004 	movi	r6,384
811087c0:	000b883a 	mov	r5,zero
811087c4:	1009883a 	mov	r4,r2
811087c8:	110368c0 	call	8110368c <v_SpaceWire_Interface_Link_Control>
	SPWC_LINK_DISCONNECT_CONTROL_BIT_MASK | SPWC_LINK_START_CONTROL_BIT_MASK);
	v_SpaceWire_Interface_Link_Control(c_SpwID, SPWC_REG_SET,
811087cc:	e0bfff07 	ldb	r2,-4(fp)
811087d0:	01808004 	movi	r6,512
811087d4:	01400044 	movi	r5,1
811087d8:	1009883a 	mov	r4,r2
811087dc:	110368c0 	call	8110368c <v_SpaceWire_Interface_Link_Control>
	SPWC_AUTOSTART_CONTROL_BIT_MASK);
	printf("SpaceWire %c configurado\n", c_SpwID);
811087e0:	e0bfff07 	ldb	r2,-4(fp)
811087e4:	100b883a 	mov	r5,r2
811087e8:	01204534 	movhi	r4,33044
811087ec:	2128cf04 	addi	r4,r4,-23748
811087f0:	110f9340 	call	8110f934 <printf>
}
811087f4:	0001883a 	nop
811087f8:	e037883a 	mov	sp,fp
811087fc:	dfc00117 	ldw	ra,4(sp)
81108800:	df000017 	ldw	fp,0(sp)
81108804:	dec00204 	addi	sp,sp,8
81108808:	f800283a 	ret

8110880c <Set_SpW_Led>:

void Set_SpW_Led(char c_SpwID) {
8110880c:	defffa04 	addi	sp,sp,-24
81108810:	de00012e 	bgeu	sp,et,81108818 <Set_SpW_Led+0xc>
81108814:	003b68fa 	trap	3
81108818:	dfc00515 	stw	ra,20(sp)
8110881c:	df000415 	stw	fp,16(sp)
81108820:	df000404 	addi	fp,sp,16
81108824:	2005883a 	mov	r2,r4
81108828:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 ui_leds_mask_r = 0;
8110882c:	e03ffc15 	stw	zero,-16(fp)
	alt_u32 ui_leds_mask_g = 0;
81108830:	e03ffd15 	stw	zero,-12(fp)
	switch (c_SpwID) {
81108834:	e0bfff07 	ldb	r2,-4(fp)
81108838:	10bfefc4 	addi	r2,r2,-65
8110883c:	10c00228 	cmpgeui	r3,r2,8
81108840:	1800361e 	bne	r3,zero,8110891c <Set_SpW_Led+0x110>
81108844:	100690ba 	slli	r3,r2,2
81108848:	00a04474 	movhi	r2,33041
8110884c:	10a21704 	addi	r2,r2,-30628
81108850:	1885883a 	add	r2,r3,r2
81108854:	10800017 	ldw	r2,0(r2)
81108858:	1000683a 	jmp	r2
8110885c:	8110887c 	xorhi	r4,r16,16929
81108860:	81108890 	cmplti	r4,r16,16930
81108864:	811088a4 	muli	r4,r16,16930
81108868:	811088b8 	rdprs	r4,r16,16930
8110886c:	811088cc 	andi	r4,r16,16931
81108870:	811088e0 	cmpeqi	r4,r16,16931
81108874:	811088f4 	orhi	r4,r16,16931
81108878:	81108908 	cmpgei	r4,r16,16932
	case 'A':
		ui_leds_mask_r = LEDS_1R_MASK;
8110887c:	00800084 	movi	r2,2
81108880:	e0bffc15 	stw	r2,-16(fp)
		ui_leds_mask_g = LEDS_1G_MASK;
81108884:	00800044 	movi	r2,1
81108888:	e0bffd15 	stw	r2,-12(fp)
		break;
8110888c:	00002306 	br	8110891c <Set_SpW_Led+0x110>
	case 'B':
		ui_leds_mask_r = LEDS_2R_MASK;
81108890:	00800204 	movi	r2,8
81108894:	e0bffc15 	stw	r2,-16(fp)
		ui_leds_mask_g = LEDS_2G_MASK;
81108898:	00800104 	movi	r2,4
8110889c:	e0bffd15 	stw	r2,-12(fp)
		break;
811088a0:	00001e06 	br	8110891c <Set_SpW_Led+0x110>
	case 'C':
		ui_leds_mask_r = LEDS_3R_MASK;
811088a4:	00800804 	movi	r2,32
811088a8:	e0bffc15 	stw	r2,-16(fp)
		ui_leds_mask_g = LEDS_3G_MASK;
811088ac:	00800404 	movi	r2,16
811088b0:	e0bffd15 	stw	r2,-12(fp)
		break;
811088b4:	00001906 	br	8110891c <Set_SpW_Led+0x110>
	case 'D':
		ui_leds_mask_r = LEDS_4R_MASK;
811088b8:	00802004 	movi	r2,128
811088bc:	e0bffc15 	stw	r2,-16(fp)
		ui_leds_mask_g = LEDS_4G_MASK;
811088c0:	00801004 	movi	r2,64
811088c4:	e0bffd15 	stw	r2,-12(fp)
		break;
811088c8:	00001406 	br	8110891c <Set_SpW_Led+0x110>
	case 'E':
		ui_leds_mask_r = LEDS_5R_MASK;
811088cc:	00808004 	movi	r2,512
811088d0:	e0bffc15 	stw	r2,-16(fp)
		ui_leds_mask_g = LEDS_5G_MASK;
811088d4:	00804004 	movi	r2,256
811088d8:	e0bffd15 	stw	r2,-12(fp)
		break;
811088dc:	00000f06 	br	8110891c <Set_SpW_Led+0x110>
	case 'F':
		ui_leds_mask_r = LEDS_6R_MASK;
811088e0:	00820004 	movi	r2,2048
811088e4:	e0bffc15 	stw	r2,-16(fp)
		ui_leds_mask_g = LEDS_6G_MASK;
811088e8:	00810004 	movi	r2,1024
811088ec:	e0bffd15 	stw	r2,-12(fp)
		break;
811088f0:	00000a06 	br	8110891c <Set_SpW_Led+0x110>
	case 'G':
		ui_leds_mask_r = LEDS_7R_MASK;
811088f4:	00880004 	movi	r2,8192
811088f8:	e0bffc15 	stw	r2,-16(fp)
		ui_leds_mask_g = LEDS_7G_MASK;
811088fc:	00840004 	movi	r2,4096
81108900:	e0bffd15 	stw	r2,-12(fp)
		break;
81108904:	00000506 	br	8110891c <Set_SpW_Led+0x110>
	case 'H':
		ui_leds_mask_r = LEDS_8R_MASK;
81108908:	00a00014 	movui	r2,32768
8110890c:	e0bffc15 	stw	r2,-16(fp)
		ui_leds_mask_g = LEDS_8G_MASK;
81108910:	00900004 	movi	r2,16384
81108914:	e0bffd15 	stw	r2,-12(fp)
		break;
81108918:	0001883a 	nop
	}
	alt_u32 SpW_Link_Status = ul_SpaceWire_Interface_Link_Status_Read(c_SpwID);
8110891c:	e0bfff07 	ldb	r2,-4(fp)
81108920:	1009883a 	mov	r4,r2
81108924:	11038e80 	call	811038e8 <ul_SpaceWire_Interface_Link_Status_Read>
81108928:	e0bffe15 	stw	r2,-8(fp)
	if (SpW_Link_Status & SPWC_LINK_RUNNING_STATUS_BIT_MASK) {
8110892c:	e0bffe17 	ldw	r2,-8(fp)
81108930:	1080004c 	andi	r2,r2,1
81108934:	10000726 	beq	r2,zero,81108954 <Set_SpW_Led+0x148>
		bSetPainelLeds(LEDS_OFF, ui_leds_mask_r);
81108938:	e17ffc17 	ldw	r5,-16(fp)
8110893c:	0009883a 	mov	r4,zero
81108940:	11059f80 	call	811059f8 <bSetPainelLeds>
		bSetPainelLeds(LEDS_ON, ui_leds_mask_g);
81108944:	e17ffd17 	ldw	r5,-12(fp)
81108948:	01000044 	movi	r4,1
8110894c:	11059f80 	call	811059f8 <bSetPainelLeds>
		bSetPainelLeds(LEDS_ON, ui_leds_mask_g | ui_leds_mask_r);
	} else {
		bSetPainelLeds(LEDS_OFF, ui_leds_mask_g);
		bSetPainelLeds(LEDS_ON, ui_leds_mask_r);
	}
}
81108950:	00001006 	br	81108994 <Set_SpW_Led+0x188>
	alt_u32 SpW_Link_Status = ul_SpaceWire_Interface_Link_Status_Read(c_SpwID);
	if (SpW_Link_Status & SPWC_LINK_RUNNING_STATUS_BIT_MASK) {
		bSetPainelLeds(LEDS_OFF, ui_leds_mask_r);
		bSetPainelLeds(LEDS_ON, ui_leds_mask_g);
	} else if (SpW_Link_Status
			& (SPWC_LINK_DISCONNECT_ERROR_BIT_MASK
81108954:	e0bffe17 	ldw	r2,-8(fp)
81108958:	10801e0c 	andi	r2,r2,120
	}
	alt_u32 SpW_Link_Status = ul_SpaceWire_Interface_Link_Status_Read(c_SpwID);
	if (SpW_Link_Status & SPWC_LINK_RUNNING_STATUS_BIT_MASK) {
		bSetPainelLeds(LEDS_OFF, ui_leds_mask_r);
		bSetPainelLeds(LEDS_ON, ui_leds_mask_g);
	} else if (SpW_Link_Status
8110895c:	10000726 	beq	r2,zero,8110897c <Set_SpW_Led+0x170>
			& (SPWC_LINK_DISCONNECT_ERROR_BIT_MASK
					| SPWC_LINK_PARITY_ERROR_BIT_MASK
					| SPWC_LINK_ESCAPE_ERROR_BIT_MASK
					| SPWC_LINK_CREDIT_ERROR_BIT_MASK)) {
		bSetPainelLeds(LEDS_ON, ui_leds_mask_g | ui_leds_mask_r);
81108960:	e0fffd17 	ldw	r3,-12(fp)
81108964:	e0bffc17 	ldw	r2,-16(fp)
81108968:	1884b03a 	or	r2,r3,r2
8110896c:	100b883a 	mov	r5,r2
81108970:	01000044 	movi	r4,1
81108974:	11059f80 	call	811059f8 <bSetPainelLeds>
	} else {
		bSetPainelLeds(LEDS_OFF, ui_leds_mask_g);
		bSetPainelLeds(LEDS_ON, ui_leds_mask_r);
	}
}
81108978:	00000606 	br	81108994 <Set_SpW_Led+0x188>
					| SPWC_LINK_PARITY_ERROR_BIT_MASK
					| SPWC_LINK_ESCAPE_ERROR_BIT_MASK
					| SPWC_LINK_CREDIT_ERROR_BIT_MASK)) {
		bSetPainelLeds(LEDS_ON, ui_leds_mask_g | ui_leds_mask_r);
	} else {
		bSetPainelLeds(LEDS_OFF, ui_leds_mask_g);
8110897c:	e17ffd17 	ldw	r5,-12(fp)
81108980:	0009883a 	mov	r4,zero
81108984:	11059f80 	call	811059f8 <bSetPainelLeds>
		bSetPainelLeds(LEDS_ON, ui_leds_mask_r);
81108988:	e17ffc17 	ldw	r5,-16(fp)
8110898c:	01000044 	movi	r4,1
81108990:	11059f80 	call	811059f8 <bSetPainelLeds>
	}
}
81108994:	0001883a 	nop
81108998:	e037883a 	mov	sp,fp
8110899c:	dfc00117 	ldw	ra,4(sp)
811089a0:	df000017 	ldw	fp,0(sp)
811089a4:	dec00204 	addi	sp,sp,8
811089a8:	f800283a 	ret

811089ac <vSenderComTask>:

#include "sender_com_task.h"


void vSenderComTask(void *task_data)
{
811089ac:	defffb04 	addi	sp,sp,-20
811089b0:	de00012e 	bgeu	sp,et,811089b8 <vSenderComTask+0xc>
811089b4:	003b68fa 	trap	3
811089b8:	dfc00415 	stw	ra,16(sp)
811089bc:	df000315 	stw	fp,12(sp)
811089c0:	df000304 	addi	fp,sp,12
811089c4:	e13fff15 	stw	r4,-4(fp)
    tSenderStates eSenderMode;
    int desligarEm = 0;
811089c8:	e03ffe15 	stw	zero,-8(fp)

    eSenderMode = sConfiguringSender;
811089cc:	e03ffd15 	stw	zero,-12(fp)

    #ifdef DEBUG_ON
        debug(fp,"vSenderComTask, enter task.\n");
811089d0:	d0a05a17 	ldw	r2,-32408(gp)
811089d4:	100f883a 	mov	r7,r2
811089d8:	01800704 	movi	r6,28
811089dc:	01400044 	movi	r5,1
811089e0:	01204534 	movhi	r4,33044
811089e4:	2128d604 	addi	r4,r4,-23720
811089e8:	110ec080 	call	8110ec08 <fwrite>
    #endif

    for (;;){
        
        switch (eSenderMode)
811089ec:	e0bffd17 	ldw	r2,-12(fp)
811089f0:	10c00060 	cmpeqi	r3,r2,1
811089f4:	1800091e 	bne	r3,zero,81108a1c <vSenderComTask+0x70>
811089f8:	0080052e 	bgeu	zero,r2,81108a10 <vSenderComTask+0x64>
811089fc:	10c000a0 	cmpeqi	r3,r2,2
81108a00:	1800371e 	bne	r3,zero,81108ae0 <vSenderComTask+0x134>
81108a04:	10800160 	cmpeqi	r2,r2,5
81108a08:	1000151e 	bne	r2,zero,81108a60 <vSenderComTask+0xb4>
81108a0c:	00002c06 	br	81108ac0 <vSenderComTask+0x114>
        {
            case sConfiguringSender:
                /* For future implementations. */
                eSenderMode = sStartingConnSender;
81108a10:	00800044 	movi	r2,1
81108a14:	e0bffd15 	stw	r2,-12(fp)
                break;
81108a18:	00003206 	br	81108ae4 <vSenderComTask+0x138>
            case sStartingConnSender:

                /*  This semaphore will return a non-zero value if the NUC communicate with the MEB 
                    vReceiverComTask is responsible to send this semaphore.
                    OSSemAccept -> Non blocking Pend*/
                if ( OSSemAccept(xSemCommInit) ) {
81108a1c:	d0a05817 	ldw	r2,-32416(gp)
81108a20:	1009883a 	mov	r4,r2
81108a24:	112b4600 	call	8112b460 <OSSemAccept>
81108a28:	10bfffcc 	andi	r2,r2,65535
81108a2c:	10000326 	beq	r2,zero,81108a3c <vSenderComTask+0x90>
                    eSenderMode = sDummySender;
81108a30:	00800144 	movi	r2,5
81108a34:	e0bffd15 	stw	r2,-12(fp)
                    /* Asking for NUC the status */
                    puts(START_STATUS_SEQUENCE);
                    OSTimeDlyHMSM(0, 0, 5, 0); /*Sleeps for 5 second*/
                }

                break;
81108a38:	00002a06 	br	81108ae4 <vSenderComTask+0x138>
                    OSSemAccept -> Non blocking Pend*/
                if ( OSSemAccept(xSemCommInit) ) {
                    eSenderMode = sDummySender;
                } else {
                    /* Asking for NUC the status */
                    puts(START_STATUS_SEQUENCE);
81108a3c:	01204534 	movhi	r4,33044
81108a40:	2128de04 	addi	r4,r4,-23688
81108a44:	110fa600 	call	8110fa60 <puts>
                    OSTimeDlyHMSM(0, 0, 5, 0); /*Sleeps for 5 second*/
81108a48:	000f883a 	mov	r7,zero
81108a4c:	01800144 	movi	r6,5
81108a50:	000b883a 	mov	r5,zero
81108a54:	0009883a 	mov	r4,zero
81108a58:	112d7d80 	call	8112d7d8 <OSTimeDlyHMSM>
                }

                break;
81108a5c:	00002106 	br	81108ae4 <vSenderComTask+0x138>
                

                break;
            case sDummySender:
                /* code */
                eSenderMode = sDummySender;
81108a60:	00800144 	movi	r2,5
81108a64:	e0bffd15 	stw	r2,-12(fp)

                if (desligarEm <= 3) {
81108a68:	e0bffe17 	ldw	r2,-8(fp)
81108a6c:	10800108 	cmpgei	r2,r2,4
81108a70:	1000031e 	bne	r2,zero,81108a80 <vSenderComTask+0xd4>
                    puts(TURNOFF_SEQUENCE);
81108a74:	01204534 	movhi	r4,33044
81108a78:	2128e004 	addi	r4,r4,-23680
81108a7c:	110fa600 	call	8110fa60 <puts>
                }
                desligarEm++;
81108a80:	e0bffe17 	ldw	r2,-8(fp)
81108a84:	10800044 	addi	r2,r2,1
81108a88:	e0bffe15 	stw	r2,-8(fp)
#ifdef DEBUG_ON
	debug(fp,"sDummySender\n");
81108a8c:	d0a05a17 	ldw	r2,-32408(gp)
81108a90:	100f883a 	mov	r7,r2
81108a94:	01800344 	movi	r6,13
81108a98:	01400044 	movi	r5,1
81108a9c:	01204534 	movhi	r4,33044
81108aa0:	2128e204 	addi	r4,r4,-23672
81108aa4:	110ec080 	call	8110ec08 <fwrite>
#endif
				OSTimeDlyHMSM(0, 0, 10, 0); /*Sleeps for 3 second*/
81108aa8:	000f883a 	mov	r7,zero
81108aac:	01800284 	movi	r6,10
81108ab0:	000b883a 	mov	r5,zero
81108ab4:	0009883a 	mov	r4,zero
81108ab8:	112d7d80 	call	8112d7d8 <OSTimeDlyHMSM>
                break;
81108abc:	00000906 	br	81108ae4 <vSenderComTask+0x138>
            default:
#ifdef DEBUG_ON
	debug(fp,"sender default\n");
81108ac0:	d0a05a17 	ldw	r2,-32408(gp)
81108ac4:	100f883a 	mov	r7,r2
81108ac8:	018003c4 	movi	r6,15
81108acc:	01400044 	movi	r5,1
81108ad0:	01204534 	movhi	r4,33044
81108ad4:	2128e604 	addi	r4,r4,-23656
81108ad8:	110ec080 	call	8110ec08 <fwrite>
#endif
                break;
81108adc:	00000106 	br	81108ae4 <vSenderComTask+0x138>

                //pPointer = OSQPend(xQSenderTask, 0, &error_code);

                

                break;
81108ae0:	0001883a 	nop
	debug(fp,"sender default\n");
#endif
                break;
        }

    }
81108ae4:	003fc106 	br	811089ec <__reset+0xfb0e89ec>

81108ae8 <vSimMebTask>:


#include "sim_meb_task.h"


void vSimMebTask(void *task_data) {
81108ae8:	defffd04 	addi	sp,sp,-12
81108aec:	de00012e 	bgeu	sp,et,81108af4 <vSimMebTask+0xc>
81108af0:	003b68fa 	trap	3
81108af4:	df000215 	stw	fp,8(sp)
81108af8:	df000204 	addi	fp,sp,8
81108afc:	e13fff15 	stw	r4,-4(fp)
	tFEEStates eFeeState;
	bool bSuccess = FALSE;
81108b00:	e03ffe15 	stw	zero,-8(fp)


	//SIMUCAM MAIN TASK


}
81108b04:	0001883a 	nop
81108b08:	e037883a 	mov	sp,fp
81108b0c:	df000017 	ldw	fp,0(sp)
81108b10:	dec00104 	addi	sp,sp,4
81108b14:	f800283a 	ret

81108b18 <vTimeoutCheckerTask>:

#include "timeout_checker_ack_task.h"


/* Could impact in the overall performance of the system due to need many shared resources (many mutexes) */
void vTimeoutCheckerTask(void *task_data) {
81108b18:	defff504 	addi	sp,sp,-44
81108b1c:	de00012e 	bgeu	sp,et,81108b24 <vTimeoutCheckerTask+0xc>
81108b20:	003b68fa 	trap	3
81108b24:	dfc00a15 	stw	ra,40(sp)
81108b28:	df000915 	stw	fp,36(sp)
81108b2c:	df000904 	addi	fp,sp,36
81108b30:	e13fff15 	stw	r4,-4(fp)
    bool bFinished32 = FALSE;
81108b34:	e03ff715 	stw	zero,-36(fp)
    bool bFinished64 = FALSE;
81108b38:	e03ff815 	stw	zero,-32(fp)
    bool bFinished128 = FALSE;
81108b3c:	e03ff915 	stw	zero,-28(fp)
	INT8U error_code;
    unsigned char ucCountRetries = 0;
81108b40:	e03ffa05 	stb	zero,-24(fp)
    unsigned char i = 0, k =0;
81108b44:	e03ffa45 	stb	zero,-23(fp)
81108b48:	e03ffa85 	stb	zero,-22(fp)
	unsigned char ucRetransB32[N_32];
	unsigned char ucRetransB64[N_64];
	unsigned char ucRetransB128[N_128];

    #ifdef DEBUG_ON
        debug(fp,"vTimeoutCheckerTask, enter task.\n");
81108b4c:	d0a05a17 	ldw	r2,-32408(gp)
81108b50:	100f883a 	mov	r7,r2
81108b54:	01800844 	movi	r6,33
81108b58:	01400044 	movi	r5,1
81108b5c:	01204534 	movhi	r4,33044
81108b60:	2128ea04 	addi	r4,r4,-23640
81108b64:	110ec080 	call	8110ec08 <fwrite>
    #endif

    for (;;) {
        /* This semaphore is used to sync the Timer used for check timeout and this task that is for actualy implement the logic of the timeout for the communication*/
        OSSemPend(xSemTimeoutChecker, 0, &error_code);
81108b68:	d0a05f17 	ldw	r2,-32388(gp)
81108b6c:	e0fffac4 	addi	r3,fp,-21
81108b70:	180d883a 	mov	r6,r3
81108b74:	000b883a 	mov	r5,zero
81108b78:	1009883a 	mov	r4,r2
81108b7c:	112b8400 	call	8112b840 <OSSemPend>
        if ( error_code == OS_NO_ERR ) {
81108b80:	e0bffac3 	ldbu	r2,-21(fp)
81108b84:	10803fcc 	andi	r2,r2,255
81108b88:	1002191e 	bne	r2,zero,811093f0 <vTimeoutCheckerTask+0x8d8>
            /*  Time to check all the (re)transmission buffers in order to retransmit if any message got timeout*/

            /*  Writing 0xFF in the buffer to check after if there is any scheduled retransmission
                If there is some, the valur will be between 0 and <max buffer size>*/
            memset(ucRetransB32, 255, N_32);
81108b8c:	e0bffb04 	addi	r2,fp,-20
81108b90:	01800204 	movi	r6,8
81108b94:	01403fc4 	movi	r5,255
81108b98:	1009883a 	mov	r4,r2
81108b9c:	110f76c0 	call	8110f76c <memset>
            memset(ucRetransB64, 255, N_64);
81108ba0:	e0bffd04 	addi	r2,fp,-12
81108ba4:	01800104 	movi	r6,4
81108ba8:	01403fc4 	movi	r5,255
81108bac:	1009883a 	mov	r4,r2
81108bb0:	110f76c0 	call	8110f76c <memset>
            memset(ucRetransB128, 255, N_128);
81108bb4:	e0bffe04 	addi	r2,fp,-8
81108bb8:	01800084 	movi	r6,2
81108bbc:	01403fc4 	movi	r5,255
81108bc0:	1009883a 	mov	r4,r2
81108bc4:	110f76c0 	call	8110f76c <memset>

            bFinished32=FALSE;
81108bc8:	e03ff715 	stw	zero,-36(fp)
            bFinished64=FALSE;
81108bcc:	e03ff815 	stw	zero,-32(fp)
            bFinished128=FALSE;
81108bd0:	e03ff915 	stw	zero,-28(fp)
            ucCountRetries = 0;
81108bd4:	e03ffa05 	stb	zero,-24(fp)

            /* The mutex will not be blocking, so it will try for five times search in the three (re)transmission buffer */
            while ( ( ucCountRetries < 6 ) && ( (bFinished32==FALSE) || (bFinished64==FALSE) || (bFinished128==FALSE) ) ) {
81108bd8:	00011a06 	br	81109044 <vTimeoutCheckerTask+0x52c>

                if ( bFinished32 == FALSE ) {
81108bdc:	e0bff717 	ldw	r2,-36(fp)
81108be0:	10005b1e 	bne	r2,zero,81108d50 <vTimeoutCheckerTask+0x238>
                    /* Check all positions of the (re)transmission buffer*/
                    OSMutexPend(xMutexBuffer32, 2, &error_code); /* Try to get the mutex (wait 2 ticks) */
81108be4:	d0a06217 	ldw	r2,-32376(gp)
81108be8:	e0fffac4 	addi	r3,fp,-21
81108bec:	180d883a 	mov	r6,r3
81108bf0:	01400084 	movi	r5,2
81108bf4:	1009883a 	mov	r4,r2
81108bf8:	11298340 	call	81129834 <OSMutexPend>
                    if ( error_code == OS_ERR_NONE ) {
81108bfc:	e0bffac3 	ldbu	r2,-21(fp)
81108c00:	10803fcc 	andi	r2,r2,255
81108c04:	1000521e 	bne	r2,zero,81108d50 <vTimeoutCheckerTask+0x238>
                        /*Search for the id*/
                        k = 0;
81108c08:	e03ffa85 	stb	zero,-22(fp)
                        for(i = 0; i < N_32; i++)
81108c0c:	e03ffa45 	stb	zero,-23(fp)
81108c10:	00004706 	br	81108d30 <vTimeoutCheckerTask+0x218>
                        {
                            if ( xBuffer32[i].usiId != 0 ) {
81108c14:	e0fffa43 	ldbu	r3,-23(fp)
81108c18:	00a045b4 	movhi	r2,33046
81108c1c:	10a25c04 	addi	r2,r2,-30352
81108c20:	18c009a4 	muli	r3,r3,38
81108c24:	10c5883a 	add	r2,r2,r3
81108c28:	10800804 	addi	r2,r2,32
81108c2c:	1080000b 	ldhu	r2,0(r2)
81108c30:	10bfffcc 	andi	r2,r2,65535
81108c34:	10003b26 	beq	r2,zero,81108d24 <vTimeoutCheckerTask+0x20c>
                                /* If isn't Zero, so there a message in this position of the (re)transmission buffer */

                                if ( xBuffer32[i].ucNofRetries < 1 ) {
81108c38:	e0fffa43 	ldbu	r3,-23(fp)
81108c3c:	00a045b4 	movhi	r2,33046
81108c40:	10a25c04 	addi	r2,r2,-30352
81108c44:	18c009a4 	muli	r3,r3,38
81108c48:	10c5883a 	add	r2,r2,r3
81108c4c:	10800904 	addi	r2,r2,36
81108c50:	10800003 	ldbu	r2,0(r2)
81108c54:	10803fcc 	andi	r2,r2,255
81108c58:	1000101e 	bne	r2,zero,81108c9c <vTimeoutCheckerTask+0x184>
                                    /* Reach the max number of retransmission. Clear the position. */
                                    xBuffer32[i].usiId = 0;
81108c5c:	e0fffa43 	ldbu	r3,-23(fp)
81108c60:	00a045b4 	movhi	r2,33046
81108c64:	10a25c04 	addi	r2,r2,-30352
81108c68:	18c009a4 	muli	r3,r3,38
81108c6c:	10c5883a 	add	r2,r2,r3
81108c70:	10800804 	addi	r2,r2,32
81108c74:	1000000d 	sth	zero,0(r2)
                                    error_code = OSSemPost(xSemCountBuffer32);
81108c78:	d0a06517 	ldw	r2,-32364(gp)
81108c7c:	1009883a 	mov	r4,r2
81108c80:	112bbc80 	call	8112bbc8 <OSSemPost>
81108c84:	e0bffac5 	stb	r2,-21(fp)
                                    if ( error_code != OS_ERR_NONE ) {
81108c88:	e0bffac3 	ldbu	r2,-21(fp)
81108c8c:	10803fcc 	andi	r2,r2,255
81108c90:	10002426 	beq	r2,zero,81108d24 <vTimeoutCheckerTask+0x20c>
                                        vFailSetCountSemaphorexBuffer32();
81108c94:	110b4540 	call	8110b454 <vFailSetCountSemaphorexBuffer32>
81108c98:	00002206 	br	81108d24 <vTimeoutCheckerTask+0x20c>
                                    }
                                } else {
                                    /* Check if there's timeout to retransmit */
                                    xBuffer32[i].usiTimeOut--;
81108c9c:	e0fffa43 	ldbu	r3,-23(fp)
81108ca0:	00a045b4 	movhi	r2,33046
81108ca4:	10a25c04 	addi	r2,r2,-30352
81108ca8:	190009a4 	muli	r4,r3,38
81108cac:	1105883a 	add	r2,r2,r4
81108cb0:	10800884 	addi	r2,r2,34
81108cb4:	1080000b 	ldhu	r2,0(r2)
81108cb8:	10bfffc4 	addi	r2,r2,-1
81108cbc:	1009883a 	mov	r4,r2
81108cc0:	00a045b4 	movhi	r2,33046
81108cc4:	10a25c04 	addi	r2,r2,-30352
81108cc8:	18c009a4 	muli	r3,r3,38
81108ccc:	10c5883a 	add	r2,r2,r3
81108cd0:	10800884 	addi	r2,r2,34
81108cd4:	1100000d 	sth	r4,0(r2)
                                    if ( xBuffer32[i].usiTimeOut < 1 ) {
81108cd8:	e0fffa43 	ldbu	r3,-23(fp)
81108cdc:	00a045b4 	movhi	r2,33046
81108ce0:	10a25c04 	addi	r2,r2,-30352
81108ce4:	18c009a4 	muli	r3,r3,38
81108ce8:	10c5883a 	add	r2,r2,r3
81108cec:	10800884 	addi	r2,r2,34
81108cf0:	1080000b 	ldhu	r2,0(r2)
81108cf4:	10bfffcc 	andi	r2,r2,65535
81108cf8:	10a0001c 	xori	r2,r2,32768
81108cfc:	10a00004 	addi	r2,r2,-32768
81108d00:	00800816 	blt	zero,r2,81108d24 <vTimeoutCheckerTask+0x20c>
                                        /* Schedule to retransmit */
                                        ucRetransB32[k] = i;
81108d04:	e0bffa83 	ldbu	r2,-22(fp)
81108d08:	e0fffb04 	addi	r3,fp,-20
81108d0c:	1885883a 	add	r2,r3,r2
81108d10:	e0fffa43 	ldbu	r3,-23(fp)
81108d14:	10c00005 	stb	r3,0(r2)
                                        k++;
81108d18:	e0bffa83 	ldbu	r2,-22(fp)
81108d1c:	10800044 	addi	r2,r2,1
81108d20:	e0bffa85 	stb	r2,-22(fp)
                    /* Check all positions of the (re)transmission buffer*/
                    OSMutexPend(xMutexBuffer32, 2, &error_code); /* Try to get the mutex (wait 2 ticks) */
                    if ( error_code == OS_ERR_NONE ) {
                        /*Search for the id*/
                        k = 0;
                        for(i = 0; i < N_32; i++)
81108d24:	e0bffa43 	ldbu	r2,-23(fp)
81108d28:	10800044 	addi	r2,r2,1
81108d2c:	e0bffa45 	stb	r2,-23(fp)
81108d30:	e0bffa43 	ldbu	r2,-23(fp)
81108d34:	10800230 	cmpltui	r2,r2,8
81108d38:	103fb61e 	bne	r2,zero,81108c14 <__reset+0xfb0e8c14>
                                        k++;
                                    }
                                }
                            }
                        }
                        OSMutexPost(xMutexBuffer32); /* Free the Mutex after use the xBuffer32*/
81108d3c:	d0a06217 	ldw	r2,-32376(gp)
81108d40:	1009883a 	mov	r4,r2
81108d44:	1129dd80 	call	81129dd8 <OSMutexPost>
                        bFinished32 = TRUE;
81108d48:	00800044 	movi	r2,1
81108d4c:	e0bff715 	stw	r2,-36(fp)
                    }
                }

                if ( bFinished64 == FALSE ) {
81108d50:	e0bff817 	ldw	r2,-32(fp)
81108d54:	10005b1e 	bne	r2,zero,81108ec4 <vTimeoutCheckerTask+0x3ac>
                    /* Check all positions of the (re)transmission buffer*/
                    OSMutexPend(xMutexBuffer64, 2, &error_code); /* Try to get the mutex (wait 2 ticks) */
81108d58:	d0a06617 	ldw	r2,-32360(gp)
81108d5c:	e0fffac4 	addi	r3,fp,-21
81108d60:	180d883a 	mov	r6,r3
81108d64:	01400084 	movi	r5,2
81108d68:	1009883a 	mov	r4,r2
81108d6c:	11298340 	call	81129834 <OSMutexPend>
                    if ( error_code == OS_ERR_NONE ) {
81108d70:	e0bffac3 	ldbu	r2,-21(fp)
81108d74:	10803fcc 	andi	r2,r2,255
81108d78:	1000521e 	bne	r2,zero,81108ec4 <vTimeoutCheckerTask+0x3ac>
                        /*Search for the id*/
                        k = 0;
81108d7c:	e03ffa85 	stb	zero,-22(fp)
                        for(i = 0; i < N_64; i++)
81108d80:	e03ffa45 	stb	zero,-23(fp)
81108d84:	00004706 	br	81108ea4 <vTimeoutCheckerTask+0x38c>
                        {
                            if ( xBuffer64[i].usiId != 0 ) {
81108d88:	e0fffa43 	ldbu	r3,-23(fp)
81108d8c:	00a04574 	movhi	r2,33045
81108d90:	1090ff04 	addi	r2,r2,17404
81108d94:	18c011a4 	muli	r3,r3,70
81108d98:	10c5883a 	add	r2,r2,r3
81108d9c:	10801004 	addi	r2,r2,64
81108da0:	1080000b 	ldhu	r2,0(r2)
81108da4:	10bfffcc 	andi	r2,r2,65535
81108da8:	10003b26 	beq	r2,zero,81108e98 <vTimeoutCheckerTask+0x380>
                                /* If isn't Zero, so there a message in this position of the (re)transmission buffer */

                                if ( xBuffer64[i].ucNofRetries < 1 ) {
81108dac:	e0fffa43 	ldbu	r3,-23(fp)
81108db0:	00a04574 	movhi	r2,33045
81108db4:	1090ff04 	addi	r2,r2,17404
81108db8:	18c011a4 	muli	r3,r3,70
81108dbc:	10c5883a 	add	r2,r2,r3
81108dc0:	10801104 	addi	r2,r2,68
81108dc4:	10800003 	ldbu	r2,0(r2)
81108dc8:	10803fcc 	andi	r2,r2,255
81108dcc:	1000101e 	bne	r2,zero,81108e10 <vTimeoutCheckerTask+0x2f8>
                                    /* Reach the max number of retransmission. Clear the position. */
                                    xBuffer64[i].usiId = 0;
81108dd0:	e0fffa43 	ldbu	r3,-23(fp)
81108dd4:	00a04574 	movhi	r2,33045
81108dd8:	1090ff04 	addi	r2,r2,17404
81108ddc:	18c011a4 	muli	r3,r3,70
81108de0:	10c5883a 	add	r2,r2,r3
81108de4:	10801004 	addi	r2,r2,64
81108de8:	1000000d 	sth	zero,0(r2)
                                    error_code = OSSemPost(xSemCountBuffer64);
81108dec:	d0a05717 	ldw	r2,-32420(gp)
81108df0:	1009883a 	mov	r4,r2
81108df4:	112bbc80 	call	8112bbc8 <OSSemPost>
81108df8:	e0bffac5 	stb	r2,-21(fp)
                                    if ( error_code != OS_ERR_NONE ) {
81108dfc:	e0bffac3 	ldbu	r2,-21(fp)
81108e00:	10803fcc 	andi	r2,r2,255
81108e04:	10002426 	beq	r2,zero,81108e98 <vTimeoutCheckerTask+0x380>
                                        vFailSetCountSemaphorexBuffer64();
81108e08:	110b4bc0 	call	8110b4bc <vFailSetCountSemaphorexBuffer64>
81108e0c:	00002206 	br	81108e98 <vTimeoutCheckerTask+0x380>
                                    }
                                } else {
                                    /* Check if there's timeout to retransmit */
                                    xBuffer64[i].usiTimeOut--;
81108e10:	e0fffa43 	ldbu	r3,-23(fp)
81108e14:	00a04574 	movhi	r2,33045
81108e18:	1090ff04 	addi	r2,r2,17404
81108e1c:	190011a4 	muli	r4,r3,70
81108e20:	1105883a 	add	r2,r2,r4
81108e24:	10801084 	addi	r2,r2,66
81108e28:	1080000b 	ldhu	r2,0(r2)
81108e2c:	10bfffc4 	addi	r2,r2,-1
81108e30:	1009883a 	mov	r4,r2
81108e34:	00a04574 	movhi	r2,33045
81108e38:	1090ff04 	addi	r2,r2,17404
81108e3c:	18c011a4 	muli	r3,r3,70
81108e40:	10c5883a 	add	r2,r2,r3
81108e44:	10801084 	addi	r2,r2,66
81108e48:	1100000d 	sth	r4,0(r2)
                                    if ( xBuffer64[i].usiTimeOut < 1 ) {
81108e4c:	e0fffa43 	ldbu	r3,-23(fp)
81108e50:	00a04574 	movhi	r2,33045
81108e54:	1090ff04 	addi	r2,r2,17404
81108e58:	18c011a4 	muli	r3,r3,70
81108e5c:	10c5883a 	add	r2,r2,r3
81108e60:	10801084 	addi	r2,r2,66
81108e64:	1080000b 	ldhu	r2,0(r2)
81108e68:	10bfffcc 	andi	r2,r2,65535
81108e6c:	10a0001c 	xori	r2,r2,32768
81108e70:	10a00004 	addi	r2,r2,-32768
81108e74:	00800816 	blt	zero,r2,81108e98 <vTimeoutCheckerTask+0x380>
                                        /* Schedule to retransmit */
                                        ucRetransB64[k] = i;
81108e78:	e0bffa83 	ldbu	r2,-22(fp)
81108e7c:	e0fffd04 	addi	r3,fp,-12
81108e80:	1885883a 	add	r2,r3,r2
81108e84:	e0fffa43 	ldbu	r3,-23(fp)
81108e88:	10c00005 	stb	r3,0(r2)
                                        k++;
81108e8c:	e0bffa83 	ldbu	r2,-22(fp)
81108e90:	10800044 	addi	r2,r2,1
81108e94:	e0bffa85 	stb	r2,-22(fp)
                    /* Check all positions of the (re)transmission buffer*/
                    OSMutexPend(xMutexBuffer64, 2, &error_code); /* Try to get the mutex (wait 2 ticks) */
                    if ( error_code == OS_ERR_NONE ) {
                        /*Search for the id*/
                        k = 0;
                        for(i = 0; i < N_64; i++)
81108e98:	e0bffa43 	ldbu	r2,-23(fp)
81108e9c:	10800044 	addi	r2,r2,1
81108ea0:	e0bffa45 	stb	r2,-23(fp)
81108ea4:	e0bffa43 	ldbu	r2,-23(fp)
81108ea8:	10800130 	cmpltui	r2,r2,4
81108eac:	103fb61e 	bne	r2,zero,81108d88 <__reset+0xfb0e8d88>
                                        k++;
                                    }
                                }
                            }
                        }
                        OSMutexPost(xMutexBuffer64); /* Free the Mutex after use the xBuffer32*/
81108eb0:	d0a06617 	ldw	r2,-32360(gp)
81108eb4:	1009883a 	mov	r4,r2
81108eb8:	1129dd80 	call	81129dd8 <OSMutexPost>
                        bFinished64 = TRUE;
81108ebc:	00800044 	movi	r2,1
81108ec0:	e0bff815 	stw	r2,-32(fp)
                    }
                }

                if ( bFinished128 == FALSE ) {
81108ec4:	e0bff917 	ldw	r2,-28(fp)
81108ec8:	10005b1e 	bne	r2,zero,81109038 <vTimeoutCheckerTask+0x520>
                    /* Check all positions of the (re)transmission buffer*/
                    OSMutexPend(xMutexBuffer128, 2, &error_code); /* Try to get the mutex (wait 2 ticks) */
81108ecc:	d0a06417 	ldw	r2,-32368(gp)
81108ed0:	e0fffac4 	addi	r3,fp,-21
81108ed4:	180d883a 	mov	r6,r3
81108ed8:	01400084 	movi	r5,2
81108edc:	1009883a 	mov	r4,r2
81108ee0:	11298340 	call	81129834 <OSMutexPend>
                    if ( error_code == OS_ERR_NONE ) {
81108ee4:	e0bffac3 	ldbu	r2,-21(fp)
81108ee8:	10803fcc 	andi	r2,r2,255
81108eec:	1000521e 	bne	r2,zero,81109038 <vTimeoutCheckerTask+0x520>
                        /*Search for the id*/
                        k = 0;
81108ef0:	e03ffa85 	stb	zero,-22(fp)
                        for(i = 0; i < N_128; i++)
81108ef4:	e03ffa45 	stb	zero,-23(fp)
81108ef8:	00004706 	br	81109018 <vTimeoutCheckerTask+0x500>
                        {
                            if ( xBuffer128[i].usiId != 0 ) {
81108efc:	e0fffa43 	ldbu	r3,-23(fp)
81108f00:	00a045b4 	movhi	r2,33046
81108f04:	10baa804 	addi	r2,r2,-5472
81108f08:	18c021a4 	muli	r3,r3,134
81108f0c:	10c5883a 	add	r2,r2,r3
81108f10:	10802004 	addi	r2,r2,128
81108f14:	1080000b 	ldhu	r2,0(r2)
81108f18:	10bfffcc 	andi	r2,r2,65535
81108f1c:	10003b26 	beq	r2,zero,8110900c <vTimeoutCheckerTask+0x4f4>
                                /* If isn't Zero, so there a message in this position of the (re)transmission buffer */

                                if ( xBuffer128[i].ucNofRetries < 1 ) {
81108f20:	e0fffa43 	ldbu	r3,-23(fp)
81108f24:	00a045b4 	movhi	r2,33046
81108f28:	10baa804 	addi	r2,r2,-5472
81108f2c:	18c021a4 	muli	r3,r3,134
81108f30:	10c5883a 	add	r2,r2,r3
81108f34:	10802104 	addi	r2,r2,132
81108f38:	10800003 	ldbu	r2,0(r2)
81108f3c:	10803fcc 	andi	r2,r2,255
81108f40:	1000101e 	bne	r2,zero,81108f84 <vTimeoutCheckerTask+0x46c>
                                    /* Reach the max number of retransmission. Clear the position. */
                                    xBuffer128[i].usiId = 0;
81108f44:	e0fffa43 	ldbu	r3,-23(fp)
81108f48:	00a045b4 	movhi	r2,33046
81108f4c:	10baa804 	addi	r2,r2,-5472
81108f50:	18c021a4 	muli	r3,r3,134
81108f54:	10c5883a 	add	r2,r2,r3
81108f58:	10802004 	addi	r2,r2,128
81108f5c:	1000000d 	sth	zero,0(r2)
                                    error_code = OSSemPost(xSemCountBuffer128);
81108f60:	d0a05b17 	ldw	r2,-32404(gp)
81108f64:	1009883a 	mov	r4,r2
81108f68:	112bbc80 	call	8112bbc8 <OSSemPost>
81108f6c:	e0bffac5 	stb	r2,-21(fp)
                                    if ( error_code != OS_ERR_NONE ) {
81108f70:	e0bffac3 	ldbu	r2,-21(fp)
81108f74:	10803fcc 	andi	r2,r2,255
81108f78:	10002426 	beq	r2,zero,8110900c <vTimeoutCheckerTask+0x4f4>
                                        vFailSetCountSemaphorexBuffer128();
81108f7c:	110b5240 	call	8110b524 <vFailSetCountSemaphorexBuffer128>
81108f80:	00002206 	br	8110900c <vTimeoutCheckerTask+0x4f4>
                                    }
                                } else {
                                    /* Check if there's timeout to retransmit */
                                    xBuffer128[i].usiTimeOut--;
81108f84:	e0fffa43 	ldbu	r3,-23(fp)
81108f88:	00a045b4 	movhi	r2,33046
81108f8c:	10baa804 	addi	r2,r2,-5472
81108f90:	190021a4 	muli	r4,r3,134
81108f94:	1105883a 	add	r2,r2,r4
81108f98:	10802084 	addi	r2,r2,130
81108f9c:	1080000b 	ldhu	r2,0(r2)
81108fa0:	10bfffc4 	addi	r2,r2,-1
81108fa4:	1009883a 	mov	r4,r2
81108fa8:	00a045b4 	movhi	r2,33046
81108fac:	10baa804 	addi	r2,r2,-5472
81108fb0:	18c021a4 	muli	r3,r3,134
81108fb4:	10c5883a 	add	r2,r2,r3
81108fb8:	10802084 	addi	r2,r2,130
81108fbc:	1100000d 	sth	r4,0(r2)
                                    if ( xBuffer128[i].usiTimeOut < 1 ) {
81108fc0:	e0fffa43 	ldbu	r3,-23(fp)
81108fc4:	00a045b4 	movhi	r2,33046
81108fc8:	10baa804 	addi	r2,r2,-5472
81108fcc:	18c021a4 	muli	r3,r3,134
81108fd0:	10c5883a 	add	r2,r2,r3
81108fd4:	10802084 	addi	r2,r2,130
81108fd8:	1080000b 	ldhu	r2,0(r2)
81108fdc:	10bfffcc 	andi	r2,r2,65535
81108fe0:	10a0001c 	xori	r2,r2,32768
81108fe4:	10a00004 	addi	r2,r2,-32768
81108fe8:	00800816 	blt	zero,r2,8110900c <vTimeoutCheckerTask+0x4f4>
                                        /* Schedule to retransmit */
                                        ucRetransB128[k] = i;
81108fec:	e0bffa83 	ldbu	r2,-22(fp)
81108ff0:	e0fffe04 	addi	r3,fp,-8
81108ff4:	1885883a 	add	r2,r3,r2
81108ff8:	e0fffa43 	ldbu	r3,-23(fp)
81108ffc:	10c00005 	stb	r3,0(r2)
                                        k++;
81109000:	e0bffa83 	ldbu	r2,-22(fp)
81109004:	10800044 	addi	r2,r2,1
81109008:	e0bffa85 	stb	r2,-22(fp)
                    /* Check all positions of the (re)transmission buffer*/
                    OSMutexPend(xMutexBuffer128, 2, &error_code); /* Try to get the mutex (wait 2 ticks) */
                    if ( error_code == OS_ERR_NONE ) {
                        /*Search for the id*/
                        k = 0;
                        for(i = 0; i < N_128; i++)
8110900c:	e0bffa43 	ldbu	r2,-23(fp)
81109010:	10800044 	addi	r2,r2,1
81109014:	e0bffa45 	stb	r2,-23(fp)
81109018:	e0bffa43 	ldbu	r2,-23(fp)
8110901c:	108000b0 	cmpltui	r2,r2,2
81109020:	103fb61e 	bne	r2,zero,81108efc <__reset+0xfb0e8efc>
                                        k++;
                                    }
                                }
                            }
                        }
                        OSMutexPost(xMutexBuffer128); /* Free the Mutex after use the xBuffer32*/
81109024:	d0a06417 	ldw	r2,-32368(gp)
81109028:	1009883a 	mov	r4,r2
8110902c:	1129dd80 	call	81129dd8 <OSMutexPost>
                        bFinished128 = TRUE;
81109030:	00800044 	movi	r2,1
81109034:	e0bff915 	stw	r2,-28(fp)
                    }
                }
                ucCountRetries++;
81109038:	e0bffa03 	ldbu	r2,-24(fp)
8110903c:	10800044 	addi	r2,r2,1
81109040:	e0bffa05 	stb	r2,-24(fp)
            bFinished64=FALSE;
            bFinished128=FALSE;
            ucCountRetries = 0;

            /* The mutex will not be blocking, so it will try for five times search in the three (re)transmission buffer */
            while ( ( ucCountRetries < 6 ) && ( (bFinished32==FALSE) || (bFinished64==FALSE) || (bFinished128==FALSE) ) ) {
81109044:	e0bffa03 	ldbu	r2,-24(fp)
81109048:	108001a8 	cmpgeui	r2,r2,6
8110904c:	1000061e 	bne	r2,zero,81109068 <vTimeoutCheckerTask+0x550>
81109050:	e0bff717 	ldw	r2,-36(fp)
81109054:	103ee126 	beq	r2,zero,81108bdc <__reset+0xfb0e8bdc>
81109058:	e0bff817 	ldw	r2,-32(fp)
8110905c:	103edf26 	beq	r2,zero,81108bdc <__reset+0xfb0e8bdc>
81109060:	e0bff917 	ldw	r2,-28(fp)
81109064:	103edd26 	beq	r2,zero,81108bdc <__reset+0xfb0e8bdc>
                }
                ucCountRetries++;
            }

            /*  Check if could not check some of the (re)transmission buffer*/
            if ( (bFinished32==FALSE) || (bFinished64==FALSE) || (bFinished128==FALSE) ) {
81109068:	e0bff717 	ldw	r2,-36(fp)
8110906c:	10000426 	beq	r2,zero,81109080 <vTimeoutCheckerTask+0x568>
81109070:	e0bff817 	ldw	r2,-32(fp)
81109074:	10000226 	beq	r2,zero,81109080 <vTimeoutCheckerTask+0x568>
81109078:	e0bff917 	ldw	r2,-28(fp)
8110907c:	1000011e 	bne	r2,zero,81109084 <vTimeoutCheckerTask+0x56c>
                /*  Could not check all (re)transmission buffer, only show message for now. There's no hard impact to thesystem
                    but we need to know that is accurring*/
                vCouldNotCheckBufferTimeOutFunction();
81109080:	110ba640 	call	8110ba64 <vCouldNotCheckBufferTimeOutFunction>
            /*  Retransmit could slow down the system in the worst case, because need to get more than one mutex at same time
                this also could impact in various task that need the mutex also, as this operation may be rare
                before try to get all mutexes, will check if there is anything in the scheduler buffers (ucRetransB32,ucRetransB64,ucRetransB128). */
                
            /*  Most part of the time this will be false, and many processing and kernell resources will be saved with this verification*/
            if ( (ucRetransB32[0] != 255) && (ucRetransB64[0] != 255) && (ucRetransB128[0] != 255) ) {
81109084:	e0bffb03 	ldbu	r2,-20(fp)
81109088:	10803fcc 	andi	r2,r2,255
8110908c:	10803fe0 	cmpeqi	r2,r2,255
81109090:	103eb51e 	bne	r2,zero,81108b68 <__reset+0xfb0e8b68>
81109094:	e0bffd03 	ldbu	r2,-12(fp)
81109098:	10803fcc 	andi	r2,r2,255
8110909c:	10803fe0 	cmpeqi	r2,r2,255
811090a0:	103eb11e 	bne	r2,zero,81108b68 <__reset+0xfb0e8b68>
811090a4:	e0bffe03 	ldbu	r2,-8(fp)
811090a8:	10803fcc 	andi	r2,r2,255
811090ac:	10803fe0 	cmpeqi	r2,r2,255
811090b0:	103ead1e 	bne	r2,zero,81108b68 <__reset+0xfb0e8b68>
                /*  This operation will try to use the UART TX buffer, so after get the mutex it will remain for almost 3 or 4 ticks in the worst case.
                    In order to avoid that all the system lost the access to the communication for more time, and to minimize the priority inversion
                    if we can't get the mutex for the buffer32, buffer 64 or buffer128, we continue and in the next cycle of checkout it will try to re-send finaly. */                

                /*  Sleep for 50 ticks (50 milli) in the worst case*/
                OSMutexPend(xTxUARTMutex, 50, &error_code); /* Wait 50 ticks = 50 ms */
811090b4:	d0a06817 	ldw	r2,-32352(gp)
811090b8:	e0fffac4 	addi	r3,fp,-21
811090bc:	180d883a 	mov	r6,r3
811090c0:	01400c84 	movi	r5,50
811090c4:	1009883a 	mov	r4,r2
811090c8:	11298340 	call	81129834 <OSMutexPend>
                if ( error_code == OS_NO_ERR ) {
811090cc:	e0bffac3 	ldbu	r2,-21(fp)
811090d0:	10803fcc 	andi	r2,r2,255
811090d4:	1000c41e 	bne	r2,zero,811093e8 <vTimeoutCheckerTask+0x8d0>


                    if ( ucRetransB32[0] != 255 ) {
811090d8:	e0bffb03 	ldbu	r2,-20(fp)
811090dc:	10803fcc 	andi	r2,r2,255
811090e0:	10803fe0 	cmpeqi	r2,r2,255
811090e4:	10003c1e 	bne	r2,zero,811091d8 <vTimeoutCheckerTask+0x6c0>
                        OSMutexPend(xMutexBuffer32, 1, &error_code); /* Try to get the mutex (wait 1 ticks) */
811090e8:	d0a06217 	ldw	r2,-32376(gp)
811090ec:	e0fffac4 	addi	r3,fp,-21
811090f0:	180d883a 	mov	r6,r3
811090f4:	01400044 	movi	r5,1
811090f8:	1009883a 	mov	r4,r2
811090fc:	11298340 	call	81129834 <OSMutexPend>
                        if ( error_code == OS_ERR_NONE ) {
81109100:	e0bffac3 	ldbu	r2,-21(fp)
81109104:	10803fcc 	andi	r2,r2,255
81109108:	1000321e 	bne	r2,zero,811091d4 <vTimeoutCheckerTask+0x6bc>
                            k = 0;
8110910c:	e03ffa85 	stb	zero,-22(fp)
                            do
                            {
                                i = ucRetransB32[k];
81109110:	e0bffa83 	ldbu	r2,-22(fp)
81109114:	e0fffb04 	addi	r3,fp,-20
81109118:	1885883a 	add	r2,r3,r2
8110911c:	10800003 	ldbu	r2,0(r2)
81109120:	e0bffa45 	stb	r2,-23(fp)
                                xBuffer32[i].ucNofRetries--;
81109124:	e0fffa43 	ldbu	r3,-23(fp)
81109128:	00a045b4 	movhi	r2,33046
8110912c:	10a25c04 	addi	r2,r2,-30352
81109130:	190009a4 	muli	r4,r3,38
81109134:	1105883a 	add	r2,r2,r4
81109138:	10800904 	addi	r2,r2,36
8110913c:	10800003 	ldbu	r2,0(r2)
81109140:	10bfffc4 	addi	r2,r2,-1
81109144:	1009883a 	mov	r4,r2
81109148:	00a045b4 	movhi	r2,33046
8110914c:	10a25c04 	addi	r2,r2,-30352
81109150:	18c009a4 	muli	r3,r3,38
81109154:	10c5883a 	add	r2,r2,r3
81109158:	10800904 	addi	r2,r2,36
8110915c:	11000005 	stb	r4,0(r2)
                                xBuffer32[i].usiTimeOut = TIMEOUT_COUNT;
81109160:	e0fffa43 	ldbu	r3,-23(fp)
81109164:	00a045b4 	movhi	r2,33046
81109168:	10a25c04 	addi	r2,r2,-30352
8110916c:	18c009a4 	muli	r3,r3,38
81109170:	10c5883a 	add	r2,r2,r3
81109174:	10800884 	addi	r2,r2,34
81109178:	00c00104 	movi	r3,4
8110917c:	10c0000d 	sth	r3,0(r2)
                                puts(xBuffer32[i].buffer);                                
81109180:	e0bffa43 	ldbu	r2,-23(fp)
81109184:	10c009a4 	muli	r3,r2,38
81109188:	00a045b4 	movhi	r2,33046
8110918c:	10a25c04 	addi	r2,r2,-30352
81109190:	1885883a 	add	r2,r3,r2
81109194:	1009883a 	mov	r4,r2
81109198:	110fa600 	call	8110fa60 <puts>
                                k++;
8110919c:	e0bffa83 	ldbu	r2,-22(fp)
811091a0:	10800044 	addi	r2,r2,1
811091a4:	e0bffa85 	stb	r2,-22(fp)
                            } while ( ucRetransB32[k] != 255 );                       
811091a8:	e0bffa83 	ldbu	r2,-22(fp)
811091ac:	e0fffb04 	addi	r3,fp,-20
811091b0:	1885883a 	add	r2,r3,r2
811091b4:	10800003 	ldbu	r2,0(r2)
811091b8:	10803fcc 	andi	r2,r2,255
811091bc:	10803fd8 	cmpnei	r2,r2,255
811091c0:	103fd31e 	bne	r2,zero,81109110 <__reset+0xfb0e9110>

                            OSMutexPost(xMutexBuffer32);
811091c4:	d0a06217 	ldw	r2,-32376(gp)
811091c8:	1009883a 	mov	r4,r2
811091cc:	1129dd80 	call	81129dd8 <OSMutexPost>
811091d0:	00000106 	br	811091d8 <vTimeoutCheckerTask+0x6c0>
                        } else {
                            /*  Could not get the mutex for the buffer32. There is no big impact to the system. So next cycle it may be transmited.
                                This is not a reason to exit the execution of all Simucam.*/
                            vCouldNotRetransmitB32TimeoutTask();
811091d4:	110bc340 	call	8110bc34 <vCouldNotRetransmitB32TimeoutTask>
                        }
                    }

                    if ( ucRetransB64[0] != 255 ) {
811091d8:	e0bffd03 	ldbu	r2,-12(fp)
811091dc:	10803fcc 	andi	r2,r2,255
811091e0:	10803fe0 	cmpeqi	r2,r2,255
811091e4:	10003c1e 	bne	r2,zero,811092d8 <vTimeoutCheckerTask+0x7c0>
                        OSMutexPend(xMutexBuffer64, 1, &error_code); /* Try to get the mutex (wait 1 ticks) */
811091e8:	d0a06617 	ldw	r2,-32360(gp)
811091ec:	e0fffac4 	addi	r3,fp,-21
811091f0:	180d883a 	mov	r6,r3
811091f4:	01400044 	movi	r5,1
811091f8:	1009883a 	mov	r4,r2
811091fc:	11298340 	call	81129834 <OSMutexPend>
                        if ( error_code == OS_ERR_NONE ) {
81109200:	e0bffac3 	ldbu	r2,-21(fp)
81109204:	10803fcc 	andi	r2,r2,255
81109208:	1000321e 	bne	r2,zero,811092d4 <vTimeoutCheckerTask+0x7bc>
                            k = 0;
8110920c:	e03ffa85 	stb	zero,-22(fp)
                            do
                            {
                                i = ucRetransB64[k];
81109210:	e0bffa83 	ldbu	r2,-22(fp)
81109214:	e0fffd04 	addi	r3,fp,-12
81109218:	1885883a 	add	r2,r3,r2
8110921c:	10800003 	ldbu	r2,0(r2)
81109220:	e0bffa45 	stb	r2,-23(fp)
                                xBuffer64[i].ucNofRetries--;
81109224:	e0fffa43 	ldbu	r3,-23(fp)
81109228:	00a04574 	movhi	r2,33045
8110922c:	1090ff04 	addi	r2,r2,17404
81109230:	190011a4 	muli	r4,r3,70
81109234:	1105883a 	add	r2,r2,r4
81109238:	10801104 	addi	r2,r2,68
8110923c:	10800003 	ldbu	r2,0(r2)
81109240:	10bfffc4 	addi	r2,r2,-1
81109244:	1009883a 	mov	r4,r2
81109248:	00a04574 	movhi	r2,33045
8110924c:	1090ff04 	addi	r2,r2,17404
81109250:	18c011a4 	muli	r3,r3,70
81109254:	10c5883a 	add	r2,r2,r3
81109258:	10801104 	addi	r2,r2,68
8110925c:	11000005 	stb	r4,0(r2)
                                xBuffer64[i].usiTimeOut = TIMEOUT_COUNT;
81109260:	e0fffa43 	ldbu	r3,-23(fp)
81109264:	00a04574 	movhi	r2,33045
81109268:	1090ff04 	addi	r2,r2,17404
8110926c:	18c011a4 	muli	r3,r3,70
81109270:	10c5883a 	add	r2,r2,r3
81109274:	10801084 	addi	r2,r2,66
81109278:	00c00104 	movi	r3,4
8110927c:	10c0000d 	sth	r3,0(r2)
                                puts(xBuffer64[i].buffer);                                
81109280:	e0bffa43 	ldbu	r2,-23(fp)
81109284:	10c011a4 	muli	r3,r2,70
81109288:	00a04574 	movhi	r2,33045
8110928c:	1090ff04 	addi	r2,r2,17404
81109290:	1885883a 	add	r2,r3,r2
81109294:	1009883a 	mov	r4,r2
81109298:	110fa600 	call	8110fa60 <puts>
                                k++;
8110929c:	e0bffa83 	ldbu	r2,-22(fp)
811092a0:	10800044 	addi	r2,r2,1
811092a4:	e0bffa85 	stb	r2,-22(fp)
                            } while ( ucRetransB64[k] != 255 );
811092a8:	e0bffa83 	ldbu	r2,-22(fp)
811092ac:	e0fffd04 	addi	r3,fp,-12
811092b0:	1885883a 	add	r2,r3,r2
811092b4:	10800003 	ldbu	r2,0(r2)
811092b8:	10803fcc 	andi	r2,r2,255
811092bc:	10803fd8 	cmpnei	r2,r2,255
811092c0:	103fd31e 	bne	r2,zero,81109210 <__reset+0xfb0e9210>

                            OSMutexPost(xMutexBuffer64);
811092c4:	d0a06617 	ldw	r2,-32360(gp)
811092c8:	1009883a 	mov	r4,r2
811092cc:	1129dd80 	call	81129dd8 <OSMutexPost>
811092d0:	00000106 	br	811092d8 <vTimeoutCheckerTask+0x7c0>
                        } else {
                            /*  Could not get the mutex for the buffer32. There is no big impact to the system. So next cycle it may be transmited.
                                This is not a reason to exit the execution of all Simucam.*/
                            vCouldNotRetransmitB64TimeoutTask();
811092d4:	110bc9c0 	call	8110bc9c <vCouldNotRetransmitB64TimeoutTask>
                        }    
                    }

                    if ( ucRetransB128[0] != 255 ) {
811092d8:	e0bffe03 	ldbu	r2,-8(fp)
811092dc:	10803fcc 	andi	r2,r2,255
811092e0:	10803fe0 	cmpeqi	r2,r2,255
811092e4:	10003c1e 	bne	r2,zero,811093d8 <vTimeoutCheckerTask+0x8c0>
                        OSMutexPend(xMutexBuffer128, 1, &error_code); /* Try to get the mutex (wait 1 ticks) */
811092e8:	d0a06417 	ldw	r2,-32368(gp)
811092ec:	e0fffac4 	addi	r3,fp,-21
811092f0:	180d883a 	mov	r6,r3
811092f4:	01400044 	movi	r5,1
811092f8:	1009883a 	mov	r4,r2
811092fc:	11298340 	call	81129834 <OSMutexPend>
                        if ( error_code == OS_ERR_NONE ) {
81109300:	e0bffac3 	ldbu	r2,-21(fp)
81109304:	10803fcc 	andi	r2,r2,255
81109308:	1000321e 	bne	r2,zero,811093d4 <vTimeoutCheckerTask+0x8bc>
                            k = 0;
8110930c:	e03ffa85 	stb	zero,-22(fp)
                            do
                            {
                                i = ucRetransB128[k];
81109310:	e0bffa83 	ldbu	r2,-22(fp)
81109314:	e0fffe04 	addi	r3,fp,-8
81109318:	1885883a 	add	r2,r3,r2
8110931c:	10800003 	ldbu	r2,0(r2)
81109320:	e0bffa45 	stb	r2,-23(fp)
                                xBuffer128[i].ucNofRetries--;
81109324:	e0fffa43 	ldbu	r3,-23(fp)
81109328:	00a045b4 	movhi	r2,33046
8110932c:	10baa804 	addi	r2,r2,-5472
81109330:	190021a4 	muli	r4,r3,134
81109334:	1105883a 	add	r2,r2,r4
81109338:	10802104 	addi	r2,r2,132
8110933c:	10800003 	ldbu	r2,0(r2)
81109340:	10bfffc4 	addi	r2,r2,-1
81109344:	1009883a 	mov	r4,r2
81109348:	00a045b4 	movhi	r2,33046
8110934c:	10baa804 	addi	r2,r2,-5472
81109350:	18c021a4 	muli	r3,r3,134
81109354:	10c5883a 	add	r2,r2,r3
81109358:	10802104 	addi	r2,r2,132
8110935c:	11000005 	stb	r4,0(r2)
                                xBuffer128[i].usiTimeOut = TIMEOUT_COUNT;
81109360:	e0fffa43 	ldbu	r3,-23(fp)
81109364:	00a045b4 	movhi	r2,33046
81109368:	10baa804 	addi	r2,r2,-5472
8110936c:	18c021a4 	muli	r3,r3,134
81109370:	10c5883a 	add	r2,r2,r3
81109374:	10802084 	addi	r2,r2,130
81109378:	00c00104 	movi	r3,4
8110937c:	10c0000d 	sth	r3,0(r2)
                                puts(xBuffer128[i].buffer);                                
81109380:	e0bffa43 	ldbu	r2,-23(fp)
81109384:	10c021a4 	muli	r3,r2,134
81109388:	00a045b4 	movhi	r2,33046
8110938c:	10baa804 	addi	r2,r2,-5472
81109390:	1885883a 	add	r2,r3,r2
81109394:	1009883a 	mov	r4,r2
81109398:	110fa600 	call	8110fa60 <puts>
                                k++;
8110939c:	e0bffa83 	ldbu	r2,-22(fp)
811093a0:	10800044 	addi	r2,r2,1
811093a4:	e0bffa85 	stb	r2,-22(fp)
                            } while ( ucRetransB128[k] != 255 );
811093a8:	e0bffa83 	ldbu	r2,-22(fp)
811093ac:	e0fffe04 	addi	r3,fp,-8
811093b0:	1885883a 	add	r2,r3,r2
811093b4:	10800003 	ldbu	r2,0(r2)
811093b8:	10803fcc 	andi	r2,r2,255
811093bc:	10803fd8 	cmpnei	r2,r2,255
811093c0:	103fd31e 	bne	r2,zero,81109310 <__reset+0xfb0e9310>

                            OSMutexPost(xMutexBuffer128);
811093c4:	d0a06417 	ldw	r2,-32368(gp)
811093c8:	1009883a 	mov	r4,r2
811093cc:	1129dd80 	call	81129dd8 <OSMutexPost>
811093d0:	00000106 	br	811093d8 <vTimeoutCheckerTask+0x8c0>
                        } else {
                            /*  Could not get the mutex for the buffer32. There is no big impact to the system. So next cycle it may be transmited.
                                This is not a reason to exit the execution of all Simucam.*/
                            vCouldNotRetransmitB128TimeoutTask();
811093d4:	110bd040 	call	8110bd04 <vCouldNotRetransmitB128TimeoutTask>
                        }
                    }                    
                    OSMutexPost(xTxUARTMutex);
811093d8:	d0a06817 	ldw	r2,-32352(gp)
811093dc:	1009883a 	mov	r4,r2
811093e0:	1129dd80 	call	81129dd8 <OSMutexPost>
811093e4:	003de006 	br	81108b68 <__reset+0xfb0e8b68>
                } else {
                    /*  Couldn't get access to the UART tx buffer, there is no big impact to the system. So next cycle it may be transmited.
                        This is not a reason to exit the execution of all Simucam.*/
                    vFailCouldNotRetransmitTimeoutTask();
811093e8:	110bbcc0 	call	8110bbcc <vFailCouldNotRetransmitTimeoutTask>
811093ec:	003dde06 	br	81108b68 <__reset+0xfb0e8b68>
                }
            }

        } else {
            /* Should not get here, is a blocking semaphore for sync.*/
            vFailGetBlockingSemTimeoutTask();
811093f0:	110bafc0 	call	8110bafc <vFailGetBlockingSemTimeoutTask>
        }
    }
811093f4:	003ddc06 	br	81108b68 <__reset+0xfb0e8b68>

811093f8 <bResourcesInitRTOS>:
 */
TSimucam_MEB xSimMebStruct;

/* Instanceatin and Initialization of the resources for the RTOS */
bool bResourcesInitRTOS( void )
{
811093f8:	defff904 	addi	sp,sp,-28
811093fc:	de00012e 	bgeu	sp,et,81109404 <bResourcesInitRTOS+0xc>
81109400:	003b68fa 	trap	3
81109404:	dfc00615 	stw	ra,24(sp)
81109408:	df000515 	stw	fp,20(sp)
8110940c:	df000504 	addi	fp,sp,20
	bool bSuccess = TRUE;
81109410:	00800044 	movi	r2,1
81109414:	e0bffe15 	stw	r2,-8(fp)
	INT8U err;

	/* This semaphore in the sincronization of the task receiver_com_task with sender_com_task*/
	xSemCommInit = OSSemCreate(0);
81109418:	0009883a 	mov	r4,zero
8110941c:	112b5180 	call	8112b518 <OSSemCreate>
81109420:	d0a05815 	stw	r2,-32416(gp)
	if (!xSemCommInit) {
81109424:	d0a05817 	ldw	r2,-32416(gp)
81109428:	1000021e 	bne	r2,zero,81109434 <bResourcesInitRTOS+0x3c>
		vFailCreateSemaphoreResources();
8110942c:	110aeec0 	call	8110aeec <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
81109430:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This mutex will protect the access of tx buffer, between SenderTask and Acks from ReceiverTask*/
	xTxUARTMutex = OSMutexCreate(PCP_MUTEX_TX_UART_PRIO, &err);
81109434:	e0bfff04 	addi	r2,fp,-4
81109438:	100b883a 	mov	r5,r2
8110943c:	010000c4 	movi	r4,3
81109440:	11293600 	call	81129360 <OSMutexCreate>
81109444:	d0a06815 	stw	r2,-32352(gp)
	if ( err != OS_ERR_NONE ) {
81109448:	e0bfff03 	ldbu	r2,-4(fp)
8110944c:	10803fcc 	andi	r2,r2,255
81109450:	10000526 	beq	r2,zero,81109468 <bResourcesInitRTOS+0x70>
		vFailCreateMutexSResources(err);
81109454:	e0bfff03 	ldbu	r2,-4(fp)
81109458:	10803fcc 	andi	r2,r2,255
8110945c:	1009883a 	mov	r4,r2
81109460:	110ae8c0 	call	8110ae8c <vFailCreateMutexSResources>
		bSuccess = FALSE;
81109464:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This mutex will protect the access of the (re)transmission "big" buffer of 128 characters*/
	xMutexBuffer128 = OSMutexCreate(PCP_MUTEX_B128_PRIO, &err);
81109468:	e0bfff04 	addi	r2,fp,-4
8110946c:	100b883a 	mov	r5,r2
81109470:	01000184 	movi	r4,6
81109474:	11293600 	call	81129360 <OSMutexCreate>
81109478:	d0a06415 	stw	r2,-32368(gp)
	if ( err != OS_ERR_NONE ) {
8110947c:	e0bfff03 	ldbu	r2,-4(fp)
81109480:	10803fcc 	andi	r2,r2,255
81109484:	10000526 	beq	r2,zero,8110949c <bResourcesInitRTOS+0xa4>
		vFailCreateMutexSResources(err);
81109488:	e0bfff03 	ldbu	r2,-4(fp)
8110948c:	10803fcc 	andi	r2,r2,255
81109490:	1009883a 	mov	r4,r2
81109494:	110ae8c0 	call	8110ae8c <vFailCreateMutexSResources>
		bSuccess = FALSE;
81109498:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This mutex will protect the access of the (re)transmission "medium" buffer of 64 characters*/
	xMutexBuffer64 = OSMutexCreate(PCP_MUTEX_B64_PRIO, &err);
8110949c:	e0bfff04 	addi	r2,fp,-4
811094a0:	100b883a 	mov	r5,r2
811094a4:	010001c4 	movi	r4,7
811094a8:	11293600 	call	81129360 <OSMutexCreate>
811094ac:	d0a06615 	stw	r2,-32360(gp)
	if ( err != OS_ERR_NONE ) {
811094b0:	e0bfff03 	ldbu	r2,-4(fp)
811094b4:	10803fcc 	andi	r2,r2,255
811094b8:	10000526 	beq	r2,zero,811094d0 <bResourcesInitRTOS+0xd8>
		vFailCreateMutexSResources(err);
811094bc:	e0bfff03 	ldbu	r2,-4(fp)
811094c0:	10803fcc 	andi	r2,r2,255
811094c4:	1009883a 	mov	r4,r2
811094c8:	110ae8c0 	call	8110ae8c <vFailCreateMutexSResources>
		bSuccess = FALSE;
811094cc:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This mutex will protect the access of the (re)transmission "small" buffer of 32 characters*/
	xMutexBuffer32 = OSMutexCreate(PCP_MUTEX_B32_PRIO, &err);
811094d0:	e0bfff04 	addi	r2,fp,-4
811094d4:	100b883a 	mov	r5,r2
811094d8:	01000204 	movi	r4,8
811094dc:	11293600 	call	81129360 <OSMutexCreate>
811094e0:	d0a06215 	stw	r2,-32376(gp)
	if ( err != OS_ERR_NONE ) {
811094e4:	e0bfff03 	ldbu	r2,-4(fp)
811094e8:	10803fcc 	andi	r2,r2,255
811094ec:	10000526 	beq	r2,zero,81109504 <bResourcesInitRTOS+0x10c>
		vFailCreateMutexSResources(err);
811094f0:	e0bfff03 	ldbu	r2,-4(fp)
811094f4:	10803fcc 	andi	r2,r2,255
811094f8:	1009883a 	mov	r4,r2
811094fc:	110ae8c0 	call	8110ae8c <vFailCreateMutexSResources>
		bSuccess = FALSE;
81109500:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This semaphore will count the number of positions available in the "big" buffer of 128 characters*/
	xSemCountBuffer128 = OSSemCreate(N_128);
81109504:	01000084 	movi	r4,2
81109508:	112b5180 	call	8112b518 <OSSemCreate>
8110950c:	d0a05b15 	stw	r2,-32404(gp)
	if (!xSemCountBuffer128) {
81109510:	d0a05b17 	ldw	r2,-32404(gp)
81109514:	1000021e 	bne	r2,zero,81109520 <bResourcesInitRTOS+0x128>
		vFailCreateSemaphoreResources();
81109518:	110aeec0 	call	8110aeec <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110951c:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This semaphore will count the number of positions available in the "medium" buffer of 64 characters*/
	xSemCountBuffer64 = OSSemCreate(N_64);
81109520:	01000104 	movi	r4,4
81109524:	112b5180 	call	8112b518 <OSSemCreate>
81109528:	d0a05715 	stw	r2,-32420(gp)
	if (!xSemCountBuffer64) {
8110952c:	d0a05717 	ldw	r2,-32420(gp)
81109530:	1000021e 	bne	r2,zero,8110953c <bResourcesInitRTOS+0x144>
		vFailCreateSemaphoreResources();
81109534:	110aeec0 	call	8110aeec <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
81109538:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This semaphore will count the number of positions available in the "small" buffer of 32 characters*/
	xSemCountBuffer32 = OSSemCreate(N_32);
8110953c:	01000204 	movi	r4,8
81109540:	112b5180 	call	8112b518 <OSSemCreate>
81109544:	d0a06515 	stw	r2,-32364(gp)
	if (!xSemCountBuffer32) {
81109548:	d0a06517 	ldw	r2,-32364(gp)
8110954c:	1000021e 	bne	r2,zero,81109558 <bResourcesInitRTOS+0x160>
		vFailCreateSemaphoreResources();
81109550:	110aeec0 	call	8110aeec <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
81109554:	e03ffe15 	stw	zero,-8(fp)
	}


	/* Mutex and Semaphores to control the communication of FastReaderTask */
	xMutexReceivedACK = OSMutexCreate(PCP_MUTEX_RECEIVER_ACK, &err);
81109558:	e0bfff04 	addi	r2,fp,-4
8110955c:	100b883a 	mov	r5,r2
81109560:	01000144 	movi	r4,5
81109564:	11293600 	call	81129360 <OSMutexCreate>
81109568:	d0a05d15 	stw	r2,-32396(gp)
	if ( err != OS_ERR_NONE ) {
8110956c:	e0bfff03 	ldbu	r2,-4(fp)
81109570:	10803fcc 	andi	r2,r2,255
81109574:	10000526 	beq	r2,zero,8110958c <bResourcesInitRTOS+0x194>
		vFailCreateMutexSResources(err);
81109578:	e0bfff03 	ldbu	r2,-4(fp)
8110957c:	10803fcc 	andi	r2,r2,255
81109580:	1009883a 	mov	r4,r2
81109584:	110ae8c0 	call	8110ae8c <vFailCreateMutexSResources>
		bSuccess = FALSE;
81109588:	e03ffe15 	stw	zero,-8(fp)
	}

	/* Mutex for Reader -> Parser*/
	xMutexPreParsed = OSMutexCreate(PCP_MUTEX_PrePareseds, &err);
8110958c:	e0bfff04 	addi	r2,fp,-4
81109590:	100b883a 	mov	r5,r2
81109594:	01000244 	movi	r4,9
81109598:	11293600 	call	81129360 <OSMutexCreate>
8110959c:	d0a06115 	stw	r2,-32380(gp)
	if ( err != OS_ERR_NONE ) {
811095a0:	e0bfff03 	ldbu	r2,-4(fp)
811095a4:	10803fcc 	andi	r2,r2,255
811095a8:	10000526 	beq	r2,zero,811095c0 <bResourcesInitRTOS+0x1c8>
		vFailCreateMutexSResources(err);
811095ac:	e0bfff03 	ldbu	r2,-4(fp)
811095b0:	10803fcc 	andi	r2,r2,255
811095b4:	1009883a 	mov	r4,r2
811095b8:	110ae8c0 	call	8110ae8c <vFailCreateMutexSResources>
		bSuccess = FALSE;
811095bc:	e03ffe15 	stw	zero,-8(fp)
	}

	xSemCountReceivedACK = OSSemCreate(0);
811095c0:	0009883a 	mov	r4,zero
811095c4:	112b5180 	call	8112b518 <OSSemCreate>
811095c8:	d0a05e15 	stw	r2,-32392(gp)
	if (!xSemCountReceivedACK) {
811095cc:	d0a05e17 	ldw	r2,-32392(gp)
811095d0:	1000021e 	bne	r2,zero,811095dc <bResourcesInitRTOS+0x1e4>
		vFailCreateSemaphoreResources();
811095d4:	110aeec0 	call	8110aeec <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
811095d8:	e03ffe15 	stw	zero,-8(fp)
	}

	xSemCountPreParsed = OSSemCreate(0);
811095dc:	0009883a 	mov	r4,zero
811095e0:	112b5180 	call	8112b518 <OSSemCreate>
811095e4:	d0a05c15 	stw	r2,-32400(gp)
	if (!xSemCountPreParsed) {
811095e8:	d0a05c17 	ldw	r2,-32400(gp)
811095ec:	1000021e 	bne	r2,zero,811095f8 <bResourcesInitRTOS+0x200>
		vFailCreateSemaphoreResources();
811095f0:	110aeec0 	call	8110aeec <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
811095f4:	e03ffe15 	stw	zero,-8(fp)
	}

	/* Mutex and Semaphore to AckSenderTask*/
	xSemCountSenderACK = OSSemCreate(0);
811095f8:	0009883a 	mov	r4,zero
811095fc:	112b5180 	call	8112b518 <OSSemCreate>
81109600:	d0a05915 	stw	r2,-32412(gp)
	if (!xSemCountSenderACK) {
81109604:	d0a05917 	ldw	r2,-32412(gp)
81109608:	1000021e 	bne	r2,zero,81109614 <bResourcesInitRTOS+0x21c>
		vFailCreateSemaphoreResources();
8110960c:	110aeec0 	call	8110aeec <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
81109610:	e03ffe15 	stw	zero,-8(fp)
	}

	xMutexSenderACK = OSMutexCreate(PCP_MUTEX_SENDER_ACK, &err);
81109614:	e0bfff04 	addi	r2,fp,-4
81109618:	100b883a 	mov	r5,r2
8110961c:	01000104 	movi	r4,4
81109620:	11293600 	call	81129360 <OSMutexCreate>
81109624:	d0a06715 	stw	r2,-32356(gp)
	if ( err != OS_ERR_NONE ) {
81109628:	e0bfff03 	ldbu	r2,-4(fp)
8110962c:	10803fcc 	andi	r2,r2,255
81109630:	10000526 	beq	r2,zero,81109648 <bResourcesInitRTOS+0x250>
		vFailCreateMutexSResources(err);
81109634:	e0bfff03 	ldbu	r2,-4(fp)
81109638:	10803fcc 	andi	r2,r2,255
8110963c:	1009883a 	mov	r4,r2
81109640:	110ae8c0 	call	8110ae8c <vFailCreateMutexSResources>
		bSuccess = FALSE;
81109644:	e03ffe15 	stw	zero,-8(fp)
	}

	xSemTimeoutChecker = OSSemCreate(0);
81109648:	0009883a 	mov	r4,zero
8110964c:	112b5180 	call	8112b518 <OSSemCreate>
81109650:	d0a05f15 	stw	r2,-32388(gp)
	if (!xSemTimeoutChecker) {
81109654:	d0a05f17 	ldw	r2,-32388(gp)
81109658:	1000021e 	bne	r2,zero,81109664 <bResourcesInitRTOS+0x26c>
		vFailCreateSemaphoreResources();
8110965c:	110aeec0 	call	8110aeec <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
81109660:	e03ffe15 	stw	zero,-8(fp)
	}


	/* Create the timer that will be used to count the timeout for the retransmission*/
	xTimerRetransmission = OSTmrCreate(	(INT32U         )DLY_TIMER,  /* 200 ticks = 200 millisec */
81109664:	e0bfff04 	addi	r2,fp,-4
81109668:	d8800215 	stw	r2,8(sp)
8110966c:	00a04534 	movhi	r2,33044
81109670:	10a8f304 	addi	r2,r2,-23604
81109674:	d8800115 	stw	r2,4(sp)
81109678:	d8000015 	stw	zero,0(sp)
8110967c:	01e04474 	movhi	r7,33041
81109680:	39e80404 	addi	r7,r7,-24560
81109684:	01800084 	movi	r6,2
81109688:	01400144 	movi	r5,5
8110968c:	01003204 	movi	r4,200
81109690:	112dbe40 	call	8112dbe4 <OSTmrCreate>
81109694:	d0a06315 	stw	r2,-32372(gp)
										(INT8U          )OS_TMR_OPT_PERIODIC,
										(OS_TMR_CALLBACK)vTimeoutCheck,
										(void          *)0,
										(INT8U         *)"timer timeout",
										(INT8U         *)&err);	
	if ( err != OS_ERR_NONE ) {
81109698:	e0bfff03 	ldbu	r2,-4(fp)
8110969c:	10803fcc 	andi	r2,r2,255
811096a0:	10000226 	beq	r2,zero,811096ac <bResourcesInitRTOS+0x2b4>
		vFailCreateTimerRetransmisison();
811096a4:	110ba180 	call	8110ba18 <vFailCreateTimerRetransmisison>
		bSuccess = FALSE;
811096a8:	e03ffe15 	stw	zero,-8(fp)
	}

	return bSuccess;
811096ac:	e0bffe17 	ldw	r2,-8(fp)
}
811096b0:	e037883a 	mov	sp,fp
811096b4:	dfc00117 	ldw	ra,4(sp)
811096b8:	df000017 	ldw	fp,0(sp)
811096bc:	dec00204 	addi	sp,sp,8
811096c0:	f800283a 	ret

811096c4 <vVariablesInitialization>:

void vVariablesInitialization ( void ) {
811096c4:	deffff04 	addi	sp,sp,-4
811096c8:	de00012e 	bgeu	sp,et,811096d0 <vVariablesInitialization+0xc>
811096cc:	003b68fa 	trap	3
811096d0:	df000015 	stw	fp,0(sp)
811096d4:	d839883a 	mov	fp,sp
	usiIdCMD = 0;
811096d8:	d020600d 	sth	zero,-32384(gp)
}
811096dc:	0001883a 	nop
811096e0:	e037883a 	mov	sp,fp
811096e4:	df000017 	ldw	fp,0(sp)
811096e8:	dec00104 	addi	sp,sp,4
811096ec:	f800283a 	ret

811096f0 <main>:



/* Entry point */
int main(void)
{
811096f0:	defff704 	addi	sp,sp,-36
811096f4:	de00012e 	bgeu	sp,et,811096fc <main+0xc>
811096f8:	003b68fa 	trap	3
811096fc:	dfc00815 	stw	ra,32(sp)
81109700:	df000715 	stw	fp,28(sp)
81109704:	df000704 	addi	fp,sp,28
	INT8U error_code;
	bool bIniSimucamStatus = FALSE;
81109708:	e03ffe15 	stw	zero,-8(fp)
	
	/* Clear the RTOS timer */
	OSTimeSet(0);
8110970c:	0009883a 	mov	r4,zero
81109710:	112db7c0 	call	8112db7c <OSTimeSet>

	/* Debug device initialization - JTAG USB */
	#ifdef DEBUG_ON
		fp = fopen(JTAG_UART_0_NAME, "r+");
81109714:	01604534 	movhi	r5,33044
81109718:	2968f704 	addi	r5,r5,-23588
8110971c:	01204534 	movhi	r4,33044
81109720:	2128f804 	addi	r4,r4,-23584
81109724:	110e5d40 	call	8110e5d4 <fopen>
81109728:	d0a05a15 	stw	r2,-32408(gp)
	#endif	


	/* Initialization of basic HW */
	vInitSimucamBasicHW();
8110972c:	110c4240 	call	8110c424 <vInitSimucamBasicHW>

	/* Test of some critical IPCores HW interfaces in the Simucam */
	bIniSimucamStatus = bTestSimucamCriticalHW();
81109730:	110cc880 	call	8110cc88 <bTestSimucamCriticalHW>
81109734:	e0bffe15 	stw	r2,-8(fp)
	if (bIniSimucamStatus == FALSE) {
81109738:	e0bffe17 	ldw	r2,-8(fp)
8110973c:	1000031e 	bne	r2,zero,8110974c <main+0x5c>
		vFailTestCriticasParts();
81109740:	110af380 	call	8110af38 <vFailTestCriticasParts>
		return -1;
81109744:	00bfffc4 	movi	r2,-1
81109748:	00003d06 	br	81109840 <main+0x150>
	}


	/* Log file Initialization in the SDCard */
	bIniSimucamStatus = bInitializeSDCard();
8110974c:	110cad40 	call	8110cad4 <bInitializeSDCard>
81109750:	e0bffe15 	stw	r2,-8(fp)
	if (bIniSimucamStatus == FALSE) {
81109754:	e0bffe17 	ldw	r2,-8(fp)
81109758:	1000031e 	bne	r2,zero,81109768 <main+0x78>
		vFailTestCriticasParts();
8110975c:	110af380 	call	8110af38 <vFailTestCriticasParts>
		return -1;
81109760:	00bfffc4 	movi	r2,-1
81109764:	00003606 	br	81109840 <main+0x150>
	}

	bIniSimucamStatus = vLoadDefaultETHConf();
81109768:	110a0600 	call	8110a060 <vLoadDefaultETHConf>
8110976c:	e0bffe15 	stw	r2,-8(fp)
	if (bIniSimucamStatus == FALSE) {
81109770:	e0bffe17 	ldw	r2,-8(fp)
81109774:	1000091e 	bne	r2,zero,8110979c <main+0xac>
		/* Default configuration for eth connection loaded */
		debug(fp, "Didn't load ETH configuration from SDCard. Default configuration will be loaded. (exit) \n");
81109778:	d0a05a17 	ldw	r2,-32408(gp)
8110977c:	100f883a 	mov	r7,r2
81109780:	01801644 	movi	r6,89
81109784:	01400044 	movi	r5,1
81109788:	01204534 	movhi	r4,33044
8110978c:	2128fd04 	addi	r4,r4,-23564
81109790:	110ec080 	call	8110ec08 <fwrite>
		return -1;
81109794:	00bfffc4 	movi	r2,-1
81109798:	00002906 	br	81109840 <main+0x150>
	}

	/* If debug is enable, will print the eth configuration in the*/
	#ifdef DEBUG_ON
		vShowEthConfig();
8110979c:	110a9ec0 	call	8110a9ec <vShowEthConfig>
	#endif


	/* This function creates all resources needed by the RTOS*/
	bIniSimucamStatus = bResourcesInitRTOS();
811097a0:	11093f80 	call	811093f8 <bResourcesInitRTOS>
811097a4:	e0bffe15 	stw	r2,-8(fp)
	if (bIniSimucamStatus == FALSE) {
811097a8:	e0bffe17 	ldw	r2,-8(fp)
811097ac:	1000091e 	bne	r2,zero,811097d4 <main+0xe4>
		/* Default configuration for eth connection loaded */
		debug(fp, "Can't allocate resources for RTOS. (exit) \n");
811097b0:	d0a05a17 	ldw	r2,-32408(gp)
811097b4:	100f883a 	mov	r7,r2
811097b8:	01800ac4 	movi	r6,43
811097bc:	01400044 	movi	r5,1
811097c0:	01204534 	movhi	r4,33044
811097c4:	21291404 	addi	r4,r4,-23472
811097c8:	110ec080 	call	8110ec08 <fwrite>
		return -1;
811097cc:	00bfffc4 	movi	r2,-1
811097d0:	00001b06 	br	81109840 <main+0x150>
	}

	/* Start the structure of control of the Simucam Application, including all FEEs instances */
	vSimucamStructureInit( &xSimMebStruct );
811097d4:	01204574 	movhi	r4,33045
811097d8:	21194504 	addi	r4,r4,25876
811097dc:	110c4ec0 	call	8110c4ec <vSimucamStructureInit>

	/* Creating the initialization task*/
	#if STACK_MONITOR
		error_code = OSTaskCreateExt(vInitialTask,
811097e0:	00800104 	movi	r2,4
811097e4:	d8800415 	stw	r2,16(sp)
811097e8:	d8000315 	stw	zero,12(sp)
811097ec:	00820004 	movi	r2,2048
811097f0:	d8800215 	stw	r2,8(sp)
811097f4:	00a045b4 	movhi	r2,33046
811097f8:	10b2a804 	addi	r2,r2,-13664
811097fc:	d8800115 	stw	r2,4(sp)
81109800:	00800044 	movi	r2,1
81109804:	d8800015 	stw	r2,0(sp)
81109808:	01c00044 	movi	r7,1
8110980c:	01a045b4 	movhi	r6,33046
81109810:	31baa704 	addi	r6,r6,-5476
81109814:	000b883a 	mov	r5,zero
81109818:	01204434 	movhi	r4,33040
8110981c:	211b1604 	addi	r4,r4,27736
81109820:	112c5ac0 	call	8112c5ac <OSTaskCreateExt>
81109824:	e0bfff05 	stb	r2,-4(fp)
									NULL,
									0);
	#endif


	if ( error_code == OS_ERR_NONE ) {
81109828:	e0bfff03 	ldbu	r2,-4(fp)
8110982c:	1000021e 	bne	r2,zero,81109838 <main+0x148>
		/* Start the scheduler (start the Real Time Application) */
		OSStart();
81109830:	1125b2c0 	call	81125b2c <OSStart>
81109834:	00000106 	br	8110983c <main+0x14c>
	} else {
		/* Some error occurs in the creation of the Initialization Task */
		vFailInitialization();
81109838:	110b3240 	call	8110b324 <vFailInitialization>
	}
  
	return 0;
8110983c:	0005883a 	mov	r2,zero
}
81109840:	e037883a 	mov	sp,fp
81109844:	dfc00117 	ldw	ra,4(sp)
81109848:	df000017 	ldw	fp,0(sp)
8110984c:	dec00204 	addi	sp,sp,8
81109850:	f800283a 	ret

81109854 <vCCDLoadDefaultValues>:
 */

#include "ccd.h"


void vCCDLoadDefaultValues( TCcdInfos *ccdDef ) {
81109854:	defffe04 	addi	sp,sp,-8
81109858:	de00012e 	bgeu	sp,et,81109860 <vCCDLoadDefaultValues+0xc>
8110985c:	003b68fa 	trap	3
81109860:	df000115 	stw	fp,4(sp)
81109864:	df000104 	addi	fp,sp,4
81109868:	e13fff15 	stw	r4,-4(fp)

    /*  todo: This function supposed to load the values from a SD Card in the future, for now it will load
        hard coded values */
    //bLoadCcdDefsSDCard();

	ccdDef->usiHeight = 4510;
8110986c:	e0bfff17 	ldw	r2,-4(fp)
81109870:	00c46784 	movi	r3,4510
81109874:	10c0020d 	sth	r3,8(r2)
	ccdDef->usiOLN = 30;
81109878:	e0bfff17 	ldw	r2,-4(fp)
8110987c:	00c00784 	movi	r3,30
81109880:	10c0010d 	sth	r3,4(r2)
	ccdDef->usiHalfWidth = 2255;
81109884:	e0bfff17 	ldw	r2,-4(fp)
81109888:	00c233c4 	movi	r3,2255
8110988c:	10c0018d 	sth	r3,6(r2)
	ccdDef->usiSOverscanN = 15;
81109890:	e0bfff17 	ldw	r2,-4(fp)
81109894:	00c003c4 	movi	r3,15
81109898:	10c0008d 	sth	r3,2(r2)
	ccdDef->usiSPrescanN = 25;
8110989c:	e0bfff17 	ldw	r2,-4(fp)
811098a0:	00c00644 	movi	r3,25
811098a4:	10c0000d 	sth	r3,0(r2)
}
811098a8:	0001883a 	nop
811098ac:	e037883a 	mov	sp,fp
811098b0:	df000017 	ldw	fp,0(sp)
811098b4:	dec00104 	addi	sp,sp,4
811098b8:	f800283a 	ret

811098bc <vCCDChangeValues>:

/* Only in NFEE_CONFIG of NFEE_STAND_BY */
/* Used to change de values of the CCD definitions from any source */
void vCCDChangeValues( TCcdInfos *ccdDef, unsigned short int usiHeight, unsigned short int usiOLN, unsigned short int usiHalfWidth,
                                unsigned short int usiSOverscanN, unsigned short int usiSPrescanN  ) {
811098bc:	defff904 	addi	sp,sp,-28
811098c0:	de00012e 	bgeu	sp,et,811098c8 <vCCDChangeValues+0xc>
811098c4:	003b68fa 	trap	3
811098c8:	df000615 	stw	fp,24(sp)
811098cc:	df000604 	addi	fp,sp,24
811098d0:	e13ffa15 	stw	r4,-24(fp)
811098d4:	2811883a 	mov	r8,r5
811098d8:	300b883a 	mov	r5,r6
811098dc:	3809883a 	mov	r4,r7
811098e0:	e0c00117 	ldw	r3,4(fp)
811098e4:	e0800217 	ldw	r2,8(fp)
811098e8:	e23ffb0d 	sth	r8,-20(fp)
811098ec:	e17ffc0d 	sth	r5,-16(fp)
811098f0:	e13ffd0d 	sth	r4,-12(fp)
811098f4:	e0fffe0d 	sth	r3,-8(fp)
811098f8:	e0bfff0d 	sth	r2,-4(fp)

	ccdDef->usiHeight = usiHeight;
811098fc:	e0bffa17 	ldw	r2,-24(fp)
81109900:	e0fffb0b 	ldhu	r3,-20(fp)
81109904:	10c0020d 	sth	r3,8(r2)
	ccdDef->usiOLN = usiOLN;
81109908:	e0bffa17 	ldw	r2,-24(fp)
8110990c:	e0fffc0b 	ldhu	r3,-16(fp)
81109910:	10c0010d 	sth	r3,4(r2)
	ccdDef->usiHalfWidth = usiHalfWidth;
81109914:	e0bffa17 	ldw	r2,-24(fp)
81109918:	e0fffd0b 	ldhu	r3,-12(fp)
8110991c:	10c0018d 	sth	r3,6(r2)
	ccdDef->usiSOverscanN = usiSOverscanN;
81109920:	e0bffa17 	ldw	r2,-24(fp)
81109924:	e0fffe0b 	ldhu	r3,-8(fp)
81109928:	10c0008d 	sth	r3,2(r2)
	ccdDef->usiSPrescanN = usiSPrescanN;
8110992c:	e0bffa17 	ldw	r2,-24(fp)
81109930:	e0ffff0b 	ldhu	r3,-4(fp)
81109934:	10c0000d 	sth	r3,0(r2)
}
81109938:	0001883a 	nop
8110993c:	e037883a 	mov	sp,fp
81109940:	df000017 	ldw	fp,0(sp)
81109944:	dec00104 	addi	sp,sp,4
81109948:	f800283a 	ret

8110994c <bSendUART128>:




/*Critical function: In the worst case it makes the task sleep for 425 miliseconds due to retries */
bool bSendUART128 ( char *cBuffer, short int siIdMessage ) {
8110994c:	deffd804 	addi	sp,sp,-160
81109950:	de00012e 	bgeu	sp,et,81109958 <bSendUART128+0xc>
81109954:	003b68fa 	trap	3
81109958:	dfc02715 	stw	ra,156(sp)
8110995c:	df002615 	stw	fp,152(sp)
81109960:	df002604 	addi	fp,sp,152
81109964:	e13ffe15 	stw	r4,-8(fp)
81109968:	2805883a 	mov	r2,r5
8110996c:	e0bfff0d 	sth	r2,-4(fp)
    INT8U ucErrorCodeSem;
	INT8U ucErrorCodeMutexRetrans;
	INT8U ucErrorCodeMutexTxUART;
	INT8U error_code;
	INT8U ucReturnMutexRetrans;
    unsigned char ucCountRetriesSem = 0;
81109970:	e03fda05 	stb	zero,-152(fp)
	unsigned char ucCountRetriesMutexRetrans = 0;
81109974:	e03fda45 	stb	zero,-151(fp)
	unsigned char ucCountRetriesMutexTxUART = 0;
81109978:	e03fda85 	stb	zero,-150(fp)
	unsigned char i = 0;
8110997c:	e03fdac5 	stb	zero,-149(fp)
	bool bSuccess = FALSE;
81109980:	e03fdb15 	stw	zero,-148(fp)
	char cLocalBuffer128[128];


	/* Copy cBuffer to avoid problems of reentrancy*/
	memcpy(cLocalBuffer128, cBuffer, 128);
81109984:	e0fffe17 	ldw	r3,-8(fp)
81109988:	e0bfdd44 	addi	r2,fp,-139
8110998c:	1809883a 	mov	r4,r3
81109990:	00c02004 	movi	r3,128
81109994:	180d883a 	mov	r6,r3
81109998:	200b883a 	mov	r5,r4
8110999c:	1009883a 	mov	r4,r2
811099a0:	110f61c0 	call	8110f61c <memcpy>
	bSuccess = FALSE;
811099a4:	e03fdb15 	stw	zero,-148(fp)
	/* Do while for try to get semaphore of the (re)transmission 'big' buffer (128) */
	ucCountRetriesSem = 0;
811099a8:	e03fda05 	stb	zero,-152(fp)
	do
	{
		ucCountRetriesSem++;
811099ac:	e0bfda03 	ldbu	r2,-152(fp)
811099b0:	10800044 	addi	r2,r2,1
811099b4:	e0bfda05 	stb	r2,-152(fp)
		/* This semaphore tells if there's space available in the "big" buffer */
		OSSemPend(xSemCountBuffer128, TICKS_WAITING_FOR_SPACE, &ucErrorCodeSem);
811099b8:	d0a05b17 	ldw	r2,-32404(gp)
811099bc:	e0ffdc84 	addi	r3,fp,-142
811099c0:	180d883a 	mov	r6,r3
811099c4:	01401904 	movi	r5,100
811099c8:	1009883a 	mov	r4,r2
811099cc:	112b8400 	call	8112b840 <OSSemPend>
		if ( ucErrorCodeSem == OS_NO_ERR ) {
811099d0:	e0bfdc83 	ldbu	r2,-142(fp)
811099d4:	10803fcc 	andi	r2,r2,255
811099d8:	1000b51e 	bne	r2,zero,81109cb0 <bSendUART128+0x364>
			/* There is space on the 'big' buffer of (re)transmission, but first try to transmit the packet
			   only after successful then put in the retransmission buffer. Otherwise there is chance to fill the (re)transmission
			   buffer and don't send the message.*/
			ucCountRetriesMutexTxUART = 0;
811099dc:	e03fda85 	stb	zero,-150(fp)
			do
			{
				ucCountRetriesMutexTxUART++;
811099e0:	e0bfda83 	ldbu	r2,-150(fp)
811099e4:	10800044 	addi	r2,r2,1
811099e8:	e0bfda85 	stb	r2,-150(fp)
				/*This mutex protect the txUART buffer*/
				OSMutexPend(xTxUARTMutex, 5, &ucErrorCodeMutexTxUART); /* Wait 5 ticks = 5 ms */
811099ec:	d0a06817 	ldw	r2,-32352(gp)
811099f0:	e0ffdd04 	addi	r3,fp,-140
811099f4:	180d883a 	mov	r6,r3
811099f8:	01400144 	movi	r5,5
811099fc:	1009883a 	mov	r4,r2
81109a00:	11298340 	call	81129834 <OSMutexPend>
				if ( ucErrorCodeMutexTxUART == OS_NO_ERR ) {
81109a04:	e0bfdd03 	ldbu	r2,-140(fp)
81109a08:	10803fcc 	andi	r2,r2,255
81109a0c:	1000981e 	bne	r2,zero,81109c70 <bSendUART128+0x324>
					/* 	Transmit the message to the NUC*/
					/* 	Trying the best scenario that is also get the mutex of the (re)transmission buffer
					   	if couldn't get, send the message any way as fast as possible to post the tx UART mutex
					   	and as soon as possible try to get the mutex of (re)transmission buffer.*/
					puts(cLocalBuffer128);
81109a10:	e0bfdd44 	addi	r2,fp,-139
81109a14:	1009883a 	mov	r4,r2
81109a18:	110fa600 	call	8110fa60 <puts>
					/*OSMutexAccept => non blocking*/
					ucReturnMutexRetrans = OSMutexAccept(xMutexBuffer128, &ucErrorCodeMutexRetrans); /* Just check the the mutex (non blocking) */
81109a1c:	d0a06417 	ldw	r2,-32368(gp)
81109a20:	e0ffdcc4 	addi	r3,fp,-141
81109a24:	180b883a 	mov	r5,r3
81109a28:	1009883a 	mov	r4,r2
81109a2c:	11291b40 	call	811291b4 <OSMutexAccept>
81109a30:	e0bfdc05 	stb	r2,-144(fp)
					if ( ucReturnMutexRetrans != 0 ) { /* Returning zero = Mutex not available */
81109a34:	e0bfdc03 	ldbu	r2,-144(fp)
81109a38:	10003a26 	beq	r2,zero,81109b24 <bSendUART128+0x1d8>
						/*	Best scenario, could get the mutex at the first try*/
						for(i = 0; i < N_128; i++)
81109a3c:	e03fdac5 	stb	zero,-149(fp)
81109a40:	00003206 	br	81109b0c <bSendUART128+0x1c0>
						{
							if ( xBuffer128[i].usiId == 0 ) {
81109a44:	e0ffdac3 	ldbu	r3,-149(fp)
81109a48:	00a045b4 	movhi	r2,33046
81109a4c:	10baa804 	addi	r2,r2,-5472
81109a50:	18c021a4 	muli	r3,r3,134
81109a54:	10c5883a 	add	r2,r2,r3
81109a58:	10802004 	addi	r2,r2,128
81109a5c:	1080000b 	ldhu	r2,0(r2)
81109a60:	10bfffcc 	andi	r2,r2,65535
81109a64:	1000261e 	bne	r2,zero,81109b00 <bSendUART128+0x1b4>
								/* Found a free place */
								bSuccess = TRUE;
81109a68:	00800044 	movi	r2,1
81109a6c:	e0bfdb15 	stw	r2,-148(fp)
								memcpy(xBuffer128[i].buffer, cLocalBuffer128, 128);
81109a70:	e0bfdac3 	ldbu	r2,-149(fp)
81109a74:	10c021a4 	muli	r3,r2,134
81109a78:	00a045b4 	movhi	r2,33046
81109a7c:	10baa804 	addi	r2,r2,-5472
81109a80:	1885883a 	add	r2,r3,r2
81109a84:	1009883a 	mov	r4,r2
81109a88:	e0bfdd44 	addi	r2,fp,-139
81109a8c:	00c02004 	movi	r3,128
81109a90:	180d883a 	mov	r6,r3
81109a94:	100b883a 	mov	r5,r2
81109a98:	110f61c0 	call	8110f61c <memcpy>
								xBuffer128[i].usiId = siIdMessage;
81109a9c:	e13fdac3 	ldbu	r4,-149(fp)
81109aa0:	e0ffff0b 	ldhu	r3,-4(fp)
81109aa4:	00a045b4 	movhi	r2,33046
81109aa8:	10baa804 	addi	r2,r2,-5472
81109aac:	210021a4 	muli	r4,r4,134
81109ab0:	1105883a 	add	r2,r2,r4
81109ab4:	10802004 	addi	r2,r2,128
81109ab8:	10c0000d 	sth	r3,0(r2)
								xBuffer128[i].ucNofRetries = N_RETRIES_COMM;
81109abc:	e0ffdac3 	ldbu	r3,-149(fp)
81109ac0:	00a045b4 	movhi	r2,33046
81109ac4:	10baa804 	addi	r2,r2,-5472
81109ac8:	18c021a4 	muli	r3,r3,134
81109acc:	10c5883a 	add	r2,r2,r3
81109ad0:	10802104 	addi	r2,r2,132
81109ad4:	00c000c4 	movi	r3,3
81109ad8:	10c00005 	stb	r3,0(r2)
								xBuffer128[i].usiTimeOut = TIMEOUT_COUNT;
81109adc:	e0ffdac3 	ldbu	r3,-149(fp)
81109ae0:	00a045b4 	movhi	r2,33046
81109ae4:	10baa804 	addi	r2,r2,-5472
81109ae8:	18c021a4 	muli	r3,r3,134
81109aec:	10c5883a 	add	r2,r2,r3
81109af0:	10802084 	addi	r2,r2,130
81109af4:	00c00104 	movi	r3,4
81109af8:	10c0000d 	sth	r3,0(r2)
								break;
81109afc:	00000606 	br	81109b18 <bSendUART128+0x1cc>
					puts(cLocalBuffer128);
					/*OSMutexAccept => non blocking*/
					ucReturnMutexRetrans = OSMutexAccept(xMutexBuffer128, &ucErrorCodeMutexRetrans); /* Just check the the mutex (non blocking) */
					if ( ucReturnMutexRetrans != 0 ) { /* Returning zero = Mutex not available */
						/*	Best scenario, could get the mutex at the first try*/
						for(i = 0; i < N_128; i++)
81109b00:	e0bfdac3 	ldbu	r2,-149(fp)
81109b04:	10800044 	addi	r2,r2,1
81109b08:	e0bfdac5 	stb	r2,-149(fp)
81109b0c:	e0bfdac3 	ldbu	r2,-149(fp)
81109b10:	108000b0 	cmpltui	r2,r2,2
81109b14:	103fcb1e 	bne	r2,zero,81109a44 <__reset+0xfb0e9a44>
								xBuffer128[i].usiTimeOut = TIMEOUT_COUNT;
								break;
							}
						}

						OSMutexPost(xMutexBuffer128); /* Free the Mutex after use the xBuffer128*/
81109b18:	d0a06417 	ldw	r2,-32368(gp)
81109b1c:	1009883a 	mov	r4,r2
81109b20:	1129dd80 	call	81129dd8 <OSMutexPost>
					}
					OSMutexPost(xTxUARTMutex);
81109b24:	d0a06817 	ldw	r2,-32352(gp)
81109b28:	1009883a 	mov	r4,r2
81109b2c:	1129dd80 	call	81129dd8 <OSMutexPost>

					/*  The message was send for sure, but there no garantee that the message was copied to the (re)transmission buffer
						need check if bsuccess is true. */
					if ( bSuccess != TRUE ) {
81109b30:	e0bfdb17 	ldw	r2,-148(fp)
81109b34:	10800060 	cmpeqi	r2,r2,1
81109b38:	10004d1e 	bne	r2,zero,81109c70 <bSendUART128+0x324>
						/* If not ok, try to get the mutex for 3 times */
						ucCountRetriesMutexRetrans = 0;
81109b3c:	e03fda45 	stb	zero,-151(fp)
						do
						{
							ucCountRetriesMutexRetrans++;
81109b40:	e0bfda43 	ldbu	r2,-151(fp)
81109b44:	10800044 	addi	r2,r2,1
81109b48:	e0bfda45 	stb	r2,-151(fp)
							/*OSMutexPend => Blocking*/
							OSMutexPend(xMutexBuffer128, 5, &ucErrorCodeMutexRetrans); /*5 ticks = 5 miliseconds */
81109b4c:	d0a06417 	ldw	r2,-32368(gp)
81109b50:	e0ffdcc4 	addi	r3,fp,-141
81109b54:	180d883a 	mov	r6,r3
81109b58:	01400144 	movi	r5,5
81109b5c:	1009883a 	mov	r4,r2
81109b60:	11298340 	call	81129834 <OSMutexPend>
							if ( ucErrorCodeMutexRetrans == OS_NO_ERR ) {
81109b64:	e0bfdcc3 	ldbu	r2,-141(fp)
81109b68:	10803fcc 	andi	r2,r2,255
81109b6c:	10003a1e 	bne	r2,zero,81109c58 <bSendUART128+0x30c>
								/* Got access to (re)transmission buffer */
								for(i = 0; i < N_128; i++)
81109b70:	e03fdac5 	stb	zero,-149(fp)
81109b74:	00003206 	br	81109c40 <bSendUART128+0x2f4>
								{
									if ( xBuffer128[i].usiId == 0 ) {
81109b78:	e0ffdac3 	ldbu	r3,-149(fp)
81109b7c:	00a045b4 	movhi	r2,33046
81109b80:	10baa804 	addi	r2,r2,-5472
81109b84:	18c021a4 	muli	r3,r3,134
81109b88:	10c5883a 	add	r2,r2,r3
81109b8c:	10802004 	addi	r2,r2,128
81109b90:	1080000b 	ldhu	r2,0(r2)
81109b94:	10bfffcc 	andi	r2,r2,65535
81109b98:	1000261e 	bne	r2,zero,81109c34 <bSendUART128+0x2e8>
										/* Found a free place */
										bSuccess = TRUE;
81109b9c:	00800044 	movi	r2,1
81109ba0:	e0bfdb15 	stw	r2,-148(fp)
										memcpy(xBuffer128[i].buffer, cLocalBuffer128, 128);
81109ba4:	e0bfdac3 	ldbu	r2,-149(fp)
81109ba8:	10c021a4 	muli	r3,r2,134
81109bac:	00a045b4 	movhi	r2,33046
81109bb0:	10baa804 	addi	r2,r2,-5472
81109bb4:	1885883a 	add	r2,r3,r2
81109bb8:	1009883a 	mov	r4,r2
81109bbc:	e0bfdd44 	addi	r2,fp,-139
81109bc0:	00c02004 	movi	r3,128
81109bc4:	180d883a 	mov	r6,r3
81109bc8:	100b883a 	mov	r5,r2
81109bcc:	110f61c0 	call	8110f61c <memcpy>
										xBuffer128[i].usiId = siIdMessage;
81109bd0:	e13fdac3 	ldbu	r4,-149(fp)
81109bd4:	e0ffff0b 	ldhu	r3,-4(fp)
81109bd8:	00a045b4 	movhi	r2,33046
81109bdc:	10baa804 	addi	r2,r2,-5472
81109be0:	210021a4 	muli	r4,r4,134
81109be4:	1105883a 	add	r2,r2,r4
81109be8:	10802004 	addi	r2,r2,128
81109bec:	10c0000d 	sth	r3,0(r2)
										xBuffer128[i].ucNofRetries = N_RETRIES_COMM;
81109bf0:	e0ffdac3 	ldbu	r3,-149(fp)
81109bf4:	00a045b4 	movhi	r2,33046
81109bf8:	10baa804 	addi	r2,r2,-5472
81109bfc:	18c021a4 	muli	r3,r3,134
81109c00:	10c5883a 	add	r2,r2,r3
81109c04:	10802104 	addi	r2,r2,132
81109c08:	00c000c4 	movi	r3,3
81109c0c:	10c00005 	stb	r3,0(r2)
										xBuffer128[i].usiTimeOut = TIMEOUT_COUNT;
81109c10:	e0ffdac3 	ldbu	r3,-149(fp)
81109c14:	00a045b4 	movhi	r2,33046
81109c18:	10baa804 	addi	r2,r2,-5472
81109c1c:	18c021a4 	muli	r3,r3,134
81109c20:	10c5883a 	add	r2,r2,r3
81109c24:	10802084 	addi	r2,r2,130
81109c28:	00c00104 	movi	r3,4
81109c2c:	10c0000d 	sth	r3,0(r2)
										break;
81109c30:	00000606 	br	81109c4c <bSendUART128+0x300>
							ucCountRetriesMutexRetrans++;
							/*OSMutexPend => Blocking*/
							OSMutexPend(xMutexBuffer128, 5, &ucErrorCodeMutexRetrans); /*5 ticks = 5 miliseconds */
							if ( ucErrorCodeMutexRetrans == OS_NO_ERR ) {
								/* Got access to (re)transmission buffer */
								for(i = 0; i < N_128; i++)
81109c34:	e0bfdac3 	ldbu	r2,-149(fp)
81109c38:	10800044 	addi	r2,r2,1
81109c3c:	e0bfdac5 	stb	r2,-149(fp)
81109c40:	e0bfdac3 	ldbu	r2,-149(fp)
81109c44:	108000b0 	cmpltui	r2,r2,2
81109c48:	103fcb1e 	bne	r2,zero,81109b78 <__reset+0xfb0e9b78>
										xBuffer128[i].ucNofRetries = N_RETRIES_COMM;
										xBuffer128[i].usiTimeOut = TIMEOUT_COUNT;
										break;
									}
								}
								OSMutexPost(xMutexBuffer128); /* Free the Mutex after use the xBuffer128*/
81109c4c:	d0a06417 	ldw	r2,-32368(gp)
81109c50:	1009883a 	mov	r4,r2
81109c54:	1129dd80 	call	81129dd8 <OSMutexPost>
							}
						} while ((ucErrorCodeMutexRetrans!= OS_NO_ERR) || ( ucCountRetriesMutexRetrans < 4)); /* Try for 3 times*/
81109c58:	e0bfdcc3 	ldbu	r2,-141(fp)
81109c5c:	10803fcc 	andi	r2,r2,255
81109c60:	103fb71e 	bne	r2,zero,81109b40 <__reset+0xfb0e9b40>
81109c64:	e0bfda43 	ldbu	r2,-151(fp)
81109c68:	10800130 	cmpltui	r2,r2,4
81109c6c:	103fb41e 	bne	r2,zero,81109b40 <__reset+0xfb0e9b40>
					}
				}
			} while ( (ucErrorCodeMutexTxUART!= OS_NO_ERR) || ( ucCountRetriesMutexTxUART < 4) ); /* Try for 3 times*/
81109c70:	e0bfdd03 	ldbu	r2,-140(fp)
81109c74:	10803fcc 	andi	r2,r2,255
81109c78:	103f591e 	bne	r2,zero,811099e0 <__reset+0xfb0e99e0>
81109c7c:	e0bfda83 	ldbu	r2,-150(fp)
81109c80:	10800130 	cmpltui	r2,r2,4
81109c84:	103f561e 	bne	r2,zero,811099e0 <__reset+0xfb0e99e0>

			/* If was not possible to send the message or to copy the message to the (re)transmisison buffer*/
			if (bSuccess!=TRUE) {
81109c88:	e0bfdb17 	ldw	r2,-148(fp)
81109c8c:	10800060 	cmpeqi	r2,r2,1
81109c90:	1000071e 	bne	r2,zero,81109cb0 <bSendUART128+0x364>
				/*	Got the semaphore but could not send te message or write in the (re)transmisison buffer,
					so give the semaphore back in order to indicate that the position of the (re)transmission buffer
					was not consumed. Another task could try to use it.*/
				error_code = OSSemPost(xSemCountBuffer128);
81109c94:	d0a05b17 	ldw	r2,-32404(gp)
81109c98:	1009883a 	mov	r4,r2
81109c9c:	112bbc80 	call	8112bbc8 <OSSemPost>
81109ca0:	e0bfdc45 	stb	r2,-143(fp)
				if ( error_code != OS_ERR_NONE ) {
81109ca4:	e0bfdc43 	ldbu	r2,-143(fp)
81109ca8:	10000126 	beq	r2,zero,81109cb0 <bSendUART128+0x364>
					vFailSetCountSemaphorexBuffer128(); /*Could not send back the semaphore, this is critical.*/
81109cac:	110b5240 	call	8110b524 <vFailSetCountSemaphorexBuffer128>
				}
			}
		}
	} while ( (ucErrorCodeSem != OS_NO_ERR) || ( ucCountRetriesSem < 6)) ; /* Try for 5 times*/
81109cb0:	e0bfdc83 	ldbu	r2,-142(fp)
81109cb4:	10803fcc 	andi	r2,r2,255
81109cb8:	103f3c1e 	bne	r2,zero,811099ac <__reset+0xfb0e99ac>
81109cbc:	e0bfda03 	ldbu	r2,-152(fp)
81109cc0:	108001b0 	cmpltui	r2,r2,6
81109cc4:	103f391e 	bne	r2,zero,811099ac <__reset+0xfb0e99ac>

	return bSuccess;
81109cc8:	e0bfdb17 	ldw	r2,-148(fp)
}
81109ccc:	e037883a 	mov	sp,fp
81109cd0:	dfc00117 	ldw	ra,4(sp)
81109cd4:	df000017 	ldw	fp,0(sp)
81109cd8:	dec00204 	addi	sp,sp,8
81109cdc:	f800283a 	ret

81109ce0 <vSendEthConf>:



void vSendEthConf ( void ) {
81109ce0:	deffc304 	addi	sp,sp,-244
81109ce4:	de00012e 	bgeu	sp,et,81109cec <vSendEthConf+0xc>
81109ce8:	003b68fa 	trap	3
81109cec:	dfc03c15 	stw	ra,240(sp)
81109cf0:	df003b15 	stw	fp,236(sp)
81109cf4:	dd403a15 	stw	r21,232(sp)
81109cf8:	dd003915 	stw	r20,228(sp)
81109cfc:	dcc03815 	stw	r19,224(sp)
81109d00:	dc803715 	stw	r18,220(sp)
81109d04:	dc403615 	stw	r17,216(sp)
81109d08:	dc003515 	stw	r16,212(sp)
81109d0c:	df003b04 	addi	fp,sp,236
    char cBufferETH[128] = "";
81109d10:	e03fd98d 	sth	zero,-154(fp)
81109d14:	e03fda0d 	sth	zero,-152(fp)
81109d18:	e0bfda84 	addi	r2,fp,-150
81109d1c:	00c01f04 	movi	r3,124
81109d20:	180d883a 	mov	r6,r3
81109d24:	000b883a 	mov	r5,zero
81109d28:	1009883a 	mov	r4,r2
81109d2c:	110f76c0 	call	8110f76c <memset>
    unsigned char crc = 0;
81109d30:	e03fd705 	stb	zero,-164(fp)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;
81109d34:	e03fd815 	stw	zero,-160(fp)

    usiIdCMDLocal = usiGetIdCMD();
81109d38:	1109f700 	call	81109f70 <usiGetIdCMD>
81109d3c:	e0bfd90d 	sth	r2,-156(fp)

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
81109d40:	e57fd90b 	ldhu	r21,-156(fp)
81109d44:	00a045b4 	movhi	r2,33046
81109d48:	10833f04 	addi	r2,r2,3324
81109d4c:	10c00617 	ldw	r3,24(r2)
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
81109d50:	00a045b4 	movhi	r2,33046
81109d54:	10833f04 	addi	r2,r2,3324
81109d58:	10800003 	ldbu	r2,0(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
81109d5c:	11003fcc 	andi	r4,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
81109d60:	00a045b4 	movhi	r2,33046
81109d64:	10833f04 	addi	r2,r2,3324
81109d68:	10800043 	ldbu	r2,1(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
81109d6c:	11403fcc 	andi	r5,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
81109d70:	00a045b4 	movhi	r2,33046
81109d74:	10833f04 	addi	r2,r2,3324
81109d78:	10800083 	ldbu	r2,2(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
81109d7c:	11803fcc 	andi	r6,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
81109d80:	00a045b4 	movhi	r2,33046
81109d84:	10833f04 	addi	r2,r2,3324
81109d88:	108000c3 	ldbu	r2,3(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
81109d8c:	11c03fcc 	andi	r7,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
81109d90:	00a045b4 	movhi	r2,33046
81109d94:	10833f04 	addi	r2,r2,3324
81109d98:	10800203 	ldbu	r2,8(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
81109d9c:	12003fcc 	andi	r8,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
81109da0:	00a045b4 	movhi	r2,33046
81109da4:	10833f04 	addi	r2,r2,3324
81109da8:	10800243 	ldbu	r2,9(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
81109dac:	12403fcc 	andi	r9,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
81109db0:	00a045b4 	movhi	r2,33046
81109db4:	10833f04 	addi	r2,r2,3324
81109db8:	10800283 	ldbu	r2,10(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
81109dbc:	12803fcc 	andi	r10,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
81109dc0:	00a045b4 	movhi	r2,33046
81109dc4:	10833f04 	addi	r2,r2,3324
81109dc8:	108002c3 	ldbu	r2,11(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
81109dcc:	12c03fcc 	andi	r11,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
81109dd0:	00a045b4 	movhi	r2,33046
81109dd4:	10833f04 	addi	r2,r2,3324
81109dd8:	10800103 	ldbu	r2,4(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
81109ddc:	13003fcc 	andi	r12,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
81109de0:	00a045b4 	movhi	r2,33046
81109de4:	10833f04 	addi	r2,r2,3324
81109de8:	10800143 	ldbu	r2,5(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
81109dec:	13403fcc 	andi	r13,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
81109df0:	00a045b4 	movhi	r2,33046
81109df4:	10833f04 	addi	r2,r2,3324
81109df8:	10800183 	ldbu	r2,6(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
81109dfc:	13803fcc 	andi	r14,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
81109e00:	00a045b4 	movhi	r2,33046
81109e04:	10833f04 	addi	r2,r2,3324
81109e08:	108001c3 	ldbu	r2,7(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
81109e0c:	13c03fcc 	andi	r15,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
81109e10:	00a045b4 	movhi	r2,33046
81109e14:	10833f04 	addi	r2,r2,3324
81109e18:	10800303 	ldbu	r2,12(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
81109e1c:	14003fcc 	andi	r16,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
81109e20:	00a045b4 	movhi	r2,33046
81109e24:	10833f04 	addi	r2,r2,3324
81109e28:	10800343 	ldbu	r2,13(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
81109e2c:	14403fcc 	andi	r17,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
81109e30:	00a045b4 	movhi	r2,33046
81109e34:	10833f04 	addi	r2,r2,3324
81109e38:	10800383 	ldbu	r2,14(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
81109e3c:	14803fcc 	andi	r18,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
81109e40:	00a045b4 	movhi	r2,33046
81109e44:	10833f04 	addi	r2,r2,3324
81109e48:	108003c3 	ldbu	r2,15(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
81109e4c:	14c03fcc 	andi	r19,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
                        xConfEth.siPortPUS);
81109e50:	00a045b4 	movhi	r2,33046
81109e54:	10833f04 	addi	r2,r2,3324
81109e58:	1080058b 	ldhu	r2,22(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
81109e5c:	10bfffcc 	andi	r2,r2,65535
81109e60:	e53fd984 	addi	r20,fp,-154
81109e64:	d8801115 	stw	r2,68(sp)
81109e68:	dcc01015 	stw	r19,64(sp)
81109e6c:	dc800f15 	stw	r18,60(sp)
81109e70:	dc400e15 	stw	r17,56(sp)
81109e74:	dc000d15 	stw	r16,52(sp)
81109e78:	dbc00c15 	stw	r15,48(sp)
81109e7c:	db800b15 	stw	r14,44(sp)
81109e80:	db400a15 	stw	r13,40(sp)
81109e84:	db000915 	stw	r12,36(sp)
81109e88:	dac00815 	stw	r11,32(sp)
81109e8c:	da800715 	stw	r10,28(sp)
81109e90:	da400615 	stw	r9,24(sp)
81109e94:	da000515 	stw	r8,20(sp)
81109e98:	d9c00415 	stw	r7,16(sp)
81109e9c:	d9800315 	stw	r6,12(sp)
81109ea0:	d9400215 	stw	r5,8(sp)
81109ea4:	d9000115 	stw	r4,4(sp)
81109ea8:	d8c00015 	stw	r3,0(sp)
81109eac:	a80f883a 	mov	r7,r21
81109eb0:	018010c4 	movi	r6,67
81109eb4:	01604534 	movhi	r5,33044
81109eb8:	29691f04 	addi	r5,r5,-23428
81109ebc:	a009883a 	mov	r4,r20
81109ec0:	110fda40 	call	8110fda4 <sprintf>
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
                        xConfEth.siPortPUS);
    crc = ucCrc8wInit( cBufferETH , strlen(cBufferETH));
81109ec4:	e0bfd984 	addi	r2,fp,-154
81109ec8:	1009883a 	mov	r4,r2
81109ecc:	110ffb80 	call	8110ffb8 <strlen>
81109ed0:	1007883a 	mov	r3,r2
81109ed4:	e0bfd984 	addi	r2,fp,-154
81109ed8:	180b883a 	mov	r5,r3
81109edc:	1009883a 	mov	r4,r2
81109ee0:	110adc00 	call	8110adc0 <ucCrc8wInit>
81109ee4:	e0bfd705 	stb	r2,-164(fp)
    sprintf(cBufferETH, "%s|%hhu;", cBufferETH, crc );
81109ee8:	e13fd703 	ldbu	r4,-164(fp)
81109eec:	e0ffd984 	addi	r3,fp,-154
81109ef0:	e0bfd984 	addi	r2,fp,-154
81109ef4:	200f883a 	mov	r7,r4
81109ef8:	180d883a 	mov	r6,r3
81109efc:	01604534 	movhi	r5,33044
81109f00:	29693704 	addi	r5,r5,-23332
81109f04:	1009883a 	mov	r4,r2
81109f08:	110fda40 	call	8110fda4 <sprintf>

	bSuccees = bSendUART128(cBufferETH, usiIdCMDLocal);
81109f0c:	e0bfd90b 	ldhu	r2,-156(fp)
81109f10:	10ffffcc 	andi	r3,r2,65535
81109f14:	18e0001c 	xori	r3,r3,32768
81109f18:	18e00004 	addi	r3,r3,-32768
81109f1c:	e0bfd984 	addi	r2,fp,-154
81109f20:	180b883a 	mov	r5,r3
81109f24:	1009883a 	mov	r4,r2
81109f28:	110994c0 	call	8110994c <bSendUART128>
81109f2c:	e0bfd815 	stw	r2,-160(fp)

	if ( bSuccees != TRUE ) {
81109f30:	e0bfd817 	ldw	r2,-160(fp)
81109f34:	10800060 	cmpeqi	r2,r2,1
81109f38:	1000011e 	bne	r2,zero,81109f40 <vSendEthConf+0x260>
		/*	Message wasn't send or could not insert in the (re)transmission buffer
			this will not be returned, because the system should keep working, an error function shoudl be called
			in order to print a message in the console, and maybe further implementation in the future*/
			vCouldNotSendEthConfUART();
81109f3c:	110b72c0 	call	8110b72c <vCouldNotSendEthConfUART>
	}
}
81109f40:	0001883a 	nop
81109f44:	e6fffa04 	addi	sp,fp,-24
81109f48:	dfc00717 	ldw	ra,28(sp)
81109f4c:	df000617 	ldw	fp,24(sp)
81109f50:	dd400517 	ldw	r21,20(sp)
81109f54:	dd000417 	ldw	r20,16(sp)
81109f58:	dcc00317 	ldw	r19,12(sp)
81109f5c:	dc800217 	ldw	r18,8(sp)
81109f60:	dc400117 	ldw	r17,4(sp)
81109f64:	dc000017 	ldw	r16,0(sp)
81109f68:	dec00804 	addi	sp,sp,32
81109f6c:	f800283a 	ret

81109f70 <usiGetIdCMD>:


unsigned short int usiGetIdCMD ( void ) {
81109f70:	deffff04 	addi	sp,sp,-4
81109f74:	de00012e 	bgeu	sp,et,81109f7c <usiGetIdCMD+0xc>
81109f78:	003b68fa 	trap	3
81109f7c:	df000015 	stw	fp,0(sp)
81109f80:	d839883a 	mov	fp,sp
    if ( usiIdCMD > 65534 )
81109f84:	d0a0600b 	ldhu	r2,-32384(gp)
81109f88:	10ffffcc 	andi	r3,r2,65535
81109f8c:	00bfffd4 	movui	r2,65535
81109f90:	1880031e 	bne	r3,r2,81109fa0 <usiGetIdCMD+0x30>
        usiIdCMD = 1;
81109f94:	00800044 	movi	r2,1
81109f98:	d0a0600d 	sth	r2,-32384(gp)
81109f9c:	00000306 	br	81109fac <usiGetIdCMD+0x3c>
    else
        usiIdCMD++;
81109fa0:	d0a0600b 	ldhu	r2,-32384(gp)
81109fa4:	10800044 	addi	r2,r2,1
81109fa8:	d0a0600d 	sth	r2,-32384(gp)
    return usiIdCMD;
81109fac:	d0a0600b 	ldhu	r2,-32384(gp)
}
81109fb0:	e037883a 	mov	sp,fp
81109fb4:	df000017 	ldw	fp,0(sp)
81109fb8:	dec00104 	addi	sp,sp,4
81109fbc:	f800283a 	ret

81109fc0 <siPosStr>:

inline short int siPosStr( char *buffer, char cValue) {
81109fc0:	defffb04 	addi	sp,sp,-20
81109fc4:	de00012e 	bgeu	sp,et,81109fcc <siPosStr+0xc>
81109fc8:	003b68fa 	trap	3
81109fcc:	dfc00415 	stw	ra,16(sp)
81109fd0:	df000315 	stw	fp,12(sp)
81109fd4:	df000304 	addi	fp,sp,12
81109fd8:	e13ffe15 	stw	r4,-8(fp)
81109fdc:	2805883a 	mov	r2,r5
81109fe0:	e0bfff05 	stb	r2,-4(fp)
    char cTempChar[2] = "";
81109fe4:	e03ffd0d 	sth	zero,-12(fp)
    cTempChar[0] = cValue; /* This step was add for performance. The command strcspn needs "" (const char *) */
81109fe8:	e0bfff03 	ldbu	r2,-4(fp)
81109fec:	e0bffd05 	stb	r2,-12(fp)
    return strcspn(buffer, cTempChar);
81109ff0:	e17ffd04 	addi	r5,fp,-12
81109ff4:	e13ffe17 	ldw	r4,-8(fp)
81109ff8:	110ff6c0 	call	8110ff6c <strcspn>
}
81109ffc:	e037883a 	mov	sp,fp
8110a000:	dfc00117 	ldw	ra,4(sp)
8110a004:	df000017 	ldw	fp,0(sp)
8110a008:	dec00204 	addi	sp,sp,8
8110a00c:	f800283a 	ret

8110a010 <vTimeoutCheck>:


void vTimeoutCheck (void *p_arg)
{
8110a010:	defffc04 	addi	sp,sp,-16
8110a014:	de00012e 	bgeu	sp,et,8110a01c <vTimeoutCheck+0xc>
8110a018:	003b68fa 	trap	3
8110a01c:	dfc00315 	stw	ra,12(sp)
8110a020:	df000215 	stw	fp,8(sp)
8110a024:	df000204 	addi	fp,sp,8
8110a028:	e13fff15 	stw	r4,-4(fp)
	INT8U error_code;

	/* Time to check the (re)transmission buffers, posting a semaphore to sync the task that will threat timeout logic (vTimeoutCheckerTask) */
	error_code = OSSemPost(xSemTimeoutChecker);
8110a02c:	d0a05f17 	ldw	r2,-32388(gp)
8110a030:	1009883a 	mov	r4,r2
8110a034:	112bbc80 	call	8112bbc8 <OSSemPost>
8110a038:	e0bffe05 	stb	r2,-8(fp)
	if ( error_code != OS_ERR_NONE ) {
8110a03c:	e0bffe03 	ldbu	r2,-8(fp)
8110a040:	10000126 	beq	r2,zero,8110a048 <vTimeoutCheck+0x38>
		vFailPostBlockingSemTimeoutTask();
8110a044:	110bb640 	call	8110bb64 <vFailPostBlockingSemTimeoutTask>
	}
}
8110a048:	0001883a 	nop
8110a04c:	e037883a 	mov	sp,fp
8110a050:	dfc00117 	ldw	ra,4(sp)
8110a054:	df000017 	ldw	fp,0(sp)
8110a058:	dec00204 	addi	sp,sp,8
8110a05c:	f800283a 	ret

8110a060 <vLoadDefaultETHConf>:

/*Configuration related to the eth connection*/
TConfEth xConfEth;


bool vLoadDefaultETHConf( void ){
8110a060:	defff504 	addi	sp,sp,-44
8110a064:	de00012e 	bgeu	sp,et,8110a06c <vLoadDefaultETHConf+0xc>
8110a068:	003b68fa 	trap	3
8110a06c:	dfc00a15 	stw	ra,40(sp)
8110a070:	df000915 	stw	fp,36(sp)
8110a074:	dc000815 	stw	r16,32(sp)
8110a078:	df000904 	addi	fp,sp,36
	short int siFile, sidhcpTemp;
	bool bSuccess = FALSE;
8110a07c:	e03ff715 	stw	zero,-36(fp)
	bool bEOF = FALSE;
8110a080:	e03ff815 	stw	zero,-32(fp)
	bool close = FALSE;
8110a084:	e03ffb15 	stw	zero,-20(fp)
	unsigned char ucParser;
	char c, *p_inteiro;
	char inteiro[8];


	if ( (xSdHandle.connected == TRUE) && (bSDcardIsPresent()) && (bSDcardFAT16Check()) ){
8110a088:	d0a06917 	ldw	r2,-32348(gp)
8110a08c:	10800058 	cmpnei	r2,r2,1
8110a090:	1001f61e 	bne	r2,zero,8110a86c <vLoadDefaultETHConf+0x80c>
8110a094:	110ca740 	call	8110ca74 <bSDcardIsPresent>
8110a098:	1001f426 	beq	r2,zero,8110a86c <vLoadDefaultETHConf+0x80c>
8110a09c:	110caa40 	call	8110caa4 <bSDcardFAT16Check>
8110a0a0:	1001f226 	beq	r2,zero,8110a86c <vLoadDefaultETHConf+0x80c>

		siFile = siOpenFile( ETH_FILE_NAME );
8110a0a4:	01204534 	movhi	r4,33044
8110a0a8:	21293a04 	addi	r4,r4,-23320
8110a0ac:	110cbcc0 	call	8110cbcc <siOpenFile>
8110a0b0:	e0bffc0d 	sth	r2,-16(fp)

		if ( siFile >= 0 ){
8110a0b4:	e0bffc0f 	ldh	r2,-16(fp)
8110a0b8:	1001e816 	blt	r2,zero,8110a85c <vLoadDefaultETHConf+0x7fc>

			memset( &(inteiro) , 10 , sizeof( inteiro ) );
8110a0bc:	e0bffd04 	addi	r2,fp,-12
8110a0c0:	01800204 	movi	r6,8
8110a0c4:	01400284 	movi	r5,10
8110a0c8:	1009883a 	mov	r4,r2
8110a0cc:	110f76c0 	call	8110f76c <memset>
			p_inteiro = inteiro;
8110a0d0:	e0bffd04 	addi	r2,fp,-12
8110a0d4:	e0bffa15 	stw	r2,-24(fp)

			do {
				c = cGetNextChar(siFile);
8110a0d8:	e0bffc0f 	ldh	r2,-16(fp)
8110a0dc:	1009883a 	mov	r4,r2
8110a0e0:	110cc480 	call	8110cc48 <cGetNextChar>
8110a0e4:	e0bff945 	stb	r2,-27(fp)
				//printf("%c \n", c);
				switch (c) {
8110a0e8:	e0bff947 	ldb	r2,-27(fp)
8110a0ec:	10800084 	addi	r2,r2,2
8110a0f0:	10c015a8 	cmpgeui	r3,r2,86
8110a0f4:	1801cf1e 	bne	r3,zero,8110a834 <vLoadDefaultETHConf+0x7d4>
8110a0f8:	100690ba 	slli	r3,r2,2
8110a0fc:	00a04474 	movhi	r2,33041
8110a100:	10a84404 	addi	r2,r2,-24304
8110a104:	1885883a 	add	r2,r3,r2
8110a108:	10800017 	ldw	r2,0(r2)
8110a10c:	1000683a 	jmp	r2
8110a110:	8110a2a8 	cmpgeui	r4,r16,17034
8110a114:	8110a29c 	xori	r4,r16,17034
8110a118:	8110a834 	orhi	r4,r16,17056
8110a11c:	8110a834 	orhi	r4,r16,17056
8110a120:	8110a834 	orhi	r4,r16,17056
8110a124:	8110a834 	orhi	r4,r16,17056
8110a128:	8110a834 	orhi	r4,r16,17056
8110a12c:	8110a834 	orhi	r4,r16,17056
8110a130:	8110a834 	orhi	r4,r16,17056
8110a134:	8110a834 	orhi	r4,r16,17056
8110a138:	8110a834 	orhi	r4,r16,17056
8110a13c:	8110a834 	orhi	r4,r16,17056
8110a140:	8110a84c 	andi	r4,r16,17057
8110a144:	8110a834 	orhi	r4,r16,17056
8110a148:	8110a834 	orhi	r4,r16,17056
8110a14c:	8110a84c 	andi	r4,r16,17057
8110a150:	8110a834 	orhi	r4,r16,17056
8110a154:	8110a834 	orhi	r4,r16,17056
8110a158:	8110a834 	orhi	r4,r16,17056
8110a15c:	8110a834 	orhi	r4,r16,17056
8110a160:	8110a834 	orhi	r4,r16,17056
8110a164:	8110a834 	orhi	r4,r16,17056
8110a168:	8110a834 	orhi	r4,r16,17056
8110a16c:	8110a834 	orhi	r4,r16,17056
8110a170:	8110a834 	orhi	r4,r16,17056
8110a174:	8110a834 	orhi	r4,r16,17056
8110a178:	8110a834 	orhi	r4,r16,17056
8110a17c:	8110a834 	orhi	r4,r16,17056
8110a180:	8110a834 	orhi	r4,r16,17056
8110a184:	8110a834 	orhi	r4,r16,17056
8110a188:	8110a834 	orhi	r4,r16,17056
8110a18c:	8110a834 	orhi	r4,r16,17056
8110a190:	8110a834 	orhi	r4,r16,17056
8110a194:	8110a834 	orhi	r4,r16,17056
8110a198:	8110a84c 	andi	r4,r16,17057
8110a19c:	8110a834 	orhi	r4,r16,17056
8110a1a0:	8110a834 	orhi	r4,r16,17056
8110a1a4:	8110a834 	orhi	r4,r16,17056
8110a1a8:	8110a834 	orhi	r4,r16,17056
8110a1ac:	8110a834 	orhi	r4,r16,17056
8110a1b0:	8110a834 	orhi	r4,r16,17056
8110a1b4:	8110a268 	cmpgeui	r4,r16,17033
8110a1b8:	8110a834 	orhi	r4,r16,17056
8110a1bc:	8110a834 	orhi	r4,r16,17056
8110a1c0:	8110a834 	orhi	r4,r16,17056
8110a1c4:	8110a834 	orhi	r4,r16,17056
8110a1c8:	8110a834 	orhi	r4,r16,17056
8110a1cc:	8110a834 	orhi	r4,r16,17056
8110a1d0:	8110a834 	orhi	r4,r16,17056
8110a1d4:	8110a834 	orhi	r4,r16,17056
8110a1d8:	8110a834 	orhi	r4,r16,17056
8110a1dc:	8110a834 	orhi	r4,r16,17056
8110a1e0:	8110a834 	orhi	r4,r16,17056
8110a1e4:	8110a834 	orhi	r4,r16,17056
8110a1e8:	8110a834 	orhi	r4,r16,17056
8110a1ec:	8110a834 	orhi	r4,r16,17056
8110a1f0:	8110a834 	orhi	r4,r16,17056
8110a1f4:	8110a834 	orhi	r4,r16,17056
8110a1f8:	8110a834 	orhi	r4,r16,17056
8110a1fc:	8110a834 	orhi	r4,r16,17056
8110a200:	8110a834 	orhi	r4,r16,17056
8110a204:	8110a834 	orhi	r4,r16,17056
8110a208:	8110a7fc 	xorhi	r4,r16,17055
8110a20c:	8110a834 	orhi	r4,r16,17056
8110a210:	8110a834 	orhi	r4,r16,17056
8110a214:	8110a834 	orhi	r4,r16,17056
8110a218:	8110a834 	orhi	r4,r16,17056
8110a21c:	8110a834 	orhi	r4,r16,17056
8110a220:	8110a834 	orhi	r4,r16,17056
8110a224:	8110a834 	orhi	r4,r16,17056
8110a228:	8110a5fc 	xorhi	r4,r16,17047
8110a22c:	8110a834 	orhi	r4,r16,17056
8110a230:	8110a834 	orhi	r4,r16,17056
8110a234:	8110a45c 	xori	r4,r16,17041
8110a238:	8110a754 	ori	r4,r16,17053
8110a23c:	8110a390 	cmplti	r4,r16,17038
8110a240:	8110a834 	orhi	r4,r16,17056
8110a244:	8110a834 	orhi	r4,r16,17056
8110a248:	8110a834 	orhi	r4,r16,17056
8110a24c:	8110a2c0 	call	88110a2c <__reset+0x20f0a2c>
8110a250:	8110a834 	orhi	r4,r16,17056
8110a254:	8110a834 	orhi	r4,r16,17056
8110a258:	8110a6cc 	andi	r4,r16,17051
8110a25c:	8110a834 	orhi	r4,r16,17056
8110a260:	8110a834 	orhi	r4,r16,17056
8110a264:	8110a52c 	andhi	r4,r16,17044
					case 39:// single quote '
						c = cGetNextChar(siFile);
8110a268:	e0bffc0f 	ldh	r2,-16(fp)
8110a26c:	1009883a 	mov	r4,r2
8110a270:	110cc480 	call	8110cc48 <cGetNextChar>
8110a274:	e0bff945 	stb	r2,-27(fp)
						while ( c != 39 ){
8110a278:	00000406 	br	8110a28c <vLoadDefaultETHConf+0x22c>
							c = cGetNextChar(siFile);
8110a27c:	e0bffc0f 	ldh	r2,-16(fp)
8110a280:	1009883a 	mov	r4,r2
8110a284:	110cc480 	call	8110cc48 <cGetNextChar>
8110a288:	e0bff945 	stb	r2,-27(fp)
				c = cGetNextChar(siFile);
				//printf("%c \n", c);
				switch (c) {
					case 39:// single quote '
						c = cGetNextChar(siFile);
						while ( c != 39 ){
8110a28c:	e0bff947 	ldb	r2,-27(fp)
8110a290:	108009d8 	cmpnei	r2,r2,39
8110a294:	103ff91e 	bne	r2,zero,8110a27c <__reset+0xfb0ea27c>
							c = cGetNextChar(siFile);
						}
						break;
8110a298:	00016d06 	br	8110a850 <vLoadDefaultETHConf+0x7f0>
					case -1: 	//EOF
						bEOF = TRUE;
8110a29c:	00800044 	movi	r2,1
8110a2a0:	e0bff815 	stw	r2,-32(fp)
						break;
8110a2a4:	00016a06 	br	8110a850 <vLoadDefaultETHConf+0x7f0>
					case -2: 	//EOF
						printf("Problem with SDCard");
8110a2a8:	01204534 	movhi	r4,33044
8110a2ac:	21293c04 	addi	r4,r4,-23312
8110a2b0:	110f9340 	call	8110f934 <printf>
						bEOF = TRUE;
8110a2b4:	00800044 	movi	r2,1
8110a2b8:	e0bff815 	stw	r2,-32(fp)
						break;
8110a2bc:	00016406 	br	8110a850 <vLoadDefaultETHConf+0x7f0>
					case 10: 	//ASCII: 10 = LN
					case 13: 	//ASCII: 13 = CR
						break;
					case 'M':

						ucParser = 0;
8110a2c0:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
8110a2c4:	e0bffc0f 	ldh	r2,-16(fp)
8110a2c8:	1009883a 	mov	r4,r2
8110a2cc:	110cc480 	call	8110cc48 <cGetNextChar>
8110a2d0:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
8110a2d4:	d0e00917 	ldw	r3,-32732(gp)
8110a2d8:	e0bff947 	ldb	r2,-27(fp)
8110a2dc:	10800044 	addi	r2,r2,1
8110a2e0:	1885883a 	add	r2,r3,r2
8110a2e4:	10800003 	ldbu	r2,0(r2)
8110a2e8:	10803fcc 	andi	r2,r2,255
8110a2ec:	1080010c 	andi	r2,r2,4
8110a2f0:	10000626 	beq	r2,zero,8110a30c <vLoadDefaultETHConf+0x2ac>
									(*p_inteiro) = c;
8110a2f4:	e0bffa17 	ldw	r2,-24(fp)
8110a2f8:	e0fff943 	ldbu	r3,-27(fp)
8110a2fc:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
8110a300:	e0bffa17 	ldw	r2,-24(fp)
8110a304:	10800044 	addi	r2,r2,1
8110a308:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=58) && (c !=59) ); //ASCII: 58 = ':' 59 = ';'
8110a30c:	e0bff947 	ldb	r2,-27(fp)
8110a310:	10800ea0 	cmpeqi	r2,r2,58
8110a314:	1000031e 	bne	r2,zero,8110a324 <vLoadDefaultETHConf+0x2c4>
8110a318:	e0bff947 	ldb	r2,-27(fp)
8110a31c:	10800ed8 	cmpnei	r2,r2,59
8110a320:	103fe81e 	bne	r2,zero,8110a2c4 <__reset+0xfb0ea2c4>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110a324:	e0bffa17 	ldw	r2,-24(fp)
8110a328:	00c00284 	movi	r3,10
8110a32c:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucMAC[min_sim(ucParser,5)] = atoi( inteiro );
8110a330:	e0bff903 	ldbu	r2,-28(fp)
8110a334:	10800168 	cmpgeui	r2,r2,5
8110a338:	1000021e 	bne	r2,zero,8110a344 <vLoadDefaultETHConf+0x2e4>
8110a33c:	e43ff903 	ldbu	r16,-28(fp)
8110a340:	00000106 	br	8110a348 <vLoadDefaultETHConf+0x2e8>
8110a344:	04000144 	movi	r16,5
8110a348:	e0bffd04 	addi	r2,fp,-12
8110a34c:	1009883a 	mov	r4,r2
8110a350:	110e4c00 	call	8110e4c0 <atoi>
8110a354:	1007883a 	mov	r3,r2
8110a358:	00a045b4 	movhi	r2,33046
8110a35c:	10833f04 	addi	r2,r2,3324
8110a360:	1405883a 	add	r2,r2,r16
8110a364:	10800404 	addi	r2,r2,16
8110a368:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
8110a36c:	e0bffd04 	addi	r2,fp,-12
8110a370:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
8110a374:	e0bff903 	ldbu	r2,-28(fp)
8110a378:	10800044 	addi	r2,r2,1
8110a37c:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
8110a380:	e0bff947 	ldb	r2,-27(fp)
8110a384:	10800ed8 	cmpnei	r2,r2,59
8110a388:	103fce1e 	bne	r2,zero,8110a2c4 <__reset+0xfb0ea2c4>

						break;
8110a38c:	00013006 	br	8110a850 <vLoadDefaultETHConf+0x7f0>
					case 'I':

						ucParser = 0;
8110a390:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
8110a394:	e0bffc0f 	ldh	r2,-16(fp)
8110a398:	1009883a 	mov	r4,r2
8110a39c:	110cc480 	call	8110cc48 <cGetNextChar>
8110a3a0:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
8110a3a4:	d0e00917 	ldw	r3,-32732(gp)
8110a3a8:	e0bff947 	ldb	r2,-27(fp)
8110a3ac:	10800044 	addi	r2,r2,1
8110a3b0:	1885883a 	add	r2,r3,r2
8110a3b4:	10800003 	ldbu	r2,0(r2)
8110a3b8:	10803fcc 	andi	r2,r2,255
8110a3bc:	1080010c 	andi	r2,r2,4
8110a3c0:	10000626 	beq	r2,zero,8110a3dc <vLoadDefaultETHConf+0x37c>
									(*p_inteiro) = c;
8110a3c4:	e0bffa17 	ldw	r2,-24(fp)
8110a3c8:	e0fff943 	ldbu	r3,-27(fp)
8110a3cc:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
8110a3d0:	e0bffa17 	ldw	r2,-24(fp)
8110a3d4:	10800044 	addi	r2,r2,1
8110a3d8:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=46) && (c !=59) ); //ASCII: 46 = '.' 59 = ';'
8110a3dc:	e0bff947 	ldb	r2,-27(fp)
8110a3e0:	10800ba0 	cmpeqi	r2,r2,46
8110a3e4:	1000031e 	bne	r2,zero,8110a3f4 <vLoadDefaultETHConf+0x394>
8110a3e8:	e0bff947 	ldb	r2,-27(fp)
8110a3ec:	10800ed8 	cmpnei	r2,r2,59
8110a3f0:	103fe81e 	bne	r2,zero,8110a394 <__reset+0xfb0ea394>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110a3f4:	e0bffa17 	ldw	r2,-24(fp)
8110a3f8:	00c00284 	movi	r3,10
8110a3fc:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucIP[min_sim(ucParser,3)] = atoi( inteiro );
8110a400:	e0bff903 	ldbu	r2,-28(fp)
8110a404:	108000e8 	cmpgeui	r2,r2,3
8110a408:	1000021e 	bne	r2,zero,8110a414 <vLoadDefaultETHConf+0x3b4>
8110a40c:	e43ff903 	ldbu	r16,-28(fp)
8110a410:	00000106 	br	8110a418 <vLoadDefaultETHConf+0x3b8>
8110a414:	040000c4 	movi	r16,3
8110a418:	e0bffd04 	addi	r2,fp,-12
8110a41c:	1009883a 	mov	r4,r2
8110a420:	110e4c00 	call	8110e4c0 <atoi>
8110a424:	1007883a 	mov	r3,r2
8110a428:	00a045b4 	movhi	r2,33046
8110a42c:	10833f04 	addi	r2,r2,3324
8110a430:	1405883a 	add	r2,r2,r16
8110a434:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
8110a438:	e0bffd04 	addi	r2,fp,-12
8110a43c:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
8110a440:	e0bff903 	ldbu	r2,-28(fp)
8110a444:	10800044 	addi	r2,r2,1
8110a448:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
8110a44c:	e0bff947 	ldb	r2,-27(fp)
8110a450:	10800ed8 	cmpnei	r2,r2,59
8110a454:	103fcf1e 	bne	r2,zero,8110a394 <__reset+0xfb0ea394>

						break;
8110a458:	0000fd06 	br	8110a850 <vLoadDefaultETHConf+0x7f0>
					case 'G':

						ucParser = 0;
8110a45c:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
8110a460:	e0bffc0f 	ldh	r2,-16(fp)
8110a464:	1009883a 	mov	r4,r2
8110a468:	110cc480 	call	8110cc48 <cGetNextChar>
8110a46c:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
8110a470:	d0e00917 	ldw	r3,-32732(gp)
8110a474:	e0bff947 	ldb	r2,-27(fp)
8110a478:	10800044 	addi	r2,r2,1
8110a47c:	1885883a 	add	r2,r3,r2
8110a480:	10800003 	ldbu	r2,0(r2)
8110a484:	10803fcc 	andi	r2,r2,255
8110a488:	1080010c 	andi	r2,r2,4
8110a48c:	10000626 	beq	r2,zero,8110a4a8 <vLoadDefaultETHConf+0x448>
									(*p_inteiro) = c;
8110a490:	e0bffa17 	ldw	r2,-24(fp)
8110a494:	e0fff943 	ldbu	r3,-27(fp)
8110a498:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
8110a49c:	e0bffa17 	ldw	r2,-24(fp)
8110a4a0:	10800044 	addi	r2,r2,1
8110a4a4:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=46) && (c !=59) ); //ASCII: 46 = '.' 59 = ';'
8110a4a8:	e0bff947 	ldb	r2,-27(fp)
8110a4ac:	10800ba0 	cmpeqi	r2,r2,46
8110a4b0:	1000031e 	bne	r2,zero,8110a4c0 <vLoadDefaultETHConf+0x460>
8110a4b4:	e0bff947 	ldb	r2,-27(fp)
8110a4b8:	10800ed8 	cmpnei	r2,r2,59
8110a4bc:	103fe81e 	bne	r2,zero,8110a460 <__reset+0xfb0ea460>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110a4c0:	e0bffa17 	ldw	r2,-24(fp)
8110a4c4:	00c00284 	movi	r3,10
8110a4c8:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucGTW[min_sim(ucParser,3)] = atoi( inteiro );
8110a4cc:	e0bff903 	ldbu	r2,-28(fp)
8110a4d0:	108000e8 	cmpgeui	r2,r2,3
8110a4d4:	1000021e 	bne	r2,zero,8110a4e0 <vLoadDefaultETHConf+0x480>
8110a4d8:	e43ff903 	ldbu	r16,-28(fp)
8110a4dc:	00000106 	br	8110a4e4 <vLoadDefaultETHConf+0x484>
8110a4e0:	040000c4 	movi	r16,3
8110a4e4:	e0bffd04 	addi	r2,fp,-12
8110a4e8:	1009883a 	mov	r4,r2
8110a4ec:	110e4c00 	call	8110e4c0 <atoi>
8110a4f0:	1007883a 	mov	r3,r2
8110a4f4:	00a045b4 	movhi	r2,33046
8110a4f8:	10833f04 	addi	r2,r2,3324
8110a4fc:	1405883a 	add	r2,r2,r16
8110a500:	10800104 	addi	r2,r2,4
8110a504:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
8110a508:	e0bffd04 	addi	r2,fp,-12
8110a50c:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
8110a510:	e0bff903 	ldbu	r2,-28(fp)
8110a514:	10800044 	addi	r2,r2,1
8110a518:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
8110a51c:	e0bff947 	ldb	r2,-27(fp)
8110a520:	10800ed8 	cmpnei	r2,r2,59
8110a524:	103fce1e 	bne	r2,zero,8110a460 <__reset+0xfb0ea460>

						break;
8110a528:	0000c906 	br	8110a850 <vLoadDefaultETHConf+0x7f0>
					case 'S':

						ucParser = 0;
8110a52c:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
8110a530:	e0bffc0f 	ldh	r2,-16(fp)
8110a534:	1009883a 	mov	r4,r2
8110a538:	110cc480 	call	8110cc48 <cGetNextChar>
8110a53c:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
8110a540:	d0e00917 	ldw	r3,-32732(gp)
8110a544:	e0bff947 	ldb	r2,-27(fp)
8110a548:	10800044 	addi	r2,r2,1
8110a54c:	1885883a 	add	r2,r3,r2
8110a550:	10800003 	ldbu	r2,0(r2)
8110a554:	10803fcc 	andi	r2,r2,255
8110a558:	1080010c 	andi	r2,r2,4
8110a55c:	10000626 	beq	r2,zero,8110a578 <vLoadDefaultETHConf+0x518>
									(*p_inteiro) = c;
8110a560:	e0bffa17 	ldw	r2,-24(fp)
8110a564:	e0fff943 	ldbu	r3,-27(fp)
8110a568:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
8110a56c:	e0bffa17 	ldw	r2,-24(fp)
8110a570:	10800044 	addi	r2,r2,1
8110a574:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=46) && (c !=59) ); //ASCII: 46 = '.' 59 = ';'
8110a578:	e0bff947 	ldb	r2,-27(fp)
8110a57c:	10800ba0 	cmpeqi	r2,r2,46
8110a580:	1000031e 	bne	r2,zero,8110a590 <vLoadDefaultETHConf+0x530>
8110a584:	e0bff947 	ldb	r2,-27(fp)
8110a588:	10800ed8 	cmpnei	r2,r2,59
8110a58c:	103fe81e 	bne	r2,zero,8110a530 <__reset+0xfb0ea530>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110a590:	e0bffa17 	ldw	r2,-24(fp)
8110a594:	00c00284 	movi	r3,10
8110a598:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucSubNet[min_sim(ucParser,3)] = atoi( inteiro );
8110a59c:	e0bff903 	ldbu	r2,-28(fp)
8110a5a0:	108000e8 	cmpgeui	r2,r2,3
8110a5a4:	1000021e 	bne	r2,zero,8110a5b0 <vLoadDefaultETHConf+0x550>
8110a5a8:	e43ff903 	ldbu	r16,-28(fp)
8110a5ac:	00000106 	br	8110a5b4 <vLoadDefaultETHConf+0x554>
8110a5b0:	040000c4 	movi	r16,3
8110a5b4:	e0bffd04 	addi	r2,fp,-12
8110a5b8:	1009883a 	mov	r4,r2
8110a5bc:	110e4c00 	call	8110e4c0 <atoi>
8110a5c0:	1007883a 	mov	r3,r2
8110a5c4:	00a045b4 	movhi	r2,33046
8110a5c8:	10833f04 	addi	r2,r2,3324
8110a5cc:	1405883a 	add	r2,r2,r16
8110a5d0:	10800204 	addi	r2,r2,8
8110a5d4:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
8110a5d8:	e0bffd04 	addi	r2,fp,-12
8110a5dc:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
8110a5e0:	e0bff903 	ldbu	r2,-28(fp)
8110a5e4:	10800044 	addi	r2,r2,1
8110a5e8:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
8110a5ec:	e0bff947 	ldb	r2,-27(fp)
8110a5f0:	10800ed8 	cmpnei	r2,r2,59
8110a5f4:	103fce1e 	bne	r2,zero,8110a530 <__reset+0xfb0ea530>

						break;
8110a5f8:	00009506 	br	8110a850 <vLoadDefaultETHConf+0x7f0>
					case 'D':

						ucParser = 0;
8110a5fc:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
8110a600:	e0bffc0f 	ldh	r2,-16(fp)
8110a604:	1009883a 	mov	r4,r2
8110a608:	110cc480 	call	8110cc48 <cGetNextChar>
8110a60c:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
8110a610:	d0e00917 	ldw	r3,-32732(gp)
8110a614:	e0bff947 	ldb	r2,-27(fp)
8110a618:	10800044 	addi	r2,r2,1
8110a61c:	1885883a 	add	r2,r3,r2
8110a620:	10800003 	ldbu	r2,0(r2)
8110a624:	10803fcc 	andi	r2,r2,255
8110a628:	1080010c 	andi	r2,r2,4
8110a62c:	10000626 	beq	r2,zero,8110a648 <vLoadDefaultETHConf+0x5e8>
									(*p_inteiro) = c;
8110a630:	e0bffa17 	ldw	r2,-24(fp)
8110a634:	e0fff943 	ldbu	r3,-27(fp)
8110a638:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
8110a63c:	e0bffa17 	ldw	r2,-24(fp)
8110a640:	10800044 	addi	r2,r2,1
8110a644:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=46) && (c !=59) ); //ASCII: 46 = '.' 59 = ';'
8110a648:	e0bff947 	ldb	r2,-27(fp)
8110a64c:	10800ba0 	cmpeqi	r2,r2,46
8110a650:	1000031e 	bne	r2,zero,8110a660 <vLoadDefaultETHConf+0x600>
8110a654:	e0bff947 	ldb	r2,-27(fp)
8110a658:	10800ed8 	cmpnei	r2,r2,59
8110a65c:	103fe81e 	bne	r2,zero,8110a600 <__reset+0xfb0ea600>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110a660:	e0bffa17 	ldw	r2,-24(fp)
8110a664:	00c00284 	movi	r3,10
8110a668:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucDNS[min_sim(ucParser,3)] = atoi( inteiro );
8110a66c:	e0bff903 	ldbu	r2,-28(fp)
8110a670:	108000e8 	cmpgeui	r2,r2,3
8110a674:	1000021e 	bne	r2,zero,8110a680 <vLoadDefaultETHConf+0x620>
8110a678:	e43ff903 	ldbu	r16,-28(fp)
8110a67c:	00000106 	br	8110a684 <vLoadDefaultETHConf+0x624>
8110a680:	040000c4 	movi	r16,3
8110a684:	e0bffd04 	addi	r2,fp,-12
8110a688:	1009883a 	mov	r4,r2
8110a68c:	110e4c00 	call	8110e4c0 <atoi>
8110a690:	1007883a 	mov	r3,r2
8110a694:	00a045b4 	movhi	r2,33046
8110a698:	10833f04 	addi	r2,r2,3324
8110a69c:	1405883a 	add	r2,r2,r16
8110a6a0:	10800304 	addi	r2,r2,12
8110a6a4:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
8110a6a8:	e0bffd04 	addi	r2,fp,-12
8110a6ac:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
8110a6b0:	e0bff903 	ldbu	r2,-28(fp)
8110a6b4:	10800044 	addi	r2,r2,1
8110a6b8:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
8110a6bc:	e0bff947 	ldb	r2,-27(fp)
8110a6c0:	10800ed8 	cmpnei	r2,r2,59
8110a6c4:	103fce1e 	bne	r2,zero,8110a600 <__reset+0xfb0ea600>

						break;						
8110a6c8:	00006106 	br	8110a850 <vLoadDefaultETHConf+0x7f0>
					case 'P':

						do {
							c = cGetNextChar(siFile);
8110a6cc:	e0bffc0f 	ldh	r2,-16(fp)
8110a6d0:	1009883a 	mov	r4,r2
8110a6d4:	110cc480 	call	8110cc48 <cGetNextChar>
8110a6d8:	e0bff945 	stb	r2,-27(fp)
							if ( isdigit( c ) ) {
8110a6dc:	d0e00917 	ldw	r3,-32732(gp)
8110a6e0:	e0bff947 	ldb	r2,-27(fp)
8110a6e4:	10800044 	addi	r2,r2,1
8110a6e8:	1885883a 	add	r2,r3,r2
8110a6ec:	10800003 	ldbu	r2,0(r2)
8110a6f0:	10803fcc 	andi	r2,r2,255
8110a6f4:	1080010c 	andi	r2,r2,4
8110a6f8:	10000626 	beq	r2,zero,8110a714 <vLoadDefaultETHConf+0x6b4>
								(*p_inteiro) = c;
8110a6fc:	e0bffa17 	ldw	r2,-24(fp)
8110a700:	e0fff943 	ldbu	r3,-27(fp)
8110a704:	10c00005 	stb	r3,0(r2)
								p_inteiro++;
8110a708:	e0bffa17 	ldw	r2,-24(fp)
8110a70c:	10800044 	addi	r2,r2,1
8110a710:	e0bffa15 	stw	r2,-24(fp)
							}
						} while ( c !=59 ); //ASCII: 59 = ';'
8110a714:	e0bff947 	ldb	r2,-27(fp)
8110a718:	10800ed8 	cmpnei	r2,r2,59
8110a71c:	103feb1e 	bne	r2,zero,8110a6cc <__reset+0xfb0ea6cc>
						(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110a720:	e0bffa17 	ldw	r2,-24(fp)
8110a724:	00c00284 	movi	r3,10
8110a728:	10c00005 	stb	r3,0(r2)
						/*Tiago: Proteger com mutex*/
						xConfEth.siPortPUS = atoi( inteiro );
8110a72c:	e0bffd04 	addi	r2,fp,-12
8110a730:	1009883a 	mov	r4,r2
8110a734:	110e4c00 	call	8110e4c0 <atoi>
8110a738:	1007883a 	mov	r3,r2
8110a73c:	00a045b4 	movhi	r2,33046
8110a740:	10833f04 	addi	r2,r2,3324
8110a744:	10c0058d 	sth	r3,22(r2)
						/*Tiago: Proteger com mutex*/
						p_inteiro = inteiro;
8110a748:	e0bffd04 	addi	r2,fp,-12
8110a74c:	e0bffa15 	stw	r2,-24(fp)

						break;
8110a750:	00003f06 	br	8110a850 <vLoadDefaultETHConf+0x7f0>
					case 'H':

						do {
							c = cGetNextChar(siFile);
8110a754:	e0bffc0f 	ldh	r2,-16(fp)
8110a758:	1009883a 	mov	r4,r2
8110a75c:	110cc480 	call	8110cc48 <cGetNextChar>
8110a760:	e0bff945 	stb	r2,-27(fp)
							if ( isdigit( c ) ) {
8110a764:	d0e00917 	ldw	r3,-32732(gp)
8110a768:	e0bff947 	ldb	r2,-27(fp)
8110a76c:	10800044 	addi	r2,r2,1
8110a770:	1885883a 	add	r2,r3,r2
8110a774:	10800003 	ldbu	r2,0(r2)
8110a778:	10803fcc 	andi	r2,r2,255
8110a77c:	1080010c 	andi	r2,r2,4
8110a780:	10000626 	beq	r2,zero,8110a79c <vLoadDefaultETHConf+0x73c>
								(*p_inteiro) = c;
8110a784:	e0bffa17 	ldw	r2,-24(fp)
8110a788:	e0fff943 	ldbu	r3,-27(fp)
8110a78c:	10c00005 	stb	r3,0(r2)
								p_inteiro++;
8110a790:	e0bffa17 	ldw	r2,-24(fp)
8110a794:	10800044 	addi	r2,r2,1
8110a798:	e0bffa15 	stw	r2,-24(fp)
							}
						} while ( c !=59 ); //ASCII: 59 = ';'
8110a79c:	e0bff947 	ldb	r2,-27(fp)
8110a7a0:	10800ed8 	cmpnei	r2,r2,59
8110a7a4:	103feb1e 	bne	r2,zero,8110a754 <__reset+0xfb0ea754>
						(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110a7a8:	e0bffa17 	ldw	r2,-24(fp)
8110a7ac:	00c00284 	movi	r3,10
8110a7b0:	10c00005 	stb	r3,0(r2)
						/*Tiago: Proteger com mutex*/
						sidhcpTemp = atoi( inteiro );
8110a7b4:	e0bffd04 	addi	r2,fp,-12
8110a7b8:	1009883a 	mov	r4,r2
8110a7bc:	110e4c00 	call	8110e4c0 <atoi>
8110a7c0:	e0bffc8d 	sth	r2,-14(fp)
						if (sidhcpTemp == 1)
8110a7c4:	e0bffc8f 	ldh	r2,-14(fp)
8110a7c8:	10800058 	cmpnei	r2,r2,1
8110a7cc:	1000051e 	bne	r2,zero,8110a7e4 <vLoadDefaultETHConf+0x784>
							xConfEth.bDHCP = TRUE;
8110a7d0:	00a045b4 	movhi	r2,33046
8110a7d4:	10833f04 	addi	r2,r2,3324
8110a7d8:	00c00044 	movi	r3,1
8110a7dc:	10c00615 	stw	r3,24(r2)
8110a7e0:	00000306 	br	8110a7f0 <vLoadDefaultETHConf+0x790>
						else
							xConfEth.bDHCP = FALSE;
8110a7e4:	00a045b4 	movhi	r2,33046
8110a7e8:	10833f04 	addi	r2,r2,3324
8110a7ec:	10000615 	stw	zero,24(r2)
						/*Tiago: Proteger com mutex*/
						p_inteiro = inteiro;
8110a7f0:	e0bffd04 	addi	r2,fp,-12
8110a7f4:	e0bffa15 	stw	r2,-24(fp)

						break;
8110a7f8:	00001506 	br	8110a850 <vLoadDefaultETHConf+0x7f0>
					case 0x3C: //"<"
						close = siCloseFile(siFile);
8110a7fc:	e0bffc0f 	ldh	r2,-16(fp)
8110a800:	1009883a 	mov	r4,r2
8110a804:	110cc080 	call	8110cc08 <siCloseFile>
8110a808:	e0bffb15 	stw	r2,-20(fp)
						if (close == FALSE)
8110a80c:	e0bffb17 	ldw	r2,-20(fp)
8110a810:	1000031e 	bne	r2,zero,8110a820 <vLoadDefaultETHConf+0x7c0>
							printf("Problema em fechar o arquivo\n");
8110a814:	01204534 	movhi	r4,33044
8110a818:	21294104 	addi	r4,r4,-23292
8110a81c:	110fa600 	call	8110fa60 <puts>

						/* End of Parser File */
						bEOF = TRUE;
8110a820:	00800044 	movi	r2,1
8110a824:	e0bff815 	stw	r2,-32(fp)
						bSuccess = TRUE; //pensar melhor
8110a828:	00800044 	movi	r2,1
8110a82c:	e0bff715 	stw	r2,-36(fp)
						break;
8110a830:	00000706 	br	8110a850 <vLoadDefaultETHConf+0x7f0>
					default:
						printf("Algum erro ocorreu na leitura do arquivo! c= %i \n", c);
8110a834:	e0bff947 	ldb	r2,-27(fp)
8110a838:	100b883a 	mov	r5,r2
8110a83c:	01204534 	movhi	r4,33044
8110a840:	21294904 	addi	r4,r4,-23260
8110a844:	110f9340 	call	8110f934 <printf>
						break;
8110a848:	00000106 	br	8110a850 <vLoadDefaultETHConf+0x7f0>
						bEOF = TRUE;
						break;
					case 0x20: 	//ASCII: 0x20 = space
					case 10: 	//ASCII: 10 = LN
					case 13: 	//ASCII: 13 = CR
						break;
8110a84c:	0001883a 	nop
						break;
					default:
						printf("Algum erro ocorreu na leitura do arquivo! c= %i \n", c);
						break;
				}
			} while ( bEOF == FALSE );
8110a850:	e0bff817 	ldw	r2,-32(fp)
8110a854:	103e2026 	beq	r2,zero,8110a0d8 <__reset+0xfb0ea0d8>

	if ( (xSdHandle.connected == TRUE) && (bSDcardIsPresent()) && (bSDcardFAT16Check()) ){

		siFile = siOpenFile( ETH_FILE_NAME );

		if ( siFile >= 0 ){
8110a858:	00000706 	br	8110a878 <vLoadDefaultETHConf+0x818>
					default:
						printf("Algum erro ocorreu na leitura do arquivo! c= %i \n", c);
						break;
				}
			} while ( bEOF == FALSE );
		} else printf("N�o achou o arquivo - fopen fail\n");
8110a85c:	01204534 	movhi	r4,33044
8110a860:	21295604 	addi	r4,r4,-23208
8110a864:	110fa600 	call	8110fa60 <puts>

	if ( (xSdHandle.connected == TRUE) && (bSDcardIsPresent()) && (bSDcardFAT16Check()) ){

		siFile = siOpenFile( ETH_FILE_NAME );

		if ( siFile >= 0 ){
8110a868:	00000306 	br	8110a878 <vLoadDefaultETHConf+0x818>
						printf("Algum erro ocorreu na leitura do arquivo! c= %i \n", c);
						break;
				}
			} while ( bEOF == FALSE );
		} else printf("N�o achou o arquivo - fopen fail\n");
	} else printf("Sem SDCard\n");
8110a86c:	01204534 	movhi	r4,33044
8110a870:	21295f04 	addi	r4,r4,-23172
8110a874:	110fa600 	call	8110fa60 <puts>

	/* Load the default configuration if not successful in read the SDCard */
	if ( bSuccess == FALSE ) {
8110a878:	e0bff717 	ldw	r2,-36(fp)
8110a87c:	1000541e 	bne	r2,zero,8110a9d0 <vLoadDefaultETHConf+0x970>
		/*Enviar mensagem que e gravar log que n�o encontrou o arquivo e come�ara a utilizar o padrao*/
		printf("Aten��o: Arquivo de conex�o n�o foi encontrado. Carregando conf padrao\n");
8110a880:	01204534 	movhi	r4,33044
8110a884:	21296204 	addi	r4,r4,-23160
8110a888:	110fa600 	call	8110fa60 <puts>
		printf("N�o encontrou:'%s'.\n", ETH_FILE_NAME);
8110a88c:	01604534 	movhi	r5,33044
8110a890:	29693a04 	addi	r5,r5,-23320
8110a894:	01204534 	movhi	r4,33044
8110a898:	21297604 	addi	r4,r4,-23080
8110a89c:	110f9340 	call	8110f934 <printf>


		xConfEth.siPortPUS = 17000;
8110a8a0:	00a045b4 	movhi	r2,33046
8110a8a4:	10833f04 	addi	r2,r2,3324
8110a8a8:	00d09a04 	movi	r3,17000
8110a8ac:	10c0058d 	sth	r3,22(r2)
		/*ucIP[0].ucIP[1].ucIP[2].ucIP[3]
		 *192.168.0.5*/
		xConfEth.ucIP[0] = 192;
8110a8b0:	00a045b4 	movhi	r2,33046
8110a8b4:	10833f04 	addi	r2,r2,3324
8110a8b8:	00fff004 	movi	r3,-64
8110a8bc:	10c00005 	stb	r3,0(r2)
		xConfEth.ucIP[1] = 168;
8110a8c0:	00a045b4 	movhi	r2,33046
8110a8c4:	10833f04 	addi	r2,r2,3324
8110a8c8:	00ffea04 	movi	r3,-88
8110a8cc:	10c00045 	stb	r3,1(r2)
		xConfEth.ucIP[2] = 0;
8110a8d0:	00a045b4 	movhi	r2,33046
8110a8d4:	10833f04 	addi	r2,r2,3324
8110a8d8:	10000085 	stb	zero,2(r2)
		xConfEth.ucIP[3] = 5;
8110a8dc:	00a045b4 	movhi	r2,33046
8110a8e0:	10833f04 	addi	r2,r2,3324
8110a8e4:	00c00144 	movi	r3,5
8110a8e8:	10c000c5 	stb	r3,3(r2)

		/*ucGTW[0].ucGTW[1].ucGTW[2].ucGTW[3]
		 *192.168.0.1*/
		xConfEth.ucGTW[0] = 192;
8110a8ec:	00a045b4 	movhi	r2,33046
8110a8f0:	10833f04 	addi	r2,r2,3324
8110a8f4:	00fff004 	movi	r3,-64
8110a8f8:	10c00105 	stb	r3,4(r2)
		xConfEth.ucGTW[1] = 168;
8110a8fc:	00a045b4 	movhi	r2,33046
8110a900:	10833f04 	addi	r2,r2,3324
8110a904:	00ffea04 	movi	r3,-88
8110a908:	10c00145 	stb	r3,5(r2)
		xConfEth.ucGTW[2] = 0;
8110a90c:	00a045b4 	movhi	r2,33046
8110a910:	10833f04 	addi	r2,r2,3324
8110a914:	10000185 	stb	zero,6(r2)
		xConfEth.ucGTW[3] = 1;
8110a918:	00a045b4 	movhi	r2,33046
8110a91c:	10833f04 	addi	r2,r2,3324
8110a920:	00c00044 	movi	r3,1
8110a924:	10c001c5 	stb	r3,7(r2)

		/*ucSubNet[0].ucSubNet[1].ucSubNet[2].ucSubNet[3]
		 *192.168.0.5*/
		xConfEth.ucSubNet[0] = 255;
8110a928:	00a045b4 	movhi	r2,33046
8110a92c:	10833f04 	addi	r2,r2,3324
8110a930:	00ffffc4 	movi	r3,-1
8110a934:	10c00205 	stb	r3,8(r2)
		xConfEth.ucSubNet[1] = 255;
8110a938:	00a045b4 	movhi	r2,33046
8110a93c:	10833f04 	addi	r2,r2,3324
8110a940:	00ffffc4 	movi	r3,-1
8110a944:	10c00245 	stb	r3,9(r2)
		xConfEth.ucSubNet[2] = 255;
8110a948:	00a045b4 	movhi	r2,33046
8110a94c:	10833f04 	addi	r2,r2,3324
8110a950:	00ffffc4 	movi	r3,-1
8110a954:	10c00285 	stb	r3,10(r2)
		xConfEth.ucSubNet[3] = 0;
8110a958:	00a045b4 	movhi	r2,33046
8110a95c:	10833f04 	addi	r2,r2,3324
8110a960:	100002c5 	stb	zero,11(r2)


		/*ucMAC[0]:ucMAC[1]:ucMAC[2]:ucMAC[3]:ucMAC[4]:ucMAC[5]
		 *fc:f7:63:4d:1f:42*/
		xConfEth.ucMAC[0] = 0xFC;
8110a964:	00a045b4 	movhi	r2,33046
8110a968:	10833f04 	addi	r2,r2,3324
8110a96c:	00ffff04 	movi	r3,-4
8110a970:	10c00405 	stb	r3,16(r2)
		xConfEth.ucMAC[1] = 0xF7;
8110a974:	00a045b4 	movhi	r2,33046
8110a978:	10833f04 	addi	r2,r2,3324
8110a97c:	00fffdc4 	movi	r3,-9
8110a980:	10c00445 	stb	r3,17(r2)
		xConfEth.ucMAC[2] = 0x63;
8110a984:	00a045b4 	movhi	r2,33046
8110a988:	10833f04 	addi	r2,r2,3324
8110a98c:	00c018c4 	movi	r3,99
8110a990:	10c00485 	stb	r3,18(r2)
		xConfEth.ucMAC[3] = 0x4D;
8110a994:	00a045b4 	movhi	r2,33046
8110a998:	10833f04 	addi	r2,r2,3324
8110a99c:	00c01344 	movi	r3,77
8110a9a0:	10c004c5 	stb	r3,19(r2)
		xConfEth.ucMAC[4] = 0x1F;
8110a9a4:	00a045b4 	movhi	r2,33046
8110a9a8:	10833f04 	addi	r2,r2,3324
8110a9ac:	00c007c4 	movi	r3,31
8110a9b0:	10c00505 	stb	r3,20(r2)
		xConfEth.ucMAC[5] = 0x42;
8110a9b4:	00a045b4 	movhi	r2,33046
8110a9b8:	10833f04 	addi	r2,r2,3324
8110a9bc:	00c01084 	movi	r3,66
8110a9c0:	10c00545 	stb	r3,21(r2)

		xConfEth.bDHCP = FALSE;
8110a9c4:	00a045b4 	movhi	r2,33046
8110a9c8:	10833f04 	addi	r2,r2,3324
8110a9cc:	10000615 	stw	zero,24(r2)

	}

	return bSuccess;
8110a9d0:	e0bff717 	ldw	r2,-36(fp)
}
8110a9d4:	e6ffff04 	addi	sp,fp,-4
8110a9d8:	dfc00217 	ldw	ra,8(sp)
8110a9dc:	df000117 	ldw	fp,4(sp)
8110a9e0:	dc000017 	ldw	r16,0(sp)
8110a9e4:	dec00304 	addi	sp,sp,12
8110a9e8:	f800283a 	ret

8110a9ec <vShowEthConfig>:

#ifdef DEBUG_ON
	void vShowEthConfig( void ) {
8110a9ec:	defff004 	addi	sp,sp,-64
8110a9f0:	de00012e 	bgeu	sp,et,8110a9f8 <vShowEthConfig+0xc>
8110a9f4:	003b68fa 	trap	3
8110a9f8:	dfc00f15 	stw	ra,60(sp)
8110a9fc:	df000e15 	stw	fp,56(sp)
8110aa00:	df000e04 	addi	fp,sp,56
		char buffer[40];

		debug(fp, "Ethernet loaded configuration.\n");
8110aa04:	d0a05a17 	ldw	r2,-32408(gp)
8110aa08:	100f883a 	mov	r7,r2
8110aa0c:	018007c4 	movi	r6,31
8110aa10:	01400044 	movi	r5,1
8110aa14:	01204534 	movhi	r4,33044
8110aa18:	21297c04 	addi	r4,r4,-23056
8110aa1c:	110ec080 	call	8110ec08 <fwrite>

		memset(buffer,0,40);
8110aa20:	01800a04 	movi	r6,40
8110aa24:	000b883a 	mov	r5,zero
8110aa28:	e13ff604 	addi	r4,fp,-40
8110aa2c:	110f76c0 	call	8110f76c <memset>
		sprintf(buffer, "MAC: %x : %x : %x : %x : %x : %x \n", xConfEth.ucMAC[0], xConfEth.ucMAC[1], xConfEth.ucMAC[2], xConfEth.ucMAC[3], xConfEth.ucMAC[4], xConfEth.ucMAC[5]);
8110aa30:	00a045b4 	movhi	r2,33046
8110aa34:	10833f04 	addi	r2,r2,3324
8110aa38:	10800403 	ldbu	r2,16(r2)
8110aa3c:	11803fcc 	andi	r6,r2,255
8110aa40:	00a045b4 	movhi	r2,33046
8110aa44:	10833f04 	addi	r2,r2,3324
8110aa48:	10800443 	ldbu	r2,17(r2)
8110aa4c:	11c03fcc 	andi	r7,r2,255
8110aa50:	00a045b4 	movhi	r2,33046
8110aa54:	10833f04 	addi	r2,r2,3324
8110aa58:	10800483 	ldbu	r2,18(r2)
8110aa5c:	10c03fcc 	andi	r3,r2,255
8110aa60:	00a045b4 	movhi	r2,33046
8110aa64:	10833f04 	addi	r2,r2,3324
8110aa68:	108004c3 	ldbu	r2,19(r2)
8110aa6c:	11003fcc 	andi	r4,r2,255
8110aa70:	00a045b4 	movhi	r2,33046
8110aa74:	10833f04 	addi	r2,r2,3324
8110aa78:	10800503 	ldbu	r2,20(r2)
8110aa7c:	11403fcc 	andi	r5,r2,255
8110aa80:	00a045b4 	movhi	r2,33046
8110aa84:	10833f04 	addi	r2,r2,3324
8110aa88:	10800543 	ldbu	r2,21(r2)
8110aa8c:	10803fcc 	andi	r2,r2,255
8110aa90:	d8800315 	stw	r2,12(sp)
8110aa94:	d9400215 	stw	r5,8(sp)
8110aa98:	d9000115 	stw	r4,4(sp)
8110aa9c:	d8c00015 	stw	r3,0(sp)
8110aaa0:	01604534 	movhi	r5,33044
8110aaa4:	29698404 	addi	r5,r5,-23024
8110aaa8:	e13ff604 	addi	r4,fp,-40
8110aaac:	110fda40 	call	8110fda4 <sprintf>
		debug(fp, buffer );
8110aab0:	d0a05a17 	ldw	r2,-32408(gp)
8110aab4:	e17ff604 	addi	r5,fp,-40
8110aab8:	1009883a 	mov	r4,r2
8110aabc:	110e61c0 	call	8110e61c <fprintf>

		memset(buffer,0,40);
8110aac0:	01800a04 	movi	r6,40
8110aac4:	000b883a 	mov	r5,zero
8110aac8:	e13ff604 	addi	r4,fp,-40
8110aacc:	110f76c0 	call	8110f76c <memset>
		sprintf(buffer, "IP: %i . %i . %i . %i \n",xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3] );
8110aad0:	00a045b4 	movhi	r2,33046
8110aad4:	10833f04 	addi	r2,r2,3324
8110aad8:	10800003 	ldbu	r2,0(r2)
8110aadc:	11003fcc 	andi	r4,r2,255
8110aae0:	00a045b4 	movhi	r2,33046
8110aae4:	10833f04 	addi	r2,r2,3324
8110aae8:	10800043 	ldbu	r2,1(r2)
8110aaec:	11403fcc 	andi	r5,r2,255
8110aaf0:	00a045b4 	movhi	r2,33046
8110aaf4:	10833f04 	addi	r2,r2,3324
8110aaf8:	10800083 	ldbu	r2,2(r2)
8110aafc:	10c03fcc 	andi	r3,r2,255
8110ab00:	00a045b4 	movhi	r2,33046
8110ab04:	10833f04 	addi	r2,r2,3324
8110ab08:	108000c3 	ldbu	r2,3(r2)
8110ab0c:	10803fcc 	andi	r2,r2,255
8110ab10:	d8800115 	stw	r2,4(sp)
8110ab14:	d8c00015 	stw	r3,0(sp)
8110ab18:	280f883a 	mov	r7,r5
8110ab1c:	200d883a 	mov	r6,r4
8110ab20:	01604534 	movhi	r5,33044
8110ab24:	29698d04 	addi	r5,r5,-22988
8110ab28:	e13ff604 	addi	r4,fp,-40
8110ab2c:	110fda40 	call	8110fda4 <sprintf>
		debug(fp, buffer );
8110ab30:	d0a05a17 	ldw	r2,-32408(gp)
8110ab34:	e17ff604 	addi	r5,fp,-40
8110ab38:	1009883a 	mov	r4,r2
8110ab3c:	110e61c0 	call	8110e61c <fprintf>

		memset(buffer,0,40);
8110ab40:	01800a04 	movi	r6,40
8110ab44:	000b883a 	mov	r5,zero
8110ab48:	e13ff604 	addi	r4,fp,-40
8110ab4c:	110f76c0 	call	8110f76c <memset>
		sprintf(buffer, "GTW: %i . %i . %i . %i \n",xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3] );
8110ab50:	00a045b4 	movhi	r2,33046
8110ab54:	10833f04 	addi	r2,r2,3324
8110ab58:	10800103 	ldbu	r2,4(r2)
8110ab5c:	11003fcc 	andi	r4,r2,255
8110ab60:	00a045b4 	movhi	r2,33046
8110ab64:	10833f04 	addi	r2,r2,3324
8110ab68:	10800143 	ldbu	r2,5(r2)
8110ab6c:	11403fcc 	andi	r5,r2,255
8110ab70:	00a045b4 	movhi	r2,33046
8110ab74:	10833f04 	addi	r2,r2,3324
8110ab78:	10800183 	ldbu	r2,6(r2)
8110ab7c:	10c03fcc 	andi	r3,r2,255
8110ab80:	00a045b4 	movhi	r2,33046
8110ab84:	10833f04 	addi	r2,r2,3324
8110ab88:	108001c3 	ldbu	r2,7(r2)
8110ab8c:	10803fcc 	andi	r2,r2,255
8110ab90:	d8800115 	stw	r2,4(sp)
8110ab94:	d8c00015 	stw	r3,0(sp)
8110ab98:	280f883a 	mov	r7,r5
8110ab9c:	200d883a 	mov	r6,r4
8110aba0:	01604534 	movhi	r5,33044
8110aba4:	29699304 	addi	r5,r5,-22964
8110aba8:	e13ff604 	addi	r4,fp,-40
8110abac:	110fda40 	call	8110fda4 <sprintf>
		debug(fp, buffer );
8110abb0:	d0a05a17 	ldw	r2,-32408(gp)
8110abb4:	e17ff604 	addi	r5,fp,-40
8110abb8:	1009883a 	mov	r4,r2
8110abbc:	110e61c0 	call	8110e61c <fprintf>

		memset(buffer,0,40);
8110abc0:	01800a04 	movi	r6,40
8110abc4:	000b883a 	mov	r5,zero
8110abc8:	e13ff604 	addi	r4,fp,-40
8110abcc:	110f76c0 	call	8110f76c <memset>
		sprintf(buffer, "Sub: %i . %i . %i . %i \n",xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3] );
8110abd0:	00a045b4 	movhi	r2,33046
8110abd4:	10833f04 	addi	r2,r2,3324
8110abd8:	10800203 	ldbu	r2,8(r2)
8110abdc:	11003fcc 	andi	r4,r2,255
8110abe0:	00a045b4 	movhi	r2,33046
8110abe4:	10833f04 	addi	r2,r2,3324
8110abe8:	10800243 	ldbu	r2,9(r2)
8110abec:	11403fcc 	andi	r5,r2,255
8110abf0:	00a045b4 	movhi	r2,33046
8110abf4:	10833f04 	addi	r2,r2,3324
8110abf8:	10800283 	ldbu	r2,10(r2)
8110abfc:	10c03fcc 	andi	r3,r2,255
8110ac00:	00a045b4 	movhi	r2,33046
8110ac04:	10833f04 	addi	r2,r2,3324
8110ac08:	108002c3 	ldbu	r2,11(r2)
8110ac0c:	10803fcc 	andi	r2,r2,255
8110ac10:	d8800115 	stw	r2,4(sp)
8110ac14:	d8c00015 	stw	r3,0(sp)
8110ac18:	280f883a 	mov	r7,r5
8110ac1c:	200d883a 	mov	r6,r4
8110ac20:	01604534 	movhi	r5,33044
8110ac24:	29699a04 	addi	r5,r5,-22936
8110ac28:	e13ff604 	addi	r4,fp,-40
8110ac2c:	110fda40 	call	8110fda4 <sprintf>
		debug(fp, buffer );
8110ac30:	d0a05a17 	ldw	r2,-32408(gp)
8110ac34:	e17ff604 	addi	r5,fp,-40
8110ac38:	1009883a 	mov	r4,r2
8110ac3c:	110e61c0 	call	8110e61c <fprintf>

		memset(buffer,0,40);
8110ac40:	01800a04 	movi	r6,40
8110ac44:	000b883a 	mov	r5,zero
8110ac48:	e13ff604 	addi	r4,fp,-40
8110ac4c:	110f76c0 	call	8110f76c <memset>
		sprintf(buffer, "DNS: %i . %i . %i . %i \n",xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3] );
8110ac50:	00a045b4 	movhi	r2,33046
8110ac54:	10833f04 	addi	r2,r2,3324
8110ac58:	10800303 	ldbu	r2,12(r2)
8110ac5c:	11003fcc 	andi	r4,r2,255
8110ac60:	00a045b4 	movhi	r2,33046
8110ac64:	10833f04 	addi	r2,r2,3324
8110ac68:	10800343 	ldbu	r2,13(r2)
8110ac6c:	11403fcc 	andi	r5,r2,255
8110ac70:	00a045b4 	movhi	r2,33046
8110ac74:	10833f04 	addi	r2,r2,3324
8110ac78:	10800383 	ldbu	r2,14(r2)
8110ac7c:	10c03fcc 	andi	r3,r2,255
8110ac80:	00a045b4 	movhi	r2,33046
8110ac84:	10833f04 	addi	r2,r2,3324
8110ac88:	108003c3 	ldbu	r2,15(r2)
8110ac8c:	10803fcc 	andi	r2,r2,255
8110ac90:	d8800115 	stw	r2,4(sp)
8110ac94:	d8c00015 	stw	r3,0(sp)
8110ac98:	280f883a 	mov	r7,r5
8110ac9c:	200d883a 	mov	r6,r4
8110aca0:	01604534 	movhi	r5,33044
8110aca4:	2969a104 	addi	r5,r5,-22908
8110aca8:	e13ff604 	addi	r4,fp,-40
8110acac:	110fda40 	call	8110fda4 <sprintf>
		debug(fp, buffer );
8110acb0:	d0a05a17 	ldw	r2,-32408(gp)
8110acb4:	e17ff604 	addi	r5,fp,-40
8110acb8:	1009883a 	mov	r4,r2
8110acbc:	110e61c0 	call	8110e61c <fprintf>

		memset(buffer,0,40);
8110acc0:	01800a04 	movi	r6,40
8110acc4:	000b883a 	mov	r5,zero
8110acc8:	e13ff604 	addi	r4,fp,-40
8110accc:	110f76c0 	call	8110f76c <memset>
		sprintf(buffer, "Porta PUS: %i\n", xConfEth.siPortPUS );
8110acd0:	00a045b4 	movhi	r2,33046
8110acd4:	10833f04 	addi	r2,r2,3324
8110acd8:	1080058b 	ldhu	r2,22(r2)
8110acdc:	10bfffcc 	andi	r2,r2,65535
8110ace0:	100d883a 	mov	r6,r2
8110ace4:	01604534 	movhi	r5,33044
8110ace8:	2969a804 	addi	r5,r5,-22880
8110acec:	e13ff604 	addi	r4,fp,-40
8110acf0:	110fda40 	call	8110fda4 <sprintf>
		debug(fp, buffer );
8110acf4:	d0a05a17 	ldw	r2,-32408(gp)
8110acf8:	e17ff604 	addi	r5,fp,-40
8110acfc:	1009883a 	mov	r4,r2
8110ad00:	110e61c0 	call	8110e61c <fprintf>

	}
8110ad04:	0001883a 	nop
8110ad08:	e037883a 	mov	sp,fp
8110ad0c:	dfc00117 	ldw	ra,4(sp)
8110ad10:	df000017 	ldw	fp,0(sp)
8110ad14:	dec00204 	addi	sp,sp,8
8110ad18:	f800283a 	ret

8110ad1c <ucCrc8>:

#include "crc8.h"


unsigned char ucCrc8(unsigned crc, unsigned char const *data, size_t len)
{
8110ad1c:	defffb04 	addi	sp,sp,-20
8110ad20:	de00012e 	bgeu	sp,et,8110ad28 <ucCrc8+0xc>
8110ad24:	003b68fa 	trap	3
8110ad28:	df000415 	stw	fp,16(sp)
8110ad2c:	df000404 	addi	fp,sp,16
8110ad30:	e13ffd15 	stw	r4,-12(fp)
8110ad34:	e17ffe15 	stw	r5,-8(fp)
8110ad38:	e1bfff15 	stw	r6,-4(fp)
    if (data == NULL)
8110ad3c:	e0bffe17 	ldw	r2,-8(fp)
8110ad40:	1000021e 	bne	r2,zero,8110ad4c <ucCrc8+0x30>
        return 0;
8110ad44:	0005883a 	mov	r2,zero
8110ad48:	00001906 	br	8110adb0 <ucCrc8+0x94>
    crc &= 0xff;
8110ad4c:	e0bffd17 	ldw	r2,-12(fp)
8110ad50:	10803fcc 	andi	r2,r2,255
8110ad54:	e0bffd15 	stw	r2,-12(fp)
    unsigned char const *end = data + len;
8110ad58:	e0fffe17 	ldw	r3,-8(fp)
8110ad5c:	e0bfff17 	ldw	r2,-4(fp)
8110ad60:	1885883a 	add	r2,r3,r2
8110ad64:	e0bffc15 	stw	r2,-16(fp)
    while (data < end)
8110ad68:	00000d06 	br	8110ada0 <ucCrc8+0x84>
        crc = crc8_table[crc ^ *data++];
8110ad6c:	e0bffe17 	ldw	r2,-8(fp)
8110ad70:	10c00044 	addi	r3,r2,1
8110ad74:	e0fffe15 	stw	r3,-8(fp)
8110ad78:	10800003 	ldbu	r2,0(r2)
8110ad7c:	10c03fcc 	andi	r3,r2,255
8110ad80:	e0bffd17 	ldw	r2,-12(fp)
8110ad84:	1886f03a 	xor	r3,r3,r2
8110ad88:	00a04534 	movhi	r2,33044
8110ad8c:	10a9abc4 	addi	r2,r2,-22865
8110ad90:	10c5883a 	add	r2,r2,r3
8110ad94:	10800003 	ldbu	r2,0(r2)
8110ad98:	10803fcc 	andi	r2,r2,255
8110ad9c:	e0bffd15 	stw	r2,-12(fp)
{
    if (data == NULL)
        return 0;
    crc &= 0xff;
    unsigned char const *end = data + len;
    while (data < end)
8110ada0:	e0fffe17 	ldw	r3,-8(fp)
8110ada4:	e0bffc17 	ldw	r2,-16(fp)
8110ada8:	18bff036 	bltu	r3,r2,8110ad6c <__reset+0xfb0ead6c>
        crc = crc8_table[crc ^ *data++];
    return crc;
8110adac:	e0bffd17 	ldw	r2,-12(fp)
}
8110adb0:	e037883a 	mov	sp,fp
8110adb4:	df000017 	ldw	fp,0(sp)
8110adb8:	dec00104 	addi	sp,sp,4
8110adbc:	f800283a 	ret

8110adc0 <ucCrc8wInit>:

unsigned char ucCrc8wInit(char const *data, size_t len)
{
8110adc0:	defffb04 	addi	sp,sp,-20
8110adc4:	de00012e 	bgeu	sp,et,8110adcc <ucCrc8wInit+0xc>
8110adc8:	003b68fa 	trap	3
8110adcc:	dfc00415 	stw	ra,16(sp)
8110add0:	df000315 	stw	fp,12(sp)
8110add4:	df000304 	addi	fp,sp,12
8110add8:	e13ffe15 	stw	r4,-8(fp)
8110addc:	e17fff15 	stw	r5,-4(fp)
	unsigned char crc;
	crc = ucCrc8(0, NULL, 0);
8110ade0:	000d883a 	mov	r6,zero
8110ade4:	000b883a 	mov	r5,zero
8110ade8:	0009883a 	mov	r4,zero
8110adec:	110ad1c0 	call	8110ad1c <ucCrc8>
8110adf0:	e0bffd05 	stb	r2,-12(fp)
	return ucCrc8(crc, (unsigned char const *)data, len);
8110adf4:	e0bffd03 	ldbu	r2,-12(fp)
8110adf8:	e1bfff17 	ldw	r6,-4(fp)
8110adfc:	e17ffe17 	ldw	r5,-8(fp)
8110ae00:	1009883a 	mov	r4,r2
8110ae04:	110ad1c0 	call	8110ad1c <ucCrc8>
}
8110ae08:	e037883a 	mov	sp,fp
8110ae0c:	dfc00117 	ldw	ra,4(sp)
8110ae10:	df000017 	ldw	fp,0(sp)
8110ae14:	dec00204 	addi	sp,sp,8
8110ae18:	f800283a 	ret

8110ae1c <printErrorTask>:

#include "error_handler_simucam.h"


#ifdef DEBUG_ON
    void printErrorTask( INT8U error_code ) {
8110ae1c:	defff904 	addi	sp,sp,-28
8110ae20:	de00012e 	bgeu	sp,et,8110ae28 <printErrorTask+0xc>
8110ae24:	003b68fa 	trap	3
8110ae28:	dfc00615 	stw	ra,24(sp)
8110ae2c:	df000515 	stw	fp,20(sp)
8110ae30:	df000504 	addi	fp,sp,20
8110ae34:	2005883a 	mov	r2,r4
8110ae38:	e0bfff05 	stb	r2,-4(fp)
		char buffer[16] = "";
8110ae3c:	e03ffb15 	stw	zero,-20(fp)
8110ae40:	e03ffc15 	stw	zero,-16(fp)
8110ae44:	e03ffd15 	stw	zero,-12(fp)
8110ae48:	e03ffe15 	stw	zero,-8(fp)
		
		sprintf(buffer, "Err: %d\n", error_code);
8110ae4c:	e0bfff03 	ldbu	r2,-4(fp)
8110ae50:	100d883a 	mov	r6,r2
8110ae54:	01604534 	movhi	r5,33044
8110ae58:	2969ec04 	addi	r5,r5,-22608
8110ae5c:	e13ffb04 	addi	r4,fp,-20
8110ae60:	110fda40 	call	8110fda4 <sprintf>
		debug(fp, buffer);
8110ae64:	d0a05a17 	ldw	r2,-32408(gp)
8110ae68:	e17ffb04 	addi	r5,fp,-20
8110ae6c:	1009883a 	mov	r4,r2
8110ae70:	110e61c0 	call	8110e61c <fprintf>
	}
8110ae74:	0001883a 	nop
8110ae78:	e037883a 	mov	sp,fp
8110ae7c:	dfc00117 	ldw	ra,4(sp)
8110ae80:	df000017 	ldw	fp,0(sp)
8110ae84:	dec00204 	addi	sp,sp,8
8110ae88:	f800283a 	ret

8110ae8c <vFailCreateMutexSResources>:
#endif

void vFailCreateMutexSResources( INT8U error_code )
{
8110ae8c:	defffd04 	addi	sp,sp,-12
8110ae90:	de00012e 	bgeu	sp,et,8110ae98 <vFailCreateMutexSResources+0xc>
8110ae94:	003b68fa 	trap	3
8110ae98:	dfc00215 	stw	ra,8(sp)
8110ae9c:	df000115 	stw	fp,4(sp)
8110aea0:	df000104 	addi	fp,sp,4
8110aea4:	2005883a 	mov	r2,r4
8110aea8:	e0bfff05 	stb	r2,-4(fp)
	#ifdef DEBUG_ON
		debug(fp,"vFailCreateMutexSResources. (exit)");
8110aeac:	d0a05a17 	ldw	r2,-32408(gp)
8110aeb0:	100f883a 	mov	r7,r2
8110aeb4:	01800884 	movi	r6,34
8110aeb8:	01400044 	movi	r5,1
8110aebc:	01204534 	movhi	r4,33044
8110aec0:	2129ef04 	addi	r4,r4,-22596
8110aec4:	110ec080 	call	8110ec08 <fwrite>
	#endif
	#ifdef DEBUG_ON
		printErrorTask(error_code);
8110aec8:	e0bfff03 	ldbu	r2,-4(fp)
8110aecc:	1009883a 	mov	r4,r2
8110aed0:	110ae1c0 	call	8110ae1c <printErrorTask>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110aed4:	0001883a 	nop
8110aed8:	e037883a 	mov	sp,fp
8110aedc:	dfc00117 	ldw	ra,4(sp)
8110aee0:	df000017 	ldw	fp,0(sp)
8110aee4:	dec00204 	addi	sp,sp,8
8110aee8:	f800283a 	ret

8110aeec <vFailCreateSemaphoreResources>:

void vFailCreateSemaphoreResources( void )
{
8110aeec:	defffe04 	addi	sp,sp,-8
8110aef0:	de00012e 	bgeu	sp,et,8110aef8 <vFailCreateSemaphoreResources+0xc>
8110aef4:	003b68fa 	trap	3
8110aef8:	dfc00115 	stw	ra,4(sp)
8110aefc:	df000015 	stw	fp,0(sp)
8110af00:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailCreateSemaphoreResources. (exit)");
8110af04:	d0a05a17 	ldw	r2,-32408(gp)
8110af08:	100f883a 	mov	r7,r2
8110af0c:	01800944 	movi	r6,37
8110af10:	01400044 	movi	r5,1
8110af14:	01204534 	movhi	r4,33044
8110af18:	2129f804 	addi	r4,r4,-22560
8110af1c:	110ec080 	call	8110ec08 <fwrite>

	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110af20:	0001883a 	nop
8110af24:	e037883a 	mov	sp,fp
8110af28:	dfc00117 	ldw	ra,4(sp)
8110af2c:	df000017 	ldw	fp,0(sp)
8110af30:	dec00204 	addi	sp,sp,8
8110af34:	f800283a 	ret

8110af38 <vFailTestCriticasParts>:


void vFailTestCriticasParts( void )
{
8110af38:	defffe04 	addi	sp,sp,-8
8110af3c:	de00012e 	bgeu	sp,et,8110af44 <vFailTestCriticasParts+0xc>
8110af40:	003b68fa 	trap	3
8110af44:	dfc00115 	stw	ra,4(sp)
8110af48:	df000015 	stw	fp,0(sp)
8110af4c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailTestCriticasParts. (exit)");
8110af50:	d0a05a17 	ldw	r2,-32408(gp)
8110af54:	100f883a 	mov	r7,r2
8110af58:	01800784 	movi	r6,30
8110af5c:	01400044 	movi	r5,1
8110af60:	01204534 	movhi	r4,33044
8110af64:	212a0204 	addi	r4,r4,-22520
8110af68:	110ec080 	call	8110ec08 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110af6c:	0001883a 	nop
8110af70:	e037883a 	mov	sp,fp
8110af74:	dfc00117 	ldw	ra,4(sp)
8110af78:	df000017 	ldw	fp,0(sp)
8110af7c:	dec00204 	addi	sp,sp,8
8110af80:	f800283a 	ret

8110af84 <vFailSendxSemCommInit>:


void vFailSendxSemCommInit( void )
{
8110af84:	defffe04 	addi	sp,sp,-8
8110af88:	de00012e 	bgeu	sp,et,8110af90 <vFailSendxSemCommInit+0xc>
8110af8c:	003b68fa 	trap	3
8110af90:	dfc00115 	stw	ra,4(sp)
8110af94:	df000015 	stw	fp,0(sp)
8110af98:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSendxSemCommInit. (exit)");
8110af9c:	d0a05a17 	ldw	r2,-32408(gp)
8110afa0:	100f883a 	mov	r7,r2
8110afa4:	01800744 	movi	r6,29
8110afa8:	01400044 	movi	r5,1
8110afac:	01204534 	movhi	r4,33044
8110afb0:	212a0a04 	addi	r4,r4,-22488
8110afb4:	110ec080 	call	8110ec08 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the vParserRXTask. (exit)");
8110afb8:	d0a05a17 	ldw	r2,-32408(gp)
8110afbc:	100f883a 	mov	r7,r2
8110afc0:	01800a04 	movi	r6,40
8110afc4:	01400044 	movi	r5,1
8110afc8:	01204534 	movhi	r4,33044
8110afcc:	212a1204 	addi	r4,r4,-22456
8110afd0:	110ec080 	call	8110ec08 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110afd4:	0001883a 	nop
8110afd8:	e037883a 	mov	sp,fp
8110afdc:	dfc00117 	ldw	ra,4(sp)
8110afe0:	df000017 	ldw	fp,0(sp)
8110afe4:	dec00204 	addi	sp,sp,8
8110afe8:	f800283a 	ret

8110afec <vFailSendPreParsedSemaphore>:

void vFailSendPreParsedSemaphore( void )
{
8110afec:	defffe04 	addi	sp,sp,-8
8110aff0:	de00012e 	bgeu	sp,et,8110aff8 <vFailSendPreParsedSemaphore+0xc>
8110aff4:	003b68fa 	trap	3
8110aff8:	dfc00115 	stw	ra,4(sp)
8110affc:	df000015 	stw	fp,0(sp)
8110b000:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSendPreParsedSemaphore. (exit)");
8110b004:	d0a05a17 	ldw	r2,-32408(gp)
8110b008:	100f883a 	mov	r7,r2
8110b00c:	018008c4 	movi	r6,35
8110b010:	01400044 	movi	r5,1
8110b014:	01204534 	movhi	r4,33044
8110b018:	212a1d04 	addi	r4,r4,-22412
8110b01c:	110ec080 	call	8110ec08 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110b020:	0001883a 	nop
8110b024:	e037883a 	mov	sp,fp
8110b028:	dfc00117 	ldw	ra,4(sp)
8110b02c:	df000017 	ldw	fp,0(sp)
8110b030:	dec00204 	addi	sp,sp,8
8110b034:	f800283a 	ret

8110b038 <vFailSendPreAckReceiverSemaphore>:

void vFailSendPreAckReceiverSemaphore( void )
{
8110b038:	defffe04 	addi	sp,sp,-8
8110b03c:	de00012e 	bgeu	sp,et,8110b044 <vFailSendPreAckReceiverSemaphore+0xc>
8110b040:	003b68fa 	trap	3
8110b044:	dfc00115 	stw	ra,4(sp)
8110b048:	df000015 	stw	fp,0(sp)
8110b04c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSendPreAckReceiverSemaphore. (exit)");
8110b050:	d0a05a17 	ldw	r2,-32408(gp)
8110b054:	100f883a 	mov	r7,r2
8110b058:	01800a04 	movi	r6,40
8110b05c:	01400044 	movi	r5,1
8110b060:	01204534 	movhi	r4,33044
8110b064:	212a2604 	addi	r4,r4,-22376
8110b068:	110ec080 	call	8110ec08 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110b06c:	0001883a 	nop
8110b070:	e037883a 	mov	sp,fp
8110b074:	dfc00117 	ldw	ra,4(sp)
8110b078:	df000017 	ldw	fp,0(sp)
8110b07c:	dec00204 	addi	sp,sp,8
8110b080:	f800283a 	ret

8110b084 <vFailSendPreAckSenderSemaphore>:


void vFailSendPreAckSenderSemaphore( void )
{
8110b084:	defffe04 	addi	sp,sp,-8
8110b088:	de00012e 	bgeu	sp,et,8110b090 <vFailSendPreAckSenderSemaphore+0xc>
8110b08c:	003b68fa 	trap	3
8110b090:	dfc00115 	stw	ra,4(sp)
8110b094:	df000015 	stw	fp,0(sp)
8110b098:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSendPreAckSenderSemaphore. (exit)");
8110b09c:	d0a05a17 	ldw	r2,-32408(gp)
8110b0a0:	100f883a 	mov	r7,r2
8110b0a4:	01800984 	movi	r6,38
8110b0a8:	01400044 	movi	r5,1
8110b0ac:	01204534 	movhi	r4,33044
8110b0b0:	212a3104 	addi	r4,r4,-22332
8110b0b4:	110ec080 	call	8110ec08 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110b0b8:	0001883a 	nop
8110b0bc:	e037883a 	mov	sp,fp
8110b0c0:	dfc00117 	ldw	ra,4(sp)
8110b0c4:	df000017 	ldw	fp,0(sp)
8110b0c8:	dec00204 	addi	sp,sp,8
8110b0cc:	f800283a 	ret

8110b0d0 <vFailGetCountSemaphoreSenderTask>:


void vFailGetCountSemaphoreSenderTask( void )
{
8110b0d0:	defffe04 	addi	sp,sp,-8
8110b0d4:	de00012e 	bgeu	sp,et,8110b0dc <vFailGetCountSemaphoreSenderTask+0xc>
8110b0d8:	003b68fa 	trap	3
8110b0dc:	dfc00115 	stw	ra,4(sp)
8110b0e0:	df000015 	stw	fp,0(sp)
8110b0e4:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetCountSemaphoreSenderTask. (exit)");
8110b0e8:	d0a05a17 	ldw	r2,-32408(gp)
8110b0ec:	100f883a 	mov	r7,r2
8110b0f0:	01800a04 	movi	r6,40
8110b0f4:	01400044 	movi	r5,1
8110b0f8:	01204534 	movhi	r4,33044
8110b0fc:	212a3b04 	addi	r4,r4,-22292
8110b100:	110ec080 	call	8110ec08 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get the semaphore and some error happens.(vSenderAckTask)\n");
8110b104:	d0a05a17 	ldw	r2,-32408(gp)
8110b108:	100f883a 	mov	r7,r2
8110b10c:	01801104 	movi	r6,68
8110b110:	01400044 	movi	r5,1
8110b114:	01204534 	movhi	r4,33044
8110b118:	212a4604 	addi	r4,r4,-22248
8110b11c:	110ec080 	call	8110ec08 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110b120:	0001883a 	nop
8110b124:	e037883a 	mov	sp,fp
8110b128:	dfc00117 	ldw	ra,4(sp)
8110b12c:	df000017 	ldw	fp,0(sp)
8110b130:	dec00204 	addi	sp,sp,8
8110b134:	f800283a 	ret

8110b138 <vFailGetMutexSenderTask>:

void vFailGetMutexSenderTask( void )
{
8110b138:	defffe04 	addi	sp,sp,-8
8110b13c:	de00012e 	bgeu	sp,et,8110b144 <vFailGetMutexSenderTask+0xc>
8110b140:	003b68fa 	trap	3
8110b144:	dfc00115 	stw	ra,4(sp)
8110b148:	df000015 	stw	fp,0(sp)
8110b14c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetMutexSenderTask. (exit)");
8110b150:	d0a05a17 	ldw	r2,-32408(gp)
8110b154:	100f883a 	mov	r7,r2
8110b158:	018007c4 	movi	r6,31
8110b15c:	01400044 	movi	r5,1
8110b160:	01204534 	movhi	r4,33044
8110b164:	212a5804 	addi	r4,r4,-22176
8110b168:	110ec080 	call	8110ec08 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get mutex that protects the xSenderACK.(vSenderAckTask)\n");
8110b16c:	d0a05a17 	ldw	r2,-32408(gp)
8110b170:	100f883a 	mov	r7,r2
8110b174:	01801084 	movi	r6,66
8110b178:	01400044 	movi	r5,1
8110b17c:	01204534 	movhi	r4,33044
8110b180:	212a6004 	addi	r4,r4,-22144
8110b184:	110ec080 	call	8110ec08 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110b188:	0001883a 	nop
8110b18c:	e037883a 	mov	sp,fp
8110b190:	dfc00117 	ldw	ra,4(sp)
8110b194:	df000017 	ldw	fp,0(sp)
8110b198:	dec00204 	addi	sp,sp,8
8110b19c:	f800283a 	ret

8110b1a0 <vFailGetCountSemaphoreReceiverTask>:


void vFailGetCountSemaphoreReceiverTask( void )
{
8110b1a0:	defffe04 	addi	sp,sp,-8
8110b1a4:	de00012e 	bgeu	sp,et,8110b1ac <vFailGetCountSemaphoreReceiverTask+0xc>
8110b1a8:	003b68fa 	trap	3
8110b1ac:	dfc00115 	stw	ra,4(sp)
8110b1b0:	df000015 	stw	fp,0(sp)
8110b1b4:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetCountSemaphoreReceiverTask. (exit)");
8110b1b8:	d0a05a17 	ldw	r2,-32408(gp)
8110b1bc:	100f883a 	mov	r7,r2
8110b1c0:	01800a84 	movi	r6,42
8110b1c4:	01400044 	movi	r5,1
8110b1c8:	01204534 	movhi	r4,33044
8110b1cc:	212a7104 	addi	r4,r4,-22076
8110b1d0:	110ec080 	call	8110ec08 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get the semaphore and some error happens.(vReceiverAckTask)\n");
8110b1d4:	d0a05a17 	ldw	r2,-32408(gp)
8110b1d8:	100f883a 	mov	r7,r2
8110b1dc:	01801184 	movi	r6,70
8110b1e0:	01400044 	movi	r5,1
8110b1e4:	01204534 	movhi	r4,33044
8110b1e8:	212a7c04 	addi	r4,r4,-22032
8110b1ec:	110ec080 	call	8110ec08 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110b1f0:	0001883a 	nop
8110b1f4:	e037883a 	mov	sp,fp
8110b1f8:	dfc00117 	ldw	ra,4(sp)
8110b1fc:	df000017 	ldw	fp,0(sp)
8110b200:	dec00204 	addi	sp,sp,8
8110b204:	f800283a 	ret

8110b208 <vFailGetMutexReceiverTask>:

void vFailGetMutexReceiverTask( void )
{
8110b208:	defffe04 	addi	sp,sp,-8
8110b20c:	de00012e 	bgeu	sp,et,8110b214 <vFailGetMutexReceiverTask+0xc>
8110b210:	003b68fa 	trap	3
8110b214:	dfc00115 	stw	ra,4(sp)
8110b218:	df000015 	stw	fp,0(sp)
8110b21c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetMutexReceiverTask. (exit)");
8110b220:	d0a05a17 	ldw	r2,-32408(gp)
8110b224:	100f883a 	mov	r7,r2
8110b228:	01800844 	movi	r6,33
8110b22c:	01400044 	movi	r5,1
8110b230:	01204534 	movhi	r4,33044
8110b234:	212a8e04 	addi	r4,r4,-21960
8110b238:	110ec080 	call	8110ec08 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get mutex that protects the xSenderACK.(vReceiverAckTask)\n");
8110b23c:	d0a05a17 	ldw	r2,-32408(gp)
8110b240:	100f883a 	mov	r7,r2
8110b244:	01801104 	movi	r6,68
8110b248:	01400044 	movi	r5,1
8110b24c:	01204534 	movhi	r4,33044
8110b250:	212a9704 	addi	r4,r4,-21924
8110b254:	110ec080 	call	8110ec08 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110b258:	0001883a 	nop
8110b25c:	e037883a 	mov	sp,fp
8110b260:	dfc00117 	ldw	ra,4(sp)
8110b264:	df000017 	ldw	fp,0(sp)
8110b268:	dec00204 	addi	sp,sp,8
8110b26c:	f800283a 	ret

8110b270 <vFailGetMutexTxUARTSenderTask>:


void vFailGetMutexTxUARTSenderTask( void )
{
8110b270:	defffe04 	addi	sp,sp,-8
8110b274:	de00012e 	bgeu	sp,et,8110b27c <vFailGetMutexTxUARTSenderTask+0xc>
8110b278:	003b68fa 	trap	3
8110b27c:	dfc00115 	stw	ra,4(sp)
8110b280:	df000015 	stw	fp,0(sp)
8110b284:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetMutexTxUARTSenderTask. (exit)");
8110b288:	d0a05a17 	ldw	r2,-32408(gp)
8110b28c:	100f883a 	mov	r7,r2
8110b290:	01800944 	movi	r6,37
8110b294:	01400044 	movi	r5,1
8110b298:	01204534 	movhi	r4,33044
8110b29c:	212aa904 	addi	r4,r4,-21852
8110b2a0:	110ec080 	call	8110ec08 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get mutex that protects the tx buffer.(vSenderAckTask)\n");
8110b2a4:	d0a05a17 	ldw	r2,-32408(gp)
8110b2a8:	100f883a 	mov	r7,r2
8110b2ac:	01801044 	movi	r6,65
8110b2b0:	01400044 	movi	r5,1
8110b2b4:	01204534 	movhi	r4,33044
8110b2b8:	212ab304 	addi	r4,r4,-21812
8110b2bc:	110ec080 	call	8110ec08 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110b2c0:	0001883a 	nop
8110b2c4:	e037883a 	mov	sp,fp
8110b2c8:	dfc00117 	ldw	ra,4(sp)
8110b2cc:	df000017 	ldw	fp,0(sp)
8110b2d0:	dec00204 	addi	sp,sp,8
8110b2d4:	f800283a 	ret

8110b2d8 <vFailGetMacRTC>:


void vFailGetMacRTC( void )
{
8110b2d8:	defffe04 	addi	sp,sp,-8
8110b2dc:	de00012e 	bgeu	sp,et,8110b2e4 <vFailGetMacRTC+0xc>
8110b2e0:	003b68fa 	trap	3
8110b2e4:	dfc00115 	stw	ra,4(sp)
8110b2e8:	df000015 	stw	fp,0(sp)
8110b2ec:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetMacRTC");
8110b2f0:	d0a05a17 	ldw	r2,-32408(gp)
8110b2f4:	100f883a 	mov	r7,r2
8110b2f8:	01800384 	movi	r6,14
8110b2fc:	01400044 	movi	r5,1
8110b300:	01204534 	movhi	r4,33044
8110b304:	212ac404 	addi	r4,r4,-21744
8110b308:	110ec080 	call	8110ec08 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110b30c:	0001883a 	nop
8110b310:	e037883a 	mov	sp,fp
8110b314:	dfc00117 	ldw	ra,4(sp)
8110b318:	df000017 	ldw	fp,0(sp)
8110b31c:	dec00204 	addi	sp,sp,8
8110b320:	f800283a 	ret

8110b324 <vFailInitialization>:


void vFailInitialization( void )
{
8110b324:	defffe04 	addi	sp,sp,-8
8110b328:	de00012e 	bgeu	sp,et,8110b330 <vFailInitialization+0xc>
8110b32c:	003b68fa 	trap	3
8110b330:	dfc00115 	stw	ra,4(sp)
8110b334:	df000015 	stw	fp,0(sp)
8110b338:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailInitialization");
8110b33c:	d0a05a17 	ldw	r2,-32408(gp)
8110b340:	100f883a 	mov	r7,r2
8110b344:	018004c4 	movi	r6,19
8110b348:	01400044 	movi	r5,1
8110b34c:	01204534 	movhi	r4,33044
8110b350:	212ac804 	addi	r4,r4,-21728
8110b354:	110ec080 	call	8110ec08 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110b358:	0001883a 	nop
8110b35c:	e037883a 	mov	sp,fp
8110b360:	dfc00117 	ldw	ra,4(sp)
8110b364:	df000017 	ldw	fp,0(sp)
8110b368:	dec00204 	addi	sp,sp,8
8110b36c:	f800283a 	ret

8110b370 <vFailReceiverCreate>:


void vFailReceiverCreate( void )
{
8110b370:	defffe04 	addi	sp,sp,-8
8110b374:	de00012e 	bgeu	sp,et,8110b37c <vFailReceiverCreate+0xc>
8110b378:	003b68fa 	trap	3
8110b37c:	dfc00115 	stw	ra,4(sp)
8110b380:	df000015 	stw	fp,0(sp)
8110b384:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vReceiverUartTask");
8110b388:	d0a05a17 	ldw	r2,-32408(gp)
8110b38c:	100f883a 	mov	r7,r2
8110b390:	01800444 	movi	r6,17
8110b394:	01400044 	movi	r5,1
8110b398:	01204534 	movhi	r4,33044
8110b39c:	212acd04 	addi	r4,r4,-21708
8110b3a0:	110ec080 	call	8110ec08 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110b3a4:	0001883a 	nop
8110b3a8:	e037883a 	mov	sp,fp
8110b3ac:	dfc00117 	ldw	ra,4(sp)
8110b3b0:	df000017 	ldw	fp,0(sp)
8110b3b4:	dec00204 	addi	sp,sp,8
8110b3b8:	f800283a 	ret

8110b3bc <vFailSenderCreate>:


void vFailSenderCreate( void )
{
8110b3bc:	defffe04 	addi	sp,sp,-8
8110b3c0:	de00012e 	bgeu	sp,et,8110b3c8 <vFailSenderCreate+0xc>
8110b3c4:	003b68fa 	trap	3
8110b3c8:	dfc00115 	stw	ra,4(sp)
8110b3cc:	df000015 	stw	fp,0(sp)
8110b3d0:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSenderCreate");
8110b3d4:	d0a05a17 	ldw	r2,-32408(gp)
8110b3d8:	100f883a 	mov	r7,r2
8110b3dc:	01800444 	movi	r6,17
8110b3e0:	01400044 	movi	r5,1
8110b3e4:	01204534 	movhi	r4,33044
8110b3e8:	212ad204 	addi	r4,r4,-21688
8110b3ec:	110ec080 	call	8110ec08 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110b3f0:	0001883a 	nop
8110b3f4:	e037883a 	mov	sp,fp
8110b3f8:	dfc00117 	ldw	ra,4(sp)
8110b3fc:	df000017 	ldw	fp,0(sp)
8110b400:	dec00204 	addi	sp,sp,8
8110b404:	f800283a 	ret

8110b408 <vFailDeleteInitialization>:


void vFailDeleteInitialization( void )
{
8110b408:	defffe04 	addi	sp,sp,-8
8110b40c:	de00012e 	bgeu	sp,et,8110b414 <vFailDeleteInitialization+0xc>
8110b410:	003b68fa 	trap	3
8110b414:	dfc00115 	stw	ra,4(sp)
8110b418:	df000015 	stw	fp,0(sp)
8110b41c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailDeleteInitialization");
8110b420:	d0a05a17 	ldw	r2,-32408(gp)
8110b424:	100f883a 	mov	r7,r2
8110b428:	01800644 	movi	r6,25
8110b42c:	01400044 	movi	r5,1
8110b430:	01204534 	movhi	r4,33044
8110b434:	212ad704 	addi	r4,r4,-21668
8110b438:	110ec080 	call	8110ec08 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110b43c:	0001883a 	nop
8110b440:	e037883a 	mov	sp,fp
8110b444:	dfc00117 	ldw	ra,4(sp)
8110b448:	df000017 	ldw	fp,0(sp)
8110b44c:	dec00204 	addi	sp,sp,8
8110b450:	f800283a 	ret

8110b454 <vFailSetCountSemaphorexBuffer32>:


void vFailSetCountSemaphorexBuffer32( void )
{
8110b454:	defffe04 	addi	sp,sp,-8
8110b458:	de00012e 	bgeu	sp,et,8110b460 <vFailSetCountSemaphorexBuffer32+0xc>
8110b45c:	003b68fa 	trap	3
8110b460:	dfc00115 	stw	ra,4(sp)
8110b464:	df000015 	stw	fp,0(sp)
8110b468:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetCountSemaphorexBuffer32. (exit)");
8110b46c:	d0a05a17 	ldw	r2,-32408(gp)
8110b470:	100f883a 	mov	r7,r2
8110b474:	018009c4 	movi	r6,39
8110b478:	01400044 	movi	r5,1
8110b47c:	01204534 	movhi	r4,33044
8110b480:	212ade04 	addi	r4,r4,-21640
8110b484:	110ec080 	call	8110ec08 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not post to the semaphore.()\n");
8110b488:	d0a05a17 	ldw	r2,-32408(gp)
8110b48c:	100f883a 	mov	r7,r2
8110b490:	018008c4 	movi	r6,35
8110b494:	01400044 	movi	r5,1
8110b498:	01204534 	movhi	r4,33044
8110b49c:	212ae804 	addi	r4,r4,-21600
8110b4a0:	110ec080 	call	8110ec08 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110b4a4:	0001883a 	nop
8110b4a8:	e037883a 	mov	sp,fp
8110b4ac:	dfc00117 	ldw	ra,4(sp)
8110b4b0:	df000017 	ldw	fp,0(sp)
8110b4b4:	dec00204 	addi	sp,sp,8
8110b4b8:	f800283a 	ret

8110b4bc <vFailSetCountSemaphorexBuffer64>:

void vFailSetCountSemaphorexBuffer64( void )
{
8110b4bc:	defffe04 	addi	sp,sp,-8
8110b4c0:	de00012e 	bgeu	sp,et,8110b4c8 <vFailSetCountSemaphorexBuffer64+0xc>
8110b4c4:	003b68fa 	trap	3
8110b4c8:	dfc00115 	stw	ra,4(sp)
8110b4cc:	df000015 	stw	fp,0(sp)
8110b4d0:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetCountSemaphorexBuffer64. (exit)");
8110b4d4:	d0a05a17 	ldw	r2,-32408(gp)
8110b4d8:	100f883a 	mov	r7,r2
8110b4dc:	018009c4 	movi	r6,39
8110b4e0:	01400044 	movi	r5,1
8110b4e4:	01204534 	movhi	r4,33044
8110b4e8:	212af104 	addi	r4,r4,-21564
8110b4ec:	110ec080 	call	8110ec08 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not post to the semaphore.()\n");
8110b4f0:	d0a05a17 	ldw	r2,-32408(gp)
8110b4f4:	100f883a 	mov	r7,r2
8110b4f8:	018008c4 	movi	r6,35
8110b4fc:	01400044 	movi	r5,1
8110b500:	01204534 	movhi	r4,33044
8110b504:	212ae804 	addi	r4,r4,-21600
8110b508:	110ec080 	call	8110ec08 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110b50c:	0001883a 	nop
8110b510:	e037883a 	mov	sp,fp
8110b514:	dfc00117 	ldw	ra,4(sp)
8110b518:	df000017 	ldw	fp,0(sp)
8110b51c:	dec00204 	addi	sp,sp,8
8110b520:	f800283a 	ret

8110b524 <vFailSetCountSemaphorexBuffer128>:

void vFailSetCountSemaphorexBuffer128( void )
{
8110b524:	defffe04 	addi	sp,sp,-8
8110b528:	de00012e 	bgeu	sp,et,8110b530 <vFailSetCountSemaphorexBuffer128+0xc>
8110b52c:	003b68fa 	trap	3
8110b530:	dfc00115 	stw	ra,4(sp)
8110b534:	df000015 	stw	fp,0(sp)
8110b538:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetCountSemaphorexBuffer128. (exit)");
8110b53c:	d0a05a17 	ldw	r2,-32408(gp)
8110b540:	100f883a 	mov	r7,r2
8110b544:	01800a04 	movi	r6,40
8110b548:	01400044 	movi	r5,1
8110b54c:	01204534 	movhi	r4,33044
8110b550:	212afb04 	addi	r4,r4,-21524
8110b554:	110ec080 	call	8110ec08 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not post to the semaphore.()\n");
8110b558:	d0a05a17 	ldw	r2,-32408(gp)
8110b55c:	100f883a 	mov	r7,r2
8110b560:	018008c4 	movi	r6,35
8110b564:	01400044 	movi	r5,1
8110b568:	01204534 	movhi	r4,33044
8110b56c:	212ae804 	addi	r4,r4,-21600
8110b570:	110ec080 	call	8110ec08 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110b574:	0001883a 	nop
8110b578:	e037883a 	mov	sp,fp
8110b57c:	dfc00117 	ldw	ra,4(sp)
8110b580:	df000017 	ldw	fp,0(sp)
8110b584:	dec00204 	addi	sp,sp,8
8110b588:	f800283a 	ret

8110b58c <vFailFoundBufferRetransmission>:

void vFailFoundBufferRetransmission( void )
{
8110b58c:	defffe04 	addi	sp,sp,-8
8110b590:	de00012e 	bgeu	sp,et,8110b598 <vFailFoundBufferRetransmission+0xc>
8110b594:	003b68fa 	trap	3
8110b598:	dfc00115 	stw	ra,4(sp)
8110b59c:	df000015 	stw	fp,0(sp)
8110b5a0:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailFoundBufferRetransmission. (exit)");
8110b5a4:	d0a05a17 	ldw	r2,-32408(gp)
8110b5a8:	100f883a 	mov	r7,r2
8110b5ac:	01800984 	movi	r6,38
8110b5b0:	01400044 	movi	r5,1
8110b5b4:	01204534 	movhi	r4,33044
8110b5b8:	212b0604 	addi	r4,r4,-21480
8110b5bc:	110ec080 	call	8110ec08 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not found the id in the (re)transmission buffers.(vReceiverAckTask)\n");
8110b5c0:	d0a05a17 	ldw	r2,-32408(gp)
8110b5c4:	100f883a 	mov	r7,r2
8110b5c8:	01801284 	movi	r6,74
8110b5cc:	01400044 	movi	r5,1
8110b5d0:	01204534 	movhi	r4,33044
8110b5d4:	212b1004 	addi	r4,r4,-21440
8110b5d8:	110ec080 	call	8110ec08 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110b5dc:	0001883a 	nop
8110b5e0:	e037883a 	mov	sp,fp
8110b5e4:	dfc00117 	ldw	ra,4(sp)
8110b5e8:	df000017 	ldw	fp,0(sp)
8110b5ec:	dec00204 	addi	sp,sp,8
8110b5f0:	f800283a 	ret

8110b5f4 <vFailGetCountSemaphorePreParsedBuffer>:


void vFailGetCountSemaphorePreParsedBuffer( void )
{
8110b5f4:	defffe04 	addi	sp,sp,-8
8110b5f8:	de00012e 	bgeu	sp,et,8110b600 <vFailGetCountSemaphorePreParsedBuffer+0xc>
8110b5fc:	003b68fa 	trap	3
8110b600:	dfc00115 	stw	ra,4(sp)
8110b604:	df000015 	stw	fp,0(sp)
8110b608:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetCountSemaphorePreParsedBuffer. (exit)");
8110b60c:	d0a05a17 	ldw	r2,-32408(gp)
8110b610:	100f883a 	mov	r7,r2
8110b614:	01800b44 	movi	r6,45
8110b618:	01400044 	movi	r5,1
8110b61c:	01204534 	movhi	r4,33044
8110b620:	212b2304 	addi	r4,r4,-21364
8110b624:	110ec080 	call	8110ec08 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get the semaphore and some error happens.(vParserRXTask)\n");
8110b628:	d0a05a17 	ldw	r2,-32408(gp)
8110b62c:	100f883a 	mov	r7,r2
8110b630:	018010c4 	movi	r6,67
8110b634:	01400044 	movi	r5,1
8110b638:	01204534 	movhi	r4,33044
8110b63c:	212b2f04 	addi	r4,r4,-21316
8110b640:	110ec080 	call	8110ec08 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110b644:	0001883a 	nop
8110b648:	e037883a 	mov	sp,fp
8110b64c:	dfc00117 	ldw	ra,4(sp)
8110b650:	df000017 	ldw	fp,0(sp)
8110b654:	dec00204 	addi	sp,sp,8
8110b658:	f800283a 	ret

8110b65c <vFailGetxMutexPreParsedParserRxTask>:


void vFailGetxMutexPreParsedParserRxTask( void )
{
8110b65c:	defffe04 	addi	sp,sp,-8
8110b660:	de00012e 	bgeu	sp,et,8110b668 <vFailGetxMutexPreParsedParserRxTask+0xc>
8110b664:	003b68fa 	trap	3
8110b668:	dfc00115 	stw	ra,4(sp)
8110b66c:	df000015 	stw	fp,0(sp)
8110b670:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetxMutexPreParsedParserRxTask. (exit)");
8110b674:	d0a05a17 	ldw	r2,-32408(gp)
8110b678:	100f883a 	mov	r7,r2
8110b67c:	01800ac4 	movi	r6,43
8110b680:	01400044 	movi	r5,1
8110b684:	01204534 	movhi	r4,33044
8110b688:	212b4004 	addi	r4,r4,-21248
8110b68c:	110ec080 	call	8110ec08 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get the mutex and some error happens.(vParserRXTask)\n");
8110b690:	d0a05a17 	ldw	r2,-32408(gp)
8110b694:	100f883a 	mov	r7,r2
8110b698:	01800fc4 	movi	r6,63
8110b69c:	01400044 	movi	r5,1
8110b6a0:	01204534 	movhi	r4,33044
8110b6a4:	212b4b04 	addi	r4,r4,-21204
8110b6a8:	110ec080 	call	8110ec08 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110b6ac:	0001883a 	nop
8110b6b0:	e037883a 	mov	sp,fp
8110b6b4:	dfc00117 	ldw	ra,4(sp)
8110b6b8:	df000017 	ldw	fp,0(sp)
8110b6bc:	dec00204 	addi	sp,sp,8
8110b6c0:	f800283a 	ret

8110b6c4 <vNoContentInPreParsedBuffer>:


void vNoContentInPreParsedBuffer( void )
{
8110b6c4:	defffe04 	addi	sp,sp,-8
8110b6c8:	de00012e 	bgeu	sp,et,8110b6d0 <vNoContentInPreParsedBuffer+0xc>
8110b6cc:	003b68fa 	trap	3
8110b6d0:	dfc00115 	stw	ra,4(sp)
8110b6d4:	df000015 	stw	fp,0(sp)
8110b6d8:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vNoContentInPreParsedBuffer. (exit)");
8110b6dc:	d0a05a17 	ldw	r2,-32408(gp)
8110b6e0:	100f883a 	mov	r7,r2
8110b6e4:	018008c4 	movi	r6,35
8110b6e8:	01400044 	movi	r5,1
8110b6ec:	01204534 	movhi	r4,33044
8110b6f0:	212b5b04 	addi	r4,r4,-21140
8110b6f4:	110ec080 	call	8110ec08 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Semaphore was post by some task but has no message in the PreParsedBuffer.(vParserRXTask)\n");
8110b6f8:	d0a05a17 	ldw	r2,-32408(gp)
8110b6fc:	100f883a 	mov	r7,r2
8110b700:	01801684 	movi	r6,90
8110b704:	01400044 	movi	r5,1
8110b708:	01204534 	movhi	r4,33044
8110b70c:	212b6404 	addi	r4,r4,-21104
8110b710:	110ec080 	call	8110ec08 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110b714:	0001883a 	nop
8110b718:	e037883a 	mov	sp,fp
8110b71c:	dfc00117 	ldw	ra,4(sp)
8110b720:	df000017 	ldw	fp,0(sp)
8110b724:	dec00204 	addi	sp,sp,8
8110b728:	f800283a 	ret

8110b72c <vCouldNotSendEthConfUART>:


void vCouldNotSendEthConfUART( void )
{
8110b72c:	defffe04 	addi	sp,sp,-8
8110b730:	de00012e 	bgeu	sp,et,8110b738 <vCouldNotSendEthConfUART+0xc>
8110b734:	003b68fa 	trap	3
8110b738:	dfc00115 	stw	ra,4(sp)
8110b73c:	df000015 	stw	fp,0(sp)
8110b740:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotSendEthConfUART. (exit)");
8110b744:	d0a05a17 	ldw	r2,-32408(gp)
8110b748:	100f883a 	mov	r7,r2
8110b74c:	01800804 	movi	r6,32
8110b750:	01400044 	movi	r5,1
8110b754:	01204534 	movhi	r4,33044
8110b758:	212b7b04 	addi	r4,r4,-21012
8110b75c:	110ec080 	call	8110ec08 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send or not write ETH conf of the NUC in the (re)transmission buffer.(vSendEthConf)\n");
8110b760:	d0a05a17 	ldw	r2,-32408(gp)
8110b764:	100f883a 	mov	r7,r2
8110b768:	01801784 	movi	r6,94
8110b76c:	01400044 	movi	r5,1
8110b770:	01204534 	movhi	r4,33044
8110b774:	212b8404 	addi	r4,r4,-20976
8110b778:	110ec080 	call	8110ec08 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110b77c:	0001883a 	nop
8110b780:	e037883a 	mov	sp,fp
8110b784:	dfc00117 	ldw	ra,4(sp)
8110b788:	df000017 	ldw	fp,0(sp)
8110b78c:	dec00204 	addi	sp,sp,8
8110b790:	f800283a 	ret

8110b794 <vFailSendNack>:

void vFailSendNack( void )
{
8110b794:	defffe04 	addi	sp,sp,-8
8110b798:	de00012e 	bgeu	sp,et,8110b7a0 <vFailSendNack+0xc>
8110b79c:	003b68fa 	trap	3
8110b7a0:	dfc00115 	stw	ra,4(sp)
8110b7a4:	df000015 	stw	fp,0(sp)
8110b7a8:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSendNack. (exit)");
8110b7ac:	d0a05a17 	ldw	r2,-32408(gp)
8110b7b0:	100f883a 	mov	r7,r2
8110b7b4:	01800544 	movi	r6,21
8110b7b8:	01400044 	movi	r5,1
8110b7bc:	01204534 	movhi	r4,33044
8110b7c0:	212b9c04 	addi	r4,r4,-20880
8110b7c4:	110ec080 	call	8110ec08 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Send Nack using the PreAckSender buffer. \n");
8110b7c8:	d0a05a17 	ldw	r2,-32408(gp)
8110b7cc:	100f883a 	mov	r7,r2
8110b7d0:	01800a84 	movi	r6,42
8110b7d4:	01400044 	movi	r5,1
8110b7d8:	01204534 	movhi	r4,33044
8110b7dc:	212ba204 	addi	r4,r4,-20856
8110b7e0:	110ec080 	call	8110ec08 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110b7e4:	0001883a 	nop
8110b7e8:	e037883a 	mov	sp,fp
8110b7ec:	dfc00117 	ldw	ra,4(sp)
8110b7f0:	df000017 	ldw	fp,0(sp)
8110b7f4:	dec00204 	addi	sp,sp,8
8110b7f8:	f800283a 	ret

8110b7fc <vFailSetPreAckSenderBuffer>:

void vFailSetPreAckSenderBuffer( void )
{
8110b7fc:	defffe04 	addi	sp,sp,-8
8110b800:	de00012e 	bgeu	sp,et,8110b808 <vFailSetPreAckSenderBuffer+0xc>
8110b804:	003b68fa 	trap	3
8110b808:	dfc00115 	stw	ra,4(sp)
8110b80c:	df000015 	stw	fp,0(sp)
8110b810:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetPreAckSenderBuffer. (exit)");
8110b814:	d0a05a17 	ldw	r2,-32408(gp)
8110b818:	100f883a 	mov	r7,r2
8110b81c:	01800884 	movi	r6,34
8110b820:	01400044 	movi	r5,1
8110b824:	01204534 	movhi	r4,33044
8110b828:	212bad04 	addi	r4,r4,-20812
8110b82c:	110ec080 	call	8110ec08 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the message to the task out_ack_handler using the PreAckSender buffer.\n");
8110b830:	d0a05a17 	ldw	r2,-32408(gp)
8110b834:	100f883a 	mov	r7,r2
8110b838:	01801584 	movi	r6,86
8110b83c:	01400044 	movi	r5,1
8110b840:	01204534 	movhi	r4,33044
8110b844:	212bb604 	addi	r4,r4,-20776
8110b848:	110ec080 	call	8110ec08 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110b84c:	0001883a 	nop
8110b850:	e037883a 	mov	sp,fp
8110b854:	dfc00117 	ldw	ra,4(sp)
8110b858:	df000017 	ldw	fp,0(sp)
8110b85c:	dec00204 	addi	sp,sp,8
8110b860:	f800283a 	ret

8110b864 <vFailSetPreParsedBuffer>:

void vFailSetPreParsedBuffer( void )
{
8110b864:	defffe04 	addi	sp,sp,-8
8110b868:	de00012e 	bgeu	sp,et,8110b870 <vFailSetPreParsedBuffer+0xc>
8110b86c:	003b68fa 	trap	3
8110b870:	dfc00115 	stw	ra,4(sp)
8110b874:	df000015 	stw	fp,0(sp)
8110b878:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetPreParsedBuffer. (exit)");
8110b87c:	d0a05a17 	ldw	r2,-32408(gp)
8110b880:	100f883a 	mov	r7,r2
8110b884:	018007c4 	movi	r6,31
8110b888:	01400044 	movi	r5,1
8110b88c:	01204534 	movhi	r4,33044
8110b890:	212bcc04 	addi	r4,r4,-20688
8110b894:	110ec080 	call	8110ec08 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the message to the task parser_comm using the PreParsed buffer.\n");
8110b898:	d0a05a17 	ldw	r2,-32408(gp)
8110b89c:	100f883a 	mov	r7,r2
8110b8a0:	018013c4 	movi	r6,79
8110b8a4:	01400044 	movi	r5,1
8110b8a8:	01204534 	movhi	r4,33044
8110b8ac:	212bd404 	addi	r4,r4,-20656
8110b8b0:	110ec080 	call	8110ec08 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110b8b4:	0001883a 	nop
8110b8b8:	e037883a 	mov	sp,fp
8110b8bc:	dfc00117 	ldw	ra,4(sp)
8110b8c0:	df000017 	ldw	fp,0(sp)
8110b8c4:	dec00204 	addi	sp,sp,8
8110b8c8:	f800283a 	ret

8110b8cc <vFailSetPreAckReceiverBuffer>:


void vFailSetPreAckReceiverBuffer( void )
{
8110b8cc:	defffe04 	addi	sp,sp,-8
8110b8d0:	de00012e 	bgeu	sp,et,8110b8d8 <vFailSetPreAckReceiverBuffer+0xc>
8110b8d4:	003b68fa 	trap	3
8110b8d8:	dfc00115 	stw	ra,4(sp)
8110b8dc:	df000015 	stw	fp,0(sp)
8110b8e0:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetPreAckReceiverBuffer. (exit)");
8110b8e4:	d0a05a17 	ldw	r2,-32408(gp)
8110b8e8:	100f883a 	mov	r7,r2
8110b8ec:	01800904 	movi	r6,36
8110b8f0:	01400044 	movi	r5,1
8110b8f4:	01204534 	movhi	r4,33044
8110b8f8:	212be804 	addi	r4,r4,-20576
8110b8fc:	110ec080 	call	8110ec08 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the message to the task in_out_handler using the PreAckReceiver buffer.\n");
8110b900:	d0a05a17 	ldw	r2,-32408(gp)
8110b904:	100f883a 	mov	r7,r2
8110b908:	018015c4 	movi	r6,87
8110b90c:	01400044 	movi	r5,1
8110b910:	01204534 	movhi	r4,33044
8110b914:	212bf204 	addi	r4,r4,-20536
8110b918:	110ec080 	call	8110ec08 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110b91c:	0001883a 	nop
8110b920:	e037883a 	mov	sp,fp
8110b924:	dfc00117 	ldw	ra,4(sp)
8110b928:	df000017 	ldw	fp,0(sp)
8110b92c:	dec00204 	addi	sp,sp,8
8110b930:	f800283a 	ret

8110b934 <vFailParserCommTaskCreate>:


void vFailParserCommTaskCreate( void )
{
8110b934:	defffe04 	addi	sp,sp,-8
8110b938:	de00012e 	bgeu	sp,et,8110b940 <vFailParserCommTaskCreate+0xc>
8110b93c:	003b68fa 	trap	3
8110b940:	dfc00115 	stw	ra,4(sp)
8110b944:	df000015 	stw	fp,0(sp)
8110b948:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailParserCommTaskCreate");
8110b94c:	d0a05a17 	ldw	r2,-32408(gp)
8110b950:	100f883a 	mov	r7,r2
8110b954:	01800644 	movi	r6,25
8110b958:	01400044 	movi	r5,1
8110b95c:	01204534 	movhi	r4,33044
8110b960:	212c0804 	addi	r4,r4,-20448
8110b964:	110ec080 	call	8110ec08 <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
8110b968:	0001883a 	nop
8110b96c:	e037883a 	mov	sp,fp
8110b970:	dfc00117 	ldw	ra,4(sp)
8110b974:	df000017 	ldw	fp,0(sp)
8110b978:	dec00204 	addi	sp,sp,8
8110b97c:	f800283a 	ret

8110b980 <vFailInAckHandlerTaskCreate>:

void vFailInAckHandlerTaskCreate( void )
{
8110b980:	defffe04 	addi	sp,sp,-8
8110b984:	de00012e 	bgeu	sp,et,8110b98c <vFailInAckHandlerTaskCreate+0xc>
8110b988:	003b68fa 	trap	3
8110b98c:	dfc00115 	stw	ra,4(sp)
8110b990:	df000015 	stw	fp,0(sp)
8110b994:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailInAckHandlerTaskCreate");
8110b998:	d0a05a17 	ldw	r2,-32408(gp)
8110b99c:	100f883a 	mov	r7,r2
8110b9a0:	018006c4 	movi	r6,27
8110b9a4:	01400044 	movi	r5,1
8110b9a8:	01204534 	movhi	r4,33044
8110b9ac:	212c0f04 	addi	r4,r4,-20420
8110b9b0:	110ec080 	call	8110ec08 <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
8110b9b4:	0001883a 	nop
8110b9b8:	e037883a 	mov	sp,fp
8110b9bc:	dfc00117 	ldw	ra,4(sp)
8110b9c0:	df000017 	ldw	fp,0(sp)
8110b9c4:	dec00204 	addi	sp,sp,8
8110b9c8:	f800283a 	ret

8110b9cc <vFailOutAckHandlerTaskCreate>:

void vFailOutAckHandlerTaskCreate( void )
{
8110b9cc:	defffe04 	addi	sp,sp,-8
8110b9d0:	de00012e 	bgeu	sp,et,8110b9d8 <vFailOutAckHandlerTaskCreate+0xc>
8110b9d4:	003b68fa 	trap	3
8110b9d8:	dfc00115 	stw	ra,4(sp)
8110b9dc:	df000015 	stw	fp,0(sp)
8110b9e0:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailInAckHandlerTaskCreate");
8110b9e4:	d0a05a17 	ldw	r2,-32408(gp)
8110b9e8:	100f883a 	mov	r7,r2
8110b9ec:	018006c4 	movi	r6,27
8110b9f0:	01400044 	movi	r5,1
8110b9f4:	01204534 	movhi	r4,33044
8110b9f8:	212c0f04 	addi	r4,r4,-20420
8110b9fc:	110ec080 	call	8110ec08 <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
8110ba00:	0001883a 	nop
8110ba04:	e037883a 	mov	sp,fp
8110ba08:	dfc00117 	ldw	ra,4(sp)
8110ba0c:	df000017 	ldw	fp,0(sp)
8110ba10:	dec00204 	addi	sp,sp,8
8110ba14:	f800283a 	ret

8110ba18 <vFailCreateTimerRetransmisison>:


void vFailCreateTimerRetransmisison( void )
{
8110ba18:	defffe04 	addi	sp,sp,-8
8110ba1c:	de00012e 	bgeu	sp,et,8110ba24 <vFailCreateTimerRetransmisison+0xc>
8110ba20:	003b68fa 	trap	3
8110ba24:	dfc00115 	stw	ra,4(sp)
8110ba28:	df000015 	stw	fp,0(sp)
8110ba2c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailCreateTimerRetransmisison");
8110ba30:	d0a05a17 	ldw	r2,-32408(gp)
8110ba34:	100f883a 	mov	r7,r2
8110ba38:	01800784 	movi	r6,30
8110ba3c:	01400044 	movi	r5,1
8110ba40:	01204534 	movhi	r4,33044
8110ba44:	212c1604 	addi	r4,r4,-20392
8110ba48:	110ec080 	call	8110ec08 <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
8110ba4c:	0001883a 	nop
8110ba50:	e037883a 	mov	sp,fp
8110ba54:	dfc00117 	ldw	ra,4(sp)
8110ba58:	df000017 	ldw	fp,0(sp)
8110ba5c:	dec00204 	addi	sp,sp,8
8110ba60:	f800283a 	ret

8110ba64 <vCouldNotCheckBufferTimeOutFunction>:


void vCouldNotCheckBufferTimeOutFunction( void )
{
8110ba64:	defffe04 	addi	sp,sp,-8
8110ba68:	de00012e 	bgeu	sp,et,8110ba70 <vCouldNotCheckBufferTimeOutFunction+0xc>
8110ba6c:	003b68fa 	trap	3
8110ba70:	dfc00115 	stw	ra,4(sp)
8110ba74:	df000015 	stw	fp,0(sp)
8110ba78:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotCheckBufferTimeOutFunction");
8110ba7c:	d0a05a17 	ldw	r2,-32408(gp)
8110ba80:	100f883a 	mov	r7,r2
8110ba84:	018008c4 	movi	r6,35
8110ba88:	01400044 	movi	r5,1
8110ba8c:	01204534 	movhi	r4,33044
8110ba90:	212c1e04 	addi	r4,r4,-20360
8110ba94:	110ec080 	call	8110ec08 <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
8110ba98:	0001883a 	nop
8110ba9c:	e037883a 	mov	sp,fp
8110baa0:	dfc00117 	ldw	ra,4(sp)
8110baa4:	df000017 	ldw	fp,0(sp)
8110baa8:	dec00204 	addi	sp,sp,8
8110baac:	f800283a 	ret

8110bab0 <vFailTimeoutCheckerTaskCreate>:

void vFailTimeoutCheckerTaskCreate( void )
{
8110bab0:	defffe04 	addi	sp,sp,-8
8110bab4:	de00012e 	bgeu	sp,et,8110babc <vFailTimeoutCheckerTaskCreate+0xc>
8110bab8:	003b68fa 	trap	3
8110babc:	dfc00115 	stw	ra,4(sp)
8110bac0:	df000015 	stw	fp,0(sp)
8110bac4:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailTimeoutCheckerTaskCreate");
8110bac8:	d0a05a17 	ldw	r2,-32408(gp)
8110bacc:	100f883a 	mov	r7,r2
8110bad0:	01800744 	movi	r6,29
8110bad4:	01400044 	movi	r5,1
8110bad8:	01204534 	movhi	r4,33044
8110badc:	212c2704 	addi	r4,r4,-20324
8110bae0:	110ec080 	call	8110ec08 <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
8110bae4:	0001883a 	nop
8110bae8:	e037883a 	mov	sp,fp
8110baec:	dfc00117 	ldw	ra,4(sp)
8110baf0:	df000017 	ldw	fp,0(sp)
8110baf4:	dec00204 	addi	sp,sp,8
8110baf8:	f800283a 	ret

8110bafc <vFailGetBlockingSemTimeoutTask>:


void vFailGetBlockingSemTimeoutTask( void )
{
8110bafc:	defffe04 	addi	sp,sp,-8
8110bb00:	de00012e 	bgeu	sp,et,8110bb08 <vFailGetBlockingSemTimeoutTask+0xc>
8110bb04:	003b68fa 	trap	3
8110bb08:	dfc00115 	stw	ra,4(sp)
8110bb0c:	df000015 	stw	fp,0(sp)
8110bb10:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetBlockingSemTimeoutTask. (exit)");
8110bb14:	d0a05a17 	ldw	r2,-32408(gp)
8110bb18:	100f883a 	mov	r7,r2
8110bb1c:	01800984 	movi	r6,38
8110bb20:	01400044 	movi	r5,1
8110bb24:	01204534 	movhi	r4,33044
8110bb28:	212c2f04 	addi	r4,r4,-20292
8110bb2c:	110ec080 	call	8110ec08 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Retrun from a blocking (0) OSSemPend with a error.");
8110bb30:	d0a05a17 	ldw	r2,-32408(gp)
8110bb34:	100f883a 	mov	r7,r2
8110bb38:	01800c84 	movi	r6,50
8110bb3c:	01400044 	movi	r5,1
8110bb40:	01204534 	movhi	r4,33044
8110bb44:	212c3904 	addi	r4,r4,-20252
8110bb48:	110ec080 	call	8110ec08 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110bb4c:	0001883a 	nop
8110bb50:	e037883a 	mov	sp,fp
8110bb54:	dfc00117 	ldw	ra,4(sp)
8110bb58:	df000017 	ldw	fp,0(sp)
8110bb5c:	dec00204 	addi	sp,sp,8
8110bb60:	f800283a 	ret

8110bb64 <vFailPostBlockingSemTimeoutTask>:

void vFailPostBlockingSemTimeoutTask( void )
{
8110bb64:	defffe04 	addi	sp,sp,-8
8110bb68:	de00012e 	bgeu	sp,et,8110bb70 <vFailPostBlockingSemTimeoutTask+0xc>
8110bb6c:	003b68fa 	trap	3
8110bb70:	dfc00115 	stw	ra,4(sp)
8110bb74:	df000015 	stw	fp,0(sp)
8110bb78:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailPostBlockingSemTimeoutTask. (exit)");
8110bb7c:	d0a05a17 	ldw	r2,-32408(gp)
8110bb80:	100f883a 	mov	r7,r2
8110bb84:	018009c4 	movi	r6,39
8110bb88:	01400044 	movi	r5,1
8110bb8c:	01204534 	movhi	r4,33044
8110bb90:	212c4604 	addi	r4,r4,-20200
8110bb94:	110ec080 	call	8110ec08 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not Post the semaphore for the TimeoutTask.");
8110bb98:	d0a05a17 	ldw	r2,-32408(gp)
8110bb9c:	100f883a 	mov	r7,r2
8110bba0:	01800c44 	movi	r6,49
8110bba4:	01400044 	movi	r5,1
8110bba8:	01204534 	movhi	r4,33044
8110bbac:	212c5004 	addi	r4,r4,-20160
8110bbb0:	110ec080 	call	8110ec08 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110bbb4:	0001883a 	nop
8110bbb8:	e037883a 	mov	sp,fp
8110bbbc:	dfc00117 	ldw	ra,4(sp)
8110bbc0:	df000017 	ldw	fp,0(sp)
8110bbc4:	dec00204 	addi	sp,sp,8
8110bbc8:	f800283a 	ret

8110bbcc <vFailCouldNotRetransmitTimeoutTask>:


void vFailCouldNotRetransmitTimeoutTask( void )
{
8110bbcc:	defffe04 	addi	sp,sp,-8
8110bbd0:	de00012e 	bgeu	sp,et,8110bbd8 <vFailCouldNotRetransmitTimeoutTask+0xc>
8110bbd4:	003b68fa 	trap	3
8110bbd8:	dfc00115 	stw	ra,4(sp)
8110bbdc:	df000015 	stw	fp,0(sp)
8110bbe0:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailCouldNotRetransmitTimeoutTask. (exit)");
8110bbe4:	d0a05a17 	ldw	r2,-32408(gp)
8110bbe8:	100f883a 	mov	r7,r2
8110bbec:	01800a84 	movi	r6,42
8110bbf0:	01400044 	movi	r5,1
8110bbf4:	01204534 	movhi	r4,33044
8110bbf8:	212c5d04 	addi	r4,r4,-20108
8110bbfc:	110ec080 	call	8110ec08 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"After sleep for 50 ticks, could not get access to the tx uart. No retransmission occurs.");
8110bc00:	d0a05a17 	ldw	r2,-32408(gp)
8110bc04:	100f883a 	mov	r7,r2
8110bc08:	01801604 	movi	r6,88
8110bc0c:	01400044 	movi	r5,1
8110bc10:	01204534 	movhi	r4,33044
8110bc14:	212c6804 	addi	r4,r4,-20064
8110bc18:	110ec080 	call	8110ec08 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110bc1c:	0001883a 	nop
8110bc20:	e037883a 	mov	sp,fp
8110bc24:	dfc00117 	ldw	ra,4(sp)
8110bc28:	df000017 	ldw	fp,0(sp)
8110bc2c:	dec00204 	addi	sp,sp,8
8110bc30:	f800283a 	ret

8110bc34 <vCouldNotRetransmitB32TimeoutTask>:


void vCouldNotRetransmitB32TimeoutTask( void )
{
8110bc34:	defffe04 	addi	sp,sp,-8
8110bc38:	de00012e 	bgeu	sp,et,8110bc40 <vCouldNotRetransmitB32TimeoutTask+0xc>
8110bc3c:	003b68fa 	trap	3
8110bc40:	dfc00115 	stw	ra,4(sp)
8110bc44:	df000015 	stw	fp,0(sp)
8110bc48:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotRetransmitB32TimeoutTask. (exit)");
8110bc4c:	d0a05a17 	ldw	r2,-32408(gp)
8110bc50:	100f883a 	mov	r7,r2
8110bc54:	01800a44 	movi	r6,41
8110bc58:	01400044 	movi	r5,1
8110bc5c:	01204534 	movhi	r4,33044
8110bc60:	212c7f04 	addi	r4,r4,-19972
8110bc64:	110ec080 	call	8110ec08 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"There's something to retransmit but could not get the mutex for the buffer (32).");
8110bc68:	d0a05a17 	ldw	r2,-32408(gp)
8110bc6c:	100f883a 	mov	r7,r2
8110bc70:	01801404 	movi	r6,80
8110bc74:	01400044 	movi	r5,1
8110bc78:	01204534 	movhi	r4,33044
8110bc7c:	212c8a04 	addi	r4,r4,-19928
8110bc80:	110ec080 	call	8110ec08 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110bc84:	0001883a 	nop
8110bc88:	e037883a 	mov	sp,fp
8110bc8c:	dfc00117 	ldw	ra,4(sp)
8110bc90:	df000017 	ldw	fp,0(sp)
8110bc94:	dec00204 	addi	sp,sp,8
8110bc98:	f800283a 	ret

8110bc9c <vCouldNotRetransmitB64TimeoutTask>:

void vCouldNotRetransmitB64TimeoutTask( void )
{
8110bc9c:	defffe04 	addi	sp,sp,-8
8110bca0:	de00012e 	bgeu	sp,et,8110bca8 <vCouldNotRetransmitB64TimeoutTask+0xc>
8110bca4:	003b68fa 	trap	3
8110bca8:	dfc00115 	stw	ra,4(sp)
8110bcac:	df000015 	stw	fp,0(sp)
8110bcb0:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotRetransmitB64TimeoutTask. (exit)");
8110bcb4:	d0a05a17 	ldw	r2,-32408(gp)
8110bcb8:	100f883a 	mov	r7,r2
8110bcbc:	01800a44 	movi	r6,41
8110bcc0:	01400044 	movi	r5,1
8110bcc4:	01204534 	movhi	r4,33044
8110bcc8:	212c9f04 	addi	r4,r4,-19844
8110bccc:	110ec080 	call	8110ec08 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"There's something to retransmit but could not get the mutex for the buffer (64).");
8110bcd0:	d0a05a17 	ldw	r2,-32408(gp)
8110bcd4:	100f883a 	mov	r7,r2
8110bcd8:	01801404 	movi	r6,80
8110bcdc:	01400044 	movi	r5,1
8110bce0:	01204534 	movhi	r4,33044
8110bce4:	212caa04 	addi	r4,r4,-19800
8110bce8:	110ec080 	call	8110ec08 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110bcec:	0001883a 	nop
8110bcf0:	e037883a 	mov	sp,fp
8110bcf4:	dfc00117 	ldw	ra,4(sp)
8110bcf8:	df000017 	ldw	fp,0(sp)
8110bcfc:	dec00204 	addi	sp,sp,8
8110bd00:	f800283a 	ret

8110bd04 <vCouldNotRetransmitB128TimeoutTask>:

void vCouldNotRetransmitB128TimeoutTask( void )
{
8110bd04:	defffe04 	addi	sp,sp,-8
8110bd08:	de00012e 	bgeu	sp,et,8110bd10 <vCouldNotRetransmitB128TimeoutTask+0xc>
8110bd0c:	003b68fa 	trap	3
8110bd10:	dfc00115 	stw	ra,4(sp)
8110bd14:	df000015 	stw	fp,0(sp)
8110bd18:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotRetransmitB128TimeoutTask. (exit)");
8110bd1c:	d0a05a17 	ldw	r2,-32408(gp)
8110bd20:	100f883a 	mov	r7,r2
8110bd24:	01800a84 	movi	r6,42
8110bd28:	01400044 	movi	r5,1
8110bd2c:	01204534 	movhi	r4,33044
8110bd30:	212cbf04 	addi	r4,r4,-19716
8110bd34:	110ec080 	call	8110ec08 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"There's something to retransmit but could not get the mutex for the buffer (128).");
8110bd38:	d0a05a17 	ldw	r2,-32408(gp)
8110bd3c:	100f883a 	mov	r7,r2
8110bd40:	01801444 	movi	r6,81
8110bd44:	01400044 	movi	r5,1
8110bd48:	01204534 	movhi	r4,33044
8110bd4c:	212cca04 	addi	r4,r4,-19672
8110bd50:	110ec080 	call	8110ec08 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110bd54:	0001883a 	nop
8110bd58:	e037883a 	mov	sp,fp
8110bd5c:	dfc00117 	ldw	ra,4(sp)
8110bd60:	df000017 	ldw	fp,0(sp)
8110bd64:	dec00204 	addi	sp,sp,8
8110bd68:	f800283a 	ret

8110bd6c <vFailStartTimerRetransmission>:


void vFailStartTimerRetransmission( void )
{
8110bd6c:	defffe04 	addi	sp,sp,-8
8110bd70:	de00012e 	bgeu	sp,et,8110bd78 <vFailStartTimerRetransmission+0xc>
8110bd74:	003b68fa 	trap	3
8110bd78:	dfc00115 	stw	ra,4(sp)
8110bd7c:	df000015 	stw	fp,0(sp)
8110bd80:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailStartTimerRetransmission. (exit)");
8110bd84:	d0a05a17 	ldw	r2,-32408(gp)
8110bd88:	100f883a 	mov	r7,r2
8110bd8c:	01800944 	movi	r6,37
8110bd90:	01400044 	movi	r5,1
8110bd94:	01204534 	movhi	r4,33044
8110bd98:	212cdf04 	addi	r4,r4,-19588
8110bd9c:	110ec080 	call	8110ec08 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Fail trying to start the timer xTimerRetransmission.");
8110bda0:	d0a05a17 	ldw	r2,-32408(gp)
8110bda4:	100f883a 	mov	r7,r2
8110bda8:	01800d04 	movi	r6,52
8110bdac:	01400044 	movi	r5,1
8110bdb0:	01204534 	movhi	r4,33044
8110bdb4:	212ce904 	addi	r4,r4,-19548
8110bdb8:	110ec080 	call	8110ec08 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
8110bdbc:	0001883a 	nop
8110bdc0:	e037883a 	mov	sp,fp
8110bdc4:	dfc00117 	ldw	ra,4(sp)
8110bdc8:	df000017 	ldw	fp,0(sp)
8110bdcc:	dec00204 	addi	sp,sp,8
8110bdd0:	f800283a 	ret

8110bdd4 <vNFeeNotInUse>:
 *      Author: Tiago-Low
 */

#include "fee.h"

void vNFeeNotInUse( TNFee *pxNfeeL, unsigned char ucIdNFEE ) {
8110bdd4:	defffd04 	addi	sp,sp,-12
8110bdd8:	de00012e 	bgeu	sp,et,8110bde0 <vNFeeNotInUse+0xc>
8110bddc:	003b68fa 	trap	3
8110bde0:	df000215 	stw	fp,8(sp)
8110bde4:	df000204 	addi	fp,sp,8
8110bde8:	e13ffe15 	stw	r4,-8(fp)
8110bdec:	2805883a 	mov	r2,r5
8110bdf0:	e0bfff05 	stb	r2,-4(fp)

    /* NFEE id [0..7] */
    pxNfeeL->ucId = ucIdNFEE;
8110bdf4:	e0bffe17 	ldw	r2,-8(fp)
8110bdf8:	e0ffff03 	ldbu	r3,-4(fp)
8110bdfc:	10c00005 	stb	r3,0(r2)
    pxNfeeL->xControl.bEnabled = FALSE;
8110be00:	e0bffe17 	ldw	r2,-8(fp)
8110be04:	10002015 	stw	zero,128(r2)
    pxNfeeL->xControl.bUsingDMA = FALSE;
8110be08:	e0bffe17 	ldw	r2,-8(fp)
8110be0c:	10002115 	stw	zero,132(r2)
}
8110be10:	0001883a 	nop
8110be14:	e037883a 	mov	sp,fp
8110be18:	df000017 	ldw	fp,0(sp)
8110be1c:	dec00104 	addi	sp,sp,4
8110be20:	f800283a 	ret

8110be24 <vNFeeStructureInit>:


/* Initialize the structure of control of NFEE with the default Configurations */
void vNFeeStructureInit( TNFee *pxNfeeL, unsigned char ucIdNFEE ) {
8110be24:	defffb04 	addi	sp,sp,-20
8110be28:	de00012e 	bgeu	sp,et,8110be30 <vNFeeStructureInit+0xc>
8110be2c:	003b68fa 	trap	3
8110be30:	dfc00415 	stw	ra,16(sp)
8110be34:	df000315 	stw	fp,12(sp)
8110be38:	df000304 	addi	fp,sp,12
8110be3c:	e13ffe15 	stw	r4,-8(fp)
8110be40:	2805883a 	mov	r2,r5
8110be44:	e0bfff05 	stb	r2,-4(fp)
    unsigned char ucIL = 0;
8110be48:	e03ffd05 	stb	zero,-12(fp)

    /* NFEE id [0..5] */
    pxNfeeL->ucId = ucIdNFEE;
8110be4c:	e0bffe17 	ldw	r2,-8(fp)
8110be50:	e0ffff03 	ldbu	r3,-4(fp)
8110be54:	10c00005 	stb	r3,0(r2)

    /* Load the default values of the CCDs regarding pixels configuration */
    vCCDLoadDefaultValues(&pxNfeeL->xCcdInfo);
8110be58:	e0bffe17 	ldw	r2,-8(fp)
8110be5c:	10802804 	addi	r2,r2,160
8110be60:	1009883a 	mov	r4,r2
8110be64:	11098540 	call	81109854 <vCCDLoadDefaultValues>

    /* Update the values of memory mapping for this FEE */
    vUpdateMemMapFEE(pxNfeeL);
8110be68:	e13ffe17 	ldw	r4,-8(fp)
8110be6c:	110befc0 	call	8110befc <vUpdateMemMapFEE>

    /* Initilizing control variables */
    pxNfeeL->xControl.bEnabled = TRUE;
8110be70:	e0bffe17 	ldw	r2,-8(fp)
8110be74:	00c00044 	movi	r3,1
8110be78:	10c02015 	stw	r3,128(r2)
    pxNfeeL->xControl.bUsingDMA = FALSE;
8110be7c:	e0bffe17 	ldw	r2,-8(fp)
8110be80:	10002115 	stw	zero,132(r2)
    /* The NFEE initialize in the Config mode by default */
    pxNfeeL->xControl.eMode = sFeeConfig;    
8110be84:	e0bffe17 	ldw	r2,-8(fp)
8110be88:	10002615 	stw	zero,152(r2)

    /*  todo: This function supposed to load the values from a SD Card in the future, for now it will load
        hard coded values */
    //bLoadNFEEDefsSDCard(); !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    /* Set the default redout order [ 0, 1, 2, 3 ] */
    for ( ucIL = 0; ucIL < 4; ucIL++) 
8110be8c:	e03ffd05 	stb	zero,-12(fp)
8110be90:	00000906 	br	8110beb8 <vNFeeStructureInit+0x94>
        pxNfeeL->xControl.ucROutOrder[ucIL] = ucIL;
8110be94:	e0bffd03 	ldbu	r2,-12(fp)
8110be98:	e0fffe17 	ldw	r3,-8(fp)
8110be9c:	1885883a 	add	r2,r3,r2
8110bea0:	10802504 	addi	r2,r2,148
8110bea4:	e0fffd03 	ldbu	r3,-12(fp)
8110bea8:	10c00005 	stb	r3,0(r2)

    /*  todo: This function supposed to load the values from a SD Card in the future, for now it will load
        hard coded values */
    //bLoadNFEEDefsSDCard(); !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    /* Set the default redout order [ 0, 1, 2, 3 ] */
    for ( ucIL = 0; ucIL < 4; ucIL++) 
8110beac:	e0bffd03 	ldbu	r2,-12(fp)
8110beb0:	10800044 	addi	r2,r2,1
8110beb4:	e0bffd05 	stb	r2,-12(fp)
8110beb8:	e0bffd03 	ldbu	r2,-12(fp)
8110bebc:	10800130 	cmpltui	r2,r2,4
8110bec0:	103ff41e 	bne	r2,zero,8110be94 <__reset+0xfb0ebe94>
        pxNfeeL->xControl.ucROutOrder[ucIL] = ucIL;
    /* The default side is left */
    pxNfeeL->xControl.eSide = sLeft;
8110bec4:	e0bffe17 	ldw	r2,-8(fp)
8110bec8:	10002715 	stw	zero,156(r2)
    pxNfeeL->xControl.bEchoing = FALSE;
8110becc:	e0bffe17 	ldw	r2,-8(fp)
8110bed0:	10002315 	stw	zero,140(r2)
    pxNfeeL->xControl.bLogging = FALSE;
8110bed4:	e0bffe17 	ldw	r2,-8(fp)
8110bed8:	10002215 	stw	zero,136(r2)
    pxNfeeL->xControl.bChannelEnable = FALSE;
8110bedc:	e0bffe17 	ldw	r2,-8(fp)
8110bee0:	10002415 	stw	zero,144(r2)

}
8110bee4:	0001883a 	nop
8110bee8:	e037883a 	mov	sp,fp
8110beec:	dfc00117 	ldw	ra,4(sp)
8110bef0:	df000017 	ldw	fp,0(sp)
8110bef4:	dec00204 	addi	sp,sp,8
8110bef8:	f800283a 	ret

8110befc <vUpdateMemMapFEE>:

/* Update the memory mapping for the FEE due to the CCD informations */
void vUpdateMemMapFEE( TNFee *pxNfeeL ) {
8110befc:	defff404 	addi	sp,sp,-48
8110bf00:	de00012e 	bgeu	sp,et,8110bf08 <vUpdateMemMapFEE+0xc>
8110bf04:	003b68fa 	trap	3
8110bf08:	df000b15 	stw	fp,44(sp)
8110bf0c:	df000b04 	addi	fp,sp,44
8110bf10:	e13fff15 	stw	r4,-4(fp)
    unsigned long ulTotalSizeL = 0; /* pixels */
8110bf14:	e03ff915 	stw	zero,-28(fp)
    unsigned long ulMemLinesL = 0; /* mem lines */
8110bf18:	e03ff515 	stw	zero,-44(fp)
    unsigned long ulTotalMemLinesL = 0;
8110bf1c:	e03ffa15 	stw	zero,-24(fp)
    unsigned long ulMemLeftBytesL = 0; /* bytes */
8110bf20:	e03ffb15 	stw	zero,-20(fp)
    unsigned long ulMemLeftLinesL = 0; /* mem lines */
8110bf24:	e03ffc15 	stw	zero,-16(fp)
    unsigned long ulMaskMemLinesL = 0; /* mem lines */
8110bf28:	e03ff615 	stw	zero,-40(fp)
    unsigned char ucPixelsInLastBlockL = 0;
8110bf2c:	e03ff705 	stb	zero,-36(fp)
    unsigned char ucShiftsL = 0;
8110bf30:	e03ffd05 	stb	zero,-12(fp)
    unsigned char ucIL = 0;
8110bf34:	e03ff745 	stb	zero,-35(fp)
    unsigned long ulLastOffset = 0;
8110bf38:	e03ff815 	stw	zero,-32(fp)
    unsigned long ulStepHalfCCD = 0;
8110bf3c:	e03ffe15 	stw	zero,-8(fp)


    /* Size of the footprint of the CCD in the DDR memory */
    pxNfeeL->xMemMap.ulTotalBytes = ( OFFSET_STEP_FEE );
8110bf40:	e17fff17 	ldw	r5,-4(fp)
8110bf44:	01035a34 	movhi	r4,3432
8110bf48:	21348c04 	addi	r4,r4,-11728
8110bf4c:	29000215 	stw	r4,8(r5)

    /* Offset of the FEE in the DDR memory */
    pxNfeeL->xMemMap.ulOffsetRoot = OFFSET_STEP_FEE * pxNfeeL->ucId;
8110bf50:	e13fff17 	ldw	r4,-4(fp)
8110bf54:	21000003 	ldbu	r4,0(r4)
8110bf58:	21403fcc 	andi	r5,r4,255
8110bf5c:	01035a34 	movhi	r4,3432
8110bf60:	21348c04 	addi	r4,r4,-11728
8110bf64:	2909383a 	mul	r4,r5,r4
8110bf68:	200b883a 	mov	r5,r4
8110bf6c:	e13fff17 	ldw	r4,-4(fp)
8110bf70:	21400115 	stw	r5,4(r4)

    /* LUT Addrs */
    pxNfeeL->xMemMap.ulLUTAddr = LUT_INITIAL_ADDR + pxNfeeL->xMemMap.ulOffsetRoot;
8110bf74:	e13fff17 	ldw	r4,-4(fp)
8110bf78:	21400117 	ldw	r5,4(r4)
8110bf7c:	01033234 	movhi	r4,3272
8110bf80:	21348c04 	addi	r4,r4,-11728
8110bf84:	290b883a 	add	r5,r5,r4
8110bf88:	e13fff17 	ldw	r4,-4(fp)
8110bf8c:	21400315 	stw	r5,12(r4)

    /* (HEIGHT + usiOLN)*(usiSPrescanN + usiSOverscanN + usiHalfWidth) */
    ulTotalSizeL =  ( pxNfeeL->xCcdInfo.usiHeight + pxNfeeL->xCcdInfo.usiOLN ) *
8110bf90:	e13fff17 	ldw	r4,-4(fp)
8110bf94:	21002a0b 	ldhu	r4,168(r4)
8110bf98:	217fffcc 	andi	r5,r4,65535
8110bf9c:	e13fff17 	ldw	r4,-4(fp)
8110bfa0:	2100290b 	ldhu	r4,164(r4)
8110bfa4:	213fffcc 	andi	r4,r4,65535
8110bfa8:	290b883a 	add	r5,r5,r4
                    ( pxNfeeL->xCcdInfo.usiHalfWidth + pxNfeeL->xCcdInfo.usiSOverscanN + pxNfeeL->xCcdInfo.usiSPrescanN );
8110bfac:	e13fff17 	ldw	r4,-4(fp)
8110bfb0:	2100298b 	ldhu	r4,166(r4)
8110bfb4:	21bfffcc 	andi	r6,r4,65535
8110bfb8:	e13fff17 	ldw	r4,-4(fp)
8110bfbc:	2100288b 	ldhu	r4,162(r4)
8110bfc0:	213fffcc 	andi	r4,r4,65535
8110bfc4:	310d883a 	add	r6,r6,r4
8110bfc8:	e13fff17 	ldw	r4,-4(fp)
8110bfcc:	2100280b 	ldhu	r4,160(r4)
8110bfd0:	213fffcc 	andi	r4,r4,65535
8110bfd4:	3109883a 	add	r4,r6,r4

    /* LUT Addrs */
    pxNfeeL->xMemMap.ulLUTAddr = LUT_INITIAL_ADDR + pxNfeeL->xMemMap.ulOffsetRoot;

    /* (HEIGHT + usiOLN)*(usiSPrescanN + usiSOverscanN + usiHalfWidth) */
    ulTotalSizeL =  ( pxNfeeL->xCcdInfo.usiHeight + pxNfeeL->xCcdInfo.usiOLN ) *
8110bfd8:	2909383a 	mul	r4,r5,r4
8110bfdc:	e13ff915 	stw	r4,-28(fp)
                    ( pxNfeeL->xCcdInfo.usiHalfWidth + pxNfeeL->xCcdInfo.usiSOverscanN + pxNfeeL->xCcdInfo.usiSPrescanN );

    /* Total size in Bytes of a half CCD */
    pxNfeeL->xMemMap.xCommon.usiTotalBytes = ulTotalSizeL * BYTES_PER_PIXEL;
8110bfe0:	e13ff917 	ldw	r4,-28(fp)
8110bfe4:	2109883a 	add	r4,r4,r4
8110bfe8:	200b883a 	mov	r5,r4
8110bfec:	e13fff17 	ldw	r4,-4(fp)
8110bff0:	2140048d 	sth	r5,18(r4)

    /* Total of Memory lines (64 bits memory) */
    ulMemLinesL = (unsigned long) pxNfeeL->xMemMap.xCommon.usiTotalBytes / BYTES_PER_MEM_LINE;
8110bff4:	e13fff17 	ldw	r4,-4(fp)
8110bff8:	2100048b 	ldhu	r4,18(r4)
8110bffc:	213fffcc 	andi	r4,r4,65535
8110c000:	2008d0fa 	srli	r4,r4,3
8110c004:	213fffcc 	andi	r4,r4,65535
8110c008:	e13ff515 	stw	r4,-44(fp)
    ulMemLeftBytesL = pxNfeeL->xMemMap.xCommon.usiTotalBytes % BYTES_PER_MEM_LINE;   /* Word memory Alignment check: how much bytes left not align in the last word of the memory */
8110c00c:	e13fff17 	ldw	r4,-4(fp)
8110c010:	2100048b 	ldhu	r4,18(r4)
8110c014:	213fffcc 	andi	r4,r4,65535
8110c018:	210001cc 	andi	r4,r4,7
8110c01c:	e13ffb15 	stw	r4,-20(fp)
    if ( ulMemLeftBytesL > 0 ) {
8110c020:	e13ffb17 	ldw	r4,-20(fp)
8110c024:	20001326 	beq	r4,zero,8110c074 <vUpdateMemMapFEE+0x178>
        ulMemLinesL = ulMemLinesL + 1;
8110c028:	e13ff517 	ldw	r4,-44(fp)
8110c02c:	21000044 	addi	r4,r4,1
8110c030:	e13ff515 	stw	r4,-44(fp)
        pxNfeeL->xMemMap.xCommon.usiTotalBytes = pxNfeeL->xMemMap.xCommon.usiTotalBytes - ulMemLeftBytesL + BYTES_PER_MEM_LINE; /* Add a full line, after will be filled with zero padding */
8110c034:	e13fff17 	ldw	r4,-4(fp)
8110c038:	2100048b 	ldhu	r4,18(r4)
8110c03c:	e17ffb17 	ldw	r5,-20(fp)
8110c040:	2149c83a 	sub	r4,r4,r5
8110c044:	21000204 	addi	r4,r4,8
8110c048:	200b883a 	mov	r5,r4
8110c04c:	e13fff17 	ldw	r4,-4(fp)
8110c050:	2140048d 	sth	r5,18(r4)
        pxNfeeL->xMemMap.xCommon.ucPaddingBytes = BYTES_PER_MEM_LINE - ulMemLeftBytesL;
8110c054:	e13ffb17 	ldw	r4,-20(fp)
8110c058:	200b883a 	mov	r5,r4
8110c05c:	01000204 	movi	r4,8
8110c060:	2149c83a 	sub	r4,r4,r5
8110c064:	200b883a 	mov	r5,r4
8110c068:	e13fff17 	ldw	r4,-4(fp)
8110c06c:	21400505 	stb	r5,20(r4)
8110c070:	00000206 	br	8110c07c <vUpdateMemMapFEE+0x180>
    } else {
        pxNfeeL->xMemMap.xCommon.ucPaddingBytes = 0;
8110c074:	e13fff17 	ldw	r4,-4(fp)
8110c078:	20000505 	stb	zero,20(r4)
    }

    /* At this point we have mapping the pixel in the CCD and calculate the zero padding for the last WORD of the line memory of the half ccd */

    /* For every 16 mem line will be 1 mask mem line */
    ulMaskMemLinesL = (unsigned long) ulMemLinesL / BLOCK_MEM_SIZE;
8110c07c:	e13ff517 	ldw	r4,-44(fp)
8110c080:	2008d13a 	srli	r4,r4,4
8110c084:	e13ff615 	stw	r4,-40(fp)
    ulMemLeftLinesL = ulMemLinesL % BLOCK_MEM_SIZE;
8110c088:	e13ff517 	ldw	r4,-44(fp)
8110c08c:	210003cc 	andi	r4,r4,15
8110c090:	e13ffc15 	stw	r4,-16(fp)
    if ( ulMemLeftLinesL >= 1 ) {
8110c094:	e13ffc17 	ldw	r4,-16(fp)
8110c098:	20000b26 	beq	r4,zero,8110c0c8 <vUpdateMemMapFEE+0x1cc>
        ulMaskMemLinesL = ulMaskMemLinesL + 1;
8110c09c:	e13ff617 	ldw	r4,-40(fp)
8110c0a0:	21000044 	addi	r4,r4,1
8110c0a4:	e13ff615 	stw	r4,-40(fp)
        ulTotalMemLinesL = ( ulMemLinesL - ulMemLeftLinesL + BLOCK_MEM_SIZE ) + ulMaskMemLinesL; /* One extra 16 sized block, will be filled with zero padding the ret os spare lines */
8110c0a8:	e17ff517 	ldw	r5,-44(fp)
8110c0ac:	e13ffc17 	ldw	r4,-16(fp)
8110c0b0:	290bc83a 	sub	r5,r5,r4
8110c0b4:	e13ff617 	ldw	r4,-40(fp)
8110c0b8:	2909883a 	add	r4,r5,r4
8110c0bc:	21000404 	addi	r4,r4,16
8110c0c0:	e13ffa15 	stw	r4,-24(fp)
8110c0c4:	00000406 	br	8110c0d8 <vUpdateMemMapFEE+0x1dc>
    } else {
        ulTotalMemLinesL = ulMemLinesL + ulMaskMemLinesL;
8110c0c8:	e17ff517 	ldw	r5,-44(fp)
8110c0cc:	e13ff617 	ldw	r4,-40(fp)
8110c0d0:	2909883a 	add	r4,r5,r4
8110c0d4:	e13ffa15 	stw	r4,-24(fp)
    }

    /* Calculating how is the final mask with zero padding */
    if ( ulMemLeftBytesL >= 1 ) {
8110c0d8:	e13ffb17 	ldw	r4,-20(fp)
8110c0dc:	20000926 	beq	r4,zero,8110c104 <vUpdateMemMapFEE+0x208>
        ucPixelsInLastBlockL = (unsigned char) (( ulMemLeftLinesL * PIXEL_PER_MEM_LINE ) + (unsigned int) ( ulMemLeftBytesL / BYTES_PER_PIXEL ));
8110c0e0:	e13ffc17 	ldw	r4,-16(fp)
8110c0e4:	2109883a 	add	r4,r4,r4
8110c0e8:	2109883a 	add	r4,r4,r4
8110c0ec:	200b883a 	mov	r5,r4
8110c0f0:	e13ffb17 	ldw	r4,-20(fp)
8110c0f4:	2008d07a 	srli	r4,r4,1
8110c0f8:	2909883a 	add	r4,r5,r4
8110c0fc:	e13ff705 	stb	r4,-36(fp)
8110c100:	00000406 	br	8110c114 <vUpdateMemMapFEE+0x218>
    } else {
        ucPixelsInLastBlockL = (unsigned char) ( ulMemLeftLinesL * PIXEL_PER_MEM_LINE );
8110c104:	e13ffc17 	ldw	r4,-16(fp)
8110c108:	2109883a 	add	r4,r4,r4
8110c10c:	2109883a 	add	r4,r4,r4
8110c110:	e13ff705 	stb	r4,-36(fp)
    }

    /* 16 * 4 = 64 - (number of pixels in the last block)) */
    ucShiftsL = ( BLOCK_MEM_SIZE * PIXEL_PER_MEM_LINE ) - ucPixelsInLastBlockL;
8110c114:	e13ff703 	ldbu	r4,-36(fp)
8110c118:	01401004 	movi	r5,64
8110c11c:	2909c83a 	sub	r4,r5,r4
8110c120:	e13ffd05 	stb	r4,-12(fp)

    /* WARNING: Verify the memory alocation (endianess) */
    pxNfeeL->xMemMap.xCommon.ucPaddingMask.ullWord = (unsigned long long)(0xFFFFFFFFFFFFFFFF >> ucShiftsL);
8110c124:	e13ffd03 	ldbu	r4,-12(fp)
8110c128:	217ff804 	addi	r5,r4,-32
8110c12c:	28000416 	blt	r5,zero,8110c140 <vUpdateMemMapFEE+0x244>
8110c130:	013fffc4 	movi	r4,-1
8110c134:	2144d83a 	srl	r2,r4,r5
8110c138:	0007883a 	mov	r3,zero
8110c13c:	00000a06 	br	8110c168 <vUpdateMemMapFEE+0x26c>
8110c140:	017fffc4 	movi	r5,-1
8110c144:	280c907a 	slli	r6,r5,1
8110c148:	014007c4 	movi	r5,31
8110c14c:	290bc83a 	sub	r5,r5,r4
8110c150:	314a983a 	sll	r5,r6,r5
8110c154:	01bfffc4 	movi	r6,-1
8110c158:	3104d83a 	srl	r2,r6,r4
8110c15c:	2884b03a 	or	r2,r5,r2
8110c160:	017fffc4 	movi	r5,-1
8110c164:	2906d83a 	srl	r3,r5,r4
8110c168:	e13fff17 	ldw	r4,-4(fp)
8110c16c:	20800615 	stw	r2,24(r4)
8110c170:	20c00715 	stw	r3,28(r4)

    /* Number of block is te same as the number of line masks in the memory */
    pxNfeeL->xMemMap.xCommon.usiNTotalBlocks = ulMaskMemLinesL;
8110c174:	e0bff617 	ldw	r2,-40(fp)
8110c178:	1007883a 	mov	r3,r2
8110c17c:	e0bfff17 	ldw	r2,-4(fp)
8110c180:	10c0040d 	sth	r3,16(r2)

    /* Set the addr for every CCD of the FEE, left and right sides */
    ulLastOffset = pxNfeeL->xMemMap.ulOffsetRoot + RESERVED_FEE_X + RESERVED_HALF_CCD_X;
8110c184:	e0bfff17 	ldw	r2,-4(fp)
8110c188:	10c00117 	ldw	r3,4(r2)
8110c18c:	008004b4 	movhi	r2,18
8110c190:	10a40004 	addi	r2,r2,-28672
8110c194:	1885883a 	add	r2,r3,r2
8110c198:	e0bff815 	stw	r2,-32(fp)
    ulStepHalfCCD = RESERVED_HALF_CCD_X + pxNfeeL->xMemMap.xCommon.usiTotalBytes;
8110c19c:	e0bfff17 	ldw	r2,-4(fp)
8110c1a0:	1080048b 	ldhu	r2,18(r2)
8110c1a4:	10ffffcc 	andi	r3,r2,65535
8110c1a8:	008000b4 	movhi	r2,2
8110c1ac:	10a40004 	addi	r2,r2,-28672
8110c1b0:	1885883a 	add	r2,r3,r2
8110c1b4:	e0bffe15 	stw	r2,-8(fp)
    for ( ucIL = 0; ucIL < 4; ucIL++ ) {
8110c1b8:	e03ff745 	stb	zero,-35(fp)
8110c1bc:	00001906 	br	8110c224 <vUpdateMemMapFEE+0x328>
        pxNfeeL->xMemMap.xCcd[ ucIL ].xLeft.ulOffsetAddr = ulLastOffset;
8110c1c0:	e0bff743 	ldbu	r2,-35(fp)
8110c1c4:	e0ffff17 	ldw	r3,-4(fp)
8110c1c8:	10800624 	muli	r2,r2,24
8110c1cc:	1885883a 	add	r2,r3,r2
8110c1d0:	10800804 	addi	r2,r2,32
8110c1d4:	e0fff817 	ldw	r3,-32(fp)
8110c1d8:	10c00015 	stw	r3,0(r2)
        ulLastOffset = ulLastOffset + ulStepHalfCCD;
8110c1dc:	e0fff817 	ldw	r3,-32(fp)
8110c1e0:	e0bffe17 	ldw	r2,-8(fp)
8110c1e4:	1885883a 	add	r2,r3,r2
8110c1e8:	e0bff815 	stw	r2,-32(fp)
        pxNfeeL->xMemMap.xCcd[ ucIL ].xRight.ulOffsetAddr = ulLastOffset; 
8110c1ec:	e0bff743 	ldbu	r2,-35(fp)
8110c1f0:	e0ffff17 	ldw	r3,-4(fp)
8110c1f4:	10800624 	muli	r2,r2,24
8110c1f8:	1885883a 	add	r2,r3,r2
8110c1fc:	10800b04 	addi	r2,r2,44
8110c200:	e0fff817 	ldw	r3,-32(fp)
8110c204:	10c00015 	stw	r3,0(r2)
        ulLastOffset = ulLastOffset + ulStepHalfCCD;
8110c208:	e0fff817 	ldw	r3,-32(fp)
8110c20c:	e0bffe17 	ldw	r2,-8(fp)
8110c210:	1885883a 	add	r2,r3,r2
8110c214:	e0bff815 	stw	r2,-32(fp)
    pxNfeeL->xMemMap.xCommon.usiNTotalBlocks = ulMaskMemLinesL;

    /* Set the addr for every CCD of the FEE, left and right sides */
    ulLastOffset = pxNfeeL->xMemMap.ulOffsetRoot + RESERVED_FEE_X + RESERVED_HALF_CCD_X;
    ulStepHalfCCD = RESERVED_HALF_CCD_X + pxNfeeL->xMemMap.xCommon.usiTotalBytes;
    for ( ucIL = 0; ucIL < 4; ucIL++ ) {
8110c218:	e0bff743 	ldbu	r2,-35(fp)
8110c21c:	10800044 	addi	r2,r2,1
8110c220:	e0bff745 	stb	r2,-35(fp)
8110c224:	e0bff743 	ldbu	r2,-35(fp)
8110c228:	10800130 	cmpltui	r2,r2,4
8110c22c:	103fe41e 	bne	r2,zero,8110c1c0 <__reset+0xfb0ec1c0>
        pxNfeeL->xMemMap.xCcd[ ucIL ].xLeft.ulOffsetAddr = ulLastOffset;
        ulLastOffset = ulLastOffset + ulStepHalfCCD;
        pxNfeeL->xMemMap.xCcd[ ucIL ].xRight.ulOffsetAddr = ulLastOffset; 
        ulLastOffset = ulLastOffset + ulStepHalfCCD;
    }
}
8110c230:	0001883a 	nop
8110c234:	e037883a 	mov	sp,fp
8110c238:	df000017 	ldw	fp,0(sp)
8110c23c:	dec00104 	addi	sp,sp,4
8110c240:	f800283a 	ret

8110c244 <vFeeSpwRMAPLoadDefault>:

/* Load the default configuration of the SPW/RMAP */
void vFeeSpwRMAPLoadDefault( TNFee *pxNfeeL ) {
8110c244:	defffe04 	addi	sp,sp,-8
8110c248:	de00012e 	bgeu	sp,et,8110c250 <vFeeSpwRMAPLoadDefault+0xc>
8110c24c:	003b68fa 	trap	3
8110c250:	df000115 	stw	fp,4(sp)
8110c254:	df000104 	addi	fp,sp,4
8110c258:	e13fff15 	stw	r4,-4(fp)
    //bGetSpwRmapSDCard();
    //todo: For now is hardcoded
    //todo: Verificar qual a estrutura usar para as configurações
}
8110c25c:	0001883a 	nop
8110c260:	e037883a 	mov	sp,fp
8110c264:	df000017 	ldw	fp,0(sp)
8110c268:	dec00104 	addi	sp,sp,4
8110c26c:	f800283a 	ret

8110c270 <vFeeSpwRMAPChangeConfig>:

/* Only in NFEE_CONFIG */
/* Change the active configuration of the SPW/RMAP */
void vFeeSpwRMAPChangeConfig( TNFee *pxNfeeL ) {
8110c270:	defffe04 	addi	sp,sp,-8
8110c274:	de00012e 	bgeu	sp,et,8110c27c <vFeeSpwRMAPChangeConfig+0xc>
8110c278:	003b68fa 	trap	3
8110c27c:	df000115 	stw	fp,4(sp)
8110c280:	df000104 	addi	fp,sp,4
8110c284:	e13fff15 	stw	r4,-4(fp)
    //todo: Verificar qual a estrutura usar para as configurações
}
8110c288:	0001883a 	nop
8110c28c:	e037883a 	mov	sp,fp
8110c290:	df000017 	ldw	fp,0(sp)
8110c294:	dec00104 	addi	sp,sp,4
8110c298:	f800283a 	ret

8110c29c <vFeeSpwRMAPChangeDefault>:

/* Only in NFEE_CONFIG */
/* Change the default configuration of the SPW/RMAP */
void vFeeSpwRMAPChangeDefault( TNFee *pxNfeeL ) {
8110c29c:	defffe04 	addi	sp,sp,-8
8110c2a0:	de00012e 	bgeu	sp,et,8110c2a8 <vFeeSpwRMAPChangeDefault+0xc>
8110c2a4:	003b68fa 	trap	3
8110c2a8:	df000115 	stw	fp,4(sp)
8110c2ac:	df000104 	addi	fp,sp,4
8110c2b0:	e13fff15 	stw	r4,-4(fp)
    //bSaveSpwRmapSDCard();
    //todo: Verificar qual a estrutura usar para as configurações, enviar o numero do FEE tbm
}
8110c2b4:	0001883a 	nop
8110c2b8:	e037883a 	mov	sp,fp
8110c2bc:	df000017 	ldw	fp,0(sp)
8110c2c0:	dec00104 	addi	sp,sp,4
8110c2c4:	f800283a 	ret

8110c2c8 <cFeeSpwChannelEnable>:

/* Any mode */
/* Enable SPW channel for the FEE */
void cFeeSpwChannelEnable( TNFee *pxNfeeL ) {
8110c2c8:	defffe04 	addi	sp,sp,-8
8110c2cc:	de00012e 	bgeu	sp,et,8110c2d4 <cFeeSpwChannelEnable+0xc>
8110c2d0:	003b68fa 	trap	3
8110c2d4:	df000115 	stw	fp,4(sp)
8110c2d8:	df000104 	addi	fp,sp,4
8110c2dc:	e13fff15 	stw	r4,-4(fp)
    //todo: Verificar com o França
}
8110c2e0:	0001883a 	nop
8110c2e4:	e037883a 	mov	sp,fp
8110c2e8:	df000017 	ldw	fp,0(sp)
8110c2ec:	dec00104 	addi	sp,sp,4
8110c2f0:	f800283a 	ret

8110c2f4 <cFeeSpwChannelDisable>:

/* Any mode */
/* Disable SPW channel for the FEE */
void cFeeSpwChannelDisable( TNFee *pxNfeeL ) {
8110c2f4:	defffe04 	addi	sp,sp,-8
8110c2f8:	de00012e 	bgeu	sp,et,8110c300 <cFeeSpwChannelDisable+0xc>
8110c2fc:	003b68fa 	trap	3
8110c300:	df000115 	stw	fp,4(sp)
8110c304:	df000104 	addi	fp,sp,4
8110c308:	e13fff15 	stw	r4,-4(fp)
    //todo: Verificar com o França
}
8110c30c:	0001883a 	nop
8110c310:	e037883a 	mov	sp,fp
8110c314:	df000017 	ldw	fp,0(sp)
8110c318:	dec00104 	addi	sp,sp,4
8110c31c:	f800283a 	ret

8110c320 <cFeeRMAPDump>:

/* Any mode */
/* Dump and send using PUS the RMAP Configuration areas [NFEESIM-UR-699] */
void cFeeRMAPDump( TNFee *pxNfeeL ) {
8110c320:	defffe04 	addi	sp,sp,-8
8110c324:	de00012e 	bgeu	sp,et,8110c32c <cFeeRMAPDump+0xc>
8110c328:	003b68fa 	trap	3
8110c32c:	df000115 	stw	fp,4(sp)
8110c330:	df000104 	addi	fp,sp,4
8110c334:	e13fff15 	stw	r4,-4(fp)

    //todo: ler as areas de memoria do RMAP e enviar via ethernet

}
8110c338:	0001883a 	nop
8110c33c:	e037883a 	mov	sp,fp
8110c340:	df000017 	ldw	fp,0(sp)
8110c344:	dec00104 	addi	sp,sp,4
8110c348:	f800283a 	ret

8110c34c <cFeeRMAPEchoingEnable>:

/* Any mode */
/* Allow the user to activate the echo mode for RMAP [NFEESIM-UR-588]  */
void cFeeRMAPEchoingEnable( TNFee *pxNfeeL ) {
8110c34c:	defffe04 	addi	sp,sp,-8
8110c350:	de00012e 	bgeu	sp,et,8110c358 <cFeeRMAPEchoingEnable+0xc>
8110c354:	003b68fa 	trap	3
8110c358:	df000115 	stw	fp,4(sp)
8110c35c:	df000104 	addi	fp,sp,4
8110c360:	e13fff15 	stw	r4,-4(fp)
    pxNfeeL->xControl.bEchoing = TRUE;
8110c364:	e0bfff17 	ldw	r2,-4(fp)
8110c368:	00c00044 	movi	r3,1
8110c36c:	10c02315 	stw	r3,140(r2)
}
8110c370:	0001883a 	nop
8110c374:	e037883a 	mov	sp,fp
8110c378:	df000017 	ldw	fp,0(sp)
8110c37c:	dec00104 	addi	sp,sp,4
8110c380:	f800283a 	ret

8110c384 <cFeeRMAPEchoingDisable>:

/* Any mode */
/* Allow the user to disable the echo mode for RMAP [NFEESIM-UR-589]  */
void cFeeRMAPEchoingDisable( TNFee *pxNfeeL ) {
8110c384:	defffe04 	addi	sp,sp,-8
8110c388:	de00012e 	bgeu	sp,et,8110c390 <cFeeRMAPEchoingDisable+0xc>
8110c38c:	003b68fa 	trap	3
8110c390:	df000115 	stw	fp,4(sp)
8110c394:	df000104 	addi	fp,sp,4
8110c398:	e13fff15 	stw	r4,-4(fp)
    pxNfeeL->xControl.bEchoing = FALSE;
8110c39c:	e0bfff17 	ldw	r2,-4(fp)
8110c3a0:	10002315 	stw	zero,140(r2)
}
8110c3a4:	0001883a 	nop
8110c3a8:	e037883a 	mov	sp,fp
8110c3ac:	df000017 	ldw	fp,0(sp)
8110c3b0:	dec00104 	addi	sp,sp,4
8110c3b4:	f800283a 	ret

8110c3b8 <cFeeRMAPLogEnable>:

/* Any mode */
/* Allow the user to activate the log of RMAP [NFEESIM-UR-588]  */
void cFeeRMAPLogEnable( TNFee *pxNfeeL ) {
8110c3b8:	defffe04 	addi	sp,sp,-8
8110c3bc:	de00012e 	bgeu	sp,et,8110c3c4 <cFeeRMAPLogEnable+0xc>
8110c3c0:	003b68fa 	trap	3
8110c3c4:	df000115 	stw	fp,4(sp)
8110c3c8:	df000104 	addi	fp,sp,4
8110c3cc:	e13fff15 	stw	r4,-4(fp)
    pxNfeeL->xControl.bLogging = TRUE;
8110c3d0:	e0bfff17 	ldw	r2,-4(fp)
8110c3d4:	00c00044 	movi	r3,1
8110c3d8:	10c02215 	stw	r3,136(r2)
}
8110c3dc:	0001883a 	nop
8110c3e0:	e037883a 	mov	sp,fp
8110c3e4:	df000017 	ldw	fp,0(sp)
8110c3e8:	dec00104 	addi	sp,sp,4
8110c3ec:	f800283a 	ret

8110c3f0 <cFeeRMAPLogDisable>:

/* Any mode */
/* Allow the user to disable the log of RMAP [NFEESIM-UR-589]  */
void cFeeRMAPLogDisable( TNFee *pxNfeeL ) {
8110c3f0:	defffe04 	addi	sp,sp,-8
8110c3f4:	de00012e 	bgeu	sp,et,8110c3fc <cFeeRMAPLogDisable+0xc>
8110c3f8:	003b68fa 	trap	3
8110c3fc:	df000115 	stw	fp,4(sp)
8110c400:	df000104 	addi	fp,sp,4
8110c404:	e13fff15 	stw	r4,-4(fp)
    pxNfeeL->xControl.bLogging = FALSE;
8110c408:	e0bfff17 	ldw	r2,-4(fp)
8110c40c:	10002215 	stw	zero,136(r2)
}
8110c410:	0001883a 	nop
8110c414:	e037883a 	mov	sp,fp
8110c418:	df000017 	ldw	fp,0(sp)
8110c41c:	dec00104 	addi	sp,sp,4
8110c420:	f800283a 	ret

8110c424 <vInitSimucamBasicHW>:

#include "initialization_simucam.h"


void vInitSimucamBasicHW(void)
{
8110c424:	defffe04 	addi	sp,sp,-8
8110c428:	de00012e 	bgeu	sp,et,8110c430 <vInitSimucamBasicHW+0xc>
8110c42c:	003b68fa 	trap	3
8110c430:	dfc00115 	stw	ra,4(sp)
8110c434:	df000015 	stw	fp,0(sp)
8110c438:	d839883a 	mov	fp,sp

	/* Turn Off all LEDs */
	bSetBoardLeds(LEDS_OFF, LEDS_BOARD_ALL_MASK);
8110c43c:	01403fc4 	movi	r5,255
8110c440:	0009883a 	mov	r4,zero
8110c444:	11059780 	call	81105978 <bSetBoardLeds>
	bSetPainelLeds(LEDS_OFF, LEDS_PAINEL_ALL_MASK);
8110c448:	01400834 	movhi	r5,32
8110c44c:	297fffc4 	addi	r5,r5,-1
8110c450:	0009883a 	mov	r4,zero
8110c454:	11059f80 	call	811059f8 <bSetPainelLeds>

	/* Turn On Power LED */
	bSetPainelLeds(LEDS_ON, LEDS_POWER_MASK);
8110c458:	01400074 	movhi	r5,1
8110c45c:	01000044 	movi	r4,1
8110c460:	11059f80 	call	811059f8 <bSetPainelLeds>

	/* Release ETH Reset */
	vEthReleaseReset();
8110c464:	11051bc0 	call	811051bc <vEthReleaseReset>

	/* Configure Seven Segments Display */
	bSSDisplayConfig(SSDP_NORMAL_MODE);
8110c468:	0009883a 	mov	r4,zero
8110c46c:	11066040 	call	81106604 <bSSDisplayConfig>
	bSSDisplayUpdate(0);
8110c470:	0009883a 	mov	r4,zero
8110c474:	11066d40 	call	811066d4 <bSSDisplayUpdate>

}
8110c478:	0001883a 	nop
8110c47c:	e037883a 	mov	sp,fp
8110c480:	dfc00117 	ldw	ra,4(sp)
8110c484:	df000017 	ldw	fp,0(sp)
8110c488:	dec00204 	addi	sp,sp,8
8110c48c:	f800283a 	ret

8110c490 <bLogWriteSDCard>:

#include "log_manager_simucam.h"


bool bLogWriteSDCard ( const char * cDataIn, const char * cFilename )
{
8110c490:	defffd04 	addi	sp,sp,-12
8110c494:	de00012e 	bgeu	sp,et,8110c49c <bLogWriteSDCard+0xc>
8110c498:	003b68fa 	trap	3
8110c49c:	df000215 	stw	fp,8(sp)
8110c4a0:	df000204 	addi	fp,sp,8
8110c4a4:	e13ffe15 	stw	r4,-8(fp)
8110c4a8:	e17fff15 	stw	r5,-4(fp)

	return TRUE;
8110c4ac:	00800044 	movi	r2,1
}
8110c4b0:	e037883a 	mov	sp,fp
8110c4b4:	df000017 	ldw	fp,0(sp)
8110c4b8:	dec00104 	addi	sp,sp,4
8110c4bc:	f800283a 	ret

8110c4c0 <bLogWriteETH>:

bool bLogWriteETH ( const char * cDataIn )
{
8110c4c0:	defffe04 	addi	sp,sp,-8
8110c4c4:	de00012e 	bgeu	sp,et,8110c4cc <bLogWriteETH+0xc>
8110c4c8:	003b68fa 	trap	3
8110c4cc:	df000115 	stw	fp,4(sp)
8110c4d0:	df000104 	addi	fp,sp,4
8110c4d4:	e13fff15 	stw	r4,-4(fp)

	return TRUE;
8110c4d8:	00800044 	movi	r2,1
}
8110c4dc:	e037883a 	mov	sp,fp
8110c4e0:	df000017 	ldw	fp,0(sp)
8110c4e4:	dec00104 	addi	sp,sp,4
8110c4e8:	f800283a 	ret

8110c4ec <vSimucamStructureInit>:
 */


#include "meb.h"

void vSimucamStructureInit( TSimucam_MEB *xMeb ) {
8110c4ec:	defffc04 	addi	sp,sp,-16
8110c4f0:	de00012e 	bgeu	sp,et,8110c4f8 <vSimucamStructureInit+0xc>
8110c4f4:	003b68fa 	trap	3
8110c4f8:	dfc00315 	stw	ra,12(sp)
8110c4fc:	df000215 	stw	fp,8(sp)
8110c500:	df000204 	addi	fp,sp,8
8110c504:	e13fff15 	stw	r4,-4(fp)
    unsigned char ucIL = 0;
8110c508:	e03ffe05 	stb	zero,-8(fp)

    // LoadTypeOfFeeSDCard();
    // todo: Load from SDCard for now is Hardcoded to Normal FEE
    xMeb->eType = sNormalFEE;
8110c50c:	e0bfff17 	ldw	r2,-4(fp)
8110c510:	10000015 	stw	zero,0(r2)
    
    /* Simucam start in the Meb Config Mode */
    xMeb->eMode = sMebConfig;
8110c514:	e0bfff17 	ldw	r2,-4(fp)
8110c518:	10000115 	stw	zero,4(r2)

    /* Load EP */
    vLoadDefaultEPValue( xMeb );
8110c51c:	e13fff17 	ldw	r4,-4(fp)
8110c520:	110c6880 	call	8110c688 <vLoadDefaultEPValue>
    /* Load RT */
    vLoadDefaultRTValue( xMeb );
8110c524:	e13fff17 	ldw	r4,-4(fp)
8110c528:	110c72c0 	call	8110c72c <vLoadDefaultRTValue>
    /* Load SyncSource */
    vLoadDefaultSyncSource( xMeb );
8110c52c:	e13fff17 	ldw	r4,-4(fp)
8110c530:	110c7d40 	call	8110c7d4 <vLoadDefaultSyncSource>
    /* Reset TimeCode */
    vResetTimeCode( xMeb );
8110c534:	e13fff17 	ldw	r4,-4(fp)
8110c538:	110c8b40 	call	8110c8b4 <vResetTimeCode>
    /* Load Default Id for NFEE master */
    vLoadDefaultIdNFEEMaster( xMeb );
8110c53c:	e13fff17 	ldw	r4,-4(fp)
8110c540:	110c98c0 	call	8110c98c <vLoadDefaultIdNFEEMaster>
    /* Load Default Config for Auto Reset Mode */
    vLoadDefaultAutoResetSync( xMeb );
8110c544:	e13fff17 	ldw	r4,-4(fp)
8110c548:	110c8e80 	call	8110c8e8 <vLoadDefaultAutoResetSync>

    // LoadNumberOfNFeesSDCard();
    /* todo: Load from SDCard for now is Hardcoded for 4 instances of NFEE */
    xMeb->ucNofFeesInUse = 2;
8110c54c:	e0bfff17 	ldw	r2,-4(fp)
8110c550:	00c00084 	movi	r3,2
8110c554:	10c00205 	stb	r3,8(r2)

    /* Verify if if a Fast or Normal */
    if ( xMeb->eType == sNormalFEE ) {
8110c558:	e0bfff17 	ldw	r2,-4(fp)
8110c55c:	10800017 	ldw	r2,0(r2)
8110c560:	1000391e 	bne	r2,zero,8110c648 <vSimucamStructureInit+0x15c>
        /* Are Normal Fee instances */
        for ( ucIL = 0; ucIL < N_OF_NFEE; ucIL++ ) {
8110c564:	e03ffe05 	stb	zero,-8(fp)
8110c568:	00003306 	br	8110c638 <vSimucamStructureInit+0x14c>
            if ( ucIL < xMeb->ucNofFeesInUse ) {
8110c56c:	e0bfff17 	ldw	r2,-4(fp)
8110c570:	10800203 	ldbu	r2,8(r2)
8110c574:	10803fcc 	andi	r2,r2,255
8110c578:	e0fffe03 	ldbu	r3,-8(fp)
8110c57c:	18800a2e 	bgeu	r3,r2,8110c5a8 <vSimucamStructureInit+0xbc>
                vNFeeStructureInit( &xMeb->xNfee[ ucIL ], ucIL);
8110c580:	e0bffe03 	ldbu	r2,-8(fp)
8110c584:	10802b24 	muli	r2,r2,172
8110c588:	10800304 	addi	r2,r2,12
8110c58c:	e0ffff17 	ldw	r3,-4(fp)
8110c590:	1885883a 	add	r2,r3,r2
8110c594:	e0fffe03 	ldbu	r3,-8(fp)
8110c598:	180b883a 	mov	r5,r3
8110c59c:	1009883a 	mov	r4,r2
8110c5a0:	110be240 	call	8110be24 <vNFeeStructureInit>
8110c5a4:	00000906 	br	8110c5cc <vSimucamStructureInit+0xe0>
            } else {
                vNFeeNotInUse( &xMeb->xNfee[ ucIL ], ucIL);
8110c5a8:	e0bffe03 	ldbu	r2,-8(fp)
8110c5ac:	10802b24 	muli	r2,r2,172
8110c5b0:	10800304 	addi	r2,r2,12
8110c5b4:	e0ffff17 	ldw	r3,-4(fp)
8110c5b8:	1885883a 	add	r2,r3,r2
8110c5bc:	e0fffe03 	ldbu	r3,-8(fp)
8110c5c0:	180b883a 	mov	r5,r3
8110c5c4:	1009883a 	mov	r4,r2
8110c5c8:	110bdd40 	call	8110bdd4 <vNFeeNotInUse>
            }
            xMeb->pbEnabledNFEEs[ ucIL ] = &xMeb->xNfee[ ucIL ].xControl.bEnabled;
8110c5cc:	e0bffe03 	ldbu	r2,-8(fp)
8110c5d0:	e0fffe03 	ldbu	r3,-8(fp)
8110c5d4:	18c02b24 	muli	r3,r3,172
8110c5d8:	18c02304 	addi	r3,r3,140
8110c5dc:	e13fff17 	ldw	r4,-4(fp)
8110c5e0:	20c7883a 	add	r3,r4,r3
8110c5e4:	e13fff17 	ldw	r4,-4(fp)
8110c5e8:	108042c4 	addi	r2,r2,267
8110c5ec:	1085883a 	add	r2,r2,r2
8110c5f0:	1085883a 	add	r2,r2,r2
8110c5f4:	2085883a 	add	r2,r4,r2
8110c5f8:	10c00015 	stw	r3,0(r2)
            xMeb->pbRunningDmaNFEEs[ ucIL ] = &xMeb->xNfee[ ucIL ].xControl.bUsingDMA;
8110c5fc:	e0bffe03 	ldbu	r2,-8(fp)
8110c600:	e0fffe03 	ldbu	r3,-8(fp)
8110c604:	18c02b24 	muli	r3,r3,172
8110c608:	18c02404 	addi	r3,r3,144
8110c60c:	e13fff17 	ldw	r4,-4(fp)
8110c610:	20c7883a 	add	r3,r4,r3
8110c614:	e13fff17 	ldw	r4,-4(fp)
8110c618:	10804444 	addi	r2,r2,273
8110c61c:	1085883a 	add	r2,r2,r2
8110c620:	1085883a 	add	r2,r2,r2
8110c624:	2085883a 	add	r2,r4,r2
8110c628:	10c00015 	stw	r3,0(r2)
    xMeb->ucNofFeesInUse = 2;

    /* Verify if if a Fast or Normal */
    if ( xMeb->eType == sNormalFEE ) {
        /* Are Normal Fee instances */
        for ( ucIL = 0; ucIL < N_OF_NFEE; ucIL++ ) {
8110c62c:	e0bffe03 	ldbu	r2,-8(fp)
8110c630:	10800044 	addi	r2,r2,1
8110c634:	e0bffe05 	stb	r2,-8(fp)
8110c638:	e0bffe03 	ldbu	r2,-8(fp)
8110c63c:	108001b0 	cmpltui	r2,r2,6
8110c640:	103fca1e 	bne	r2,zero,8110c56c <__reset+0xfb0ec56c>
8110c644:	00000806 	br	8110c668 <vSimucamStructureInit+0x17c>
            xMeb->pbEnabledNFEEs[ ucIL ] = &xMeb->xNfee[ ucIL ].xControl.bEnabled;
            xMeb->pbRunningDmaNFEEs[ ucIL ] = &xMeb->xNfee[ ucIL ].xControl.bUsingDMA;
        }
    } else {
        /* Are Fast Fee instances */
        for ( ucIL = 0; ucIL < N_OF_FastFEE; ucIL++ ) {
8110c648:	e03ffe05 	stb	zero,-8(fp)
8110c64c:	00000306 	br	8110c65c <vSimucamStructureInit+0x170>
8110c650:	e0bffe03 	ldbu	r2,-8(fp)
8110c654:	10800044 	addi	r2,r2,1
8110c658:	e0bffe05 	stb	r2,-8(fp)
8110c65c:	e0bffe03 	ldbu	r2,-8(fp)
8110c660:	108000b0 	cmpltui	r2,r2,2
8110c664:	103ffa1e 	bne	r2,zero,8110c650 <__reset+0xfb0ec650>
            }            
        }
    }

    /* Reseting swap memory mechanism */
    xMeb->ucActualDDR = 0;
8110c668:	e0bfff17 	ldw	r2,-4(fp)
8110c66c:	10010505 	stb	zero,1044(r2)

    /* At this point all structures that manage the aplication of Simucam and FEE are initialized, the tasks could start now */


}
8110c670:	0001883a 	nop
8110c674:	e037883a 	mov	sp,fp
8110c678:	dfc00117 	ldw	ra,4(sp)
8110c67c:	df000017 	ldw	fp,0(sp)
8110c680:	dec00204 	addi	sp,sp,8
8110c684:	f800283a 	ret

8110c688 <vLoadDefaultEPValue>:

/* Only in MEB_CONFIG */
/* Load Default value of EP - Exposure period [NFEESIM-UR-447] */
void vLoadDefaultEPValue( TSimucam_MEB *xMeb ) {
8110c688:	defffe04 	addi	sp,sp,-8
8110c68c:	de00012e 	bgeu	sp,et,8110c694 <vLoadDefaultEPValue+0xc>
8110c690:	003b68fa 	trap	3
8110c694:	df000115 	stw	fp,4(sp)
8110c698:	df000104 	addi	fp,sp,4
8110c69c:	e13fff15 	stw	r4,-4(fp)
    //bGetEPSDCard();
    //todo: For now is hardcoded
    xMeb->ucEP = 25;
8110c6a0:	e0bfff17 	ldw	r2,-4(fp)
8110c6a4:	00d07234 	movhi	r3,16840
8110c6a8:	10c10615 	stw	r3,1048(r2)
}
8110c6ac:	0001883a 	nop
8110c6b0:	e037883a 	mov	sp,fp
8110c6b4:	df000017 	ldw	fp,0(sp)
8110c6b8:	dec00104 	addi	sp,sp,4
8110c6bc:	f800283a 	ret

8110c6c0 <vChangeEPValue>:

/* Only in MEB_CONFIG */
/* Change the active value of EP - Exposure period [NFEESIM-UR-447] */
void vChangeEPValue( TSimucam_MEB *xMeb, float ucValue ) {
8110c6c0:	defffd04 	addi	sp,sp,-12
8110c6c4:	de00012e 	bgeu	sp,et,8110c6cc <vChangeEPValue+0xc>
8110c6c8:	003b68fa 	trap	3
8110c6cc:	df000215 	stw	fp,8(sp)
8110c6d0:	df000204 	addi	fp,sp,8
8110c6d4:	e13ffe15 	stw	r4,-8(fp)
8110c6d8:	e17fff15 	stw	r5,-4(fp)
    xMeb->ucEP = ucValue;
8110c6dc:	e0bffe17 	ldw	r2,-8(fp)
8110c6e0:	e0ffff17 	ldw	r3,-4(fp)
8110c6e4:	10c10615 	stw	r3,1048(r2)
}
8110c6e8:	0001883a 	nop
8110c6ec:	e037883a 	mov	sp,fp
8110c6f0:	df000017 	ldw	fp,0(sp)
8110c6f4:	dec00104 	addi	sp,sp,4
8110c6f8:	f800283a 	ret

8110c6fc <vChangeDefaultEPValue>:

/* Only in MEB_CONFIG */
/* Change the default value of EP - Exposure period [NFEESIM-UR-447] */
void vChangeDefaultEPValue( TSimucam_MEB *xMeb, float ucValue ) {
8110c6fc:	defffd04 	addi	sp,sp,-12
8110c700:	de00012e 	bgeu	sp,et,8110c708 <vChangeDefaultEPValue+0xc>
8110c704:	003b68fa 	trap	3
8110c708:	df000215 	stw	fp,8(sp)
8110c70c:	df000204 	addi	fp,sp,8
8110c710:	e13ffe15 	stw	r4,-8(fp)
8110c714:	e17fff15 	stw	r5,-4(fp)
    //bSaveEPSDCard(ucValue);
}
8110c718:	0001883a 	nop
8110c71c:	e037883a 	mov	sp,fp
8110c720:	df000017 	ldw	fp,0(sp)
8110c724:	dec00104 	addi	sp,sp,4
8110c728:	f800283a 	ret

8110c72c <vLoadDefaultRTValue>:

/* Only in MEB_CONFIG */
/* Load Default value of EP - Exposure period [NFEESIM-UR-447] */
void vLoadDefaultRTValue( TSimucam_MEB *xMeb ) {
8110c72c:	defffe04 	addi	sp,sp,-8
8110c730:	de00012e 	bgeu	sp,et,8110c738 <vLoadDefaultRTValue+0xc>
8110c734:	003b68fa 	trap	3
8110c738:	df000115 	stw	fp,4(sp)
8110c73c:	df000104 	addi	fp,sp,4
8110c740:	e13fff15 	stw	r4,-4(fp)
    //bGetEPSDCard();
    //todo: For now is hardcoded
    xMeb->ucRT = 3.9;
8110c744:	e0ffff17 	ldw	r3,-4(fp)
8110c748:	00901eb4 	movhi	r2,16506
8110c74c:	10a66684 	addi	r2,r2,-26214
8110c750:	18810715 	stw	r2,1052(r3)
}
8110c754:	0001883a 	nop
8110c758:	e037883a 	mov	sp,fp
8110c75c:	df000017 	ldw	fp,0(sp)
8110c760:	dec00104 	addi	sp,sp,4
8110c764:	f800283a 	ret

8110c768 <vChangeRTValue>:

/* Only in MEB_CONFIG */
/* Change the active value of RT - CCD readout time [NFEESIM-UR-447] */
void vChangeRTValue( TSimucam_MEB *xMeb, float ucValue ) {
8110c768:	defffd04 	addi	sp,sp,-12
8110c76c:	de00012e 	bgeu	sp,et,8110c774 <vChangeRTValue+0xc>
8110c770:	003b68fa 	trap	3
8110c774:	df000215 	stw	fp,8(sp)
8110c778:	df000204 	addi	fp,sp,8
8110c77c:	e13ffe15 	stw	r4,-8(fp)
8110c780:	e17fff15 	stw	r5,-4(fp)
    xMeb->ucRT = ucValue;
8110c784:	e0bffe17 	ldw	r2,-8(fp)
8110c788:	e0ffff17 	ldw	r3,-4(fp)
8110c78c:	10c10715 	stw	r3,1052(r2)
}
8110c790:	0001883a 	nop
8110c794:	e037883a 	mov	sp,fp
8110c798:	df000017 	ldw	fp,0(sp)
8110c79c:	dec00104 	addi	sp,sp,4
8110c7a0:	f800283a 	ret

8110c7a4 <vChangeDefaultRTValue>:

/* Only in MEB_CONFIG */
/* Change the default value of RT - CCD readout time [NFEESIM-UR-447] */
void vChangeDefaultRTValue( TSimucam_MEB *xMeb, float ucValue ) {
8110c7a4:	defffd04 	addi	sp,sp,-12
8110c7a8:	de00012e 	bgeu	sp,et,8110c7b0 <vChangeDefaultRTValue+0xc>
8110c7ac:	003b68fa 	trap	3
8110c7b0:	df000215 	stw	fp,8(sp)
8110c7b4:	df000204 	addi	fp,sp,8
8110c7b8:	e13ffe15 	stw	r4,-8(fp)
8110c7bc:	e17fff15 	stw	r5,-4(fp)
    //bSaveRTSDCard(ucValue);
}
8110c7c0:	0001883a 	nop
8110c7c4:	e037883a 	mov	sp,fp
8110c7c8:	df000017 	ldw	fp,0(sp)
8110c7cc:	dec00104 	addi	sp,sp,4
8110c7d0:	f800283a 	ret

8110c7d4 <vLoadDefaultSyncSource>:

/* Only in MEB_CONFIG */
/* Load Default Config Sync - Internal or external */
void vLoadDefaultSyncSource( TSimucam_MEB *xMeb ) {
8110c7d4:	defffe04 	addi	sp,sp,-8
8110c7d8:	de00012e 	bgeu	sp,et,8110c7e0 <vLoadDefaultSyncSource+0xc>
8110c7dc:	003b68fa 	trap	3
8110c7e0:	df000115 	stw	fp,4(sp)
8110c7e4:	df000104 	addi	fp,sp,4
8110c7e8:	e13fff15 	stw	r4,-4(fp)
    //bGetSyncSourceSDCard();
    //todo: For now is hardcoded
    xMeb->eSync = sInternal;
8110c7ec:	e0bfff17 	ldw	r2,-4(fp)
8110c7f0:	10010815 	stw	zero,1056(r2)
}
8110c7f4:	0001883a 	nop
8110c7f8:	e037883a 	mov	sp,fp
8110c7fc:	df000017 	ldw	fp,0(sp)
8110c800:	dec00104 	addi	sp,sp,4
8110c804:	f800283a 	ret

8110c808 <vChangeSyncSource>:

/* Only in MEB_CONFIG */
/* Change the Active Config Sync - Internal or external */
void vChangeSyncSource( TSimucam_MEB *xMeb, tSimucamSync eSource ) {
8110c808:	defffd04 	addi	sp,sp,-12
8110c80c:	de00012e 	bgeu	sp,et,8110c814 <vChangeSyncSource+0xc>
8110c810:	003b68fa 	trap	3
8110c814:	df000215 	stw	fp,8(sp)
8110c818:	df000204 	addi	fp,sp,8
8110c81c:	e13ffe15 	stw	r4,-8(fp)
8110c820:	e17fff15 	stw	r5,-4(fp)
    xMeb->eSync = eSource;
8110c824:	e0bffe17 	ldw	r2,-8(fp)
8110c828:	e0ffff17 	ldw	r3,-4(fp)
8110c82c:	10c10815 	stw	r3,1056(r2)
}
8110c830:	0001883a 	nop
8110c834:	e037883a 	mov	sp,fp
8110c838:	df000017 	ldw	fp,0(sp)
8110c83c:	dec00104 	addi	sp,sp,4
8110c840:	f800283a 	ret

8110c844 <vChangeDefaultSyncSource>:

/* Only in MEB_CONFIG */
/* Change the Default Config Sync - Internal or external */
void vChangeDefaultSyncSource( TSimucam_MEB *xMeb, tSimucamSync eSource ) {
8110c844:	defffd04 	addi	sp,sp,-12
8110c848:	de00012e 	bgeu	sp,et,8110c850 <vChangeDefaultSyncSource+0xc>
8110c84c:	003b68fa 	trap	3
8110c850:	df000215 	stw	fp,8(sp)
8110c854:	df000204 	addi	fp,sp,8
8110c858:	e13ffe15 	stw	r4,-8(fp)
8110c85c:	e17fff15 	stw	r5,-4(fp)
    //bSaveSyncSourceSDCard(eSource);
}
8110c860:	0001883a 	nop
8110c864:	e037883a 	mov	sp,fp
8110c868:	df000017 	ldw	fp,0(sp)
8110c86c:	dec00104 	addi	sp,sp,4
8110c870:	f800283a 	ret

8110c874 <vSetTimeCode>:

/* Any mode */
/* Set the time code of the Simucam */
void vSetTimeCode( TSimucam_MEB *xMeb, unsigned char ucTime ) {
8110c874:	defffd04 	addi	sp,sp,-12
8110c878:	de00012e 	bgeu	sp,et,8110c880 <vSetTimeCode+0xc>
8110c87c:	003b68fa 	trap	3
8110c880:	df000215 	stw	fp,8(sp)
8110c884:	df000204 	addi	fp,sp,8
8110c888:	e13ffe15 	stw	r4,-8(fp)
8110c88c:	2805883a 	mov	r2,r5
8110c890:	e0bfff05 	stb	r2,-4(fp)
    xMeb->ucTimeCode = ucTime;
8110c894:	e0bffe17 	ldw	r2,-8(fp)
8110c898:	e0ffff03 	ldbu	r3,-4(fp)
8110c89c:	10c10905 	stb	r3,1060(r2)
}
8110c8a0:	0001883a 	nop
8110c8a4:	e037883a 	mov	sp,fp
8110c8a8:	df000017 	ldw	fp,0(sp)
8110c8ac:	dec00104 	addi	sp,sp,4
8110c8b0:	f800283a 	ret

8110c8b4 <vResetTimeCode>:

/* Reset the time code of the Simucam */
void vResetTimeCode( TSimucam_MEB *xMeb ) {
8110c8b4:	defffe04 	addi	sp,sp,-8
8110c8b8:	de00012e 	bgeu	sp,et,8110c8c0 <vResetTimeCode+0xc>
8110c8bc:	003b68fa 	trap	3
8110c8c0:	df000115 	stw	fp,4(sp)
8110c8c4:	df000104 	addi	fp,sp,4
8110c8c8:	e13fff15 	stw	r4,-4(fp)
    xMeb->ucTimeCode = 0;
8110c8cc:	e0bfff17 	ldw	r2,-4(fp)
8110c8d0:	10010905 	stb	zero,1060(r2)
}
8110c8d4:	0001883a 	nop
8110c8d8:	e037883a 	mov	sp,fp
8110c8dc:	df000017 	ldw	fp,0(sp)
8110c8e0:	dec00104 	addi	sp,sp,4
8110c8e4:	f800283a 	ret

8110c8e8 <vLoadDefaultAutoResetSync>:

/* Only in MEB_CONFIG */
/* Load Default Config for AutoResetSync */
void vLoadDefaultAutoResetSync( TSimucam_MEB *xMeb ) {
8110c8e8:	defffe04 	addi	sp,sp,-8
8110c8ec:	de00012e 	bgeu	sp,et,8110c8f4 <vLoadDefaultAutoResetSync+0xc>
8110c8f0:	003b68fa 	trap	3
8110c8f4:	df000115 	stw	fp,4(sp)
8110c8f8:	df000104 	addi	fp,sp,4
8110c8fc:	e13fff15 	stw	r4,-4(fp)
    //bGetAutoResetSyncSDCard();
    //todo: For now is hardcoded
    xMeb->bAutoRestSyncMode = TRUE;
8110c900:	e0bfff17 	ldw	r2,-4(fp)
8110c904:	00c00044 	movi	r3,1
8110c908:	10c10a15 	stw	r3,1064(r2)
}
8110c90c:	0001883a 	nop
8110c910:	e037883a 	mov	sp,fp
8110c914:	df000017 	ldw	fp,0(sp)
8110c918:	dec00104 	addi	sp,sp,4
8110c91c:	f800283a 	ret

8110c920 <vChangeAutoResetSync>:

/* Only in MEB_CONFIG */
/* Change the Config for AutoResetSync*/
void vChangeAutoResetSync( TSimucam_MEB *xMeb, bool bAutoReset ) {
8110c920:	defffd04 	addi	sp,sp,-12
8110c924:	de00012e 	bgeu	sp,et,8110c92c <vChangeAutoResetSync+0xc>
8110c928:	003b68fa 	trap	3
8110c92c:	df000215 	stw	fp,8(sp)
8110c930:	df000204 	addi	fp,sp,8
8110c934:	e13ffe15 	stw	r4,-8(fp)
8110c938:	e17fff15 	stw	r5,-4(fp)
    xMeb->bAutoRestSyncMode = bAutoReset;
8110c93c:	e0bffe17 	ldw	r2,-8(fp)
8110c940:	e0ffff17 	ldw	r3,-4(fp)
8110c944:	10c10a15 	stw	r3,1064(r2)
}
8110c948:	0001883a 	nop
8110c94c:	e037883a 	mov	sp,fp
8110c950:	df000017 	ldw	fp,0(sp)
8110c954:	dec00104 	addi	sp,sp,4
8110c958:	f800283a 	ret

8110c95c <vChangeDefaultAutoResetSync>:

/* Only in MEB_CONFIG */
/* Change the Default Config for AutoResetSync */
void vChangeDefaultAutoResetSync( TSimucam_MEB *xMeb, bool bAutoReset ) {
8110c95c:	defffd04 	addi	sp,sp,-12
8110c960:	de00012e 	bgeu	sp,et,8110c968 <vChangeDefaultAutoResetSync+0xc>
8110c964:	003b68fa 	trap	3
8110c968:	df000215 	stw	fp,8(sp)
8110c96c:	df000204 	addi	fp,sp,8
8110c970:	e13ffe15 	stw	r4,-8(fp)
8110c974:	e17fff15 	stw	r5,-4(fp)
    //bSaveAutoResetSyncSDCard(bAutoReset);
}
8110c978:	0001883a 	nop
8110c97c:	e037883a 	mov	sp,fp
8110c980:	df000017 	ldw	fp,0(sp)
8110c984:	dec00104 	addi	sp,sp,4
8110c988:	f800283a 	ret

8110c98c <vLoadDefaultIdNFEEMaster>:

/* Only in MEB_CONFIG */
/* Load Default Config for IdNFEEMaster */
void vLoadDefaultIdNFEEMaster( TSimucam_MEB *xMeb ) {
8110c98c:	defffe04 	addi	sp,sp,-8
8110c990:	de00012e 	bgeu	sp,et,8110c998 <vLoadDefaultIdNFEEMaster+0xc>
8110c994:	003b68fa 	trap	3
8110c998:	df000115 	stw	fp,4(sp)
8110c99c:	df000104 	addi	fp,sp,4
8110c9a0:	e13fff15 	stw	r4,-4(fp)
    //bGetIdNFEEMasterSDCard();
    //todo: For now is hardcoded
    xMeb->ucIdNFEEMaster = 0;
8110c9a4:	e0bfff17 	ldw	r2,-4(fp)
8110c9a8:	10010945 	stb	zero,1061(r2)
}
8110c9ac:	0001883a 	nop
8110c9b0:	e037883a 	mov	sp,fp
8110c9b4:	df000017 	ldw	fp,0(sp)
8110c9b8:	dec00104 	addi	sp,sp,4
8110c9bc:	f800283a 	ret

8110c9c0 <vChangeIdNFEEMaster>:

/* Only in MEB_CONFIG */
/* Change the Config for IdNFEEMaster*/
void vChangeIdNFEEMaster( TSimucam_MEB *xMeb, unsigned char ucIdMaster ) {
8110c9c0:	defffd04 	addi	sp,sp,-12
8110c9c4:	de00012e 	bgeu	sp,et,8110c9cc <vChangeIdNFEEMaster+0xc>
8110c9c8:	003b68fa 	trap	3
8110c9cc:	df000215 	stw	fp,8(sp)
8110c9d0:	df000204 	addi	fp,sp,8
8110c9d4:	e13ffe15 	stw	r4,-8(fp)
8110c9d8:	2805883a 	mov	r2,r5
8110c9dc:	e0bfff05 	stb	r2,-4(fp)
    xMeb->ucIdNFEEMaster = ucIdMaster;
8110c9e0:	e0bffe17 	ldw	r2,-8(fp)
8110c9e4:	e0ffff03 	ldbu	r3,-4(fp)
8110c9e8:	10c10945 	stb	r3,1061(r2)
}
8110c9ec:	0001883a 	nop
8110c9f0:	e037883a 	mov	sp,fp
8110c9f4:	df000017 	ldw	fp,0(sp)
8110c9f8:	dec00104 	addi	sp,sp,4
8110c9fc:	f800283a 	ret

8110ca00 <vChangeDefaultIdNFEEMaster>:

/* Only in MEB_CONFIG */
/* Change the Default Config for IdNFEEMaster */
void vChangeDefaultIdNFEEMaster( TSimucam_MEB *xMeb, unsigned char ucIdMaster ) {
8110ca00:	defffd04 	addi	sp,sp,-12
8110ca04:	de00012e 	bgeu	sp,et,8110ca0c <vChangeDefaultIdNFEEMaster+0xc>
8110ca08:	003b68fa 	trap	3
8110ca0c:	df000215 	stw	fp,8(sp)
8110ca10:	df000204 	addi	fp,sp,8
8110ca14:	e13ffe15 	stw	r4,-8(fp)
8110ca18:	2805883a 	mov	r2,r5
8110ca1c:	e0bfff05 	stb	r2,-4(fp)
    //bSaveIdNFEEMasterSDCard(ucIdMaster);
}
8110ca20:	0001883a 	nop
8110ca24:	e037883a 	mov	sp,fp
8110ca28:	df000017 	ldw	fp,0(sp)
8110ca2c:	dec00104 	addi	sp,sp,4
8110ca30:	f800283a 	ret

8110ca34 <vSyncReset>:

/* Any mode */
/* Synchronization Reset */
void vSyncReset( TSimucam_MEB *xMeb, float ufSynchDelay ) {
8110ca34:	defffc04 	addi	sp,sp,-16
8110ca38:	de00012e 	bgeu	sp,et,8110ca40 <vSyncReset+0xc>
8110ca3c:	003b68fa 	trap	3
8110ca40:	dfc00315 	stw	ra,12(sp)
8110ca44:	df000215 	stw	fp,8(sp)
8110ca48:	df000204 	addi	fp,sp,8
8110ca4c:	e13ffe15 	stw	r4,-8(fp)
8110ca50:	e17fff15 	stw	r5,-4(fp)
    // Stop all transmission

    // Put all NFEE in Stand-by mode, if not in Config mode

    // Reset the time code
    vResetTimeCode(xMeb);
8110ca54:	e13ffe17 	ldw	r4,-8(fp)
8110ca58:	110c8b40 	call	8110c8b4 <vResetTimeCode>

    // Release a synchronization signal

    // Start new cycle

}
8110ca5c:	0001883a 	nop
8110ca60:	e037883a 	mov	sp,fp
8110ca64:	dfc00117 	ldw	ra,4(sp)
8110ca68:	df000017 	ldw	fp,0(sp)
8110ca6c:	dec00204 	addi	sp,sp,8
8110ca70:	f800283a 	ret

8110ca74 <bSDcardIsPresent>:
#include "sdcard_file_manager.h"


TSDHandle xSdHandle;

bool bSDcardIsPresent( void ){
8110ca74:	defffe04 	addi	sp,sp,-8
8110ca78:	de00012e 	bgeu	sp,et,8110ca80 <bSDcardIsPresent+0xc>
8110ca7c:	003b68fa 	trap	3
8110ca80:	dfc00115 	stw	ra,4(sp)
8110ca84:	df000015 	stw	fp,0(sp)
8110ca88:	d839883a 	mov	fp,sp
	return alt_up_sd_card_is_Present();
8110ca8c:	1131c800 	call	81131c80 <alt_up_sd_card_is_Present>
}
8110ca90:	e037883a 	mov	sp,fp
8110ca94:	dfc00117 	ldw	ra,4(sp)
8110ca98:	df000017 	ldw	fp,0(sp)
8110ca9c:	dec00204 	addi	sp,sp,8
8110caa0:	f800283a 	ret

8110caa4 <bSDcardFAT16Check>:

bool bSDcardFAT16Check( void ){
8110caa4:	defffe04 	addi	sp,sp,-8
8110caa8:	de00012e 	bgeu	sp,et,8110cab0 <bSDcardFAT16Check+0xc>
8110caac:	003b68fa 	trap	3
8110cab0:	dfc00115 	stw	ra,4(sp)
8110cab4:	df000015 	stw	fp,0(sp)
8110cab8:	d839883a 	mov	fp,sp
	return alt_up_sd_card_is_FAT16();
8110cabc:	1131d4c0 	call	81131d4c <alt_up_sd_card_is_FAT16>
}
8110cac0:	e037883a 	mov	sp,fp
8110cac4:	dfc00117 	ldw	ra,4(sp)
8110cac8:	df000017 	ldw	fp,0(sp)
8110cacc:	dec00204 	addi	sp,sp,8
8110cad0:	f800283a 	ret

8110cad4 <bInitializeSDCard>:

bool bInitializeSDCard( void ){
8110cad4:	defffd04 	addi	sp,sp,-12
8110cad8:	de00012e 	bgeu	sp,et,8110cae0 <bInitializeSDCard+0xc>
8110cadc:	003b68fa 	trap	3
8110cae0:	dfc00215 	stw	ra,8(sp)
8110cae4:	df000115 	stw	fp,4(sp)
8110cae8:	df000104 	addi	fp,sp,4
	bool bSucess = FALSE;
8110caec:	e03fff15 	stw	zero,-4(fp)
	xSdHandle.deviceHandle = NULL;
8110caf0:	d0206a15 	stw	zero,-32344(gp)

	xSdHandle.deviceHandle = alt_up_sd_card_open_dev(ALTERA_UP_SD_CARD_AVALON_INTERFACE_0_NAME);
8110caf4:	01204534 	movhi	r4,33044
8110caf8:	212cf704 	addi	r4,r4,-19492
8110cafc:	1131bbc0 	call	81131bbc <alt_up_sd_card_open_dev>
8110cb00:	d0a06a15 	stw	r2,-32344(gp)
	if ( xSdHandle.deviceHandle != NULL ) {
8110cb04:	d0a06a17 	ldw	r2,-32344(gp)
8110cb08:	10002226 	beq	r2,zero,8110cb94 <bInitializeSDCard+0xc0>

		bSucess = bSDcardIsPresent();
8110cb0c:	110ca740 	call	8110ca74 <bSDcardIsPresent>
8110cb10:	e0bfff15 	stw	r2,-4(fp)
		if ( bSucess ) {
8110cb14:	e0bfff17 	ldw	r2,-4(fp)
8110cb18:	10001626 	beq	r2,zero,8110cb74 <bInitializeSDCard+0xa0>
			bSucess = bSDcardFAT16Check();
8110cb1c:	110caa40 	call	8110caa4 <bSDcardFAT16Check>
8110cb20:	e0bfff15 	stw	r2,-4(fp)
			if ( bSucess ) {
8110cb24:	e0bfff17 	ldw	r2,-4(fp)
8110cb28:	10000a26 	beq	r2,zero,8110cb54 <bInitializeSDCard+0x80>
				xSdHandle.connected = TRUE;
8110cb2c:	00800044 	movi	r2,1
8110cb30:	d0a06915 	stw	r2,-32348(gp)
				debug(fp, "SD is up.\r\n");
8110cb34:	d0a05a17 	ldw	r2,-32408(gp)
8110cb38:	100f883a 	mov	r7,r2
8110cb3c:	018002c4 	movi	r6,11
8110cb40:	01400044 	movi	r5,1
8110cb44:	01204534 	movhi	r4,33044
8110cb48:	212d0204 	addi	r4,r4,-19448
8110cb4c:	110ec080 	call	8110ec08 <fwrite>
8110cb50:	00001806 	br	8110cbb4 <bInitializeSDCard+0xe0>
			} else {
				/* SD isn't in FAT16 format*/
				debug(fp, "SD Card should be formated in FAT16.\r\n");
8110cb54:	d0a05a17 	ldw	r2,-32408(gp)
8110cb58:	100f883a 	mov	r7,r2
8110cb5c:	01800984 	movi	r6,38
8110cb60:	01400044 	movi	r5,1
8110cb64:	01204534 	movhi	r4,33044
8110cb68:	212d0504 	addi	r4,r4,-19436
8110cb6c:	110ec080 	call	8110ec08 <fwrite>
8110cb70:	00001006 	br	8110cbb4 <bInitializeSDCard+0xe0>
			}
		} else {
			/* There's no SDCard in the slot */
			debug(fp, "There is no SD in the slot.\r\n");
8110cb74:	d0a05a17 	ldw	r2,-32408(gp)
8110cb78:	100f883a 	mov	r7,r2
8110cb7c:	01800744 	movi	r6,29
8110cb80:	01400044 	movi	r5,1
8110cb84:	01204534 	movhi	r4,33044
8110cb88:	212d0f04 	addi	r4,r4,-19396
8110cb8c:	110ec080 	call	8110ec08 <fwrite>
8110cb90:	00000806 	br	8110cbb4 <bInitializeSDCard+0xe0>
		}

	} else {
		/* Unable to open the SDCard device. */
		bSucess = FALSE;
8110cb94:	e03fff15 	stw	zero,-4(fp)
		debug(fp, "Unable to open the SDCard device.\r\n");
8110cb98:	d0a05a17 	ldw	r2,-32408(gp)
8110cb9c:	100f883a 	mov	r7,r2
8110cba0:	018008c4 	movi	r6,35
8110cba4:	01400044 	movi	r5,1
8110cba8:	01204534 	movhi	r4,33044
8110cbac:	212d1704 	addi	r4,r4,-19364
8110cbb0:	110ec080 	call	8110ec08 <fwrite>
	}

	return bSucess;
8110cbb4:	e0bfff17 	ldw	r2,-4(fp)
}
8110cbb8:	e037883a 	mov	sp,fp
8110cbbc:	dfc00117 	ldw	ra,4(sp)
8110cbc0:	df000017 	ldw	fp,0(sp)
8110cbc4:	dec00204 	addi	sp,sp,8
8110cbc8:	f800283a 	ret

8110cbcc <siOpenFile>:
	}
	return (char)readCharacter;
}
*/

short int siOpenFile( char *filename ) {
8110cbcc:	defffd04 	addi	sp,sp,-12
8110cbd0:	de00012e 	bgeu	sp,et,8110cbd8 <siOpenFile+0xc>
8110cbd4:	003b68fa 	trap	3
8110cbd8:	dfc00215 	stw	ra,8(sp)
8110cbdc:	df000115 	stw	fp,4(sp)
8110cbe0:	df000104 	addi	fp,sp,4
8110cbe4:	e13fff15 	stw	r4,-4(fp)
	return alt_up_sd_card_fopen( filename, FALSE );
8110cbe8:	000b883a 	mov	r5,zero
8110cbec:	e13fff17 	ldw	r4,-4(fp)
8110cbf0:	11322580 	call	81132258 <alt_up_sd_card_fopen>
}
8110cbf4:	e037883a 	mov	sp,fp
8110cbf8:	dfc00117 	ldw	ra,4(sp)
8110cbfc:	df000017 	ldw	fp,0(sp)
8110cc00:	dec00204 	addi	sp,sp,8
8110cc04:	f800283a 	ret

8110cc08 <siCloseFile>:

bool siCloseFile( short int file_handle ) {
8110cc08:	defffd04 	addi	sp,sp,-12
8110cc0c:	de00012e 	bgeu	sp,et,8110cc14 <siCloseFile+0xc>
8110cc10:	003b68fa 	trap	3
8110cc14:	dfc00215 	stw	ra,8(sp)
8110cc18:	df000115 	stw	fp,4(sp)
8110cc1c:	df000104 	addi	fp,sp,4
8110cc20:	2005883a 	mov	r2,r4
8110cc24:	e0bfff0d 	sth	r2,-4(fp)
	return alt_up_sd_card_fclose( file_handle );
8110cc28:	e0bfff0f 	ldh	r2,-4(fp)
8110cc2c:	1009883a 	mov	r4,r2
8110cc30:	11330a40 	call	811330a4 <alt_up_sd_card_fclose>
}
8110cc34:	e037883a 	mov	sp,fp
8110cc38:	dfc00117 	ldw	ra,4(sp)
8110cc3c:	df000017 	ldw	fp,0(sp)
8110cc40:	dec00204 	addi	sp,sp,8
8110cc44:	f800283a 	ret

8110cc48 <cGetNextChar>:

char cGetNextChar( short int file_handle ) {
8110cc48:	defffd04 	addi	sp,sp,-12
8110cc4c:	de00012e 	bgeu	sp,et,8110cc54 <cGetNextChar+0xc>
8110cc50:	003b68fa 	trap	3
8110cc54:	dfc00215 	stw	ra,8(sp)
8110cc58:	df000115 	stw	fp,4(sp)
8110cc5c:	df000104 	addi	fp,sp,4
8110cc60:	2005883a 	mov	r2,r4
8110cc64:	e0bfff0d 	sth	r2,-4(fp)
	return (char)alt_up_sd_card_read( file_handle );
8110cc68:	e0bfff0f 	ldh	r2,-4(fp)
8110cc6c:	1009883a 	mov	r4,r2
8110cc70:	11326fc0 	call	811326fc <alt_up_sd_card_read>
}
8110cc74:	e037883a 	mov	sp,fp
8110cc78:	dfc00117 	ldw	ra,4(sp)
8110cc7c:	df000017 	ldw	fp,0(sp)
8110cc80:	dec00204 	addi	sp,sp,8
8110cc84:	f800283a 	ret

8110cc88 <bTestSimucamCriticalHW>:


#include "test_module_simucam.h"

bool bTestSimucamCriticalHW( void )
{
8110cc88:	deffff04 	addi	sp,sp,-4
8110cc8c:	de00012e 	bgeu	sp,et,8110cc94 <bTestSimucamCriticalHW+0xc>
8110cc90:	003b68fa 	trap	3
8110cc94:	df000015 	stw	fp,0(sp)
8110cc98:	d839883a 	mov	fp,sp
	/*
	 * Verificar com Fran�a quais testes podemos realizar aqui
	 * SDcard para criar logs e pegar defaults
	 */

	return TRUE;
8110cc9c:	00800044 	movi	r2,1
}
8110cca0:	e037883a 	mov	sp,fp
8110cca4:	df000017 	ldw	fp,0(sp)
8110cca8:	dec00104 	addi	sp,sp,4
8110ccac:	f800283a 	ret

8110ccb0 <_reg_write>:
 *
 * @retval 1 : Sucesso 
 *
 */

alt_32 _reg_write(int BASE_ADD, alt_32 REG_ADD, alt_32 REG_Dado) {
8110ccb0:	defffc04 	addi	sp,sp,-16
8110ccb4:	de00012e 	bgeu	sp,et,8110ccbc <_reg_write+0xc>
8110ccb8:	003b68fa 	trap	3
8110ccbc:	df000315 	stw	fp,12(sp)
8110ccc0:	df000304 	addi	fp,sp,12
8110ccc4:	e13ffd15 	stw	r4,-12(fp)
8110ccc8:	e17ffe15 	stw	r5,-8(fp)
8110cccc:	e1bfff15 	stw	r6,-4(fp)

	IOWR_32DIRECT(BASE_ADD, REG_ADD << 2, REG_Dado);
8110ccd0:	e0bffe17 	ldw	r2,-8(fp)
8110ccd4:	1085883a 	add	r2,r2,r2
8110ccd8:	1085883a 	add	r2,r2,r2
8110ccdc:	1007883a 	mov	r3,r2
8110cce0:	e0bffd17 	ldw	r2,-12(fp)
8110cce4:	1885883a 	add	r2,r3,r2
8110cce8:	1007883a 	mov	r3,r2
8110ccec:	e0bfff17 	ldw	r2,-4(fp)
8110ccf0:	18800035 	stwio	r2,0(r3)
	return 1;
8110ccf4:	00800044 	movi	r2,1

}
8110ccf8:	e037883a 	mov	sp,fp
8110ccfc:	df000017 	ldw	fp,0(sp)
8110cd00:	dec00104 	addi	sp,sp,4
8110cd04:	f800283a 	ret

8110cd08 <_reg_read>:
 *
 * @retval 1 : Sucesso 
 *
 */

alt_32 _reg_read(int BASE_ADD, alt_32 REG_ADD, alt_32 *REG_Dado) {
8110cd08:	defffc04 	addi	sp,sp,-16
8110cd0c:	de00012e 	bgeu	sp,et,8110cd14 <_reg_read+0xc>
8110cd10:	003b68fa 	trap	3
8110cd14:	df000315 	stw	fp,12(sp)
8110cd18:	df000304 	addi	fp,sp,12
8110cd1c:	e13ffd15 	stw	r4,-12(fp)
8110cd20:	e17ffe15 	stw	r5,-8(fp)
8110cd24:	e1bfff15 	stw	r6,-4(fp)

	*REG_Dado = IORD_32DIRECT(BASE_ADD, REG_ADD << 2);
8110cd28:	e0bffe17 	ldw	r2,-8(fp)
8110cd2c:	1085883a 	add	r2,r2,r2
8110cd30:	1085883a 	add	r2,r2,r2
8110cd34:	1007883a 	mov	r3,r2
8110cd38:	e0bffd17 	ldw	r2,-12(fp)
8110cd3c:	1885883a 	add	r2,r3,r2
8110cd40:	10c00037 	ldwio	r3,0(r2)
8110cd44:	e0bfff17 	ldw	r2,-4(fp)
8110cd48:	10c00015 	stw	r3,0(r2)
	return 1;
8110cd4c:	00800044 	movi	r2,1

}
8110cd50:	e037883a 	mov	sp,fp
8110cd54:	df000017 	ldw	fp,0(sp)
8110cd58:	dec00104 	addi	sp,sp,4
8110cd5c:	f800283a 	ret

8110cd60 <_print_codec_status>:
 * @param [in] codec_status
 * *
 * @retval 1 : Sucesso
 *
 */
void _print_codec_status(int codec_status) {
8110cd60:	defffa04 	addi	sp,sp,-24
8110cd64:	de00012e 	bgeu	sp,et,8110cd6c <_print_codec_status+0xc>
8110cd68:	003b68fa 	trap	3
8110cd6c:	dfc00515 	stw	ra,20(sp)
8110cd70:	df000415 	stw	fp,16(sp)
8110cd74:	df000404 	addi	fp,sp,16
8110cd78:	e13fff15 	stw	r4,-4(fp)
	int started = (int) ((codec_status >> 6) & 1);
8110cd7c:	e0bfff17 	ldw	r2,-4(fp)
8110cd80:	1005d1ba 	srai	r2,r2,6
8110cd84:	1080004c 	andi	r2,r2,1
8110cd88:	e0bffc15 	stw	r2,-16(fp)
	int connecting = (int) ((codec_status >> 5) & 1);
8110cd8c:	e0bfff17 	ldw	r2,-4(fp)
8110cd90:	1005d17a 	srai	r2,r2,5
8110cd94:	1080004c 	andi	r2,r2,1
8110cd98:	e0bffd15 	stw	r2,-12(fp)
	int running = (int) ((codec_status >> 4) & 1);
8110cd9c:	e0bfff17 	ldw	r2,-4(fp)
8110cda0:	1005d13a 	srai	r2,r2,4
8110cda4:	1080004c 	andi	r2,r2,1
8110cda8:	e0bffe15 	stw	r2,-8(fp)

	printf("-------- link status \n");
8110cdac:	01204534 	movhi	r4,33044
8110cdb0:	212d2004 	addi	r4,r4,-19328
8110cdb4:	110fa600 	call	8110fa60 <puts>
	printf("Link started    : %s \n", (started == 1) ? "S" : "N");
8110cdb8:	e0bffc17 	ldw	r2,-16(fp)
8110cdbc:	10800058 	cmpnei	r2,r2,1
8110cdc0:	1000031e 	bne	r2,zero,8110cdd0 <_print_codec_status+0x70>
8110cdc4:	00a04534 	movhi	r2,33044
8110cdc8:	10ad2604 	addi	r2,r2,-19304
8110cdcc:	00000206 	br	8110cdd8 <_print_codec_status+0x78>
8110cdd0:	00a04534 	movhi	r2,33044
8110cdd4:	10ad2704 	addi	r2,r2,-19300
8110cdd8:	100b883a 	mov	r5,r2
8110cddc:	01204534 	movhi	r4,33044
8110cde0:	212d2804 	addi	r4,r4,-19296
8110cde4:	110f9340 	call	8110f934 <printf>
	printf("Link connecting : %s \n", (connecting == 1) ? "S" : "N");
8110cde8:	e0bffd17 	ldw	r2,-12(fp)
8110cdec:	10800058 	cmpnei	r2,r2,1
8110cdf0:	1000031e 	bne	r2,zero,8110ce00 <_print_codec_status+0xa0>
8110cdf4:	00a04534 	movhi	r2,33044
8110cdf8:	10ad2604 	addi	r2,r2,-19304
8110cdfc:	00000206 	br	8110ce08 <_print_codec_status+0xa8>
8110ce00:	00a04534 	movhi	r2,33044
8110ce04:	10ad2704 	addi	r2,r2,-19300
8110ce08:	100b883a 	mov	r5,r2
8110ce0c:	01204534 	movhi	r4,33044
8110ce10:	212d2e04 	addi	r4,r4,-19272
8110ce14:	110f9340 	call	8110f934 <printf>
	printf("Link running    : %s \n", (running == 1) ? "S" : "N");
8110ce18:	e0bffe17 	ldw	r2,-8(fp)
8110ce1c:	10800058 	cmpnei	r2,r2,1
8110ce20:	1000031e 	bne	r2,zero,8110ce30 <_print_codec_status+0xd0>
8110ce24:	00a04534 	movhi	r2,33044
8110ce28:	10ad2604 	addi	r2,r2,-19304
8110ce2c:	00000206 	br	8110ce38 <_print_codec_status+0xd8>
8110ce30:	00a04534 	movhi	r2,33044
8110ce34:	10ad2704 	addi	r2,r2,-19300
8110ce38:	100b883a 	mov	r5,r2
8110ce3c:	01204534 	movhi	r4,33044
8110ce40:	212d3404 	addi	r4,r4,-19248
8110ce44:	110f9340 	call	8110f934 <printf>
	printf("--------  \n");
8110ce48:	01204534 	movhi	r4,33044
8110ce4c:	212d3a04 	addi	r4,r4,-19224
8110ce50:	110fa600 	call	8110fa60 <puts>
}
8110ce54:	0001883a 	nop
8110ce58:	e037883a 	mov	sp,fp
8110ce5c:	dfc00117 	ldw	ra,4(sp)
8110ce60:	df000017 	ldw	fp,0(sp)
8110ce64:	dec00204 	addi	sp,sp,8
8110ce68:	f800283a 	ret

8110ce6c <_split_codec_status>:
 * *
 * @retval 1 : Sucesso
 *
 */
void _split_codec_status(int codec_status, int *started, int *connecting,
		int *running) {
8110ce6c:	defffb04 	addi	sp,sp,-20
8110ce70:	de00012e 	bgeu	sp,et,8110ce78 <_split_codec_status+0xc>
8110ce74:	003b68fa 	trap	3
8110ce78:	df000415 	stw	fp,16(sp)
8110ce7c:	df000404 	addi	fp,sp,16
8110ce80:	e13ffc15 	stw	r4,-16(fp)
8110ce84:	e17ffd15 	stw	r5,-12(fp)
8110ce88:	e1bffe15 	stw	r6,-8(fp)
8110ce8c:	e1ffff15 	stw	r7,-4(fp)
	*started = (int) ((codec_status >> 6) & 1);
8110ce90:	e0bffc17 	ldw	r2,-16(fp)
8110ce94:	1005d1ba 	srai	r2,r2,6
8110ce98:	10c0004c 	andi	r3,r2,1
8110ce9c:	e0bffd17 	ldw	r2,-12(fp)
8110cea0:	10c00015 	stw	r3,0(r2)
	*connecting = (int) ((codec_status >> 5) & 1);
8110cea4:	e0bffc17 	ldw	r2,-16(fp)
8110cea8:	1005d17a 	srai	r2,r2,5
8110ceac:	10c0004c 	andi	r3,r2,1
8110ceb0:	e0bffe17 	ldw	r2,-8(fp)
8110ceb4:	10c00015 	stw	r3,0(r2)
	*running = (int) ((codec_status >> 4) & 1);
8110ceb8:	e0bffc17 	ldw	r2,-16(fp)
8110cebc:	1005d13a 	srai	r2,r2,4
8110cec0:	10c0004c 	andi	r3,r2,1
8110cec4:	e0bfff17 	ldw	r2,-4(fp)
8110cec8:	10c00015 	stw	r3,0(r2)
}
8110cecc:	0001883a 	nop
8110ced0:	e037883a 	mov	sp,fp
8110ced4:	df000017 	ldw	fp,0(sp)
8110ced8:	dec00104 	addi	sp,sp,4
8110cedc:	f800283a 	ret

8110cee0 <aatoh>:
 * @param [in] &char[n]
 * *
 * @retval INT8U of hecadecimal value
 *
 */
INT8U aatoh(INT8U *buffer) {
8110cee0:	defffc04 	addi	sp,sp,-16
8110cee4:	de00012e 	bgeu	sp,et,8110ceec <aatoh+0xc>
8110cee8:	003b68fa 	trap	3
8110ceec:	df000315 	stw	fp,12(sp)
8110cef0:	df000304 	addi	fp,sp,12
8110cef4:	e13fff15 	stw	r4,-4(fp)
	INT8U* a;
	INT8U v;
	a = buffer;
8110cef8:	e0bfff17 	ldw	r2,-4(fp)
8110cefc:	e0bffd15 	stw	r2,-12(fp)
	v = ((a[0] - (48 + 7 * (a[0] > 57))) << 4)
8110cf00:	e0bffd17 	ldw	r2,-12(fp)
8110cf04:	10c00003 	ldbu	r3,0(r2)
8110cf08:	e0bffd17 	ldw	r2,-12(fp)
8110cf0c:	10800003 	ldbu	r2,0(r2)
8110cf10:	10803fcc 	andi	r2,r2,255
8110cf14:	10800eb0 	cmpltui	r2,r2,58
8110cf18:	1000021e 	bne	r2,zero,8110cf24 <aatoh+0x44>
8110cf1c:	00800dc4 	movi	r2,55
8110cf20:	00000106 	br	8110cf28 <aatoh+0x48>
8110cf24:	00800c04 	movi	r2,48
8110cf28:	1885c83a 	sub	r2,r3,r2
8110cf2c:	1004913a 	slli	r2,r2,4
8110cf30:	1009883a 	mov	r4,r2
			+ (a[1] - (48 + 7 * (a[1] > 57)));
8110cf34:	e0bffd17 	ldw	r2,-12(fp)
8110cf38:	10800044 	addi	r2,r2,1
8110cf3c:	10c00003 	ldbu	r3,0(r2)
8110cf40:	e0bffd17 	ldw	r2,-12(fp)
8110cf44:	10800044 	addi	r2,r2,1
8110cf48:	10800003 	ldbu	r2,0(r2)
 */
INT8U aatoh(INT8U *buffer) {
	INT8U* a;
	INT8U v;
	a = buffer;
	v = ((a[0] - (48 + 7 * (a[0] > 57))) << 4)
8110cf4c:	10803fcc 	andi	r2,r2,255
8110cf50:	10800eb0 	cmpltui	r2,r2,58
8110cf54:	1000021e 	bne	r2,zero,8110cf60 <aatoh+0x80>
8110cf58:	00800dc4 	movi	r2,55
8110cf5c:	00000106 	br	8110cf64 <aatoh+0x84>
8110cf60:	00800c04 	movi	r2,48
8110cf64:	1885c83a 	sub	r2,r3,r2
8110cf68:	2085883a 	add	r2,r4,r2
8110cf6c:	e0bffe05 	stb	r2,-8(fp)
			+ (a[1] - (48 + 7 * (a[1] > 57)));
	return v;
8110cf70:	e0bffe03 	ldbu	r2,-8(fp)
}
8110cf74:	e037883a 	mov	sp,fp
8110cf78:	df000017 	ldw	fp,0(sp)
8110cf7c:	dec00104 	addi	sp,sp,4
8110cf80:	f800283a 	ret

8110cf84 <Verif_Error>:
 * *
 * @retval int
 *
 */

INT8U Verif_Error(INT8U error_code) {
8110cf84:	defffd04 	addi	sp,sp,-12
8110cf88:	de00012e 	bgeu	sp,et,8110cf90 <Verif_Error+0xc>
8110cf8c:	003b68fa 	trap	3
8110cf90:	dfc00215 	stw	ra,8(sp)
8110cf94:	df000115 	stw	fp,4(sp)
8110cf98:	df000104 	addi	fp,sp,4
8110cf9c:	2005883a 	mov	r2,r4
8110cfa0:	e0bfff05 	stb	r2,-4(fp)
	if (!error_code) {
8110cfa4:	e0bfff03 	ldbu	r2,-4(fp)
8110cfa8:	1000051e 	bne	r2,zero,8110cfc0 <Verif_Error+0x3c>
		printf("ERROR\n\r");
8110cfac:	01204534 	movhi	r4,33044
8110cfb0:	212d3d04 	addi	r4,r4,-19212
8110cfb4:	110f9340 	call	8110f934 <printf>
		return 0;
8110cfb8:	0005883a 	mov	r2,zero
8110cfbc:	00000106 	br	8110cfc4 <Verif_Error+0x40>
	} else
		return 1;
8110cfc0:	00800044 	movi	r2,1
}
8110cfc4:	e037883a 	mov	sp,fp
8110cfc8:	dfc00117 	ldw	ra,4(sp)
8110cfcc:	df000017 	ldw	fp,0(sp)
8110cfd0:	dec00204 	addi	sp,sp,8
8110cfd4:	f800283a 	ret

8110cfd8 <toInt>:
 * *
 * @retval int
 *
 */

INT8U toInt(INT8U ascii) {
8110cfd8:	defffe04 	addi	sp,sp,-8
8110cfdc:	de00012e 	bgeu	sp,et,8110cfe4 <toInt+0xc>
8110cfe0:	003b68fa 	trap	3
8110cfe4:	df000115 	stw	fp,4(sp)
8110cfe8:	df000104 	addi	fp,sp,4
8110cfec:	2005883a 	mov	r2,r4
8110cff0:	e0bfff05 	stb	r2,-4(fp)
	return (int) ascii - 48;
8110cff4:	e0bfff03 	ldbu	r2,-4(fp)
8110cff8:	10bff404 	addi	r2,r2,-48
8110cffc:	e037883a 	mov	sp,fp
8110d000:	df000017 	ldw	fp,0(sp)
8110d004:	dec00104 	addi	sp,sp,4
8110d008:	f800283a 	ret

8110d00c <__divsf3>:
8110d00c:	defff504 	addi	sp,sp,-44
8110d010:	200cd5fa 	srli	r6,r4,23
8110d014:	de00012e 	bgeu	sp,et,8110d01c <__divsf3+0x10>
8110d018:	003b68fa 	trap	3
8110d01c:	dcc00415 	stw	r19,16(sp)
8110d020:	2026d7fa 	srli	r19,r4,31
8110d024:	00c02034 	movhi	r3,128
8110d028:	dd800715 	stw	r22,28(sp)
8110d02c:	dd000515 	stw	r20,20(sp)
8110d030:	dc800315 	stw	r18,12(sp)
8110d034:	18ffffc4 	addi	r3,r3,-1
8110d038:	dfc00a15 	stw	ra,40(sp)
8110d03c:	df000915 	stw	fp,36(sp)
8110d040:	ddc00815 	stw	r23,32(sp)
8110d044:	dd400615 	stw	r21,24(sp)
8110d048:	dc400215 	stw	r17,8(sp)
8110d04c:	dc000115 	stw	r16,4(sp)
8110d050:	35003fcc 	andi	r20,r6,255
8110d054:	1924703a 	and	r18,r3,r4
8110d058:	9d803fcc 	andi	r22,r19,255
8110d05c:	a0005226 	beq	r20,zero,8110d1a8 <__divsf3+0x19c>
8110d060:	00803fc4 	movi	r2,255
8110d064:	a0802e26 	beq	r20,r2,8110d120 <__divsf3+0x114>
8110d068:	91002034 	orhi	r4,r18,128
8110d06c:	202490fa 	slli	r18,r4,3
8110d070:	a53fe044 	addi	r20,r20,-127
8110d074:	0021883a 	mov	r16,zero
8110d078:	002f883a 	mov	r23,zero
8110d07c:	280cd5fa 	srli	r6,r5,23
8110d080:	282ad7fa 	srli	r21,r5,31
8110d084:	00c02034 	movhi	r3,128
8110d088:	18ffffc4 	addi	r3,r3,-1
8110d08c:	31803fcc 	andi	r6,r6,255
8110d090:	1962703a 	and	r17,r3,r5
8110d094:	af003fcc 	andi	fp,r21,255
8110d098:	30004a26 	beq	r6,zero,8110d1c4 <__divsf3+0x1b8>
8110d09c:	00803fc4 	movi	r2,255
8110d0a0:	30804526 	beq	r6,r2,8110d1b8 <__divsf3+0x1ac>
8110d0a4:	89402034 	orhi	r5,r17,128
8110d0a8:	282290fa 	slli	r17,r5,3
8110d0ac:	31bfe044 	addi	r6,r6,-127
8110d0b0:	000b883a 	mov	r5,zero
8110d0b4:	2c20b03a 	or	r16,r5,r16
8110d0b8:	802090ba 	slli	r16,r16,2
8110d0bc:	00a04474 	movhi	r2,33041
8110d0c0:	10b43804 	addi	r2,r2,-12064
8110d0c4:	80a1883a 	add	r16,r16,r2
8110d0c8:	81000017 	ldw	r4,0(r16)
8110d0cc:	9d46f03a 	xor	r3,r19,r21
8110d0d0:	180f883a 	mov	r7,r3
8110d0d4:	18803fcc 	andi	r2,r3,255
8110d0d8:	a18dc83a 	sub	r6,r20,r6
8110d0dc:	2000683a 	jmp	r4
8110d0e0:	8110d2c4 	addi	r4,r16,17227
8110d0e4:	8110d148 	cmpgei	r4,r16,17221
8110d0e8:	8110d2b8 	rdprs	r4,r16,17226
8110d0ec:	8110d134 	orhi	r4,r16,17220
8110d0f0:	8110d2b8 	rdprs	r4,r16,17226
8110d0f4:	8110d290 	cmplti	r4,r16,17226
8110d0f8:	8110d2b8 	rdprs	r4,r16,17226
8110d0fc:	8110d134 	orhi	r4,r16,17220
8110d100:	8110d148 	cmpgei	r4,r16,17221
8110d104:	8110d148 	cmpgei	r4,r16,17221
8110d108:	8110d290 	cmplti	r4,r16,17226
8110d10c:	8110d134 	orhi	r4,r16,17220
8110d110:	8110d3a4 	muli	r4,r16,17230
8110d114:	8110d3a4 	muli	r4,r16,17230
8110d118:	8110d3a4 	muli	r4,r16,17230
8110d11c:	8110d358 	cmpnei	r4,r16,17229
8110d120:	9000581e 	bne	r18,zero,8110d284 <__divsf3+0x278>
8110d124:	04000204 	movi	r16,8
8110d128:	05c00084 	movi	r23,2
8110d12c:	003fd306 	br	8110d07c <__reset+0xfb0ed07c>
8110d130:	0023883a 	mov	r17,zero
8110d134:	e02d883a 	mov	r22,fp
8110d138:	282f883a 	mov	r23,r5
8110d13c:	00800084 	movi	r2,2
8110d140:	b8808f1e 	bne	r23,r2,8110d380 <__divsf3+0x374>
8110d144:	b005883a 	mov	r2,r22
8110d148:	11c0004c 	andi	r7,r2,1
8110d14c:	013fffc4 	movi	r4,-1
8110d150:	000d883a 	mov	r6,zero
8110d154:	21003fcc 	andi	r4,r4,255
8110d158:	200895fa 	slli	r4,r4,23
8110d15c:	38803fcc 	andi	r2,r7,255
8110d160:	00c02034 	movhi	r3,128
8110d164:	100497fa 	slli	r2,r2,31
8110d168:	18ffffc4 	addi	r3,r3,-1
8110d16c:	30c6703a 	and	r3,r6,r3
8110d170:	1906b03a 	or	r3,r3,r4
8110d174:	1884b03a 	or	r2,r3,r2
8110d178:	dfc00a17 	ldw	ra,40(sp)
8110d17c:	df000917 	ldw	fp,36(sp)
8110d180:	ddc00817 	ldw	r23,32(sp)
8110d184:	dd800717 	ldw	r22,28(sp)
8110d188:	dd400617 	ldw	r21,24(sp)
8110d18c:	dd000517 	ldw	r20,20(sp)
8110d190:	dcc00417 	ldw	r19,16(sp)
8110d194:	dc800317 	ldw	r18,12(sp)
8110d198:	dc400217 	ldw	r17,8(sp)
8110d19c:	dc000117 	ldw	r16,4(sp)
8110d1a0:	dec00b04 	addi	sp,sp,44
8110d1a4:	f800283a 	ret
8110d1a8:	90002b1e 	bne	r18,zero,8110d258 <__divsf3+0x24c>
8110d1ac:	04000104 	movi	r16,4
8110d1b0:	05c00044 	movi	r23,1
8110d1b4:	003fb106 	br	8110d07c <__reset+0xfb0ed07c>
8110d1b8:	8800251e 	bne	r17,zero,8110d250 <__divsf3+0x244>
8110d1bc:	01400084 	movi	r5,2
8110d1c0:	00000206 	br	8110d1cc <__divsf3+0x1c0>
8110d1c4:	88001a1e 	bne	r17,zero,8110d230 <__divsf3+0x224>
8110d1c8:	01400044 	movi	r5,1
8110d1cc:	8160b03a 	or	r16,r16,r5
8110d1d0:	802090ba 	slli	r16,r16,2
8110d1d4:	00e04474 	movhi	r3,33041
8110d1d8:	18f47c04 	addi	r3,r3,-11792
8110d1dc:	80e1883a 	add	r16,r16,r3
8110d1e0:	80c00017 	ldw	r3,0(r16)
8110d1e4:	9d44f03a 	xor	r2,r19,r21
8110d1e8:	a18dc83a 	sub	r6,r20,r6
8110d1ec:	1800683a 	jmp	r3
8110d1f0:	8110d148 	cmpgei	r4,r16,17221
8110d1f4:	8110d148 	cmpgei	r4,r16,17221
8110d1f8:	8110d394 	ori	r4,r16,17230
8110d1fc:	8110d130 	cmpltui	r4,r16,17220
8110d200:	8110d394 	ori	r4,r16,17230
8110d204:	8110d290 	cmplti	r4,r16,17226
8110d208:	8110d394 	ori	r4,r16,17230
8110d20c:	8110d130 	cmpltui	r4,r16,17220
8110d210:	8110d148 	cmpgei	r4,r16,17221
8110d214:	8110d148 	cmpgei	r4,r16,17221
8110d218:	8110d290 	cmplti	r4,r16,17226
8110d21c:	8110d130 	cmpltui	r4,r16,17220
8110d220:	8110d3a4 	muli	r4,r16,17230
8110d224:	8110d3a4 	muli	r4,r16,17230
8110d228:	8110d3a4 	muli	r4,r16,17230
8110d22c:	8110d3bc 	xorhi	r4,r16,17230
8110d230:	8809883a 	mov	r4,r17
8110d234:	110e45c0 	call	8110e45c <__clzsi2>
8110d238:	10fffec4 	addi	r3,r2,-5
8110d23c:	10801d84 	addi	r2,r2,118
8110d240:	88e2983a 	sll	r17,r17,r3
8110d244:	008dc83a 	sub	r6,zero,r2
8110d248:	000b883a 	mov	r5,zero
8110d24c:	003f9906 	br	8110d0b4 <__reset+0xfb0ed0b4>
8110d250:	014000c4 	movi	r5,3
8110d254:	003f9706 	br	8110d0b4 <__reset+0xfb0ed0b4>
8110d258:	9009883a 	mov	r4,r18
8110d25c:	d9400015 	stw	r5,0(sp)
8110d260:	110e45c0 	call	8110e45c <__clzsi2>
8110d264:	10fffec4 	addi	r3,r2,-5
8110d268:	11801d84 	addi	r6,r2,118
8110d26c:	90e4983a 	sll	r18,r18,r3
8110d270:	01a9c83a 	sub	r20,zero,r6
8110d274:	0021883a 	mov	r16,zero
8110d278:	002f883a 	mov	r23,zero
8110d27c:	d9400017 	ldw	r5,0(sp)
8110d280:	003f7e06 	br	8110d07c <__reset+0xfb0ed07c>
8110d284:	04000304 	movi	r16,12
8110d288:	05c000c4 	movi	r23,3
8110d28c:	003f7b06 	br	8110d07c <__reset+0xfb0ed07c>
8110d290:	01802034 	movhi	r6,128
8110d294:	000f883a 	mov	r7,zero
8110d298:	31bfffc4 	addi	r6,r6,-1
8110d29c:	013fffc4 	movi	r4,-1
8110d2a0:	003fac06 	br	8110d154 <__reset+0xfb0ed154>
8110d2a4:	01400044 	movi	r5,1
8110d2a8:	2909c83a 	sub	r4,r5,r4
8110d2ac:	00c006c4 	movi	r3,27
8110d2b0:	19004b0e 	bge	r3,r4,8110d3e0 <__divsf3+0x3d4>
8110d2b4:	114e703a 	and	r7,r2,r5
8110d2b8:	0009883a 	mov	r4,zero
8110d2bc:	000d883a 	mov	r6,zero
8110d2c0:	003fa406 	br	8110d154 <__reset+0xfb0ed154>
8110d2c4:	9006917a 	slli	r3,r18,5
8110d2c8:	8822917a 	slli	r17,r17,5
8110d2cc:	1c40372e 	bgeu	r3,r17,8110d3ac <__divsf3+0x3a0>
8110d2d0:	31bfffc4 	addi	r6,r6,-1
8110d2d4:	010006c4 	movi	r4,27
8110d2d8:	000b883a 	mov	r5,zero
8110d2dc:	180f883a 	mov	r7,r3
8110d2e0:	294b883a 	add	r5,r5,r5
8110d2e4:	18c7883a 	add	r3,r3,r3
8110d2e8:	38000116 	blt	r7,zero,8110d2f0 <__divsf3+0x2e4>
8110d2ec:	1c400236 	bltu	r3,r17,8110d2f8 <__divsf3+0x2ec>
8110d2f0:	1c47c83a 	sub	r3,r3,r17
8110d2f4:	29400054 	ori	r5,r5,1
8110d2f8:	213fffc4 	addi	r4,r4,-1
8110d2fc:	203ff71e 	bne	r4,zero,8110d2dc <__reset+0xfb0ed2dc>
8110d300:	1806c03a 	cmpne	r3,r3,zero
8110d304:	1962b03a 	or	r17,r3,r5
8110d308:	31001fc4 	addi	r4,r6,127
8110d30c:	013fe50e 	bge	zero,r4,8110d2a4 <__reset+0xfb0ed2a4>
8110d310:	88c001cc 	andi	r3,r17,7
8110d314:	18000426 	beq	r3,zero,8110d328 <__divsf3+0x31c>
8110d318:	88c003cc 	andi	r3,r17,15
8110d31c:	01400104 	movi	r5,4
8110d320:	19400126 	beq	r3,r5,8110d328 <__divsf3+0x31c>
8110d324:	8963883a 	add	r17,r17,r5
8110d328:	88c2002c 	andhi	r3,r17,2048
8110d32c:	18000426 	beq	r3,zero,8110d340 <__divsf3+0x334>
8110d330:	00fe0034 	movhi	r3,63488
8110d334:	18ffffc4 	addi	r3,r3,-1
8110d338:	31002004 	addi	r4,r6,128
8110d33c:	88e2703a 	and	r17,r17,r3
8110d340:	00c03f84 	movi	r3,254
8110d344:	193f8016 	blt	r3,r4,8110d148 <__reset+0xfb0ed148>
8110d348:	880c91ba 	slli	r6,r17,6
8110d34c:	11c0004c 	andi	r7,r2,1
8110d350:	300cd27a 	srli	r6,r6,9
8110d354:	003f7f06 	br	8110d154 <__reset+0xfb0ed154>
8110d358:	9080102c 	andhi	r2,r18,64
8110d35c:	10000226 	beq	r2,zero,8110d368 <__divsf3+0x35c>
8110d360:	8880102c 	andhi	r2,r17,64
8110d364:	10001826 	beq	r2,zero,8110d3c8 <__divsf3+0x3bc>
8110d368:	00802034 	movhi	r2,128
8110d36c:	91801034 	orhi	r6,r18,64
8110d370:	10bfffc4 	addi	r2,r2,-1
8110d374:	980f883a 	mov	r7,r19
8110d378:	308c703a 	and	r6,r6,r2
8110d37c:	003fc706 	br	8110d29c <__reset+0xfb0ed29c>
8110d380:	008000c4 	movi	r2,3
8110d384:	b8802d26 	beq	r23,r2,8110d43c <__divsf3+0x430>
8110d388:	00c00044 	movi	r3,1
8110d38c:	b005883a 	mov	r2,r22
8110d390:	b8ffdd1e 	bne	r23,r3,8110d308 <__reset+0xfb0ed308>
8110d394:	11c0004c 	andi	r7,r2,1
8110d398:	0009883a 	mov	r4,zero
8110d39c:	000d883a 	mov	r6,zero
8110d3a0:	003f6c06 	br	8110d154 <__reset+0xfb0ed154>
8110d3a4:	9023883a 	mov	r17,r18
8110d3a8:	003f6406 	br	8110d13c <__reset+0xfb0ed13c>
8110d3ac:	1c47c83a 	sub	r3,r3,r17
8110d3b0:	01000684 	movi	r4,26
8110d3b4:	01400044 	movi	r5,1
8110d3b8:	003fc806 	br	8110d2dc <__reset+0xfb0ed2dc>
8110d3bc:	9080102c 	andhi	r2,r18,64
8110d3c0:	103fe926 	beq	r2,zero,8110d368 <__reset+0xfb0ed368>
8110d3c4:	0023883a 	mov	r17,zero
8110d3c8:	00802034 	movhi	r2,128
8110d3cc:	89801034 	orhi	r6,r17,64
8110d3d0:	10bfffc4 	addi	r2,r2,-1
8110d3d4:	a80f883a 	mov	r7,r21
8110d3d8:	308c703a 	and	r6,r6,r2
8110d3dc:	003faf06 	br	8110d29c <__reset+0xfb0ed29c>
8110d3e0:	01c00804 	movi	r7,32
8110d3e4:	390fc83a 	sub	r7,r7,r4
8110d3e8:	89ce983a 	sll	r7,r17,r7
8110d3ec:	890ad83a 	srl	r5,r17,r4
8110d3f0:	380ec03a 	cmpne	r7,r7,zero
8110d3f4:	29cab03a 	or	r5,r5,r7
8110d3f8:	28c001cc 	andi	r3,r5,7
8110d3fc:	18000426 	beq	r3,zero,8110d410 <__divsf3+0x404>
8110d400:	28c003cc 	andi	r3,r5,15
8110d404:	01000104 	movi	r4,4
8110d408:	19000126 	beq	r3,r4,8110d410 <__divsf3+0x404>
8110d40c:	290b883a 	add	r5,r5,r4
8110d410:	28c1002c 	andhi	r3,r5,1024
8110d414:	18000426 	beq	r3,zero,8110d428 <__divsf3+0x41c>
8110d418:	11c0004c 	andi	r7,r2,1
8110d41c:	01000044 	movi	r4,1
8110d420:	000d883a 	mov	r6,zero
8110d424:	003f4b06 	br	8110d154 <__reset+0xfb0ed154>
8110d428:	280a91ba 	slli	r5,r5,6
8110d42c:	11c0004c 	andi	r7,r2,1
8110d430:	0009883a 	mov	r4,zero
8110d434:	280cd27a 	srli	r6,r5,9
8110d438:	003f4606 	br	8110d154 <__reset+0xfb0ed154>
8110d43c:	00802034 	movhi	r2,128
8110d440:	89801034 	orhi	r6,r17,64
8110d444:	10bfffc4 	addi	r2,r2,-1
8110d448:	b00f883a 	mov	r7,r22
8110d44c:	308c703a 	and	r6,r6,r2
8110d450:	003f9206 	br	8110d29c <__reset+0xfb0ed29c>

8110d454 <__mulsf3>:
8110d454:	defff504 	addi	sp,sp,-44
8110d458:	de00012e 	bgeu	sp,et,8110d460 <__mulsf3+0xc>
8110d45c:	003b68fa 	trap	3
8110d460:	dc000115 	stw	r16,4(sp)
8110d464:	2020d5fa 	srli	r16,r4,23
8110d468:	dd400615 	stw	r21,24(sp)
8110d46c:	202ad7fa 	srli	r21,r4,31
8110d470:	dc800315 	stw	r18,12(sp)
8110d474:	04802034 	movhi	r18,128
8110d478:	df000915 	stw	fp,36(sp)
8110d47c:	dd000515 	stw	r20,20(sp)
8110d480:	94bfffc4 	addi	r18,r18,-1
8110d484:	dfc00a15 	stw	ra,40(sp)
8110d488:	ddc00815 	stw	r23,32(sp)
8110d48c:	dd800715 	stw	r22,28(sp)
8110d490:	dcc00415 	stw	r19,16(sp)
8110d494:	dc400215 	stw	r17,8(sp)
8110d498:	84003fcc 	andi	r16,r16,255
8110d49c:	9124703a 	and	r18,r18,r4
8110d4a0:	a829883a 	mov	r20,r21
8110d4a4:	af003fcc 	andi	fp,r21,255
8110d4a8:	80005426 	beq	r16,zero,8110d5fc <__mulsf3+0x1a8>
8110d4ac:	00803fc4 	movi	r2,255
8110d4b0:	80802f26 	beq	r16,r2,8110d570 <__mulsf3+0x11c>
8110d4b4:	91002034 	orhi	r4,r18,128
8110d4b8:	202490fa 	slli	r18,r4,3
8110d4bc:	843fe044 	addi	r16,r16,-127
8110d4c0:	0023883a 	mov	r17,zero
8110d4c4:	002f883a 	mov	r23,zero
8110d4c8:	2804d5fa 	srli	r2,r5,23
8110d4cc:	282cd7fa 	srli	r22,r5,31
8110d4d0:	01002034 	movhi	r4,128
8110d4d4:	213fffc4 	addi	r4,r4,-1
8110d4d8:	10803fcc 	andi	r2,r2,255
8110d4dc:	2166703a 	and	r19,r4,r5
8110d4e0:	b1803fcc 	andi	r6,r22,255
8110d4e4:	10004c26 	beq	r2,zero,8110d618 <__mulsf3+0x1c4>
8110d4e8:	00c03fc4 	movi	r3,255
8110d4ec:	10c04726 	beq	r2,r3,8110d60c <__mulsf3+0x1b8>
8110d4f0:	99002034 	orhi	r4,r19,128
8110d4f4:	202690fa 	slli	r19,r4,3
8110d4f8:	10bfe044 	addi	r2,r2,-127
8110d4fc:	0007883a 	mov	r3,zero
8110d500:	80a1883a 	add	r16,r16,r2
8110d504:	010003c4 	movi	r4,15
8110d508:	1c44b03a 	or	r2,r3,r17
8110d50c:	b56af03a 	xor	r21,r22,r21
8110d510:	81c00044 	addi	r7,r16,1
8110d514:	20806b36 	bltu	r4,r2,8110d6c4 <__mulsf3+0x270>
8110d518:	100490ba 	slli	r2,r2,2
8110d51c:	01204474 	movhi	r4,33041
8110d520:	21354c04 	addi	r4,r4,-10960
8110d524:	1105883a 	add	r2,r2,r4
8110d528:	10800017 	ldw	r2,0(r2)
8110d52c:	1000683a 	jmp	r2
8110d530:	8110d6c4 	addi	r4,r16,17243
8110d534:	8110d584 	addi	r4,r16,17238
8110d538:	8110d584 	addi	r4,r16,17238
8110d53c:	8110d580 	call	88110d58 <__reset+0x20f0d58>
8110d540:	8110d6a8 	cmpgeui	r4,r16,17242
8110d544:	8110d6a8 	cmpgeui	r4,r16,17242
8110d548:	8110d694 	ori	r4,r16,17242
8110d54c:	8110d580 	call	88110d58 <__reset+0x20f0d58>
8110d550:	8110d6a8 	cmpgeui	r4,r16,17242
8110d554:	8110d694 	ori	r4,r16,17242
8110d558:	8110d6a8 	cmpgeui	r4,r16,17242
8110d55c:	8110d580 	call	88110d58 <__reset+0x20f0d58>
8110d560:	8110d6b4 	orhi	r4,r16,17242
8110d564:	8110d6b4 	orhi	r4,r16,17242
8110d568:	8110d6b4 	orhi	r4,r16,17242
8110d56c:	8110d790 	cmplti	r4,r16,17246
8110d570:	90003b1e 	bne	r18,zero,8110d660 <__mulsf3+0x20c>
8110d574:	04400204 	movi	r17,8
8110d578:	05c00084 	movi	r23,2
8110d57c:	003fd206 	br	8110d4c8 <__reset+0xfb0ed4c8>
8110d580:	302b883a 	mov	r21,r6
8110d584:	00800084 	movi	r2,2
8110d588:	18802626 	beq	r3,r2,8110d624 <__mulsf3+0x1d0>
8110d58c:	008000c4 	movi	r2,3
8110d590:	1880ab26 	beq	r3,r2,8110d840 <__mulsf3+0x3ec>
8110d594:	00800044 	movi	r2,1
8110d598:	1880a21e 	bne	r3,r2,8110d824 <__mulsf3+0x3d0>
8110d59c:	a829883a 	mov	r20,r21
8110d5a0:	0007883a 	mov	r3,zero
8110d5a4:	0009883a 	mov	r4,zero
8110d5a8:	18803fcc 	andi	r2,r3,255
8110d5ac:	100695fa 	slli	r3,r2,23
8110d5b0:	a0803fcc 	andi	r2,r20,255
8110d5b4:	100a97fa 	slli	r5,r2,31
8110d5b8:	00802034 	movhi	r2,128
8110d5bc:	10bfffc4 	addi	r2,r2,-1
8110d5c0:	2084703a 	and	r2,r4,r2
8110d5c4:	10c4b03a 	or	r2,r2,r3
8110d5c8:	1144b03a 	or	r2,r2,r5
8110d5cc:	dfc00a17 	ldw	ra,40(sp)
8110d5d0:	df000917 	ldw	fp,36(sp)
8110d5d4:	ddc00817 	ldw	r23,32(sp)
8110d5d8:	dd800717 	ldw	r22,28(sp)
8110d5dc:	dd400617 	ldw	r21,24(sp)
8110d5e0:	dd000517 	ldw	r20,20(sp)
8110d5e4:	dcc00417 	ldw	r19,16(sp)
8110d5e8:	dc800317 	ldw	r18,12(sp)
8110d5ec:	dc400217 	ldw	r17,8(sp)
8110d5f0:	dc000117 	ldw	r16,4(sp)
8110d5f4:	dec00b04 	addi	sp,sp,44
8110d5f8:	f800283a 	ret
8110d5fc:	90000d1e 	bne	r18,zero,8110d634 <__mulsf3+0x1e0>
8110d600:	04400104 	movi	r17,4
8110d604:	05c00044 	movi	r23,1
8110d608:	003faf06 	br	8110d4c8 <__reset+0xfb0ed4c8>
8110d60c:	9806c03a 	cmpne	r3,r19,zero
8110d610:	18c00084 	addi	r3,r3,2
8110d614:	003fba06 	br	8110d500 <__reset+0xfb0ed500>
8110d618:	9800141e 	bne	r19,zero,8110d66c <__mulsf3+0x218>
8110d61c:	00c00044 	movi	r3,1
8110d620:	003fb706 	br	8110d500 <__reset+0xfb0ed500>
8110d624:	a829883a 	mov	r20,r21
8110d628:	00ffffc4 	movi	r3,-1
8110d62c:	0009883a 	mov	r4,zero
8110d630:	003fdd06 	br	8110d5a8 <__reset+0xfb0ed5a8>
8110d634:	9009883a 	mov	r4,r18
8110d638:	d9400015 	stw	r5,0(sp)
8110d63c:	110e45c0 	call	8110e45c <__clzsi2>
8110d640:	10fffec4 	addi	r3,r2,-5
8110d644:	10801d84 	addi	r2,r2,118
8110d648:	90e4983a 	sll	r18,r18,r3
8110d64c:	00a1c83a 	sub	r16,zero,r2
8110d650:	0023883a 	mov	r17,zero
8110d654:	002f883a 	mov	r23,zero
8110d658:	d9400017 	ldw	r5,0(sp)
8110d65c:	003f9a06 	br	8110d4c8 <__reset+0xfb0ed4c8>
8110d660:	04400304 	movi	r17,12
8110d664:	05c000c4 	movi	r23,3
8110d668:	003f9706 	br	8110d4c8 <__reset+0xfb0ed4c8>
8110d66c:	9809883a 	mov	r4,r19
8110d670:	d9800015 	stw	r6,0(sp)
8110d674:	110e45c0 	call	8110e45c <__clzsi2>
8110d678:	10fffec4 	addi	r3,r2,-5
8110d67c:	10801d84 	addi	r2,r2,118
8110d680:	98e6983a 	sll	r19,r19,r3
8110d684:	0085c83a 	sub	r2,zero,r2
8110d688:	0007883a 	mov	r3,zero
8110d68c:	d9800017 	ldw	r6,0(sp)
8110d690:	003f9b06 	br	8110d500 <__reset+0xfb0ed500>
8110d694:	01002034 	movhi	r4,128
8110d698:	0029883a 	mov	r20,zero
8110d69c:	213fffc4 	addi	r4,r4,-1
8110d6a0:	00ffffc4 	movi	r3,-1
8110d6a4:	003fc006 	br	8110d5a8 <__reset+0xfb0ed5a8>
8110d6a8:	9027883a 	mov	r19,r18
8110d6ac:	b807883a 	mov	r3,r23
8110d6b0:	003fb406 	br	8110d584 <__reset+0xfb0ed584>
8110d6b4:	9027883a 	mov	r19,r18
8110d6b8:	e02b883a 	mov	r21,fp
8110d6bc:	b807883a 	mov	r3,r23
8110d6c0:	003fb006 	br	8110d584 <__reset+0xfb0ed584>
8110d6c4:	9004d43a 	srli	r2,r18,16
8110d6c8:	9810d43a 	srli	r8,r19,16
8110d6cc:	94bfffcc 	andi	r18,r18,65535
8110d6d0:	993fffcc 	andi	r4,r19,65535
8110d6d4:	910d383a 	mul	r6,r18,r4
8110d6d8:	20a7383a 	mul	r19,r4,r2
8110d6dc:	9225383a 	mul	r18,r18,r8
8110d6e0:	3006d43a 	srli	r3,r6,16
8110d6e4:	1211383a 	mul	r8,r2,r8
8110d6e8:	94e5883a 	add	r18,r18,r19
8110d6ec:	1c87883a 	add	r3,r3,r18
8110d6f0:	1cc0022e 	bgeu	r3,r19,8110d6fc <__mulsf3+0x2a8>
8110d6f4:	00800074 	movhi	r2,1
8110d6f8:	4091883a 	add	r8,r8,r2
8110d6fc:	1804943a 	slli	r2,r3,16
8110d700:	31bfffcc 	andi	r6,r6,65535
8110d704:	1806d43a 	srli	r3,r3,16
8110d708:	1185883a 	add	r2,r2,r6
8110d70c:	102691ba 	slli	r19,r2,6
8110d710:	1a07883a 	add	r3,r3,r8
8110d714:	1004d6ba 	srli	r2,r2,26
8110d718:	180891ba 	slli	r4,r3,6
8110d71c:	9826c03a 	cmpne	r19,r19,zero
8110d720:	9884b03a 	or	r2,r19,r2
8110d724:	1126b03a 	or	r19,r2,r4
8110d728:	9882002c 	andhi	r2,r19,2048
8110d72c:	10000426 	beq	r2,zero,8110d740 <__mulsf3+0x2ec>
8110d730:	9804d07a 	srli	r2,r19,1
8110d734:	9900004c 	andi	r4,r19,1
8110d738:	3821883a 	mov	r16,r7
8110d73c:	1126b03a 	or	r19,r2,r4
8110d740:	80c01fc4 	addi	r3,r16,127
8110d744:	00c0210e 	bge	zero,r3,8110d7cc <__mulsf3+0x378>
8110d748:	988001cc 	andi	r2,r19,7
8110d74c:	10000426 	beq	r2,zero,8110d760 <__mulsf3+0x30c>
8110d750:	988003cc 	andi	r2,r19,15
8110d754:	01000104 	movi	r4,4
8110d758:	11000126 	beq	r2,r4,8110d760 <__mulsf3+0x30c>
8110d75c:	9927883a 	add	r19,r19,r4
8110d760:	9882002c 	andhi	r2,r19,2048
8110d764:	10000426 	beq	r2,zero,8110d778 <__mulsf3+0x324>
8110d768:	00be0034 	movhi	r2,63488
8110d76c:	10bfffc4 	addi	r2,r2,-1
8110d770:	80c02004 	addi	r3,r16,128
8110d774:	98a6703a 	and	r19,r19,r2
8110d778:	00803f84 	movi	r2,254
8110d77c:	10ffa916 	blt	r2,r3,8110d624 <__reset+0xfb0ed624>
8110d780:	980891ba 	slli	r4,r19,6
8110d784:	a829883a 	mov	r20,r21
8110d788:	2008d27a 	srli	r4,r4,9
8110d78c:	003f8606 	br	8110d5a8 <__reset+0xfb0ed5a8>
8110d790:	9080102c 	andhi	r2,r18,64
8110d794:	10000826 	beq	r2,zero,8110d7b8 <__mulsf3+0x364>
8110d798:	9880102c 	andhi	r2,r19,64
8110d79c:	1000061e 	bne	r2,zero,8110d7b8 <__mulsf3+0x364>
8110d7a0:	00802034 	movhi	r2,128
8110d7a4:	99001034 	orhi	r4,r19,64
8110d7a8:	10bfffc4 	addi	r2,r2,-1
8110d7ac:	b029883a 	mov	r20,r22
8110d7b0:	2088703a 	and	r4,r4,r2
8110d7b4:	003fba06 	br	8110d6a0 <__reset+0xfb0ed6a0>
8110d7b8:	00802034 	movhi	r2,128
8110d7bc:	91001034 	orhi	r4,r18,64
8110d7c0:	10bfffc4 	addi	r2,r2,-1
8110d7c4:	2088703a 	and	r4,r4,r2
8110d7c8:	003fb506 	br	8110d6a0 <__reset+0xfb0ed6a0>
8110d7cc:	00800044 	movi	r2,1
8110d7d0:	10c7c83a 	sub	r3,r2,r3
8110d7d4:	008006c4 	movi	r2,27
8110d7d8:	10ff7016 	blt	r2,r3,8110d59c <__reset+0xfb0ed59c>
8110d7dc:	00800804 	movi	r2,32
8110d7e0:	10c5c83a 	sub	r2,r2,r3
8110d7e4:	9884983a 	sll	r2,r19,r2
8110d7e8:	98c6d83a 	srl	r3,r19,r3
8110d7ec:	1004c03a 	cmpne	r2,r2,zero
8110d7f0:	1884b03a 	or	r2,r3,r2
8110d7f4:	10c001cc 	andi	r3,r2,7
8110d7f8:	18000426 	beq	r3,zero,8110d80c <__mulsf3+0x3b8>
8110d7fc:	10c003cc 	andi	r3,r2,15
8110d800:	01000104 	movi	r4,4
8110d804:	19000126 	beq	r3,r4,8110d80c <__mulsf3+0x3b8>
8110d808:	1105883a 	add	r2,r2,r4
8110d80c:	10c1002c 	andhi	r3,r2,1024
8110d810:	18000626 	beq	r3,zero,8110d82c <__mulsf3+0x3d8>
8110d814:	a829883a 	mov	r20,r21
8110d818:	00c00044 	movi	r3,1
8110d81c:	0009883a 	mov	r4,zero
8110d820:	003f6106 	br	8110d5a8 <__reset+0xfb0ed5a8>
8110d824:	3821883a 	mov	r16,r7
8110d828:	003fc506 	br	8110d740 <__reset+0xfb0ed740>
8110d82c:	100491ba 	slli	r2,r2,6
8110d830:	a829883a 	mov	r20,r21
8110d834:	0007883a 	mov	r3,zero
8110d838:	1008d27a 	srli	r4,r2,9
8110d83c:	003f5a06 	br	8110d5a8 <__reset+0xfb0ed5a8>
8110d840:	00802034 	movhi	r2,128
8110d844:	99001034 	orhi	r4,r19,64
8110d848:	10bfffc4 	addi	r2,r2,-1
8110d84c:	a829883a 	mov	r20,r21
8110d850:	2088703a 	and	r4,r4,r2
8110d854:	003f9206 	br	8110d6a0 <__reset+0xfb0ed6a0>

8110d858 <__floatsisf>:
8110d858:	defffd04 	addi	sp,sp,-12
8110d85c:	de00012e 	bgeu	sp,et,8110d864 <__floatsisf+0xc>
8110d860:	003b68fa 	trap	3
8110d864:	dfc00215 	stw	ra,8(sp)
8110d868:	dc400115 	stw	r17,4(sp)
8110d86c:	dc000015 	stw	r16,0(sp)
8110d870:	20003526 	beq	r4,zero,8110d948 <__floatsisf+0xf0>
8110d874:	2021883a 	mov	r16,r4
8110d878:	2022d7fa 	srli	r17,r4,31
8110d87c:	20003616 	blt	r4,zero,8110d958 <__floatsisf+0x100>
8110d880:	8009883a 	mov	r4,r16
8110d884:	110e45c0 	call	8110e45c <__clzsi2>
8110d888:	00c02784 	movi	r3,158
8110d88c:	1887c83a 	sub	r3,r3,r2
8110d890:	01002584 	movi	r4,150
8110d894:	20c01416 	blt	r4,r3,8110d8e8 <__floatsisf+0x90>
8110d898:	20c9c83a 	sub	r4,r4,r3
8110d89c:	8120983a 	sll	r16,r16,r4
8110d8a0:	00802034 	movhi	r2,128
8110d8a4:	10bfffc4 	addi	r2,r2,-1
8110d8a8:	8809883a 	mov	r4,r17
8110d8ac:	80a0703a 	and	r16,r16,r2
8110d8b0:	18803fcc 	andi	r2,r3,255
8110d8b4:	100695fa 	slli	r3,r2,23
8110d8b8:	20803fcc 	andi	r2,r4,255
8110d8bc:	100897fa 	slli	r4,r2,31
8110d8c0:	00802034 	movhi	r2,128
8110d8c4:	10bfffc4 	addi	r2,r2,-1
8110d8c8:	8084703a 	and	r2,r16,r2
8110d8cc:	10c4b03a 	or	r2,r2,r3
8110d8d0:	1104b03a 	or	r2,r2,r4
8110d8d4:	dfc00217 	ldw	ra,8(sp)
8110d8d8:	dc400117 	ldw	r17,4(sp)
8110d8dc:	dc000017 	ldw	r16,0(sp)
8110d8e0:	dec00304 	addi	sp,sp,12
8110d8e4:	f800283a 	ret
8110d8e8:	01002644 	movi	r4,153
8110d8ec:	20c01c16 	blt	r4,r3,8110d960 <__floatsisf+0x108>
8110d8f0:	20c9c83a 	sub	r4,r4,r3
8110d8f4:	8120983a 	sll	r16,r16,r4
8110d8f8:	013f0034 	movhi	r4,64512
8110d8fc:	213fffc4 	addi	r4,r4,-1
8110d900:	814001cc 	andi	r5,r16,7
8110d904:	8108703a 	and	r4,r16,r4
8110d908:	28000426 	beq	r5,zero,8110d91c <__floatsisf+0xc4>
8110d90c:	840003cc 	andi	r16,r16,15
8110d910:	01400104 	movi	r5,4
8110d914:	81400126 	beq	r16,r5,8110d91c <__floatsisf+0xc4>
8110d918:	2149883a 	add	r4,r4,r5
8110d91c:	2141002c 	andhi	r5,r4,1024
8110d920:	28000526 	beq	r5,zero,8110d938 <__floatsisf+0xe0>
8110d924:	00c027c4 	movi	r3,159
8110d928:	1887c83a 	sub	r3,r3,r2
8110d92c:	00bf0034 	movhi	r2,64512
8110d930:	10bfffc4 	addi	r2,r2,-1
8110d934:	2088703a 	and	r4,r4,r2
8110d938:	202091ba 	slli	r16,r4,6
8110d93c:	8809883a 	mov	r4,r17
8110d940:	8020d27a 	srli	r16,r16,9
8110d944:	003fda06 	br	8110d8b0 <__reset+0xfb0ed8b0>
8110d948:	0009883a 	mov	r4,zero
8110d94c:	0007883a 	mov	r3,zero
8110d950:	0021883a 	mov	r16,zero
8110d954:	003fd606 	br	8110d8b0 <__reset+0xfb0ed8b0>
8110d958:	0121c83a 	sub	r16,zero,r4
8110d95c:	003fc806 	br	8110d880 <__reset+0xfb0ed880>
8110d960:	01002e44 	movi	r4,185
8110d964:	20c9c83a 	sub	r4,r4,r3
8110d968:	01400144 	movi	r5,5
8110d96c:	8108983a 	sll	r4,r16,r4
8110d970:	288bc83a 	sub	r5,r5,r2
8110d974:	8160d83a 	srl	r16,r16,r5
8110d978:	2008c03a 	cmpne	r4,r4,zero
8110d97c:	8120b03a 	or	r16,r16,r4
8110d980:	003fdd06 	br	8110d8f8 <__reset+0xfb0ed8f8>

8110d984 <__floatunsisf>:
8110d984:	defffe04 	addi	sp,sp,-8
8110d988:	de00012e 	bgeu	sp,et,8110d990 <__floatunsisf+0xc>
8110d98c:	003b68fa 	trap	3
8110d990:	dfc00115 	stw	ra,4(sp)
8110d994:	dc000015 	stw	r16,0(sp)
8110d998:	20002c26 	beq	r4,zero,8110da4c <__floatunsisf+0xc8>
8110d99c:	2021883a 	mov	r16,r4
8110d9a0:	110e45c0 	call	8110e45c <__clzsi2>
8110d9a4:	00c02784 	movi	r3,158
8110d9a8:	1887c83a 	sub	r3,r3,r2
8110d9ac:	01002584 	movi	r4,150
8110d9b0:	20c00f16 	blt	r4,r3,8110d9f0 <__floatunsisf+0x6c>
8110d9b4:	20c9c83a 	sub	r4,r4,r3
8110d9b8:	8108983a 	sll	r4,r16,r4
8110d9bc:	00802034 	movhi	r2,128
8110d9c0:	10bfffc4 	addi	r2,r2,-1
8110d9c4:	2088703a 	and	r4,r4,r2
8110d9c8:	18803fcc 	andi	r2,r3,255
8110d9cc:	100695fa 	slli	r3,r2,23
8110d9d0:	00802034 	movhi	r2,128
8110d9d4:	10bfffc4 	addi	r2,r2,-1
8110d9d8:	2084703a 	and	r2,r4,r2
8110d9dc:	10c4b03a 	or	r2,r2,r3
8110d9e0:	dfc00117 	ldw	ra,4(sp)
8110d9e4:	dc000017 	ldw	r16,0(sp)
8110d9e8:	dec00204 	addi	sp,sp,8
8110d9ec:	f800283a 	ret
8110d9f0:	01002644 	movi	r4,153
8110d9f4:	20c01816 	blt	r4,r3,8110da58 <__floatunsisf+0xd4>
8110d9f8:	20c9c83a 	sub	r4,r4,r3
8110d9fc:	8108983a 	sll	r4,r16,r4
8110da00:	017f0034 	movhi	r5,64512
8110da04:	297fffc4 	addi	r5,r5,-1
8110da08:	218001cc 	andi	r6,r4,7
8110da0c:	214a703a 	and	r5,r4,r5
8110da10:	30000426 	beq	r6,zero,8110da24 <__floatunsisf+0xa0>
8110da14:	210003cc 	andi	r4,r4,15
8110da18:	01800104 	movi	r6,4
8110da1c:	21800126 	beq	r4,r6,8110da24 <__floatunsisf+0xa0>
8110da20:	298b883a 	add	r5,r5,r6
8110da24:	2901002c 	andhi	r4,r5,1024
8110da28:	20000526 	beq	r4,zero,8110da40 <__floatunsisf+0xbc>
8110da2c:	00c027c4 	movi	r3,159
8110da30:	1887c83a 	sub	r3,r3,r2
8110da34:	00bf0034 	movhi	r2,64512
8110da38:	10bfffc4 	addi	r2,r2,-1
8110da3c:	288a703a 	and	r5,r5,r2
8110da40:	280891ba 	slli	r4,r5,6
8110da44:	2008d27a 	srli	r4,r4,9
8110da48:	003fdf06 	br	8110d9c8 <__reset+0xfb0ed9c8>
8110da4c:	0007883a 	mov	r3,zero
8110da50:	0009883a 	mov	r4,zero
8110da54:	003fdc06 	br	8110d9c8 <__reset+0xfb0ed9c8>
8110da58:	01402e44 	movi	r5,185
8110da5c:	28cbc83a 	sub	r5,r5,r3
8110da60:	01000144 	movi	r4,5
8110da64:	2089c83a 	sub	r4,r4,r2
8110da68:	814a983a 	sll	r5,r16,r5
8110da6c:	8108d83a 	srl	r4,r16,r4
8110da70:	2820c03a 	cmpne	r16,r5,zero
8110da74:	2408b03a 	or	r4,r4,r16
8110da78:	003fe106 	br	8110da00 <__reset+0xfb0eda00>

8110da7c <__muldf3>:
8110da7c:	defff304 	addi	sp,sp,-52
8110da80:	2804d53a 	srli	r2,r5,20
8110da84:	de00012e 	bgeu	sp,et,8110da8c <__muldf3+0x10>
8110da88:	003b68fa 	trap	3
8110da8c:	dd800915 	stw	r22,36(sp)
8110da90:	282cd7fa 	srli	r22,r5,31
8110da94:	dc000315 	stw	r16,12(sp)
8110da98:	04000434 	movhi	r16,16
8110da9c:	dd400815 	stw	r21,32(sp)
8110daa0:	dc800515 	stw	r18,20(sp)
8110daa4:	843fffc4 	addi	r16,r16,-1
8110daa8:	dfc00c15 	stw	ra,48(sp)
8110daac:	df000b15 	stw	fp,44(sp)
8110dab0:	ddc00a15 	stw	r23,40(sp)
8110dab4:	dd000715 	stw	r20,28(sp)
8110dab8:	dcc00615 	stw	r19,24(sp)
8110dabc:	dc400415 	stw	r17,16(sp)
8110dac0:	1481ffcc 	andi	r18,r2,2047
8110dac4:	2c20703a 	and	r16,r5,r16
8110dac8:	b02b883a 	mov	r21,r22
8110dacc:	b2403fcc 	andi	r9,r22,255
8110dad0:	90006026 	beq	r18,zero,8110dc54 <__muldf3+0x1d8>
8110dad4:	0081ffc4 	movi	r2,2047
8110dad8:	2029883a 	mov	r20,r4
8110dadc:	90803626 	beq	r18,r2,8110dbb8 <__muldf3+0x13c>
8110dae0:	80800434 	orhi	r2,r16,16
8110dae4:	100490fa 	slli	r2,r2,3
8110dae8:	2020d77a 	srli	r16,r4,29
8110daec:	202890fa 	slli	r20,r4,3
8110daf0:	94bf0044 	addi	r18,r18,-1023
8110daf4:	80a0b03a 	or	r16,r16,r2
8110daf8:	0027883a 	mov	r19,zero
8110dafc:	0039883a 	mov	fp,zero
8110db00:	3804d53a 	srli	r2,r7,20
8110db04:	382ed7fa 	srli	r23,r7,31
8110db08:	04400434 	movhi	r17,16
8110db0c:	8c7fffc4 	addi	r17,r17,-1
8110db10:	1081ffcc 	andi	r2,r2,2047
8110db14:	3011883a 	mov	r8,r6
8110db18:	3c62703a 	and	r17,r7,r17
8110db1c:	ba803fcc 	andi	r10,r23,255
8110db20:	10006d26 	beq	r2,zero,8110dcd8 <__muldf3+0x25c>
8110db24:	00c1ffc4 	movi	r3,2047
8110db28:	10c06526 	beq	r2,r3,8110dcc0 <__muldf3+0x244>
8110db2c:	88c00434 	orhi	r3,r17,16
8110db30:	180690fa 	slli	r3,r3,3
8110db34:	3022d77a 	srli	r17,r6,29
8110db38:	301090fa 	slli	r8,r6,3
8110db3c:	10bf0044 	addi	r2,r2,-1023
8110db40:	88e2b03a 	or	r17,r17,r3
8110db44:	000b883a 	mov	r5,zero
8110db48:	9085883a 	add	r2,r18,r2
8110db4c:	2cc8b03a 	or	r4,r5,r19
8110db50:	00c003c4 	movi	r3,15
8110db54:	bdacf03a 	xor	r22,r23,r22
8110db58:	12c00044 	addi	r11,r2,1
8110db5c:	19009936 	bltu	r3,r4,8110ddc4 <__muldf3+0x348>
8110db60:	200890ba 	slli	r4,r4,2
8110db64:	00e04474 	movhi	r3,33041
8110db68:	18f6de04 	addi	r3,r3,-9352
8110db6c:	20c9883a 	add	r4,r4,r3
8110db70:	20c00017 	ldw	r3,0(r4)
8110db74:	1800683a 	jmp	r3
8110db78:	8110ddc4 	addi	r4,r16,17271
8110db7c:	8110dbd8 	cmpnei	r4,r16,17263
8110db80:	8110dbd8 	cmpnei	r4,r16,17263
8110db84:	8110dbd4 	ori	r4,r16,17263
8110db88:	8110dda0 	cmpeqi	r4,r16,17270
8110db8c:	8110dda0 	cmpeqi	r4,r16,17270
8110db90:	8110dd88 	cmpgei	r4,r16,17270
8110db94:	8110dbd4 	ori	r4,r16,17263
8110db98:	8110dda0 	cmpeqi	r4,r16,17270
8110db9c:	8110dd88 	cmpgei	r4,r16,17270
8110dba0:	8110dda0 	cmpeqi	r4,r16,17270
8110dba4:	8110dbd4 	ori	r4,r16,17263
8110dba8:	8110ddb0 	cmpltui	r4,r16,17270
8110dbac:	8110ddb0 	cmpltui	r4,r16,17270
8110dbb0:	8110ddb0 	cmpltui	r4,r16,17270
8110dbb4:	8110dfcc 	andi	r4,r16,17279
8110dbb8:	2404b03a 	or	r2,r4,r16
8110dbbc:	10006f1e 	bne	r2,zero,8110dd7c <__muldf3+0x300>
8110dbc0:	04c00204 	movi	r19,8
8110dbc4:	0021883a 	mov	r16,zero
8110dbc8:	0029883a 	mov	r20,zero
8110dbcc:	07000084 	movi	fp,2
8110dbd0:	003fcb06 	br	8110db00 <__reset+0xfb0edb00>
8110dbd4:	502d883a 	mov	r22,r10
8110dbd8:	00800084 	movi	r2,2
8110dbdc:	28805726 	beq	r5,r2,8110dd3c <__muldf3+0x2c0>
8110dbe0:	008000c4 	movi	r2,3
8110dbe4:	28816626 	beq	r5,r2,8110e180 <__muldf3+0x704>
8110dbe8:	00800044 	movi	r2,1
8110dbec:	2881411e 	bne	r5,r2,8110e0f4 <__muldf3+0x678>
8110dbf0:	b02b883a 	mov	r21,r22
8110dbf4:	0005883a 	mov	r2,zero
8110dbf8:	000b883a 	mov	r5,zero
8110dbfc:	0029883a 	mov	r20,zero
8110dc00:	1004953a 	slli	r2,r2,20
8110dc04:	a8c03fcc 	andi	r3,r21,255
8110dc08:	04400434 	movhi	r17,16
8110dc0c:	8c7fffc4 	addi	r17,r17,-1
8110dc10:	180697fa 	slli	r3,r3,31
8110dc14:	2c4a703a 	and	r5,r5,r17
8110dc18:	288ab03a 	or	r5,r5,r2
8110dc1c:	28c6b03a 	or	r3,r5,r3
8110dc20:	a005883a 	mov	r2,r20
8110dc24:	dfc00c17 	ldw	ra,48(sp)
8110dc28:	df000b17 	ldw	fp,44(sp)
8110dc2c:	ddc00a17 	ldw	r23,40(sp)
8110dc30:	dd800917 	ldw	r22,36(sp)
8110dc34:	dd400817 	ldw	r21,32(sp)
8110dc38:	dd000717 	ldw	r20,28(sp)
8110dc3c:	dcc00617 	ldw	r19,24(sp)
8110dc40:	dc800517 	ldw	r18,20(sp)
8110dc44:	dc400417 	ldw	r17,16(sp)
8110dc48:	dc000317 	ldw	r16,12(sp)
8110dc4c:	dec00d04 	addi	sp,sp,52
8110dc50:	f800283a 	ret
8110dc54:	2404b03a 	or	r2,r4,r16
8110dc58:	2027883a 	mov	r19,r4
8110dc5c:	10004226 	beq	r2,zero,8110dd68 <__muldf3+0x2ec>
8110dc60:	8000fc26 	beq	r16,zero,8110e054 <__muldf3+0x5d8>
8110dc64:	8009883a 	mov	r4,r16
8110dc68:	d9800215 	stw	r6,8(sp)
8110dc6c:	d9c00015 	stw	r7,0(sp)
8110dc70:	da400115 	stw	r9,4(sp)
8110dc74:	110e45c0 	call	8110e45c <__clzsi2>
8110dc78:	d9800217 	ldw	r6,8(sp)
8110dc7c:	d9c00017 	ldw	r7,0(sp)
8110dc80:	da400117 	ldw	r9,4(sp)
8110dc84:	113ffd44 	addi	r4,r2,-11
8110dc88:	00c00704 	movi	r3,28
8110dc8c:	1900ed16 	blt	r3,r4,8110e044 <__muldf3+0x5c8>
8110dc90:	00c00744 	movi	r3,29
8110dc94:	147ffe04 	addi	r17,r2,-8
8110dc98:	1907c83a 	sub	r3,r3,r4
8110dc9c:	8460983a 	sll	r16,r16,r17
8110dca0:	98c6d83a 	srl	r3,r19,r3
8110dca4:	9c68983a 	sll	r20,r19,r17
8110dca8:	1c20b03a 	or	r16,r3,r16
8110dcac:	1080fcc4 	addi	r2,r2,1011
8110dcb0:	00a5c83a 	sub	r18,zero,r2
8110dcb4:	0027883a 	mov	r19,zero
8110dcb8:	0039883a 	mov	fp,zero
8110dcbc:	003f9006 	br	8110db00 <__reset+0xfb0edb00>
8110dcc0:	3446b03a 	or	r3,r6,r17
8110dcc4:	1800261e 	bne	r3,zero,8110dd60 <__muldf3+0x2e4>
8110dcc8:	0023883a 	mov	r17,zero
8110dccc:	0011883a 	mov	r8,zero
8110dcd0:	01400084 	movi	r5,2
8110dcd4:	003f9c06 	br	8110db48 <__reset+0xfb0edb48>
8110dcd8:	3446b03a 	or	r3,r6,r17
8110dcdc:	18001c26 	beq	r3,zero,8110dd50 <__muldf3+0x2d4>
8110dce0:	8800ce26 	beq	r17,zero,8110e01c <__muldf3+0x5a0>
8110dce4:	8809883a 	mov	r4,r17
8110dce8:	d9800215 	stw	r6,8(sp)
8110dcec:	da400115 	stw	r9,4(sp)
8110dcf0:	da800015 	stw	r10,0(sp)
8110dcf4:	110e45c0 	call	8110e45c <__clzsi2>
8110dcf8:	d9800217 	ldw	r6,8(sp)
8110dcfc:	da400117 	ldw	r9,4(sp)
8110dd00:	da800017 	ldw	r10,0(sp)
8110dd04:	113ffd44 	addi	r4,r2,-11
8110dd08:	00c00704 	movi	r3,28
8110dd0c:	1900bf16 	blt	r3,r4,8110e00c <__muldf3+0x590>
8110dd10:	00c00744 	movi	r3,29
8110dd14:	123ffe04 	addi	r8,r2,-8
8110dd18:	1907c83a 	sub	r3,r3,r4
8110dd1c:	8a22983a 	sll	r17,r17,r8
8110dd20:	30c6d83a 	srl	r3,r6,r3
8110dd24:	3210983a 	sll	r8,r6,r8
8110dd28:	1c62b03a 	or	r17,r3,r17
8110dd2c:	1080fcc4 	addi	r2,r2,1011
8110dd30:	0085c83a 	sub	r2,zero,r2
8110dd34:	000b883a 	mov	r5,zero
8110dd38:	003f8306 	br	8110db48 <__reset+0xfb0edb48>
8110dd3c:	b02b883a 	mov	r21,r22
8110dd40:	0081ffc4 	movi	r2,2047
8110dd44:	000b883a 	mov	r5,zero
8110dd48:	0029883a 	mov	r20,zero
8110dd4c:	003fac06 	br	8110dc00 <__reset+0xfb0edc00>
8110dd50:	0023883a 	mov	r17,zero
8110dd54:	0011883a 	mov	r8,zero
8110dd58:	01400044 	movi	r5,1
8110dd5c:	003f7a06 	br	8110db48 <__reset+0xfb0edb48>
8110dd60:	014000c4 	movi	r5,3
8110dd64:	003f7806 	br	8110db48 <__reset+0xfb0edb48>
8110dd68:	04c00104 	movi	r19,4
8110dd6c:	0021883a 	mov	r16,zero
8110dd70:	0029883a 	mov	r20,zero
8110dd74:	07000044 	movi	fp,1
8110dd78:	003f6106 	br	8110db00 <__reset+0xfb0edb00>
8110dd7c:	04c00304 	movi	r19,12
8110dd80:	070000c4 	movi	fp,3
8110dd84:	003f5e06 	br	8110db00 <__reset+0xfb0edb00>
8110dd88:	01400434 	movhi	r5,16
8110dd8c:	002b883a 	mov	r21,zero
8110dd90:	297fffc4 	addi	r5,r5,-1
8110dd94:	053fffc4 	movi	r20,-1
8110dd98:	0081ffc4 	movi	r2,2047
8110dd9c:	003f9806 	br	8110dc00 <__reset+0xfb0edc00>
8110dda0:	8023883a 	mov	r17,r16
8110dda4:	a011883a 	mov	r8,r20
8110dda8:	e00b883a 	mov	r5,fp
8110ddac:	003f8a06 	br	8110dbd8 <__reset+0xfb0edbd8>
8110ddb0:	8023883a 	mov	r17,r16
8110ddb4:	a011883a 	mov	r8,r20
8110ddb8:	482d883a 	mov	r22,r9
8110ddbc:	e00b883a 	mov	r5,fp
8110ddc0:	003f8506 	br	8110dbd8 <__reset+0xfb0edbd8>
8110ddc4:	a00ad43a 	srli	r5,r20,16
8110ddc8:	401ad43a 	srli	r13,r8,16
8110ddcc:	a53fffcc 	andi	r20,r20,65535
8110ddd0:	423fffcc 	andi	r8,r8,65535
8110ddd4:	4519383a 	mul	r12,r8,r20
8110ddd8:	4147383a 	mul	r3,r8,r5
8110dddc:	6d09383a 	mul	r4,r13,r20
8110dde0:	600cd43a 	srli	r6,r12,16
8110dde4:	2b5d383a 	mul	r14,r5,r13
8110dde8:	20c9883a 	add	r4,r4,r3
8110ddec:	310d883a 	add	r6,r6,r4
8110ddf0:	30c0022e 	bgeu	r6,r3,8110ddfc <__muldf3+0x380>
8110ddf4:	00c00074 	movhi	r3,1
8110ddf8:	70dd883a 	add	r14,r14,r3
8110ddfc:	8826d43a 	srli	r19,r17,16
8110de00:	8bffffcc 	andi	r15,r17,65535
8110de04:	7d23383a 	mul	r17,r15,r20
8110de08:	7949383a 	mul	r4,r15,r5
8110de0c:	9d29383a 	mul	r20,r19,r20
8110de10:	8814d43a 	srli	r10,r17,16
8110de14:	3012943a 	slli	r9,r6,16
8110de18:	a129883a 	add	r20,r20,r4
8110de1c:	633fffcc 	andi	r12,r12,65535
8110de20:	5515883a 	add	r10,r10,r20
8110de24:	3006d43a 	srli	r3,r6,16
8110de28:	4b13883a 	add	r9,r9,r12
8110de2c:	2ccb383a 	mul	r5,r5,r19
8110de30:	5100022e 	bgeu	r10,r4,8110de3c <__muldf3+0x3c0>
8110de34:	01000074 	movhi	r4,1
8110de38:	290b883a 	add	r5,r5,r4
8110de3c:	802ad43a 	srli	r21,r16,16
8110de40:	843fffcc 	andi	r16,r16,65535
8110de44:	440d383a 	mul	r6,r8,r16
8110de48:	4565383a 	mul	r18,r8,r21
8110de4c:	8349383a 	mul	r4,r16,r13
8110de50:	500e943a 	slli	r7,r10,16
8110de54:	3010d43a 	srli	r8,r6,16
8110de58:	5028d43a 	srli	r20,r10,16
8110de5c:	2489883a 	add	r4,r4,r18
8110de60:	8abfffcc 	andi	r10,r17,65535
8110de64:	3a95883a 	add	r10,r7,r10
8110de68:	4119883a 	add	r12,r8,r4
8110de6c:	a169883a 	add	r20,r20,r5
8110de70:	1a87883a 	add	r3,r3,r10
8110de74:	6d5b383a 	mul	r13,r13,r21
8110de78:	6480022e 	bgeu	r12,r18,8110de84 <__muldf3+0x408>
8110de7c:	01000074 	movhi	r4,1
8110de80:	691b883a 	add	r13,r13,r4
8110de84:	7c25383a 	mul	r18,r15,r16
8110de88:	7d4b383a 	mul	r5,r15,r21
8110de8c:	84cf383a 	mul	r7,r16,r19
8110de90:	901ed43a 	srli	r15,r18,16
8110de94:	6008d43a 	srli	r4,r12,16
8110de98:	6010943a 	slli	r8,r12,16
8110de9c:	394f883a 	add	r7,r7,r5
8110dea0:	333fffcc 	andi	r12,r6,65535
8110dea4:	79df883a 	add	r15,r15,r7
8110dea8:	235b883a 	add	r13,r4,r13
8110deac:	9d63383a 	mul	r17,r19,r21
8110deb0:	4309883a 	add	r4,r8,r12
8110deb4:	7940022e 	bgeu	r15,r5,8110dec0 <__muldf3+0x444>
8110deb8:	01400074 	movhi	r5,1
8110debc:	8963883a 	add	r17,r17,r5
8110dec0:	780a943a 	slli	r5,r15,16
8110dec4:	91bfffcc 	andi	r6,r18,65535
8110dec8:	70c7883a 	add	r3,r14,r3
8110decc:	298d883a 	add	r6,r5,r6
8110ded0:	1a8f803a 	cmpltu	r7,r3,r10
8110ded4:	350b883a 	add	r5,r6,r20
8110ded8:	20c7883a 	add	r3,r4,r3
8110dedc:	3955883a 	add	r10,r7,r5
8110dee0:	1909803a 	cmpltu	r4,r3,r4
8110dee4:	6a91883a 	add	r8,r13,r10
8110dee8:	780cd43a 	srli	r6,r15,16
8110deec:	2219883a 	add	r12,r4,r8
8110def0:	2d0b803a 	cmpltu	r5,r5,r20
8110def4:	51cf803a 	cmpltu	r7,r10,r7
8110def8:	29ceb03a 	or	r7,r5,r7
8110defc:	4351803a 	cmpltu	r8,r8,r13
8110df00:	610b803a 	cmpltu	r5,r12,r4
8110df04:	4148b03a 	or	r4,r8,r5
8110df08:	398f883a 	add	r7,r7,r6
8110df0c:	3909883a 	add	r4,r7,r4
8110df10:	1810927a 	slli	r8,r3,9
8110df14:	2449883a 	add	r4,r4,r17
8110df18:	2008927a 	slli	r4,r4,9
8110df1c:	6022d5fa 	srli	r17,r12,23
8110df20:	1806d5fa 	srli	r3,r3,23
8110df24:	4252b03a 	or	r9,r8,r9
8110df28:	600a927a 	slli	r5,r12,9
8110df2c:	4810c03a 	cmpne	r8,r9,zero
8110df30:	2462b03a 	or	r17,r4,r17
8110df34:	40c6b03a 	or	r3,r8,r3
8110df38:	8900402c 	andhi	r4,r17,256
8110df3c:	1950b03a 	or	r8,r3,r5
8110df40:	20000726 	beq	r4,zero,8110df60 <__muldf3+0x4e4>
8110df44:	4006d07a 	srli	r3,r8,1
8110df48:	880497fa 	slli	r2,r17,31
8110df4c:	4200004c 	andi	r8,r8,1
8110df50:	8822d07a 	srli	r17,r17,1
8110df54:	1a10b03a 	or	r8,r3,r8
8110df58:	1210b03a 	or	r8,r2,r8
8110df5c:	5805883a 	mov	r2,r11
8110df60:	1140ffc4 	addi	r5,r2,1023
8110df64:	0140440e 	bge	zero,r5,8110e078 <__muldf3+0x5fc>
8110df68:	40c001cc 	andi	r3,r8,7
8110df6c:	18000726 	beq	r3,zero,8110df8c <__muldf3+0x510>
8110df70:	40c003cc 	andi	r3,r8,15
8110df74:	01000104 	movi	r4,4
8110df78:	19000426 	beq	r3,r4,8110df8c <__muldf3+0x510>
8110df7c:	4107883a 	add	r3,r8,r4
8110df80:	1a11803a 	cmpltu	r8,r3,r8
8110df84:	8a23883a 	add	r17,r17,r8
8110df88:	1811883a 	mov	r8,r3
8110df8c:	88c0402c 	andhi	r3,r17,256
8110df90:	18000426 	beq	r3,zero,8110dfa4 <__muldf3+0x528>
8110df94:	11410004 	addi	r5,r2,1024
8110df98:	00bfc034 	movhi	r2,65280
8110df9c:	10bfffc4 	addi	r2,r2,-1
8110dfa0:	88a2703a 	and	r17,r17,r2
8110dfa4:	0081ff84 	movi	r2,2046
8110dfa8:	117f6416 	blt	r2,r5,8110dd3c <__reset+0xfb0edd3c>
8110dfac:	8828977a 	slli	r20,r17,29
8110dfb0:	4010d0fa 	srli	r8,r8,3
8110dfb4:	8822927a 	slli	r17,r17,9
8110dfb8:	2881ffcc 	andi	r2,r5,2047
8110dfbc:	a228b03a 	or	r20,r20,r8
8110dfc0:	880ad33a 	srli	r5,r17,12
8110dfc4:	b02b883a 	mov	r21,r22
8110dfc8:	003f0d06 	br	8110dc00 <__reset+0xfb0edc00>
8110dfcc:	8080022c 	andhi	r2,r16,8
8110dfd0:	10000926 	beq	r2,zero,8110dff8 <__muldf3+0x57c>
8110dfd4:	8880022c 	andhi	r2,r17,8
8110dfd8:	1000071e 	bne	r2,zero,8110dff8 <__muldf3+0x57c>
8110dfdc:	00800434 	movhi	r2,16
8110dfe0:	89400234 	orhi	r5,r17,8
8110dfe4:	10bfffc4 	addi	r2,r2,-1
8110dfe8:	b82b883a 	mov	r21,r23
8110dfec:	288a703a 	and	r5,r5,r2
8110dff0:	4029883a 	mov	r20,r8
8110dff4:	003f6806 	br	8110dd98 <__reset+0xfb0edd98>
8110dff8:	00800434 	movhi	r2,16
8110dffc:	81400234 	orhi	r5,r16,8
8110e000:	10bfffc4 	addi	r2,r2,-1
8110e004:	288a703a 	and	r5,r5,r2
8110e008:	003f6306 	br	8110dd98 <__reset+0xfb0edd98>
8110e00c:	147ff604 	addi	r17,r2,-40
8110e010:	3462983a 	sll	r17,r6,r17
8110e014:	0011883a 	mov	r8,zero
8110e018:	003f4406 	br	8110dd2c <__reset+0xfb0edd2c>
8110e01c:	3009883a 	mov	r4,r6
8110e020:	d9800215 	stw	r6,8(sp)
8110e024:	da400115 	stw	r9,4(sp)
8110e028:	da800015 	stw	r10,0(sp)
8110e02c:	110e45c0 	call	8110e45c <__clzsi2>
8110e030:	10800804 	addi	r2,r2,32
8110e034:	da800017 	ldw	r10,0(sp)
8110e038:	da400117 	ldw	r9,4(sp)
8110e03c:	d9800217 	ldw	r6,8(sp)
8110e040:	003f3006 	br	8110dd04 <__reset+0xfb0edd04>
8110e044:	143ff604 	addi	r16,r2,-40
8110e048:	9c20983a 	sll	r16,r19,r16
8110e04c:	0029883a 	mov	r20,zero
8110e050:	003f1606 	br	8110dcac <__reset+0xfb0edcac>
8110e054:	d9800215 	stw	r6,8(sp)
8110e058:	d9c00015 	stw	r7,0(sp)
8110e05c:	da400115 	stw	r9,4(sp)
8110e060:	110e45c0 	call	8110e45c <__clzsi2>
8110e064:	10800804 	addi	r2,r2,32
8110e068:	da400117 	ldw	r9,4(sp)
8110e06c:	d9c00017 	ldw	r7,0(sp)
8110e070:	d9800217 	ldw	r6,8(sp)
8110e074:	003f0306 	br	8110dc84 <__reset+0xfb0edc84>
8110e078:	00c00044 	movi	r3,1
8110e07c:	1947c83a 	sub	r3,r3,r5
8110e080:	00800e04 	movi	r2,56
8110e084:	10feda16 	blt	r2,r3,8110dbf0 <__reset+0xfb0edbf0>
8110e088:	008007c4 	movi	r2,31
8110e08c:	10c01b16 	blt	r2,r3,8110e0fc <__muldf3+0x680>
8110e090:	00800804 	movi	r2,32
8110e094:	10c5c83a 	sub	r2,r2,r3
8110e098:	888a983a 	sll	r5,r17,r2
8110e09c:	40c8d83a 	srl	r4,r8,r3
8110e0a0:	4084983a 	sll	r2,r8,r2
8110e0a4:	88e2d83a 	srl	r17,r17,r3
8110e0a8:	2906b03a 	or	r3,r5,r4
8110e0ac:	1004c03a 	cmpne	r2,r2,zero
8110e0b0:	1886b03a 	or	r3,r3,r2
8110e0b4:	188001cc 	andi	r2,r3,7
8110e0b8:	10000726 	beq	r2,zero,8110e0d8 <__muldf3+0x65c>
8110e0bc:	188003cc 	andi	r2,r3,15
8110e0c0:	01000104 	movi	r4,4
8110e0c4:	11000426 	beq	r2,r4,8110e0d8 <__muldf3+0x65c>
8110e0c8:	1805883a 	mov	r2,r3
8110e0cc:	10c00104 	addi	r3,r2,4
8110e0d0:	1885803a 	cmpltu	r2,r3,r2
8110e0d4:	88a3883a 	add	r17,r17,r2
8110e0d8:	8880202c 	andhi	r2,r17,128
8110e0dc:	10001c26 	beq	r2,zero,8110e150 <__muldf3+0x6d4>
8110e0e0:	b02b883a 	mov	r21,r22
8110e0e4:	00800044 	movi	r2,1
8110e0e8:	000b883a 	mov	r5,zero
8110e0ec:	0029883a 	mov	r20,zero
8110e0f0:	003ec306 	br	8110dc00 <__reset+0xfb0edc00>
8110e0f4:	5805883a 	mov	r2,r11
8110e0f8:	003f9906 	br	8110df60 <__reset+0xfb0edf60>
8110e0fc:	00bff844 	movi	r2,-31
8110e100:	1145c83a 	sub	r2,r2,r5
8110e104:	8888d83a 	srl	r4,r17,r2
8110e108:	00800804 	movi	r2,32
8110e10c:	18801a26 	beq	r3,r2,8110e178 <__muldf3+0x6fc>
8110e110:	00801004 	movi	r2,64
8110e114:	10c5c83a 	sub	r2,r2,r3
8110e118:	8884983a 	sll	r2,r17,r2
8110e11c:	1204b03a 	or	r2,r2,r8
8110e120:	1004c03a 	cmpne	r2,r2,zero
8110e124:	2084b03a 	or	r2,r4,r2
8110e128:	144001cc 	andi	r17,r2,7
8110e12c:	88000d1e 	bne	r17,zero,8110e164 <__muldf3+0x6e8>
8110e130:	000b883a 	mov	r5,zero
8110e134:	1028d0fa 	srli	r20,r2,3
8110e138:	b02b883a 	mov	r21,r22
8110e13c:	0005883a 	mov	r2,zero
8110e140:	a468b03a 	or	r20,r20,r17
8110e144:	003eae06 	br	8110dc00 <__reset+0xfb0edc00>
8110e148:	1007883a 	mov	r3,r2
8110e14c:	0023883a 	mov	r17,zero
8110e150:	880a927a 	slli	r5,r17,9
8110e154:	1805883a 	mov	r2,r3
8110e158:	8822977a 	slli	r17,r17,29
8110e15c:	280ad33a 	srli	r5,r5,12
8110e160:	003ff406 	br	8110e134 <__reset+0xfb0ee134>
8110e164:	10c003cc 	andi	r3,r2,15
8110e168:	01000104 	movi	r4,4
8110e16c:	193ff626 	beq	r3,r4,8110e148 <__reset+0xfb0ee148>
8110e170:	0023883a 	mov	r17,zero
8110e174:	003fd506 	br	8110e0cc <__reset+0xfb0ee0cc>
8110e178:	0005883a 	mov	r2,zero
8110e17c:	003fe706 	br	8110e11c <__reset+0xfb0ee11c>
8110e180:	00800434 	movhi	r2,16
8110e184:	89400234 	orhi	r5,r17,8
8110e188:	10bfffc4 	addi	r2,r2,-1
8110e18c:	b02b883a 	mov	r21,r22
8110e190:	288a703a 	and	r5,r5,r2
8110e194:	4029883a 	mov	r20,r8
8110e198:	003eff06 	br	8110dd98 <__reset+0xfb0edd98>

8110e19c <__extendsfdf2>:
8110e19c:	200ad5fa 	srli	r5,r4,23
8110e1a0:	defffd04 	addi	sp,sp,-12
8110e1a4:	de00012e 	bgeu	sp,et,8110e1ac <__extendsfdf2+0x10>
8110e1a8:	003b68fa 	trap	3
8110e1ac:	29403fcc 	andi	r5,r5,255
8110e1b0:	dc400115 	stw	r17,4(sp)
8110e1b4:	29800044 	addi	r6,r5,1
8110e1b8:	04402034 	movhi	r17,128
8110e1bc:	dc000015 	stw	r16,0(sp)
8110e1c0:	8c7fffc4 	addi	r17,r17,-1
8110e1c4:	dfc00215 	stw	ra,8(sp)
8110e1c8:	31803fcc 	andi	r6,r6,255
8110e1cc:	00800044 	movi	r2,1
8110e1d0:	8922703a 	and	r17,r17,r4
8110e1d4:	2020d7fa 	srli	r16,r4,31
8110e1d8:	1180110e 	bge	r2,r6,8110e220 <__extendsfdf2+0x84>
8110e1dc:	880cd0fa 	srli	r6,r17,3
8110e1e0:	8822977a 	slli	r17,r17,29
8110e1e4:	2940e004 	addi	r5,r5,896
8110e1e8:	2941ffcc 	andi	r5,r5,2047
8110e1ec:	2804953a 	slli	r2,r5,20
8110e1f0:	01400434 	movhi	r5,16
8110e1f4:	800697fa 	slli	r3,r16,31
8110e1f8:	297fffc4 	addi	r5,r5,-1
8110e1fc:	314a703a 	and	r5,r6,r5
8110e200:	288ab03a 	or	r5,r5,r2
8110e204:	28c6b03a 	or	r3,r5,r3
8110e208:	8805883a 	mov	r2,r17
8110e20c:	dfc00217 	ldw	ra,8(sp)
8110e210:	dc400117 	ldw	r17,4(sp)
8110e214:	dc000017 	ldw	r16,0(sp)
8110e218:	dec00304 	addi	sp,sp,12
8110e21c:	f800283a 	ret
8110e220:	2800111e 	bne	r5,zero,8110e268 <__extendsfdf2+0xcc>
8110e224:	88001c26 	beq	r17,zero,8110e298 <__extendsfdf2+0xfc>
8110e228:	8809883a 	mov	r4,r17
8110e22c:	110e45c0 	call	8110e45c <__clzsi2>
8110e230:	00c00284 	movi	r3,10
8110e234:	18801b16 	blt	r3,r2,8110e2a4 <__extendsfdf2+0x108>
8110e238:	018002c4 	movi	r6,11
8110e23c:	308dc83a 	sub	r6,r6,r2
8110e240:	11000544 	addi	r4,r2,21
8110e244:	8986d83a 	srl	r3,r17,r6
8110e248:	8922983a 	sll	r17,r17,r4
8110e24c:	0180e244 	movi	r6,905
8110e250:	01400434 	movhi	r5,16
8110e254:	3085c83a 	sub	r2,r6,r2
8110e258:	297fffc4 	addi	r5,r5,-1
8110e25c:	194c703a 	and	r6,r3,r5
8110e260:	1141ffcc 	andi	r5,r2,2047
8110e264:	003fe006 	br	8110e1e8 <__reset+0xfb0ee1e8>
8110e268:	88000826 	beq	r17,zero,8110e28c <__extendsfdf2+0xf0>
8110e26c:	880cd0fa 	srli	r6,r17,3
8110e270:	00800434 	movhi	r2,16
8110e274:	10bfffc4 	addi	r2,r2,-1
8110e278:	31800234 	orhi	r6,r6,8
8110e27c:	8822977a 	slli	r17,r17,29
8110e280:	308c703a 	and	r6,r6,r2
8110e284:	0141ffc4 	movi	r5,2047
8110e288:	003fd706 	br	8110e1e8 <__reset+0xfb0ee1e8>
8110e28c:	0141ffc4 	movi	r5,2047
8110e290:	000d883a 	mov	r6,zero
8110e294:	003fd406 	br	8110e1e8 <__reset+0xfb0ee1e8>
8110e298:	000b883a 	mov	r5,zero
8110e29c:	000d883a 	mov	r6,zero
8110e2a0:	003fd106 	br	8110e1e8 <__reset+0xfb0ee1e8>
8110e2a4:	11bffd44 	addi	r6,r2,-11
8110e2a8:	8986983a 	sll	r3,r17,r6
8110e2ac:	0023883a 	mov	r17,zero
8110e2b0:	003fe606 	br	8110e24c <__reset+0xfb0ee24c>

8110e2b4 <__truncdfsf2>:
8110e2b4:	2810d53a 	srli	r8,r5,20
8110e2b8:	01c00434 	movhi	r7,16
8110e2bc:	39ffffc4 	addi	r7,r7,-1
8110e2c0:	29ce703a 	and	r7,r5,r7
8110e2c4:	4201ffcc 	andi	r8,r8,2047
8110e2c8:	380e90fa 	slli	r7,r7,3
8110e2cc:	200cd77a 	srli	r6,r4,29
8110e2d0:	42400044 	addi	r9,r8,1
8110e2d4:	4a41ffcc 	andi	r9,r9,2047
8110e2d8:	00c00044 	movi	r3,1
8110e2dc:	280ad7fa 	srli	r5,r5,31
8110e2e0:	31ceb03a 	or	r7,r6,r7
8110e2e4:	200490fa 	slli	r2,r4,3
8110e2e8:	1a40230e 	bge	r3,r9,8110e378 <__truncdfsf2+0xc4>
8110e2ec:	40ff2004 	addi	r3,r8,-896
8110e2f0:	01803f84 	movi	r6,254
8110e2f4:	30c01516 	blt	r6,r3,8110e34c <__truncdfsf2+0x98>
8110e2f8:	00c0380e 	bge	zero,r3,8110e3dc <__truncdfsf2+0x128>
8110e2fc:	200c91ba 	slli	r6,r4,6
8110e300:	380e90fa 	slli	r7,r7,3
8110e304:	1004d77a 	srli	r2,r2,29
8110e308:	300cc03a 	cmpne	r6,r6,zero
8110e30c:	31ccb03a 	or	r6,r6,r7
8110e310:	308cb03a 	or	r6,r6,r2
8110e314:	308001cc 	andi	r2,r6,7
8110e318:	10000426 	beq	r2,zero,8110e32c <__truncdfsf2+0x78>
8110e31c:	308003cc 	andi	r2,r6,15
8110e320:	01000104 	movi	r4,4
8110e324:	11000126 	beq	r2,r4,8110e32c <__truncdfsf2+0x78>
8110e328:	31800104 	addi	r6,r6,4
8110e32c:	3081002c 	andhi	r2,r6,1024
8110e330:	10001626 	beq	r2,zero,8110e38c <__truncdfsf2+0xd8>
8110e334:	18c00044 	addi	r3,r3,1
8110e338:	00803fc4 	movi	r2,255
8110e33c:	18800326 	beq	r3,r2,8110e34c <__truncdfsf2+0x98>
8110e340:	300c91ba 	slli	r6,r6,6
8110e344:	300cd27a 	srli	r6,r6,9
8110e348:	00000206 	br	8110e354 <__truncdfsf2+0xa0>
8110e34c:	00ffffc4 	movi	r3,-1
8110e350:	000d883a 	mov	r6,zero
8110e354:	18c03fcc 	andi	r3,r3,255
8110e358:	180895fa 	slli	r4,r3,23
8110e35c:	00c02034 	movhi	r3,128
8110e360:	280a97fa 	slli	r5,r5,31
8110e364:	18ffffc4 	addi	r3,r3,-1
8110e368:	30c6703a 	and	r3,r6,r3
8110e36c:	1906b03a 	or	r3,r3,r4
8110e370:	1944b03a 	or	r2,r3,r5
8110e374:	f800283a 	ret
8110e378:	40000b1e 	bne	r8,zero,8110e3a8 <__truncdfsf2+0xf4>
8110e37c:	388cb03a 	or	r6,r7,r2
8110e380:	0007883a 	mov	r3,zero
8110e384:	30000426 	beq	r6,zero,8110e398 <__truncdfsf2+0xe4>
8110e388:	01800144 	movi	r6,5
8110e38c:	00803fc4 	movi	r2,255
8110e390:	300cd0fa 	srli	r6,r6,3
8110e394:	18800a26 	beq	r3,r2,8110e3c0 <__truncdfsf2+0x10c>
8110e398:	00802034 	movhi	r2,128
8110e39c:	10bfffc4 	addi	r2,r2,-1
8110e3a0:	308c703a 	and	r6,r6,r2
8110e3a4:	003feb06 	br	8110e354 <__reset+0xfb0ee354>
8110e3a8:	3888b03a 	or	r4,r7,r2
8110e3ac:	203fe726 	beq	r4,zero,8110e34c <__reset+0xfb0ee34c>
8110e3b0:	380c90fa 	slli	r6,r7,3
8110e3b4:	00c03fc4 	movi	r3,255
8110e3b8:	31808034 	orhi	r6,r6,512
8110e3bc:	003fd506 	br	8110e314 <__reset+0xfb0ee314>
8110e3c0:	303fe226 	beq	r6,zero,8110e34c <__reset+0xfb0ee34c>
8110e3c4:	00802034 	movhi	r2,128
8110e3c8:	31801034 	orhi	r6,r6,64
8110e3cc:	10bfffc4 	addi	r2,r2,-1
8110e3d0:	00ffffc4 	movi	r3,-1
8110e3d4:	308c703a 	and	r6,r6,r2
8110e3d8:	003fde06 	br	8110e354 <__reset+0xfb0ee354>
8110e3dc:	013ffa44 	movi	r4,-23
8110e3e0:	19000e16 	blt	r3,r4,8110e41c <__truncdfsf2+0x168>
8110e3e4:	01000784 	movi	r4,30
8110e3e8:	20c9c83a 	sub	r4,r4,r3
8110e3ec:	018007c4 	movi	r6,31
8110e3f0:	39c02034 	orhi	r7,r7,128
8110e3f4:	31000b16 	blt	r6,r4,8110e424 <__truncdfsf2+0x170>
8110e3f8:	423f2084 	addi	r8,r8,-894
8110e3fc:	120c983a 	sll	r6,r2,r8
8110e400:	3a0e983a 	sll	r7,r7,r8
8110e404:	1104d83a 	srl	r2,r2,r4
8110e408:	300cc03a 	cmpne	r6,r6,zero
8110e40c:	31ceb03a 	or	r7,r6,r7
8110e410:	388cb03a 	or	r6,r7,r2
8110e414:	0007883a 	mov	r3,zero
8110e418:	003fbe06 	br	8110e314 <__reset+0xfb0ee314>
8110e41c:	0007883a 	mov	r3,zero
8110e420:	003fd906 	br	8110e388 <__reset+0xfb0ee388>
8110e424:	01bfff84 	movi	r6,-2
8110e428:	30cdc83a 	sub	r6,r6,r3
8110e42c:	00c00804 	movi	r3,32
8110e430:	398cd83a 	srl	r6,r7,r6
8110e434:	20c00726 	beq	r4,r3,8110e454 <__truncdfsf2+0x1a0>
8110e438:	423f2884 	addi	r8,r8,-862
8110e43c:	3a0e983a 	sll	r7,r7,r8
8110e440:	3884b03a 	or	r2,r7,r2
8110e444:	1004c03a 	cmpne	r2,r2,zero
8110e448:	118cb03a 	or	r6,r2,r6
8110e44c:	0007883a 	mov	r3,zero
8110e450:	003fb006 	br	8110e314 <__reset+0xfb0ee314>
8110e454:	000f883a 	mov	r7,zero
8110e458:	003ff906 	br	8110e440 <__reset+0xfb0ee440>

8110e45c <__clzsi2>:
8110e45c:	00bfffd4 	movui	r2,65535
8110e460:	11000536 	bltu	r2,r4,8110e478 <__clzsi2+0x1c>
8110e464:	00803fc4 	movi	r2,255
8110e468:	11000f36 	bltu	r2,r4,8110e4a8 <__clzsi2+0x4c>
8110e46c:	00800804 	movi	r2,32
8110e470:	0007883a 	mov	r3,zero
8110e474:	00000506 	br	8110e48c <__clzsi2+0x30>
8110e478:	00804034 	movhi	r2,256
8110e47c:	10bfffc4 	addi	r2,r2,-1
8110e480:	11000c2e 	bgeu	r2,r4,8110e4b4 <__clzsi2+0x58>
8110e484:	00800204 	movi	r2,8
8110e488:	00c00604 	movi	r3,24
8110e48c:	20c8d83a 	srl	r4,r4,r3
8110e490:	00e04534 	movhi	r3,33044
8110e494:	18ed3f04 	addi	r3,r3,-19204
8110e498:	1909883a 	add	r4,r3,r4
8110e49c:	20c00003 	ldbu	r3,0(r4)
8110e4a0:	10c5c83a 	sub	r2,r2,r3
8110e4a4:	f800283a 	ret
8110e4a8:	00800604 	movi	r2,24
8110e4ac:	00c00204 	movi	r3,8
8110e4b0:	003ff606 	br	8110e48c <__reset+0xfb0ee48c>
8110e4b4:	00800404 	movi	r2,16
8110e4b8:	1007883a 	mov	r3,r2
8110e4bc:	003ff306 	br	8110e48c <__reset+0xfb0ee48c>

8110e4c0 <atoi>:
8110e4c0:	01800284 	movi	r6,10
8110e4c4:	000b883a 	mov	r5,zero
8110e4c8:	11102901 	jmpi	81110290 <strtol>

8110e4cc <_atoi_r>:
8110e4cc:	01c00284 	movi	r7,10
8110e4d0:	000d883a 	mov	r6,zero
8110e4d4:	11100501 	jmpi	81110050 <_strtol_r>

8110e4d8 <_fopen_r>:
8110e4d8:	defffa04 	addi	sp,sp,-24
8110e4dc:	3005883a 	mov	r2,r6
8110e4e0:	de00012e 	bgeu	sp,et,8110e4e8 <_fopen_r+0x10>
8110e4e4:	003b68fa 	trap	3
8110e4e8:	d80d883a 	mov	r6,sp
8110e4ec:	dcc00415 	stw	r19,16(sp)
8110e4f0:	2827883a 	mov	r19,r5
8110e4f4:	100b883a 	mov	r5,r2
8110e4f8:	dc800315 	stw	r18,12(sp)
8110e4fc:	dfc00515 	stw	ra,20(sp)
8110e500:	dc400215 	stw	r17,8(sp)
8110e504:	dc000115 	stw	r16,4(sp)
8110e508:	2025883a 	mov	r18,r4
8110e50c:	11181380 	call	81118138 <__sflags>
8110e510:	10002726 	beq	r2,zero,8110e5b0 <_fopen_r+0xd8>
8110e514:	9009883a 	mov	r4,r18
8110e518:	1023883a 	mov	r17,r2
8110e51c:	1117fb00 	call	81117fb0 <__sfp>
8110e520:	1021883a 	mov	r16,r2
8110e524:	10002226 	beq	r2,zero,8110e5b0 <_fopen_r+0xd8>
8110e528:	d9800017 	ldw	r6,0(sp)
8110e52c:	01c06d84 	movi	r7,438
8110e530:	980b883a 	mov	r5,r19
8110e534:	9009883a 	mov	r4,r18
8110e538:	110f8940 	call	8110f894 <_open_r>
8110e53c:	10001916 	blt	r2,zero,8110e5a4 <_fopen_r+0xcc>
8110e540:	8080038d 	sth	r2,14(r16)
8110e544:	00a04474 	movhi	r2,33041
8110e548:	10bf8604 	addi	r2,r2,-488
8110e54c:	80800815 	stw	r2,32(r16)
8110e550:	00a04474 	movhi	r2,33041
8110e554:	10bf9f04 	addi	r2,r2,-388
8110e558:	80800915 	stw	r2,36(r16)
8110e55c:	00a04474 	movhi	r2,33041
8110e560:	10bfc004 	addi	r2,r2,-256
8110e564:	80800a15 	stw	r2,40(r16)
8110e568:	00a04474 	movhi	r2,33041
8110e56c:	10bfd904 	addi	r2,r2,-156
8110e570:	8440030d 	sth	r17,12(r16)
8110e574:	84000715 	stw	r16,28(r16)
8110e578:	80800b15 	stw	r2,44(r16)
8110e57c:	8c40400c 	andi	r17,r17,256
8110e580:	88000d1e 	bne	r17,zero,8110e5b8 <_fopen_r+0xe0>
8110e584:	8005883a 	mov	r2,r16
8110e588:	dfc00517 	ldw	ra,20(sp)
8110e58c:	dcc00417 	ldw	r19,16(sp)
8110e590:	dc800317 	ldw	r18,12(sp)
8110e594:	dc400217 	ldw	r17,8(sp)
8110e598:	dc000117 	ldw	r16,4(sp)
8110e59c:	dec00604 	addi	sp,sp,24
8110e5a0:	f800283a 	ret
8110e5a4:	11180f80 	call	811180f8 <__sfp_lock_acquire>
8110e5a8:	8000030d 	sth	zero,12(r16)
8110e5ac:	11180fc0 	call	811180fc <__sfp_lock_release>
8110e5b0:	0005883a 	mov	r2,zero
8110e5b4:	003ff406 	br	8110e588 <__reset+0xfb0ee588>
8110e5b8:	01c00084 	movi	r7,2
8110e5bc:	000d883a 	mov	r6,zero
8110e5c0:	800b883a 	mov	r5,r16
8110e5c4:	9009883a 	mov	r4,r18
8110e5c8:	110e6480 	call	8110e648 <_fseek_r>
8110e5cc:	8005883a 	mov	r2,r16
8110e5d0:	003fed06 	br	8110e588 <__reset+0xfb0ee588>

8110e5d4 <fopen>:
8110e5d4:	00a04534 	movhi	r2,33044
8110e5d8:	10b73304 	addi	r2,r2,-9012
8110e5dc:	280d883a 	mov	r6,r5
8110e5e0:	200b883a 	mov	r5,r4
8110e5e4:	11000017 	ldw	r4,0(r2)
8110e5e8:	110e4d81 	jmpi	8110e4d8 <_fopen_r>

8110e5ec <_fprintf_r>:
8110e5ec:	defffe04 	addi	sp,sp,-8
8110e5f0:	2809883a 	mov	r4,r5
8110e5f4:	300b883a 	mov	r5,r6
8110e5f8:	de00012e 	bgeu	sp,et,8110e600 <_fprintf_r+0x14>
8110e5fc:	003b68fa 	trap	3
8110e600:	dfc00015 	stw	ra,0(sp)
8110e604:	d9c00115 	stw	r7,4(sp)
8110e608:	d9800104 	addi	r6,sp,4
8110e60c:	111468c0 	call	8111468c <__vfprintf_internal>
8110e610:	dfc00017 	ldw	ra,0(sp)
8110e614:	dec00204 	addi	sp,sp,8
8110e618:	f800283a 	ret

8110e61c <fprintf>:
8110e61c:	defffd04 	addi	sp,sp,-12
8110e620:	de00012e 	bgeu	sp,et,8110e628 <fprintf+0xc>
8110e624:	003b68fa 	trap	3
8110e628:	dfc00015 	stw	ra,0(sp)
8110e62c:	d9800115 	stw	r6,4(sp)
8110e630:	d9c00215 	stw	r7,8(sp)
8110e634:	d9800104 	addi	r6,sp,4
8110e638:	111468c0 	call	8111468c <__vfprintf_internal>
8110e63c:	dfc00017 	ldw	ra,0(sp)
8110e640:	dec00304 	addi	sp,sp,12
8110e644:	f800283a 	ret

8110e648 <_fseek_r>:
8110e648:	110e6681 	jmpi	8110e668 <_fseeko_r>

8110e64c <fseek>:
8110e64c:	00a04534 	movhi	r2,33044
8110e650:	10b73304 	addi	r2,r2,-9012
8110e654:	300f883a 	mov	r7,r6
8110e658:	280d883a 	mov	r6,r5
8110e65c:	200b883a 	mov	r5,r4
8110e660:	11000017 	ldw	r4,0(r2)
8110e664:	110e6681 	jmpi	8110e668 <_fseeko_r>

8110e668 <_fseeko_r>:
8110e668:	deffe804 	addi	sp,sp,-96
8110e66c:	de00012e 	bgeu	sp,et,8110e674 <_fseeko_r+0xc>
8110e670:	003b68fa 	trap	3
8110e674:	dd401415 	stw	r21,80(sp)
8110e678:	dc801115 	stw	r18,68(sp)
8110e67c:	dc401015 	stw	r17,64(sp)
8110e680:	dc000f15 	stw	r16,60(sp)
8110e684:	dfc01715 	stw	ra,92(sp)
8110e688:	ddc01615 	stw	r23,88(sp)
8110e68c:	dd801515 	stw	r22,84(sp)
8110e690:	dd001315 	stw	r20,76(sp)
8110e694:	dcc01215 	stw	r19,72(sp)
8110e698:	2023883a 	mov	r17,r4
8110e69c:	2821883a 	mov	r16,r5
8110e6a0:	302b883a 	mov	r21,r6
8110e6a4:	3825883a 	mov	r18,r7
8110e6a8:	20000226 	beq	r4,zero,8110e6b4 <_fseeko_r+0x4c>
8110e6ac:	20800e17 	ldw	r2,56(r4)
8110e6b0:	10005a26 	beq	r2,zero,8110e81c <_fseeko_r+0x1b4>
8110e6b4:	8080030b 	ldhu	r2,12(r16)
8110e6b8:	00c04204 	movi	r3,264
8110e6bc:	1080420c 	andi	r2,r2,264
8110e6c0:	10c05b26 	beq	r2,r3,8110e830 <_fseeko_r+0x1c8>
8110e6c4:	85000a17 	ldw	r20,40(r16)
8110e6c8:	a000f626 	beq	r20,zero,8110eaa4 <_fseeko_r+0x43c>
8110e6cc:	00800044 	movi	r2,1
8110e6d0:	90803e26 	beq	r18,r2,8110e7cc <_fseeko_r+0x164>
8110e6d4:	00800084 	movi	r2,2
8110e6d8:	90801026 	beq	r18,r2,8110e71c <_fseeko_r+0xb4>
8110e6dc:	90000f26 	beq	r18,zero,8110e71c <_fseeko_r+0xb4>
8110e6e0:	00800584 	movi	r2,22
8110e6e4:	88800015 	stw	r2,0(r17)
8110e6e8:	04ffffc4 	movi	r19,-1
8110e6ec:	9805883a 	mov	r2,r19
8110e6f0:	dfc01717 	ldw	ra,92(sp)
8110e6f4:	ddc01617 	ldw	r23,88(sp)
8110e6f8:	dd801517 	ldw	r22,84(sp)
8110e6fc:	dd401417 	ldw	r21,80(sp)
8110e700:	dd001317 	ldw	r20,76(sp)
8110e704:	dcc01217 	ldw	r19,72(sp)
8110e708:	dc801117 	ldw	r18,68(sp)
8110e70c:	dc401017 	ldw	r17,64(sp)
8110e710:	dc000f17 	ldw	r16,60(sp)
8110e714:	dec01804 	addi	sp,sp,96
8110e718:	f800283a 	ret
8110e71c:	80800417 	ldw	r2,16(r16)
8110e720:	002f883a 	mov	r23,zero
8110e724:	0027883a 	mov	r19,zero
8110e728:	1000cb26 	beq	r2,zero,8110ea58 <_fseeko_r+0x3f0>
8110e72c:	8080030b 	ldhu	r2,12(r16)
8110e730:	10c2068c 	andi	r3,r2,2074
8110e734:	1800071e 	bne	r3,zero,8110e754 <_fseeko_r+0xec>
8110e738:	10c1000c 	andi	r3,r2,1024
8110e73c:	1800451e 	bne	r3,zero,8110e854 <_fseeko_r+0x1ec>
8110e740:	00e04474 	movhi	r3,33041
8110e744:	18ffc004 	addi	r3,r3,-256
8110e748:	a0c0b726 	beq	r20,r3,8110ea28 <_fseeko_r+0x3c0>
8110e74c:	10820014 	ori	r2,r2,2048
8110e750:	8080030d 	sth	r2,12(r16)
8110e754:	800b883a 	mov	r5,r16
8110e758:	8809883a 	mov	r4,r17
8110e75c:	1117cec0 	call	81117cec <_fflush_r>
8110e760:	1027883a 	mov	r19,r2
8110e764:	103fe01e 	bne	r2,zero,8110e6e8 <__reset+0xfb0ee6e8>
8110e768:	81400717 	ldw	r5,28(r16)
8110e76c:	900f883a 	mov	r7,r18
8110e770:	a80d883a 	mov	r6,r21
8110e774:	8809883a 	mov	r4,r17
8110e778:	a03ee83a 	callr	r20
8110e77c:	00ffffc4 	movi	r3,-1
8110e780:	10ffd926 	beq	r2,r3,8110e6e8 <__reset+0xfb0ee6e8>
8110e784:	81400c17 	ldw	r5,48(r16)
8110e788:	28000526 	beq	r5,zero,8110e7a0 <_fseeko_r+0x138>
8110e78c:	80801004 	addi	r2,r16,64
8110e790:	28800226 	beq	r5,r2,8110e79c <_fseeko_r+0x134>
8110e794:	8809883a 	mov	r4,r17
8110e798:	11185800 	call	81118580 <_free_r>
8110e79c:	80000c15 	stw	zero,48(r16)
8110e7a0:	8080030b 	ldhu	r2,12(r16)
8110e7a4:	80c00417 	ldw	r3,16(r16)
8110e7a8:	80000115 	stw	zero,4(r16)
8110e7ac:	10bdf7cc 	andi	r2,r2,63455
8110e7b0:	80c00015 	stw	r3,0(r16)
8110e7b4:	8080030d 	sth	r2,12(r16)
8110e7b8:	01800204 	movi	r6,8
8110e7bc:	000b883a 	mov	r5,zero
8110e7c0:	81001704 	addi	r4,r16,92
8110e7c4:	110f76c0 	call	8110f76c <memset>
8110e7c8:	003fc806 	br	8110e6ec <__reset+0xfb0ee6ec>
8110e7cc:	800b883a 	mov	r5,r16
8110e7d0:	8809883a 	mov	r4,r17
8110e7d4:	1117cec0 	call	81117cec <_fflush_r>
8110e7d8:	8080030b 	ldhu	r2,12(r16)
8110e7dc:	10c4000c 	andi	r3,r2,4096
8110e7e0:	18008726 	beq	r3,zero,8110ea00 <_fseeko_r+0x398>
8110e7e4:	84c01417 	ldw	r19,80(r16)
8110e7e8:	10c0010c 	andi	r3,r2,4
8110e7ec:	1800431e 	bne	r3,zero,8110e8fc <_fseeko_r+0x294>
8110e7f0:	1080020c 	andi	r2,r2,8
8110e7f4:	10008026 	beq	r2,zero,8110e9f8 <_fseeko_r+0x390>
8110e7f8:	80c00017 	ldw	r3,0(r16)
8110e7fc:	80800417 	ldw	r2,16(r16)
8110e800:	18000226 	beq	r3,zero,8110e80c <_fseeko_r+0x1a4>
8110e804:	1887c83a 	sub	r3,r3,r2
8110e808:	98e7883a 	add	r19,r19,r3
8110e80c:	aceb883a 	add	r21,r21,r19
8110e810:	05c00044 	movi	r23,1
8110e814:	0025883a 	mov	r18,zero
8110e818:	003fc306 	br	8110e728 <__reset+0xfb0ee728>
8110e81c:	11180e80 	call	811180e8 <__sinit>
8110e820:	8080030b 	ldhu	r2,12(r16)
8110e824:	00c04204 	movi	r3,264
8110e828:	1080420c 	andi	r2,r2,264
8110e82c:	10ffa51e 	bne	r2,r3,8110e6c4 <__reset+0xfb0ee6c4>
8110e830:	800b883a 	mov	r5,r16
8110e834:	8809883a 	mov	r4,r17
8110e838:	1117cec0 	call	81117cec <_fflush_r>
8110e83c:	003fa106 	br	8110e6c4 <__reset+0xfb0ee6c4>
8110e840:	8080030b 	ldhu	r2,12(r16)
8110e844:	00c10004 	movi	r3,1024
8110e848:	80c01315 	stw	r3,76(r16)
8110e84c:	10c4b03a 	or	r2,r2,r3
8110e850:	8080030d 	sth	r2,12(r16)
8110e854:	9000311e 	bne	r18,zero,8110e91c <_fseeko_r+0x2b4>
8110e858:	a82d883a 	mov	r22,r21
8110e85c:	b800371e 	bne	r23,zero,8110e93c <_fseeko_r+0x2d4>
8110e860:	8080030b 	ldhu	r2,12(r16)
8110e864:	1084000c 	andi	r2,r2,4096
8110e868:	10007f26 	beq	r2,zero,8110ea68 <_fseeko_r+0x400>
8110e86c:	80801417 	ldw	r2,80(r16)
8110e870:	81800117 	ldw	r6,4(r16)
8110e874:	81400c17 	ldw	r5,48(r16)
8110e878:	11a7c83a 	sub	r19,r2,r6
8110e87c:	28008226 	beq	r5,zero,8110ea88 <_fseeko_r+0x420>
8110e880:	81c00f17 	ldw	r7,60(r16)
8110e884:	99e7c83a 	sub	r19,r19,r7
8110e888:	81000e17 	ldw	r4,56(r16)
8110e88c:	80800417 	ldw	r2,16(r16)
8110e890:	99a7883a 	add	r19,r19,r6
8110e894:	2087c83a 	sub	r3,r4,r2
8110e898:	98e7c83a 	sub	r19,r19,r3
8110e89c:	38c7883a 	add	r3,r7,r3
8110e8a0:	b4c02b16 	blt	r22,r19,8110e950 <_fseeko_r+0x2e8>
8110e8a4:	98c9883a 	add	r4,r19,r3
8110e8a8:	b100292e 	bgeu	r22,r4,8110e950 <_fseeko_r+0x2e8>
8110e8ac:	b4e7c83a 	sub	r19,r22,r19
8110e8b0:	14c5883a 	add	r2,r2,r19
8110e8b4:	1ce7c83a 	sub	r19,r3,r19
8110e8b8:	80800015 	stw	r2,0(r16)
8110e8bc:	84c00115 	stw	r19,4(r16)
8110e8c0:	28000526 	beq	r5,zero,8110e8d8 <_fseeko_r+0x270>
8110e8c4:	80801004 	addi	r2,r16,64
8110e8c8:	28800226 	beq	r5,r2,8110e8d4 <_fseeko_r+0x26c>
8110e8cc:	8809883a 	mov	r4,r17
8110e8d0:	11185800 	call	81118580 <_free_r>
8110e8d4:	80000c15 	stw	zero,48(r16)
8110e8d8:	8080030b 	ldhu	r2,12(r16)
8110e8dc:	01800204 	movi	r6,8
8110e8e0:	000b883a 	mov	r5,zero
8110e8e4:	10bff7cc 	andi	r2,r2,65503
8110e8e8:	8080030d 	sth	r2,12(r16)
8110e8ec:	81001704 	addi	r4,r16,92
8110e8f0:	110f76c0 	call	8110f76c <memset>
8110e8f4:	0027883a 	mov	r19,zero
8110e8f8:	003f7c06 	br	8110e6ec <__reset+0xfb0ee6ec>
8110e8fc:	80c00117 	ldw	r3,4(r16)
8110e900:	80800c17 	ldw	r2,48(r16)
8110e904:	98e7c83a 	sub	r19,r19,r3
8110e908:	10003b26 	beq	r2,zero,8110e9f8 <_fseeko_r+0x390>
8110e90c:	80c00f17 	ldw	r3,60(r16)
8110e910:	80800417 	ldw	r2,16(r16)
8110e914:	98e7c83a 	sub	r19,r19,r3
8110e918:	003fbc06 	br	8110e80c <__reset+0xfb0ee80c>
8110e91c:	8140038f 	ldh	r5,14(r16)
8110e920:	d80d883a 	mov	r6,sp
8110e924:	8809883a 	mov	r4,r17
8110e928:	110ead00 	call	8110ead0 <_fstat_r>
8110e92c:	103f891e 	bne	r2,zero,8110e754 <__reset+0xfb0ee754>
8110e930:	dd800417 	ldw	r22,16(sp)
8110e934:	adad883a 	add	r22,r21,r22
8110e938:	b83fc926 	beq	r23,zero,8110e860 <__reset+0xfb0ee860>
8110e93c:	81400c17 	ldw	r5,48(r16)
8110e940:	81800117 	ldw	r6,4(r16)
8110e944:	28005026 	beq	r5,zero,8110ea88 <_fseeko_r+0x420>
8110e948:	81c00f17 	ldw	r7,60(r16)
8110e94c:	003fce06 	br	8110e888 <__reset+0xfb0ee888>
8110e950:	84c01317 	ldw	r19,76(r16)
8110e954:	81400717 	ldw	r5,28(r16)
8110e958:	000f883a 	mov	r7,zero
8110e95c:	04e7c83a 	sub	r19,zero,r19
8110e960:	9da6703a 	and	r19,r19,r22
8110e964:	980d883a 	mov	r6,r19
8110e968:	8809883a 	mov	r4,r17
8110e96c:	a03ee83a 	callr	r20
8110e970:	00ffffc4 	movi	r3,-1
8110e974:	10ff7726 	beq	r2,r3,8110e754 <__reset+0xfb0ee754>
8110e978:	80800417 	ldw	r2,16(r16)
8110e97c:	81400c17 	ldw	r5,48(r16)
8110e980:	80000115 	stw	zero,4(r16)
8110e984:	80800015 	stw	r2,0(r16)
8110e988:	28000526 	beq	r5,zero,8110e9a0 <_fseeko_r+0x338>
8110e98c:	80801004 	addi	r2,r16,64
8110e990:	28800226 	beq	r5,r2,8110e99c <_fseeko_r+0x334>
8110e994:	8809883a 	mov	r4,r17
8110e998:	11185800 	call	81118580 <_free_r>
8110e99c:	80000c15 	stw	zero,48(r16)
8110e9a0:	8080030b 	ldhu	r2,12(r16)
8110e9a4:	b4e7c83a 	sub	r19,r22,r19
8110e9a8:	10bff7cc 	andi	r2,r2,65503
8110e9ac:	8080030d 	sth	r2,12(r16)
8110e9b0:	98000b26 	beq	r19,zero,8110e9e0 <_fseeko_r+0x378>
8110e9b4:	800b883a 	mov	r5,r16
8110e9b8:	8809883a 	mov	r4,r17
8110e9bc:	110fa900 	call	8110fa90 <__srefill_r>
8110e9c0:	103f641e 	bne	r2,zero,8110e754 <__reset+0xfb0ee754>
8110e9c4:	80800117 	ldw	r2,4(r16)
8110e9c8:	14ff6236 	bltu	r2,r19,8110e754 <__reset+0xfb0ee754>
8110e9cc:	80c00017 	ldw	r3,0(r16)
8110e9d0:	14c5c83a 	sub	r2,r2,r19
8110e9d4:	80800115 	stw	r2,4(r16)
8110e9d8:	1ce7883a 	add	r19,r3,r19
8110e9dc:	84c00015 	stw	r19,0(r16)
8110e9e0:	01800204 	movi	r6,8
8110e9e4:	000b883a 	mov	r5,zero
8110e9e8:	81001704 	addi	r4,r16,92
8110e9ec:	110f76c0 	call	8110f76c <memset>
8110e9f0:	0027883a 	mov	r19,zero
8110e9f4:	003f3d06 	br	8110e6ec <__reset+0xfb0ee6ec>
8110e9f8:	80800417 	ldw	r2,16(r16)
8110e9fc:	003f8306 	br	8110e80c <__reset+0xfb0ee80c>
8110ea00:	81400717 	ldw	r5,28(r16)
8110ea04:	900f883a 	mov	r7,r18
8110ea08:	000d883a 	mov	r6,zero
8110ea0c:	8809883a 	mov	r4,r17
8110ea10:	a03ee83a 	callr	r20
8110ea14:	1027883a 	mov	r19,r2
8110ea18:	00bfffc4 	movi	r2,-1
8110ea1c:	98bf3226 	beq	r19,r2,8110e6e8 <__reset+0xfb0ee6e8>
8110ea20:	8080030b 	ldhu	r2,12(r16)
8110ea24:	003f7006 	br	8110e7e8 <__reset+0xfb0ee7e8>
8110ea28:	8140038f 	ldh	r5,14(r16)
8110ea2c:	283f4716 	blt	r5,zero,8110e74c <__reset+0xfb0ee74c>
8110ea30:	d80d883a 	mov	r6,sp
8110ea34:	8809883a 	mov	r4,r17
8110ea38:	110ead00 	call	8110ead0 <_fstat_r>
8110ea3c:	1000041e 	bne	r2,zero,8110ea50 <_fseeko_r+0x3e8>
8110ea40:	d8800117 	ldw	r2,4(sp)
8110ea44:	00e00014 	movui	r3,32768
8110ea48:	10bc000c 	andi	r2,r2,61440
8110ea4c:	10ff7c26 	beq	r2,r3,8110e840 <__reset+0xfb0ee840>
8110ea50:	8080030b 	ldhu	r2,12(r16)
8110ea54:	003f3d06 	br	8110e74c <__reset+0xfb0ee74c>
8110ea58:	800b883a 	mov	r5,r16
8110ea5c:	8809883a 	mov	r4,r17
8110ea60:	110ec440 	call	8110ec44 <__smakebuf_r>
8110ea64:	003f3106 	br	8110e72c <__reset+0xfb0ee72c>
8110ea68:	81400717 	ldw	r5,28(r16)
8110ea6c:	01c00044 	movi	r7,1
8110ea70:	000d883a 	mov	r6,zero
8110ea74:	8809883a 	mov	r4,r17
8110ea78:	a03ee83a 	callr	r20
8110ea7c:	00ffffc4 	movi	r3,-1
8110ea80:	10ff7b1e 	bne	r2,r3,8110e870 <__reset+0xfb0ee870>
8110ea84:	003f3306 	br	8110e754 <__reset+0xfb0ee754>
8110ea88:	80c00017 	ldw	r3,0(r16)
8110ea8c:	80800417 	ldw	r2,16(r16)
8110ea90:	000b883a 	mov	r5,zero
8110ea94:	1887c83a 	sub	r3,r3,r2
8110ea98:	98e7c83a 	sub	r19,r19,r3
8110ea9c:	30c7883a 	add	r3,r6,r3
8110eaa0:	003f7f06 	br	8110e8a0 <__reset+0xfb0ee8a0>
8110eaa4:	00800744 	movi	r2,29
8110eaa8:	88800015 	stw	r2,0(r17)
8110eaac:	04ffffc4 	movi	r19,-1
8110eab0:	003f0e06 	br	8110e6ec <__reset+0xfb0ee6ec>

8110eab4 <fseeko>:
8110eab4:	00a04534 	movhi	r2,33044
8110eab8:	10b73304 	addi	r2,r2,-9012
8110eabc:	300f883a 	mov	r7,r6
8110eac0:	280d883a 	mov	r6,r5
8110eac4:	200b883a 	mov	r5,r4
8110eac8:	11000017 	ldw	r4,0(r2)
8110eacc:	110e6681 	jmpi	8110e668 <_fseeko_r>

8110ead0 <_fstat_r>:
8110ead0:	defffd04 	addi	sp,sp,-12
8110ead4:	de00012e 	bgeu	sp,et,8110eadc <_fstat_r+0xc>
8110ead8:	003b68fa 	trap	3
8110eadc:	2805883a 	mov	r2,r5
8110eae0:	dc000015 	stw	r16,0(sp)
8110eae4:	04204534 	movhi	r16,33044
8110eae8:	dc400115 	stw	r17,4(sp)
8110eaec:	84379304 	addi	r16,r16,-8628
8110eaf0:	2023883a 	mov	r17,r4
8110eaf4:	300b883a 	mov	r5,r6
8110eaf8:	1009883a 	mov	r4,r2
8110eafc:	dfc00215 	stw	ra,8(sp)
8110eb00:	80000015 	stw	zero,0(r16)
8110eb04:	1123f680 	call	81123f68 <fstat>
8110eb08:	00ffffc4 	movi	r3,-1
8110eb0c:	10c00526 	beq	r2,r3,8110eb24 <_fstat_r+0x54>
8110eb10:	dfc00217 	ldw	ra,8(sp)
8110eb14:	dc400117 	ldw	r17,4(sp)
8110eb18:	dc000017 	ldw	r16,0(sp)
8110eb1c:	dec00304 	addi	sp,sp,12
8110eb20:	f800283a 	ret
8110eb24:	80c00017 	ldw	r3,0(r16)
8110eb28:	183ff926 	beq	r3,zero,8110eb10 <__reset+0xfb0eeb10>
8110eb2c:	88c00015 	stw	r3,0(r17)
8110eb30:	003ff706 	br	8110eb10 <__reset+0xfb0eeb10>

8110eb34 <_fwrite_r>:
8110eb34:	defff504 	addi	sp,sp,-44
8110eb38:	de00012e 	bgeu	sp,et,8110eb40 <_fwrite_r+0xc>
8110eb3c:	003b68fa 	trap	3
8110eb40:	dc800815 	stw	r18,32(sp)
8110eb44:	39a5383a 	mul	r18,r7,r6
8110eb48:	d8800304 	addi	r2,sp,12
8110eb4c:	d8800015 	stw	r2,0(sp)
8110eb50:	00800044 	movi	r2,1
8110eb54:	dcc00915 	stw	r19,36(sp)
8110eb58:	dc400715 	stw	r17,28(sp)
8110eb5c:	dc000615 	stw	r16,24(sp)
8110eb60:	d9400315 	stw	r5,12(sp)
8110eb64:	dfc00a15 	stw	ra,40(sp)
8110eb68:	dc800415 	stw	r18,16(sp)
8110eb6c:	dc800215 	stw	r18,8(sp)
8110eb70:	d8800115 	stw	r2,4(sp)
8110eb74:	3027883a 	mov	r19,r6
8110eb78:	3821883a 	mov	r16,r7
8110eb7c:	2023883a 	mov	r17,r4
8110eb80:	d9400b17 	ldw	r5,44(sp)
8110eb84:	20000226 	beq	r4,zero,8110eb90 <_fwrite_r+0x5c>
8110eb88:	20800e17 	ldw	r2,56(r4)
8110eb8c:	10001a26 	beq	r2,zero,8110ebf8 <_fwrite_r+0xc4>
8110eb90:	2880030b 	ldhu	r2,12(r5)
8110eb94:	10c8000c 	andi	r3,r2,8192
8110eb98:	1800061e 	bne	r3,zero,8110ebb4 <_fwrite_r+0x80>
8110eb9c:	29001917 	ldw	r4,100(r5)
8110eba0:	00f7ffc4 	movi	r3,-8193
8110eba4:	10880014 	ori	r2,r2,8192
8110eba8:	20c6703a 	and	r3,r4,r3
8110ebac:	2880030d 	sth	r2,12(r5)
8110ebb0:	28c01915 	stw	r3,100(r5)
8110ebb4:	d80d883a 	mov	r6,sp
8110ebb8:	8809883a 	mov	r4,r17
8110ebbc:	11188980 	call	81118898 <__sfvwrite_r>
8110ebc0:	10000b26 	beq	r2,zero,8110ebf0 <_fwrite_r+0xbc>
8110ebc4:	d9000217 	ldw	r4,8(sp)
8110ebc8:	980b883a 	mov	r5,r19
8110ebcc:	9109c83a 	sub	r4,r18,r4
8110ebd0:	1121be00 	call	81121be0 <__udivsi3>
8110ebd4:	dfc00a17 	ldw	ra,40(sp)
8110ebd8:	dcc00917 	ldw	r19,36(sp)
8110ebdc:	dc800817 	ldw	r18,32(sp)
8110ebe0:	dc400717 	ldw	r17,28(sp)
8110ebe4:	dc000617 	ldw	r16,24(sp)
8110ebe8:	dec00b04 	addi	sp,sp,44
8110ebec:	f800283a 	ret
8110ebf0:	8005883a 	mov	r2,r16
8110ebf4:	003ff706 	br	8110ebd4 <__reset+0xfb0eebd4>
8110ebf8:	d9400515 	stw	r5,20(sp)
8110ebfc:	11180e80 	call	811180e8 <__sinit>
8110ec00:	d9400517 	ldw	r5,20(sp)
8110ec04:	003fe206 	br	8110eb90 <__reset+0xfb0eeb90>

8110ec08 <fwrite>:
8110ec08:	defffe04 	addi	sp,sp,-8
8110ec0c:	00a04534 	movhi	r2,33044
8110ec10:	de00012e 	bgeu	sp,et,8110ec18 <fwrite+0x10>
8110ec14:	003b68fa 	trap	3
8110ec18:	10b73304 	addi	r2,r2,-9012
8110ec1c:	d9c00015 	stw	r7,0(sp)
8110ec20:	300f883a 	mov	r7,r6
8110ec24:	280d883a 	mov	r6,r5
8110ec28:	200b883a 	mov	r5,r4
8110ec2c:	11000017 	ldw	r4,0(r2)
8110ec30:	dfc00115 	stw	ra,4(sp)
8110ec34:	110eb340 	call	8110eb34 <_fwrite_r>
8110ec38:	dfc00117 	ldw	ra,4(sp)
8110ec3c:	dec00204 	addi	sp,sp,8
8110ec40:	f800283a 	ret

8110ec44 <__smakebuf_r>:
8110ec44:	2880030b 	ldhu	r2,12(r5)
8110ec48:	10c0008c 	andi	r3,r2,2
8110ec4c:	1800431e 	bne	r3,zero,8110ed5c <__smakebuf_r+0x118>
8110ec50:	deffec04 	addi	sp,sp,-80
8110ec54:	de00012e 	bgeu	sp,et,8110ec5c <__smakebuf_r+0x18>
8110ec58:	003b68fa 	trap	3
8110ec5c:	dc000f15 	stw	r16,60(sp)
8110ec60:	2821883a 	mov	r16,r5
8110ec64:	2940038f 	ldh	r5,14(r5)
8110ec68:	dc401015 	stw	r17,64(sp)
8110ec6c:	dfc01315 	stw	ra,76(sp)
8110ec70:	dcc01215 	stw	r19,72(sp)
8110ec74:	dc801115 	stw	r18,68(sp)
8110ec78:	2023883a 	mov	r17,r4
8110ec7c:	28001c16 	blt	r5,zero,8110ecf0 <__smakebuf_r+0xac>
8110ec80:	d80d883a 	mov	r6,sp
8110ec84:	110ead00 	call	8110ead0 <_fstat_r>
8110ec88:	10001816 	blt	r2,zero,8110ecec <__smakebuf_r+0xa8>
8110ec8c:	d8800117 	ldw	r2,4(sp)
8110ec90:	00e00014 	movui	r3,32768
8110ec94:	10bc000c 	andi	r2,r2,61440
8110ec98:	14c80020 	cmpeqi	r19,r2,8192
8110ec9c:	10c03726 	beq	r2,r3,8110ed7c <__smakebuf_r+0x138>
8110eca0:	80c0030b 	ldhu	r3,12(r16)
8110eca4:	18c20014 	ori	r3,r3,2048
8110eca8:	80c0030d 	sth	r3,12(r16)
8110ecac:	00c80004 	movi	r3,8192
8110ecb0:	10c0521e 	bne	r2,r3,8110edfc <__smakebuf_r+0x1b8>
8110ecb4:	8140038f 	ldh	r5,14(r16)
8110ecb8:	8809883a 	mov	r4,r17
8110ecbc:	1118ef40 	call	81118ef4 <_isatty_r>
8110ecc0:	10004c26 	beq	r2,zero,8110edf4 <__smakebuf_r+0x1b0>
8110ecc4:	8080030b 	ldhu	r2,12(r16)
8110ecc8:	80c010c4 	addi	r3,r16,67
8110eccc:	80c00015 	stw	r3,0(r16)
8110ecd0:	10800054 	ori	r2,r2,1
8110ecd4:	8080030d 	sth	r2,12(r16)
8110ecd8:	00800044 	movi	r2,1
8110ecdc:	80c00415 	stw	r3,16(r16)
8110ece0:	80800515 	stw	r2,20(r16)
8110ece4:	04810004 	movi	r18,1024
8110ece8:	00000706 	br	8110ed08 <__smakebuf_r+0xc4>
8110ecec:	8080030b 	ldhu	r2,12(r16)
8110ecf0:	10c0200c 	andi	r3,r2,128
8110ecf4:	18001f1e 	bne	r3,zero,8110ed74 <__smakebuf_r+0x130>
8110ecf8:	04810004 	movi	r18,1024
8110ecfc:	10820014 	ori	r2,r2,2048
8110ed00:	8080030d 	sth	r2,12(r16)
8110ed04:	0027883a 	mov	r19,zero
8110ed08:	900b883a 	mov	r5,r18
8110ed0c:	8809883a 	mov	r4,r17
8110ed10:	110ee080 	call	8110ee08 <_malloc_r>
8110ed14:	10002c26 	beq	r2,zero,8110edc8 <__smakebuf_r+0x184>
8110ed18:	80c0030b 	ldhu	r3,12(r16)
8110ed1c:	01204474 	movhi	r4,33041
8110ed20:	211f6204 	addi	r4,r4,32136
8110ed24:	89000f15 	stw	r4,60(r17)
8110ed28:	18c02014 	ori	r3,r3,128
8110ed2c:	80c0030d 	sth	r3,12(r16)
8110ed30:	80800015 	stw	r2,0(r16)
8110ed34:	80800415 	stw	r2,16(r16)
8110ed38:	84800515 	stw	r18,20(r16)
8110ed3c:	98001a1e 	bne	r19,zero,8110eda8 <__smakebuf_r+0x164>
8110ed40:	dfc01317 	ldw	ra,76(sp)
8110ed44:	dcc01217 	ldw	r19,72(sp)
8110ed48:	dc801117 	ldw	r18,68(sp)
8110ed4c:	dc401017 	ldw	r17,64(sp)
8110ed50:	dc000f17 	ldw	r16,60(sp)
8110ed54:	dec01404 	addi	sp,sp,80
8110ed58:	f800283a 	ret
8110ed5c:	288010c4 	addi	r2,r5,67
8110ed60:	28800015 	stw	r2,0(r5)
8110ed64:	28800415 	stw	r2,16(r5)
8110ed68:	00800044 	movi	r2,1
8110ed6c:	28800515 	stw	r2,20(r5)
8110ed70:	f800283a 	ret
8110ed74:	04801004 	movi	r18,64
8110ed78:	003fe006 	br	8110ecfc <__reset+0xfb0eecfc>
8110ed7c:	81000a17 	ldw	r4,40(r16)
8110ed80:	00e04474 	movhi	r3,33041
8110ed84:	18ffc004 	addi	r3,r3,-256
8110ed88:	20ffc51e 	bne	r4,r3,8110eca0 <__reset+0xfb0eeca0>
8110ed8c:	8080030b 	ldhu	r2,12(r16)
8110ed90:	04810004 	movi	r18,1024
8110ed94:	84801315 	stw	r18,76(r16)
8110ed98:	1484b03a 	or	r2,r2,r18
8110ed9c:	8080030d 	sth	r2,12(r16)
8110eda0:	0027883a 	mov	r19,zero
8110eda4:	003fd806 	br	8110ed08 <__reset+0xfb0eed08>
8110eda8:	8140038f 	ldh	r5,14(r16)
8110edac:	8809883a 	mov	r4,r17
8110edb0:	1118ef40 	call	81118ef4 <_isatty_r>
8110edb4:	103fe226 	beq	r2,zero,8110ed40 <__reset+0xfb0eed40>
8110edb8:	8080030b 	ldhu	r2,12(r16)
8110edbc:	10800054 	ori	r2,r2,1
8110edc0:	8080030d 	sth	r2,12(r16)
8110edc4:	003fde06 	br	8110ed40 <__reset+0xfb0eed40>
8110edc8:	8080030b 	ldhu	r2,12(r16)
8110edcc:	10c0800c 	andi	r3,r2,512
8110edd0:	183fdb1e 	bne	r3,zero,8110ed40 <__reset+0xfb0eed40>
8110edd4:	10800094 	ori	r2,r2,2
8110edd8:	80c010c4 	addi	r3,r16,67
8110eddc:	8080030d 	sth	r2,12(r16)
8110ede0:	00800044 	movi	r2,1
8110ede4:	80c00015 	stw	r3,0(r16)
8110ede8:	80c00415 	stw	r3,16(r16)
8110edec:	80800515 	stw	r2,20(r16)
8110edf0:	003fd306 	br	8110ed40 <__reset+0xfb0eed40>
8110edf4:	04810004 	movi	r18,1024
8110edf8:	003fc306 	br	8110ed08 <__reset+0xfb0eed08>
8110edfc:	0027883a 	mov	r19,zero
8110ee00:	04810004 	movi	r18,1024
8110ee04:	003fc006 	br	8110ed08 <__reset+0xfb0eed08>

8110ee08 <_malloc_r>:
8110ee08:	defff504 	addi	sp,sp,-44
8110ee0c:	de00012e 	bgeu	sp,et,8110ee14 <_malloc_r+0xc>
8110ee10:	003b68fa 	trap	3
8110ee14:	288002c4 	addi	r2,r5,11
8110ee18:	dc800315 	stw	r18,12(sp)
8110ee1c:	dfc00a15 	stw	ra,40(sp)
8110ee20:	df000915 	stw	fp,36(sp)
8110ee24:	ddc00815 	stw	r23,32(sp)
8110ee28:	dd800715 	stw	r22,28(sp)
8110ee2c:	dd400615 	stw	r21,24(sp)
8110ee30:	dd000515 	stw	r20,20(sp)
8110ee34:	dcc00415 	stw	r19,16(sp)
8110ee38:	dc400215 	stw	r17,8(sp)
8110ee3c:	dc000115 	stw	r16,4(sp)
8110ee40:	00c00584 	movi	r3,22
8110ee44:	2025883a 	mov	r18,r4
8110ee48:	18807f2e 	bgeu	r3,r2,8110f048 <_malloc_r+0x240>
8110ee4c:	047ffe04 	movi	r17,-8
8110ee50:	1462703a 	and	r17,r2,r17
8110ee54:	8800a316 	blt	r17,zero,8110f0e4 <_malloc_r+0x2dc>
8110ee58:	8940a236 	bltu	r17,r5,8110f0e4 <_malloc_r+0x2dc>
8110ee5c:	1124d780 	call	81124d78 <__malloc_lock>
8110ee60:	00807dc4 	movi	r2,503
8110ee64:	1441e92e 	bgeu	r2,r17,8110f60c <_malloc_r+0x804>
8110ee68:	8804d27a 	srli	r2,r17,9
8110ee6c:	1000a126 	beq	r2,zero,8110f0f4 <_malloc_r+0x2ec>
8110ee70:	00c00104 	movi	r3,4
8110ee74:	18811e36 	bltu	r3,r2,8110f2f0 <_malloc_r+0x4e8>
8110ee78:	8804d1ba 	srli	r2,r17,6
8110ee7c:	12000e44 	addi	r8,r2,57
8110ee80:	11c00e04 	addi	r7,r2,56
8110ee84:	4209883a 	add	r4,r8,r8
8110ee88:	04e04534 	movhi	r19,33044
8110ee8c:	2109883a 	add	r4,r4,r4
8110ee90:	9cf11304 	addi	r19,r19,-15284
8110ee94:	2109883a 	add	r4,r4,r4
8110ee98:	9909883a 	add	r4,r19,r4
8110ee9c:	24000117 	ldw	r16,4(r4)
8110eea0:	213ffe04 	addi	r4,r4,-8
8110eea4:	24009726 	beq	r4,r16,8110f104 <_malloc_r+0x2fc>
8110eea8:	80800117 	ldw	r2,4(r16)
8110eeac:	01bfff04 	movi	r6,-4
8110eeb0:	014003c4 	movi	r5,15
8110eeb4:	1184703a 	and	r2,r2,r6
8110eeb8:	1447c83a 	sub	r3,r2,r17
8110eebc:	28c00716 	blt	r5,r3,8110eedc <_malloc_r+0xd4>
8110eec0:	1800920e 	bge	r3,zero,8110f10c <_malloc_r+0x304>
8110eec4:	84000317 	ldw	r16,12(r16)
8110eec8:	24008e26 	beq	r4,r16,8110f104 <_malloc_r+0x2fc>
8110eecc:	80800117 	ldw	r2,4(r16)
8110eed0:	1184703a 	and	r2,r2,r6
8110eed4:	1447c83a 	sub	r3,r2,r17
8110eed8:	28fff90e 	bge	r5,r3,8110eec0 <__reset+0xfb0eeec0>
8110eedc:	3809883a 	mov	r4,r7
8110eee0:	01a04534 	movhi	r6,33044
8110eee4:	9c000417 	ldw	r16,16(r19)
8110eee8:	31b11304 	addi	r6,r6,-15284
8110eeec:	32000204 	addi	r8,r6,8
8110eef0:	82013426 	beq	r16,r8,8110f3c4 <_malloc_r+0x5bc>
8110eef4:	80c00117 	ldw	r3,4(r16)
8110eef8:	00bfff04 	movi	r2,-4
8110eefc:	188e703a 	and	r7,r3,r2
8110ef00:	3c45c83a 	sub	r2,r7,r17
8110ef04:	00c003c4 	movi	r3,15
8110ef08:	18811f16 	blt	r3,r2,8110f388 <_malloc_r+0x580>
8110ef0c:	32000515 	stw	r8,20(r6)
8110ef10:	32000415 	stw	r8,16(r6)
8110ef14:	10007f0e 	bge	r2,zero,8110f114 <_malloc_r+0x30c>
8110ef18:	00807fc4 	movi	r2,511
8110ef1c:	11c0fd36 	bltu	r2,r7,8110f314 <_malloc_r+0x50c>
8110ef20:	3806d0fa 	srli	r3,r7,3
8110ef24:	01c00044 	movi	r7,1
8110ef28:	30800117 	ldw	r2,4(r6)
8110ef2c:	19400044 	addi	r5,r3,1
8110ef30:	294b883a 	add	r5,r5,r5
8110ef34:	1807d0ba 	srai	r3,r3,2
8110ef38:	294b883a 	add	r5,r5,r5
8110ef3c:	294b883a 	add	r5,r5,r5
8110ef40:	298b883a 	add	r5,r5,r6
8110ef44:	38c6983a 	sll	r3,r7,r3
8110ef48:	29c00017 	ldw	r7,0(r5)
8110ef4c:	2a7ffe04 	addi	r9,r5,-8
8110ef50:	1886b03a 	or	r3,r3,r2
8110ef54:	82400315 	stw	r9,12(r16)
8110ef58:	81c00215 	stw	r7,8(r16)
8110ef5c:	30c00115 	stw	r3,4(r6)
8110ef60:	2c000015 	stw	r16,0(r5)
8110ef64:	3c000315 	stw	r16,12(r7)
8110ef68:	2005d0ba 	srai	r2,r4,2
8110ef6c:	01400044 	movi	r5,1
8110ef70:	288a983a 	sll	r5,r5,r2
8110ef74:	19406f36 	bltu	r3,r5,8110f134 <_malloc_r+0x32c>
8110ef78:	28c4703a 	and	r2,r5,r3
8110ef7c:	10000a1e 	bne	r2,zero,8110efa8 <_malloc_r+0x1a0>
8110ef80:	00bfff04 	movi	r2,-4
8110ef84:	294b883a 	add	r5,r5,r5
8110ef88:	2088703a 	and	r4,r4,r2
8110ef8c:	28c4703a 	and	r2,r5,r3
8110ef90:	21000104 	addi	r4,r4,4
8110ef94:	1000041e 	bne	r2,zero,8110efa8 <_malloc_r+0x1a0>
8110ef98:	294b883a 	add	r5,r5,r5
8110ef9c:	28c4703a 	and	r2,r5,r3
8110efa0:	21000104 	addi	r4,r4,4
8110efa4:	103ffc26 	beq	r2,zero,8110ef98 <__reset+0xfb0eef98>
8110efa8:	02bfff04 	movi	r10,-4
8110efac:	024003c4 	movi	r9,15
8110efb0:	21800044 	addi	r6,r4,1
8110efb4:	318d883a 	add	r6,r6,r6
8110efb8:	318d883a 	add	r6,r6,r6
8110efbc:	318d883a 	add	r6,r6,r6
8110efc0:	998d883a 	add	r6,r19,r6
8110efc4:	333ffe04 	addi	r12,r6,-8
8110efc8:	2017883a 	mov	r11,r4
8110efcc:	31800104 	addi	r6,r6,4
8110efd0:	34000017 	ldw	r16,0(r6)
8110efd4:	31fffd04 	addi	r7,r6,-12
8110efd8:	81c0041e 	bne	r16,r7,8110efec <_malloc_r+0x1e4>
8110efdc:	0000fb06 	br	8110f3cc <_malloc_r+0x5c4>
8110efe0:	1801030e 	bge	r3,zero,8110f3f0 <_malloc_r+0x5e8>
8110efe4:	84000317 	ldw	r16,12(r16)
8110efe8:	81c0f826 	beq	r16,r7,8110f3cc <_malloc_r+0x5c4>
8110efec:	80800117 	ldw	r2,4(r16)
8110eff0:	1284703a 	and	r2,r2,r10
8110eff4:	1447c83a 	sub	r3,r2,r17
8110eff8:	48fff90e 	bge	r9,r3,8110efe0 <__reset+0xfb0eefe0>
8110effc:	80800317 	ldw	r2,12(r16)
8110f000:	81000217 	ldw	r4,8(r16)
8110f004:	89400054 	ori	r5,r17,1
8110f008:	81400115 	stw	r5,4(r16)
8110f00c:	20800315 	stw	r2,12(r4)
8110f010:	11000215 	stw	r4,8(r2)
8110f014:	8463883a 	add	r17,r16,r17
8110f018:	9c400515 	stw	r17,20(r19)
8110f01c:	9c400415 	stw	r17,16(r19)
8110f020:	18800054 	ori	r2,r3,1
8110f024:	88800115 	stw	r2,4(r17)
8110f028:	8a000315 	stw	r8,12(r17)
8110f02c:	8a000215 	stw	r8,8(r17)
8110f030:	88e3883a 	add	r17,r17,r3
8110f034:	88c00015 	stw	r3,0(r17)
8110f038:	9009883a 	mov	r4,r18
8110f03c:	1124ea00 	call	81124ea0 <__malloc_unlock>
8110f040:	80800204 	addi	r2,r16,8
8110f044:	00001b06 	br	8110f0b4 <_malloc_r+0x2ac>
8110f048:	04400404 	movi	r17,16
8110f04c:	89402536 	bltu	r17,r5,8110f0e4 <_malloc_r+0x2dc>
8110f050:	1124d780 	call	81124d78 <__malloc_lock>
8110f054:	00800184 	movi	r2,6
8110f058:	01000084 	movi	r4,2
8110f05c:	04e04534 	movhi	r19,33044
8110f060:	1085883a 	add	r2,r2,r2
8110f064:	9cf11304 	addi	r19,r19,-15284
8110f068:	1085883a 	add	r2,r2,r2
8110f06c:	9885883a 	add	r2,r19,r2
8110f070:	14000117 	ldw	r16,4(r2)
8110f074:	10fffe04 	addi	r3,r2,-8
8110f078:	80c0d926 	beq	r16,r3,8110f3e0 <_malloc_r+0x5d8>
8110f07c:	80c00117 	ldw	r3,4(r16)
8110f080:	81000317 	ldw	r4,12(r16)
8110f084:	00bfff04 	movi	r2,-4
8110f088:	1884703a 	and	r2,r3,r2
8110f08c:	81400217 	ldw	r5,8(r16)
8110f090:	8085883a 	add	r2,r16,r2
8110f094:	10c00117 	ldw	r3,4(r2)
8110f098:	29000315 	stw	r4,12(r5)
8110f09c:	21400215 	stw	r5,8(r4)
8110f0a0:	18c00054 	ori	r3,r3,1
8110f0a4:	10c00115 	stw	r3,4(r2)
8110f0a8:	9009883a 	mov	r4,r18
8110f0ac:	1124ea00 	call	81124ea0 <__malloc_unlock>
8110f0b0:	80800204 	addi	r2,r16,8
8110f0b4:	dfc00a17 	ldw	ra,40(sp)
8110f0b8:	df000917 	ldw	fp,36(sp)
8110f0bc:	ddc00817 	ldw	r23,32(sp)
8110f0c0:	dd800717 	ldw	r22,28(sp)
8110f0c4:	dd400617 	ldw	r21,24(sp)
8110f0c8:	dd000517 	ldw	r20,20(sp)
8110f0cc:	dcc00417 	ldw	r19,16(sp)
8110f0d0:	dc800317 	ldw	r18,12(sp)
8110f0d4:	dc400217 	ldw	r17,8(sp)
8110f0d8:	dc000117 	ldw	r16,4(sp)
8110f0dc:	dec00b04 	addi	sp,sp,44
8110f0e0:	f800283a 	ret
8110f0e4:	00800304 	movi	r2,12
8110f0e8:	90800015 	stw	r2,0(r18)
8110f0ec:	0005883a 	mov	r2,zero
8110f0f0:	003ff006 	br	8110f0b4 <__reset+0xfb0ef0b4>
8110f0f4:	01002004 	movi	r4,128
8110f0f8:	02001004 	movi	r8,64
8110f0fc:	01c00fc4 	movi	r7,63
8110f100:	003f6106 	br	8110ee88 <__reset+0xfb0eee88>
8110f104:	4009883a 	mov	r4,r8
8110f108:	003f7506 	br	8110eee0 <__reset+0xfb0eeee0>
8110f10c:	81000317 	ldw	r4,12(r16)
8110f110:	003fde06 	br	8110f08c <__reset+0xfb0ef08c>
8110f114:	81c5883a 	add	r2,r16,r7
8110f118:	11400117 	ldw	r5,4(r2)
8110f11c:	9009883a 	mov	r4,r18
8110f120:	29400054 	ori	r5,r5,1
8110f124:	11400115 	stw	r5,4(r2)
8110f128:	1124ea00 	call	81124ea0 <__malloc_unlock>
8110f12c:	80800204 	addi	r2,r16,8
8110f130:	003fe006 	br	8110f0b4 <__reset+0xfb0ef0b4>
8110f134:	9c000217 	ldw	r16,8(r19)
8110f138:	00bfff04 	movi	r2,-4
8110f13c:	85800117 	ldw	r22,4(r16)
8110f140:	b0ac703a 	and	r22,r22,r2
8110f144:	b4400336 	bltu	r22,r17,8110f154 <_malloc_r+0x34c>
8110f148:	b445c83a 	sub	r2,r22,r17
8110f14c:	00c003c4 	movi	r3,15
8110f150:	18805d16 	blt	r3,r2,8110f2c8 <_malloc_r+0x4c0>
8110f154:	05e04534 	movhi	r23,33044
8110f158:	00a04534 	movhi	r2,33044
8110f15c:	10b79604 	addi	r2,r2,-8616
8110f160:	bdf73404 	addi	r23,r23,-9008
8110f164:	15400017 	ldw	r21,0(r2)
8110f168:	b8c00017 	ldw	r3,0(r23)
8110f16c:	00bfffc4 	movi	r2,-1
8110f170:	858d883a 	add	r6,r16,r22
8110f174:	8d6b883a 	add	r21,r17,r21
8110f178:	1880ea26 	beq	r3,r2,8110f524 <_malloc_r+0x71c>
8110f17c:	ad4403c4 	addi	r21,r21,4111
8110f180:	00bc0004 	movi	r2,-4096
8110f184:	a8aa703a 	and	r21,r21,r2
8110f188:	a80b883a 	mov	r5,r21
8110f18c:	9009883a 	mov	r4,r18
8110f190:	d9800015 	stw	r6,0(sp)
8110f194:	110fc6c0 	call	8110fc6c <_sbrk_r>
8110f198:	1029883a 	mov	r20,r2
8110f19c:	00bfffc4 	movi	r2,-1
8110f1a0:	d9800017 	ldw	r6,0(sp)
8110f1a4:	a080e826 	beq	r20,r2,8110f548 <_malloc_r+0x740>
8110f1a8:	a180a636 	bltu	r20,r6,8110f444 <_malloc_r+0x63c>
8110f1ac:	07204534 	movhi	fp,33044
8110f1b0:	e737f504 	addi	fp,fp,-8236
8110f1b4:	e0800017 	ldw	r2,0(fp)
8110f1b8:	a887883a 	add	r3,r21,r2
8110f1bc:	e0c00015 	stw	r3,0(fp)
8110f1c0:	3500e626 	beq	r6,r20,8110f55c <_malloc_r+0x754>
8110f1c4:	b9000017 	ldw	r4,0(r23)
8110f1c8:	00bfffc4 	movi	r2,-1
8110f1cc:	2080ee26 	beq	r4,r2,8110f588 <_malloc_r+0x780>
8110f1d0:	a185c83a 	sub	r2,r20,r6
8110f1d4:	10c5883a 	add	r2,r2,r3
8110f1d8:	e0800015 	stw	r2,0(fp)
8110f1dc:	a0c001cc 	andi	r3,r20,7
8110f1e0:	1800bc26 	beq	r3,zero,8110f4d4 <_malloc_r+0x6cc>
8110f1e4:	a0e9c83a 	sub	r20,r20,r3
8110f1e8:	00840204 	movi	r2,4104
8110f1ec:	a5000204 	addi	r20,r20,8
8110f1f0:	10c7c83a 	sub	r3,r2,r3
8110f1f4:	a545883a 	add	r2,r20,r21
8110f1f8:	1083ffcc 	andi	r2,r2,4095
8110f1fc:	18abc83a 	sub	r21,r3,r2
8110f200:	a80b883a 	mov	r5,r21
8110f204:	9009883a 	mov	r4,r18
8110f208:	110fc6c0 	call	8110fc6c <_sbrk_r>
8110f20c:	00ffffc4 	movi	r3,-1
8110f210:	10c0e126 	beq	r2,r3,8110f598 <_malloc_r+0x790>
8110f214:	1505c83a 	sub	r2,r2,r20
8110f218:	1545883a 	add	r2,r2,r21
8110f21c:	10800054 	ori	r2,r2,1
8110f220:	e0c00017 	ldw	r3,0(fp)
8110f224:	9d000215 	stw	r20,8(r19)
8110f228:	a0800115 	stw	r2,4(r20)
8110f22c:	a8c7883a 	add	r3,r21,r3
8110f230:	e0c00015 	stw	r3,0(fp)
8110f234:	84c00e26 	beq	r16,r19,8110f270 <_malloc_r+0x468>
8110f238:	018003c4 	movi	r6,15
8110f23c:	3580a72e 	bgeu	r6,r22,8110f4dc <_malloc_r+0x6d4>
8110f240:	81400117 	ldw	r5,4(r16)
8110f244:	013ffe04 	movi	r4,-8
8110f248:	b0bffd04 	addi	r2,r22,-12
8110f24c:	1104703a 	and	r2,r2,r4
8110f250:	2900004c 	andi	r4,r5,1
8110f254:	2088b03a 	or	r4,r4,r2
8110f258:	81000115 	stw	r4,4(r16)
8110f25c:	01400144 	movi	r5,5
8110f260:	8089883a 	add	r4,r16,r2
8110f264:	21400115 	stw	r5,4(r4)
8110f268:	21400215 	stw	r5,8(r4)
8110f26c:	3080cd36 	bltu	r6,r2,8110f5a4 <_malloc_r+0x79c>
8110f270:	00a04534 	movhi	r2,33044
8110f274:	10b79504 	addi	r2,r2,-8620
8110f278:	11000017 	ldw	r4,0(r2)
8110f27c:	20c0012e 	bgeu	r4,r3,8110f284 <_malloc_r+0x47c>
8110f280:	10c00015 	stw	r3,0(r2)
8110f284:	00a04534 	movhi	r2,33044
8110f288:	10b79404 	addi	r2,r2,-8624
8110f28c:	11000017 	ldw	r4,0(r2)
8110f290:	9c000217 	ldw	r16,8(r19)
8110f294:	20c0012e 	bgeu	r4,r3,8110f29c <_malloc_r+0x494>
8110f298:	10c00015 	stw	r3,0(r2)
8110f29c:	80c00117 	ldw	r3,4(r16)
8110f2a0:	00bfff04 	movi	r2,-4
8110f2a4:	1886703a 	and	r3,r3,r2
8110f2a8:	1c45c83a 	sub	r2,r3,r17
8110f2ac:	1c400236 	bltu	r3,r17,8110f2b8 <_malloc_r+0x4b0>
8110f2b0:	00c003c4 	movi	r3,15
8110f2b4:	18800416 	blt	r3,r2,8110f2c8 <_malloc_r+0x4c0>
8110f2b8:	9009883a 	mov	r4,r18
8110f2bc:	1124ea00 	call	81124ea0 <__malloc_unlock>
8110f2c0:	0005883a 	mov	r2,zero
8110f2c4:	003f7b06 	br	8110f0b4 <__reset+0xfb0ef0b4>
8110f2c8:	88c00054 	ori	r3,r17,1
8110f2cc:	80c00115 	stw	r3,4(r16)
8110f2d0:	8463883a 	add	r17,r16,r17
8110f2d4:	10800054 	ori	r2,r2,1
8110f2d8:	9c400215 	stw	r17,8(r19)
8110f2dc:	88800115 	stw	r2,4(r17)
8110f2e0:	9009883a 	mov	r4,r18
8110f2e4:	1124ea00 	call	81124ea0 <__malloc_unlock>
8110f2e8:	80800204 	addi	r2,r16,8
8110f2ec:	003f7106 	br	8110f0b4 <__reset+0xfb0ef0b4>
8110f2f0:	00c00504 	movi	r3,20
8110f2f4:	18804a2e 	bgeu	r3,r2,8110f420 <_malloc_r+0x618>
8110f2f8:	00c01504 	movi	r3,84
8110f2fc:	18806e36 	bltu	r3,r2,8110f4b8 <_malloc_r+0x6b0>
8110f300:	8804d33a 	srli	r2,r17,12
8110f304:	12001bc4 	addi	r8,r2,111
8110f308:	11c01b84 	addi	r7,r2,110
8110f30c:	4209883a 	add	r4,r8,r8
8110f310:	003edd06 	br	8110ee88 <__reset+0xfb0eee88>
8110f314:	3804d27a 	srli	r2,r7,9
8110f318:	00c00104 	movi	r3,4
8110f31c:	1880442e 	bgeu	r3,r2,8110f430 <_malloc_r+0x628>
8110f320:	00c00504 	movi	r3,20
8110f324:	18808136 	bltu	r3,r2,8110f52c <_malloc_r+0x724>
8110f328:	11401704 	addi	r5,r2,92
8110f32c:	10c016c4 	addi	r3,r2,91
8110f330:	294b883a 	add	r5,r5,r5
8110f334:	294b883a 	add	r5,r5,r5
8110f338:	294b883a 	add	r5,r5,r5
8110f33c:	994b883a 	add	r5,r19,r5
8110f340:	28800017 	ldw	r2,0(r5)
8110f344:	01a04534 	movhi	r6,33044
8110f348:	297ffe04 	addi	r5,r5,-8
8110f34c:	31b11304 	addi	r6,r6,-15284
8110f350:	28806526 	beq	r5,r2,8110f4e8 <_malloc_r+0x6e0>
8110f354:	01bfff04 	movi	r6,-4
8110f358:	10c00117 	ldw	r3,4(r2)
8110f35c:	1986703a 	and	r3,r3,r6
8110f360:	38c0022e 	bgeu	r7,r3,8110f36c <_malloc_r+0x564>
8110f364:	10800217 	ldw	r2,8(r2)
8110f368:	28bffb1e 	bne	r5,r2,8110f358 <__reset+0xfb0ef358>
8110f36c:	11400317 	ldw	r5,12(r2)
8110f370:	98c00117 	ldw	r3,4(r19)
8110f374:	81400315 	stw	r5,12(r16)
8110f378:	80800215 	stw	r2,8(r16)
8110f37c:	2c000215 	stw	r16,8(r5)
8110f380:	14000315 	stw	r16,12(r2)
8110f384:	003ef806 	br	8110ef68 <__reset+0xfb0eef68>
8110f388:	88c00054 	ori	r3,r17,1
8110f38c:	80c00115 	stw	r3,4(r16)
8110f390:	8463883a 	add	r17,r16,r17
8110f394:	34400515 	stw	r17,20(r6)
8110f398:	34400415 	stw	r17,16(r6)
8110f39c:	10c00054 	ori	r3,r2,1
8110f3a0:	8a000315 	stw	r8,12(r17)
8110f3a4:	8a000215 	stw	r8,8(r17)
8110f3a8:	88c00115 	stw	r3,4(r17)
8110f3ac:	88a3883a 	add	r17,r17,r2
8110f3b0:	88800015 	stw	r2,0(r17)
8110f3b4:	9009883a 	mov	r4,r18
8110f3b8:	1124ea00 	call	81124ea0 <__malloc_unlock>
8110f3bc:	80800204 	addi	r2,r16,8
8110f3c0:	003f3c06 	br	8110f0b4 <__reset+0xfb0ef0b4>
8110f3c4:	30c00117 	ldw	r3,4(r6)
8110f3c8:	003ee706 	br	8110ef68 <__reset+0xfb0eef68>
8110f3cc:	5ac00044 	addi	r11,r11,1
8110f3d0:	588000cc 	andi	r2,r11,3
8110f3d4:	31800204 	addi	r6,r6,8
8110f3d8:	103efd1e 	bne	r2,zero,8110efd0 <__reset+0xfb0eefd0>
8110f3dc:	00002406 	br	8110f470 <_malloc_r+0x668>
8110f3e0:	14000317 	ldw	r16,12(r2)
8110f3e4:	143f251e 	bne	r2,r16,8110f07c <__reset+0xfb0ef07c>
8110f3e8:	21000084 	addi	r4,r4,2
8110f3ec:	003ebc06 	br	8110eee0 <__reset+0xfb0eeee0>
8110f3f0:	8085883a 	add	r2,r16,r2
8110f3f4:	10c00117 	ldw	r3,4(r2)
8110f3f8:	81000317 	ldw	r4,12(r16)
8110f3fc:	81400217 	ldw	r5,8(r16)
8110f400:	18c00054 	ori	r3,r3,1
8110f404:	10c00115 	stw	r3,4(r2)
8110f408:	29000315 	stw	r4,12(r5)
8110f40c:	21400215 	stw	r5,8(r4)
8110f410:	9009883a 	mov	r4,r18
8110f414:	1124ea00 	call	81124ea0 <__malloc_unlock>
8110f418:	80800204 	addi	r2,r16,8
8110f41c:	003f2506 	br	8110f0b4 <__reset+0xfb0ef0b4>
8110f420:	12001704 	addi	r8,r2,92
8110f424:	11c016c4 	addi	r7,r2,91
8110f428:	4209883a 	add	r4,r8,r8
8110f42c:	003e9606 	br	8110ee88 <__reset+0xfb0eee88>
8110f430:	3804d1ba 	srli	r2,r7,6
8110f434:	11400e44 	addi	r5,r2,57
8110f438:	10c00e04 	addi	r3,r2,56
8110f43c:	294b883a 	add	r5,r5,r5
8110f440:	003fbc06 	br	8110f334 <__reset+0xfb0ef334>
8110f444:	84ff5926 	beq	r16,r19,8110f1ac <__reset+0xfb0ef1ac>
8110f448:	00a04534 	movhi	r2,33044
8110f44c:	10b11304 	addi	r2,r2,-15284
8110f450:	14000217 	ldw	r16,8(r2)
8110f454:	00bfff04 	movi	r2,-4
8110f458:	80c00117 	ldw	r3,4(r16)
8110f45c:	1886703a 	and	r3,r3,r2
8110f460:	003f9106 	br	8110f2a8 <__reset+0xfb0ef2a8>
8110f464:	60800217 	ldw	r2,8(r12)
8110f468:	213fffc4 	addi	r4,r4,-1
8110f46c:	1300651e 	bne	r2,r12,8110f604 <_malloc_r+0x7fc>
8110f470:	208000cc 	andi	r2,r4,3
8110f474:	633ffe04 	addi	r12,r12,-8
8110f478:	103ffa1e 	bne	r2,zero,8110f464 <__reset+0xfb0ef464>
8110f47c:	98800117 	ldw	r2,4(r19)
8110f480:	0146303a 	nor	r3,zero,r5
8110f484:	1884703a 	and	r2,r3,r2
8110f488:	98800115 	stw	r2,4(r19)
8110f48c:	294b883a 	add	r5,r5,r5
8110f490:	117f2836 	bltu	r2,r5,8110f134 <__reset+0xfb0ef134>
8110f494:	283f2726 	beq	r5,zero,8110f134 <__reset+0xfb0ef134>
8110f498:	2886703a 	and	r3,r5,r2
8110f49c:	5809883a 	mov	r4,r11
8110f4a0:	183ec31e 	bne	r3,zero,8110efb0 <__reset+0xfb0eefb0>
8110f4a4:	294b883a 	add	r5,r5,r5
8110f4a8:	2886703a 	and	r3,r5,r2
8110f4ac:	21000104 	addi	r4,r4,4
8110f4b0:	183ffc26 	beq	r3,zero,8110f4a4 <__reset+0xfb0ef4a4>
8110f4b4:	003ebe06 	br	8110efb0 <__reset+0xfb0eefb0>
8110f4b8:	00c05504 	movi	r3,340
8110f4bc:	18801236 	bltu	r3,r2,8110f508 <_malloc_r+0x700>
8110f4c0:	8804d3fa 	srli	r2,r17,15
8110f4c4:	12001e04 	addi	r8,r2,120
8110f4c8:	11c01dc4 	addi	r7,r2,119
8110f4cc:	4209883a 	add	r4,r8,r8
8110f4d0:	003e6d06 	br	8110ee88 <__reset+0xfb0eee88>
8110f4d4:	00c40004 	movi	r3,4096
8110f4d8:	003f4606 	br	8110f1f4 <__reset+0xfb0ef1f4>
8110f4dc:	00800044 	movi	r2,1
8110f4e0:	a0800115 	stw	r2,4(r20)
8110f4e4:	003f7406 	br	8110f2b8 <__reset+0xfb0ef2b8>
8110f4e8:	1805d0ba 	srai	r2,r3,2
8110f4ec:	01c00044 	movi	r7,1
8110f4f0:	30c00117 	ldw	r3,4(r6)
8110f4f4:	388e983a 	sll	r7,r7,r2
8110f4f8:	2805883a 	mov	r2,r5
8110f4fc:	38c6b03a 	or	r3,r7,r3
8110f500:	30c00115 	stw	r3,4(r6)
8110f504:	003f9b06 	br	8110f374 <__reset+0xfb0ef374>
8110f508:	00c15504 	movi	r3,1364
8110f50c:	18801a36 	bltu	r3,r2,8110f578 <_malloc_r+0x770>
8110f510:	8804d4ba 	srli	r2,r17,18
8110f514:	12001f44 	addi	r8,r2,125
8110f518:	11c01f04 	addi	r7,r2,124
8110f51c:	4209883a 	add	r4,r8,r8
8110f520:	003e5906 	br	8110ee88 <__reset+0xfb0eee88>
8110f524:	ad400404 	addi	r21,r21,16
8110f528:	003f1706 	br	8110f188 <__reset+0xfb0ef188>
8110f52c:	00c01504 	movi	r3,84
8110f530:	18802336 	bltu	r3,r2,8110f5c0 <_malloc_r+0x7b8>
8110f534:	3804d33a 	srli	r2,r7,12
8110f538:	11401bc4 	addi	r5,r2,111
8110f53c:	10c01b84 	addi	r3,r2,110
8110f540:	294b883a 	add	r5,r5,r5
8110f544:	003f7b06 	br	8110f334 <__reset+0xfb0ef334>
8110f548:	9c000217 	ldw	r16,8(r19)
8110f54c:	00bfff04 	movi	r2,-4
8110f550:	80c00117 	ldw	r3,4(r16)
8110f554:	1886703a 	and	r3,r3,r2
8110f558:	003f5306 	br	8110f2a8 <__reset+0xfb0ef2a8>
8110f55c:	3083ffcc 	andi	r2,r6,4095
8110f560:	103f181e 	bne	r2,zero,8110f1c4 <__reset+0xfb0ef1c4>
8110f564:	99000217 	ldw	r4,8(r19)
8110f568:	b545883a 	add	r2,r22,r21
8110f56c:	10800054 	ori	r2,r2,1
8110f570:	20800115 	stw	r2,4(r4)
8110f574:	003f3e06 	br	8110f270 <__reset+0xfb0ef270>
8110f578:	01003f84 	movi	r4,254
8110f57c:	02001fc4 	movi	r8,127
8110f580:	01c01f84 	movi	r7,126
8110f584:	003e4006 	br	8110ee88 <__reset+0xfb0eee88>
8110f588:	00a04534 	movhi	r2,33044
8110f58c:	10b73404 	addi	r2,r2,-9008
8110f590:	15000015 	stw	r20,0(r2)
8110f594:	003f1106 	br	8110f1dc <__reset+0xfb0ef1dc>
8110f598:	00800044 	movi	r2,1
8110f59c:	002b883a 	mov	r21,zero
8110f5a0:	003f1f06 	br	8110f220 <__reset+0xfb0ef220>
8110f5a4:	81400204 	addi	r5,r16,8
8110f5a8:	9009883a 	mov	r4,r18
8110f5ac:	11185800 	call	81118580 <_free_r>
8110f5b0:	00a04534 	movhi	r2,33044
8110f5b4:	10b7f504 	addi	r2,r2,-8236
8110f5b8:	10c00017 	ldw	r3,0(r2)
8110f5bc:	003f2c06 	br	8110f270 <__reset+0xfb0ef270>
8110f5c0:	00c05504 	movi	r3,340
8110f5c4:	18800536 	bltu	r3,r2,8110f5dc <_malloc_r+0x7d4>
8110f5c8:	3804d3fa 	srli	r2,r7,15
8110f5cc:	11401e04 	addi	r5,r2,120
8110f5d0:	10c01dc4 	addi	r3,r2,119
8110f5d4:	294b883a 	add	r5,r5,r5
8110f5d8:	003f5606 	br	8110f334 <__reset+0xfb0ef334>
8110f5dc:	00c15504 	movi	r3,1364
8110f5e0:	18800536 	bltu	r3,r2,8110f5f8 <_malloc_r+0x7f0>
8110f5e4:	3804d4ba 	srli	r2,r7,18
8110f5e8:	11401f44 	addi	r5,r2,125
8110f5ec:	10c01f04 	addi	r3,r2,124
8110f5f0:	294b883a 	add	r5,r5,r5
8110f5f4:	003f4f06 	br	8110f334 <__reset+0xfb0ef334>
8110f5f8:	01403f84 	movi	r5,254
8110f5fc:	00c01f84 	movi	r3,126
8110f600:	003f4c06 	br	8110f334 <__reset+0xfb0ef334>
8110f604:	98800117 	ldw	r2,4(r19)
8110f608:	003fa006 	br	8110f48c <__reset+0xfb0ef48c>
8110f60c:	8808d0fa 	srli	r4,r17,3
8110f610:	20800044 	addi	r2,r4,1
8110f614:	1085883a 	add	r2,r2,r2
8110f618:	003e9006 	br	8110f05c <__reset+0xfb0ef05c>

8110f61c <memcpy>:
8110f61c:	defffd04 	addi	sp,sp,-12
8110f620:	de00012e 	bgeu	sp,et,8110f628 <memcpy+0xc>
8110f624:	003b68fa 	trap	3
8110f628:	00c003c4 	movi	r3,15
8110f62c:	dfc00215 	stw	ra,8(sp)
8110f630:	dc400115 	stw	r17,4(sp)
8110f634:	dc000015 	stw	r16,0(sp)
8110f638:	2005883a 	mov	r2,r4
8110f63c:	1980452e 	bgeu	r3,r6,8110f754 <memcpy+0x138>
8110f640:	2906b03a 	or	r3,r5,r4
8110f644:	18c000cc 	andi	r3,r3,3
8110f648:	1800441e 	bne	r3,zero,8110f75c <memcpy+0x140>
8110f64c:	347ffc04 	addi	r17,r6,-16
8110f650:	8822d13a 	srli	r17,r17,4
8110f654:	28c00104 	addi	r3,r5,4
8110f658:	23400104 	addi	r13,r4,4
8110f65c:	8820913a 	slli	r16,r17,4
8110f660:	2b000204 	addi	r12,r5,8
8110f664:	22c00204 	addi	r11,r4,8
8110f668:	84000504 	addi	r16,r16,20
8110f66c:	2a800304 	addi	r10,r5,12
8110f670:	22400304 	addi	r9,r4,12
8110f674:	2c21883a 	add	r16,r5,r16
8110f678:	2811883a 	mov	r8,r5
8110f67c:	200f883a 	mov	r7,r4
8110f680:	41000017 	ldw	r4,0(r8)
8110f684:	1fc00017 	ldw	ra,0(r3)
8110f688:	63c00017 	ldw	r15,0(r12)
8110f68c:	39000015 	stw	r4,0(r7)
8110f690:	53800017 	ldw	r14,0(r10)
8110f694:	6fc00015 	stw	ra,0(r13)
8110f698:	5bc00015 	stw	r15,0(r11)
8110f69c:	4b800015 	stw	r14,0(r9)
8110f6a0:	18c00404 	addi	r3,r3,16
8110f6a4:	39c00404 	addi	r7,r7,16
8110f6a8:	42000404 	addi	r8,r8,16
8110f6ac:	6b400404 	addi	r13,r13,16
8110f6b0:	63000404 	addi	r12,r12,16
8110f6b4:	5ac00404 	addi	r11,r11,16
8110f6b8:	52800404 	addi	r10,r10,16
8110f6bc:	4a400404 	addi	r9,r9,16
8110f6c0:	1c3fef1e 	bne	r3,r16,8110f680 <__reset+0xfb0ef680>
8110f6c4:	89c00044 	addi	r7,r17,1
8110f6c8:	380e913a 	slli	r7,r7,4
8110f6cc:	310003cc 	andi	r4,r6,15
8110f6d0:	02c000c4 	movi	r11,3
8110f6d4:	11c7883a 	add	r3,r2,r7
8110f6d8:	29cb883a 	add	r5,r5,r7
8110f6dc:	5900212e 	bgeu	r11,r4,8110f764 <memcpy+0x148>
8110f6e0:	1813883a 	mov	r9,r3
8110f6e4:	2811883a 	mov	r8,r5
8110f6e8:	200f883a 	mov	r7,r4
8110f6ec:	42800017 	ldw	r10,0(r8)
8110f6f0:	4a400104 	addi	r9,r9,4
8110f6f4:	39ffff04 	addi	r7,r7,-4
8110f6f8:	4abfff15 	stw	r10,-4(r9)
8110f6fc:	42000104 	addi	r8,r8,4
8110f700:	59fffa36 	bltu	r11,r7,8110f6ec <__reset+0xfb0ef6ec>
8110f704:	213fff04 	addi	r4,r4,-4
8110f708:	2008d0ba 	srli	r4,r4,2
8110f70c:	318000cc 	andi	r6,r6,3
8110f710:	21000044 	addi	r4,r4,1
8110f714:	2109883a 	add	r4,r4,r4
8110f718:	2109883a 	add	r4,r4,r4
8110f71c:	1907883a 	add	r3,r3,r4
8110f720:	290b883a 	add	r5,r5,r4
8110f724:	30000626 	beq	r6,zero,8110f740 <memcpy+0x124>
8110f728:	198d883a 	add	r6,r3,r6
8110f72c:	29c00003 	ldbu	r7,0(r5)
8110f730:	18c00044 	addi	r3,r3,1
8110f734:	29400044 	addi	r5,r5,1
8110f738:	19ffffc5 	stb	r7,-1(r3)
8110f73c:	19bffb1e 	bne	r3,r6,8110f72c <__reset+0xfb0ef72c>
8110f740:	dfc00217 	ldw	ra,8(sp)
8110f744:	dc400117 	ldw	r17,4(sp)
8110f748:	dc000017 	ldw	r16,0(sp)
8110f74c:	dec00304 	addi	sp,sp,12
8110f750:	f800283a 	ret
8110f754:	2007883a 	mov	r3,r4
8110f758:	003ff206 	br	8110f724 <__reset+0xfb0ef724>
8110f75c:	2007883a 	mov	r3,r4
8110f760:	003ff106 	br	8110f728 <__reset+0xfb0ef728>
8110f764:	200d883a 	mov	r6,r4
8110f768:	003fee06 	br	8110f724 <__reset+0xfb0ef724>

8110f76c <memset>:
8110f76c:	20c000cc 	andi	r3,r4,3
8110f770:	2005883a 	mov	r2,r4
8110f774:	18004426 	beq	r3,zero,8110f888 <memset+0x11c>
8110f778:	31ffffc4 	addi	r7,r6,-1
8110f77c:	30004026 	beq	r6,zero,8110f880 <memset+0x114>
8110f780:	2813883a 	mov	r9,r5
8110f784:	200d883a 	mov	r6,r4
8110f788:	2007883a 	mov	r3,r4
8110f78c:	00000406 	br	8110f7a0 <memset+0x34>
8110f790:	3a3fffc4 	addi	r8,r7,-1
8110f794:	31800044 	addi	r6,r6,1
8110f798:	38003926 	beq	r7,zero,8110f880 <memset+0x114>
8110f79c:	400f883a 	mov	r7,r8
8110f7a0:	18c00044 	addi	r3,r3,1
8110f7a4:	32400005 	stb	r9,0(r6)
8110f7a8:	1a0000cc 	andi	r8,r3,3
8110f7ac:	403ff81e 	bne	r8,zero,8110f790 <__reset+0xfb0ef790>
8110f7b0:	010000c4 	movi	r4,3
8110f7b4:	21c02d2e 	bgeu	r4,r7,8110f86c <memset+0x100>
8110f7b8:	29003fcc 	andi	r4,r5,255
8110f7bc:	200c923a 	slli	r6,r4,8
8110f7c0:	3108b03a 	or	r4,r6,r4
8110f7c4:	200c943a 	slli	r6,r4,16
8110f7c8:	218cb03a 	or	r6,r4,r6
8110f7cc:	010003c4 	movi	r4,15
8110f7d0:	21c0182e 	bgeu	r4,r7,8110f834 <memset+0xc8>
8110f7d4:	3b3ffc04 	addi	r12,r7,-16
8110f7d8:	6018d13a 	srli	r12,r12,4
8110f7dc:	1a000104 	addi	r8,r3,4
8110f7e0:	1ac00204 	addi	r11,r3,8
8110f7e4:	6008913a 	slli	r4,r12,4
8110f7e8:	1a800304 	addi	r10,r3,12
8110f7ec:	1813883a 	mov	r9,r3
8110f7f0:	21000504 	addi	r4,r4,20
8110f7f4:	1909883a 	add	r4,r3,r4
8110f7f8:	49800015 	stw	r6,0(r9)
8110f7fc:	41800015 	stw	r6,0(r8)
8110f800:	59800015 	stw	r6,0(r11)
8110f804:	51800015 	stw	r6,0(r10)
8110f808:	42000404 	addi	r8,r8,16
8110f80c:	4a400404 	addi	r9,r9,16
8110f810:	5ac00404 	addi	r11,r11,16
8110f814:	52800404 	addi	r10,r10,16
8110f818:	413ff71e 	bne	r8,r4,8110f7f8 <__reset+0xfb0ef7f8>
8110f81c:	63000044 	addi	r12,r12,1
8110f820:	6018913a 	slli	r12,r12,4
8110f824:	39c003cc 	andi	r7,r7,15
8110f828:	010000c4 	movi	r4,3
8110f82c:	1b07883a 	add	r3,r3,r12
8110f830:	21c00e2e 	bgeu	r4,r7,8110f86c <memset+0x100>
8110f834:	1813883a 	mov	r9,r3
8110f838:	3811883a 	mov	r8,r7
8110f83c:	010000c4 	movi	r4,3
8110f840:	49800015 	stw	r6,0(r9)
8110f844:	423fff04 	addi	r8,r8,-4
8110f848:	4a400104 	addi	r9,r9,4
8110f84c:	223ffc36 	bltu	r4,r8,8110f840 <__reset+0xfb0ef840>
8110f850:	393fff04 	addi	r4,r7,-4
8110f854:	2008d0ba 	srli	r4,r4,2
8110f858:	39c000cc 	andi	r7,r7,3
8110f85c:	21000044 	addi	r4,r4,1
8110f860:	2109883a 	add	r4,r4,r4
8110f864:	2109883a 	add	r4,r4,r4
8110f868:	1907883a 	add	r3,r3,r4
8110f86c:	38000526 	beq	r7,zero,8110f884 <memset+0x118>
8110f870:	19cf883a 	add	r7,r3,r7
8110f874:	19400005 	stb	r5,0(r3)
8110f878:	18c00044 	addi	r3,r3,1
8110f87c:	38fffd1e 	bne	r7,r3,8110f874 <__reset+0xfb0ef874>
8110f880:	f800283a 	ret
8110f884:	f800283a 	ret
8110f888:	2007883a 	mov	r3,r4
8110f88c:	300f883a 	mov	r7,r6
8110f890:	003fc706 	br	8110f7b0 <__reset+0xfb0ef7b0>

8110f894 <_open_r>:
8110f894:	defffd04 	addi	sp,sp,-12
8110f898:	de00012e 	bgeu	sp,et,8110f8a0 <_open_r+0xc>
8110f89c:	003b68fa 	trap	3
8110f8a0:	2805883a 	mov	r2,r5
8110f8a4:	dc000015 	stw	r16,0(sp)
8110f8a8:	04204534 	movhi	r16,33044
8110f8ac:	dc400115 	stw	r17,4(sp)
8110f8b0:	300b883a 	mov	r5,r6
8110f8b4:	84379304 	addi	r16,r16,-8628
8110f8b8:	2023883a 	mov	r17,r4
8110f8bc:	380d883a 	mov	r6,r7
8110f8c0:	1009883a 	mov	r4,r2
8110f8c4:	dfc00215 	stw	ra,8(sp)
8110f8c8:	80000015 	stw	zero,0(r16)
8110f8cc:	11244040 	call	81124404 <open>
8110f8d0:	00ffffc4 	movi	r3,-1
8110f8d4:	10c00526 	beq	r2,r3,8110f8ec <_open_r+0x58>
8110f8d8:	dfc00217 	ldw	ra,8(sp)
8110f8dc:	dc400117 	ldw	r17,4(sp)
8110f8e0:	dc000017 	ldw	r16,0(sp)
8110f8e4:	dec00304 	addi	sp,sp,12
8110f8e8:	f800283a 	ret
8110f8ec:	80c00017 	ldw	r3,0(r16)
8110f8f0:	183ff926 	beq	r3,zero,8110f8d8 <__reset+0xfb0ef8d8>
8110f8f4:	88c00015 	stw	r3,0(r17)
8110f8f8:	003ff706 	br	8110f8d8 <__reset+0xfb0ef8d8>

8110f8fc <_printf_r>:
8110f8fc:	defffd04 	addi	sp,sp,-12
8110f900:	2805883a 	mov	r2,r5
8110f904:	de00012e 	bgeu	sp,et,8110f90c <_printf_r+0x10>
8110f908:	003b68fa 	trap	3
8110f90c:	dfc00015 	stw	ra,0(sp)
8110f910:	d9800115 	stw	r6,4(sp)
8110f914:	d9c00215 	stw	r7,8(sp)
8110f918:	21400217 	ldw	r5,8(r4)
8110f91c:	d9c00104 	addi	r7,sp,4
8110f920:	100d883a 	mov	r6,r2
8110f924:	111248c0 	call	8111248c <___vfprintf_internal_r>
8110f928:	dfc00017 	ldw	ra,0(sp)
8110f92c:	dec00304 	addi	sp,sp,12
8110f930:	f800283a 	ret

8110f934 <printf>:
8110f934:	defffc04 	addi	sp,sp,-16
8110f938:	de00012e 	bgeu	sp,et,8110f940 <printf+0xc>
8110f93c:	003b68fa 	trap	3
8110f940:	dfc00015 	stw	ra,0(sp)
8110f944:	d9400115 	stw	r5,4(sp)
8110f948:	d9800215 	stw	r6,8(sp)
8110f94c:	d9c00315 	stw	r7,12(sp)
8110f950:	00a04534 	movhi	r2,33044
8110f954:	10b73304 	addi	r2,r2,-9012
8110f958:	10800017 	ldw	r2,0(r2)
8110f95c:	200b883a 	mov	r5,r4
8110f960:	d9800104 	addi	r6,sp,4
8110f964:	11000217 	ldw	r4,8(r2)
8110f968:	111468c0 	call	8111468c <__vfprintf_internal>
8110f96c:	dfc00017 	ldw	ra,0(sp)
8110f970:	dec00404 	addi	sp,sp,16
8110f974:	f800283a 	ret

8110f978 <_putchar_r>:
8110f978:	21800217 	ldw	r6,8(r4)
8110f97c:	111a5ac1 	jmpi	8111a5ac <_putc_r>

8110f980 <putchar>:
8110f980:	00a04534 	movhi	r2,33044
8110f984:	10b73304 	addi	r2,r2,-9012
8110f988:	200b883a 	mov	r5,r4
8110f98c:	11000017 	ldw	r4,0(r2)
8110f990:	21800217 	ldw	r6,8(r4)
8110f994:	111a5ac1 	jmpi	8111a5ac <_putc_r>

8110f998 <_puts_r>:
8110f998:	defff604 	addi	sp,sp,-40
8110f99c:	de00012e 	bgeu	sp,et,8110f9a4 <_puts_r+0xc>
8110f9a0:	003b68fa 	trap	3
8110f9a4:	dc000715 	stw	r16,28(sp)
8110f9a8:	2021883a 	mov	r16,r4
8110f9ac:	2809883a 	mov	r4,r5
8110f9b0:	dc400815 	stw	r17,32(sp)
8110f9b4:	dfc00915 	stw	ra,36(sp)
8110f9b8:	2823883a 	mov	r17,r5
8110f9bc:	110ffb80 	call	8110ffb8 <strlen>
8110f9c0:	10c00044 	addi	r3,r2,1
8110f9c4:	d8800115 	stw	r2,4(sp)
8110f9c8:	00a04534 	movhi	r2,33044
8110f9cc:	10ae2104 	addi	r2,r2,-18300
8110f9d0:	d8800215 	stw	r2,8(sp)
8110f9d4:	00800044 	movi	r2,1
8110f9d8:	d8800315 	stw	r2,12(sp)
8110f9dc:	00800084 	movi	r2,2
8110f9e0:	dc400015 	stw	r17,0(sp)
8110f9e4:	d8c00615 	stw	r3,24(sp)
8110f9e8:	dec00415 	stw	sp,16(sp)
8110f9ec:	d8800515 	stw	r2,20(sp)
8110f9f0:	80000226 	beq	r16,zero,8110f9fc <_puts_r+0x64>
8110f9f4:	80800e17 	ldw	r2,56(r16)
8110f9f8:	10001426 	beq	r2,zero,8110fa4c <_puts_r+0xb4>
8110f9fc:	81400217 	ldw	r5,8(r16)
8110fa00:	2880030b 	ldhu	r2,12(r5)
8110fa04:	10c8000c 	andi	r3,r2,8192
8110fa08:	1800061e 	bne	r3,zero,8110fa24 <_puts_r+0x8c>
8110fa0c:	29001917 	ldw	r4,100(r5)
8110fa10:	00f7ffc4 	movi	r3,-8193
8110fa14:	10880014 	ori	r2,r2,8192
8110fa18:	20c6703a 	and	r3,r4,r3
8110fa1c:	2880030d 	sth	r2,12(r5)
8110fa20:	28c01915 	stw	r3,100(r5)
8110fa24:	d9800404 	addi	r6,sp,16
8110fa28:	8009883a 	mov	r4,r16
8110fa2c:	11188980 	call	81118898 <__sfvwrite_r>
8110fa30:	1000091e 	bne	r2,zero,8110fa58 <_puts_r+0xc0>
8110fa34:	00800284 	movi	r2,10
8110fa38:	dfc00917 	ldw	ra,36(sp)
8110fa3c:	dc400817 	ldw	r17,32(sp)
8110fa40:	dc000717 	ldw	r16,28(sp)
8110fa44:	dec00a04 	addi	sp,sp,40
8110fa48:	f800283a 	ret
8110fa4c:	8009883a 	mov	r4,r16
8110fa50:	11180e80 	call	811180e8 <__sinit>
8110fa54:	003fe906 	br	8110f9fc <__reset+0xfb0ef9fc>
8110fa58:	00bfffc4 	movi	r2,-1
8110fa5c:	003ff606 	br	8110fa38 <__reset+0xfb0efa38>

8110fa60 <puts>:
8110fa60:	00a04534 	movhi	r2,33044
8110fa64:	10b73304 	addi	r2,r2,-9012
8110fa68:	200b883a 	mov	r5,r4
8110fa6c:	11000017 	ldw	r4,0(r2)
8110fa70:	110f9981 	jmpi	8110f998 <_puts_r>

8110fa74 <lflush>:
8110fa74:	2080030b 	ldhu	r2,12(r4)
8110fa78:	00c00244 	movi	r3,9
8110fa7c:	1080024c 	andi	r2,r2,9
8110fa80:	10c00226 	beq	r2,r3,8110fa8c <lflush+0x18>
8110fa84:	0005883a 	mov	r2,zero
8110fa88:	f800283a 	ret
8110fa8c:	1117d501 	jmpi	81117d50 <fflush>

8110fa90 <__srefill_r>:
8110fa90:	defffc04 	addi	sp,sp,-16
8110fa94:	de00012e 	bgeu	sp,et,8110fa9c <__srefill_r+0xc>
8110fa98:	003b68fa 	trap	3
8110fa9c:	dc400115 	stw	r17,4(sp)
8110faa0:	dc000015 	stw	r16,0(sp)
8110faa4:	dfc00315 	stw	ra,12(sp)
8110faa8:	dc800215 	stw	r18,8(sp)
8110faac:	2023883a 	mov	r17,r4
8110fab0:	2821883a 	mov	r16,r5
8110fab4:	20000226 	beq	r4,zero,8110fac0 <__srefill_r+0x30>
8110fab8:	20800e17 	ldw	r2,56(r4)
8110fabc:	10003c26 	beq	r2,zero,8110fbb0 <__srefill_r+0x120>
8110fac0:	80c0030b 	ldhu	r3,12(r16)
8110fac4:	1908000c 	andi	r4,r3,8192
8110fac8:	1805883a 	mov	r2,r3
8110facc:	2000071e 	bne	r4,zero,8110faec <__srefill_r+0x5c>
8110fad0:	81001917 	ldw	r4,100(r16)
8110fad4:	18880014 	ori	r2,r3,8192
8110fad8:	00f7ffc4 	movi	r3,-8193
8110fadc:	20c8703a 	and	r4,r4,r3
8110fae0:	8080030d 	sth	r2,12(r16)
8110fae4:	1007883a 	mov	r3,r2
8110fae8:	81001915 	stw	r4,100(r16)
8110faec:	80000115 	stw	zero,4(r16)
8110faf0:	1100080c 	andi	r4,r2,32
8110faf4:	2000571e 	bne	r4,zero,8110fc54 <__srefill_r+0x1c4>
8110faf8:	1100010c 	andi	r4,r2,4
8110fafc:	20001f26 	beq	r4,zero,8110fb7c <__srefill_r+0xec>
8110fb00:	81400c17 	ldw	r5,48(r16)
8110fb04:	28000826 	beq	r5,zero,8110fb28 <__srefill_r+0x98>
8110fb08:	80801004 	addi	r2,r16,64
8110fb0c:	28800226 	beq	r5,r2,8110fb18 <__srefill_r+0x88>
8110fb10:	8809883a 	mov	r4,r17
8110fb14:	11185800 	call	81118580 <_free_r>
8110fb18:	80800f17 	ldw	r2,60(r16)
8110fb1c:	80000c15 	stw	zero,48(r16)
8110fb20:	80800115 	stw	r2,4(r16)
8110fb24:	1000391e 	bne	r2,zero,8110fc0c <__srefill_r+0x17c>
8110fb28:	80800417 	ldw	r2,16(r16)
8110fb2c:	10004b26 	beq	r2,zero,8110fc5c <__srefill_r+0x1cc>
8110fb30:	8480030b 	ldhu	r18,12(r16)
8110fb34:	908000cc 	andi	r2,r18,3
8110fb38:	10001f1e 	bne	r2,zero,8110fbb8 <__srefill_r+0x128>
8110fb3c:	81800417 	ldw	r6,16(r16)
8110fb40:	80800817 	ldw	r2,32(r16)
8110fb44:	81c00517 	ldw	r7,20(r16)
8110fb48:	81400717 	ldw	r5,28(r16)
8110fb4c:	81800015 	stw	r6,0(r16)
8110fb50:	8809883a 	mov	r4,r17
8110fb54:	103ee83a 	callr	r2
8110fb58:	80800115 	stw	r2,4(r16)
8110fb5c:	00800e0e 	bge	zero,r2,8110fb98 <__srefill_r+0x108>
8110fb60:	0005883a 	mov	r2,zero
8110fb64:	dfc00317 	ldw	ra,12(sp)
8110fb68:	dc800217 	ldw	r18,8(sp)
8110fb6c:	dc400117 	ldw	r17,4(sp)
8110fb70:	dc000017 	ldw	r16,0(sp)
8110fb74:	dec00404 	addi	sp,sp,16
8110fb78:	f800283a 	ret
8110fb7c:	1100040c 	andi	r4,r2,16
8110fb80:	20003026 	beq	r4,zero,8110fc44 <__srefill_r+0x1b4>
8110fb84:	1080020c 	andi	r2,r2,8
8110fb88:	1000241e 	bne	r2,zero,8110fc1c <__srefill_r+0x18c>
8110fb8c:	18c00114 	ori	r3,r3,4
8110fb90:	80c0030d 	sth	r3,12(r16)
8110fb94:	003fe406 	br	8110fb28 <__reset+0xfb0efb28>
8110fb98:	80c0030b 	ldhu	r3,12(r16)
8110fb9c:	1000161e 	bne	r2,zero,8110fbf8 <__srefill_r+0x168>
8110fba0:	18c00814 	ori	r3,r3,32
8110fba4:	00bfffc4 	movi	r2,-1
8110fba8:	80c0030d 	sth	r3,12(r16)
8110fbac:	003fed06 	br	8110fb64 <__reset+0xfb0efb64>
8110fbb0:	11180e80 	call	811180e8 <__sinit>
8110fbb4:	003fc206 	br	8110fac0 <__reset+0xfb0efac0>
8110fbb8:	00a04534 	movhi	r2,33044
8110fbbc:	10b73204 	addi	r2,r2,-9016
8110fbc0:	11000017 	ldw	r4,0(r2)
8110fbc4:	01604474 	movhi	r5,33041
8110fbc8:	00800044 	movi	r2,1
8110fbcc:	297e9d04 	addi	r5,r5,-1420
8110fbd0:	8080030d 	sth	r2,12(r16)
8110fbd4:	1118d5c0 	call	81118d5c <_fwalk>
8110fbd8:	00800244 	movi	r2,9
8110fbdc:	8480030d 	sth	r18,12(r16)
8110fbe0:	9480024c 	andi	r18,r18,9
8110fbe4:	90bfd51e 	bne	r18,r2,8110fb3c <__reset+0xfb0efb3c>
8110fbe8:	800b883a 	mov	r5,r16
8110fbec:	8809883a 	mov	r4,r17
8110fbf0:	1117ac80 	call	81117ac8 <__sflush_r>
8110fbf4:	003fd106 	br	8110fb3c <__reset+0xfb0efb3c>
8110fbf8:	18c01014 	ori	r3,r3,64
8110fbfc:	80000115 	stw	zero,4(r16)
8110fc00:	00bfffc4 	movi	r2,-1
8110fc04:	80c0030d 	sth	r3,12(r16)
8110fc08:	003fd606 	br	8110fb64 <__reset+0xfb0efb64>
8110fc0c:	80c00e17 	ldw	r3,56(r16)
8110fc10:	0005883a 	mov	r2,zero
8110fc14:	80c00015 	stw	r3,0(r16)
8110fc18:	003fd206 	br	8110fb64 <__reset+0xfb0efb64>
8110fc1c:	800b883a 	mov	r5,r16
8110fc20:	8809883a 	mov	r4,r17
8110fc24:	1117cec0 	call	81117cec <_fflush_r>
8110fc28:	10000a1e 	bne	r2,zero,8110fc54 <__srefill_r+0x1c4>
8110fc2c:	8080030b 	ldhu	r2,12(r16)
8110fc30:	00fffdc4 	movi	r3,-9
8110fc34:	80000215 	stw	zero,8(r16)
8110fc38:	1886703a 	and	r3,r3,r2
8110fc3c:	80000615 	stw	zero,24(r16)
8110fc40:	003fd206 	br	8110fb8c <__reset+0xfb0efb8c>
8110fc44:	00800244 	movi	r2,9
8110fc48:	88800015 	stw	r2,0(r17)
8110fc4c:	18c01014 	ori	r3,r3,64
8110fc50:	80c0030d 	sth	r3,12(r16)
8110fc54:	00bfffc4 	movi	r2,-1
8110fc58:	003fc206 	br	8110fb64 <__reset+0xfb0efb64>
8110fc5c:	800b883a 	mov	r5,r16
8110fc60:	8809883a 	mov	r4,r17
8110fc64:	110ec440 	call	8110ec44 <__smakebuf_r>
8110fc68:	003fb106 	br	8110fb30 <__reset+0xfb0efb30>

8110fc6c <_sbrk_r>:
8110fc6c:	defffd04 	addi	sp,sp,-12
8110fc70:	de00012e 	bgeu	sp,et,8110fc78 <_sbrk_r+0xc>
8110fc74:	003b68fa 	trap	3
8110fc78:	dc000015 	stw	r16,0(sp)
8110fc7c:	04204534 	movhi	r16,33044
8110fc80:	dc400115 	stw	r17,4(sp)
8110fc84:	84379304 	addi	r16,r16,-8628
8110fc88:	2023883a 	mov	r17,r4
8110fc8c:	2809883a 	mov	r4,r5
8110fc90:	dfc00215 	stw	ra,8(sp)
8110fc94:	80000015 	stw	zero,0(r16)
8110fc98:	11247140 	call	81124714 <sbrk>
8110fc9c:	00ffffc4 	movi	r3,-1
8110fca0:	10c00526 	beq	r2,r3,8110fcb8 <_sbrk_r+0x4c>
8110fca4:	dfc00217 	ldw	ra,8(sp)
8110fca8:	dc400117 	ldw	r17,4(sp)
8110fcac:	dc000017 	ldw	r16,0(sp)
8110fcb0:	dec00304 	addi	sp,sp,12
8110fcb4:	f800283a 	ret
8110fcb8:	80c00017 	ldw	r3,0(r16)
8110fcbc:	183ff926 	beq	r3,zero,8110fca4 <__reset+0xfb0efca4>
8110fcc0:	88c00015 	stw	r3,0(r17)
8110fcc4:	003ff706 	br	8110fca4 <__reset+0xfb0efca4>

8110fcc8 <scanf>:
8110fcc8:	defffc04 	addi	sp,sp,-16
8110fccc:	de00012e 	bgeu	sp,et,8110fcd4 <scanf+0xc>
8110fcd0:	003b68fa 	trap	3
8110fcd4:	dfc00015 	stw	ra,0(sp)
8110fcd8:	d9400115 	stw	r5,4(sp)
8110fcdc:	d9800215 	stw	r6,8(sp)
8110fce0:	d9c00315 	stw	r7,12(sp)
8110fce4:	00a04534 	movhi	r2,33044
8110fce8:	10b73304 	addi	r2,r2,-9012
8110fcec:	200d883a 	mov	r6,r4
8110fcf0:	11000017 	ldw	r4,0(r2)
8110fcf4:	d9c00104 	addi	r7,sp,4
8110fcf8:	21400117 	ldw	r5,4(r4)
8110fcfc:	1115fbc0 	call	81115fbc <_vfscanf_r>
8110fd00:	dfc00017 	ldw	ra,0(sp)
8110fd04:	dec00404 	addi	sp,sp,16
8110fd08:	f800283a 	ret

8110fd0c <_scanf_r>:
8110fd0c:	defffd04 	addi	sp,sp,-12
8110fd10:	2805883a 	mov	r2,r5
8110fd14:	de00012e 	bgeu	sp,et,8110fd1c <_scanf_r+0x10>
8110fd18:	003b68fa 	trap	3
8110fd1c:	dfc00015 	stw	ra,0(sp)
8110fd20:	d9800115 	stw	r6,4(sp)
8110fd24:	d9c00215 	stw	r7,8(sp)
8110fd28:	21400117 	ldw	r5,4(r4)
8110fd2c:	d9c00104 	addi	r7,sp,4
8110fd30:	100d883a 	mov	r6,r2
8110fd34:	1115fbc0 	call	81115fbc <_vfscanf_r>
8110fd38:	dfc00017 	ldw	ra,0(sp)
8110fd3c:	dec00304 	addi	sp,sp,12
8110fd40:	f800283a 	ret

8110fd44 <_sprintf_r>:
8110fd44:	deffe404 	addi	sp,sp,-112
8110fd48:	2807883a 	mov	r3,r5
8110fd4c:	de00012e 	bgeu	sp,et,8110fd54 <_sprintf_r+0x10>
8110fd50:	003b68fa 	trap	3
8110fd54:	dfc01a15 	stw	ra,104(sp)
8110fd58:	d9c01b15 	stw	r7,108(sp)
8110fd5c:	00a00034 	movhi	r2,32768
8110fd60:	10bfffc4 	addi	r2,r2,-1
8110fd64:	02008204 	movi	r8,520
8110fd68:	d8800215 	stw	r2,8(sp)
8110fd6c:	d8800515 	stw	r2,20(sp)
8110fd70:	d9c01b04 	addi	r7,sp,108
8110fd74:	d80b883a 	mov	r5,sp
8110fd78:	00bfffc4 	movi	r2,-1
8110fd7c:	d8c00015 	stw	r3,0(sp)
8110fd80:	d8c00415 	stw	r3,16(sp)
8110fd84:	da00030d 	sth	r8,12(sp)
8110fd88:	d880038d 	sth	r2,14(sp)
8110fd8c:	11102ac0 	call	811102ac <___svfprintf_internal_r>
8110fd90:	d8c00017 	ldw	r3,0(sp)
8110fd94:	18000005 	stb	zero,0(r3)
8110fd98:	dfc01a17 	ldw	ra,104(sp)
8110fd9c:	dec01c04 	addi	sp,sp,112
8110fda0:	f800283a 	ret

8110fda4 <sprintf>:
8110fda4:	deffe304 	addi	sp,sp,-116
8110fda8:	2007883a 	mov	r3,r4
8110fdac:	de00012e 	bgeu	sp,et,8110fdb4 <sprintf+0x10>
8110fdb0:	003b68fa 	trap	3
8110fdb4:	dfc01a15 	stw	ra,104(sp)
8110fdb8:	d9801b15 	stw	r6,108(sp)
8110fdbc:	d9c01c15 	stw	r7,112(sp)
8110fdc0:	01204534 	movhi	r4,33044
8110fdc4:	21373304 	addi	r4,r4,-9012
8110fdc8:	21000017 	ldw	r4,0(r4)
8110fdcc:	00a00034 	movhi	r2,32768
8110fdd0:	10bfffc4 	addi	r2,r2,-1
8110fdd4:	280d883a 	mov	r6,r5
8110fdd8:	02008204 	movi	r8,520
8110fddc:	d8800215 	stw	r2,8(sp)
8110fde0:	d8800515 	stw	r2,20(sp)
8110fde4:	d9c01b04 	addi	r7,sp,108
8110fde8:	d80b883a 	mov	r5,sp
8110fdec:	00bfffc4 	movi	r2,-1
8110fdf0:	d8c00015 	stw	r3,0(sp)
8110fdf4:	d8c00415 	stw	r3,16(sp)
8110fdf8:	da00030d 	sth	r8,12(sp)
8110fdfc:	d880038d 	sth	r2,14(sp)
8110fe00:	11102ac0 	call	811102ac <___svfprintf_internal_r>
8110fe04:	d8c00017 	ldw	r3,0(sp)
8110fe08:	18000005 	stb	zero,0(r3)
8110fe0c:	dfc01a17 	ldw	ra,104(sp)
8110fe10:	dec01d04 	addi	sp,sp,116
8110fe14:	f800283a 	ret

8110fe18 <__sread>:
8110fe18:	defffe04 	addi	sp,sp,-8
8110fe1c:	de00012e 	bgeu	sp,et,8110fe24 <__sread+0xc>
8110fe20:	003b68fa 	trap	3
8110fe24:	dc000015 	stw	r16,0(sp)
8110fe28:	2821883a 	mov	r16,r5
8110fe2c:	2940038f 	ldh	r5,14(r5)
8110fe30:	dfc00115 	stw	ra,4(sp)
8110fe34:	111a7240 	call	8111a724 <_read_r>
8110fe38:	10000716 	blt	r2,zero,8110fe58 <__sread+0x40>
8110fe3c:	80c01417 	ldw	r3,80(r16)
8110fe40:	1887883a 	add	r3,r3,r2
8110fe44:	80c01415 	stw	r3,80(r16)
8110fe48:	dfc00117 	ldw	ra,4(sp)
8110fe4c:	dc000017 	ldw	r16,0(sp)
8110fe50:	dec00204 	addi	sp,sp,8
8110fe54:	f800283a 	ret
8110fe58:	80c0030b 	ldhu	r3,12(r16)
8110fe5c:	18fbffcc 	andi	r3,r3,61439
8110fe60:	80c0030d 	sth	r3,12(r16)
8110fe64:	dfc00117 	ldw	ra,4(sp)
8110fe68:	dc000017 	ldw	r16,0(sp)
8110fe6c:	dec00204 	addi	sp,sp,8
8110fe70:	f800283a 	ret

8110fe74 <__seofread>:
8110fe74:	0005883a 	mov	r2,zero
8110fe78:	f800283a 	ret

8110fe7c <__swrite>:
8110fe7c:	defffb04 	addi	sp,sp,-20
8110fe80:	de00012e 	bgeu	sp,et,8110fe88 <__swrite+0xc>
8110fe84:	003b68fa 	trap	3
8110fe88:	2880030b 	ldhu	r2,12(r5)
8110fe8c:	dcc00315 	stw	r19,12(sp)
8110fe90:	dc800215 	stw	r18,8(sp)
8110fe94:	dc400115 	stw	r17,4(sp)
8110fe98:	dc000015 	stw	r16,0(sp)
8110fe9c:	dfc00415 	stw	ra,16(sp)
8110fea0:	10c0400c 	andi	r3,r2,256
8110fea4:	2821883a 	mov	r16,r5
8110fea8:	2023883a 	mov	r17,r4
8110feac:	3025883a 	mov	r18,r6
8110feb0:	3827883a 	mov	r19,r7
8110feb4:	18000526 	beq	r3,zero,8110fecc <__swrite+0x50>
8110feb8:	2940038f 	ldh	r5,14(r5)
8110febc:	01c00084 	movi	r7,2
8110fec0:	000d883a 	mov	r6,zero
8110fec4:	11190640 	call	81119064 <_lseek_r>
8110fec8:	8080030b 	ldhu	r2,12(r16)
8110fecc:	8140038f 	ldh	r5,14(r16)
8110fed0:	10bbffcc 	andi	r2,r2,61439
8110fed4:	980f883a 	mov	r7,r19
8110fed8:	900d883a 	mov	r6,r18
8110fedc:	8809883a 	mov	r4,r17
8110fee0:	8080030d 	sth	r2,12(r16)
8110fee4:	dfc00417 	ldw	ra,16(sp)
8110fee8:	dcc00317 	ldw	r19,12(sp)
8110feec:	dc800217 	ldw	r18,8(sp)
8110fef0:	dc400117 	ldw	r17,4(sp)
8110fef4:	dc000017 	ldw	r16,0(sp)
8110fef8:	dec00504 	addi	sp,sp,20
8110fefc:	11160101 	jmpi	81116010 <_write_r>

8110ff00 <__sseek>:
8110ff00:	defffe04 	addi	sp,sp,-8
8110ff04:	de00012e 	bgeu	sp,et,8110ff0c <__sseek+0xc>
8110ff08:	003b68fa 	trap	3
8110ff0c:	dc000015 	stw	r16,0(sp)
8110ff10:	2821883a 	mov	r16,r5
8110ff14:	2940038f 	ldh	r5,14(r5)
8110ff18:	dfc00115 	stw	ra,4(sp)
8110ff1c:	11190640 	call	81119064 <_lseek_r>
8110ff20:	00ffffc4 	movi	r3,-1
8110ff24:	10c00826 	beq	r2,r3,8110ff48 <__sseek+0x48>
8110ff28:	80c0030b 	ldhu	r3,12(r16)
8110ff2c:	80801415 	stw	r2,80(r16)
8110ff30:	18c40014 	ori	r3,r3,4096
8110ff34:	80c0030d 	sth	r3,12(r16)
8110ff38:	dfc00117 	ldw	ra,4(sp)
8110ff3c:	dc000017 	ldw	r16,0(sp)
8110ff40:	dec00204 	addi	sp,sp,8
8110ff44:	f800283a 	ret
8110ff48:	80c0030b 	ldhu	r3,12(r16)
8110ff4c:	18fbffcc 	andi	r3,r3,61439
8110ff50:	80c0030d 	sth	r3,12(r16)
8110ff54:	dfc00117 	ldw	ra,4(sp)
8110ff58:	dc000017 	ldw	r16,0(sp)
8110ff5c:	dec00204 	addi	sp,sp,8
8110ff60:	f800283a 	ret

8110ff64 <__sclose>:
8110ff64:	2940038f 	ldh	r5,14(r5)
8110ff68:	11161d41 	jmpi	811161d4 <_close_r>

8110ff6c <strcspn>:
8110ff6c:	21c00007 	ldb	r7,0(r4)
8110ff70:	38000f26 	beq	r7,zero,8110ffb0 <strcspn+0x44>
8110ff74:	2a000007 	ldb	r8,0(r5)
8110ff78:	2005883a 	mov	r2,r4
8110ff7c:	40000726 	beq	r8,zero,8110ff9c <strcspn+0x30>
8110ff80:	3a000926 	beq	r7,r8,8110ffa8 <strcspn+0x3c>
8110ff84:	2807883a 	mov	r3,r5
8110ff88:	00000106 	br	8110ff90 <strcspn+0x24>
8110ff8c:	31c00626 	beq	r6,r7,8110ffa8 <strcspn+0x3c>
8110ff90:	18c00044 	addi	r3,r3,1
8110ff94:	19800007 	ldb	r6,0(r3)
8110ff98:	303ffc1e 	bne	r6,zero,8110ff8c <__reset+0xfb0eff8c>
8110ff9c:	10800044 	addi	r2,r2,1
8110ffa0:	11c00007 	ldb	r7,0(r2)
8110ffa4:	383ff51e 	bne	r7,zero,8110ff7c <__reset+0xfb0eff7c>
8110ffa8:	1105c83a 	sub	r2,r2,r4
8110ffac:	f800283a 	ret
8110ffb0:	0005883a 	mov	r2,zero
8110ffb4:	f800283a 	ret

8110ffb8 <strlen>:
8110ffb8:	208000cc 	andi	r2,r4,3
8110ffbc:	10002026 	beq	r2,zero,81110040 <strlen+0x88>
8110ffc0:	20800007 	ldb	r2,0(r4)
8110ffc4:	10002026 	beq	r2,zero,81110048 <strlen+0x90>
8110ffc8:	2005883a 	mov	r2,r4
8110ffcc:	00000206 	br	8110ffd8 <strlen+0x20>
8110ffd0:	10c00007 	ldb	r3,0(r2)
8110ffd4:	18001826 	beq	r3,zero,81110038 <strlen+0x80>
8110ffd8:	10800044 	addi	r2,r2,1
8110ffdc:	10c000cc 	andi	r3,r2,3
8110ffe0:	183ffb1e 	bne	r3,zero,8110ffd0 <__reset+0xfb0effd0>
8110ffe4:	10c00017 	ldw	r3,0(r2)
8110ffe8:	01ffbff4 	movhi	r7,65279
8110ffec:	39ffbfc4 	addi	r7,r7,-257
8110fff0:	00ca303a 	nor	r5,zero,r3
8110fff4:	01a02074 	movhi	r6,32897
8110fff8:	19c7883a 	add	r3,r3,r7
8110fffc:	31a02004 	addi	r6,r6,-32640
81110000:	1946703a 	and	r3,r3,r5
81110004:	1986703a 	and	r3,r3,r6
81110008:	1800091e 	bne	r3,zero,81110030 <strlen+0x78>
8111000c:	10800104 	addi	r2,r2,4
81110010:	10c00017 	ldw	r3,0(r2)
81110014:	19cb883a 	add	r5,r3,r7
81110018:	00c6303a 	nor	r3,zero,r3
8111001c:	28c6703a 	and	r3,r5,r3
81110020:	1986703a 	and	r3,r3,r6
81110024:	183ff926 	beq	r3,zero,8111000c <__reset+0xfb0f000c>
81110028:	00000106 	br	81110030 <strlen+0x78>
8111002c:	10800044 	addi	r2,r2,1
81110030:	10c00007 	ldb	r3,0(r2)
81110034:	183ffd1e 	bne	r3,zero,8111002c <__reset+0xfb0f002c>
81110038:	1105c83a 	sub	r2,r2,r4
8111003c:	f800283a 	ret
81110040:	2005883a 	mov	r2,r4
81110044:	003fe706 	br	8110ffe4 <__reset+0xfb0effe4>
81110048:	0005883a 	mov	r2,zero
8111004c:	f800283a 	ret

81110050 <_strtol_r>:
81110050:	00a04534 	movhi	r2,33044
81110054:	defff404 	addi	sp,sp,-48
81110058:	10b73104 	addi	r2,r2,-9020
8111005c:	de00012e 	bgeu	sp,et,81110064 <_strtol_r+0x14>
81110060:	003b68fa 	trap	3
81110064:	dd400715 	stw	r21,28(sp)
81110068:	15400017 	ldw	r21,0(r2)
8111006c:	dd800815 	stw	r22,32(sp)
81110070:	dd000615 	stw	r20,24(sp)
81110074:	dcc00515 	stw	r19,20(sp)
81110078:	d9000015 	stw	r4,0(sp)
8111007c:	dfc00b15 	stw	ra,44(sp)
81110080:	df000a15 	stw	fp,40(sp)
81110084:	ddc00915 	stw	r23,36(sp)
81110088:	dc800415 	stw	r18,16(sp)
8111008c:	dc400315 	stw	r17,12(sp)
81110090:	dc000215 	stw	r16,8(sp)
81110094:	2829883a 	mov	r20,r5
81110098:	3027883a 	mov	r19,r6
8111009c:	382d883a 	mov	r22,r7
811100a0:	2809883a 	mov	r4,r5
811100a4:	24000003 	ldbu	r16,0(r4)
811100a8:	24400044 	addi	r17,r4,1
811100ac:	2007883a 	mov	r3,r4
811100b0:	ac05883a 	add	r2,r21,r16
811100b4:	10800043 	ldbu	r2,1(r2)
811100b8:	8809883a 	mov	r4,r17
811100bc:	1080020c 	andi	r2,r2,8
811100c0:	103ff81e 	bne	r2,zero,811100a4 <__reset+0xfb0f00a4>
811100c4:	00800b44 	movi	r2,45
811100c8:	80805826 	beq	r16,r2,8111022c <_strtol_r+0x1dc>
811100cc:	00800ac4 	movi	r2,43
811100d0:	80805a26 	beq	r16,r2,8111023c <_strtol_r+0x1ec>
811100d4:	0039883a 	mov	fp,zero
811100d8:	b0004426 	beq	r22,zero,811101ec <_strtol_r+0x19c>
811100dc:	00800404 	movi	r2,16
811100e0:	b0806026 	beq	r22,r2,81110264 <_strtol_r+0x214>
811100e4:	b02f883a 	mov	r23,r22
811100e8:	00a00034 	movhi	r2,32768
811100ec:	e025003a 	cmpeq	r18,fp,zero
811100f0:	14a5c83a 	sub	r18,r2,r18
811100f4:	b80b883a 	mov	r5,r23
811100f8:	9009883a 	mov	r4,r18
811100fc:	1121c440 	call	81121c44 <__umodsi3>
81110100:	b80b883a 	mov	r5,r23
81110104:	9009883a 	mov	r4,r18
81110108:	d8800115 	stw	r2,4(sp)
8111010c:	1121be00 	call	81121be0 <__udivsi3>
81110110:	ac07883a 	add	r3,r21,r16
81110114:	18c00043 	ldbu	r3,1(r3)
81110118:	880b883a 	mov	r5,r17
8111011c:	000d883a 	mov	r6,zero
81110120:	1a00010c 	andi	r8,r3,4
81110124:	0009883a 	mov	r4,zero
81110128:	02800044 	movi	r10,1
8111012c:	027fffc4 	movi	r9,-1
81110130:	d9c00117 	ldw	r7,4(sp)
81110134:	40000e26 	beq	r8,zero,81110170 <_strtol_r+0x120>
81110138:	843ff404 	addi	r16,r16,-48
8111013c:	8580120e 	bge	r16,r22,81110188 <_strtol_r+0x138>
81110140:	32400526 	beq	r6,r9,81110158 <_strtol_r+0x108>
81110144:	11002536 	bltu	r2,r4,811101dc <_strtol_r+0x18c>
81110148:	20802326 	beq	r4,r2,811101d8 <_strtol_r+0x188>
8111014c:	25c9383a 	mul	r4,r4,r23
81110150:	01800044 	movi	r6,1
81110154:	8109883a 	add	r4,r16,r4
81110158:	2c000003 	ldbu	r16,0(r5)
8111015c:	29400044 	addi	r5,r5,1
81110160:	ac07883a 	add	r3,r21,r16
81110164:	18c00043 	ldbu	r3,1(r3)
81110168:	1a00010c 	andi	r8,r3,4
8111016c:	403ff21e 	bne	r8,zero,81110138 <__reset+0xfb0f0138>
81110170:	18c000cc 	andi	r3,r3,3
81110174:	18000426 	beq	r3,zero,81110188 <_strtol_r+0x138>
81110178:	1a801a26 	beq	r3,r10,811101e4 <_strtol_r+0x194>
8111017c:	00c015c4 	movi	r3,87
81110180:	80e1c83a 	sub	r16,r16,r3
81110184:	85bfee16 	blt	r16,r22,81110140 <__reset+0xfb0f0140>
81110188:	00bfffc4 	movi	r2,-1
8111018c:	30801e26 	beq	r6,r2,81110208 <_strtol_r+0x1b8>
81110190:	e0001b1e 	bne	fp,zero,81110200 <_strtol_r+0x1b0>
81110194:	2005883a 	mov	r2,r4
81110198:	98000326 	beq	r19,zero,811101a8 <_strtol_r+0x158>
8111019c:	3000211e 	bne	r6,zero,81110224 <_strtol_r+0x1d4>
811101a0:	a00b883a 	mov	r5,r20
811101a4:	99400015 	stw	r5,0(r19)
811101a8:	dfc00b17 	ldw	ra,44(sp)
811101ac:	df000a17 	ldw	fp,40(sp)
811101b0:	ddc00917 	ldw	r23,36(sp)
811101b4:	dd800817 	ldw	r22,32(sp)
811101b8:	dd400717 	ldw	r21,28(sp)
811101bc:	dd000617 	ldw	r20,24(sp)
811101c0:	dcc00517 	ldw	r19,20(sp)
811101c4:	dc800417 	ldw	r18,16(sp)
811101c8:	dc400317 	ldw	r17,12(sp)
811101cc:	dc000217 	ldw	r16,8(sp)
811101d0:	dec00c04 	addi	sp,sp,48
811101d4:	f800283a 	ret
811101d8:	3c3fdc0e 	bge	r7,r16,8111014c <__reset+0xfb0f014c>
811101dc:	01bfffc4 	movi	r6,-1
811101e0:	003fdd06 	br	81110158 <__reset+0xfb0f0158>
811101e4:	00c00dc4 	movi	r3,55
811101e8:	003fe506 	br	81110180 <__reset+0xfb0f0180>
811101ec:	00800c04 	movi	r2,48
811101f0:	80801626 	beq	r16,r2,8111024c <_strtol_r+0x1fc>
811101f4:	05800284 	movi	r22,10
811101f8:	b02f883a 	mov	r23,r22
811101fc:	003fba06 	br	811100e8 <__reset+0xfb0f00e8>
81110200:	0109c83a 	sub	r4,zero,r4
81110204:	003fe306 	br	81110194 <__reset+0xfb0f0194>
81110208:	d9000017 	ldw	r4,0(sp)
8111020c:	00c00884 	movi	r3,34
81110210:	e005003a 	cmpeq	r2,fp,zero
81110214:	20c00015 	stw	r3,0(r4)
81110218:	00e00034 	movhi	r3,32768
8111021c:	1885c83a 	sub	r2,r3,r2
81110220:	983fe126 	beq	r19,zero,811101a8 <__reset+0xfb0f01a8>
81110224:	297fffc4 	addi	r5,r5,-1
81110228:	003fde06 	br	811101a4 <__reset+0xfb0f01a4>
8111022c:	1c400084 	addi	r17,r3,2
81110230:	1c000043 	ldbu	r16,1(r3)
81110234:	07000044 	movi	fp,1
81110238:	003fa706 	br	811100d8 <__reset+0xfb0f00d8>
8111023c:	1c400084 	addi	r17,r3,2
81110240:	1c000043 	ldbu	r16,1(r3)
81110244:	0039883a 	mov	fp,zero
81110248:	003fa306 	br	811100d8 <__reset+0xfb0f00d8>
8111024c:	88800003 	ldbu	r2,0(r17)
81110250:	00c01604 	movi	r3,88
81110254:	108037cc 	andi	r2,r2,223
81110258:	10c00826 	beq	r2,r3,8111027c <_strtol_r+0x22c>
8111025c:	05800204 	movi	r22,8
81110260:	003fa006 	br	811100e4 <__reset+0xfb0f00e4>
81110264:	00800c04 	movi	r2,48
81110268:	80bf9e1e 	bne	r16,r2,811100e4 <__reset+0xfb0f00e4>
8111026c:	88800003 	ldbu	r2,0(r17)
81110270:	00c01604 	movi	r3,88
81110274:	108037cc 	andi	r2,r2,223
81110278:	10ff9a1e 	bne	r2,r3,811100e4 <__reset+0xfb0f00e4>
8111027c:	05c00404 	movi	r23,16
81110280:	8c000043 	ldbu	r16,1(r17)
81110284:	b82d883a 	mov	r22,r23
81110288:	8c400084 	addi	r17,r17,2
8111028c:	003f9606 	br	811100e8 <__reset+0xfb0f00e8>

81110290 <strtol>:
81110290:	00a04534 	movhi	r2,33044
81110294:	10b73304 	addi	r2,r2,-9012
81110298:	300f883a 	mov	r7,r6
8111029c:	280d883a 	mov	r6,r5
811102a0:	200b883a 	mov	r5,r4
811102a4:	11000017 	ldw	r4,0(r2)
811102a8:	11100501 	jmpi	81110050 <_strtol_r>

811102ac <___svfprintf_internal_r>:
811102ac:	deffb704 	addi	sp,sp,-292
811102b0:	de00012e 	bgeu	sp,et,811102b8 <___svfprintf_internal_r+0xc>
811102b4:	003b68fa 	trap	3
811102b8:	dfc04815 	stw	ra,288(sp)
811102bc:	ddc04615 	stw	r23,280(sp)
811102c0:	d9402c15 	stw	r5,176(sp)
811102c4:	d9003915 	stw	r4,228(sp)
811102c8:	302f883a 	mov	r23,r6
811102cc:	d9c02d15 	stw	r7,180(sp)
811102d0:	df004715 	stw	fp,284(sp)
811102d4:	dd804515 	stw	r22,276(sp)
811102d8:	dd404415 	stw	r21,272(sp)
811102dc:	dd004315 	stw	r20,268(sp)
811102e0:	dcc04215 	stw	r19,264(sp)
811102e4:	dc804115 	stw	r18,260(sp)
811102e8:	dc404015 	stw	r17,256(sp)
811102ec:	dc003f15 	stw	r16,252(sp)
811102f0:	11190340 	call	81119034 <_localeconv_r>
811102f4:	10800017 	ldw	r2,0(r2)
811102f8:	1009883a 	mov	r4,r2
811102fc:	d8803415 	stw	r2,208(sp)
81110300:	110ffb80 	call	8110ffb8 <strlen>
81110304:	d8c02c17 	ldw	r3,176(sp)
81110308:	d8803815 	stw	r2,224(sp)
8111030c:	1880030b 	ldhu	r2,12(r3)
81110310:	1080200c 	andi	r2,r2,128
81110314:	10000226 	beq	r2,zero,81110320 <___svfprintf_internal_r+0x74>
81110318:	18800417 	ldw	r2,16(r3)
8111031c:	10067f26 	beq	r2,zero,81111d1c <___svfprintf_internal_r+0x1a70>
81110320:	dcc03917 	ldw	r19,228(sp)
81110324:	d8c00404 	addi	r3,sp,16
81110328:	05604534 	movhi	r21,33044
8111032c:	d9001e04 	addi	r4,sp,120
81110330:	ad6e3284 	addi	r21,r21,-18230
81110334:	d8c01e15 	stw	r3,120(sp)
81110338:	d8002015 	stw	zero,128(sp)
8111033c:	d8001f15 	stw	zero,124(sp)
81110340:	d8003315 	stw	zero,204(sp)
81110344:	d8003615 	stw	zero,216(sp)
81110348:	d8003715 	stw	zero,220(sp)
8111034c:	1811883a 	mov	r8,r3
81110350:	d8003a15 	stw	zero,232(sp)
81110354:	d8003b15 	stw	zero,236(sp)
81110358:	d8002f15 	stw	zero,188(sp)
8111035c:	d9002815 	stw	r4,160(sp)
81110360:	b8800007 	ldb	r2,0(r23)
81110364:	10026726 	beq	r2,zero,81110d04 <___svfprintf_internal_r+0xa58>
81110368:	00c00944 	movi	r3,37
8111036c:	b821883a 	mov	r16,r23
81110370:	10c0021e 	bne	r2,r3,8111037c <___svfprintf_internal_r+0xd0>
81110374:	00001406 	br	811103c8 <___svfprintf_internal_r+0x11c>
81110378:	10c00326 	beq	r2,r3,81110388 <___svfprintf_internal_r+0xdc>
8111037c:	84000044 	addi	r16,r16,1
81110380:	80800007 	ldb	r2,0(r16)
81110384:	103ffc1e 	bne	r2,zero,81110378 <__reset+0xfb0f0378>
81110388:	85e3c83a 	sub	r17,r16,r23
8111038c:	88000e26 	beq	r17,zero,811103c8 <___svfprintf_internal_r+0x11c>
81110390:	d8c02017 	ldw	r3,128(sp)
81110394:	d8801f17 	ldw	r2,124(sp)
81110398:	45c00015 	stw	r23,0(r8)
8111039c:	1c47883a 	add	r3,r3,r17
811103a0:	10800044 	addi	r2,r2,1
811103a4:	d8c02015 	stw	r3,128(sp)
811103a8:	44400115 	stw	r17,4(r8)
811103ac:	d8801f15 	stw	r2,124(sp)
811103b0:	00c001c4 	movi	r3,7
811103b4:	18809716 	blt	r3,r2,81110614 <___svfprintf_internal_r+0x368>
811103b8:	42000204 	addi	r8,r8,8
811103bc:	d9402f17 	ldw	r5,188(sp)
811103c0:	2c4b883a 	add	r5,r5,r17
811103c4:	d9402f15 	stw	r5,188(sp)
811103c8:	80800007 	ldb	r2,0(r16)
811103cc:	10009826 	beq	r2,zero,81110630 <___svfprintf_internal_r+0x384>
811103d0:	84400047 	ldb	r17,1(r16)
811103d4:	00bfffc4 	movi	r2,-1
811103d8:	85c00044 	addi	r23,r16,1
811103dc:	d8002785 	stb	zero,158(sp)
811103e0:	0007883a 	mov	r3,zero
811103e4:	000f883a 	mov	r7,zero
811103e8:	d8802915 	stw	r2,164(sp)
811103ec:	d8003115 	stw	zero,196(sp)
811103f0:	0025883a 	mov	r18,zero
811103f4:	01401604 	movi	r5,88
811103f8:	01800244 	movi	r6,9
811103fc:	02800a84 	movi	r10,42
81110400:	02401b04 	movi	r9,108
81110404:	bdc00044 	addi	r23,r23,1
81110408:	88bff804 	addi	r2,r17,-32
8111040c:	2882f036 	bltu	r5,r2,81110fd0 <___svfprintf_internal_r+0xd24>
81110410:	100490ba 	slli	r2,r2,2
81110414:	01204474 	movhi	r4,33041
81110418:	21010a04 	addi	r4,r4,1064
8111041c:	1105883a 	add	r2,r2,r4
81110420:	10800017 	ldw	r2,0(r2)
81110424:	1000683a 	jmp	r2
81110428:	81110f38 	rdprs	r4,r16,17468
8111042c:	81110fd0 	cmplti	r4,r16,17471
81110430:	81110fd0 	cmplti	r4,r16,17471
81110434:	81110f2c 	andhi	r4,r16,17468
81110438:	81110fd0 	cmplti	r4,r16,17471
8111043c:	81110fd0 	cmplti	r4,r16,17471
81110440:	81110fd0 	cmplti	r4,r16,17471
81110444:	81110fd0 	cmplti	r4,r16,17471
81110448:	81110fd0 	cmplti	r4,r16,17471
8111044c:	81110fd0 	cmplti	r4,r16,17471
81110450:	8111068c 	andi	r4,r16,17434
81110454:	81110e68 	cmpgeui	r4,r16,17465
81110458:	81110fd0 	cmplti	r4,r16,17471
8111045c:	8111059c 	xori	r4,r16,17430
81110460:	811106b4 	orhi	r4,r16,17434
81110464:	81110fd0 	cmplti	r4,r16,17471
81110468:	81110728 	cmpgeui	r4,r16,17436
8111046c:	811106f4 	orhi	r4,r16,17435
81110470:	811106f4 	orhi	r4,r16,17435
81110474:	811106f4 	orhi	r4,r16,17435
81110478:	811106f4 	orhi	r4,r16,17435
8111047c:	811106f4 	orhi	r4,r16,17435
81110480:	811106f4 	orhi	r4,r16,17435
81110484:	811106f4 	orhi	r4,r16,17435
81110488:	811106f4 	orhi	r4,r16,17435
8111048c:	811106f4 	orhi	r4,r16,17435
81110490:	81110fd0 	cmplti	r4,r16,17471
81110494:	81110fd0 	cmplti	r4,r16,17471
81110498:	81110fd0 	cmplti	r4,r16,17471
8111049c:	81110fd0 	cmplti	r4,r16,17471
811104a0:	81110fd0 	cmplti	r4,r16,17471
811104a4:	81110fd0 	cmplti	r4,r16,17471
811104a8:	81110fd0 	cmplti	r4,r16,17471
811104ac:	81110fd0 	cmplti	r4,r16,17471
811104b0:	81110fd0 	cmplti	r4,r16,17471
811104b4:	81110fd0 	cmplti	r4,r16,17471
811104b8:	811107e0 	cmpeqi	r4,r16,17439
811104bc:	81110734 	orhi	r4,r16,17436
811104c0:	81110fd0 	cmplti	r4,r16,17471
811104c4:	81110734 	orhi	r4,r16,17436
811104c8:	81110fd0 	cmplti	r4,r16,17471
811104cc:	81110fd0 	cmplti	r4,r16,17471
811104d0:	81110fd0 	cmplti	r4,r16,17471
811104d4:	81110fd0 	cmplti	r4,r16,17471
811104d8:	811107d4 	ori	r4,r16,17439
811104dc:	81110fd0 	cmplti	r4,r16,17471
811104e0:	81110fd0 	cmplti	r4,r16,17471
811104e4:	8111089c 	xori	r4,r16,17442
811104e8:	81110fd0 	cmplti	r4,r16,17471
811104ec:	81110fd0 	cmplti	r4,r16,17471
811104f0:	81110fd0 	cmplti	r4,r16,17471
811104f4:	81110fd0 	cmplti	r4,r16,17471
811104f8:	81110fd0 	cmplti	r4,r16,17471
811104fc:	81110d0c 	andi	r4,r16,17460
81110500:	81110fd0 	cmplti	r4,r16,17471
81110504:	81110fd0 	cmplti	r4,r16,17471
81110508:	81110d6c 	andhi	r4,r16,17461
8111050c:	81110fd0 	cmplti	r4,r16,17471
81110510:	81110fd0 	cmplti	r4,r16,17471
81110514:	81110fd0 	cmplti	r4,r16,17471
81110518:	81110fd0 	cmplti	r4,r16,17471
8111051c:	81110fd0 	cmplti	r4,r16,17471
81110520:	81110fd0 	cmplti	r4,r16,17471
81110524:	81110fd0 	cmplti	r4,r16,17471
81110528:	81110fd0 	cmplti	r4,r16,17471
8111052c:	81110fd0 	cmplti	r4,r16,17471
81110530:	81110fd0 	cmplti	r4,r16,17471
81110534:	81110e1c 	xori	r4,r16,17464
81110538:	81110f58 	cmpnei	r4,r16,17469
8111053c:	81110734 	orhi	r4,r16,17436
81110540:	81110734 	orhi	r4,r16,17436
81110544:	81110734 	orhi	r4,r16,17436
81110548:	81110fac 	andhi	r4,r16,17470
8111054c:	81110f58 	cmpnei	r4,r16,17469
81110550:	81110fd0 	cmplti	r4,r16,17471
81110554:	81110fd0 	cmplti	r4,r16,17471
81110558:	81110f68 	cmpgeui	r4,r16,17469
8111055c:	81110fd0 	cmplti	r4,r16,17471
81110560:	81110f78 	rdprs	r4,r16,17469
81110564:	81110e58 	cmpnei	r4,r16,17465
81110568:	811105a8 	cmpgeui	r4,r16,17430
8111056c:	81110e78 	rdprs	r4,r16,17465
81110570:	81110fd0 	cmplti	r4,r16,17471
81110574:	81110e84 	addi	r4,r16,17466
81110578:	81110fd0 	cmplti	r4,r16,17471
8111057c:	81110ee0 	cmpeqi	r4,r16,17467
81110580:	81110fd0 	cmplti	r4,r16,17471
81110584:	81110fd0 	cmplti	r4,r16,17471
81110588:	81110ef0 	cmpltui	r4,r16,17467
8111058c:	d9003117 	ldw	r4,196(sp)
81110590:	d8802d15 	stw	r2,180(sp)
81110594:	0109c83a 	sub	r4,zero,r4
81110598:	d9003115 	stw	r4,196(sp)
8111059c:	94800114 	ori	r18,r18,4
811105a0:	bc400007 	ldb	r17,0(r23)
811105a4:	003f9706 	br	81110404 <__reset+0xfb0f0404>
811105a8:	00800c04 	movi	r2,48
811105ac:	d9002d17 	ldw	r4,180(sp)
811105b0:	d9402917 	ldw	r5,164(sp)
811105b4:	d8802705 	stb	r2,156(sp)
811105b8:	00801e04 	movi	r2,120
811105bc:	d8802745 	stb	r2,157(sp)
811105c0:	d8002785 	stb	zero,158(sp)
811105c4:	20c00104 	addi	r3,r4,4
811105c8:	25000017 	ldw	r20,0(r4)
811105cc:	002d883a 	mov	r22,zero
811105d0:	90800094 	ori	r2,r18,2
811105d4:	28028616 	blt	r5,zero,81110ff0 <___svfprintf_internal_r+0xd44>
811105d8:	00bfdfc4 	movi	r2,-129
811105dc:	90a4703a 	and	r18,r18,r2
811105e0:	d8c02d15 	stw	r3,180(sp)
811105e4:	94800094 	ori	r18,r18,2
811105e8:	a002731e 	bne	r20,zero,81110fb8 <___svfprintf_internal_r+0xd0c>
811105ec:	00a04534 	movhi	r2,33044
811105f0:	10ae2b04 	addi	r2,r2,-18260
811105f4:	d8803a15 	stw	r2,232(sp)
811105f8:	04401e04 	movi	r17,120
811105fc:	d8c02917 	ldw	r3,164(sp)
81110600:	0039883a 	mov	fp,zero
81110604:	1801d526 	beq	r3,zero,81110d5c <___svfprintf_internal_r+0xab0>
81110608:	0029883a 	mov	r20,zero
8111060c:	002d883a 	mov	r22,zero
81110610:	0001f106 	br	81110dd8 <___svfprintf_internal_r+0xb2c>
81110614:	d9402c17 	ldw	r5,176(sp)
81110618:	d9801e04 	addi	r6,sp,120
8111061c:	9809883a 	mov	r4,r19
81110620:	111cee40 	call	8111cee4 <__ssprint_r>
81110624:	1000081e 	bne	r2,zero,81110648 <___svfprintf_internal_r+0x39c>
81110628:	da000404 	addi	r8,sp,16
8111062c:	003f6306 	br	811103bc <__reset+0xfb0f03bc>
81110630:	d8802017 	ldw	r2,128(sp)
81110634:	10000426 	beq	r2,zero,81110648 <___svfprintf_internal_r+0x39c>
81110638:	d9402c17 	ldw	r5,176(sp)
8111063c:	d9003917 	ldw	r4,228(sp)
81110640:	d9801e04 	addi	r6,sp,120
81110644:	111cee40 	call	8111cee4 <__ssprint_r>
81110648:	d8802c17 	ldw	r2,176(sp)
8111064c:	10c0030b 	ldhu	r3,12(r2)
81110650:	d8802f17 	ldw	r2,188(sp)
81110654:	18c0100c 	andi	r3,r3,64
81110658:	1805f51e 	bne	r3,zero,81111e30 <___svfprintf_internal_r+0x1b84>
8111065c:	dfc04817 	ldw	ra,288(sp)
81110660:	df004717 	ldw	fp,284(sp)
81110664:	ddc04617 	ldw	r23,280(sp)
81110668:	dd804517 	ldw	r22,276(sp)
8111066c:	dd404417 	ldw	r21,272(sp)
81110670:	dd004317 	ldw	r20,268(sp)
81110674:	dcc04217 	ldw	r19,264(sp)
81110678:	dc804117 	ldw	r18,260(sp)
8111067c:	dc404017 	ldw	r17,256(sp)
81110680:	dc003f17 	ldw	r16,252(sp)
81110684:	dec04904 	addi	sp,sp,292
81110688:	f800283a 	ret
8111068c:	d8802d17 	ldw	r2,180(sp)
81110690:	d9002d17 	ldw	r4,180(sp)
81110694:	10800017 	ldw	r2,0(r2)
81110698:	d8803115 	stw	r2,196(sp)
8111069c:	20800104 	addi	r2,r4,4
811106a0:	d9003117 	ldw	r4,196(sp)
811106a4:	203fb916 	blt	r4,zero,8111058c <__reset+0xfb0f058c>
811106a8:	d8802d15 	stw	r2,180(sp)
811106ac:	bc400007 	ldb	r17,0(r23)
811106b0:	003f5406 	br	81110404 <__reset+0xfb0f0404>
811106b4:	bc400007 	ldb	r17,0(r23)
811106b8:	bac00044 	addi	r11,r23,1
811106bc:	8a873926 	beq	r17,r10,811123a4 <___svfprintf_internal_r+0x20f8>
811106c0:	88bff404 	addi	r2,r17,-48
811106c4:	0009883a 	mov	r4,zero
811106c8:	30868836 	bltu	r6,r2,811120ec <___svfprintf_internal_r+0x1e40>
811106cc:	5c400007 	ldb	r17,0(r11)
811106d0:	210002a4 	muli	r4,r4,10
811106d4:	5dc00044 	addi	r23,r11,1
811106d8:	b817883a 	mov	r11,r23
811106dc:	2089883a 	add	r4,r4,r2
811106e0:	88bff404 	addi	r2,r17,-48
811106e4:	30bff92e 	bgeu	r6,r2,811106cc <__reset+0xfb0f06cc>
811106e8:	2005d716 	blt	r4,zero,81111e48 <___svfprintf_internal_r+0x1b9c>
811106ec:	d9002915 	stw	r4,164(sp)
811106f0:	003f4506 	br	81110408 <__reset+0xfb0f0408>
811106f4:	b809883a 	mov	r4,r23
811106f8:	d8003115 	stw	zero,196(sp)
811106fc:	88bff404 	addi	r2,r17,-48
81110700:	0017883a 	mov	r11,zero
81110704:	24400007 	ldb	r17,0(r4)
81110708:	5ac002a4 	muli	r11,r11,10
8111070c:	bdc00044 	addi	r23,r23,1
81110710:	b809883a 	mov	r4,r23
81110714:	12d7883a 	add	r11,r2,r11
81110718:	88bff404 	addi	r2,r17,-48
8111071c:	30bff92e 	bgeu	r6,r2,81110704 <__reset+0xfb0f0704>
81110720:	dac03115 	stw	r11,196(sp)
81110724:	003f3806 	br	81110408 <__reset+0xfb0f0408>
81110728:	94802014 	ori	r18,r18,128
8111072c:	bc400007 	ldb	r17,0(r23)
81110730:	003f3406 	br	81110404 <__reset+0xfb0f0404>
81110734:	18c03fcc 	andi	r3,r3,255
81110738:	1807471e 	bne	r3,zero,81112458 <___svfprintf_internal_r+0x21ac>
8111073c:	9080020c 	andi	r2,r18,8
81110740:	10047d26 	beq	r2,zero,81111938 <___svfprintf_internal_r+0x168c>
81110744:	d8c02d17 	ldw	r3,180(sp)
81110748:	d9002d17 	ldw	r4,180(sp)
8111074c:	d9402d17 	ldw	r5,180(sp)
81110750:	18c00017 	ldw	r3,0(r3)
81110754:	21000117 	ldw	r4,4(r4)
81110758:	29400204 	addi	r5,r5,8
8111075c:	d8c03615 	stw	r3,216(sp)
81110760:	d9003715 	stw	r4,220(sp)
81110764:	d9402d15 	stw	r5,180(sp)
81110768:	d9003617 	ldw	r4,216(sp)
8111076c:	d9403717 	ldw	r5,220(sp)
81110770:	da003e15 	stw	r8,248(sp)
81110774:	04000044 	movi	r16,1
81110778:	111acf80 	call	8111acf8 <__fpclassifyd>
8111077c:	da003e17 	ldw	r8,248(sp)
81110780:	14044b1e 	bne	r2,r16,811118b0 <___svfprintf_internal_r+0x1604>
81110784:	d9003617 	ldw	r4,216(sp)
81110788:	d9403717 	ldw	r5,220(sp)
8111078c:	000d883a 	mov	r6,zero
81110790:	000f883a 	mov	r7,zero
81110794:	11231a00 	call	811231a0 <__ledf2>
81110798:	da003e17 	ldw	r8,248(sp)
8111079c:	1005f316 	blt	r2,zero,81111f6c <___svfprintf_internal_r+0x1cc0>
811107a0:	df002783 	ldbu	fp,158(sp)
811107a4:	008011c4 	movi	r2,71
811107a8:	1445590e 	bge	r2,r17,81111d10 <___svfprintf_internal_r+0x1a64>
811107ac:	04204534 	movhi	r16,33044
811107b0:	842e2304 	addi	r16,r16,-18292
811107b4:	00c000c4 	movi	r3,3
811107b8:	00bfdfc4 	movi	r2,-129
811107bc:	d8c02a15 	stw	r3,168(sp)
811107c0:	90a4703a 	and	r18,r18,r2
811107c4:	d8c02e15 	stw	r3,184(sp)
811107c8:	d8002915 	stw	zero,164(sp)
811107cc:	d8003215 	stw	zero,200(sp)
811107d0:	00006606 	br	8111096c <___svfprintf_internal_r+0x6c0>
811107d4:	94800214 	ori	r18,r18,8
811107d8:	bc400007 	ldb	r17,0(r23)
811107dc:	003f0906 	br	81110404 <__reset+0xfb0f0404>
811107e0:	18c03fcc 	andi	r3,r3,255
811107e4:	1807181e 	bne	r3,zero,81112448 <___svfprintf_internal_r+0x219c>
811107e8:	94800414 	ori	r18,r18,16
811107ec:	9080080c 	andi	r2,r18,32
811107f0:	10039626 	beq	r2,zero,8111164c <___svfprintf_internal_r+0x13a0>
811107f4:	d9402d17 	ldw	r5,180(sp)
811107f8:	28800117 	ldw	r2,4(r5)
811107fc:	2d000017 	ldw	r20,0(r5)
81110800:	29400204 	addi	r5,r5,8
81110804:	d9402d15 	stw	r5,180(sp)
81110808:	102d883a 	mov	r22,r2
8111080c:	10039816 	blt	r2,zero,81111670 <___svfprintf_internal_r+0x13c4>
81110810:	d9402917 	ldw	r5,164(sp)
81110814:	df002783 	ldbu	fp,158(sp)
81110818:	2803ab16 	blt	r5,zero,811116c8 <___svfprintf_internal_r+0x141c>
8111081c:	00ffdfc4 	movi	r3,-129
81110820:	a584b03a 	or	r2,r20,r22
81110824:	90e4703a 	and	r18,r18,r3
81110828:	10014a26 	beq	r2,zero,81110d54 <___svfprintf_internal_r+0xaa8>
8111082c:	b0034b26 	beq	r22,zero,8111155c <___svfprintf_internal_r+0x12b0>
81110830:	dc402a15 	stw	r17,168(sp)
81110834:	dc001e04 	addi	r16,sp,120
81110838:	b023883a 	mov	r17,r22
8111083c:	402d883a 	mov	r22,r8
81110840:	a009883a 	mov	r4,r20
81110844:	880b883a 	mov	r5,r17
81110848:	01800284 	movi	r6,10
8111084c:	000f883a 	mov	r7,zero
81110850:	11215a80 	call	811215a8 <__umoddi3>
81110854:	10800c04 	addi	r2,r2,48
81110858:	843fffc4 	addi	r16,r16,-1
8111085c:	a009883a 	mov	r4,r20
81110860:	880b883a 	mov	r5,r17
81110864:	80800005 	stb	r2,0(r16)
81110868:	01800284 	movi	r6,10
8111086c:	000f883a 	mov	r7,zero
81110870:	11210280 	call	81121028 <__udivdi3>
81110874:	1029883a 	mov	r20,r2
81110878:	10c4b03a 	or	r2,r2,r3
8111087c:	1823883a 	mov	r17,r3
81110880:	103fef1e 	bne	r2,zero,81110840 <__reset+0xfb0f0840>
81110884:	d8c02817 	ldw	r3,160(sp)
81110888:	dc402a17 	ldw	r17,168(sp)
8111088c:	b011883a 	mov	r8,r22
81110890:	1c07c83a 	sub	r3,r3,r16
81110894:	d8c02e15 	stw	r3,184(sp)
81110898:	00002e06 	br	81110954 <___svfprintf_internal_r+0x6a8>
8111089c:	18c03fcc 	andi	r3,r3,255
811108a0:	1806e71e 	bne	r3,zero,81112440 <___svfprintf_internal_r+0x2194>
811108a4:	94800414 	ori	r18,r18,16
811108a8:	9080080c 	andi	r2,r18,32
811108ac:	1002d426 	beq	r2,zero,81111400 <___svfprintf_internal_r+0x1154>
811108b0:	d9402d17 	ldw	r5,180(sp)
811108b4:	d8c02917 	ldw	r3,164(sp)
811108b8:	d8002785 	stb	zero,158(sp)
811108bc:	28800204 	addi	r2,r5,8
811108c0:	2d000017 	ldw	r20,0(r5)
811108c4:	2d800117 	ldw	r22,4(r5)
811108c8:	18041516 	blt	r3,zero,81111920 <___svfprintf_internal_r+0x1674>
811108cc:	013fdfc4 	movi	r4,-129
811108d0:	a586b03a 	or	r3,r20,r22
811108d4:	d8802d15 	stw	r2,180(sp)
811108d8:	9124703a 	and	r18,r18,r4
811108dc:	1802d51e 	bne	r3,zero,81111434 <___svfprintf_internal_r+0x1188>
811108e0:	d9402917 	ldw	r5,164(sp)
811108e4:	0039883a 	mov	fp,zero
811108e8:	2806be26 	beq	r5,zero,811123e4 <___svfprintf_internal_r+0x2138>
811108ec:	0029883a 	mov	r20,zero
811108f0:	002d883a 	mov	r22,zero
811108f4:	dc001e04 	addi	r16,sp,120
811108f8:	a006d0fa 	srli	r3,r20,3
811108fc:	b008977a 	slli	r4,r22,29
81110900:	b02cd0fa 	srli	r22,r22,3
81110904:	a50001cc 	andi	r20,r20,7
81110908:	a0800c04 	addi	r2,r20,48
8111090c:	843fffc4 	addi	r16,r16,-1
81110910:	20e8b03a 	or	r20,r4,r3
81110914:	80800005 	stb	r2,0(r16)
81110918:	a586b03a 	or	r3,r20,r22
8111091c:	183ff61e 	bne	r3,zero,811108f8 <__reset+0xfb0f08f8>
81110920:	90c0004c 	andi	r3,r18,1
81110924:	18013926 	beq	r3,zero,81110e0c <___svfprintf_internal_r+0xb60>
81110928:	10803fcc 	andi	r2,r2,255
8111092c:	1080201c 	xori	r2,r2,128
81110930:	10bfe004 	addi	r2,r2,-128
81110934:	00c00c04 	movi	r3,48
81110938:	10c13426 	beq	r2,r3,81110e0c <___svfprintf_internal_r+0xb60>
8111093c:	80ffffc5 	stb	r3,-1(r16)
81110940:	d8c02817 	ldw	r3,160(sp)
81110944:	80bfffc4 	addi	r2,r16,-1
81110948:	1021883a 	mov	r16,r2
8111094c:	1887c83a 	sub	r3,r3,r2
81110950:	d8c02e15 	stw	r3,184(sp)
81110954:	d8802e17 	ldw	r2,184(sp)
81110958:	d9002917 	ldw	r4,164(sp)
8111095c:	1100010e 	bge	r2,r4,81110964 <___svfprintf_internal_r+0x6b8>
81110960:	2005883a 	mov	r2,r4
81110964:	d8802a15 	stw	r2,168(sp)
81110968:	d8003215 	stw	zero,200(sp)
8111096c:	e7003fcc 	andi	fp,fp,255
81110970:	e700201c 	xori	fp,fp,128
81110974:	e73fe004 	addi	fp,fp,-128
81110978:	e0000326 	beq	fp,zero,81110988 <___svfprintf_internal_r+0x6dc>
8111097c:	d8c02a17 	ldw	r3,168(sp)
81110980:	18c00044 	addi	r3,r3,1
81110984:	d8c02a15 	stw	r3,168(sp)
81110988:	90c0008c 	andi	r3,r18,2
8111098c:	d8c02b15 	stw	r3,172(sp)
81110990:	18000326 	beq	r3,zero,811109a0 <___svfprintf_internal_r+0x6f4>
81110994:	d8c02a17 	ldw	r3,168(sp)
81110998:	18c00084 	addi	r3,r3,2
8111099c:	d8c02a15 	stw	r3,168(sp)
811109a0:	90c0210c 	andi	r3,r18,132
811109a4:	d8c03015 	stw	r3,192(sp)
811109a8:	1801a11e 	bne	r3,zero,81111030 <___svfprintf_internal_r+0xd84>
811109ac:	d9003117 	ldw	r4,196(sp)
811109b0:	d8c02a17 	ldw	r3,168(sp)
811109b4:	20e9c83a 	sub	r20,r4,r3
811109b8:	05019d0e 	bge	zero,r20,81111030 <___svfprintf_internal_r+0xd84>
811109bc:	02400404 	movi	r9,16
811109c0:	d8c02017 	ldw	r3,128(sp)
811109c4:	d8801f17 	ldw	r2,124(sp)
811109c8:	4d051b0e 	bge	r9,r20,81111e38 <___svfprintf_internal_r+0x1b8c>
811109cc:	01604534 	movhi	r5,33044
811109d0:	296e3684 	addi	r5,r5,-18214
811109d4:	dc403c15 	stw	r17,240(sp)
811109d8:	d9403515 	stw	r5,212(sp)
811109dc:	a023883a 	mov	r17,r20
811109e0:	482d883a 	mov	r22,r9
811109e4:	9029883a 	mov	r20,r18
811109e8:	070001c4 	movi	fp,7
811109ec:	8025883a 	mov	r18,r16
811109f0:	dc002c17 	ldw	r16,176(sp)
811109f4:	00000306 	br	81110a04 <___svfprintf_internal_r+0x758>
811109f8:	8c7ffc04 	addi	r17,r17,-16
811109fc:	42000204 	addi	r8,r8,8
81110a00:	b440130e 	bge	r22,r17,81110a50 <___svfprintf_internal_r+0x7a4>
81110a04:	01204534 	movhi	r4,33044
81110a08:	18c00404 	addi	r3,r3,16
81110a0c:	10800044 	addi	r2,r2,1
81110a10:	212e3684 	addi	r4,r4,-18214
81110a14:	41000015 	stw	r4,0(r8)
81110a18:	45800115 	stw	r22,4(r8)
81110a1c:	d8c02015 	stw	r3,128(sp)
81110a20:	d8801f15 	stw	r2,124(sp)
81110a24:	e0bff40e 	bge	fp,r2,811109f8 <__reset+0xfb0f09f8>
81110a28:	d9801e04 	addi	r6,sp,120
81110a2c:	800b883a 	mov	r5,r16
81110a30:	9809883a 	mov	r4,r19
81110a34:	111cee40 	call	8111cee4 <__ssprint_r>
81110a38:	103f031e 	bne	r2,zero,81110648 <__reset+0xfb0f0648>
81110a3c:	8c7ffc04 	addi	r17,r17,-16
81110a40:	d8c02017 	ldw	r3,128(sp)
81110a44:	d8801f17 	ldw	r2,124(sp)
81110a48:	da000404 	addi	r8,sp,16
81110a4c:	b47fed16 	blt	r22,r17,81110a04 <__reset+0xfb0f0a04>
81110a50:	9021883a 	mov	r16,r18
81110a54:	a025883a 	mov	r18,r20
81110a58:	8829883a 	mov	r20,r17
81110a5c:	dc403c17 	ldw	r17,240(sp)
81110a60:	d9403517 	ldw	r5,212(sp)
81110a64:	a0c7883a 	add	r3,r20,r3
81110a68:	10800044 	addi	r2,r2,1
81110a6c:	41400015 	stw	r5,0(r8)
81110a70:	45000115 	stw	r20,4(r8)
81110a74:	d8c02015 	stw	r3,128(sp)
81110a78:	d8801f15 	stw	r2,124(sp)
81110a7c:	010001c4 	movi	r4,7
81110a80:	20829f16 	blt	r4,r2,81111500 <___svfprintf_internal_r+0x1254>
81110a84:	df002787 	ldb	fp,158(sp)
81110a88:	42000204 	addi	r8,r8,8
81110a8c:	e0000c26 	beq	fp,zero,81110ac0 <___svfprintf_internal_r+0x814>
81110a90:	d8801f17 	ldw	r2,124(sp)
81110a94:	d9002784 	addi	r4,sp,158
81110a98:	18c00044 	addi	r3,r3,1
81110a9c:	10800044 	addi	r2,r2,1
81110aa0:	41000015 	stw	r4,0(r8)
81110aa4:	01000044 	movi	r4,1
81110aa8:	41000115 	stw	r4,4(r8)
81110aac:	d8c02015 	stw	r3,128(sp)
81110ab0:	d8801f15 	stw	r2,124(sp)
81110ab4:	010001c4 	movi	r4,7
81110ab8:	20823816 	blt	r4,r2,8111139c <___svfprintf_internal_r+0x10f0>
81110abc:	42000204 	addi	r8,r8,8
81110ac0:	d8802b17 	ldw	r2,172(sp)
81110ac4:	10000c26 	beq	r2,zero,81110af8 <___svfprintf_internal_r+0x84c>
81110ac8:	d8801f17 	ldw	r2,124(sp)
81110acc:	d9002704 	addi	r4,sp,156
81110ad0:	18c00084 	addi	r3,r3,2
81110ad4:	10800044 	addi	r2,r2,1
81110ad8:	41000015 	stw	r4,0(r8)
81110adc:	01000084 	movi	r4,2
81110ae0:	41000115 	stw	r4,4(r8)
81110ae4:	d8c02015 	stw	r3,128(sp)
81110ae8:	d8801f15 	stw	r2,124(sp)
81110aec:	010001c4 	movi	r4,7
81110af0:	20823216 	blt	r4,r2,811113bc <___svfprintf_internal_r+0x1110>
81110af4:	42000204 	addi	r8,r8,8
81110af8:	d9003017 	ldw	r4,192(sp)
81110afc:	00802004 	movi	r2,128
81110b00:	20819726 	beq	r4,r2,81111160 <___svfprintf_internal_r+0xeb4>
81110b04:	d9402917 	ldw	r5,164(sp)
81110b08:	d8802e17 	ldw	r2,184(sp)
81110b0c:	28adc83a 	sub	r22,r5,r2
81110b10:	05802f0e 	bge	zero,r22,81110bd0 <___svfprintf_internal_r+0x924>
81110b14:	07000404 	movi	fp,16
81110b18:	d8801f17 	ldw	r2,124(sp)
81110b1c:	e583c00e 	bge	fp,r22,81111a20 <___svfprintf_internal_r+0x1774>
81110b20:	01604534 	movhi	r5,33044
81110b24:	296e3284 	addi	r5,r5,-18230
81110b28:	dc402915 	stw	r17,164(sp)
81110b2c:	d9402b15 	stw	r5,172(sp)
81110b30:	b023883a 	mov	r17,r22
81110b34:	050001c4 	movi	r20,7
81110b38:	902d883a 	mov	r22,r18
81110b3c:	8025883a 	mov	r18,r16
81110b40:	dc002c17 	ldw	r16,176(sp)
81110b44:	00000306 	br	81110b54 <___svfprintf_internal_r+0x8a8>
81110b48:	8c7ffc04 	addi	r17,r17,-16
81110b4c:	42000204 	addi	r8,r8,8
81110b50:	e440110e 	bge	fp,r17,81110b98 <___svfprintf_internal_r+0x8ec>
81110b54:	18c00404 	addi	r3,r3,16
81110b58:	10800044 	addi	r2,r2,1
81110b5c:	45400015 	stw	r21,0(r8)
81110b60:	47000115 	stw	fp,4(r8)
81110b64:	d8c02015 	stw	r3,128(sp)
81110b68:	d8801f15 	stw	r2,124(sp)
81110b6c:	a0bff60e 	bge	r20,r2,81110b48 <__reset+0xfb0f0b48>
81110b70:	d9801e04 	addi	r6,sp,120
81110b74:	800b883a 	mov	r5,r16
81110b78:	9809883a 	mov	r4,r19
81110b7c:	111cee40 	call	8111cee4 <__ssprint_r>
81110b80:	103eb11e 	bne	r2,zero,81110648 <__reset+0xfb0f0648>
81110b84:	8c7ffc04 	addi	r17,r17,-16
81110b88:	d8c02017 	ldw	r3,128(sp)
81110b8c:	d8801f17 	ldw	r2,124(sp)
81110b90:	da000404 	addi	r8,sp,16
81110b94:	e47fef16 	blt	fp,r17,81110b54 <__reset+0xfb0f0b54>
81110b98:	9021883a 	mov	r16,r18
81110b9c:	b025883a 	mov	r18,r22
81110ba0:	882d883a 	mov	r22,r17
81110ba4:	dc402917 	ldw	r17,164(sp)
81110ba8:	d9002b17 	ldw	r4,172(sp)
81110bac:	1d87883a 	add	r3,r3,r22
81110bb0:	10800044 	addi	r2,r2,1
81110bb4:	41000015 	stw	r4,0(r8)
81110bb8:	45800115 	stw	r22,4(r8)
81110bbc:	d8c02015 	stw	r3,128(sp)
81110bc0:	d8801f15 	stw	r2,124(sp)
81110bc4:	010001c4 	movi	r4,7
81110bc8:	2081ec16 	blt	r4,r2,8111137c <___svfprintf_internal_r+0x10d0>
81110bcc:	42000204 	addi	r8,r8,8
81110bd0:	9080400c 	andi	r2,r18,256
81110bd4:	1001181e 	bne	r2,zero,81111038 <___svfprintf_internal_r+0xd8c>
81110bd8:	d9402e17 	ldw	r5,184(sp)
81110bdc:	d8801f17 	ldw	r2,124(sp)
81110be0:	44000015 	stw	r16,0(r8)
81110be4:	1947883a 	add	r3,r3,r5
81110be8:	10800044 	addi	r2,r2,1
81110bec:	41400115 	stw	r5,4(r8)
81110bf0:	d8c02015 	stw	r3,128(sp)
81110bf4:	d8801f15 	stw	r2,124(sp)
81110bf8:	010001c4 	movi	r4,7
81110bfc:	2081d116 	blt	r4,r2,81111344 <___svfprintf_internal_r+0x1098>
81110c00:	42000204 	addi	r8,r8,8
81110c04:	9480010c 	andi	r18,r18,4
81110c08:	90003226 	beq	r18,zero,81110cd4 <___svfprintf_internal_r+0xa28>
81110c0c:	d9403117 	ldw	r5,196(sp)
81110c10:	d8802a17 	ldw	r2,168(sp)
81110c14:	28a1c83a 	sub	r16,r5,r2
81110c18:	04002e0e 	bge	zero,r16,81110cd4 <___svfprintf_internal_r+0xa28>
81110c1c:	04400404 	movi	r17,16
81110c20:	d8801f17 	ldw	r2,124(sp)
81110c24:	8c04b90e 	bge	r17,r16,81111f0c <___svfprintf_internal_r+0x1c60>
81110c28:	01604534 	movhi	r5,33044
81110c2c:	296e3684 	addi	r5,r5,-18214
81110c30:	d9403515 	stw	r5,212(sp)
81110c34:	048001c4 	movi	r18,7
81110c38:	dd002c17 	ldw	r20,176(sp)
81110c3c:	00000306 	br	81110c4c <___svfprintf_internal_r+0x9a0>
81110c40:	843ffc04 	addi	r16,r16,-16
81110c44:	42000204 	addi	r8,r8,8
81110c48:	8c00130e 	bge	r17,r16,81110c98 <___svfprintf_internal_r+0x9ec>
81110c4c:	01204534 	movhi	r4,33044
81110c50:	18c00404 	addi	r3,r3,16
81110c54:	10800044 	addi	r2,r2,1
81110c58:	212e3684 	addi	r4,r4,-18214
81110c5c:	41000015 	stw	r4,0(r8)
81110c60:	44400115 	stw	r17,4(r8)
81110c64:	d8c02015 	stw	r3,128(sp)
81110c68:	d8801f15 	stw	r2,124(sp)
81110c6c:	90bff40e 	bge	r18,r2,81110c40 <__reset+0xfb0f0c40>
81110c70:	d9801e04 	addi	r6,sp,120
81110c74:	a00b883a 	mov	r5,r20
81110c78:	9809883a 	mov	r4,r19
81110c7c:	111cee40 	call	8111cee4 <__ssprint_r>
81110c80:	103e711e 	bne	r2,zero,81110648 <__reset+0xfb0f0648>
81110c84:	843ffc04 	addi	r16,r16,-16
81110c88:	d8c02017 	ldw	r3,128(sp)
81110c8c:	d8801f17 	ldw	r2,124(sp)
81110c90:	da000404 	addi	r8,sp,16
81110c94:	8c3fed16 	blt	r17,r16,81110c4c <__reset+0xfb0f0c4c>
81110c98:	d9403517 	ldw	r5,212(sp)
81110c9c:	1c07883a 	add	r3,r3,r16
81110ca0:	10800044 	addi	r2,r2,1
81110ca4:	41400015 	stw	r5,0(r8)
81110ca8:	44000115 	stw	r16,4(r8)
81110cac:	d8c02015 	stw	r3,128(sp)
81110cb0:	d8801f15 	stw	r2,124(sp)
81110cb4:	010001c4 	movi	r4,7
81110cb8:	2080060e 	bge	r4,r2,81110cd4 <___svfprintf_internal_r+0xa28>
81110cbc:	d9402c17 	ldw	r5,176(sp)
81110cc0:	d9801e04 	addi	r6,sp,120
81110cc4:	9809883a 	mov	r4,r19
81110cc8:	111cee40 	call	8111cee4 <__ssprint_r>
81110ccc:	103e5e1e 	bne	r2,zero,81110648 <__reset+0xfb0f0648>
81110cd0:	d8c02017 	ldw	r3,128(sp)
81110cd4:	d8803117 	ldw	r2,196(sp)
81110cd8:	d9002a17 	ldw	r4,168(sp)
81110cdc:	1100010e 	bge	r2,r4,81110ce4 <___svfprintf_internal_r+0xa38>
81110ce0:	2005883a 	mov	r2,r4
81110ce4:	d9402f17 	ldw	r5,188(sp)
81110ce8:	288b883a 	add	r5,r5,r2
81110cec:	d9402f15 	stw	r5,188(sp)
81110cf0:	18019c1e 	bne	r3,zero,81111364 <___svfprintf_internal_r+0x10b8>
81110cf4:	b8800007 	ldb	r2,0(r23)
81110cf8:	d8001f15 	stw	zero,124(sp)
81110cfc:	da000404 	addi	r8,sp,16
81110d00:	103d991e 	bne	r2,zero,81110368 <__reset+0xfb0f0368>
81110d04:	b821883a 	mov	r16,r23
81110d08:	003daf06 	br	811103c8 <__reset+0xfb0f03c8>
81110d0c:	18c03fcc 	andi	r3,r3,255
81110d10:	1805c71e 	bne	r3,zero,81112430 <___svfprintf_internal_r+0x2184>
81110d14:	94800414 	ori	r18,r18,16
81110d18:	9080080c 	andi	r2,r18,32
81110d1c:	10020126 	beq	r2,zero,81111524 <___svfprintf_internal_r+0x1278>
81110d20:	d8802d17 	ldw	r2,180(sp)
81110d24:	d9002917 	ldw	r4,164(sp)
81110d28:	d8002785 	stb	zero,158(sp)
81110d2c:	10c00204 	addi	r3,r2,8
81110d30:	15000017 	ldw	r20,0(r2)
81110d34:	15800117 	ldw	r22,4(r2)
81110d38:	20038e16 	blt	r4,zero,81111b74 <___svfprintf_internal_r+0x18c8>
81110d3c:	013fdfc4 	movi	r4,-129
81110d40:	a584b03a 	or	r2,r20,r22
81110d44:	d8c02d15 	stw	r3,180(sp)
81110d48:	9124703a 	and	r18,r18,r4
81110d4c:	0039883a 	mov	fp,zero
81110d50:	103eb61e 	bne	r2,zero,8111082c <__reset+0xfb0f082c>
81110d54:	d8802917 	ldw	r2,164(sp)
81110d58:	1002c81e 	bne	r2,zero,8111187c <___svfprintf_internal_r+0x15d0>
81110d5c:	d8002915 	stw	zero,164(sp)
81110d60:	d8002e15 	stw	zero,184(sp)
81110d64:	dc001e04 	addi	r16,sp,120
81110d68:	003efa06 	br	81110954 <__reset+0xfb0f0954>
81110d6c:	18c03fcc 	andi	r3,r3,255
81110d70:	1805ad1e 	bne	r3,zero,81112428 <___svfprintf_internal_r+0x217c>
81110d74:	01604534 	movhi	r5,33044
81110d78:	296e2604 	addi	r5,r5,-18280
81110d7c:	d9403a15 	stw	r5,232(sp)
81110d80:	9080080c 	andi	r2,r18,32
81110d84:	10006126 	beq	r2,zero,81110f0c <___svfprintf_internal_r+0xc60>
81110d88:	d8802d17 	ldw	r2,180(sp)
81110d8c:	15000017 	ldw	r20,0(r2)
81110d90:	15800117 	ldw	r22,4(r2)
81110d94:	10800204 	addi	r2,r2,8
81110d98:	d8802d15 	stw	r2,180(sp)
81110d9c:	9080004c 	andi	r2,r18,1
81110da0:	10018e26 	beq	r2,zero,811113dc <___svfprintf_internal_r+0x1130>
81110da4:	a584b03a 	or	r2,r20,r22
81110da8:	10030926 	beq	r2,zero,811119d0 <___svfprintf_internal_r+0x1724>
81110dac:	d8c02917 	ldw	r3,164(sp)
81110db0:	00800c04 	movi	r2,48
81110db4:	d8802705 	stb	r2,156(sp)
81110db8:	dc402745 	stb	r17,157(sp)
81110dbc:	d8002785 	stb	zero,158(sp)
81110dc0:	90800094 	ori	r2,r18,2
81110dc4:	18048716 	blt	r3,zero,81111fe4 <___svfprintf_internal_r+0x1d38>
81110dc8:	00bfdfc4 	movi	r2,-129
81110dcc:	90a4703a 	and	r18,r18,r2
81110dd0:	94800094 	ori	r18,r18,2
81110dd4:	0039883a 	mov	fp,zero
81110dd8:	d9003a17 	ldw	r4,232(sp)
81110ddc:	dc001e04 	addi	r16,sp,120
81110de0:	a08003cc 	andi	r2,r20,15
81110de4:	b006973a 	slli	r3,r22,28
81110de8:	2085883a 	add	r2,r4,r2
81110dec:	a028d13a 	srli	r20,r20,4
81110df0:	10800003 	ldbu	r2,0(r2)
81110df4:	b02cd13a 	srli	r22,r22,4
81110df8:	843fffc4 	addi	r16,r16,-1
81110dfc:	1d28b03a 	or	r20,r3,r20
81110e00:	80800005 	stb	r2,0(r16)
81110e04:	a584b03a 	or	r2,r20,r22
81110e08:	103ff51e 	bne	r2,zero,81110de0 <__reset+0xfb0f0de0>
81110e0c:	d8c02817 	ldw	r3,160(sp)
81110e10:	1c07c83a 	sub	r3,r3,r16
81110e14:	d8c02e15 	stw	r3,184(sp)
81110e18:	003ece06 	br	81110954 <__reset+0xfb0f0954>
81110e1c:	d8c02d17 	ldw	r3,180(sp)
81110e20:	d9002d17 	ldw	r4,180(sp)
81110e24:	d8002785 	stb	zero,158(sp)
81110e28:	18800017 	ldw	r2,0(r3)
81110e2c:	21000104 	addi	r4,r4,4
81110e30:	00c00044 	movi	r3,1
81110e34:	d8c02a15 	stw	r3,168(sp)
81110e38:	d8801405 	stb	r2,80(sp)
81110e3c:	d9002d15 	stw	r4,180(sp)
81110e40:	d8c02e15 	stw	r3,184(sp)
81110e44:	d8002915 	stw	zero,164(sp)
81110e48:	d8003215 	stw	zero,200(sp)
81110e4c:	dc001404 	addi	r16,sp,80
81110e50:	0039883a 	mov	fp,zero
81110e54:	003ecc06 	br	81110988 <__reset+0xfb0f0988>
81110e58:	18c03fcc 	andi	r3,r3,255
81110e5c:	183e9226 	beq	r3,zero,811108a8 <__reset+0xfb0f08a8>
81110e60:	d9c02785 	stb	r7,158(sp)
81110e64:	003e9006 	br	811108a8 <__reset+0xfb0f08a8>
81110e68:	00c00044 	movi	r3,1
81110e6c:	01c00ac4 	movi	r7,43
81110e70:	bc400007 	ldb	r17,0(r23)
81110e74:	003d6306 	br	81110404 <__reset+0xfb0f0404>
81110e78:	94800814 	ori	r18,r18,32
81110e7c:	bc400007 	ldb	r17,0(r23)
81110e80:	003d6006 	br	81110404 <__reset+0xfb0f0404>
81110e84:	d8c02d17 	ldw	r3,180(sp)
81110e88:	d8002785 	stb	zero,158(sp)
81110e8c:	1c000017 	ldw	r16,0(r3)
81110e90:	1d000104 	addi	r20,r3,4
81110e94:	80040f26 	beq	r16,zero,81111ed4 <___svfprintf_internal_r+0x1c28>
81110e98:	d9002917 	ldw	r4,164(sp)
81110e9c:	2003dc16 	blt	r4,zero,81111e10 <___svfprintf_internal_r+0x1b64>
81110ea0:	200d883a 	mov	r6,r4
81110ea4:	000b883a 	mov	r5,zero
81110ea8:	8009883a 	mov	r4,r16
81110eac:	da003e15 	stw	r8,248(sp)
81110eb0:	11193100 	call	81119310 <memchr>
81110eb4:	da003e17 	ldw	r8,248(sp)
81110eb8:	10045826 	beq	r2,zero,8111201c <___svfprintf_internal_r+0x1d70>
81110ebc:	1405c83a 	sub	r2,r2,r16
81110ec0:	d8802e15 	stw	r2,184(sp)
81110ec4:	1003d816 	blt	r2,zero,81111e28 <___svfprintf_internal_r+0x1b7c>
81110ec8:	df002783 	ldbu	fp,158(sp)
81110ecc:	d8802a15 	stw	r2,168(sp)
81110ed0:	dd002d15 	stw	r20,180(sp)
81110ed4:	d8002915 	stw	zero,164(sp)
81110ed8:	d8003215 	stw	zero,200(sp)
81110edc:	003ea306 	br	8111096c <__reset+0xfb0f096c>
81110ee0:	18c03fcc 	andi	r3,r3,255
81110ee4:	183f8c26 	beq	r3,zero,81110d18 <__reset+0xfb0f0d18>
81110ee8:	d9c02785 	stb	r7,158(sp)
81110eec:	003f8a06 	br	81110d18 <__reset+0xfb0f0d18>
81110ef0:	18c03fcc 	andi	r3,r3,255
81110ef4:	1805631e 	bne	r3,zero,81112484 <___svfprintf_internal_r+0x21d8>
81110ef8:	01604534 	movhi	r5,33044
81110efc:	296e2b04 	addi	r5,r5,-18260
81110f00:	d9403a15 	stw	r5,232(sp)
81110f04:	9080080c 	andi	r2,r18,32
81110f08:	103f9f1e 	bne	r2,zero,81110d88 <__reset+0xfb0f0d88>
81110f0c:	9080040c 	andi	r2,r18,16
81110f10:	10029c26 	beq	r2,zero,81111984 <___svfprintf_internal_r+0x16d8>
81110f14:	d8c02d17 	ldw	r3,180(sp)
81110f18:	002d883a 	mov	r22,zero
81110f1c:	1d000017 	ldw	r20,0(r3)
81110f20:	18c00104 	addi	r3,r3,4
81110f24:	d8c02d15 	stw	r3,180(sp)
81110f28:	003f9c06 	br	81110d9c <__reset+0xfb0f0d9c>
81110f2c:	94800054 	ori	r18,r18,1
81110f30:	bc400007 	ldb	r17,0(r23)
81110f34:	003d3306 	br	81110404 <__reset+0xfb0f0404>
81110f38:	38803fcc 	andi	r2,r7,255
81110f3c:	1080201c 	xori	r2,r2,128
81110f40:	10bfe004 	addi	r2,r2,-128
81110f44:	1002971e 	bne	r2,zero,811119a4 <___svfprintf_internal_r+0x16f8>
81110f48:	00c00044 	movi	r3,1
81110f4c:	01c00804 	movi	r7,32
81110f50:	bc400007 	ldb	r17,0(r23)
81110f54:	003d2b06 	br	81110404 <__reset+0xfb0f0404>
81110f58:	18c03fcc 	andi	r3,r3,255
81110f5c:	183e2326 	beq	r3,zero,811107ec <__reset+0xfb0f07ec>
81110f60:	d9c02785 	stb	r7,158(sp)
81110f64:	003e2106 	br	811107ec <__reset+0xfb0f07ec>
81110f68:	bc400007 	ldb	r17,0(r23)
81110f6c:	8a430426 	beq	r17,r9,81111b80 <___svfprintf_internal_r+0x18d4>
81110f70:	94800414 	ori	r18,r18,16
81110f74:	003d2306 	br	81110404 <__reset+0xfb0f0404>
81110f78:	18c03fcc 	andi	r3,r3,255
81110f7c:	18053f1e 	bne	r3,zero,8111247c <___svfprintf_internal_r+0x21d0>
81110f80:	9080080c 	andi	r2,r18,32
81110f84:	10028926 	beq	r2,zero,811119ac <___svfprintf_internal_r+0x1700>
81110f88:	d9402d17 	ldw	r5,180(sp)
81110f8c:	d9002f17 	ldw	r4,188(sp)
81110f90:	28800017 	ldw	r2,0(r5)
81110f94:	2007d7fa 	srai	r3,r4,31
81110f98:	29400104 	addi	r5,r5,4
81110f9c:	d9402d15 	stw	r5,180(sp)
81110fa0:	11000015 	stw	r4,0(r2)
81110fa4:	10c00115 	stw	r3,4(r2)
81110fa8:	003ced06 	br	81110360 <__reset+0xfb0f0360>
81110fac:	94801014 	ori	r18,r18,64
81110fb0:	bc400007 	ldb	r17,0(r23)
81110fb4:	003d1306 	br	81110404 <__reset+0xfb0f0404>
81110fb8:	01204534 	movhi	r4,33044
81110fbc:	212e2b04 	addi	r4,r4,-18260
81110fc0:	0039883a 	mov	fp,zero
81110fc4:	d9003a15 	stw	r4,232(sp)
81110fc8:	04401e04 	movi	r17,120
81110fcc:	003f8206 	br	81110dd8 <__reset+0xfb0f0dd8>
81110fd0:	18c03fcc 	andi	r3,r3,255
81110fd4:	1805221e 	bne	r3,zero,81112460 <___svfprintf_internal_r+0x21b4>
81110fd8:	883d9526 	beq	r17,zero,81110630 <__reset+0xfb0f0630>
81110fdc:	00c00044 	movi	r3,1
81110fe0:	d8c02a15 	stw	r3,168(sp)
81110fe4:	dc401405 	stb	r17,80(sp)
81110fe8:	d8002785 	stb	zero,158(sp)
81110fec:	003f9406 	br	81110e40 <__reset+0xfb0f0e40>
81110ff0:	01204534 	movhi	r4,33044
81110ff4:	212e2b04 	addi	r4,r4,-18260
81110ff8:	d9003a15 	stw	r4,232(sp)
81110ffc:	d8c02d15 	stw	r3,180(sp)
81111000:	1025883a 	mov	r18,r2
81111004:	04401e04 	movi	r17,120
81111008:	a584b03a 	or	r2,r20,r22
8111100c:	1000fa1e 	bne	r2,zero,811113f8 <___svfprintf_internal_r+0x114c>
81111010:	0039883a 	mov	fp,zero
81111014:	00800084 	movi	r2,2
81111018:	10803fcc 	andi	r2,r2,255
8111101c:	00c00044 	movi	r3,1
81111020:	10c21626 	beq	r2,r3,8111187c <___svfprintf_internal_r+0x15d0>
81111024:	00c00084 	movi	r3,2
81111028:	10fe301e 	bne	r2,r3,811108ec <__reset+0xfb0f08ec>
8111102c:	003d7606 	br	81110608 <__reset+0xfb0f0608>
81111030:	d8c02017 	ldw	r3,128(sp)
81111034:	003e9506 	br	81110a8c <__reset+0xfb0f0a8c>
81111038:	00801944 	movi	r2,101
8111103c:	14407c0e 	bge	r2,r17,81111230 <___svfprintf_internal_r+0xf84>
81111040:	d9003617 	ldw	r4,216(sp)
81111044:	d9403717 	ldw	r5,220(sp)
81111048:	000d883a 	mov	r6,zero
8111104c:	000f883a 	mov	r7,zero
81111050:	d8c03d15 	stw	r3,244(sp)
81111054:	da003e15 	stw	r8,248(sp)
81111058:	112303c0 	call	8112303c <__eqdf2>
8111105c:	d8c03d17 	ldw	r3,244(sp)
81111060:	da003e17 	ldw	r8,248(sp)
81111064:	1000f51e 	bne	r2,zero,8111143c <___svfprintf_internal_r+0x1190>
81111068:	d8801f17 	ldw	r2,124(sp)
8111106c:	01204534 	movhi	r4,33044
81111070:	212e3204 	addi	r4,r4,-18232
81111074:	18c00044 	addi	r3,r3,1
81111078:	10800044 	addi	r2,r2,1
8111107c:	41000015 	stw	r4,0(r8)
81111080:	01000044 	movi	r4,1
81111084:	41000115 	stw	r4,4(r8)
81111088:	d8c02015 	stw	r3,128(sp)
8111108c:	d8801f15 	stw	r2,124(sp)
81111090:	010001c4 	movi	r4,7
81111094:	20826616 	blt	r4,r2,81111a30 <___svfprintf_internal_r+0x1784>
81111098:	42000204 	addi	r8,r8,8
8111109c:	d8802617 	ldw	r2,152(sp)
811110a0:	d9403317 	ldw	r5,204(sp)
811110a4:	11400216 	blt	r2,r5,811110b0 <___svfprintf_internal_r+0xe04>
811110a8:	9080004c 	andi	r2,r18,1
811110ac:	103ed526 	beq	r2,zero,81110c04 <__reset+0xfb0f0c04>
811110b0:	d8803817 	ldw	r2,224(sp)
811110b4:	d9003417 	ldw	r4,208(sp)
811110b8:	d9403817 	ldw	r5,224(sp)
811110bc:	1887883a 	add	r3,r3,r2
811110c0:	d8801f17 	ldw	r2,124(sp)
811110c4:	41000015 	stw	r4,0(r8)
811110c8:	41400115 	stw	r5,4(r8)
811110cc:	10800044 	addi	r2,r2,1
811110d0:	d8c02015 	stw	r3,128(sp)
811110d4:	d8801f15 	stw	r2,124(sp)
811110d8:	010001c4 	movi	r4,7
811110dc:	2082af16 	blt	r4,r2,81111b9c <___svfprintf_internal_r+0x18f0>
811110e0:	42000204 	addi	r8,r8,8
811110e4:	d8803317 	ldw	r2,204(sp)
811110e8:	143fffc4 	addi	r16,r2,-1
811110ec:	043ec50e 	bge	zero,r16,81110c04 <__reset+0xfb0f0c04>
811110f0:	04400404 	movi	r17,16
811110f4:	d8801f17 	ldw	r2,124(sp)
811110f8:	8c00860e 	bge	r17,r16,81111314 <___svfprintf_internal_r+0x1068>
811110fc:	01604534 	movhi	r5,33044
81111100:	296e3284 	addi	r5,r5,-18230
81111104:	d9402b15 	stw	r5,172(sp)
81111108:	058001c4 	movi	r22,7
8111110c:	dd002c17 	ldw	r20,176(sp)
81111110:	00000306 	br	81111120 <___svfprintf_internal_r+0xe74>
81111114:	42000204 	addi	r8,r8,8
81111118:	843ffc04 	addi	r16,r16,-16
8111111c:	8c00800e 	bge	r17,r16,81111320 <___svfprintf_internal_r+0x1074>
81111120:	18c00404 	addi	r3,r3,16
81111124:	10800044 	addi	r2,r2,1
81111128:	45400015 	stw	r21,0(r8)
8111112c:	44400115 	stw	r17,4(r8)
81111130:	d8c02015 	stw	r3,128(sp)
81111134:	d8801f15 	stw	r2,124(sp)
81111138:	b0bff60e 	bge	r22,r2,81111114 <__reset+0xfb0f1114>
8111113c:	d9801e04 	addi	r6,sp,120
81111140:	a00b883a 	mov	r5,r20
81111144:	9809883a 	mov	r4,r19
81111148:	111cee40 	call	8111cee4 <__ssprint_r>
8111114c:	103d3e1e 	bne	r2,zero,81110648 <__reset+0xfb0f0648>
81111150:	d8c02017 	ldw	r3,128(sp)
81111154:	d8801f17 	ldw	r2,124(sp)
81111158:	da000404 	addi	r8,sp,16
8111115c:	003fee06 	br	81111118 <__reset+0xfb0f1118>
81111160:	d9403117 	ldw	r5,196(sp)
81111164:	d8802a17 	ldw	r2,168(sp)
81111168:	28adc83a 	sub	r22,r5,r2
8111116c:	05be650e 	bge	zero,r22,81110b04 <__reset+0xfb0f0b04>
81111170:	07000404 	movi	fp,16
81111174:	d8801f17 	ldw	r2,124(sp)
81111178:	e583a20e 	bge	fp,r22,81112004 <___svfprintf_internal_r+0x1d58>
8111117c:	01604534 	movhi	r5,33044
81111180:	296e3284 	addi	r5,r5,-18230
81111184:	dc403015 	stw	r17,192(sp)
81111188:	d9402b15 	stw	r5,172(sp)
8111118c:	b023883a 	mov	r17,r22
81111190:	050001c4 	movi	r20,7
81111194:	902d883a 	mov	r22,r18
81111198:	8025883a 	mov	r18,r16
8111119c:	dc002c17 	ldw	r16,176(sp)
811111a0:	00000306 	br	811111b0 <___svfprintf_internal_r+0xf04>
811111a4:	8c7ffc04 	addi	r17,r17,-16
811111a8:	42000204 	addi	r8,r8,8
811111ac:	e440110e 	bge	fp,r17,811111f4 <___svfprintf_internal_r+0xf48>
811111b0:	18c00404 	addi	r3,r3,16
811111b4:	10800044 	addi	r2,r2,1
811111b8:	45400015 	stw	r21,0(r8)
811111bc:	47000115 	stw	fp,4(r8)
811111c0:	d8c02015 	stw	r3,128(sp)
811111c4:	d8801f15 	stw	r2,124(sp)
811111c8:	a0bff60e 	bge	r20,r2,811111a4 <__reset+0xfb0f11a4>
811111cc:	d9801e04 	addi	r6,sp,120
811111d0:	800b883a 	mov	r5,r16
811111d4:	9809883a 	mov	r4,r19
811111d8:	111cee40 	call	8111cee4 <__ssprint_r>
811111dc:	103d1a1e 	bne	r2,zero,81110648 <__reset+0xfb0f0648>
811111e0:	8c7ffc04 	addi	r17,r17,-16
811111e4:	d8c02017 	ldw	r3,128(sp)
811111e8:	d8801f17 	ldw	r2,124(sp)
811111ec:	da000404 	addi	r8,sp,16
811111f0:	e47fef16 	blt	fp,r17,811111b0 <__reset+0xfb0f11b0>
811111f4:	9021883a 	mov	r16,r18
811111f8:	b025883a 	mov	r18,r22
811111fc:	882d883a 	mov	r22,r17
81111200:	dc403017 	ldw	r17,192(sp)
81111204:	d9002b17 	ldw	r4,172(sp)
81111208:	1d87883a 	add	r3,r3,r22
8111120c:	10800044 	addi	r2,r2,1
81111210:	41000015 	stw	r4,0(r8)
81111214:	45800115 	stw	r22,4(r8)
81111218:	d8c02015 	stw	r3,128(sp)
8111121c:	d8801f15 	stw	r2,124(sp)
81111220:	010001c4 	movi	r4,7
81111224:	20819a16 	blt	r4,r2,81111890 <___svfprintf_internal_r+0x15e4>
81111228:	42000204 	addi	r8,r8,8
8111122c:	003e3506 	br	81110b04 <__reset+0xfb0f0b04>
81111230:	d9403317 	ldw	r5,204(sp)
81111234:	00800044 	movi	r2,1
81111238:	18c00044 	addi	r3,r3,1
8111123c:	1141710e 	bge	r2,r5,81111804 <___svfprintf_internal_r+0x1558>
81111240:	dc401f17 	ldw	r17,124(sp)
81111244:	00800044 	movi	r2,1
81111248:	40800115 	stw	r2,4(r8)
8111124c:	8c400044 	addi	r17,r17,1
81111250:	44000015 	stw	r16,0(r8)
81111254:	d8c02015 	stw	r3,128(sp)
81111258:	dc401f15 	stw	r17,124(sp)
8111125c:	008001c4 	movi	r2,7
81111260:	14417416 	blt	r2,r17,81111834 <___svfprintf_internal_r+0x1588>
81111264:	42000204 	addi	r8,r8,8
81111268:	d8803817 	ldw	r2,224(sp)
8111126c:	d9003417 	ldw	r4,208(sp)
81111270:	8c400044 	addi	r17,r17,1
81111274:	10c7883a 	add	r3,r2,r3
81111278:	40800115 	stw	r2,4(r8)
8111127c:	41000015 	stw	r4,0(r8)
81111280:	d8c02015 	stw	r3,128(sp)
81111284:	dc401f15 	stw	r17,124(sp)
81111288:	008001c4 	movi	r2,7
8111128c:	14417216 	blt	r2,r17,81111858 <___svfprintf_internal_r+0x15ac>
81111290:	45800204 	addi	r22,r8,8
81111294:	d9003617 	ldw	r4,216(sp)
81111298:	d9403717 	ldw	r5,220(sp)
8111129c:	000d883a 	mov	r6,zero
811112a0:	000f883a 	mov	r7,zero
811112a4:	d8c03d15 	stw	r3,244(sp)
811112a8:	112303c0 	call	8112303c <__eqdf2>
811112ac:	d8c03d17 	ldw	r3,244(sp)
811112b0:	1000b326 	beq	r2,zero,81111580 <___svfprintf_internal_r+0x12d4>
811112b4:	d9403317 	ldw	r5,204(sp)
811112b8:	84000044 	addi	r16,r16,1
811112bc:	8c400044 	addi	r17,r17,1
811112c0:	28bfffc4 	addi	r2,r5,-1
811112c4:	1887883a 	add	r3,r3,r2
811112c8:	b0800115 	stw	r2,4(r22)
811112cc:	b4000015 	stw	r16,0(r22)
811112d0:	d8c02015 	stw	r3,128(sp)
811112d4:	dc401f15 	stw	r17,124(sp)
811112d8:	008001c4 	movi	r2,7
811112dc:	1440d216 	blt	r2,r17,81111628 <___svfprintf_internal_r+0x137c>
811112e0:	b5800204 	addi	r22,r22,8
811112e4:	d9003b17 	ldw	r4,236(sp)
811112e8:	df0022c4 	addi	fp,sp,139
811112ec:	8c400044 	addi	r17,r17,1
811112f0:	20c7883a 	add	r3,r4,r3
811112f4:	b7000015 	stw	fp,0(r22)
811112f8:	b1000115 	stw	r4,4(r22)
811112fc:	d8c02015 	stw	r3,128(sp)
81111300:	dc401f15 	stw	r17,124(sp)
81111304:	008001c4 	movi	r2,7
81111308:	14400e16 	blt	r2,r17,81111344 <___svfprintf_internal_r+0x1098>
8111130c:	b2000204 	addi	r8,r22,8
81111310:	003e3c06 	br	81110c04 <__reset+0xfb0f0c04>
81111314:	01204534 	movhi	r4,33044
81111318:	212e3284 	addi	r4,r4,-18230
8111131c:	d9002b15 	stw	r4,172(sp)
81111320:	d9002b17 	ldw	r4,172(sp)
81111324:	1c07883a 	add	r3,r3,r16
81111328:	44000115 	stw	r16,4(r8)
8111132c:	41000015 	stw	r4,0(r8)
81111330:	10800044 	addi	r2,r2,1
81111334:	d8c02015 	stw	r3,128(sp)
81111338:	d8801f15 	stw	r2,124(sp)
8111133c:	010001c4 	movi	r4,7
81111340:	20be2f0e 	bge	r4,r2,81110c00 <__reset+0xfb0f0c00>
81111344:	d9402c17 	ldw	r5,176(sp)
81111348:	d9801e04 	addi	r6,sp,120
8111134c:	9809883a 	mov	r4,r19
81111350:	111cee40 	call	8111cee4 <__ssprint_r>
81111354:	103cbc1e 	bne	r2,zero,81110648 <__reset+0xfb0f0648>
81111358:	d8c02017 	ldw	r3,128(sp)
8111135c:	da000404 	addi	r8,sp,16
81111360:	003e2806 	br	81110c04 <__reset+0xfb0f0c04>
81111364:	d9402c17 	ldw	r5,176(sp)
81111368:	d9801e04 	addi	r6,sp,120
8111136c:	9809883a 	mov	r4,r19
81111370:	111cee40 	call	8111cee4 <__ssprint_r>
81111374:	103e5f26 	beq	r2,zero,81110cf4 <__reset+0xfb0f0cf4>
81111378:	003cb306 	br	81110648 <__reset+0xfb0f0648>
8111137c:	d9402c17 	ldw	r5,176(sp)
81111380:	d9801e04 	addi	r6,sp,120
81111384:	9809883a 	mov	r4,r19
81111388:	111cee40 	call	8111cee4 <__ssprint_r>
8111138c:	103cae1e 	bne	r2,zero,81110648 <__reset+0xfb0f0648>
81111390:	d8c02017 	ldw	r3,128(sp)
81111394:	da000404 	addi	r8,sp,16
81111398:	003e0d06 	br	81110bd0 <__reset+0xfb0f0bd0>
8111139c:	d9402c17 	ldw	r5,176(sp)
811113a0:	d9801e04 	addi	r6,sp,120
811113a4:	9809883a 	mov	r4,r19
811113a8:	111cee40 	call	8111cee4 <__ssprint_r>
811113ac:	103ca61e 	bne	r2,zero,81110648 <__reset+0xfb0f0648>
811113b0:	d8c02017 	ldw	r3,128(sp)
811113b4:	da000404 	addi	r8,sp,16
811113b8:	003dc106 	br	81110ac0 <__reset+0xfb0f0ac0>
811113bc:	d9402c17 	ldw	r5,176(sp)
811113c0:	d9801e04 	addi	r6,sp,120
811113c4:	9809883a 	mov	r4,r19
811113c8:	111cee40 	call	8111cee4 <__ssprint_r>
811113cc:	103c9e1e 	bne	r2,zero,81110648 <__reset+0xfb0f0648>
811113d0:	d8c02017 	ldw	r3,128(sp)
811113d4:	da000404 	addi	r8,sp,16
811113d8:	003dc706 	br	81110af8 <__reset+0xfb0f0af8>
811113dc:	d8802917 	ldw	r2,164(sp)
811113e0:	d8002785 	stb	zero,158(sp)
811113e4:	103f0816 	blt	r2,zero,81111008 <__reset+0xfb0f1008>
811113e8:	00ffdfc4 	movi	r3,-129
811113ec:	a584b03a 	or	r2,r20,r22
811113f0:	90e4703a 	and	r18,r18,r3
811113f4:	103c8126 	beq	r2,zero,811105fc <__reset+0xfb0f05fc>
811113f8:	0039883a 	mov	fp,zero
811113fc:	003e7606 	br	81110dd8 <__reset+0xfb0f0dd8>
81111400:	9080040c 	andi	r2,r18,16
81111404:	10013d26 	beq	r2,zero,811118fc <___svfprintf_internal_r+0x1650>
81111408:	d9002d17 	ldw	r4,180(sp)
8111140c:	d9402917 	ldw	r5,164(sp)
81111410:	d8002785 	stb	zero,158(sp)
81111414:	20800104 	addi	r2,r4,4
81111418:	25000017 	ldw	r20,0(r4)
8111141c:	002d883a 	mov	r22,zero
81111420:	28013f16 	blt	r5,zero,81111920 <___svfprintf_internal_r+0x1674>
81111424:	00ffdfc4 	movi	r3,-129
81111428:	d8802d15 	stw	r2,180(sp)
8111142c:	90e4703a 	and	r18,r18,r3
81111430:	a03d2b26 	beq	r20,zero,811108e0 <__reset+0xfb0f08e0>
81111434:	0039883a 	mov	fp,zero
81111438:	003d2e06 	br	811108f4 <__reset+0xfb0f08f4>
8111143c:	dc402617 	ldw	r17,152(sp)
81111440:	0441830e 	bge	zero,r17,81111a50 <___svfprintf_internal_r+0x17a4>
81111444:	dc403217 	ldw	r17,200(sp)
81111448:	d8803317 	ldw	r2,204(sp)
8111144c:	1440010e 	bge	r2,r17,81111454 <___svfprintf_internal_r+0x11a8>
81111450:	1023883a 	mov	r17,r2
81111454:	04400a0e 	bge	zero,r17,81111480 <___svfprintf_internal_r+0x11d4>
81111458:	d8801f17 	ldw	r2,124(sp)
8111145c:	1c47883a 	add	r3,r3,r17
81111460:	44000015 	stw	r16,0(r8)
81111464:	10800044 	addi	r2,r2,1
81111468:	44400115 	stw	r17,4(r8)
8111146c:	d8c02015 	stw	r3,128(sp)
81111470:	d8801f15 	stw	r2,124(sp)
81111474:	010001c4 	movi	r4,7
81111478:	20827516 	blt	r4,r2,81111e50 <___svfprintf_internal_r+0x1ba4>
8111147c:	42000204 	addi	r8,r8,8
81111480:	88027b16 	blt	r17,zero,81111e70 <___svfprintf_internal_r+0x1bc4>
81111484:	d9003217 	ldw	r4,200(sp)
81111488:	2463c83a 	sub	r17,r4,r17
8111148c:	0440990e 	bge	zero,r17,811116f4 <___svfprintf_internal_r+0x1448>
81111490:	05800404 	movi	r22,16
81111494:	d8801f17 	ldw	r2,124(sp)
81111498:	b441530e 	bge	r22,r17,811119e8 <___svfprintf_internal_r+0x173c>
8111149c:	01204534 	movhi	r4,33044
811114a0:	212e3284 	addi	r4,r4,-18230
811114a4:	d9002b15 	stw	r4,172(sp)
811114a8:	070001c4 	movi	fp,7
811114ac:	dd002c17 	ldw	r20,176(sp)
811114b0:	00000306 	br	811114c0 <___svfprintf_internal_r+0x1214>
811114b4:	42000204 	addi	r8,r8,8
811114b8:	8c7ffc04 	addi	r17,r17,-16
811114bc:	b4414d0e 	bge	r22,r17,811119f4 <___svfprintf_internal_r+0x1748>
811114c0:	18c00404 	addi	r3,r3,16
811114c4:	10800044 	addi	r2,r2,1
811114c8:	45400015 	stw	r21,0(r8)
811114cc:	45800115 	stw	r22,4(r8)
811114d0:	d8c02015 	stw	r3,128(sp)
811114d4:	d8801f15 	stw	r2,124(sp)
811114d8:	e0bff60e 	bge	fp,r2,811114b4 <__reset+0xfb0f14b4>
811114dc:	d9801e04 	addi	r6,sp,120
811114e0:	a00b883a 	mov	r5,r20
811114e4:	9809883a 	mov	r4,r19
811114e8:	111cee40 	call	8111cee4 <__ssprint_r>
811114ec:	103c561e 	bne	r2,zero,81110648 <__reset+0xfb0f0648>
811114f0:	d8c02017 	ldw	r3,128(sp)
811114f4:	d8801f17 	ldw	r2,124(sp)
811114f8:	da000404 	addi	r8,sp,16
811114fc:	003fee06 	br	811114b8 <__reset+0xfb0f14b8>
81111500:	d9402c17 	ldw	r5,176(sp)
81111504:	d9801e04 	addi	r6,sp,120
81111508:	9809883a 	mov	r4,r19
8111150c:	111cee40 	call	8111cee4 <__ssprint_r>
81111510:	103c4d1e 	bne	r2,zero,81110648 <__reset+0xfb0f0648>
81111514:	d8c02017 	ldw	r3,128(sp)
81111518:	df002787 	ldb	fp,158(sp)
8111151c:	da000404 	addi	r8,sp,16
81111520:	003d5a06 	br	81110a8c <__reset+0xfb0f0a8c>
81111524:	9080040c 	andi	r2,r18,16
81111528:	10005c26 	beq	r2,zero,8111169c <___svfprintf_internal_r+0x13f0>
8111152c:	d9402d17 	ldw	r5,180(sp)
81111530:	d8c02917 	ldw	r3,164(sp)
81111534:	d8002785 	stb	zero,158(sp)
81111538:	28800104 	addi	r2,r5,4
8111153c:	2d000017 	ldw	r20,0(r5)
81111540:	002d883a 	mov	r22,zero
81111544:	18005e16 	blt	r3,zero,811116c0 <___svfprintf_internal_r+0x1414>
81111548:	00ffdfc4 	movi	r3,-129
8111154c:	d8802d15 	stw	r2,180(sp)
81111550:	90e4703a 	and	r18,r18,r3
81111554:	0039883a 	mov	fp,zero
81111558:	a03dfe26 	beq	r20,zero,81110d54 <__reset+0xfb0f0d54>
8111155c:	00800244 	movi	r2,9
81111560:	153cb336 	bltu	r2,r20,81110830 <__reset+0xfb0f0830>
81111564:	a5000c04 	addi	r20,r20,48
81111568:	dc001dc4 	addi	r16,sp,119
8111156c:	dd001dc5 	stb	r20,119(sp)
81111570:	d8c02817 	ldw	r3,160(sp)
81111574:	1c07c83a 	sub	r3,r3,r16
81111578:	d8c02e15 	stw	r3,184(sp)
8111157c:	003cf506 	br	81110954 <__reset+0xfb0f0954>
81111580:	d8803317 	ldw	r2,204(sp)
81111584:	143fffc4 	addi	r16,r2,-1
81111588:	043f560e 	bge	zero,r16,811112e4 <__reset+0xfb0f12e4>
8111158c:	07000404 	movi	fp,16
81111590:	e403530e 	bge	fp,r16,811122e0 <___svfprintf_internal_r+0x2034>
81111594:	01604534 	movhi	r5,33044
81111598:	296e3284 	addi	r5,r5,-18230
8111159c:	d9402b15 	stw	r5,172(sp)
811115a0:	01c001c4 	movi	r7,7
811115a4:	dd002c17 	ldw	r20,176(sp)
811115a8:	00000306 	br	811115b8 <___svfprintf_internal_r+0x130c>
811115ac:	843ffc04 	addi	r16,r16,-16
811115b0:	b5800204 	addi	r22,r22,8
811115b4:	e400130e 	bge	fp,r16,81111604 <___svfprintf_internal_r+0x1358>
811115b8:	18c00404 	addi	r3,r3,16
811115bc:	8c400044 	addi	r17,r17,1
811115c0:	b5400015 	stw	r21,0(r22)
811115c4:	b7000115 	stw	fp,4(r22)
811115c8:	d8c02015 	stw	r3,128(sp)
811115cc:	dc401f15 	stw	r17,124(sp)
811115d0:	3c7ff60e 	bge	r7,r17,811115ac <__reset+0xfb0f15ac>
811115d4:	d9801e04 	addi	r6,sp,120
811115d8:	a00b883a 	mov	r5,r20
811115dc:	9809883a 	mov	r4,r19
811115e0:	d9c03d15 	stw	r7,244(sp)
811115e4:	111cee40 	call	8111cee4 <__ssprint_r>
811115e8:	d9c03d17 	ldw	r7,244(sp)
811115ec:	103c161e 	bne	r2,zero,81110648 <__reset+0xfb0f0648>
811115f0:	843ffc04 	addi	r16,r16,-16
811115f4:	d8c02017 	ldw	r3,128(sp)
811115f8:	dc401f17 	ldw	r17,124(sp)
811115fc:	dd800404 	addi	r22,sp,16
81111600:	e43fed16 	blt	fp,r16,811115b8 <__reset+0xfb0f15b8>
81111604:	d8802b17 	ldw	r2,172(sp)
81111608:	1c07883a 	add	r3,r3,r16
8111160c:	8c400044 	addi	r17,r17,1
81111610:	b0800015 	stw	r2,0(r22)
81111614:	b4000115 	stw	r16,4(r22)
81111618:	d8c02015 	stw	r3,128(sp)
8111161c:	dc401f15 	stw	r17,124(sp)
81111620:	008001c4 	movi	r2,7
81111624:	147f2e0e 	bge	r2,r17,811112e0 <__reset+0xfb0f12e0>
81111628:	d9402c17 	ldw	r5,176(sp)
8111162c:	d9801e04 	addi	r6,sp,120
81111630:	9809883a 	mov	r4,r19
81111634:	111cee40 	call	8111cee4 <__ssprint_r>
81111638:	103c031e 	bne	r2,zero,81110648 <__reset+0xfb0f0648>
8111163c:	d8c02017 	ldw	r3,128(sp)
81111640:	dc401f17 	ldw	r17,124(sp)
81111644:	dd800404 	addi	r22,sp,16
81111648:	003f2606 	br	811112e4 <__reset+0xfb0f12e4>
8111164c:	9080040c 	andi	r2,r18,16
81111650:	1000c326 	beq	r2,zero,81111960 <___svfprintf_internal_r+0x16b4>
81111654:	d8802d17 	ldw	r2,180(sp)
81111658:	15000017 	ldw	r20,0(r2)
8111165c:	10800104 	addi	r2,r2,4
81111660:	d8802d15 	stw	r2,180(sp)
81111664:	a02dd7fa 	srai	r22,r20,31
81111668:	b005883a 	mov	r2,r22
8111166c:	103c680e 	bge	r2,zero,81110810 <__reset+0xfb0f0810>
81111670:	0529c83a 	sub	r20,zero,r20
81111674:	a004c03a 	cmpne	r2,r20,zero
81111678:	05adc83a 	sub	r22,zero,r22
8111167c:	b0adc83a 	sub	r22,r22,r2
81111680:	d8802917 	ldw	r2,164(sp)
81111684:	07000b44 	movi	fp,45
81111688:	df002785 	stb	fp,158(sp)
8111168c:	10022e16 	blt	r2,zero,81111f48 <___svfprintf_internal_r+0x1c9c>
81111690:	00bfdfc4 	movi	r2,-129
81111694:	90a4703a 	and	r18,r18,r2
81111698:	003c6406 	br	8111082c <__reset+0xfb0f082c>
8111169c:	9080100c 	andi	r2,r18,64
811116a0:	d8002785 	stb	zero,158(sp)
811116a4:	10012526 	beq	r2,zero,81111b3c <___svfprintf_internal_r+0x1890>
811116a8:	d9002d17 	ldw	r4,180(sp)
811116ac:	d9402917 	ldw	r5,164(sp)
811116b0:	002d883a 	mov	r22,zero
811116b4:	20800104 	addi	r2,r4,4
811116b8:	2500000b 	ldhu	r20,0(r4)
811116bc:	283fa20e 	bge	r5,zero,81111548 <__reset+0xfb0f1548>
811116c0:	d8802d15 	stw	r2,180(sp)
811116c4:	0039883a 	mov	fp,zero
811116c8:	a584b03a 	or	r2,r20,r22
811116cc:	103c571e 	bne	r2,zero,8111082c <__reset+0xfb0f082c>
811116d0:	00800044 	movi	r2,1
811116d4:	003e5006 	br	81111018 <__reset+0xfb0f1018>
811116d8:	d9402c17 	ldw	r5,176(sp)
811116dc:	d9801e04 	addi	r6,sp,120
811116e0:	9809883a 	mov	r4,r19
811116e4:	111cee40 	call	8111cee4 <__ssprint_r>
811116e8:	103bd71e 	bne	r2,zero,81110648 <__reset+0xfb0f0648>
811116ec:	d8c02017 	ldw	r3,128(sp)
811116f0:	da000404 	addi	r8,sp,16
811116f4:	d9003217 	ldw	r4,200(sp)
811116f8:	d8802617 	ldw	r2,152(sp)
811116fc:	d9403317 	ldw	r5,204(sp)
81111700:	8123883a 	add	r17,r16,r4
81111704:	11400216 	blt	r2,r5,81111710 <___svfprintf_internal_r+0x1464>
81111708:	9100004c 	andi	r4,r18,1
8111170c:	20000d26 	beq	r4,zero,81111744 <___svfprintf_internal_r+0x1498>
81111710:	d9003817 	ldw	r4,224(sp)
81111714:	d9403417 	ldw	r5,208(sp)
81111718:	1907883a 	add	r3,r3,r4
8111171c:	d9001f17 	ldw	r4,124(sp)
81111720:	41400015 	stw	r5,0(r8)
81111724:	d9403817 	ldw	r5,224(sp)
81111728:	21000044 	addi	r4,r4,1
8111172c:	d8c02015 	stw	r3,128(sp)
81111730:	41400115 	stw	r5,4(r8)
81111734:	d9001f15 	stw	r4,124(sp)
81111738:	014001c4 	movi	r5,7
8111173c:	2901dc16 	blt	r5,r4,81111eb0 <___svfprintf_internal_r+0x1c04>
81111740:	42000204 	addi	r8,r8,8
81111744:	d9003317 	ldw	r4,204(sp)
81111748:	8121883a 	add	r16,r16,r4
8111174c:	2085c83a 	sub	r2,r4,r2
81111750:	8461c83a 	sub	r16,r16,r17
81111754:	1400010e 	bge	r2,r16,8111175c <___svfprintf_internal_r+0x14b0>
81111758:	1021883a 	mov	r16,r2
8111175c:	04000a0e 	bge	zero,r16,81111788 <___svfprintf_internal_r+0x14dc>
81111760:	d9001f17 	ldw	r4,124(sp)
81111764:	1c07883a 	add	r3,r3,r16
81111768:	44400015 	stw	r17,0(r8)
8111176c:	21000044 	addi	r4,r4,1
81111770:	44000115 	stw	r16,4(r8)
81111774:	d8c02015 	stw	r3,128(sp)
81111778:	d9001f15 	stw	r4,124(sp)
8111177c:	014001c4 	movi	r5,7
81111780:	2901e616 	blt	r5,r4,81111f1c <___svfprintf_internal_r+0x1c70>
81111784:	42000204 	addi	r8,r8,8
81111788:	8001f616 	blt	r16,zero,81111f64 <___svfprintf_internal_r+0x1cb8>
8111178c:	1421c83a 	sub	r16,r2,r16
81111790:	043d1c0e 	bge	zero,r16,81110c04 <__reset+0xfb0f0c04>
81111794:	04400404 	movi	r17,16
81111798:	d8801f17 	ldw	r2,124(sp)
8111179c:	8c3edd0e 	bge	r17,r16,81111314 <__reset+0xfb0f1314>
811117a0:	01604534 	movhi	r5,33044
811117a4:	296e3284 	addi	r5,r5,-18230
811117a8:	d9402b15 	stw	r5,172(sp)
811117ac:	058001c4 	movi	r22,7
811117b0:	dd002c17 	ldw	r20,176(sp)
811117b4:	00000306 	br	811117c4 <___svfprintf_internal_r+0x1518>
811117b8:	42000204 	addi	r8,r8,8
811117bc:	843ffc04 	addi	r16,r16,-16
811117c0:	8c3ed70e 	bge	r17,r16,81111320 <__reset+0xfb0f1320>
811117c4:	18c00404 	addi	r3,r3,16
811117c8:	10800044 	addi	r2,r2,1
811117cc:	45400015 	stw	r21,0(r8)
811117d0:	44400115 	stw	r17,4(r8)
811117d4:	d8c02015 	stw	r3,128(sp)
811117d8:	d8801f15 	stw	r2,124(sp)
811117dc:	b0bff60e 	bge	r22,r2,811117b8 <__reset+0xfb0f17b8>
811117e0:	d9801e04 	addi	r6,sp,120
811117e4:	a00b883a 	mov	r5,r20
811117e8:	9809883a 	mov	r4,r19
811117ec:	111cee40 	call	8111cee4 <__ssprint_r>
811117f0:	103b951e 	bne	r2,zero,81110648 <__reset+0xfb0f0648>
811117f4:	d8c02017 	ldw	r3,128(sp)
811117f8:	d8801f17 	ldw	r2,124(sp)
811117fc:	da000404 	addi	r8,sp,16
81111800:	003fee06 	br	811117bc <__reset+0xfb0f17bc>
81111804:	9088703a 	and	r4,r18,r2
81111808:	203e8d1e 	bne	r4,zero,81111240 <__reset+0xfb0f1240>
8111180c:	dc401f17 	ldw	r17,124(sp)
81111810:	40800115 	stw	r2,4(r8)
81111814:	44000015 	stw	r16,0(r8)
81111818:	8c400044 	addi	r17,r17,1
8111181c:	d8c02015 	stw	r3,128(sp)
81111820:	dc401f15 	stw	r17,124(sp)
81111824:	008001c4 	movi	r2,7
81111828:	147f7f16 	blt	r2,r17,81111628 <__reset+0xfb0f1628>
8111182c:	45800204 	addi	r22,r8,8
81111830:	003eac06 	br	811112e4 <__reset+0xfb0f12e4>
81111834:	d9402c17 	ldw	r5,176(sp)
81111838:	d9801e04 	addi	r6,sp,120
8111183c:	9809883a 	mov	r4,r19
81111840:	111cee40 	call	8111cee4 <__ssprint_r>
81111844:	103b801e 	bne	r2,zero,81110648 <__reset+0xfb0f0648>
81111848:	d8c02017 	ldw	r3,128(sp)
8111184c:	dc401f17 	ldw	r17,124(sp)
81111850:	da000404 	addi	r8,sp,16
81111854:	003e8406 	br	81111268 <__reset+0xfb0f1268>
81111858:	d9402c17 	ldw	r5,176(sp)
8111185c:	d9801e04 	addi	r6,sp,120
81111860:	9809883a 	mov	r4,r19
81111864:	111cee40 	call	8111cee4 <__ssprint_r>
81111868:	103b771e 	bne	r2,zero,81110648 <__reset+0xfb0f0648>
8111186c:	d8c02017 	ldw	r3,128(sp)
81111870:	dc401f17 	ldw	r17,124(sp)
81111874:	dd800404 	addi	r22,sp,16
81111878:	003e8606 	br	81111294 <__reset+0xfb0f1294>
8111187c:	0029883a 	mov	r20,zero
81111880:	a5000c04 	addi	r20,r20,48
81111884:	dc001dc4 	addi	r16,sp,119
81111888:	dd001dc5 	stb	r20,119(sp)
8111188c:	003f3806 	br	81111570 <__reset+0xfb0f1570>
81111890:	d9402c17 	ldw	r5,176(sp)
81111894:	d9801e04 	addi	r6,sp,120
81111898:	9809883a 	mov	r4,r19
8111189c:	111cee40 	call	8111cee4 <__ssprint_r>
811118a0:	103b691e 	bne	r2,zero,81110648 <__reset+0xfb0f0648>
811118a4:	d8c02017 	ldw	r3,128(sp)
811118a8:	da000404 	addi	r8,sp,16
811118ac:	003c9506 	br	81110b04 <__reset+0xfb0f0b04>
811118b0:	d9003617 	ldw	r4,216(sp)
811118b4:	d9403717 	ldw	r5,220(sp)
811118b8:	da003e15 	stw	r8,248(sp)
811118bc:	111acf80 	call	8111acf8 <__fpclassifyd>
811118c0:	da003e17 	ldw	r8,248(sp)
811118c4:	1000bd1e 	bne	r2,zero,81111bbc <___svfprintf_internal_r+0x1910>
811118c8:	008011c4 	movi	r2,71
811118cc:	14411e0e 	bge	r2,r17,81111d48 <___svfprintf_internal_r+0x1a9c>
811118d0:	04204534 	movhi	r16,33044
811118d4:	842e2504 	addi	r16,r16,-18284
811118d8:	00c000c4 	movi	r3,3
811118dc:	00bfdfc4 	movi	r2,-129
811118e0:	d8c02a15 	stw	r3,168(sp)
811118e4:	90a4703a 	and	r18,r18,r2
811118e8:	df002783 	ldbu	fp,158(sp)
811118ec:	d8c02e15 	stw	r3,184(sp)
811118f0:	d8002915 	stw	zero,164(sp)
811118f4:	d8003215 	stw	zero,200(sp)
811118f8:	003c1c06 	br	8111096c <__reset+0xfb0f096c>
811118fc:	9080100c 	andi	r2,r18,64
81111900:	d8002785 	stb	zero,158(sp)
81111904:	10009426 	beq	r2,zero,81111b58 <___svfprintf_internal_r+0x18ac>
81111908:	d8c02d17 	ldw	r3,180(sp)
8111190c:	d9002917 	ldw	r4,164(sp)
81111910:	002d883a 	mov	r22,zero
81111914:	18800104 	addi	r2,r3,4
81111918:	1d00000b 	ldhu	r20,0(r3)
8111191c:	203ec10e 	bge	r4,zero,81111424 <__reset+0xfb0f1424>
81111920:	a586b03a 	or	r3,r20,r22
81111924:	d8802d15 	stw	r2,180(sp)
81111928:	183ec21e 	bne	r3,zero,81111434 <__reset+0xfb0f1434>
8111192c:	0039883a 	mov	fp,zero
81111930:	0005883a 	mov	r2,zero
81111934:	003db806 	br	81111018 <__reset+0xfb0f1018>
81111938:	d8802d17 	ldw	r2,180(sp)
8111193c:	d8c02d17 	ldw	r3,180(sp)
81111940:	d9002d17 	ldw	r4,180(sp)
81111944:	10800017 	ldw	r2,0(r2)
81111948:	18c00117 	ldw	r3,4(r3)
8111194c:	21000204 	addi	r4,r4,8
81111950:	d8803615 	stw	r2,216(sp)
81111954:	d8c03715 	stw	r3,220(sp)
81111958:	d9002d15 	stw	r4,180(sp)
8111195c:	003b8206 	br	81110768 <__reset+0xfb0f0768>
81111960:	9080100c 	andi	r2,r18,64
81111964:	10010726 	beq	r2,zero,81111d84 <___svfprintf_internal_r+0x1ad8>
81111968:	d8c02d17 	ldw	r3,180(sp)
8111196c:	1d00000f 	ldh	r20,0(r3)
81111970:	18c00104 	addi	r3,r3,4
81111974:	d8c02d15 	stw	r3,180(sp)
81111978:	a02dd7fa 	srai	r22,r20,31
8111197c:	b005883a 	mov	r2,r22
81111980:	003ba206 	br	8111080c <__reset+0xfb0f080c>
81111984:	9080100c 	andi	r2,r18,64
81111988:	10010526 	beq	r2,zero,81111da0 <___svfprintf_internal_r+0x1af4>
8111198c:	d9002d17 	ldw	r4,180(sp)
81111990:	002d883a 	mov	r22,zero
81111994:	2500000b 	ldhu	r20,0(r4)
81111998:	21000104 	addi	r4,r4,4
8111199c:	d9002d15 	stw	r4,180(sp)
811119a0:	003cfe06 	br	81110d9c <__reset+0xfb0f0d9c>
811119a4:	bc400007 	ldb	r17,0(r23)
811119a8:	003a9606 	br	81110404 <__reset+0xfb0f0404>
811119ac:	9080040c 	andi	r2,r18,16
811119b0:	10010126 	beq	r2,zero,81111db8 <___svfprintf_internal_r+0x1b0c>
811119b4:	d9402d17 	ldw	r5,180(sp)
811119b8:	d8c02f17 	ldw	r3,188(sp)
811119bc:	28800017 	ldw	r2,0(r5)
811119c0:	29400104 	addi	r5,r5,4
811119c4:	d9402d15 	stw	r5,180(sp)
811119c8:	10c00015 	stw	r3,0(r2)
811119cc:	003a6406 	br	81110360 <__reset+0xfb0f0360>
811119d0:	d9002917 	ldw	r4,164(sp)
811119d4:	d8002785 	stb	zero,158(sp)
811119d8:	203d8d16 	blt	r4,zero,81111010 <__reset+0xfb0f1010>
811119dc:	00bfdfc4 	movi	r2,-129
811119e0:	90a4703a 	and	r18,r18,r2
811119e4:	003b0506 	br	811105fc <__reset+0xfb0f05fc>
811119e8:	01604534 	movhi	r5,33044
811119ec:	296e3284 	addi	r5,r5,-18230
811119f0:	d9402b15 	stw	r5,172(sp)
811119f4:	d9402b17 	ldw	r5,172(sp)
811119f8:	1c47883a 	add	r3,r3,r17
811119fc:	10800044 	addi	r2,r2,1
81111a00:	41400015 	stw	r5,0(r8)
81111a04:	44400115 	stw	r17,4(r8)
81111a08:	d8c02015 	stw	r3,128(sp)
81111a0c:	d8801f15 	stw	r2,124(sp)
81111a10:	010001c4 	movi	r4,7
81111a14:	20bf3016 	blt	r4,r2,811116d8 <__reset+0xfb0f16d8>
81111a18:	42000204 	addi	r8,r8,8
81111a1c:	003f3506 	br	811116f4 <__reset+0xfb0f16f4>
81111a20:	01204534 	movhi	r4,33044
81111a24:	212e3284 	addi	r4,r4,-18230
81111a28:	d9002b15 	stw	r4,172(sp)
81111a2c:	003c5e06 	br	81110ba8 <__reset+0xfb0f0ba8>
81111a30:	d9402c17 	ldw	r5,176(sp)
81111a34:	d9801e04 	addi	r6,sp,120
81111a38:	9809883a 	mov	r4,r19
81111a3c:	111cee40 	call	8111cee4 <__ssprint_r>
81111a40:	103b011e 	bne	r2,zero,81110648 <__reset+0xfb0f0648>
81111a44:	d8c02017 	ldw	r3,128(sp)
81111a48:	da000404 	addi	r8,sp,16
81111a4c:	003d9306 	br	8111109c <__reset+0xfb0f109c>
81111a50:	d8801f17 	ldw	r2,124(sp)
81111a54:	01604534 	movhi	r5,33044
81111a58:	01000044 	movi	r4,1
81111a5c:	18c00044 	addi	r3,r3,1
81111a60:	10800044 	addi	r2,r2,1
81111a64:	296e3204 	addi	r5,r5,-18232
81111a68:	41000115 	stw	r4,4(r8)
81111a6c:	41400015 	stw	r5,0(r8)
81111a70:	d8c02015 	stw	r3,128(sp)
81111a74:	d8801f15 	stw	r2,124(sp)
81111a78:	010001c4 	movi	r4,7
81111a7c:	2080b516 	blt	r4,r2,81111d54 <___svfprintf_internal_r+0x1aa8>
81111a80:	42000204 	addi	r8,r8,8
81111a84:	8800041e 	bne	r17,zero,81111a98 <___svfprintf_internal_r+0x17ec>
81111a88:	d8803317 	ldw	r2,204(sp)
81111a8c:	1000021e 	bne	r2,zero,81111a98 <___svfprintf_internal_r+0x17ec>
81111a90:	9080004c 	andi	r2,r18,1
81111a94:	103c5b26 	beq	r2,zero,81110c04 <__reset+0xfb0f0c04>
81111a98:	d9003817 	ldw	r4,224(sp)
81111a9c:	d8801f17 	ldw	r2,124(sp)
81111aa0:	d9403417 	ldw	r5,208(sp)
81111aa4:	20c7883a 	add	r3,r4,r3
81111aa8:	10800044 	addi	r2,r2,1
81111aac:	41000115 	stw	r4,4(r8)
81111ab0:	41400015 	stw	r5,0(r8)
81111ab4:	d8c02015 	stw	r3,128(sp)
81111ab8:	d8801f15 	stw	r2,124(sp)
81111abc:	010001c4 	movi	r4,7
81111ac0:	20818016 	blt	r4,r2,811120c4 <___svfprintf_internal_r+0x1e18>
81111ac4:	42000204 	addi	r8,r8,8
81111ac8:	0463c83a 	sub	r17,zero,r17
81111acc:	0440cb0e 	bge	zero,r17,81111dfc <___svfprintf_internal_r+0x1b50>
81111ad0:	05800404 	movi	r22,16
81111ad4:	b440e80e 	bge	r22,r17,81111e78 <___svfprintf_internal_r+0x1bcc>
81111ad8:	01604534 	movhi	r5,33044
81111adc:	296e3284 	addi	r5,r5,-18230
81111ae0:	d9402b15 	stw	r5,172(sp)
81111ae4:	070001c4 	movi	fp,7
81111ae8:	dd002c17 	ldw	r20,176(sp)
81111aec:	00000306 	br	81111afc <___svfprintf_internal_r+0x1850>
81111af0:	42000204 	addi	r8,r8,8
81111af4:	8c7ffc04 	addi	r17,r17,-16
81111af8:	b440e20e 	bge	r22,r17,81111e84 <___svfprintf_internal_r+0x1bd8>
81111afc:	18c00404 	addi	r3,r3,16
81111b00:	10800044 	addi	r2,r2,1
81111b04:	45400015 	stw	r21,0(r8)
81111b08:	45800115 	stw	r22,4(r8)
81111b0c:	d8c02015 	stw	r3,128(sp)
81111b10:	d8801f15 	stw	r2,124(sp)
81111b14:	e0bff60e 	bge	fp,r2,81111af0 <__reset+0xfb0f1af0>
81111b18:	d9801e04 	addi	r6,sp,120
81111b1c:	a00b883a 	mov	r5,r20
81111b20:	9809883a 	mov	r4,r19
81111b24:	111cee40 	call	8111cee4 <__ssprint_r>
81111b28:	103ac71e 	bne	r2,zero,81110648 <__reset+0xfb0f0648>
81111b2c:	d8c02017 	ldw	r3,128(sp)
81111b30:	d8801f17 	ldw	r2,124(sp)
81111b34:	da000404 	addi	r8,sp,16
81111b38:	003fee06 	br	81111af4 <__reset+0xfb0f1af4>
81111b3c:	d8c02d17 	ldw	r3,180(sp)
81111b40:	d9002917 	ldw	r4,164(sp)
81111b44:	002d883a 	mov	r22,zero
81111b48:	18800104 	addi	r2,r3,4
81111b4c:	1d000017 	ldw	r20,0(r3)
81111b50:	203e7d0e 	bge	r4,zero,81111548 <__reset+0xfb0f1548>
81111b54:	003eda06 	br	811116c0 <__reset+0xfb0f16c0>
81111b58:	d9402d17 	ldw	r5,180(sp)
81111b5c:	d8c02917 	ldw	r3,164(sp)
81111b60:	002d883a 	mov	r22,zero
81111b64:	28800104 	addi	r2,r5,4
81111b68:	2d000017 	ldw	r20,0(r5)
81111b6c:	183e2d0e 	bge	r3,zero,81111424 <__reset+0xfb0f1424>
81111b70:	003f6b06 	br	81111920 <__reset+0xfb0f1920>
81111b74:	d8c02d15 	stw	r3,180(sp)
81111b78:	0039883a 	mov	fp,zero
81111b7c:	003ed206 	br	811116c8 <__reset+0xfb0f16c8>
81111b80:	bc400043 	ldbu	r17,1(r23)
81111b84:	94800814 	ori	r18,r18,32
81111b88:	bdc00044 	addi	r23,r23,1
81111b8c:	8c403fcc 	andi	r17,r17,255
81111b90:	8c40201c 	xori	r17,r17,128
81111b94:	8c7fe004 	addi	r17,r17,-128
81111b98:	003a1a06 	br	81110404 <__reset+0xfb0f0404>
81111b9c:	d9402c17 	ldw	r5,176(sp)
81111ba0:	d9801e04 	addi	r6,sp,120
81111ba4:	9809883a 	mov	r4,r19
81111ba8:	111cee40 	call	8111cee4 <__ssprint_r>
81111bac:	103aa61e 	bne	r2,zero,81110648 <__reset+0xfb0f0648>
81111bb0:	d8c02017 	ldw	r3,128(sp)
81111bb4:	da000404 	addi	r8,sp,16
81111bb8:	003d4a06 	br	811110e4 <__reset+0xfb0f10e4>
81111bbc:	d9002917 	ldw	r4,164(sp)
81111bc0:	05bff7c4 	movi	r22,-33
81111bc4:	00bfffc4 	movi	r2,-1
81111bc8:	8dac703a 	and	r22,r17,r22
81111bcc:	20806a26 	beq	r4,r2,81111d78 <___svfprintf_internal_r+0x1acc>
81111bd0:	008011c4 	movi	r2,71
81111bd4:	b0813726 	beq	r22,r2,811120b4 <___svfprintf_internal_r+0x1e08>
81111bd8:	d9003717 	ldw	r4,220(sp)
81111bdc:	90c04014 	ori	r3,r18,256
81111be0:	d8c02b15 	stw	r3,172(sp)
81111be4:	20015d16 	blt	r4,zero,8111215c <___svfprintf_internal_r+0x1eb0>
81111be8:	dd003717 	ldw	r20,220(sp)
81111bec:	d8002a05 	stb	zero,168(sp)
81111bf0:	00801984 	movi	r2,102
81111bf4:	88814026 	beq	r17,r2,811120f8 <___svfprintf_internal_r+0x1e4c>
81111bf8:	00801184 	movi	r2,70
81111bfc:	88817126 	beq	r17,r2,811121c4 <___svfprintf_internal_r+0x1f18>
81111c00:	00801144 	movi	r2,69
81111c04:	b0816226 	beq	r22,r2,81112190 <___svfprintf_internal_r+0x1ee4>
81111c08:	d8c02917 	ldw	r3,164(sp)
81111c0c:	d8802104 	addi	r2,sp,132
81111c10:	d8800315 	stw	r2,12(sp)
81111c14:	d9403617 	ldw	r5,216(sp)
81111c18:	d8802504 	addi	r2,sp,148
81111c1c:	d8800215 	stw	r2,8(sp)
81111c20:	d8802604 	addi	r2,sp,152
81111c24:	d8c00015 	stw	r3,0(sp)
81111c28:	d8800115 	stw	r2,4(sp)
81111c2c:	01c00084 	movi	r7,2
81111c30:	a00d883a 	mov	r6,r20
81111c34:	9809883a 	mov	r4,r19
81111c38:	d8c03d15 	stw	r3,244(sp)
81111c3c:	da003e15 	stw	r8,248(sp)
81111c40:	11164380 	call	81116438 <_dtoa_r>
81111c44:	1021883a 	mov	r16,r2
81111c48:	008019c4 	movi	r2,103
81111c4c:	d8c03d17 	ldw	r3,244(sp)
81111c50:	da003e17 	ldw	r8,248(sp)
81111c54:	8880e726 	beq	r17,r2,81111ff4 <___svfprintf_internal_r+0x1d48>
81111c58:	008011c4 	movi	r2,71
81111c5c:	8880d426 	beq	r17,r2,81111fb0 <___svfprintf_internal_r+0x1d04>
81111c60:	80f9883a 	add	fp,r16,r3
81111c64:	d9003617 	ldw	r4,216(sp)
81111c68:	000d883a 	mov	r6,zero
81111c6c:	000f883a 	mov	r7,zero
81111c70:	a00b883a 	mov	r5,r20
81111c74:	da003e15 	stw	r8,248(sp)
81111c78:	112303c0 	call	8112303c <__eqdf2>
81111c7c:	da003e17 	ldw	r8,248(sp)
81111c80:	1000e426 	beq	r2,zero,81112014 <___svfprintf_internal_r+0x1d68>
81111c84:	d8802117 	ldw	r2,132(sp)
81111c88:	1700062e 	bgeu	r2,fp,81111ca4 <___svfprintf_internal_r+0x19f8>
81111c8c:	01000c04 	movi	r4,48
81111c90:	10c00044 	addi	r3,r2,1
81111c94:	d8c02115 	stw	r3,132(sp)
81111c98:	11000005 	stb	r4,0(r2)
81111c9c:	d8802117 	ldw	r2,132(sp)
81111ca0:	173ffb36 	bltu	r2,fp,81111c90 <__reset+0xfb0f1c90>
81111ca4:	1405c83a 	sub	r2,r2,r16
81111ca8:	d8803315 	stw	r2,204(sp)
81111cac:	008011c4 	movi	r2,71
81111cb0:	b080c526 	beq	r22,r2,81111fc8 <___svfprintf_internal_r+0x1d1c>
81111cb4:	00801944 	movi	r2,101
81111cb8:	1441d90e 	bge	r2,r17,81112420 <___svfprintf_internal_r+0x2174>
81111cbc:	d8c02617 	ldw	r3,152(sp)
81111cc0:	00801984 	movi	r2,102
81111cc4:	d8c03215 	stw	r3,200(sp)
81111cc8:	88813426 	beq	r17,r2,8111219c <___svfprintf_internal_r+0x1ef0>
81111ccc:	d8c03217 	ldw	r3,200(sp)
81111cd0:	d9003317 	ldw	r4,204(sp)
81111cd4:	19012516 	blt	r3,r4,8111216c <___svfprintf_internal_r+0x1ec0>
81111cd8:	9480004c 	andi	r18,r18,1
81111cdc:	9001841e 	bne	r18,zero,811122f0 <___svfprintf_internal_r+0x2044>
81111ce0:	1805883a 	mov	r2,r3
81111ce4:	1801cc16 	blt	r3,zero,81112418 <___svfprintf_internal_r+0x216c>
81111ce8:	d8c03217 	ldw	r3,200(sp)
81111cec:	044019c4 	movi	r17,103
81111cf0:	d8c02e15 	stw	r3,184(sp)
81111cf4:	df002a07 	ldb	fp,168(sp)
81111cf8:	e000a61e 	bne	fp,zero,81111f94 <___svfprintf_internal_r+0x1ce8>
81111cfc:	df002783 	ldbu	fp,158(sp)
81111d00:	d8802a15 	stw	r2,168(sp)
81111d04:	dc802b17 	ldw	r18,172(sp)
81111d08:	d8002915 	stw	zero,164(sp)
81111d0c:	003b1706 	br	8111096c <__reset+0xfb0f096c>
81111d10:	04204534 	movhi	r16,33044
81111d14:	842e2204 	addi	r16,r16,-18296
81111d18:	003aa606 	br	811107b4 <__reset+0xfb0f07b4>
81111d1c:	d9003917 	ldw	r4,228(sp)
81111d20:	04001004 	movi	r16,64
81111d24:	800b883a 	mov	r5,r16
81111d28:	110ee080 	call	8110ee08 <_malloc_r>
81111d2c:	d9002c17 	ldw	r4,176(sp)
81111d30:	20800015 	stw	r2,0(r4)
81111d34:	20800415 	stw	r2,16(r4)
81111d38:	1001cb26 	beq	r2,zero,81112468 <___svfprintf_internal_r+0x21bc>
81111d3c:	d8802c17 	ldw	r2,176(sp)
81111d40:	14000515 	stw	r16,20(r2)
81111d44:	00397606 	br	81110320 <__reset+0xfb0f0320>
81111d48:	04204534 	movhi	r16,33044
81111d4c:	842e2404 	addi	r16,r16,-18288
81111d50:	003ee106 	br	811118d8 <__reset+0xfb0f18d8>
81111d54:	d9402c17 	ldw	r5,176(sp)
81111d58:	d9801e04 	addi	r6,sp,120
81111d5c:	9809883a 	mov	r4,r19
81111d60:	111cee40 	call	8111cee4 <__ssprint_r>
81111d64:	103a381e 	bne	r2,zero,81110648 <__reset+0xfb0f0648>
81111d68:	dc402617 	ldw	r17,152(sp)
81111d6c:	d8c02017 	ldw	r3,128(sp)
81111d70:	da000404 	addi	r8,sp,16
81111d74:	003f4306 	br	81111a84 <__reset+0xfb0f1a84>
81111d78:	01400184 	movi	r5,6
81111d7c:	d9402915 	stw	r5,164(sp)
81111d80:	003f9506 	br	81111bd8 <__reset+0xfb0f1bd8>
81111d84:	d9002d17 	ldw	r4,180(sp)
81111d88:	25000017 	ldw	r20,0(r4)
81111d8c:	21000104 	addi	r4,r4,4
81111d90:	d9002d15 	stw	r4,180(sp)
81111d94:	a02dd7fa 	srai	r22,r20,31
81111d98:	b005883a 	mov	r2,r22
81111d9c:	003a9b06 	br	8111080c <__reset+0xfb0f080c>
81111da0:	d9402d17 	ldw	r5,180(sp)
81111da4:	002d883a 	mov	r22,zero
81111da8:	2d000017 	ldw	r20,0(r5)
81111dac:	29400104 	addi	r5,r5,4
81111db0:	d9402d15 	stw	r5,180(sp)
81111db4:	003bf906 	br	81110d9c <__reset+0xfb0f0d9c>
81111db8:	9480100c 	andi	r18,r18,64
81111dbc:	90006e26 	beq	r18,zero,81111f78 <___svfprintf_internal_r+0x1ccc>
81111dc0:	d9002d17 	ldw	r4,180(sp)
81111dc4:	d9402f17 	ldw	r5,188(sp)
81111dc8:	20800017 	ldw	r2,0(r4)
81111dcc:	21000104 	addi	r4,r4,4
81111dd0:	d9002d15 	stw	r4,180(sp)
81111dd4:	1140000d 	sth	r5,0(r2)
81111dd8:	00396106 	br	81110360 <__reset+0xfb0f0360>
81111ddc:	d9402c17 	ldw	r5,176(sp)
81111de0:	d9801e04 	addi	r6,sp,120
81111de4:	9809883a 	mov	r4,r19
81111de8:	111cee40 	call	8111cee4 <__ssprint_r>
81111dec:	103a161e 	bne	r2,zero,81110648 <__reset+0xfb0f0648>
81111df0:	d8c02017 	ldw	r3,128(sp)
81111df4:	d8801f17 	ldw	r2,124(sp)
81111df8:	da000404 	addi	r8,sp,16
81111dfc:	d9403317 	ldw	r5,204(sp)
81111e00:	10800044 	addi	r2,r2,1
81111e04:	44000015 	stw	r16,0(r8)
81111e08:	28c7883a 	add	r3,r5,r3
81111e0c:	003b7706 	br	81110bec <__reset+0xfb0f0bec>
81111e10:	8009883a 	mov	r4,r16
81111e14:	da003e15 	stw	r8,248(sp)
81111e18:	110ffb80 	call	8110ffb8 <strlen>
81111e1c:	d8802e15 	stw	r2,184(sp)
81111e20:	da003e17 	ldw	r8,248(sp)
81111e24:	103c280e 	bge	r2,zero,81110ec8 <__reset+0xfb0f0ec8>
81111e28:	0005883a 	mov	r2,zero
81111e2c:	003c2606 	br	81110ec8 <__reset+0xfb0f0ec8>
81111e30:	00bfffc4 	movi	r2,-1
81111e34:	003a0906 	br	8111065c <__reset+0xfb0f065c>
81111e38:	01204534 	movhi	r4,33044
81111e3c:	212e3684 	addi	r4,r4,-18214
81111e40:	d9003515 	stw	r4,212(sp)
81111e44:	003b0606 	br	81110a60 <__reset+0xfb0f0a60>
81111e48:	013fffc4 	movi	r4,-1
81111e4c:	003a2706 	br	811106ec <__reset+0xfb0f06ec>
81111e50:	d9402c17 	ldw	r5,176(sp)
81111e54:	d9801e04 	addi	r6,sp,120
81111e58:	9809883a 	mov	r4,r19
81111e5c:	111cee40 	call	8111cee4 <__ssprint_r>
81111e60:	1039f91e 	bne	r2,zero,81110648 <__reset+0xfb0f0648>
81111e64:	d8c02017 	ldw	r3,128(sp)
81111e68:	da000404 	addi	r8,sp,16
81111e6c:	003d8406 	br	81111480 <__reset+0xfb0f1480>
81111e70:	0023883a 	mov	r17,zero
81111e74:	003d8306 	br	81111484 <__reset+0xfb0f1484>
81111e78:	01204534 	movhi	r4,33044
81111e7c:	212e3284 	addi	r4,r4,-18230
81111e80:	d9002b15 	stw	r4,172(sp)
81111e84:	d9002b17 	ldw	r4,172(sp)
81111e88:	1c47883a 	add	r3,r3,r17
81111e8c:	10800044 	addi	r2,r2,1
81111e90:	41000015 	stw	r4,0(r8)
81111e94:	44400115 	stw	r17,4(r8)
81111e98:	d8c02015 	stw	r3,128(sp)
81111e9c:	d8801f15 	stw	r2,124(sp)
81111ea0:	010001c4 	movi	r4,7
81111ea4:	20bfcd16 	blt	r4,r2,81111ddc <__reset+0xfb0f1ddc>
81111ea8:	42000204 	addi	r8,r8,8
81111eac:	003fd306 	br	81111dfc <__reset+0xfb0f1dfc>
81111eb0:	d9402c17 	ldw	r5,176(sp)
81111eb4:	d9801e04 	addi	r6,sp,120
81111eb8:	9809883a 	mov	r4,r19
81111ebc:	111cee40 	call	8111cee4 <__ssprint_r>
81111ec0:	1039e11e 	bne	r2,zero,81110648 <__reset+0xfb0f0648>
81111ec4:	d8802617 	ldw	r2,152(sp)
81111ec8:	d8c02017 	ldw	r3,128(sp)
81111ecc:	da000404 	addi	r8,sp,16
81111ed0:	003e1c06 	br	81111744 <__reset+0xfb0f1744>
81111ed4:	d8802917 	ldw	r2,164(sp)
81111ed8:	00c00184 	movi	r3,6
81111edc:	1880012e 	bgeu	r3,r2,81111ee4 <___svfprintf_internal_r+0x1c38>
81111ee0:	1805883a 	mov	r2,r3
81111ee4:	d8802e15 	stw	r2,184(sp)
81111ee8:	1000f316 	blt	r2,zero,811122b8 <___svfprintf_internal_r+0x200c>
81111eec:	04204534 	movhi	r16,33044
81111ef0:	d8802a15 	stw	r2,168(sp)
81111ef4:	dd002d15 	stw	r20,180(sp)
81111ef8:	d8002915 	stw	zero,164(sp)
81111efc:	d8003215 	stw	zero,200(sp)
81111f00:	842e3004 	addi	r16,r16,-18240
81111f04:	0039883a 	mov	fp,zero
81111f08:	003a9f06 	br	81110988 <__reset+0xfb0f0988>
81111f0c:	01204534 	movhi	r4,33044
81111f10:	212e3684 	addi	r4,r4,-18214
81111f14:	d9003515 	stw	r4,212(sp)
81111f18:	003b5f06 	br	81110c98 <__reset+0xfb0f0c98>
81111f1c:	d9402c17 	ldw	r5,176(sp)
81111f20:	d9801e04 	addi	r6,sp,120
81111f24:	9809883a 	mov	r4,r19
81111f28:	111cee40 	call	8111cee4 <__ssprint_r>
81111f2c:	1039c61e 	bne	r2,zero,81110648 <__reset+0xfb0f0648>
81111f30:	d8802617 	ldw	r2,152(sp)
81111f34:	d9403317 	ldw	r5,204(sp)
81111f38:	d8c02017 	ldw	r3,128(sp)
81111f3c:	da000404 	addi	r8,sp,16
81111f40:	2885c83a 	sub	r2,r5,r2
81111f44:	003e1006 	br	81111788 <__reset+0xfb0f1788>
81111f48:	00800044 	movi	r2,1
81111f4c:	10803fcc 	andi	r2,r2,255
81111f50:	00c00044 	movi	r3,1
81111f54:	10fa3526 	beq	r2,r3,8111082c <__reset+0xfb0f082c>
81111f58:	00c00084 	movi	r3,2
81111f5c:	10fb9e26 	beq	r2,r3,81110dd8 <__reset+0xfb0f0dd8>
81111f60:	003a6406 	br	811108f4 <__reset+0xfb0f08f4>
81111f64:	0021883a 	mov	r16,zero
81111f68:	003e0806 	br	8111178c <__reset+0xfb0f178c>
81111f6c:	07000b44 	movi	fp,45
81111f70:	df002785 	stb	fp,158(sp)
81111f74:	003a0b06 	br	811107a4 <__reset+0xfb0f07a4>
81111f78:	d8c02d17 	ldw	r3,180(sp)
81111f7c:	d9002f17 	ldw	r4,188(sp)
81111f80:	18800017 	ldw	r2,0(r3)
81111f84:	18c00104 	addi	r3,r3,4
81111f88:	d8c02d15 	stw	r3,180(sp)
81111f8c:	11000015 	stw	r4,0(r2)
81111f90:	0038f306 	br	81110360 <__reset+0xfb0f0360>
81111f94:	00c00b44 	movi	r3,45
81111f98:	d8c02785 	stb	r3,158(sp)
81111f9c:	d8802a15 	stw	r2,168(sp)
81111fa0:	dc802b17 	ldw	r18,172(sp)
81111fa4:	d8002915 	stw	zero,164(sp)
81111fa8:	07000b44 	movi	fp,45
81111fac:	003a7306 	br	8111097c <__reset+0xfb0f097c>
81111fb0:	9080004c 	andi	r2,r18,1
81111fb4:	1000941e 	bne	r2,zero,81112208 <___svfprintf_internal_r+0x1f5c>
81111fb8:	d8802117 	ldw	r2,132(sp)
81111fbc:	1405c83a 	sub	r2,r2,r16
81111fc0:	d8803315 	stw	r2,204(sp)
81111fc4:	b441161e 	bne	r22,r17,81112420 <___svfprintf_internal_r+0x2174>
81111fc8:	dd802617 	ldw	r22,152(sp)
81111fcc:	00bfff44 	movi	r2,-3
81111fd0:	b0801a16 	blt	r22,r2,8111203c <___svfprintf_internal_r+0x1d90>
81111fd4:	d9402917 	ldw	r5,164(sp)
81111fd8:	2d801816 	blt	r5,r22,8111203c <___svfprintf_internal_r+0x1d90>
81111fdc:	dd803215 	stw	r22,200(sp)
81111fe0:	003f3a06 	br	81111ccc <__reset+0xfb0f1ccc>
81111fe4:	1025883a 	mov	r18,r2
81111fe8:	0039883a 	mov	fp,zero
81111fec:	00800084 	movi	r2,2
81111ff0:	003fd606 	br	81111f4c <__reset+0xfb0f1f4c>
81111ff4:	9080004c 	andi	r2,r18,1
81111ff8:	103f191e 	bne	r2,zero,81111c60 <__reset+0xfb0f1c60>
81111ffc:	d8802117 	ldw	r2,132(sp)
81112000:	003f2806 	br	81111ca4 <__reset+0xfb0f1ca4>
81112004:	01204534 	movhi	r4,33044
81112008:	212e3284 	addi	r4,r4,-18230
8111200c:	d9002b15 	stw	r4,172(sp)
81112010:	003c7c06 	br	81111204 <__reset+0xfb0f1204>
81112014:	e005883a 	mov	r2,fp
81112018:	003f2206 	br	81111ca4 <__reset+0xfb0f1ca4>
8111201c:	d9402917 	ldw	r5,164(sp)
81112020:	df002783 	ldbu	fp,158(sp)
81112024:	dd002d15 	stw	r20,180(sp)
81112028:	d9402a15 	stw	r5,168(sp)
8111202c:	d9402e15 	stw	r5,184(sp)
81112030:	d8002915 	stw	zero,164(sp)
81112034:	d8003215 	stw	zero,200(sp)
81112038:	003a4c06 	br	8111096c <__reset+0xfb0f096c>
8111203c:	8c7fff84 	addi	r17,r17,-2
81112040:	b5bfffc4 	addi	r22,r22,-1
81112044:	dd802615 	stw	r22,152(sp)
81112048:	dc4022c5 	stb	r17,139(sp)
8111204c:	b000c316 	blt	r22,zero,8111235c <___svfprintf_internal_r+0x20b0>
81112050:	00800ac4 	movi	r2,43
81112054:	d8802305 	stb	r2,140(sp)
81112058:	00800244 	movi	r2,9
8111205c:	15806e16 	blt	r2,r22,81112218 <___svfprintf_internal_r+0x1f6c>
81112060:	00800c04 	movi	r2,48
81112064:	b5800c04 	addi	r22,r22,48
81112068:	d8802345 	stb	r2,141(sp)
8111206c:	dd802385 	stb	r22,142(sp)
81112070:	d88023c4 	addi	r2,sp,143
81112074:	df0022c4 	addi	fp,sp,139
81112078:	d8c03317 	ldw	r3,204(sp)
8111207c:	1739c83a 	sub	fp,r2,fp
81112080:	d9003317 	ldw	r4,204(sp)
81112084:	e0c7883a 	add	r3,fp,r3
81112088:	df003b15 	stw	fp,236(sp)
8111208c:	d8c02e15 	stw	r3,184(sp)
81112090:	00800044 	movi	r2,1
81112094:	1100b70e 	bge	r2,r4,81112374 <___svfprintf_internal_r+0x20c8>
81112098:	d8c02e17 	ldw	r3,184(sp)
8111209c:	18c00044 	addi	r3,r3,1
811120a0:	d8c02e15 	stw	r3,184(sp)
811120a4:	1805883a 	mov	r2,r3
811120a8:	1800b016 	blt	r3,zero,8111236c <___svfprintf_internal_r+0x20c0>
811120ac:	d8003215 	stw	zero,200(sp)
811120b0:	003f1006 	br	81111cf4 <__reset+0xfb0f1cf4>
811120b4:	d8802917 	ldw	r2,164(sp)
811120b8:	103ec71e 	bne	r2,zero,81111bd8 <__reset+0xfb0f1bd8>
811120bc:	dc002915 	stw	r16,164(sp)
811120c0:	003ec506 	br	81111bd8 <__reset+0xfb0f1bd8>
811120c4:	d9402c17 	ldw	r5,176(sp)
811120c8:	d9801e04 	addi	r6,sp,120
811120cc:	9809883a 	mov	r4,r19
811120d0:	111cee40 	call	8111cee4 <__ssprint_r>
811120d4:	10395c1e 	bne	r2,zero,81110648 <__reset+0xfb0f0648>
811120d8:	dc402617 	ldw	r17,152(sp)
811120dc:	d8c02017 	ldw	r3,128(sp)
811120e0:	d8801f17 	ldw	r2,124(sp)
811120e4:	da000404 	addi	r8,sp,16
811120e8:	003e7706 	br	81111ac8 <__reset+0xfb0f1ac8>
811120ec:	582f883a 	mov	r23,r11
811120f0:	d8002915 	stw	zero,164(sp)
811120f4:	0038c406 	br	81110408 <__reset+0xfb0f0408>
811120f8:	d8c02917 	ldw	r3,164(sp)
811120fc:	d8802104 	addi	r2,sp,132
81112100:	d8800315 	stw	r2,12(sp)
81112104:	d9403617 	ldw	r5,216(sp)
81112108:	d8802504 	addi	r2,sp,148
8111210c:	d8800215 	stw	r2,8(sp)
81112110:	d8802604 	addi	r2,sp,152
81112114:	d8c00015 	stw	r3,0(sp)
81112118:	9809883a 	mov	r4,r19
8111211c:	d8800115 	stw	r2,4(sp)
81112120:	01c000c4 	movi	r7,3
81112124:	a00d883a 	mov	r6,r20
81112128:	da003e15 	stw	r8,248(sp)
8111212c:	11164380 	call	81116438 <_dtoa_r>
81112130:	d9002917 	ldw	r4,164(sp)
81112134:	da003e17 	ldw	r8,248(sp)
81112138:	1021883a 	mov	r16,r2
8111213c:	1139883a 	add	fp,r2,r4
81112140:	2007883a 	mov	r3,r4
81112144:	81000007 	ldb	r4,0(r16)
81112148:	00800c04 	movi	r2,48
8111214c:	20806f26 	beq	r4,r2,8111230c <___svfprintf_internal_r+0x2060>
81112150:	d8c02617 	ldw	r3,152(sp)
81112154:	e0f9883a 	add	fp,fp,r3
81112158:	003ec206 	br	81111c64 <__reset+0xfb0f1c64>
8111215c:	00c00b44 	movi	r3,45
81112160:	2520003c 	xorhi	r20,r4,32768
81112164:	d8c02a05 	stb	r3,168(sp)
81112168:	003ea106 	br	81111bf0 <__reset+0xfb0f1bf0>
8111216c:	d8c03217 	ldw	r3,200(sp)
81112170:	00c0890e 	bge	zero,r3,81112398 <___svfprintf_internal_r+0x20ec>
81112174:	00800044 	movi	r2,1
81112178:	d9003317 	ldw	r4,204(sp)
8111217c:	1105883a 	add	r2,r2,r4
81112180:	d8802e15 	stw	r2,184(sp)
81112184:	10005f16 	blt	r2,zero,81112304 <___svfprintf_internal_r+0x2058>
81112188:	044019c4 	movi	r17,103
8111218c:	003ed906 	br	81111cf4 <__reset+0xfb0f1cf4>
81112190:	d9002917 	ldw	r4,164(sp)
81112194:	20c00044 	addi	r3,r4,1
81112198:	003e9c06 	br	81111c0c <__reset+0xfb0f1c0c>
8111219c:	d9002917 	ldw	r4,164(sp)
811121a0:	00c0680e 	bge	zero,r3,81112344 <___svfprintf_internal_r+0x2098>
811121a4:	2000461e 	bne	r4,zero,811122c0 <___svfprintf_internal_r+0x2014>
811121a8:	9480004c 	andi	r18,r18,1
811121ac:	9000441e 	bne	r18,zero,811122c0 <___svfprintf_internal_r+0x2014>
811121b0:	1805883a 	mov	r2,r3
811121b4:	1800a016 	blt	r3,zero,81112438 <___svfprintf_internal_r+0x218c>
811121b8:	d8c03217 	ldw	r3,200(sp)
811121bc:	d8c02e15 	stw	r3,184(sp)
811121c0:	003ecc06 	br	81111cf4 <__reset+0xfb0f1cf4>
811121c4:	d9402917 	ldw	r5,164(sp)
811121c8:	d8802104 	addi	r2,sp,132
811121cc:	d8800315 	stw	r2,12(sp)
811121d0:	d9400015 	stw	r5,0(sp)
811121d4:	d8802504 	addi	r2,sp,148
811121d8:	d9403617 	ldw	r5,216(sp)
811121dc:	d8800215 	stw	r2,8(sp)
811121e0:	d8802604 	addi	r2,sp,152
811121e4:	d8800115 	stw	r2,4(sp)
811121e8:	01c000c4 	movi	r7,3
811121ec:	a00d883a 	mov	r6,r20
811121f0:	9809883a 	mov	r4,r19
811121f4:	da003e15 	stw	r8,248(sp)
811121f8:	11164380 	call	81116438 <_dtoa_r>
811121fc:	d8c02917 	ldw	r3,164(sp)
81112200:	da003e17 	ldw	r8,248(sp)
81112204:	1021883a 	mov	r16,r2
81112208:	00801184 	movi	r2,70
8111220c:	80f9883a 	add	fp,r16,r3
81112210:	88bfcc26 	beq	r17,r2,81112144 <__reset+0xfb0f2144>
81112214:	003e9306 	br	81111c64 <__reset+0xfb0f1c64>
81112218:	df0022c4 	addi	fp,sp,139
8111221c:	dc002915 	stw	r16,164(sp)
81112220:	9829883a 	mov	r20,r19
81112224:	e021883a 	mov	r16,fp
81112228:	4027883a 	mov	r19,r8
8111222c:	b009883a 	mov	r4,r22
81112230:	01400284 	movi	r5,10
81112234:	1121b6c0 	call	81121b6c <__modsi3>
81112238:	10800c04 	addi	r2,r2,48
8111223c:	843fffc4 	addi	r16,r16,-1
81112240:	b009883a 	mov	r4,r22
81112244:	01400284 	movi	r5,10
81112248:	80800005 	stb	r2,0(r16)
8111224c:	1121ae80 	call	81121ae8 <__divsi3>
81112250:	102d883a 	mov	r22,r2
81112254:	00800244 	movi	r2,9
81112258:	15bff416 	blt	r2,r22,8111222c <__reset+0xfb0f222c>
8111225c:	9811883a 	mov	r8,r19
81112260:	b0800c04 	addi	r2,r22,48
81112264:	a027883a 	mov	r19,r20
81112268:	8029883a 	mov	r20,r16
8111226c:	a17fffc4 	addi	r5,r20,-1
81112270:	a0bfffc5 	stb	r2,-1(r20)
81112274:	dc002917 	ldw	r16,164(sp)
81112278:	2f00752e 	bgeu	r5,fp,81112450 <___svfprintf_internal_r+0x21a4>
8111227c:	d9c02384 	addi	r7,sp,142
81112280:	3d0fc83a 	sub	r7,r7,r20
81112284:	d9002344 	addi	r4,sp,141
81112288:	e1cf883a 	add	r7,fp,r7
8111228c:	00000106 	br	81112294 <___svfprintf_internal_r+0x1fe8>
81112290:	28800003 	ldbu	r2,0(r5)
81112294:	20800005 	stb	r2,0(r4)
81112298:	21000044 	addi	r4,r4,1
8111229c:	29400044 	addi	r5,r5,1
811122a0:	21fffb1e 	bne	r4,r7,81112290 <__reset+0xfb0f2290>
811122a4:	d8802304 	addi	r2,sp,140
811122a8:	1505c83a 	sub	r2,r2,r20
811122ac:	d8c02344 	addi	r3,sp,141
811122b0:	1885883a 	add	r2,r3,r2
811122b4:	003f7006 	br	81112078 <__reset+0xfb0f2078>
811122b8:	0005883a 	mov	r2,zero
811122bc:	003f0b06 	br	81111eec <__reset+0xfb0f1eec>
811122c0:	d9002917 	ldw	r4,164(sp)
811122c4:	d8c03217 	ldw	r3,200(sp)
811122c8:	20800044 	addi	r2,r4,1
811122cc:	1885883a 	add	r2,r3,r2
811122d0:	d8802e15 	stw	r2,184(sp)
811122d4:	103e870e 	bge	r2,zero,81111cf4 <__reset+0xfb0f1cf4>
811122d8:	0005883a 	mov	r2,zero
811122dc:	003e8506 	br	81111cf4 <__reset+0xfb0f1cf4>
811122e0:	01204534 	movhi	r4,33044
811122e4:	212e3284 	addi	r4,r4,-18230
811122e8:	d9002b15 	stw	r4,172(sp)
811122ec:	003cc506 	br	81111604 <__reset+0xfb0f1604>
811122f0:	d8c03217 	ldw	r3,200(sp)
811122f4:	18c00044 	addi	r3,r3,1
811122f8:	d8c02e15 	stw	r3,184(sp)
811122fc:	1805883a 	mov	r2,r3
81112300:	183fa10e 	bge	r3,zero,81112188 <__reset+0xfb0f2188>
81112304:	0005883a 	mov	r2,zero
81112308:	003f9f06 	br	81112188 <__reset+0xfb0f2188>
8111230c:	d9003617 	ldw	r4,216(sp)
81112310:	000d883a 	mov	r6,zero
81112314:	000f883a 	mov	r7,zero
81112318:	a00b883a 	mov	r5,r20
8111231c:	d8c03d15 	stw	r3,244(sp)
81112320:	da003e15 	stw	r8,248(sp)
81112324:	112303c0 	call	8112303c <__eqdf2>
81112328:	d8c03d17 	ldw	r3,244(sp)
8111232c:	da003e17 	ldw	r8,248(sp)
81112330:	103f8726 	beq	r2,zero,81112150 <__reset+0xfb0f2150>
81112334:	00800044 	movi	r2,1
81112338:	10c7c83a 	sub	r3,r2,r3
8111233c:	d8c02615 	stw	r3,152(sp)
81112340:	003f8406 	br	81112154 <__reset+0xfb0f2154>
81112344:	20000e1e 	bne	r4,zero,81112380 <___svfprintf_internal_r+0x20d4>
81112348:	9480004c 	andi	r18,r18,1
8111234c:	90000c1e 	bne	r18,zero,81112380 <___svfprintf_internal_r+0x20d4>
81112350:	00800044 	movi	r2,1
81112354:	d8802e15 	stw	r2,184(sp)
81112358:	003e6606 	br	81111cf4 <__reset+0xfb0f1cf4>
8111235c:	00800b44 	movi	r2,45
81112360:	05adc83a 	sub	r22,zero,r22
81112364:	d8802305 	stb	r2,140(sp)
81112368:	003f3b06 	br	81112058 <__reset+0xfb0f2058>
8111236c:	0005883a 	mov	r2,zero
81112370:	003f4e06 	br	811120ac <__reset+0xfb0f20ac>
81112374:	90a4703a 	and	r18,r18,r2
81112378:	903f4a26 	beq	r18,zero,811120a4 <__reset+0xfb0f20a4>
8111237c:	003f4606 	br	81112098 <__reset+0xfb0f2098>
81112380:	d8c02917 	ldw	r3,164(sp)
81112384:	18c00084 	addi	r3,r3,2
81112388:	d8c02e15 	stw	r3,184(sp)
8111238c:	1805883a 	mov	r2,r3
81112390:	183e580e 	bge	r3,zero,81111cf4 <__reset+0xfb0f1cf4>
81112394:	003fd006 	br	811122d8 <__reset+0xfb0f22d8>
81112398:	00800084 	movi	r2,2
8111239c:	10c5c83a 	sub	r2,r2,r3
811123a0:	003f7506 	br	81112178 <__reset+0xfb0f2178>
811123a4:	d8802d17 	ldw	r2,180(sp)
811123a8:	d9002d17 	ldw	r4,180(sp)
811123ac:	bc400043 	ldbu	r17,1(r23)
811123b0:	10800017 	ldw	r2,0(r2)
811123b4:	582f883a 	mov	r23,r11
811123b8:	d8802915 	stw	r2,164(sp)
811123bc:	20800104 	addi	r2,r4,4
811123c0:	d9002917 	ldw	r4,164(sp)
811123c4:	d8802d15 	stw	r2,180(sp)
811123c8:	203df00e 	bge	r4,zero,81111b8c <__reset+0xfb0f1b8c>
811123cc:	8c403fcc 	andi	r17,r17,255
811123d0:	00bfffc4 	movi	r2,-1
811123d4:	8c40201c 	xori	r17,r17,128
811123d8:	d8802915 	stw	r2,164(sp)
811123dc:	8c7fe004 	addi	r17,r17,-128
811123e0:	00380806 	br	81110404 <__reset+0xfb0f0404>
811123e4:	9080004c 	andi	r2,r18,1
811123e8:	0039883a 	mov	fp,zero
811123ec:	10000726 	beq	r2,zero,8111240c <___svfprintf_internal_r+0x2160>
811123f0:	d8c02817 	ldw	r3,160(sp)
811123f4:	dc001dc4 	addi	r16,sp,119
811123f8:	00800c04 	movi	r2,48
811123fc:	1c07c83a 	sub	r3,r3,r16
81112400:	d8801dc5 	stb	r2,119(sp)
81112404:	d8c02e15 	stw	r3,184(sp)
81112408:	00395206 	br	81110954 <__reset+0xfb0f0954>
8111240c:	d8002e15 	stw	zero,184(sp)
81112410:	dc001e04 	addi	r16,sp,120
81112414:	00394f06 	br	81110954 <__reset+0xfb0f0954>
81112418:	0005883a 	mov	r2,zero
8111241c:	003e3206 	br	81111ce8 <__reset+0xfb0f1ce8>
81112420:	dd802617 	ldw	r22,152(sp)
81112424:	003f0606 	br	81112040 <__reset+0xfb0f2040>
81112428:	d9c02785 	stb	r7,158(sp)
8111242c:	003a5106 	br	81110d74 <__reset+0xfb0f0d74>
81112430:	d9c02785 	stb	r7,158(sp)
81112434:	003a3706 	br	81110d14 <__reset+0xfb0f0d14>
81112438:	0005883a 	mov	r2,zero
8111243c:	003f5e06 	br	811121b8 <__reset+0xfb0f21b8>
81112440:	d9c02785 	stb	r7,158(sp)
81112444:	00391706 	br	811108a4 <__reset+0xfb0f08a4>
81112448:	d9c02785 	stb	r7,158(sp)
8111244c:	0038e606 	br	811107e8 <__reset+0xfb0f07e8>
81112450:	d8802344 	addi	r2,sp,141
81112454:	003f0806 	br	81112078 <__reset+0xfb0f2078>
81112458:	d9c02785 	stb	r7,158(sp)
8111245c:	0038b706 	br	8111073c <__reset+0xfb0f073c>
81112460:	d9c02785 	stb	r7,158(sp)
81112464:	003adc06 	br	81110fd8 <__reset+0xfb0f0fd8>
81112468:	d9403917 	ldw	r5,228(sp)
8111246c:	00800304 	movi	r2,12
81112470:	28800015 	stw	r2,0(r5)
81112474:	00bfffc4 	movi	r2,-1
81112478:	00387806 	br	8111065c <__reset+0xfb0f065c>
8111247c:	d9c02785 	stb	r7,158(sp)
81112480:	003abf06 	br	81110f80 <__reset+0xfb0f0f80>
81112484:	d9c02785 	stb	r7,158(sp)
81112488:	003a9b06 	br	81110ef8 <__reset+0xfb0f0ef8>

8111248c <___vfprintf_internal_r>:
8111248c:	deffb804 	addi	sp,sp,-288
81112490:	de00012e 	bgeu	sp,et,81112498 <___vfprintf_internal_r+0xc>
81112494:	003b68fa 	trap	3
81112498:	dfc04715 	stw	ra,284(sp)
8111249c:	ddc04515 	stw	r23,276(sp)
811124a0:	dd404315 	stw	r21,268(sp)
811124a4:	d9002c15 	stw	r4,176(sp)
811124a8:	282f883a 	mov	r23,r5
811124ac:	302b883a 	mov	r21,r6
811124b0:	d9c02d15 	stw	r7,180(sp)
811124b4:	df004615 	stw	fp,280(sp)
811124b8:	dd804415 	stw	r22,272(sp)
811124bc:	dd004215 	stw	r20,264(sp)
811124c0:	dcc04115 	stw	r19,260(sp)
811124c4:	dc804015 	stw	r18,256(sp)
811124c8:	dc403f15 	stw	r17,252(sp)
811124cc:	dc003e15 	stw	r16,248(sp)
811124d0:	11190340 	call	81119034 <_localeconv_r>
811124d4:	10800017 	ldw	r2,0(r2)
811124d8:	1009883a 	mov	r4,r2
811124dc:	d8803415 	stw	r2,208(sp)
811124e0:	110ffb80 	call	8110ffb8 <strlen>
811124e4:	d8803715 	stw	r2,220(sp)
811124e8:	d8802c17 	ldw	r2,176(sp)
811124ec:	10000226 	beq	r2,zero,811124f8 <___vfprintf_internal_r+0x6c>
811124f0:	10800e17 	ldw	r2,56(r2)
811124f4:	1000f926 	beq	r2,zero,811128dc <___vfprintf_internal_r+0x450>
811124f8:	b880030b 	ldhu	r2,12(r23)
811124fc:	10c8000c 	andi	r3,r2,8192
81112500:	1800061e 	bne	r3,zero,8111251c <___vfprintf_internal_r+0x90>
81112504:	b9001917 	ldw	r4,100(r23)
81112508:	00f7ffc4 	movi	r3,-8193
8111250c:	10880014 	ori	r2,r2,8192
81112510:	20c6703a 	and	r3,r4,r3
81112514:	b880030d 	sth	r2,12(r23)
81112518:	b8c01915 	stw	r3,100(r23)
8111251c:	10c0020c 	andi	r3,r2,8
81112520:	1800c126 	beq	r3,zero,81112828 <___vfprintf_internal_r+0x39c>
81112524:	b8c00417 	ldw	r3,16(r23)
81112528:	1800bf26 	beq	r3,zero,81112828 <___vfprintf_internal_r+0x39c>
8111252c:	1080068c 	andi	r2,r2,26
81112530:	00c00284 	movi	r3,10
81112534:	10c0c426 	beq	r2,r3,81112848 <___vfprintf_internal_r+0x3bc>
81112538:	d8c00404 	addi	r3,sp,16
8111253c:	05204534 	movhi	r20,33044
81112540:	d9001e04 	addi	r4,sp,120
81112544:	a52e3a84 	addi	r20,r20,-18198
81112548:	d8c01e15 	stw	r3,120(sp)
8111254c:	d8002015 	stw	zero,128(sp)
81112550:	d8001f15 	stw	zero,124(sp)
81112554:	d8003315 	stw	zero,204(sp)
81112558:	d8003615 	stw	zero,216(sp)
8111255c:	d8003815 	stw	zero,224(sp)
81112560:	1811883a 	mov	r8,r3
81112564:	d8003915 	stw	zero,228(sp)
81112568:	d8003a15 	stw	zero,232(sp)
8111256c:	d8002f15 	stw	zero,188(sp)
81112570:	d9002815 	stw	r4,160(sp)
81112574:	a8800007 	ldb	r2,0(r21)
81112578:	10027b26 	beq	r2,zero,81112f68 <___vfprintf_internal_r+0xadc>
8111257c:	00c00944 	movi	r3,37
81112580:	a821883a 	mov	r16,r21
81112584:	10c0021e 	bne	r2,r3,81112590 <___vfprintf_internal_r+0x104>
81112588:	00001406 	br	811125dc <___vfprintf_internal_r+0x150>
8111258c:	10c00326 	beq	r2,r3,8111259c <___vfprintf_internal_r+0x110>
81112590:	84000044 	addi	r16,r16,1
81112594:	80800007 	ldb	r2,0(r16)
81112598:	103ffc1e 	bne	r2,zero,8111258c <__reset+0xfb0f258c>
8111259c:	8563c83a 	sub	r17,r16,r21
811125a0:	88000e26 	beq	r17,zero,811125dc <___vfprintf_internal_r+0x150>
811125a4:	d8c02017 	ldw	r3,128(sp)
811125a8:	d8801f17 	ldw	r2,124(sp)
811125ac:	45400015 	stw	r21,0(r8)
811125b0:	1c47883a 	add	r3,r3,r17
811125b4:	10800044 	addi	r2,r2,1
811125b8:	d8c02015 	stw	r3,128(sp)
811125bc:	44400115 	stw	r17,4(r8)
811125c0:	d8801f15 	stw	r2,124(sp)
811125c4:	00c001c4 	movi	r3,7
811125c8:	1880a716 	blt	r3,r2,81112868 <___vfprintf_internal_r+0x3dc>
811125cc:	42000204 	addi	r8,r8,8
811125d0:	d9402f17 	ldw	r5,188(sp)
811125d4:	2c4b883a 	add	r5,r5,r17
811125d8:	d9402f15 	stw	r5,188(sp)
811125dc:	80800007 	ldb	r2,0(r16)
811125e0:	1000a826 	beq	r2,zero,81112884 <___vfprintf_internal_r+0x3f8>
811125e4:	84400047 	ldb	r17,1(r16)
811125e8:	00bfffc4 	movi	r2,-1
811125ec:	85400044 	addi	r21,r16,1
811125f0:	d8002785 	stb	zero,158(sp)
811125f4:	0007883a 	mov	r3,zero
811125f8:	000f883a 	mov	r7,zero
811125fc:	d8802915 	stw	r2,164(sp)
81112600:	d8003115 	stw	zero,196(sp)
81112604:	0025883a 	mov	r18,zero
81112608:	01401604 	movi	r5,88
8111260c:	01800244 	movi	r6,9
81112610:	02800a84 	movi	r10,42
81112614:	02401b04 	movi	r9,108
81112618:	ad400044 	addi	r21,r21,1
8111261c:	88bff804 	addi	r2,r17,-32
81112620:	28830436 	bltu	r5,r2,81113234 <___vfprintf_internal_r+0xda8>
81112624:	100490ba 	slli	r2,r2,2
81112628:	01204474 	movhi	r4,33041
8111262c:	21098f04 	addi	r4,r4,9788
81112630:	1105883a 	add	r2,r2,r4
81112634:	10800017 	ldw	r2,0(r2)
81112638:	1000683a 	jmp	r2
8111263c:	81113154 	ori	r4,r16,17605
81112640:	81113234 	orhi	r4,r16,17608
81112644:	81113234 	orhi	r4,r16,17608
81112648:	81113174 	orhi	r4,r16,17605
8111264c:	81113234 	orhi	r4,r16,17608
81112650:	81113234 	orhi	r4,r16,17608
81112654:	81113234 	orhi	r4,r16,17608
81112658:	81113234 	orhi	r4,r16,17608
8111265c:	81113234 	orhi	r4,r16,17608
81112660:	81113234 	orhi	r4,r16,17608
81112664:	811128e8 	cmpgeui	r4,r16,17571
81112668:	81113090 	cmplti	r4,r16,17602
8111266c:	81113234 	orhi	r4,r16,17608
81112670:	811127b0 	cmpltui	r4,r16,17566
81112674:	81112910 	cmplti	r4,r16,17572
81112678:	81113234 	orhi	r4,r16,17608
8111267c:	81112950 	cmplti	r4,r16,17573
81112680:	8111295c 	xori	r4,r16,17573
81112684:	8111295c 	xori	r4,r16,17573
81112688:	8111295c 	xori	r4,r16,17573
8111268c:	8111295c 	xori	r4,r16,17573
81112690:	8111295c 	xori	r4,r16,17573
81112694:	8111295c 	xori	r4,r16,17573
81112698:	8111295c 	xori	r4,r16,17573
8111269c:	8111295c 	xori	r4,r16,17573
811126a0:	8111295c 	xori	r4,r16,17573
811126a4:	81113234 	orhi	r4,r16,17608
811126a8:	81113234 	orhi	r4,r16,17608
811126ac:	81113234 	orhi	r4,r16,17608
811126b0:	81113234 	orhi	r4,r16,17608
811126b4:	81113234 	orhi	r4,r16,17608
811126b8:	81113234 	orhi	r4,r16,17608
811126bc:	81113234 	orhi	r4,r16,17608
811126c0:	81113234 	orhi	r4,r16,17608
811126c4:	81113234 	orhi	r4,r16,17608
811126c8:	81113234 	orhi	r4,r16,17608
811126cc:	81112990 	cmplti	r4,r16,17574
811126d0:	81112a4c 	andi	r4,r16,17577
811126d4:	81113234 	orhi	r4,r16,17608
811126d8:	81112a4c 	andi	r4,r16,17577
811126dc:	81113234 	orhi	r4,r16,17608
811126e0:	81113234 	orhi	r4,r16,17608
811126e4:	81113234 	orhi	r4,r16,17608
811126e8:	81113234 	orhi	r4,r16,17608
811126ec:	81112aec 	andhi	r4,r16,17579
811126f0:	81113234 	orhi	r4,r16,17608
811126f4:	81113234 	orhi	r4,r16,17608
811126f8:	81112af8 	rdprs	r4,r16,17579
811126fc:	81113234 	orhi	r4,r16,17608
81112700:	81113234 	orhi	r4,r16,17608
81112704:	81113234 	orhi	r4,r16,17608
81112708:	81113234 	orhi	r4,r16,17608
8111270c:	81113234 	orhi	r4,r16,17608
81112710:	81112f70 	cmpltui	r4,r16,17597
81112714:	81113234 	orhi	r4,r16,17608
81112718:	81113234 	orhi	r4,r16,17608
8111271c:	81112fd0 	cmplti	r4,r16,17599
81112720:	81113234 	orhi	r4,r16,17608
81112724:	81113234 	orhi	r4,r16,17608
81112728:	81113234 	orhi	r4,r16,17608
8111272c:	81113234 	orhi	r4,r16,17608
81112730:	81113234 	orhi	r4,r16,17608
81112734:	81113234 	orhi	r4,r16,17608
81112738:	81113234 	orhi	r4,r16,17608
8111273c:	81113234 	orhi	r4,r16,17608
81112740:	81113234 	orhi	r4,r16,17608
81112744:	81113234 	orhi	r4,r16,17608
81112748:	811131e0 	cmpeqi	r4,r16,17607
8111274c:	81113180 	call	88111318 <__reset+0x20f1318>
81112750:	81112a4c 	andi	r4,r16,17577
81112754:	81112a4c 	andi	r4,r16,17577
81112758:	81112a4c 	andi	r4,r16,17577
8111275c:	81113190 	cmplti	r4,r16,17606
81112760:	81113180 	call	88111318 <__reset+0x20f1318>
81112764:	81113234 	orhi	r4,r16,17608
81112768:	81113234 	orhi	r4,r16,17608
8111276c:	8111319c 	xori	r4,r16,17606
81112770:	81113234 	orhi	r4,r16,17608
81112774:	811131ac 	andhi	r4,r16,17606
81112778:	81113080 	call	88111308 <__reset+0x20f1308>
8111277c:	811127bc 	xorhi	r4,r16,17566
81112780:	811130a0 	cmpeqi	r4,r16,17602
81112784:	81113234 	orhi	r4,r16,17608
81112788:	811130ac 	andhi	r4,r16,17602
8111278c:	81113234 	orhi	r4,r16,17608
81112790:	81113108 	cmpgei	r4,r16,17604
81112794:	81113234 	orhi	r4,r16,17608
81112798:	81113234 	orhi	r4,r16,17608
8111279c:	81113118 	cmpnei	r4,r16,17604
811127a0:	d9003117 	ldw	r4,196(sp)
811127a4:	d8802d15 	stw	r2,180(sp)
811127a8:	0109c83a 	sub	r4,zero,r4
811127ac:	d9003115 	stw	r4,196(sp)
811127b0:	94800114 	ori	r18,r18,4
811127b4:	ac400007 	ldb	r17,0(r21)
811127b8:	003f9706 	br	81112618 <__reset+0xfb0f2618>
811127bc:	00800c04 	movi	r2,48
811127c0:	d9002d17 	ldw	r4,180(sp)
811127c4:	d9402917 	ldw	r5,164(sp)
811127c8:	d8802705 	stb	r2,156(sp)
811127cc:	00801e04 	movi	r2,120
811127d0:	d8802745 	stb	r2,157(sp)
811127d4:	d8002785 	stb	zero,158(sp)
811127d8:	20c00104 	addi	r3,r4,4
811127dc:	24c00017 	ldw	r19,0(r4)
811127e0:	002d883a 	mov	r22,zero
811127e4:	90800094 	ori	r2,r18,2
811127e8:	28029a16 	blt	r5,zero,81113254 <___vfprintf_internal_r+0xdc8>
811127ec:	00bfdfc4 	movi	r2,-129
811127f0:	90a4703a 	and	r18,r18,r2
811127f4:	d8c02d15 	stw	r3,180(sp)
811127f8:	94800094 	ori	r18,r18,2
811127fc:	9802871e 	bne	r19,zero,8111321c <___vfprintf_internal_r+0xd90>
81112800:	00a04534 	movhi	r2,33044
81112804:	10ae2b04 	addi	r2,r2,-18260
81112808:	d8803915 	stw	r2,228(sp)
8111280c:	04401e04 	movi	r17,120
81112810:	d8802917 	ldw	r2,164(sp)
81112814:	0039883a 	mov	fp,zero
81112818:	1001e926 	beq	r2,zero,81112fc0 <___vfprintf_internal_r+0xb34>
8111281c:	0027883a 	mov	r19,zero
81112820:	002d883a 	mov	r22,zero
81112824:	00020506 	br	8111303c <___vfprintf_internal_r+0xbb0>
81112828:	d9002c17 	ldw	r4,176(sp)
8111282c:	b80b883a 	mov	r5,r23
81112830:	11160780 	call	81116078 <__swsetup_r>
81112834:	1005ac1e 	bne	r2,zero,81113ee8 <___vfprintf_internal_r+0x1a5c>
81112838:	b880030b 	ldhu	r2,12(r23)
8111283c:	00c00284 	movi	r3,10
81112840:	1080068c 	andi	r2,r2,26
81112844:	10ff3c1e 	bne	r2,r3,81112538 <__reset+0xfb0f2538>
81112848:	b880038f 	ldh	r2,14(r23)
8111284c:	103f3a16 	blt	r2,zero,81112538 <__reset+0xfb0f2538>
81112850:	d9c02d17 	ldw	r7,180(sp)
81112854:	d9002c17 	ldw	r4,176(sp)
81112858:	a80d883a 	mov	r6,r21
8111285c:	b80b883a 	mov	r5,r23
81112860:	11146a80 	call	811146a8 <__sbprintf>
81112864:	00001106 	br	811128ac <___vfprintf_internal_r+0x420>
81112868:	d9002c17 	ldw	r4,176(sp)
8111286c:	d9801e04 	addi	r6,sp,120
81112870:	b80b883a 	mov	r5,r23
81112874:	111e6940 	call	8111e694 <__sprint_r>
81112878:	1000081e 	bne	r2,zero,8111289c <___vfprintf_internal_r+0x410>
8111287c:	da000404 	addi	r8,sp,16
81112880:	003f5306 	br	811125d0 <__reset+0xfb0f25d0>
81112884:	d8802017 	ldw	r2,128(sp)
81112888:	10000426 	beq	r2,zero,8111289c <___vfprintf_internal_r+0x410>
8111288c:	d9002c17 	ldw	r4,176(sp)
81112890:	d9801e04 	addi	r6,sp,120
81112894:	b80b883a 	mov	r5,r23
81112898:	111e6940 	call	8111e694 <__sprint_r>
8111289c:	b880030b 	ldhu	r2,12(r23)
811128a0:	1080100c 	andi	r2,r2,64
811128a4:	1005901e 	bne	r2,zero,81113ee8 <___vfprintf_internal_r+0x1a5c>
811128a8:	d8802f17 	ldw	r2,188(sp)
811128ac:	dfc04717 	ldw	ra,284(sp)
811128b0:	df004617 	ldw	fp,280(sp)
811128b4:	ddc04517 	ldw	r23,276(sp)
811128b8:	dd804417 	ldw	r22,272(sp)
811128bc:	dd404317 	ldw	r21,268(sp)
811128c0:	dd004217 	ldw	r20,264(sp)
811128c4:	dcc04117 	ldw	r19,260(sp)
811128c8:	dc804017 	ldw	r18,256(sp)
811128cc:	dc403f17 	ldw	r17,252(sp)
811128d0:	dc003e17 	ldw	r16,248(sp)
811128d4:	dec04804 	addi	sp,sp,288
811128d8:	f800283a 	ret
811128dc:	d9002c17 	ldw	r4,176(sp)
811128e0:	11180e80 	call	811180e8 <__sinit>
811128e4:	003f0406 	br	811124f8 <__reset+0xfb0f24f8>
811128e8:	d8802d17 	ldw	r2,180(sp)
811128ec:	d9002d17 	ldw	r4,180(sp)
811128f0:	10800017 	ldw	r2,0(r2)
811128f4:	d8803115 	stw	r2,196(sp)
811128f8:	20800104 	addi	r2,r4,4
811128fc:	d9003117 	ldw	r4,196(sp)
81112900:	203fa716 	blt	r4,zero,811127a0 <__reset+0xfb0f27a0>
81112904:	d8802d15 	stw	r2,180(sp)
81112908:	ac400007 	ldb	r17,0(r21)
8111290c:	003f4206 	br	81112618 <__reset+0xfb0f2618>
81112910:	ac400007 	ldb	r17,0(r21)
81112914:	aac00044 	addi	r11,r21,1
81112918:	8a872826 	beq	r17,r10,811145bc <___vfprintf_internal_r+0x2130>
8111291c:	88bff404 	addi	r2,r17,-48
81112920:	0009883a 	mov	r4,zero
81112924:	30867d36 	bltu	r6,r2,8111431c <___vfprintf_internal_r+0x1e90>
81112928:	5c400007 	ldb	r17,0(r11)
8111292c:	210002a4 	muli	r4,r4,10
81112930:	5d400044 	addi	r21,r11,1
81112934:	a817883a 	mov	r11,r21
81112938:	2089883a 	add	r4,r4,r2
8111293c:	88bff404 	addi	r2,r17,-48
81112940:	30bff92e 	bgeu	r6,r2,81112928 <__reset+0xfb0f2928>
81112944:	2005c916 	blt	r4,zero,8111406c <___vfprintf_internal_r+0x1be0>
81112948:	d9002915 	stw	r4,164(sp)
8111294c:	003f3306 	br	8111261c <__reset+0xfb0f261c>
81112950:	94802014 	ori	r18,r18,128
81112954:	ac400007 	ldb	r17,0(r21)
81112958:	003f2f06 	br	81112618 <__reset+0xfb0f2618>
8111295c:	a809883a 	mov	r4,r21
81112960:	d8003115 	stw	zero,196(sp)
81112964:	88bff404 	addi	r2,r17,-48
81112968:	0017883a 	mov	r11,zero
8111296c:	24400007 	ldb	r17,0(r4)
81112970:	5ac002a4 	muli	r11,r11,10
81112974:	ad400044 	addi	r21,r21,1
81112978:	a809883a 	mov	r4,r21
8111297c:	12d7883a 	add	r11,r2,r11
81112980:	88bff404 	addi	r2,r17,-48
81112984:	30bff92e 	bgeu	r6,r2,8111296c <__reset+0xfb0f296c>
81112988:	dac03115 	stw	r11,196(sp)
8111298c:	003f2306 	br	8111261c <__reset+0xfb0f261c>
81112990:	18c03fcc 	andi	r3,r3,255
81112994:	18072b1e 	bne	r3,zero,81114644 <___vfprintf_internal_r+0x21b8>
81112998:	94800414 	ori	r18,r18,16
8111299c:	9080080c 	andi	r2,r18,32
811129a0:	10037b26 	beq	r2,zero,81113790 <___vfprintf_internal_r+0x1304>
811129a4:	d9402d17 	ldw	r5,180(sp)
811129a8:	28800117 	ldw	r2,4(r5)
811129ac:	2cc00017 	ldw	r19,0(r5)
811129b0:	29400204 	addi	r5,r5,8
811129b4:	d9402d15 	stw	r5,180(sp)
811129b8:	102d883a 	mov	r22,r2
811129bc:	10044b16 	blt	r2,zero,81113aec <___vfprintf_internal_r+0x1660>
811129c0:	d9402917 	ldw	r5,164(sp)
811129c4:	df002783 	ldbu	fp,158(sp)
811129c8:	2803bc16 	blt	r5,zero,811138bc <___vfprintf_internal_r+0x1430>
811129cc:	00ffdfc4 	movi	r3,-129
811129d0:	9d84b03a 	or	r2,r19,r22
811129d4:	90e4703a 	and	r18,r18,r3
811129d8:	10017726 	beq	r2,zero,81112fb8 <___vfprintf_internal_r+0xb2c>
811129dc:	b0038326 	beq	r22,zero,811137ec <___vfprintf_internal_r+0x1360>
811129e0:	dc402a15 	stw	r17,168(sp)
811129e4:	dc001e04 	addi	r16,sp,120
811129e8:	b023883a 	mov	r17,r22
811129ec:	402d883a 	mov	r22,r8
811129f0:	9809883a 	mov	r4,r19
811129f4:	880b883a 	mov	r5,r17
811129f8:	01800284 	movi	r6,10
811129fc:	000f883a 	mov	r7,zero
81112a00:	11215a80 	call	811215a8 <__umoddi3>
81112a04:	10800c04 	addi	r2,r2,48
81112a08:	843fffc4 	addi	r16,r16,-1
81112a0c:	9809883a 	mov	r4,r19
81112a10:	880b883a 	mov	r5,r17
81112a14:	80800005 	stb	r2,0(r16)
81112a18:	01800284 	movi	r6,10
81112a1c:	000f883a 	mov	r7,zero
81112a20:	11210280 	call	81121028 <__udivdi3>
81112a24:	1027883a 	mov	r19,r2
81112a28:	10c4b03a 	or	r2,r2,r3
81112a2c:	1823883a 	mov	r17,r3
81112a30:	103fef1e 	bne	r2,zero,811129f0 <__reset+0xfb0f29f0>
81112a34:	d8c02817 	ldw	r3,160(sp)
81112a38:	dc402a17 	ldw	r17,168(sp)
81112a3c:	b011883a 	mov	r8,r22
81112a40:	1c07c83a 	sub	r3,r3,r16
81112a44:	d8c02e15 	stw	r3,184(sp)
81112a48:	00005906 	br	81112bb0 <___vfprintf_internal_r+0x724>
81112a4c:	18c03fcc 	andi	r3,r3,255
81112a50:	1806fa1e 	bne	r3,zero,8111463c <___vfprintf_internal_r+0x21b0>
81112a54:	9080020c 	andi	r2,r18,8
81112a58:	10048a26 	beq	r2,zero,81113c84 <___vfprintf_internal_r+0x17f8>
81112a5c:	d8c02d17 	ldw	r3,180(sp)
81112a60:	d9002d17 	ldw	r4,180(sp)
81112a64:	d9402d17 	ldw	r5,180(sp)
81112a68:	18c00017 	ldw	r3,0(r3)
81112a6c:	21000117 	ldw	r4,4(r4)
81112a70:	29400204 	addi	r5,r5,8
81112a74:	d8c03615 	stw	r3,216(sp)
81112a78:	d9003815 	stw	r4,224(sp)
81112a7c:	d9402d15 	stw	r5,180(sp)
81112a80:	d9003617 	ldw	r4,216(sp)
81112a84:	d9403817 	ldw	r5,224(sp)
81112a88:	da003d15 	stw	r8,244(sp)
81112a8c:	04000044 	movi	r16,1
81112a90:	111acf80 	call	8111acf8 <__fpclassifyd>
81112a94:	da003d17 	ldw	r8,244(sp)
81112a98:	14041f1e 	bne	r2,r16,81113b18 <___vfprintf_internal_r+0x168c>
81112a9c:	d9003617 	ldw	r4,216(sp)
81112aa0:	d9403817 	ldw	r5,224(sp)
81112aa4:	000d883a 	mov	r6,zero
81112aa8:	000f883a 	mov	r7,zero
81112aac:	11231a00 	call	811231a0 <__ledf2>
81112ab0:	da003d17 	ldw	r8,244(sp)
81112ab4:	1005be16 	blt	r2,zero,811141b0 <___vfprintf_internal_r+0x1d24>
81112ab8:	df002783 	ldbu	fp,158(sp)
81112abc:	008011c4 	movi	r2,71
81112ac0:	1445330e 	bge	r2,r17,81113f90 <___vfprintf_internal_r+0x1b04>
81112ac4:	04204534 	movhi	r16,33044
81112ac8:	842e2304 	addi	r16,r16,-18292
81112acc:	00c000c4 	movi	r3,3
81112ad0:	00bfdfc4 	movi	r2,-129
81112ad4:	d8c02a15 	stw	r3,168(sp)
81112ad8:	90a4703a 	and	r18,r18,r2
81112adc:	d8c02e15 	stw	r3,184(sp)
81112ae0:	d8002915 	stw	zero,164(sp)
81112ae4:	d8003215 	stw	zero,200(sp)
81112ae8:	00003706 	br	81112bc8 <___vfprintf_internal_r+0x73c>
81112aec:	94800214 	ori	r18,r18,8
81112af0:	ac400007 	ldb	r17,0(r21)
81112af4:	003ec806 	br	81112618 <__reset+0xfb0f2618>
81112af8:	18c03fcc 	andi	r3,r3,255
81112afc:	1806db1e 	bne	r3,zero,8111466c <___vfprintf_internal_r+0x21e0>
81112b00:	94800414 	ori	r18,r18,16
81112b04:	9080080c 	andi	r2,r18,32
81112b08:	1002d826 	beq	r2,zero,8111366c <___vfprintf_internal_r+0x11e0>
81112b0c:	d9402d17 	ldw	r5,180(sp)
81112b10:	d8c02917 	ldw	r3,164(sp)
81112b14:	d8002785 	stb	zero,158(sp)
81112b18:	28800204 	addi	r2,r5,8
81112b1c:	2cc00017 	ldw	r19,0(r5)
81112b20:	2d800117 	ldw	r22,4(r5)
81112b24:	18048f16 	blt	r3,zero,81113d64 <___vfprintf_internal_r+0x18d8>
81112b28:	013fdfc4 	movi	r4,-129
81112b2c:	9d86b03a 	or	r3,r19,r22
81112b30:	d8802d15 	stw	r2,180(sp)
81112b34:	9124703a 	and	r18,r18,r4
81112b38:	1802d91e 	bne	r3,zero,811136a0 <___vfprintf_internal_r+0x1214>
81112b3c:	d8c02917 	ldw	r3,164(sp)
81112b40:	0039883a 	mov	fp,zero
81112b44:	1805c326 	beq	r3,zero,81114254 <___vfprintf_internal_r+0x1dc8>
81112b48:	0027883a 	mov	r19,zero
81112b4c:	002d883a 	mov	r22,zero
81112b50:	dc001e04 	addi	r16,sp,120
81112b54:	9806d0fa 	srli	r3,r19,3
81112b58:	b008977a 	slli	r4,r22,29
81112b5c:	b02cd0fa 	srli	r22,r22,3
81112b60:	9cc001cc 	andi	r19,r19,7
81112b64:	98800c04 	addi	r2,r19,48
81112b68:	843fffc4 	addi	r16,r16,-1
81112b6c:	20e6b03a 	or	r19,r4,r3
81112b70:	80800005 	stb	r2,0(r16)
81112b74:	9d86b03a 	or	r3,r19,r22
81112b78:	183ff61e 	bne	r3,zero,81112b54 <__reset+0xfb0f2b54>
81112b7c:	90c0004c 	andi	r3,r18,1
81112b80:	18013b26 	beq	r3,zero,81113070 <___vfprintf_internal_r+0xbe4>
81112b84:	10803fcc 	andi	r2,r2,255
81112b88:	1080201c 	xori	r2,r2,128
81112b8c:	10bfe004 	addi	r2,r2,-128
81112b90:	00c00c04 	movi	r3,48
81112b94:	10c13626 	beq	r2,r3,81113070 <___vfprintf_internal_r+0xbe4>
81112b98:	80ffffc5 	stb	r3,-1(r16)
81112b9c:	d8c02817 	ldw	r3,160(sp)
81112ba0:	80bfffc4 	addi	r2,r16,-1
81112ba4:	1021883a 	mov	r16,r2
81112ba8:	1887c83a 	sub	r3,r3,r2
81112bac:	d8c02e15 	stw	r3,184(sp)
81112bb0:	d8802e17 	ldw	r2,184(sp)
81112bb4:	d9002917 	ldw	r4,164(sp)
81112bb8:	1100010e 	bge	r2,r4,81112bc0 <___vfprintf_internal_r+0x734>
81112bbc:	2005883a 	mov	r2,r4
81112bc0:	d8802a15 	stw	r2,168(sp)
81112bc4:	d8003215 	stw	zero,200(sp)
81112bc8:	e7003fcc 	andi	fp,fp,255
81112bcc:	e700201c 	xori	fp,fp,128
81112bd0:	e73fe004 	addi	fp,fp,-128
81112bd4:	e0000326 	beq	fp,zero,81112be4 <___vfprintf_internal_r+0x758>
81112bd8:	d8c02a17 	ldw	r3,168(sp)
81112bdc:	18c00044 	addi	r3,r3,1
81112be0:	d8c02a15 	stw	r3,168(sp)
81112be4:	90c0008c 	andi	r3,r18,2
81112be8:	d8c02b15 	stw	r3,172(sp)
81112bec:	18000326 	beq	r3,zero,81112bfc <___vfprintf_internal_r+0x770>
81112bf0:	d8c02a17 	ldw	r3,168(sp)
81112bf4:	18c00084 	addi	r3,r3,2
81112bf8:	d8c02a15 	stw	r3,168(sp)
81112bfc:	90c0210c 	andi	r3,r18,132
81112c00:	d8c03015 	stw	r3,192(sp)
81112c04:	1801a31e 	bne	r3,zero,81113294 <___vfprintf_internal_r+0xe08>
81112c08:	d9003117 	ldw	r4,196(sp)
81112c0c:	d8c02a17 	ldw	r3,168(sp)
81112c10:	20e7c83a 	sub	r19,r4,r3
81112c14:	04c19f0e 	bge	zero,r19,81113294 <___vfprintf_internal_r+0xe08>
81112c18:	02400404 	movi	r9,16
81112c1c:	d8c02017 	ldw	r3,128(sp)
81112c20:	d8801f17 	ldw	r2,124(sp)
81112c24:	4cc50d0e 	bge	r9,r19,8111405c <___vfprintf_internal_r+0x1bd0>
81112c28:	01604534 	movhi	r5,33044
81112c2c:	296e3e84 	addi	r5,r5,-18182
81112c30:	dc403b15 	stw	r17,236(sp)
81112c34:	d9403515 	stw	r5,212(sp)
81112c38:	9823883a 	mov	r17,r19
81112c3c:	482d883a 	mov	r22,r9
81112c40:	9027883a 	mov	r19,r18
81112c44:	070001c4 	movi	fp,7
81112c48:	8025883a 	mov	r18,r16
81112c4c:	dc002c17 	ldw	r16,176(sp)
81112c50:	00000306 	br	81112c60 <___vfprintf_internal_r+0x7d4>
81112c54:	8c7ffc04 	addi	r17,r17,-16
81112c58:	42000204 	addi	r8,r8,8
81112c5c:	b440130e 	bge	r22,r17,81112cac <___vfprintf_internal_r+0x820>
81112c60:	01204534 	movhi	r4,33044
81112c64:	18c00404 	addi	r3,r3,16
81112c68:	10800044 	addi	r2,r2,1
81112c6c:	212e3e84 	addi	r4,r4,-18182
81112c70:	41000015 	stw	r4,0(r8)
81112c74:	45800115 	stw	r22,4(r8)
81112c78:	d8c02015 	stw	r3,128(sp)
81112c7c:	d8801f15 	stw	r2,124(sp)
81112c80:	e0bff40e 	bge	fp,r2,81112c54 <__reset+0xfb0f2c54>
81112c84:	d9801e04 	addi	r6,sp,120
81112c88:	b80b883a 	mov	r5,r23
81112c8c:	8009883a 	mov	r4,r16
81112c90:	111e6940 	call	8111e694 <__sprint_r>
81112c94:	103f011e 	bne	r2,zero,8111289c <__reset+0xfb0f289c>
81112c98:	8c7ffc04 	addi	r17,r17,-16
81112c9c:	d8c02017 	ldw	r3,128(sp)
81112ca0:	d8801f17 	ldw	r2,124(sp)
81112ca4:	da000404 	addi	r8,sp,16
81112ca8:	b47fed16 	blt	r22,r17,81112c60 <__reset+0xfb0f2c60>
81112cac:	9021883a 	mov	r16,r18
81112cb0:	9825883a 	mov	r18,r19
81112cb4:	8827883a 	mov	r19,r17
81112cb8:	dc403b17 	ldw	r17,236(sp)
81112cbc:	d9403517 	ldw	r5,212(sp)
81112cc0:	98c7883a 	add	r3,r19,r3
81112cc4:	10800044 	addi	r2,r2,1
81112cc8:	41400015 	stw	r5,0(r8)
81112ccc:	44c00115 	stw	r19,4(r8)
81112cd0:	d8c02015 	stw	r3,128(sp)
81112cd4:	d8801f15 	stw	r2,124(sp)
81112cd8:	010001c4 	movi	r4,7
81112cdc:	2082a316 	blt	r4,r2,8111376c <___vfprintf_internal_r+0x12e0>
81112ce0:	df002787 	ldb	fp,158(sp)
81112ce4:	42000204 	addi	r8,r8,8
81112ce8:	e0000c26 	beq	fp,zero,81112d1c <___vfprintf_internal_r+0x890>
81112cec:	d8801f17 	ldw	r2,124(sp)
81112cf0:	d9002784 	addi	r4,sp,158
81112cf4:	18c00044 	addi	r3,r3,1
81112cf8:	10800044 	addi	r2,r2,1
81112cfc:	41000015 	stw	r4,0(r8)
81112d00:	01000044 	movi	r4,1
81112d04:	41000115 	stw	r4,4(r8)
81112d08:	d8c02015 	stw	r3,128(sp)
81112d0c:	d8801f15 	stw	r2,124(sp)
81112d10:	010001c4 	movi	r4,7
81112d14:	20823c16 	blt	r4,r2,81113608 <___vfprintf_internal_r+0x117c>
81112d18:	42000204 	addi	r8,r8,8
81112d1c:	d8802b17 	ldw	r2,172(sp)
81112d20:	10000c26 	beq	r2,zero,81112d54 <___vfprintf_internal_r+0x8c8>
81112d24:	d8801f17 	ldw	r2,124(sp)
81112d28:	d9002704 	addi	r4,sp,156
81112d2c:	18c00084 	addi	r3,r3,2
81112d30:	10800044 	addi	r2,r2,1
81112d34:	41000015 	stw	r4,0(r8)
81112d38:	01000084 	movi	r4,2
81112d3c:	41000115 	stw	r4,4(r8)
81112d40:	d8c02015 	stw	r3,128(sp)
81112d44:	d8801f15 	stw	r2,124(sp)
81112d48:	010001c4 	movi	r4,7
81112d4c:	20823616 	blt	r4,r2,81113628 <___vfprintf_internal_r+0x119c>
81112d50:	42000204 	addi	r8,r8,8
81112d54:	d9003017 	ldw	r4,192(sp)
81112d58:	00802004 	movi	r2,128
81112d5c:	20819926 	beq	r4,r2,811133c4 <___vfprintf_internal_r+0xf38>
81112d60:	d9402917 	ldw	r5,164(sp)
81112d64:	d8802e17 	ldw	r2,184(sp)
81112d68:	28adc83a 	sub	r22,r5,r2
81112d6c:	0580310e 	bge	zero,r22,81112e34 <___vfprintf_internal_r+0x9a8>
81112d70:	07000404 	movi	fp,16
81112d74:	d8801f17 	ldw	r2,124(sp)
81112d78:	e584140e 	bge	fp,r22,81113dcc <___vfprintf_internal_r+0x1940>
81112d7c:	01604534 	movhi	r5,33044
81112d80:	296e3a84 	addi	r5,r5,-18198
81112d84:	dc402915 	stw	r17,164(sp)
81112d88:	d9402b15 	stw	r5,172(sp)
81112d8c:	b023883a 	mov	r17,r22
81112d90:	04c001c4 	movi	r19,7
81112d94:	a82d883a 	mov	r22,r21
81112d98:	902b883a 	mov	r21,r18
81112d9c:	8025883a 	mov	r18,r16
81112da0:	dc002c17 	ldw	r16,176(sp)
81112da4:	00000306 	br	81112db4 <___vfprintf_internal_r+0x928>
81112da8:	8c7ffc04 	addi	r17,r17,-16
81112dac:	42000204 	addi	r8,r8,8
81112db0:	e440110e 	bge	fp,r17,81112df8 <___vfprintf_internal_r+0x96c>
81112db4:	18c00404 	addi	r3,r3,16
81112db8:	10800044 	addi	r2,r2,1
81112dbc:	45000015 	stw	r20,0(r8)
81112dc0:	47000115 	stw	fp,4(r8)
81112dc4:	d8c02015 	stw	r3,128(sp)
81112dc8:	d8801f15 	stw	r2,124(sp)
81112dcc:	98bff60e 	bge	r19,r2,81112da8 <__reset+0xfb0f2da8>
81112dd0:	d9801e04 	addi	r6,sp,120
81112dd4:	b80b883a 	mov	r5,r23
81112dd8:	8009883a 	mov	r4,r16
81112ddc:	111e6940 	call	8111e694 <__sprint_r>
81112de0:	103eae1e 	bne	r2,zero,8111289c <__reset+0xfb0f289c>
81112de4:	8c7ffc04 	addi	r17,r17,-16
81112de8:	d8c02017 	ldw	r3,128(sp)
81112dec:	d8801f17 	ldw	r2,124(sp)
81112df0:	da000404 	addi	r8,sp,16
81112df4:	e47fef16 	blt	fp,r17,81112db4 <__reset+0xfb0f2db4>
81112df8:	9021883a 	mov	r16,r18
81112dfc:	a825883a 	mov	r18,r21
81112e00:	b02b883a 	mov	r21,r22
81112e04:	882d883a 	mov	r22,r17
81112e08:	dc402917 	ldw	r17,164(sp)
81112e0c:	d9002b17 	ldw	r4,172(sp)
81112e10:	1d87883a 	add	r3,r3,r22
81112e14:	10800044 	addi	r2,r2,1
81112e18:	41000015 	stw	r4,0(r8)
81112e1c:	45800115 	stw	r22,4(r8)
81112e20:	d8c02015 	stw	r3,128(sp)
81112e24:	d8801f15 	stw	r2,124(sp)
81112e28:	010001c4 	movi	r4,7
81112e2c:	2081ee16 	blt	r4,r2,811135e8 <___vfprintf_internal_r+0x115c>
81112e30:	42000204 	addi	r8,r8,8
81112e34:	9080400c 	andi	r2,r18,256
81112e38:	1001181e 	bne	r2,zero,8111329c <___vfprintf_internal_r+0xe10>
81112e3c:	d9402e17 	ldw	r5,184(sp)
81112e40:	d8801f17 	ldw	r2,124(sp)
81112e44:	44000015 	stw	r16,0(r8)
81112e48:	1947883a 	add	r3,r3,r5
81112e4c:	10800044 	addi	r2,r2,1
81112e50:	41400115 	stw	r5,4(r8)
81112e54:	d8c02015 	stw	r3,128(sp)
81112e58:	d8801f15 	stw	r2,124(sp)
81112e5c:	010001c4 	movi	r4,7
81112e60:	2081d316 	blt	r4,r2,811135b0 <___vfprintf_internal_r+0x1124>
81112e64:	42000204 	addi	r8,r8,8
81112e68:	9480010c 	andi	r18,r18,4
81112e6c:	90003226 	beq	r18,zero,81112f38 <___vfprintf_internal_r+0xaac>
81112e70:	d9403117 	ldw	r5,196(sp)
81112e74:	d8802a17 	ldw	r2,168(sp)
81112e78:	28a1c83a 	sub	r16,r5,r2
81112e7c:	04002e0e 	bge	zero,r16,81112f38 <___vfprintf_internal_r+0xaac>
81112e80:	04400404 	movi	r17,16
81112e84:	d8801f17 	ldw	r2,124(sp)
81112e88:	8c04a20e 	bge	r17,r16,81114114 <___vfprintf_internal_r+0x1c88>
81112e8c:	01604534 	movhi	r5,33044
81112e90:	296e3e84 	addi	r5,r5,-18182
81112e94:	d9403515 	stw	r5,212(sp)
81112e98:	048001c4 	movi	r18,7
81112e9c:	dcc02c17 	ldw	r19,176(sp)
81112ea0:	00000306 	br	81112eb0 <___vfprintf_internal_r+0xa24>
81112ea4:	843ffc04 	addi	r16,r16,-16
81112ea8:	42000204 	addi	r8,r8,8
81112eac:	8c00130e 	bge	r17,r16,81112efc <___vfprintf_internal_r+0xa70>
81112eb0:	01204534 	movhi	r4,33044
81112eb4:	18c00404 	addi	r3,r3,16
81112eb8:	10800044 	addi	r2,r2,1
81112ebc:	212e3e84 	addi	r4,r4,-18182
81112ec0:	41000015 	stw	r4,0(r8)
81112ec4:	44400115 	stw	r17,4(r8)
81112ec8:	d8c02015 	stw	r3,128(sp)
81112ecc:	d8801f15 	stw	r2,124(sp)
81112ed0:	90bff40e 	bge	r18,r2,81112ea4 <__reset+0xfb0f2ea4>
81112ed4:	d9801e04 	addi	r6,sp,120
81112ed8:	b80b883a 	mov	r5,r23
81112edc:	9809883a 	mov	r4,r19
81112ee0:	111e6940 	call	8111e694 <__sprint_r>
81112ee4:	103e6d1e 	bne	r2,zero,8111289c <__reset+0xfb0f289c>
81112ee8:	843ffc04 	addi	r16,r16,-16
81112eec:	d8c02017 	ldw	r3,128(sp)
81112ef0:	d8801f17 	ldw	r2,124(sp)
81112ef4:	da000404 	addi	r8,sp,16
81112ef8:	8c3fed16 	blt	r17,r16,81112eb0 <__reset+0xfb0f2eb0>
81112efc:	d9403517 	ldw	r5,212(sp)
81112f00:	1c07883a 	add	r3,r3,r16
81112f04:	10800044 	addi	r2,r2,1
81112f08:	41400015 	stw	r5,0(r8)
81112f0c:	44000115 	stw	r16,4(r8)
81112f10:	d8c02015 	stw	r3,128(sp)
81112f14:	d8801f15 	stw	r2,124(sp)
81112f18:	010001c4 	movi	r4,7
81112f1c:	2080060e 	bge	r4,r2,81112f38 <___vfprintf_internal_r+0xaac>
81112f20:	d9002c17 	ldw	r4,176(sp)
81112f24:	d9801e04 	addi	r6,sp,120
81112f28:	b80b883a 	mov	r5,r23
81112f2c:	111e6940 	call	8111e694 <__sprint_r>
81112f30:	103e5a1e 	bne	r2,zero,8111289c <__reset+0xfb0f289c>
81112f34:	d8c02017 	ldw	r3,128(sp)
81112f38:	d8803117 	ldw	r2,196(sp)
81112f3c:	d9002a17 	ldw	r4,168(sp)
81112f40:	1100010e 	bge	r2,r4,81112f48 <___vfprintf_internal_r+0xabc>
81112f44:	2005883a 	mov	r2,r4
81112f48:	d9402f17 	ldw	r5,188(sp)
81112f4c:	288b883a 	add	r5,r5,r2
81112f50:	d9402f15 	stw	r5,188(sp)
81112f54:	18019e1e 	bne	r3,zero,811135d0 <___vfprintf_internal_r+0x1144>
81112f58:	a8800007 	ldb	r2,0(r21)
81112f5c:	d8001f15 	stw	zero,124(sp)
81112f60:	da000404 	addi	r8,sp,16
81112f64:	103d851e 	bne	r2,zero,8111257c <__reset+0xfb0f257c>
81112f68:	a821883a 	mov	r16,r21
81112f6c:	003d9b06 	br	811125dc <__reset+0xfb0f25dc>
81112f70:	18c03fcc 	andi	r3,r3,255
81112f74:	1805c11e 	bne	r3,zero,8111467c <___vfprintf_internal_r+0x21f0>
81112f78:	94800414 	ori	r18,r18,16
81112f7c:	9080080c 	andi	r2,r18,32
81112f80:	10020c26 	beq	r2,zero,811137b4 <___vfprintf_internal_r+0x1328>
81112f84:	d8802d17 	ldw	r2,180(sp)
81112f88:	d9002917 	ldw	r4,164(sp)
81112f8c:	d8002785 	stb	zero,158(sp)
81112f90:	10c00204 	addi	r3,r2,8
81112f94:	14c00017 	ldw	r19,0(r2)
81112f98:	15800117 	ldw	r22,4(r2)
81112f9c:	20040f16 	blt	r4,zero,81113fdc <___vfprintf_internal_r+0x1b50>
81112fa0:	013fdfc4 	movi	r4,-129
81112fa4:	9d84b03a 	or	r2,r19,r22
81112fa8:	d8c02d15 	stw	r3,180(sp)
81112fac:	9124703a 	and	r18,r18,r4
81112fb0:	0039883a 	mov	fp,zero
81112fb4:	103e891e 	bne	r2,zero,811129dc <__reset+0xfb0f29dc>
81112fb8:	d9002917 	ldw	r4,164(sp)
81112fbc:	2002c11e 	bne	r4,zero,81113ac4 <___vfprintf_internal_r+0x1638>
81112fc0:	d8002915 	stw	zero,164(sp)
81112fc4:	d8002e15 	stw	zero,184(sp)
81112fc8:	dc001e04 	addi	r16,sp,120
81112fcc:	003ef806 	br	81112bb0 <__reset+0xfb0f2bb0>
81112fd0:	18c03fcc 	andi	r3,r3,255
81112fd4:	18059d1e 	bne	r3,zero,8111464c <___vfprintf_internal_r+0x21c0>
81112fd8:	01604534 	movhi	r5,33044
81112fdc:	296e2604 	addi	r5,r5,-18280
81112fe0:	d9403915 	stw	r5,228(sp)
81112fe4:	9080080c 	andi	r2,r18,32
81112fe8:	10005226 	beq	r2,zero,81113134 <___vfprintf_internal_r+0xca8>
81112fec:	d8802d17 	ldw	r2,180(sp)
81112ff0:	14c00017 	ldw	r19,0(r2)
81112ff4:	15800117 	ldw	r22,4(r2)
81112ff8:	10800204 	addi	r2,r2,8
81112ffc:	d8802d15 	stw	r2,180(sp)
81113000:	9080004c 	andi	r2,r18,1
81113004:	10019026 	beq	r2,zero,81113648 <___vfprintf_internal_r+0x11bc>
81113008:	9d84b03a 	or	r2,r19,r22
8111300c:	10036926 	beq	r2,zero,81113db4 <___vfprintf_internal_r+0x1928>
81113010:	d8c02917 	ldw	r3,164(sp)
81113014:	00800c04 	movi	r2,48
81113018:	d8802705 	stb	r2,156(sp)
8111301c:	dc402745 	stb	r17,157(sp)
81113020:	d8002785 	stb	zero,158(sp)
81113024:	90800094 	ori	r2,r18,2
81113028:	18045d16 	blt	r3,zero,811141a0 <___vfprintf_internal_r+0x1d14>
8111302c:	00bfdfc4 	movi	r2,-129
81113030:	90a4703a 	and	r18,r18,r2
81113034:	94800094 	ori	r18,r18,2
81113038:	0039883a 	mov	fp,zero
8111303c:	d9003917 	ldw	r4,228(sp)
81113040:	dc001e04 	addi	r16,sp,120
81113044:	988003cc 	andi	r2,r19,15
81113048:	b006973a 	slli	r3,r22,28
8111304c:	2085883a 	add	r2,r4,r2
81113050:	9826d13a 	srli	r19,r19,4
81113054:	10800003 	ldbu	r2,0(r2)
81113058:	b02cd13a 	srli	r22,r22,4
8111305c:	843fffc4 	addi	r16,r16,-1
81113060:	1ce6b03a 	or	r19,r3,r19
81113064:	80800005 	stb	r2,0(r16)
81113068:	9d84b03a 	or	r2,r19,r22
8111306c:	103ff51e 	bne	r2,zero,81113044 <__reset+0xfb0f3044>
81113070:	d8c02817 	ldw	r3,160(sp)
81113074:	1c07c83a 	sub	r3,r3,r16
81113078:	d8c02e15 	stw	r3,184(sp)
8111307c:	003ecc06 	br	81112bb0 <__reset+0xfb0f2bb0>
81113080:	18c03fcc 	andi	r3,r3,255
81113084:	183e9f26 	beq	r3,zero,81112b04 <__reset+0xfb0f2b04>
81113088:	d9c02785 	stb	r7,158(sp)
8111308c:	003e9d06 	br	81112b04 <__reset+0xfb0f2b04>
81113090:	00c00044 	movi	r3,1
81113094:	01c00ac4 	movi	r7,43
81113098:	ac400007 	ldb	r17,0(r21)
8111309c:	003d5e06 	br	81112618 <__reset+0xfb0f2618>
811130a0:	94800814 	ori	r18,r18,32
811130a4:	ac400007 	ldb	r17,0(r21)
811130a8:	003d5b06 	br	81112618 <__reset+0xfb0f2618>
811130ac:	d8c02d17 	ldw	r3,180(sp)
811130b0:	d8002785 	stb	zero,158(sp)
811130b4:	1c000017 	ldw	r16,0(r3)
811130b8:	1cc00104 	addi	r19,r3,4
811130bc:	80041926 	beq	r16,zero,81114124 <___vfprintf_internal_r+0x1c98>
811130c0:	d9002917 	ldw	r4,164(sp)
811130c4:	2003d016 	blt	r4,zero,81114008 <___vfprintf_internal_r+0x1b7c>
811130c8:	200d883a 	mov	r6,r4
811130cc:	000b883a 	mov	r5,zero
811130d0:	8009883a 	mov	r4,r16
811130d4:	da003d15 	stw	r8,244(sp)
811130d8:	11193100 	call	81119310 <memchr>
811130dc:	da003d17 	ldw	r8,244(sp)
811130e0:	10045426 	beq	r2,zero,81114234 <___vfprintf_internal_r+0x1da8>
811130e4:	1405c83a 	sub	r2,r2,r16
811130e8:	d8802e15 	stw	r2,184(sp)
811130ec:	1003cc16 	blt	r2,zero,81114020 <___vfprintf_internal_r+0x1b94>
811130f0:	df002783 	ldbu	fp,158(sp)
811130f4:	d8802a15 	stw	r2,168(sp)
811130f8:	dcc02d15 	stw	r19,180(sp)
811130fc:	d8002915 	stw	zero,164(sp)
81113100:	d8003215 	stw	zero,200(sp)
81113104:	003eb006 	br	81112bc8 <__reset+0xfb0f2bc8>
81113108:	18c03fcc 	andi	r3,r3,255
8111310c:	183f9b26 	beq	r3,zero,81112f7c <__reset+0xfb0f2f7c>
81113110:	d9c02785 	stb	r7,158(sp)
81113114:	003f9906 	br	81112f7c <__reset+0xfb0f2f7c>
81113118:	18c03fcc 	andi	r3,r3,255
8111311c:	1805551e 	bne	r3,zero,81114674 <___vfprintf_internal_r+0x21e8>
81113120:	01604534 	movhi	r5,33044
81113124:	296e2b04 	addi	r5,r5,-18260
81113128:	d9403915 	stw	r5,228(sp)
8111312c:	9080080c 	andi	r2,r18,32
81113130:	103fae1e 	bne	r2,zero,81112fec <__reset+0xfb0f2fec>
81113134:	9080040c 	andi	r2,r18,16
81113138:	1002de26 	beq	r2,zero,81113cb4 <___vfprintf_internal_r+0x1828>
8111313c:	d8c02d17 	ldw	r3,180(sp)
81113140:	002d883a 	mov	r22,zero
81113144:	1cc00017 	ldw	r19,0(r3)
81113148:	18c00104 	addi	r3,r3,4
8111314c:	d8c02d15 	stw	r3,180(sp)
81113150:	003fab06 	br	81113000 <__reset+0xfb0f3000>
81113154:	38803fcc 	andi	r2,r7,255
81113158:	1080201c 	xori	r2,r2,128
8111315c:	10bfe004 	addi	r2,r2,-128
81113160:	1002d21e 	bne	r2,zero,81113cac <___vfprintf_internal_r+0x1820>
81113164:	00c00044 	movi	r3,1
81113168:	01c00804 	movi	r7,32
8111316c:	ac400007 	ldb	r17,0(r21)
81113170:	003d2906 	br	81112618 <__reset+0xfb0f2618>
81113174:	94800054 	ori	r18,r18,1
81113178:	ac400007 	ldb	r17,0(r21)
8111317c:	003d2606 	br	81112618 <__reset+0xfb0f2618>
81113180:	18c03fcc 	andi	r3,r3,255
81113184:	183e0526 	beq	r3,zero,8111299c <__reset+0xfb0f299c>
81113188:	d9c02785 	stb	r7,158(sp)
8111318c:	003e0306 	br	8111299c <__reset+0xfb0f299c>
81113190:	94801014 	ori	r18,r18,64
81113194:	ac400007 	ldb	r17,0(r21)
81113198:	003d1f06 	br	81112618 <__reset+0xfb0f2618>
8111319c:	ac400007 	ldb	r17,0(r21)
811131a0:	8a438726 	beq	r17,r9,81113fc0 <___vfprintf_internal_r+0x1b34>
811131a4:	94800414 	ori	r18,r18,16
811131a8:	003d1b06 	br	81112618 <__reset+0xfb0f2618>
811131ac:	18c03fcc 	andi	r3,r3,255
811131b0:	1805341e 	bne	r3,zero,81114684 <___vfprintf_internal_r+0x21f8>
811131b4:	9080080c 	andi	r2,r18,32
811131b8:	1002cd26 	beq	r2,zero,81113cf0 <___vfprintf_internal_r+0x1864>
811131bc:	d9402d17 	ldw	r5,180(sp)
811131c0:	d9002f17 	ldw	r4,188(sp)
811131c4:	28800017 	ldw	r2,0(r5)
811131c8:	2007d7fa 	srai	r3,r4,31
811131cc:	29400104 	addi	r5,r5,4
811131d0:	d9402d15 	stw	r5,180(sp)
811131d4:	11000015 	stw	r4,0(r2)
811131d8:	10c00115 	stw	r3,4(r2)
811131dc:	003ce506 	br	81112574 <__reset+0xfb0f2574>
811131e0:	d8c02d17 	ldw	r3,180(sp)
811131e4:	d9002d17 	ldw	r4,180(sp)
811131e8:	d8002785 	stb	zero,158(sp)
811131ec:	18800017 	ldw	r2,0(r3)
811131f0:	21000104 	addi	r4,r4,4
811131f4:	00c00044 	movi	r3,1
811131f8:	d8c02a15 	stw	r3,168(sp)
811131fc:	d8801405 	stb	r2,80(sp)
81113200:	d9002d15 	stw	r4,180(sp)
81113204:	d8c02e15 	stw	r3,184(sp)
81113208:	d8002915 	stw	zero,164(sp)
8111320c:	d8003215 	stw	zero,200(sp)
81113210:	dc001404 	addi	r16,sp,80
81113214:	0039883a 	mov	fp,zero
81113218:	003e7206 	br	81112be4 <__reset+0xfb0f2be4>
8111321c:	01204534 	movhi	r4,33044
81113220:	212e2b04 	addi	r4,r4,-18260
81113224:	0039883a 	mov	fp,zero
81113228:	d9003915 	stw	r4,228(sp)
8111322c:	04401e04 	movi	r17,120
81113230:	003f8206 	br	8111303c <__reset+0xfb0f303c>
81113234:	18c03fcc 	andi	r3,r3,255
81113238:	1805061e 	bne	r3,zero,81114654 <___vfprintf_internal_r+0x21c8>
8111323c:	883d9126 	beq	r17,zero,81112884 <__reset+0xfb0f2884>
81113240:	00c00044 	movi	r3,1
81113244:	d8c02a15 	stw	r3,168(sp)
81113248:	dc401405 	stb	r17,80(sp)
8111324c:	d8002785 	stb	zero,158(sp)
81113250:	003fec06 	br	81113204 <__reset+0xfb0f3204>
81113254:	01604534 	movhi	r5,33044
81113258:	296e2b04 	addi	r5,r5,-18260
8111325c:	d9403915 	stw	r5,228(sp)
81113260:	d8c02d15 	stw	r3,180(sp)
81113264:	1025883a 	mov	r18,r2
81113268:	04401e04 	movi	r17,120
8111326c:	9d84b03a 	or	r2,r19,r22
81113270:	1000fc1e 	bne	r2,zero,81113664 <___vfprintf_internal_r+0x11d8>
81113274:	0039883a 	mov	fp,zero
81113278:	00800084 	movi	r2,2
8111327c:	10803fcc 	andi	r2,r2,255
81113280:	00c00044 	movi	r3,1
81113284:	10c20f26 	beq	r2,r3,81113ac4 <___vfprintf_internal_r+0x1638>
81113288:	00c00084 	movi	r3,2
8111328c:	10fd6326 	beq	r2,r3,8111281c <__reset+0xfb0f281c>
81113290:	003e2d06 	br	81112b48 <__reset+0xfb0f2b48>
81113294:	d8c02017 	ldw	r3,128(sp)
81113298:	003e9306 	br	81112ce8 <__reset+0xfb0f2ce8>
8111329c:	00801944 	movi	r2,101
811132a0:	14407e0e 	bge	r2,r17,8111349c <___vfprintf_internal_r+0x1010>
811132a4:	d9003617 	ldw	r4,216(sp)
811132a8:	d9403817 	ldw	r5,224(sp)
811132ac:	000d883a 	mov	r6,zero
811132b0:	000f883a 	mov	r7,zero
811132b4:	d8c03c15 	stw	r3,240(sp)
811132b8:	da003d15 	stw	r8,244(sp)
811132bc:	112303c0 	call	8112303c <__eqdf2>
811132c0:	d8c03c17 	ldw	r3,240(sp)
811132c4:	da003d17 	ldw	r8,244(sp)
811132c8:	1000f71e 	bne	r2,zero,811136a8 <___vfprintf_internal_r+0x121c>
811132cc:	d8801f17 	ldw	r2,124(sp)
811132d0:	01204534 	movhi	r4,33044
811132d4:	212e3204 	addi	r4,r4,-18232
811132d8:	18c00044 	addi	r3,r3,1
811132dc:	10800044 	addi	r2,r2,1
811132e0:	41000015 	stw	r4,0(r8)
811132e4:	01000044 	movi	r4,1
811132e8:	41000115 	stw	r4,4(r8)
811132ec:	d8c02015 	stw	r3,128(sp)
811132f0:	d8801f15 	stw	r2,124(sp)
811132f4:	010001c4 	movi	r4,7
811132f8:	2082b816 	blt	r4,r2,81113ddc <___vfprintf_internal_r+0x1950>
811132fc:	42000204 	addi	r8,r8,8
81113300:	d8802617 	ldw	r2,152(sp)
81113304:	d9403317 	ldw	r5,204(sp)
81113308:	11400216 	blt	r2,r5,81113314 <___vfprintf_internal_r+0xe88>
8111330c:	9080004c 	andi	r2,r18,1
81113310:	103ed526 	beq	r2,zero,81112e68 <__reset+0xfb0f2e68>
81113314:	d8803717 	ldw	r2,220(sp)
81113318:	d9003417 	ldw	r4,208(sp)
8111331c:	d9403717 	ldw	r5,220(sp)
81113320:	1887883a 	add	r3,r3,r2
81113324:	d8801f17 	ldw	r2,124(sp)
81113328:	41000015 	stw	r4,0(r8)
8111332c:	41400115 	stw	r5,4(r8)
81113330:	10800044 	addi	r2,r2,1
81113334:	d8c02015 	stw	r3,128(sp)
81113338:	d8801f15 	stw	r2,124(sp)
8111333c:	010001c4 	movi	r4,7
81113340:	20832916 	blt	r4,r2,81113fe8 <___vfprintf_internal_r+0x1b5c>
81113344:	42000204 	addi	r8,r8,8
81113348:	d8803317 	ldw	r2,204(sp)
8111334c:	143fffc4 	addi	r16,r2,-1
81113350:	043ec50e 	bge	zero,r16,81112e68 <__reset+0xfb0f2e68>
81113354:	04400404 	movi	r17,16
81113358:	d8801f17 	ldw	r2,124(sp)
8111335c:	8c00880e 	bge	r17,r16,81113580 <___vfprintf_internal_r+0x10f4>
81113360:	01604534 	movhi	r5,33044
81113364:	296e3a84 	addi	r5,r5,-18198
81113368:	d9402b15 	stw	r5,172(sp)
8111336c:	058001c4 	movi	r22,7
81113370:	dcc02c17 	ldw	r19,176(sp)
81113374:	00000306 	br	81113384 <___vfprintf_internal_r+0xef8>
81113378:	42000204 	addi	r8,r8,8
8111337c:	843ffc04 	addi	r16,r16,-16
81113380:	8c00820e 	bge	r17,r16,8111358c <___vfprintf_internal_r+0x1100>
81113384:	18c00404 	addi	r3,r3,16
81113388:	10800044 	addi	r2,r2,1
8111338c:	45000015 	stw	r20,0(r8)
81113390:	44400115 	stw	r17,4(r8)
81113394:	d8c02015 	stw	r3,128(sp)
81113398:	d8801f15 	stw	r2,124(sp)
8111339c:	b0bff60e 	bge	r22,r2,81113378 <__reset+0xfb0f3378>
811133a0:	d9801e04 	addi	r6,sp,120
811133a4:	b80b883a 	mov	r5,r23
811133a8:	9809883a 	mov	r4,r19
811133ac:	111e6940 	call	8111e694 <__sprint_r>
811133b0:	103d3a1e 	bne	r2,zero,8111289c <__reset+0xfb0f289c>
811133b4:	d8c02017 	ldw	r3,128(sp)
811133b8:	d8801f17 	ldw	r2,124(sp)
811133bc:	da000404 	addi	r8,sp,16
811133c0:	003fee06 	br	8111337c <__reset+0xfb0f337c>
811133c4:	d9403117 	ldw	r5,196(sp)
811133c8:	d8802a17 	ldw	r2,168(sp)
811133cc:	28adc83a 	sub	r22,r5,r2
811133d0:	05be630e 	bge	zero,r22,81112d60 <__reset+0xfb0f2d60>
811133d4:	07000404 	movi	fp,16
811133d8:	d8801f17 	ldw	r2,124(sp)
811133dc:	e5838f0e 	bge	fp,r22,8111421c <___vfprintf_internal_r+0x1d90>
811133e0:	01604534 	movhi	r5,33044
811133e4:	296e3a84 	addi	r5,r5,-18198
811133e8:	dc403015 	stw	r17,192(sp)
811133ec:	d9402b15 	stw	r5,172(sp)
811133f0:	b023883a 	mov	r17,r22
811133f4:	04c001c4 	movi	r19,7
811133f8:	a82d883a 	mov	r22,r21
811133fc:	902b883a 	mov	r21,r18
81113400:	8025883a 	mov	r18,r16
81113404:	dc002c17 	ldw	r16,176(sp)
81113408:	00000306 	br	81113418 <___vfprintf_internal_r+0xf8c>
8111340c:	8c7ffc04 	addi	r17,r17,-16
81113410:	42000204 	addi	r8,r8,8
81113414:	e440110e 	bge	fp,r17,8111345c <___vfprintf_internal_r+0xfd0>
81113418:	18c00404 	addi	r3,r3,16
8111341c:	10800044 	addi	r2,r2,1
81113420:	45000015 	stw	r20,0(r8)
81113424:	47000115 	stw	fp,4(r8)
81113428:	d8c02015 	stw	r3,128(sp)
8111342c:	d8801f15 	stw	r2,124(sp)
81113430:	98bff60e 	bge	r19,r2,8111340c <__reset+0xfb0f340c>
81113434:	d9801e04 	addi	r6,sp,120
81113438:	b80b883a 	mov	r5,r23
8111343c:	8009883a 	mov	r4,r16
81113440:	111e6940 	call	8111e694 <__sprint_r>
81113444:	103d151e 	bne	r2,zero,8111289c <__reset+0xfb0f289c>
81113448:	8c7ffc04 	addi	r17,r17,-16
8111344c:	d8c02017 	ldw	r3,128(sp)
81113450:	d8801f17 	ldw	r2,124(sp)
81113454:	da000404 	addi	r8,sp,16
81113458:	e47fef16 	blt	fp,r17,81113418 <__reset+0xfb0f3418>
8111345c:	9021883a 	mov	r16,r18
81113460:	a825883a 	mov	r18,r21
81113464:	b02b883a 	mov	r21,r22
81113468:	882d883a 	mov	r22,r17
8111346c:	dc403017 	ldw	r17,192(sp)
81113470:	d9002b17 	ldw	r4,172(sp)
81113474:	1d87883a 	add	r3,r3,r22
81113478:	10800044 	addi	r2,r2,1
8111347c:	41000015 	stw	r4,0(r8)
81113480:	45800115 	stw	r22,4(r8)
81113484:	d8c02015 	stw	r3,128(sp)
81113488:	d8801f15 	stw	r2,124(sp)
8111348c:	010001c4 	movi	r4,7
81113490:	20818e16 	blt	r4,r2,81113acc <___vfprintf_internal_r+0x1640>
81113494:	42000204 	addi	r8,r8,8
81113498:	003e3106 	br	81112d60 <__reset+0xfb0f2d60>
8111349c:	d9403317 	ldw	r5,204(sp)
811134a0:	00800044 	movi	r2,1
811134a4:	18c00044 	addi	r3,r3,1
811134a8:	1141530e 	bge	r2,r5,811139f8 <___vfprintf_internal_r+0x156c>
811134ac:	dc401f17 	ldw	r17,124(sp)
811134b0:	00800044 	movi	r2,1
811134b4:	40800115 	stw	r2,4(r8)
811134b8:	8c400044 	addi	r17,r17,1
811134bc:	44000015 	stw	r16,0(r8)
811134c0:	d8c02015 	stw	r3,128(sp)
811134c4:	dc401f15 	stw	r17,124(sp)
811134c8:	008001c4 	movi	r2,7
811134cc:	14416b16 	blt	r2,r17,81113a7c <___vfprintf_internal_r+0x15f0>
811134d0:	42000204 	addi	r8,r8,8
811134d4:	d8803717 	ldw	r2,220(sp)
811134d8:	d9003417 	ldw	r4,208(sp)
811134dc:	8c400044 	addi	r17,r17,1
811134e0:	10c7883a 	add	r3,r2,r3
811134e4:	40800115 	stw	r2,4(r8)
811134e8:	41000015 	stw	r4,0(r8)
811134ec:	d8c02015 	stw	r3,128(sp)
811134f0:	dc401f15 	stw	r17,124(sp)
811134f4:	008001c4 	movi	r2,7
811134f8:	14416916 	blt	r2,r17,81113aa0 <___vfprintf_internal_r+0x1614>
811134fc:	45800204 	addi	r22,r8,8
81113500:	d9003617 	ldw	r4,216(sp)
81113504:	d9403817 	ldw	r5,224(sp)
81113508:	000d883a 	mov	r6,zero
8111350c:	000f883a 	mov	r7,zero
81113510:	d8c03c15 	stw	r3,240(sp)
81113514:	112303c0 	call	8112303c <__eqdf2>
81113518:	d8c03c17 	ldw	r3,240(sp)
8111351c:	1000bc26 	beq	r2,zero,81113810 <___vfprintf_internal_r+0x1384>
81113520:	d9403317 	ldw	r5,204(sp)
81113524:	84000044 	addi	r16,r16,1
81113528:	8c400044 	addi	r17,r17,1
8111352c:	28bfffc4 	addi	r2,r5,-1
81113530:	1887883a 	add	r3,r3,r2
81113534:	b0800115 	stw	r2,4(r22)
81113538:	b4000015 	stw	r16,0(r22)
8111353c:	d8c02015 	stw	r3,128(sp)
81113540:	dc401f15 	stw	r17,124(sp)
81113544:	008001c4 	movi	r2,7
81113548:	14414316 	blt	r2,r17,81113a58 <___vfprintf_internal_r+0x15cc>
8111354c:	b5800204 	addi	r22,r22,8
81113550:	d9003a17 	ldw	r4,232(sp)
81113554:	df0022c4 	addi	fp,sp,139
81113558:	8c400044 	addi	r17,r17,1
8111355c:	20c7883a 	add	r3,r4,r3
81113560:	b7000015 	stw	fp,0(r22)
81113564:	b1000115 	stw	r4,4(r22)
81113568:	d8c02015 	stw	r3,128(sp)
8111356c:	dc401f15 	stw	r17,124(sp)
81113570:	008001c4 	movi	r2,7
81113574:	14400e16 	blt	r2,r17,811135b0 <___vfprintf_internal_r+0x1124>
81113578:	b2000204 	addi	r8,r22,8
8111357c:	003e3a06 	br	81112e68 <__reset+0xfb0f2e68>
81113580:	01204534 	movhi	r4,33044
81113584:	212e3a84 	addi	r4,r4,-18198
81113588:	d9002b15 	stw	r4,172(sp)
8111358c:	d9002b17 	ldw	r4,172(sp)
81113590:	1c07883a 	add	r3,r3,r16
81113594:	44000115 	stw	r16,4(r8)
81113598:	41000015 	stw	r4,0(r8)
8111359c:	10800044 	addi	r2,r2,1
811135a0:	d8c02015 	stw	r3,128(sp)
811135a4:	d8801f15 	stw	r2,124(sp)
811135a8:	010001c4 	movi	r4,7
811135ac:	20be2d0e 	bge	r4,r2,81112e64 <__reset+0xfb0f2e64>
811135b0:	d9002c17 	ldw	r4,176(sp)
811135b4:	d9801e04 	addi	r6,sp,120
811135b8:	b80b883a 	mov	r5,r23
811135bc:	111e6940 	call	8111e694 <__sprint_r>
811135c0:	103cb61e 	bne	r2,zero,8111289c <__reset+0xfb0f289c>
811135c4:	d8c02017 	ldw	r3,128(sp)
811135c8:	da000404 	addi	r8,sp,16
811135cc:	003e2606 	br	81112e68 <__reset+0xfb0f2e68>
811135d0:	d9002c17 	ldw	r4,176(sp)
811135d4:	d9801e04 	addi	r6,sp,120
811135d8:	b80b883a 	mov	r5,r23
811135dc:	111e6940 	call	8111e694 <__sprint_r>
811135e0:	103e5d26 	beq	r2,zero,81112f58 <__reset+0xfb0f2f58>
811135e4:	003cad06 	br	8111289c <__reset+0xfb0f289c>
811135e8:	d9002c17 	ldw	r4,176(sp)
811135ec:	d9801e04 	addi	r6,sp,120
811135f0:	b80b883a 	mov	r5,r23
811135f4:	111e6940 	call	8111e694 <__sprint_r>
811135f8:	103ca81e 	bne	r2,zero,8111289c <__reset+0xfb0f289c>
811135fc:	d8c02017 	ldw	r3,128(sp)
81113600:	da000404 	addi	r8,sp,16
81113604:	003e0b06 	br	81112e34 <__reset+0xfb0f2e34>
81113608:	d9002c17 	ldw	r4,176(sp)
8111360c:	d9801e04 	addi	r6,sp,120
81113610:	b80b883a 	mov	r5,r23
81113614:	111e6940 	call	8111e694 <__sprint_r>
81113618:	103ca01e 	bne	r2,zero,8111289c <__reset+0xfb0f289c>
8111361c:	d8c02017 	ldw	r3,128(sp)
81113620:	da000404 	addi	r8,sp,16
81113624:	003dbd06 	br	81112d1c <__reset+0xfb0f2d1c>
81113628:	d9002c17 	ldw	r4,176(sp)
8111362c:	d9801e04 	addi	r6,sp,120
81113630:	b80b883a 	mov	r5,r23
81113634:	111e6940 	call	8111e694 <__sprint_r>
81113638:	103c981e 	bne	r2,zero,8111289c <__reset+0xfb0f289c>
8111363c:	d8c02017 	ldw	r3,128(sp)
81113640:	da000404 	addi	r8,sp,16
81113644:	003dc306 	br	81112d54 <__reset+0xfb0f2d54>
81113648:	d8802917 	ldw	r2,164(sp)
8111364c:	d8002785 	stb	zero,158(sp)
81113650:	103f0616 	blt	r2,zero,8111326c <__reset+0xfb0f326c>
81113654:	00ffdfc4 	movi	r3,-129
81113658:	9d84b03a 	or	r2,r19,r22
8111365c:	90e4703a 	and	r18,r18,r3
81113660:	103c6b26 	beq	r2,zero,81112810 <__reset+0xfb0f2810>
81113664:	0039883a 	mov	fp,zero
81113668:	003e7406 	br	8111303c <__reset+0xfb0f303c>
8111366c:	9080040c 	andi	r2,r18,16
81113670:	1001b326 	beq	r2,zero,81113d40 <___vfprintf_internal_r+0x18b4>
81113674:	d9002d17 	ldw	r4,180(sp)
81113678:	d9402917 	ldw	r5,164(sp)
8111367c:	d8002785 	stb	zero,158(sp)
81113680:	20800104 	addi	r2,r4,4
81113684:	24c00017 	ldw	r19,0(r4)
81113688:	002d883a 	mov	r22,zero
8111368c:	2801b516 	blt	r5,zero,81113d64 <___vfprintf_internal_r+0x18d8>
81113690:	00ffdfc4 	movi	r3,-129
81113694:	d8802d15 	stw	r2,180(sp)
81113698:	90e4703a 	and	r18,r18,r3
8111369c:	983d2726 	beq	r19,zero,81112b3c <__reset+0xfb0f2b3c>
811136a0:	0039883a 	mov	fp,zero
811136a4:	003d2a06 	br	81112b50 <__reset+0xfb0f2b50>
811136a8:	dc402617 	ldw	r17,152(sp)
811136ac:	0441d30e 	bge	zero,r17,81113dfc <___vfprintf_internal_r+0x1970>
811136b0:	dc403217 	ldw	r17,200(sp)
811136b4:	d8803317 	ldw	r2,204(sp)
811136b8:	1440010e 	bge	r2,r17,811136c0 <___vfprintf_internal_r+0x1234>
811136bc:	1023883a 	mov	r17,r2
811136c0:	04400a0e 	bge	zero,r17,811136ec <___vfprintf_internal_r+0x1260>
811136c4:	d8801f17 	ldw	r2,124(sp)
811136c8:	1c47883a 	add	r3,r3,r17
811136cc:	44000015 	stw	r16,0(r8)
811136d0:	10800044 	addi	r2,r2,1
811136d4:	44400115 	stw	r17,4(r8)
811136d8:	d8c02015 	stw	r3,128(sp)
811136dc:	d8801f15 	stw	r2,124(sp)
811136e0:	010001c4 	movi	r4,7
811136e4:	20826516 	blt	r4,r2,8111407c <___vfprintf_internal_r+0x1bf0>
811136e8:	42000204 	addi	r8,r8,8
811136ec:	88026116 	blt	r17,zero,81114074 <___vfprintf_internal_r+0x1be8>
811136f0:	d9003217 	ldw	r4,200(sp)
811136f4:	2463c83a 	sub	r17,r4,r17
811136f8:	04407b0e 	bge	zero,r17,811138e8 <___vfprintf_internal_r+0x145c>
811136fc:	05800404 	movi	r22,16
81113700:	d8801f17 	ldw	r2,124(sp)
81113704:	b4419d0e 	bge	r22,r17,81113d7c <___vfprintf_internal_r+0x18f0>
81113708:	01204534 	movhi	r4,33044
8111370c:	212e3a84 	addi	r4,r4,-18198
81113710:	d9002b15 	stw	r4,172(sp)
81113714:	070001c4 	movi	fp,7
81113718:	dcc02c17 	ldw	r19,176(sp)
8111371c:	00000306 	br	8111372c <___vfprintf_internal_r+0x12a0>
81113720:	42000204 	addi	r8,r8,8
81113724:	8c7ffc04 	addi	r17,r17,-16
81113728:	b441970e 	bge	r22,r17,81113d88 <___vfprintf_internal_r+0x18fc>
8111372c:	18c00404 	addi	r3,r3,16
81113730:	10800044 	addi	r2,r2,1
81113734:	45000015 	stw	r20,0(r8)
81113738:	45800115 	stw	r22,4(r8)
8111373c:	d8c02015 	stw	r3,128(sp)
81113740:	d8801f15 	stw	r2,124(sp)
81113744:	e0bff60e 	bge	fp,r2,81113720 <__reset+0xfb0f3720>
81113748:	d9801e04 	addi	r6,sp,120
8111374c:	b80b883a 	mov	r5,r23
81113750:	9809883a 	mov	r4,r19
81113754:	111e6940 	call	8111e694 <__sprint_r>
81113758:	103c501e 	bne	r2,zero,8111289c <__reset+0xfb0f289c>
8111375c:	d8c02017 	ldw	r3,128(sp)
81113760:	d8801f17 	ldw	r2,124(sp)
81113764:	da000404 	addi	r8,sp,16
81113768:	003fee06 	br	81113724 <__reset+0xfb0f3724>
8111376c:	d9002c17 	ldw	r4,176(sp)
81113770:	d9801e04 	addi	r6,sp,120
81113774:	b80b883a 	mov	r5,r23
81113778:	111e6940 	call	8111e694 <__sprint_r>
8111377c:	103c471e 	bne	r2,zero,8111289c <__reset+0xfb0f289c>
81113780:	d8c02017 	ldw	r3,128(sp)
81113784:	df002787 	ldb	fp,158(sp)
81113788:	da000404 	addi	r8,sp,16
8111378c:	003d5606 	br	81112ce8 <__reset+0xfb0f2ce8>
81113790:	9080040c 	andi	r2,r18,16
81113794:	10016126 	beq	r2,zero,81113d1c <___vfprintf_internal_r+0x1890>
81113798:	d8802d17 	ldw	r2,180(sp)
8111379c:	14c00017 	ldw	r19,0(r2)
811137a0:	10800104 	addi	r2,r2,4
811137a4:	d8802d15 	stw	r2,180(sp)
811137a8:	982dd7fa 	srai	r22,r19,31
811137ac:	b005883a 	mov	r2,r22
811137b0:	003c8206 	br	811129bc <__reset+0xfb0f29bc>
811137b4:	9080040c 	andi	r2,r18,16
811137b8:	10003526 	beq	r2,zero,81113890 <___vfprintf_internal_r+0x1404>
811137bc:	d9402d17 	ldw	r5,180(sp)
811137c0:	d8c02917 	ldw	r3,164(sp)
811137c4:	d8002785 	stb	zero,158(sp)
811137c8:	28800104 	addi	r2,r5,4
811137cc:	2cc00017 	ldw	r19,0(r5)
811137d0:	002d883a 	mov	r22,zero
811137d4:	18003716 	blt	r3,zero,811138b4 <___vfprintf_internal_r+0x1428>
811137d8:	00ffdfc4 	movi	r3,-129
811137dc:	d8802d15 	stw	r2,180(sp)
811137e0:	90e4703a 	and	r18,r18,r3
811137e4:	0039883a 	mov	fp,zero
811137e8:	983df326 	beq	r19,zero,81112fb8 <__reset+0xfb0f2fb8>
811137ec:	00800244 	movi	r2,9
811137f0:	14fc7b36 	bltu	r2,r19,811129e0 <__reset+0xfb0f29e0>
811137f4:	d8c02817 	ldw	r3,160(sp)
811137f8:	dc001dc4 	addi	r16,sp,119
811137fc:	9cc00c04 	addi	r19,r19,48
81113800:	1c07c83a 	sub	r3,r3,r16
81113804:	dcc01dc5 	stb	r19,119(sp)
81113808:	d8c02e15 	stw	r3,184(sp)
8111380c:	003ce806 	br	81112bb0 <__reset+0xfb0f2bb0>
81113810:	d8803317 	ldw	r2,204(sp)
81113814:	143fffc4 	addi	r16,r2,-1
81113818:	043f4d0e 	bge	zero,r16,81113550 <__reset+0xfb0f3550>
8111381c:	07000404 	movi	fp,16
81113820:	e400810e 	bge	fp,r16,81113a28 <___vfprintf_internal_r+0x159c>
81113824:	01604534 	movhi	r5,33044
81113828:	296e3a84 	addi	r5,r5,-18198
8111382c:	d9402b15 	stw	r5,172(sp)
81113830:	01c001c4 	movi	r7,7
81113834:	dcc02c17 	ldw	r19,176(sp)
81113838:	00000306 	br	81113848 <___vfprintf_internal_r+0x13bc>
8111383c:	b5800204 	addi	r22,r22,8
81113840:	843ffc04 	addi	r16,r16,-16
81113844:	e4007b0e 	bge	fp,r16,81113a34 <___vfprintf_internal_r+0x15a8>
81113848:	18c00404 	addi	r3,r3,16
8111384c:	8c400044 	addi	r17,r17,1
81113850:	b5000015 	stw	r20,0(r22)
81113854:	b7000115 	stw	fp,4(r22)
81113858:	d8c02015 	stw	r3,128(sp)
8111385c:	dc401f15 	stw	r17,124(sp)
81113860:	3c7ff60e 	bge	r7,r17,8111383c <__reset+0xfb0f383c>
81113864:	d9801e04 	addi	r6,sp,120
81113868:	b80b883a 	mov	r5,r23
8111386c:	9809883a 	mov	r4,r19
81113870:	d9c03c15 	stw	r7,240(sp)
81113874:	111e6940 	call	8111e694 <__sprint_r>
81113878:	d9c03c17 	ldw	r7,240(sp)
8111387c:	103c071e 	bne	r2,zero,8111289c <__reset+0xfb0f289c>
81113880:	d8c02017 	ldw	r3,128(sp)
81113884:	dc401f17 	ldw	r17,124(sp)
81113888:	dd800404 	addi	r22,sp,16
8111388c:	003fec06 	br	81113840 <__reset+0xfb0f3840>
81113890:	9080100c 	andi	r2,r18,64
81113894:	d8002785 	stb	zero,158(sp)
81113898:	10010e26 	beq	r2,zero,81113cd4 <___vfprintf_internal_r+0x1848>
8111389c:	d9002d17 	ldw	r4,180(sp)
811138a0:	d9402917 	ldw	r5,164(sp)
811138a4:	002d883a 	mov	r22,zero
811138a8:	20800104 	addi	r2,r4,4
811138ac:	24c0000b 	ldhu	r19,0(r4)
811138b0:	283fc90e 	bge	r5,zero,811137d8 <__reset+0xfb0f37d8>
811138b4:	d8802d15 	stw	r2,180(sp)
811138b8:	0039883a 	mov	fp,zero
811138bc:	9d84b03a 	or	r2,r19,r22
811138c0:	103c461e 	bne	r2,zero,811129dc <__reset+0xfb0f29dc>
811138c4:	00800044 	movi	r2,1
811138c8:	003e6c06 	br	8111327c <__reset+0xfb0f327c>
811138cc:	d9002c17 	ldw	r4,176(sp)
811138d0:	d9801e04 	addi	r6,sp,120
811138d4:	b80b883a 	mov	r5,r23
811138d8:	111e6940 	call	8111e694 <__sprint_r>
811138dc:	103bef1e 	bne	r2,zero,8111289c <__reset+0xfb0f289c>
811138e0:	d8c02017 	ldw	r3,128(sp)
811138e4:	da000404 	addi	r8,sp,16
811138e8:	d9003217 	ldw	r4,200(sp)
811138ec:	d8802617 	ldw	r2,152(sp)
811138f0:	d9403317 	ldw	r5,204(sp)
811138f4:	8123883a 	add	r17,r16,r4
811138f8:	11400216 	blt	r2,r5,81113904 <___vfprintf_internal_r+0x1478>
811138fc:	9100004c 	andi	r4,r18,1
81113900:	20000d26 	beq	r4,zero,81113938 <___vfprintf_internal_r+0x14ac>
81113904:	d9003717 	ldw	r4,220(sp)
81113908:	d9403417 	ldw	r5,208(sp)
8111390c:	1907883a 	add	r3,r3,r4
81113910:	d9001f17 	ldw	r4,124(sp)
81113914:	41400015 	stw	r5,0(r8)
81113918:	d9403717 	ldw	r5,220(sp)
8111391c:	21000044 	addi	r4,r4,1
81113920:	d8c02015 	stw	r3,128(sp)
81113924:	41400115 	stw	r5,4(r8)
81113928:	d9001f15 	stw	r4,124(sp)
8111392c:	014001c4 	movi	r5,7
81113930:	2901e816 	blt	r5,r4,811140d4 <___vfprintf_internal_r+0x1c48>
81113934:	42000204 	addi	r8,r8,8
81113938:	d9003317 	ldw	r4,204(sp)
8111393c:	8121883a 	add	r16,r16,r4
81113940:	2085c83a 	sub	r2,r4,r2
81113944:	8461c83a 	sub	r16,r16,r17
81113948:	1400010e 	bge	r2,r16,81113950 <___vfprintf_internal_r+0x14c4>
8111394c:	1021883a 	mov	r16,r2
81113950:	04000a0e 	bge	zero,r16,8111397c <___vfprintf_internal_r+0x14f0>
81113954:	d9001f17 	ldw	r4,124(sp)
81113958:	1c07883a 	add	r3,r3,r16
8111395c:	44400015 	stw	r17,0(r8)
81113960:	21000044 	addi	r4,r4,1
81113964:	44000115 	stw	r16,4(r8)
81113968:	d8c02015 	stw	r3,128(sp)
8111396c:	d9001f15 	stw	r4,124(sp)
81113970:	014001c4 	movi	r5,7
81113974:	2901fb16 	blt	r5,r4,81114164 <___vfprintf_internal_r+0x1cd8>
81113978:	42000204 	addi	r8,r8,8
8111397c:	8001f716 	blt	r16,zero,8111415c <___vfprintf_internal_r+0x1cd0>
81113980:	1421c83a 	sub	r16,r2,r16
81113984:	043d380e 	bge	zero,r16,81112e68 <__reset+0xfb0f2e68>
81113988:	04400404 	movi	r17,16
8111398c:	d8801f17 	ldw	r2,124(sp)
81113990:	8c3efb0e 	bge	r17,r16,81113580 <__reset+0xfb0f3580>
81113994:	01604534 	movhi	r5,33044
81113998:	296e3a84 	addi	r5,r5,-18198
8111399c:	d9402b15 	stw	r5,172(sp)
811139a0:	058001c4 	movi	r22,7
811139a4:	dcc02c17 	ldw	r19,176(sp)
811139a8:	00000306 	br	811139b8 <___vfprintf_internal_r+0x152c>
811139ac:	42000204 	addi	r8,r8,8
811139b0:	843ffc04 	addi	r16,r16,-16
811139b4:	8c3ef50e 	bge	r17,r16,8111358c <__reset+0xfb0f358c>
811139b8:	18c00404 	addi	r3,r3,16
811139bc:	10800044 	addi	r2,r2,1
811139c0:	45000015 	stw	r20,0(r8)
811139c4:	44400115 	stw	r17,4(r8)
811139c8:	d8c02015 	stw	r3,128(sp)
811139cc:	d8801f15 	stw	r2,124(sp)
811139d0:	b0bff60e 	bge	r22,r2,811139ac <__reset+0xfb0f39ac>
811139d4:	d9801e04 	addi	r6,sp,120
811139d8:	b80b883a 	mov	r5,r23
811139dc:	9809883a 	mov	r4,r19
811139e0:	111e6940 	call	8111e694 <__sprint_r>
811139e4:	103bad1e 	bne	r2,zero,8111289c <__reset+0xfb0f289c>
811139e8:	d8c02017 	ldw	r3,128(sp)
811139ec:	d8801f17 	ldw	r2,124(sp)
811139f0:	da000404 	addi	r8,sp,16
811139f4:	003fee06 	br	811139b0 <__reset+0xfb0f39b0>
811139f8:	9088703a 	and	r4,r18,r2
811139fc:	203eab1e 	bne	r4,zero,811134ac <__reset+0xfb0f34ac>
81113a00:	dc401f17 	ldw	r17,124(sp)
81113a04:	40800115 	stw	r2,4(r8)
81113a08:	44000015 	stw	r16,0(r8)
81113a0c:	8c400044 	addi	r17,r17,1
81113a10:	d8c02015 	stw	r3,128(sp)
81113a14:	dc401f15 	stw	r17,124(sp)
81113a18:	008001c4 	movi	r2,7
81113a1c:	14400e16 	blt	r2,r17,81113a58 <___vfprintf_internal_r+0x15cc>
81113a20:	45800204 	addi	r22,r8,8
81113a24:	003eca06 	br	81113550 <__reset+0xfb0f3550>
81113a28:	01204534 	movhi	r4,33044
81113a2c:	212e3a84 	addi	r4,r4,-18198
81113a30:	d9002b15 	stw	r4,172(sp)
81113a34:	d8802b17 	ldw	r2,172(sp)
81113a38:	1c07883a 	add	r3,r3,r16
81113a3c:	8c400044 	addi	r17,r17,1
81113a40:	b0800015 	stw	r2,0(r22)
81113a44:	b4000115 	stw	r16,4(r22)
81113a48:	d8c02015 	stw	r3,128(sp)
81113a4c:	dc401f15 	stw	r17,124(sp)
81113a50:	008001c4 	movi	r2,7
81113a54:	147ebd0e 	bge	r2,r17,8111354c <__reset+0xfb0f354c>
81113a58:	d9002c17 	ldw	r4,176(sp)
81113a5c:	d9801e04 	addi	r6,sp,120
81113a60:	b80b883a 	mov	r5,r23
81113a64:	111e6940 	call	8111e694 <__sprint_r>
81113a68:	103b8c1e 	bne	r2,zero,8111289c <__reset+0xfb0f289c>
81113a6c:	d8c02017 	ldw	r3,128(sp)
81113a70:	dc401f17 	ldw	r17,124(sp)
81113a74:	dd800404 	addi	r22,sp,16
81113a78:	003eb506 	br	81113550 <__reset+0xfb0f3550>
81113a7c:	d9002c17 	ldw	r4,176(sp)
81113a80:	d9801e04 	addi	r6,sp,120
81113a84:	b80b883a 	mov	r5,r23
81113a88:	111e6940 	call	8111e694 <__sprint_r>
81113a8c:	103b831e 	bne	r2,zero,8111289c <__reset+0xfb0f289c>
81113a90:	d8c02017 	ldw	r3,128(sp)
81113a94:	dc401f17 	ldw	r17,124(sp)
81113a98:	da000404 	addi	r8,sp,16
81113a9c:	003e8d06 	br	811134d4 <__reset+0xfb0f34d4>
81113aa0:	d9002c17 	ldw	r4,176(sp)
81113aa4:	d9801e04 	addi	r6,sp,120
81113aa8:	b80b883a 	mov	r5,r23
81113aac:	111e6940 	call	8111e694 <__sprint_r>
81113ab0:	103b7a1e 	bne	r2,zero,8111289c <__reset+0xfb0f289c>
81113ab4:	d8c02017 	ldw	r3,128(sp)
81113ab8:	dc401f17 	ldw	r17,124(sp)
81113abc:	dd800404 	addi	r22,sp,16
81113ac0:	003e8f06 	br	81113500 <__reset+0xfb0f3500>
81113ac4:	0027883a 	mov	r19,zero
81113ac8:	003f4a06 	br	811137f4 <__reset+0xfb0f37f4>
81113acc:	d9002c17 	ldw	r4,176(sp)
81113ad0:	d9801e04 	addi	r6,sp,120
81113ad4:	b80b883a 	mov	r5,r23
81113ad8:	111e6940 	call	8111e694 <__sprint_r>
81113adc:	103b6f1e 	bne	r2,zero,8111289c <__reset+0xfb0f289c>
81113ae0:	d8c02017 	ldw	r3,128(sp)
81113ae4:	da000404 	addi	r8,sp,16
81113ae8:	003c9d06 	br	81112d60 <__reset+0xfb0f2d60>
81113aec:	04e7c83a 	sub	r19,zero,r19
81113af0:	9804c03a 	cmpne	r2,r19,zero
81113af4:	05adc83a 	sub	r22,zero,r22
81113af8:	b0adc83a 	sub	r22,r22,r2
81113afc:	d8802917 	ldw	r2,164(sp)
81113b00:	07000b44 	movi	fp,45
81113b04:	df002785 	stb	fp,158(sp)
81113b08:	10017b16 	blt	r2,zero,811140f8 <___vfprintf_internal_r+0x1c6c>
81113b0c:	00bfdfc4 	movi	r2,-129
81113b10:	90a4703a 	and	r18,r18,r2
81113b14:	003bb106 	br	811129dc <__reset+0xfb0f29dc>
81113b18:	d9003617 	ldw	r4,216(sp)
81113b1c:	d9403817 	ldw	r5,224(sp)
81113b20:	da003d15 	stw	r8,244(sp)
81113b24:	111acf80 	call	8111acf8 <__fpclassifyd>
81113b28:	da003d17 	ldw	r8,244(sp)
81113b2c:	1000f026 	beq	r2,zero,81113ef0 <___vfprintf_internal_r+0x1a64>
81113b30:	d9002917 	ldw	r4,164(sp)
81113b34:	05bff7c4 	movi	r22,-33
81113b38:	00bfffc4 	movi	r2,-1
81113b3c:	8dac703a 	and	r22,r17,r22
81113b40:	20820026 	beq	r4,r2,81114344 <___vfprintf_internal_r+0x1eb8>
81113b44:	008011c4 	movi	r2,71
81113b48:	b081f726 	beq	r22,r2,81114328 <___vfprintf_internal_r+0x1e9c>
81113b4c:	d9003817 	ldw	r4,224(sp)
81113b50:	90c04014 	ori	r3,r18,256
81113b54:	d8c02b15 	stw	r3,172(sp)
81113b58:	20021516 	blt	r4,zero,811143b0 <___vfprintf_internal_r+0x1f24>
81113b5c:	dcc03817 	ldw	r19,224(sp)
81113b60:	d8002a05 	stb	zero,168(sp)
81113b64:	00801984 	movi	r2,102
81113b68:	8881f926 	beq	r17,r2,81114350 <___vfprintf_internal_r+0x1ec4>
81113b6c:	00801184 	movi	r2,70
81113b70:	88821c26 	beq	r17,r2,811143e4 <___vfprintf_internal_r+0x1f58>
81113b74:	00801144 	movi	r2,69
81113b78:	b081ef26 	beq	r22,r2,81114338 <___vfprintf_internal_r+0x1eac>
81113b7c:	d8c02917 	ldw	r3,164(sp)
81113b80:	d8802104 	addi	r2,sp,132
81113b84:	d8800315 	stw	r2,12(sp)
81113b88:	d9403617 	ldw	r5,216(sp)
81113b8c:	d8802504 	addi	r2,sp,148
81113b90:	d9002c17 	ldw	r4,176(sp)
81113b94:	d8800215 	stw	r2,8(sp)
81113b98:	d8802604 	addi	r2,sp,152
81113b9c:	d8c00015 	stw	r3,0(sp)
81113ba0:	d8800115 	stw	r2,4(sp)
81113ba4:	01c00084 	movi	r7,2
81113ba8:	980d883a 	mov	r6,r19
81113bac:	d8c03c15 	stw	r3,240(sp)
81113bb0:	da003d15 	stw	r8,244(sp)
81113bb4:	11164380 	call	81116438 <_dtoa_r>
81113bb8:	1021883a 	mov	r16,r2
81113bbc:	008019c4 	movi	r2,103
81113bc0:	d8c03c17 	ldw	r3,240(sp)
81113bc4:	da003d17 	ldw	r8,244(sp)
81113bc8:	88817126 	beq	r17,r2,81114190 <___vfprintf_internal_r+0x1d04>
81113bcc:	008011c4 	movi	r2,71
81113bd0:	88829226 	beq	r17,r2,8111461c <___vfprintf_internal_r+0x2190>
81113bd4:	80f9883a 	add	fp,r16,r3
81113bd8:	d9003617 	ldw	r4,216(sp)
81113bdc:	000d883a 	mov	r6,zero
81113be0:	000f883a 	mov	r7,zero
81113be4:	980b883a 	mov	r5,r19
81113be8:	da003d15 	stw	r8,244(sp)
81113bec:	112303c0 	call	8112303c <__eqdf2>
81113bf0:	da003d17 	ldw	r8,244(sp)
81113bf4:	10018d26 	beq	r2,zero,8111422c <___vfprintf_internal_r+0x1da0>
81113bf8:	d8802117 	ldw	r2,132(sp)
81113bfc:	1700062e 	bgeu	r2,fp,81113c18 <___vfprintf_internal_r+0x178c>
81113c00:	01000c04 	movi	r4,48
81113c04:	10c00044 	addi	r3,r2,1
81113c08:	d8c02115 	stw	r3,132(sp)
81113c0c:	11000005 	stb	r4,0(r2)
81113c10:	d8802117 	ldw	r2,132(sp)
81113c14:	173ffb36 	bltu	r2,fp,81113c04 <__reset+0xfb0f3c04>
81113c18:	1405c83a 	sub	r2,r2,r16
81113c1c:	d8803315 	stw	r2,204(sp)
81113c20:	008011c4 	movi	r2,71
81113c24:	b0817626 	beq	r22,r2,81114200 <___vfprintf_internal_r+0x1d74>
81113c28:	00801944 	movi	r2,101
81113c2c:	1442810e 	bge	r2,r17,81114634 <___vfprintf_internal_r+0x21a8>
81113c30:	d8c02617 	ldw	r3,152(sp)
81113c34:	00801984 	movi	r2,102
81113c38:	d8c03215 	stw	r3,200(sp)
81113c3c:	8881fe26 	beq	r17,r2,81114438 <___vfprintf_internal_r+0x1fac>
81113c40:	d8c03217 	ldw	r3,200(sp)
81113c44:	d9003317 	ldw	r4,204(sp)
81113c48:	1901dd16 	blt	r3,r4,811143c0 <___vfprintf_internal_r+0x1f34>
81113c4c:	9480004c 	andi	r18,r18,1
81113c50:	90022b1e 	bne	r18,zero,81114500 <___vfprintf_internal_r+0x2074>
81113c54:	1805883a 	mov	r2,r3
81113c58:	18028016 	blt	r3,zero,8111465c <___vfprintf_internal_r+0x21d0>
81113c5c:	d8c03217 	ldw	r3,200(sp)
81113c60:	044019c4 	movi	r17,103
81113c64:	d8c02e15 	stw	r3,184(sp)
81113c68:	df002a07 	ldb	fp,168(sp)
81113c6c:	e001531e 	bne	fp,zero,811141bc <___vfprintf_internal_r+0x1d30>
81113c70:	df002783 	ldbu	fp,158(sp)
81113c74:	d8802a15 	stw	r2,168(sp)
81113c78:	dc802b17 	ldw	r18,172(sp)
81113c7c:	d8002915 	stw	zero,164(sp)
81113c80:	003bd106 	br	81112bc8 <__reset+0xfb0f2bc8>
81113c84:	d8802d17 	ldw	r2,180(sp)
81113c88:	d8c02d17 	ldw	r3,180(sp)
81113c8c:	d9002d17 	ldw	r4,180(sp)
81113c90:	10800017 	ldw	r2,0(r2)
81113c94:	18c00117 	ldw	r3,4(r3)
81113c98:	21000204 	addi	r4,r4,8
81113c9c:	d8803615 	stw	r2,216(sp)
81113ca0:	d8c03815 	stw	r3,224(sp)
81113ca4:	d9002d15 	stw	r4,180(sp)
81113ca8:	003b7506 	br	81112a80 <__reset+0xfb0f2a80>
81113cac:	ac400007 	ldb	r17,0(r21)
81113cb0:	003a5906 	br	81112618 <__reset+0xfb0f2618>
81113cb4:	9080100c 	andi	r2,r18,64
81113cb8:	1000a826 	beq	r2,zero,81113f5c <___vfprintf_internal_r+0x1ad0>
81113cbc:	d9002d17 	ldw	r4,180(sp)
81113cc0:	002d883a 	mov	r22,zero
81113cc4:	24c0000b 	ldhu	r19,0(r4)
81113cc8:	21000104 	addi	r4,r4,4
81113ccc:	d9002d15 	stw	r4,180(sp)
81113cd0:	003ccb06 	br	81113000 <__reset+0xfb0f3000>
81113cd4:	d8c02d17 	ldw	r3,180(sp)
81113cd8:	d9002917 	ldw	r4,164(sp)
81113cdc:	002d883a 	mov	r22,zero
81113ce0:	18800104 	addi	r2,r3,4
81113ce4:	1cc00017 	ldw	r19,0(r3)
81113ce8:	203ebb0e 	bge	r4,zero,811137d8 <__reset+0xfb0f37d8>
81113cec:	003ef106 	br	811138b4 <__reset+0xfb0f38b4>
81113cf0:	9080040c 	andi	r2,r18,16
81113cf4:	1000921e 	bne	r2,zero,81113f40 <___vfprintf_internal_r+0x1ab4>
81113cf8:	9480100c 	andi	r18,r18,64
81113cfc:	90013926 	beq	r18,zero,811141e4 <___vfprintf_internal_r+0x1d58>
81113d00:	d9002d17 	ldw	r4,180(sp)
81113d04:	d9402f17 	ldw	r5,188(sp)
81113d08:	20800017 	ldw	r2,0(r4)
81113d0c:	21000104 	addi	r4,r4,4
81113d10:	d9002d15 	stw	r4,180(sp)
81113d14:	1140000d 	sth	r5,0(r2)
81113d18:	003a1606 	br	81112574 <__reset+0xfb0f2574>
81113d1c:	9080100c 	andi	r2,r18,64
81113d20:	10008026 	beq	r2,zero,81113f24 <___vfprintf_internal_r+0x1a98>
81113d24:	d8c02d17 	ldw	r3,180(sp)
81113d28:	1cc0000f 	ldh	r19,0(r3)
81113d2c:	18c00104 	addi	r3,r3,4
81113d30:	d8c02d15 	stw	r3,180(sp)
81113d34:	982dd7fa 	srai	r22,r19,31
81113d38:	b005883a 	mov	r2,r22
81113d3c:	003b1f06 	br	811129bc <__reset+0xfb0f29bc>
81113d40:	9080100c 	andi	r2,r18,64
81113d44:	d8002785 	stb	zero,158(sp)
81113d48:	10008a1e 	bne	r2,zero,81113f74 <___vfprintf_internal_r+0x1ae8>
81113d4c:	d9402d17 	ldw	r5,180(sp)
81113d50:	d8c02917 	ldw	r3,164(sp)
81113d54:	002d883a 	mov	r22,zero
81113d58:	28800104 	addi	r2,r5,4
81113d5c:	2cc00017 	ldw	r19,0(r5)
81113d60:	183e4b0e 	bge	r3,zero,81113690 <__reset+0xfb0f3690>
81113d64:	9d86b03a 	or	r3,r19,r22
81113d68:	d8802d15 	stw	r2,180(sp)
81113d6c:	183e4c1e 	bne	r3,zero,811136a0 <__reset+0xfb0f36a0>
81113d70:	0039883a 	mov	fp,zero
81113d74:	0005883a 	mov	r2,zero
81113d78:	003d4006 	br	8111327c <__reset+0xfb0f327c>
81113d7c:	01604534 	movhi	r5,33044
81113d80:	296e3a84 	addi	r5,r5,-18198
81113d84:	d9402b15 	stw	r5,172(sp)
81113d88:	d9402b17 	ldw	r5,172(sp)
81113d8c:	1c47883a 	add	r3,r3,r17
81113d90:	10800044 	addi	r2,r2,1
81113d94:	41400015 	stw	r5,0(r8)
81113d98:	44400115 	stw	r17,4(r8)
81113d9c:	d8c02015 	stw	r3,128(sp)
81113da0:	d8801f15 	stw	r2,124(sp)
81113da4:	010001c4 	movi	r4,7
81113da8:	20bec816 	blt	r4,r2,811138cc <__reset+0xfb0f38cc>
81113dac:	42000204 	addi	r8,r8,8
81113db0:	003ecd06 	br	811138e8 <__reset+0xfb0f38e8>
81113db4:	d9002917 	ldw	r4,164(sp)
81113db8:	d8002785 	stb	zero,158(sp)
81113dbc:	203d2d16 	blt	r4,zero,81113274 <__reset+0xfb0f3274>
81113dc0:	00bfdfc4 	movi	r2,-129
81113dc4:	90a4703a 	and	r18,r18,r2
81113dc8:	003a9106 	br	81112810 <__reset+0xfb0f2810>
81113dcc:	01204534 	movhi	r4,33044
81113dd0:	212e3a84 	addi	r4,r4,-18198
81113dd4:	d9002b15 	stw	r4,172(sp)
81113dd8:	003c0c06 	br	81112e0c <__reset+0xfb0f2e0c>
81113ddc:	d9002c17 	ldw	r4,176(sp)
81113de0:	d9801e04 	addi	r6,sp,120
81113de4:	b80b883a 	mov	r5,r23
81113de8:	111e6940 	call	8111e694 <__sprint_r>
81113dec:	103aab1e 	bne	r2,zero,8111289c <__reset+0xfb0f289c>
81113df0:	d8c02017 	ldw	r3,128(sp)
81113df4:	da000404 	addi	r8,sp,16
81113df8:	003d4106 	br	81113300 <__reset+0xfb0f3300>
81113dfc:	d8801f17 	ldw	r2,124(sp)
81113e00:	01604534 	movhi	r5,33044
81113e04:	01000044 	movi	r4,1
81113e08:	18c00044 	addi	r3,r3,1
81113e0c:	10800044 	addi	r2,r2,1
81113e10:	296e3204 	addi	r5,r5,-18232
81113e14:	41000115 	stw	r4,4(r8)
81113e18:	41400015 	stw	r5,0(r8)
81113e1c:	d8c02015 	stw	r3,128(sp)
81113e20:	d8801f15 	stw	r2,124(sp)
81113e24:	010001c4 	movi	r4,7
81113e28:	20805c16 	blt	r4,r2,81113f9c <___vfprintf_internal_r+0x1b10>
81113e2c:	42000204 	addi	r8,r8,8
81113e30:	8800041e 	bne	r17,zero,81113e44 <___vfprintf_internal_r+0x19b8>
81113e34:	d8803317 	ldw	r2,204(sp)
81113e38:	1000021e 	bne	r2,zero,81113e44 <___vfprintf_internal_r+0x19b8>
81113e3c:	9080004c 	andi	r2,r18,1
81113e40:	103c0926 	beq	r2,zero,81112e68 <__reset+0xfb0f2e68>
81113e44:	d9003717 	ldw	r4,220(sp)
81113e48:	d8801f17 	ldw	r2,124(sp)
81113e4c:	d9403417 	ldw	r5,208(sp)
81113e50:	20c7883a 	add	r3,r4,r3
81113e54:	10800044 	addi	r2,r2,1
81113e58:	41000115 	stw	r4,4(r8)
81113e5c:	41400015 	stw	r5,0(r8)
81113e60:	d8c02015 	stw	r3,128(sp)
81113e64:	d8801f15 	stw	r2,124(sp)
81113e68:	010001c4 	movi	r4,7
81113e6c:	20812116 	blt	r4,r2,811142f4 <___vfprintf_internal_r+0x1e68>
81113e70:	42000204 	addi	r8,r8,8
81113e74:	0463c83a 	sub	r17,zero,r17
81113e78:	0440730e 	bge	zero,r17,81114048 <___vfprintf_internal_r+0x1bbc>
81113e7c:	05800404 	movi	r22,16
81113e80:	b440860e 	bge	r22,r17,8111409c <___vfprintf_internal_r+0x1c10>
81113e84:	01604534 	movhi	r5,33044
81113e88:	296e3a84 	addi	r5,r5,-18198
81113e8c:	d9402b15 	stw	r5,172(sp)
81113e90:	070001c4 	movi	fp,7
81113e94:	dcc02c17 	ldw	r19,176(sp)
81113e98:	00000306 	br	81113ea8 <___vfprintf_internal_r+0x1a1c>
81113e9c:	42000204 	addi	r8,r8,8
81113ea0:	8c7ffc04 	addi	r17,r17,-16
81113ea4:	b440800e 	bge	r22,r17,811140a8 <___vfprintf_internal_r+0x1c1c>
81113ea8:	18c00404 	addi	r3,r3,16
81113eac:	10800044 	addi	r2,r2,1
81113eb0:	45000015 	stw	r20,0(r8)
81113eb4:	45800115 	stw	r22,4(r8)
81113eb8:	d8c02015 	stw	r3,128(sp)
81113ebc:	d8801f15 	stw	r2,124(sp)
81113ec0:	e0bff60e 	bge	fp,r2,81113e9c <__reset+0xfb0f3e9c>
81113ec4:	d9801e04 	addi	r6,sp,120
81113ec8:	b80b883a 	mov	r5,r23
81113ecc:	9809883a 	mov	r4,r19
81113ed0:	111e6940 	call	8111e694 <__sprint_r>
81113ed4:	103a711e 	bne	r2,zero,8111289c <__reset+0xfb0f289c>
81113ed8:	d8c02017 	ldw	r3,128(sp)
81113edc:	d8801f17 	ldw	r2,124(sp)
81113ee0:	da000404 	addi	r8,sp,16
81113ee4:	003fee06 	br	81113ea0 <__reset+0xfb0f3ea0>
81113ee8:	00bfffc4 	movi	r2,-1
81113eec:	003a6f06 	br	811128ac <__reset+0xfb0f28ac>
81113ef0:	008011c4 	movi	r2,71
81113ef4:	1440b816 	blt	r2,r17,811141d8 <___vfprintf_internal_r+0x1d4c>
81113ef8:	04204534 	movhi	r16,33044
81113efc:	842e2404 	addi	r16,r16,-18288
81113f00:	00c000c4 	movi	r3,3
81113f04:	00bfdfc4 	movi	r2,-129
81113f08:	d8c02a15 	stw	r3,168(sp)
81113f0c:	90a4703a 	and	r18,r18,r2
81113f10:	df002783 	ldbu	fp,158(sp)
81113f14:	d8c02e15 	stw	r3,184(sp)
81113f18:	d8002915 	stw	zero,164(sp)
81113f1c:	d8003215 	stw	zero,200(sp)
81113f20:	003b2906 	br	81112bc8 <__reset+0xfb0f2bc8>
81113f24:	d9002d17 	ldw	r4,180(sp)
81113f28:	24c00017 	ldw	r19,0(r4)
81113f2c:	21000104 	addi	r4,r4,4
81113f30:	d9002d15 	stw	r4,180(sp)
81113f34:	982dd7fa 	srai	r22,r19,31
81113f38:	b005883a 	mov	r2,r22
81113f3c:	003a9f06 	br	811129bc <__reset+0xfb0f29bc>
81113f40:	d9402d17 	ldw	r5,180(sp)
81113f44:	d8c02f17 	ldw	r3,188(sp)
81113f48:	28800017 	ldw	r2,0(r5)
81113f4c:	29400104 	addi	r5,r5,4
81113f50:	d9402d15 	stw	r5,180(sp)
81113f54:	10c00015 	stw	r3,0(r2)
81113f58:	00398606 	br	81112574 <__reset+0xfb0f2574>
81113f5c:	d9402d17 	ldw	r5,180(sp)
81113f60:	002d883a 	mov	r22,zero
81113f64:	2cc00017 	ldw	r19,0(r5)
81113f68:	29400104 	addi	r5,r5,4
81113f6c:	d9402d15 	stw	r5,180(sp)
81113f70:	003c2306 	br	81113000 <__reset+0xfb0f3000>
81113f74:	d8c02d17 	ldw	r3,180(sp)
81113f78:	d9002917 	ldw	r4,164(sp)
81113f7c:	002d883a 	mov	r22,zero
81113f80:	18800104 	addi	r2,r3,4
81113f84:	1cc0000b 	ldhu	r19,0(r3)
81113f88:	203dc10e 	bge	r4,zero,81113690 <__reset+0xfb0f3690>
81113f8c:	003f7506 	br	81113d64 <__reset+0xfb0f3d64>
81113f90:	04204534 	movhi	r16,33044
81113f94:	842e2204 	addi	r16,r16,-18296
81113f98:	003acc06 	br	81112acc <__reset+0xfb0f2acc>
81113f9c:	d9002c17 	ldw	r4,176(sp)
81113fa0:	d9801e04 	addi	r6,sp,120
81113fa4:	b80b883a 	mov	r5,r23
81113fa8:	111e6940 	call	8111e694 <__sprint_r>
81113fac:	103a3b1e 	bne	r2,zero,8111289c <__reset+0xfb0f289c>
81113fb0:	dc402617 	ldw	r17,152(sp)
81113fb4:	d8c02017 	ldw	r3,128(sp)
81113fb8:	da000404 	addi	r8,sp,16
81113fbc:	003f9c06 	br	81113e30 <__reset+0xfb0f3e30>
81113fc0:	ac400043 	ldbu	r17,1(r21)
81113fc4:	94800814 	ori	r18,r18,32
81113fc8:	ad400044 	addi	r21,r21,1
81113fcc:	8c403fcc 	andi	r17,r17,255
81113fd0:	8c40201c 	xori	r17,r17,128
81113fd4:	8c7fe004 	addi	r17,r17,-128
81113fd8:	00398f06 	br	81112618 <__reset+0xfb0f2618>
81113fdc:	d8c02d15 	stw	r3,180(sp)
81113fe0:	0039883a 	mov	fp,zero
81113fe4:	003e3506 	br	811138bc <__reset+0xfb0f38bc>
81113fe8:	d9002c17 	ldw	r4,176(sp)
81113fec:	d9801e04 	addi	r6,sp,120
81113ff0:	b80b883a 	mov	r5,r23
81113ff4:	111e6940 	call	8111e694 <__sprint_r>
81113ff8:	103a281e 	bne	r2,zero,8111289c <__reset+0xfb0f289c>
81113ffc:	d8c02017 	ldw	r3,128(sp)
81114000:	da000404 	addi	r8,sp,16
81114004:	003cd006 	br	81113348 <__reset+0xfb0f3348>
81114008:	8009883a 	mov	r4,r16
8111400c:	da003d15 	stw	r8,244(sp)
81114010:	110ffb80 	call	8110ffb8 <strlen>
81114014:	d8802e15 	stw	r2,184(sp)
81114018:	da003d17 	ldw	r8,244(sp)
8111401c:	103c340e 	bge	r2,zero,811130f0 <__reset+0xfb0f30f0>
81114020:	0005883a 	mov	r2,zero
81114024:	003c3206 	br	811130f0 <__reset+0xfb0f30f0>
81114028:	d9002c17 	ldw	r4,176(sp)
8111402c:	d9801e04 	addi	r6,sp,120
81114030:	b80b883a 	mov	r5,r23
81114034:	111e6940 	call	8111e694 <__sprint_r>
81114038:	103a181e 	bne	r2,zero,8111289c <__reset+0xfb0f289c>
8111403c:	d8c02017 	ldw	r3,128(sp)
81114040:	d8801f17 	ldw	r2,124(sp)
81114044:	da000404 	addi	r8,sp,16
81114048:	d9403317 	ldw	r5,204(sp)
8111404c:	10800044 	addi	r2,r2,1
81114050:	44000015 	stw	r16,0(r8)
81114054:	28c7883a 	add	r3,r5,r3
81114058:	003b7d06 	br	81112e50 <__reset+0xfb0f2e50>
8111405c:	01204534 	movhi	r4,33044
81114060:	212e3e84 	addi	r4,r4,-18182
81114064:	d9003515 	stw	r4,212(sp)
81114068:	003b1406 	br	81112cbc <__reset+0xfb0f2cbc>
8111406c:	013fffc4 	movi	r4,-1
81114070:	003a3506 	br	81112948 <__reset+0xfb0f2948>
81114074:	0023883a 	mov	r17,zero
81114078:	003d9d06 	br	811136f0 <__reset+0xfb0f36f0>
8111407c:	d9002c17 	ldw	r4,176(sp)
81114080:	d9801e04 	addi	r6,sp,120
81114084:	b80b883a 	mov	r5,r23
81114088:	111e6940 	call	8111e694 <__sprint_r>
8111408c:	103a031e 	bne	r2,zero,8111289c <__reset+0xfb0f289c>
81114090:	d8c02017 	ldw	r3,128(sp)
81114094:	da000404 	addi	r8,sp,16
81114098:	003d9406 	br	811136ec <__reset+0xfb0f36ec>
8111409c:	01204534 	movhi	r4,33044
811140a0:	212e3a84 	addi	r4,r4,-18198
811140a4:	d9002b15 	stw	r4,172(sp)
811140a8:	d9002b17 	ldw	r4,172(sp)
811140ac:	1c47883a 	add	r3,r3,r17
811140b0:	10800044 	addi	r2,r2,1
811140b4:	41000015 	stw	r4,0(r8)
811140b8:	44400115 	stw	r17,4(r8)
811140bc:	d8c02015 	stw	r3,128(sp)
811140c0:	d8801f15 	stw	r2,124(sp)
811140c4:	010001c4 	movi	r4,7
811140c8:	20bfd716 	blt	r4,r2,81114028 <__reset+0xfb0f4028>
811140cc:	42000204 	addi	r8,r8,8
811140d0:	003fdd06 	br	81114048 <__reset+0xfb0f4048>
811140d4:	d9002c17 	ldw	r4,176(sp)
811140d8:	d9801e04 	addi	r6,sp,120
811140dc:	b80b883a 	mov	r5,r23
811140e0:	111e6940 	call	8111e694 <__sprint_r>
811140e4:	1039ed1e 	bne	r2,zero,8111289c <__reset+0xfb0f289c>
811140e8:	d8802617 	ldw	r2,152(sp)
811140ec:	d8c02017 	ldw	r3,128(sp)
811140f0:	da000404 	addi	r8,sp,16
811140f4:	003e1006 	br	81113938 <__reset+0xfb0f3938>
811140f8:	00800044 	movi	r2,1
811140fc:	10803fcc 	andi	r2,r2,255
81114100:	00c00044 	movi	r3,1
81114104:	10fa3526 	beq	r2,r3,811129dc <__reset+0xfb0f29dc>
81114108:	00c00084 	movi	r3,2
8111410c:	10fbcb26 	beq	r2,r3,8111303c <__reset+0xfb0f303c>
81114110:	003a8f06 	br	81112b50 <__reset+0xfb0f2b50>
81114114:	01204534 	movhi	r4,33044
81114118:	212e3e84 	addi	r4,r4,-18182
8111411c:	d9003515 	stw	r4,212(sp)
81114120:	003b7606 	br	81112efc <__reset+0xfb0f2efc>
81114124:	d8802917 	ldw	r2,164(sp)
81114128:	00c00184 	movi	r3,6
8111412c:	1880012e 	bgeu	r3,r2,81114134 <___vfprintf_internal_r+0x1ca8>
81114130:	1805883a 	mov	r2,r3
81114134:	d8802e15 	stw	r2,184(sp)
81114138:	1000ef16 	blt	r2,zero,811144f8 <___vfprintf_internal_r+0x206c>
8111413c:	04204534 	movhi	r16,33044
81114140:	d8802a15 	stw	r2,168(sp)
81114144:	dcc02d15 	stw	r19,180(sp)
81114148:	d8002915 	stw	zero,164(sp)
8111414c:	d8003215 	stw	zero,200(sp)
81114150:	842e3004 	addi	r16,r16,-18240
81114154:	0039883a 	mov	fp,zero
81114158:	003aa206 	br	81112be4 <__reset+0xfb0f2be4>
8111415c:	0021883a 	mov	r16,zero
81114160:	003e0706 	br	81113980 <__reset+0xfb0f3980>
81114164:	d9002c17 	ldw	r4,176(sp)
81114168:	d9801e04 	addi	r6,sp,120
8111416c:	b80b883a 	mov	r5,r23
81114170:	111e6940 	call	8111e694 <__sprint_r>
81114174:	1039c91e 	bne	r2,zero,8111289c <__reset+0xfb0f289c>
81114178:	d8802617 	ldw	r2,152(sp)
8111417c:	d9403317 	ldw	r5,204(sp)
81114180:	d8c02017 	ldw	r3,128(sp)
81114184:	da000404 	addi	r8,sp,16
81114188:	2885c83a 	sub	r2,r5,r2
8111418c:	003dfb06 	br	8111397c <__reset+0xfb0f397c>
81114190:	9080004c 	andi	r2,r18,1
81114194:	103e8f1e 	bne	r2,zero,81113bd4 <__reset+0xfb0f3bd4>
81114198:	d8802117 	ldw	r2,132(sp)
8111419c:	003e9e06 	br	81113c18 <__reset+0xfb0f3c18>
811141a0:	1025883a 	mov	r18,r2
811141a4:	0039883a 	mov	fp,zero
811141a8:	00800084 	movi	r2,2
811141ac:	003fd306 	br	811140fc <__reset+0xfb0f40fc>
811141b0:	07000b44 	movi	fp,45
811141b4:	df002785 	stb	fp,158(sp)
811141b8:	003a4006 	br	81112abc <__reset+0xfb0f2abc>
811141bc:	00c00b44 	movi	r3,45
811141c0:	d8c02785 	stb	r3,158(sp)
811141c4:	d8802a15 	stw	r2,168(sp)
811141c8:	dc802b17 	ldw	r18,172(sp)
811141cc:	d8002915 	stw	zero,164(sp)
811141d0:	07000b44 	movi	fp,45
811141d4:	003a8006 	br	81112bd8 <__reset+0xfb0f2bd8>
811141d8:	04204534 	movhi	r16,33044
811141dc:	842e2504 	addi	r16,r16,-18284
811141e0:	003f4706 	br	81113f00 <__reset+0xfb0f3f00>
811141e4:	d8c02d17 	ldw	r3,180(sp)
811141e8:	d9002f17 	ldw	r4,188(sp)
811141ec:	18800017 	ldw	r2,0(r3)
811141f0:	18c00104 	addi	r3,r3,4
811141f4:	d8c02d15 	stw	r3,180(sp)
811141f8:	11000015 	stw	r4,0(r2)
811141fc:	0038dd06 	br	81112574 <__reset+0xfb0f2574>
81114200:	dd802617 	ldw	r22,152(sp)
81114204:	00bfff44 	movi	r2,-3
81114208:	b0801c16 	blt	r22,r2,8111427c <___vfprintf_internal_r+0x1df0>
8111420c:	d9402917 	ldw	r5,164(sp)
81114210:	2d801a16 	blt	r5,r22,8111427c <___vfprintf_internal_r+0x1df0>
81114214:	dd803215 	stw	r22,200(sp)
81114218:	003e8906 	br	81113c40 <__reset+0xfb0f3c40>
8111421c:	01204534 	movhi	r4,33044
81114220:	212e3a84 	addi	r4,r4,-18198
81114224:	d9002b15 	stw	r4,172(sp)
81114228:	003c9106 	br	81113470 <__reset+0xfb0f3470>
8111422c:	e005883a 	mov	r2,fp
81114230:	003e7906 	br	81113c18 <__reset+0xfb0f3c18>
81114234:	d9402917 	ldw	r5,164(sp)
81114238:	df002783 	ldbu	fp,158(sp)
8111423c:	dcc02d15 	stw	r19,180(sp)
81114240:	d9402a15 	stw	r5,168(sp)
81114244:	d9402e15 	stw	r5,184(sp)
81114248:	d8002915 	stw	zero,164(sp)
8111424c:	d8003215 	stw	zero,200(sp)
81114250:	003a5d06 	br	81112bc8 <__reset+0xfb0f2bc8>
81114254:	9080004c 	andi	r2,r18,1
81114258:	0039883a 	mov	fp,zero
8111425c:	10000426 	beq	r2,zero,81114270 <___vfprintf_internal_r+0x1de4>
81114260:	00800c04 	movi	r2,48
81114264:	dc001dc4 	addi	r16,sp,119
81114268:	d8801dc5 	stb	r2,119(sp)
8111426c:	003b8006 	br	81113070 <__reset+0xfb0f3070>
81114270:	d8002e15 	stw	zero,184(sp)
81114274:	dc001e04 	addi	r16,sp,120
81114278:	003a4d06 	br	81112bb0 <__reset+0xfb0f2bb0>
8111427c:	8c7fff84 	addi	r17,r17,-2
81114280:	b5bfffc4 	addi	r22,r22,-1
81114284:	dd802615 	stw	r22,152(sp)
81114288:	dc4022c5 	stb	r17,139(sp)
8111428c:	b000bf16 	blt	r22,zero,8111458c <___vfprintf_internal_r+0x2100>
81114290:	00800ac4 	movi	r2,43
81114294:	d8802305 	stb	r2,140(sp)
81114298:	00800244 	movi	r2,9
8111429c:	15807016 	blt	r2,r22,81114460 <___vfprintf_internal_r+0x1fd4>
811142a0:	00800c04 	movi	r2,48
811142a4:	b5800c04 	addi	r22,r22,48
811142a8:	d8802345 	stb	r2,141(sp)
811142ac:	dd802385 	stb	r22,142(sp)
811142b0:	d88023c4 	addi	r2,sp,143
811142b4:	df0022c4 	addi	fp,sp,139
811142b8:	d8c03317 	ldw	r3,204(sp)
811142bc:	1739c83a 	sub	fp,r2,fp
811142c0:	d9003317 	ldw	r4,204(sp)
811142c4:	e0c7883a 	add	r3,fp,r3
811142c8:	df003a15 	stw	fp,232(sp)
811142cc:	d8c02e15 	stw	r3,184(sp)
811142d0:	00800044 	movi	r2,1
811142d4:	1100b30e 	bge	r2,r4,811145a4 <___vfprintf_internal_r+0x2118>
811142d8:	d8c02e17 	ldw	r3,184(sp)
811142dc:	18c00044 	addi	r3,r3,1
811142e0:	d8c02e15 	stw	r3,184(sp)
811142e4:	1805883a 	mov	r2,r3
811142e8:	1800ac16 	blt	r3,zero,8111459c <___vfprintf_internal_r+0x2110>
811142ec:	d8003215 	stw	zero,200(sp)
811142f0:	003e5d06 	br	81113c68 <__reset+0xfb0f3c68>
811142f4:	d9002c17 	ldw	r4,176(sp)
811142f8:	d9801e04 	addi	r6,sp,120
811142fc:	b80b883a 	mov	r5,r23
81114300:	111e6940 	call	8111e694 <__sprint_r>
81114304:	1039651e 	bne	r2,zero,8111289c <__reset+0xfb0f289c>
81114308:	dc402617 	ldw	r17,152(sp)
8111430c:	d8c02017 	ldw	r3,128(sp)
81114310:	d8801f17 	ldw	r2,124(sp)
81114314:	da000404 	addi	r8,sp,16
81114318:	003ed606 	br	81113e74 <__reset+0xfb0f3e74>
8111431c:	582b883a 	mov	r21,r11
81114320:	d8002915 	stw	zero,164(sp)
81114324:	0038bd06 	br	8111261c <__reset+0xfb0f261c>
81114328:	d8802917 	ldw	r2,164(sp)
8111432c:	103e071e 	bne	r2,zero,81113b4c <__reset+0xfb0f3b4c>
81114330:	dc002915 	stw	r16,164(sp)
81114334:	003e0506 	br	81113b4c <__reset+0xfb0f3b4c>
81114338:	d9002917 	ldw	r4,164(sp)
8111433c:	20c00044 	addi	r3,r4,1
81114340:	003e0f06 	br	81113b80 <__reset+0xfb0f3b80>
81114344:	01400184 	movi	r5,6
81114348:	d9402915 	stw	r5,164(sp)
8111434c:	003dff06 	br	81113b4c <__reset+0xfb0f3b4c>
81114350:	d8802104 	addi	r2,sp,132
81114354:	d8800315 	stw	r2,12(sp)
81114358:	d8802504 	addi	r2,sp,148
8111435c:	d8800215 	stw	r2,8(sp)
81114360:	d8802604 	addi	r2,sp,152
81114364:	d8800115 	stw	r2,4(sp)
81114368:	d8802917 	ldw	r2,164(sp)
8111436c:	d9403617 	ldw	r5,216(sp)
81114370:	d9002c17 	ldw	r4,176(sp)
81114374:	d8800015 	stw	r2,0(sp)
81114378:	01c000c4 	movi	r7,3
8111437c:	980d883a 	mov	r6,r19
81114380:	da003d15 	stw	r8,244(sp)
81114384:	11164380 	call	81116438 <_dtoa_r>
81114388:	d8c02917 	ldw	r3,164(sp)
8111438c:	da003d17 	ldw	r8,244(sp)
81114390:	1021883a 	mov	r16,r2
81114394:	10f9883a 	add	fp,r2,r3
81114398:	81000007 	ldb	r4,0(r16)
8111439c:	00800c04 	movi	r2,48
811143a0:	20805e26 	beq	r4,r2,8111451c <___vfprintf_internal_r+0x2090>
811143a4:	d8c02617 	ldw	r3,152(sp)
811143a8:	e0f9883a 	add	fp,fp,r3
811143ac:	003e0a06 	br	81113bd8 <__reset+0xfb0f3bd8>
811143b0:	00c00b44 	movi	r3,45
811143b4:	24e0003c 	xorhi	r19,r4,32768
811143b8:	d8c02a05 	stb	r3,168(sp)
811143bc:	003de906 	br	81113b64 <__reset+0xfb0f3b64>
811143c0:	d8c03217 	ldw	r3,200(sp)
811143c4:	00c07a0e 	bge	zero,r3,811145b0 <___vfprintf_internal_r+0x2124>
811143c8:	00800044 	movi	r2,1
811143cc:	d9003317 	ldw	r4,204(sp)
811143d0:	1105883a 	add	r2,r2,r4
811143d4:	d8802e15 	stw	r2,184(sp)
811143d8:	10004e16 	blt	r2,zero,81114514 <___vfprintf_internal_r+0x2088>
811143dc:	044019c4 	movi	r17,103
811143e0:	003e2106 	br	81113c68 <__reset+0xfb0f3c68>
811143e4:	d9002917 	ldw	r4,164(sp)
811143e8:	d8802104 	addi	r2,sp,132
811143ec:	d8800315 	stw	r2,12(sp)
811143f0:	d9000015 	stw	r4,0(sp)
811143f4:	d8802504 	addi	r2,sp,148
811143f8:	d9403617 	ldw	r5,216(sp)
811143fc:	d9002c17 	ldw	r4,176(sp)
81114400:	d8800215 	stw	r2,8(sp)
81114404:	d8802604 	addi	r2,sp,152
81114408:	d8800115 	stw	r2,4(sp)
8111440c:	01c000c4 	movi	r7,3
81114410:	980d883a 	mov	r6,r19
81114414:	da003d15 	stw	r8,244(sp)
81114418:	11164380 	call	81116438 <_dtoa_r>
8111441c:	d8c02917 	ldw	r3,164(sp)
81114420:	da003d17 	ldw	r8,244(sp)
81114424:	1021883a 	mov	r16,r2
81114428:	00801184 	movi	r2,70
8111442c:	80f9883a 	add	fp,r16,r3
81114430:	88bfd926 	beq	r17,r2,81114398 <__reset+0xfb0f4398>
81114434:	003de806 	br	81113bd8 <__reset+0xfb0f3bd8>
81114438:	d9002917 	ldw	r4,164(sp)
8111443c:	00c04d0e 	bge	zero,r3,81114574 <___vfprintf_internal_r+0x20e8>
81114440:	2000441e 	bne	r4,zero,81114554 <___vfprintf_internal_r+0x20c8>
81114444:	9480004c 	andi	r18,r18,1
81114448:	9000421e 	bne	r18,zero,81114554 <___vfprintf_internal_r+0x20c8>
8111444c:	1805883a 	mov	r2,r3
81114450:	18007016 	blt	r3,zero,81114614 <___vfprintf_internal_r+0x2188>
81114454:	d8c03217 	ldw	r3,200(sp)
81114458:	d8c02e15 	stw	r3,184(sp)
8111445c:	003e0206 	br	81113c68 <__reset+0xfb0f3c68>
81114460:	df0022c4 	addi	fp,sp,139
81114464:	dc002915 	stw	r16,164(sp)
81114468:	4027883a 	mov	r19,r8
8111446c:	e021883a 	mov	r16,fp
81114470:	b009883a 	mov	r4,r22
81114474:	01400284 	movi	r5,10
81114478:	1121b6c0 	call	81121b6c <__modsi3>
8111447c:	10800c04 	addi	r2,r2,48
81114480:	843fffc4 	addi	r16,r16,-1
81114484:	b009883a 	mov	r4,r22
81114488:	01400284 	movi	r5,10
8111448c:	80800005 	stb	r2,0(r16)
81114490:	1121ae80 	call	81121ae8 <__divsi3>
81114494:	102d883a 	mov	r22,r2
81114498:	00800244 	movi	r2,9
8111449c:	15bff416 	blt	r2,r22,81114470 <__reset+0xfb0f4470>
811144a0:	9811883a 	mov	r8,r19
811144a4:	b0800c04 	addi	r2,r22,48
811144a8:	8027883a 	mov	r19,r16
811144ac:	997fffc4 	addi	r5,r19,-1
811144b0:	98bfffc5 	stb	r2,-1(r19)
811144b4:	dc002917 	ldw	r16,164(sp)
811144b8:	2f006a2e 	bgeu	r5,fp,81114664 <___vfprintf_internal_r+0x21d8>
811144bc:	d9c02384 	addi	r7,sp,142
811144c0:	3ccfc83a 	sub	r7,r7,r19
811144c4:	d9002344 	addi	r4,sp,141
811144c8:	e1cf883a 	add	r7,fp,r7
811144cc:	00000106 	br	811144d4 <___vfprintf_internal_r+0x2048>
811144d0:	28800003 	ldbu	r2,0(r5)
811144d4:	20800005 	stb	r2,0(r4)
811144d8:	21000044 	addi	r4,r4,1
811144dc:	29400044 	addi	r5,r5,1
811144e0:	393ffb1e 	bne	r7,r4,811144d0 <__reset+0xfb0f44d0>
811144e4:	d8802304 	addi	r2,sp,140
811144e8:	14c5c83a 	sub	r2,r2,r19
811144ec:	d8c02344 	addi	r3,sp,141
811144f0:	1885883a 	add	r2,r3,r2
811144f4:	003f7006 	br	811142b8 <__reset+0xfb0f42b8>
811144f8:	0005883a 	mov	r2,zero
811144fc:	003f0f06 	br	8111413c <__reset+0xfb0f413c>
81114500:	d8c03217 	ldw	r3,200(sp)
81114504:	18c00044 	addi	r3,r3,1
81114508:	d8c02e15 	stw	r3,184(sp)
8111450c:	1805883a 	mov	r2,r3
81114510:	183fb20e 	bge	r3,zero,811143dc <__reset+0xfb0f43dc>
81114514:	0005883a 	mov	r2,zero
81114518:	003fb006 	br	811143dc <__reset+0xfb0f43dc>
8111451c:	d9003617 	ldw	r4,216(sp)
81114520:	000d883a 	mov	r6,zero
81114524:	000f883a 	mov	r7,zero
81114528:	980b883a 	mov	r5,r19
8111452c:	d8c03c15 	stw	r3,240(sp)
81114530:	da003d15 	stw	r8,244(sp)
81114534:	112303c0 	call	8112303c <__eqdf2>
81114538:	d8c03c17 	ldw	r3,240(sp)
8111453c:	da003d17 	ldw	r8,244(sp)
81114540:	103f9826 	beq	r2,zero,811143a4 <__reset+0xfb0f43a4>
81114544:	00800044 	movi	r2,1
81114548:	10c7c83a 	sub	r3,r2,r3
8111454c:	d8c02615 	stw	r3,152(sp)
81114550:	003f9506 	br	811143a8 <__reset+0xfb0f43a8>
81114554:	d9002917 	ldw	r4,164(sp)
81114558:	d8c03217 	ldw	r3,200(sp)
8111455c:	20800044 	addi	r2,r4,1
81114560:	1885883a 	add	r2,r3,r2
81114564:	d8802e15 	stw	r2,184(sp)
81114568:	103dbf0e 	bge	r2,zero,81113c68 <__reset+0xfb0f3c68>
8111456c:	0005883a 	mov	r2,zero
81114570:	003dbd06 	br	81113c68 <__reset+0xfb0f3c68>
81114574:	2000211e 	bne	r4,zero,811145fc <___vfprintf_internal_r+0x2170>
81114578:	9480004c 	andi	r18,r18,1
8111457c:	90001f1e 	bne	r18,zero,811145fc <___vfprintf_internal_r+0x2170>
81114580:	00800044 	movi	r2,1
81114584:	d8802e15 	stw	r2,184(sp)
81114588:	003db706 	br	81113c68 <__reset+0xfb0f3c68>
8111458c:	00800b44 	movi	r2,45
81114590:	05adc83a 	sub	r22,zero,r22
81114594:	d8802305 	stb	r2,140(sp)
81114598:	003f3f06 	br	81114298 <__reset+0xfb0f4298>
8111459c:	0005883a 	mov	r2,zero
811145a0:	003f5206 	br	811142ec <__reset+0xfb0f42ec>
811145a4:	90a4703a 	and	r18,r18,r2
811145a8:	903f4e26 	beq	r18,zero,811142e4 <__reset+0xfb0f42e4>
811145ac:	003f4a06 	br	811142d8 <__reset+0xfb0f42d8>
811145b0:	00800084 	movi	r2,2
811145b4:	10c5c83a 	sub	r2,r2,r3
811145b8:	003f8406 	br	811143cc <__reset+0xfb0f43cc>
811145bc:	d8802d17 	ldw	r2,180(sp)
811145c0:	d9002d17 	ldw	r4,180(sp)
811145c4:	ac400043 	ldbu	r17,1(r21)
811145c8:	10800017 	ldw	r2,0(r2)
811145cc:	582b883a 	mov	r21,r11
811145d0:	d8802915 	stw	r2,164(sp)
811145d4:	20800104 	addi	r2,r4,4
811145d8:	d9002917 	ldw	r4,164(sp)
811145dc:	d8802d15 	stw	r2,180(sp)
811145e0:	203e7a0e 	bge	r4,zero,81113fcc <__reset+0xfb0f3fcc>
811145e4:	8c403fcc 	andi	r17,r17,255
811145e8:	00bfffc4 	movi	r2,-1
811145ec:	8c40201c 	xori	r17,r17,128
811145f0:	d8802915 	stw	r2,164(sp)
811145f4:	8c7fe004 	addi	r17,r17,-128
811145f8:	00380706 	br	81112618 <__reset+0xfb0f2618>
811145fc:	d8c02917 	ldw	r3,164(sp)
81114600:	18c00084 	addi	r3,r3,2
81114604:	d8c02e15 	stw	r3,184(sp)
81114608:	1805883a 	mov	r2,r3
8111460c:	183d960e 	bge	r3,zero,81113c68 <__reset+0xfb0f3c68>
81114610:	003fd606 	br	8111456c <__reset+0xfb0f456c>
81114614:	0005883a 	mov	r2,zero
81114618:	003f8e06 	br	81114454 <__reset+0xfb0f4454>
8111461c:	9080004c 	andi	r2,r18,1
81114620:	103f811e 	bne	r2,zero,81114428 <__reset+0xfb0f4428>
81114624:	d8802117 	ldw	r2,132(sp)
81114628:	1405c83a 	sub	r2,r2,r16
8111462c:	d8803315 	stw	r2,204(sp)
81114630:	b47ef326 	beq	r22,r17,81114200 <__reset+0xfb0f4200>
81114634:	dd802617 	ldw	r22,152(sp)
81114638:	003f1106 	br	81114280 <__reset+0xfb0f4280>
8111463c:	d9c02785 	stb	r7,158(sp)
81114640:	00390406 	br	81112a54 <__reset+0xfb0f2a54>
81114644:	d9c02785 	stb	r7,158(sp)
81114648:	0038d306 	br	81112998 <__reset+0xfb0f2998>
8111464c:	d9c02785 	stb	r7,158(sp)
81114650:	003a6106 	br	81112fd8 <__reset+0xfb0f2fd8>
81114654:	d9c02785 	stb	r7,158(sp)
81114658:	003af806 	br	8111323c <__reset+0xfb0f323c>
8111465c:	0005883a 	mov	r2,zero
81114660:	003d7e06 	br	81113c5c <__reset+0xfb0f3c5c>
81114664:	d8802344 	addi	r2,sp,141
81114668:	003f1306 	br	811142b8 <__reset+0xfb0f42b8>
8111466c:	d9c02785 	stb	r7,158(sp)
81114670:	00392306 	br	81112b00 <__reset+0xfb0f2b00>
81114674:	d9c02785 	stb	r7,158(sp)
81114678:	003aa906 	br	81113120 <__reset+0xfb0f3120>
8111467c:	d9c02785 	stb	r7,158(sp)
81114680:	003a3d06 	br	81112f78 <__reset+0xfb0f2f78>
81114684:	d9c02785 	stb	r7,158(sp)
81114688:	003aca06 	br	811131b4 <__reset+0xfb0f31b4>

8111468c <__vfprintf_internal>:
8111468c:	00a04534 	movhi	r2,33044
81114690:	10b73304 	addi	r2,r2,-9012
81114694:	300f883a 	mov	r7,r6
81114698:	280d883a 	mov	r6,r5
8111469c:	200b883a 	mov	r5,r4
811146a0:	11000017 	ldw	r4,0(r2)
811146a4:	111248c1 	jmpi	8111248c <___vfprintf_internal_r>

811146a8 <__sbprintf>:
811146a8:	defee204 	addi	sp,sp,-1144
811146ac:	de00012e 	bgeu	sp,et,811146b4 <__sbprintf+0xc>
811146b0:	003b68fa 	trap	3
811146b4:	2880030b 	ldhu	r2,12(r5)
811146b8:	2ac01917 	ldw	r11,100(r5)
811146bc:	2a80038b 	ldhu	r10,14(r5)
811146c0:	2a400717 	ldw	r9,28(r5)
811146c4:	2a000917 	ldw	r8,36(r5)
811146c8:	00c10004 	movi	r3,1024
811146cc:	dc011a15 	stw	r16,1128(sp)
811146d0:	10bfff4c 	andi	r2,r2,65533
811146d4:	2821883a 	mov	r16,r5
811146d8:	d8cb883a 	add	r5,sp,r3
811146dc:	dc811c15 	stw	r18,1136(sp)
811146e0:	dc411b15 	stw	r17,1132(sp)
811146e4:	dfc11d15 	stw	ra,1140(sp)
811146e8:	2025883a 	mov	r18,r4
811146ec:	d881030d 	sth	r2,1036(sp)
811146f0:	dac11915 	stw	r11,1124(sp)
811146f4:	da81038d 	sth	r10,1038(sp)
811146f8:	da410715 	stw	r9,1052(sp)
811146fc:	da010915 	stw	r8,1060(sp)
81114700:	dec10015 	stw	sp,1024(sp)
81114704:	dec10415 	stw	sp,1040(sp)
81114708:	d8c10215 	stw	r3,1032(sp)
8111470c:	d8c10515 	stw	r3,1044(sp)
81114710:	d8010615 	stw	zero,1048(sp)
81114714:	111248c0 	call	8111248c <___vfprintf_internal_r>
81114718:	1023883a 	mov	r17,r2
8111471c:	10000416 	blt	r2,zero,81114730 <__sbprintf+0x88>
81114720:	d9410004 	addi	r5,sp,1024
81114724:	9009883a 	mov	r4,r18
81114728:	1117cec0 	call	81117cec <_fflush_r>
8111472c:	10000d1e 	bne	r2,zero,81114764 <__sbprintf+0xbc>
81114730:	d881030b 	ldhu	r2,1036(sp)
81114734:	1080100c 	andi	r2,r2,64
81114738:	10000326 	beq	r2,zero,81114748 <__sbprintf+0xa0>
8111473c:	8080030b 	ldhu	r2,12(r16)
81114740:	10801014 	ori	r2,r2,64
81114744:	8080030d 	sth	r2,12(r16)
81114748:	8805883a 	mov	r2,r17
8111474c:	dfc11d17 	ldw	ra,1140(sp)
81114750:	dc811c17 	ldw	r18,1136(sp)
81114754:	dc411b17 	ldw	r17,1132(sp)
81114758:	dc011a17 	ldw	r16,1128(sp)
8111475c:	dec11e04 	addi	sp,sp,1144
81114760:	f800283a 	ret
81114764:	047fffc4 	movi	r17,-1
81114768:	003ff106 	br	81114730 <__reset+0xfb0f4730>

8111476c <__svfscanf_r>:
8111476c:	deff4b04 	addi	sp,sp,-724
81114770:	de00012e 	bgeu	sp,et,81114778 <__svfscanf_r+0xc>
81114774:	003b68fa 	trap	3
81114778:	2880030b 	ldhu	r2,12(r5)
8111477c:	df00b315 	stw	fp,716(sp)
81114780:	dd80b115 	stw	r22,708(sp)
81114784:	dfc0b415 	stw	ra,720(sp)
81114788:	ddc0b215 	stw	r23,712(sp)
8111478c:	dd40b015 	stw	r21,704(sp)
81114790:	dd00af15 	stw	r20,700(sp)
81114794:	dcc0ae15 	stw	r19,696(sp)
81114798:	dc80ad15 	stw	r18,692(sp)
8111479c:	dc40ac15 	stw	r17,688(sp)
811147a0:	dc00ab15 	stw	r16,684(sp)
811147a4:	10c8000c 	andi	r3,r2,8192
811147a8:	d9c09c15 	stw	r7,624(sp)
811147ac:	2839883a 	mov	fp,r5
811147b0:	202d883a 	mov	r22,r4
811147b4:	1800061e 	bne	r3,zero,811147d0 <__svfscanf_r+0x64>
811147b8:	29001917 	ldw	r4,100(r5)
811147bc:	00f7ffc4 	movi	r3,-8193
811147c0:	10880014 	ori	r2,r2,8192
811147c4:	20c6703a 	and	r3,r4,r3
811147c8:	2880030d 	sth	r2,12(r5)
811147cc:	28c01915 	stw	r3,100(r5)
811147d0:	30800003 	ldbu	r2,0(r6)
811147d4:	0021883a 	mov	r16,zero
811147d8:	05e04534 	movhi	r23,33044
811147dc:	d800a115 	stw	zero,644(sp)
811147e0:	d8009e15 	stw	zero,632(sp)
811147e4:	d800a015 	stw	zero,640(sp)
811147e8:	d8809b15 	stw	r2,620(sp)
811147ec:	bdf73104 	addi	r23,r23,-9020
811147f0:	8025883a 	mov	r18,r16
811147f4:	35000044 	addi	r20,r6,1
811147f8:	10001e26 	beq	r2,zero,81114874 <__svfscanf_r+0x108>
811147fc:	b9c00017 	ldw	r7,0(r23)
81114800:	3887883a 	add	r3,r7,r2
81114804:	18c00043 	ldbu	r3,1(r3)
81114808:	18c0020c 	andi	r3,r3,8
8111480c:	18001b26 	beq	r3,zero,8111487c <__svfscanf_r+0x110>
81114810:	e0800117 	ldw	r2,4(fp)
81114814:	00800e0e 	bge	zero,r2,81114850 <__svfscanf_r+0xe4>
81114818:	e0c00017 	ldw	r3,0(fp)
8111481c:	b9000017 	ldw	r4,0(r23)
81114820:	18800003 	ldbu	r2,0(r3)
81114824:	2085883a 	add	r2,r4,r2
81114828:	10800043 	ldbu	r2,1(r2)
8111482c:	1080020c 	andi	r2,r2,8
81114830:	10000b26 	beq	r2,zero,81114860 <__svfscanf_r+0xf4>
81114834:	e0800117 	ldw	r2,4(fp)
81114838:	18c00044 	addi	r3,r3,1
8111483c:	e0c00015 	stw	r3,0(fp)
81114840:	10bfffc4 	addi	r2,r2,-1
81114844:	e0800115 	stw	r2,4(fp)
81114848:	94800044 	addi	r18,r18,1
8111484c:	00bff216 	blt	zero,r2,81114818 <__reset+0xfb0f4818>
81114850:	e00b883a 	mov	r5,fp
81114854:	b009883a 	mov	r4,r22
81114858:	110fa900 	call	8110fa90 <__srefill_r>
8111485c:	103fee26 	beq	r2,zero,81114818 <__reset+0xfb0f4818>
81114860:	a00d883a 	mov	r6,r20
81114864:	30800003 	ldbu	r2,0(r6)
81114868:	35000044 	addi	r20,r6,1
8111486c:	d8809b15 	stw	r2,620(sp)
81114870:	103fe21e 	bne	r2,zero,811147fc <__reset+0xfb0f47fc>
81114874:	d880a017 	ldw	r2,640(sp)
81114878:	00009906 	br	81114ae0 <__svfscanf_r+0x374>
8111487c:	00c00944 	movi	r3,37
81114880:	10c0881e 	bne	r2,r3,81114aa4 <__svfscanf_r+0x338>
81114884:	30c00043 	ldbu	r3,1(r6)
81114888:	0023883a 	mov	r17,zero
8111488c:	0027883a 	mov	r19,zero
81114890:	01001e04 	movi	r4,120
81114894:	01401b04 	movi	r5,108
81114898:	a1800044 	addi	r6,r20,1
8111489c:	20c0a236 	bltu	r4,r3,81114b28 <__svfscanf_r+0x3bc>
811148a0:	180490ba 	slli	r2,r3,2
811148a4:	02204474 	movhi	r8,33041
811148a8:	42122e04 	addi	r8,r8,18616
811148ac:	1205883a 	add	r2,r2,r8
811148b0:	10800017 	ldw	r2,0(r2)
811148b4:	1000683a 	jmp	r2
811148b8:	81114adc 	xori	r4,r16,17707
811148bc:	81114b28 	cmpgeui	r4,r16,17708
811148c0:	81114b28 	cmpgeui	r4,r16,17708
811148c4:	81114b28 	cmpgeui	r4,r16,17708
811148c8:	81114b28 	cmpgeui	r4,r16,17708
811148cc:	81114b28 	cmpgeui	r4,r16,17708
811148d0:	81114b28 	cmpgeui	r4,r16,17708
811148d4:	81114b28 	cmpgeui	r4,r16,17708
811148d8:	81114b28 	cmpgeui	r4,r16,17708
811148dc:	81114b28 	cmpgeui	r4,r16,17708
811148e0:	81114b28 	cmpgeui	r4,r16,17708
811148e4:	81114b28 	cmpgeui	r4,r16,17708
811148e8:	81114b28 	cmpgeui	r4,r16,17708
811148ec:	81114b28 	cmpgeui	r4,r16,17708
811148f0:	81114b28 	cmpgeui	r4,r16,17708
811148f4:	81114b28 	cmpgeui	r4,r16,17708
811148f8:	81114b28 	cmpgeui	r4,r16,17708
811148fc:	81114b28 	cmpgeui	r4,r16,17708
81114900:	81114b28 	cmpgeui	r4,r16,17708
81114904:	81114b28 	cmpgeui	r4,r16,17708
81114908:	81114b28 	cmpgeui	r4,r16,17708
8111490c:	81114b28 	cmpgeui	r4,r16,17708
81114910:	81114b28 	cmpgeui	r4,r16,17708
81114914:	81114b28 	cmpgeui	r4,r16,17708
81114918:	81114b28 	cmpgeui	r4,r16,17708
8111491c:	81114b28 	cmpgeui	r4,r16,17708
81114920:	81114b28 	cmpgeui	r4,r16,17708
81114924:	81114b28 	cmpgeui	r4,r16,17708
81114928:	81114b28 	cmpgeui	r4,r16,17708
8111492c:	81114b28 	cmpgeui	r4,r16,17708
81114930:	81114b28 	cmpgeui	r4,r16,17708
81114934:	81114b28 	cmpgeui	r4,r16,17708
81114938:	81114b28 	cmpgeui	r4,r16,17708
8111493c:	81114b28 	cmpgeui	r4,r16,17708
81114940:	81114b28 	cmpgeui	r4,r16,17708
81114944:	81114b28 	cmpgeui	r4,r16,17708
81114948:	81114b28 	cmpgeui	r4,r16,17708
8111494c:	81114a9c 	xori	r4,r16,17706
81114950:	81114b28 	cmpgeui	r4,r16,17708
81114954:	81114b28 	cmpgeui	r4,r16,17708
81114958:	81114b28 	cmpgeui	r4,r16,17708
8111495c:	81114b28 	cmpgeui	r4,r16,17708
81114960:	81114b10 	cmplti	r4,r16,17708
81114964:	81114b28 	cmpgeui	r4,r16,17708
81114968:	81114b28 	cmpgeui	r4,r16,17708
8111496c:	81114b28 	cmpgeui	r4,r16,17708
81114970:	81114b28 	cmpgeui	r4,r16,17708
81114974:	81114b28 	cmpgeui	r4,r16,17708
81114978:	81114c44 	addi	r4,r16,17713
8111497c:	81114c44 	addi	r4,r16,17713
81114980:	81114c44 	addi	r4,r16,17713
81114984:	81114c44 	addi	r4,r16,17713
81114988:	81114c44 	addi	r4,r16,17713
8111498c:	81114c44 	addi	r4,r16,17713
81114990:	81114c44 	addi	r4,r16,17713
81114994:	81114c44 	addi	r4,r16,17713
81114998:	81114c44 	addi	r4,r16,17713
8111499c:	81114c44 	addi	r4,r16,17713
811149a0:	81114b28 	cmpgeui	r4,r16,17708
811149a4:	81114b28 	cmpgeui	r4,r16,17708
811149a8:	81114b28 	cmpgeui	r4,r16,17708
811149ac:	81114b28 	cmpgeui	r4,r16,17708
811149b0:	81114b28 	cmpgeui	r4,r16,17708
811149b4:	81114b28 	cmpgeui	r4,r16,17708
811149b8:	81114b28 	cmpgeui	r4,r16,17708
811149bc:	81114b28 	cmpgeui	r4,r16,17708
811149c0:	81114b28 	cmpgeui	r4,r16,17708
811149c4:	81114b28 	cmpgeui	r4,r16,17708
811149c8:	81114c18 	cmpnei	r4,r16,17712
811149cc:	81114cc8 	cmpgei	r4,r16,17715
811149d0:	81114b28 	cmpgeui	r4,r16,17708
811149d4:	81114cc8 	cmpgei	r4,r16,17715
811149d8:	81114b28 	cmpgeui	r4,r16,17708
811149dc:	81114b28 	cmpgeui	r4,r16,17708
811149e0:	81114b28 	cmpgeui	r4,r16,17708
811149e4:	81114b28 	cmpgeui	r4,r16,17708
811149e8:	81114cb4 	orhi	r4,r16,17714
811149ec:	81114b28 	cmpgeui	r4,r16,17708
811149f0:	81114b28 	cmpgeui	r4,r16,17708
811149f4:	81114c88 	cmpgei	r4,r16,17714
811149f8:	81114b28 	cmpgeui	r4,r16,17708
811149fc:	81114b28 	cmpgeui	r4,r16,17708
81114a00:	81114b28 	cmpgeui	r4,r16,17708
81114a04:	81114b28 	cmpgeui	r4,r16,17708
81114a08:	81114b28 	cmpgeui	r4,r16,17708
81114a0c:	81114b28 	cmpgeui	r4,r16,17708
81114a10:	81114b28 	cmpgeui	r4,r16,17708
81114a14:	81114b28 	cmpgeui	r4,r16,17708
81114a18:	81114c60 	cmpeqi	r4,r16,17713
81114a1c:	81114b28 	cmpgeui	r4,r16,17708
81114a20:	81114b28 	cmpgeui	r4,r16,17708
81114a24:	81114dfc 	xorhi	r4,r16,17719
81114a28:	81114b28 	cmpgeui	r4,r16,17708
81114a2c:	81114b28 	cmpgeui	r4,r16,17708
81114a30:	81114b28 	cmpgeui	r4,r16,17708
81114a34:	81114b28 	cmpgeui	r4,r16,17708
81114a38:	81114b28 	cmpgeui	r4,r16,17708
81114a3c:	81114b28 	cmpgeui	r4,r16,17708
81114a40:	81114b28 	cmpgeui	r4,r16,17708
81114a44:	81114d80 	call	881114d8 <__reset+0x20f14d8>
81114a48:	81114d58 	cmpnei	r4,r16,17717
81114a4c:	81114cc8 	cmpgei	r4,r16,17715
81114a50:	81114cc8 	cmpgei	r4,r16,17715
81114a54:	81114cc8 	cmpgei	r4,r16,17715
81114a58:	81114d44 	addi	r4,r16,17717
81114a5c:	81114e88 	cmpgei	r4,r16,17722
81114a60:	81114b28 	cmpgeui	r4,r16,17708
81114a64:	81114b28 	cmpgeui	r4,r16,17708
81114a68:	81114d30 	cmpltui	r4,r16,17716
81114a6c:	81114b28 	cmpgeui	r4,r16,17708
81114a70:	81114d00 	call	881114d0 <__reset+0x20f14d0>
81114a74:	81114cdc 	xori	r4,r16,17715
81114a78:	81114bec 	andhi	r4,r16,17711
81114a7c:	81114b28 	cmpgeui	r4,r16,17708
81114a80:	81114b28 	cmpgeui	r4,r16,17708
81114a84:	81114bd8 	cmpnei	r4,r16,17711
81114a88:	81114b28 	cmpgeui	r4,r16,17708
81114a8c:	81114b60 	cmpeqi	r4,r16,17709
81114a90:	81114b28 	cmpgeui	r4,r16,17708
81114a94:	81114b28 	cmpgeui	r4,r16,17708
81114a98:	81114c60 	cmpeqi	r4,r16,17713
81114a9c:	d9809d15 	stw	r6,628(sp)
81114aa0:	3029883a 	mov	r20,r6
81114aa4:	e0800117 	ldw	r2,4(fp)
81114aa8:	0081aa0e 	bge	zero,r2,81115154 <__svfscanf_r+0x9e8>
81114aac:	e0800017 	ldw	r2,0(fp)
81114ab0:	a0ffffc3 	ldbu	r3,-1(r20)
81114ab4:	11000003 	ldbu	r4,0(r2)
81114ab8:	20ff6e1e 	bne	r4,r3,81114874 <__reset+0xfb0f4874>
81114abc:	e0c00117 	ldw	r3,4(fp)
81114ac0:	10800044 	addi	r2,r2,1
81114ac4:	e0800015 	stw	r2,0(fp)
81114ac8:	18bfffc4 	addi	r2,r3,-1
81114acc:	e0800115 	stw	r2,4(fp)
81114ad0:	94800044 	addi	r18,r18,1
81114ad4:	a00d883a 	mov	r6,r20
81114ad8:	003f6206 	br	81114864 <__reset+0xfb0f4864>
81114adc:	00bfffc4 	movi	r2,-1
81114ae0:	dfc0b417 	ldw	ra,720(sp)
81114ae4:	df00b317 	ldw	fp,716(sp)
81114ae8:	ddc0b217 	ldw	r23,712(sp)
81114aec:	dd80b117 	ldw	r22,708(sp)
81114af0:	dd40b017 	ldw	r21,704(sp)
81114af4:	dd00af17 	ldw	r20,700(sp)
81114af8:	dcc0ae17 	ldw	r19,696(sp)
81114afc:	dc80ad17 	ldw	r18,692(sp)
81114b00:	dc40ac17 	ldw	r17,688(sp)
81114b04:	dc00ab17 	ldw	r16,684(sp)
81114b08:	dec0b504 	addi	sp,sp,724
81114b0c:	f800283a 	ret
81114b10:	a0800043 	ldbu	r2,1(r20)
81114b14:	3029883a 	mov	r20,r6
81114b18:	8c400414 	ori	r17,r17,16
81114b1c:	10c03fcc 	andi	r3,r2,255
81114b20:	a1800044 	addi	r6,r20,1
81114b24:	20ff5e2e 	bgeu	r4,r3,811148a0 <__reset+0xfb0f48a0>
81114b28:	38c7883a 	add	r3,r7,r3
81114b2c:	18800043 	ldbu	r2,1(r3)
81114b30:	d9809d15 	stw	r6,628(sp)
81114b34:	00c00044 	movi	r3,1
81114b38:	108000cc 	andi	r2,r2,3
81114b3c:	10c18f26 	beq	r2,r3,8111517c <__svfscanf_r+0xa10>
81114b40:	e0800117 	ldw	r2,4(fp)
81114b44:	00808716 	blt	zero,r2,81114d64 <__svfscanf_r+0x5f8>
81114b48:	e00b883a 	mov	r5,fp
81114b4c:	b009883a 	mov	r4,r22
81114b50:	110fa900 	call	8110fa90 <__srefill_r>
81114b54:	1001431e 	bne	r2,zero,81115064 <__svfscanf_r+0x8f8>
81114b58:	b9c00017 	ldw	r7,0(r23)
81114b5c:	00008106 	br	81114d64 <__svfscanf_r+0x5f8>
81114b60:	e0800117 	ldw	r2,4(fp)
81114b64:	d9809d15 	stw	r6,628(sp)
81114b68:	0081a30e 	bge	zero,r2,811151f8 <__svfscanf_r+0xa8c>
81114b6c:	00a044b4 	movhi	r2,33042
81114b70:	10b26504 	addi	r2,r2,-13932
81114b74:	02000284 	movi	r8,10
81114b78:	d880a115 	stw	r2,644(sp)
81114b7c:	da009e15 	stw	r8,632(sp)
81114b80:	050000c4 	movi	r20,3
81114b84:	e0c00017 	ldw	r3,0(fp)
81114b88:	00000206 	br	81114b94 <__svfscanf_r+0x428>
81114b8c:	18c00044 	addi	r3,r3,1
81114b90:	e0c00015 	stw	r3,0(fp)
81114b94:	19000003 	ldbu	r4,0(r3)
81114b98:	20803fcc 	andi	r2,r4,255
81114b9c:	3885883a 	add	r2,r7,r2
81114ba0:	10800043 	ldbu	r2,1(r2)
81114ba4:	1140020c 	andi	r5,r2,8
81114ba8:	2801ab26 	beq	r5,zero,81115258 <__svfscanf_r+0xaec>
81114bac:	e0800117 	ldw	r2,4(fp)
81114bb0:	94800044 	addi	r18,r18,1
81114bb4:	10bfffc4 	addi	r2,r2,-1
81114bb8:	e0800115 	stw	r2,4(fp)
81114bbc:	00bff316 	blt	zero,r2,81114b8c <__reset+0xfb0f4b8c>
81114bc0:	e00b883a 	mov	r5,fp
81114bc4:	b009883a 	mov	r4,r22
81114bc8:	110fa900 	call	8110fa90 <__srefill_r>
81114bcc:	1001251e 	bne	r2,zero,81115064 <__svfscanf_r+0x8f8>
81114bd0:	b9c00017 	ldw	r7,0(r23)
81114bd4:	003feb06 	br	81114b84 <__reset+0xfb0f4b84>
81114bd8:	e0800117 	ldw	r2,4(fp)
81114bdc:	d9809d15 	stw	r6,628(sp)
81114be0:	00818b0e 	bge	zero,r2,81115210 <__svfscanf_r+0xaa4>
81114be4:	05000084 	movi	r20,2
81114be8:	003fe606 	br	81114b84 <__reset+0xfb0f4b84>
81114bec:	e0800117 	ldw	r2,4(fp)
81114bf0:	d9809d15 	stw	r6,628(sp)
81114bf4:	8c408814 	ori	r17,r17,544
81114bf8:	00801d0e 	bge	zero,r2,81114c70 <__svfscanf_r+0x504>
81114bfc:	00a044b4 	movhi	r2,33042
81114c00:	10b26504 	addi	r2,r2,-13932
81114c04:	02000404 	movi	r8,16
81114c08:	d880a115 	stw	r2,644(sp)
81114c0c:	da009e15 	stw	r8,632(sp)
81114c10:	050000c4 	movi	r20,3
81114c14:	003fdb06 	br	81114b84 <__reset+0xfb0f4b84>
81114c18:	e0800117 	ldw	r2,4(fp)
81114c1c:	d9809d15 	stw	r6,628(sp)
81114c20:	8c400054 	ori	r17,r17,1
81114c24:	00bfc80e 	bge	zero,r2,81114b48 <__reset+0xfb0f4b48>
81114c28:	00e04474 	movhi	r3,33041
81114c2c:	18c01404 	addi	r3,r3,80
81114c30:	02000284 	movi	r8,10
81114c34:	d8c0a115 	stw	r3,644(sp)
81114c38:	da009e15 	stw	r8,632(sp)
81114c3c:	050000c4 	movi	r20,3
81114c40:	003fd006 	br	81114b84 <__reset+0xfb0f4b84>
81114c44:	9cc002a4 	muli	r19,r19,10
81114c48:	a0800043 	ldbu	r2,1(r20)
81114c4c:	3029883a 	mov	r20,r6
81114c50:	98e7883a 	add	r19,r19,r3
81114c54:	9cfff404 	addi	r19,r19,-48
81114c58:	10c03fcc 	andi	r3,r2,255
81114c5c:	003f0e06 	br	81114898 <__reset+0xfb0f4898>
81114c60:	e0800117 	ldw	r2,4(fp)
81114c64:	d9809d15 	stw	r6,628(sp)
81114c68:	8c408014 	ori	r17,r17,512
81114c6c:	00bfe316 	blt	zero,r2,81114bfc <__reset+0xfb0f4bfc>
81114c70:	e00b883a 	mov	r5,fp
81114c74:	b009883a 	mov	r4,r22
81114c78:	110fa900 	call	8110fa90 <__srefill_r>
81114c7c:	1000f91e 	bne	r2,zero,81115064 <__svfscanf_r+0x8f8>
81114c80:	b9c00017 	ldw	r7,0(r23)
81114c84:	003fdd06 	br	81114bfc <__reset+0xfb0f4bfc>
81114c88:	e0800117 	ldw	r2,4(fp)
81114c8c:	d9809d15 	stw	r6,628(sp)
81114c90:	8c400054 	ori	r17,r17,1
81114c94:	0080140e 	bge	zero,r2,81114ce8 <__svfscanf_r+0x57c>
81114c98:	00a044b4 	movhi	r2,33042
81114c9c:	10b26504 	addi	r2,r2,-13932
81114ca0:	02000204 	movi	r8,8
81114ca4:	d880a115 	stw	r2,644(sp)
81114ca8:	da009e15 	stw	r8,632(sp)
81114cac:	050000c4 	movi	r20,3
81114cb0:	003fb406 	br	81114b84 <__reset+0xfb0f4b84>
81114cb4:	a0800043 	ldbu	r2,1(r20)
81114cb8:	8c400094 	ori	r17,r17,2
81114cbc:	3029883a 	mov	r20,r6
81114cc0:	10c03fcc 	andi	r3,r2,255
81114cc4:	003ef406 	br	81114898 <__reset+0xfb0f4898>
81114cc8:	e0800117 	ldw	r2,4(fp)
81114ccc:	d9809d15 	stw	r6,628(sp)
81114cd0:	0081420e 	bge	zero,r2,811151dc <__svfscanf_r+0xa70>
81114cd4:	05000104 	movi	r20,4
81114cd8:	003faa06 	br	81114b84 <__reset+0xfb0f4b84>
81114cdc:	e0800117 	ldw	r2,4(fp)
81114ce0:	d9809d15 	stw	r6,628(sp)
81114ce4:	00bfec16 	blt	zero,r2,81114c98 <__reset+0xfb0f4c98>
81114ce8:	e00b883a 	mov	r5,fp
81114cec:	b009883a 	mov	r4,r22
81114cf0:	110fa900 	call	8110fa90 <__srefill_r>
81114cf4:	1000db1e 	bne	r2,zero,81115064 <__svfscanf_r+0x8f8>
81114cf8:	b9c00017 	ldw	r7,0(r23)
81114cfc:	003fe606 	br	81114c98 <__reset+0xfb0f4c98>
81114d00:	d9809d15 	stw	r6,628(sp)
81114d04:	8880040c 	andi	r2,r17,16
81114d08:	10009c1e 	bne	r2,zero,81114f7c <__svfscanf_r+0x810>
81114d0c:	8880010c 	andi	r2,r17,4
81114d10:	10011e26 	beq	r2,zero,8111518c <__svfscanf_r+0xa20>
81114d14:	da009c17 	ldw	r8,624(sp)
81114d18:	3029883a 	mov	r20,r6
81114d1c:	40800017 	ldw	r2,0(r8)
81114d20:	42000104 	addi	r8,r8,4
81114d24:	da009c15 	stw	r8,624(sp)
81114d28:	1480000d 	sth	r18,0(r2)
81114d2c:	003ecc06 	br	81114860 <__reset+0xfb0f4860>
81114d30:	a0c00043 	ldbu	r3,1(r20)
81114d34:	19410c26 	beq	r3,r5,81115168 <__svfscanf_r+0x9fc>
81114d38:	8c400054 	ori	r17,r17,1
81114d3c:	3029883a 	mov	r20,r6
81114d40:	003ed506 	br	81114898 <__reset+0xfb0f4898>
81114d44:	a0800043 	ldbu	r2,1(r20)
81114d48:	8c400114 	ori	r17,r17,4
81114d4c:	3029883a 	mov	r20,r6
81114d50:	10c03fcc 	andi	r3,r2,255
81114d54:	003ed006 	br	81114898 <__reset+0xfb0f4898>
81114d58:	e0800117 	ldw	r2,4(fp)
81114d5c:	d9809d15 	stw	r6,628(sp)
81114d60:	00bf790e 	bge	zero,r2,81114b48 <__reset+0xfb0f4b48>
81114d64:	00a04474 	movhi	r2,33041
81114d68:	10801404 	addi	r2,r2,80
81114d6c:	02000284 	movi	r8,10
81114d70:	d880a115 	stw	r2,644(sp)
81114d74:	da009e15 	stw	r8,632(sp)
81114d78:	050000c4 	movi	r20,3
81114d7c:	003f8106 	br	81114b84 <__reset+0xfb0f4b84>
81114d80:	e0800117 	ldw	r2,4(fp)
81114d84:	d9809d15 	stw	r6,628(sp)
81114d88:	0080c40e 	bge	zero,r2,8111509c <__svfscanf_r+0x930>
81114d8c:	9800011e 	bne	r19,zero,81114d94 <__svfscanf_r+0x628>
81114d90:	04c00044 	movi	r19,1
81114d94:	8880004c 	andi	r2,r17,1
81114d98:	1000441e 	bne	r2,zero,81114eac <__svfscanf_r+0x740>
81114d9c:	8c40040c 	andi	r17,r17,16
81114da0:	8800da26 	beq	r17,zero,8111510c <__svfscanf_r+0x9a0>
81114da4:	0021883a 	mov	r16,zero
81114da8:	00000806 	br	81114dcc <__svfscanf_r+0x660>
81114dac:	1887883a 	add	r3,r3,r2
81114db0:	e00b883a 	mov	r5,fp
81114db4:	b009883a 	mov	r4,r22
81114db8:	e0c00015 	stw	r3,0(fp)
81114dbc:	80a1883a 	add	r16,r16,r2
81114dc0:	98a7c83a 	sub	r19,r19,r2
81114dc4:	110fa900 	call	8110fa90 <__srefill_r>
81114dc8:	1000ca1e 	bne	r2,zero,811150f4 <__svfscanf_r+0x988>
81114dcc:	e0800117 	ldw	r2,4(fp)
81114dd0:	e0c00017 	ldw	r3,0(fp)
81114dd4:	14fff516 	blt	r2,r19,81114dac <__reset+0xfb0f4dac>
81114dd8:	14c5c83a 	sub	r2,r2,r19
81114ddc:	1cd5883a 	add	r10,r3,r19
81114de0:	84e1883a 	add	r16,r16,r19
81114de4:	e0800115 	stw	r2,4(fp)
81114de8:	e2800015 	stw	r10,0(fp)
81114dec:	dd009d17 	ldw	r20,628(sp)
81114df0:	9425883a 	add	r18,r18,r16
81114df4:	a00d883a 	mov	r6,r20
81114df8:	003e9a06 	br	81114864 <__reset+0xfb0f4864>
81114dfc:	300b883a 	mov	r5,r6
81114e00:	d9005884 	addi	r4,sp,354
81114e04:	d9809d15 	stw	r6,628(sp)
81114e08:	111ad6c0 	call	8111ad6c <__sccl>
81114e0c:	1029883a 	mov	r20,r2
81114e10:	e0800117 	ldw	r2,4(fp)
81114e14:	0081050e 	bge	zero,r2,8111522c <__svfscanf_r+0xac0>
81114e18:	e1000017 	ldw	r4,0(fp)
81114e1c:	20800003 	ldbu	r2,0(r4)
81114e20:	98005926 	beq	r19,zero,81114f88 <__svfscanf_r+0x81c>
81114e24:	8c40040c 	andi	r17,r17,16
81114e28:	88005a26 	beq	r17,zero,81114f94 <__svfscanf_r+0x828>
81114e2c:	9823883a 	mov	r17,r19
81114e30:	0021883a 	mov	r16,zero
81114e34:	00000106 	br	81114e3c <__svfscanf_r+0x6d0>
81114e38:	20800003 	ldbu	r2,0(r4)
81114e3c:	10803fcc 	andi	r2,r2,255
81114e40:	d8c05884 	addi	r3,sp,354
81114e44:	1885883a 	add	r2,r3,r2
81114e48:	10800007 	ldb	r2,0(r2)
81114e4c:	1000ad26 	beq	r2,zero,81115104 <__svfscanf_r+0x998>
81114e50:	e0800117 	ldw	r2,4(fp)
81114e54:	21000044 	addi	r4,r4,1
81114e58:	84000044 	addi	r16,r16,1
81114e5c:	10bfffc4 	addi	r2,r2,-1
81114e60:	e0800115 	stw	r2,4(fp)
81114e64:	e1000015 	stw	r4,0(fp)
81114e68:	84c0a026 	beq	r16,r19,811150ec <__svfscanf_r+0x980>
81114e6c:	00bff216 	blt	zero,r2,81114e38 <__reset+0xfb0f4e38>
81114e70:	e00b883a 	mov	r5,fp
81114e74:	b009883a 	mov	r4,r22
81114e78:	110fa900 	call	8110fa90 <__srefill_r>
81114e7c:	10009a1e 	bne	r2,zero,811150e8 <__svfscanf_r+0x97c>
81114e80:	e1000017 	ldw	r4,0(fp)
81114e84:	003fec06 	br	81114e38 <__reset+0xfb0f4e38>
81114e88:	e0800117 	ldw	r2,4(fp)
81114e8c:	d9809d15 	stw	r6,628(sp)
81114e90:	0080eb0e 	bge	zero,r2,81115240 <__svfscanf_r+0xad4>
81114e94:	00a04474 	movhi	r2,33041
81114e98:	10801404 	addi	r2,r2,80
81114e9c:	d880a115 	stw	r2,644(sp)
81114ea0:	d8009e15 	stw	zero,632(sp)
81114ea4:	050000c4 	movi	r20,3
81114ea8:	003f3606 	br	81114b84 <__reset+0xfb0f4b84>
81114eac:	dd409904 	addi	r21,sp,612
81114eb0:	8c40040c 	andi	r17,r17,16
81114eb4:	01800204 	movi	r6,8
81114eb8:	000b883a 	mov	r5,zero
81114ebc:	a809883a 	mov	r4,r21
81114ec0:	dc409f15 	stw	r17,636(sp)
81114ec4:	110f76c0 	call	8110f76c <memset>
81114ec8:	dc409f17 	ldw	r17,636(sp)
81114ecc:	88006e26 	beq	r17,zero,81115088 <__svfscanf_r+0x91c>
81114ed0:	0029883a 	mov	r20,zero
81114ed4:	0023883a 	mov	r17,zero
81114ed8:	11190100 	call	81119010 <__locale_mb_cur_max>
81114edc:	14406126 	beq	r2,r17,81115064 <__svfscanf_r+0x8f8>
81114ee0:	e0800017 	ldw	r2,0(fp)
81114ee4:	e0c00117 	ldw	r3,4(fp)
81114ee8:	d9000104 	addi	r4,sp,4
81114eec:	12000003 	ldbu	r8,0(r2)
81114ef0:	18ffffc4 	addi	r3,r3,-1
81114ef4:	10800044 	addi	r2,r2,1
81114ef8:	e0c00115 	stw	r3,4(fp)
81114efc:	e0800015 	stw	r2,0(fp)
81114f00:	8c000044 	addi	r16,r17,1
81114f04:	dd400015 	stw	r21,0(sp)
81114f08:	2463883a 	add	r17,r4,r17
81114f0c:	200d883a 	mov	r6,r4
81114f10:	a00b883a 	mov	r5,r20
81114f14:	800f883a 	mov	r7,r16
81114f18:	b009883a 	mov	r4,r22
81114f1c:	8a000005 	stb	r8,0(r17)
81114f20:	11190cc0 	call	811190cc <_mbrtowc_r>
81114f24:	017fffc4 	movi	r5,-1
81114f28:	11404e26 	beq	r2,r5,81115064 <__svfscanf_r+0x8f8>
81114f2c:	1000601e 	bne	r2,zero,811150b0 <__svfscanf_r+0x944>
81114f30:	da009f17 	ldw	r8,636(sp)
81114f34:	4000641e 	bne	r8,zero,811150c8 <__svfscanf_r+0x95c>
81114f38:	a0000015 	stw	zero,0(r20)
81114f3c:	9425883a 	add	r18,r18,r16
81114f40:	9967883a 	add	r19,r19,r5
81114f44:	a5000104 	addi	r20,r20,4
81114f48:	e0800117 	ldw	r2,4(fp)
81114f4c:	0023883a 	mov	r17,zero
81114f50:	00804b16 	blt	zero,r2,81115080 <__svfscanf_r+0x914>
81114f54:	e00b883a 	mov	r5,fp
81114f58:	b009883a 	mov	r4,r22
81114f5c:	110fa900 	call	8110fa90 <__srefill_r>
81114f60:	10004726 	beq	r2,zero,81115080 <__svfscanf_r+0x914>
81114f64:	88003f1e 	bne	r17,zero,81115064 <__svfscanf_r+0x8f8>
81114f68:	d8c09f17 	ldw	r3,636(sp)
81114f6c:	1800031e 	bne	r3,zero,81114f7c <__svfscanf_r+0x810>
81114f70:	da00a017 	ldw	r8,640(sp)
81114f74:	42000044 	addi	r8,r8,1
81114f78:	da00a015 	stw	r8,640(sp)
81114f7c:	dd009d17 	ldw	r20,628(sp)
81114f80:	a00d883a 	mov	r6,r20
81114f84:	003e3706 	br	81114864 <__reset+0xfb0f4864>
81114f88:	8c40040c 	andi	r17,r17,16
81114f8c:	04ffffc4 	movi	r19,-1
81114f90:	883fa61e 	bne	r17,zero,81114e2c <__reset+0xfb0f4e2c>
81114f94:	da009c17 	ldw	r8,624(sp)
81114f98:	9abfffc4 	addi	r10,r19,-1
81114f9c:	44000017 	ldw	r16,0(r8)
81114fa0:	44400104 	addi	r17,r8,4
81114fa4:	8007883a 	mov	r3,r16
81114fa8:	82ab883a 	add	r21,r16,r10
81114fac:	00000306 	br	81114fbc <__svfscanf_r+0x850>
81114fb0:	e1000017 	ldw	r4,0(fp)
81114fb4:	9807883a 	mov	r3,r19
81114fb8:	20800003 	ldbu	r2,0(r4)
81114fbc:	10803fcc 	andi	r2,r2,255
81114fc0:	d9405884 	addi	r5,sp,354
81114fc4:	2885883a 	add	r2,r5,r2
81114fc8:	10800007 	ldb	r2,0(r2)
81114fcc:	10004b26 	beq	r2,zero,811150fc <__svfscanf_r+0x990>
81114fd0:	e0800117 	ldw	r2,4(fp)
81114fd4:	21400044 	addi	r5,r4,1
81114fd8:	e1400015 	stw	r5,0(fp)
81114fdc:	10bfffc4 	addi	r2,r2,-1
81114fe0:	e0800115 	stw	r2,4(fp)
81114fe4:	20800003 	ldbu	r2,0(r4)
81114fe8:	1cc00044 	addi	r19,r3,1
81114fec:	18800005 	stb	r2,0(r3)
81114ff0:	1d400726 	beq	r3,r21,81115010 <__svfscanf_r+0x8a4>
81114ff4:	e0800117 	ldw	r2,4(fp)
81114ff8:	00bfed16 	blt	zero,r2,81114fb0 <__reset+0xfb0f4fb0>
81114ffc:	e00b883a 	mov	r5,fp
81115000:	b009883a 	mov	r4,r22
81115004:	110fa900 	call	8110fa90 <__srefill_r>
81115008:	103fe926 	beq	r2,zero,81114fb0 <__reset+0xfb0f4fb0>
8111500c:	84c01526 	beq	r16,r19,81115064 <__svfscanf_r+0x8f8>
81115010:	9c21c83a 	sub	r16,r19,r16
81115014:	803e1726 	beq	r16,zero,81114874 <__reset+0xfb0f4874>
81115018:	da00a017 	ldw	r8,640(sp)
8111501c:	98000005 	stb	zero,0(r19)
81115020:	dc409c15 	stw	r17,624(sp)
81115024:	42000044 	addi	r8,r8,1
81115028:	da00a015 	stw	r8,640(sp)
8111502c:	9425883a 	add	r18,r18,r16
81115030:	a00d883a 	mov	r6,r20
81115034:	003e0b06 	br	81114864 <__reset+0xfb0f4864>
81115038:	017fff84 	movi	r5,-2
8111503c:	11439b1e 	bne	r2,r5,81115eac <__svfscanf_r+0x1740>
81115040:	8821883a 	mov	r16,r17
81115044:	e0800117 	ldw	r2,4(fp)
81115048:	0082e516 	blt	zero,r2,81115be0 <__svfscanf_r+0x1474>
8111504c:	e00b883a 	mov	r5,fp
81115050:	b009883a 	mov	r4,r22
81115054:	110fa900 	call	8110fa90 <__srefill_r>
81115058:	1002e126 	beq	r2,zero,81115be0 <__svfscanf_r+0x1474>
8111505c:	dc409f17 	ldw	r17,636(sp)
81115060:	8002e826 	beq	r16,zero,81115c04 <__svfscanf_r+0x1498>
81115064:	da00a017 	ldw	r8,640(sp)
81115068:	403e9c26 	beq	r8,zero,81114adc <__reset+0xfb0f4adc>
8111506c:	e080030b 	ldhu	r2,12(fp)
81115070:	1080100c 	andi	r2,r2,64
81115074:	103e991e 	bne	r2,zero,81114adc <__reset+0xfb0f4adc>
81115078:	4005883a 	mov	r2,r8
8111507c:	003e9806 	br	81114ae0 <__reset+0xfb0f4ae0>
81115080:	983f951e 	bne	r19,zero,81114ed8 <__reset+0xfb0f4ed8>
81115084:	003fb806 	br	81114f68 <__reset+0xfb0f4f68>
81115088:	da009c17 	ldw	r8,624(sp)
8111508c:	45000017 	ldw	r20,0(r8)
81115090:	42000104 	addi	r8,r8,4
81115094:	da009c15 	stw	r8,624(sp)
81115098:	003f8e06 	br	81114ed4 <__reset+0xfb0f4ed4>
8111509c:	e00b883a 	mov	r5,fp
811150a0:	b009883a 	mov	r4,r22
811150a4:	110fa900 	call	8110fa90 <__srefill_r>
811150a8:	103f3826 	beq	r2,zero,81114d8c <__reset+0xfb0f4d8c>
811150ac:	003fed06 	br	81115064 <__reset+0xfb0f5064>
811150b0:	00ffff84 	movi	r3,-2
811150b4:	10c0071e 	bne	r2,r3,811150d4 <__svfscanf_r+0x968>
811150b8:	e0800117 	ldw	r2,4(fp)
811150bc:	8023883a 	mov	r17,r16
811150c0:	00bf8516 	blt	zero,r2,81114ed8 <__reset+0xfb0f4ed8>
811150c4:	003fa306 	br	81114f54 <__reset+0xfb0f4f54>
811150c8:	9425883a 	add	r18,r18,r16
811150cc:	9cffffc4 	addi	r19,r19,-1
811150d0:	003f9d06 	br	81114f48 <__reset+0xfb0f4f48>
811150d4:	da009f17 	ldw	r8,636(sp)
811150d8:	9425883a 	add	r18,r18,r16
811150dc:	9cffffc4 	addi	r19,r19,-1
811150e0:	403f9826 	beq	r8,zero,81114f44 <__reset+0xfb0f4f44>
811150e4:	003f9806 	br	81114f48 <__reset+0xfb0f4f48>
811150e8:	8023883a 	mov	r17,r16
811150ec:	8821883a 	mov	r16,r17
811150f0:	003fce06 	br	8111502c <__reset+0xfb0f502c>
811150f4:	803f3d1e 	bne	r16,zero,81114dec <__reset+0xfb0f4dec>
811150f8:	003fda06 	br	81115064 <__reset+0xfb0f5064>
811150fc:	1827883a 	mov	r19,r3
81115100:	003fc306 	br	81115010 <__reset+0xfb0f5010>
81115104:	803fc91e 	bne	r16,zero,8111502c <__reset+0xfb0f502c>
81115108:	003dda06 	br	81114874 <__reset+0xfb0f4874>
8111510c:	da009c17 	ldw	r8,624(sp)
81115110:	df000015 	stw	fp,0(sp)
81115114:	980f883a 	mov	r7,r19
81115118:	41400017 	ldw	r5,0(r8)
8111511c:	01800044 	movi	r6,1
81115120:	b009883a 	mov	r4,r22
81115124:	11181e40 	call	811181e4 <_fread_r>
81115128:	da009c17 	ldw	r8,624(sp)
8111512c:	40c00104 	addi	r3,r8,4
81115130:	103fcc26 	beq	r2,zero,81115064 <__reset+0xfb0f5064>
81115134:	da00a017 	ldw	r8,640(sp)
81115138:	dd009d17 	ldw	r20,628(sp)
8111513c:	90a5883a 	add	r18,r18,r2
81115140:	42000044 	addi	r8,r8,1
81115144:	da00a015 	stw	r8,640(sp)
81115148:	d8c09c15 	stw	r3,624(sp)
8111514c:	a00d883a 	mov	r6,r20
81115150:	003dc406 	br	81114864 <__reset+0xfb0f4864>
81115154:	e00b883a 	mov	r5,fp
81115158:	b009883a 	mov	r4,r22
8111515c:	110fa900 	call	8110fa90 <__srefill_r>
81115160:	103e5226 	beq	r2,zero,81114aac <__reset+0xfb0f4aac>
81115164:	003fbf06 	br	81115064 <__reset+0xfb0f5064>
81115168:	a0800083 	ldbu	r2,2(r20)
8111516c:	8c400094 	ori	r17,r17,2
81115170:	a5000084 	addi	r20,r20,2
81115174:	10c03fcc 	andi	r3,r2,255
81115178:	003dc706 	br	81114898 <__reset+0xfb0f4898>
8111517c:	e0800117 	ldw	r2,4(fp)
81115180:	88e2b03a 	or	r17,r17,r3
81115184:	00bef716 	blt	zero,r2,81114d64 <__reset+0xfb0f4d64>
81115188:	003e6f06 	br	81114b48 <__reset+0xfb0f4b48>
8111518c:	8880004c 	andi	r2,r17,1
81115190:	10000b1e 	bne	r2,zero,811151c0 <__svfscanf_r+0xa54>
81115194:	8c40008c 	andi	r17,r17,2
81115198:	88000926 	beq	r17,zero,811151c0 <__svfscanf_r+0xa54>
8111519c:	da009c17 	ldw	r8,624(sp)
811151a0:	9007d7fa 	srai	r3,r18,31
811151a4:	dd009d17 	ldw	r20,628(sp)
811151a8:	40800017 	ldw	r2,0(r8)
811151ac:	42000104 	addi	r8,r8,4
811151b0:	da009c15 	stw	r8,624(sp)
811151b4:	14800015 	stw	r18,0(r2)
811151b8:	10c00115 	stw	r3,4(r2)
811151bc:	003da806 	br	81114860 <__reset+0xfb0f4860>
811151c0:	da009c17 	ldw	r8,624(sp)
811151c4:	dd009d17 	ldw	r20,628(sp)
811151c8:	40800017 	ldw	r2,0(r8)
811151cc:	42000104 	addi	r8,r8,4
811151d0:	da009c15 	stw	r8,624(sp)
811151d4:	14800015 	stw	r18,0(r2)
811151d8:	003da106 	br	81114860 <__reset+0xfb0f4860>
811151dc:	e00b883a 	mov	r5,fp
811151e0:	b009883a 	mov	r4,r22
811151e4:	110fa900 	call	8110fa90 <__srefill_r>
811151e8:	103f9e1e 	bne	r2,zero,81115064 <__reset+0xfb0f5064>
811151ec:	b9c00017 	ldw	r7,0(r23)
811151f0:	05000104 	movi	r20,4
811151f4:	003e6306 	br	81114b84 <__reset+0xfb0f4b84>
811151f8:	e00b883a 	mov	r5,fp
811151fc:	b009883a 	mov	r4,r22
81115200:	110fa900 	call	8110fa90 <__srefill_r>
81115204:	103f971e 	bne	r2,zero,81115064 <__reset+0xfb0f5064>
81115208:	b9c00017 	ldw	r7,0(r23)
8111520c:	003e5706 	br	81114b6c <__reset+0xfb0f4b6c>
81115210:	e00b883a 	mov	r5,fp
81115214:	b009883a 	mov	r4,r22
81115218:	110fa900 	call	8110fa90 <__srefill_r>
8111521c:	103f911e 	bne	r2,zero,81115064 <__reset+0xfb0f5064>
81115220:	b9c00017 	ldw	r7,0(r23)
81115224:	05000084 	movi	r20,2
81115228:	003e5606 	br	81114b84 <__reset+0xfb0f4b84>
8111522c:	e00b883a 	mov	r5,fp
81115230:	b009883a 	mov	r4,r22
81115234:	110fa900 	call	8110fa90 <__srefill_r>
81115238:	103ef726 	beq	r2,zero,81114e18 <__reset+0xfb0f4e18>
8111523c:	003f8906 	br	81115064 <__reset+0xfb0f5064>
81115240:	e00b883a 	mov	r5,fp
81115244:	b009883a 	mov	r4,r22
81115248:	110fa900 	call	8110fa90 <__srefill_r>
8111524c:	103f851e 	bne	r2,zero,81115064 <__reset+0xfb0f5064>
81115250:	b9c00017 	ldw	r7,0(r23)
81115254:	003f0f06 	br	81114e94 <__reset+0xfb0f4e94>
81115258:	014000c4 	movi	r5,3
8111525c:	a1414a26 	beq	r20,r5,81115788 <__svfscanf_r+0x101c>
81115260:	01000104 	movi	r4,4
81115264:	a101f11e 	bne	r20,r4,81115a2c <__svfscanf_r+0x12c0>
81115268:	b009883a 	mov	r4,r22
8111526c:	11190340 	call	81119034 <_localeconv_r>
81115270:	10800017 	ldw	r2,0(r2)
81115274:	98ffffc4 	addi	r3,r19,-1
81115278:	d880a315 	stw	r2,652(sp)
8111527c:	00805704 	movi	r2,348
81115280:	10c21e2e 	bgeu	r2,r3,81115afc <__svfscanf_r+0x1390>
81115284:	9cffa8c4 	addi	r19,r19,-349
81115288:	dcc0a215 	stw	r19,648(sp)
8111528c:	04c05744 	movi	r19,349
81115290:	8d01e014 	ori	r20,r17,1920
81115294:	0023883a 	mov	r17,zero
81115298:	dc000104 	addi	r16,sp,4
8111529c:	8805883a 	mov	r2,r17
811152a0:	0019883a 	mov	r12,zero
811152a4:	8023883a 	mov	r17,r16
811152a8:	b007883a 	mov	r3,r22
811152ac:	9821883a 	mov	r16,r19
811152b0:	002b883a 	mov	r21,zero
811152b4:	d800a515 	stw	zero,660(sp)
811152b8:	d800a415 	stw	zero,656(sp)
811152bc:	d8009f15 	stw	zero,636(sp)
811152c0:	01c01384 	movi	r7,78
811152c4:	602d883a 	mov	r22,r12
811152c8:	1027883a 	mov	r19,r2
811152cc:	e1000017 	ldw	r4,0(fp)
811152d0:	21400003 	ldbu	r5,0(r4)
811152d4:	28bff544 	addi	r2,r5,-43
811152d8:	10803fcc 	andi	r2,r2,255
811152dc:	38810e36 	bltu	r7,r2,81115718 <__svfscanf_r+0xfac>
811152e0:	100490ba 	slli	r2,r2,2
811152e4:	01a04474 	movhi	r6,33041
811152e8:	3194be04 	addi	r6,r6,21240
811152ec:	1185883a 	add	r2,r2,r6
811152f0:	10800017 	ldw	r2,0(r2)
811152f4:	1000683a 	jmp	r2
811152f8:	811155f0 	cmpltui	r4,r16,17751
811152fc:	81115718 	cmpnei	r4,r16,17756
81115300:	811155f0 	cmpltui	r4,r16,17751
81115304:	81115718 	cmpnei	r4,r16,17756
81115308:	81115718 	cmpnei	r4,r16,17756
8111530c:	811155c4 	addi	r4,r16,17751
81115310:	81115434 	orhi	r4,r16,17744
81115314:	81115434 	orhi	r4,r16,17744
81115318:	81115434 	orhi	r4,r16,17744
8111531c:	81115434 	orhi	r4,r16,17744
81115320:	81115434 	orhi	r4,r16,17744
81115324:	81115434 	orhi	r4,r16,17744
81115328:	81115434 	orhi	r4,r16,17744
8111532c:	81115434 	orhi	r4,r16,17744
81115330:	81115434 	orhi	r4,r16,17744
81115334:	81115718 	cmpnei	r4,r16,17756
81115338:	81115718 	cmpnei	r4,r16,17756
8111533c:	81115718 	cmpnei	r4,r16,17756
81115340:	81115718 	cmpnei	r4,r16,17756
81115344:	81115718 	cmpnei	r4,r16,17756
81115348:	81115718 	cmpnei	r4,r16,17756
8111534c:	81115718 	cmpnei	r4,r16,17756
81115350:	81115708 	cmpgei	r4,r16,17756
81115354:	81115718 	cmpnei	r4,r16,17756
81115358:	81115718 	cmpnei	r4,r16,17756
8111535c:	81115718 	cmpnei	r4,r16,17756
81115360:	811156c4 	addi	r4,r16,17755
81115364:	811156a8 	cmpgeui	r4,r16,17754
81115368:	81115718 	cmpnei	r4,r16,17756
8111536c:	81115718 	cmpnei	r4,r16,17756
81115370:	81115674 	orhi	r4,r16,17753
81115374:	81115718 	cmpnei	r4,r16,17756
81115378:	81115718 	cmpnei	r4,r16,17756
8111537c:	81115718 	cmpnei	r4,r16,17756
81115380:	81115718 	cmpnei	r4,r16,17756
81115384:	8111563c 	xorhi	r4,r16,17752
81115388:	81115718 	cmpnei	r4,r16,17756
8111538c:	81115718 	cmpnei	r4,r16,17756
81115390:	81115718 	cmpnei	r4,r16,17756
81115394:	81115718 	cmpnei	r4,r16,17756
81115398:	81115718 	cmpnei	r4,r16,17756
8111539c:	81115620 	cmpeqi	r4,r16,17752
811153a0:	81115718 	cmpnei	r4,r16,17756
811153a4:	81115718 	cmpnei	r4,r16,17756
811153a8:	81115718 	cmpnei	r4,r16,17756
811153ac:	81115718 	cmpnei	r4,r16,17756
811153b0:	81115604 	addi	r4,r16,17752
811153b4:	81115718 	cmpnei	r4,r16,17756
811153b8:	81115718 	cmpnei	r4,r16,17756
811153bc:	81115718 	cmpnei	r4,r16,17756
811153c0:	81115718 	cmpnei	r4,r16,17756
811153c4:	81115718 	cmpnei	r4,r16,17756
811153c8:	81115718 	cmpnei	r4,r16,17756
811153cc:	81115718 	cmpnei	r4,r16,17756
811153d0:	81115708 	cmpgei	r4,r16,17756
811153d4:	81115718 	cmpnei	r4,r16,17756
811153d8:	81115718 	cmpnei	r4,r16,17756
811153dc:	81115718 	cmpnei	r4,r16,17756
811153e0:	811156c4 	addi	r4,r16,17755
811153e4:	811156a8 	cmpgeui	r4,r16,17754
811153e8:	81115718 	cmpnei	r4,r16,17756
811153ec:	81115718 	cmpnei	r4,r16,17756
811153f0:	81115674 	orhi	r4,r16,17753
811153f4:	81115718 	cmpnei	r4,r16,17756
811153f8:	81115718 	cmpnei	r4,r16,17756
811153fc:	81115718 	cmpnei	r4,r16,17756
81115400:	81115718 	cmpnei	r4,r16,17756
81115404:	8111563c 	xorhi	r4,r16,17752
81115408:	81115718 	cmpnei	r4,r16,17756
8111540c:	81115718 	cmpnei	r4,r16,17756
81115410:	81115718 	cmpnei	r4,r16,17756
81115414:	81115718 	cmpnei	r4,r16,17756
81115418:	81115718 	cmpnei	r4,r16,17756
8111541c:	81115620 	cmpeqi	r4,r16,17752
81115420:	81115718 	cmpnei	r4,r16,17756
81115424:	81115718 	cmpnei	r4,r16,17756
81115428:	81115718 	cmpnei	r4,r16,17756
8111542c:	81115718 	cmpnei	r4,r16,17756
81115430:	81115604 	addi	r4,r16,17752
81115434:	a8803fcc 	andi	r2,r21,255
81115438:	1080201c 	xori	r2,r2,128
8111543c:	10bfe004 	addi	r2,r2,-128
81115440:	b085883a 	add	r2,r22,r2
81115444:	10000d1e 	bne	r2,zero,8111547c <__svfscanf_r+0xd10>
81115448:	00bf9fc4 	movi	r2,-385
8111544c:	a0a8703a 	and	r20,r20,r2
81115450:	89400005 	stb	r5,0(r17)
81115454:	8c400044 	addi	r17,r17,1
81115458:	e0800117 	ldw	r2,4(fp)
8111545c:	843fffc4 	addi	r16,r16,-1
81115460:	94800044 	addi	r18,r18,1
81115464:	10bfffc4 	addi	r2,r2,-1
81115468:	e0800115 	stw	r2,4(fp)
8111546c:	0080b40e 	bge	zero,r2,81115740 <__svfscanf_r+0xfd4>
81115470:	21000044 	addi	r4,r4,1
81115474:	e1000015 	stw	r4,0(fp)
81115478:	803f941e 	bne	r16,zero,811152cc <__reset+0xfb0f52cc>
8111547c:	8821883a 	mov	r16,r17
81115480:	b019883a 	mov	r12,r22
81115484:	9823883a 	mov	r17,r19
81115488:	182d883a 	mov	r22,r3
8111548c:	9801961e 	bne	r19,zero,81115ae8 <__svfscanf_r+0x137c>
81115490:	633fffc4 	addi	r12,r12,-1
81115494:	00800044 	movi	r2,1
81115498:	1302882e 	bgeu	r2,r12,81115ebc <__svfscanf_r+0x1750>
8111549c:	a8803fcc 	andi	r2,r21,255
811154a0:	1080201c 	xori	r2,r2,128
811154a4:	10bfe004 	addi	r2,r2,-128
811154a8:	113fffc4 	addi	r4,r2,-1
811154ac:	01400184 	movi	r5,6
811154b0:	29001136 	bltu	r5,r4,811154f8 <__svfscanf_r+0xd8c>
811154b4:	01000084 	movi	r4,2
811154b8:	2082900e 	bge	r4,r2,81115efc <__svfscanf_r+0x1790>
811154bc:	00c000c4 	movi	r3,3
811154c0:	10c00d26 	beq	r2,r3,811154f8 <__svfscanf_r+0xd8c>
811154c4:	9425c83a 	sub	r18,r18,r16
811154c8:	1827883a 	mov	r19,r3
811154cc:	843fffc4 	addi	r16,r16,-1
811154d0:	81400007 	ldb	r5,0(r16)
811154d4:	e00d883a 	mov	r6,fp
811154d8:	b009883a 	mov	r4,r22
811154dc:	111e3dc0 	call	8111e3dc <_ungetc_r>
811154e0:	a8bfffc4 	addi	r2,r21,-1
811154e4:	10c03fcc 	andi	r3,r2,255
811154e8:	8493883a 	add	r9,r16,r18
811154ec:	102b883a 	mov	r21,r2
811154f0:	98fff636 	bltu	r19,r3,811154cc <__reset+0xfb0f54cc>
811154f4:	4825883a 	mov	r18,r9
811154f8:	a080400c 	andi	r2,r20,256
811154fc:	10001426 	beq	r2,zero,81115550 <__svfscanf_r+0xde4>
81115500:	a081000c 	andi	r2,r20,1024
81115504:	1002571e 	bne	r2,zero,81115e64 <__svfscanf_r+0x16f8>
81115508:	817fffc7 	ldb	r5,-1(r16)
8111550c:	00801944 	movi	r2,101
81115510:	84ffffc4 	addi	r19,r16,-1
81115514:	957fffc4 	addi	r21,r18,-1
81115518:	28800826 	beq	r5,r2,8111553c <__svfscanf_r+0xdd0>
8111551c:	00801144 	movi	r2,69
81115520:	28800626 	beq	r5,r2,8111553c <__svfscanf_r+0xdd0>
81115524:	e00d883a 	mov	r6,fp
81115528:	b009883a 	mov	r4,r22
8111552c:	111e3dc0 	call	8111e3dc <_ungetc_r>
81115530:	817fff87 	ldb	r5,-2(r16)
81115534:	84ffff84 	addi	r19,r16,-2
81115538:	957fff84 	addi	r21,r18,-2
8111553c:	e00d883a 	mov	r6,fp
81115540:	b009883a 	mov	r4,r22
81115544:	111e3dc0 	call	8111e3dc <_ungetc_r>
81115548:	a825883a 	mov	r18,r21
8111554c:	9821883a 	mov	r16,r19
81115550:	a080040c 	andi	r2,r20,16
81115554:	103e891e 	bne	r2,zero,81114f7c <__reset+0xfb0f4f7c>
81115558:	80000005 	stb	zero,0(r16)
8111555c:	a081800c 	andi	r2,r20,1536
81115560:	01010004 	movi	r4,1024
81115564:	1101dd26 	beq	r2,r4,81115cdc <__svfscanf_r+0x1570>
81115568:	da00a417 	ldw	r8,656(sp)
8111556c:	4001e71e 	bne	r8,zero,81115d0c <__svfscanf_r+0x15a0>
81115570:	000d883a 	mov	r6,zero
81115574:	d9400104 	addi	r5,sp,4
81115578:	b009883a 	mov	r4,r22
8111557c:	111af8c0 	call	8111af8c <_strtod_r>
81115580:	1021883a 	mov	r16,r2
81115584:	a080004c 	andi	r2,r20,1
81115588:	1000021e 	bne	r2,zero,81115594 <__svfscanf_r+0xe28>
8111558c:	a2c0008c 	andi	r11,r20,2
81115590:	5801e826 	beq	r11,zero,81115d34 <__svfscanf_r+0x15c8>
81115594:	da009c17 	ldw	r8,624(sp)
81115598:	40800017 	ldw	r2,0(r8)
8111559c:	42000104 	addi	r8,r8,4
811155a0:	da009c15 	stw	r8,624(sp)
811155a4:	14000015 	stw	r16,0(r2)
811155a8:	10c00115 	stw	r3,4(r2)
811155ac:	da00a017 	ldw	r8,640(sp)
811155b0:	dd009d17 	ldw	r20,628(sp)
811155b4:	42000044 	addi	r8,r8,1
811155b8:	da00a015 	stw	r8,640(sp)
811155bc:	a00d883a 	mov	r6,r20
811155c0:	003ca806 	br	81114864 <__reset+0xfb0f4864>
811155c4:	a080400c 	andi	r2,r20,256
811155c8:	103f9a26 	beq	r2,zero,81115434 <__reset+0xfb0f5434>
811155cc:	da00a217 	ldw	r8,648(sp)
811155d0:	00bfdfc4 	movi	r2,-129
811155d4:	a0a8703a 	and	r20,r20,r2
811155d8:	9cc00044 	addi	r19,r19,1
811155dc:	403f9e26 	beq	r8,zero,81115458 <__reset+0xfb0f5458>
811155e0:	423fffc4 	addi	r8,r8,-1
811155e4:	da00a215 	stw	r8,648(sp)
811155e8:	84000044 	addi	r16,r16,1
811155ec:	003f9a06 	br	81115458 <__reset+0xfb0f5458>
811155f0:	a080200c 	andi	r2,r20,128
811155f4:	103fa126 	beq	r2,zero,8111547c <__reset+0xfb0f547c>
811155f8:	00bfdfc4 	movi	r2,-129
811155fc:	a0a8703a 	and	r20,r20,r2
81115600:	003f9306 	br	81115450 <__reset+0xfb0f5450>
81115604:	a8803fcc 	andi	r2,r21,255
81115608:	1080201c 	xori	r2,r2,128
8111560c:	10bfe004 	addi	r2,r2,-128
81115610:	020001c4 	movi	r8,7
81115614:	123f991e 	bne	r2,r8,8111547c <__reset+0xfb0f547c>
81115618:	05400204 	movi	r21,8
8111561c:	003f8c06 	br	81115450 <__reset+0xfb0f5450>
81115620:	a8803fcc 	andi	r2,r21,255
81115624:	1080201c 	xori	r2,r2,128
81115628:	10bfe004 	addi	r2,r2,-128
8111562c:	01800184 	movi	r6,6
81115630:	11bf921e 	bne	r2,r6,8111547c <__reset+0xfb0f547c>
81115634:	054001c4 	movi	r21,7
81115638:	003f8506 	br	81115450 <__reset+0xfb0f5450>
8111563c:	b000491e 	bne	r22,zero,81115764 <__svfscanf_r+0xff8>
81115640:	9800031e 	bne	r19,zero,81115650 <__svfscanf_r+0xee4>
81115644:	a081c00c 	andi	r2,r20,1792
81115648:	0181c004 	movi	r6,1792
8111564c:	11819f26 	beq	r2,r6,81115ccc <__svfscanf_r+0x1560>
81115650:	a8803fcc 	andi	r2,r21,255
81115654:	1080201c 	xori	r2,r2,128
81115658:	10bfe004 	addi	r2,r2,-128
8111565c:	01800044 	movi	r6,1
81115660:	11800226 	beq	r2,r6,8111566c <__svfscanf_r+0xf00>
81115664:	01800104 	movi	r6,4
81115668:	11bf841e 	bne	r2,r6,8111547c <__reset+0xfb0f547c>
8111566c:	ad400044 	addi	r21,r21,1
81115670:	003f7706 	br	81115450 <__reset+0xfb0f5450>
81115674:	a8803fcc 	andi	r2,r21,255
81115678:	1080201c 	xori	r2,r2,128
8111567c:	10bfe004 	addi	r2,r2,-128
81115680:	10003c1e 	bne	r2,zero,81115774 <__svfscanf_r+0x1008>
81115684:	9801141e 	bne	r19,zero,81115ad8 <__svfscanf_r+0x136c>
81115688:	a081c00c 	andi	r2,r20,1792
8111568c:	0181c004 	movi	r6,1792
81115690:	11818226 	beq	r2,r6,81115c9c <__svfscanf_r+0x1530>
81115694:	8821883a 	mov	r16,r17
81115698:	b019883a 	mov	r12,r22
8111569c:	9823883a 	mov	r17,r19
811156a0:	182d883a 	mov	r22,r3
811156a4:	003f7a06 	br	81115490 <__reset+0xfb0f5490>
811156a8:	a8803fcc 	andi	r2,r21,255
811156ac:	1080201c 	xori	r2,r2,128
811156b0:	10bfe004 	addi	r2,r2,-128
811156b4:	01800084 	movi	r6,2
811156b8:	11bf701e 	bne	r2,r6,8111547c <__reset+0xfb0f547c>
811156bc:	054000c4 	movi	r21,3
811156c0:	003f6306 	br	81115450 <__reset+0xfb0f5450>
811156c4:	a081400c 	andi	r2,r20,1280
811156c8:	01810004 	movi	r6,1024
811156cc:	11800326 	beq	r2,r6,811156dc <__svfscanf_r+0xf70>
811156d0:	a184703a 	and	r2,r20,r6
811156d4:	103f6926 	beq	r2,zero,8111547c <__reset+0xfb0f547c>
811156d8:	983fee26 	beq	r19,zero,81115694 <__reset+0xfb0f5694>
811156dc:	a080800c 	andi	r2,r20,512
811156e0:	1000041e 	bne	r2,zero,811156f4 <__svfscanf_r+0xf88>
811156e4:	da009f17 	ldw	r8,636(sp)
811156e8:	dc40a515 	stw	r17,660(sp)
811156ec:	9a27c83a 	sub	r19,r19,r8
811156f0:	dcc0a415 	stw	r19,656(sp)
811156f4:	00be1fc4 	movi	r2,-1921
811156f8:	a0a8703a 	and	r20,r20,r2
811156fc:	a5006014 	ori	r20,r20,384
81115700:	0027883a 	mov	r19,zero
81115704:	003f5206 	br	81115450 <__reset+0xfb0f5450>
81115708:	00800044 	movi	r2,1
8111570c:	b0bf5b1e 	bne	r22,r2,8111547c <__reset+0xfb0f547c>
81115710:	05800084 	movi	r22,2
81115714:	003f4e06 	br	81115450 <__reset+0xfb0f5450>
81115718:	d980a317 	ldw	r6,652(sp)
8111571c:	30800003 	ldbu	r2,0(r6)
81115720:	29803fcc 	andi	r6,r5,255
81115724:	30bf551e 	bne	r6,r2,8111547c <__reset+0xfb0f547c>
81115728:	a080800c 	andi	r2,r20,512
8111572c:	103f5326 	beq	r2,zero,8111547c <__reset+0xfb0f547c>
81115730:	023f5fc4 	movi	r8,-641
81115734:	a228703a 	and	r20,r20,r8
81115738:	dcc09f15 	stw	r19,636(sp)
8111573c:	003f4406 	br	81115450 <__reset+0xfb0f5450>
81115740:	1809883a 	mov	r4,r3
81115744:	e00b883a 	mov	r5,fp
81115748:	d8c0a615 	stw	r3,664(sp)
8111574c:	d9c0aa15 	stw	r7,680(sp)
81115750:	110fa900 	call	8110fa90 <__srefill_r>
81115754:	d8c0a617 	ldw	r3,664(sp)
81115758:	d9c0aa17 	ldw	r7,680(sp)
8111575c:	103f4626 	beq	r2,zero,81115478 <__reset+0xfb0f5478>
81115760:	003f4606 	br	8111547c <__reset+0xfb0f547c>
81115764:	00800084 	movi	r2,2
81115768:	b0bfb91e 	bne	r22,r2,81115650 <__reset+0xfb0f5650>
8111576c:	058000c4 	movi	r22,3
81115770:	003f3706 	br	81115450 <__reset+0xfb0f5450>
81115774:	018000c4 	movi	r6,3
81115778:	11bfbc26 	beq	r2,r6,8111566c <__reset+0xfb0f566c>
8111577c:	01800144 	movi	r6,5
81115780:	11bfba26 	beq	r2,r6,8111566c <__reset+0xfb0f566c>
81115784:	003f3d06 	br	8111547c <__reset+0xfb0f547c>
81115788:	98bfffc4 	addi	r2,r19,-1
8111578c:	01405704 	movi	r5,348
81115790:	2880d82e 	bgeu	r5,r2,81115af4 <__svfscanf_r+0x1388>
81115794:	99ffa8c4 	addi	r7,r19,-349
81115798:	04c05744 	movi	r19,349
8111579c:	8c436014 	ori	r17,r17,3456
811157a0:	9013883a 	mov	r9,r18
811157a4:	8825883a 	mov	r18,r17
811157a8:	dc409e17 	ldw	r17,632(sp)
811157ac:	0029883a 	mov	r20,zero
811157b0:	dc000104 	addi	r16,sp,4
811157b4:	05401344 	movi	r21,77
811157b8:	02c08004 	movi	r11,512
811157bc:	01bf7fc4 	movi	r6,-513
811157c0:	023fdfc4 	movi	r8,-129
811157c4:	20bff544 	addi	r2,r4,-43
811157c8:	10803fcc 	andi	r2,r2,255
811157cc:	a8807236 	bltu	r21,r2,81115998 <__svfscanf_r+0x122c>
811157d0:	100490ba 	slli	r2,r2,2
811157d4:	01604474 	movhi	r5,33041
811157d8:	2955fa04 	addi	r5,r5,22504
811157dc:	1145883a 	add	r2,r2,r5
811157e0:	10800017 	ldw	r2,0(r2)
811157e4:	1000683a 	jmp	r2
811157e8:	81115a1c 	xori	r4,r16,17768
811157ec:	81115998 	cmpnei	r4,r16,17766
811157f0:	81115a1c 	xori	r4,r16,17768
811157f4:	81115998 	cmpnei	r4,r16,17766
811157f8:	81115998 	cmpnei	r4,r16,17766
811157fc:	811159f4 	orhi	r4,r16,17767
81115800:	811159d4 	ori	r4,r16,17767
81115804:	811159d4 	ori	r4,r16,17767
81115808:	811159d4 	ori	r4,r16,17767
8111580c:	811159d4 	ori	r4,r16,17767
81115810:	811159d4 	ori	r4,r16,17767
81115814:	811159d4 	ori	r4,r16,17767
81115818:	811159d4 	ori	r4,r16,17767
8111581c:	8111597c 	xorhi	r4,r16,17765
81115820:	8111597c 	xorhi	r4,r16,17765
81115824:	81115998 	cmpnei	r4,r16,17766
81115828:	81115998 	cmpnei	r4,r16,17766
8111582c:	81115998 	cmpnei	r4,r16,17766
81115830:	81115998 	cmpnei	r4,r16,17766
81115834:	81115998 	cmpnei	r4,r16,17766
81115838:	81115998 	cmpnei	r4,r16,17766
8111583c:	81115998 	cmpnei	r4,r16,17766
81115840:	81115968 	cmpgeui	r4,r16,17765
81115844:	81115968 	cmpgeui	r4,r16,17765
81115848:	81115968 	cmpgeui	r4,r16,17765
8111584c:	81115968 	cmpgeui	r4,r16,17765
81115850:	81115968 	cmpgeui	r4,r16,17765
81115854:	81115968 	cmpgeui	r4,r16,17765
81115858:	81115998 	cmpnei	r4,r16,17766
8111585c:	81115998 	cmpnei	r4,r16,17766
81115860:	81115998 	cmpnei	r4,r16,17766
81115864:	81115998 	cmpnei	r4,r16,17766
81115868:	81115998 	cmpnei	r4,r16,17766
8111586c:	81115998 	cmpnei	r4,r16,17766
81115870:	81115998 	cmpnei	r4,r16,17766
81115874:	81115998 	cmpnei	r4,r16,17766
81115878:	81115998 	cmpnei	r4,r16,17766
8111587c:	81115998 	cmpnei	r4,r16,17766
81115880:	81115998 	cmpnei	r4,r16,17766
81115884:	81115998 	cmpnei	r4,r16,17766
81115888:	81115998 	cmpnei	r4,r16,17766
8111588c:	81115998 	cmpnei	r4,r16,17766
81115890:	81115998 	cmpnei	r4,r16,17766
81115894:	81115998 	cmpnei	r4,r16,17766
81115898:	81115998 	cmpnei	r4,r16,17766
8111589c:	81115920 	cmpeqi	r4,r16,17764
811158a0:	81115998 	cmpnei	r4,r16,17766
811158a4:	81115998 	cmpnei	r4,r16,17766
811158a8:	81115998 	cmpnei	r4,r16,17766
811158ac:	81115998 	cmpnei	r4,r16,17766
811158b0:	81115998 	cmpnei	r4,r16,17766
811158b4:	81115998 	cmpnei	r4,r16,17766
811158b8:	81115998 	cmpnei	r4,r16,17766
811158bc:	81115998 	cmpnei	r4,r16,17766
811158c0:	81115968 	cmpgeui	r4,r16,17765
811158c4:	81115968 	cmpgeui	r4,r16,17765
811158c8:	81115968 	cmpgeui	r4,r16,17765
811158cc:	81115968 	cmpgeui	r4,r16,17765
811158d0:	81115968 	cmpgeui	r4,r16,17765
811158d4:	81115968 	cmpgeui	r4,r16,17765
811158d8:	81115998 	cmpnei	r4,r16,17766
811158dc:	81115998 	cmpnei	r4,r16,17766
811158e0:	81115998 	cmpnei	r4,r16,17766
811158e4:	81115998 	cmpnei	r4,r16,17766
811158e8:	81115998 	cmpnei	r4,r16,17766
811158ec:	81115998 	cmpnei	r4,r16,17766
811158f0:	81115998 	cmpnei	r4,r16,17766
811158f4:	81115998 	cmpnei	r4,r16,17766
811158f8:	81115998 	cmpnei	r4,r16,17766
811158fc:	81115998 	cmpnei	r4,r16,17766
81115900:	81115998 	cmpnei	r4,r16,17766
81115904:	81115998 	cmpnei	r4,r16,17766
81115908:	81115998 	cmpnei	r4,r16,17766
8111590c:	81115998 	cmpnei	r4,r16,17766
81115910:	81115998 	cmpnei	r4,r16,17766
81115914:	81115998 	cmpnei	r4,r16,17766
81115918:	81115998 	cmpnei	r4,r16,17766
8111591c:	81115920 	cmpeqi	r4,r16,17764
81115920:	9081800c 	andi	r2,r18,1536
81115924:	12c01c1e 	bne	r2,r11,81115998 <__svfscanf_r+0x122c>
81115928:	91a4703a 	and	r18,r18,r6
8111592c:	94814014 	ori	r18,r18,1280
81115930:	04400404 	movi	r17,16
81115934:	81000005 	stb	r4,0(r16)
81115938:	84000044 	addi	r16,r16,1
8111593c:	e0800117 	ldw	r2,4(fp)
81115940:	10bfffc4 	addi	r2,r2,-1
81115944:	e0800115 	stw	r2,4(fp)
81115948:	0080540e 	bge	zero,r2,81115a9c <__svfscanf_r+0x1330>
8111594c:	18c00044 	addi	r3,r3,1
81115950:	e0c00015 	stw	r3,0(fp)
81115954:	9cffffc4 	addi	r19,r19,-1
81115958:	98000f26 	beq	r19,zero,81115998 <__svfscanf_r+0x122c>
8111595c:	e0c00017 	ldw	r3,0(fp)
81115960:	19000003 	ldbu	r4,0(r3)
81115964:	003f9706 	br	811157c4 <__reset+0xfb0f57c4>
81115968:	00800284 	movi	r2,10
8111596c:	14400a0e 	bge	r2,r17,81115998 <__svfscanf_r+0x122c>
81115970:	00bd1fc4 	movi	r2,-2945
81115974:	90a4703a 	and	r18,r18,r2
81115978:	003fee06 	br	81115934 <__reset+0xfb0f5934>
8111597c:	01604534 	movhi	r5,33044
81115980:	8c63883a 	add	r17,r17,r17
81115984:	296e4484 	addi	r5,r5,-18158
81115988:	2c45883a 	add	r2,r5,r17
8111598c:	1440000f 	ldh	r17,0(r2)
81115990:	00800204 	movi	r2,8
81115994:	147ff616 	blt	r2,r17,81115970 <__reset+0xfb0f5970>
81115998:	dc409e15 	stw	r17,632(sp)
8111599c:	9023883a 	mov	r17,r18
811159a0:	8880400c 	andi	r2,r17,256
811159a4:	4825883a 	mov	r18,r9
811159a8:	10000426 	beq	r2,zero,811159bc <__svfscanf_r+0x1250>
811159ac:	d9800104 	addi	r6,sp,4
811159b0:	3400be36 	bltu	r6,r16,81115cac <__svfscanf_r+0x1540>
811159b4:	da000104 	addi	r8,sp,4
811159b8:	443bae26 	beq	r8,r16,81114874 <__reset+0xfb0f4874>
811159bc:	8880040c 	andi	r2,r17,16
811159c0:	10009326 	beq	r2,zero,81115c10 <__svfscanf_r+0x14a4>
811159c4:	d8800104 	addi	r2,sp,4
811159c8:	80a1c83a 	sub	r16,r16,r2
811159cc:	8521883a 	add	r16,r16,r20
811159d0:	003d0606 	br	81114dec <__reset+0xfb0f4dec>
811159d4:	01604534 	movhi	r5,33044
811159d8:	8c63883a 	add	r17,r17,r17
811159dc:	296e4484 	addi	r5,r5,-18158
811159e0:	2c45883a 	add	r2,r5,r17
811159e4:	1440000f 	ldh	r17,0(r2)
811159e8:	00bd1fc4 	movi	r2,-2945
811159ec:	90a4703a 	and	r18,r18,r2
811159f0:	003fd006 	br	81115934 <__reset+0xfb0f5934>
811159f4:	9082000c 	andi	r2,r18,2048
811159f8:	103fce26 	beq	r2,zero,81115934 <__reset+0xfb0f5934>
811159fc:	8800021e 	bne	r17,zero,81115a08 <__svfscanf_r+0x129c>
81115a00:	94808014 	ori	r18,r18,512
81115a04:	04400204 	movi	r17,8
81115a08:	9081000c 	andi	r2,r18,1024
81115a0c:	10009426 	beq	r2,zero,81115c60 <__svfscanf_r+0x14f4>
81115a10:	00be9fc4 	movi	r2,-1409
81115a14:	90a4703a 	and	r18,r18,r2
81115a18:	003fc606 	br	81115934 <__reset+0xfb0f5934>
81115a1c:	9080200c 	andi	r2,r18,128
81115a20:	103fdd26 	beq	r2,zero,81115998 <__reset+0xfb0f5998>
81115a24:	9224703a 	and	r18,r18,r8
81115a28:	003fc206 	br	81115934 <__reset+0xfb0f5934>
81115a2c:	9800011e 	bne	r19,zero,81115a34 <__svfscanf_r+0x12c8>
81115a30:	04ffffc4 	movi	r19,-1
81115a34:	8900004c 	andi	r4,r17,1
81115a38:	20005b1e 	bne	r4,zero,81115ba8 <__svfscanf_r+0x143c>
81115a3c:	8c40040c 	andi	r17,r17,16
81115a40:	88003026 	beq	r17,zero,81115b04 <__svfscanf_r+0x1398>
81115a44:	0021883a 	mov	r16,zero
81115a48:	00000306 	br	81115a58 <__svfscanf_r+0x12ec>
81115a4c:	18800003 	ldbu	r2,0(r3)
81115a50:	3885883a 	add	r2,r7,r2
81115a54:	10800043 	ldbu	r2,1(r2)
81115a58:	1080020c 	andi	r2,r2,8
81115a5c:	103ce31e 	bne	r2,zero,81114dec <__reset+0xfb0f4dec>
81115a60:	e0800117 	ldw	r2,4(fp)
81115a64:	18c00044 	addi	r3,r3,1
81115a68:	84000044 	addi	r16,r16,1
81115a6c:	10bfffc4 	addi	r2,r2,-1
81115a70:	e0800115 	stw	r2,4(fp)
81115a74:	e0c00015 	stw	r3,0(fp)
81115a78:	84fcdc26 	beq	r16,r19,81114dec <__reset+0xfb0f4dec>
81115a7c:	00bff316 	blt	zero,r2,81115a4c <__reset+0xfb0f5a4c>
81115a80:	e00b883a 	mov	r5,fp
81115a84:	b009883a 	mov	r4,r22
81115a88:	110fa900 	call	8110fa90 <__srefill_r>
81115a8c:	103cd71e 	bne	r2,zero,81114dec <__reset+0xfb0f4dec>
81115a90:	b9c00017 	ldw	r7,0(r23)
81115a94:	e0c00017 	ldw	r3,0(fp)
81115a98:	003fec06 	br	81115a4c <__reset+0xfb0f5a4c>
81115a9c:	e00b883a 	mov	r5,fp
81115aa0:	b009883a 	mov	r4,r22
81115aa4:	d980a715 	stw	r6,668(sp)
81115aa8:	d9c0aa15 	stw	r7,680(sp)
81115aac:	da00a815 	stw	r8,672(sp)
81115ab0:	da40a915 	stw	r9,676(sp)
81115ab4:	dac0a615 	stw	r11,664(sp)
81115ab8:	110fa900 	call	8110fa90 <__srefill_r>
81115abc:	d980a717 	ldw	r6,668(sp)
81115ac0:	d9c0aa17 	ldw	r7,680(sp)
81115ac4:	da00a817 	ldw	r8,672(sp)
81115ac8:	da40a917 	ldw	r9,676(sp)
81115acc:	dac0a617 	ldw	r11,664(sp)
81115ad0:	103fa026 	beq	r2,zero,81115954 <__reset+0xfb0f5954>
81115ad4:	003fb006 	br	81115998 <__reset+0xfb0f5998>
81115ad8:	8821883a 	mov	r16,r17
81115adc:	b019883a 	mov	r12,r22
81115ae0:	9823883a 	mov	r17,r19
81115ae4:	182d883a 	mov	r22,r3
81115ae8:	00bfbfc4 	movi	r2,-257
81115aec:	a0a8703a 	and	r20,r20,r2
81115af0:	003e6706 	br	81115490 <__reset+0xfb0f5490>
81115af4:	000f883a 	mov	r7,zero
81115af8:	003f2806 	br	8111579c <__reset+0xfb0f579c>
81115afc:	d800a215 	stw	zero,648(sp)
81115b00:	003de306 	br	81115290 <__reset+0xfb0f5290>
81115b04:	da009c17 	ldw	r8,624(sp)
81115b08:	9abfffc4 	addi	r10,r19,-1
81115b0c:	44400017 	ldw	r17,0(r8)
81115b10:	44000104 	addi	r16,r8,4
81115b14:	880b883a 	mov	r5,r17
81115b18:	8aa9883a 	add	r20,r17,r10
81115b1c:	00000606 	br	81115b38 <__svfscanf_r+0x13cc>
81115b20:	e0c00017 	ldw	r3,0(fp)
81115b24:	b9000017 	ldw	r4,0(r23)
81115b28:	a80b883a 	mov	r5,r21
81115b2c:	18800003 	ldbu	r2,0(r3)
81115b30:	2085883a 	add	r2,r4,r2
81115b34:	10800043 	ldbu	r2,1(r2)
81115b38:	1080020c 	andi	r2,r2,8
81115b3c:	1000551e 	bne	r2,zero,81115c94 <__svfscanf_r+0x1528>
81115b40:	e0800117 	ldw	r2,4(fp)
81115b44:	19000044 	addi	r4,r3,1
81115b48:	e1000015 	stw	r4,0(fp)
81115b4c:	10bfffc4 	addi	r2,r2,-1
81115b50:	e0800115 	stw	r2,4(fp)
81115b54:	18800003 	ldbu	r2,0(r3)
81115b58:	2d400044 	addi	r21,r5,1
81115b5c:	a827883a 	mov	r19,r21
81115b60:	28800005 	stb	r2,0(r5)
81115b64:	2d000626 	beq	r5,r20,81115b80 <__svfscanf_r+0x1414>
81115b68:	e0800117 	ldw	r2,4(fp)
81115b6c:	00bfec16 	blt	zero,r2,81115b20 <__reset+0xfb0f5b20>
81115b70:	e00b883a 	mov	r5,fp
81115b74:	b009883a 	mov	r4,r22
81115b78:	110fa900 	call	8110fa90 <__srefill_r>
81115b7c:	103fe826 	beq	r2,zero,81115b20 <__reset+0xfb0f5b20>
81115b80:	da00a017 	ldw	r8,640(sp)
81115b84:	dd009d17 	ldw	r20,628(sp)
81115b88:	9c63c83a 	sub	r17,r19,r17
81115b8c:	42000044 	addi	r8,r8,1
81115b90:	98000005 	stb	zero,0(r19)
81115b94:	9465883a 	add	r18,r18,r17
81115b98:	da00a015 	stw	r8,640(sp)
81115b9c:	dc009c15 	stw	r16,624(sp)
81115ba0:	a00d883a 	mov	r6,r20
81115ba4:	003b2f06 	br	81114864 <__reset+0xfb0f4864>
81115ba8:	dd409904 	addi	r21,sp,612
81115bac:	8c40040c 	andi	r17,r17,16
81115bb0:	01800204 	movi	r6,8
81115bb4:	000b883a 	mov	r5,zero
81115bb8:	a809883a 	mov	r4,r21
81115bbc:	110f76c0 	call	8110f76c <memset>
81115bc0:	8800401e 	bne	r17,zero,81115cc4 <__svfscanf_r+0x1558>
81115bc4:	da009c17 	ldw	r8,624(sp)
81115bc8:	45000017 	ldw	r20,0(r8)
81115bcc:	42000104 	addi	r8,r8,4
81115bd0:	da009c15 	stw	r8,624(sp)
81115bd4:	000d883a 	mov	r6,zero
81115bd8:	3021883a 	mov	r16,r6
81115bdc:	dc409f15 	stw	r17,636(sp)
81115be0:	e0800017 	ldw	r2,0(fp)
81115be4:	b8c00017 	ldw	r3,0(r23)
81115be8:	10800003 	ldbu	r2,0(r2)
81115bec:	1885883a 	add	r2,r3,r2
81115bf0:	10800043 	ldbu	r2,1(r2)
81115bf4:	1080020c 	andi	r2,r2,8
81115bf8:	1000011e 	bne	r2,zero,81115c00 <__svfscanf_r+0x1494>
81115bfc:	9800701e 	bne	r19,zero,81115dc0 <__svfscanf_r+0x1654>
81115c00:	dc409f17 	ldw	r17,636(sp)
81115c04:	883cdd1e 	bne	r17,zero,81114f7c <__reset+0xfb0f4f7c>
81115c08:	a0000015 	stw	zero,0(r20)
81115c0c:	003cd806 	br	81114f70 <__reset+0xfb0f4f70>
81115c10:	d9c09e17 	ldw	r7,632(sp)
81115c14:	da00a117 	ldw	r8,644(sp)
81115c18:	000d883a 	mov	r6,zero
81115c1c:	d9400104 	addi	r5,sp,4
81115c20:	b009883a 	mov	r4,r22
81115c24:	80000005 	stb	zero,0(r16)
81115c28:	403ee83a 	callr	r8
81115c2c:	88c0080c 	andi	r3,r17,32
81115c30:	1800121e 	bne	r3,zero,81115c7c <__svfscanf_r+0x1510>
81115c34:	88c0010c 	andi	r3,r17,4
81115c38:	18004d26 	beq	r3,zero,81115d70 <__svfscanf_r+0x1604>
81115c3c:	da009c17 	ldw	r8,624(sp)
81115c40:	40c00017 	ldw	r3,0(r8)
81115c44:	42000104 	addi	r8,r8,4
81115c48:	da009c15 	stw	r8,624(sp)
81115c4c:	1880000d 	sth	r2,0(r3)
81115c50:	da00a017 	ldw	r8,640(sp)
81115c54:	42000044 	addi	r8,r8,1
81115c58:	da00a015 	stw	r8,640(sp)
81115c5c:	003f5906 	br	811159c4 <__reset+0xfb0f59c4>
81115c60:	00bf1fc4 	movi	r2,-897
81115c64:	90a4703a 	and	r18,r18,r2
81115c68:	38000226 	beq	r7,zero,81115c74 <__svfscanf_r+0x1508>
81115c6c:	39ffffc4 	addi	r7,r7,-1
81115c70:	9cc00044 	addi	r19,r19,1
81115c74:	a5000044 	addi	r20,r20,1
81115c78:	003f3006 	br	8111593c <__reset+0xfb0f593c>
81115c7c:	da009c17 	ldw	r8,624(sp)
81115c80:	40c00017 	ldw	r3,0(r8)
81115c84:	42000104 	addi	r8,r8,4
81115c88:	da009c15 	stw	r8,624(sp)
81115c8c:	18800015 	stw	r2,0(r3)
81115c90:	003fef06 	br	81115c50 <__reset+0xfb0f5c50>
81115c94:	2827883a 	mov	r19,r5
81115c98:	003fb906 	br	81115b80 <__reset+0xfb0f5b80>
81115c9c:	01be1fc4 	movi	r6,-1921
81115ca0:	a1a8703a 	and	r20,r20,r6
81115ca4:	05400044 	movi	r21,1
81115ca8:	003de906 	br	81115450 <__reset+0xfb0f5450>
81115cac:	817fffc7 	ldb	r5,-1(r16)
81115cb0:	e00d883a 	mov	r6,fp
81115cb4:	b009883a 	mov	r4,r22
81115cb8:	843fffc4 	addi	r16,r16,-1
81115cbc:	111e3dc0 	call	8111e3dc <_ungetc_r>
81115cc0:	003f3c06 	br	811159b4 <__reset+0xfb0f59b4>
81115cc4:	dd009b04 	addi	r20,sp,620
81115cc8:	003fc206 	br	81115bd4 <__reset+0xfb0f5bd4>
81115ccc:	00be1fc4 	movi	r2,-1921
81115cd0:	a0a8703a 	and	r20,r20,r2
81115cd4:	05800044 	movi	r22,1
81115cd8:	003ddd06 	br	81115450 <__reset+0xfb0f5450>
81115cdc:	d8c09f17 	ldw	r3,636(sp)
81115ce0:	88e3c83a 	sub	r17,r17,r3
81115ce4:	044dc83a 	sub	r6,zero,r17
81115ce8:	883e2126 	beq	r17,zero,81115570 <__reset+0xfb0f5570>
81115cec:	d88055c4 	addi	r2,sp,343
81115cf0:	80800136 	bltu	r16,r2,81115cf8 <__svfscanf_r+0x158c>
81115cf4:	dc005584 	addi	r16,sp,342
81115cf8:	01604534 	movhi	r5,33044
81115cfc:	296e4304 	addi	r5,r5,-18164
81115d00:	8009883a 	mov	r4,r16
81115d04:	110fda40 	call	8110fda4 <sprintf>
81115d08:	003e1906 	br	81115570 <__reset+0xfb0f5570>
81115d0c:	d8c0a517 	ldw	r3,660(sp)
81115d10:	000d883a 	mov	r6,zero
81115d14:	01c00284 	movi	r7,10
81115d18:	19400044 	addi	r5,r3,1
81115d1c:	b009883a 	mov	r4,r22
81115d20:	11100500 	call	81110050 <_strtol_r>
81115d24:	da00a417 	ldw	r8,656(sp)
81115d28:	dc00a517 	ldw	r16,660(sp)
81115d2c:	120dc83a 	sub	r6,r2,r8
81115d30:	003fee06 	br	81115cec <__reset+0xfb0f5cec>
81115d34:	da009c17 	ldw	r8,624(sp)
81115d38:	180b883a 	mov	r5,r3
81115d3c:	8009883a 	mov	r4,r16
81115d40:	45000017 	ldw	r20,0(r8)
81115d44:	44400104 	addi	r17,r8,4
81115d48:	d8c0a615 	stw	r3,664(sp)
81115d4c:	111acf80 	call	8111acf8 <__fpclassifyd>
81115d50:	d8c0a617 	ldw	r3,664(sp)
81115d54:	10006426 	beq	r2,zero,81115ee8 <__svfscanf_r+0x177c>
81115d58:	8009883a 	mov	r4,r16
81115d5c:	180b883a 	mov	r5,r3
81115d60:	110e2b40 	call	8110e2b4 <__truncdfsf2>
81115d64:	a0800015 	stw	r2,0(r20)
81115d68:	dc409c15 	stw	r17,624(sp)
81115d6c:	003e0f06 	br	811155ac <__reset+0xfb0f55ac>
81115d70:	88c0004c 	andi	r3,r17,1
81115d74:	183fc11e 	bne	r3,zero,81115c7c <__reset+0xfb0f5c7c>
81115d78:	8c40008c 	andi	r17,r17,2
81115d7c:	883fbf26 	beq	r17,zero,81115c7c <__reset+0xfb0f5c7c>
81115d80:	da00a117 	ldw	r8,644(sp)
81115d84:	00a044b4 	movhi	r2,33042
81115d88:	10b26504 	addi	r2,r2,-13932
81115d8c:	d9c09e17 	ldw	r7,632(sp)
81115d90:	000d883a 	mov	r6,zero
81115d94:	d9400104 	addi	r5,sp,4
81115d98:	b009883a 	mov	r4,r22
81115d9c:	40806226 	beq	r8,r2,81115f28 <__svfscanf_r+0x17bc>
81115da0:	111c6ac0 	call	8111c6ac <_strtoll_r>
81115da4:	da009c17 	ldw	r8,624(sp)
81115da8:	41000017 	ldw	r4,0(r8)
81115dac:	42000104 	addi	r8,r8,4
81115db0:	da009c15 	stw	r8,624(sp)
81115db4:	20800015 	stw	r2,0(r4)
81115db8:	20c00115 	stw	r3,4(r4)
81115dbc:	003fa406 	br	81115c50 <__reset+0xfb0f5c50>
81115dc0:	11190100 	call	81119010 <__locale_mb_cur_max>
81115dc4:	80bca726 	beq	r16,r2,81115064 <__reset+0xfb0f5064>
81115dc8:	e0800017 	ldw	r2,0(fp)
81115dcc:	e1000117 	ldw	r4,4(fp)
81115dd0:	d8c00104 	addi	r3,sp,4
81115dd4:	12000003 	ldbu	r8,0(r2)
81115dd8:	213fffc4 	addi	r4,r4,-1
81115ddc:	10800044 	addi	r2,r2,1
81115de0:	e1000115 	stw	r4,4(fp)
81115de4:	e0800015 	stw	r2,0(fp)
81115de8:	84400044 	addi	r17,r16,1
81115dec:	dd400015 	stw	r21,0(sp)
81115df0:	1c21883a 	add	r16,r3,r16
81115df4:	b009883a 	mov	r4,r22
81115df8:	880f883a 	mov	r7,r17
81115dfc:	180d883a 	mov	r6,r3
81115e00:	a00b883a 	mov	r5,r20
81115e04:	82000005 	stb	r8,0(r16)
81115e08:	11190cc0 	call	811190cc <_mbrtowc_r>
81115e0c:	013fffc4 	movi	r4,-1
81115e10:	113c9426 	beq	r2,r4,81115064 <__reset+0xfb0f5064>
81115e14:	103c881e 	bne	r2,zero,81115038 <__reset+0xfb0f5038>
81115e18:	a0000015 	stw	zero,0(r20)
81115e1c:	0009883a 	mov	r4,zero
81115e20:	1118f500 	call	81118f50 <iswspace>
81115e24:	10001a26 	beq	r2,zero,81115e90 <__svfscanf_r+0x1724>
81115e28:	8821883a 	mov	r16,r17
81115e2c:	dc409f17 	ldw	r17,636(sp)
81115e30:	803f7426 	beq	r16,zero,81115c04 <__reset+0xfb0f5c04>
81115e34:	843fffc4 	addi	r16,r16,-1
81115e38:	d9800104 	addi	r6,sp,4
81115e3c:	342b883a 	add	r21,r6,r16
81115e40:	00000106 	br	81115e48 <__svfscanf_r+0x16dc>
81115e44:	843fffc4 	addi	r16,r16,-1
81115e48:	a9400003 	ldbu	r5,0(r21)
81115e4c:	e00d883a 	mov	r6,fp
81115e50:	b009883a 	mov	r4,r22
81115e54:	111e3dc0 	call	8111e3dc <_ungetc_r>
81115e58:	ad7fffc4 	addi	r21,r21,-1
81115e5c:	803ff91e 	bne	r16,zero,81115e44 <__reset+0xfb0f5e44>
81115e60:	003f6806 	br	81115c04 <__reset+0xfb0f5c04>
81115e64:	d9800104 	addi	r6,sp,4
81115e68:	802b883a 	mov	r21,r16
81115e6c:	343a812e 	bgeu	r6,r16,81114874 <__reset+0xfb0f4874>
81115e70:	ad7fffc4 	addi	r21,r21,-1
81115e74:	a9400007 	ldb	r5,0(r21)
81115e78:	e00d883a 	mov	r6,fp
81115e7c:	b009883a 	mov	r4,r22
81115e80:	111e3dc0 	call	8111e3dc <_ungetc_r>
81115e84:	da000104 	addi	r8,sp,4
81115e88:	457ff91e 	bne	r8,r21,81115e70 <__reset+0xfb0f5e70>
81115e8c:	003a7906 	br	81114874 <__reset+0xfb0f4874>
81115e90:	da009f17 	ldw	r8,636(sp)
81115e94:	9465883a 	add	r18,r18,r17
81115e98:	9cffffc4 	addi	r19,r19,-1
81115e9c:	4000051e 	bne	r8,zero,81115eb4 <__svfscanf_r+0x1748>
81115ea0:	a5000104 	addi	r20,r20,4
81115ea4:	0021883a 	mov	r16,zero
81115ea8:	003c6606 	br	81115044 <__reset+0xfb0f5044>
81115eac:	a1000017 	ldw	r4,0(r20)
81115eb0:	003fdb06 	br	81115e20 <__reset+0xfb0f5e20>
81115eb4:	0021883a 	mov	r16,zero
81115eb8:	003c6206 	br	81115044 <__reset+0xfb0f5044>
81115ebc:	d8800104 	addi	r2,sp,4
81115ec0:	802b883a 	mov	r21,r16
81115ec4:	143a6b2e 	bgeu	r2,r16,81114874 <__reset+0xfb0f4874>
81115ec8:	ad7fffc4 	addi	r21,r21,-1
81115ecc:	a9400007 	ldb	r5,0(r21)
81115ed0:	e00d883a 	mov	r6,fp
81115ed4:	b009883a 	mov	r4,r22
81115ed8:	111e3dc0 	call	8111e3dc <_ungetc_r>
81115edc:	d8c00104 	addi	r3,sp,4
81115ee0:	1d7ff91e 	bne	r3,r21,81115ec8 <__reset+0xfb0f5ec8>
81115ee4:	003a6306 	br	81114874 <__reset+0xfb0f4874>
81115ee8:	0009883a 	mov	r4,zero
81115eec:	111ae3c0 	call	8111ae3c <nanf>
81115ef0:	a0800015 	stw	r2,0(r20)
81115ef4:	dc409c15 	stw	r17,624(sp)
81115ef8:	003dac06 	br	811155ac <__reset+0xfb0f55ac>
81115efc:	d9000104 	addi	r4,sp,4
81115f00:	802b883a 	mov	r21,r16
81115f04:	243a5b2e 	bgeu	r4,r16,81114874 <__reset+0xfb0f4874>
81115f08:	ad7fffc4 	addi	r21,r21,-1
81115f0c:	a9400007 	ldb	r5,0(r21)
81115f10:	e00d883a 	mov	r6,fp
81115f14:	b009883a 	mov	r4,r22
81115f18:	111e3dc0 	call	8111e3dc <_ungetc_r>
81115f1c:	d9400104 	addi	r5,sp,4
81115f20:	2d7ff91e 	bne	r5,r21,81115f08 <__reset+0xfb0f5f08>
81115f24:	003a5306 	br	81114874 <__reset+0xfb0f4874>
81115f28:	111cc040 	call	8111cc04 <_strtoull_r>
81115f2c:	003f9d06 	br	81115da4 <__reset+0xfb0f5da4>

81115f30 <vfscanf>:
81115f30:	00a04534 	movhi	r2,33044
81115f34:	defffb04 	addi	sp,sp,-20
81115f38:	10b73304 	addi	r2,r2,-9012
81115f3c:	de00012e 	bgeu	sp,et,81115f44 <vfscanf+0x14>
81115f40:	003b68fa 	trap	3
81115f44:	dc000215 	stw	r16,8(sp)
81115f48:	14000017 	ldw	r16,0(r2)
81115f4c:	dc400315 	stw	r17,12(sp)
81115f50:	dfc00415 	stw	ra,16(sp)
81115f54:	2023883a 	mov	r17,r4
81115f58:	80000826 	beq	r16,zero,81115f7c <vfscanf+0x4c>
81115f5c:	80800e17 	ldw	r2,56(r16)
81115f60:	1000061e 	bne	r2,zero,81115f7c <vfscanf+0x4c>
81115f64:	8009883a 	mov	r4,r16
81115f68:	d9400015 	stw	r5,0(sp)
81115f6c:	d9800115 	stw	r6,4(sp)
81115f70:	11180e80 	call	811180e8 <__sinit>
81115f74:	d9800117 	ldw	r6,4(sp)
81115f78:	d9400017 	ldw	r5,0(sp)
81115f7c:	300f883a 	mov	r7,r6
81115f80:	8009883a 	mov	r4,r16
81115f84:	280d883a 	mov	r6,r5
81115f88:	880b883a 	mov	r5,r17
81115f8c:	dfc00417 	ldw	ra,16(sp)
81115f90:	dc400317 	ldw	r17,12(sp)
81115f94:	dc000217 	ldw	r16,8(sp)
81115f98:	dec00504 	addi	sp,sp,20
81115f9c:	111476c1 	jmpi	8111476c <__svfscanf_r>

81115fa0 <__svfscanf>:
81115fa0:	00a04534 	movhi	r2,33044
81115fa4:	10b73304 	addi	r2,r2,-9012
81115fa8:	300f883a 	mov	r7,r6
81115fac:	280d883a 	mov	r6,r5
81115fb0:	200b883a 	mov	r5,r4
81115fb4:	11000017 	ldw	r4,0(r2)
81115fb8:	111476c1 	jmpi	8111476c <__svfscanf_r>

81115fbc <_vfscanf_r>:
81115fbc:	defffb04 	addi	sp,sp,-20
81115fc0:	de00012e 	bgeu	sp,et,81115fc8 <_vfscanf_r+0xc>
81115fc4:	003b68fa 	trap	3
81115fc8:	dc000315 	stw	r16,12(sp)
81115fcc:	dfc00415 	stw	ra,16(sp)
81115fd0:	2021883a 	mov	r16,r4
81115fd4:	20000926 	beq	r4,zero,81115ffc <_vfscanf_r+0x40>
81115fd8:	20800e17 	ldw	r2,56(r4)
81115fdc:	1000071e 	bne	r2,zero,81115ffc <_vfscanf_r+0x40>
81115fe0:	d9400015 	stw	r5,0(sp)
81115fe4:	d9800115 	stw	r6,4(sp)
81115fe8:	d9c00215 	stw	r7,8(sp)
81115fec:	11180e80 	call	811180e8 <__sinit>
81115ff0:	d9c00217 	ldw	r7,8(sp)
81115ff4:	d9800117 	ldw	r6,4(sp)
81115ff8:	d9400017 	ldw	r5,0(sp)
81115ffc:	8009883a 	mov	r4,r16
81116000:	dfc00417 	ldw	ra,16(sp)
81116004:	dc000317 	ldw	r16,12(sp)
81116008:	dec00504 	addi	sp,sp,20
8111600c:	111476c1 	jmpi	8111476c <__svfscanf_r>

81116010 <_write_r>:
81116010:	defffd04 	addi	sp,sp,-12
81116014:	de00012e 	bgeu	sp,et,8111601c <_write_r+0xc>
81116018:	003b68fa 	trap	3
8111601c:	2805883a 	mov	r2,r5
81116020:	dc000015 	stw	r16,0(sp)
81116024:	04204534 	movhi	r16,33044
81116028:	dc400115 	stw	r17,4(sp)
8111602c:	300b883a 	mov	r5,r6
81116030:	84379304 	addi	r16,r16,-8628
81116034:	2023883a 	mov	r17,r4
81116038:	380d883a 	mov	r6,r7
8111603c:	1009883a 	mov	r4,r2
81116040:	dfc00215 	stw	ra,8(sp)
81116044:	80000015 	stw	zero,0(r16)
81116048:	1124b440 	call	81124b44 <write>
8111604c:	00ffffc4 	movi	r3,-1
81116050:	10c00526 	beq	r2,r3,81116068 <_write_r+0x58>
81116054:	dfc00217 	ldw	ra,8(sp)
81116058:	dc400117 	ldw	r17,4(sp)
8111605c:	dc000017 	ldw	r16,0(sp)
81116060:	dec00304 	addi	sp,sp,12
81116064:	f800283a 	ret
81116068:	80c00017 	ldw	r3,0(r16)
8111606c:	183ff926 	beq	r3,zero,81116054 <__reset+0xfb0f6054>
81116070:	88c00015 	stw	r3,0(r17)
81116074:	003ff706 	br	81116054 <__reset+0xfb0f6054>

81116078 <__swsetup_r>:
81116078:	00a04534 	movhi	r2,33044
8111607c:	defffd04 	addi	sp,sp,-12
81116080:	10b73304 	addi	r2,r2,-9012
81116084:	de00012e 	bgeu	sp,et,8111608c <__swsetup_r+0x14>
81116088:	003b68fa 	trap	3
8111608c:	dc400115 	stw	r17,4(sp)
81116090:	2023883a 	mov	r17,r4
81116094:	11000017 	ldw	r4,0(r2)
81116098:	dc000015 	stw	r16,0(sp)
8111609c:	dfc00215 	stw	ra,8(sp)
811160a0:	2821883a 	mov	r16,r5
811160a4:	20000226 	beq	r4,zero,811160b0 <__swsetup_r+0x38>
811160a8:	20800e17 	ldw	r2,56(r4)
811160ac:	10003126 	beq	r2,zero,81116174 <__swsetup_r+0xfc>
811160b0:	8080030b 	ldhu	r2,12(r16)
811160b4:	10c0020c 	andi	r3,r2,8
811160b8:	1009883a 	mov	r4,r2
811160bc:	18000f26 	beq	r3,zero,811160fc <__swsetup_r+0x84>
811160c0:	80c00417 	ldw	r3,16(r16)
811160c4:	18001526 	beq	r3,zero,8111611c <__swsetup_r+0xa4>
811160c8:	1100004c 	andi	r4,r2,1
811160cc:	20001c1e 	bne	r4,zero,81116140 <__swsetup_r+0xc8>
811160d0:	1080008c 	andi	r2,r2,2
811160d4:	1000291e 	bne	r2,zero,8111617c <__swsetup_r+0x104>
811160d8:	80800517 	ldw	r2,20(r16)
811160dc:	80800215 	stw	r2,8(r16)
811160e0:	18001c26 	beq	r3,zero,81116154 <__swsetup_r+0xdc>
811160e4:	0005883a 	mov	r2,zero
811160e8:	dfc00217 	ldw	ra,8(sp)
811160ec:	dc400117 	ldw	r17,4(sp)
811160f0:	dc000017 	ldw	r16,0(sp)
811160f4:	dec00304 	addi	sp,sp,12
811160f8:	f800283a 	ret
811160fc:	2080040c 	andi	r2,r4,16
81116100:	10002e26 	beq	r2,zero,811161bc <__swsetup_r+0x144>
81116104:	2080010c 	andi	r2,r4,4
81116108:	10001e1e 	bne	r2,zero,81116184 <__swsetup_r+0x10c>
8111610c:	80c00417 	ldw	r3,16(r16)
81116110:	20800214 	ori	r2,r4,8
81116114:	8080030d 	sth	r2,12(r16)
81116118:	183feb1e 	bne	r3,zero,811160c8 <__reset+0xfb0f60c8>
8111611c:	1100a00c 	andi	r4,r2,640
81116120:	01408004 	movi	r5,512
81116124:	217fe826 	beq	r4,r5,811160c8 <__reset+0xfb0f60c8>
81116128:	800b883a 	mov	r5,r16
8111612c:	8809883a 	mov	r4,r17
81116130:	110ec440 	call	8110ec44 <__smakebuf_r>
81116134:	8080030b 	ldhu	r2,12(r16)
81116138:	80c00417 	ldw	r3,16(r16)
8111613c:	003fe206 	br	811160c8 <__reset+0xfb0f60c8>
81116140:	80800517 	ldw	r2,20(r16)
81116144:	80000215 	stw	zero,8(r16)
81116148:	0085c83a 	sub	r2,zero,r2
8111614c:	80800615 	stw	r2,24(r16)
81116150:	183fe41e 	bne	r3,zero,811160e4 <__reset+0xfb0f60e4>
81116154:	80c0030b 	ldhu	r3,12(r16)
81116158:	0005883a 	mov	r2,zero
8111615c:	1900200c 	andi	r4,r3,128
81116160:	203fe126 	beq	r4,zero,811160e8 <__reset+0xfb0f60e8>
81116164:	18c01014 	ori	r3,r3,64
81116168:	80c0030d 	sth	r3,12(r16)
8111616c:	00bfffc4 	movi	r2,-1
81116170:	003fdd06 	br	811160e8 <__reset+0xfb0f60e8>
81116174:	11180e80 	call	811180e8 <__sinit>
81116178:	003fcd06 	br	811160b0 <__reset+0xfb0f60b0>
8111617c:	0005883a 	mov	r2,zero
81116180:	003fd606 	br	811160dc <__reset+0xfb0f60dc>
81116184:	81400c17 	ldw	r5,48(r16)
81116188:	28000626 	beq	r5,zero,811161a4 <__swsetup_r+0x12c>
8111618c:	80801004 	addi	r2,r16,64
81116190:	28800326 	beq	r5,r2,811161a0 <__swsetup_r+0x128>
81116194:	8809883a 	mov	r4,r17
81116198:	11185800 	call	81118580 <_free_r>
8111619c:	8100030b 	ldhu	r4,12(r16)
811161a0:	80000c15 	stw	zero,48(r16)
811161a4:	80c00417 	ldw	r3,16(r16)
811161a8:	00bff6c4 	movi	r2,-37
811161ac:	1108703a 	and	r4,r2,r4
811161b0:	80000115 	stw	zero,4(r16)
811161b4:	80c00015 	stw	r3,0(r16)
811161b8:	003fd506 	br	81116110 <__reset+0xfb0f6110>
811161bc:	00800244 	movi	r2,9
811161c0:	88800015 	stw	r2,0(r17)
811161c4:	20801014 	ori	r2,r4,64
811161c8:	8080030d 	sth	r2,12(r16)
811161cc:	00bfffc4 	movi	r2,-1
811161d0:	003fc506 	br	811160e8 <__reset+0xfb0f60e8>

811161d4 <_close_r>:
811161d4:	defffd04 	addi	sp,sp,-12
811161d8:	de00012e 	bgeu	sp,et,811161e0 <_close_r+0xc>
811161dc:	003b68fa 	trap	3
811161e0:	dc000015 	stw	r16,0(sp)
811161e4:	04204534 	movhi	r16,33044
811161e8:	dc400115 	stw	r17,4(sp)
811161ec:	84379304 	addi	r16,r16,-8628
811161f0:	2023883a 	mov	r17,r4
811161f4:	2809883a 	mov	r4,r5
811161f8:	dfc00215 	stw	ra,8(sp)
811161fc:	80000015 	stw	zero,0(r16)
81116200:	1123df00 	call	81123df0 <close>
81116204:	00ffffc4 	movi	r3,-1
81116208:	10c00526 	beq	r2,r3,81116220 <_close_r+0x4c>
8111620c:	dfc00217 	ldw	ra,8(sp)
81116210:	dc400117 	ldw	r17,4(sp)
81116214:	dc000017 	ldw	r16,0(sp)
81116218:	dec00304 	addi	sp,sp,12
8111621c:	f800283a 	ret
81116220:	80c00017 	ldw	r3,0(r16)
81116224:	183ff926 	beq	r3,zero,8111620c <__reset+0xfb0f620c>
81116228:	88c00015 	stw	r3,0(r17)
8111622c:	003ff706 	br	8111620c <__reset+0xfb0f620c>

81116230 <quorem>:
81116230:	defff704 	addi	sp,sp,-36
81116234:	de00012e 	bgeu	sp,et,8111623c <quorem+0xc>
81116238:	003b68fa 	trap	3
8111623c:	dc800215 	stw	r18,8(sp)
81116240:	20800417 	ldw	r2,16(r4)
81116244:	2c800417 	ldw	r18,16(r5)
81116248:	dfc00815 	stw	ra,32(sp)
8111624c:	ddc00715 	stw	r23,28(sp)
81116250:	dd800615 	stw	r22,24(sp)
81116254:	dd400515 	stw	r21,20(sp)
81116258:	dd000415 	stw	r20,16(sp)
8111625c:	dcc00315 	stw	r19,12(sp)
81116260:	dc400115 	stw	r17,4(sp)
81116264:	dc000015 	stw	r16,0(sp)
81116268:	14807116 	blt	r2,r18,81116430 <quorem+0x200>
8111626c:	94bfffc4 	addi	r18,r18,-1
81116270:	94ad883a 	add	r22,r18,r18
81116274:	b5ad883a 	add	r22,r22,r22
81116278:	2c400504 	addi	r17,r5,20
8111627c:	8da9883a 	add	r20,r17,r22
81116280:	25400504 	addi	r21,r4,20
81116284:	282f883a 	mov	r23,r5
81116288:	adad883a 	add	r22,r21,r22
8111628c:	a1400017 	ldw	r5,0(r20)
81116290:	2021883a 	mov	r16,r4
81116294:	b1000017 	ldw	r4,0(r22)
81116298:	29400044 	addi	r5,r5,1
8111629c:	1121be00 	call	81121be0 <__udivsi3>
811162a0:	1027883a 	mov	r19,r2
811162a4:	10002c26 	beq	r2,zero,81116358 <quorem+0x128>
811162a8:	a813883a 	mov	r9,r21
811162ac:	880b883a 	mov	r5,r17
811162b0:	0009883a 	mov	r4,zero
811162b4:	000d883a 	mov	r6,zero
811162b8:	2a000017 	ldw	r8,0(r5)
811162bc:	49c00017 	ldw	r7,0(r9)
811162c0:	29400104 	addi	r5,r5,4
811162c4:	40bfffcc 	andi	r2,r8,65535
811162c8:	14c5383a 	mul	r2,r2,r19
811162cc:	4010d43a 	srli	r8,r8,16
811162d0:	38ffffcc 	andi	r3,r7,65535
811162d4:	1105883a 	add	r2,r2,r4
811162d8:	1008d43a 	srli	r4,r2,16
811162dc:	44d1383a 	mul	r8,r8,r19
811162e0:	198d883a 	add	r6,r3,r6
811162e4:	10ffffcc 	andi	r3,r2,65535
811162e8:	30c7c83a 	sub	r3,r6,r3
811162ec:	380ed43a 	srli	r7,r7,16
811162f0:	4105883a 	add	r2,r8,r4
811162f4:	180dd43a 	srai	r6,r3,16
811162f8:	113fffcc 	andi	r4,r2,65535
811162fc:	390fc83a 	sub	r7,r7,r4
81116300:	398d883a 	add	r6,r7,r6
81116304:	300e943a 	slli	r7,r6,16
81116308:	18ffffcc 	andi	r3,r3,65535
8111630c:	1008d43a 	srli	r4,r2,16
81116310:	38ceb03a 	or	r7,r7,r3
81116314:	49c00015 	stw	r7,0(r9)
81116318:	300dd43a 	srai	r6,r6,16
8111631c:	4a400104 	addi	r9,r9,4
81116320:	a17fe52e 	bgeu	r20,r5,811162b8 <__reset+0xfb0f62b8>
81116324:	b0800017 	ldw	r2,0(r22)
81116328:	10000b1e 	bne	r2,zero,81116358 <quorem+0x128>
8111632c:	b0bfff04 	addi	r2,r22,-4
81116330:	a880082e 	bgeu	r21,r2,81116354 <quorem+0x124>
81116334:	b0ffff17 	ldw	r3,-4(r22)
81116338:	18000326 	beq	r3,zero,81116348 <quorem+0x118>
8111633c:	00000506 	br	81116354 <quorem+0x124>
81116340:	10c00017 	ldw	r3,0(r2)
81116344:	1800031e 	bne	r3,zero,81116354 <quorem+0x124>
81116348:	10bfff04 	addi	r2,r2,-4
8111634c:	94bfffc4 	addi	r18,r18,-1
81116350:	a8bffb36 	bltu	r21,r2,81116340 <__reset+0xfb0f6340>
81116354:	84800415 	stw	r18,16(r16)
81116358:	b80b883a 	mov	r5,r23
8111635c:	8009883a 	mov	r4,r16
81116360:	1119e500 	call	81119e50 <__mcmp>
81116364:	10002616 	blt	r2,zero,81116400 <quorem+0x1d0>
81116368:	9cc00044 	addi	r19,r19,1
8111636c:	a805883a 	mov	r2,r21
81116370:	000b883a 	mov	r5,zero
81116374:	11000017 	ldw	r4,0(r2)
81116378:	89800017 	ldw	r6,0(r17)
8111637c:	10800104 	addi	r2,r2,4
81116380:	20ffffcc 	andi	r3,r4,65535
81116384:	194b883a 	add	r5,r3,r5
81116388:	30ffffcc 	andi	r3,r6,65535
8111638c:	28c7c83a 	sub	r3,r5,r3
81116390:	300cd43a 	srli	r6,r6,16
81116394:	2008d43a 	srli	r4,r4,16
81116398:	180bd43a 	srai	r5,r3,16
8111639c:	18ffffcc 	andi	r3,r3,65535
811163a0:	2189c83a 	sub	r4,r4,r6
811163a4:	2149883a 	add	r4,r4,r5
811163a8:	200c943a 	slli	r6,r4,16
811163ac:	8c400104 	addi	r17,r17,4
811163b0:	200bd43a 	srai	r5,r4,16
811163b4:	30c6b03a 	or	r3,r6,r3
811163b8:	10ffff15 	stw	r3,-4(r2)
811163bc:	a47fed2e 	bgeu	r20,r17,81116374 <__reset+0xfb0f6374>
811163c0:	9485883a 	add	r2,r18,r18
811163c4:	1085883a 	add	r2,r2,r2
811163c8:	a887883a 	add	r3,r21,r2
811163cc:	18800017 	ldw	r2,0(r3)
811163d0:	10000b1e 	bne	r2,zero,81116400 <quorem+0x1d0>
811163d4:	18bfff04 	addi	r2,r3,-4
811163d8:	a880082e 	bgeu	r21,r2,811163fc <quorem+0x1cc>
811163dc:	18ffff17 	ldw	r3,-4(r3)
811163e0:	18000326 	beq	r3,zero,811163f0 <quorem+0x1c0>
811163e4:	00000506 	br	811163fc <quorem+0x1cc>
811163e8:	10c00017 	ldw	r3,0(r2)
811163ec:	1800031e 	bne	r3,zero,811163fc <quorem+0x1cc>
811163f0:	10bfff04 	addi	r2,r2,-4
811163f4:	94bfffc4 	addi	r18,r18,-1
811163f8:	a8bffb36 	bltu	r21,r2,811163e8 <__reset+0xfb0f63e8>
811163fc:	84800415 	stw	r18,16(r16)
81116400:	9805883a 	mov	r2,r19
81116404:	dfc00817 	ldw	ra,32(sp)
81116408:	ddc00717 	ldw	r23,28(sp)
8111640c:	dd800617 	ldw	r22,24(sp)
81116410:	dd400517 	ldw	r21,20(sp)
81116414:	dd000417 	ldw	r20,16(sp)
81116418:	dcc00317 	ldw	r19,12(sp)
8111641c:	dc800217 	ldw	r18,8(sp)
81116420:	dc400117 	ldw	r17,4(sp)
81116424:	dc000017 	ldw	r16,0(sp)
81116428:	dec00904 	addi	sp,sp,36
8111642c:	f800283a 	ret
81116430:	0005883a 	mov	r2,zero
81116434:	003ff306 	br	81116404 <__reset+0xfb0f6404>

81116438 <_dtoa_r>:
81116438:	deffde04 	addi	sp,sp,-136
8111643c:	de00012e 	bgeu	sp,et,81116444 <_dtoa_r+0xc>
81116440:	003b68fa 	trap	3
81116444:	20801017 	ldw	r2,64(r4)
81116448:	df002015 	stw	fp,128(sp)
8111644c:	dcc01b15 	stw	r19,108(sp)
81116450:	dc801a15 	stw	r18,104(sp)
81116454:	dc401915 	stw	r17,100(sp)
81116458:	dc001815 	stw	r16,96(sp)
8111645c:	dfc02115 	stw	ra,132(sp)
81116460:	ddc01f15 	stw	r23,124(sp)
81116464:	dd801e15 	stw	r22,120(sp)
81116468:	dd401d15 	stw	r21,116(sp)
8111646c:	dd001c15 	stw	r20,112(sp)
81116470:	d9c00315 	stw	r7,12(sp)
81116474:	2039883a 	mov	fp,r4
81116478:	3023883a 	mov	r17,r6
8111647c:	2825883a 	mov	r18,r5
81116480:	dc002417 	ldw	r16,144(sp)
81116484:	3027883a 	mov	r19,r6
81116488:	10000826 	beq	r2,zero,811164ac <_dtoa_r+0x74>
8111648c:	21801117 	ldw	r6,68(r4)
81116490:	00c00044 	movi	r3,1
81116494:	100b883a 	mov	r5,r2
81116498:	1986983a 	sll	r3,r3,r6
8111649c:	11800115 	stw	r6,4(r2)
811164a0:	10c00215 	stw	r3,8(r2)
811164a4:	11196000 	call	81119600 <_Bfree>
811164a8:	e0001015 	stw	zero,64(fp)
811164ac:	88002e16 	blt	r17,zero,81116568 <_dtoa_r+0x130>
811164b0:	80000015 	stw	zero,0(r16)
811164b4:	889ffc2c 	andhi	r2,r17,32752
811164b8:	00dffc34 	movhi	r3,32752
811164bc:	10c01c26 	beq	r2,r3,81116530 <_dtoa_r+0xf8>
811164c0:	000d883a 	mov	r6,zero
811164c4:	000f883a 	mov	r7,zero
811164c8:	9009883a 	mov	r4,r18
811164cc:	980b883a 	mov	r5,r19
811164d0:	112303c0 	call	8112303c <__eqdf2>
811164d4:	10002b1e 	bne	r2,zero,81116584 <_dtoa_r+0x14c>
811164d8:	d9c02317 	ldw	r7,140(sp)
811164dc:	00800044 	movi	r2,1
811164e0:	38800015 	stw	r2,0(r7)
811164e4:	d8802517 	ldw	r2,148(sp)
811164e8:	10019e26 	beq	r2,zero,81116b64 <_dtoa_r+0x72c>
811164ec:	d8c02517 	ldw	r3,148(sp)
811164f0:	00a04534 	movhi	r2,33044
811164f4:	10ae3244 	addi	r2,r2,-18231
811164f8:	18800015 	stw	r2,0(r3)
811164fc:	10bfffc4 	addi	r2,r2,-1
81116500:	dfc02117 	ldw	ra,132(sp)
81116504:	df002017 	ldw	fp,128(sp)
81116508:	ddc01f17 	ldw	r23,124(sp)
8111650c:	dd801e17 	ldw	r22,120(sp)
81116510:	dd401d17 	ldw	r21,116(sp)
81116514:	dd001c17 	ldw	r20,112(sp)
81116518:	dcc01b17 	ldw	r19,108(sp)
8111651c:	dc801a17 	ldw	r18,104(sp)
81116520:	dc401917 	ldw	r17,100(sp)
81116524:	dc001817 	ldw	r16,96(sp)
81116528:	dec02204 	addi	sp,sp,136
8111652c:	f800283a 	ret
81116530:	d8c02317 	ldw	r3,140(sp)
81116534:	0089c3c4 	movi	r2,9999
81116538:	18800015 	stw	r2,0(r3)
8111653c:	90017726 	beq	r18,zero,81116b1c <_dtoa_r+0x6e4>
81116540:	00a04534 	movhi	r2,33044
81116544:	10ae5004 	addi	r2,r2,-18112
81116548:	d9002517 	ldw	r4,148(sp)
8111654c:	203fec26 	beq	r4,zero,81116500 <__reset+0xfb0f6500>
81116550:	10c000c7 	ldb	r3,3(r2)
81116554:	1801781e 	bne	r3,zero,81116b38 <_dtoa_r+0x700>
81116558:	10c000c4 	addi	r3,r2,3
8111655c:	d9802517 	ldw	r6,148(sp)
81116560:	30c00015 	stw	r3,0(r6)
81116564:	003fe606 	br	81116500 <__reset+0xfb0f6500>
81116568:	04e00034 	movhi	r19,32768
8111656c:	9cffffc4 	addi	r19,r19,-1
81116570:	00800044 	movi	r2,1
81116574:	8ce6703a 	and	r19,r17,r19
81116578:	80800015 	stw	r2,0(r16)
8111657c:	9823883a 	mov	r17,r19
81116580:	003fcc06 	br	811164b4 <__reset+0xfb0f64b4>
81116584:	d8800204 	addi	r2,sp,8
81116588:	d8800015 	stw	r2,0(sp)
8111658c:	d9c00104 	addi	r7,sp,4
81116590:	900b883a 	mov	r5,r18
81116594:	980d883a 	mov	r6,r19
81116598:	e009883a 	mov	r4,fp
8111659c:	8820d53a 	srli	r16,r17,20
811165a0:	111a22c0 	call	8111a22c <__d2b>
811165a4:	d8800915 	stw	r2,36(sp)
811165a8:	8001651e 	bne	r16,zero,81116b40 <_dtoa_r+0x708>
811165ac:	dd800217 	ldw	r22,8(sp)
811165b0:	dc000117 	ldw	r16,4(sp)
811165b4:	00800804 	movi	r2,32
811165b8:	b421883a 	add	r16,r22,r16
811165bc:	80c10c84 	addi	r3,r16,1074
811165c0:	10c2d10e 	bge	r2,r3,81117108 <_dtoa_r+0xcd0>
811165c4:	00801004 	movi	r2,64
811165c8:	81010484 	addi	r4,r16,1042
811165cc:	10c7c83a 	sub	r3,r2,r3
811165d0:	9108d83a 	srl	r4,r18,r4
811165d4:	88e2983a 	sll	r17,r17,r3
811165d8:	2448b03a 	or	r4,r4,r17
811165dc:	1123cfc0 	call	81123cfc <__floatunsidf>
811165e0:	017f8434 	movhi	r5,65040
811165e4:	01800044 	movi	r6,1
811165e8:	1009883a 	mov	r4,r2
811165ec:	194b883a 	add	r5,r3,r5
811165f0:	843fffc4 	addi	r16,r16,-1
811165f4:	d9801115 	stw	r6,68(sp)
811165f8:	000d883a 	mov	r6,zero
811165fc:	01cffe34 	movhi	r7,16376
81116600:	11232940 	call	81123294 <__subdf3>
81116604:	0198dbf4 	movhi	r6,25455
81116608:	01cff4f4 	movhi	r7,16339
8111660c:	3190d844 	addi	r6,r6,17249
81116610:	39e1e9c4 	addi	r7,r7,-30809
81116614:	1009883a 	mov	r4,r2
81116618:	180b883a 	mov	r5,r3
8111661c:	110da7c0 	call	8110da7c <__muldf3>
81116620:	01a2d874 	movhi	r6,35681
81116624:	01cff1f4 	movhi	r7,16327
81116628:	31b22cc4 	addi	r6,r6,-14157
8111662c:	39e28a04 	addi	r7,r7,-30168
81116630:	180b883a 	mov	r5,r3
81116634:	1009883a 	mov	r4,r2
81116638:	1121e980 	call	81121e98 <__adddf3>
8111663c:	8009883a 	mov	r4,r16
81116640:	1029883a 	mov	r20,r2
81116644:	1823883a 	mov	r17,r3
81116648:	1123c180 	call	81123c18 <__floatsidf>
8111664c:	019427f4 	movhi	r6,20639
81116650:	01cff4f4 	movhi	r7,16339
81116654:	319e7ec4 	addi	r6,r6,31227
81116658:	39d104c4 	addi	r7,r7,17427
8111665c:	1009883a 	mov	r4,r2
81116660:	180b883a 	mov	r5,r3
81116664:	110da7c0 	call	8110da7c <__muldf3>
81116668:	100d883a 	mov	r6,r2
8111666c:	180f883a 	mov	r7,r3
81116670:	a009883a 	mov	r4,r20
81116674:	880b883a 	mov	r5,r17
81116678:	1121e980 	call	81121e98 <__adddf3>
8111667c:	1009883a 	mov	r4,r2
81116680:	180b883a 	mov	r5,r3
81116684:	1029883a 	mov	r20,r2
81116688:	1823883a 	mov	r17,r3
8111668c:	1123b980 	call	81123b98 <__fixdfsi>
81116690:	000d883a 	mov	r6,zero
81116694:	000f883a 	mov	r7,zero
81116698:	a009883a 	mov	r4,r20
8111669c:	880b883a 	mov	r5,r17
811166a0:	d8800515 	stw	r2,20(sp)
811166a4:	11231a00 	call	811231a0 <__ledf2>
811166a8:	10028716 	blt	r2,zero,811170c8 <_dtoa_r+0xc90>
811166ac:	d8c00517 	ldw	r3,20(sp)
811166b0:	00800584 	movi	r2,22
811166b4:	10c27536 	bltu	r2,r3,8111708c <_dtoa_r+0xc54>
811166b8:	180490fa 	slli	r2,r3,3
811166bc:	00e04534 	movhi	r3,33044
811166c0:	18ee6b04 	addi	r3,r3,-18004
811166c4:	1885883a 	add	r2,r3,r2
811166c8:	11000017 	ldw	r4,0(r2)
811166cc:	11400117 	ldw	r5,4(r2)
811166d0:	900d883a 	mov	r6,r18
811166d4:	980f883a 	mov	r7,r19
811166d8:	11230c40 	call	811230c4 <__gedf2>
811166dc:	00828d0e 	bge	zero,r2,81117114 <_dtoa_r+0xcdc>
811166e0:	d9000517 	ldw	r4,20(sp)
811166e4:	d8000e15 	stw	zero,56(sp)
811166e8:	213fffc4 	addi	r4,r4,-1
811166ec:	d9000515 	stw	r4,20(sp)
811166f0:	b42dc83a 	sub	r22,r22,r16
811166f4:	b5bfffc4 	addi	r22,r22,-1
811166f8:	b0026f16 	blt	r22,zero,811170b8 <_dtoa_r+0xc80>
811166fc:	d8000815 	stw	zero,32(sp)
81116700:	d9c00517 	ldw	r7,20(sp)
81116704:	38026416 	blt	r7,zero,81117098 <_dtoa_r+0xc60>
81116708:	b1ed883a 	add	r22,r22,r7
8111670c:	d9c00d15 	stw	r7,52(sp)
81116710:	d8000a15 	stw	zero,40(sp)
81116714:	d9800317 	ldw	r6,12(sp)
81116718:	00800244 	movi	r2,9
8111671c:	11811436 	bltu	r2,r6,81116b70 <_dtoa_r+0x738>
81116720:	00800144 	movi	r2,5
81116724:	1184e10e 	bge	r2,r6,81117aac <_dtoa_r+0x1674>
81116728:	31bfff04 	addi	r6,r6,-4
8111672c:	d9800315 	stw	r6,12(sp)
81116730:	0023883a 	mov	r17,zero
81116734:	d9800317 	ldw	r6,12(sp)
81116738:	008000c4 	movi	r2,3
8111673c:	30836726 	beq	r6,r2,811174dc <_dtoa_r+0x10a4>
81116740:	1183410e 	bge	r2,r6,81117448 <_dtoa_r+0x1010>
81116744:	d9c00317 	ldw	r7,12(sp)
81116748:	00800104 	movi	r2,4
8111674c:	38827c26 	beq	r7,r2,81117140 <_dtoa_r+0xd08>
81116750:	00800144 	movi	r2,5
81116754:	3884c41e 	bne	r7,r2,81117a68 <_dtoa_r+0x1630>
81116758:	00800044 	movi	r2,1
8111675c:	d8800b15 	stw	r2,44(sp)
81116760:	d8c00517 	ldw	r3,20(sp)
81116764:	d9002217 	ldw	r4,136(sp)
81116768:	1907883a 	add	r3,r3,r4
8111676c:	19800044 	addi	r6,r3,1
81116770:	d8c00c15 	stw	r3,48(sp)
81116774:	d9800615 	stw	r6,24(sp)
81116778:	0183a40e 	bge	zero,r6,8111760c <_dtoa_r+0x11d4>
8111677c:	d9800617 	ldw	r6,24(sp)
81116780:	3021883a 	mov	r16,r6
81116784:	e0001115 	stw	zero,68(fp)
81116788:	008005c4 	movi	r2,23
8111678c:	1184c92e 	bgeu	r2,r6,81117ab4 <_dtoa_r+0x167c>
81116790:	00c00044 	movi	r3,1
81116794:	00800104 	movi	r2,4
81116798:	1085883a 	add	r2,r2,r2
8111679c:	11000504 	addi	r4,r2,20
811167a0:	180b883a 	mov	r5,r3
811167a4:	18c00044 	addi	r3,r3,1
811167a8:	313ffb2e 	bgeu	r6,r4,81116798 <__reset+0xfb0f6798>
811167ac:	e1401115 	stw	r5,68(fp)
811167b0:	e009883a 	mov	r4,fp
811167b4:	11195500 	call	81119550 <_Balloc>
811167b8:	d8800715 	stw	r2,28(sp)
811167bc:	e0801015 	stw	r2,64(fp)
811167c0:	00800384 	movi	r2,14
811167c4:	1400f736 	bltu	r2,r16,81116ba4 <_dtoa_r+0x76c>
811167c8:	8800f626 	beq	r17,zero,81116ba4 <_dtoa_r+0x76c>
811167cc:	d9c00517 	ldw	r7,20(sp)
811167d0:	01c39a0e 	bge	zero,r7,8111763c <_dtoa_r+0x1204>
811167d4:	388003cc 	andi	r2,r7,15
811167d8:	100490fa 	slli	r2,r2,3
811167dc:	382bd13a 	srai	r21,r7,4
811167e0:	00e04534 	movhi	r3,33044
811167e4:	18ee6b04 	addi	r3,r3,-18004
811167e8:	1885883a 	add	r2,r3,r2
811167ec:	a8c0040c 	andi	r3,r21,16
811167f0:	12400017 	ldw	r9,0(r2)
811167f4:	12000117 	ldw	r8,4(r2)
811167f8:	18037926 	beq	r3,zero,811175e0 <_dtoa_r+0x11a8>
811167fc:	00a04534 	movhi	r2,33044
81116800:	10ae6104 	addi	r2,r2,-18044
81116804:	11800817 	ldw	r6,32(r2)
81116808:	11c00917 	ldw	r7,36(r2)
8111680c:	9009883a 	mov	r4,r18
81116810:	980b883a 	mov	r5,r19
81116814:	da001715 	stw	r8,92(sp)
81116818:	da401615 	stw	r9,88(sp)
8111681c:	112274c0 	call	8112274c <__divdf3>
81116820:	da001717 	ldw	r8,92(sp)
81116824:	da401617 	ldw	r9,88(sp)
81116828:	ad4003cc 	andi	r21,r21,15
8111682c:	040000c4 	movi	r16,3
81116830:	1023883a 	mov	r17,r2
81116834:	1829883a 	mov	r20,r3
81116838:	a8001126 	beq	r21,zero,81116880 <_dtoa_r+0x448>
8111683c:	05e04534 	movhi	r23,33044
81116840:	bdee6104 	addi	r23,r23,-18044
81116844:	4805883a 	mov	r2,r9
81116848:	4007883a 	mov	r3,r8
8111684c:	a980004c 	andi	r6,r21,1
81116850:	1009883a 	mov	r4,r2
81116854:	a82bd07a 	srai	r21,r21,1
81116858:	180b883a 	mov	r5,r3
8111685c:	30000426 	beq	r6,zero,81116870 <_dtoa_r+0x438>
81116860:	b9800017 	ldw	r6,0(r23)
81116864:	b9c00117 	ldw	r7,4(r23)
81116868:	84000044 	addi	r16,r16,1
8111686c:	110da7c0 	call	8110da7c <__muldf3>
81116870:	bdc00204 	addi	r23,r23,8
81116874:	a83ff51e 	bne	r21,zero,8111684c <__reset+0xfb0f684c>
81116878:	1013883a 	mov	r9,r2
8111687c:	1811883a 	mov	r8,r3
81116880:	480d883a 	mov	r6,r9
81116884:	400f883a 	mov	r7,r8
81116888:	8809883a 	mov	r4,r17
8111688c:	a00b883a 	mov	r5,r20
81116890:	112274c0 	call	8112274c <__divdf3>
81116894:	d8800f15 	stw	r2,60(sp)
81116898:	d8c01015 	stw	r3,64(sp)
8111689c:	d8c00e17 	ldw	r3,56(sp)
811168a0:	18000626 	beq	r3,zero,811168bc <_dtoa_r+0x484>
811168a4:	d9000f17 	ldw	r4,60(sp)
811168a8:	d9401017 	ldw	r5,64(sp)
811168ac:	000d883a 	mov	r6,zero
811168b0:	01cffc34 	movhi	r7,16368
811168b4:	11231a00 	call	811231a0 <__ledf2>
811168b8:	10040b16 	blt	r2,zero,811178e8 <_dtoa_r+0x14b0>
811168bc:	8009883a 	mov	r4,r16
811168c0:	1123c180 	call	81123c18 <__floatsidf>
811168c4:	d9800f17 	ldw	r6,60(sp)
811168c8:	d9c01017 	ldw	r7,64(sp)
811168cc:	1009883a 	mov	r4,r2
811168d0:	180b883a 	mov	r5,r3
811168d4:	110da7c0 	call	8110da7c <__muldf3>
811168d8:	000d883a 	mov	r6,zero
811168dc:	01d00734 	movhi	r7,16412
811168e0:	1009883a 	mov	r4,r2
811168e4:	180b883a 	mov	r5,r3
811168e8:	1121e980 	call	81121e98 <__adddf3>
811168ec:	1021883a 	mov	r16,r2
811168f0:	d8800617 	ldw	r2,24(sp)
811168f4:	047f3034 	movhi	r17,64704
811168f8:	1c63883a 	add	r17,r3,r17
811168fc:	10031826 	beq	r2,zero,81117560 <_dtoa_r+0x1128>
81116900:	d8c00517 	ldw	r3,20(sp)
81116904:	db000617 	ldw	r12,24(sp)
81116908:	d8c01315 	stw	r3,76(sp)
8111690c:	d9000b17 	ldw	r4,44(sp)
81116910:	20038f26 	beq	r4,zero,81117750 <_dtoa_r+0x1318>
81116914:	60bfffc4 	addi	r2,r12,-1
81116918:	100490fa 	slli	r2,r2,3
8111691c:	00e04534 	movhi	r3,33044
81116920:	18ee6b04 	addi	r3,r3,-18004
81116924:	1885883a 	add	r2,r3,r2
81116928:	11800017 	ldw	r6,0(r2)
8111692c:	11c00117 	ldw	r7,4(r2)
81116930:	d8800717 	ldw	r2,28(sp)
81116934:	0009883a 	mov	r4,zero
81116938:	014ff834 	movhi	r5,16352
8111693c:	db001615 	stw	r12,88(sp)
81116940:	15c00044 	addi	r23,r2,1
81116944:	112274c0 	call	8112274c <__divdf3>
81116948:	800d883a 	mov	r6,r16
8111694c:	880f883a 	mov	r7,r17
81116950:	1009883a 	mov	r4,r2
81116954:	180b883a 	mov	r5,r3
81116958:	11232940 	call	81123294 <__subdf3>
8111695c:	d9401017 	ldw	r5,64(sp)
81116960:	d9000f17 	ldw	r4,60(sp)
81116964:	102b883a 	mov	r21,r2
81116968:	d8c01215 	stw	r3,72(sp)
8111696c:	1123b980 	call	81123b98 <__fixdfsi>
81116970:	1009883a 	mov	r4,r2
81116974:	1029883a 	mov	r20,r2
81116978:	1123c180 	call	81123c18 <__floatsidf>
8111697c:	d9000f17 	ldw	r4,60(sp)
81116980:	d9401017 	ldw	r5,64(sp)
81116984:	100d883a 	mov	r6,r2
81116988:	180f883a 	mov	r7,r3
8111698c:	11232940 	call	81123294 <__subdf3>
81116990:	1823883a 	mov	r17,r3
81116994:	d8c00717 	ldw	r3,28(sp)
81116998:	d9401217 	ldw	r5,72(sp)
8111699c:	a2000c04 	addi	r8,r20,48
811169a0:	1021883a 	mov	r16,r2
811169a4:	1a000005 	stb	r8,0(r3)
811169a8:	800d883a 	mov	r6,r16
811169ac:	880f883a 	mov	r7,r17
811169b0:	a809883a 	mov	r4,r21
811169b4:	4029883a 	mov	r20,r8
811169b8:	11230c40 	call	811230c4 <__gedf2>
811169bc:	00841d16 	blt	zero,r2,81117a34 <_dtoa_r+0x15fc>
811169c0:	800d883a 	mov	r6,r16
811169c4:	880f883a 	mov	r7,r17
811169c8:	0009883a 	mov	r4,zero
811169cc:	014ffc34 	movhi	r5,16368
811169d0:	11232940 	call	81123294 <__subdf3>
811169d4:	d9401217 	ldw	r5,72(sp)
811169d8:	100d883a 	mov	r6,r2
811169dc:	180f883a 	mov	r7,r3
811169e0:	a809883a 	mov	r4,r21
811169e4:	11230c40 	call	811230c4 <__gedf2>
811169e8:	db001617 	ldw	r12,88(sp)
811169ec:	00840e16 	blt	zero,r2,81117a28 <_dtoa_r+0x15f0>
811169f0:	00800044 	movi	r2,1
811169f4:	13006b0e 	bge	r2,r12,81116ba4 <_dtoa_r+0x76c>
811169f8:	d9000717 	ldw	r4,28(sp)
811169fc:	dd800f15 	stw	r22,60(sp)
81116a00:	dcc01015 	stw	r19,64(sp)
81116a04:	2319883a 	add	r12,r4,r12
81116a08:	dcc01217 	ldw	r19,72(sp)
81116a0c:	602d883a 	mov	r22,r12
81116a10:	dc801215 	stw	r18,72(sp)
81116a14:	b825883a 	mov	r18,r23
81116a18:	00000906 	br	81116a40 <_dtoa_r+0x608>
81116a1c:	11232940 	call	81123294 <__subdf3>
81116a20:	a80d883a 	mov	r6,r21
81116a24:	980f883a 	mov	r7,r19
81116a28:	1009883a 	mov	r4,r2
81116a2c:	180b883a 	mov	r5,r3
81116a30:	11231a00 	call	811231a0 <__ledf2>
81116a34:	1003e816 	blt	r2,zero,811179d8 <_dtoa_r+0x15a0>
81116a38:	b825883a 	mov	r18,r23
81116a3c:	bd83e926 	beq	r23,r22,811179e4 <_dtoa_r+0x15ac>
81116a40:	a809883a 	mov	r4,r21
81116a44:	980b883a 	mov	r5,r19
81116a48:	000d883a 	mov	r6,zero
81116a4c:	01d00934 	movhi	r7,16420
81116a50:	110da7c0 	call	8110da7c <__muldf3>
81116a54:	000d883a 	mov	r6,zero
81116a58:	01d00934 	movhi	r7,16420
81116a5c:	8009883a 	mov	r4,r16
81116a60:	880b883a 	mov	r5,r17
81116a64:	102b883a 	mov	r21,r2
81116a68:	1827883a 	mov	r19,r3
81116a6c:	110da7c0 	call	8110da7c <__muldf3>
81116a70:	180b883a 	mov	r5,r3
81116a74:	1009883a 	mov	r4,r2
81116a78:	1821883a 	mov	r16,r3
81116a7c:	1023883a 	mov	r17,r2
81116a80:	1123b980 	call	81123b98 <__fixdfsi>
81116a84:	1009883a 	mov	r4,r2
81116a88:	1029883a 	mov	r20,r2
81116a8c:	1123c180 	call	81123c18 <__floatsidf>
81116a90:	8809883a 	mov	r4,r17
81116a94:	800b883a 	mov	r5,r16
81116a98:	100d883a 	mov	r6,r2
81116a9c:	180f883a 	mov	r7,r3
81116aa0:	11232940 	call	81123294 <__subdf3>
81116aa4:	a5000c04 	addi	r20,r20,48
81116aa8:	a80d883a 	mov	r6,r21
81116aac:	980f883a 	mov	r7,r19
81116ab0:	1009883a 	mov	r4,r2
81116ab4:	180b883a 	mov	r5,r3
81116ab8:	95000005 	stb	r20,0(r18)
81116abc:	1021883a 	mov	r16,r2
81116ac0:	1823883a 	mov	r17,r3
81116ac4:	11231a00 	call	811231a0 <__ledf2>
81116ac8:	bdc00044 	addi	r23,r23,1
81116acc:	800d883a 	mov	r6,r16
81116ad0:	880f883a 	mov	r7,r17
81116ad4:	0009883a 	mov	r4,zero
81116ad8:	014ffc34 	movhi	r5,16368
81116adc:	103fcf0e 	bge	r2,zero,81116a1c <__reset+0xfb0f6a1c>
81116ae0:	d8c01317 	ldw	r3,76(sp)
81116ae4:	d8c00515 	stw	r3,20(sp)
81116ae8:	d9400917 	ldw	r5,36(sp)
81116aec:	e009883a 	mov	r4,fp
81116af0:	11196000 	call	81119600 <_Bfree>
81116af4:	d9000517 	ldw	r4,20(sp)
81116af8:	d9802317 	ldw	r6,140(sp)
81116afc:	d9c02517 	ldw	r7,148(sp)
81116b00:	b8000005 	stb	zero,0(r23)
81116b04:	20800044 	addi	r2,r4,1
81116b08:	30800015 	stw	r2,0(r6)
81116b0c:	3802aa26 	beq	r7,zero,811175b8 <_dtoa_r+0x1180>
81116b10:	3dc00015 	stw	r23,0(r7)
81116b14:	d8800717 	ldw	r2,28(sp)
81116b18:	003e7906 	br	81116500 <__reset+0xfb0f6500>
81116b1c:	00800434 	movhi	r2,16
81116b20:	10bfffc4 	addi	r2,r2,-1
81116b24:	88a2703a 	and	r17,r17,r2
81116b28:	883e851e 	bne	r17,zero,81116540 <__reset+0xfb0f6540>
81116b2c:	00a04534 	movhi	r2,33044
81116b30:	10ae4d04 	addi	r2,r2,-18124
81116b34:	003e8406 	br	81116548 <__reset+0xfb0f6548>
81116b38:	10c00204 	addi	r3,r2,8
81116b3c:	003e8706 	br	8111655c <__reset+0xfb0f655c>
81116b40:	01400434 	movhi	r5,16
81116b44:	297fffc4 	addi	r5,r5,-1
81116b48:	994a703a 	and	r5,r19,r5
81116b4c:	9009883a 	mov	r4,r18
81116b50:	843f0044 	addi	r16,r16,-1023
81116b54:	294ffc34 	orhi	r5,r5,16368
81116b58:	dd800217 	ldw	r22,8(sp)
81116b5c:	d8001115 	stw	zero,68(sp)
81116b60:	003ea506 	br	811165f8 <__reset+0xfb0f65f8>
81116b64:	00a04534 	movhi	r2,33044
81116b68:	10ae3204 	addi	r2,r2,-18232
81116b6c:	003e6406 	br	81116500 <__reset+0xfb0f6500>
81116b70:	e0001115 	stw	zero,68(fp)
81116b74:	000b883a 	mov	r5,zero
81116b78:	e009883a 	mov	r4,fp
81116b7c:	11195500 	call	81119550 <_Balloc>
81116b80:	01bfffc4 	movi	r6,-1
81116b84:	01c00044 	movi	r7,1
81116b88:	d8800715 	stw	r2,28(sp)
81116b8c:	d9800c15 	stw	r6,48(sp)
81116b90:	e0801015 	stw	r2,64(fp)
81116b94:	d8000315 	stw	zero,12(sp)
81116b98:	d9c00b15 	stw	r7,44(sp)
81116b9c:	d9800615 	stw	r6,24(sp)
81116ba0:	d8002215 	stw	zero,136(sp)
81116ba4:	d8800117 	ldw	r2,4(sp)
81116ba8:	10008916 	blt	r2,zero,81116dd0 <_dtoa_r+0x998>
81116bac:	d9000517 	ldw	r4,20(sp)
81116bb0:	00c00384 	movi	r3,14
81116bb4:	19008616 	blt	r3,r4,81116dd0 <_dtoa_r+0x998>
81116bb8:	200490fa 	slli	r2,r4,3
81116bbc:	00e04534 	movhi	r3,33044
81116bc0:	d9802217 	ldw	r6,136(sp)
81116bc4:	18ee6b04 	addi	r3,r3,-18004
81116bc8:	1885883a 	add	r2,r3,r2
81116bcc:	14000017 	ldw	r16,0(r2)
81116bd0:	14400117 	ldw	r17,4(r2)
81116bd4:	30016316 	blt	r6,zero,81117164 <_dtoa_r+0xd2c>
81116bd8:	800d883a 	mov	r6,r16
81116bdc:	880f883a 	mov	r7,r17
81116be0:	9009883a 	mov	r4,r18
81116be4:	980b883a 	mov	r5,r19
81116be8:	112274c0 	call	8112274c <__divdf3>
81116bec:	180b883a 	mov	r5,r3
81116bf0:	1009883a 	mov	r4,r2
81116bf4:	1123b980 	call	81123b98 <__fixdfsi>
81116bf8:	1009883a 	mov	r4,r2
81116bfc:	102b883a 	mov	r21,r2
81116c00:	1123c180 	call	81123c18 <__floatsidf>
81116c04:	800d883a 	mov	r6,r16
81116c08:	880f883a 	mov	r7,r17
81116c0c:	1009883a 	mov	r4,r2
81116c10:	180b883a 	mov	r5,r3
81116c14:	110da7c0 	call	8110da7c <__muldf3>
81116c18:	100d883a 	mov	r6,r2
81116c1c:	180f883a 	mov	r7,r3
81116c20:	9009883a 	mov	r4,r18
81116c24:	980b883a 	mov	r5,r19
81116c28:	11232940 	call	81123294 <__subdf3>
81116c2c:	d9c00717 	ldw	r7,28(sp)
81116c30:	1009883a 	mov	r4,r2
81116c34:	a8800c04 	addi	r2,r21,48
81116c38:	38800005 	stb	r2,0(r7)
81116c3c:	3dc00044 	addi	r23,r7,1
81116c40:	d9c00617 	ldw	r7,24(sp)
81116c44:	01800044 	movi	r6,1
81116c48:	180b883a 	mov	r5,r3
81116c4c:	2005883a 	mov	r2,r4
81116c50:	39803826 	beq	r7,r6,81116d34 <_dtoa_r+0x8fc>
81116c54:	000d883a 	mov	r6,zero
81116c58:	01d00934 	movhi	r7,16420
81116c5c:	110da7c0 	call	8110da7c <__muldf3>
81116c60:	000d883a 	mov	r6,zero
81116c64:	000f883a 	mov	r7,zero
81116c68:	1009883a 	mov	r4,r2
81116c6c:	180b883a 	mov	r5,r3
81116c70:	1025883a 	mov	r18,r2
81116c74:	1827883a 	mov	r19,r3
81116c78:	112303c0 	call	8112303c <__eqdf2>
81116c7c:	103f9a26 	beq	r2,zero,81116ae8 <__reset+0xfb0f6ae8>
81116c80:	d9c00617 	ldw	r7,24(sp)
81116c84:	d8c00717 	ldw	r3,28(sp)
81116c88:	b829883a 	mov	r20,r23
81116c8c:	38bfffc4 	addi	r2,r7,-1
81116c90:	18ad883a 	add	r22,r3,r2
81116c94:	00000a06 	br	81116cc0 <_dtoa_r+0x888>
81116c98:	110da7c0 	call	8110da7c <__muldf3>
81116c9c:	000d883a 	mov	r6,zero
81116ca0:	000f883a 	mov	r7,zero
81116ca4:	1009883a 	mov	r4,r2
81116ca8:	180b883a 	mov	r5,r3
81116cac:	1025883a 	mov	r18,r2
81116cb0:	1827883a 	mov	r19,r3
81116cb4:	b829883a 	mov	r20,r23
81116cb8:	112303c0 	call	8112303c <__eqdf2>
81116cbc:	103f8a26 	beq	r2,zero,81116ae8 <__reset+0xfb0f6ae8>
81116cc0:	800d883a 	mov	r6,r16
81116cc4:	880f883a 	mov	r7,r17
81116cc8:	9009883a 	mov	r4,r18
81116ccc:	980b883a 	mov	r5,r19
81116cd0:	112274c0 	call	8112274c <__divdf3>
81116cd4:	180b883a 	mov	r5,r3
81116cd8:	1009883a 	mov	r4,r2
81116cdc:	1123b980 	call	81123b98 <__fixdfsi>
81116ce0:	1009883a 	mov	r4,r2
81116ce4:	102b883a 	mov	r21,r2
81116ce8:	1123c180 	call	81123c18 <__floatsidf>
81116cec:	800d883a 	mov	r6,r16
81116cf0:	880f883a 	mov	r7,r17
81116cf4:	1009883a 	mov	r4,r2
81116cf8:	180b883a 	mov	r5,r3
81116cfc:	110da7c0 	call	8110da7c <__muldf3>
81116d00:	100d883a 	mov	r6,r2
81116d04:	180f883a 	mov	r7,r3
81116d08:	9009883a 	mov	r4,r18
81116d0c:	980b883a 	mov	r5,r19
81116d10:	11232940 	call	81123294 <__subdf3>
81116d14:	aa000c04 	addi	r8,r21,48
81116d18:	a2000005 	stb	r8,0(r20)
81116d1c:	000d883a 	mov	r6,zero
81116d20:	01d00934 	movhi	r7,16420
81116d24:	1009883a 	mov	r4,r2
81116d28:	180b883a 	mov	r5,r3
81116d2c:	a5c00044 	addi	r23,r20,1
81116d30:	b53fd91e 	bne	r22,r20,81116c98 <__reset+0xfb0f6c98>
81116d34:	100d883a 	mov	r6,r2
81116d38:	180f883a 	mov	r7,r3
81116d3c:	1009883a 	mov	r4,r2
81116d40:	180b883a 	mov	r5,r3
81116d44:	1121e980 	call	81121e98 <__adddf3>
81116d48:	100d883a 	mov	r6,r2
81116d4c:	180f883a 	mov	r7,r3
81116d50:	8009883a 	mov	r4,r16
81116d54:	880b883a 	mov	r5,r17
81116d58:	1027883a 	mov	r19,r2
81116d5c:	1825883a 	mov	r18,r3
81116d60:	11231a00 	call	811231a0 <__ledf2>
81116d64:	10000816 	blt	r2,zero,81116d88 <_dtoa_r+0x950>
81116d68:	980d883a 	mov	r6,r19
81116d6c:	900f883a 	mov	r7,r18
81116d70:	8009883a 	mov	r4,r16
81116d74:	880b883a 	mov	r5,r17
81116d78:	112303c0 	call	8112303c <__eqdf2>
81116d7c:	103f5a1e 	bne	r2,zero,81116ae8 <__reset+0xfb0f6ae8>
81116d80:	ad40004c 	andi	r21,r21,1
81116d84:	a83f5826 	beq	r21,zero,81116ae8 <__reset+0xfb0f6ae8>
81116d88:	bd3fffc3 	ldbu	r20,-1(r23)
81116d8c:	b8bfffc4 	addi	r2,r23,-1
81116d90:	1007883a 	mov	r3,r2
81116d94:	01400e44 	movi	r5,57
81116d98:	d9800717 	ldw	r6,28(sp)
81116d9c:	00000506 	br	81116db4 <_dtoa_r+0x97c>
81116da0:	18ffffc4 	addi	r3,r3,-1
81116da4:	11824726 	beq	r2,r6,811176c4 <_dtoa_r+0x128c>
81116da8:	1d000003 	ldbu	r20,0(r3)
81116dac:	102f883a 	mov	r23,r2
81116db0:	10bfffc4 	addi	r2,r2,-1
81116db4:	a1003fcc 	andi	r4,r20,255
81116db8:	2100201c 	xori	r4,r4,128
81116dbc:	213fe004 	addi	r4,r4,-128
81116dc0:	217ff726 	beq	r4,r5,81116da0 <__reset+0xfb0f6da0>
81116dc4:	a2000044 	addi	r8,r20,1
81116dc8:	12000005 	stb	r8,0(r2)
81116dcc:	003f4606 	br	81116ae8 <__reset+0xfb0f6ae8>
81116dd0:	d9000b17 	ldw	r4,44(sp)
81116dd4:	2000c826 	beq	r4,zero,811170f8 <_dtoa_r+0xcc0>
81116dd8:	d9800317 	ldw	r6,12(sp)
81116ddc:	00c00044 	movi	r3,1
81116de0:	1980f90e 	bge	r3,r6,811171c8 <_dtoa_r+0xd90>
81116de4:	d8800617 	ldw	r2,24(sp)
81116de8:	d8c00a17 	ldw	r3,40(sp)
81116dec:	157fffc4 	addi	r21,r2,-1
81116df0:	1d41f316 	blt	r3,r21,811175c0 <_dtoa_r+0x1188>
81116df4:	1d6bc83a 	sub	r21,r3,r21
81116df8:	d9c00617 	ldw	r7,24(sp)
81116dfc:	3802aa16 	blt	r7,zero,811178a8 <_dtoa_r+0x1470>
81116e00:	dd000817 	ldw	r20,32(sp)
81116e04:	d8800617 	ldw	r2,24(sp)
81116e08:	d8c00817 	ldw	r3,32(sp)
81116e0c:	01400044 	movi	r5,1
81116e10:	e009883a 	mov	r4,fp
81116e14:	1887883a 	add	r3,r3,r2
81116e18:	d8c00815 	stw	r3,32(sp)
81116e1c:	b0ad883a 	add	r22,r22,r2
81116e20:	11199740 	call	81119974 <__i2b>
81116e24:	1023883a 	mov	r17,r2
81116e28:	a0000826 	beq	r20,zero,81116e4c <_dtoa_r+0xa14>
81116e2c:	0580070e 	bge	zero,r22,81116e4c <_dtoa_r+0xa14>
81116e30:	a005883a 	mov	r2,r20
81116e34:	b500b916 	blt	r22,r20,8111711c <_dtoa_r+0xce4>
81116e38:	d9000817 	ldw	r4,32(sp)
81116e3c:	a0a9c83a 	sub	r20,r20,r2
81116e40:	b0adc83a 	sub	r22,r22,r2
81116e44:	2089c83a 	sub	r4,r4,r2
81116e48:	d9000815 	stw	r4,32(sp)
81116e4c:	d9800a17 	ldw	r6,40(sp)
81116e50:	0181810e 	bge	zero,r6,81117458 <_dtoa_r+0x1020>
81116e54:	d9c00b17 	ldw	r7,44(sp)
81116e58:	3800b326 	beq	r7,zero,81117128 <_dtoa_r+0xcf0>
81116e5c:	a800b226 	beq	r21,zero,81117128 <_dtoa_r+0xcf0>
81116e60:	880b883a 	mov	r5,r17
81116e64:	a80d883a 	mov	r6,r21
81116e68:	e009883a 	mov	r4,fp
81116e6c:	1119bb80 	call	81119bb8 <__pow5mult>
81116e70:	d9800917 	ldw	r6,36(sp)
81116e74:	100b883a 	mov	r5,r2
81116e78:	e009883a 	mov	r4,fp
81116e7c:	1023883a 	mov	r17,r2
81116e80:	11199b80 	call	811199b8 <__multiply>
81116e84:	1021883a 	mov	r16,r2
81116e88:	d8800a17 	ldw	r2,40(sp)
81116e8c:	d9400917 	ldw	r5,36(sp)
81116e90:	e009883a 	mov	r4,fp
81116e94:	1545c83a 	sub	r2,r2,r21
81116e98:	d8800a15 	stw	r2,40(sp)
81116e9c:	11196000 	call	81119600 <_Bfree>
81116ea0:	d8c00a17 	ldw	r3,40(sp)
81116ea4:	18009f1e 	bne	r3,zero,81117124 <_dtoa_r+0xcec>
81116ea8:	05c00044 	movi	r23,1
81116eac:	e009883a 	mov	r4,fp
81116eb0:	b80b883a 	mov	r5,r23
81116eb4:	11199740 	call	81119974 <__i2b>
81116eb8:	d9000d17 	ldw	r4,52(sp)
81116ebc:	102b883a 	mov	r21,r2
81116ec0:	2000ce26 	beq	r4,zero,811171fc <_dtoa_r+0xdc4>
81116ec4:	200d883a 	mov	r6,r4
81116ec8:	100b883a 	mov	r5,r2
81116ecc:	e009883a 	mov	r4,fp
81116ed0:	1119bb80 	call	81119bb8 <__pow5mult>
81116ed4:	d9800317 	ldw	r6,12(sp)
81116ed8:	102b883a 	mov	r21,r2
81116edc:	b981810e 	bge	r23,r6,811174e4 <_dtoa_r+0x10ac>
81116ee0:	0027883a 	mov	r19,zero
81116ee4:	a8800417 	ldw	r2,16(r21)
81116ee8:	05c00804 	movi	r23,32
81116eec:	10800104 	addi	r2,r2,4
81116ef0:	1085883a 	add	r2,r2,r2
81116ef4:	1085883a 	add	r2,r2,r2
81116ef8:	a885883a 	add	r2,r21,r2
81116efc:	11000017 	ldw	r4,0(r2)
81116f00:	111985c0 	call	8111985c <__hi0bits>
81116f04:	b885c83a 	sub	r2,r23,r2
81116f08:	1585883a 	add	r2,r2,r22
81116f0c:	108007cc 	andi	r2,r2,31
81116f10:	1000b326 	beq	r2,zero,811171e0 <_dtoa_r+0xda8>
81116f14:	00c00804 	movi	r3,32
81116f18:	1887c83a 	sub	r3,r3,r2
81116f1c:	01000104 	movi	r4,4
81116f20:	20c2cd0e 	bge	r4,r3,81117a58 <_dtoa_r+0x1620>
81116f24:	00c00704 	movi	r3,28
81116f28:	1885c83a 	sub	r2,r3,r2
81116f2c:	d8c00817 	ldw	r3,32(sp)
81116f30:	a0a9883a 	add	r20,r20,r2
81116f34:	b0ad883a 	add	r22,r22,r2
81116f38:	1887883a 	add	r3,r3,r2
81116f3c:	d8c00815 	stw	r3,32(sp)
81116f40:	d9800817 	ldw	r6,32(sp)
81116f44:	0180040e 	bge	zero,r6,81116f58 <_dtoa_r+0xb20>
81116f48:	800b883a 	mov	r5,r16
81116f4c:	e009883a 	mov	r4,fp
81116f50:	1119d000 	call	81119d00 <__lshift>
81116f54:	1021883a 	mov	r16,r2
81116f58:	0580050e 	bge	zero,r22,81116f70 <_dtoa_r+0xb38>
81116f5c:	a80b883a 	mov	r5,r21
81116f60:	b00d883a 	mov	r6,r22
81116f64:	e009883a 	mov	r4,fp
81116f68:	1119d000 	call	81119d00 <__lshift>
81116f6c:	102b883a 	mov	r21,r2
81116f70:	d9c00e17 	ldw	r7,56(sp)
81116f74:	3801211e 	bne	r7,zero,811173fc <_dtoa_r+0xfc4>
81116f78:	d9800617 	ldw	r6,24(sp)
81116f7c:	0181380e 	bge	zero,r6,81117460 <_dtoa_r+0x1028>
81116f80:	d8c00b17 	ldw	r3,44(sp)
81116f84:	1800ab1e 	bne	r3,zero,81117234 <_dtoa_r+0xdfc>
81116f88:	dc800717 	ldw	r18,28(sp)
81116f8c:	dcc00617 	ldw	r19,24(sp)
81116f90:	9029883a 	mov	r20,r18
81116f94:	00000206 	br	81116fa0 <_dtoa_r+0xb68>
81116f98:	11196280 	call	81119628 <__multadd>
81116f9c:	1021883a 	mov	r16,r2
81116fa0:	a80b883a 	mov	r5,r21
81116fa4:	8009883a 	mov	r4,r16
81116fa8:	11162300 	call	81116230 <quorem>
81116fac:	10800c04 	addi	r2,r2,48
81116fb0:	90800005 	stb	r2,0(r18)
81116fb4:	94800044 	addi	r18,r18,1
81116fb8:	9507c83a 	sub	r3,r18,r20
81116fbc:	000f883a 	mov	r7,zero
81116fc0:	01800284 	movi	r6,10
81116fc4:	800b883a 	mov	r5,r16
81116fc8:	e009883a 	mov	r4,fp
81116fcc:	1cfff216 	blt	r3,r19,81116f98 <__reset+0xfb0f6f98>
81116fd0:	1011883a 	mov	r8,r2
81116fd4:	d8800617 	ldw	r2,24(sp)
81116fd8:	0082370e 	bge	zero,r2,811178b8 <_dtoa_r+0x1480>
81116fdc:	d9000717 	ldw	r4,28(sp)
81116fe0:	0025883a 	mov	r18,zero
81116fe4:	20af883a 	add	r23,r4,r2
81116fe8:	01800044 	movi	r6,1
81116fec:	800b883a 	mov	r5,r16
81116ff0:	e009883a 	mov	r4,fp
81116ff4:	da001715 	stw	r8,92(sp)
81116ff8:	1119d000 	call	81119d00 <__lshift>
81116ffc:	a80b883a 	mov	r5,r21
81117000:	1009883a 	mov	r4,r2
81117004:	d8800915 	stw	r2,36(sp)
81117008:	1119e500 	call	81119e50 <__mcmp>
8111700c:	da001717 	ldw	r8,92(sp)
81117010:	0081800e 	bge	zero,r2,81117614 <_dtoa_r+0x11dc>
81117014:	b93fffc3 	ldbu	r4,-1(r23)
81117018:	b8bfffc4 	addi	r2,r23,-1
8111701c:	1007883a 	mov	r3,r2
81117020:	01800e44 	movi	r6,57
81117024:	d9c00717 	ldw	r7,28(sp)
81117028:	00000506 	br	81117040 <_dtoa_r+0xc08>
8111702c:	18ffffc4 	addi	r3,r3,-1
81117030:	11c12326 	beq	r2,r7,811174c0 <_dtoa_r+0x1088>
81117034:	19000003 	ldbu	r4,0(r3)
81117038:	102f883a 	mov	r23,r2
8111703c:	10bfffc4 	addi	r2,r2,-1
81117040:	21403fcc 	andi	r5,r4,255
81117044:	2940201c 	xori	r5,r5,128
81117048:	297fe004 	addi	r5,r5,-128
8111704c:	29bff726 	beq	r5,r6,8111702c <__reset+0xfb0f702c>
81117050:	21000044 	addi	r4,r4,1
81117054:	11000005 	stb	r4,0(r2)
81117058:	a80b883a 	mov	r5,r21
8111705c:	e009883a 	mov	r4,fp
81117060:	11196000 	call	81119600 <_Bfree>
81117064:	883ea026 	beq	r17,zero,81116ae8 <__reset+0xfb0f6ae8>
81117068:	90000426 	beq	r18,zero,8111707c <_dtoa_r+0xc44>
8111706c:	94400326 	beq	r18,r17,8111707c <_dtoa_r+0xc44>
81117070:	900b883a 	mov	r5,r18
81117074:	e009883a 	mov	r4,fp
81117078:	11196000 	call	81119600 <_Bfree>
8111707c:	880b883a 	mov	r5,r17
81117080:	e009883a 	mov	r4,fp
81117084:	11196000 	call	81119600 <_Bfree>
81117088:	003e9706 	br	81116ae8 <__reset+0xfb0f6ae8>
8111708c:	01800044 	movi	r6,1
81117090:	d9800e15 	stw	r6,56(sp)
81117094:	003d9606 	br	811166f0 <__reset+0xfb0f66f0>
81117098:	d8800817 	ldw	r2,32(sp)
8111709c:	d8c00517 	ldw	r3,20(sp)
811170a0:	d8000d15 	stw	zero,52(sp)
811170a4:	10c5c83a 	sub	r2,r2,r3
811170a8:	00c9c83a 	sub	r4,zero,r3
811170ac:	d8800815 	stw	r2,32(sp)
811170b0:	d9000a15 	stw	r4,40(sp)
811170b4:	003d9706 	br	81116714 <__reset+0xfb0f6714>
811170b8:	05adc83a 	sub	r22,zero,r22
811170bc:	dd800815 	stw	r22,32(sp)
811170c0:	002d883a 	mov	r22,zero
811170c4:	003d8e06 	br	81116700 <__reset+0xfb0f6700>
811170c8:	d9000517 	ldw	r4,20(sp)
811170cc:	1123c180 	call	81123c18 <__floatsidf>
811170d0:	100d883a 	mov	r6,r2
811170d4:	180f883a 	mov	r7,r3
811170d8:	a009883a 	mov	r4,r20
811170dc:	880b883a 	mov	r5,r17
811170e0:	112303c0 	call	8112303c <__eqdf2>
811170e4:	103d7126 	beq	r2,zero,811166ac <__reset+0xfb0f66ac>
811170e8:	d9c00517 	ldw	r7,20(sp)
811170ec:	39ffffc4 	addi	r7,r7,-1
811170f0:	d9c00515 	stw	r7,20(sp)
811170f4:	003d6d06 	br	811166ac <__reset+0xfb0f66ac>
811170f8:	dd400a17 	ldw	r21,40(sp)
811170fc:	dd000817 	ldw	r20,32(sp)
81117100:	0023883a 	mov	r17,zero
81117104:	003f4806 	br	81116e28 <__reset+0xfb0f6e28>
81117108:	10e3c83a 	sub	r17,r2,r3
8111710c:	9448983a 	sll	r4,r18,r17
81117110:	003d3206 	br	811165dc <__reset+0xfb0f65dc>
81117114:	d8000e15 	stw	zero,56(sp)
81117118:	003d7506 	br	811166f0 <__reset+0xfb0f66f0>
8111711c:	b005883a 	mov	r2,r22
81117120:	003f4506 	br	81116e38 <__reset+0xfb0f6e38>
81117124:	dc000915 	stw	r16,36(sp)
81117128:	d9800a17 	ldw	r6,40(sp)
8111712c:	d9400917 	ldw	r5,36(sp)
81117130:	e009883a 	mov	r4,fp
81117134:	1119bb80 	call	81119bb8 <__pow5mult>
81117138:	1021883a 	mov	r16,r2
8111713c:	003f5a06 	br	81116ea8 <__reset+0xfb0f6ea8>
81117140:	01c00044 	movi	r7,1
81117144:	d9c00b15 	stw	r7,44(sp)
81117148:	d8802217 	ldw	r2,136(sp)
8111714c:	0081280e 	bge	zero,r2,811175f0 <_dtoa_r+0x11b8>
81117150:	100d883a 	mov	r6,r2
81117154:	1021883a 	mov	r16,r2
81117158:	d8800c15 	stw	r2,48(sp)
8111715c:	d8800615 	stw	r2,24(sp)
81117160:	003d8806 	br	81116784 <__reset+0xfb0f6784>
81117164:	d8800617 	ldw	r2,24(sp)
81117168:	00be9b16 	blt	zero,r2,81116bd8 <__reset+0xfb0f6bd8>
8111716c:	10010f1e 	bne	r2,zero,811175ac <_dtoa_r+0x1174>
81117170:	880b883a 	mov	r5,r17
81117174:	000d883a 	mov	r6,zero
81117178:	01d00534 	movhi	r7,16404
8111717c:	8009883a 	mov	r4,r16
81117180:	110da7c0 	call	8110da7c <__muldf3>
81117184:	900d883a 	mov	r6,r18
81117188:	980f883a 	mov	r7,r19
8111718c:	1009883a 	mov	r4,r2
81117190:	180b883a 	mov	r5,r3
81117194:	11230c40 	call	811230c4 <__gedf2>
81117198:	002b883a 	mov	r21,zero
8111719c:	0023883a 	mov	r17,zero
811171a0:	1000bf16 	blt	r2,zero,811174a0 <_dtoa_r+0x1068>
811171a4:	d9802217 	ldw	r6,136(sp)
811171a8:	ddc00717 	ldw	r23,28(sp)
811171ac:	018c303a 	nor	r6,zero,r6
811171b0:	d9800515 	stw	r6,20(sp)
811171b4:	a80b883a 	mov	r5,r21
811171b8:	e009883a 	mov	r4,fp
811171bc:	11196000 	call	81119600 <_Bfree>
811171c0:	883e4926 	beq	r17,zero,81116ae8 <__reset+0xfb0f6ae8>
811171c4:	003fad06 	br	8111707c <__reset+0xfb0f707c>
811171c8:	d9c01117 	ldw	r7,68(sp)
811171cc:	3801bc26 	beq	r7,zero,811178c0 <_dtoa_r+0x1488>
811171d0:	10810cc4 	addi	r2,r2,1075
811171d4:	dd400a17 	ldw	r21,40(sp)
811171d8:	dd000817 	ldw	r20,32(sp)
811171dc:	003f0a06 	br	81116e08 <__reset+0xfb0f6e08>
811171e0:	00800704 	movi	r2,28
811171e4:	d9000817 	ldw	r4,32(sp)
811171e8:	a0a9883a 	add	r20,r20,r2
811171ec:	b0ad883a 	add	r22,r22,r2
811171f0:	2089883a 	add	r4,r4,r2
811171f4:	d9000815 	stw	r4,32(sp)
811171f8:	003f5106 	br	81116f40 <__reset+0xfb0f6f40>
811171fc:	d8c00317 	ldw	r3,12(sp)
81117200:	b8c1fc0e 	bge	r23,r3,811179f4 <_dtoa_r+0x15bc>
81117204:	0027883a 	mov	r19,zero
81117208:	b805883a 	mov	r2,r23
8111720c:	003f3e06 	br	81116f08 <__reset+0xfb0f6f08>
81117210:	880b883a 	mov	r5,r17
81117214:	e009883a 	mov	r4,fp
81117218:	000f883a 	mov	r7,zero
8111721c:	01800284 	movi	r6,10
81117220:	11196280 	call	81119628 <__multadd>
81117224:	d9000c17 	ldw	r4,48(sp)
81117228:	1023883a 	mov	r17,r2
8111722c:	0102040e 	bge	zero,r4,81117a40 <_dtoa_r+0x1608>
81117230:	d9000615 	stw	r4,24(sp)
81117234:	0500050e 	bge	zero,r20,8111724c <_dtoa_r+0xe14>
81117238:	880b883a 	mov	r5,r17
8111723c:	a00d883a 	mov	r6,r20
81117240:	e009883a 	mov	r4,fp
81117244:	1119d000 	call	81119d00 <__lshift>
81117248:	1023883a 	mov	r17,r2
8111724c:	9801241e 	bne	r19,zero,811176e0 <_dtoa_r+0x12a8>
81117250:	8829883a 	mov	r20,r17
81117254:	d9000617 	ldw	r4,24(sp)
81117258:	dcc00717 	ldw	r19,28(sp)
8111725c:	9480004c 	andi	r18,r18,1
81117260:	20bfffc4 	addi	r2,r4,-1
81117264:	9885883a 	add	r2,r19,r2
81117268:	d8800415 	stw	r2,16(sp)
8111726c:	dc800615 	stw	r18,24(sp)
81117270:	a80b883a 	mov	r5,r21
81117274:	8009883a 	mov	r4,r16
81117278:	11162300 	call	81116230 <quorem>
8111727c:	880b883a 	mov	r5,r17
81117280:	8009883a 	mov	r4,r16
81117284:	102f883a 	mov	r23,r2
81117288:	1119e500 	call	81119e50 <__mcmp>
8111728c:	a80b883a 	mov	r5,r21
81117290:	a00d883a 	mov	r6,r20
81117294:	e009883a 	mov	r4,fp
81117298:	102d883a 	mov	r22,r2
8111729c:	1119eb00 	call	81119eb0 <__mdiff>
811172a0:	1007883a 	mov	r3,r2
811172a4:	10800317 	ldw	r2,12(r2)
811172a8:	bc800c04 	addi	r18,r23,48
811172ac:	180b883a 	mov	r5,r3
811172b0:	10004e1e 	bne	r2,zero,811173ec <_dtoa_r+0xfb4>
811172b4:	8009883a 	mov	r4,r16
811172b8:	d8c01615 	stw	r3,88(sp)
811172bc:	1119e500 	call	81119e50 <__mcmp>
811172c0:	d8c01617 	ldw	r3,88(sp)
811172c4:	e009883a 	mov	r4,fp
811172c8:	d8801615 	stw	r2,88(sp)
811172cc:	180b883a 	mov	r5,r3
811172d0:	11196000 	call	81119600 <_Bfree>
811172d4:	d8801617 	ldw	r2,88(sp)
811172d8:	1000041e 	bne	r2,zero,811172ec <_dtoa_r+0xeb4>
811172dc:	d9800317 	ldw	r6,12(sp)
811172e0:	3000021e 	bne	r6,zero,811172ec <_dtoa_r+0xeb4>
811172e4:	d8c00617 	ldw	r3,24(sp)
811172e8:	18003726 	beq	r3,zero,811173c8 <_dtoa_r+0xf90>
811172ec:	b0002016 	blt	r22,zero,81117370 <_dtoa_r+0xf38>
811172f0:	b000041e 	bne	r22,zero,81117304 <_dtoa_r+0xecc>
811172f4:	d9000317 	ldw	r4,12(sp)
811172f8:	2000021e 	bne	r4,zero,81117304 <_dtoa_r+0xecc>
811172fc:	d8c00617 	ldw	r3,24(sp)
81117300:	18001b26 	beq	r3,zero,81117370 <_dtoa_r+0xf38>
81117304:	00810716 	blt	zero,r2,81117724 <_dtoa_r+0x12ec>
81117308:	d8c00417 	ldw	r3,16(sp)
8111730c:	9d800044 	addi	r22,r19,1
81117310:	9c800005 	stb	r18,0(r19)
81117314:	b02f883a 	mov	r23,r22
81117318:	98c10626 	beq	r19,r3,81117734 <_dtoa_r+0x12fc>
8111731c:	800b883a 	mov	r5,r16
81117320:	000f883a 	mov	r7,zero
81117324:	01800284 	movi	r6,10
81117328:	e009883a 	mov	r4,fp
8111732c:	11196280 	call	81119628 <__multadd>
81117330:	1021883a 	mov	r16,r2
81117334:	000f883a 	mov	r7,zero
81117338:	01800284 	movi	r6,10
8111733c:	880b883a 	mov	r5,r17
81117340:	e009883a 	mov	r4,fp
81117344:	8d002526 	beq	r17,r20,811173dc <_dtoa_r+0xfa4>
81117348:	11196280 	call	81119628 <__multadd>
8111734c:	a00b883a 	mov	r5,r20
81117350:	000f883a 	mov	r7,zero
81117354:	01800284 	movi	r6,10
81117358:	e009883a 	mov	r4,fp
8111735c:	1023883a 	mov	r17,r2
81117360:	11196280 	call	81119628 <__multadd>
81117364:	1029883a 	mov	r20,r2
81117368:	b027883a 	mov	r19,r22
8111736c:	003fc006 	br	81117270 <__reset+0xfb0f7270>
81117370:	9011883a 	mov	r8,r18
81117374:	00800e0e 	bge	zero,r2,811173b0 <_dtoa_r+0xf78>
81117378:	800b883a 	mov	r5,r16
8111737c:	01800044 	movi	r6,1
81117380:	e009883a 	mov	r4,fp
81117384:	da001715 	stw	r8,92(sp)
81117388:	1119d000 	call	81119d00 <__lshift>
8111738c:	a80b883a 	mov	r5,r21
81117390:	1009883a 	mov	r4,r2
81117394:	1021883a 	mov	r16,r2
81117398:	1119e500 	call	81119e50 <__mcmp>
8111739c:	da001717 	ldw	r8,92(sp)
811173a0:	0081960e 	bge	zero,r2,811179fc <_dtoa_r+0x15c4>
811173a4:	00800e44 	movi	r2,57
811173a8:	40817026 	beq	r8,r2,8111796c <_dtoa_r+0x1534>
811173ac:	ba000c44 	addi	r8,r23,49
811173b0:	8825883a 	mov	r18,r17
811173b4:	9dc00044 	addi	r23,r19,1
811173b8:	9a000005 	stb	r8,0(r19)
811173bc:	a023883a 	mov	r17,r20
811173c0:	dc000915 	stw	r16,36(sp)
811173c4:	003f2406 	br	81117058 <__reset+0xfb0f7058>
811173c8:	00800e44 	movi	r2,57
811173cc:	9011883a 	mov	r8,r18
811173d0:	90816626 	beq	r18,r2,8111796c <_dtoa_r+0x1534>
811173d4:	05bff516 	blt	zero,r22,811173ac <__reset+0xfb0f73ac>
811173d8:	003ff506 	br	811173b0 <__reset+0xfb0f73b0>
811173dc:	11196280 	call	81119628 <__multadd>
811173e0:	1023883a 	mov	r17,r2
811173e4:	1029883a 	mov	r20,r2
811173e8:	003fdf06 	br	81117368 <__reset+0xfb0f7368>
811173ec:	e009883a 	mov	r4,fp
811173f0:	11196000 	call	81119600 <_Bfree>
811173f4:	00800044 	movi	r2,1
811173f8:	003fbc06 	br	811172ec <__reset+0xfb0f72ec>
811173fc:	a80b883a 	mov	r5,r21
81117400:	8009883a 	mov	r4,r16
81117404:	1119e500 	call	81119e50 <__mcmp>
81117408:	103edb0e 	bge	r2,zero,81116f78 <__reset+0xfb0f6f78>
8111740c:	800b883a 	mov	r5,r16
81117410:	000f883a 	mov	r7,zero
81117414:	01800284 	movi	r6,10
81117418:	e009883a 	mov	r4,fp
8111741c:	11196280 	call	81119628 <__multadd>
81117420:	1021883a 	mov	r16,r2
81117424:	d8800517 	ldw	r2,20(sp)
81117428:	d8c00b17 	ldw	r3,44(sp)
8111742c:	10bfffc4 	addi	r2,r2,-1
81117430:	d8800515 	stw	r2,20(sp)
81117434:	183f761e 	bne	r3,zero,81117210 <__reset+0xfb0f7210>
81117438:	d9000c17 	ldw	r4,48(sp)
8111743c:	0101730e 	bge	zero,r4,81117a0c <_dtoa_r+0x15d4>
81117440:	d9000615 	stw	r4,24(sp)
81117444:	003ed006 	br	81116f88 <__reset+0xfb0f6f88>
81117448:	00800084 	movi	r2,2
8111744c:	3081861e 	bne	r6,r2,81117a68 <_dtoa_r+0x1630>
81117450:	d8000b15 	stw	zero,44(sp)
81117454:	003f3c06 	br	81117148 <__reset+0xfb0f7148>
81117458:	dc000917 	ldw	r16,36(sp)
8111745c:	003e9206 	br	81116ea8 <__reset+0xfb0f6ea8>
81117460:	d9c00317 	ldw	r7,12(sp)
81117464:	00800084 	movi	r2,2
81117468:	11fec50e 	bge	r2,r7,81116f80 <__reset+0xfb0f6f80>
8111746c:	d9000617 	ldw	r4,24(sp)
81117470:	20013c1e 	bne	r4,zero,81117964 <_dtoa_r+0x152c>
81117474:	a80b883a 	mov	r5,r21
81117478:	000f883a 	mov	r7,zero
8111747c:	01800144 	movi	r6,5
81117480:	e009883a 	mov	r4,fp
81117484:	11196280 	call	81119628 <__multadd>
81117488:	100b883a 	mov	r5,r2
8111748c:	8009883a 	mov	r4,r16
81117490:	102b883a 	mov	r21,r2
81117494:	1119e500 	call	81119e50 <__mcmp>
81117498:	dc000915 	stw	r16,36(sp)
8111749c:	00bf410e 	bge	zero,r2,811171a4 <__reset+0xfb0f71a4>
811174a0:	d9c00717 	ldw	r7,28(sp)
811174a4:	00800c44 	movi	r2,49
811174a8:	38800005 	stb	r2,0(r7)
811174ac:	d8800517 	ldw	r2,20(sp)
811174b0:	3dc00044 	addi	r23,r7,1
811174b4:	10800044 	addi	r2,r2,1
811174b8:	d8800515 	stw	r2,20(sp)
811174bc:	003f3d06 	br	811171b4 <__reset+0xfb0f71b4>
811174c0:	d9800517 	ldw	r6,20(sp)
811174c4:	d9c00717 	ldw	r7,28(sp)
811174c8:	00800c44 	movi	r2,49
811174cc:	31800044 	addi	r6,r6,1
811174d0:	d9800515 	stw	r6,20(sp)
811174d4:	38800005 	stb	r2,0(r7)
811174d8:	003edf06 	br	81117058 <__reset+0xfb0f7058>
811174dc:	d8000b15 	stw	zero,44(sp)
811174e0:	003c9f06 	br	81116760 <__reset+0xfb0f6760>
811174e4:	903e7e1e 	bne	r18,zero,81116ee0 <__reset+0xfb0f6ee0>
811174e8:	00800434 	movhi	r2,16
811174ec:	10bfffc4 	addi	r2,r2,-1
811174f0:	9884703a 	and	r2,r19,r2
811174f4:	1000ea1e 	bne	r2,zero,811178a0 <_dtoa_r+0x1468>
811174f8:	9cdffc2c 	andhi	r19,r19,32752
811174fc:	9800e826 	beq	r19,zero,811178a0 <_dtoa_r+0x1468>
81117500:	d9c00817 	ldw	r7,32(sp)
81117504:	b5800044 	addi	r22,r22,1
81117508:	04c00044 	movi	r19,1
8111750c:	39c00044 	addi	r7,r7,1
81117510:	d9c00815 	stw	r7,32(sp)
81117514:	d8800d17 	ldw	r2,52(sp)
81117518:	103e721e 	bne	r2,zero,81116ee4 <__reset+0xfb0f6ee4>
8111751c:	00800044 	movi	r2,1
81117520:	003e7906 	br	81116f08 <__reset+0xfb0f6f08>
81117524:	8009883a 	mov	r4,r16
81117528:	1123c180 	call	81123c18 <__floatsidf>
8111752c:	d9800f17 	ldw	r6,60(sp)
81117530:	d9c01017 	ldw	r7,64(sp)
81117534:	1009883a 	mov	r4,r2
81117538:	180b883a 	mov	r5,r3
8111753c:	110da7c0 	call	8110da7c <__muldf3>
81117540:	000d883a 	mov	r6,zero
81117544:	01d00734 	movhi	r7,16412
81117548:	1009883a 	mov	r4,r2
8111754c:	180b883a 	mov	r5,r3
81117550:	1121e980 	call	81121e98 <__adddf3>
81117554:	047f3034 	movhi	r17,64704
81117558:	1021883a 	mov	r16,r2
8111755c:	1c63883a 	add	r17,r3,r17
81117560:	d9000f17 	ldw	r4,60(sp)
81117564:	d9401017 	ldw	r5,64(sp)
81117568:	000d883a 	mov	r6,zero
8111756c:	01d00534 	movhi	r7,16404
81117570:	11232940 	call	81123294 <__subdf3>
81117574:	800d883a 	mov	r6,r16
81117578:	880f883a 	mov	r7,r17
8111757c:	1009883a 	mov	r4,r2
81117580:	180b883a 	mov	r5,r3
81117584:	102b883a 	mov	r21,r2
81117588:	1829883a 	mov	r20,r3
8111758c:	11230c40 	call	811230c4 <__gedf2>
81117590:	00806c16 	blt	zero,r2,81117744 <_dtoa_r+0x130c>
81117594:	89e0003c 	xorhi	r7,r17,32768
81117598:	800d883a 	mov	r6,r16
8111759c:	a809883a 	mov	r4,r21
811175a0:	a00b883a 	mov	r5,r20
811175a4:	11231a00 	call	811231a0 <__ledf2>
811175a8:	103d7e0e 	bge	r2,zero,81116ba4 <__reset+0xfb0f6ba4>
811175ac:	002b883a 	mov	r21,zero
811175b0:	0023883a 	mov	r17,zero
811175b4:	003efb06 	br	811171a4 <__reset+0xfb0f71a4>
811175b8:	d8800717 	ldw	r2,28(sp)
811175bc:	003bd006 	br	81116500 <__reset+0xfb0f6500>
811175c0:	d9000a17 	ldw	r4,40(sp)
811175c4:	d9800d17 	ldw	r6,52(sp)
811175c8:	dd400a15 	stw	r21,40(sp)
811175cc:	a905c83a 	sub	r2,r21,r4
811175d0:	308d883a 	add	r6,r6,r2
811175d4:	d9800d15 	stw	r6,52(sp)
811175d8:	002b883a 	mov	r21,zero
811175dc:	003e0606 	br	81116df8 <__reset+0xfb0f6df8>
811175e0:	9023883a 	mov	r17,r18
811175e4:	9829883a 	mov	r20,r19
811175e8:	04000084 	movi	r16,2
811175ec:	003c9206 	br	81116838 <__reset+0xfb0f6838>
811175f0:	04000044 	movi	r16,1
811175f4:	dc000c15 	stw	r16,48(sp)
811175f8:	dc000615 	stw	r16,24(sp)
811175fc:	dc002215 	stw	r16,136(sp)
81117600:	e0001115 	stw	zero,68(fp)
81117604:	000b883a 	mov	r5,zero
81117608:	003c6906 	br	811167b0 <__reset+0xfb0f67b0>
8111760c:	3021883a 	mov	r16,r6
81117610:	003ffb06 	br	81117600 <__reset+0xfb0f7600>
81117614:	1000021e 	bne	r2,zero,81117620 <_dtoa_r+0x11e8>
81117618:	4200004c 	andi	r8,r8,1
8111761c:	403e7d1e 	bne	r8,zero,81117014 <__reset+0xfb0f7014>
81117620:	01000c04 	movi	r4,48
81117624:	00000106 	br	8111762c <_dtoa_r+0x11f4>
81117628:	102f883a 	mov	r23,r2
8111762c:	b8bfffc4 	addi	r2,r23,-1
81117630:	10c00007 	ldb	r3,0(r2)
81117634:	193ffc26 	beq	r3,r4,81117628 <__reset+0xfb0f7628>
81117638:	003e8706 	br	81117058 <__reset+0xfb0f7058>
8111763c:	d8800517 	ldw	r2,20(sp)
81117640:	00a3c83a 	sub	r17,zero,r2
81117644:	8800a426 	beq	r17,zero,811178d8 <_dtoa_r+0x14a0>
81117648:	888003cc 	andi	r2,r17,15
8111764c:	100490fa 	slli	r2,r2,3
81117650:	00e04534 	movhi	r3,33044
81117654:	18ee6b04 	addi	r3,r3,-18004
81117658:	1885883a 	add	r2,r3,r2
8111765c:	11800017 	ldw	r6,0(r2)
81117660:	11c00117 	ldw	r7,4(r2)
81117664:	9009883a 	mov	r4,r18
81117668:	980b883a 	mov	r5,r19
8111766c:	8823d13a 	srai	r17,r17,4
81117670:	110da7c0 	call	8110da7c <__muldf3>
81117674:	d8800f15 	stw	r2,60(sp)
81117678:	d8c01015 	stw	r3,64(sp)
8111767c:	8800e826 	beq	r17,zero,81117a20 <_dtoa_r+0x15e8>
81117680:	05204534 	movhi	r20,33044
81117684:	a52e6104 	addi	r20,r20,-18044
81117688:	04000084 	movi	r16,2
8111768c:	8980004c 	andi	r6,r17,1
81117690:	1009883a 	mov	r4,r2
81117694:	8823d07a 	srai	r17,r17,1
81117698:	180b883a 	mov	r5,r3
8111769c:	30000426 	beq	r6,zero,811176b0 <_dtoa_r+0x1278>
811176a0:	a1800017 	ldw	r6,0(r20)
811176a4:	a1c00117 	ldw	r7,4(r20)
811176a8:	84000044 	addi	r16,r16,1
811176ac:	110da7c0 	call	8110da7c <__muldf3>
811176b0:	a5000204 	addi	r20,r20,8
811176b4:	883ff51e 	bne	r17,zero,8111768c <__reset+0xfb0f768c>
811176b8:	d8800f15 	stw	r2,60(sp)
811176bc:	d8c01015 	stw	r3,64(sp)
811176c0:	003c7606 	br	8111689c <__reset+0xfb0f689c>
811176c4:	00c00c04 	movi	r3,48
811176c8:	10c00005 	stb	r3,0(r2)
811176cc:	d8c00517 	ldw	r3,20(sp)
811176d0:	bd3fffc3 	ldbu	r20,-1(r23)
811176d4:	18c00044 	addi	r3,r3,1
811176d8:	d8c00515 	stw	r3,20(sp)
811176dc:	003db906 	br	81116dc4 <__reset+0xfb0f6dc4>
811176e0:	89400117 	ldw	r5,4(r17)
811176e4:	e009883a 	mov	r4,fp
811176e8:	11195500 	call	81119550 <_Balloc>
811176ec:	89800417 	ldw	r6,16(r17)
811176f0:	89400304 	addi	r5,r17,12
811176f4:	11000304 	addi	r4,r2,12
811176f8:	31800084 	addi	r6,r6,2
811176fc:	318d883a 	add	r6,r6,r6
81117700:	318d883a 	add	r6,r6,r6
81117704:	1027883a 	mov	r19,r2
81117708:	110f61c0 	call	8110f61c <memcpy>
8111770c:	01800044 	movi	r6,1
81117710:	980b883a 	mov	r5,r19
81117714:	e009883a 	mov	r4,fp
81117718:	1119d000 	call	81119d00 <__lshift>
8111771c:	1029883a 	mov	r20,r2
81117720:	003ecc06 	br	81117254 <__reset+0xfb0f7254>
81117724:	00800e44 	movi	r2,57
81117728:	90809026 	beq	r18,r2,8111796c <_dtoa_r+0x1534>
8111772c:	92000044 	addi	r8,r18,1
81117730:	003f1f06 	br	811173b0 <__reset+0xfb0f73b0>
81117734:	9011883a 	mov	r8,r18
81117738:	8825883a 	mov	r18,r17
8111773c:	a023883a 	mov	r17,r20
81117740:	003e2906 	br	81116fe8 <__reset+0xfb0f6fe8>
81117744:	002b883a 	mov	r21,zero
81117748:	0023883a 	mov	r17,zero
8111774c:	003f5406 	br	811174a0 <__reset+0xfb0f74a0>
81117750:	61bfffc4 	addi	r6,r12,-1
81117754:	300490fa 	slli	r2,r6,3
81117758:	00e04534 	movhi	r3,33044
8111775c:	18ee6b04 	addi	r3,r3,-18004
81117760:	1885883a 	add	r2,r3,r2
81117764:	11000017 	ldw	r4,0(r2)
81117768:	11400117 	ldw	r5,4(r2)
8111776c:	d8800717 	ldw	r2,28(sp)
81117770:	880f883a 	mov	r7,r17
81117774:	d9801215 	stw	r6,72(sp)
81117778:	800d883a 	mov	r6,r16
8111777c:	db001615 	stw	r12,88(sp)
81117780:	15c00044 	addi	r23,r2,1
81117784:	110da7c0 	call	8110da7c <__muldf3>
81117788:	d9401017 	ldw	r5,64(sp)
8111778c:	d9000f17 	ldw	r4,60(sp)
81117790:	d8c01515 	stw	r3,84(sp)
81117794:	d8801415 	stw	r2,80(sp)
81117798:	1123b980 	call	81123b98 <__fixdfsi>
8111779c:	1009883a 	mov	r4,r2
811177a0:	1021883a 	mov	r16,r2
811177a4:	1123c180 	call	81123c18 <__floatsidf>
811177a8:	d9000f17 	ldw	r4,60(sp)
811177ac:	d9401017 	ldw	r5,64(sp)
811177b0:	100d883a 	mov	r6,r2
811177b4:	180f883a 	mov	r7,r3
811177b8:	11232940 	call	81123294 <__subdf3>
811177bc:	1829883a 	mov	r20,r3
811177c0:	d8c00717 	ldw	r3,28(sp)
811177c4:	84000c04 	addi	r16,r16,48
811177c8:	1023883a 	mov	r17,r2
811177cc:	1c000005 	stb	r16,0(r3)
811177d0:	db001617 	ldw	r12,88(sp)
811177d4:	00800044 	movi	r2,1
811177d8:	60802226 	beq	r12,r2,81117864 <_dtoa_r+0x142c>
811177dc:	d9c00717 	ldw	r7,28(sp)
811177e0:	8805883a 	mov	r2,r17
811177e4:	b82b883a 	mov	r21,r23
811177e8:	3b19883a 	add	r12,r7,r12
811177ec:	6023883a 	mov	r17,r12
811177f0:	a007883a 	mov	r3,r20
811177f4:	dc800f15 	stw	r18,60(sp)
811177f8:	000d883a 	mov	r6,zero
811177fc:	01d00934 	movhi	r7,16420
81117800:	1009883a 	mov	r4,r2
81117804:	180b883a 	mov	r5,r3
81117808:	110da7c0 	call	8110da7c <__muldf3>
8111780c:	180b883a 	mov	r5,r3
81117810:	1009883a 	mov	r4,r2
81117814:	1829883a 	mov	r20,r3
81117818:	1025883a 	mov	r18,r2
8111781c:	1123b980 	call	81123b98 <__fixdfsi>
81117820:	1009883a 	mov	r4,r2
81117824:	1021883a 	mov	r16,r2
81117828:	1123c180 	call	81123c18 <__floatsidf>
8111782c:	100d883a 	mov	r6,r2
81117830:	180f883a 	mov	r7,r3
81117834:	9009883a 	mov	r4,r18
81117838:	a00b883a 	mov	r5,r20
8111783c:	84000c04 	addi	r16,r16,48
81117840:	11232940 	call	81123294 <__subdf3>
81117844:	ad400044 	addi	r21,r21,1
81117848:	ac3fffc5 	stb	r16,-1(r21)
8111784c:	ac7fea1e 	bne	r21,r17,811177f8 <__reset+0xfb0f77f8>
81117850:	1023883a 	mov	r17,r2
81117854:	d8801217 	ldw	r2,72(sp)
81117858:	dc800f17 	ldw	r18,60(sp)
8111785c:	1829883a 	mov	r20,r3
81117860:	b8af883a 	add	r23,r23,r2
81117864:	d9001417 	ldw	r4,80(sp)
81117868:	d9401517 	ldw	r5,84(sp)
8111786c:	000d883a 	mov	r6,zero
81117870:	01cff834 	movhi	r7,16352
81117874:	1121e980 	call	81121e98 <__adddf3>
81117878:	880d883a 	mov	r6,r17
8111787c:	a00f883a 	mov	r7,r20
81117880:	1009883a 	mov	r4,r2
81117884:	180b883a 	mov	r5,r3
81117888:	11231a00 	call	811231a0 <__ledf2>
8111788c:	10003e0e 	bge	r2,zero,81117988 <_dtoa_r+0x1550>
81117890:	d9001317 	ldw	r4,76(sp)
81117894:	bd3fffc3 	ldbu	r20,-1(r23)
81117898:	d9000515 	stw	r4,20(sp)
8111789c:	003d3b06 	br	81116d8c <__reset+0xfb0f6d8c>
811178a0:	0027883a 	mov	r19,zero
811178a4:	003f1b06 	br	81117514 <__reset+0xfb0f7514>
811178a8:	d8800817 	ldw	r2,32(sp)
811178ac:	11e9c83a 	sub	r20,r2,r7
811178b0:	0005883a 	mov	r2,zero
811178b4:	003d5406 	br	81116e08 <__reset+0xfb0f6e08>
811178b8:	00800044 	movi	r2,1
811178bc:	003dc706 	br	81116fdc <__reset+0xfb0f6fdc>
811178c0:	d8c00217 	ldw	r3,8(sp)
811178c4:	00800d84 	movi	r2,54
811178c8:	dd400a17 	ldw	r21,40(sp)
811178cc:	10c5c83a 	sub	r2,r2,r3
811178d0:	dd000817 	ldw	r20,32(sp)
811178d4:	003d4c06 	br	81116e08 <__reset+0xfb0f6e08>
811178d8:	dc800f15 	stw	r18,60(sp)
811178dc:	dcc01015 	stw	r19,64(sp)
811178e0:	04000084 	movi	r16,2
811178e4:	003bed06 	br	8111689c <__reset+0xfb0f689c>
811178e8:	d9000617 	ldw	r4,24(sp)
811178ec:	203f0d26 	beq	r4,zero,81117524 <__reset+0xfb0f7524>
811178f0:	d9800c17 	ldw	r6,48(sp)
811178f4:	01bcab0e 	bge	zero,r6,81116ba4 <__reset+0xfb0f6ba4>
811178f8:	d9401017 	ldw	r5,64(sp)
811178fc:	d9000f17 	ldw	r4,60(sp)
81117900:	000d883a 	mov	r6,zero
81117904:	01d00934 	movhi	r7,16420
81117908:	110da7c0 	call	8110da7c <__muldf3>
8111790c:	81000044 	addi	r4,r16,1
81117910:	d8800f15 	stw	r2,60(sp)
81117914:	d8c01015 	stw	r3,64(sp)
81117918:	1123c180 	call	81123c18 <__floatsidf>
8111791c:	d9800f17 	ldw	r6,60(sp)
81117920:	d9c01017 	ldw	r7,64(sp)
81117924:	1009883a 	mov	r4,r2
81117928:	180b883a 	mov	r5,r3
8111792c:	110da7c0 	call	8110da7c <__muldf3>
81117930:	01d00734 	movhi	r7,16412
81117934:	000d883a 	mov	r6,zero
81117938:	1009883a 	mov	r4,r2
8111793c:	180b883a 	mov	r5,r3
81117940:	1121e980 	call	81121e98 <__adddf3>
81117944:	d9c00517 	ldw	r7,20(sp)
81117948:	047f3034 	movhi	r17,64704
8111794c:	1021883a 	mov	r16,r2
81117950:	39ffffc4 	addi	r7,r7,-1
81117954:	d9c01315 	stw	r7,76(sp)
81117958:	1c63883a 	add	r17,r3,r17
8111795c:	db000c17 	ldw	r12,48(sp)
81117960:	003bea06 	br	8111690c <__reset+0xfb0f690c>
81117964:	dc000915 	stw	r16,36(sp)
81117968:	003e0e06 	br	811171a4 <__reset+0xfb0f71a4>
8111796c:	01000e44 	movi	r4,57
81117970:	8825883a 	mov	r18,r17
81117974:	9dc00044 	addi	r23,r19,1
81117978:	99000005 	stb	r4,0(r19)
8111797c:	a023883a 	mov	r17,r20
81117980:	dc000915 	stw	r16,36(sp)
81117984:	003da406 	br	81117018 <__reset+0xfb0f7018>
81117988:	d9801417 	ldw	r6,80(sp)
8111798c:	d9c01517 	ldw	r7,84(sp)
81117990:	0009883a 	mov	r4,zero
81117994:	014ff834 	movhi	r5,16352
81117998:	11232940 	call	81123294 <__subdf3>
8111799c:	880d883a 	mov	r6,r17
811179a0:	a00f883a 	mov	r7,r20
811179a4:	1009883a 	mov	r4,r2
811179a8:	180b883a 	mov	r5,r3
811179ac:	11230c40 	call	811230c4 <__gedf2>
811179b0:	00bc7c0e 	bge	zero,r2,81116ba4 <__reset+0xfb0f6ba4>
811179b4:	01000c04 	movi	r4,48
811179b8:	00000106 	br	811179c0 <_dtoa_r+0x1588>
811179bc:	102f883a 	mov	r23,r2
811179c0:	b8bfffc4 	addi	r2,r23,-1
811179c4:	10c00007 	ldb	r3,0(r2)
811179c8:	193ffc26 	beq	r3,r4,811179bc <__reset+0xfb0f79bc>
811179cc:	d9801317 	ldw	r6,76(sp)
811179d0:	d9800515 	stw	r6,20(sp)
811179d4:	003c4406 	br	81116ae8 <__reset+0xfb0f6ae8>
811179d8:	d9801317 	ldw	r6,76(sp)
811179dc:	d9800515 	stw	r6,20(sp)
811179e0:	003cea06 	br	81116d8c <__reset+0xfb0f6d8c>
811179e4:	dd800f17 	ldw	r22,60(sp)
811179e8:	dcc01017 	ldw	r19,64(sp)
811179ec:	dc801217 	ldw	r18,72(sp)
811179f0:	003c6c06 	br	81116ba4 <__reset+0xfb0f6ba4>
811179f4:	903e031e 	bne	r18,zero,81117204 <__reset+0xfb0f7204>
811179f8:	003ebb06 	br	811174e8 <__reset+0xfb0f74e8>
811179fc:	103e6c1e 	bne	r2,zero,811173b0 <__reset+0xfb0f73b0>
81117a00:	4080004c 	andi	r2,r8,1
81117a04:	103e6a26 	beq	r2,zero,811173b0 <__reset+0xfb0f73b0>
81117a08:	003e6606 	br	811173a4 <__reset+0xfb0f73a4>
81117a0c:	d8c00317 	ldw	r3,12(sp)
81117a10:	00800084 	movi	r2,2
81117a14:	10c02916 	blt	r2,r3,81117abc <_dtoa_r+0x1684>
81117a18:	d9000c17 	ldw	r4,48(sp)
81117a1c:	003e8806 	br	81117440 <__reset+0xfb0f7440>
81117a20:	04000084 	movi	r16,2
81117a24:	003b9d06 	br	8111689c <__reset+0xfb0f689c>
81117a28:	d9001317 	ldw	r4,76(sp)
81117a2c:	d9000515 	stw	r4,20(sp)
81117a30:	003cd606 	br	81116d8c <__reset+0xfb0f6d8c>
81117a34:	d8801317 	ldw	r2,76(sp)
81117a38:	d8800515 	stw	r2,20(sp)
81117a3c:	003c2a06 	br	81116ae8 <__reset+0xfb0f6ae8>
81117a40:	d9800317 	ldw	r6,12(sp)
81117a44:	00800084 	movi	r2,2
81117a48:	11801516 	blt	r2,r6,81117aa0 <_dtoa_r+0x1668>
81117a4c:	d9c00c17 	ldw	r7,48(sp)
81117a50:	d9c00615 	stw	r7,24(sp)
81117a54:	003df706 	br	81117234 <__reset+0xfb0f7234>
81117a58:	193d3926 	beq	r3,r4,81116f40 <__reset+0xfb0f6f40>
81117a5c:	00c00f04 	movi	r3,60
81117a60:	1885c83a 	sub	r2,r3,r2
81117a64:	003ddf06 	br	811171e4 <__reset+0xfb0f71e4>
81117a68:	e009883a 	mov	r4,fp
81117a6c:	e0001115 	stw	zero,68(fp)
81117a70:	000b883a 	mov	r5,zero
81117a74:	11195500 	call	81119550 <_Balloc>
81117a78:	d8800715 	stw	r2,28(sp)
81117a7c:	d8c00717 	ldw	r3,28(sp)
81117a80:	00bfffc4 	movi	r2,-1
81117a84:	01000044 	movi	r4,1
81117a88:	d8800c15 	stw	r2,48(sp)
81117a8c:	e0c01015 	stw	r3,64(fp)
81117a90:	d9000b15 	stw	r4,44(sp)
81117a94:	d8800615 	stw	r2,24(sp)
81117a98:	d8002215 	stw	zero,136(sp)
81117a9c:	003c4106 	br	81116ba4 <__reset+0xfb0f6ba4>
81117aa0:	d8c00c17 	ldw	r3,48(sp)
81117aa4:	d8c00615 	stw	r3,24(sp)
81117aa8:	003e7006 	br	8111746c <__reset+0xfb0f746c>
81117aac:	04400044 	movi	r17,1
81117ab0:	003b2006 	br	81116734 <__reset+0xfb0f6734>
81117ab4:	000b883a 	mov	r5,zero
81117ab8:	003b3d06 	br	811167b0 <__reset+0xfb0f67b0>
81117abc:	d8800c17 	ldw	r2,48(sp)
81117ac0:	d8800615 	stw	r2,24(sp)
81117ac4:	003e6906 	br	8111746c <__reset+0xfb0f746c>

81117ac8 <__sflush_r>:
81117ac8:	defffb04 	addi	sp,sp,-20
81117acc:	de00012e 	bgeu	sp,et,81117ad4 <__sflush_r+0xc>
81117ad0:	003b68fa 	trap	3
81117ad4:	2880030b 	ldhu	r2,12(r5)
81117ad8:	dcc00315 	stw	r19,12(sp)
81117adc:	dc400115 	stw	r17,4(sp)
81117ae0:	dfc00415 	stw	ra,16(sp)
81117ae4:	dc800215 	stw	r18,8(sp)
81117ae8:	dc000015 	stw	r16,0(sp)
81117aec:	10c0020c 	andi	r3,r2,8
81117af0:	2823883a 	mov	r17,r5
81117af4:	2027883a 	mov	r19,r4
81117af8:	1800311e 	bne	r3,zero,81117bc0 <__sflush_r+0xf8>
81117afc:	28c00117 	ldw	r3,4(r5)
81117b00:	10820014 	ori	r2,r2,2048
81117b04:	2880030d 	sth	r2,12(r5)
81117b08:	00c04b0e 	bge	zero,r3,81117c38 <__sflush_r+0x170>
81117b0c:	8a000a17 	ldw	r8,40(r17)
81117b10:	40002326 	beq	r8,zero,81117ba0 <__sflush_r+0xd8>
81117b14:	9c000017 	ldw	r16,0(r19)
81117b18:	10c4000c 	andi	r3,r2,4096
81117b1c:	98000015 	stw	zero,0(r19)
81117b20:	18004826 	beq	r3,zero,81117c44 <__sflush_r+0x17c>
81117b24:	89801417 	ldw	r6,80(r17)
81117b28:	10c0010c 	andi	r3,r2,4
81117b2c:	18000626 	beq	r3,zero,81117b48 <__sflush_r+0x80>
81117b30:	88c00117 	ldw	r3,4(r17)
81117b34:	88800c17 	ldw	r2,48(r17)
81117b38:	30cdc83a 	sub	r6,r6,r3
81117b3c:	10000226 	beq	r2,zero,81117b48 <__sflush_r+0x80>
81117b40:	88800f17 	ldw	r2,60(r17)
81117b44:	308dc83a 	sub	r6,r6,r2
81117b48:	89400717 	ldw	r5,28(r17)
81117b4c:	000f883a 	mov	r7,zero
81117b50:	9809883a 	mov	r4,r19
81117b54:	403ee83a 	callr	r8
81117b58:	00ffffc4 	movi	r3,-1
81117b5c:	10c04426 	beq	r2,r3,81117c70 <__sflush_r+0x1a8>
81117b60:	88c0030b 	ldhu	r3,12(r17)
81117b64:	89000417 	ldw	r4,16(r17)
81117b68:	88000115 	stw	zero,4(r17)
81117b6c:	197dffcc 	andi	r5,r3,63487
81117b70:	8940030d 	sth	r5,12(r17)
81117b74:	89000015 	stw	r4,0(r17)
81117b78:	18c4000c 	andi	r3,r3,4096
81117b7c:	18002c1e 	bne	r3,zero,81117c30 <__sflush_r+0x168>
81117b80:	89400c17 	ldw	r5,48(r17)
81117b84:	9c000015 	stw	r16,0(r19)
81117b88:	28000526 	beq	r5,zero,81117ba0 <__sflush_r+0xd8>
81117b8c:	88801004 	addi	r2,r17,64
81117b90:	28800226 	beq	r5,r2,81117b9c <__sflush_r+0xd4>
81117b94:	9809883a 	mov	r4,r19
81117b98:	11185800 	call	81118580 <_free_r>
81117b9c:	88000c15 	stw	zero,48(r17)
81117ba0:	0005883a 	mov	r2,zero
81117ba4:	dfc00417 	ldw	ra,16(sp)
81117ba8:	dcc00317 	ldw	r19,12(sp)
81117bac:	dc800217 	ldw	r18,8(sp)
81117bb0:	dc400117 	ldw	r17,4(sp)
81117bb4:	dc000017 	ldw	r16,0(sp)
81117bb8:	dec00504 	addi	sp,sp,20
81117bbc:	f800283a 	ret
81117bc0:	2c800417 	ldw	r18,16(r5)
81117bc4:	903ff626 	beq	r18,zero,81117ba0 <__reset+0xfb0f7ba0>
81117bc8:	2c000017 	ldw	r16,0(r5)
81117bcc:	108000cc 	andi	r2,r2,3
81117bd0:	2c800015 	stw	r18,0(r5)
81117bd4:	84a1c83a 	sub	r16,r16,r18
81117bd8:	1000131e 	bne	r2,zero,81117c28 <__sflush_r+0x160>
81117bdc:	28800517 	ldw	r2,20(r5)
81117be0:	88800215 	stw	r2,8(r17)
81117be4:	04000316 	blt	zero,r16,81117bf4 <__sflush_r+0x12c>
81117be8:	003fed06 	br	81117ba0 <__reset+0xfb0f7ba0>
81117bec:	90a5883a 	add	r18,r18,r2
81117bf0:	043feb0e 	bge	zero,r16,81117ba0 <__reset+0xfb0f7ba0>
81117bf4:	88800917 	ldw	r2,36(r17)
81117bf8:	89400717 	ldw	r5,28(r17)
81117bfc:	800f883a 	mov	r7,r16
81117c00:	900d883a 	mov	r6,r18
81117c04:	9809883a 	mov	r4,r19
81117c08:	103ee83a 	callr	r2
81117c0c:	80a1c83a 	sub	r16,r16,r2
81117c10:	00bff616 	blt	zero,r2,81117bec <__reset+0xfb0f7bec>
81117c14:	88c0030b 	ldhu	r3,12(r17)
81117c18:	00bfffc4 	movi	r2,-1
81117c1c:	18c01014 	ori	r3,r3,64
81117c20:	88c0030d 	sth	r3,12(r17)
81117c24:	003fdf06 	br	81117ba4 <__reset+0xfb0f7ba4>
81117c28:	0005883a 	mov	r2,zero
81117c2c:	003fec06 	br	81117be0 <__reset+0xfb0f7be0>
81117c30:	88801415 	stw	r2,80(r17)
81117c34:	003fd206 	br	81117b80 <__reset+0xfb0f7b80>
81117c38:	28c00f17 	ldw	r3,60(r5)
81117c3c:	00ffb316 	blt	zero,r3,81117b0c <__reset+0xfb0f7b0c>
81117c40:	003fd706 	br	81117ba0 <__reset+0xfb0f7ba0>
81117c44:	89400717 	ldw	r5,28(r17)
81117c48:	000d883a 	mov	r6,zero
81117c4c:	01c00044 	movi	r7,1
81117c50:	9809883a 	mov	r4,r19
81117c54:	403ee83a 	callr	r8
81117c58:	100d883a 	mov	r6,r2
81117c5c:	00bfffc4 	movi	r2,-1
81117c60:	30801426 	beq	r6,r2,81117cb4 <__sflush_r+0x1ec>
81117c64:	8880030b 	ldhu	r2,12(r17)
81117c68:	8a000a17 	ldw	r8,40(r17)
81117c6c:	003fae06 	br	81117b28 <__reset+0xfb0f7b28>
81117c70:	98c00017 	ldw	r3,0(r19)
81117c74:	183fba26 	beq	r3,zero,81117b60 <__reset+0xfb0f7b60>
81117c78:	01000744 	movi	r4,29
81117c7c:	19000626 	beq	r3,r4,81117c98 <__sflush_r+0x1d0>
81117c80:	01000584 	movi	r4,22
81117c84:	19000426 	beq	r3,r4,81117c98 <__sflush_r+0x1d0>
81117c88:	88c0030b 	ldhu	r3,12(r17)
81117c8c:	18c01014 	ori	r3,r3,64
81117c90:	88c0030d 	sth	r3,12(r17)
81117c94:	003fc306 	br	81117ba4 <__reset+0xfb0f7ba4>
81117c98:	8880030b 	ldhu	r2,12(r17)
81117c9c:	88c00417 	ldw	r3,16(r17)
81117ca0:	88000115 	stw	zero,4(r17)
81117ca4:	10bdffcc 	andi	r2,r2,63487
81117ca8:	8880030d 	sth	r2,12(r17)
81117cac:	88c00015 	stw	r3,0(r17)
81117cb0:	003fb306 	br	81117b80 <__reset+0xfb0f7b80>
81117cb4:	98800017 	ldw	r2,0(r19)
81117cb8:	103fea26 	beq	r2,zero,81117c64 <__reset+0xfb0f7c64>
81117cbc:	00c00744 	movi	r3,29
81117cc0:	10c00226 	beq	r2,r3,81117ccc <__sflush_r+0x204>
81117cc4:	00c00584 	movi	r3,22
81117cc8:	10c0031e 	bne	r2,r3,81117cd8 <__sflush_r+0x210>
81117ccc:	9c000015 	stw	r16,0(r19)
81117cd0:	0005883a 	mov	r2,zero
81117cd4:	003fb306 	br	81117ba4 <__reset+0xfb0f7ba4>
81117cd8:	88c0030b 	ldhu	r3,12(r17)
81117cdc:	3005883a 	mov	r2,r6
81117ce0:	18c01014 	ori	r3,r3,64
81117ce4:	88c0030d 	sth	r3,12(r17)
81117ce8:	003fae06 	br	81117ba4 <__reset+0xfb0f7ba4>

81117cec <_fflush_r>:
81117cec:	defffd04 	addi	sp,sp,-12
81117cf0:	de00012e 	bgeu	sp,et,81117cf8 <_fflush_r+0xc>
81117cf4:	003b68fa 	trap	3
81117cf8:	dc000115 	stw	r16,4(sp)
81117cfc:	dfc00215 	stw	ra,8(sp)
81117d00:	2021883a 	mov	r16,r4
81117d04:	20000226 	beq	r4,zero,81117d10 <_fflush_r+0x24>
81117d08:	20800e17 	ldw	r2,56(r4)
81117d0c:	10000c26 	beq	r2,zero,81117d40 <_fflush_r+0x54>
81117d10:	2880030f 	ldh	r2,12(r5)
81117d14:	1000051e 	bne	r2,zero,81117d2c <_fflush_r+0x40>
81117d18:	0005883a 	mov	r2,zero
81117d1c:	dfc00217 	ldw	ra,8(sp)
81117d20:	dc000117 	ldw	r16,4(sp)
81117d24:	dec00304 	addi	sp,sp,12
81117d28:	f800283a 	ret
81117d2c:	8009883a 	mov	r4,r16
81117d30:	dfc00217 	ldw	ra,8(sp)
81117d34:	dc000117 	ldw	r16,4(sp)
81117d38:	dec00304 	addi	sp,sp,12
81117d3c:	1117ac81 	jmpi	81117ac8 <__sflush_r>
81117d40:	d9400015 	stw	r5,0(sp)
81117d44:	11180e80 	call	811180e8 <__sinit>
81117d48:	d9400017 	ldw	r5,0(sp)
81117d4c:	003ff006 	br	81117d10 <__reset+0xfb0f7d10>

81117d50 <fflush>:
81117d50:	20000526 	beq	r4,zero,81117d68 <fflush+0x18>
81117d54:	00a04534 	movhi	r2,33044
81117d58:	10b73304 	addi	r2,r2,-9012
81117d5c:	200b883a 	mov	r5,r4
81117d60:	11000017 	ldw	r4,0(r2)
81117d64:	1117cec1 	jmpi	81117cec <_fflush_r>
81117d68:	00a04534 	movhi	r2,33044
81117d6c:	10b73204 	addi	r2,r2,-9016
81117d70:	11000017 	ldw	r4,0(r2)
81117d74:	01604474 	movhi	r5,33041
81117d78:	295f3b04 	addi	r5,r5,31980
81117d7c:	1118e281 	jmpi	81118e28 <_fwalk_reent>

81117d80 <__fp_unlock>:
81117d80:	0005883a 	mov	r2,zero
81117d84:	f800283a 	ret

81117d88 <_cleanup_r>:
81117d88:	016044b4 	movhi	r5,33042
81117d8c:	297f8704 	addi	r5,r5,-484
81117d90:	1118e281 	jmpi	81118e28 <_fwalk_reent>

81117d94 <__sinit.part.1>:
81117d94:	defff704 	addi	sp,sp,-36
81117d98:	00e04474 	movhi	r3,33041
81117d9c:	de00012e 	bgeu	sp,et,81117da4 <__sinit.part.1+0x10>
81117da0:	003b68fa 	trap	3
81117da4:	18df6204 	addi	r3,r3,32136
81117da8:	dfc00815 	stw	ra,32(sp)
81117dac:	ddc00715 	stw	r23,28(sp)
81117db0:	dd800615 	stw	r22,24(sp)
81117db4:	dd400515 	stw	r21,20(sp)
81117db8:	dd000415 	stw	r20,16(sp)
81117dbc:	dcc00315 	stw	r19,12(sp)
81117dc0:	dc800215 	stw	r18,8(sp)
81117dc4:	dc400115 	stw	r17,4(sp)
81117dc8:	dc000015 	stw	r16,0(sp)
81117dcc:	24000117 	ldw	r16,4(r4)
81117dd0:	20c00f15 	stw	r3,60(r4)
81117dd4:	2080bb04 	addi	r2,r4,748
81117dd8:	00c000c4 	movi	r3,3
81117ddc:	20c0b915 	stw	r3,740(r4)
81117de0:	2080ba15 	stw	r2,744(r4)
81117de4:	2000b815 	stw	zero,736(r4)
81117de8:	05c00204 	movi	r23,8
81117dec:	00800104 	movi	r2,4
81117df0:	2025883a 	mov	r18,r4
81117df4:	b80d883a 	mov	r6,r23
81117df8:	81001704 	addi	r4,r16,92
81117dfc:	000b883a 	mov	r5,zero
81117e00:	80000015 	stw	zero,0(r16)
81117e04:	80000115 	stw	zero,4(r16)
81117e08:	80000215 	stw	zero,8(r16)
81117e0c:	8080030d 	sth	r2,12(r16)
81117e10:	80001915 	stw	zero,100(r16)
81117e14:	8000038d 	sth	zero,14(r16)
81117e18:	80000415 	stw	zero,16(r16)
81117e1c:	80000515 	stw	zero,20(r16)
81117e20:	80000615 	stw	zero,24(r16)
81117e24:	110f76c0 	call	8110f76c <memset>
81117e28:	05a04474 	movhi	r22,33041
81117e2c:	94400217 	ldw	r17,8(r18)
81117e30:	05604474 	movhi	r21,33041
81117e34:	05204474 	movhi	r20,33041
81117e38:	04e04474 	movhi	r19,33041
81117e3c:	b5bf8604 	addi	r22,r22,-488
81117e40:	ad7f9f04 	addi	r21,r21,-388
81117e44:	a53fc004 	addi	r20,r20,-256
81117e48:	9cffd904 	addi	r19,r19,-156
81117e4c:	85800815 	stw	r22,32(r16)
81117e50:	85400915 	stw	r21,36(r16)
81117e54:	85000a15 	stw	r20,40(r16)
81117e58:	84c00b15 	stw	r19,44(r16)
81117e5c:	84000715 	stw	r16,28(r16)
81117e60:	00800284 	movi	r2,10
81117e64:	8880030d 	sth	r2,12(r17)
81117e68:	00800044 	movi	r2,1
81117e6c:	b80d883a 	mov	r6,r23
81117e70:	89001704 	addi	r4,r17,92
81117e74:	000b883a 	mov	r5,zero
81117e78:	88000015 	stw	zero,0(r17)
81117e7c:	88000115 	stw	zero,4(r17)
81117e80:	88000215 	stw	zero,8(r17)
81117e84:	88001915 	stw	zero,100(r17)
81117e88:	8880038d 	sth	r2,14(r17)
81117e8c:	88000415 	stw	zero,16(r17)
81117e90:	88000515 	stw	zero,20(r17)
81117e94:	88000615 	stw	zero,24(r17)
81117e98:	110f76c0 	call	8110f76c <memset>
81117e9c:	94000317 	ldw	r16,12(r18)
81117ea0:	00800484 	movi	r2,18
81117ea4:	8c400715 	stw	r17,28(r17)
81117ea8:	8d800815 	stw	r22,32(r17)
81117eac:	8d400915 	stw	r21,36(r17)
81117eb0:	8d000a15 	stw	r20,40(r17)
81117eb4:	8cc00b15 	stw	r19,44(r17)
81117eb8:	8080030d 	sth	r2,12(r16)
81117ebc:	00800084 	movi	r2,2
81117ec0:	80000015 	stw	zero,0(r16)
81117ec4:	80000115 	stw	zero,4(r16)
81117ec8:	80000215 	stw	zero,8(r16)
81117ecc:	80001915 	stw	zero,100(r16)
81117ed0:	8080038d 	sth	r2,14(r16)
81117ed4:	80000415 	stw	zero,16(r16)
81117ed8:	80000515 	stw	zero,20(r16)
81117edc:	80000615 	stw	zero,24(r16)
81117ee0:	b80d883a 	mov	r6,r23
81117ee4:	000b883a 	mov	r5,zero
81117ee8:	81001704 	addi	r4,r16,92
81117eec:	110f76c0 	call	8110f76c <memset>
81117ef0:	00800044 	movi	r2,1
81117ef4:	84000715 	stw	r16,28(r16)
81117ef8:	85800815 	stw	r22,32(r16)
81117efc:	85400915 	stw	r21,36(r16)
81117f00:	85000a15 	stw	r20,40(r16)
81117f04:	84c00b15 	stw	r19,44(r16)
81117f08:	90800e15 	stw	r2,56(r18)
81117f0c:	dfc00817 	ldw	ra,32(sp)
81117f10:	ddc00717 	ldw	r23,28(sp)
81117f14:	dd800617 	ldw	r22,24(sp)
81117f18:	dd400517 	ldw	r21,20(sp)
81117f1c:	dd000417 	ldw	r20,16(sp)
81117f20:	dcc00317 	ldw	r19,12(sp)
81117f24:	dc800217 	ldw	r18,8(sp)
81117f28:	dc400117 	ldw	r17,4(sp)
81117f2c:	dc000017 	ldw	r16,0(sp)
81117f30:	dec00904 	addi	sp,sp,36
81117f34:	f800283a 	ret

81117f38 <__fp_lock>:
81117f38:	0005883a 	mov	r2,zero
81117f3c:	f800283a 	ret

81117f40 <__sfmoreglue>:
81117f40:	defffc04 	addi	sp,sp,-16
81117f44:	de00012e 	bgeu	sp,et,81117f4c <__sfmoreglue+0xc>
81117f48:	003b68fa 	trap	3
81117f4c:	dc400115 	stw	r17,4(sp)
81117f50:	2c7fffc4 	addi	r17,r5,-1
81117f54:	8c401a24 	muli	r17,r17,104
81117f58:	dc800215 	stw	r18,8(sp)
81117f5c:	2825883a 	mov	r18,r5
81117f60:	89401d04 	addi	r5,r17,116
81117f64:	dc000015 	stw	r16,0(sp)
81117f68:	dfc00315 	stw	ra,12(sp)
81117f6c:	110ee080 	call	8110ee08 <_malloc_r>
81117f70:	1021883a 	mov	r16,r2
81117f74:	10000726 	beq	r2,zero,81117f94 <__sfmoreglue+0x54>
81117f78:	11000304 	addi	r4,r2,12
81117f7c:	10000015 	stw	zero,0(r2)
81117f80:	14800115 	stw	r18,4(r2)
81117f84:	11000215 	stw	r4,8(r2)
81117f88:	89801a04 	addi	r6,r17,104
81117f8c:	000b883a 	mov	r5,zero
81117f90:	110f76c0 	call	8110f76c <memset>
81117f94:	8005883a 	mov	r2,r16
81117f98:	dfc00317 	ldw	ra,12(sp)
81117f9c:	dc800217 	ldw	r18,8(sp)
81117fa0:	dc400117 	ldw	r17,4(sp)
81117fa4:	dc000017 	ldw	r16,0(sp)
81117fa8:	dec00404 	addi	sp,sp,16
81117fac:	f800283a 	ret

81117fb0 <__sfp>:
81117fb0:	defffb04 	addi	sp,sp,-20
81117fb4:	de00012e 	bgeu	sp,et,81117fbc <__sfp+0xc>
81117fb8:	003b68fa 	trap	3
81117fbc:	dc000015 	stw	r16,0(sp)
81117fc0:	04204534 	movhi	r16,33044
81117fc4:	84373204 	addi	r16,r16,-9016
81117fc8:	dcc00315 	stw	r19,12(sp)
81117fcc:	2027883a 	mov	r19,r4
81117fd0:	81000017 	ldw	r4,0(r16)
81117fd4:	dfc00415 	stw	ra,16(sp)
81117fd8:	dc800215 	stw	r18,8(sp)
81117fdc:	20800e17 	ldw	r2,56(r4)
81117fe0:	dc400115 	stw	r17,4(sp)
81117fe4:	1000021e 	bne	r2,zero,81117ff0 <__sfp+0x40>
81117fe8:	1117d940 	call	81117d94 <__sinit.part.1>
81117fec:	81000017 	ldw	r4,0(r16)
81117ff0:	2480b804 	addi	r18,r4,736
81117ff4:	047fffc4 	movi	r17,-1
81117ff8:	91000117 	ldw	r4,4(r18)
81117ffc:	94000217 	ldw	r16,8(r18)
81118000:	213fffc4 	addi	r4,r4,-1
81118004:	20000a16 	blt	r4,zero,81118030 <__sfp+0x80>
81118008:	8080030f 	ldh	r2,12(r16)
8111800c:	10000c26 	beq	r2,zero,81118040 <__sfp+0x90>
81118010:	80c01d04 	addi	r3,r16,116
81118014:	00000206 	br	81118020 <__sfp+0x70>
81118018:	18bfe60f 	ldh	r2,-104(r3)
8111801c:	10000826 	beq	r2,zero,81118040 <__sfp+0x90>
81118020:	213fffc4 	addi	r4,r4,-1
81118024:	1c3ffd04 	addi	r16,r3,-12
81118028:	18c01a04 	addi	r3,r3,104
8111802c:	247ffa1e 	bne	r4,r17,81118018 <__reset+0xfb0f8018>
81118030:	90800017 	ldw	r2,0(r18)
81118034:	10001d26 	beq	r2,zero,811180ac <__sfp+0xfc>
81118038:	1025883a 	mov	r18,r2
8111803c:	003fee06 	br	81117ff8 <__reset+0xfb0f7ff8>
81118040:	00bfffc4 	movi	r2,-1
81118044:	8080038d 	sth	r2,14(r16)
81118048:	00800044 	movi	r2,1
8111804c:	8080030d 	sth	r2,12(r16)
81118050:	80001915 	stw	zero,100(r16)
81118054:	80000015 	stw	zero,0(r16)
81118058:	80000215 	stw	zero,8(r16)
8111805c:	80000115 	stw	zero,4(r16)
81118060:	80000415 	stw	zero,16(r16)
81118064:	80000515 	stw	zero,20(r16)
81118068:	80000615 	stw	zero,24(r16)
8111806c:	01800204 	movi	r6,8
81118070:	000b883a 	mov	r5,zero
81118074:	81001704 	addi	r4,r16,92
81118078:	110f76c0 	call	8110f76c <memset>
8111807c:	8005883a 	mov	r2,r16
81118080:	80000c15 	stw	zero,48(r16)
81118084:	80000d15 	stw	zero,52(r16)
81118088:	80001115 	stw	zero,68(r16)
8111808c:	80001215 	stw	zero,72(r16)
81118090:	dfc00417 	ldw	ra,16(sp)
81118094:	dcc00317 	ldw	r19,12(sp)
81118098:	dc800217 	ldw	r18,8(sp)
8111809c:	dc400117 	ldw	r17,4(sp)
811180a0:	dc000017 	ldw	r16,0(sp)
811180a4:	dec00504 	addi	sp,sp,20
811180a8:	f800283a 	ret
811180ac:	01400104 	movi	r5,4
811180b0:	9809883a 	mov	r4,r19
811180b4:	1117f400 	call	81117f40 <__sfmoreglue>
811180b8:	90800015 	stw	r2,0(r18)
811180bc:	103fde1e 	bne	r2,zero,81118038 <__reset+0xfb0f8038>
811180c0:	00800304 	movi	r2,12
811180c4:	98800015 	stw	r2,0(r19)
811180c8:	0005883a 	mov	r2,zero
811180cc:	003ff006 	br	81118090 <__reset+0xfb0f8090>

811180d0 <_cleanup>:
811180d0:	00a04534 	movhi	r2,33044
811180d4:	10b73204 	addi	r2,r2,-9016
811180d8:	11000017 	ldw	r4,0(r2)
811180dc:	016044b4 	movhi	r5,33042
811180e0:	297f8704 	addi	r5,r5,-484
811180e4:	1118e281 	jmpi	81118e28 <_fwalk_reent>

811180e8 <__sinit>:
811180e8:	20800e17 	ldw	r2,56(r4)
811180ec:	10000126 	beq	r2,zero,811180f4 <__sinit+0xc>
811180f0:	f800283a 	ret
811180f4:	1117d941 	jmpi	81117d94 <__sinit.part.1>

811180f8 <__sfp_lock_acquire>:
811180f8:	f800283a 	ret

811180fc <__sfp_lock_release>:
811180fc:	f800283a 	ret

81118100 <__sinit_lock_acquire>:
81118100:	f800283a 	ret

81118104 <__sinit_lock_release>:
81118104:	f800283a 	ret

81118108 <__fp_lock_all>:
81118108:	00a04534 	movhi	r2,33044
8111810c:	10b73304 	addi	r2,r2,-9012
81118110:	11000017 	ldw	r4,0(r2)
81118114:	01604474 	movhi	r5,33041
81118118:	295fce04 	addi	r5,r5,32568
8111811c:	1118d5c1 	jmpi	81118d5c <_fwalk>

81118120 <__fp_unlock_all>:
81118120:	00a04534 	movhi	r2,33044
81118124:	10b73304 	addi	r2,r2,-9012
81118128:	11000017 	ldw	r4,0(r2)
8111812c:	01604474 	movhi	r5,33041
81118130:	295f6004 	addi	r5,r5,32128
81118134:	1118d5c1 	jmpi	81118d5c <_fwalk>

81118138 <__sflags>:
81118138:	28800007 	ldb	r2,0(r5)
8111813c:	00c01c84 	movi	r3,114
81118140:	10c02426 	beq	r2,r3,811181d4 <__sflags+0x9c>
81118144:	00c01dc4 	movi	r3,119
81118148:	10c01e26 	beq	r2,r3,811181c4 <__sflags+0x8c>
8111814c:	00c01844 	movi	r3,97
81118150:	10c00426 	beq	r2,r3,81118164 <__sflags+0x2c>
81118154:	00800584 	movi	r2,22
81118158:	20800015 	stw	r2,0(r4)
8111815c:	0005883a 	mov	r2,zero
81118160:	f800283a 	ret
81118164:	02c08204 	movi	r11,520
81118168:	01000044 	movi	r4,1
8111816c:	00804204 	movi	r2,264
81118170:	01c00ac4 	movi	r7,43
81118174:	02bff8c4 	movi	r10,-29
81118178:	027fff04 	movi	r9,-4
8111817c:	02001e04 	movi	r8,120
81118180:	29400044 	addi	r5,r5,1
81118184:	28c00007 	ldb	r3,0(r5)
81118188:	18000626 	beq	r3,zero,811181a4 <__sflags+0x6c>
8111818c:	19c00826 	beq	r3,r7,811181b0 <__sflags+0x78>
81118190:	1a3ffb1e 	bne	r3,r8,81118180 <__reset+0xfb0f8180>
81118194:	29400044 	addi	r5,r5,1
81118198:	28c00007 	ldb	r3,0(r5)
8111819c:	21020014 	ori	r4,r4,2048
811181a0:	183ffa1e 	bne	r3,zero,8111818c <__reset+0xfb0f818c>
811181a4:	22c8b03a 	or	r4,r4,r11
811181a8:	31000015 	stw	r4,0(r6)
811181ac:	f800283a 	ret
811181b0:	1284703a 	and	r2,r2,r10
811181b4:	2248703a 	and	r4,r4,r9
811181b8:	10800414 	ori	r2,r2,16
811181bc:	21000094 	ori	r4,r4,2
811181c0:	003fef06 	br	81118180 <__reset+0xfb0f8180>
811181c4:	02c18004 	movi	r11,1536
811181c8:	01000044 	movi	r4,1
811181cc:	00800204 	movi	r2,8
811181d0:	003fe706 	br	81118170 <__reset+0xfb0f8170>
811181d4:	0017883a 	mov	r11,zero
811181d8:	0009883a 	mov	r4,zero
811181dc:	00800104 	movi	r2,4
811181e0:	003fe306 	br	81118170 <__reset+0xfb0f8170>

811181e4 <_fread_r>:
811181e4:	defff404 	addi	sp,sp,-48
811181e8:	de00012e 	bgeu	sp,et,811181f0 <_fread_r+0xc>
811181ec:	003b68fa 	trap	3
811181f0:	dd800815 	stw	r22,32(sp)
811181f4:	39ad383a 	mul	r22,r7,r6
811181f8:	dc000215 	stw	r16,8(sp)
811181fc:	dfc00b15 	stw	ra,44(sp)
81118200:	df000a15 	stw	fp,40(sp)
81118204:	ddc00915 	stw	r23,36(sp)
81118208:	dd400715 	stw	r21,28(sp)
8111820c:	dd000615 	stw	r20,24(sp)
81118210:	dcc00515 	stw	r19,20(sp)
81118214:	dc800415 	stw	r18,16(sp)
81118218:	dc400315 	stw	r17,12(sp)
8111821c:	dc000c17 	ldw	r16,48(sp)
81118220:	b0003b26 	beq	r22,zero,81118310 <_fread_r+0x12c>
81118224:	302f883a 	mov	r23,r6
81118228:	382b883a 	mov	r21,r7
8111822c:	2029883a 	mov	r20,r4
81118230:	2827883a 	mov	r19,r5
81118234:	20000226 	beq	r4,zero,81118240 <_fread_r+0x5c>
81118238:	20800e17 	ldw	r2,56(r4)
8111823c:	10006e26 	beq	r2,zero,811183f8 <_fread_r+0x214>
81118240:	8080030b 	ldhu	r2,12(r16)
81118244:	10c8000c 	andi	r3,r2,8192
81118248:	1800061e 	bne	r3,zero,81118264 <_fread_r+0x80>
8111824c:	81001917 	ldw	r4,100(r16)
81118250:	00f7ffc4 	movi	r3,-8193
81118254:	10880014 	ori	r2,r2,8192
81118258:	20c6703a 	and	r3,r4,r3
8111825c:	8080030d 	sth	r2,12(r16)
81118260:	80c01915 	stw	r3,100(r16)
81118264:	84400117 	ldw	r17,4(r16)
81118268:	88005f16 	blt	r17,zero,811183e8 <_fread_r+0x204>
8111826c:	8809883a 	mov	r4,r17
81118270:	1080008c 	andi	r2,r2,2
81118274:	1000281e 	bne	r2,zero,81118318 <_fread_r+0x134>
81118278:	b025883a 	mov	r18,r22
8111827c:	00000b06 	br	811182ac <_fread_r+0xc8>
81118280:	110f61c0 	call	8110f61c <memcpy>
81118284:	80800017 	ldw	r2,0(r16)
81118288:	9c67883a 	add	r19,r19,r17
8111828c:	9465c83a 	sub	r18,r18,r17
81118290:	1463883a 	add	r17,r2,r17
81118294:	800b883a 	mov	r5,r16
81118298:	a009883a 	mov	r4,r20
8111829c:	84400015 	stw	r17,0(r16)
811182a0:	110fa900 	call	8110fa90 <__srefill_r>
811182a4:	10004c1e 	bne	r2,zero,811183d8 <_fread_r+0x1f4>
811182a8:	84400117 	ldw	r17,4(r16)
811182ac:	880d883a 	mov	r6,r17
811182b0:	9809883a 	mov	r4,r19
811182b4:	81400017 	ldw	r5,0(r16)
811182b8:	8cbff136 	bltu	r17,r18,81118280 <__reset+0xfb0f8280>
811182bc:	900d883a 	mov	r6,r18
811182c0:	110f61c0 	call	8110f61c <memcpy>
811182c4:	80c00117 	ldw	r3,4(r16)
811182c8:	81000017 	ldw	r4,0(r16)
811182cc:	a805883a 	mov	r2,r21
811182d0:	1c87c83a 	sub	r3,r3,r18
811182d4:	24a5883a 	add	r18,r4,r18
811182d8:	80c00115 	stw	r3,4(r16)
811182dc:	84800015 	stw	r18,0(r16)
811182e0:	dfc00b17 	ldw	ra,44(sp)
811182e4:	df000a17 	ldw	fp,40(sp)
811182e8:	ddc00917 	ldw	r23,36(sp)
811182ec:	dd800817 	ldw	r22,32(sp)
811182f0:	dd400717 	ldw	r21,28(sp)
811182f4:	dd000617 	ldw	r20,24(sp)
811182f8:	dcc00517 	ldw	r19,20(sp)
811182fc:	dc800417 	ldw	r18,16(sp)
81118300:	dc400317 	ldw	r17,12(sp)
81118304:	dc000217 	ldw	r16,8(sp)
81118308:	dec00c04 	addi	sp,sp,48
8111830c:	f800283a 	ret
81118310:	0005883a 	mov	r2,zero
81118314:	003ff206 	br	811182e0 <__reset+0xfb0f82e0>
81118318:	b007883a 	mov	r3,r22
8111831c:	2580012e 	bgeu	r4,r22,81118324 <_fread_r+0x140>
81118320:	2007883a 	mov	r3,r4
81118324:	81400017 	ldw	r5,0(r16)
81118328:	180d883a 	mov	r6,r3
8111832c:	9809883a 	mov	r4,r19
81118330:	d8c00115 	stw	r3,4(sp)
81118334:	110f61c0 	call	8110f61c <memcpy>
81118338:	d8c00117 	ldw	r3,4(sp)
8111833c:	84400017 	ldw	r17,0(r16)
81118340:	80800117 	ldw	r2,4(r16)
81118344:	81400c17 	ldw	r5,48(r16)
81118348:	88e3883a 	add	r17,r17,r3
8111834c:	10c5c83a 	sub	r2,r2,r3
81118350:	84400015 	stw	r17,0(r16)
81118354:	80800115 	stw	r2,4(r16)
81118358:	b0e5c83a 	sub	r18,r22,r3
8111835c:	28002b26 	beq	r5,zero,8111840c <_fread_r+0x228>
81118360:	90002b26 	beq	r18,zero,81118410 <_fread_r+0x22c>
81118364:	80801004 	addi	r2,r16,64
81118368:	28800526 	beq	r5,r2,81118380 <_fread_r+0x19c>
8111836c:	a009883a 	mov	r4,r20
81118370:	d8c00115 	stw	r3,4(sp)
81118374:	11185800 	call	81118580 <_free_r>
81118378:	d8c00117 	ldw	r3,4(sp)
8111837c:	84400017 	ldw	r17,0(r16)
81118380:	80000c15 	stw	zero,48(r16)
81118384:	80800517 	ldw	r2,20(r16)
81118388:	87000417 	ldw	fp,16(r16)
8111838c:	98e7883a 	add	r19,r19,r3
81118390:	d8800015 	stw	r2,0(sp)
81118394:	00000106 	br	8111839c <_fread_r+0x1b8>
81118398:	90001d26 	beq	r18,zero,81118410 <_fread_r+0x22c>
8111839c:	84c00415 	stw	r19,16(r16)
811183a0:	84800515 	stw	r18,20(r16)
811183a4:	84c00015 	stw	r19,0(r16)
811183a8:	a009883a 	mov	r4,r20
811183ac:	800b883a 	mov	r5,r16
811183b0:	110fa900 	call	8110fa90 <__srefill_r>
811183b4:	d9000017 	ldw	r4,0(sp)
811183b8:	80c00117 	ldw	r3,4(r16)
811183bc:	87000415 	stw	fp,16(r16)
811183c0:	81000515 	stw	r4,20(r16)
811183c4:	84400015 	stw	r17,0(r16)
811183c8:	80000115 	stw	zero,4(r16)
811183cc:	90e5c83a 	sub	r18,r18,r3
811183d0:	98e7883a 	add	r19,r19,r3
811183d4:	103ff026 	beq	r2,zero,81118398 <__reset+0xfb0f8398>
811183d8:	b80b883a 	mov	r5,r23
811183dc:	b489c83a 	sub	r4,r22,r18
811183e0:	1121be00 	call	81121be0 <__udivsi3>
811183e4:	003fbe06 	br	811182e0 <__reset+0xfb0f82e0>
811183e8:	80000115 	stw	zero,4(r16)
811183ec:	0009883a 	mov	r4,zero
811183f0:	0023883a 	mov	r17,zero
811183f4:	003f9e06 	br	81118270 <__reset+0xfb0f8270>
811183f8:	11180e80 	call	811180e8 <__sinit>
811183fc:	8080030b 	ldhu	r2,12(r16)
81118400:	10c8000c 	andi	r3,r2,8192
81118404:	183f971e 	bne	r3,zero,81118264 <__reset+0xfb0f8264>
81118408:	003f9006 	br	8111824c <__reset+0xfb0f824c>
8111840c:	903fdd1e 	bne	r18,zero,81118384 <__reset+0xfb0f8384>
81118410:	a805883a 	mov	r2,r21
81118414:	003fb206 	br	811182e0 <__reset+0xfb0f82e0>

81118418 <fread>:
81118418:	defffe04 	addi	sp,sp,-8
8111841c:	00a04534 	movhi	r2,33044
81118420:	de00012e 	bgeu	sp,et,81118428 <fread+0x10>
81118424:	003b68fa 	trap	3
81118428:	10b73304 	addi	r2,r2,-9012
8111842c:	d9c00015 	stw	r7,0(sp)
81118430:	300f883a 	mov	r7,r6
81118434:	280d883a 	mov	r6,r5
81118438:	200b883a 	mov	r5,r4
8111843c:	11000017 	ldw	r4,0(r2)
81118440:	dfc00115 	stw	ra,4(sp)
81118444:	11181e40 	call	811181e4 <_fread_r>
81118448:	dfc00117 	ldw	ra,4(sp)
8111844c:	dec00204 	addi	sp,sp,8
81118450:	f800283a 	ret

81118454 <_malloc_trim_r>:
81118454:	defffb04 	addi	sp,sp,-20
81118458:	de00012e 	bgeu	sp,et,81118460 <_malloc_trim_r+0xc>
8111845c:	003b68fa 	trap	3
81118460:	dcc00315 	stw	r19,12(sp)
81118464:	04e04534 	movhi	r19,33044
81118468:	dc800215 	stw	r18,8(sp)
8111846c:	dc400115 	stw	r17,4(sp)
81118470:	dc000015 	stw	r16,0(sp)
81118474:	dfc00415 	stw	ra,16(sp)
81118478:	2821883a 	mov	r16,r5
8111847c:	9cf11304 	addi	r19,r19,-15284
81118480:	2025883a 	mov	r18,r4
81118484:	1124d780 	call	81124d78 <__malloc_lock>
81118488:	98800217 	ldw	r2,8(r19)
8111848c:	14400117 	ldw	r17,4(r2)
81118490:	00bfff04 	movi	r2,-4
81118494:	88a2703a 	and	r17,r17,r2
81118498:	8c21c83a 	sub	r16,r17,r16
8111849c:	8403fbc4 	addi	r16,r16,4079
811184a0:	8020d33a 	srli	r16,r16,12
811184a4:	0083ffc4 	movi	r2,4095
811184a8:	843fffc4 	addi	r16,r16,-1
811184ac:	8020933a 	slli	r16,r16,12
811184b0:	1400060e 	bge	r2,r16,811184cc <_malloc_trim_r+0x78>
811184b4:	000b883a 	mov	r5,zero
811184b8:	9009883a 	mov	r4,r18
811184bc:	110fc6c0 	call	8110fc6c <_sbrk_r>
811184c0:	98c00217 	ldw	r3,8(r19)
811184c4:	1c47883a 	add	r3,r3,r17
811184c8:	10c00a26 	beq	r2,r3,811184f4 <_malloc_trim_r+0xa0>
811184cc:	9009883a 	mov	r4,r18
811184d0:	1124ea00 	call	81124ea0 <__malloc_unlock>
811184d4:	0005883a 	mov	r2,zero
811184d8:	dfc00417 	ldw	ra,16(sp)
811184dc:	dcc00317 	ldw	r19,12(sp)
811184e0:	dc800217 	ldw	r18,8(sp)
811184e4:	dc400117 	ldw	r17,4(sp)
811184e8:	dc000017 	ldw	r16,0(sp)
811184ec:	dec00504 	addi	sp,sp,20
811184f0:	f800283a 	ret
811184f4:	040bc83a 	sub	r5,zero,r16
811184f8:	9009883a 	mov	r4,r18
811184fc:	110fc6c0 	call	8110fc6c <_sbrk_r>
81118500:	00ffffc4 	movi	r3,-1
81118504:	10c00d26 	beq	r2,r3,8111853c <_malloc_trim_r+0xe8>
81118508:	00e04534 	movhi	r3,33044
8111850c:	18f7f504 	addi	r3,r3,-8236
81118510:	18800017 	ldw	r2,0(r3)
81118514:	99000217 	ldw	r4,8(r19)
81118518:	8c23c83a 	sub	r17,r17,r16
8111851c:	8c400054 	ori	r17,r17,1
81118520:	1421c83a 	sub	r16,r2,r16
81118524:	24400115 	stw	r17,4(r4)
81118528:	9009883a 	mov	r4,r18
8111852c:	1c000015 	stw	r16,0(r3)
81118530:	1124ea00 	call	81124ea0 <__malloc_unlock>
81118534:	00800044 	movi	r2,1
81118538:	003fe706 	br	811184d8 <__reset+0xfb0f84d8>
8111853c:	000b883a 	mov	r5,zero
81118540:	9009883a 	mov	r4,r18
81118544:	110fc6c0 	call	8110fc6c <_sbrk_r>
81118548:	99000217 	ldw	r4,8(r19)
8111854c:	014003c4 	movi	r5,15
81118550:	1107c83a 	sub	r3,r2,r4
81118554:	28ffdd0e 	bge	r5,r3,811184cc <__reset+0xfb0f84cc>
81118558:	01604534 	movhi	r5,33044
8111855c:	29773404 	addi	r5,r5,-9008
81118560:	29400017 	ldw	r5,0(r5)
81118564:	18c00054 	ori	r3,r3,1
81118568:	20c00115 	stw	r3,4(r4)
8111856c:	00e04534 	movhi	r3,33044
81118570:	1145c83a 	sub	r2,r2,r5
81118574:	18f7f504 	addi	r3,r3,-8236
81118578:	18800015 	stw	r2,0(r3)
8111857c:	003fd306 	br	811184cc <__reset+0xfb0f84cc>

81118580 <_free_r>:
81118580:	28004326 	beq	r5,zero,81118690 <_free_r+0x110>
81118584:	defffd04 	addi	sp,sp,-12
81118588:	de00012e 	bgeu	sp,et,81118590 <_free_r+0x10>
8111858c:	003b68fa 	trap	3
81118590:	dc400115 	stw	r17,4(sp)
81118594:	dc000015 	stw	r16,0(sp)
81118598:	2023883a 	mov	r17,r4
8111859c:	2821883a 	mov	r16,r5
811185a0:	dfc00215 	stw	ra,8(sp)
811185a4:	1124d780 	call	81124d78 <__malloc_lock>
811185a8:	81ffff17 	ldw	r7,-4(r16)
811185ac:	00bfff84 	movi	r2,-2
811185b0:	01204534 	movhi	r4,33044
811185b4:	81bffe04 	addi	r6,r16,-8
811185b8:	3884703a 	and	r2,r7,r2
811185bc:	21311304 	addi	r4,r4,-15284
811185c0:	308b883a 	add	r5,r6,r2
811185c4:	2a400117 	ldw	r9,4(r5)
811185c8:	22000217 	ldw	r8,8(r4)
811185cc:	00ffff04 	movi	r3,-4
811185d0:	48c6703a 	and	r3,r9,r3
811185d4:	2a005726 	beq	r5,r8,81118734 <_free_r+0x1b4>
811185d8:	28c00115 	stw	r3,4(r5)
811185dc:	39c0004c 	andi	r7,r7,1
811185e0:	3800091e 	bne	r7,zero,81118608 <_free_r+0x88>
811185e4:	823ffe17 	ldw	r8,-8(r16)
811185e8:	22400204 	addi	r9,r4,8
811185ec:	320dc83a 	sub	r6,r6,r8
811185f0:	31c00217 	ldw	r7,8(r6)
811185f4:	1205883a 	add	r2,r2,r8
811185f8:	3a406526 	beq	r7,r9,81118790 <_free_r+0x210>
811185fc:	32000317 	ldw	r8,12(r6)
81118600:	3a000315 	stw	r8,12(r7)
81118604:	41c00215 	stw	r7,8(r8)
81118608:	28cf883a 	add	r7,r5,r3
8111860c:	39c00117 	ldw	r7,4(r7)
81118610:	39c0004c 	andi	r7,r7,1
81118614:	38003a26 	beq	r7,zero,81118700 <_free_r+0x180>
81118618:	10c00054 	ori	r3,r2,1
8111861c:	30c00115 	stw	r3,4(r6)
81118620:	3087883a 	add	r3,r6,r2
81118624:	18800015 	stw	r2,0(r3)
81118628:	00c07fc4 	movi	r3,511
8111862c:	18801936 	bltu	r3,r2,81118694 <_free_r+0x114>
81118630:	1004d0fa 	srli	r2,r2,3
81118634:	01c00044 	movi	r7,1
81118638:	21400117 	ldw	r5,4(r4)
8111863c:	10c00044 	addi	r3,r2,1
81118640:	18c7883a 	add	r3,r3,r3
81118644:	1005d0ba 	srai	r2,r2,2
81118648:	18c7883a 	add	r3,r3,r3
8111864c:	18c7883a 	add	r3,r3,r3
81118650:	1907883a 	add	r3,r3,r4
81118654:	3884983a 	sll	r2,r7,r2
81118658:	19c00017 	ldw	r7,0(r3)
8111865c:	1a3ffe04 	addi	r8,r3,-8
81118660:	1144b03a 	or	r2,r2,r5
81118664:	32000315 	stw	r8,12(r6)
81118668:	31c00215 	stw	r7,8(r6)
8111866c:	20800115 	stw	r2,4(r4)
81118670:	19800015 	stw	r6,0(r3)
81118674:	39800315 	stw	r6,12(r7)
81118678:	8809883a 	mov	r4,r17
8111867c:	dfc00217 	ldw	ra,8(sp)
81118680:	dc400117 	ldw	r17,4(sp)
81118684:	dc000017 	ldw	r16,0(sp)
81118688:	dec00304 	addi	sp,sp,12
8111868c:	1124ea01 	jmpi	81124ea0 <__malloc_unlock>
81118690:	f800283a 	ret
81118694:	100ad27a 	srli	r5,r2,9
81118698:	00c00104 	movi	r3,4
8111869c:	19404a36 	bltu	r3,r5,811187c8 <_free_r+0x248>
811186a0:	100ad1ba 	srli	r5,r2,6
811186a4:	28c00e44 	addi	r3,r5,57
811186a8:	18c7883a 	add	r3,r3,r3
811186ac:	29400e04 	addi	r5,r5,56
811186b0:	18c7883a 	add	r3,r3,r3
811186b4:	18c7883a 	add	r3,r3,r3
811186b8:	1909883a 	add	r4,r3,r4
811186bc:	20c00017 	ldw	r3,0(r4)
811186c0:	01e04534 	movhi	r7,33044
811186c4:	213ffe04 	addi	r4,r4,-8
811186c8:	39f11304 	addi	r7,r7,-15284
811186cc:	20c04426 	beq	r4,r3,811187e0 <_free_r+0x260>
811186d0:	01ffff04 	movi	r7,-4
811186d4:	19400117 	ldw	r5,4(r3)
811186d8:	29ca703a 	and	r5,r5,r7
811186dc:	1140022e 	bgeu	r2,r5,811186e8 <_free_r+0x168>
811186e0:	18c00217 	ldw	r3,8(r3)
811186e4:	20fffb1e 	bne	r4,r3,811186d4 <__reset+0xfb0f86d4>
811186e8:	19000317 	ldw	r4,12(r3)
811186ec:	31000315 	stw	r4,12(r6)
811186f0:	30c00215 	stw	r3,8(r6)
811186f4:	21800215 	stw	r6,8(r4)
811186f8:	19800315 	stw	r6,12(r3)
811186fc:	003fde06 	br	81118678 <__reset+0xfb0f8678>
81118700:	29c00217 	ldw	r7,8(r5)
81118704:	10c5883a 	add	r2,r2,r3
81118708:	00e04534 	movhi	r3,33044
8111870c:	18f11504 	addi	r3,r3,-15276
81118710:	38c03b26 	beq	r7,r3,81118800 <_free_r+0x280>
81118714:	2a000317 	ldw	r8,12(r5)
81118718:	11400054 	ori	r5,r2,1
8111871c:	3087883a 	add	r3,r6,r2
81118720:	3a000315 	stw	r8,12(r7)
81118724:	41c00215 	stw	r7,8(r8)
81118728:	31400115 	stw	r5,4(r6)
8111872c:	18800015 	stw	r2,0(r3)
81118730:	003fbd06 	br	81118628 <__reset+0xfb0f8628>
81118734:	39c0004c 	andi	r7,r7,1
81118738:	10c5883a 	add	r2,r2,r3
8111873c:	3800071e 	bne	r7,zero,8111875c <_free_r+0x1dc>
81118740:	81fffe17 	ldw	r7,-8(r16)
81118744:	31cdc83a 	sub	r6,r6,r7
81118748:	30c00317 	ldw	r3,12(r6)
8111874c:	31400217 	ldw	r5,8(r6)
81118750:	11c5883a 	add	r2,r2,r7
81118754:	28c00315 	stw	r3,12(r5)
81118758:	19400215 	stw	r5,8(r3)
8111875c:	10c00054 	ori	r3,r2,1
81118760:	30c00115 	stw	r3,4(r6)
81118764:	00e04534 	movhi	r3,33044
81118768:	18f73504 	addi	r3,r3,-9004
8111876c:	18c00017 	ldw	r3,0(r3)
81118770:	21800215 	stw	r6,8(r4)
81118774:	10ffc036 	bltu	r2,r3,81118678 <__reset+0xfb0f8678>
81118778:	00a04534 	movhi	r2,33044
8111877c:	10b79604 	addi	r2,r2,-8616
81118780:	11400017 	ldw	r5,0(r2)
81118784:	8809883a 	mov	r4,r17
81118788:	11184540 	call	81118454 <_malloc_trim_r>
8111878c:	003fba06 	br	81118678 <__reset+0xfb0f8678>
81118790:	28c9883a 	add	r4,r5,r3
81118794:	21000117 	ldw	r4,4(r4)
81118798:	2100004c 	andi	r4,r4,1
8111879c:	2000391e 	bne	r4,zero,81118884 <_free_r+0x304>
811187a0:	29c00217 	ldw	r7,8(r5)
811187a4:	29000317 	ldw	r4,12(r5)
811187a8:	1885883a 	add	r2,r3,r2
811187ac:	10c00054 	ori	r3,r2,1
811187b0:	39000315 	stw	r4,12(r7)
811187b4:	21c00215 	stw	r7,8(r4)
811187b8:	30c00115 	stw	r3,4(r6)
811187bc:	308d883a 	add	r6,r6,r2
811187c0:	30800015 	stw	r2,0(r6)
811187c4:	003fac06 	br	81118678 <__reset+0xfb0f8678>
811187c8:	00c00504 	movi	r3,20
811187cc:	19401536 	bltu	r3,r5,81118824 <_free_r+0x2a4>
811187d0:	28c01704 	addi	r3,r5,92
811187d4:	18c7883a 	add	r3,r3,r3
811187d8:	294016c4 	addi	r5,r5,91
811187dc:	003fb406 	br	811186b0 <__reset+0xfb0f86b0>
811187e0:	280bd0ba 	srai	r5,r5,2
811187e4:	00c00044 	movi	r3,1
811187e8:	38800117 	ldw	r2,4(r7)
811187ec:	194a983a 	sll	r5,r3,r5
811187f0:	2007883a 	mov	r3,r4
811187f4:	2884b03a 	or	r2,r5,r2
811187f8:	38800115 	stw	r2,4(r7)
811187fc:	003fbb06 	br	811186ec <__reset+0xfb0f86ec>
81118800:	21800515 	stw	r6,20(r4)
81118804:	21800415 	stw	r6,16(r4)
81118808:	10c00054 	ori	r3,r2,1
8111880c:	31c00315 	stw	r7,12(r6)
81118810:	31c00215 	stw	r7,8(r6)
81118814:	30c00115 	stw	r3,4(r6)
81118818:	308d883a 	add	r6,r6,r2
8111881c:	30800015 	stw	r2,0(r6)
81118820:	003f9506 	br	81118678 <__reset+0xfb0f8678>
81118824:	00c01504 	movi	r3,84
81118828:	19400536 	bltu	r3,r5,81118840 <_free_r+0x2c0>
8111882c:	100ad33a 	srli	r5,r2,12
81118830:	28c01bc4 	addi	r3,r5,111
81118834:	18c7883a 	add	r3,r3,r3
81118838:	29401b84 	addi	r5,r5,110
8111883c:	003f9c06 	br	811186b0 <__reset+0xfb0f86b0>
81118840:	00c05504 	movi	r3,340
81118844:	19400536 	bltu	r3,r5,8111885c <_free_r+0x2dc>
81118848:	100ad3fa 	srli	r5,r2,15
8111884c:	28c01e04 	addi	r3,r5,120
81118850:	18c7883a 	add	r3,r3,r3
81118854:	29401dc4 	addi	r5,r5,119
81118858:	003f9506 	br	811186b0 <__reset+0xfb0f86b0>
8111885c:	00c15504 	movi	r3,1364
81118860:	19400536 	bltu	r3,r5,81118878 <_free_r+0x2f8>
81118864:	100ad4ba 	srli	r5,r2,18
81118868:	28c01f44 	addi	r3,r5,125
8111886c:	18c7883a 	add	r3,r3,r3
81118870:	29401f04 	addi	r5,r5,124
81118874:	003f8e06 	br	811186b0 <__reset+0xfb0f86b0>
81118878:	00c03f84 	movi	r3,254
8111887c:	01401f84 	movi	r5,126
81118880:	003f8b06 	br	811186b0 <__reset+0xfb0f86b0>
81118884:	10c00054 	ori	r3,r2,1
81118888:	30c00115 	stw	r3,4(r6)
8111888c:	308d883a 	add	r6,r6,r2
81118890:	30800015 	stw	r2,0(r6)
81118894:	003f7806 	br	81118678 <__reset+0xfb0f8678>

81118898 <__sfvwrite_r>:
81118898:	30800217 	ldw	r2,8(r6)
8111889c:	10006926 	beq	r2,zero,81118a44 <__sfvwrite_r+0x1ac>
811188a0:	defff404 	addi	sp,sp,-48
811188a4:	de00012e 	bgeu	sp,et,811188ac <__sfvwrite_r+0x14>
811188a8:	003b68fa 	trap	3
811188ac:	28c0030b 	ldhu	r3,12(r5)
811188b0:	dd400715 	stw	r21,28(sp)
811188b4:	dd000615 	stw	r20,24(sp)
811188b8:	dc000215 	stw	r16,8(sp)
811188bc:	dfc00b15 	stw	ra,44(sp)
811188c0:	df000a15 	stw	fp,40(sp)
811188c4:	ddc00915 	stw	r23,36(sp)
811188c8:	dd800815 	stw	r22,32(sp)
811188cc:	dcc00515 	stw	r19,20(sp)
811188d0:	dc800415 	stw	r18,16(sp)
811188d4:	dc400315 	stw	r17,12(sp)
811188d8:	1880020c 	andi	r2,r3,8
811188dc:	2821883a 	mov	r16,r5
811188e0:	202b883a 	mov	r21,r4
811188e4:	3029883a 	mov	r20,r6
811188e8:	10002726 	beq	r2,zero,81118988 <__sfvwrite_r+0xf0>
811188ec:	28800417 	ldw	r2,16(r5)
811188f0:	10002526 	beq	r2,zero,81118988 <__sfvwrite_r+0xf0>
811188f4:	1880008c 	andi	r2,r3,2
811188f8:	a4400017 	ldw	r17,0(r20)
811188fc:	10002a26 	beq	r2,zero,811189a8 <__sfvwrite_r+0x110>
81118900:	05a00034 	movhi	r22,32768
81118904:	0027883a 	mov	r19,zero
81118908:	0025883a 	mov	r18,zero
8111890c:	b5bf0004 	addi	r22,r22,-1024
81118910:	980d883a 	mov	r6,r19
81118914:	a809883a 	mov	r4,r21
81118918:	90004626 	beq	r18,zero,81118a34 <__sfvwrite_r+0x19c>
8111891c:	900f883a 	mov	r7,r18
81118920:	b480022e 	bgeu	r22,r18,8111892c <__sfvwrite_r+0x94>
81118924:	01e00034 	movhi	r7,32768
81118928:	39ff0004 	addi	r7,r7,-1024
8111892c:	80800917 	ldw	r2,36(r16)
81118930:	81400717 	ldw	r5,28(r16)
81118934:	103ee83a 	callr	r2
81118938:	0080570e 	bge	zero,r2,81118a98 <__sfvwrite_r+0x200>
8111893c:	a0c00217 	ldw	r3,8(r20)
81118940:	98a7883a 	add	r19,r19,r2
81118944:	90a5c83a 	sub	r18,r18,r2
81118948:	1885c83a 	sub	r2,r3,r2
8111894c:	a0800215 	stw	r2,8(r20)
81118950:	103fef1e 	bne	r2,zero,81118910 <__reset+0xfb0f8910>
81118954:	0005883a 	mov	r2,zero
81118958:	dfc00b17 	ldw	ra,44(sp)
8111895c:	df000a17 	ldw	fp,40(sp)
81118960:	ddc00917 	ldw	r23,36(sp)
81118964:	dd800817 	ldw	r22,32(sp)
81118968:	dd400717 	ldw	r21,28(sp)
8111896c:	dd000617 	ldw	r20,24(sp)
81118970:	dcc00517 	ldw	r19,20(sp)
81118974:	dc800417 	ldw	r18,16(sp)
81118978:	dc400317 	ldw	r17,12(sp)
8111897c:	dc000217 	ldw	r16,8(sp)
81118980:	dec00c04 	addi	sp,sp,48
81118984:	f800283a 	ret
81118988:	800b883a 	mov	r5,r16
8111898c:	a809883a 	mov	r4,r21
81118990:	11160780 	call	81116078 <__swsetup_r>
81118994:	1000eb1e 	bne	r2,zero,81118d44 <__sfvwrite_r+0x4ac>
81118998:	80c0030b 	ldhu	r3,12(r16)
8111899c:	a4400017 	ldw	r17,0(r20)
811189a0:	1880008c 	andi	r2,r3,2
811189a4:	103fd61e 	bne	r2,zero,81118900 <__reset+0xfb0f8900>
811189a8:	1880004c 	andi	r2,r3,1
811189ac:	10003f1e 	bne	r2,zero,81118aac <__sfvwrite_r+0x214>
811189b0:	0039883a 	mov	fp,zero
811189b4:	0025883a 	mov	r18,zero
811189b8:	90001a26 	beq	r18,zero,81118a24 <__sfvwrite_r+0x18c>
811189bc:	1880800c 	andi	r2,r3,512
811189c0:	84c00217 	ldw	r19,8(r16)
811189c4:	10002126 	beq	r2,zero,81118a4c <__sfvwrite_r+0x1b4>
811189c8:	982f883a 	mov	r23,r19
811189cc:	94c09336 	bltu	r18,r19,81118c1c <__sfvwrite_r+0x384>
811189d0:	1881200c 	andi	r2,r3,1152
811189d4:	10009e1e 	bne	r2,zero,81118c50 <__sfvwrite_r+0x3b8>
811189d8:	81000017 	ldw	r4,0(r16)
811189dc:	b80d883a 	mov	r6,r23
811189e0:	e00b883a 	mov	r5,fp
811189e4:	11193f40 	call	811193f4 <memmove>
811189e8:	80c00217 	ldw	r3,8(r16)
811189ec:	81000017 	ldw	r4,0(r16)
811189f0:	9005883a 	mov	r2,r18
811189f4:	1ce7c83a 	sub	r19,r3,r19
811189f8:	25cf883a 	add	r7,r4,r23
811189fc:	84c00215 	stw	r19,8(r16)
81118a00:	81c00015 	stw	r7,0(r16)
81118a04:	a0c00217 	ldw	r3,8(r20)
81118a08:	e0b9883a 	add	fp,fp,r2
81118a0c:	90a5c83a 	sub	r18,r18,r2
81118a10:	18a7c83a 	sub	r19,r3,r2
81118a14:	a4c00215 	stw	r19,8(r20)
81118a18:	983fce26 	beq	r19,zero,81118954 <__reset+0xfb0f8954>
81118a1c:	80c0030b 	ldhu	r3,12(r16)
81118a20:	903fe61e 	bne	r18,zero,811189bc <__reset+0xfb0f89bc>
81118a24:	8f000017 	ldw	fp,0(r17)
81118a28:	8c800117 	ldw	r18,4(r17)
81118a2c:	8c400204 	addi	r17,r17,8
81118a30:	003fe106 	br	811189b8 <__reset+0xfb0f89b8>
81118a34:	8cc00017 	ldw	r19,0(r17)
81118a38:	8c800117 	ldw	r18,4(r17)
81118a3c:	8c400204 	addi	r17,r17,8
81118a40:	003fb306 	br	81118910 <__reset+0xfb0f8910>
81118a44:	0005883a 	mov	r2,zero
81118a48:	f800283a 	ret
81118a4c:	81000017 	ldw	r4,0(r16)
81118a50:	80800417 	ldw	r2,16(r16)
81118a54:	11005736 	bltu	r2,r4,81118bb4 <__sfvwrite_r+0x31c>
81118a58:	85c00517 	ldw	r23,20(r16)
81118a5c:	95c05536 	bltu	r18,r23,81118bb4 <__sfvwrite_r+0x31c>
81118a60:	00a00034 	movhi	r2,32768
81118a64:	10bfffc4 	addi	r2,r2,-1
81118a68:	9009883a 	mov	r4,r18
81118a6c:	1480012e 	bgeu	r2,r18,81118a74 <__sfvwrite_r+0x1dc>
81118a70:	1009883a 	mov	r4,r2
81118a74:	b80b883a 	mov	r5,r23
81118a78:	1121ae80 	call	81121ae8 <__divsi3>
81118a7c:	15cf383a 	mul	r7,r2,r23
81118a80:	81400717 	ldw	r5,28(r16)
81118a84:	80800917 	ldw	r2,36(r16)
81118a88:	e00d883a 	mov	r6,fp
81118a8c:	a809883a 	mov	r4,r21
81118a90:	103ee83a 	callr	r2
81118a94:	00bfdb16 	blt	zero,r2,81118a04 <__reset+0xfb0f8a04>
81118a98:	8080030b 	ldhu	r2,12(r16)
81118a9c:	10801014 	ori	r2,r2,64
81118aa0:	8080030d 	sth	r2,12(r16)
81118aa4:	00bfffc4 	movi	r2,-1
81118aa8:	003fab06 	br	81118958 <__reset+0xfb0f8958>
81118aac:	0027883a 	mov	r19,zero
81118ab0:	0011883a 	mov	r8,zero
81118ab4:	0039883a 	mov	fp,zero
81118ab8:	0025883a 	mov	r18,zero
81118abc:	90001f26 	beq	r18,zero,81118b3c <__sfvwrite_r+0x2a4>
81118ac0:	40005a26 	beq	r8,zero,81118c2c <__sfvwrite_r+0x394>
81118ac4:	982d883a 	mov	r22,r19
81118ac8:	94c0012e 	bgeu	r18,r19,81118ad0 <__sfvwrite_r+0x238>
81118acc:	902d883a 	mov	r22,r18
81118ad0:	81000017 	ldw	r4,0(r16)
81118ad4:	80800417 	ldw	r2,16(r16)
81118ad8:	b02f883a 	mov	r23,r22
81118adc:	81c00517 	ldw	r7,20(r16)
81118ae0:	1100032e 	bgeu	r2,r4,81118af0 <__sfvwrite_r+0x258>
81118ae4:	80c00217 	ldw	r3,8(r16)
81118ae8:	38c7883a 	add	r3,r7,r3
81118aec:	1d801816 	blt	r3,r22,81118b50 <__sfvwrite_r+0x2b8>
81118af0:	b1c03e16 	blt	r22,r7,81118bec <__sfvwrite_r+0x354>
81118af4:	80800917 	ldw	r2,36(r16)
81118af8:	81400717 	ldw	r5,28(r16)
81118afc:	e00d883a 	mov	r6,fp
81118b00:	da000115 	stw	r8,4(sp)
81118b04:	a809883a 	mov	r4,r21
81118b08:	103ee83a 	callr	r2
81118b0c:	102f883a 	mov	r23,r2
81118b10:	da000117 	ldw	r8,4(sp)
81118b14:	00bfe00e 	bge	zero,r2,81118a98 <__reset+0xfb0f8a98>
81118b18:	9de7c83a 	sub	r19,r19,r23
81118b1c:	98001f26 	beq	r19,zero,81118b9c <__sfvwrite_r+0x304>
81118b20:	a0800217 	ldw	r2,8(r20)
81118b24:	e5f9883a 	add	fp,fp,r23
81118b28:	95e5c83a 	sub	r18,r18,r23
81118b2c:	15efc83a 	sub	r23,r2,r23
81118b30:	a5c00215 	stw	r23,8(r20)
81118b34:	b83f8726 	beq	r23,zero,81118954 <__reset+0xfb0f8954>
81118b38:	903fe11e 	bne	r18,zero,81118ac0 <__reset+0xfb0f8ac0>
81118b3c:	8f000017 	ldw	fp,0(r17)
81118b40:	8c800117 	ldw	r18,4(r17)
81118b44:	0011883a 	mov	r8,zero
81118b48:	8c400204 	addi	r17,r17,8
81118b4c:	003fdb06 	br	81118abc <__reset+0xfb0f8abc>
81118b50:	180d883a 	mov	r6,r3
81118b54:	e00b883a 	mov	r5,fp
81118b58:	da000115 	stw	r8,4(sp)
81118b5c:	d8c00015 	stw	r3,0(sp)
81118b60:	11193f40 	call	811193f4 <memmove>
81118b64:	d8c00017 	ldw	r3,0(sp)
81118b68:	80800017 	ldw	r2,0(r16)
81118b6c:	800b883a 	mov	r5,r16
81118b70:	a809883a 	mov	r4,r21
81118b74:	10c5883a 	add	r2,r2,r3
81118b78:	80800015 	stw	r2,0(r16)
81118b7c:	d8c00015 	stw	r3,0(sp)
81118b80:	1117cec0 	call	81117cec <_fflush_r>
81118b84:	d8c00017 	ldw	r3,0(sp)
81118b88:	da000117 	ldw	r8,4(sp)
81118b8c:	103fc21e 	bne	r2,zero,81118a98 <__reset+0xfb0f8a98>
81118b90:	182f883a 	mov	r23,r3
81118b94:	9de7c83a 	sub	r19,r19,r23
81118b98:	983fe11e 	bne	r19,zero,81118b20 <__reset+0xfb0f8b20>
81118b9c:	800b883a 	mov	r5,r16
81118ba0:	a809883a 	mov	r4,r21
81118ba4:	1117cec0 	call	81117cec <_fflush_r>
81118ba8:	103fbb1e 	bne	r2,zero,81118a98 <__reset+0xfb0f8a98>
81118bac:	0011883a 	mov	r8,zero
81118bb0:	003fdb06 	br	81118b20 <__reset+0xfb0f8b20>
81118bb4:	94c0012e 	bgeu	r18,r19,81118bbc <__sfvwrite_r+0x324>
81118bb8:	9027883a 	mov	r19,r18
81118bbc:	980d883a 	mov	r6,r19
81118bc0:	e00b883a 	mov	r5,fp
81118bc4:	11193f40 	call	811193f4 <memmove>
81118bc8:	80800217 	ldw	r2,8(r16)
81118bcc:	80c00017 	ldw	r3,0(r16)
81118bd0:	14c5c83a 	sub	r2,r2,r19
81118bd4:	1cc7883a 	add	r3,r3,r19
81118bd8:	80800215 	stw	r2,8(r16)
81118bdc:	80c00015 	stw	r3,0(r16)
81118be0:	10004326 	beq	r2,zero,81118cf0 <__sfvwrite_r+0x458>
81118be4:	9805883a 	mov	r2,r19
81118be8:	003f8606 	br	81118a04 <__reset+0xfb0f8a04>
81118bec:	b00d883a 	mov	r6,r22
81118bf0:	e00b883a 	mov	r5,fp
81118bf4:	da000115 	stw	r8,4(sp)
81118bf8:	11193f40 	call	811193f4 <memmove>
81118bfc:	80800217 	ldw	r2,8(r16)
81118c00:	80c00017 	ldw	r3,0(r16)
81118c04:	da000117 	ldw	r8,4(sp)
81118c08:	1585c83a 	sub	r2,r2,r22
81118c0c:	1dad883a 	add	r22,r3,r22
81118c10:	80800215 	stw	r2,8(r16)
81118c14:	85800015 	stw	r22,0(r16)
81118c18:	003fbf06 	br	81118b18 <__reset+0xfb0f8b18>
81118c1c:	81000017 	ldw	r4,0(r16)
81118c20:	9027883a 	mov	r19,r18
81118c24:	902f883a 	mov	r23,r18
81118c28:	003f6c06 	br	811189dc <__reset+0xfb0f89dc>
81118c2c:	900d883a 	mov	r6,r18
81118c30:	01400284 	movi	r5,10
81118c34:	e009883a 	mov	r4,fp
81118c38:	11193100 	call	81119310 <memchr>
81118c3c:	10003e26 	beq	r2,zero,81118d38 <__sfvwrite_r+0x4a0>
81118c40:	10800044 	addi	r2,r2,1
81118c44:	1727c83a 	sub	r19,r2,fp
81118c48:	02000044 	movi	r8,1
81118c4c:	003f9d06 	br	81118ac4 <__reset+0xfb0f8ac4>
81118c50:	80800517 	ldw	r2,20(r16)
81118c54:	81400417 	ldw	r5,16(r16)
81118c58:	81c00017 	ldw	r7,0(r16)
81118c5c:	10a7883a 	add	r19,r2,r2
81118c60:	9885883a 	add	r2,r19,r2
81118c64:	1026d7fa 	srli	r19,r2,31
81118c68:	396dc83a 	sub	r22,r7,r5
81118c6c:	b1000044 	addi	r4,r22,1
81118c70:	9885883a 	add	r2,r19,r2
81118c74:	1027d07a 	srai	r19,r2,1
81118c78:	2485883a 	add	r2,r4,r18
81118c7c:	980d883a 	mov	r6,r19
81118c80:	9880022e 	bgeu	r19,r2,81118c8c <__sfvwrite_r+0x3f4>
81118c84:	1027883a 	mov	r19,r2
81118c88:	100d883a 	mov	r6,r2
81118c8c:	18c1000c 	andi	r3,r3,1024
81118c90:	18001c26 	beq	r3,zero,81118d04 <__sfvwrite_r+0x46c>
81118c94:	300b883a 	mov	r5,r6
81118c98:	a809883a 	mov	r4,r21
81118c9c:	110ee080 	call	8110ee08 <_malloc_r>
81118ca0:	102f883a 	mov	r23,r2
81118ca4:	10002926 	beq	r2,zero,81118d4c <__sfvwrite_r+0x4b4>
81118ca8:	81400417 	ldw	r5,16(r16)
81118cac:	b00d883a 	mov	r6,r22
81118cb0:	1009883a 	mov	r4,r2
81118cb4:	110f61c0 	call	8110f61c <memcpy>
81118cb8:	8080030b 	ldhu	r2,12(r16)
81118cbc:	00fedfc4 	movi	r3,-1153
81118cc0:	10c4703a 	and	r2,r2,r3
81118cc4:	10802014 	ori	r2,r2,128
81118cc8:	8080030d 	sth	r2,12(r16)
81118ccc:	bd89883a 	add	r4,r23,r22
81118cd0:	9d8fc83a 	sub	r7,r19,r22
81118cd4:	85c00415 	stw	r23,16(r16)
81118cd8:	84c00515 	stw	r19,20(r16)
81118cdc:	81000015 	stw	r4,0(r16)
81118ce0:	9027883a 	mov	r19,r18
81118ce4:	81c00215 	stw	r7,8(r16)
81118ce8:	902f883a 	mov	r23,r18
81118cec:	003f3b06 	br	811189dc <__reset+0xfb0f89dc>
81118cf0:	800b883a 	mov	r5,r16
81118cf4:	a809883a 	mov	r4,r21
81118cf8:	1117cec0 	call	81117cec <_fflush_r>
81118cfc:	103fb926 	beq	r2,zero,81118be4 <__reset+0xfb0f8be4>
81118d00:	003f6506 	br	81118a98 <__reset+0xfb0f8a98>
81118d04:	a809883a 	mov	r4,r21
81118d08:	111a78c0 	call	8111a78c <_realloc_r>
81118d0c:	102f883a 	mov	r23,r2
81118d10:	103fee1e 	bne	r2,zero,81118ccc <__reset+0xfb0f8ccc>
81118d14:	81400417 	ldw	r5,16(r16)
81118d18:	a809883a 	mov	r4,r21
81118d1c:	11185800 	call	81118580 <_free_r>
81118d20:	8080030b 	ldhu	r2,12(r16)
81118d24:	00ffdfc4 	movi	r3,-129
81118d28:	1884703a 	and	r2,r3,r2
81118d2c:	00c00304 	movi	r3,12
81118d30:	a8c00015 	stw	r3,0(r21)
81118d34:	003f5906 	br	81118a9c <__reset+0xfb0f8a9c>
81118d38:	94c00044 	addi	r19,r18,1
81118d3c:	02000044 	movi	r8,1
81118d40:	003f6006 	br	81118ac4 <__reset+0xfb0f8ac4>
81118d44:	00bfffc4 	movi	r2,-1
81118d48:	003f0306 	br	81118958 <__reset+0xfb0f8958>
81118d4c:	00800304 	movi	r2,12
81118d50:	a8800015 	stw	r2,0(r21)
81118d54:	8080030b 	ldhu	r2,12(r16)
81118d58:	003f5006 	br	81118a9c <__reset+0xfb0f8a9c>

81118d5c <_fwalk>:
81118d5c:	defff704 	addi	sp,sp,-36
81118d60:	de00012e 	bgeu	sp,et,81118d68 <_fwalk+0xc>
81118d64:	003b68fa 	trap	3
81118d68:	dd000415 	stw	r20,16(sp)
81118d6c:	dfc00815 	stw	ra,32(sp)
81118d70:	ddc00715 	stw	r23,28(sp)
81118d74:	dd800615 	stw	r22,24(sp)
81118d78:	dd400515 	stw	r21,20(sp)
81118d7c:	dcc00315 	stw	r19,12(sp)
81118d80:	dc800215 	stw	r18,8(sp)
81118d84:	dc400115 	stw	r17,4(sp)
81118d88:	dc000015 	stw	r16,0(sp)
81118d8c:	2500b804 	addi	r20,r4,736
81118d90:	a0002326 	beq	r20,zero,81118e20 <_fwalk+0xc4>
81118d94:	282b883a 	mov	r21,r5
81118d98:	002f883a 	mov	r23,zero
81118d9c:	05800044 	movi	r22,1
81118da0:	04ffffc4 	movi	r19,-1
81118da4:	a4400117 	ldw	r17,4(r20)
81118da8:	a4800217 	ldw	r18,8(r20)
81118dac:	8c7fffc4 	addi	r17,r17,-1
81118db0:	88000d16 	blt	r17,zero,81118de8 <_fwalk+0x8c>
81118db4:	94000304 	addi	r16,r18,12
81118db8:	94800384 	addi	r18,r18,14
81118dbc:	8080000b 	ldhu	r2,0(r16)
81118dc0:	8c7fffc4 	addi	r17,r17,-1
81118dc4:	813ffd04 	addi	r4,r16,-12
81118dc8:	b080042e 	bgeu	r22,r2,81118ddc <_fwalk+0x80>
81118dcc:	9080000f 	ldh	r2,0(r18)
81118dd0:	14c00226 	beq	r2,r19,81118ddc <_fwalk+0x80>
81118dd4:	a83ee83a 	callr	r21
81118dd8:	b8aeb03a 	or	r23,r23,r2
81118ddc:	84001a04 	addi	r16,r16,104
81118de0:	94801a04 	addi	r18,r18,104
81118de4:	8cfff51e 	bne	r17,r19,81118dbc <__reset+0xfb0f8dbc>
81118de8:	a5000017 	ldw	r20,0(r20)
81118dec:	a03fed1e 	bne	r20,zero,81118da4 <__reset+0xfb0f8da4>
81118df0:	b805883a 	mov	r2,r23
81118df4:	dfc00817 	ldw	ra,32(sp)
81118df8:	ddc00717 	ldw	r23,28(sp)
81118dfc:	dd800617 	ldw	r22,24(sp)
81118e00:	dd400517 	ldw	r21,20(sp)
81118e04:	dd000417 	ldw	r20,16(sp)
81118e08:	dcc00317 	ldw	r19,12(sp)
81118e0c:	dc800217 	ldw	r18,8(sp)
81118e10:	dc400117 	ldw	r17,4(sp)
81118e14:	dc000017 	ldw	r16,0(sp)
81118e18:	dec00904 	addi	sp,sp,36
81118e1c:	f800283a 	ret
81118e20:	002f883a 	mov	r23,zero
81118e24:	003ff206 	br	81118df0 <__reset+0xfb0f8df0>

81118e28 <_fwalk_reent>:
81118e28:	defff704 	addi	sp,sp,-36
81118e2c:	de00012e 	bgeu	sp,et,81118e34 <_fwalk_reent+0xc>
81118e30:	003b68fa 	trap	3
81118e34:	dd000415 	stw	r20,16(sp)
81118e38:	dfc00815 	stw	ra,32(sp)
81118e3c:	ddc00715 	stw	r23,28(sp)
81118e40:	dd800615 	stw	r22,24(sp)
81118e44:	dd400515 	stw	r21,20(sp)
81118e48:	dcc00315 	stw	r19,12(sp)
81118e4c:	dc800215 	stw	r18,8(sp)
81118e50:	dc400115 	stw	r17,4(sp)
81118e54:	dc000015 	stw	r16,0(sp)
81118e58:	2500b804 	addi	r20,r4,736
81118e5c:	a0002326 	beq	r20,zero,81118eec <_fwalk_reent+0xc4>
81118e60:	282b883a 	mov	r21,r5
81118e64:	2027883a 	mov	r19,r4
81118e68:	002f883a 	mov	r23,zero
81118e6c:	05800044 	movi	r22,1
81118e70:	04bfffc4 	movi	r18,-1
81118e74:	a4400117 	ldw	r17,4(r20)
81118e78:	a4000217 	ldw	r16,8(r20)
81118e7c:	8c7fffc4 	addi	r17,r17,-1
81118e80:	88000c16 	blt	r17,zero,81118eb4 <_fwalk_reent+0x8c>
81118e84:	84000304 	addi	r16,r16,12
81118e88:	8080000b 	ldhu	r2,0(r16)
81118e8c:	8c7fffc4 	addi	r17,r17,-1
81118e90:	817ffd04 	addi	r5,r16,-12
81118e94:	b080052e 	bgeu	r22,r2,81118eac <_fwalk_reent+0x84>
81118e98:	8080008f 	ldh	r2,2(r16)
81118e9c:	9809883a 	mov	r4,r19
81118ea0:	14800226 	beq	r2,r18,81118eac <_fwalk_reent+0x84>
81118ea4:	a83ee83a 	callr	r21
81118ea8:	b8aeb03a 	or	r23,r23,r2
81118eac:	84001a04 	addi	r16,r16,104
81118eb0:	8cbff51e 	bne	r17,r18,81118e88 <__reset+0xfb0f8e88>
81118eb4:	a5000017 	ldw	r20,0(r20)
81118eb8:	a03fee1e 	bne	r20,zero,81118e74 <__reset+0xfb0f8e74>
81118ebc:	b805883a 	mov	r2,r23
81118ec0:	dfc00817 	ldw	ra,32(sp)
81118ec4:	ddc00717 	ldw	r23,28(sp)
81118ec8:	dd800617 	ldw	r22,24(sp)
81118ecc:	dd400517 	ldw	r21,20(sp)
81118ed0:	dd000417 	ldw	r20,16(sp)
81118ed4:	dcc00317 	ldw	r19,12(sp)
81118ed8:	dc800217 	ldw	r18,8(sp)
81118edc:	dc400117 	ldw	r17,4(sp)
81118ee0:	dc000017 	ldw	r16,0(sp)
81118ee4:	dec00904 	addi	sp,sp,36
81118ee8:	f800283a 	ret
81118eec:	002f883a 	mov	r23,zero
81118ef0:	003ff206 	br	81118ebc <__reset+0xfb0f8ebc>

81118ef4 <_isatty_r>:
81118ef4:	defffd04 	addi	sp,sp,-12
81118ef8:	de00012e 	bgeu	sp,et,81118f00 <_isatty_r+0xc>
81118efc:	003b68fa 	trap	3
81118f00:	dc000015 	stw	r16,0(sp)
81118f04:	04204534 	movhi	r16,33044
81118f08:	dc400115 	stw	r17,4(sp)
81118f0c:	84379304 	addi	r16,r16,-8628
81118f10:	2023883a 	mov	r17,r4
81118f14:	2809883a 	mov	r4,r5
81118f18:	dfc00215 	stw	ra,8(sp)
81118f1c:	80000015 	stw	zero,0(r16)
81118f20:	11240640 	call	81124064 <isatty>
81118f24:	00ffffc4 	movi	r3,-1
81118f28:	10c00526 	beq	r2,r3,81118f40 <_isatty_r+0x4c>
81118f2c:	dfc00217 	ldw	ra,8(sp)
81118f30:	dc400117 	ldw	r17,4(sp)
81118f34:	dc000017 	ldw	r16,0(sp)
81118f38:	dec00304 	addi	sp,sp,12
81118f3c:	f800283a 	ret
81118f40:	80c00017 	ldw	r3,0(r16)
81118f44:	183ff926 	beq	r3,zero,81118f2c <__reset+0xfb0f8f2c>
81118f48:	88c00015 	stw	r3,0(r17)
81118f4c:	003ff706 	br	81118f2c <__reset+0xfb0f8f2c>

81118f50 <iswspace>:
81118f50:	00803fc4 	movi	r2,255
81118f54:	11000836 	bltu	r2,r4,81118f78 <iswspace+0x28>
81118f58:	00a04534 	movhi	r2,33044
81118f5c:	10b73104 	addi	r2,r2,-9020
81118f60:	10800017 	ldw	r2,0(r2)
81118f64:	1109883a 	add	r4,r2,r4
81118f68:	20800043 	ldbu	r2,1(r4)
81118f6c:	1080020c 	andi	r2,r2,8
81118f70:	10803fcc 	andi	r2,r2,255
81118f74:	f800283a 	ret
81118f78:	0005883a 	mov	r2,zero
81118f7c:	f800283a 	ret

81118f80 <_setlocale_r>:
81118f80:	30001d26 	beq	r6,zero,81118ff8 <_setlocale_r+0x78>
81118f84:	01604534 	movhi	r5,33044
81118f88:	defffe04 	addi	sp,sp,-8
81118f8c:	296e5104 	addi	r5,r5,-18108
81118f90:	3009883a 	mov	r4,r6
81118f94:	de00012e 	bgeu	sp,et,81118f9c <_setlocale_r+0x1c>
81118f98:	003b68fa 	trap	3
81118f9c:	dc000015 	stw	r16,0(sp)
81118fa0:	dfc00115 	stw	ra,4(sp)
81118fa4:	3021883a 	mov	r16,r6
81118fa8:	111ae440 	call	8111ae44 <strcmp>
81118fac:	1000061e 	bne	r2,zero,81118fc8 <_setlocale_r+0x48>
81118fb0:	00a04534 	movhi	r2,33044
81118fb4:	10ae2004 	addi	r2,r2,-18304
81118fb8:	dfc00117 	ldw	ra,4(sp)
81118fbc:	dc000017 	ldw	r16,0(sp)
81118fc0:	dec00204 	addi	sp,sp,8
81118fc4:	f800283a 	ret
81118fc8:	01604534 	movhi	r5,33044
81118fcc:	296e2004 	addi	r5,r5,-18304
81118fd0:	8009883a 	mov	r4,r16
81118fd4:	111ae440 	call	8111ae44 <strcmp>
81118fd8:	103ff526 	beq	r2,zero,81118fb0 <__reset+0xfb0f8fb0>
81118fdc:	01604534 	movhi	r5,33044
81118fe0:	296e2a04 	addi	r5,r5,-18264
81118fe4:	8009883a 	mov	r4,r16
81118fe8:	111ae440 	call	8111ae44 <strcmp>
81118fec:	103ff026 	beq	r2,zero,81118fb0 <__reset+0xfb0f8fb0>
81118ff0:	0005883a 	mov	r2,zero
81118ff4:	003ff006 	br	81118fb8 <__reset+0xfb0f8fb8>
81118ff8:	00a04534 	movhi	r2,33044
81118ffc:	10ae2004 	addi	r2,r2,-18304
81119000:	f800283a 	ret

81119004 <__locale_charset>:
81119004:	00a04534 	movhi	r2,33044
81119008:	10b21d04 	addi	r2,r2,-14220
8111900c:	f800283a 	ret

81119010 <__locale_mb_cur_max>:
81119010:	00a04534 	movhi	r2,33044
81119014:	10b73604 	addi	r2,r2,-9000
81119018:	10800017 	ldw	r2,0(r2)
8111901c:	f800283a 	ret

81119020 <__locale_msgcharset>:
81119020:	00a04534 	movhi	r2,33044
81119024:	10b21504 	addi	r2,r2,-14252
81119028:	f800283a 	ret

8111902c <__locale_cjk_lang>:
8111902c:	0005883a 	mov	r2,zero
81119030:	f800283a 	ret

81119034 <_localeconv_r>:
81119034:	00a04534 	movhi	r2,33044
81119038:	10b22504 	addi	r2,r2,-14188
8111903c:	f800283a 	ret

81119040 <setlocale>:
81119040:	00a04534 	movhi	r2,33044
81119044:	10b73304 	addi	r2,r2,-9012
81119048:	280d883a 	mov	r6,r5
8111904c:	200b883a 	mov	r5,r4
81119050:	11000017 	ldw	r4,0(r2)
81119054:	1118f801 	jmpi	81118f80 <_setlocale_r>

81119058 <localeconv>:
81119058:	00a04534 	movhi	r2,33044
8111905c:	10b22504 	addi	r2,r2,-14188
81119060:	f800283a 	ret

81119064 <_lseek_r>:
81119064:	defffd04 	addi	sp,sp,-12
81119068:	de00012e 	bgeu	sp,et,81119070 <_lseek_r+0xc>
8111906c:	003b68fa 	trap	3
81119070:	2805883a 	mov	r2,r5
81119074:	dc000015 	stw	r16,0(sp)
81119078:	04204534 	movhi	r16,33044
8111907c:	dc400115 	stw	r17,4(sp)
81119080:	300b883a 	mov	r5,r6
81119084:	84379304 	addi	r16,r16,-8628
81119088:	2023883a 	mov	r17,r4
8111908c:	380d883a 	mov	r6,r7
81119090:	1009883a 	mov	r4,r2
81119094:	dfc00215 	stw	ra,8(sp)
81119098:	80000015 	stw	zero,0(r16)
8111909c:	11241540 	call	81124154 <lseek>
811190a0:	00ffffc4 	movi	r3,-1
811190a4:	10c00526 	beq	r2,r3,811190bc <_lseek_r+0x58>
811190a8:	dfc00217 	ldw	ra,8(sp)
811190ac:	dc400117 	ldw	r17,4(sp)
811190b0:	dc000017 	ldw	r16,0(sp)
811190b4:	dec00304 	addi	sp,sp,12
811190b8:	f800283a 	ret
811190bc:	80c00017 	ldw	r3,0(r16)
811190c0:	183ff926 	beq	r3,zero,811190a8 <__reset+0xfb0f90a8>
811190c4:	88c00015 	stw	r3,0(r17)
811190c8:	003ff706 	br	811190a8 <__reset+0xfb0f90a8>

811190cc <_mbrtowc_r>:
811190cc:	defff704 	addi	sp,sp,-36
811190d0:	00a04534 	movhi	r2,33044
811190d4:	de00012e 	bgeu	sp,et,811190dc <_mbrtowc_r+0x10>
811190d8:	003b68fa 	trap	3
811190dc:	10b73704 	addi	r2,r2,-8996
811190e0:	dc800715 	stw	r18,28(sp)
811190e4:	dc400615 	stw	r17,24(sp)
811190e8:	dc000515 	stw	r16,20(sp)
811190ec:	dfc00815 	stw	ra,32(sp)
811190f0:	2021883a 	mov	r16,r4
811190f4:	dc400917 	ldw	r17,36(sp)
811190f8:	14800017 	ldw	r18,0(r2)
811190fc:	30001626 	beq	r6,zero,81119158 <_mbrtowc_r+0x8c>
81119100:	d9400215 	stw	r5,8(sp)
81119104:	d9800315 	stw	r6,12(sp)
81119108:	d9c00415 	stw	r7,16(sp)
8111910c:	11190040 	call	81119004 <__locale_charset>
81119110:	d9c00417 	ldw	r7,16(sp)
81119114:	d9800317 	ldw	r6,12(sp)
81119118:	d9400217 	ldw	r5,8(sp)
8111911c:	d8800015 	stw	r2,0(sp)
81119120:	dc400115 	stw	r17,4(sp)
81119124:	8009883a 	mov	r4,r16
81119128:	903ee83a 	callr	r18
8111912c:	00ffffc4 	movi	r3,-1
81119130:	10c0031e 	bne	r2,r3,81119140 <_mbrtowc_r+0x74>
81119134:	88000015 	stw	zero,0(r17)
81119138:	00c02284 	movi	r3,138
8111913c:	80c00015 	stw	r3,0(r16)
81119140:	dfc00817 	ldw	ra,32(sp)
81119144:	dc800717 	ldw	r18,28(sp)
81119148:	dc400617 	ldw	r17,24(sp)
8111914c:	dc000517 	ldw	r16,20(sp)
81119150:	dec00904 	addi	sp,sp,36
81119154:	f800283a 	ret
81119158:	11190040 	call	81119004 <__locale_charset>
8111915c:	01a04534 	movhi	r6,33044
81119160:	31ae2a04 	addi	r6,r6,-18264
81119164:	dc400115 	stw	r17,4(sp)
81119168:	d8800015 	stw	r2,0(sp)
8111916c:	01c00044 	movi	r7,1
81119170:	000b883a 	mov	r5,zero
81119174:	8009883a 	mov	r4,r16
81119178:	903ee83a 	callr	r18
8111917c:	003feb06 	br	8111912c <__reset+0xfb0f912c>

81119180 <mbrtowc>:
81119180:	defff704 	addi	sp,sp,-36
81119184:	00a04534 	movhi	r2,33044
81119188:	de00012e 	bgeu	sp,et,81119190 <mbrtowc+0x10>
8111918c:	003b68fa 	trap	3
81119190:	10b73304 	addi	r2,r2,-9012
81119194:	dc800415 	stw	r18,16(sp)
81119198:	dc400315 	stw	r17,12(sp)
8111919c:	dfc00815 	stw	ra,32(sp)
811191a0:	dd400715 	stw	r21,28(sp)
811191a4:	dd000615 	stw	r20,24(sp)
811191a8:	dcc00515 	stw	r19,20(sp)
811191ac:	dc000215 	stw	r16,8(sp)
811191b0:	3825883a 	mov	r18,r7
811191b4:	14400017 	ldw	r17,0(r2)
811191b8:	28001c26 	beq	r5,zero,8111922c <mbrtowc+0xac>
811191bc:	00a04534 	movhi	r2,33044
811191c0:	10b73704 	addi	r2,r2,-8996
811191c4:	15400017 	ldw	r21,0(r2)
811191c8:	2821883a 	mov	r16,r5
811191cc:	2027883a 	mov	r19,r4
811191d0:	3029883a 	mov	r20,r6
811191d4:	11190040 	call	81119004 <__locale_charset>
811191d8:	d8800015 	stw	r2,0(sp)
811191dc:	dc800115 	stw	r18,4(sp)
811191e0:	a00f883a 	mov	r7,r20
811191e4:	800d883a 	mov	r6,r16
811191e8:	980b883a 	mov	r5,r19
811191ec:	8809883a 	mov	r4,r17
811191f0:	a83ee83a 	callr	r21
811191f4:	00ffffc4 	movi	r3,-1
811191f8:	10c0031e 	bne	r2,r3,81119208 <mbrtowc+0x88>
811191fc:	90000015 	stw	zero,0(r18)
81119200:	00c02284 	movi	r3,138
81119204:	88c00015 	stw	r3,0(r17)
81119208:	dfc00817 	ldw	ra,32(sp)
8111920c:	dd400717 	ldw	r21,28(sp)
81119210:	dd000617 	ldw	r20,24(sp)
81119214:	dcc00517 	ldw	r19,20(sp)
81119218:	dc800417 	ldw	r18,16(sp)
8111921c:	dc400317 	ldw	r17,12(sp)
81119220:	dc000217 	ldw	r16,8(sp)
81119224:	dec00904 	addi	sp,sp,36
81119228:	f800283a 	ret
8111922c:	00a04534 	movhi	r2,33044
81119230:	10b73704 	addi	r2,r2,-8996
81119234:	14000017 	ldw	r16,0(r2)
81119238:	11190040 	call	81119004 <__locale_charset>
8111923c:	01a04534 	movhi	r6,33044
81119240:	31ae2a04 	addi	r6,r6,-18264
81119244:	dc800115 	stw	r18,4(sp)
81119248:	d8800015 	stw	r2,0(sp)
8111924c:	01c00044 	movi	r7,1
81119250:	000b883a 	mov	r5,zero
81119254:	8809883a 	mov	r4,r17
81119258:	803ee83a 	callr	r16
8111925c:	003fe506 	br	811191f4 <__reset+0xfb0f91f4>

81119260 <__ascii_mbtowc>:
81119260:	deffff04 	addi	sp,sp,-4
81119264:	de00012e 	bgeu	sp,et,8111926c <__ascii_mbtowc+0xc>
81119268:	003b68fa 	trap	3
8111926c:	28000826 	beq	r5,zero,81119290 <__ascii_mbtowc+0x30>
81119270:	30000926 	beq	r6,zero,81119298 <__ascii_mbtowc+0x38>
81119274:	38000b26 	beq	r7,zero,811192a4 <__ascii_mbtowc+0x44>
81119278:	30800003 	ldbu	r2,0(r6)
8111927c:	28800015 	stw	r2,0(r5)
81119280:	30800003 	ldbu	r2,0(r6)
81119284:	1004c03a 	cmpne	r2,r2,zero
81119288:	dec00104 	addi	sp,sp,4
8111928c:	f800283a 	ret
81119290:	d80b883a 	mov	r5,sp
81119294:	303ff71e 	bne	r6,zero,81119274 <__reset+0xfb0f9274>
81119298:	0005883a 	mov	r2,zero
8111929c:	dec00104 	addi	sp,sp,4
811192a0:	f800283a 	ret
811192a4:	00bfff84 	movi	r2,-2
811192a8:	003ff706 	br	81119288 <__reset+0xfb0f9288>

811192ac <_mbtowc_r>:
811192ac:	00a04534 	movhi	r2,33044
811192b0:	defff804 	addi	sp,sp,-32
811192b4:	10b73704 	addi	r2,r2,-8996
811192b8:	de00012e 	bgeu	sp,et,811192c0 <_mbtowc_r+0x14>
811192bc:	003b68fa 	trap	3
811192c0:	dfc00715 	stw	ra,28(sp)
811192c4:	dc000615 	stw	r16,24(sp)
811192c8:	14000017 	ldw	r16,0(r2)
811192cc:	d9000215 	stw	r4,8(sp)
811192d0:	d9400315 	stw	r5,12(sp)
811192d4:	d9800415 	stw	r6,16(sp)
811192d8:	d9c00515 	stw	r7,20(sp)
811192dc:	11190040 	call	81119004 <__locale_charset>
811192e0:	d8800015 	stw	r2,0(sp)
811192e4:	d8800817 	ldw	r2,32(sp)
811192e8:	d9c00517 	ldw	r7,20(sp)
811192ec:	d9800417 	ldw	r6,16(sp)
811192f0:	d9400317 	ldw	r5,12(sp)
811192f4:	d9000217 	ldw	r4,8(sp)
811192f8:	d8800115 	stw	r2,4(sp)
811192fc:	803ee83a 	callr	r16
81119300:	dfc00717 	ldw	ra,28(sp)
81119304:	dc000617 	ldw	r16,24(sp)
81119308:	dec00804 	addi	sp,sp,32
8111930c:	f800283a 	ret

81119310 <memchr>:
81119310:	208000cc 	andi	r2,r4,3
81119314:	280f883a 	mov	r7,r5
81119318:	10003426 	beq	r2,zero,811193ec <memchr+0xdc>
8111931c:	30bfffc4 	addi	r2,r6,-1
81119320:	30001a26 	beq	r6,zero,8111938c <memchr+0x7c>
81119324:	20c00003 	ldbu	r3,0(r4)
81119328:	29803fcc 	andi	r6,r5,255
8111932c:	30c0051e 	bne	r6,r3,81119344 <memchr+0x34>
81119330:	00001806 	br	81119394 <memchr+0x84>
81119334:	10001526 	beq	r2,zero,8111938c <memchr+0x7c>
81119338:	20c00003 	ldbu	r3,0(r4)
8111933c:	10bfffc4 	addi	r2,r2,-1
81119340:	30c01426 	beq	r6,r3,81119394 <memchr+0x84>
81119344:	21000044 	addi	r4,r4,1
81119348:	20c000cc 	andi	r3,r4,3
8111934c:	183ff91e 	bne	r3,zero,81119334 <__reset+0xfb0f9334>
81119350:	020000c4 	movi	r8,3
81119354:	40801136 	bltu	r8,r2,8111939c <memchr+0x8c>
81119358:	10000c26 	beq	r2,zero,8111938c <memchr+0x7c>
8111935c:	20c00003 	ldbu	r3,0(r4)
81119360:	29403fcc 	andi	r5,r5,255
81119364:	28c00b26 	beq	r5,r3,81119394 <memchr+0x84>
81119368:	20c00044 	addi	r3,r4,1
8111936c:	39803fcc 	andi	r6,r7,255
81119370:	2089883a 	add	r4,r4,r2
81119374:	00000306 	br	81119384 <memchr+0x74>
81119378:	18c00044 	addi	r3,r3,1
8111937c:	197fffc3 	ldbu	r5,-1(r3)
81119380:	31400526 	beq	r6,r5,81119398 <memchr+0x88>
81119384:	1805883a 	mov	r2,r3
81119388:	20fffb1e 	bne	r4,r3,81119378 <__reset+0xfb0f9378>
8111938c:	0005883a 	mov	r2,zero
81119390:	f800283a 	ret
81119394:	2005883a 	mov	r2,r4
81119398:	f800283a 	ret
8111939c:	28c03fcc 	andi	r3,r5,255
811193a0:	1812923a 	slli	r9,r3,8
811193a4:	02ffbff4 	movhi	r11,65279
811193a8:	02a02074 	movhi	r10,32897
811193ac:	48d2b03a 	or	r9,r9,r3
811193b0:	4806943a 	slli	r3,r9,16
811193b4:	5affbfc4 	addi	r11,r11,-257
811193b8:	52a02004 	addi	r10,r10,-32640
811193bc:	48d2b03a 	or	r9,r9,r3
811193c0:	20c00017 	ldw	r3,0(r4)
811193c4:	48c6f03a 	xor	r3,r9,r3
811193c8:	1acd883a 	add	r6,r3,r11
811193cc:	00c6303a 	nor	r3,zero,r3
811193d0:	30c6703a 	and	r3,r6,r3
811193d4:	1a86703a 	and	r3,r3,r10
811193d8:	183fe01e 	bne	r3,zero,8111935c <__reset+0xfb0f935c>
811193dc:	10bfff04 	addi	r2,r2,-4
811193e0:	21000104 	addi	r4,r4,4
811193e4:	40bff636 	bltu	r8,r2,811193c0 <__reset+0xfb0f93c0>
811193e8:	003fdb06 	br	81119358 <__reset+0xfb0f9358>
811193ec:	3005883a 	mov	r2,r6
811193f0:	003fd706 	br	81119350 <__reset+0xfb0f9350>

811193f4 <memmove>:
811193f4:	2005883a 	mov	r2,r4
811193f8:	29000b2e 	bgeu	r5,r4,81119428 <memmove+0x34>
811193fc:	298f883a 	add	r7,r5,r6
81119400:	21c0092e 	bgeu	r4,r7,81119428 <memmove+0x34>
81119404:	2187883a 	add	r3,r4,r6
81119408:	198bc83a 	sub	r5,r3,r6
8111940c:	30004826 	beq	r6,zero,81119530 <memmove+0x13c>
81119410:	39ffffc4 	addi	r7,r7,-1
81119414:	39000003 	ldbu	r4,0(r7)
81119418:	18ffffc4 	addi	r3,r3,-1
8111941c:	19000005 	stb	r4,0(r3)
81119420:	28fffb1e 	bne	r5,r3,81119410 <__reset+0xfb0f9410>
81119424:	f800283a 	ret
81119428:	00c003c4 	movi	r3,15
8111942c:	1980412e 	bgeu	r3,r6,81119534 <memmove+0x140>
81119430:	2886b03a 	or	r3,r5,r2
81119434:	18c000cc 	andi	r3,r3,3
81119438:	1800401e 	bne	r3,zero,8111953c <memmove+0x148>
8111943c:	33fffc04 	addi	r15,r6,-16
81119440:	781ed13a 	srli	r15,r15,4
81119444:	28c00104 	addi	r3,r5,4
81119448:	13400104 	addi	r13,r2,4
8111944c:	781c913a 	slli	r14,r15,4
81119450:	2b000204 	addi	r12,r5,8
81119454:	12c00204 	addi	r11,r2,8
81119458:	73800504 	addi	r14,r14,20
8111945c:	2a800304 	addi	r10,r5,12
81119460:	12400304 	addi	r9,r2,12
81119464:	2b9d883a 	add	r14,r5,r14
81119468:	2811883a 	mov	r8,r5
8111946c:	100f883a 	mov	r7,r2
81119470:	41000017 	ldw	r4,0(r8)
81119474:	39c00404 	addi	r7,r7,16
81119478:	18c00404 	addi	r3,r3,16
8111947c:	393ffc15 	stw	r4,-16(r7)
81119480:	193ffc17 	ldw	r4,-16(r3)
81119484:	6b400404 	addi	r13,r13,16
81119488:	5ac00404 	addi	r11,r11,16
8111948c:	693ffc15 	stw	r4,-16(r13)
81119490:	61000017 	ldw	r4,0(r12)
81119494:	4a400404 	addi	r9,r9,16
81119498:	42000404 	addi	r8,r8,16
8111949c:	593ffc15 	stw	r4,-16(r11)
811194a0:	51000017 	ldw	r4,0(r10)
811194a4:	63000404 	addi	r12,r12,16
811194a8:	52800404 	addi	r10,r10,16
811194ac:	493ffc15 	stw	r4,-16(r9)
811194b0:	1bbfef1e 	bne	r3,r14,81119470 <__reset+0xfb0f9470>
811194b4:	79000044 	addi	r4,r15,1
811194b8:	2008913a 	slli	r4,r4,4
811194bc:	328003cc 	andi	r10,r6,15
811194c0:	02c000c4 	movi	r11,3
811194c4:	1107883a 	add	r3,r2,r4
811194c8:	290b883a 	add	r5,r5,r4
811194cc:	5a801e2e 	bgeu	r11,r10,81119548 <memmove+0x154>
811194d0:	1813883a 	mov	r9,r3
811194d4:	2811883a 	mov	r8,r5
811194d8:	500f883a 	mov	r7,r10
811194dc:	41000017 	ldw	r4,0(r8)
811194e0:	4a400104 	addi	r9,r9,4
811194e4:	39ffff04 	addi	r7,r7,-4
811194e8:	493fff15 	stw	r4,-4(r9)
811194ec:	42000104 	addi	r8,r8,4
811194f0:	59fffa36 	bltu	r11,r7,811194dc <__reset+0xfb0f94dc>
811194f4:	513fff04 	addi	r4,r10,-4
811194f8:	2008d0ba 	srli	r4,r4,2
811194fc:	318000cc 	andi	r6,r6,3
81119500:	21000044 	addi	r4,r4,1
81119504:	2109883a 	add	r4,r4,r4
81119508:	2109883a 	add	r4,r4,r4
8111950c:	1907883a 	add	r3,r3,r4
81119510:	290b883a 	add	r5,r5,r4
81119514:	30000b26 	beq	r6,zero,81119544 <memmove+0x150>
81119518:	198d883a 	add	r6,r3,r6
8111951c:	29c00003 	ldbu	r7,0(r5)
81119520:	18c00044 	addi	r3,r3,1
81119524:	29400044 	addi	r5,r5,1
81119528:	19ffffc5 	stb	r7,-1(r3)
8111952c:	19bffb1e 	bne	r3,r6,8111951c <__reset+0xfb0f951c>
81119530:	f800283a 	ret
81119534:	1007883a 	mov	r3,r2
81119538:	003ff606 	br	81119514 <__reset+0xfb0f9514>
8111953c:	1007883a 	mov	r3,r2
81119540:	003ff506 	br	81119518 <__reset+0xfb0f9518>
81119544:	f800283a 	ret
81119548:	500d883a 	mov	r6,r10
8111954c:	003ff106 	br	81119514 <__reset+0xfb0f9514>

81119550 <_Balloc>:
81119550:	defffc04 	addi	sp,sp,-16
81119554:	de00012e 	bgeu	sp,et,8111955c <_Balloc+0xc>
81119558:	003b68fa 	trap	3
8111955c:	20801317 	ldw	r2,76(r4)
81119560:	dc400115 	stw	r17,4(sp)
81119564:	dc000015 	stw	r16,0(sp)
81119568:	dfc00315 	stw	ra,12(sp)
8111956c:	dc800215 	stw	r18,8(sp)
81119570:	2023883a 	mov	r17,r4
81119574:	2821883a 	mov	r16,r5
81119578:	10000f26 	beq	r2,zero,811195b8 <_Balloc+0x68>
8111957c:	8407883a 	add	r3,r16,r16
81119580:	18c7883a 	add	r3,r3,r3
81119584:	10c7883a 	add	r3,r2,r3
81119588:	18800017 	ldw	r2,0(r3)
8111958c:	10001126 	beq	r2,zero,811195d4 <_Balloc+0x84>
81119590:	11000017 	ldw	r4,0(r2)
81119594:	19000015 	stw	r4,0(r3)
81119598:	10000415 	stw	zero,16(r2)
8111959c:	10000315 	stw	zero,12(r2)
811195a0:	dfc00317 	ldw	ra,12(sp)
811195a4:	dc800217 	ldw	r18,8(sp)
811195a8:	dc400117 	ldw	r17,4(sp)
811195ac:	dc000017 	ldw	r16,0(sp)
811195b0:	dec00404 	addi	sp,sp,16
811195b4:	f800283a 	ret
811195b8:	01800844 	movi	r6,33
811195bc:	01400104 	movi	r5,4
811195c0:	111fd500 	call	8111fd50 <_calloc_r>
811195c4:	88801315 	stw	r2,76(r17)
811195c8:	103fec1e 	bne	r2,zero,8111957c <__reset+0xfb0f957c>
811195cc:	0005883a 	mov	r2,zero
811195d0:	003ff306 	br	811195a0 <__reset+0xfb0f95a0>
811195d4:	01400044 	movi	r5,1
811195d8:	2c24983a 	sll	r18,r5,r16
811195dc:	8809883a 	mov	r4,r17
811195e0:	91800144 	addi	r6,r18,5
811195e4:	318d883a 	add	r6,r6,r6
811195e8:	318d883a 	add	r6,r6,r6
811195ec:	111fd500 	call	8111fd50 <_calloc_r>
811195f0:	103ff626 	beq	r2,zero,811195cc <__reset+0xfb0f95cc>
811195f4:	14000115 	stw	r16,4(r2)
811195f8:	14800215 	stw	r18,8(r2)
811195fc:	003fe606 	br	81119598 <__reset+0xfb0f9598>

81119600 <_Bfree>:
81119600:	28000826 	beq	r5,zero,81119624 <_Bfree+0x24>
81119604:	28c00117 	ldw	r3,4(r5)
81119608:	20801317 	ldw	r2,76(r4)
8111960c:	18c7883a 	add	r3,r3,r3
81119610:	18c7883a 	add	r3,r3,r3
81119614:	10c5883a 	add	r2,r2,r3
81119618:	10c00017 	ldw	r3,0(r2)
8111961c:	28c00015 	stw	r3,0(r5)
81119620:	11400015 	stw	r5,0(r2)
81119624:	f800283a 	ret

81119628 <__multadd>:
81119628:	defffa04 	addi	sp,sp,-24
8111962c:	de00012e 	bgeu	sp,et,81119634 <__multadd+0xc>
81119630:	003b68fa 	trap	3
81119634:	0011883a 	mov	r8,zero
81119638:	dc800315 	stw	r18,12(sp)
8111963c:	dc400215 	stw	r17,8(sp)
81119640:	dc000115 	stw	r16,4(sp)
81119644:	2823883a 	mov	r17,r5
81119648:	2c000417 	ldw	r16,16(r5)
8111964c:	dfc00515 	stw	ra,20(sp)
81119650:	dcc00415 	stw	r19,16(sp)
81119654:	2025883a 	mov	r18,r4
81119658:	29400504 	addi	r5,r5,20
8111965c:	28c00017 	ldw	r3,0(r5)
81119660:	29400104 	addi	r5,r5,4
81119664:	42000044 	addi	r8,r8,1
81119668:	18bfffcc 	andi	r2,r3,65535
8111966c:	1185383a 	mul	r2,r2,r6
81119670:	1806d43a 	srli	r3,r3,16
81119674:	11cf883a 	add	r7,r2,r7
81119678:	3808d43a 	srli	r4,r7,16
8111967c:	1987383a 	mul	r3,r3,r6
81119680:	38bfffcc 	andi	r2,r7,65535
81119684:	1907883a 	add	r3,r3,r4
81119688:	1808943a 	slli	r4,r3,16
8111968c:	180ed43a 	srli	r7,r3,16
81119690:	2085883a 	add	r2,r4,r2
81119694:	28bfff15 	stw	r2,-4(r5)
81119698:	443ff016 	blt	r8,r16,8111965c <__reset+0xfb0f965c>
8111969c:	38000926 	beq	r7,zero,811196c4 <__multadd+0x9c>
811196a0:	88800217 	ldw	r2,8(r17)
811196a4:	80800f0e 	bge	r16,r2,811196e4 <__multadd+0xbc>
811196a8:	80800144 	addi	r2,r16,5
811196ac:	1085883a 	add	r2,r2,r2
811196b0:	1085883a 	add	r2,r2,r2
811196b4:	8885883a 	add	r2,r17,r2
811196b8:	11c00015 	stw	r7,0(r2)
811196bc:	84000044 	addi	r16,r16,1
811196c0:	8c000415 	stw	r16,16(r17)
811196c4:	8805883a 	mov	r2,r17
811196c8:	dfc00517 	ldw	ra,20(sp)
811196cc:	dcc00417 	ldw	r19,16(sp)
811196d0:	dc800317 	ldw	r18,12(sp)
811196d4:	dc400217 	ldw	r17,8(sp)
811196d8:	dc000117 	ldw	r16,4(sp)
811196dc:	dec00604 	addi	sp,sp,24
811196e0:	f800283a 	ret
811196e4:	89400117 	ldw	r5,4(r17)
811196e8:	9009883a 	mov	r4,r18
811196ec:	d9c00015 	stw	r7,0(sp)
811196f0:	29400044 	addi	r5,r5,1
811196f4:	11195500 	call	81119550 <_Balloc>
811196f8:	89800417 	ldw	r6,16(r17)
811196fc:	89400304 	addi	r5,r17,12
81119700:	11000304 	addi	r4,r2,12
81119704:	31800084 	addi	r6,r6,2
81119708:	318d883a 	add	r6,r6,r6
8111970c:	318d883a 	add	r6,r6,r6
81119710:	1027883a 	mov	r19,r2
81119714:	110f61c0 	call	8110f61c <memcpy>
81119718:	d9c00017 	ldw	r7,0(sp)
8111971c:	88000a26 	beq	r17,zero,81119748 <__multadd+0x120>
81119720:	88c00117 	ldw	r3,4(r17)
81119724:	90801317 	ldw	r2,76(r18)
81119728:	18c7883a 	add	r3,r3,r3
8111972c:	18c7883a 	add	r3,r3,r3
81119730:	10c5883a 	add	r2,r2,r3
81119734:	10c00017 	ldw	r3,0(r2)
81119738:	88c00015 	stw	r3,0(r17)
8111973c:	14400015 	stw	r17,0(r2)
81119740:	9823883a 	mov	r17,r19
81119744:	003fd806 	br	811196a8 <__reset+0xfb0f96a8>
81119748:	9823883a 	mov	r17,r19
8111974c:	003fd606 	br	811196a8 <__reset+0xfb0f96a8>

81119750 <__s2b>:
81119750:	defff904 	addi	sp,sp,-28
81119754:	de00012e 	bgeu	sp,et,8111975c <__s2b+0xc>
81119758:	003b68fa 	trap	3
8111975c:	dc400115 	stw	r17,4(sp)
81119760:	dc000015 	stw	r16,0(sp)
81119764:	2023883a 	mov	r17,r4
81119768:	2821883a 	mov	r16,r5
8111976c:	39000204 	addi	r4,r7,8
81119770:	01400244 	movi	r5,9
81119774:	dcc00315 	stw	r19,12(sp)
81119778:	dc800215 	stw	r18,8(sp)
8111977c:	dfc00615 	stw	ra,24(sp)
81119780:	dd400515 	stw	r21,20(sp)
81119784:	dd000415 	stw	r20,16(sp)
81119788:	3825883a 	mov	r18,r7
8111978c:	3027883a 	mov	r19,r6
81119790:	1121ae80 	call	81121ae8 <__divsi3>
81119794:	00c00044 	movi	r3,1
81119798:	000b883a 	mov	r5,zero
8111979c:	1880030e 	bge	r3,r2,811197ac <__s2b+0x5c>
811197a0:	18c7883a 	add	r3,r3,r3
811197a4:	29400044 	addi	r5,r5,1
811197a8:	18bffd16 	blt	r3,r2,811197a0 <__reset+0xfb0f97a0>
811197ac:	8809883a 	mov	r4,r17
811197b0:	11195500 	call	81119550 <_Balloc>
811197b4:	d8c00717 	ldw	r3,28(sp)
811197b8:	10c00515 	stw	r3,20(r2)
811197bc:	00c00044 	movi	r3,1
811197c0:	10c00415 	stw	r3,16(r2)
811197c4:	00c00244 	movi	r3,9
811197c8:	1cc0210e 	bge	r3,r19,81119850 <__s2b+0x100>
811197cc:	80eb883a 	add	r21,r16,r3
811197d0:	a829883a 	mov	r20,r21
811197d4:	84e1883a 	add	r16,r16,r19
811197d8:	a1c00007 	ldb	r7,0(r20)
811197dc:	01800284 	movi	r6,10
811197e0:	a5000044 	addi	r20,r20,1
811197e4:	100b883a 	mov	r5,r2
811197e8:	39fff404 	addi	r7,r7,-48
811197ec:	8809883a 	mov	r4,r17
811197f0:	11196280 	call	81119628 <__multadd>
811197f4:	a43ff81e 	bne	r20,r16,811197d8 <__reset+0xfb0f97d8>
811197f8:	ace1883a 	add	r16,r21,r19
811197fc:	843ffe04 	addi	r16,r16,-8
81119800:	9c800a0e 	bge	r19,r18,8111982c <__s2b+0xdc>
81119804:	94e5c83a 	sub	r18,r18,r19
81119808:	84a5883a 	add	r18,r16,r18
8111980c:	81c00007 	ldb	r7,0(r16)
81119810:	01800284 	movi	r6,10
81119814:	84000044 	addi	r16,r16,1
81119818:	100b883a 	mov	r5,r2
8111981c:	39fff404 	addi	r7,r7,-48
81119820:	8809883a 	mov	r4,r17
81119824:	11196280 	call	81119628 <__multadd>
81119828:	84bff81e 	bne	r16,r18,8111980c <__reset+0xfb0f980c>
8111982c:	dfc00617 	ldw	ra,24(sp)
81119830:	dd400517 	ldw	r21,20(sp)
81119834:	dd000417 	ldw	r20,16(sp)
81119838:	dcc00317 	ldw	r19,12(sp)
8111983c:	dc800217 	ldw	r18,8(sp)
81119840:	dc400117 	ldw	r17,4(sp)
81119844:	dc000017 	ldw	r16,0(sp)
81119848:	dec00704 	addi	sp,sp,28
8111984c:	f800283a 	ret
81119850:	84000284 	addi	r16,r16,10
81119854:	1827883a 	mov	r19,r3
81119858:	003fe906 	br	81119800 <__reset+0xfb0f9800>

8111985c <__hi0bits>:
8111985c:	20bfffec 	andhi	r2,r4,65535
81119860:	1000141e 	bne	r2,zero,811198b4 <__hi0bits+0x58>
81119864:	2008943a 	slli	r4,r4,16
81119868:	00800404 	movi	r2,16
8111986c:	20ffc02c 	andhi	r3,r4,65280
81119870:	1800021e 	bne	r3,zero,8111987c <__hi0bits+0x20>
81119874:	2008923a 	slli	r4,r4,8
81119878:	10800204 	addi	r2,r2,8
8111987c:	20fc002c 	andhi	r3,r4,61440
81119880:	1800021e 	bne	r3,zero,8111988c <__hi0bits+0x30>
81119884:	2008913a 	slli	r4,r4,4
81119888:	10800104 	addi	r2,r2,4
8111988c:	20f0002c 	andhi	r3,r4,49152
81119890:	1800031e 	bne	r3,zero,811198a0 <__hi0bits+0x44>
81119894:	2109883a 	add	r4,r4,r4
81119898:	10800084 	addi	r2,r2,2
8111989c:	2109883a 	add	r4,r4,r4
811198a0:	20000316 	blt	r4,zero,811198b0 <__hi0bits+0x54>
811198a4:	2110002c 	andhi	r4,r4,16384
811198a8:	2000041e 	bne	r4,zero,811198bc <__hi0bits+0x60>
811198ac:	00800804 	movi	r2,32
811198b0:	f800283a 	ret
811198b4:	0005883a 	mov	r2,zero
811198b8:	003fec06 	br	8111986c <__reset+0xfb0f986c>
811198bc:	10800044 	addi	r2,r2,1
811198c0:	f800283a 	ret

811198c4 <__lo0bits>:
811198c4:	20c00017 	ldw	r3,0(r4)
811198c8:	188001cc 	andi	r2,r3,7
811198cc:	10000826 	beq	r2,zero,811198f0 <__lo0bits+0x2c>
811198d0:	1880004c 	andi	r2,r3,1
811198d4:	1000211e 	bne	r2,zero,8111995c <__lo0bits+0x98>
811198d8:	1880008c 	andi	r2,r3,2
811198dc:	1000211e 	bne	r2,zero,81119964 <__lo0bits+0xa0>
811198e0:	1806d0ba 	srli	r3,r3,2
811198e4:	00800084 	movi	r2,2
811198e8:	20c00015 	stw	r3,0(r4)
811198ec:	f800283a 	ret
811198f0:	18bfffcc 	andi	r2,r3,65535
811198f4:	10001326 	beq	r2,zero,81119944 <__lo0bits+0x80>
811198f8:	0005883a 	mov	r2,zero
811198fc:	19403fcc 	andi	r5,r3,255
81119900:	2800021e 	bne	r5,zero,8111990c <__lo0bits+0x48>
81119904:	1806d23a 	srli	r3,r3,8
81119908:	10800204 	addi	r2,r2,8
8111990c:	194003cc 	andi	r5,r3,15
81119910:	2800021e 	bne	r5,zero,8111991c <__lo0bits+0x58>
81119914:	1806d13a 	srli	r3,r3,4
81119918:	10800104 	addi	r2,r2,4
8111991c:	194000cc 	andi	r5,r3,3
81119920:	2800021e 	bne	r5,zero,8111992c <__lo0bits+0x68>
81119924:	1806d0ba 	srli	r3,r3,2
81119928:	10800084 	addi	r2,r2,2
8111992c:	1940004c 	andi	r5,r3,1
81119930:	2800081e 	bne	r5,zero,81119954 <__lo0bits+0x90>
81119934:	1806d07a 	srli	r3,r3,1
81119938:	1800051e 	bne	r3,zero,81119950 <__lo0bits+0x8c>
8111993c:	00800804 	movi	r2,32
81119940:	f800283a 	ret
81119944:	1806d43a 	srli	r3,r3,16
81119948:	00800404 	movi	r2,16
8111994c:	003feb06 	br	811198fc <__reset+0xfb0f98fc>
81119950:	10800044 	addi	r2,r2,1
81119954:	20c00015 	stw	r3,0(r4)
81119958:	f800283a 	ret
8111995c:	0005883a 	mov	r2,zero
81119960:	f800283a 	ret
81119964:	1806d07a 	srli	r3,r3,1
81119968:	00800044 	movi	r2,1
8111996c:	20c00015 	stw	r3,0(r4)
81119970:	f800283a 	ret

81119974 <__i2b>:
81119974:	defffd04 	addi	sp,sp,-12
81119978:	de00012e 	bgeu	sp,et,81119980 <__i2b+0xc>
8111997c:	003b68fa 	trap	3
81119980:	dc000015 	stw	r16,0(sp)
81119984:	04000044 	movi	r16,1
81119988:	dc400115 	stw	r17,4(sp)
8111998c:	2823883a 	mov	r17,r5
81119990:	800b883a 	mov	r5,r16
81119994:	dfc00215 	stw	ra,8(sp)
81119998:	11195500 	call	81119550 <_Balloc>
8111999c:	14400515 	stw	r17,20(r2)
811199a0:	14000415 	stw	r16,16(r2)
811199a4:	dfc00217 	ldw	ra,8(sp)
811199a8:	dc400117 	ldw	r17,4(sp)
811199ac:	dc000017 	ldw	r16,0(sp)
811199b0:	dec00304 	addi	sp,sp,12
811199b4:	f800283a 	ret

811199b8 <__multiply>:
811199b8:	defffa04 	addi	sp,sp,-24
811199bc:	de00012e 	bgeu	sp,et,811199c4 <__multiply+0xc>
811199c0:	003b68fa 	trap	3
811199c4:	dcc00315 	stw	r19,12(sp)
811199c8:	dc800215 	stw	r18,8(sp)
811199cc:	34c00417 	ldw	r19,16(r6)
811199d0:	2c800417 	ldw	r18,16(r5)
811199d4:	dd000415 	stw	r20,16(sp)
811199d8:	dc400115 	stw	r17,4(sp)
811199dc:	dfc00515 	stw	ra,20(sp)
811199e0:	dc000015 	stw	r16,0(sp)
811199e4:	2829883a 	mov	r20,r5
811199e8:	3023883a 	mov	r17,r6
811199ec:	94c0050e 	bge	r18,r19,81119a04 <__multiply+0x4c>
811199f0:	9007883a 	mov	r3,r18
811199f4:	3029883a 	mov	r20,r6
811199f8:	9825883a 	mov	r18,r19
811199fc:	2823883a 	mov	r17,r5
81119a00:	1827883a 	mov	r19,r3
81119a04:	a0800217 	ldw	r2,8(r20)
81119a08:	94e1883a 	add	r16,r18,r19
81119a0c:	a1400117 	ldw	r5,4(r20)
81119a10:	1400010e 	bge	r2,r16,81119a18 <__multiply+0x60>
81119a14:	29400044 	addi	r5,r5,1
81119a18:	11195500 	call	81119550 <_Balloc>
81119a1c:	8415883a 	add	r10,r16,r16
81119a20:	12c00504 	addi	r11,r2,20
81119a24:	5295883a 	add	r10,r10,r10
81119a28:	5a95883a 	add	r10,r11,r10
81119a2c:	5807883a 	mov	r3,r11
81119a30:	5a80032e 	bgeu	r11,r10,81119a40 <__multiply+0x88>
81119a34:	18000015 	stw	zero,0(r3)
81119a38:	18c00104 	addi	r3,r3,4
81119a3c:	1abffd36 	bltu	r3,r10,81119a34 <__reset+0xfb0f9a34>
81119a40:	9ce7883a 	add	r19,r19,r19
81119a44:	94a5883a 	add	r18,r18,r18
81119a48:	89800504 	addi	r6,r17,20
81119a4c:	9ce7883a 	add	r19,r19,r19
81119a50:	a3400504 	addi	r13,r20,20
81119a54:	94a5883a 	add	r18,r18,r18
81119a58:	34d9883a 	add	r12,r6,r19
81119a5c:	6c93883a 	add	r9,r13,r18
81119a60:	3300422e 	bgeu	r6,r12,81119b6c <__multiply+0x1b4>
81119a64:	37c00017 	ldw	ra,0(r6)
81119a68:	fbffffcc 	andi	r15,ra,65535
81119a6c:	78001b26 	beq	r15,zero,81119adc <__multiply+0x124>
81119a70:	5811883a 	mov	r8,r11
81119a74:	681d883a 	mov	r14,r13
81119a78:	000f883a 	mov	r7,zero
81119a7c:	71000017 	ldw	r4,0(r14)
81119a80:	40c00017 	ldw	r3,0(r8)
81119a84:	73800104 	addi	r14,r14,4
81119a88:	217fffcc 	andi	r5,r4,65535
81119a8c:	2bcb383a 	mul	r5,r5,r15
81119a90:	2008d43a 	srli	r4,r4,16
81119a94:	1c7fffcc 	andi	r17,r3,65535
81119a98:	2c4b883a 	add	r5,r5,r17
81119a9c:	29cb883a 	add	r5,r5,r7
81119aa0:	23c9383a 	mul	r4,r4,r15
81119aa4:	1806d43a 	srli	r3,r3,16
81119aa8:	280ed43a 	srli	r7,r5,16
81119aac:	297fffcc 	andi	r5,r5,65535
81119ab0:	20c7883a 	add	r3,r4,r3
81119ab4:	19c7883a 	add	r3,r3,r7
81119ab8:	1808943a 	slli	r4,r3,16
81119abc:	4023883a 	mov	r17,r8
81119ac0:	180ed43a 	srli	r7,r3,16
81119ac4:	214ab03a 	or	r5,r4,r5
81119ac8:	41400015 	stw	r5,0(r8)
81119acc:	42000104 	addi	r8,r8,4
81119ad0:	727fea36 	bltu	r14,r9,81119a7c <__reset+0xfb0f9a7c>
81119ad4:	89c00115 	stw	r7,4(r17)
81119ad8:	37c00017 	ldw	ra,0(r6)
81119adc:	f83ed43a 	srli	ra,ra,16
81119ae0:	f8001f26 	beq	ra,zero,81119b60 <__multiply+0x1a8>
81119ae4:	58c00017 	ldw	r3,0(r11)
81119ae8:	681d883a 	mov	r14,r13
81119aec:	581f883a 	mov	r15,r11
81119af0:	1811883a 	mov	r8,r3
81119af4:	5825883a 	mov	r18,r11
81119af8:	000f883a 	mov	r7,zero
81119afc:	00000106 	br	81119b04 <__multiply+0x14c>
81119b00:	8825883a 	mov	r18,r17
81119b04:	7140000b 	ldhu	r5,0(r14)
81119b08:	4010d43a 	srli	r8,r8,16
81119b0c:	193fffcc 	andi	r4,r3,65535
81119b10:	2fcb383a 	mul	r5,r5,ra
81119b14:	7bc00104 	addi	r15,r15,4
81119b18:	73800104 	addi	r14,r14,4
81119b1c:	2a0b883a 	add	r5,r5,r8
81119b20:	29cb883a 	add	r5,r5,r7
81119b24:	2806943a 	slli	r3,r5,16
81119b28:	94400104 	addi	r17,r18,4
81119b2c:	280ad43a 	srli	r5,r5,16
81119b30:	1908b03a 	or	r4,r3,r4
81119b34:	793fff15 	stw	r4,-4(r15)
81119b38:	70ffff17 	ldw	r3,-4(r14)
81119b3c:	8a000017 	ldw	r8,0(r17)
81119b40:	1806d43a 	srli	r3,r3,16
81119b44:	413fffcc 	andi	r4,r8,65535
81119b48:	1fc7383a 	mul	r3,r3,ra
81119b4c:	1907883a 	add	r3,r3,r4
81119b50:	1947883a 	add	r3,r3,r5
81119b54:	180ed43a 	srli	r7,r3,16
81119b58:	727fe936 	bltu	r14,r9,81119b00 <__reset+0xfb0f9b00>
81119b5c:	90c00115 	stw	r3,4(r18)
81119b60:	31800104 	addi	r6,r6,4
81119b64:	5ac00104 	addi	r11,r11,4
81119b68:	333fbe36 	bltu	r6,r12,81119a64 <__reset+0xfb0f9a64>
81119b6c:	0400090e 	bge	zero,r16,81119b94 <__multiply+0x1dc>
81119b70:	50ffff17 	ldw	r3,-4(r10)
81119b74:	52bfff04 	addi	r10,r10,-4
81119b78:	18000326 	beq	r3,zero,81119b88 <__multiply+0x1d0>
81119b7c:	00000506 	br	81119b94 <__multiply+0x1dc>
81119b80:	50c00017 	ldw	r3,0(r10)
81119b84:	1800031e 	bne	r3,zero,81119b94 <__multiply+0x1dc>
81119b88:	843fffc4 	addi	r16,r16,-1
81119b8c:	52bfff04 	addi	r10,r10,-4
81119b90:	803ffb1e 	bne	r16,zero,81119b80 <__reset+0xfb0f9b80>
81119b94:	14000415 	stw	r16,16(r2)
81119b98:	dfc00517 	ldw	ra,20(sp)
81119b9c:	dd000417 	ldw	r20,16(sp)
81119ba0:	dcc00317 	ldw	r19,12(sp)
81119ba4:	dc800217 	ldw	r18,8(sp)
81119ba8:	dc400117 	ldw	r17,4(sp)
81119bac:	dc000017 	ldw	r16,0(sp)
81119bb0:	dec00604 	addi	sp,sp,24
81119bb4:	f800283a 	ret

81119bb8 <__pow5mult>:
81119bb8:	defffa04 	addi	sp,sp,-24
81119bbc:	de00012e 	bgeu	sp,et,81119bc4 <__pow5mult+0xc>
81119bc0:	003b68fa 	trap	3
81119bc4:	308000cc 	andi	r2,r6,3
81119bc8:	dcc00315 	stw	r19,12(sp)
81119bcc:	dc000015 	stw	r16,0(sp)
81119bd0:	dfc00515 	stw	ra,20(sp)
81119bd4:	dd000415 	stw	r20,16(sp)
81119bd8:	dc800215 	stw	r18,8(sp)
81119bdc:	dc400115 	stw	r17,4(sp)
81119be0:	3021883a 	mov	r16,r6
81119be4:	2027883a 	mov	r19,r4
81119be8:	10002f1e 	bne	r2,zero,81119ca8 <__pow5mult+0xf0>
81119bec:	2825883a 	mov	r18,r5
81119bf0:	8021d0ba 	srai	r16,r16,2
81119bf4:	80001a26 	beq	r16,zero,81119c60 <__pow5mult+0xa8>
81119bf8:	9c401217 	ldw	r17,72(r19)
81119bfc:	8800061e 	bne	r17,zero,81119c18 <__pow5mult+0x60>
81119c00:	00003406 	br	81119cd4 <__pow5mult+0x11c>
81119c04:	8021d07a 	srai	r16,r16,1
81119c08:	80001526 	beq	r16,zero,81119c60 <__pow5mult+0xa8>
81119c0c:	88800017 	ldw	r2,0(r17)
81119c10:	10001c26 	beq	r2,zero,81119c84 <__pow5mult+0xcc>
81119c14:	1023883a 	mov	r17,r2
81119c18:	8080004c 	andi	r2,r16,1
81119c1c:	103ff926 	beq	r2,zero,81119c04 <__reset+0xfb0f9c04>
81119c20:	880d883a 	mov	r6,r17
81119c24:	900b883a 	mov	r5,r18
81119c28:	9809883a 	mov	r4,r19
81119c2c:	11199b80 	call	811199b8 <__multiply>
81119c30:	90001b26 	beq	r18,zero,81119ca0 <__pow5mult+0xe8>
81119c34:	91000117 	ldw	r4,4(r18)
81119c38:	98c01317 	ldw	r3,76(r19)
81119c3c:	8021d07a 	srai	r16,r16,1
81119c40:	2109883a 	add	r4,r4,r4
81119c44:	2109883a 	add	r4,r4,r4
81119c48:	1907883a 	add	r3,r3,r4
81119c4c:	19000017 	ldw	r4,0(r3)
81119c50:	91000015 	stw	r4,0(r18)
81119c54:	1c800015 	stw	r18,0(r3)
81119c58:	1025883a 	mov	r18,r2
81119c5c:	803feb1e 	bne	r16,zero,81119c0c <__reset+0xfb0f9c0c>
81119c60:	9005883a 	mov	r2,r18
81119c64:	dfc00517 	ldw	ra,20(sp)
81119c68:	dd000417 	ldw	r20,16(sp)
81119c6c:	dcc00317 	ldw	r19,12(sp)
81119c70:	dc800217 	ldw	r18,8(sp)
81119c74:	dc400117 	ldw	r17,4(sp)
81119c78:	dc000017 	ldw	r16,0(sp)
81119c7c:	dec00604 	addi	sp,sp,24
81119c80:	f800283a 	ret
81119c84:	880d883a 	mov	r6,r17
81119c88:	880b883a 	mov	r5,r17
81119c8c:	9809883a 	mov	r4,r19
81119c90:	11199b80 	call	811199b8 <__multiply>
81119c94:	88800015 	stw	r2,0(r17)
81119c98:	10000015 	stw	zero,0(r2)
81119c9c:	003fdd06 	br	81119c14 <__reset+0xfb0f9c14>
81119ca0:	1025883a 	mov	r18,r2
81119ca4:	003fd706 	br	81119c04 <__reset+0xfb0f9c04>
81119ca8:	10bfffc4 	addi	r2,r2,-1
81119cac:	1085883a 	add	r2,r2,r2
81119cb0:	00e04534 	movhi	r3,33044
81119cb4:	18ee5404 	addi	r3,r3,-18096
81119cb8:	1085883a 	add	r2,r2,r2
81119cbc:	1885883a 	add	r2,r3,r2
81119cc0:	11800017 	ldw	r6,0(r2)
81119cc4:	000f883a 	mov	r7,zero
81119cc8:	11196280 	call	81119628 <__multadd>
81119ccc:	1025883a 	mov	r18,r2
81119cd0:	003fc706 	br	81119bf0 <__reset+0xfb0f9bf0>
81119cd4:	05000044 	movi	r20,1
81119cd8:	a00b883a 	mov	r5,r20
81119cdc:	9809883a 	mov	r4,r19
81119ce0:	11195500 	call	81119550 <_Balloc>
81119ce4:	1023883a 	mov	r17,r2
81119ce8:	00809c44 	movi	r2,625
81119cec:	88800515 	stw	r2,20(r17)
81119cf0:	8d000415 	stw	r20,16(r17)
81119cf4:	9c401215 	stw	r17,72(r19)
81119cf8:	88000015 	stw	zero,0(r17)
81119cfc:	003fc606 	br	81119c18 <__reset+0xfb0f9c18>

81119d00 <__lshift>:
81119d00:	defff904 	addi	sp,sp,-28
81119d04:	de00012e 	bgeu	sp,et,81119d0c <__lshift+0xc>
81119d08:	003b68fa 	trap	3
81119d0c:	dd400515 	stw	r21,20(sp)
81119d10:	dcc00315 	stw	r19,12(sp)
81119d14:	302bd17a 	srai	r21,r6,5
81119d18:	2cc00417 	ldw	r19,16(r5)
81119d1c:	28800217 	ldw	r2,8(r5)
81119d20:	dd000415 	stw	r20,16(sp)
81119d24:	ace7883a 	add	r19,r21,r19
81119d28:	dc800215 	stw	r18,8(sp)
81119d2c:	dc400115 	stw	r17,4(sp)
81119d30:	dc000015 	stw	r16,0(sp)
81119d34:	dfc00615 	stw	ra,24(sp)
81119d38:	9c000044 	addi	r16,r19,1
81119d3c:	2823883a 	mov	r17,r5
81119d40:	3029883a 	mov	r20,r6
81119d44:	2025883a 	mov	r18,r4
81119d48:	29400117 	ldw	r5,4(r5)
81119d4c:	1400030e 	bge	r2,r16,81119d5c <__lshift+0x5c>
81119d50:	1085883a 	add	r2,r2,r2
81119d54:	29400044 	addi	r5,r5,1
81119d58:	143ffd16 	blt	r2,r16,81119d50 <__reset+0xfb0f9d50>
81119d5c:	9009883a 	mov	r4,r18
81119d60:	11195500 	call	81119550 <_Balloc>
81119d64:	10c00504 	addi	r3,r2,20
81119d68:	0540070e 	bge	zero,r21,81119d88 <__lshift+0x88>
81119d6c:	ad6b883a 	add	r21,r21,r21
81119d70:	ad6b883a 	add	r21,r21,r21
81119d74:	1809883a 	mov	r4,r3
81119d78:	1d47883a 	add	r3,r3,r21
81119d7c:	20000015 	stw	zero,0(r4)
81119d80:	21000104 	addi	r4,r4,4
81119d84:	193ffd1e 	bne	r3,r4,81119d7c <__reset+0xfb0f9d7c>
81119d88:	8a000417 	ldw	r8,16(r17)
81119d8c:	89000504 	addi	r4,r17,20
81119d90:	a18007cc 	andi	r6,r20,31
81119d94:	4211883a 	add	r8,r8,r8
81119d98:	4211883a 	add	r8,r8,r8
81119d9c:	2211883a 	add	r8,r4,r8
81119da0:	30002326 	beq	r6,zero,81119e30 <__lshift+0x130>
81119da4:	02400804 	movi	r9,32
81119da8:	4993c83a 	sub	r9,r9,r6
81119dac:	000b883a 	mov	r5,zero
81119db0:	21c00017 	ldw	r7,0(r4)
81119db4:	1815883a 	mov	r10,r3
81119db8:	18c00104 	addi	r3,r3,4
81119dbc:	398e983a 	sll	r7,r7,r6
81119dc0:	21000104 	addi	r4,r4,4
81119dc4:	394ab03a 	or	r5,r7,r5
81119dc8:	197fff15 	stw	r5,-4(r3)
81119dcc:	217fff17 	ldw	r5,-4(r4)
81119dd0:	2a4ad83a 	srl	r5,r5,r9
81119dd4:	223ff636 	bltu	r4,r8,81119db0 <__reset+0xfb0f9db0>
81119dd8:	51400115 	stw	r5,4(r10)
81119ddc:	28001a1e 	bne	r5,zero,81119e48 <__lshift+0x148>
81119de0:	843fffc4 	addi	r16,r16,-1
81119de4:	14000415 	stw	r16,16(r2)
81119de8:	88000826 	beq	r17,zero,81119e0c <__lshift+0x10c>
81119dec:	89000117 	ldw	r4,4(r17)
81119df0:	90c01317 	ldw	r3,76(r18)
81119df4:	2109883a 	add	r4,r4,r4
81119df8:	2109883a 	add	r4,r4,r4
81119dfc:	1907883a 	add	r3,r3,r4
81119e00:	19000017 	ldw	r4,0(r3)
81119e04:	89000015 	stw	r4,0(r17)
81119e08:	1c400015 	stw	r17,0(r3)
81119e0c:	dfc00617 	ldw	ra,24(sp)
81119e10:	dd400517 	ldw	r21,20(sp)
81119e14:	dd000417 	ldw	r20,16(sp)
81119e18:	dcc00317 	ldw	r19,12(sp)
81119e1c:	dc800217 	ldw	r18,8(sp)
81119e20:	dc400117 	ldw	r17,4(sp)
81119e24:	dc000017 	ldw	r16,0(sp)
81119e28:	dec00704 	addi	sp,sp,28
81119e2c:	f800283a 	ret
81119e30:	21400017 	ldw	r5,0(r4)
81119e34:	18c00104 	addi	r3,r3,4
81119e38:	21000104 	addi	r4,r4,4
81119e3c:	197fff15 	stw	r5,-4(r3)
81119e40:	223ffb36 	bltu	r4,r8,81119e30 <__reset+0xfb0f9e30>
81119e44:	003fe606 	br	81119de0 <__reset+0xfb0f9de0>
81119e48:	9c000084 	addi	r16,r19,2
81119e4c:	003fe406 	br	81119de0 <__reset+0xfb0f9de0>

81119e50 <__mcmp>:
81119e50:	20800417 	ldw	r2,16(r4)
81119e54:	28c00417 	ldw	r3,16(r5)
81119e58:	10c5c83a 	sub	r2,r2,r3
81119e5c:	1000111e 	bne	r2,zero,81119ea4 <__mcmp+0x54>
81119e60:	18c7883a 	add	r3,r3,r3
81119e64:	18c7883a 	add	r3,r3,r3
81119e68:	21000504 	addi	r4,r4,20
81119e6c:	29400504 	addi	r5,r5,20
81119e70:	20c5883a 	add	r2,r4,r3
81119e74:	28cb883a 	add	r5,r5,r3
81119e78:	00000106 	br	81119e80 <__mcmp+0x30>
81119e7c:	20800a2e 	bgeu	r4,r2,81119ea8 <__mcmp+0x58>
81119e80:	10bfff04 	addi	r2,r2,-4
81119e84:	297fff04 	addi	r5,r5,-4
81119e88:	11800017 	ldw	r6,0(r2)
81119e8c:	28c00017 	ldw	r3,0(r5)
81119e90:	30fffa26 	beq	r6,r3,81119e7c <__reset+0xfb0f9e7c>
81119e94:	30c00236 	bltu	r6,r3,81119ea0 <__mcmp+0x50>
81119e98:	00800044 	movi	r2,1
81119e9c:	f800283a 	ret
81119ea0:	00bfffc4 	movi	r2,-1
81119ea4:	f800283a 	ret
81119ea8:	0005883a 	mov	r2,zero
81119eac:	f800283a 	ret

81119eb0 <__mdiff>:
81119eb0:	defffa04 	addi	sp,sp,-24
81119eb4:	de00012e 	bgeu	sp,et,81119ebc <__mdiff+0xc>
81119eb8:	003b68fa 	trap	3
81119ebc:	28c00417 	ldw	r3,16(r5)
81119ec0:	30800417 	ldw	r2,16(r6)
81119ec4:	dcc00315 	stw	r19,12(sp)
81119ec8:	dc800215 	stw	r18,8(sp)
81119ecc:	dfc00515 	stw	ra,20(sp)
81119ed0:	dd000415 	stw	r20,16(sp)
81119ed4:	dc400115 	stw	r17,4(sp)
81119ed8:	dc000015 	stw	r16,0(sp)
81119edc:	1887c83a 	sub	r3,r3,r2
81119ee0:	2825883a 	mov	r18,r5
81119ee4:	3027883a 	mov	r19,r6
81119ee8:	1800141e 	bne	r3,zero,81119f3c <__mdiff+0x8c>
81119eec:	1085883a 	add	r2,r2,r2
81119ef0:	1085883a 	add	r2,r2,r2
81119ef4:	2a000504 	addi	r8,r5,20
81119ef8:	34000504 	addi	r16,r6,20
81119efc:	4087883a 	add	r3,r8,r2
81119f00:	8085883a 	add	r2,r16,r2
81119f04:	00000106 	br	81119f0c <__mdiff+0x5c>
81119f08:	40c0592e 	bgeu	r8,r3,8111a070 <__mdiff+0x1c0>
81119f0c:	18ffff04 	addi	r3,r3,-4
81119f10:	10bfff04 	addi	r2,r2,-4
81119f14:	19c00017 	ldw	r7,0(r3)
81119f18:	11400017 	ldw	r5,0(r2)
81119f1c:	397ffa26 	beq	r7,r5,81119f08 <__reset+0xfb0f9f08>
81119f20:	3940592e 	bgeu	r7,r5,8111a088 <__mdiff+0x1d8>
81119f24:	9005883a 	mov	r2,r18
81119f28:	4023883a 	mov	r17,r8
81119f2c:	9825883a 	mov	r18,r19
81119f30:	05000044 	movi	r20,1
81119f34:	1027883a 	mov	r19,r2
81119f38:	00000406 	br	81119f4c <__mdiff+0x9c>
81119f3c:	18005616 	blt	r3,zero,8111a098 <__mdiff+0x1e8>
81119f40:	34400504 	addi	r17,r6,20
81119f44:	2c000504 	addi	r16,r5,20
81119f48:	0029883a 	mov	r20,zero
81119f4c:	91400117 	ldw	r5,4(r18)
81119f50:	11195500 	call	81119550 <_Balloc>
81119f54:	92400417 	ldw	r9,16(r18)
81119f58:	9b000417 	ldw	r12,16(r19)
81119f5c:	12c00504 	addi	r11,r2,20
81119f60:	4a51883a 	add	r8,r9,r9
81119f64:	6319883a 	add	r12,r12,r12
81119f68:	4211883a 	add	r8,r8,r8
81119f6c:	6319883a 	add	r12,r12,r12
81119f70:	15000315 	stw	r20,12(r2)
81119f74:	8211883a 	add	r8,r16,r8
81119f78:	8b19883a 	add	r12,r17,r12
81119f7c:	0007883a 	mov	r3,zero
81119f80:	81400017 	ldw	r5,0(r16)
81119f84:	89c00017 	ldw	r7,0(r17)
81119f88:	59800104 	addi	r6,r11,4
81119f8c:	293fffcc 	andi	r4,r5,65535
81119f90:	20c7883a 	add	r3,r4,r3
81119f94:	393fffcc 	andi	r4,r7,65535
81119f98:	1909c83a 	sub	r4,r3,r4
81119f9c:	280ad43a 	srli	r5,r5,16
81119fa0:	380ed43a 	srli	r7,r7,16
81119fa4:	2007d43a 	srai	r3,r4,16
81119fa8:	213fffcc 	andi	r4,r4,65535
81119fac:	29cbc83a 	sub	r5,r5,r7
81119fb0:	28c7883a 	add	r3,r5,r3
81119fb4:	180a943a 	slli	r5,r3,16
81119fb8:	8c400104 	addi	r17,r17,4
81119fbc:	84000104 	addi	r16,r16,4
81119fc0:	2908b03a 	or	r4,r5,r4
81119fc4:	59000015 	stw	r4,0(r11)
81119fc8:	1807d43a 	srai	r3,r3,16
81119fcc:	3015883a 	mov	r10,r6
81119fd0:	3017883a 	mov	r11,r6
81119fd4:	8b3fea36 	bltu	r17,r12,81119f80 <__reset+0xfb0f9f80>
81119fd8:	8200162e 	bgeu	r16,r8,8111a034 <__mdiff+0x184>
81119fdc:	8017883a 	mov	r11,r16
81119fe0:	59400017 	ldw	r5,0(r11)
81119fe4:	31800104 	addi	r6,r6,4
81119fe8:	5ac00104 	addi	r11,r11,4
81119fec:	293fffcc 	andi	r4,r5,65535
81119ff0:	20c7883a 	add	r3,r4,r3
81119ff4:	280ed43a 	srli	r7,r5,16
81119ff8:	180bd43a 	srai	r5,r3,16
81119ffc:	193fffcc 	andi	r4,r3,65535
8111a000:	3947883a 	add	r3,r7,r5
8111a004:	180a943a 	slli	r5,r3,16
8111a008:	1807d43a 	srai	r3,r3,16
8111a00c:	2908b03a 	or	r4,r5,r4
8111a010:	313fff15 	stw	r4,-4(r6)
8111a014:	5a3ff236 	bltu	r11,r8,81119fe0 <__reset+0xfb0f9fe0>
8111a018:	0406303a 	nor	r3,zero,r16
8111a01c:	1a07883a 	add	r3,r3,r8
8111a020:	1806d0ba 	srli	r3,r3,2
8111a024:	18c00044 	addi	r3,r3,1
8111a028:	18c7883a 	add	r3,r3,r3
8111a02c:	18c7883a 	add	r3,r3,r3
8111a030:	50d5883a 	add	r10,r10,r3
8111a034:	50ffff04 	addi	r3,r10,-4
8111a038:	2000041e 	bne	r4,zero,8111a04c <__mdiff+0x19c>
8111a03c:	18ffff04 	addi	r3,r3,-4
8111a040:	19000017 	ldw	r4,0(r3)
8111a044:	4a7fffc4 	addi	r9,r9,-1
8111a048:	203ffc26 	beq	r4,zero,8111a03c <__reset+0xfb0fa03c>
8111a04c:	12400415 	stw	r9,16(r2)
8111a050:	dfc00517 	ldw	ra,20(sp)
8111a054:	dd000417 	ldw	r20,16(sp)
8111a058:	dcc00317 	ldw	r19,12(sp)
8111a05c:	dc800217 	ldw	r18,8(sp)
8111a060:	dc400117 	ldw	r17,4(sp)
8111a064:	dc000017 	ldw	r16,0(sp)
8111a068:	dec00604 	addi	sp,sp,24
8111a06c:	f800283a 	ret
8111a070:	000b883a 	mov	r5,zero
8111a074:	11195500 	call	81119550 <_Balloc>
8111a078:	00c00044 	movi	r3,1
8111a07c:	10c00415 	stw	r3,16(r2)
8111a080:	10000515 	stw	zero,20(r2)
8111a084:	003ff206 	br	8111a050 <__reset+0xfb0fa050>
8111a088:	8023883a 	mov	r17,r16
8111a08c:	0029883a 	mov	r20,zero
8111a090:	4021883a 	mov	r16,r8
8111a094:	003fad06 	br	81119f4c <__reset+0xfb0f9f4c>
8111a098:	9005883a 	mov	r2,r18
8111a09c:	94400504 	addi	r17,r18,20
8111a0a0:	9c000504 	addi	r16,r19,20
8111a0a4:	9825883a 	mov	r18,r19
8111a0a8:	05000044 	movi	r20,1
8111a0ac:	1027883a 	mov	r19,r2
8111a0b0:	003fa606 	br	81119f4c <__reset+0xfb0f9f4c>

8111a0b4 <__ulp>:
8111a0b4:	295ffc2c 	andhi	r5,r5,32752
8111a0b8:	00bf3034 	movhi	r2,64704
8111a0bc:	2887883a 	add	r3,r5,r2
8111a0c0:	00c0020e 	bge	zero,r3,8111a0cc <__ulp+0x18>
8111a0c4:	0005883a 	mov	r2,zero
8111a0c8:	f800283a 	ret
8111a0cc:	00c7c83a 	sub	r3,zero,r3
8111a0d0:	1807d53a 	srai	r3,r3,20
8111a0d4:	008004c4 	movi	r2,19
8111a0d8:	10c00b0e 	bge	r2,r3,8111a108 <__ulp+0x54>
8111a0dc:	18bffb04 	addi	r2,r3,-20
8111a0e0:	01000784 	movi	r4,30
8111a0e4:	0007883a 	mov	r3,zero
8111a0e8:	20800516 	blt	r4,r2,8111a100 <__ulp+0x4c>
8111a0ec:	010007c4 	movi	r4,31
8111a0f0:	2089c83a 	sub	r4,r4,r2
8111a0f4:	00800044 	movi	r2,1
8111a0f8:	1104983a 	sll	r2,r2,r4
8111a0fc:	f800283a 	ret
8111a100:	00800044 	movi	r2,1
8111a104:	f800283a 	ret
8111a108:	01400234 	movhi	r5,8
8111a10c:	28c7d83a 	sra	r3,r5,r3
8111a110:	0005883a 	mov	r2,zero
8111a114:	f800283a 	ret

8111a118 <__b2d>:
8111a118:	defffa04 	addi	sp,sp,-24
8111a11c:	de00012e 	bgeu	sp,et,8111a124 <__b2d+0xc>
8111a120:	003b68fa 	trap	3
8111a124:	dc000015 	stw	r16,0(sp)
8111a128:	24000417 	ldw	r16,16(r4)
8111a12c:	dc400115 	stw	r17,4(sp)
8111a130:	24400504 	addi	r17,r4,20
8111a134:	8421883a 	add	r16,r16,r16
8111a138:	8421883a 	add	r16,r16,r16
8111a13c:	8c21883a 	add	r16,r17,r16
8111a140:	dc800215 	stw	r18,8(sp)
8111a144:	84bfff17 	ldw	r18,-4(r16)
8111a148:	dd000415 	stw	r20,16(sp)
8111a14c:	dcc00315 	stw	r19,12(sp)
8111a150:	9009883a 	mov	r4,r18
8111a154:	2829883a 	mov	r20,r5
8111a158:	dfc00515 	stw	ra,20(sp)
8111a15c:	111985c0 	call	8111985c <__hi0bits>
8111a160:	00c00804 	movi	r3,32
8111a164:	1889c83a 	sub	r4,r3,r2
8111a168:	a1000015 	stw	r4,0(r20)
8111a16c:	01000284 	movi	r4,10
8111a170:	84ffff04 	addi	r19,r16,-4
8111a174:	20801216 	blt	r4,r2,8111a1c0 <__b2d+0xa8>
8111a178:	018002c4 	movi	r6,11
8111a17c:	308dc83a 	sub	r6,r6,r2
8111a180:	9186d83a 	srl	r3,r18,r6
8111a184:	18cffc34 	orhi	r3,r3,16368
8111a188:	8cc0212e 	bgeu	r17,r19,8111a210 <__b2d+0xf8>
8111a18c:	813ffe17 	ldw	r4,-8(r16)
8111a190:	218cd83a 	srl	r6,r4,r6
8111a194:	10800544 	addi	r2,r2,21
8111a198:	9084983a 	sll	r2,r18,r2
8111a19c:	1184b03a 	or	r2,r2,r6
8111a1a0:	dfc00517 	ldw	ra,20(sp)
8111a1a4:	dd000417 	ldw	r20,16(sp)
8111a1a8:	dcc00317 	ldw	r19,12(sp)
8111a1ac:	dc800217 	ldw	r18,8(sp)
8111a1b0:	dc400117 	ldw	r17,4(sp)
8111a1b4:	dc000017 	ldw	r16,0(sp)
8111a1b8:	dec00604 	addi	sp,sp,24
8111a1bc:	f800283a 	ret
8111a1c0:	8cc00f2e 	bgeu	r17,r19,8111a200 <__b2d+0xe8>
8111a1c4:	117ffd44 	addi	r5,r2,-11
8111a1c8:	80bffe17 	ldw	r2,-8(r16)
8111a1cc:	28000e26 	beq	r5,zero,8111a208 <__b2d+0xf0>
8111a1d0:	1949c83a 	sub	r4,r3,r5
8111a1d4:	9164983a 	sll	r18,r18,r5
8111a1d8:	1106d83a 	srl	r3,r2,r4
8111a1dc:	81bffe04 	addi	r6,r16,-8
8111a1e0:	948ffc34 	orhi	r18,r18,16368
8111a1e4:	90c6b03a 	or	r3,r18,r3
8111a1e8:	89800e2e 	bgeu	r17,r6,8111a224 <__b2d+0x10c>
8111a1ec:	81bffd17 	ldw	r6,-12(r16)
8111a1f0:	1144983a 	sll	r2,r2,r5
8111a1f4:	310ad83a 	srl	r5,r6,r4
8111a1f8:	2884b03a 	or	r2,r5,r2
8111a1fc:	003fe806 	br	8111a1a0 <__reset+0xfb0fa1a0>
8111a200:	10bffd44 	addi	r2,r2,-11
8111a204:	1000041e 	bne	r2,zero,8111a218 <__b2d+0x100>
8111a208:	90cffc34 	orhi	r3,r18,16368
8111a20c:	003fe406 	br	8111a1a0 <__reset+0xfb0fa1a0>
8111a210:	000d883a 	mov	r6,zero
8111a214:	003fdf06 	br	8111a194 <__reset+0xfb0fa194>
8111a218:	90a4983a 	sll	r18,r18,r2
8111a21c:	0005883a 	mov	r2,zero
8111a220:	003ff906 	br	8111a208 <__reset+0xfb0fa208>
8111a224:	1144983a 	sll	r2,r2,r5
8111a228:	003fdd06 	br	8111a1a0 <__reset+0xfb0fa1a0>

8111a22c <__d2b>:
8111a22c:	defff804 	addi	sp,sp,-32
8111a230:	de00012e 	bgeu	sp,et,8111a238 <__d2b+0xc>
8111a234:	003b68fa 	trap	3
8111a238:	dc000215 	stw	r16,8(sp)
8111a23c:	3021883a 	mov	r16,r6
8111a240:	dc400315 	stw	r17,12(sp)
8111a244:	8022907a 	slli	r17,r16,1
8111a248:	dd000615 	stw	r20,24(sp)
8111a24c:	2829883a 	mov	r20,r5
8111a250:	01400044 	movi	r5,1
8111a254:	dcc00515 	stw	r19,20(sp)
8111a258:	dc800415 	stw	r18,16(sp)
8111a25c:	dfc00715 	stw	ra,28(sp)
8111a260:	3825883a 	mov	r18,r7
8111a264:	8822d57a 	srli	r17,r17,21
8111a268:	11195500 	call	81119550 <_Balloc>
8111a26c:	1027883a 	mov	r19,r2
8111a270:	00800434 	movhi	r2,16
8111a274:	10bfffc4 	addi	r2,r2,-1
8111a278:	808c703a 	and	r6,r16,r2
8111a27c:	88000126 	beq	r17,zero,8111a284 <__d2b+0x58>
8111a280:	31800434 	orhi	r6,r6,16
8111a284:	d9800015 	stw	r6,0(sp)
8111a288:	a0002426 	beq	r20,zero,8111a31c <__d2b+0xf0>
8111a28c:	d9000104 	addi	r4,sp,4
8111a290:	dd000115 	stw	r20,4(sp)
8111a294:	11198c40 	call	811198c4 <__lo0bits>
8111a298:	d8c00017 	ldw	r3,0(sp)
8111a29c:	10002f1e 	bne	r2,zero,8111a35c <__d2b+0x130>
8111a2a0:	d9000117 	ldw	r4,4(sp)
8111a2a4:	99000515 	stw	r4,20(r19)
8111a2a8:	1821003a 	cmpeq	r16,r3,zero
8111a2ac:	01000084 	movi	r4,2
8111a2b0:	2421c83a 	sub	r16,r4,r16
8111a2b4:	98c00615 	stw	r3,24(r19)
8111a2b8:	9c000415 	stw	r16,16(r19)
8111a2bc:	88001f1e 	bne	r17,zero,8111a33c <__d2b+0x110>
8111a2c0:	10bef384 	addi	r2,r2,-1074
8111a2c4:	90800015 	stw	r2,0(r18)
8111a2c8:	00900034 	movhi	r2,16384
8111a2cc:	10bfffc4 	addi	r2,r2,-1
8111a2d0:	8085883a 	add	r2,r16,r2
8111a2d4:	1085883a 	add	r2,r2,r2
8111a2d8:	1085883a 	add	r2,r2,r2
8111a2dc:	9885883a 	add	r2,r19,r2
8111a2e0:	11000517 	ldw	r4,20(r2)
8111a2e4:	8020917a 	slli	r16,r16,5
8111a2e8:	111985c0 	call	8111985c <__hi0bits>
8111a2ec:	d8c00817 	ldw	r3,32(sp)
8111a2f0:	8085c83a 	sub	r2,r16,r2
8111a2f4:	18800015 	stw	r2,0(r3)
8111a2f8:	9805883a 	mov	r2,r19
8111a2fc:	dfc00717 	ldw	ra,28(sp)
8111a300:	dd000617 	ldw	r20,24(sp)
8111a304:	dcc00517 	ldw	r19,20(sp)
8111a308:	dc800417 	ldw	r18,16(sp)
8111a30c:	dc400317 	ldw	r17,12(sp)
8111a310:	dc000217 	ldw	r16,8(sp)
8111a314:	dec00804 	addi	sp,sp,32
8111a318:	f800283a 	ret
8111a31c:	d809883a 	mov	r4,sp
8111a320:	11198c40 	call	811198c4 <__lo0bits>
8111a324:	d8c00017 	ldw	r3,0(sp)
8111a328:	04000044 	movi	r16,1
8111a32c:	9c000415 	stw	r16,16(r19)
8111a330:	98c00515 	stw	r3,20(r19)
8111a334:	10800804 	addi	r2,r2,32
8111a338:	883fe126 	beq	r17,zero,8111a2c0 <__reset+0xfb0fa2c0>
8111a33c:	00c00d44 	movi	r3,53
8111a340:	8c7ef344 	addi	r17,r17,-1075
8111a344:	88a3883a 	add	r17,r17,r2
8111a348:	1885c83a 	sub	r2,r3,r2
8111a34c:	d8c00817 	ldw	r3,32(sp)
8111a350:	94400015 	stw	r17,0(r18)
8111a354:	18800015 	stw	r2,0(r3)
8111a358:	003fe706 	br	8111a2f8 <__reset+0xfb0fa2f8>
8111a35c:	01000804 	movi	r4,32
8111a360:	2089c83a 	sub	r4,r4,r2
8111a364:	1908983a 	sll	r4,r3,r4
8111a368:	d9400117 	ldw	r5,4(sp)
8111a36c:	1886d83a 	srl	r3,r3,r2
8111a370:	2148b03a 	or	r4,r4,r5
8111a374:	99000515 	stw	r4,20(r19)
8111a378:	d8c00015 	stw	r3,0(sp)
8111a37c:	003fca06 	br	8111a2a8 <__reset+0xfb0fa2a8>

8111a380 <__ratio>:
8111a380:	defff904 	addi	sp,sp,-28
8111a384:	de00012e 	bgeu	sp,et,8111a38c <__ratio+0xc>
8111a388:	003b68fa 	trap	3
8111a38c:	dc400315 	stw	r17,12(sp)
8111a390:	2823883a 	mov	r17,r5
8111a394:	d9400104 	addi	r5,sp,4
8111a398:	dfc00615 	stw	ra,24(sp)
8111a39c:	dcc00515 	stw	r19,20(sp)
8111a3a0:	dc800415 	stw	r18,16(sp)
8111a3a4:	2027883a 	mov	r19,r4
8111a3a8:	dc000215 	stw	r16,8(sp)
8111a3ac:	111a1180 	call	8111a118 <__b2d>
8111a3b0:	d80b883a 	mov	r5,sp
8111a3b4:	8809883a 	mov	r4,r17
8111a3b8:	1025883a 	mov	r18,r2
8111a3bc:	1821883a 	mov	r16,r3
8111a3c0:	111a1180 	call	8111a118 <__b2d>
8111a3c4:	8a000417 	ldw	r8,16(r17)
8111a3c8:	99000417 	ldw	r4,16(r19)
8111a3cc:	d9400117 	ldw	r5,4(sp)
8111a3d0:	2209c83a 	sub	r4,r4,r8
8111a3d4:	2010917a 	slli	r8,r4,5
8111a3d8:	d9000017 	ldw	r4,0(sp)
8111a3dc:	2909c83a 	sub	r4,r5,r4
8111a3e0:	4109883a 	add	r4,r8,r4
8111a3e4:	01000e0e 	bge	zero,r4,8111a420 <__ratio+0xa0>
8111a3e8:	2008953a 	slli	r4,r4,20
8111a3ec:	2421883a 	add	r16,r4,r16
8111a3f0:	100d883a 	mov	r6,r2
8111a3f4:	180f883a 	mov	r7,r3
8111a3f8:	9009883a 	mov	r4,r18
8111a3fc:	800b883a 	mov	r5,r16
8111a400:	112274c0 	call	8112274c <__divdf3>
8111a404:	dfc00617 	ldw	ra,24(sp)
8111a408:	dcc00517 	ldw	r19,20(sp)
8111a40c:	dc800417 	ldw	r18,16(sp)
8111a410:	dc400317 	ldw	r17,12(sp)
8111a414:	dc000217 	ldw	r16,8(sp)
8111a418:	dec00704 	addi	sp,sp,28
8111a41c:	f800283a 	ret
8111a420:	2008953a 	slli	r4,r4,20
8111a424:	1907c83a 	sub	r3,r3,r4
8111a428:	003ff106 	br	8111a3f0 <__reset+0xfb0fa3f0>

8111a42c <_mprec_log10>:
8111a42c:	defffe04 	addi	sp,sp,-8
8111a430:	de00012e 	bgeu	sp,et,8111a438 <_mprec_log10+0xc>
8111a434:	003b68fa 	trap	3
8111a438:	008005c4 	movi	r2,23
8111a43c:	dc000015 	stw	r16,0(sp)
8111a440:	dfc00115 	stw	ra,4(sp)
8111a444:	2021883a 	mov	r16,r4
8111a448:	11000d0e 	bge	r2,r4,8111a480 <_mprec_log10+0x54>
8111a44c:	0005883a 	mov	r2,zero
8111a450:	00cffc34 	movhi	r3,16368
8111a454:	843fffc4 	addi	r16,r16,-1
8111a458:	000d883a 	mov	r6,zero
8111a45c:	01d00934 	movhi	r7,16420
8111a460:	1009883a 	mov	r4,r2
8111a464:	180b883a 	mov	r5,r3
8111a468:	110da7c0 	call	8110da7c <__muldf3>
8111a46c:	803ff91e 	bne	r16,zero,8111a454 <__reset+0xfb0fa454>
8111a470:	dfc00117 	ldw	ra,4(sp)
8111a474:	dc000017 	ldw	r16,0(sp)
8111a478:	dec00204 	addi	sp,sp,8
8111a47c:	f800283a 	ret
8111a480:	202090fa 	slli	r16,r4,3
8111a484:	00a04534 	movhi	r2,33044
8111a488:	10ae6b04 	addi	r2,r2,-18004
8111a48c:	1421883a 	add	r16,r2,r16
8111a490:	80800017 	ldw	r2,0(r16)
8111a494:	80c00117 	ldw	r3,4(r16)
8111a498:	dfc00117 	ldw	ra,4(sp)
8111a49c:	dc000017 	ldw	r16,0(sp)
8111a4a0:	dec00204 	addi	sp,sp,8
8111a4a4:	f800283a 	ret

8111a4a8 <__copybits>:
8111a4a8:	297fffc4 	addi	r5,r5,-1
8111a4ac:	280fd17a 	srai	r7,r5,5
8111a4b0:	30c00417 	ldw	r3,16(r6)
8111a4b4:	30800504 	addi	r2,r6,20
8111a4b8:	39c00044 	addi	r7,r7,1
8111a4bc:	18c7883a 	add	r3,r3,r3
8111a4c0:	39cf883a 	add	r7,r7,r7
8111a4c4:	18c7883a 	add	r3,r3,r3
8111a4c8:	39cf883a 	add	r7,r7,r7
8111a4cc:	10c7883a 	add	r3,r2,r3
8111a4d0:	21cf883a 	add	r7,r4,r7
8111a4d4:	10c00d2e 	bgeu	r2,r3,8111a50c <__copybits+0x64>
8111a4d8:	200b883a 	mov	r5,r4
8111a4dc:	12000017 	ldw	r8,0(r2)
8111a4e0:	29400104 	addi	r5,r5,4
8111a4e4:	10800104 	addi	r2,r2,4
8111a4e8:	2a3fff15 	stw	r8,-4(r5)
8111a4ec:	10fffb36 	bltu	r2,r3,8111a4dc <__reset+0xfb0fa4dc>
8111a4f0:	1985c83a 	sub	r2,r3,r6
8111a4f4:	10bffac4 	addi	r2,r2,-21
8111a4f8:	1004d0ba 	srli	r2,r2,2
8111a4fc:	10800044 	addi	r2,r2,1
8111a500:	1085883a 	add	r2,r2,r2
8111a504:	1085883a 	add	r2,r2,r2
8111a508:	2089883a 	add	r4,r4,r2
8111a50c:	21c0032e 	bgeu	r4,r7,8111a51c <__copybits+0x74>
8111a510:	20000015 	stw	zero,0(r4)
8111a514:	21000104 	addi	r4,r4,4
8111a518:	21fffd36 	bltu	r4,r7,8111a510 <__reset+0xfb0fa510>
8111a51c:	f800283a 	ret

8111a520 <__any_on>:
8111a520:	20c00417 	ldw	r3,16(r4)
8111a524:	2805d17a 	srai	r2,r5,5
8111a528:	21000504 	addi	r4,r4,20
8111a52c:	18800d0e 	bge	r3,r2,8111a564 <__any_on+0x44>
8111a530:	18c7883a 	add	r3,r3,r3
8111a534:	18c7883a 	add	r3,r3,r3
8111a538:	20c7883a 	add	r3,r4,r3
8111a53c:	20c0192e 	bgeu	r4,r3,8111a5a4 <__any_on+0x84>
8111a540:	18bfff17 	ldw	r2,-4(r3)
8111a544:	18ffff04 	addi	r3,r3,-4
8111a548:	1000041e 	bne	r2,zero,8111a55c <__any_on+0x3c>
8111a54c:	20c0142e 	bgeu	r4,r3,8111a5a0 <__any_on+0x80>
8111a550:	18ffff04 	addi	r3,r3,-4
8111a554:	19400017 	ldw	r5,0(r3)
8111a558:	283ffc26 	beq	r5,zero,8111a54c <__reset+0xfb0fa54c>
8111a55c:	00800044 	movi	r2,1
8111a560:	f800283a 	ret
8111a564:	10c00a0e 	bge	r2,r3,8111a590 <__any_on+0x70>
8111a568:	1085883a 	add	r2,r2,r2
8111a56c:	1085883a 	add	r2,r2,r2
8111a570:	294007cc 	andi	r5,r5,31
8111a574:	2087883a 	add	r3,r4,r2
8111a578:	283ff026 	beq	r5,zero,8111a53c <__reset+0xfb0fa53c>
8111a57c:	19800017 	ldw	r6,0(r3)
8111a580:	3144d83a 	srl	r2,r6,r5
8111a584:	114a983a 	sll	r5,r2,r5
8111a588:	317ff41e 	bne	r6,r5,8111a55c <__reset+0xfb0fa55c>
8111a58c:	003feb06 	br	8111a53c <__reset+0xfb0fa53c>
8111a590:	1085883a 	add	r2,r2,r2
8111a594:	1085883a 	add	r2,r2,r2
8111a598:	2087883a 	add	r3,r4,r2
8111a59c:	003fe706 	br	8111a53c <__reset+0xfb0fa53c>
8111a5a0:	f800283a 	ret
8111a5a4:	0005883a 	mov	r2,zero
8111a5a8:	f800283a 	ret

8111a5ac <_putc_r>:
8111a5ac:	defffc04 	addi	sp,sp,-16
8111a5b0:	de00012e 	bgeu	sp,et,8111a5b8 <_putc_r+0xc>
8111a5b4:	003b68fa 	trap	3
8111a5b8:	dc000215 	stw	r16,8(sp)
8111a5bc:	dfc00315 	stw	ra,12(sp)
8111a5c0:	2021883a 	mov	r16,r4
8111a5c4:	20000226 	beq	r4,zero,8111a5d0 <_putc_r+0x24>
8111a5c8:	20800e17 	ldw	r2,56(r4)
8111a5cc:	10001b26 	beq	r2,zero,8111a63c <_putc_r+0x90>
8111a5d0:	30800217 	ldw	r2,8(r6)
8111a5d4:	10bfffc4 	addi	r2,r2,-1
8111a5d8:	30800215 	stw	r2,8(r6)
8111a5dc:	10000a16 	blt	r2,zero,8111a608 <_putc_r+0x5c>
8111a5e0:	30800017 	ldw	r2,0(r6)
8111a5e4:	11400005 	stb	r5,0(r2)
8111a5e8:	30800017 	ldw	r2,0(r6)
8111a5ec:	10c00044 	addi	r3,r2,1
8111a5f0:	30c00015 	stw	r3,0(r6)
8111a5f4:	10800003 	ldbu	r2,0(r2)
8111a5f8:	dfc00317 	ldw	ra,12(sp)
8111a5fc:	dc000217 	ldw	r16,8(sp)
8111a600:	dec00404 	addi	sp,sp,16
8111a604:	f800283a 	ret
8111a608:	30c00617 	ldw	r3,24(r6)
8111a60c:	10c00616 	blt	r2,r3,8111a628 <_putc_r+0x7c>
8111a610:	30800017 	ldw	r2,0(r6)
8111a614:	00c00284 	movi	r3,10
8111a618:	11400005 	stb	r5,0(r2)
8111a61c:	30800017 	ldw	r2,0(r6)
8111a620:	11400003 	ldbu	r5,0(r2)
8111a624:	28fff11e 	bne	r5,r3,8111a5ec <__reset+0xfb0fa5ec>
8111a628:	8009883a 	mov	r4,r16
8111a62c:	dfc00317 	ldw	ra,12(sp)
8111a630:	dc000217 	ldw	r16,8(sp)
8111a634:	dec00404 	addi	sp,sp,16
8111a638:	111fbf01 	jmpi	8111fbf0 <__swbuf_r>
8111a63c:	d9400015 	stw	r5,0(sp)
8111a640:	d9800115 	stw	r6,4(sp)
8111a644:	11180e80 	call	811180e8 <__sinit>
8111a648:	d9800117 	ldw	r6,4(sp)
8111a64c:	d9400017 	ldw	r5,0(sp)
8111a650:	003fdf06 	br	8111a5d0 <__reset+0xfb0fa5d0>

8111a654 <putc>:
8111a654:	00a04534 	movhi	r2,33044
8111a658:	defffc04 	addi	sp,sp,-16
8111a65c:	10b73304 	addi	r2,r2,-9012
8111a660:	de00012e 	bgeu	sp,et,8111a668 <putc+0x14>
8111a664:	003b68fa 	trap	3
8111a668:	dc000115 	stw	r16,4(sp)
8111a66c:	14000017 	ldw	r16,0(r2)
8111a670:	dc400215 	stw	r17,8(sp)
8111a674:	dfc00315 	stw	ra,12(sp)
8111a678:	2023883a 	mov	r17,r4
8111a67c:	80000226 	beq	r16,zero,8111a688 <putc+0x34>
8111a680:	80800e17 	ldw	r2,56(r16)
8111a684:	10001a26 	beq	r2,zero,8111a6f0 <putc+0x9c>
8111a688:	28800217 	ldw	r2,8(r5)
8111a68c:	10bfffc4 	addi	r2,r2,-1
8111a690:	28800215 	stw	r2,8(r5)
8111a694:	10000b16 	blt	r2,zero,8111a6c4 <putc+0x70>
8111a698:	28800017 	ldw	r2,0(r5)
8111a69c:	14400005 	stb	r17,0(r2)
8111a6a0:	28800017 	ldw	r2,0(r5)
8111a6a4:	10c00044 	addi	r3,r2,1
8111a6a8:	28c00015 	stw	r3,0(r5)
8111a6ac:	10800003 	ldbu	r2,0(r2)
8111a6b0:	dfc00317 	ldw	ra,12(sp)
8111a6b4:	dc400217 	ldw	r17,8(sp)
8111a6b8:	dc000117 	ldw	r16,4(sp)
8111a6bc:	dec00404 	addi	sp,sp,16
8111a6c0:	f800283a 	ret
8111a6c4:	28c00617 	ldw	r3,24(r5)
8111a6c8:	10c00e16 	blt	r2,r3,8111a704 <putc+0xb0>
8111a6cc:	28800017 	ldw	r2,0(r5)
8111a6d0:	01000284 	movi	r4,10
8111a6d4:	14400005 	stb	r17,0(r2)
8111a6d8:	28800017 	ldw	r2,0(r5)
8111a6dc:	10c00003 	ldbu	r3,0(r2)
8111a6e0:	193ff01e 	bne	r3,r4,8111a6a4 <__reset+0xfb0fa6a4>
8111a6e4:	280d883a 	mov	r6,r5
8111a6e8:	180b883a 	mov	r5,r3
8111a6ec:	00000706 	br	8111a70c <putc+0xb8>
8111a6f0:	8009883a 	mov	r4,r16
8111a6f4:	d9400015 	stw	r5,0(sp)
8111a6f8:	11180e80 	call	811180e8 <__sinit>
8111a6fc:	d9400017 	ldw	r5,0(sp)
8111a700:	003fe106 	br	8111a688 <__reset+0xfb0fa688>
8111a704:	280d883a 	mov	r6,r5
8111a708:	880b883a 	mov	r5,r17
8111a70c:	8009883a 	mov	r4,r16
8111a710:	dfc00317 	ldw	ra,12(sp)
8111a714:	dc400217 	ldw	r17,8(sp)
8111a718:	dc000117 	ldw	r16,4(sp)
8111a71c:	dec00404 	addi	sp,sp,16
8111a720:	111fbf01 	jmpi	8111fbf0 <__swbuf_r>

8111a724 <_read_r>:
8111a724:	defffd04 	addi	sp,sp,-12
8111a728:	de00012e 	bgeu	sp,et,8111a730 <_read_r+0xc>
8111a72c:	003b68fa 	trap	3
8111a730:	2805883a 	mov	r2,r5
8111a734:	dc000015 	stw	r16,0(sp)
8111a738:	04204534 	movhi	r16,33044
8111a73c:	dc400115 	stw	r17,4(sp)
8111a740:	300b883a 	mov	r5,r6
8111a744:	84379304 	addi	r16,r16,-8628
8111a748:	2023883a 	mov	r17,r4
8111a74c:	380d883a 	mov	r6,r7
8111a750:	1009883a 	mov	r4,r2
8111a754:	dfc00215 	stw	ra,8(sp)
8111a758:	80000015 	stw	zero,0(r16)
8111a75c:	11245a40 	call	811245a4 <read>
8111a760:	00ffffc4 	movi	r3,-1
8111a764:	10c00526 	beq	r2,r3,8111a77c <_read_r+0x58>
8111a768:	dfc00217 	ldw	ra,8(sp)
8111a76c:	dc400117 	ldw	r17,4(sp)
8111a770:	dc000017 	ldw	r16,0(sp)
8111a774:	dec00304 	addi	sp,sp,12
8111a778:	f800283a 	ret
8111a77c:	80c00017 	ldw	r3,0(r16)
8111a780:	183ff926 	beq	r3,zero,8111a768 <__reset+0xfb0fa768>
8111a784:	88c00015 	stw	r3,0(r17)
8111a788:	003ff706 	br	8111a768 <__reset+0xfb0fa768>

8111a78c <_realloc_r>:
8111a78c:	defff604 	addi	sp,sp,-40
8111a790:	de00012e 	bgeu	sp,et,8111a798 <_realloc_r+0xc>
8111a794:	003b68fa 	trap	3
8111a798:	dc800215 	stw	r18,8(sp)
8111a79c:	dfc00915 	stw	ra,36(sp)
8111a7a0:	df000815 	stw	fp,32(sp)
8111a7a4:	ddc00715 	stw	r23,28(sp)
8111a7a8:	dd800615 	stw	r22,24(sp)
8111a7ac:	dd400515 	stw	r21,20(sp)
8111a7b0:	dd000415 	stw	r20,16(sp)
8111a7b4:	dcc00315 	stw	r19,12(sp)
8111a7b8:	dc400115 	stw	r17,4(sp)
8111a7bc:	dc000015 	stw	r16,0(sp)
8111a7c0:	3025883a 	mov	r18,r6
8111a7c4:	2800b726 	beq	r5,zero,8111aaa4 <_realloc_r+0x318>
8111a7c8:	282b883a 	mov	r21,r5
8111a7cc:	2029883a 	mov	r20,r4
8111a7d0:	1124d780 	call	81124d78 <__malloc_lock>
8111a7d4:	a8bfff17 	ldw	r2,-4(r21)
8111a7d8:	043fff04 	movi	r16,-4
8111a7dc:	90c002c4 	addi	r3,r18,11
8111a7e0:	01000584 	movi	r4,22
8111a7e4:	acfffe04 	addi	r19,r21,-8
8111a7e8:	1420703a 	and	r16,r2,r16
8111a7ec:	20c0332e 	bgeu	r4,r3,8111a8bc <_realloc_r+0x130>
8111a7f0:	047ffe04 	movi	r17,-8
8111a7f4:	1c62703a 	and	r17,r3,r17
8111a7f8:	8807883a 	mov	r3,r17
8111a7fc:	88005816 	blt	r17,zero,8111a960 <_realloc_r+0x1d4>
8111a800:	8c805736 	bltu	r17,r18,8111a960 <_realloc_r+0x1d4>
8111a804:	80c0300e 	bge	r16,r3,8111a8c8 <_realloc_r+0x13c>
8111a808:	07204534 	movhi	fp,33044
8111a80c:	e7311304 	addi	fp,fp,-15284
8111a810:	e1c00217 	ldw	r7,8(fp)
8111a814:	9c09883a 	add	r4,r19,r16
8111a818:	22000117 	ldw	r8,4(r4)
8111a81c:	21c06326 	beq	r4,r7,8111a9ac <_realloc_r+0x220>
8111a820:	017fff84 	movi	r5,-2
8111a824:	414a703a 	and	r5,r8,r5
8111a828:	214b883a 	add	r5,r4,r5
8111a82c:	29800117 	ldw	r6,4(r5)
8111a830:	3180004c 	andi	r6,r6,1
8111a834:	30003f26 	beq	r6,zero,8111a934 <_realloc_r+0x1a8>
8111a838:	1080004c 	andi	r2,r2,1
8111a83c:	10008326 	beq	r2,zero,8111aa4c <_realloc_r+0x2c0>
8111a840:	900b883a 	mov	r5,r18
8111a844:	a009883a 	mov	r4,r20
8111a848:	110ee080 	call	8110ee08 <_malloc_r>
8111a84c:	1025883a 	mov	r18,r2
8111a850:	10011e26 	beq	r2,zero,8111accc <_realloc_r+0x540>
8111a854:	a93fff17 	ldw	r4,-4(r21)
8111a858:	10fffe04 	addi	r3,r2,-8
8111a85c:	00bfff84 	movi	r2,-2
8111a860:	2084703a 	and	r2,r4,r2
8111a864:	9885883a 	add	r2,r19,r2
8111a868:	1880ee26 	beq	r3,r2,8111ac24 <_realloc_r+0x498>
8111a86c:	81bfff04 	addi	r6,r16,-4
8111a870:	00800904 	movi	r2,36
8111a874:	1180b836 	bltu	r2,r6,8111ab58 <_realloc_r+0x3cc>
8111a878:	00c004c4 	movi	r3,19
8111a87c:	19809636 	bltu	r3,r6,8111aad8 <_realloc_r+0x34c>
8111a880:	9005883a 	mov	r2,r18
8111a884:	a807883a 	mov	r3,r21
8111a888:	19000017 	ldw	r4,0(r3)
8111a88c:	11000015 	stw	r4,0(r2)
8111a890:	19000117 	ldw	r4,4(r3)
8111a894:	11000115 	stw	r4,4(r2)
8111a898:	18c00217 	ldw	r3,8(r3)
8111a89c:	10c00215 	stw	r3,8(r2)
8111a8a0:	a80b883a 	mov	r5,r21
8111a8a4:	a009883a 	mov	r4,r20
8111a8a8:	11185800 	call	81118580 <_free_r>
8111a8ac:	a009883a 	mov	r4,r20
8111a8b0:	1124ea00 	call	81124ea0 <__malloc_unlock>
8111a8b4:	9005883a 	mov	r2,r18
8111a8b8:	00001206 	br	8111a904 <_realloc_r+0x178>
8111a8bc:	00c00404 	movi	r3,16
8111a8c0:	1823883a 	mov	r17,r3
8111a8c4:	003fce06 	br	8111a800 <__reset+0xfb0fa800>
8111a8c8:	a825883a 	mov	r18,r21
8111a8cc:	8445c83a 	sub	r2,r16,r17
8111a8d0:	00c003c4 	movi	r3,15
8111a8d4:	18802636 	bltu	r3,r2,8111a970 <_realloc_r+0x1e4>
8111a8d8:	99800117 	ldw	r6,4(r19)
8111a8dc:	9c07883a 	add	r3,r19,r16
8111a8e0:	3180004c 	andi	r6,r6,1
8111a8e4:	3420b03a 	or	r16,r6,r16
8111a8e8:	9c000115 	stw	r16,4(r19)
8111a8ec:	18800117 	ldw	r2,4(r3)
8111a8f0:	10800054 	ori	r2,r2,1
8111a8f4:	18800115 	stw	r2,4(r3)
8111a8f8:	a009883a 	mov	r4,r20
8111a8fc:	1124ea00 	call	81124ea0 <__malloc_unlock>
8111a900:	9005883a 	mov	r2,r18
8111a904:	dfc00917 	ldw	ra,36(sp)
8111a908:	df000817 	ldw	fp,32(sp)
8111a90c:	ddc00717 	ldw	r23,28(sp)
8111a910:	dd800617 	ldw	r22,24(sp)
8111a914:	dd400517 	ldw	r21,20(sp)
8111a918:	dd000417 	ldw	r20,16(sp)
8111a91c:	dcc00317 	ldw	r19,12(sp)
8111a920:	dc800217 	ldw	r18,8(sp)
8111a924:	dc400117 	ldw	r17,4(sp)
8111a928:	dc000017 	ldw	r16,0(sp)
8111a92c:	dec00a04 	addi	sp,sp,40
8111a930:	f800283a 	ret
8111a934:	017fff04 	movi	r5,-4
8111a938:	414a703a 	and	r5,r8,r5
8111a93c:	814d883a 	add	r6,r16,r5
8111a940:	30c01f16 	blt	r6,r3,8111a9c0 <_realloc_r+0x234>
8111a944:	20800317 	ldw	r2,12(r4)
8111a948:	20c00217 	ldw	r3,8(r4)
8111a94c:	a825883a 	mov	r18,r21
8111a950:	3021883a 	mov	r16,r6
8111a954:	18800315 	stw	r2,12(r3)
8111a958:	10c00215 	stw	r3,8(r2)
8111a95c:	003fdb06 	br	8111a8cc <__reset+0xfb0fa8cc>
8111a960:	00800304 	movi	r2,12
8111a964:	a0800015 	stw	r2,0(r20)
8111a968:	0005883a 	mov	r2,zero
8111a96c:	003fe506 	br	8111a904 <__reset+0xfb0fa904>
8111a970:	98c00117 	ldw	r3,4(r19)
8111a974:	9c4b883a 	add	r5,r19,r17
8111a978:	11000054 	ori	r4,r2,1
8111a97c:	18c0004c 	andi	r3,r3,1
8111a980:	1c62b03a 	or	r17,r3,r17
8111a984:	9c400115 	stw	r17,4(r19)
8111a988:	29000115 	stw	r4,4(r5)
8111a98c:	2885883a 	add	r2,r5,r2
8111a990:	10c00117 	ldw	r3,4(r2)
8111a994:	29400204 	addi	r5,r5,8
8111a998:	a009883a 	mov	r4,r20
8111a99c:	18c00054 	ori	r3,r3,1
8111a9a0:	10c00115 	stw	r3,4(r2)
8111a9a4:	11185800 	call	81118580 <_free_r>
8111a9a8:	003fd306 	br	8111a8f8 <__reset+0xfb0fa8f8>
8111a9ac:	017fff04 	movi	r5,-4
8111a9b0:	414a703a 	and	r5,r8,r5
8111a9b4:	89800404 	addi	r6,r17,16
8111a9b8:	8151883a 	add	r8,r16,r5
8111a9bc:	4180590e 	bge	r8,r6,8111ab24 <_realloc_r+0x398>
8111a9c0:	1080004c 	andi	r2,r2,1
8111a9c4:	103f9e1e 	bne	r2,zero,8111a840 <__reset+0xfb0fa840>
8111a9c8:	adbffe17 	ldw	r22,-8(r21)
8111a9cc:	00bfff04 	movi	r2,-4
8111a9d0:	9dadc83a 	sub	r22,r19,r22
8111a9d4:	b1800117 	ldw	r6,4(r22)
8111a9d8:	3084703a 	and	r2,r6,r2
8111a9dc:	20002026 	beq	r4,zero,8111aa60 <_realloc_r+0x2d4>
8111a9e0:	80af883a 	add	r23,r16,r2
8111a9e4:	b96f883a 	add	r23,r23,r5
8111a9e8:	21c05f26 	beq	r4,r7,8111ab68 <_realloc_r+0x3dc>
8111a9ec:	b8c01c16 	blt	r23,r3,8111aa60 <_realloc_r+0x2d4>
8111a9f0:	20800317 	ldw	r2,12(r4)
8111a9f4:	20c00217 	ldw	r3,8(r4)
8111a9f8:	81bfff04 	addi	r6,r16,-4
8111a9fc:	01000904 	movi	r4,36
8111aa00:	18800315 	stw	r2,12(r3)
8111aa04:	10c00215 	stw	r3,8(r2)
8111aa08:	b0c00217 	ldw	r3,8(r22)
8111aa0c:	b0800317 	ldw	r2,12(r22)
8111aa10:	b4800204 	addi	r18,r22,8
8111aa14:	18800315 	stw	r2,12(r3)
8111aa18:	10c00215 	stw	r3,8(r2)
8111aa1c:	21801b36 	bltu	r4,r6,8111aa8c <_realloc_r+0x300>
8111aa20:	008004c4 	movi	r2,19
8111aa24:	1180352e 	bgeu	r2,r6,8111aafc <_realloc_r+0x370>
8111aa28:	a8800017 	ldw	r2,0(r21)
8111aa2c:	b0800215 	stw	r2,8(r22)
8111aa30:	a8800117 	ldw	r2,4(r21)
8111aa34:	b0800315 	stw	r2,12(r22)
8111aa38:	008006c4 	movi	r2,27
8111aa3c:	11807f36 	bltu	r2,r6,8111ac3c <_realloc_r+0x4b0>
8111aa40:	b0800404 	addi	r2,r22,16
8111aa44:	ad400204 	addi	r21,r21,8
8111aa48:	00002d06 	br	8111ab00 <_realloc_r+0x374>
8111aa4c:	adbffe17 	ldw	r22,-8(r21)
8111aa50:	00bfff04 	movi	r2,-4
8111aa54:	9dadc83a 	sub	r22,r19,r22
8111aa58:	b1000117 	ldw	r4,4(r22)
8111aa5c:	2084703a 	and	r2,r4,r2
8111aa60:	b03f7726 	beq	r22,zero,8111a840 <__reset+0xfb0fa840>
8111aa64:	80af883a 	add	r23,r16,r2
8111aa68:	b8ff7516 	blt	r23,r3,8111a840 <__reset+0xfb0fa840>
8111aa6c:	b0800317 	ldw	r2,12(r22)
8111aa70:	b0c00217 	ldw	r3,8(r22)
8111aa74:	81bfff04 	addi	r6,r16,-4
8111aa78:	01000904 	movi	r4,36
8111aa7c:	18800315 	stw	r2,12(r3)
8111aa80:	10c00215 	stw	r3,8(r2)
8111aa84:	b4800204 	addi	r18,r22,8
8111aa88:	21bfe52e 	bgeu	r4,r6,8111aa20 <__reset+0xfb0faa20>
8111aa8c:	a80b883a 	mov	r5,r21
8111aa90:	9009883a 	mov	r4,r18
8111aa94:	11193f40 	call	811193f4 <memmove>
8111aa98:	b821883a 	mov	r16,r23
8111aa9c:	b027883a 	mov	r19,r22
8111aaa0:	003f8a06 	br	8111a8cc <__reset+0xfb0fa8cc>
8111aaa4:	300b883a 	mov	r5,r6
8111aaa8:	dfc00917 	ldw	ra,36(sp)
8111aaac:	df000817 	ldw	fp,32(sp)
8111aab0:	ddc00717 	ldw	r23,28(sp)
8111aab4:	dd800617 	ldw	r22,24(sp)
8111aab8:	dd400517 	ldw	r21,20(sp)
8111aabc:	dd000417 	ldw	r20,16(sp)
8111aac0:	dcc00317 	ldw	r19,12(sp)
8111aac4:	dc800217 	ldw	r18,8(sp)
8111aac8:	dc400117 	ldw	r17,4(sp)
8111aacc:	dc000017 	ldw	r16,0(sp)
8111aad0:	dec00a04 	addi	sp,sp,40
8111aad4:	110ee081 	jmpi	8110ee08 <_malloc_r>
8111aad8:	a8c00017 	ldw	r3,0(r21)
8111aadc:	90c00015 	stw	r3,0(r18)
8111aae0:	a8c00117 	ldw	r3,4(r21)
8111aae4:	90c00115 	stw	r3,4(r18)
8111aae8:	00c006c4 	movi	r3,27
8111aaec:	19804536 	bltu	r3,r6,8111ac04 <_realloc_r+0x478>
8111aaf0:	90800204 	addi	r2,r18,8
8111aaf4:	a8c00204 	addi	r3,r21,8
8111aaf8:	003f6306 	br	8111a888 <__reset+0xfb0fa888>
8111aafc:	9005883a 	mov	r2,r18
8111ab00:	a8c00017 	ldw	r3,0(r21)
8111ab04:	b821883a 	mov	r16,r23
8111ab08:	b027883a 	mov	r19,r22
8111ab0c:	10c00015 	stw	r3,0(r2)
8111ab10:	a8c00117 	ldw	r3,4(r21)
8111ab14:	10c00115 	stw	r3,4(r2)
8111ab18:	a8c00217 	ldw	r3,8(r21)
8111ab1c:	10c00215 	stw	r3,8(r2)
8111ab20:	003f6a06 	br	8111a8cc <__reset+0xfb0fa8cc>
8111ab24:	9c67883a 	add	r19,r19,r17
8111ab28:	4445c83a 	sub	r2,r8,r17
8111ab2c:	e4c00215 	stw	r19,8(fp)
8111ab30:	10800054 	ori	r2,r2,1
8111ab34:	98800115 	stw	r2,4(r19)
8111ab38:	a8bfff17 	ldw	r2,-4(r21)
8111ab3c:	a009883a 	mov	r4,r20
8111ab40:	1080004c 	andi	r2,r2,1
8111ab44:	1462b03a 	or	r17,r2,r17
8111ab48:	ac7fff15 	stw	r17,-4(r21)
8111ab4c:	1124ea00 	call	81124ea0 <__malloc_unlock>
8111ab50:	a805883a 	mov	r2,r21
8111ab54:	003f6b06 	br	8111a904 <__reset+0xfb0fa904>
8111ab58:	a80b883a 	mov	r5,r21
8111ab5c:	9009883a 	mov	r4,r18
8111ab60:	11193f40 	call	811193f4 <memmove>
8111ab64:	003f4e06 	br	8111a8a0 <__reset+0xfb0fa8a0>
8111ab68:	89000404 	addi	r4,r17,16
8111ab6c:	b93fbc16 	blt	r23,r4,8111aa60 <__reset+0xfb0faa60>
8111ab70:	b0800317 	ldw	r2,12(r22)
8111ab74:	b0c00217 	ldw	r3,8(r22)
8111ab78:	81bfff04 	addi	r6,r16,-4
8111ab7c:	01000904 	movi	r4,36
8111ab80:	18800315 	stw	r2,12(r3)
8111ab84:	10c00215 	stw	r3,8(r2)
8111ab88:	b4800204 	addi	r18,r22,8
8111ab8c:	21804336 	bltu	r4,r6,8111ac9c <_realloc_r+0x510>
8111ab90:	008004c4 	movi	r2,19
8111ab94:	11803f2e 	bgeu	r2,r6,8111ac94 <_realloc_r+0x508>
8111ab98:	a8800017 	ldw	r2,0(r21)
8111ab9c:	b0800215 	stw	r2,8(r22)
8111aba0:	a8800117 	ldw	r2,4(r21)
8111aba4:	b0800315 	stw	r2,12(r22)
8111aba8:	008006c4 	movi	r2,27
8111abac:	11803f36 	bltu	r2,r6,8111acac <_realloc_r+0x520>
8111abb0:	b0800404 	addi	r2,r22,16
8111abb4:	ad400204 	addi	r21,r21,8
8111abb8:	a8c00017 	ldw	r3,0(r21)
8111abbc:	10c00015 	stw	r3,0(r2)
8111abc0:	a8c00117 	ldw	r3,4(r21)
8111abc4:	10c00115 	stw	r3,4(r2)
8111abc8:	a8c00217 	ldw	r3,8(r21)
8111abcc:	10c00215 	stw	r3,8(r2)
8111abd0:	b447883a 	add	r3,r22,r17
8111abd4:	bc45c83a 	sub	r2,r23,r17
8111abd8:	e0c00215 	stw	r3,8(fp)
8111abdc:	10800054 	ori	r2,r2,1
8111abe0:	18800115 	stw	r2,4(r3)
8111abe4:	b0800117 	ldw	r2,4(r22)
8111abe8:	a009883a 	mov	r4,r20
8111abec:	1080004c 	andi	r2,r2,1
8111abf0:	1462b03a 	or	r17,r2,r17
8111abf4:	b4400115 	stw	r17,4(r22)
8111abf8:	1124ea00 	call	81124ea0 <__malloc_unlock>
8111abfc:	9005883a 	mov	r2,r18
8111ac00:	003f4006 	br	8111a904 <__reset+0xfb0fa904>
8111ac04:	a8c00217 	ldw	r3,8(r21)
8111ac08:	90c00215 	stw	r3,8(r18)
8111ac0c:	a8c00317 	ldw	r3,12(r21)
8111ac10:	90c00315 	stw	r3,12(r18)
8111ac14:	30801126 	beq	r6,r2,8111ac5c <_realloc_r+0x4d0>
8111ac18:	90800404 	addi	r2,r18,16
8111ac1c:	a8c00404 	addi	r3,r21,16
8111ac20:	003f1906 	br	8111a888 <__reset+0xfb0fa888>
8111ac24:	90ffff17 	ldw	r3,-4(r18)
8111ac28:	00bfff04 	movi	r2,-4
8111ac2c:	a825883a 	mov	r18,r21
8111ac30:	1884703a 	and	r2,r3,r2
8111ac34:	80a1883a 	add	r16,r16,r2
8111ac38:	003f2406 	br	8111a8cc <__reset+0xfb0fa8cc>
8111ac3c:	a8800217 	ldw	r2,8(r21)
8111ac40:	b0800415 	stw	r2,16(r22)
8111ac44:	a8800317 	ldw	r2,12(r21)
8111ac48:	b0800515 	stw	r2,20(r22)
8111ac4c:	31000a26 	beq	r6,r4,8111ac78 <_realloc_r+0x4ec>
8111ac50:	b0800604 	addi	r2,r22,24
8111ac54:	ad400404 	addi	r21,r21,16
8111ac58:	003fa906 	br	8111ab00 <__reset+0xfb0fab00>
8111ac5c:	a9000417 	ldw	r4,16(r21)
8111ac60:	90800604 	addi	r2,r18,24
8111ac64:	a8c00604 	addi	r3,r21,24
8111ac68:	91000415 	stw	r4,16(r18)
8111ac6c:	a9000517 	ldw	r4,20(r21)
8111ac70:	91000515 	stw	r4,20(r18)
8111ac74:	003f0406 	br	8111a888 <__reset+0xfb0fa888>
8111ac78:	a8c00417 	ldw	r3,16(r21)
8111ac7c:	ad400604 	addi	r21,r21,24
8111ac80:	b0800804 	addi	r2,r22,32
8111ac84:	b0c00615 	stw	r3,24(r22)
8111ac88:	a8ffff17 	ldw	r3,-4(r21)
8111ac8c:	b0c00715 	stw	r3,28(r22)
8111ac90:	003f9b06 	br	8111ab00 <__reset+0xfb0fab00>
8111ac94:	9005883a 	mov	r2,r18
8111ac98:	003fc706 	br	8111abb8 <__reset+0xfb0fabb8>
8111ac9c:	a80b883a 	mov	r5,r21
8111aca0:	9009883a 	mov	r4,r18
8111aca4:	11193f40 	call	811193f4 <memmove>
8111aca8:	003fc906 	br	8111abd0 <__reset+0xfb0fabd0>
8111acac:	a8800217 	ldw	r2,8(r21)
8111acb0:	b0800415 	stw	r2,16(r22)
8111acb4:	a8800317 	ldw	r2,12(r21)
8111acb8:	b0800515 	stw	r2,20(r22)
8111acbc:	31000726 	beq	r6,r4,8111acdc <_realloc_r+0x550>
8111acc0:	b0800604 	addi	r2,r22,24
8111acc4:	ad400404 	addi	r21,r21,16
8111acc8:	003fbb06 	br	8111abb8 <__reset+0xfb0fabb8>
8111accc:	a009883a 	mov	r4,r20
8111acd0:	1124ea00 	call	81124ea0 <__malloc_unlock>
8111acd4:	0005883a 	mov	r2,zero
8111acd8:	003f0a06 	br	8111a904 <__reset+0xfb0fa904>
8111acdc:	a8c00417 	ldw	r3,16(r21)
8111ace0:	ad400604 	addi	r21,r21,24
8111ace4:	b0800804 	addi	r2,r22,32
8111ace8:	b0c00615 	stw	r3,24(r22)
8111acec:	a8ffff17 	ldw	r3,-4(r21)
8111acf0:	b0c00715 	stw	r3,28(r22)
8111acf4:	003fb006 	br	8111abb8 <__reset+0xfb0fabb8>

8111acf8 <__fpclassifyd>:
8111acf8:	00a00034 	movhi	r2,32768
8111acfc:	10bfffc4 	addi	r2,r2,-1
8111ad00:	2884703a 	and	r2,r5,r2
8111ad04:	10000726 	beq	r2,zero,8111ad24 <__fpclassifyd+0x2c>
8111ad08:	00fffc34 	movhi	r3,65520
8111ad0c:	019ff834 	movhi	r6,32736
8111ad10:	28c7883a 	add	r3,r5,r3
8111ad14:	31bfffc4 	addi	r6,r6,-1
8111ad18:	30c00536 	bltu	r6,r3,8111ad30 <__fpclassifyd+0x38>
8111ad1c:	00800104 	movi	r2,4
8111ad20:	f800283a 	ret
8111ad24:	2000021e 	bne	r4,zero,8111ad30 <__fpclassifyd+0x38>
8111ad28:	00800084 	movi	r2,2
8111ad2c:	f800283a 	ret
8111ad30:	00dffc34 	movhi	r3,32752
8111ad34:	019ff834 	movhi	r6,32736
8111ad38:	28cb883a 	add	r5,r5,r3
8111ad3c:	31bfffc4 	addi	r6,r6,-1
8111ad40:	317ff62e 	bgeu	r6,r5,8111ad1c <__reset+0xfb0fad1c>
8111ad44:	01400434 	movhi	r5,16
8111ad48:	297fffc4 	addi	r5,r5,-1
8111ad4c:	28800236 	bltu	r5,r2,8111ad58 <__fpclassifyd+0x60>
8111ad50:	008000c4 	movi	r2,3
8111ad54:	f800283a 	ret
8111ad58:	10c00226 	beq	r2,r3,8111ad64 <__fpclassifyd+0x6c>
8111ad5c:	0005883a 	mov	r2,zero
8111ad60:	f800283a 	ret
8111ad64:	2005003a 	cmpeq	r2,r4,zero
8111ad68:	f800283a 	ret

8111ad6c <__sccl>:
8111ad6c:	2a000003 	ldbu	r8,0(r5)
8111ad70:	00801784 	movi	r2,94
8111ad74:	40802a26 	beq	r8,r2,8111ae20 <__sccl+0xb4>
8111ad78:	29400044 	addi	r5,r5,1
8111ad7c:	000f883a 	mov	r7,zero
8111ad80:	0013883a 	mov	r9,zero
8111ad84:	2007883a 	mov	r3,r4
8111ad88:	21804004 	addi	r6,r4,256
8111ad8c:	19c00005 	stb	r7,0(r3)
8111ad90:	18c00044 	addi	r3,r3,1
8111ad94:	19bffd1e 	bne	r3,r6,8111ad8c <__reset+0xfb0fad8c>
8111ad98:	40001126 	beq	r8,zero,8111ade0 <__sccl+0x74>
8111ad9c:	00800044 	movi	r2,1
8111ada0:	124fc83a 	sub	r7,r2,r9
8111ada4:	02800b44 	movi	r10,45
8111ada8:	02c01744 	movi	r11,93
8111adac:	2205883a 	add	r2,r4,r8
8111adb0:	11c00005 	stb	r7,0(r2)
8111adb4:	28800044 	addi	r2,r5,1
8111adb8:	28c00003 	ldbu	r3,0(r5)
8111adbc:	1a800a26 	beq	r3,r10,8111ade8 <__sccl+0x7c>
8111adc0:	1ac00426 	beq	r3,r11,8111add4 <__sccl+0x68>
8111adc4:	18000426 	beq	r3,zero,8111add8 <__sccl+0x6c>
8111adc8:	1811883a 	mov	r8,r3
8111adcc:	100b883a 	mov	r5,r2
8111add0:	003ff606 	br	8111adac <__reset+0xfb0fadac>
8111add4:	f800283a 	ret
8111add8:	2805883a 	mov	r2,r5
8111addc:	f800283a 	ret
8111ade0:	28bfffc4 	addi	r2,r5,-1
8111ade4:	f800283a 	ret
8111ade8:	12400003 	ldbu	r9,0(r2)
8111adec:	4ac01126 	beq	r9,r11,8111ae34 <__sccl+0xc8>
8111adf0:	4a001016 	blt	r9,r8,8111ae34 <__sccl+0xc8>
8111adf4:	41800044 	addi	r6,r8,1
8111adf8:	29400084 	addi	r5,r5,2
8111adfc:	2187883a 	add	r3,r4,r6
8111ae00:	00000106 	br	8111ae08 <__sccl+0x9c>
8111ae04:	31800044 	addi	r6,r6,1
8111ae08:	19c00005 	stb	r7,0(r3)
8111ae0c:	3011883a 	mov	r8,r6
8111ae10:	18c00044 	addi	r3,r3,1
8111ae14:	327ffb16 	blt	r6,r9,8111ae04 <__reset+0xfb0fae04>
8111ae18:	10800084 	addi	r2,r2,2
8111ae1c:	003fe606 	br	8111adb8 <__reset+0xfb0fadb8>
8111ae20:	2a000043 	ldbu	r8,1(r5)
8111ae24:	01c00044 	movi	r7,1
8111ae28:	29400084 	addi	r5,r5,2
8111ae2c:	02400044 	movi	r9,1
8111ae30:	003fd406 	br	8111ad84 <__reset+0xfb0fad84>
8111ae34:	5011883a 	mov	r8,r10
8111ae38:	003fe406 	br	8111adcc <__reset+0xfb0fadcc>

8111ae3c <nanf>:
8111ae3c:	009ff034 	movhi	r2,32704
8111ae40:	f800283a 	ret

8111ae44 <strcmp>:
8111ae44:	2144b03a 	or	r2,r4,r5
8111ae48:	108000cc 	andi	r2,r2,3
8111ae4c:	1000171e 	bne	r2,zero,8111aeac <strcmp+0x68>
8111ae50:	20800017 	ldw	r2,0(r4)
8111ae54:	28c00017 	ldw	r3,0(r5)
8111ae58:	10c0141e 	bne	r2,r3,8111aeac <strcmp+0x68>
8111ae5c:	027fbff4 	movhi	r9,65279
8111ae60:	4a7fbfc4 	addi	r9,r9,-257
8111ae64:	0086303a 	nor	r3,zero,r2
8111ae68:	02202074 	movhi	r8,32897
8111ae6c:	1245883a 	add	r2,r2,r9
8111ae70:	42202004 	addi	r8,r8,-32640
8111ae74:	10c4703a 	and	r2,r2,r3
8111ae78:	1204703a 	and	r2,r2,r8
8111ae7c:	10000226 	beq	r2,zero,8111ae88 <strcmp+0x44>
8111ae80:	00002306 	br	8111af10 <strcmp+0xcc>
8111ae84:	1000221e 	bne	r2,zero,8111af10 <strcmp+0xcc>
8111ae88:	21000104 	addi	r4,r4,4
8111ae8c:	20c00017 	ldw	r3,0(r4)
8111ae90:	29400104 	addi	r5,r5,4
8111ae94:	29800017 	ldw	r6,0(r5)
8111ae98:	1a4f883a 	add	r7,r3,r9
8111ae9c:	00c4303a 	nor	r2,zero,r3
8111aea0:	3884703a 	and	r2,r7,r2
8111aea4:	1204703a 	and	r2,r2,r8
8111aea8:	19bff626 	beq	r3,r6,8111ae84 <__reset+0xfb0fae84>
8111aeac:	20800003 	ldbu	r2,0(r4)
8111aeb0:	10c03fcc 	andi	r3,r2,255
8111aeb4:	18c0201c 	xori	r3,r3,128
8111aeb8:	18ffe004 	addi	r3,r3,-128
8111aebc:	18000c26 	beq	r3,zero,8111aef0 <strcmp+0xac>
8111aec0:	29800007 	ldb	r6,0(r5)
8111aec4:	19800326 	beq	r3,r6,8111aed4 <strcmp+0x90>
8111aec8:	00001306 	br	8111af18 <strcmp+0xd4>
8111aecc:	29800007 	ldb	r6,0(r5)
8111aed0:	11800b1e 	bne	r2,r6,8111af00 <strcmp+0xbc>
8111aed4:	21000044 	addi	r4,r4,1
8111aed8:	20c00003 	ldbu	r3,0(r4)
8111aedc:	29400044 	addi	r5,r5,1
8111aee0:	18803fcc 	andi	r2,r3,255
8111aee4:	1080201c 	xori	r2,r2,128
8111aee8:	10bfe004 	addi	r2,r2,-128
8111aeec:	103ff71e 	bne	r2,zero,8111aecc <__reset+0xfb0faecc>
8111aef0:	0007883a 	mov	r3,zero
8111aef4:	28800003 	ldbu	r2,0(r5)
8111aef8:	1885c83a 	sub	r2,r3,r2
8111aefc:	f800283a 	ret
8111af00:	28800003 	ldbu	r2,0(r5)
8111af04:	18c03fcc 	andi	r3,r3,255
8111af08:	1885c83a 	sub	r2,r3,r2
8111af0c:	f800283a 	ret
8111af10:	0005883a 	mov	r2,zero
8111af14:	f800283a 	ret
8111af18:	10c03fcc 	andi	r3,r2,255
8111af1c:	003ff506 	br	8111aef4 <__reset+0xfb0faef4>

8111af20 <sulp>:
8111af20:	defffd04 	addi	sp,sp,-12
8111af24:	de00012e 	bgeu	sp,et,8111af2c <sulp+0xc>
8111af28:	003b68fa 	trap	3
8111af2c:	dc400115 	stw	r17,4(sp)
8111af30:	3023883a 	mov	r17,r6
8111af34:	dc000015 	stw	r16,0(sp)
8111af38:	dfc00215 	stw	ra,8(sp)
8111af3c:	2821883a 	mov	r16,r5
8111af40:	111a0b40 	call	8111a0b4 <__ulp>
8111af44:	88000c26 	beq	r17,zero,8111af78 <sulp+0x58>
8111af48:	841ffc2c 	andhi	r16,r16,32752
8111af4c:	8020d53a 	srli	r16,r16,20
8111af50:	01c01ac4 	movi	r7,107
8111af54:	3c21c83a 	sub	r16,r7,r16
8111af58:	0400070e 	bge	zero,r16,8111af78 <sulp+0x58>
8111af5c:	8020953a 	slli	r16,r16,20
8111af60:	01cffc34 	movhi	r7,16368
8111af64:	000d883a 	mov	r6,zero
8111af68:	81cf883a 	add	r7,r16,r7
8111af6c:	1009883a 	mov	r4,r2
8111af70:	180b883a 	mov	r5,r3
8111af74:	110da7c0 	call	8110da7c <__muldf3>
8111af78:	dfc00217 	ldw	ra,8(sp)
8111af7c:	dc400117 	ldw	r17,4(sp)
8111af80:	dc000017 	ldw	r16,0(sp)
8111af84:	dec00304 	addi	sp,sp,12
8111af88:	f800283a 	ret

8111af8c <_strtod_r>:
8111af8c:	deffe204 	addi	sp,sp,-120
8111af90:	de00012e 	bgeu	sp,et,8111af98 <_strtod_r+0xc>
8111af94:	003b68fa 	trap	3
8111af98:	ddc01b15 	stw	r23,108(sp)
8111af9c:	dd001815 	stw	r20,96(sp)
8111afa0:	dc801615 	stw	r18,88(sp)
8111afa4:	dc401515 	stw	r17,84(sp)
8111afa8:	dc001415 	stw	r16,80(sp)
8111afac:	d9400615 	stw	r5,24(sp)
8111afb0:	dfc01d15 	stw	ra,116(sp)
8111afb4:	df001c15 	stw	fp,112(sp)
8111afb8:	dd801a15 	stw	r22,104(sp)
8111afbc:	dd401915 	stw	r21,100(sp)
8111afc0:	dcc01715 	stw	r19,92(sp)
8111afc4:	2021883a 	mov	r16,r4
8111afc8:	d8000515 	stw	zero,20(sp)
8111afcc:	2809883a 	mov	r4,r5
8111afd0:	20800003 	ldbu	r2,0(r4)
8111afd4:	01e044b4 	movhi	r7,33042
8111afd8:	282f883a 	mov	r23,r5
8111afdc:	10c03fcc 	andi	r3,r2,255
8111afe0:	01400b44 	movi	r5,45
8111afe4:	39ec0204 	addi	r7,r7,-20472
8111afe8:	3029883a 	mov	r20,r6
8111afec:	0025883a 	mov	r18,zero
8111aff0:	0023883a 	mov	r17,zero
8111aff4:	28c0ba36 	bltu	r5,r3,8111b2e0 <_strtod_r+0x354>
8111aff8:	180690ba 	slli	r3,r3,2
8111affc:	19c7883a 	add	r3,r3,r7
8111b000:	18c00017 	ldw	r3,0(r3)
8111b004:	1800683a 	jmp	r3
8111b008:	8111b0c8 	cmpgei	r4,r16,18115
8111b00c:	8111b2e0 	cmpeqi	r4,r16,18123
8111b010:	8111b2e0 	cmpeqi	r4,r16,18123
8111b014:	8111b2e0 	cmpeqi	r4,r16,18123
8111b018:	8111b2e0 	cmpeqi	r4,r16,18123
8111b01c:	8111b2e0 	cmpeqi	r4,r16,18123
8111b020:	8111b2e0 	cmpeqi	r4,r16,18123
8111b024:	8111b2e0 	cmpeqi	r4,r16,18123
8111b028:	8111b2e0 	cmpeqi	r4,r16,18123
8111b02c:	8111b2cc 	andi	r4,r16,18123
8111b030:	8111b2cc 	andi	r4,r16,18123
8111b034:	8111b2cc 	andi	r4,r16,18123
8111b038:	8111b2cc 	andi	r4,r16,18123
8111b03c:	8111b2cc 	andi	r4,r16,18123
8111b040:	8111b2e0 	cmpeqi	r4,r16,18123
8111b044:	8111b2e0 	cmpeqi	r4,r16,18123
8111b048:	8111b2e0 	cmpeqi	r4,r16,18123
8111b04c:	8111b2e0 	cmpeqi	r4,r16,18123
8111b050:	8111b2e0 	cmpeqi	r4,r16,18123
8111b054:	8111b2e0 	cmpeqi	r4,r16,18123
8111b058:	8111b2e0 	cmpeqi	r4,r16,18123
8111b05c:	8111b2e0 	cmpeqi	r4,r16,18123
8111b060:	8111b2e0 	cmpeqi	r4,r16,18123
8111b064:	8111b2e0 	cmpeqi	r4,r16,18123
8111b068:	8111b2e0 	cmpeqi	r4,r16,18123
8111b06c:	8111b2e0 	cmpeqi	r4,r16,18123
8111b070:	8111b2e0 	cmpeqi	r4,r16,18123
8111b074:	8111b2e0 	cmpeqi	r4,r16,18123
8111b078:	8111b2e0 	cmpeqi	r4,r16,18123
8111b07c:	8111b2e0 	cmpeqi	r4,r16,18123
8111b080:	8111b2e0 	cmpeqi	r4,r16,18123
8111b084:	8111b2e0 	cmpeqi	r4,r16,18123
8111b088:	8111b2cc 	andi	r4,r16,18123
8111b08c:	8111b2e0 	cmpeqi	r4,r16,18123
8111b090:	8111b2e0 	cmpeqi	r4,r16,18123
8111b094:	8111b2e0 	cmpeqi	r4,r16,18123
8111b098:	8111b2e0 	cmpeqi	r4,r16,18123
8111b09c:	8111b2e0 	cmpeqi	r4,r16,18123
8111b0a0:	8111b2e0 	cmpeqi	r4,r16,18123
8111b0a4:	8111b2e0 	cmpeqi	r4,r16,18123
8111b0a8:	8111b2e0 	cmpeqi	r4,r16,18123
8111b0ac:	8111b2e0 	cmpeqi	r4,r16,18123
8111b0b0:	8111b2e0 	cmpeqi	r4,r16,18123
8111b0b4:	8111b120 	cmpeqi	r4,r16,18116
8111b0b8:	8111b2e0 	cmpeqi	r4,r16,18123
8111b0bc:	8111b2c0 	call	88111b2c <__reset+0x20f1b2c>
8111b0c0:	00801244 	movi	r2,73
8111b0c4:	88843526 	beq	r17,r2,8111c19c <_strtod_r+0x1210>
8111b0c8:	002b883a 	mov	r21,zero
8111b0cc:	002d883a 	mov	r22,zero
8111b0d0:	a0000526 	beq	r20,zero,8111b0e8 <_strtod_r+0x15c>
8111b0d4:	d8000715 	stw	zero,28(sp)
8111b0d8:	a5c00015 	stw	r23,0(r20)
8111b0dc:	d9000717 	ldw	r4,28(sp)
8111b0e0:	20000126 	beq	r4,zero,8111b0e8 <_strtod_r+0x15c>
8111b0e4:	b5a0003c 	xorhi	r22,r22,32768
8111b0e8:	a805883a 	mov	r2,r21
8111b0ec:	b007883a 	mov	r3,r22
8111b0f0:	dfc01d17 	ldw	ra,116(sp)
8111b0f4:	df001c17 	ldw	fp,112(sp)
8111b0f8:	ddc01b17 	ldw	r23,108(sp)
8111b0fc:	dd801a17 	ldw	r22,104(sp)
8111b100:	dd401917 	ldw	r21,100(sp)
8111b104:	dd001817 	ldw	r20,96(sp)
8111b108:	dcc01717 	ldw	r19,92(sp)
8111b10c:	dc801617 	ldw	r18,88(sp)
8111b110:	dc401517 	ldw	r17,84(sp)
8111b114:	dc001417 	ldw	r16,80(sp)
8111b118:	dec01e04 	addi	sp,sp,120
8111b11c:	f800283a 	ret
8111b120:	d8000715 	stw	zero,28(sp)
8111b124:	24c00044 	addi	r19,r4,1
8111b128:	dcc00615 	stw	r19,24(sp)
8111b12c:	20800043 	ldbu	r2,1(r4)
8111b130:	10c03fcc 	andi	r3,r2,255
8111b134:	18c0201c 	xori	r3,r3,128
8111b138:	18ffe004 	addi	r3,r3,-128
8111b13c:	183fe226 	beq	r3,zero,8111b0c8 <__reset+0xfb0fb0c8>
8111b140:	11403fcc 	andi	r5,r2,255
8111b144:	2940201c 	xori	r5,r5,128
8111b148:	297fe004 	addi	r5,r5,-128
8111b14c:	00c00c04 	movi	r3,48
8111b150:	28c0e526 	beq	r5,r3,8111b4e8 <_strtod_r+0x55c>
8111b154:	dcc00815 	stw	r19,32(sp)
8111b158:	0025883a 	mov	r18,zero
8111b15c:	10fff404 	addi	r3,r2,-48
8111b160:	18c03fcc 	andi	r3,r3,255
8111b164:	01000244 	movi	r4,9
8111b168:	20c37536 	bltu	r4,r3,8111bf40 <_strtod_r+0xfb4>
8111b16c:	dd400817 	ldw	r21,32(sp)
8111b170:	0027883a 	mov	r19,zero
8111b174:	0039883a 	mov	fp,zero
8111b178:	002d883a 	mov	r22,zero
8111b17c:	01400204 	movi	r5,8
8111b180:	2d805a16 	blt	r5,r22,8111b2ec <_strtod_r+0x360>
8111b184:	e70002a4 	muli	fp,fp,10
8111b188:	10c03fcc 	andi	r3,r2,255
8111b18c:	18c0201c 	xori	r3,r3,128
8111b190:	18ffe004 	addi	r3,r3,-128
8111b194:	e0f9883a 	add	fp,fp,r3
8111b198:	e73ff404 	addi	fp,fp,-48
8111b19c:	ad400044 	addi	r21,r21,1
8111b1a0:	dd400615 	stw	r21,24(sp)
8111b1a4:	a8800003 	ldbu	r2,0(r21)
8111b1a8:	b5800044 	addi	r22,r22,1
8111b1ac:	10fff404 	addi	r3,r2,-48
8111b1b0:	18c03fcc 	andi	r3,r3,255
8111b1b4:	20fff22e 	bgeu	r4,r3,8111b180 <__reset+0xfb0fb180>
8111b1b8:	14403fcc 	andi	r17,r2,255
8111b1bc:	8c40201c 	xori	r17,r17,128
8111b1c0:	8c7fe004 	addi	r17,r17,-128
8111b1c4:	8009883a 	mov	r4,r16
8111b1c8:	11190340 	call	81119034 <_localeconv_r>
8111b1cc:	11400017 	ldw	r5,0(r2)
8111b1d0:	8009883a 	mov	r4,r16
8111b1d4:	d9401315 	stw	r5,76(sp)
8111b1d8:	11190340 	call	81119034 <_localeconv_r>
8111b1dc:	11000017 	ldw	r4,0(r2)
8111b1e0:	110ffb80 	call	8110ffb8 <strlen>
8111b1e4:	d9401317 	ldw	r5,76(sp)
8111b1e8:	100d883a 	mov	r6,r2
8111b1ec:	a809883a 	mov	r4,r21
8111b1f0:	1120cdc0 	call	81120cdc <strncmp>
8111b1f4:	1000ce26 	beq	r2,zero,8111b530 <_strtod_r+0x5a4>
8111b1f8:	b013883a 	mov	r9,r22
8111b1fc:	000b883a 	mov	r5,zero
8111b200:	0015883a 	mov	r10,zero
8111b204:	0017883a 	mov	r11,zero
8111b208:	00801944 	movi	r2,101
8111b20c:	88807826 	beq	r17,r2,8111b3f0 <_strtod_r+0x464>
8111b210:	00801144 	movi	r2,69
8111b214:	88807626 	beq	r17,r2,8111b3f0 <_strtod_r+0x464>
8111b218:	002b883a 	mov	r21,zero
8111b21c:	48003d1e 	bne	r9,zero,8111b314 <_strtod_r+0x388>
8111b220:	2800391e 	bne	r5,zero,8111b308 <_strtod_r+0x37c>
8111b224:	9000381e 	bne	r18,zero,8111b308 <_strtod_r+0x37c>
8111b228:	583fa71e 	bne	r11,zero,8111b0c8 <__reset+0xfb0fb0c8>
8111b22c:	00801384 	movi	r2,78
8111b230:	88800526 	beq	r17,r2,8111b248 <_strtod_r+0x2bc>
8111b234:	147fa20e 	bge	r2,r17,8111b0c0 <__reset+0xfb0fb0c0>
8111b238:	00801a44 	movi	r2,105
8111b23c:	8883d726 	beq	r17,r2,8111c19c <_strtod_r+0x1210>
8111b240:	00801b84 	movi	r2,110
8111b244:	88bfa01e 	bne	r17,r2,8111b0c8 <__reset+0xfb0fb0c8>
8111b248:	01604534 	movhi	r5,33044
8111b24c:	d9000617 	ldw	r4,24(sp)
8111b250:	296ea004 	addi	r5,r5,-17792
8111b254:	01c00644 	movi	r7,25
8111b258:	00000b06 	br	8111b288 <_strtod_r+0x2fc>
8111b25c:	21000044 	addi	r4,r4,1
8111b260:	20800003 	ldbu	r2,0(r4)
8111b264:	10ffefc4 	addi	r3,r2,-65
8111b268:	10803fcc 	andi	r2,r2,255
8111b26c:	1080201c 	xori	r2,r2,128
8111b270:	18c03fcc 	andi	r3,r3,255
8111b274:	10bfe004 	addi	r2,r2,-128
8111b278:	38c00136 	bltu	r7,r3,8111b280 <_strtod_r+0x2f4>
8111b27c:	10800804 	addi	r2,r2,32
8111b280:	29400044 	addi	r5,r5,1
8111b284:	11bf901e 	bne	r2,r6,8111b0c8 <__reset+0xfb0fb0c8>
8111b288:	29800007 	ldb	r6,0(r5)
8111b28c:	303ff31e 	bne	r6,zero,8111b25c <__reset+0xfb0fb25c>
8111b290:	20800044 	addi	r2,r4,1
8111b294:	d8800615 	stw	r2,24(sp)
8111b298:	20c00047 	ldb	r3,1(r4)
8111b29c:	00800a04 	movi	r2,40
8111b2a0:	18849d26 	beq	r3,r2,8111c518 <_strtod_r+0x158c>
8111b2a4:	047ffe34 	movhi	r17,65528
8111b2a8:	0025883a 	mov	r18,zero
8111b2ac:	902b883a 	mov	r21,r18
8111b2b0:	882d883a 	mov	r22,r17
8111b2b4:	a03f8926 	beq	r20,zero,8111b0dc <__reset+0xfb0fb0dc>
8111b2b8:	ddc00617 	ldw	r23,24(sp)
8111b2bc:	003f8606 	br	8111b0d8 <__reset+0xfb0fb0d8>
8111b2c0:	00800044 	movi	r2,1
8111b2c4:	d8800715 	stw	r2,28(sp)
8111b2c8:	003f9606 	br	8111b124 <__reset+0xfb0fb124>
8111b2cc:	21000044 	addi	r4,r4,1
8111b2d0:	d9000615 	stw	r4,24(sp)
8111b2d4:	20800003 	ldbu	r2,0(r4)
8111b2d8:	10c03fcc 	andi	r3,r2,255
8111b2dc:	28ff462e 	bgeu	r5,r3,8111aff8 <__reset+0xfb0faff8>
8111b2e0:	2027883a 	mov	r19,r4
8111b2e4:	d8000715 	stw	zero,28(sp)
8111b2e8:	003f9506 	br	8111b140 <__reset+0xfb0fb140>
8111b2ec:	9cc002a4 	muli	r19,r19,10
8111b2f0:	10803fcc 	andi	r2,r2,255
8111b2f4:	1080201c 	xori	r2,r2,128
8111b2f8:	10bfe004 	addi	r2,r2,-128
8111b2fc:	9885883a 	add	r2,r19,r2
8111b300:	14fff404 	addi	r19,r2,-48
8111b304:	003fa506 	br	8111b19c <__reset+0xfb0fb19c>
8111b308:	002b883a 	mov	r21,zero
8111b30c:	002d883a 	mov	r22,zero
8111b310:	003fe806 	br	8111b2b4 <__reset+0xfb0fb2b4>
8111b314:	aaabc83a 	sub	r21,r21,r10
8111b318:	b000011e 	bne	r22,zero,8111b320 <_strtod_r+0x394>
8111b31c:	482d883a 	mov	r22,r9
8111b320:	00800404 	movi	r2,16
8111b324:	482f883a 	mov	r23,r9
8111b328:	1240010e 	bge	r2,r9,8111b330 <_strtod_r+0x3a4>
8111b32c:	102f883a 	mov	r23,r2
8111b330:	e009883a 	mov	r4,fp
8111b334:	da401315 	stw	r9,76(sp)
8111b338:	1123cfc0 	call	81123cfc <__floatunsidf>
8111b33c:	1025883a 	mov	r18,r2
8111b340:	00800244 	movi	r2,9
8111b344:	1823883a 	mov	r17,r3
8111b348:	da401317 	ldw	r9,76(sp)
8111b34c:	15c0160e 	bge	r2,r23,8111b3a8 <_strtod_r+0x41c>
8111b350:	b8bffdc4 	addi	r2,r23,-9
8111b354:	100490fa 	slli	r2,r2,3
8111b358:	180b883a 	mov	r5,r3
8111b35c:	00e04534 	movhi	r3,33044
8111b360:	18ee6b04 	addi	r3,r3,-18004
8111b364:	1885883a 	add	r2,r3,r2
8111b368:	11800017 	ldw	r6,0(r2)
8111b36c:	11c00117 	ldw	r7,4(r2)
8111b370:	9009883a 	mov	r4,r18
8111b374:	110da7c0 	call	8110da7c <__muldf3>
8111b378:	9809883a 	mov	r4,r19
8111b37c:	1025883a 	mov	r18,r2
8111b380:	1823883a 	mov	r17,r3
8111b384:	1123cfc0 	call	81123cfc <__floatunsidf>
8111b388:	9009883a 	mov	r4,r18
8111b38c:	880b883a 	mov	r5,r17
8111b390:	100d883a 	mov	r6,r2
8111b394:	180f883a 	mov	r7,r3
8111b398:	1121e980 	call	81121e98 <__adddf3>
8111b39c:	da401317 	ldw	r9,76(sp)
8111b3a0:	1025883a 	mov	r18,r2
8111b3a4:	1823883a 	mov	r17,r3
8111b3a8:	008003c4 	movi	r2,15
8111b3ac:	12407b16 	blt	r2,r9,8111b59c <_strtod_r+0x610>
8111b3b0:	a83fbe26 	beq	r21,zero,8111b2ac <__reset+0xfb0fb2ac>
8111b3b4:	0543670e 	bge	zero,r21,8111c154 <_strtod_r+0x11c8>
8111b3b8:	00c00584 	movi	r3,22
8111b3bc:	1d42e816 	blt	r3,r21,8111bf60 <_strtod_r+0xfd4>
8111b3c0:	a82a90fa 	slli	r21,r21,3
8111b3c4:	00a04534 	movhi	r2,33044
8111b3c8:	10ae6b04 	addi	r2,r2,-18004
8111b3cc:	1545883a 	add	r2,r2,r21
8111b3d0:	11000017 	ldw	r4,0(r2)
8111b3d4:	11400117 	ldw	r5,4(r2)
8111b3d8:	900d883a 	mov	r6,r18
8111b3dc:	880f883a 	mov	r7,r17
8111b3e0:	110da7c0 	call	8110da7c <__muldf3>
8111b3e4:	102b883a 	mov	r21,r2
8111b3e8:	182d883a 	mov	r22,r3
8111b3ec:	003fb106 	br	8111b2b4 <__reset+0xfb0fb2b4>
8111b3f0:	4801b526 	beq	r9,zero,8111bac8 <_strtod_r+0xb3c>
8111b3f4:	ddc00617 	ldw	r23,24(sp)
8111b3f8:	00c00ac4 	movi	r3,43
8111b3fc:	b8800044 	addi	r2,r23,1
8111b400:	d8800615 	stw	r2,24(sp)
8111b404:	b8800047 	ldb	r2,1(r23)
8111b408:	10c1e926 	beq	r2,r3,8111bbb0 <_strtod_r+0xc24>
8111b40c:	00c00b44 	movi	r3,45
8111b410:	10c1ec26 	beq	r2,r3,8111bbc4 <_strtod_r+0xc38>
8111b414:	1023883a 	mov	r17,r2
8111b418:	0019883a 	mov	r12,zero
8111b41c:	88bff404 	addi	r2,r17,-48
8111b420:	00c00244 	movi	r3,9
8111b424:	1881b736 	bltu	r3,r2,8111bb04 <_strtod_r+0xb78>
8111b428:	00800c04 	movi	r2,48
8111b42c:	8880071e 	bne	r17,r2,8111b44c <_strtod_r+0x4c0>
8111b430:	d8800617 	ldw	r2,24(sp)
8111b434:	8807883a 	mov	r3,r17
8111b438:	10800044 	addi	r2,r2,1
8111b43c:	d8800615 	stw	r2,24(sp)
8111b440:	14400007 	ldb	r17,0(r2)
8111b444:	10800044 	addi	r2,r2,1
8111b448:	88fffc26 	beq	r17,r3,8111b43c <__reset+0xfb0fb43c>
8111b44c:	88bff3c4 	addi	r2,r17,-49
8111b450:	00c00204 	movi	r3,8
8111b454:	18bf7036 	bltu	r3,r2,8111b218 <__reset+0xfb0fb218>
8111b458:	db800617 	ldw	r14,24(sp)
8111b45c:	88bff404 	addi	r2,r17,-48
8111b460:	03400244 	movi	r13,9
8111b464:	71c00044 	addi	r7,r14,1
8111b468:	d9c00615 	stw	r7,24(sp)
8111b46c:	74400043 	ldbu	r17,1(r14)
8111b470:	88fff404 	addi	r3,r17,-48
8111b474:	8c403fcc 	andi	r17,r17,255
8111b478:	8c40201c 	xori	r17,r17,128
8111b47c:	18c03fcc 	andi	r3,r3,255
8111b480:	8c7fe004 	addi	r17,r17,-128
8111b484:	68c00e36 	bltu	r13,r3,8111b4c0 <_strtod_r+0x534>
8111b488:	71000084 	addi	r4,r14,2
8111b48c:	d9000615 	stw	r4,24(sp)
8111b490:	108002a4 	muli	r2,r2,10
8111b494:	21800003 	ldbu	r6,0(r4)
8111b498:	200f883a 	mov	r7,r4
8111b49c:	1463883a 	add	r17,r2,r17
8111b4a0:	30fff404 	addi	r3,r6,-48
8111b4a4:	88bff404 	addi	r2,r17,-48
8111b4a8:	34403fcc 	andi	r17,r6,255
8111b4ac:	8c40201c 	xori	r17,r17,128
8111b4b0:	18c03fcc 	andi	r3,r3,255
8111b4b4:	8c7fe004 	addi	r17,r17,-128
8111b4b8:	21000044 	addi	r4,r4,1
8111b4bc:	68fff32e 	bgeu	r13,r3,8111b48c <__reset+0xfb0fb48c>
8111b4c0:	3b8fc83a 	sub	r7,r7,r14
8111b4c4:	00c00204 	movi	r3,8
8111b4c8:	19c29716 	blt	r3,r7,8111bf28 <_strtod_r+0xf9c>
8111b4cc:	102b883a 	mov	r21,r2
8111b4d0:	009387c4 	movi	r2,19999
8111b4d4:	1540010e 	bge	r2,r21,8111b4dc <_strtod_r+0x550>
8111b4d8:	102b883a 	mov	r21,r2
8111b4dc:	603f4f26 	beq	r12,zero,8111b21c <__reset+0xfb0fb21c>
8111b4e0:	056bc83a 	sub	r21,zero,r21
8111b4e4:	003f4d06 	br	8111b21c <__reset+0xfb0fb21c>
8111b4e8:	98800047 	ldb	r2,1(r19)
8111b4ec:	00c01604 	movi	r3,88
8111b4f0:	10c1de26 	beq	r2,r3,8111bc6c <_strtod_r+0xce0>
8111b4f4:	00c01e04 	movi	r3,120
8111b4f8:	10c1dc26 	beq	r2,r3,8111bc6c <_strtod_r+0xce0>
8111b4fc:	98c00044 	addi	r3,r19,1
8111b500:	1827883a 	mov	r19,r3
8111b504:	d8c00615 	stw	r3,24(sp)
8111b508:	18c00044 	addi	r3,r3,1
8111b50c:	18bfffc3 	ldbu	r2,-1(r3)
8111b510:	11003fcc 	andi	r4,r2,255
8111b514:	2100201c 	xori	r4,r4,128
8111b518:	213fe004 	addi	r4,r4,-128
8111b51c:	217ff826 	beq	r4,r5,8111b500 <__reset+0xfb0fb500>
8111b520:	203f7926 	beq	r4,zero,8111b308 <__reset+0xfb0fb308>
8111b524:	dcc00815 	stw	r19,32(sp)
8111b528:	04800044 	movi	r18,1
8111b52c:	003f0b06 	br	8111b15c <__reset+0xfb0fb15c>
8111b530:	8009883a 	mov	r4,r16
8111b534:	11190340 	call	81119034 <_localeconv_r>
8111b538:	11000017 	ldw	r4,0(r2)
8111b53c:	110ffb80 	call	8110ffb8 <strlen>
8111b540:	d8c00617 	ldw	r3,24(sp)
8111b544:	1885883a 	add	r2,r3,r2
8111b548:	d8800615 	stw	r2,24(sp)
8111b54c:	14400007 	ldb	r17,0(r2)
8111b550:	b001881e 	bne	r22,zero,8111bb74 <_strtod_r+0xbe8>
8111b554:	00c00c04 	movi	r3,48
8111b558:	88c3391e 	bne	r17,r3,8111c240 <_strtod_r+0x12b4>
8111b55c:	10c00044 	addi	r3,r2,1
8111b560:	8809883a 	mov	r4,r17
8111b564:	d8c00615 	stw	r3,24(sp)
8111b568:	1c400007 	ldb	r17,0(r3)
8111b56c:	188bc83a 	sub	r5,r3,r2
8111b570:	18c00044 	addi	r3,r3,1
8111b574:	893ffb26 	beq	r17,r4,8111b564 <__reset+0xfb0fb564>
8111b578:	88bff3c4 	addi	r2,r17,-49
8111b57c:	00c00204 	movi	r3,8
8111b580:	1882e72e 	bgeu	r3,r2,8111c120 <_strtod_r+0x1194>
8111b584:	00801944 	movi	r2,101
8111b588:	88814d26 	beq	r17,r2,8111bac0 <_strtod_r+0xb34>
8111b58c:	0013883a 	mov	r9,zero
8111b590:	0015883a 	mov	r10,zero
8111b594:	02c00044 	movi	r11,1
8111b598:	003f1d06 	br	8111b210 <__reset+0xfb0fb210>
8111b59c:	4defc83a 	sub	r23,r9,r23
8111b5a0:	bd6f883a 	add	r23,r23,r21
8111b5a4:	05c21e0e 	bge	zero,r23,8111be20 <_strtod_r+0xe94>
8111b5a8:	b88003cc 	andi	r2,r23,15
8111b5ac:	10000d26 	beq	r2,zero,8111b5e4 <_strtod_r+0x658>
8111b5b0:	100490fa 	slli	r2,r2,3
8111b5b4:	00e04534 	movhi	r3,33044
8111b5b8:	18ee6b04 	addi	r3,r3,-18004
8111b5bc:	1885883a 	add	r2,r3,r2
8111b5c0:	11000017 	ldw	r4,0(r2)
8111b5c4:	11400117 	ldw	r5,4(r2)
8111b5c8:	900d883a 	mov	r6,r18
8111b5cc:	880f883a 	mov	r7,r17
8111b5d0:	da401315 	stw	r9,76(sp)
8111b5d4:	110da7c0 	call	8110da7c <__muldf3>
8111b5d8:	da401317 	ldw	r9,76(sp)
8111b5dc:	1025883a 	mov	r18,r2
8111b5e0:	1823883a 	mov	r17,r3
8111b5e4:	023ffc04 	movi	r8,-16
8111b5e8:	ba10703a 	and	r8,r23,r8
8111b5ec:	40003c26 	beq	r8,zero,8111b6e0 <_strtod_r+0x754>
8111b5f0:	00804d04 	movi	r2,308
8111b5f4:	1201cd16 	blt	r2,r8,8111bd2c <_strtod_r+0xda0>
8111b5f8:	4011d13a 	srai	r8,r8,4
8111b5fc:	03000044 	movi	r12,1
8111b600:	62037c0e 	bge	r12,r8,8111c3f4 <_strtod_r+0x1468>
8111b604:	01204534 	movhi	r4,33044
8111b608:	212e6104 	addi	r4,r4,-18044
8111b60c:	2015883a 	mov	r10,r4
8111b610:	0027883a 	mov	r19,zero
8111b614:	d9000915 	stw	r4,36(sp)
8111b618:	9005883a 	mov	r2,r18
8111b61c:	8807883a 	mov	r3,r17
8111b620:	dc000c15 	stw	r16,48(sp)
8111b624:	dc800e15 	stw	r18,56(sp)
8111b628:	9821883a 	mov	r16,r19
8111b62c:	0009883a 	mov	r4,zero
8111b630:	8827883a 	mov	r19,r17
8111b634:	602f883a 	mov	r23,r12
8111b638:	da400a15 	stw	r9,40(sp)
8111b63c:	5025883a 	mov	r18,r10
8111b640:	4023883a 	mov	r17,r8
8111b644:	8980004c 	andi	r6,r17,1
8111b648:	30000626 	beq	r6,zero,8111b664 <_strtod_r+0x6d8>
8111b64c:	91800017 	ldw	r6,0(r18)
8111b650:	91c00117 	ldw	r7,4(r18)
8111b654:	1009883a 	mov	r4,r2
8111b658:	180b883a 	mov	r5,r3
8111b65c:	110da7c0 	call	8110da7c <__muldf3>
8111b660:	01000044 	movi	r4,1
8111b664:	8823d07a 	srai	r17,r17,1
8111b668:	84000044 	addi	r16,r16,1
8111b66c:	94800204 	addi	r18,r18,8
8111b670:	8dfff41e 	bne	r17,r23,8111b644 <__reset+0xfb0fb644>
8111b674:	21003fcc 	andi	r4,r4,255
8111b678:	9823883a 	mov	r17,r19
8111b67c:	da400a17 	ldw	r9,40(sp)
8111b680:	8027883a 	mov	r19,r16
8111b684:	dc800e17 	ldw	r18,56(sp)
8111b688:	dc000c17 	ldw	r16,48(sp)
8111b68c:	2003b11e 	bne	r4,zero,8111c554 <_strtod_r+0x15c8>
8111b690:	981690fa 	slli	r11,r19,3
8111b694:	d8800917 	ldw	r2,36(sp)
8111b698:	01ff2c34 	movhi	r7,64688
8111b69c:	900d883a 	mov	r6,r18
8111b6a0:	12ef883a 	add	r23,r2,r11
8111b6a4:	b9000017 	ldw	r4,0(r23)
8111b6a8:	b9400117 	ldw	r5,4(r23)
8111b6ac:	89cf883a 	add	r7,r17,r7
8111b6b0:	da401315 	stw	r9,76(sp)
8111b6b4:	110da7c0 	call	8110da7c <__muldf3>
8111b6b8:	1025883a 	mov	r18,r2
8111b6bc:	011f2834 	movhi	r4,31904
8111b6c0:	189ffc2c 	andhi	r2,r3,32752
8111b6c4:	da401317 	ldw	r9,76(sp)
8111b6c8:	20819836 	bltu	r4,r2,8111bd2c <_strtod_r+0xda0>
8111b6cc:	011f2434 	movhi	r4,31888
8111b6d0:	2083382e 	bgeu	r4,r2,8111c3b4 <_strtod_r+0x1428>
8111b6d4:	045ffc34 	movhi	r17,32752
8111b6d8:	8c7fffc4 	addi	r17,r17,-1
8111b6dc:	04bfffc4 	movi	r18,-1
8111b6e0:	d8000915 	stw	zero,36(sp)
8111b6e4:	d9400817 	ldw	r5,32(sp)
8111b6e8:	df000015 	stw	fp,0(sp)
8111b6ec:	480f883a 	mov	r7,r9
8111b6f0:	b00d883a 	mov	r6,r22
8111b6f4:	8009883a 	mov	r4,r16
8111b6f8:	11197500 	call	81119750 <__s2b>
8111b6fc:	d8800815 	stw	r2,32(sp)
8111b700:	10018a26 	beq	r2,zero,8111bd2c <_strtod_r+0xda0>
8111b704:	a807d7fa 	srai	r3,r21,31
8111b708:	0545c83a 	sub	r2,zero,r21
8111b70c:	dd400a15 	stw	r21,40(sp)
8111b710:	1886703a 	and	r3,r3,r2
8111b714:	d8c00c15 	stw	r3,48(sp)
8111b718:	a8013516 	blt	r21,zero,8111bbf0 <_strtod_r+0xc64>
8111b71c:	d9400817 	ldw	r5,32(sp)
8111b720:	0011883a 	mov	r8,zero
8111b724:	0027883a 	mov	r19,zero
8111b728:	29400304 	addi	r5,r5,12
8111b72c:	d9400f15 	stw	r5,60(sp)
8111b730:	402b883a 	mov	r21,r8
8111b734:	dd001215 	stw	r20,72(sp)
8111b738:	d8800817 	ldw	r2,32(sp)
8111b73c:	8009883a 	mov	r4,r16
8111b740:	11400117 	ldw	r5,4(r2)
8111b744:	11195500 	call	81119550 <_Balloc>
8111b748:	1029883a 	mov	r20,r2
8111b74c:	10012d26 	beq	r2,zero,8111bc04 <_strtod_r+0xc78>
8111b750:	d8c00817 	ldw	r3,32(sp)
8111b754:	d9400f17 	ldw	r5,60(sp)
8111b758:	11000304 	addi	r4,r2,12
8111b75c:	19800417 	ldw	r6,16(r3)
8111b760:	31800084 	addi	r6,r6,2
8111b764:	318d883a 	add	r6,r6,r6
8111b768:	318d883a 	add	r6,r6,r6
8111b76c:	110f61c0 	call	8110f61c <memcpy>
8111b770:	d9000204 	addi	r4,sp,8
8111b774:	d9000015 	stw	r4,0(sp)
8111b778:	d9c00404 	addi	r7,sp,16
8111b77c:	900b883a 	mov	r5,r18
8111b780:	880d883a 	mov	r6,r17
8111b784:	8009883a 	mov	r4,r16
8111b788:	111a22c0 	call	8111a22c <__d2b>
8111b78c:	d8800515 	stw	r2,20(sp)
8111b790:	dc801115 	stw	r18,68(sp)
8111b794:	dc401015 	stw	r17,64(sp)
8111b798:	10027c26 	beq	r2,zero,8111c18c <_strtod_r+0x1200>
8111b79c:	01400044 	movi	r5,1
8111b7a0:	8009883a 	mov	r4,r16
8111b7a4:	11199740 	call	81119974 <__i2b>
8111b7a8:	1027883a 	mov	r19,r2
8111b7ac:	10011526 	beq	r2,zero,8111bc04 <_strtod_r+0xc78>
8111b7b0:	d8800417 	ldw	r2,16(sp)
8111b7b4:	1000c816 	blt	r2,zero,8111bad8 <_strtod_r+0xb4c>
8111b7b8:	d9400c17 	ldw	r5,48(sp)
8111b7bc:	d9000a17 	ldw	r4,40(sp)
8111b7c0:	28ad883a 	add	r22,r5,r2
8111b7c4:	d9400917 	ldw	r5,36(sp)
8111b7c8:	df000217 	ldw	fp,8(sp)
8111b7cc:	05ff0084 	movi	r23,-1022
8111b7d0:	1147c83a 	sub	r3,r2,r5
8111b7d4:	1f07883a 	add	r3,r3,fp
8111b7d8:	00800d84 	movi	r2,54
8111b7dc:	18ffffc4 	addi	r3,r3,-1
8111b7e0:	1739c83a 	sub	fp,r2,fp
8111b7e4:	1dc0a50e 	bge	r3,r23,8111ba7c <_strtod_r+0xaf0>
8111b7e8:	b8efc83a 	sub	r23,r23,r3
8111b7ec:	008007c4 	movi	r2,31
8111b7f0:	e5f9c83a 	sub	fp,fp,r23
8111b7f4:	15c0bc16 	blt	r2,r23,8111bae8 <_strtod_r+0xb5c>
8111b7f8:	00800044 	movi	r2,1
8111b7fc:	15c4983a 	sll	r2,r2,r23
8111b800:	d8000b15 	stw	zero,44(sp)
8111b804:	d8800d15 	stw	r2,52(sp)
8111b808:	2707883a 	add	r3,r4,fp
8111b80c:	d9000917 	ldw	r4,36(sp)
8111b810:	b739883a 	add	fp,r22,fp
8111b814:	20ef883a 	add	r23,r4,r3
8111b818:	b009883a 	mov	r4,r22
8111b81c:	e580010e 	bge	fp,r22,8111b824 <_strtod_r+0x898>
8111b820:	e009883a 	mov	r4,fp
8111b824:	b805883a 	mov	r2,r23
8111b828:	25c0010e 	bge	r4,r23,8111b830 <_strtod_r+0x8a4>
8111b82c:	2005883a 	mov	r2,r4
8111b830:	0080030e 	bge	zero,r2,8111b840 <_strtod_r+0x8b4>
8111b834:	e0b9c83a 	sub	fp,fp,r2
8111b838:	b8afc83a 	sub	r23,r23,r2
8111b83c:	b0adc83a 	sub	r22,r22,r2
8111b840:	d9400c17 	ldw	r5,48(sp)
8111b844:	28001126 	beq	r5,zero,8111b88c <_strtod_r+0x900>
8111b848:	280d883a 	mov	r6,r5
8111b84c:	8009883a 	mov	r4,r16
8111b850:	980b883a 	mov	r5,r19
8111b854:	1119bb80 	call	81119bb8 <__pow5mult>
8111b858:	1027883a 	mov	r19,r2
8111b85c:	1000e926 	beq	r2,zero,8111bc04 <_strtod_r+0xc78>
8111b860:	d9800517 	ldw	r6,20(sp)
8111b864:	100b883a 	mov	r5,r2
8111b868:	8009883a 	mov	r4,r16
8111b86c:	11199b80 	call	811199b8 <__multiply>
8111b870:	1000e426 	beq	r2,zero,8111bc04 <_strtod_r+0xc78>
8111b874:	d9400517 	ldw	r5,20(sp)
8111b878:	8009883a 	mov	r4,r16
8111b87c:	d8801315 	stw	r2,76(sp)
8111b880:	11196000 	call	81119600 <_Bfree>
8111b884:	d8801317 	ldw	r2,76(sp)
8111b888:	d8800515 	stw	r2,20(sp)
8111b88c:	0700060e 	bge	zero,fp,8111b8a8 <_strtod_r+0x91c>
8111b890:	d9400517 	ldw	r5,20(sp)
8111b894:	e00d883a 	mov	r6,fp
8111b898:	8009883a 	mov	r4,r16
8111b89c:	1119d000 	call	81119d00 <__lshift>
8111b8a0:	d8800515 	stw	r2,20(sp)
8111b8a4:	10023926 	beq	r2,zero,8111c18c <_strtod_r+0x1200>
8111b8a8:	d8800a17 	ldw	r2,40(sp)
8111b8ac:	10000626 	beq	r2,zero,8111b8c8 <_strtod_r+0x93c>
8111b8b0:	d9800a17 	ldw	r6,40(sp)
8111b8b4:	a00b883a 	mov	r5,r20
8111b8b8:	8009883a 	mov	r4,r16
8111b8bc:	1119bb80 	call	81119bb8 <__pow5mult>
8111b8c0:	1029883a 	mov	r20,r2
8111b8c4:	1000cf26 	beq	r2,zero,8111bc04 <_strtod_r+0xc78>
8111b8c8:	05c0060e 	bge	zero,r23,8111b8e4 <_strtod_r+0x958>
8111b8cc:	a00b883a 	mov	r5,r20
8111b8d0:	b80d883a 	mov	r6,r23
8111b8d4:	8009883a 	mov	r4,r16
8111b8d8:	1119d000 	call	81119d00 <__lshift>
8111b8dc:	1029883a 	mov	r20,r2
8111b8e0:	1000c826 	beq	r2,zero,8111bc04 <_strtod_r+0xc78>
8111b8e4:	0580060e 	bge	zero,r22,8111b900 <_strtod_r+0x974>
8111b8e8:	980b883a 	mov	r5,r19
8111b8ec:	b00d883a 	mov	r6,r22
8111b8f0:	8009883a 	mov	r4,r16
8111b8f4:	1119d000 	call	81119d00 <__lshift>
8111b8f8:	1027883a 	mov	r19,r2
8111b8fc:	1000c126 	beq	r2,zero,8111bc04 <_strtod_r+0xc78>
8111b900:	d9400517 	ldw	r5,20(sp)
8111b904:	a00d883a 	mov	r6,r20
8111b908:	8009883a 	mov	r4,r16
8111b90c:	1119eb00 	call	81119eb0 <__mdiff>
8111b910:	102b883a 	mov	r21,r2
8111b914:	1000bb26 	beq	r2,zero,8111bc04 <_strtod_r+0xc78>
8111b918:	10c00317 	ldw	r3,12(r2)
8111b91c:	980b883a 	mov	r5,r19
8111b920:	10000315 	stw	zero,12(r2)
8111b924:	1009883a 	mov	r4,r2
8111b928:	d8c00e15 	stw	r3,56(sp)
8111b92c:	1119e500 	call	81119e50 <__mcmp>
8111b930:	10027616 	blt	r2,zero,8111c30c <_strtod_r+0x1380>
8111b934:	10024426 	beq	r2,zero,8111c248 <_strtod_r+0x12bc>
8111b938:	980b883a 	mov	r5,r19
8111b93c:	a809883a 	mov	r4,r21
8111b940:	111a3800 	call	8111a380 <__ratio>
8111b944:	000d883a 	mov	r6,zero
8111b948:	01d00034 	movhi	r7,16384
8111b94c:	1009883a 	mov	r4,r2
8111b950:	180b883a 	mov	r5,r3
8111b954:	102f883a 	mov	r23,r2
8111b958:	182d883a 	mov	r22,r3
8111b95c:	11231a00 	call	811231a0 <__ledf2>
8111b960:	00804a16 	blt	zero,r2,8111ba8c <_strtod_r+0xb00>
8111b964:	d9400e17 	ldw	r5,56(sp)
8111b968:	28006b26 	beq	r5,zero,8111bb18 <_strtod_r+0xb8c>
8111b96c:	058ffc34 	movhi	r22,16368
8111b970:	d8000b15 	stw	zero,44(sp)
8111b974:	d8000d15 	stw	zero,52(sp)
8111b978:	b02f883a 	mov	r23,r22
8111b97c:	8f1ffc2c 	andhi	fp,r17,32752
8111b980:	009ff834 	movhi	r2,32736
8111b984:	e080cd26 	beq	fp,r2,8111bcbc <_strtod_r+0xd30>
8111b988:	d9400917 	ldw	r5,36(sp)
8111b98c:	28001a26 	beq	r5,zero,8111b9f8 <_strtod_r+0xa6c>
8111b990:	0081a834 	movhi	r2,1696
8111b994:	17001836 	bltu	r2,fp,8111b9f8 <_strtod_r+0xa6c>
8111b998:	d9000d17 	ldw	r4,52(sp)
8111b99c:	01d07834 	movhi	r7,16864
8111b9a0:	39ffffc4 	addi	r7,r7,-1
8111b9a4:	01bff034 	movhi	r6,65472
8111b9a8:	b80b883a 	mov	r5,r23
8111b9ac:	11231a00 	call	811231a0 <__ledf2>
8111b9b0:	00800e16 	blt	zero,r2,8111b9ec <_strtod_r+0xa60>
8111b9b4:	d9000d17 	ldw	r4,52(sp)
8111b9b8:	b80b883a 	mov	r5,r23
8111b9bc:	1120fac0 	call	81120fac <__fixunsdfsi>
8111b9c0:	10018126 	beq	r2,zero,8111bfc8 <_strtod_r+0x103c>
8111b9c4:	1009883a 	mov	r4,r2
8111b9c8:	1123cfc0 	call	81123cfc <__floatunsidf>
8111b9cc:	d8800d15 	stw	r2,52(sp)
8111b9d0:	182f883a 	mov	r23,r3
8111b9d4:	d8800e17 	ldw	r2,56(sp)
8111b9d8:	1001791e 	bne	r2,zero,8111bfc0 <_strtod_r+0x1034>
8111b9dc:	ba20003c 	xorhi	r8,r23,32768
8111b9e0:	d8c00d17 	ldw	r3,52(sp)
8111b9e4:	402d883a 	mov	r22,r8
8111b9e8:	d8c00b15 	stw	r3,44(sp)
8111b9ec:	0081ac34 	movhi	r2,1712
8111b9f0:	b091883a 	add	r8,r22,r2
8111b9f4:	472dc83a 	sub	r22,r8,fp
8111b9f8:	9009883a 	mov	r4,r18
8111b9fc:	880b883a 	mov	r5,r17
8111ba00:	111a0b40 	call	8111a0b4 <__ulp>
8111ba04:	d9000b17 	ldw	r4,44(sp)
8111ba08:	b00b883a 	mov	r5,r22
8111ba0c:	100d883a 	mov	r6,r2
8111ba10:	180f883a 	mov	r7,r3
8111ba14:	110da7c0 	call	8110da7c <__muldf3>
8111ba18:	900d883a 	mov	r6,r18
8111ba1c:	880f883a 	mov	r7,r17
8111ba20:	1009883a 	mov	r4,r2
8111ba24:	180b883a 	mov	r5,r3
8111ba28:	1121e980 	call	81121e98 <__adddf3>
8111ba2c:	1025883a 	mov	r18,r2
8111ba30:	1823883a 	mov	r17,r3
8111ba34:	182d883a 	mov	r22,r3
8111ba38:	d9000917 	ldw	r4,36(sp)
8111ba3c:	2000021e 	bne	r4,zero,8111ba48 <_strtod_r+0xabc>
8111ba40:	b09ffc2c 	andhi	r2,r22,32752
8111ba44:	e080be26 	beq	fp,r2,8111bd40 <_strtod_r+0xdb4>
8111ba48:	d9400517 	ldw	r5,20(sp)
8111ba4c:	8009883a 	mov	r4,r16
8111ba50:	11196000 	call	81119600 <_Bfree>
8111ba54:	a00b883a 	mov	r5,r20
8111ba58:	8009883a 	mov	r4,r16
8111ba5c:	11196000 	call	81119600 <_Bfree>
8111ba60:	980b883a 	mov	r5,r19
8111ba64:	8009883a 	mov	r4,r16
8111ba68:	11196000 	call	81119600 <_Bfree>
8111ba6c:	a80b883a 	mov	r5,r21
8111ba70:	8009883a 	mov	r4,r16
8111ba74:	11196000 	call	81119600 <_Bfree>
8111ba78:	003f2f06 	br	8111b738 <__reset+0xfb0fb738>
8111ba7c:	00c00044 	movi	r3,1
8111ba80:	d8000b15 	stw	zero,44(sp)
8111ba84:	d8c00d15 	stw	r3,52(sp)
8111ba88:	003f5f06 	br	8111b808 <__reset+0xfb0fb808>
8111ba8c:	b809883a 	mov	r4,r23
8111ba90:	000d883a 	mov	r6,zero
8111ba94:	01cff834 	movhi	r7,16352
8111ba98:	b00b883a 	mov	r5,r22
8111ba9c:	110da7c0 	call	8110da7c <__muldf3>
8111baa0:	d9000e17 	ldw	r4,56(sp)
8111baa4:	d8800d15 	stw	r2,52(sp)
8111baa8:	182f883a 	mov	r23,r3
8111baac:	2000181e 	bne	r4,zero,8111bb10 <_strtod_r+0xb84>
8111bab0:	1a20003c 	xorhi	r8,r3,32768
8111bab4:	d8800b15 	stw	r2,44(sp)
8111bab8:	402d883a 	mov	r22,r8
8111babc:	003faf06 	br	8111b97c <__reset+0xfb0fb97c>
8111bac0:	0015883a 	mov	r10,zero
8111bac4:	02c00044 	movi	r11,1
8111bac8:	2800011e 	bne	r5,zero,8111bad0 <_strtod_r+0xb44>
8111bacc:	903d7e26 	beq	r18,zero,8111b0c8 <__reset+0xfb0fb0c8>
8111bad0:	0013883a 	mov	r9,zero
8111bad4:	003e4706 	br	8111b3f4 <__reset+0xfb0fb3f4>
8111bad8:	d8c00a17 	ldw	r3,40(sp)
8111badc:	dd800c17 	ldw	r22,48(sp)
8111bae0:	1889c83a 	sub	r4,r3,r2
8111bae4:	003f3706 	br	8111b7c4 <__reset+0xfb0fb7c4>
8111bae8:	00bef884 	movi	r2,-1054
8111baec:	05c00044 	movi	r23,1
8111baf0:	10c5c83a 	sub	r2,r2,r3
8111baf4:	b884983a 	sll	r2,r23,r2
8111baf8:	ddc00d15 	stw	r23,52(sp)
8111bafc:	d8800b15 	stw	r2,44(sp)
8111bb00:	003f4106 	br	8111b808 <__reset+0xfb0fb808>
8111bb04:	ddc00615 	stw	r23,24(sp)
8111bb08:	002b883a 	mov	r21,zero
8111bb0c:	003dc306 	br	8111b21c <__reset+0xfb0fb21c>
8111bb10:	1811883a 	mov	r8,r3
8111bb14:	003fe706 	br	8111bab4 <__reset+0xfb0fbab4>
8111bb18:	90002e1e 	bne	r18,zero,8111bbd4 <_strtod_r+0xc48>
8111bb1c:	00c00434 	movhi	r3,16
8111bb20:	18ffffc4 	addi	r3,r3,-1
8111bb24:	88c4703a 	and	r2,r17,r3
8111bb28:	10002c1e 	bne	r2,zero,8111bbdc <_strtod_r+0xc50>
8111bb2c:	000d883a 	mov	r6,zero
8111bb30:	01cffc34 	movhi	r7,16368
8111bb34:	b809883a 	mov	r4,r23
8111bb38:	b00b883a 	mov	r5,r22
8111bb3c:	11231a00 	call	811231a0 <__ledf2>
8111bb40:	10021716 	blt	r2,zero,8111c3a0 <_strtod_r+0x1414>
8111bb44:	b809883a 	mov	r4,r23
8111bb48:	b00b883a 	mov	r5,r22
8111bb4c:	000d883a 	mov	r6,zero
8111bb50:	01cff834 	movhi	r7,16352
8111bb54:	110da7c0 	call	8110da7c <__muldf3>
8111bb58:	d8800d15 	stw	r2,52(sp)
8111bb5c:	182f883a 	mov	r23,r3
8111bb60:	102d883a 	mov	r22,r2
8111bb64:	1a20003c 	xorhi	r8,r3,32768
8111bb68:	dd800b15 	stw	r22,44(sp)
8111bb6c:	402d883a 	mov	r22,r8
8111bb70:	003f8206 	br	8111b97c <__reset+0xfb0fb97c>
8111bb74:	b013883a 	mov	r9,r22
8111bb78:	000b883a 	mov	r5,zero
8111bb7c:	0015883a 	mov	r10,zero
8111bb80:	893ff404 	addi	r4,r17,-48
8111bb84:	00800244 	movi	r2,9
8111bb88:	11001036 	bltu	r2,r4,8111bbcc <_strtod_r+0xc40>
8111bb8c:	28c00044 	addi	r3,r5,1
8111bb90:	2023883a 	mov	r17,r4
8111bb94:	20014d1e 	bne	r4,zero,8111c0cc <_strtod_r+0x1140>
8111bb98:	d9800617 	ldw	r6,24(sp)
8111bb9c:	180b883a 	mov	r5,r3
8111bba0:	30800044 	addi	r2,r6,1
8111bba4:	d8800615 	stw	r2,24(sp)
8111bba8:	34400047 	ldb	r17,1(r6)
8111bbac:	003ff406 	br	8111bb80 <__reset+0xfb0fbb80>
8111bbb0:	0019883a 	mov	r12,zero
8111bbb4:	b8800084 	addi	r2,r23,2
8111bbb8:	d8800615 	stw	r2,24(sp)
8111bbbc:	bc400087 	ldb	r17,2(r23)
8111bbc0:	003e1606 	br	8111b41c <__reset+0xfb0fb41c>
8111bbc4:	03000044 	movi	r12,1
8111bbc8:	003ffa06 	br	8111bbb4 <__reset+0xfb0fbbb4>
8111bbcc:	02c00044 	movi	r11,1
8111bbd0:	003d8d06 	br	8111b208 <__reset+0xfb0fb208>
8111bbd4:	00800044 	movi	r2,1
8111bbd8:	9080fe26 	beq	r18,r2,8111bfd4 <_strtod_r+0x1048>
8111bbdc:	d8000b15 	stw	zero,44(sp)
8111bbe0:	05affc34 	movhi	r22,49136
8111bbe4:	d8000d15 	stw	zero,52(sp)
8111bbe8:	05cffc34 	movhi	r23,16368
8111bbec:	003f6306 	br	8111b97c <__reset+0xfb0fb97c>
8111bbf0:	d8000a15 	stw	zero,40(sp)
8111bbf4:	003ec906 	br	8111b71c <__reset+0xfb0fb71c>
8111bbf8:	d9001117 	ldw	r4,68(sp)
8111bbfc:	00bfffc4 	movi	r2,-1
8111bc00:	2080461e 	bne	r4,r2,8111bd1c <_strtod_r+0xd90>
8111bc04:	dd000a15 	stw	r20,40(sp)
8111bc08:	dd001217 	ldw	r20,72(sp)
8111bc0c:	a811883a 	mov	r8,r21
8111bc10:	d8800517 	ldw	r2,20(sp)
8111bc14:	00c00884 	movi	r3,34
8111bc18:	80c00015 	stw	r3,0(r16)
8111bc1c:	002b883a 	mov	r21,zero
8111bc20:	059ffc34 	movhi	r22,32752
8111bc24:	100b883a 	mov	r5,r2
8111bc28:	8009883a 	mov	r4,r16
8111bc2c:	da001315 	stw	r8,76(sp)
8111bc30:	11196000 	call	81119600 <_Bfree>
8111bc34:	d9400a17 	ldw	r5,40(sp)
8111bc38:	8009883a 	mov	r4,r16
8111bc3c:	11196000 	call	81119600 <_Bfree>
8111bc40:	980b883a 	mov	r5,r19
8111bc44:	8009883a 	mov	r4,r16
8111bc48:	11196000 	call	81119600 <_Bfree>
8111bc4c:	d9400817 	ldw	r5,32(sp)
8111bc50:	8009883a 	mov	r4,r16
8111bc54:	11196000 	call	81119600 <_Bfree>
8111bc58:	da001317 	ldw	r8,76(sp)
8111bc5c:	8009883a 	mov	r4,r16
8111bc60:	400b883a 	mov	r5,r8
8111bc64:	11196000 	call	81119600 <_Bfree>
8111bc68:	003d9206 	br	8111b2b4 <__reset+0xfb0fb2b4>
8111bc6c:	d8c00717 	ldw	r3,28(sp)
8111bc70:	d8800504 	addi	r2,sp,20
8111bc74:	01a04534 	movhi	r6,33044
8111bc78:	31aea604 	addi	r6,r6,-17768
8111bc7c:	d8c00115 	stw	r3,4(sp)
8111bc80:	d8800015 	stw	r2,0(sp)
8111bc84:	d9c00404 	addi	r7,sp,16
8111bc88:	d9400604 	addi	r5,sp,24
8111bc8c:	8009883a 	mov	r4,r16
8111bc90:	11202400 	call	81120240 <__gethex>
8111bc94:	154001cc 	andi	r21,r2,7
8111bc98:	a83d9b26 	beq	r21,zero,8111b308 <__reset+0xfb0fb308>
8111bc9c:	00c00184 	movi	r3,6
8111bca0:	a8c0d61e 	bne	r21,r3,8111bffc <_strtod_r+0x1070>
8111bca4:	9cc00044 	addi	r19,r19,1
8111bca8:	dcc00615 	stw	r19,24(sp)
8111bcac:	002b883a 	mov	r21,zero
8111bcb0:	002d883a 	mov	r22,zero
8111bcb4:	d8000715 	stw	zero,28(sp)
8111bcb8:	003d7e06 	br	8111b2b4 <__reset+0xfb0fb2b4>
8111bcbc:	00bf2c34 	movhi	r2,64688
8111bcc0:	88a3883a 	add	r17,r17,r2
8111bcc4:	9009883a 	mov	r4,r18
8111bcc8:	880b883a 	mov	r5,r17
8111bccc:	111a0b40 	call	8111a0b4 <__ulp>
8111bcd0:	d9000b17 	ldw	r4,44(sp)
8111bcd4:	100d883a 	mov	r6,r2
8111bcd8:	180f883a 	mov	r7,r3
8111bcdc:	b00b883a 	mov	r5,r22
8111bce0:	110da7c0 	call	8110da7c <__muldf3>
8111bce4:	900d883a 	mov	r6,r18
8111bce8:	180b883a 	mov	r5,r3
8111bcec:	880f883a 	mov	r7,r17
8111bcf0:	1009883a 	mov	r4,r2
8111bcf4:	1121e980 	call	81121e98 <__adddf3>
8111bcf8:	015f2834 	movhi	r5,31904
8111bcfc:	1025883a 	mov	r18,r2
8111bd00:	297fffc4 	addi	r5,r5,-1
8111bd04:	189ffc2c 	andhi	r2,r3,32752
8111bd08:	2880892e 	bgeu	r5,r2,8111bf30 <_strtod_r+0xfa4>
8111bd0c:	d8801017 	ldw	r2,64(sp)
8111bd10:	00dffc34 	movhi	r3,32752
8111bd14:	18ffffc4 	addi	r3,r3,-1
8111bd18:	10ffb726 	beq	r2,r3,8111bbf8 <__reset+0xfb0fbbf8>
8111bd1c:	045ffc34 	movhi	r17,32752
8111bd20:	8c7fffc4 	addi	r17,r17,-1
8111bd24:	04bfffc4 	movi	r18,-1
8111bd28:	003f4706 	br	8111ba48 <__reset+0xfb0fba48>
8111bd2c:	00800884 	movi	r2,34
8111bd30:	80800015 	stw	r2,0(r16)
8111bd34:	002b883a 	mov	r21,zero
8111bd38:	059ffc34 	movhi	r22,32752
8111bd3c:	003d5d06 	br	8111b2b4 <__reset+0xfb0fb2b4>
8111bd40:	d9000d17 	ldw	r4,52(sp)
8111bd44:	b80b883a 	mov	r5,r23
8111bd48:	1123b980 	call	81123b98 <__fixdfsi>
8111bd4c:	1009883a 	mov	r4,r2
8111bd50:	1123c180 	call	81123c18 <__floatsidf>
8111bd54:	d9000d17 	ldw	r4,52(sp)
8111bd58:	b80b883a 	mov	r5,r23
8111bd5c:	100d883a 	mov	r6,r2
8111bd60:	180f883a 	mov	r7,r3
8111bd64:	11232940 	call	81123294 <__subdf3>
8111bd68:	d9400e17 	ldw	r5,56(sp)
8111bd6c:	1039883a 	mov	fp,r2
8111bd70:	182f883a 	mov	r23,r3
8111bd74:	2800141e 	bne	r5,zero,8111bdc8 <_strtod_r+0xe3c>
8111bd78:	9000131e 	bne	r18,zero,8111bdc8 <_strtod_r+0xe3c>
8111bd7c:	00800434 	movhi	r2,16
8111bd80:	10bfffc4 	addi	r2,r2,-1
8111bd84:	b0ac703a 	and	r22,r22,r2
8111bd88:	b0000f1e 	bne	r22,zero,8111bdc8 <_strtod_r+0xe3c>
8111bd8c:	01a52834 	movhi	r6,38048
8111bd90:	01cff434 	movhi	r7,16336
8111bd94:	318d6544 	addi	r6,r6,13717
8111bd98:	39ffffc4 	addi	r7,r7,-1
8111bd9c:	e009883a 	mov	r4,fp
8111bda0:	180b883a 	mov	r5,r3
8111bda4:	11231a00 	call	811231a0 <__ledf2>
8111bda8:	103f270e 	bge	r2,zero,8111ba48 <__reset+0xfb0fba48>
8111bdac:	dd000a15 	stw	r20,40(sp)
8111bdb0:	a811883a 	mov	r8,r21
8111bdb4:	dd001217 	ldw	r20,72(sp)
8111bdb8:	d8800517 	ldw	r2,20(sp)
8111bdbc:	002b883a 	mov	r21,zero
8111bdc0:	882d883a 	mov	r22,r17
8111bdc4:	003f9706 	br	8111bc24 <__reset+0xfb0fbc24>
8111bdc8:	01a52834 	movhi	r6,38048
8111bdcc:	01cff834 	movhi	r7,16352
8111bdd0:	318d6544 	addi	r6,r6,13717
8111bdd4:	39ffffc4 	addi	r7,r7,-1
8111bdd8:	e009883a 	mov	r4,fp
8111bddc:	b80b883a 	mov	r5,r23
8111bde0:	11231a00 	call	811231a0 <__ledf2>
8111bde4:	10000716 	blt	r2,zero,8111be04 <_strtod_r+0xe78>
8111bde8:	018d6c34 	movhi	r6,13744
8111bdec:	31b94d44 	addi	r6,r6,-6859
8111bdf0:	01cff834 	movhi	r7,16352
8111bdf4:	e009883a 	mov	r4,fp
8111bdf8:	b80b883a 	mov	r5,r23
8111bdfc:	11230c40 	call	811230c4 <__gedf2>
8111be00:	00bf110e 	bge	zero,r2,8111ba48 <__reset+0xfb0fba48>
8111be04:	dd000a15 	stw	r20,40(sp)
8111be08:	a811883a 	mov	r8,r21
8111be0c:	dd001217 	ldw	r20,72(sp)
8111be10:	d8800517 	ldw	r2,20(sp)
8111be14:	902b883a 	mov	r21,r18
8111be18:	882d883a 	mov	r22,r17
8111be1c:	003f8106 	br	8111bc24 <__reset+0xfb0fbc24>
8111be20:	b83e2f26 	beq	r23,zero,8111b6e0 <__reset+0xfb0fb6e0>
8111be24:	05efc83a 	sub	r23,zero,r23
8111be28:	b88003cc 	andi	r2,r23,15
8111be2c:	10000d26 	beq	r2,zero,8111be64 <_strtod_r+0xed8>
8111be30:	100490fa 	slli	r2,r2,3
8111be34:	00e04534 	movhi	r3,33044
8111be38:	18ee6b04 	addi	r3,r3,-18004
8111be3c:	1885883a 	add	r2,r3,r2
8111be40:	11800017 	ldw	r6,0(r2)
8111be44:	11c00117 	ldw	r7,4(r2)
8111be48:	9009883a 	mov	r4,r18
8111be4c:	880b883a 	mov	r5,r17
8111be50:	da401315 	stw	r9,76(sp)
8111be54:	112274c0 	call	8112274c <__divdf3>
8111be58:	da401317 	ldw	r9,76(sp)
8111be5c:	1025883a 	mov	r18,r2
8111be60:	1823883a 	mov	r17,r3
8111be64:	b82fd13a 	srai	r23,r23,4
8111be68:	b83e1d26 	beq	r23,zero,8111b6e0 <__reset+0xfb0fb6e0>
8111be6c:	008007c4 	movi	r2,31
8111be70:	15c02816 	blt	r2,r23,8111bf14 <_strtod_r+0xf88>
8111be74:	b880040c 	andi	r2,r23,16
8111be78:	10019726 	beq	r2,zero,8111c4d8 <_strtod_r+0x154c>
8111be7c:	05c1880e 	bge	zero,r23,8111c4a0 <_strtod_r+0x1514>
8111be80:	00c01a84 	movi	r3,106
8111be84:	d8c00915 	stw	r3,36(sp)
8111be88:	04e04534 	movhi	r19,33044
8111be8c:	9ceeab04 	addi	r19,r19,-17748
8111be90:	8807883a 	mov	r3,r17
8111be94:	9005883a 	mov	r2,r18
8111be98:	8023883a 	mov	r17,r16
8111be9c:	0009883a 	mov	r4,zero
8111bea0:	9821883a 	mov	r16,r19
8111bea4:	da400a15 	stw	r9,40(sp)
8111bea8:	1827883a 	mov	r19,r3
8111beac:	b980004c 	andi	r6,r23,1
8111beb0:	30000626 	beq	r6,zero,8111becc <_strtod_r+0xf40>
8111beb4:	81800017 	ldw	r6,0(r16)
8111beb8:	81c00117 	ldw	r7,4(r16)
8111bebc:	1009883a 	mov	r4,r2
8111bec0:	180b883a 	mov	r5,r3
8111bec4:	110da7c0 	call	8110da7c <__muldf3>
8111bec8:	01000044 	movi	r4,1
8111becc:	b82fd07a 	srai	r23,r23,1
8111bed0:	84000204 	addi	r16,r16,8
8111bed4:	b83ff51e 	bne	r23,zero,8111beac <__reset+0xfb0fbeac>
8111bed8:	21003fcc 	andi	r4,r4,255
8111bedc:	8821883a 	mov	r16,r17
8111bee0:	da400a17 	ldw	r9,40(sp)
8111bee4:	9823883a 	mov	r17,r19
8111bee8:	2001a51e 	bne	r4,zero,8111c580 <_strtod_r+0x15f4>
8111beec:	d9000917 	ldw	r4,36(sp)
8111bef0:	20016d1e 	bne	r4,zero,8111c4a8 <_strtod_r+0x151c>
8111bef4:	000d883a 	mov	r6,zero
8111bef8:	000f883a 	mov	r7,zero
8111befc:	9009883a 	mov	r4,r18
8111bf00:	880b883a 	mov	r5,r17
8111bf04:	da401315 	stw	r9,76(sp)
8111bf08:	112303c0 	call	8112303c <__eqdf2>
8111bf0c:	da401317 	ldw	r9,76(sp)
8111bf10:	103df41e 	bne	r2,zero,8111b6e4 <__reset+0xfb0fb6e4>
8111bf14:	00800884 	movi	r2,34
8111bf18:	80800015 	stw	r2,0(r16)
8111bf1c:	002b883a 	mov	r21,zero
8111bf20:	002d883a 	mov	r22,zero
8111bf24:	003ce306 	br	8111b2b4 <__reset+0xfb0fb2b4>
8111bf28:	055387c4 	movi	r21,19999
8111bf2c:	003d6b06 	br	8111b4dc <__reset+0xfb0fb4dc>
8111bf30:	0440d434 	movhi	r17,848
8111bf34:	1c63883a 	add	r17,r3,r17
8111bf38:	882d883a 	mov	r22,r17
8111bf3c:	003ebe06 	br	8111ba38 <__reset+0xfb0fba38>
8111bf40:	14403fcc 	andi	r17,r2,255
8111bf44:	8c40201c 	xori	r17,r17,128
8111bf48:	8c7fe004 	addi	r17,r17,-128
8111bf4c:	dd400817 	ldw	r21,32(sp)
8111bf50:	0027883a 	mov	r19,zero
8111bf54:	0039883a 	mov	fp,zero
8111bf58:	002d883a 	mov	r22,zero
8111bf5c:	003c9906 	br	8111b1c4 <__reset+0xfb0fb1c4>
8111bf60:	00c00944 	movi	r3,37
8111bf64:	1a47c83a 	sub	r3,r3,r9
8111bf68:	1d7d8c16 	blt	r3,r21,8111b59c <__reset+0xfb0fb59c>
8111bf6c:	1261c83a 	sub	r16,r2,r9
8111bf70:	800490fa 	slli	r2,r16,3
8111bf74:	04e04534 	movhi	r19,33044
8111bf78:	9cee6b04 	addi	r19,r19,-18004
8111bf7c:	9885883a 	add	r2,r19,r2
8111bf80:	11000017 	ldw	r4,0(r2)
8111bf84:	11400117 	ldw	r5,4(r2)
8111bf88:	900d883a 	mov	r6,r18
8111bf8c:	880f883a 	mov	r7,r17
8111bf90:	110da7c0 	call	8110da7c <__muldf3>
8111bf94:	ac0dc83a 	sub	r6,r21,r16
8111bf98:	300c90fa 	slli	r6,r6,3
8111bf9c:	1009883a 	mov	r4,r2
8111bfa0:	180b883a 	mov	r5,r3
8111bfa4:	9985883a 	add	r2,r19,r6
8111bfa8:	11800017 	ldw	r6,0(r2)
8111bfac:	11c00117 	ldw	r7,4(r2)
8111bfb0:	110da7c0 	call	8110da7c <__muldf3>
8111bfb4:	102b883a 	mov	r21,r2
8111bfb8:	182d883a 	mov	r22,r3
8111bfbc:	003cbd06 	br	8111b2b4 <__reset+0xfb0fb2b4>
8111bfc0:	b811883a 	mov	r8,r23
8111bfc4:	003e8606 	br	8111b9e0 <__reset+0xfb0fb9e0>
8111bfc8:	d8000d15 	stw	zero,52(sp)
8111bfcc:	05cffc34 	movhi	r23,16368
8111bfd0:	003e8006 	br	8111b9d4 <__reset+0xfb0fb9d4>
8111bfd4:	883f011e 	bne	r17,zero,8111bbdc <__reset+0xfb0fbbdc>
8111bfd8:	dd000a15 	stw	r20,40(sp)
8111bfdc:	dd001217 	ldw	r20,72(sp)
8111bfe0:	a811883a 	mov	r8,r21
8111bfe4:	00800884 	movi	r2,34
8111bfe8:	80800015 	stw	r2,0(r16)
8111bfec:	002b883a 	mov	r21,zero
8111bff0:	d8800517 	ldw	r2,20(sp)
8111bff4:	002d883a 	mov	r22,zero
8111bff8:	003f0a06 	br	8111bc24 <__reset+0xfb0fbc24>
8111bffc:	d9800517 	ldw	r6,20(sp)
8111c000:	30000826 	beq	r6,zero,8111c024 <_strtod_r+0x1098>
8111c004:	01400d44 	movi	r5,53
8111c008:	d9000204 	addi	r4,sp,8
8111c00c:	d8801315 	stw	r2,76(sp)
8111c010:	111a4a80 	call	8111a4a8 <__copybits>
8111c014:	d9400517 	ldw	r5,20(sp)
8111c018:	8009883a 	mov	r4,r16
8111c01c:	11196000 	call	81119600 <_Bfree>
8111c020:	d8801317 	ldw	r2,76(sp)
8111c024:	00c00184 	movi	r3,6
8111c028:	1d400f36 	bltu	r3,r21,8111c068 <_strtod_r+0x10dc>
8111c02c:	a82a90ba 	slli	r21,r21,2
8111c030:	00e044b4 	movhi	r3,33042
8111c034:	18f01104 	addi	r3,r3,-16316
8111c038:	a8eb883a 	add	r21,r21,r3
8111c03c:	a8c00017 	ldw	r3,0(r21)
8111c040:	1800683a 	jmp	r3
8111c044:	8111c0c0 	call	88111c0c <__reset+0x20f1c0c>
8111c048:	8111c098 	cmpnei	r4,r16,18178
8111c04c:	8111c07c 	xorhi	r4,r16,18177
8111c050:	8111c060 	cmpeqi	r4,r16,18177
8111c054:	8111c088 	cmpgei	r4,r16,18178
8111c058:	8111c098 	cmpnei	r4,r16,18178
8111c05c:	8111c0c0 	call	88111c0c <__reset+0x20f1c0c>
8111c060:	045ffc34 	movhi	r17,32752
8111c064:	0025883a 	mov	r18,zero
8111c068:	1080020c 	andi	r2,r2,8
8111c06c:	902b883a 	mov	r21,r18
8111c070:	103c8f26 	beq	r2,zero,8111b2b0 <__reset+0xfb0fb2b0>
8111c074:	8da00034 	orhi	r22,r17,32768
8111c078:	003c8e06 	br	8111b2b4 <__reset+0xfb0fb2b4>
8111c07c:	dc800217 	ldw	r18,8(sp)
8111c080:	dc400317 	ldw	r17,12(sp)
8111c084:	003ff806 	br	8111c068 <__reset+0xfb0fc068>
8111c088:	04600034 	movhi	r17,32768
8111c08c:	8c7fffc4 	addi	r17,r17,-1
8111c090:	04bfffc4 	movi	r18,-1
8111c094:	003ff406 	br	8111c068 <__reset+0xfb0fc068>
8111c098:	d8c00417 	ldw	r3,16(sp)
8111c09c:	dc400317 	ldw	r17,12(sp)
8111c0a0:	013ffc34 	movhi	r4,65520
8111c0a4:	18c10cc4 	addi	r3,r3,1075
8111c0a8:	1806953a 	slli	r3,r3,20
8111c0ac:	213fffc4 	addi	r4,r4,-1
8111c0b0:	8922703a 	and	r17,r17,r4
8111c0b4:	dc800217 	ldw	r18,8(sp)
8111c0b8:	88e2b03a 	or	r17,r17,r3
8111c0bc:	003fea06 	br	8111c068 <__reset+0xfb0fc068>
8111c0c0:	0023883a 	mov	r17,zero
8111c0c4:	0025883a 	mov	r18,zero
8111c0c8:	003fe706 	br	8111c068 <__reset+0xfb0fc068>
8111c0cc:	01800044 	movi	r6,1
8111c0d0:	50d5883a 	add	r10,r10,r3
8111c0d4:	2a4b883a 	add	r5,r5,r9
8111c0d8:	19811a26 	beq	r3,r6,8111c544 <_strtod_r+0x15b8>
8111c0dc:	01800204 	movi	r6,8
8111c0e0:	01c00404 	movi	r7,16
8111c0e4:	4a400044 	addi	r9,r9,1
8111c0e8:	48bfffc4 	addi	r2,r9,-1
8111c0ec:	30801616 	blt	r6,r2,8111c148 <_strtod_r+0x11bc>
8111c0f0:	e70002a4 	muli	fp,fp,10
8111c0f4:	497ffb1e 	bne	r9,r5,8111c0e4 <__reset+0xfb0fc0e4>
8111c0f8:	d9800617 	ldw	r6,24(sp)
8111c0fc:	4a400044 	addi	r9,r9,1
8111c100:	00c00204 	movi	r3,8
8111c104:	19400c0e 	bge	r3,r5,8111c138 <_strtod_r+0x11ac>
8111c108:	00800404 	movi	r2,16
8111c10c:	000b883a 	mov	r5,zero
8111c110:	127ea316 	blt	r2,r9,8111bba0 <__reset+0xfb0fbba0>
8111c114:	988002a4 	muli	r2,r19,10
8111c118:	20a7883a 	add	r19,r4,r2
8111c11c:	003ea006 	br	8111bba0 <__reset+0xfb0fbba0>
8111c120:	d8800617 	ldw	r2,24(sp)
8111c124:	8c7ff404 	addi	r17,r17,-48
8111c128:	2a800044 	addi	r10,r5,1
8111c12c:	d8800815 	stw	r2,32(sp)
8111c130:	100d883a 	mov	r6,r2
8111c134:	02400044 	movi	r9,1
8111c138:	e08002a4 	muli	r2,fp,10
8111c13c:	000b883a 	mov	r5,zero
8111c140:	88b9883a 	add	fp,r17,r2
8111c144:	003e9606 	br	8111bba0 <__reset+0xfb0fbba0>
8111c148:	3a7fea16 	blt	r7,r9,8111c0f4 <__reset+0xfb0fc0f4>
8111c14c:	9cc002a4 	muli	r19,r19,10
8111c150:	003fe806 	br	8111c0f4 <__reset+0xfb0fc0f4>
8111c154:	00bffa84 	movi	r2,-22
8111c158:	a8bd1016 	blt	r21,r2,8111b59c <__reset+0xfb0fb59c>
8111c15c:	a82a90fa 	slli	r21,r21,3
8111c160:	00a04534 	movhi	r2,33044
8111c164:	10ae6b04 	addi	r2,r2,-18004
8111c168:	1545c83a 	sub	r2,r2,r21
8111c16c:	11800017 	ldw	r6,0(r2)
8111c170:	11c00117 	ldw	r7,4(r2)
8111c174:	9009883a 	mov	r4,r18
8111c178:	880b883a 	mov	r5,r17
8111c17c:	112274c0 	call	8112274c <__divdf3>
8111c180:	102b883a 	mov	r21,r2
8111c184:	182d883a 	mov	r22,r3
8111c188:	003c4a06 	br	8111b2b4 <__reset+0xfb0fb2b4>
8111c18c:	dd000a15 	stw	r20,40(sp)
8111c190:	a811883a 	mov	r8,r21
8111c194:	dd001217 	ldw	r20,72(sp)
8111c198:	003e9e06 	br	8111bc14 <__reset+0xfb0fbc14>
8111c19c:	01604534 	movhi	r5,33044
8111c1a0:	d9000617 	ldw	r4,24(sp)
8111c1a4:	296e9d04 	addi	r5,r5,-17804
8111c1a8:	01c00644 	movi	r7,25
8111c1ac:	00000b06 	br	8111c1dc <_strtod_r+0x1250>
8111c1b0:	21000044 	addi	r4,r4,1
8111c1b4:	20800003 	ldbu	r2,0(r4)
8111c1b8:	10ffefc4 	addi	r3,r2,-65
8111c1bc:	10803fcc 	andi	r2,r2,255
8111c1c0:	1080201c 	xori	r2,r2,128
8111c1c4:	18c03fcc 	andi	r3,r3,255
8111c1c8:	10bfe004 	addi	r2,r2,-128
8111c1cc:	38c00136 	bltu	r7,r3,8111c1d4 <_strtod_r+0x1248>
8111c1d0:	10800804 	addi	r2,r2,32
8111c1d4:	29400044 	addi	r5,r5,1
8111c1d8:	11bbbb1e 	bne	r2,r6,8111b0c8 <__reset+0xfb0fb0c8>
8111c1dc:	29800007 	ldb	r6,0(r5)
8111c1e0:	303ff31e 	bne	r6,zero,8111c1b0 <__reset+0xfb0fc1b0>
8111c1e4:	01a04534 	movhi	r6,33044
8111c1e8:	d9000615 	stw	r4,24(sp)
8111c1ec:	31ae9e04 	addi	r6,r6,-17800
8111c1f0:	200b883a 	mov	r5,r4
8111c1f4:	02000644 	movi	r8,25
8111c1f8:	00000a06 	br	8111c224 <_strtod_r+0x1298>
8111c1fc:	28800003 	ldbu	r2,0(r5)
8111c200:	10ffefc4 	addi	r3,r2,-65
8111c204:	10803fcc 	andi	r2,r2,255
8111c208:	1080201c 	xori	r2,r2,128
8111c20c:	18c03fcc 	andi	r3,r3,255
8111c210:	10bfe004 	addi	r2,r2,-128
8111c214:	40c00136 	bltu	r8,r3,8111c21c <_strtod_r+0x1290>
8111c218:	10800804 	addi	r2,r2,32
8111c21c:	31800044 	addi	r6,r6,1
8111c220:	11c0711e 	bne	r2,r7,8111c3e8 <_strtod_r+0x145c>
8111c224:	31c00007 	ldb	r7,0(r6)
8111c228:	29400044 	addi	r5,r5,1
8111c22c:	383ff31e 	bne	r7,zero,8111c1fc <__reset+0xfb0fc1fc>
8111c230:	d9400615 	stw	r5,24(sp)
8111c234:	045ffc34 	movhi	r17,32752
8111c238:	0025883a 	mov	r18,zero
8111c23c:	003c1b06 	br	8111b2ac <__reset+0xfb0fb2ac>
8111c240:	000b883a 	mov	r5,zero
8111c244:	003ccc06 	br	8111b578 <__reset+0xfb0fb578>
8111c248:	d9400e17 	ldw	r5,56(sp)
8111c24c:	dd000a15 	stw	r20,40(sp)
8111c250:	00800434 	movhi	r2,16
8111c254:	a811883a 	mov	r8,r21
8111c258:	dd001217 	ldw	r20,72(sp)
8111c25c:	dd401117 	ldw	r21,68(sp)
8111c260:	dd801017 	ldw	r22,64(sp)
8111c264:	10bfffc4 	addi	r2,r2,-1
8111c268:	28005626 	beq	r5,zero,8111c3c4 <_strtod_r+0x1438>
8111c26c:	8886703a 	and	r3,r17,r2
8111c270:	18807826 	beq	r3,r2,8111c454 <_strtod_r+0x14c8>
8111c274:	d8c00b17 	ldw	r3,44(sp)
8111c278:	18005726 	beq	r3,zero,8111c3d8 <_strtod_r+0x144c>
8111c27c:	1c44703a 	and	r2,r3,r17
8111c280:	10000f26 	beq	r2,zero,8111c2c0 <_strtod_r+0x1334>
8111c284:	d9000e17 	ldw	r4,56(sp)
8111c288:	d9800917 	ldw	r6,36(sp)
8111c28c:	20005e26 	beq	r4,zero,8111c408 <_strtod_r+0x147c>
8111c290:	9009883a 	mov	r4,r18
8111c294:	880b883a 	mov	r5,r17
8111c298:	da001315 	stw	r8,76(sp)
8111c29c:	111af200 	call	8111af20 <sulp>
8111c2a0:	100d883a 	mov	r6,r2
8111c2a4:	180f883a 	mov	r7,r3
8111c2a8:	9009883a 	mov	r4,r18
8111c2ac:	880b883a 	mov	r5,r17
8111c2b0:	1121e980 	call	81121e98 <__adddf3>
8111c2b4:	da001317 	ldw	r8,76(sp)
8111c2b8:	102b883a 	mov	r21,r2
8111c2bc:	182d883a 	mov	r22,r3
8111c2c0:	d8c00917 	ldw	r3,36(sp)
8111c2c4:	18000f26 	beq	r3,zero,8111c304 <_strtod_r+0x1378>
8111c2c8:	a809883a 	mov	r4,r21
8111c2cc:	b00b883a 	mov	r5,r22
8111c2d0:	000d883a 	mov	r6,zero
8111c2d4:	01ce5434 	movhi	r7,14672
8111c2d8:	da001315 	stw	r8,76(sp)
8111c2dc:	110da7c0 	call	8110da7c <__muldf3>
8111c2e0:	102b883a 	mov	r21,r2
8111c2e4:	182d883a 	mov	r22,r3
8111c2e8:	da001317 	ldw	r8,76(sp)
8111c2ec:	1800051e 	bne	r3,zero,8111c304 <_strtod_r+0x1378>
8111c2f0:	d8800517 	ldw	r2,20(sp)
8111c2f4:	a83e4b1e 	bne	r21,zero,8111bc24 <__reset+0xfb0fbc24>
8111c2f8:	00c00884 	movi	r3,34
8111c2fc:	80c00015 	stw	r3,0(r16)
8111c300:	003e4806 	br	8111bc24 <__reset+0xfb0fbc24>
8111c304:	d8800517 	ldw	r2,20(sp)
8111c308:	003e4606 	br	8111bc24 <__reset+0xfb0fbc24>
8111c30c:	d9000e17 	ldw	r4,56(sp)
8111c310:	dd000a15 	stw	r20,40(sp)
8111c314:	a811883a 	mov	r8,r21
8111c318:	dd001217 	ldw	r20,72(sp)
8111c31c:	dd401117 	ldw	r21,68(sp)
8111c320:	dd801017 	ldw	r22,64(sp)
8111c324:	203fe61e 	bne	r4,zero,8111c2c0 <__reset+0xfb0fc2c0>
8111c328:	903fe51e 	bne	r18,zero,8111c2c0 <__reset+0xfb0fc2c0>
8111c32c:	00800434 	movhi	r2,16
8111c330:	10bfffc4 	addi	r2,r2,-1
8111c334:	8884703a 	and	r2,r17,r2
8111c338:	103fe11e 	bne	r2,zero,8111c2c0 <__reset+0xfb0fc2c0>
8111c33c:	8ddffc2c 	andhi	r23,r17,32752
8111c340:	0081ac34 	movhi	r2,1712
8111c344:	15ffde2e 	bgeu	r2,r23,8111c2c0 <__reset+0xfb0fc2c0>
8111c348:	40800517 	ldw	r2,20(r8)
8111c34c:	1000031e 	bne	r2,zero,8111c35c <_strtod_r+0x13d0>
8111c350:	40800417 	ldw	r2,16(r8)
8111c354:	00c00044 	movi	r3,1
8111c358:	18bfd90e 	bge	r3,r2,8111c2c0 <__reset+0xfb0fc2c0>
8111c35c:	400b883a 	mov	r5,r8
8111c360:	01800044 	movi	r6,1
8111c364:	8009883a 	mov	r4,r16
8111c368:	1119d000 	call	81119d00 <__lshift>
8111c36c:	980b883a 	mov	r5,r19
8111c370:	1009883a 	mov	r4,r2
8111c374:	d8801315 	stw	r2,76(sp)
8111c378:	1119e500 	call	81119e50 <__mcmp>
8111c37c:	da001317 	ldw	r8,76(sp)
8111c380:	00bfcf0e 	bge	zero,r2,8111c2c0 <__reset+0xfb0fc2c0>
8111c384:	d8c00917 	ldw	r3,36(sp)
8111c388:	18005c26 	beq	r3,zero,8111c4fc <_strtod_r+0x1570>
8111c38c:	0081ac34 	movhi	r2,1712
8111c390:	15c05a16 	blt	r2,r23,8111c4fc <_strtod_r+0x1570>
8111c394:	0080dc34 	movhi	r2,880
8111c398:	15ffcb16 	blt	r2,r23,8111c2c8 <__reset+0xfb0fc2c8>
8111c39c:	003f1106 	br	8111bfe4 <__reset+0xfb0fbfe4>
8111c3a0:	002d883a 	mov	r22,zero
8111c3a4:	022ff834 	movhi	r8,49120
8111c3a8:	d8000d15 	stw	zero,52(sp)
8111c3ac:	05cff834 	movhi	r23,16352
8111c3b0:	003ded06 	br	8111bb68 <__reset+0xfb0fbb68>
8111c3b4:	0440d434 	movhi	r17,848
8111c3b8:	1c63883a 	add	r17,r3,r17
8111c3bc:	d8000915 	stw	zero,36(sp)
8111c3c0:	003cc806 	br	8111b6e4 <__reset+0xfb0fb6e4>
8111c3c4:	8884703a 	and	r2,r17,r2
8111c3c8:	103faa1e 	bne	r2,zero,8111c274 <__reset+0xfb0fc274>
8111c3cc:	903fa91e 	bne	r18,zero,8111c274 <__reset+0xfb0fc274>
8111c3d0:	8ddffc2c 	andhi	r23,r17,32752
8111c3d4:	003feb06 	br	8111c384 <__reset+0xfb0fc384>
8111c3d8:	d8c00d17 	ldw	r3,52(sp)
8111c3dc:	1cae703a 	and	r23,r3,r18
8111c3e0:	b83fb726 	beq	r23,zero,8111c2c0 <__reset+0xfb0fc2c0>
8111c3e4:	003fa706 	br	8111c284 <__reset+0xfb0fc284>
8111c3e8:	21000044 	addi	r4,r4,1
8111c3ec:	d9000615 	stw	r4,24(sp)
8111c3f0:	003f9006 	br	8111c234 <__reset+0xfb0fc234>
8111c3f4:	01604534 	movhi	r5,33044
8111c3f8:	296e6104 	addi	r5,r5,-18044
8111c3fc:	d9400915 	stw	r5,36(sp)
8111c400:	0027883a 	mov	r19,zero
8111c404:	003ca206 	br	8111b690 <__reset+0xfb0fb690>
8111c408:	9009883a 	mov	r4,r18
8111c40c:	880b883a 	mov	r5,r17
8111c410:	da001315 	stw	r8,76(sp)
8111c414:	111af200 	call	8111af20 <sulp>
8111c418:	100d883a 	mov	r6,r2
8111c41c:	180f883a 	mov	r7,r3
8111c420:	9009883a 	mov	r4,r18
8111c424:	880b883a 	mov	r5,r17
8111c428:	11232940 	call	81123294 <__subdf3>
8111c42c:	000d883a 	mov	r6,zero
8111c430:	000f883a 	mov	r7,zero
8111c434:	1009883a 	mov	r4,r2
8111c438:	180b883a 	mov	r5,r3
8111c43c:	102b883a 	mov	r21,r2
8111c440:	182d883a 	mov	r22,r3
8111c444:	112303c0 	call	8112303c <__eqdf2>
8111c448:	da001317 	ldw	r8,76(sp)
8111c44c:	103ee526 	beq	r2,zero,8111bfe4 <__reset+0xfb0fbfe4>
8111c450:	003f9b06 	br	8111c2c0 <__reset+0xfb0fc2c0>
8111c454:	d8800917 	ldw	r2,36(sp)
8111c458:	10002226 	beq	r2,zero,8111c4e4 <_strtod_r+0x1558>
8111c45c:	889ffc2c 	andhi	r2,r17,32752
8111c460:	00c1a834 	movhi	r3,1696
8111c464:	18801f36 	bltu	r3,r2,8111c4e4 <_strtod_r+0x1558>
8111c468:	1004d53a 	srli	r2,r2,20
8111c46c:	00c01ac4 	movi	r3,107
8111c470:	1887c83a 	sub	r3,r3,r2
8111c474:	00bfffc4 	movi	r2,-1
8111c478:	10c4983a 	sll	r2,r2,r3
8111c47c:	14bf7d1e 	bne	r2,r18,8111c274 <__reset+0xfb0fc274>
8111c480:	00dffc34 	movhi	r3,32752
8111c484:	18ffffc4 	addi	r3,r3,-1
8111c488:	88c03526 	beq	r17,r3,8111c560 <_strtod_r+0x15d4>
8111c48c:	8c5ffc2c 	andhi	r17,r17,32752
8111c490:	00800434 	movhi	r2,16
8111c494:	002b883a 	mov	r21,zero
8111c498:	88ad883a 	add	r22,r17,r2
8111c49c:	003f8806 	br	8111c2c0 <__reset+0xfb0fc2c0>
8111c4a0:	01401a84 	movi	r5,106
8111c4a4:	d9400915 	stw	r5,36(sp)
8111c4a8:	8ddffc2c 	andhi	r23,r17,32752
8111c4ac:	b82ed53a 	srli	r23,r23,20
8111c4b0:	00801ac4 	movi	r2,107
8111c4b4:	15c5c83a 	sub	r2,r2,r23
8111c4b8:	00be8e0e 	bge	zero,r2,8111bef4 <__reset+0xfb0fbef4>
8111c4bc:	00c007c4 	movi	r3,31
8111c4c0:	18800a0e 	bge	r3,r2,8111c4ec <_strtod_r+0x1560>
8111c4c4:	00c00d04 	movi	r3,52
8111c4c8:	0025883a 	mov	r18,zero
8111c4cc:	1880270e 	bge	r3,r2,8111c56c <_strtod_r+0x15e0>
8111c4d0:	0440dc34 	movhi	r17,880
8111c4d4:	003e8706 	br	8111bef4 <__reset+0xfb0fbef4>
8111c4d8:	d8000915 	stw	zero,36(sp)
8111c4dc:	05fe6a16 	blt	zero,r23,8111be88 <__reset+0xfb0fbe88>
8111c4e0:	003e8406 	br	8111bef4 <__reset+0xfb0fbef4>
8111c4e4:	00bfffc4 	movi	r2,-1
8111c4e8:	003fe406 	br	8111c47c <__reset+0xfb0fc47c>
8111c4ec:	00ffffc4 	movi	r3,-1
8111c4f0:	1884983a 	sll	r2,r3,r2
8111c4f4:	14a4703a 	and	r18,r2,r18
8111c4f8:	003e7e06 	br	8111bef4 <__reset+0xfb0fbef4>
8111c4fc:	00bffc34 	movhi	r2,65520
8111c500:	b8af883a 	add	r23,r23,r2
8111c504:	057fffc4 	movi	r21,-1
8111c508:	00800434 	movhi	r2,16
8111c50c:	1545883a 	add	r2,r2,r21
8111c510:	b8acb03a 	or	r22,r23,r2
8111c514:	003f6a06 	br	8111c2c0 <__reset+0xfb0fc2c0>
8111c518:	01604534 	movhi	r5,33044
8111c51c:	296ea104 	addi	r5,r5,-17788
8111c520:	d9800204 	addi	r6,sp,8
8111c524:	d9000604 	addi	r4,sp,24
8111c528:	1120a780 	call	81120a78 <__hexnan>
8111c52c:	00c00144 	movi	r3,5
8111c530:	10fb5c1e 	bne	r2,r3,8111b2a4 <__reset+0xfb0fb2a4>
8111c534:	dc400317 	ldw	r17,12(sp)
8111c538:	dc800217 	ldw	r18,8(sp)
8111c53c:	8c5ffc34 	orhi	r17,r17,32752
8111c540:	003b5a06 	br	8111b2ac <__reset+0xfb0fb2ac>
8111c544:	480b883a 	mov	r5,r9
8111c548:	d9800617 	ldw	r6,24(sp)
8111c54c:	4a400044 	addi	r9,r9,1
8111c550:	003eeb06 	br	8111c100 <__reset+0xfb0fc100>
8111c554:	1025883a 	mov	r18,r2
8111c558:	1823883a 	mov	r17,r3
8111c55c:	003c4c06 	br	8111b690 <__reset+0xfb0fb690>
8111c560:	00ffffc4 	movi	r3,-1
8111c564:	10ffc91e 	bne	r2,r3,8111c48c <__reset+0xfb0fc48c>
8111c568:	003da906 	br	8111bc10 <__reset+0xfb0fbc10>
8111c56c:	10bff804 	addi	r2,r2,-32
8111c570:	00ffffc4 	movi	r3,-1
8111c574:	1884983a 	sll	r2,r3,r2
8111c578:	1462703a 	and	r17,r2,r17
8111c57c:	003e5d06 	br	8111bef4 <__reset+0xfb0fbef4>
8111c580:	1025883a 	mov	r18,r2
8111c584:	1823883a 	mov	r17,r3
8111c588:	003e5806 	br	8111beec <__reset+0xfb0fbeec>

8111c58c <strtod>:
8111c58c:	00a04534 	movhi	r2,33044
8111c590:	10b73304 	addi	r2,r2,-9012
8111c594:	280d883a 	mov	r6,r5
8111c598:	200b883a 	mov	r5,r4
8111c59c:	11000017 	ldw	r4,0(r2)
8111c5a0:	111af8c1 	jmpi	8111af8c <_strtod_r>

8111c5a4 <strtof>:
8111c5a4:	defffb04 	addi	sp,sp,-20
8111c5a8:	de00012e 	bgeu	sp,et,8111c5b0 <strtof+0xc>
8111c5ac:	003b68fa 	trap	3
8111c5b0:	dcc00315 	stw	r19,12(sp)
8111c5b4:	04e04534 	movhi	r19,33044
8111c5b8:	9cf73304 	addi	r19,r19,-9012
8111c5bc:	280d883a 	mov	r6,r5
8111c5c0:	200b883a 	mov	r5,r4
8111c5c4:	99000017 	ldw	r4,0(r19)
8111c5c8:	dfc00415 	stw	ra,16(sp)
8111c5cc:	dc800215 	stw	r18,8(sp)
8111c5d0:	dc400115 	stw	r17,4(sp)
8111c5d4:	dc000015 	stw	r16,0(sp)
8111c5d8:	111af8c0 	call	8111af8c <_strtod_r>
8111c5dc:	1009883a 	mov	r4,r2
8111c5e0:	180b883a 	mov	r5,r3
8111c5e4:	1025883a 	mov	r18,r2
8111c5e8:	1823883a 	mov	r17,r3
8111c5ec:	110e2b40 	call	8110e2b4 <__truncdfsf2>
8111c5f0:	000b883a 	mov	r5,zero
8111c5f4:	1009883a 	mov	r4,r2
8111c5f8:	1021883a 	mov	r16,r2
8111c5fc:	1121c9c0 	call	81121c9c <__eqsf2>
8111c600:	1000111e 	bne	r2,zero,8111c648 <strtof+0xa4>
8111c604:	000d883a 	mov	r6,zero
8111c608:	000f883a 	mov	r7,zero
8111c60c:	9009883a 	mov	r4,r18
8111c610:	880b883a 	mov	r5,r17
8111c614:	112303c0 	call	8112303c <__eqdf2>
8111c618:	10000b26 	beq	r2,zero,8111c648 <strtof+0xa4>
8111c61c:	98800017 	ldw	r2,0(r19)
8111c620:	00c00884 	movi	r3,34
8111c624:	10c00015 	stw	r3,0(r2)
8111c628:	8005883a 	mov	r2,r16
8111c62c:	dfc00417 	ldw	ra,16(sp)
8111c630:	dcc00317 	ldw	r19,12(sp)
8111c634:	dc800217 	ldw	r18,8(sp)
8111c638:	dc400117 	ldw	r17,4(sp)
8111c63c:	dc000017 	ldw	r16,0(sp)
8111c640:	dec00504 	addi	sp,sp,20
8111c644:	f800283a 	ret
8111c648:	015fe034 	movhi	r5,32640
8111c64c:	297fffc4 	addi	r5,r5,-1
8111c650:	8009883a 	mov	r4,r16
8111c654:	1121d140 	call	81121d14 <__gesf2>
8111c658:	0080070e 	bge	zero,r2,8111c678 <strtof+0xd4>
8111c65c:	01dffc34 	movhi	r7,32752
8111c660:	39ffffc4 	addi	r7,r7,-1
8111c664:	01bfffc4 	movi	r6,-1
8111c668:	9009883a 	mov	r4,r18
8111c66c:	880b883a 	mov	r5,r17
8111c670:	11230c40 	call	811230c4 <__gedf2>
8111c674:	00bfe90e 	bge	zero,r2,8111c61c <__reset+0xfb0fc61c>
8111c678:	017fe034 	movhi	r5,65408
8111c67c:	297fffc4 	addi	r5,r5,-1
8111c680:	8009883a 	mov	r4,r16
8111c684:	1121dd00 	call	81121dd0 <__lesf2>
8111c688:	103fe70e 	bge	r2,zero,8111c628 <__reset+0xfb0fc628>
8111c68c:	01fffc34 	movhi	r7,65520
8111c690:	39ffffc4 	addi	r7,r7,-1
8111c694:	01bfffc4 	movi	r6,-1
8111c698:	9009883a 	mov	r4,r18
8111c69c:	880b883a 	mov	r5,r17
8111c6a0:	11231a00 	call	811231a0 <__ledf2>
8111c6a4:	103fdd0e 	bge	r2,zero,8111c61c <__reset+0xfb0fc61c>
8111c6a8:	003fdf06 	br	8111c628 <__reset+0xfb0fc628>

8111c6ac <_strtoll_r>:
8111c6ac:	00a04534 	movhi	r2,33044
8111c6b0:	defff304 	addi	sp,sp,-52
8111c6b4:	10b73104 	addi	r2,r2,-9020
8111c6b8:	de00012e 	bgeu	sp,et,8111c6c0 <_strtoll_r+0x14>
8111c6bc:	003b68fa 	trap	3
8111c6c0:	dc800515 	stw	r18,20(sp)
8111c6c4:	14800017 	ldw	r18,0(r2)
8111c6c8:	dd800915 	stw	r22,36(sp)
8111c6cc:	dd400815 	stw	r21,32(sp)
8111c6d0:	dcc00615 	stw	r19,24(sp)
8111c6d4:	d9000015 	stw	r4,0(sp)
8111c6d8:	dfc00c15 	stw	ra,48(sp)
8111c6dc:	df000b15 	stw	fp,44(sp)
8111c6e0:	ddc00a15 	stw	r23,40(sp)
8111c6e4:	dd000715 	stw	r20,28(sp)
8111c6e8:	dc400415 	stw	r17,16(sp)
8111c6ec:	dc000315 	stw	r16,12(sp)
8111c6f0:	282d883a 	mov	r22,r5
8111c6f4:	302b883a 	mov	r21,r6
8111c6f8:	3827883a 	mov	r19,r7
8111c6fc:	2809883a 	mov	r4,r5
8111c700:	24000003 	ldbu	r16,0(r4)
8111c704:	24400044 	addi	r17,r4,1
8111c708:	2007883a 	mov	r3,r4
8111c70c:	9405883a 	add	r2,r18,r16
8111c710:	10800043 	ldbu	r2,1(r2)
8111c714:	8809883a 	mov	r4,r17
8111c718:	1080020c 	andi	r2,r2,8
8111c71c:	103ff81e 	bne	r2,zero,8111c700 <__reset+0xfb0fc700>
8111c720:	00800b44 	movi	r2,45
8111c724:	80807826 	beq	r16,r2,8111c908 <_strtoll_r+0x25c>
8111c728:	00800ac4 	movi	r2,43
8111c72c:	80807a26 	beq	r16,r2,8111c918 <_strtoll_r+0x26c>
8111c730:	0039883a 	mov	fp,zero
8111c734:	98004e26 	beq	r19,zero,8111c870 <_strtoll_r+0x1c4>
8111c738:	00800404 	movi	r2,16
8111c73c:	98808226 	beq	r19,r2,8111c948 <_strtoll_r+0x29c>
8111c740:	982fd7fa 	srai	r23,r19,31
8111c744:	9829883a 	mov	r20,r19
8111c748:	e0004f26 	beq	fp,zero,8111c888 <_strtoll_r+0x1dc>
8111c74c:	0017883a 	mov	r11,zero
8111c750:	02a00034 	movhi	r10,32768
8111c754:	5809883a 	mov	r4,r11
8111c758:	500b883a 	mov	r5,r10
8111c75c:	a00d883a 	mov	r6,r20
8111c760:	b80f883a 	mov	r7,r23
8111c764:	da800215 	stw	r10,8(sp)
8111c768:	dac00115 	stw	r11,4(sp)
8111c76c:	11215a80 	call	811215a8 <__umoddi3>
8111c770:	dac00117 	ldw	r11,4(sp)
8111c774:	da800217 	ldw	r10,8(sp)
8111c778:	a00d883a 	mov	r6,r20
8111c77c:	5809883a 	mov	r4,r11
8111c780:	500b883a 	mov	r5,r10
8111c784:	b80f883a 	mov	r7,r23
8111c788:	d8800115 	stw	r2,4(sp)
8111c78c:	11210280 	call	81121028 <__udivdi3>
8111c790:	9409883a 	add	r4,r18,r16
8111c794:	21000043 	ldbu	r4,1(r4)
8111c798:	1019883a 	mov	r12,r2
8111c79c:	880b883a 	mov	r5,r17
8111c7a0:	2240010c 	andi	r9,r4,4
8111c7a4:	0015883a 	mov	r10,zero
8111c7a8:	000d883a 	mov	r6,zero
8111c7ac:	000f883a 	mov	r7,zero
8111c7b0:	03400044 	movi	r13,1
8111c7b4:	02ffffc4 	movi	r11,-1
8111c7b8:	da000117 	ldw	r8,4(sp)
8111c7bc:	48000d26 	beq	r9,zero,8111c7f4 <_strtoll_r+0x148>
8111c7c0:	843ff404 	addi	r16,r16,-48
8111c7c4:	84c0110e 	bge	r16,r19,8111c80c <_strtoll_r+0x160>
8111c7c8:	52c00426 	beq	r10,r11,8111c7dc <_strtoll_r+0x130>
8111c7cc:	19c00236 	bltu	r3,r7,8111c7d8 <_strtoll_r+0x12c>
8111c7d0:	38c0311e 	bne	r7,r3,8111c898 <_strtoll_r+0x1ec>
8111c7d4:	6180302e 	bgeu	r12,r6,8111c898 <_strtoll_r+0x1ec>
8111c7d8:	02bfffc4 	movi	r10,-1
8111c7dc:	2c000003 	ldbu	r16,0(r5)
8111c7e0:	29400044 	addi	r5,r5,1
8111c7e4:	9409883a 	add	r4,r18,r16
8111c7e8:	21000043 	ldbu	r4,1(r4)
8111c7ec:	2240010c 	andi	r9,r4,4
8111c7f0:	483ff31e 	bne	r9,zero,8111c7c0 <__reset+0xfb0fc7c0>
8111c7f4:	210000cc 	andi	r4,r4,3
8111c7f8:	20000426 	beq	r4,zero,8111c80c <_strtoll_r+0x160>
8111c7fc:	23403426 	beq	r4,r13,8111c8d0 <_strtoll_r+0x224>
8111c800:	008015c4 	movi	r2,87
8111c804:	80a1c83a 	sub	r16,r16,r2
8111c808:	84ffef16 	blt	r16,r19,8111c7c8 <__reset+0xfb0fc7c8>
8111c80c:	00bfffc4 	movi	r2,-1
8111c810:	50803426 	beq	r10,r2,8111c8e4 <_strtoll_r+0x238>
8111c814:	e0000426 	beq	fp,zero,8111c828 <_strtoll_r+0x17c>
8111c818:	018dc83a 	sub	r6,zero,r6
8111c81c:	3004c03a 	cmpne	r2,r6,zero
8111c820:	01e1c83a 	sub	r16,zero,r7
8111c824:	808fc83a 	sub	r7,r16,r2
8111c828:	3005883a 	mov	r2,r6
8111c82c:	3807883a 	mov	r3,r7
8111c830:	a8000326 	beq	r21,zero,8111c840 <_strtoll_r+0x194>
8111c834:	5000321e 	bne	r10,zero,8111c900 <_strtoll_r+0x254>
8111c838:	b00b883a 	mov	r5,r22
8111c83c:	a9400015 	stw	r5,0(r21)
8111c840:	dfc00c17 	ldw	ra,48(sp)
8111c844:	df000b17 	ldw	fp,44(sp)
8111c848:	ddc00a17 	ldw	r23,40(sp)
8111c84c:	dd800917 	ldw	r22,36(sp)
8111c850:	dd400817 	ldw	r21,32(sp)
8111c854:	dd000717 	ldw	r20,28(sp)
8111c858:	dcc00617 	ldw	r19,24(sp)
8111c85c:	dc800517 	ldw	r18,20(sp)
8111c860:	dc400417 	ldw	r17,16(sp)
8111c864:	dc000317 	ldw	r16,12(sp)
8111c868:	dec00d04 	addi	sp,sp,52
8111c86c:	f800283a 	ret
8111c870:	00800c04 	movi	r2,48
8111c874:	80802c26 	beq	r16,r2,8111c928 <_strtoll_r+0x27c>
8111c878:	05000284 	movi	r20,10
8111c87c:	002f883a 	mov	r23,zero
8111c880:	a027883a 	mov	r19,r20
8111c884:	e03fb11e 	bne	fp,zero,8111c74c <__reset+0xfb0fc74c>
8111c888:	02a00034 	movhi	r10,32768
8111c88c:	52bfffc4 	addi	r10,r10,-1
8111c890:	02ffffc4 	movi	r11,-1
8111c894:	003faf06 	br	8111c754 <__reset+0xfb0fc754>
8111c898:	33000f26 	beq	r6,r12,8111c8d8 <_strtoll_r+0x22c>
8111c89c:	b985383a 	mul	r2,r23,r6
8111c8a0:	3d0f383a 	mul	r7,r7,r20
8111c8a4:	3508383a 	mulxuu	r4,r6,r20
8111c8a8:	350d383a 	mul	r6,r6,r20
8111c8ac:	8013d7fa 	srai	r9,r16,31
8111c8b0:	388f883a 	add	r7,r7,r2
8111c8b4:	818d883a 	add	r6,r16,r6
8111c8b8:	390f883a 	add	r7,r7,r4
8111c8bc:	3421803a 	cmpltu	r16,r6,r16
8111c8c0:	49cf883a 	add	r7,r9,r7
8111c8c4:	81cf883a 	add	r7,r16,r7
8111c8c8:	02800044 	movi	r10,1
8111c8cc:	003fc306 	br	8111c7dc <__reset+0xfb0fc7dc>
8111c8d0:	00800dc4 	movi	r2,55
8111c8d4:	003fcb06 	br	8111c804 <__reset+0xfb0fc804>
8111c8d8:	38fff01e 	bne	r7,r3,8111c89c <__reset+0xfb0fc89c>
8111c8dc:	443fbe16 	blt	r8,r16,8111c7d8 <__reset+0xfb0fc7d8>
8111c8e0:	003fee06 	br	8111c89c <__reset+0xfb0fc89c>
8111c8e4:	e0002426 	beq	fp,zero,8111c978 <_strtoll_r+0x2cc>
8111c8e8:	0005883a 	mov	r2,zero
8111c8ec:	00e00034 	movhi	r3,32768
8111c8f0:	d9800017 	ldw	r6,0(sp)
8111c8f4:	01000884 	movi	r4,34
8111c8f8:	31000015 	stw	r4,0(r6)
8111c8fc:	a83fd026 	beq	r21,zero,8111c840 <__reset+0xfb0fc840>
8111c900:	297fffc4 	addi	r5,r5,-1
8111c904:	003fcd06 	br	8111c83c <__reset+0xfb0fc83c>
8111c908:	1c400084 	addi	r17,r3,2
8111c90c:	1c000043 	ldbu	r16,1(r3)
8111c910:	07000044 	movi	fp,1
8111c914:	003f8706 	br	8111c734 <__reset+0xfb0fc734>
8111c918:	1c400084 	addi	r17,r3,2
8111c91c:	1c000043 	ldbu	r16,1(r3)
8111c920:	0039883a 	mov	fp,zero
8111c924:	003f8306 	br	8111c734 <__reset+0xfb0fc734>
8111c928:	88800003 	ldbu	r2,0(r17)
8111c92c:	00c01604 	movi	r3,88
8111c930:	108037cc 	andi	r2,r2,223
8111c934:	10c00a26 	beq	r2,r3,8111c960 <_strtoll_r+0x2b4>
8111c938:	05000204 	movi	r20,8
8111c93c:	002f883a 	mov	r23,zero
8111c940:	a027883a 	mov	r19,r20
8111c944:	003f8006 	br	8111c748 <__reset+0xfb0fc748>
8111c948:	00800c04 	movi	r2,48
8111c94c:	80800e1e 	bne	r16,r2,8111c988 <_strtoll_r+0x2dc>
8111c950:	88800003 	ldbu	r2,0(r17)
8111c954:	00c01604 	movi	r3,88
8111c958:	108037cc 	andi	r2,r2,223
8111c95c:	10c00a1e 	bne	r2,r3,8111c988 <_strtoll_r+0x2dc>
8111c960:	05000404 	movi	r20,16
8111c964:	8c000043 	ldbu	r16,1(r17)
8111c968:	002f883a 	mov	r23,zero
8111c96c:	8c400084 	addi	r17,r17,2
8111c970:	a027883a 	mov	r19,r20
8111c974:	003f7406 	br	8111c748 <__reset+0xfb0fc748>
8111c978:	00e00034 	movhi	r3,32768
8111c97c:	18ffffc4 	addi	r3,r3,-1
8111c980:	5005883a 	mov	r2,r10
8111c984:	003fda06 	br	8111c8f0 <__reset+0xfb0fc8f0>
8111c988:	9829883a 	mov	r20,r19
8111c98c:	002f883a 	mov	r23,zero
8111c990:	003f6d06 	br	8111c748 <__reset+0xfb0fc748>

8111c994 <_strtoul_r>:
8111c994:	00a04534 	movhi	r2,33044
8111c998:	defff604 	addi	sp,sp,-40
8111c99c:	10b73104 	addi	r2,r2,-9020
8111c9a0:	de00012e 	bgeu	sp,et,8111c9a8 <_strtoul_r+0x14>
8111c9a4:	003b68fa 	trap	3
8111c9a8:	dc800315 	stw	r18,12(sp)
8111c9ac:	14800017 	ldw	r18,0(r2)
8111c9b0:	dd400615 	stw	r21,24(sp)
8111c9b4:	dd000515 	stw	r20,20(sp)
8111c9b8:	dcc00415 	stw	r19,16(sp)
8111c9bc:	2029883a 	mov	r20,r4
8111c9c0:	dfc00915 	stw	ra,36(sp)
8111c9c4:	ddc00815 	stw	r23,32(sp)
8111c9c8:	dd800715 	stw	r22,28(sp)
8111c9cc:	dc400215 	stw	r17,8(sp)
8111c9d0:	dc000115 	stw	r16,4(sp)
8111c9d4:	2827883a 	mov	r19,r5
8111c9d8:	382b883a 	mov	r21,r7
8111c9dc:	2809883a 	mov	r4,r5
8111c9e0:	24000003 	ldbu	r16,0(r4)
8111c9e4:	24400044 	addi	r17,r4,1
8111c9e8:	2007883a 	mov	r3,r4
8111c9ec:	9405883a 	add	r2,r18,r16
8111c9f0:	10800043 	ldbu	r2,1(r2)
8111c9f4:	8809883a 	mov	r4,r17
8111c9f8:	1080020c 	andi	r2,r2,8
8111c9fc:	103ff81e 	bne	r2,zero,8111c9e0 <__reset+0xfb0fc9e0>
8111ca00:	00800b44 	movi	r2,45
8111ca04:	80805326 	beq	r16,r2,8111cb54 <_strtoul_r+0x1c0>
8111ca08:	00800ac4 	movi	r2,43
8111ca0c:	80805526 	beq	r16,r2,8111cb64 <_strtoul_r+0x1d0>
8111ca10:	002f883a 	mov	r23,zero
8111ca14:	a8000f26 	beq	r21,zero,8111ca54 <_strtoul_r+0xc0>
8111ca18:	00800404 	movi	r2,16
8111ca1c:	a8805f26 	beq	r21,r2,8111cb9c <_strtoul_r+0x208>
8111ca20:	013fffc4 	movi	r4,-1
8111ca24:	a80b883a 	mov	r5,r21
8111ca28:	d9800015 	stw	r6,0(sp)
8111ca2c:	1121be00 	call	81121be0 <__udivsi3>
8111ca30:	a80b883a 	mov	r5,r21
8111ca34:	013fffc4 	movi	r4,-1
8111ca38:	102d883a 	mov	r22,r2
8111ca3c:	1121c440 	call	81121c44 <__umodsi3>
8111ca40:	d9800017 	ldw	r6,0(sp)
8111ca44:	1019883a 	mov	r12,r2
8111ca48:	a817883a 	mov	r11,r21
8111ca4c:	b00f883a 	mov	r7,r22
8111ca50:	00000706 	br	8111ca70 <_strtoul_r+0xdc>
8111ca54:	00800c04 	movi	r2,48
8111ca58:	80804626 	beq	r16,r2,8111cb74 <_strtoul_r+0x1e0>
8111ca5c:	05400284 	movi	r21,10
8111ca60:	01c666b4 	movhi	r7,6554
8111ca64:	03000144 	movi	r12,5
8111ca68:	39e66644 	addi	r7,r7,-26215
8111ca6c:	a817883a 	mov	r11,r21
8111ca70:	9407883a 	add	r3,r18,r16
8111ca74:	18c00043 	ldbu	r3,1(r3)
8111ca78:	8809883a 	mov	r4,r17
8111ca7c:	0011883a 	mov	r8,zero
8111ca80:	1940010c 	andi	r5,r3,4
8111ca84:	0005883a 	mov	r2,zero
8111ca88:	02800044 	movi	r10,1
8111ca8c:	027fffc4 	movi	r9,-1
8111ca90:	28000e26 	beq	r5,zero,8111cacc <_strtoul_r+0x138>
8111ca94:	843ff404 	addi	r16,r16,-48
8111ca98:	8540120e 	bge	r16,r21,8111cae4 <_strtoul_r+0x150>
8111ca9c:	42400526 	beq	r8,r9,8111cab4 <_strtoul_r+0x120>
8111caa0:	38802236 	bltu	r7,r2,8111cb2c <_strtoul_r+0x198>
8111caa4:	11c02026 	beq	r2,r7,8111cb28 <_strtoul_r+0x194>
8111caa8:	12c5383a 	mul	r2,r2,r11
8111caac:	02000044 	movi	r8,1
8111cab0:	8085883a 	add	r2,r16,r2
8111cab4:	24000003 	ldbu	r16,0(r4)
8111cab8:	21000044 	addi	r4,r4,1
8111cabc:	9407883a 	add	r3,r18,r16
8111cac0:	18c00043 	ldbu	r3,1(r3)
8111cac4:	1940010c 	andi	r5,r3,4
8111cac8:	283ff21e 	bne	r5,zero,8111ca94 <__reset+0xfb0fca94>
8111cacc:	18c000cc 	andi	r3,r3,3
8111cad0:	18000426 	beq	r3,zero,8111cae4 <_strtoul_r+0x150>
8111cad4:	1a801726 	beq	r3,r10,8111cb34 <_strtoul_r+0x1a0>
8111cad8:	00c015c4 	movi	r3,87
8111cadc:	80e1c83a 	sub	r16,r16,r3
8111cae0:	857fee16 	blt	r16,r21,8111ca9c <__reset+0xfb0fca9c>
8111cae4:	40001516 	blt	r8,zero,8111cb3c <_strtoul_r+0x1a8>
8111cae8:	b8000126 	beq	r23,zero,8111caf0 <_strtoul_r+0x15c>
8111caec:	0085c83a 	sub	r2,zero,r2
8111caf0:	30000226 	beq	r6,zero,8111cafc <_strtoul_r+0x168>
8111caf4:	4000151e 	bne	r8,zero,8111cb4c <_strtoul_r+0x1b8>
8111caf8:	34c00015 	stw	r19,0(r6)
8111cafc:	dfc00917 	ldw	ra,36(sp)
8111cb00:	ddc00817 	ldw	r23,32(sp)
8111cb04:	dd800717 	ldw	r22,28(sp)
8111cb08:	dd400617 	ldw	r21,24(sp)
8111cb0c:	dd000517 	ldw	r20,20(sp)
8111cb10:	dcc00417 	ldw	r19,16(sp)
8111cb14:	dc800317 	ldw	r18,12(sp)
8111cb18:	dc400217 	ldw	r17,8(sp)
8111cb1c:	dc000117 	ldw	r16,4(sp)
8111cb20:	dec00a04 	addi	sp,sp,40
8111cb24:	f800283a 	ret
8111cb28:	643fdf0e 	bge	r12,r16,8111caa8 <__reset+0xfb0fcaa8>
8111cb2c:	023fffc4 	movi	r8,-1
8111cb30:	003fe006 	br	8111cab4 <__reset+0xfb0fcab4>
8111cb34:	00c00dc4 	movi	r3,55
8111cb38:	003fe806 	br	8111cadc <__reset+0xfb0fcadc>
8111cb3c:	00800884 	movi	r2,34
8111cb40:	a0800015 	stw	r2,0(r20)
8111cb44:	00bfffc4 	movi	r2,-1
8111cb48:	303fec26 	beq	r6,zero,8111cafc <__reset+0xfb0fcafc>
8111cb4c:	24ffffc4 	addi	r19,r4,-1
8111cb50:	003fe906 	br	8111caf8 <__reset+0xfb0fcaf8>
8111cb54:	1c400084 	addi	r17,r3,2
8111cb58:	1c000043 	ldbu	r16,1(r3)
8111cb5c:	05c00044 	movi	r23,1
8111cb60:	003fac06 	br	8111ca14 <__reset+0xfb0fca14>
8111cb64:	1c400084 	addi	r17,r3,2
8111cb68:	1c000043 	ldbu	r16,1(r3)
8111cb6c:	002f883a 	mov	r23,zero
8111cb70:	003fa806 	br	8111ca14 <__reset+0xfb0fca14>
8111cb74:	88800003 	ldbu	r2,0(r17)
8111cb78:	00c01604 	movi	r3,88
8111cb7c:	108037cc 	andi	r2,r2,223
8111cb80:	10c00c26 	beq	r2,r3,8111cbb4 <_strtoul_r+0x220>
8111cb84:	05400204 	movi	r21,8
8111cb88:	01c80034 	movhi	r7,8192
8111cb8c:	030001c4 	movi	r12,7
8111cb90:	39ffffc4 	addi	r7,r7,-1
8111cb94:	a817883a 	mov	r11,r21
8111cb98:	003fb506 	br	8111ca70 <__reset+0xfb0fca70>
8111cb9c:	00800c04 	movi	r2,48
8111cba0:	80800c1e 	bne	r16,r2,8111cbd4 <_strtoul_r+0x240>
8111cba4:	88800003 	ldbu	r2,0(r17)
8111cba8:	00c01604 	movi	r3,88
8111cbac:	108037cc 	andi	r2,r2,223
8111cbb0:	10c0081e 	bne	r2,r3,8111cbd4 <_strtoul_r+0x240>
8111cbb4:	02c00404 	movi	r11,16
8111cbb8:	05840034 	movhi	r22,4096
8111cbbc:	8c000043 	ldbu	r16,1(r17)
8111cbc0:	030003c4 	movi	r12,15
8111cbc4:	8c400084 	addi	r17,r17,2
8111cbc8:	b5bfffc4 	addi	r22,r22,-1
8111cbcc:	582b883a 	mov	r21,r11
8111cbd0:	003f9e06 	br	8111ca4c <__reset+0xfb0fca4c>
8111cbd4:	01c40034 	movhi	r7,4096
8111cbd8:	030003c4 	movi	r12,15
8111cbdc:	39ffffc4 	addi	r7,r7,-1
8111cbe0:	a817883a 	mov	r11,r21
8111cbe4:	003fa206 	br	8111ca70 <__reset+0xfb0fca70>

8111cbe8 <strtoul>:
8111cbe8:	00a04534 	movhi	r2,33044
8111cbec:	10b73304 	addi	r2,r2,-9012
8111cbf0:	300f883a 	mov	r7,r6
8111cbf4:	280d883a 	mov	r6,r5
8111cbf8:	200b883a 	mov	r5,r4
8111cbfc:	11000017 	ldw	r4,0(r2)
8111cc00:	111c9941 	jmpi	8111c994 <_strtoul_r>

8111cc04 <_strtoull_r>:
8111cc04:	00a04534 	movhi	r2,33044
8111cc08:	defff404 	addi	sp,sp,-48
8111cc0c:	10b73104 	addi	r2,r2,-9020
8111cc10:	de00012e 	bgeu	sp,et,8111cc18 <_strtoull_r+0x14>
8111cc14:	003b68fa 	trap	3
8111cc18:	dc400315 	stw	r17,12(sp)
8111cc1c:	14400017 	ldw	r17,0(r2)
8111cc20:	dd400715 	stw	r21,28(sp)
8111cc24:	dd000615 	stw	r20,24(sp)
8111cc28:	dcc00515 	stw	r19,20(sp)
8111cc2c:	dc800415 	stw	r18,16(sp)
8111cc30:	dfc00b15 	stw	ra,44(sp)
8111cc34:	df000a15 	stw	fp,40(sp)
8111cc38:	ddc00915 	stw	r23,36(sp)
8111cc3c:	dd800815 	stw	r22,32(sp)
8111cc40:	dc000215 	stw	r16,8(sp)
8111cc44:	2827883a 	mov	r19,r5
8111cc48:	202b883a 	mov	r21,r4
8111cc4c:	3029883a 	mov	r20,r6
8111cc50:	3825883a 	mov	r18,r7
8111cc54:	2807883a 	mov	r3,r5
8111cc58:	1c000003 	ldbu	r16,0(r3)
8111cc5c:	1f000044 	addi	fp,r3,1
8111cc60:	1809883a 	mov	r4,r3
8111cc64:	8c05883a 	add	r2,r17,r16
8111cc68:	10800043 	ldbu	r2,1(r2)
8111cc6c:	e007883a 	mov	r3,fp
8111cc70:	1080020c 	andi	r2,r2,8
8111cc74:	103ff81e 	bne	r2,zero,8111cc58 <__reset+0xfb0fcc58>
8111cc78:	00800b44 	movi	r2,45
8111cc7c:	80806e26 	beq	r16,r2,8111ce38 <_strtoull_r+0x234>
8111cc80:	00800ac4 	movi	r2,43
8111cc84:	80807026 	beq	r16,r2,8111ce48 <_strtoull_r+0x244>
8111cc88:	002f883a 	mov	r23,zero
8111cc8c:	90001426 	beq	r18,zero,8111cce0 <_strtoull_r+0xdc>
8111cc90:	00800404 	movi	r2,16
8111cc94:	90807c26 	beq	r18,r2,8111ce88 <_strtoull_r+0x284>
8111cc98:	902dd7fa 	srai	r22,r18,31
8111cc9c:	013fffc4 	movi	r4,-1
8111cca0:	200b883a 	mov	r5,r4
8111cca4:	900d883a 	mov	r6,r18
8111cca8:	b00f883a 	mov	r7,r22
8111ccac:	11210280 	call	81121028 <__udivdi3>
8111ccb0:	013fffc4 	movi	r4,-1
8111ccb4:	900d883a 	mov	r6,r18
8111ccb8:	b00f883a 	mov	r7,r22
8111ccbc:	200b883a 	mov	r5,r4
8111ccc0:	d8c00115 	stw	r3,4(sp)
8111ccc4:	d8800015 	stw	r2,0(sp)
8111ccc8:	11215a80 	call	811215a8 <__umoddi3>
8111cccc:	101b883a 	mov	r13,r2
8111ccd0:	9015883a 	mov	r10,r18
8111ccd4:	dac00017 	ldw	r11,0(sp)
8111ccd8:	da000117 	ldw	r8,4(sp)
8111ccdc:	00000a06 	br	8111cd08 <_strtoull_r+0x104>
8111cce0:	00800c04 	movi	r2,48
8111cce4:	80805c26 	beq	r16,r2,8111ce58 <_strtoull_r+0x254>
8111cce8:	02800284 	movi	r10,10
8111ccec:	02e666b4 	movhi	r11,39322
8111ccf0:	020666b4 	movhi	r8,6554
8111ccf4:	03400144 	movi	r13,5
8111ccf8:	5ae66644 	addi	r11,r11,-26215
8111ccfc:	42266644 	addi	r8,r8,-26215
8111cd00:	002d883a 	mov	r22,zero
8111cd04:	5025883a 	mov	r18,r10
8111cd08:	8c0b883a 	add	r5,r17,r16
8111cd0c:	29400043 	ldbu	r5,1(r5)
8111cd10:	e009883a 	mov	r4,fp
8111cd14:	000f883a 	mov	r7,zero
8111cd18:	2980010c 	andi	r6,r5,4
8111cd1c:	0005883a 	mov	r2,zero
8111cd20:	0007883a 	mov	r3,zero
8111cd24:	03000044 	movi	r12,1
8111cd28:	027fffc4 	movi	r9,-1
8111cd2c:	30000d26 	beq	r6,zero,8111cd64 <_strtoull_r+0x160>
8111cd30:	843ff404 	addi	r16,r16,-48
8111cd34:	8480110e 	bge	r16,r18,8111cd7c <_strtoull_r+0x178>
8111cd38:	3a400426 	beq	r7,r9,8111cd4c <_strtoull_r+0x148>
8111cd3c:	40c00236 	bltu	r8,r3,8111cd48 <_strtoull_r+0x144>
8111cd40:	1a00231e 	bne	r3,r8,8111cdd0 <_strtoull_r+0x1cc>
8111cd44:	5880222e 	bgeu	r11,r2,8111cdd0 <_strtoull_r+0x1cc>
8111cd48:	01ffffc4 	movi	r7,-1
8111cd4c:	24000003 	ldbu	r16,0(r4)
8111cd50:	21000044 	addi	r4,r4,1
8111cd54:	8c0b883a 	add	r5,r17,r16
8111cd58:	29400043 	ldbu	r5,1(r5)
8111cd5c:	2980010c 	andi	r6,r5,4
8111cd60:	303ff31e 	bne	r6,zero,8111cd30 <__reset+0xfb0fcd30>
8111cd64:	294000cc 	andi	r5,r5,3
8111cd68:	28000426 	beq	r5,zero,8111cd7c <_strtoull_r+0x178>
8111cd6c:	2b002626 	beq	r5,r12,8111ce08 <_strtoull_r+0x204>
8111cd70:	014015c4 	movi	r5,87
8111cd74:	8161c83a 	sub	r16,r16,r5
8111cd78:	84bfef16 	blt	r16,r18,8111cd38 <__reset+0xfb0fcd38>
8111cd7c:	38002716 	blt	r7,zero,8111ce1c <_strtoull_r+0x218>
8111cd80:	b8000426 	beq	r23,zero,8111cd94 <_strtoull_r+0x190>
8111cd84:	0085c83a 	sub	r2,zero,r2
8111cd88:	100ac03a 	cmpne	r5,r2,zero
8111cd8c:	00e1c83a 	sub	r16,zero,r3
8111cd90:	8147c83a 	sub	r3,r16,r5
8111cd94:	a0000226 	beq	r20,zero,8111cda0 <_strtoull_r+0x19c>
8111cd98:	3800251e 	bne	r7,zero,8111ce30 <_strtoull_r+0x22c>
8111cd9c:	a4c00015 	stw	r19,0(r20)
8111cda0:	dfc00b17 	ldw	ra,44(sp)
8111cda4:	df000a17 	ldw	fp,40(sp)
8111cda8:	ddc00917 	ldw	r23,36(sp)
8111cdac:	dd800817 	ldw	r22,32(sp)
8111cdb0:	dd400717 	ldw	r21,28(sp)
8111cdb4:	dd000617 	ldw	r20,24(sp)
8111cdb8:	dcc00517 	ldw	r19,20(sp)
8111cdbc:	dc800417 	ldw	r18,16(sp)
8111cdc0:	dc400317 	ldw	r17,12(sp)
8111cdc4:	dc000217 	ldw	r16,8(sp)
8111cdc8:	dec00c04 	addi	sp,sp,48
8111cdcc:	f800283a 	ret
8111cdd0:	12c00f26 	beq	r2,r11,8111ce10 <_strtoull_r+0x20c>
8111cdd4:	b08d383a 	mul	r6,r22,r2
8111cdd8:	1a87383a 	mul	r3,r3,r10
8111cddc:	128a383a 	mulxuu	r5,r2,r10
8111cde0:	1285383a 	mul	r2,r2,r10
8111cde4:	800fd7fa 	srai	r7,r16,31
8111cde8:	1987883a 	add	r3,r3,r6
8111cdec:	8085883a 	add	r2,r16,r2
8111cdf0:	1947883a 	add	r3,r3,r5
8111cdf4:	38c7883a 	add	r3,r7,r3
8111cdf8:	1421803a 	cmpltu	r16,r2,r16
8111cdfc:	80c7883a 	add	r3,r16,r3
8111ce00:	01c00044 	movi	r7,1
8111ce04:	003fd106 	br	8111cd4c <__reset+0xfb0fcd4c>
8111ce08:	01400dc4 	movi	r5,55
8111ce0c:	003fd906 	br	8111cd74 <__reset+0xfb0fcd74>
8111ce10:	1a3ff01e 	bne	r3,r8,8111cdd4 <__reset+0xfb0fcdd4>
8111ce14:	6c3fcc16 	blt	r13,r16,8111cd48 <__reset+0xfb0fcd48>
8111ce18:	003fee06 	br	8111cdd4 <__reset+0xfb0fcdd4>
8111ce1c:	00800884 	movi	r2,34
8111ce20:	a8800015 	stw	r2,0(r21)
8111ce24:	00bfffc4 	movi	r2,-1
8111ce28:	1007883a 	mov	r3,r2
8111ce2c:	a03fdc26 	beq	r20,zero,8111cda0 <__reset+0xfb0fcda0>
8111ce30:	24ffffc4 	addi	r19,r4,-1
8111ce34:	003fd906 	br	8111cd9c <__reset+0xfb0fcd9c>
8111ce38:	27000084 	addi	fp,r4,2
8111ce3c:	24000043 	ldbu	r16,1(r4)
8111ce40:	05c00044 	movi	r23,1
8111ce44:	003f9106 	br	8111cc8c <__reset+0xfb0fcc8c>
8111ce48:	27000084 	addi	fp,r4,2
8111ce4c:	24000043 	ldbu	r16,1(r4)
8111ce50:	002f883a 	mov	r23,zero
8111ce54:	003f8d06 	br	8111cc8c <__reset+0xfb0fcc8c>
8111ce58:	e0800003 	ldbu	r2,0(fp)
8111ce5c:	00c01604 	movi	r3,88
8111ce60:	108037cc 	andi	r2,r2,223
8111ce64:	10c00e26 	beq	r2,r3,8111cea0 <_strtoull_r+0x29c>
8111ce68:	02800204 	movi	r10,8
8111ce6c:	02ffffc4 	movi	r11,-1
8111ce70:	02080034 	movhi	r8,8192
8111ce74:	034001c4 	movi	r13,7
8111ce78:	42d1883a 	add	r8,r8,r11
8111ce7c:	002d883a 	mov	r22,zero
8111ce80:	5025883a 	mov	r18,r10
8111ce84:	003fa006 	br	8111cd08 <__reset+0xfb0fcd08>
8111ce88:	00800c04 	movi	r2,48
8111ce8c:	80800e1e 	bne	r16,r2,8111cec8 <_strtoull_r+0x2c4>
8111ce90:	e0800003 	ldbu	r2,0(fp)
8111ce94:	00c01604 	movi	r3,88
8111ce98:	108037cc 	andi	r2,r2,223
8111ce9c:	10c00a1e 	bne	r2,r3,8111cec8 <_strtoull_r+0x2c4>
8111cea0:	02800404 	movi	r10,16
8111cea4:	02ffffc4 	movi	r11,-1
8111cea8:	02040034 	movhi	r8,4096
8111ceac:	e4000043 	ldbu	r16,1(fp)
8111ceb0:	034003c4 	movi	r13,15
8111ceb4:	e7000084 	addi	fp,fp,2
8111ceb8:	42d1883a 	add	r8,r8,r11
8111cebc:	002d883a 	mov	r22,zero
8111cec0:	5025883a 	mov	r18,r10
8111cec4:	003f9006 	br	8111cd08 <__reset+0xfb0fcd08>
8111cec8:	02ffffc4 	movi	r11,-1
8111cecc:	02040034 	movhi	r8,4096
8111ced0:	034003c4 	movi	r13,15
8111ced4:	42d1883a 	add	r8,r8,r11
8111ced8:	9015883a 	mov	r10,r18
8111cedc:	002d883a 	mov	r22,zero
8111cee0:	003f8906 	br	8111cd08 <__reset+0xfb0fcd08>

8111cee4 <__ssprint_r>:
8111cee4:	defff604 	addi	sp,sp,-40
8111cee8:	de00012e 	bgeu	sp,et,8111cef0 <__ssprint_r+0xc>
8111ceec:	003b68fa 	trap	3
8111cef0:	30800217 	ldw	r2,8(r6)
8111cef4:	dc800215 	stw	r18,8(sp)
8111cef8:	dfc00915 	stw	ra,36(sp)
8111cefc:	df000815 	stw	fp,32(sp)
8111cf00:	ddc00715 	stw	r23,28(sp)
8111cf04:	dd800615 	stw	r22,24(sp)
8111cf08:	dd400515 	stw	r21,20(sp)
8111cf0c:	dd000415 	stw	r20,16(sp)
8111cf10:	dcc00315 	stw	r19,12(sp)
8111cf14:	dc400115 	stw	r17,4(sp)
8111cf18:	dc000015 	stw	r16,0(sp)
8111cf1c:	3025883a 	mov	r18,r6
8111cf20:	10005826 	beq	r2,zero,8111d084 <__ssprint_r+0x1a0>
8111cf24:	2027883a 	mov	r19,r4
8111cf28:	35c00017 	ldw	r23,0(r6)
8111cf2c:	29000017 	ldw	r4,0(r5)
8111cf30:	28800217 	ldw	r2,8(r5)
8111cf34:	2823883a 	mov	r17,r5
8111cf38:	0039883a 	mov	fp,zero
8111cf3c:	0021883a 	mov	r16,zero
8111cf40:	80003926 	beq	r16,zero,8111d028 <__ssprint_r+0x144>
8111cf44:	102b883a 	mov	r21,r2
8111cf48:	102d883a 	mov	r22,r2
8111cf4c:	80803a36 	bltu	r16,r2,8111d038 <__ssprint_r+0x154>
8111cf50:	88c0030b 	ldhu	r3,12(r17)
8111cf54:	1881200c 	andi	r2,r3,1152
8111cf58:	10002626 	beq	r2,zero,8111cff4 <__ssprint_r+0x110>
8111cf5c:	88800517 	ldw	r2,20(r17)
8111cf60:	89400417 	ldw	r5,16(r17)
8111cf64:	81800044 	addi	r6,r16,1
8111cf68:	108f883a 	add	r7,r2,r2
8111cf6c:	3885883a 	add	r2,r7,r2
8111cf70:	100ed7fa 	srli	r7,r2,31
8111cf74:	216dc83a 	sub	r22,r4,r5
8111cf78:	3589883a 	add	r4,r6,r22
8111cf7c:	3885883a 	add	r2,r7,r2
8111cf80:	102bd07a 	srai	r21,r2,1
8111cf84:	a80d883a 	mov	r6,r21
8111cf88:	a900022e 	bgeu	r21,r4,8111cf94 <__ssprint_r+0xb0>
8111cf8c:	202b883a 	mov	r21,r4
8111cf90:	200d883a 	mov	r6,r4
8111cf94:	18c1000c 	andi	r3,r3,1024
8111cf98:	18002a26 	beq	r3,zero,8111d044 <__ssprint_r+0x160>
8111cf9c:	300b883a 	mov	r5,r6
8111cfa0:	9809883a 	mov	r4,r19
8111cfa4:	110ee080 	call	8110ee08 <_malloc_r>
8111cfa8:	1029883a 	mov	r20,r2
8111cfac:	10002c26 	beq	r2,zero,8111d060 <__ssprint_r+0x17c>
8111cfb0:	89400417 	ldw	r5,16(r17)
8111cfb4:	b00d883a 	mov	r6,r22
8111cfb8:	1009883a 	mov	r4,r2
8111cfbc:	110f61c0 	call	8110f61c <memcpy>
8111cfc0:	8880030b 	ldhu	r2,12(r17)
8111cfc4:	00fedfc4 	movi	r3,-1153
8111cfc8:	10c4703a 	and	r2,r2,r3
8111cfcc:	10802014 	ori	r2,r2,128
8111cfd0:	8880030d 	sth	r2,12(r17)
8111cfd4:	a589883a 	add	r4,r20,r22
8111cfd8:	adadc83a 	sub	r22,r21,r22
8111cfdc:	8d400515 	stw	r21,20(r17)
8111cfe0:	8d800215 	stw	r22,8(r17)
8111cfe4:	8d000415 	stw	r20,16(r17)
8111cfe8:	89000015 	stw	r4,0(r17)
8111cfec:	802b883a 	mov	r21,r16
8111cff0:	802d883a 	mov	r22,r16
8111cff4:	b00d883a 	mov	r6,r22
8111cff8:	e00b883a 	mov	r5,fp
8111cffc:	11193f40 	call	811193f4 <memmove>
8111d000:	88800217 	ldw	r2,8(r17)
8111d004:	89000017 	ldw	r4,0(r17)
8111d008:	90c00217 	ldw	r3,8(r18)
8111d00c:	1545c83a 	sub	r2,r2,r21
8111d010:	2589883a 	add	r4,r4,r22
8111d014:	88800215 	stw	r2,8(r17)
8111d018:	89000015 	stw	r4,0(r17)
8111d01c:	1c21c83a 	sub	r16,r3,r16
8111d020:	94000215 	stw	r16,8(r18)
8111d024:	80001726 	beq	r16,zero,8111d084 <__ssprint_r+0x1a0>
8111d028:	bf000017 	ldw	fp,0(r23)
8111d02c:	bc000117 	ldw	r16,4(r23)
8111d030:	bdc00204 	addi	r23,r23,8
8111d034:	003fc206 	br	8111cf40 <__reset+0xfb0fcf40>
8111d038:	802b883a 	mov	r21,r16
8111d03c:	802d883a 	mov	r22,r16
8111d040:	003fec06 	br	8111cff4 <__reset+0xfb0fcff4>
8111d044:	9809883a 	mov	r4,r19
8111d048:	111a78c0 	call	8111a78c <_realloc_r>
8111d04c:	1029883a 	mov	r20,r2
8111d050:	103fe01e 	bne	r2,zero,8111cfd4 <__reset+0xfb0fcfd4>
8111d054:	89400417 	ldw	r5,16(r17)
8111d058:	9809883a 	mov	r4,r19
8111d05c:	11185800 	call	81118580 <_free_r>
8111d060:	88c0030b 	ldhu	r3,12(r17)
8111d064:	00800304 	movi	r2,12
8111d068:	98800015 	stw	r2,0(r19)
8111d06c:	18c01014 	ori	r3,r3,64
8111d070:	88c0030d 	sth	r3,12(r17)
8111d074:	00bfffc4 	movi	r2,-1
8111d078:	90000215 	stw	zero,8(r18)
8111d07c:	90000115 	stw	zero,4(r18)
8111d080:	00000206 	br	8111d08c <__ssprint_r+0x1a8>
8111d084:	90000115 	stw	zero,4(r18)
8111d088:	0005883a 	mov	r2,zero
8111d08c:	dfc00917 	ldw	ra,36(sp)
8111d090:	df000817 	ldw	fp,32(sp)
8111d094:	ddc00717 	ldw	r23,28(sp)
8111d098:	dd800617 	ldw	r22,24(sp)
8111d09c:	dd400517 	ldw	r21,20(sp)
8111d0a0:	dd000417 	ldw	r20,16(sp)
8111d0a4:	dcc00317 	ldw	r19,12(sp)
8111d0a8:	dc800217 	ldw	r18,8(sp)
8111d0ac:	dc400117 	ldw	r17,4(sp)
8111d0b0:	dc000017 	ldw	r16,0(sp)
8111d0b4:	dec00a04 	addi	sp,sp,40
8111d0b8:	f800283a 	ret

8111d0bc <___svfiprintf_internal_r>:
8111d0bc:	deffc804 	addi	sp,sp,-224
8111d0c0:	de00012e 	bgeu	sp,et,8111d0c8 <___svfiprintf_internal_r+0xc>
8111d0c4:	003b68fa 	trap	3
8111d0c8:	2880030b 	ldhu	r2,12(r5)
8111d0cc:	dcc03115 	stw	r19,196(sp)
8111d0d0:	dfc03715 	stw	ra,220(sp)
8111d0d4:	df003615 	stw	fp,216(sp)
8111d0d8:	ddc03515 	stw	r23,212(sp)
8111d0dc:	dd803415 	stw	r22,208(sp)
8111d0e0:	dd403315 	stw	r21,204(sp)
8111d0e4:	dd003215 	stw	r20,200(sp)
8111d0e8:	dc803015 	stw	r18,192(sp)
8111d0ec:	dc402f15 	stw	r17,188(sp)
8111d0f0:	dc002e15 	stw	r16,184(sp)
8111d0f4:	d9402715 	stw	r5,156(sp)
8111d0f8:	d9002a15 	stw	r4,168(sp)
8111d0fc:	1080200c 	andi	r2,r2,128
8111d100:	d9c02315 	stw	r7,140(sp)
8111d104:	3027883a 	mov	r19,r6
8111d108:	10000226 	beq	r2,zero,8111d114 <___svfiprintf_internal_r+0x58>
8111d10c:	28800417 	ldw	r2,16(r5)
8111d110:	10041d26 	beq	r2,zero,8111e188 <___svfiprintf_internal_r+0x10cc>
8111d114:	dac01a04 	addi	r11,sp,104
8111d118:	dac01e15 	stw	r11,120(sp)
8111d11c:	d8801e17 	ldw	r2,120(sp)
8111d120:	dac019c4 	addi	r11,sp,103
8111d124:	dd402a17 	ldw	r21,168(sp)
8111d128:	ddc02717 	ldw	r23,156(sp)
8111d12c:	05a04534 	movhi	r22,33044
8111d130:	05204534 	movhi	r20,33044
8111d134:	dac01f15 	stw	r11,124(sp)
8111d138:	12d7c83a 	sub	r11,r2,r11
8111d13c:	b5aeb904 	addi	r22,r22,-17692
8111d140:	a52eb504 	addi	r20,r20,-17708
8111d144:	dec01a15 	stw	sp,104(sp)
8111d148:	d8001c15 	stw	zero,112(sp)
8111d14c:	d8001b15 	stw	zero,108(sp)
8111d150:	d811883a 	mov	r8,sp
8111d154:	d8002915 	stw	zero,164(sp)
8111d158:	d8002515 	stw	zero,148(sp)
8111d15c:	dac02b15 	stw	r11,172(sp)
8111d160:	98800007 	ldb	r2,0(r19)
8111d164:	1002dd26 	beq	r2,zero,8111dcdc <___svfiprintf_internal_r+0xc20>
8111d168:	00c00944 	movi	r3,37
8111d16c:	9823883a 	mov	r17,r19
8111d170:	10c0021e 	bne	r2,r3,8111d17c <___svfiprintf_internal_r+0xc0>
8111d174:	00001406 	br	8111d1c8 <___svfiprintf_internal_r+0x10c>
8111d178:	10c00326 	beq	r2,r3,8111d188 <___svfiprintf_internal_r+0xcc>
8111d17c:	8c400044 	addi	r17,r17,1
8111d180:	88800007 	ldb	r2,0(r17)
8111d184:	103ffc1e 	bne	r2,zero,8111d178 <__reset+0xfb0fd178>
8111d188:	8ce1c83a 	sub	r16,r17,r19
8111d18c:	80000e26 	beq	r16,zero,8111d1c8 <___svfiprintf_internal_r+0x10c>
8111d190:	d8c01c17 	ldw	r3,112(sp)
8111d194:	d8801b17 	ldw	r2,108(sp)
8111d198:	44c00015 	stw	r19,0(r8)
8111d19c:	1c07883a 	add	r3,r3,r16
8111d1a0:	10800044 	addi	r2,r2,1
8111d1a4:	d8c01c15 	stw	r3,112(sp)
8111d1a8:	44000115 	stw	r16,4(r8)
8111d1ac:	d8801b15 	stw	r2,108(sp)
8111d1b0:	00c001c4 	movi	r3,7
8111d1b4:	18831e16 	blt	r3,r2,8111de30 <___svfiprintf_internal_r+0xd74>
8111d1b8:	42000204 	addi	r8,r8,8
8111d1bc:	dac02517 	ldw	r11,148(sp)
8111d1c0:	5c17883a 	add	r11,r11,r16
8111d1c4:	dac02515 	stw	r11,148(sp)
8111d1c8:	88800007 	ldb	r2,0(r17)
8111d1cc:	1002c526 	beq	r2,zero,8111dce4 <___svfiprintf_internal_r+0xc28>
8111d1d0:	88c00047 	ldb	r3,1(r17)
8111d1d4:	8cc00044 	addi	r19,r17,1
8111d1d8:	d8001d85 	stb	zero,118(sp)
8111d1dc:	0009883a 	mov	r4,zero
8111d1e0:	000f883a 	mov	r7,zero
8111d1e4:	043fffc4 	movi	r16,-1
8111d1e8:	d8002415 	stw	zero,144(sp)
8111d1ec:	0025883a 	mov	r18,zero
8111d1f0:	01401604 	movi	r5,88
8111d1f4:	01800244 	movi	r6,9
8111d1f8:	02800a84 	movi	r10,42
8111d1fc:	02401b04 	movi	r9,108
8111d200:	9cc00044 	addi	r19,r19,1
8111d204:	18bff804 	addi	r2,r3,-32
8111d208:	2881dd36 	bltu	r5,r2,8111d980 <___svfiprintf_internal_r+0x8c4>
8111d20c:	100490ba 	slli	r2,r2,2
8111d210:	02e044b4 	movhi	r11,33042
8111d214:	5af48904 	addi	r11,r11,-11740
8111d218:	12c5883a 	add	r2,r2,r11
8111d21c:	10800017 	ldw	r2,0(r2)
8111d220:	1000683a 	jmp	r2
8111d224:	8111d420 	cmpeqi	r4,r16,18256
8111d228:	8111d980 	call	88111d98 <__reset+0x20f1d98>
8111d22c:	8111d980 	call	88111d98 <__reset+0x20f1d98>
8111d230:	8111d414 	ori	r4,r16,18256
8111d234:	8111d980 	call	88111d98 <__reset+0x20f1d98>
8111d238:	8111d980 	call	88111d98 <__reset+0x20f1d98>
8111d23c:	8111d980 	call	88111d98 <__reset+0x20f1d98>
8111d240:	8111d980 	call	88111d98 <__reset+0x20f1d98>
8111d244:	8111d980 	call	88111d98 <__reset+0x20f1d98>
8111d248:	8111d980 	call	88111d98 <__reset+0x20f1d98>
8111d24c:	8111d388 	cmpgei	r4,r16,18254
8111d250:	8111d564 	muli	r4,r16,18261
8111d254:	8111d980 	call	88111d98 <__reset+0x20f1d98>
8111d258:	8111d3b4 	orhi	r4,r16,18254
8111d25c:	8111d9b4 	orhi	r4,r16,18278
8111d260:	8111d980 	call	88111d98 <__reset+0x20f1d98>
8111d264:	8111d9a8 	cmpgeui	r4,r16,18278
8111d268:	8111d948 	cmpgei	r4,r16,18277
8111d26c:	8111d948 	cmpgei	r4,r16,18277
8111d270:	8111d948 	cmpgei	r4,r16,18277
8111d274:	8111d948 	cmpgei	r4,r16,18277
8111d278:	8111d948 	cmpgei	r4,r16,18277
8111d27c:	8111d948 	cmpgei	r4,r16,18277
8111d280:	8111d948 	cmpgei	r4,r16,18277
8111d284:	8111d948 	cmpgei	r4,r16,18277
8111d288:	8111d948 	cmpgei	r4,r16,18277
8111d28c:	8111d980 	call	88111d98 <__reset+0x20f1d98>
8111d290:	8111d980 	call	88111d98 <__reset+0x20f1d98>
8111d294:	8111d980 	call	88111d98 <__reset+0x20f1d98>
8111d298:	8111d980 	call	88111d98 <__reset+0x20f1d98>
8111d29c:	8111d980 	call	88111d98 <__reset+0x20f1d98>
8111d2a0:	8111d980 	call	88111d98 <__reset+0x20f1d98>
8111d2a4:	8111d980 	call	88111d98 <__reset+0x20f1d98>
8111d2a8:	8111d980 	call	88111d98 <__reset+0x20f1d98>
8111d2ac:	8111d980 	call	88111d98 <__reset+0x20f1d98>
8111d2b0:	8111d980 	call	88111d98 <__reset+0x20f1d98>
8111d2b4:	8111d8e4 	muli	r4,r16,18275
8111d2b8:	8111d980 	call	88111d98 <__reset+0x20f1d98>
8111d2bc:	8111d980 	call	88111d98 <__reset+0x20f1d98>
8111d2c0:	8111d980 	call	88111d98 <__reset+0x20f1d98>
8111d2c4:	8111d980 	call	88111d98 <__reset+0x20f1d98>
8111d2c8:	8111d980 	call	88111d98 <__reset+0x20f1d98>
8111d2cc:	8111d980 	call	88111d98 <__reset+0x20f1d98>
8111d2d0:	8111d980 	call	88111d98 <__reset+0x20f1d98>
8111d2d4:	8111d980 	call	88111d98 <__reset+0x20f1d98>
8111d2d8:	8111d980 	call	88111d98 <__reset+0x20f1d98>
8111d2dc:	8111d980 	call	88111d98 <__reset+0x20f1d98>
8111d2e0:	8111da5c 	xori	r4,r16,18281
8111d2e4:	8111d980 	call	88111d98 <__reset+0x20f1d98>
8111d2e8:	8111d980 	call	88111d98 <__reset+0x20f1d98>
8111d2ec:	8111d980 	call	88111d98 <__reset+0x20f1d98>
8111d2f0:	8111d980 	call	88111d98 <__reset+0x20f1d98>
8111d2f4:	8111d980 	call	88111d98 <__reset+0x20f1d98>
8111d2f8:	8111d9f4 	orhi	r4,r16,18279
8111d2fc:	8111d980 	call	88111d98 <__reset+0x20f1d98>
8111d300:	8111d980 	call	88111d98 <__reset+0x20f1d98>
8111d304:	8111d728 	cmpgeui	r4,r16,18268
8111d308:	8111d980 	call	88111d98 <__reset+0x20f1d98>
8111d30c:	8111d980 	call	88111d98 <__reset+0x20f1d98>
8111d310:	8111d980 	call	88111d98 <__reset+0x20f1d98>
8111d314:	8111d980 	call	88111d98 <__reset+0x20f1d98>
8111d318:	8111d980 	call	88111d98 <__reset+0x20f1d98>
8111d31c:	8111d980 	call	88111d98 <__reset+0x20f1d98>
8111d320:	8111d980 	call	88111d98 <__reset+0x20f1d98>
8111d324:	8111d980 	call	88111d98 <__reset+0x20f1d98>
8111d328:	8111d980 	call	88111d98 <__reset+0x20f1d98>
8111d32c:	8111d980 	call	88111d98 <__reset+0x20f1d98>
8111d330:	8111d618 	cmpnei	r4,r16,18264
8111d334:	8111d7c4 	addi	r4,r16,18271
8111d338:	8111d980 	call	88111d98 <__reset+0x20f1d98>
8111d33c:	8111d980 	call	88111d98 <__reset+0x20f1d98>
8111d340:	8111d980 	call	88111d98 <__reset+0x20f1d98>
8111d344:	8111d7b8 	rdprs	r4,r16,18270
8111d348:	8111d7c4 	addi	r4,r16,18271
8111d34c:	8111d980 	call	88111d98 <__reset+0x20f1d98>
8111d350:	8111d980 	call	88111d98 <__reset+0x20f1d98>
8111d354:	8111d7a8 	cmpgeui	r4,r16,18270
8111d358:	8111d980 	call	88111d98 <__reset+0x20f1d98>
8111d35c:	8111d76c 	andhi	r4,r16,18269
8111d360:	8111d574 	orhi	r4,r16,18261
8111d364:	8111d3c0 	call	88111d3c <__reset+0x20f1d3c>
8111d368:	8111d8d8 	cmpnei	r4,r16,18275
8111d36c:	8111d980 	call	88111d98 <__reset+0x20f1d98>
8111d370:	8111d88c 	andi	r4,r16,18274
8111d374:	8111d980 	call	88111d98 <__reset+0x20f1d98>
8111d378:	8111d4e4 	muli	r4,r16,18259
8111d37c:	8111d980 	call	88111d98 <__reset+0x20f1d98>
8111d380:	8111d980 	call	88111d98 <__reset+0x20f1d98>
8111d384:	8111d440 	call	88111d44 <__reset+0x20f1d44>
8111d388:	dac02317 	ldw	r11,140(sp)
8111d38c:	5ac00017 	ldw	r11,0(r11)
8111d390:	dac02415 	stw	r11,144(sp)
8111d394:	dac02317 	ldw	r11,140(sp)
8111d398:	58800104 	addi	r2,r11,4
8111d39c:	dac02417 	ldw	r11,144(sp)
8111d3a0:	5802e90e 	bge	r11,zero,8111df48 <___svfiprintf_internal_r+0xe8c>
8111d3a4:	dac02417 	ldw	r11,144(sp)
8111d3a8:	d8802315 	stw	r2,140(sp)
8111d3ac:	02d7c83a 	sub	r11,zero,r11
8111d3b0:	dac02415 	stw	r11,144(sp)
8111d3b4:	94800114 	ori	r18,r18,4
8111d3b8:	98c00007 	ldb	r3,0(r19)
8111d3bc:	003f9006 	br	8111d200 <__reset+0xfb0fd200>
8111d3c0:	00800c04 	movi	r2,48
8111d3c4:	dac02317 	ldw	r11,140(sp)
8111d3c8:	d8801d05 	stb	r2,116(sp)
8111d3cc:	00801e04 	movi	r2,120
8111d3d0:	d8801d45 	stb	r2,117(sp)
8111d3d4:	d8001d85 	stb	zero,118(sp)
8111d3d8:	58c00104 	addi	r3,r11,4
8111d3dc:	5f000017 	ldw	fp,0(r11)
8111d3e0:	0013883a 	mov	r9,zero
8111d3e4:	90800094 	ori	r2,r18,2
8111d3e8:	80032b16 	blt	r16,zero,8111e098 <___svfiprintf_internal_r+0xfdc>
8111d3ec:	00bfdfc4 	movi	r2,-129
8111d3f0:	90a4703a 	and	r18,r18,r2
8111d3f4:	d8c02315 	stw	r3,140(sp)
8111d3f8:	94800094 	ori	r18,r18,2
8111d3fc:	e002dc26 	beq	fp,zero,8111df70 <___svfiprintf_internal_r+0xeb4>
8111d400:	01204534 	movhi	r4,33044
8111d404:	212e2b04 	addi	r4,r4,-18260
8111d408:	0015883a 	mov	r10,zero
8111d40c:	d9002915 	stw	r4,164(sp)
8111d410:	00002306 	br	8111d4a0 <___svfiprintf_internal_r+0x3e4>
8111d414:	94800054 	ori	r18,r18,1
8111d418:	98c00007 	ldb	r3,0(r19)
8111d41c:	003f7806 	br	8111d200 <__reset+0xfb0fd200>
8111d420:	38803fcc 	andi	r2,r7,255
8111d424:	1080201c 	xori	r2,r2,128
8111d428:	10bfe004 	addi	r2,r2,-128
8111d42c:	1002f31e 	bne	r2,zero,8111dffc <___svfiprintf_internal_r+0xf40>
8111d430:	01000044 	movi	r4,1
8111d434:	01c00804 	movi	r7,32
8111d438:	98c00007 	ldb	r3,0(r19)
8111d43c:	003f7006 	br	8111d200 <__reset+0xfb0fd200>
8111d440:	21003fcc 	andi	r4,r4,255
8111d444:	2003aa1e 	bne	r4,zero,8111e2f0 <___svfiprintf_internal_r+0x1234>
8111d448:	00a04534 	movhi	r2,33044
8111d44c:	10ae2b04 	addi	r2,r2,-18260
8111d450:	d8802915 	stw	r2,164(sp)
8111d454:	9080080c 	andi	r2,r18,32
8111d458:	1000ba26 	beq	r2,zero,8111d744 <___svfiprintf_internal_r+0x688>
8111d45c:	dac02317 	ldw	r11,140(sp)
8111d460:	5f000017 	ldw	fp,0(r11)
8111d464:	5a400117 	ldw	r9,4(r11)
8111d468:	5ac00204 	addi	r11,r11,8
8111d46c:	dac02315 	stw	r11,140(sp)
8111d470:	9080004c 	andi	r2,r18,1
8111d474:	10029026 	beq	r2,zero,8111deb8 <___svfiprintf_internal_r+0xdfc>
8111d478:	e244b03a 	or	r2,fp,r9
8111d47c:	1002d41e 	bne	r2,zero,8111dfd0 <___svfiprintf_internal_r+0xf14>
8111d480:	d8001d85 	stb	zero,118(sp)
8111d484:	80030b16 	blt	r16,zero,8111e0b4 <___svfiprintf_internal_r+0xff8>
8111d488:	00bfdfc4 	movi	r2,-129
8111d48c:	90a4703a 	and	r18,r18,r2
8111d490:	0015883a 	mov	r10,zero
8111d494:	80002426 	beq	r16,zero,8111d528 <___svfiprintf_internal_r+0x46c>
8111d498:	0039883a 	mov	fp,zero
8111d49c:	0013883a 	mov	r9,zero
8111d4a0:	d9002917 	ldw	r4,164(sp)
8111d4a4:	dc401a04 	addi	r17,sp,104
8111d4a8:	e08003cc 	andi	r2,fp,15
8111d4ac:	4806973a 	slli	r3,r9,28
8111d4b0:	2085883a 	add	r2,r4,r2
8111d4b4:	e038d13a 	srli	fp,fp,4
8111d4b8:	10800003 	ldbu	r2,0(r2)
8111d4bc:	4812d13a 	srli	r9,r9,4
8111d4c0:	8c7fffc4 	addi	r17,r17,-1
8111d4c4:	1f38b03a 	or	fp,r3,fp
8111d4c8:	88800005 	stb	r2,0(r17)
8111d4cc:	e244b03a 	or	r2,fp,r9
8111d4d0:	103ff51e 	bne	r2,zero,8111d4a8 <__reset+0xfb0fd4a8>
8111d4d4:	dac01e17 	ldw	r11,120(sp)
8111d4d8:	5c57c83a 	sub	r11,r11,r17
8111d4dc:	dac02115 	stw	r11,132(sp)
8111d4e0:	00001406 	br	8111d534 <___svfiprintf_internal_r+0x478>
8111d4e4:	21003fcc 	andi	r4,r4,255
8111d4e8:	2003741e 	bne	r4,zero,8111e2bc <___svfiprintf_internal_r+0x1200>
8111d4ec:	9080080c 	andi	r2,r18,32
8111d4f0:	10014526 	beq	r2,zero,8111da08 <___svfiprintf_internal_r+0x94c>
8111d4f4:	dac02317 	ldw	r11,140(sp)
8111d4f8:	d8001d85 	stb	zero,118(sp)
8111d4fc:	58c00204 	addi	r3,r11,8
8111d500:	5f000017 	ldw	fp,0(r11)
8111d504:	5a400117 	ldw	r9,4(r11)
8111d508:	8002d916 	blt	r16,zero,8111e070 <___svfiprintf_internal_r+0xfb4>
8111d50c:	013fdfc4 	movi	r4,-129
8111d510:	e244b03a 	or	r2,fp,r9
8111d514:	d8c02315 	stw	r3,140(sp)
8111d518:	9124703a 	and	r18,r18,r4
8111d51c:	0015883a 	mov	r10,zero
8111d520:	1000b91e 	bne	r2,zero,8111d808 <___svfiprintf_internal_r+0x74c>
8111d524:	8002e61e 	bne	r16,zero,8111e0c0 <___svfiprintf_internal_r+0x1004>
8111d528:	0021883a 	mov	r16,zero
8111d52c:	d8002115 	stw	zero,132(sp)
8111d530:	dc401a04 	addi	r17,sp,104
8111d534:	d8c02117 	ldw	r3,132(sp)
8111d538:	dc002015 	stw	r16,128(sp)
8111d53c:	80c0010e 	bge	r16,r3,8111d544 <___svfiprintf_internal_r+0x488>
8111d540:	d8c02015 	stw	r3,128(sp)
8111d544:	52803fcc 	andi	r10,r10,255
8111d548:	5280201c 	xori	r10,r10,128
8111d54c:	52bfe004 	addi	r10,r10,-128
8111d550:	50003c26 	beq	r10,zero,8111d644 <___svfiprintf_internal_r+0x588>
8111d554:	dac02017 	ldw	r11,128(sp)
8111d558:	5ac00044 	addi	r11,r11,1
8111d55c:	dac02015 	stw	r11,128(sp)
8111d560:	00003806 	br	8111d644 <___svfiprintf_internal_r+0x588>
8111d564:	01000044 	movi	r4,1
8111d568:	01c00ac4 	movi	r7,43
8111d56c:	98c00007 	ldb	r3,0(r19)
8111d570:	003f2306 	br	8111d200 <__reset+0xfb0fd200>
8111d574:	21003fcc 	andi	r4,r4,255
8111d578:	2003481e 	bne	r4,zero,8111e29c <___svfiprintf_internal_r+0x11e0>
8111d57c:	9080080c 	andi	r2,r18,32
8111d580:	10013b26 	beq	r2,zero,8111da70 <___svfiprintf_internal_r+0x9b4>
8111d584:	dac02317 	ldw	r11,140(sp)
8111d588:	d8001d85 	stb	zero,118(sp)
8111d58c:	58800204 	addi	r2,r11,8
8111d590:	5f000017 	ldw	fp,0(r11)
8111d594:	5a400117 	ldw	r9,4(r11)
8111d598:	8002a816 	blt	r16,zero,8111e03c <___svfiprintf_internal_r+0xf80>
8111d59c:	013fdfc4 	movi	r4,-129
8111d5a0:	e246b03a 	or	r3,fp,r9
8111d5a4:	d8802315 	stw	r2,140(sp)
8111d5a8:	9124703a 	and	r18,r18,r4
8111d5ac:	18013c26 	beq	r3,zero,8111daa0 <___svfiprintf_internal_r+0x9e4>
8111d5b0:	0015883a 	mov	r10,zero
8111d5b4:	dc401a04 	addi	r17,sp,104
8111d5b8:	e006d0fa 	srli	r3,fp,3
8111d5bc:	4808977a 	slli	r4,r9,29
8111d5c0:	4812d0fa 	srli	r9,r9,3
8111d5c4:	e70001cc 	andi	fp,fp,7
8111d5c8:	e0800c04 	addi	r2,fp,48
8111d5cc:	8c7fffc4 	addi	r17,r17,-1
8111d5d0:	20f8b03a 	or	fp,r4,r3
8111d5d4:	88800005 	stb	r2,0(r17)
8111d5d8:	e246b03a 	or	r3,fp,r9
8111d5dc:	183ff61e 	bne	r3,zero,8111d5b8 <__reset+0xfb0fd5b8>
8111d5e0:	90c0004c 	andi	r3,r18,1
8111d5e4:	1800a526 	beq	r3,zero,8111d87c <___svfiprintf_internal_r+0x7c0>
8111d5e8:	10803fcc 	andi	r2,r2,255
8111d5ec:	1080201c 	xori	r2,r2,128
8111d5f0:	10bfe004 	addi	r2,r2,-128
8111d5f4:	00c00c04 	movi	r3,48
8111d5f8:	10ffb626 	beq	r2,r3,8111d4d4 <__reset+0xfb0fd4d4>
8111d5fc:	88ffffc5 	stb	r3,-1(r17)
8111d600:	d8c01e17 	ldw	r3,120(sp)
8111d604:	88bfffc4 	addi	r2,r17,-1
8111d608:	1023883a 	mov	r17,r2
8111d60c:	1887c83a 	sub	r3,r3,r2
8111d610:	d8c02115 	stw	r3,132(sp)
8111d614:	003fc706 	br	8111d534 <__reset+0xfb0fd534>
8111d618:	dac02317 	ldw	r11,140(sp)
8111d61c:	00c00044 	movi	r3,1
8111d620:	d8c02015 	stw	r3,128(sp)
8111d624:	58800017 	ldw	r2,0(r11)
8111d628:	5ac00104 	addi	r11,r11,4
8111d62c:	d8001d85 	stb	zero,118(sp)
8111d630:	d8801005 	stb	r2,64(sp)
8111d634:	dac02315 	stw	r11,140(sp)
8111d638:	d8c02115 	stw	r3,132(sp)
8111d63c:	dc401004 	addi	r17,sp,64
8111d640:	0021883a 	mov	r16,zero
8111d644:	90c0008c 	andi	r3,r18,2
8111d648:	d8c02215 	stw	r3,136(sp)
8111d64c:	18000326 	beq	r3,zero,8111d65c <___svfiprintf_internal_r+0x5a0>
8111d650:	dac02017 	ldw	r11,128(sp)
8111d654:	5ac00084 	addi	r11,r11,2
8111d658:	dac02015 	stw	r11,128(sp)
8111d65c:	90c0210c 	andi	r3,r18,132
8111d660:	d8c02615 	stw	r3,152(sp)
8111d664:	1801131e 	bne	r3,zero,8111dab4 <___svfiprintf_internal_r+0x9f8>
8111d668:	dac02417 	ldw	r11,144(sp)
8111d66c:	d8c02017 	ldw	r3,128(sp)
8111d670:	58f9c83a 	sub	fp,r11,r3
8111d674:	07010f0e 	bge	zero,fp,8111dab4 <___svfiprintf_internal_r+0x9f8>
8111d678:	02400404 	movi	r9,16
8111d67c:	d8c01c17 	ldw	r3,112(sp)
8111d680:	d8801b17 	ldw	r2,108(sp)
8111d684:	4f02d60e 	bge	r9,fp,8111e1e0 <___svfiprintf_internal_r+0x1124>
8111d688:	01604534 	movhi	r5,33044
8111d68c:	296eb904 	addi	r5,r5,-17692
8111d690:	d9402815 	stw	r5,160(sp)
8111d694:	028001c4 	movi	r10,7
8111d698:	00000306 	br	8111d6a8 <___svfiprintf_internal_r+0x5ec>
8111d69c:	e73ffc04 	addi	fp,fp,-16
8111d6a0:	42000204 	addi	r8,r8,8
8111d6a4:	4f00150e 	bge	r9,fp,8111d6fc <___svfiprintf_internal_r+0x640>
8111d6a8:	18c00404 	addi	r3,r3,16
8111d6ac:	10800044 	addi	r2,r2,1
8111d6b0:	45800015 	stw	r22,0(r8)
8111d6b4:	42400115 	stw	r9,4(r8)
8111d6b8:	d8c01c15 	stw	r3,112(sp)
8111d6bc:	d8801b15 	stw	r2,108(sp)
8111d6c0:	50bff60e 	bge	r10,r2,8111d69c <__reset+0xfb0fd69c>
8111d6c4:	d9801a04 	addi	r6,sp,104
8111d6c8:	b80b883a 	mov	r5,r23
8111d6cc:	a809883a 	mov	r4,r21
8111d6d0:	da402c15 	stw	r9,176(sp)
8111d6d4:	da802d15 	stw	r10,180(sp)
8111d6d8:	111cee40 	call	8111cee4 <__ssprint_r>
8111d6dc:	da402c17 	ldw	r9,176(sp)
8111d6e0:	da802d17 	ldw	r10,180(sp)
8111d6e4:	1001851e 	bne	r2,zero,8111dcfc <___svfiprintf_internal_r+0xc40>
8111d6e8:	e73ffc04 	addi	fp,fp,-16
8111d6ec:	d8c01c17 	ldw	r3,112(sp)
8111d6f0:	d8801b17 	ldw	r2,108(sp)
8111d6f4:	d811883a 	mov	r8,sp
8111d6f8:	4f3feb16 	blt	r9,fp,8111d6a8 <__reset+0xfb0fd6a8>
8111d6fc:	dac02817 	ldw	r11,160(sp)
8111d700:	e0c7883a 	add	r3,fp,r3
8111d704:	10800044 	addi	r2,r2,1
8111d708:	42c00015 	stw	r11,0(r8)
8111d70c:	47000115 	stw	fp,4(r8)
8111d710:	d8c01c15 	stw	r3,112(sp)
8111d714:	d8801b15 	stw	r2,108(sp)
8111d718:	010001c4 	movi	r4,7
8111d71c:	2081ee16 	blt	r4,r2,8111ded8 <___svfiprintf_internal_r+0xe1c>
8111d720:	42000204 	addi	r8,r8,8
8111d724:	0000e506 	br	8111dabc <___svfiprintf_internal_r+0xa00>
8111d728:	21003fcc 	andi	r4,r4,255
8111d72c:	2002dd1e 	bne	r4,zero,8111e2a4 <___svfiprintf_internal_r+0x11e8>
8111d730:	00a04534 	movhi	r2,33044
8111d734:	10ae2604 	addi	r2,r2,-18280
8111d738:	d8802915 	stw	r2,164(sp)
8111d73c:	9080080c 	andi	r2,r18,32
8111d740:	103f461e 	bne	r2,zero,8111d45c <__reset+0xfb0fd45c>
8111d744:	9080040c 	andi	r2,r18,16
8111d748:	10022e1e 	bne	r2,zero,8111e004 <___svfiprintf_internal_r+0xf48>
8111d74c:	9080100c 	andi	r2,r18,64
8111d750:	dac02317 	ldw	r11,140(sp)
8111d754:	10027326 	beq	r2,zero,8111e124 <___svfiprintf_internal_r+0x1068>
8111d758:	5f00000b 	ldhu	fp,0(r11)
8111d75c:	5ac00104 	addi	r11,r11,4
8111d760:	0013883a 	mov	r9,zero
8111d764:	dac02315 	stw	r11,140(sp)
8111d768:	003f4106 	br	8111d470 <__reset+0xfb0fd470>
8111d76c:	21003fcc 	andi	r4,r4,255
8111d770:	2002e11e 	bne	r4,zero,8111e2f8 <___svfiprintf_internal_r+0x123c>
8111d774:	9080080c 	andi	r2,r18,32
8111d778:	1002011e 	bne	r2,zero,8111df80 <___svfiprintf_internal_r+0xec4>
8111d77c:	9080040c 	andi	r2,r18,16
8111d780:	10023e1e 	bne	r2,zero,8111e07c <___svfiprintf_internal_r+0xfc0>
8111d784:	9480100c 	andi	r18,r18,64
8111d788:	90023c26 	beq	r18,zero,8111e07c <___svfiprintf_internal_r+0xfc0>
8111d78c:	dac02317 	ldw	r11,140(sp)
8111d790:	58800017 	ldw	r2,0(r11)
8111d794:	5ac00104 	addi	r11,r11,4
8111d798:	dac02315 	stw	r11,140(sp)
8111d79c:	dac02517 	ldw	r11,148(sp)
8111d7a0:	12c0000d 	sth	r11,0(r2)
8111d7a4:	003e6e06 	br	8111d160 <__reset+0xfb0fd160>
8111d7a8:	98c00007 	ldb	r3,0(r19)
8111d7ac:	1a422926 	beq	r3,r9,8111e054 <___svfiprintf_internal_r+0xf98>
8111d7b0:	94800414 	ori	r18,r18,16
8111d7b4:	003e9206 	br	8111d200 <__reset+0xfb0fd200>
8111d7b8:	94801014 	ori	r18,r18,64
8111d7bc:	98c00007 	ldb	r3,0(r19)
8111d7c0:	003e8f06 	br	8111d200 <__reset+0xfb0fd200>
8111d7c4:	21003fcc 	andi	r4,r4,255
8111d7c8:	2002c71e 	bne	r4,zero,8111e2e8 <___svfiprintf_internal_r+0x122c>
8111d7cc:	9080080c 	andi	r2,r18,32
8111d7d0:	10004926 	beq	r2,zero,8111d8f8 <___svfiprintf_internal_r+0x83c>
8111d7d4:	dac02317 	ldw	r11,140(sp)
8111d7d8:	58800117 	ldw	r2,4(r11)
8111d7dc:	5f000017 	ldw	fp,0(r11)
8111d7e0:	5ac00204 	addi	r11,r11,8
8111d7e4:	dac02315 	stw	r11,140(sp)
8111d7e8:	1013883a 	mov	r9,r2
8111d7ec:	10004b16 	blt	r2,zero,8111d91c <___svfiprintf_internal_r+0x860>
8111d7f0:	da801d83 	ldbu	r10,118(sp)
8111d7f4:	8001cb16 	blt	r16,zero,8111df24 <___svfiprintf_internal_r+0xe68>
8111d7f8:	00ffdfc4 	movi	r3,-129
8111d7fc:	e244b03a 	or	r2,fp,r9
8111d800:	90e4703a 	and	r18,r18,r3
8111d804:	103f4726 	beq	r2,zero,8111d524 <__reset+0xfb0fd524>
8111d808:	48008c26 	beq	r9,zero,8111da3c <___svfiprintf_internal_r+0x980>
8111d80c:	dc802015 	stw	r18,128(sp)
8111d810:	dc002115 	stw	r16,132(sp)
8111d814:	dc401a04 	addi	r17,sp,104
8111d818:	e021883a 	mov	r16,fp
8111d81c:	da002215 	stw	r8,136(sp)
8111d820:	5039883a 	mov	fp,r10
8111d824:	4825883a 	mov	r18,r9
8111d828:	8009883a 	mov	r4,r16
8111d82c:	900b883a 	mov	r5,r18
8111d830:	01800284 	movi	r6,10
8111d834:	000f883a 	mov	r7,zero
8111d838:	11215a80 	call	811215a8 <__umoddi3>
8111d83c:	10800c04 	addi	r2,r2,48
8111d840:	8c7fffc4 	addi	r17,r17,-1
8111d844:	8009883a 	mov	r4,r16
8111d848:	900b883a 	mov	r5,r18
8111d84c:	88800005 	stb	r2,0(r17)
8111d850:	01800284 	movi	r6,10
8111d854:	000f883a 	mov	r7,zero
8111d858:	11210280 	call	81121028 <__udivdi3>
8111d85c:	1021883a 	mov	r16,r2
8111d860:	10c4b03a 	or	r2,r2,r3
8111d864:	1825883a 	mov	r18,r3
8111d868:	103fef1e 	bne	r2,zero,8111d828 <__reset+0xfb0fd828>
8111d86c:	dc802017 	ldw	r18,128(sp)
8111d870:	dc002117 	ldw	r16,132(sp)
8111d874:	da002217 	ldw	r8,136(sp)
8111d878:	e015883a 	mov	r10,fp
8111d87c:	d8c01e17 	ldw	r3,120(sp)
8111d880:	1c47c83a 	sub	r3,r3,r17
8111d884:	d8c02115 	stw	r3,132(sp)
8111d888:	003f2a06 	br	8111d534 <__reset+0xfb0fd534>
8111d88c:	dac02317 	ldw	r11,140(sp)
8111d890:	d8001d85 	stb	zero,118(sp)
8111d894:	5c400017 	ldw	r17,0(r11)
8111d898:	5f000104 	addi	fp,r11,4
8111d89c:	88022f26 	beq	r17,zero,8111e15c <___svfiprintf_internal_r+0x10a0>
8111d8a0:	80022516 	blt	r16,zero,8111e138 <___svfiprintf_internal_r+0x107c>
8111d8a4:	800d883a 	mov	r6,r16
8111d8a8:	000b883a 	mov	r5,zero
8111d8ac:	8809883a 	mov	r4,r17
8111d8b0:	da002c15 	stw	r8,176(sp)
8111d8b4:	11193100 	call	81119310 <memchr>
8111d8b8:	da002c17 	ldw	r8,176(sp)
8111d8bc:	10026426 	beq	r2,zero,8111e250 <___svfiprintf_internal_r+0x1194>
8111d8c0:	1445c83a 	sub	r2,r2,r17
8111d8c4:	d8802115 	stw	r2,132(sp)
8111d8c8:	da801d83 	ldbu	r10,118(sp)
8111d8cc:	df002315 	stw	fp,140(sp)
8111d8d0:	0021883a 	mov	r16,zero
8111d8d4:	003f1706 	br	8111d534 <__reset+0xfb0fd534>
8111d8d8:	94800814 	ori	r18,r18,32
8111d8dc:	98c00007 	ldb	r3,0(r19)
8111d8e0:	003e4706 	br	8111d200 <__reset+0xfb0fd200>
8111d8e4:	21003fcc 	andi	r4,r4,255
8111d8e8:	2002701e 	bne	r4,zero,8111e2ac <___svfiprintf_internal_r+0x11f0>
8111d8ec:	94800414 	ori	r18,r18,16
8111d8f0:	9080080c 	andi	r2,r18,32
8111d8f4:	103fb71e 	bne	r2,zero,8111d7d4 <__reset+0xfb0fd7d4>
8111d8f8:	9080040c 	andi	r2,r18,16
8111d8fc:	1001ab26 	beq	r2,zero,8111dfac <___svfiprintf_internal_r+0xef0>
8111d900:	dac02317 	ldw	r11,140(sp)
8111d904:	5f000017 	ldw	fp,0(r11)
8111d908:	5ac00104 	addi	r11,r11,4
8111d90c:	dac02315 	stw	r11,140(sp)
8111d910:	e013d7fa 	srai	r9,fp,31
8111d914:	4805883a 	mov	r2,r9
8111d918:	103fb50e 	bge	r2,zero,8111d7f0 <__reset+0xfb0fd7f0>
8111d91c:	0739c83a 	sub	fp,zero,fp
8111d920:	02800b44 	movi	r10,45
8111d924:	e004c03a 	cmpne	r2,fp,zero
8111d928:	0253c83a 	sub	r9,zero,r9
8111d92c:	da801d85 	stb	r10,118(sp)
8111d930:	4893c83a 	sub	r9,r9,r2
8111d934:	80023016 	blt	r16,zero,8111e1f8 <___svfiprintf_internal_r+0x113c>
8111d938:	00bfdfc4 	movi	r2,-129
8111d93c:	90a4703a 	and	r18,r18,r2
8111d940:	483fb21e 	bne	r9,zero,8111d80c <__reset+0xfb0fd80c>
8111d944:	00003d06 	br	8111da3c <___svfiprintf_internal_r+0x980>
8111d948:	9817883a 	mov	r11,r19
8111d94c:	d8002415 	stw	zero,144(sp)
8111d950:	18bff404 	addi	r2,r3,-48
8111d954:	0019883a 	mov	r12,zero
8111d958:	58c00007 	ldb	r3,0(r11)
8111d95c:	630002a4 	muli	r12,r12,10
8111d960:	9cc00044 	addi	r19,r19,1
8111d964:	9817883a 	mov	r11,r19
8111d968:	1319883a 	add	r12,r2,r12
8111d96c:	18bff404 	addi	r2,r3,-48
8111d970:	30bff92e 	bgeu	r6,r2,8111d958 <__reset+0xfb0fd958>
8111d974:	db002415 	stw	r12,144(sp)
8111d978:	18bff804 	addi	r2,r3,-32
8111d97c:	28be232e 	bgeu	r5,r2,8111d20c <__reset+0xfb0fd20c>
8111d980:	21003fcc 	andi	r4,r4,255
8111d984:	20024b1e 	bne	r4,zero,8111e2b4 <___svfiprintf_internal_r+0x11f8>
8111d988:	1800d626 	beq	r3,zero,8111dce4 <___svfiprintf_internal_r+0xc28>
8111d98c:	02c00044 	movi	r11,1
8111d990:	dac02015 	stw	r11,128(sp)
8111d994:	d8c01005 	stb	r3,64(sp)
8111d998:	d8001d85 	stb	zero,118(sp)
8111d99c:	dac02115 	stw	r11,132(sp)
8111d9a0:	dc401004 	addi	r17,sp,64
8111d9a4:	003f2606 	br	8111d640 <__reset+0xfb0fd640>
8111d9a8:	94802014 	ori	r18,r18,128
8111d9ac:	98c00007 	ldb	r3,0(r19)
8111d9b0:	003e1306 	br	8111d200 <__reset+0xfb0fd200>
8111d9b4:	98c00007 	ldb	r3,0(r19)
8111d9b8:	9ac00044 	addi	r11,r19,1
8111d9bc:	1a822b26 	beq	r3,r10,8111e26c <___svfiprintf_internal_r+0x11b0>
8111d9c0:	18bff404 	addi	r2,r3,-48
8111d9c4:	0021883a 	mov	r16,zero
8111d9c8:	30821e36 	bltu	r6,r2,8111e244 <___svfiprintf_internal_r+0x1188>
8111d9cc:	58c00007 	ldb	r3,0(r11)
8111d9d0:	840002a4 	muli	r16,r16,10
8111d9d4:	5cc00044 	addi	r19,r11,1
8111d9d8:	9817883a 	mov	r11,r19
8111d9dc:	80a1883a 	add	r16,r16,r2
8111d9e0:	18bff404 	addi	r2,r3,-48
8111d9e4:	30bff92e 	bgeu	r6,r2,8111d9cc <__reset+0xfb0fd9cc>
8111d9e8:	803e060e 	bge	r16,zero,8111d204 <__reset+0xfb0fd204>
8111d9ec:	043fffc4 	movi	r16,-1
8111d9f0:	003e0406 	br	8111d204 <__reset+0xfb0fd204>
8111d9f4:	21003fcc 	andi	r4,r4,255
8111d9f8:	2002371e 	bne	r4,zero,8111e2d8 <___svfiprintf_internal_r+0x121c>
8111d9fc:	94800414 	ori	r18,r18,16
8111da00:	9080080c 	andi	r2,r18,32
8111da04:	103ebb1e 	bne	r2,zero,8111d4f4 <__reset+0xfb0fd4f4>
8111da08:	9080040c 	andi	r2,r18,16
8111da0c:	10013b26 	beq	r2,zero,8111defc <___svfiprintf_internal_r+0xe40>
8111da10:	dac02317 	ldw	r11,140(sp)
8111da14:	d8001d85 	stb	zero,118(sp)
8111da18:	0013883a 	mov	r9,zero
8111da1c:	58800104 	addi	r2,r11,4
8111da20:	5f000017 	ldw	fp,0(r11)
8111da24:	80013d16 	blt	r16,zero,8111df1c <___svfiprintf_internal_r+0xe60>
8111da28:	00ffdfc4 	movi	r3,-129
8111da2c:	d8802315 	stw	r2,140(sp)
8111da30:	90e4703a 	and	r18,r18,r3
8111da34:	0015883a 	mov	r10,zero
8111da38:	e03eba26 	beq	fp,zero,8111d524 <__reset+0xfb0fd524>
8111da3c:	00800244 	movi	r2,9
8111da40:	173f7236 	bltu	r2,fp,8111d80c <__reset+0xfb0fd80c>
8111da44:	dac02b17 	ldw	r11,172(sp)
8111da48:	e7000c04 	addi	fp,fp,48
8111da4c:	df0019c5 	stb	fp,103(sp)
8111da50:	dac02115 	stw	r11,132(sp)
8111da54:	dc4019c4 	addi	r17,sp,103
8111da58:	003eb606 	br	8111d534 <__reset+0xfb0fd534>
8111da5c:	21003fcc 	andi	r4,r4,255
8111da60:	20021f1e 	bne	r4,zero,8111e2e0 <___svfiprintf_internal_r+0x1224>
8111da64:	94800414 	ori	r18,r18,16
8111da68:	9080080c 	andi	r2,r18,32
8111da6c:	103ec51e 	bne	r2,zero,8111d584 <__reset+0xfb0fd584>
8111da70:	9080040c 	andi	r2,r18,16
8111da74:	10016926 	beq	r2,zero,8111e01c <___svfiprintf_internal_r+0xf60>
8111da78:	dac02317 	ldw	r11,140(sp)
8111da7c:	d8001d85 	stb	zero,118(sp)
8111da80:	0013883a 	mov	r9,zero
8111da84:	58800104 	addi	r2,r11,4
8111da88:	5f000017 	ldw	fp,0(r11)
8111da8c:	80016b16 	blt	r16,zero,8111e03c <___svfiprintf_internal_r+0xf80>
8111da90:	00ffdfc4 	movi	r3,-129
8111da94:	d8802315 	stw	r2,140(sp)
8111da98:	90e4703a 	and	r18,r18,r3
8111da9c:	e03ec41e 	bne	fp,zero,8111d5b0 <__reset+0xfb0fd5b0>
8111daa0:	0015883a 	mov	r10,zero
8111daa4:	8001c226 	beq	r16,zero,8111e1b0 <___svfiprintf_internal_r+0x10f4>
8111daa8:	0039883a 	mov	fp,zero
8111daac:	0013883a 	mov	r9,zero
8111dab0:	003ec006 	br	8111d5b4 <__reset+0xfb0fd5b4>
8111dab4:	d8c01c17 	ldw	r3,112(sp)
8111dab8:	d8801b17 	ldw	r2,108(sp)
8111dabc:	d9001d87 	ldb	r4,118(sp)
8111dac0:	20000b26 	beq	r4,zero,8111daf0 <___svfiprintf_internal_r+0xa34>
8111dac4:	d9001d84 	addi	r4,sp,118
8111dac8:	18c00044 	addi	r3,r3,1
8111dacc:	10800044 	addi	r2,r2,1
8111dad0:	41000015 	stw	r4,0(r8)
8111dad4:	01000044 	movi	r4,1
8111dad8:	41000115 	stw	r4,4(r8)
8111dadc:	d8c01c15 	stw	r3,112(sp)
8111dae0:	d8801b15 	stw	r2,108(sp)
8111dae4:	010001c4 	movi	r4,7
8111dae8:	2080e116 	blt	r4,r2,8111de70 <___svfiprintf_internal_r+0xdb4>
8111daec:	42000204 	addi	r8,r8,8
8111daf0:	dac02217 	ldw	r11,136(sp)
8111daf4:	58000b26 	beq	r11,zero,8111db24 <___svfiprintf_internal_r+0xa68>
8111daf8:	d9001d04 	addi	r4,sp,116
8111dafc:	18c00084 	addi	r3,r3,2
8111db00:	10800044 	addi	r2,r2,1
8111db04:	41000015 	stw	r4,0(r8)
8111db08:	01000084 	movi	r4,2
8111db0c:	41000115 	stw	r4,4(r8)
8111db10:	d8c01c15 	stw	r3,112(sp)
8111db14:	d8801b15 	stw	r2,108(sp)
8111db18:	010001c4 	movi	r4,7
8111db1c:	2080dd16 	blt	r4,r2,8111de94 <___svfiprintf_internal_r+0xdd8>
8111db20:	42000204 	addi	r8,r8,8
8111db24:	dac02617 	ldw	r11,152(sp)
8111db28:	01002004 	movi	r4,128
8111db2c:	59008426 	beq	r11,r4,8111dd40 <___svfiprintf_internal_r+0xc84>
8111db30:	dac02117 	ldw	r11,132(sp)
8111db34:	82e1c83a 	sub	r16,r16,r11
8111db38:	0400270e 	bge	zero,r16,8111dbd8 <___svfiprintf_internal_r+0xb1c>
8111db3c:	01c00404 	movi	r7,16
8111db40:	3c016a0e 	bge	r7,r16,8111e0ec <___svfiprintf_internal_r+0x1030>
8111db44:	01604534 	movhi	r5,33044
8111db48:	296eb504 	addi	r5,r5,-17708
8111db4c:	d9402215 	stw	r5,136(sp)
8111db50:	070001c4 	movi	fp,7
8111db54:	00000306 	br	8111db64 <___svfiprintf_internal_r+0xaa8>
8111db58:	843ffc04 	addi	r16,r16,-16
8111db5c:	42000204 	addi	r8,r8,8
8111db60:	3c00130e 	bge	r7,r16,8111dbb0 <___svfiprintf_internal_r+0xaf4>
8111db64:	18c00404 	addi	r3,r3,16
8111db68:	10800044 	addi	r2,r2,1
8111db6c:	45000015 	stw	r20,0(r8)
8111db70:	41c00115 	stw	r7,4(r8)
8111db74:	d8c01c15 	stw	r3,112(sp)
8111db78:	d8801b15 	stw	r2,108(sp)
8111db7c:	e0bff60e 	bge	fp,r2,8111db58 <__reset+0xfb0fdb58>
8111db80:	d9801a04 	addi	r6,sp,104
8111db84:	b80b883a 	mov	r5,r23
8111db88:	a809883a 	mov	r4,r21
8111db8c:	d9c02c15 	stw	r7,176(sp)
8111db90:	111cee40 	call	8111cee4 <__ssprint_r>
8111db94:	d9c02c17 	ldw	r7,176(sp)
8111db98:	1000581e 	bne	r2,zero,8111dcfc <___svfiprintf_internal_r+0xc40>
8111db9c:	843ffc04 	addi	r16,r16,-16
8111dba0:	d8c01c17 	ldw	r3,112(sp)
8111dba4:	d8801b17 	ldw	r2,108(sp)
8111dba8:	d811883a 	mov	r8,sp
8111dbac:	3c3fed16 	blt	r7,r16,8111db64 <__reset+0xfb0fdb64>
8111dbb0:	dac02217 	ldw	r11,136(sp)
8111dbb4:	1c07883a 	add	r3,r3,r16
8111dbb8:	10800044 	addi	r2,r2,1
8111dbbc:	42c00015 	stw	r11,0(r8)
8111dbc0:	44000115 	stw	r16,4(r8)
8111dbc4:	d8c01c15 	stw	r3,112(sp)
8111dbc8:	d8801b15 	stw	r2,108(sp)
8111dbcc:	010001c4 	movi	r4,7
8111dbd0:	20809e16 	blt	r4,r2,8111de4c <___svfiprintf_internal_r+0xd90>
8111dbd4:	42000204 	addi	r8,r8,8
8111dbd8:	dac02117 	ldw	r11,132(sp)
8111dbdc:	10800044 	addi	r2,r2,1
8111dbe0:	44400015 	stw	r17,0(r8)
8111dbe4:	58c7883a 	add	r3,r11,r3
8111dbe8:	42c00115 	stw	r11,4(r8)
8111dbec:	d8c01c15 	stw	r3,112(sp)
8111dbf0:	d8801b15 	stw	r2,108(sp)
8111dbf4:	010001c4 	movi	r4,7
8111dbf8:	20807f16 	blt	r4,r2,8111ddf8 <___svfiprintf_internal_r+0xd3c>
8111dbfc:	42000204 	addi	r8,r8,8
8111dc00:	9480010c 	andi	r18,r18,4
8111dc04:	90002926 	beq	r18,zero,8111dcac <___svfiprintf_internal_r+0xbf0>
8111dc08:	dac02417 	ldw	r11,144(sp)
8111dc0c:	d8802017 	ldw	r2,128(sp)
8111dc10:	58a1c83a 	sub	r16,r11,r2
8111dc14:	0400250e 	bge	zero,r16,8111dcac <___svfiprintf_internal_r+0xbf0>
8111dc18:	04400404 	movi	r17,16
8111dc1c:	d8801b17 	ldw	r2,108(sp)
8111dc20:	8c017c0e 	bge	r17,r16,8111e214 <___svfiprintf_internal_r+0x1158>
8111dc24:	01604534 	movhi	r5,33044
8111dc28:	296eb904 	addi	r5,r5,-17692
8111dc2c:	d9402815 	stw	r5,160(sp)
8111dc30:	048001c4 	movi	r18,7
8111dc34:	00000306 	br	8111dc44 <___svfiprintf_internal_r+0xb88>
8111dc38:	843ffc04 	addi	r16,r16,-16
8111dc3c:	42000204 	addi	r8,r8,8
8111dc40:	8c00110e 	bge	r17,r16,8111dc88 <___svfiprintf_internal_r+0xbcc>
8111dc44:	18c00404 	addi	r3,r3,16
8111dc48:	10800044 	addi	r2,r2,1
8111dc4c:	45800015 	stw	r22,0(r8)
8111dc50:	44400115 	stw	r17,4(r8)
8111dc54:	d8c01c15 	stw	r3,112(sp)
8111dc58:	d8801b15 	stw	r2,108(sp)
8111dc5c:	90bff60e 	bge	r18,r2,8111dc38 <__reset+0xfb0fdc38>
8111dc60:	d9801a04 	addi	r6,sp,104
8111dc64:	b80b883a 	mov	r5,r23
8111dc68:	a809883a 	mov	r4,r21
8111dc6c:	111cee40 	call	8111cee4 <__ssprint_r>
8111dc70:	1000221e 	bne	r2,zero,8111dcfc <___svfiprintf_internal_r+0xc40>
8111dc74:	843ffc04 	addi	r16,r16,-16
8111dc78:	d8c01c17 	ldw	r3,112(sp)
8111dc7c:	d8801b17 	ldw	r2,108(sp)
8111dc80:	d811883a 	mov	r8,sp
8111dc84:	8c3fef16 	blt	r17,r16,8111dc44 <__reset+0xfb0fdc44>
8111dc88:	dac02817 	ldw	r11,160(sp)
8111dc8c:	1c07883a 	add	r3,r3,r16
8111dc90:	10800044 	addi	r2,r2,1
8111dc94:	42c00015 	stw	r11,0(r8)
8111dc98:	44000115 	stw	r16,4(r8)
8111dc9c:	d8c01c15 	stw	r3,112(sp)
8111dca0:	d8801b15 	stw	r2,108(sp)
8111dca4:	010001c4 	movi	r4,7
8111dca8:	2080aa16 	blt	r4,r2,8111df54 <___svfiprintf_internal_r+0xe98>
8111dcac:	d8802417 	ldw	r2,144(sp)
8111dcb0:	dac02017 	ldw	r11,128(sp)
8111dcb4:	12c0010e 	bge	r2,r11,8111dcbc <___svfiprintf_internal_r+0xc00>
8111dcb8:	5805883a 	mov	r2,r11
8111dcbc:	dac02517 	ldw	r11,148(sp)
8111dcc0:	5897883a 	add	r11,r11,r2
8111dcc4:	dac02515 	stw	r11,148(sp)
8111dcc8:	1800531e 	bne	r3,zero,8111de18 <___svfiprintf_internal_r+0xd5c>
8111dccc:	98800007 	ldb	r2,0(r19)
8111dcd0:	d8001b15 	stw	zero,108(sp)
8111dcd4:	d811883a 	mov	r8,sp
8111dcd8:	103d231e 	bne	r2,zero,8111d168 <__reset+0xfb0fd168>
8111dcdc:	9823883a 	mov	r17,r19
8111dce0:	003d3906 	br	8111d1c8 <__reset+0xfb0fd1c8>
8111dce4:	d8801c17 	ldw	r2,112(sp)
8111dce8:	10000426 	beq	r2,zero,8111dcfc <___svfiprintf_internal_r+0xc40>
8111dcec:	d9402717 	ldw	r5,156(sp)
8111dcf0:	d9002a17 	ldw	r4,168(sp)
8111dcf4:	d9801a04 	addi	r6,sp,104
8111dcf8:	111cee40 	call	8111cee4 <__ssprint_r>
8111dcfc:	dac02717 	ldw	r11,156(sp)
8111dd00:	d8802517 	ldw	r2,148(sp)
8111dd04:	58c0030b 	ldhu	r3,12(r11)
8111dd08:	18c0100c 	andi	r3,r3,64
8111dd0c:	1801381e 	bne	r3,zero,8111e1f0 <___svfiprintf_internal_r+0x1134>
8111dd10:	dfc03717 	ldw	ra,220(sp)
8111dd14:	df003617 	ldw	fp,216(sp)
8111dd18:	ddc03517 	ldw	r23,212(sp)
8111dd1c:	dd803417 	ldw	r22,208(sp)
8111dd20:	dd403317 	ldw	r21,204(sp)
8111dd24:	dd003217 	ldw	r20,200(sp)
8111dd28:	dcc03117 	ldw	r19,196(sp)
8111dd2c:	dc803017 	ldw	r18,192(sp)
8111dd30:	dc402f17 	ldw	r17,188(sp)
8111dd34:	dc002e17 	ldw	r16,184(sp)
8111dd38:	dec03804 	addi	sp,sp,224
8111dd3c:	f800283a 	ret
8111dd40:	dac02417 	ldw	r11,144(sp)
8111dd44:	d9002017 	ldw	r4,128(sp)
8111dd48:	5939c83a 	sub	fp,r11,r4
8111dd4c:	073f780e 	bge	zero,fp,8111db30 <__reset+0xfb0fdb30>
8111dd50:	02400404 	movi	r9,16
8111dd54:	4f01370e 	bge	r9,fp,8111e234 <___svfiprintf_internal_r+0x1178>
8111dd58:	02e04534 	movhi	r11,33044
8111dd5c:	5aeeb504 	addi	r11,r11,-17708
8111dd60:	dac02215 	stw	r11,136(sp)
8111dd64:	028001c4 	movi	r10,7
8111dd68:	00000306 	br	8111dd78 <___svfiprintf_internal_r+0xcbc>
8111dd6c:	e73ffc04 	addi	fp,fp,-16
8111dd70:	42000204 	addi	r8,r8,8
8111dd74:	4f00150e 	bge	r9,fp,8111ddcc <___svfiprintf_internal_r+0xd10>
8111dd78:	18c00404 	addi	r3,r3,16
8111dd7c:	10800044 	addi	r2,r2,1
8111dd80:	45000015 	stw	r20,0(r8)
8111dd84:	42400115 	stw	r9,4(r8)
8111dd88:	d8c01c15 	stw	r3,112(sp)
8111dd8c:	d8801b15 	stw	r2,108(sp)
8111dd90:	50bff60e 	bge	r10,r2,8111dd6c <__reset+0xfb0fdd6c>
8111dd94:	d9801a04 	addi	r6,sp,104
8111dd98:	b80b883a 	mov	r5,r23
8111dd9c:	a809883a 	mov	r4,r21
8111dda0:	da402c15 	stw	r9,176(sp)
8111dda4:	da802d15 	stw	r10,180(sp)
8111dda8:	111cee40 	call	8111cee4 <__ssprint_r>
8111ddac:	da402c17 	ldw	r9,176(sp)
8111ddb0:	da802d17 	ldw	r10,180(sp)
8111ddb4:	103fd11e 	bne	r2,zero,8111dcfc <__reset+0xfb0fdcfc>
8111ddb8:	e73ffc04 	addi	fp,fp,-16
8111ddbc:	d8c01c17 	ldw	r3,112(sp)
8111ddc0:	d8801b17 	ldw	r2,108(sp)
8111ddc4:	d811883a 	mov	r8,sp
8111ddc8:	4f3feb16 	blt	r9,fp,8111dd78 <__reset+0xfb0fdd78>
8111ddcc:	dac02217 	ldw	r11,136(sp)
8111ddd0:	1f07883a 	add	r3,r3,fp
8111ddd4:	10800044 	addi	r2,r2,1
8111ddd8:	42c00015 	stw	r11,0(r8)
8111dddc:	47000115 	stw	fp,4(r8)
8111dde0:	d8c01c15 	stw	r3,112(sp)
8111dde4:	d8801b15 	stw	r2,108(sp)
8111dde8:	010001c4 	movi	r4,7
8111ddec:	2080b616 	blt	r4,r2,8111e0c8 <___svfiprintf_internal_r+0x100c>
8111ddf0:	42000204 	addi	r8,r8,8
8111ddf4:	003f4e06 	br	8111db30 <__reset+0xfb0fdb30>
8111ddf8:	d9801a04 	addi	r6,sp,104
8111ddfc:	b80b883a 	mov	r5,r23
8111de00:	a809883a 	mov	r4,r21
8111de04:	111cee40 	call	8111cee4 <__ssprint_r>
8111de08:	103fbc1e 	bne	r2,zero,8111dcfc <__reset+0xfb0fdcfc>
8111de0c:	d8c01c17 	ldw	r3,112(sp)
8111de10:	d811883a 	mov	r8,sp
8111de14:	003f7a06 	br	8111dc00 <__reset+0xfb0fdc00>
8111de18:	d9801a04 	addi	r6,sp,104
8111de1c:	b80b883a 	mov	r5,r23
8111de20:	a809883a 	mov	r4,r21
8111de24:	111cee40 	call	8111cee4 <__ssprint_r>
8111de28:	103fa826 	beq	r2,zero,8111dccc <__reset+0xfb0fdccc>
8111de2c:	003fb306 	br	8111dcfc <__reset+0xfb0fdcfc>
8111de30:	d9801a04 	addi	r6,sp,104
8111de34:	b80b883a 	mov	r5,r23
8111de38:	a809883a 	mov	r4,r21
8111de3c:	111cee40 	call	8111cee4 <__ssprint_r>
8111de40:	103fae1e 	bne	r2,zero,8111dcfc <__reset+0xfb0fdcfc>
8111de44:	d811883a 	mov	r8,sp
8111de48:	003cdc06 	br	8111d1bc <__reset+0xfb0fd1bc>
8111de4c:	d9801a04 	addi	r6,sp,104
8111de50:	b80b883a 	mov	r5,r23
8111de54:	a809883a 	mov	r4,r21
8111de58:	111cee40 	call	8111cee4 <__ssprint_r>
8111de5c:	103fa71e 	bne	r2,zero,8111dcfc <__reset+0xfb0fdcfc>
8111de60:	d8c01c17 	ldw	r3,112(sp)
8111de64:	d8801b17 	ldw	r2,108(sp)
8111de68:	d811883a 	mov	r8,sp
8111de6c:	003f5a06 	br	8111dbd8 <__reset+0xfb0fdbd8>
8111de70:	d9801a04 	addi	r6,sp,104
8111de74:	b80b883a 	mov	r5,r23
8111de78:	a809883a 	mov	r4,r21
8111de7c:	111cee40 	call	8111cee4 <__ssprint_r>
8111de80:	103f9e1e 	bne	r2,zero,8111dcfc <__reset+0xfb0fdcfc>
8111de84:	d8c01c17 	ldw	r3,112(sp)
8111de88:	d8801b17 	ldw	r2,108(sp)
8111de8c:	d811883a 	mov	r8,sp
8111de90:	003f1706 	br	8111daf0 <__reset+0xfb0fdaf0>
8111de94:	d9801a04 	addi	r6,sp,104
8111de98:	b80b883a 	mov	r5,r23
8111de9c:	a809883a 	mov	r4,r21
8111dea0:	111cee40 	call	8111cee4 <__ssprint_r>
8111dea4:	103f951e 	bne	r2,zero,8111dcfc <__reset+0xfb0fdcfc>
8111dea8:	d8c01c17 	ldw	r3,112(sp)
8111deac:	d8801b17 	ldw	r2,108(sp)
8111deb0:	d811883a 	mov	r8,sp
8111deb4:	003f1b06 	br	8111db24 <__reset+0xfb0fdb24>
8111deb8:	d8001d85 	stb	zero,118(sp)
8111debc:	80007b16 	blt	r16,zero,8111e0ac <___svfiprintf_internal_r+0xff0>
8111dec0:	00ffdfc4 	movi	r3,-129
8111dec4:	e244b03a 	or	r2,fp,r9
8111dec8:	90e4703a 	and	r18,r18,r3
8111decc:	103d7026 	beq	r2,zero,8111d490 <__reset+0xfb0fd490>
8111ded0:	0015883a 	mov	r10,zero
8111ded4:	003d7206 	br	8111d4a0 <__reset+0xfb0fd4a0>
8111ded8:	d9801a04 	addi	r6,sp,104
8111dedc:	b80b883a 	mov	r5,r23
8111dee0:	a809883a 	mov	r4,r21
8111dee4:	111cee40 	call	8111cee4 <__ssprint_r>
8111dee8:	103f841e 	bne	r2,zero,8111dcfc <__reset+0xfb0fdcfc>
8111deec:	d8c01c17 	ldw	r3,112(sp)
8111def0:	d8801b17 	ldw	r2,108(sp)
8111def4:	d811883a 	mov	r8,sp
8111def8:	003ef006 	br	8111dabc <__reset+0xfb0fdabc>
8111defc:	9080100c 	andi	r2,r18,64
8111df00:	d8001d85 	stb	zero,118(sp)
8111df04:	dac02317 	ldw	r11,140(sp)
8111df08:	10008126 	beq	r2,zero,8111e110 <___svfiprintf_internal_r+0x1054>
8111df0c:	58800104 	addi	r2,r11,4
8111df10:	5f00000b 	ldhu	fp,0(r11)
8111df14:	0013883a 	mov	r9,zero
8111df18:	803ec30e 	bge	r16,zero,8111da28 <__reset+0xfb0fda28>
8111df1c:	d8802315 	stw	r2,140(sp)
8111df20:	0015883a 	mov	r10,zero
8111df24:	e244b03a 	or	r2,fp,r9
8111df28:	103e371e 	bne	r2,zero,8111d808 <__reset+0xfb0fd808>
8111df2c:	00800044 	movi	r2,1
8111df30:	10803fcc 	andi	r2,r2,255
8111df34:	00c00044 	movi	r3,1
8111df38:	10c06126 	beq	r2,r3,8111e0c0 <___svfiprintf_internal_r+0x1004>
8111df3c:	00c00084 	movi	r3,2
8111df40:	10fd5526 	beq	r2,r3,8111d498 <__reset+0xfb0fd498>
8111df44:	003ed806 	br	8111daa8 <__reset+0xfb0fdaa8>
8111df48:	d8802315 	stw	r2,140(sp)
8111df4c:	98c00007 	ldb	r3,0(r19)
8111df50:	003cab06 	br	8111d200 <__reset+0xfb0fd200>
8111df54:	d9801a04 	addi	r6,sp,104
8111df58:	b80b883a 	mov	r5,r23
8111df5c:	a809883a 	mov	r4,r21
8111df60:	111cee40 	call	8111cee4 <__ssprint_r>
8111df64:	103f651e 	bne	r2,zero,8111dcfc <__reset+0xfb0fdcfc>
8111df68:	d8c01c17 	ldw	r3,112(sp)
8111df6c:	003f4f06 	br	8111dcac <__reset+0xfb0fdcac>
8111df70:	00a04534 	movhi	r2,33044
8111df74:	10ae2b04 	addi	r2,r2,-18260
8111df78:	d8802915 	stw	r2,164(sp)
8111df7c:	003d4406 	br	8111d490 <__reset+0xfb0fd490>
8111df80:	dac02317 	ldw	r11,140(sp)
8111df84:	58800017 	ldw	r2,0(r11)
8111df88:	dac02517 	ldw	r11,148(sp)
8111df8c:	5807d7fa 	srai	r3,r11,31
8111df90:	dac02317 	ldw	r11,140(sp)
8111df94:	10c00115 	stw	r3,4(r2)
8111df98:	5ac00104 	addi	r11,r11,4
8111df9c:	dac02315 	stw	r11,140(sp)
8111dfa0:	dac02517 	ldw	r11,148(sp)
8111dfa4:	12c00015 	stw	r11,0(r2)
8111dfa8:	003c6d06 	br	8111d160 <__reset+0xfb0fd160>
8111dfac:	9080100c 	andi	r2,r18,64
8111dfb0:	dac02317 	ldw	r11,140(sp)
8111dfb4:	103e5326 	beq	r2,zero,8111d904 <__reset+0xfb0fd904>
8111dfb8:	5f00000f 	ldh	fp,0(r11)
8111dfbc:	5ac00104 	addi	r11,r11,4
8111dfc0:	dac02315 	stw	r11,140(sp)
8111dfc4:	e013d7fa 	srai	r9,fp,31
8111dfc8:	4805883a 	mov	r2,r9
8111dfcc:	003e0706 	br	8111d7ec <__reset+0xfb0fd7ec>
8111dfd0:	00800c04 	movi	r2,48
8111dfd4:	d8801d05 	stb	r2,116(sp)
8111dfd8:	d8c01d45 	stb	r3,117(sp)
8111dfdc:	d8001d85 	stb	zero,118(sp)
8111dfe0:	90800094 	ori	r2,r18,2
8111dfe4:	80008f16 	blt	r16,zero,8111e224 <___svfiprintf_internal_r+0x1168>
8111dfe8:	00bfdfc4 	movi	r2,-129
8111dfec:	90a4703a 	and	r18,r18,r2
8111dff0:	94800094 	ori	r18,r18,2
8111dff4:	0015883a 	mov	r10,zero
8111dff8:	003d2906 	br	8111d4a0 <__reset+0xfb0fd4a0>
8111dffc:	98c00007 	ldb	r3,0(r19)
8111e000:	003c7f06 	br	8111d200 <__reset+0xfb0fd200>
8111e004:	dac02317 	ldw	r11,140(sp)
8111e008:	0013883a 	mov	r9,zero
8111e00c:	5f000017 	ldw	fp,0(r11)
8111e010:	5ac00104 	addi	r11,r11,4
8111e014:	dac02315 	stw	r11,140(sp)
8111e018:	003d1506 	br	8111d470 <__reset+0xfb0fd470>
8111e01c:	9080100c 	andi	r2,r18,64
8111e020:	d8001d85 	stb	zero,118(sp)
8111e024:	dac02317 	ldw	r11,140(sp)
8111e028:	10003426 	beq	r2,zero,8111e0fc <___svfiprintf_internal_r+0x1040>
8111e02c:	58800104 	addi	r2,r11,4
8111e030:	5f00000b 	ldhu	fp,0(r11)
8111e034:	0013883a 	mov	r9,zero
8111e038:	803e950e 	bge	r16,zero,8111da90 <__reset+0xfb0fda90>
8111e03c:	e246b03a 	or	r3,fp,r9
8111e040:	d8802315 	stw	r2,140(sp)
8111e044:	183d5a1e 	bne	r3,zero,8111d5b0 <__reset+0xfb0fd5b0>
8111e048:	0015883a 	mov	r10,zero
8111e04c:	0005883a 	mov	r2,zero
8111e050:	003fb706 	br	8111df30 <__reset+0xfb0fdf30>
8111e054:	98c00043 	ldbu	r3,1(r19)
8111e058:	94800814 	ori	r18,r18,32
8111e05c:	9cc00044 	addi	r19,r19,1
8111e060:	18c03fcc 	andi	r3,r3,255
8111e064:	18c0201c 	xori	r3,r3,128
8111e068:	18ffe004 	addi	r3,r3,-128
8111e06c:	003c6406 	br	8111d200 <__reset+0xfb0fd200>
8111e070:	d8c02315 	stw	r3,140(sp)
8111e074:	0015883a 	mov	r10,zero
8111e078:	003faa06 	br	8111df24 <__reset+0xfb0fdf24>
8111e07c:	dac02317 	ldw	r11,140(sp)
8111e080:	58800017 	ldw	r2,0(r11)
8111e084:	5ac00104 	addi	r11,r11,4
8111e088:	dac02315 	stw	r11,140(sp)
8111e08c:	dac02517 	ldw	r11,148(sp)
8111e090:	12c00015 	stw	r11,0(r2)
8111e094:	003c3206 	br	8111d160 <__reset+0xfb0fd160>
8111e098:	01204534 	movhi	r4,33044
8111e09c:	212e2b04 	addi	r4,r4,-18260
8111e0a0:	d9002915 	stw	r4,164(sp)
8111e0a4:	d8c02315 	stw	r3,140(sp)
8111e0a8:	1025883a 	mov	r18,r2
8111e0ac:	e244b03a 	or	r2,fp,r9
8111e0b0:	103f871e 	bne	r2,zero,8111ded0 <__reset+0xfb0fded0>
8111e0b4:	0015883a 	mov	r10,zero
8111e0b8:	00800084 	movi	r2,2
8111e0bc:	003f9c06 	br	8111df30 <__reset+0xfb0fdf30>
8111e0c0:	0039883a 	mov	fp,zero
8111e0c4:	003e5f06 	br	8111da44 <__reset+0xfb0fda44>
8111e0c8:	d9801a04 	addi	r6,sp,104
8111e0cc:	b80b883a 	mov	r5,r23
8111e0d0:	a809883a 	mov	r4,r21
8111e0d4:	111cee40 	call	8111cee4 <__ssprint_r>
8111e0d8:	103f081e 	bne	r2,zero,8111dcfc <__reset+0xfb0fdcfc>
8111e0dc:	d8c01c17 	ldw	r3,112(sp)
8111e0e0:	d8801b17 	ldw	r2,108(sp)
8111e0e4:	d811883a 	mov	r8,sp
8111e0e8:	003e9106 	br	8111db30 <__reset+0xfb0fdb30>
8111e0ec:	01204534 	movhi	r4,33044
8111e0f0:	212eb504 	addi	r4,r4,-17708
8111e0f4:	d9002215 	stw	r4,136(sp)
8111e0f8:	003ead06 	br	8111dbb0 <__reset+0xfb0fdbb0>
8111e0fc:	58800104 	addi	r2,r11,4
8111e100:	5f000017 	ldw	fp,0(r11)
8111e104:	0013883a 	mov	r9,zero
8111e108:	803e610e 	bge	r16,zero,8111da90 <__reset+0xfb0fda90>
8111e10c:	003fcb06 	br	8111e03c <__reset+0xfb0fe03c>
8111e110:	58800104 	addi	r2,r11,4
8111e114:	5f000017 	ldw	fp,0(r11)
8111e118:	0013883a 	mov	r9,zero
8111e11c:	803e420e 	bge	r16,zero,8111da28 <__reset+0xfb0fda28>
8111e120:	003f7e06 	br	8111df1c <__reset+0xfb0fdf1c>
8111e124:	5f000017 	ldw	fp,0(r11)
8111e128:	5ac00104 	addi	r11,r11,4
8111e12c:	0013883a 	mov	r9,zero
8111e130:	dac02315 	stw	r11,140(sp)
8111e134:	003cce06 	br	8111d470 <__reset+0xfb0fd470>
8111e138:	8809883a 	mov	r4,r17
8111e13c:	da002c15 	stw	r8,176(sp)
8111e140:	110ffb80 	call	8110ffb8 <strlen>
8111e144:	d8802115 	stw	r2,132(sp)
8111e148:	da801d83 	ldbu	r10,118(sp)
8111e14c:	df002315 	stw	fp,140(sp)
8111e150:	0021883a 	mov	r16,zero
8111e154:	da002c17 	ldw	r8,176(sp)
8111e158:	003cf606 	br	8111d534 <__reset+0xfb0fd534>
8111e15c:	00800184 	movi	r2,6
8111e160:	1400012e 	bgeu	r2,r16,8111e168 <___svfiprintf_internal_r+0x10ac>
8111e164:	1021883a 	mov	r16,r2
8111e168:	dc002115 	stw	r16,132(sp)
8111e16c:	8005883a 	mov	r2,r16
8111e170:	80003c16 	blt	r16,zero,8111e264 <___svfiprintf_internal_r+0x11a8>
8111e174:	04604534 	movhi	r17,33044
8111e178:	d8802015 	stw	r2,128(sp)
8111e17c:	df002315 	stw	fp,140(sp)
8111e180:	8c6e3004 	addi	r17,r17,-18240
8111e184:	003d2e06 	br	8111d640 <__reset+0xfb0fd640>
8111e188:	04001004 	movi	r16,64
8111e18c:	800b883a 	mov	r5,r16
8111e190:	110ee080 	call	8110ee08 <_malloc_r>
8111e194:	dac02717 	ldw	r11,156(sp)
8111e198:	58800015 	stw	r2,0(r11)
8111e19c:	58800415 	stw	r2,16(r11)
8111e1a0:	10004826 	beq	r2,zero,8111e2c4 <___svfiprintf_internal_r+0x1208>
8111e1a4:	dac02717 	ldw	r11,156(sp)
8111e1a8:	5c000515 	stw	r16,20(r11)
8111e1ac:	003bd906 	br	8111d114 <__reset+0xfb0fd114>
8111e1b0:	9080004c 	andi	r2,r18,1
8111e1b4:	0015883a 	mov	r10,zero
8111e1b8:	10000626 	beq	r2,zero,8111e1d4 <___svfiprintf_internal_r+0x1118>
8111e1bc:	dac02b17 	ldw	r11,172(sp)
8111e1c0:	00800c04 	movi	r2,48
8111e1c4:	d88019c5 	stb	r2,103(sp)
8111e1c8:	dac02115 	stw	r11,132(sp)
8111e1cc:	dc4019c4 	addi	r17,sp,103
8111e1d0:	003cd806 	br	8111d534 <__reset+0xfb0fd534>
8111e1d4:	d8002115 	stw	zero,132(sp)
8111e1d8:	dc401a04 	addi	r17,sp,104
8111e1dc:	003cd506 	br	8111d534 <__reset+0xfb0fd534>
8111e1e0:	01204534 	movhi	r4,33044
8111e1e4:	212eb904 	addi	r4,r4,-17692
8111e1e8:	d9002815 	stw	r4,160(sp)
8111e1ec:	003d4306 	br	8111d6fc <__reset+0xfb0fd6fc>
8111e1f0:	00bfffc4 	movi	r2,-1
8111e1f4:	003ec606 	br	8111dd10 <__reset+0xfb0fdd10>
8111e1f8:	00800044 	movi	r2,1
8111e1fc:	10803fcc 	andi	r2,r2,255
8111e200:	00c00044 	movi	r3,1
8111e204:	10fd8026 	beq	r2,r3,8111d808 <__reset+0xfb0fd808>
8111e208:	00c00084 	movi	r3,2
8111e20c:	10fca426 	beq	r2,r3,8111d4a0 <__reset+0xfb0fd4a0>
8111e210:	003ce806 	br	8111d5b4 <__reset+0xfb0fd5b4>
8111e214:	01204534 	movhi	r4,33044
8111e218:	212eb904 	addi	r4,r4,-17692
8111e21c:	d9002815 	stw	r4,160(sp)
8111e220:	003e9906 	br	8111dc88 <__reset+0xfb0fdc88>
8111e224:	1025883a 	mov	r18,r2
8111e228:	0015883a 	mov	r10,zero
8111e22c:	00800084 	movi	r2,2
8111e230:	003ff206 	br	8111e1fc <__reset+0xfb0fe1fc>
8111e234:	01604534 	movhi	r5,33044
8111e238:	296eb504 	addi	r5,r5,-17708
8111e23c:	d9402215 	stw	r5,136(sp)
8111e240:	003ee206 	br	8111ddcc <__reset+0xfb0fddcc>
8111e244:	5827883a 	mov	r19,r11
8111e248:	0021883a 	mov	r16,zero
8111e24c:	003bed06 	br	8111d204 <__reset+0xfb0fd204>
8111e250:	dc002115 	stw	r16,132(sp)
8111e254:	da801d83 	ldbu	r10,118(sp)
8111e258:	df002315 	stw	fp,140(sp)
8111e25c:	0021883a 	mov	r16,zero
8111e260:	003cb406 	br	8111d534 <__reset+0xfb0fd534>
8111e264:	0005883a 	mov	r2,zero
8111e268:	003fc206 	br	8111e174 <__reset+0xfb0fe174>
8111e26c:	d8802317 	ldw	r2,140(sp)
8111e270:	98c00043 	ldbu	r3,1(r19)
8111e274:	5827883a 	mov	r19,r11
8111e278:	14000017 	ldw	r16,0(r2)
8111e27c:	10800104 	addi	r2,r2,4
8111e280:	d8802315 	stw	r2,140(sp)
8111e284:	803f760e 	bge	r16,zero,8111e060 <__reset+0xfb0fe060>
8111e288:	18c03fcc 	andi	r3,r3,255
8111e28c:	18c0201c 	xori	r3,r3,128
8111e290:	043fffc4 	movi	r16,-1
8111e294:	18ffe004 	addi	r3,r3,-128
8111e298:	003bd906 	br	8111d200 <__reset+0xfb0fd200>
8111e29c:	d9c01d85 	stb	r7,118(sp)
8111e2a0:	003cb606 	br	8111d57c <__reset+0xfb0fd57c>
8111e2a4:	d9c01d85 	stb	r7,118(sp)
8111e2a8:	003d2106 	br	8111d730 <__reset+0xfb0fd730>
8111e2ac:	d9c01d85 	stb	r7,118(sp)
8111e2b0:	003d8e06 	br	8111d8ec <__reset+0xfb0fd8ec>
8111e2b4:	d9c01d85 	stb	r7,118(sp)
8111e2b8:	003db306 	br	8111d988 <__reset+0xfb0fd988>
8111e2bc:	d9c01d85 	stb	r7,118(sp)
8111e2c0:	003c8a06 	br	8111d4ec <__reset+0xfb0fd4ec>
8111e2c4:	dac02a17 	ldw	r11,168(sp)
8111e2c8:	00800304 	movi	r2,12
8111e2cc:	58800015 	stw	r2,0(r11)
8111e2d0:	00bfffc4 	movi	r2,-1
8111e2d4:	003e8e06 	br	8111dd10 <__reset+0xfb0fdd10>
8111e2d8:	d9c01d85 	stb	r7,118(sp)
8111e2dc:	003dc706 	br	8111d9fc <__reset+0xfb0fd9fc>
8111e2e0:	d9c01d85 	stb	r7,118(sp)
8111e2e4:	003ddf06 	br	8111da64 <__reset+0xfb0fda64>
8111e2e8:	d9c01d85 	stb	r7,118(sp)
8111e2ec:	003d3706 	br	8111d7cc <__reset+0xfb0fd7cc>
8111e2f0:	d9c01d85 	stb	r7,118(sp)
8111e2f4:	003c5406 	br	8111d448 <__reset+0xfb0fd448>
8111e2f8:	d9c01d85 	stb	r7,118(sp)
8111e2fc:	003d1d06 	br	8111d774 <__reset+0xfb0fd774>

8111e300 <__submore>:
8111e300:	defffa04 	addi	sp,sp,-24
8111e304:	de00012e 	bgeu	sp,et,8111e30c <__submore+0xc>
8111e308:	003b68fa 	trap	3
8111e30c:	dc000015 	stw	r16,0(sp)
8111e310:	2821883a 	mov	r16,r5
8111e314:	29400c17 	ldw	r5,48(r5)
8111e318:	dfc00515 	stw	ra,20(sp)
8111e31c:	dd000415 	stw	r20,16(sp)
8111e320:	dcc00315 	stw	r19,12(sp)
8111e324:	dc800215 	stw	r18,8(sp)
8111e328:	dc400115 	stw	r17,4(sp)
8111e32c:	80801004 	addi	r2,r16,64
8111e330:	28801726 	beq	r5,r2,8111e390 <__submore+0x90>
8111e334:	84400d17 	ldw	r17,52(r16)
8111e338:	8c67883a 	add	r19,r17,r17
8111e33c:	980d883a 	mov	r6,r19
8111e340:	111a78c0 	call	8111a78c <_realloc_r>
8111e344:	1025883a 	mov	r18,r2
8111e348:	10002226 	beq	r2,zero,8111e3d4 <__submore+0xd4>
8111e34c:	1469883a 	add	r20,r2,r17
8111e350:	880d883a 	mov	r6,r17
8111e354:	100b883a 	mov	r5,r2
8111e358:	a009883a 	mov	r4,r20
8111e35c:	110f61c0 	call	8110f61c <memcpy>
8111e360:	0005883a 	mov	r2,zero
8111e364:	85000015 	stw	r20,0(r16)
8111e368:	84800c15 	stw	r18,48(r16)
8111e36c:	84c00d15 	stw	r19,52(r16)
8111e370:	dfc00517 	ldw	ra,20(sp)
8111e374:	dd000417 	ldw	r20,16(sp)
8111e378:	dcc00317 	ldw	r19,12(sp)
8111e37c:	dc800217 	ldw	r18,8(sp)
8111e380:	dc400117 	ldw	r17,4(sp)
8111e384:	dc000017 	ldw	r16,0(sp)
8111e388:	dec00604 	addi	sp,sp,24
8111e38c:	f800283a 	ret
8111e390:	04410004 	movi	r17,1024
8111e394:	880b883a 	mov	r5,r17
8111e398:	110ee080 	call	8110ee08 <_malloc_r>
8111e39c:	1007883a 	mov	r3,r2
8111e3a0:	10000c26 	beq	r2,zero,8111e3d4 <__submore+0xd4>
8111e3a4:	80801083 	ldbu	r2,66(r16)
8111e3a8:	80c00c15 	stw	r3,48(r16)
8111e3ac:	84400d15 	stw	r17,52(r16)
8111e3b0:	1880ffc5 	stb	r2,1023(r3)
8111e3b4:	81401043 	ldbu	r5,65(r16)
8111e3b8:	1900ff44 	addi	r4,r3,1021
8111e3bc:	0005883a 	mov	r2,zero
8111e3c0:	1940ff85 	stb	r5,1022(r3)
8111e3c4:	81401003 	ldbu	r5,64(r16)
8111e3c8:	1940ff45 	stb	r5,1021(r3)
8111e3cc:	81000015 	stw	r4,0(r16)
8111e3d0:	003fe706 	br	8111e370 <__reset+0xfb0fe370>
8111e3d4:	00bfffc4 	movi	r2,-1
8111e3d8:	003fe506 	br	8111e370 <__reset+0xfb0fe370>

8111e3dc <_ungetc_r>:
8111e3dc:	00bfffc4 	movi	r2,-1
8111e3e0:	28806326 	beq	r5,r2,8111e570 <_ungetc_r+0x194>
8111e3e4:	defffb04 	addi	sp,sp,-20
8111e3e8:	de00012e 	bgeu	sp,et,8111e3f0 <_ungetc_r+0x14>
8111e3ec:	003b68fa 	trap	3
8111e3f0:	dcc00315 	stw	r19,12(sp)
8111e3f4:	dc400115 	stw	r17,4(sp)
8111e3f8:	dc000015 	stw	r16,0(sp)
8111e3fc:	dfc00415 	stw	ra,16(sp)
8111e400:	dc800215 	stw	r18,8(sp)
8111e404:	2023883a 	mov	r17,r4
8111e408:	3021883a 	mov	r16,r6
8111e40c:	2827883a 	mov	r19,r5
8111e410:	20000226 	beq	r4,zero,8111e41c <_ungetc_r+0x40>
8111e414:	20800e17 	ldw	r2,56(r4)
8111e418:	10002e26 	beq	r2,zero,8111e4d4 <_ungetc_r+0xf8>
8111e41c:	80c0030b 	ldhu	r3,12(r16)
8111e420:	1888000c 	andi	r2,r3,8192
8111e424:	1000051e 	bne	r2,zero,8111e43c <_ungetc_r+0x60>
8111e428:	81001917 	ldw	r4,100(r16)
8111e42c:	00b7ffc4 	movi	r2,-8193
8111e430:	18c80014 	ori	r3,r3,8192
8111e434:	2084703a 	and	r2,r4,r2
8111e438:	80801915 	stw	r2,100(r16)
8111e43c:	00bff7c4 	movi	r2,-33
8111e440:	1884703a 	and	r2,r3,r2
8111e444:	8080030d 	sth	r2,12(r16)
8111e448:	1900010c 	andi	r4,r3,4
8111e44c:	2000061e 	bne	r4,zero,8111e468 <_ungetc_r+0x8c>
8111e450:	1900040c 	andi	r4,r3,16
8111e454:	20001d26 	beq	r4,zero,8111e4cc <_ungetc_r+0xf0>
8111e458:	18c0020c 	andi	r3,r3,8
8111e45c:	1800331e 	bne	r3,zero,8111e52c <_ungetc_r+0x150>
8111e460:	10800114 	ori	r2,r2,4
8111e464:	8080030d 	sth	r2,12(r16)
8111e468:	80800c17 	ldw	r2,48(r16)
8111e46c:	9c803fcc 	andi	r18,r19,255
8111e470:	10001a26 	beq	r2,zero,8111e4dc <_ungetc_r+0x100>
8111e474:	80c00117 	ldw	r3,4(r16)
8111e478:	80800d17 	ldw	r2,52(r16)
8111e47c:	18800f0e 	bge	r3,r2,8111e4bc <_ungetc_r+0xe0>
8111e480:	80c00017 	ldw	r3,0(r16)
8111e484:	9005883a 	mov	r2,r18
8111e488:	193fffc4 	addi	r4,r3,-1
8111e48c:	81000015 	stw	r4,0(r16)
8111e490:	1cffffc5 	stb	r19,-1(r3)
8111e494:	80c00117 	ldw	r3,4(r16)
8111e498:	18c00044 	addi	r3,r3,1
8111e49c:	80c00115 	stw	r3,4(r16)
8111e4a0:	dfc00417 	ldw	ra,16(sp)
8111e4a4:	dcc00317 	ldw	r19,12(sp)
8111e4a8:	dc800217 	ldw	r18,8(sp)
8111e4ac:	dc400117 	ldw	r17,4(sp)
8111e4b0:	dc000017 	ldw	r16,0(sp)
8111e4b4:	dec00504 	addi	sp,sp,20
8111e4b8:	f800283a 	ret
8111e4bc:	800b883a 	mov	r5,r16
8111e4c0:	8809883a 	mov	r4,r17
8111e4c4:	111e3000 	call	8111e300 <__submore>
8111e4c8:	103fed26 	beq	r2,zero,8111e480 <__reset+0xfb0fe480>
8111e4cc:	00bfffc4 	movi	r2,-1
8111e4d0:	003ff306 	br	8111e4a0 <__reset+0xfb0fe4a0>
8111e4d4:	11180e80 	call	811180e8 <__sinit>
8111e4d8:	003fd006 	br	8111e41c <__reset+0xfb0fe41c>
8111e4dc:	80c00417 	ldw	r3,16(r16)
8111e4e0:	80800017 	ldw	r2,0(r16)
8111e4e4:	18000326 	beq	r3,zero,8111e4f4 <_ungetc_r+0x118>
8111e4e8:	1880022e 	bgeu	r3,r2,8111e4f4 <_ungetc_r+0x118>
8111e4ec:	10ffffc3 	ldbu	r3,-1(r2)
8111e4f0:	90c01826 	beq	r18,r3,8111e554 <_ungetc_r+0x178>
8111e4f4:	81400117 	ldw	r5,4(r16)
8111e4f8:	80800e15 	stw	r2,56(r16)
8111e4fc:	008000c4 	movi	r2,3
8111e500:	81001004 	addi	r4,r16,64
8111e504:	80c01084 	addi	r3,r16,66
8111e508:	80800d15 	stw	r2,52(r16)
8111e50c:	00800044 	movi	r2,1
8111e510:	80800115 	stw	r2,4(r16)
8111e514:	81400f15 	stw	r5,60(r16)
8111e518:	81000c15 	stw	r4,48(r16)
8111e51c:	84c01085 	stb	r19,66(r16)
8111e520:	80c00015 	stw	r3,0(r16)
8111e524:	9005883a 	mov	r2,r18
8111e528:	003fdd06 	br	8111e4a0 <__reset+0xfb0fe4a0>
8111e52c:	800b883a 	mov	r5,r16
8111e530:	8809883a 	mov	r4,r17
8111e534:	1117cec0 	call	81117cec <_fflush_r>
8111e538:	103fe41e 	bne	r2,zero,8111e4cc <__reset+0xfb0fe4cc>
8111e53c:	8080030b 	ldhu	r2,12(r16)
8111e540:	00fffdc4 	movi	r3,-9
8111e544:	80000215 	stw	zero,8(r16)
8111e548:	1884703a 	and	r2,r3,r2
8111e54c:	80000615 	stw	zero,24(r16)
8111e550:	003fc306 	br	8111e460 <__reset+0xfb0fe460>
8111e554:	80c00117 	ldw	r3,4(r16)
8111e558:	10bfffc4 	addi	r2,r2,-1
8111e55c:	80800015 	stw	r2,0(r16)
8111e560:	18800044 	addi	r2,r3,1
8111e564:	80800115 	stw	r2,4(r16)
8111e568:	9005883a 	mov	r2,r18
8111e56c:	003fcc06 	br	8111e4a0 <__reset+0xfb0fe4a0>
8111e570:	00bfffc4 	movi	r2,-1
8111e574:	f800283a 	ret

8111e578 <ungetc>:
8111e578:	00a04534 	movhi	r2,33044
8111e57c:	10b73304 	addi	r2,r2,-9012
8111e580:	280d883a 	mov	r6,r5
8111e584:	200b883a 	mov	r5,r4
8111e588:	11000017 	ldw	r4,0(r2)
8111e58c:	111e3dc1 	jmpi	8111e3dc <_ungetc_r>

8111e590 <__sprint_r.part.0>:
8111e590:	defff604 	addi	sp,sp,-40
8111e594:	de00012e 	bgeu	sp,et,8111e59c <__sprint_r.part.0+0xc>
8111e598:	003b68fa 	trap	3
8111e59c:	28801917 	ldw	r2,100(r5)
8111e5a0:	dd400515 	stw	r21,20(sp)
8111e5a4:	dfc00915 	stw	ra,36(sp)
8111e5a8:	df000815 	stw	fp,32(sp)
8111e5ac:	ddc00715 	stw	r23,28(sp)
8111e5b0:	dd800615 	stw	r22,24(sp)
8111e5b4:	dd000415 	stw	r20,16(sp)
8111e5b8:	dcc00315 	stw	r19,12(sp)
8111e5bc:	dc800215 	stw	r18,8(sp)
8111e5c0:	dc400115 	stw	r17,4(sp)
8111e5c4:	dc000015 	stw	r16,0(sp)
8111e5c8:	1088000c 	andi	r2,r2,8192
8111e5cc:	302b883a 	mov	r21,r6
8111e5d0:	10002e26 	beq	r2,zero,8111e68c <__sprint_r.part.0+0xfc>
8111e5d4:	30800217 	ldw	r2,8(r6)
8111e5d8:	35800017 	ldw	r22,0(r6)
8111e5dc:	10002926 	beq	r2,zero,8111e684 <__sprint_r.part.0+0xf4>
8111e5e0:	2827883a 	mov	r19,r5
8111e5e4:	2029883a 	mov	r20,r4
8111e5e8:	b5c00104 	addi	r23,r22,4
8111e5ec:	04bfffc4 	movi	r18,-1
8111e5f0:	bc400017 	ldw	r17,0(r23)
8111e5f4:	b4000017 	ldw	r16,0(r22)
8111e5f8:	0039883a 	mov	fp,zero
8111e5fc:	8822d0ba 	srli	r17,r17,2
8111e600:	8800031e 	bne	r17,zero,8111e610 <__sprint_r.part.0+0x80>
8111e604:	00001806 	br	8111e668 <__sprint_r.part.0+0xd8>
8111e608:	84000104 	addi	r16,r16,4
8111e60c:	8f001526 	beq	r17,fp,8111e664 <__sprint_r.part.0+0xd4>
8111e610:	81400017 	ldw	r5,0(r16)
8111e614:	980d883a 	mov	r6,r19
8111e618:	a009883a 	mov	r4,r20
8111e61c:	11200940 	call	81120094 <_fputwc_r>
8111e620:	e7000044 	addi	fp,fp,1
8111e624:	14bff81e 	bne	r2,r18,8111e608 <__reset+0xfb0fe608>
8111e628:	9005883a 	mov	r2,r18
8111e62c:	a8000215 	stw	zero,8(r21)
8111e630:	a8000115 	stw	zero,4(r21)
8111e634:	dfc00917 	ldw	ra,36(sp)
8111e638:	df000817 	ldw	fp,32(sp)
8111e63c:	ddc00717 	ldw	r23,28(sp)
8111e640:	dd800617 	ldw	r22,24(sp)
8111e644:	dd400517 	ldw	r21,20(sp)
8111e648:	dd000417 	ldw	r20,16(sp)
8111e64c:	dcc00317 	ldw	r19,12(sp)
8111e650:	dc800217 	ldw	r18,8(sp)
8111e654:	dc400117 	ldw	r17,4(sp)
8111e658:	dc000017 	ldw	r16,0(sp)
8111e65c:	dec00a04 	addi	sp,sp,40
8111e660:	f800283a 	ret
8111e664:	a8800217 	ldw	r2,8(r21)
8111e668:	8c63883a 	add	r17,r17,r17
8111e66c:	8c63883a 	add	r17,r17,r17
8111e670:	1445c83a 	sub	r2,r2,r17
8111e674:	a8800215 	stw	r2,8(r21)
8111e678:	b5800204 	addi	r22,r22,8
8111e67c:	bdc00204 	addi	r23,r23,8
8111e680:	103fdb1e 	bne	r2,zero,8111e5f0 <__reset+0xfb0fe5f0>
8111e684:	0005883a 	mov	r2,zero
8111e688:	003fe806 	br	8111e62c <__reset+0xfb0fe62c>
8111e68c:	11188980 	call	81118898 <__sfvwrite_r>
8111e690:	003fe606 	br	8111e62c <__reset+0xfb0fe62c>

8111e694 <__sprint_r>:
8111e694:	30c00217 	ldw	r3,8(r6)
8111e698:	18000126 	beq	r3,zero,8111e6a0 <__sprint_r+0xc>
8111e69c:	111e5901 	jmpi	8111e590 <__sprint_r.part.0>
8111e6a0:	30000115 	stw	zero,4(r6)
8111e6a4:	0005883a 	mov	r2,zero
8111e6a8:	f800283a 	ret

8111e6ac <___vfiprintf_internal_r>:
8111e6ac:	deffc904 	addi	sp,sp,-220
8111e6b0:	de00012e 	bgeu	sp,et,8111e6b8 <___vfiprintf_internal_r+0xc>
8111e6b4:	003b68fa 	trap	3
8111e6b8:	df003515 	stw	fp,212(sp)
8111e6bc:	dd003115 	stw	r20,196(sp)
8111e6c0:	dfc03615 	stw	ra,216(sp)
8111e6c4:	ddc03415 	stw	r23,208(sp)
8111e6c8:	dd803315 	stw	r22,204(sp)
8111e6cc:	dd403215 	stw	r21,200(sp)
8111e6d0:	dcc03015 	stw	r19,192(sp)
8111e6d4:	dc802f15 	stw	r18,188(sp)
8111e6d8:	dc402e15 	stw	r17,184(sp)
8111e6dc:	dc002d15 	stw	r16,180(sp)
8111e6e0:	d9002015 	stw	r4,128(sp)
8111e6e4:	d9c02215 	stw	r7,136(sp)
8111e6e8:	2829883a 	mov	r20,r5
8111e6ec:	3039883a 	mov	fp,r6
8111e6f0:	20000226 	beq	r4,zero,8111e6fc <___vfiprintf_internal_r+0x50>
8111e6f4:	20800e17 	ldw	r2,56(r4)
8111e6f8:	1000cf26 	beq	r2,zero,8111ea38 <___vfiprintf_internal_r+0x38c>
8111e6fc:	a080030b 	ldhu	r2,12(r20)
8111e700:	10c8000c 	andi	r3,r2,8192
8111e704:	1800061e 	bne	r3,zero,8111e720 <___vfiprintf_internal_r+0x74>
8111e708:	a1001917 	ldw	r4,100(r20)
8111e70c:	00f7ffc4 	movi	r3,-8193
8111e710:	10880014 	ori	r2,r2,8192
8111e714:	20c6703a 	and	r3,r4,r3
8111e718:	a080030d 	sth	r2,12(r20)
8111e71c:	a0c01915 	stw	r3,100(r20)
8111e720:	10c0020c 	andi	r3,r2,8
8111e724:	1800a926 	beq	r3,zero,8111e9cc <___vfiprintf_internal_r+0x320>
8111e728:	a0c00417 	ldw	r3,16(r20)
8111e72c:	1800a726 	beq	r3,zero,8111e9cc <___vfiprintf_internal_r+0x320>
8111e730:	1080068c 	andi	r2,r2,26
8111e734:	00c00284 	movi	r3,10
8111e738:	10c0ac26 	beq	r2,r3,8111e9ec <___vfiprintf_internal_r+0x340>
8111e73c:	da801a04 	addi	r10,sp,104
8111e740:	da801e15 	stw	r10,120(sp)
8111e744:	d8801e17 	ldw	r2,120(sp)
8111e748:	da8019c4 	addi	r10,sp,103
8111e74c:	05a04534 	movhi	r22,33044
8111e750:	05e04534 	movhi	r23,33044
8111e754:	da801f15 	stw	r10,124(sp)
8111e758:	1295c83a 	sub	r10,r2,r10
8111e75c:	b5aec104 	addi	r22,r22,-17660
8111e760:	bdeebd04 	addi	r23,r23,-17676
8111e764:	dec01a15 	stw	sp,104(sp)
8111e768:	d8001c15 	stw	zero,112(sp)
8111e76c:	d8001b15 	stw	zero,108(sp)
8111e770:	d8002615 	stw	zero,152(sp)
8111e774:	d8002315 	stw	zero,140(sp)
8111e778:	da802715 	stw	r10,156(sp)
8111e77c:	d811883a 	mov	r8,sp
8111e780:	dd002115 	stw	r20,132(sp)
8111e784:	e021883a 	mov	r16,fp
8111e788:	80800007 	ldb	r2,0(r16)
8111e78c:	1003ea26 	beq	r2,zero,8111f738 <___vfiprintf_internal_r+0x108c>
8111e790:	00c00944 	movi	r3,37
8111e794:	8025883a 	mov	r18,r16
8111e798:	10c0021e 	bne	r2,r3,8111e7a4 <___vfiprintf_internal_r+0xf8>
8111e79c:	00001606 	br	8111e7f8 <___vfiprintf_internal_r+0x14c>
8111e7a0:	10c00326 	beq	r2,r3,8111e7b0 <___vfiprintf_internal_r+0x104>
8111e7a4:	94800044 	addi	r18,r18,1
8111e7a8:	90800007 	ldb	r2,0(r18)
8111e7ac:	103ffc1e 	bne	r2,zero,8111e7a0 <__reset+0xfb0fe7a0>
8111e7b0:	9423c83a 	sub	r17,r18,r16
8111e7b4:	88001026 	beq	r17,zero,8111e7f8 <___vfiprintf_internal_r+0x14c>
8111e7b8:	d8c01c17 	ldw	r3,112(sp)
8111e7bc:	d8801b17 	ldw	r2,108(sp)
8111e7c0:	44000015 	stw	r16,0(r8)
8111e7c4:	88c7883a 	add	r3,r17,r3
8111e7c8:	10800044 	addi	r2,r2,1
8111e7cc:	44400115 	stw	r17,4(r8)
8111e7d0:	d8c01c15 	stw	r3,112(sp)
8111e7d4:	d8801b15 	stw	r2,108(sp)
8111e7d8:	010001c4 	movi	r4,7
8111e7dc:	2080760e 	bge	r4,r2,8111e9b8 <___vfiprintf_internal_r+0x30c>
8111e7e0:	1803821e 	bne	r3,zero,8111f5ec <___vfiprintf_internal_r+0xf40>
8111e7e4:	da802317 	ldw	r10,140(sp)
8111e7e8:	d8001b15 	stw	zero,108(sp)
8111e7ec:	d811883a 	mov	r8,sp
8111e7f0:	5455883a 	add	r10,r10,r17
8111e7f4:	da802315 	stw	r10,140(sp)
8111e7f8:	90800007 	ldb	r2,0(r18)
8111e7fc:	10044626 	beq	r2,zero,8111f918 <___vfiprintf_internal_r+0x126c>
8111e800:	90c00047 	ldb	r3,1(r18)
8111e804:	94000044 	addi	r16,r18,1
8111e808:	d8001d85 	stb	zero,118(sp)
8111e80c:	0009883a 	mov	r4,zero
8111e810:	000f883a 	mov	r7,zero
8111e814:	027fffc4 	movi	r9,-1
8111e818:	0023883a 	mov	r17,zero
8111e81c:	0029883a 	mov	r20,zero
8111e820:	01401604 	movi	r5,88
8111e824:	01800244 	movi	r6,9
8111e828:	03400a84 	movi	r13,42
8111e82c:	03001b04 	movi	r12,108
8111e830:	84000044 	addi	r16,r16,1
8111e834:	18bff804 	addi	r2,r3,-32
8111e838:	28827336 	bltu	r5,r2,8111f208 <___vfiprintf_internal_r+0xb5c>
8111e83c:	100490ba 	slli	r2,r2,2
8111e840:	02a044b4 	movhi	r10,33042
8111e844:	52ba1504 	addi	r10,r10,-6060
8111e848:	1285883a 	add	r2,r2,r10
8111e84c:	10800017 	ldw	r2,0(r2)
8111e850:	1000683a 	jmp	r2
8111e854:	8111ef3c 	xorhi	r4,r16,18364
8111e858:	8111f208 	cmpgei	r4,r16,18376
8111e85c:	8111f208 	cmpgei	r4,r16,18376
8111e860:	8111ef5c 	xori	r4,r16,18365
8111e864:	8111f208 	cmpgei	r4,r16,18376
8111e868:	8111f208 	cmpgei	r4,r16,18376
8111e86c:	8111f208 	cmpgei	r4,r16,18376
8111e870:	8111f208 	cmpgei	r4,r16,18376
8111e874:	8111f208 	cmpgei	r4,r16,18376
8111e878:	8111f208 	cmpgei	r4,r16,18376
8111e87c:	8111f144 	addi	r4,r16,18373
8111e880:	8111f160 	cmpeqi	r4,r16,18373
8111e884:	8111f208 	cmpgei	r4,r16,18376
8111e888:	8111ea48 	cmpgei	r4,r16,18345
8111e88c:	8111f170 	cmpltui	r4,r16,18373
8111e890:	8111f208 	cmpgei	r4,r16,18376
8111e894:	8111ef68 	cmpgeui	r4,r16,18365
8111e898:	8111ef74 	orhi	r4,r16,18365
8111e89c:	8111ef74 	orhi	r4,r16,18365
8111e8a0:	8111ef74 	orhi	r4,r16,18365
8111e8a4:	8111ef74 	orhi	r4,r16,18365
8111e8a8:	8111ef74 	orhi	r4,r16,18365
8111e8ac:	8111ef74 	orhi	r4,r16,18365
8111e8b0:	8111ef74 	orhi	r4,r16,18365
8111e8b4:	8111ef74 	orhi	r4,r16,18365
8111e8b8:	8111ef74 	orhi	r4,r16,18365
8111e8bc:	8111f208 	cmpgei	r4,r16,18376
8111e8c0:	8111f208 	cmpgei	r4,r16,18376
8111e8c4:	8111f208 	cmpgei	r4,r16,18376
8111e8c8:	8111f208 	cmpgei	r4,r16,18376
8111e8cc:	8111f208 	cmpgei	r4,r16,18376
8111e8d0:	8111f208 	cmpgei	r4,r16,18376
8111e8d4:	8111f208 	cmpgei	r4,r16,18376
8111e8d8:	8111f208 	cmpgei	r4,r16,18376
8111e8dc:	8111f208 	cmpgei	r4,r16,18376
8111e8e0:	8111f208 	cmpgei	r4,r16,18376
8111e8e4:	8111efa0 	cmpeqi	r4,r16,18366
8111e8e8:	8111f208 	cmpgei	r4,r16,18376
8111e8ec:	8111f208 	cmpgei	r4,r16,18376
8111e8f0:	8111f208 	cmpgei	r4,r16,18376
8111e8f4:	8111f208 	cmpgei	r4,r16,18376
8111e8f8:	8111f208 	cmpgei	r4,r16,18376
8111e8fc:	8111f208 	cmpgei	r4,r16,18376
8111e900:	8111f208 	cmpgei	r4,r16,18376
8111e904:	8111f208 	cmpgei	r4,r16,18376
8111e908:	8111f208 	cmpgei	r4,r16,18376
8111e90c:	8111f208 	cmpgei	r4,r16,18376
8111e910:	8111efd8 	cmpnei	r4,r16,18367
8111e914:	8111f208 	cmpgei	r4,r16,18376
8111e918:	8111f208 	cmpgei	r4,r16,18376
8111e91c:	8111f208 	cmpgei	r4,r16,18376
8111e920:	8111f208 	cmpgei	r4,r16,18376
8111e924:	8111f208 	cmpgei	r4,r16,18376
8111e928:	8111f030 	cmpltui	r4,r16,18368
8111e92c:	8111f208 	cmpgei	r4,r16,18376
8111e930:	8111f208 	cmpgei	r4,r16,18376
8111e934:	8111f0a0 	cmpeqi	r4,r16,18370
8111e938:	8111f208 	cmpgei	r4,r16,18376
8111e93c:	8111f208 	cmpgei	r4,r16,18376
8111e940:	8111f208 	cmpgei	r4,r16,18376
8111e944:	8111f208 	cmpgei	r4,r16,18376
8111e948:	8111f208 	cmpgei	r4,r16,18376
8111e94c:	8111f208 	cmpgei	r4,r16,18376
8111e950:	8111f208 	cmpgei	r4,r16,18376
8111e954:	8111f208 	cmpgei	r4,r16,18376
8111e958:	8111f208 	cmpgei	r4,r16,18376
8111e95c:	8111f208 	cmpgei	r4,r16,18376
8111e960:	8111ee4c 	andi	r4,r16,18361
8111e964:	8111ee78 	rdprs	r4,r16,18361
8111e968:	8111f208 	cmpgei	r4,r16,18376
8111e96c:	8111f208 	cmpgei	r4,r16,18376
8111e970:	8111f208 	cmpgei	r4,r16,18376
8111e974:	8111f1b0 	cmpltui	r4,r16,18374
8111e978:	8111ee78 	rdprs	r4,r16,18361
8111e97c:	8111f208 	cmpgei	r4,r16,18376
8111e980:	8111f208 	cmpgei	r4,r16,18376
8111e984:	8111ed0c 	andi	r4,r16,18356
8111e988:	8111f208 	cmpgei	r4,r16,18376
8111e98c:	8111ed1c 	xori	r4,r16,18356
8111e990:	8111ed58 	cmpnei	r4,r16,18357
8111e994:	8111ea54 	ori	r4,r16,18345
8111e998:	8111ed00 	call	88111ed0 <__reset+0x20f1ed0>
8111e99c:	8111f208 	cmpgei	r4,r16,18376
8111e9a0:	8111f0dc 	xori	r4,r16,18371
8111e9a4:	8111f208 	cmpgei	r4,r16,18376
8111e9a8:	8111f134 	orhi	r4,r16,18372
8111e9ac:	8111f208 	cmpgei	r4,r16,18376
8111e9b0:	8111f208 	cmpgei	r4,r16,18376
8111e9b4:	8111edf8 	rdprs	r4,r16,18359
8111e9b8:	42000204 	addi	r8,r8,8
8111e9bc:	da802317 	ldw	r10,140(sp)
8111e9c0:	5455883a 	add	r10,r10,r17
8111e9c4:	da802315 	stw	r10,140(sp)
8111e9c8:	003f8b06 	br	8111e7f8 <__reset+0xfb0fe7f8>
8111e9cc:	d9002017 	ldw	r4,128(sp)
8111e9d0:	a00b883a 	mov	r5,r20
8111e9d4:	11160780 	call	81116078 <__swsetup_r>
8111e9d8:	1003b11e 	bne	r2,zero,8111f8a0 <___vfiprintf_internal_r+0x11f4>
8111e9dc:	a080030b 	ldhu	r2,12(r20)
8111e9e0:	00c00284 	movi	r3,10
8111e9e4:	1080068c 	andi	r2,r2,26
8111e9e8:	10ff541e 	bne	r2,r3,8111e73c <__reset+0xfb0fe73c>
8111e9ec:	a080038f 	ldh	r2,14(r20)
8111e9f0:	103f5216 	blt	r2,zero,8111e73c <__reset+0xfb0fe73c>
8111e9f4:	d9c02217 	ldw	r7,136(sp)
8111e9f8:	d9002017 	ldw	r4,128(sp)
8111e9fc:	e00d883a 	mov	r6,fp
8111ea00:	a00b883a 	mov	r5,r20
8111ea04:	111fb2c0 	call	8111fb2c <__sbprintf>
8111ea08:	dfc03617 	ldw	ra,216(sp)
8111ea0c:	df003517 	ldw	fp,212(sp)
8111ea10:	ddc03417 	ldw	r23,208(sp)
8111ea14:	dd803317 	ldw	r22,204(sp)
8111ea18:	dd403217 	ldw	r21,200(sp)
8111ea1c:	dd003117 	ldw	r20,196(sp)
8111ea20:	dcc03017 	ldw	r19,192(sp)
8111ea24:	dc802f17 	ldw	r18,188(sp)
8111ea28:	dc402e17 	ldw	r17,184(sp)
8111ea2c:	dc002d17 	ldw	r16,180(sp)
8111ea30:	dec03704 	addi	sp,sp,220
8111ea34:	f800283a 	ret
8111ea38:	11180e80 	call	811180e8 <__sinit>
8111ea3c:	003f2f06 	br	8111e6fc <__reset+0xfb0fe6fc>
8111ea40:	0463c83a 	sub	r17,zero,r17
8111ea44:	d8802215 	stw	r2,136(sp)
8111ea48:	a5000114 	ori	r20,r20,4
8111ea4c:	80c00007 	ldb	r3,0(r16)
8111ea50:	003f7706 	br	8111e830 <__reset+0xfb0fe830>
8111ea54:	00800c04 	movi	r2,48
8111ea58:	da802217 	ldw	r10,136(sp)
8111ea5c:	d8801d05 	stb	r2,116(sp)
8111ea60:	00801e04 	movi	r2,120
8111ea64:	d8801d45 	stb	r2,117(sp)
8111ea68:	d8001d85 	stb	zero,118(sp)
8111ea6c:	50c00104 	addi	r3,r10,4
8111ea70:	54800017 	ldw	r18,0(r10)
8111ea74:	0027883a 	mov	r19,zero
8111ea78:	a0800094 	ori	r2,r20,2
8111ea7c:	48030b16 	blt	r9,zero,8111f6ac <___vfiprintf_internal_r+0x1000>
8111ea80:	00bfdfc4 	movi	r2,-129
8111ea84:	a096703a 	and	r11,r20,r2
8111ea88:	d8c02215 	stw	r3,136(sp)
8111ea8c:	5d000094 	ori	r20,r11,2
8111ea90:	90032b1e 	bne	r18,zero,8111f740 <___vfiprintf_internal_r+0x1094>
8111ea94:	00a04534 	movhi	r2,33044
8111ea98:	10ae2b04 	addi	r2,r2,-18260
8111ea9c:	d8802615 	stw	r2,152(sp)
8111eaa0:	0039883a 	mov	fp,zero
8111eaa4:	48017b1e 	bne	r9,zero,8111f094 <___vfiprintf_internal_r+0x9e8>
8111eaa8:	0013883a 	mov	r9,zero
8111eaac:	0027883a 	mov	r19,zero
8111eab0:	dd401a04 	addi	r21,sp,104
8111eab4:	4825883a 	mov	r18,r9
8111eab8:	4cc0010e 	bge	r9,r19,8111eac0 <___vfiprintf_internal_r+0x414>
8111eabc:	9825883a 	mov	r18,r19
8111eac0:	e7003fcc 	andi	fp,fp,255
8111eac4:	e700201c 	xori	fp,fp,128
8111eac8:	e73fe004 	addi	fp,fp,-128
8111eacc:	e0000126 	beq	fp,zero,8111ead4 <___vfiprintf_internal_r+0x428>
8111ead0:	94800044 	addi	r18,r18,1
8111ead4:	a380008c 	andi	r14,r20,2
8111ead8:	70000126 	beq	r14,zero,8111eae0 <___vfiprintf_internal_r+0x434>
8111eadc:	94800084 	addi	r18,r18,2
8111eae0:	a700210c 	andi	fp,r20,132
8111eae4:	e001df1e 	bne	fp,zero,8111f264 <___vfiprintf_internal_r+0xbb8>
8111eae8:	8c87c83a 	sub	r3,r17,r18
8111eaec:	00c1dd0e 	bge	zero,r3,8111f264 <___vfiprintf_internal_r+0xbb8>
8111eaf0:	01c00404 	movi	r7,16
8111eaf4:	d8801c17 	ldw	r2,112(sp)
8111eaf8:	38c3ad0e 	bge	r7,r3,8111f9b0 <___vfiprintf_internal_r+0x1304>
8111eafc:	02a04534 	movhi	r10,33044
8111eb00:	52aec104 	addi	r10,r10,-17660
8111eb04:	dc002915 	stw	r16,164(sp)
8111eb08:	d9801b17 	ldw	r6,108(sp)
8111eb0c:	da802415 	stw	r10,144(sp)
8111eb10:	03c001c4 	movi	r15,7
8111eb14:	da402515 	stw	r9,148(sp)
8111eb18:	db802815 	stw	r14,160(sp)
8111eb1c:	1821883a 	mov	r16,r3
8111eb20:	00000506 	br	8111eb38 <___vfiprintf_internal_r+0x48c>
8111eb24:	31400084 	addi	r5,r6,2
8111eb28:	42000204 	addi	r8,r8,8
8111eb2c:	200d883a 	mov	r6,r4
8111eb30:	843ffc04 	addi	r16,r16,-16
8111eb34:	3c000d0e 	bge	r7,r16,8111eb6c <___vfiprintf_internal_r+0x4c0>
8111eb38:	10800404 	addi	r2,r2,16
8111eb3c:	31000044 	addi	r4,r6,1
8111eb40:	45800015 	stw	r22,0(r8)
8111eb44:	41c00115 	stw	r7,4(r8)
8111eb48:	d8801c15 	stw	r2,112(sp)
8111eb4c:	d9001b15 	stw	r4,108(sp)
8111eb50:	793ff40e 	bge	r15,r4,8111eb24 <__reset+0xfb0feb24>
8111eb54:	1001b51e 	bne	r2,zero,8111f22c <___vfiprintf_internal_r+0xb80>
8111eb58:	843ffc04 	addi	r16,r16,-16
8111eb5c:	000d883a 	mov	r6,zero
8111eb60:	01400044 	movi	r5,1
8111eb64:	d811883a 	mov	r8,sp
8111eb68:	3c3ff316 	blt	r7,r16,8111eb38 <__reset+0xfb0feb38>
8111eb6c:	8007883a 	mov	r3,r16
8111eb70:	da402517 	ldw	r9,148(sp)
8111eb74:	db802817 	ldw	r14,160(sp)
8111eb78:	dc002917 	ldw	r16,164(sp)
8111eb7c:	da802417 	ldw	r10,144(sp)
8111eb80:	1885883a 	add	r2,r3,r2
8111eb84:	40c00115 	stw	r3,4(r8)
8111eb88:	42800015 	stw	r10,0(r8)
8111eb8c:	d8801c15 	stw	r2,112(sp)
8111eb90:	d9401b15 	stw	r5,108(sp)
8111eb94:	00c001c4 	movi	r3,7
8111eb98:	19426016 	blt	r3,r5,8111f51c <___vfiprintf_internal_r+0xe70>
8111eb9c:	d8c01d87 	ldb	r3,118(sp)
8111eba0:	42000204 	addi	r8,r8,8
8111eba4:	29000044 	addi	r4,r5,1
8111eba8:	1801b31e 	bne	r3,zero,8111f278 <___vfiprintf_internal_r+0xbcc>
8111ebac:	7001c026 	beq	r14,zero,8111f2b0 <___vfiprintf_internal_r+0xc04>
8111ebb0:	d8c01d04 	addi	r3,sp,116
8111ebb4:	10800084 	addi	r2,r2,2
8111ebb8:	40c00015 	stw	r3,0(r8)
8111ebbc:	00c00084 	movi	r3,2
8111ebc0:	40c00115 	stw	r3,4(r8)
8111ebc4:	d8801c15 	stw	r2,112(sp)
8111ebc8:	d9001b15 	stw	r4,108(sp)
8111ebcc:	00c001c4 	movi	r3,7
8111ebd0:	1902650e 	bge	r3,r4,8111f568 <___vfiprintf_internal_r+0xebc>
8111ebd4:	10029a1e 	bne	r2,zero,8111f640 <___vfiprintf_internal_r+0xf94>
8111ebd8:	00c02004 	movi	r3,128
8111ebdc:	01000044 	movi	r4,1
8111ebe0:	000b883a 	mov	r5,zero
8111ebe4:	d811883a 	mov	r8,sp
8111ebe8:	e0c1b31e 	bne	fp,r3,8111f2b8 <___vfiprintf_internal_r+0xc0c>
8111ebec:	8cb9c83a 	sub	fp,r17,r18
8111ebf0:	0701b10e 	bge	zero,fp,8111f2b8 <___vfiprintf_internal_r+0xc0c>
8111ebf4:	01c00404 	movi	r7,16
8111ebf8:	3f03890e 	bge	r7,fp,8111fa20 <___vfiprintf_internal_r+0x1374>
8111ebfc:	00e04534 	movhi	r3,33044
8111ec00:	18eebd04 	addi	r3,r3,-17676
8111ec04:	d8c02415 	stw	r3,144(sp)
8111ec08:	8007883a 	mov	r3,r16
8111ec0c:	034001c4 	movi	r13,7
8111ec10:	e021883a 	mov	r16,fp
8111ec14:	da402515 	stw	r9,148(sp)
8111ec18:	1839883a 	mov	fp,r3
8111ec1c:	00000506 	br	8111ec34 <___vfiprintf_internal_r+0x588>
8111ec20:	29800084 	addi	r6,r5,2
8111ec24:	42000204 	addi	r8,r8,8
8111ec28:	180b883a 	mov	r5,r3
8111ec2c:	843ffc04 	addi	r16,r16,-16
8111ec30:	3c000d0e 	bge	r7,r16,8111ec68 <___vfiprintf_internal_r+0x5bc>
8111ec34:	10800404 	addi	r2,r2,16
8111ec38:	28c00044 	addi	r3,r5,1
8111ec3c:	45c00015 	stw	r23,0(r8)
8111ec40:	41c00115 	stw	r7,4(r8)
8111ec44:	d8801c15 	stw	r2,112(sp)
8111ec48:	d8c01b15 	stw	r3,108(sp)
8111ec4c:	68fff40e 	bge	r13,r3,8111ec20 <__reset+0xfb0fec20>
8111ec50:	1002241e 	bne	r2,zero,8111f4e4 <___vfiprintf_internal_r+0xe38>
8111ec54:	843ffc04 	addi	r16,r16,-16
8111ec58:	01800044 	movi	r6,1
8111ec5c:	000b883a 	mov	r5,zero
8111ec60:	d811883a 	mov	r8,sp
8111ec64:	3c3ff316 	blt	r7,r16,8111ec34 <__reset+0xfb0fec34>
8111ec68:	da402517 	ldw	r9,148(sp)
8111ec6c:	e007883a 	mov	r3,fp
8111ec70:	8039883a 	mov	fp,r16
8111ec74:	1821883a 	mov	r16,r3
8111ec78:	d8c02417 	ldw	r3,144(sp)
8111ec7c:	1705883a 	add	r2,r2,fp
8111ec80:	47000115 	stw	fp,4(r8)
8111ec84:	40c00015 	stw	r3,0(r8)
8111ec88:	d8801c15 	stw	r2,112(sp)
8111ec8c:	d9801b15 	stw	r6,108(sp)
8111ec90:	00c001c4 	movi	r3,7
8111ec94:	19827616 	blt	r3,r6,8111f670 <___vfiprintf_internal_r+0xfc4>
8111ec98:	4cf9c83a 	sub	fp,r9,r19
8111ec9c:	42000204 	addi	r8,r8,8
8111eca0:	31000044 	addi	r4,r6,1
8111eca4:	300b883a 	mov	r5,r6
8111eca8:	07018516 	blt	zero,fp,8111f2c0 <___vfiprintf_internal_r+0xc14>
8111ecac:	9885883a 	add	r2,r19,r2
8111ecb0:	45400015 	stw	r21,0(r8)
8111ecb4:	44c00115 	stw	r19,4(r8)
8111ecb8:	d8801c15 	stw	r2,112(sp)
8111ecbc:	d9001b15 	stw	r4,108(sp)
8111ecc0:	00c001c4 	movi	r3,7
8111ecc4:	1901dd0e 	bge	r3,r4,8111f43c <___vfiprintf_internal_r+0xd90>
8111ecc8:	1002401e 	bne	r2,zero,8111f5cc <___vfiprintf_internal_r+0xf20>
8111eccc:	d8001b15 	stw	zero,108(sp)
8111ecd0:	a2c0010c 	andi	r11,r20,4
8111ecd4:	58000226 	beq	r11,zero,8111ece0 <___vfiprintf_internal_r+0x634>
8111ecd8:	8ca7c83a 	sub	r19,r17,r18
8111ecdc:	04c2f216 	blt	zero,r19,8111f8a8 <___vfiprintf_internal_r+0x11fc>
8111ece0:	8c80010e 	bge	r17,r18,8111ece8 <___vfiprintf_internal_r+0x63c>
8111ece4:	9023883a 	mov	r17,r18
8111ece8:	da802317 	ldw	r10,140(sp)
8111ecec:	5455883a 	add	r10,r10,r17
8111ecf0:	da802315 	stw	r10,140(sp)
8111ecf4:	d8001b15 	stw	zero,108(sp)
8111ecf8:	d811883a 	mov	r8,sp
8111ecfc:	003ea206 	br	8111e788 <__reset+0xfb0fe788>
8111ed00:	a5000814 	ori	r20,r20,32
8111ed04:	80c00007 	ldb	r3,0(r16)
8111ed08:	003ec906 	br	8111e830 <__reset+0xfb0fe830>
8111ed0c:	80c00007 	ldb	r3,0(r16)
8111ed10:	1b030926 	beq	r3,r12,8111f938 <___vfiprintf_internal_r+0x128c>
8111ed14:	a5000414 	ori	r20,r20,16
8111ed18:	003ec506 	br	8111e830 <__reset+0xfb0fe830>
8111ed1c:	21003fcc 	andi	r4,r4,255
8111ed20:	20035e1e 	bne	r4,zero,8111fa9c <___vfiprintf_internal_r+0x13f0>
8111ed24:	a080080c 	andi	r2,r20,32
8111ed28:	1002a526 	beq	r2,zero,8111f7c0 <___vfiprintf_internal_r+0x1114>
8111ed2c:	da802217 	ldw	r10,136(sp)
8111ed30:	50800017 	ldw	r2,0(r10)
8111ed34:	da802317 	ldw	r10,140(sp)
8111ed38:	5007d7fa 	srai	r3,r10,31
8111ed3c:	da802217 	ldw	r10,136(sp)
8111ed40:	10c00115 	stw	r3,4(r2)
8111ed44:	52800104 	addi	r10,r10,4
8111ed48:	da802215 	stw	r10,136(sp)
8111ed4c:	da802317 	ldw	r10,140(sp)
8111ed50:	12800015 	stw	r10,0(r2)
8111ed54:	003e8c06 	br	8111e788 <__reset+0xfb0fe788>
8111ed58:	21003fcc 	andi	r4,r4,255
8111ed5c:	2003511e 	bne	r4,zero,8111faa4 <___vfiprintf_internal_r+0x13f8>
8111ed60:	a080080c 	andi	r2,r20,32
8111ed64:	1000a126 	beq	r2,zero,8111efec <___vfiprintf_internal_r+0x940>
8111ed68:	da802217 	ldw	r10,136(sp)
8111ed6c:	d8001d85 	stb	zero,118(sp)
8111ed70:	50800204 	addi	r2,r10,8
8111ed74:	54800017 	ldw	r18,0(r10)
8111ed78:	54c00117 	ldw	r19,4(r10)
8111ed7c:	4802b416 	blt	r9,zero,8111f850 <___vfiprintf_internal_r+0x11a4>
8111ed80:	013fdfc4 	movi	r4,-129
8111ed84:	94c6b03a 	or	r3,r18,r19
8111ed88:	d8802215 	stw	r2,136(sp)
8111ed8c:	a128703a 	and	r20,r20,r4
8111ed90:	1800a226 	beq	r3,zero,8111f01c <___vfiprintf_internal_r+0x970>
8111ed94:	0039883a 	mov	fp,zero
8111ed98:	dd401a04 	addi	r21,sp,104
8111ed9c:	9006d0fa 	srli	r3,r18,3
8111eda0:	9808977a 	slli	r4,r19,29
8111eda4:	9826d0fa 	srli	r19,r19,3
8111eda8:	948001cc 	andi	r18,r18,7
8111edac:	90800c04 	addi	r2,r18,48
8111edb0:	ad7fffc4 	addi	r21,r21,-1
8111edb4:	20e4b03a 	or	r18,r4,r3
8111edb8:	a8800005 	stb	r2,0(r21)
8111edbc:	94c6b03a 	or	r3,r18,r19
8111edc0:	183ff61e 	bne	r3,zero,8111ed9c <__reset+0xfb0fed9c>
8111edc4:	a0c0004c 	andi	r3,r20,1
8111edc8:	18005926 	beq	r3,zero,8111ef30 <___vfiprintf_internal_r+0x884>
8111edcc:	10803fcc 	andi	r2,r2,255
8111edd0:	1080201c 	xori	r2,r2,128
8111edd4:	10bfe004 	addi	r2,r2,-128
8111edd8:	00c00c04 	movi	r3,48
8111eddc:	10c05426 	beq	r2,r3,8111ef30 <___vfiprintf_internal_r+0x884>
8111ede0:	da801e17 	ldw	r10,120(sp)
8111ede4:	a8bfffc4 	addi	r2,r21,-1
8111ede8:	a8ffffc5 	stb	r3,-1(r21)
8111edec:	50a7c83a 	sub	r19,r10,r2
8111edf0:	102b883a 	mov	r21,r2
8111edf4:	003f2f06 	br	8111eab4 <__reset+0xfb0feab4>
8111edf8:	21003fcc 	andi	r4,r4,255
8111edfc:	2003421e 	bne	r4,zero,8111fb08 <___vfiprintf_internal_r+0x145c>
8111ee00:	00a04534 	movhi	r2,33044
8111ee04:	10ae2b04 	addi	r2,r2,-18260
8111ee08:	d8802615 	stw	r2,152(sp)
8111ee0c:	a080080c 	andi	r2,r20,32
8111ee10:	1000aa26 	beq	r2,zero,8111f0bc <___vfiprintf_internal_r+0xa10>
8111ee14:	da802217 	ldw	r10,136(sp)
8111ee18:	54800017 	ldw	r18,0(r10)
8111ee1c:	54c00117 	ldw	r19,4(r10)
8111ee20:	52800204 	addi	r10,r10,8
8111ee24:	da802215 	stw	r10,136(sp)
8111ee28:	a080004c 	andi	r2,r20,1
8111ee2c:	1001d226 	beq	r2,zero,8111f578 <___vfiprintf_internal_r+0xecc>
8111ee30:	94c4b03a 	or	r2,r18,r19
8111ee34:	1002351e 	bne	r2,zero,8111f70c <___vfiprintf_internal_r+0x1060>
8111ee38:	d8001d85 	stb	zero,118(sp)
8111ee3c:	48022216 	blt	r9,zero,8111f6c8 <___vfiprintf_internal_r+0x101c>
8111ee40:	00bfdfc4 	movi	r2,-129
8111ee44:	a0a8703a 	and	r20,r20,r2
8111ee48:	003f1506 	br	8111eaa0 <__reset+0xfb0feaa0>
8111ee4c:	da802217 	ldw	r10,136(sp)
8111ee50:	04800044 	movi	r18,1
8111ee54:	d8001d85 	stb	zero,118(sp)
8111ee58:	50800017 	ldw	r2,0(r10)
8111ee5c:	52800104 	addi	r10,r10,4
8111ee60:	da802215 	stw	r10,136(sp)
8111ee64:	d8801005 	stb	r2,64(sp)
8111ee68:	9027883a 	mov	r19,r18
8111ee6c:	dd401004 	addi	r21,sp,64
8111ee70:	0013883a 	mov	r9,zero
8111ee74:	003f1706 	br	8111ead4 <__reset+0xfb0fead4>
8111ee78:	21003fcc 	andi	r4,r4,255
8111ee7c:	2003201e 	bne	r4,zero,8111fb00 <___vfiprintf_internal_r+0x1454>
8111ee80:	a080080c 	andi	r2,r20,32
8111ee84:	10004b26 	beq	r2,zero,8111efb4 <___vfiprintf_internal_r+0x908>
8111ee88:	da802217 	ldw	r10,136(sp)
8111ee8c:	50800117 	ldw	r2,4(r10)
8111ee90:	54800017 	ldw	r18,0(r10)
8111ee94:	52800204 	addi	r10,r10,8
8111ee98:	da802215 	stw	r10,136(sp)
8111ee9c:	1027883a 	mov	r19,r2
8111eea0:	10022c16 	blt	r2,zero,8111f754 <___vfiprintf_internal_r+0x10a8>
8111eea4:	df001d83 	ldbu	fp,118(sp)
8111eea8:	48007216 	blt	r9,zero,8111f074 <___vfiprintf_internal_r+0x9c8>
8111eeac:	00ffdfc4 	movi	r3,-129
8111eeb0:	94c4b03a 	or	r2,r18,r19
8111eeb4:	a0e8703a 	and	r20,r20,r3
8111eeb8:	1000cc26 	beq	r2,zero,8111f1ec <___vfiprintf_internal_r+0xb40>
8111eebc:	98021026 	beq	r19,zero,8111f700 <___vfiprintf_internal_r+0x1054>
8111eec0:	dc402415 	stw	r17,144(sp)
8111eec4:	dc002515 	stw	r16,148(sp)
8111eec8:	9823883a 	mov	r17,r19
8111eecc:	9021883a 	mov	r16,r18
8111eed0:	dd401a04 	addi	r21,sp,104
8111eed4:	4825883a 	mov	r18,r9
8111eed8:	4027883a 	mov	r19,r8
8111eedc:	8009883a 	mov	r4,r16
8111eee0:	880b883a 	mov	r5,r17
8111eee4:	01800284 	movi	r6,10
8111eee8:	000f883a 	mov	r7,zero
8111eeec:	11215a80 	call	811215a8 <__umoddi3>
8111eef0:	10800c04 	addi	r2,r2,48
8111eef4:	ad7fffc4 	addi	r21,r21,-1
8111eef8:	8009883a 	mov	r4,r16
8111eefc:	880b883a 	mov	r5,r17
8111ef00:	a8800005 	stb	r2,0(r21)
8111ef04:	01800284 	movi	r6,10
8111ef08:	000f883a 	mov	r7,zero
8111ef0c:	11210280 	call	81121028 <__udivdi3>
8111ef10:	1021883a 	mov	r16,r2
8111ef14:	10c4b03a 	or	r2,r2,r3
8111ef18:	1823883a 	mov	r17,r3
8111ef1c:	103fef1e 	bne	r2,zero,8111eedc <__reset+0xfb0feedc>
8111ef20:	dc402417 	ldw	r17,144(sp)
8111ef24:	dc002517 	ldw	r16,148(sp)
8111ef28:	9013883a 	mov	r9,r18
8111ef2c:	9811883a 	mov	r8,r19
8111ef30:	da801e17 	ldw	r10,120(sp)
8111ef34:	5567c83a 	sub	r19,r10,r21
8111ef38:	003ede06 	br	8111eab4 <__reset+0xfb0feab4>
8111ef3c:	38803fcc 	andi	r2,r7,255
8111ef40:	1080201c 	xori	r2,r2,128
8111ef44:	10bfe004 	addi	r2,r2,-128
8111ef48:	1002371e 	bne	r2,zero,8111f828 <___vfiprintf_internal_r+0x117c>
8111ef4c:	01000044 	movi	r4,1
8111ef50:	01c00804 	movi	r7,32
8111ef54:	80c00007 	ldb	r3,0(r16)
8111ef58:	003e3506 	br	8111e830 <__reset+0xfb0fe830>
8111ef5c:	a5000054 	ori	r20,r20,1
8111ef60:	80c00007 	ldb	r3,0(r16)
8111ef64:	003e3206 	br	8111e830 <__reset+0xfb0fe830>
8111ef68:	a5002014 	ori	r20,r20,128
8111ef6c:	80c00007 	ldb	r3,0(r16)
8111ef70:	003e2f06 	br	8111e830 <__reset+0xfb0fe830>
8111ef74:	8015883a 	mov	r10,r16
8111ef78:	0023883a 	mov	r17,zero
8111ef7c:	18bff404 	addi	r2,r3,-48
8111ef80:	50c00007 	ldb	r3,0(r10)
8111ef84:	8c4002a4 	muli	r17,r17,10
8111ef88:	84000044 	addi	r16,r16,1
8111ef8c:	8015883a 	mov	r10,r16
8111ef90:	1463883a 	add	r17,r2,r17
8111ef94:	18bff404 	addi	r2,r3,-48
8111ef98:	30bff92e 	bgeu	r6,r2,8111ef80 <__reset+0xfb0fef80>
8111ef9c:	003e2506 	br	8111e834 <__reset+0xfb0fe834>
8111efa0:	21003fcc 	andi	r4,r4,255
8111efa4:	2002d41e 	bne	r4,zero,8111faf8 <___vfiprintf_internal_r+0x144c>
8111efa8:	a5000414 	ori	r20,r20,16
8111efac:	a080080c 	andi	r2,r20,32
8111efb0:	103fb51e 	bne	r2,zero,8111ee88 <__reset+0xfb0fee88>
8111efb4:	a080040c 	andi	r2,r20,16
8111efb8:	1001f826 	beq	r2,zero,8111f79c <___vfiprintf_internal_r+0x10f0>
8111efbc:	da802217 	ldw	r10,136(sp)
8111efc0:	54800017 	ldw	r18,0(r10)
8111efc4:	52800104 	addi	r10,r10,4
8111efc8:	da802215 	stw	r10,136(sp)
8111efcc:	9027d7fa 	srai	r19,r18,31
8111efd0:	9805883a 	mov	r2,r19
8111efd4:	003fb206 	br	8111eea0 <__reset+0xfb0feea0>
8111efd8:	21003fcc 	andi	r4,r4,255
8111efdc:	2002c41e 	bne	r4,zero,8111faf0 <___vfiprintf_internal_r+0x1444>
8111efe0:	a5000414 	ori	r20,r20,16
8111efe4:	a080080c 	andi	r2,r20,32
8111efe8:	103f5f1e 	bne	r2,zero,8111ed68 <__reset+0xfb0fed68>
8111efec:	a080040c 	andi	r2,r20,16
8111eff0:	10020f26 	beq	r2,zero,8111f830 <___vfiprintf_internal_r+0x1184>
8111eff4:	da802217 	ldw	r10,136(sp)
8111eff8:	d8001d85 	stb	zero,118(sp)
8111effc:	0027883a 	mov	r19,zero
8111f000:	50800104 	addi	r2,r10,4
8111f004:	54800017 	ldw	r18,0(r10)
8111f008:	48021116 	blt	r9,zero,8111f850 <___vfiprintf_internal_r+0x11a4>
8111f00c:	00ffdfc4 	movi	r3,-129
8111f010:	d8802215 	stw	r2,136(sp)
8111f014:	a0e8703a 	and	r20,r20,r3
8111f018:	903f5e1e 	bne	r18,zero,8111ed94 <__reset+0xfb0fed94>
8111f01c:	0039883a 	mov	fp,zero
8111f020:	4802a626 	beq	r9,zero,8111fabc <___vfiprintf_internal_r+0x1410>
8111f024:	0025883a 	mov	r18,zero
8111f028:	0027883a 	mov	r19,zero
8111f02c:	003f5a06 	br	8111ed98 <__reset+0xfb0fed98>
8111f030:	21003fcc 	andi	r4,r4,255
8111f034:	20029f1e 	bne	r4,zero,8111fab4 <___vfiprintf_internal_r+0x1408>
8111f038:	a5000414 	ori	r20,r20,16
8111f03c:	a080080c 	andi	r2,r20,32
8111f040:	10005e1e 	bne	r2,zero,8111f1bc <___vfiprintf_internal_r+0xb10>
8111f044:	a080040c 	andi	r2,r20,16
8111f048:	1001a21e 	bne	r2,zero,8111f6d4 <___vfiprintf_internal_r+0x1028>
8111f04c:	a080100c 	andi	r2,r20,64
8111f050:	d8001d85 	stb	zero,118(sp)
8111f054:	da802217 	ldw	r10,136(sp)
8111f058:	1002231e 	bne	r2,zero,8111f8e8 <___vfiprintf_internal_r+0x123c>
8111f05c:	50800104 	addi	r2,r10,4
8111f060:	54800017 	ldw	r18,0(r10)
8111f064:	0027883a 	mov	r19,zero
8111f068:	4801a00e 	bge	r9,zero,8111f6ec <___vfiprintf_internal_r+0x1040>
8111f06c:	d8802215 	stw	r2,136(sp)
8111f070:	0039883a 	mov	fp,zero
8111f074:	94c4b03a 	or	r2,r18,r19
8111f078:	103f901e 	bne	r2,zero,8111eebc <__reset+0xfb0feebc>
8111f07c:	00800044 	movi	r2,1
8111f080:	10803fcc 	andi	r2,r2,255
8111f084:	00c00044 	movi	r3,1
8111f088:	10c05926 	beq	r2,r3,8111f1f0 <___vfiprintf_internal_r+0xb44>
8111f08c:	00c00084 	movi	r3,2
8111f090:	10ffe41e 	bne	r2,r3,8111f024 <__reset+0xfb0ff024>
8111f094:	0025883a 	mov	r18,zero
8111f098:	0027883a 	mov	r19,zero
8111f09c:	00013d06 	br	8111f594 <___vfiprintf_internal_r+0xee8>
8111f0a0:	21003fcc 	andi	r4,r4,255
8111f0a4:	2002811e 	bne	r4,zero,8111faac <___vfiprintf_internal_r+0x1400>
8111f0a8:	00a04534 	movhi	r2,33044
8111f0ac:	10ae2604 	addi	r2,r2,-18280
8111f0b0:	d8802615 	stw	r2,152(sp)
8111f0b4:	a080080c 	andi	r2,r20,32
8111f0b8:	103f561e 	bne	r2,zero,8111ee14 <__reset+0xfb0fee14>
8111f0bc:	a080040c 	andi	r2,r20,16
8111f0c0:	1001d126 	beq	r2,zero,8111f808 <___vfiprintf_internal_r+0x115c>
8111f0c4:	da802217 	ldw	r10,136(sp)
8111f0c8:	0027883a 	mov	r19,zero
8111f0cc:	54800017 	ldw	r18,0(r10)
8111f0d0:	52800104 	addi	r10,r10,4
8111f0d4:	da802215 	stw	r10,136(sp)
8111f0d8:	003f5306 	br	8111ee28 <__reset+0xfb0fee28>
8111f0dc:	da802217 	ldw	r10,136(sp)
8111f0e0:	d8001d85 	stb	zero,118(sp)
8111f0e4:	55400017 	ldw	r21,0(r10)
8111f0e8:	50c00104 	addi	r3,r10,4
8111f0ec:	a8024226 	beq	r21,zero,8111f9f8 <___vfiprintf_internal_r+0x134c>
8111f0f0:	48021816 	blt	r9,zero,8111f954 <___vfiprintf_internal_r+0x12a8>
8111f0f4:	480d883a 	mov	r6,r9
8111f0f8:	000b883a 	mov	r5,zero
8111f0fc:	a809883a 	mov	r4,r21
8111f100:	d8c02a15 	stw	r3,168(sp)
8111f104:	da002b15 	stw	r8,172(sp)
8111f108:	da402c15 	stw	r9,176(sp)
8111f10c:	11193100 	call	81119310 <memchr>
8111f110:	d8c02a17 	ldw	r3,168(sp)
8111f114:	da002b17 	ldw	r8,172(sp)
8111f118:	da402c17 	ldw	r9,176(sp)
8111f11c:	10024826 	beq	r2,zero,8111fa40 <___vfiprintf_internal_r+0x1394>
8111f120:	1567c83a 	sub	r19,r2,r21
8111f124:	df001d83 	ldbu	fp,118(sp)
8111f128:	d8c02215 	stw	r3,136(sp)
8111f12c:	0013883a 	mov	r9,zero
8111f130:	003e6006 	br	8111eab4 <__reset+0xfb0feab4>
8111f134:	21003fcc 	andi	r4,r4,255
8111f138:	203fc026 	beq	r4,zero,8111f03c <__reset+0xfb0ff03c>
8111f13c:	d9c01d85 	stb	r7,118(sp)
8111f140:	003fbe06 	br	8111f03c <__reset+0xfb0ff03c>
8111f144:	da802217 	ldw	r10,136(sp)
8111f148:	54400017 	ldw	r17,0(r10)
8111f14c:	50800104 	addi	r2,r10,4
8111f150:	883e3b16 	blt	r17,zero,8111ea40 <__reset+0xfb0fea40>
8111f154:	d8802215 	stw	r2,136(sp)
8111f158:	80c00007 	ldb	r3,0(r16)
8111f15c:	003db406 	br	8111e830 <__reset+0xfb0fe830>
8111f160:	01000044 	movi	r4,1
8111f164:	01c00ac4 	movi	r7,43
8111f168:	80c00007 	ldb	r3,0(r16)
8111f16c:	003db006 	br	8111e830 <__reset+0xfb0fe830>
8111f170:	80c00007 	ldb	r3,0(r16)
8111f174:	82800044 	addi	r10,r16,1
8111f178:	1b423c26 	beq	r3,r13,8111fa6c <___vfiprintf_internal_r+0x13c0>
8111f17c:	18bff404 	addi	r2,r3,-48
8111f180:	0013883a 	mov	r9,zero
8111f184:	30822b36 	bltu	r6,r2,8111fa34 <___vfiprintf_internal_r+0x1388>
8111f188:	50c00007 	ldb	r3,0(r10)
8111f18c:	4a4002a4 	muli	r9,r9,10
8111f190:	54000044 	addi	r16,r10,1
8111f194:	8015883a 	mov	r10,r16
8111f198:	4893883a 	add	r9,r9,r2
8111f19c:	18bff404 	addi	r2,r3,-48
8111f1a0:	30bff92e 	bgeu	r6,r2,8111f188 <__reset+0xfb0ff188>
8111f1a4:	483da30e 	bge	r9,zero,8111e834 <__reset+0xfb0fe834>
8111f1a8:	027fffc4 	movi	r9,-1
8111f1ac:	003da106 	br	8111e834 <__reset+0xfb0fe834>
8111f1b0:	a5001014 	ori	r20,r20,64
8111f1b4:	80c00007 	ldb	r3,0(r16)
8111f1b8:	003d9d06 	br	8111e830 <__reset+0xfb0fe830>
8111f1bc:	da802217 	ldw	r10,136(sp)
8111f1c0:	d8001d85 	stb	zero,118(sp)
8111f1c4:	50c00204 	addi	r3,r10,8
8111f1c8:	54800017 	ldw	r18,0(r10)
8111f1cc:	54c00117 	ldw	r19,4(r10)
8111f1d0:	4801ca16 	blt	r9,zero,8111f8fc <___vfiprintf_internal_r+0x1250>
8111f1d4:	013fdfc4 	movi	r4,-129
8111f1d8:	94c4b03a 	or	r2,r18,r19
8111f1dc:	d8c02215 	stw	r3,136(sp)
8111f1e0:	a128703a 	and	r20,r20,r4
8111f1e4:	0039883a 	mov	fp,zero
8111f1e8:	103f341e 	bne	r2,zero,8111eebc <__reset+0xfb0feebc>
8111f1ec:	483e2e26 	beq	r9,zero,8111eaa8 <__reset+0xfb0feaa8>
8111f1f0:	0025883a 	mov	r18,zero
8111f1f4:	94800c04 	addi	r18,r18,48
8111f1f8:	dc8019c5 	stb	r18,103(sp)
8111f1fc:	dcc02717 	ldw	r19,156(sp)
8111f200:	dd4019c4 	addi	r21,sp,103
8111f204:	003e2b06 	br	8111eab4 <__reset+0xfb0feab4>
8111f208:	21003fcc 	andi	r4,r4,255
8111f20c:	2002361e 	bne	r4,zero,8111fae8 <___vfiprintf_internal_r+0x143c>
8111f210:	1801c126 	beq	r3,zero,8111f918 <___vfiprintf_internal_r+0x126c>
8111f214:	04800044 	movi	r18,1
8111f218:	d8c01005 	stb	r3,64(sp)
8111f21c:	d8001d85 	stb	zero,118(sp)
8111f220:	9027883a 	mov	r19,r18
8111f224:	dd401004 	addi	r21,sp,64
8111f228:	003f1106 	br	8111ee70 <__reset+0xfb0fee70>
8111f22c:	d9402117 	ldw	r5,132(sp)
8111f230:	d9002017 	ldw	r4,128(sp)
8111f234:	d9801a04 	addi	r6,sp,104
8111f238:	d9c02b15 	stw	r7,172(sp)
8111f23c:	dbc02a15 	stw	r15,168(sp)
8111f240:	111e5900 	call	8111e590 <__sprint_r.part.0>
8111f244:	d9c02b17 	ldw	r7,172(sp)
8111f248:	dbc02a17 	ldw	r15,168(sp)
8111f24c:	10006d1e 	bne	r2,zero,8111f404 <___vfiprintf_internal_r+0xd58>
8111f250:	d9801b17 	ldw	r6,108(sp)
8111f254:	d8801c17 	ldw	r2,112(sp)
8111f258:	d811883a 	mov	r8,sp
8111f25c:	31400044 	addi	r5,r6,1
8111f260:	003e3306 	br	8111eb30 <__reset+0xfb0feb30>
8111f264:	d9401b17 	ldw	r5,108(sp)
8111f268:	d8801c17 	ldw	r2,112(sp)
8111f26c:	29000044 	addi	r4,r5,1
8111f270:	d8c01d87 	ldb	r3,118(sp)
8111f274:	183e4d26 	beq	r3,zero,8111ebac <__reset+0xfb0febac>
8111f278:	00c00044 	movi	r3,1
8111f27c:	d9401d84 	addi	r5,sp,118
8111f280:	10c5883a 	add	r2,r2,r3
8111f284:	41400015 	stw	r5,0(r8)
8111f288:	40c00115 	stw	r3,4(r8)
8111f28c:	d8801c15 	stw	r2,112(sp)
8111f290:	d9001b15 	stw	r4,108(sp)
8111f294:	014001c4 	movi	r5,7
8111f298:	2900a90e 	bge	r5,r4,8111f540 <___vfiprintf_internal_r+0xe94>
8111f29c:	1000da1e 	bne	r2,zero,8111f608 <___vfiprintf_internal_r+0xf5c>
8111f2a0:	7000ab1e 	bne	r14,zero,8111f550 <___vfiprintf_internal_r+0xea4>
8111f2a4:	000b883a 	mov	r5,zero
8111f2a8:	1809883a 	mov	r4,r3
8111f2ac:	d811883a 	mov	r8,sp
8111f2b0:	00c02004 	movi	r3,128
8111f2b4:	e0fe4d26 	beq	fp,r3,8111ebec <__reset+0xfb0febec>
8111f2b8:	4cf9c83a 	sub	fp,r9,r19
8111f2bc:	073e7b0e 	bge	zero,fp,8111ecac <__reset+0xfb0fecac>
8111f2c0:	01c00404 	movi	r7,16
8111f2c4:	3f01900e 	bge	r7,fp,8111f908 <___vfiprintf_internal_r+0x125c>
8111f2c8:	00e04534 	movhi	r3,33044
8111f2cc:	18eebd04 	addi	r3,r3,-17676
8111f2d0:	d8c02415 	stw	r3,144(sp)
8111f2d4:	034001c4 	movi	r13,7
8111f2d8:	00000506 	br	8111f2f0 <___vfiprintf_internal_r+0xc44>
8111f2dc:	29000084 	addi	r4,r5,2
8111f2e0:	42000204 	addi	r8,r8,8
8111f2e4:	180b883a 	mov	r5,r3
8111f2e8:	e73ffc04 	addi	fp,fp,-16
8111f2ec:	3f000d0e 	bge	r7,fp,8111f324 <___vfiprintf_internal_r+0xc78>
8111f2f0:	10800404 	addi	r2,r2,16
8111f2f4:	28c00044 	addi	r3,r5,1
8111f2f8:	45c00015 	stw	r23,0(r8)
8111f2fc:	41c00115 	stw	r7,4(r8)
8111f300:	d8801c15 	stw	r2,112(sp)
8111f304:	d8c01b15 	stw	r3,108(sp)
8111f308:	68fff40e 	bge	r13,r3,8111f2dc <__reset+0xfb0ff2dc>
8111f30c:	1000101e 	bne	r2,zero,8111f350 <___vfiprintf_internal_r+0xca4>
8111f310:	e73ffc04 	addi	fp,fp,-16
8111f314:	01000044 	movi	r4,1
8111f318:	000b883a 	mov	r5,zero
8111f31c:	d811883a 	mov	r8,sp
8111f320:	3f3ff316 	blt	r7,fp,8111f2f0 <__reset+0xfb0ff2f0>
8111f324:	da802417 	ldw	r10,144(sp)
8111f328:	1705883a 	add	r2,r2,fp
8111f32c:	47000115 	stw	fp,4(r8)
8111f330:	42800015 	stw	r10,0(r8)
8111f334:	d8801c15 	stw	r2,112(sp)
8111f338:	d9001b15 	stw	r4,108(sp)
8111f33c:	00c001c4 	movi	r3,7
8111f340:	19003616 	blt	r3,r4,8111f41c <___vfiprintf_internal_r+0xd70>
8111f344:	42000204 	addi	r8,r8,8
8111f348:	21000044 	addi	r4,r4,1
8111f34c:	003e5706 	br	8111ecac <__reset+0xfb0fecac>
8111f350:	d9402117 	ldw	r5,132(sp)
8111f354:	d9002017 	ldw	r4,128(sp)
8111f358:	d9801a04 	addi	r6,sp,104
8111f35c:	d9c02b15 	stw	r7,172(sp)
8111f360:	db402a15 	stw	r13,168(sp)
8111f364:	111e5900 	call	8111e590 <__sprint_r.part.0>
8111f368:	d9c02b17 	ldw	r7,172(sp)
8111f36c:	db402a17 	ldw	r13,168(sp)
8111f370:	1000241e 	bne	r2,zero,8111f404 <___vfiprintf_internal_r+0xd58>
8111f374:	d9401b17 	ldw	r5,108(sp)
8111f378:	d8801c17 	ldw	r2,112(sp)
8111f37c:	d811883a 	mov	r8,sp
8111f380:	29000044 	addi	r4,r5,1
8111f384:	003fd806 	br	8111f2e8 <__reset+0xfb0ff2e8>
8111f388:	d9401b17 	ldw	r5,108(sp)
8111f38c:	00e04534 	movhi	r3,33044
8111f390:	18eec104 	addi	r3,r3,-17660
8111f394:	d8c02415 	stw	r3,144(sp)
8111f398:	29400044 	addi	r5,r5,1
8111f39c:	d8c02417 	ldw	r3,144(sp)
8111f3a0:	14c5883a 	add	r2,r2,r19
8111f3a4:	44c00115 	stw	r19,4(r8)
8111f3a8:	40c00015 	stw	r3,0(r8)
8111f3ac:	d8801c15 	stw	r2,112(sp)
8111f3b0:	d9401b15 	stw	r5,108(sp)
8111f3b4:	00c001c4 	movi	r3,7
8111f3b8:	1940070e 	bge	r3,r5,8111f3d8 <___vfiprintf_internal_r+0xd2c>
8111f3bc:	103e4826 	beq	r2,zero,8111ece0 <__reset+0xfb0fece0>
8111f3c0:	d9402117 	ldw	r5,132(sp)
8111f3c4:	d9002017 	ldw	r4,128(sp)
8111f3c8:	d9801a04 	addi	r6,sp,104
8111f3cc:	111e5900 	call	8111e590 <__sprint_r.part.0>
8111f3d0:	10000c1e 	bne	r2,zero,8111f404 <___vfiprintf_internal_r+0xd58>
8111f3d4:	d8801c17 	ldw	r2,112(sp)
8111f3d8:	8c80010e 	bge	r17,r18,8111f3e0 <___vfiprintf_internal_r+0xd34>
8111f3dc:	9023883a 	mov	r17,r18
8111f3e0:	da802317 	ldw	r10,140(sp)
8111f3e4:	5455883a 	add	r10,r10,r17
8111f3e8:	da802315 	stw	r10,140(sp)
8111f3ec:	103e4126 	beq	r2,zero,8111ecf4 <__reset+0xfb0fecf4>
8111f3f0:	d9402117 	ldw	r5,132(sp)
8111f3f4:	d9002017 	ldw	r4,128(sp)
8111f3f8:	d9801a04 	addi	r6,sp,104
8111f3fc:	111e5900 	call	8111e590 <__sprint_r.part.0>
8111f400:	103e3c26 	beq	r2,zero,8111ecf4 <__reset+0xfb0fecf4>
8111f404:	dd002117 	ldw	r20,132(sp)
8111f408:	a080030b 	ldhu	r2,12(r20)
8111f40c:	1080100c 	andi	r2,r2,64
8111f410:	1001231e 	bne	r2,zero,8111f8a0 <___vfiprintf_internal_r+0x11f4>
8111f414:	d8802317 	ldw	r2,140(sp)
8111f418:	003d7b06 	br	8111ea08 <__reset+0xfb0fea08>
8111f41c:	1000991e 	bne	r2,zero,8111f684 <___vfiprintf_internal_r+0xfd8>
8111f420:	00c00044 	movi	r3,1
8111f424:	9805883a 	mov	r2,r19
8111f428:	dd400015 	stw	r21,0(sp)
8111f42c:	dcc00115 	stw	r19,4(sp)
8111f430:	dcc01c15 	stw	r19,112(sp)
8111f434:	d8c01b15 	stw	r3,108(sp)
8111f438:	d811883a 	mov	r8,sp
8111f43c:	42000204 	addi	r8,r8,8
8111f440:	a2c0010c 	andi	r11,r20,4
8111f444:	583fe426 	beq	r11,zero,8111f3d8 <__reset+0xfb0ff3d8>
8111f448:	8ca7c83a 	sub	r19,r17,r18
8111f44c:	04ffe20e 	bge	zero,r19,8111f3d8 <__reset+0xfb0ff3d8>
8111f450:	01c00404 	movi	r7,16
8111f454:	3cffcc0e 	bge	r7,r19,8111f388 <__reset+0xfb0ff388>
8111f458:	02a04534 	movhi	r10,33044
8111f45c:	52aec104 	addi	r10,r10,-17660
8111f460:	d9001b17 	ldw	r4,108(sp)
8111f464:	da802415 	stw	r10,144(sp)
8111f468:	382b883a 	mov	r21,r7
8111f46c:	050001c4 	movi	r20,7
8111f470:	df002017 	ldw	fp,128(sp)
8111f474:	00000506 	br	8111f48c <___vfiprintf_internal_r+0xde0>
8111f478:	21400084 	addi	r5,r4,2
8111f47c:	42000204 	addi	r8,r8,8
8111f480:	1809883a 	mov	r4,r3
8111f484:	9cfffc04 	addi	r19,r19,-16
8111f488:	acffc40e 	bge	r21,r19,8111f39c <__reset+0xfb0ff39c>
8111f48c:	10800404 	addi	r2,r2,16
8111f490:	20c00044 	addi	r3,r4,1
8111f494:	45800015 	stw	r22,0(r8)
8111f498:	45400115 	stw	r21,4(r8)
8111f49c:	d8801c15 	stw	r2,112(sp)
8111f4a0:	d8c01b15 	stw	r3,108(sp)
8111f4a4:	a0fff40e 	bge	r20,r3,8111f478 <__reset+0xfb0ff478>
8111f4a8:	1000041e 	bne	r2,zero,8111f4bc <___vfiprintf_internal_r+0xe10>
8111f4ac:	01400044 	movi	r5,1
8111f4b0:	0009883a 	mov	r4,zero
8111f4b4:	d811883a 	mov	r8,sp
8111f4b8:	003ff206 	br	8111f484 <__reset+0xfb0ff484>
8111f4bc:	d9402117 	ldw	r5,132(sp)
8111f4c0:	d9801a04 	addi	r6,sp,104
8111f4c4:	e009883a 	mov	r4,fp
8111f4c8:	111e5900 	call	8111e590 <__sprint_r.part.0>
8111f4cc:	103fcd1e 	bne	r2,zero,8111f404 <__reset+0xfb0ff404>
8111f4d0:	d9001b17 	ldw	r4,108(sp)
8111f4d4:	d8801c17 	ldw	r2,112(sp)
8111f4d8:	d811883a 	mov	r8,sp
8111f4dc:	21400044 	addi	r5,r4,1
8111f4e0:	003fe806 	br	8111f484 <__reset+0xfb0ff484>
8111f4e4:	d9402117 	ldw	r5,132(sp)
8111f4e8:	d9002017 	ldw	r4,128(sp)
8111f4ec:	d9801a04 	addi	r6,sp,104
8111f4f0:	d9c02b15 	stw	r7,172(sp)
8111f4f4:	db402a15 	stw	r13,168(sp)
8111f4f8:	111e5900 	call	8111e590 <__sprint_r.part.0>
8111f4fc:	d9c02b17 	ldw	r7,172(sp)
8111f500:	db402a17 	ldw	r13,168(sp)
8111f504:	103fbf1e 	bne	r2,zero,8111f404 <__reset+0xfb0ff404>
8111f508:	d9401b17 	ldw	r5,108(sp)
8111f50c:	d8801c17 	ldw	r2,112(sp)
8111f510:	d811883a 	mov	r8,sp
8111f514:	29800044 	addi	r6,r5,1
8111f518:	003dc406 	br	8111ec2c <__reset+0xfb0fec2c>
8111f51c:	1000d21e 	bne	r2,zero,8111f868 <___vfiprintf_internal_r+0x11bc>
8111f520:	d8c01d87 	ldb	r3,118(sp)
8111f524:	18009526 	beq	r3,zero,8111f77c <___vfiprintf_internal_r+0x10d0>
8111f528:	00800044 	movi	r2,1
8111f52c:	d8c01d84 	addi	r3,sp,118
8111f530:	1009883a 	mov	r4,r2
8111f534:	d8c00015 	stw	r3,0(sp)
8111f538:	d8800115 	stw	r2,4(sp)
8111f53c:	d811883a 	mov	r8,sp
8111f540:	200b883a 	mov	r5,r4
8111f544:	42000204 	addi	r8,r8,8
8111f548:	21000044 	addi	r4,r4,1
8111f54c:	003d9706 	br	8111ebac <__reset+0xfb0febac>
8111f550:	d9001d04 	addi	r4,sp,116
8111f554:	00800084 	movi	r2,2
8111f558:	d9000015 	stw	r4,0(sp)
8111f55c:	d8800115 	stw	r2,4(sp)
8111f560:	1809883a 	mov	r4,r3
8111f564:	d811883a 	mov	r8,sp
8111f568:	200b883a 	mov	r5,r4
8111f56c:	42000204 	addi	r8,r8,8
8111f570:	21000044 	addi	r4,r4,1
8111f574:	003f4e06 	br	8111f2b0 <__reset+0xfb0ff2b0>
8111f578:	d8001d85 	stb	zero,118(sp)
8111f57c:	48005016 	blt	r9,zero,8111f6c0 <___vfiprintf_internal_r+0x1014>
8111f580:	00ffdfc4 	movi	r3,-129
8111f584:	94c4b03a 	or	r2,r18,r19
8111f588:	a0e8703a 	and	r20,r20,r3
8111f58c:	103d4426 	beq	r2,zero,8111eaa0 <__reset+0xfb0feaa0>
8111f590:	0039883a 	mov	fp,zero
8111f594:	d9002617 	ldw	r4,152(sp)
8111f598:	dd401a04 	addi	r21,sp,104
8111f59c:	908003cc 	andi	r2,r18,15
8111f5a0:	9806973a 	slli	r3,r19,28
8111f5a4:	2085883a 	add	r2,r4,r2
8111f5a8:	9024d13a 	srli	r18,r18,4
8111f5ac:	10800003 	ldbu	r2,0(r2)
8111f5b0:	9826d13a 	srli	r19,r19,4
8111f5b4:	ad7fffc4 	addi	r21,r21,-1
8111f5b8:	1ca4b03a 	or	r18,r3,r18
8111f5bc:	a8800005 	stb	r2,0(r21)
8111f5c0:	94c4b03a 	or	r2,r18,r19
8111f5c4:	103ff51e 	bne	r2,zero,8111f59c <__reset+0xfb0ff59c>
8111f5c8:	003e5906 	br	8111ef30 <__reset+0xfb0fef30>
8111f5cc:	d9402117 	ldw	r5,132(sp)
8111f5d0:	d9002017 	ldw	r4,128(sp)
8111f5d4:	d9801a04 	addi	r6,sp,104
8111f5d8:	111e5900 	call	8111e590 <__sprint_r.part.0>
8111f5dc:	103f891e 	bne	r2,zero,8111f404 <__reset+0xfb0ff404>
8111f5e0:	d8801c17 	ldw	r2,112(sp)
8111f5e4:	d811883a 	mov	r8,sp
8111f5e8:	003f9506 	br	8111f440 <__reset+0xfb0ff440>
8111f5ec:	d9402117 	ldw	r5,132(sp)
8111f5f0:	d9002017 	ldw	r4,128(sp)
8111f5f4:	d9801a04 	addi	r6,sp,104
8111f5f8:	111e5900 	call	8111e590 <__sprint_r.part.0>
8111f5fc:	103f811e 	bne	r2,zero,8111f404 <__reset+0xfb0ff404>
8111f600:	d811883a 	mov	r8,sp
8111f604:	003ced06 	br	8111e9bc <__reset+0xfb0fe9bc>
8111f608:	d9402117 	ldw	r5,132(sp)
8111f60c:	d9002017 	ldw	r4,128(sp)
8111f610:	d9801a04 	addi	r6,sp,104
8111f614:	da402c15 	stw	r9,176(sp)
8111f618:	db802a15 	stw	r14,168(sp)
8111f61c:	111e5900 	call	8111e590 <__sprint_r.part.0>
8111f620:	da402c17 	ldw	r9,176(sp)
8111f624:	db802a17 	ldw	r14,168(sp)
8111f628:	103f761e 	bne	r2,zero,8111f404 <__reset+0xfb0ff404>
8111f62c:	d9401b17 	ldw	r5,108(sp)
8111f630:	d8801c17 	ldw	r2,112(sp)
8111f634:	d811883a 	mov	r8,sp
8111f638:	29000044 	addi	r4,r5,1
8111f63c:	003d5b06 	br	8111ebac <__reset+0xfb0febac>
8111f640:	d9402117 	ldw	r5,132(sp)
8111f644:	d9002017 	ldw	r4,128(sp)
8111f648:	d9801a04 	addi	r6,sp,104
8111f64c:	da402c15 	stw	r9,176(sp)
8111f650:	111e5900 	call	8111e590 <__sprint_r.part.0>
8111f654:	da402c17 	ldw	r9,176(sp)
8111f658:	103f6a1e 	bne	r2,zero,8111f404 <__reset+0xfb0ff404>
8111f65c:	d9401b17 	ldw	r5,108(sp)
8111f660:	d8801c17 	ldw	r2,112(sp)
8111f664:	d811883a 	mov	r8,sp
8111f668:	29000044 	addi	r4,r5,1
8111f66c:	003f1006 	br	8111f2b0 <__reset+0xfb0ff2b0>
8111f670:	1000c31e 	bne	r2,zero,8111f980 <___vfiprintf_internal_r+0x12d4>
8111f674:	01000044 	movi	r4,1
8111f678:	000b883a 	mov	r5,zero
8111f67c:	d811883a 	mov	r8,sp
8111f680:	003f0d06 	br	8111f2b8 <__reset+0xfb0ff2b8>
8111f684:	d9402117 	ldw	r5,132(sp)
8111f688:	d9002017 	ldw	r4,128(sp)
8111f68c:	d9801a04 	addi	r6,sp,104
8111f690:	111e5900 	call	8111e590 <__sprint_r.part.0>
8111f694:	103f5b1e 	bne	r2,zero,8111f404 <__reset+0xfb0ff404>
8111f698:	d9001b17 	ldw	r4,108(sp)
8111f69c:	d8801c17 	ldw	r2,112(sp)
8111f6a0:	d811883a 	mov	r8,sp
8111f6a4:	21000044 	addi	r4,r4,1
8111f6a8:	003d8006 	br	8111ecac <__reset+0xfb0fecac>
8111f6ac:	01204534 	movhi	r4,33044
8111f6b0:	212e2b04 	addi	r4,r4,-18260
8111f6b4:	d9002615 	stw	r4,152(sp)
8111f6b8:	d8c02215 	stw	r3,136(sp)
8111f6bc:	1029883a 	mov	r20,r2
8111f6c0:	94c4b03a 	or	r2,r18,r19
8111f6c4:	103fb21e 	bne	r2,zero,8111f590 <__reset+0xfb0ff590>
8111f6c8:	0039883a 	mov	fp,zero
8111f6cc:	00800084 	movi	r2,2
8111f6d0:	003e6b06 	br	8111f080 <__reset+0xfb0ff080>
8111f6d4:	da802217 	ldw	r10,136(sp)
8111f6d8:	d8001d85 	stb	zero,118(sp)
8111f6dc:	0027883a 	mov	r19,zero
8111f6e0:	50800104 	addi	r2,r10,4
8111f6e4:	54800017 	ldw	r18,0(r10)
8111f6e8:	483e6016 	blt	r9,zero,8111f06c <__reset+0xfb0ff06c>
8111f6ec:	00ffdfc4 	movi	r3,-129
8111f6f0:	d8802215 	stw	r2,136(sp)
8111f6f4:	a0e8703a 	and	r20,r20,r3
8111f6f8:	0039883a 	mov	fp,zero
8111f6fc:	903ebb26 	beq	r18,zero,8111f1ec <__reset+0xfb0ff1ec>
8111f700:	00800244 	movi	r2,9
8111f704:	14bdee36 	bltu	r2,r18,8111eec0 <__reset+0xfb0feec0>
8111f708:	003eba06 	br	8111f1f4 <__reset+0xfb0ff1f4>
8111f70c:	00800c04 	movi	r2,48
8111f710:	d8c01d45 	stb	r3,117(sp)
8111f714:	d8801d05 	stb	r2,116(sp)
8111f718:	d8001d85 	stb	zero,118(sp)
8111f71c:	a0c00094 	ori	r3,r20,2
8111f720:	4800a916 	blt	r9,zero,8111f9c8 <___vfiprintf_internal_r+0x131c>
8111f724:	00bfdfc4 	movi	r2,-129
8111f728:	a096703a 	and	r11,r20,r2
8111f72c:	5d000094 	ori	r20,r11,2
8111f730:	0039883a 	mov	fp,zero
8111f734:	003f9706 	br	8111f594 <__reset+0xfb0ff594>
8111f738:	8025883a 	mov	r18,r16
8111f73c:	003c2e06 	br	8111e7f8 <__reset+0xfb0fe7f8>
8111f740:	00a04534 	movhi	r2,33044
8111f744:	10ae2b04 	addi	r2,r2,-18260
8111f748:	0039883a 	mov	fp,zero
8111f74c:	d8802615 	stw	r2,152(sp)
8111f750:	003f9006 	br	8111f594 <__reset+0xfb0ff594>
8111f754:	04a5c83a 	sub	r18,zero,r18
8111f758:	07000b44 	movi	fp,45
8111f75c:	9004c03a 	cmpne	r2,r18,zero
8111f760:	04e7c83a 	sub	r19,zero,r19
8111f764:	df001d85 	stb	fp,118(sp)
8111f768:	98a7c83a 	sub	r19,r19,r2
8111f76c:	48009f16 	blt	r9,zero,8111f9ec <___vfiprintf_internal_r+0x1340>
8111f770:	00bfdfc4 	movi	r2,-129
8111f774:	a0a8703a 	and	r20,r20,r2
8111f778:	003dd006 	br	8111eebc <__reset+0xfb0feebc>
8111f77c:	70004c26 	beq	r14,zero,8111f8b0 <___vfiprintf_internal_r+0x1204>
8111f780:	00800084 	movi	r2,2
8111f784:	d8c01d04 	addi	r3,sp,116
8111f788:	d8c00015 	stw	r3,0(sp)
8111f78c:	d8800115 	stw	r2,4(sp)
8111f790:	01000044 	movi	r4,1
8111f794:	d811883a 	mov	r8,sp
8111f798:	003f7306 	br	8111f568 <__reset+0xfb0ff568>
8111f79c:	a080100c 	andi	r2,r20,64
8111f7a0:	da802217 	ldw	r10,136(sp)
8111f7a4:	103e0626 	beq	r2,zero,8111efc0 <__reset+0xfb0fefc0>
8111f7a8:	5480000f 	ldh	r18,0(r10)
8111f7ac:	52800104 	addi	r10,r10,4
8111f7b0:	da802215 	stw	r10,136(sp)
8111f7b4:	9027d7fa 	srai	r19,r18,31
8111f7b8:	9805883a 	mov	r2,r19
8111f7bc:	003db806 	br	8111eea0 <__reset+0xfb0feea0>
8111f7c0:	a080040c 	andi	r2,r20,16
8111f7c4:	1000091e 	bne	r2,zero,8111f7ec <___vfiprintf_internal_r+0x1140>
8111f7c8:	a2c0100c 	andi	r11,r20,64
8111f7cc:	58000726 	beq	r11,zero,8111f7ec <___vfiprintf_internal_r+0x1140>
8111f7d0:	da802217 	ldw	r10,136(sp)
8111f7d4:	50800017 	ldw	r2,0(r10)
8111f7d8:	52800104 	addi	r10,r10,4
8111f7dc:	da802215 	stw	r10,136(sp)
8111f7e0:	da802317 	ldw	r10,140(sp)
8111f7e4:	1280000d 	sth	r10,0(r2)
8111f7e8:	003be706 	br	8111e788 <__reset+0xfb0fe788>
8111f7ec:	da802217 	ldw	r10,136(sp)
8111f7f0:	50800017 	ldw	r2,0(r10)
8111f7f4:	52800104 	addi	r10,r10,4
8111f7f8:	da802215 	stw	r10,136(sp)
8111f7fc:	da802317 	ldw	r10,140(sp)
8111f800:	12800015 	stw	r10,0(r2)
8111f804:	003be006 	br	8111e788 <__reset+0xfb0fe788>
8111f808:	a080100c 	andi	r2,r20,64
8111f80c:	da802217 	ldw	r10,136(sp)
8111f810:	10003026 	beq	r2,zero,8111f8d4 <___vfiprintf_internal_r+0x1228>
8111f814:	5480000b 	ldhu	r18,0(r10)
8111f818:	52800104 	addi	r10,r10,4
8111f81c:	0027883a 	mov	r19,zero
8111f820:	da802215 	stw	r10,136(sp)
8111f824:	003d8006 	br	8111ee28 <__reset+0xfb0fee28>
8111f828:	80c00007 	ldb	r3,0(r16)
8111f82c:	003c0006 	br	8111e830 <__reset+0xfb0fe830>
8111f830:	a080100c 	andi	r2,r20,64
8111f834:	d8001d85 	stb	zero,118(sp)
8111f838:	da802217 	ldw	r10,136(sp)
8111f83c:	1000201e 	bne	r2,zero,8111f8c0 <___vfiprintf_internal_r+0x1214>
8111f840:	50800104 	addi	r2,r10,4
8111f844:	54800017 	ldw	r18,0(r10)
8111f848:	0027883a 	mov	r19,zero
8111f84c:	483def0e 	bge	r9,zero,8111f00c <__reset+0xfb0ff00c>
8111f850:	94c6b03a 	or	r3,r18,r19
8111f854:	d8802215 	stw	r2,136(sp)
8111f858:	183d4e1e 	bne	r3,zero,8111ed94 <__reset+0xfb0fed94>
8111f85c:	0039883a 	mov	fp,zero
8111f860:	0005883a 	mov	r2,zero
8111f864:	003e0606 	br	8111f080 <__reset+0xfb0ff080>
8111f868:	d9402117 	ldw	r5,132(sp)
8111f86c:	d9002017 	ldw	r4,128(sp)
8111f870:	d9801a04 	addi	r6,sp,104
8111f874:	da402c15 	stw	r9,176(sp)
8111f878:	db802a15 	stw	r14,168(sp)
8111f87c:	111e5900 	call	8111e590 <__sprint_r.part.0>
8111f880:	da402c17 	ldw	r9,176(sp)
8111f884:	db802a17 	ldw	r14,168(sp)
8111f888:	103ede1e 	bne	r2,zero,8111f404 <__reset+0xfb0ff404>
8111f88c:	d9401b17 	ldw	r5,108(sp)
8111f890:	d8801c17 	ldw	r2,112(sp)
8111f894:	d811883a 	mov	r8,sp
8111f898:	29000044 	addi	r4,r5,1
8111f89c:	003e7406 	br	8111f270 <__reset+0xfb0ff270>
8111f8a0:	00bfffc4 	movi	r2,-1
8111f8a4:	003c5806 	br	8111ea08 <__reset+0xfb0fea08>
8111f8a8:	d811883a 	mov	r8,sp
8111f8ac:	003ee806 	br	8111f450 <__reset+0xfb0ff450>
8111f8b0:	000b883a 	mov	r5,zero
8111f8b4:	01000044 	movi	r4,1
8111f8b8:	d811883a 	mov	r8,sp
8111f8bc:	003e7c06 	br	8111f2b0 <__reset+0xfb0ff2b0>
8111f8c0:	50800104 	addi	r2,r10,4
8111f8c4:	5480000b 	ldhu	r18,0(r10)
8111f8c8:	0027883a 	mov	r19,zero
8111f8cc:	483dcf0e 	bge	r9,zero,8111f00c <__reset+0xfb0ff00c>
8111f8d0:	003fdf06 	br	8111f850 <__reset+0xfb0ff850>
8111f8d4:	54800017 	ldw	r18,0(r10)
8111f8d8:	52800104 	addi	r10,r10,4
8111f8dc:	0027883a 	mov	r19,zero
8111f8e0:	da802215 	stw	r10,136(sp)
8111f8e4:	003d5006 	br	8111ee28 <__reset+0xfb0fee28>
8111f8e8:	50800104 	addi	r2,r10,4
8111f8ec:	5480000b 	ldhu	r18,0(r10)
8111f8f0:	0027883a 	mov	r19,zero
8111f8f4:	483f7d0e 	bge	r9,zero,8111f6ec <__reset+0xfb0ff6ec>
8111f8f8:	003ddc06 	br	8111f06c <__reset+0xfb0ff06c>
8111f8fc:	d8c02215 	stw	r3,136(sp)
8111f900:	0039883a 	mov	fp,zero
8111f904:	003ddb06 	br	8111f074 <__reset+0xfb0ff074>
8111f908:	02a04534 	movhi	r10,33044
8111f90c:	52aebd04 	addi	r10,r10,-17676
8111f910:	da802415 	stw	r10,144(sp)
8111f914:	003e8306 	br	8111f324 <__reset+0xfb0ff324>
8111f918:	d8801c17 	ldw	r2,112(sp)
8111f91c:	dd002117 	ldw	r20,132(sp)
8111f920:	103eb926 	beq	r2,zero,8111f408 <__reset+0xfb0ff408>
8111f924:	d9002017 	ldw	r4,128(sp)
8111f928:	d9801a04 	addi	r6,sp,104
8111f92c:	a00b883a 	mov	r5,r20
8111f930:	111e5900 	call	8111e590 <__sprint_r.part.0>
8111f934:	003eb406 	br	8111f408 <__reset+0xfb0ff408>
8111f938:	80c00043 	ldbu	r3,1(r16)
8111f93c:	a5000814 	ori	r20,r20,32
8111f940:	84000044 	addi	r16,r16,1
8111f944:	18c03fcc 	andi	r3,r3,255
8111f948:	18c0201c 	xori	r3,r3,128
8111f94c:	18ffe004 	addi	r3,r3,-128
8111f950:	003bb706 	br	8111e830 <__reset+0xfb0fe830>
8111f954:	a809883a 	mov	r4,r21
8111f958:	d8c02a15 	stw	r3,168(sp)
8111f95c:	da002b15 	stw	r8,172(sp)
8111f960:	110ffb80 	call	8110ffb8 <strlen>
8111f964:	d8c02a17 	ldw	r3,168(sp)
8111f968:	1027883a 	mov	r19,r2
8111f96c:	df001d83 	ldbu	fp,118(sp)
8111f970:	d8c02215 	stw	r3,136(sp)
8111f974:	0013883a 	mov	r9,zero
8111f978:	da002b17 	ldw	r8,172(sp)
8111f97c:	003c4d06 	br	8111eab4 <__reset+0xfb0feab4>
8111f980:	d9402117 	ldw	r5,132(sp)
8111f984:	d9002017 	ldw	r4,128(sp)
8111f988:	d9801a04 	addi	r6,sp,104
8111f98c:	da402c15 	stw	r9,176(sp)
8111f990:	111e5900 	call	8111e590 <__sprint_r.part.0>
8111f994:	da402c17 	ldw	r9,176(sp)
8111f998:	103e9a1e 	bne	r2,zero,8111f404 <__reset+0xfb0ff404>
8111f99c:	d9401b17 	ldw	r5,108(sp)
8111f9a0:	d8801c17 	ldw	r2,112(sp)
8111f9a4:	d811883a 	mov	r8,sp
8111f9a8:	29000044 	addi	r4,r5,1
8111f9ac:	003e4206 	br	8111f2b8 <__reset+0xfb0ff2b8>
8111f9b0:	d9401b17 	ldw	r5,108(sp)
8111f9b4:	01204534 	movhi	r4,33044
8111f9b8:	212ec104 	addi	r4,r4,-17660
8111f9bc:	d9002415 	stw	r4,144(sp)
8111f9c0:	29400044 	addi	r5,r5,1
8111f9c4:	003c6d06 	br	8111eb7c <__reset+0xfb0feb7c>
8111f9c8:	0039883a 	mov	fp,zero
8111f9cc:	00800084 	movi	r2,2
8111f9d0:	10803fcc 	andi	r2,r2,255
8111f9d4:	01000044 	movi	r4,1
8111f9d8:	11001e26 	beq	r2,r4,8111fa54 <___vfiprintf_internal_r+0x13a8>
8111f9dc:	01000084 	movi	r4,2
8111f9e0:	11001e1e 	bne	r2,r4,8111fa5c <___vfiprintf_internal_r+0x13b0>
8111f9e4:	1829883a 	mov	r20,r3
8111f9e8:	003eea06 	br	8111f594 <__reset+0xfb0ff594>
8111f9ec:	a007883a 	mov	r3,r20
8111f9f0:	00800044 	movi	r2,1
8111f9f4:	003ff606 	br	8111f9d0 <__reset+0xfb0ff9d0>
8111f9f8:	00800184 	movi	r2,6
8111f9fc:	1240012e 	bgeu	r2,r9,8111fa04 <___vfiprintf_internal_r+0x1358>
8111fa00:	1013883a 	mov	r9,r2
8111fa04:	4827883a 	mov	r19,r9
8111fa08:	4825883a 	mov	r18,r9
8111fa0c:	48001516 	blt	r9,zero,8111fa64 <___vfiprintf_internal_r+0x13b8>
8111fa10:	05604534 	movhi	r21,33044
8111fa14:	d8c02215 	stw	r3,136(sp)
8111fa18:	ad6e3004 	addi	r21,r21,-18240
8111fa1c:	003d1406 	br	8111ee70 <__reset+0xfb0fee70>
8111fa20:	02a04534 	movhi	r10,33044
8111fa24:	52aebd04 	addi	r10,r10,-17676
8111fa28:	da802415 	stw	r10,144(sp)
8111fa2c:	200d883a 	mov	r6,r4
8111fa30:	003c9106 	br	8111ec78 <__reset+0xfb0fec78>
8111fa34:	5021883a 	mov	r16,r10
8111fa38:	0013883a 	mov	r9,zero
8111fa3c:	003b7d06 	br	8111e834 <__reset+0xfb0fe834>
8111fa40:	4827883a 	mov	r19,r9
8111fa44:	df001d83 	ldbu	fp,118(sp)
8111fa48:	d8c02215 	stw	r3,136(sp)
8111fa4c:	0013883a 	mov	r9,zero
8111fa50:	003c1806 	br	8111eab4 <__reset+0xfb0feab4>
8111fa54:	1829883a 	mov	r20,r3
8111fa58:	003d1806 	br	8111eebc <__reset+0xfb0feebc>
8111fa5c:	1829883a 	mov	r20,r3
8111fa60:	003ccd06 	br	8111ed98 <__reset+0xfb0fed98>
8111fa64:	0025883a 	mov	r18,zero
8111fa68:	003fe906 	br	8111fa10 <__reset+0xfb0ffa10>
8111fa6c:	d8802217 	ldw	r2,136(sp)
8111fa70:	80c00043 	ldbu	r3,1(r16)
8111fa74:	5021883a 	mov	r16,r10
8111fa78:	12400017 	ldw	r9,0(r2)
8111fa7c:	10800104 	addi	r2,r2,4
8111fa80:	d8802215 	stw	r2,136(sp)
8111fa84:	483faf0e 	bge	r9,zero,8111f944 <__reset+0xfb0ff944>
8111fa88:	18c03fcc 	andi	r3,r3,255
8111fa8c:	18c0201c 	xori	r3,r3,128
8111fa90:	027fffc4 	movi	r9,-1
8111fa94:	18ffe004 	addi	r3,r3,-128
8111fa98:	003b6506 	br	8111e830 <__reset+0xfb0fe830>
8111fa9c:	d9c01d85 	stb	r7,118(sp)
8111faa0:	003ca006 	br	8111ed24 <__reset+0xfb0fed24>
8111faa4:	d9c01d85 	stb	r7,118(sp)
8111faa8:	003cad06 	br	8111ed60 <__reset+0xfb0fed60>
8111faac:	d9c01d85 	stb	r7,118(sp)
8111fab0:	003d7d06 	br	8111f0a8 <__reset+0xfb0ff0a8>
8111fab4:	d9c01d85 	stb	r7,118(sp)
8111fab8:	003d5f06 	br	8111f038 <__reset+0xfb0ff038>
8111fabc:	a080004c 	andi	r2,r20,1
8111fac0:	0039883a 	mov	fp,zero
8111fac4:	10000526 	beq	r2,zero,8111fadc <___vfiprintf_internal_r+0x1430>
8111fac8:	00800c04 	movi	r2,48
8111facc:	d88019c5 	stb	r2,103(sp)
8111fad0:	dcc02717 	ldw	r19,156(sp)
8111fad4:	dd4019c4 	addi	r21,sp,103
8111fad8:	003bf606 	br	8111eab4 <__reset+0xfb0feab4>
8111fadc:	0027883a 	mov	r19,zero
8111fae0:	dd401a04 	addi	r21,sp,104
8111fae4:	003bf306 	br	8111eab4 <__reset+0xfb0feab4>
8111fae8:	d9c01d85 	stb	r7,118(sp)
8111faec:	003dc806 	br	8111f210 <__reset+0xfb0ff210>
8111faf0:	d9c01d85 	stb	r7,118(sp)
8111faf4:	003d3a06 	br	8111efe0 <__reset+0xfb0fefe0>
8111faf8:	d9c01d85 	stb	r7,118(sp)
8111fafc:	003d2a06 	br	8111efa8 <__reset+0xfb0fefa8>
8111fb00:	d9c01d85 	stb	r7,118(sp)
8111fb04:	003cde06 	br	8111ee80 <__reset+0xfb0fee80>
8111fb08:	d9c01d85 	stb	r7,118(sp)
8111fb0c:	003cbc06 	br	8111ee00 <__reset+0xfb0fee00>

8111fb10 <__vfiprintf_internal>:
8111fb10:	00a04534 	movhi	r2,33044
8111fb14:	10b73304 	addi	r2,r2,-9012
8111fb18:	300f883a 	mov	r7,r6
8111fb1c:	280d883a 	mov	r6,r5
8111fb20:	200b883a 	mov	r5,r4
8111fb24:	11000017 	ldw	r4,0(r2)
8111fb28:	111e6ac1 	jmpi	8111e6ac <___vfiprintf_internal_r>

8111fb2c <__sbprintf>:
8111fb2c:	defee204 	addi	sp,sp,-1144
8111fb30:	de00012e 	bgeu	sp,et,8111fb38 <__sbprintf+0xc>
8111fb34:	003b68fa 	trap	3
8111fb38:	2880030b 	ldhu	r2,12(r5)
8111fb3c:	2ac01917 	ldw	r11,100(r5)
8111fb40:	2a80038b 	ldhu	r10,14(r5)
8111fb44:	2a400717 	ldw	r9,28(r5)
8111fb48:	2a000917 	ldw	r8,36(r5)
8111fb4c:	00c10004 	movi	r3,1024
8111fb50:	dc011a15 	stw	r16,1128(sp)
8111fb54:	10bfff4c 	andi	r2,r2,65533
8111fb58:	2821883a 	mov	r16,r5
8111fb5c:	d8cb883a 	add	r5,sp,r3
8111fb60:	dc811c15 	stw	r18,1136(sp)
8111fb64:	dc411b15 	stw	r17,1132(sp)
8111fb68:	dfc11d15 	stw	ra,1140(sp)
8111fb6c:	2025883a 	mov	r18,r4
8111fb70:	d881030d 	sth	r2,1036(sp)
8111fb74:	dac11915 	stw	r11,1124(sp)
8111fb78:	da81038d 	sth	r10,1038(sp)
8111fb7c:	da410715 	stw	r9,1052(sp)
8111fb80:	da010915 	stw	r8,1060(sp)
8111fb84:	dec10015 	stw	sp,1024(sp)
8111fb88:	dec10415 	stw	sp,1040(sp)
8111fb8c:	d8c10215 	stw	r3,1032(sp)
8111fb90:	d8c10515 	stw	r3,1044(sp)
8111fb94:	d8010615 	stw	zero,1048(sp)
8111fb98:	111e6ac0 	call	8111e6ac <___vfiprintf_internal_r>
8111fb9c:	1023883a 	mov	r17,r2
8111fba0:	10000416 	blt	r2,zero,8111fbb4 <__sbprintf+0x88>
8111fba4:	d9410004 	addi	r5,sp,1024
8111fba8:	9009883a 	mov	r4,r18
8111fbac:	1117cec0 	call	81117cec <_fflush_r>
8111fbb0:	10000d1e 	bne	r2,zero,8111fbe8 <__sbprintf+0xbc>
8111fbb4:	d881030b 	ldhu	r2,1036(sp)
8111fbb8:	1080100c 	andi	r2,r2,64
8111fbbc:	10000326 	beq	r2,zero,8111fbcc <__sbprintf+0xa0>
8111fbc0:	8080030b 	ldhu	r2,12(r16)
8111fbc4:	10801014 	ori	r2,r2,64
8111fbc8:	8080030d 	sth	r2,12(r16)
8111fbcc:	8805883a 	mov	r2,r17
8111fbd0:	dfc11d17 	ldw	ra,1140(sp)
8111fbd4:	dc811c17 	ldw	r18,1136(sp)
8111fbd8:	dc411b17 	ldw	r17,1132(sp)
8111fbdc:	dc011a17 	ldw	r16,1128(sp)
8111fbe0:	dec11e04 	addi	sp,sp,1144
8111fbe4:	f800283a 	ret
8111fbe8:	047fffc4 	movi	r17,-1
8111fbec:	003ff106 	br	8111fbb4 <__reset+0xfb0ffbb4>

8111fbf0 <__swbuf_r>:
8111fbf0:	defffb04 	addi	sp,sp,-20
8111fbf4:	de00012e 	bgeu	sp,et,8111fbfc <__swbuf_r+0xc>
8111fbf8:	003b68fa 	trap	3
8111fbfc:	dcc00315 	stw	r19,12(sp)
8111fc00:	dc800215 	stw	r18,8(sp)
8111fc04:	dc000015 	stw	r16,0(sp)
8111fc08:	dfc00415 	stw	ra,16(sp)
8111fc0c:	dc400115 	stw	r17,4(sp)
8111fc10:	2025883a 	mov	r18,r4
8111fc14:	2827883a 	mov	r19,r5
8111fc18:	3021883a 	mov	r16,r6
8111fc1c:	20000226 	beq	r4,zero,8111fc28 <__swbuf_r+0x38>
8111fc20:	20800e17 	ldw	r2,56(r4)
8111fc24:	10004226 	beq	r2,zero,8111fd30 <__swbuf_r+0x140>
8111fc28:	80800617 	ldw	r2,24(r16)
8111fc2c:	8100030b 	ldhu	r4,12(r16)
8111fc30:	80800215 	stw	r2,8(r16)
8111fc34:	2080020c 	andi	r2,r4,8
8111fc38:	10003626 	beq	r2,zero,8111fd14 <__swbuf_r+0x124>
8111fc3c:	80c00417 	ldw	r3,16(r16)
8111fc40:	18003426 	beq	r3,zero,8111fd14 <__swbuf_r+0x124>
8111fc44:	2088000c 	andi	r2,r4,8192
8111fc48:	9c403fcc 	andi	r17,r19,255
8111fc4c:	10001a26 	beq	r2,zero,8111fcb8 <__swbuf_r+0xc8>
8111fc50:	80800017 	ldw	r2,0(r16)
8111fc54:	81000517 	ldw	r4,20(r16)
8111fc58:	10c7c83a 	sub	r3,r2,r3
8111fc5c:	1900200e 	bge	r3,r4,8111fce0 <__swbuf_r+0xf0>
8111fc60:	18c00044 	addi	r3,r3,1
8111fc64:	81000217 	ldw	r4,8(r16)
8111fc68:	11400044 	addi	r5,r2,1
8111fc6c:	81400015 	stw	r5,0(r16)
8111fc70:	213fffc4 	addi	r4,r4,-1
8111fc74:	81000215 	stw	r4,8(r16)
8111fc78:	14c00005 	stb	r19,0(r2)
8111fc7c:	80800517 	ldw	r2,20(r16)
8111fc80:	10c01e26 	beq	r2,r3,8111fcfc <__swbuf_r+0x10c>
8111fc84:	8080030b 	ldhu	r2,12(r16)
8111fc88:	1080004c 	andi	r2,r2,1
8111fc8c:	10000226 	beq	r2,zero,8111fc98 <__swbuf_r+0xa8>
8111fc90:	00800284 	movi	r2,10
8111fc94:	88801926 	beq	r17,r2,8111fcfc <__swbuf_r+0x10c>
8111fc98:	8805883a 	mov	r2,r17
8111fc9c:	dfc00417 	ldw	ra,16(sp)
8111fca0:	dcc00317 	ldw	r19,12(sp)
8111fca4:	dc800217 	ldw	r18,8(sp)
8111fca8:	dc400117 	ldw	r17,4(sp)
8111fcac:	dc000017 	ldw	r16,0(sp)
8111fcb0:	dec00504 	addi	sp,sp,20
8111fcb4:	f800283a 	ret
8111fcb8:	81401917 	ldw	r5,100(r16)
8111fcbc:	00b7ffc4 	movi	r2,-8193
8111fcc0:	21080014 	ori	r4,r4,8192
8111fcc4:	2884703a 	and	r2,r5,r2
8111fcc8:	80801915 	stw	r2,100(r16)
8111fccc:	80800017 	ldw	r2,0(r16)
8111fcd0:	8100030d 	sth	r4,12(r16)
8111fcd4:	81000517 	ldw	r4,20(r16)
8111fcd8:	10c7c83a 	sub	r3,r2,r3
8111fcdc:	193fe016 	blt	r3,r4,8111fc60 <__reset+0xfb0ffc60>
8111fce0:	800b883a 	mov	r5,r16
8111fce4:	9009883a 	mov	r4,r18
8111fce8:	1117cec0 	call	81117cec <_fflush_r>
8111fcec:	1000071e 	bne	r2,zero,8111fd0c <__swbuf_r+0x11c>
8111fcf0:	80800017 	ldw	r2,0(r16)
8111fcf4:	00c00044 	movi	r3,1
8111fcf8:	003fda06 	br	8111fc64 <__reset+0xfb0ffc64>
8111fcfc:	800b883a 	mov	r5,r16
8111fd00:	9009883a 	mov	r4,r18
8111fd04:	1117cec0 	call	81117cec <_fflush_r>
8111fd08:	103fe326 	beq	r2,zero,8111fc98 <__reset+0xfb0ffc98>
8111fd0c:	00bfffc4 	movi	r2,-1
8111fd10:	003fe206 	br	8111fc9c <__reset+0xfb0ffc9c>
8111fd14:	800b883a 	mov	r5,r16
8111fd18:	9009883a 	mov	r4,r18
8111fd1c:	11160780 	call	81116078 <__swsetup_r>
8111fd20:	103ffa1e 	bne	r2,zero,8111fd0c <__reset+0xfb0ffd0c>
8111fd24:	8100030b 	ldhu	r4,12(r16)
8111fd28:	80c00417 	ldw	r3,16(r16)
8111fd2c:	003fc506 	br	8111fc44 <__reset+0xfb0ffc44>
8111fd30:	11180e80 	call	811180e8 <__sinit>
8111fd34:	003fbc06 	br	8111fc28 <__reset+0xfb0ffc28>

8111fd38 <__swbuf>:
8111fd38:	00a04534 	movhi	r2,33044
8111fd3c:	10b73304 	addi	r2,r2,-9012
8111fd40:	280d883a 	mov	r6,r5
8111fd44:	200b883a 	mov	r5,r4
8111fd48:	11000017 	ldw	r4,0(r2)
8111fd4c:	111fbf01 	jmpi	8111fbf0 <__swbuf_r>

8111fd50 <_calloc_r>:
8111fd50:	298b383a 	mul	r5,r5,r6
8111fd54:	defffe04 	addi	sp,sp,-8
8111fd58:	de00012e 	bgeu	sp,et,8111fd60 <_calloc_r+0x10>
8111fd5c:	003b68fa 	trap	3
8111fd60:	dfc00115 	stw	ra,4(sp)
8111fd64:	dc000015 	stw	r16,0(sp)
8111fd68:	110ee080 	call	8110ee08 <_malloc_r>
8111fd6c:	10002926 	beq	r2,zero,8111fe14 <_calloc_r+0xc4>
8111fd70:	11bfff17 	ldw	r6,-4(r2)
8111fd74:	1021883a 	mov	r16,r2
8111fd78:	00bfff04 	movi	r2,-4
8111fd7c:	308c703a 	and	r6,r6,r2
8111fd80:	00c00904 	movi	r3,36
8111fd84:	308d883a 	add	r6,r6,r2
8111fd88:	19801636 	bltu	r3,r6,8111fde4 <_calloc_r+0x94>
8111fd8c:	008004c4 	movi	r2,19
8111fd90:	11800b2e 	bgeu	r2,r6,8111fdc0 <_calloc_r+0x70>
8111fd94:	80000015 	stw	zero,0(r16)
8111fd98:	80000115 	stw	zero,4(r16)
8111fd9c:	008006c4 	movi	r2,27
8111fda0:	11801a2e 	bgeu	r2,r6,8111fe0c <_calloc_r+0xbc>
8111fda4:	80000215 	stw	zero,8(r16)
8111fda8:	80000315 	stw	zero,12(r16)
8111fdac:	30c0151e 	bne	r6,r3,8111fe04 <_calloc_r+0xb4>
8111fdb0:	80000415 	stw	zero,16(r16)
8111fdb4:	80800604 	addi	r2,r16,24
8111fdb8:	80000515 	stw	zero,20(r16)
8111fdbc:	00000106 	br	8111fdc4 <_calloc_r+0x74>
8111fdc0:	8005883a 	mov	r2,r16
8111fdc4:	10000015 	stw	zero,0(r2)
8111fdc8:	10000115 	stw	zero,4(r2)
8111fdcc:	10000215 	stw	zero,8(r2)
8111fdd0:	8005883a 	mov	r2,r16
8111fdd4:	dfc00117 	ldw	ra,4(sp)
8111fdd8:	dc000017 	ldw	r16,0(sp)
8111fddc:	dec00204 	addi	sp,sp,8
8111fde0:	f800283a 	ret
8111fde4:	000b883a 	mov	r5,zero
8111fde8:	8009883a 	mov	r4,r16
8111fdec:	110f76c0 	call	8110f76c <memset>
8111fdf0:	8005883a 	mov	r2,r16
8111fdf4:	dfc00117 	ldw	ra,4(sp)
8111fdf8:	dc000017 	ldw	r16,0(sp)
8111fdfc:	dec00204 	addi	sp,sp,8
8111fe00:	f800283a 	ret
8111fe04:	80800404 	addi	r2,r16,16
8111fe08:	003fee06 	br	8111fdc4 <__reset+0xfb0ffdc4>
8111fe0c:	80800204 	addi	r2,r16,8
8111fe10:	003fec06 	br	8111fdc4 <__reset+0xfb0ffdc4>
8111fe14:	0005883a 	mov	r2,zero
8111fe18:	003fee06 	br	8111fdd4 <__reset+0xfb0ffdd4>

8111fe1c <_fclose_r>:
8111fe1c:	28003b26 	beq	r5,zero,8111ff0c <_fclose_r+0xf0>
8111fe20:	defffc04 	addi	sp,sp,-16
8111fe24:	de00012e 	bgeu	sp,et,8111fe2c <_fclose_r+0x10>
8111fe28:	003b68fa 	trap	3
8111fe2c:	dc400115 	stw	r17,4(sp)
8111fe30:	dc000015 	stw	r16,0(sp)
8111fe34:	dfc00315 	stw	ra,12(sp)
8111fe38:	dc800215 	stw	r18,8(sp)
8111fe3c:	2023883a 	mov	r17,r4
8111fe40:	2821883a 	mov	r16,r5
8111fe44:	20000226 	beq	r4,zero,8111fe50 <_fclose_r+0x34>
8111fe48:	20800e17 	ldw	r2,56(r4)
8111fe4c:	10002726 	beq	r2,zero,8111feec <_fclose_r+0xd0>
8111fe50:	8080030f 	ldh	r2,12(r16)
8111fe54:	1000071e 	bne	r2,zero,8111fe74 <_fclose_r+0x58>
8111fe58:	0005883a 	mov	r2,zero
8111fe5c:	dfc00317 	ldw	ra,12(sp)
8111fe60:	dc800217 	ldw	r18,8(sp)
8111fe64:	dc400117 	ldw	r17,4(sp)
8111fe68:	dc000017 	ldw	r16,0(sp)
8111fe6c:	dec00404 	addi	sp,sp,16
8111fe70:	f800283a 	ret
8111fe74:	800b883a 	mov	r5,r16
8111fe78:	8809883a 	mov	r4,r17
8111fe7c:	1117ac80 	call	81117ac8 <__sflush_r>
8111fe80:	1025883a 	mov	r18,r2
8111fe84:	80800b17 	ldw	r2,44(r16)
8111fe88:	10000426 	beq	r2,zero,8111fe9c <_fclose_r+0x80>
8111fe8c:	81400717 	ldw	r5,28(r16)
8111fe90:	8809883a 	mov	r4,r17
8111fe94:	103ee83a 	callr	r2
8111fe98:	10001616 	blt	r2,zero,8111fef4 <_fclose_r+0xd8>
8111fe9c:	8080030b 	ldhu	r2,12(r16)
8111fea0:	1080200c 	andi	r2,r2,128
8111fea4:	1000151e 	bne	r2,zero,8111fefc <_fclose_r+0xe0>
8111fea8:	81400c17 	ldw	r5,48(r16)
8111feac:	28000526 	beq	r5,zero,8111fec4 <_fclose_r+0xa8>
8111feb0:	80801004 	addi	r2,r16,64
8111feb4:	28800226 	beq	r5,r2,8111fec0 <_fclose_r+0xa4>
8111feb8:	8809883a 	mov	r4,r17
8111febc:	11185800 	call	81118580 <_free_r>
8111fec0:	80000c15 	stw	zero,48(r16)
8111fec4:	81401117 	ldw	r5,68(r16)
8111fec8:	28000326 	beq	r5,zero,8111fed8 <_fclose_r+0xbc>
8111fecc:	8809883a 	mov	r4,r17
8111fed0:	11185800 	call	81118580 <_free_r>
8111fed4:	80001115 	stw	zero,68(r16)
8111fed8:	11180f80 	call	811180f8 <__sfp_lock_acquire>
8111fedc:	8000030d 	sth	zero,12(r16)
8111fee0:	11180fc0 	call	811180fc <__sfp_lock_release>
8111fee4:	9005883a 	mov	r2,r18
8111fee8:	003fdc06 	br	8111fe5c <__reset+0xfb0ffe5c>
8111feec:	11180e80 	call	811180e8 <__sinit>
8111fef0:	003fd706 	br	8111fe50 <__reset+0xfb0ffe50>
8111fef4:	04bfffc4 	movi	r18,-1
8111fef8:	003fe806 	br	8111fe9c <__reset+0xfb0ffe9c>
8111fefc:	81400417 	ldw	r5,16(r16)
8111ff00:	8809883a 	mov	r4,r17
8111ff04:	11185800 	call	81118580 <_free_r>
8111ff08:	003fe706 	br	8111fea8 <__reset+0xfb0ffea8>
8111ff0c:	0005883a 	mov	r2,zero
8111ff10:	f800283a 	ret

8111ff14 <fclose>:
8111ff14:	00a04534 	movhi	r2,33044
8111ff18:	10b73304 	addi	r2,r2,-9012
8111ff1c:	200b883a 	mov	r5,r4
8111ff20:	11000017 	ldw	r4,0(r2)
8111ff24:	111fe1c1 	jmpi	8111fe1c <_fclose_r>

8111ff28 <__fputwc>:
8111ff28:	defff804 	addi	sp,sp,-32
8111ff2c:	de00012e 	bgeu	sp,et,8111ff34 <__fputwc+0xc>
8111ff30:	003b68fa 	trap	3
8111ff34:	dcc00415 	stw	r19,16(sp)
8111ff38:	dc800315 	stw	r18,12(sp)
8111ff3c:	dc000115 	stw	r16,4(sp)
8111ff40:	dfc00715 	stw	ra,28(sp)
8111ff44:	dd400615 	stw	r21,24(sp)
8111ff48:	dd000515 	stw	r20,20(sp)
8111ff4c:	dc400215 	stw	r17,8(sp)
8111ff50:	2027883a 	mov	r19,r4
8111ff54:	2825883a 	mov	r18,r5
8111ff58:	3021883a 	mov	r16,r6
8111ff5c:	11190100 	call	81119010 <__locale_mb_cur_max>
8111ff60:	00c00044 	movi	r3,1
8111ff64:	10c03e26 	beq	r2,r3,81120060 <__fputwc+0x138>
8111ff68:	81c01704 	addi	r7,r16,92
8111ff6c:	900d883a 	mov	r6,r18
8111ff70:	d80b883a 	mov	r5,sp
8111ff74:	9809883a 	mov	r4,r19
8111ff78:	1120dac0 	call	81120dac <_wcrtomb_r>
8111ff7c:	1029883a 	mov	r20,r2
8111ff80:	00bfffc4 	movi	r2,-1
8111ff84:	a0802026 	beq	r20,r2,81120008 <__fputwc+0xe0>
8111ff88:	d9400003 	ldbu	r5,0(sp)
8111ff8c:	a0001c26 	beq	r20,zero,81120000 <__fputwc+0xd8>
8111ff90:	0023883a 	mov	r17,zero
8111ff94:	05400284 	movi	r21,10
8111ff98:	00000906 	br	8111ffc0 <__fputwc+0x98>
8111ff9c:	80800017 	ldw	r2,0(r16)
8111ffa0:	11400005 	stb	r5,0(r2)
8111ffa4:	80c00017 	ldw	r3,0(r16)
8111ffa8:	18c00044 	addi	r3,r3,1
8111ffac:	80c00015 	stw	r3,0(r16)
8111ffb0:	8c400044 	addi	r17,r17,1
8111ffb4:	dc45883a 	add	r2,sp,r17
8111ffb8:	8d00112e 	bgeu	r17,r20,81120000 <__fputwc+0xd8>
8111ffbc:	11400003 	ldbu	r5,0(r2)
8111ffc0:	80c00217 	ldw	r3,8(r16)
8111ffc4:	18ffffc4 	addi	r3,r3,-1
8111ffc8:	80c00215 	stw	r3,8(r16)
8111ffcc:	183ff30e 	bge	r3,zero,8111ff9c <__reset+0xfb0fff9c>
8111ffd0:	80800617 	ldw	r2,24(r16)
8111ffd4:	18801916 	blt	r3,r2,8112003c <__fputwc+0x114>
8111ffd8:	80800017 	ldw	r2,0(r16)
8111ffdc:	11400005 	stb	r5,0(r2)
8111ffe0:	80800017 	ldw	r2,0(r16)
8111ffe4:	10c00003 	ldbu	r3,0(r2)
8111ffe8:	10800044 	addi	r2,r2,1
8111ffec:	1d402326 	beq	r3,r21,8112007c <__fputwc+0x154>
8111fff0:	80800015 	stw	r2,0(r16)
8111fff4:	8c400044 	addi	r17,r17,1
8111fff8:	dc45883a 	add	r2,sp,r17
8111fffc:	8d3fef36 	bltu	r17,r20,8111ffbc <__reset+0xfb0fffbc>
81120000:	9005883a 	mov	r2,r18
81120004:	00000406 	br	81120018 <__fputwc+0xf0>
81120008:	80c0030b 	ldhu	r3,12(r16)
8112000c:	a005883a 	mov	r2,r20
81120010:	18c01014 	ori	r3,r3,64
81120014:	80c0030d 	sth	r3,12(r16)
81120018:	dfc00717 	ldw	ra,28(sp)
8112001c:	dd400617 	ldw	r21,24(sp)
81120020:	dd000517 	ldw	r20,20(sp)
81120024:	dcc00417 	ldw	r19,16(sp)
81120028:	dc800317 	ldw	r18,12(sp)
8112002c:	dc400217 	ldw	r17,8(sp)
81120030:	dc000117 	ldw	r16,4(sp)
81120034:	dec00804 	addi	sp,sp,32
81120038:	f800283a 	ret
8112003c:	800d883a 	mov	r6,r16
81120040:	29403fcc 	andi	r5,r5,255
81120044:	9809883a 	mov	r4,r19
81120048:	111fbf00 	call	8111fbf0 <__swbuf_r>
8112004c:	10bfffe0 	cmpeqi	r2,r2,-1
81120050:	10803fcc 	andi	r2,r2,255
81120054:	103fd626 	beq	r2,zero,8111ffb0 <__reset+0xfb0fffb0>
81120058:	00bfffc4 	movi	r2,-1
8112005c:	003fee06 	br	81120018 <__reset+0xfb100018>
81120060:	90ffffc4 	addi	r3,r18,-1
81120064:	01003f84 	movi	r4,254
81120068:	20ffbf36 	bltu	r4,r3,8111ff68 <__reset+0xfb0fff68>
8112006c:	900b883a 	mov	r5,r18
81120070:	dc800005 	stb	r18,0(sp)
81120074:	1029883a 	mov	r20,r2
81120078:	003fc506 	br	8111ff90 <__reset+0xfb0fff90>
8112007c:	800d883a 	mov	r6,r16
81120080:	a80b883a 	mov	r5,r21
81120084:	9809883a 	mov	r4,r19
81120088:	111fbf00 	call	8111fbf0 <__swbuf_r>
8112008c:	10bfffe0 	cmpeqi	r2,r2,-1
81120090:	003fef06 	br	81120050 <__reset+0xfb100050>

81120094 <_fputwc_r>:
81120094:	3080030b 	ldhu	r2,12(r6)
81120098:	10c8000c 	andi	r3,r2,8192
8112009c:	1800051e 	bne	r3,zero,811200b4 <_fputwc_r+0x20>
811200a0:	30c01917 	ldw	r3,100(r6)
811200a4:	10880014 	ori	r2,r2,8192
811200a8:	3080030d 	sth	r2,12(r6)
811200ac:	18880014 	ori	r2,r3,8192
811200b0:	30801915 	stw	r2,100(r6)
811200b4:	111ff281 	jmpi	8111ff28 <__fputwc>

811200b8 <fputwc>:
811200b8:	00a04534 	movhi	r2,33044
811200bc:	defffc04 	addi	sp,sp,-16
811200c0:	10b73304 	addi	r2,r2,-9012
811200c4:	de00012e 	bgeu	sp,et,811200cc <fputwc+0x14>
811200c8:	003b68fa 	trap	3
811200cc:	dc000115 	stw	r16,4(sp)
811200d0:	14000017 	ldw	r16,0(r2)
811200d4:	dc400215 	stw	r17,8(sp)
811200d8:	dfc00315 	stw	ra,12(sp)
811200dc:	2023883a 	mov	r17,r4
811200e0:	80000226 	beq	r16,zero,811200ec <fputwc+0x34>
811200e4:	80800e17 	ldw	r2,56(r16)
811200e8:	10001026 	beq	r2,zero,8112012c <fputwc+0x74>
811200ec:	2880030b 	ldhu	r2,12(r5)
811200f0:	10c8000c 	andi	r3,r2,8192
811200f4:	1800051e 	bne	r3,zero,8112010c <fputwc+0x54>
811200f8:	28c01917 	ldw	r3,100(r5)
811200fc:	10880014 	ori	r2,r2,8192
81120100:	2880030d 	sth	r2,12(r5)
81120104:	18880014 	ori	r2,r3,8192
81120108:	28801915 	stw	r2,100(r5)
8112010c:	280d883a 	mov	r6,r5
81120110:	8009883a 	mov	r4,r16
81120114:	880b883a 	mov	r5,r17
81120118:	dfc00317 	ldw	ra,12(sp)
8112011c:	dc400217 	ldw	r17,8(sp)
81120120:	dc000117 	ldw	r16,4(sp)
81120124:	dec00404 	addi	sp,sp,16
81120128:	111ff281 	jmpi	8111ff28 <__fputwc>
8112012c:	8009883a 	mov	r4,r16
81120130:	d9400015 	stw	r5,0(sp)
81120134:	11180e80 	call	811180e8 <__sinit>
81120138:	d9400017 	ldw	r5,0(sp)
8112013c:	003feb06 	br	811200ec <__reset+0xfb1000ec>

81120140 <rshift>:
81120140:	2807d17a 	srai	r3,r5,5
81120144:	20800417 	ldw	r2,16(r4)
81120148:	22000504 	addi	r8,r4,20
8112014c:	1880250e 	bge	r3,r2,811201e4 <rshift+0xa4>
81120150:	1085883a 	add	r2,r2,r2
81120154:	18c7883a 	add	r3,r3,r3
81120158:	1085883a 	add	r2,r2,r2
8112015c:	18c7883a 	add	r3,r3,r3
81120160:	294007cc 	andi	r5,r5,31
81120164:	4085883a 	add	r2,r8,r2
81120168:	40c7883a 	add	r3,r8,r3
8112016c:	28002026 	beq	r5,zero,811201f0 <rshift+0xb0>
81120170:	19800017 	ldw	r6,0(r3)
81120174:	02c00804 	movi	r11,32
81120178:	19c00104 	addi	r7,r3,4
8112017c:	5957c83a 	sub	r11,r11,r5
81120180:	314cd83a 	srl	r6,r6,r5
81120184:	38802c2e 	bgeu	r7,r2,81120238 <rshift+0xf8>
81120188:	4015883a 	mov	r10,r8
8112018c:	3a400017 	ldw	r9,0(r7)
81120190:	52800104 	addi	r10,r10,4
81120194:	39c00104 	addi	r7,r7,4
81120198:	4ad2983a 	sll	r9,r9,r11
8112019c:	498cb03a 	or	r6,r9,r6
811201a0:	51bfff15 	stw	r6,-4(r10)
811201a4:	39bfff17 	ldw	r6,-4(r7)
811201a8:	314cd83a 	srl	r6,r6,r5
811201ac:	38bff736 	bltu	r7,r2,8112018c <__reset+0xfb10018c>
811201b0:	10c7c83a 	sub	r3,r2,r3
811201b4:	18fffec4 	addi	r3,r3,-5
811201b8:	1806d0ba 	srli	r3,r3,2
811201bc:	18c00044 	addi	r3,r3,1
811201c0:	18c7883a 	add	r3,r3,r3
811201c4:	18c7883a 	add	r3,r3,r3
811201c8:	40c7883a 	add	r3,r8,r3
811201cc:	19800015 	stw	r6,0(r3)
811201d0:	30000126 	beq	r6,zero,811201d8 <rshift+0x98>
811201d4:	18c00104 	addi	r3,r3,4
811201d8:	1a05c83a 	sub	r2,r3,r8
811201dc:	1005d0ba 	srai	r2,r2,2
811201e0:	00001206 	br	8112022c <rshift+0xec>
811201e4:	20000415 	stw	zero,16(r4)
811201e8:	20000515 	stw	zero,20(r4)
811201ec:	f800283a 	ret
811201f0:	18bffc2e 	bgeu	r3,r2,811201e4 <__reset+0xfb1001e4>
811201f4:	180d883a 	mov	r6,r3
811201f8:	400b883a 	mov	r5,r8
811201fc:	31c00017 	ldw	r7,0(r6)
81120200:	29400104 	addi	r5,r5,4
81120204:	31800104 	addi	r6,r6,4
81120208:	29ffff15 	stw	r7,-4(r5)
8112020c:	30bffb36 	bltu	r6,r2,811201fc <__reset+0xfb1001fc>
81120210:	00c6303a 	nor	r3,zero,r3
81120214:	1885883a 	add	r2,r3,r2
81120218:	1004d0ba 	srli	r2,r2,2
8112021c:	10800044 	addi	r2,r2,1
81120220:	1085883a 	add	r2,r2,r2
81120224:	1085883a 	add	r2,r2,r2
81120228:	1005d0ba 	srai	r2,r2,2
8112022c:	20800415 	stw	r2,16(r4)
81120230:	103fed26 	beq	r2,zero,811201e8 <__reset+0xfb1001e8>
81120234:	f800283a 	ret
81120238:	4007883a 	mov	r3,r8
8112023c:	003fe306 	br	811201cc <__reset+0xfb1001cc>

81120240 <__gethex>:
81120240:	deffeb04 	addi	sp,sp,-84
81120244:	de00012e 	bgeu	sp,et,8112024c <__gethex+0xc>
81120248:	003b68fa 	trap	3
8112024c:	dfc01415 	stw	ra,80(sp)
81120250:	dd801115 	stw	r22,68(sp)
81120254:	dcc00e15 	stw	r19,56(sp)
81120258:	dc800d15 	stw	r18,52(sp)
8112025c:	2827883a 	mov	r19,r5
81120260:	d9000115 	stw	r4,4(sp)
81120264:	d9800015 	stw	r6,0(sp)
81120268:	d9c00415 	stw	r7,16(sp)
8112026c:	df001315 	stw	fp,76(sp)
81120270:	ddc01215 	stw	r23,72(sp)
81120274:	dd401015 	stw	r21,64(sp)
81120278:	dd000f15 	stw	r20,60(sp)
8112027c:	dc400c15 	stw	r17,48(sp)
81120280:	dc000b15 	stw	r16,44(sp)
81120284:	11190340 	call	81119034 <_localeconv_r>
81120288:	14800017 	ldw	r18,0(r2)
8112028c:	9009883a 	mov	r4,r18
81120290:	110ffb80 	call	8110ffb8 <strlen>
81120294:	98c00017 	ldw	r3,0(r19)
81120298:	102d883a 	mov	r22,r2
8112029c:	9085883a 	add	r2,r18,r2
811202a0:	10bfffc3 	ldbu	r2,-1(r2)
811202a4:	19000083 	ldbu	r4,2(r3)
811202a8:	d8800305 	stb	r2,12(sp)
811202ac:	00800c04 	movi	r2,48
811202b0:	2081521e 	bne	r4,r2,811207fc <__gethex+0x5bc>
811202b4:	017fff84 	movi	r5,-2
811202b8:	188000c4 	addi	r2,r3,3
811202bc:	28cbc83a 	sub	r5,r5,r3
811202c0:	200d883a 	mov	r6,r4
811202c4:	28a3883a 	add	r17,r5,r2
811202c8:	102b883a 	mov	r21,r2
811202cc:	10800044 	addi	r2,r2,1
811202d0:	113fffc3 	ldbu	r4,-1(r2)
811202d4:	21bffb26 	beq	r4,r6,811202c4 <__reset+0xfb1002c4>
811202d8:	05204534 	movhi	r20,33044
811202dc:	a52ec504 	addi	r20,r20,-17644
811202e0:	a109883a 	add	r4,r20,r4
811202e4:	20800003 	ldbu	r2,0(r4)
811202e8:	10008826 	beq	r2,zero,8112050c <__gethex+0x2cc>
811202ec:	a8800003 	ldbu	r2,0(r21)
811202f0:	0015883a 	mov	r10,zero
811202f4:	002f883a 	mov	r23,zero
811202f8:	a085883a 	add	r2,r20,r2
811202fc:	10800003 	ldbu	r2,0(r2)
81120300:	a821883a 	mov	r16,r21
81120304:	10000526 	beq	r2,zero,8112031c <__gethex+0xdc>
81120308:	84000044 	addi	r16,r16,1
8112030c:	80800003 	ldbu	r2,0(r16)
81120310:	a085883a 	add	r2,r20,r2
81120314:	10800003 	ldbu	r2,0(r2)
81120318:	103ffb1e 	bne	r2,zero,81120308 <__reset+0xfb100308>
8112031c:	b00d883a 	mov	r6,r22
81120320:	900b883a 	mov	r5,r18
81120324:	8009883a 	mov	r4,r16
81120328:	da800a15 	stw	r10,40(sp)
8112032c:	1120cdc0 	call	81120cdc <strncmp>
81120330:	da800a17 	ldw	r10,40(sp)
81120334:	1000031e 	bne	r2,zero,81120344 <__gethex+0x104>
81120338:	b8015226 	beq	r23,zero,81120884 <__gethex+0x644>
8112033c:	80800003 	ldbu	r2,0(r16)
81120340:	00000206 	br	8112034c <__gethex+0x10c>
81120344:	80800003 	ldbu	r2,0(r16)
81120348:	b8011f26 	beq	r23,zero,811207c8 <__gethex+0x588>
8112034c:	85efc83a 	sub	r23,r16,r23
81120350:	bdef883a 	add	r23,r23,r23
81120354:	bdef883a 	add	r23,r23,r23
81120358:	05efc83a 	sub	r23,zero,r23
8112035c:	10803fcc 	andi	r2,r2,255
81120360:	01001404 	movi	r4,80
81120364:	11008626 	beq	r2,r4,81120580 <__gethex+0x340>
81120368:	01001c04 	movi	r4,112
8112036c:	11008426 	beq	r2,r4,81120580 <__gethex+0x340>
81120370:	8039883a 	mov	fp,r16
81120374:	9c000015 	stw	r16,0(r19)
81120378:	5000711e 	bne	r10,zero,81120540 <__gethex+0x300>
8112037c:	e545c83a 	sub	r2,fp,r21
81120380:	10bfffc4 	addi	r2,r2,-1
81120384:	010001c4 	movi	r4,7
81120388:	000b883a 	mov	r5,zero
8112038c:	2080030e 	bge	r4,r2,8112039c <__gethex+0x15c>
81120390:	1005d07a 	srai	r2,r2,1
81120394:	29400044 	addi	r5,r5,1
81120398:	20bffd16 	blt	r4,r2,81120390 <__reset+0xfb100390>
8112039c:	d9000117 	ldw	r4,4(sp)
811203a0:	11195500 	call	81119550 <_Balloc>
811203a4:	10c00504 	addi	r3,r2,20
811203a8:	d8c00215 	stw	r3,8(sp)
811203ac:	1021883a 	mov	r16,r2
811203b0:	af01732e 	bgeu	r21,fp,81120980 <__gethex+0x740>
811203b4:	dc400303 	ldbu	r17,12(sp)
811203b8:	03400044 	movi	r13,1
811203bc:	1815883a 	mov	r10,r3
811203c0:	0013883a 	mov	r9,zero
811203c4:	0027883a 	mov	r19,zero
811203c8:	6d9bc83a 	sub	r13,r13,r22
811203cc:	02c00804 	movi	r11,32
811203d0:	e0bfffc3 	ldbu	r2,-1(fp)
811203d4:	e3bfffc4 	addi	r14,fp,-1
811203d8:	88803026 	beq	r17,r2,8112049c <__gethex+0x25c>
811203dc:	9ac04526 	beq	r19,r11,811204f4 <__gethex+0x2b4>
811203e0:	980b883a 	mov	r5,r19
811203e4:	9cc00104 	addi	r19,r19,4
811203e8:	e13fffc3 	ldbu	r4,-1(fp)
811203ec:	7039883a 	mov	fp,r14
811203f0:	a109883a 	add	r4,r20,r4
811203f4:	20800003 	ldbu	r2,0(r4)
811203f8:	108003cc 	andi	r2,r2,15
811203fc:	1144983a 	sll	r2,r2,r5
81120400:	4892b03a 	or	r9,r9,r2
81120404:	af3ff236 	bltu	r21,fp,811203d0 <__reset+0xfb1003d0>
81120408:	d8c00217 	ldw	r3,8(sp)
8112040c:	50800104 	addi	r2,r10,4
81120410:	52400015 	stw	r9,0(r10)
81120414:	10c5c83a 	sub	r2,r2,r3
81120418:	1005d0ba 	srai	r2,r2,2
8112041c:	4809883a 	mov	r4,r9
81120420:	80800415 	stw	r2,16(r16)
81120424:	1022917a 	slli	r17,r2,5
81120428:	111985c0 	call	8111985c <__hi0bits>
8112042c:	d8c00017 	ldw	r3,0(sp)
81120430:	8885c83a 	sub	r2,r17,r2
81120434:	1c800017 	ldw	r18,0(r3)
81120438:	9080c716 	blt	r18,r2,81120758 <__gethex+0x518>
8112043c:	1480e416 	blt	r2,r18,811207d0 <__gethex+0x590>
81120440:	0027883a 	mov	r19,zero
81120444:	d8c00017 	ldw	r3,0(sp)
81120448:	18800217 	ldw	r2,8(r3)
8112044c:	15c08d16 	blt	r2,r23,81120684 <__gethex+0x444>
81120450:	d8c00017 	ldw	r3,0(sp)
81120454:	18800117 	ldw	r2,4(r3)
81120458:	b880aa0e 	bge	r23,r2,81120704 <__gethex+0x4c4>
8112045c:	15efc83a 	sub	r23,r2,r23
81120460:	bc80ed16 	blt	r23,r18,81120818 <__gethex+0x5d8>
81120464:	18c00317 	ldw	r3,12(r3)
81120468:	01000084 	movi	r4,2
8112046c:	19014926 	beq	r3,r4,81120994 <__gethex+0x754>
81120470:	010000c4 	movi	r4,3
81120474:	19012e26 	beq	r3,r4,81120930 <__gethex+0x6f0>
81120478:	01000044 	movi	r4,1
8112047c:	19014826 	beq	r3,r4,811209a0 <__gethex+0x760>
81120480:	d9000117 	ldw	r4,4(sp)
81120484:	800b883a 	mov	r5,r16
81120488:	11196000 	call	81119600 <_Bfree>
8112048c:	d8801517 	ldw	r2,84(sp)
81120490:	10000015 	stw	zero,0(r2)
81120494:	00801404 	movi	r2,80
81120498:	00002b06 	br	81120548 <__gethex+0x308>
8112049c:	735f883a 	add	r15,r14,r13
811204a0:	7d7fce36 	bltu	r15,r21,811203dc <__reset+0xfb1003dc>
811204a4:	7809883a 	mov	r4,r15
811204a8:	b00d883a 	mov	r6,r22
811204ac:	900b883a 	mov	r5,r18
811204b0:	da400515 	stw	r9,20(sp)
811204b4:	da800a15 	stw	r10,40(sp)
811204b8:	dac00915 	stw	r11,36(sp)
811204bc:	db400815 	stw	r13,32(sp)
811204c0:	db800615 	stw	r14,24(sp)
811204c4:	dbc00715 	stw	r15,28(sp)
811204c8:	1120cdc0 	call	81120cdc <strncmp>
811204cc:	da400517 	ldw	r9,20(sp)
811204d0:	da800a17 	ldw	r10,40(sp)
811204d4:	dac00917 	ldw	r11,36(sp)
811204d8:	db400817 	ldw	r13,32(sp)
811204dc:	db800617 	ldw	r14,24(sp)
811204e0:	dbc00717 	ldw	r15,28(sp)
811204e4:	103fbd1e 	bne	r2,zero,811203dc <__reset+0xfb1003dc>
811204e8:	7839883a 	mov	fp,r15
811204ec:	af3fb836 	bltu	r21,fp,811203d0 <__reset+0xfb1003d0>
811204f0:	003fc506 	br	81120408 <__reset+0xfb100408>
811204f4:	04c00104 	movi	r19,4
811204f8:	52400015 	stw	r9,0(r10)
811204fc:	000b883a 	mov	r5,zero
81120500:	54d5883a 	add	r10,r10,r19
81120504:	0013883a 	mov	r9,zero
81120508:	003fb706 	br	811203e8 <__reset+0xfb1003e8>
8112050c:	b00d883a 	mov	r6,r22
81120510:	900b883a 	mov	r5,r18
81120514:	a809883a 	mov	r4,r21
81120518:	1120cdc0 	call	81120cdc <strncmp>
8112051c:	10006426 	beq	r2,zero,811206b0 <__gethex+0x470>
81120520:	a8800003 	ldbu	r2,0(r21)
81120524:	a821883a 	mov	r16,r21
81120528:	10803fcc 	andi	r2,r2,255
8112052c:	01001404 	movi	r4,80
81120530:	11001126 	beq	r2,r4,81120578 <__gethex+0x338>
81120534:	01001c04 	movi	r4,112
81120538:	11000f26 	beq	r2,r4,81120578 <__gethex+0x338>
8112053c:	9c000015 	stw	r16,0(r19)
81120540:	8800831e 	bne	r17,zero,81120750 <__gethex+0x510>
81120544:	00800184 	movi	r2,6
81120548:	dfc01417 	ldw	ra,80(sp)
8112054c:	df001317 	ldw	fp,76(sp)
81120550:	ddc01217 	ldw	r23,72(sp)
81120554:	dd801117 	ldw	r22,68(sp)
81120558:	dd401017 	ldw	r21,64(sp)
8112055c:	dd000f17 	ldw	r20,60(sp)
81120560:	dcc00e17 	ldw	r19,56(sp)
81120564:	dc800d17 	ldw	r18,52(sp)
81120568:	dc400c17 	ldw	r17,48(sp)
8112056c:	dc000b17 	ldw	r16,44(sp)
81120570:	dec01504 	addi	sp,sp,84
81120574:	f800283a 	ret
81120578:	002f883a 	mov	r23,zero
8112057c:	02800044 	movi	r10,1
81120580:	80800043 	ldbu	r2,1(r16)
81120584:	01400ac4 	movi	r5,43
81120588:	11003fcc 	andi	r4,r2,255
8112058c:	21406e26 	beq	r4,r5,81120748 <__gethex+0x508>
81120590:	01400b44 	movi	r5,45
81120594:	21404226 	beq	r4,r5,811206a0 <__gethex+0x460>
81120598:	81400044 	addi	r5,r16,1
8112059c:	000d883a 	mov	r6,zero
811205a0:	10803fcc 	andi	r2,r2,255
811205a4:	a085883a 	add	r2,r20,r2
811205a8:	11000003 	ldbu	r4,0(r2)
811205ac:	03000604 	movi	r12,24
811205b0:	20bfffc4 	addi	r2,r4,-1
811205b4:	10803fcc 	andi	r2,r2,255
811205b8:	60bf6d36 	bltu	r12,r2,81120370 <__reset+0xfb100370>
811205bc:	2ac00043 	ldbu	r11,1(r5)
811205c0:	20803fcc 	andi	r2,r4,255
811205c4:	01204534 	movhi	r4,33044
811205c8:	212ec504 	addi	r4,r4,-17644
811205cc:	22c9883a 	add	r4,r4,r11
811205d0:	23400003 	ldbu	r13,0(r4)
811205d4:	10bffc04 	addi	r2,r2,-16
811205d8:	29400044 	addi	r5,r5,1
811205dc:	693fffc4 	addi	r4,r13,-1
811205e0:	21003fcc 	andi	r4,r4,255
811205e4:	6b403fcc 	andi	r13,r13,255
811205e8:	61000b36 	bltu	r12,r4,81120618 <__gethex+0x3d8>
811205ec:	29400044 	addi	r5,r5,1
811205f0:	29000003 	ldbu	r4,0(r5)
811205f4:	108002a4 	muli	r2,r2,10
811205f8:	a109883a 	add	r4,r20,r4
811205fc:	22c00003 	ldbu	r11,0(r4)
81120600:	1345883a 	add	r2,r2,r13
81120604:	10bffc04 	addi	r2,r2,-16
81120608:	593fffc4 	addi	r4,r11,-1
8112060c:	21003fcc 	andi	r4,r4,255
81120610:	5b403fcc 	andi	r13,r11,255
81120614:	613ff52e 	bgeu	r12,r4,811205ec <__reset+0xfb1005ec>
81120618:	30000126 	beq	r6,zero,81120620 <__gethex+0x3e0>
8112061c:	0085c83a 	sub	r2,zero,r2
81120620:	8039883a 	mov	fp,r16
81120624:	b8af883a 	add	r23,r23,r2
81120628:	2821883a 	mov	r16,r5
8112062c:	003f5106 	br	81120374 <__reset+0xfb100374>
81120630:	80800217 	ldw	r2,8(r16)
81120634:	e080f00e 	bge	fp,r2,811209f8 <__gethex+0x7b8>
81120638:	e007883a 	mov	r3,fp
8112063c:	18800144 	addi	r2,r3,5
81120640:	1085883a 	add	r2,r2,r2
81120644:	18c00044 	addi	r3,r3,1
81120648:	1085883a 	add	r2,r2,r2
8112064c:	8085883a 	add	r2,r16,r2
81120650:	80c00415 	stw	r3,16(r16)
81120654:	01000044 	movi	r4,1
81120658:	11000015 	stw	r4,0(r2)
8112065c:	00800084 	movi	r2,2
81120660:	8880d826 	beq	r17,r2,811209c4 <__gethex+0x784>
81120664:	e0c0ac0e 	bge	fp,r3,81120918 <__gethex+0x6d8>
81120668:	01400044 	movi	r5,1
8112066c:	8009883a 	mov	r4,r16
81120670:	11201400 	call	81120140 <rshift>
81120674:	d8c00017 	ldw	r3,0(sp)
81120678:	bdc00044 	addi	r23,r23,1
8112067c:	18800217 	ldw	r2,8(r3)
81120680:	15c0a70e 	bge	r2,r23,81120920 <__gethex+0x6e0>
81120684:	d9000117 	ldw	r4,4(sp)
81120688:	800b883a 	mov	r5,r16
8112068c:	11196000 	call	81119600 <_Bfree>
81120690:	d9001517 	ldw	r4,84(sp)
81120694:	008028c4 	movi	r2,163
81120698:	20000015 	stw	zero,0(r4)
8112069c:	003faa06 	br	81120548 <__reset+0xfb100548>
811206a0:	01800044 	movi	r6,1
811206a4:	80800083 	ldbu	r2,2(r16)
811206a8:	81400084 	addi	r5,r16,2
811206ac:	003fbc06 	br	811205a0 <__reset+0xfb1005a0>
811206b0:	ada1883a 	add	r16,r21,r22
811206b4:	81000003 	ldbu	r4,0(r16)
811206b8:	21403fcc 	andi	r5,r4,255
811206bc:	a145883a 	add	r2,r20,r5
811206c0:	10800003 	ldbu	r2,0(r2)
811206c4:	11803fcc 	andi	r6,r2,255
811206c8:	30004f26 	beq	r6,zero,81120808 <__gethex+0x5c8>
811206cc:	00c00c04 	movi	r3,48
811206d0:	802b883a 	mov	r21,r16
811206d4:	28c0061e 	bne	r5,r3,811206f0 <__gethex+0x4b0>
811206d8:	2809883a 	mov	r4,r5
811206dc:	ad400044 	addi	r21,r21,1
811206e0:	a8800003 	ldbu	r2,0(r21)
811206e4:	113ffd26 	beq	r2,r4,811206dc <__reset+0xfb1006dc>
811206e8:	a085883a 	add	r2,r20,r2
811206ec:	10800003 	ldbu	r2,0(r2)
811206f0:	10803fcc 	andi	r2,r2,255
811206f4:	1015003a 	cmpeq	r10,r2,zero
811206f8:	802f883a 	mov	r23,r16
811206fc:	04400044 	movi	r17,1
81120700:	003eff06 	br	81120300 <__reset+0xfb100300>
81120704:	04400044 	movi	r17,1
81120708:	98000926 	beq	r19,zero,81120730 <__gethex+0x4f0>
8112070c:	d8c00017 	ldw	r3,0(sp)
81120710:	18800317 	ldw	r2,12(r3)
81120714:	00c00084 	movi	r3,2
81120718:	10c06826 	beq	r2,r3,811208bc <__gethex+0x67c>
8112071c:	00c000c4 	movi	r3,3
81120720:	10c06a26 	beq	r2,r3,811208cc <__gethex+0x68c>
81120724:	00c00044 	movi	r3,1
81120728:	10c08d26 	beq	r2,r3,81120960 <__gethex+0x720>
8112072c:	8c400414 	ori	r17,r17,16
81120730:	d9001517 	ldw	r4,84(sp)
81120734:	d8c00417 	ldw	r3,16(sp)
81120738:	8805883a 	mov	r2,r17
8112073c:	24000015 	stw	r16,0(r4)
81120740:	1dc00015 	stw	r23,0(r3)
81120744:	003f8006 	br	81120548 <__reset+0xfb100548>
81120748:	000d883a 	mov	r6,zero
8112074c:	003fd506 	br	811206a4 <__reset+0xfb1006a4>
81120750:	0005883a 	mov	r2,zero
81120754:	003f7c06 	br	81120548 <__reset+0xfb100548>
81120758:	14a3c83a 	sub	r17,r2,r18
8112075c:	880b883a 	mov	r5,r17
81120760:	8009883a 	mov	r4,r16
81120764:	111a5200 	call	8111a520 <__any_on>
81120768:	10002926 	beq	r2,zero,81120810 <__gethex+0x5d0>
8112076c:	897fffc4 	addi	r5,r17,-1
81120770:	2807d17a 	srai	r3,r5,5
81120774:	d8800217 	ldw	r2,8(sp)
81120778:	290007cc 	andi	r4,r5,31
8112077c:	18c7883a 	add	r3,r3,r3
81120780:	18c7883a 	add	r3,r3,r3
81120784:	04c00044 	movi	r19,1
81120788:	10c7883a 	add	r3,r2,r3
8112078c:	9908983a 	sll	r4,r19,r4
81120790:	18c00017 	ldw	r3,0(r3)
81120794:	20c6703a 	and	r3,r4,r3
81120798:	18000626 	beq	r3,zero,811207b4 <__gethex+0x574>
8112079c:	99407b0e 	bge	r19,r5,8112098c <__gethex+0x74c>
811207a0:	897fff84 	addi	r5,r17,-2
811207a4:	8009883a 	mov	r4,r16
811207a8:	111a5200 	call	8111a520 <__any_on>
811207ac:	10007726 	beq	r2,zero,8112098c <__gethex+0x74c>
811207b0:	04c000c4 	movi	r19,3
811207b4:	880b883a 	mov	r5,r17
811207b8:	8009883a 	mov	r4,r16
811207bc:	11201400 	call	81120140 <rshift>
811207c0:	bc6f883a 	add	r23,r23,r17
811207c4:	003f1f06 	br	81120444 <__reset+0xfb100444>
811207c8:	002f883a 	mov	r23,zero
811207cc:	003ee306 	br	8112035c <__reset+0xfb10035c>
811207d0:	d9000117 	ldw	r4,4(sp)
811207d4:	90a3c83a 	sub	r17,r18,r2
811207d8:	800b883a 	mov	r5,r16
811207dc:	880d883a 	mov	r6,r17
811207e0:	1119d000 	call	81119d00 <__lshift>
811207e4:	10c00504 	addi	r3,r2,20
811207e8:	1021883a 	mov	r16,r2
811207ec:	bc6fc83a 	sub	r23,r23,r17
811207f0:	d8c00215 	stw	r3,8(sp)
811207f4:	0027883a 	mov	r19,zero
811207f8:	003f1206 	br	81120444 <__reset+0xfb100444>
811207fc:	1d400084 	addi	r21,r3,2
81120800:	0023883a 	mov	r17,zero
81120804:	003eb406 	br	811202d8 <__reset+0xfb1002d8>
81120808:	2005883a 	mov	r2,r4
8112080c:	003f4606 	br	81120528 <__reset+0xfb100528>
81120810:	0027883a 	mov	r19,zero
81120814:	003fe706 	br	811207b4 <__reset+0xfb1007b4>
81120818:	bc7fffc4 	addi	r17,r23,-1
8112081c:	9800421e 	bne	r19,zero,81120928 <__gethex+0x6e8>
81120820:	88000426 	beq	r17,zero,81120834 <__gethex+0x5f4>
81120824:	880b883a 	mov	r5,r17
81120828:	8009883a 	mov	r4,r16
8112082c:	111a5200 	call	8111a520 <__any_on>
81120830:	1027883a 	mov	r19,r2
81120834:	8805d17a 	srai	r2,r17,5
81120838:	d8c00217 	ldw	r3,8(sp)
8112083c:	8c4007cc 	andi	r17,r17,31
81120840:	1085883a 	add	r2,r2,r2
81120844:	1085883a 	add	r2,r2,r2
81120848:	1885883a 	add	r2,r3,r2
8112084c:	00c00044 	movi	r3,1
81120850:	1c62983a 	sll	r17,r3,r17
81120854:	10800017 	ldw	r2,0(r2)
81120858:	8884703a 	and	r2,r17,r2
8112085c:	10000126 	beq	r2,zero,81120864 <__gethex+0x624>
81120860:	9cc00094 	ori	r19,r19,2
81120864:	b80b883a 	mov	r5,r23
81120868:	8009883a 	mov	r4,r16
8112086c:	11201400 	call	81120140 <rshift>
81120870:	d8c00017 	ldw	r3,0(sp)
81120874:	95e5c83a 	sub	r18,r18,r23
81120878:	04400084 	movi	r17,2
8112087c:	1dc00117 	ldw	r23,4(r3)
81120880:	003fa106 	br	81120708 <__reset+0xfb100708>
81120884:	85af883a 	add	r23,r16,r22
81120888:	b8800003 	ldbu	r2,0(r23)
8112088c:	b821883a 	mov	r16,r23
81120890:	11003fcc 	andi	r4,r2,255
81120894:	a109883a 	add	r4,r20,r4
81120898:	21000003 	ldbu	r4,0(r4)
8112089c:	203eaa26 	beq	r4,zero,81120348 <__reset+0xfb100348>
811208a0:	84000044 	addi	r16,r16,1
811208a4:	80800003 	ldbu	r2,0(r16)
811208a8:	11003fcc 	andi	r4,r2,255
811208ac:	a109883a 	add	r4,r20,r4
811208b0:	21000003 	ldbu	r4,0(r4)
811208b4:	203ffa1e 	bne	r4,zero,811208a0 <__reset+0xfb1008a0>
811208b8:	003ea306 	br	81120348 <__reset+0xfb100348>
811208bc:	d9001617 	ldw	r4,88(sp)
811208c0:	00800044 	movi	r2,1
811208c4:	1109c83a 	sub	r4,r2,r4
811208c8:	d9001615 	stw	r4,88(sp)
811208cc:	d8801617 	ldw	r2,88(sp)
811208d0:	103f9626 	beq	r2,zero,8112072c <__reset+0xfb10072c>
811208d4:	87000417 	ldw	fp,16(r16)
811208d8:	d9800217 	ldw	r6,8(sp)
811208dc:	013fffc4 	movi	r4,-1
811208e0:	e727883a 	add	r19,fp,fp
811208e4:	9ce7883a 	add	r19,r19,r19
811208e8:	3005883a 	mov	r2,r6
811208ec:	34cb883a 	add	r5,r6,r19
811208f0:	00000306 	br	81120900 <__gethex+0x6c0>
811208f4:	10000015 	stw	zero,0(r2)
811208f8:	10800104 	addi	r2,r2,4
811208fc:	117f4c2e 	bgeu	r2,r5,81120630 <__reset+0xfb100630>
81120900:	10c00017 	ldw	r3,0(r2)
81120904:	193ffb26 	beq	r3,r4,811208f4 <__reset+0xfb1008f4>
81120908:	18c00044 	addi	r3,r3,1
8112090c:	10c00015 	stw	r3,0(r2)
81120910:	00800084 	movi	r2,2
81120914:	88802b26 	beq	r17,r2,811209c4 <__gethex+0x784>
81120918:	948007cc 	andi	r18,r18,31
8112091c:	90002f1e 	bne	r18,zero,811209dc <__gethex+0x79c>
81120920:	04400844 	movi	r17,33
81120924:	003f8206 	br	81120730 <__reset+0xfb100730>
81120928:	04c00044 	movi	r19,1
8112092c:	003fc106 	br	81120834 <__reset+0xfb100834>
81120930:	d8c01617 	ldw	r3,88(sp)
81120934:	183ed226 	beq	r3,zero,81120480 <__reset+0xfb100480>
81120938:	d8c00417 	ldw	r3,16(sp)
8112093c:	d9001517 	ldw	r4,84(sp)
81120940:	18800015 	stw	r2,0(r3)
81120944:	d8c00217 	ldw	r3,8(sp)
81120948:	00800044 	movi	r2,1
8112094c:	80800415 	stw	r2,16(r16)
81120950:	18800015 	stw	r2,0(r3)
81120954:	24000015 	stw	r16,0(r4)
81120958:	00801884 	movi	r2,98
8112095c:	003efa06 	br	81120548 <__reset+0xfb100548>
81120960:	9880008c 	andi	r2,r19,2
81120964:	103f7126 	beq	r2,zero,8112072c <__reset+0xfb10072c>
81120968:	d8c00217 	ldw	r3,8(sp)
8112096c:	18800017 	ldw	r2,0(r3)
81120970:	9884b03a 	or	r2,r19,r2
81120974:	1080004c 	andi	r2,r2,1
81120978:	103fd61e 	bne	r2,zero,811208d4 <__reset+0xfb1008d4>
8112097c:	003f6b06 	br	8112072c <__reset+0xfb10072c>
81120980:	da800217 	ldw	r10,8(sp)
81120984:	0013883a 	mov	r9,zero
81120988:	003e9f06 	br	81120408 <__reset+0xfb100408>
8112098c:	04c00084 	movi	r19,2
81120990:	003f8806 	br	811207b4 <__reset+0xfb1007b4>
81120994:	d9001617 	ldw	r4,88(sp)
81120998:	203fe726 	beq	r4,zero,81120938 <__reset+0xfb100938>
8112099c:	003eb806 	br	81120480 <__reset+0xfb100480>
811209a0:	95feb71e 	bne	r18,r23,81120480 <__reset+0xfb100480>
811209a4:	1cbfe40e 	bge	r3,r18,81120938 <__reset+0xfb100938>
811209a8:	917fffc4 	addi	r5,r18,-1
811209ac:	8009883a 	mov	r4,r16
811209b0:	111a5200 	call	8111a520 <__any_on>
811209b4:	103eb226 	beq	r2,zero,81120480 <__reset+0xfb100480>
811209b8:	d8c00017 	ldw	r3,0(sp)
811209bc:	18800117 	ldw	r2,4(r3)
811209c0:	003fdd06 	br	81120938 <__reset+0xfb100938>
811209c4:	d8c00017 	ldw	r3,0(sp)
811209c8:	18800017 	ldw	r2,0(r3)
811209cc:	10bfffc4 	addi	r2,r2,-1
811209d0:	90801c26 	beq	r18,r2,81120a44 <__gethex+0x804>
811209d4:	04400884 	movi	r17,34
811209d8:	003f5506 	br	81120730 <__reset+0xfb100730>
811209dc:	34c5883a 	add	r2,r6,r19
811209e0:	113fff17 	ldw	r4,-4(r2)
811209e4:	111985c0 	call	8111985c <__hi0bits>
811209e8:	00c00804 	movi	r3,32
811209ec:	1ca5c83a 	sub	r18,r3,r18
811209f0:	14bfcb0e 	bge	r2,r18,81120920 <__reset+0xfb100920>
811209f4:	003f1c06 	br	81120668 <__reset+0xfb100668>
811209f8:	81400117 	ldw	r5,4(r16)
811209fc:	d9000117 	ldw	r4,4(sp)
81120a00:	29400044 	addi	r5,r5,1
81120a04:	11195500 	call	81119550 <_Balloc>
81120a08:	81800417 	ldw	r6,16(r16)
81120a0c:	81400304 	addi	r5,r16,12
81120a10:	11000304 	addi	r4,r2,12
81120a14:	31800084 	addi	r6,r6,2
81120a18:	318d883a 	add	r6,r6,r6
81120a1c:	318d883a 	add	r6,r6,r6
81120a20:	1029883a 	mov	r20,r2
81120a24:	110f61c0 	call	8110f61c <memcpy>
81120a28:	d9000117 	ldw	r4,4(sp)
81120a2c:	800b883a 	mov	r5,r16
81120a30:	a021883a 	mov	r16,r20
81120a34:	11196000 	call	81119600 <_Bfree>
81120a38:	a0c00417 	ldw	r3,16(r20)
81120a3c:	a1800504 	addi	r6,r20,20
81120a40:	003efe06 	br	8112063c <__reset+0xfb10063c>
81120a44:	9005d17a 	srai	r2,r18,5
81120a48:	944007cc 	andi	r17,r18,31
81120a4c:	1085883a 	add	r2,r2,r2
81120a50:	1085883a 	add	r2,r2,r2
81120a54:	3087883a 	add	r3,r6,r2
81120a58:	00800044 	movi	r2,1
81120a5c:	1462983a 	sll	r17,r2,r17
81120a60:	18800017 	ldw	r2,0(r3)
81120a64:	8884703a 	and	r2,r17,r2
81120a68:	1022c03a 	cmpne	r17,r2,zero
81120a6c:	00800884 	movi	r2,34
81120a70:	1463c83a 	sub	r17,r2,r17
81120a74:	003f2e06 	br	81120730 <__reset+0xfb100730>

81120a78 <__hexnan>:
81120a78:	defff904 	addi	sp,sp,-28
81120a7c:	de00012e 	bgeu	sp,et,81120a84 <__hexnan+0xc>
81120a80:	003b68fa 	trap	3
81120a84:	dc800215 	stw	r18,8(sp)
81120a88:	2c800017 	ldw	r18,0(r5)
81120a8c:	dfc00615 	stw	ra,24(sp)
81120a90:	dd400515 	stw	r21,20(sp)
81120a94:	901fd17a 	srai	r15,r18,5
81120a98:	dd000415 	stw	r20,16(sp)
81120a9c:	dcc00315 	stw	r19,12(sp)
81120aa0:	7bdf883a 	add	r15,r15,r15
81120aa4:	7bdf883a 	add	r15,r15,r15
81120aa8:	dc400115 	stw	r17,4(sp)
81120aac:	dc000015 	stw	r16,0(sp)
81120ab0:	948007cc 	andi	r18,r18,31
81120ab4:	33df883a 	add	r15,r6,r15
81120ab8:	90000126 	beq	r18,zero,81120ac0 <__hexnan+0x48>
81120abc:	7bc00104 	addi	r15,r15,4
81120ac0:	22000017 	ldw	r8,0(r4)
81120ac4:	7affff04 	addi	r11,r15,-4
81120ac8:	03a04534 	movhi	r14,33044
81120acc:	783fff15 	stw	zero,-4(r15)
81120ad0:	581b883a 	mov	r13,r11
81120ad4:	580b883a 	mov	r5,r11
81120ad8:	000f883a 	mov	r7,zero
81120adc:	003f883a 	mov	ra,zero
81120ae0:	0019883a 	mov	r12,zero
81120ae4:	73aec504 	addi	r14,r14,-17644
81120ae8:	04400204 	movi	r17,8
81120aec:	04000804 	movi	r16,32
81120af0:	04c001c4 	movi	r19,7
81120af4:	42000044 	addi	r8,r8,1
81120af8:	40c00003 	ldbu	r3,0(r8)
81120afc:	18001d26 	beq	r3,zero,81120b74 <__hexnan+0xfc>
81120b00:	70c5883a 	add	r2,r14,r3
81120b04:	10800003 	ldbu	r2,0(r2)
81120b08:	12403fcc 	andi	r9,r2,255
81120b0c:	4800301e 	bne	r9,zero,81120bd0 <__hexnan+0x158>
81120b10:	80c04236 	bltu	r16,r3,81120c1c <__hexnan+0x1a4>
81120b14:	fb3ff70e 	bge	ra,r12,81120af4 <__reset+0xfb100af4>
81120b18:	2b40112e 	bgeu	r5,r13,81120b60 <__hexnan+0xe8>
81120b1c:	99c01016 	blt	r19,r7,81120b60 <__hexnan+0xe8>
81120b20:	89e9c83a 	sub	r20,r17,r7
81120b24:	a529883a 	add	r20,r20,r20
81120b28:	2a800017 	ldw	r10,0(r5)
81120b2c:	a529883a 	add	r20,r20,r20
81120b30:	852bc83a 	sub	r21,r16,r20
81120b34:	28c00104 	addi	r3,r5,4
81120b38:	2805883a 	mov	r2,r5
81120b3c:	19c00017 	ldw	r7,0(r3)
81120b40:	10800104 	addi	r2,r2,4
81120b44:	18c00104 	addi	r3,r3,4
81120b48:	3d52983a 	sll	r9,r7,r21
81120b4c:	4a92b03a 	or	r9,r9,r10
81120b50:	3d14d83a 	srl	r10,r7,r20
81120b54:	127fff15 	stw	r9,-4(r2)
81120b58:	1abfff15 	stw	r10,-4(r3)
81120b5c:	137ff736 	bltu	r2,r13,81120b3c <__reset+0xfb100b3c>
81120b60:	31402836 	bltu	r6,r5,81120c04 <__hexnan+0x18c>
81120b64:	42000044 	addi	r8,r8,1
81120b68:	40c00003 	ldbu	r3,0(r8)
81120b6c:	01c00204 	movi	r7,8
81120b70:	183fe31e 	bne	r3,zero,81120b00 <__reset+0xfb100b00>
81120b74:	60002b26 	beq	r12,zero,81120c24 <__hexnan+0x1ac>
81120b78:	2b40022e 	bgeu	r5,r13,81120b84 <__hexnan+0x10c>
81120b7c:	008001c4 	movi	r2,7
81120b80:	11c0430e 	bge	r2,r7,81120c90 <__hexnan+0x218>
81120b84:	3140312e 	bgeu	r6,r5,81120c4c <__hexnan+0x1d4>
81120b88:	3007883a 	mov	r3,r6
81120b8c:	29000017 	ldw	r4,0(r5)
81120b90:	18800104 	addi	r2,r3,4
81120b94:	29400104 	addi	r5,r5,4
81120b98:	19000015 	stw	r4,0(r3)
81120b9c:	1007883a 	mov	r3,r2
81120ba0:	597ffa2e 	bgeu	r11,r5,81120b8c <__reset+0xfb100b8c>
81120ba4:	10000015 	stw	zero,0(r2)
81120ba8:	10800104 	addi	r2,r2,4
81120bac:	58bffd2e 	bgeu	r11,r2,81120ba4 <__reset+0xfb100ba4>
81120bb0:	78bfff17 	ldw	r2,-4(r15)
81120bb4:	1000041e 	bne	r2,zero,81120bc8 <__hexnan+0x150>
81120bb8:	32c02d26 	beq	r6,r11,81120c70 <__hexnan+0x1f8>
81120bbc:	5affff04 	addi	r11,r11,-4
81120bc0:	58800017 	ldw	r2,0(r11)
81120bc4:	103ffc26 	beq	r2,zero,81120bb8 <__reset+0xfb100bb8>
81120bc8:	00800144 	movi	r2,5
81120bcc:	00001606 	br	81120c28 <__hexnan+0x1b0>
81120bd0:	39c00044 	addi	r7,r7,1
81120bd4:	63000044 	addi	r12,r12,1
81120bd8:	89c0040e 	bge	r17,r7,81120bec <__hexnan+0x174>
81120bdc:	317fc52e 	bgeu	r6,r5,81120af4 <__reset+0xfb100af4>
81120be0:	283fff15 	stw	zero,-4(r5)
81120be4:	01c00044 	movi	r7,1
81120be8:	297fff04 	addi	r5,r5,-4
81120bec:	28c00017 	ldw	r3,0(r5)
81120bf0:	108003cc 	andi	r2,r2,15
81120bf4:	1806913a 	slli	r3,r3,4
81120bf8:	1884b03a 	or	r2,r3,r2
81120bfc:	28800015 	stw	r2,0(r5)
81120c00:	003fbc06 	br	81120af4 <__reset+0xfb100af4>
81120c04:	2b7fff04 	addi	r13,r5,-4
81120c08:	283fff15 	stw	zero,-4(r5)
81120c0c:	603f883a 	mov	ra,r12
81120c10:	680b883a 	mov	r5,r13
81120c14:	000f883a 	mov	r7,zero
81120c18:	003fb606 	br	81120af4 <__reset+0xfb100af4>
81120c1c:	00800a44 	movi	r2,41
81120c20:	18801726 	beq	r3,r2,81120c80 <__hexnan+0x208>
81120c24:	00800104 	movi	r2,4
81120c28:	dfc00617 	ldw	ra,24(sp)
81120c2c:	dd400517 	ldw	r21,20(sp)
81120c30:	dd000417 	ldw	r20,16(sp)
81120c34:	dcc00317 	ldw	r19,12(sp)
81120c38:	dc800217 	ldw	r18,8(sp)
81120c3c:	dc400117 	ldw	r17,4(sp)
81120c40:	dc000017 	ldw	r16,0(sp)
81120c44:	dec00704 	addi	sp,sp,28
81120c48:	f800283a 	ret
81120c4c:	903fd826 	beq	r18,zero,81120bb0 <__reset+0xfb100bb0>
81120c50:	00c00804 	movi	r3,32
81120c54:	1ca5c83a 	sub	r18,r3,r18
81120c58:	00ffffc4 	movi	r3,-1
81120c5c:	78bfff17 	ldw	r2,-4(r15)
81120c60:	1c86d83a 	srl	r3,r3,r18
81120c64:	1884703a 	and	r2,r3,r2
81120c68:	78bfff15 	stw	r2,-4(r15)
81120c6c:	003fd106 	br	81120bb4 <__reset+0xfb100bb4>
81120c70:	00800044 	movi	r2,1
81120c74:	58800015 	stw	r2,0(r11)
81120c78:	00800144 	movi	r2,5
81120c7c:	003fea06 	br	81120c28 <__reset+0xfb100c28>
81120c80:	42000044 	addi	r8,r8,1
81120c84:	22000015 	stw	r8,0(r4)
81120c88:	603fbb1e 	bne	r12,zero,81120b78 <__reset+0xfb100b78>
81120c8c:	003fe506 	br	81120c24 <__reset+0xfb100c24>
81120c90:	02400204 	movi	r9,8
81120c94:	49d3c83a 	sub	r9,r9,r7
81120c98:	4a53883a 	add	r9,r9,r9
81120c9c:	2a000017 	ldw	r8,0(r5)
81120ca0:	4a53883a 	add	r9,r9,r9
81120ca4:	02800804 	movi	r10,32
81120ca8:	5255c83a 	sub	r10,r10,r9
81120cac:	28c00104 	addi	r3,r5,4
81120cb0:	2805883a 	mov	r2,r5
81120cb4:	19c00017 	ldw	r7,0(r3)
81120cb8:	10800104 	addi	r2,r2,4
81120cbc:	18c00104 	addi	r3,r3,4
81120cc0:	3a88983a 	sll	r4,r7,r10
81120cc4:	2208b03a 	or	r4,r4,r8
81120cc8:	3a50d83a 	srl	r8,r7,r9
81120ccc:	113fff15 	stw	r4,-4(r2)
81120cd0:	1a3fff15 	stw	r8,-4(r3)
81120cd4:	137ff736 	bltu	r2,r13,81120cb4 <__reset+0xfb100cb4>
81120cd8:	003faa06 	br	81120b84 <__reset+0xfb100b84>

81120cdc <strncmp>:
81120cdc:	30003126 	beq	r6,zero,81120da4 <strncmp+0xc8>
81120ce0:	2144b03a 	or	r2,r4,r5
81120ce4:	108000cc 	andi	r2,r2,3
81120ce8:	10001e1e 	bne	r2,zero,81120d64 <strncmp+0x88>
81120cec:	024000c4 	movi	r9,3
81120cf0:	49801c2e 	bgeu	r9,r6,81120d64 <strncmp+0x88>
81120cf4:	20800017 	ldw	r2,0(r4)
81120cf8:	28c00017 	ldw	r3,0(r5)
81120cfc:	10c0191e 	bne	r2,r3,81120d64 <strncmp+0x88>
81120d00:	31bfff04 	addi	r6,r6,-4
81120d04:	30002726 	beq	r6,zero,81120da4 <strncmp+0xc8>
81120d08:	02ffbff4 	movhi	r11,65279
81120d0c:	5affbfc4 	addi	r11,r11,-257
81120d10:	0086303a 	nor	r3,zero,r2
81120d14:	02a02074 	movhi	r10,32897
81120d18:	12c5883a 	add	r2,r2,r11
81120d1c:	52a02004 	addi	r10,r10,-32640
81120d20:	10c4703a 	and	r2,r2,r3
81120d24:	1284703a 	and	r2,r2,r10
81120d28:	10000b26 	beq	r2,zero,81120d58 <strncmp+0x7c>
81120d2c:	00001d06 	br	81120da4 <strncmp+0xc8>
81120d30:	20c00017 	ldw	r3,0(r4)
81120d34:	29c00017 	ldw	r7,0(r5)
81120d38:	1ad1883a 	add	r8,r3,r11
81120d3c:	00c4303a 	nor	r2,zero,r3
81120d40:	4084703a 	and	r2,r8,r2
81120d44:	1284703a 	and	r2,r2,r10
81120d48:	19c0061e 	bne	r3,r7,81120d64 <strncmp+0x88>
81120d4c:	31bfff04 	addi	r6,r6,-4
81120d50:	30001426 	beq	r6,zero,81120da4 <strncmp+0xc8>
81120d54:	1000131e 	bne	r2,zero,81120da4 <strncmp+0xc8>
81120d58:	21000104 	addi	r4,r4,4
81120d5c:	29400104 	addi	r5,r5,4
81120d60:	49bff336 	bltu	r9,r6,81120d30 <__reset+0xfb100d30>
81120d64:	28800007 	ldb	r2,0(r5)
81120d68:	20c00007 	ldb	r3,0(r4)
81120d6c:	31bfffc4 	addi	r6,r6,-1
81120d70:	10c0081e 	bne	r2,r3,81120d94 <strncmp+0xb8>
81120d74:	30000b26 	beq	r6,zero,81120da4 <strncmp+0xc8>
81120d78:	10000a26 	beq	r2,zero,81120da4 <strncmp+0xc8>
81120d7c:	21000044 	addi	r4,r4,1
81120d80:	29400044 	addi	r5,r5,1
81120d84:	20800007 	ldb	r2,0(r4)
81120d88:	28c00007 	ldb	r3,0(r5)
81120d8c:	31bfffc4 	addi	r6,r6,-1
81120d90:	10fff826 	beq	r2,r3,81120d74 <__reset+0xfb100d74>
81120d94:	20800003 	ldbu	r2,0(r4)
81120d98:	28c00003 	ldbu	r3,0(r5)
81120d9c:	10c5c83a 	sub	r2,r2,r3
81120da0:	f800283a 	ret
81120da4:	0005883a 	mov	r2,zero
81120da8:	f800283a 	ret

81120dac <_wcrtomb_r>:
81120dac:	defff604 	addi	sp,sp,-40
81120db0:	00a04534 	movhi	r2,33044
81120db4:	de00012e 	bgeu	sp,et,81120dbc <_wcrtomb_r+0x10>
81120db8:	003b68fa 	trap	3
81120dbc:	10b73804 	addi	r2,r2,-8992
81120dc0:	dc800815 	stw	r18,32(sp)
81120dc4:	dc400715 	stw	r17,28(sp)
81120dc8:	dc000615 	stw	r16,24(sp)
81120dcc:	dfc00915 	stw	ra,36(sp)
81120dd0:	2021883a 	mov	r16,r4
81120dd4:	3823883a 	mov	r17,r7
81120dd8:	14800017 	ldw	r18,0(r2)
81120ddc:	28001426 	beq	r5,zero,81120e30 <_wcrtomb_r+0x84>
81120de0:	d9400415 	stw	r5,16(sp)
81120de4:	d9800515 	stw	r6,20(sp)
81120de8:	11190040 	call	81119004 <__locale_charset>
81120dec:	d9800517 	ldw	r6,20(sp)
81120df0:	d9400417 	ldw	r5,16(sp)
81120df4:	100f883a 	mov	r7,r2
81120df8:	dc400015 	stw	r17,0(sp)
81120dfc:	8009883a 	mov	r4,r16
81120e00:	903ee83a 	callr	r18
81120e04:	00ffffc4 	movi	r3,-1
81120e08:	10c0031e 	bne	r2,r3,81120e18 <_wcrtomb_r+0x6c>
81120e0c:	88000015 	stw	zero,0(r17)
81120e10:	00c02284 	movi	r3,138
81120e14:	80c00015 	stw	r3,0(r16)
81120e18:	dfc00917 	ldw	ra,36(sp)
81120e1c:	dc800817 	ldw	r18,32(sp)
81120e20:	dc400717 	ldw	r17,28(sp)
81120e24:	dc000617 	ldw	r16,24(sp)
81120e28:	dec00a04 	addi	sp,sp,40
81120e2c:	f800283a 	ret
81120e30:	11190040 	call	81119004 <__locale_charset>
81120e34:	100f883a 	mov	r7,r2
81120e38:	dc400015 	stw	r17,0(sp)
81120e3c:	000d883a 	mov	r6,zero
81120e40:	d9400104 	addi	r5,sp,4
81120e44:	8009883a 	mov	r4,r16
81120e48:	903ee83a 	callr	r18
81120e4c:	003fed06 	br	81120e04 <__reset+0xfb100e04>

81120e50 <wcrtomb>:
81120e50:	defff604 	addi	sp,sp,-40
81120e54:	00a04534 	movhi	r2,33044
81120e58:	de00012e 	bgeu	sp,et,81120e60 <wcrtomb+0x10>
81120e5c:	003b68fa 	trap	3
81120e60:	10b73304 	addi	r2,r2,-9012
81120e64:	dc800615 	stw	r18,24(sp)
81120e68:	dc400515 	stw	r17,20(sp)
81120e6c:	dfc00915 	stw	ra,36(sp)
81120e70:	dd000815 	stw	r20,32(sp)
81120e74:	dcc00715 	stw	r19,28(sp)
81120e78:	dc000415 	stw	r16,16(sp)
81120e7c:	3025883a 	mov	r18,r6
81120e80:	14400017 	ldw	r17,0(r2)
81120e84:	20001926 	beq	r4,zero,81120eec <wcrtomb+0x9c>
81120e88:	00a04534 	movhi	r2,33044
81120e8c:	10b73804 	addi	r2,r2,-8992
81120e90:	15000017 	ldw	r20,0(r2)
81120e94:	2021883a 	mov	r16,r4
81120e98:	2827883a 	mov	r19,r5
81120e9c:	11190040 	call	81119004 <__locale_charset>
81120ea0:	100f883a 	mov	r7,r2
81120ea4:	dc800015 	stw	r18,0(sp)
81120ea8:	980d883a 	mov	r6,r19
81120eac:	800b883a 	mov	r5,r16
81120eb0:	8809883a 	mov	r4,r17
81120eb4:	a03ee83a 	callr	r20
81120eb8:	00ffffc4 	movi	r3,-1
81120ebc:	10c0031e 	bne	r2,r3,81120ecc <wcrtomb+0x7c>
81120ec0:	90000015 	stw	zero,0(r18)
81120ec4:	00c02284 	movi	r3,138
81120ec8:	88c00015 	stw	r3,0(r17)
81120ecc:	dfc00917 	ldw	ra,36(sp)
81120ed0:	dd000817 	ldw	r20,32(sp)
81120ed4:	dcc00717 	ldw	r19,28(sp)
81120ed8:	dc800617 	ldw	r18,24(sp)
81120edc:	dc400517 	ldw	r17,20(sp)
81120ee0:	dc000417 	ldw	r16,16(sp)
81120ee4:	dec00a04 	addi	sp,sp,40
81120ee8:	f800283a 	ret
81120eec:	00a04534 	movhi	r2,33044
81120ef0:	10b73804 	addi	r2,r2,-8992
81120ef4:	14000017 	ldw	r16,0(r2)
81120ef8:	11190040 	call	81119004 <__locale_charset>
81120efc:	100f883a 	mov	r7,r2
81120f00:	dc800015 	stw	r18,0(sp)
81120f04:	000d883a 	mov	r6,zero
81120f08:	d9400104 	addi	r5,sp,4
81120f0c:	8809883a 	mov	r4,r17
81120f10:	803ee83a 	callr	r16
81120f14:	003fe806 	br	81120eb8 <__reset+0xfb100eb8>

81120f18 <__ascii_wctomb>:
81120f18:	28000526 	beq	r5,zero,81120f30 <__ascii_wctomb+0x18>
81120f1c:	00803fc4 	movi	r2,255
81120f20:	11800536 	bltu	r2,r6,81120f38 <__ascii_wctomb+0x20>
81120f24:	29800005 	stb	r6,0(r5)
81120f28:	00800044 	movi	r2,1
81120f2c:	f800283a 	ret
81120f30:	0005883a 	mov	r2,zero
81120f34:	f800283a 	ret
81120f38:	00802284 	movi	r2,138
81120f3c:	20800015 	stw	r2,0(r4)
81120f40:	00bfffc4 	movi	r2,-1
81120f44:	f800283a 	ret

81120f48 <_wctomb_r>:
81120f48:	00a04534 	movhi	r2,33044
81120f4c:	defff904 	addi	sp,sp,-28
81120f50:	10b73804 	addi	r2,r2,-8992
81120f54:	de00012e 	bgeu	sp,et,81120f5c <_wctomb_r+0x14>
81120f58:	003b68fa 	trap	3
81120f5c:	dfc00615 	stw	ra,24(sp)
81120f60:	dc400515 	stw	r17,20(sp)
81120f64:	dc000415 	stw	r16,16(sp)
81120f68:	3823883a 	mov	r17,r7
81120f6c:	14000017 	ldw	r16,0(r2)
81120f70:	d9000115 	stw	r4,4(sp)
81120f74:	d9400215 	stw	r5,8(sp)
81120f78:	d9800315 	stw	r6,12(sp)
81120f7c:	11190040 	call	81119004 <__locale_charset>
81120f80:	d9800317 	ldw	r6,12(sp)
81120f84:	d9400217 	ldw	r5,8(sp)
81120f88:	d9000117 	ldw	r4,4(sp)
81120f8c:	100f883a 	mov	r7,r2
81120f90:	dc400015 	stw	r17,0(sp)
81120f94:	803ee83a 	callr	r16
81120f98:	dfc00617 	ldw	ra,24(sp)
81120f9c:	dc400517 	ldw	r17,20(sp)
81120fa0:	dc000417 	ldw	r16,16(sp)
81120fa4:	dec00704 	addi	sp,sp,28
81120fa8:	f800283a 	ret

81120fac <__fixunsdfsi>:
81120fac:	defffd04 	addi	sp,sp,-12
81120fb0:	000d883a 	mov	r6,zero
81120fb4:	01d07834 	movhi	r7,16864
81120fb8:	de00012e 	bgeu	sp,et,81120fc0 <__fixunsdfsi+0x14>
81120fbc:	003b68fa 	trap	3
81120fc0:	dc400115 	stw	r17,4(sp)
81120fc4:	dc000015 	stw	r16,0(sp)
81120fc8:	dfc00215 	stw	ra,8(sp)
81120fcc:	2023883a 	mov	r17,r4
81120fd0:	2821883a 	mov	r16,r5
81120fd4:	11230c40 	call	811230c4 <__gedf2>
81120fd8:	1000080e 	bge	r2,zero,81120ffc <__fixunsdfsi+0x50>
81120fdc:	8809883a 	mov	r4,r17
81120fe0:	800b883a 	mov	r5,r16
81120fe4:	1123b980 	call	81123b98 <__fixdfsi>
81120fe8:	dfc00217 	ldw	ra,8(sp)
81120fec:	dc400117 	ldw	r17,4(sp)
81120ff0:	dc000017 	ldw	r16,0(sp)
81120ff4:	dec00304 	addi	sp,sp,12
81120ff8:	f800283a 	ret
81120ffc:	000d883a 	mov	r6,zero
81121000:	01d07834 	movhi	r7,16864
81121004:	8809883a 	mov	r4,r17
81121008:	800b883a 	mov	r5,r16
8112100c:	11232940 	call	81123294 <__subdf3>
81121010:	180b883a 	mov	r5,r3
81121014:	1009883a 	mov	r4,r2
81121018:	1123b980 	call	81123b98 <__fixdfsi>
8112101c:	00e00034 	movhi	r3,32768
81121020:	10c5883a 	add	r2,r2,r3
81121024:	003ff006 	br	81120fe8 <__reset+0xfb100fe8>

81121028 <__udivdi3>:
81121028:	defff504 	addi	sp,sp,-44
8112102c:	de00012e 	bgeu	sp,et,81121034 <__udivdi3+0xc>
81121030:	003b68fa 	trap	3
81121034:	dcc00415 	stw	r19,16(sp)
81121038:	dc000115 	stw	r16,4(sp)
8112103c:	dfc00a15 	stw	ra,40(sp)
81121040:	df000915 	stw	fp,36(sp)
81121044:	ddc00815 	stw	r23,32(sp)
81121048:	dd800715 	stw	r22,28(sp)
8112104c:	dd400615 	stw	r21,24(sp)
81121050:	dd000515 	stw	r20,20(sp)
81121054:	dc800315 	stw	r18,12(sp)
81121058:	dc400215 	stw	r17,8(sp)
8112105c:	2027883a 	mov	r19,r4
81121060:	2821883a 	mov	r16,r5
81121064:	3800411e 	bne	r7,zero,8112116c <__udivdi3+0x144>
81121068:	3023883a 	mov	r17,r6
8112106c:	2025883a 	mov	r18,r4
81121070:	2980522e 	bgeu	r5,r6,811211bc <__udivdi3+0x194>
81121074:	00bfffd4 	movui	r2,65535
81121078:	282d883a 	mov	r22,r5
8112107c:	1180a836 	bltu	r2,r6,81121320 <__udivdi3+0x2f8>
81121080:	00803fc4 	movi	r2,255
81121084:	1185803a 	cmpltu	r2,r2,r6
81121088:	100490fa 	slli	r2,r2,3
8112108c:	3086d83a 	srl	r3,r6,r2
81121090:	01204534 	movhi	r4,33044
81121094:	212d3f04 	addi	r4,r4,-19204
81121098:	20c7883a 	add	r3,r4,r3
8112109c:	18c00003 	ldbu	r3,0(r3)
811210a0:	1885883a 	add	r2,r3,r2
811210a4:	00c00804 	movi	r3,32
811210a8:	1887c83a 	sub	r3,r3,r2
811210ac:	18000526 	beq	r3,zero,811210c4 <__udivdi3+0x9c>
811210b0:	80e0983a 	sll	r16,r16,r3
811210b4:	9884d83a 	srl	r2,r19,r2
811210b8:	30e2983a 	sll	r17,r6,r3
811210bc:	98e4983a 	sll	r18,r19,r3
811210c0:	142cb03a 	or	r22,r2,r16
811210c4:	882ad43a 	srli	r21,r17,16
811210c8:	b009883a 	mov	r4,r22
811210cc:	8d3fffcc 	andi	r20,r17,65535
811210d0:	a80b883a 	mov	r5,r21
811210d4:	1121c440 	call	81121c44 <__umodsi3>
811210d8:	b009883a 	mov	r4,r22
811210dc:	a80b883a 	mov	r5,r21
811210e0:	1027883a 	mov	r19,r2
811210e4:	1121be00 	call	81121be0 <__udivsi3>
811210e8:	102d883a 	mov	r22,r2
811210ec:	9826943a 	slli	r19,r19,16
811210f0:	9004d43a 	srli	r2,r18,16
811210f4:	a5a1383a 	mul	r16,r20,r22
811210f8:	14c4b03a 	or	r2,r2,r19
811210fc:	1400052e 	bgeu	r2,r16,81121114 <__udivdi3+0xec>
81121100:	1445883a 	add	r2,r2,r17
81121104:	b0ffffc4 	addi	r3,r22,-1
81121108:	14400136 	bltu	r2,r17,81121110 <__udivdi3+0xe8>
8112110c:	14012336 	bltu	r2,r16,8112159c <__udivdi3+0x574>
81121110:	182d883a 	mov	r22,r3
81121114:	1421c83a 	sub	r16,r2,r16
81121118:	a80b883a 	mov	r5,r21
8112111c:	8009883a 	mov	r4,r16
81121120:	1121c440 	call	81121c44 <__umodsi3>
81121124:	1027883a 	mov	r19,r2
81121128:	a80b883a 	mov	r5,r21
8112112c:	8009883a 	mov	r4,r16
81121130:	1121be00 	call	81121be0 <__udivsi3>
81121134:	9826943a 	slli	r19,r19,16
81121138:	a0a9383a 	mul	r20,r20,r2
8112113c:	94bfffcc 	andi	r18,r18,65535
81121140:	94e4b03a 	or	r18,r18,r19
81121144:	9500052e 	bgeu	r18,r20,8112115c <__udivdi3+0x134>
81121148:	8ca5883a 	add	r18,r17,r18
8112114c:	10ffffc4 	addi	r3,r2,-1
81121150:	9440f136 	bltu	r18,r17,81121518 <__udivdi3+0x4f0>
81121154:	9500f02e 	bgeu	r18,r20,81121518 <__udivdi3+0x4f0>
81121158:	10bfff84 	addi	r2,r2,-2
8112115c:	b00c943a 	slli	r6,r22,16
81121160:	0007883a 	mov	r3,zero
81121164:	3084b03a 	or	r2,r6,r2
81121168:	00005906 	br	811212d0 <__udivdi3+0x2a8>
8112116c:	29c05636 	bltu	r5,r7,811212c8 <__udivdi3+0x2a0>
81121170:	00bfffd4 	movui	r2,65535
81121174:	11c0622e 	bgeu	r2,r7,81121300 <__udivdi3+0x2d8>
81121178:	00804034 	movhi	r2,256
8112117c:	10bfffc4 	addi	r2,r2,-1
81121180:	11c0ee36 	bltu	r2,r7,8112153c <__udivdi3+0x514>
81121184:	00800404 	movi	r2,16
81121188:	3886d83a 	srl	r3,r7,r2
8112118c:	01204534 	movhi	r4,33044
81121190:	212d3f04 	addi	r4,r4,-19204
81121194:	20c7883a 	add	r3,r4,r3
81121198:	18c00003 	ldbu	r3,0(r3)
8112119c:	05400804 	movi	r21,32
811211a0:	1885883a 	add	r2,r3,r2
811211a4:	a8abc83a 	sub	r21,r21,r2
811211a8:	a800621e 	bne	r21,zero,81121334 <__udivdi3+0x30c>
811211ac:	3c00e936 	bltu	r7,r16,81121554 <__udivdi3+0x52c>
811211b0:	9985403a 	cmpgeu	r2,r19,r6
811211b4:	0007883a 	mov	r3,zero
811211b8:	00004506 	br	811212d0 <__udivdi3+0x2a8>
811211bc:	3000041e 	bne	r6,zero,811211d0 <__udivdi3+0x1a8>
811211c0:	000b883a 	mov	r5,zero
811211c4:	01000044 	movi	r4,1
811211c8:	1121be00 	call	81121be0 <__udivsi3>
811211cc:	1023883a 	mov	r17,r2
811211d0:	00bfffd4 	movui	r2,65535
811211d4:	14404e2e 	bgeu	r2,r17,81121310 <__udivdi3+0x2e8>
811211d8:	00804034 	movhi	r2,256
811211dc:	10bfffc4 	addi	r2,r2,-1
811211e0:	1440d836 	bltu	r2,r17,81121544 <__udivdi3+0x51c>
811211e4:	00800404 	movi	r2,16
811211e8:	8886d83a 	srl	r3,r17,r2
811211ec:	01204534 	movhi	r4,33044
811211f0:	212d3f04 	addi	r4,r4,-19204
811211f4:	20c7883a 	add	r3,r4,r3
811211f8:	18c00003 	ldbu	r3,0(r3)
811211fc:	1885883a 	add	r2,r3,r2
81121200:	00c00804 	movi	r3,32
81121204:	1887c83a 	sub	r3,r3,r2
81121208:	18008f1e 	bne	r3,zero,81121448 <__udivdi3+0x420>
8112120c:	882ad43a 	srli	r21,r17,16
81121210:	8461c83a 	sub	r16,r16,r17
81121214:	8d3fffcc 	andi	r20,r17,65535
81121218:	00c00044 	movi	r3,1
8112121c:	8009883a 	mov	r4,r16
81121220:	a80b883a 	mov	r5,r21
81121224:	d8c00015 	stw	r3,0(sp)
81121228:	1121c440 	call	81121c44 <__umodsi3>
8112122c:	8009883a 	mov	r4,r16
81121230:	a80b883a 	mov	r5,r21
81121234:	1027883a 	mov	r19,r2
81121238:	1121be00 	call	81121be0 <__udivsi3>
8112123c:	9826943a 	slli	r19,r19,16
81121240:	9008d43a 	srli	r4,r18,16
81121244:	1521383a 	mul	r16,r2,r20
81121248:	102d883a 	mov	r22,r2
8112124c:	24c8b03a 	or	r4,r4,r19
81121250:	d8c00017 	ldw	r3,0(sp)
81121254:	2400052e 	bgeu	r4,r16,8112126c <__udivdi3+0x244>
81121258:	2449883a 	add	r4,r4,r17
8112125c:	b0bfffc4 	addi	r2,r22,-1
81121260:	24400136 	bltu	r4,r17,81121268 <__udivdi3+0x240>
81121264:	2400ca36 	bltu	r4,r16,81121590 <__udivdi3+0x568>
81121268:	102d883a 	mov	r22,r2
8112126c:	2421c83a 	sub	r16,r4,r16
81121270:	a80b883a 	mov	r5,r21
81121274:	8009883a 	mov	r4,r16
81121278:	d8c00015 	stw	r3,0(sp)
8112127c:	1121c440 	call	81121c44 <__umodsi3>
81121280:	1027883a 	mov	r19,r2
81121284:	a80b883a 	mov	r5,r21
81121288:	8009883a 	mov	r4,r16
8112128c:	1121be00 	call	81121be0 <__udivsi3>
81121290:	9826943a 	slli	r19,r19,16
81121294:	1529383a 	mul	r20,r2,r20
81121298:	94bfffcc 	andi	r18,r18,65535
8112129c:	94e4b03a 	or	r18,r18,r19
811212a0:	d8c00017 	ldw	r3,0(sp)
811212a4:	9500052e 	bgeu	r18,r20,811212bc <__udivdi3+0x294>
811212a8:	8ca5883a 	add	r18,r17,r18
811212ac:	113fffc4 	addi	r4,r2,-1
811212b0:	94409736 	bltu	r18,r17,81121510 <__udivdi3+0x4e8>
811212b4:	9500962e 	bgeu	r18,r20,81121510 <__udivdi3+0x4e8>
811212b8:	10bfff84 	addi	r2,r2,-2
811212bc:	b00c943a 	slli	r6,r22,16
811212c0:	3084b03a 	or	r2,r6,r2
811212c4:	00000206 	br	811212d0 <__udivdi3+0x2a8>
811212c8:	0007883a 	mov	r3,zero
811212cc:	0005883a 	mov	r2,zero
811212d0:	dfc00a17 	ldw	ra,40(sp)
811212d4:	df000917 	ldw	fp,36(sp)
811212d8:	ddc00817 	ldw	r23,32(sp)
811212dc:	dd800717 	ldw	r22,28(sp)
811212e0:	dd400617 	ldw	r21,24(sp)
811212e4:	dd000517 	ldw	r20,20(sp)
811212e8:	dcc00417 	ldw	r19,16(sp)
811212ec:	dc800317 	ldw	r18,12(sp)
811212f0:	dc400217 	ldw	r17,8(sp)
811212f4:	dc000117 	ldw	r16,4(sp)
811212f8:	dec00b04 	addi	sp,sp,44
811212fc:	f800283a 	ret
81121300:	00803fc4 	movi	r2,255
81121304:	11c5803a 	cmpltu	r2,r2,r7
81121308:	100490fa 	slli	r2,r2,3
8112130c:	003f9e06 	br	81121188 <__reset+0xfb101188>
81121310:	00803fc4 	movi	r2,255
81121314:	1445803a 	cmpltu	r2,r2,r17
81121318:	100490fa 	slli	r2,r2,3
8112131c:	003fb206 	br	811211e8 <__reset+0xfb1011e8>
81121320:	00804034 	movhi	r2,256
81121324:	10bfffc4 	addi	r2,r2,-1
81121328:	11808836 	bltu	r2,r6,8112154c <__udivdi3+0x524>
8112132c:	00800404 	movi	r2,16
81121330:	003f5606 	br	8112108c <__reset+0xfb10108c>
81121334:	30aed83a 	srl	r23,r6,r2
81121338:	3d4e983a 	sll	r7,r7,r21
8112133c:	80acd83a 	srl	r22,r16,r2
81121340:	9884d83a 	srl	r2,r19,r2
81121344:	3deeb03a 	or	r23,r7,r23
81121348:	b824d43a 	srli	r18,r23,16
8112134c:	8560983a 	sll	r16,r16,r21
81121350:	b009883a 	mov	r4,r22
81121354:	900b883a 	mov	r5,r18
81121358:	3568983a 	sll	r20,r6,r21
8112135c:	1420b03a 	or	r16,r2,r16
81121360:	1121c440 	call	81121c44 <__umodsi3>
81121364:	b009883a 	mov	r4,r22
81121368:	900b883a 	mov	r5,r18
8112136c:	1023883a 	mov	r17,r2
81121370:	1121be00 	call	81121be0 <__udivsi3>
81121374:	8808943a 	slli	r4,r17,16
81121378:	bf3fffcc 	andi	fp,r23,65535
8112137c:	8006d43a 	srli	r3,r16,16
81121380:	e0a3383a 	mul	r17,fp,r2
81121384:	100d883a 	mov	r6,r2
81121388:	1906b03a 	or	r3,r3,r4
8112138c:	1c40042e 	bgeu	r3,r17,811213a0 <__udivdi3+0x378>
81121390:	1dc7883a 	add	r3,r3,r23
81121394:	10bfffc4 	addi	r2,r2,-1
81121398:	1dc0752e 	bgeu	r3,r23,81121570 <__udivdi3+0x548>
8112139c:	100d883a 	mov	r6,r2
811213a0:	1c63c83a 	sub	r17,r3,r17
811213a4:	900b883a 	mov	r5,r18
811213a8:	8809883a 	mov	r4,r17
811213ac:	d9800015 	stw	r6,0(sp)
811213b0:	1121c440 	call	81121c44 <__umodsi3>
811213b4:	102d883a 	mov	r22,r2
811213b8:	8809883a 	mov	r4,r17
811213bc:	900b883a 	mov	r5,r18
811213c0:	1121be00 	call	81121be0 <__udivsi3>
811213c4:	b02c943a 	slli	r22,r22,16
811213c8:	e089383a 	mul	r4,fp,r2
811213cc:	843fffcc 	andi	r16,r16,65535
811213d0:	85a0b03a 	or	r16,r16,r22
811213d4:	d9800017 	ldw	r6,0(sp)
811213d8:	8100042e 	bgeu	r16,r4,811213ec <__udivdi3+0x3c4>
811213dc:	85e1883a 	add	r16,r16,r23
811213e0:	10ffffc4 	addi	r3,r2,-1
811213e4:	85c05e2e 	bgeu	r16,r23,81121560 <__udivdi3+0x538>
811213e8:	1805883a 	mov	r2,r3
811213ec:	300c943a 	slli	r6,r6,16
811213f0:	a17fffcc 	andi	r5,r20,65535
811213f4:	a028d43a 	srli	r20,r20,16
811213f8:	3084b03a 	or	r2,r6,r2
811213fc:	10ffffcc 	andi	r3,r2,65535
81121400:	100cd43a 	srli	r6,r2,16
81121404:	194f383a 	mul	r7,r3,r5
81121408:	1d07383a 	mul	r3,r3,r20
8112140c:	314b383a 	mul	r5,r6,r5
81121410:	3810d43a 	srli	r8,r7,16
81121414:	8121c83a 	sub	r16,r16,r4
81121418:	1947883a 	add	r3,r3,r5
8112141c:	40c7883a 	add	r3,r8,r3
81121420:	350d383a 	mul	r6,r6,r20
81121424:	1940022e 	bgeu	r3,r5,81121430 <__udivdi3+0x408>
81121428:	01000074 	movhi	r4,1
8112142c:	310d883a 	add	r6,r6,r4
81121430:	1828d43a 	srli	r20,r3,16
81121434:	a18d883a 	add	r6,r20,r6
81121438:	81803e36 	bltu	r16,r6,81121534 <__udivdi3+0x50c>
8112143c:	81803826 	beq	r16,r6,81121520 <__udivdi3+0x4f8>
81121440:	0007883a 	mov	r3,zero
81121444:	003fa206 	br	811212d0 <__reset+0xfb1012d0>
81121448:	88e2983a 	sll	r17,r17,r3
8112144c:	80a8d83a 	srl	r20,r16,r2
81121450:	80e0983a 	sll	r16,r16,r3
81121454:	882ad43a 	srli	r21,r17,16
81121458:	9884d83a 	srl	r2,r19,r2
8112145c:	a009883a 	mov	r4,r20
81121460:	a80b883a 	mov	r5,r21
81121464:	142eb03a 	or	r23,r2,r16
81121468:	98e4983a 	sll	r18,r19,r3
8112146c:	1121c440 	call	81121c44 <__umodsi3>
81121470:	a009883a 	mov	r4,r20
81121474:	a80b883a 	mov	r5,r21
81121478:	1021883a 	mov	r16,r2
8112147c:	1121be00 	call	81121be0 <__udivsi3>
81121480:	1039883a 	mov	fp,r2
81121484:	8d3fffcc 	andi	r20,r17,65535
81121488:	8020943a 	slli	r16,r16,16
8112148c:	b804d43a 	srli	r2,r23,16
81121490:	a72d383a 	mul	r22,r20,fp
81121494:	1404b03a 	or	r2,r2,r16
81121498:	1580062e 	bgeu	r2,r22,811214b4 <__udivdi3+0x48c>
8112149c:	1445883a 	add	r2,r2,r17
811214a0:	e0ffffc4 	addi	r3,fp,-1
811214a4:	14403836 	bltu	r2,r17,81121588 <__udivdi3+0x560>
811214a8:	1580372e 	bgeu	r2,r22,81121588 <__udivdi3+0x560>
811214ac:	e73fff84 	addi	fp,fp,-2
811214b0:	1445883a 	add	r2,r2,r17
811214b4:	15adc83a 	sub	r22,r2,r22
811214b8:	a80b883a 	mov	r5,r21
811214bc:	b009883a 	mov	r4,r22
811214c0:	1121c440 	call	81121c44 <__umodsi3>
811214c4:	1027883a 	mov	r19,r2
811214c8:	b009883a 	mov	r4,r22
811214cc:	a80b883a 	mov	r5,r21
811214d0:	1121be00 	call	81121be0 <__udivsi3>
811214d4:	9826943a 	slli	r19,r19,16
811214d8:	a0a1383a 	mul	r16,r20,r2
811214dc:	b93fffcc 	andi	r4,r23,65535
811214e0:	24c8b03a 	or	r4,r4,r19
811214e4:	2400062e 	bgeu	r4,r16,81121500 <__udivdi3+0x4d8>
811214e8:	2449883a 	add	r4,r4,r17
811214ec:	10ffffc4 	addi	r3,r2,-1
811214f0:	24402336 	bltu	r4,r17,81121580 <__udivdi3+0x558>
811214f4:	2400222e 	bgeu	r4,r16,81121580 <__udivdi3+0x558>
811214f8:	10bfff84 	addi	r2,r2,-2
811214fc:	2449883a 	add	r4,r4,r17
81121500:	e038943a 	slli	fp,fp,16
81121504:	2421c83a 	sub	r16,r4,r16
81121508:	e086b03a 	or	r3,fp,r2
8112150c:	003f4306 	br	8112121c <__reset+0xfb10121c>
81121510:	2005883a 	mov	r2,r4
81121514:	003f6906 	br	811212bc <__reset+0xfb1012bc>
81121518:	1805883a 	mov	r2,r3
8112151c:	003f0f06 	br	8112115c <__reset+0xfb10115c>
81121520:	1806943a 	slli	r3,r3,16
81121524:	9d66983a 	sll	r19,r19,r21
81121528:	39ffffcc 	andi	r7,r7,65535
8112152c:	19c7883a 	add	r3,r3,r7
81121530:	98ffc32e 	bgeu	r19,r3,81121440 <__reset+0xfb101440>
81121534:	10bfffc4 	addi	r2,r2,-1
81121538:	003fc106 	br	81121440 <__reset+0xfb101440>
8112153c:	00800604 	movi	r2,24
81121540:	003f1106 	br	81121188 <__reset+0xfb101188>
81121544:	00800604 	movi	r2,24
81121548:	003f2706 	br	811211e8 <__reset+0xfb1011e8>
8112154c:	00800604 	movi	r2,24
81121550:	003ece06 	br	8112108c <__reset+0xfb10108c>
81121554:	0007883a 	mov	r3,zero
81121558:	00800044 	movi	r2,1
8112155c:	003f5c06 	br	811212d0 <__reset+0xfb1012d0>
81121560:	813fa12e 	bgeu	r16,r4,811213e8 <__reset+0xfb1013e8>
81121564:	10bfff84 	addi	r2,r2,-2
81121568:	85e1883a 	add	r16,r16,r23
8112156c:	003f9f06 	br	811213ec <__reset+0xfb1013ec>
81121570:	1c7f8a2e 	bgeu	r3,r17,8112139c <__reset+0xfb10139c>
81121574:	31bfff84 	addi	r6,r6,-2
81121578:	1dc7883a 	add	r3,r3,r23
8112157c:	003f8806 	br	811213a0 <__reset+0xfb1013a0>
81121580:	1805883a 	mov	r2,r3
81121584:	003fde06 	br	81121500 <__reset+0xfb101500>
81121588:	1839883a 	mov	fp,r3
8112158c:	003fc906 	br	811214b4 <__reset+0xfb1014b4>
81121590:	b5bfff84 	addi	r22,r22,-2
81121594:	2449883a 	add	r4,r4,r17
81121598:	003f3406 	br	8112126c <__reset+0xfb10126c>
8112159c:	b5bfff84 	addi	r22,r22,-2
811215a0:	1445883a 	add	r2,r2,r17
811215a4:	003edb06 	br	81121114 <__reset+0xfb101114>

811215a8 <__umoddi3>:
811215a8:	defff404 	addi	sp,sp,-48
811215ac:	de00012e 	bgeu	sp,et,811215b4 <__umoddi3+0xc>
811215b0:	003b68fa 	trap	3
811215b4:	df000a15 	stw	fp,40(sp)
811215b8:	dc400315 	stw	r17,12(sp)
811215bc:	dc000215 	stw	r16,8(sp)
811215c0:	dfc00b15 	stw	ra,44(sp)
811215c4:	ddc00915 	stw	r23,36(sp)
811215c8:	dd800815 	stw	r22,32(sp)
811215cc:	dd400715 	stw	r21,28(sp)
811215d0:	dd000615 	stw	r20,24(sp)
811215d4:	dcc00515 	stw	r19,20(sp)
811215d8:	dc800415 	stw	r18,16(sp)
811215dc:	2021883a 	mov	r16,r4
811215e0:	2823883a 	mov	r17,r5
811215e4:	2839883a 	mov	fp,r5
811215e8:	38003c1e 	bne	r7,zero,811216dc <__umoddi3+0x134>
811215ec:	3027883a 	mov	r19,r6
811215f0:	2029883a 	mov	r20,r4
811215f4:	2980512e 	bgeu	r5,r6,8112173c <__umoddi3+0x194>
811215f8:	00bfffd4 	movui	r2,65535
811215fc:	11809a36 	bltu	r2,r6,81121868 <__umoddi3+0x2c0>
81121600:	01003fc4 	movi	r4,255
81121604:	2189803a 	cmpltu	r4,r4,r6
81121608:	200890fa 	slli	r4,r4,3
8112160c:	3104d83a 	srl	r2,r6,r4
81121610:	00e04534 	movhi	r3,33044
81121614:	18ed3f04 	addi	r3,r3,-19204
81121618:	1885883a 	add	r2,r3,r2
8112161c:	10c00003 	ldbu	r3,0(r2)
81121620:	00800804 	movi	r2,32
81121624:	1909883a 	add	r4,r3,r4
81121628:	1125c83a 	sub	r18,r2,r4
8112162c:	90000526 	beq	r18,zero,81121644 <__umoddi3+0x9c>
81121630:	8ca2983a 	sll	r17,r17,r18
81121634:	8108d83a 	srl	r4,r16,r4
81121638:	34a6983a 	sll	r19,r6,r18
8112163c:	84a8983a 	sll	r20,r16,r18
81121640:	2478b03a 	or	fp,r4,r17
81121644:	982ed43a 	srli	r23,r19,16
81121648:	e009883a 	mov	r4,fp
8112164c:	9dbfffcc 	andi	r22,r19,65535
81121650:	b80b883a 	mov	r5,r23
81121654:	1121c440 	call	81121c44 <__umodsi3>
81121658:	e009883a 	mov	r4,fp
8112165c:	b80b883a 	mov	r5,r23
81121660:	102b883a 	mov	r21,r2
81121664:	1121be00 	call	81121be0 <__udivsi3>
81121668:	a806943a 	slli	r3,r21,16
8112166c:	a008d43a 	srli	r4,r20,16
81121670:	b085383a 	mul	r2,r22,r2
81121674:	20c8b03a 	or	r4,r4,r3
81121678:	2080032e 	bgeu	r4,r2,81121688 <__umoddi3+0xe0>
8112167c:	24c9883a 	add	r4,r4,r19
81121680:	24c00136 	bltu	r4,r19,81121688 <__umoddi3+0xe0>
81121684:	20811036 	bltu	r4,r2,81121ac8 <__umoddi3+0x520>
81121688:	20abc83a 	sub	r21,r4,r2
8112168c:	b80b883a 	mov	r5,r23
81121690:	a809883a 	mov	r4,r21
81121694:	1121c440 	call	81121c44 <__umodsi3>
81121698:	1023883a 	mov	r17,r2
8112169c:	b80b883a 	mov	r5,r23
811216a0:	a809883a 	mov	r4,r21
811216a4:	1121be00 	call	81121be0 <__udivsi3>
811216a8:	8822943a 	slli	r17,r17,16
811216ac:	b085383a 	mul	r2,r22,r2
811216b0:	a0ffffcc 	andi	r3,r20,65535
811216b4:	1c46b03a 	or	r3,r3,r17
811216b8:	1880042e 	bgeu	r3,r2,811216cc <__umoddi3+0x124>
811216bc:	1cc7883a 	add	r3,r3,r19
811216c0:	1cc00236 	bltu	r3,r19,811216cc <__umoddi3+0x124>
811216c4:	1880012e 	bgeu	r3,r2,811216cc <__umoddi3+0x124>
811216c8:	1cc7883a 	add	r3,r3,r19
811216cc:	1885c83a 	sub	r2,r3,r2
811216d0:	1484d83a 	srl	r2,r2,r18
811216d4:	0007883a 	mov	r3,zero
811216d8:	00004f06 	br	81121818 <__umoddi3+0x270>
811216dc:	29c04c36 	bltu	r5,r7,81121810 <__umoddi3+0x268>
811216e0:	00bfffd4 	movui	r2,65535
811216e4:	11c0582e 	bgeu	r2,r7,81121848 <__umoddi3+0x2a0>
811216e8:	00804034 	movhi	r2,256
811216ec:	10bfffc4 	addi	r2,r2,-1
811216f0:	11c0e736 	bltu	r2,r7,81121a90 <__umoddi3+0x4e8>
811216f4:	01000404 	movi	r4,16
811216f8:	3904d83a 	srl	r2,r7,r4
811216fc:	00e04534 	movhi	r3,33044
81121700:	18ed3f04 	addi	r3,r3,-19204
81121704:	1885883a 	add	r2,r3,r2
81121708:	14c00003 	ldbu	r19,0(r2)
8112170c:	00c00804 	movi	r3,32
81121710:	9927883a 	add	r19,r19,r4
81121714:	1ce9c83a 	sub	r20,r3,r19
81121718:	a000581e 	bne	r20,zero,8112187c <__umoddi3+0x2d4>
8112171c:	3c400136 	bltu	r7,r17,81121724 <__umoddi3+0x17c>
81121720:	8180eb36 	bltu	r16,r6,81121ad0 <__umoddi3+0x528>
81121724:	8185c83a 	sub	r2,r16,r6
81121728:	89e3c83a 	sub	r17,r17,r7
8112172c:	8089803a 	cmpltu	r4,r16,r2
81121730:	8939c83a 	sub	fp,r17,r4
81121734:	e007883a 	mov	r3,fp
81121738:	00003706 	br	81121818 <__umoddi3+0x270>
8112173c:	3000041e 	bne	r6,zero,81121750 <__umoddi3+0x1a8>
81121740:	000b883a 	mov	r5,zero
81121744:	01000044 	movi	r4,1
81121748:	1121be00 	call	81121be0 <__udivsi3>
8112174c:	1027883a 	mov	r19,r2
81121750:	00bfffd4 	movui	r2,65535
81121754:	14c0402e 	bgeu	r2,r19,81121858 <__umoddi3+0x2b0>
81121758:	00804034 	movhi	r2,256
8112175c:	10bfffc4 	addi	r2,r2,-1
81121760:	14c0cd36 	bltu	r2,r19,81121a98 <__umoddi3+0x4f0>
81121764:	00800404 	movi	r2,16
81121768:	9886d83a 	srl	r3,r19,r2
8112176c:	01204534 	movhi	r4,33044
81121770:	212d3f04 	addi	r4,r4,-19204
81121774:	20c7883a 	add	r3,r4,r3
81121778:	18c00003 	ldbu	r3,0(r3)
8112177c:	1887883a 	add	r3,r3,r2
81121780:	00800804 	movi	r2,32
81121784:	10e5c83a 	sub	r18,r2,r3
81121788:	9000901e 	bne	r18,zero,811219cc <__umoddi3+0x424>
8112178c:	982cd43a 	srli	r22,r19,16
81121790:	8ce3c83a 	sub	r17,r17,r19
81121794:	9d7fffcc 	andi	r21,r19,65535
81121798:	b00b883a 	mov	r5,r22
8112179c:	8809883a 	mov	r4,r17
811217a0:	1121c440 	call	81121c44 <__umodsi3>
811217a4:	8809883a 	mov	r4,r17
811217a8:	b00b883a 	mov	r5,r22
811217ac:	1021883a 	mov	r16,r2
811217b0:	1121be00 	call	81121be0 <__udivsi3>
811217b4:	8006943a 	slli	r3,r16,16
811217b8:	a008d43a 	srli	r4,r20,16
811217bc:	1545383a 	mul	r2,r2,r21
811217c0:	20c8b03a 	or	r4,r4,r3
811217c4:	2080042e 	bgeu	r4,r2,811217d8 <__umoddi3+0x230>
811217c8:	24c9883a 	add	r4,r4,r19
811217cc:	24c00236 	bltu	r4,r19,811217d8 <__umoddi3+0x230>
811217d0:	2080012e 	bgeu	r4,r2,811217d8 <__umoddi3+0x230>
811217d4:	24c9883a 	add	r4,r4,r19
811217d8:	20a1c83a 	sub	r16,r4,r2
811217dc:	b00b883a 	mov	r5,r22
811217e0:	8009883a 	mov	r4,r16
811217e4:	1121c440 	call	81121c44 <__umodsi3>
811217e8:	1023883a 	mov	r17,r2
811217ec:	b00b883a 	mov	r5,r22
811217f0:	8009883a 	mov	r4,r16
811217f4:	1121be00 	call	81121be0 <__udivsi3>
811217f8:	8822943a 	slli	r17,r17,16
811217fc:	1545383a 	mul	r2,r2,r21
81121800:	a53fffcc 	andi	r20,r20,65535
81121804:	a446b03a 	or	r3,r20,r17
81121808:	18bfb02e 	bgeu	r3,r2,811216cc <__reset+0xfb1016cc>
8112180c:	003fab06 	br	811216bc <__reset+0xfb1016bc>
81121810:	2005883a 	mov	r2,r4
81121814:	2807883a 	mov	r3,r5
81121818:	dfc00b17 	ldw	ra,44(sp)
8112181c:	df000a17 	ldw	fp,40(sp)
81121820:	ddc00917 	ldw	r23,36(sp)
81121824:	dd800817 	ldw	r22,32(sp)
81121828:	dd400717 	ldw	r21,28(sp)
8112182c:	dd000617 	ldw	r20,24(sp)
81121830:	dcc00517 	ldw	r19,20(sp)
81121834:	dc800417 	ldw	r18,16(sp)
81121838:	dc400317 	ldw	r17,12(sp)
8112183c:	dc000217 	ldw	r16,8(sp)
81121840:	dec00c04 	addi	sp,sp,48
81121844:	f800283a 	ret
81121848:	04c03fc4 	movi	r19,255
8112184c:	99c9803a 	cmpltu	r4,r19,r7
81121850:	200890fa 	slli	r4,r4,3
81121854:	003fa806 	br	811216f8 <__reset+0xfb1016f8>
81121858:	00803fc4 	movi	r2,255
8112185c:	14c5803a 	cmpltu	r2,r2,r19
81121860:	100490fa 	slli	r2,r2,3
81121864:	003fc006 	br	81121768 <__reset+0xfb101768>
81121868:	00804034 	movhi	r2,256
8112186c:	10bfffc4 	addi	r2,r2,-1
81121870:	11808b36 	bltu	r2,r6,81121aa0 <__umoddi3+0x4f8>
81121874:	01000404 	movi	r4,16
81121878:	003f6406 	br	8112160c <__reset+0xfb10160c>
8112187c:	34c4d83a 	srl	r2,r6,r19
81121880:	3d0e983a 	sll	r7,r7,r20
81121884:	8cf8d83a 	srl	fp,r17,r19
81121888:	8d10983a 	sll	r8,r17,r20
8112188c:	38aab03a 	or	r21,r7,r2
81121890:	a82cd43a 	srli	r22,r21,16
81121894:	84e2d83a 	srl	r17,r16,r19
81121898:	e009883a 	mov	r4,fp
8112189c:	b00b883a 	mov	r5,r22
811218a0:	8a22b03a 	or	r17,r17,r8
811218a4:	3524983a 	sll	r18,r6,r20
811218a8:	1121c440 	call	81121c44 <__umodsi3>
811218ac:	e009883a 	mov	r4,fp
811218b0:	b00b883a 	mov	r5,r22
811218b4:	102f883a 	mov	r23,r2
811218b8:	1121be00 	call	81121be0 <__udivsi3>
811218bc:	100d883a 	mov	r6,r2
811218c0:	b808943a 	slli	r4,r23,16
811218c4:	aa3fffcc 	andi	r8,r21,65535
811218c8:	8804d43a 	srli	r2,r17,16
811218cc:	41af383a 	mul	r23,r8,r6
811218d0:	8520983a 	sll	r16,r16,r20
811218d4:	1104b03a 	or	r2,r2,r4
811218d8:	15c0042e 	bgeu	r2,r23,811218ec <__umoddi3+0x344>
811218dc:	1545883a 	add	r2,r2,r21
811218e0:	30ffffc4 	addi	r3,r6,-1
811218e4:	1540742e 	bgeu	r2,r21,81121ab8 <__umoddi3+0x510>
811218e8:	180d883a 	mov	r6,r3
811218ec:	15efc83a 	sub	r23,r2,r23
811218f0:	b00b883a 	mov	r5,r22
811218f4:	b809883a 	mov	r4,r23
811218f8:	d9800115 	stw	r6,4(sp)
811218fc:	da000015 	stw	r8,0(sp)
81121900:	1121c440 	call	81121c44 <__umodsi3>
81121904:	b00b883a 	mov	r5,r22
81121908:	b809883a 	mov	r4,r23
8112190c:	1039883a 	mov	fp,r2
81121910:	1121be00 	call	81121be0 <__udivsi3>
81121914:	da000017 	ldw	r8,0(sp)
81121918:	e038943a 	slli	fp,fp,16
8112191c:	100b883a 	mov	r5,r2
81121920:	4089383a 	mul	r4,r8,r2
81121924:	8a3fffcc 	andi	r8,r17,65535
81121928:	4710b03a 	or	r8,r8,fp
8112192c:	d9800117 	ldw	r6,4(sp)
81121930:	4100042e 	bgeu	r8,r4,81121944 <__umoddi3+0x39c>
81121934:	4551883a 	add	r8,r8,r21
81121938:	10bfffc4 	addi	r2,r2,-1
8112193c:	45405a2e 	bgeu	r8,r21,81121aa8 <__umoddi3+0x500>
81121940:	100b883a 	mov	r5,r2
81121944:	300c943a 	slli	r6,r6,16
81121948:	91ffffcc 	andi	r7,r18,65535
8112194c:	9004d43a 	srli	r2,r18,16
81121950:	314cb03a 	or	r6,r6,r5
81121954:	317fffcc 	andi	r5,r6,65535
81121958:	300cd43a 	srli	r6,r6,16
8112195c:	29d3383a 	mul	r9,r5,r7
81121960:	288b383a 	mul	r5,r5,r2
81121964:	31cf383a 	mul	r7,r6,r7
81121968:	4806d43a 	srli	r3,r9,16
8112196c:	4111c83a 	sub	r8,r8,r4
81121970:	29cb883a 	add	r5,r5,r7
81121974:	194b883a 	add	r5,r3,r5
81121978:	3085383a 	mul	r2,r6,r2
8112197c:	29c0022e 	bgeu	r5,r7,81121988 <__umoddi3+0x3e0>
81121980:	00c00074 	movhi	r3,1
81121984:	10c5883a 	add	r2,r2,r3
81121988:	2808d43a 	srli	r4,r5,16
8112198c:	280a943a 	slli	r5,r5,16
81121990:	4a7fffcc 	andi	r9,r9,65535
81121994:	2085883a 	add	r2,r4,r2
81121998:	2a4b883a 	add	r5,r5,r9
8112199c:	40803636 	bltu	r8,r2,81121a78 <__umoddi3+0x4d0>
811219a0:	40804d26 	beq	r8,r2,81121ad8 <__umoddi3+0x530>
811219a4:	4089c83a 	sub	r4,r8,r2
811219a8:	280f883a 	mov	r7,r5
811219ac:	81cfc83a 	sub	r7,r16,r7
811219b0:	81c7803a 	cmpltu	r3,r16,r7
811219b4:	20c7c83a 	sub	r3,r4,r3
811219b8:	1cc4983a 	sll	r2,r3,r19
811219bc:	3d0ed83a 	srl	r7,r7,r20
811219c0:	1d06d83a 	srl	r3,r3,r20
811219c4:	11c4b03a 	or	r2,r2,r7
811219c8:	003f9306 	br	81121818 <__reset+0xfb101818>
811219cc:	9ca6983a 	sll	r19,r19,r18
811219d0:	88e8d83a 	srl	r20,r17,r3
811219d4:	80c4d83a 	srl	r2,r16,r3
811219d8:	982cd43a 	srli	r22,r19,16
811219dc:	8ca2983a 	sll	r17,r17,r18
811219e0:	a009883a 	mov	r4,r20
811219e4:	b00b883a 	mov	r5,r22
811219e8:	1478b03a 	or	fp,r2,r17
811219ec:	1121c440 	call	81121c44 <__umodsi3>
811219f0:	a009883a 	mov	r4,r20
811219f4:	b00b883a 	mov	r5,r22
811219f8:	1023883a 	mov	r17,r2
811219fc:	1121be00 	call	81121be0 <__udivsi3>
81121a00:	9d7fffcc 	andi	r21,r19,65535
81121a04:	880a943a 	slli	r5,r17,16
81121a08:	e008d43a 	srli	r4,fp,16
81121a0c:	a885383a 	mul	r2,r21,r2
81121a10:	84a8983a 	sll	r20,r16,r18
81121a14:	2148b03a 	or	r4,r4,r5
81121a18:	2080042e 	bgeu	r4,r2,81121a2c <__umoddi3+0x484>
81121a1c:	24c9883a 	add	r4,r4,r19
81121a20:	24c00236 	bltu	r4,r19,81121a2c <__umoddi3+0x484>
81121a24:	2080012e 	bgeu	r4,r2,81121a2c <__umoddi3+0x484>
81121a28:	24c9883a 	add	r4,r4,r19
81121a2c:	20a3c83a 	sub	r17,r4,r2
81121a30:	b00b883a 	mov	r5,r22
81121a34:	8809883a 	mov	r4,r17
81121a38:	1121c440 	call	81121c44 <__umodsi3>
81121a3c:	102f883a 	mov	r23,r2
81121a40:	8809883a 	mov	r4,r17
81121a44:	b00b883a 	mov	r5,r22
81121a48:	1121be00 	call	81121be0 <__udivsi3>
81121a4c:	b82e943a 	slli	r23,r23,16
81121a50:	a885383a 	mul	r2,r21,r2
81121a54:	e13fffcc 	andi	r4,fp,65535
81121a58:	25c8b03a 	or	r4,r4,r23
81121a5c:	2080042e 	bgeu	r4,r2,81121a70 <__umoddi3+0x4c8>
81121a60:	24c9883a 	add	r4,r4,r19
81121a64:	24c00236 	bltu	r4,r19,81121a70 <__umoddi3+0x4c8>
81121a68:	2080012e 	bgeu	r4,r2,81121a70 <__umoddi3+0x4c8>
81121a6c:	24c9883a 	add	r4,r4,r19
81121a70:	20a3c83a 	sub	r17,r4,r2
81121a74:	003f4806 	br	81121798 <__reset+0xfb101798>
81121a78:	2c8fc83a 	sub	r7,r5,r18
81121a7c:	1545c83a 	sub	r2,r2,r21
81121a80:	29cb803a 	cmpltu	r5,r5,r7
81121a84:	1145c83a 	sub	r2,r2,r5
81121a88:	4089c83a 	sub	r4,r8,r2
81121a8c:	003fc706 	br	811219ac <__reset+0xfb1019ac>
81121a90:	01000604 	movi	r4,24
81121a94:	003f1806 	br	811216f8 <__reset+0xfb1016f8>
81121a98:	00800604 	movi	r2,24
81121a9c:	003f3206 	br	81121768 <__reset+0xfb101768>
81121aa0:	01000604 	movi	r4,24
81121aa4:	003ed906 	br	8112160c <__reset+0xfb10160c>
81121aa8:	413fa52e 	bgeu	r8,r4,81121940 <__reset+0xfb101940>
81121aac:	297fff84 	addi	r5,r5,-2
81121ab0:	4551883a 	add	r8,r8,r21
81121ab4:	003fa306 	br	81121944 <__reset+0xfb101944>
81121ab8:	15ff8b2e 	bgeu	r2,r23,811218e8 <__reset+0xfb1018e8>
81121abc:	31bfff84 	addi	r6,r6,-2
81121ac0:	1545883a 	add	r2,r2,r21
81121ac4:	003f8906 	br	811218ec <__reset+0xfb1018ec>
81121ac8:	24c9883a 	add	r4,r4,r19
81121acc:	003eee06 	br	81121688 <__reset+0xfb101688>
81121ad0:	8005883a 	mov	r2,r16
81121ad4:	003f1706 	br	81121734 <__reset+0xfb101734>
81121ad8:	817fe736 	bltu	r16,r5,81121a78 <__reset+0xfb101a78>
81121adc:	280f883a 	mov	r7,r5
81121ae0:	0009883a 	mov	r4,zero
81121ae4:	003fb106 	br	811219ac <__reset+0xfb1019ac>

81121ae8 <__divsi3>:
81121ae8:	20001b16 	blt	r4,zero,81121b58 <__divsi3+0x70>
81121aec:	000f883a 	mov	r7,zero
81121af0:	28001616 	blt	r5,zero,81121b4c <__divsi3+0x64>
81121af4:	200d883a 	mov	r6,r4
81121af8:	29001a2e 	bgeu	r5,r4,81121b64 <__divsi3+0x7c>
81121afc:	00800804 	movi	r2,32
81121b00:	00c00044 	movi	r3,1
81121b04:	00000106 	br	81121b0c <__divsi3+0x24>
81121b08:	10000d26 	beq	r2,zero,81121b40 <__divsi3+0x58>
81121b0c:	294b883a 	add	r5,r5,r5
81121b10:	10bfffc4 	addi	r2,r2,-1
81121b14:	18c7883a 	add	r3,r3,r3
81121b18:	293ffb36 	bltu	r5,r4,81121b08 <__reset+0xfb101b08>
81121b1c:	0005883a 	mov	r2,zero
81121b20:	18000726 	beq	r3,zero,81121b40 <__divsi3+0x58>
81121b24:	0005883a 	mov	r2,zero
81121b28:	31400236 	bltu	r6,r5,81121b34 <__divsi3+0x4c>
81121b2c:	314dc83a 	sub	r6,r6,r5
81121b30:	10c4b03a 	or	r2,r2,r3
81121b34:	1806d07a 	srli	r3,r3,1
81121b38:	280ad07a 	srli	r5,r5,1
81121b3c:	183ffa1e 	bne	r3,zero,81121b28 <__reset+0xfb101b28>
81121b40:	38000126 	beq	r7,zero,81121b48 <__divsi3+0x60>
81121b44:	0085c83a 	sub	r2,zero,r2
81121b48:	f800283a 	ret
81121b4c:	014bc83a 	sub	r5,zero,r5
81121b50:	39c0005c 	xori	r7,r7,1
81121b54:	003fe706 	br	81121af4 <__reset+0xfb101af4>
81121b58:	0109c83a 	sub	r4,zero,r4
81121b5c:	01c00044 	movi	r7,1
81121b60:	003fe306 	br	81121af0 <__reset+0xfb101af0>
81121b64:	00c00044 	movi	r3,1
81121b68:	003fee06 	br	81121b24 <__reset+0xfb101b24>

81121b6c <__modsi3>:
81121b6c:	20001716 	blt	r4,zero,81121bcc <__modsi3+0x60>
81121b70:	000f883a 	mov	r7,zero
81121b74:	2005883a 	mov	r2,r4
81121b78:	28001216 	blt	r5,zero,81121bc4 <__modsi3+0x58>
81121b7c:	2900162e 	bgeu	r5,r4,81121bd8 <__modsi3+0x6c>
81121b80:	01800804 	movi	r6,32
81121b84:	00c00044 	movi	r3,1
81121b88:	00000106 	br	81121b90 <__modsi3+0x24>
81121b8c:	30000a26 	beq	r6,zero,81121bb8 <__modsi3+0x4c>
81121b90:	294b883a 	add	r5,r5,r5
81121b94:	31bfffc4 	addi	r6,r6,-1
81121b98:	18c7883a 	add	r3,r3,r3
81121b9c:	293ffb36 	bltu	r5,r4,81121b8c <__reset+0xfb101b8c>
81121ba0:	18000526 	beq	r3,zero,81121bb8 <__modsi3+0x4c>
81121ba4:	1806d07a 	srli	r3,r3,1
81121ba8:	11400136 	bltu	r2,r5,81121bb0 <__modsi3+0x44>
81121bac:	1145c83a 	sub	r2,r2,r5
81121bb0:	280ad07a 	srli	r5,r5,1
81121bb4:	183ffb1e 	bne	r3,zero,81121ba4 <__reset+0xfb101ba4>
81121bb8:	38000126 	beq	r7,zero,81121bc0 <__modsi3+0x54>
81121bbc:	0085c83a 	sub	r2,zero,r2
81121bc0:	f800283a 	ret
81121bc4:	014bc83a 	sub	r5,zero,r5
81121bc8:	003fec06 	br	81121b7c <__reset+0xfb101b7c>
81121bcc:	0109c83a 	sub	r4,zero,r4
81121bd0:	01c00044 	movi	r7,1
81121bd4:	003fe706 	br	81121b74 <__reset+0xfb101b74>
81121bd8:	00c00044 	movi	r3,1
81121bdc:	003ff106 	br	81121ba4 <__reset+0xfb101ba4>

81121be0 <__udivsi3>:
81121be0:	200d883a 	mov	r6,r4
81121be4:	2900152e 	bgeu	r5,r4,81121c3c <__udivsi3+0x5c>
81121be8:	28001416 	blt	r5,zero,81121c3c <__udivsi3+0x5c>
81121bec:	00800804 	movi	r2,32
81121bf0:	00c00044 	movi	r3,1
81121bf4:	00000206 	br	81121c00 <__udivsi3+0x20>
81121bf8:	10000e26 	beq	r2,zero,81121c34 <__udivsi3+0x54>
81121bfc:	28000516 	blt	r5,zero,81121c14 <__udivsi3+0x34>
81121c00:	294b883a 	add	r5,r5,r5
81121c04:	10bfffc4 	addi	r2,r2,-1
81121c08:	18c7883a 	add	r3,r3,r3
81121c0c:	293ffa36 	bltu	r5,r4,81121bf8 <__reset+0xfb101bf8>
81121c10:	18000826 	beq	r3,zero,81121c34 <__udivsi3+0x54>
81121c14:	0005883a 	mov	r2,zero
81121c18:	31400236 	bltu	r6,r5,81121c24 <__udivsi3+0x44>
81121c1c:	314dc83a 	sub	r6,r6,r5
81121c20:	10c4b03a 	or	r2,r2,r3
81121c24:	1806d07a 	srli	r3,r3,1
81121c28:	280ad07a 	srli	r5,r5,1
81121c2c:	183ffa1e 	bne	r3,zero,81121c18 <__reset+0xfb101c18>
81121c30:	f800283a 	ret
81121c34:	0005883a 	mov	r2,zero
81121c38:	f800283a 	ret
81121c3c:	00c00044 	movi	r3,1
81121c40:	003ff406 	br	81121c14 <__reset+0xfb101c14>

81121c44 <__umodsi3>:
81121c44:	2005883a 	mov	r2,r4
81121c48:	2900122e 	bgeu	r5,r4,81121c94 <__umodsi3+0x50>
81121c4c:	28001116 	blt	r5,zero,81121c94 <__umodsi3+0x50>
81121c50:	01800804 	movi	r6,32
81121c54:	00c00044 	movi	r3,1
81121c58:	00000206 	br	81121c64 <__umodsi3+0x20>
81121c5c:	30000c26 	beq	r6,zero,81121c90 <__umodsi3+0x4c>
81121c60:	28000516 	blt	r5,zero,81121c78 <__umodsi3+0x34>
81121c64:	294b883a 	add	r5,r5,r5
81121c68:	31bfffc4 	addi	r6,r6,-1
81121c6c:	18c7883a 	add	r3,r3,r3
81121c70:	293ffa36 	bltu	r5,r4,81121c5c <__reset+0xfb101c5c>
81121c74:	18000626 	beq	r3,zero,81121c90 <__umodsi3+0x4c>
81121c78:	1806d07a 	srli	r3,r3,1
81121c7c:	11400136 	bltu	r2,r5,81121c84 <__umodsi3+0x40>
81121c80:	1145c83a 	sub	r2,r2,r5
81121c84:	280ad07a 	srli	r5,r5,1
81121c88:	183ffb1e 	bne	r3,zero,81121c78 <__reset+0xfb101c78>
81121c8c:	f800283a 	ret
81121c90:	f800283a 	ret
81121c94:	00c00044 	movi	r3,1
81121c98:	003ff706 	br	81121c78 <__reset+0xfb101c78>

81121c9c <__eqsf2>:
81121c9c:	2006d5fa 	srli	r3,r4,23
81121ca0:	280cd5fa 	srli	r6,r5,23
81121ca4:	01c02034 	movhi	r7,128
81121ca8:	39ffffc4 	addi	r7,r7,-1
81121cac:	18c03fcc 	andi	r3,r3,255
81121cb0:	02003fc4 	movi	r8,255
81121cb4:	3904703a 	and	r2,r7,r4
81121cb8:	31803fcc 	andi	r6,r6,255
81121cbc:	394e703a 	and	r7,r7,r5
81121cc0:	2008d7fa 	srli	r4,r4,31
81121cc4:	280ad7fa 	srli	r5,r5,31
81121cc8:	1a000d26 	beq	r3,r8,81121d00 <__eqsf2+0x64>
81121ccc:	02003fc4 	movi	r8,255
81121cd0:	32000826 	beq	r6,r8,81121cf4 <__eqsf2+0x58>
81121cd4:	19800226 	beq	r3,r6,81121ce0 <__eqsf2+0x44>
81121cd8:	00800044 	movi	r2,1
81121cdc:	f800283a 	ret
81121ce0:	11fffd1e 	bne	r2,r7,81121cd8 <__reset+0xfb101cd8>
81121ce4:	21400926 	beq	r4,r5,81121d0c <__eqsf2+0x70>
81121ce8:	183ffb1e 	bne	r3,zero,81121cd8 <__reset+0xfb101cd8>
81121cec:	1004c03a 	cmpne	r2,r2,zero
81121cf0:	f800283a 	ret
81121cf4:	383ff726 	beq	r7,zero,81121cd4 <__reset+0xfb101cd4>
81121cf8:	00800044 	movi	r2,1
81121cfc:	f800283a 	ret
81121d00:	103ff226 	beq	r2,zero,81121ccc <__reset+0xfb101ccc>
81121d04:	00800044 	movi	r2,1
81121d08:	f800283a 	ret
81121d0c:	0005883a 	mov	r2,zero
81121d10:	f800283a 	ret

81121d14 <__gesf2>:
81121d14:	2004d5fa 	srli	r2,r4,23
81121d18:	2806d5fa 	srli	r3,r5,23
81121d1c:	01802034 	movhi	r6,128
81121d20:	31bfffc4 	addi	r6,r6,-1
81121d24:	10803fcc 	andi	r2,r2,255
81121d28:	01c03fc4 	movi	r7,255
81121d2c:	3110703a 	and	r8,r6,r4
81121d30:	18c03fcc 	andi	r3,r3,255
81121d34:	314c703a 	and	r6,r6,r5
81121d38:	2008d7fa 	srli	r4,r4,31
81121d3c:	280ad7fa 	srli	r5,r5,31
81121d40:	11c01926 	beq	r2,r7,81121da8 <__gesf2+0x94>
81121d44:	01c03fc4 	movi	r7,255
81121d48:	19c00f26 	beq	r3,r7,81121d88 <__gesf2+0x74>
81121d4c:	1000061e 	bne	r2,zero,81121d68 <__gesf2+0x54>
81121d50:	400f003a 	cmpeq	r7,r8,zero
81121d54:	1800071e 	bne	r3,zero,81121d74 <__gesf2+0x60>
81121d58:	3000061e 	bne	r6,zero,81121d74 <__gesf2+0x60>
81121d5c:	0005883a 	mov	r2,zero
81121d60:	40000e1e 	bne	r8,zero,81121d9c <__gesf2+0x88>
81121d64:	f800283a 	ret
81121d68:	18000a1e 	bne	r3,zero,81121d94 <__gesf2+0x80>
81121d6c:	30000b26 	beq	r6,zero,81121d9c <__gesf2+0x88>
81121d70:	000f883a 	mov	r7,zero
81121d74:	29403fcc 	andi	r5,r5,255
81121d78:	38000726 	beq	r7,zero,81121d98 <__gesf2+0x84>
81121d7c:	28000826 	beq	r5,zero,81121da0 <__gesf2+0x8c>
81121d80:	00800044 	movi	r2,1
81121d84:	f800283a 	ret
81121d88:	303ff026 	beq	r6,zero,81121d4c <__reset+0xfb101d4c>
81121d8c:	00bfff84 	movi	r2,-2
81121d90:	f800283a 	ret
81121d94:	29403fcc 	andi	r5,r5,255
81121d98:	21400526 	beq	r4,r5,81121db0 <__gesf2+0x9c>
81121d9c:	203ff826 	beq	r4,zero,81121d80 <__reset+0xfb101d80>
81121da0:	00bfffc4 	movi	r2,-1
81121da4:	f800283a 	ret
81121da8:	403fe626 	beq	r8,zero,81121d44 <__reset+0xfb101d44>
81121dac:	003ff706 	br	81121d8c <__reset+0xfb101d8c>
81121db0:	18bffa16 	blt	r3,r2,81121d9c <__reset+0xfb101d9c>
81121db4:	10c00216 	blt	r2,r3,81121dc0 <__gesf2+0xac>
81121db8:	323ff836 	bltu	r6,r8,81121d9c <__reset+0xfb101d9c>
81121dbc:	4180022e 	bgeu	r8,r6,81121dc8 <__gesf2+0xb4>
81121dc0:	203fef1e 	bne	r4,zero,81121d80 <__reset+0xfb101d80>
81121dc4:	003ff606 	br	81121da0 <__reset+0xfb101da0>
81121dc8:	0005883a 	mov	r2,zero
81121dcc:	f800283a 	ret

81121dd0 <__lesf2>:
81121dd0:	2004d5fa 	srli	r2,r4,23
81121dd4:	280cd5fa 	srli	r6,r5,23
81121dd8:	00c02034 	movhi	r3,128
81121ddc:	18ffffc4 	addi	r3,r3,-1
81121de0:	10803fcc 	andi	r2,r2,255
81121de4:	01c03fc4 	movi	r7,255
81121de8:	1910703a 	and	r8,r3,r4
81121dec:	31803fcc 	andi	r6,r6,255
81121df0:	1946703a 	and	r3,r3,r5
81121df4:	2008d7fa 	srli	r4,r4,31
81121df8:	280ad7fa 	srli	r5,r5,31
81121dfc:	11c01b26 	beq	r2,r7,81121e6c <__lesf2+0x9c>
81121e00:	01c03fc4 	movi	r7,255
81121e04:	31c01126 	beq	r6,r7,81121e4c <__lesf2+0x7c>
81121e08:	1000071e 	bne	r2,zero,81121e28 <__lesf2+0x58>
81121e0c:	400f003a 	cmpeq	r7,r8,zero
81121e10:	21003fcc 	andi	r4,r4,255
81121e14:	3000081e 	bne	r6,zero,81121e38 <__lesf2+0x68>
81121e18:	1800071e 	bne	r3,zero,81121e38 <__lesf2+0x68>
81121e1c:	0005883a 	mov	r2,zero
81121e20:	40000f1e 	bne	r8,zero,81121e60 <__lesf2+0x90>
81121e24:	f800283a 	ret
81121e28:	21003fcc 	andi	r4,r4,255
81121e2c:	30000a1e 	bne	r6,zero,81121e58 <__lesf2+0x88>
81121e30:	18000b26 	beq	r3,zero,81121e60 <__lesf2+0x90>
81121e34:	000f883a 	mov	r7,zero
81121e38:	29403fcc 	andi	r5,r5,255
81121e3c:	38000726 	beq	r7,zero,81121e5c <__lesf2+0x8c>
81121e40:	28000826 	beq	r5,zero,81121e64 <__lesf2+0x94>
81121e44:	00800044 	movi	r2,1
81121e48:	f800283a 	ret
81121e4c:	183fee26 	beq	r3,zero,81121e08 <__reset+0xfb101e08>
81121e50:	00800084 	movi	r2,2
81121e54:	f800283a 	ret
81121e58:	29403fcc 	andi	r5,r5,255
81121e5c:	21400626 	beq	r4,r5,81121e78 <__lesf2+0xa8>
81121e60:	203ff826 	beq	r4,zero,81121e44 <__reset+0xfb101e44>
81121e64:	00bfffc4 	movi	r2,-1
81121e68:	f800283a 	ret
81121e6c:	403fe426 	beq	r8,zero,81121e00 <__reset+0xfb101e00>
81121e70:	00800084 	movi	r2,2
81121e74:	f800283a 	ret
81121e78:	30bff916 	blt	r6,r2,81121e60 <__reset+0xfb101e60>
81121e7c:	11800216 	blt	r2,r6,81121e88 <__lesf2+0xb8>
81121e80:	1a3ff736 	bltu	r3,r8,81121e60 <__reset+0xfb101e60>
81121e84:	40c0022e 	bgeu	r8,r3,81121e90 <__lesf2+0xc0>
81121e88:	203fee1e 	bne	r4,zero,81121e44 <__reset+0xfb101e44>
81121e8c:	003ff506 	br	81121e64 <__reset+0xfb101e64>
81121e90:	0005883a 	mov	r2,zero
81121e94:	f800283a 	ret

81121e98 <__adddf3>:
81121e98:	02c00434 	movhi	r11,16
81121e9c:	5affffc4 	addi	r11,r11,-1
81121ea0:	2806d7fa 	srli	r3,r5,31
81121ea4:	2ad4703a 	and	r10,r5,r11
81121ea8:	3ad2703a 	and	r9,r7,r11
81121eac:	3804d53a 	srli	r2,r7,20
81121eb0:	3018d77a 	srli	r12,r6,29
81121eb4:	280ad53a 	srli	r5,r5,20
81121eb8:	501490fa 	slli	r10,r10,3
81121ebc:	2010d77a 	srli	r8,r4,29
81121ec0:	481290fa 	slli	r9,r9,3
81121ec4:	380ed7fa 	srli	r7,r7,31
81121ec8:	defffb04 	addi	sp,sp,-20
81121ecc:	de00012e 	bgeu	sp,et,81121ed4 <__adddf3+0x3c>
81121ed0:	003b68fa 	trap	3
81121ed4:	dc800215 	stw	r18,8(sp)
81121ed8:	dc400115 	stw	r17,4(sp)
81121edc:	dc000015 	stw	r16,0(sp)
81121ee0:	dfc00415 	stw	ra,16(sp)
81121ee4:	dcc00315 	stw	r19,12(sp)
81121ee8:	1c803fcc 	andi	r18,r3,255
81121eec:	2c01ffcc 	andi	r16,r5,2047
81121ef0:	5210b03a 	or	r8,r10,r8
81121ef4:	202290fa 	slli	r17,r4,3
81121ef8:	1081ffcc 	andi	r2,r2,2047
81121efc:	4b12b03a 	or	r9,r9,r12
81121f00:	300c90fa 	slli	r6,r6,3
81121f04:	91c07526 	beq	r18,r7,811220dc <__adddf3+0x244>
81121f08:	8087c83a 	sub	r3,r16,r2
81121f0c:	00c0ab0e 	bge	zero,r3,811221bc <__adddf3+0x324>
81121f10:	10002a1e 	bne	r2,zero,81121fbc <__adddf3+0x124>
81121f14:	4984b03a 	or	r2,r9,r6
81121f18:	1000961e 	bne	r2,zero,81122174 <__adddf3+0x2dc>
81121f1c:	888001cc 	andi	r2,r17,7
81121f20:	10000726 	beq	r2,zero,81121f40 <__adddf3+0xa8>
81121f24:	888003cc 	andi	r2,r17,15
81121f28:	00c00104 	movi	r3,4
81121f2c:	10c00426 	beq	r2,r3,81121f40 <__adddf3+0xa8>
81121f30:	88c7883a 	add	r3,r17,r3
81121f34:	1c63803a 	cmpltu	r17,r3,r17
81121f38:	4451883a 	add	r8,r8,r17
81121f3c:	1823883a 	mov	r17,r3
81121f40:	4080202c 	andhi	r2,r8,128
81121f44:	10005926 	beq	r2,zero,811220ac <__adddf3+0x214>
81121f48:	84000044 	addi	r16,r16,1
81121f4c:	0081ffc4 	movi	r2,2047
81121f50:	8080ba26 	beq	r16,r2,8112223c <__adddf3+0x3a4>
81121f54:	00bfe034 	movhi	r2,65408
81121f58:	10bfffc4 	addi	r2,r2,-1
81121f5c:	4090703a 	and	r8,r8,r2
81121f60:	4004977a 	slli	r2,r8,29
81121f64:	4010927a 	slli	r8,r8,9
81121f68:	8822d0fa 	srli	r17,r17,3
81121f6c:	8401ffcc 	andi	r16,r16,2047
81121f70:	4010d33a 	srli	r8,r8,12
81121f74:	9007883a 	mov	r3,r18
81121f78:	1444b03a 	or	r2,r2,r17
81121f7c:	8401ffcc 	andi	r16,r16,2047
81121f80:	8020953a 	slli	r16,r16,20
81121f84:	18c03fcc 	andi	r3,r3,255
81121f88:	01000434 	movhi	r4,16
81121f8c:	213fffc4 	addi	r4,r4,-1
81121f90:	180697fa 	slli	r3,r3,31
81121f94:	4110703a 	and	r8,r8,r4
81121f98:	4410b03a 	or	r8,r8,r16
81121f9c:	40c6b03a 	or	r3,r8,r3
81121fa0:	dfc00417 	ldw	ra,16(sp)
81121fa4:	dcc00317 	ldw	r19,12(sp)
81121fa8:	dc800217 	ldw	r18,8(sp)
81121fac:	dc400117 	ldw	r17,4(sp)
81121fb0:	dc000017 	ldw	r16,0(sp)
81121fb4:	dec00504 	addi	sp,sp,20
81121fb8:	f800283a 	ret
81121fbc:	0081ffc4 	movi	r2,2047
81121fc0:	80bfd626 	beq	r16,r2,81121f1c <__reset+0xfb101f1c>
81121fc4:	4a402034 	orhi	r9,r9,128
81121fc8:	00800e04 	movi	r2,56
81121fcc:	10c09f16 	blt	r2,r3,8112224c <__adddf3+0x3b4>
81121fd0:	008007c4 	movi	r2,31
81121fd4:	10c0c216 	blt	r2,r3,811222e0 <__adddf3+0x448>
81121fd8:	00800804 	movi	r2,32
81121fdc:	10c5c83a 	sub	r2,r2,r3
81121fe0:	488a983a 	sll	r5,r9,r2
81121fe4:	30c8d83a 	srl	r4,r6,r3
81121fe8:	3084983a 	sll	r2,r6,r2
81121fec:	48c6d83a 	srl	r3,r9,r3
81121ff0:	290cb03a 	or	r6,r5,r4
81121ff4:	1004c03a 	cmpne	r2,r2,zero
81121ff8:	308cb03a 	or	r6,r6,r2
81121ffc:	898dc83a 	sub	r6,r17,r6
81122000:	89a3803a 	cmpltu	r17,r17,r6
81122004:	40d1c83a 	sub	r8,r8,r3
81122008:	4451c83a 	sub	r8,r8,r17
8112200c:	3023883a 	mov	r17,r6
81122010:	4080202c 	andhi	r2,r8,128
81122014:	10002326 	beq	r2,zero,811220a4 <__adddf3+0x20c>
81122018:	04c02034 	movhi	r19,128
8112201c:	9cffffc4 	addi	r19,r19,-1
81122020:	44e6703a 	and	r19,r8,r19
81122024:	98007626 	beq	r19,zero,81122200 <__adddf3+0x368>
81122028:	9809883a 	mov	r4,r19
8112202c:	110e45c0 	call	8110e45c <__clzsi2>
81122030:	10fffe04 	addi	r3,r2,-8
81122034:	010007c4 	movi	r4,31
81122038:	20c07716 	blt	r4,r3,81122218 <__adddf3+0x380>
8112203c:	00800804 	movi	r2,32
81122040:	10c5c83a 	sub	r2,r2,r3
81122044:	8884d83a 	srl	r2,r17,r2
81122048:	98d0983a 	sll	r8,r19,r3
8112204c:	88e2983a 	sll	r17,r17,r3
81122050:	1204b03a 	or	r2,r2,r8
81122054:	1c007416 	blt	r3,r16,81122228 <__adddf3+0x390>
81122058:	1c21c83a 	sub	r16,r3,r16
8112205c:	82000044 	addi	r8,r16,1
81122060:	00c007c4 	movi	r3,31
81122064:	1a009116 	blt	r3,r8,811222ac <__adddf3+0x414>
81122068:	00c00804 	movi	r3,32
8112206c:	1a07c83a 	sub	r3,r3,r8
81122070:	8a08d83a 	srl	r4,r17,r8
81122074:	88e2983a 	sll	r17,r17,r3
81122078:	10c6983a 	sll	r3,r2,r3
8112207c:	1210d83a 	srl	r8,r2,r8
81122080:	8804c03a 	cmpne	r2,r17,zero
81122084:	1906b03a 	or	r3,r3,r4
81122088:	18a2b03a 	or	r17,r3,r2
8112208c:	0021883a 	mov	r16,zero
81122090:	003fa206 	br	81121f1c <__reset+0xfb101f1c>
81122094:	1890b03a 	or	r8,r3,r2
81122098:	40017d26 	beq	r8,zero,81122690 <__adddf3+0x7f8>
8112209c:	1011883a 	mov	r8,r2
811220a0:	1823883a 	mov	r17,r3
811220a4:	888001cc 	andi	r2,r17,7
811220a8:	103f9e1e 	bne	r2,zero,81121f24 <__reset+0xfb101f24>
811220ac:	4004977a 	slli	r2,r8,29
811220b0:	8822d0fa 	srli	r17,r17,3
811220b4:	4010d0fa 	srli	r8,r8,3
811220b8:	9007883a 	mov	r3,r18
811220bc:	1444b03a 	or	r2,r2,r17
811220c0:	0101ffc4 	movi	r4,2047
811220c4:	81002426 	beq	r16,r4,81122158 <__adddf3+0x2c0>
811220c8:	8120703a 	and	r16,r16,r4
811220cc:	01000434 	movhi	r4,16
811220d0:	213fffc4 	addi	r4,r4,-1
811220d4:	4110703a 	and	r8,r8,r4
811220d8:	003fa806 	br	81121f7c <__reset+0xfb101f7c>
811220dc:	8089c83a 	sub	r4,r16,r2
811220e0:	01005e0e 	bge	zero,r4,8112225c <__adddf3+0x3c4>
811220e4:	10002b26 	beq	r2,zero,81122194 <__adddf3+0x2fc>
811220e8:	0081ffc4 	movi	r2,2047
811220ec:	80bf8b26 	beq	r16,r2,81121f1c <__reset+0xfb101f1c>
811220f0:	4a402034 	orhi	r9,r9,128
811220f4:	00800e04 	movi	r2,56
811220f8:	1100a40e 	bge	r2,r4,8112238c <__adddf3+0x4f4>
811220fc:	498cb03a 	or	r6,r9,r6
81122100:	300ac03a 	cmpne	r5,r6,zero
81122104:	0013883a 	mov	r9,zero
81122108:	2c4b883a 	add	r5,r5,r17
8112210c:	2c63803a 	cmpltu	r17,r5,r17
81122110:	4a11883a 	add	r8,r9,r8
81122114:	8a11883a 	add	r8,r17,r8
81122118:	2823883a 	mov	r17,r5
8112211c:	4080202c 	andhi	r2,r8,128
81122120:	103fe026 	beq	r2,zero,811220a4 <__reset+0xfb1020a4>
81122124:	84000044 	addi	r16,r16,1
81122128:	0081ffc4 	movi	r2,2047
8112212c:	8080d226 	beq	r16,r2,81122478 <__adddf3+0x5e0>
81122130:	00bfe034 	movhi	r2,65408
81122134:	10bfffc4 	addi	r2,r2,-1
81122138:	4090703a 	and	r8,r8,r2
8112213c:	880ad07a 	srli	r5,r17,1
81122140:	400897fa 	slli	r4,r8,31
81122144:	88c0004c 	andi	r3,r17,1
81122148:	28e2b03a 	or	r17,r5,r3
8112214c:	4010d07a 	srli	r8,r8,1
81122150:	2462b03a 	or	r17,r4,r17
81122154:	003f7106 	br	81121f1c <__reset+0xfb101f1c>
81122158:	4088b03a 	or	r4,r8,r2
8112215c:	20014526 	beq	r4,zero,81122674 <__adddf3+0x7dc>
81122160:	01000434 	movhi	r4,16
81122164:	42000234 	orhi	r8,r8,8
81122168:	213fffc4 	addi	r4,r4,-1
8112216c:	4110703a 	and	r8,r8,r4
81122170:	003f8206 	br	81121f7c <__reset+0xfb101f7c>
81122174:	18ffffc4 	addi	r3,r3,-1
81122178:	1800491e 	bne	r3,zero,811222a0 <__adddf3+0x408>
8112217c:	898bc83a 	sub	r5,r17,r6
81122180:	8963803a 	cmpltu	r17,r17,r5
81122184:	4251c83a 	sub	r8,r8,r9
81122188:	4451c83a 	sub	r8,r8,r17
8112218c:	2823883a 	mov	r17,r5
81122190:	003f9f06 	br	81122010 <__reset+0xfb102010>
81122194:	4984b03a 	or	r2,r9,r6
81122198:	103f6026 	beq	r2,zero,81121f1c <__reset+0xfb101f1c>
8112219c:	213fffc4 	addi	r4,r4,-1
811221a0:	2000931e 	bne	r4,zero,811223f0 <__adddf3+0x558>
811221a4:	898d883a 	add	r6,r17,r6
811221a8:	3463803a 	cmpltu	r17,r6,r17
811221ac:	4251883a 	add	r8,r8,r9
811221b0:	8a11883a 	add	r8,r17,r8
811221b4:	3023883a 	mov	r17,r6
811221b8:	003fd806 	br	8112211c <__reset+0xfb10211c>
811221bc:	1800541e 	bne	r3,zero,81122310 <__adddf3+0x478>
811221c0:	80800044 	addi	r2,r16,1
811221c4:	1081ffcc 	andi	r2,r2,2047
811221c8:	00c00044 	movi	r3,1
811221cc:	1880a00e 	bge	r3,r2,81122450 <__adddf3+0x5b8>
811221d0:	8989c83a 	sub	r4,r17,r6
811221d4:	8905803a 	cmpltu	r2,r17,r4
811221d8:	4267c83a 	sub	r19,r8,r9
811221dc:	98a7c83a 	sub	r19,r19,r2
811221e0:	9880202c 	andhi	r2,r19,128
811221e4:	10006326 	beq	r2,zero,81122374 <__adddf3+0x4dc>
811221e8:	3463c83a 	sub	r17,r6,r17
811221ec:	4a07c83a 	sub	r3,r9,r8
811221f0:	344d803a 	cmpltu	r6,r6,r17
811221f4:	19a7c83a 	sub	r19,r3,r6
811221f8:	3825883a 	mov	r18,r7
811221fc:	983f8a1e 	bne	r19,zero,81122028 <__reset+0xfb102028>
81122200:	8809883a 	mov	r4,r17
81122204:	110e45c0 	call	8110e45c <__clzsi2>
81122208:	10800804 	addi	r2,r2,32
8112220c:	10fffe04 	addi	r3,r2,-8
81122210:	010007c4 	movi	r4,31
81122214:	20ff890e 	bge	r4,r3,8112203c <__reset+0xfb10203c>
81122218:	10bff604 	addi	r2,r2,-40
8112221c:	8884983a 	sll	r2,r17,r2
81122220:	0023883a 	mov	r17,zero
81122224:	1c3f8c0e 	bge	r3,r16,81122058 <__reset+0xfb102058>
81122228:	023fe034 	movhi	r8,65408
8112222c:	423fffc4 	addi	r8,r8,-1
81122230:	80e1c83a 	sub	r16,r16,r3
81122234:	1210703a 	and	r8,r2,r8
81122238:	003f3806 	br	81121f1c <__reset+0xfb101f1c>
8112223c:	9007883a 	mov	r3,r18
81122240:	0011883a 	mov	r8,zero
81122244:	0005883a 	mov	r2,zero
81122248:	003f4c06 	br	81121f7c <__reset+0xfb101f7c>
8112224c:	498cb03a 	or	r6,r9,r6
81122250:	300cc03a 	cmpne	r6,r6,zero
81122254:	0007883a 	mov	r3,zero
81122258:	003f6806 	br	81121ffc <__reset+0xfb101ffc>
8112225c:	20009c1e 	bne	r4,zero,811224d0 <__adddf3+0x638>
81122260:	80800044 	addi	r2,r16,1
81122264:	1141ffcc 	andi	r5,r2,2047
81122268:	01000044 	movi	r4,1
8112226c:	2140670e 	bge	r4,r5,8112240c <__adddf3+0x574>
81122270:	0101ffc4 	movi	r4,2047
81122274:	11007f26 	beq	r2,r4,81122474 <__adddf3+0x5dc>
81122278:	898d883a 	add	r6,r17,r6
8112227c:	4247883a 	add	r3,r8,r9
81122280:	3451803a 	cmpltu	r8,r6,r17
81122284:	40d1883a 	add	r8,r8,r3
81122288:	402297fa 	slli	r17,r8,31
8112228c:	300cd07a 	srli	r6,r6,1
81122290:	4010d07a 	srli	r8,r8,1
81122294:	1021883a 	mov	r16,r2
81122298:	89a2b03a 	or	r17,r17,r6
8112229c:	003f1f06 	br	81121f1c <__reset+0xfb101f1c>
811222a0:	0081ffc4 	movi	r2,2047
811222a4:	80bf481e 	bne	r16,r2,81121fc8 <__reset+0xfb101fc8>
811222a8:	003f1c06 	br	81121f1c <__reset+0xfb101f1c>
811222ac:	843ff844 	addi	r16,r16,-31
811222b0:	01000804 	movi	r4,32
811222b4:	1406d83a 	srl	r3,r2,r16
811222b8:	41005026 	beq	r8,r4,811223fc <__adddf3+0x564>
811222bc:	01001004 	movi	r4,64
811222c0:	2211c83a 	sub	r8,r4,r8
811222c4:	1204983a 	sll	r2,r2,r8
811222c8:	88a2b03a 	or	r17,r17,r2
811222cc:	8822c03a 	cmpne	r17,r17,zero
811222d0:	1c62b03a 	or	r17,r3,r17
811222d4:	0011883a 	mov	r8,zero
811222d8:	0021883a 	mov	r16,zero
811222dc:	003f7106 	br	811220a4 <__reset+0xfb1020a4>
811222e0:	193ff804 	addi	r4,r3,-32
811222e4:	00800804 	movi	r2,32
811222e8:	4908d83a 	srl	r4,r9,r4
811222ec:	18804526 	beq	r3,r2,81122404 <__adddf3+0x56c>
811222f0:	00801004 	movi	r2,64
811222f4:	10c5c83a 	sub	r2,r2,r3
811222f8:	4886983a 	sll	r3,r9,r2
811222fc:	198cb03a 	or	r6,r3,r6
81122300:	300cc03a 	cmpne	r6,r6,zero
81122304:	218cb03a 	or	r6,r4,r6
81122308:	0007883a 	mov	r3,zero
8112230c:	003f3b06 	br	81121ffc <__reset+0xfb101ffc>
81122310:	80002a26 	beq	r16,zero,811223bc <__adddf3+0x524>
81122314:	0101ffc4 	movi	r4,2047
81122318:	11006826 	beq	r2,r4,811224bc <__adddf3+0x624>
8112231c:	00c7c83a 	sub	r3,zero,r3
81122320:	42002034 	orhi	r8,r8,128
81122324:	01000e04 	movi	r4,56
81122328:	20c07c16 	blt	r4,r3,8112251c <__adddf3+0x684>
8112232c:	010007c4 	movi	r4,31
81122330:	20c0da16 	blt	r4,r3,8112269c <__adddf3+0x804>
81122334:	01000804 	movi	r4,32
81122338:	20c9c83a 	sub	r4,r4,r3
8112233c:	4114983a 	sll	r10,r8,r4
81122340:	88cad83a 	srl	r5,r17,r3
81122344:	8908983a 	sll	r4,r17,r4
81122348:	40c6d83a 	srl	r3,r8,r3
8112234c:	5162b03a 	or	r17,r10,r5
81122350:	2008c03a 	cmpne	r4,r4,zero
81122354:	8922b03a 	or	r17,r17,r4
81122358:	3463c83a 	sub	r17,r6,r17
8112235c:	48c7c83a 	sub	r3,r9,r3
81122360:	344d803a 	cmpltu	r6,r6,r17
81122364:	1991c83a 	sub	r8,r3,r6
81122368:	1021883a 	mov	r16,r2
8112236c:	3825883a 	mov	r18,r7
81122370:	003f2706 	br	81122010 <__reset+0xfb102010>
81122374:	24d0b03a 	or	r8,r4,r19
81122378:	40001b1e 	bne	r8,zero,811223e8 <__adddf3+0x550>
8112237c:	0005883a 	mov	r2,zero
81122380:	0007883a 	mov	r3,zero
81122384:	0021883a 	mov	r16,zero
81122388:	003f4d06 	br	811220c0 <__reset+0xfb1020c0>
8112238c:	008007c4 	movi	r2,31
81122390:	11003c16 	blt	r2,r4,81122484 <__adddf3+0x5ec>
81122394:	00800804 	movi	r2,32
81122398:	1105c83a 	sub	r2,r2,r4
8112239c:	488e983a 	sll	r7,r9,r2
811223a0:	310ad83a 	srl	r5,r6,r4
811223a4:	3084983a 	sll	r2,r6,r2
811223a8:	4912d83a 	srl	r9,r9,r4
811223ac:	394ab03a 	or	r5,r7,r5
811223b0:	1004c03a 	cmpne	r2,r2,zero
811223b4:	288ab03a 	or	r5,r5,r2
811223b8:	003f5306 	br	81122108 <__reset+0xfb102108>
811223bc:	4448b03a 	or	r4,r8,r17
811223c0:	20003e26 	beq	r4,zero,811224bc <__adddf3+0x624>
811223c4:	00c6303a 	nor	r3,zero,r3
811223c8:	18003a1e 	bne	r3,zero,811224b4 <__adddf3+0x61c>
811223cc:	3463c83a 	sub	r17,r6,r17
811223d0:	4a07c83a 	sub	r3,r9,r8
811223d4:	344d803a 	cmpltu	r6,r6,r17
811223d8:	1991c83a 	sub	r8,r3,r6
811223dc:	1021883a 	mov	r16,r2
811223e0:	3825883a 	mov	r18,r7
811223e4:	003f0a06 	br	81122010 <__reset+0xfb102010>
811223e8:	2023883a 	mov	r17,r4
811223ec:	003f0d06 	br	81122024 <__reset+0xfb102024>
811223f0:	0081ffc4 	movi	r2,2047
811223f4:	80bf3f1e 	bne	r16,r2,811220f4 <__reset+0xfb1020f4>
811223f8:	003ec806 	br	81121f1c <__reset+0xfb101f1c>
811223fc:	0005883a 	mov	r2,zero
81122400:	003fb106 	br	811222c8 <__reset+0xfb1022c8>
81122404:	0007883a 	mov	r3,zero
81122408:	003fbc06 	br	811222fc <__reset+0xfb1022fc>
8112240c:	4444b03a 	or	r2,r8,r17
81122410:	8000871e 	bne	r16,zero,81122630 <__adddf3+0x798>
81122414:	1000ba26 	beq	r2,zero,81122700 <__adddf3+0x868>
81122418:	4984b03a 	or	r2,r9,r6
8112241c:	103ebf26 	beq	r2,zero,81121f1c <__reset+0xfb101f1c>
81122420:	8985883a 	add	r2,r17,r6
81122424:	4247883a 	add	r3,r8,r9
81122428:	1451803a 	cmpltu	r8,r2,r17
8112242c:	40d1883a 	add	r8,r8,r3
81122430:	40c0202c 	andhi	r3,r8,128
81122434:	1023883a 	mov	r17,r2
81122438:	183f1a26 	beq	r3,zero,811220a4 <__reset+0xfb1020a4>
8112243c:	00bfe034 	movhi	r2,65408
81122440:	10bfffc4 	addi	r2,r2,-1
81122444:	2021883a 	mov	r16,r4
81122448:	4090703a 	and	r8,r8,r2
8112244c:	003eb306 	br	81121f1c <__reset+0xfb101f1c>
81122450:	4444b03a 	or	r2,r8,r17
81122454:	8000291e 	bne	r16,zero,811224fc <__adddf3+0x664>
81122458:	10004b1e 	bne	r2,zero,81122588 <__adddf3+0x6f0>
8112245c:	4990b03a 	or	r8,r9,r6
81122460:	40008b26 	beq	r8,zero,81122690 <__adddf3+0x7f8>
81122464:	4811883a 	mov	r8,r9
81122468:	3023883a 	mov	r17,r6
8112246c:	3825883a 	mov	r18,r7
81122470:	003eaa06 	br	81121f1c <__reset+0xfb101f1c>
81122474:	1021883a 	mov	r16,r2
81122478:	0011883a 	mov	r8,zero
8112247c:	0005883a 	mov	r2,zero
81122480:	003f0f06 	br	811220c0 <__reset+0xfb1020c0>
81122484:	217ff804 	addi	r5,r4,-32
81122488:	00800804 	movi	r2,32
8112248c:	494ad83a 	srl	r5,r9,r5
81122490:	20807d26 	beq	r4,r2,81122688 <__adddf3+0x7f0>
81122494:	00801004 	movi	r2,64
81122498:	1109c83a 	sub	r4,r2,r4
8112249c:	4912983a 	sll	r9,r9,r4
811224a0:	498cb03a 	or	r6,r9,r6
811224a4:	300cc03a 	cmpne	r6,r6,zero
811224a8:	298ab03a 	or	r5,r5,r6
811224ac:	0013883a 	mov	r9,zero
811224b0:	003f1506 	br	81122108 <__reset+0xfb102108>
811224b4:	0101ffc4 	movi	r4,2047
811224b8:	113f9a1e 	bne	r2,r4,81122324 <__reset+0xfb102324>
811224bc:	4811883a 	mov	r8,r9
811224c0:	3023883a 	mov	r17,r6
811224c4:	1021883a 	mov	r16,r2
811224c8:	3825883a 	mov	r18,r7
811224cc:	003e9306 	br	81121f1c <__reset+0xfb101f1c>
811224d0:	8000161e 	bne	r16,zero,8112252c <__adddf3+0x694>
811224d4:	444ab03a 	or	r5,r8,r17
811224d8:	28005126 	beq	r5,zero,81122620 <__adddf3+0x788>
811224dc:	0108303a 	nor	r4,zero,r4
811224e0:	20004d1e 	bne	r4,zero,81122618 <__adddf3+0x780>
811224e4:	89a3883a 	add	r17,r17,r6
811224e8:	4253883a 	add	r9,r8,r9
811224ec:	898d803a 	cmpltu	r6,r17,r6
811224f0:	3251883a 	add	r8,r6,r9
811224f4:	1021883a 	mov	r16,r2
811224f8:	003f0806 	br	8112211c <__reset+0xfb10211c>
811224fc:	1000301e 	bne	r2,zero,811225c0 <__adddf3+0x728>
81122500:	4984b03a 	or	r2,r9,r6
81122504:	10007126 	beq	r2,zero,811226cc <__adddf3+0x834>
81122508:	4811883a 	mov	r8,r9
8112250c:	3023883a 	mov	r17,r6
81122510:	3825883a 	mov	r18,r7
81122514:	0401ffc4 	movi	r16,2047
81122518:	003e8006 	br	81121f1c <__reset+0xfb101f1c>
8112251c:	4462b03a 	or	r17,r8,r17
81122520:	8822c03a 	cmpne	r17,r17,zero
81122524:	0007883a 	mov	r3,zero
81122528:	003f8b06 	br	81122358 <__reset+0xfb102358>
8112252c:	0141ffc4 	movi	r5,2047
81122530:	11403b26 	beq	r2,r5,81122620 <__adddf3+0x788>
81122534:	0109c83a 	sub	r4,zero,r4
81122538:	42002034 	orhi	r8,r8,128
8112253c:	01400e04 	movi	r5,56
81122540:	29006716 	blt	r5,r4,811226e0 <__adddf3+0x848>
81122544:	014007c4 	movi	r5,31
81122548:	29007016 	blt	r5,r4,8112270c <__adddf3+0x874>
8112254c:	01400804 	movi	r5,32
81122550:	290bc83a 	sub	r5,r5,r4
81122554:	4154983a 	sll	r10,r8,r5
81122558:	890ed83a 	srl	r7,r17,r4
8112255c:	894a983a 	sll	r5,r17,r5
81122560:	4108d83a 	srl	r4,r8,r4
81122564:	51e2b03a 	or	r17,r10,r7
81122568:	280ac03a 	cmpne	r5,r5,zero
8112256c:	8962b03a 	or	r17,r17,r5
81122570:	89a3883a 	add	r17,r17,r6
81122574:	2253883a 	add	r9,r4,r9
81122578:	898d803a 	cmpltu	r6,r17,r6
8112257c:	3251883a 	add	r8,r6,r9
81122580:	1021883a 	mov	r16,r2
81122584:	003ee506 	br	8112211c <__reset+0xfb10211c>
81122588:	4984b03a 	or	r2,r9,r6
8112258c:	103e6326 	beq	r2,zero,81121f1c <__reset+0xfb101f1c>
81122590:	8987c83a 	sub	r3,r17,r6
81122594:	88c9803a 	cmpltu	r4,r17,r3
81122598:	4245c83a 	sub	r2,r8,r9
8112259c:	1105c83a 	sub	r2,r2,r4
811225a0:	1100202c 	andhi	r4,r2,128
811225a4:	203ebb26 	beq	r4,zero,81122094 <__reset+0xfb102094>
811225a8:	3463c83a 	sub	r17,r6,r17
811225ac:	4a07c83a 	sub	r3,r9,r8
811225b0:	344d803a 	cmpltu	r6,r6,r17
811225b4:	1991c83a 	sub	r8,r3,r6
811225b8:	3825883a 	mov	r18,r7
811225bc:	003e5706 	br	81121f1c <__reset+0xfb101f1c>
811225c0:	4984b03a 	or	r2,r9,r6
811225c4:	10002e26 	beq	r2,zero,81122680 <__adddf3+0x7e8>
811225c8:	4004d0fa 	srli	r2,r8,3
811225cc:	8822d0fa 	srli	r17,r17,3
811225d0:	4010977a 	slli	r8,r8,29
811225d4:	10c0022c 	andhi	r3,r2,8
811225d8:	4462b03a 	or	r17,r8,r17
811225dc:	18000826 	beq	r3,zero,81122600 <__adddf3+0x768>
811225e0:	4808d0fa 	srli	r4,r9,3
811225e4:	20c0022c 	andhi	r3,r4,8
811225e8:	1800051e 	bne	r3,zero,81122600 <__adddf3+0x768>
811225ec:	300cd0fa 	srli	r6,r6,3
811225f0:	4806977a 	slli	r3,r9,29
811225f4:	2005883a 	mov	r2,r4
811225f8:	3825883a 	mov	r18,r7
811225fc:	19a2b03a 	or	r17,r3,r6
81122600:	8810d77a 	srli	r8,r17,29
81122604:	100490fa 	slli	r2,r2,3
81122608:	882290fa 	slli	r17,r17,3
8112260c:	0401ffc4 	movi	r16,2047
81122610:	4090b03a 	or	r8,r8,r2
81122614:	003e4106 	br	81121f1c <__reset+0xfb101f1c>
81122618:	0141ffc4 	movi	r5,2047
8112261c:	117fc71e 	bne	r2,r5,8112253c <__reset+0xfb10253c>
81122620:	4811883a 	mov	r8,r9
81122624:	3023883a 	mov	r17,r6
81122628:	1021883a 	mov	r16,r2
8112262c:	003e3b06 	br	81121f1c <__reset+0xfb101f1c>
81122630:	10002f26 	beq	r2,zero,811226f0 <__adddf3+0x858>
81122634:	4984b03a 	or	r2,r9,r6
81122638:	10001126 	beq	r2,zero,81122680 <__adddf3+0x7e8>
8112263c:	4004d0fa 	srli	r2,r8,3
81122640:	8822d0fa 	srli	r17,r17,3
81122644:	4010977a 	slli	r8,r8,29
81122648:	10c0022c 	andhi	r3,r2,8
8112264c:	4462b03a 	or	r17,r8,r17
81122650:	183feb26 	beq	r3,zero,81122600 <__reset+0xfb102600>
81122654:	4808d0fa 	srli	r4,r9,3
81122658:	20c0022c 	andhi	r3,r4,8
8112265c:	183fe81e 	bne	r3,zero,81122600 <__reset+0xfb102600>
81122660:	300cd0fa 	srli	r6,r6,3
81122664:	4806977a 	slli	r3,r9,29
81122668:	2005883a 	mov	r2,r4
8112266c:	19a2b03a 	or	r17,r3,r6
81122670:	003fe306 	br	81122600 <__reset+0xfb102600>
81122674:	0011883a 	mov	r8,zero
81122678:	0005883a 	mov	r2,zero
8112267c:	003e3f06 	br	81121f7c <__reset+0xfb101f7c>
81122680:	0401ffc4 	movi	r16,2047
81122684:	003e2506 	br	81121f1c <__reset+0xfb101f1c>
81122688:	0013883a 	mov	r9,zero
8112268c:	003f8406 	br	811224a0 <__reset+0xfb1024a0>
81122690:	0005883a 	mov	r2,zero
81122694:	0007883a 	mov	r3,zero
81122698:	003e8906 	br	811220c0 <__reset+0xfb1020c0>
8112269c:	197ff804 	addi	r5,r3,-32
811226a0:	01000804 	movi	r4,32
811226a4:	414ad83a 	srl	r5,r8,r5
811226a8:	19002426 	beq	r3,r4,8112273c <__adddf3+0x8a4>
811226ac:	01001004 	movi	r4,64
811226b0:	20c7c83a 	sub	r3,r4,r3
811226b4:	40c6983a 	sll	r3,r8,r3
811226b8:	1c46b03a 	or	r3,r3,r17
811226bc:	1806c03a 	cmpne	r3,r3,zero
811226c0:	28e2b03a 	or	r17,r5,r3
811226c4:	0007883a 	mov	r3,zero
811226c8:	003f2306 	br	81122358 <__reset+0xfb102358>
811226cc:	0007883a 	mov	r3,zero
811226d0:	5811883a 	mov	r8,r11
811226d4:	00bfffc4 	movi	r2,-1
811226d8:	0401ffc4 	movi	r16,2047
811226dc:	003e7806 	br	811220c0 <__reset+0xfb1020c0>
811226e0:	4462b03a 	or	r17,r8,r17
811226e4:	8822c03a 	cmpne	r17,r17,zero
811226e8:	0009883a 	mov	r4,zero
811226ec:	003fa006 	br	81122570 <__reset+0xfb102570>
811226f0:	4811883a 	mov	r8,r9
811226f4:	3023883a 	mov	r17,r6
811226f8:	0401ffc4 	movi	r16,2047
811226fc:	003e0706 	br	81121f1c <__reset+0xfb101f1c>
81122700:	4811883a 	mov	r8,r9
81122704:	3023883a 	mov	r17,r6
81122708:	003e0406 	br	81121f1c <__reset+0xfb101f1c>
8112270c:	21fff804 	addi	r7,r4,-32
81122710:	01400804 	movi	r5,32
81122714:	41ced83a 	srl	r7,r8,r7
81122718:	21400a26 	beq	r4,r5,81122744 <__adddf3+0x8ac>
8112271c:	01401004 	movi	r5,64
81122720:	2909c83a 	sub	r4,r5,r4
81122724:	4108983a 	sll	r4,r8,r4
81122728:	2448b03a 	or	r4,r4,r17
8112272c:	2008c03a 	cmpne	r4,r4,zero
81122730:	3922b03a 	or	r17,r7,r4
81122734:	0009883a 	mov	r4,zero
81122738:	003f8d06 	br	81122570 <__reset+0xfb102570>
8112273c:	0007883a 	mov	r3,zero
81122740:	003fdd06 	br	811226b8 <__reset+0xfb1026b8>
81122744:	0009883a 	mov	r4,zero
81122748:	003ff706 	br	81122728 <__reset+0xfb102728>

8112274c <__divdf3>:
8112274c:	defff204 	addi	sp,sp,-56
81122750:	de00012e 	bgeu	sp,et,81122758 <__divdf3+0xc>
81122754:	003b68fa 	trap	3
81122758:	dd400915 	stw	r21,36(sp)
8112275c:	282ad53a 	srli	r21,r5,20
81122760:	dd000815 	stw	r20,32(sp)
81122764:	2828d7fa 	srli	r20,r5,31
81122768:	dc000415 	stw	r16,16(sp)
8112276c:	04000434 	movhi	r16,16
81122770:	df000c15 	stw	fp,48(sp)
81122774:	843fffc4 	addi	r16,r16,-1
81122778:	dfc00d15 	stw	ra,52(sp)
8112277c:	ddc00b15 	stw	r23,44(sp)
81122780:	dd800a15 	stw	r22,40(sp)
81122784:	dcc00715 	stw	r19,28(sp)
81122788:	dc800615 	stw	r18,24(sp)
8112278c:	dc400515 	stw	r17,20(sp)
81122790:	ad41ffcc 	andi	r21,r21,2047
81122794:	2c20703a 	and	r16,r5,r16
81122798:	a7003fcc 	andi	fp,r20,255
8112279c:	a8006126 	beq	r21,zero,81122924 <__divdf3+0x1d8>
811227a0:	0081ffc4 	movi	r2,2047
811227a4:	2025883a 	mov	r18,r4
811227a8:	a8803726 	beq	r21,r2,81122888 <__divdf3+0x13c>
811227ac:	80800434 	orhi	r2,r16,16
811227b0:	100490fa 	slli	r2,r2,3
811227b4:	2020d77a 	srli	r16,r4,29
811227b8:	202490fa 	slli	r18,r4,3
811227bc:	ad7f0044 	addi	r21,r21,-1023
811227c0:	80a0b03a 	or	r16,r16,r2
811227c4:	0027883a 	mov	r19,zero
811227c8:	0013883a 	mov	r9,zero
811227cc:	3804d53a 	srli	r2,r7,20
811227d0:	382cd7fa 	srli	r22,r7,31
811227d4:	04400434 	movhi	r17,16
811227d8:	8c7fffc4 	addi	r17,r17,-1
811227dc:	1081ffcc 	andi	r2,r2,2047
811227e0:	3011883a 	mov	r8,r6
811227e4:	3c62703a 	and	r17,r7,r17
811227e8:	b5c03fcc 	andi	r23,r22,255
811227ec:	10006c26 	beq	r2,zero,811229a0 <__divdf3+0x254>
811227f0:	00c1ffc4 	movi	r3,2047
811227f4:	10c06426 	beq	r2,r3,81122988 <__divdf3+0x23c>
811227f8:	88c00434 	orhi	r3,r17,16
811227fc:	180690fa 	slli	r3,r3,3
81122800:	3022d77a 	srli	r17,r6,29
81122804:	301090fa 	slli	r8,r6,3
81122808:	10bf0044 	addi	r2,r2,-1023
8112280c:	88e2b03a 	or	r17,r17,r3
81122810:	000f883a 	mov	r7,zero
81122814:	a58cf03a 	xor	r6,r20,r22
81122818:	3cc8b03a 	or	r4,r7,r19
8112281c:	a8abc83a 	sub	r21,r21,r2
81122820:	008003c4 	movi	r2,15
81122824:	3007883a 	mov	r3,r6
81122828:	34c03fcc 	andi	r19,r6,255
8112282c:	11009036 	bltu	r2,r4,81122a70 <__divdf3+0x324>
81122830:	200890ba 	slli	r4,r4,2
81122834:	00a044b4 	movhi	r2,33042
81122838:	108a1204 	addi	r2,r2,10312
8112283c:	2089883a 	add	r4,r4,r2
81122840:	20800017 	ldw	r2,0(r4)
81122844:	1000683a 	jmp	r2
81122848:	81122a70 	cmpltui	r4,r16,18601
8112284c:	811228c0 	call	8811228c <__reset+0x20f228c>
81122850:	81122a60 	cmpeqi	r4,r16,18601
81122854:	811228b4 	orhi	r4,r16,18594
81122858:	81122a60 	cmpeqi	r4,r16,18601
8112285c:	81122a34 	orhi	r4,r16,18600
81122860:	81122a60 	cmpeqi	r4,r16,18601
81122864:	811228b4 	orhi	r4,r16,18594
81122868:	811228c0 	call	8811228c <__reset+0x20f228c>
8112286c:	811228c0 	call	8811228c <__reset+0x20f228c>
81122870:	81122a34 	orhi	r4,r16,18600
81122874:	811228b4 	orhi	r4,r16,18594
81122878:	811228a4 	muli	r4,r16,18594
8112287c:	811228a4 	muli	r4,r16,18594
81122880:	811228a4 	muli	r4,r16,18594
81122884:	81122d54 	ori	r4,r16,18613
81122888:	2404b03a 	or	r2,r4,r16
8112288c:	1000661e 	bne	r2,zero,81122a28 <__divdf3+0x2dc>
81122890:	04c00204 	movi	r19,8
81122894:	0021883a 	mov	r16,zero
81122898:	0025883a 	mov	r18,zero
8112289c:	02400084 	movi	r9,2
811228a0:	003fca06 	br	811227cc <__reset+0xfb1027cc>
811228a4:	8023883a 	mov	r17,r16
811228a8:	9011883a 	mov	r8,r18
811228ac:	e02f883a 	mov	r23,fp
811228b0:	480f883a 	mov	r7,r9
811228b4:	00800084 	movi	r2,2
811228b8:	3881311e 	bne	r7,r2,81122d80 <__divdf3+0x634>
811228bc:	b827883a 	mov	r19,r23
811228c0:	98c0004c 	andi	r3,r19,1
811228c4:	0081ffc4 	movi	r2,2047
811228c8:	000b883a 	mov	r5,zero
811228cc:	0025883a 	mov	r18,zero
811228d0:	1004953a 	slli	r2,r2,20
811228d4:	18c03fcc 	andi	r3,r3,255
811228d8:	04400434 	movhi	r17,16
811228dc:	8c7fffc4 	addi	r17,r17,-1
811228e0:	180697fa 	slli	r3,r3,31
811228e4:	2c4a703a 	and	r5,r5,r17
811228e8:	288ab03a 	or	r5,r5,r2
811228ec:	28c6b03a 	or	r3,r5,r3
811228f0:	9005883a 	mov	r2,r18
811228f4:	dfc00d17 	ldw	ra,52(sp)
811228f8:	df000c17 	ldw	fp,48(sp)
811228fc:	ddc00b17 	ldw	r23,44(sp)
81122900:	dd800a17 	ldw	r22,40(sp)
81122904:	dd400917 	ldw	r21,36(sp)
81122908:	dd000817 	ldw	r20,32(sp)
8112290c:	dcc00717 	ldw	r19,28(sp)
81122910:	dc800617 	ldw	r18,24(sp)
81122914:	dc400517 	ldw	r17,20(sp)
81122918:	dc000417 	ldw	r16,16(sp)
8112291c:	dec00e04 	addi	sp,sp,56
81122920:	f800283a 	ret
81122924:	2404b03a 	or	r2,r4,r16
81122928:	2027883a 	mov	r19,r4
8112292c:	10003926 	beq	r2,zero,81122a14 <__divdf3+0x2c8>
81122930:	80012e26 	beq	r16,zero,81122dec <__divdf3+0x6a0>
81122934:	8009883a 	mov	r4,r16
81122938:	d9800315 	stw	r6,12(sp)
8112293c:	d9c00215 	stw	r7,8(sp)
81122940:	110e45c0 	call	8110e45c <__clzsi2>
81122944:	d9800317 	ldw	r6,12(sp)
81122948:	d9c00217 	ldw	r7,8(sp)
8112294c:	113ffd44 	addi	r4,r2,-11
81122950:	00c00704 	movi	r3,28
81122954:	19012116 	blt	r3,r4,81122ddc <__divdf3+0x690>
81122958:	00c00744 	movi	r3,29
8112295c:	147ffe04 	addi	r17,r2,-8
81122960:	1907c83a 	sub	r3,r3,r4
81122964:	8460983a 	sll	r16,r16,r17
81122968:	98c6d83a 	srl	r3,r19,r3
8112296c:	9c64983a 	sll	r18,r19,r17
81122970:	1c20b03a 	or	r16,r3,r16
81122974:	1080fcc4 	addi	r2,r2,1011
81122978:	00abc83a 	sub	r21,zero,r2
8112297c:	0027883a 	mov	r19,zero
81122980:	0013883a 	mov	r9,zero
81122984:	003f9106 	br	811227cc <__reset+0xfb1027cc>
81122988:	3446b03a 	or	r3,r6,r17
8112298c:	18001f1e 	bne	r3,zero,81122a0c <__divdf3+0x2c0>
81122990:	0023883a 	mov	r17,zero
81122994:	0011883a 	mov	r8,zero
81122998:	01c00084 	movi	r7,2
8112299c:	003f9d06 	br	81122814 <__reset+0xfb102814>
811229a0:	3446b03a 	or	r3,r6,r17
811229a4:	18001526 	beq	r3,zero,811229fc <__divdf3+0x2b0>
811229a8:	88011b26 	beq	r17,zero,81122e18 <__divdf3+0x6cc>
811229ac:	8809883a 	mov	r4,r17
811229b0:	d9800315 	stw	r6,12(sp)
811229b4:	da400115 	stw	r9,4(sp)
811229b8:	110e45c0 	call	8110e45c <__clzsi2>
811229bc:	d9800317 	ldw	r6,12(sp)
811229c0:	da400117 	ldw	r9,4(sp)
811229c4:	113ffd44 	addi	r4,r2,-11
811229c8:	00c00704 	movi	r3,28
811229cc:	19010e16 	blt	r3,r4,81122e08 <__divdf3+0x6bc>
811229d0:	00c00744 	movi	r3,29
811229d4:	123ffe04 	addi	r8,r2,-8
811229d8:	1907c83a 	sub	r3,r3,r4
811229dc:	8a22983a 	sll	r17,r17,r8
811229e0:	30c6d83a 	srl	r3,r6,r3
811229e4:	3210983a 	sll	r8,r6,r8
811229e8:	1c62b03a 	or	r17,r3,r17
811229ec:	1080fcc4 	addi	r2,r2,1011
811229f0:	0085c83a 	sub	r2,zero,r2
811229f4:	000f883a 	mov	r7,zero
811229f8:	003f8606 	br	81122814 <__reset+0xfb102814>
811229fc:	0023883a 	mov	r17,zero
81122a00:	0011883a 	mov	r8,zero
81122a04:	01c00044 	movi	r7,1
81122a08:	003f8206 	br	81122814 <__reset+0xfb102814>
81122a0c:	01c000c4 	movi	r7,3
81122a10:	003f8006 	br	81122814 <__reset+0xfb102814>
81122a14:	04c00104 	movi	r19,4
81122a18:	0021883a 	mov	r16,zero
81122a1c:	0025883a 	mov	r18,zero
81122a20:	02400044 	movi	r9,1
81122a24:	003f6906 	br	811227cc <__reset+0xfb1027cc>
81122a28:	04c00304 	movi	r19,12
81122a2c:	024000c4 	movi	r9,3
81122a30:	003f6606 	br	811227cc <__reset+0xfb1027cc>
81122a34:	01400434 	movhi	r5,16
81122a38:	0007883a 	mov	r3,zero
81122a3c:	297fffc4 	addi	r5,r5,-1
81122a40:	04bfffc4 	movi	r18,-1
81122a44:	0081ffc4 	movi	r2,2047
81122a48:	003fa106 	br	811228d0 <__reset+0xfb1028d0>
81122a4c:	00c00044 	movi	r3,1
81122a50:	1887c83a 	sub	r3,r3,r2
81122a54:	01000e04 	movi	r4,56
81122a58:	20c1210e 	bge	r4,r3,81122ee0 <__divdf3+0x794>
81122a5c:	98c0004c 	andi	r3,r19,1
81122a60:	0005883a 	mov	r2,zero
81122a64:	000b883a 	mov	r5,zero
81122a68:	0025883a 	mov	r18,zero
81122a6c:	003f9806 	br	811228d0 <__reset+0xfb1028d0>
81122a70:	8c00fd36 	bltu	r17,r16,81122e68 <__divdf3+0x71c>
81122a74:	8440fb26 	beq	r16,r17,81122e64 <__divdf3+0x718>
81122a78:	8007883a 	mov	r3,r16
81122a7c:	ad7fffc4 	addi	r21,r21,-1
81122a80:	0021883a 	mov	r16,zero
81122a84:	4004d63a 	srli	r2,r8,24
81122a88:	8822923a 	slli	r17,r17,8
81122a8c:	1809883a 	mov	r4,r3
81122a90:	402c923a 	slli	r22,r8,8
81122a94:	88b8b03a 	or	fp,r17,r2
81122a98:	e028d43a 	srli	r20,fp,16
81122a9c:	d8c00015 	stw	r3,0(sp)
81122aa0:	e5ffffcc 	andi	r23,fp,65535
81122aa4:	a00b883a 	mov	r5,r20
81122aa8:	1121be00 	call	81121be0 <__udivsi3>
81122aac:	d8c00017 	ldw	r3,0(sp)
81122ab0:	a00b883a 	mov	r5,r20
81122ab4:	d8800315 	stw	r2,12(sp)
81122ab8:	1809883a 	mov	r4,r3
81122abc:	1121c440 	call	81121c44 <__umodsi3>
81122ac0:	d9800317 	ldw	r6,12(sp)
81122ac4:	1006943a 	slli	r3,r2,16
81122ac8:	9004d43a 	srli	r2,r18,16
81122acc:	b9a3383a 	mul	r17,r23,r6
81122ad0:	10c4b03a 	or	r2,r2,r3
81122ad4:	1440062e 	bgeu	r2,r17,81122af0 <__divdf3+0x3a4>
81122ad8:	1705883a 	add	r2,r2,fp
81122adc:	30ffffc4 	addi	r3,r6,-1
81122ae0:	1700ee36 	bltu	r2,fp,81122e9c <__divdf3+0x750>
81122ae4:	1440ed2e 	bgeu	r2,r17,81122e9c <__divdf3+0x750>
81122ae8:	31bfff84 	addi	r6,r6,-2
81122aec:	1705883a 	add	r2,r2,fp
81122af0:	1463c83a 	sub	r17,r2,r17
81122af4:	a00b883a 	mov	r5,r20
81122af8:	8809883a 	mov	r4,r17
81122afc:	d9800315 	stw	r6,12(sp)
81122b00:	1121be00 	call	81121be0 <__udivsi3>
81122b04:	a00b883a 	mov	r5,r20
81122b08:	8809883a 	mov	r4,r17
81122b0c:	d8800215 	stw	r2,8(sp)
81122b10:	1121c440 	call	81121c44 <__umodsi3>
81122b14:	d9c00217 	ldw	r7,8(sp)
81122b18:	1004943a 	slli	r2,r2,16
81122b1c:	94bfffcc 	andi	r18,r18,65535
81122b20:	b9d1383a 	mul	r8,r23,r7
81122b24:	90a4b03a 	or	r18,r18,r2
81122b28:	d9800317 	ldw	r6,12(sp)
81122b2c:	9200062e 	bgeu	r18,r8,81122b48 <__divdf3+0x3fc>
81122b30:	9725883a 	add	r18,r18,fp
81122b34:	38bfffc4 	addi	r2,r7,-1
81122b38:	9700d636 	bltu	r18,fp,81122e94 <__divdf3+0x748>
81122b3c:	9200d52e 	bgeu	r18,r8,81122e94 <__divdf3+0x748>
81122b40:	39ffff84 	addi	r7,r7,-2
81122b44:	9725883a 	add	r18,r18,fp
81122b48:	3004943a 	slli	r2,r6,16
81122b4c:	b012d43a 	srli	r9,r22,16
81122b50:	b1bfffcc 	andi	r6,r22,65535
81122b54:	11e2b03a 	or	r17,r2,r7
81122b58:	8806d43a 	srli	r3,r17,16
81122b5c:	893fffcc 	andi	r4,r17,65535
81122b60:	218b383a 	mul	r5,r4,r6
81122b64:	30c5383a 	mul	r2,r6,r3
81122b68:	2249383a 	mul	r4,r4,r9
81122b6c:	280ed43a 	srli	r7,r5,16
81122b70:	9225c83a 	sub	r18,r18,r8
81122b74:	2089883a 	add	r4,r4,r2
81122b78:	3909883a 	add	r4,r7,r4
81122b7c:	1a47383a 	mul	r3,r3,r9
81122b80:	2080022e 	bgeu	r4,r2,81122b8c <__divdf3+0x440>
81122b84:	00800074 	movhi	r2,1
81122b88:	1887883a 	add	r3,r3,r2
81122b8c:	2004d43a 	srli	r2,r4,16
81122b90:	2008943a 	slli	r4,r4,16
81122b94:	297fffcc 	andi	r5,r5,65535
81122b98:	10c7883a 	add	r3,r2,r3
81122b9c:	2149883a 	add	r4,r4,r5
81122ba0:	90c0a536 	bltu	r18,r3,81122e38 <__divdf3+0x6ec>
81122ba4:	90c0bf26 	beq	r18,r3,81122ea4 <__divdf3+0x758>
81122ba8:	90c7c83a 	sub	r3,r18,r3
81122bac:	810fc83a 	sub	r7,r16,r4
81122bb0:	81e5803a 	cmpltu	r18,r16,r7
81122bb4:	1ca5c83a 	sub	r18,r3,r18
81122bb8:	e480c126 	beq	fp,r18,81122ec0 <__divdf3+0x774>
81122bbc:	a00b883a 	mov	r5,r20
81122bc0:	9009883a 	mov	r4,r18
81122bc4:	d9800315 	stw	r6,12(sp)
81122bc8:	d9c00215 	stw	r7,8(sp)
81122bcc:	da400115 	stw	r9,4(sp)
81122bd0:	1121be00 	call	81121be0 <__udivsi3>
81122bd4:	a00b883a 	mov	r5,r20
81122bd8:	9009883a 	mov	r4,r18
81122bdc:	d8800015 	stw	r2,0(sp)
81122be0:	1121c440 	call	81121c44 <__umodsi3>
81122be4:	d9c00217 	ldw	r7,8(sp)
81122be8:	da000017 	ldw	r8,0(sp)
81122bec:	1006943a 	slli	r3,r2,16
81122bf0:	3804d43a 	srli	r2,r7,16
81122bf4:	ba21383a 	mul	r16,r23,r8
81122bf8:	d9800317 	ldw	r6,12(sp)
81122bfc:	10c4b03a 	or	r2,r2,r3
81122c00:	da400117 	ldw	r9,4(sp)
81122c04:	1400062e 	bgeu	r2,r16,81122c20 <__divdf3+0x4d4>
81122c08:	1705883a 	add	r2,r2,fp
81122c0c:	40ffffc4 	addi	r3,r8,-1
81122c10:	1700ad36 	bltu	r2,fp,81122ec8 <__divdf3+0x77c>
81122c14:	1400ac2e 	bgeu	r2,r16,81122ec8 <__divdf3+0x77c>
81122c18:	423fff84 	addi	r8,r8,-2
81122c1c:	1705883a 	add	r2,r2,fp
81122c20:	1421c83a 	sub	r16,r2,r16
81122c24:	a00b883a 	mov	r5,r20
81122c28:	8009883a 	mov	r4,r16
81122c2c:	d9800315 	stw	r6,12(sp)
81122c30:	d9c00215 	stw	r7,8(sp)
81122c34:	da000015 	stw	r8,0(sp)
81122c38:	da400115 	stw	r9,4(sp)
81122c3c:	1121be00 	call	81121be0 <__udivsi3>
81122c40:	8009883a 	mov	r4,r16
81122c44:	a00b883a 	mov	r5,r20
81122c48:	1025883a 	mov	r18,r2
81122c4c:	1121c440 	call	81121c44 <__umodsi3>
81122c50:	d9c00217 	ldw	r7,8(sp)
81122c54:	1004943a 	slli	r2,r2,16
81122c58:	bcaf383a 	mul	r23,r23,r18
81122c5c:	393fffcc 	andi	r4,r7,65535
81122c60:	2088b03a 	or	r4,r4,r2
81122c64:	d9800317 	ldw	r6,12(sp)
81122c68:	da000017 	ldw	r8,0(sp)
81122c6c:	da400117 	ldw	r9,4(sp)
81122c70:	25c0062e 	bgeu	r4,r23,81122c8c <__divdf3+0x540>
81122c74:	2709883a 	add	r4,r4,fp
81122c78:	90bfffc4 	addi	r2,r18,-1
81122c7c:	27009436 	bltu	r4,fp,81122ed0 <__divdf3+0x784>
81122c80:	25c0932e 	bgeu	r4,r23,81122ed0 <__divdf3+0x784>
81122c84:	94bfff84 	addi	r18,r18,-2
81122c88:	2709883a 	add	r4,r4,fp
81122c8c:	4004943a 	slli	r2,r8,16
81122c90:	25efc83a 	sub	r23,r4,r23
81122c94:	1490b03a 	or	r8,r2,r18
81122c98:	4008d43a 	srli	r4,r8,16
81122c9c:	40ffffcc 	andi	r3,r8,65535
81122ca0:	30c5383a 	mul	r2,r6,r3
81122ca4:	1a47383a 	mul	r3,r3,r9
81122ca8:	310d383a 	mul	r6,r6,r4
81122cac:	100ad43a 	srli	r5,r2,16
81122cb0:	4913383a 	mul	r9,r9,r4
81122cb4:	1987883a 	add	r3,r3,r6
81122cb8:	28c7883a 	add	r3,r5,r3
81122cbc:	1980022e 	bgeu	r3,r6,81122cc8 <__divdf3+0x57c>
81122cc0:	01000074 	movhi	r4,1
81122cc4:	4913883a 	add	r9,r9,r4
81122cc8:	1808d43a 	srli	r4,r3,16
81122ccc:	1806943a 	slli	r3,r3,16
81122cd0:	10bfffcc 	andi	r2,r2,65535
81122cd4:	2253883a 	add	r9,r4,r9
81122cd8:	1887883a 	add	r3,r3,r2
81122cdc:	ba403836 	bltu	r23,r9,81122dc0 <__divdf3+0x674>
81122ce0:	ba403626 	beq	r23,r9,81122dbc <__divdf3+0x670>
81122ce4:	42000054 	ori	r8,r8,1
81122ce8:	a880ffc4 	addi	r2,r21,1023
81122cec:	00bf570e 	bge	zero,r2,81122a4c <__reset+0xfb102a4c>
81122cf0:	40c001cc 	andi	r3,r8,7
81122cf4:	18000726 	beq	r3,zero,81122d14 <__divdf3+0x5c8>
81122cf8:	40c003cc 	andi	r3,r8,15
81122cfc:	01000104 	movi	r4,4
81122d00:	19000426 	beq	r3,r4,81122d14 <__divdf3+0x5c8>
81122d04:	4107883a 	add	r3,r8,r4
81122d08:	1a11803a 	cmpltu	r8,r3,r8
81122d0c:	8a23883a 	add	r17,r17,r8
81122d10:	1811883a 	mov	r8,r3
81122d14:	88c0402c 	andhi	r3,r17,256
81122d18:	18000426 	beq	r3,zero,81122d2c <__divdf3+0x5e0>
81122d1c:	00ffc034 	movhi	r3,65280
81122d20:	18ffffc4 	addi	r3,r3,-1
81122d24:	a8810004 	addi	r2,r21,1024
81122d28:	88e2703a 	and	r17,r17,r3
81122d2c:	00c1ff84 	movi	r3,2046
81122d30:	18bee316 	blt	r3,r2,811228c0 <__reset+0xfb1028c0>
81122d34:	8824977a 	slli	r18,r17,29
81122d38:	4010d0fa 	srli	r8,r8,3
81122d3c:	8822927a 	slli	r17,r17,9
81122d40:	1081ffcc 	andi	r2,r2,2047
81122d44:	9224b03a 	or	r18,r18,r8
81122d48:	880ad33a 	srli	r5,r17,12
81122d4c:	98c0004c 	andi	r3,r19,1
81122d50:	003edf06 	br	811228d0 <__reset+0xfb1028d0>
81122d54:	8080022c 	andhi	r2,r16,8
81122d58:	10001226 	beq	r2,zero,81122da4 <__divdf3+0x658>
81122d5c:	8880022c 	andhi	r2,r17,8
81122d60:	1000101e 	bne	r2,zero,81122da4 <__divdf3+0x658>
81122d64:	00800434 	movhi	r2,16
81122d68:	89400234 	orhi	r5,r17,8
81122d6c:	10bfffc4 	addi	r2,r2,-1
81122d70:	b007883a 	mov	r3,r22
81122d74:	288a703a 	and	r5,r5,r2
81122d78:	4025883a 	mov	r18,r8
81122d7c:	003f3106 	br	81122a44 <__reset+0xfb102a44>
81122d80:	008000c4 	movi	r2,3
81122d84:	3880a626 	beq	r7,r2,81123020 <__divdf3+0x8d4>
81122d88:	00800044 	movi	r2,1
81122d8c:	3880521e 	bne	r7,r2,81122ed8 <__divdf3+0x78c>
81122d90:	b807883a 	mov	r3,r23
81122d94:	0005883a 	mov	r2,zero
81122d98:	000b883a 	mov	r5,zero
81122d9c:	0025883a 	mov	r18,zero
81122da0:	003ecb06 	br	811228d0 <__reset+0xfb1028d0>
81122da4:	00800434 	movhi	r2,16
81122da8:	81400234 	orhi	r5,r16,8
81122dac:	10bfffc4 	addi	r2,r2,-1
81122db0:	a007883a 	mov	r3,r20
81122db4:	288a703a 	and	r5,r5,r2
81122db8:	003f2206 	br	81122a44 <__reset+0xfb102a44>
81122dbc:	183fca26 	beq	r3,zero,81122ce8 <__reset+0xfb102ce8>
81122dc0:	e5ef883a 	add	r23,fp,r23
81122dc4:	40bfffc4 	addi	r2,r8,-1
81122dc8:	bf00392e 	bgeu	r23,fp,81122eb0 <__divdf3+0x764>
81122dcc:	1011883a 	mov	r8,r2
81122dd0:	ba7fc41e 	bne	r23,r9,81122ce4 <__reset+0xfb102ce4>
81122dd4:	b0ffc31e 	bne	r22,r3,81122ce4 <__reset+0xfb102ce4>
81122dd8:	003fc306 	br	81122ce8 <__reset+0xfb102ce8>
81122ddc:	143ff604 	addi	r16,r2,-40
81122de0:	9c20983a 	sll	r16,r19,r16
81122de4:	0025883a 	mov	r18,zero
81122de8:	003ee206 	br	81122974 <__reset+0xfb102974>
81122dec:	d9800315 	stw	r6,12(sp)
81122df0:	d9c00215 	stw	r7,8(sp)
81122df4:	110e45c0 	call	8110e45c <__clzsi2>
81122df8:	10800804 	addi	r2,r2,32
81122dfc:	d9c00217 	ldw	r7,8(sp)
81122e00:	d9800317 	ldw	r6,12(sp)
81122e04:	003ed106 	br	8112294c <__reset+0xfb10294c>
81122e08:	147ff604 	addi	r17,r2,-40
81122e0c:	3462983a 	sll	r17,r6,r17
81122e10:	0011883a 	mov	r8,zero
81122e14:	003ef506 	br	811229ec <__reset+0xfb1029ec>
81122e18:	3009883a 	mov	r4,r6
81122e1c:	d9800315 	stw	r6,12(sp)
81122e20:	da400115 	stw	r9,4(sp)
81122e24:	110e45c0 	call	8110e45c <__clzsi2>
81122e28:	10800804 	addi	r2,r2,32
81122e2c:	da400117 	ldw	r9,4(sp)
81122e30:	d9800317 	ldw	r6,12(sp)
81122e34:	003ee306 	br	811229c4 <__reset+0xfb1029c4>
81122e38:	85a1883a 	add	r16,r16,r22
81122e3c:	8585803a 	cmpltu	r2,r16,r22
81122e40:	1705883a 	add	r2,r2,fp
81122e44:	14a5883a 	add	r18,r2,r18
81122e48:	88bfffc4 	addi	r2,r17,-1
81122e4c:	e4800c2e 	bgeu	fp,r18,81122e80 <__divdf3+0x734>
81122e50:	90c03e36 	bltu	r18,r3,81122f4c <__divdf3+0x800>
81122e54:	1c806926 	beq	r3,r18,81122ffc <__divdf3+0x8b0>
81122e58:	90c7c83a 	sub	r3,r18,r3
81122e5c:	1023883a 	mov	r17,r2
81122e60:	003f5206 	br	81122bac <__reset+0xfb102bac>
81122e64:	923f0436 	bltu	r18,r8,81122a78 <__reset+0xfb102a78>
81122e68:	800897fa 	slli	r4,r16,31
81122e6c:	9004d07a 	srli	r2,r18,1
81122e70:	8006d07a 	srli	r3,r16,1
81122e74:	902097fa 	slli	r16,r18,31
81122e78:	20a4b03a 	or	r18,r4,r2
81122e7c:	003f0106 	br	81122a84 <__reset+0xfb102a84>
81122e80:	e4bff51e 	bne	fp,r18,81122e58 <__reset+0xfb102e58>
81122e84:	85bff22e 	bgeu	r16,r22,81122e50 <__reset+0xfb102e50>
81122e88:	e0c7c83a 	sub	r3,fp,r3
81122e8c:	1023883a 	mov	r17,r2
81122e90:	003f4606 	br	81122bac <__reset+0xfb102bac>
81122e94:	100f883a 	mov	r7,r2
81122e98:	003f2b06 	br	81122b48 <__reset+0xfb102b48>
81122e9c:	180d883a 	mov	r6,r3
81122ea0:	003f1306 	br	81122af0 <__reset+0xfb102af0>
81122ea4:	813fe436 	bltu	r16,r4,81122e38 <__reset+0xfb102e38>
81122ea8:	0007883a 	mov	r3,zero
81122eac:	003f3f06 	br	81122bac <__reset+0xfb102bac>
81122eb0:	ba402c36 	bltu	r23,r9,81122f64 <__divdf3+0x818>
81122eb4:	4dc05426 	beq	r9,r23,81123008 <__divdf3+0x8bc>
81122eb8:	1011883a 	mov	r8,r2
81122ebc:	003f8906 	br	81122ce4 <__reset+0xfb102ce4>
81122ec0:	023fffc4 	movi	r8,-1
81122ec4:	003f8806 	br	81122ce8 <__reset+0xfb102ce8>
81122ec8:	1811883a 	mov	r8,r3
81122ecc:	003f5406 	br	81122c20 <__reset+0xfb102c20>
81122ed0:	1025883a 	mov	r18,r2
81122ed4:	003f6d06 	br	81122c8c <__reset+0xfb102c8c>
81122ed8:	b827883a 	mov	r19,r23
81122edc:	003f8206 	br	81122ce8 <__reset+0xfb102ce8>
81122ee0:	010007c4 	movi	r4,31
81122ee4:	20c02616 	blt	r4,r3,81122f80 <__divdf3+0x834>
81122ee8:	00800804 	movi	r2,32
81122eec:	10c5c83a 	sub	r2,r2,r3
81122ef0:	888a983a 	sll	r5,r17,r2
81122ef4:	40c8d83a 	srl	r4,r8,r3
81122ef8:	4084983a 	sll	r2,r8,r2
81122efc:	88e2d83a 	srl	r17,r17,r3
81122f00:	2906b03a 	or	r3,r5,r4
81122f04:	1004c03a 	cmpne	r2,r2,zero
81122f08:	1886b03a 	or	r3,r3,r2
81122f0c:	188001cc 	andi	r2,r3,7
81122f10:	10000726 	beq	r2,zero,81122f30 <__divdf3+0x7e4>
81122f14:	188003cc 	andi	r2,r3,15
81122f18:	01000104 	movi	r4,4
81122f1c:	11000426 	beq	r2,r4,81122f30 <__divdf3+0x7e4>
81122f20:	1805883a 	mov	r2,r3
81122f24:	10c00104 	addi	r3,r2,4
81122f28:	1885803a 	cmpltu	r2,r3,r2
81122f2c:	88a3883a 	add	r17,r17,r2
81122f30:	8880202c 	andhi	r2,r17,128
81122f34:	10002726 	beq	r2,zero,81122fd4 <__divdf3+0x888>
81122f38:	98c0004c 	andi	r3,r19,1
81122f3c:	00800044 	movi	r2,1
81122f40:	000b883a 	mov	r5,zero
81122f44:	0025883a 	mov	r18,zero
81122f48:	003e6106 	br	811228d0 <__reset+0xfb1028d0>
81122f4c:	85a1883a 	add	r16,r16,r22
81122f50:	8585803a 	cmpltu	r2,r16,r22
81122f54:	1705883a 	add	r2,r2,fp
81122f58:	14a5883a 	add	r18,r2,r18
81122f5c:	8c7fff84 	addi	r17,r17,-2
81122f60:	003f1106 	br	81122ba8 <__reset+0xfb102ba8>
81122f64:	b589883a 	add	r4,r22,r22
81122f68:	25ad803a 	cmpltu	r22,r4,r22
81122f6c:	b739883a 	add	fp,r22,fp
81122f70:	40bfff84 	addi	r2,r8,-2
81122f74:	bf2f883a 	add	r23,r23,fp
81122f78:	202d883a 	mov	r22,r4
81122f7c:	003f9306 	br	81122dcc <__reset+0xfb102dcc>
81122f80:	013ff844 	movi	r4,-31
81122f84:	2085c83a 	sub	r2,r4,r2
81122f88:	8888d83a 	srl	r4,r17,r2
81122f8c:	00800804 	movi	r2,32
81122f90:	18802126 	beq	r3,r2,81123018 <__divdf3+0x8cc>
81122f94:	00801004 	movi	r2,64
81122f98:	10c5c83a 	sub	r2,r2,r3
81122f9c:	8884983a 	sll	r2,r17,r2
81122fa0:	1204b03a 	or	r2,r2,r8
81122fa4:	1004c03a 	cmpne	r2,r2,zero
81122fa8:	2084b03a 	or	r2,r4,r2
81122fac:	144001cc 	andi	r17,r2,7
81122fb0:	88000d1e 	bne	r17,zero,81122fe8 <__divdf3+0x89c>
81122fb4:	000b883a 	mov	r5,zero
81122fb8:	1024d0fa 	srli	r18,r2,3
81122fbc:	98c0004c 	andi	r3,r19,1
81122fc0:	0005883a 	mov	r2,zero
81122fc4:	9464b03a 	or	r18,r18,r17
81122fc8:	003e4106 	br	811228d0 <__reset+0xfb1028d0>
81122fcc:	1007883a 	mov	r3,r2
81122fd0:	0023883a 	mov	r17,zero
81122fd4:	880a927a 	slli	r5,r17,9
81122fd8:	1805883a 	mov	r2,r3
81122fdc:	8822977a 	slli	r17,r17,29
81122fe0:	280ad33a 	srli	r5,r5,12
81122fe4:	003ff406 	br	81122fb8 <__reset+0xfb102fb8>
81122fe8:	10c003cc 	andi	r3,r2,15
81122fec:	01000104 	movi	r4,4
81122ff0:	193ff626 	beq	r3,r4,81122fcc <__reset+0xfb102fcc>
81122ff4:	0023883a 	mov	r17,zero
81122ff8:	003fca06 	br	81122f24 <__reset+0xfb102f24>
81122ffc:	813fd336 	bltu	r16,r4,81122f4c <__reset+0xfb102f4c>
81123000:	1023883a 	mov	r17,r2
81123004:	003fa806 	br	81122ea8 <__reset+0xfb102ea8>
81123008:	b0ffd636 	bltu	r22,r3,81122f64 <__reset+0xfb102f64>
8112300c:	1011883a 	mov	r8,r2
81123010:	b0ff341e 	bne	r22,r3,81122ce4 <__reset+0xfb102ce4>
81123014:	003f3406 	br	81122ce8 <__reset+0xfb102ce8>
81123018:	0005883a 	mov	r2,zero
8112301c:	003fe006 	br	81122fa0 <__reset+0xfb102fa0>
81123020:	00800434 	movhi	r2,16
81123024:	89400234 	orhi	r5,r17,8
81123028:	10bfffc4 	addi	r2,r2,-1
8112302c:	b807883a 	mov	r3,r23
81123030:	288a703a 	and	r5,r5,r2
81123034:	4025883a 	mov	r18,r8
81123038:	003e8206 	br	81122a44 <__reset+0xfb102a44>

8112303c <__eqdf2>:
8112303c:	2804d53a 	srli	r2,r5,20
81123040:	3806d53a 	srli	r3,r7,20
81123044:	02000434 	movhi	r8,16
81123048:	423fffc4 	addi	r8,r8,-1
8112304c:	1081ffcc 	andi	r2,r2,2047
81123050:	0281ffc4 	movi	r10,2047
81123054:	2a12703a 	and	r9,r5,r8
81123058:	18c1ffcc 	andi	r3,r3,2047
8112305c:	3a10703a 	and	r8,r7,r8
81123060:	280ad7fa 	srli	r5,r5,31
81123064:	380ed7fa 	srli	r7,r7,31
81123068:	12801026 	beq	r2,r10,811230ac <__eqdf2+0x70>
8112306c:	0281ffc4 	movi	r10,2047
81123070:	1a800a26 	beq	r3,r10,8112309c <__eqdf2+0x60>
81123074:	10c00226 	beq	r2,r3,81123080 <__eqdf2+0x44>
81123078:	00800044 	movi	r2,1
8112307c:	f800283a 	ret
81123080:	4a3ffd1e 	bne	r9,r8,81123078 <__reset+0xfb103078>
81123084:	21bffc1e 	bne	r4,r6,81123078 <__reset+0xfb103078>
81123088:	29c00c26 	beq	r5,r7,811230bc <__eqdf2+0x80>
8112308c:	103ffa1e 	bne	r2,zero,81123078 <__reset+0xfb103078>
81123090:	2244b03a 	or	r2,r4,r9
81123094:	1004c03a 	cmpne	r2,r2,zero
81123098:	f800283a 	ret
8112309c:	3214b03a 	or	r10,r6,r8
811230a0:	503ff426 	beq	r10,zero,81123074 <__reset+0xfb103074>
811230a4:	00800044 	movi	r2,1
811230a8:	f800283a 	ret
811230ac:	2254b03a 	or	r10,r4,r9
811230b0:	503fee26 	beq	r10,zero,8112306c <__reset+0xfb10306c>
811230b4:	00800044 	movi	r2,1
811230b8:	f800283a 	ret
811230bc:	0005883a 	mov	r2,zero
811230c0:	f800283a 	ret

811230c4 <__gedf2>:
811230c4:	2804d53a 	srli	r2,r5,20
811230c8:	3806d53a 	srli	r3,r7,20
811230cc:	02000434 	movhi	r8,16
811230d0:	423fffc4 	addi	r8,r8,-1
811230d4:	1081ffcc 	andi	r2,r2,2047
811230d8:	0241ffc4 	movi	r9,2047
811230dc:	2a14703a 	and	r10,r5,r8
811230e0:	18c1ffcc 	andi	r3,r3,2047
811230e4:	3a10703a 	and	r8,r7,r8
811230e8:	280ad7fa 	srli	r5,r5,31
811230ec:	380ed7fa 	srli	r7,r7,31
811230f0:	12401d26 	beq	r2,r9,81123168 <__gedf2+0xa4>
811230f4:	0241ffc4 	movi	r9,2047
811230f8:	1a401226 	beq	r3,r9,81123144 <__gedf2+0x80>
811230fc:	1000081e 	bne	r2,zero,81123120 <__gedf2+0x5c>
81123100:	2296b03a 	or	r11,r4,r10
81123104:	5813003a 	cmpeq	r9,r11,zero
81123108:	1800091e 	bne	r3,zero,81123130 <__gedf2+0x6c>
8112310c:	3218b03a 	or	r12,r6,r8
81123110:	6000071e 	bne	r12,zero,81123130 <__gedf2+0x6c>
81123114:	0005883a 	mov	r2,zero
81123118:	5800101e 	bne	r11,zero,8112315c <__gedf2+0x98>
8112311c:	f800283a 	ret
81123120:	18000c1e 	bne	r3,zero,81123154 <__gedf2+0x90>
81123124:	3212b03a 	or	r9,r6,r8
81123128:	48000c26 	beq	r9,zero,8112315c <__gedf2+0x98>
8112312c:	0013883a 	mov	r9,zero
81123130:	39c03fcc 	andi	r7,r7,255
81123134:	48000826 	beq	r9,zero,81123158 <__gedf2+0x94>
81123138:	38000926 	beq	r7,zero,81123160 <__gedf2+0x9c>
8112313c:	00800044 	movi	r2,1
81123140:	f800283a 	ret
81123144:	3212b03a 	or	r9,r6,r8
81123148:	483fec26 	beq	r9,zero,811230fc <__reset+0xfb1030fc>
8112314c:	00bfff84 	movi	r2,-2
81123150:	f800283a 	ret
81123154:	39c03fcc 	andi	r7,r7,255
81123158:	29c00626 	beq	r5,r7,81123174 <__gedf2+0xb0>
8112315c:	283ff726 	beq	r5,zero,8112313c <__reset+0xfb10313c>
81123160:	00bfffc4 	movi	r2,-1
81123164:	f800283a 	ret
81123168:	2292b03a 	or	r9,r4,r10
8112316c:	483fe126 	beq	r9,zero,811230f4 <__reset+0xfb1030f4>
81123170:	003ff606 	br	8112314c <__reset+0xfb10314c>
81123174:	18bff916 	blt	r3,r2,8112315c <__reset+0xfb10315c>
81123178:	10c00316 	blt	r2,r3,81123188 <__gedf2+0xc4>
8112317c:	42bff736 	bltu	r8,r10,8112315c <__reset+0xfb10315c>
81123180:	52000326 	beq	r10,r8,81123190 <__gedf2+0xcc>
81123184:	5200042e 	bgeu	r10,r8,81123198 <__gedf2+0xd4>
81123188:	283fec1e 	bne	r5,zero,8112313c <__reset+0xfb10313c>
8112318c:	003ff406 	br	81123160 <__reset+0xfb103160>
81123190:	313ff236 	bltu	r6,r4,8112315c <__reset+0xfb10315c>
81123194:	21bffc36 	bltu	r4,r6,81123188 <__reset+0xfb103188>
81123198:	0005883a 	mov	r2,zero
8112319c:	f800283a 	ret

811231a0 <__ledf2>:
811231a0:	2804d53a 	srli	r2,r5,20
811231a4:	3810d53a 	srli	r8,r7,20
811231a8:	00c00434 	movhi	r3,16
811231ac:	18ffffc4 	addi	r3,r3,-1
811231b0:	1081ffcc 	andi	r2,r2,2047
811231b4:	0241ffc4 	movi	r9,2047
811231b8:	28d4703a 	and	r10,r5,r3
811231bc:	4201ffcc 	andi	r8,r8,2047
811231c0:	38c6703a 	and	r3,r7,r3
811231c4:	280ad7fa 	srli	r5,r5,31
811231c8:	380ed7fa 	srli	r7,r7,31
811231cc:	12401f26 	beq	r2,r9,8112324c <__ledf2+0xac>
811231d0:	0241ffc4 	movi	r9,2047
811231d4:	42401426 	beq	r8,r9,81123228 <__ledf2+0x88>
811231d8:	1000091e 	bne	r2,zero,81123200 <__ledf2+0x60>
811231dc:	2296b03a 	or	r11,r4,r10
811231e0:	5813003a 	cmpeq	r9,r11,zero
811231e4:	29403fcc 	andi	r5,r5,255
811231e8:	40000a1e 	bne	r8,zero,81123214 <__ledf2+0x74>
811231ec:	30d8b03a 	or	r12,r6,r3
811231f0:	6000081e 	bne	r12,zero,81123214 <__ledf2+0x74>
811231f4:	0005883a 	mov	r2,zero
811231f8:	5800111e 	bne	r11,zero,81123240 <__ledf2+0xa0>
811231fc:	f800283a 	ret
81123200:	29403fcc 	andi	r5,r5,255
81123204:	40000c1e 	bne	r8,zero,81123238 <__ledf2+0x98>
81123208:	30d2b03a 	or	r9,r6,r3
8112320c:	48000c26 	beq	r9,zero,81123240 <__ledf2+0xa0>
81123210:	0013883a 	mov	r9,zero
81123214:	39c03fcc 	andi	r7,r7,255
81123218:	48000826 	beq	r9,zero,8112323c <__ledf2+0x9c>
8112321c:	38001126 	beq	r7,zero,81123264 <__ledf2+0xc4>
81123220:	00800044 	movi	r2,1
81123224:	f800283a 	ret
81123228:	30d2b03a 	or	r9,r6,r3
8112322c:	483fea26 	beq	r9,zero,811231d8 <__reset+0xfb1031d8>
81123230:	00800084 	movi	r2,2
81123234:	f800283a 	ret
81123238:	39c03fcc 	andi	r7,r7,255
8112323c:	39400726 	beq	r7,r5,8112325c <__ledf2+0xbc>
81123240:	2800081e 	bne	r5,zero,81123264 <__ledf2+0xc4>
81123244:	00800044 	movi	r2,1
81123248:	f800283a 	ret
8112324c:	2292b03a 	or	r9,r4,r10
81123250:	483fdf26 	beq	r9,zero,811231d0 <__reset+0xfb1031d0>
81123254:	00800084 	movi	r2,2
81123258:	f800283a 	ret
8112325c:	4080030e 	bge	r8,r2,8112326c <__ledf2+0xcc>
81123260:	383fef26 	beq	r7,zero,81123220 <__reset+0xfb103220>
81123264:	00bfffc4 	movi	r2,-1
81123268:	f800283a 	ret
8112326c:	123feb16 	blt	r2,r8,8112321c <__reset+0xfb10321c>
81123270:	1abff336 	bltu	r3,r10,81123240 <__reset+0xfb103240>
81123274:	50c00326 	beq	r10,r3,81123284 <__ledf2+0xe4>
81123278:	50c0042e 	bgeu	r10,r3,8112328c <__ledf2+0xec>
8112327c:	283fe81e 	bne	r5,zero,81123220 <__reset+0xfb103220>
81123280:	003ff806 	br	81123264 <__reset+0xfb103264>
81123284:	313fee36 	bltu	r6,r4,81123240 <__reset+0xfb103240>
81123288:	21bffc36 	bltu	r4,r6,8112327c <__reset+0xfb10327c>
8112328c:	0005883a 	mov	r2,zero
81123290:	f800283a 	ret

81123294 <__subdf3>:
81123294:	02000434 	movhi	r8,16
81123298:	423fffc4 	addi	r8,r8,-1
8112329c:	defffb04 	addi	sp,sp,-20
811232a0:	2a14703a 	and	r10,r5,r8
811232a4:	3812d53a 	srli	r9,r7,20
811232a8:	3a10703a 	and	r8,r7,r8
811232ac:	de00012e 	bgeu	sp,et,811232b4 <__subdf3+0x20>
811232b0:	003b68fa 	trap	3
811232b4:	2006d77a 	srli	r3,r4,29
811232b8:	3004d77a 	srli	r2,r6,29
811232bc:	dc000015 	stw	r16,0(sp)
811232c0:	501490fa 	slli	r10,r10,3
811232c4:	2820d53a 	srli	r16,r5,20
811232c8:	401090fa 	slli	r8,r8,3
811232cc:	dc800215 	stw	r18,8(sp)
811232d0:	dc400115 	stw	r17,4(sp)
811232d4:	dfc00415 	stw	ra,16(sp)
811232d8:	202290fa 	slli	r17,r4,3
811232dc:	dcc00315 	stw	r19,12(sp)
811232e0:	4a41ffcc 	andi	r9,r9,2047
811232e4:	0101ffc4 	movi	r4,2047
811232e8:	2824d7fa 	srli	r18,r5,31
811232ec:	8401ffcc 	andi	r16,r16,2047
811232f0:	50c6b03a 	or	r3,r10,r3
811232f4:	380ed7fa 	srli	r7,r7,31
811232f8:	408ab03a 	or	r5,r8,r2
811232fc:	300c90fa 	slli	r6,r6,3
81123300:	49009626 	beq	r9,r4,8112355c <__subdf3+0x2c8>
81123304:	39c0005c 	xori	r7,r7,1
81123308:	8245c83a 	sub	r2,r16,r9
8112330c:	3c807426 	beq	r7,r18,811234e0 <__subdf3+0x24c>
81123310:	0080af0e 	bge	zero,r2,811235d0 <__subdf3+0x33c>
81123314:	48002a1e 	bne	r9,zero,811233c0 <__subdf3+0x12c>
81123318:	2988b03a 	or	r4,r5,r6
8112331c:	20009a1e 	bne	r4,zero,81123588 <__subdf3+0x2f4>
81123320:	888001cc 	andi	r2,r17,7
81123324:	10000726 	beq	r2,zero,81123344 <__subdf3+0xb0>
81123328:	888003cc 	andi	r2,r17,15
8112332c:	01000104 	movi	r4,4
81123330:	11000426 	beq	r2,r4,81123344 <__subdf3+0xb0>
81123334:	890b883a 	add	r5,r17,r4
81123338:	2c63803a 	cmpltu	r17,r5,r17
8112333c:	1c47883a 	add	r3,r3,r17
81123340:	2823883a 	mov	r17,r5
81123344:	1880202c 	andhi	r2,r3,128
81123348:	10005926 	beq	r2,zero,811234b0 <__subdf3+0x21c>
8112334c:	84000044 	addi	r16,r16,1
81123350:	0081ffc4 	movi	r2,2047
81123354:	8080be26 	beq	r16,r2,81123650 <__subdf3+0x3bc>
81123358:	017fe034 	movhi	r5,65408
8112335c:	297fffc4 	addi	r5,r5,-1
81123360:	1946703a 	and	r3,r3,r5
81123364:	1804977a 	slli	r2,r3,29
81123368:	1806927a 	slli	r3,r3,9
8112336c:	8822d0fa 	srli	r17,r17,3
81123370:	8401ffcc 	andi	r16,r16,2047
81123374:	180ad33a 	srli	r5,r3,12
81123378:	9100004c 	andi	r4,r18,1
8112337c:	1444b03a 	or	r2,r2,r17
81123380:	80c1ffcc 	andi	r3,r16,2047
81123384:	1820953a 	slli	r16,r3,20
81123388:	20c03fcc 	andi	r3,r4,255
8112338c:	180897fa 	slli	r4,r3,31
81123390:	00c00434 	movhi	r3,16
81123394:	18ffffc4 	addi	r3,r3,-1
81123398:	28c6703a 	and	r3,r5,r3
8112339c:	1c06b03a 	or	r3,r3,r16
811233a0:	1906b03a 	or	r3,r3,r4
811233a4:	dfc00417 	ldw	ra,16(sp)
811233a8:	dcc00317 	ldw	r19,12(sp)
811233ac:	dc800217 	ldw	r18,8(sp)
811233b0:	dc400117 	ldw	r17,4(sp)
811233b4:	dc000017 	ldw	r16,0(sp)
811233b8:	dec00504 	addi	sp,sp,20
811233bc:	f800283a 	ret
811233c0:	0101ffc4 	movi	r4,2047
811233c4:	813fd626 	beq	r16,r4,81123320 <__reset+0xfb103320>
811233c8:	29402034 	orhi	r5,r5,128
811233cc:	01000e04 	movi	r4,56
811233d0:	2080a316 	blt	r4,r2,81123660 <__subdf3+0x3cc>
811233d4:	010007c4 	movi	r4,31
811233d8:	2080c616 	blt	r4,r2,811236f4 <__subdf3+0x460>
811233dc:	01000804 	movi	r4,32
811233e0:	2089c83a 	sub	r4,r4,r2
811233e4:	2910983a 	sll	r8,r5,r4
811233e8:	308ed83a 	srl	r7,r6,r2
811233ec:	3108983a 	sll	r4,r6,r4
811233f0:	2884d83a 	srl	r2,r5,r2
811233f4:	41ccb03a 	or	r6,r8,r7
811233f8:	2008c03a 	cmpne	r4,r4,zero
811233fc:	310cb03a 	or	r6,r6,r4
81123400:	898dc83a 	sub	r6,r17,r6
81123404:	89a3803a 	cmpltu	r17,r17,r6
81123408:	1887c83a 	sub	r3,r3,r2
8112340c:	1c47c83a 	sub	r3,r3,r17
81123410:	3023883a 	mov	r17,r6
81123414:	1880202c 	andhi	r2,r3,128
81123418:	10002326 	beq	r2,zero,811234a8 <__subdf3+0x214>
8112341c:	04c02034 	movhi	r19,128
81123420:	9cffffc4 	addi	r19,r19,-1
81123424:	1ce6703a 	and	r19,r3,r19
81123428:	98007a26 	beq	r19,zero,81123614 <__subdf3+0x380>
8112342c:	9809883a 	mov	r4,r19
81123430:	110e45c0 	call	8110e45c <__clzsi2>
81123434:	113ffe04 	addi	r4,r2,-8
81123438:	00c007c4 	movi	r3,31
8112343c:	19007b16 	blt	r3,r4,8112362c <__subdf3+0x398>
81123440:	00800804 	movi	r2,32
81123444:	1105c83a 	sub	r2,r2,r4
81123448:	8884d83a 	srl	r2,r17,r2
8112344c:	9906983a 	sll	r3,r19,r4
81123450:	8922983a 	sll	r17,r17,r4
81123454:	10c4b03a 	or	r2,r2,r3
81123458:	24007816 	blt	r4,r16,8112363c <__subdf3+0x3a8>
8112345c:	2421c83a 	sub	r16,r4,r16
81123460:	80c00044 	addi	r3,r16,1
81123464:	010007c4 	movi	r4,31
81123468:	20c09516 	blt	r4,r3,811236c0 <__subdf3+0x42c>
8112346c:	01400804 	movi	r5,32
81123470:	28cbc83a 	sub	r5,r5,r3
81123474:	88c8d83a 	srl	r4,r17,r3
81123478:	8962983a 	sll	r17,r17,r5
8112347c:	114a983a 	sll	r5,r2,r5
81123480:	10c6d83a 	srl	r3,r2,r3
81123484:	8804c03a 	cmpne	r2,r17,zero
81123488:	290ab03a 	or	r5,r5,r4
8112348c:	28a2b03a 	or	r17,r5,r2
81123490:	0021883a 	mov	r16,zero
81123494:	003fa206 	br	81123320 <__reset+0xfb103320>
81123498:	2090b03a 	or	r8,r4,r2
8112349c:	40018e26 	beq	r8,zero,81123ad8 <__subdf3+0x844>
811234a0:	1007883a 	mov	r3,r2
811234a4:	2023883a 	mov	r17,r4
811234a8:	888001cc 	andi	r2,r17,7
811234ac:	103f9e1e 	bne	r2,zero,81123328 <__reset+0xfb103328>
811234b0:	1804977a 	slli	r2,r3,29
811234b4:	8822d0fa 	srli	r17,r17,3
811234b8:	1810d0fa 	srli	r8,r3,3
811234bc:	9100004c 	andi	r4,r18,1
811234c0:	1444b03a 	or	r2,r2,r17
811234c4:	00c1ffc4 	movi	r3,2047
811234c8:	80c02826 	beq	r16,r3,8112356c <__subdf3+0x2d8>
811234cc:	01400434 	movhi	r5,16
811234d0:	297fffc4 	addi	r5,r5,-1
811234d4:	80e0703a 	and	r16,r16,r3
811234d8:	414a703a 	and	r5,r8,r5
811234dc:	003fa806 	br	81123380 <__reset+0xfb103380>
811234e0:	0080630e 	bge	zero,r2,81123670 <__subdf3+0x3dc>
811234e4:	48003026 	beq	r9,zero,811235a8 <__subdf3+0x314>
811234e8:	0101ffc4 	movi	r4,2047
811234ec:	813f8c26 	beq	r16,r4,81123320 <__reset+0xfb103320>
811234f0:	29402034 	orhi	r5,r5,128
811234f4:	01000e04 	movi	r4,56
811234f8:	2080a90e 	bge	r4,r2,811237a0 <__subdf3+0x50c>
811234fc:	298cb03a 	or	r6,r5,r6
81123500:	3012c03a 	cmpne	r9,r6,zero
81123504:	0005883a 	mov	r2,zero
81123508:	4c53883a 	add	r9,r9,r17
8112350c:	4c63803a 	cmpltu	r17,r9,r17
81123510:	10c7883a 	add	r3,r2,r3
81123514:	88c7883a 	add	r3,r17,r3
81123518:	4823883a 	mov	r17,r9
8112351c:	1880202c 	andhi	r2,r3,128
81123520:	1000d026 	beq	r2,zero,81123864 <__subdf3+0x5d0>
81123524:	84000044 	addi	r16,r16,1
81123528:	0081ffc4 	movi	r2,2047
8112352c:	8080fe26 	beq	r16,r2,81123928 <__subdf3+0x694>
81123530:	00bfe034 	movhi	r2,65408
81123534:	10bfffc4 	addi	r2,r2,-1
81123538:	1886703a 	and	r3,r3,r2
8112353c:	880ad07a 	srli	r5,r17,1
81123540:	180497fa 	slli	r2,r3,31
81123544:	8900004c 	andi	r4,r17,1
81123548:	2922b03a 	or	r17,r5,r4
8112354c:	1806d07a 	srli	r3,r3,1
81123550:	1462b03a 	or	r17,r2,r17
81123554:	3825883a 	mov	r18,r7
81123558:	003f7106 	br	81123320 <__reset+0xfb103320>
8112355c:	2984b03a 	or	r2,r5,r6
81123560:	103f6826 	beq	r2,zero,81123304 <__reset+0xfb103304>
81123564:	39c03fcc 	andi	r7,r7,255
81123568:	003f6706 	br	81123308 <__reset+0xfb103308>
8112356c:	4086b03a 	or	r3,r8,r2
81123570:	18015226 	beq	r3,zero,81123abc <__subdf3+0x828>
81123574:	00c00434 	movhi	r3,16
81123578:	41400234 	orhi	r5,r8,8
8112357c:	18ffffc4 	addi	r3,r3,-1
81123580:	28ca703a 	and	r5,r5,r3
81123584:	003f7e06 	br	81123380 <__reset+0xfb103380>
81123588:	10bfffc4 	addi	r2,r2,-1
8112358c:	1000491e 	bne	r2,zero,811236b4 <__subdf3+0x420>
81123590:	898fc83a 	sub	r7,r17,r6
81123594:	89e3803a 	cmpltu	r17,r17,r7
81123598:	1947c83a 	sub	r3,r3,r5
8112359c:	1c47c83a 	sub	r3,r3,r17
811235a0:	3823883a 	mov	r17,r7
811235a4:	003f9b06 	br	81123414 <__reset+0xfb103414>
811235a8:	2988b03a 	or	r4,r5,r6
811235ac:	203f5c26 	beq	r4,zero,81123320 <__reset+0xfb103320>
811235b0:	10bfffc4 	addi	r2,r2,-1
811235b4:	1000931e 	bne	r2,zero,81123804 <__subdf3+0x570>
811235b8:	898d883a 	add	r6,r17,r6
811235bc:	3463803a 	cmpltu	r17,r6,r17
811235c0:	1947883a 	add	r3,r3,r5
811235c4:	88c7883a 	add	r3,r17,r3
811235c8:	3023883a 	mov	r17,r6
811235cc:	003fd306 	br	8112351c <__reset+0xfb10351c>
811235d0:	1000541e 	bne	r2,zero,81123724 <__subdf3+0x490>
811235d4:	80800044 	addi	r2,r16,1
811235d8:	1081ffcc 	andi	r2,r2,2047
811235dc:	01000044 	movi	r4,1
811235e0:	2080a20e 	bge	r4,r2,8112386c <__subdf3+0x5d8>
811235e4:	8989c83a 	sub	r4,r17,r6
811235e8:	8905803a 	cmpltu	r2,r17,r4
811235ec:	1967c83a 	sub	r19,r3,r5
811235f0:	98a7c83a 	sub	r19,r19,r2
811235f4:	9880202c 	andhi	r2,r19,128
811235f8:	10006326 	beq	r2,zero,81123788 <__subdf3+0x4f4>
811235fc:	3463c83a 	sub	r17,r6,r17
81123600:	28c7c83a 	sub	r3,r5,r3
81123604:	344d803a 	cmpltu	r6,r6,r17
81123608:	19a7c83a 	sub	r19,r3,r6
8112360c:	3825883a 	mov	r18,r7
81123610:	983f861e 	bne	r19,zero,8112342c <__reset+0xfb10342c>
81123614:	8809883a 	mov	r4,r17
81123618:	110e45c0 	call	8110e45c <__clzsi2>
8112361c:	10800804 	addi	r2,r2,32
81123620:	113ffe04 	addi	r4,r2,-8
81123624:	00c007c4 	movi	r3,31
81123628:	193f850e 	bge	r3,r4,81123440 <__reset+0xfb103440>
8112362c:	10bff604 	addi	r2,r2,-40
81123630:	8884983a 	sll	r2,r17,r2
81123634:	0023883a 	mov	r17,zero
81123638:	243f880e 	bge	r4,r16,8112345c <__reset+0xfb10345c>
8112363c:	00ffe034 	movhi	r3,65408
81123640:	18ffffc4 	addi	r3,r3,-1
81123644:	8121c83a 	sub	r16,r16,r4
81123648:	10c6703a 	and	r3,r2,r3
8112364c:	003f3406 	br	81123320 <__reset+0xfb103320>
81123650:	9100004c 	andi	r4,r18,1
81123654:	000b883a 	mov	r5,zero
81123658:	0005883a 	mov	r2,zero
8112365c:	003f4806 	br	81123380 <__reset+0xfb103380>
81123660:	298cb03a 	or	r6,r5,r6
81123664:	300cc03a 	cmpne	r6,r6,zero
81123668:	0005883a 	mov	r2,zero
8112366c:	003f6406 	br	81123400 <__reset+0xfb103400>
81123670:	10009a1e 	bne	r2,zero,811238dc <__subdf3+0x648>
81123674:	82400044 	addi	r9,r16,1
81123678:	4881ffcc 	andi	r2,r9,2047
8112367c:	02800044 	movi	r10,1
81123680:	5080670e 	bge	r10,r2,81123820 <__subdf3+0x58c>
81123684:	0081ffc4 	movi	r2,2047
81123688:	4880af26 	beq	r9,r2,81123948 <__subdf3+0x6b4>
8112368c:	898d883a 	add	r6,r17,r6
81123690:	1945883a 	add	r2,r3,r5
81123694:	3447803a 	cmpltu	r3,r6,r17
81123698:	1887883a 	add	r3,r3,r2
8112369c:	182297fa 	slli	r17,r3,31
811236a0:	300cd07a 	srli	r6,r6,1
811236a4:	1806d07a 	srli	r3,r3,1
811236a8:	4821883a 	mov	r16,r9
811236ac:	89a2b03a 	or	r17,r17,r6
811236b0:	003f1b06 	br	81123320 <__reset+0xfb103320>
811236b4:	0101ffc4 	movi	r4,2047
811236b8:	813f441e 	bne	r16,r4,811233cc <__reset+0xfb1033cc>
811236bc:	003f1806 	br	81123320 <__reset+0xfb103320>
811236c0:	843ff844 	addi	r16,r16,-31
811236c4:	01400804 	movi	r5,32
811236c8:	1408d83a 	srl	r4,r2,r16
811236cc:	19405026 	beq	r3,r5,81123810 <__subdf3+0x57c>
811236d0:	01401004 	movi	r5,64
811236d4:	28c7c83a 	sub	r3,r5,r3
811236d8:	10c4983a 	sll	r2,r2,r3
811236dc:	88a2b03a 	or	r17,r17,r2
811236e0:	8822c03a 	cmpne	r17,r17,zero
811236e4:	2462b03a 	or	r17,r4,r17
811236e8:	0007883a 	mov	r3,zero
811236ec:	0021883a 	mov	r16,zero
811236f0:	003f6d06 	br	811234a8 <__reset+0xfb1034a8>
811236f4:	11fff804 	addi	r7,r2,-32
811236f8:	01000804 	movi	r4,32
811236fc:	29ced83a 	srl	r7,r5,r7
81123700:	11004526 	beq	r2,r4,81123818 <__subdf3+0x584>
81123704:	01001004 	movi	r4,64
81123708:	2089c83a 	sub	r4,r4,r2
8112370c:	2904983a 	sll	r2,r5,r4
81123710:	118cb03a 	or	r6,r2,r6
81123714:	300cc03a 	cmpne	r6,r6,zero
81123718:	398cb03a 	or	r6,r7,r6
8112371c:	0005883a 	mov	r2,zero
81123720:	003f3706 	br	81123400 <__reset+0xfb103400>
81123724:	80002a26 	beq	r16,zero,811237d0 <__subdf3+0x53c>
81123728:	0101ffc4 	movi	r4,2047
8112372c:	49006626 	beq	r9,r4,811238c8 <__subdf3+0x634>
81123730:	0085c83a 	sub	r2,zero,r2
81123734:	18c02034 	orhi	r3,r3,128
81123738:	01000e04 	movi	r4,56
8112373c:	20807e16 	blt	r4,r2,81123938 <__subdf3+0x6a4>
81123740:	010007c4 	movi	r4,31
81123744:	2080e716 	blt	r4,r2,81123ae4 <__subdf3+0x850>
81123748:	01000804 	movi	r4,32
8112374c:	2089c83a 	sub	r4,r4,r2
81123750:	1914983a 	sll	r10,r3,r4
81123754:	8890d83a 	srl	r8,r17,r2
81123758:	8908983a 	sll	r4,r17,r4
8112375c:	1884d83a 	srl	r2,r3,r2
81123760:	5222b03a 	or	r17,r10,r8
81123764:	2006c03a 	cmpne	r3,r4,zero
81123768:	88e2b03a 	or	r17,r17,r3
8112376c:	3463c83a 	sub	r17,r6,r17
81123770:	2885c83a 	sub	r2,r5,r2
81123774:	344d803a 	cmpltu	r6,r6,r17
81123778:	1187c83a 	sub	r3,r2,r6
8112377c:	4821883a 	mov	r16,r9
81123780:	3825883a 	mov	r18,r7
81123784:	003f2306 	br	81123414 <__reset+0xfb103414>
81123788:	24d0b03a 	or	r8,r4,r19
8112378c:	40001b1e 	bne	r8,zero,811237fc <__subdf3+0x568>
81123790:	0005883a 	mov	r2,zero
81123794:	0009883a 	mov	r4,zero
81123798:	0021883a 	mov	r16,zero
8112379c:	003f4906 	br	811234c4 <__reset+0xfb1034c4>
811237a0:	010007c4 	movi	r4,31
811237a4:	20803a16 	blt	r4,r2,81123890 <__subdf3+0x5fc>
811237a8:	01000804 	movi	r4,32
811237ac:	2089c83a 	sub	r4,r4,r2
811237b0:	2912983a 	sll	r9,r5,r4
811237b4:	3090d83a 	srl	r8,r6,r2
811237b8:	3108983a 	sll	r4,r6,r4
811237bc:	2884d83a 	srl	r2,r5,r2
811237c0:	4a12b03a 	or	r9,r9,r8
811237c4:	2008c03a 	cmpne	r4,r4,zero
811237c8:	4912b03a 	or	r9,r9,r4
811237cc:	003f4e06 	br	81123508 <__reset+0xfb103508>
811237d0:	1c48b03a 	or	r4,r3,r17
811237d4:	20003c26 	beq	r4,zero,811238c8 <__subdf3+0x634>
811237d8:	0084303a 	nor	r2,zero,r2
811237dc:	1000381e 	bne	r2,zero,811238c0 <__subdf3+0x62c>
811237e0:	3463c83a 	sub	r17,r6,r17
811237e4:	28c5c83a 	sub	r2,r5,r3
811237e8:	344d803a 	cmpltu	r6,r6,r17
811237ec:	1187c83a 	sub	r3,r2,r6
811237f0:	4821883a 	mov	r16,r9
811237f4:	3825883a 	mov	r18,r7
811237f8:	003f0606 	br	81123414 <__reset+0xfb103414>
811237fc:	2023883a 	mov	r17,r4
81123800:	003f0906 	br	81123428 <__reset+0xfb103428>
81123804:	0101ffc4 	movi	r4,2047
81123808:	813f3a1e 	bne	r16,r4,811234f4 <__reset+0xfb1034f4>
8112380c:	003ec406 	br	81123320 <__reset+0xfb103320>
81123810:	0005883a 	mov	r2,zero
81123814:	003fb106 	br	811236dc <__reset+0xfb1036dc>
81123818:	0005883a 	mov	r2,zero
8112381c:	003fbc06 	br	81123710 <__reset+0xfb103710>
81123820:	1c44b03a 	or	r2,r3,r17
81123824:	80008e1e 	bne	r16,zero,81123a60 <__subdf3+0x7cc>
81123828:	1000c826 	beq	r2,zero,81123b4c <__subdf3+0x8b8>
8112382c:	2984b03a 	or	r2,r5,r6
81123830:	103ebb26 	beq	r2,zero,81123320 <__reset+0xfb103320>
81123834:	8989883a 	add	r4,r17,r6
81123838:	1945883a 	add	r2,r3,r5
8112383c:	2447803a 	cmpltu	r3,r4,r17
81123840:	1887883a 	add	r3,r3,r2
81123844:	1880202c 	andhi	r2,r3,128
81123848:	2023883a 	mov	r17,r4
8112384c:	103f1626 	beq	r2,zero,811234a8 <__reset+0xfb1034a8>
81123850:	00bfe034 	movhi	r2,65408
81123854:	10bfffc4 	addi	r2,r2,-1
81123858:	5021883a 	mov	r16,r10
8112385c:	1886703a 	and	r3,r3,r2
81123860:	003eaf06 	br	81123320 <__reset+0xfb103320>
81123864:	3825883a 	mov	r18,r7
81123868:	003f0f06 	br	811234a8 <__reset+0xfb1034a8>
8112386c:	1c44b03a 	or	r2,r3,r17
81123870:	8000251e 	bne	r16,zero,81123908 <__subdf3+0x674>
81123874:	1000661e 	bne	r2,zero,81123a10 <__subdf3+0x77c>
81123878:	2990b03a 	or	r8,r5,r6
8112387c:	40009626 	beq	r8,zero,81123ad8 <__subdf3+0x844>
81123880:	2807883a 	mov	r3,r5
81123884:	3023883a 	mov	r17,r6
81123888:	3825883a 	mov	r18,r7
8112388c:	003ea406 	br	81123320 <__reset+0xfb103320>
81123890:	127ff804 	addi	r9,r2,-32
81123894:	01000804 	movi	r4,32
81123898:	2a52d83a 	srl	r9,r5,r9
8112389c:	11008c26 	beq	r2,r4,81123ad0 <__subdf3+0x83c>
811238a0:	01001004 	movi	r4,64
811238a4:	2085c83a 	sub	r2,r4,r2
811238a8:	2884983a 	sll	r2,r5,r2
811238ac:	118cb03a 	or	r6,r2,r6
811238b0:	300cc03a 	cmpne	r6,r6,zero
811238b4:	4992b03a 	or	r9,r9,r6
811238b8:	0005883a 	mov	r2,zero
811238bc:	003f1206 	br	81123508 <__reset+0xfb103508>
811238c0:	0101ffc4 	movi	r4,2047
811238c4:	493f9c1e 	bne	r9,r4,81123738 <__reset+0xfb103738>
811238c8:	2807883a 	mov	r3,r5
811238cc:	3023883a 	mov	r17,r6
811238d0:	4821883a 	mov	r16,r9
811238d4:	3825883a 	mov	r18,r7
811238d8:	003e9106 	br	81123320 <__reset+0xfb103320>
811238dc:	80001f1e 	bne	r16,zero,8112395c <__subdf3+0x6c8>
811238e0:	1c48b03a 	or	r4,r3,r17
811238e4:	20005a26 	beq	r4,zero,81123a50 <__subdf3+0x7bc>
811238e8:	0084303a 	nor	r2,zero,r2
811238ec:	1000561e 	bne	r2,zero,81123a48 <__subdf3+0x7b4>
811238f0:	89a3883a 	add	r17,r17,r6
811238f4:	1945883a 	add	r2,r3,r5
811238f8:	898d803a 	cmpltu	r6,r17,r6
811238fc:	3087883a 	add	r3,r6,r2
81123900:	4821883a 	mov	r16,r9
81123904:	003f0506 	br	8112351c <__reset+0xfb10351c>
81123908:	10002b1e 	bne	r2,zero,811239b8 <__subdf3+0x724>
8112390c:	2984b03a 	or	r2,r5,r6
81123910:	10008026 	beq	r2,zero,81123b14 <__subdf3+0x880>
81123914:	2807883a 	mov	r3,r5
81123918:	3023883a 	mov	r17,r6
8112391c:	3825883a 	mov	r18,r7
81123920:	0401ffc4 	movi	r16,2047
81123924:	003e7e06 	br	81123320 <__reset+0xfb103320>
81123928:	3809883a 	mov	r4,r7
8112392c:	0011883a 	mov	r8,zero
81123930:	0005883a 	mov	r2,zero
81123934:	003ee306 	br	811234c4 <__reset+0xfb1034c4>
81123938:	1c62b03a 	or	r17,r3,r17
8112393c:	8822c03a 	cmpne	r17,r17,zero
81123940:	0005883a 	mov	r2,zero
81123944:	003f8906 	br	8112376c <__reset+0xfb10376c>
81123948:	3809883a 	mov	r4,r7
8112394c:	4821883a 	mov	r16,r9
81123950:	0011883a 	mov	r8,zero
81123954:	0005883a 	mov	r2,zero
81123958:	003eda06 	br	811234c4 <__reset+0xfb1034c4>
8112395c:	0101ffc4 	movi	r4,2047
81123960:	49003b26 	beq	r9,r4,81123a50 <__subdf3+0x7bc>
81123964:	0085c83a 	sub	r2,zero,r2
81123968:	18c02034 	orhi	r3,r3,128
8112396c:	01000e04 	movi	r4,56
81123970:	20806e16 	blt	r4,r2,81123b2c <__subdf3+0x898>
81123974:	010007c4 	movi	r4,31
81123978:	20807716 	blt	r4,r2,81123b58 <__subdf3+0x8c4>
8112397c:	01000804 	movi	r4,32
81123980:	2089c83a 	sub	r4,r4,r2
81123984:	1914983a 	sll	r10,r3,r4
81123988:	8890d83a 	srl	r8,r17,r2
8112398c:	8908983a 	sll	r4,r17,r4
81123990:	1884d83a 	srl	r2,r3,r2
81123994:	5222b03a 	or	r17,r10,r8
81123998:	2006c03a 	cmpne	r3,r4,zero
8112399c:	88e2b03a 	or	r17,r17,r3
811239a0:	89a3883a 	add	r17,r17,r6
811239a4:	1145883a 	add	r2,r2,r5
811239a8:	898d803a 	cmpltu	r6,r17,r6
811239ac:	3087883a 	add	r3,r6,r2
811239b0:	4821883a 	mov	r16,r9
811239b4:	003ed906 	br	8112351c <__reset+0xfb10351c>
811239b8:	2984b03a 	or	r2,r5,r6
811239bc:	10004226 	beq	r2,zero,81123ac8 <__subdf3+0x834>
811239c0:	1808d0fa 	srli	r4,r3,3
811239c4:	8822d0fa 	srli	r17,r17,3
811239c8:	1806977a 	slli	r3,r3,29
811239cc:	2080022c 	andhi	r2,r4,8
811239d0:	1c62b03a 	or	r17,r3,r17
811239d4:	10000826 	beq	r2,zero,811239f8 <__subdf3+0x764>
811239d8:	2812d0fa 	srli	r9,r5,3
811239dc:	4880022c 	andhi	r2,r9,8
811239e0:	1000051e 	bne	r2,zero,811239f8 <__subdf3+0x764>
811239e4:	300cd0fa 	srli	r6,r6,3
811239e8:	2804977a 	slli	r2,r5,29
811239ec:	4809883a 	mov	r4,r9
811239f0:	3825883a 	mov	r18,r7
811239f4:	11a2b03a 	or	r17,r2,r6
811239f8:	8806d77a 	srli	r3,r17,29
811239fc:	200890fa 	slli	r4,r4,3
81123a00:	882290fa 	slli	r17,r17,3
81123a04:	0401ffc4 	movi	r16,2047
81123a08:	1906b03a 	or	r3,r3,r4
81123a0c:	003e4406 	br	81123320 <__reset+0xfb103320>
81123a10:	2984b03a 	or	r2,r5,r6
81123a14:	103e4226 	beq	r2,zero,81123320 <__reset+0xfb103320>
81123a18:	8989c83a 	sub	r4,r17,r6
81123a1c:	8911803a 	cmpltu	r8,r17,r4
81123a20:	1945c83a 	sub	r2,r3,r5
81123a24:	1205c83a 	sub	r2,r2,r8
81123a28:	1200202c 	andhi	r8,r2,128
81123a2c:	403e9a26 	beq	r8,zero,81123498 <__reset+0xfb103498>
81123a30:	3463c83a 	sub	r17,r6,r17
81123a34:	28c5c83a 	sub	r2,r5,r3
81123a38:	344d803a 	cmpltu	r6,r6,r17
81123a3c:	1187c83a 	sub	r3,r2,r6
81123a40:	3825883a 	mov	r18,r7
81123a44:	003e3606 	br	81123320 <__reset+0xfb103320>
81123a48:	0101ffc4 	movi	r4,2047
81123a4c:	493fc71e 	bne	r9,r4,8112396c <__reset+0xfb10396c>
81123a50:	2807883a 	mov	r3,r5
81123a54:	3023883a 	mov	r17,r6
81123a58:	4821883a 	mov	r16,r9
81123a5c:	003e3006 	br	81123320 <__reset+0xfb103320>
81123a60:	10003626 	beq	r2,zero,81123b3c <__subdf3+0x8a8>
81123a64:	2984b03a 	or	r2,r5,r6
81123a68:	10001726 	beq	r2,zero,81123ac8 <__subdf3+0x834>
81123a6c:	1808d0fa 	srli	r4,r3,3
81123a70:	8822d0fa 	srli	r17,r17,3
81123a74:	1806977a 	slli	r3,r3,29
81123a78:	2080022c 	andhi	r2,r4,8
81123a7c:	1c62b03a 	or	r17,r3,r17
81123a80:	10000726 	beq	r2,zero,81123aa0 <__subdf3+0x80c>
81123a84:	2812d0fa 	srli	r9,r5,3
81123a88:	4880022c 	andhi	r2,r9,8
81123a8c:	1000041e 	bne	r2,zero,81123aa0 <__subdf3+0x80c>
81123a90:	300cd0fa 	srli	r6,r6,3
81123a94:	2804977a 	slli	r2,r5,29
81123a98:	4809883a 	mov	r4,r9
81123a9c:	11a2b03a 	or	r17,r2,r6
81123aa0:	8806d77a 	srli	r3,r17,29
81123aa4:	200890fa 	slli	r4,r4,3
81123aa8:	882290fa 	slli	r17,r17,3
81123aac:	3825883a 	mov	r18,r7
81123ab0:	1906b03a 	or	r3,r3,r4
81123ab4:	0401ffc4 	movi	r16,2047
81123ab8:	003e1906 	br	81123320 <__reset+0xfb103320>
81123abc:	000b883a 	mov	r5,zero
81123ac0:	0005883a 	mov	r2,zero
81123ac4:	003e2e06 	br	81123380 <__reset+0xfb103380>
81123ac8:	0401ffc4 	movi	r16,2047
81123acc:	003e1406 	br	81123320 <__reset+0xfb103320>
81123ad0:	0005883a 	mov	r2,zero
81123ad4:	003f7506 	br	811238ac <__reset+0xfb1038ac>
81123ad8:	0005883a 	mov	r2,zero
81123adc:	0009883a 	mov	r4,zero
81123ae0:	003e7806 	br	811234c4 <__reset+0xfb1034c4>
81123ae4:	123ff804 	addi	r8,r2,-32
81123ae8:	01000804 	movi	r4,32
81123aec:	1a10d83a 	srl	r8,r3,r8
81123af0:	11002526 	beq	r2,r4,81123b88 <__subdf3+0x8f4>
81123af4:	01001004 	movi	r4,64
81123af8:	2085c83a 	sub	r2,r4,r2
81123afc:	1884983a 	sll	r2,r3,r2
81123b00:	1444b03a 	or	r2,r2,r17
81123b04:	1004c03a 	cmpne	r2,r2,zero
81123b08:	40a2b03a 	or	r17,r8,r2
81123b0c:	0005883a 	mov	r2,zero
81123b10:	003f1606 	br	8112376c <__reset+0xfb10376c>
81123b14:	02000434 	movhi	r8,16
81123b18:	0009883a 	mov	r4,zero
81123b1c:	423fffc4 	addi	r8,r8,-1
81123b20:	00bfffc4 	movi	r2,-1
81123b24:	0401ffc4 	movi	r16,2047
81123b28:	003e6606 	br	811234c4 <__reset+0xfb1034c4>
81123b2c:	1c62b03a 	or	r17,r3,r17
81123b30:	8822c03a 	cmpne	r17,r17,zero
81123b34:	0005883a 	mov	r2,zero
81123b38:	003f9906 	br	811239a0 <__reset+0xfb1039a0>
81123b3c:	2807883a 	mov	r3,r5
81123b40:	3023883a 	mov	r17,r6
81123b44:	0401ffc4 	movi	r16,2047
81123b48:	003df506 	br	81123320 <__reset+0xfb103320>
81123b4c:	2807883a 	mov	r3,r5
81123b50:	3023883a 	mov	r17,r6
81123b54:	003df206 	br	81123320 <__reset+0xfb103320>
81123b58:	123ff804 	addi	r8,r2,-32
81123b5c:	01000804 	movi	r4,32
81123b60:	1a10d83a 	srl	r8,r3,r8
81123b64:	11000a26 	beq	r2,r4,81123b90 <__subdf3+0x8fc>
81123b68:	01001004 	movi	r4,64
81123b6c:	2085c83a 	sub	r2,r4,r2
81123b70:	1884983a 	sll	r2,r3,r2
81123b74:	1444b03a 	or	r2,r2,r17
81123b78:	1004c03a 	cmpne	r2,r2,zero
81123b7c:	40a2b03a 	or	r17,r8,r2
81123b80:	0005883a 	mov	r2,zero
81123b84:	003f8606 	br	811239a0 <__reset+0xfb1039a0>
81123b88:	0005883a 	mov	r2,zero
81123b8c:	003fdc06 	br	81123b00 <__reset+0xfb103b00>
81123b90:	0005883a 	mov	r2,zero
81123b94:	003ff706 	br	81123b74 <__reset+0xfb103b74>

81123b98 <__fixdfsi>:
81123b98:	280cd53a 	srli	r6,r5,20
81123b9c:	00c00434 	movhi	r3,16
81123ba0:	18ffffc4 	addi	r3,r3,-1
81123ba4:	3181ffcc 	andi	r6,r6,2047
81123ba8:	01c0ff84 	movi	r7,1022
81123bac:	28c6703a 	and	r3,r5,r3
81123bb0:	280ad7fa 	srli	r5,r5,31
81123bb4:	3980120e 	bge	r7,r6,81123c00 <__fixdfsi+0x68>
81123bb8:	00810744 	movi	r2,1053
81123bbc:	11800c16 	blt	r2,r6,81123bf0 <__fixdfsi+0x58>
81123bc0:	00810cc4 	movi	r2,1075
81123bc4:	1185c83a 	sub	r2,r2,r6
81123bc8:	01c007c4 	movi	r7,31
81123bcc:	18c00434 	orhi	r3,r3,16
81123bd0:	38800d16 	blt	r7,r2,81123c08 <__fixdfsi+0x70>
81123bd4:	31befb44 	addi	r6,r6,-1043
81123bd8:	2084d83a 	srl	r2,r4,r2
81123bdc:	1986983a 	sll	r3,r3,r6
81123be0:	1884b03a 	or	r2,r3,r2
81123be4:	28000726 	beq	r5,zero,81123c04 <__fixdfsi+0x6c>
81123be8:	0085c83a 	sub	r2,zero,r2
81123bec:	f800283a 	ret
81123bf0:	00a00034 	movhi	r2,32768
81123bf4:	10bfffc4 	addi	r2,r2,-1
81123bf8:	2885883a 	add	r2,r5,r2
81123bfc:	f800283a 	ret
81123c00:	0005883a 	mov	r2,zero
81123c04:	f800283a 	ret
81123c08:	008104c4 	movi	r2,1043
81123c0c:	1185c83a 	sub	r2,r2,r6
81123c10:	1884d83a 	srl	r2,r3,r2
81123c14:	003ff306 	br	81123be4 <__reset+0xfb103be4>

81123c18 <__floatsidf>:
81123c18:	defffd04 	addi	sp,sp,-12
81123c1c:	de00012e 	bgeu	sp,et,81123c24 <__floatsidf+0xc>
81123c20:	003b68fa 	trap	3
81123c24:	dfc00215 	stw	ra,8(sp)
81123c28:	dc400115 	stw	r17,4(sp)
81123c2c:	dc000015 	stw	r16,0(sp)
81123c30:	20002b26 	beq	r4,zero,81123ce0 <__floatsidf+0xc8>
81123c34:	2023883a 	mov	r17,r4
81123c38:	2020d7fa 	srli	r16,r4,31
81123c3c:	20002d16 	blt	r4,zero,81123cf4 <__floatsidf+0xdc>
81123c40:	8809883a 	mov	r4,r17
81123c44:	110e45c0 	call	8110e45c <__clzsi2>
81123c48:	01410784 	movi	r5,1054
81123c4c:	288bc83a 	sub	r5,r5,r2
81123c50:	01010cc4 	movi	r4,1075
81123c54:	2149c83a 	sub	r4,r4,r5
81123c58:	00c007c4 	movi	r3,31
81123c5c:	1900160e 	bge	r3,r4,81123cb8 <__floatsidf+0xa0>
81123c60:	00c104c4 	movi	r3,1043
81123c64:	1947c83a 	sub	r3,r3,r5
81123c68:	88c6983a 	sll	r3,r17,r3
81123c6c:	00800434 	movhi	r2,16
81123c70:	10bfffc4 	addi	r2,r2,-1
81123c74:	1886703a 	and	r3,r3,r2
81123c78:	2941ffcc 	andi	r5,r5,2047
81123c7c:	800d883a 	mov	r6,r16
81123c80:	0005883a 	mov	r2,zero
81123c84:	280a953a 	slli	r5,r5,20
81123c88:	31803fcc 	andi	r6,r6,255
81123c8c:	01000434 	movhi	r4,16
81123c90:	300c97fa 	slli	r6,r6,31
81123c94:	213fffc4 	addi	r4,r4,-1
81123c98:	1906703a 	and	r3,r3,r4
81123c9c:	1946b03a 	or	r3,r3,r5
81123ca0:	1986b03a 	or	r3,r3,r6
81123ca4:	dfc00217 	ldw	ra,8(sp)
81123ca8:	dc400117 	ldw	r17,4(sp)
81123cac:	dc000017 	ldw	r16,0(sp)
81123cb0:	dec00304 	addi	sp,sp,12
81123cb4:	f800283a 	ret
81123cb8:	00c002c4 	movi	r3,11
81123cbc:	1887c83a 	sub	r3,r3,r2
81123cc0:	88c6d83a 	srl	r3,r17,r3
81123cc4:	8904983a 	sll	r2,r17,r4
81123cc8:	01000434 	movhi	r4,16
81123ccc:	213fffc4 	addi	r4,r4,-1
81123cd0:	2941ffcc 	andi	r5,r5,2047
81123cd4:	1906703a 	and	r3,r3,r4
81123cd8:	800d883a 	mov	r6,r16
81123cdc:	003fe906 	br	81123c84 <__reset+0xfb103c84>
81123ce0:	000d883a 	mov	r6,zero
81123ce4:	000b883a 	mov	r5,zero
81123ce8:	0007883a 	mov	r3,zero
81123cec:	0005883a 	mov	r2,zero
81123cf0:	003fe406 	br	81123c84 <__reset+0xfb103c84>
81123cf4:	0123c83a 	sub	r17,zero,r4
81123cf8:	003fd106 	br	81123c40 <__reset+0xfb103c40>

81123cfc <__floatunsidf>:
81123cfc:	defffe04 	addi	sp,sp,-8
81123d00:	de00012e 	bgeu	sp,et,81123d08 <__floatunsidf+0xc>
81123d04:	003b68fa 	trap	3
81123d08:	dc000015 	stw	r16,0(sp)
81123d0c:	dfc00115 	stw	ra,4(sp)
81123d10:	2021883a 	mov	r16,r4
81123d14:	20002226 	beq	r4,zero,81123da0 <__floatunsidf+0xa4>
81123d18:	110e45c0 	call	8110e45c <__clzsi2>
81123d1c:	01010784 	movi	r4,1054
81123d20:	2089c83a 	sub	r4,r4,r2
81123d24:	01810cc4 	movi	r6,1075
81123d28:	310dc83a 	sub	r6,r6,r4
81123d2c:	00c007c4 	movi	r3,31
81123d30:	1980120e 	bge	r3,r6,81123d7c <__floatunsidf+0x80>
81123d34:	00c104c4 	movi	r3,1043
81123d38:	1907c83a 	sub	r3,r3,r4
81123d3c:	80ca983a 	sll	r5,r16,r3
81123d40:	00800434 	movhi	r2,16
81123d44:	10bfffc4 	addi	r2,r2,-1
81123d48:	2101ffcc 	andi	r4,r4,2047
81123d4c:	0021883a 	mov	r16,zero
81123d50:	288a703a 	and	r5,r5,r2
81123d54:	2008953a 	slli	r4,r4,20
81123d58:	00c00434 	movhi	r3,16
81123d5c:	18ffffc4 	addi	r3,r3,-1
81123d60:	28c6703a 	and	r3,r5,r3
81123d64:	8005883a 	mov	r2,r16
81123d68:	1906b03a 	or	r3,r3,r4
81123d6c:	dfc00117 	ldw	ra,4(sp)
81123d70:	dc000017 	ldw	r16,0(sp)
81123d74:	dec00204 	addi	sp,sp,8
81123d78:	f800283a 	ret
81123d7c:	00c002c4 	movi	r3,11
81123d80:	188bc83a 	sub	r5,r3,r2
81123d84:	814ad83a 	srl	r5,r16,r5
81123d88:	00c00434 	movhi	r3,16
81123d8c:	18ffffc4 	addi	r3,r3,-1
81123d90:	81a0983a 	sll	r16,r16,r6
81123d94:	2101ffcc 	andi	r4,r4,2047
81123d98:	28ca703a 	and	r5,r5,r3
81123d9c:	003fed06 	br	81123d54 <__reset+0xfb103d54>
81123da0:	0009883a 	mov	r4,zero
81123da4:	000b883a 	mov	r5,zero
81123da8:	003fea06 	br	81123d54 <__reset+0xfb103d54>

81123dac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81123dac:	defffe04 	addi	sp,sp,-8
81123db0:	de00012e 	bgeu	sp,et,81123db8 <alt_get_errno+0xc>
81123db4:	003b68fa 	trap	3
81123db8:	dfc00115 	stw	ra,4(sp)
81123dbc:	df000015 	stw	fp,0(sp)
81123dc0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81123dc4:	d0a01617 	ldw	r2,-32680(gp)
81123dc8:	10000326 	beq	r2,zero,81123dd8 <alt_get_errno+0x2c>
81123dcc:	d0a01617 	ldw	r2,-32680(gp)
81123dd0:	103ee83a 	callr	r2
81123dd4:	00000106 	br	81123ddc <alt_get_errno+0x30>
81123dd8:	d0a06b04 	addi	r2,gp,-32340
}
81123ddc:	e037883a 	mov	sp,fp
81123de0:	dfc00117 	ldw	ra,4(sp)
81123de4:	df000017 	ldw	fp,0(sp)
81123de8:	dec00204 	addi	sp,sp,8
81123dec:	f800283a 	ret

81123df0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
81123df0:	defffb04 	addi	sp,sp,-20
81123df4:	de00012e 	bgeu	sp,et,81123dfc <close+0xc>
81123df8:	003b68fa 	trap	3
81123dfc:	dfc00415 	stw	ra,16(sp)
81123e00:	df000315 	stw	fp,12(sp)
81123e04:	df000304 	addi	fp,sp,12
81123e08:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
81123e0c:	e0bfff17 	ldw	r2,-4(fp)
81123e10:	10000616 	blt	r2,zero,81123e2c <close+0x3c>
81123e14:	e0bfff17 	ldw	r2,-4(fp)
81123e18:	10c00324 	muli	r3,r2,12
81123e1c:	00a04534 	movhi	r2,33044
81123e20:	10b23d04 	addi	r2,r2,-14092
81123e24:	1885883a 	add	r2,r3,r2
81123e28:	00000106 	br	81123e30 <close+0x40>
81123e2c:	0005883a 	mov	r2,zero
81123e30:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
81123e34:	e0bffd17 	ldw	r2,-12(fp)
81123e38:	10001926 	beq	r2,zero,81123ea0 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
81123e3c:	e0bffd17 	ldw	r2,-12(fp)
81123e40:	10800017 	ldw	r2,0(r2)
81123e44:	10800417 	ldw	r2,16(r2)
81123e48:	10000626 	beq	r2,zero,81123e64 <close+0x74>
81123e4c:	e0bffd17 	ldw	r2,-12(fp)
81123e50:	10800017 	ldw	r2,0(r2)
81123e54:	10800417 	ldw	r2,16(r2)
81123e58:	e13ffd17 	ldw	r4,-12(fp)
81123e5c:	103ee83a 	callr	r2
81123e60:	00000106 	br	81123e68 <close+0x78>
81123e64:	0005883a 	mov	r2,zero
81123e68:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
81123e6c:	e13fff17 	ldw	r4,-4(fp)
81123e70:	11246a80 	call	811246a8 <alt_release_fd>
    if (rval < 0)
81123e74:	e0bffe17 	ldw	r2,-8(fp)
81123e78:	1000070e 	bge	r2,zero,81123e98 <close+0xa8>
    {
      ALT_ERRNO = -rval;
81123e7c:	1123dac0 	call	81123dac <alt_get_errno>
81123e80:	1007883a 	mov	r3,r2
81123e84:	e0bffe17 	ldw	r2,-8(fp)
81123e88:	0085c83a 	sub	r2,zero,r2
81123e8c:	18800015 	stw	r2,0(r3)
      return -1;
81123e90:	00bfffc4 	movi	r2,-1
81123e94:	00000706 	br	81123eb4 <close+0xc4>
    }
    return 0;
81123e98:	0005883a 	mov	r2,zero
81123e9c:	00000506 	br	81123eb4 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
81123ea0:	1123dac0 	call	81123dac <alt_get_errno>
81123ea4:	1007883a 	mov	r3,r2
81123ea8:	00801444 	movi	r2,81
81123eac:	18800015 	stw	r2,0(r3)
    return -1;
81123eb0:	00bfffc4 	movi	r2,-1
  }
}
81123eb4:	e037883a 	mov	sp,fp
81123eb8:	dfc00117 	ldw	ra,4(sp)
81123ebc:	df000017 	ldw	fp,0(sp)
81123ec0:	dec00204 	addi	sp,sp,8
81123ec4:	f800283a 	ret

81123ec8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
81123ec8:	deffff04 	addi	sp,sp,-4
81123ecc:	de00012e 	bgeu	sp,et,81123ed4 <alt_dcache_flush_all+0xc>
81123ed0:	003b68fa 	trap	3
81123ed4:	df000015 	stw	fp,0(sp)
81123ed8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
81123edc:	0001883a 	nop
81123ee0:	e037883a 	mov	sp,fp
81123ee4:	df000017 	ldw	fp,0(sp)
81123ee8:	dec00104 	addi	sp,sp,4
81123eec:	f800283a 	ret

81123ef0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
81123ef0:	defffc04 	addi	sp,sp,-16
81123ef4:	de00012e 	bgeu	sp,et,81123efc <alt_dev_null_write+0xc>
81123ef8:	003b68fa 	trap	3
81123efc:	df000315 	stw	fp,12(sp)
81123f00:	df000304 	addi	fp,sp,12
81123f04:	e13ffd15 	stw	r4,-12(fp)
81123f08:	e17ffe15 	stw	r5,-8(fp)
81123f0c:	e1bfff15 	stw	r6,-4(fp)
  return len;
81123f10:	e0bfff17 	ldw	r2,-4(fp)
}
81123f14:	e037883a 	mov	sp,fp
81123f18:	df000017 	ldw	fp,0(sp)
81123f1c:	dec00104 	addi	sp,sp,4
81123f20:	f800283a 	ret

81123f24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81123f24:	defffe04 	addi	sp,sp,-8
81123f28:	de00012e 	bgeu	sp,et,81123f30 <alt_get_errno+0xc>
81123f2c:	003b68fa 	trap	3
81123f30:	dfc00115 	stw	ra,4(sp)
81123f34:	df000015 	stw	fp,0(sp)
81123f38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81123f3c:	d0a01617 	ldw	r2,-32680(gp)
81123f40:	10000326 	beq	r2,zero,81123f50 <alt_get_errno+0x2c>
81123f44:	d0a01617 	ldw	r2,-32680(gp)
81123f48:	103ee83a 	callr	r2
81123f4c:	00000106 	br	81123f54 <alt_get_errno+0x30>
81123f50:	d0a06b04 	addi	r2,gp,-32340
}
81123f54:	e037883a 	mov	sp,fp
81123f58:	dfc00117 	ldw	ra,4(sp)
81123f5c:	df000017 	ldw	fp,0(sp)
81123f60:	dec00204 	addi	sp,sp,8
81123f64:	f800283a 	ret

81123f68 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
81123f68:	defffb04 	addi	sp,sp,-20
81123f6c:	de00012e 	bgeu	sp,et,81123f74 <fstat+0xc>
81123f70:	003b68fa 	trap	3
81123f74:	dfc00415 	stw	ra,16(sp)
81123f78:	df000315 	stw	fp,12(sp)
81123f7c:	df000304 	addi	fp,sp,12
81123f80:	e13ffe15 	stw	r4,-8(fp)
81123f84:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
81123f88:	e0bffe17 	ldw	r2,-8(fp)
81123f8c:	10000616 	blt	r2,zero,81123fa8 <fstat+0x40>
81123f90:	e0bffe17 	ldw	r2,-8(fp)
81123f94:	10c00324 	muli	r3,r2,12
81123f98:	00a04534 	movhi	r2,33044
81123f9c:	10b23d04 	addi	r2,r2,-14092
81123fa0:	1885883a 	add	r2,r3,r2
81123fa4:	00000106 	br	81123fac <fstat+0x44>
81123fa8:	0005883a 	mov	r2,zero
81123fac:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
81123fb0:	e0bffd17 	ldw	r2,-12(fp)
81123fb4:	10001026 	beq	r2,zero,81123ff8 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
81123fb8:	e0bffd17 	ldw	r2,-12(fp)
81123fbc:	10800017 	ldw	r2,0(r2)
81123fc0:	10800817 	ldw	r2,32(r2)
81123fc4:	10000726 	beq	r2,zero,81123fe4 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
81123fc8:	e0bffd17 	ldw	r2,-12(fp)
81123fcc:	10800017 	ldw	r2,0(r2)
81123fd0:	10800817 	ldw	r2,32(r2)
81123fd4:	e17fff17 	ldw	r5,-4(fp)
81123fd8:	e13ffd17 	ldw	r4,-12(fp)
81123fdc:	103ee83a 	callr	r2
81123fe0:	00000a06 	br	8112400c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
81123fe4:	e0bfff17 	ldw	r2,-4(fp)
81123fe8:	00c80004 	movi	r3,8192
81123fec:	10c00115 	stw	r3,4(r2)
      return 0;
81123ff0:	0005883a 	mov	r2,zero
81123ff4:	00000506 	br	8112400c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
81123ff8:	1123f240 	call	81123f24 <alt_get_errno>
81123ffc:	1007883a 	mov	r3,r2
81124000:	00801444 	movi	r2,81
81124004:	18800015 	stw	r2,0(r3)
    return -1;
81124008:	00bfffc4 	movi	r2,-1
  }
}
8112400c:	e037883a 	mov	sp,fp
81124010:	dfc00117 	ldw	ra,4(sp)
81124014:	df000017 	ldw	fp,0(sp)
81124018:	dec00204 	addi	sp,sp,8
8112401c:	f800283a 	ret

81124020 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81124020:	defffe04 	addi	sp,sp,-8
81124024:	de00012e 	bgeu	sp,et,8112402c <alt_get_errno+0xc>
81124028:	003b68fa 	trap	3
8112402c:	dfc00115 	stw	ra,4(sp)
81124030:	df000015 	stw	fp,0(sp)
81124034:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81124038:	d0a01617 	ldw	r2,-32680(gp)
8112403c:	10000326 	beq	r2,zero,8112404c <alt_get_errno+0x2c>
81124040:	d0a01617 	ldw	r2,-32680(gp)
81124044:	103ee83a 	callr	r2
81124048:	00000106 	br	81124050 <alt_get_errno+0x30>
8112404c:	d0a06b04 	addi	r2,gp,-32340
}
81124050:	e037883a 	mov	sp,fp
81124054:	dfc00117 	ldw	ra,4(sp)
81124058:	df000017 	ldw	fp,0(sp)
8112405c:	dec00204 	addi	sp,sp,8
81124060:	f800283a 	ret

81124064 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
81124064:	deffed04 	addi	sp,sp,-76
81124068:	de00012e 	bgeu	sp,et,81124070 <isatty+0xc>
8112406c:	003b68fa 	trap	3
81124070:	dfc01215 	stw	ra,72(sp)
81124074:	df001115 	stw	fp,68(sp)
81124078:	df001104 	addi	fp,sp,68
8112407c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
81124080:	e0bfff17 	ldw	r2,-4(fp)
81124084:	10000616 	blt	r2,zero,811240a0 <isatty+0x3c>
81124088:	e0bfff17 	ldw	r2,-4(fp)
8112408c:	10c00324 	muli	r3,r2,12
81124090:	00a04534 	movhi	r2,33044
81124094:	10b23d04 	addi	r2,r2,-14092
81124098:	1885883a 	add	r2,r3,r2
8112409c:	00000106 	br	811240a4 <isatty+0x40>
811240a0:	0005883a 	mov	r2,zero
811240a4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
811240a8:	e0bfef17 	ldw	r2,-68(fp)
811240ac:	10000e26 	beq	r2,zero,811240e8 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
811240b0:	e0bfef17 	ldw	r2,-68(fp)
811240b4:	10800017 	ldw	r2,0(r2)
811240b8:	10800817 	ldw	r2,32(r2)
811240bc:	1000021e 	bne	r2,zero,811240c8 <isatty+0x64>
    {
      return 1;
811240c0:	00800044 	movi	r2,1
811240c4:	00000d06 	br	811240fc <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
811240c8:	e0bff004 	addi	r2,fp,-64
811240cc:	100b883a 	mov	r5,r2
811240d0:	e13fff17 	ldw	r4,-4(fp)
811240d4:	1123f680 	call	81123f68 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
811240d8:	e0bff117 	ldw	r2,-60(fp)
811240dc:	10880020 	cmpeqi	r2,r2,8192
811240e0:	10803fcc 	andi	r2,r2,255
811240e4:	00000506 	br	811240fc <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
811240e8:	11240200 	call	81124020 <alt_get_errno>
811240ec:	1007883a 	mov	r3,r2
811240f0:	00801444 	movi	r2,81
811240f4:	18800015 	stw	r2,0(r3)
    return 0;
811240f8:	0005883a 	mov	r2,zero
  }
}
811240fc:	e037883a 	mov	sp,fp
81124100:	dfc00117 	ldw	ra,4(sp)
81124104:	df000017 	ldw	fp,0(sp)
81124108:	dec00204 	addi	sp,sp,8
8112410c:	f800283a 	ret

81124110 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81124110:	defffe04 	addi	sp,sp,-8
81124114:	de00012e 	bgeu	sp,et,8112411c <alt_get_errno+0xc>
81124118:	003b68fa 	trap	3
8112411c:	dfc00115 	stw	ra,4(sp)
81124120:	df000015 	stw	fp,0(sp)
81124124:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81124128:	d0a01617 	ldw	r2,-32680(gp)
8112412c:	10000326 	beq	r2,zero,8112413c <alt_get_errno+0x2c>
81124130:	d0a01617 	ldw	r2,-32680(gp)
81124134:	103ee83a 	callr	r2
81124138:	00000106 	br	81124140 <alt_get_errno+0x30>
8112413c:	d0a06b04 	addi	r2,gp,-32340
}
81124140:	e037883a 	mov	sp,fp
81124144:	dfc00117 	ldw	ra,4(sp)
81124148:	df000017 	ldw	fp,0(sp)
8112414c:	dec00204 	addi	sp,sp,8
81124150:	f800283a 	ret

81124154 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
81124154:	defff904 	addi	sp,sp,-28
81124158:	de00012e 	bgeu	sp,et,81124160 <lseek+0xc>
8112415c:	003b68fa 	trap	3
81124160:	dfc00615 	stw	ra,24(sp)
81124164:	df000515 	stw	fp,20(sp)
81124168:	df000504 	addi	fp,sp,20
8112416c:	e13ffd15 	stw	r4,-12(fp)
81124170:	e17ffe15 	stw	r5,-8(fp)
81124174:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
81124178:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
8112417c:	e0bffd17 	ldw	r2,-12(fp)
81124180:	10000616 	blt	r2,zero,8112419c <lseek+0x48>
81124184:	e0bffd17 	ldw	r2,-12(fp)
81124188:	10c00324 	muli	r3,r2,12
8112418c:	00a04534 	movhi	r2,33044
81124190:	10b23d04 	addi	r2,r2,-14092
81124194:	1885883a 	add	r2,r3,r2
81124198:	00000106 	br	811241a0 <lseek+0x4c>
8112419c:	0005883a 	mov	r2,zero
811241a0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
811241a4:	e0bffc17 	ldw	r2,-16(fp)
811241a8:	10001026 	beq	r2,zero,811241ec <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
811241ac:	e0bffc17 	ldw	r2,-16(fp)
811241b0:	10800017 	ldw	r2,0(r2)
811241b4:	10800717 	ldw	r2,28(r2)
811241b8:	10000926 	beq	r2,zero,811241e0 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
811241bc:	e0bffc17 	ldw	r2,-16(fp)
811241c0:	10800017 	ldw	r2,0(r2)
811241c4:	10800717 	ldw	r2,28(r2)
811241c8:	e1bfff17 	ldw	r6,-4(fp)
811241cc:	e17ffe17 	ldw	r5,-8(fp)
811241d0:	e13ffc17 	ldw	r4,-16(fp)
811241d4:	103ee83a 	callr	r2
811241d8:	e0bffb15 	stw	r2,-20(fp)
811241dc:	00000506 	br	811241f4 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
811241e0:	00bfde84 	movi	r2,-134
811241e4:	e0bffb15 	stw	r2,-20(fp)
811241e8:	00000206 	br	811241f4 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
811241ec:	00bfebc4 	movi	r2,-81
811241f0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
811241f4:	e0bffb17 	ldw	r2,-20(fp)
811241f8:	1000070e 	bge	r2,zero,81124218 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
811241fc:	11241100 	call	81124110 <alt_get_errno>
81124200:	1007883a 	mov	r3,r2
81124204:	e0bffb17 	ldw	r2,-20(fp)
81124208:	0085c83a 	sub	r2,zero,r2
8112420c:	18800015 	stw	r2,0(r3)
    rc = -1;
81124210:	00bfffc4 	movi	r2,-1
81124214:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
81124218:	e0bffb17 	ldw	r2,-20(fp)
}
8112421c:	e037883a 	mov	sp,fp
81124220:	dfc00117 	ldw	ra,4(sp)
81124224:	df000017 	ldw	fp,0(sp)
81124228:	dec00204 	addi	sp,sp,8
8112422c:	f800283a 	ret

81124230 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
81124230:	defff904 	addi	sp,sp,-28
81124234:	de00012e 	bgeu	sp,et,8112423c <alt_main+0xc>
81124238:	003b68fa 	trap	3
8112423c:	dfc00615 	stw	ra,24(sp)
81124240:	df000515 	stw	fp,20(sp)
81124244:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
81124248:	0009883a 	mov	r4,zero
8112424c:	112ed680 	call	8112ed68 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
81124250:	11257fc0 	call	811257fc <OSInit>
81124254:	01000044 	movi	r4,1
81124258:	112b5180 	call	8112b518 <OSSemCreate>
8112425c:	d0a07915 	stw	r2,-32284(gp)
81124260:	01000044 	movi	r4,1
81124264:	112b5180 	call	8112b518 <OSSemCreate>
81124268:	d0a07b15 	stw	r2,-32276(gp)
8112426c:	d0a07204 	addi	r2,gp,-32312
81124270:	e0bffc15 	stw	r2,-16(fp)
81124274:	00800044 	movi	r2,1
81124278:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
8112427c:	e0bffd0b 	ldhu	r2,-12(fp)
81124280:	1009883a 	mov	r4,r2
81124284:	112b5180 	call	8112b518 <OSSemCreate>
81124288:	1007883a 	mov	r3,r2
8112428c:	e0bffc17 	ldw	r2,-16(fp)
81124290:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
81124294:	112eda80 	call	8112eda8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
81124298:	01a04534 	movhi	r6,33044
8112429c:	31af0804 	addi	r6,r6,-17376
811242a0:	01604534 	movhi	r5,33044
811242a4:	296f0d04 	addi	r5,r5,-17356
811242a8:	01204534 	movhi	r4,33044
811242ac:	212f0d04 	addi	r4,r4,-17356
811242b0:	11386680 	call	81138668 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
811242b4:	1137f780 	call	81137f78 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
811242b8:	012044f4 	movhi	r4,33043
811242bc:	211ff804 	addi	r4,r4,32736
811242c0:	1138e1c0 	call	81138e1c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
811242c4:	d0a07317 	ldw	r2,-32308(gp)
811242c8:	d0e07417 	ldw	r3,-32304(gp)
811242cc:	d1207517 	ldw	r4,-32300(gp)
811242d0:	200d883a 	mov	r6,r4
811242d4:	180b883a 	mov	r5,r3
811242d8:	1009883a 	mov	r4,r2
811242dc:	11096f00 	call	811096f0 <main>
811242e0:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
811242e4:	01000044 	movi	r4,1
811242e8:	1123df00 	call	81123df0 <close>
  exit (result);
811242ec:	e13ffb17 	ldw	r4,-20(fp)
811242f0:	1138e300 	call	81138e30 <exit>

811242f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
811242f4:	defffe04 	addi	sp,sp,-8
811242f8:	de00012e 	bgeu	sp,et,81124300 <alt_get_errno+0xc>
811242fc:	003b68fa 	trap	3
81124300:	dfc00115 	stw	ra,4(sp)
81124304:	df000015 	stw	fp,0(sp)
81124308:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8112430c:	d0a01617 	ldw	r2,-32680(gp)
81124310:	10000326 	beq	r2,zero,81124320 <alt_get_errno+0x2c>
81124314:	d0a01617 	ldw	r2,-32680(gp)
81124318:	103ee83a 	callr	r2
8112431c:	00000106 	br	81124324 <alt_get_errno+0x30>
81124320:	d0a06b04 	addi	r2,gp,-32340
}
81124324:	e037883a 	mov	sp,fp
81124328:	dfc00117 	ldw	ra,4(sp)
8112432c:	df000017 	ldw	fp,0(sp)
81124330:	dec00204 	addi	sp,sp,8
81124334:	f800283a 	ret

81124338 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
81124338:	defffd04 	addi	sp,sp,-12
8112433c:	de00012e 	bgeu	sp,et,81124344 <alt_file_locked+0xc>
81124340:	003b68fa 	trap	3
81124344:	df000215 	stw	fp,8(sp)
81124348:	df000204 	addi	fp,sp,8
8112434c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
81124350:	e0bfff17 	ldw	r2,-4(fp)
81124354:	10800217 	ldw	r2,8(r2)
81124358:	10d00034 	orhi	r3,r2,16384
8112435c:	e0bfff17 	ldw	r2,-4(fp)
81124360:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
81124364:	e03ffe15 	stw	zero,-8(fp)
81124368:	00001d06 	br	811243e0 <alt_file_locked+0xa8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
8112436c:	00a04534 	movhi	r2,33044
81124370:	10b23d04 	addi	r2,r2,-14092
81124374:	e0fffe17 	ldw	r3,-8(fp)
81124378:	18c00324 	muli	r3,r3,12
8112437c:	10c5883a 	add	r2,r2,r3
81124380:	10c00017 	ldw	r3,0(r2)
81124384:	e0bfff17 	ldw	r2,-4(fp)
81124388:	10800017 	ldw	r2,0(r2)
8112438c:	1880111e 	bne	r3,r2,811243d4 <alt_file_locked+0x9c>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
81124390:	00a04534 	movhi	r2,33044
81124394:	10b23d04 	addi	r2,r2,-14092
81124398:	e0fffe17 	ldw	r3,-8(fp)
8112439c:	18c00324 	muli	r3,r3,12
811243a0:	10c5883a 	add	r2,r2,r3
811243a4:	10800204 	addi	r2,r2,8
811243a8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
811243ac:	1000090e 	bge	r2,zero,811243d4 <alt_file_locked+0x9c>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
811243b0:	e0bffe17 	ldw	r2,-8(fp)
811243b4:	10c00324 	muli	r3,r2,12
811243b8:	00a04534 	movhi	r2,33044
811243bc:	10b23d04 	addi	r2,r2,-14092
811243c0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
811243c4:	e0bfff17 	ldw	r2,-4(fp)
811243c8:	18800226 	beq	r3,r2,811243d4 <alt_file_locked+0x9c>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
811243cc:	00bffcc4 	movi	r2,-13
811243d0:	00000806 	br	811243f4 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
811243d4:	e0bffe17 	ldw	r2,-8(fp)
811243d8:	10800044 	addi	r2,r2,1
811243dc:	e0bffe15 	stw	r2,-8(fp)
811243e0:	d0a01517 	ldw	r2,-32684(gp)
811243e4:	1007883a 	mov	r3,r2
811243e8:	e0bffe17 	ldw	r2,-8(fp)
811243ec:	18bfdf2e 	bgeu	r3,r2,8112436c <__reset+0xfb10436c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
811243f0:	0005883a 	mov	r2,zero
}
811243f4:	e037883a 	mov	sp,fp
811243f8:	df000017 	ldw	fp,0(sp)
811243fc:	dec00104 	addi	sp,sp,4
81124400:	f800283a 	ret

81124404 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
81124404:	defff604 	addi	sp,sp,-40
81124408:	de00012e 	bgeu	sp,et,81124410 <open+0xc>
8112440c:	003b68fa 	trap	3
81124410:	dfc00915 	stw	ra,36(sp)
81124414:	df000815 	stw	fp,32(sp)
81124418:	df000804 	addi	fp,sp,32
8112441c:	e13ffd15 	stw	r4,-12(fp)
81124420:	e17ffe15 	stw	r5,-8(fp)
81124424:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
81124428:	00bfffc4 	movi	r2,-1
8112442c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
81124430:	00bffb44 	movi	r2,-19
81124434:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
81124438:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
8112443c:	d1601304 	addi	r5,gp,-32692
81124440:	e13ffd17 	ldw	r4,-12(fp)
81124444:	11380480 	call	81138048 <alt_find_dev>
81124448:	e0bff815 	stw	r2,-32(fp)
8112444c:	e0bff817 	ldw	r2,-32(fp)
81124450:	1000051e 	bne	r2,zero,81124468 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
81124454:	e13ffd17 	ldw	r4,-12(fp)
81124458:	11380e00 	call	811380e0 <alt_find_file>
8112445c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
81124460:	00800044 	movi	r2,1
81124464:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
81124468:	e0bff817 	ldw	r2,-32(fp)
8112446c:	10002926 	beq	r2,zero,81124514 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
81124470:	e13ff817 	ldw	r4,-32(fp)
81124474:	11381f00 	call	811381f0 <alt_get_fd>
81124478:	e0bff915 	stw	r2,-28(fp)
8112447c:	e0bff917 	ldw	r2,-28(fp)
81124480:	1000030e 	bge	r2,zero,81124490 <open+0x8c>
    {
      status = index;
81124484:	e0bff917 	ldw	r2,-28(fp)
81124488:	e0bffa15 	stw	r2,-24(fp)
8112448c:	00002306 	br	8112451c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
81124490:	e0bff917 	ldw	r2,-28(fp)
81124494:	10c00324 	muli	r3,r2,12
81124498:	00a04534 	movhi	r2,33044
8112449c:	10b23d04 	addi	r2,r2,-14092
811244a0:	1885883a 	add	r2,r3,r2
811244a4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
811244a8:	e0fffe17 	ldw	r3,-8(fp)
811244ac:	00900034 	movhi	r2,16384
811244b0:	10bfffc4 	addi	r2,r2,-1
811244b4:	1886703a 	and	r3,r3,r2
811244b8:	e0bffc17 	ldw	r2,-16(fp)
811244bc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
811244c0:	e0bffb17 	ldw	r2,-20(fp)
811244c4:	1000051e 	bne	r2,zero,811244dc <open+0xd8>
811244c8:	e13ffc17 	ldw	r4,-16(fp)
811244cc:	11243380 	call	81124338 <alt_file_locked>
811244d0:	e0bffa15 	stw	r2,-24(fp)
811244d4:	e0bffa17 	ldw	r2,-24(fp)
811244d8:	10001016 	blt	r2,zero,8112451c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
811244dc:	e0bff817 	ldw	r2,-32(fp)
811244e0:	10800317 	ldw	r2,12(r2)
811244e4:	10000826 	beq	r2,zero,81124508 <open+0x104>
811244e8:	e0bff817 	ldw	r2,-32(fp)
811244ec:	10800317 	ldw	r2,12(r2)
811244f0:	e1ffff17 	ldw	r7,-4(fp)
811244f4:	e1bffe17 	ldw	r6,-8(fp)
811244f8:	e17ffd17 	ldw	r5,-12(fp)
811244fc:	e13ffc17 	ldw	r4,-16(fp)
81124500:	103ee83a 	callr	r2
81124504:	00000106 	br	8112450c <open+0x108>
81124508:	0005883a 	mov	r2,zero
8112450c:	e0bffa15 	stw	r2,-24(fp)
81124510:	00000206 	br	8112451c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
81124514:	00bffb44 	movi	r2,-19
81124518:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
8112451c:	e0bffa17 	ldw	r2,-24(fp)
81124520:	1000090e 	bge	r2,zero,81124548 <open+0x144>
  {
    alt_release_fd (index);  
81124524:	e13ff917 	ldw	r4,-28(fp)
81124528:	11246a80 	call	811246a8 <alt_release_fd>
    ALT_ERRNO = -status;
8112452c:	11242f40 	call	811242f4 <alt_get_errno>
81124530:	1007883a 	mov	r3,r2
81124534:	e0bffa17 	ldw	r2,-24(fp)
81124538:	0085c83a 	sub	r2,zero,r2
8112453c:	18800015 	stw	r2,0(r3)
    return -1;
81124540:	00bfffc4 	movi	r2,-1
81124544:	00000106 	br	8112454c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
81124548:	e0bff917 	ldw	r2,-28(fp)
}
8112454c:	e037883a 	mov	sp,fp
81124550:	dfc00117 	ldw	ra,4(sp)
81124554:	df000017 	ldw	fp,0(sp)
81124558:	dec00204 	addi	sp,sp,8
8112455c:	f800283a 	ret

81124560 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81124560:	defffe04 	addi	sp,sp,-8
81124564:	de00012e 	bgeu	sp,et,8112456c <alt_get_errno+0xc>
81124568:	003b68fa 	trap	3
8112456c:	dfc00115 	stw	ra,4(sp)
81124570:	df000015 	stw	fp,0(sp)
81124574:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81124578:	d0a01617 	ldw	r2,-32680(gp)
8112457c:	10000326 	beq	r2,zero,8112458c <alt_get_errno+0x2c>
81124580:	d0a01617 	ldw	r2,-32680(gp)
81124584:	103ee83a 	callr	r2
81124588:	00000106 	br	81124590 <alt_get_errno+0x30>
8112458c:	d0a06b04 	addi	r2,gp,-32340
}
81124590:	e037883a 	mov	sp,fp
81124594:	dfc00117 	ldw	ra,4(sp)
81124598:	df000017 	ldw	fp,0(sp)
8112459c:	dec00204 	addi	sp,sp,8
811245a0:	f800283a 	ret

811245a4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
811245a4:	defff904 	addi	sp,sp,-28
811245a8:	de00012e 	bgeu	sp,et,811245b0 <read+0xc>
811245ac:	003b68fa 	trap	3
811245b0:	dfc00615 	stw	ra,24(sp)
811245b4:	df000515 	stw	fp,20(sp)
811245b8:	df000504 	addi	fp,sp,20
811245bc:	e13ffd15 	stw	r4,-12(fp)
811245c0:	e17ffe15 	stw	r5,-8(fp)
811245c4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
811245c8:	e0bffd17 	ldw	r2,-12(fp)
811245cc:	10000616 	blt	r2,zero,811245e8 <read+0x44>
811245d0:	e0bffd17 	ldw	r2,-12(fp)
811245d4:	10c00324 	muli	r3,r2,12
811245d8:	00a04534 	movhi	r2,33044
811245dc:	10b23d04 	addi	r2,r2,-14092
811245e0:	1885883a 	add	r2,r3,r2
811245e4:	00000106 	br	811245ec <read+0x48>
811245e8:	0005883a 	mov	r2,zero
811245ec:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
811245f0:	e0bffb17 	ldw	r2,-20(fp)
811245f4:	10002226 	beq	r2,zero,81124680 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
811245f8:	e0bffb17 	ldw	r2,-20(fp)
811245fc:	10800217 	ldw	r2,8(r2)
81124600:	108000cc 	andi	r2,r2,3
81124604:	10800060 	cmpeqi	r2,r2,1
81124608:	1000181e 	bne	r2,zero,8112466c <read+0xc8>
        (fd->dev->read))
8112460c:	e0bffb17 	ldw	r2,-20(fp)
81124610:	10800017 	ldw	r2,0(r2)
81124614:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
81124618:	10001426 	beq	r2,zero,8112466c <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
8112461c:	e0bffb17 	ldw	r2,-20(fp)
81124620:	10800017 	ldw	r2,0(r2)
81124624:	10800517 	ldw	r2,20(r2)
81124628:	e0ffff17 	ldw	r3,-4(fp)
8112462c:	180d883a 	mov	r6,r3
81124630:	e17ffe17 	ldw	r5,-8(fp)
81124634:	e13ffb17 	ldw	r4,-20(fp)
81124638:	103ee83a 	callr	r2
8112463c:	e0bffc15 	stw	r2,-16(fp)
81124640:	e0bffc17 	ldw	r2,-16(fp)
81124644:	1000070e 	bge	r2,zero,81124664 <read+0xc0>
        {
          ALT_ERRNO = -rval;
81124648:	11245600 	call	81124560 <alt_get_errno>
8112464c:	1007883a 	mov	r3,r2
81124650:	e0bffc17 	ldw	r2,-16(fp)
81124654:	0085c83a 	sub	r2,zero,r2
81124658:	18800015 	stw	r2,0(r3)
          return -1;
8112465c:	00bfffc4 	movi	r2,-1
81124660:	00000c06 	br	81124694 <read+0xf0>
        }
        return rval;
81124664:	e0bffc17 	ldw	r2,-16(fp)
81124668:	00000a06 	br	81124694 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
8112466c:	11245600 	call	81124560 <alt_get_errno>
81124670:	1007883a 	mov	r3,r2
81124674:	00800344 	movi	r2,13
81124678:	18800015 	stw	r2,0(r3)
8112467c:	00000406 	br	81124690 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
81124680:	11245600 	call	81124560 <alt_get_errno>
81124684:	1007883a 	mov	r3,r2
81124688:	00801444 	movi	r2,81
8112468c:	18800015 	stw	r2,0(r3)
  }
  return -1;
81124690:	00bfffc4 	movi	r2,-1
}
81124694:	e037883a 	mov	sp,fp
81124698:	dfc00117 	ldw	ra,4(sp)
8112469c:	df000017 	ldw	fp,0(sp)
811246a0:	dec00204 	addi	sp,sp,8
811246a4:	f800283a 	ret

811246a8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
811246a8:	defffe04 	addi	sp,sp,-8
811246ac:	de00012e 	bgeu	sp,et,811246b4 <alt_release_fd+0xc>
811246b0:	003b68fa 	trap	3
811246b4:	df000115 	stw	fp,4(sp)
811246b8:	df000104 	addi	fp,sp,4
811246bc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
811246c0:	e0bfff17 	ldw	r2,-4(fp)
811246c4:	108000d0 	cmplti	r2,r2,3
811246c8:	10000d1e 	bne	r2,zero,81124700 <alt_release_fd+0x58>
  {
    alt_fd_list[fd].fd_flags = 0;
811246cc:	00a04534 	movhi	r2,33044
811246d0:	10b23d04 	addi	r2,r2,-14092
811246d4:	e0ffff17 	ldw	r3,-4(fp)
811246d8:	18c00324 	muli	r3,r3,12
811246dc:	10c5883a 	add	r2,r2,r3
811246e0:	10800204 	addi	r2,r2,8
811246e4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
811246e8:	00a04534 	movhi	r2,33044
811246ec:	10b23d04 	addi	r2,r2,-14092
811246f0:	e0ffff17 	ldw	r3,-4(fp)
811246f4:	18c00324 	muli	r3,r3,12
811246f8:	10c5883a 	add	r2,r2,r3
811246fc:	10000015 	stw	zero,0(r2)
  }
}
81124700:	0001883a 	nop
81124704:	e037883a 	mov	sp,fp
81124708:	df000017 	ldw	fp,0(sp)
8112470c:	dec00104 	addi	sp,sp,4
81124710:	f800283a 	ret

81124714 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
81124714:	defff604 	addi	sp,sp,-40
81124718:	de00012e 	bgeu	sp,et,81124720 <sbrk+0xc>
8112471c:	003b68fa 	trap	3
81124720:	df000915 	stw	fp,36(sp)
81124724:	df000904 	addi	fp,sp,36
81124728:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112472c:	0005303a 	rdctl	r2,status
81124730:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81124734:	e0fffe17 	ldw	r3,-8(fp)
81124738:	00bfff84 	movi	r2,-2
8112473c:	1884703a 	and	r2,r3,r2
81124740:	1001703a 	wrctl	status,r2
  
  return context;
81124744:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
81124748:	e0bff815 	stw	r2,-32(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
8112474c:	d0a01717 	ldw	r2,-32676(gp)
81124750:	10c000c4 	addi	r3,r2,3
81124754:	00bfff04 	movi	r2,-4
81124758:	1884703a 	and	r2,r3,r2
8112475c:	d0a01715 	stw	r2,-32676(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
81124760:	d0e01717 	ldw	r3,-32676(gp)
81124764:	e0bfff17 	ldw	r2,-4(fp)
81124768:	1887883a 	add	r3,r3,r2
8112476c:	00a04834 	movhi	r2,33056
81124770:	10a80004 	addi	r2,r2,-24576
81124774:	10c0062e 	bgeu	r2,r3,81124790 <sbrk+0x7c>
81124778:	e0bff817 	ldw	r2,-32(fp)
8112477c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81124780:	e0bff717 	ldw	r2,-36(fp)
81124784:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
81124788:	00bfffc4 	movi	r2,-1
8112478c:	00001c06 	br	81124800 <sbrk+0xec>
  }
#endif

  prev_heap_end = heap_end; 
81124790:	d0a01717 	ldw	r2,-32676(gp)
81124794:	e0bffa15 	stw	r2,-24(fp)
  heap_end += incr; 
81124798:	d0e01717 	ldw	r3,-32676(gp)
8112479c:	e0bfff17 	ldw	r2,-4(fp)
811247a0:	1885883a 	add	r2,r3,r2
811247a4:	d0a01715 	stw	r2,-32676(gp)
 */

static ALT_INLINE char * ALT_ALWAYS_INLINE alt_stack_limit (void)
{
  char * limit;
  NIOS2_READ_ET(limit);
811247a8:	c005883a 	mov	r2,et
811247ac:	e0bff915 	stw	r2,-28(fp)

  return limit; 
811247b0:	e0fff917 	ldw	r3,-28(fp)
   * pointer overflow. 
   * If the stack limit isn't pointing at the top of the heap then the code
   * is using a different stack so none of this needs to be done.
   */

  if (alt_stack_limit() == prev_heap_end)
811247b4:	e0bffa17 	ldw	r2,-24(fp)
811247b8:	18800c1e 	bne	r3,r2,811247ec <sbrk+0xd8>
 */

static ALT_INLINE char * ALT_ALWAYS_INLINE alt_stack_pointer (void)
{
  char * pointer;
  NIOS2_READ_SP(pointer);
811247bc:	d805883a 	mov	r2,sp
811247c0:	e0bffb15 	stw	r2,-20(fp)

  return pointer; 
811247c4:	e0bffb17 	ldw	r2,-20(fp)
  {
    if (alt_stack_pointer() <= heap_end)
811247c8:	d0e01717 	ldw	r3,-32676(gp)
811247cc:	18800136 	bltu	r3,r2,811247d4 <sbrk+0xc0>
 * alt_report_stack_overflow reports that a stack overflow happened.
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_report_stack_overflow (void)
{
  NIOS2_REPORT_STACK_OVERFLOW();
811247d0:	003da0fa 	break	3
      alt_report_stack_overflow();

    alt_set_stack_limit(heap_end);
811247d4:	d0a01717 	ldw	r2,-32676(gp)
811247d8:	e0bffc15 	stw	r2,-16(fp)
 * limit register.
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_set_stack_limit (char * limit)
{
  alt_stack_limit_value = limit;
811247dc:	e0bffc17 	ldw	r2,-16(fp)
811247e0:	d0a00015 	stw	r2,-32768(gp)
  NIOS2_WRITE_ET(limit);
811247e4:	e0bffc17 	ldw	r2,-16(fp)
811247e8:	1031883a 	mov	et,r2
811247ec:	e0bff817 	ldw	r2,-32(fp)
811247f0:	e0bffd15 	stw	r2,-12(fp)
811247f4:	e0bffd17 	ldw	r2,-12(fp)
811247f8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
811247fc:	e0bffa17 	ldw	r2,-24(fp)
} 
81124800:	e037883a 	mov	sp,fp
81124804:	df000017 	ldw	fp,0(sp)
81124808:	dec00104 	addi	sp,sp,4
8112480c:	f800283a 	ret

81124810 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
81124810:	defffa04 	addi	sp,sp,-24
81124814:	de00012e 	bgeu	sp,et,8112481c <alt_alarm_stop+0xc>
81124818:	003b68fa 	trap	3
8112481c:	df000515 	stw	fp,20(sp)
81124820:	df000504 	addi	fp,sp,20
81124824:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81124828:	0005303a 	rdctl	r2,status
8112482c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81124830:	e0fffc17 	ldw	r3,-16(fp)
81124834:	00bfff84 	movi	r2,-2
81124838:	1884703a 	and	r2,r3,r2
8112483c:	1001703a 	wrctl	status,r2
  
  return context;
81124840:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
81124844:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
81124848:	e0bfff17 	ldw	r2,-4(fp)
8112484c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
81124850:	e0bffd17 	ldw	r2,-12(fp)
81124854:	10800017 	ldw	r2,0(r2)
81124858:	e0fffd17 	ldw	r3,-12(fp)
8112485c:	18c00117 	ldw	r3,4(r3)
81124860:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
81124864:	e0bffd17 	ldw	r2,-12(fp)
81124868:	10800117 	ldw	r2,4(r2)
8112486c:	e0fffd17 	ldw	r3,-12(fp)
81124870:	18c00017 	ldw	r3,0(r3)
81124874:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
81124878:	e0bffd17 	ldw	r2,-12(fp)
8112487c:	e0fffd17 	ldw	r3,-12(fp)
81124880:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
81124884:	e0bffd17 	ldw	r2,-12(fp)
81124888:	e0fffd17 	ldw	r3,-12(fp)
8112488c:	10c00015 	stw	r3,0(r2)
81124890:	e0bffb17 	ldw	r2,-20(fp)
81124894:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81124898:	e0bffe17 	ldw	r2,-8(fp)
8112489c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
811248a0:	0001883a 	nop
811248a4:	e037883a 	mov	sp,fp
811248a8:	df000017 	ldw	fp,0(sp)
811248ac:	dec00104 	addi	sp,sp,4
811248b0:	f800283a 	ret

811248b4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
811248b4:	defffb04 	addi	sp,sp,-20
811248b8:	de00012e 	bgeu	sp,et,811248c0 <alt_tick+0xc>
811248bc:	003b68fa 	trap	3
811248c0:	dfc00415 	stw	ra,16(sp)
811248c4:	df000315 	stw	fp,12(sp)
811248c8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
811248cc:	d0a01817 	ldw	r2,-32672(gp)
811248d0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
811248d4:	d0a07717 	ldw	r2,-32292(gp)
811248d8:	10800044 	addi	r2,r2,1
811248dc:	d0a07715 	stw	r2,-32292(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
811248e0:	00002e06 	br	8112499c <alt_tick+0xe8>
  {
    next = (alt_alarm*) alarm->llist.next;
811248e4:	e0bffd17 	ldw	r2,-12(fp)
811248e8:	10800017 	ldw	r2,0(r2)
811248ec:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
811248f0:	e0bffd17 	ldw	r2,-12(fp)
811248f4:	10800403 	ldbu	r2,16(r2)
811248f8:	10803fcc 	andi	r2,r2,255
811248fc:	10000426 	beq	r2,zero,81124910 <alt_tick+0x5c>
81124900:	d0a07717 	ldw	r2,-32292(gp)
81124904:	1000021e 	bne	r2,zero,81124910 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
81124908:	e0bffd17 	ldw	r2,-12(fp)
8112490c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
81124910:	e0bffd17 	ldw	r2,-12(fp)
81124914:	10800217 	ldw	r2,8(r2)
81124918:	d0e07717 	ldw	r3,-32292(gp)
8112491c:	18801d36 	bltu	r3,r2,81124994 <alt_tick+0xe0>
81124920:	e0bffd17 	ldw	r2,-12(fp)
81124924:	10800403 	ldbu	r2,16(r2)
81124928:	10803fcc 	andi	r2,r2,255
8112492c:	1000191e 	bne	r2,zero,81124994 <alt_tick+0xe0>
    {
      next_callback = alarm->callback (alarm->context);
81124930:	e0bffd17 	ldw	r2,-12(fp)
81124934:	10800317 	ldw	r2,12(r2)
81124938:	e0fffd17 	ldw	r3,-12(fp)
8112493c:	18c00517 	ldw	r3,20(r3)
81124940:	1809883a 	mov	r4,r3
81124944:	103ee83a 	callr	r2
81124948:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
8112494c:	e0bfff17 	ldw	r2,-4(fp)
81124950:	1000031e 	bne	r2,zero,81124960 <alt_tick+0xac>
      {
        alt_alarm_stop (alarm);
81124954:	e13ffd17 	ldw	r4,-12(fp)
81124958:	11248100 	call	81124810 <alt_alarm_stop>
8112495c:	00000d06 	br	81124994 <alt_tick+0xe0>
      }
      else
      {
        alarm->time += next_callback;
81124960:	e0bffd17 	ldw	r2,-12(fp)
81124964:	10c00217 	ldw	r3,8(r2)
81124968:	e0bfff17 	ldw	r2,-4(fp)
8112496c:	1887883a 	add	r3,r3,r2
81124970:	e0bffd17 	ldw	r2,-12(fp)
81124974:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
81124978:	e0bffd17 	ldw	r2,-12(fp)
8112497c:	10c00217 	ldw	r3,8(r2)
81124980:	d0a07717 	ldw	r2,-32292(gp)
81124984:	1880032e 	bgeu	r3,r2,81124994 <alt_tick+0xe0>
        {
          alarm->rollover = 1;
81124988:	e0bffd17 	ldw	r2,-12(fp)
8112498c:	00c00044 	movi	r3,1
81124990:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
81124994:	e0bffe17 	ldw	r2,-8(fp)
81124998:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
8112499c:	e0fffd17 	ldw	r3,-12(fp)
811249a0:	d0a01804 	addi	r2,gp,-32672
811249a4:	18bfcf1e 	bne	r3,r2,811248e4 <__reset+0xfb1048e4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
811249a8:	1125c5c0 	call	81125c5c <OSTimeTick>
}
811249ac:	0001883a 	nop
811249b0:	e037883a 	mov	sp,fp
811249b4:	dfc00117 	ldw	ra,4(sp)
811249b8:	df000017 	ldw	fp,0(sp)
811249bc:	dec00204 	addi	sp,sp,8
811249c0:	f800283a 	ret

811249c4 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
811249c4:	defffb04 	addi	sp,sp,-20
811249c8:	de00012e 	bgeu	sp,et,811249d0 <usleep+0xc>
811249cc:	003b68fa 	trap	3
811249d0:	dfc00415 	stw	ra,16(sp)
811249d4:	df000315 	stw	fp,12(sp)
811249d8:	df000304 	addi	fp,sp,12
811249dc:	e13fff15 	stw	r4,-4(fp)
   * If the O/S hasn't started yet, then we delay using a busy loop, rather than
   * OSTimeDly (since this would fail). The use of a busy loop is acceptable,
   * since the system is still running in a single-threaded mode.
   */ 

  if (OSRunning == OS_FALSE)
811249e0:	d0a07f03 	ldbu	r2,-32260(gp)
811249e4:	10803fcc 	andi	r2,r2,255
811249e8:	1000031e 	bne	r2,zero,811249f8 <usleep+0x34>
  {
    return alt_busy_sleep (us);
811249ec:	e13fff17 	ldw	r4,-4(fp)
811249f0:	1137d280 	call	81137d28 <alt_busy_sleep>
811249f4:	00003d06 	br	81124aec <usleep+0x128>
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
811249f8:	d0a07617 	ldw	r2,-32296(gp)

  /* 
   * Calculate the number of whole system clock ticks to delay.
   */

  tick_rate = alt_ticks_per_second ();
811249fc:	e0bffe15 	stw	r2,-8(fp)
  ticks     = (us/ALT_US)* tick_rate + ((us%ALT_US)*tick_rate)/ALT_US;
81124a00:	e0ffff17 	ldw	r3,-4(fp)
81124a04:	0090c734 	movhi	r2,17180
81124a08:	10b7a0c4 	addi	r2,r2,-8573
81124a0c:	1888383a 	mulxuu	r4,r3,r2
81124a10:	1885383a 	mul	r2,r3,r2
81124a14:	1013883a 	mov	r9,r2
81124a18:	2015883a 	mov	r10,r4
81124a1c:	5006d4ba 	srli	r3,r10,18
81124a20:	e0bffe17 	ldw	r2,-8(fp)
81124a24:	1893383a 	mul	r9,r3,r2
81124a28:	e0ffff17 	ldw	r3,-4(fp)
81124a2c:	0090c734 	movhi	r2,17180
81124a30:	10b7a0c4 	addi	r2,r2,-8573
81124a34:	1888383a 	mulxuu	r4,r3,r2
81124a38:	1885383a 	mul	r2,r3,r2
81124a3c:	100f883a 	mov	r7,r2
81124a40:	2011883a 	mov	r8,r4
81124a44:	4004d4ba 	srli	r2,r8,18
81124a48:	010003f4 	movhi	r4,15
81124a4c:	21109004 	addi	r4,r4,16960
81124a50:	1105383a 	mul	r2,r2,r4
81124a54:	1885c83a 	sub	r2,r3,r2
81124a58:	e0fffe17 	ldw	r3,-8(fp)
81124a5c:	10c7383a 	mul	r3,r2,r3
81124a60:	0090c734 	movhi	r2,17180
81124a64:	10b7a0c4 	addi	r2,r2,-8573
81124a68:	1888383a 	mulxuu	r4,r3,r2
81124a6c:	1885383a 	mul	r2,r3,r2
81124a70:	100b883a 	mov	r5,r2
81124a74:	200d883a 	mov	r6,r4
81124a78:	3004d4ba 	srli	r2,r6,18
81124a7c:	4885883a 	add	r2,r9,r2
81124a80:	e0bffd15 	stw	r2,-12(fp)
   * OSTimeDly can only delay for a maximum of 0xffff ticks, so if the requested
   * delay is greater than that, we need to break it down into a number of
   * seperate delays.
   */

  while (ticks > 0xffff)
81124a84:	00000706 	br	81124aa4 <usleep+0xe0>
  {
    OSTimeDly(0xffff);
81124a88:	013fffd4 	movui	r4,65535
81124a8c:	112d6cc0 	call	8112d6cc <OSTimeDly>
    ticks -= 0xffff;
81124a90:	e0fffd17 	ldw	r3,-12(fp)
81124a94:	00bffff4 	movhi	r2,65535
81124a98:	10800044 	addi	r2,r2,1
81124a9c:	1885883a 	add	r2,r3,r2
81124aa0:	e0bffd15 	stw	r2,-12(fp)
   * OSTimeDly can only delay for a maximum of 0xffff ticks, so if the requested
   * delay is greater than that, we need to break it down into a number of
   * seperate delays.
   */

  while (ticks > 0xffff)
81124aa4:	e0bffd17 	ldw	r2,-12(fp)
81124aa8:	00ffffd4 	movui	r3,65535
81124aac:	18bff636 	bltu	r3,r2,81124a88 <__reset+0xfb104a88>
  {
    OSTimeDly(0xffff);
    ticks -= 0xffff;
  }

  OSTimeDly ((INT16U) (ticks));
81124ab0:	e0bffd17 	ldw	r2,-12(fp)
81124ab4:	10bfffcc 	andi	r2,r2,65535
81124ab8:	1009883a 	mov	r4,r2
81124abc:	112d6cc0 	call	8112d6cc <OSTimeDly>
  /*
   * Now delay by the remainder using a busy loop. This is here in order to
   * provide very short delays of less than one clock tick.
   */

  alt_busy_sleep (us%(ALT_US/tick_rate));  
81124ac0:	008003f4 	movhi	r2,15
81124ac4:	10909004 	addi	r2,r2,16960
81124ac8:	e0fffe17 	ldw	r3,-8(fp)
81124acc:	10c7203a 	divu	r3,r2,r3
81124ad0:	e0bfff17 	ldw	r2,-4(fp)
81124ad4:	10c9203a 	divu	r4,r2,r3
81124ad8:	20c7383a 	mul	r3,r4,r3
81124adc:	10c5c83a 	sub	r2,r2,r3
81124ae0:	1009883a 	mov	r4,r2
81124ae4:	1137d280 	call	81137d28 <alt_busy_sleep>

  return 0;  
81124ae8:	0005883a 	mov	r2,zero
}
81124aec:	e037883a 	mov	sp,fp
81124af0:	dfc00117 	ldw	ra,4(sp)
81124af4:	df000017 	ldw	fp,0(sp)
81124af8:	dec00204 	addi	sp,sp,8
81124afc:	f800283a 	ret

81124b00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81124b00:	defffe04 	addi	sp,sp,-8
81124b04:	de00012e 	bgeu	sp,et,81124b0c <alt_get_errno+0xc>
81124b08:	003b68fa 	trap	3
81124b0c:	dfc00115 	stw	ra,4(sp)
81124b10:	df000015 	stw	fp,0(sp)
81124b14:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81124b18:	d0a01617 	ldw	r2,-32680(gp)
81124b1c:	10000326 	beq	r2,zero,81124b2c <alt_get_errno+0x2c>
81124b20:	d0a01617 	ldw	r2,-32680(gp)
81124b24:	103ee83a 	callr	r2
81124b28:	00000106 	br	81124b30 <alt_get_errno+0x30>
81124b2c:	d0a06b04 	addi	r2,gp,-32340
}
81124b30:	e037883a 	mov	sp,fp
81124b34:	dfc00117 	ldw	ra,4(sp)
81124b38:	df000017 	ldw	fp,0(sp)
81124b3c:	dec00204 	addi	sp,sp,8
81124b40:	f800283a 	ret

81124b44 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
81124b44:	defff904 	addi	sp,sp,-28
81124b48:	de00012e 	bgeu	sp,et,81124b50 <write+0xc>
81124b4c:	003b68fa 	trap	3
81124b50:	dfc00615 	stw	ra,24(sp)
81124b54:	df000515 	stw	fp,20(sp)
81124b58:	df000504 	addi	fp,sp,20
81124b5c:	e13ffd15 	stw	r4,-12(fp)
81124b60:	e17ffe15 	stw	r5,-8(fp)
81124b64:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
81124b68:	e0bffd17 	ldw	r2,-12(fp)
81124b6c:	10000616 	blt	r2,zero,81124b88 <write+0x44>
81124b70:	e0bffd17 	ldw	r2,-12(fp)
81124b74:	10c00324 	muli	r3,r2,12
81124b78:	00a04534 	movhi	r2,33044
81124b7c:	10b23d04 	addi	r2,r2,-14092
81124b80:	1885883a 	add	r2,r3,r2
81124b84:	00000106 	br	81124b8c <write+0x48>
81124b88:	0005883a 	mov	r2,zero
81124b8c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
81124b90:	e0bffb17 	ldw	r2,-20(fp)
81124b94:	10002126 	beq	r2,zero,81124c1c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
81124b98:	e0bffb17 	ldw	r2,-20(fp)
81124b9c:	10800217 	ldw	r2,8(r2)
81124ba0:	108000cc 	andi	r2,r2,3
81124ba4:	10001826 	beq	r2,zero,81124c08 <write+0xc4>
81124ba8:	e0bffb17 	ldw	r2,-20(fp)
81124bac:	10800017 	ldw	r2,0(r2)
81124bb0:	10800617 	ldw	r2,24(r2)
81124bb4:	10001426 	beq	r2,zero,81124c08 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
81124bb8:	e0bffb17 	ldw	r2,-20(fp)
81124bbc:	10800017 	ldw	r2,0(r2)
81124bc0:	10800617 	ldw	r2,24(r2)
81124bc4:	e0ffff17 	ldw	r3,-4(fp)
81124bc8:	180d883a 	mov	r6,r3
81124bcc:	e17ffe17 	ldw	r5,-8(fp)
81124bd0:	e13ffb17 	ldw	r4,-20(fp)
81124bd4:	103ee83a 	callr	r2
81124bd8:	e0bffc15 	stw	r2,-16(fp)
81124bdc:	e0bffc17 	ldw	r2,-16(fp)
81124be0:	1000070e 	bge	r2,zero,81124c00 <write+0xbc>
      {
        ALT_ERRNO = -rval;
81124be4:	1124b000 	call	81124b00 <alt_get_errno>
81124be8:	1007883a 	mov	r3,r2
81124bec:	e0bffc17 	ldw	r2,-16(fp)
81124bf0:	0085c83a 	sub	r2,zero,r2
81124bf4:	18800015 	stw	r2,0(r3)
        return -1;
81124bf8:	00bfffc4 	movi	r2,-1
81124bfc:	00000c06 	br	81124c30 <write+0xec>
      }
      return rval;
81124c00:	e0bffc17 	ldw	r2,-16(fp)
81124c04:	00000a06 	br	81124c30 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
81124c08:	1124b000 	call	81124b00 <alt_get_errno>
81124c0c:	1007883a 	mov	r3,r2
81124c10:	00800344 	movi	r2,13
81124c14:	18800015 	stw	r2,0(r3)
81124c18:	00000406 	br	81124c2c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
81124c1c:	1124b000 	call	81124b00 <alt_get_errno>
81124c20:	1007883a 	mov	r3,r2
81124c24:	00801444 	movi	r2,81
81124c28:	18800015 	stw	r2,0(r3)
  }
  return -1;
81124c2c:	00bfffc4 	movi	r2,-1
}
81124c30:	e037883a 	mov	sp,fp
81124c34:	dfc00117 	ldw	ra,4(sp)
81124c38:	df000017 	ldw	fp,0(sp)
81124c3c:	dec00204 	addi	sp,sp,8
81124c40:	f800283a 	ret

81124c44 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
81124c44:	deffde04 	addi	sp,sp,-136
81124c48:	de00012e 	bgeu	sp,et,81124c50 <__env_lock+0xc>
81124c4c:	003b68fa 	trap	3
81124c50:	dfc02115 	stw	ra,132(sp)
81124c54:	df002015 	stw	fp,128(sp)
81124c58:	df002004 	addi	fp,sp,128
81124c5c:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
81124c60:	e0bfe104 	addi	r2,fp,-124
81124c64:	100b883a 	mov	r5,r2
81124c68:	01003fc4 	movi	r4,255
81124c6c:	112d5280 	call	8112d528 <OSTaskQuery>
81124c70:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
81124c74:	e0bffe83 	ldbu	r2,-6(fp)
81124c78:	10803fcc 	andi	r2,r2,255
81124c7c:	10001e1e 	bne	r2,zero,81124cf8 <__env_lock+0xb4>
    return;

  id = tcb.OSTCBPrio;
81124c80:	e0bfed83 	ldbu	r2,-74(fp)
81124c84:	10803fcc 	andi	r2,r2,255
81124c88:	e0bfe015 	stw	r2,-128(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
81124c8c:	d0a07917 	ldw	r2,-32284(gp)
81124c90:	e0fffc04 	addi	r3,fp,-16
81124c94:	180b883a 	mov	r5,r3
81124c98:	1009883a 	mov	r4,r2
81124c9c:	112bce00 	call	8112bce0 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
81124ca0:	e0bffe03 	ldbu	r2,-8(fp)
81124ca4:	10803fcc 	andi	r2,r2,255
81124ca8:	10000726 	beq	r2,zero,81124cc8 <__env_lock+0x84>
81124cac:	d0a01a17 	ldw	r2,-32664(gp)
81124cb0:	e0ffe017 	ldw	r3,-128(fp)
81124cb4:	1880041e 	bne	r3,r2,81124cc8 <__env_lock+0x84>
  {
    /* we do; just count the recursion */

    locks++;
81124cb8:	d0a07817 	ldw	r2,-32288(gp)
81124cbc:	10800044 	addi	r2,r2,1
81124cc0:	d0a07815 	stw	r2,-32288(gp)
81124cc4:	00000a06 	br	81124cf0 <__env_lock+0xac>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
81124cc8:	d0a07917 	ldw	r2,-32284(gp)
81124ccc:	e0fffe84 	addi	r3,fp,-6
81124cd0:	180d883a 	mov	r6,r3
81124cd4:	000b883a 	mov	r5,zero
81124cd8:	1009883a 	mov	r4,r2
81124cdc:	112b8400 	call	8112b840 <OSSemPend>
    locks  = 1;
81124ce0:	00800044 	movi	r2,1
81124ce4:	d0a07815 	stw	r2,-32288(gp)
    lockid = id;
81124ce8:	e0bfe017 	ldw	r2,-128(fp)
81124cec:	d0a01a15 	stw	r2,-32664(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
81124cf0:	0001883a 	nop
81124cf4:	00000106 	br	81124cfc <__env_lock+0xb8>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
81124cf8:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
81124cfc:	e037883a 	mov	sp,fp
81124d00:	dfc00117 	ldw	ra,4(sp)
81124d04:	df000017 	ldw	fp,0(sp)
81124d08:	dec00204 	addi	sp,sp,8
81124d0c:	f800283a 	ret

81124d10 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
81124d10:	defffd04 	addi	sp,sp,-12
81124d14:	de00012e 	bgeu	sp,et,81124d1c <__env_unlock+0xc>
81124d18:	003b68fa 	trap	3
81124d1c:	dfc00215 	stw	ra,8(sp)
81124d20:	df000115 	stw	fp,4(sp)
81124d24:	df000104 	addi	fp,sp,4
81124d28:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
81124d2c:	d0a07817 	ldw	r2,-32288(gp)
81124d30:	10000b26 	beq	r2,zero,81124d60 <__env_unlock+0x50>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
81124d34:	d0a07817 	ldw	r2,-32288(gp)
81124d38:	10bfffc4 	addi	r2,r2,-1
81124d3c:	d0a07815 	stw	r2,-32288(gp)
81124d40:	d0a07817 	ldw	r2,-32288(gp)
81124d44:	1000071e 	bne	r2,zero,81124d64 <__env_unlock+0x54>
  {
    lockid = -1;
81124d48:	00bfffc4 	movi	r2,-1
81124d4c:	d0a01a15 	stw	r2,-32664(gp)
    OSSemPost( alt_envsem );
81124d50:	d0a07917 	ldw	r2,-32284(gp)
81124d54:	1009883a 	mov	r4,r2
81124d58:	112bbc80 	call	8112bbc8 <OSSemPost>
81124d5c:	00000106 	br	81124d64 <__env_unlock+0x54>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
81124d60:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
81124d64:	e037883a 	mov	sp,fp
81124d68:	dfc00117 	ldw	ra,4(sp)
81124d6c:	df000017 	ldw	fp,0(sp)
81124d70:	dec00204 	addi	sp,sp,8
81124d74:	f800283a 	ret

81124d78 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
81124d78:	deffda04 	addi	sp,sp,-152
81124d7c:	de00012e 	bgeu	sp,et,81124d84 <__malloc_lock+0xc>
81124d80:	003b68fa 	trap	3
81124d84:	dfc02515 	stw	ra,148(sp)
81124d88:	df002415 	stw	fp,144(sp)
81124d8c:	df002404 	addi	fp,sp,144
81124d90:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81124d94:	e03fdc15 	stw	zero,-144(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
81124d98:	d0a07f03 	ldbu	r2,-32260(gp)
81124d9c:	10803fcc 	andi	r2,r2,255
81124da0:	10800060 	cmpeqi	r2,r2,1
81124da4:	10003626 	beq	r2,zero,81124e80 <__malloc_lock+0x108>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
81124da8:	e0bfe104 	addi	r2,fp,-124
81124dac:	100b883a 	mov	r5,r2
81124db0:	01003fc4 	movi	r4,255
81124db4:	112d5280 	call	8112d528 <OSTaskQuery>
81124db8:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
81124dbc:	e0bffe83 	ldbu	r2,-6(fp)
81124dc0:	10803fcc 	andi	r2,r2,255
81124dc4:	1000301e 	bne	r2,zero,81124e88 <__malloc_lock+0x110>
    return;

  id = tcb.OSTCBPrio;
81124dc8:	e0bfed83 	ldbu	r2,-74(fp)
81124dcc:	10803fcc 	andi	r2,r2,255
81124dd0:	e0bfdd15 	stw	r2,-140(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
81124dd4:	d0a07b17 	ldw	r2,-32276(gp)
81124dd8:	e0fffc04 	addi	r3,fp,-16
81124ddc:	180b883a 	mov	r5,r3
81124de0:	1009883a 	mov	r4,r2
81124de4:	112bce00 	call	8112bce0 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81124de8:	0005303a 	rdctl	r2,status
81124dec:	e0bfe015 	stw	r2,-128(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81124df0:	e0ffe017 	ldw	r3,-128(fp)
81124df4:	00bfff84 	movi	r2,-2
81124df8:	1884703a 	and	r2,r3,r2
81124dfc:	1001703a 	wrctl	status,r2
  
  return context;
81124e00:	e0bfe017 	ldw	r2,-128(fp)
  
  OS_ENTER_CRITICAL();
81124e04:	e0bfdc15 	stw	r2,-144(fp)

  if( !semdata.OSCnt && id == lockid ) 
81124e08:	e0bffc0b 	ldhu	r2,-16(fp)
81124e0c:	10bfffcc 	andi	r2,r2,65535
81124e10:	10000b1e 	bne	r2,zero,81124e40 <__malloc_lock+0xc8>
81124e14:	d0a01b17 	ldw	r2,-32660(gp)
81124e18:	e0ffdd17 	ldw	r3,-140(fp)
81124e1c:	1880081e 	bne	r3,r2,81124e40 <__malloc_lock+0xc8>
  {
    /* we do; just count the recursion */
    locks++;
81124e20:	d0a07a17 	ldw	r2,-32280(gp)
81124e24:	10800044 	addi	r2,r2,1
81124e28:	d0a07a15 	stw	r2,-32280(gp)
81124e2c:	e0bfdc17 	ldw	r2,-144(fp)
81124e30:	e0bfde15 	stw	r2,-136(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81124e34:	e0bfde17 	ldw	r2,-136(fp)
81124e38:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
81124e3c:	00000e06 	br	81124e78 <__malloc_lock+0x100>
81124e40:	e0bfdc17 	ldw	r2,-144(fp)
81124e44:	e0bfdf15 	stw	r2,-132(fp)
81124e48:	e0bfdf17 	ldw	r2,-132(fp)
81124e4c:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
81124e50:	d0a07b17 	ldw	r2,-32276(gp)
81124e54:	e0fffe84 	addi	r3,fp,-6
81124e58:	180d883a 	mov	r6,r3
81124e5c:	000b883a 	mov	r5,zero
81124e60:	1009883a 	mov	r4,r2
81124e64:	112b8400 	call	8112b840 <OSSemPend>
    locks  = 1;
81124e68:	00800044 	movi	r2,1
81124e6c:	d0a07a15 	stw	r2,-32280(gp)
    lockid = id;
81124e70:	e0bfdd17 	ldw	r2,-140(fp)
81124e74:	d0a01b15 	stw	r2,-32660(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
81124e78:	0001883a 	nop
81124e7c:	00000306 	br	81124e8c <__malloc_lock+0x114>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
81124e80:	0001883a 	nop
81124e84:	00000106 	br	81124e8c <__malloc_lock+0x114>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
81124e88:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
81124e8c:	e037883a 	mov	sp,fp
81124e90:	dfc00117 	ldw	ra,4(sp)
81124e94:	df000017 	ldw	fp,0(sp)
81124e98:	dec00204 	addi	sp,sp,8
81124e9c:	f800283a 	ret

81124ea0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
81124ea0:	defff804 	addi	sp,sp,-32
81124ea4:	de00012e 	bgeu	sp,et,81124eac <__malloc_unlock+0xc>
81124ea8:	003b68fa 	trap	3
81124eac:	dfc00715 	stw	ra,28(sp)
81124eb0:	df000615 	stw	fp,24(sp)
81124eb4:	df000604 	addi	fp,sp,24
81124eb8:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81124ebc:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
81124ec0:	d0a07f03 	ldbu	r2,-32260(gp)
81124ec4:	10803fcc 	andi	r2,r2,255
81124ec8:	10800060 	cmpeqi	r2,r2,1
81124ecc:	10002326 	beq	r2,zero,81124f5c <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81124ed0:	0005303a 	rdctl	r2,status
81124ed4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81124ed8:	e0fffe17 	ldw	r3,-8(fp)
81124edc:	00bfff84 	movi	r2,-2
81124ee0:	1884703a 	and	r2,r3,r2
81124ee4:	1001703a 	wrctl	status,r2
  
  return context;
81124ee8:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
81124eec:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
81124ef0:	d0a07a17 	ldw	r2,-32280(gp)
81124ef4:	1000051e 	bne	r2,zero,81124f0c <__malloc_unlock+0x6c>
81124ef8:	e0bffa17 	ldw	r2,-24(fp)
81124efc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81124f00:	e0bffb17 	ldw	r2,-20(fp)
81124f04:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
81124f08:	00001506 	br	81124f60 <__malloc_unlock+0xc0>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
81124f0c:	d0a07a17 	ldw	r2,-32280(gp)
81124f10:	10bfffc4 	addi	r2,r2,-1
81124f14:	d0a07a15 	stw	r2,-32280(gp)
81124f18:	d0a07a17 	ldw	r2,-32280(gp)
81124f1c:	10000a1e 	bne	r2,zero,81124f48 <__malloc_unlock+0xa8>
  {
    lockid = -1;
81124f20:	00bfffc4 	movi	r2,-1
81124f24:	d0a01b15 	stw	r2,-32660(gp)
81124f28:	e0bffa17 	ldw	r2,-24(fp)
81124f2c:	e0bffc15 	stw	r2,-16(fp)
81124f30:	e0bffc17 	ldw	r2,-16(fp)
81124f34:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
81124f38:	d0a07b17 	ldw	r2,-32276(gp)
81124f3c:	1009883a 	mov	r4,r2
81124f40:	112bbc80 	call	8112bbc8 <OSSemPost>
81124f44:	00000606 	br	81124f60 <__malloc_unlock+0xc0>
81124f48:	e0bffa17 	ldw	r2,-24(fp)
81124f4c:	e0bffd15 	stw	r2,-12(fp)
81124f50:	e0bffd17 	ldw	r2,-12(fp)
81124f54:	1001703a 	wrctl	status,r2
81124f58:	00000106 	br	81124f60 <__malloc_unlock+0xc0>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
81124f5c:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
81124f60:	e037883a 	mov	sp,fp
81124f64:	dfc00117 	ldw	ra,4(sp)
81124f68:	df000017 	ldw	fp,0(sp)
81124f6c:	dec00204 	addi	sp,sp,8
81124f70:	f800283a 	ret

81124f74 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
81124f74:	defff704 	addi	sp,sp,-36
81124f78:	de00012e 	bgeu	sp,et,81124f80 <OSEventNameGet+0xc>
81124f7c:	003b68fa 	trap	3
81124f80:	dfc00815 	stw	ra,32(sp)
81124f84:	df000715 	stw	fp,28(sp)
81124f88:	df000704 	addi	fp,sp,28
81124f8c:	e13ffd15 	stw	r4,-12(fp)
81124f90:	e17ffe15 	stw	r5,-8(fp)
81124f94:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81124f98:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
81124f9c:	e0bfff17 	ldw	r2,-4(fp)
81124fa0:	1000021e 	bne	r2,zero,81124fac <OSEventNameGet+0x38>
        return (0);
81124fa4:	0005883a 	mov	r2,zero
81124fa8:	00003706 	br	81125088 <OSEventNameGet+0x114>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
81124fac:	e0bffd17 	ldw	r2,-12(fp)
81124fb0:	1000051e 	bne	r2,zero,81124fc8 <OSEventNameGet+0x54>
        *perr = OS_ERR_PEVENT_NULL;
81124fb4:	e0bfff17 	ldw	r2,-4(fp)
81124fb8:	00c00104 	movi	r3,4
81124fbc:	10c00005 	stb	r3,0(r2)
        return (0);
81124fc0:	0005883a 	mov	r2,zero
81124fc4:	00003006 	br	81125088 <OSEventNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
81124fc8:	e0bffe17 	ldw	r2,-8(fp)
81124fcc:	1000051e 	bne	r2,zero,81124fe4 <OSEventNameGet+0x70>
        *perr = OS_ERR_PNAME_NULL;
81124fd0:	e0bfff17 	ldw	r2,-4(fp)
81124fd4:	00c00304 	movi	r3,12
81124fd8:	10c00005 	stb	r3,0(r2)
        return (0);
81124fdc:	0005883a 	mov	r2,zero
81124fe0:	00002906 	br	81125088 <OSEventNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
81124fe4:	d0a08f03 	ldbu	r2,-32196(gp)
81124fe8:	10803fcc 	andi	r2,r2,255
81124fec:	10000526 	beq	r2,zero,81125004 <OSEventNameGet+0x90>
        *perr  = OS_ERR_NAME_GET_ISR;
81124ff0:	e0bfff17 	ldw	r2,-4(fp)
81124ff4:	00c00444 	movi	r3,17
81124ff8:	10c00005 	stb	r3,0(r2)
        return (0);
81124ffc:	0005883a 	mov	r2,zero
81125000:	00002106 	br	81125088 <OSEventNameGet+0x114>
    }
    switch (pevent->OSEventType) {
81125004:	e0bffd17 	ldw	r2,-12(fp)
81125008:	10800003 	ldbu	r2,0(r2)
8112500c:	10803fcc 	andi	r2,r2,255
81125010:	10bfffc4 	addi	r2,r2,-1
81125014:	10800128 	cmpgeui	r2,r2,4
81125018:	10000526 	beq	r2,zero,81125030 <OSEventNameGet+0xbc>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
8112501c:	e0bfff17 	ldw	r2,-4(fp)
81125020:	00c00044 	movi	r3,1
81125024:	10c00005 	stb	r3,0(r2)
             return (0);
81125028:	0005883a 	mov	r2,zero
8112502c:	00001606 	br	81125088 <OSEventNameGet+0x114>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
81125030:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81125034:	0005303a 	rdctl	r2,status
81125038:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112503c:	e0fffb17 	ldw	r3,-20(fp)
81125040:	00bfff84 	movi	r2,-2
81125044:	1884703a 	and	r2,r3,r2
81125048:	1001703a 	wrctl	status,r2
  
  return context;
8112504c:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
81125050:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
81125054:	e0bffd17 	ldw	r2,-12(fp)
81125058:	10800444 	addi	r2,r2,17
8112505c:	100b883a 	mov	r5,r2
81125060:	e13ffe17 	ldw	r4,-8(fp)
81125064:	1126ae40 	call	81126ae4 <OS_StrCopy>
81125068:	e0bffa05 	stb	r2,-24(fp)
8112506c:	e0bff917 	ldw	r2,-28(fp)
81125070:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81125074:	e0bffc17 	ldw	r2,-16(fp)
81125078:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112507c:	e0bfff17 	ldw	r2,-4(fp)
81125080:	10000005 	stb	zero,0(r2)
    return (len);
81125084:	e0bffa03 	ldbu	r2,-24(fp)
}
81125088:	e037883a 	mov	sp,fp
8112508c:	dfc00117 	ldw	ra,4(sp)
81125090:	df000017 	ldw	fp,0(sp)
81125094:	dec00204 	addi	sp,sp,8
81125098:	f800283a 	ret

8112509c <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
8112509c:	defff604 	addi	sp,sp,-40
811250a0:	de00012e 	bgeu	sp,et,811250a8 <OSEventNameSet+0xc>
811250a4:	003b68fa 	trap	3
811250a8:	dfc00915 	stw	ra,36(sp)
811250ac:	df000815 	stw	fp,32(sp)
811250b0:	df000804 	addi	fp,sp,32
811250b4:	e13ffd15 	stw	r4,-12(fp)
811250b8:	e17ffe15 	stw	r5,-8(fp)
811250bc:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
811250c0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
811250c4:	e0bfff17 	ldw	r2,-4(fp)
811250c8:	10004026 	beq	r2,zero,811251cc <OSEventNameSet+0x130>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
811250cc:	e0bffd17 	ldw	r2,-12(fp)
811250d0:	1000041e 	bne	r2,zero,811250e4 <OSEventNameSet+0x48>
        *perr = OS_ERR_PEVENT_NULL;
811250d4:	e0bfff17 	ldw	r2,-4(fp)
811250d8:	00c00104 	movi	r3,4
811250dc:	10c00005 	stb	r3,0(r2)
        return;
811250e0:	00003b06 	br	811251d0 <OSEventNameSet+0x134>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
811250e4:	e0bffe17 	ldw	r2,-8(fp)
811250e8:	1000041e 	bne	r2,zero,811250fc <OSEventNameSet+0x60>
        *perr = OS_ERR_PNAME_NULL;
811250ec:	e0bfff17 	ldw	r2,-4(fp)
811250f0:	00c00304 	movi	r3,12
811250f4:	10c00005 	stb	r3,0(r2)
        return;
811250f8:	00003506 	br	811251d0 <OSEventNameSet+0x134>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
811250fc:	d0a08f03 	ldbu	r2,-32196(gp)
81125100:	10803fcc 	andi	r2,r2,255
81125104:	10000426 	beq	r2,zero,81125118 <OSEventNameSet+0x7c>
        *perr = OS_ERR_NAME_SET_ISR;
81125108:	e0bfff17 	ldw	r2,-4(fp)
8112510c:	00c00484 	movi	r3,18
81125110:	10c00005 	stb	r3,0(r2)
        return;
81125114:	00002e06 	br	811251d0 <OSEventNameSet+0x134>
    }
    switch (pevent->OSEventType) {
81125118:	e0bffd17 	ldw	r2,-12(fp)
8112511c:	10800003 	ldbu	r2,0(r2)
81125120:	10803fcc 	andi	r2,r2,255
81125124:	10bfffc4 	addi	r2,r2,-1
81125128:	10800128 	cmpgeui	r2,r2,4
8112512c:	10000426 	beq	r2,zero,81125140 <OSEventNameSet+0xa4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
81125130:	e0bfff17 	ldw	r2,-4(fp)
81125134:	00c00044 	movi	r3,1
81125138:	10c00005 	stb	r3,0(r2)
             return;
8112513c:	00002406 	br	811251d0 <OSEventNameSet+0x134>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
81125140:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81125144:	0005303a 	rdctl	r2,status
81125148:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112514c:	e0fffc17 	ldw	r3,-16(fp)
81125150:	00bfff84 	movi	r2,-2
81125154:	1884703a 	and	r2,r3,r2
81125158:	1001703a 	wrctl	status,r2
  
  return context;
8112515c:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
81125160:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
81125164:	e13ffe17 	ldw	r4,-8(fp)
81125168:	1126b600 	call	81126b60 <OS_StrLen>
8112516c:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
81125170:	e0bffa03 	ldbu	r2,-24(fp)
81125174:	10800830 	cmpltui	r2,r2,32
81125178:	1000081e 	bne	r2,zero,8112519c <OSEventNameSet+0x100>
8112517c:	e0bff817 	ldw	r2,-32(fp)
81125180:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81125184:	e0bff917 	ldw	r2,-28(fp)
81125188:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
8112518c:	e0bfff17 	ldw	r2,-4(fp)
81125190:	00c002c4 	movi	r3,11
81125194:	10c00005 	stb	r3,0(r2)
        return;
81125198:	00000d06 	br	811251d0 <OSEventNameSet+0x134>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
8112519c:	e0bffd17 	ldw	r2,-12(fp)
811251a0:	10800444 	addi	r2,r2,17
811251a4:	e17ffe17 	ldw	r5,-8(fp)
811251a8:	1009883a 	mov	r4,r2
811251ac:	1126ae40 	call	81126ae4 <OS_StrCopy>
811251b0:	e0bff817 	ldw	r2,-32(fp)
811251b4:	e0bffb15 	stw	r2,-20(fp)
811251b8:	e0bffb17 	ldw	r2,-20(fp)
811251bc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
811251c0:	e0bfff17 	ldw	r2,-4(fp)
811251c4:	10000005 	stb	zero,0(r2)
811251c8:	00000106 	br	811251d0 <OSEventNameSet+0x134>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
811251cc:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
811251d0:	e037883a 	mov	sp,fp
811251d4:	dfc00117 	ldw	ra,4(sp)
811251d8:	df000017 	ldw	fp,0(sp)
811251dc:	dec00204 	addi	sp,sp,8
811251e0:	f800283a 	ret

811251e4 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
811251e4:	deffed04 	addi	sp,sp,-76
811251e8:	de00012e 	bgeu	sp,et,811251f0 <OSEventPendMulti+0xc>
811251ec:	003b68fa 	trap	3
811251f0:	dfc01215 	stw	ra,72(sp)
811251f4:	df001115 	stw	fp,68(sp)
811251f8:	df001104 	addi	fp,sp,68
811251fc:	e13ffc15 	stw	r4,-16(fp)
81125200:	e17ffd15 	stw	r5,-12(fp)
81125204:	e1bffe15 	stw	r6,-8(fp)
81125208:	3805883a 	mov	r2,r7
8112520c:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
81125210:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
81125214:	e0800217 	ldw	r2,8(fp)
81125218:	1000021e 	bne	r2,zero,81125224 <OSEventPendMulti+0x40>
        return (0);
8112521c:	0005883a 	mov	r2,zero
81125220:	00017106 	br	811257e8 <OSEventPendMulti+0x604>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
81125224:	e0bffc17 	ldw	r2,-16(fp)
81125228:	1000051e 	bne	r2,zero,81125240 <OSEventPendMulti+0x5c>
       *perr =  OS_ERR_PEVENT_NULL;
8112522c:	e0800217 	ldw	r2,8(fp)
81125230:	00c00104 	movi	r3,4
81125234:	10c00005 	stb	r3,0(r2)
        return (0);
81125238:	0005883a 	mov	r2,zero
8112523c:	00016a06 	br	811257e8 <OSEventPendMulti+0x604>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
81125240:	e0bffd17 	ldw	r2,-12(fp)
81125244:	1000051e 	bne	r2,zero,8112525c <OSEventPendMulti+0x78>
       *perr =  OS_ERR_PEVENT_NULL;
81125248:	e0800217 	ldw	r2,8(fp)
8112524c:	00c00104 	movi	r3,4
81125250:	10c00005 	stb	r3,0(r2)
        return (0);
81125254:	0005883a 	mov	r2,zero
81125258:	00016306 	br	811257e8 <OSEventPendMulti+0x604>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
8112525c:	e0bffe17 	ldw	r2,-8(fp)
81125260:	1000051e 	bne	r2,zero,81125278 <OSEventPendMulti+0x94>
       *perr =  OS_ERR_PEVENT_NULL;
81125264:	e0800217 	ldw	r2,8(fp)
81125268:	00c00104 	movi	r3,4
8112526c:	10c00005 	stb	r3,0(r2)
        return (0);
81125270:	0005883a 	mov	r2,zero
81125274:	00015c06 	br	811257e8 <OSEventPendMulti+0x604>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
81125278:	e0bffd17 	ldw	r2,-12(fp)
8112527c:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
81125280:	e0bffc17 	ldw	r2,-16(fp)
81125284:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
81125288:	e0bfef17 	ldw	r2,-68(fp)
8112528c:	10800017 	ldw	r2,0(r2)
81125290:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
81125294:	00001906 	br	811252fc <OSEventPendMulti+0x118>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
81125298:	e0bff017 	ldw	r2,-64(fp)
8112529c:	10800003 	ldbu	r2,0(r2)
811252a0:	10803fcc 	andi	r2,r2,255
811252a4:	10c000a0 	cmpeqi	r3,r2,2
811252a8:	1800091e 	bne	r3,zero,811252d0 <OSEventPendMulti+0xec>
811252ac:	10c000e0 	cmpeqi	r3,r2,3
811252b0:	1800091e 	bne	r3,zero,811252d8 <OSEventPendMulti+0xf4>
811252b4:	10800060 	cmpeqi	r2,r2,1
811252b8:	1000091e 	bne	r2,zero,811252e0 <OSEventPendMulti+0xfc>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
811252bc:	e0800217 	ldw	r2,8(fp)
811252c0:	00c00044 	movi	r3,1
811252c4:	10c00005 	stb	r3,0(r2)
                 return (0);
811252c8:	0005883a 	mov	r2,zero
811252cc:	00014606 	br	811257e8 <OSEventPendMulti+0x604>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
811252d0:	0001883a 	nop
811252d4:	00000306 	br	811252e4 <OSEventPendMulti+0x100>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
811252d8:	0001883a 	nop
811252dc:	00000106 	br	811252e4 <OSEventPendMulti+0x100>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
811252e0:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
811252e4:	e0bfef17 	ldw	r2,-68(fp)
811252e8:	10800104 	addi	r2,r2,4
811252ec:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
811252f0:	e0bfef17 	ldw	r2,-68(fp)
811252f4:	10800017 	ldw	r2,0(r2)
811252f8:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
811252fc:	e0bff017 	ldw	r2,-64(fp)
81125300:	103fe51e 	bne	r2,zero,81125298 <__reset+0xfb105298>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
81125304:	d0a08f03 	ldbu	r2,-32196(gp)
81125308:	10803fcc 	andi	r2,r2,255
8112530c:	10000526 	beq	r2,zero,81125324 <OSEventPendMulti+0x140>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
81125310:	e0800217 	ldw	r2,8(fp)
81125314:	00c00084 	movi	r3,2
81125318:	10c00005 	stb	r3,0(r2)
        return (0);
8112531c:	0005883a 	mov	r2,zero
81125320:	00013106 	br	811257e8 <OSEventPendMulti+0x604>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
81125324:	d0a07d03 	ldbu	r2,-32268(gp)
81125328:	10803fcc 	andi	r2,r2,255
8112532c:	10000526 	beq	r2,zero,81125344 <OSEventPendMulti+0x160>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
81125330:	e0800217 	ldw	r2,8(fp)
81125334:	00c00344 	movi	r3,13
81125338:	10c00005 	stb	r3,0(r2)
        return (0);
8112533c:	0005883a 	mov	r2,zero
81125340:	00012906 	br	811257e8 <OSEventPendMulti+0x604>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81125344:	0005303a 	rdctl	r2,status
81125348:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112534c:	e0fffb17 	ldw	r3,-20(fp)
81125350:	00bfff84 	movi	r2,-2
81125354:	1884703a 	and	r2,r3,r2
81125358:	1001703a 	wrctl	status,r2
  
  return context;
8112535c:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
81125360:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
81125364:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
81125368:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
8112536c:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
81125370:	e0bffc17 	ldw	r2,-16(fp)
81125374:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
81125378:	e0bfef17 	ldw	r2,-68(fp)
8112537c:	10800017 	ldw	r2,0(r2)
81125380:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
81125384:	00008106 	br	8112558c <OSEventPendMulti+0x3a8>
        switch (pevent->OSEventType) {
81125388:	e0bff017 	ldw	r2,-64(fp)
8112538c:	10800003 	ldbu	r2,0(r2)
81125390:	10803fcc 	andi	r2,r2,255
81125394:	10c000a0 	cmpeqi	r3,r2,2
81125398:	18003c1e 	bne	r3,zero,8112548c <OSEventPendMulti+0x2a8>
8112539c:	10c000e0 	cmpeqi	r3,r2,3
811253a0:	1800031e 	bne	r3,zero,811253b0 <OSEventPendMulti+0x1cc>
811253a4:	10800060 	cmpeqi	r2,r2,1
811253a8:	10001e1e 	bne	r2,zero,81125424 <OSEventPendMulti+0x240>
811253ac:	00006606 	br	81125548 <OSEventPendMulti+0x364>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
811253b0:	e0bff017 	ldw	r2,-64(fp)
811253b4:	1080020b 	ldhu	r2,8(r2)
811253b8:	10bfffcc 	andi	r2,r2,65535
811253bc:	10001526 	beq	r2,zero,81125414 <OSEventPendMulti+0x230>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
811253c0:	e0bff017 	ldw	r2,-64(fp)
811253c4:	1080020b 	ldhu	r2,8(r2)
811253c8:	10bfffc4 	addi	r2,r2,-1
811253cc:	1007883a 	mov	r3,r2
811253d0:	e0bff017 	ldw	r2,-64(fp)
811253d4:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
811253d8:	e0bffd17 	ldw	r2,-12(fp)
811253dc:	10c00104 	addi	r3,r2,4
811253e0:	e0fffd15 	stw	r3,-12(fp)
811253e4:	e0fff017 	ldw	r3,-64(fp)
811253e8:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
811253ec:	00800044 	movi	r2,1
811253f0:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
811253f4:	e0bffe17 	ldw	r2,-8(fp)
811253f8:	10c00104 	addi	r3,r2,4
811253fc:	e0fffe15 	stw	r3,-8(fp)
81125400:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
81125404:	e0bff18b 	ldhu	r2,-58(fp)
81125408:	10800044 	addi	r2,r2,1
8112540c:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
81125410:	00005806 	br	81125574 <OSEventPendMulti+0x390>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
81125414:	e0bff203 	ldbu	r2,-56(fp)
81125418:	10800054 	ori	r2,r2,1
8112541c:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
81125420:	00005406 	br	81125574 <OSEventPendMulti+0x390>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
81125424:	e0bff017 	ldw	r2,-64(fp)
81125428:	10800117 	ldw	r2,4(r2)
8112542c:	10001326 	beq	r2,zero,8112547c <OSEventPendMulti+0x298>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
81125430:	e0bffe17 	ldw	r2,-8(fp)
81125434:	10c00104 	addi	r3,r2,4
81125438:	e0fffe15 	stw	r3,-8(fp)
8112543c:	e0fff017 	ldw	r3,-64(fp)
81125440:	18c00117 	ldw	r3,4(r3)
81125444:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
81125448:	e0bff017 	ldw	r2,-64(fp)
8112544c:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
81125450:	e0bffd17 	ldw	r2,-12(fp)
81125454:	10c00104 	addi	r3,r2,4
81125458:	e0fffd15 	stw	r3,-12(fp)
8112545c:	e0fff017 	ldw	r3,-64(fp)
81125460:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
81125464:	00800044 	movi	r2,1
81125468:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
8112546c:	e0bff18b 	ldhu	r2,-58(fp)
81125470:	10800044 	addi	r2,r2,1
81125474:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
81125478:	00003e06 	br	81125574 <OSEventPendMulti+0x390>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
8112547c:	e0bff203 	ldbu	r2,-56(fp)
81125480:	10800094 	ori	r2,r2,2
81125484:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
81125488:	00003a06 	br	81125574 <OSEventPendMulti+0x390>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
8112548c:	e0bff017 	ldw	r2,-64(fp)
81125490:	10800117 	ldw	r2,4(r2)
81125494:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
81125498:	e0bff517 	ldw	r2,-44(fp)
8112549c:	1080058b 	ldhu	r2,22(r2)
811254a0:	10bfffcc 	andi	r2,r2,65535
811254a4:	10002426 	beq	r2,zero,81125538 <OSEventPendMulti+0x354>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
811254a8:	e0bffe17 	ldw	r2,-8(fp)
811254ac:	10c00104 	addi	r3,r2,4
811254b0:	e0fffe15 	stw	r3,-8(fp)
811254b4:	e0fff517 	ldw	r3,-44(fp)
811254b8:	18c00417 	ldw	r3,16(r3)
811254bc:	19400104 	addi	r5,r3,4
811254c0:	e13ff517 	ldw	r4,-44(fp)
811254c4:	21400415 	stw	r5,16(r4)
811254c8:	18c00017 	ldw	r3,0(r3)
811254cc:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
811254d0:	e0bff517 	ldw	r2,-44(fp)
811254d4:	10c00417 	ldw	r3,16(r2)
811254d8:	e0bff517 	ldw	r2,-44(fp)
811254dc:	10800217 	ldw	r2,8(r2)
811254e0:	1880041e 	bne	r3,r2,811254f4 <OSEventPendMulti+0x310>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
811254e4:	e0bff517 	ldw	r2,-44(fp)
811254e8:	10c00117 	ldw	r3,4(r2)
811254ec:	e0bff517 	ldw	r2,-44(fp)
811254f0:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
811254f4:	e0bff517 	ldw	r2,-44(fp)
811254f8:	1080058b 	ldhu	r2,22(r2)
811254fc:	10bfffc4 	addi	r2,r2,-1
81125500:	1007883a 	mov	r3,r2
81125504:	e0bff517 	ldw	r2,-44(fp)
81125508:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
8112550c:	e0bffd17 	ldw	r2,-12(fp)
81125510:	10c00104 	addi	r3,r2,4
81125514:	e0fffd15 	stw	r3,-12(fp)
81125518:	e0fff017 	ldw	r3,-64(fp)
8112551c:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
81125520:	00800044 	movi	r2,1
81125524:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
81125528:	e0bff18b 	ldhu	r2,-58(fp)
8112552c:	10800044 	addi	r2,r2,1
81125530:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
81125534:	00000f06 	br	81125574 <OSEventPendMulti+0x390>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
81125538:	e0bff203 	ldbu	r2,-56(fp)
8112553c:	10800114 	ori	r2,r2,4
81125540:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
81125544:	00000b06 	br	81125574 <OSEventPendMulti+0x390>
81125548:	e0bff317 	ldw	r2,-52(fp)
8112554c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81125550:	e0bff417 	ldw	r2,-48(fp)
81125554:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
81125558:	e0bffd17 	ldw	r2,-12(fp)
8112555c:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
81125560:	e0800217 	ldw	r2,8(fp)
81125564:	00c00044 	movi	r3,1
81125568:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
8112556c:	e0bff18b 	ldhu	r2,-58(fp)
81125570:	00009d06 	br	811257e8 <OSEventPendMulti+0x604>
        }
        pevents++;
81125574:	e0bfef17 	ldw	r2,-68(fp)
81125578:	10800104 	addi	r2,r2,4
8112557c:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
81125580:	e0bfef17 	ldw	r2,-68(fp)
81125584:	10800017 	ldw	r2,0(r2)
81125588:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
8112558c:	e0bff017 	ldw	r2,-64(fp)
81125590:	103f7d1e 	bne	r2,zero,81125388 <__reset+0xfb105388>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
81125594:	e0bff103 	ldbu	r2,-60(fp)
81125598:	10800058 	cmpnei	r2,r2,1
8112559c:	10000a1e 	bne	r2,zero,811255c8 <OSEventPendMulti+0x3e4>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
811255a0:	e0bffd17 	ldw	r2,-12(fp)
811255a4:	10000015 	stw	zero,0(r2)
811255a8:	e0bff317 	ldw	r2,-52(fp)
811255ac:	e0bff615 	stw	r2,-40(fp)
811255b0:	e0bff617 	ldw	r2,-40(fp)
811255b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
811255b8:	e0800217 	ldw	r2,8(fp)
811255bc:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
811255c0:	e0bff18b 	ldhu	r2,-58(fp)
811255c4:	00008806 	br	811257e8 <OSEventPendMulti+0x604>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
811255c8:	d0a09017 	ldw	r2,-32192(gp)
811255cc:	d0e09017 	ldw	r3,-32192(gp)
811255d0:	19000c03 	ldbu	r4,48(r3)
811255d4:	e0fff203 	ldbu	r3,-56(fp)
811255d8:	20c6b03a 	or	r3,r4,r3
811255dc:	1809883a 	mov	r4,r3
811255e0:	00ffe004 	movi	r3,-128
811255e4:	20c6b03a 	or	r3,r4,r3
811255e8:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
811255ec:	d0a09017 	ldw	r2,-32192(gp)
811255f0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
811255f4:	d0a09017 	ldw	r2,-32192(gp)
811255f8:	e0ffff0b 	ldhu	r3,-4(fp)
811255fc:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
81125600:	e13ffc17 	ldw	r4,-16(fp)
81125604:	112618c0 	call	8112618c <OS_EventTaskWaitMulti>
81125608:	e0bff317 	ldw	r2,-52(fp)
8112560c:	e0bff915 	stw	r2,-28(fp)
81125610:	e0bff917 	ldw	r2,-28(fp)
81125614:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
81125618:	11269900 	call	81126990 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112561c:	0005303a 	rdctl	r2,status
81125620:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81125624:	e0fff717 	ldw	r3,-36(fp)
81125628:	00bfff84 	movi	r2,-2
8112562c:	1884703a 	and	r2,r3,r2
81125630:	1001703a 	wrctl	status,r2
  
  return context;
81125634:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
81125638:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
8112563c:	d0a09017 	ldw	r2,-32192(gp)
81125640:	10800c43 	ldbu	r2,49(r2)
81125644:	10803fcc 	andi	r2,r2,255
81125648:	10000226 	beq	r2,zero,81125654 <OSEventPendMulti+0x470>
8112564c:	108000a0 	cmpeqi	r2,r2,2
81125650:	10001826 	beq	r2,zero,811256b4 <OSEventPendMulti+0x4d0>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
81125654:	d0a09017 	ldw	r2,-32192(gp)
81125658:	10800717 	ldw	r2,28(r2)
8112565c:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
81125660:	e0bff017 	ldw	r2,-64(fp)
81125664:	10000b26 	beq	r2,zero,81125694 <OSEventPendMulti+0x4b0>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
81125668:	e0bffd17 	ldw	r2,-12(fp)
8112566c:	10c00104 	addi	r3,r2,4
81125670:	e0fffd15 	stw	r3,-12(fp)
81125674:	e0fff017 	ldw	r3,-64(fp)
81125678:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
8112567c:	e0bffd17 	ldw	r2,-12(fp)
81125680:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
81125684:	e0bff18b 	ldhu	r2,-58(fp)
81125688:	10800044 	addi	r2,r2,1
8112568c:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
81125690:	00000d06 	br	811256c8 <OSEventPendMulti+0x4e4>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
81125694:	d0a09017 	ldw	r2,-32192(gp)
81125698:	00c00044 	movi	r3,1
8112569c:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
811256a0:	d0a09017 	ldw	r2,-32192(gp)
811256a4:	e17ffc17 	ldw	r5,-16(fp)
811256a8:	1009883a 	mov	r4,r2
811256ac:	11263a40 	call	811263a4 <OS_EventTaskRemoveMulti>
             }
			 break;
811256b0:	00000506 	br	811256c8 <OSEventPendMulti+0x4e4>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
811256b4:	d0a09017 	ldw	r2,-32192(gp)
811256b8:	e17ffc17 	ldw	r5,-16(fp)
811256bc:	1009883a 	mov	r4,r2
811256c0:	11263a40 	call	811263a4 <OS_EventTaskRemoveMulti>
             break;
811256c4:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
811256c8:	d0a09017 	ldw	r2,-32192(gp)
811256cc:	10800c43 	ldbu	r2,49(r2)
811256d0:	10803fcc 	andi	r2,r2,255
811256d4:	10000326 	beq	r2,zero,811256e4 <OSEventPendMulti+0x500>
811256d8:	108000a0 	cmpeqi	r2,r2,2
811256dc:	1000231e 	bne	r2,zero,8112576c <OSEventPendMulti+0x588>
811256e0:	00002a06 	br	8112578c <OSEventPendMulti+0x5a8>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
811256e4:	e0bff017 	ldw	r2,-64(fp)
811256e8:	10800003 	ldbu	r2,0(r2)
811256ec:	10803fcc 	andi	r2,r2,255
811256f0:	0080100e 	bge	zero,r2,81125734 <OSEventPendMulti+0x550>
811256f4:	10c000d0 	cmplti	r3,r2,3
811256f8:	1800071e 	bne	r3,zero,81125718 <OSEventPendMulti+0x534>
811256fc:	108000e0 	cmpeqi	r2,r2,3
81125700:	10000c26 	beq	r2,zero,81125734 <OSEventPendMulti+0x550>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
81125704:	e0bffe17 	ldw	r2,-8(fp)
81125708:	10c00104 	addi	r3,r2,4
8112570c:	e0fffe15 	stw	r3,-8(fp)
81125710:	10000015 	stw	zero,0(r2)
                      break;
81125714:	00001206 	br	81125760 <OSEventPendMulti+0x57c>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
81125718:	e0bffe17 	ldw	r2,-8(fp)
8112571c:	10c00104 	addi	r3,r2,4
81125720:	e0fffe15 	stw	r3,-8(fp)
81125724:	d0e09017 	ldw	r3,-32192(gp)
81125728:	18c00917 	ldw	r3,36(r3)
8112572c:	10c00015 	stw	r3,0(r2)
                      break;
81125730:	00000b06 	br	81125760 <OSEventPendMulti+0x57c>
81125734:	e0bff317 	ldw	r2,-52(fp)
81125738:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112573c:	e0bff817 	ldw	r2,-32(fp)
81125740:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
81125744:	e0bffd17 	ldw	r2,-12(fp)
81125748:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
8112574c:	e0800217 	ldw	r2,8(fp)
81125750:	00c00044 	movi	r3,1
81125754:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
81125758:	e0bff18b 	ldhu	r2,-58(fp)
8112575c:	00002206 	br	811257e8 <OSEventPendMulti+0x604>
             }
            *perr = OS_ERR_NONE;
81125760:	e0800217 	ldw	r2,8(fp)
81125764:	10000005 	stb	zero,0(r2)
             break;
81125768:	00001006 	br	811257ac <OSEventPendMulti+0x5c8>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
8112576c:	e0bffe17 	ldw	r2,-8(fp)
81125770:	10c00104 	addi	r3,r2,4
81125774:	e0fffe15 	stw	r3,-8(fp)
81125778:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
8112577c:	e0800217 	ldw	r2,8(fp)
81125780:	00c00384 	movi	r3,14
81125784:	10c00005 	stb	r3,0(r2)
             break;
81125788:	00000806 	br	811257ac <OSEventPendMulti+0x5c8>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
8112578c:	e0bffe17 	ldw	r2,-8(fp)
81125790:	10c00104 	addi	r3,r2,4
81125794:	e0fffe15 	stw	r3,-8(fp)
81125798:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
8112579c:	e0800217 	ldw	r2,8(fp)
811257a0:	00c00284 	movi	r3,10
811257a4:	10c00005 	stb	r3,0(r2)
             break;
811257a8:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
811257ac:	d0a09017 	ldw	r2,-32192(gp)
811257b0:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
811257b4:	d0a09017 	ldw	r2,-32192(gp)
811257b8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
811257bc:	d0a09017 	ldw	r2,-32192(gp)
811257c0:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
811257c4:	d0a09017 	ldw	r2,-32192(gp)
811257c8:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
811257cc:	d0a09017 	ldw	r2,-32192(gp)
811257d0:	10000915 	stw	zero,36(r2)
811257d4:	e0bff317 	ldw	r2,-52(fp)
811257d8:	e0bffa15 	stw	r2,-24(fp)
811257dc:	e0bffa17 	ldw	r2,-24(fp)
811257e0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
811257e4:	e0bff18b 	ldhu	r2,-58(fp)
}
811257e8:	e037883a 	mov	sp,fp
811257ec:	dfc00117 	ldw	ra,4(sp)
811257f0:	df000017 	ldw	fp,0(sp)
811257f4:	dec00204 	addi	sp,sp,8
811257f8:	f800283a 	ret

811257fc <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
811257fc:	defffe04 	addi	sp,sp,-8
81125800:	de00012e 	bgeu	sp,et,81125808 <OSInit+0xc>
81125804:	003b68fa 	trap	3
81125808:	dfc00115 	stw	ra,4(sp)
8112580c:	df000015 	stw	fp,0(sp)
81125810:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
81125814:	1138cd00 	call	81138cd0 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
81125818:	11266040 	call	81126604 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
8112581c:	11266540 	call	81126654 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
81125820:	11267d80 	call	811267d8 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
81125824:	112651c0 	call	8112651c <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
81125828:	11287980 	call	81128798 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
8112582c:	11290e00 	call	811290e0 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
81125830:	112b3b00 	call	8112b3b0 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
81125834:	11266c80 	call	811266c8 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
81125838:	11267500 	call	81126750 <OS_InitTaskStat>
#endif

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
8112583c:	112e7540 	call	8112e754 <OSTmr_Init>
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
81125840:	1138cfc0 	call	81138cfc <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
81125844:	11270b40 	call	811270b4 <OSDebugInit>
#endif
}
81125848:	0001883a 	nop
8112584c:	e037883a 	mov	sp,fp
81125850:	dfc00117 	ldw	ra,4(sp)
81125854:	df000017 	ldw	fp,0(sp)
81125858:	dec00204 	addi	sp,sp,8
8112585c:	f800283a 	ret

81125860 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
81125860:	deffff04 	addi	sp,sp,-4
81125864:	de00012e 	bgeu	sp,et,8112586c <OSIntEnter+0xc>
81125868:	003b68fa 	trap	3
8112586c:	df000015 	stw	fp,0(sp)
81125870:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
81125874:	d0a07f03 	ldbu	r2,-32260(gp)
81125878:	10803fcc 	andi	r2,r2,255
8112587c:	10800058 	cmpnei	r2,r2,1
81125880:	1000071e 	bne	r2,zero,811258a0 <OSIntEnter+0x40>
        if (OSIntNesting < 255u) {
81125884:	d0a08f03 	ldbu	r2,-32196(gp)
81125888:	10803fcc 	andi	r2,r2,255
8112588c:	10803fe0 	cmpeqi	r2,r2,255
81125890:	1000031e 	bne	r2,zero,811258a0 <OSIntEnter+0x40>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
81125894:	d0a08f03 	ldbu	r2,-32196(gp)
81125898:	10800044 	addi	r2,r2,1
8112589c:	d0a08f05 	stb	r2,-32196(gp)
        }
    }
}
811258a0:	0001883a 	nop
811258a4:	e037883a 	mov	sp,fp
811258a8:	df000017 	ldw	fp,0(sp)
811258ac:	dec00104 	addi	sp,sp,4
811258b0:	f800283a 	ret

811258b4 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
811258b4:	defffb04 	addi	sp,sp,-20
811258b8:	de00012e 	bgeu	sp,et,811258c0 <OSIntExit+0xc>
811258bc:	003b68fa 	trap	3
811258c0:	dfc00415 	stw	ra,16(sp)
811258c4:	df000315 	stw	fp,12(sp)
811258c8:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
811258cc:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
811258d0:	d0a07f03 	ldbu	r2,-32260(gp)
811258d4:	10803fcc 	andi	r2,r2,255
811258d8:	10800058 	cmpnei	r2,r2,1
811258dc:	10002f1e 	bne	r2,zero,8112599c <OSIntExit+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811258e0:	0005303a 	rdctl	r2,status
811258e4:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811258e8:	e0ffff17 	ldw	r3,-4(fp)
811258ec:	00bfff84 	movi	r2,-2
811258f0:	1884703a 	and	r2,r3,r2
811258f4:	1001703a 	wrctl	status,r2
  
  return context;
811258f8:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
811258fc:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
81125900:	d0a08f03 	ldbu	r2,-32196(gp)
81125904:	10803fcc 	andi	r2,r2,255
81125908:	10000326 	beq	r2,zero,81125918 <OSIntExit+0x64>
            OSIntNesting--;
8112590c:	d0a08f03 	ldbu	r2,-32196(gp)
81125910:	10bfffc4 	addi	r2,r2,-1
81125914:	d0a08f05 	stb	r2,-32196(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
81125918:	d0a08f03 	ldbu	r2,-32196(gp)
8112591c:	10803fcc 	andi	r2,r2,255
81125920:	10001a1e 	bne	r2,zero,8112598c <OSIntExit+0xd8>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
81125924:	d0a07d03 	ldbu	r2,-32268(gp)
81125928:	10803fcc 	andi	r2,r2,255
8112592c:	1000171e 	bne	r2,zero,8112598c <OSIntExit+0xd8>
                OS_SchedNew();
81125930:	1126a680 	call	81126a68 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
81125934:	d0e08183 	ldbu	r3,-32250(gp)
81125938:	d0a081c3 	ldbu	r2,-32249(gp)
8112593c:	18c03fcc 	andi	r3,r3,255
81125940:	10803fcc 	andi	r2,r2,255
81125944:	18801126 	beq	r3,r2,8112598c <OSIntExit+0xd8>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
81125948:	d0a08183 	ldbu	r2,-32250(gp)
8112594c:	10c03fcc 	andi	r3,r2,255
81125950:	00a045b4 	movhi	r2,33046
81125954:	1094b404 	addi	r2,r2,21200
81125958:	18c7883a 	add	r3,r3,r3
8112595c:	18c7883a 	add	r3,r3,r3
81125960:	10c5883a 	add	r2,r2,r3
81125964:	10800017 	ldw	r2,0(r2)
81125968:	d0a08a15 	stw	r2,-32216(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
8112596c:	d0a08a17 	ldw	r2,-32216(gp)
81125970:	10c00e17 	ldw	r3,56(r2)
81125974:	18c00044 	addi	r3,r3,1
81125978:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
8112597c:	d0a08417 	ldw	r2,-32240(gp)
81125980:	10800044 	addi	r2,r2,1
81125984:	d0a08415 	stw	r2,-32240(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
81125988:	11389900 	call	81138990 <OSCtxSw>
8112598c:	e0bffd17 	ldw	r2,-12(fp)
81125990:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81125994:	e0bffe17 	ldw	r2,-8(fp)
81125998:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
8112599c:	0001883a 	nop
811259a0:	e037883a 	mov	sp,fp
811259a4:	dfc00117 	ldw	ra,4(sp)
811259a8:	df000017 	ldw	fp,0(sp)
811259ac:	dec00204 	addi	sp,sp,8
811259b0:	f800283a 	ret

811259b4 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
811259b4:	defffc04 	addi	sp,sp,-16
811259b8:	de00012e 	bgeu	sp,et,811259c0 <OSSchedLock+0xc>
811259bc:	003b68fa 	trap	3
811259c0:	df000315 	stw	fp,12(sp)
811259c4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
811259c8:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
811259cc:	d0a07f03 	ldbu	r2,-32260(gp)
811259d0:	10803fcc 	andi	r2,r2,255
811259d4:	10800058 	cmpnei	r2,r2,1
811259d8:	1000161e 	bne	r2,zero,81125a34 <OSSchedLock+0x80>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811259dc:	0005303a 	rdctl	r2,status
811259e0:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811259e4:	e0ffff17 	ldw	r3,-4(fp)
811259e8:	00bfff84 	movi	r2,-2
811259ec:	1884703a 	and	r2,r3,r2
811259f0:	1001703a 	wrctl	status,r2
  
  return context;
811259f4:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
811259f8:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
811259fc:	d0a08f03 	ldbu	r2,-32196(gp)
81125a00:	10803fcc 	andi	r2,r2,255
81125a04:	1000071e 	bne	r2,zero,81125a24 <OSSchedLock+0x70>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
81125a08:	d0a07d03 	ldbu	r2,-32268(gp)
81125a0c:	10803fcc 	andi	r2,r2,255
81125a10:	10803fe0 	cmpeqi	r2,r2,255
81125a14:	1000031e 	bne	r2,zero,81125a24 <OSSchedLock+0x70>
                OSLockNesting++;                 /* Increment lock nesting level                       */
81125a18:	d0a07d03 	ldbu	r2,-32268(gp)
81125a1c:	10800044 	addi	r2,r2,1
81125a20:	d0a07d05 	stb	r2,-32268(gp)
81125a24:	e0bffd17 	ldw	r2,-12(fp)
81125a28:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81125a2c:	e0bffe17 	ldw	r2,-8(fp)
81125a30:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
81125a34:	0001883a 	nop
81125a38:	e037883a 	mov	sp,fp
81125a3c:	df000017 	ldw	fp,0(sp)
81125a40:	dec00104 	addi	sp,sp,4
81125a44:	f800283a 	ret

81125a48 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
81125a48:	defff804 	addi	sp,sp,-32
81125a4c:	de00012e 	bgeu	sp,et,81125a54 <OSSchedUnlock+0xc>
81125a50:	003b68fa 	trap	3
81125a54:	dfc00715 	stw	ra,28(sp)
81125a58:	df000615 	stw	fp,24(sp)
81125a5c:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
81125a60:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
81125a64:	d0a07f03 	ldbu	r2,-32260(gp)
81125a68:	10803fcc 	andi	r2,r2,255
81125a6c:	10800058 	cmpnei	r2,r2,1
81125a70:	1000281e 	bne	r2,zero,81125b14 <OSSchedUnlock+0xcc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81125a74:	0005303a 	rdctl	r2,status
81125a78:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81125a7c:	e0ffff17 	ldw	r3,-4(fp)
81125a80:	00bfff84 	movi	r2,-2
81125a84:	1884703a 	and	r2,r3,r2
81125a88:	1001703a 	wrctl	status,r2
  
  return context;
81125a8c:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
81125a90:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
81125a94:	d0a07d03 	ldbu	r2,-32268(gp)
81125a98:	10803fcc 	andi	r2,r2,255
81125a9c:	10001926 	beq	r2,zero,81125b04 <OSSchedUnlock+0xbc>
            OSLockNesting--;                               /* Decrement lock nesting level             */
81125aa0:	d0a07d03 	ldbu	r2,-32268(gp)
81125aa4:	10bfffc4 	addi	r2,r2,-1
81125aa8:	d0a07d05 	stb	r2,-32268(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
81125aac:	d0a07d03 	ldbu	r2,-32268(gp)
81125ab0:	10803fcc 	andi	r2,r2,255
81125ab4:	10000e1e 	bne	r2,zero,81125af0 <OSSchedUnlock+0xa8>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
81125ab8:	d0a08f03 	ldbu	r2,-32196(gp)
81125abc:	10803fcc 	andi	r2,r2,255
81125ac0:	1000061e 	bne	r2,zero,81125adc <OSSchedUnlock+0x94>
81125ac4:	e0bffa17 	ldw	r2,-24(fp)
81125ac8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81125acc:	e0bffb17 	ldw	r2,-20(fp)
81125ad0:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
81125ad4:	11269900 	call	81126990 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
81125ad8:	00000e06 	br	81125b14 <OSSchedUnlock+0xcc>
81125adc:	e0bffa17 	ldw	r2,-24(fp)
81125ae0:	e0bffc15 	stw	r2,-16(fp)
81125ae4:	e0bffc17 	ldw	r2,-16(fp)
81125ae8:	1001703a 	wrctl	status,r2
81125aec:	00000906 	br	81125b14 <OSSchedUnlock+0xcc>
81125af0:	e0bffa17 	ldw	r2,-24(fp)
81125af4:	e0bffd15 	stw	r2,-12(fp)
81125af8:	e0bffd17 	ldw	r2,-12(fp)
81125afc:	1001703a 	wrctl	status,r2
81125b00:	00000406 	br	81125b14 <OSSchedUnlock+0xcc>
81125b04:	e0bffa17 	ldw	r2,-24(fp)
81125b08:	e0bffe15 	stw	r2,-8(fp)
81125b0c:	e0bffe17 	ldw	r2,-8(fp)
81125b10:	1001703a 	wrctl	status,r2
81125b14:	0001883a 	nop
81125b18:	e037883a 	mov	sp,fp
81125b1c:	dfc00117 	ldw	ra,4(sp)
81125b20:	df000017 	ldw	fp,0(sp)
81125b24:	dec00204 	addi	sp,sp,8
81125b28:	f800283a 	ret

81125b2c <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
81125b2c:	defffe04 	addi	sp,sp,-8
81125b30:	de00012e 	bgeu	sp,et,81125b38 <OSStart+0xc>
81125b34:	003b68fa 	trap	3
81125b38:	dfc00115 	stw	ra,4(sp)
81125b3c:	df000015 	stw	fp,0(sp)
81125b40:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
81125b44:	d0a07f03 	ldbu	r2,-32260(gp)
81125b48:	10803fcc 	andi	r2,r2,255
81125b4c:	10000f1e 	bne	r2,zero,81125b8c <OSStart+0x60>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
81125b50:	1126a680 	call	81126a68 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
81125b54:	d0a08183 	ldbu	r2,-32250(gp)
81125b58:	d0a081c5 	stb	r2,-32249(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
81125b5c:	d0a08183 	ldbu	r2,-32250(gp)
81125b60:	10c03fcc 	andi	r3,r2,255
81125b64:	00a045b4 	movhi	r2,33046
81125b68:	1094b404 	addi	r2,r2,21200
81125b6c:	18c7883a 	add	r3,r3,r3
81125b70:	18c7883a 	add	r3,r3,r3
81125b74:	10c5883a 	add	r2,r2,r3
81125b78:	10800017 	ldw	r2,0(r2)
81125b7c:	d0a08a15 	stw	r2,-32216(gp)
        OSTCBCur      = OSTCBHighRdy;
81125b80:	d0a08a17 	ldw	r2,-32216(gp)
81125b84:	d0a09015 	stw	r2,-32192(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
81125b88:	1138a2c0 	call	81138a2c <OSStartHighRdy>
    }
}
81125b8c:	0001883a 	nop
81125b90:	e037883a 	mov	sp,fp
81125b94:	dfc00117 	ldw	ra,4(sp)
81125b98:	df000017 	ldw	fp,0(sp)
81125b9c:	dec00204 	addi	sp,sp,8
81125ba0:	f800283a 	ret

81125ba4 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
81125ba4:	defff904 	addi	sp,sp,-28
81125ba8:	de00012e 	bgeu	sp,et,81125bb0 <OSStatInit+0xc>
81125bac:	003b68fa 	trap	3
81125bb0:	dfc00615 	stw	ra,24(sp)
81125bb4:	df000515 	stw	fp,20(sp)
81125bb8:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81125bbc:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
81125bc0:	01000084 	movi	r4,2
81125bc4:	112d6cc0 	call	8112d6cc <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81125bc8:	0005303a 	rdctl	r2,status
81125bcc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81125bd0:	e0fffc17 	ldw	r3,-16(fp)
81125bd4:	00bfff84 	movi	r2,-2
81125bd8:	1884703a 	and	r2,r3,r2
81125bdc:	1001703a 	wrctl	status,r2
  
  return context;
81125be0:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
81125be4:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
81125be8:	d0208015 	stw	zero,-32256(gp)
81125bec:	e0bffb17 	ldw	r2,-20(fp)
81125bf0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81125bf4:	e0bffd17 	ldw	r2,-12(fp)
81125bf8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
81125bfc:	01001904 	movi	r4,100
81125c00:	112d6cc0 	call	8112d6cc <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81125c04:	0005303a 	rdctl	r2,status
81125c08:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81125c0c:	e0fffe17 	ldw	r3,-8(fp)
81125c10:	00bfff84 	movi	r2,-2
81125c14:	1884703a 	and	r2,r3,r2
81125c18:	1001703a 	wrctl	status,r2
  
  return context;
81125c1c:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
81125c20:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
81125c24:	d0a08017 	ldw	r2,-32256(gp)
81125c28:	d0a08615 	stw	r2,-32232(gp)
    OSStatRdy    = OS_TRUE;
81125c2c:	00800044 	movi	r2,1
81125c30:	d0a09505 	stb	r2,-32172(gp)
81125c34:	e0bffb17 	ldw	r2,-20(fp)
81125c38:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81125c3c:	e0bfff17 	ldw	r2,-4(fp)
81125c40:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
81125c44:	0001883a 	nop
81125c48:	e037883a 	mov	sp,fp
81125c4c:	dfc00117 	ldw	ra,4(sp)
81125c50:	df000017 	ldw	fp,0(sp)
81125c54:	dec00204 	addi	sp,sp,8
81125c58:	f800283a 	ret

81125c5c <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
81125c5c:	defff704 	addi	sp,sp,-36
81125c60:	de00012e 	bgeu	sp,et,81125c68 <OSTimeTick+0xc>
81125c64:	003b68fa 	trap	3
81125c68:	dfc00815 	stw	ra,32(sp)
81125c6c:	df000715 	stw	fp,28(sp)
81125c70:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
81125c74:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
81125c78:	1138c7c0 	call	81138c7c <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81125c7c:	0005303a 	rdctl	r2,status
81125c80:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81125c84:	e0fffd17 	ldw	r3,-12(fp)
81125c88:	00bfff84 	movi	r2,-2
81125c8c:	1884703a 	and	r2,r3,r2
81125c90:	1001703a 	wrctl	status,r2
  
  return context;
81125c94:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
81125c98:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
81125c9c:	d0a09217 	ldw	r2,-32184(gp)
81125ca0:	10800044 	addi	r2,r2,1
81125ca4:	d0a09215 	stw	r2,-32184(gp)
81125ca8:	e0bffb17 	ldw	r2,-20(fp)
81125cac:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81125cb0:	e0bfff17 	ldw	r2,-4(fp)
81125cb4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
81125cb8:	d0a07f03 	ldbu	r2,-32260(gp)
81125cbc:	10803fcc 	andi	r2,r2,255
81125cc0:	10800058 	cmpnei	r2,r2,1
81125cc4:	10006a1e 	bne	r2,zero,81125e70 <OSTimeTick+0x214>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
81125cc8:	d0a08303 	ldbu	r2,-32244(gp)
81125ccc:	10803fcc 	andi	r2,r2,255
81125cd0:	10c00060 	cmpeqi	r3,r2,1
81125cd4:	1800061e 	bne	r3,zero,81125cf0 <OSTimeTick+0x94>
81125cd8:	10c000a0 	cmpeqi	r3,r2,2
81125cdc:	1800061e 	bne	r3,zero,81125cf8 <OSTimeTick+0x9c>
81125ce0:	10000a1e 	bne	r2,zero,81125d0c <OSTimeTick+0xb0>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
81125ce4:	00800044 	movi	r2,1
81125ce8:	e0bffa05 	stb	r2,-24(fp)
                 break;
81125cec:	00000b06 	br	81125d1c <OSTimeTick+0xc0>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
81125cf0:	e03ffa05 	stb	zero,-24(fp)
                 break;
81125cf4:	00000906 	br	81125d1c <OSTimeTick+0xc0>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
81125cf8:	00800044 	movi	r2,1
81125cfc:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
81125d00:	00800044 	movi	r2,1
81125d04:	d0a08305 	stb	r2,-32244(gp)
                 break;
81125d08:	00000406 	br	81125d1c <OSTimeTick+0xc0>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
81125d0c:	00800044 	movi	r2,1
81125d10:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
81125d14:	d0208305 	stb	zero,-32244(gp)
                 break;
81125d18:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
81125d1c:	e0bffa03 	ldbu	r2,-24(fp)
81125d20:	10005226 	beq	r2,zero,81125e6c <OSTimeTick+0x210>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
81125d24:	d0a08217 	ldw	r2,-32248(gp)
81125d28:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
81125d2c:	00004906 	br	81125e54 <OSTimeTick+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81125d30:	0005303a 	rdctl	r2,status
81125d34:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81125d38:	e0fffc17 	ldw	r3,-16(fp)
81125d3c:	00bfff84 	movi	r2,-2
81125d40:	1884703a 	and	r2,r3,r2
81125d44:	1001703a 	wrctl	status,r2
  
  return context;
81125d48:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
81125d4c:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
81125d50:	e0bff917 	ldw	r2,-28(fp)
81125d54:	10800b8b 	ldhu	r2,46(r2)
81125d58:	10bfffcc 	andi	r2,r2,65535
81125d5c:	10003626 	beq	r2,zero,81125e38 <OSTimeTick+0x1dc>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
81125d60:	e0bff917 	ldw	r2,-28(fp)
81125d64:	10800b8b 	ldhu	r2,46(r2)
81125d68:	10bfffc4 	addi	r2,r2,-1
81125d6c:	1007883a 	mov	r3,r2
81125d70:	e0bff917 	ldw	r2,-28(fp)
81125d74:	10c00b8d 	sth	r3,46(r2)
81125d78:	e0bff917 	ldw	r2,-28(fp)
81125d7c:	10800b8b 	ldhu	r2,46(r2)
81125d80:	10bfffcc 	andi	r2,r2,65535
81125d84:	10002c1e 	bne	r2,zero,81125e38 <OSTimeTick+0x1dc>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
81125d88:	e0bff917 	ldw	r2,-28(fp)
81125d8c:	10800c03 	ldbu	r2,48(r2)
81125d90:	10803fcc 	andi	r2,r2,255
81125d94:	10800dcc 	andi	r2,r2,55
81125d98:	10000b26 	beq	r2,zero,81125dc8 <OSTimeTick+0x16c>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
81125d9c:	e0bff917 	ldw	r2,-28(fp)
81125da0:	10c00c03 	ldbu	r3,48(r2)
81125da4:	00bff204 	movi	r2,-56
81125da8:	1884703a 	and	r2,r3,r2
81125dac:	1007883a 	mov	r3,r2
81125db0:	e0bff917 	ldw	r2,-28(fp)
81125db4:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
81125db8:	e0bff917 	ldw	r2,-28(fp)
81125dbc:	00c00044 	movi	r3,1
81125dc0:	10c00c45 	stb	r3,49(r2)
81125dc4:	00000206 	br	81125dd0 <OSTimeTick+0x174>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
81125dc8:	e0bff917 	ldw	r2,-28(fp)
81125dcc:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
81125dd0:	e0bff917 	ldw	r2,-28(fp)
81125dd4:	10800c03 	ldbu	r2,48(r2)
81125dd8:	10803fcc 	andi	r2,r2,255
81125ddc:	1080020c 	andi	r2,r2,8
81125de0:	1000151e 	bne	r2,zero,81125e38 <OSTimeTick+0x1dc>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
81125de4:	e0bff917 	ldw	r2,-28(fp)
81125de8:	10c00d83 	ldbu	r3,54(r2)
81125dec:	d0a08c03 	ldbu	r2,-32208(gp)
81125df0:	1884b03a 	or	r2,r3,r2
81125df4:	d0a08c05 	stb	r2,-32208(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
81125df8:	e0bff917 	ldw	r2,-28(fp)
81125dfc:	10800d03 	ldbu	r2,52(r2)
81125e00:	10c03fcc 	andi	r3,r2,255
81125e04:	e0bff917 	ldw	r2,-28(fp)
81125e08:	10800d03 	ldbu	r2,52(r2)
81125e0c:	11003fcc 	andi	r4,r2,255
81125e10:	d0a08c44 	addi	r2,gp,-32207
81125e14:	2085883a 	add	r2,r4,r2
81125e18:	11000003 	ldbu	r4,0(r2)
81125e1c:	e0bff917 	ldw	r2,-28(fp)
81125e20:	10800d43 	ldbu	r2,53(r2)
81125e24:	2084b03a 	or	r2,r4,r2
81125e28:	1009883a 	mov	r4,r2
81125e2c:	d0a08c44 	addi	r2,gp,-32207
81125e30:	1885883a 	add	r2,r3,r2
81125e34:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
81125e38:	e0bff917 	ldw	r2,-28(fp)
81125e3c:	10800517 	ldw	r2,20(r2)
81125e40:	e0bff915 	stw	r2,-28(fp)
81125e44:	e0bffb17 	ldw	r2,-20(fp)
81125e48:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81125e4c:	e0bffe17 	ldw	r2,-8(fp)
81125e50:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
81125e54:	e0bff917 	ldw	r2,-28(fp)
81125e58:	10800c83 	ldbu	r2,50(r2)
81125e5c:	10803fcc 	andi	r2,r2,255
81125e60:	10800a18 	cmpnei	r2,r2,40
81125e64:	103fb21e 	bne	r2,zero,81125d30 <__reset+0xfb105d30>
81125e68:	00000106 	br	81125e70 <OSTimeTick+0x214>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
81125e6c:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
81125e70:	e037883a 	mov	sp,fp
81125e74:	dfc00117 	ldw	ra,4(sp)
81125e78:	df000017 	ldw	fp,0(sp)
81125e7c:	dec00204 	addi	sp,sp,8
81125e80:	f800283a 	ret

81125e84 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
81125e84:	deffff04 	addi	sp,sp,-4
81125e88:	de00012e 	bgeu	sp,et,81125e90 <OSVersion+0xc>
81125e8c:	003b68fa 	trap	3
81125e90:	df000015 	stw	fp,0(sp)
81125e94:	d839883a 	mov	fp,sp
    return (OS_VERSION);
81125e98:	00804784 	movi	r2,286
}
81125e9c:	e037883a 	mov	sp,fp
81125ea0:	df000017 	ldw	fp,0(sp)
81125ea4:	dec00104 	addi	sp,sp,4
81125ea8:	f800283a 	ret

81125eac <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
81125eac:	deffff04 	addi	sp,sp,-4
81125eb0:	de00012e 	bgeu	sp,et,81125eb8 <OS_Dummy+0xc>
81125eb4:	003b68fa 	trap	3
81125eb8:	df000015 	stw	fp,0(sp)
81125ebc:	d839883a 	mov	fp,sp
}
81125ec0:	0001883a 	nop
81125ec4:	e037883a 	mov	sp,fp
81125ec8:	df000017 	ldw	fp,0(sp)
81125ecc:	dec00104 	addi	sp,sp,4
81125ed0:	f800283a 	ret

81125ed4 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
81125ed4:	defff804 	addi	sp,sp,-32
81125ed8:	de00012e 	bgeu	sp,et,81125ee0 <OS_EventTaskRdy+0xc>
81125edc:	003b68fa 	trap	3
81125ee0:	dfc00715 	stw	ra,28(sp)
81125ee4:	df000615 	stw	fp,24(sp)
81125ee8:	df000604 	addi	fp,sp,24
81125eec:	e13ffc15 	stw	r4,-16(fp)
81125ef0:	e17ffd15 	stw	r5,-12(fp)
81125ef4:	3007883a 	mov	r3,r6
81125ef8:	3805883a 	mov	r2,r7
81125efc:	e0fffe05 	stb	r3,-8(fp)
81125f00:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
81125f04:	e0bffc17 	ldw	r2,-16(fp)
81125f08:	10800283 	ldbu	r2,10(r2)
81125f0c:	10c03fcc 	andi	r3,r2,255
81125f10:	00a04534 	movhi	r2,33044
81125f14:	10af1104 	addi	r2,r2,-17340
81125f18:	10c5883a 	add	r2,r2,r3
81125f1c:	10800003 	ldbu	r2,0(r2)
81125f20:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
81125f24:	e0bffa03 	ldbu	r2,-24(fp)
81125f28:	e0fffc17 	ldw	r3,-16(fp)
81125f2c:	1885883a 	add	r2,r3,r2
81125f30:	108002c4 	addi	r2,r2,11
81125f34:	10800003 	ldbu	r2,0(r2)
81125f38:	10c03fcc 	andi	r3,r2,255
81125f3c:	00a04534 	movhi	r2,33044
81125f40:	10af1104 	addi	r2,r2,-17340
81125f44:	10c5883a 	add	r2,r2,r3
81125f48:	10800003 	ldbu	r2,0(r2)
81125f4c:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
81125f50:	e0bffa03 	ldbu	r2,-24(fp)
81125f54:	100490fa 	slli	r2,r2,3
81125f58:	1007883a 	mov	r3,r2
81125f5c:	e0bffa43 	ldbu	r2,-23(fp)
81125f60:	1885883a 	add	r2,r3,r2
81125f64:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
81125f68:	e0fffa83 	ldbu	r3,-22(fp)
81125f6c:	00a045b4 	movhi	r2,33046
81125f70:	1094b404 	addi	r2,r2,21200
81125f74:	18c7883a 	add	r3,r3,r3
81125f78:	18c7883a 	add	r3,r3,r3
81125f7c:	10c5883a 	add	r2,r2,r3
81125f80:	10800017 	ldw	r2,0(r2)
81125f84:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
81125f88:	e0bffb17 	ldw	r2,-20(fp)
81125f8c:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
81125f90:	e0bffb17 	ldw	r2,-20(fp)
81125f94:	e0fffd17 	ldw	r3,-12(fp)
81125f98:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
81125f9c:	e0bffb17 	ldw	r2,-20(fp)
81125fa0:	10800c03 	ldbu	r2,48(r2)
81125fa4:	1007883a 	mov	r3,r2
81125fa8:	e0bffe03 	ldbu	r2,-8(fp)
81125fac:	0084303a 	nor	r2,zero,r2
81125fb0:	1884703a 	and	r2,r3,r2
81125fb4:	1007883a 	mov	r3,r2
81125fb8:	e0bffb17 	ldw	r2,-20(fp)
81125fbc:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
81125fc0:	e0bffb17 	ldw	r2,-20(fp)
81125fc4:	e0ffff03 	ldbu	r3,-4(fp)
81125fc8:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
81125fcc:	e0bffb17 	ldw	r2,-20(fp)
81125fd0:	10800c03 	ldbu	r2,48(r2)
81125fd4:	10803fcc 	andi	r2,r2,255
81125fd8:	1080020c 	andi	r2,r2,8
81125fdc:	1000111e 	bne	r2,zero,81126024 <OS_EventTaskRdy+0x150>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
81125fe0:	e0bffb17 	ldw	r2,-20(fp)
81125fe4:	10c00d83 	ldbu	r3,54(r2)
81125fe8:	d0a08c03 	ldbu	r2,-32208(gp)
81125fec:	1884b03a 	or	r2,r3,r2
81125ff0:	d0a08c05 	stb	r2,-32208(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
81125ff4:	e0fffa03 	ldbu	r3,-24(fp)
81125ff8:	e13ffa03 	ldbu	r4,-24(fp)
81125ffc:	d0a08c44 	addi	r2,gp,-32207
81126000:	2085883a 	add	r2,r4,r2
81126004:	11000003 	ldbu	r4,0(r2)
81126008:	e0bffb17 	ldw	r2,-20(fp)
8112600c:	10800d43 	ldbu	r2,53(r2)
81126010:	2084b03a 	or	r2,r4,r2
81126014:	1009883a 	mov	r4,r2
81126018:	d0a08c44 	addi	r2,gp,-32207
8112601c:	1885883a 	add	r2,r3,r2
81126020:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
81126024:	e17ffc17 	ldw	r5,-16(fp)
81126028:	e13ffb17 	ldw	r4,-20(fp)
8112602c:	11262e40 	call	811262e4 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
81126030:	e0bffb17 	ldw	r2,-20(fp)
81126034:	10800817 	ldw	r2,32(r2)
81126038:	10000826 	beq	r2,zero,8112605c <OS_EventTaskRdy+0x188>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
8112603c:	e0bffb17 	ldw	r2,-20(fp)
81126040:	10800817 	ldw	r2,32(r2)
81126044:	100b883a 	mov	r5,r2
81126048:	e13ffb17 	ldw	r4,-20(fp)
8112604c:	11263a40 	call	811263a4 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
81126050:	e0bffb17 	ldw	r2,-20(fp)
81126054:	e0fffc17 	ldw	r3,-16(fp)
81126058:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
8112605c:	e0bffa83 	ldbu	r2,-22(fp)
}
81126060:	e037883a 	mov	sp,fp
81126064:	dfc00117 	ldw	ra,4(sp)
81126068:	df000017 	ldw	fp,0(sp)
8112606c:	dec00204 	addi	sp,sp,8
81126070:	f800283a 	ret

81126074 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
81126074:	defffd04 	addi	sp,sp,-12
81126078:	de00012e 	bgeu	sp,et,81126080 <OS_EventTaskWait+0xc>
8112607c:	003b68fa 	trap	3
81126080:	df000215 	stw	fp,8(sp)
81126084:	df000204 	addi	fp,sp,8
81126088:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
8112608c:	d0a09017 	ldw	r2,-32192(gp)
81126090:	e0ffff17 	ldw	r3,-4(fp)
81126094:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
81126098:	d0a09017 	ldw	r2,-32192(gp)
8112609c:	10800d03 	ldbu	r2,52(r2)
811260a0:	10803fcc 	andi	r2,r2,255
811260a4:	d0e09017 	ldw	r3,-32192(gp)
811260a8:	18c00d03 	ldbu	r3,52(r3)
811260ac:	18c03fcc 	andi	r3,r3,255
811260b0:	e13fff17 	ldw	r4,-4(fp)
811260b4:	20c7883a 	add	r3,r4,r3
811260b8:	18c002c4 	addi	r3,r3,11
811260bc:	19000003 	ldbu	r4,0(r3)
811260c0:	d0e09017 	ldw	r3,-32192(gp)
811260c4:	18c00d43 	ldbu	r3,53(r3)
811260c8:	20c6b03a 	or	r3,r4,r3
811260cc:	1809883a 	mov	r4,r3
811260d0:	e0ffff17 	ldw	r3,-4(fp)
811260d4:	1885883a 	add	r2,r3,r2
811260d8:	108002c4 	addi	r2,r2,11
811260dc:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
811260e0:	e0bfff17 	ldw	r2,-4(fp)
811260e4:	10c00283 	ldbu	r3,10(r2)
811260e8:	d0a09017 	ldw	r2,-32192(gp)
811260ec:	10800d83 	ldbu	r2,54(r2)
811260f0:	1884b03a 	or	r2,r3,r2
811260f4:	1007883a 	mov	r3,r2
811260f8:	e0bfff17 	ldw	r2,-4(fp)
811260fc:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
81126100:	d0a09017 	ldw	r2,-32192(gp)
81126104:	10800d03 	ldbu	r2,52(r2)
81126108:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
8112610c:	e0fffe03 	ldbu	r3,-8(fp)
81126110:	e13ffe03 	ldbu	r4,-8(fp)
81126114:	d0a08c44 	addi	r2,gp,-32207
81126118:	2085883a 	add	r2,r4,r2
8112611c:	10800003 	ldbu	r2,0(r2)
81126120:	1009883a 	mov	r4,r2
81126124:	d0a09017 	ldw	r2,-32192(gp)
81126128:	10800d43 	ldbu	r2,53(r2)
8112612c:	0084303a 	nor	r2,zero,r2
81126130:	2084703a 	and	r2,r4,r2
81126134:	1009883a 	mov	r4,r2
81126138:	d0a08c44 	addi	r2,gp,-32207
8112613c:	1885883a 	add	r2,r3,r2
81126140:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
81126144:	e0fffe03 	ldbu	r3,-8(fp)
81126148:	d0a08c44 	addi	r2,gp,-32207
8112614c:	1885883a 	add	r2,r3,r2
81126150:	10800003 	ldbu	r2,0(r2)
81126154:	10803fcc 	andi	r2,r2,255
81126158:	1000071e 	bne	r2,zero,81126178 <OS_EventTaskWait+0x104>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
8112615c:	d0a09017 	ldw	r2,-32192(gp)
81126160:	10800d83 	ldbu	r2,54(r2)
81126164:	0084303a 	nor	r2,zero,r2
81126168:	1007883a 	mov	r3,r2
8112616c:	d0a08c03 	ldbu	r2,-32208(gp)
81126170:	1884703a 	and	r2,r3,r2
81126174:	d0a08c05 	stb	r2,-32208(gp)
    }
}
81126178:	0001883a 	nop
8112617c:	e037883a 	mov	sp,fp
81126180:	df000017 	ldw	fp,0(sp)
81126184:	dec00104 	addi	sp,sp,4
81126188:	f800283a 	ret

8112618c <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
8112618c:	defffb04 	addi	sp,sp,-20
81126190:	de00012e 	bgeu	sp,et,81126198 <OS_EventTaskWaitMulti+0xc>
81126194:	003b68fa 	trap	3
81126198:	df000415 	stw	fp,16(sp)
8112619c:	df000404 	addi	fp,sp,16
811261a0:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
811261a4:	d0a09017 	ldw	r2,-32192(gp)
811261a8:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
811261ac:	d0a09017 	ldw	r2,-32192(gp)
811261b0:	e0ffff17 	ldw	r3,-4(fp)
811261b4:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
811261b8:	e0bfff17 	ldw	r2,-4(fp)
811261bc:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
811261c0:	e0bffc17 	ldw	r2,-16(fp)
811261c4:	10800017 	ldw	r2,0(r2)
811261c8:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
811261cc:	00002006 	br	81126250 <OS_EventTaskWaitMulti+0xc4>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
811261d0:	d0a09017 	ldw	r2,-32192(gp)
811261d4:	10800d03 	ldbu	r2,52(r2)
811261d8:	10803fcc 	andi	r2,r2,255
811261dc:	d0e09017 	ldw	r3,-32192(gp)
811261e0:	18c00d03 	ldbu	r3,52(r3)
811261e4:	18c03fcc 	andi	r3,r3,255
811261e8:	e13ffd17 	ldw	r4,-12(fp)
811261ec:	20c7883a 	add	r3,r4,r3
811261f0:	18c002c4 	addi	r3,r3,11
811261f4:	19000003 	ldbu	r4,0(r3)
811261f8:	d0e09017 	ldw	r3,-32192(gp)
811261fc:	18c00d43 	ldbu	r3,53(r3)
81126200:	20c6b03a 	or	r3,r4,r3
81126204:	1809883a 	mov	r4,r3
81126208:	e0fffd17 	ldw	r3,-12(fp)
8112620c:	1885883a 	add	r2,r3,r2
81126210:	108002c4 	addi	r2,r2,11
81126214:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
81126218:	e0bffd17 	ldw	r2,-12(fp)
8112621c:	10c00283 	ldbu	r3,10(r2)
81126220:	d0a09017 	ldw	r2,-32192(gp)
81126224:	10800d83 	ldbu	r2,54(r2)
81126228:	1884b03a 	or	r2,r3,r2
8112622c:	1007883a 	mov	r3,r2
81126230:	e0bffd17 	ldw	r2,-12(fp)
81126234:	10c00285 	stb	r3,10(r2)
        pevents++;
81126238:	e0bffc17 	ldw	r2,-16(fp)
8112623c:	10800104 	addi	r2,r2,4
81126240:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
81126244:	e0bffc17 	ldw	r2,-16(fp)
81126248:	10800017 	ldw	r2,0(r2)
8112624c:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
81126250:	e0bffd17 	ldw	r2,-12(fp)
81126254:	103fde1e 	bne	r2,zero,811261d0 <__reset+0xfb1061d0>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
81126258:	d0a09017 	ldw	r2,-32192(gp)
8112625c:	10800d03 	ldbu	r2,52(r2)
81126260:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
81126264:	e0fffe03 	ldbu	r3,-8(fp)
81126268:	e13ffe03 	ldbu	r4,-8(fp)
8112626c:	d0a08c44 	addi	r2,gp,-32207
81126270:	2085883a 	add	r2,r4,r2
81126274:	10800003 	ldbu	r2,0(r2)
81126278:	1009883a 	mov	r4,r2
8112627c:	d0a09017 	ldw	r2,-32192(gp)
81126280:	10800d43 	ldbu	r2,53(r2)
81126284:	0084303a 	nor	r2,zero,r2
81126288:	2084703a 	and	r2,r4,r2
8112628c:	1009883a 	mov	r4,r2
81126290:	d0a08c44 	addi	r2,gp,-32207
81126294:	1885883a 	add	r2,r3,r2
81126298:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
8112629c:	e0fffe03 	ldbu	r3,-8(fp)
811262a0:	d0a08c44 	addi	r2,gp,-32207
811262a4:	1885883a 	add	r2,r3,r2
811262a8:	10800003 	ldbu	r2,0(r2)
811262ac:	10803fcc 	andi	r2,r2,255
811262b0:	1000071e 	bne	r2,zero,811262d0 <OS_EventTaskWaitMulti+0x144>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
811262b4:	d0a09017 	ldw	r2,-32192(gp)
811262b8:	10800d83 	ldbu	r2,54(r2)
811262bc:	0084303a 	nor	r2,zero,r2
811262c0:	1007883a 	mov	r3,r2
811262c4:	d0a08c03 	ldbu	r2,-32208(gp)
811262c8:	1884703a 	and	r2,r3,r2
811262cc:	d0a08c05 	stb	r2,-32208(gp)
    }
}
811262d0:	0001883a 	nop
811262d4:	e037883a 	mov	sp,fp
811262d8:	df000017 	ldw	fp,0(sp)
811262dc:	dec00104 	addi	sp,sp,4
811262e0:	f800283a 	ret

811262e4 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
811262e4:	defffc04 	addi	sp,sp,-16
811262e8:	de00012e 	bgeu	sp,et,811262f0 <OS_EventTaskRemove+0xc>
811262ec:	003b68fa 	trap	3
811262f0:	df000315 	stw	fp,12(sp)
811262f4:	df000304 	addi	fp,sp,12
811262f8:	e13ffe15 	stw	r4,-8(fp)
811262fc:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
81126300:	e0bffe17 	ldw	r2,-8(fp)
81126304:	10800d03 	ldbu	r2,52(r2)
81126308:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
8112630c:	e0bffd03 	ldbu	r2,-12(fp)
81126310:	e0fffd03 	ldbu	r3,-12(fp)
81126314:	e13fff17 	ldw	r4,-4(fp)
81126318:	20c7883a 	add	r3,r4,r3
8112631c:	18c002c4 	addi	r3,r3,11
81126320:	18c00003 	ldbu	r3,0(r3)
81126324:	1809883a 	mov	r4,r3
81126328:	e0fffe17 	ldw	r3,-8(fp)
8112632c:	18c00d43 	ldbu	r3,53(r3)
81126330:	00c6303a 	nor	r3,zero,r3
81126334:	20c6703a 	and	r3,r4,r3
81126338:	1809883a 	mov	r4,r3
8112633c:	e0ffff17 	ldw	r3,-4(fp)
81126340:	1885883a 	add	r2,r3,r2
81126344:	108002c4 	addi	r2,r2,11
81126348:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
8112634c:	e0bffd03 	ldbu	r2,-12(fp)
81126350:	e0ffff17 	ldw	r3,-4(fp)
81126354:	1885883a 	add	r2,r3,r2
81126358:	108002c4 	addi	r2,r2,11
8112635c:	10800003 	ldbu	r2,0(r2)
81126360:	10803fcc 	andi	r2,r2,255
81126364:	10000a1e 	bne	r2,zero,81126390 <OS_EventTaskRemove+0xac>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
81126368:	e0bfff17 	ldw	r2,-4(fp)
8112636c:	10800283 	ldbu	r2,10(r2)
81126370:	1007883a 	mov	r3,r2
81126374:	e0bffe17 	ldw	r2,-8(fp)
81126378:	10800d83 	ldbu	r2,54(r2)
8112637c:	0084303a 	nor	r2,zero,r2
81126380:	1884703a 	and	r2,r3,r2
81126384:	1007883a 	mov	r3,r2
81126388:	e0bfff17 	ldw	r2,-4(fp)
8112638c:	10c00285 	stb	r3,10(r2)
    }
}
81126390:	0001883a 	nop
81126394:	e037883a 	mov	sp,fp
81126398:	df000017 	ldw	fp,0(sp)
8112639c:	dec00104 	addi	sp,sp,4
811263a0:	f800283a 	ret

811263a4 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
811263a4:	defffa04 	addi	sp,sp,-24
811263a8:	de00012e 	bgeu	sp,et,811263b0 <OS_EventTaskRemoveMulti+0xc>
811263ac:	003b68fa 	trap	3
811263b0:	df000515 	stw	fp,20(sp)
811263b4:	df000504 	addi	fp,sp,20
811263b8:	e13ffe15 	stw	r4,-8(fp)
811263bc:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
811263c0:	e0bffe17 	ldw	r2,-8(fp)
811263c4:	10800d03 	ldbu	r2,52(r2)
811263c8:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
811263cc:	e0bffe17 	ldw	r2,-8(fp)
811263d0:	10800d83 	ldbu	r2,54(r2)
811263d4:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
811263d8:	e0bffe17 	ldw	r2,-8(fp)
811263dc:	10800d43 	ldbu	r2,53(r2)
811263e0:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
811263e4:	e0bfff17 	ldw	r2,-4(fp)
811263e8:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
811263ec:	e0bffb17 	ldw	r2,-20(fp)
811263f0:	10800017 	ldw	r2,0(r2)
811263f4:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
811263f8:	00002506 	br	81126490 <OS_EventTaskRemoveMulti+0xec>
        pevent->OSEventTbl[y]  &= ~bitx;
811263fc:	e0bffd03 	ldbu	r2,-12(fp)
81126400:	e0fffd03 	ldbu	r3,-12(fp)
81126404:	e13ffc17 	ldw	r4,-16(fp)
81126408:	20c7883a 	add	r3,r4,r3
8112640c:	18c002c4 	addi	r3,r3,11
81126410:	18c00003 	ldbu	r3,0(r3)
81126414:	1809883a 	mov	r4,r3
81126418:	e0fffd83 	ldbu	r3,-10(fp)
8112641c:	00c6303a 	nor	r3,zero,r3
81126420:	20c6703a 	and	r3,r4,r3
81126424:	1809883a 	mov	r4,r3
81126428:	e0fffc17 	ldw	r3,-16(fp)
8112642c:	1885883a 	add	r2,r3,r2
81126430:	108002c4 	addi	r2,r2,11
81126434:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
81126438:	e0bffd03 	ldbu	r2,-12(fp)
8112643c:	e0fffc17 	ldw	r3,-16(fp)
81126440:	1885883a 	add	r2,r3,r2
81126444:	108002c4 	addi	r2,r2,11
81126448:	10800003 	ldbu	r2,0(r2)
8112644c:	10803fcc 	andi	r2,r2,255
81126450:	1000091e 	bne	r2,zero,81126478 <OS_EventTaskRemoveMulti+0xd4>
            pevent->OSEventGrp &= ~bity;
81126454:	e0bffc17 	ldw	r2,-16(fp)
81126458:	10800283 	ldbu	r2,10(r2)
8112645c:	1007883a 	mov	r3,r2
81126460:	e0bffd43 	ldbu	r2,-11(fp)
81126464:	0084303a 	nor	r2,zero,r2
81126468:	1884703a 	and	r2,r3,r2
8112646c:	1007883a 	mov	r3,r2
81126470:	e0bffc17 	ldw	r2,-16(fp)
81126474:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
81126478:	e0bffb17 	ldw	r2,-20(fp)
8112647c:	10800104 	addi	r2,r2,4
81126480:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
81126484:	e0bffb17 	ldw	r2,-20(fp)
81126488:	10800017 	ldw	r2,0(r2)
8112648c:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
81126490:	e0bffc17 	ldw	r2,-16(fp)
81126494:	103fd91e 	bne	r2,zero,811263fc <__reset+0xfb1063fc>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
81126498:	0001883a 	nop
8112649c:	e037883a 	mov	sp,fp
811264a0:	df000017 	ldw	fp,0(sp)
811264a4:	dec00104 	addi	sp,sp,4
811264a8:	f800283a 	ret

811264ac <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
811264ac:	defffc04 	addi	sp,sp,-16
811264b0:	de00012e 	bgeu	sp,et,811264b8 <OS_EventWaitListInit+0xc>
811264b4:	003b68fa 	trap	3
811264b8:	df000315 	stw	fp,12(sp)
811264bc:	df000304 	addi	fp,sp,12
811264c0:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
811264c4:	e0bfff17 	ldw	r2,-4(fp)
811264c8:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
811264cc:	e0bfff17 	ldw	r2,-4(fp)
811264d0:	108002c4 	addi	r2,r2,11
811264d4:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
811264d8:	e03ffe05 	stb	zero,-8(fp)
811264dc:	00000706 	br	811264fc <OS_EventWaitListInit+0x50>
        *ptbl++ = 0;
811264e0:	e0bffd17 	ldw	r2,-12(fp)
811264e4:	10c00044 	addi	r3,r2,1
811264e8:	e0fffd15 	stw	r3,-12(fp)
811264ec:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
811264f0:	e0bffe03 	ldbu	r2,-8(fp)
811264f4:	10800044 	addi	r2,r2,1
811264f8:	e0bffe05 	stb	r2,-8(fp)
811264fc:	e0bffe03 	ldbu	r2,-8(fp)
81126500:	108001b0 	cmpltui	r2,r2,6
81126504:	103ff61e 	bne	r2,zero,811264e0 <__reset+0xfb1064e0>
        *ptbl++ = 0;
    }
}
81126508:	0001883a 	nop
8112650c:	e037883a 	mov	sp,fp
81126510:	df000017 	ldw	fp,0(sp)
81126514:	dec00104 	addi	sp,sp,4
81126518:	f800283a 	ret

8112651c <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
8112651c:	defffb04 	addi	sp,sp,-20
81126520:	de00012e 	bgeu	sp,et,81126528 <OS_InitEventList+0xc>
81126524:	003b68fa 	trap	3
81126528:	dfc00415 	stw	ra,16(sp)
8112652c:	df000315 	stw	fp,12(sp)
81126530:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
81126534:	01430c04 	movi	r5,3120
81126538:	012045b4 	movhi	r4,33046
8112653c:	210e1204 	addi	r4,r4,14408
81126540:	11268c40 	call	811268c4 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
81126544:	00a045b4 	movhi	r2,33046
81126548:	108e1204 	addi	r2,r2,14408
8112654c:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
81126550:	00a045b4 	movhi	r2,33046
81126554:	108e1f04 	addi	r2,r2,14460
81126558:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
8112655c:	e03ffd0d 	sth	zero,-12(fp)
81126560:	00001306 	br	811265b0 <OS_InitEventList+0x94>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
81126564:	e0bffe17 	ldw	r2,-8(fp)
81126568:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
8112656c:	e0bffe17 	ldw	r2,-8(fp)
81126570:	e0ffff17 	ldw	r3,-4(fp)
81126574:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
81126578:	e0bffe17 	ldw	r2,-8(fp)
8112657c:	00c00fc4 	movi	r3,63
81126580:	10c00445 	stb	r3,17(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
81126584:	e0bffe17 	ldw	r2,-8(fp)
81126588:	10000485 	stb	zero,18(r2)
#endif
        pevent1++;
8112658c:	e0bffe17 	ldw	r2,-8(fp)
81126590:	10800d04 	addi	r2,r2,52
81126594:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
81126598:	e0bfff17 	ldw	r2,-4(fp)
8112659c:	10800d04 	addi	r2,r2,52
811265a0:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
811265a4:	e0bffd0b 	ldhu	r2,-12(fp)
811265a8:	10800044 	addi	r2,r2,1
811265ac:	e0bffd0d 	sth	r2,-12(fp)
811265b0:	e0bffd0b 	ldhu	r2,-12(fp)
811265b4:	10800ef0 	cmpltui	r2,r2,59
811265b8:	103fea1e 	bne	r2,zero,81126564 <__reset+0xfb106564>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
811265bc:	e0bffe17 	ldw	r2,-8(fp)
811265c0:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
811265c4:	e0bffe17 	ldw	r2,-8(fp)
811265c8:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
811265cc:	e0bffe17 	ldw	r2,-8(fp)
811265d0:	00c00fc4 	movi	r3,63
811265d4:	10c00445 	stb	r3,17(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
811265d8:	e0bffe17 	ldw	r2,-8(fp)
811265dc:	10000485 	stb	zero,18(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
811265e0:	00a045b4 	movhi	r2,33046
811265e4:	108e1204 	addi	r2,r2,14408
811265e8:	d0a08e15 	stw	r2,-32200(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
811265ec:	0001883a 	nop
811265f0:	e037883a 	mov	sp,fp
811265f4:	dfc00117 	ldw	ra,4(sp)
811265f8:	df000017 	ldw	fp,0(sp)
811265fc:	dec00204 	addi	sp,sp,8
81126600:	f800283a 	ret

81126604 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
81126604:	deffff04 	addi	sp,sp,-4
81126608:	de00012e 	bgeu	sp,et,81126610 <OS_InitMisc+0xc>
8112660c:	003b68fa 	trap	3
81126610:	df000015 	stw	fp,0(sp)
81126614:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
81126618:	d0209215 	stw	zero,-32184(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
8112661c:	d0208f05 	stb	zero,-32196(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
81126620:	d0207d05 	stb	zero,-32268(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
81126624:	d0208845 	stb	zero,-32223(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
81126628:	d0207f05 	stb	zero,-32260(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
8112662c:	d0208415 	stw	zero,-32240(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
81126630:	d0208015 	stw	zero,-32256(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
81126634:	d0209615 	stw	zero,-32168(gp)
    OSIdleCtrMax  = 0L;
81126638:	d0208615 	stw	zero,-32232(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
8112663c:	d0209505 	stb	zero,-32172(gp)
#endif
}
81126640:	0001883a 	nop
81126644:	e037883a 	mov	sp,fp
81126648:	df000017 	ldw	fp,0(sp)
8112664c:	dec00104 	addi	sp,sp,4
81126650:	f800283a 	ret

81126654 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
81126654:	defffd04 	addi	sp,sp,-12
81126658:	de00012e 	bgeu	sp,et,81126660 <OS_InitRdyList+0xc>
8112665c:	003b68fa 	trap	3
81126660:	df000215 	stw	fp,8(sp)
81126664:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
81126668:	d0208c05 	stb	zero,-32208(gp)
    prdytbl       = &OSRdyTbl[0];
8112666c:	d0a08c44 	addi	r2,gp,-32207
81126670:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
81126674:	e03ffe05 	stb	zero,-8(fp)
81126678:	00000706 	br	81126698 <OS_InitRdyList+0x44>
        *prdytbl++ = 0;
8112667c:	e0bfff17 	ldw	r2,-4(fp)
81126680:	10c00044 	addi	r3,r2,1
81126684:	e0ffff15 	stw	r3,-4(fp)
81126688:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
8112668c:	e0bffe03 	ldbu	r2,-8(fp)
81126690:	10800044 	addi	r2,r2,1
81126694:	e0bffe05 	stb	r2,-8(fp)
81126698:	e0bffe03 	ldbu	r2,-8(fp)
8112669c:	108001b0 	cmpltui	r2,r2,6
811266a0:	103ff61e 	bne	r2,zero,8112667c <__reset+0xfb10667c>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
811266a4:	d02081c5 	stb	zero,-32249(gp)
    OSPrioHighRdy = 0;
811266a8:	d0208185 	stb	zero,-32250(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
811266ac:	d0208a15 	stw	zero,-32216(gp)
    OSTCBCur      = (OS_TCB *)0;
811266b0:	d0209015 	stw	zero,-32192(gp)
}
811266b4:	0001883a 	nop
811266b8:	e037883a 	mov	sp,fp
811266bc:	df000017 	ldw	fp,0(sp)
811266c0:	dec00104 	addi	sp,sp,4
811266c4:	f800283a 	ret

811266c8 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
811266c8:	defff804 	addi	sp,sp,-32
811266cc:	de00012e 	bgeu	sp,et,811266d4 <OS_InitTaskIdle+0xc>
811266d0:	003b68fa 	trap	3
811266d4:	dfc00715 	stw	ra,28(sp)
811266d8:	df000615 	stw	fp,24(sp)
811266dc:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
811266e0:	008000c4 	movi	r2,3
811266e4:	d8800415 	stw	r2,16(sp)
811266e8:	d8000315 	stw	zero,12(sp)
811266ec:	00808004 	movi	r2,512
811266f0:	d8800215 	stw	r2,8(sp)
811266f4:	00a045b4 	movhi	r2,33046
811266f8:	108c1204 	addi	r2,r2,12360
811266fc:	d8800115 	stw	r2,4(sp)
81126700:	00bfffd4 	movui	r2,65535
81126704:	d8800015 	stw	r2,0(sp)
81126708:	01c00a04 	movi	r7,40
8112670c:	01a045b4 	movhi	r6,33046
81126710:	318e1104 	addi	r6,r6,14404
81126714:	000b883a 	mov	r5,zero
81126718:	012044b4 	movhi	r4,33042
8112671c:	211aef04 	addi	r4,r4,27580
81126720:	112c5ac0 	call	8112c5ac <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
81126724:	e1bfff04 	addi	r6,fp,-4
81126728:	01604534 	movhi	r5,33044
8112672c:	296f5104 	addi	r5,r5,-17084
81126730:	01000a04 	movi	r4,40
81126734:	112cddc0 	call	8112cddc <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
81126738:	0001883a 	nop
8112673c:	e037883a 	mov	sp,fp
81126740:	dfc00117 	ldw	ra,4(sp)
81126744:	df000017 	ldw	fp,0(sp)
81126748:	dec00204 	addi	sp,sp,8
8112674c:	f800283a 	ret

81126750 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
81126750:	defff804 	addi	sp,sp,-32
81126754:	de00012e 	bgeu	sp,et,8112675c <OS_InitTaskStat+0xc>
81126758:	003b68fa 	trap	3
8112675c:	dfc00715 	stw	ra,28(sp)
81126760:	df000615 	stw	fp,24(sp)
81126764:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
81126768:	008000c4 	movi	r2,3
8112676c:	d8800415 	stw	r2,16(sp)
81126770:	d8000315 	stw	zero,12(sp)
81126774:	00808004 	movi	r2,512
81126778:	d8800215 	stw	r2,8(sp)
8112677c:	00a045b4 	movhi	r2,33046
81126780:	10879a04 	addi	r2,r2,7784
81126784:	d8800115 	stw	r2,4(sp)
81126788:	00bfff94 	movui	r2,65534
8112678c:	d8800015 	stw	r2,0(sp)
81126790:	01c009c4 	movi	r7,39
81126794:	01a045b4 	movhi	r6,33046
81126798:	31899904 	addi	r6,r6,9828
8112679c:	000b883a 	mov	r5,zero
811267a0:	012044b4 	movhi	r4,33042
811267a4:	211b0804 	addi	r4,r4,27680
811267a8:	112c5ac0 	call	8112c5ac <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
811267ac:	e1bfff04 	addi	r6,fp,-4
811267b0:	01604534 	movhi	r5,33044
811267b4:	296f5504 	addi	r5,r5,-17068
811267b8:	010009c4 	movi	r4,39
811267bc:	112cddc0 	call	8112cddc <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
811267c0:	0001883a 	nop
811267c4:	e037883a 	mov	sp,fp
811267c8:	dfc00117 	ldw	ra,4(sp)
811267cc:	df000017 	ldw	fp,0(sp)
811267d0:	dec00204 	addi	sp,sp,8
811267d4:	f800283a 	ret

811267d8 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
811267d8:	defffb04 	addi	sp,sp,-20
811267dc:	de00012e 	bgeu	sp,et,811267e4 <OS_InitTCBList+0xc>
811267e0:	003b68fa 	trap	3
811267e4:	dfc00415 	stw	ra,16(sp)
811267e8:	df000315 	stw	fp,12(sp)
811267ec:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
811267f0:	01439604 	movi	r5,3672
811267f4:	012045b4 	movhi	r4,33046
811267f8:	21111e04 	addi	r4,r4,17528
811267fc:	11268c40 	call	811268c4 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
81126800:	01402904 	movi	r5,164
81126804:	012045b4 	movhi	r4,33046
81126808:	2114b404 	addi	r4,r4,21200
8112680c:	11268c40 	call	811268c4 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
81126810:	00a045b4 	movhi	r2,33046
81126814:	10911e04 	addi	r2,r2,17528
81126818:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
8112681c:	00a045b4 	movhi	r2,33046
81126820:	10913904 	addi	r2,r2,17636
81126824:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
81126828:	e03ffd05 	stb	zero,-12(fp)
8112682c:	00001106 	br	81126874 <OS_InitTCBList+0x9c>
        ptcb1->OSTCBNext = ptcb2;
81126830:	e0bffe17 	ldw	r2,-8(fp)
81126834:	e0ffff17 	ldw	r3,-4(fp)
81126838:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
8112683c:	e0bffe17 	ldw	r2,-8(fp)
81126840:	00c00fc4 	movi	r3,63
81126844:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
81126848:	e0bffe17 	ldw	r2,-8(fp)
8112684c:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
81126850:	e0bffe17 	ldw	r2,-8(fp)
81126854:	10801b04 	addi	r2,r2,108
81126858:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
8112685c:	e0bfff17 	ldw	r2,-4(fp)
81126860:	10801b04 	addi	r2,r2,108
81126864:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
81126868:	e0bffd03 	ldbu	r2,-12(fp)
8112686c:	10800044 	addi	r2,r2,1
81126870:	e0bffd05 	stb	r2,-12(fp)
81126874:	e0bffd03 	ldbu	r2,-12(fp)
81126878:	10800870 	cmpltui	r2,r2,33
8112687c:	103fec1e 	bne	r2,zero,81126830 <__reset+0xfb106830>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
81126880:	e0bffe17 	ldw	r2,-8(fp)
81126884:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
81126888:	e0bffe17 	ldw	r2,-8(fp)
8112688c:	00c00fc4 	movi	r3,63
81126890:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
81126894:	e0bffe17 	ldw	r2,-8(fp)
81126898:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
8112689c:	d0208215 	stw	zero,-32248(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
811268a0:	00a045b4 	movhi	r2,33046
811268a4:	10911e04 	addi	r2,r2,17528
811268a8:	d0a08715 	stw	r2,-32228(gp)
}
811268ac:	0001883a 	nop
811268b0:	e037883a 	mov	sp,fp
811268b4:	dfc00117 	ldw	ra,4(sp)
811268b8:	df000017 	ldw	fp,0(sp)
811268bc:	dec00204 	addi	sp,sp,8
811268c0:	f800283a 	ret

811268c4 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
811268c4:	defffd04 	addi	sp,sp,-12
811268c8:	de00012e 	bgeu	sp,et,811268d0 <OS_MemClr+0xc>
811268cc:	003b68fa 	trap	3
811268d0:	df000215 	stw	fp,8(sp)
811268d4:	df000204 	addi	fp,sp,8
811268d8:	e13ffe15 	stw	r4,-8(fp)
811268dc:	2805883a 	mov	r2,r5
811268e0:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
811268e4:	00000706 	br	81126904 <OS_MemClr+0x40>
        *pdest++ = (INT8U)0;
811268e8:	e0bffe17 	ldw	r2,-8(fp)
811268ec:	10c00044 	addi	r3,r2,1
811268f0:	e0fffe15 	stw	r3,-8(fp)
811268f4:	10000005 	stb	zero,0(r2)
        size--;
811268f8:	e0bfff0b 	ldhu	r2,-4(fp)
811268fc:	10bfffc4 	addi	r2,r2,-1
81126900:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
81126904:	e0bfff0b 	ldhu	r2,-4(fp)
81126908:	103ff71e 	bne	r2,zero,811268e8 <__reset+0xfb1068e8>
        *pdest++ = (INT8U)0;
        size--;
    }
}
8112690c:	0001883a 	nop
81126910:	e037883a 	mov	sp,fp
81126914:	df000017 	ldw	fp,0(sp)
81126918:	dec00104 	addi	sp,sp,4
8112691c:	f800283a 	ret

81126920 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
81126920:	defffc04 	addi	sp,sp,-16
81126924:	de00012e 	bgeu	sp,et,8112692c <OS_MemCopy+0xc>
81126928:	003b68fa 	trap	3
8112692c:	df000315 	stw	fp,12(sp)
81126930:	df000304 	addi	fp,sp,12
81126934:	e13ffd15 	stw	r4,-12(fp)
81126938:	e17ffe15 	stw	r5,-8(fp)
8112693c:	3005883a 	mov	r2,r6
81126940:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
81126944:	00000b06 	br	81126974 <OS_MemCopy+0x54>
        *pdest++ = *psrc++;
81126948:	e0bffd17 	ldw	r2,-12(fp)
8112694c:	10c00044 	addi	r3,r2,1
81126950:	e0fffd15 	stw	r3,-12(fp)
81126954:	e0fffe17 	ldw	r3,-8(fp)
81126958:	19000044 	addi	r4,r3,1
8112695c:	e13ffe15 	stw	r4,-8(fp)
81126960:	18c00003 	ldbu	r3,0(r3)
81126964:	10c00005 	stb	r3,0(r2)
        size--;
81126968:	e0bfff0b 	ldhu	r2,-4(fp)
8112696c:	10bfffc4 	addi	r2,r2,-1
81126970:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
81126974:	e0bfff0b 	ldhu	r2,-4(fp)
81126978:	103ff31e 	bne	r2,zero,81126948 <__reset+0xfb106948>
        *pdest++ = *psrc++;
        size--;
    }
}
8112697c:	0001883a 	nop
81126980:	e037883a 	mov	sp,fp
81126984:	df000017 	ldw	fp,0(sp)
81126988:	dec00104 	addi	sp,sp,4
8112698c:	f800283a 	ret

81126990 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
81126990:	defffb04 	addi	sp,sp,-20
81126994:	de00012e 	bgeu	sp,et,8112699c <OS_Sched+0xc>
81126998:	003b68fa 	trap	3
8112699c:	dfc00415 	stw	ra,16(sp)
811269a0:	df000315 	stw	fp,12(sp)
811269a4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
811269a8:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811269ac:	0005303a 	rdctl	r2,status
811269b0:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811269b4:	e0ffff17 	ldw	r3,-4(fp)
811269b8:	00bfff84 	movi	r2,-2
811269bc:	1884703a 	and	r2,r3,r2
811269c0:	1001703a 	wrctl	status,r2
  
  return context;
811269c4:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
811269c8:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
811269cc:	d0a08f03 	ldbu	r2,-32196(gp)
811269d0:	10803fcc 	andi	r2,r2,255
811269d4:	10001a1e 	bne	r2,zero,81126a40 <OS_Sched+0xb0>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
811269d8:	d0a07d03 	ldbu	r2,-32268(gp)
811269dc:	10803fcc 	andi	r2,r2,255
811269e0:	1000171e 	bne	r2,zero,81126a40 <OS_Sched+0xb0>
            OS_SchedNew();
811269e4:	1126a680 	call	81126a68 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
811269e8:	d0e08183 	ldbu	r3,-32250(gp)
811269ec:	d0a081c3 	ldbu	r2,-32249(gp)
811269f0:	18c03fcc 	andi	r3,r3,255
811269f4:	10803fcc 	andi	r2,r2,255
811269f8:	18801126 	beq	r3,r2,81126a40 <OS_Sched+0xb0>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
811269fc:	d0a08183 	ldbu	r2,-32250(gp)
81126a00:	10c03fcc 	andi	r3,r2,255
81126a04:	00a045b4 	movhi	r2,33046
81126a08:	1094b404 	addi	r2,r2,21200
81126a0c:	18c7883a 	add	r3,r3,r3
81126a10:	18c7883a 	add	r3,r3,r3
81126a14:	10c5883a 	add	r2,r2,r3
81126a18:	10800017 	ldw	r2,0(r2)
81126a1c:	d0a08a15 	stw	r2,-32216(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
81126a20:	d0a08a17 	ldw	r2,-32216(gp)
81126a24:	10c00e17 	ldw	r3,56(r2)
81126a28:	18c00044 	addi	r3,r3,1
81126a2c:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
81126a30:	d0a08417 	ldw	r2,-32240(gp)
81126a34:	10800044 	addi	r2,r2,1
81126a38:	d0a08415 	stw	r2,-32240(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
81126a3c:	11389900 	call	81138990 <OSCtxSw>
81126a40:	e0bffd17 	ldw	r2,-12(fp)
81126a44:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81126a48:	e0bffe17 	ldw	r2,-8(fp)
81126a4c:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
81126a50:	0001883a 	nop
81126a54:	e037883a 	mov	sp,fp
81126a58:	dfc00117 	ldw	ra,4(sp)
81126a5c:	df000017 	ldw	fp,0(sp)
81126a60:	dec00204 	addi	sp,sp,8
81126a64:	f800283a 	ret

81126a68 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
81126a68:	defffe04 	addi	sp,sp,-8
81126a6c:	de00012e 	bgeu	sp,et,81126a74 <OS_SchedNew+0xc>
81126a70:	003b68fa 	trap	3
81126a74:	df000115 	stw	fp,4(sp)
81126a78:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
81126a7c:	d0a08c03 	ldbu	r2,-32208(gp)
81126a80:	10c03fcc 	andi	r3,r2,255
81126a84:	00a04534 	movhi	r2,33044
81126a88:	10af1104 	addi	r2,r2,-17340
81126a8c:	10c5883a 	add	r2,r2,r3
81126a90:	10800003 	ldbu	r2,0(r2)
81126a94:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
81126a98:	e0bfff03 	ldbu	r2,-4(fp)
81126a9c:	100490fa 	slli	r2,r2,3
81126aa0:	1009883a 	mov	r4,r2
81126aa4:	e0ffff03 	ldbu	r3,-4(fp)
81126aa8:	d0a08c44 	addi	r2,gp,-32207
81126aac:	1885883a 	add	r2,r3,r2
81126ab0:	10800003 	ldbu	r2,0(r2)
81126ab4:	10c03fcc 	andi	r3,r2,255
81126ab8:	00a04534 	movhi	r2,33044
81126abc:	10af1104 	addi	r2,r2,-17340
81126ac0:	10c5883a 	add	r2,r2,r3
81126ac4:	10800003 	ldbu	r2,0(r2)
81126ac8:	2085883a 	add	r2,r4,r2
81126acc:	d0a08185 	stb	r2,-32250(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
81126ad0:	0001883a 	nop
81126ad4:	e037883a 	mov	sp,fp
81126ad8:	df000017 	ldw	fp,0(sp)
81126adc:	dec00104 	addi	sp,sp,4
81126ae0:	f800283a 	ret

81126ae4 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
81126ae4:	defffc04 	addi	sp,sp,-16
81126ae8:	de00012e 	bgeu	sp,et,81126af0 <OS_StrCopy+0xc>
81126aec:	003b68fa 	trap	3
81126af0:	df000315 	stw	fp,12(sp)
81126af4:	df000304 	addi	fp,sp,12
81126af8:	e13ffe15 	stw	r4,-8(fp)
81126afc:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
81126b00:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
81126b04:	00000b06 	br	81126b34 <OS_StrCopy+0x50>
        *pdest++ = *psrc++;
81126b08:	e0bffe17 	ldw	r2,-8(fp)
81126b0c:	10c00044 	addi	r3,r2,1
81126b10:	e0fffe15 	stw	r3,-8(fp)
81126b14:	e0ffff17 	ldw	r3,-4(fp)
81126b18:	19000044 	addi	r4,r3,1
81126b1c:	e13fff15 	stw	r4,-4(fp)
81126b20:	18c00003 	ldbu	r3,0(r3)
81126b24:	10c00005 	stb	r3,0(r2)
        len++;
81126b28:	e0bffd03 	ldbu	r2,-12(fp)
81126b2c:	10800044 	addi	r2,r2,1
81126b30:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
81126b34:	e0bfff17 	ldw	r2,-4(fp)
81126b38:	10800003 	ldbu	r2,0(r2)
81126b3c:	10803fcc 	andi	r2,r2,255
81126b40:	103ff11e 	bne	r2,zero,81126b08 <__reset+0xfb106b08>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
81126b44:	e0bffe17 	ldw	r2,-8(fp)
81126b48:	10000005 	stb	zero,0(r2)
    return (len);
81126b4c:	e0bffd03 	ldbu	r2,-12(fp)
}
81126b50:	e037883a 	mov	sp,fp
81126b54:	df000017 	ldw	fp,0(sp)
81126b58:	dec00104 	addi	sp,sp,4
81126b5c:	f800283a 	ret

81126b60 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
81126b60:	defffd04 	addi	sp,sp,-12
81126b64:	de00012e 	bgeu	sp,et,81126b6c <OS_StrLen+0xc>
81126b68:	003b68fa 	trap	3
81126b6c:	df000215 	stw	fp,8(sp)
81126b70:	df000204 	addi	fp,sp,8
81126b74:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
81126b78:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
81126b7c:	00000606 	br	81126b98 <OS_StrLen+0x38>
        psrc++;
81126b80:	e0bfff17 	ldw	r2,-4(fp)
81126b84:	10800044 	addi	r2,r2,1
81126b88:	e0bfff15 	stw	r2,-4(fp)
        len++;
81126b8c:	e0bffe03 	ldbu	r2,-8(fp)
81126b90:	10800044 	addi	r2,r2,1
81126b94:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
81126b98:	e0bfff17 	ldw	r2,-4(fp)
81126b9c:	10800003 	ldbu	r2,0(r2)
81126ba0:	10803fcc 	andi	r2,r2,255
81126ba4:	103ff61e 	bne	r2,zero,81126b80 <__reset+0xfb106b80>
        psrc++;
        len++;
    }
    return (len);
81126ba8:	e0bffe03 	ldbu	r2,-8(fp)
}
81126bac:	e037883a 	mov	sp,fp
81126bb0:	df000017 	ldw	fp,0(sp)
81126bb4:	dec00104 	addi	sp,sp,4
81126bb8:	f800283a 	ret

81126bbc <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
81126bbc:	defffa04 	addi	sp,sp,-24
81126bc0:	de00012e 	bgeu	sp,et,81126bc8 <OS_TaskIdle+0xc>
81126bc4:	003b68fa 	trap	3
81126bc8:	dfc00515 	stw	ra,20(sp)
81126bcc:	df000415 	stw	fp,16(sp)
81126bd0:	df000404 	addi	fp,sp,16
81126bd4:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81126bd8:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81126bdc:	0005303a 	rdctl	r2,status
81126be0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81126be4:	e0fffd17 	ldw	r3,-12(fp)
81126be8:	00bfff84 	movi	r2,-2
81126bec:	1884703a 	and	r2,r3,r2
81126bf0:	1001703a 	wrctl	status,r2
  
  return context;
81126bf4:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
81126bf8:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
81126bfc:	d0a08017 	ldw	r2,-32256(gp)
81126c00:	10800044 	addi	r2,r2,1
81126c04:	d0a08015 	stw	r2,-32256(gp)
81126c08:	e0bffc17 	ldw	r2,-16(fp)
81126c0c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81126c10:	e0bffe17 	ldw	r2,-8(fp)
81126c14:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
81126c18:	1138d240 	call	81138d24 <OSTaskIdleHook>
    }
81126c1c:	003fef06 	br	81126bdc <__reset+0xfb106bdc>

81126c20 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
81126c20:	defff804 	addi	sp,sp,-32
81126c24:	de00012e 	bgeu	sp,et,81126c2c <OS_TaskStat+0xc>
81126c28:	003b68fa 	trap	3
81126c2c:	dfc00715 	stw	ra,28(sp)
81126c30:	df000615 	stw	fp,24(sp)
81126c34:	dc400515 	stw	r17,20(sp)
81126c38:	dc000415 	stw	r16,16(sp)
81126c3c:	df000604 	addi	fp,sp,24
81126c40:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81126c44:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
81126c48:	00000206 	br	81126c54 <OS_TaskStat+0x34>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
81126c4c:	01003204 	movi	r4,200
81126c50:	112d6cc0 	call	8112d6cc <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
81126c54:	d0a09503 	ldbu	r2,-32172(gp)
81126c58:	10803fcc 	andi	r2,r2,255
81126c5c:	103ffb26 	beq	r2,zero,81126c4c <__reset+0xfb106c4c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
81126c60:	d0e08617 	ldw	r3,-32232(gp)
81126c64:	00947b34 	movhi	r2,20972
81126c68:	10a147c4 	addi	r2,r2,-31457
81126c6c:	1888383a 	mulxuu	r4,r3,r2
81126c70:	1885383a 	mul	r2,r3,r2
81126c74:	1021883a 	mov	r16,r2
81126c78:	2023883a 	mov	r17,r4
81126c7c:	8804d17a 	srli	r2,r17,5
81126c80:	d0a08615 	stw	r2,-32232(gp)
    if (OSIdleCtrMax == 0L) {
81126c84:	d0a08617 	ldw	r2,-32232(gp)
81126c88:	1000031e 	bne	r2,zero,81126c98 <OS_TaskStat+0x78>
        OSCPUUsage = 0;
81126c8c:	d0208805 	stb	zero,-32224(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
81126c90:	01003fc4 	movi	r4,255
81126c94:	112d33c0 	call	8112d33c <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81126c98:	0005303a 	rdctl	r2,status
81126c9c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81126ca0:	e0fffb17 	ldw	r3,-20(fp)
81126ca4:	00bfff84 	movi	r2,-2
81126ca8:	1884703a 	and	r2,r3,r2
81126cac:	1001703a 	wrctl	status,r2
  
  return context;
81126cb0:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
81126cb4:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
81126cb8:	d0a08017 	ldw	r2,-32256(gp)
81126cbc:	d0a09615 	stw	r2,-32168(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
81126cc0:	d0208015 	stw	zero,-32256(gp)
81126cc4:	e0bffa17 	ldw	r2,-24(fp)
81126cc8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81126ccc:	e0bffc17 	ldw	r2,-16(fp)
81126cd0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
81126cd4:	d0e09617 	ldw	r3,-32168(gp)
81126cd8:	d0a08617 	ldw	r2,-32232(gp)
81126cdc:	1885203a 	divu	r2,r3,r2
81126ce0:	1007883a 	mov	r3,r2
81126ce4:	00801904 	movi	r2,100
81126ce8:	10c5c83a 	sub	r2,r2,r3
81126cec:	d0a08805 	stb	r2,-32224(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
81126cf0:	1138c540 	call	81138c54 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
81126cf4:	1126d040 	call	81126d04 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
81126cf8:	01001904 	movi	r4,100
81126cfc:	112d6cc0 	call	8112d6cc <OSTimeDly>
    }
81126d00:	003fe506 	br	81126c98 <__reset+0xfb106c98>

81126d04 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
81126d04:	defffa04 	addi	sp,sp,-24
81126d08:	de00012e 	bgeu	sp,et,81126d10 <OS_TaskStatStkChk+0xc>
81126d0c:	003b68fa 	trap	3
81126d10:	dfc00515 	stw	ra,20(sp)
81126d14:	df000415 	stw	fp,16(sp)
81126d18:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
81126d1c:	e03ffc05 	stb	zero,-16(fp)
81126d20:	00002406 	br	81126db4 <OS_TaskStatStkChk+0xb0>
        err = OSTaskStkChk(prio, &stk_data);
81126d24:	e0bffc03 	ldbu	r2,-16(fp)
81126d28:	e0fffe04 	addi	r3,fp,-8
81126d2c:	180b883a 	mov	r5,r3
81126d30:	1009883a 	mov	r4,r2
81126d34:	112d1740 	call	8112d174 <OSTaskStkChk>
81126d38:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
81126d3c:	e0bffc43 	ldbu	r2,-15(fp)
81126d40:	1000191e 	bne	r2,zero,81126da8 <OS_TaskStatStkChk+0xa4>
            ptcb = OSTCBPrioTbl[prio];
81126d44:	e0fffc03 	ldbu	r3,-16(fp)
81126d48:	00a045b4 	movhi	r2,33046
81126d4c:	1094b404 	addi	r2,r2,21200
81126d50:	18c7883a 	add	r3,r3,r3
81126d54:	18c7883a 	add	r3,r3,r3
81126d58:	10c5883a 	add	r2,r2,r3
81126d5c:	10800017 	ldw	r2,0(r2)
81126d60:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
81126d64:	e0bffd17 	ldw	r2,-12(fp)
81126d68:	10000f26 	beq	r2,zero,81126da8 <OS_TaskStatStkChk+0xa4>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
81126d6c:	e0bffd17 	ldw	r2,-12(fp)
81126d70:	10800060 	cmpeqi	r2,r2,1
81126d74:	10000c1e 	bne	r2,zero,81126da8 <OS_TaskStatStkChk+0xa4>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
81126d78:	e0bffd17 	ldw	r2,-12(fp)
81126d7c:	10c00217 	ldw	r3,8(r2)
81126d80:	e0bffd17 	ldw	r2,-12(fp)
81126d84:	10800317 	ldw	r2,12(r2)
81126d88:	1085883a 	add	r2,r2,r2
81126d8c:	1085883a 	add	r2,r2,r2
81126d90:	1887883a 	add	r3,r3,r2
81126d94:	e0bffd17 	ldw	r2,-12(fp)
81126d98:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
81126d9c:	e0ffff17 	ldw	r3,-4(fp)
81126da0:	e0bffd17 	ldw	r2,-12(fp)
81126da4:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
81126da8:	e0bffc03 	ldbu	r2,-16(fp)
81126dac:	10800044 	addi	r2,r2,1
81126db0:	e0bffc05 	stb	r2,-16(fp)
81126db4:	e0bffc03 	ldbu	r2,-16(fp)
81126db8:	10800a70 	cmpltui	r2,r2,41
81126dbc:	103fd91e 	bne	r2,zero,81126d24 <__reset+0xfb106d24>
#endif
                }
            }
        }
    }
}
81126dc0:	0001883a 	nop
81126dc4:	e037883a 	mov	sp,fp
81126dc8:	dfc00117 	ldw	ra,4(sp)
81126dcc:	df000017 	ldw	fp,0(sp)
81126dd0:	dec00204 	addi	sp,sp,8
81126dd4:	f800283a 	ret

81126dd8 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
81126dd8:	defff204 	addi	sp,sp,-56
81126ddc:	de00012e 	bgeu	sp,et,81126de4 <OS_TCBInit+0xc>
81126de0:	003b68fa 	trap	3
81126de4:	dfc00d15 	stw	ra,52(sp)
81126de8:	df000c15 	stw	fp,48(sp)
81126dec:	df000c04 	addi	fp,sp,48
81126df0:	e17ffc15 	stw	r5,-16(fp)
81126df4:	e1bffd15 	stw	r6,-12(fp)
81126df8:	3807883a 	mov	r3,r7
81126dfc:	e0800417 	ldw	r2,16(fp)
81126e00:	e13ffb05 	stb	r4,-20(fp)
81126e04:	e0fffe0d 	sth	r3,-8(fp)
81126e08:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
81126e0c:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81126e10:	0005303a 	rdctl	r2,status
81126e14:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81126e18:	e0fffa17 	ldw	r3,-24(fp)
81126e1c:	00bfff84 	movi	r2,-2
81126e20:	1884703a 	and	r2,r3,r2
81126e24:	1001703a 	wrctl	status,r2
  
  return context;
81126e28:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
81126e2c:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
81126e30:	d0a08717 	ldw	r2,-32228(gp)
81126e34:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
81126e38:	e0bff617 	ldw	r2,-40(fp)
81126e3c:	10009326 	beq	r2,zero,8112708c <OS_TCBInit+0x2b4>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
81126e40:	e0bff617 	ldw	r2,-40(fp)
81126e44:	10800517 	ldw	r2,20(r2)
81126e48:	d0a08715 	stw	r2,-32228(gp)
81126e4c:	e0bff417 	ldw	r2,-48(fp)
81126e50:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81126e54:	e0bff817 	ldw	r2,-32(fp)
81126e58:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
81126e5c:	e0bff617 	ldw	r2,-40(fp)
81126e60:	e0fffc17 	ldw	r3,-16(fp)
81126e64:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
81126e68:	e0bff617 	ldw	r2,-40(fp)
81126e6c:	e0fffb03 	ldbu	r3,-20(fp)
81126e70:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
81126e74:	e0bff617 	ldw	r2,-40(fp)
81126e78:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
81126e7c:	e0bff617 	ldw	r2,-40(fp)
81126e80:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
81126e84:	e0bff617 	ldw	r2,-40(fp)
81126e88:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
81126e8c:	e0bff617 	ldw	r2,-40(fp)
81126e90:	e0c00317 	ldw	r3,12(fp)
81126e94:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
81126e98:	e0bff617 	ldw	r2,-40(fp)
81126e9c:	e0c00217 	ldw	r3,8(fp)
81126ea0:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
81126ea4:	e0bff617 	ldw	r2,-40(fp)
81126ea8:	e0fffd17 	ldw	r3,-12(fp)
81126eac:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
81126eb0:	e0bff617 	ldw	r2,-40(fp)
81126eb4:	e0ffff0b 	ldhu	r3,-4(fp)
81126eb8:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
81126ebc:	e0bff617 	ldw	r2,-40(fp)
81126ec0:	e0fffe0b 	ldhu	r3,-8(fp)
81126ec4:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
81126ec8:	e0bff617 	ldw	r2,-40(fp)
81126ecc:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
81126ed0:	e0bffb03 	ldbu	r2,-20(fp)
81126ed4:	1004d0fa 	srli	r2,r2,3
81126ed8:	1007883a 	mov	r3,r2
81126edc:	e0bff617 	ldw	r2,-40(fp)
81126ee0:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
81126ee4:	e0bffb03 	ldbu	r2,-20(fp)
81126ee8:	108001cc 	andi	r2,r2,7
81126eec:	1007883a 	mov	r3,r2
81126ef0:	e0bff617 	ldw	r2,-40(fp)
81126ef4:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
81126ef8:	e0bff617 	ldw	r2,-40(fp)
81126efc:	10800d03 	ldbu	r2,52(r2)
81126f00:	10803fcc 	andi	r2,r2,255
81126f04:	00c00044 	movi	r3,1
81126f08:	1884983a 	sll	r2,r3,r2
81126f0c:	1007883a 	mov	r3,r2
81126f10:	e0bff617 	ldw	r2,-40(fp)
81126f14:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
81126f18:	e0bff617 	ldw	r2,-40(fp)
81126f1c:	10800cc3 	ldbu	r2,51(r2)
81126f20:	10803fcc 	andi	r2,r2,255
81126f24:	00c00044 	movi	r3,1
81126f28:	1884983a 	sll	r2,r3,r2
81126f2c:	1007883a 	mov	r3,r2
81126f30:	e0bff617 	ldw	r2,-40(fp)
81126f34:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
81126f38:	e0bff617 	ldw	r2,-40(fp)
81126f3c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
81126f40:	e0bff617 	ldw	r2,-40(fp)
81126f44:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
81126f48:	e0bff617 	ldw	r2,-40(fp)
81126f4c:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
81126f50:	e0bff617 	ldw	r2,-40(fp)
81126f54:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
81126f58:	e0bff617 	ldw	r2,-40(fp)
81126f5c:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
81126f60:	e0bff617 	ldw	r2,-40(fp)
81126f64:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
81126f68:	e0bff617 	ldw	r2,-40(fp)
81126f6c:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
81126f70:	e0bff617 	ldw	r2,-40(fp)
81126f74:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
81126f78:	e0bff617 	ldw	r2,-40(fp)
81126f7c:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
81126f80:	e0bff617 	ldw	r2,-40(fp)
81126f84:	00c00fc4 	movi	r3,63
81126f88:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
81126f8c:	e0bff617 	ldw	r2,-40(fp)
81126f90:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
81126f94:	e13ff617 	ldw	r4,-40(fp)
81126f98:	1138d4c0 	call	81138d4c <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
81126f9c:	e13ff617 	ldw	r4,-40(fp)
81126fa0:	1138bd40 	call	81138bd4 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81126fa4:	0005303a 	rdctl	r2,status
81126fa8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81126fac:	e0fff517 	ldw	r3,-44(fp)
81126fb0:	00bfff84 	movi	r2,-2
81126fb4:	1884703a 	and	r2,r3,r2
81126fb8:	1001703a 	wrctl	status,r2
  
  return context;
81126fbc:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
81126fc0:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
81126fc4:	e0fffb03 	ldbu	r3,-20(fp)
81126fc8:	00a045b4 	movhi	r2,33046
81126fcc:	1094b404 	addi	r2,r2,21200
81126fd0:	18c7883a 	add	r3,r3,r3
81126fd4:	18c7883a 	add	r3,r3,r3
81126fd8:	10c5883a 	add	r2,r2,r3
81126fdc:	e0fff617 	ldw	r3,-40(fp)
81126fe0:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
81126fe4:	d0e08217 	ldw	r3,-32248(gp)
81126fe8:	e0bff617 	ldw	r2,-40(fp)
81126fec:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
81126ff0:	e0bff617 	ldw	r2,-40(fp)
81126ff4:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
81126ff8:	d0a08217 	ldw	r2,-32248(gp)
81126ffc:	10000326 	beq	r2,zero,8112700c <OS_TCBInit+0x234>
            OSTCBList->OSTCBPrev = ptcb;
81127000:	d0a08217 	ldw	r2,-32248(gp)
81127004:	e0fff617 	ldw	r3,-40(fp)
81127008:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
8112700c:	e0bff617 	ldw	r2,-40(fp)
81127010:	d0a08215 	stw	r2,-32248(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
81127014:	e0bff617 	ldw	r2,-40(fp)
81127018:	10c00d83 	ldbu	r3,54(r2)
8112701c:	d0a08c03 	ldbu	r2,-32208(gp)
81127020:	1884b03a 	or	r2,r3,r2
81127024:	d0a08c05 	stb	r2,-32208(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
81127028:	e0bff617 	ldw	r2,-40(fp)
8112702c:	10800d03 	ldbu	r2,52(r2)
81127030:	10c03fcc 	andi	r3,r2,255
81127034:	e0bff617 	ldw	r2,-40(fp)
81127038:	10800d03 	ldbu	r2,52(r2)
8112703c:	11003fcc 	andi	r4,r2,255
81127040:	d0a08c44 	addi	r2,gp,-32207
81127044:	2085883a 	add	r2,r4,r2
81127048:	11000003 	ldbu	r4,0(r2)
8112704c:	e0bff617 	ldw	r2,-40(fp)
81127050:	10800d43 	ldbu	r2,53(r2)
81127054:	2084b03a 	or	r2,r4,r2
81127058:	1009883a 	mov	r4,r2
8112705c:	d0a08c44 	addi	r2,gp,-32207
81127060:	1885883a 	add	r2,r3,r2
81127064:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
81127068:	d0a08843 	ldbu	r2,-32223(gp)
8112706c:	10800044 	addi	r2,r2,1
81127070:	d0a08845 	stb	r2,-32223(gp)
81127074:	e0bff417 	ldw	r2,-48(fp)
81127078:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112707c:	e0bff717 	ldw	r2,-36(fp)
81127080:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
81127084:	0005883a 	mov	r2,zero
81127088:	00000506 	br	811270a0 <OS_TCBInit+0x2c8>
8112708c:	e0bff417 	ldw	r2,-48(fp)
81127090:	e0bff915 	stw	r2,-28(fp)
81127094:	e0bff917 	ldw	r2,-28(fp)
81127098:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
8112709c:	00801084 	movi	r2,66
}
811270a0:	e037883a 	mov	sp,fp
811270a4:	dfc00117 	ldw	ra,4(sp)
811270a8:	df000017 	ldw	fp,0(sp)
811270ac:	dec00204 	addi	sp,sp,8
811270b0:	f800283a 	ret

811270b4 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
811270b4:	defffe04 	addi	sp,sp,-8
811270b8:	de00012e 	bgeu	sp,et,811270c0 <OSDebugInit+0xc>
811270bc:	003b68fa 	trap	3
811270c0:	df000115 	stw	fp,4(sp)
811270c4:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
811270c8:	d0a01c04 	addi	r2,gp,-32656
811270cc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
811270d0:	d0a01d04 	addi	r2,gp,-32652
811270d4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
811270d8:	d0a01e84 	addi	r2,gp,-32646
811270dc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
811270e0:	d0a01f04 	addi	r2,gp,-32644
811270e4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
811270e8:	d0a01e04 	addi	r2,gp,-32648
811270ec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
811270f0:	d0a01f84 	addi	r2,gp,-32642
811270f4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
811270f8:	d0a02004 	addi	r2,gp,-32640
811270fc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
81127100:	d0a02084 	addi	r2,gp,-32638
81127104:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
81127108:	d0a02104 	addi	r2,gp,-32636
8112710c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
81127110:	d0a02184 	addi	r2,gp,-32634
81127114:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
81127118:	d0a02204 	addi	r2,gp,-32632
8112711c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
81127120:	d0a02284 	addi	r2,gp,-32630
81127124:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
81127128:	d0a02304 	addi	r2,gp,-32628
8112712c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
81127130:	d0a02384 	addi	r2,gp,-32626
81127134:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
81127138:	d0a02404 	addi	r2,gp,-32624
8112713c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
81127140:	d0a02484 	addi	r2,gp,-32622
81127144:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
81127148:	d0a02504 	addi	r2,gp,-32620
8112714c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
81127150:	d0a02584 	addi	r2,gp,-32618
81127154:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
81127158:	d0a02604 	addi	r2,gp,-32616
8112715c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
81127160:	d0a02684 	addi	r2,gp,-32614
81127164:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
81127168:	d0a02704 	addi	r2,gp,-32612
8112716c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
81127170:	d0a02784 	addi	r2,gp,-32610
81127174:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
81127178:	d0a02804 	addi	r2,gp,-32608
8112717c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
81127180:	d0a02884 	addi	r2,gp,-32606
81127184:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
81127188:	d0a02904 	addi	r2,gp,-32604
8112718c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
81127190:	d0a02984 	addi	r2,gp,-32602
81127194:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
81127198:	d0a02a04 	addi	r2,gp,-32600
8112719c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
811271a0:	d0a02a84 	addi	r2,gp,-32598
811271a4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
811271a8:	d0a02b04 	addi	r2,gp,-32596
811271ac:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
811271b0:	d0a02b84 	addi	r2,gp,-32594
811271b4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
811271b8:	d0a02c04 	addi	r2,gp,-32592
811271bc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
811271c0:	d0a02c84 	addi	r2,gp,-32590
811271c4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
811271c8:	d0a02d04 	addi	r2,gp,-32588
811271cc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
811271d0:	d0a02d84 	addi	r2,gp,-32586
811271d4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
811271d8:	d0a02e04 	addi	r2,gp,-32584
811271dc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
811271e0:	d0a02e84 	addi	r2,gp,-32582
811271e4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
811271e8:	d0a02f04 	addi	r2,gp,-32580
811271ec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
811271f0:	d0a02f84 	addi	r2,gp,-32578
811271f4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
811271f8:	d0a03004 	addi	r2,gp,-32576
811271fc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
81127200:	d0a03084 	addi	r2,gp,-32574
81127204:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
81127208:	d0a03104 	addi	r2,gp,-32572
8112720c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
81127210:	d0a03184 	addi	r2,gp,-32570
81127214:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
81127218:	d0a03204 	addi	r2,gp,-32568
8112721c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
81127220:	d0a03284 	addi	r2,gp,-32566
81127224:	e0bfff15 	stw	r2,-4(fp)

#if OS_TMR_EN > 0
    ptemp = (void *)&OSTmrTbl[0];
81127228:	00a045b4 	movhi	r2,33046
8112722c:	10842604 	addi	r2,r2,4248
81127230:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrWheelTbl[0];
81127234:	00a045b4 	movhi	r2,33046
81127238:	10834604 	addi	r2,r2,3352
8112723c:	e0bfff15 	stw	r2,-4(fp)
    
    ptemp = (void *)&OSTmrEn;
81127240:	d0a03384 	addi	r2,gp,-32562
81127244:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrCfgMax;
81127248:	d0a03404 	addi	r2,gp,-32560
8112724c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrCfgNameSize;
81127250:	d0a03484 	addi	r2,gp,-32558
81127254:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrCfgWheelSize;
81127258:	d0a03504 	addi	r2,gp,-32556
8112725c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrCfgTicksPerSec;
81127260:	d0a03584 	addi	r2,gp,-32554
81127264:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrSize;
81127268:	d0a03604 	addi	r2,gp,-32552
8112726c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrTblSize;
81127270:	d0a03684 	addi	r2,gp,-32550
81127274:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
81127278:	d0a03704 	addi	r2,gp,-32548
8112727c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrWheelTblSize;
81127280:	d0a03784 	addi	r2,gp,-32546
81127284:	e0bfff15 	stw	r2,-4(fp)
#endif

    ptemp = (void *)&OSVersionNbr;
81127288:	d0a03304 	addi	r2,gp,-32564
8112728c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
81127290:	d0a03804 	addi	r2,gp,-32544
81127294:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
81127298:	0001883a 	nop
8112729c:	e037883a 	mov	sp,fp
811272a0:	df000017 	ldw	fp,0(sp)
811272a4:	dec00104 	addi	sp,sp,4
811272a8:	f800283a 	ret

811272ac <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
811272ac:	defff204 	addi	sp,sp,-56
811272b0:	de00012e 	bgeu	sp,et,811272b8 <OSFlagAccept+0xc>
811272b4:	003b68fa 	trap	3
811272b8:	df000d15 	stw	fp,52(sp)
811272bc:	df000d04 	addi	fp,sp,52
811272c0:	e13ffc15 	stw	r4,-16(fp)
811272c4:	2807883a 	mov	r3,r5
811272c8:	3005883a 	mov	r2,r6
811272cc:	e1ffff15 	stw	r7,-4(fp)
811272d0:	e0fffd0d 	sth	r3,-12(fp)
811272d4:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
811272d8:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
811272dc:	e0bfff17 	ldw	r2,-4(fp)
811272e0:	1000021e 	bne	r2,zero,811272ec <OSFlagAccept+0x40>
        return ((OS_FLAGS)0);
811272e4:	0005883a 	mov	r2,zero
811272e8:	0000b006 	br	811275ac <OSFlagAccept+0x300>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
811272ec:	e0bffc17 	ldw	r2,-16(fp)
811272f0:	1000051e 	bne	r2,zero,81127308 <OSFlagAccept+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
811272f4:	e0bfff17 	ldw	r2,-4(fp)
811272f8:	00c01b84 	movi	r3,110
811272fc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
81127300:	0005883a 	mov	r2,zero
81127304:	0000a906 	br	811275ac <OSFlagAccept+0x300>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
81127308:	e0bffc17 	ldw	r2,-16(fp)
8112730c:	10800003 	ldbu	r2,0(r2)
81127310:	10803fcc 	andi	r2,r2,255
81127314:	10800160 	cmpeqi	r2,r2,5
81127318:	1000051e 	bne	r2,zero,81127330 <OSFlagAccept+0x84>
        *perr = OS_ERR_EVENT_TYPE;
8112731c:	e0bfff17 	ldw	r2,-4(fp)
81127320:	00c00044 	movi	r3,1
81127324:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
81127328:	0005883a 	mov	r2,zero
8112732c:	00009f06 	br	811275ac <OSFlagAccept+0x300>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
81127330:	e0fffe03 	ldbu	r3,-8(fp)
81127334:	00bfe004 	movi	r2,-128
81127338:	1884703a 	and	r2,r3,r2
8112733c:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
81127340:	e0bff503 	ldbu	r2,-44(fp)
81127344:	10000626 	beq	r2,zero,81127360 <OSFlagAccept+0xb4>
        wait_type &= ~OS_FLAG_CONSUME;
81127348:	e0bffe03 	ldbu	r2,-8(fp)
8112734c:	10801fcc 	andi	r2,r2,127
81127350:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
81127354:	00800044 	movi	r2,1
81127358:	e0bff385 	stb	r2,-50(fp)
8112735c:	00000106 	br	81127364 <OSFlagAccept+0xb8>
    } else {
        consume    = OS_FALSE;
81127360:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
81127364:	e0bfff17 	ldw	r2,-4(fp)
81127368:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112736c:	0005303a 	rdctl	r2,status
81127370:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81127374:	e0fffb17 	ldw	r3,-20(fp)
81127378:	00bfff84 	movi	r2,-2
8112737c:	1884703a 	and	r2,r3,r2
81127380:	1001703a 	wrctl	status,r2
  
  return context;
81127384:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
81127388:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
8112738c:	e0bffe03 	ldbu	r2,-8(fp)
81127390:	10c00060 	cmpeqi	r3,r2,1
81127394:	18005f1e 	bne	r3,zero,81127514 <OSFlagAccept+0x268>
81127398:	10c00088 	cmpgei	r3,r2,2
8112739c:	1800021e 	bne	r3,zero,811273a8 <OSFlagAccept+0xfc>
811273a0:	10003f26 	beq	r2,zero,811274a0 <OSFlagAccept+0x1f4>
811273a4:	00007706 	br	81127584 <OSFlagAccept+0x2d8>
811273a8:	10c000a0 	cmpeqi	r3,r2,2
811273ac:	1800031e 	bne	r3,zero,811273bc <OSFlagAccept+0x110>
811273b0:	108000e0 	cmpeqi	r2,r2,3
811273b4:	10001e1e 	bne	r2,zero,81127430 <OSFlagAccept+0x184>
811273b8:	00007206 	br	81127584 <OSFlagAccept+0x2d8>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
811273bc:	e0bffc17 	ldw	r2,-16(fp)
811273c0:	10c0020b 	ldhu	r3,8(r2)
811273c4:	e0bffd0b 	ldhu	r2,-12(fp)
811273c8:	1884703a 	and	r2,r3,r2
811273cc:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
811273d0:	e0fff30b 	ldhu	r3,-52(fp)
811273d4:	e0bffd0b 	ldhu	r2,-12(fp)
811273d8:	18800d1e 	bne	r3,r2,81127410 <OSFlagAccept+0x164>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
811273dc:	e0bff383 	ldbu	r2,-50(fp)
811273e0:	10800058 	cmpnei	r2,r2,1
811273e4:	10000d1e 	bne	r2,zero,8112741c <OSFlagAccept+0x170>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
811273e8:	e0bffc17 	ldw	r2,-16(fp)
811273ec:	1080020b 	ldhu	r2,8(r2)
811273f0:	1007883a 	mov	r3,r2
811273f4:	e0bff30b 	ldhu	r2,-52(fp)
811273f8:	0084303a 	nor	r2,zero,r2
811273fc:	1884703a 	and	r2,r3,r2
81127400:	1007883a 	mov	r3,r2
81127404:	e0bffc17 	ldw	r2,-16(fp)
81127408:	10c0020d 	sth	r3,8(r2)
8112740c:	00000306 	br	8112741c <OSFlagAccept+0x170>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
81127410:	e0bfff17 	ldw	r2,-4(fp)
81127414:	00c01c04 	movi	r3,112
81127418:	10c00005 	stb	r3,0(r2)
8112741c:	e0bff417 	ldw	r2,-48(fp)
81127420:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81127424:	e0bff617 	ldw	r2,-40(fp)
81127428:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
8112742c:	00005e06 	br	811275a8 <OSFlagAccept+0x2fc>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
81127430:	e0bffc17 	ldw	r2,-16(fp)
81127434:	10c0020b 	ldhu	r3,8(r2)
81127438:	e0bffd0b 	ldhu	r2,-12(fp)
8112743c:	1884703a 	and	r2,r3,r2
81127440:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
81127444:	e0bff30b 	ldhu	r2,-52(fp)
81127448:	10000d26 	beq	r2,zero,81127480 <OSFlagAccept+0x1d4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
8112744c:	e0bff383 	ldbu	r2,-50(fp)
81127450:	10800058 	cmpnei	r2,r2,1
81127454:	10000d1e 	bne	r2,zero,8112748c <OSFlagAccept+0x1e0>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
81127458:	e0bffc17 	ldw	r2,-16(fp)
8112745c:	1080020b 	ldhu	r2,8(r2)
81127460:	1007883a 	mov	r3,r2
81127464:	e0bff30b 	ldhu	r2,-52(fp)
81127468:	0084303a 	nor	r2,zero,r2
8112746c:	1884703a 	and	r2,r3,r2
81127470:	1007883a 	mov	r3,r2
81127474:	e0bffc17 	ldw	r2,-16(fp)
81127478:	10c0020d 	sth	r3,8(r2)
8112747c:	00000306 	br	8112748c <OSFlagAccept+0x1e0>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
81127480:	e0bfff17 	ldw	r2,-4(fp)
81127484:	00c01c04 	movi	r3,112
81127488:	10c00005 	stb	r3,0(r2)
8112748c:	e0bff417 	ldw	r2,-48(fp)
81127490:	e0bff715 	stw	r2,-36(fp)
81127494:	e0bff717 	ldw	r2,-36(fp)
81127498:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
8112749c:	00004206 	br	811275a8 <OSFlagAccept+0x2fc>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
811274a0:	e0bffc17 	ldw	r2,-16(fp)
811274a4:	1080020b 	ldhu	r2,8(r2)
811274a8:	0084303a 	nor	r2,zero,r2
811274ac:	1007883a 	mov	r3,r2
811274b0:	e0bffd0b 	ldhu	r2,-12(fp)
811274b4:	1884703a 	and	r2,r3,r2
811274b8:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
811274bc:	e0fff30b 	ldhu	r3,-52(fp)
811274c0:	e0bffd0b 	ldhu	r2,-12(fp)
811274c4:	18800b1e 	bne	r3,r2,811274f4 <OSFlagAccept+0x248>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
811274c8:	e0bff383 	ldbu	r2,-50(fp)
811274cc:	10800058 	cmpnei	r2,r2,1
811274d0:	10000b1e 	bne	r2,zero,81127500 <OSFlagAccept+0x254>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
811274d4:	e0bffc17 	ldw	r2,-16(fp)
811274d8:	10c0020b 	ldhu	r3,8(r2)
811274dc:	e0bff30b 	ldhu	r2,-52(fp)
811274e0:	1884b03a 	or	r2,r3,r2
811274e4:	1007883a 	mov	r3,r2
811274e8:	e0bffc17 	ldw	r2,-16(fp)
811274ec:	10c0020d 	sth	r3,8(r2)
811274f0:	00000306 	br	81127500 <OSFlagAccept+0x254>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
811274f4:	e0bfff17 	ldw	r2,-4(fp)
811274f8:	00c01c04 	movi	r3,112
811274fc:	10c00005 	stb	r3,0(r2)
81127500:	e0bff417 	ldw	r2,-48(fp)
81127504:	e0bff815 	stw	r2,-32(fp)
81127508:	e0bff817 	ldw	r2,-32(fp)
8112750c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
81127510:	00002506 	br	811275a8 <OSFlagAccept+0x2fc>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
81127514:	e0bffc17 	ldw	r2,-16(fp)
81127518:	1080020b 	ldhu	r2,8(r2)
8112751c:	0084303a 	nor	r2,zero,r2
81127520:	1007883a 	mov	r3,r2
81127524:	e0bffd0b 	ldhu	r2,-12(fp)
81127528:	1884703a 	and	r2,r3,r2
8112752c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
81127530:	e0bff30b 	ldhu	r2,-52(fp)
81127534:	10000b26 	beq	r2,zero,81127564 <OSFlagAccept+0x2b8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
81127538:	e0bff383 	ldbu	r2,-50(fp)
8112753c:	10800058 	cmpnei	r2,r2,1
81127540:	10000b1e 	bne	r2,zero,81127570 <OSFlagAccept+0x2c4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
81127544:	e0bffc17 	ldw	r2,-16(fp)
81127548:	10c0020b 	ldhu	r3,8(r2)
8112754c:	e0bff30b 	ldhu	r2,-52(fp)
81127550:	1884b03a 	or	r2,r3,r2
81127554:	1007883a 	mov	r3,r2
81127558:	e0bffc17 	ldw	r2,-16(fp)
8112755c:	10c0020d 	sth	r3,8(r2)
81127560:	00000306 	br	81127570 <OSFlagAccept+0x2c4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
81127564:	e0bfff17 	ldw	r2,-4(fp)
81127568:	00c01c04 	movi	r3,112
8112756c:	10c00005 	stb	r3,0(r2)
81127570:	e0bff417 	ldw	r2,-48(fp)
81127574:	e0bff915 	stw	r2,-28(fp)
81127578:	e0bff917 	ldw	r2,-28(fp)
8112757c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
81127580:	00000906 	br	811275a8 <OSFlagAccept+0x2fc>
81127584:	e0bff417 	ldw	r2,-48(fp)
81127588:	e0bffa15 	stw	r2,-24(fp)
8112758c:	e0bffa17 	ldw	r2,-24(fp)
81127590:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
81127594:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
81127598:	e0bfff17 	ldw	r2,-4(fp)
8112759c:	00c01bc4 	movi	r3,111
811275a0:	10c00005 	stb	r3,0(r2)
             break;
811275a4:	0001883a 	nop
    }
    return (flags_rdy);
811275a8:	e0bff30b 	ldhu	r2,-52(fp)
}
811275ac:	e037883a 	mov	sp,fp
811275b0:	df000017 	ldw	fp,0(sp)
811275b4:	dec00104 	addi	sp,sp,4
811275b8:	f800283a 	ret

811275bc <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
811275bc:	defff804 	addi	sp,sp,-32
811275c0:	de00012e 	bgeu	sp,et,811275c8 <OSFlagCreate+0xc>
811275c4:	003b68fa 	trap	3
811275c8:	df000715 	stw	fp,28(sp)
811275cc:	df000704 	addi	fp,sp,28
811275d0:	2005883a 	mov	r2,r4
811275d4:	e17fff15 	stw	r5,-4(fp)
811275d8:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
811275dc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
811275e0:	e0bfff17 	ldw	r2,-4(fp)
811275e4:	1000021e 	bne	r2,zero,811275f0 <OSFlagCreate+0x34>
        return ((OS_FLAG_GRP *)0);
811275e8:	0005883a 	mov	r2,zero
811275ec:	00003306 	br	811276bc <OSFlagCreate+0x100>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
811275f0:	d0a08f03 	ldbu	r2,-32196(gp)
811275f4:	10803fcc 	andi	r2,r2,255
811275f8:	10000526 	beq	r2,zero,81127610 <OSFlagCreate+0x54>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
811275fc:	e0bfff17 	ldw	r2,-4(fp)
81127600:	00c00404 	movi	r3,16
81127604:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
81127608:	0005883a 	mov	r2,zero
8112760c:	00002b06 	br	811276bc <OSFlagCreate+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81127610:	0005303a 	rdctl	r2,status
81127614:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81127618:	e0fffd17 	ldw	r3,-12(fp)
8112761c:	00bfff84 	movi	r2,-2
81127620:	1884703a 	and	r2,r3,r2
81127624:	1001703a 	wrctl	status,r2
  
  return context;
81127628:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8112762c:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
81127630:	d0a09417 	ldw	r2,-32176(gp)
81127634:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
81127638:	e0bffb17 	ldw	r2,-20(fp)
8112763c:	10001726 	beq	r2,zero,8112769c <OSFlagCreate+0xe0>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
81127640:	d0a09417 	ldw	r2,-32176(gp)
81127644:	10800117 	ldw	r2,4(r2)
81127648:	d0a09415 	stw	r2,-32176(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
8112764c:	e0bffb17 	ldw	r2,-20(fp)
81127650:	00c00144 	movi	r3,5
81127654:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
81127658:	e0bffb17 	ldw	r2,-20(fp)
8112765c:	e0fffe0b 	ldhu	r3,-8(fp)
81127660:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
81127664:	e0bffb17 	ldw	r2,-20(fp)
81127668:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
8112766c:	e0bffb17 	ldw	r2,-20(fp)
81127670:	00c00fc4 	movi	r3,63
81127674:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
81127678:	e0bffb17 	ldw	r2,-20(fp)
8112767c:	100002c5 	stb	zero,11(r2)
81127680:	e0bff917 	ldw	r2,-28(fp)
81127684:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81127688:	e0bffa17 	ldw	r2,-24(fp)
8112768c:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
81127690:	e0bfff17 	ldw	r2,-4(fp)
81127694:	10000005 	stb	zero,0(r2)
81127698:	00000706 	br	811276b8 <OSFlagCreate+0xfc>
8112769c:	e0bff917 	ldw	r2,-28(fp)
811276a0:	e0bffc15 	stw	r2,-16(fp)
811276a4:	e0bffc17 	ldw	r2,-16(fp)
811276a8:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
811276ac:	e0bfff17 	ldw	r2,-4(fp)
811276b0:	00c01c84 	movi	r3,114
811276b4:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
811276b8:	e0bffb17 	ldw	r2,-20(fp)
}
811276bc:	e037883a 	mov	sp,fp
811276c0:	df000017 	ldw	fp,0(sp)
811276c4:	dec00104 	addi	sp,sp,4
811276c8:	f800283a 	ret

811276cc <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
811276cc:	defff204 	addi	sp,sp,-56
811276d0:	de00012e 	bgeu	sp,et,811276d8 <OSFlagDel+0xc>
811276d4:	003b68fa 	trap	3
811276d8:	dfc00d15 	stw	ra,52(sp)
811276dc:	df000c15 	stw	fp,48(sp)
811276e0:	df000c04 	addi	fp,sp,48
811276e4:	e13ffd15 	stw	r4,-12(fp)
811276e8:	2805883a 	mov	r2,r5
811276ec:	e1bfff15 	stw	r6,-4(fp)
811276f0:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
811276f4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
811276f8:	e0bfff17 	ldw	r2,-4(fp)
811276fc:	1000021e 	bne	r2,zero,81127708 <OSFlagDel+0x3c>
        return (pgrp);
81127700:	e0bffd17 	ldw	r2,-12(fp)
81127704:	00008006 	br	81127908 <OSFlagDel+0x23c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
81127708:	e0bffd17 	ldw	r2,-12(fp)
8112770c:	1000051e 	bne	r2,zero,81127724 <OSFlagDel+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
81127710:	e0bfff17 	ldw	r2,-4(fp)
81127714:	00c01b84 	movi	r3,110
81127718:	10c00005 	stb	r3,0(r2)
        return (pgrp);
8112771c:	e0bffd17 	ldw	r2,-12(fp)
81127720:	00007906 	br	81127908 <OSFlagDel+0x23c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
81127724:	d0a08f03 	ldbu	r2,-32196(gp)
81127728:	10803fcc 	andi	r2,r2,255
8112772c:	10000526 	beq	r2,zero,81127744 <OSFlagDel+0x78>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
81127730:	e0bfff17 	ldw	r2,-4(fp)
81127734:	00c003c4 	movi	r3,15
81127738:	10c00005 	stb	r3,0(r2)
        return (pgrp);
8112773c:	e0bffd17 	ldw	r2,-12(fp)
81127740:	00007106 	br	81127908 <OSFlagDel+0x23c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
81127744:	e0bffd17 	ldw	r2,-12(fp)
81127748:	10800003 	ldbu	r2,0(r2)
8112774c:	10803fcc 	andi	r2,r2,255
81127750:	10800160 	cmpeqi	r2,r2,5
81127754:	1000051e 	bne	r2,zero,8112776c <OSFlagDel+0xa0>
        *perr = OS_ERR_EVENT_TYPE;
81127758:	e0bfff17 	ldw	r2,-4(fp)
8112775c:	00c00044 	movi	r3,1
81127760:	10c00005 	stb	r3,0(r2)
        return (pgrp);
81127764:	e0bffd17 	ldw	r2,-12(fp)
81127768:	00006706 	br	81127908 <OSFlagDel+0x23c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112776c:	0005303a 	rdctl	r2,status
81127770:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81127774:	e0fffc17 	ldw	r3,-16(fp)
81127778:	00bfff84 	movi	r2,-2
8112777c:	1884703a 	and	r2,r3,r2
81127780:	1001703a 	wrctl	status,r2
  
  return context;
81127784:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
81127788:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
8112778c:	e0bffd17 	ldw	r2,-12(fp)
81127790:	10800117 	ldw	r2,4(r2)
81127794:	10000326 	beq	r2,zero,811277a4 <OSFlagDel+0xd8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
81127798:	00800044 	movi	r2,1
8112779c:	e0bff405 	stb	r2,-48(fp)
811277a0:	00000106 	br	811277a8 <OSFlagDel+0xdc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
811277a4:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
811277a8:	e0bffe03 	ldbu	r2,-8(fp)
811277ac:	10000326 	beq	r2,zero,811277bc <OSFlagDel+0xf0>
811277b0:	10800060 	cmpeqi	r2,r2,1
811277b4:	1000231e 	bne	r2,zero,81127844 <OSFlagDel+0x178>
811277b8:	00004806 	br	811278dc <OSFlagDel+0x210>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
811277bc:	e0bff403 	ldbu	r2,-48(fp)
811277c0:	1000161e 	bne	r2,zero,8112781c <OSFlagDel+0x150>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
811277c4:	e0bffd17 	ldw	r2,-12(fp)
811277c8:	00c00fc4 	movi	r3,63
811277cc:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
811277d0:	e0bffd17 	ldw	r2,-12(fp)
811277d4:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
811277d8:	e0bffd17 	ldw	r2,-12(fp)
811277dc:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
811277e0:	d0e09417 	ldw	r3,-32176(gp)
811277e4:	e0bffd17 	ldw	r2,-12(fp)
811277e8:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
811277ec:	e0bffd17 	ldw	r2,-12(fp)
811277f0:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
811277f4:	e0bffd17 	ldw	r2,-12(fp)
811277f8:	d0a09415 	stw	r2,-32176(gp)
811277fc:	e0bff717 	ldw	r2,-36(fp)
81127800:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81127804:	e0bff817 	ldw	r2,-32(fp)
81127808:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
8112780c:	e0bfff17 	ldw	r2,-4(fp)
81127810:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
81127814:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
81127818:	00003a06 	br	81127904 <OSFlagDel+0x238>
8112781c:	e0bff717 	ldw	r2,-36(fp)
81127820:	e0bff915 	stw	r2,-28(fp)
81127824:	e0bff917 	ldw	r2,-28(fp)
81127828:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
8112782c:	e0bfff17 	ldw	r2,-4(fp)
81127830:	00c01244 	movi	r3,73
81127834:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
81127838:	e0bffd17 	ldw	r2,-12(fp)
8112783c:	e0bff615 	stw	r2,-40(fp)
             }
             break;
81127840:	00003006 	br	81127904 <OSFlagDel+0x238>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
81127844:	e0bffd17 	ldw	r2,-12(fp)
81127848:	10800117 	ldw	r2,4(r2)
8112784c:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
81127850:	00000606 	br	8112786c <OSFlagDel+0x1a0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
81127854:	000b883a 	mov	r5,zero
81127858:	e13ff517 	ldw	r4,-44(fp)
8112785c:	11288800 	call	81128880 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
81127860:	e0bff517 	ldw	r2,-44(fp)
81127864:	10800017 	ldw	r2,0(r2)
81127868:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
8112786c:	e0bff517 	ldw	r2,-44(fp)
81127870:	103ff81e 	bne	r2,zero,81127854 <__reset+0xfb107854>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
81127874:	e0bffd17 	ldw	r2,-12(fp)
81127878:	00c00fc4 	movi	r3,63
8112787c:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
81127880:	e0bffd17 	ldw	r2,-12(fp)
81127884:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
81127888:	e0bffd17 	ldw	r2,-12(fp)
8112788c:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
81127890:	d0e09417 	ldw	r3,-32176(gp)
81127894:	e0bffd17 	ldw	r2,-12(fp)
81127898:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
8112789c:	e0bffd17 	ldw	r2,-12(fp)
811278a0:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
811278a4:	e0bffd17 	ldw	r2,-12(fp)
811278a8:	d0a09415 	stw	r2,-32176(gp)
811278ac:	e0bff717 	ldw	r2,-36(fp)
811278b0:	e0bffa15 	stw	r2,-24(fp)
811278b4:	e0bffa17 	ldw	r2,-24(fp)
811278b8:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
811278bc:	e0bff403 	ldbu	r2,-48(fp)
811278c0:	10800058 	cmpnei	r2,r2,1
811278c4:	1000011e 	bne	r2,zero,811278cc <OSFlagDel+0x200>
                 OS_Sched();                               /* Find highest priority task ready to run  */
811278c8:	11269900 	call	81126990 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
811278cc:	e0bfff17 	ldw	r2,-4(fp)
811278d0:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
811278d4:	e03ff615 	stw	zero,-40(fp)
             break;
811278d8:	00000a06 	br	81127904 <OSFlagDel+0x238>
811278dc:	e0bff717 	ldw	r2,-36(fp)
811278e0:	e0bffb15 	stw	r2,-20(fp)
811278e4:	e0bffb17 	ldw	r2,-20(fp)
811278e8:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
811278ec:	e0bfff17 	ldw	r2,-4(fp)
811278f0:	00c001c4 	movi	r3,7
811278f4:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
811278f8:	e0bffd17 	ldw	r2,-12(fp)
811278fc:	e0bff615 	stw	r2,-40(fp)
             break;
81127900:	0001883a 	nop
    }
    return (pgrp_return);
81127904:	e0bff617 	ldw	r2,-40(fp)
}
81127908:	e037883a 	mov	sp,fp
8112790c:	dfc00117 	ldw	ra,4(sp)
81127910:	df000017 	ldw	fp,0(sp)
81127914:	dec00204 	addi	sp,sp,8
81127918:	f800283a 	ret

8112791c <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
8112791c:	defff604 	addi	sp,sp,-40
81127920:	de00012e 	bgeu	sp,et,81127928 <OSFlagNameGet+0xc>
81127924:	003b68fa 	trap	3
81127928:	dfc00915 	stw	ra,36(sp)
8112792c:	df000815 	stw	fp,32(sp)
81127930:	df000804 	addi	fp,sp,32
81127934:	e13ffd15 	stw	r4,-12(fp)
81127938:	e17ffe15 	stw	r5,-8(fp)
8112793c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81127940:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
81127944:	e0bfff17 	ldw	r2,-4(fp)
81127948:	1000021e 	bne	r2,zero,81127954 <OSFlagNameGet+0x38>
        return (0);
8112794c:	0005883a 	mov	r2,zero
81127950:	00003906 	br	81127a38 <OSFlagNameGet+0x11c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
81127954:	e0bffd17 	ldw	r2,-12(fp)
81127958:	1000051e 	bne	r2,zero,81127970 <OSFlagNameGet+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
8112795c:	e0bfff17 	ldw	r2,-4(fp)
81127960:	00c01b84 	movi	r3,110
81127964:	10c00005 	stb	r3,0(r2)
        return (0);
81127968:	0005883a 	mov	r2,zero
8112796c:	00003206 	br	81127a38 <OSFlagNameGet+0x11c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
81127970:	e0bffe17 	ldw	r2,-8(fp)
81127974:	1000051e 	bne	r2,zero,8112798c <OSFlagNameGet+0x70>
        *perr = OS_ERR_PNAME_NULL;
81127978:	e0bfff17 	ldw	r2,-4(fp)
8112797c:	00c00304 	movi	r3,12
81127980:	10c00005 	stb	r3,0(r2)
        return (0);
81127984:	0005883a 	mov	r2,zero
81127988:	00002b06 	br	81127a38 <OSFlagNameGet+0x11c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
8112798c:	d0a08f03 	ldbu	r2,-32196(gp)
81127990:	10803fcc 	andi	r2,r2,255
81127994:	10000526 	beq	r2,zero,811279ac <OSFlagNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
81127998:	e0bfff17 	ldw	r2,-4(fp)
8112799c:	00c00444 	movi	r3,17
811279a0:	10c00005 	stb	r3,0(r2)
        return (0);
811279a4:	0005883a 	mov	r2,zero
811279a8:	00002306 	br	81127a38 <OSFlagNameGet+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811279ac:	0005303a 	rdctl	r2,status
811279b0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811279b4:	e0fffc17 	ldw	r3,-16(fp)
811279b8:	00bfff84 	movi	r2,-2
811279bc:	1884703a 	and	r2,r3,r2
811279c0:	1001703a 	wrctl	status,r2
  
  return context;
811279c4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
811279c8:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
811279cc:	e0bffd17 	ldw	r2,-12(fp)
811279d0:	10800003 	ldbu	r2,0(r2)
811279d4:	10803fcc 	andi	r2,r2,255
811279d8:	10800160 	cmpeqi	r2,r2,5
811279dc:	1000091e 	bne	r2,zero,81127a04 <OSFlagNameGet+0xe8>
811279e0:	e0bff817 	ldw	r2,-32(fp)
811279e4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811279e8:	e0bff917 	ldw	r2,-28(fp)
811279ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
811279f0:	e0bfff17 	ldw	r2,-4(fp)
811279f4:	00c00044 	movi	r3,1
811279f8:	10c00005 	stb	r3,0(r2)
        return (0);
811279fc:	0005883a 	mov	r2,zero
81127a00:	00000d06 	br	81127a38 <OSFlagNameGet+0x11c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
81127a04:	e0bffd17 	ldw	r2,-12(fp)
81127a08:	10800284 	addi	r2,r2,10
81127a0c:	100b883a 	mov	r5,r2
81127a10:	e13ffe17 	ldw	r4,-8(fp)
81127a14:	1126ae40 	call	81126ae4 <OS_StrCopy>
81127a18:	e0bffb05 	stb	r2,-20(fp)
81127a1c:	e0bff817 	ldw	r2,-32(fp)
81127a20:	e0bffa15 	stw	r2,-24(fp)
81127a24:	e0bffa17 	ldw	r2,-24(fp)
81127a28:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
81127a2c:	e0bfff17 	ldw	r2,-4(fp)
81127a30:	10000005 	stb	zero,0(r2)
    return (len);
81127a34:	e0bffb03 	ldbu	r2,-20(fp)
}
81127a38:	e037883a 	mov	sp,fp
81127a3c:	dfc00117 	ldw	ra,4(sp)
81127a40:	df000017 	ldw	fp,0(sp)
81127a44:	dec00204 	addi	sp,sp,8
81127a48:	f800283a 	ret

81127a4c <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
81127a4c:	defff504 	addi	sp,sp,-44
81127a50:	de00012e 	bgeu	sp,et,81127a58 <OSFlagNameSet+0xc>
81127a54:	003b68fa 	trap	3
81127a58:	dfc00a15 	stw	ra,40(sp)
81127a5c:	df000915 	stw	fp,36(sp)
81127a60:	df000904 	addi	fp,sp,36
81127a64:	e13ffd15 	stw	r4,-12(fp)
81127a68:	e17ffe15 	stw	r5,-8(fp)
81127a6c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81127a70:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
81127a74:	e0bfff17 	ldw	r2,-4(fp)
81127a78:	10004326 	beq	r2,zero,81127b88 <OSFlagNameSet+0x13c>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
81127a7c:	e0bffd17 	ldw	r2,-12(fp)
81127a80:	1000041e 	bne	r2,zero,81127a94 <OSFlagNameSet+0x48>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
81127a84:	e0bfff17 	ldw	r2,-4(fp)
81127a88:	00c01b84 	movi	r3,110
81127a8c:	10c00005 	stb	r3,0(r2)
        return;
81127a90:	00003e06 	br	81127b8c <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
81127a94:	e0bffe17 	ldw	r2,-8(fp)
81127a98:	1000041e 	bne	r2,zero,81127aac <OSFlagNameSet+0x60>
        *perr = OS_ERR_PNAME_NULL;
81127a9c:	e0bfff17 	ldw	r2,-4(fp)
81127aa0:	00c00304 	movi	r3,12
81127aa4:	10c00005 	stb	r3,0(r2)
        return;
81127aa8:	00003806 	br	81127b8c <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
81127aac:	d0a08f03 	ldbu	r2,-32196(gp)
81127ab0:	10803fcc 	andi	r2,r2,255
81127ab4:	10000426 	beq	r2,zero,81127ac8 <OSFlagNameSet+0x7c>
        *perr = OS_ERR_NAME_SET_ISR;
81127ab8:	e0bfff17 	ldw	r2,-4(fp)
81127abc:	00c00484 	movi	r3,18
81127ac0:	10c00005 	stb	r3,0(r2)
        return;
81127ac4:	00003106 	br	81127b8c <OSFlagNameSet+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81127ac8:	0005303a 	rdctl	r2,status
81127acc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81127ad0:	e0fffc17 	ldw	r3,-16(fp)
81127ad4:	00bfff84 	movi	r2,-2
81127ad8:	1884703a 	and	r2,r3,r2
81127adc:	1001703a 	wrctl	status,r2
  
  return context;
81127ae0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
81127ae4:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
81127ae8:	e0bffd17 	ldw	r2,-12(fp)
81127aec:	10800003 	ldbu	r2,0(r2)
81127af0:	10803fcc 	andi	r2,r2,255
81127af4:	10800160 	cmpeqi	r2,r2,5
81127af8:	1000081e 	bne	r2,zero,81127b1c <OSFlagNameSet+0xd0>
81127afc:	e0bff717 	ldw	r2,-36(fp)
81127b00:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81127b04:	e0bff817 	ldw	r2,-32(fp)
81127b08:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
81127b0c:	e0bfff17 	ldw	r2,-4(fp)
81127b10:	00c00044 	movi	r3,1
81127b14:	10c00005 	stb	r3,0(r2)
        return;
81127b18:	00001c06 	br	81127b8c <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
81127b1c:	e13ffe17 	ldw	r4,-8(fp)
81127b20:	1126b600 	call	81126b60 <OS_StrLen>
81127b24:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
81127b28:	e0bffa03 	ldbu	r2,-24(fp)
81127b2c:	10800830 	cmpltui	r2,r2,32
81127b30:	1000081e 	bne	r2,zero,81127b54 <OSFlagNameSet+0x108>
81127b34:	e0bff717 	ldw	r2,-36(fp)
81127b38:	e0bff915 	stw	r2,-28(fp)
81127b3c:	e0bff917 	ldw	r2,-28(fp)
81127b40:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
81127b44:	e0bfff17 	ldw	r2,-4(fp)
81127b48:	00c01cc4 	movi	r3,115
81127b4c:	10c00005 	stb	r3,0(r2)
        return;
81127b50:	00000e06 	br	81127b8c <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
81127b54:	e0bffd17 	ldw	r2,-12(fp)
81127b58:	10800284 	addi	r2,r2,10
81127b5c:	e17ffe17 	ldw	r5,-8(fp)
81127b60:	1009883a 	mov	r4,r2
81127b64:	1126ae40 	call	81126ae4 <OS_StrCopy>
81127b68:	e0bff717 	ldw	r2,-36(fp)
81127b6c:	e0bffb15 	stw	r2,-20(fp)
81127b70:	e0bffb17 	ldw	r2,-20(fp)
81127b74:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
81127b78:	e0bfff17 	ldw	r2,-4(fp)
81127b7c:	10000005 	stb	zero,0(r2)
    return;
81127b80:	0001883a 	nop
81127b84:	00000106 	br	81127b8c <OSFlagNameSet+0x140>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
81127b88:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
81127b8c:	e037883a 	mov	sp,fp
81127b90:	dfc00117 	ldw	ra,4(sp)
81127b94:	df000017 	ldw	fp,0(sp)
81127b98:	dec00204 	addi	sp,sp,8
81127b9c:	f800283a 	ret

81127ba0 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
81127ba0:	deffe104 	addi	sp,sp,-124
81127ba4:	de00012e 	bgeu	sp,et,81127bac <OSFlagPend+0xc>
81127ba8:	003b68fa 	trap	3
81127bac:	dfc01e15 	stw	ra,120(sp)
81127bb0:	df001d15 	stw	fp,116(sp)
81127bb4:	df001d04 	addi	fp,sp,116
81127bb8:	e13ffc15 	stw	r4,-16(fp)
81127bbc:	2809883a 	mov	r4,r5
81127bc0:	3007883a 	mov	r3,r6
81127bc4:	3805883a 	mov	r2,r7
81127bc8:	e13ffd0d 	sth	r4,-12(fp)
81127bcc:	e0fffe05 	stb	r3,-8(fp)
81127bd0:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
81127bd4:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
81127bd8:	e0800217 	ldw	r2,8(fp)
81127bdc:	1000021e 	bne	r2,zero,81127be8 <OSFlagPend+0x48>
        return ((OS_FLAGS)0);
81127be0:	0005883a 	mov	r2,zero
81127be4:	00015906 	br	8112814c <OSFlagPend+0x5ac>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
81127be8:	e0bffc17 	ldw	r2,-16(fp)
81127bec:	1000051e 	bne	r2,zero,81127c04 <OSFlagPend+0x64>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
81127bf0:	e0800217 	ldw	r2,8(fp)
81127bf4:	00c01b84 	movi	r3,110
81127bf8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
81127bfc:	0005883a 	mov	r2,zero
81127c00:	00015206 	br	8112814c <OSFlagPend+0x5ac>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
81127c04:	d0a08f03 	ldbu	r2,-32196(gp)
81127c08:	10803fcc 	andi	r2,r2,255
81127c0c:	10000526 	beq	r2,zero,81127c24 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
81127c10:	e0800217 	ldw	r2,8(fp)
81127c14:	00c00084 	movi	r3,2
81127c18:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
81127c1c:	0005883a 	mov	r2,zero
81127c20:	00014a06 	br	8112814c <OSFlagPend+0x5ac>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
81127c24:	d0a07d03 	ldbu	r2,-32268(gp)
81127c28:	10803fcc 	andi	r2,r2,255
81127c2c:	10000526 	beq	r2,zero,81127c44 <OSFlagPend+0xa4>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
81127c30:	e0800217 	ldw	r2,8(fp)
81127c34:	00c00344 	movi	r3,13
81127c38:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
81127c3c:	0005883a 	mov	r2,zero
81127c40:	00014206 	br	8112814c <OSFlagPend+0x5ac>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
81127c44:	e0bffc17 	ldw	r2,-16(fp)
81127c48:	10800003 	ldbu	r2,0(r2)
81127c4c:	10803fcc 	andi	r2,r2,255
81127c50:	10800160 	cmpeqi	r2,r2,5
81127c54:	1000051e 	bne	r2,zero,81127c6c <OSFlagPend+0xcc>
        *perr = OS_ERR_EVENT_TYPE;
81127c58:	e0800217 	ldw	r2,8(fp)
81127c5c:	00c00044 	movi	r3,1
81127c60:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
81127c64:	0005883a 	mov	r2,zero
81127c68:	00013806 	br	8112814c <OSFlagPend+0x5ac>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
81127c6c:	e0fffe03 	ldbu	r3,-8(fp)
81127c70:	00bfe004 	movi	r2,-128
81127c74:	1884703a 	and	r2,r3,r2
81127c78:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
81127c7c:	e0bfe603 	ldbu	r2,-104(fp)
81127c80:	10000626 	beq	r2,zero,81127c9c <OSFlagPend+0xfc>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
81127c84:	e0bffe03 	ldbu	r2,-8(fp)
81127c88:	10801fcc 	andi	r2,r2,127
81127c8c:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
81127c90:	00800044 	movi	r2,1
81127c94:	e0bfe405 	stb	r2,-112(fp)
81127c98:	00000106 	br	81127ca0 <OSFlagPend+0x100>
    } else {
        consume    = OS_FALSE;
81127c9c:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81127ca0:	0005303a 	rdctl	r2,status
81127ca4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81127ca8:	e0fff617 	ldw	r3,-40(fp)
81127cac:	00bfff84 	movi	r2,-2
81127cb0:	1884703a 	and	r2,r3,r2
81127cb4:	1001703a 	wrctl	status,r2
  
  return context;
81127cb8:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
81127cbc:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
81127cc0:	e0bffe03 	ldbu	r2,-8(fp)
81127cc4:	10c00060 	cmpeqi	r3,r2,1
81127cc8:	1800921e 	bne	r3,zero,81127f14 <OSFlagPend+0x374>
81127ccc:	10c00088 	cmpgei	r3,r2,2
81127cd0:	1800021e 	bne	r3,zero,81127cdc <OSFlagPend+0x13c>
81127cd4:	10006126 	beq	r2,zero,81127e5c <OSFlagPend+0x2bc>
81127cd8:	0000bb06 	br	81127fc8 <OSFlagPend+0x428>
81127cdc:	10c000a0 	cmpeqi	r3,r2,2
81127ce0:	1800031e 	bne	r3,zero,81127cf0 <OSFlagPend+0x150>
81127ce4:	108000e0 	cmpeqi	r2,r2,3
81127ce8:	10002f1e 	bne	r2,zero,81127da8 <OSFlagPend+0x208>
81127cec:	0000b606 	br	81127fc8 <OSFlagPend+0x428>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
81127cf0:	e0bffc17 	ldw	r2,-16(fp)
81127cf4:	10c0020b 	ldhu	r3,8(r2)
81127cf8:	e0bffd0b 	ldhu	r2,-12(fp)
81127cfc:	1884703a 	and	r2,r3,r2
81127d00:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
81127d04:	e0ffe80b 	ldhu	r3,-96(fp)
81127d08:	e0bffd0b 	ldhu	r2,-12(fp)
81127d0c:	1880171e 	bne	r3,r2,81127d6c <OSFlagPend+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
81127d10:	e0bfe403 	ldbu	r2,-112(fp)
81127d14:	10800058 	cmpnei	r2,r2,1
81127d18:	1000091e 	bne	r2,zero,81127d40 <OSFlagPend+0x1a0>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
81127d1c:	e0bffc17 	ldw	r2,-16(fp)
81127d20:	1080020b 	ldhu	r2,8(r2)
81127d24:	1007883a 	mov	r3,r2
81127d28:	e0bfe80b 	ldhu	r2,-96(fp)
81127d2c:	0084303a 	nor	r2,zero,r2
81127d30:	1884703a 	and	r2,r3,r2
81127d34:	1007883a 	mov	r3,r2
81127d38:	e0bffc17 	ldw	r2,-16(fp)
81127d3c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
81127d40:	d0a09017 	ldw	r2,-32192(gp)
81127d44:	e0ffe80b 	ldhu	r3,-96(fp)
81127d48:	10c00b0d 	sth	r3,44(r2)
81127d4c:	e0bfe517 	ldw	r2,-108(fp)
81127d50:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81127d54:	e0bfe717 	ldw	r2,-100(fp)
81127d58:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
81127d5c:	e0800217 	ldw	r2,8(fp)
81127d60:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
81127d64:	e0bfe80b 	ldhu	r2,-96(fp)
81127d68:	0000f806 	br	8112814c <OSFlagPend+0x5ac>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
81127d6c:	e13ffd0b 	ldhu	r4,-12(fp)
81127d70:	e17ffe03 	ldbu	r5,-8(fp)
81127d74:	e0bfff0b 	ldhu	r2,-4(fp)
81127d78:	e0fff704 	addi	r3,fp,-36
81127d7c:	d8800015 	stw	r2,0(sp)
81127d80:	280f883a 	mov	r7,r5
81127d84:	200d883a 	mov	r6,r4
81127d88:	180b883a 	mov	r5,r3
81127d8c:	e13ffc17 	ldw	r4,-16(fp)
81127d90:	11286300 	call	81128630 <OS_FlagBlock>
81127d94:	e0bfe517 	ldw	r2,-108(fp)
81127d98:	e0bfe915 	stw	r2,-92(fp)
81127d9c:	e0bfe917 	ldw	r2,-92(fp)
81127da0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
81127da4:	00009206 	br	81127ff0 <OSFlagPend+0x450>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
81127da8:	e0bffc17 	ldw	r2,-16(fp)
81127dac:	10c0020b 	ldhu	r3,8(r2)
81127db0:	e0bffd0b 	ldhu	r2,-12(fp)
81127db4:	1884703a 	and	r2,r3,r2
81127db8:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
81127dbc:	e0bfe80b 	ldhu	r2,-96(fp)
81127dc0:	10001726 	beq	r2,zero,81127e20 <OSFlagPend+0x280>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
81127dc4:	e0bfe403 	ldbu	r2,-112(fp)
81127dc8:	10800058 	cmpnei	r2,r2,1
81127dcc:	1000091e 	bne	r2,zero,81127df4 <OSFlagPend+0x254>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
81127dd0:	e0bffc17 	ldw	r2,-16(fp)
81127dd4:	1080020b 	ldhu	r2,8(r2)
81127dd8:	1007883a 	mov	r3,r2
81127ddc:	e0bfe80b 	ldhu	r2,-96(fp)
81127de0:	0084303a 	nor	r2,zero,r2
81127de4:	1884703a 	and	r2,r3,r2
81127de8:	1007883a 	mov	r3,r2
81127dec:	e0bffc17 	ldw	r2,-16(fp)
81127df0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
81127df4:	d0a09017 	ldw	r2,-32192(gp)
81127df8:	e0ffe80b 	ldhu	r3,-96(fp)
81127dfc:	10c00b0d 	sth	r3,44(r2)
81127e00:	e0bfe517 	ldw	r2,-108(fp)
81127e04:	e0bfea15 	stw	r2,-88(fp)
81127e08:	e0bfea17 	ldw	r2,-88(fp)
81127e0c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
81127e10:	e0800217 	ldw	r2,8(fp)
81127e14:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
81127e18:	e0bfe80b 	ldhu	r2,-96(fp)
81127e1c:	0000cb06 	br	8112814c <OSFlagPend+0x5ac>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
81127e20:	e13ffd0b 	ldhu	r4,-12(fp)
81127e24:	e17ffe03 	ldbu	r5,-8(fp)
81127e28:	e0bfff0b 	ldhu	r2,-4(fp)
81127e2c:	e0fff704 	addi	r3,fp,-36
81127e30:	d8800015 	stw	r2,0(sp)
81127e34:	280f883a 	mov	r7,r5
81127e38:	200d883a 	mov	r6,r4
81127e3c:	180b883a 	mov	r5,r3
81127e40:	e13ffc17 	ldw	r4,-16(fp)
81127e44:	11286300 	call	81128630 <OS_FlagBlock>
81127e48:	e0bfe517 	ldw	r2,-108(fp)
81127e4c:	e0bfeb15 	stw	r2,-84(fp)
81127e50:	e0bfeb17 	ldw	r2,-84(fp)
81127e54:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
81127e58:	00006506 	br	81127ff0 <OSFlagPend+0x450>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
81127e5c:	e0bffc17 	ldw	r2,-16(fp)
81127e60:	1080020b 	ldhu	r2,8(r2)
81127e64:	0084303a 	nor	r2,zero,r2
81127e68:	1007883a 	mov	r3,r2
81127e6c:	e0bffd0b 	ldhu	r2,-12(fp)
81127e70:	1884703a 	and	r2,r3,r2
81127e74:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
81127e78:	e0ffe80b 	ldhu	r3,-96(fp)
81127e7c:	e0bffd0b 	ldhu	r2,-12(fp)
81127e80:	1880151e 	bne	r3,r2,81127ed8 <OSFlagPend+0x338>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
81127e84:	e0bfe403 	ldbu	r2,-112(fp)
81127e88:	10800058 	cmpnei	r2,r2,1
81127e8c:	1000071e 	bne	r2,zero,81127eac <OSFlagPend+0x30c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
81127e90:	e0bffc17 	ldw	r2,-16(fp)
81127e94:	10c0020b 	ldhu	r3,8(r2)
81127e98:	e0bfe80b 	ldhu	r2,-96(fp)
81127e9c:	1884b03a 	or	r2,r3,r2
81127ea0:	1007883a 	mov	r3,r2
81127ea4:	e0bffc17 	ldw	r2,-16(fp)
81127ea8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
81127eac:	d0a09017 	ldw	r2,-32192(gp)
81127eb0:	e0ffe80b 	ldhu	r3,-96(fp)
81127eb4:	10c00b0d 	sth	r3,44(r2)
81127eb8:	e0bfe517 	ldw	r2,-108(fp)
81127ebc:	e0bfec15 	stw	r2,-80(fp)
81127ec0:	e0bfec17 	ldw	r2,-80(fp)
81127ec4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
81127ec8:	e0800217 	ldw	r2,8(fp)
81127ecc:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
81127ed0:	e0bfe80b 	ldhu	r2,-96(fp)
81127ed4:	00009d06 	br	8112814c <OSFlagPend+0x5ac>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
81127ed8:	e13ffd0b 	ldhu	r4,-12(fp)
81127edc:	e17ffe03 	ldbu	r5,-8(fp)
81127ee0:	e0bfff0b 	ldhu	r2,-4(fp)
81127ee4:	e0fff704 	addi	r3,fp,-36
81127ee8:	d8800015 	stw	r2,0(sp)
81127eec:	280f883a 	mov	r7,r5
81127ef0:	200d883a 	mov	r6,r4
81127ef4:	180b883a 	mov	r5,r3
81127ef8:	e13ffc17 	ldw	r4,-16(fp)
81127efc:	11286300 	call	81128630 <OS_FlagBlock>
81127f00:	e0bfe517 	ldw	r2,-108(fp)
81127f04:	e0bfed15 	stw	r2,-76(fp)
81127f08:	e0bfed17 	ldw	r2,-76(fp)
81127f0c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
81127f10:	00003706 	br	81127ff0 <OSFlagPend+0x450>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
81127f14:	e0bffc17 	ldw	r2,-16(fp)
81127f18:	1080020b 	ldhu	r2,8(r2)
81127f1c:	0084303a 	nor	r2,zero,r2
81127f20:	1007883a 	mov	r3,r2
81127f24:	e0bffd0b 	ldhu	r2,-12(fp)
81127f28:	1884703a 	and	r2,r3,r2
81127f2c:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
81127f30:	e0bfe80b 	ldhu	r2,-96(fp)
81127f34:	10001526 	beq	r2,zero,81127f8c <OSFlagPend+0x3ec>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
81127f38:	e0bfe403 	ldbu	r2,-112(fp)
81127f3c:	10800058 	cmpnei	r2,r2,1
81127f40:	1000071e 	bne	r2,zero,81127f60 <OSFlagPend+0x3c0>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
81127f44:	e0bffc17 	ldw	r2,-16(fp)
81127f48:	10c0020b 	ldhu	r3,8(r2)
81127f4c:	e0bfe80b 	ldhu	r2,-96(fp)
81127f50:	1884b03a 	or	r2,r3,r2
81127f54:	1007883a 	mov	r3,r2
81127f58:	e0bffc17 	ldw	r2,-16(fp)
81127f5c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
81127f60:	d0a09017 	ldw	r2,-32192(gp)
81127f64:	e0ffe80b 	ldhu	r3,-96(fp)
81127f68:	10c00b0d 	sth	r3,44(r2)
81127f6c:	e0bfe517 	ldw	r2,-108(fp)
81127f70:	e0bfee15 	stw	r2,-72(fp)
81127f74:	e0bfee17 	ldw	r2,-72(fp)
81127f78:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
81127f7c:	e0800217 	ldw	r2,8(fp)
81127f80:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
81127f84:	e0bfe80b 	ldhu	r2,-96(fp)
81127f88:	00007006 	br	8112814c <OSFlagPend+0x5ac>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
81127f8c:	e13ffd0b 	ldhu	r4,-12(fp)
81127f90:	e17ffe03 	ldbu	r5,-8(fp)
81127f94:	e0bfff0b 	ldhu	r2,-4(fp)
81127f98:	e0fff704 	addi	r3,fp,-36
81127f9c:	d8800015 	stw	r2,0(sp)
81127fa0:	280f883a 	mov	r7,r5
81127fa4:	200d883a 	mov	r6,r4
81127fa8:	180b883a 	mov	r5,r3
81127fac:	e13ffc17 	ldw	r4,-16(fp)
81127fb0:	11286300 	call	81128630 <OS_FlagBlock>
81127fb4:	e0bfe517 	ldw	r2,-108(fp)
81127fb8:	e0bfef15 	stw	r2,-68(fp)
81127fbc:	e0bfef17 	ldw	r2,-68(fp)
81127fc0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
81127fc4:	00000a06 	br	81127ff0 <OSFlagPend+0x450>
81127fc8:	e0bfe517 	ldw	r2,-108(fp)
81127fcc:	e0bff015 	stw	r2,-64(fp)
81127fd0:	e0bff017 	ldw	r2,-64(fp)
81127fd4:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
81127fd8:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
81127fdc:	e0800217 	ldw	r2,8(fp)
81127fe0:	00c01bc4 	movi	r3,111
81127fe4:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
81127fe8:	e0bfe80b 	ldhu	r2,-96(fp)
81127fec:	00005706 	br	8112814c <OSFlagPend+0x5ac>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
81127ff0:	11269900 	call	81126990 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81127ff4:	0005303a 	rdctl	r2,status
81127ff8:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81127ffc:	e0fff117 	ldw	r3,-60(fp)
81128000:	00bfff84 	movi	r2,-2
81128004:	1884703a 	and	r2,r3,r2
81128008:	1001703a 	wrctl	status,r2
  
  return context;
8112800c:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
81128010:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
81128014:	d0a09017 	ldw	r2,-32192(gp)
81128018:	10800c43 	ldbu	r2,49(r2)
8112801c:	10803fcc 	andi	r2,r2,255
81128020:	10001c26 	beq	r2,zero,81128094 <OSFlagPend+0x4f4>
        pend_stat                = OSTCBCur->OSTCBStatPend;
81128024:	d0a09017 	ldw	r2,-32192(gp)
81128028:	10800c43 	ldbu	r2,49(r2)
8112802c:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
81128030:	d0a09017 	ldw	r2,-32192(gp)
81128034:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
81128038:	e0bff704 	addi	r2,fp,-36
8112803c:	1009883a 	mov	r4,r2
81128040:	112897c0 	call	8112897c <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
81128044:	d0a09017 	ldw	r2,-32192(gp)
81128048:	10000c05 	stb	zero,48(r2)
8112804c:	e0bfe517 	ldw	r2,-108(fp)
81128050:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81128054:	e0bff217 	ldw	r2,-56(fp)
81128058:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
8112805c:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
81128060:	e0bff303 	ldbu	r2,-52(fp)
81128064:	108000a0 	cmpeqi	r2,r2,2
81128068:	10000426 	beq	r2,zero,8112807c <OSFlagPend+0x4dc>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
8112806c:	e0800217 	ldw	r2,8(fp)
81128070:	00c00384 	movi	r3,14
81128074:	10c00005 	stb	r3,0(r2)
                 break;
81128078:	00000406 	br	8112808c <OSFlagPend+0x4ec>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
8112807c:	e0800217 	ldw	r2,8(fp)
81128080:	00c00284 	movi	r3,10
81128084:	10c00005 	stb	r3,0(r2)
                 break;
81128088:	0001883a 	nop
        }
        return (flags_rdy);
8112808c:	e0bfe80b 	ldhu	r2,-96(fp)
81128090:	00002e06 	br	8112814c <OSFlagPend+0x5ac>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
81128094:	d0a09017 	ldw	r2,-32192(gp)
81128098:	10800b0b 	ldhu	r2,44(r2)
8112809c:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
811280a0:	e0bfe403 	ldbu	r2,-112(fp)
811280a4:	10800058 	cmpnei	r2,r2,1
811280a8:	1000211e 	bne	r2,zero,81128130 <OSFlagPend+0x590>
        switch (wait_type) {
811280ac:	e0bffe03 	ldbu	r2,-8(fp)
811280b0:	10001616 	blt	r2,zero,8112810c <OSFlagPend+0x56c>
811280b4:	10c00090 	cmplti	r3,r2,2
811280b8:	18000c1e 	bne	r3,zero,811280ec <OSFlagPend+0x54c>
811280bc:	10800108 	cmpgei	r2,r2,4
811280c0:	1000121e 	bne	r2,zero,8112810c <OSFlagPend+0x56c>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
811280c4:	e0bffc17 	ldw	r2,-16(fp)
811280c8:	1080020b 	ldhu	r2,8(r2)
811280cc:	1007883a 	mov	r3,r2
811280d0:	e0bfe80b 	ldhu	r2,-96(fp)
811280d4:	0084303a 	nor	r2,zero,r2
811280d8:	1884703a 	and	r2,r3,r2
811280dc:	1007883a 	mov	r3,r2
811280e0:	e0bffc17 	ldw	r2,-16(fp)
811280e4:	10c0020d 	sth	r3,8(r2)
                 break;
811280e8:	00001106 	br	81128130 <OSFlagPend+0x590>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
811280ec:	e0bffc17 	ldw	r2,-16(fp)
811280f0:	10c0020b 	ldhu	r3,8(r2)
811280f4:	e0bfe80b 	ldhu	r2,-96(fp)
811280f8:	1884b03a 	or	r2,r3,r2
811280fc:	1007883a 	mov	r3,r2
81128100:	e0bffc17 	ldw	r2,-16(fp)
81128104:	10c0020d 	sth	r3,8(r2)
                 break;
81128108:	00000906 	br	81128130 <OSFlagPend+0x590>
8112810c:	e0bfe517 	ldw	r2,-108(fp)
81128110:	e0bff415 	stw	r2,-48(fp)
81128114:	e0bff417 	ldw	r2,-48(fp)
81128118:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
8112811c:	e0800217 	ldw	r2,8(fp)
81128120:	00c01bc4 	movi	r3,111
81128124:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
81128128:	0005883a 	mov	r2,zero
8112812c:	00000706 	br	8112814c <OSFlagPend+0x5ac>
81128130:	e0bfe517 	ldw	r2,-108(fp)
81128134:	e0bff515 	stw	r2,-44(fp)
81128138:	e0bff517 	ldw	r2,-44(fp)
8112813c:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
81128140:	e0800217 	ldw	r2,8(fp)
81128144:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
81128148:	e0bfe80b 	ldhu	r2,-96(fp)
}
8112814c:	e037883a 	mov	sp,fp
81128150:	dfc00117 	ldw	ra,4(sp)
81128154:	df000017 	ldw	fp,0(sp)
81128158:	dec00204 	addi	sp,sp,8
8112815c:	f800283a 	ret

81128160 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
81128160:	defffb04 	addi	sp,sp,-20
81128164:	de00012e 	bgeu	sp,et,8112816c <OSFlagPendGetFlagsRdy+0xc>
81128168:	003b68fa 	trap	3
8112816c:	df000415 	stw	fp,16(sp)
81128170:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
81128174:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81128178:	0005303a 	rdctl	r2,status
8112817c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81128180:	e0fffe17 	ldw	r3,-8(fp)
81128184:	00bfff84 	movi	r2,-2
81128188:	1884703a 	and	r2,r3,r2
8112818c:	1001703a 	wrctl	status,r2
  
  return context;
81128190:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
81128194:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
81128198:	d0a09017 	ldw	r2,-32192(gp)
8112819c:	10800b0b 	ldhu	r2,44(r2)
811281a0:	e0bffd0d 	sth	r2,-12(fp)
811281a4:	e0bffc17 	ldw	r2,-16(fp)
811281a8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811281ac:	e0bfff17 	ldw	r2,-4(fp)
811281b0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
811281b4:	e0bffd0b 	ldhu	r2,-12(fp)
}
811281b8:	e037883a 	mov	sp,fp
811281bc:	df000017 	ldw	fp,0(sp)
811281c0:	dec00104 	addi	sp,sp,4
811281c4:	f800283a 	ret

811281c8 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
811281c8:	deffef04 	addi	sp,sp,-68
811281cc:	de00012e 	bgeu	sp,et,811281d4 <OSFlagPost+0xc>
811281d0:	003b68fa 	trap	3
811281d4:	dfc01015 	stw	ra,64(sp)
811281d8:	df000f15 	stw	fp,60(sp)
811281dc:	df000f04 	addi	fp,sp,60
811281e0:	e13ffc15 	stw	r4,-16(fp)
811281e4:	2807883a 	mov	r3,r5
811281e8:	3005883a 	mov	r2,r6
811281ec:	e1ffff15 	stw	r7,-4(fp)
811281f0:	e0fffd0d 	sth	r3,-12(fp)
811281f4:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
811281f8:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
811281fc:	e0bfff17 	ldw	r2,-4(fp)
81128200:	1000021e 	bne	r2,zero,8112820c <OSFlagPost+0x44>
        return ((OS_FLAGS)0);
81128204:	0005883a 	mov	r2,zero
81128208:	0000d106 	br	81128550 <OSFlagPost+0x388>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
8112820c:	e0bffc17 	ldw	r2,-16(fp)
81128210:	1000051e 	bne	r2,zero,81128228 <OSFlagPost+0x60>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
81128214:	e0bfff17 	ldw	r2,-4(fp)
81128218:	00c01b84 	movi	r3,110
8112821c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
81128220:	0005883a 	mov	r2,zero
81128224:	0000ca06 	br	81128550 <OSFlagPost+0x388>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
81128228:	e0bffc17 	ldw	r2,-16(fp)
8112822c:	10800003 	ldbu	r2,0(r2)
81128230:	10803fcc 	andi	r2,r2,255
81128234:	10800160 	cmpeqi	r2,r2,5
81128238:	1000051e 	bne	r2,zero,81128250 <OSFlagPost+0x88>
        *perr = OS_ERR_EVENT_TYPE;
8112823c:	e0bfff17 	ldw	r2,-4(fp)
81128240:	00c00044 	movi	r3,1
81128244:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
81128248:	0005883a 	mov	r2,zero
8112824c:	0000c006 	br	81128550 <OSFlagPost+0x388>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81128250:	0005303a 	rdctl	r2,status
81128254:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81128258:	e0fffb17 	ldw	r3,-20(fp)
8112825c:	00bfff84 	movi	r2,-2
81128260:	1884703a 	and	r2,r3,r2
81128264:	1001703a 	wrctl	status,r2
  
  return context;
81128268:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
8112826c:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
81128270:	e0bffe03 	ldbu	r2,-8(fp)
81128274:	10000326 	beq	r2,zero,81128284 <OSFlagPost+0xbc>
81128278:	10800060 	cmpeqi	r2,r2,1
8112827c:	10000b1e 	bne	r2,zero,811282ac <OSFlagPost+0xe4>
81128280:	00001206 	br	811282cc <OSFlagPost+0x104>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
81128284:	e0bffc17 	ldw	r2,-16(fp)
81128288:	1080020b 	ldhu	r2,8(r2)
8112828c:	1007883a 	mov	r3,r2
81128290:	e0bffd0b 	ldhu	r2,-12(fp)
81128294:	0084303a 	nor	r2,zero,r2
81128298:	1884703a 	and	r2,r3,r2
8112829c:	1007883a 	mov	r3,r2
811282a0:	e0bffc17 	ldw	r2,-16(fp)
811282a4:	10c0020d 	sth	r3,8(r2)
             break;
811282a8:	00001106 	br	811282f0 <OSFlagPost+0x128>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
811282ac:	e0bffc17 	ldw	r2,-16(fp)
811282b0:	10c0020b 	ldhu	r3,8(r2)
811282b4:	e0bffd0b 	ldhu	r2,-12(fp)
811282b8:	1884b03a 	or	r2,r3,r2
811282bc:	1007883a 	mov	r3,r2
811282c0:	e0bffc17 	ldw	r2,-16(fp)
811282c4:	10c0020d 	sth	r3,8(r2)
             break;
811282c8:	00000906 	br	811282f0 <OSFlagPost+0x128>
811282cc:	e0bff317 	ldw	r2,-52(fp)
811282d0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811282d4:	e0bff417 	ldw	r2,-48(fp)
811282d8:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
811282dc:	e0bfff17 	ldw	r2,-4(fp)
811282e0:	00c01c44 	movi	r3,113
811282e4:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
811282e8:	0005883a 	mov	r2,zero
811282ec:	00009806 	br	81128550 <OSFlagPost+0x388>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
811282f0:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
811282f4:	e0bffc17 	ldw	r2,-16(fp)
811282f8:	10800117 	ldw	r2,4(r2)
811282fc:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
81128300:	00007706 	br	811284e0 <OSFlagPost+0x318>
        switch (pnode->OSFlagNodeWaitType) {
81128304:	e0bff117 	ldw	r2,-60(fp)
81128308:	10800483 	ldbu	r2,18(r2)
8112830c:	10803fcc 	andi	r2,r2,255
81128310:	10c00060 	cmpeqi	r3,r2,1
81128314:	18004a1e 	bne	r3,zero,81128440 <OSFlagPost+0x278>
81128318:	10c00088 	cmpgei	r3,r2,2
8112831c:	1800021e 	bne	r3,zero,81128328 <OSFlagPost+0x160>
81128320:	10002f26 	beq	r2,zero,811283e0 <OSFlagPost+0x218>
81128324:	00005b06 	br	81128494 <OSFlagPost+0x2cc>
81128328:	10c000a0 	cmpeqi	r3,r2,2
8112832c:	1800031e 	bne	r3,zero,8112833c <OSFlagPost+0x174>
81128330:	108000e0 	cmpeqi	r2,r2,3
81128334:	1000171e 	bne	r2,zero,81128394 <OSFlagPost+0x1cc>
81128338:	00005606 	br	81128494 <OSFlagPost+0x2cc>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
8112833c:	e0bffc17 	ldw	r2,-16(fp)
81128340:	10c0020b 	ldhu	r3,8(r2)
81128344:	e0bff117 	ldw	r2,-60(fp)
81128348:	1080040b 	ldhu	r2,16(r2)
8112834c:	1884703a 	and	r2,r3,r2
81128350:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
81128354:	e0bff117 	ldw	r2,-60(fp)
81128358:	1080040b 	ldhu	r2,16(r2)
8112835c:	10ffffcc 	andi	r3,r2,65535
81128360:	e0bff60b 	ldhu	r2,-40(fp)
81128364:	1880541e 	bne	r3,r2,811284b8 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
81128368:	e0bff60b 	ldhu	r2,-40(fp)
8112836c:	100b883a 	mov	r5,r2
81128370:	e13ff117 	ldw	r4,-60(fp)
81128374:	11288800 	call	81128880 <OS_FlagTaskRdy>
81128378:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
8112837c:	e0bff683 	ldbu	r2,-38(fp)
81128380:	10800058 	cmpnei	r2,r2,1
81128384:	10004c1e 	bne	r2,zero,811284b8 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
81128388:	00800044 	movi	r2,1
8112838c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
81128390:	00004906 	br	811284b8 <OSFlagPost+0x2f0>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
81128394:	e0bffc17 	ldw	r2,-16(fp)
81128398:	10c0020b 	ldhu	r3,8(r2)
8112839c:	e0bff117 	ldw	r2,-60(fp)
811283a0:	1080040b 	ldhu	r2,16(r2)
811283a4:	1884703a 	and	r2,r3,r2
811283a8:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
811283ac:	e0bff60b 	ldhu	r2,-40(fp)
811283b0:	10004326 	beq	r2,zero,811284c0 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
811283b4:	e0bff60b 	ldhu	r2,-40(fp)
811283b8:	100b883a 	mov	r5,r2
811283bc:	e13ff117 	ldw	r4,-60(fp)
811283c0:	11288800 	call	81128880 <OS_FlagTaskRdy>
811283c4:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
811283c8:	e0bff683 	ldbu	r2,-38(fp)
811283cc:	10800058 	cmpnei	r2,r2,1
811283d0:	10003b1e 	bne	r2,zero,811284c0 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
811283d4:	00800044 	movi	r2,1
811283d8:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
811283dc:	00003806 	br	811284c0 <OSFlagPost+0x2f8>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
811283e0:	e0bffc17 	ldw	r2,-16(fp)
811283e4:	1080020b 	ldhu	r2,8(r2)
811283e8:	0084303a 	nor	r2,zero,r2
811283ec:	1007883a 	mov	r3,r2
811283f0:	e0bff117 	ldw	r2,-60(fp)
811283f4:	1080040b 	ldhu	r2,16(r2)
811283f8:	1884703a 	and	r2,r3,r2
811283fc:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
81128400:	e0bff117 	ldw	r2,-60(fp)
81128404:	1080040b 	ldhu	r2,16(r2)
81128408:	10ffffcc 	andi	r3,r2,65535
8112840c:	e0bff60b 	ldhu	r2,-40(fp)
81128410:	18802d1e 	bne	r3,r2,811284c8 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
81128414:	e0bff60b 	ldhu	r2,-40(fp)
81128418:	100b883a 	mov	r5,r2
8112841c:	e13ff117 	ldw	r4,-60(fp)
81128420:	11288800 	call	81128880 <OS_FlagTaskRdy>
81128424:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
81128428:	e0bff683 	ldbu	r2,-38(fp)
8112842c:	10800058 	cmpnei	r2,r2,1
81128430:	1000251e 	bne	r2,zero,811284c8 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
81128434:	00800044 	movi	r2,1
81128438:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
8112843c:	00002206 	br	811284c8 <OSFlagPost+0x300>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
81128440:	e0bffc17 	ldw	r2,-16(fp)
81128444:	1080020b 	ldhu	r2,8(r2)
81128448:	0084303a 	nor	r2,zero,r2
8112844c:	1007883a 	mov	r3,r2
81128450:	e0bff117 	ldw	r2,-60(fp)
81128454:	1080040b 	ldhu	r2,16(r2)
81128458:	1884703a 	and	r2,r3,r2
8112845c:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
81128460:	e0bff60b 	ldhu	r2,-40(fp)
81128464:	10001a26 	beq	r2,zero,811284d0 <OSFlagPost+0x308>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
81128468:	e0bff60b 	ldhu	r2,-40(fp)
8112846c:	100b883a 	mov	r5,r2
81128470:	e13ff117 	ldw	r4,-60(fp)
81128474:	11288800 	call	81128880 <OS_FlagTaskRdy>
81128478:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
8112847c:	e0bff683 	ldbu	r2,-38(fp)
81128480:	10800058 	cmpnei	r2,r2,1
81128484:	1000121e 	bne	r2,zero,811284d0 <OSFlagPost+0x308>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
81128488:	00800044 	movi	r2,1
8112848c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
81128490:	00000f06 	br	811284d0 <OSFlagPost+0x308>
81128494:	e0bff317 	ldw	r2,-52(fp)
81128498:	e0bff515 	stw	r2,-44(fp)
8112849c:	e0bff517 	ldw	r2,-44(fp)
811284a0:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
811284a4:	e0bfff17 	ldw	r2,-4(fp)
811284a8:	00c01bc4 	movi	r3,111
811284ac:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
811284b0:	0005883a 	mov	r2,zero
811284b4:	00002606 	br	81128550 <OSFlagPost+0x388>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
811284b8:	0001883a 	nop
811284bc:	00000506 	br	811284d4 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
811284c0:	0001883a 	nop
811284c4:	00000306 	br	811284d4 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
811284c8:	0001883a 	nop
811284cc:	00000106 	br	811284d4 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
811284d0:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
811284d4:	e0bff117 	ldw	r2,-60(fp)
811284d8:	10800017 	ldw	r2,0(r2)
811284dc:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
811284e0:	e0bff117 	ldw	r2,-60(fp)
811284e4:	103f871e 	bne	r2,zero,81128304 <__reset+0xfb108304>
811284e8:	e0bff317 	ldw	r2,-52(fp)
811284ec:	e0bff715 	stw	r2,-36(fp)
811284f0:	e0bff717 	ldw	r2,-36(fp)
811284f4:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
811284f8:	e0bff203 	ldbu	r2,-56(fp)
811284fc:	10800058 	cmpnei	r2,r2,1
81128500:	1000011e 	bne	r2,zero,81128508 <OSFlagPost+0x340>
        OS_Sched();
81128504:	11269900 	call	81126990 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81128508:	0005303a 	rdctl	r2,status
8112850c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81128510:	e0fffa17 	ldw	r3,-24(fp)
81128514:	00bfff84 	movi	r2,-2
81128518:	1884703a 	and	r2,r3,r2
8112851c:	1001703a 	wrctl	status,r2
  
  return context;
81128520:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
81128524:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
81128528:	e0bffc17 	ldw	r2,-16(fp)
8112852c:	1080020b 	ldhu	r2,8(r2)
81128530:	e0bff90d 	sth	r2,-28(fp)
81128534:	e0bff317 	ldw	r2,-52(fp)
81128538:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112853c:	e0bff817 	ldw	r2,-32(fp)
81128540:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
81128544:	e0bfff17 	ldw	r2,-4(fp)
81128548:	10000005 	stb	zero,0(r2)
    return (flags_cur);
8112854c:	e0bff90b 	ldhu	r2,-28(fp)
}
81128550:	e037883a 	mov	sp,fp
81128554:	dfc00117 	ldw	ra,4(sp)
81128558:	df000017 	ldw	fp,0(sp)
8112855c:	dec00204 	addi	sp,sp,8
81128560:	f800283a 	ret

81128564 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
81128564:	defff904 	addi	sp,sp,-28
81128568:	de00012e 	bgeu	sp,et,81128570 <OSFlagQuery+0xc>
8112856c:	003b68fa 	trap	3
81128570:	df000615 	stw	fp,24(sp)
81128574:	df000604 	addi	fp,sp,24
81128578:	e13ffe15 	stw	r4,-8(fp)
8112857c:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
81128580:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
81128584:	e0bfff17 	ldw	r2,-4(fp)
81128588:	1000021e 	bne	r2,zero,81128594 <OSFlagQuery+0x30>
        return ((OS_FLAGS)0);
8112858c:	0005883a 	mov	r2,zero
81128590:	00002306 	br	81128620 <OSFlagQuery+0xbc>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
81128594:	e0bffe17 	ldw	r2,-8(fp)
81128598:	1000051e 	bne	r2,zero,811285b0 <OSFlagQuery+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
8112859c:	e0bfff17 	ldw	r2,-4(fp)
811285a0:	00c01b84 	movi	r3,110
811285a4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
811285a8:	0005883a 	mov	r2,zero
811285ac:	00001c06 	br	81128620 <OSFlagQuery+0xbc>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
811285b0:	e0bffe17 	ldw	r2,-8(fp)
811285b4:	10800003 	ldbu	r2,0(r2)
811285b8:	10803fcc 	andi	r2,r2,255
811285bc:	10800160 	cmpeqi	r2,r2,5
811285c0:	1000051e 	bne	r2,zero,811285d8 <OSFlagQuery+0x74>
        *perr = OS_ERR_EVENT_TYPE;
811285c4:	e0bfff17 	ldw	r2,-4(fp)
811285c8:	00c00044 	movi	r3,1
811285cc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
811285d0:	0005883a 	mov	r2,zero
811285d4:	00001206 	br	81128620 <OSFlagQuery+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811285d8:	0005303a 	rdctl	r2,status
811285dc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811285e0:	e0fffc17 	ldw	r3,-16(fp)
811285e4:	00bfff84 	movi	r2,-2
811285e8:	1884703a 	and	r2,r3,r2
811285ec:	1001703a 	wrctl	status,r2
  
  return context;
811285f0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
811285f4:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
811285f8:	e0bffe17 	ldw	r2,-8(fp)
811285fc:	1080020b 	ldhu	r2,8(r2)
81128600:	e0bffb0d 	sth	r2,-20(fp)
81128604:	e0bffa17 	ldw	r2,-24(fp)
81128608:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112860c:	e0bffd17 	ldw	r2,-12(fp)
81128610:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
81128614:	e0bfff17 	ldw	r2,-4(fp)
81128618:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
8112861c:	e0bffb0b 	ldhu	r2,-20(fp)
}
81128620:	e037883a 	mov	sp,fp
81128624:	df000017 	ldw	fp,0(sp)
81128628:	dec00104 	addi	sp,sp,4
8112862c:	f800283a 	ret

81128630 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
81128630:	defff804 	addi	sp,sp,-32
81128634:	de00012e 	bgeu	sp,et,8112863c <OS_FlagBlock+0xc>
81128638:	003b68fa 	trap	3
8112863c:	df000715 	stw	fp,28(sp)
81128640:	df000704 	addi	fp,sp,28
81128644:	e13ffb15 	stw	r4,-20(fp)
81128648:	e17ffc15 	stw	r5,-16(fp)
8112864c:	3009883a 	mov	r4,r6
81128650:	3807883a 	mov	r3,r7
81128654:	e0800117 	ldw	r2,4(fp)
81128658:	e13ffd0d 	sth	r4,-12(fp)
8112865c:	e0fffe05 	stb	r3,-8(fp)
81128660:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
81128664:	d0a09017 	ldw	r2,-32192(gp)
81128668:	d0e09017 	ldw	r3,-32192(gp)
8112866c:	18c00c03 	ldbu	r3,48(r3)
81128670:	18c00814 	ori	r3,r3,32
81128674:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
81128678:	d0a09017 	ldw	r2,-32192(gp)
8112867c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
81128680:	d0a09017 	ldw	r2,-32192(gp)
81128684:	e0ffff0b 	ldhu	r3,-4(fp)
81128688:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
8112868c:	d0a09017 	ldw	r2,-32192(gp)
81128690:	e0fffc17 	ldw	r3,-16(fp)
81128694:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
81128698:	e0bffc17 	ldw	r2,-16(fp)
8112869c:	e0fffd0b 	ldhu	r3,-12(fp)
811286a0:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
811286a4:	e0bffc17 	ldw	r2,-16(fp)
811286a8:	e0fffe03 	ldbu	r3,-8(fp)
811286ac:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
811286b0:	d0e09017 	ldw	r3,-32192(gp)
811286b4:	e0bffc17 	ldw	r2,-16(fp)
811286b8:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
811286bc:	e0bffb17 	ldw	r2,-20(fp)
811286c0:	10c00117 	ldw	r3,4(r2)
811286c4:	e0bffc17 	ldw	r2,-16(fp)
811286c8:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
811286cc:	e0bffc17 	ldw	r2,-16(fp)
811286d0:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
811286d4:	e0bffc17 	ldw	r2,-16(fp)
811286d8:	e0fffb17 	ldw	r3,-20(fp)
811286dc:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
811286e0:	e0bffb17 	ldw	r2,-20(fp)
811286e4:	10800117 	ldw	r2,4(r2)
811286e8:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
811286ec:	e0bff917 	ldw	r2,-28(fp)
811286f0:	10000326 	beq	r2,zero,81128700 <OS_FlagBlock+0xd0>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
811286f4:	e0bff917 	ldw	r2,-28(fp)
811286f8:	e0fffc17 	ldw	r3,-16(fp)
811286fc:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
81128700:	e0bffb17 	ldw	r2,-20(fp)
81128704:	e0fffc17 	ldw	r3,-16(fp)
81128708:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
8112870c:	d0a09017 	ldw	r2,-32192(gp)
81128710:	10800d03 	ldbu	r2,52(r2)
81128714:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
81128718:	e0fffa03 	ldbu	r3,-24(fp)
8112871c:	e13ffa03 	ldbu	r4,-24(fp)
81128720:	d0a08c44 	addi	r2,gp,-32207
81128724:	2085883a 	add	r2,r4,r2
81128728:	10800003 	ldbu	r2,0(r2)
8112872c:	1009883a 	mov	r4,r2
81128730:	d0a09017 	ldw	r2,-32192(gp)
81128734:	10800d43 	ldbu	r2,53(r2)
81128738:	0084303a 	nor	r2,zero,r2
8112873c:	2084703a 	and	r2,r4,r2
81128740:	1009883a 	mov	r4,r2
81128744:	d0a08c44 	addi	r2,gp,-32207
81128748:	1885883a 	add	r2,r3,r2
8112874c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
81128750:	e0fffa03 	ldbu	r3,-24(fp)
81128754:	d0a08c44 	addi	r2,gp,-32207
81128758:	1885883a 	add	r2,r3,r2
8112875c:	10800003 	ldbu	r2,0(r2)
81128760:	10803fcc 	andi	r2,r2,255
81128764:	1000071e 	bne	r2,zero,81128784 <OS_FlagBlock+0x154>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
81128768:	d0a09017 	ldw	r2,-32192(gp)
8112876c:	10800d83 	ldbu	r2,54(r2)
81128770:	0084303a 	nor	r2,zero,r2
81128774:	1007883a 	mov	r3,r2
81128778:	d0a08c03 	ldbu	r2,-32208(gp)
8112877c:	1884703a 	and	r2,r3,r2
81128780:	d0a08c05 	stb	r2,-32208(gp)
    }
}
81128784:	0001883a 	nop
81128788:	e037883a 	mov	sp,fp
8112878c:	df000017 	ldw	fp,0(sp)
81128790:	dec00104 	addi	sp,sp,4
81128794:	f800283a 	ret

81128798 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
81128798:	defffb04 	addi	sp,sp,-20
8112879c:	de00012e 	bgeu	sp,et,811287a4 <OS_FlagInit+0xc>
811287a0:	003b68fa 	trap	3
811287a4:	dfc00415 	stw	ra,16(sp)
811287a8:	df000315 	stw	fp,12(sp)
811287ac:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
811287b0:	0140dc04 	movi	r5,880
811287b4:	012045b4 	movhi	r4,33046
811287b8:	21034a04 	addi	r4,r4,3368
811287bc:	11268c40 	call	811268c4 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
811287c0:	00a045b4 	movhi	r2,33046
811287c4:	10834a04 	addi	r2,r2,3368
811287c8:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
811287cc:	00a045b4 	movhi	r2,33046
811287d0:	10835504 	addi	r2,r2,3412
811287d4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
811287d8:	e03ffd0d 	sth	zero,-12(fp)
811287dc:	00001306 	br	8112882c <OS_FlagInit+0x94>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
811287e0:	e0bffe17 	ldw	r2,-8(fp)
811287e4:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
811287e8:	e0bffe17 	ldw	r2,-8(fp)
811287ec:	e0ffff17 	ldw	r3,-4(fp)
811287f0:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
811287f4:	e0bffe17 	ldw	r2,-8(fp)
811287f8:	00c00fc4 	movi	r3,63
811287fc:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
81128800:	e0bffe17 	ldw	r2,-8(fp)
81128804:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
81128808:	e0bffe17 	ldw	r2,-8(fp)
8112880c:	10800b04 	addi	r2,r2,44
81128810:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
81128814:	e0bfff17 	ldw	r2,-4(fp)
81128818:	10800b04 	addi	r2,r2,44
8112881c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
81128820:	e0bffd0b 	ldhu	r2,-12(fp)
81128824:	10800044 	addi	r2,r2,1
81128828:	e0bffd0d 	sth	r2,-12(fp)
8112882c:	e0bffd0b 	ldhu	r2,-12(fp)
81128830:	108004f0 	cmpltui	r2,r2,19
81128834:	103fea1e 	bne	r2,zero,811287e0 <__reset+0xfb1087e0>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
81128838:	e0bffe17 	ldw	r2,-8(fp)
8112883c:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
81128840:	e0bffe17 	ldw	r2,-8(fp)
81128844:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
81128848:	e0bffe17 	ldw	r2,-8(fp)
8112884c:	00c00fc4 	movi	r3,63
81128850:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
81128854:	e0bffe17 	ldw	r2,-8(fp)
81128858:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
8112885c:	00a045b4 	movhi	r2,33046
81128860:	10834a04 	addi	r2,r2,3368
81128864:	d0a09415 	stw	r2,-32176(gp)
#endif
}
81128868:	0001883a 	nop
8112886c:	e037883a 	mov	sp,fp
81128870:	dfc00117 	ldw	ra,4(sp)
81128874:	df000017 	ldw	fp,0(sp)
81128878:	dec00204 	addi	sp,sp,8
8112887c:	f800283a 	ret

81128880 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
81128880:	defffa04 	addi	sp,sp,-24
81128884:	de00012e 	bgeu	sp,et,8112888c <OS_FlagTaskRdy+0xc>
81128888:	003b68fa 	trap	3
8112888c:	dfc00515 	stw	ra,20(sp)
81128890:	df000415 	stw	fp,16(sp)
81128894:	df000404 	addi	fp,sp,16
81128898:	e13ffe15 	stw	r4,-8(fp)
8112889c:	2805883a 	mov	r2,r5
811288a0:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
811288a4:	e0bffe17 	ldw	r2,-8(fp)
811288a8:	10800217 	ldw	r2,8(r2)
811288ac:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
811288b0:	e0bffd17 	ldw	r2,-12(fp)
811288b4:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
811288b8:	e0bffd17 	ldw	r2,-12(fp)
811288bc:	e0ffff0b 	ldhu	r3,-4(fp)
811288c0:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
811288c4:	e0bffd17 	ldw	r2,-12(fp)
811288c8:	10c00c03 	ldbu	r3,48(r2)
811288cc:	00bff7c4 	movi	r2,-33
811288d0:	1884703a 	and	r2,r3,r2
811288d4:	1007883a 	mov	r3,r2
811288d8:	e0bffd17 	ldw	r2,-12(fp)
811288dc:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
811288e0:	e0bffd17 	ldw	r2,-12(fp)
811288e4:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
811288e8:	e0bffd17 	ldw	r2,-12(fp)
811288ec:	10800c03 	ldbu	r2,48(r2)
811288f0:	10803fcc 	andi	r2,r2,255
811288f4:	1000181e 	bne	r2,zero,81128958 <OS_FlagTaskRdy+0xd8>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
811288f8:	e0bffd17 	ldw	r2,-12(fp)
811288fc:	10c00d83 	ldbu	r3,54(r2)
81128900:	d0a08c03 	ldbu	r2,-32208(gp)
81128904:	1884b03a 	or	r2,r3,r2
81128908:	d0a08c05 	stb	r2,-32208(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
8112890c:	e0bffd17 	ldw	r2,-12(fp)
81128910:	10800d03 	ldbu	r2,52(r2)
81128914:	10c03fcc 	andi	r3,r2,255
81128918:	e0bffd17 	ldw	r2,-12(fp)
8112891c:	10800d03 	ldbu	r2,52(r2)
81128920:	11003fcc 	andi	r4,r2,255
81128924:	d0a08c44 	addi	r2,gp,-32207
81128928:	2085883a 	add	r2,r4,r2
8112892c:	11000003 	ldbu	r4,0(r2)
81128930:	e0bffd17 	ldw	r2,-12(fp)
81128934:	10800d43 	ldbu	r2,53(r2)
81128938:	2084b03a 	or	r2,r4,r2
8112893c:	1009883a 	mov	r4,r2
81128940:	d0a08c44 	addi	r2,gp,-32207
81128944:	1885883a 	add	r2,r3,r2
81128948:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
8112894c:	00800044 	movi	r2,1
81128950:	e0bffc05 	stb	r2,-16(fp)
81128954:	00000106 	br	8112895c <OS_FlagTaskRdy+0xdc>
    } else {
        sched                   = OS_FALSE;
81128958:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
8112895c:	e13ffe17 	ldw	r4,-8(fp)
81128960:	112897c0 	call	8112897c <OS_FlagUnlink>
    return (sched);
81128964:	e0bffc03 	ldbu	r2,-16(fp)
}
81128968:	e037883a 	mov	sp,fp
8112896c:	dfc00117 	ldw	ra,4(sp)
81128970:	df000017 	ldw	fp,0(sp)
81128974:	dec00204 	addi	sp,sp,8
81128978:	f800283a 	ret

8112897c <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
8112897c:	defffa04 	addi	sp,sp,-24
81128980:	de00012e 	bgeu	sp,et,81128988 <OS_FlagUnlink+0xc>
81128984:	003b68fa 	trap	3
81128988:	df000515 	stw	fp,20(sp)
8112898c:	df000504 	addi	fp,sp,20
81128990:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
81128994:	e0bfff17 	ldw	r2,-4(fp)
81128998:	10800117 	ldw	r2,4(r2)
8112899c:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
811289a0:	e0bfff17 	ldw	r2,-4(fp)
811289a4:	10800017 	ldw	r2,0(r2)
811289a8:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
811289ac:	e0bffb17 	ldw	r2,-20(fp)
811289b0:	10000b1e 	bne	r2,zero,811289e0 <OS_FlagUnlink+0x64>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
811289b4:	e0bfff17 	ldw	r2,-4(fp)
811289b8:	10800317 	ldw	r2,12(r2)
811289bc:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
811289c0:	e0bffd17 	ldw	r2,-12(fp)
811289c4:	e0fffc17 	ldw	r3,-16(fp)
811289c8:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
811289cc:	e0bffc17 	ldw	r2,-16(fp)
811289d0:	10000b26 	beq	r2,zero,81128a00 <OS_FlagUnlink+0x84>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
811289d4:	e0bffc17 	ldw	r2,-16(fp)
811289d8:	10000115 	stw	zero,4(r2)
811289dc:	00000806 	br	81128a00 <OS_FlagUnlink+0x84>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
811289e0:	e0bffb17 	ldw	r2,-20(fp)
811289e4:	e0fffc17 	ldw	r3,-16(fp)
811289e8:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
811289ec:	e0bffc17 	ldw	r2,-16(fp)
811289f0:	10000326 	beq	r2,zero,81128a00 <OS_FlagUnlink+0x84>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
811289f4:	e0bffc17 	ldw	r2,-16(fp)
811289f8:	e0fffb17 	ldw	r3,-20(fp)
811289fc:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
81128a00:	e0bfff17 	ldw	r2,-4(fp)
81128a04:	10800217 	ldw	r2,8(r2)
81128a08:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
81128a0c:	e0bffe17 	ldw	r2,-8(fp)
81128a10:	10000a15 	stw	zero,40(r2)
#endif
}
81128a14:	0001883a 	nop
81128a18:	e037883a 	mov	sp,fp
81128a1c:	df000017 	ldw	fp,0(sp)
81128a20:	dec00104 	addi	sp,sp,4
81128a24:	f800283a 	ret

81128a28 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
81128a28:	defff404 	addi	sp,sp,-48
81128a2c:	de00012e 	bgeu	sp,et,81128a34 <OSMemCreate+0xc>
81128a30:	003b68fa 	trap	3
81128a34:	df000b15 	stw	fp,44(sp)
81128a38:	df000b04 	addi	fp,sp,44
81128a3c:	e13ffc15 	stw	r4,-16(fp)
81128a40:	e17ffd15 	stw	r5,-12(fp)
81128a44:	e1bffe15 	stw	r6,-8(fp)
81128a48:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
81128a4c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
81128a50:	e0bfff17 	ldw	r2,-4(fp)
81128a54:	1000021e 	bne	r2,zero,81128a60 <OSMemCreate+0x38>
        return ((OS_MEM *)0);
81128a58:	0005883a 	mov	r2,zero
81128a5c:	00006506 	br	81128bf4 <OSMemCreate+0x1cc>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
81128a60:	e0bffc17 	ldw	r2,-16(fp)
81128a64:	1000051e 	bne	r2,zero,81128a7c <OSMemCreate+0x54>
        *perr = OS_ERR_MEM_INVALID_ADDR;
81128a68:	e0bfff17 	ldw	r2,-4(fp)
81128a6c:	00c01884 	movi	r3,98
81128a70:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
81128a74:	0005883a 	mov	r2,zero
81128a78:	00005e06 	br	81128bf4 <OSMemCreate+0x1cc>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
81128a7c:	e0bffc17 	ldw	r2,-16(fp)
81128a80:	108000cc 	andi	r2,r2,3
81128a84:	10000526 	beq	r2,zero,81128a9c <OSMemCreate+0x74>
        *perr = OS_ERR_MEM_INVALID_ADDR;
81128a88:	e0bfff17 	ldw	r2,-4(fp)
81128a8c:	00c01884 	movi	r3,98
81128a90:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
81128a94:	0005883a 	mov	r2,zero
81128a98:	00005606 	br	81128bf4 <OSMemCreate+0x1cc>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
81128a9c:	e0bffd17 	ldw	r2,-12(fp)
81128aa0:	108000a8 	cmpgeui	r2,r2,2
81128aa4:	1000051e 	bne	r2,zero,81128abc <OSMemCreate+0x94>
        *perr = OS_ERR_MEM_INVALID_BLKS;
81128aa8:	e0bfff17 	ldw	r2,-4(fp)
81128aac:	00c016c4 	movi	r3,91
81128ab0:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
81128ab4:	0005883a 	mov	r2,zero
81128ab8:	00004e06 	br	81128bf4 <OSMemCreate+0x1cc>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
81128abc:	e0bffe17 	ldw	r2,-8(fp)
81128ac0:	10800128 	cmpgeui	r2,r2,4
81128ac4:	1000051e 	bne	r2,zero,81128adc <OSMemCreate+0xb4>
        *perr = OS_ERR_MEM_INVALID_SIZE;
81128ac8:	e0bfff17 	ldw	r2,-4(fp)
81128acc:	00c01704 	movi	r3,92
81128ad0:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
81128ad4:	0005883a 	mov	r2,zero
81128ad8:	00004606 	br	81128bf4 <OSMemCreate+0x1cc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81128adc:	0005303a 	rdctl	r2,status
81128ae0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81128ae4:	e0fffb17 	ldw	r3,-20(fp)
81128ae8:	00bfff84 	movi	r2,-2
81128aec:	1884703a 	and	r2,r3,r2
81128af0:	1001703a 	wrctl	status,r2
  
  return context;
81128af4:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
81128af8:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
81128afc:	d0a08917 	ldw	r2,-32220(gp)
81128b00:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
81128b04:	d0a08917 	ldw	r2,-32220(gp)
81128b08:	10000326 	beq	r2,zero,81128b18 <OSMemCreate+0xf0>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
81128b0c:	d0a08917 	ldw	r2,-32220(gp)
81128b10:	10800117 	ldw	r2,4(r2)
81128b14:	d0a08915 	stw	r2,-32220(gp)
81128b18:	e0bff817 	ldw	r2,-32(fp)
81128b1c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81128b20:	e0bff917 	ldw	r2,-28(fp)
81128b24:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
81128b28:	e0bffa17 	ldw	r2,-24(fp)
81128b2c:	1000051e 	bne	r2,zero,81128b44 <OSMemCreate+0x11c>
        *perr = OS_ERR_MEM_INVALID_PART;
81128b30:	e0bfff17 	ldw	r2,-4(fp)
81128b34:	00c01684 	movi	r3,90
81128b38:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
81128b3c:	0005883a 	mov	r2,zero
81128b40:	00002c06 	br	81128bf4 <OSMemCreate+0x1cc>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
81128b44:	e0bffc17 	ldw	r2,-16(fp)
81128b48:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
81128b4c:	e0fffc17 	ldw	r3,-16(fp)
81128b50:	e0bffe17 	ldw	r2,-8(fp)
81128b54:	1885883a 	add	r2,r3,r2
81128b58:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
81128b5c:	e03ff715 	stw	zero,-36(fp)
81128b60:	00000c06 	br	81128b94 <OSMemCreate+0x16c>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
81128b64:	e0bff617 	ldw	r2,-40(fp)
81128b68:	e0fff517 	ldw	r3,-44(fp)
81128b6c:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
81128b70:	e0bff517 	ldw	r2,-44(fp)
81128b74:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
81128b78:	e0fff517 	ldw	r3,-44(fp)
81128b7c:	e0bffe17 	ldw	r2,-8(fp)
81128b80:	1885883a 	add	r2,r3,r2
81128b84:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
81128b88:	e0bff717 	ldw	r2,-36(fp)
81128b8c:	10800044 	addi	r2,r2,1
81128b90:	e0bff715 	stw	r2,-36(fp)
81128b94:	e0bffd17 	ldw	r2,-12(fp)
81128b98:	10bfffc4 	addi	r2,r2,-1
81128b9c:	e0fff717 	ldw	r3,-36(fp)
81128ba0:	18bff036 	bltu	r3,r2,81128b64 <__reset+0xfb108b64>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
81128ba4:	e0bff617 	ldw	r2,-40(fp)
81128ba8:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
81128bac:	e0bffa17 	ldw	r2,-24(fp)
81128bb0:	e0fffc17 	ldw	r3,-16(fp)
81128bb4:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
81128bb8:	e0bffa17 	ldw	r2,-24(fp)
81128bbc:	e0fffc17 	ldw	r3,-16(fp)
81128bc0:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
81128bc4:	e0bffa17 	ldw	r2,-24(fp)
81128bc8:	e0fffd17 	ldw	r3,-12(fp)
81128bcc:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
81128bd0:	e0bffa17 	ldw	r2,-24(fp)
81128bd4:	e0fffd17 	ldw	r3,-12(fp)
81128bd8:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
81128bdc:	e0bffa17 	ldw	r2,-24(fp)
81128be0:	e0fffe17 	ldw	r3,-8(fp)
81128be4:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
81128be8:	e0bfff17 	ldw	r2,-4(fp)
81128bec:	10000005 	stb	zero,0(r2)
    return (pmem);
81128bf0:	e0bffa17 	ldw	r2,-24(fp)
}
81128bf4:	e037883a 	mov	sp,fp
81128bf8:	df000017 	ldw	fp,0(sp)
81128bfc:	dec00104 	addi	sp,sp,4
81128c00:	f800283a 	ret

81128c04 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
81128c04:	defff804 	addi	sp,sp,-32
81128c08:	de00012e 	bgeu	sp,et,81128c10 <OSMemGet+0xc>
81128c0c:	003b68fa 	trap	3
81128c10:	df000715 	stw	fp,28(sp)
81128c14:	df000704 	addi	fp,sp,28
81128c18:	e13ffe15 	stw	r4,-8(fp)
81128c1c:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
81128c20:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
81128c24:	e0bfff17 	ldw	r2,-4(fp)
81128c28:	1000021e 	bne	r2,zero,81128c34 <OSMemGet+0x30>
        return ((void *)0);
81128c2c:	0005883a 	mov	r2,zero
81128c30:	00002e06 	br	81128cec <OSMemGet+0xe8>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
81128c34:	e0bffe17 	ldw	r2,-8(fp)
81128c38:	1000051e 	bne	r2,zero,81128c50 <OSMemGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
81128c3c:	e0bfff17 	ldw	r2,-4(fp)
81128c40:	00c01804 	movi	r3,96
81128c44:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
81128c48:	0005883a 	mov	r2,zero
81128c4c:	00002706 	br	81128cec <OSMemGet+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81128c50:	0005303a 	rdctl	r2,status
81128c54:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81128c58:	e0fffd17 	ldw	r3,-12(fp)
81128c5c:	00bfff84 	movi	r2,-2
81128c60:	1884703a 	and	r2,r3,r2
81128c64:	1001703a 	wrctl	status,r2
  
  return context;
81128c68:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
81128c6c:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
81128c70:	e0bffe17 	ldw	r2,-8(fp)
81128c74:	10800417 	ldw	r2,16(r2)
81128c78:	10001426 	beq	r2,zero,81128ccc <OSMemGet+0xc8>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
81128c7c:	e0bffe17 	ldw	r2,-8(fp)
81128c80:	10800117 	ldw	r2,4(r2)
81128c84:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
81128c88:	e0bffb17 	ldw	r2,-20(fp)
81128c8c:	10c00017 	ldw	r3,0(r2)
81128c90:	e0bffe17 	ldw	r2,-8(fp)
81128c94:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
81128c98:	e0bffe17 	ldw	r2,-8(fp)
81128c9c:	10800417 	ldw	r2,16(r2)
81128ca0:	10ffffc4 	addi	r3,r2,-1
81128ca4:	e0bffe17 	ldw	r2,-8(fp)
81128ca8:	10c00415 	stw	r3,16(r2)
81128cac:	e0bff917 	ldw	r2,-28(fp)
81128cb0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81128cb4:	e0bffa17 	ldw	r2,-24(fp)
81128cb8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
81128cbc:	e0bfff17 	ldw	r2,-4(fp)
81128cc0:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
81128cc4:	e0bffb17 	ldw	r2,-20(fp)
81128cc8:	00000806 	br	81128cec <OSMemGet+0xe8>
81128ccc:	e0bff917 	ldw	r2,-28(fp)
81128cd0:	e0bffc15 	stw	r2,-16(fp)
81128cd4:	e0bffc17 	ldw	r2,-16(fp)
81128cd8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
81128cdc:	e0bfff17 	ldw	r2,-4(fp)
81128ce0:	00c01744 	movi	r3,93
81128ce4:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
81128ce8:	0005883a 	mov	r2,zero
}
81128cec:	e037883a 	mov	sp,fp
81128cf0:	df000017 	ldw	fp,0(sp)
81128cf4:	dec00104 	addi	sp,sp,4
81128cf8:	f800283a 	ret

81128cfc <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
81128cfc:	defff704 	addi	sp,sp,-36
81128d00:	de00012e 	bgeu	sp,et,81128d08 <OSMemNameGet+0xc>
81128d04:	003b68fa 	trap	3
81128d08:	dfc00815 	stw	ra,32(sp)
81128d0c:	df000715 	stw	fp,28(sp)
81128d10:	df000704 	addi	fp,sp,28
81128d14:	e13ffd15 	stw	r4,-12(fp)
81128d18:	e17ffe15 	stw	r5,-8(fp)
81128d1c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81128d20:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
81128d24:	e0bfff17 	ldw	r2,-4(fp)
81128d28:	1000021e 	bne	r2,zero,81128d34 <OSMemNameGet+0x38>
        return (0);
81128d2c:	0005883a 	mov	r2,zero
81128d30:	00002b06 	br	81128de0 <OSMemNameGet+0xe4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
81128d34:	e0bffd17 	ldw	r2,-12(fp)
81128d38:	1000051e 	bne	r2,zero,81128d50 <OSMemNameGet+0x54>
        *perr = OS_ERR_MEM_INVALID_PMEM;
81128d3c:	e0bfff17 	ldw	r2,-4(fp)
81128d40:	00c01804 	movi	r3,96
81128d44:	10c00005 	stb	r3,0(r2)
        return (0);
81128d48:	0005883a 	mov	r2,zero
81128d4c:	00002406 	br	81128de0 <OSMemNameGet+0xe4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
81128d50:	e0bffe17 	ldw	r2,-8(fp)
81128d54:	1000051e 	bne	r2,zero,81128d6c <OSMemNameGet+0x70>
        *perr = OS_ERR_PNAME_NULL;
81128d58:	e0bfff17 	ldw	r2,-4(fp)
81128d5c:	00c00304 	movi	r3,12
81128d60:	10c00005 	stb	r3,0(r2)
        return (0);
81128d64:	0005883a 	mov	r2,zero
81128d68:	00001d06 	br	81128de0 <OSMemNameGet+0xe4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
81128d6c:	d0a08f03 	ldbu	r2,-32196(gp)
81128d70:	10803fcc 	andi	r2,r2,255
81128d74:	10000526 	beq	r2,zero,81128d8c <OSMemNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
81128d78:	e0bfff17 	ldw	r2,-4(fp)
81128d7c:	00c00444 	movi	r3,17
81128d80:	10c00005 	stb	r3,0(r2)
        return (0);
81128d84:	0005883a 	mov	r2,zero
81128d88:	00001506 	br	81128de0 <OSMemNameGet+0xe4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81128d8c:	0005303a 	rdctl	r2,status
81128d90:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81128d94:	e0fffb17 	ldw	r3,-20(fp)
81128d98:	00bfff84 	movi	r2,-2
81128d9c:	1884703a 	and	r2,r3,r2
81128da0:	1001703a 	wrctl	status,r2
  
  return context;
81128da4:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
81128da8:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
81128dac:	e0bffd17 	ldw	r2,-12(fp)
81128db0:	10800504 	addi	r2,r2,20
81128db4:	100b883a 	mov	r5,r2
81128db8:	e13ffe17 	ldw	r4,-8(fp)
81128dbc:	1126ae40 	call	81126ae4 <OS_StrCopy>
81128dc0:	e0bffa05 	stb	r2,-24(fp)
81128dc4:	e0bff917 	ldw	r2,-28(fp)
81128dc8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81128dcc:	e0bffc17 	ldw	r2,-16(fp)
81128dd0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
81128dd4:	e0bfff17 	ldw	r2,-4(fp)
81128dd8:	10000005 	stb	zero,0(r2)
    return (len);
81128ddc:	e0bffa03 	ldbu	r2,-24(fp)
}
81128de0:	e037883a 	mov	sp,fp
81128de4:	dfc00117 	ldw	ra,4(sp)
81128de8:	df000017 	ldw	fp,0(sp)
81128dec:	dec00204 	addi	sp,sp,8
81128df0:	f800283a 	ret

81128df4 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
81128df4:	defff604 	addi	sp,sp,-40
81128df8:	de00012e 	bgeu	sp,et,81128e00 <OSMemNameSet+0xc>
81128dfc:	003b68fa 	trap	3
81128e00:	dfc00915 	stw	ra,36(sp)
81128e04:	df000815 	stw	fp,32(sp)
81128e08:	df000804 	addi	fp,sp,32
81128e0c:	e13ffd15 	stw	r4,-12(fp)
81128e10:	e17ffe15 	stw	r5,-8(fp)
81128e14:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81128e18:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
81128e1c:	e0bfff17 	ldw	r2,-4(fp)
81128e20:	10003526 	beq	r2,zero,81128ef8 <OSMemNameSet+0x104>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
81128e24:	e0bffd17 	ldw	r2,-12(fp)
81128e28:	1000041e 	bne	r2,zero,81128e3c <OSMemNameSet+0x48>
        *perr = OS_ERR_MEM_INVALID_PMEM;
81128e2c:	e0bfff17 	ldw	r2,-4(fp)
81128e30:	00c01804 	movi	r3,96
81128e34:	10c00005 	stb	r3,0(r2)
        return;
81128e38:	00003006 	br	81128efc <OSMemNameSet+0x108>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
81128e3c:	e0bffe17 	ldw	r2,-8(fp)
81128e40:	1000041e 	bne	r2,zero,81128e54 <OSMemNameSet+0x60>
        *perr = OS_ERR_PNAME_NULL;
81128e44:	e0bfff17 	ldw	r2,-4(fp)
81128e48:	00c00304 	movi	r3,12
81128e4c:	10c00005 	stb	r3,0(r2)
        return;
81128e50:	00002a06 	br	81128efc <OSMemNameSet+0x108>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
81128e54:	d0a08f03 	ldbu	r2,-32196(gp)
81128e58:	10803fcc 	andi	r2,r2,255
81128e5c:	10000426 	beq	r2,zero,81128e70 <OSMemNameSet+0x7c>
        *perr = OS_ERR_NAME_SET_ISR;
81128e60:	e0bfff17 	ldw	r2,-4(fp)
81128e64:	00c00484 	movi	r3,18
81128e68:	10c00005 	stb	r3,0(r2)
        return;
81128e6c:	00002306 	br	81128efc <OSMemNameSet+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81128e70:	0005303a 	rdctl	r2,status
81128e74:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81128e78:	e0fffc17 	ldw	r3,-16(fp)
81128e7c:	00bfff84 	movi	r2,-2
81128e80:	1884703a 	and	r2,r3,r2
81128e84:	1001703a 	wrctl	status,r2
  
  return context;
81128e88:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
81128e8c:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
81128e90:	e13ffe17 	ldw	r4,-8(fp)
81128e94:	1126b600 	call	81126b60 <OS_StrLen>
81128e98:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
81128e9c:	e0bffa03 	ldbu	r2,-24(fp)
81128ea0:	10800830 	cmpltui	r2,r2,32
81128ea4:	1000081e 	bne	r2,zero,81128ec8 <OSMemNameSet+0xd4>
81128ea8:	e0bff817 	ldw	r2,-32(fp)
81128eac:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81128eb0:	e0bff917 	ldw	r2,-28(fp)
81128eb4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
81128eb8:	e0bfff17 	ldw	r2,-4(fp)
81128ebc:	00c018c4 	movi	r3,99
81128ec0:	10c00005 	stb	r3,0(r2)
        return;
81128ec4:	00000d06 	br	81128efc <OSMemNameSet+0x108>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
81128ec8:	e0bffd17 	ldw	r2,-12(fp)
81128ecc:	10800504 	addi	r2,r2,20
81128ed0:	e17ffe17 	ldw	r5,-8(fp)
81128ed4:	1009883a 	mov	r4,r2
81128ed8:	1126ae40 	call	81126ae4 <OS_StrCopy>
81128edc:	e0bff817 	ldw	r2,-32(fp)
81128ee0:	e0bffb15 	stw	r2,-20(fp)
81128ee4:	e0bffb17 	ldw	r2,-20(fp)
81128ee8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
81128eec:	e0bfff17 	ldw	r2,-4(fp)
81128ef0:	10000005 	stb	zero,0(r2)
81128ef4:	00000106 	br	81128efc <OSMemNameSet+0x108>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
81128ef8:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
81128efc:	e037883a 	mov	sp,fp
81128f00:	dfc00117 	ldw	ra,4(sp)
81128f04:	df000017 	ldw	fp,0(sp)
81128f08:	dec00204 	addi	sp,sp,8
81128f0c:	f800283a 	ret

81128f10 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
81128f10:	defff904 	addi	sp,sp,-28
81128f14:	de00012e 	bgeu	sp,et,81128f1c <OSMemPut+0xc>
81128f18:	003b68fa 	trap	3
81128f1c:	df000615 	stw	fp,24(sp)
81128f20:	df000604 	addi	fp,sp,24
81128f24:	e13ffe15 	stw	r4,-8(fp)
81128f28:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81128f2c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
81128f30:	e0bffe17 	ldw	r2,-8(fp)
81128f34:	1000021e 	bne	r2,zero,81128f40 <OSMemPut+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
81128f38:	00801804 	movi	r2,96
81128f3c:	00002806 	br	81128fe0 <OSMemPut+0xd0>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
81128f40:	e0bfff17 	ldw	r2,-4(fp)
81128f44:	1000021e 	bne	r2,zero,81128f50 <OSMemPut+0x40>
        return (OS_ERR_MEM_INVALID_PBLK);
81128f48:	008017c4 	movi	r2,95
81128f4c:	00002406 	br	81128fe0 <OSMemPut+0xd0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81128f50:	0005303a 	rdctl	r2,status
81128f54:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81128f58:	e0fffd17 	ldw	r3,-12(fp)
81128f5c:	00bfff84 	movi	r2,-2
81128f60:	1884703a 	and	r2,r3,r2
81128f64:	1001703a 	wrctl	status,r2
  
  return context;
81128f68:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
81128f6c:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
81128f70:	e0bffe17 	ldw	r2,-8(fp)
81128f74:	10c00417 	ldw	r3,16(r2)
81128f78:	e0bffe17 	ldw	r2,-8(fp)
81128f7c:	10800317 	ldw	r2,12(r2)
81128f80:	18800636 	bltu	r3,r2,81128f9c <OSMemPut+0x8c>
81128f84:	e0bffa17 	ldw	r2,-24(fp)
81128f88:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81128f8c:	e0bffb17 	ldw	r2,-20(fp)
81128f90:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
81128f94:	00801784 	movi	r2,94
81128f98:	00001106 	br	81128fe0 <OSMemPut+0xd0>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
81128f9c:	e0bffe17 	ldw	r2,-8(fp)
81128fa0:	10c00117 	ldw	r3,4(r2)
81128fa4:	e0bfff17 	ldw	r2,-4(fp)
81128fa8:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
81128fac:	e0bffe17 	ldw	r2,-8(fp)
81128fb0:	e0ffff17 	ldw	r3,-4(fp)
81128fb4:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
81128fb8:	e0bffe17 	ldw	r2,-8(fp)
81128fbc:	10800417 	ldw	r2,16(r2)
81128fc0:	10c00044 	addi	r3,r2,1
81128fc4:	e0bffe17 	ldw	r2,-8(fp)
81128fc8:	10c00415 	stw	r3,16(r2)
81128fcc:	e0bffa17 	ldw	r2,-24(fp)
81128fd0:	e0bffc15 	stw	r2,-16(fp)
81128fd4:	e0bffc17 	ldw	r2,-16(fp)
81128fd8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
81128fdc:	0005883a 	mov	r2,zero
}
81128fe0:	e037883a 	mov	sp,fp
81128fe4:	df000017 	ldw	fp,0(sp)
81128fe8:	dec00104 	addi	sp,sp,4
81128fec:	f800283a 	ret

81128ff0 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
81128ff0:	defffa04 	addi	sp,sp,-24
81128ff4:	de00012e 	bgeu	sp,et,81128ffc <OSMemQuery+0xc>
81128ff8:	003b68fa 	trap	3
81128ffc:	df000515 	stw	fp,20(sp)
81129000:	df000504 	addi	fp,sp,20
81129004:	e13ffe15 	stw	r4,-8(fp)
81129008:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112900c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
81129010:	e0bffe17 	ldw	r2,-8(fp)
81129014:	1000021e 	bne	r2,zero,81129020 <OSMemQuery+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
81129018:	00801804 	movi	r2,96
8112901c:	00002c06 	br	811290d0 <OSMemQuery+0xe0>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
81129020:	e0bfff17 	ldw	r2,-4(fp)
81129024:	1000021e 	bne	r2,zero,81129030 <OSMemQuery+0x40>
        return (OS_ERR_MEM_INVALID_PDATA);
81129028:	00801844 	movi	r2,97
8112902c:	00002806 	br	811290d0 <OSMemQuery+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81129030:	0005303a 	rdctl	r2,status
81129034:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81129038:	e0fffc17 	ldw	r3,-16(fp)
8112903c:	00bfff84 	movi	r2,-2
81129040:	1884703a 	and	r2,r3,r2
81129044:	1001703a 	wrctl	status,r2
  
  return context;
81129048:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8112904c:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
81129050:	e0bffe17 	ldw	r2,-8(fp)
81129054:	10c00017 	ldw	r3,0(r2)
81129058:	e0bfff17 	ldw	r2,-4(fp)
8112905c:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
81129060:	e0bffe17 	ldw	r2,-8(fp)
81129064:	10c00117 	ldw	r3,4(r2)
81129068:	e0bfff17 	ldw	r2,-4(fp)
8112906c:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
81129070:	e0bffe17 	ldw	r2,-8(fp)
81129074:	10c00217 	ldw	r3,8(r2)
81129078:	e0bfff17 	ldw	r2,-4(fp)
8112907c:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
81129080:	e0bffe17 	ldw	r2,-8(fp)
81129084:	10c00317 	ldw	r3,12(r2)
81129088:	e0bfff17 	ldw	r2,-4(fp)
8112908c:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
81129090:	e0bffe17 	ldw	r2,-8(fp)
81129094:	10c00417 	ldw	r3,16(r2)
81129098:	e0bfff17 	ldw	r2,-4(fp)
8112909c:	10c00415 	stw	r3,16(r2)
811290a0:	e0bffb17 	ldw	r2,-20(fp)
811290a4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811290a8:	e0bffd17 	ldw	r2,-12(fp)
811290ac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
811290b0:	e0bfff17 	ldw	r2,-4(fp)
811290b4:	10c00317 	ldw	r3,12(r2)
811290b8:	e0bfff17 	ldw	r2,-4(fp)
811290bc:	10800417 	ldw	r2,16(r2)
811290c0:	1887c83a 	sub	r3,r3,r2
811290c4:	e0bfff17 	ldw	r2,-4(fp)
811290c8:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
811290cc:	0005883a 	mov	r2,zero
}
811290d0:	e037883a 	mov	sp,fp
811290d4:	df000017 	ldw	fp,0(sp)
811290d8:	dec00104 	addi	sp,sp,4
811290dc:	f800283a 	ret

811290e0 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
811290e0:	defffc04 	addi	sp,sp,-16
811290e4:	de00012e 	bgeu	sp,et,811290ec <OS_MemInit+0xc>
811290e8:	003b68fa 	trap	3
811290ec:	dfc00315 	stw	ra,12(sp)
811290f0:	df000215 	stw	fp,8(sp)
811290f4:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
811290f8:	01430c04 	movi	r5,3120
811290fc:	012045b4 	movhi	r4,33046
81129100:	21048e04 	addi	r4,r4,4664
81129104:	11268c40 	call	811268c4 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
81129108:	00a045b4 	movhi	r2,33046
8112910c:	10848e04 	addi	r2,r2,4664
81129110:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
81129114:	e03fff0d 	sth	zero,-4(fp)
81129118:	00001306 	br	81129168 <OS_MemInit+0x88>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
8112911c:	e0bfff0b 	ldhu	r2,-4(fp)
81129120:	10800044 	addi	r2,r2,1
81129124:	10c00d24 	muli	r3,r2,52
81129128:	00a045b4 	movhi	r2,33046
8112912c:	10848e04 	addi	r2,r2,4664
81129130:	1887883a 	add	r3,r3,r2
81129134:	e0bffe17 	ldw	r2,-8(fp)
81129138:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
8112913c:	e0bffe17 	ldw	r2,-8(fp)
81129140:	00c00fc4 	movi	r3,63
81129144:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
81129148:	e0bffe17 	ldw	r2,-8(fp)
8112914c:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
81129150:	e0bffe17 	ldw	r2,-8(fp)
81129154:	10800d04 	addi	r2,r2,52
81129158:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
8112915c:	e0bfff0b 	ldhu	r2,-4(fp)
81129160:	10800044 	addi	r2,r2,1
81129164:	e0bfff0d 	sth	r2,-4(fp)
81129168:	e0bfff0b 	ldhu	r2,-4(fp)
8112916c:	10800ef0 	cmpltui	r2,r2,59
81129170:	103fea1e 	bne	r2,zero,8112911c <__reset+0xfb10911c>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
81129174:	e0bffe17 	ldw	r2,-8(fp)
81129178:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
8112917c:	e0bffe17 	ldw	r2,-8(fp)
81129180:	00c00fc4 	movi	r3,63
81129184:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
81129188:	e0bffe17 	ldw	r2,-8(fp)
8112918c:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
81129190:	00a045b4 	movhi	r2,33046
81129194:	10848e04 	addi	r2,r2,4664
81129198:	d0a08915 	stw	r2,-32220(gp)
#endif
}
8112919c:	0001883a 	nop
811291a0:	e037883a 	mov	sp,fp
811291a4:	dfc00117 	ldw	ra,4(sp)
811291a8:	df000017 	ldw	fp,0(sp)
811291ac:	dec00204 	addi	sp,sp,8
811291b0:	f800283a 	ret

811291b4 <OSMutexAccept>:
*********************************************************************************************************
*/

#if OS_MUTEX_ACCEPT_EN > 0
BOOLEAN  OSMutexAccept (OS_EVENT *pevent, INT8U *perr)
{
811291b4:	defff704 	addi	sp,sp,-36
811291b8:	de00012e 	bgeu	sp,et,811291c0 <OSMutexAccept+0xc>
811291bc:	003b68fa 	trap	3
811291c0:	df000815 	stw	fp,32(sp)
811291c4:	df000804 	addi	fp,sp,32
811291c8:	e13ffe15 	stw	r4,-8(fp)
811291cc:	e17fff15 	stw	r5,-4(fp)
    INT8U      pip;                                    /* Priority Inheritance Priority (PIP)          */
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
811291d0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                          /* Validate 'perr'                              */
811291d4:	e0bfff17 	ldw	r2,-4(fp)
811291d8:	1000021e 	bne	r2,zero,811291e4 <OSMutexAccept+0x30>
        return (OS_FALSE);
811291dc:	0005883a 	mov	r2,zero
811291e0:	00005b06 	br	81129350 <OSMutexAccept+0x19c>
    }
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
811291e4:	e0bffe17 	ldw	r2,-8(fp)
811291e8:	1000051e 	bne	r2,zero,81129200 <OSMutexAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
811291ec:	e0bfff17 	ldw	r2,-4(fp)
811291f0:	00c00104 	movi	r3,4
811291f4:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
811291f8:	0005883a 	mov	r2,zero
811291fc:	00005406 	br	81129350 <OSMutexAccept+0x19c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {  /* Validate event block type                    */
81129200:	e0bffe17 	ldw	r2,-8(fp)
81129204:	10800003 	ldbu	r2,0(r2)
81129208:	10803fcc 	andi	r2,r2,255
8112920c:	10800120 	cmpeqi	r2,r2,4
81129210:	1000051e 	bne	r2,zero,81129228 <OSMutexAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
81129214:	e0bfff17 	ldw	r2,-4(fp)
81129218:	00c00044 	movi	r3,1
8112921c:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
81129220:	0005883a 	mov	r2,zero
81129224:	00004a06 	br	81129350 <OSMutexAccept+0x19c>
    }
    if (OSIntNesting > 0) {                            /* Make sure it's not called from an ISR        */
81129228:	d0a08f03 	ldbu	r2,-32196(gp)
8112922c:	10803fcc 	andi	r2,r2,255
81129230:	10000526 	beq	r2,zero,81129248 <OSMutexAccept+0x94>
        *perr = OS_ERR_PEND_ISR;
81129234:	e0bfff17 	ldw	r2,-4(fp)
81129238:	00c00084 	movi	r3,2
8112923c:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
81129240:	0005883a 	mov	r2,zero
81129244:	00004206 	br	81129350 <OSMutexAccept+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81129248:	0005303a 	rdctl	r2,status
8112924c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81129250:	e0fffd17 	ldw	r3,-12(fp)
81129254:	00bfff84 	movi	r2,-2
81129258:	1884703a 	and	r2,r3,r2
8112925c:	1001703a 	wrctl	status,r2
  
  return context;
81129260:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();                               /* Get value (0 or 1) of Mutex                  */
81129264:	e0bff815 	stw	r2,-32(fp)
    pip = (INT8U)(pevent->OSEventCnt >> 8);            /* Get PIP from mutex                           */
81129268:	e0bffe17 	ldw	r2,-8(fp)
8112926c:	1080020b 	ldhu	r2,8(r2)
81129270:	10bfffcc 	andi	r2,r2,65535
81129274:	1004d23a 	srli	r2,r2,8
81129278:	e0bffa05 	stb	r2,-24(fp)
    if ((pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8) == OS_MUTEX_AVAILABLE) {
8112927c:	e0bffe17 	ldw	r2,-8(fp)
81129280:	1080020b 	ldhu	r2,8(r2)
81129284:	10bfffcc 	andi	r2,r2,65535
81129288:	10803fcc 	andi	r2,r2,255
8112928c:	10803fd8 	cmpnei	r2,r2,255
81129290:	1000281e 	bne	r2,zero,81129334 <OSMutexAccept+0x180>
        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;   /*      Mask off LSByte (Acquire Mutex)         */
81129294:	e0bffe17 	ldw	r2,-8(fp)
81129298:	10c0020b 	ldhu	r3,8(r2)
8112929c:	00bfc004 	movi	r2,-256
811292a0:	1884703a 	and	r2,r3,r2
811292a4:	1007883a 	mov	r3,r2
811292a8:	e0bffe17 	ldw	r2,-8(fp)
811292ac:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventCnt |= OSTCBCur->OSTCBPrio;     /*      Save current task priority in LSByte    */
811292b0:	e0bffe17 	ldw	r2,-8(fp)
811292b4:	10c0020b 	ldhu	r3,8(r2)
811292b8:	d0a09017 	ldw	r2,-32192(gp)
811292bc:	10800c83 	ldbu	r2,50(r2)
811292c0:	10803fcc 	andi	r2,r2,255
811292c4:	1884b03a 	or	r2,r3,r2
811292c8:	1007883a 	mov	r3,r2
811292cc:	e0bffe17 	ldw	r2,-8(fp)
811292d0:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr  = (void *)OSTCBCur;        /*      Link TCB of task owning Mutex           */
811292d4:	d0e09017 	ldw	r3,-32192(gp)
811292d8:	e0bffe17 	ldw	r2,-8(fp)
811292dc:	10c00115 	stw	r3,4(r2)
        if (OSTCBCur->OSTCBPrio <= pip) {              /*      PIP 'must' have a SMALLER prio ...      */
811292e0:	d0a09017 	ldw	r2,-32192(gp)
811292e4:	10800c83 	ldbu	r2,50(r2)
811292e8:	10803fcc 	andi	r2,r2,255
811292ec:	e0fffa03 	ldbu	r3,-24(fp)
811292f0:	18800836 	bltu	r3,r2,81129314 <OSMutexAccept+0x160>
811292f4:	e0bff817 	ldw	r2,-32(fp)
811292f8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811292fc:	e0bff917 	ldw	r2,-28(fp)
81129300:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();                        /*      ... than current task!                  */
            *perr = OS_ERR_PIP_LOWER;
81129304:	e0bfff17 	ldw	r2,-4(fp)
81129308:	00c01e04 	movi	r3,120
8112930c:	10c00005 	stb	r3,0(r2)
81129310:	00000606 	br	8112932c <OSMutexAccept+0x178>
81129314:	e0bff817 	ldw	r2,-32(fp)
81129318:	e0bffb15 	stw	r2,-20(fp)
8112931c:	e0bffb17 	ldw	r2,-20(fp)
81129320:	1001703a 	wrctl	status,r2
        } else {
            OS_EXIT_CRITICAL();
            *perr = OS_ERR_NONE;
81129324:	e0bfff17 	ldw	r2,-4(fp)
81129328:	10000005 	stb	zero,0(r2)
        }
        return (OS_TRUE);
8112932c:	00800044 	movi	r2,1
81129330:	00000706 	br	81129350 <OSMutexAccept+0x19c>
81129334:	e0bff817 	ldw	r2,-32(fp)
81129338:	e0bffc15 	stw	r2,-16(fp)
8112933c:	e0bffc17 	ldw	r2,-16(fp)
81129340:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
81129344:	e0bfff17 	ldw	r2,-4(fp)
81129348:	10000005 	stb	zero,0(r2)
    return (OS_FALSE);
8112934c:	0005883a 	mov	r2,zero
}
81129350:	e037883a 	mov	sp,fp
81129354:	df000017 	ldw	fp,0(sp)
81129358:	dec00104 	addi	sp,sp,4
8112935c:	f800283a 	ret

81129360 <OSMutexCreate>:
*                 to use to reduce priority inversion.
*********************************************************************************************************
*/

OS_EVENT  *OSMutexCreate (INT8U prio, INT8U *perr)
{
81129360:	defff604 	addi	sp,sp,-40
81129364:	de00012e 	bgeu	sp,et,8112936c <OSMutexCreate+0xc>
81129368:	003b68fa 	trap	3
8112936c:	dfc00915 	stw	ra,36(sp)
81129370:	df000815 	stw	fp,32(sp)
81129374:	df000804 	addi	fp,sp,32
81129378:	2005883a 	mov	r2,r4
8112937c:	e17fff15 	stw	r5,-4(fp)
81129380:	e0bffe05 	stb	r2,-8(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
81129384:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
81129388:	e0bfff17 	ldw	r2,-4(fp)
8112938c:	1000021e 	bne	r2,zero,81129398 <OSMutexCreate+0x38>
        return ((OS_EVENT *)0);
81129390:	0005883a 	mov	r2,zero
81129394:	00006106 	br	8112951c <OSMutexCreate+0x1bc>
    }
    if (prio >= OS_LOWEST_PRIO) {                          /* Validate PIP                             */
81129398:	e0bffe03 	ldbu	r2,-8(fp)
8112939c:	10800a30 	cmpltui	r2,r2,40
811293a0:	1000051e 	bne	r2,zero,811293b8 <OSMutexCreate+0x58>
        *perr = OS_ERR_PRIO_INVALID;
811293a4:	e0bfff17 	ldw	r2,-4(fp)
811293a8:	00c00a84 	movi	r3,42
811293ac:	10c00005 	stb	r3,0(r2)
        return ((OS_EVENT *)0);
811293b0:	0005883a 	mov	r2,zero
811293b4:	00005906 	br	8112951c <OSMutexCreate+0x1bc>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
811293b8:	d0a08f03 	ldbu	r2,-32196(gp)
811293bc:	10803fcc 	andi	r2,r2,255
811293c0:	10000526 	beq	r2,zero,811293d8 <OSMutexCreate+0x78>
        *perr = OS_ERR_CREATE_ISR;                         /* ... can't CREATE mutex from an ISR       */
811293c4:	e0bfff17 	ldw	r2,-4(fp)
811293c8:	00c00404 	movi	r3,16
811293cc:	10c00005 	stb	r3,0(r2)
        return ((OS_EVENT *)0);
811293d0:	0005883a 	mov	r2,zero
811293d4:	00005106 	br	8112951c <OSMutexCreate+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811293d8:	0005303a 	rdctl	r2,status
811293dc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811293e0:	e0fffd17 	ldw	r3,-12(fp)
811293e4:	00bfff84 	movi	r2,-2
811293e8:	1884703a 	and	r2,r3,r2
811293ec:	1001703a 	wrctl	status,r2
  
  return context;
811293f0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
811293f4:	e0bff815 	stw	r2,-32(fp)
    if (OSTCBPrioTbl[prio] != (OS_TCB *)0) {               /* Mutex priority must not already exist    */
811293f8:	e0fffe03 	ldbu	r3,-8(fp)
811293fc:	00a045b4 	movhi	r2,33046
81129400:	1094b404 	addi	r2,r2,21200
81129404:	18c7883a 	add	r3,r3,r3
81129408:	18c7883a 	add	r3,r3,r3
8112940c:	10c5883a 	add	r2,r2,r3
81129410:	10800017 	ldw	r2,0(r2)
81129414:	10000926 	beq	r2,zero,8112943c <OSMutexCreate+0xdc>
81129418:	e0bff817 	ldw	r2,-32(fp)
8112941c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81129420:	e0bff917 	ldw	r2,-28(fp)
81129424:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                /* Task already exist at priority ...       */
        *perr = OS_ERR_PRIO_EXIST;                         /* ... inheritance priority                 */
81129428:	e0bfff17 	ldw	r2,-4(fp)
8112942c:	00c00a04 	movi	r3,40
81129430:	10c00005 	stb	r3,0(r2)
        return ((OS_EVENT *)0);
81129434:	0005883a 	mov	r2,zero
81129438:	00003806 	br	8112951c <OSMutexCreate+0x1bc>
    }
    OSTCBPrioTbl[prio] = OS_TCB_RESERVED;                  /* Reserve the table entry                  */
8112943c:	e0fffe03 	ldbu	r3,-8(fp)
81129440:	00a045b4 	movhi	r2,33046
81129444:	1094b404 	addi	r2,r2,21200
81129448:	18c7883a 	add	r3,r3,r3
8112944c:	18c7883a 	add	r3,r3,r3
81129450:	10c5883a 	add	r2,r2,r3
81129454:	00c00044 	movi	r3,1
81129458:	10c00015 	stw	r3,0(r2)
    pevent             = OSEventFreeList;                  /* Get next free event control block        */
8112945c:	d0a08e17 	ldw	r2,-32200(gp)
81129460:	e0bffb15 	stw	r2,-20(fp)
    if (pevent == (OS_EVENT *)0) {                         /* See if an ECB was available              */
81129464:	e0bffb17 	ldw	r2,-20(fp)
81129468:	1000101e 	bne	r2,zero,811294ac <OSMutexCreate+0x14c>
        OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* No, Release the table entry              */
8112946c:	e0fffe03 	ldbu	r3,-8(fp)
81129470:	00a045b4 	movhi	r2,33046
81129474:	1094b404 	addi	r2,r2,21200
81129478:	18c7883a 	add	r3,r3,r3
8112947c:	18c7883a 	add	r3,r3,r3
81129480:	10c5883a 	add	r2,r2,r3
81129484:	10000015 	stw	zero,0(r2)
81129488:	e0bff817 	ldw	r2,-32(fp)
8112948c:	e0bffa15 	stw	r2,-24(fp)
81129490:	e0bffa17 	ldw	r2,-24(fp)
81129494:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr              = OS_ERR_PEVENT_NULL;           /* No more event control blocks             */
81129498:	e0bfff17 	ldw	r2,-4(fp)
8112949c:	00c00104 	movi	r3,4
811294a0:	10c00005 	stb	r3,0(r2)
        return (pevent);
811294a4:	e0bffb17 	ldw	r2,-20(fp)
811294a8:	00001c06 	br	8112951c <OSMutexCreate+0x1bc>
    }
    OSEventFreeList        = (OS_EVENT *)OSEventFreeList->OSEventPtr;   /* Adjust the free list        */
811294ac:	d0a08e17 	ldw	r2,-32200(gp)
811294b0:	10800117 	ldw	r2,4(r2)
811294b4:	d0a08e15 	stw	r2,-32200(gp)
811294b8:	e0bff817 	ldw	r2,-32(fp)
811294bc:	e0bffc15 	stw	r2,-16(fp)
811294c0:	e0bffc17 	ldw	r2,-16(fp)
811294c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    pevent->OSEventType    = OS_EVENT_TYPE_MUTEX;
811294c8:	e0bffb17 	ldw	r2,-20(fp)
811294cc:	00c00104 	movi	r3,4
811294d0:	10c00005 	stb	r3,0(r2)
    pevent->OSEventCnt     = (INT16U)((INT16U)prio << 8) | OS_MUTEX_AVAILABLE; /* Resource is avail.   */
811294d4:	e0bffe03 	ldbu	r2,-8(fp)
811294d8:	1004923a 	slli	r2,r2,8
811294dc:	10803fd4 	ori	r2,r2,255
811294e0:	1007883a 	mov	r3,r2
811294e4:	e0bffb17 	ldw	r2,-20(fp)
811294e8:	10c0020d 	sth	r3,8(r2)
    pevent->OSEventPtr     = (void *)0;                                 /* No task owning the mutex    */
811294ec:	e0bffb17 	ldw	r2,-20(fp)
811294f0:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent->OSEventName[0] = '?';
811294f4:	e0bffb17 	ldw	r2,-20(fp)
811294f8:	00c00fc4 	movi	r3,63
811294fc:	10c00445 	stb	r3,17(r2)
    pevent->OSEventName[1] = OS_ASCII_NUL;
81129500:	e0bffb17 	ldw	r2,-20(fp)
81129504:	10000485 	stb	zero,18(r2)
#endif
    OS_EventWaitListInit(pevent);
81129508:	e13ffb17 	ldw	r4,-20(fp)
8112950c:	11264ac0 	call	811264ac <OS_EventWaitListInit>
    *perr                  = OS_ERR_NONE;
81129510:	e0bfff17 	ldw	r2,-4(fp)
81129514:	10000005 	stb	zero,0(r2)
    return (pevent);
81129518:	e0bffb17 	ldw	r2,-20(fp)
}
8112951c:	e037883a 	mov	sp,fp
81129520:	dfc00117 	ldw	ra,4(sp)
81129524:	df000017 	ldw	fp,0(sp)
81129528:	dec00204 	addi	sp,sp,8
8112952c:	f800283a 	ret

81129530 <OSMutexDel>:
*********************************************************************************************************
*/

#if OS_MUTEX_DEL_EN
OS_EVENT  *OSMutexDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
81129530:	defff004 	addi	sp,sp,-64
81129534:	de00012e 	bgeu	sp,et,8112953c <OSMutexDel+0xc>
81129538:	003b68fa 	trap	3
8112953c:	dfc00f15 	stw	ra,60(sp)
81129540:	df000e15 	stw	fp,56(sp)
81129544:	df000e04 	addi	fp,sp,56
81129548:	e13ffd15 	stw	r4,-12(fp)
8112954c:	2805883a 	mov	r2,r5
81129550:	e1bfff15 	stw	r6,-4(fp)
81129554:	e0bffe05 	stb	r2,-8(fp)
    OS_EVENT  *pevent_return;
    INT8U      pip;                                        /* Priority inheritance priority            */
    INT8U      prio;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
81129558:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112955c:	e0bfff17 	ldw	r2,-4(fp)
81129560:	1000021e 	bne	r2,zero,8112956c <OSMutexDel+0x3c>
        return (pevent);
81129564:	e0bffd17 	ldw	r2,-12(fp)
81129568:	0000ad06 	br	81129820 <OSMutexDel+0x2f0>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
8112956c:	e0bffd17 	ldw	r2,-12(fp)
81129570:	1000051e 	bne	r2,zero,81129588 <OSMutexDel+0x58>
        *perr = OS_ERR_PEVENT_NULL;
81129574:	e0bfff17 	ldw	r2,-4(fp)
81129578:	00c00104 	movi	r3,4
8112957c:	10c00005 	stb	r3,0(r2)
        return (pevent);
81129580:	e0bffd17 	ldw	r2,-12(fp)
81129584:	0000a606 	br	81129820 <OSMutexDel+0x2f0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
81129588:	e0bffd17 	ldw	r2,-12(fp)
8112958c:	10800003 	ldbu	r2,0(r2)
81129590:	10803fcc 	andi	r2,r2,255
81129594:	10800120 	cmpeqi	r2,r2,4
81129598:	1000051e 	bne	r2,zero,811295b0 <OSMutexDel+0x80>
        *perr = OS_ERR_EVENT_TYPE;
8112959c:	e0bfff17 	ldw	r2,-4(fp)
811295a0:	00c00044 	movi	r3,1
811295a4:	10c00005 	stb	r3,0(r2)
        return (pevent);
811295a8:	e0bffd17 	ldw	r2,-12(fp)
811295ac:	00009c06 	br	81129820 <OSMutexDel+0x2f0>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
811295b0:	d0a08f03 	ldbu	r2,-32196(gp)
811295b4:	10803fcc 	andi	r2,r2,255
811295b8:	10000526 	beq	r2,zero,811295d0 <OSMutexDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
811295bc:	e0bfff17 	ldw	r2,-4(fp)
811295c0:	00c003c4 	movi	r3,15
811295c4:	10c00005 	stb	r3,0(r2)
        return (pevent);
811295c8:	e0bffd17 	ldw	r2,-12(fp)
811295cc:	00009406 	br	81129820 <OSMutexDel+0x2f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811295d0:	0005303a 	rdctl	r2,status
811295d4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811295d8:	e0fffc17 	ldw	r3,-16(fp)
811295dc:	00bfff84 	movi	r2,-2
811295e0:	1884703a 	and	r2,r3,r2
811295e4:	1001703a 	wrctl	status,r2
  
  return context;
811295e8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
811295ec:	e0bff415 	stw	r2,-48(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mutex        */
811295f0:	e0bffd17 	ldw	r2,-12(fp)
811295f4:	10800283 	ldbu	r2,10(r2)
811295f8:	10803fcc 	andi	r2,r2,255
811295fc:	10000326 	beq	r2,zero,8112960c <OSMutexDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
81129600:	00800044 	movi	r2,1
81129604:	e0bff205 	stb	r2,-56(fp)
81129608:	00000106 	br	81129610 <OSMutexDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
8112960c:	e03ff205 	stb	zero,-56(fp)
    }
    switch (opt) {
81129610:	e0bffe03 	ldbu	r2,-8(fp)
81129614:	10000326 	beq	r2,zero,81129624 <OSMutexDel+0xf4>
81129618:	10800060 	cmpeqi	r2,r2,1
8112961c:	10002f1e 	bne	r2,zero,811296dc <OSMutexDel+0x1ac>
81129620:	00007406 	br	811297f4 <OSMutexDel+0x2c4>
        case OS_DEL_NO_PEND:                               /* DELETE MUTEX ONLY IF NO TASK WAITING --- */
             if (tasks_waiting == OS_FALSE) {
81129624:	e0bff203 	ldbu	r2,-56(fp)
81129628:	1000221e 	bne	r2,zero,811296b4 <OSMutexDel+0x184>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
8112962c:	e0bffd17 	ldw	r2,-12(fp)
81129630:	00c00fc4 	movi	r3,63
81129634:	10c00445 	stb	r3,17(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
81129638:	e0bffd17 	ldw	r2,-12(fp)
8112963c:	10000485 	stb	zero,18(r2)
#endif
                 pip                 = (INT8U)(pevent->OSEventCnt >> 8);
81129640:	e0bffd17 	ldw	r2,-12(fp)
81129644:	1080020b 	ldhu	r2,8(r2)
81129648:	10bfffcc 	andi	r2,r2,65535
8112964c:	1004d23a 	srli	r2,r2,8
81129650:	e0bff605 	stb	r2,-40(fp)
                 OSTCBPrioTbl[pip]   = (OS_TCB *)0;        /* Free up the PIP                          */
81129654:	e0fff603 	ldbu	r3,-40(fp)
81129658:	00a045b4 	movhi	r2,33046
8112965c:	1094b404 	addi	r2,r2,21200
81129660:	18c7883a 	add	r3,r3,r3
81129664:	18c7883a 	add	r3,r3,r3
81129668:	10c5883a 	add	r2,r2,r3
8112966c:	10000015 	stw	zero,0(r2)
                 pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
81129670:	e0bffd17 	ldw	r2,-12(fp)
81129674:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
81129678:	d0e08e17 	ldw	r3,-32200(gp)
8112967c:	e0bffd17 	ldw	r2,-12(fp)
81129680:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt  = 0;
81129684:	e0bffd17 	ldw	r2,-12(fp)
81129688:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList     = pevent;
8112968c:	e0bffd17 	ldw	r2,-12(fp)
81129690:	d0a08e15 	stw	r2,-32200(gp)
81129694:	e0bff417 	ldw	r2,-48(fp)
81129698:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112969c:	e0bff517 	ldw	r2,-44(fp)
811296a0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
811296a4:	e0bfff17 	ldw	r2,-4(fp)
811296a8:	10000005 	stb	zero,0(r2)
                 pevent_return       = (OS_EVENT *)0;      /* Mutex has been deleted                   */
811296ac:	e03ff315 	stw	zero,-52(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
                 pevent_return       = pevent;
             }
             break;
811296b0:	00005a06 	br	8112981c <OSMutexDel+0x2ec>
811296b4:	e0bff417 	ldw	r2,-48(fp)
811296b8:	e0bff715 	stw	r2,-36(fp)
811296bc:	e0bff717 	ldw	r2,-36(fp)
811296c0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
                 pevent_return       = (OS_EVENT *)0;      /* Mutex has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
811296c4:	e0bfff17 	ldw	r2,-4(fp)
811296c8:	00c01244 	movi	r3,73
811296cc:	10c00005 	stb	r3,0(r2)
                 pevent_return       = pevent;
811296d0:	e0bffd17 	ldw	r2,-12(fp)
811296d4:	e0bff315 	stw	r2,-52(fp)
             }
             break;
811296d8:	00005006 	br	8112981c <OSMutexDel+0x2ec>

        case OS_DEL_ALWAYS:                                /* ALWAYS DELETE THE MUTEX ---------------- */
             pip  = (INT8U)(pevent->OSEventCnt >> 8);                     /* Get PIP of mutex          */
811296dc:	e0bffd17 	ldw	r2,-12(fp)
811296e0:	1080020b 	ldhu	r2,8(r2)
811296e4:	10bfffcc 	andi	r2,r2,65535
811296e8:	1004d23a 	srli	r2,r2,8
811296ec:	e0bff605 	stb	r2,-40(fp)
             prio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* Get owner's original prio */
811296f0:	e0bffd17 	ldw	r2,-12(fp)
811296f4:	1080020b 	ldhu	r2,8(r2)
811296f8:	e0bff905 	stb	r2,-28(fp)
             ptcb = (OS_TCB *)pevent->OSEventPtr;
811296fc:	e0bffd17 	ldw	r2,-12(fp)
81129700:	10800117 	ldw	r2,4(r2)
81129704:	e0bffa15 	stw	r2,-24(fp)
             if (ptcb != (OS_TCB *)0) {                    /* See if any task owns the mutex           */
81129708:	e0bffa17 	ldw	r2,-24(fp)
8112970c:	10000f26 	beq	r2,zero,8112974c <OSMutexDel+0x21c>
                 if (ptcb->OSTCBPrio == pip) {             /* See if original prio was changed         */
81129710:	e0bffa17 	ldw	r2,-24(fp)
81129714:	10800c83 	ldbu	r2,50(r2)
81129718:	10c03fcc 	andi	r3,r2,255
8112971c:	e0bff603 	ldbu	r2,-40(fp)
81129720:	18800a1e 	bne	r3,r2,8112974c <OSMutexDel+0x21c>
                     OSMutex_RdyAtPrio(ptcb, prio);        /* Yes, Restore the task's original prio    */
81129724:	e0bff903 	ldbu	r2,-28(fp)
81129728:	100b883a 	mov	r5,r2
8112972c:	e13ffa17 	ldw	r4,-24(fp)
81129730:	112a16c0 	call	8112a16c <OSMutex_RdyAtPrio>
                 }
             }
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mutex        */
81129734:	00000506 	br	8112974c <OSMutexDel+0x21c>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_OK);
81129738:	000f883a 	mov	r7,zero
8112973c:	01800404 	movi	r6,16
81129740:	000b883a 	mov	r5,zero
81129744:	e13ffd17 	ldw	r4,-12(fp)
81129748:	1125ed40 	call	81125ed4 <OS_EventTaskRdy>
             if (ptcb != (OS_TCB *)0) {                    /* See if any task owns the mutex           */
                 if (ptcb->OSTCBPrio == pip) {             /* See if original prio was changed         */
                     OSMutex_RdyAtPrio(ptcb, prio);        /* Yes, Restore the task's original prio    */
                 }
             }
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mutex        */
8112974c:	e0bffd17 	ldw	r2,-12(fp)
81129750:	10800283 	ldbu	r2,10(r2)
81129754:	10803fcc 	andi	r2,r2,255
81129758:	103ff71e 	bne	r2,zero,81129738 <__reset+0xfb109738>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
8112975c:	e0bffd17 	ldw	r2,-12(fp)
81129760:	00c00fc4 	movi	r3,63
81129764:	10c00445 	stb	r3,17(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
81129768:	e0bffd17 	ldw	r2,-12(fp)
8112976c:	10000485 	stb	zero,18(r2)
#endif
             pip                 = (INT8U)(pevent->OSEventCnt >> 8);
81129770:	e0bffd17 	ldw	r2,-12(fp)
81129774:	1080020b 	ldhu	r2,8(r2)
81129778:	10bfffcc 	andi	r2,r2,65535
8112977c:	1004d23a 	srli	r2,r2,8
81129780:	e0bff605 	stb	r2,-40(fp)
             OSTCBPrioTbl[pip]   = (OS_TCB *)0;            /* Free up the PIP                          */
81129784:	e0fff603 	ldbu	r3,-40(fp)
81129788:	00a045b4 	movhi	r2,33046
8112978c:	1094b404 	addi	r2,r2,21200
81129790:	18c7883a 	add	r3,r3,r3
81129794:	18c7883a 	add	r3,r3,r3
81129798:	10c5883a 	add	r2,r2,r3
8112979c:	10000015 	stw	zero,0(r2)
             pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
811297a0:	e0bffd17 	ldw	r2,-12(fp)
811297a4:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr  = OSEventFreeList;        /* Return Event Control Block to free list  */
811297a8:	d0e08e17 	ldw	r3,-32200(gp)
811297ac:	e0bffd17 	ldw	r2,-12(fp)
811297b0:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt  = 0;
811297b4:	e0bffd17 	ldw	r2,-12(fp)
811297b8:	1000020d 	sth	zero,8(r2)
             OSEventFreeList     = pevent;                 /* Get next free event control block        */
811297bc:	e0bffd17 	ldw	r2,-12(fp)
811297c0:	d0a08e15 	stw	r2,-32200(gp)
811297c4:	e0bff417 	ldw	r2,-48(fp)
811297c8:	e0bff815 	stw	r2,-32(fp)
811297cc:	e0bff817 	ldw	r2,-32(fp)
811297d0:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
811297d4:	e0bff203 	ldbu	r2,-56(fp)
811297d8:	10800058 	cmpnei	r2,r2,1
811297dc:	1000011e 	bne	r2,zero,811297e4 <OSMutexDel+0x2b4>
                 OS_Sched();                               /* Find highest priority task ready to run  */
811297e0:	11269900 	call	81126990 <OS_Sched>
             }
             *perr         = OS_ERR_NONE;
811297e4:	e0bfff17 	ldw	r2,-4(fp)
811297e8:	10000005 	stb	zero,0(r2)
             pevent_return = (OS_EVENT *)0;                /* Mutex has been deleted                   */
811297ec:	e03ff315 	stw	zero,-52(fp)
             break;
811297f0:	00000a06 	br	8112981c <OSMutexDel+0x2ec>
811297f4:	e0bff417 	ldw	r2,-48(fp)
811297f8:	e0bffb15 	stw	r2,-20(fp)
811297fc:	e0bffb17 	ldw	r2,-20(fp)
81129800:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr         = OS_ERR_INVALID_OPT;
81129804:	e0bfff17 	ldw	r2,-4(fp)
81129808:	00c001c4 	movi	r3,7
8112980c:	10c00005 	stb	r3,0(r2)
             pevent_return = pevent;
81129810:	e0bffd17 	ldw	r2,-12(fp)
81129814:	e0bff315 	stw	r2,-52(fp)
             break;
81129818:	0001883a 	nop
    }
    return (pevent_return);
8112981c:	e0bff317 	ldw	r2,-52(fp)
}
81129820:	e037883a 	mov	sp,fp
81129824:	dfc00117 	ldw	ra,4(sp)
81129828:	df000017 	ldw	fp,0(sp)
8112982c:	dec00204 	addi	sp,sp,8
81129830:	f800283a 	ret

81129834 <OSMutexPend>:
*              2) You MUST NOT change the priority of the task that owns the mutex
*********************************************************************************************************
*/

void  OSMutexPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
81129834:	deffee04 	addi	sp,sp,-72
81129838:	de00012e 	bgeu	sp,et,81129840 <OSMutexPend+0xc>
8112983c:	003b68fa 	trap	3
81129840:	dfc01115 	stw	ra,68(sp)
81129844:	df001015 	stw	fp,64(sp)
81129848:	df001004 	addi	fp,sp,64
8112984c:	e13ffd15 	stw	r4,-12(fp)
81129850:	2805883a 	mov	r2,r5
81129854:	e1bfff15 	stw	r6,-4(fp)
81129858:	e0bffe0d 	sth	r2,-8(fp)
    BOOLEAN    rdy;                                        /* Flag indicating task was ready           */
    OS_TCB    *ptcb;
    OS_EVENT  *pevent2;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112985c:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
81129860:	e0bfff17 	ldw	r2,-4(fp)
81129864:	10015626 	beq	r2,zero,81129dc0 <OSMutexPend+0x58c>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
81129868:	e0bffd17 	ldw	r2,-12(fp)
8112986c:	1000041e 	bne	r2,zero,81129880 <OSMutexPend+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
81129870:	e0bfff17 	ldw	r2,-4(fp)
81129874:	00c00104 	movi	r3,4
81129878:	10c00005 	stb	r3,0(r2)
        return;
8112987c:	00015106 	br	81129dc4 <OSMutexPend+0x590>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
81129880:	e0bffd17 	ldw	r2,-12(fp)
81129884:	10800003 	ldbu	r2,0(r2)
81129888:	10803fcc 	andi	r2,r2,255
8112988c:	10800120 	cmpeqi	r2,r2,4
81129890:	1000041e 	bne	r2,zero,811298a4 <OSMutexPend+0x70>
        *perr = OS_ERR_EVENT_TYPE;
81129894:	e0bfff17 	ldw	r2,-4(fp)
81129898:	00c00044 	movi	r3,1
8112989c:	10c00005 	stb	r3,0(r2)
        return;
811298a0:	00014806 	br	81129dc4 <OSMutexPend+0x590>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
811298a4:	d0a08f03 	ldbu	r2,-32196(gp)
811298a8:	10803fcc 	andi	r2,r2,255
811298ac:	10000426 	beq	r2,zero,811298c0 <OSMutexPend+0x8c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
811298b0:	e0bfff17 	ldw	r2,-4(fp)
811298b4:	00c00084 	movi	r3,2
811298b8:	10c00005 	stb	r3,0(r2)
        return;
811298bc:	00014106 	br	81129dc4 <OSMutexPend+0x590>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
811298c0:	d0a07d03 	ldbu	r2,-32268(gp)
811298c4:	10803fcc 	andi	r2,r2,255
811298c8:	10000426 	beq	r2,zero,811298dc <OSMutexPend+0xa8>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
811298cc:	e0bfff17 	ldw	r2,-4(fp)
811298d0:	00c00344 	movi	r3,13
811298d4:	10c00005 	stb	r3,0(r2)
        return;
811298d8:	00013a06 	br	81129dc4 <OSMutexPend+0x590>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811298dc:	0005303a 	rdctl	r2,status
811298e0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811298e4:	e0fffc17 	ldw	r3,-16(fp)
811298e8:	00bfff84 	movi	r2,-2
811298ec:	1884703a 	and	r2,r3,r2
811298f0:	1001703a 	wrctl	status,r2
  
  return context;
811298f4:	e0bffc17 	ldw	r2,-16(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
811298f8:	e0bff115 	stw	r2,-60(fp)
    pip = (INT8U)(pevent->OSEventCnt >> 8);                /* Get PIP from mutex                       */
811298fc:	e0bffd17 	ldw	r2,-12(fp)
81129900:	1080020b 	ldhu	r2,8(r2)
81129904:	10bfffcc 	andi	r2,r2,65535
81129908:	1004d23a 	srli	r2,r2,8
8112990c:	e0bff305 	stb	r2,-52(fp)
                                                           /* Is Mutex available?                      */
    if ((INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8) == OS_MUTEX_AVAILABLE) {
81129910:	e0bffd17 	ldw	r2,-12(fp)
81129914:	1080020b 	ldhu	r2,8(r2)
81129918:	10803fcc 	andi	r2,r2,255
8112991c:	10803fd8 	cmpnei	r2,r2,255
81129920:	1000271e 	bne	r2,zero,811299c0 <OSMutexPend+0x18c>
        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;       /* Yes, Acquire the resource                */
81129924:	e0bffd17 	ldw	r2,-12(fp)
81129928:	10c0020b 	ldhu	r3,8(r2)
8112992c:	00bfc004 	movi	r2,-256
81129930:	1884703a 	and	r2,r3,r2
81129934:	1007883a 	mov	r3,r2
81129938:	e0bffd17 	ldw	r2,-12(fp)
8112993c:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventCnt |= OSTCBCur->OSTCBPrio;         /*      Save priority of owning task        */
81129940:	e0bffd17 	ldw	r2,-12(fp)
81129944:	10c0020b 	ldhu	r3,8(r2)
81129948:	d0a09017 	ldw	r2,-32192(gp)
8112994c:	10800c83 	ldbu	r2,50(r2)
81129950:	10803fcc 	andi	r2,r2,255
81129954:	1884b03a 	or	r2,r3,r2
81129958:	1007883a 	mov	r3,r2
8112995c:	e0bffd17 	ldw	r2,-12(fp)
81129960:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr  = (void *)OSTCBCur;            /*      Point to owning task's OS_TCB       */
81129964:	d0e09017 	ldw	r3,-32192(gp)
81129968:	e0bffd17 	ldw	r2,-12(fp)
8112996c:	10c00115 	stw	r3,4(r2)
        if (OSTCBCur->OSTCBPrio <= pip) {                  /*      PIP 'must' have a SMALLER prio ...  */
81129970:	d0a09017 	ldw	r2,-32192(gp)
81129974:	10800c83 	ldbu	r2,50(r2)
81129978:	10803fcc 	andi	r2,r2,255
8112997c:	e0fff303 	ldbu	r3,-52(fp)
81129980:	18800836 	bltu	r3,r2,811299a4 <OSMutexPend+0x170>
81129984:	e0bff117 	ldw	r2,-60(fp)
81129988:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112998c:	e0bff217 	ldw	r2,-56(fp)
81129990:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();                            /*      ... than current task!              */
            *perr = OS_ERR_PIP_LOWER;
81129994:	e0bfff17 	ldw	r2,-4(fp)
81129998:	00c01e04 	movi	r3,120
8112999c:	10c00005 	stb	r3,0(r2)
        } else {
            OS_EXIT_CRITICAL();
            *perr = OS_ERR_NONE;
        }
        return;
811299a0:	00010806 	br	81129dc4 <OSMutexPend+0x590>
811299a4:	e0bff117 	ldw	r2,-60(fp)
811299a8:	e0bff415 	stw	r2,-48(fp)
811299ac:	e0bff417 	ldw	r2,-48(fp)
811299b0:	1001703a 	wrctl	status,r2
        if (OSTCBCur->OSTCBPrio <= pip) {                  /*      PIP 'must' have a SMALLER prio ...  */
            OS_EXIT_CRITICAL();                            /*      ... than current task!              */
            *perr = OS_ERR_PIP_LOWER;
        } else {
            OS_EXIT_CRITICAL();
            *perr = OS_ERR_NONE;
811299b4:	e0bfff17 	ldw	r2,-4(fp)
811299b8:	10000005 	stb	zero,0(r2)
        }
        return;
811299bc:	00010106 	br	81129dc4 <OSMutexPend+0x590>
    }
    mprio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* No, Get priority of mutex owner   */
811299c0:	e0bffd17 	ldw	r2,-12(fp)
811299c4:	1080020b 	ldhu	r2,8(r2)
811299c8:	e0bff605 	stb	r2,-40(fp)
    ptcb  = (OS_TCB *)(pevent->OSEventPtr);                       /*     Point to TCB of mutex owner   */
811299cc:	e0bffd17 	ldw	r2,-12(fp)
811299d0:	10800117 	ldw	r2,4(r2)
811299d4:	e0bff715 	stw	r2,-36(fp)
    if (ptcb->OSTCBPrio > pip) {                                  /*     Need to promote prio of owner?*/
811299d8:	e0bff717 	ldw	r2,-36(fp)
811299dc:	10800c83 	ldbu	r2,50(r2)
811299e0:	10803fcc 	andi	r2,r2,255
811299e4:	e0fff303 	ldbu	r3,-52(fp)
811299e8:	1880b92e 	bgeu	r3,r2,81129cd0 <OSMutexPend+0x49c>
        if (mprio > OSTCBCur->OSTCBPrio) {
811299ec:	d0a09017 	ldw	r2,-32192(gp)
811299f0:	10800c83 	ldbu	r2,50(r2)
811299f4:	10c03fcc 	andi	r3,r2,255
811299f8:	e0bff603 	ldbu	r2,-40(fp)
811299fc:	1880b42e 	bgeu	r3,r2,81129cd0 <OSMutexPend+0x49c>
            y = ptcb->OSTCBY;
81129a00:	e0bff717 	ldw	r2,-36(fp)
81129a04:	10800d03 	ldbu	r2,52(r2)
81129a08:	e0bff805 	stb	r2,-32(fp)
            if ((OSRdyTbl[y] & ptcb->OSTCBBitX) != 0) {           /*     See if mutex owner is ready   */
81129a0c:	e0fff803 	ldbu	r3,-32(fp)
81129a10:	d0a08c44 	addi	r2,gp,-32207
81129a14:	1885883a 	add	r2,r3,r2
81129a18:	10c00003 	ldbu	r3,0(r2)
81129a1c:	e0bff717 	ldw	r2,-36(fp)
81129a20:	10800d43 	ldbu	r2,53(r2)
81129a24:	1884703a 	and	r2,r3,r2
81129a28:	10803fcc 	andi	r2,r2,255
81129a2c:	10001e26 	beq	r2,zero,81129aa8 <OSMutexPend+0x274>
                OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                  /*     Yes, Remove owner from Rdy ...*/
81129a30:	e0fff803 	ldbu	r3,-32(fp)
81129a34:	e13ff803 	ldbu	r4,-32(fp)
81129a38:	d0a08c44 	addi	r2,gp,-32207
81129a3c:	2085883a 	add	r2,r4,r2
81129a40:	10800003 	ldbu	r2,0(r2)
81129a44:	1009883a 	mov	r4,r2
81129a48:	e0bff717 	ldw	r2,-36(fp)
81129a4c:	10800d43 	ldbu	r2,53(r2)
81129a50:	0084303a 	nor	r2,zero,r2
81129a54:	2084703a 	and	r2,r4,r2
81129a58:	1009883a 	mov	r4,r2
81129a5c:	d0a08c44 	addi	r2,gp,-32207
81129a60:	1885883a 	add	r2,r3,r2
81129a64:	11000005 	stb	r4,0(r2)
                if (OSRdyTbl[y] == 0) {                           /*          ... list at current prio */
81129a68:	e0fff803 	ldbu	r3,-32(fp)
81129a6c:	d0a08c44 	addi	r2,gp,-32207
81129a70:	1885883a 	add	r2,r3,r2
81129a74:	10800003 	ldbu	r2,0(r2)
81129a78:	10803fcc 	andi	r2,r2,255
81129a7c:	1000071e 	bne	r2,zero,81129a9c <OSMutexPend+0x268>
                    OSRdyGrp &= ~ptcb->OSTCBBitY;
81129a80:	e0bff717 	ldw	r2,-36(fp)
81129a84:	10800d83 	ldbu	r2,54(r2)
81129a88:	0084303a 	nor	r2,zero,r2
81129a8c:	1007883a 	mov	r3,r2
81129a90:	d0a08c03 	ldbu	r2,-32208(gp)
81129a94:	1884703a 	and	r2,r3,r2
81129a98:	d0a08c05 	stb	r2,-32208(gp)
                }
                rdy = OS_TRUE;
81129a9c:	00800044 	movi	r2,1
81129aa0:	e0bff005 	stb	r2,-64(fp)
81129aa4:	00002a06 	br	81129b50 <OSMutexPend+0x31c>
            } else {
                pevent2 = ptcb->OSTCBEventPtr;
81129aa8:	e0bff717 	ldw	r2,-36(fp)
81129aac:	10800717 	ldw	r2,28(r2)
81129ab0:	e0bff915 	stw	r2,-28(fp)
                if (pevent2 != (OS_EVENT *)0) {                   /* Remove from event wait list       */
81129ab4:	e0bff917 	ldw	r2,-28(fp)
81129ab8:	10002426 	beq	r2,zero,81129b4c <OSMutexPend+0x318>
                    if ((pevent2->OSEventTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX) == 0) {
81129abc:	e0bff717 	ldw	r2,-36(fp)
81129ac0:	10800d03 	ldbu	r2,52(r2)
81129ac4:	10803fcc 	andi	r2,r2,255
81129ac8:	e0fff717 	ldw	r3,-36(fp)
81129acc:	18c00d03 	ldbu	r3,52(r3)
81129ad0:	18c03fcc 	andi	r3,r3,255
81129ad4:	e13ff917 	ldw	r4,-28(fp)
81129ad8:	20c7883a 	add	r3,r4,r3
81129adc:	18c002c4 	addi	r3,r3,11
81129ae0:	18c00003 	ldbu	r3,0(r3)
81129ae4:	1809883a 	mov	r4,r3
81129ae8:	e0fff717 	ldw	r3,-36(fp)
81129aec:	18c00d43 	ldbu	r3,53(r3)
81129af0:	00c6303a 	nor	r3,zero,r3
81129af4:	20c6703a 	and	r3,r4,r3
81129af8:	1809883a 	mov	r4,r3
81129afc:	e0fff917 	ldw	r3,-28(fp)
81129b00:	1887883a 	add	r3,r3,r2
81129b04:	18c002c4 	addi	r3,r3,11
81129b08:	19000005 	stb	r4,0(r3)
81129b0c:	e0fff917 	ldw	r3,-28(fp)
81129b10:	1885883a 	add	r2,r3,r2
81129b14:	108002c4 	addi	r2,r2,11
81129b18:	10800003 	ldbu	r2,0(r2)
81129b1c:	10803fcc 	andi	r2,r2,255
81129b20:	10000a1e 	bne	r2,zero,81129b4c <OSMutexPend+0x318>
                        pevent2->OSEventGrp &= ~ptcb->OSTCBBitY;
81129b24:	e0bff917 	ldw	r2,-28(fp)
81129b28:	10800283 	ldbu	r2,10(r2)
81129b2c:	1007883a 	mov	r3,r2
81129b30:	e0bff717 	ldw	r2,-36(fp)
81129b34:	10800d83 	ldbu	r2,54(r2)
81129b38:	0084303a 	nor	r2,zero,r2
81129b3c:	1884703a 	and	r2,r3,r2
81129b40:	1007883a 	mov	r3,r2
81129b44:	e0bff917 	ldw	r2,-28(fp)
81129b48:	10c00285 	stb	r3,10(r2)
                    }
                }
                rdy = OS_FALSE;                            /* No                                       */
81129b4c:	e03ff005 	stb	zero,-64(fp)
            }
            ptcb->OSTCBPrio = pip;                         /* Change owner task prio to PIP            */
81129b50:	e0bff717 	ldw	r2,-36(fp)
81129b54:	e0fff303 	ldbu	r3,-52(fp)
81129b58:	10c00c85 	stb	r3,50(r2)
#if OS_LOWEST_PRIO <= 63
            ptcb->OSTCBY    = (INT8U)( ptcb->OSTCBPrio >> 3);
81129b5c:	e0bff717 	ldw	r2,-36(fp)
81129b60:	10800c83 	ldbu	r2,50(r2)
81129b64:	10803fcc 	andi	r2,r2,255
81129b68:	1004d0fa 	srli	r2,r2,3
81129b6c:	1007883a 	mov	r3,r2
81129b70:	e0bff717 	ldw	r2,-36(fp)
81129b74:	10c00d05 	stb	r3,52(r2)
            ptcb->OSTCBX    = (INT8U)( ptcb->OSTCBPrio & 0x07);
81129b78:	e0bff717 	ldw	r2,-36(fp)
81129b7c:	10800c83 	ldbu	r2,50(r2)
81129b80:	108001cc 	andi	r2,r2,7
81129b84:	1007883a 	mov	r3,r2
81129b88:	e0bff717 	ldw	r2,-36(fp)
81129b8c:	10c00cc5 	stb	r3,51(r2)
            ptcb->OSTCBBitY = (INT8U)(1 << ptcb->OSTCBY);
81129b90:	e0bff717 	ldw	r2,-36(fp)
81129b94:	10800d03 	ldbu	r2,52(r2)
81129b98:	10803fcc 	andi	r2,r2,255
81129b9c:	00c00044 	movi	r3,1
81129ba0:	1884983a 	sll	r2,r3,r2
81129ba4:	1007883a 	mov	r3,r2
81129ba8:	e0bff717 	ldw	r2,-36(fp)
81129bac:	10c00d85 	stb	r3,54(r2)
            ptcb->OSTCBBitX = (INT8U)(1 << ptcb->OSTCBX);
81129bb0:	e0bff717 	ldw	r2,-36(fp)
81129bb4:	10800cc3 	ldbu	r2,51(r2)
81129bb8:	10803fcc 	andi	r2,r2,255
81129bbc:	00c00044 	movi	r3,1
81129bc0:	1884983a 	sll	r2,r3,r2
81129bc4:	1007883a 	mov	r3,r2
81129bc8:	e0bff717 	ldw	r2,-36(fp)
81129bcc:	10c00d45 	stb	r3,53(r2)
            ptcb->OSTCBY    = (INT8U)((ptcb->OSTCBPrio >> 4) & 0xFF);
            ptcb->OSTCBX    = (INT8U)( ptcb->OSTCBPrio & 0x0F);
            ptcb->OSTCBBitY = (INT16U)(1 << ptcb->OSTCBY);
            ptcb->OSTCBBitX = (INT16U)(1 << ptcb->OSTCBX);
#endif
            if (rdy == OS_TRUE) {                          /* If task was ready at owner's priority ...*/
81129bd0:	e0bff003 	ldbu	r2,-64(fp)
81129bd4:	10800058 	cmpnei	r2,r2,1
81129bd8:	1000161e 	bne	r2,zero,81129c34 <OSMutexPend+0x400>
                OSRdyGrp               |= ptcb->OSTCBBitY; /* ... make it ready at new priority.       */
81129bdc:	e0bff717 	ldw	r2,-36(fp)
81129be0:	10c00d83 	ldbu	r3,54(r2)
81129be4:	d0a08c03 	ldbu	r2,-32208(gp)
81129be8:	1884b03a 	or	r2,r3,r2
81129bec:	d0a08c05 	stb	r2,-32208(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
81129bf0:	e0bff717 	ldw	r2,-36(fp)
81129bf4:	10800d03 	ldbu	r2,52(r2)
81129bf8:	10c03fcc 	andi	r3,r2,255
81129bfc:	e0bff717 	ldw	r2,-36(fp)
81129c00:	10800d03 	ldbu	r2,52(r2)
81129c04:	11003fcc 	andi	r4,r2,255
81129c08:	d0a08c44 	addi	r2,gp,-32207
81129c0c:	2085883a 	add	r2,r4,r2
81129c10:	11000003 	ldbu	r4,0(r2)
81129c14:	e0bff717 	ldw	r2,-36(fp)
81129c18:	10800d43 	ldbu	r2,53(r2)
81129c1c:	2084b03a 	or	r2,r4,r2
81129c20:	1009883a 	mov	r4,r2
81129c24:	d0a08c44 	addi	r2,gp,-32207
81129c28:	1885883a 	add	r2,r3,r2
81129c2c:	11000005 	stb	r4,0(r2)
81129c30:	00001f06 	br	81129cb0 <OSMutexPend+0x47c>
            } else {
                pevent2 = ptcb->OSTCBEventPtr;
81129c34:	e0bff717 	ldw	r2,-36(fp)
81129c38:	10800717 	ldw	r2,28(r2)
81129c3c:	e0bff915 	stw	r2,-28(fp)
                if (pevent2 != (OS_EVENT *)0) {            /* Add to event wait list                   */
81129c40:	e0bff917 	ldw	r2,-28(fp)
81129c44:	10001a26 	beq	r2,zero,81129cb0 <OSMutexPend+0x47c>
                    pevent2->OSEventGrp               |= ptcb->OSTCBBitY;
81129c48:	e0bff917 	ldw	r2,-28(fp)
81129c4c:	10c00283 	ldbu	r3,10(r2)
81129c50:	e0bff717 	ldw	r2,-36(fp)
81129c54:	10800d83 	ldbu	r2,54(r2)
81129c58:	1884b03a 	or	r2,r3,r2
81129c5c:	1007883a 	mov	r3,r2
81129c60:	e0bff917 	ldw	r2,-28(fp)
81129c64:	10c00285 	stb	r3,10(r2)
                    pevent2->OSEventTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
81129c68:	e0bff717 	ldw	r2,-36(fp)
81129c6c:	10800d03 	ldbu	r2,52(r2)
81129c70:	10803fcc 	andi	r2,r2,255
81129c74:	e0fff717 	ldw	r3,-36(fp)
81129c78:	18c00d03 	ldbu	r3,52(r3)
81129c7c:	18c03fcc 	andi	r3,r3,255
81129c80:	e13ff917 	ldw	r4,-28(fp)
81129c84:	20c7883a 	add	r3,r4,r3
81129c88:	18c002c4 	addi	r3,r3,11
81129c8c:	19000003 	ldbu	r4,0(r3)
81129c90:	e0fff717 	ldw	r3,-36(fp)
81129c94:	18c00d43 	ldbu	r3,53(r3)
81129c98:	20c6b03a 	or	r3,r4,r3
81129c9c:	1809883a 	mov	r4,r3
81129ca0:	e0fff917 	ldw	r3,-28(fp)
81129ca4:	1885883a 	add	r2,r3,r2
81129ca8:	108002c4 	addi	r2,r2,11
81129cac:	11000005 	stb	r4,0(r2)
                }
            }
            OSTCBPrioTbl[pip] = ptcb;
81129cb0:	e0fff303 	ldbu	r3,-52(fp)
81129cb4:	00a045b4 	movhi	r2,33046
81129cb8:	1094b404 	addi	r2,r2,21200
81129cbc:	18c7883a 	add	r3,r3,r3
81129cc0:	18c7883a 	add	r3,r3,r3
81129cc4:	10c5883a 	add	r2,r2,r3
81129cc8:	e0fff717 	ldw	r3,-36(fp)
81129ccc:	10c00015 	stw	r3,0(r2)
        }
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_MUTEX;         /* Mutex not available, pend current task        */
81129cd0:	d0a09017 	ldw	r2,-32192(gp)
81129cd4:	d0e09017 	ldw	r3,-32192(gp)
81129cd8:	18c00c03 	ldbu	r3,48(r3)
81129cdc:	18c00414 	ori	r3,r3,16
81129ce0:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
81129ce4:	d0a09017 	ldw	r2,-32192(gp)
81129ce8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store timeout in current task's TCB           */
81129cec:	d0a09017 	ldw	r2,-32192(gp)
81129cf0:	e0fffe0b 	ldhu	r3,-8(fp)
81129cf4:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
81129cf8:	e13ffd17 	ldw	r4,-12(fp)
81129cfc:	11260740 	call	81126074 <OS_EventTaskWait>
81129d00:	e0bff117 	ldw	r2,-60(fp)
81129d04:	e0bffb15 	stw	r2,-20(fp)
81129d08:	e0bffb17 	ldw	r2,-20(fp)
81129d0c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
81129d10:	11269900 	call	81126990 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81129d14:	0005303a 	rdctl	r2,status
81129d18:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81129d1c:	e0fff517 	ldw	r3,-44(fp)
81129d20:	00bfff84 	movi	r2,-2
81129d24:	1884703a 	and	r2,r3,r2
81129d28:	1001703a 	wrctl	status,r2
  
  return context;
81129d2c:	e0bff517 	ldw	r2,-44(fp)
    OS_ENTER_CRITICAL();
81129d30:	e0bff115 	stw	r2,-60(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
81129d34:	d0a09017 	ldw	r2,-32192(gp)
81129d38:	10800c43 	ldbu	r2,49(r2)
81129d3c:	10803fcc 	andi	r2,r2,255
81129d40:	10000326 	beq	r2,zero,81129d50 <OSMutexPend+0x51c>
81129d44:	108000a0 	cmpeqi	r2,r2,2
81129d48:	1000041e 	bne	r2,zero,81129d5c <OSMutexPend+0x528>
81129d4c:	00000706 	br	81129d6c <OSMutexPend+0x538>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
81129d50:	e0bfff17 	ldw	r2,-4(fp)
81129d54:	10000005 	stb	zero,0(r2)
             break;
81129d58:	00000c06 	br	81129d8c <OSMutexPend+0x558>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted getting mutex        */
81129d5c:	e0bfff17 	ldw	r2,-4(fp)
81129d60:	00c00384 	movi	r3,14
81129d64:	10c00005 	stb	r3,0(r2)
             break;
81129d68:	00000806 	br	81129d8c <OSMutexPend+0x558>
             
        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
81129d6c:	d0a09017 	ldw	r2,-32192(gp)
81129d70:	e17ffd17 	ldw	r5,-12(fp)
81129d74:	1009883a 	mov	r4,r2
81129d78:	11262e40 	call	811262e4 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get mutex within TO   */
81129d7c:	e0bfff17 	ldw	r2,-4(fp)
81129d80:	00c00284 	movi	r3,10
81129d84:	10c00005 	stb	r3,0(r2)
             break;
81129d88:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
81129d8c:	d0a09017 	ldw	r2,-32192(gp)
81129d90:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
81129d94:	d0a09017 	ldw	r2,-32192(gp)
81129d98:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
81129d9c:	d0a09017 	ldw	r2,-32192(gp)
81129da0:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
81129da4:	d0a09017 	ldw	r2,-32192(gp)
81129da8:	10000815 	stw	zero,32(r2)
81129dac:	e0bff117 	ldw	r2,-60(fp)
81129db0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81129db4:	e0bffa17 	ldw	r2,-24(fp)
81129db8:	1001703a 	wrctl	status,r2
81129dbc:	00000106 	br	81129dc4 <OSMutexPend+0x590>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
        return;
81129dc0:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
81129dc4:	e037883a 	mov	sp,fp
81129dc8:	dfc00117 	ldw	ra,4(sp)
81129dcc:	df000017 	ldw	fp,0(sp)
81129dd0:	dec00204 	addi	sp,sp,8
81129dd4:	f800283a 	ret

81129dd8 <OSMutexPost>:
*                                      what tasks will be using the Mutex.
*********************************************************************************************************
*/

INT8U  OSMutexPost (OS_EVENT *pevent)
{
81129dd8:	defff604 	addi	sp,sp,-40
81129ddc:	de00012e 	bgeu	sp,et,81129de4 <OSMutexPost+0xc>
81129de0:	003b68fa 	trap	3
81129de4:	dfc00915 	stw	ra,36(sp)
81129de8:	df000815 	stw	fp,32(sp)
81129dec:	df000804 	addi	fp,sp,32
81129df0:	e13fff15 	stw	r4,-4(fp)
    INT8U      pip;                                   /* Priority inheritance priority                 */
    INT8U      prio;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
81129df4:	e03ff815 	stw	zero,-32(fp)
#endif



    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
81129df8:	d0a08f03 	ldbu	r2,-32196(gp)
81129dfc:	10803fcc 	andi	r2,r2,255
81129e00:	10000226 	beq	r2,zero,81129e0c <OSMutexPost+0x34>
        return (OS_ERR_POST_ISR);                     /* ... can't POST mutex from an ISR              */
81129e04:	00800144 	movi	r2,5
81129e08:	00007606 	br	81129fe4 <OSMutexPost+0x20c>
    }
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
81129e0c:	e0bfff17 	ldw	r2,-4(fp)
81129e10:	1000021e 	bne	r2,zero,81129e1c <OSMutexPost+0x44>
        return (OS_ERR_PEVENT_NULL);
81129e14:	00800104 	movi	r2,4
81129e18:	00007206 	br	81129fe4 <OSMutexPost+0x20c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) { /* Validate event block type                     */
81129e1c:	e0bfff17 	ldw	r2,-4(fp)
81129e20:	10800003 	ldbu	r2,0(r2)
81129e24:	10803fcc 	andi	r2,r2,255
81129e28:	10800120 	cmpeqi	r2,r2,4
81129e2c:	1000021e 	bne	r2,zero,81129e38 <OSMutexPost+0x60>
        return (OS_ERR_EVENT_TYPE);
81129e30:	00800044 	movi	r2,1
81129e34:	00006b06 	br	81129fe4 <OSMutexPost+0x20c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81129e38:	0005303a 	rdctl	r2,status
81129e3c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81129e40:	e0fffe17 	ldw	r3,-8(fp)
81129e44:	00bfff84 	movi	r2,-2
81129e48:	1884703a 	and	r2,r3,r2
81129e4c:	1001703a 	wrctl	status,r2
  
  return context;
81129e50:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
81129e54:	e0bff815 	stw	r2,-32(fp)
    pip  = (INT8U)(pevent->OSEventCnt >> 8);          /* Get priority inheritance priority of mutex    */
81129e58:	e0bfff17 	ldw	r2,-4(fp)
81129e5c:	1080020b 	ldhu	r2,8(r2)
81129e60:	10bfffcc 	andi	r2,r2,65535
81129e64:	1004d23a 	srli	r2,r2,8
81129e68:	e0bffa05 	stb	r2,-24(fp)
    prio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* Get owner's original priority      */
81129e6c:	e0bfff17 	ldw	r2,-4(fp)
81129e70:	1080020b 	ldhu	r2,8(r2)
81129e74:	e0bffa45 	stb	r2,-23(fp)
    if (OSTCBCur != (OS_TCB *)pevent->OSEventPtr) {   /* See if posting task owns the MUTEX            */
81129e78:	e0bfff17 	ldw	r2,-4(fp)
81129e7c:	10c00117 	ldw	r3,4(r2)
81129e80:	d0a09017 	ldw	r2,-32192(gp)
81129e84:	18800626 	beq	r3,r2,81129ea0 <OSMutexPost+0xc8>
81129e88:	e0bff817 	ldw	r2,-32(fp)
81129e8c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81129e90:	e0bff917 	ldw	r2,-28(fp)
81129e94:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NOT_MUTEX_OWNER);
81129e98:	00801904 	movi	r2,100
81129e9c:	00005106 	br	81129fe4 <OSMutexPost+0x20c>
    }
    if (OSTCBCur->OSTCBPrio == pip) {                 /* Did we have to raise current task's priority? */
81129ea0:	d0a09017 	ldw	r2,-32192(gp)
81129ea4:	10800c83 	ldbu	r2,50(r2)
81129ea8:	10c03fcc 	andi	r3,r2,255
81129eac:	e0bffa03 	ldbu	r2,-24(fp)
81129eb0:	1880051e 	bne	r3,r2,81129ec8 <OSMutexPost+0xf0>
        OSMutex_RdyAtPrio(OSTCBCur, prio);            /* Restore the task's original priority          */
81129eb4:	d0a09017 	ldw	r2,-32192(gp)
81129eb8:	e0fffa43 	ldbu	r3,-23(fp)
81129ebc:	180b883a 	mov	r5,r3
81129ec0:	1009883a 	mov	r4,r2
81129ec4:	112a16c0 	call	8112a16c <OSMutex_RdyAtPrio>
    }
    OSTCBPrioTbl[pip] = OS_TCB_RESERVED;              /* Reserve table entry                           */
81129ec8:	e0fffa03 	ldbu	r3,-24(fp)
81129ecc:	00a045b4 	movhi	r2,33046
81129ed0:	1094b404 	addi	r2,r2,21200
81129ed4:	18c7883a 	add	r3,r3,r3
81129ed8:	18c7883a 	add	r3,r3,r3
81129edc:	10c5883a 	add	r2,r2,r3
81129ee0:	00c00044 	movi	r3,1
81129ee4:	10c00015 	stw	r3,0(r2)
    if (pevent->OSEventGrp != 0) {                    /* Any task waiting for the mutex?               */
81129ee8:	e0bfff17 	ldw	r2,-4(fp)
81129eec:	10800283 	ldbu	r2,10(r2)
81129ef0:	10803fcc 	andi	r2,r2,255
81129ef4:	10002e26 	beq	r2,zero,81129fb0 <OSMutexPost+0x1d8>
                                                      /* Yes, Make HPT waiting for mutex ready         */
        prio                = OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_OK);
81129ef8:	000f883a 	mov	r7,zero
81129efc:	01800404 	movi	r6,16
81129f00:	000b883a 	mov	r5,zero
81129f04:	e13fff17 	ldw	r4,-4(fp)
81129f08:	1125ed40 	call	81125ed4 <OS_EventTaskRdy>
81129f0c:	e0bffa45 	stb	r2,-23(fp)
        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;  /*      Save priority of mutex's new owner       */
81129f10:	e0bfff17 	ldw	r2,-4(fp)
81129f14:	10c0020b 	ldhu	r3,8(r2)
81129f18:	00bfc004 	movi	r2,-256
81129f1c:	1884703a 	and	r2,r3,r2
81129f20:	1007883a 	mov	r3,r2
81129f24:	e0bfff17 	ldw	r2,-4(fp)
81129f28:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventCnt |= prio;
81129f2c:	e0bfff17 	ldw	r2,-4(fp)
81129f30:	10c0020b 	ldhu	r3,8(r2)
81129f34:	e0bffa43 	ldbu	r2,-23(fp)
81129f38:	1884b03a 	or	r2,r3,r2
81129f3c:	1007883a 	mov	r3,r2
81129f40:	e0bfff17 	ldw	r2,-4(fp)
81129f44:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr  = OSTCBPrioTbl[prio];     /*      Link to new mutex owner's OS_TCB         */
81129f48:	e0fffa43 	ldbu	r3,-23(fp)
81129f4c:	00a045b4 	movhi	r2,33046
81129f50:	1094b404 	addi	r2,r2,21200
81129f54:	18c7883a 	add	r3,r3,r3
81129f58:	18c7883a 	add	r3,r3,r3
81129f5c:	10c5883a 	add	r2,r2,r3
81129f60:	10c00017 	ldw	r3,0(r2)
81129f64:	e0bfff17 	ldw	r2,-4(fp)
81129f68:	10c00115 	stw	r3,4(r2)
        if (prio <= pip) {                            /*      PIP 'must' have a SMALLER prio ...       */
81129f6c:	e0bffa43 	ldbu	r2,-23(fp)
81129f70:	e0fffa03 	ldbu	r3,-24(fp)
81129f74:	18800736 	bltu	r3,r2,81129f94 <OSMutexPost+0x1bc>
81129f78:	e0bff817 	ldw	r2,-32(fp)
81129f7c:	e0bffb15 	stw	r2,-20(fp)
81129f80:	e0bffb17 	ldw	r2,-20(fp)
81129f84:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();                       /*      ... than current task!                   */
            OS_Sched();                               /*      Find highest priority task ready to run  */
81129f88:	11269900 	call	81126990 <OS_Sched>
            return (OS_ERR_PIP_LOWER);
81129f8c:	00801e04 	movi	r2,120
81129f90:	00001406 	br	81129fe4 <OSMutexPost+0x20c>
81129f94:	e0bff817 	ldw	r2,-32(fp)
81129f98:	e0bffc15 	stw	r2,-16(fp)
81129f9c:	e0bffc17 	ldw	r2,-16(fp)
81129fa0:	1001703a 	wrctl	status,r2
        } else {
            OS_EXIT_CRITICAL();
            OS_Sched();                               /*      Find highest priority task ready to run  */
81129fa4:	11269900 	call	81126990 <OS_Sched>
            return (OS_ERR_NONE);
81129fa8:	0005883a 	mov	r2,zero
81129fac:	00000d06 	br	81129fe4 <OSMutexPost+0x20c>
        }
    }
    pevent->OSEventCnt |= OS_MUTEX_AVAILABLE;         /* No,  Mutex is now available                   */
81129fb0:	e0bfff17 	ldw	r2,-4(fp)
81129fb4:	1080020b 	ldhu	r2,8(r2)
81129fb8:	10803fd4 	ori	r2,r2,255
81129fbc:	1007883a 	mov	r3,r2
81129fc0:	e0bfff17 	ldw	r2,-4(fp)
81129fc4:	10c0020d 	sth	r3,8(r2)
    pevent->OSEventPtr  = (void *)0;
81129fc8:	e0bfff17 	ldw	r2,-4(fp)
81129fcc:	10000115 	stw	zero,4(r2)
81129fd0:	e0bff817 	ldw	r2,-32(fp)
81129fd4:	e0bffd15 	stw	r2,-12(fp)
81129fd8:	e0bffd17 	ldw	r2,-12(fp)
81129fdc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
81129fe0:	0005883a 	mov	r2,zero
}
81129fe4:	e037883a 	mov	sp,fp
81129fe8:	dfc00117 	ldw	ra,4(sp)
81129fec:	df000017 	ldw	fp,0(sp)
81129ff0:	dec00204 	addi	sp,sp,8
81129ff4:	f800283a 	ret

81129ff8 <OSMutexQuery>:
*********************************************************************************************************
*/

#if OS_MUTEX_QUERY_EN > 0
INT8U  OSMutexQuery (OS_EVENT *pevent, OS_MUTEX_DATA *p_mutex_data)
{
81129ff8:	defff704 	addi	sp,sp,-36
81129ffc:	de00012e 	bgeu	sp,et,8112a004 <OSMutexQuery+0xc>
8112a000:	003b68fa 	trap	3
8112a004:	df000815 	stw	fp,32(sp)
8112a008:	df000804 	addi	fp,sp,32
8112a00c:	e13ffe15 	stw	r4,-8(fp)
8112a010:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112a014:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112a018:	d0a08f03 	ldbu	r2,-32196(gp)
8112a01c:	10803fcc 	andi	r2,r2,255
8112a020:	10000226 	beq	r2,zero,8112a02c <OSMutexQuery+0x34>
        return (OS_ERR_QUERY_ISR);                         /* ... can't QUERY mutex from an ISR        */
8112a024:	00800184 	movi	r2,6
8112a028:	00004c06 	br	8112a15c <OSMutexQuery+0x164>
    }
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
8112a02c:	e0bffe17 	ldw	r2,-8(fp)
8112a030:	1000021e 	bne	r2,zero,8112a03c <OSMutexQuery+0x44>
        return (OS_ERR_PEVENT_NULL);
8112a034:	00800104 	movi	r2,4
8112a038:	00004806 	br	8112a15c <OSMutexQuery+0x164>
    }
    if (p_mutex_data == (OS_MUTEX_DATA *)0) {              /* Validate 'p_mutex_data'                  */
8112a03c:	e0bfff17 	ldw	r2,-4(fp)
8112a040:	1000021e 	bne	r2,zero,8112a04c <OSMutexQuery+0x54>
        return (OS_ERR_PDATA_NULL);
8112a044:	00800244 	movi	r2,9
8112a048:	00004406 	br	8112a15c <OSMutexQuery+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
8112a04c:	e0bffe17 	ldw	r2,-8(fp)
8112a050:	10800003 	ldbu	r2,0(r2)
8112a054:	10803fcc 	andi	r2,r2,255
8112a058:	10800120 	cmpeqi	r2,r2,4
8112a05c:	1000021e 	bne	r2,zero,8112a068 <OSMutexQuery+0x70>
        return (OS_ERR_EVENT_TYPE);
8112a060:	00800044 	movi	r2,1
8112a064:	00003d06 	br	8112a15c <OSMutexQuery+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112a068:	0005303a 	rdctl	r2,status
8112a06c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112a070:	e0fffd17 	ldw	r3,-12(fp)
8112a074:	00bfff84 	movi	r2,-2
8112a078:	1884703a 	and	r2,r3,r2
8112a07c:	1001703a 	wrctl	status,r2
  
  return context;
8112a080:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8112a084:	e0bffb15 	stw	r2,-20(fp)
    p_mutex_data->OSMutexPIP  = (INT8U)(pevent->OSEventCnt >> 8);
8112a088:	e0bffe17 	ldw	r2,-8(fp)
8112a08c:	1080020b 	ldhu	r2,8(r2)
8112a090:	10bfffcc 	andi	r2,r2,65535
8112a094:	1004d23a 	srli	r2,r2,8
8112a098:	1007883a 	mov	r3,r2
8112a09c:	e0bfff17 	ldw	r2,-4(fp)
8112a0a0:	10c00245 	stb	r3,9(r2)
    p_mutex_data->OSOwnerPrio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);
8112a0a4:	e0bffe17 	ldw	r2,-8(fp)
8112a0a8:	1080020b 	ldhu	r2,8(r2)
8112a0ac:	1007883a 	mov	r3,r2
8112a0b0:	e0bfff17 	ldw	r2,-4(fp)
8112a0b4:	10c00205 	stb	r3,8(r2)
    if (p_mutex_data->OSOwnerPrio == 0xFF) {
8112a0b8:	e0bfff17 	ldw	r2,-4(fp)
8112a0bc:	10800203 	ldbu	r2,8(r2)
8112a0c0:	10803fcc 	andi	r2,r2,255
8112a0c4:	10803fd8 	cmpnei	r2,r2,255
8112a0c8:	1000041e 	bne	r2,zero,8112a0dc <OSMutexQuery+0xe4>
        p_mutex_data->OSValue = OS_TRUE;
8112a0cc:	e0bfff17 	ldw	r2,-4(fp)
8112a0d0:	00c00044 	movi	r3,1
8112a0d4:	10c001c5 	stb	r3,7(r2)
8112a0d8:	00000206 	br	8112a0e4 <OSMutexQuery+0xec>
    } else {
        p_mutex_data->OSValue = OS_FALSE;
8112a0dc:	e0bfff17 	ldw	r2,-4(fp)
8112a0e0:	100001c5 	stb	zero,7(r2)
    }
    p_mutex_data->OSEventGrp  = pevent->OSEventGrp;        /* Copy wait list                           */
8112a0e4:	e0bffe17 	ldw	r2,-8(fp)
8112a0e8:	10c00283 	ldbu	r3,10(r2)
8112a0ec:	e0bfff17 	ldw	r2,-4(fp)
8112a0f0:	10c00185 	stb	r3,6(r2)
    psrc                      = &pevent->OSEventTbl[0];
8112a0f4:	e0bffe17 	ldw	r2,-8(fp)
8112a0f8:	108002c4 	addi	r2,r2,11
8112a0fc:	e0bff915 	stw	r2,-28(fp)
    pdest                     = &p_mutex_data->OSEventTbl[0];
8112a100:	e0bfff17 	ldw	r2,-4(fp)
8112a104:	e0bffa15 	stw	r2,-24(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
8112a108:	e03ff805 	stb	zero,-32(fp)
8112a10c:	00000b06 	br	8112a13c <OSMutexQuery+0x144>
        *pdest++ = *psrc++;
8112a110:	e0bffa17 	ldw	r2,-24(fp)
8112a114:	10c00044 	addi	r3,r2,1
8112a118:	e0fffa15 	stw	r3,-24(fp)
8112a11c:	e0fff917 	ldw	r3,-28(fp)
8112a120:	19000044 	addi	r4,r3,1
8112a124:	e13ff915 	stw	r4,-28(fp)
8112a128:	18c00003 	ldbu	r3,0(r3)
8112a12c:	10c00005 	stb	r3,0(r2)
        p_mutex_data->OSValue = OS_FALSE;
    }
    p_mutex_data->OSEventGrp  = pevent->OSEventGrp;        /* Copy wait list                           */
    psrc                      = &pevent->OSEventTbl[0];
    pdest                     = &p_mutex_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
8112a130:	e0bff803 	ldbu	r2,-32(fp)
8112a134:	10800044 	addi	r2,r2,1
8112a138:	e0bff805 	stb	r2,-32(fp)
8112a13c:	e0bff803 	ldbu	r2,-32(fp)
8112a140:	108001b0 	cmpltui	r2,r2,6
8112a144:	103ff21e 	bne	r2,zero,8112a110 <__reset+0xfb10a110>
8112a148:	e0bffb17 	ldw	r2,-20(fp)
8112a14c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112a150:	e0bffc17 	ldw	r2,-16(fp)
8112a154:	1001703a 	wrctl	status,r2
        *pdest++ = *psrc++;
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112a158:	0005883a 	mov	r2,zero
}
8112a15c:	e037883a 	mov	sp,fp
8112a160:	df000017 	ldw	fp,0(sp)
8112a164:	dec00104 	addi	sp,sp,4
8112a168:	f800283a 	ret

8112a16c <OSMutex_RdyAtPrio>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OSMutex_RdyAtPrio (OS_TCB *ptcb, INT8U prio)
{
8112a16c:	defffc04 	addi	sp,sp,-16
8112a170:	de00012e 	bgeu	sp,et,8112a178 <OSMutex_RdyAtPrio+0xc>
8112a174:	003b68fa 	trap	3
8112a178:	df000315 	stw	fp,12(sp)
8112a17c:	df000304 	addi	fp,sp,12
8112a180:	e13ffe15 	stw	r4,-8(fp)
8112a184:	2805883a 	mov	r2,r5
8112a188:	e0bfff05 	stb	r2,-4(fp)
    INT8U   y;


    y            =  ptcb->OSTCBY;                          /* Remove owner from ready list at 'pip'    */
8112a18c:	e0bffe17 	ldw	r2,-8(fp)
8112a190:	10800d03 	ldbu	r2,52(r2)
8112a194:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;
8112a198:	e0fffd03 	ldbu	r3,-12(fp)
8112a19c:	e13ffd03 	ldbu	r4,-12(fp)
8112a1a0:	d0a08c44 	addi	r2,gp,-32207
8112a1a4:	2085883a 	add	r2,r4,r2
8112a1a8:	10800003 	ldbu	r2,0(r2)
8112a1ac:	1009883a 	mov	r4,r2
8112a1b0:	e0bffe17 	ldw	r2,-8(fp)
8112a1b4:	10800d43 	ldbu	r2,53(r2)
8112a1b8:	0084303a 	nor	r2,zero,r2
8112a1bc:	2084703a 	and	r2,r4,r2
8112a1c0:	1009883a 	mov	r4,r2
8112a1c4:	d0a08c44 	addi	r2,gp,-32207
8112a1c8:	1885883a 	add	r2,r3,r2
8112a1cc:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
8112a1d0:	e0fffd03 	ldbu	r3,-12(fp)
8112a1d4:	d0a08c44 	addi	r2,gp,-32207
8112a1d8:	1885883a 	add	r2,r3,r2
8112a1dc:	10800003 	ldbu	r2,0(r2)
8112a1e0:	10803fcc 	andi	r2,r2,255
8112a1e4:	1000071e 	bne	r2,zero,8112a204 <OSMutex_RdyAtPrio+0x98>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
8112a1e8:	e0bffe17 	ldw	r2,-8(fp)
8112a1ec:	10800d83 	ldbu	r2,54(r2)
8112a1f0:	0084303a 	nor	r2,zero,r2
8112a1f4:	1007883a 	mov	r3,r2
8112a1f8:	d0a08c03 	ldbu	r2,-32208(gp)
8112a1fc:	1884703a 	and	r2,r3,r2
8112a200:	d0a08c05 	stb	r2,-32208(gp)
    }
    ptcb->OSTCBPrio         = prio;
8112a204:	e0bffe17 	ldw	r2,-8(fp)
8112a208:	e0ffff03 	ldbu	r3,-4(fp)
8112a20c:	10c00c85 	stb	r3,50(r2)
#if OS_LOWEST_PRIO <= 63
    ptcb->OSTCBY            = (INT8U)((prio >> (INT8U)3) & (INT8U)0x07);
8112a210:	e0bfff03 	ldbu	r2,-4(fp)
8112a214:	1004d0fa 	srli	r2,r2,3
8112a218:	108001cc 	andi	r2,r2,7
8112a21c:	1007883a 	mov	r3,r2
8112a220:	e0bffe17 	ldw	r2,-8(fp)
8112a224:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX            = (INT8U) (prio & (INT8U)0x07);
8112a228:	e0bfff03 	ldbu	r2,-4(fp)
8112a22c:	108001cc 	andi	r2,r2,7
8112a230:	1007883a 	mov	r3,r2
8112a234:	e0bffe17 	ldw	r2,-8(fp)
8112a238:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY         = (INT8U)(1 << ptcb->OSTCBY);
8112a23c:	e0bffe17 	ldw	r2,-8(fp)
8112a240:	10800d03 	ldbu	r2,52(r2)
8112a244:	10803fcc 	andi	r2,r2,255
8112a248:	00c00044 	movi	r3,1
8112a24c:	1884983a 	sll	r2,r3,r2
8112a250:	1007883a 	mov	r3,r2
8112a254:	e0bffe17 	ldw	r2,-8(fp)
8112a258:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX         = (INT8U)(1 << ptcb->OSTCBX);
8112a25c:	e0bffe17 	ldw	r2,-8(fp)
8112a260:	10800cc3 	ldbu	r2,51(r2)
8112a264:	10803fcc 	andi	r2,r2,255
8112a268:	00c00044 	movi	r3,1
8112a26c:	1884983a 	sll	r2,r3,r2
8112a270:	1007883a 	mov	r3,r2
8112a274:	e0bffe17 	ldw	r2,-8(fp)
8112a278:	10c00d45 	stb	r3,53(r2)
    ptcb->OSTCBY            = (INT8U)((prio >> (INT8U)4) & (INT8U)0x0F);
    ptcb->OSTCBX            = (INT8U) (prio & (INT8U)0x0F);
    ptcb->OSTCBBitY         = (INT16U)(1 << ptcb->OSTCBY);
    ptcb->OSTCBBitX         = (INT16U)(1 << ptcb->OSTCBX);
#endif
    OSRdyGrp               |= ptcb->OSTCBBitY;             /* Make task ready at original priority     */
8112a27c:	e0bffe17 	ldw	r2,-8(fp)
8112a280:	10c00d83 	ldbu	r3,54(r2)
8112a284:	d0a08c03 	ldbu	r2,-32208(gp)
8112a288:	1884b03a 	or	r2,r3,r2
8112a28c:	d0a08c05 	stb	r2,-32208(gp)
    OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
8112a290:	e0bffe17 	ldw	r2,-8(fp)
8112a294:	10800d03 	ldbu	r2,52(r2)
8112a298:	10c03fcc 	andi	r3,r2,255
8112a29c:	e0bffe17 	ldw	r2,-8(fp)
8112a2a0:	10800d03 	ldbu	r2,52(r2)
8112a2a4:	11003fcc 	andi	r4,r2,255
8112a2a8:	d0a08c44 	addi	r2,gp,-32207
8112a2ac:	2085883a 	add	r2,r4,r2
8112a2b0:	11000003 	ldbu	r4,0(r2)
8112a2b4:	e0bffe17 	ldw	r2,-8(fp)
8112a2b8:	10800d43 	ldbu	r2,53(r2)
8112a2bc:	2084b03a 	or	r2,r4,r2
8112a2c0:	1009883a 	mov	r4,r2
8112a2c4:	d0a08c44 	addi	r2,gp,-32207
8112a2c8:	1885883a 	add	r2,r3,r2
8112a2cc:	11000005 	stb	r4,0(r2)
    OSTCBPrioTbl[prio]      = ptcb;
8112a2d0:	e0ffff03 	ldbu	r3,-4(fp)
8112a2d4:	00a045b4 	movhi	r2,33046
8112a2d8:	1094b404 	addi	r2,r2,21200
8112a2dc:	18c7883a 	add	r3,r3,r3
8112a2e0:	18c7883a 	add	r3,r3,r3
8112a2e4:	10c5883a 	add	r2,r2,r3
8112a2e8:	e0fffe17 	ldw	r3,-8(fp)
8112a2ec:	10c00015 	stw	r3,0(r2)
}
8112a2f0:	0001883a 	nop
8112a2f4:	e037883a 	mov	sp,fp
8112a2f8:	df000017 	ldw	fp,0(sp)
8112a2fc:	dec00104 	addi	sp,sp,4
8112a300:	f800283a 	ret

8112a304 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
8112a304:	defff804 	addi	sp,sp,-32
8112a308:	de00012e 	bgeu	sp,et,8112a310 <OSQAccept+0xc>
8112a30c:	003b68fa 	trap	3
8112a310:	df000715 	stw	fp,28(sp)
8112a314:	df000704 	addi	fp,sp,28
8112a318:	e13ffe15 	stw	r4,-8(fp)
8112a31c:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112a320:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
8112a324:	e0bfff17 	ldw	r2,-4(fp)
8112a328:	1000021e 	bne	r2,zero,8112a334 <OSQAccept+0x30>
        return ((void *)0);
8112a32c:	0005883a 	mov	r2,zero
8112a330:	00004206 	br	8112a43c <OSQAccept+0x138>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
8112a334:	e0bffe17 	ldw	r2,-8(fp)
8112a338:	1000051e 	bne	r2,zero,8112a350 <OSQAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
8112a33c:	e0bfff17 	ldw	r2,-4(fp)
8112a340:	00c00104 	movi	r3,4
8112a344:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
8112a348:	0005883a 	mov	r2,zero
8112a34c:	00003b06 	br	8112a43c <OSQAccept+0x138>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
8112a350:	e0bffe17 	ldw	r2,-8(fp)
8112a354:	10800003 	ldbu	r2,0(r2)
8112a358:	10803fcc 	andi	r2,r2,255
8112a35c:	108000a0 	cmpeqi	r2,r2,2
8112a360:	1000051e 	bne	r2,zero,8112a378 <OSQAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
8112a364:	e0bfff17 	ldw	r2,-4(fp)
8112a368:	00c00044 	movi	r3,1
8112a36c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
8112a370:	0005883a 	mov	r2,zero
8112a374:	00003106 	br	8112a43c <OSQAccept+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112a378:	0005303a 	rdctl	r2,status
8112a37c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112a380:	e0fffd17 	ldw	r3,-12(fp)
8112a384:	00bfff84 	movi	r2,-2
8112a388:	1884703a 	and	r2,r3,r2
8112a38c:	1001703a 	wrctl	status,r2
  
  return context;
8112a390:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8112a394:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
8112a398:	e0bffe17 	ldw	r2,-8(fp)
8112a39c:	10800117 	ldw	r2,4(r2)
8112a3a0:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
8112a3a4:	e0bffc17 	ldw	r2,-16(fp)
8112a3a8:	1080058b 	ldhu	r2,22(r2)
8112a3ac:	10bfffcc 	andi	r2,r2,65535
8112a3b0:	10001926 	beq	r2,zero,8112a418 <OSQAccept+0x114>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
8112a3b4:	e0bffc17 	ldw	r2,-16(fp)
8112a3b8:	10800417 	ldw	r2,16(r2)
8112a3bc:	11000104 	addi	r4,r2,4
8112a3c0:	e0fffc17 	ldw	r3,-16(fp)
8112a3c4:	19000415 	stw	r4,16(r3)
8112a3c8:	10800017 	ldw	r2,0(r2)
8112a3cc:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
8112a3d0:	e0bffc17 	ldw	r2,-16(fp)
8112a3d4:	1080058b 	ldhu	r2,22(r2)
8112a3d8:	10bfffc4 	addi	r2,r2,-1
8112a3dc:	1007883a 	mov	r3,r2
8112a3e0:	e0bffc17 	ldw	r2,-16(fp)
8112a3e4:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
8112a3e8:	e0bffc17 	ldw	r2,-16(fp)
8112a3ec:	10c00417 	ldw	r3,16(r2)
8112a3f0:	e0bffc17 	ldw	r2,-16(fp)
8112a3f4:	10800217 	ldw	r2,8(r2)
8112a3f8:	1880041e 	bne	r3,r2,8112a40c <OSQAccept+0x108>
            pq->OSQOut = pq->OSQStart;
8112a3fc:	e0bffc17 	ldw	r2,-16(fp)
8112a400:	10c00117 	ldw	r3,4(r2)
8112a404:	e0bffc17 	ldw	r2,-16(fp)
8112a408:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
8112a40c:	e0bfff17 	ldw	r2,-4(fp)
8112a410:	10000005 	stb	zero,0(r2)
8112a414:	00000406 	br	8112a428 <OSQAccept+0x124>
    } else {
        *perr = OS_ERR_Q_EMPTY;
8112a418:	e0bfff17 	ldw	r2,-4(fp)
8112a41c:	00c007c4 	movi	r3,31
8112a420:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
8112a424:	e03ff915 	stw	zero,-28(fp)
8112a428:	e0bffa17 	ldw	r2,-24(fp)
8112a42c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112a430:	e0bffb17 	ldw	r2,-20(fp)
8112a434:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
8112a438:	e0bff917 	ldw	r2,-28(fp)
}
8112a43c:	e037883a 	mov	sp,fp
8112a440:	df000017 	ldw	fp,0(sp)
8112a444:	dec00104 	addi	sp,sp,4
8112a448:	f800283a 	ret

8112a44c <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
8112a44c:	defff404 	addi	sp,sp,-48
8112a450:	de00012e 	bgeu	sp,et,8112a458 <OSQCreate+0xc>
8112a454:	003b68fa 	trap	3
8112a458:	dfc00b15 	stw	ra,44(sp)
8112a45c:	df000a15 	stw	fp,40(sp)
8112a460:	df000a04 	addi	fp,sp,40
8112a464:	e13ffe15 	stw	r4,-8(fp)
8112a468:	2805883a 	mov	r2,r5
8112a46c:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112a470:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
8112a474:	d0a08f03 	ldbu	r2,-32196(gp)
8112a478:	10803fcc 	andi	r2,r2,255
8112a47c:	10000226 	beq	r2,zero,8112a488 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
8112a480:	0005883a 	mov	r2,zero
8112a484:	00005906 	br	8112a5ec <OSQCreate+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112a488:	0005303a 	rdctl	r2,status
8112a48c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112a490:	e0fffd17 	ldw	r3,-12(fp)
8112a494:	00bfff84 	movi	r2,-2
8112a498:	1884703a 	and	r2,r3,r2
8112a49c:	1001703a 	wrctl	status,r2
  
  return context;
8112a4a0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8112a4a4:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
8112a4a8:	d0a08e17 	ldw	r2,-32200(gp)
8112a4ac:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
8112a4b0:	d0a08e17 	ldw	r2,-32200(gp)
8112a4b4:	10000326 	beq	r2,zero,8112a4c4 <OSQCreate+0x78>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
8112a4b8:	d0a08e17 	ldw	r2,-32200(gp)
8112a4bc:	10800117 	ldw	r2,4(r2)
8112a4c0:	d0a08e15 	stw	r2,-32200(gp)
8112a4c4:	e0bff717 	ldw	r2,-36(fp)
8112a4c8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112a4cc:	e0bff817 	ldw	r2,-32(fp)
8112a4d0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
8112a4d4:	e0bff617 	ldw	r2,-40(fp)
8112a4d8:	10004326 	beq	r2,zero,8112a5e8 <OSQCreate+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112a4dc:	0005303a 	rdctl	r2,status
8112a4e0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112a4e4:	e0fff917 	ldw	r3,-28(fp)
8112a4e8:	00bfff84 	movi	r2,-2
8112a4ec:	1884703a 	and	r2,r3,r2
8112a4f0:	1001703a 	wrctl	status,r2
  
  return context;
8112a4f4:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
8112a4f8:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
8112a4fc:	d0a08b17 	ldw	r2,-32212(gp)
8112a500:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
8112a504:	e0bffb17 	ldw	r2,-20(fp)
8112a508:	10002d26 	beq	r2,zero,8112a5c0 <OSQCreate+0x174>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
8112a50c:	d0a08b17 	ldw	r2,-32212(gp)
8112a510:	10800017 	ldw	r2,0(r2)
8112a514:	d0a08b15 	stw	r2,-32212(gp)
8112a518:	e0bff717 	ldw	r2,-36(fp)
8112a51c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112a520:	e0bffa17 	ldw	r2,-24(fp)
8112a524:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
8112a528:	e0bffb17 	ldw	r2,-20(fp)
8112a52c:	e0fffe17 	ldw	r3,-8(fp)
8112a530:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
8112a534:	e0bfff0b 	ldhu	r2,-4(fp)
8112a538:	1085883a 	add	r2,r2,r2
8112a53c:	1085883a 	add	r2,r2,r2
8112a540:	1007883a 	mov	r3,r2
8112a544:	e0bffe17 	ldw	r2,-8(fp)
8112a548:	10c7883a 	add	r3,r2,r3
8112a54c:	e0bffb17 	ldw	r2,-20(fp)
8112a550:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
8112a554:	e0bffb17 	ldw	r2,-20(fp)
8112a558:	e0fffe17 	ldw	r3,-8(fp)
8112a55c:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
8112a560:	e0bffb17 	ldw	r2,-20(fp)
8112a564:	e0fffe17 	ldw	r3,-8(fp)
8112a568:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
8112a56c:	e0bffb17 	ldw	r2,-20(fp)
8112a570:	e0ffff0b 	ldhu	r3,-4(fp)
8112a574:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
8112a578:	e0bffb17 	ldw	r2,-20(fp)
8112a57c:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
8112a580:	e0bff617 	ldw	r2,-40(fp)
8112a584:	00c00084 	movi	r3,2
8112a588:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
8112a58c:	e0bff617 	ldw	r2,-40(fp)
8112a590:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
8112a594:	e0bff617 	ldw	r2,-40(fp)
8112a598:	e0fffb17 	ldw	r3,-20(fp)
8112a59c:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
8112a5a0:	e0bff617 	ldw	r2,-40(fp)
8112a5a4:	00c00fc4 	movi	r3,63
8112a5a8:	10c00445 	stb	r3,17(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
8112a5ac:	e0bff617 	ldw	r2,-40(fp)
8112a5b0:	10000485 	stb	zero,18(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
8112a5b4:	e13ff617 	ldw	r4,-40(fp)
8112a5b8:	11264ac0 	call	811264ac <OS_EventWaitListInit>
8112a5bc:	00000a06 	br	8112a5e8 <OSQCreate+0x19c>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
8112a5c0:	d0e08e17 	ldw	r3,-32200(gp)
8112a5c4:	e0bff617 	ldw	r2,-40(fp)
8112a5c8:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
8112a5cc:	e0bff617 	ldw	r2,-40(fp)
8112a5d0:	d0a08e15 	stw	r2,-32200(gp)
8112a5d4:	e0bff717 	ldw	r2,-36(fp)
8112a5d8:	e0bffc15 	stw	r2,-16(fp)
8112a5dc:	e0bffc17 	ldw	r2,-16(fp)
8112a5e0:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
8112a5e4:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
8112a5e8:	e0bff617 	ldw	r2,-40(fp)
}
8112a5ec:	e037883a 	mov	sp,fp
8112a5f0:	dfc00117 	ldw	ra,4(sp)
8112a5f4:	df000017 	ldw	fp,0(sp)
8112a5f8:	dec00204 	addi	sp,sp,8
8112a5fc:	f800283a 	ret

8112a600 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
8112a600:	defff204 	addi	sp,sp,-56
8112a604:	de00012e 	bgeu	sp,et,8112a60c <OSQDel+0xc>
8112a608:	003b68fa 	trap	3
8112a60c:	dfc00d15 	stw	ra,52(sp)
8112a610:	df000c15 	stw	fp,48(sp)
8112a614:	df000c04 	addi	fp,sp,48
8112a618:	e13ffd15 	stw	r4,-12(fp)
8112a61c:	2805883a 	mov	r2,r5
8112a620:	e1bfff15 	stw	r6,-4(fp)
8112a624:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112a628:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112a62c:	e0bfff17 	ldw	r2,-4(fp)
8112a630:	1000021e 	bne	r2,zero,8112a63c <OSQDel+0x3c>
        return (pevent);
8112a634:	e0bffd17 	ldw	r2,-12(fp)
8112a638:	00008e06 	br	8112a874 <OSQDel+0x274>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
8112a63c:	e0bffd17 	ldw	r2,-12(fp)
8112a640:	1000051e 	bne	r2,zero,8112a658 <OSQDel+0x58>
        *perr = OS_ERR_PEVENT_NULL;
8112a644:	e0bfff17 	ldw	r2,-4(fp)
8112a648:	00c00104 	movi	r3,4
8112a64c:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112a650:	e0bffd17 	ldw	r2,-12(fp)
8112a654:	00008706 	br	8112a874 <OSQDel+0x274>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
8112a658:	e0bffd17 	ldw	r2,-12(fp)
8112a65c:	10800003 	ldbu	r2,0(r2)
8112a660:	10803fcc 	andi	r2,r2,255
8112a664:	108000a0 	cmpeqi	r2,r2,2
8112a668:	1000051e 	bne	r2,zero,8112a680 <OSQDel+0x80>
        *perr = OS_ERR_EVENT_TYPE;
8112a66c:	e0bfff17 	ldw	r2,-4(fp)
8112a670:	00c00044 	movi	r3,1
8112a674:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112a678:	e0bffd17 	ldw	r2,-12(fp)
8112a67c:	00007d06 	br	8112a874 <OSQDel+0x274>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112a680:	d0a08f03 	ldbu	r2,-32196(gp)
8112a684:	10803fcc 	andi	r2,r2,255
8112a688:	10000526 	beq	r2,zero,8112a6a0 <OSQDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
8112a68c:	e0bfff17 	ldw	r2,-4(fp)
8112a690:	00c003c4 	movi	r3,15
8112a694:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112a698:	e0bffd17 	ldw	r2,-12(fp)
8112a69c:	00007506 	br	8112a874 <OSQDel+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112a6a0:	0005303a 	rdctl	r2,status
8112a6a4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112a6a8:	e0fffc17 	ldw	r3,-16(fp)
8112a6ac:	00bfff84 	movi	r2,-2
8112a6b0:	1884703a 	and	r2,r3,r2
8112a6b4:	1001703a 	wrctl	status,r2
  
  return context;
8112a6b8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112a6bc:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
8112a6c0:	e0bffd17 	ldw	r2,-12(fp)
8112a6c4:	10800283 	ldbu	r2,10(r2)
8112a6c8:	10803fcc 	andi	r2,r2,255
8112a6cc:	10000326 	beq	r2,zero,8112a6dc <OSQDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
8112a6d0:	00800044 	movi	r2,1
8112a6d4:	e0bff405 	stb	r2,-48(fp)
8112a6d8:	00000106 	br	8112a6e0 <OSQDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
8112a6dc:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
8112a6e0:	e0bffe03 	ldbu	r2,-8(fp)
8112a6e4:	10000326 	beq	r2,zero,8112a6f4 <OSQDel+0xf4>
8112a6e8:	10800060 	cmpeqi	r2,r2,1
8112a6ec:	1000301e 	bne	r2,zero,8112a7b0 <OSQDel+0x1b0>
8112a6f0:	00005506 	br	8112a848 <OSQDel+0x248>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
8112a6f4:	e0bff403 	ldbu	r2,-48(fp)
8112a6f8:	10001e1e 	bne	r2,zero,8112a774 <OSQDel+0x174>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
8112a6fc:	e0bffd17 	ldw	r2,-12(fp)
8112a700:	00c00fc4 	movi	r3,63
8112a704:	10c00445 	stb	r3,17(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
8112a708:	e0bffd17 	ldw	r2,-12(fp)
8112a70c:	10000485 	stb	zero,18(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
8112a710:	e0bffd17 	ldw	r2,-12(fp)
8112a714:	10800117 	ldw	r2,4(r2)
8112a718:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
8112a71c:	d0e08b17 	ldw	r3,-32212(gp)
8112a720:	e0bff817 	ldw	r2,-32(fp)
8112a724:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
8112a728:	e0bff817 	ldw	r2,-32(fp)
8112a72c:	d0a08b15 	stw	r2,-32212(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
8112a730:	e0bffd17 	ldw	r2,-12(fp)
8112a734:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
8112a738:	d0e08e17 	ldw	r3,-32200(gp)
8112a73c:	e0bffd17 	ldw	r2,-12(fp)
8112a740:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
8112a744:	e0bffd17 	ldw	r2,-12(fp)
8112a748:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
8112a74c:	e0bffd17 	ldw	r2,-12(fp)
8112a750:	d0a08e15 	stw	r2,-32200(gp)
8112a754:	e0bff617 	ldw	r2,-40(fp)
8112a758:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112a75c:	e0bff717 	ldw	r2,-36(fp)
8112a760:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
8112a764:	e0bfff17 	ldw	r2,-4(fp)
8112a768:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
8112a76c:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
8112a770:	00003f06 	br	8112a870 <OSQDel+0x270>
8112a774:	e0bff617 	ldw	r2,-40(fp)
8112a778:	e0bff915 	stw	r2,-28(fp)
8112a77c:	e0bff917 	ldw	r2,-28(fp)
8112a780:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
8112a784:	e0bfff17 	ldw	r2,-4(fp)
8112a788:	00c01244 	movi	r3,73
8112a78c:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
8112a790:	e0bffd17 	ldw	r2,-12(fp)
8112a794:	e0bff515 	stw	r2,-44(fp)
             }
             break;
8112a798:	00003506 	br	8112a870 <OSQDel+0x270>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
8112a79c:	000f883a 	mov	r7,zero
8112a7a0:	01800104 	movi	r6,4
8112a7a4:	000b883a 	mov	r5,zero
8112a7a8:	e13ffd17 	ldw	r4,-12(fp)
8112a7ac:	1125ed40 	call	81125ed4 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
8112a7b0:	e0bffd17 	ldw	r2,-12(fp)
8112a7b4:	10800283 	ldbu	r2,10(r2)
8112a7b8:	10803fcc 	andi	r2,r2,255
8112a7bc:	103ff71e 	bne	r2,zero,8112a79c <__reset+0xfb10a79c>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
8112a7c0:	e0bffd17 	ldw	r2,-12(fp)
8112a7c4:	00c00fc4 	movi	r3,63
8112a7c8:	10c00445 	stb	r3,17(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
8112a7cc:	e0bffd17 	ldw	r2,-12(fp)
8112a7d0:	10000485 	stb	zero,18(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
8112a7d4:	e0bffd17 	ldw	r2,-12(fp)
8112a7d8:	10800117 	ldw	r2,4(r2)
8112a7dc:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
8112a7e0:	d0e08b17 	ldw	r3,-32212(gp)
8112a7e4:	e0bff817 	ldw	r2,-32(fp)
8112a7e8:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
8112a7ec:	e0bff817 	ldw	r2,-32(fp)
8112a7f0:	d0a08b15 	stw	r2,-32212(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
8112a7f4:	e0bffd17 	ldw	r2,-12(fp)
8112a7f8:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
8112a7fc:	d0e08e17 	ldw	r3,-32200(gp)
8112a800:	e0bffd17 	ldw	r2,-12(fp)
8112a804:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
8112a808:	e0bffd17 	ldw	r2,-12(fp)
8112a80c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
8112a810:	e0bffd17 	ldw	r2,-12(fp)
8112a814:	d0a08e15 	stw	r2,-32200(gp)
8112a818:	e0bff617 	ldw	r2,-40(fp)
8112a81c:	e0bffa15 	stw	r2,-24(fp)
8112a820:	e0bffa17 	ldw	r2,-24(fp)
8112a824:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
8112a828:	e0bff403 	ldbu	r2,-48(fp)
8112a82c:	10800058 	cmpnei	r2,r2,1
8112a830:	1000011e 	bne	r2,zero,8112a838 <OSQDel+0x238>
                 OS_Sched();                               /* Find highest priority task ready to run  */
8112a834:	11269900 	call	81126990 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
8112a838:	e0bfff17 	ldw	r2,-4(fp)
8112a83c:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
8112a840:	e03ff515 	stw	zero,-44(fp)
             break;
8112a844:	00000a06 	br	8112a870 <OSQDel+0x270>
8112a848:	e0bff617 	ldw	r2,-40(fp)
8112a84c:	e0bffb15 	stw	r2,-20(fp)
8112a850:	e0bffb17 	ldw	r2,-20(fp)
8112a854:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
8112a858:	e0bfff17 	ldw	r2,-4(fp)
8112a85c:	00c001c4 	movi	r3,7
8112a860:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
8112a864:	e0bffd17 	ldw	r2,-12(fp)
8112a868:	e0bff515 	stw	r2,-44(fp)
             break;
8112a86c:	0001883a 	nop
    }
    return (pevent_return);
8112a870:	e0bff517 	ldw	r2,-44(fp)
}
8112a874:	e037883a 	mov	sp,fp
8112a878:	dfc00117 	ldw	ra,4(sp)
8112a87c:	df000017 	ldw	fp,0(sp)
8112a880:	dec00204 	addi	sp,sp,8
8112a884:	f800283a 	ret

8112a888 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
8112a888:	defffa04 	addi	sp,sp,-24
8112a88c:	de00012e 	bgeu	sp,et,8112a894 <OSQFlush+0xc>
8112a890:	003b68fa 	trap	3
8112a894:	df000515 	stw	fp,20(sp)
8112a898:	df000504 	addi	fp,sp,20
8112a89c:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112a8a0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8112a8a4:	e0bfff17 	ldw	r2,-4(fp)
8112a8a8:	1000021e 	bne	r2,zero,8112a8b4 <OSQFlush+0x2c>
        return (OS_ERR_PEVENT_NULL);
8112a8ac:	00800104 	movi	r2,4
8112a8b0:	00002106 	br	8112a938 <OSQFlush+0xb0>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
8112a8b4:	e0bfff17 	ldw	r2,-4(fp)
8112a8b8:	10800003 	ldbu	r2,0(r2)
8112a8bc:	10803fcc 	andi	r2,r2,255
8112a8c0:	108000a0 	cmpeqi	r2,r2,2
8112a8c4:	1000021e 	bne	r2,zero,8112a8d0 <OSQFlush+0x48>
        return (OS_ERR_EVENT_TYPE);
8112a8c8:	00800044 	movi	r2,1
8112a8cc:	00001a06 	br	8112a938 <OSQFlush+0xb0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112a8d0:	0005303a 	rdctl	r2,status
8112a8d4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112a8d8:	e0fffd17 	ldw	r3,-12(fp)
8112a8dc:	00bfff84 	movi	r2,-2
8112a8e0:	1884703a 	and	r2,r3,r2
8112a8e4:	1001703a 	wrctl	status,r2
  
  return context;
8112a8e8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8112a8ec:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
8112a8f0:	e0bfff17 	ldw	r2,-4(fp)
8112a8f4:	10800117 	ldw	r2,4(r2)
8112a8f8:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
8112a8fc:	e0bffc17 	ldw	r2,-16(fp)
8112a900:	10c00117 	ldw	r3,4(r2)
8112a904:	e0bffc17 	ldw	r2,-16(fp)
8112a908:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
8112a90c:	e0bffc17 	ldw	r2,-16(fp)
8112a910:	10c00117 	ldw	r3,4(r2)
8112a914:	e0bffc17 	ldw	r2,-16(fp)
8112a918:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
8112a91c:	e0bffc17 	ldw	r2,-16(fp)
8112a920:	1000058d 	sth	zero,22(r2)
8112a924:	e0bffb17 	ldw	r2,-20(fp)
8112a928:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112a92c:	e0bffe17 	ldw	r2,-8(fp)
8112a930:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112a934:	0005883a 	mov	r2,zero
}
8112a938:	e037883a 	mov	sp,fp
8112a93c:	df000017 	ldw	fp,0(sp)
8112a940:	dec00104 	addi	sp,sp,4
8112a944:	f800283a 	ret

8112a948 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
8112a948:	defff304 	addi	sp,sp,-52
8112a94c:	de00012e 	bgeu	sp,et,8112a954 <OSQPend+0xc>
8112a950:	003b68fa 	trap	3
8112a954:	dfc00c15 	stw	ra,48(sp)
8112a958:	df000b15 	stw	fp,44(sp)
8112a95c:	df000b04 	addi	fp,sp,44
8112a960:	e13ffd15 	stw	r4,-12(fp)
8112a964:	2805883a 	mov	r2,r5
8112a968:	e1bfff15 	stw	r6,-4(fp)
8112a96c:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112a970:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
8112a974:	e0bfff17 	ldw	r2,-4(fp)
8112a978:	1000021e 	bne	r2,zero,8112a984 <OSQPend+0x3c>
        return ((void *)0);
8112a97c:	0005883a 	mov	r2,zero
8112a980:	00009106 	br	8112abc8 <OSQPend+0x280>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
8112a984:	e0bffd17 	ldw	r2,-12(fp)
8112a988:	1000051e 	bne	r2,zero,8112a9a0 <OSQPend+0x58>
        *perr = OS_ERR_PEVENT_NULL;
8112a98c:	e0bfff17 	ldw	r2,-4(fp)
8112a990:	00c00104 	movi	r3,4
8112a994:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
8112a998:	0005883a 	mov	r2,zero
8112a99c:	00008a06 	br	8112abc8 <OSQPend+0x280>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
8112a9a0:	e0bffd17 	ldw	r2,-12(fp)
8112a9a4:	10800003 	ldbu	r2,0(r2)
8112a9a8:	10803fcc 	andi	r2,r2,255
8112a9ac:	108000a0 	cmpeqi	r2,r2,2
8112a9b0:	1000051e 	bne	r2,zero,8112a9c8 <OSQPend+0x80>
        *perr = OS_ERR_EVENT_TYPE;
8112a9b4:	e0bfff17 	ldw	r2,-4(fp)
8112a9b8:	00c00044 	movi	r3,1
8112a9bc:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
8112a9c0:	0005883a 	mov	r2,zero
8112a9c4:	00008006 	br	8112abc8 <OSQPend+0x280>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
8112a9c8:	d0a08f03 	ldbu	r2,-32196(gp)
8112a9cc:	10803fcc 	andi	r2,r2,255
8112a9d0:	10000526 	beq	r2,zero,8112a9e8 <OSQPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
8112a9d4:	e0bfff17 	ldw	r2,-4(fp)
8112a9d8:	00c00084 	movi	r3,2
8112a9dc:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
8112a9e0:	0005883a 	mov	r2,zero
8112a9e4:	00007806 	br	8112abc8 <OSQPend+0x280>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
8112a9e8:	d0a07d03 	ldbu	r2,-32268(gp)
8112a9ec:	10803fcc 	andi	r2,r2,255
8112a9f0:	10000526 	beq	r2,zero,8112aa08 <OSQPend+0xc0>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
8112a9f4:	e0bfff17 	ldw	r2,-4(fp)
8112a9f8:	00c00344 	movi	r3,13
8112a9fc:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
8112aa00:	0005883a 	mov	r2,zero
8112aa04:	00007006 	br	8112abc8 <OSQPend+0x280>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112aa08:	0005303a 	rdctl	r2,status
8112aa0c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112aa10:	e0fffc17 	ldw	r3,-16(fp)
8112aa14:	00bfff84 	movi	r2,-2
8112aa18:	1884703a 	and	r2,r3,r2
8112aa1c:	1001703a 	wrctl	status,r2
  
  return context;
8112aa20:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112aa24:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
8112aa28:	e0bffd17 	ldw	r2,-12(fp)
8112aa2c:	10800117 	ldw	r2,4(r2)
8112aa30:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
8112aa34:	e0bff817 	ldw	r2,-32(fp)
8112aa38:	1080058b 	ldhu	r2,22(r2)
8112aa3c:	10bfffcc 	andi	r2,r2,65535
8112aa40:	10001e26 	beq	r2,zero,8112aabc <OSQPend+0x174>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
8112aa44:	e0bff817 	ldw	r2,-32(fp)
8112aa48:	10800417 	ldw	r2,16(r2)
8112aa4c:	11000104 	addi	r4,r2,4
8112aa50:	e0fff817 	ldw	r3,-32(fp)
8112aa54:	19000415 	stw	r4,16(r3)
8112aa58:	10800017 	ldw	r2,0(r2)
8112aa5c:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
8112aa60:	e0bff817 	ldw	r2,-32(fp)
8112aa64:	1080058b 	ldhu	r2,22(r2)
8112aa68:	10bfffc4 	addi	r2,r2,-1
8112aa6c:	1007883a 	mov	r3,r2
8112aa70:	e0bff817 	ldw	r2,-32(fp)
8112aa74:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
8112aa78:	e0bff817 	ldw	r2,-32(fp)
8112aa7c:	10c00417 	ldw	r3,16(r2)
8112aa80:	e0bff817 	ldw	r2,-32(fp)
8112aa84:	10800217 	ldw	r2,8(r2)
8112aa88:	1880041e 	bne	r3,r2,8112aa9c <OSQPend+0x154>
            pq->OSQOut = pq->OSQStart;
8112aa8c:	e0bff817 	ldw	r2,-32(fp)
8112aa90:	10c00117 	ldw	r3,4(r2)
8112aa94:	e0bff817 	ldw	r2,-32(fp)
8112aa98:	10c00415 	stw	r3,16(r2)
8112aa9c:	e0bff617 	ldw	r2,-40(fp)
8112aaa0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112aaa4:	e0bff717 	ldw	r2,-36(fp)
8112aaa8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
8112aaac:	e0bfff17 	ldw	r2,-4(fp)
8112aab0:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
8112aab4:	e0bff517 	ldw	r2,-44(fp)
8112aab8:	00004306 	br	8112abc8 <OSQPend+0x280>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
8112aabc:	d0a09017 	ldw	r2,-32192(gp)
8112aac0:	d0e09017 	ldw	r3,-32192(gp)
8112aac4:	18c00c03 	ldbu	r3,48(r3)
8112aac8:	18c00114 	ori	r3,r3,4
8112aacc:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
8112aad0:	d0a09017 	ldw	r2,-32192(gp)
8112aad4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
8112aad8:	d0a09017 	ldw	r2,-32192(gp)
8112aadc:	e0fffe0b 	ldhu	r3,-8(fp)
8112aae0:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
8112aae4:	e13ffd17 	ldw	r4,-12(fp)
8112aae8:	11260740 	call	81126074 <OS_EventTaskWait>
8112aaec:	e0bff617 	ldw	r2,-40(fp)
8112aaf0:	e0bffb15 	stw	r2,-20(fp)
8112aaf4:	e0bffb17 	ldw	r2,-20(fp)
8112aaf8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
8112aafc:	11269900 	call	81126990 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112ab00:	0005303a 	rdctl	r2,status
8112ab04:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112ab08:	e0fff917 	ldw	r3,-28(fp)
8112ab0c:	00bfff84 	movi	r2,-2
8112ab10:	1884703a 	and	r2,r3,r2
8112ab14:	1001703a 	wrctl	status,r2
  
  return context;
8112ab18:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
8112ab1c:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
8112ab20:	d0a09017 	ldw	r2,-32192(gp)
8112ab24:	10800c43 	ldbu	r2,49(r2)
8112ab28:	10803fcc 	andi	r2,r2,255
8112ab2c:	10000326 	beq	r2,zero,8112ab3c <OSQPend+0x1f4>
8112ab30:	108000a0 	cmpeqi	r2,r2,2
8112ab34:	1000071e 	bne	r2,zero,8112ab54 <OSQPend+0x20c>
8112ab38:	00000b06 	br	8112ab68 <OSQPend+0x220>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
8112ab3c:	d0a09017 	ldw	r2,-32192(gp)
8112ab40:	10800917 	ldw	r2,36(r2)
8112ab44:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
8112ab48:	e0bfff17 	ldw	r2,-4(fp)
8112ab4c:	10000005 	stb	zero,0(r2)
             break;
8112ab50:	00000e06 	br	8112ab8c <OSQPend+0x244>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
8112ab54:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
8112ab58:	e0bfff17 	ldw	r2,-4(fp)
8112ab5c:	00c00384 	movi	r3,14
8112ab60:	10c00005 	stb	r3,0(r2)
             break;
8112ab64:	00000906 	br	8112ab8c <OSQPend+0x244>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
8112ab68:	d0a09017 	ldw	r2,-32192(gp)
8112ab6c:	e17ffd17 	ldw	r5,-12(fp)
8112ab70:	1009883a 	mov	r4,r2
8112ab74:	11262e40 	call	811262e4 <OS_EventTaskRemove>
             pmsg = (void *)0;
8112ab78:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
8112ab7c:	e0bfff17 	ldw	r2,-4(fp)
8112ab80:	00c00284 	movi	r3,10
8112ab84:	10c00005 	stb	r3,0(r2)
             break;
8112ab88:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
8112ab8c:	d0a09017 	ldw	r2,-32192(gp)
8112ab90:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
8112ab94:	d0a09017 	ldw	r2,-32192(gp)
8112ab98:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
8112ab9c:	d0a09017 	ldw	r2,-32192(gp)
8112aba0:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
8112aba4:	d0a09017 	ldw	r2,-32192(gp)
8112aba8:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
8112abac:	d0a09017 	ldw	r2,-32192(gp)
8112abb0:	10000915 	stw	zero,36(r2)
8112abb4:	e0bff617 	ldw	r2,-40(fp)
8112abb8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112abbc:	e0bffa17 	ldw	r2,-24(fp)
8112abc0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
8112abc4:	e0bff517 	ldw	r2,-44(fp)
}
8112abc8:	e037883a 	mov	sp,fp
8112abcc:	dfc00117 	ldw	ra,4(sp)
8112abd0:	df000017 	ldw	fp,0(sp)
8112abd4:	dec00204 	addi	sp,sp,8
8112abd8:	f800283a 	ret

8112abdc <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
8112abdc:	defff604 	addi	sp,sp,-40
8112abe0:	de00012e 	bgeu	sp,et,8112abe8 <OSQPendAbort+0xc>
8112abe4:	003b68fa 	trap	3
8112abe8:	dfc00915 	stw	ra,36(sp)
8112abec:	df000815 	stw	fp,32(sp)
8112abf0:	df000804 	addi	fp,sp,32
8112abf4:	e13ffd15 	stw	r4,-12(fp)
8112abf8:	2805883a 	mov	r2,r5
8112abfc:	e1bfff15 	stw	r6,-4(fp)
8112ac00:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112ac04:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112ac08:	e0bfff17 	ldw	r2,-4(fp)
8112ac0c:	1000021e 	bne	r2,zero,8112ac18 <OSQPendAbort+0x3c>
        return (0);
8112ac10:	0005883a 	mov	r2,zero
8112ac14:	00004906 	br	8112ad3c <OSQPendAbort+0x160>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
8112ac18:	e0bffd17 	ldw	r2,-12(fp)
8112ac1c:	1000051e 	bne	r2,zero,8112ac34 <OSQPendAbort+0x58>
        *perr = OS_ERR_PEVENT_NULL;
8112ac20:	e0bfff17 	ldw	r2,-4(fp)
8112ac24:	00c00104 	movi	r3,4
8112ac28:	10c00005 	stb	r3,0(r2)
        return (0);
8112ac2c:	0005883a 	mov	r2,zero
8112ac30:	00004206 	br	8112ad3c <OSQPendAbort+0x160>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
8112ac34:	e0bffd17 	ldw	r2,-12(fp)
8112ac38:	10800003 	ldbu	r2,0(r2)
8112ac3c:	10803fcc 	andi	r2,r2,255
8112ac40:	108000a0 	cmpeqi	r2,r2,2
8112ac44:	1000051e 	bne	r2,zero,8112ac5c <OSQPendAbort+0x80>
        *perr = OS_ERR_EVENT_TYPE;
8112ac48:	e0bfff17 	ldw	r2,-4(fp)
8112ac4c:	00c00044 	movi	r3,1
8112ac50:	10c00005 	stb	r3,0(r2)
        return (0);
8112ac54:	0005883a 	mov	r2,zero
8112ac58:	00003806 	br	8112ad3c <OSQPendAbort+0x160>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112ac5c:	0005303a 	rdctl	r2,status
8112ac60:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112ac64:	e0fffc17 	ldw	r3,-16(fp)
8112ac68:	00bfff84 	movi	r2,-2
8112ac6c:	1884703a 	and	r2,r3,r2
8112ac70:	1001703a 	wrctl	status,r2
  
  return context;
8112ac74:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112ac78:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
8112ac7c:	e0bffd17 	ldw	r2,-12(fp)
8112ac80:	10800283 	ldbu	r2,10(r2)
8112ac84:	10803fcc 	andi	r2,r2,255
8112ac88:	10002526 	beq	r2,zero,8112ad20 <OSQPendAbort+0x144>
        nbr_tasks = 0;
8112ac8c:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
8112ac90:	e0bffe03 	ldbu	r2,-8(fp)
8112ac94:	10800060 	cmpeqi	r2,r2,1
8112ac98:	10000e26 	beq	r2,zero,8112acd4 <OSQPendAbort+0xf8>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
8112ac9c:	00000806 	br	8112acc0 <OSQPendAbort+0xe4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
8112aca0:	01c00084 	movi	r7,2
8112aca4:	01800104 	movi	r6,4
8112aca8:	000b883a 	mov	r5,zero
8112acac:	e13ffd17 	ldw	r4,-12(fp)
8112acb0:	1125ed40 	call	81125ed4 <OS_EventTaskRdy>
                     nbr_tasks++;
8112acb4:	e0bff803 	ldbu	r2,-32(fp)
8112acb8:	10800044 	addi	r2,r2,1
8112acbc:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
8112acc0:	e0bffd17 	ldw	r2,-12(fp)
8112acc4:	10800283 	ldbu	r2,10(r2)
8112acc8:	10803fcc 	andi	r2,r2,255
8112accc:	103ff41e 	bne	r2,zero,8112aca0 <__reset+0xfb10aca0>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
8112acd0:	00000906 	br	8112acf8 <OSQPendAbort+0x11c>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
8112acd4:	01c00084 	movi	r7,2
8112acd8:	01800104 	movi	r6,4
8112acdc:	000b883a 	mov	r5,zero
8112ace0:	e13ffd17 	ldw	r4,-12(fp)
8112ace4:	1125ed40 	call	81125ed4 <OS_EventTaskRdy>
                 nbr_tasks++;
8112ace8:	e0bff803 	ldbu	r2,-32(fp)
8112acec:	10800044 	addi	r2,r2,1
8112acf0:	e0bff805 	stb	r2,-32(fp)
                 break;
8112acf4:	0001883a 	nop
8112acf8:	e0bff917 	ldw	r2,-28(fp)
8112acfc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112ad00:	e0bffa17 	ldw	r2,-24(fp)
8112ad04:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
8112ad08:	11269900 	call	81126990 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
8112ad0c:	e0bfff17 	ldw	r2,-4(fp)
8112ad10:	00c00384 	movi	r3,14
8112ad14:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
8112ad18:	e0bff803 	ldbu	r2,-32(fp)
8112ad1c:	00000706 	br	8112ad3c <OSQPendAbort+0x160>
8112ad20:	e0bff917 	ldw	r2,-28(fp)
8112ad24:	e0bffb15 	stw	r2,-20(fp)
8112ad28:	e0bffb17 	ldw	r2,-20(fp)
8112ad2c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112ad30:	e0bfff17 	ldw	r2,-4(fp)
8112ad34:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
8112ad38:	0005883a 	mov	r2,zero
}
8112ad3c:	e037883a 	mov	sp,fp
8112ad40:	dfc00117 	ldw	ra,4(sp)
8112ad44:	df000017 	ldw	fp,0(sp)
8112ad48:	dec00204 	addi	sp,sp,8
8112ad4c:	f800283a 	ret

8112ad50 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
8112ad50:	defff604 	addi	sp,sp,-40
8112ad54:	de00012e 	bgeu	sp,et,8112ad5c <OSQPost+0xc>
8112ad58:	003b68fa 	trap	3
8112ad5c:	dfc00915 	stw	ra,36(sp)
8112ad60:	df000815 	stw	fp,32(sp)
8112ad64:	df000804 	addi	fp,sp,32
8112ad68:	e13ffe15 	stw	r4,-8(fp)
8112ad6c:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
8112ad70:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
8112ad74:	e0bffe17 	ldw	r2,-8(fp)
8112ad78:	1000021e 	bne	r2,zero,8112ad84 <OSQPost+0x34>
        return (OS_ERR_PEVENT_NULL);
8112ad7c:	00800104 	movi	r2,4
8112ad80:	00004a06 	br	8112aeac <OSQPost+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
8112ad84:	e0bffe17 	ldw	r2,-8(fp)
8112ad88:	10800003 	ldbu	r2,0(r2)
8112ad8c:	10803fcc 	andi	r2,r2,255
8112ad90:	108000a0 	cmpeqi	r2,r2,2
8112ad94:	1000021e 	bne	r2,zero,8112ada0 <OSQPost+0x50>
        return (OS_ERR_EVENT_TYPE);
8112ad98:	00800044 	movi	r2,1
8112ad9c:	00004306 	br	8112aeac <OSQPost+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112ada0:	0005303a 	rdctl	r2,status
8112ada4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112ada8:	e0fffd17 	ldw	r3,-12(fp)
8112adac:	00bfff84 	movi	r2,-2
8112adb0:	1884703a 	and	r2,r3,r2
8112adb4:	1001703a 	wrctl	status,r2
  
  return context;
8112adb8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8112adbc:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
8112adc0:	e0bffe17 	ldw	r2,-8(fp)
8112adc4:	10800283 	ldbu	r2,10(r2)
8112adc8:	10803fcc 	andi	r2,r2,255
8112adcc:	10000c26 	beq	r2,zero,8112ae00 <OSQPost+0xb0>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
8112add0:	000f883a 	mov	r7,zero
8112add4:	01800104 	movi	r6,4
8112add8:	e17fff17 	ldw	r5,-4(fp)
8112addc:	e13ffe17 	ldw	r4,-8(fp)
8112ade0:	1125ed40 	call	81125ed4 <OS_EventTaskRdy>
8112ade4:	e0bff817 	ldw	r2,-32(fp)
8112ade8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112adec:	e0bff917 	ldw	r2,-28(fp)
8112adf0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
8112adf4:	11269900 	call	81126990 <OS_Sched>
        return (OS_ERR_NONE);
8112adf8:	0005883a 	mov	r2,zero
8112adfc:	00002b06 	br	8112aeac <OSQPost+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
8112ae00:	e0bffe17 	ldw	r2,-8(fp)
8112ae04:	10800117 	ldw	r2,4(r2)
8112ae08:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
8112ae0c:	e0bffb17 	ldw	r2,-20(fp)
8112ae10:	10c0058b 	ldhu	r3,22(r2)
8112ae14:	e0bffb17 	ldw	r2,-20(fp)
8112ae18:	1080050b 	ldhu	r2,20(r2)
8112ae1c:	18ffffcc 	andi	r3,r3,65535
8112ae20:	10bfffcc 	andi	r2,r2,65535
8112ae24:	18800636 	bltu	r3,r2,8112ae40 <OSQPost+0xf0>
8112ae28:	e0bff817 	ldw	r2,-32(fp)
8112ae2c:	e0bffa15 	stw	r2,-24(fp)
8112ae30:	e0bffa17 	ldw	r2,-24(fp)
8112ae34:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
8112ae38:	00800784 	movi	r2,30
8112ae3c:	00001b06 	br	8112aeac <OSQPost+0x15c>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
8112ae40:	e0bffb17 	ldw	r2,-20(fp)
8112ae44:	10800317 	ldw	r2,12(r2)
8112ae48:	11000104 	addi	r4,r2,4
8112ae4c:	e0fffb17 	ldw	r3,-20(fp)
8112ae50:	19000315 	stw	r4,12(r3)
8112ae54:	e0ffff17 	ldw	r3,-4(fp)
8112ae58:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
8112ae5c:	e0bffb17 	ldw	r2,-20(fp)
8112ae60:	1080058b 	ldhu	r2,22(r2)
8112ae64:	10800044 	addi	r2,r2,1
8112ae68:	1007883a 	mov	r3,r2
8112ae6c:	e0bffb17 	ldw	r2,-20(fp)
8112ae70:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
8112ae74:	e0bffb17 	ldw	r2,-20(fp)
8112ae78:	10c00317 	ldw	r3,12(r2)
8112ae7c:	e0bffb17 	ldw	r2,-20(fp)
8112ae80:	10800217 	ldw	r2,8(r2)
8112ae84:	1880041e 	bne	r3,r2,8112ae98 <OSQPost+0x148>
        pq->OSQIn = pq->OSQStart;
8112ae88:	e0bffb17 	ldw	r2,-20(fp)
8112ae8c:	10c00117 	ldw	r3,4(r2)
8112ae90:	e0bffb17 	ldw	r2,-20(fp)
8112ae94:	10c00315 	stw	r3,12(r2)
8112ae98:	e0bff817 	ldw	r2,-32(fp)
8112ae9c:	e0bffc15 	stw	r2,-16(fp)
8112aea0:	e0bffc17 	ldw	r2,-16(fp)
8112aea4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112aea8:	0005883a 	mov	r2,zero
}
8112aeac:	e037883a 	mov	sp,fp
8112aeb0:	dfc00117 	ldw	ra,4(sp)
8112aeb4:	df000017 	ldw	fp,0(sp)
8112aeb8:	dec00204 	addi	sp,sp,8
8112aebc:	f800283a 	ret

8112aec0 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
8112aec0:	defff604 	addi	sp,sp,-40
8112aec4:	de00012e 	bgeu	sp,et,8112aecc <OSQPostFront+0xc>
8112aec8:	003b68fa 	trap	3
8112aecc:	dfc00915 	stw	ra,36(sp)
8112aed0:	df000815 	stw	fp,32(sp)
8112aed4:	df000804 	addi	fp,sp,32
8112aed8:	e13ffe15 	stw	r4,-8(fp)
8112aedc:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112aee0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8112aee4:	e0bffe17 	ldw	r2,-8(fp)
8112aee8:	1000021e 	bne	r2,zero,8112aef4 <OSQPostFront+0x34>
        return (OS_ERR_PEVENT_NULL);
8112aeec:	00800104 	movi	r2,4
8112aef0:	00004c06 	br	8112b024 <OSQPostFront+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
8112aef4:	e0bffe17 	ldw	r2,-8(fp)
8112aef8:	10800003 	ldbu	r2,0(r2)
8112aefc:	10803fcc 	andi	r2,r2,255
8112af00:	108000a0 	cmpeqi	r2,r2,2
8112af04:	1000021e 	bne	r2,zero,8112af10 <OSQPostFront+0x50>
        return (OS_ERR_EVENT_TYPE);
8112af08:	00800044 	movi	r2,1
8112af0c:	00004506 	br	8112b024 <OSQPostFront+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112af10:	0005303a 	rdctl	r2,status
8112af14:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112af18:	e0fffd17 	ldw	r3,-12(fp)
8112af1c:	00bfff84 	movi	r2,-2
8112af20:	1884703a 	and	r2,r3,r2
8112af24:	1001703a 	wrctl	status,r2
  
  return context;
8112af28:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8112af2c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
8112af30:	e0bffe17 	ldw	r2,-8(fp)
8112af34:	10800283 	ldbu	r2,10(r2)
8112af38:	10803fcc 	andi	r2,r2,255
8112af3c:	10000c26 	beq	r2,zero,8112af70 <OSQPostFront+0xb0>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
8112af40:	000f883a 	mov	r7,zero
8112af44:	01800104 	movi	r6,4
8112af48:	e17fff17 	ldw	r5,-4(fp)
8112af4c:	e13ffe17 	ldw	r4,-8(fp)
8112af50:	1125ed40 	call	81125ed4 <OS_EventTaskRdy>
8112af54:	e0bff817 	ldw	r2,-32(fp)
8112af58:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112af5c:	e0bff917 	ldw	r2,-28(fp)
8112af60:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
8112af64:	11269900 	call	81126990 <OS_Sched>
        return (OS_ERR_NONE);
8112af68:	0005883a 	mov	r2,zero
8112af6c:	00002d06 	br	8112b024 <OSQPostFront+0x164>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
8112af70:	e0bffe17 	ldw	r2,-8(fp)
8112af74:	10800117 	ldw	r2,4(r2)
8112af78:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
8112af7c:	e0bffb17 	ldw	r2,-20(fp)
8112af80:	10c0058b 	ldhu	r3,22(r2)
8112af84:	e0bffb17 	ldw	r2,-20(fp)
8112af88:	1080050b 	ldhu	r2,20(r2)
8112af8c:	18ffffcc 	andi	r3,r3,65535
8112af90:	10bfffcc 	andi	r2,r2,65535
8112af94:	18800636 	bltu	r3,r2,8112afb0 <OSQPostFront+0xf0>
8112af98:	e0bff817 	ldw	r2,-32(fp)
8112af9c:	e0bffa15 	stw	r2,-24(fp)
8112afa0:	e0bffa17 	ldw	r2,-24(fp)
8112afa4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
8112afa8:	00800784 	movi	r2,30
8112afac:	00001d06 	br	8112b024 <OSQPostFront+0x164>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
8112afb0:	e0bffb17 	ldw	r2,-20(fp)
8112afb4:	10c00417 	ldw	r3,16(r2)
8112afb8:	e0bffb17 	ldw	r2,-20(fp)
8112afbc:	10800117 	ldw	r2,4(r2)
8112afc0:	1880041e 	bne	r3,r2,8112afd4 <OSQPostFront+0x114>
        pq->OSQOut = pq->OSQEnd;
8112afc4:	e0bffb17 	ldw	r2,-20(fp)
8112afc8:	10c00217 	ldw	r3,8(r2)
8112afcc:	e0bffb17 	ldw	r2,-20(fp)
8112afd0:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
8112afd4:	e0bffb17 	ldw	r2,-20(fp)
8112afd8:	10800417 	ldw	r2,16(r2)
8112afdc:	10ffff04 	addi	r3,r2,-4
8112afe0:	e0bffb17 	ldw	r2,-20(fp)
8112afe4:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
8112afe8:	e0bffb17 	ldw	r2,-20(fp)
8112afec:	10800417 	ldw	r2,16(r2)
8112aff0:	e0ffff17 	ldw	r3,-4(fp)
8112aff4:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
8112aff8:	e0bffb17 	ldw	r2,-20(fp)
8112affc:	1080058b 	ldhu	r2,22(r2)
8112b000:	10800044 	addi	r2,r2,1
8112b004:	1007883a 	mov	r3,r2
8112b008:	e0bffb17 	ldw	r2,-20(fp)
8112b00c:	10c0058d 	sth	r3,22(r2)
8112b010:	e0bff817 	ldw	r2,-32(fp)
8112b014:	e0bffc15 	stw	r2,-16(fp)
8112b018:	e0bffc17 	ldw	r2,-16(fp)
8112b01c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112b020:	0005883a 	mov	r2,zero
}
8112b024:	e037883a 	mov	sp,fp
8112b028:	dfc00117 	ldw	ra,4(sp)
8112b02c:	df000017 	ldw	fp,0(sp)
8112b030:	dec00204 	addi	sp,sp,8
8112b034:	f800283a 	ret

8112b038 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
8112b038:	defff504 	addi	sp,sp,-44
8112b03c:	de00012e 	bgeu	sp,et,8112b044 <OSQPostOpt+0xc>
8112b040:	003b68fa 	trap	3
8112b044:	dfc00a15 	stw	ra,40(sp)
8112b048:	df000915 	stw	fp,36(sp)
8112b04c:	df000904 	addi	fp,sp,36
8112b050:	e13ffd15 	stw	r4,-12(fp)
8112b054:	e17ffe15 	stw	r5,-8(fp)
8112b058:	3005883a 	mov	r2,r6
8112b05c:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112b060:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8112b064:	e0bffd17 	ldw	r2,-12(fp)
8112b068:	1000021e 	bne	r2,zero,8112b074 <OSQPostOpt+0x3c>
        return (OS_ERR_PEVENT_NULL);
8112b06c:	00800104 	movi	r2,4
8112b070:	00007106 	br	8112b238 <OSQPostOpt+0x200>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
8112b074:	e0bffd17 	ldw	r2,-12(fp)
8112b078:	10800003 	ldbu	r2,0(r2)
8112b07c:	10803fcc 	andi	r2,r2,255
8112b080:	108000a0 	cmpeqi	r2,r2,2
8112b084:	1000021e 	bne	r2,zero,8112b090 <OSQPostOpt+0x58>
        return (OS_ERR_EVENT_TYPE);
8112b088:	00800044 	movi	r2,1
8112b08c:	00006a06 	br	8112b238 <OSQPostOpt+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112b090:	0005303a 	rdctl	r2,status
8112b094:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112b098:	e0fffc17 	ldw	r3,-16(fp)
8112b09c:	00bfff84 	movi	r2,-2
8112b0a0:	1884703a 	and	r2,r3,r2
8112b0a4:	1001703a 	wrctl	status,r2
  
  return context;
8112b0a8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112b0ac:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
8112b0b0:	e0bffd17 	ldw	r2,-12(fp)
8112b0b4:	10800283 	ldbu	r2,10(r2)
8112b0b8:	10803fcc 	andi	r2,r2,255
8112b0bc:	10001d26 	beq	r2,zero,8112b134 <OSQPostOpt+0xfc>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
8112b0c0:	e0bfff03 	ldbu	r2,-4(fp)
8112b0c4:	1080004c 	andi	r2,r2,1
8112b0c8:	10000b26 	beq	r2,zero,8112b0f8 <OSQPostOpt+0xc0>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
8112b0cc:	00000506 	br	8112b0e4 <OSQPostOpt+0xac>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
8112b0d0:	000f883a 	mov	r7,zero
8112b0d4:	01800104 	movi	r6,4
8112b0d8:	e17ffe17 	ldw	r5,-8(fp)
8112b0dc:	e13ffd17 	ldw	r4,-12(fp)
8112b0e0:	1125ed40 	call	81125ed4 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
8112b0e4:	e0bffd17 	ldw	r2,-12(fp)
8112b0e8:	10800283 	ldbu	r2,10(r2)
8112b0ec:	10803fcc 	andi	r2,r2,255
8112b0f0:	103ff71e 	bne	r2,zero,8112b0d0 <__reset+0xfb10b0d0>
8112b0f4:	00000506 	br	8112b10c <OSQPostOpt+0xd4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
8112b0f8:	000f883a 	mov	r7,zero
8112b0fc:	01800104 	movi	r6,4
8112b100:	e17ffe17 	ldw	r5,-8(fp)
8112b104:	e13ffd17 	ldw	r4,-12(fp)
8112b108:	1125ed40 	call	81125ed4 <OS_EventTaskRdy>
8112b10c:	e0bff717 	ldw	r2,-36(fp)
8112b110:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112b114:	e0bff817 	ldw	r2,-32(fp)
8112b118:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
8112b11c:	e0bfff03 	ldbu	r2,-4(fp)
8112b120:	1080010c 	andi	r2,r2,4
8112b124:	1000011e 	bne	r2,zero,8112b12c <OSQPostOpt+0xf4>
            OS_Sched();                               /* Find highest priority task ready to run       */
8112b128:	11269900 	call	81126990 <OS_Sched>
        }
        return (OS_ERR_NONE);
8112b12c:	0005883a 	mov	r2,zero
8112b130:	00004106 	br	8112b238 <OSQPostOpt+0x200>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
8112b134:	e0bffd17 	ldw	r2,-12(fp)
8112b138:	10800117 	ldw	r2,4(r2)
8112b13c:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
8112b140:	e0bffa17 	ldw	r2,-24(fp)
8112b144:	10c0058b 	ldhu	r3,22(r2)
8112b148:	e0bffa17 	ldw	r2,-24(fp)
8112b14c:	1080050b 	ldhu	r2,20(r2)
8112b150:	18ffffcc 	andi	r3,r3,65535
8112b154:	10bfffcc 	andi	r2,r2,65535
8112b158:	18800636 	bltu	r3,r2,8112b174 <OSQPostOpt+0x13c>
8112b15c:	e0bff717 	ldw	r2,-36(fp)
8112b160:	e0bff915 	stw	r2,-28(fp)
8112b164:	e0bff917 	ldw	r2,-28(fp)
8112b168:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
8112b16c:	00800784 	movi	r2,30
8112b170:	00003106 	br	8112b238 <OSQPostOpt+0x200>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
8112b174:	e0bfff03 	ldbu	r2,-4(fp)
8112b178:	1080008c 	andi	r2,r2,2
8112b17c:	10001326 	beq	r2,zero,8112b1cc <OSQPostOpt+0x194>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
8112b180:	e0bffa17 	ldw	r2,-24(fp)
8112b184:	10c00417 	ldw	r3,16(r2)
8112b188:	e0bffa17 	ldw	r2,-24(fp)
8112b18c:	10800117 	ldw	r2,4(r2)
8112b190:	1880041e 	bne	r3,r2,8112b1a4 <OSQPostOpt+0x16c>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
8112b194:	e0bffa17 	ldw	r2,-24(fp)
8112b198:	10c00217 	ldw	r3,8(r2)
8112b19c:	e0bffa17 	ldw	r2,-24(fp)
8112b1a0:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
8112b1a4:	e0bffa17 	ldw	r2,-24(fp)
8112b1a8:	10800417 	ldw	r2,16(r2)
8112b1ac:	10ffff04 	addi	r3,r2,-4
8112b1b0:	e0bffa17 	ldw	r2,-24(fp)
8112b1b4:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
8112b1b8:	e0bffa17 	ldw	r2,-24(fp)
8112b1bc:	10800417 	ldw	r2,16(r2)
8112b1c0:	e0fffe17 	ldw	r3,-8(fp)
8112b1c4:	10c00015 	stw	r3,0(r2)
8112b1c8:	00001006 	br	8112b20c <OSQPostOpt+0x1d4>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
8112b1cc:	e0bffa17 	ldw	r2,-24(fp)
8112b1d0:	10800317 	ldw	r2,12(r2)
8112b1d4:	11000104 	addi	r4,r2,4
8112b1d8:	e0fffa17 	ldw	r3,-24(fp)
8112b1dc:	19000315 	stw	r4,12(r3)
8112b1e0:	e0fffe17 	ldw	r3,-8(fp)
8112b1e4:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
8112b1e8:	e0bffa17 	ldw	r2,-24(fp)
8112b1ec:	10c00317 	ldw	r3,12(r2)
8112b1f0:	e0bffa17 	ldw	r2,-24(fp)
8112b1f4:	10800217 	ldw	r2,8(r2)
8112b1f8:	1880041e 	bne	r3,r2,8112b20c <OSQPostOpt+0x1d4>
            pq->OSQIn = pq->OSQStart;
8112b1fc:	e0bffa17 	ldw	r2,-24(fp)
8112b200:	10c00117 	ldw	r3,4(r2)
8112b204:	e0bffa17 	ldw	r2,-24(fp)
8112b208:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
8112b20c:	e0bffa17 	ldw	r2,-24(fp)
8112b210:	1080058b 	ldhu	r2,22(r2)
8112b214:	10800044 	addi	r2,r2,1
8112b218:	1007883a 	mov	r3,r2
8112b21c:	e0bffa17 	ldw	r2,-24(fp)
8112b220:	10c0058d 	sth	r3,22(r2)
8112b224:	e0bff717 	ldw	r2,-36(fp)
8112b228:	e0bffb15 	stw	r2,-20(fp)
8112b22c:	e0bffb17 	ldw	r2,-20(fp)
8112b230:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112b234:	0005883a 	mov	r2,zero
}
8112b238:	e037883a 	mov	sp,fp
8112b23c:	dfc00117 	ldw	ra,4(sp)
8112b240:	df000017 	ldw	fp,0(sp)
8112b244:	dec00204 	addi	sp,sp,8
8112b248:	f800283a 	ret

8112b24c <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
8112b24c:	defff604 	addi	sp,sp,-40
8112b250:	de00012e 	bgeu	sp,et,8112b258 <OSQQuery+0xc>
8112b254:	003b68fa 	trap	3
8112b258:	df000915 	stw	fp,36(sp)
8112b25c:	df000904 	addi	fp,sp,36
8112b260:	e13ffe15 	stw	r4,-8(fp)
8112b264:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
8112b268:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
8112b26c:	e0bffe17 	ldw	r2,-8(fp)
8112b270:	1000021e 	bne	r2,zero,8112b27c <OSQQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
8112b274:	00800104 	movi	r2,4
8112b278:	00004906 	br	8112b3a0 <OSQQuery+0x154>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
8112b27c:	e0bfff17 	ldw	r2,-4(fp)
8112b280:	1000021e 	bne	r2,zero,8112b28c <OSQQuery+0x40>
        return (OS_ERR_PDATA_NULL);
8112b284:	00800244 	movi	r2,9
8112b288:	00004506 	br	8112b3a0 <OSQQuery+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
8112b28c:	e0bffe17 	ldw	r2,-8(fp)
8112b290:	10800003 	ldbu	r2,0(r2)
8112b294:	10803fcc 	andi	r2,r2,255
8112b298:	108000a0 	cmpeqi	r2,r2,2
8112b29c:	1000021e 	bne	r2,zero,8112b2a8 <OSQQuery+0x5c>
        return (OS_ERR_EVENT_TYPE);
8112b2a0:	00800044 	movi	r2,1
8112b2a4:	00003e06 	br	8112b3a0 <OSQQuery+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112b2a8:	0005303a 	rdctl	r2,status
8112b2ac:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112b2b0:	e0fffd17 	ldw	r3,-12(fp)
8112b2b4:	00bfff84 	movi	r2,-2
8112b2b8:	1884703a 	and	r2,r3,r2
8112b2bc:	1001703a 	wrctl	status,r2
  
  return context;
8112b2c0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8112b2c4:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
8112b2c8:	e0bffe17 	ldw	r2,-8(fp)
8112b2cc:	10c00283 	ldbu	r3,10(r2)
8112b2d0:	e0bfff17 	ldw	r2,-4(fp)
8112b2d4:	10c00385 	stb	r3,14(r2)
    psrc                 = &pevent->OSEventTbl[0];
8112b2d8:	e0bffe17 	ldw	r2,-8(fp)
8112b2dc:	108002c4 	addi	r2,r2,11
8112b2e0:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
8112b2e4:	e0bfff17 	ldw	r2,-4(fp)
8112b2e8:	10800204 	addi	r2,r2,8
8112b2ec:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
8112b2f0:	e03ff705 	stb	zero,-36(fp)
8112b2f4:	00000b06 	br	8112b324 <OSQQuery+0xd8>
        *pdest++ = *psrc++;
8112b2f8:	e0bff917 	ldw	r2,-28(fp)
8112b2fc:	10c00044 	addi	r3,r2,1
8112b300:	e0fff915 	stw	r3,-28(fp)
8112b304:	e0fff817 	ldw	r3,-32(fp)
8112b308:	19000044 	addi	r4,r3,1
8112b30c:	e13ff815 	stw	r4,-32(fp)
8112b310:	18c00003 	ldbu	r3,0(r3)
8112b314:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
8112b318:	e0bff703 	ldbu	r2,-36(fp)
8112b31c:	10800044 	addi	r2,r2,1
8112b320:	e0bff705 	stb	r2,-36(fp)
8112b324:	e0bff703 	ldbu	r2,-36(fp)
8112b328:	108001b0 	cmpltui	r2,r2,6
8112b32c:	103ff21e 	bne	r2,zero,8112b2f8 <__reset+0xfb10b2f8>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
8112b330:	e0bffe17 	ldw	r2,-8(fp)
8112b334:	10800117 	ldw	r2,4(r2)
8112b338:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
8112b33c:	e0bffc17 	ldw	r2,-16(fp)
8112b340:	1080058b 	ldhu	r2,22(r2)
8112b344:	10bfffcc 	andi	r2,r2,65535
8112b348:	10000626 	beq	r2,zero,8112b364 <OSQQuery+0x118>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
8112b34c:	e0bffc17 	ldw	r2,-16(fp)
8112b350:	10800417 	ldw	r2,16(r2)
8112b354:	10c00017 	ldw	r3,0(r2)
8112b358:	e0bfff17 	ldw	r2,-4(fp)
8112b35c:	10c00015 	stw	r3,0(r2)
8112b360:	00000206 	br	8112b36c <OSQQuery+0x120>
    } else {
        p_q_data->OSMsg = (void *)0;
8112b364:	e0bfff17 	ldw	r2,-4(fp)
8112b368:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
8112b36c:	e0bffc17 	ldw	r2,-16(fp)
8112b370:	10c0058b 	ldhu	r3,22(r2)
8112b374:	e0bfff17 	ldw	r2,-4(fp)
8112b378:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
8112b37c:	e0bffc17 	ldw	r2,-16(fp)
8112b380:	10c0050b 	ldhu	r3,20(r2)
8112b384:	e0bfff17 	ldw	r2,-4(fp)
8112b388:	10c0018d 	sth	r3,6(r2)
8112b38c:	e0bffa17 	ldw	r2,-24(fp)
8112b390:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112b394:	e0bffb17 	ldw	r2,-20(fp)
8112b398:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112b39c:	0005883a 	mov	r2,zero
}
8112b3a0:	e037883a 	mov	sp,fp
8112b3a4:	df000017 	ldw	fp,0(sp)
8112b3a8:	dec00104 	addi	sp,sp,4
8112b3ac:	f800283a 	ret

8112b3b0 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
8112b3b0:	defffb04 	addi	sp,sp,-20
8112b3b4:	de00012e 	bgeu	sp,et,8112b3bc <OS_QInit+0xc>
8112b3b8:	003b68fa 	trap	3
8112b3bc:	dfc00415 	stw	ra,16(sp)
8112b3c0:	df000315 	stw	fp,12(sp)
8112b3c4:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
8112b3c8:	01407804 	movi	r5,480
8112b3cc:	012045b4 	movhi	r4,33046
8112b3d0:	21099a04 	addi	r4,r4,9832
8112b3d4:	11268c40 	call	811268c4 <OS_MemClr>
    pq1 = &OSQTbl[0];
8112b3d8:	00a045b4 	movhi	r2,33046
8112b3dc:	10899a04 	addi	r2,r2,9832
8112b3e0:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
8112b3e4:	00a045b4 	movhi	r2,33046
8112b3e8:	1089a004 	addi	r2,r2,9856
8112b3ec:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
8112b3f0:	e03ffd0d 	sth	zero,-12(fp)
8112b3f4:	00000c06 	br	8112b428 <OS_QInit+0x78>
        pq1->OSQPtr = pq2;
8112b3f8:	e0bffe17 	ldw	r2,-8(fp)
8112b3fc:	e0ffff17 	ldw	r3,-4(fp)
8112b400:	10c00015 	stw	r3,0(r2)
        pq1++;
8112b404:	e0bffe17 	ldw	r2,-8(fp)
8112b408:	10800604 	addi	r2,r2,24
8112b40c:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
8112b410:	e0bfff17 	ldw	r2,-4(fp)
8112b414:	10800604 	addi	r2,r2,24
8112b418:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
8112b41c:	e0bffd0b 	ldhu	r2,-12(fp)
8112b420:	10800044 	addi	r2,r2,1
8112b424:	e0bffd0d 	sth	r2,-12(fp)
8112b428:	e0bffd0b 	ldhu	r2,-12(fp)
8112b42c:	108004f0 	cmpltui	r2,r2,19
8112b430:	103ff11e 	bne	r2,zero,8112b3f8 <__reset+0xfb10b3f8>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
8112b434:	e0bffe17 	ldw	r2,-8(fp)
8112b438:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
8112b43c:	00a045b4 	movhi	r2,33046
8112b440:	10899a04 	addi	r2,r2,9832
8112b444:	d0a08b15 	stw	r2,-32212(gp)
#endif
}
8112b448:	0001883a 	nop
8112b44c:	e037883a 	mov	sp,fp
8112b450:	dfc00117 	ldw	ra,4(sp)
8112b454:	df000017 	ldw	fp,0(sp)
8112b458:	dec00204 	addi	sp,sp,8
8112b45c:	f800283a 	ret

8112b460 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
8112b460:	defffa04 	addi	sp,sp,-24
8112b464:	de00012e 	bgeu	sp,et,8112b46c <OSSemAccept+0xc>
8112b468:	003b68fa 	trap	3
8112b46c:	df000515 	stw	fp,20(sp)
8112b470:	df000504 	addi	fp,sp,20
8112b474:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112b478:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8112b47c:	e0bfff17 	ldw	r2,-4(fp)
8112b480:	1000021e 	bne	r2,zero,8112b48c <OSSemAccept+0x2c>
        return (0);
8112b484:	0005883a 	mov	r2,zero
8112b488:	00001f06 	br	8112b508 <OSSemAccept+0xa8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
8112b48c:	e0bfff17 	ldw	r2,-4(fp)
8112b490:	10800003 	ldbu	r2,0(r2)
8112b494:	10803fcc 	andi	r2,r2,255
8112b498:	108000e0 	cmpeqi	r2,r2,3
8112b49c:	1000021e 	bne	r2,zero,8112b4a8 <OSSemAccept+0x48>
        return (0);
8112b4a0:	0005883a 	mov	r2,zero
8112b4a4:	00001806 	br	8112b508 <OSSemAccept+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112b4a8:	0005303a 	rdctl	r2,status
8112b4ac:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112b4b0:	e0fffe17 	ldw	r3,-8(fp)
8112b4b4:	00bfff84 	movi	r2,-2
8112b4b8:	1884703a 	and	r2,r3,r2
8112b4bc:	1001703a 	wrctl	status,r2
  
  return context;
8112b4c0:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
8112b4c4:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
8112b4c8:	e0bfff17 	ldw	r2,-4(fp)
8112b4cc:	1080020b 	ldhu	r2,8(r2)
8112b4d0:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
8112b4d4:	e0bffd0b 	ldhu	r2,-12(fp)
8112b4d8:	10000626 	beq	r2,zero,8112b4f4 <OSSemAccept+0x94>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
8112b4dc:	e0bfff17 	ldw	r2,-4(fp)
8112b4e0:	1080020b 	ldhu	r2,8(r2)
8112b4e4:	10bfffc4 	addi	r2,r2,-1
8112b4e8:	1007883a 	mov	r3,r2
8112b4ec:	e0bfff17 	ldw	r2,-4(fp)
8112b4f0:	10c0020d 	sth	r3,8(r2)
8112b4f4:	e0bffb17 	ldw	r2,-20(fp)
8112b4f8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112b4fc:	e0bffc17 	ldw	r2,-16(fp)
8112b500:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
8112b504:	e0bffd0b 	ldhu	r2,-12(fp)
}
8112b508:	e037883a 	mov	sp,fp
8112b50c:	df000017 	ldw	fp,0(sp)
8112b510:	dec00104 	addi	sp,sp,4
8112b514:	f800283a 	ret

8112b518 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
8112b518:	defff904 	addi	sp,sp,-28
8112b51c:	de00012e 	bgeu	sp,et,8112b524 <OSSemCreate+0xc>
8112b520:	003b68fa 	trap	3
8112b524:	dfc00615 	stw	ra,24(sp)
8112b528:	df000515 	stw	fp,20(sp)
8112b52c:	df000504 	addi	fp,sp,20
8112b530:	2005883a 	mov	r2,r4
8112b534:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112b538:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112b53c:	d0a08f03 	ldbu	r2,-32196(gp)
8112b540:	10803fcc 	andi	r2,r2,255
8112b544:	10000226 	beq	r2,zero,8112b550 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
8112b548:	0005883a 	mov	r2,zero
8112b54c:	00002506 	br	8112b5e4 <OSSemCreate+0xcc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112b550:	0005303a 	rdctl	r2,status
8112b554:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112b558:	e0fffe17 	ldw	r3,-8(fp)
8112b55c:	00bfff84 	movi	r2,-2
8112b560:	1884703a 	and	r2,r3,r2
8112b564:	1001703a 	wrctl	status,r2
  
  return context;
8112b568:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
8112b56c:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
8112b570:	d0a08e17 	ldw	r2,-32200(gp)
8112b574:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
8112b578:	d0a08e17 	ldw	r2,-32200(gp)
8112b57c:	10000326 	beq	r2,zero,8112b58c <OSSemCreate+0x74>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
8112b580:	d0a08e17 	ldw	r2,-32200(gp)
8112b584:	10800117 	ldw	r2,4(r2)
8112b588:	d0a08e15 	stw	r2,-32200(gp)
8112b58c:	e0bffb17 	ldw	r2,-20(fp)
8112b590:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112b594:	e0bffc17 	ldw	r2,-16(fp)
8112b598:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
8112b59c:	e0bffd17 	ldw	r2,-12(fp)
8112b5a0:	10000f26 	beq	r2,zero,8112b5e0 <OSSemCreate+0xc8>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
8112b5a4:	e0bffd17 	ldw	r2,-12(fp)
8112b5a8:	00c000c4 	movi	r3,3
8112b5ac:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
8112b5b0:	e0bffd17 	ldw	r2,-12(fp)
8112b5b4:	e0ffff0b 	ldhu	r3,-4(fp)
8112b5b8:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
8112b5bc:	e0bffd17 	ldw	r2,-12(fp)
8112b5c0:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
8112b5c4:	e0bffd17 	ldw	r2,-12(fp)
8112b5c8:	00c00fc4 	movi	r3,63
8112b5cc:	10c00445 	stb	r3,17(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
8112b5d0:	e0bffd17 	ldw	r2,-12(fp)
8112b5d4:	10000485 	stb	zero,18(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
8112b5d8:	e13ffd17 	ldw	r4,-12(fp)
8112b5dc:	11264ac0 	call	811264ac <OS_EventWaitListInit>
    }
    return (pevent);
8112b5e0:	e0bffd17 	ldw	r2,-12(fp)
}
8112b5e4:	e037883a 	mov	sp,fp
8112b5e8:	dfc00117 	ldw	ra,4(sp)
8112b5ec:	df000017 	ldw	fp,0(sp)
8112b5f0:	dec00204 	addi	sp,sp,8
8112b5f4:	f800283a 	ret

8112b5f8 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
8112b5f8:	defff304 	addi	sp,sp,-52
8112b5fc:	de00012e 	bgeu	sp,et,8112b604 <OSSemDel+0xc>
8112b600:	003b68fa 	trap	3
8112b604:	dfc00c15 	stw	ra,48(sp)
8112b608:	df000b15 	stw	fp,44(sp)
8112b60c:	df000b04 	addi	fp,sp,44
8112b610:	e13ffd15 	stw	r4,-12(fp)
8112b614:	2805883a 	mov	r2,r5
8112b618:	e1bfff15 	stw	r6,-4(fp)
8112b61c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112b620:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112b624:	e0bfff17 	ldw	r2,-4(fp)
8112b628:	1000021e 	bne	r2,zero,8112b634 <OSSemDel+0x3c>
        return (pevent);
8112b62c:	e0bffd17 	ldw	r2,-12(fp)
8112b630:	00007e06 	br	8112b82c <OSSemDel+0x234>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
8112b634:	e0bffd17 	ldw	r2,-12(fp)
8112b638:	1000051e 	bne	r2,zero,8112b650 <OSSemDel+0x58>
        *perr = OS_ERR_PEVENT_NULL;
8112b63c:	e0bfff17 	ldw	r2,-4(fp)
8112b640:	00c00104 	movi	r3,4
8112b644:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112b648:	e0bffd17 	ldw	r2,-12(fp)
8112b64c:	00007706 	br	8112b82c <OSSemDel+0x234>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
8112b650:	e0bffd17 	ldw	r2,-12(fp)
8112b654:	10800003 	ldbu	r2,0(r2)
8112b658:	10803fcc 	andi	r2,r2,255
8112b65c:	108000e0 	cmpeqi	r2,r2,3
8112b660:	1000051e 	bne	r2,zero,8112b678 <OSSemDel+0x80>
        *perr = OS_ERR_EVENT_TYPE;
8112b664:	e0bfff17 	ldw	r2,-4(fp)
8112b668:	00c00044 	movi	r3,1
8112b66c:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112b670:	e0bffd17 	ldw	r2,-12(fp)
8112b674:	00006d06 	br	8112b82c <OSSemDel+0x234>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112b678:	d0a08f03 	ldbu	r2,-32196(gp)
8112b67c:	10803fcc 	andi	r2,r2,255
8112b680:	10000526 	beq	r2,zero,8112b698 <OSSemDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
8112b684:	e0bfff17 	ldw	r2,-4(fp)
8112b688:	00c003c4 	movi	r3,15
8112b68c:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112b690:	e0bffd17 	ldw	r2,-12(fp)
8112b694:	00006506 	br	8112b82c <OSSemDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112b698:	0005303a 	rdctl	r2,status
8112b69c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112b6a0:	e0fffc17 	ldw	r3,-16(fp)
8112b6a4:	00bfff84 	movi	r2,-2
8112b6a8:	1884703a 	and	r2,r3,r2
8112b6ac:	1001703a 	wrctl	status,r2
  
  return context;
8112b6b0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112b6b4:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
8112b6b8:	e0bffd17 	ldw	r2,-12(fp)
8112b6bc:	10800283 	ldbu	r2,10(r2)
8112b6c0:	10803fcc 	andi	r2,r2,255
8112b6c4:	10000326 	beq	r2,zero,8112b6d4 <OSSemDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
8112b6c8:	00800044 	movi	r2,1
8112b6cc:	e0bff505 	stb	r2,-44(fp)
8112b6d0:	00000106 	br	8112b6d8 <OSSemDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
8112b6d4:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
8112b6d8:	e0bffe03 	ldbu	r2,-8(fp)
8112b6dc:	10000326 	beq	r2,zero,8112b6ec <OSSemDel+0xf4>
8112b6e0:	10800060 	cmpeqi	r2,r2,1
8112b6e4:	1000281e 	bne	r2,zero,8112b788 <OSSemDel+0x190>
8112b6e8:	00004506 	br	8112b800 <OSSemDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
8112b6ec:	e0bff503 	ldbu	r2,-44(fp)
8112b6f0:	1000161e 	bne	r2,zero,8112b74c <OSSemDel+0x154>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
8112b6f4:	e0bffd17 	ldw	r2,-12(fp)
8112b6f8:	00c00fc4 	movi	r3,63
8112b6fc:	10c00445 	stb	r3,17(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
8112b700:	e0bffd17 	ldw	r2,-12(fp)
8112b704:	10000485 	stb	zero,18(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
8112b708:	e0bffd17 	ldw	r2,-12(fp)
8112b70c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
8112b710:	d0e08e17 	ldw	r3,-32200(gp)
8112b714:	e0bffd17 	ldw	r2,-12(fp)
8112b718:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
8112b71c:	e0bffd17 	ldw	r2,-12(fp)
8112b720:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
8112b724:	e0bffd17 	ldw	r2,-12(fp)
8112b728:	d0a08e15 	stw	r2,-32200(gp)
8112b72c:	e0bff717 	ldw	r2,-36(fp)
8112b730:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112b734:	e0bff817 	ldw	r2,-32(fp)
8112b738:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
8112b73c:	e0bfff17 	ldw	r2,-4(fp)
8112b740:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
8112b744:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
8112b748:	00003706 	br	8112b828 <OSSemDel+0x230>
8112b74c:	e0bff717 	ldw	r2,-36(fp)
8112b750:	e0bff915 	stw	r2,-28(fp)
8112b754:	e0bff917 	ldw	r2,-28(fp)
8112b758:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
8112b75c:	e0bfff17 	ldw	r2,-4(fp)
8112b760:	00c01244 	movi	r3,73
8112b764:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
8112b768:	e0bffd17 	ldw	r2,-12(fp)
8112b76c:	e0bff615 	stw	r2,-40(fp)
             }
             break;
8112b770:	00002d06 	br	8112b828 <OSSemDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
8112b774:	000f883a 	mov	r7,zero
8112b778:	01800044 	movi	r6,1
8112b77c:	000b883a 	mov	r5,zero
8112b780:	e13ffd17 	ldw	r4,-12(fp)
8112b784:	1125ed40 	call	81125ed4 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
8112b788:	e0bffd17 	ldw	r2,-12(fp)
8112b78c:	10800283 	ldbu	r2,10(r2)
8112b790:	10803fcc 	andi	r2,r2,255
8112b794:	103ff71e 	bne	r2,zero,8112b774 <__reset+0xfb10b774>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
8112b798:	e0bffd17 	ldw	r2,-12(fp)
8112b79c:	00c00fc4 	movi	r3,63
8112b7a0:	10c00445 	stb	r3,17(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
8112b7a4:	e0bffd17 	ldw	r2,-12(fp)
8112b7a8:	10000485 	stb	zero,18(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
8112b7ac:	e0bffd17 	ldw	r2,-12(fp)
8112b7b0:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
8112b7b4:	d0e08e17 	ldw	r3,-32200(gp)
8112b7b8:	e0bffd17 	ldw	r2,-12(fp)
8112b7bc:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
8112b7c0:	e0bffd17 	ldw	r2,-12(fp)
8112b7c4:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
8112b7c8:	e0bffd17 	ldw	r2,-12(fp)
8112b7cc:	d0a08e15 	stw	r2,-32200(gp)
8112b7d0:	e0bff717 	ldw	r2,-36(fp)
8112b7d4:	e0bffa15 	stw	r2,-24(fp)
8112b7d8:	e0bffa17 	ldw	r2,-24(fp)
8112b7dc:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
8112b7e0:	e0bff503 	ldbu	r2,-44(fp)
8112b7e4:	10800058 	cmpnei	r2,r2,1
8112b7e8:	1000011e 	bne	r2,zero,8112b7f0 <OSSemDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
8112b7ec:	11269900 	call	81126990 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
8112b7f0:	e0bfff17 	ldw	r2,-4(fp)
8112b7f4:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
8112b7f8:	e03ff615 	stw	zero,-40(fp)
             break;
8112b7fc:	00000a06 	br	8112b828 <OSSemDel+0x230>
8112b800:	e0bff717 	ldw	r2,-36(fp)
8112b804:	e0bffb15 	stw	r2,-20(fp)
8112b808:	e0bffb17 	ldw	r2,-20(fp)
8112b80c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
8112b810:	e0bfff17 	ldw	r2,-4(fp)
8112b814:	00c001c4 	movi	r3,7
8112b818:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
8112b81c:	e0bffd17 	ldw	r2,-12(fp)
8112b820:	e0bff615 	stw	r2,-40(fp)
             break;
8112b824:	0001883a 	nop
    }
    return (pevent_return);
8112b828:	e0bff617 	ldw	r2,-40(fp)
}
8112b82c:	e037883a 	mov	sp,fp
8112b830:	dfc00117 	ldw	ra,4(sp)
8112b834:	df000017 	ldw	fp,0(sp)
8112b838:	dec00204 	addi	sp,sp,8
8112b83c:	f800283a 	ret

8112b840 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
8112b840:	defff504 	addi	sp,sp,-44
8112b844:	de00012e 	bgeu	sp,et,8112b84c <OSSemPend+0xc>
8112b848:	003b68fa 	trap	3
8112b84c:	dfc00a15 	stw	ra,40(sp)
8112b850:	df000915 	stw	fp,36(sp)
8112b854:	df000904 	addi	fp,sp,36
8112b858:	e13ffd15 	stw	r4,-12(fp)
8112b85c:	2805883a 	mov	r2,r5
8112b860:	e1bfff15 	stw	r6,-4(fp)
8112b864:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112b868:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
8112b86c:	e0bfff17 	ldw	r2,-4(fp)
8112b870:	10007226 	beq	r2,zero,8112ba3c <OSSemPend+0x1fc>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8112b874:	e0bffd17 	ldw	r2,-12(fp)
8112b878:	1000041e 	bne	r2,zero,8112b88c <OSSemPend+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
8112b87c:	e0bfff17 	ldw	r2,-4(fp)
8112b880:	00c00104 	movi	r3,4
8112b884:	10c00005 	stb	r3,0(r2)
        return;
8112b888:	00006d06 	br	8112ba40 <OSSemPend+0x200>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
8112b88c:	e0bffd17 	ldw	r2,-12(fp)
8112b890:	10800003 	ldbu	r2,0(r2)
8112b894:	10803fcc 	andi	r2,r2,255
8112b898:	108000e0 	cmpeqi	r2,r2,3
8112b89c:	1000041e 	bne	r2,zero,8112b8b0 <OSSemPend+0x70>
        *perr = OS_ERR_EVENT_TYPE;
8112b8a0:	e0bfff17 	ldw	r2,-4(fp)
8112b8a4:	00c00044 	movi	r3,1
8112b8a8:	10c00005 	stb	r3,0(r2)
        return;
8112b8ac:	00006406 	br	8112ba40 <OSSemPend+0x200>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
8112b8b0:	d0a08f03 	ldbu	r2,-32196(gp)
8112b8b4:	10803fcc 	andi	r2,r2,255
8112b8b8:	10000426 	beq	r2,zero,8112b8cc <OSSemPend+0x8c>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
8112b8bc:	e0bfff17 	ldw	r2,-4(fp)
8112b8c0:	00c00084 	movi	r3,2
8112b8c4:	10c00005 	stb	r3,0(r2)
        return;
8112b8c8:	00005d06 	br	8112ba40 <OSSemPend+0x200>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
8112b8cc:	d0a07d03 	ldbu	r2,-32268(gp)
8112b8d0:	10803fcc 	andi	r2,r2,255
8112b8d4:	10000426 	beq	r2,zero,8112b8e8 <OSSemPend+0xa8>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
8112b8d8:	e0bfff17 	ldw	r2,-4(fp)
8112b8dc:	00c00344 	movi	r3,13
8112b8e0:	10c00005 	stb	r3,0(r2)
        return;
8112b8e4:	00005606 	br	8112ba40 <OSSemPend+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112b8e8:	0005303a 	rdctl	r2,status
8112b8ec:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112b8f0:	e0fffc17 	ldw	r3,-16(fp)
8112b8f4:	00bfff84 	movi	r2,-2
8112b8f8:	1884703a 	and	r2,r3,r2
8112b8fc:	1001703a 	wrctl	status,r2
  
  return context;
8112b900:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112b904:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
8112b908:	e0bffd17 	ldw	r2,-12(fp)
8112b90c:	1080020b 	ldhu	r2,8(r2)
8112b910:	10bfffcc 	andi	r2,r2,65535
8112b914:	10000d26 	beq	r2,zero,8112b94c <OSSemPend+0x10c>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
8112b918:	e0bffd17 	ldw	r2,-12(fp)
8112b91c:	1080020b 	ldhu	r2,8(r2)
8112b920:	10bfffc4 	addi	r2,r2,-1
8112b924:	1007883a 	mov	r3,r2
8112b928:	e0bffd17 	ldw	r2,-12(fp)
8112b92c:	10c0020d 	sth	r3,8(r2)
8112b930:	e0bff717 	ldw	r2,-36(fp)
8112b934:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112b938:	e0bff817 	ldw	r2,-32(fp)
8112b93c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
8112b940:	e0bfff17 	ldw	r2,-4(fp)
8112b944:	10000005 	stb	zero,0(r2)
        return;
8112b948:	00003d06 	br	8112ba40 <OSSemPend+0x200>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
8112b94c:	d0a09017 	ldw	r2,-32192(gp)
8112b950:	d0e09017 	ldw	r3,-32192(gp)
8112b954:	18c00c03 	ldbu	r3,48(r3)
8112b958:	18c00054 	ori	r3,r3,1
8112b95c:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
8112b960:	d0a09017 	ldw	r2,-32192(gp)
8112b964:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
8112b968:	d0a09017 	ldw	r2,-32192(gp)
8112b96c:	e0fffe0b 	ldhu	r3,-8(fp)
8112b970:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
8112b974:	e13ffd17 	ldw	r4,-12(fp)
8112b978:	11260740 	call	81126074 <OS_EventTaskWait>
8112b97c:	e0bff717 	ldw	r2,-36(fp)
8112b980:	e0bffb15 	stw	r2,-20(fp)
8112b984:	e0bffb17 	ldw	r2,-20(fp)
8112b988:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
8112b98c:	11269900 	call	81126990 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112b990:	0005303a 	rdctl	r2,status
8112b994:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112b998:	e0fff917 	ldw	r3,-28(fp)
8112b99c:	00bfff84 	movi	r2,-2
8112b9a0:	1884703a 	and	r2,r3,r2
8112b9a4:	1001703a 	wrctl	status,r2
  
  return context;
8112b9a8:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
8112b9ac:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
8112b9b0:	d0a09017 	ldw	r2,-32192(gp)
8112b9b4:	10800c43 	ldbu	r2,49(r2)
8112b9b8:	10803fcc 	andi	r2,r2,255
8112b9bc:	10000326 	beq	r2,zero,8112b9cc <OSSemPend+0x18c>
8112b9c0:	108000a0 	cmpeqi	r2,r2,2
8112b9c4:	1000041e 	bne	r2,zero,8112b9d8 <OSSemPend+0x198>
8112b9c8:	00000706 	br	8112b9e8 <OSSemPend+0x1a8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
8112b9cc:	e0bfff17 	ldw	r2,-4(fp)
8112b9d0:	10000005 	stb	zero,0(r2)
             break;
8112b9d4:	00000c06 	br	8112ba08 <OSSemPend+0x1c8>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
8112b9d8:	e0bfff17 	ldw	r2,-4(fp)
8112b9dc:	00c00384 	movi	r3,14
8112b9e0:	10c00005 	stb	r3,0(r2)
             break;
8112b9e4:	00000806 	br	8112ba08 <OSSemPend+0x1c8>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
8112b9e8:	d0a09017 	ldw	r2,-32192(gp)
8112b9ec:	e17ffd17 	ldw	r5,-12(fp)
8112b9f0:	1009883a 	mov	r4,r2
8112b9f4:	11262e40 	call	811262e4 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
8112b9f8:	e0bfff17 	ldw	r2,-4(fp)
8112b9fc:	00c00284 	movi	r3,10
8112ba00:	10c00005 	stb	r3,0(r2)
             break;
8112ba04:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
8112ba08:	d0a09017 	ldw	r2,-32192(gp)
8112ba0c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
8112ba10:	d0a09017 	ldw	r2,-32192(gp)
8112ba14:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
8112ba18:	d0a09017 	ldw	r2,-32192(gp)
8112ba1c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
8112ba20:	d0a09017 	ldw	r2,-32192(gp)
8112ba24:	10000815 	stw	zero,32(r2)
8112ba28:	e0bff717 	ldw	r2,-36(fp)
8112ba2c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112ba30:	e0bffa17 	ldw	r2,-24(fp)
8112ba34:	1001703a 	wrctl	status,r2
8112ba38:	00000106 	br	8112ba40 <OSSemPend+0x200>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
8112ba3c:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
8112ba40:	e037883a 	mov	sp,fp
8112ba44:	dfc00117 	ldw	ra,4(sp)
8112ba48:	df000017 	ldw	fp,0(sp)
8112ba4c:	dec00204 	addi	sp,sp,8
8112ba50:	f800283a 	ret

8112ba54 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
8112ba54:	defff604 	addi	sp,sp,-40
8112ba58:	de00012e 	bgeu	sp,et,8112ba60 <OSSemPendAbort+0xc>
8112ba5c:	003b68fa 	trap	3
8112ba60:	dfc00915 	stw	ra,36(sp)
8112ba64:	df000815 	stw	fp,32(sp)
8112ba68:	df000804 	addi	fp,sp,32
8112ba6c:	e13ffd15 	stw	r4,-12(fp)
8112ba70:	2805883a 	mov	r2,r5
8112ba74:	e1bfff15 	stw	r6,-4(fp)
8112ba78:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112ba7c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
8112ba80:	e0bfff17 	ldw	r2,-4(fp)
8112ba84:	1000021e 	bne	r2,zero,8112ba90 <OSSemPendAbort+0x3c>
        return (0);
8112ba88:	0005883a 	mov	r2,zero
8112ba8c:	00004906 	br	8112bbb4 <OSSemPendAbort+0x160>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8112ba90:	e0bffd17 	ldw	r2,-12(fp)
8112ba94:	1000051e 	bne	r2,zero,8112baac <OSSemPendAbort+0x58>
        *perr = OS_ERR_PEVENT_NULL;
8112ba98:	e0bfff17 	ldw	r2,-4(fp)
8112ba9c:	00c00104 	movi	r3,4
8112baa0:	10c00005 	stb	r3,0(r2)
        return (0);
8112baa4:	0005883a 	mov	r2,zero
8112baa8:	00004206 	br	8112bbb4 <OSSemPendAbort+0x160>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
8112baac:	e0bffd17 	ldw	r2,-12(fp)
8112bab0:	10800003 	ldbu	r2,0(r2)
8112bab4:	10803fcc 	andi	r2,r2,255
8112bab8:	108000e0 	cmpeqi	r2,r2,3
8112babc:	1000051e 	bne	r2,zero,8112bad4 <OSSemPendAbort+0x80>
        *perr = OS_ERR_EVENT_TYPE;
8112bac0:	e0bfff17 	ldw	r2,-4(fp)
8112bac4:	00c00044 	movi	r3,1
8112bac8:	10c00005 	stb	r3,0(r2)
        return (0);
8112bacc:	0005883a 	mov	r2,zero
8112bad0:	00003806 	br	8112bbb4 <OSSemPendAbort+0x160>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112bad4:	0005303a 	rdctl	r2,status
8112bad8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112badc:	e0fffc17 	ldw	r3,-16(fp)
8112bae0:	00bfff84 	movi	r2,-2
8112bae4:	1884703a 	and	r2,r3,r2
8112bae8:	1001703a 	wrctl	status,r2
  
  return context;
8112baec:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112baf0:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
8112baf4:	e0bffd17 	ldw	r2,-12(fp)
8112baf8:	10800283 	ldbu	r2,10(r2)
8112bafc:	10803fcc 	andi	r2,r2,255
8112bb00:	10002526 	beq	r2,zero,8112bb98 <OSSemPendAbort+0x144>
        nbr_tasks = 0;
8112bb04:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
8112bb08:	e0bffe03 	ldbu	r2,-8(fp)
8112bb0c:	10800060 	cmpeqi	r2,r2,1
8112bb10:	10000e26 	beq	r2,zero,8112bb4c <OSSemPendAbort+0xf8>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
8112bb14:	00000806 	br	8112bb38 <OSSemPendAbort+0xe4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
8112bb18:	01c00084 	movi	r7,2
8112bb1c:	01800044 	movi	r6,1
8112bb20:	000b883a 	mov	r5,zero
8112bb24:	e13ffd17 	ldw	r4,-12(fp)
8112bb28:	1125ed40 	call	81125ed4 <OS_EventTaskRdy>
                     nbr_tasks++;
8112bb2c:	e0bff803 	ldbu	r2,-32(fp)
8112bb30:	10800044 	addi	r2,r2,1
8112bb34:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
8112bb38:	e0bffd17 	ldw	r2,-12(fp)
8112bb3c:	10800283 	ldbu	r2,10(r2)
8112bb40:	10803fcc 	andi	r2,r2,255
8112bb44:	103ff41e 	bne	r2,zero,8112bb18 <__reset+0xfb10bb18>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
8112bb48:	00000906 	br	8112bb70 <OSSemPendAbort+0x11c>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
8112bb4c:	01c00084 	movi	r7,2
8112bb50:	01800044 	movi	r6,1
8112bb54:	000b883a 	mov	r5,zero
8112bb58:	e13ffd17 	ldw	r4,-12(fp)
8112bb5c:	1125ed40 	call	81125ed4 <OS_EventTaskRdy>
                 nbr_tasks++;
8112bb60:	e0bff803 	ldbu	r2,-32(fp)
8112bb64:	10800044 	addi	r2,r2,1
8112bb68:	e0bff805 	stb	r2,-32(fp)
                 break;
8112bb6c:	0001883a 	nop
8112bb70:	e0bff917 	ldw	r2,-28(fp)
8112bb74:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112bb78:	e0bffa17 	ldw	r2,-24(fp)
8112bb7c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
8112bb80:	11269900 	call	81126990 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
8112bb84:	e0bfff17 	ldw	r2,-4(fp)
8112bb88:	00c00384 	movi	r3,14
8112bb8c:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
8112bb90:	e0bff803 	ldbu	r2,-32(fp)
8112bb94:	00000706 	br	8112bbb4 <OSSemPendAbort+0x160>
8112bb98:	e0bff917 	ldw	r2,-28(fp)
8112bb9c:	e0bffb15 	stw	r2,-20(fp)
8112bba0:	e0bffb17 	ldw	r2,-20(fp)
8112bba4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112bba8:	e0bfff17 	ldw	r2,-4(fp)
8112bbac:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
8112bbb0:	0005883a 	mov	r2,zero
}
8112bbb4:	e037883a 	mov	sp,fp
8112bbb8:	dfc00117 	ldw	ra,4(sp)
8112bbbc:	df000017 	ldw	fp,0(sp)
8112bbc0:	dec00204 	addi	sp,sp,8
8112bbc4:	f800283a 	ret

8112bbc8 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
8112bbc8:	defff804 	addi	sp,sp,-32
8112bbcc:	de00012e 	bgeu	sp,et,8112bbd4 <OSSemPost+0xc>
8112bbd0:	003b68fa 	trap	3
8112bbd4:	dfc00715 	stw	ra,28(sp)
8112bbd8:	df000615 	stw	fp,24(sp)
8112bbdc:	df000604 	addi	fp,sp,24
8112bbe0:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112bbe4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8112bbe8:	e0bfff17 	ldw	r2,-4(fp)
8112bbec:	1000021e 	bne	r2,zero,8112bbf8 <OSSemPost+0x30>
        return (OS_ERR_PEVENT_NULL);
8112bbf0:	00800104 	movi	r2,4
8112bbf4:	00003506 	br	8112bccc <OSSemPost+0x104>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
8112bbf8:	e0bfff17 	ldw	r2,-4(fp)
8112bbfc:	10800003 	ldbu	r2,0(r2)
8112bc00:	10803fcc 	andi	r2,r2,255
8112bc04:	108000e0 	cmpeqi	r2,r2,3
8112bc08:	1000021e 	bne	r2,zero,8112bc14 <OSSemPost+0x4c>
        return (OS_ERR_EVENT_TYPE);
8112bc0c:	00800044 	movi	r2,1
8112bc10:	00002e06 	br	8112bccc <OSSemPost+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112bc14:	0005303a 	rdctl	r2,status
8112bc18:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112bc1c:	e0fffe17 	ldw	r3,-8(fp)
8112bc20:	00bfff84 	movi	r2,-2
8112bc24:	1884703a 	and	r2,r3,r2
8112bc28:	1001703a 	wrctl	status,r2
  
  return context;
8112bc2c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
8112bc30:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
8112bc34:	e0bfff17 	ldw	r2,-4(fp)
8112bc38:	10800283 	ldbu	r2,10(r2)
8112bc3c:	10803fcc 	andi	r2,r2,255
8112bc40:	10000c26 	beq	r2,zero,8112bc74 <OSSemPost+0xac>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
8112bc44:	000f883a 	mov	r7,zero
8112bc48:	01800044 	movi	r6,1
8112bc4c:	000b883a 	mov	r5,zero
8112bc50:	e13fff17 	ldw	r4,-4(fp)
8112bc54:	1125ed40 	call	81125ed4 <OS_EventTaskRdy>
8112bc58:	e0bffa17 	ldw	r2,-24(fp)
8112bc5c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112bc60:	e0bffb17 	ldw	r2,-20(fp)
8112bc64:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
8112bc68:	11269900 	call	81126990 <OS_Sched>
        return (OS_ERR_NONE);
8112bc6c:	0005883a 	mov	r2,zero
8112bc70:	00001606 	br	8112bccc <OSSemPost+0x104>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
8112bc74:	e0bfff17 	ldw	r2,-4(fp)
8112bc78:	1080020b 	ldhu	r2,8(r2)
8112bc7c:	10ffffcc 	andi	r3,r2,65535
8112bc80:	00bfffd4 	movui	r2,65535
8112bc84:	18800c26 	beq	r3,r2,8112bcb8 <OSSemPost+0xf0>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
8112bc88:	e0bfff17 	ldw	r2,-4(fp)
8112bc8c:	1080020b 	ldhu	r2,8(r2)
8112bc90:	10800044 	addi	r2,r2,1
8112bc94:	1007883a 	mov	r3,r2
8112bc98:	e0bfff17 	ldw	r2,-4(fp)
8112bc9c:	10c0020d 	sth	r3,8(r2)
8112bca0:	e0bffa17 	ldw	r2,-24(fp)
8112bca4:	e0bffc15 	stw	r2,-16(fp)
8112bca8:	e0bffc17 	ldw	r2,-16(fp)
8112bcac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
8112bcb0:	0005883a 	mov	r2,zero
8112bcb4:	00000506 	br	8112bccc <OSSemPost+0x104>
8112bcb8:	e0bffa17 	ldw	r2,-24(fp)
8112bcbc:	e0bffd15 	stw	r2,-12(fp)
8112bcc0:	e0bffd17 	ldw	r2,-12(fp)
8112bcc4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
8112bcc8:	00800c84 	movi	r2,50
}
8112bccc:	e037883a 	mov	sp,fp
8112bcd0:	dfc00117 	ldw	ra,4(sp)
8112bcd4:	df000017 	ldw	fp,0(sp)
8112bcd8:	dec00204 	addi	sp,sp,8
8112bcdc:	f800283a 	ret

8112bce0 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
8112bce0:	defff704 	addi	sp,sp,-36
8112bce4:	de00012e 	bgeu	sp,et,8112bcec <OSSemQuery+0xc>
8112bce8:	003b68fa 	trap	3
8112bcec:	df000815 	stw	fp,32(sp)
8112bcf0:	df000804 	addi	fp,sp,32
8112bcf4:	e13ffe15 	stw	r4,-8(fp)
8112bcf8:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112bcfc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
8112bd00:	e0bffe17 	ldw	r2,-8(fp)
8112bd04:	1000021e 	bne	r2,zero,8112bd10 <OSSemQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
8112bd08:	00800104 	movi	r2,4
8112bd0c:	00003606 	br	8112bde8 <OSSemQuery+0x108>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
8112bd10:	e0bfff17 	ldw	r2,-4(fp)
8112bd14:	1000021e 	bne	r2,zero,8112bd20 <OSSemQuery+0x40>
        return (OS_ERR_PDATA_NULL);
8112bd18:	00800244 	movi	r2,9
8112bd1c:	00003206 	br	8112bde8 <OSSemQuery+0x108>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
8112bd20:	e0bffe17 	ldw	r2,-8(fp)
8112bd24:	10800003 	ldbu	r2,0(r2)
8112bd28:	10803fcc 	andi	r2,r2,255
8112bd2c:	108000e0 	cmpeqi	r2,r2,3
8112bd30:	1000021e 	bne	r2,zero,8112bd3c <OSSemQuery+0x5c>
        return (OS_ERR_EVENT_TYPE);
8112bd34:	00800044 	movi	r2,1
8112bd38:	00002b06 	br	8112bde8 <OSSemQuery+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112bd3c:	0005303a 	rdctl	r2,status
8112bd40:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112bd44:	e0fffd17 	ldw	r3,-12(fp)
8112bd48:	00bfff84 	movi	r2,-2
8112bd4c:	1884703a 	and	r2,r3,r2
8112bd50:	1001703a 	wrctl	status,r2
  
  return context;
8112bd54:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8112bd58:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
8112bd5c:	e0bffe17 	ldw	r2,-8(fp)
8112bd60:	10c00283 	ldbu	r3,10(r2)
8112bd64:	e0bfff17 	ldw	r2,-4(fp)
8112bd68:	10c00205 	stb	r3,8(r2)
    psrc                   = &pevent->OSEventTbl[0];
8112bd6c:	e0bffe17 	ldw	r2,-8(fp)
8112bd70:	108002c4 	addi	r2,r2,11
8112bd74:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
8112bd78:	e0bfff17 	ldw	r2,-4(fp)
8112bd7c:	10800084 	addi	r2,r2,2
8112bd80:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
8112bd84:	e03ffa05 	stb	zero,-24(fp)
8112bd88:	00000b06 	br	8112bdb8 <OSSemQuery+0xd8>
        *pdest++ = *psrc++;
8112bd8c:	e0bff917 	ldw	r2,-28(fp)
8112bd90:	10c00044 	addi	r3,r2,1
8112bd94:	e0fff915 	stw	r3,-28(fp)
8112bd98:	e0fff817 	ldw	r3,-32(fp)
8112bd9c:	19000044 	addi	r4,r3,1
8112bda0:	e13ff815 	stw	r4,-32(fp)
8112bda4:	18c00003 	ldbu	r3,0(r3)
8112bda8:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
8112bdac:	e0bffa03 	ldbu	r2,-24(fp)
8112bdb0:	10800044 	addi	r2,r2,1
8112bdb4:	e0bffa05 	stb	r2,-24(fp)
8112bdb8:	e0bffa03 	ldbu	r2,-24(fp)
8112bdbc:	108001b0 	cmpltui	r2,r2,6
8112bdc0:	103ff21e 	bne	r2,zero,8112bd8c <__reset+0xfb10bd8c>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
8112bdc4:	e0bffe17 	ldw	r2,-8(fp)
8112bdc8:	10c0020b 	ldhu	r3,8(r2)
8112bdcc:	e0bfff17 	ldw	r2,-4(fp)
8112bdd0:	10c0000d 	sth	r3,0(r2)
8112bdd4:	e0bffb17 	ldw	r2,-20(fp)
8112bdd8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112bddc:	e0bffc17 	ldw	r2,-16(fp)
8112bde0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112bde4:	0005883a 	mov	r2,zero
}
8112bde8:	e037883a 	mov	sp,fp
8112bdec:	df000017 	ldw	fp,0(sp)
8112bdf0:	dec00104 	addi	sp,sp,4
8112bdf4:	f800283a 	ret

8112bdf8 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
8112bdf8:	defff904 	addi	sp,sp,-28
8112bdfc:	de00012e 	bgeu	sp,et,8112be04 <OSSemSet+0xc>
8112be00:	003b68fa 	trap	3
8112be04:	df000615 	stw	fp,24(sp)
8112be08:	df000604 	addi	fp,sp,24
8112be0c:	e13ffd15 	stw	r4,-12(fp)
8112be10:	2805883a 	mov	r2,r5
8112be14:	e1bfff15 	stw	r6,-4(fp)
8112be18:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112be1c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
8112be20:	e0bfff17 	ldw	r2,-4(fp)
8112be24:	10003126 	beq	r2,zero,8112beec <OSSemSet+0xf4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8112be28:	e0bffd17 	ldw	r2,-12(fp)
8112be2c:	1000041e 	bne	r2,zero,8112be40 <OSSemSet+0x48>
        *perr = OS_ERR_PEVENT_NULL;
8112be30:	e0bfff17 	ldw	r2,-4(fp)
8112be34:	00c00104 	movi	r3,4
8112be38:	10c00005 	stb	r3,0(r2)
        return;
8112be3c:	00002c06 	br	8112bef0 <OSSemSet+0xf8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
8112be40:	e0bffd17 	ldw	r2,-12(fp)
8112be44:	10800003 	ldbu	r2,0(r2)
8112be48:	10803fcc 	andi	r2,r2,255
8112be4c:	108000e0 	cmpeqi	r2,r2,3
8112be50:	1000041e 	bne	r2,zero,8112be64 <OSSemSet+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
8112be54:	e0bfff17 	ldw	r2,-4(fp)
8112be58:	00c00044 	movi	r3,1
8112be5c:	10c00005 	stb	r3,0(r2)
        return;
8112be60:	00002306 	br	8112bef0 <OSSemSet+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112be64:	0005303a 	rdctl	r2,status
8112be68:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112be6c:	e0fffc17 	ldw	r3,-16(fp)
8112be70:	00bfff84 	movi	r2,-2
8112be74:	1884703a 	and	r2,r3,r2
8112be78:	1001703a 	wrctl	status,r2
  
  return context;
8112be7c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112be80:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
8112be84:	e0bfff17 	ldw	r2,-4(fp)
8112be88:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
8112be8c:	e0bffd17 	ldw	r2,-12(fp)
8112be90:	1080020b 	ldhu	r2,8(r2)
8112be94:	10bfffcc 	andi	r2,r2,65535
8112be98:	10000426 	beq	r2,zero,8112beac <OSSemSet+0xb4>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
8112be9c:	e0bffd17 	ldw	r2,-12(fp)
8112bea0:	e0fffe0b 	ldhu	r3,-8(fp)
8112bea4:	10c0020d 	sth	r3,8(r2)
8112bea8:	00000b06 	br	8112bed8 <OSSemSet+0xe0>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
8112beac:	e0bffd17 	ldw	r2,-12(fp)
8112beb0:	10800283 	ldbu	r2,10(r2)
8112beb4:	10803fcc 	andi	r2,r2,255
8112beb8:	1000041e 	bne	r2,zero,8112becc <OSSemSet+0xd4>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
8112bebc:	e0bffd17 	ldw	r2,-12(fp)
8112bec0:	e0fffe0b 	ldhu	r3,-8(fp)
8112bec4:	10c0020d 	sth	r3,8(r2)
8112bec8:	00000306 	br	8112bed8 <OSSemSet+0xe0>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
8112becc:	e0bfff17 	ldw	r2,-4(fp)
8112bed0:	00c01244 	movi	r3,73
8112bed4:	10c00005 	stb	r3,0(r2)
8112bed8:	e0bffa17 	ldw	r2,-24(fp)
8112bedc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112bee0:	e0bffb17 	ldw	r2,-20(fp)
8112bee4:	1001703a 	wrctl	status,r2
8112bee8:	00000106 	br	8112bef0 <OSSemSet+0xf8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
8112beec:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
8112bef0:	e037883a 	mov	sp,fp
8112bef4:	df000017 	ldw	fp,0(sp)
8112bef8:	dec00104 	addi	sp,sp,4
8112befc:	f800283a 	ret

8112bf00 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
8112bf00:	defff104 	addi	sp,sp,-60
8112bf04:	de00012e 	bgeu	sp,et,8112bf0c <OSTaskChangePrio+0xc>
8112bf08:	003b68fa 	trap	3
8112bf0c:	dfc00e15 	stw	ra,56(sp)
8112bf10:	df000d15 	stw	fp,52(sp)
8112bf14:	df000d04 	addi	fp,sp,52
8112bf18:	2007883a 	mov	r3,r4
8112bf1c:	2805883a 	mov	r2,r5
8112bf20:	e0fffe05 	stb	r3,-8(fp)
8112bf24:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
8112bf28:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
8112bf2c:	e0bffe03 	ldbu	r2,-8(fp)
8112bf30:	10800a30 	cmpltui	r2,r2,40
8112bf34:	1000051e 	bne	r2,zero,8112bf4c <OSTaskChangePrio+0x4c>
        if (oldprio != OS_PRIO_SELF) {
8112bf38:	e0bffe03 	ldbu	r2,-8(fp)
8112bf3c:	10803fe0 	cmpeqi	r2,r2,255
8112bf40:	1000021e 	bne	r2,zero,8112bf4c <OSTaskChangePrio+0x4c>
            return (OS_ERR_PRIO_INVALID);
8112bf44:	00800a84 	movi	r2,42
8112bf48:	00012606 	br	8112c3e4 <OSTaskChangePrio+0x4e4>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
8112bf4c:	e0bfff03 	ldbu	r2,-4(fp)
8112bf50:	10800a30 	cmpltui	r2,r2,40
8112bf54:	1000021e 	bne	r2,zero,8112bf60 <OSTaskChangePrio+0x60>
        return (OS_ERR_PRIO_INVALID);
8112bf58:	00800a84 	movi	r2,42
8112bf5c:	00012106 	br	8112c3e4 <OSTaskChangePrio+0x4e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112bf60:	0005303a 	rdctl	r2,status
8112bf64:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112bf68:	e0fffd17 	ldw	r3,-12(fp)
8112bf6c:	00bfff84 	movi	r2,-2
8112bf70:	1884703a 	and	r2,r3,r2
8112bf74:	1001703a 	wrctl	status,r2
  
  return context;
8112bf78:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8112bf7c:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
8112bf80:	e0ffff03 	ldbu	r3,-4(fp)
8112bf84:	00a045b4 	movhi	r2,33046
8112bf88:	1094b404 	addi	r2,r2,21200
8112bf8c:	18c7883a 	add	r3,r3,r3
8112bf90:	18c7883a 	add	r3,r3,r3
8112bf94:	10c5883a 	add	r2,r2,r3
8112bf98:	10800017 	ldw	r2,0(r2)
8112bf9c:	10000626 	beq	r2,zero,8112bfb8 <OSTaskChangePrio+0xb8>
8112bfa0:	e0bff517 	ldw	r2,-44(fp)
8112bfa4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112bfa8:	e0bff617 	ldw	r2,-40(fp)
8112bfac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
8112bfb0:	00800a04 	movi	r2,40
8112bfb4:	00010b06 	br	8112c3e4 <OSTaskChangePrio+0x4e4>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
8112bfb8:	e0bffe03 	ldbu	r2,-8(fp)
8112bfbc:	10803fd8 	cmpnei	r2,r2,255
8112bfc0:	1000031e 	bne	r2,zero,8112bfd0 <OSTaskChangePrio+0xd0>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
8112bfc4:	d0a09017 	ldw	r2,-32192(gp)
8112bfc8:	10800c83 	ldbu	r2,50(r2)
8112bfcc:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
8112bfd0:	e0fffe03 	ldbu	r3,-8(fp)
8112bfd4:	00a045b4 	movhi	r2,33046
8112bfd8:	1094b404 	addi	r2,r2,21200
8112bfdc:	18c7883a 	add	r3,r3,r3
8112bfe0:	18c7883a 	add	r3,r3,r3
8112bfe4:	10c5883a 	add	r2,r2,r3
8112bfe8:	10800017 	ldw	r2,0(r2)
8112bfec:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
8112bff0:	e0bff817 	ldw	r2,-32(fp)
8112bff4:	1000061e 	bne	r2,zero,8112c010 <OSTaskChangePrio+0x110>
8112bff8:	e0bff517 	ldw	r2,-44(fp)
8112bffc:	e0bff715 	stw	r2,-36(fp)
8112c000:	e0bff717 	ldw	r2,-36(fp)
8112c004:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
8112c008:	00800a44 	movi	r2,41
8112c00c:	0000f506 	br	8112c3e4 <OSTaskChangePrio+0x4e4>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
8112c010:	e0bff817 	ldw	r2,-32(fp)
8112c014:	10800058 	cmpnei	r2,r2,1
8112c018:	1000061e 	bne	r2,zero,8112c034 <OSTaskChangePrio+0x134>
8112c01c:	e0bff517 	ldw	r2,-44(fp)
8112c020:	e0bff915 	stw	r2,-28(fp)
8112c024:	e0bff917 	ldw	r2,-28(fp)
8112c028:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
8112c02c:	008010c4 	movi	r2,67
8112c030:	0000ec06 	br	8112c3e4 <OSTaskChangePrio+0x4e4>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
8112c034:	e0bfff03 	ldbu	r2,-4(fp)
8112c038:	1004d0fa 	srli	r2,r2,3
8112c03c:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
8112c040:	e0bfff03 	ldbu	r2,-4(fp)
8112c044:	108001cc 	andi	r2,r2,7
8112c048:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
8112c04c:	e0bffb03 	ldbu	r2,-20(fp)
8112c050:	00c00044 	movi	r3,1
8112c054:	1884983a 	sll	r2,r3,r2
8112c058:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
8112c05c:	e0bffb43 	ldbu	r2,-19(fp)
8112c060:	00c00044 	movi	r3,1
8112c064:	1884983a 	sll	r2,r3,r2
8112c068:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
8112c06c:	e0fffe03 	ldbu	r3,-8(fp)
8112c070:	00a045b4 	movhi	r2,33046
8112c074:	1094b404 	addi	r2,r2,21200
8112c078:	18c7883a 	add	r3,r3,r3
8112c07c:	18c7883a 	add	r3,r3,r3
8112c080:	10c5883a 	add	r2,r2,r3
8112c084:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
8112c088:	e0ffff03 	ldbu	r3,-4(fp)
8112c08c:	00a045b4 	movhi	r2,33046
8112c090:	1094b404 	addi	r2,r2,21200
8112c094:	18c7883a 	add	r3,r3,r3
8112c098:	18c7883a 	add	r3,r3,r3
8112c09c:	10c5883a 	add	r2,r2,r3
8112c0a0:	e0fff817 	ldw	r3,-32(fp)
8112c0a4:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
8112c0a8:	e0bff817 	ldw	r2,-32(fp)
8112c0ac:	10800d03 	ldbu	r2,52(r2)
8112c0b0:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
8112c0b4:	e0bff817 	ldw	r2,-32(fp)
8112c0b8:	10800d83 	ldbu	r2,54(r2)
8112c0bc:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
8112c0c0:	e0bff817 	ldw	r2,-32(fp)
8112c0c4:	10800d43 	ldbu	r2,53(r2)
8112c0c8:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
8112c0cc:	e0fffc03 	ldbu	r3,-16(fp)
8112c0d0:	d0a08c44 	addi	r2,gp,-32207
8112c0d4:	1885883a 	add	r2,r3,r2
8112c0d8:	10c00003 	ldbu	r3,0(r2)
8112c0dc:	e0bffc83 	ldbu	r2,-14(fp)
8112c0e0:	1884703a 	and	r2,r3,r2
8112c0e4:	10803fcc 	andi	r2,r2,255
8112c0e8:	10002826 	beq	r2,zero,8112c18c <OSTaskChangePrio+0x28c>
         OSRdyTbl[y_old] &= ~bitx_old;
8112c0ec:	e0fffc03 	ldbu	r3,-16(fp)
8112c0f0:	e13ffc03 	ldbu	r4,-16(fp)
8112c0f4:	d0a08c44 	addi	r2,gp,-32207
8112c0f8:	2085883a 	add	r2,r4,r2
8112c0fc:	10800003 	ldbu	r2,0(r2)
8112c100:	1009883a 	mov	r4,r2
8112c104:	e0bffc83 	ldbu	r2,-14(fp)
8112c108:	0084303a 	nor	r2,zero,r2
8112c10c:	2084703a 	and	r2,r4,r2
8112c110:	1009883a 	mov	r4,r2
8112c114:	d0a08c44 	addi	r2,gp,-32207
8112c118:	1885883a 	add	r2,r3,r2
8112c11c:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
8112c120:	e0fffc03 	ldbu	r3,-16(fp)
8112c124:	d0a08c44 	addi	r2,gp,-32207
8112c128:	1885883a 	add	r2,r3,r2
8112c12c:	10800003 	ldbu	r2,0(r2)
8112c130:	10803fcc 	andi	r2,r2,255
8112c134:	1000061e 	bne	r2,zero,8112c150 <OSTaskChangePrio+0x250>
             OSRdyGrp &= ~bity_old;
8112c138:	e0bffc43 	ldbu	r2,-15(fp)
8112c13c:	0084303a 	nor	r2,zero,r2
8112c140:	1007883a 	mov	r3,r2
8112c144:	d0a08c03 	ldbu	r2,-32208(gp)
8112c148:	1884703a 	and	r2,r3,r2
8112c14c:	d0a08c05 	stb	r2,-32208(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
8112c150:	d0e08c03 	ldbu	r3,-32208(gp)
8112c154:	e0bffb83 	ldbu	r2,-18(fp)
8112c158:	1884b03a 	or	r2,r3,r2
8112c15c:	d0a08c05 	stb	r2,-32208(gp)
         OSRdyTbl[y_new] |= bitx_new;
8112c160:	e0fffb03 	ldbu	r3,-20(fp)
8112c164:	e13ffb03 	ldbu	r4,-20(fp)
8112c168:	d0a08c44 	addi	r2,gp,-32207
8112c16c:	2085883a 	add	r2,r4,r2
8112c170:	11000003 	ldbu	r4,0(r2)
8112c174:	e0bffbc3 	ldbu	r2,-17(fp)
8112c178:	2084b03a 	or	r2,r4,r2
8112c17c:	1009883a 	mov	r4,r2
8112c180:	d0a08c44 	addi	r2,gp,-32207
8112c184:	1885883a 	add	r2,r3,r2
8112c188:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
8112c18c:	e0bff817 	ldw	r2,-32(fp)
8112c190:	10800717 	ldw	r2,28(r2)
8112c194:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
8112c198:	e0bff317 	ldw	r2,-52(fp)
8112c19c:	10003326 	beq	r2,zero,8112c26c <OSTaskChangePrio+0x36c>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
8112c1a0:	e0bffc03 	ldbu	r2,-16(fp)
8112c1a4:	e0fffc03 	ldbu	r3,-16(fp)
8112c1a8:	e13ff317 	ldw	r4,-52(fp)
8112c1ac:	20c7883a 	add	r3,r4,r3
8112c1b0:	18c002c4 	addi	r3,r3,11
8112c1b4:	18c00003 	ldbu	r3,0(r3)
8112c1b8:	1809883a 	mov	r4,r3
8112c1bc:	e0fffc83 	ldbu	r3,-14(fp)
8112c1c0:	00c6303a 	nor	r3,zero,r3
8112c1c4:	20c6703a 	and	r3,r4,r3
8112c1c8:	1809883a 	mov	r4,r3
8112c1cc:	e0fff317 	ldw	r3,-52(fp)
8112c1d0:	1885883a 	add	r2,r3,r2
8112c1d4:	108002c4 	addi	r2,r2,11
8112c1d8:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
8112c1dc:	e0bffc03 	ldbu	r2,-16(fp)
8112c1e0:	e0fff317 	ldw	r3,-52(fp)
8112c1e4:	1885883a 	add	r2,r3,r2
8112c1e8:	108002c4 	addi	r2,r2,11
8112c1ec:	10800003 	ldbu	r2,0(r2)
8112c1f0:	10803fcc 	andi	r2,r2,255
8112c1f4:	1000091e 	bne	r2,zero,8112c21c <OSTaskChangePrio+0x31c>
            pevent->OSEventGrp    &= ~bity_old;
8112c1f8:	e0bff317 	ldw	r2,-52(fp)
8112c1fc:	10800283 	ldbu	r2,10(r2)
8112c200:	1007883a 	mov	r3,r2
8112c204:	e0bffc43 	ldbu	r2,-15(fp)
8112c208:	0084303a 	nor	r2,zero,r2
8112c20c:	1884703a 	and	r2,r3,r2
8112c210:	1007883a 	mov	r3,r2
8112c214:	e0bff317 	ldw	r2,-52(fp)
8112c218:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
8112c21c:	e0bff317 	ldw	r2,-52(fp)
8112c220:	10c00283 	ldbu	r3,10(r2)
8112c224:	e0bffb83 	ldbu	r2,-18(fp)
8112c228:	1884b03a 	or	r2,r3,r2
8112c22c:	1007883a 	mov	r3,r2
8112c230:	e0bff317 	ldw	r2,-52(fp)
8112c234:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
8112c238:	e0bffb03 	ldbu	r2,-20(fp)
8112c23c:	e0fffb03 	ldbu	r3,-20(fp)
8112c240:	e13ff317 	ldw	r4,-52(fp)
8112c244:	20c7883a 	add	r3,r4,r3
8112c248:	18c002c4 	addi	r3,r3,11
8112c24c:	19000003 	ldbu	r4,0(r3)
8112c250:	e0fffbc3 	ldbu	r3,-17(fp)
8112c254:	20c6b03a 	or	r3,r4,r3
8112c258:	1809883a 	mov	r4,r3
8112c25c:	e0fff317 	ldw	r3,-52(fp)
8112c260:	1885883a 	add	r2,r3,r2
8112c264:	108002c4 	addi	r2,r2,11
8112c268:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
8112c26c:	e0bff817 	ldw	r2,-32(fp)
8112c270:	10800817 	ldw	r2,32(r2)
8112c274:	10004226 	beq	r2,zero,8112c380 <OSTaskChangePrio+0x480>
        pevents =  ptcb->OSTCBEventMultiPtr;
8112c278:	e0bff817 	ldw	r2,-32(fp)
8112c27c:	10800817 	ldw	r2,32(r2)
8112c280:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
8112c284:	e0bff417 	ldw	r2,-48(fp)
8112c288:	10800017 	ldw	r2,0(r2)
8112c28c:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
8112c290:	00003906 	br	8112c378 <OSTaskChangePrio+0x478>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
8112c294:	e0bffc03 	ldbu	r2,-16(fp)
8112c298:	e0fffc03 	ldbu	r3,-16(fp)
8112c29c:	e13ff317 	ldw	r4,-52(fp)
8112c2a0:	20c7883a 	add	r3,r4,r3
8112c2a4:	18c002c4 	addi	r3,r3,11
8112c2a8:	18c00003 	ldbu	r3,0(r3)
8112c2ac:	1809883a 	mov	r4,r3
8112c2b0:	e0fffc83 	ldbu	r3,-14(fp)
8112c2b4:	00c6303a 	nor	r3,zero,r3
8112c2b8:	20c6703a 	and	r3,r4,r3
8112c2bc:	1809883a 	mov	r4,r3
8112c2c0:	e0fff317 	ldw	r3,-52(fp)
8112c2c4:	1885883a 	add	r2,r3,r2
8112c2c8:	108002c4 	addi	r2,r2,11
8112c2cc:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
8112c2d0:	e0bffc03 	ldbu	r2,-16(fp)
8112c2d4:	e0fff317 	ldw	r3,-52(fp)
8112c2d8:	1885883a 	add	r2,r3,r2
8112c2dc:	108002c4 	addi	r2,r2,11
8112c2e0:	10800003 	ldbu	r2,0(r2)
8112c2e4:	10803fcc 	andi	r2,r2,255
8112c2e8:	1000091e 	bne	r2,zero,8112c310 <OSTaskChangePrio+0x410>
                pevent->OSEventGrp    &= ~bity_old;
8112c2ec:	e0bff317 	ldw	r2,-52(fp)
8112c2f0:	10800283 	ldbu	r2,10(r2)
8112c2f4:	1007883a 	mov	r3,r2
8112c2f8:	e0bffc43 	ldbu	r2,-15(fp)
8112c2fc:	0084303a 	nor	r2,zero,r2
8112c300:	1884703a 	and	r2,r3,r2
8112c304:	1007883a 	mov	r3,r2
8112c308:	e0bff317 	ldw	r2,-52(fp)
8112c30c:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
8112c310:	e0bff317 	ldw	r2,-52(fp)
8112c314:	10c00283 	ldbu	r3,10(r2)
8112c318:	e0bffb83 	ldbu	r2,-18(fp)
8112c31c:	1884b03a 	or	r2,r3,r2
8112c320:	1007883a 	mov	r3,r2
8112c324:	e0bff317 	ldw	r2,-52(fp)
8112c328:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
8112c32c:	e0bffb03 	ldbu	r2,-20(fp)
8112c330:	e0fffb03 	ldbu	r3,-20(fp)
8112c334:	e13ff317 	ldw	r4,-52(fp)
8112c338:	20c7883a 	add	r3,r4,r3
8112c33c:	18c002c4 	addi	r3,r3,11
8112c340:	19000003 	ldbu	r4,0(r3)
8112c344:	e0fffbc3 	ldbu	r3,-17(fp)
8112c348:	20c6b03a 	or	r3,r4,r3
8112c34c:	1809883a 	mov	r4,r3
8112c350:	e0fff317 	ldw	r3,-52(fp)
8112c354:	1885883a 	add	r2,r3,r2
8112c358:	108002c4 	addi	r2,r2,11
8112c35c:	11000005 	stb	r4,0(r2)
            pevents++;
8112c360:	e0bff417 	ldw	r2,-48(fp)
8112c364:	10800104 	addi	r2,r2,4
8112c368:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
8112c36c:	e0bff417 	ldw	r2,-48(fp)
8112c370:	10800017 	ldw	r2,0(r2)
8112c374:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
8112c378:	e0bff317 	ldw	r2,-52(fp)
8112c37c:	103fc51e 	bne	r2,zero,8112c294 <__reset+0xfb10c294>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
8112c380:	e0bff817 	ldw	r2,-32(fp)
8112c384:	e0ffff03 	ldbu	r3,-4(fp)
8112c388:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
8112c38c:	e0bff817 	ldw	r2,-32(fp)
8112c390:	e0fffb03 	ldbu	r3,-20(fp)
8112c394:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
8112c398:	e0bff817 	ldw	r2,-32(fp)
8112c39c:	e0fffb43 	ldbu	r3,-19(fp)
8112c3a0:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
8112c3a4:	e0bff817 	ldw	r2,-32(fp)
8112c3a8:	e0fffb83 	ldbu	r3,-18(fp)
8112c3ac:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
8112c3b0:	e0bff817 	ldw	r2,-32(fp)
8112c3b4:	e0fffbc3 	ldbu	r3,-17(fp)
8112c3b8:	10c00d45 	stb	r3,53(r2)
8112c3bc:	e0bff517 	ldw	r2,-44(fp)
8112c3c0:	e0bffa15 	stw	r2,-24(fp)
8112c3c4:	e0bffa17 	ldw	r2,-24(fp)
8112c3c8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
8112c3cc:	d0a07f03 	ldbu	r2,-32260(gp)
8112c3d0:	10803fcc 	andi	r2,r2,255
8112c3d4:	10800058 	cmpnei	r2,r2,1
8112c3d8:	1000011e 	bne	r2,zero,8112c3e0 <OSTaskChangePrio+0x4e0>
        OS_Sched();                                         /* Find new highest priority task          */
8112c3dc:	11269900 	call	81126990 <OS_Sched>
    }
    return (OS_ERR_NONE);
8112c3e0:	0005883a 	mov	r2,zero
}
8112c3e4:	e037883a 	mov	sp,fp
8112c3e8:	dfc00117 	ldw	ra,4(sp)
8112c3ec:	df000017 	ldw	fp,0(sp)
8112c3f0:	dec00204 	addi	sp,sp,8
8112c3f4:	f800283a 	ret

8112c3f8 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
8112c3f8:	deffee04 	addi	sp,sp,-72
8112c3fc:	de00012e 	bgeu	sp,et,8112c404 <OSTaskCreate+0xc>
8112c400:	003b68fa 	trap	3
8112c404:	dfc01115 	stw	ra,68(sp)
8112c408:	df001015 	stw	fp,64(sp)
8112c40c:	df001004 	addi	fp,sp,64
8112c410:	e13ffc15 	stw	r4,-16(fp)
8112c414:	e17ffd15 	stw	r5,-12(fp)
8112c418:	e1bffe15 	stw	r6,-8(fp)
8112c41c:	3805883a 	mov	r2,r7
8112c420:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
8112c424:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
8112c428:	e0bfff03 	ldbu	r2,-4(fp)
8112c42c:	10800a70 	cmpltui	r2,r2,41
8112c430:	1000021e 	bne	r2,zero,8112c43c <OSTaskCreate+0x44>
        return (OS_ERR_PRIO_INVALID);
8112c434:	00800a84 	movi	r2,42
8112c438:	00005706 	br	8112c598 <OSTaskCreate+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112c43c:	0005303a 	rdctl	r2,status
8112c440:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112c444:	e0fffb17 	ldw	r3,-20(fp)
8112c448:	00bfff84 	movi	r2,-2
8112c44c:	1884703a 	and	r2,r3,r2
8112c450:	1001703a 	wrctl	status,r2
  
  return context;
8112c454:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8112c458:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
8112c45c:	d0a08f03 	ldbu	r2,-32196(gp)
8112c460:	10803fcc 	andi	r2,r2,255
8112c464:	10000626 	beq	r2,zero,8112c480 <OSTaskCreate+0x88>
8112c468:	e0bff317 	ldw	r2,-52(fp)
8112c46c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112c470:	e0bff417 	ldw	r2,-48(fp)
8112c474:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
8112c478:	00800f04 	movi	r2,60
8112c47c:	00004606 	br	8112c598 <OSTaskCreate+0x1a0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
8112c480:	e0ffff03 	ldbu	r3,-4(fp)
8112c484:	00a045b4 	movhi	r2,33046
8112c488:	1094b404 	addi	r2,r2,21200
8112c48c:	18c7883a 	add	r3,r3,r3
8112c490:	18c7883a 	add	r3,r3,r3
8112c494:	10c5883a 	add	r2,r2,r3
8112c498:	10800017 	ldw	r2,0(r2)
8112c49c:	1000391e 	bne	r2,zero,8112c584 <OSTaskCreate+0x18c>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
8112c4a0:	e0ffff03 	ldbu	r3,-4(fp)
8112c4a4:	00a045b4 	movhi	r2,33046
8112c4a8:	1094b404 	addi	r2,r2,21200
8112c4ac:	18c7883a 	add	r3,r3,r3
8112c4b0:	18c7883a 	add	r3,r3,r3
8112c4b4:	10c5883a 	add	r2,r2,r3
8112c4b8:	00c00044 	movi	r3,1
8112c4bc:	10c00015 	stw	r3,0(r2)
8112c4c0:	e0bff317 	ldw	r2,-52(fp)
8112c4c4:	e0bff515 	stw	r2,-44(fp)
8112c4c8:	e0bff517 	ldw	r2,-44(fp)
8112c4cc:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
8112c4d0:	000f883a 	mov	r7,zero
8112c4d4:	e1bffe17 	ldw	r6,-8(fp)
8112c4d8:	e17ffd17 	ldw	r5,-12(fp)
8112c4dc:	e13ffc17 	ldw	r4,-16(fp)
8112c4e0:	1138a700 	call	81138a70 <OSTaskStkInit>
8112c4e4:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
8112c4e8:	e0bfff03 	ldbu	r2,-4(fp)
8112c4ec:	d8000215 	stw	zero,8(sp)
8112c4f0:	d8000115 	stw	zero,4(sp)
8112c4f4:	d8000015 	stw	zero,0(sp)
8112c4f8:	000f883a 	mov	r7,zero
8112c4fc:	000d883a 	mov	r6,zero
8112c500:	e17ff717 	ldw	r5,-36(fp)
8112c504:	1009883a 	mov	r4,r2
8112c508:	1126dd80 	call	81126dd8 <OS_TCBInit>
8112c50c:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
8112c510:	e0bff803 	ldbu	r2,-32(fp)
8112c514:	1000061e 	bne	r2,zero,8112c530 <OSTaskCreate+0x138>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
8112c518:	d0a07f03 	ldbu	r2,-32260(gp)
8112c51c:	10803fcc 	andi	r2,r2,255
8112c520:	10800058 	cmpnei	r2,r2,1
8112c524:	1000151e 	bne	r2,zero,8112c57c <OSTaskCreate+0x184>
                OS_Sched();
8112c528:	11269900 	call	81126990 <OS_Sched>
8112c52c:	00001306 	br	8112c57c <OSTaskCreate+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112c530:	0005303a 	rdctl	r2,status
8112c534:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112c538:	e0fffa17 	ldw	r3,-24(fp)
8112c53c:	00bfff84 	movi	r2,-2
8112c540:	1884703a 	and	r2,r3,r2
8112c544:	1001703a 	wrctl	status,r2
  
  return context;
8112c548:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
8112c54c:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
8112c550:	e0ffff03 	ldbu	r3,-4(fp)
8112c554:	00a045b4 	movhi	r2,33046
8112c558:	1094b404 	addi	r2,r2,21200
8112c55c:	18c7883a 	add	r3,r3,r3
8112c560:	18c7883a 	add	r3,r3,r3
8112c564:	10c5883a 	add	r2,r2,r3
8112c568:	10000015 	stw	zero,0(r2)
8112c56c:	e0bff317 	ldw	r2,-52(fp)
8112c570:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112c574:	e0bff617 	ldw	r2,-40(fp)
8112c578:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
8112c57c:	e0bff803 	ldbu	r2,-32(fp)
8112c580:	00000506 	br	8112c598 <OSTaskCreate+0x1a0>
8112c584:	e0bff317 	ldw	r2,-52(fp)
8112c588:	e0bff915 	stw	r2,-28(fp)
8112c58c:	e0bff917 	ldw	r2,-28(fp)
8112c590:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
8112c594:	00800a04 	movi	r2,40
}
8112c598:	e037883a 	mov	sp,fp
8112c59c:	dfc00117 	ldw	ra,4(sp)
8112c5a0:	df000017 	ldw	fp,0(sp)
8112c5a4:	dec00204 	addi	sp,sp,8
8112c5a8:	f800283a 	ret

8112c5ac <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
8112c5ac:	deffec04 	addi	sp,sp,-80
8112c5b0:	de00012e 	bgeu	sp,et,8112c5b8 <OSTaskCreateExt+0xc>
8112c5b4:	003b68fa 	trap	3
8112c5b8:	dfc01315 	stw	ra,76(sp)
8112c5bc:	df001215 	stw	fp,72(sp)
8112c5c0:	df001204 	addi	fp,sp,72
8112c5c4:	e13ffa15 	stw	r4,-24(fp)
8112c5c8:	e17ffb15 	stw	r5,-20(fp)
8112c5cc:	e1bffc15 	stw	r6,-16(fp)
8112c5d0:	3809883a 	mov	r4,r7
8112c5d4:	e0c00217 	ldw	r3,8(fp)
8112c5d8:	e0800617 	ldw	r2,24(fp)
8112c5dc:	e13ffd05 	stb	r4,-12(fp)
8112c5e0:	e0fffe0d 	sth	r3,-8(fp)
8112c5e4:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
8112c5e8:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
8112c5ec:	e0bffd03 	ldbu	r2,-12(fp)
8112c5f0:	10800a70 	cmpltui	r2,r2,41
8112c5f4:	1000021e 	bne	r2,zero,8112c600 <OSTaskCreateExt+0x54>
        return (OS_ERR_PRIO_INVALID);
8112c5f8:	00800a84 	movi	r2,42
8112c5fc:	00006106 	br	8112c784 <OSTaskCreateExt+0x1d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112c600:	0005303a 	rdctl	r2,status
8112c604:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112c608:	e0fff917 	ldw	r3,-28(fp)
8112c60c:	00bfff84 	movi	r2,-2
8112c610:	1884703a 	and	r2,r3,r2
8112c614:	1001703a 	wrctl	status,r2
  
  return context;
8112c618:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8112c61c:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
8112c620:	d0a08f03 	ldbu	r2,-32196(gp)
8112c624:	10803fcc 	andi	r2,r2,255
8112c628:	10000626 	beq	r2,zero,8112c644 <OSTaskCreateExt+0x98>
8112c62c:	e0bff117 	ldw	r2,-60(fp)
8112c630:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112c634:	e0bff217 	ldw	r2,-56(fp)
8112c638:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
8112c63c:	00800f04 	movi	r2,60
8112c640:	00005006 	br	8112c784 <OSTaskCreateExt+0x1d8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
8112c644:	e0fffd03 	ldbu	r3,-12(fp)
8112c648:	00a045b4 	movhi	r2,33046
8112c64c:	1094b404 	addi	r2,r2,21200
8112c650:	18c7883a 	add	r3,r3,r3
8112c654:	18c7883a 	add	r3,r3,r3
8112c658:	10c5883a 	add	r2,r2,r3
8112c65c:	10800017 	ldw	r2,0(r2)
8112c660:	1000431e 	bne	r2,zero,8112c770 <OSTaskCreateExt+0x1c4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
8112c664:	e0fffd03 	ldbu	r3,-12(fp)
8112c668:	00a045b4 	movhi	r2,33046
8112c66c:	1094b404 	addi	r2,r2,21200
8112c670:	18c7883a 	add	r3,r3,r3
8112c674:	18c7883a 	add	r3,r3,r3
8112c678:	10c5883a 	add	r2,r2,r3
8112c67c:	00c00044 	movi	r3,1
8112c680:	10c00015 	stw	r3,0(r2)
8112c684:	e0bff117 	ldw	r2,-60(fp)
8112c688:	e0bff315 	stw	r2,-52(fp)
8112c68c:	e0bff317 	ldw	r2,-52(fp)
8112c690:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
8112c694:	e0bfff0b 	ldhu	r2,-4(fp)
8112c698:	100d883a 	mov	r6,r2
8112c69c:	e1400417 	ldw	r5,16(fp)
8112c6a0:	e1000317 	ldw	r4,12(fp)
8112c6a4:	112d6540 	call	8112d654 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
8112c6a8:	e0bfff0b 	ldhu	r2,-4(fp)
8112c6ac:	100f883a 	mov	r7,r2
8112c6b0:	e1bffc17 	ldw	r6,-16(fp)
8112c6b4:	e17ffb17 	ldw	r5,-20(fp)
8112c6b8:	e13ffa17 	ldw	r4,-24(fp)
8112c6bc:	1138a700 	call	81138a70 <OSTaskStkInit>
8112c6c0:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
8112c6c4:	e0fffd03 	ldbu	r3,-12(fp)
8112c6c8:	e13ffe0b 	ldhu	r4,-8(fp)
8112c6cc:	e0bfff0b 	ldhu	r2,-4(fp)
8112c6d0:	d8800215 	stw	r2,8(sp)
8112c6d4:	e0800517 	ldw	r2,20(fp)
8112c6d8:	d8800115 	stw	r2,4(sp)
8112c6dc:	e0800417 	ldw	r2,16(fp)
8112c6e0:	d8800015 	stw	r2,0(sp)
8112c6e4:	200f883a 	mov	r7,r4
8112c6e8:	e1800317 	ldw	r6,12(fp)
8112c6ec:	e17ff517 	ldw	r5,-44(fp)
8112c6f0:	1809883a 	mov	r4,r3
8112c6f4:	1126dd80 	call	81126dd8 <OS_TCBInit>
8112c6f8:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
8112c6fc:	e0bff603 	ldbu	r2,-40(fp)
8112c700:	1000061e 	bne	r2,zero,8112c71c <OSTaskCreateExt+0x170>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
8112c704:	d0a07f03 	ldbu	r2,-32260(gp)
8112c708:	10803fcc 	andi	r2,r2,255
8112c70c:	10800058 	cmpnei	r2,r2,1
8112c710:	1000151e 	bne	r2,zero,8112c768 <OSTaskCreateExt+0x1bc>
                OS_Sched();
8112c714:	11269900 	call	81126990 <OS_Sched>
8112c718:	00001306 	br	8112c768 <OSTaskCreateExt+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112c71c:	0005303a 	rdctl	r2,status
8112c720:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112c724:	e0fff817 	ldw	r3,-32(fp)
8112c728:	00bfff84 	movi	r2,-2
8112c72c:	1884703a 	and	r2,r3,r2
8112c730:	1001703a 	wrctl	status,r2
  
  return context;
8112c734:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
8112c738:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
8112c73c:	e0fffd03 	ldbu	r3,-12(fp)
8112c740:	00a045b4 	movhi	r2,33046
8112c744:	1094b404 	addi	r2,r2,21200
8112c748:	18c7883a 	add	r3,r3,r3
8112c74c:	18c7883a 	add	r3,r3,r3
8112c750:	10c5883a 	add	r2,r2,r3
8112c754:	10000015 	stw	zero,0(r2)
8112c758:	e0bff117 	ldw	r2,-60(fp)
8112c75c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112c760:	e0bff417 	ldw	r2,-48(fp)
8112c764:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
8112c768:	e0bff603 	ldbu	r2,-40(fp)
8112c76c:	00000506 	br	8112c784 <OSTaskCreateExt+0x1d8>
8112c770:	e0bff117 	ldw	r2,-60(fp)
8112c774:	e0bff715 	stw	r2,-36(fp)
8112c778:	e0bff717 	ldw	r2,-36(fp)
8112c77c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
8112c780:	00800a04 	movi	r2,40
}
8112c784:	e037883a 	mov	sp,fp
8112c788:	dfc00117 	ldw	ra,4(sp)
8112c78c:	df000017 	ldw	fp,0(sp)
8112c790:	dec00204 	addi	sp,sp,8
8112c794:	f800283a 	ret

8112c798 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
8112c798:	defff404 	addi	sp,sp,-48
8112c79c:	de00012e 	bgeu	sp,et,8112c7a4 <OSTaskDel+0xc>
8112c7a0:	003b68fa 	trap	3
8112c7a4:	dfc00b15 	stw	ra,44(sp)
8112c7a8:	df000a15 	stw	fp,40(sp)
8112c7ac:	df000a04 	addi	fp,sp,40
8112c7b0:	2005883a 	mov	r2,r4
8112c7b4:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
8112c7b8:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
8112c7bc:	d0a08f03 	ldbu	r2,-32196(gp)
8112c7c0:	10803fcc 	andi	r2,r2,255
8112c7c4:	10000226 	beq	r2,zero,8112c7d0 <OSTaskDel+0x38>
        return (OS_ERR_TASK_DEL_ISR);
8112c7c8:	00801004 	movi	r2,64
8112c7cc:	0000c006 	br	8112cad0 <OSTaskDel+0x338>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
8112c7d0:	e0bfff03 	ldbu	r2,-4(fp)
8112c7d4:	10800a18 	cmpnei	r2,r2,40
8112c7d8:	1000021e 	bne	r2,zero,8112c7e4 <OSTaskDel+0x4c>
        return (OS_ERR_TASK_DEL_IDLE);
8112c7dc:	00800f84 	movi	r2,62
8112c7e0:	0000bb06 	br	8112cad0 <OSTaskDel+0x338>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
8112c7e4:	e0bfff03 	ldbu	r2,-4(fp)
8112c7e8:	10800a30 	cmpltui	r2,r2,40
8112c7ec:	1000051e 	bne	r2,zero,8112c804 <OSTaskDel+0x6c>
        if (prio != OS_PRIO_SELF) {
8112c7f0:	e0bfff03 	ldbu	r2,-4(fp)
8112c7f4:	10803fe0 	cmpeqi	r2,r2,255
8112c7f8:	1000021e 	bne	r2,zero,8112c804 <OSTaskDel+0x6c>
            return (OS_ERR_PRIO_INVALID);
8112c7fc:	00800a84 	movi	r2,42
8112c800:	0000b306 	br	8112cad0 <OSTaskDel+0x338>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112c804:	0005303a 	rdctl	r2,status
8112c808:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112c80c:	e0fffe17 	ldw	r3,-8(fp)
8112c810:	00bfff84 	movi	r2,-2
8112c814:	1884703a 	and	r2,r3,r2
8112c818:	1001703a 	wrctl	status,r2
  
  return context;
8112c81c:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
8112c820:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
8112c824:	e0bfff03 	ldbu	r2,-4(fp)
8112c828:	10803fd8 	cmpnei	r2,r2,255
8112c82c:	1000031e 	bne	r2,zero,8112c83c <OSTaskDel+0xa4>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
8112c830:	d0a09017 	ldw	r2,-32192(gp)
8112c834:	10800c83 	ldbu	r2,50(r2)
8112c838:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
8112c83c:	e0ffff03 	ldbu	r3,-4(fp)
8112c840:	00a045b4 	movhi	r2,33046
8112c844:	1094b404 	addi	r2,r2,21200
8112c848:	18c7883a 	add	r3,r3,r3
8112c84c:	18c7883a 	add	r3,r3,r3
8112c850:	10c5883a 	add	r2,r2,r3
8112c854:	10800017 	ldw	r2,0(r2)
8112c858:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
8112c85c:	e0bff817 	ldw	r2,-32(fp)
8112c860:	1000061e 	bne	r2,zero,8112c87c <OSTaskDel+0xe4>
8112c864:	e0bff617 	ldw	r2,-40(fp)
8112c868:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112c86c:	e0bff717 	ldw	r2,-36(fp)
8112c870:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
8112c874:	008010c4 	movi	r2,67
8112c878:	00009506 	br	8112cad0 <OSTaskDel+0x338>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
8112c87c:	e0bff817 	ldw	r2,-32(fp)
8112c880:	10800058 	cmpnei	r2,r2,1
8112c884:	1000061e 	bne	r2,zero,8112c8a0 <OSTaskDel+0x108>
8112c888:	e0bff617 	ldw	r2,-40(fp)
8112c88c:	e0bff915 	stw	r2,-28(fp)
8112c890:	e0bff917 	ldw	r2,-28(fp)
8112c894:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
8112c898:	00800f44 	movi	r2,61
8112c89c:	00008c06 	br	8112cad0 <OSTaskDel+0x338>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
8112c8a0:	e0bff817 	ldw	r2,-32(fp)
8112c8a4:	10800d03 	ldbu	r2,52(r2)
8112c8a8:	10c03fcc 	andi	r3,r2,255
8112c8ac:	e0bff817 	ldw	r2,-32(fp)
8112c8b0:	10800d03 	ldbu	r2,52(r2)
8112c8b4:	11003fcc 	andi	r4,r2,255
8112c8b8:	d0a08c44 	addi	r2,gp,-32207
8112c8bc:	2085883a 	add	r2,r4,r2
8112c8c0:	10800003 	ldbu	r2,0(r2)
8112c8c4:	1009883a 	mov	r4,r2
8112c8c8:	e0bff817 	ldw	r2,-32(fp)
8112c8cc:	10800d43 	ldbu	r2,53(r2)
8112c8d0:	0084303a 	nor	r2,zero,r2
8112c8d4:	2084703a 	and	r2,r4,r2
8112c8d8:	1009883a 	mov	r4,r2
8112c8dc:	d0a08c44 	addi	r2,gp,-32207
8112c8e0:	1885883a 	add	r2,r3,r2
8112c8e4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
8112c8e8:	e0bff817 	ldw	r2,-32(fp)
8112c8ec:	10800d03 	ldbu	r2,52(r2)
8112c8f0:	10c03fcc 	andi	r3,r2,255
8112c8f4:	d0a08c44 	addi	r2,gp,-32207
8112c8f8:	1885883a 	add	r2,r3,r2
8112c8fc:	10800003 	ldbu	r2,0(r2)
8112c900:	10803fcc 	andi	r2,r2,255
8112c904:	1000071e 	bne	r2,zero,8112c924 <OSTaskDel+0x18c>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
8112c908:	e0bff817 	ldw	r2,-32(fp)
8112c90c:	10800d83 	ldbu	r2,54(r2)
8112c910:	0084303a 	nor	r2,zero,r2
8112c914:	1007883a 	mov	r3,r2
8112c918:	d0a08c03 	ldbu	r2,-32208(gp)
8112c91c:	1884703a 	and	r2,r3,r2
8112c920:	d0a08c05 	stb	r2,-32208(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
8112c924:	e0bff817 	ldw	r2,-32(fp)
8112c928:	10800717 	ldw	r2,28(r2)
8112c92c:	10000526 	beq	r2,zero,8112c944 <OSTaskDel+0x1ac>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
8112c930:	e0bff817 	ldw	r2,-32(fp)
8112c934:	10800717 	ldw	r2,28(r2)
8112c938:	100b883a 	mov	r5,r2
8112c93c:	e13ff817 	ldw	r4,-32(fp)
8112c940:	11262e40 	call	811262e4 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
8112c944:	e0bff817 	ldw	r2,-32(fp)
8112c948:	10800817 	ldw	r2,32(r2)
8112c94c:	10000526 	beq	r2,zero,8112c964 <OSTaskDel+0x1cc>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
8112c950:	e0bff817 	ldw	r2,-32(fp)
8112c954:	10800817 	ldw	r2,32(r2)
8112c958:	100b883a 	mov	r5,r2
8112c95c:	e13ff817 	ldw	r4,-32(fp)
8112c960:	11263a40 	call	811263a4 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
8112c964:	e0bff817 	ldw	r2,-32(fp)
8112c968:	10800a17 	ldw	r2,40(r2)
8112c96c:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
8112c970:	e0bffb17 	ldw	r2,-20(fp)
8112c974:	10000226 	beq	r2,zero,8112c980 <OSTaskDel+0x1e8>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
8112c978:	e13ffb17 	ldw	r4,-20(fp)
8112c97c:	112897c0 	call	8112897c <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
8112c980:	e0bff817 	ldw	r2,-32(fp)
8112c984:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
8112c988:	e0bff817 	ldw	r2,-32(fp)
8112c98c:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
8112c990:	e0bff817 	ldw	r2,-32(fp)
8112c994:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
8112c998:	d0a07d03 	ldbu	r2,-32268(gp)
8112c99c:	10803fcc 	andi	r2,r2,255
8112c9a0:	10803fe0 	cmpeqi	r2,r2,255
8112c9a4:	1000031e 	bne	r2,zero,8112c9b4 <OSTaskDel+0x21c>
        OSLockNesting++;
8112c9a8:	d0a07d03 	ldbu	r2,-32268(gp)
8112c9ac:	10800044 	addi	r2,r2,1
8112c9b0:	d0a07d05 	stb	r2,-32268(gp)
8112c9b4:	e0bff617 	ldw	r2,-40(fp)
8112c9b8:	e0bffd15 	stw	r2,-12(fp)
8112c9bc:	e0bffd17 	ldw	r2,-12(fp)
8112c9c0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
8112c9c4:	1125eac0 	call	81125eac <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112c9c8:	0005303a 	rdctl	r2,status
8112c9cc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112c9d0:	e0fffa17 	ldw	r3,-24(fp)
8112c9d4:	00bfff84 	movi	r2,-2
8112c9d8:	1884703a 	and	r2,r3,r2
8112c9dc:	1001703a 	wrctl	status,r2
  
  return context;
8112c9e0:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
8112c9e4:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
8112c9e8:	d0a07d03 	ldbu	r2,-32268(gp)
8112c9ec:	10803fcc 	andi	r2,r2,255
8112c9f0:	10000326 	beq	r2,zero,8112ca00 <OSTaskDel+0x268>
        OSLockNesting--;
8112c9f4:	d0a07d03 	ldbu	r2,-32268(gp)
8112c9f8:	10bfffc4 	addi	r2,r2,-1
8112c9fc:	d0a07d05 	stb	r2,-32268(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
8112ca00:	e13ff817 	ldw	r4,-32(fp)
8112ca04:	1138c000 	call	81138c00 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
8112ca08:	d0a08843 	ldbu	r2,-32223(gp)
8112ca0c:	10bfffc4 	addi	r2,r2,-1
8112ca10:	d0a08845 	stb	r2,-32223(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
8112ca14:	e0ffff03 	ldbu	r3,-4(fp)
8112ca18:	00a045b4 	movhi	r2,33046
8112ca1c:	1094b404 	addi	r2,r2,21200
8112ca20:	18c7883a 	add	r3,r3,r3
8112ca24:	18c7883a 	add	r3,r3,r3
8112ca28:	10c5883a 	add	r2,r2,r3
8112ca2c:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
8112ca30:	e0bff817 	ldw	r2,-32(fp)
8112ca34:	10800617 	ldw	r2,24(r2)
8112ca38:	1000071e 	bne	r2,zero,8112ca58 <OSTaskDel+0x2c0>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
8112ca3c:	e0bff817 	ldw	r2,-32(fp)
8112ca40:	10800517 	ldw	r2,20(r2)
8112ca44:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
8112ca48:	e0bff817 	ldw	r2,-32(fp)
8112ca4c:	10800517 	ldw	r2,20(r2)
8112ca50:	d0a08215 	stw	r2,-32248(gp)
8112ca54:	00000a06 	br	8112ca80 <OSTaskDel+0x2e8>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
8112ca58:	e0bff817 	ldw	r2,-32(fp)
8112ca5c:	10800617 	ldw	r2,24(r2)
8112ca60:	e0fff817 	ldw	r3,-32(fp)
8112ca64:	18c00517 	ldw	r3,20(r3)
8112ca68:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
8112ca6c:	e0bff817 	ldw	r2,-32(fp)
8112ca70:	10800517 	ldw	r2,20(r2)
8112ca74:	e0fff817 	ldw	r3,-32(fp)
8112ca78:	18c00617 	ldw	r3,24(r3)
8112ca7c:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
8112ca80:	d0e08717 	ldw	r3,-32228(gp)
8112ca84:	e0bff817 	ldw	r2,-32(fp)
8112ca88:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
8112ca8c:	e0bff817 	ldw	r2,-32(fp)
8112ca90:	d0a08715 	stw	r2,-32228(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
8112ca94:	e0bff817 	ldw	r2,-32(fp)
8112ca98:	00c00fc4 	movi	r3,63
8112ca9c:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
8112caa0:	e0bff817 	ldw	r2,-32(fp)
8112caa4:	10001345 	stb	zero,77(r2)
8112caa8:	e0bff617 	ldw	r2,-40(fp)
8112caac:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112cab0:	e0bffc17 	ldw	r2,-16(fp)
8112cab4:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
8112cab8:	d0a07f03 	ldbu	r2,-32260(gp)
8112cabc:	10803fcc 	andi	r2,r2,255
8112cac0:	10800058 	cmpnei	r2,r2,1
8112cac4:	1000011e 	bne	r2,zero,8112cacc <OSTaskDel+0x334>
        OS_Sched();                                     /* Find new highest priority task              */
8112cac8:	11269900 	call	81126990 <OS_Sched>
    }
    return (OS_ERR_NONE);
8112cacc:	0005883a 	mov	r2,zero
}
8112cad0:	e037883a 	mov	sp,fp
8112cad4:	dfc00117 	ldw	ra,4(sp)
8112cad8:	df000017 	ldw	fp,0(sp)
8112cadc:	dec00204 	addi	sp,sp,8
8112cae0:	f800283a 	ret

8112cae4 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
8112cae4:	defff504 	addi	sp,sp,-44
8112cae8:	de00012e 	bgeu	sp,et,8112caf0 <OSTaskDelReq+0xc>
8112caec:	003b68fa 	trap	3
8112caf0:	df000a15 	stw	fp,40(sp)
8112caf4:	df000a04 	addi	fp,sp,40
8112caf8:	2005883a 	mov	r2,r4
8112cafc:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112cb00:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
8112cb04:	e0bfff03 	ldbu	r2,-4(fp)
8112cb08:	10800a18 	cmpnei	r2,r2,40
8112cb0c:	1000021e 	bne	r2,zero,8112cb18 <OSTaskDelReq+0x34>
        return (OS_ERR_TASK_DEL_IDLE);
8112cb10:	00800f84 	movi	r2,62
8112cb14:	00004506 	br	8112cc2c <OSTaskDelReq+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
8112cb18:	e0bfff03 	ldbu	r2,-4(fp)
8112cb1c:	10800a30 	cmpltui	r2,r2,40
8112cb20:	1000051e 	bne	r2,zero,8112cb38 <OSTaskDelReq+0x54>
        if (prio != OS_PRIO_SELF) {
8112cb24:	e0bfff03 	ldbu	r2,-4(fp)
8112cb28:	10803fe0 	cmpeqi	r2,r2,255
8112cb2c:	1000021e 	bne	r2,zero,8112cb38 <OSTaskDelReq+0x54>
            return (OS_ERR_PRIO_INVALID);
8112cb30:	00800a84 	movi	r2,42
8112cb34:	00003d06 	br	8112cc2c <OSTaskDelReq+0x148>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
8112cb38:	e0bfff03 	ldbu	r2,-4(fp)
8112cb3c:	10803fd8 	cmpnei	r2,r2,255
8112cb40:	1000111e 	bne	r2,zero,8112cb88 <OSTaskDelReq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112cb44:	0005303a 	rdctl	r2,status
8112cb48:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112cb4c:	e0fff917 	ldw	r3,-28(fp)
8112cb50:	00bfff84 	movi	r2,-2
8112cb54:	1884703a 	and	r2,r3,r2
8112cb58:	1001703a 	wrctl	status,r2
  
  return context;
8112cb5c:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
8112cb60:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
8112cb64:	d0a09017 	ldw	r2,-32192(gp)
8112cb68:	10800dc3 	ldbu	r2,55(r2)
8112cb6c:	e0bff805 	stb	r2,-32(fp)
8112cb70:	e0bff617 	ldw	r2,-40(fp)
8112cb74:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112cb78:	e0bffe17 	ldw	r2,-8(fp)
8112cb7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
8112cb80:	e0bff803 	ldbu	r2,-32(fp)
8112cb84:	00002906 	br	8112cc2c <OSTaskDelReq+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112cb88:	0005303a 	rdctl	r2,status
8112cb8c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112cb90:	e0fff717 	ldw	r3,-36(fp)
8112cb94:	00bfff84 	movi	r2,-2
8112cb98:	1884703a 	and	r2,r3,r2
8112cb9c:	1001703a 	wrctl	status,r2
  
  return context;
8112cba0:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
8112cba4:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
8112cba8:	e0ffff03 	ldbu	r3,-4(fp)
8112cbac:	00a045b4 	movhi	r2,33046
8112cbb0:	1094b404 	addi	r2,r2,21200
8112cbb4:	18c7883a 	add	r3,r3,r3
8112cbb8:	18c7883a 	add	r3,r3,r3
8112cbbc:	10c5883a 	add	r2,r2,r3
8112cbc0:	10800017 	ldw	r2,0(r2)
8112cbc4:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
8112cbc8:	e0bffb17 	ldw	r2,-20(fp)
8112cbcc:	1000061e 	bne	r2,zero,8112cbe8 <OSTaskDelReq+0x104>
8112cbd0:	e0bff617 	ldw	r2,-40(fp)
8112cbd4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112cbd8:	e0bffa17 	ldw	r2,-24(fp)
8112cbdc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
8112cbe0:	008010c4 	movi	r2,67
8112cbe4:	00001106 	br	8112cc2c <OSTaskDelReq+0x148>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
8112cbe8:	e0bffb17 	ldw	r2,-20(fp)
8112cbec:	10800058 	cmpnei	r2,r2,1
8112cbf0:	1000061e 	bne	r2,zero,8112cc0c <OSTaskDelReq+0x128>
8112cbf4:	e0bff617 	ldw	r2,-40(fp)
8112cbf8:	e0bffc15 	stw	r2,-16(fp)
8112cbfc:	e0bffc17 	ldw	r2,-16(fp)
8112cc00:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
8112cc04:	00800f44 	movi	r2,61
8112cc08:	00000806 	br	8112cc2c <OSTaskDelReq+0x148>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
8112cc0c:	e0bffb17 	ldw	r2,-20(fp)
8112cc10:	00c00fc4 	movi	r3,63
8112cc14:	10c00dc5 	stb	r3,55(r2)
8112cc18:	e0bff617 	ldw	r2,-40(fp)
8112cc1c:	e0bffd15 	stw	r2,-12(fp)
8112cc20:	e0bffd17 	ldw	r2,-12(fp)
8112cc24:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112cc28:	0005883a 	mov	r2,zero
}
8112cc2c:	e037883a 	mov	sp,fp
8112cc30:	df000017 	ldw	fp,0(sp)
8112cc34:	dec00104 	addi	sp,sp,4
8112cc38:	f800283a 	ret

8112cc3c <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
8112cc3c:	defff404 	addi	sp,sp,-48
8112cc40:	de00012e 	bgeu	sp,et,8112cc48 <OSTaskNameGet+0xc>
8112cc44:	003b68fa 	trap	3
8112cc48:	dfc00b15 	stw	ra,44(sp)
8112cc4c:	df000a15 	stw	fp,40(sp)
8112cc50:	df000a04 	addi	fp,sp,40
8112cc54:	2005883a 	mov	r2,r4
8112cc58:	e17ffe15 	stw	r5,-8(fp)
8112cc5c:	e1bfff15 	stw	r6,-4(fp)
8112cc60:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
8112cc64:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
8112cc68:	e0bfff17 	ldw	r2,-4(fp)
8112cc6c:	1000021e 	bne	r2,zero,8112cc78 <OSTaskNameGet+0x3c>
        return (0);
8112cc70:	0005883a 	mov	r2,zero
8112cc74:	00005406 	br	8112cdc8 <OSTaskNameGet+0x18c>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
8112cc78:	e0bffd03 	ldbu	r2,-12(fp)
8112cc7c:	10800a70 	cmpltui	r2,r2,41
8112cc80:	1000081e 	bne	r2,zero,8112cca4 <OSTaskNameGet+0x68>
        if (prio != OS_PRIO_SELF) {
8112cc84:	e0bffd03 	ldbu	r2,-12(fp)
8112cc88:	10803fe0 	cmpeqi	r2,r2,255
8112cc8c:	1000051e 	bne	r2,zero,8112cca4 <OSTaskNameGet+0x68>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
8112cc90:	e0bfff17 	ldw	r2,-4(fp)
8112cc94:	00c00a84 	movi	r3,42
8112cc98:	10c00005 	stb	r3,0(r2)
            return (0);
8112cc9c:	0005883a 	mov	r2,zero
8112cca0:	00004906 	br	8112cdc8 <OSTaskNameGet+0x18c>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
8112cca4:	e0bffe17 	ldw	r2,-8(fp)
8112cca8:	1000051e 	bne	r2,zero,8112ccc0 <OSTaskNameGet+0x84>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
8112ccac:	e0bfff17 	ldw	r2,-4(fp)
8112ccb0:	00c00304 	movi	r3,12
8112ccb4:	10c00005 	stb	r3,0(r2)
        return (0);
8112ccb8:	0005883a 	mov	r2,zero
8112ccbc:	00004206 	br	8112cdc8 <OSTaskNameGet+0x18c>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
8112ccc0:	d0a08f03 	ldbu	r2,-32196(gp)
8112ccc4:	10803fcc 	andi	r2,r2,255
8112ccc8:	10000526 	beq	r2,zero,8112cce0 <OSTaskNameGet+0xa4>
        *perr = OS_ERR_NAME_GET_ISR;
8112cccc:	e0bfff17 	ldw	r2,-4(fp)
8112ccd0:	00c00444 	movi	r3,17
8112ccd4:	10c00005 	stb	r3,0(r2)
        return (0);
8112ccd8:	0005883a 	mov	r2,zero
8112ccdc:	00003a06 	br	8112cdc8 <OSTaskNameGet+0x18c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112cce0:	0005303a 	rdctl	r2,status
8112cce4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112cce8:	e0fffc17 	ldw	r3,-16(fp)
8112ccec:	00bfff84 	movi	r2,-2
8112ccf0:	1884703a 	and	r2,r3,r2
8112ccf4:	1001703a 	wrctl	status,r2
  
  return context;
8112ccf8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112ccfc:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
8112cd00:	e0bffd03 	ldbu	r2,-12(fp)
8112cd04:	10803fd8 	cmpnei	r2,r2,255
8112cd08:	1000031e 	bne	r2,zero,8112cd18 <OSTaskNameGet+0xdc>
        prio = OSTCBCur->OSTCBPrio;
8112cd0c:	d0a09017 	ldw	r2,-32192(gp)
8112cd10:	10800c83 	ldbu	r2,50(r2)
8112cd14:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
8112cd18:	e0fffd03 	ldbu	r3,-12(fp)
8112cd1c:	00a045b4 	movhi	r2,33046
8112cd20:	1094b404 	addi	r2,r2,21200
8112cd24:	18c7883a 	add	r3,r3,r3
8112cd28:	18c7883a 	add	r3,r3,r3
8112cd2c:	10c5883a 	add	r2,r2,r3
8112cd30:	10800017 	ldw	r2,0(r2)
8112cd34:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
8112cd38:	e0bff817 	ldw	r2,-32(fp)
8112cd3c:	1000091e 	bne	r2,zero,8112cd64 <OSTaskNameGet+0x128>
8112cd40:	e0bff617 	ldw	r2,-40(fp)
8112cd44:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112cd48:	e0bff717 	ldw	r2,-36(fp)
8112cd4c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
8112cd50:	e0bfff17 	ldw	r2,-4(fp)
8112cd54:	00c010c4 	movi	r3,67
8112cd58:	10c00005 	stb	r3,0(r2)
        return (0);
8112cd5c:	0005883a 	mov	r2,zero
8112cd60:	00001906 	br	8112cdc8 <OSTaskNameGet+0x18c>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
8112cd64:	e0bff817 	ldw	r2,-32(fp)
8112cd68:	10800058 	cmpnei	r2,r2,1
8112cd6c:	1000091e 	bne	r2,zero,8112cd94 <OSTaskNameGet+0x158>
8112cd70:	e0bff617 	ldw	r2,-40(fp)
8112cd74:	e0bff915 	stw	r2,-28(fp)
8112cd78:	e0bff917 	ldw	r2,-28(fp)
8112cd7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
8112cd80:	e0bfff17 	ldw	r2,-4(fp)
8112cd84:	00c010c4 	movi	r3,67
8112cd88:	10c00005 	stb	r3,0(r2)
        return (0);
8112cd8c:	0005883a 	mov	r2,zero
8112cd90:	00000d06 	br	8112cdc8 <OSTaskNameGet+0x18c>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
8112cd94:	e0bff817 	ldw	r2,-32(fp)
8112cd98:	10801304 	addi	r2,r2,76
8112cd9c:	100b883a 	mov	r5,r2
8112cda0:	e13ffe17 	ldw	r4,-8(fp)
8112cda4:	1126ae40 	call	81126ae4 <OS_StrCopy>
8112cda8:	e0bffb05 	stb	r2,-20(fp)
8112cdac:	e0bff617 	ldw	r2,-40(fp)
8112cdb0:	e0bffa15 	stw	r2,-24(fp)
8112cdb4:	e0bffa17 	ldw	r2,-24(fp)
8112cdb8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112cdbc:	e0bfff17 	ldw	r2,-4(fp)
8112cdc0:	10000005 	stb	zero,0(r2)
    return (len);
8112cdc4:	e0bffb03 	ldbu	r2,-20(fp)
}
8112cdc8:	e037883a 	mov	sp,fp
8112cdcc:	dfc00117 	ldw	ra,4(sp)
8112cdd0:	df000017 	ldw	fp,0(sp)
8112cdd4:	dec00204 	addi	sp,sp,8
8112cdd8:	f800283a 	ret

8112cddc <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
8112cddc:	defff304 	addi	sp,sp,-52
8112cde0:	de00012e 	bgeu	sp,et,8112cde8 <OSTaskNameSet+0xc>
8112cde4:	003b68fa 	trap	3
8112cde8:	dfc00c15 	stw	ra,48(sp)
8112cdec:	df000b15 	stw	fp,44(sp)
8112cdf0:	df000b04 	addi	fp,sp,44
8112cdf4:	2005883a 	mov	r2,r4
8112cdf8:	e17ffe15 	stw	r5,-8(fp)
8112cdfc:	e1bfff15 	stw	r6,-4(fp)
8112ce00:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
8112ce04:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
8112ce08:	e0bfff17 	ldw	r2,-4(fp)
8112ce0c:	10005c26 	beq	r2,zero,8112cf80 <OSTaskNameSet+0x1a4>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
8112ce10:	e0bffd03 	ldbu	r2,-12(fp)
8112ce14:	10800a70 	cmpltui	r2,r2,41
8112ce18:	1000071e 	bne	r2,zero,8112ce38 <OSTaskNameSet+0x5c>
        if (prio != OS_PRIO_SELF) {
8112ce1c:	e0bffd03 	ldbu	r2,-12(fp)
8112ce20:	10803fe0 	cmpeqi	r2,r2,255
8112ce24:	1000041e 	bne	r2,zero,8112ce38 <OSTaskNameSet+0x5c>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
8112ce28:	e0bfff17 	ldw	r2,-4(fp)
8112ce2c:	00c00a84 	movi	r3,42
8112ce30:	10c00005 	stb	r3,0(r2)
            return;
8112ce34:	00005306 	br	8112cf84 <OSTaskNameSet+0x1a8>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
8112ce38:	e0bffe17 	ldw	r2,-8(fp)
8112ce3c:	1000041e 	bne	r2,zero,8112ce50 <OSTaskNameSet+0x74>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
8112ce40:	e0bfff17 	ldw	r2,-4(fp)
8112ce44:	00c00304 	movi	r3,12
8112ce48:	10c00005 	stb	r3,0(r2)
        return;
8112ce4c:	00004d06 	br	8112cf84 <OSTaskNameSet+0x1a8>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
8112ce50:	d0a08f03 	ldbu	r2,-32196(gp)
8112ce54:	10803fcc 	andi	r2,r2,255
8112ce58:	10000426 	beq	r2,zero,8112ce6c <OSTaskNameSet+0x90>
        *perr = OS_ERR_NAME_SET_ISR;
8112ce5c:	e0bfff17 	ldw	r2,-4(fp)
8112ce60:	00c00484 	movi	r3,18
8112ce64:	10c00005 	stb	r3,0(r2)
        return;
8112ce68:	00004606 	br	8112cf84 <OSTaskNameSet+0x1a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112ce6c:	0005303a 	rdctl	r2,status
8112ce70:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112ce74:	e0fffc17 	ldw	r3,-16(fp)
8112ce78:	00bfff84 	movi	r2,-2
8112ce7c:	1884703a 	and	r2,r3,r2
8112ce80:	1001703a 	wrctl	status,r2
  
  return context;
8112ce84:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112ce88:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
8112ce8c:	e0bffd03 	ldbu	r2,-12(fp)
8112ce90:	10803fd8 	cmpnei	r2,r2,255
8112ce94:	1000031e 	bne	r2,zero,8112cea4 <OSTaskNameSet+0xc8>
        prio = OSTCBCur->OSTCBPrio;
8112ce98:	d0a09017 	ldw	r2,-32192(gp)
8112ce9c:	10800c83 	ldbu	r2,50(r2)
8112cea0:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
8112cea4:	e0fffd03 	ldbu	r3,-12(fp)
8112cea8:	00a045b4 	movhi	r2,33046
8112ceac:	1094b404 	addi	r2,r2,21200
8112ceb0:	18c7883a 	add	r3,r3,r3
8112ceb4:	18c7883a 	add	r3,r3,r3
8112ceb8:	10c5883a 	add	r2,r2,r3
8112cebc:	10800017 	ldw	r2,0(r2)
8112cec0:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
8112cec4:	e0bff717 	ldw	r2,-36(fp)
8112cec8:	1000081e 	bne	r2,zero,8112ceec <OSTaskNameSet+0x110>
8112cecc:	e0bff517 	ldw	r2,-44(fp)
8112ced0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112ced4:	e0bff617 	ldw	r2,-40(fp)
8112ced8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
8112cedc:	e0bfff17 	ldw	r2,-4(fp)
8112cee0:	00c010c4 	movi	r3,67
8112cee4:	10c00005 	stb	r3,0(r2)
        return;
8112cee8:	00002606 	br	8112cf84 <OSTaskNameSet+0x1a8>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
8112ceec:	e0bff717 	ldw	r2,-36(fp)
8112cef0:	10800058 	cmpnei	r2,r2,1
8112cef4:	1000081e 	bne	r2,zero,8112cf18 <OSTaskNameSet+0x13c>
8112cef8:	e0bff517 	ldw	r2,-44(fp)
8112cefc:	e0bff815 	stw	r2,-32(fp)
8112cf00:	e0bff817 	ldw	r2,-32(fp)
8112cf04:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
8112cf08:	e0bfff17 	ldw	r2,-4(fp)
8112cf0c:	00c010c4 	movi	r3,67
8112cf10:	10c00005 	stb	r3,0(r2)
        return;
8112cf14:	00001b06 	br	8112cf84 <OSTaskNameSet+0x1a8>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
8112cf18:	e13ffe17 	ldw	r4,-8(fp)
8112cf1c:	1126b600 	call	81126b60 <OS_StrLen>
8112cf20:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
8112cf24:	e0bffa03 	ldbu	r2,-24(fp)
8112cf28:	10800830 	cmpltui	r2,r2,32
8112cf2c:	1000081e 	bne	r2,zero,8112cf50 <OSTaskNameSet+0x174>
8112cf30:	e0bff517 	ldw	r2,-44(fp)
8112cf34:	e0bff915 	stw	r2,-28(fp)
8112cf38:	e0bff917 	ldw	r2,-28(fp)
8112cf3c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
8112cf40:	e0bfff17 	ldw	r2,-4(fp)
8112cf44:	00c01044 	movi	r3,65
8112cf48:	10c00005 	stb	r3,0(r2)
        return;
8112cf4c:	00000d06 	br	8112cf84 <OSTaskNameSet+0x1a8>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
8112cf50:	e0bff717 	ldw	r2,-36(fp)
8112cf54:	10801304 	addi	r2,r2,76
8112cf58:	e17ffe17 	ldw	r5,-8(fp)
8112cf5c:	1009883a 	mov	r4,r2
8112cf60:	1126ae40 	call	81126ae4 <OS_StrCopy>
8112cf64:	e0bff517 	ldw	r2,-44(fp)
8112cf68:	e0bffb15 	stw	r2,-20(fp)
8112cf6c:	e0bffb17 	ldw	r2,-20(fp)
8112cf70:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112cf74:	e0bfff17 	ldw	r2,-4(fp)
8112cf78:	10000005 	stb	zero,0(r2)
8112cf7c:	00000106 	br	8112cf84 <OSTaskNameSet+0x1a8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
8112cf80:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
8112cf84:	e037883a 	mov	sp,fp
8112cf88:	dfc00117 	ldw	ra,4(sp)
8112cf8c:	df000017 	ldw	fp,0(sp)
8112cf90:	dec00204 	addi	sp,sp,8
8112cf94:	f800283a 	ret

8112cf98 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
8112cf98:	defff404 	addi	sp,sp,-48
8112cf9c:	de00012e 	bgeu	sp,et,8112cfa4 <OSTaskResume+0xc>
8112cfa0:	003b68fa 	trap	3
8112cfa4:	dfc00b15 	stw	ra,44(sp)
8112cfa8:	df000a15 	stw	fp,40(sp)
8112cfac:	df000a04 	addi	fp,sp,40
8112cfb0:	2005883a 	mov	r2,r4
8112cfb4:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
8112cfb8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
8112cfbc:	e0bfff03 	ldbu	r2,-4(fp)
8112cfc0:	10800a30 	cmpltui	r2,r2,40
8112cfc4:	1000021e 	bne	r2,zero,8112cfd0 <OSTaskResume+0x38>
        return (OS_ERR_PRIO_INVALID);
8112cfc8:	00800a84 	movi	r2,42
8112cfcc:	00006406 	br	8112d160 <OSTaskResume+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112cfd0:	0005303a 	rdctl	r2,status
8112cfd4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112cfd8:	e0fffe17 	ldw	r3,-8(fp)
8112cfdc:	00bfff84 	movi	r2,-2
8112cfe0:	1884703a 	and	r2,r3,r2
8112cfe4:	1001703a 	wrctl	status,r2
  
  return context;
8112cfe8:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8112cfec:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
8112cff0:	e0ffff03 	ldbu	r3,-4(fp)
8112cff4:	00a045b4 	movhi	r2,33046
8112cff8:	1094b404 	addi	r2,r2,21200
8112cffc:	18c7883a 	add	r3,r3,r3
8112d000:	18c7883a 	add	r3,r3,r3
8112d004:	10c5883a 	add	r2,r2,r3
8112d008:	10800017 	ldw	r2,0(r2)
8112d00c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
8112d010:	e0bff817 	ldw	r2,-32(fp)
8112d014:	1000061e 	bne	r2,zero,8112d030 <OSTaskResume+0x98>
8112d018:	e0bff617 	ldw	r2,-40(fp)
8112d01c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112d020:	e0bff717 	ldw	r2,-36(fp)
8112d024:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
8112d028:	00801184 	movi	r2,70
8112d02c:	00004c06 	br	8112d160 <OSTaskResume+0x1c8>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
8112d030:	e0bff817 	ldw	r2,-32(fp)
8112d034:	10800058 	cmpnei	r2,r2,1
8112d038:	1000061e 	bne	r2,zero,8112d054 <OSTaskResume+0xbc>
8112d03c:	e0bff617 	ldw	r2,-40(fp)
8112d040:	e0bff915 	stw	r2,-28(fp)
8112d044:	e0bff917 	ldw	r2,-28(fp)
8112d048:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
8112d04c:	008010c4 	movi	r2,67
8112d050:	00004306 	br	8112d160 <OSTaskResume+0x1c8>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
8112d054:	e0bff817 	ldw	r2,-32(fp)
8112d058:	10800c03 	ldbu	r2,48(r2)
8112d05c:	10803fcc 	andi	r2,r2,255
8112d060:	1080020c 	andi	r2,r2,8
8112d064:	10003926 	beq	r2,zero,8112d14c <OSTaskResume+0x1b4>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
8112d068:	e0bff817 	ldw	r2,-32(fp)
8112d06c:	10c00c03 	ldbu	r3,48(r2)
8112d070:	00bffdc4 	movi	r2,-9
8112d074:	1884703a 	and	r2,r3,r2
8112d078:	1007883a 	mov	r3,r2
8112d07c:	e0bff817 	ldw	r2,-32(fp)
8112d080:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
8112d084:	e0bff817 	ldw	r2,-32(fp)
8112d088:	10800c03 	ldbu	r2,48(r2)
8112d08c:	10803fcc 	andi	r2,r2,255
8112d090:	1000281e 	bne	r2,zero,8112d134 <OSTaskResume+0x19c>
            if (ptcb->OSTCBDly == 0) {
8112d094:	e0bff817 	ldw	r2,-32(fp)
8112d098:	10800b8b 	ldhu	r2,46(r2)
8112d09c:	10bfffcc 	andi	r2,r2,65535
8112d0a0:	10001f1e 	bne	r2,zero,8112d120 <OSTaskResume+0x188>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
8112d0a4:	e0bff817 	ldw	r2,-32(fp)
8112d0a8:	10c00d83 	ldbu	r3,54(r2)
8112d0ac:	d0a08c03 	ldbu	r2,-32208(gp)
8112d0b0:	1884b03a 	or	r2,r3,r2
8112d0b4:	d0a08c05 	stb	r2,-32208(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
8112d0b8:	e0bff817 	ldw	r2,-32(fp)
8112d0bc:	10800d03 	ldbu	r2,52(r2)
8112d0c0:	10c03fcc 	andi	r3,r2,255
8112d0c4:	e0bff817 	ldw	r2,-32(fp)
8112d0c8:	10800d03 	ldbu	r2,52(r2)
8112d0cc:	11003fcc 	andi	r4,r2,255
8112d0d0:	d0a08c44 	addi	r2,gp,-32207
8112d0d4:	2085883a 	add	r2,r4,r2
8112d0d8:	11000003 	ldbu	r4,0(r2)
8112d0dc:	e0bff817 	ldw	r2,-32(fp)
8112d0e0:	10800d43 	ldbu	r2,53(r2)
8112d0e4:	2084b03a 	or	r2,r4,r2
8112d0e8:	1009883a 	mov	r4,r2
8112d0ec:	d0a08c44 	addi	r2,gp,-32207
8112d0f0:	1885883a 	add	r2,r3,r2
8112d0f4:	11000005 	stb	r4,0(r2)
8112d0f8:	e0bff617 	ldw	r2,-40(fp)
8112d0fc:	e0bffa15 	stw	r2,-24(fp)
8112d100:	e0bffa17 	ldw	r2,-24(fp)
8112d104:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
8112d108:	d0a07f03 	ldbu	r2,-32260(gp)
8112d10c:	10803fcc 	andi	r2,r2,255
8112d110:	10800058 	cmpnei	r2,r2,1
8112d114:	10000b1e 	bne	r2,zero,8112d144 <OSTaskResume+0x1ac>
                    OS_Sched();                               /* Find new highest priority task        */
8112d118:	11269900 	call	81126990 <OS_Sched>
8112d11c:	00000906 	br	8112d144 <OSTaskResume+0x1ac>
8112d120:	e0bff617 	ldw	r2,-40(fp)
8112d124:	e0bffb15 	stw	r2,-20(fp)
8112d128:	e0bffb17 	ldw	r2,-20(fp)
8112d12c:	1001703a 	wrctl	status,r2
8112d130:	00000406 	br	8112d144 <OSTaskResume+0x1ac>
8112d134:	e0bff617 	ldw	r2,-40(fp)
8112d138:	e0bffc15 	stw	r2,-16(fp)
8112d13c:	e0bffc17 	ldw	r2,-16(fp)
8112d140:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
8112d144:	0005883a 	mov	r2,zero
8112d148:	00000506 	br	8112d160 <OSTaskResume+0x1c8>
8112d14c:	e0bff617 	ldw	r2,-40(fp)
8112d150:	e0bffd15 	stw	r2,-12(fp)
8112d154:	e0bffd17 	ldw	r2,-12(fp)
8112d158:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
8112d15c:	00801104 	movi	r2,68
}
8112d160:	e037883a 	mov	sp,fp
8112d164:	dfc00117 	ldw	ra,4(sp)
8112d168:	df000017 	ldw	fp,0(sp)
8112d16c:	dec00204 	addi	sp,sp,8
8112d170:	f800283a 	ret

8112d174 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
8112d174:	defff304 	addi	sp,sp,-52
8112d178:	de00012e 	bgeu	sp,et,8112d180 <OSTaskStkChk+0xc>
8112d17c:	003b68fa 	trap	3
8112d180:	df000c15 	stw	fp,48(sp)
8112d184:	df000c04 	addi	fp,sp,48
8112d188:	2005883a 	mov	r2,r4
8112d18c:	e17fff15 	stw	r5,-4(fp)
8112d190:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
8112d194:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
8112d198:	e0bffe03 	ldbu	r2,-8(fp)
8112d19c:	10800a70 	cmpltui	r2,r2,41
8112d1a0:	1000051e 	bne	r2,zero,8112d1b8 <OSTaskStkChk+0x44>
        if (prio != OS_PRIO_SELF) {
8112d1a4:	e0bffe03 	ldbu	r2,-8(fp)
8112d1a8:	10803fe0 	cmpeqi	r2,r2,255
8112d1ac:	1000021e 	bne	r2,zero,8112d1b8 <OSTaskStkChk+0x44>
            return (OS_ERR_PRIO_INVALID);
8112d1b0:	00800a84 	movi	r2,42
8112d1b4:	00005d06 	br	8112d32c <OSTaskStkChk+0x1b8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
8112d1b8:	e0bfff17 	ldw	r2,-4(fp)
8112d1bc:	1000021e 	bne	r2,zero,8112d1c8 <OSTaskStkChk+0x54>
        return (OS_ERR_PDATA_NULL);
8112d1c0:	00800244 	movi	r2,9
8112d1c4:	00005906 	br	8112d32c <OSTaskStkChk+0x1b8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
8112d1c8:	e0bfff17 	ldw	r2,-4(fp)
8112d1cc:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
8112d1d0:	e0bfff17 	ldw	r2,-4(fp)
8112d1d4:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112d1d8:	0005303a 	rdctl	r2,status
8112d1dc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112d1e0:	e0fffd17 	ldw	r3,-12(fp)
8112d1e4:	00bfff84 	movi	r2,-2
8112d1e8:	1884703a 	and	r2,r3,r2
8112d1ec:	1001703a 	wrctl	status,r2
  
  return context;
8112d1f0:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
8112d1f4:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
8112d1f8:	e0bffe03 	ldbu	r2,-8(fp)
8112d1fc:	10803fd8 	cmpnei	r2,r2,255
8112d200:	1000031e 	bne	r2,zero,8112d210 <OSTaskStkChk+0x9c>
        prio = OSTCBCur->OSTCBPrio;
8112d204:	d0a09017 	ldw	r2,-32192(gp)
8112d208:	10800c83 	ldbu	r2,50(r2)
8112d20c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
8112d210:	e0fffe03 	ldbu	r3,-8(fp)
8112d214:	00a045b4 	movhi	r2,33046
8112d218:	1094b404 	addi	r2,r2,21200
8112d21c:	18c7883a 	add	r3,r3,r3
8112d220:	18c7883a 	add	r3,r3,r3
8112d224:	10c5883a 	add	r2,r2,r3
8112d228:	10800017 	ldw	r2,0(r2)
8112d22c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
8112d230:	e0bff817 	ldw	r2,-32(fp)
8112d234:	1000061e 	bne	r2,zero,8112d250 <OSTaskStkChk+0xdc>
8112d238:	e0bff617 	ldw	r2,-40(fp)
8112d23c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112d240:	e0bff717 	ldw	r2,-36(fp)
8112d244:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
8112d248:	008010c4 	movi	r2,67
8112d24c:	00003706 	br	8112d32c <OSTaskStkChk+0x1b8>
    }
    if (ptcb == OS_TCB_RESERVED) {
8112d250:	e0bff817 	ldw	r2,-32(fp)
8112d254:	10800058 	cmpnei	r2,r2,1
8112d258:	1000061e 	bne	r2,zero,8112d274 <OSTaskStkChk+0x100>
8112d25c:	e0bff617 	ldw	r2,-40(fp)
8112d260:	e0bff915 	stw	r2,-28(fp)
8112d264:	e0bff917 	ldw	r2,-28(fp)
8112d268:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
8112d26c:	008010c4 	movi	r2,67
8112d270:	00002e06 	br	8112d32c <OSTaskStkChk+0x1b8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
8112d274:	e0bff817 	ldw	r2,-32(fp)
8112d278:	1080040b 	ldhu	r2,16(r2)
8112d27c:	10bfffcc 	andi	r2,r2,65535
8112d280:	1080004c 	andi	r2,r2,1
8112d284:	1000061e 	bne	r2,zero,8112d2a0 <OSTaskStkChk+0x12c>
8112d288:	e0bff617 	ldw	r2,-40(fp)
8112d28c:	e0bffa15 	stw	r2,-24(fp)
8112d290:	e0bffa17 	ldw	r2,-24(fp)
8112d294:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
8112d298:	00801144 	movi	r2,69
8112d29c:	00002306 	br	8112d32c <OSTaskStkChk+0x1b8>
    }
    nfree = 0;
8112d2a0:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
8112d2a4:	e0bff817 	ldw	r2,-32(fp)
8112d2a8:	10800317 	ldw	r2,12(r2)
8112d2ac:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
8112d2b0:	e0bff817 	ldw	r2,-32(fp)
8112d2b4:	10800217 	ldw	r2,8(r2)
8112d2b8:	e0bff415 	stw	r2,-48(fp)
8112d2bc:	e0bff617 	ldw	r2,-40(fp)
8112d2c0:	e0bffb15 	stw	r2,-20(fp)
8112d2c4:	e0bffb17 	ldw	r2,-20(fp)
8112d2c8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
8112d2cc:	00000306 	br	8112d2dc <OSTaskStkChk+0x168>
        nfree++;
8112d2d0:	e0bff517 	ldw	r2,-44(fp)
8112d2d4:	10800044 	addi	r2,r2,1
8112d2d8:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
8112d2dc:	e0bff417 	ldw	r2,-48(fp)
8112d2e0:	10c00104 	addi	r3,r2,4
8112d2e4:	e0fff415 	stw	r3,-48(fp)
8112d2e8:	10800017 	ldw	r2,0(r2)
8112d2ec:	103ff826 	beq	r2,zero,8112d2d0 <__reset+0xfb10d2d0>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
8112d2f0:	e0bff517 	ldw	r2,-44(fp)
8112d2f4:	1085883a 	add	r2,r2,r2
8112d2f8:	1085883a 	add	r2,r2,r2
8112d2fc:	1007883a 	mov	r3,r2
8112d300:	e0bfff17 	ldw	r2,-4(fp)
8112d304:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
8112d308:	e0fffc17 	ldw	r3,-16(fp)
8112d30c:	e0bff517 	ldw	r2,-44(fp)
8112d310:	1885c83a 	sub	r2,r3,r2
8112d314:	1085883a 	add	r2,r2,r2
8112d318:	1085883a 	add	r2,r2,r2
8112d31c:	1007883a 	mov	r3,r2
8112d320:	e0bfff17 	ldw	r2,-4(fp)
8112d324:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
8112d328:	0005883a 	mov	r2,zero
}
8112d32c:	e037883a 	mov	sp,fp
8112d330:	df000017 	ldw	fp,0(sp)
8112d334:	dec00104 	addi	sp,sp,4
8112d338:	f800283a 	ret

8112d33c <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
8112d33c:	defff504 	addi	sp,sp,-44
8112d340:	de00012e 	bgeu	sp,et,8112d348 <OSTaskSuspend+0xc>
8112d344:	003b68fa 	trap	3
8112d348:	dfc00a15 	stw	ra,40(sp)
8112d34c:	df000915 	stw	fp,36(sp)
8112d350:	df000904 	addi	fp,sp,36
8112d354:	2005883a 	mov	r2,r4
8112d358:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112d35c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
8112d360:	e0bfff03 	ldbu	r2,-4(fp)
8112d364:	10800a18 	cmpnei	r2,r2,40
8112d368:	1000021e 	bne	r2,zero,8112d374 <OSTaskSuspend+0x38>
        return (OS_ERR_TASK_SUSPEND_IDLE);
8112d36c:	008011c4 	movi	r2,71
8112d370:	00006806 	br	8112d514 <OSTaskSuspend+0x1d8>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
8112d374:	e0bfff03 	ldbu	r2,-4(fp)
8112d378:	10800a30 	cmpltui	r2,r2,40
8112d37c:	1000051e 	bne	r2,zero,8112d394 <OSTaskSuspend+0x58>
        if (prio != OS_PRIO_SELF) {
8112d380:	e0bfff03 	ldbu	r2,-4(fp)
8112d384:	10803fe0 	cmpeqi	r2,r2,255
8112d388:	1000021e 	bne	r2,zero,8112d394 <OSTaskSuspend+0x58>
            return (OS_ERR_PRIO_INVALID);
8112d38c:	00800a84 	movi	r2,42
8112d390:	00006006 	br	8112d514 <OSTaskSuspend+0x1d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112d394:	0005303a 	rdctl	r2,status
8112d398:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112d39c:	e0fffe17 	ldw	r3,-8(fp)
8112d3a0:	00bfff84 	movi	r2,-2
8112d3a4:	1884703a 	and	r2,r3,r2
8112d3a8:	1001703a 	wrctl	status,r2
  
  return context;
8112d3ac:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
8112d3b0:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
8112d3b4:	e0bfff03 	ldbu	r2,-4(fp)
8112d3b8:	10803fd8 	cmpnei	r2,r2,255
8112d3bc:	1000061e 	bne	r2,zero,8112d3d8 <OSTaskSuspend+0x9c>
        prio = OSTCBCur->OSTCBPrio;
8112d3c0:	d0a09017 	ldw	r2,-32192(gp)
8112d3c4:	10800c83 	ldbu	r2,50(r2)
8112d3c8:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
8112d3cc:	00800044 	movi	r2,1
8112d3d0:	e0bff705 	stb	r2,-36(fp)
8112d3d4:	00000906 	br	8112d3fc <OSTaskSuspend+0xc0>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
8112d3d8:	d0a09017 	ldw	r2,-32192(gp)
8112d3dc:	10800c83 	ldbu	r2,50(r2)
8112d3e0:	10c03fcc 	andi	r3,r2,255
8112d3e4:	e0bfff03 	ldbu	r2,-4(fp)
8112d3e8:	1880031e 	bne	r3,r2,8112d3f8 <OSTaskSuspend+0xbc>
        self = OS_TRUE;
8112d3ec:	00800044 	movi	r2,1
8112d3f0:	e0bff705 	stb	r2,-36(fp)
8112d3f4:	00000106 	br	8112d3fc <OSTaskSuspend+0xc0>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
8112d3f8:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
8112d3fc:	e0ffff03 	ldbu	r3,-4(fp)
8112d400:	00a045b4 	movhi	r2,33046
8112d404:	1094b404 	addi	r2,r2,21200
8112d408:	18c7883a 	add	r3,r3,r3
8112d40c:	18c7883a 	add	r3,r3,r3
8112d410:	10c5883a 	add	r2,r2,r3
8112d414:	10800017 	ldw	r2,0(r2)
8112d418:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
8112d41c:	e0bffa17 	ldw	r2,-24(fp)
8112d420:	1000061e 	bne	r2,zero,8112d43c <OSTaskSuspend+0x100>
8112d424:	e0bff817 	ldw	r2,-32(fp)
8112d428:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112d42c:	e0bff917 	ldw	r2,-28(fp)
8112d430:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
8112d434:	00801204 	movi	r2,72
8112d438:	00003606 	br	8112d514 <OSTaskSuspend+0x1d8>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
8112d43c:	e0bffa17 	ldw	r2,-24(fp)
8112d440:	10800058 	cmpnei	r2,r2,1
8112d444:	1000061e 	bne	r2,zero,8112d460 <OSTaskSuspend+0x124>
8112d448:	e0bff817 	ldw	r2,-32(fp)
8112d44c:	e0bffb15 	stw	r2,-20(fp)
8112d450:	e0bffb17 	ldw	r2,-20(fp)
8112d454:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
8112d458:	008010c4 	movi	r2,67
8112d45c:	00002d06 	br	8112d514 <OSTaskSuspend+0x1d8>
    }
    y            = ptcb->OSTCBY;
8112d460:	e0bffa17 	ldw	r2,-24(fp)
8112d464:	10800d03 	ldbu	r2,52(r2)
8112d468:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
8112d46c:	e0fffd03 	ldbu	r3,-12(fp)
8112d470:	e13ffd03 	ldbu	r4,-12(fp)
8112d474:	d0a08c44 	addi	r2,gp,-32207
8112d478:	2085883a 	add	r2,r4,r2
8112d47c:	10800003 	ldbu	r2,0(r2)
8112d480:	1009883a 	mov	r4,r2
8112d484:	e0bffa17 	ldw	r2,-24(fp)
8112d488:	10800d43 	ldbu	r2,53(r2)
8112d48c:	0084303a 	nor	r2,zero,r2
8112d490:	2084703a 	and	r2,r4,r2
8112d494:	1009883a 	mov	r4,r2
8112d498:	d0a08c44 	addi	r2,gp,-32207
8112d49c:	1885883a 	add	r2,r3,r2
8112d4a0:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
8112d4a4:	e0fffd03 	ldbu	r3,-12(fp)
8112d4a8:	d0a08c44 	addi	r2,gp,-32207
8112d4ac:	1885883a 	add	r2,r3,r2
8112d4b0:	10800003 	ldbu	r2,0(r2)
8112d4b4:	10803fcc 	andi	r2,r2,255
8112d4b8:	1000071e 	bne	r2,zero,8112d4d8 <OSTaskSuspend+0x19c>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
8112d4bc:	e0bffa17 	ldw	r2,-24(fp)
8112d4c0:	10800d83 	ldbu	r2,54(r2)
8112d4c4:	0084303a 	nor	r2,zero,r2
8112d4c8:	1007883a 	mov	r3,r2
8112d4cc:	d0a08c03 	ldbu	r2,-32208(gp)
8112d4d0:	1884703a 	and	r2,r3,r2
8112d4d4:	d0a08c05 	stb	r2,-32208(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
8112d4d8:	e0bffa17 	ldw	r2,-24(fp)
8112d4dc:	10800c03 	ldbu	r2,48(r2)
8112d4e0:	10800214 	ori	r2,r2,8
8112d4e4:	1007883a 	mov	r3,r2
8112d4e8:	e0bffa17 	ldw	r2,-24(fp)
8112d4ec:	10c00c05 	stb	r3,48(r2)
8112d4f0:	e0bff817 	ldw	r2,-32(fp)
8112d4f4:	e0bffc15 	stw	r2,-16(fp)
8112d4f8:	e0bffc17 	ldw	r2,-16(fp)
8112d4fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
8112d500:	e0bff703 	ldbu	r2,-36(fp)
8112d504:	10800058 	cmpnei	r2,r2,1
8112d508:	1000011e 	bne	r2,zero,8112d510 <OSTaskSuspend+0x1d4>
        OS_Sched();                                             /* Find new highest priority task      */
8112d50c:	11269900 	call	81126990 <OS_Sched>
    }
    return (OS_ERR_NONE);
8112d510:	0005883a 	mov	r2,zero
}
8112d514:	e037883a 	mov	sp,fp
8112d518:	dfc00117 	ldw	ra,4(sp)
8112d51c:	df000017 	ldw	fp,0(sp)
8112d520:	dec00204 	addi	sp,sp,8
8112d524:	f800283a 	ret

8112d528 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
8112d528:	defff604 	addi	sp,sp,-40
8112d52c:	de00012e 	bgeu	sp,et,8112d534 <OSTaskQuery+0xc>
8112d530:	003b68fa 	trap	3
8112d534:	dfc00915 	stw	ra,36(sp)
8112d538:	df000815 	stw	fp,32(sp)
8112d53c:	df000804 	addi	fp,sp,32
8112d540:	2005883a 	mov	r2,r4
8112d544:	e17fff15 	stw	r5,-4(fp)
8112d548:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112d54c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
8112d550:	e0bffe03 	ldbu	r2,-8(fp)
8112d554:	10800a70 	cmpltui	r2,r2,41
8112d558:	1000051e 	bne	r2,zero,8112d570 <OSTaskQuery+0x48>
        if (prio != OS_PRIO_SELF) {
8112d55c:	e0bffe03 	ldbu	r2,-8(fp)
8112d560:	10803fe0 	cmpeqi	r2,r2,255
8112d564:	1000021e 	bne	r2,zero,8112d570 <OSTaskQuery+0x48>
            return (OS_ERR_PRIO_INVALID);
8112d568:	00800a84 	movi	r2,42
8112d56c:	00003406 	br	8112d640 <OSTaskQuery+0x118>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
8112d570:	e0bfff17 	ldw	r2,-4(fp)
8112d574:	1000021e 	bne	r2,zero,8112d580 <OSTaskQuery+0x58>
        return (OS_ERR_PDATA_NULL);
8112d578:	00800244 	movi	r2,9
8112d57c:	00003006 	br	8112d640 <OSTaskQuery+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112d580:	0005303a 	rdctl	r2,status
8112d584:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112d588:	e0fffd17 	ldw	r3,-12(fp)
8112d58c:	00bfff84 	movi	r2,-2
8112d590:	1884703a 	and	r2,r3,r2
8112d594:	1001703a 	wrctl	status,r2
  
  return context;
8112d598:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8112d59c:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
8112d5a0:	e0bffe03 	ldbu	r2,-8(fp)
8112d5a4:	10803fd8 	cmpnei	r2,r2,255
8112d5a8:	1000031e 	bne	r2,zero,8112d5b8 <OSTaskQuery+0x90>
        prio = OSTCBCur->OSTCBPrio;
8112d5ac:	d0a09017 	ldw	r2,-32192(gp)
8112d5b0:	10800c83 	ldbu	r2,50(r2)
8112d5b4:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
8112d5b8:	e0fffe03 	ldbu	r3,-8(fp)
8112d5bc:	00a045b4 	movhi	r2,33046
8112d5c0:	1094b404 	addi	r2,r2,21200
8112d5c4:	18c7883a 	add	r3,r3,r3
8112d5c8:	18c7883a 	add	r3,r3,r3
8112d5cc:	10c5883a 	add	r2,r2,r3
8112d5d0:	10800017 	ldw	r2,0(r2)
8112d5d4:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
8112d5d8:	e0bffa17 	ldw	r2,-24(fp)
8112d5dc:	1000061e 	bne	r2,zero,8112d5f8 <OSTaskQuery+0xd0>
8112d5e0:	e0bff817 	ldw	r2,-32(fp)
8112d5e4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112d5e8:	e0bff917 	ldw	r2,-28(fp)
8112d5ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
8112d5f0:	00800a44 	movi	r2,41
8112d5f4:	00001206 	br	8112d640 <OSTaskQuery+0x118>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
8112d5f8:	e0bffa17 	ldw	r2,-24(fp)
8112d5fc:	10800058 	cmpnei	r2,r2,1
8112d600:	1000061e 	bne	r2,zero,8112d61c <OSTaskQuery+0xf4>
8112d604:	e0bff817 	ldw	r2,-32(fp)
8112d608:	e0bffb15 	stw	r2,-20(fp)
8112d60c:	e0bffb17 	ldw	r2,-20(fp)
8112d610:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
8112d614:	008010c4 	movi	r2,67
8112d618:	00000906 	br	8112d640 <OSTaskQuery+0x118>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
8112d61c:	01801b04 	movi	r6,108
8112d620:	e17ffa17 	ldw	r5,-24(fp)
8112d624:	e13fff17 	ldw	r4,-4(fp)
8112d628:	11269200 	call	81126920 <OS_MemCopy>
8112d62c:	e0bff817 	ldw	r2,-32(fp)
8112d630:	e0bffc15 	stw	r2,-16(fp)
8112d634:	e0bffc17 	ldw	r2,-16(fp)
8112d638:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112d63c:	0005883a 	mov	r2,zero
}
8112d640:	e037883a 	mov	sp,fp
8112d644:	dfc00117 	ldw	ra,4(sp)
8112d648:	df000017 	ldw	fp,0(sp)
8112d64c:	dec00204 	addi	sp,sp,8
8112d650:	f800283a 	ret

8112d654 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
8112d654:	defffc04 	addi	sp,sp,-16
8112d658:	de00012e 	bgeu	sp,et,8112d660 <OS_TaskStkClr+0xc>
8112d65c:	003b68fa 	trap	3
8112d660:	df000315 	stw	fp,12(sp)
8112d664:	df000304 	addi	fp,sp,12
8112d668:	e13ffd15 	stw	r4,-12(fp)
8112d66c:	e17ffe15 	stw	r5,-8(fp)
8112d670:	3005883a 	mov	r2,r6
8112d674:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
8112d678:	e0bfff0b 	ldhu	r2,-4(fp)
8112d67c:	1080004c 	andi	r2,r2,1
8112d680:	10000d26 	beq	r2,zero,8112d6b8 <OS_TaskStkClr+0x64>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
8112d684:	e0bfff0b 	ldhu	r2,-4(fp)
8112d688:	1080008c 	andi	r2,r2,2
8112d68c:	10000a26 	beq	r2,zero,8112d6b8 <OS_TaskStkClr+0x64>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
8112d690:	00000706 	br	8112d6b0 <OS_TaskStkClr+0x5c>
                size--;
8112d694:	e0bffe17 	ldw	r2,-8(fp)
8112d698:	10bfffc4 	addi	r2,r2,-1
8112d69c:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
8112d6a0:	e0bffd17 	ldw	r2,-12(fp)
8112d6a4:	10c00104 	addi	r3,r2,4
8112d6a8:	e0fffd15 	stw	r3,-12(fp)
8112d6ac:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
8112d6b0:	e0bffe17 	ldw	r2,-8(fp)
8112d6b4:	103ff71e 	bne	r2,zero,8112d694 <__reset+0xfb10d694>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
8112d6b8:	0001883a 	nop
8112d6bc:	e037883a 	mov	sp,fp
8112d6c0:	df000017 	ldw	fp,0(sp)
8112d6c4:	dec00104 	addi	sp,sp,4
8112d6c8:	f800283a 	ret

8112d6cc <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
8112d6cc:	defff904 	addi	sp,sp,-28
8112d6d0:	de00012e 	bgeu	sp,et,8112d6d8 <OSTimeDly+0xc>
8112d6d4:	003b68fa 	trap	3
8112d6d8:	dfc00615 	stw	ra,24(sp)
8112d6dc:	df000515 	stw	fp,20(sp)
8112d6e0:	df000504 	addi	fp,sp,20
8112d6e4:	2005883a 	mov	r2,r4
8112d6e8:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112d6ec:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
8112d6f0:	d0a08f03 	ldbu	r2,-32196(gp)
8112d6f4:	10803fcc 	andi	r2,r2,255
8112d6f8:	1000311e 	bne	r2,zero,8112d7c0 <OSTimeDly+0xf4>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
8112d6fc:	e0bfff0b 	ldhu	r2,-4(fp)
8112d700:	10003026 	beq	r2,zero,8112d7c4 <OSTimeDly+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112d704:	0005303a 	rdctl	r2,status
8112d708:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112d70c:	e0fffe17 	ldw	r3,-8(fp)
8112d710:	00bfff84 	movi	r2,-2
8112d714:	1884703a 	and	r2,r3,r2
8112d718:	1001703a 	wrctl	status,r2
  
  return context;
8112d71c:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
8112d720:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
8112d724:	d0a09017 	ldw	r2,-32192(gp)
8112d728:	10800d03 	ldbu	r2,52(r2)
8112d72c:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
8112d730:	e0fffd03 	ldbu	r3,-12(fp)
8112d734:	e13ffd03 	ldbu	r4,-12(fp)
8112d738:	d0a08c44 	addi	r2,gp,-32207
8112d73c:	2085883a 	add	r2,r4,r2
8112d740:	10800003 	ldbu	r2,0(r2)
8112d744:	1009883a 	mov	r4,r2
8112d748:	d0a09017 	ldw	r2,-32192(gp)
8112d74c:	10800d43 	ldbu	r2,53(r2)
8112d750:	0084303a 	nor	r2,zero,r2
8112d754:	2084703a 	and	r2,r4,r2
8112d758:	1009883a 	mov	r4,r2
8112d75c:	d0a08c44 	addi	r2,gp,-32207
8112d760:	1885883a 	add	r2,r3,r2
8112d764:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
8112d768:	e0fffd03 	ldbu	r3,-12(fp)
8112d76c:	d0a08c44 	addi	r2,gp,-32207
8112d770:	1885883a 	add	r2,r3,r2
8112d774:	10800003 	ldbu	r2,0(r2)
8112d778:	10803fcc 	andi	r2,r2,255
8112d77c:	1000071e 	bne	r2,zero,8112d79c <OSTimeDly+0xd0>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
8112d780:	d0a09017 	ldw	r2,-32192(gp)
8112d784:	10800d83 	ldbu	r2,54(r2)
8112d788:	0084303a 	nor	r2,zero,r2
8112d78c:	1007883a 	mov	r3,r2
8112d790:	d0a08c03 	ldbu	r2,-32208(gp)
8112d794:	1884703a 	and	r2,r3,r2
8112d798:	d0a08c05 	stb	r2,-32208(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
8112d79c:	d0a09017 	ldw	r2,-32192(gp)
8112d7a0:	e0ffff0b 	ldhu	r3,-4(fp)
8112d7a4:	10c00b8d 	sth	r3,46(r2)
8112d7a8:	e0bffb17 	ldw	r2,-20(fp)
8112d7ac:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112d7b0:	e0bffc17 	ldw	r2,-16(fp)
8112d7b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
8112d7b8:	11269900 	call	81126990 <OS_Sched>
8112d7bc:	00000106 	br	8112d7c4 <OSTimeDly+0xf8>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
8112d7c0:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
8112d7c4:	e037883a 	mov	sp,fp
8112d7c8:	dfc00117 	ldw	ra,4(sp)
8112d7cc:	df000017 	ldw	fp,0(sp)
8112d7d0:	dec00204 	addi	sp,sp,8
8112d7d4:	f800283a 	ret

8112d7d8 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
8112d7d8:	defff804 	addi	sp,sp,-32
8112d7dc:	de00012e 	bgeu	sp,et,8112d7e4 <OSTimeDlyHMSM+0xc>
8112d7e0:	003b68fa 	trap	3
8112d7e4:	dfc00715 	stw	ra,28(sp)
8112d7e8:	df000615 	stw	fp,24(sp)
8112d7ec:	df000604 	addi	fp,sp,24
8112d7f0:	2015883a 	mov	r10,r4
8112d7f4:	2809883a 	mov	r4,r5
8112d7f8:	3007883a 	mov	r3,r6
8112d7fc:	3805883a 	mov	r2,r7
8112d800:	e2bffc05 	stb	r10,-16(fp)
8112d804:	e13ffd05 	stb	r4,-12(fp)
8112d808:	e0fffe05 	stb	r3,-8(fp)
8112d80c:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
8112d810:	d0a08f03 	ldbu	r2,-32196(gp)
8112d814:	10803fcc 	andi	r2,r2,255
8112d818:	10000226 	beq	r2,zero,8112d824 <OSTimeDlyHMSM+0x4c>
        return (OS_ERR_TIME_DLY_ISR);
8112d81c:	00801544 	movi	r2,85
8112d820:	00004106 	br	8112d928 <OSTimeDlyHMSM+0x150>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
8112d824:	e0bffc03 	ldbu	r2,-16(fp)
8112d828:	1000081e 	bne	r2,zero,8112d84c <OSTimeDlyHMSM+0x74>
        if (minutes == 0) {
8112d82c:	e0bffd03 	ldbu	r2,-12(fp)
8112d830:	1000061e 	bne	r2,zero,8112d84c <OSTimeDlyHMSM+0x74>
            if (seconds == 0) {
8112d834:	e0bffe03 	ldbu	r2,-8(fp)
8112d838:	1000041e 	bne	r2,zero,8112d84c <OSTimeDlyHMSM+0x74>
                if (ms == 0) {
8112d83c:	e0bfff0b 	ldhu	r2,-4(fp)
8112d840:	1000021e 	bne	r2,zero,8112d84c <OSTimeDlyHMSM+0x74>
                    return (OS_ERR_TIME_ZERO_DLY);
8112d844:	00801504 	movi	r2,84
8112d848:	00003706 	br	8112d928 <OSTimeDlyHMSM+0x150>
                }
            }
        }
    }
    if (minutes > 59) {
8112d84c:	e0bffd03 	ldbu	r2,-12(fp)
8112d850:	10800f30 	cmpltui	r2,r2,60
8112d854:	1000021e 	bne	r2,zero,8112d860 <OSTimeDlyHMSM+0x88>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
8112d858:	00801444 	movi	r2,81
8112d85c:	00003206 	br	8112d928 <OSTimeDlyHMSM+0x150>
    }
    if (seconds > 59) {
8112d860:	e0bffe03 	ldbu	r2,-8(fp)
8112d864:	10800f30 	cmpltui	r2,r2,60
8112d868:	1000021e 	bne	r2,zero,8112d874 <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_SECONDS);
8112d86c:	00801484 	movi	r2,82
8112d870:	00002d06 	br	8112d928 <OSTimeDlyHMSM+0x150>
    }
    if (ms > 999) {
8112d874:	e0bfff0b 	ldhu	r2,-4(fp)
8112d878:	1080fa30 	cmpltui	r2,r2,1000
8112d87c:	1000021e 	bne	r2,zero,8112d888 <OSTimeDlyHMSM+0xb0>
        return (OS_ERR_TIME_INVALID_MS);
8112d880:	008014c4 	movi	r2,83
8112d884:	00002806 	br	8112d928 <OSTimeDlyHMSM+0x150>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
8112d888:	e0bffc03 	ldbu	r2,-16(fp)
8112d88c:	10c38424 	muli	r3,r2,3600
8112d890:	e0bffd03 	ldbu	r2,-12(fp)
8112d894:	10800f24 	muli	r2,r2,60
8112d898:	1887883a 	add	r3,r3,r2
8112d89c:	e0bffe03 	ldbu	r2,-8(fp)
8112d8a0:	1885883a 	add	r2,r3,r2
8112d8a4:	1100fa24 	muli	r4,r2,1000
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
8112d8a8:	e0bfff0b 	ldhu	r2,-4(fp)
8112d8ac:	10c0fa24 	muli	r3,r2,1000
8112d8b0:	008418b4 	movhi	r2,4194
8112d8b4:	109374c4 	addi	r2,r2,19923
8112d8b8:	188a383a 	mulxuu	r5,r3,r2
8112d8bc:	1885383a 	mul	r2,r3,r2
8112d8c0:	1011883a 	mov	r8,r2
8112d8c4:	2813883a 	mov	r9,r5
8112d8c8:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
8112d8cc:	2085883a 	add	r2,r4,r2
8112d8d0:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
8112d8d4:	e0bffb17 	ldw	r2,-20(fp)
8112d8d8:	1004d43a 	srli	r2,r2,16
8112d8dc:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
8112d8e0:	e0bffb17 	ldw	r2,-20(fp)
8112d8e4:	10bfffcc 	andi	r2,r2,65535
8112d8e8:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
8112d8ec:	e0bffb17 	ldw	r2,-20(fp)
8112d8f0:	10bfffcc 	andi	r2,r2,65535
8112d8f4:	1009883a 	mov	r4,r2
8112d8f8:	112d6cc0 	call	8112d6cc <OSTimeDly>
    while (loops > 0) {
8112d8fc:	00000706 	br	8112d91c <OSTimeDlyHMSM+0x144>
        OSTimeDly((INT16U)32768u);
8112d900:	01200014 	movui	r4,32768
8112d904:	112d6cc0 	call	8112d6cc <OSTimeDly>
        OSTimeDly((INT16U)32768u);
8112d908:	01200014 	movui	r4,32768
8112d90c:	112d6cc0 	call	8112d6cc <OSTimeDly>
        loops--;
8112d910:	e0bffa0b 	ldhu	r2,-24(fp)
8112d914:	10bfffc4 	addi	r2,r2,-1
8112d918:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
8112d91c:	e0bffa0b 	ldhu	r2,-24(fp)
8112d920:	103ff71e 	bne	r2,zero,8112d900 <__reset+0xfb10d900>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
8112d924:	0005883a 	mov	r2,zero
}
8112d928:	e037883a 	mov	sp,fp
8112d92c:	dfc00117 	ldw	ra,4(sp)
8112d930:	df000017 	ldw	fp,0(sp)
8112d934:	dec00204 	addi	sp,sp,8
8112d938:	f800283a 	ret

8112d93c <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
8112d93c:	defff504 	addi	sp,sp,-44
8112d940:	de00012e 	bgeu	sp,et,8112d948 <OSTimeDlyResume+0xc>
8112d944:	003b68fa 	trap	3
8112d948:	dfc00a15 	stw	ra,40(sp)
8112d94c:	df000915 	stw	fp,36(sp)
8112d950:	df000904 	addi	fp,sp,36
8112d954:	2005883a 	mov	r2,r4
8112d958:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112d95c:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
8112d960:	e0bfff03 	ldbu	r2,-4(fp)
8112d964:	10800a30 	cmpltui	r2,r2,40
8112d968:	1000021e 	bne	r2,zero,8112d974 <OSTimeDlyResume+0x38>
        return (OS_ERR_PRIO_INVALID);
8112d96c:	00800a84 	movi	r2,42
8112d970:	00006406 	br	8112db04 <OSTimeDlyResume+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112d974:	0005303a 	rdctl	r2,status
8112d978:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112d97c:	e0fffe17 	ldw	r3,-8(fp)
8112d980:	00bfff84 	movi	r2,-2
8112d984:	1884703a 	and	r2,r3,r2
8112d988:	1001703a 	wrctl	status,r2
  
  return context;
8112d98c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
8112d990:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
8112d994:	e0ffff03 	ldbu	r3,-4(fp)
8112d998:	00a045b4 	movhi	r2,33046
8112d99c:	1094b404 	addi	r2,r2,21200
8112d9a0:	18c7883a 	add	r3,r3,r3
8112d9a4:	18c7883a 	add	r3,r3,r3
8112d9a8:	10c5883a 	add	r2,r2,r3
8112d9ac:	10800017 	ldw	r2,0(r2)
8112d9b0:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
8112d9b4:	e0bff917 	ldw	r2,-28(fp)
8112d9b8:	1000061e 	bne	r2,zero,8112d9d4 <OSTimeDlyResume+0x98>
8112d9bc:	e0bff717 	ldw	r2,-36(fp)
8112d9c0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112d9c4:	e0bff817 	ldw	r2,-32(fp)
8112d9c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
8112d9cc:	008010c4 	movi	r2,67
8112d9d0:	00004c06 	br	8112db04 <OSTimeDlyResume+0x1c8>
    }
    if (ptcb == OS_TCB_RESERVED) {
8112d9d4:	e0bff917 	ldw	r2,-28(fp)
8112d9d8:	10800058 	cmpnei	r2,r2,1
8112d9dc:	1000061e 	bne	r2,zero,8112d9f8 <OSTimeDlyResume+0xbc>
8112d9e0:	e0bff717 	ldw	r2,-36(fp)
8112d9e4:	e0bffa15 	stw	r2,-24(fp)
8112d9e8:	e0bffa17 	ldw	r2,-24(fp)
8112d9ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
8112d9f0:	008010c4 	movi	r2,67
8112d9f4:	00004306 	br	8112db04 <OSTimeDlyResume+0x1c8>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
8112d9f8:	e0bff917 	ldw	r2,-28(fp)
8112d9fc:	10800b8b 	ldhu	r2,46(r2)
8112da00:	10bfffcc 	andi	r2,r2,65535
8112da04:	1000061e 	bne	r2,zero,8112da20 <OSTimeDlyResume+0xe4>
8112da08:	e0bff717 	ldw	r2,-36(fp)
8112da0c:	e0bffb15 	stw	r2,-20(fp)
8112da10:	e0bffb17 	ldw	r2,-20(fp)
8112da14:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
8112da18:	00801404 	movi	r2,80
8112da1c:	00003906 	br	8112db04 <OSTimeDlyResume+0x1c8>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
8112da20:	e0bff917 	ldw	r2,-28(fp)
8112da24:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
8112da28:	e0bff917 	ldw	r2,-28(fp)
8112da2c:	10800c03 	ldbu	r2,48(r2)
8112da30:	10803fcc 	andi	r2,r2,255
8112da34:	10800dcc 	andi	r2,r2,55
8112da38:	10000b26 	beq	r2,zero,8112da68 <OSTimeDlyResume+0x12c>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
8112da3c:	e0bff917 	ldw	r2,-28(fp)
8112da40:	10c00c03 	ldbu	r3,48(r2)
8112da44:	00bff204 	movi	r2,-56
8112da48:	1884703a 	and	r2,r3,r2
8112da4c:	1007883a 	mov	r3,r2
8112da50:	e0bff917 	ldw	r2,-28(fp)
8112da54:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
8112da58:	e0bff917 	ldw	r2,-28(fp)
8112da5c:	00c00044 	movi	r3,1
8112da60:	10c00c45 	stb	r3,49(r2)
8112da64:	00000206 	br	8112da70 <OSTimeDlyResume+0x134>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
8112da68:	e0bff917 	ldw	r2,-28(fp)
8112da6c:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
8112da70:	e0bff917 	ldw	r2,-28(fp)
8112da74:	10800c03 	ldbu	r2,48(r2)
8112da78:	10803fcc 	andi	r2,r2,255
8112da7c:	1080020c 	andi	r2,r2,8
8112da80:	10001b1e 	bne	r2,zero,8112daf0 <OSTimeDlyResume+0x1b4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
8112da84:	e0bff917 	ldw	r2,-28(fp)
8112da88:	10c00d83 	ldbu	r3,54(r2)
8112da8c:	d0a08c03 	ldbu	r2,-32208(gp)
8112da90:	1884b03a 	or	r2,r3,r2
8112da94:	d0a08c05 	stb	r2,-32208(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
8112da98:	e0bff917 	ldw	r2,-28(fp)
8112da9c:	10800d03 	ldbu	r2,52(r2)
8112daa0:	10c03fcc 	andi	r3,r2,255
8112daa4:	e0bff917 	ldw	r2,-28(fp)
8112daa8:	10800d03 	ldbu	r2,52(r2)
8112daac:	11003fcc 	andi	r4,r2,255
8112dab0:	d0a08c44 	addi	r2,gp,-32207
8112dab4:	2085883a 	add	r2,r4,r2
8112dab8:	11000003 	ldbu	r4,0(r2)
8112dabc:	e0bff917 	ldw	r2,-28(fp)
8112dac0:	10800d43 	ldbu	r2,53(r2)
8112dac4:	2084b03a 	or	r2,r4,r2
8112dac8:	1009883a 	mov	r4,r2
8112dacc:	d0a08c44 	addi	r2,gp,-32207
8112dad0:	1885883a 	add	r2,r3,r2
8112dad4:	11000005 	stb	r4,0(r2)
8112dad8:	e0bff717 	ldw	r2,-36(fp)
8112dadc:	e0bffc15 	stw	r2,-16(fp)
8112dae0:	e0bffc17 	ldw	r2,-16(fp)
8112dae4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
8112dae8:	11269900 	call	81126990 <OS_Sched>
8112daec:	00000406 	br	8112db00 <OSTimeDlyResume+0x1c4>
8112daf0:	e0bff717 	ldw	r2,-36(fp)
8112daf4:	e0bffd15 	stw	r2,-12(fp)
8112daf8:	e0bffd17 	ldw	r2,-12(fp)
8112dafc:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
8112db00:	0005883a 	mov	r2,zero
}
8112db04:	e037883a 	mov	sp,fp
8112db08:	dfc00117 	ldw	ra,4(sp)
8112db0c:	df000017 	ldw	fp,0(sp)
8112db10:	dec00204 	addi	sp,sp,8
8112db14:	f800283a 	ret

8112db18 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
8112db18:	defffb04 	addi	sp,sp,-20
8112db1c:	de00012e 	bgeu	sp,et,8112db24 <OSTimeGet+0xc>
8112db20:	003b68fa 	trap	3
8112db24:	df000415 	stw	fp,16(sp)
8112db28:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112db2c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112db30:	0005303a 	rdctl	r2,status
8112db34:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112db38:	e0fffe17 	ldw	r3,-8(fp)
8112db3c:	00bfff84 	movi	r2,-2
8112db40:	1884703a 	and	r2,r3,r2
8112db44:	1001703a 	wrctl	status,r2
  
  return context;
8112db48:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
8112db4c:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
8112db50:	d0a09217 	ldw	r2,-32184(gp)
8112db54:	e0bffd15 	stw	r2,-12(fp)
8112db58:	e0bffc17 	ldw	r2,-16(fp)
8112db5c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112db60:	e0bfff17 	ldw	r2,-4(fp)
8112db64:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
8112db68:	e0bffd17 	ldw	r2,-12(fp)
}
8112db6c:	e037883a 	mov	sp,fp
8112db70:	df000017 	ldw	fp,0(sp)
8112db74:	dec00104 	addi	sp,sp,4
8112db78:	f800283a 	ret

8112db7c <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
8112db7c:	defffb04 	addi	sp,sp,-20
8112db80:	de00012e 	bgeu	sp,et,8112db88 <OSTimeSet+0xc>
8112db84:	003b68fa 	trap	3
8112db88:	df000415 	stw	fp,16(sp)
8112db8c:	df000404 	addi	fp,sp,16
8112db90:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112db94:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112db98:	0005303a 	rdctl	r2,status
8112db9c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112dba0:	e0fffd17 	ldw	r3,-12(fp)
8112dba4:	00bfff84 	movi	r2,-2
8112dba8:	1884703a 	and	r2,r3,r2
8112dbac:	1001703a 	wrctl	status,r2
  
  return context;
8112dbb0:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
8112dbb4:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
8112dbb8:	e0bfff17 	ldw	r2,-4(fp)
8112dbbc:	d0a09215 	stw	r2,-32184(gp)
8112dbc0:	e0bffc17 	ldw	r2,-16(fp)
8112dbc4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112dbc8:	e0bffe17 	ldw	r2,-8(fp)
8112dbcc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
8112dbd0:	0001883a 	nop
8112dbd4:	e037883a 	mov	sp,fp
8112dbd8:	df000017 	ldw	fp,0(sp)
8112dbdc:	dec00104 	addi	sp,sp,4
8112dbe0:	f800283a 	ret

8112dbe4 <OSTmrCreate>:
                      INT8U            opt,
                      OS_TMR_CALLBACK  callback,
                      void            *callback_arg,
                      INT8U           *pname,
                      INT8U           *perr)
{
8112dbe4:	defff804 	addi	sp,sp,-32
8112dbe8:	de00012e 	bgeu	sp,et,8112dbf0 <OSTmrCreate+0xc>
8112dbec:	003b68fa 	trap	3
8112dbf0:	dfc00715 	stw	ra,28(sp)
8112dbf4:	df000615 	stw	fp,24(sp)
8112dbf8:	df000604 	addi	fp,sp,24
8112dbfc:	e13ffc15 	stw	r4,-16(fp)
8112dc00:	e17ffd15 	stw	r5,-12(fp)
8112dc04:	3005883a 	mov	r2,r6
8112dc08:	e1ffff15 	stw	r7,-4(fp)
8112dc0c:	e0bffe05 	stb	r2,-8(fp)
    INT8U     len;
#endif


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                               /* Validate arguments                                     */
8112dc10:	e0800417 	ldw	r2,16(fp)
8112dc14:	1000021e 	bne	r2,zero,8112dc20 <OSTmrCreate+0x3c>
        return ((OS_TMR *)0);
8112dc18:	0005883a 	mov	r2,zero
8112dc1c:	00005d06 	br	8112dd94 <OSTmrCreate+0x1b0>
    }
    switch (opt) {
8112dc20:	e0bffe03 	ldbu	r2,-8(fp)
8112dc24:	10c00060 	cmpeqi	r3,r2,1
8112dc28:	1800091e 	bne	r3,zero,8112dc50 <OSTmrCreate+0x6c>
8112dc2c:	108000a0 	cmpeqi	r2,r2,2
8112dc30:	10000e26 	beq	r2,zero,8112dc6c <OSTmrCreate+0x88>
        case OS_TMR_OPT_PERIODIC:
             if (period == 0) {
8112dc34:	e0bffd17 	ldw	r2,-12(fp)
8112dc38:	1000111e 	bne	r2,zero,8112dc80 <OSTmrCreate+0x9c>
                 *perr = OS_ERR_TMR_INVALID_PERIOD;
8112dc3c:	e0800417 	ldw	r2,16(fp)
8112dc40:	00ffe0c4 	movi	r3,-125
8112dc44:	10c00005 	stb	r3,0(r2)
                 return ((OS_TMR *)0);
8112dc48:	0005883a 	mov	r2,zero
8112dc4c:	00005106 	br	8112dd94 <OSTmrCreate+0x1b0>
             }
             break;

        case OS_TMR_OPT_ONE_SHOT:
             if (dly == 0) {
8112dc50:	e0bffc17 	ldw	r2,-16(fp)
8112dc54:	10000c1e 	bne	r2,zero,8112dc88 <OSTmrCreate+0xa4>
                 *perr = OS_ERR_TMR_INVALID_DLY;
8112dc58:	e0800417 	ldw	r2,16(fp)
8112dc5c:	00ffe084 	movi	r3,-126
8112dc60:	10c00005 	stb	r3,0(r2)
                 return ((OS_TMR *)0);
8112dc64:	0005883a 	mov	r2,zero
8112dc68:	00004a06 	br	8112dd94 <OSTmrCreate+0x1b0>
             }
             break;

        default:
             *perr = OS_ERR_TMR_INVALID_OPT;
8112dc6c:	e0800417 	ldw	r2,16(fp)
8112dc70:	00ffe104 	movi	r3,-124
8112dc74:	10c00005 	stb	r3,0(r2)
             return ((OS_TMR *)0);
8112dc78:	0005883a 	mov	r2,zero
8112dc7c:	00004506 	br	8112dd94 <OSTmrCreate+0x1b0>
        case OS_TMR_OPT_PERIODIC:
             if (period == 0) {
                 *perr = OS_ERR_TMR_INVALID_PERIOD;
                 return ((OS_TMR *)0);
             }
             break;
8112dc80:	0001883a 	nop
8112dc84:	00000106 	br	8112dc8c <OSTmrCreate+0xa8>
        case OS_TMR_OPT_ONE_SHOT:
             if (dly == 0) {
                 *perr = OS_ERR_TMR_INVALID_DLY;
                 return ((OS_TMR *)0);
             }
             break;
8112dc88:	0001883a 	nop
        default:
             *perr = OS_ERR_TMR_INVALID_OPT;
             return ((OS_TMR *)0);
    }
#endif
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
8112dc8c:	d0a08f03 	ldbu	r2,-32196(gp)
8112dc90:	10803fcc 	andi	r2,r2,255
8112dc94:	10000526 	beq	r2,zero,8112dcac <OSTmrCreate+0xc8>
        *perr  = OS_ERR_TMR_ISR;
8112dc98:	e0800417 	ldw	r2,16(fp)
8112dc9c:	00ffe2c4 	movi	r3,-117
8112dca0:	10c00005 	stb	r3,0(r2)
        return ((OS_TMR *)0);
8112dca4:	0005883a 	mov	r2,zero
8112dca8:	00003a06 	br	8112dd94 <OSTmrCreate+0x1b0>
    }
    OSTmr_Lock();
8112dcac:	112eb9c0 	call	8112eb9c <OSTmr_Lock>
    ptmr = OSTmr_Alloc();                                   /* Obtain a timer from the free pool                      */
8112dcb0:	112e63c0 	call	8112e63c <OSTmr_Alloc>
8112dcb4:	e0bffa15 	stw	r2,-24(fp)
    if (ptmr == (OS_TMR *)0) {
8112dcb8:	e0bffa17 	ldw	r2,-24(fp)
8112dcbc:	1000061e 	bne	r2,zero,8112dcd8 <OSTmrCreate+0xf4>
        OSTmr_Unlock();
8112dcc0:	112ebe00 	call	8112ebe0 <OSTmr_Unlock>
        *perr = OS_ERR_TMR_NON_AVAIL;
8112dcc4:	e0800417 	ldw	r2,16(fp)
8112dcc8:	00ffe184 	movi	r3,-122
8112dccc:	10c00005 	stb	r3,0(r2)
        return ((OS_TMR *)0);
8112dcd0:	0005883a 	mov	r2,zero
8112dcd4:	00002f06 	br	8112dd94 <OSTmrCreate+0x1b0>
    }
    ptmr->OSTmrState       = OS_TMR_STATE_STOPPED;          /* Indicate that timer is not running yet                 */
8112dcd8:	e0bffa17 	ldw	r2,-24(fp)
8112dcdc:	00c00044 	movi	r3,1
8112dce0:	10c00c45 	stb	r3,49(r2)
    ptmr->OSTmrDly         = dly;
8112dce4:	e0bffa17 	ldw	r2,-24(fp)
8112dce8:	e0fffc17 	ldw	r3,-16(fp)
8112dcec:	10c00615 	stw	r3,24(r2)
    ptmr->OSTmrPeriod      = period;
8112dcf0:	e0bffa17 	ldw	r2,-24(fp)
8112dcf4:	e0fffd17 	ldw	r3,-12(fp)
8112dcf8:	10c00715 	stw	r3,28(r2)
    ptmr->OSTmrOpt         = opt;
8112dcfc:	e0bffa17 	ldw	r2,-24(fp)
8112dd00:	e0fffe03 	ldbu	r3,-8(fp)
8112dd04:	10c00c05 	stb	r3,48(r2)
    ptmr->OSTmrCallback    = callback;
8112dd08:	e0bffa17 	ldw	r2,-24(fp)
8112dd0c:	e0ffff17 	ldw	r3,-4(fp)
8112dd10:	10c00115 	stw	r3,4(r2)
    ptmr->OSTmrCallbackArg = callback_arg;
8112dd14:	e0bffa17 	ldw	r2,-24(fp)
8112dd18:	e0c00217 	ldw	r3,8(fp)
8112dd1c:	10c00215 	stw	r3,8(r2)
#if OS_TMR_CFG_NAME_SIZE > 0
    if (pname !=(INT8U *)0) {
8112dd20:	e0800317 	ldw	r2,12(fp)
8112dd24:	10001726 	beq	r2,zero,8112dd84 <OSTmrCreate+0x1a0>
        len = OS_StrLen(pname);                             /* Copy timer name                                        */
8112dd28:	e1000317 	ldw	r4,12(fp)
8112dd2c:	1126b600 	call	81126b60 <OS_StrLen>
8112dd30:	e0bffb05 	stb	r2,-20(fp)
        if (len < OS_TMR_CFG_NAME_SIZE) {
8112dd34:	e0bffb03 	ldbu	r2,-20(fp)
8112dd38:	10800428 	cmpgeui	r2,r2,16
8112dd3c:	1000061e 	bne	r2,zero,8112dd58 <OSTmrCreate+0x174>
            (void)OS_StrCopy(ptmr->OSTmrName, pname);
8112dd40:	e0bffa17 	ldw	r2,-24(fp)
8112dd44:	10800804 	addi	r2,r2,32
8112dd48:	e1400317 	ldw	r5,12(fp)
8112dd4c:	1009883a 	mov	r4,r2
8112dd50:	1126ae40 	call	81126ae4 <OS_StrCopy>
8112dd54:	00000b06 	br	8112dd84 <OSTmrCreate+0x1a0>
        } else {
#if OS_TMR_CFG_NAME_SIZE > 1
            ptmr->OSTmrName[0] = '#';                       /* Invalid size specified                                 */
8112dd58:	e0bffa17 	ldw	r2,-24(fp)
8112dd5c:	00c008c4 	movi	r3,35
8112dd60:	10c00805 	stb	r3,32(r2)
            ptmr->OSTmrName[1] = OS_ASCII_NUL;
8112dd64:	e0bffa17 	ldw	r2,-24(fp)
8112dd68:	10000845 	stb	zero,33(r2)
#endif
            *perr              = OS_ERR_TMR_NAME_TOO_LONG;
8112dd6c:	e0800417 	ldw	r2,16(fp)
8112dd70:	00ffe304 	movi	r3,-116
8112dd74:	10c00005 	stb	r3,0(r2)
            OSTmr_Unlock();
8112dd78:	112ebe00 	call	8112ebe0 <OSTmr_Unlock>
            return (ptmr);
8112dd7c:	e0bffa17 	ldw	r2,-24(fp)
8112dd80:	00000406 	br	8112dd94 <OSTmrCreate+0x1b0>
        }
    }
#endif
    OSTmr_Unlock();
8112dd84:	112ebe00 	call	8112ebe0 <OSTmr_Unlock>
    *perr = OS_ERR_NONE;
8112dd88:	e0800417 	ldw	r2,16(fp)
8112dd8c:	10000005 	stb	zero,0(r2)
    return (ptmr);
8112dd90:	e0bffa17 	ldw	r2,-24(fp)
}
8112dd94:	e037883a 	mov	sp,fp
8112dd98:	dfc00117 	ldw	ra,4(sp)
8112dd9c:	df000017 	ldw	fp,0(sp)
8112dda0:	dec00204 	addi	sp,sp,8
8112dda4:	f800283a 	ret

8112dda8 <OSTmrDel>:
*/

#if OS_TMR_EN > 0
BOOLEAN  OSTmrDel (OS_TMR  *ptmr,
                   INT8U   *perr)
{
8112dda8:	defffc04 	addi	sp,sp,-16
8112ddac:	de00012e 	bgeu	sp,et,8112ddb4 <OSTmrDel+0xc>
8112ddb0:	003b68fa 	trap	3
8112ddb4:	dfc00315 	stw	ra,12(sp)
8112ddb8:	df000215 	stw	fp,8(sp)
8112ddbc:	df000204 	addi	fp,sp,8
8112ddc0:	e13ffe15 	stw	r4,-8(fp)
8112ddc4:	e17fff15 	stw	r5,-4(fp)
#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                               /* Validate arguments                                     */
8112ddc8:	e0bfff17 	ldw	r2,-4(fp)
8112ddcc:	1000021e 	bne	r2,zero,8112ddd8 <OSTmrDel+0x30>
        return (OS_FALSE);
8112ddd0:	0005883a 	mov	r2,zero
8112ddd4:	00003f06 	br	8112ded4 <OSTmrDel+0x12c>
    }
    if (ptmr == (OS_TMR *)0) {
8112ddd8:	e0bffe17 	ldw	r2,-8(fp)
8112dddc:	1000051e 	bne	r2,zero,8112ddf4 <OSTmrDel+0x4c>
        *perr = OS_ERR_TMR_INVALID;
8112dde0:	e0bfff17 	ldw	r2,-4(fp)
8112dde4:	00ffe284 	movi	r3,-118
8112dde8:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
8112ddec:	0005883a 	mov	r2,zero
8112ddf0:	00003806 	br	8112ded4 <OSTmrDel+0x12c>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                   /* Validate timer structure                               */
8112ddf4:	e0bffe17 	ldw	r2,-8(fp)
8112ddf8:	10800003 	ldbu	r2,0(r2)
8112ddfc:	10803fcc 	andi	r2,r2,255
8112de00:	10801920 	cmpeqi	r2,r2,100
8112de04:	1000051e 	bne	r2,zero,8112de1c <OSTmrDel+0x74>
        *perr = OS_ERR_TMR_INVALID_TYPE;
8112de08:	e0bfff17 	ldw	r2,-4(fp)
8112de0c:	00ffe244 	movi	r3,-119
8112de10:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
8112de14:	0005883a 	mov	r2,zero
8112de18:	00002e06 	br	8112ded4 <OSTmrDel+0x12c>
    }
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
8112de1c:	d0a08f03 	ldbu	r2,-32196(gp)
8112de20:	10803fcc 	andi	r2,r2,255
8112de24:	10000526 	beq	r2,zero,8112de3c <OSTmrDel+0x94>
        *perr  = OS_ERR_TMR_ISR;
8112de28:	e0bfff17 	ldw	r2,-4(fp)
8112de2c:	00ffe2c4 	movi	r3,-117
8112de30:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
8112de34:	0005883a 	mov	r2,zero
8112de38:	00002606 	br	8112ded4 <OSTmrDel+0x12c>
    }
    OSTmr_Lock();
8112de3c:	112eb9c0 	call	8112eb9c <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
8112de40:	e0bffe17 	ldw	r2,-8(fp)
8112de44:	10800c43 	ldbu	r2,49(r2)
8112de48:	10803fcc 	andi	r2,r2,255
8112de4c:	10c000c8 	cmpgei	r3,r2,3
8112de50:	1800031e 	bne	r3,zero,8112de60 <OSTmrDel+0xb8>
8112de54:	00800d16 	blt	zero,r2,8112de8c <OSTmrDel+0xe4>
8112de58:	10001326 	beq	r2,zero,8112dea8 <OSTmrDel+0x100>
8112de5c:	00001806 	br	8112dec0 <OSTmrDel+0x118>
8112de60:	108000e0 	cmpeqi	r2,r2,3
8112de64:	10001626 	beq	r2,zero,8112dec0 <OSTmrDel+0x118>
        case OS_TMR_STATE_RUNNING:
             OSTmr_Unlink(ptmr);                            /* Remove from current wheel spoke                        */
8112de68:	e13ffe17 	ldw	r4,-8(fp)
8112de6c:	112eaa00 	call	8112eaa0 <OSTmr_Unlink>
             OSTmr_Free(ptmr);                              /* Return timer to free list of timers                    */
8112de70:	e13ffe17 	ldw	r4,-8(fp)
8112de74:	112e6b00 	call	8112e6b0 <OSTmr_Free>
             OSTmr_Unlock();
8112de78:	112ebe00 	call	8112ebe0 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
8112de7c:	e0bfff17 	ldw	r2,-4(fp)
8112de80:	10000005 	stb	zero,0(r2)
             return (OS_TRUE);
8112de84:	00800044 	movi	r2,1
8112de88:	00001206 	br	8112ded4 <OSTmrDel+0x12c>

        case OS_TMR_STATE_STOPPED:                          /* Timer has not started or ...                           */
        case OS_TMR_STATE_COMPLETED:                        /* ... timer has completed the ONE-SHOT time              */
             OSTmr_Free(ptmr);                              /* Return timer to free list of timers                    */
8112de8c:	e13ffe17 	ldw	r4,-8(fp)
8112de90:	112e6b00 	call	8112e6b0 <OSTmr_Free>
             OSTmr_Unlock();
8112de94:	112ebe00 	call	8112ebe0 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
8112de98:	e0bfff17 	ldw	r2,-4(fp)
8112de9c:	10000005 	stb	zero,0(r2)
             return (OS_TRUE);
8112dea0:	00800044 	movi	r2,1
8112dea4:	00000b06 	br	8112ded4 <OSTmrDel+0x12c>

        case OS_TMR_STATE_UNUSED:                           /* Already deleted                                        */
             OSTmr_Unlock();
8112dea8:	112ebe00 	call	8112ebe0 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
8112deac:	e0bfff17 	ldw	r2,-4(fp)
8112deb0:	00ffe1c4 	movi	r3,-121
8112deb4:	10c00005 	stb	r3,0(r2)
             return (OS_FALSE);
8112deb8:	0005883a 	mov	r2,zero
8112debc:	00000506 	br	8112ded4 <OSTmrDel+0x12c>

        default:
             OSTmr_Unlock();
8112dec0:	112ebe00 	call	8112ebe0 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
8112dec4:	e0bfff17 	ldw	r2,-4(fp)
8112dec8:	00ffe344 	movi	r3,-115
8112decc:	10c00005 	stb	r3,0(r2)
             return (OS_FALSE);
8112ded0:	0005883a 	mov	r2,zero
    }
}
8112ded4:	e037883a 	mov	sp,fp
8112ded8:	dfc00117 	ldw	ra,4(sp)
8112dedc:	df000017 	ldw	fp,0(sp)
8112dee0:	dec00204 	addi	sp,sp,8
8112dee4:	f800283a 	ret

8112dee8 <OSTmrNameGet>:

#if OS_TMR_EN > 0 && OS_TMR_CFG_NAME_SIZE > 0
INT8U  OSTmrNameGet (OS_TMR  *ptmr,
                     INT8U   *pdest,
                     INT8U   *perr)
{
8112dee8:	defffa04 	addi	sp,sp,-24
8112deec:	de00012e 	bgeu	sp,et,8112def4 <OSTmrNameGet+0xc>
8112def0:	003b68fa 	trap	3
8112def4:	dfc00515 	stw	ra,20(sp)
8112def8:	df000415 	stw	fp,16(sp)
8112defc:	df000404 	addi	fp,sp,16
8112df00:	e13ffd15 	stw	r4,-12(fp)
8112df04:	e17ffe15 	stw	r5,-8(fp)
8112df08:	e1bfff15 	stw	r6,-4(fp)
    INT8U  len;


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {
8112df0c:	e0bfff17 	ldw	r2,-4(fp)
8112df10:	1000021e 	bne	r2,zero,8112df1c <OSTmrNameGet+0x34>
        return (0);
8112df14:	0005883a 	mov	r2,zero
8112df18:	00003e06 	br	8112e014 <OSTmrNameGet+0x12c>
    }
    if (pdest == (INT8U *)0) {
8112df1c:	e0bffe17 	ldw	r2,-8(fp)
8112df20:	1000051e 	bne	r2,zero,8112df38 <OSTmrNameGet+0x50>
        *perr = OS_ERR_TMR_INVALID_DEST;
8112df24:	e0bfff17 	ldw	r2,-4(fp)
8112df28:	00ffe204 	movi	r3,-120
8112df2c:	10c00005 	stb	r3,0(r2)
        return (0);
8112df30:	0005883a 	mov	r2,zero
8112df34:	00003706 	br	8112e014 <OSTmrNameGet+0x12c>
    }
    if (ptmr == (OS_TMR *)0) {
8112df38:	e0bffd17 	ldw	r2,-12(fp)
8112df3c:	1000051e 	bne	r2,zero,8112df54 <OSTmrNameGet+0x6c>
        *perr = OS_ERR_TMR_INVALID;
8112df40:	e0bfff17 	ldw	r2,-4(fp)
8112df44:	00ffe284 	movi	r3,-118
8112df48:	10c00005 	stb	r3,0(r2)
        return (0);
8112df4c:	0005883a 	mov	r2,zero
8112df50:	00003006 	br	8112e014 <OSTmrNameGet+0x12c>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
8112df54:	e0bffd17 	ldw	r2,-12(fp)
8112df58:	10800003 	ldbu	r2,0(r2)
8112df5c:	10803fcc 	andi	r2,r2,255
8112df60:	10801920 	cmpeqi	r2,r2,100
8112df64:	1000051e 	bne	r2,zero,8112df7c <OSTmrNameGet+0x94>
        *perr = OS_ERR_TMR_INVALID_TYPE;
8112df68:	e0bfff17 	ldw	r2,-4(fp)
8112df6c:	00ffe244 	movi	r3,-119
8112df70:	10c00005 	stb	r3,0(r2)
        return (0);
8112df74:	0005883a 	mov	r2,zero
8112df78:	00002606 	br	8112e014 <OSTmrNameGet+0x12c>
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
8112df7c:	d0a08f03 	ldbu	r2,-32196(gp)
8112df80:	10803fcc 	andi	r2,r2,255
8112df84:	10000526 	beq	r2,zero,8112df9c <OSTmrNameGet+0xb4>
        *perr = OS_ERR_NAME_GET_ISR;
8112df88:	e0bfff17 	ldw	r2,-4(fp)
8112df8c:	00c00444 	movi	r3,17
8112df90:	10c00005 	stb	r3,0(r2)
        return (0);
8112df94:	0005883a 	mov	r2,zero
8112df98:	00001e06 	br	8112e014 <OSTmrNameGet+0x12c>
    }
    OSTmr_Lock();
8112df9c:	112eb9c0 	call	8112eb9c <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
8112dfa0:	e0bffd17 	ldw	r2,-12(fp)
8112dfa4:	10800c43 	ldbu	r2,49(r2)
8112dfa8:	10803fcc 	andi	r2,r2,255
8112dfac:	10000e26 	beq	r2,zero,8112dfe8 <OSTmrNameGet+0x100>
8112dfb0:	10001316 	blt	r2,zero,8112e000 <OSTmrNameGet+0x118>
8112dfb4:	10800108 	cmpgei	r2,r2,4
8112dfb8:	1000111e 	bne	r2,zero,8112e000 <OSTmrNameGet+0x118>
        case OS_TMR_STATE_RUNNING:
        case OS_TMR_STATE_STOPPED:
        case OS_TMR_STATE_COMPLETED:
             len   = OS_StrCopy(pdest, ptmr->OSTmrName);
8112dfbc:	e0bffd17 	ldw	r2,-12(fp)
8112dfc0:	10800804 	addi	r2,r2,32
8112dfc4:	100b883a 	mov	r5,r2
8112dfc8:	e13ffe17 	ldw	r4,-8(fp)
8112dfcc:	1126ae40 	call	81126ae4 <OS_StrCopy>
8112dfd0:	e0bffc05 	stb	r2,-16(fp)
             OSTmr_Unlock();
8112dfd4:	112ebe00 	call	8112ebe0 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
8112dfd8:	e0bfff17 	ldw	r2,-4(fp)
8112dfdc:	10000005 	stb	zero,0(r2)
             return (len);
8112dfe0:	e0bffc03 	ldbu	r2,-16(fp)
8112dfe4:	00000b06 	br	8112e014 <OSTmrNameGet+0x12c>

        case OS_TMR_STATE_UNUSED:                      /* Timer is not allocated                                      */
             OSTmr_Unlock();
8112dfe8:	112ebe00 	call	8112ebe0 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
8112dfec:	e0bfff17 	ldw	r2,-4(fp)
8112dff0:	00ffe1c4 	movi	r3,-121
8112dff4:	10c00005 	stb	r3,0(r2)
             return (0);
8112dff8:	0005883a 	mov	r2,zero
8112dffc:	00000506 	br	8112e014 <OSTmrNameGet+0x12c>

        default:
             OSTmr_Unlock();
8112e000:	112ebe00 	call	8112ebe0 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
8112e004:	e0bfff17 	ldw	r2,-4(fp)
8112e008:	00ffe344 	movi	r3,-115
8112e00c:	10c00005 	stb	r3,0(r2)
             return (0);
8112e010:	0005883a 	mov	r2,zero
    }
}
8112e014:	e037883a 	mov	sp,fp
8112e018:	dfc00117 	ldw	ra,4(sp)
8112e01c:	df000017 	ldw	fp,0(sp)
8112e020:	dec00204 	addi	sp,sp,8
8112e024:	f800283a 	ret

8112e028 <OSTmrRemainGet>:
*/

#if OS_TMR_EN > 0
INT32U  OSTmrRemainGet (OS_TMR  *ptmr,
                        INT8U   *perr)
{
8112e028:	defffb04 	addi	sp,sp,-20
8112e02c:	de00012e 	bgeu	sp,et,8112e034 <OSTmrRemainGet+0xc>
8112e030:	003b68fa 	trap	3
8112e034:	dfc00415 	stw	ra,16(sp)
8112e038:	df000315 	stw	fp,12(sp)
8112e03c:	df000304 	addi	fp,sp,12
8112e040:	e13ffe15 	stw	r4,-8(fp)
8112e044:	e17fff15 	stw	r5,-4(fp)
    INT32U  remain;


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {
8112e048:	e0bfff17 	ldw	r2,-4(fp)
8112e04c:	1000021e 	bne	r2,zero,8112e058 <OSTmrRemainGet+0x30>
        return (0);
8112e050:	0005883a 	mov	r2,zero
8112e054:	00005d06 	br	8112e1cc <OSTmrRemainGet+0x1a4>
    }
    if (ptmr == (OS_TMR *)0) {
8112e058:	e0bffe17 	ldw	r2,-8(fp)
8112e05c:	1000051e 	bne	r2,zero,8112e074 <OSTmrRemainGet+0x4c>
        *perr = OS_ERR_TMR_INVALID;
8112e060:	e0bfff17 	ldw	r2,-4(fp)
8112e064:	00ffe284 	movi	r3,-118
8112e068:	10c00005 	stb	r3,0(r2)
        return (0);
8112e06c:	0005883a 	mov	r2,zero
8112e070:	00005606 	br	8112e1cc <OSTmrRemainGet+0x1a4>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
8112e074:	e0bffe17 	ldw	r2,-8(fp)
8112e078:	10800003 	ldbu	r2,0(r2)
8112e07c:	10803fcc 	andi	r2,r2,255
8112e080:	10801920 	cmpeqi	r2,r2,100
8112e084:	1000051e 	bne	r2,zero,8112e09c <OSTmrRemainGet+0x74>
        *perr = OS_ERR_TMR_INVALID_TYPE;
8112e088:	e0bfff17 	ldw	r2,-4(fp)
8112e08c:	00ffe244 	movi	r3,-119
8112e090:	10c00005 	stb	r3,0(r2)
        return (0);
8112e094:	0005883a 	mov	r2,zero
8112e098:	00004c06 	br	8112e1cc <OSTmrRemainGet+0x1a4>
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
8112e09c:	d0a08f03 	ldbu	r2,-32196(gp)
8112e0a0:	10803fcc 	andi	r2,r2,255
8112e0a4:	10000526 	beq	r2,zero,8112e0bc <OSTmrRemainGet+0x94>
        *perr = OS_ERR_TMR_ISR;
8112e0a8:	e0bfff17 	ldw	r2,-4(fp)
8112e0ac:	00ffe2c4 	movi	r3,-117
8112e0b0:	10c00005 	stb	r3,0(r2)
        return (0);
8112e0b4:	0005883a 	mov	r2,zero
8112e0b8:	00004406 	br	8112e1cc <OSTmrRemainGet+0x1a4>
    }
    OSTmr_Lock();
8112e0bc:	112eb9c0 	call	8112eb9c <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
8112e0c0:	e0bffe17 	ldw	r2,-8(fp)
8112e0c4:	10800c43 	ldbu	r2,49(r2)
8112e0c8:	10803fcc 	andi	r2,r2,255
8112e0cc:	10c00060 	cmpeqi	r3,r2,1
8112e0d0:	1800121e 	bne	r3,zero,8112e11c <OSTmrRemainGet+0xf4>
8112e0d4:	10c00088 	cmpgei	r3,r2,2
8112e0d8:	1800021e 	bne	r3,zero,8112e0e4 <OSTmrRemainGet+0xbc>
8112e0dc:	10003026 	beq	r2,zero,8112e1a0 <OSTmrRemainGet+0x178>
8112e0e0:	00003506 	br	8112e1b8 <OSTmrRemainGet+0x190>
8112e0e4:	10c000a0 	cmpeqi	r3,r2,2
8112e0e8:	1800281e 	bne	r3,zero,8112e18c <OSTmrRemainGet+0x164>
8112e0ec:	108000e0 	cmpeqi	r2,r2,3
8112e0f0:	10003126 	beq	r2,zero,8112e1b8 <OSTmrRemainGet+0x190>
        case OS_TMR_STATE_RUNNING:
             remain = ptmr->OSTmrMatch - OSTmrTime;    /* Determine how much time is left to timeout                  */
8112e0f4:	e0bffe17 	ldw	r2,-8(fp)
8112e0f8:	10c00517 	ldw	r3,20(r2)
8112e0fc:	d0a09117 	ldw	r2,-32188(gp)
8112e100:	1885c83a 	sub	r2,r3,r2
8112e104:	e0bffd15 	stw	r2,-12(fp)
             OSTmr_Unlock();
8112e108:	112ebe00 	call	8112ebe0 <OSTmr_Unlock>
             *perr  = OS_ERR_NONE;
8112e10c:	e0bfff17 	ldw	r2,-4(fp)
8112e110:	10000005 	stb	zero,0(r2)
             return (remain);
8112e114:	e0bffd17 	ldw	r2,-12(fp)
8112e118:	00002c06 	br	8112e1cc <OSTmrRemainGet+0x1a4>

        case OS_TMR_STATE_STOPPED:                     /* It's assumed that the timer has not started yet             */
             switch (ptmr->OSTmrOpt) {
8112e11c:	e0bffe17 	ldw	r2,-8(fp)
8112e120:	10800c03 	ldbu	r2,48(r2)
8112e124:	10803fcc 	andi	r2,r2,255
8112e128:	108000a0 	cmpeqi	r2,r2,2
8112e12c:	10000e26 	beq	r2,zero,8112e168 <OSTmrRemainGet+0x140>
                 case OS_TMR_OPT_PERIODIC:
                      if (ptmr->OSTmrDly == 0) {
8112e130:	e0bffe17 	ldw	r2,-8(fp)
8112e134:	10800617 	ldw	r2,24(r2)
8112e138:	1000041e 	bne	r2,zero,8112e14c <OSTmrRemainGet+0x124>
                          remain = ptmr->OSTmrPeriod;
8112e13c:	e0bffe17 	ldw	r2,-8(fp)
8112e140:	10800717 	ldw	r2,28(r2)
8112e144:	e0bffd15 	stw	r2,-12(fp)
8112e148:	00000306 	br	8112e158 <OSTmrRemainGet+0x130>
                      } else {
                          remain = ptmr->OSTmrDly;
8112e14c:	e0bffe17 	ldw	r2,-8(fp)
8112e150:	10800617 	ldw	r2,24(r2)
8112e154:	e0bffd15 	stw	r2,-12(fp)
                      }
                      OSTmr_Unlock();
8112e158:	112ebe00 	call	8112ebe0 <OSTmr_Unlock>
                      *perr  = OS_ERR_NONE;
8112e15c:	e0bfff17 	ldw	r2,-4(fp)
8112e160:	10000005 	stb	zero,0(r2)
                      break;
8112e164:	00000706 	br	8112e184 <OSTmrRemainGet+0x15c>

                 case OS_TMR_OPT_ONE_SHOT:
                 default:
                      remain = ptmr->OSTmrDly;
8112e168:	e0bffe17 	ldw	r2,-8(fp)
8112e16c:	10800617 	ldw	r2,24(r2)
8112e170:	e0bffd15 	stw	r2,-12(fp)
                      OSTmr_Unlock();
8112e174:	112ebe00 	call	8112ebe0 <OSTmr_Unlock>
                      *perr  = OS_ERR_NONE;
8112e178:	e0bfff17 	ldw	r2,-4(fp)
8112e17c:	10000005 	stb	zero,0(r2)
                      break;
8112e180:	0001883a 	nop
             }
             return (remain);
8112e184:	e0bffd17 	ldw	r2,-12(fp)
8112e188:	00001006 	br	8112e1cc <OSTmrRemainGet+0x1a4>

        case OS_TMR_STATE_COMPLETED:                   /* Only ONE-SHOT that timed out can be in this state           */
             OSTmr_Unlock();
8112e18c:	112ebe00 	call	8112ebe0 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
8112e190:	e0bfff17 	ldw	r2,-4(fp)
8112e194:	10000005 	stb	zero,0(r2)
             return (0);
8112e198:	0005883a 	mov	r2,zero
8112e19c:	00000b06 	br	8112e1cc <OSTmrRemainGet+0x1a4>

        case OS_TMR_STATE_UNUSED:
             OSTmr_Unlock();
8112e1a0:	112ebe00 	call	8112ebe0 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
8112e1a4:	e0bfff17 	ldw	r2,-4(fp)
8112e1a8:	00ffe1c4 	movi	r3,-121
8112e1ac:	10c00005 	stb	r3,0(r2)
             return (0);
8112e1b0:	0005883a 	mov	r2,zero
8112e1b4:	00000506 	br	8112e1cc <OSTmrRemainGet+0x1a4>

        default:
             OSTmr_Unlock();
8112e1b8:	112ebe00 	call	8112ebe0 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
8112e1bc:	e0bfff17 	ldw	r2,-4(fp)
8112e1c0:	00ffe344 	movi	r3,-115
8112e1c4:	10c00005 	stb	r3,0(r2)
             return (0);
8112e1c8:	0005883a 	mov	r2,zero
    }
}
8112e1cc:	e037883a 	mov	sp,fp
8112e1d0:	dfc00117 	ldw	ra,4(sp)
8112e1d4:	df000017 	ldw	fp,0(sp)
8112e1d8:	dec00204 	addi	sp,sp,8
8112e1dc:	f800283a 	ret

8112e1e0 <OSTmrStateGet>:
*/

#if OS_TMR_EN > 0
INT8U  OSTmrStateGet (OS_TMR  *ptmr,
                      INT8U   *perr)
{
8112e1e0:	defffb04 	addi	sp,sp,-20
8112e1e4:	de00012e 	bgeu	sp,et,8112e1ec <OSTmrStateGet+0xc>
8112e1e8:	003b68fa 	trap	3
8112e1ec:	dfc00415 	stw	ra,16(sp)
8112e1f0:	df000315 	stw	fp,12(sp)
8112e1f4:	df000304 	addi	fp,sp,12
8112e1f8:	e13ffe15 	stw	r4,-8(fp)
8112e1fc:	e17fff15 	stw	r5,-4(fp)
    INT8U  state;


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {
8112e200:	e0bfff17 	ldw	r2,-4(fp)
8112e204:	1000021e 	bne	r2,zero,8112e210 <OSTmrStateGet+0x30>
        return (0);
8112e208:	0005883a 	mov	r2,zero
8112e20c:	00002a06 	br	8112e2b8 <OSTmrStateGet+0xd8>
    }
    if (ptmr == (OS_TMR *)0) {
8112e210:	e0bffe17 	ldw	r2,-8(fp)
8112e214:	1000051e 	bne	r2,zero,8112e22c <OSTmrStateGet+0x4c>
        *perr = OS_ERR_TMR_INVALID;
8112e218:	e0bfff17 	ldw	r2,-4(fp)
8112e21c:	00ffe284 	movi	r3,-118
8112e220:	10c00005 	stb	r3,0(r2)
        return (0);
8112e224:	0005883a 	mov	r2,zero
8112e228:	00002306 	br	8112e2b8 <OSTmrStateGet+0xd8>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
8112e22c:	e0bffe17 	ldw	r2,-8(fp)
8112e230:	10800003 	ldbu	r2,0(r2)
8112e234:	10803fcc 	andi	r2,r2,255
8112e238:	10801920 	cmpeqi	r2,r2,100
8112e23c:	1000051e 	bne	r2,zero,8112e254 <OSTmrStateGet+0x74>
        *perr = OS_ERR_TMR_INVALID_TYPE;
8112e240:	e0bfff17 	ldw	r2,-4(fp)
8112e244:	00ffe244 	movi	r3,-119
8112e248:	10c00005 	stb	r3,0(r2)
        return (0);
8112e24c:	0005883a 	mov	r2,zero
8112e250:	00001906 	br	8112e2b8 <OSTmrStateGet+0xd8>
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
8112e254:	d0a08f03 	ldbu	r2,-32196(gp)
8112e258:	10803fcc 	andi	r2,r2,255
8112e25c:	10000526 	beq	r2,zero,8112e274 <OSTmrStateGet+0x94>
        *perr = OS_ERR_TMR_ISR;
8112e260:	e0bfff17 	ldw	r2,-4(fp)
8112e264:	00ffe2c4 	movi	r3,-117
8112e268:	10c00005 	stb	r3,0(r2)
        return (0);
8112e26c:	0005883a 	mov	r2,zero
8112e270:	00001106 	br	8112e2b8 <OSTmrStateGet+0xd8>
    }
    OSTmr_Lock();
8112e274:	112eb9c0 	call	8112eb9c <OSTmr_Lock>
    state = ptmr->OSTmrState;
8112e278:	e0bffe17 	ldw	r2,-8(fp)
8112e27c:	10800c43 	ldbu	r2,49(r2)
8112e280:	e0bffd05 	stb	r2,-12(fp)
    switch (state) {
8112e284:	e0bffd03 	ldbu	r2,-12(fp)
8112e288:	1005883a 	mov	r2,r2
8112e28c:	10800128 	cmpgeui	r2,r2,4
8112e290:	1000031e 	bne	r2,zero,8112e2a0 <OSTmrStateGet+0xc0>
        case OS_TMR_STATE_UNUSED:   
        case OS_TMR_STATE_STOPPED:  
        case OS_TMR_STATE_COMPLETED:
        case OS_TMR_STATE_RUNNING:  
             *perr = OS_ERR_NONE;
8112e294:	e0bfff17 	ldw	r2,-4(fp)
8112e298:	10000005 	stb	zero,0(r2)
             break;
8112e29c:	00000406 	br	8112e2b0 <OSTmrStateGet+0xd0>
             
        default:
             *perr = OS_ERR_TMR_INVALID_STATE;
8112e2a0:	e0bfff17 	ldw	r2,-4(fp)
8112e2a4:	00ffe344 	movi	r3,-115
8112e2a8:	10c00005 	stb	r3,0(r2)
             break;
8112e2ac:	0001883a 	nop
    }
    OSTmr_Unlock();
8112e2b0:	112ebe00 	call	8112ebe0 <OSTmr_Unlock>
    return (state);
8112e2b4:	e0bffd03 	ldbu	r2,-12(fp)
}
8112e2b8:	e037883a 	mov	sp,fp
8112e2bc:	dfc00117 	ldw	ra,4(sp)
8112e2c0:	df000017 	ldw	fp,0(sp)
8112e2c4:	dec00204 	addi	sp,sp,8
8112e2c8:	f800283a 	ret

8112e2cc <OSTmrStart>:
*/

#if OS_TMR_EN > 0
BOOLEAN  OSTmrStart (OS_TMR   *ptmr,
                     INT8U    *perr)
{
8112e2cc:	defffc04 	addi	sp,sp,-16
8112e2d0:	de00012e 	bgeu	sp,et,8112e2d8 <OSTmrStart+0xc>
8112e2d4:	003b68fa 	trap	3
8112e2d8:	dfc00315 	stw	ra,12(sp)
8112e2dc:	df000215 	stw	fp,8(sp)
8112e2e0:	df000204 	addi	fp,sp,8
8112e2e4:	e13ffe15 	stw	r4,-8(fp)
8112e2e8:	e17fff15 	stw	r5,-4(fp)
#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                               /* Validate arguments                                     */
8112e2ec:	e0bfff17 	ldw	r2,-4(fp)
8112e2f0:	1000021e 	bne	r2,zero,8112e2fc <OSTmrStart+0x30>
        return (OS_FALSE);
8112e2f4:	0005883a 	mov	r2,zero
8112e2f8:	00004106 	br	8112e400 <OSTmrStart+0x134>
    }
    if (ptmr == (OS_TMR *)0) {
8112e2fc:	e0bffe17 	ldw	r2,-8(fp)
8112e300:	1000051e 	bne	r2,zero,8112e318 <OSTmrStart+0x4c>
        *perr = OS_ERR_TMR_INVALID;
8112e304:	e0bfff17 	ldw	r2,-4(fp)
8112e308:	00ffe284 	movi	r3,-118
8112e30c:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
8112e310:	0005883a 	mov	r2,zero
8112e314:	00003a06 	br	8112e400 <OSTmrStart+0x134>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                   /* Validate timer structure                               */
8112e318:	e0bffe17 	ldw	r2,-8(fp)
8112e31c:	10800003 	ldbu	r2,0(r2)
8112e320:	10803fcc 	andi	r2,r2,255
8112e324:	10801920 	cmpeqi	r2,r2,100
8112e328:	1000051e 	bne	r2,zero,8112e340 <OSTmrStart+0x74>
        *perr = OS_ERR_TMR_INVALID_TYPE;
8112e32c:	e0bfff17 	ldw	r2,-4(fp)
8112e330:	00ffe244 	movi	r3,-119
8112e334:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
8112e338:	0005883a 	mov	r2,zero
8112e33c:	00003006 	br	8112e400 <OSTmrStart+0x134>
    }
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
8112e340:	d0a08f03 	ldbu	r2,-32196(gp)
8112e344:	10803fcc 	andi	r2,r2,255
8112e348:	10000526 	beq	r2,zero,8112e360 <OSTmrStart+0x94>
        *perr  = OS_ERR_TMR_ISR;
8112e34c:	e0bfff17 	ldw	r2,-4(fp)
8112e350:	00ffe2c4 	movi	r3,-117
8112e354:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
8112e358:	0005883a 	mov	r2,zero
8112e35c:	00002806 	br	8112e400 <OSTmrStart+0x134>
    }
    OSTmr_Lock();
8112e360:	112eb9c0 	call	8112eb9c <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
8112e364:	e0bffe17 	ldw	r2,-8(fp)
8112e368:	10800c43 	ldbu	r2,49(r2)
8112e36c:	10803fcc 	andi	r2,r2,255
8112e370:	10c000c8 	cmpgei	r3,r2,3
8112e374:	1800031e 	bne	r3,zero,8112e384 <OSTmrStart+0xb8>
8112e378:	00800e16 	blt	zero,r2,8112e3b4 <OSTmrStart+0xe8>
8112e37c:	10001526 	beq	r2,zero,8112e3d4 <OSTmrStart+0x108>
8112e380:	00001a06 	br	8112e3ec <OSTmrStart+0x120>
8112e384:	108000e0 	cmpeqi	r2,r2,3
8112e388:	10001826 	beq	r2,zero,8112e3ec <OSTmrStart+0x120>
        case OS_TMR_STATE_RUNNING:                          /* Restart the timer                                      */
             OSTmr_Unlink(ptmr);                            /* ... Stop the timer                                     */
8112e38c:	e13ffe17 	ldw	r4,-8(fp)
8112e390:	112eaa00 	call	8112eaa0 <OSTmr_Unlink>
             OSTmr_Link(ptmr, OS_TMR_LINK_DLY);             /* ... Link timer to timer wheel                          */
8112e394:	000b883a 	mov	r5,zero
8112e398:	e13ffe17 	ldw	r4,-8(fp)
8112e39c:	112e9500 	call	8112e950 <OSTmr_Link>
             OSTmr_Unlock();
8112e3a0:	112ebe00 	call	8112ebe0 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
8112e3a4:	e0bfff17 	ldw	r2,-4(fp)
8112e3a8:	10000005 	stb	zero,0(r2)
             return (OS_TRUE);
8112e3ac:	00800044 	movi	r2,1
8112e3b0:	00001306 	br	8112e400 <OSTmrStart+0x134>

        case OS_TMR_STATE_STOPPED:                          /* Start the timer                                        */
        case OS_TMR_STATE_COMPLETED:
             OSTmr_Link(ptmr, OS_TMR_LINK_DLY);             /* ... Link timer to timer wheel                          */
8112e3b4:	000b883a 	mov	r5,zero
8112e3b8:	e13ffe17 	ldw	r4,-8(fp)
8112e3bc:	112e9500 	call	8112e950 <OSTmr_Link>
             OSTmr_Unlock();
8112e3c0:	112ebe00 	call	8112ebe0 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
8112e3c4:	e0bfff17 	ldw	r2,-4(fp)
8112e3c8:	10000005 	stb	zero,0(r2)
             return (OS_TRUE);
8112e3cc:	00800044 	movi	r2,1
8112e3d0:	00000b06 	br	8112e400 <OSTmrStart+0x134>

        case OS_TMR_STATE_UNUSED:                           /* Timer not created                                      */
             OSTmr_Unlock();
8112e3d4:	112ebe00 	call	8112ebe0 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
8112e3d8:	e0bfff17 	ldw	r2,-4(fp)
8112e3dc:	00ffe1c4 	movi	r3,-121
8112e3e0:	10c00005 	stb	r3,0(r2)
             return (OS_FALSE);
8112e3e4:	0005883a 	mov	r2,zero
8112e3e8:	00000506 	br	8112e400 <OSTmrStart+0x134>

        default:
             OSTmr_Unlock();
8112e3ec:	112ebe00 	call	8112ebe0 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
8112e3f0:	e0bfff17 	ldw	r2,-4(fp)
8112e3f4:	00ffe344 	movi	r3,-115
8112e3f8:	10c00005 	stb	r3,0(r2)
             return (OS_FALSE);
8112e3fc:	0005883a 	mov	r2,zero
    }
}
8112e400:	e037883a 	mov	sp,fp
8112e404:	dfc00117 	ldw	ra,4(sp)
8112e408:	df000017 	ldw	fp,0(sp)
8112e40c:	dec00204 	addi	sp,sp,8
8112e410:	f800283a 	ret

8112e414 <OSTmrStop>:
#if OS_TMR_EN > 0
BOOLEAN  OSTmrStop (OS_TMR  *ptmr,
                    INT8U    opt,
                    void    *callback_arg,
                    INT8U   *perr)
{
8112e414:	defff904 	addi	sp,sp,-28
8112e418:	de00012e 	bgeu	sp,et,8112e420 <OSTmrStop+0xc>
8112e41c:	003b68fa 	trap	3
8112e420:	dfc00615 	stw	ra,24(sp)
8112e424:	df000515 	stw	fp,20(sp)
8112e428:	df000504 	addi	fp,sp,20
8112e42c:	e13ffc15 	stw	r4,-16(fp)
8112e430:	2805883a 	mov	r2,r5
8112e434:	e1bffe15 	stw	r6,-8(fp)
8112e438:	e1ffff15 	stw	r7,-4(fp)
8112e43c:	e0bffd05 	stb	r2,-12(fp)
    OS_TMR_CALLBACK  pfnct;


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                                     /* Validate arguments                               */
8112e440:	e0bfff17 	ldw	r2,-4(fp)
8112e444:	1000021e 	bne	r2,zero,8112e450 <OSTmrStop+0x3c>
        return (OS_FALSE);
8112e448:	0005883a 	mov	r2,zero
8112e44c:	00006606 	br	8112e5e8 <OSTmrStop+0x1d4>
    }
    if (ptmr == (OS_TMR *)0) {
8112e450:	e0bffc17 	ldw	r2,-16(fp)
8112e454:	1000051e 	bne	r2,zero,8112e46c <OSTmrStop+0x58>
        *perr = OS_ERR_TMR_INVALID;
8112e458:	e0bfff17 	ldw	r2,-4(fp)
8112e45c:	00ffe284 	movi	r3,-118
8112e460:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
8112e464:	0005883a 	mov	r2,zero
8112e468:	00005f06 	br	8112e5e8 <OSTmrStop+0x1d4>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                         /* Validate timer structure                         */
8112e46c:	e0bffc17 	ldw	r2,-16(fp)
8112e470:	10800003 	ldbu	r2,0(r2)
8112e474:	10803fcc 	andi	r2,r2,255
8112e478:	10801920 	cmpeqi	r2,r2,100
8112e47c:	1000051e 	bne	r2,zero,8112e494 <OSTmrStop+0x80>
        *perr = OS_ERR_TMR_INVALID_TYPE;
8112e480:	e0bfff17 	ldw	r2,-4(fp)
8112e484:	00ffe244 	movi	r3,-119
8112e488:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
8112e48c:	0005883a 	mov	r2,zero
8112e490:	00005506 	br	8112e5e8 <OSTmrStop+0x1d4>
    }
    if (OSIntNesting > 0) {                                       /* See if trying to call from an ISR                */
8112e494:	d0a08f03 	ldbu	r2,-32196(gp)
8112e498:	10803fcc 	andi	r2,r2,255
8112e49c:	10000526 	beq	r2,zero,8112e4b4 <OSTmrStop+0xa0>
        *perr  = OS_ERR_TMR_ISR;
8112e4a0:	e0bfff17 	ldw	r2,-4(fp)
8112e4a4:	00ffe2c4 	movi	r3,-117
8112e4a8:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
8112e4ac:	0005883a 	mov	r2,zero
8112e4b0:	00004d06 	br	8112e5e8 <OSTmrStop+0x1d4>
    }
    OSTmr_Lock();
8112e4b4:	112eb9c0 	call	8112eb9c <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
8112e4b8:	e0bffc17 	ldw	r2,-16(fp)
8112e4bc:	10800c43 	ldbu	r2,49(r2)
8112e4c0:	10803fcc 	andi	r2,r2,255
8112e4c4:	10c000c8 	cmpgei	r3,r2,3
8112e4c8:	1800031e 	bne	r3,zero,8112e4d8 <OSTmrStop+0xc4>
8112e4cc:	00803516 	blt	zero,r2,8112e5a4 <OSTmrStop+0x190>
8112e4d0:	10003a26 	beq	r2,zero,8112e5bc <OSTmrStop+0x1a8>
8112e4d4:	00003f06 	br	8112e5d4 <OSTmrStop+0x1c0>
8112e4d8:	108000e0 	cmpeqi	r2,r2,3
8112e4dc:	10003d26 	beq	r2,zero,8112e5d4 <OSTmrStop+0x1c0>
        case OS_TMR_STATE_RUNNING:
             OSTmr_Unlink(ptmr);                                  /* Remove from current wheel spoke                  */
8112e4e0:	e13ffc17 	ldw	r4,-16(fp)
8112e4e4:	112eaa00 	call	8112eaa0 <OSTmr_Unlink>
             *perr = OS_ERR_NONE;
8112e4e8:	e0bfff17 	ldw	r2,-4(fp)
8112e4ec:	10000005 	stb	zero,0(r2)
             switch (opt) {
8112e4f0:	e0bffd03 	ldbu	r2,-12(fp)
8112e4f4:	10c000e0 	cmpeqi	r3,r2,3
8112e4f8:	1800041e 	bne	r3,zero,8112e50c <OSTmrStop+0xf8>
8112e4fc:	10c00120 	cmpeqi	r3,r2,4
8112e500:	1800121e 	bne	r3,zero,8112e54c <OSTmrStop+0x138>
8112e504:	10002326 	beq	r2,zero,8112e594 <OSTmrStop+0x180>
8112e508:	00001e06 	br	8112e584 <OSTmrStop+0x170>
                 case OS_TMR_OPT_CALLBACK:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
8112e50c:	e0bffc17 	ldw	r2,-16(fp)
8112e510:	10800117 	ldw	r2,4(r2)
8112e514:	e0bffb15 	stw	r2,-20(fp)
                      if (pfnct != (OS_TMR_CALLBACK)0) {
8112e518:	e0bffb17 	ldw	r2,-20(fp)
8112e51c:	10000726 	beq	r2,zero,8112e53c <OSTmrStop+0x128>
                          (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);  /* Use callback arg when timer was created */
8112e520:	e0bffc17 	ldw	r2,-16(fp)
8112e524:	10c00217 	ldw	r3,8(r2)
8112e528:	e0bffb17 	ldw	r2,-20(fp)
8112e52c:	180b883a 	mov	r5,r3
8112e530:	e13ffc17 	ldw	r4,-16(fp)
8112e534:	103ee83a 	callr	r2
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
                      }
                      break;
8112e538:	00001706 	br	8112e598 <OSTmrStop+0x184>
                 case OS_TMR_OPT_CALLBACK:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
                      if (pfnct != (OS_TMR_CALLBACK)0) {
                          (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);  /* Use callback arg when timer was created */
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
8112e53c:	e0bfff17 	ldw	r2,-4(fp)
8112e540:	00ffe3c4 	movi	r3,-113
8112e544:	10c00005 	stb	r3,0(r2)
                      }
                      break;
8112e548:	00001306 	br	8112e598 <OSTmrStop+0x184>

                 case OS_TMR_OPT_CALLBACK_ARG:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
8112e54c:	e0bffc17 	ldw	r2,-16(fp)
8112e550:	10800117 	ldw	r2,4(r2)
8112e554:	e0bffb15 	stw	r2,-20(fp)
                      if (pfnct != (OS_TMR_CALLBACK)0) {
8112e558:	e0bffb17 	ldw	r2,-20(fp)
8112e55c:	10000526 	beq	r2,zero,8112e574 <OSTmrStop+0x160>
                          (*pfnct)((void *)ptmr, callback_arg);   /* ... using the 'callback_arg' provided in call    */
8112e560:	e0bffb17 	ldw	r2,-20(fp)
8112e564:	e17ffe17 	ldw	r5,-8(fp)
8112e568:	e13ffc17 	ldw	r4,-16(fp)
8112e56c:	103ee83a 	callr	r2
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
                      }
                      break;
8112e570:	00000906 	br	8112e598 <OSTmrStop+0x184>
                 case OS_TMR_OPT_CALLBACK_ARG:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
                      if (pfnct != (OS_TMR_CALLBACK)0) {
                          (*pfnct)((void *)ptmr, callback_arg);   /* ... using the 'callback_arg' provided in call    */
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
8112e574:	e0bfff17 	ldw	r2,-4(fp)
8112e578:	00ffe3c4 	movi	r3,-113
8112e57c:	10c00005 	stb	r3,0(r2)
                      }
                      break;
8112e580:	00000506 	br	8112e598 <OSTmrStop+0x184>

                 case OS_TMR_OPT_NONE:
                      break;

                 default:
                     *perr = OS_ERR_TMR_INVALID_OPT;
8112e584:	e0bfff17 	ldw	r2,-4(fp)
8112e588:	00ffe104 	movi	r3,-124
8112e58c:	10c00005 	stb	r3,0(r2)
                     break;
8112e590:	00000106 	br	8112e598 <OSTmrStop+0x184>
                          *perr = OS_ERR_TMR_NO_CALLBACK;
                      }
                      break;

                 case OS_TMR_OPT_NONE:
                      break;
8112e594:	0001883a 	nop

                 default:
                     *perr = OS_ERR_TMR_INVALID_OPT;
                     break;
             }
             OSTmr_Unlock();
8112e598:	112ebe00 	call	8112ebe0 <OSTmr_Unlock>
             return (OS_TRUE);
8112e59c:	00800044 	movi	r2,1
8112e5a0:	00001106 	br	8112e5e8 <OSTmrStop+0x1d4>

        case OS_TMR_STATE_COMPLETED:                              /* Timer has already completed the ONE-SHOT or ...  */
        case OS_TMR_STATE_STOPPED:                                /* ... timer has not started yet.                   */
             OSTmr_Unlock();
8112e5a4:	112ebe00 	call	8112ebe0 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_STOPPED;
8112e5a8:	e0bfff17 	ldw	r2,-4(fp)
8112e5ac:	00ffe384 	movi	r3,-114
8112e5b0:	10c00005 	stb	r3,0(r2)
             return (OS_TRUE);
8112e5b4:	00800044 	movi	r2,1
8112e5b8:	00000b06 	br	8112e5e8 <OSTmrStop+0x1d4>

        case OS_TMR_STATE_UNUSED:                                 /* Timer was not created                            */
             OSTmr_Unlock();
8112e5bc:	112ebe00 	call	8112ebe0 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
8112e5c0:	e0bfff17 	ldw	r2,-4(fp)
8112e5c4:	00ffe1c4 	movi	r3,-121
8112e5c8:	10c00005 	stb	r3,0(r2)
             return (OS_FALSE);
8112e5cc:	0005883a 	mov	r2,zero
8112e5d0:	00000506 	br	8112e5e8 <OSTmrStop+0x1d4>

        default:
             OSTmr_Unlock();
8112e5d4:	112ebe00 	call	8112ebe0 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
8112e5d8:	e0bfff17 	ldw	r2,-4(fp)
8112e5dc:	00ffe344 	movi	r3,-115
8112e5e0:	10c00005 	stb	r3,0(r2)
             return (OS_FALSE);
8112e5e4:	0005883a 	mov	r2,zero
    }
}
8112e5e8:	e037883a 	mov	sp,fp
8112e5ec:	dfc00117 	ldw	ra,4(sp)
8112e5f0:	df000017 	ldw	fp,0(sp)
8112e5f4:	dec00204 	addi	sp,sp,8
8112e5f8:	f800283a 	ret

8112e5fc <OSTmrSignal>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
INT8U  OSTmrSignal (void)
{
8112e5fc:	defffd04 	addi	sp,sp,-12
8112e600:	de00012e 	bgeu	sp,et,8112e608 <OSTmrSignal+0xc>
8112e604:	003b68fa 	trap	3
8112e608:	dfc00215 	stw	ra,8(sp)
8112e60c:	df000115 	stw	fp,4(sp)
8112e610:	df000104 	addi	fp,sp,4
    INT8U  err;


    err = OSSemPost(OSTmrSemSignal);
8112e614:	d0a07e17 	ldw	r2,-32264(gp)
8112e618:	1009883a 	mov	r4,r2
8112e61c:	112bbc80 	call	8112bbc8 <OSSemPost>
8112e620:	e0bfff05 	stb	r2,-4(fp)
    return (err);
8112e624:	e0bfff03 	ldbu	r2,-4(fp)
}
8112e628:	e037883a 	mov	sp,fp
8112e62c:	dfc00117 	ldw	ra,4(sp)
8112e630:	df000017 	ldw	fp,0(sp)
8112e634:	dec00204 	addi	sp,sp,8
8112e638:	f800283a 	ret

8112e63c <OSTmr_Alloc>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  OS_TMR  *OSTmr_Alloc (void)
{
8112e63c:	defffe04 	addi	sp,sp,-8
8112e640:	de00012e 	bgeu	sp,et,8112e648 <OSTmr_Alloc+0xc>
8112e644:	003b68fa 	trap	3
8112e648:	df000115 	stw	fp,4(sp)
8112e64c:	df000104 	addi	fp,sp,4
    OS_TMR *ptmr;


    if (OSTmrFreeList == (OS_TMR *)0) {
8112e650:	d0a07c17 	ldw	r2,-32272(gp)
8112e654:	1000021e 	bne	r2,zero,8112e660 <OSTmr_Alloc+0x24>
        return ((OS_TMR *)0);
8112e658:	0005883a 	mov	r2,zero
8112e65c:	00001006 	br	8112e6a0 <OSTmr_Alloc+0x64>
    }
    ptmr            = (OS_TMR *)OSTmrFreeList;
8112e660:	d0a07c17 	ldw	r2,-32272(gp)
8112e664:	e0bfff15 	stw	r2,-4(fp)
    OSTmrFreeList   = (OS_TMR *)ptmr->OSTmrNext;
8112e668:	e0bfff17 	ldw	r2,-4(fp)
8112e66c:	10800317 	ldw	r2,12(r2)
8112e670:	d0a07c15 	stw	r2,-32272(gp)
    ptmr->OSTmrNext = (OS_TCB *)0;
8112e674:	e0bfff17 	ldw	r2,-4(fp)
8112e678:	10000315 	stw	zero,12(r2)
    ptmr->OSTmrPrev = (OS_TCB *)0;
8112e67c:	e0bfff17 	ldw	r2,-4(fp)
8112e680:	10000415 	stw	zero,16(r2)
    OSTmrUsed++;
8112e684:	d0a0810b 	ldhu	r2,-32252(gp)
8112e688:	10800044 	addi	r2,r2,1
8112e68c:	d0a0810d 	sth	r2,-32252(gp)
    OSTmrFree--;
8112e690:	d0a0850b 	ldhu	r2,-32236(gp)
8112e694:	10bfffc4 	addi	r2,r2,-1
8112e698:	d0a0850d 	sth	r2,-32236(gp)
    return (ptmr);
8112e69c:	e0bfff17 	ldw	r2,-4(fp)
}
8112e6a0:	e037883a 	mov	sp,fp
8112e6a4:	df000017 	ldw	fp,0(sp)
8112e6a8:	dec00104 	addi	sp,sp,4
8112e6ac:	f800283a 	ret

8112e6b0 <OSTmr_Free>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Free (OS_TMR *ptmr)
{
8112e6b0:	defffe04 	addi	sp,sp,-8
8112e6b4:	de00012e 	bgeu	sp,et,8112e6bc <OSTmr_Free+0xc>
8112e6b8:	003b68fa 	trap	3
8112e6bc:	df000115 	stw	fp,4(sp)
8112e6c0:	df000104 	addi	fp,sp,4
8112e6c4:	e13fff15 	stw	r4,-4(fp)
    ptmr->OSTmrState       = OS_TMR_STATE_UNUSED;      /* Clear timer object fields                                   */
8112e6c8:	e0bfff17 	ldw	r2,-4(fp)
8112e6cc:	10000c45 	stb	zero,49(r2)
    ptmr->OSTmrOpt         = OS_TMR_OPT_NONE;
8112e6d0:	e0bfff17 	ldw	r2,-4(fp)
8112e6d4:	10000c05 	stb	zero,48(r2)
    ptmr->OSTmrPeriod      = 0;
8112e6d8:	e0bfff17 	ldw	r2,-4(fp)
8112e6dc:	10000715 	stw	zero,28(r2)
    ptmr->OSTmrMatch       = 0;
8112e6e0:	e0bfff17 	ldw	r2,-4(fp)
8112e6e4:	10000515 	stw	zero,20(r2)
    ptmr->OSTmrCallback    = (OS_TMR_CALLBACK)0;
8112e6e8:	e0bfff17 	ldw	r2,-4(fp)
8112e6ec:	10000115 	stw	zero,4(r2)
    ptmr->OSTmrCallbackArg = (void *)0;
8112e6f0:	e0bfff17 	ldw	r2,-4(fp)
8112e6f4:	10000215 	stw	zero,8(r2)
#if OS_TMR_CFG_NAME_SIZE > 1
    ptmr->OSTmrName[0]     = '?';                      /* Unknown name                                                */
8112e6f8:	e0bfff17 	ldw	r2,-4(fp)
8112e6fc:	00c00fc4 	movi	r3,63
8112e700:	10c00805 	stb	r3,32(r2)
    ptmr->OSTmrName[1]     = OS_ASCII_NUL;
8112e704:	e0bfff17 	ldw	r2,-4(fp)
8112e708:	10000845 	stb	zero,33(r2)
#endif

    ptmr->OSTmrPrev        = (OS_TCB *)0;              /* Chain timer to free list                                    */
8112e70c:	e0bfff17 	ldw	r2,-4(fp)
8112e710:	10000415 	stw	zero,16(r2)
    ptmr->OSTmrNext        = OSTmrFreeList;
8112e714:	d0e07c17 	ldw	r3,-32272(gp)
8112e718:	e0bfff17 	ldw	r2,-4(fp)
8112e71c:	10c00315 	stw	r3,12(r2)
    OSTmrFreeList          = ptmr;
8112e720:	e0bfff17 	ldw	r2,-4(fp)
8112e724:	d0a07c15 	stw	r2,-32272(gp)

    OSTmrUsed--;                                       /* Update timer object statistics                              */
8112e728:	d0a0810b 	ldhu	r2,-32252(gp)
8112e72c:	10bfffc4 	addi	r2,r2,-1
8112e730:	d0a0810d 	sth	r2,-32252(gp)
    OSTmrFree++;
8112e734:	d0a0850b 	ldhu	r2,-32236(gp)
8112e738:	10800044 	addi	r2,r2,1
8112e73c:	d0a0850d 	sth	r2,-32236(gp)
}
8112e740:	0001883a 	nop
8112e744:	e037883a 	mov	sp,fp
8112e748:	df000017 	ldw	fp,0(sp)
8112e74c:	dec00104 	addi	sp,sp,4
8112e750:	f800283a 	ret

8112e754 <OSTmr_Init>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
void  OSTmr_Init (void)
{
8112e754:	defffa04 	addi	sp,sp,-24
8112e758:	de00012e 	bgeu	sp,et,8112e760 <OSTmr_Init+0xc>
8112e75c:	003b68fa 	trap	3
8112e760:	dfc00515 	stw	ra,20(sp)
8112e764:	df000415 	stw	fp,16(sp)
8112e768:	df000404 	addi	fp,sp,16
    INT16U   i;
    OS_TMR  *ptmr1;
    OS_TMR  *ptmr2;


    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
8112e76c:	01406804 	movi	r5,416
8112e770:	012045b4 	movhi	r4,33046
8112e774:	21042604 	addi	r4,r4,4248
8112e778:	11268c40 	call	811268c4 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */
8112e77c:	01400404 	movi	r5,16
8112e780:	012045b4 	movhi	r4,33046
8112e784:	21034604 	addi	r4,r4,3352
8112e788:	11268c40 	call	811268c4 <OS_MemClr>

    ptmr1 = &OSTmrTbl[0];
8112e78c:	00a045b4 	movhi	r2,33046
8112e790:	10842604 	addi	r2,r2,4248
8112e794:	e0bffd15 	stw	r2,-12(fp)
    ptmr2 = &OSTmrTbl[1];
8112e798:	00a045b4 	movhi	r2,33046
8112e79c:	10843304 	addi	r2,r2,4300
8112e7a0:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_TMR_CFG_MAX - 1); i++) {                        /* Init. list of free TMRs                    */
8112e7a4:	e03ffc0d 	sth	zero,-16(fp)
8112e7a8:	00001606 	br	8112e804 <OSTmr_Init+0xb0>
        ptmr1->OSTmrType    = OS_TMR_TYPE;
8112e7ac:	e0bffd17 	ldw	r2,-12(fp)
8112e7b0:	00c01904 	movi	r3,100
8112e7b4:	10c00005 	stb	r3,0(r2)
        ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                      /* Indicate that timer is inactive            */
8112e7b8:	e0bffd17 	ldw	r2,-12(fp)
8112e7bc:	10000c45 	stb	zero,49(r2)
        ptmr1->OSTmrNext    = (void *)ptmr2;                            /* Link to next timer                         */
8112e7c0:	e0bffd17 	ldw	r2,-12(fp)
8112e7c4:	e0fffe17 	ldw	r3,-8(fp)
8112e7c8:	10c00315 	stw	r3,12(r2)
#if OS_TMR_CFG_NAME_SIZE > 1
        ptmr1->OSTmrName[0] = '?';                                      /* Unknown name                               */
8112e7cc:	e0bffd17 	ldw	r2,-12(fp)
8112e7d0:	00c00fc4 	movi	r3,63
8112e7d4:	10c00805 	stb	r3,32(r2)
        ptmr1->OSTmrName[1] = OS_ASCII_NUL;
8112e7d8:	e0bffd17 	ldw	r2,-12(fp)
8112e7dc:	10000845 	stb	zero,33(r2)
#endif
        ptmr1++;
8112e7e0:	e0bffd17 	ldw	r2,-12(fp)
8112e7e4:	10800d04 	addi	r2,r2,52
8112e7e8:	e0bffd15 	stw	r2,-12(fp)
        ptmr2++;
8112e7ec:	e0bffe17 	ldw	r2,-8(fp)
8112e7f0:	10800d04 	addi	r2,r2,52
8112e7f4:	e0bffe15 	stw	r2,-8(fp)
    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */

    ptmr1 = &OSTmrTbl[0];
    ptmr2 = &OSTmrTbl[1];
    for (i = 0; i < (OS_TMR_CFG_MAX - 1); i++) {                        /* Init. list of free TMRs                    */
8112e7f8:	e0bffc0b 	ldhu	r2,-16(fp)
8112e7fc:	10800044 	addi	r2,r2,1
8112e800:	e0bffc0d 	sth	r2,-16(fp)
8112e804:	e0bffc0b 	ldhu	r2,-16(fp)
8112e808:	108001f0 	cmpltui	r2,r2,7
8112e80c:	103fe71e 	bne	r2,zero,8112e7ac <__reset+0xfb10e7ac>
        ptmr1->OSTmrName[1] = OS_ASCII_NUL;
#endif
        ptmr1++;
        ptmr2++;
    }
    ptmr1->OSTmrType    = OS_TMR_TYPE;
8112e810:	e0bffd17 	ldw	r2,-12(fp)
8112e814:	00c01904 	movi	r3,100
8112e818:	10c00005 	stb	r3,0(r2)
    ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                          /* Indicate that timer is inactive            */
8112e81c:	e0bffd17 	ldw	r2,-12(fp)
8112e820:	10000c45 	stb	zero,49(r2)
    ptmr1->OSTmrNext    = (void *)0;                                    /* Last OS_TMR                                */
8112e824:	e0bffd17 	ldw	r2,-12(fp)
8112e828:	10000315 	stw	zero,12(r2)
#if OS_TMR_CFG_NAME_SIZE > 1
    ptmr1->OSTmrName[0] = '?';                                          /* Unknown name                               */
8112e82c:	e0bffd17 	ldw	r2,-12(fp)
8112e830:	00c00fc4 	movi	r3,63
8112e834:	10c00805 	stb	r3,32(r2)
    ptmr1->OSTmrName[1] = OS_ASCII_NUL;
8112e838:	e0bffd17 	ldw	r2,-12(fp)
8112e83c:	10000845 	stb	zero,33(r2)
#endif
    OSTmrTime           = 0;
8112e840:	d0209115 	stw	zero,-32188(gp)
    OSTmrUsed           = 0;
8112e844:	d020810d 	sth	zero,-32252(gp)
    OSTmrFree           = OS_TMR_CFG_MAX;
8112e848:	00800204 	movi	r2,8
8112e84c:	d0a0850d 	sth	r2,-32236(gp)
    OSTmrFreeList       = &OSTmrTbl[0];
8112e850:	00a045b4 	movhi	r2,33046
8112e854:	10842604 	addi	r2,r2,4248
8112e858:	d0a07c15 	stw	r2,-32272(gp)
    OSTmrSem            = OSSemCreate(1);
8112e85c:	01000044 	movi	r4,1
8112e860:	112b5180 	call	8112b518 <OSSemCreate>
8112e864:	d0a09315 	stw	r2,-32180(gp)
    OSTmrSemSignal      = OSSemCreate(0);
8112e868:	0009883a 	mov	r4,zero
8112e86c:	112b5180 	call	8112b518 <OSSemCreate>
8112e870:	d0a07e15 	stw	r2,-32264(gp)

#if OS_EVENT_NAME_SIZE > 18
    OSEventNameSet(OSTmrSem,       (INT8U *)"uC/OS-II TmrLock",   &err);/* Assign names to semaphores                 */
8112e874:	d0a09317 	ldw	r2,-32180(gp)
8112e878:	e0ffff04 	addi	r3,fp,-4
8112e87c:	180d883a 	mov	r6,r3
8112e880:	01604534 	movhi	r5,33044
8112e884:	296f5904 	addi	r5,r5,-17052
8112e888:	1009883a 	mov	r4,r2
8112e88c:	112509c0 	call	8112509c <OSEventNameSet>
    OSEventNameSet(OSTmrSem,       (INT8U *)"OS-TmrLock",         &err);
#endif
#endif

#if OS_EVENT_NAME_SIZE > 18
    OSEventNameSet(OSTmrSemSignal, (INT8U *)"uC/OS-II TmrSignal", &err);
8112e890:	d0a07e17 	ldw	r2,-32264(gp)
8112e894:	e0ffff04 	addi	r3,fp,-4
8112e898:	180d883a 	mov	r6,r3
8112e89c:	01604534 	movhi	r5,33044
8112e8a0:	296f5e04 	addi	r5,r5,-17032
8112e8a4:	1009883a 	mov	r4,r2
8112e8a8:	112509c0 	call	8112509c <OSEventNameSet>
#if OS_EVENT_NAME_SIZE > 10
    OSEventNameSet(OSTmrSemSignal, (INT8U *)"OS-TmrSig",          &err);
#endif
#endif

    OSTmr_InitTask();
8112e8ac:	112e8c80 	call	8112e8c8 <OSTmr_InitTask>
}
8112e8b0:	0001883a 	nop
8112e8b4:	e037883a 	mov	sp,fp
8112e8b8:	dfc00117 	ldw	ra,4(sp)
8112e8bc:	df000017 	ldw	fp,0(sp)
8112e8c0:	dec00204 	addi	sp,sp,8
8112e8c4:	f800283a 	ret

8112e8c8 <OSTmr_InitTask>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_InitTask (void)
{
8112e8c8:	defff804 	addi	sp,sp,-32
8112e8cc:	de00012e 	bgeu	sp,et,8112e8d4 <OSTmr_InitTask+0xc>
8112e8d0:	003b68fa 	trap	3
8112e8d4:	dfc00715 	stw	ra,28(sp)
8112e8d8:	df000615 	stw	fp,24(sp)
8112e8dc:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OSTmr_Task,
8112e8e0:	008000c4 	movi	r2,3
8112e8e4:	d8800415 	stw	r2,16(sp)
8112e8e8:	d8000315 	stw	zero,12(sp)
8112e8ec:	00808004 	movi	r2,512
8112e8f0:	d8800215 	stw	r2,8(sp)
8112e8f4:	00a045b4 	movhi	r2,33046
8112e8f8:	108a1204 	addi	r2,r2,10312
8112e8fc:	d8800115 	stw	r2,4(sp)
8112e900:	00bfff54 	movui	r2,65533
8112e904:	d8800015 	stw	r2,0(sp)
8112e908:	01c00484 	movi	r7,18
8112e90c:	01a045b4 	movhi	r6,33046
8112e910:	318c1104 	addi	r6,r6,12356
8112e914:	000b883a 	mov	r5,zero
8112e918:	012044f4 	movhi	r4,33043
8112e91c:	213b0704 	addi	r4,r4,-5092
8112e920:	112c5ac0 	call	8112c5ac <OSTaskCreateExt>
                       OS_TASK_TMR_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 12
    OSTaskNameSet(OS_TASK_TMR_PRIO, (INT8U *)"uC/OS-II Tmr", &err);
8112e924:	e1bfff04 	addi	r6,fp,-4
8112e928:	01604534 	movhi	r5,33044
8112e92c:	296f6304 	addi	r5,r5,-17012
8112e930:	01000484 	movi	r4,18
8112e934:	112cddc0 	call	8112cddc <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 6
    OSTaskNameSet(OS_TASK_TMR_PRIO, (INT8U *)"OS-Tmr", &err);
#endif
#endif
}
8112e938:	0001883a 	nop
8112e93c:	e037883a 	mov	sp,fp
8112e940:	dfc00117 	ldw	ra,4(sp)
8112e944:	df000017 	ldw	fp,0(sp)
8112e948:	dec00204 	addi	sp,sp,8
8112e94c:	f800283a 	ret

8112e950 <OSTmr_Link>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Link (OS_TMR *ptmr, INT8U type)
{
8112e950:	defffa04 	addi	sp,sp,-24
8112e954:	de00012e 	bgeu	sp,et,8112e95c <OSTmr_Link+0xc>
8112e958:	003b68fa 	trap	3
8112e95c:	df000515 	stw	fp,20(sp)
8112e960:	df000504 	addi	fp,sp,20
8112e964:	e13ffe15 	stw	r4,-8(fp)
8112e968:	2805883a 	mov	r2,r5
8112e96c:	e0bfff05 	stb	r2,-4(fp)
    OS_TMR       *ptmr1;
    OS_TMR_WHEEL *pspoke;
    INT16U        spoke;


    ptmr->OSTmrState = OS_TMR_STATE_RUNNING;
8112e970:	e0bffe17 	ldw	r2,-8(fp)
8112e974:	00c000c4 	movi	r3,3
8112e978:	10c00c45 	stb	r3,49(r2)
    if (type == OS_TMR_LINK_PERIODIC) {                            /* Determine when timer will expire                */
8112e97c:	e0bfff03 	ldbu	r2,-4(fp)
8112e980:	10800058 	cmpnei	r2,r2,1
8112e984:	1000071e 	bne	r2,zero,8112e9a4 <OSTmr_Link+0x54>
        ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
8112e988:	e0bffe17 	ldw	r2,-8(fp)
8112e98c:	10c00717 	ldw	r3,28(r2)
8112e990:	d0a09117 	ldw	r2,-32188(gp)
8112e994:	1887883a 	add	r3,r3,r2
8112e998:	e0bffe17 	ldw	r2,-8(fp)
8112e99c:	10c00515 	stw	r3,20(r2)
8112e9a0:	00001006 	br	8112e9e4 <OSTmr_Link+0x94>
    } else {
        if (ptmr->OSTmrDly == 0) {
8112e9a4:	e0bffe17 	ldw	r2,-8(fp)
8112e9a8:	10800617 	ldw	r2,24(r2)
8112e9ac:	1000071e 	bne	r2,zero,8112e9cc <OSTmr_Link+0x7c>
            ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
8112e9b0:	e0bffe17 	ldw	r2,-8(fp)
8112e9b4:	10c00717 	ldw	r3,28(r2)
8112e9b8:	d0a09117 	ldw	r2,-32188(gp)
8112e9bc:	1887883a 	add	r3,r3,r2
8112e9c0:	e0bffe17 	ldw	r2,-8(fp)
8112e9c4:	10c00515 	stw	r3,20(r2)
8112e9c8:	00000606 	br	8112e9e4 <OSTmr_Link+0x94>
        } else {
            ptmr->OSTmrMatch = ptmr->OSTmrDly    + OSTmrTime;
8112e9cc:	e0bffe17 	ldw	r2,-8(fp)
8112e9d0:	10c00617 	ldw	r3,24(r2)
8112e9d4:	d0a09117 	ldw	r2,-32188(gp)
8112e9d8:	1887883a 	add	r3,r3,r2
8112e9dc:	e0bffe17 	ldw	r2,-8(fp)
8112e9e0:	10c00515 	stw	r3,20(r2)
        }
    }
    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
8112e9e4:	e0bffe17 	ldw	r2,-8(fp)
8112e9e8:	10800517 	ldw	r2,20(r2)
8112e9ec:	1080004c 	andi	r2,r2,1
8112e9f0:	e0bffb0d 	sth	r2,-20(fp)
    pspoke = &OSTmrWheelTbl[spoke];
8112e9f4:	e0bffb0b 	ldhu	r2,-20(fp)
8112e9f8:	100690fa 	slli	r3,r2,3
8112e9fc:	00a045b4 	movhi	r2,33046
8112ea00:	10834604 	addi	r2,r2,3352
8112ea04:	1885883a 	add	r2,r3,r2
8112ea08:	e0bffc15 	stw	r2,-16(fp)

    if (pspoke->OSTmrFirst == (OS_TMR *)0) {                       /* Link into timer wheel                           */
8112ea0c:	e0bffc17 	ldw	r2,-16(fp)
8112ea10:	10800017 	ldw	r2,0(r2)
8112ea14:	1000091e 	bne	r2,zero,8112ea3c <OSTmr_Link+0xec>
        pspoke->OSTmrFirst   = ptmr;
8112ea18:	e0bffc17 	ldw	r2,-16(fp)
8112ea1c:	e0fffe17 	ldw	r3,-8(fp)
8112ea20:	10c00015 	stw	r3,0(r2)
        ptmr->OSTmrNext      = (OS_TMR *)0;
8112ea24:	e0bffe17 	ldw	r2,-8(fp)
8112ea28:	10000315 	stw	zero,12(r2)
        pspoke->OSTmrEntries = 1;
8112ea2c:	e0bffc17 	ldw	r2,-16(fp)
8112ea30:	00c00044 	movi	r3,1
8112ea34:	10c0010d 	sth	r3,4(r2)
8112ea38:	00001206 	br	8112ea84 <OSTmr_Link+0x134>
    } else {
        ptmr1                = pspoke->OSTmrFirst;                 /* Point to first timer in the spoke               */
8112ea3c:	e0bffc17 	ldw	r2,-16(fp)
8112ea40:	10800017 	ldw	r2,0(r2)
8112ea44:	e0bffd15 	stw	r2,-12(fp)
        pspoke->OSTmrFirst   = ptmr;
8112ea48:	e0bffc17 	ldw	r2,-16(fp)
8112ea4c:	e0fffe17 	ldw	r3,-8(fp)
8112ea50:	10c00015 	stw	r3,0(r2)
        ptmr->OSTmrNext      = (void *)ptmr1;
8112ea54:	e0bffe17 	ldw	r2,-8(fp)
8112ea58:	e0fffd17 	ldw	r3,-12(fp)
8112ea5c:	10c00315 	stw	r3,12(r2)
        ptmr1->OSTmrPrev     = (void *)ptmr;
8112ea60:	e0bffd17 	ldw	r2,-12(fp)
8112ea64:	e0fffe17 	ldw	r3,-8(fp)
8112ea68:	10c00415 	stw	r3,16(r2)
        pspoke->OSTmrEntries++;
8112ea6c:	e0bffc17 	ldw	r2,-16(fp)
8112ea70:	1080010b 	ldhu	r2,4(r2)
8112ea74:	10800044 	addi	r2,r2,1
8112ea78:	1007883a 	mov	r3,r2
8112ea7c:	e0bffc17 	ldw	r2,-16(fp)
8112ea80:	10c0010d 	sth	r3,4(r2)
    }
    ptmr->OSTmrPrev = (void *)0;                                   /* Timer always inserted as first node in list     */
8112ea84:	e0bffe17 	ldw	r2,-8(fp)
8112ea88:	10000415 	stw	zero,16(r2)
}
8112ea8c:	0001883a 	nop
8112ea90:	e037883a 	mov	sp,fp
8112ea94:	df000017 	ldw	fp,0(sp)
8112ea98:	dec00104 	addi	sp,sp,4
8112ea9c:	f800283a 	ret

8112eaa0 <OSTmr_Unlink>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Unlink (OS_TMR *ptmr)
{
8112eaa0:	defffa04 	addi	sp,sp,-24
8112eaa4:	de00012e 	bgeu	sp,et,8112eaac <OSTmr_Unlink+0xc>
8112eaa8:	003b68fa 	trap	3
8112eaac:	df000515 	stw	fp,20(sp)
8112eab0:	df000504 	addi	fp,sp,20
8112eab4:	e13fff15 	stw	r4,-4(fp)
    OS_TMR        *ptmr2;
    OS_TMR_WHEEL  *pspoke;
    INT16U         spoke;


    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
8112eab8:	e0bfff17 	ldw	r2,-4(fp)
8112eabc:	10800517 	ldw	r2,20(r2)
8112eac0:	1080004c 	andi	r2,r2,1
8112eac4:	e0bffb0d 	sth	r2,-20(fp)
    pspoke = &OSTmrWheelTbl[spoke];
8112eac8:	e0bffb0b 	ldhu	r2,-20(fp)
8112eacc:	100690fa 	slli	r3,r2,3
8112ead0:	00a045b4 	movhi	r2,33046
8112ead4:	10834604 	addi	r2,r2,3352
8112ead8:	1885883a 	add	r2,r3,r2
8112eadc:	e0bffc15 	stw	r2,-16(fp)

    if (pspoke->OSTmrFirst == ptmr) {                       /* See if timer to remove is at the beginning of list     */
8112eae0:	e0bffc17 	ldw	r2,-16(fp)
8112eae4:	10c00017 	ldw	r3,0(r2)
8112eae8:	e0bfff17 	ldw	r2,-4(fp)
8112eaec:	18800b1e 	bne	r3,r2,8112eb1c <OSTmr_Unlink+0x7c>
        ptmr1              = (OS_TMR *)ptmr->OSTmrNext;
8112eaf0:	e0bfff17 	ldw	r2,-4(fp)
8112eaf4:	10800317 	ldw	r2,12(r2)
8112eaf8:	e0bffd15 	stw	r2,-12(fp)
        pspoke->OSTmrFirst = (OS_TMR *)ptmr1;
8112eafc:	e0bffc17 	ldw	r2,-16(fp)
8112eb00:	e0fffd17 	ldw	r3,-12(fp)
8112eb04:	10c00015 	stw	r3,0(r2)
        if (ptmr1 != (OS_TMR *)0) {
8112eb08:	e0bffd17 	ldw	r2,-12(fp)
8112eb0c:	10001126 	beq	r2,zero,8112eb54 <OSTmr_Unlink+0xb4>
            ptmr1->OSTmrPrev = (void *)0;
8112eb10:	e0bffd17 	ldw	r2,-12(fp)
8112eb14:	10000415 	stw	zero,16(r2)
8112eb18:	00000e06 	br	8112eb54 <OSTmr_Unlink+0xb4>
        }
    } else {
        ptmr1            = (OS_TMR *)ptmr->OSTmrPrev;       /* Remove timer from somewhere in the list                */
8112eb1c:	e0bfff17 	ldw	r2,-4(fp)
8112eb20:	10800417 	ldw	r2,16(r2)
8112eb24:	e0bffd15 	stw	r2,-12(fp)
        ptmr2            = (OS_TMR *)ptmr->OSTmrNext;
8112eb28:	e0bfff17 	ldw	r2,-4(fp)
8112eb2c:	10800317 	ldw	r2,12(r2)
8112eb30:	e0bffe15 	stw	r2,-8(fp)
        ptmr1->OSTmrNext = ptmr2;
8112eb34:	e0bffd17 	ldw	r2,-12(fp)
8112eb38:	e0fffe17 	ldw	r3,-8(fp)
8112eb3c:	10c00315 	stw	r3,12(r2)
        if (ptmr2 != (OS_TMR *)0) {
8112eb40:	e0bffe17 	ldw	r2,-8(fp)
8112eb44:	10000326 	beq	r2,zero,8112eb54 <OSTmr_Unlink+0xb4>
            ptmr2->OSTmrPrev = (void *)ptmr1;
8112eb48:	e0bffe17 	ldw	r2,-8(fp)
8112eb4c:	e0fffd17 	ldw	r3,-12(fp)
8112eb50:	10c00415 	stw	r3,16(r2)
        }
    }
    ptmr->OSTmrState = OS_TMR_STATE_STOPPED;
8112eb54:	e0bfff17 	ldw	r2,-4(fp)
8112eb58:	00c00044 	movi	r3,1
8112eb5c:	10c00c45 	stb	r3,49(r2)
    ptmr->OSTmrNext  = (void *)0;
8112eb60:	e0bfff17 	ldw	r2,-4(fp)
8112eb64:	10000315 	stw	zero,12(r2)
    ptmr->OSTmrPrev  = (void *)0;
8112eb68:	e0bfff17 	ldw	r2,-4(fp)
8112eb6c:	10000415 	stw	zero,16(r2)
    pspoke->OSTmrEntries--;
8112eb70:	e0bffc17 	ldw	r2,-16(fp)
8112eb74:	1080010b 	ldhu	r2,4(r2)
8112eb78:	10bfffc4 	addi	r2,r2,-1
8112eb7c:	1007883a 	mov	r3,r2
8112eb80:	e0bffc17 	ldw	r2,-16(fp)
8112eb84:	10c0010d 	sth	r3,4(r2)
}
8112eb88:	0001883a 	nop
8112eb8c:	e037883a 	mov	sp,fp
8112eb90:	df000017 	ldw	fp,0(sp)
8112eb94:	dec00104 	addi	sp,sp,4
8112eb98:	f800283a 	ret

8112eb9c <OSTmr_Lock>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Lock (void)
{
8112eb9c:	defffd04 	addi	sp,sp,-12
8112eba0:	de00012e 	bgeu	sp,et,8112eba8 <OSTmr_Lock+0xc>
8112eba4:	003b68fa 	trap	3
8112eba8:	dfc00215 	stw	ra,8(sp)
8112ebac:	df000115 	stw	fp,4(sp)
8112ebb0:	df000104 	addi	fp,sp,4
    INT8U  err;


    OSSemPend(OSTmrSem, 0, &err);
8112ebb4:	d0a09317 	ldw	r2,-32180(gp)
8112ebb8:	e1bfff04 	addi	r6,fp,-4
8112ebbc:	000b883a 	mov	r5,zero
8112ebc0:	1009883a 	mov	r4,r2
8112ebc4:	112b8400 	call	8112b840 <OSSemPend>
    (void)err;
}
8112ebc8:	0001883a 	nop
8112ebcc:	e037883a 	mov	sp,fp
8112ebd0:	dfc00117 	ldw	ra,4(sp)
8112ebd4:	df000017 	ldw	fp,0(sp)
8112ebd8:	dec00204 	addi	sp,sp,8
8112ebdc:	f800283a 	ret

8112ebe0 <OSTmr_Unlock>:



#if OS_TMR_EN > 0
static  void  OSTmr_Unlock (void)
{
8112ebe0:	defffe04 	addi	sp,sp,-8
8112ebe4:	de00012e 	bgeu	sp,et,8112ebec <OSTmr_Unlock+0xc>
8112ebe8:	003b68fa 	trap	3
8112ebec:	dfc00115 	stw	ra,4(sp)
8112ebf0:	df000015 	stw	fp,0(sp)
8112ebf4:	d839883a 	mov	fp,sp
    (void)OSSemPost(OSTmrSem);
8112ebf8:	d0a09317 	ldw	r2,-32180(gp)
8112ebfc:	1009883a 	mov	r4,r2
8112ec00:	112bbc80 	call	8112bbc8 <OSSemPost>
}
8112ec04:	0001883a 	nop
8112ec08:	e037883a 	mov	sp,fp
8112ec0c:	dfc00117 	ldw	ra,4(sp)
8112ec10:	df000017 	ldw	fp,0(sp)
8112ec14:	dec00204 	addi	sp,sp,8
8112ec18:	f800283a 	ret

8112ec1c <OSTmr_Task>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Task (void *p_arg)
{
8112ec1c:	defff704 	addi	sp,sp,-36
8112ec20:	de00012e 	bgeu	sp,et,8112ec28 <OSTmr_Task+0xc>
8112ec24:	003b68fa 	trap	3
8112ec28:	dfc00815 	stw	ra,32(sp)
8112ec2c:	df000715 	stw	fp,28(sp)
8112ec30:	df000704 	addi	fp,sp,28
8112ec34:	e13fff15 	stw	r4,-4(fp)
    INT16U           spoke;


    (void)p_arg;                                                 /* Not using 'p_arg', prevent compiler warning       */
    for (;;) {
        OSSemPend(OSTmrSemSignal, 0, &err);                      /* Wait for signal indicating time to update timers  */
8112ec38:	d0a07e17 	ldw	r2,-32264(gp)
8112ec3c:	e0fffe04 	addi	r3,fp,-8
8112ec40:	180d883a 	mov	r6,r3
8112ec44:	000b883a 	mov	r5,zero
8112ec48:	1009883a 	mov	r4,r2
8112ec4c:	112b8400 	call	8112b840 <OSSemPend>
        OSTmr_Lock();
8112ec50:	112eb9c0 	call	8112eb9c <OSTmr_Lock>
        OSTmrTime++;                                             /* Increment the current time                        */
8112ec54:	d0a09117 	ldw	r2,-32188(gp)
8112ec58:	10800044 	addi	r2,r2,1
8112ec5c:	d0a09115 	stw	r2,-32188(gp)
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
8112ec60:	d0a09117 	ldw	r2,-32188(gp)
8112ec64:	1080004c 	andi	r2,r2,1
8112ec68:	e0bffa0d 	sth	r2,-24(fp)
        pspoke = &OSTmrWheelTbl[spoke];
8112ec6c:	e0bffa0b 	ldhu	r2,-24(fp)
8112ec70:	100690fa 	slli	r3,r2,3
8112ec74:	00a045b4 	movhi	r2,33046
8112ec78:	10834604 	addi	r2,r2,3352
8112ec7c:	1885883a 	add	r2,r3,r2
8112ec80:	e0bffb15 	stw	r2,-20(fp)
        ptmr   = pspoke->OSTmrFirst;
8112ec84:	e0bffb17 	ldw	r2,-20(fp)
8112ec88:	10800017 	ldw	r2,0(r2)
8112ec8c:	e0bff915 	stw	r2,-28(fp)
        while (ptmr != (OS_TMR *)0) {
8112ec90:	00002206 	br	8112ed1c <OSTmr_Task+0x100>
            ptmr_next = (OS_TMR *)ptmr->OSTmrNext;               /* Point to next timer to update because current ... */
8112ec94:	e0bff917 	ldw	r2,-28(fp)
8112ec98:	10800317 	ldw	r2,12(r2)
8112ec9c:	e0bffc15 	stw	r2,-16(fp)
                                                                 /* ... timer could get unlinked from the wheel.      */
            if (OSTmrTime == ptmr->OSTmrMatch) {                 /* Process each timer that expires                   */
8112eca0:	e0bff917 	ldw	r2,-28(fp)
8112eca4:	10c00517 	ldw	r3,20(r2)
8112eca8:	d0a09117 	ldw	r2,-32188(gp)
8112ecac:	1880191e 	bne	r3,r2,8112ed14 <OSTmr_Task+0xf8>
                pfnct = ptmr->OSTmrCallback;                     /* Execute callback function if available            */
8112ecb0:	e0bff917 	ldw	r2,-28(fp)
8112ecb4:	10800117 	ldw	r2,4(r2)
8112ecb8:	e0bffd15 	stw	r2,-12(fp)
                if (pfnct != (OS_TMR_CALLBACK)0) {
8112ecbc:	e0bffd17 	ldw	r2,-12(fp)
8112ecc0:	10000626 	beq	r2,zero,8112ecdc <OSTmr_Task+0xc0>
                    (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);
8112ecc4:	e0bff917 	ldw	r2,-28(fp)
8112ecc8:	10c00217 	ldw	r3,8(r2)
8112eccc:	e0bffd17 	ldw	r2,-12(fp)
8112ecd0:	180b883a 	mov	r5,r3
8112ecd4:	e13ff917 	ldw	r4,-28(fp)
8112ecd8:	103ee83a 	callr	r2
                }
                OSTmr_Unlink(ptmr);                              /* Remove from current wheel spoke                   */
8112ecdc:	e13ff917 	ldw	r4,-28(fp)
8112ece0:	112eaa00 	call	8112eaa0 <OSTmr_Unlink>
                if (ptmr->OSTmrOpt == OS_TMR_OPT_PERIODIC) {
8112ece4:	e0bff917 	ldw	r2,-28(fp)
8112ece8:	10800c03 	ldbu	r2,48(r2)
8112ecec:	10803fcc 	andi	r2,r2,255
8112ecf0:	10800098 	cmpnei	r2,r2,2
8112ecf4:	1000041e 	bne	r2,zero,8112ed08 <OSTmr_Task+0xec>
                    OSTmr_Link(ptmr, OS_TMR_LINK_PERIODIC);      /* Recalculate new position of timer in wheel        */
8112ecf8:	01400044 	movi	r5,1
8112ecfc:	e13ff917 	ldw	r4,-28(fp)
8112ed00:	112e9500 	call	8112e950 <OSTmr_Link>
8112ed04:	00000306 	br	8112ed14 <OSTmr_Task+0xf8>
                } else {
                    ptmr->OSTmrState = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
8112ed08:	e0bff917 	ldw	r2,-28(fp)
8112ed0c:	00c00084 	movi	r3,2
8112ed10:	10c00c45 	stb	r3,49(r2)
                }
            }
            ptmr = ptmr_next;
8112ed14:	e0bffc17 	ldw	r2,-16(fp)
8112ed18:	e0bff915 	stw	r2,-28(fp)
        OSTmr_Lock();
        OSTmrTime++;                                             /* Increment the current time                        */
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
        pspoke = &OSTmrWheelTbl[spoke];
        ptmr   = pspoke->OSTmrFirst;
        while (ptmr != (OS_TMR *)0) {
8112ed1c:	e0bff917 	ldw	r2,-28(fp)
8112ed20:	103fdc1e 	bne	r2,zero,8112ec94 <__reset+0xfb10ec94>
                    ptmr->OSTmrState = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
                }
            }
            ptmr = ptmr_next;
        }
        OSTmr_Unlock();
8112ed24:	112ebe00 	call	8112ebe0 <OSTmr_Unlock>
    }
8112ed28:	003fc306 	br	8112ec38 <__reset+0xfb10ec38>

8112ed2c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
8112ed2c:	defffd04 	addi	sp,sp,-12
8112ed30:	de00012e 	bgeu	sp,et,8112ed38 <alt_dev_reg+0xc>
8112ed34:	003b68fa 	trap	3
8112ed38:	dfc00215 	stw	ra,8(sp)
8112ed3c:	df000115 	stw	fp,4(sp)
8112ed40:	df000104 	addi	fp,sp,4
8112ed44:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
8112ed48:	d1601304 	addi	r5,gp,-32692
8112ed4c:	e13fff17 	ldw	r4,-4(fp)
8112ed50:	1137ecc0 	call	81137ecc <alt_dev_llist_insert>
}
8112ed54:	e037883a 	mov	sp,fp
8112ed58:	dfc00117 	ldw	ra,4(sp)
8112ed5c:	df000017 	ldw	fp,0(sp)
8112ed60:	dec00204 	addi	sp,sp,8
8112ed64:	f800283a 	ret

8112ed68 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
8112ed68:	defffd04 	addi	sp,sp,-12
8112ed6c:	de00012e 	bgeu	sp,et,8112ed74 <alt_irq_init+0xc>
8112ed70:	003b68fa 	trap	3
8112ed74:	dfc00215 	stw	ra,8(sp)
8112ed78:	df000115 	stw	fp,4(sp)
8112ed7c:	df000104 	addi	fp,sp,4
8112ed80:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
8112ed84:	11389640 	call	81138964 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
8112ed88:	00800044 	movi	r2,1
8112ed8c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
8112ed90:	0001883a 	nop
8112ed94:	e037883a 	mov	sp,fp
8112ed98:	dfc00117 	ldw	ra,4(sp)
8112ed9c:	df000017 	ldw	fp,0(sp)
8112eda0:	dec00204 	addi	sp,sp,8
8112eda4:	f800283a 	ret

8112eda8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
8112eda8:	defffe04 	addi	sp,sp,-8
8112edac:	de00012e 	bgeu	sp,et,8112edb4 <alt_sys_init+0xc>
8112edb0:	003b68fa 	trap	3
8112edb4:	dfc00115 	stw	ra,4(sp)
8112edb8:	df000015 	stw	fp,0(sp)
8112edbc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_1MS, timer_1ms);
8112edc0:	01c0fa04 	movi	r7,1000
8112edc4:	018000c4 	movi	r6,3
8112edc8:	000b883a 	mov	r5,zero
8112edcc:	01200034 	movhi	r4,32768
8112edd0:	21011004 	addi	r4,r4,1088
8112edd4:	1134ea00 	call	81134ea0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1US, timer_1us);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
8112edd8:	01800084 	movi	r6,2
8112eddc:	000b883a 	mov	r5,zero
8112ede0:	01204534 	movhi	r4,33044
8112ede4:	2132a704 	addi	r4,r4,-13668
8112ede8:	11333ec0 	call	811333ec <altera_avalon_jtag_uart_init>
8112edec:	01204534 	movhi	r4,33044
8112edf0:	21329d04 	addi	r4,r4,-13708
8112edf4:	112ed2c0 	call	8112ed2c <alt_dev_reg>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_RX, sgdma_rx);
8112edf8:	01800044 	movi	r6,1
8112edfc:	000b883a 	mov	r5,zero
8112ee00:	01204534 	movhi	r4,33044
8112ee04:	2136b804 	addi	r4,r4,-9504
8112ee08:	1134d700 	call	81134d70 <alt_avalon_sgdma_init>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_TX, sgdma_tx);
8112ee0c:	000d883a 	mov	r6,zero
8112ee10:	000b883a 	mov	r5,zero
8112ee14:	01204534 	movhi	r4,33044
8112ee18:	2136c404 	addi	r4,r4,-9456
8112ee1c:	1134d700 	call	81134d70 <alt_avalon_sgdma_init>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
8112ee20:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( RS232_UART, rs232_uart);
8112ee24:	01800184 	movi	r6,6
8112ee28:	000b883a 	mov	r5,zero
8112ee2c:	01204534 	movhi	r4,33044
8112ee30:	2136da04 	addi	r4,r4,-9368
8112ee34:	113504c0 	call	8113504c <altera_avalon_uart_init>
8112ee38:	01204534 	movhi	r4,33044
8112ee3c:	2136d004 	addi	r4,r4,-9408
8112ee40:	112ed2c0 	call	8112ed2c <alt_dev_reg>
    ALTERA_ETH_TSE_INIT ( TSE_MAC, tse_mac);
8112ee44:	0001883a 	nop
    ALTERA_MSGDMA_INIT ( DMA_DDR_M, dma_DDR_M);
8112ee48:	00a04534 	movhi	r2,33044
8112ee4c:	10b70404 	addi	r2,r2,-9200
8112ee50:	10c00717 	ldw	r3,28(r2)
8112ee54:	00a04534 	movhi	r2,33044
8112ee58:	10b70404 	addi	r2,r2,-9200
8112ee5c:	10800817 	ldw	r2,32(r2)
8112ee60:	100d883a 	mov	r6,r2
8112ee64:	180b883a 	mov	r5,r3
8112ee68:	01204534 	movhi	r4,33044
8112ee6c:	21370404 	addi	r4,r4,-9200
8112ee70:	11378d40 	call	811378d4 <alt_msgdma_init>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
8112ee74:	01204534 	movhi	r4,33044
8112ee78:	21371d04 	addi	r4,r4,-9100
8112ee7c:	112ed2c0 	call	8112ed2c <alt_dev_reg>
}
8112ee80:	0001883a 	nop
8112ee84:	e037883a 	mov	sp,fp
8112ee88:	dfc00117 	ldw	ra,4(sp)
8112ee8c:	df000017 	ldw	fp,0(sp)
8112ee90:	dec00204 	addi	sp,sp,8
8112ee94:	f800283a 	ret

8112ee98 <Write_Sector_Data>:
///////////////////////////////////////////////////////////////////////////

        
bool Write_Sector_Data(int sector_index, int partition_offset)
// This function writes a sector at the specified address on the SD Card.
{
8112ee98:	defffa04 	addi	sp,sp,-24
8112ee9c:	de00012e 	bgeu	sp,et,8112eea4 <Write_Sector_Data+0xc>
8112eea0:	003b68fa 	trap	3
8112eea4:	dfc00515 	stw	ra,20(sp)
8112eea8:	df000415 	stw	fp,16(sp)
8112eeac:	df000404 	addi	fp,sp,16
8112eeb0:	e13ffe15 	stw	r4,-8(fp)
8112eeb4:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
8112eeb8:	e03ffc15 	stw	zero,-16(fp)
    
    if (alt_up_sd_card_is_Present())
8112eebc:	1131c800 	call	81131c80 <alt_up_sd_card_is_Present>
8112eec0:	10001e26 	beq	r2,zero,8112ef3c <Write_Sector_Data+0xa4>
    {
        short int reg_state = 0xff;
8112eec4:	00803fc4 	movi	r2,255
8112eec8:	e0bffd0d 	sth	r2,-12(fp)

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
8112eecc:	d0a09d17 	ldw	r2,-32140(gp)
8112eed0:	e13ffe17 	ldw	r4,-8(fp)
8112eed4:	e0ffff17 	ldw	r3,-4(fp)
8112eed8:	20c7883a 	add	r3,r4,r3
8112eedc:	1806927a 	slli	r3,r3,9
8112eee0:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
8112eee4:	d0a09c17 	ldw	r2,-32144(gp)
8112eee8:	00c00604 	movi	r3,24
8112eeec:	10c0002d 	sthio	r3,0(r2)
        do {
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
8112eef0:	d0a09917 	ldw	r2,-32156(gp)
8112eef4:	1080002b 	ldhuio	r2,0(r2)
8112eef8:	10bfffcc 	andi	r2,r2,65535
8112eefc:	e0bffd0d 	sth	r2,-12(fp)
        } while ((reg_state & 0x04)!=0);
8112ef00:	e0bffd0b 	ldhu	r2,-12(fp)
8112ef04:	10bfffcc 	andi	r2,r2,65535
8112ef08:	1080010c 	andi	r2,r2,4
8112ef0c:	103ff81e 	bne	r2,zero,8112eef0 <__reset+0xfb10eef0>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
8112ef10:	e0bffd0b 	ldhu	r2,-12(fp)
8112ef14:	10bfffcc 	andi	r2,r2,65535
8112ef18:	1080040c 	andi	r2,r2,16
8112ef1c:	1000071e 	bne	r2,zero,8112ef3c <Write_Sector_Data+0xa4>
        {
            result = true;
8112ef20:	00800044 	movi	r2,1
8112ef24:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
8112ef28:	d020a215 	stw	zero,-32120(gp)
            current_sector_index = sector_index+partition_offset;
8112ef2c:	e0fffe17 	ldw	r3,-8(fp)
8112ef30:	e0bfff17 	ldw	r2,-4(fp)
8112ef34:	1885883a 	add	r2,r3,r2
8112ef38:	d0a0a315 	stw	r2,-32116(gp)
        }
    }
    return result;
8112ef3c:	e0bffc17 	ldw	r2,-16(fp)
}
8112ef40:	e037883a 	mov	sp,fp
8112ef44:	dfc00117 	ldw	ra,4(sp)
8112ef48:	df000017 	ldw	fp,0(sp)
8112ef4c:	dec00204 	addi	sp,sp,8
8112ef50:	f800283a 	ret

8112ef54 <Save_Modified_Sector>:


bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
8112ef54:	defffd04 	addi	sp,sp,-12
8112ef58:	de00012e 	bgeu	sp,et,8112ef60 <Save_Modified_Sector+0xc>
8112ef5c:	003b68fa 	trap	3
8112ef60:	dfc00215 	stw	ra,8(sp)
8112ef64:	df000115 	stw	fp,4(sp)
8112ef68:	df000104 	addi	fp,sp,4
    bool result = true;
8112ef6c:	00800044 	movi	r2,1
8112ef70:	e0bfff15 	stw	r2,-4(fp)
    if (current_sector_modified)
8112ef74:	d0a0a217 	ldw	r2,-32120(gp)
8112ef78:	10000526 	beq	r2,zero,8112ef90 <Save_Modified_Sector+0x3c>
    {
        result = Write_Sector_Data(current_sector_index, 0);
8112ef7c:	d0a0a317 	ldw	r2,-32116(gp)
8112ef80:	000b883a 	mov	r5,zero
8112ef84:	1009883a 	mov	r4,r2
8112ef88:	112ee980 	call	8112ee98 <Write_Sector_Data>
8112ef8c:	e0bfff15 	stw	r2,-4(fp)
    }
    return result;
8112ef90:	e0bfff17 	ldw	r2,-4(fp)
}
8112ef94:	e037883a 	mov	sp,fp
8112ef98:	dfc00117 	ldw	ra,4(sp)
8112ef9c:	df000017 	ldw	fp,0(sp)
8112efa0:	dec00204 	addi	sp,sp,8
8112efa4:	f800283a 	ret

8112efa8 <Read_Sector_Data>:


bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
8112efa8:	defffa04 	addi	sp,sp,-24
8112efac:	de00012e 	bgeu	sp,et,8112efb4 <Read_Sector_Data+0xc>
8112efb0:	003b68fa 	trap	3
8112efb4:	dfc00515 	stw	ra,20(sp)
8112efb8:	df000415 	stw	fp,16(sp)
8112efbc:	df000404 	addi	fp,sp,16
8112efc0:	e13ffe15 	stw	r4,-8(fp)
8112efc4:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
8112efc8:	e03ffc15 	stw	zero,-16(fp)
    
	if (alt_up_sd_card_is_Present())
8112efcc:	1131c800 	call	81131c80 <alt_up_sd_card_is_Present>
8112efd0:	10002726 	beq	r2,zero,8112f070 <Read_Sector_Data+0xc8>
	{
		short int reg_state = 0xff;
8112efd4:	00803fc4 	movi	r2,255
8112efd8:	e0bffd0d 	sth	r2,-12(fp)
        
        /* Write data to the SD card if the current buffer is out of date. */
        if (current_sector_modified)
8112efdc:	d0a0a217 	ldw	r2,-32120(gp)
8112efe0:	10000726 	beq	r2,zero,8112f000 <Read_Sector_Data+0x58>
        {
            if (Write_Sector_Data(current_sector_index, 0) == false)
8112efe4:	d0a0a317 	ldw	r2,-32116(gp)
8112efe8:	000b883a 	mov	r5,zero
8112efec:	1009883a 	mov	r4,r2
8112eff0:	112ee980 	call	8112ee98 <Write_Sector_Data>
8112eff4:	1000021e 	bne	r2,zero,8112f000 <Read_Sector_Data+0x58>
            {
                return false;
8112eff8:	0005883a 	mov	r2,zero
8112effc:	00001d06 	br	8112f074 <Read_Sector_Data+0xcc>
            }
        }
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
8112f000:	d0a09d17 	ldw	r2,-32140(gp)
8112f004:	e13ffe17 	ldw	r4,-8(fp)
8112f008:	e0ffff17 	ldw	r3,-4(fp)
8112f00c:	20c7883a 	add	r3,r4,r3
8112f010:	1806927a 	slli	r3,r3,9
8112f014:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
8112f018:	d0a09c17 	ldw	r2,-32144(gp)
8112f01c:	00c00444 	movi	r3,17
8112f020:	10c0002d 	sthio	r3,0(r2)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
8112f024:	d0a09917 	ldw	r2,-32156(gp)
8112f028:	1080002b 	ldhuio	r2,0(r2)
8112f02c:	10bfffcc 	andi	r2,r2,65535
8112f030:	e0bffd0d 	sth	r2,-12(fp)
		} while ((reg_state & 0x04)!=0);
8112f034:	e0bffd0b 	ldhu	r2,-12(fp)
8112f038:	10bfffcc 	andi	r2,r2,65535
8112f03c:	1080010c 	andi	r2,r2,4
8112f040:	103ff81e 	bne	r2,zero,8112f024 <__reset+0xfb10f024>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
8112f044:	e0bffd0b 	ldhu	r2,-12(fp)
8112f048:	10bfffcc 	andi	r2,r2,65535
8112f04c:	1080040c 	andi	r2,r2,16
8112f050:	1000071e 	bne	r2,zero,8112f070 <Read_Sector_Data+0xc8>
		{
			result = true;
8112f054:	00800044 	movi	r2,1
8112f058:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
8112f05c:	d020a215 	stw	zero,-32120(gp)
            current_sector_index = sector_index+partition_offset;
8112f060:	e0fffe17 	ldw	r3,-8(fp)
8112f064:	e0bfff17 	ldw	r2,-4(fp)
8112f068:	1885883a 	add	r2,r3,r2
8112f06c:	d0a0a315 	stw	r2,-32116(gp)
		}
	}
	return result;
8112f070:	e0bffc17 	ldw	r2,-16(fp)
}
8112f074:	e037883a 	mov	sp,fp
8112f078:	dfc00117 	ldw	ra,4(sp)
8112f07c:	df000017 	ldw	fp,0(sp)
8112f080:	dec00204 	addi	sp,sp,8
8112f084:	f800283a 	ret

8112f088 <get_cluster_flag>:


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
8112f088:	defffb04 	addi	sp,sp,-20
8112f08c:	de00012e 	bgeu	sp,et,8112f094 <get_cluster_flag+0xc>
8112f090:	003b68fa 	trap	3
8112f094:	dfc00415 	stw	ra,16(sp)
8112f098:	df000315 	stw	fp,12(sp)
8112f09c:	df000304 	addi	fp,sp,12
8112f0a0:	e13ffe15 	stw	r4,-8(fp)
8112f0a4:	e17fff15 	stw	r5,-4(fp)
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
8112f0a8:	e0bffe17 	ldw	r2,-8(fp)
8112f0ac:	1004d23a 	srli	r2,r2,8
8112f0b0:	d0e09f17 	ldw	r3,-32132(gp)
8112f0b4:	10c5883a 	add	r2,r2,r3
8112f0b8:	e0bffd15 	stw	r2,-12(fp)
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
8112f0bc:	00a045b4 	movhi	r2,33046
8112f0c0:	1094e204 	addi	r2,r2,21384
8112f0c4:	10801117 	ldw	r2,68(r2)
8112f0c8:	e0fffd17 	ldw	r3,-12(fp)
8112f0cc:	1885883a 	add	r2,r3,r2
8112f0d0:	e0bffd15 	stw	r2,-12(fp)
     
    if (sector_index != current_sector_index)
8112f0d4:	d0a0a317 	ldw	r2,-32116(gp)
8112f0d8:	e0fffd17 	ldw	r3,-12(fp)
8112f0dc:	18800726 	beq	r3,r2,8112f0fc <get_cluster_flag+0x74>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
8112f0e0:	e0bffd17 	ldw	r2,-12(fp)
8112f0e4:	000b883a 	mov	r5,zero
8112f0e8:	1009883a 	mov	r4,r2
8112f0ec:	112efa80 	call	8112efa8 <Read_Sector_Data>
8112f0f0:	1000021e 	bne	r2,zero,8112f0fc <get_cluster_flag+0x74>
        {
            return false;
8112f0f4:	0005883a 	mov	r2,zero
8112f0f8:	00000d06 	br	8112f130 <get_cluster_flag+0xa8>
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
8112f0fc:	e0bffe17 	ldw	r2,-8(fp)
8112f100:	10803fcc 	andi	r2,r2,255
8112f104:	1085883a 	add	r2,r2,r2
8112f108:	1007883a 	mov	r3,r2
8112f10c:	d0a0a117 	ldw	r2,-32124(gp)
8112f110:	10800a17 	ldw	r2,40(r2)
8112f114:	1885883a 	add	r2,r3,r2
8112f118:	1080002b 	ldhuio	r2,0(r2)
8112f11c:	10bfffcc 	andi	r2,r2,65535
8112f120:	1007883a 	mov	r3,r2
8112f124:	e0bfff17 	ldw	r2,-4(fp)
8112f128:	10c0000d 	sth	r3,0(r2)
    return true;
8112f12c:	00800044 	movi	r2,1
}
8112f130:	e037883a 	mov	sp,fp
8112f134:	dfc00117 	ldw	ra,4(sp)
8112f138:	df000017 	ldw	fp,0(sp)
8112f13c:	dec00204 	addi	sp,sp,8
8112f140:	f800283a 	ret

8112f144 <mark_cluster>:


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
8112f144:	defffa04 	addi	sp,sp,-24
8112f148:	de00012e 	bgeu	sp,et,8112f150 <mark_cluster+0xc>
8112f14c:	003b68fa 	trap	3
8112f150:	dfc00515 	stw	ra,20(sp)
8112f154:	df000415 	stw	fp,16(sp)
8112f158:	df000404 	addi	fp,sp,16
8112f15c:	e13ffd15 	stw	r4,-12(fp)
8112f160:	2805883a 	mov	r2,r5
8112f164:	e1bfff15 	stw	r6,-4(fp)
8112f168:	e0bffe0d 	sth	r2,-8(fp)
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
8112f16c:	e0bffd17 	ldw	r2,-12(fp)
8112f170:	1004d23a 	srli	r2,r2,8
8112f174:	d0e09f17 	ldw	r3,-32132(gp)
8112f178:	10c5883a 	add	r2,r2,r3
8112f17c:	e0bffc15 	stw	r2,-16(fp)
    
    if (first_fat)
8112f180:	e0bfff17 	ldw	r2,-4(fp)
8112f184:	10000726 	beq	r2,zero,8112f1a4 <mark_cluster+0x60>
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
8112f188:	00a045b4 	movhi	r2,33046
8112f18c:	1094e204 	addi	r2,r2,21384
8112f190:	10801117 	ldw	r2,68(r2)
8112f194:	e0fffc17 	ldw	r3,-16(fp)
8112f198:	1885883a 	add	r2,r3,r2
8112f19c:	e0bffc15 	stw	r2,-16(fp)
8112f1a0:	00000606 	br	8112f1bc <mark_cluster+0x78>
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
8112f1a4:	00a045b4 	movhi	r2,33046
8112f1a8:	1094e204 	addi	r2,r2,21384
8112f1ac:	10801217 	ldw	r2,72(r2)
8112f1b0:	e0fffc17 	ldw	r3,-16(fp)
8112f1b4:	1885883a 	add	r2,r3,r2
8112f1b8:	e0bffc15 	stw	r2,-16(fp)
    }
     
    if (sector_index != current_sector_index)
8112f1bc:	d0a0a317 	ldw	r2,-32116(gp)
8112f1c0:	e0fffc17 	ldw	r3,-16(fp)
8112f1c4:	18800726 	beq	r3,r2,8112f1e4 <mark_cluster+0xa0>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
8112f1c8:	e0bffc17 	ldw	r2,-16(fp)
8112f1cc:	000b883a 	mov	r5,zero
8112f1d0:	1009883a 	mov	r4,r2
8112f1d4:	112efa80 	call	8112efa8 <Read_Sector_Data>
8112f1d8:	1000021e 	bne	r2,zero,8112f1e4 <mark_cluster+0xa0>
        {
            return false;
8112f1dc:	0005883a 	mov	r2,zero
8112f1e0:	00000d06 	br	8112f218 <mark_cluster+0xd4>
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
8112f1e4:	e0bffd17 	ldw	r2,-12(fp)
8112f1e8:	10803fcc 	andi	r2,r2,255
8112f1ec:	1085883a 	add	r2,r2,r2
8112f1f0:	1007883a 	mov	r3,r2
8112f1f4:	d0a0a117 	ldw	r2,-32124(gp)
8112f1f8:	10800a17 	ldw	r2,40(r2)
8112f1fc:	1885883a 	add	r2,r3,r2
8112f200:	1007883a 	mov	r3,r2
8112f204:	e0bffe0f 	ldh	r2,-8(fp)
8112f208:	1880002d 	sthio	r2,0(r3)
    current_sector_modified = true;
8112f20c:	00800044 	movi	r2,1
8112f210:	d0a0a215 	stw	r2,-32120(gp)
    return true;
8112f214:	00800044 	movi	r2,1
}
8112f218:	e037883a 	mov	sp,fp
8112f21c:	dfc00117 	ldw	ra,4(sp)
8112f220:	df000017 	ldw	fp,0(sp)
8112f224:	dec00204 	addi	sp,sp,8
8112f228:	f800283a 	ret

8112f22c <Check_for_Master_Boot_Record>:

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
8112f22c:	defff704 	addi	sp,sp,-36
8112f230:	de00012e 	bgeu	sp,et,8112f238 <Check_for_Master_Boot_Record+0xc>
8112f234:	003b68fa 	trap	3
8112f238:	dfc00815 	stw	ra,32(sp)
8112f23c:	df000715 	stw	fp,28(sp)
8112f240:	df000704 	addi	fp,sp,28
	bool result = false;
8112f244:	e03ff915 	stw	zero,-28(fp)
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data(0, 0))
8112f248:	000b883a 	mov	r5,zero
8112f24c:	0009883a 	mov	r4,zero
8112f250:	112efa80 	call	8112efa8 <Read_Sector_Data>
8112f254:	10005a26 	beq	r2,zero,8112f3c0 <Check_for_Master_Boot_Record+0x194>
	{
		end =  (short int) IORD_16DIRECT(device_pointer->base,0x1fe);
8112f258:	d0a0a117 	ldw	r2,-32124(gp)
8112f25c:	10800a17 	ldw	r2,40(r2)
8112f260:	10807f84 	addi	r2,r2,510
8112f264:	1080002b 	ldhuio	r2,0(r2)
8112f268:	10bfffcc 	andi	r2,r2,65535
8112f26c:	10bfffcc 	andi	r2,r2,65535
8112f270:	10a0001c 	xori	r2,r2,32768
8112f274:	10a00004 	addi	r2,r2,-32768
8112f278:	e0bffb15 	stw	r2,-20(fp)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
8112f27c:	e0bffb17 	ldw	r2,-20(fp)
8112f280:	10ffffcc 	andi	r3,r2,65535
8112f284:	00aa9554 	movui	r2,43605
8112f288:	18804d1e 	bne	r3,r2,8112f3c0 <Check_for_Master_Boot_Record+0x194>
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
8112f28c:	e03ffa15 	stw	zero,-24(fp)
8112f290:	00004806 	br	8112f3b4 <Check_for_Master_Boot_Record+0x188>
			{
				int partition_data_offset = (index * 16) + 0x01be;
8112f294:	e0bffa17 	ldw	r2,-24(fp)
8112f298:	1004913a 	slli	r2,r2,4
8112f29c:	10806f84 	addi	r2,r2,446
8112f2a0:	e0bffc15 	stw	r2,-16(fp)
				char type;
		        
				// Read Partition type
				type = (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);
8112f2a4:	d0a0a117 	ldw	r2,-32124(gp)
8112f2a8:	10c00a17 	ldw	r3,40(r2)
8112f2ac:	e0bffc17 	ldw	r2,-16(fp)
8112f2b0:	1885883a 	add	r2,r3,r2
8112f2b4:	10800104 	addi	r2,r2,4
8112f2b8:	10800023 	ldbuio	r2,0(r2)
8112f2bc:	10803fcc 	andi	r2,r2,255
8112f2c0:	e0bffd05 	stb	r2,-12(fp)

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
8112f2c4:	e0bffd07 	ldb	r2,-12(fp)
8112f2c8:	10800060 	cmpeqi	r2,r2,1
8112f2cc:	1000091e 	bne	r2,zero,8112f2f4 <Check_for_Master_Boot_Record+0xc8>
8112f2d0:	e0bffd07 	ldb	r2,-12(fp)
8112f2d4:	10800120 	cmpeqi	r2,r2,4
8112f2d8:	1000061e 	bne	r2,zero,8112f2f4 <Check_for_Master_Boot_Record+0xc8>
8112f2dc:	e0bffd07 	ldb	r2,-12(fp)
8112f2e0:	108001a0 	cmpeqi	r2,r2,6
8112f2e4:	1000031e 	bne	r2,zero,8112f2f4 <Check_for_Master_Boot_Record+0xc8>
8112f2e8:	e0bffd07 	ldb	r2,-12(fp)
8112f2ec:	10800398 	cmpnei	r2,r2,14
8112f2f0:	10002d1e 	bne	r2,zero,8112f3a8 <Check_for_Master_Boot_Record+0x17c>
				{
					// Get partition offset and size.
					offset = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
8112f2f4:	d0a0a117 	ldw	r2,-32124(gp)
8112f2f8:	10c00a17 	ldw	r3,40(r2)
8112f2fc:	e0bffc17 	ldw	r2,-16(fp)
8112f300:	1885883a 	add	r2,r3,r2
8112f304:	10800284 	addi	r2,r2,10
8112f308:	1080002b 	ldhuio	r2,0(r2)
8112f30c:	10bfffcc 	andi	r2,r2,65535
8112f310:	1006943a 	slli	r3,r2,16
8112f314:	d0a0a117 	ldw	r2,-32124(gp)
8112f318:	11000a17 	ldw	r4,40(r2)
8112f31c:	e0bffc17 	ldw	r2,-16(fp)
8112f320:	2085883a 	add	r2,r4,r2
8112f324:	10800204 	addi	r2,r2,8
8112f328:	1080002b 	ldhuio	r2,0(r2)
8112f32c:	10bfffcc 	andi	r2,r2,65535
8112f330:	10bfffcc 	andi	r2,r2,65535
8112f334:	1884b03a 	or	r2,r3,r2
8112f338:	e0bffe15 	stw	r2,-8(fp)
					partition_size = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));
8112f33c:	d0a0a117 	ldw	r2,-32124(gp)
8112f340:	10c00a17 	ldw	r3,40(r2)
8112f344:	e0bffc17 	ldw	r2,-16(fp)
8112f348:	1885883a 	add	r2,r3,r2
8112f34c:	10800384 	addi	r2,r2,14
8112f350:	1080002b 	ldhuio	r2,0(r2)
8112f354:	10bfffcc 	andi	r2,r2,65535
8112f358:	1006943a 	slli	r3,r2,16
8112f35c:	d0a0a117 	ldw	r2,-32124(gp)
8112f360:	11000a17 	ldw	r4,40(r2)
8112f364:	e0bffc17 	ldw	r2,-16(fp)
8112f368:	2085883a 	add	r2,r4,r2
8112f36c:	10800304 	addi	r2,r2,12
8112f370:	1080002b 	ldhuio	r2,0(r2)
8112f374:	10bfffcc 	andi	r2,r2,65535
8112f378:	10bfffcc 	andi	r2,r2,65535
8112f37c:	1884b03a 	or	r2,r3,r2
8112f380:	e0bfff15 	stw	r2,-4(fp)
		            
					// Check if the partition is valid
					if (partition_size > 0)
8112f384:	e0bfff17 	ldw	r2,-4(fp)
8112f388:	0080070e 	bge	zero,r2,8112f3a8 <Check_for_Master_Boot_Record+0x17c>
					{
						result = true;
8112f38c:	00800044 	movi	r2,1
8112f390:	e0bff915 	stw	r2,-28(fp)
						fat_partition_size_in_512_byte_sectors = partition_size;
8112f394:	e0bfff17 	ldw	r2,-4(fp)
8112f398:	d0a0a015 	stw	r2,-32128(gp)
						fat_partition_offset_in_512_byte_sectors = offset;
8112f39c:	e0bffe17 	ldw	r2,-8(fp)
8112f3a0:	d0a09f15 	stw	r2,-32132(gp)
						break;
8112f3a4:	00000606 	br	8112f3c0 <Check_for_Master_Boot_Record+0x194>

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
8112f3a8:	e0bffa17 	ldw	r2,-24(fp)
8112f3ac:	10800044 	addi	r2,r2,1
8112f3b0:	e0bffa15 	stw	r2,-24(fp)
8112f3b4:	e0bffa17 	ldw	r2,-24(fp)
8112f3b8:	10800110 	cmplti	r2,r2,4
8112f3bc:	103fb51e 	bne	r2,zero,8112f294 <__reset+0xfb10f294>
				}
			}
		}
	}

	return result;
8112f3c0:	e0bff917 	ldw	r2,-28(fp)
}
8112f3c4:	e037883a 	mov	sp,fp
8112f3c8:	dfc00117 	ldw	ra,4(sp)
8112f3cc:	df000017 	ldw	fp,0(sp)
8112f3d0:	dec00204 	addi	sp,sp,8
8112f3d4:	f800283a 	ret

8112f3d8 <Read_File_Record_At_Offset>:


bool Read_File_Record_At_Offset(int offset, t_file_record *record, unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
8112f3d8:	defff804 	addi	sp,sp,-32
8112f3dc:	de00012e 	bgeu	sp,et,8112f3e4 <Read_File_Record_At_Offset+0xc>
8112f3e0:	003b68fa 	trap	3
8112f3e4:	dfc00715 	stw	ra,28(sp)
8112f3e8:	df000615 	stw	fp,24(sp)
8112f3ec:	df000604 	addi	fp,sp,24
8112f3f0:	e13ffc15 	stw	r4,-16(fp)
8112f3f4:	e17ffd15 	stw	r5,-12(fp)
8112f3f8:	e1bffe15 	stw	r6,-8(fp)
8112f3fc:	e1ffff15 	stw	r7,-4(fp)
	bool result = false;
8112f400:	e03ffa15 	stw	zero,-24(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
8112f404:	e0bffc17 	ldw	r2,-16(fp)
8112f408:	108007cc 	andi	r2,r2,31
8112f40c:	10008d1e 	bne	r2,zero,8112f644 <Read_File_Record_At_Offset+0x26c>
8112f410:	1131c800 	call	81131c80 <alt_up_sd_card_is_Present>
8112f414:	10008b26 	beq	r2,zero,8112f644 <Read_File_Record_At_Offset+0x26c>
8112f418:	d0a09817 	ldw	r2,-32160(gp)
8112f41c:	10008926 	beq	r2,zero,8112f644 <Read_File_Record_At_Offset+0x26c>
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
8112f420:	e03ffb15 	stw	zero,-20(fp)
8112f424:	00001106 	br	8112f46c <Read_File_Record_At_Offset+0x94>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
8112f428:	e0fffc17 	ldw	r3,-16(fp)
8112f42c:	e0bffb17 	ldw	r2,-20(fp)
8112f430:	1885883a 	add	r2,r3,r2
8112f434:	1007883a 	mov	r3,r2
8112f438:	d0a0a117 	ldw	r2,-32124(gp)
8112f43c:	10800a17 	ldw	r2,40(r2)
8112f440:	1885883a 	add	r2,r3,r2
8112f444:	10800023 	ldbuio	r2,0(r2)
8112f448:	10803fcc 	andi	r2,r2,255
8112f44c:	1009883a 	mov	r4,r2
8112f450:	e0fffd17 	ldw	r3,-12(fp)
8112f454:	e0bffb17 	ldw	r2,-20(fp)
8112f458:	1885883a 	add	r2,r3,r2
8112f45c:	11000005 	stb	r4,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
8112f460:	e0bffb17 	ldw	r2,-20(fp)
8112f464:	10800044 	addi	r2,r2,1
8112f468:	e0bffb15 	stw	r2,-20(fp)
8112f46c:	e0bffb17 	ldw	r2,-20(fp)
8112f470:	10800210 	cmplti	r2,r2,8
8112f474:	103fec1e 	bne	r2,zero,8112f428 <__reset+0xfb10f428>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
8112f478:	e03ffb15 	stw	zero,-20(fp)
8112f47c:	00001306 	br	8112f4cc <Read_File_Record_At_Offset+0xf4>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
8112f480:	e0fffc17 	ldw	r3,-16(fp)
8112f484:	e0bffb17 	ldw	r2,-20(fp)
8112f488:	1885883a 	add	r2,r3,r2
8112f48c:	1007883a 	mov	r3,r2
8112f490:	d0a0a117 	ldw	r2,-32124(gp)
8112f494:	10800a17 	ldw	r2,40(r2)
8112f498:	1885883a 	add	r2,r3,r2
8112f49c:	10800204 	addi	r2,r2,8
8112f4a0:	10800023 	ldbuio	r2,0(r2)
8112f4a4:	10803fcc 	andi	r2,r2,255
8112f4a8:	1009883a 	mov	r4,r2
8112f4ac:	e0fffd17 	ldw	r3,-12(fp)
8112f4b0:	e0bffb17 	ldw	r2,-20(fp)
8112f4b4:	1885883a 	add	r2,r3,r2
8112f4b8:	10800204 	addi	r2,r2,8
8112f4bc:	11000005 	stb	r4,0(r2)

		for (counter = 0; counter < 8; counter++)
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
8112f4c0:	e0bffb17 	ldw	r2,-20(fp)
8112f4c4:	10800044 	addi	r2,r2,1
8112f4c8:	e0bffb15 	stw	r2,-20(fp)
8112f4cc:	e0bffb17 	ldw	r2,-20(fp)
8112f4d0:	108000d0 	cmplti	r2,r2,3
8112f4d4:	103fea1e 	bne	r2,zero,8112f480 <__reset+0xfb10f480>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
		}        
		record->attributes          =   (char) IORD_8DIRECT(device_pointer->base, offset+11);
8112f4d8:	d0a0a117 	ldw	r2,-32124(gp)
8112f4dc:	10c00a17 	ldw	r3,40(r2)
8112f4e0:	e0bffc17 	ldw	r2,-16(fp)
8112f4e4:	1885883a 	add	r2,r3,r2
8112f4e8:	108002c4 	addi	r2,r2,11
8112f4ec:	10800023 	ldbuio	r2,0(r2)
8112f4f0:	10803fcc 	andi	r2,r2,255
8112f4f4:	1007883a 	mov	r3,r2
8112f4f8:	e0bffd17 	ldw	r2,-12(fp)
8112f4fc:	10c002c5 	stb	r3,11(r2)
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
8112f500:	d0a0a117 	ldw	r2,-32124(gp)
8112f504:	10c00a17 	ldw	r3,40(r2)
8112f508:	e0bffc17 	ldw	r2,-16(fp)
8112f50c:	1885883a 	add	r2,r3,r2
8112f510:	10800384 	addi	r2,r2,14
8112f514:	1080002b 	ldhuio	r2,0(r2)
8112f518:	10bfffcc 	andi	r2,r2,65535
8112f51c:	1007883a 	mov	r3,r2
8112f520:	e0bffd17 	ldw	r2,-12(fp)
8112f524:	10c0030d 	sth	r3,12(r2)
		record->create_date         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
8112f528:	d0a0a117 	ldw	r2,-32124(gp)
8112f52c:	10c00a17 	ldw	r3,40(r2)
8112f530:	e0bffc17 	ldw	r2,-16(fp)
8112f534:	1885883a 	add	r2,r3,r2
8112f538:	10800404 	addi	r2,r2,16
8112f53c:	1080002b 	ldhuio	r2,0(r2)
8112f540:	10bfffcc 	andi	r2,r2,65535
8112f544:	1007883a 	mov	r3,r2
8112f548:	e0bffd17 	ldw	r2,-12(fp)
8112f54c:	10c0038d 	sth	r3,14(r2)
		record->last_access_date    =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
8112f550:	d0a0a117 	ldw	r2,-32124(gp)
8112f554:	10c00a17 	ldw	r3,40(r2)
8112f558:	e0bffc17 	ldw	r2,-16(fp)
8112f55c:	1885883a 	add	r2,r3,r2
8112f560:	10800484 	addi	r2,r2,18
8112f564:	1080002b 	ldhuio	r2,0(r2)
8112f568:	10bfffcc 	andi	r2,r2,65535
8112f56c:	1007883a 	mov	r3,r2
8112f570:	e0bffd17 	ldw	r2,-12(fp)
8112f574:	10c0040d 	sth	r3,16(r2)
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
8112f578:	d0a0a117 	ldw	r2,-32124(gp)
8112f57c:	10c00a17 	ldw	r3,40(r2)
8112f580:	e0bffc17 	ldw	r2,-16(fp)
8112f584:	1885883a 	add	r2,r3,r2
8112f588:	10800584 	addi	r2,r2,22
8112f58c:	1080002b 	ldhuio	r2,0(r2)
8112f590:	10bfffcc 	andi	r2,r2,65535
8112f594:	1007883a 	mov	r3,r2
8112f598:	e0bffd17 	ldw	r2,-12(fp)
8112f59c:	10c0048d 	sth	r3,18(r2)
		record->last_modified_date  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
8112f5a0:	d0a0a117 	ldw	r2,-32124(gp)
8112f5a4:	10c00a17 	ldw	r3,40(r2)
8112f5a8:	e0bffc17 	ldw	r2,-16(fp)
8112f5ac:	1885883a 	add	r2,r3,r2
8112f5b0:	10800604 	addi	r2,r2,24
8112f5b4:	1080002b 	ldhuio	r2,0(r2)
8112f5b8:	10bfffcc 	andi	r2,r2,65535
8112f5bc:	1007883a 	mov	r3,r2
8112f5c0:	e0bffd17 	ldw	r2,-12(fp)
8112f5c4:	10c0050d 	sth	r3,20(r2)
		record->start_cluster_index =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
8112f5c8:	d0a0a117 	ldw	r2,-32124(gp)
8112f5cc:	10c00a17 	ldw	r3,40(r2)
8112f5d0:	e0bffc17 	ldw	r2,-16(fp)
8112f5d4:	1885883a 	add	r2,r3,r2
8112f5d8:	10800684 	addi	r2,r2,26
8112f5dc:	1080002b 	ldhuio	r2,0(r2)
8112f5e0:	10bfffcc 	andi	r2,r2,65535
8112f5e4:	1007883a 	mov	r3,r2
8112f5e8:	e0bffd17 	ldw	r2,-12(fp)
8112f5ec:	10c0058d 	sth	r3,22(r2)
		record->file_size_in_bytes  =	(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
8112f5f0:	d0a0a117 	ldw	r2,-32124(gp)
8112f5f4:	10c00a17 	ldw	r3,40(r2)
8112f5f8:	e0bffc17 	ldw	r2,-16(fp)
8112f5fc:	1885883a 	add	r2,r3,r2
8112f600:	10800704 	addi	r2,r2,28
8112f604:	10800037 	ldwio	r2,0(r2)
8112f608:	1007883a 	mov	r3,r2
8112f60c:	e0bffd17 	ldw	r2,-12(fp)
8112f610:	10c00615 	stw	r3,24(r2)
		record->file_record_cluster = cluster_index;
8112f614:	e0bffd17 	ldw	r2,-12(fp)
8112f618:	e0fffe17 	ldw	r3,-8(fp)
8112f61c:	10c00a15 	stw	r3,40(r2)
		record->file_record_sector_in_cluster = sector_in_cluster;
8112f620:	e0bffd17 	ldw	r2,-12(fp)
8112f624:	e0ffff17 	ldw	r3,-4(fp)
8112f628:	10c00b15 	stw	r3,44(r2)
		record->file_record_offset = offset;
8112f62c:	e0bffc17 	ldw	r2,-16(fp)
8112f630:	1007883a 	mov	r3,r2
8112f634:	e0bffd17 	ldw	r2,-12(fp)
8112f638:	10c00c0d 	sth	r3,48(r2)
		result = true;
8112f63c:	00800044 	movi	r2,1
8112f640:	e0bffa15 	stw	r2,-24(fp)
	}
	return result;
8112f644:	e0bffa17 	ldw	r2,-24(fp)
}
8112f648:	e037883a 	mov	sp,fp
8112f64c:	dfc00117 	ldw	ra,4(sp)
8112f650:	df000017 	ldw	fp,0(sp)
8112f654:	dec00204 	addi	sp,sp,8
8112f658:	f800283a 	ret

8112f65c <Write_File_Record_At_Offset>:


bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
8112f65c:	defff904 	addi	sp,sp,-28
8112f660:	de00012e 	bgeu	sp,et,8112f668 <Write_File_Record_At_Offset+0xc>
8112f664:	003b68fa 	trap	3
8112f668:	dfc00615 	stw	ra,24(sp)
8112f66c:	df000515 	stw	fp,20(sp)
8112f670:	df000504 	addi	fp,sp,20
8112f674:	e13ffe15 	stw	r4,-8(fp)
8112f678:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
8112f67c:	e03ffb15 	stw	zero,-20(fp)
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
8112f680:	e0bffe17 	ldw	r2,-8(fp)
8112f684:	108007cc 	andi	r2,r2,31
8112f688:	1000931e 	bne	r2,zero,8112f8d8 <Write_File_Record_At_Offset+0x27c>
8112f68c:	1131c800 	call	81131c80 <alt_up_sd_card_is_Present>
8112f690:	10009126 	beq	r2,zero,8112f8d8 <Write_File_Record_At_Offset+0x27c>
8112f694:	d0a09817 	ldw	r2,-32160(gp)
8112f698:	10008f26 	beq	r2,zero,8112f8d8 <Write_File_Record_At_Offset+0x27c>
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
8112f69c:	e03ffc15 	stw	zero,-16(fp)
8112f6a0:	00001f06 	br	8112f720 <Write_File_Record_At_Offset+0xc4>
        {
            short int two_chars = (short int) record->name[counter+1];
8112f6a4:	e0bffc17 	ldw	r2,-16(fp)
8112f6a8:	10800044 	addi	r2,r2,1
8112f6ac:	e0ffff17 	ldw	r3,-4(fp)
8112f6b0:	1885883a 	add	r2,r3,r2
8112f6b4:	10800003 	ldbu	r2,0(r2)
8112f6b8:	10803fcc 	andi	r2,r2,255
8112f6bc:	e0bffd0d 	sth	r2,-12(fp)
            two_chars = two_chars << 8;
8112f6c0:	e0bffd0f 	ldh	r2,-12(fp)
8112f6c4:	1004923a 	slli	r2,r2,8
8112f6c8:	e0bffd0d 	sth	r2,-12(fp)
            two_chars = two_chars | record->name[counter];
8112f6cc:	e0ffff17 	ldw	r3,-4(fp)
8112f6d0:	e0bffc17 	ldw	r2,-16(fp)
8112f6d4:	1885883a 	add	r2,r3,r2
8112f6d8:	10800003 	ldbu	r2,0(r2)
8112f6dc:	10c03fcc 	andi	r3,r2,255
8112f6e0:	e0bffd0b 	ldhu	r2,-12(fp)
8112f6e4:	1884b03a 	or	r2,r3,r2
8112f6e8:	e0bffd0d 	sth	r2,-12(fp)
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
8112f6ec:	e0fffe17 	ldw	r3,-8(fp)
8112f6f0:	e0bffc17 	ldw	r2,-16(fp)
8112f6f4:	1885883a 	add	r2,r3,r2
8112f6f8:	1007883a 	mov	r3,r2
8112f6fc:	d0a0a117 	ldw	r2,-32124(gp)
8112f700:	10800a17 	ldw	r2,40(r2)
8112f704:	1885883a 	add	r2,r3,r2
8112f708:	1007883a 	mov	r3,r2
8112f70c:	e0bffd0f 	ldh	r2,-12(fp)
8112f710:	1880002d 	sthio	r2,0(r3)
    bool result = false;
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
8112f714:	e0bffc17 	ldw	r2,-16(fp)
8112f718:	10800084 	addi	r2,r2,2
8112f71c:	e0bffc15 	stw	r2,-16(fp)
8112f720:	e0bffc17 	ldw	r2,-16(fp)
8112f724:	10800210 	cmplti	r2,r2,8
8112f728:	103fde1e 	bne	r2,zero,8112f6a4 <__reset+0xfb10f6a4>
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
8112f72c:	e03ffc15 	stw	zero,-16(fp)
8112f730:	00001306 	br	8112f780 <Write_File_Record_At_Offset+0x124>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
8112f734:	e0fffe17 	ldw	r3,-8(fp)
8112f738:	e0bffc17 	ldw	r2,-16(fp)
8112f73c:	1885883a 	add	r2,r3,r2
8112f740:	1007883a 	mov	r3,r2
8112f744:	d0a0a117 	ldw	r2,-32124(gp)
8112f748:	10800a17 	ldw	r2,40(r2)
8112f74c:	1885883a 	add	r2,r3,r2
8112f750:	10800204 	addi	r2,r2,8
8112f754:	1009883a 	mov	r4,r2
8112f758:	e0ffff17 	ldw	r3,-4(fp)
8112f75c:	e0bffc17 	ldw	r2,-16(fp)
8112f760:	1885883a 	add	r2,r3,r2
8112f764:	10800204 	addi	r2,r2,8
8112f768:	10800003 	ldbu	r2,0(r2)
8112f76c:	10803fcc 	andi	r2,r2,255
8112f770:	20800025 	stbio	r2,0(r4)
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
8112f774:	e0bffc17 	ldw	r2,-16(fp)
8112f778:	10800044 	addi	r2,r2,1
8112f77c:	e0bffc15 	stw	r2,-16(fp)
8112f780:	e0bffc17 	ldw	r2,-16(fp)
8112f784:	108000d0 	cmplti	r2,r2,3
8112f788:	103fea1e 	bne	r2,zero,8112f734 <__reset+0xfb10f734>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
        }        
        IOWR_8DIRECT(device_pointer->base, offset+11, record->attributes);
8112f78c:	d0a0a117 	ldw	r2,-32124(gp)
8112f790:	10c00a17 	ldw	r3,40(r2)
8112f794:	e0bffe17 	ldw	r2,-8(fp)
8112f798:	1885883a 	add	r2,r3,r2
8112f79c:	108002c4 	addi	r2,r2,11
8112f7a0:	1007883a 	mov	r3,r2
8112f7a4:	e0bfff17 	ldw	r2,-4(fp)
8112f7a8:	108002c3 	ldbu	r2,11(r2)
8112f7ac:	10803fcc 	andi	r2,r2,255
8112f7b0:	18800025 	stbio	r2,0(r3)
        /* Ignore reserved bytes at locations 12 and 13. */
        IOWR_16DIRECT(device_pointer->base, offset+14, record->create_time);
8112f7b4:	d0a0a117 	ldw	r2,-32124(gp)
8112f7b8:	10c00a17 	ldw	r3,40(r2)
8112f7bc:	e0bffe17 	ldw	r2,-8(fp)
8112f7c0:	1885883a 	add	r2,r3,r2
8112f7c4:	10800384 	addi	r2,r2,14
8112f7c8:	1007883a 	mov	r3,r2
8112f7cc:	e0bfff17 	ldw	r2,-4(fp)
8112f7d0:	1080030b 	ldhu	r2,12(r2)
8112f7d4:	10bfffcc 	andi	r2,r2,65535
8112f7d8:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+16, record->create_date);
8112f7dc:	d0a0a117 	ldw	r2,-32124(gp)
8112f7e0:	10c00a17 	ldw	r3,40(r2)
8112f7e4:	e0bffe17 	ldw	r2,-8(fp)
8112f7e8:	1885883a 	add	r2,r3,r2
8112f7ec:	10800404 	addi	r2,r2,16
8112f7f0:	1007883a 	mov	r3,r2
8112f7f4:	e0bfff17 	ldw	r2,-4(fp)
8112f7f8:	1080038b 	ldhu	r2,14(r2)
8112f7fc:	10bfffcc 	andi	r2,r2,65535
8112f800:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+18, record->last_access_date);
8112f804:	d0a0a117 	ldw	r2,-32124(gp)
8112f808:	10c00a17 	ldw	r3,40(r2)
8112f80c:	e0bffe17 	ldw	r2,-8(fp)
8112f810:	1885883a 	add	r2,r3,r2
8112f814:	10800484 	addi	r2,r2,18
8112f818:	1007883a 	mov	r3,r2
8112f81c:	e0bfff17 	ldw	r2,-4(fp)
8112f820:	1080040b 	ldhu	r2,16(r2)
8112f824:	10bfffcc 	andi	r2,r2,65535
8112f828:	1880002d 	sthio	r2,0(r3)
        /* Ignore reserved bytes at locations 20 and 21. */
        IOWR_16DIRECT(device_pointer->base, offset+22, record->last_modified_time);
8112f82c:	d0a0a117 	ldw	r2,-32124(gp)
8112f830:	10c00a17 	ldw	r3,40(r2)
8112f834:	e0bffe17 	ldw	r2,-8(fp)
8112f838:	1885883a 	add	r2,r3,r2
8112f83c:	10800584 	addi	r2,r2,22
8112f840:	1007883a 	mov	r3,r2
8112f844:	e0bfff17 	ldw	r2,-4(fp)
8112f848:	1080048b 	ldhu	r2,18(r2)
8112f84c:	10bfffcc 	andi	r2,r2,65535
8112f850:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+24, record->last_modified_date);
8112f854:	d0a0a117 	ldw	r2,-32124(gp)
8112f858:	10c00a17 	ldw	r3,40(r2)
8112f85c:	e0bffe17 	ldw	r2,-8(fp)
8112f860:	1885883a 	add	r2,r3,r2
8112f864:	10800604 	addi	r2,r2,24
8112f868:	1007883a 	mov	r3,r2
8112f86c:	e0bfff17 	ldw	r2,-4(fp)
8112f870:	1080050b 	ldhu	r2,20(r2)
8112f874:	10bfffcc 	andi	r2,r2,65535
8112f878:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+26, record->start_cluster_index);
8112f87c:	d0a0a117 	ldw	r2,-32124(gp)
8112f880:	10c00a17 	ldw	r3,40(r2)
8112f884:	e0bffe17 	ldw	r2,-8(fp)
8112f888:	1885883a 	add	r2,r3,r2
8112f88c:	10800684 	addi	r2,r2,26
8112f890:	1007883a 	mov	r3,r2
8112f894:	e0bfff17 	ldw	r2,-4(fp)
8112f898:	1080058b 	ldhu	r2,22(r2)
8112f89c:	10bfffcc 	andi	r2,r2,65535
8112f8a0:	1880002d 	sthio	r2,0(r3)
        IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
8112f8a4:	d0a0a117 	ldw	r2,-32124(gp)
8112f8a8:	10c00a17 	ldw	r3,40(r2)
8112f8ac:	e0bffe17 	ldw	r2,-8(fp)
8112f8b0:	1885883a 	add	r2,r3,r2
8112f8b4:	10800704 	addi	r2,r2,28
8112f8b8:	1007883a 	mov	r3,r2
8112f8bc:	e0bfff17 	ldw	r2,-4(fp)
8112f8c0:	10800617 	ldw	r2,24(r2)
8112f8c4:	18800035 	stwio	r2,0(r3)
        current_sector_modified = true;                  
8112f8c8:	00800044 	movi	r2,1
8112f8cc:	d0a0a215 	stw	r2,-32120(gp)
        result = true;
8112f8d0:	00800044 	movi	r2,1
8112f8d4:	e0bffb15 	stw	r2,-20(fp)
    }
    return result;
8112f8d8:	e0bffb17 	ldw	r2,-20(fp)
}
8112f8dc:	e037883a 	mov	sp,fp
8112f8e0:	dfc00117 	ldw	ra,4(sp)
8112f8e4:	df000017 	ldw	fp,0(sp)
8112f8e8:	dec00204 	addi	sp,sp,8
8112f8ec:	f800283a 	ret

8112f8f0 <Check_for_DOS_FAT>:
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
8112f8f0:	defff904 	addi	sp,sp,-28
8112f8f4:	de00012e 	bgeu	sp,et,8112f8fc <Check_for_DOS_FAT+0xc>
8112f8f8:	003b68fa 	trap	3
8112f8fc:	dfc00615 	stw	ra,24(sp)
8112f900:	df000515 	stw	fp,20(sp)
8112f904:	df000504 	addi	fp,sp,20
8112f908:	e13fff15 	stw	r4,-4(fp)
	bool result = false;
8112f90c:	e03ffb15 	stw	zero,-20(fp)
	int counter = 0;
8112f910:	e03ffc15 	stw	zero,-16(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
8112f914:	e17fff17 	ldw	r5,-4(fp)
8112f918:	0009883a 	mov	r4,zero
8112f91c:	112efa80 	call	8112efa8 <Read_Sector_Data>
8112f920:	e0bffb15 	stw	r2,-20(fp)
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
8112f924:	d0a0a117 	ldw	r2,-32124(gp)
8112f928:	10800a17 	ldw	r2,40(r2)
8112f92c:	10807f84 	addi	r2,r2,510
8112f930:	1080002b 	ldhuio	r2,0(r2)
8112f934:	10bfffcc 	andi	r2,r2,65535
8112f938:	e0bffe0d 	sth	r2,-8(fp)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
8112f93c:	e0bffe0f 	ldh	r2,-8(fp)
8112f940:	10ffffcc 	andi	r3,r2,65535
8112f944:	00aa9554 	movui	r2,43605
8112f948:	1881841e 	bne	r3,r2,8112ff5c <Check_for_DOS_FAT+0x66c>
8112f94c:	e0bffb17 	ldw	r2,-20(fp)
8112f950:	10018226 	beq	r2,zero,8112ff5c <Check_for_DOS_FAT+0x66c>
	{
		int num_clusters = 0;
8112f954:	e03ffd15 	stw	zero,-12(fp)

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
8112f958:	d0a0a117 	ldw	r2,-32124(gp)
8112f95c:	10800a17 	ldw	r2,40(r2)
8112f960:	10800023 	ldbuio	r2,0(r2)
8112f964:	10803fcc 	andi	r2,r2,255
8112f968:	1007883a 	mov	r3,r2
8112f96c:	00a045b4 	movhi	r2,33046
8112f970:	1094e204 	addi	r2,r2,21384
8112f974:	10c00005 	stb	r3,0(r2)
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
8112f978:	d0a0a117 	ldw	r2,-32124(gp)
8112f97c:	10800a17 	ldw	r2,40(r2)
8112f980:	10800044 	addi	r2,r2,1
8112f984:	10800023 	ldbuio	r2,0(r2)
8112f988:	10803fcc 	andi	r2,r2,255
8112f98c:	1007883a 	mov	r3,r2
8112f990:	00a045b4 	movhi	r2,33046
8112f994:	1094e204 	addi	r2,r2,21384
8112f998:	10c00045 	stb	r3,1(r2)
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
8112f99c:	d0a0a117 	ldw	r2,-32124(gp)
8112f9a0:	10800a17 	ldw	r2,40(r2)
8112f9a4:	10800084 	addi	r2,r2,2
8112f9a8:	10800023 	ldbuio	r2,0(r2)
8112f9ac:	10803fcc 	andi	r2,r2,255
8112f9b0:	1007883a 	mov	r3,r2
8112f9b4:	00a045b4 	movhi	r2,33046
8112f9b8:	1094e204 	addi	r2,r2,21384
8112f9bc:	10c00085 	stb	r3,2(r2)
		for (counter = 0; counter < 8; counter++)
8112f9c0:	e03ffc15 	stw	zero,-16(fp)
8112f9c4:	00001106 	br	8112fa0c <Check_for_DOS_FAT+0x11c>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
8112f9c8:	d0a0a117 	ldw	r2,-32124(gp)
8112f9cc:	10c00a17 	ldw	r3,40(r2)
8112f9d0:	e0bffc17 	ldw	r2,-16(fp)
8112f9d4:	1885883a 	add	r2,r3,r2
8112f9d8:	108000c4 	addi	r2,r2,3
8112f9dc:	10800023 	ldbuio	r2,0(r2)
8112f9e0:	10803fcc 	andi	r2,r2,255
8112f9e4:	1009883a 	mov	r4,r2
8112f9e8:	00a045b4 	movhi	r2,33046
8112f9ec:	1094e204 	addi	r2,r2,21384
8112f9f0:	e0fffc17 	ldw	r3,-16(fp)
8112f9f4:	10c5883a 	add	r2,r2,r3
8112f9f8:	108000c4 	addi	r2,r2,3
8112f9fc:	11000005 	stb	r4,0(r2)
		int num_clusters = 0;

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++)
8112fa00:	e0bffc17 	ldw	r2,-16(fp)
8112fa04:	10800044 	addi	r2,r2,1
8112fa08:	e0bffc15 	stw	r2,-16(fp)
8112fa0c:	e0bffc17 	ldw	r2,-16(fp)
8112fa10:	10800210 	cmplti	r2,r2,8
8112fa14:	103fec1e 	bne	r2,zero,8112f9c8 <__reset+0xfb10f9c8>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
		}
		boot_sector_data.sector_size_in_bytes = (((unsigned char) IORD_8DIRECT(device_pointer->base, 12)) << 8 ) | ((char) IORD_8DIRECT(device_pointer->base, 11));
8112fa18:	d0a0a117 	ldw	r2,-32124(gp)
8112fa1c:	10800a17 	ldw	r2,40(r2)
8112fa20:	10800304 	addi	r2,r2,12
8112fa24:	10800023 	ldbuio	r2,0(r2)
8112fa28:	10803fcc 	andi	r2,r2,255
8112fa2c:	1004923a 	slli	r2,r2,8
8112fa30:	1007883a 	mov	r3,r2
8112fa34:	d0a0a117 	ldw	r2,-32124(gp)
8112fa38:	10800a17 	ldw	r2,40(r2)
8112fa3c:	108002c4 	addi	r2,r2,11
8112fa40:	10800023 	ldbuio	r2,0(r2)
8112fa44:	10803fcc 	andi	r2,r2,255
8112fa48:	10803fcc 	andi	r2,r2,255
8112fa4c:	1080201c 	xori	r2,r2,128
8112fa50:	10bfe004 	addi	r2,r2,-128
8112fa54:	1884b03a 	or	r2,r3,r2
8112fa58:	1007883a 	mov	r3,r2
8112fa5c:	00a045b4 	movhi	r2,33046
8112fa60:	1094e204 	addi	r2,r2,21384
8112fa64:	10c0030d 	sth	r3,12(r2)
		boot_sector_data.sectors_per_cluster = ((unsigned char) IORD_8DIRECT(device_pointer->base, 13));
8112fa68:	d0a0a117 	ldw	r2,-32124(gp)
8112fa6c:	10800a17 	ldw	r2,40(r2)
8112fa70:	10800344 	addi	r2,r2,13
8112fa74:	10800023 	ldbuio	r2,0(r2)
8112fa78:	10803fcc 	andi	r2,r2,255
8112fa7c:	1007883a 	mov	r3,r2
8112fa80:	00a045b4 	movhi	r2,33046
8112fa84:	1094e204 	addi	r2,r2,21384
8112fa88:	10c00385 	stb	r3,14(r2)
		boot_sector_data.reserved_sectors = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 14));
8112fa8c:	d0a0a117 	ldw	r2,-32124(gp)
8112fa90:	10800a17 	ldw	r2,40(r2)
8112fa94:	10800384 	addi	r2,r2,14
8112fa98:	1080002b 	ldhuio	r2,0(r2)
8112fa9c:	10bfffcc 	andi	r2,r2,65535
8112faa0:	1007883a 	mov	r3,r2
8112faa4:	00a045b4 	movhi	r2,33046
8112faa8:	1094e204 	addi	r2,r2,21384
8112faac:	10c0040d 	sth	r3,16(r2)
		boot_sector_data.number_of_FATs = ((unsigned char) IORD_8DIRECT(device_pointer->base, 16));
8112fab0:	d0a0a117 	ldw	r2,-32124(gp)
8112fab4:	10800a17 	ldw	r2,40(r2)
8112fab8:	10800404 	addi	r2,r2,16
8112fabc:	10800023 	ldbuio	r2,0(r2)
8112fac0:	10803fcc 	andi	r2,r2,255
8112fac4:	1007883a 	mov	r3,r2
8112fac8:	00a045b4 	movhi	r2,33046
8112facc:	1094e204 	addi	r2,r2,21384
8112fad0:	10c00485 	stb	r3,18(r2)
		boot_sector_data.max_number_of_dir_entires = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 18)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 17));
8112fad4:	d0a0a117 	ldw	r2,-32124(gp)
8112fad8:	10800a17 	ldw	r2,40(r2)
8112fadc:	10800484 	addi	r2,r2,18
8112fae0:	10800023 	ldbuio	r2,0(r2)
8112fae4:	10803fcc 	andi	r2,r2,255
8112fae8:	1004923a 	slli	r2,r2,8
8112faec:	1007883a 	mov	r3,r2
8112faf0:	d0a0a117 	ldw	r2,-32124(gp)
8112faf4:	10800a17 	ldw	r2,40(r2)
8112faf8:	10800444 	addi	r2,r2,17
8112fafc:	10800023 	ldbuio	r2,0(r2)
8112fb00:	10803fcc 	andi	r2,r2,255
8112fb04:	10803fcc 	andi	r2,r2,255
8112fb08:	1884b03a 	or	r2,r3,r2
8112fb0c:	1007883a 	mov	r3,r2
8112fb10:	00a045b4 	movhi	r2,33046
8112fb14:	1094e204 	addi	r2,r2,21384
8112fb18:	10c0050d 	sth	r3,20(r2)
		boot_sector_data.number_of_sectors_in_partition = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 20)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 19));
8112fb1c:	d0a0a117 	ldw	r2,-32124(gp)
8112fb20:	10800a17 	ldw	r2,40(r2)
8112fb24:	10800504 	addi	r2,r2,20
8112fb28:	10800023 	ldbuio	r2,0(r2)
8112fb2c:	10803fcc 	andi	r2,r2,255
8112fb30:	1004923a 	slli	r2,r2,8
8112fb34:	1007883a 	mov	r3,r2
8112fb38:	d0a0a117 	ldw	r2,-32124(gp)
8112fb3c:	10800a17 	ldw	r2,40(r2)
8112fb40:	108004c4 	addi	r2,r2,19
8112fb44:	10800023 	ldbuio	r2,0(r2)
8112fb48:	10803fcc 	andi	r2,r2,255
8112fb4c:	10803fcc 	andi	r2,r2,255
8112fb50:	1884b03a 	or	r2,r3,r2
8112fb54:	1007883a 	mov	r3,r2
8112fb58:	00a045b4 	movhi	r2,33046
8112fb5c:	1094e204 	addi	r2,r2,21384
8112fb60:	10c0058d 	sth	r3,22(r2)
		boot_sector_data.media_descriptor = ((unsigned char) IORD_8DIRECT(device_pointer->base, 21));
8112fb64:	d0a0a117 	ldw	r2,-32124(gp)
8112fb68:	10800a17 	ldw	r2,40(r2)
8112fb6c:	10800544 	addi	r2,r2,21
8112fb70:	10800023 	ldbuio	r2,0(r2)
8112fb74:	10803fcc 	andi	r2,r2,255
8112fb78:	1007883a 	mov	r3,r2
8112fb7c:	00a045b4 	movhi	r2,33046
8112fb80:	1094e204 	addi	r2,r2,21384
8112fb84:	10c00605 	stb	r3,24(r2)
		boot_sector_data.number_of_sectors_per_table = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 22));
8112fb88:	d0a0a117 	ldw	r2,-32124(gp)
8112fb8c:	10800a17 	ldw	r2,40(r2)
8112fb90:	10800584 	addi	r2,r2,22
8112fb94:	1080002b 	ldhuio	r2,0(r2)
8112fb98:	10bfffcc 	andi	r2,r2,65535
8112fb9c:	1007883a 	mov	r3,r2
8112fba0:	00a045b4 	movhi	r2,33046
8112fba4:	1094e204 	addi	r2,r2,21384
8112fba8:	10c0068d 	sth	r3,26(r2)
		boot_sector_data.number_of_sectors_per_track = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 24));
8112fbac:	d0a0a117 	ldw	r2,-32124(gp)
8112fbb0:	10800a17 	ldw	r2,40(r2)
8112fbb4:	10800604 	addi	r2,r2,24
8112fbb8:	1080002b 	ldhuio	r2,0(r2)
8112fbbc:	10bfffcc 	andi	r2,r2,65535
8112fbc0:	1007883a 	mov	r3,r2
8112fbc4:	00a045b4 	movhi	r2,33046
8112fbc8:	1094e204 	addi	r2,r2,21384
8112fbcc:	10c0070d 	sth	r3,28(r2)
		boot_sector_data.number_of_heads = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
8112fbd0:	d0a0a117 	ldw	r2,-32124(gp)
8112fbd4:	10800a17 	ldw	r2,40(r2)
8112fbd8:	10800684 	addi	r2,r2,26
8112fbdc:	1080002b 	ldhuio	r2,0(r2)
8112fbe0:	10bfffcc 	andi	r2,r2,65535
8112fbe4:	1007883a 	mov	r3,r2
8112fbe8:	00a045b4 	movhi	r2,33046
8112fbec:	1094e204 	addi	r2,r2,21384
8112fbf0:	10c0078d 	sth	r3,30(r2)
		boot_sector_data.number_of_hidden_sectors = ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
8112fbf4:	d0a0a117 	ldw	r2,-32124(gp)
8112fbf8:	10800a17 	ldw	r2,40(r2)
8112fbfc:	10800704 	addi	r2,r2,28
8112fc00:	10800037 	ldwio	r2,0(r2)
8112fc04:	1007883a 	mov	r3,r2
8112fc08:	00a045b4 	movhi	r2,33046
8112fc0c:	1094e204 	addi	r2,r2,21384
8112fc10:	10c00815 	stw	r3,32(r2)
		boot_sector_data.total_sector_count_if_above_32MB = ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
8112fc14:	d0a0a117 	ldw	r2,-32124(gp)
8112fc18:	10800a17 	ldw	r2,40(r2)
8112fc1c:	10800804 	addi	r2,r2,32
8112fc20:	10800037 	ldwio	r2,0(r2)
8112fc24:	1007883a 	mov	r3,r2
8112fc28:	00a045b4 	movhi	r2,33046
8112fc2c:	1094e204 	addi	r2,r2,21384
8112fc30:	10c00915 	stw	r3,36(r2)
		boot_sector_data.drive_number = ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
8112fc34:	d0a0a117 	ldw	r2,-32124(gp)
8112fc38:	10800a17 	ldw	r2,40(r2)
8112fc3c:	10800904 	addi	r2,r2,36
8112fc40:	10800023 	ldbuio	r2,0(r2)
8112fc44:	10803fcc 	andi	r2,r2,255
8112fc48:	1007883a 	mov	r3,r2
8112fc4c:	00a045b4 	movhi	r2,33046
8112fc50:	1094e204 	addi	r2,r2,21384
8112fc54:	10c00a05 	stb	r3,40(r2)
		boot_sector_data.current_head = ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
8112fc58:	d0a0a117 	ldw	r2,-32124(gp)
8112fc5c:	10800a17 	ldw	r2,40(r2)
8112fc60:	10800944 	addi	r2,r2,37
8112fc64:	10800023 	ldbuio	r2,0(r2)
8112fc68:	10803fcc 	andi	r2,r2,255
8112fc6c:	1007883a 	mov	r3,r2
8112fc70:	00a045b4 	movhi	r2,33046
8112fc74:	1094e204 	addi	r2,r2,21384
8112fc78:	10c00a45 	stb	r3,41(r2)
		boot_sector_data.boot_signature = ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
8112fc7c:	d0a0a117 	ldw	r2,-32124(gp)
8112fc80:	10800a17 	ldw	r2,40(r2)
8112fc84:	10800984 	addi	r2,r2,38
8112fc88:	10800023 	ldbuio	r2,0(r2)
8112fc8c:	10803fcc 	andi	r2,r2,255
8112fc90:	1007883a 	mov	r3,r2
8112fc94:	00a045b4 	movhi	r2,33046
8112fc98:	1094e204 	addi	r2,r2,21384
8112fc9c:	10c00a85 	stb	r3,42(r2)
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
8112fca0:	00a045b4 	movhi	r2,33046
8112fca4:	1094e204 	addi	r2,r2,21384
8112fca8:	1080040b 	ldhu	r2,16(r2)
8112fcac:	10ffffcc 	andi	r3,r2,65535
8112fcb0:	00a045b4 	movhi	r2,33046
8112fcb4:	1094e204 	addi	r2,r2,21384
8112fcb8:	10c01115 	stw	r3,68(r2)
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
8112fcbc:	00a045b4 	movhi	r2,33046
8112fcc0:	1094e204 	addi	r2,r2,21384
8112fcc4:	10c01117 	ldw	r3,68(r2)
8112fcc8:	00a045b4 	movhi	r2,33046
8112fccc:	1094e204 	addi	r2,r2,21384
8112fcd0:	1080068b 	ldhu	r2,26(r2)
8112fcd4:	10bfffcc 	andi	r2,r2,65535
8112fcd8:	1887883a 	add	r3,r3,r2
8112fcdc:	00a045b4 	movhi	r2,33046
8112fce0:	1094e204 	addi	r2,r2,21384
8112fce4:	10c01215 	stw	r3,72(r2)
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
8112fce8:	00a045b4 	movhi	r2,33046
8112fcec:	1094e204 	addi	r2,r2,21384
8112fcf0:	10c01217 	ldw	r3,72(r2)
8112fcf4:	00a045b4 	movhi	r2,33046
8112fcf8:	1094e204 	addi	r2,r2,21384
8112fcfc:	1080068b 	ldhu	r2,26(r2)
8112fd00:	10bfffcc 	andi	r2,r2,65535
8112fd04:	1887883a 	add	r3,r3,r2
8112fd08:	00a045b4 	movhi	r2,33046
8112fd0c:	1094e204 	addi	r2,r2,21384
8112fd10:	10c01315 	stw	r3,76(r2)
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
8112fd14:	00a045b4 	movhi	r2,33046
8112fd18:	1094e204 	addi	r2,r2,21384
8112fd1c:	10c01317 	ldw	r3,76(r2)
8112fd20:	00a045b4 	movhi	r2,33046
8112fd24:	1094e204 	addi	r2,r2,21384
8112fd28:	1080050b 	ldhu	r2,20(r2)
8112fd2c:	10bfffcc 	andi	r2,r2,65535
8112fd30:	1008917a 	slli	r4,r2,5
8112fd34:	00a045b4 	movhi	r2,33046
8112fd38:	1094e204 	addi	r2,r2,21384
8112fd3c:	1080030b 	ldhu	r2,12(r2)
8112fd40:	10bfffcc 	andi	r2,r2,65535
8112fd44:	2085283a 	div	r2,r4,r2
8112fd48:	1887883a 	add	r3,r3,r2
8112fd4c:	00a045b4 	movhi	r2,33046
8112fd50:	1094e204 	addi	r2,r2,21384
8112fd54:	10c01415 	stw	r3,80(r2)
	    
		if (boot_sector_data.number_of_sectors_in_partition > 0)
8112fd58:	00a045b4 	movhi	r2,33046
8112fd5c:	1094e204 	addi	r2,r2,21384
8112fd60:	1080058b 	ldhu	r2,22(r2)
8112fd64:	10bfffcc 	andi	r2,r2,65535
8112fd68:	10000b26 	beq	r2,zero,8112fd98 <Check_for_DOS_FAT+0x4a8>
		{
			num_clusters = (boot_sector_data.number_of_sectors_in_partition / boot_sector_data.sectors_per_cluster);
8112fd6c:	00a045b4 	movhi	r2,33046
8112fd70:	1094e204 	addi	r2,r2,21384
8112fd74:	1080058b 	ldhu	r2,22(r2)
8112fd78:	10ffffcc 	andi	r3,r2,65535
8112fd7c:	00a045b4 	movhi	r2,33046
8112fd80:	1094e204 	addi	r2,r2,21384
8112fd84:	10800383 	ldbu	r2,14(r2)
8112fd88:	10803fcc 	andi	r2,r2,255
8112fd8c:	1885283a 	div	r2,r3,r2
8112fd90:	e0bffd15 	stw	r2,-12(fp)
8112fd94:	00000906 	br	8112fdbc <Check_for_DOS_FAT+0x4cc>
		}
		else
		{
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB / boot_sector_data.sectors_per_cluster);
8112fd98:	00a045b4 	movhi	r2,33046
8112fd9c:	1094e204 	addi	r2,r2,21384
8112fda0:	10c00917 	ldw	r3,36(r2)
8112fda4:	00a045b4 	movhi	r2,33046
8112fda8:	1094e204 	addi	r2,r2,21384
8112fdac:	10800383 	ldbu	r2,14(r2)
8112fdb0:	10803fcc 	andi	r2,r2,255
8112fdb4:	1885203a 	divu	r2,r3,r2
8112fdb8:	e0bffd15 	stw	r2,-12(fp)
		}
		if (num_clusters < 4087)
8112fdbc:	e0bffd17 	ldw	r2,-12(fp)
8112fdc0:	1083fdc8 	cmpgei	r2,r2,4087
8112fdc4:	1000051e 	bne	r2,zero,8112fddc <Check_for_DOS_FAT+0x4ec>
		{
			boot_sector_data.bits_for_cluster_index = 12;
8112fdc8:	00a045b4 	movhi	r2,33046
8112fdcc:	1094e204 	addi	r2,r2,21384
8112fdd0:	00c00304 	movi	r3,12
8112fdd4:	10c01085 	stb	r3,66(r2)
8112fdd8:	00000c06 	br	8112fe0c <Check_for_DOS_FAT+0x51c>
		}
		else if (num_clusters <= 65517)
8112fddc:	e0bffd17 	ldw	r2,-12(fp)
8112fde0:	00fffb54 	movui	r3,65517
8112fde4:	18800516 	blt	r3,r2,8112fdfc <Check_for_DOS_FAT+0x50c>
		{
			boot_sector_data.bits_for_cluster_index = 16;
8112fde8:	00a045b4 	movhi	r2,33046
8112fdec:	1094e204 	addi	r2,r2,21384
8112fdf0:	00c00404 	movi	r3,16
8112fdf4:	10c01085 	stb	r3,66(r2)
8112fdf8:	00000406 	br	8112fe0c <Check_for_DOS_FAT+0x51c>
		}
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
8112fdfc:	00a045b4 	movhi	r2,33046
8112fe00:	1094e204 	addi	r2,r2,21384
8112fe04:	00c00804 	movi	r3,32
8112fe08:	10c01085 	stb	r3,66(r2)
		}
	    
		for (counter = 0; counter < 4; counter++)
8112fe0c:	e03ffc15 	stw	zero,-16(fp)
8112fe10:	00001106 	br	8112fe58 <Check_for_DOS_FAT+0x568>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
8112fe14:	d0a0a117 	ldw	r2,-32124(gp)
8112fe18:	10c00a17 	ldw	r3,40(r2)
8112fe1c:	e0bffc17 	ldw	r2,-16(fp)
8112fe20:	1885883a 	add	r2,r3,r2
8112fe24:	108009c4 	addi	r2,r2,39
8112fe28:	10800023 	ldbuio	r2,0(r2)
8112fe2c:	10803fcc 	andi	r2,r2,255
8112fe30:	1009883a 	mov	r4,r2
8112fe34:	00a045b4 	movhi	r2,33046
8112fe38:	1094e204 	addi	r2,r2,21384
8112fe3c:	e0fffc17 	ldw	r3,-16(fp)
8112fe40:	10c5883a 	add	r2,r2,r3
8112fe44:	10800ac4 	addi	r2,r2,43
8112fe48:	11000005 	stb	r4,0(r2)
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
		}
	    
		for (counter = 0; counter < 4; counter++)
8112fe4c:	e0bffc17 	ldw	r2,-16(fp)
8112fe50:	10800044 	addi	r2,r2,1
8112fe54:	e0bffc15 	stw	r2,-16(fp)
8112fe58:	e0bffc17 	ldw	r2,-16(fp)
8112fe5c:	10800110 	cmplti	r2,r2,4
8112fe60:	103fec1e 	bne	r2,zero,8112fe14 <__reset+0xfb10fe14>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
8112fe64:	e03ffc15 	stw	zero,-16(fp)
8112fe68:	00001106 	br	8112feb0 <Check_for_DOS_FAT+0x5c0>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
8112fe6c:	d0a0a117 	ldw	r2,-32124(gp)
8112fe70:	10c00a17 	ldw	r3,40(r2)
8112fe74:	e0bffc17 	ldw	r2,-16(fp)
8112fe78:	1885883a 	add	r2,r3,r2
8112fe7c:	10800ac4 	addi	r2,r2,43
8112fe80:	10800023 	ldbuio	r2,0(r2)
8112fe84:	10803fcc 	andi	r2,r2,255
8112fe88:	1009883a 	mov	r4,r2
8112fe8c:	00a045b4 	movhi	r2,33046
8112fe90:	1094e204 	addi	r2,r2,21384
8112fe94:	e0fffc17 	ldw	r3,-16(fp)
8112fe98:	10c5883a 	add	r2,r2,r3
8112fe9c:	10800bc4 	addi	r2,r2,47
8112fea0:	11000005 	stb	r4,0(r2)
	    
		for (counter = 0; counter < 4; counter++)
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
8112fea4:	e0bffc17 	ldw	r2,-16(fp)
8112fea8:	10800044 	addi	r2,r2,1
8112feac:	e0bffc15 	stw	r2,-16(fp)
8112feb0:	e0bffc17 	ldw	r2,-16(fp)
8112feb4:	108002d0 	cmplti	r2,r2,11
8112feb8:	103fec1e 	bne	r2,zero,8112fe6c <__reset+0xfb10fe6c>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
8112febc:	e03ffc15 	stw	zero,-16(fp)
8112fec0:	00001106 	br	8112ff08 <Check_for_DOS_FAT+0x618>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
8112fec4:	d0a0a117 	ldw	r2,-32124(gp)
8112fec8:	10c00a17 	ldw	r3,40(r2)
8112fecc:	e0bffc17 	ldw	r2,-16(fp)
8112fed0:	1885883a 	add	r2,r3,r2
8112fed4:	10800d84 	addi	r2,r2,54
8112fed8:	10800023 	ldbuio	r2,0(r2)
8112fedc:	10803fcc 	andi	r2,r2,255
8112fee0:	1009883a 	mov	r4,r2
8112fee4:	00a045b4 	movhi	r2,33046
8112fee8:	1094e204 	addi	r2,r2,21384
8112feec:	e0fffc17 	ldw	r3,-16(fp)
8112fef0:	10c5883a 	add	r2,r2,r3
8112fef4:	10800e84 	addi	r2,r2,58
8112fef8:	11000005 	stb	r4,0(r2)
		}    
		for (counter = 0; counter < 11; counter++)
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
8112fefc:	e0bffc17 	ldw	r2,-16(fp)
8112ff00:	10800044 	addi	r2,r2,1
8112ff04:	e0bffc15 	stw	r2,-16(fp)
8112ff08:	e0bffc17 	ldw	r2,-16(fp)
8112ff0c:	10800210 	cmplti	r2,r2,8
8112ff10:	103fec1e 	bne	r2,zero,8112fec4 <__reset+0xfb10fec4>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
8112ff14:	e03ffc15 	stw	zero,-16(fp)
8112ff18:	00000a06 	br	8112ff44 <Check_for_DOS_FAT+0x654>
		{
			active_files[counter].in_use = false;
8112ff1c:	00a045b4 	movhi	r2,33046
8112ff20:	1094f704 	addi	r2,r2,21468
8112ff24:	e0fffc17 	ldw	r3,-16(fp)
8112ff28:	180691ba 	slli	r3,r3,6
8112ff2c:	10c5883a 	add	r2,r2,r3
8112ff30:	10800f04 	addi	r2,r2,60
8112ff34:	10000015 	stw	zero,0(r2)
		for (counter = 0; counter < 8; counter++)
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
8112ff38:	e0bffc17 	ldw	r2,-16(fp)
8112ff3c:	10800044 	addi	r2,r2,1
8112ff40:	e0bffc15 	stw	r2,-16(fp)
8112ff44:	e0bffc17 	ldw	r2,-16(fp)
8112ff48:	10800510 	cmplti	r2,r2,20
8112ff4c:	103ff31e 	bne	r2,zero,8112ff1c <__reset+0xfb10ff1c>
		{
			active_files[counter].in_use = false;
		}
		result = true;
8112ff50:	00800044 	movi	r2,1
8112ff54:	e0bffb15 	stw	r2,-20(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
	{
8112ff58:	00000106 	br	8112ff60 <Check_for_DOS_FAT+0x670>
		}
		result = true;
	}
    else
    {
        result = false;
8112ff5c:	e03ffb15 	stw	zero,-20(fp)
    }
	return result;
8112ff60:	e0bffb17 	ldw	r2,-20(fp)
}
8112ff64:	e037883a 	mov	sp,fp
8112ff68:	dfc00117 	ldw	ra,4(sp)
8112ff6c:	df000017 	ldw	fp,0(sp)
8112ff70:	dec00204 	addi	sp,sp,8
8112ff74:	f800283a 	ret

8112ff78 <Look_for_FAT16>:


bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
8112ff78:	defffc04 	addi	sp,sp,-16
8112ff7c:	de00012e 	bgeu	sp,et,8112ff84 <Look_for_FAT16+0xc>
8112ff80:	003b68fa 	trap	3
8112ff84:	dfc00315 	stw	ra,12(sp)
8112ff88:	df000215 	stw	fp,8(sp)
8112ff8c:	df000204 	addi	fp,sp,8
	bool result = false;
8112ff90:	e03ffe15 	stw	zero,-8(fp)

	if (alt_up_sd_card_is_Present())
8112ff94:	1131c800 	call	81131c80 <alt_up_sd_card_is_Present>
8112ff98:	10002e26 	beq	r2,zero,81130054 <Look_for_FAT16+0xdc>
	{
		short int csd_file_format = *CSD_register_w0;
8112ff9c:	d0a09b17 	ldw	r2,-32148(gp)
8112ffa0:	1080000b 	ldhu	r2,0(r2)
8112ffa4:	e0bfff0d 	sth	r2,-4(fp)
        
		fat_partition_offset_in_512_byte_sectors = 0;
8112ffa8:	d0209f15 	stw	zero,-32132(gp)
		fat_partition_size_in_512_byte_sectors = 0;              
8112ffac:	d020a015 	stw	zero,-32128(gp)

		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00) != 0x0c00))
8112ffb0:	e0bfff0f 	ldh	r2,-4(fp)
8112ffb4:	10002716 	blt	r2,zero,81130054 <Look_for_FAT16+0xdc>
8112ffb8:	e0bfff0b 	ldhu	r2,-4(fp)
8112ffbc:	10bfffcc 	andi	r2,r2,65535
8112ffc0:	1083000c 	andi	r2,r2,3072
8112ffc4:	10830020 	cmpeqi	r2,r2,3072
8112ffc8:	1000221e 	bne	r2,zero,81130054 <Look_for_FAT16+0xdc>
		{
			if ((csd_file_format & 0x0c00) == 0x0400)
8112ffcc:	e0bfff0b 	ldhu	r2,-4(fp)
8112ffd0:	10bfffcc 	andi	r2,r2,65535
8112ffd4:	1083000c 	andi	r2,r2,3072
8112ffd8:	10810018 	cmpnei	r2,r2,1024
8112ffdc:	1000031e 	bne	r2,zero,8112ffec <Look_for_FAT16+0x74>
			{
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
8112ffe0:	0009883a 	mov	r4,zero
8112ffe4:	112f8f00 	call	8112f8f0 <Check_for_DOS_FAT>
8112ffe8:	e0bffe15 	stw	r2,-8(fp)
			}
			if ((csd_file_format & 0x0c00) == 0x0000)
8112ffec:	e0bfff0b 	ldhu	r2,-4(fp)
8112fff0:	10bfffcc 	andi	r2,r2,65535
8112fff4:	1083000c 	andi	r2,r2,3072
8112fff8:	1000061e 	bne	r2,zero,81130014 <Look_for_FAT16+0x9c>
			{
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record())
8112fffc:	112f22c0 	call	8112f22c <Check_for_Master_Boot_Record>
81130000:	10000426 	beq	r2,zero,81130014 <Look_for_FAT16+0x9c>
				{
					result = Check_for_DOS_FAT(fat_partition_offset_in_512_byte_sectors);
81130004:	d0a09f17 	ldw	r2,-32132(gp)
81130008:	1009883a 	mov	r4,r2
8113000c:	112f8f00 	call	8112f8f0 <Check_for_DOS_FAT>
81130010:	e0bffe15 	stw	r2,-8(fp)
				}                        
			}
			if (result == true)
81130014:	e0bffe17 	ldw	r2,-8(fp)
81130018:	10800058 	cmpnei	r2,r2,1
8113001c:	10000d1e 	bne	r2,zero,81130054 <Look_for_FAT16+0xdc>
			{
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16)
81130020:	00a045b4 	movhi	r2,33046
81130024:	1094e204 	addi	r2,r2,21384
81130028:	10801083 	ldbu	r2,66(r2)
8113002c:	10803fcc 	andi	r2,r2,255
81130030:	10800420 	cmpeqi	r2,r2,16
81130034:	1000021e 	bne	r2,zero,81130040 <Look_for_FAT16+0xc8>
				{
					result = false;
81130038:	e03ffe15 	stw	zero,-8(fp)
8113003c:	00000506 	br	81130054 <Look_for_FAT16+0xdc>
				}
				else
				{
					fat_partition_size_in_512_byte_sectors = boot_sector_data.number_of_sectors_in_partition;
81130040:	00a045b4 	movhi	r2,33046
81130044:	1094e204 	addi	r2,r2,21384
81130048:	1080058b 	ldhu	r2,22(r2)
8113004c:	10bfffcc 	andi	r2,r2,65535
81130050:	d0a0a015 	stw	r2,-32128(gp)
				}
			}
		}
	}
	return result;
81130054:	e0bffe17 	ldw	r2,-8(fp)
}
81130058:	e037883a 	mov	sp,fp
8113005c:	dfc00117 	ldw	ra,4(sp)
81130060:	df000017 	ldw	fp,0(sp)
81130064:	dec00204 	addi	sp,sp,8
81130068:	f800283a 	ret

8113006c <filename_to_upper_case>:
 

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
8113006c:	defffb04 	addi	sp,sp,-20
81130070:	de00012e 	bgeu	sp,et,81130078 <filename_to_upper_case+0xc>
81130074:	003b68fa 	trap	3
81130078:	dfc00415 	stw	ra,16(sp)
8113007c:	df000315 	stw	fp,12(sp)
81130080:	df000304 	addi	fp,sp,12
81130084:	e13fff15 	stw	r4,-4(fp)
    int index;
    int length = strlen(file_name);
81130088:	e13fff17 	ldw	r4,-4(fp)
8113008c:	110ffb80 	call	8110ffb8 <strlen>
81130090:	e0bffe15 	stw	r2,-8(fp)
    
    for (index = 0; index < length; index++)
81130094:	e03ffd15 	stw	zero,-12(fp)
81130098:	00001e06 	br	81130114 <filename_to_upper_case+0xa8>
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
8113009c:	e0bffd17 	ldw	r2,-12(fp)
811300a0:	e0ffff17 	ldw	r3,-4(fp)
811300a4:	1885883a 	add	r2,r3,r2
811300a8:	10800003 	ldbu	r2,0(r2)
811300ac:	10803fcc 	andi	r2,r2,255
811300b0:	1080201c 	xori	r2,r2,128
811300b4:	10bfe004 	addi	r2,r2,-128
811300b8:	10801850 	cmplti	r2,r2,97
811300bc:	1000121e 	bne	r2,zero,81130108 <filename_to_upper_case+0x9c>
811300c0:	e0bffd17 	ldw	r2,-12(fp)
811300c4:	e0ffff17 	ldw	r3,-4(fp)
811300c8:	1885883a 	add	r2,r3,r2
811300cc:	10800003 	ldbu	r2,0(r2)
811300d0:	10803fcc 	andi	r2,r2,255
811300d4:	1080201c 	xori	r2,r2,128
811300d8:	10bfe004 	addi	r2,r2,-128
811300dc:	10801ec8 	cmpgei	r2,r2,123
811300e0:	1000091e 	bne	r2,zero,81130108 <filename_to_upper_case+0x9c>
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
811300e4:	e0bffd17 	ldw	r2,-12(fp)
811300e8:	e0ffff17 	ldw	r3,-4(fp)
811300ec:	1885883a 	add	r2,r3,r2
811300f0:	e0fffd17 	ldw	r3,-12(fp)
811300f4:	e13fff17 	ldw	r4,-4(fp)
811300f8:	20c7883a 	add	r3,r4,r3
811300fc:	18c00003 	ldbu	r3,0(r3)
81130100:	18fff804 	addi	r3,r3,-32
81130104:	10c00005 	stb	r3,0(r2)
// Change file name to upper case.
{
    int index;
    int length = strlen(file_name);
    
    for (index = 0; index < length; index++)
81130108:	e0bffd17 	ldw	r2,-12(fp)
8113010c:	10800044 	addi	r2,r2,1
81130110:	e0bffd15 	stw	r2,-12(fp)
81130114:	e0fffd17 	ldw	r3,-12(fp)
81130118:	e0bffe17 	ldw	r2,-8(fp)
8113011c:	18bfdf16 	blt	r3,r2,8113009c <__reset+0xfb11009c>
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
        }
    }
}
81130120:	0001883a 	nop
81130124:	e037883a 	mov	sp,fp
81130128:	dfc00117 	ldw	ra,4(sp)
8113012c:	df000017 	ldw	fp,0(sp)
81130130:	dec00204 	addi	sp,sp,8
81130134:	f800283a 	ret

81130138 <check_file_name_for_FAT16_compliance>:


bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
81130138:	defff804 	addi	sp,sp,-32
8113013c:	de00012e 	bgeu	sp,et,81130144 <check_file_name_for_FAT16_compliance+0xc>
81130140:	003b68fa 	trap	3
81130144:	dfc00715 	stw	ra,28(sp)
81130148:	df000615 	stw	fp,24(sp)
8113014c:	df000604 	addi	fp,sp,24
81130150:	e13fff15 	stw	r4,-4(fp)
    int length = strlen(file_name);
81130154:	e13fff17 	ldw	r4,-4(fp)
81130158:	110ffb80 	call	8110ffb8 <strlen>
8113015c:	e0bffe15 	stw	r2,-8(fp)
    int index;
    int last_dir_break_position = -1;
81130160:	00bfffc4 	movi	r2,-1
81130164:	e0bffb15 	stw	r2,-20(fp)
    int last_period = -1;
81130168:	00bfffc4 	movi	r2,-1
8113016c:	e0bffc15 	stw	r2,-16(fp)
    bool result = true;
81130170:	00800044 	movi	r2,1
81130174:	e0bffd15 	stw	r2,-12(fp)
    
    for(index = 0; index < length; index++)
81130178:	e03ffa15 	stw	zero,-24(fp)
8113017c:	00006d06 	br	81130334 <check_file_name_for_FAT16_compliance+0x1fc>
    {
        if ((file_name[index] == ' ') ||
81130180:	e0bffa17 	ldw	r2,-24(fp)
81130184:	e0ffff17 	ldw	r3,-4(fp)
81130188:	1885883a 	add	r2,r3,r2
8113018c:	10800003 	ldbu	r2,0(r2)
81130190:	10803fcc 	andi	r2,r2,255
81130194:	1080201c 	xori	r2,r2,128
81130198:	10bfe004 	addi	r2,r2,-128
8113019c:	10800820 	cmpeqi	r2,r2,32
811301a0:	10003e1e 	bne	r2,zero,8113029c <check_file_name_for_FAT16_compliance+0x164>
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
811301a4:	e0bffa17 	ldw	r2,-24(fp)
811301a8:	10ffffc4 	addi	r3,r2,-1
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
811301ac:	e0bffb17 	ldw	r2,-20(fp)
811301b0:	1880121e 	bne	r3,r2,811301fc <check_file_name_for_FAT16_compliance+0xc4>
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
811301b4:	e0bffa17 	ldw	r2,-24(fp)
811301b8:	e0ffff17 	ldw	r3,-4(fp)
811301bc:	1885883a 	add	r2,r3,r2
811301c0:	10800003 	ldbu	r2,0(r2)
811301c4:	10803fcc 	andi	r2,r2,255
811301c8:	1080201c 	xori	r2,r2,128
811301cc:	10bfe004 	addi	r2,r2,-128
811301d0:	10801720 	cmpeqi	r2,r2,92
811301d4:	1000311e 	bne	r2,zero,8113029c <check_file_name_for_FAT16_compliance+0x164>
811301d8:	e0bffa17 	ldw	r2,-24(fp)
811301dc:	e0ffff17 	ldw	r3,-4(fp)
811301e0:	1885883a 	add	r2,r3,r2
811301e4:	10800003 	ldbu	r2,0(r2)
811301e8:	10803fcc 	andi	r2,r2,255
811301ec:	1080201c 	xori	r2,r2,128
811301f0:	10bfe004 	addi	r2,r2,-128
811301f4:	10800be0 	cmpeqi	r2,r2,47
811301f8:	1000281e 	bne	r2,zero,8113029c <check_file_name_for_FAT16_compliance+0x164>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
811301fc:	e0fffa17 	ldw	r3,-24(fp)
81130200:	e0bffc17 	ldw	r2,-16(fp)
81130204:	1885c83a 	sub	r2,r3,r2
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
81130208:	10800258 	cmpnei	r2,r2,9
8113020c:	1000091e 	bne	r2,zero,81130234 <check_file_name_for_FAT16_compliance+0xfc>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
81130210:	e0bffa17 	ldw	r2,-24(fp)
81130214:	e0ffff17 	ldw	r3,-4(fp)
81130218:	1885883a 	add	r2,r3,r2
8113021c:	10800003 	ldbu	r2,0(r2)
81130220:	10803fcc 	andi	r2,r2,255
81130224:	1080201c 	xori	r2,r2,128
81130228:	10bfe004 	addi	r2,r2,-128
8113022c:	10800b98 	cmpnei	r2,r2,46
81130230:	10001a1e 	bne	r2,zero,8113029c <check_file_name_for_FAT16_compliance+0x164>
81130234:	e0fffb17 	ldw	r3,-20(fp)
81130238:	e0bffc17 	ldw	r2,-16(fp)
8113023c:	18801926 	beq	r3,r2,811302a4 <check_file_name_for_FAT16_compliance+0x16c>
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
81130240:	e0fffa17 	ldw	r3,-24(fp)
81130244:	e0bffc17 	ldw	r2,-16(fp)
81130248:	1885c83a 	sub	r2,r3,r2
8113024c:	10800110 	cmplti	r2,r2,4
81130250:	1000141e 	bne	r2,zero,811302a4 <check_file_name_for_FAT16_compliance+0x16c>
             (file_name[index] != '\\') && (file_name[index] != '/'))
81130254:	e0bffa17 	ldw	r2,-24(fp)
81130258:	e0ffff17 	ldw	r3,-4(fp)
8113025c:	1885883a 	add	r2,r3,r2
81130260:	10800003 	ldbu	r2,0(r2)
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
            ((index - last_period == 9) && (file_name[index] != '.')) ||
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
81130264:	10803fcc 	andi	r2,r2,255
81130268:	1080201c 	xori	r2,r2,128
8113026c:	10bfe004 	addi	r2,r2,-128
81130270:	10801720 	cmpeqi	r2,r2,92
81130274:	10000b1e 	bne	r2,zero,811302a4 <check_file_name_for_FAT16_compliance+0x16c>
             (file_name[index] != '\\') && (file_name[index] != '/'))
81130278:	e0bffa17 	ldw	r2,-24(fp)
8113027c:	e0ffff17 	ldw	r3,-4(fp)
81130280:	1885883a 	add	r2,r3,r2
81130284:	10800003 	ldbu	r2,0(r2)
81130288:	10803fcc 	andi	r2,r2,255
8113028c:	1080201c 	xori	r2,r2,128
81130290:	10bfe004 	addi	r2,r2,-128
81130294:	10800be0 	cmpeqi	r2,r2,47
81130298:	1000021e 	bne	r2,zero,811302a4 <check_file_name_for_FAT16_compliance+0x16c>
           )
        {
            result = false;
8113029c:	e03ffd15 	stw	zero,-12(fp)
            break;
811302a0:	00002706 	br	81130340 <check_file_name_for_FAT16_compliance+0x208>
        }
        if ((file_name[index] == '\\') || (file_name[index] == '/'))
811302a4:	e0bffa17 	ldw	r2,-24(fp)
811302a8:	e0ffff17 	ldw	r3,-4(fp)
811302ac:	1885883a 	add	r2,r3,r2
811302b0:	10800003 	ldbu	r2,0(r2)
811302b4:	10803fcc 	andi	r2,r2,255
811302b8:	1080201c 	xori	r2,r2,128
811302bc:	10bfe004 	addi	r2,r2,-128
811302c0:	10801720 	cmpeqi	r2,r2,92
811302c4:	1000091e 	bne	r2,zero,811302ec <check_file_name_for_FAT16_compliance+0x1b4>
811302c8:	e0bffa17 	ldw	r2,-24(fp)
811302cc:	e0ffff17 	ldw	r3,-4(fp)
811302d0:	1885883a 	add	r2,r3,r2
811302d4:	10800003 	ldbu	r2,0(r2)
811302d8:	10803fcc 	andi	r2,r2,255
811302dc:	1080201c 	xori	r2,r2,128
811302e0:	10bfe004 	addi	r2,r2,-128
811302e4:	10800bd8 	cmpnei	r2,r2,47
811302e8:	1000041e 	bne	r2,zero,811302fc <check_file_name_for_FAT16_compliance+0x1c4>
        {
            last_period = index;
811302ec:	e0bffa17 	ldw	r2,-24(fp)
811302f0:	e0bffc15 	stw	r2,-16(fp)
            last_dir_break_position = index;
811302f4:	e0bffa17 	ldw	r2,-24(fp)
811302f8:	e0bffb15 	stw	r2,-20(fp)
        }
        if (file_name[index] == '.')
811302fc:	e0bffa17 	ldw	r2,-24(fp)
81130300:	e0ffff17 	ldw	r3,-4(fp)
81130304:	1885883a 	add	r2,r3,r2
81130308:	10800003 	ldbu	r2,0(r2)
8113030c:	10803fcc 	andi	r2,r2,255
81130310:	1080201c 	xori	r2,r2,128
81130314:	10bfe004 	addi	r2,r2,-128
81130318:	10800b98 	cmpnei	r2,r2,46
8113031c:	1000021e 	bne	r2,zero,81130328 <check_file_name_for_FAT16_compliance+0x1f0>
        {
            last_period = index;
81130320:	e0bffa17 	ldw	r2,-24(fp)
81130324:	e0bffc15 	stw	r2,-16(fp)
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
81130328:	e0bffa17 	ldw	r2,-24(fp)
8113032c:	10800044 	addi	r2,r2,1
81130330:	e0bffa15 	stw	r2,-24(fp)
81130334:	e0fffa17 	ldw	r3,-24(fp)
81130338:	e0bffe17 	ldw	r2,-8(fp)
8113033c:	18bf9016 	blt	r3,r2,81130180 <__reset+0xfb110180>
        if (file_name[index] == '.')
        {
            last_period = index;
        }
    }
    if ((file_name[length-1] == '\\') || (file_name[length-1] == '/'))
81130340:	e0bffe17 	ldw	r2,-8(fp)
81130344:	10bfffc4 	addi	r2,r2,-1
81130348:	e0ffff17 	ldw	r3,-4(fp)
8113034c:	1885883a 	add	r2,r3,r2
81130350:	10800003 	ldbu	r2,0(r2)
81130354:	10803fcc 	andi	r2,r2,255
81130358:	1080201c 	xori	r2,r2,128
8113035c:	10bfe004 	addi	r2,r2,-128
81130360:	10801720 	cmpeqi	r2,r2,92
81130364:	10000a1e 	bne	r2,zero,81130390 <check_file_name_for_FAT16_compliance+0x258>
81130368:	e0bffe17 	ldw	r2,-8(fp)
8113036c:	10bfffc4 	addi	r2,r2,-1
81130370:	e0ffff17 	ldw	r3,-4(fp)
81130374:	1885883a 	add	r2,r3,r2
81130378:	10800003 	ldbu	r2,0(r2)
8113037c:	10803fcc 	andi	r2,r2,255
81130380:	1080201c 	xori	r2,r2,128
81130384:	10bfe004 	addi	r2,r2,-128
81130388:	10800bd8 	cmpnei	r2,r2,47
8113038c:	1000011e 	bne	r2,zero,81130394 <check_file_name_for_FAT16_compliance+0x25c>
    {
        result = false;
81130390:	e03ffd15 	stw	zero,-12(fp)
    }
    return result;
81130394:	e0bffd17 	ldw	r2,-12(fp)
}
81130398:	e037883a 	mov	sp,fp
8113039c:	dfc00117 	ldw	ra,4(sp)
811303a0:	df000017 	ldw	fp,0(sp)
811303a4:	dec00204 	addi	sp,sp,8
811303a8:	f800283a 	ret

811303ac <get_dir_divider_location>:


int get_dir_divider_location(char *name)
// Find a directory divider location.
{
811303ac:	defffb04 	addi	sp,sp,-20
811303b0:	de00012e 	bgeu	sp,et,811303b8 <get_dir_divider_location+0xc>
811303b4:	003b68fa 	trap	3
811303b8:	dfc00415 	stw	ra,16(sp)
811303bc:	df000315 	stw	fp,12(sp)
811303c0:	df000304 	addi	fp,sp,12
811303c4:	e13fff15 	stw	r4,-4(fp)
    int index = 0;
811303c8:	e03ffd15 	stw	zero,-12(fp)
    int length = strlen(name);
811303cc:	e13fff17 	ldw	r4,-4(fp)
811303d0:	110ffb80 	call	8110ffb8 <strlen>
811303d4:	e0bffe15 	stw	r2,-8(fp)
    
    for(index = 0; index < length; index++)
811303d8:	e03ffd15 	stw	zero,-12(fp)
811303dc:	00001506 	br	81130434 <get_dir_divider_location+0x88>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
811303e0:	e0bffd17 	ldw	r2,-12(fp)
811303e4:	e0ffff17 	ldw	r3,-4(fp)
811303e8:	1885883a 	add	r2,r3,r2
811303ec:	10800003 	ldbu	r2,0(r2)
811303f0:	10803fcc 	andi	r2,r2,255
811303f4:	1080201c 	xori	r2,r2,128
811303f8:	10bfe004 	addi	r2,r2,-128
811303fc:	10801720 	cmpeqi	r2,r2,92
81130400:	10000f1e 	bne	r2,zero,81130440 <get_dir_divider_location+0x94>
81130404:	e0bffd17 	ldw	r2,-12(fp)
81130408:	e0ffff17 	ldw	r3,-4(fp)
8113040c:	1885883a 	add	r2,r3,r2
81130410:	10800003 	ldbu	r2,0(r2)
81130414:	10803fcc 	andi	r2,r2,255
81130418:	1080201c 	xori	r2,r2,128
8113041c:	10bfe004 	addi	r2,r2,-128
81130420:	10800be0 	cmpeqi	r2,r2,47
81130424:	1000061e 	bne	r2,zero,81130440 <get_dir_divider_location+0x94>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
81130428:	e0bffd17 	ldw	r2,-12(fp)
8113042c:	10800044 	addi	r2,r2,1
81130430:	e0bffd15 	stw	r2,-12(fp)
81130434:	e0fffd17 	ldw	r3,-12(fp)
81130438:	e0bffe17 	ldw	r2,-8(fp)
8113043c:	18bfe816 	blt	r3,r2,811303e0 <__reset+0xfb1103e0>
        {
            break;
        }
    }
    
    if (index == length)
81130440:	e0fffd17 	ldw	r3,-12(fp)
81130444:	e0bffe17 	ldw	r2,-8(fp)
81130448:	1880021e 	bne	r3,r2,81130454 <get_dir_divider_location+0xa8>
    {
        index = -1;
8113044c:	00bfffc4 	movi	r2,-1
81130450:	e0bffd15 	stw	r2,-12(fp)
    }
    
    return index;
81130454:	e0bffd17 	ldw	r2,-12(fp)
}
81130458:	e037883a 	mov	sp,fp
8113045c:	dfc00117 	ldw	ra,4(sp)
81130460:	df000017 	ldw	fp,0(sp)
81130464:	dec00204 	addi	sp,sp,8
81130468:	f800283a 	ret

8113046c <match_file_record_to_name_ext>:


bool match_file_record_to_name_ext(t_file_record *file_record, char *name, char *extension)
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
8113046c:	defffa04 	addi	sp,sp,-24
81130470:	de00012e 	bgeu	sp,et,81130478 <match_file_record_to_name_ext+0xc>
81130474:	003b68fa 	trap	3
81130478:	df000515 	stw	fp,20(sp)
8113047c:	df000504 	addi	fp,sp,20
81130480:	e13ffd15 	stw	r4,-12(fp)
81130484:	e17ffe15 	stw	r5,-8(fp)
81130488:	e1bfff15 	stw	r6,-4(fp)
    bool match = true;
8113048c:	00800044 	movi	r2,1
81130490:	e0bffb15 	stw	r2,-20(fp)
	int index;

    for (index = 0; index < 8; index++)
81130494:	e03ffc15 	stw	zero,-16(fp)
81130498:	00004606 	br	811305b4 <match_file_record_to_name_ext+0x148>
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
8113049c:	e0fffd17 	ldw	r3,-12(fp)
811304a0:	e0bffc17 	ldw	r2,-16(fp)
811304a4:	1885883a 	add	r2,r3,r2
811304a8:	10800003 	ldbu	r2,0(r2)
811304ac:	10803fcc 	andi	r2,r2,255
811304b0:	10801870 	cmpltui	r2,r2,97
811304b4:	1000101e 	bne	r2,zero,811304f8 <match_file_record_to_name_ext+0x8c>
811304b8:	e0fffd17 	ldw	r3,-12(fp)
811304bc:	e0bffc17 	ldw	r2,-16(fp)
811304c0:	1885883a 	add	r2,r3,r2
811304c4:	10800003 	ldbu	r2,0(r2)
811304c8:	10803fcc 	andi	r2,r2,255
811304cc:	10801ee8 	cmpgeui	r2,r2,123
811304d0:	1000091e 	bne	r2,zero,811304f8 <match_file_record_to_name_ext+0x8c>
811304d4:	e0fffd17 	ldw	r3,-12(fp)
811304d8:	e0bffc17 	ldw	r2,-16(fp)
811304dc:	1885883a 	add	r2,r3,r2
811304e0:	10800003 	ldbu	r2,0(r2)
811304e4:	10bff804 	addi	r2,r2,-32
811304e8:	10c03fcc 	andi	r3,r2,255
811304ec:	18c0201c 	xori	r3,r3,128
811304f0:	18ffe004 	addi	r3,r3,-128
811304f4:	00000706 	br	81130514 <match_file_record_to_name_ext+0xa8>
811304f8:	e0fffd17 	ldw	r3,-12(fp)
811304fc:	e0bffc17 	ldw	r2,-16(fp)
81130500:	1885883a 	add	r2,r3,r2
81130504:	10800003 	ldbu	r2,0(r2)
81130508:	10c03fcc 	andi	r3,r2,255
8113050c:	18c0201c 	xori	r3,r3,128
81130510:	18ffe004 	addi	r3,r3,-128
81130514:	e0bffc17 	ldw	r2,-16(fp)
81130518:	e13ffe17 	ldw	r4,-8(fp)
8113051c:	2085883a 	add	r2,r4,r2
81130520:	10800003 	ldbu	r2,0(r2)
81130524:	10803fcc 	andi	r2,r2,255
81130528:	1080201c 	xori	r2,r2,128
8113052c:	10bfe004 	addi	r2,r2,-128
81130530:	10801850 	cmplti	r2,r2,97
81130534:	1000121e 	bne	r2,zero,81130580 <match_file_record_to_name_ext+0x114>
81130538:	e0bffc17 	ldw	r2,-16(fp)
8113053c:	e13ffe17 	ldw	r4,-8(fp)
81130540:	2085883a 	add	r2,r4,r2
81130544:	10800003 	ldbu	r2,0(r2)
81130548:	10803fcc 	andi	r2,r2,255
8113054c:	1080201c 	xori	r2,r2,128
81130550:	10bfe004 	addi	r2,r2,-128
81130554:	10801ec8 	cmpgei	r2,r2,123
81130558:	1000091e 	bne	r2,zero,81130580 <match_file_record_to_name_ext+0x114>
8113055c:	e0bffc17 	ldw	r2,-16(fp)
81130560:	e13ffe17 	ldw	r4,-8(fp)
81130564:	2085883a 	add	r2,r4,r2
81130568:	10800003 	ldbu	r2,0(r2)
8113056c:	10bff804 	addi	r2,r2,-32
81130570:	10803fcc 	andi	r2,r2,255
81130574:	1080201c 	xori	r2,r2,128
81130578:	10bfe004 	addi	r2,r2,-128
8113057c:	00000706 	br	8113059c <match_file_record_to_name_ext+0x130>
81130580:	e0bffc17 	ldw	r2,-16(fp)
81130584:	e13ffe17 	ldw	r4,-8(fp)
81130588:	2085883a 	add	r2,r4,r2
8113058c:	10800003 	ldbu	r2,0(r2)
81130590:	10803fcc 	andi	r2,r2,255
81130594:	1080201c 	xori	r2,r2,128
81130598:	10bfe004 	addi	r2,r2,-128
8113059c:	18800226 	beq	r3,r2,811305a8 <match_file_record_to_name_ext+0x13c>
        {
            match = false;
811305a0:	e03ffb15 	stw	zero,-20(fp)
			break;
811305a4:	00000606 	br	811305c0 <match_file_record_to_name_ext+0x154>
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
811305a8:	e0bffc17 	ldw	r2,-16(fp)
811305ac:	10800044 	addi	r2,r2,1
811305b0:	e0bffc15 	stw	r2,-16(fp)
811305b4:	e0bffc17 	ldw	r2,-16(fp)
811305b8:	10800210 	cmplti	r2,r2,8
811305bc:	103fb71e 	bne	r2,zero,8113049c <__reset+0xfb11049c>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
811305c0:	e03ffc15 	stw	zero,-16(fp)
811305c4:	00004a06 	br	811306f0 <match_file_record_to_name_ext+0x284>
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
811305c8:	e0fffd17 	ldw	r3,-12(fp)
811305cc:	e0bffc17 	ldw	r2,-16(fp)
811305d0:	1885883a 	add	r2,r3,r2
811305d4:	10800204 	addi	r2,r2,8
811305d8:	10800003 	ldbu	r2,0(r2)
811305dc:	10803fcc 	andi	r2,r2,255
811305e0:	10801870 	cmpltui	r2,r2,97
811305e4:	1000121e 	bne	r2,zero,81130630 <match_file_record_to_name_ext+0x1c4>
811305e8:	e0fffd17 	ldw	r3,-12(fp)
811305ec:	e0bffc17 	ldw	r2,-16(fp)
811305f0:	1885883a 	add	r2,r3,r2
811305f4:	10800204 	addi	r2,r2,8
811305f8:	10800003 	ldbu	r2,0(r2)
811305fc:	10803fcc 	andi	r2,r2,255
81130600:	10801ee8 	cmpgeui	r2,r2,123
81130604:	10000a1e 	bne	r2,zero,81130630 <match_file_record_to_name_ext+0x1c4>
81130608:	e0fffd17 	ldw	r3,-12(fp)
8113060c:	e0bffc17 	ldw	r2,-16(fp)
81130610:	1885883a 	add	r2,r3,r2
81130614:	10800204 	addi	r2,r2,8
81130618:	10800003 	ldbu	r2,0(r2)
8113061c:	10bff804 	addi	r2,r2,-32
81130620:	10c03fcc 	andi	r3,r2,255
81130624:	18c0201c 	xori	r3,r3,128
81130628:	18ffe004 	addi	r3,r3,-128
8113062c:	00000806 	br	81130650 <match_file_record_to_name_ext+0x1e4>
81130630:	e0fffd17 	ldw	r3,-12(fp)
81130634:	e0bffc17 	ldw	r2,-16(fp)
81130638:	1885883a 	add	r2,r3,r2
8113063c:	10800204 	addi	r2,r2,8
81130640:	10800003 	ldbu	r2,0(r2)
81130644:	10c03fcc 	andi	r3,r2,255
81130648:	18c0201c 	xori	r3,r3,128
8113064c:	18ffe004 	addi	r3,r3,-128
81130650:	e0bffc17 	ldw	r2,-16(fp)
81130654:	e13fff17 	ldw	r4,-4(fp)
81130658:	2085883a 	add	r2,r4,r2
8113065c:	10800003 	ldbu	r2,0(r2)
81130660:	10803fcc 	andi	r2,r2,255
81130664:	1080201c 	xori	r2,r2,128
81130668:	10bfe004 	addi	r2,r2,-128
8113066c:	10801850 	cmplti	r2,r2,97
81130670:	1000121e 	bne	r2,zero,811306bc <match_file_record_to_name_ext+0x250>
81130674:	e0bffc17 	ldw	r2,-16(fp)
81130678:	e13fff17 	ldw	r4,-4(fp)
8113067c:	2085883a 	add	r2,r4,r2
81130680:	10800003 	ldbu	r2,0(r2)
81130684:	10803fcc 	andi	r2,r2,255
81130688:	1080201c 	xori	r2,r2,128
8113068c:	10bfe004 	addi	r2,r2,-128
81130690:	10801ec8 	cmpgei	r2,r2,123
81130694:	1000091e 	bne	r2,zero,811306bc <match_file_record_to_name_ext+0x250>
81130698:	e0bffc17 	ldw	r2,-16(fp)
8113069c:	e13fff17 	ldw	r4,-4(fp)
811306a0:	2085883a 	add	r2,r4,r2
811306a4:	10800003 	ldbu	r2,0(r2)
811306a8:	10bff804 	addi	r2,r2,-32
811306ac:	10803fcc 	andi	r2,r2,255
811306b0:	1080201c 	xori	r2,r2,128
811306b4:	10bfe004 	addi	r2,r2,-128
811306b8:	00000706 	br	811306d8 <match_file_record_to_name_ext+0x26c>
811306bc:	e0bffc17 	ldw	r2,-16(fp)
811306c0:	e13fff17 	ldw	r4,-4(fp)
811306c4:	2085883a 	add	r2,r4,r2
811306c8:	10800003 	ldbu	r2,0(r2)
811306cc:	10803fcc 	andi	r2,r2,255
811306d0:	1080201c 	xori	r2,r2,128
811306d4:	10bfe004 	addi	r2,r2,-128
811306d8:	18800226 	beq	r3,r2,811306e4 <match_file_record_to_name_ext+0x278>
        {
            match = false;
811306dc:	e03ffb15 	stw	zero,-20(fp)
			break;
811306e0:	00000606 	br	811306fc <match_file_record_to_name_ext+0x290>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
811306e4:	e0bffc17 	ldw	r2,-16(fp)
811306e8:	10800044 	addi	r2,r2,1
811306ec:	e0bffc15 	stw	r2,-16(fp)
811306f0:	e0bffc17 	ldw	r2,-16(fp)
811306f4:	108000d0 	cmplti	r2,r2,3
811306f8:	103fb31e 	bne	r2,zero,811305c8 <__reset+0xfb1105c8>
        {
            match = false;
			break;
        }
    }
	return match;
811306fc:	e0bffb17 	ldw	r2,-20(fp)
}
81130700:	e037883a 	mov	sp,fp
81130704:	df000017 	ldw	fp,0(sp)
81130708:	dec00104 	addi	sp,sp,4
8113070c:	f800283a 	ret

81130710 <get_home_directory_cluster_for_file>:


bool get_home_directory_cluster_for_file(char *file_name, int *home_directory_cluster, t_file_record *file_record)
// Scan the directories in given in the file name and find the root directory for the file.
{
81130710:	deffe704 	addi	sp,sp,-100
81130714:	de00012e 	bgeu	sp,et,8113071c <get_home_directory_cluster_for_file+0xc>
81130718:	003b68fa 	trap	3
8113071c:	dfc01815 	stw	ra,96(sp)
81130720:	df001715 	stw	fp,92(sp)
81130724:	df001704 	addi	fp,sp,92
81130728:	e13ffd15 	stw	r4,-12(fp)
8113072c:	e17ffe15 	stw	r5,-8(fp)
81130730:	e1bfff15 	stw	r6,-4(fp)
    bool result = false;
81130734:	e03fe915 	stw	zero,-92(fp)
    int home_dir_cluster = 0;
81130738:	e03fea15 	stw	zero,-88(fp)
    int location, index;
    int start_location = 0;
8113073c:	e03fed15 	stw	zero,-76(fp)
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
81130740:	e13ffd17 	ldw	r4,-12(fp)
81130744:	11303ac0 	call	811303ac <get_dir_divider_location>
81130748:	e0bfeb15 	stw	r2,-84(fp)
    while (location > 0)
8113074c:	00012f06 	br	81130c0c <get_home_directory_cluster_for_file+0x4fc>
    {
        char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
81130750:	00800804 	movi	r2,32
81130754:	e0bff905 	stb	r2,-28(fp)
81130758:	00800804 	movi	r2,32
8113075c:	e0bff945 	stb	r2,-27(fp)
81130760:	00800804 	movi	r2,32
81130764:	e0bff985 	stb	r2,-26(fp)
81130768:	00800804 	movi	r2,32
8113076c:	e0bff9c5 	stb	r2,-25(fp)
81130770:	00800804 	movi	r2,32
81130774:	e0bffa05 	stb	r2,-24(fp)
81130778:	00800804 	movi	r2,32
8113077c:	e0bffa45 	stb	r2,-23(fp)
81130780:	00800804 	movi	r2,32
81130784:	e0bffa85 	stb	r2,-22(fp)
81130788:	00800804 	movi	r2,32
8113078c:	e0bffac5 	stb	r2,-21(fp)
        char extension[3] = { ' ', ' ', ' ' };
81130790:	00800804 	movi	r2,32
81130794:	e0bffb05 	stb	r2,-20(fp)
81130798:	00800804 	movi	r2,32
8113079c:	e0bffb45 	stb	r2,-19(fp)
811307a0:	00800804 	movi	r2,32
811307a4:	e0bffb85 	stb	r2,-18(fp)
        int ext_index = -1;
811307a8:	00bfffc4 	movi	r2,-1
811307ac:	e0bfee15 	stw	r2,-72(fp)
        int new_cluster = home_dir_cluster;
811307b0:	e0bfea17 	ldw	r2,-88(fp)
811307b4:	e0bfef15 	stw	r2,-68(fp)
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
811307b8:	e03fec15 	stw	zero,-80(fp)
811307bc:	00002d06 	br	81130874 <get_home_directory_cluster_for_file+0x164>
        {
            if (file_name[index+start_location] == '.')
811307c0:	e0ffec17 	ldw	r3,-80(fp)
811307c4:	e0bfed17 	ldw	r2,-76(fp)
811307c8:	1885883a 	add	r2,r3,r2
811307cc:	1007883a 	mov	r3,r2
811307d0:	e0bffd17 	ldw	r2,-12(fp)
811307d4:	10c5883a 	add	r2,r2,r3
811307d8:	10800003 	ldbu	r2,0(r2)
811307dc:	10803fcc 	andi	r2,r2,255
811307e0:	1080201c 	xori	r2,r2,128
811307e4:	10bfe004 	addi	r2,r2,-128
811307e8:	10800b98 	cmpnei	r2,r2,46
811307ec:	1000031e 	bne	r2,zero,811307fc <get_home_directory_cluster_for_file+0xec>
            {
                ext_index = index;
811307f0:	e0bfec17 	ldw	r2,-80(fp)
811307f4:	e0bfee15 	stw	r2,-72(fp)
811307f8:	00001b06 	br	81130868 <get_home_directory_cluster_for_file+0x158>
            }
            else if (ext_index < 0)
811307fc:	e0bfee17 	ldw	r2,-72(fp)
81130800:	10000c0e 	bge	r2,zero,81130834 <get_home_directory_cluster_for_file+0x124>
            {
                name[index] = file_name[index+start_location];
81130804:	e0ffec17 	ldw	r3,-80(fp)
81130808:	e0bfed17 	ldw	r2,-76(fp)
8113080c:	1885883a 	add	r2,r3,r2
81130810:	1007883a 	mov	r3,r2
81130814:	e0bffd17 	ldw	r2,-12(fp)
81130818:	10c5883a 	add	r2,r2,r3
8113081c:	10c00003 	ldbu	r3,0(r2)
81130820:	e13ff904 	addi	r4,fp,-28
81130824:	e0bfec17 	ldw	r2,-80(fp)
81130828:	2085883a 	add	r2,r4,r2
8113082c:	10c00005 	stb	r3,0(r2)
81130830:	00000d06 	br	81130868 <get_home_directory_cluster_for_file+0x158>
            }
            else
            {
                extension[index-ext_index] = file_name[index+start_location];
81130834:	e0ffec17 	ldw	r3,-80(fp)
81130838:	e0bfee17 	ldw	r2,-72(fp)
8113083c:	1885c83a 	sub	r2,r3,r2
81130840:	e13fec17 	ldw	r4,-80(fp)
81130844:	e0ffed17 	ldw	r3,-76(fp)
81130848:	20c7883a 	add	r3,r4,r3
8113084c:	1809883a 	mov	r4,r3
81130850:	e0fffd17 	ldw	r3,-12(fp)
81130854:	1907883a 	add	r3,r3,r4
81130858:	18c00003 	ldbu	r3,0(r3)
8113085c:	e13ffb04 	addi	r4,fp,-20
81130860:	2085883a 	add	r2,r4,r2
81130864:	10c00005 	stb	r3,0(r2)
        char extension[3] = { ' ', ' ', ' ' };
        int ext_index = -1;
        int new_cluster = home_dir_cluster;
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
81130868:	e0bfec17 	ldw	r2,-80(fp)
8113086c:	10800044 	addi	r2,r2,1
81130870:	e0bfec15 	stw	r2,-80(fp)
81130874:	e0ffec17 	ldw	r3,-80(fp)
81130878:	e0bfeb17 	ldw	r2,-84(fp)
8113087c:	18bfd016 	blt	r3,r2,811307c0 <__reset+0xfb1107c0>
            {
                extension[index-ext_index] = file_name[index+start_location];
            }
        }
        
        if (home_dir_cluster == 0)
81130880:	e0bfea17 	ldw	r2,-88(fp)
81130884:	10005c1e 	bne	r2,zero,811309f8 <get_home_directory_cluster_for_file+0x2e8>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
81130888:	00a045b4 	movhi	r2,33046
8113088c:	1094e204 	addi	r2,r2,21384
81130890:	1080050b 	ldhu	r2,20(r2)
81130894:	10bfffcc 	andi	r2,r2,65535
81130898:	1006917a 	slli	r3,r2,5
8113089c:	00a045b4 	movhi	r2,33046
811308a0:	1094e204 	addi	r2,r2,21384
811308a4:	1080030b 	ldhu	r2,12(r2)
811308a8:	10bfffcc 	andi	r2,r2,65535
811308ac:	1885283a 	div	r2,r3,r2
811308b0:	e0bff715 	stw	r2,-36(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
811308b4:	e03ff015 	stw	zero,-64(fp)
811308b8:	00003b06 	br	811309a8 <get_home_directory_cluster_for_file+0x298>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
811308bc:	00a045b4 	movhi	r2,33046
811308c0:	1094e204 	addi	r2,r2,21384
811308c4:	10c01317 	ldw	r3,76(r2)
811308c8:	e0bff017 	ldw	r2,-64(fp)
811308cc:	1885883a 	add	r2,r3,r2
811308d0:	1007883a 	mov	r3,r2
811308d4:	d0a09f17 	ldw	r2,-32132(gp)
811308d8:	100b883a 	mov	r5,r2
811308dc:	1809883a 	mov	r4,r3
811308e0:	112efa80 	call	8112efa8 <Read_Sector_Data>
811308e4:	10003426 	beq	r2,zero,811309b8 <get_home_directory_cluster_for_file+0x2a8>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
811308e8:	e03ff115 	stw	zero,-60(fp)
811308ec:	00002506 	br	81130984 <get_home_directory_cluster_for_file+0x274>
                    {
                       
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
811308f0:	e0bff117 	ldw	r2,-60(fp)
811308f4:	1004917a 	slli	r2,r2,5
811308f8:	e0fff017 	ldw	r3,-64(fp)
811308fc:	180f883a 	mov	r7,r3
81130900:	000d883a 	mov	r6,zero
81130904:	e17fff17 	ldw	r5,-4(fp)
81130908:	1009883a 	mov	r4,r2
8113090c:	112f3d80 	call	8112f3d8 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
81130910:	e0bfff17 	ldw	r2,-4(fp)
81130914:	10800003 	ldbu	r2,0(r2)
81130918:	10803fcc 	andi	r2,r2,255
8113091c:	10803960 	cmpeqi	r2,r2,229
81130920:	1000151e 	bne	r2,zero,81130978 <get_home_directory_cluster_for_file+0x268>
81130924:	e0bfff17 	ldw	r2,-4(fp)
81130928:	10800003 	ldbu	r2,0(r2)
8113092c:	10803fcc 	andi	r2,r2,255
81130930:	10001126 	beq	r2,zero,81130978 <get_home_directory_cluster_for_file+0x268>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
81130934:	e0fffb04 	addi	r3,fp,-20
81130938:	e0bff904 	addi	r2,fp,-28
8113093c:	180d883a 	mov	r6,r3
81130940:	100b883a 	mov	r5,r2
81130944:	e13fff17 	ldw	r4,-4(fp)
81130948:	113046c0 	call	8113046c <match_file_record_to_name_ext>
8113094c:	e0bff815 	stw	r2,-32(fp)
                            if (match)
81130950:	e0bff817 	ldw	r2,-32(fp)
81130954:	10000826 	beq	r2,zero,81130978 <get_home_directory_cluster_for_file+0x268>
                            {
                                new_cluster = file_record->start_cluster_index;
81130958:	e0bfff17 	ldw	r2,-4(fp)
8113095c:	1080058b 	ldhu	r2,22(r2)
81130960:	10bfffcc 	andi	r2,r2,65535
81130964:	e0bfef15 	stw	r2,-68(fp)
                                file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
81130968:	e0bfff17 	ldw	r2,-4(fp)
8113096c:	00c00044 	movi	r3,1
81130970:	10c00a15 	stw	r3,40(r2)
                                break;
81130974:	00000606 	br	81130990 <get_home_directory_cluster_for_file+0x280>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
81130978:	e0bff117 	ldw	r2,-60(fp)
8113097c:	10800044 	addi	r2,r2,1
81130980:	e0bff115 	stw	r2,-60(fp)
81130984:	e0bff117 	ldw	r2,-60(fp)
81130988:	10800410 	cmplti	r2,r2,16
8113098c:	103fd81e 	bne	r2,zero,811308f0 <__reset+0xfb1108f0>
                }
                else
                {
                    break;
                }
                if (new_cluster != home_dir_cluster)
81130990:	e0ffef17 	ldw	r3,-68(fp)
81130994:	e0bfea17 	ldw	r2,-88(fp)
81130998:	1880091e 	bne	r3,r2,811309c0 <get_home_directory_cluster_for_file+0x2b0>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
8113099c:	e0bff017 	ldw	r2,-64(fp)
811309a0:	10800044 	addi	r2,r2,1
811309a4:	e0bff015 	stw	r2,-64(fp)
811309a8:	e0fff017 	ldw	r3,-64(fp)
811309ac:	e0bff717 	ldw	r2,-36(fp)
811309b0:	18bfc216 	blt	r3,r2,811308bc <__reset+0xfb1108bc>
811309b4:	00000306 	br	811309c4 <get_home_directory_cluster_for_file+0x2b4>
                        }
                    }
                }
                else
                {
                    break;
811309b8:	0001883a 	nop
811309bc:	00000106 	br	811309c4 <get_home_directory_cluster_for_file+0x2b4>
                }
                if (new_cluster != home_dir_cluster)
                {
                    break;
811309c0:	0001883a 	nop
                }
            }
            if (new_cluster != home_dir_cluster)
811309c4:	e0ffef17 	ldw	r3,-68(fp)
811309c8:	e0bfea17 	ldw	r2,-88(fp)
811309cc:	18800826 	beq	r3,r2,811309f0 <get_home_directory_cluster_for_file+0x2e0>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
811309d0:	e0bfef17 	ldw	r2,-68(fp)
811309d4:	e0bfea15 	stw	r2,-88(fp)
                start_location = start_location+location+1;
811309d8:	e0ffed17 	ldw	r3,-76(fp)
811309dc:	e0bfeb17 	ldw	r2,-84(fp)
811309e0:	1885883a 	add	r2,r3,r2
811309e4:	10800044 	addi	r2,r2,1
811309e8:	e0bfed15 	stw	r2,-76(fp)
811309ec:	00007d06 	br	81130be4 <get_home_directory_cluster_for_file+0x4d4>
            }
            else
            {
                // Directory path is invalid. 
                return false;
811309f0:	0005883a 	mov	r2,zero
811309f4:	00009106 	br	81130c3c <get_home_directory_cluster_for_file+0x52c>
            }
        } else {
            // This is a subdirectory that can have any number of elements. So scan through it as though it was a file
            // and see if you can find the directory of interest.
            int cluster = home_dir_cluster;
811309f8:	e0bfea17 	ldw	r2,-88(fp)
811309fc:	e0bff415 	stw	r2,-48(fp)
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
81130a00:	e0bff417 	ldw	r2,-48(fp)
81130a04:	10ffff84 	addi	r3,r2,-2
81130a08:	00a045b4 	movhi	r2,33046
81130a0c:	1094e204 	addi	r2,r2,21384
81130a10:	10800383 	ldbu	r2,14(r2)
81130a14:	10803fcc 	andi	r2,r2,255
81130a18:	1885383a 	mul	r2,r3,r2
81130a1c:	1007883a 	mov	r3,r2
81130a20:	00a045b4 	movhi	r2,33046
81130a24:	1094e204 	addi	r2,r2,21384
81130a28:	10801417 	ldw	r2,80(r2)
81130a2c:	1885883a 	add	r2,r3,r2
81130a30:	e0bff515 	stw	r2,-44(fp)
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
81130a34:	e03ff215 	stw	zero,-56(fp)
81130a38:	00003606 	br	81130b14 <get_home_directory_cluster_for_file+0x404>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
81130a3c:	e0fff217 	ldw	r3,-56(fp)
81130a40:	e0bff517 	ldw	r2,-44(fp)
81130a44:	1885883a 	add	r2,r3,r2
81130a48:	d0e09f17 	ldw	r3,-32132(gp)
81130a4c:	180b883a 	mov	r5,r3
81130a50:	1009883a 	mov	r4,r2
81130a54:	112efa80 	call	8112efa8 <Read_Sector_Data>
81130a58:	10003526 	beq	r2,zero,81130b30 <get_home_directory_cluster_for_file+0x420>
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
81130a5c:	e03ff315 	stw	zero,-52(fp)
81130a60:	00002306 	br	81130af0 <get_home_directory_cluster_for_file+0x3e0>
                        {                         
                            // Read file record.
                            Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
81130a64:	e0bff317 	ldw	r2,-52(fp)
81130a68:	1004917a 	slli	r2,r2,5
81130a6c:	e0fff417 	ldw	r3,-48(fp)
81130a70:	e13ff217 	ldw	r4,-56(fp)
81130a74:	200f883a 	mov	r7,r4
81130a78:	180d883a 	mov	r6,r3
81130a7c:	e17fff17 	ldw	r5,-4(fp)
81130a80:	1009883a 	mov	r4,r2
81130a84:	112f3d80 	call	8112f3d8 <Read_File_Record_At_Offset>
                            if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
81130a88:	e0bfff17 	ldw	r2,-4(fp)
81130a8c:	10800003 	ldbu	r2,0(r2)
81130a90:	10803fcc 	andi	r2,r2,255
81130a94:	10803960 	cmpeqi	r2,r2,229
81130a98:	1000121e 	bne	r2,zero,81130ae4 <get_home_directory_cluster_for_file+0x3d4>
81130a9c:	e0bfff17 	ldw	r2,-4(fp)
81130aa0:	10800003 	ldbu	r2,0(r2)
81130aa4:	10803fcc 	andi	r2,r2,255
81130aa8:	10000e26 	beq	r2,zero,81130ae4 <get_home_directory_cluster_for_file+0x3d4>
                            {
								bool match = match_file_record_to_name_ext(file_record, name, extension);
81130aac:	e0fffb04 	addi	r3,fp,-20
81130ab0:	e0bff904 	addi	r2,fp,-28
81130ab4:	180d883a 	mov	r6,r3
81130ab8:	100b883a 	mov	r5,r2
81130abc:	e13fff17 	ldw	r4,-4(fp)
81130ac0:	113046c0 	call	8113046c <match_file_record_to_name_ext>
81130ac4:	e0bff615 	stw	r2,-40(fp)
                                if (match)
81130ac8:	e0bff617 	ldw	r2,-40(fp)
81130acc:	10000526 	beq	r2,zero,81130ae4 <get_home_directory_cluster_for_file+0x3d4>
                                {
                                    new_cluster = file_record->start_cluster_index;                                   
81130ad0:	e0bfff17 	ldw	r2,-4(fp)
81130ad4:	1080058b 	ldhu	r2,22(r2)
81130ad8:	10bfffcc 	andi	r2,r2,65535
81130adc:	e0bfef15 	stw	r2,-68(fp)
                                    break;
81130ae0:	00000606 	br	81130afc <get_home_directory_cluster_for_file+0x3ec>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
81130ae4:	e0bff317 	ldw	r2,-52(fp)
81130ae8:	10800044 	addi	r2,r2,1
81130aec:	e0bff315 	stw	r2,-52(fp)
81130af0:	e0bff317 	ldw	r2,-52(fp)
81130af4:	10800410 	cmplti	r2,r2,16
81130af8:	103fda1e 	bne	r2,zero,81130a64 <__reset+0xfb110a64>
                    }
                    else
                    {
                        break;
                    }
                    if (new_cluster != home_dir_cluster)
81130afc:	e0ffef17 	ldw	r3,-68(fp)
81130b00:	e0bfea17 	ldw	r2,-88(fp)
81130b04:	18800c1e 	bne	r3,r2,81130b38 <get_home_directory_cluster_for_file+0x428>
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
81130b08:	e0bff217 	ldw	r2,-56(fp)
81130b0c:	10800044 	addi	r2,r2,1
81130b10:	e0bff215 	stw	r2,-56(fp)
81130b14:	00a045b4 	movhi	r2,33046
81130b18:	1094e204 	addi	r2,r2,21384
81130b1c:	10800383 	ldbu	r2,14(r2)
81130b20:	10803fcc 	andi	r2,r2,255
81130b24:	e0fff217 	ldw	r3,-56(fp)
81130b28:	18bfc416 	blt	r3,r2,81130a3c <__reset+0xfb110a3c>
81130b2c:	00000306 	br	81130b3c <get_home_directory_cluster_for_file+0x42c>
                            }
                        }
                    }
                    else
                    {
                        break;
81130b30:	0001883a 	nop
81130b34:	00000106 	br	81130b3c <get_home_directory_cluster_for_file+0x42c>
                    }
                    if (new_cluster != home_dir_cluster)
                    {
                        break;
81130b38:	0001883a 	nop
                    }
                }
                // If this is the end of the cluster and the directory has not been found, then see if there is another cluster
                // that holds data for the current directory.
                if (new_cluster == home_dir_cluster)
81130b3c:	e0ffef17 	ldw	r3,-68(fp)
81130b40:	e0bfea17 	ldw	r2,-88(fp)
81130b44:	1880141e 	bne	r3,r2,81130b98 <get_home_directory_cluster_for_file+0x488>
                {
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster))
81130b48:	e0bfef17 	ldw	r2,-68(fp)
81130b4c:	e0fffc04 	addi	r3,fp,-16
81130b50:	180b883a 	mov	r5,r3
81130b54:	1009883a 	mov	r4,r2
81130b58:	112f0880 	call	8112f088 <get_cluster_flag>
81130b5c:	10000c26 	beq	r2,zero,81130b90 <get_home_directory_cluster_for_file+0x480>
					{
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8)
81130b60:	e0bffc0b 	ldhu	r2,-16(fp)
81130b64:	10bfffcc 	andi	r2,r2,65535
81130b68:	10fffe0c 	andi	r3,r2,65528
81130b6c:	00bffe14 	movui	r2,65528
81130b70:	1880021e 	bne	r3,r2,81130b7c <get_home_directory_cluster_for_file+0x46c>
						{
							return false;
81130b74:	0005883a 	mov	r2,zero
81130b78:	00003006 	br	81130c3c <get_home_directory_cluster_for_file+0x52c>
						}
						new_cluster = (next_cluster & 0x0000fff8);
81130b7c:	e0bffc0b 	ldhu	r2,-16(fp)
81130b80:	10bfffcc 	andi	r2,r2,65535
81130b84:	10bffe0c 	andi	r2,r2,65528
81130b88:	e0bfef15 	stw	r2,-68(fp)
81130b8c:	00000206 	br	81130b98 <get_home_directory_cluster_for_file+0x488>
					}
					else
					{
						// Directory path is invalid.                 
						return false;
81130b90:	0005883a 	mov	r2,zero
81130b94:	00002906 	br	81130c3c <get_home_directory_cluster_for_file+0x52c>
					}
                }              
            } while ((cluster < 0x0000fff8) && (new_cluster == home_dir_cluster));
81130b98:	e0bff417 	ldw	r2,-48(fp)
81130b9c:	00fffdd4 	movui	r3,65527
81130ba0:	18800316 	blt	r3,r2,81130bb0 <get_home_directory_cluster_for_file+0x4a0>
81130ba4:	e0ffef17 	ldw	r3,-68(fp)
81130ba8:	e0bfea17 	ldw	r2,-88(fp)
81130bac:	18bf9426 	beq	r3,r2,81130a00 <__reset+0xfb110a00>
            if (new_cluster != home_dir_cluster)
81130bb0:	e0ffef17 	ldw	r3,-68(fp)
81130bb4:	e0bfea17 	ldw	r2,-88(fp)
81130bb8:	18800826 	beq	r3,r2,81130bdc <get_home_directory_cluster_for_file+0x4cc>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
81130bbc:	e0bfef17 	ldw	r2,-68(fp)
81130bc0:	e0bfea15 	stw	r2,-88(fp)
                start_location = start_location+location+1;
81130bc4:	e0ffed17 	ldw	r3,-76(fp)
81130bc8:	e0bfeb17 	ldw	r2,-84(fp)
81130bcc:	1885883a 	add	r2,r3,r2
81130bd0:	10800044 	addi	r2,r2,1
81130bd4:	e0bfed15 	stw	r2,-76(fp)
81130bd8:	00000206 	br	81130be4 <get_home_directory_cluster_for_file+0x4d4>
            }
            else
            {
                // Directory path is invalid. 
                return false;
81130bdc:	0005883a 	mov	r2,zero
81130be0:	00001606 	br	81130c3c <get_home_directory_cluster_for_file+0x52c>
            }            
        }
        location = get_dir_divider_location(&(file_name[start_location]));
81130be4:	e0bfed17 	ldw	r2,-76(fp)
81130be8:	e0fffd17 	ldw	r3,-12(fp)
81130bec:	1885883a 	add	r2,r3,r2
81130bf0:	1009883a 	mov	r4,r2
81130bf4:	11303ac0 	call	811303ac <get_dir_divider_location>
81130bf8:	e0bfeb15 	stw	r2,-84(fp)
        if (location < 0)
81130bfc:	e0bfeb17 	ldw	r2,-84(fp)
81130c00:	1000020e 	bge	r2,zero,81130c0c <get_home_directory_cluster_for_file+0x4fc>
        {
            // Directory has been located.
            result = true;
81130c04:	00800044 	movi	r2,1
81130c08:	e0bfe915 	stw	r2,-92(fp)
    int location, index;
    int start_location = 0;
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
    while (location > 0)
81130c0c:	e0bfeb17 	ldw	r2,-84(fp)
81130c10:	00becf16 	blt	zero,r2,81130750 <__reset+0xfb110750>
            // Directory has been located.
            result = true;
        }
    }
    
    *home_directory_cluster = home_dir_cluster;
81130c14:	e0bffe17 	ldw	r2,-8(fp)
81130c18:	e0ffea17 	ldw	r3,-88(fp)
81130c1c:	10c00015 	stw	r3,0(r2)
    if (home_dir_cluster == 0)
81130c20:	e0bfea17 	ldw	r2,-88(fp)
81130c24:	1000041e 	bne	r2,zero,81130c38 <get_home_directory_cluster_for_file+0x528>
    {
        file_record->file_record_cluster = 0; // Home directory is the root directory.
81130c28:	e0bfff17 	ldw	r2,-4(fp)
81130c2c:	10000a15 	stw	zero,40(r2)
		result = true;
81130c30:	00800044 	movi	r2,1
81130c34:	e0bfe915 	stw	r2,-92(fp)
    }
    return result;
81130c38:	e0bfe917 	ldw	r2,-92(fp)
}
81130c3c:	e037883a 	mov	sp,fp
81130c40:	dfc00117 	ldw	ra,4(sp)
81130c44:	df000017 	ldw	fp,0(sp)
81130c48:	dec00204 	addi	sp,sp,8
81130c4c:	f800283a 	ret

81130c50 <find_file_in_directory>:


bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
81130c50:	deffe804 	addi	sp,sp,-96
81130c54:	de00012e 	bgeu	sp,et,81130c5c <find_file_in_directory+0xc>
81130c58:	003b68fa 	trap	3
81130c5c:	dfc01715 	stw	ra,92(sp)
81130c60:	df001615 	stw	fp,88(sp)
81130c64:	df001604 	addi	fp,sp,88
81130c68:	e13ffd15 	stw	r4,-12(fp)
81130c6c:	e17ffe15 	stw	r5,-8(fp)
81130c70:	e1bfff15 	stw	r6,-4(fp)
    int location = get_dir_divider_location( file_name );
81130c74:	e13ffe17 	ldw	r4,-8(fp)
81130c78:	11303ac0 	call	811303ac <get_dir_divider_location>
81130c7c:	e0bfea15 	stw	r2,-88(fp)
    int last_dir_separator = 0;
81130c80:	e03feb15 	stw	zero,-84(fp)
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
81130c84:	00800804 	movi	r2,32
81130c88:	e0bff905 	stb	r2,-28(fp)
81130c8c:	00800804 	movi	r2,32
81130c90:	e0bff945 	stb	r2,-27(fp)
81130c94:	00800804 	movi	r2,32
81130c98:	e0bff985 	stb	r2,-26(fp)
81130c9c:	00800804 	movi	r2,32
81130ca0:	e0bff9c5 	stb	r2,-25(fp)
81130ca4:	00800804 	movi	r2,32
81130ca8:	e0bffa05 	stb	r2,-24(fp)
81130cac:	00800804 	movi	r2,32
81130cb0:	e0bffa45 	stb	r2,-23(fp)
81130cb4:	00800804 	movi	r2,32
81130cb8:	e0bffa85 	stb	r2,-22(fp)
81130cbc:	00800804 	movi	r2,32
81130cc0:	e0bffac5 	stb	r2,-21(fp)
    char extension[3] = { ' ', ' ', ' ' };
81130cc4:	00800804 	movi	r2,32
81130cc8:	e0bffb05 	stb	r2,-20(fp)
81130ccc:	00800804 	movi	r2,32
81130cd0:	e0bffb45 	stb	r2,-19(fp)
81130cd4:	00800804 	movi	r2,32
81130cd8:	e0bffb85 	stb	r2,-18(fp)
    int ext_index = -1;
81130cdc:	00bfffc4 	movi	r2,-1
81130ce0:	e0bfec15 	stw	r2,-80(fp)
    int cluster = directory_start_cluster;
81130ce4:	e0bffd17 	ldw	r2,-12(fp)
81130ce8:	e0bfed15 	stw	r2,-76(fp)
    int index;
	int length = strlen(file_name);
81130cec:	e13ffe17 	ldw	r4,-8(fp)
81130cf0:	110ffb80 	call	8110ffb8 <strlen>
81130cf4:	e0bff415 	stw	r2,-48(fp)
    bool result = false;
81130cf8:	e03fef15 	stw	zero,-68(fp)
    
    // Skip through all directory separators.
    while (location > 0)
81130cfc:	00000b06 	br	81130d2c <find_file_in_directory+0xdc>
    {
        last_dir_separator = last_dir_separator+location+1;
81130d00:	e0ffeb17 	ldw	r3,-84(fp)
81130d04:	e0bfea17 	ldw	r2,-88(fp)
81130d08:	1885883a 	add	r2,r3,r2
81130d0c:	10800044 	addi	r2,r2,1
81130d10:	e0bfeb15 	stw	r2,-84(fp)
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
81130d14:	e0bfeb17 	ldw	r2,-84(fp)
81130d18:	e0fffe17 	ldw	r3,-8(fp)
81130d1c:	1885883a 	add	r2,r3,r2
81130d20:	1009883a 	mov	r4,r2
81130d24:	11303ac0 	call	811303ac <get_dir_divider_location>
81130d28:	e0bfea15 	stw	r2,-88(fp)
    int index;
	int length = strlen(file_name);
    bool result = false;
    
    // Skip through all directory separators.
    while (location > 0)
81130d2c:	e0bfea17 	ldw	r2,-88(fp)
81130d30:	00bff316 	blt	zero,r2,81130d00 <__reset+0xfb110d00>
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
81130d34:	e0bfeb17 	ldw	r2,-84(fp)
81130d38:	e0bfee15 	stw	r2,-72(fp)
81130d3c:	00002706 	br	81130ddc <find_file_in_directory+0x18c>
    {
        if (file_name[index] == '.')
81130d40:	e0bfee17 	ldw	r2,-72(fp)
81130d44:	e0fffe17 	ldw	r3,-8(fp)
81130d48:	1885883a 	add	r2,r3,r2
81130d4c:	10800003 	ldbu	r2,0(r2)
81130d50:	10803fcc 	andi	r2,r2,255
81130d54:	1080201c 	xori	r2,r2,128
81130d58:	10bfe004 	addi	r2,r2,-128
81130d5c:	10800b98 	cmpnei	r2,r2,46
81130d60:	1000031e 	bne	r2,zero,81130d70 <find_file_in_directory+0x120>
        {
            ext_index = index;
81130d64:	e0bfee17 	ldw	r2,-72(fp)
81130d68:	e0bfec15 	stw	r2,-80(fp)
81130d6c:	00001806 	br	81130dd0 <find_file_in_directory+0x180>
        }
        else if (ext_index < 0)
81130d70:	e0bfec17 	ldw	r2,-80(fp)
81130d74:	10000b0e 	bge	r2,zero,81130da4 <find_file_in_directory+0x154>
        {
            name[index-last_dir_separator] = file_name[index];
81130d78:	e0ffee17 	ldw	r3,-72(fp)
81130d7c:	e0bfeb17 	ldw	r2,-84(fp)
81130d80:	1885c83a 	sub	r2,r3,r2
81130d84:	e0ffee17 	ldw	r3,-72(fp)
81130d88:	e13ffe17 	ldw	r4,-8(fp)
81130d8c:	20c7883a 	add	r3,r4,r3
81130d90:	18c00003 	ldbu	r3,0(r3)
81130d94:	e13ff904 	addi	r4,fp,-28
81130d98:	2085883a 	add	r2,r4,r2
81130d9c:	10c00005 	stb	r3,0(r2)
81130da0:	00000b06 	br	81130dd0 <find_file_in_directory+0x180>
        }
        else
        {
            extension[index-ext_index-1] = file_name[index];
81130da4:	e0ffee17 	ldw	r3,-72(fp)
81130da8:	e0bfec17 	ldw	r2,-80(fp)
81130dac:	1885c83a 	sub	r2,r3,r2
81130db0:	10bfffc4 	addi	r2,r2,-1
81130db4:	e0ffee17 	ldw	r3,-72(fp)
81130db8:	e13ffe17 	ldw	r4,-8(fp)
81130dbc:	20c7883a 	add	r3,r4,r3
81130dc0:	18c00003 	ldbu	r3,0(r3)
81130dc4:	e13ffb04 	addi	r4,fp,-20
81130dc8:	2085883a 	add	r2,r4,r2
81130dcc:	10c00005 	stb	r3,0(r2)
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
81130dd0:	e0bfee17 	ldw	r2,-72(fp)
81130dd4:	10800044 	addi	r2,r2,1
81130dd8:	e0bfee15 	stw	r2,-72(fp)
81130ddc:	e0ffee17 	ldw	r3,-72(fp)
81130de0:	e0bff417 	ldw	r2,-48(fp)
81130de4:	18bfd616 	blt	r3,r2,81130d40 <__reset+0xfb110d40>
            extension[index-ext_index-1] = file_name[index];
        }
    }

    // Look for the file.
    if (directory_start_cluster == 0)
81130de8:	e0bffd17 	ldw	r2,-12(fp)
81130dec:	1000461e 	bne	r2,zero,81130f08 <find_file_in_directory+0x2b8>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
81130df0:	00a045b4 	movhi	r2,33046
81130df4:	1094e204 	addi	r2,r2,21384
81130df8:	1080050b 	ldhu	r2,20(r2)
81130dfc:	10bfffcc 	andi	r2,r2,65535
81130e00:	1006917a 	slli	r3,r2,5
81130e04:	00a045b4 	movhi	r2,33046
81130e08:	1094e204 	addi	r2,r2,21384
81130e0c:	1080030b 	ldhu	r2,12(r2)
81130e10:	10bfffcc 	andi	r2,r2,65535
81130e14:	1885283a 	div	r2,r3,r2
81130e18:	e0bff715 	stw	r2,-36(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
81130e1c:	e03ff015 	stw	zero,-64(fp)
81130e20:	00003506 	br	81130ef8 <find_file_in_directory+0x2a8>
        {
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
81130e24:	00a045b4 	movhi	r2,33046
81130e28:	1094e204 	addi	r2,r2,21384
81130e2c:	10c01317 	ldw	r3,76(r2)
81130e30:	e0bff017 	ldw	r2,-64(fp)
81130e34:	1885883a 	add	r2,r3,r2
81130e38:	1007883a 	mov	r3,r2
81130e3c:	d0a09f17 	ldw	r2,-32132(gp)
81130e40:	100b883a 	mov	r5,r2
81130e44:	1809883a 	mov	r4,r3
81130e48:	112efa80 	call	8112efa8 <Read_Sector_Data>
81130e4c:	10009626 	beq	r2,zero,811310a8 <find_file_in_directory+0x458>
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
81130e50:	e03ff115 	stw	zero,-60(fp)
81130e54:	00002006 	br	81130ed8 <find_file_in_directory+0x288>
                {
                    // Read file record.
                    Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
81130e58:	e0bff117 	ldw	r2,-60(fp)
81130e5c:	1004917a 	slli	r2,r2,5
81130e60:	e0fff017 	ldw	r3,-64(fp)
81130e64:	180f883a 	mov	r7,r3
81130e68:	000d883a 	mov	r6,zero
81130e6c:	e17fff17 	ldw	r5,-4(fp)
81130e70:	1009883a 	mov	r4,r2
81130e74:	112f3d80 	call	8112f3d8 <Read_File_Record_At_Offset>
                    if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
81130e78:	e0bfff17 	ldw	r2,-4(fp)
81130e7c:	10800003 	ldbu	r2,0(r2)
81130e80:	10803fcc 	andi	r2,r2,255
81130e84:	10803960 	cmpeqi	r2,r2,229
81130e88:	1000101e 	bne	r2,zero,81130ecc <find_file_in_directory+0x27c>
81130e8c:	e0bfff17 	ldw	r2,-4(fp)
81130e90:	10800003 	ldbu	r2,0(r2)
81130e94:	10803fcc 	andi	r2,r2,255
81130e98:	10000c26 	beq	r2,zero,81130ecc <find_file_in_directory+0x27c>
                    {
                        bool match = match_file_record_to_name_ext(file_record, name, extension);
81130e9c:	e0fffb04 	addi	r3,fp,-20
81130ea0:	e0bff904 	addi	r2,fp,-28
81130ea4:	180d883a 	mov	r6,r3
81130ea8:	100b883a 	mov	r5,r2
81130eac:	e13fff17 	ldw	r4,-4(fp)
81130eb0:	113046c0 	call	8113046c <match_file_record_to_name_ext>
81130eb4:	e0bff815 	stw	r2,-32(fp)

                        if (match)
81130eb8:	e0bff817 	ldw	r2,-32(fp)
81130ebc:	10000326 	beq	r2,zero,81130ecc <find_file_in_directory+0x27c>
                        {
                            result = true;
81130ec0:	00800044 	movi	r2,1
81130ec4:	e0bfef15 	stw	r2,-68(fp)
                            break;
81130ec8:	00000606 	br	81130ee4 <find_file_in_directory+0x294>
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
81130ecc:	e0bff117 	ldw	r2,-60(fp)
81130ed0:	10800044 	addi	r2,r2,1
81130ed4:	e0bff115 	stw	r2,-60(fp)
81130ed8:	e0bff117 	ldw	r2,-60(fp)
81130edc:	10800410 	cmplti	r2,r2,16
81130ee0:	103fdd1e 	bne	r2,zero,81130e58 <__reset+0xfb110e58>
            }
            else
            {
                break;
            }
            if (result)
81130ee4:	e0bfef17 	ldw	r2,-68(fp)
81130ee8:	1000711e 	bne	r2,zero,811310b0 <find_file_in_directory+0x460>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
81130eec:	e0bff017 	ldw	r2,-64(fp)
81130ef0:	10800044 	addi	r2,r2,1
81130ef4:	e0bff015 	stw	r2,-64(fp)
81130ef8:	e0fff017 	ldw	r3,-64(fp)
81130efc:	e0bff717 	ldw	r2,-36(fp)
81130f00:	18bfc816 	blt	r3,r2,81130e24 <__reset+0xfb110e24>
81130f04:	00006b06 	br	811310b4 <find_file_in_directory+0x464>
        }
    }
    else
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
81130f08:	e0bfed17 	ldw	r2,-76(fp)
81130f0c:	10ffff84 	addi	r3,r2,-2
81130f10:	00a045b4 	movhi	r2,33046
81130f14:	1094e204 	addi	r2,r2,21384
81130f18:	10800383 	ldbu	r2,14(r2)
81130f1c:	10803fcc 	andi	r2,r2,255
81130f20:	1885383a 	mul	r2,r3,r2
81130f24:	1007883a 	mov	r3,r2
81130f28:	00a045b4 	movhi	r2,33046
81130f2c:	1094e204 	addi	r2,r2,21384
81130f30:	10801417 	ldw	r2,80(r2)
81130f34:	1885883a 	add	r2,r3,r2
81130f38:	e0bff515 	stw	r2,-44(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
81130f3c:	e03ff215 	stw	zero,-56(fp)
81130f40:	00003306 	br	81131010 <find_file_in_directory+0x3c0>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
81130f44:	e0fff217 	ldw	r3,-56(fp)
81130f48:	e0bff517 	ldw	r2,-44(fp)
81130f4c:	1885883a 	add	r2,r3,r2
81130f50:	d0e09f17 	ldw	r3,-32132(gp)
81130f54:	180b883a 	mov	r5,r3
81130f58:	1009883a 	mov	r4,r2
81130f5c:	112efa80 	call	8112efa8 <Read_Sector_Data>
81130f60:	10003226 	beq	r2,zero,8113102c <find_file_in_directory+0x3dc>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
81130f64:	e03ff315 	stw	zero,-52(fp)
81130f68:	00002106 	br	81130ff0 <find_file_in_directory+0x3a0>
                    {
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
81130f6c:	e0bff317 	ldw	r2,-52(fp)
81130f70:	1004917a 	slli	r2,r2,5
81130f74:	e0ffed17 	ldw	r3,-76(fp)
81130f78:	e13ff217 	ldw	r4,-56(fp)
81130f7c:	200f883a 	mov	r7,r4
81130f80:	180d883a 	mov	r6,r3
81130f84:	e17fff17 	ldw	r5,-4(fp)
81130f88:	1009883a 	mov	r4,r2
81130f8c:	112f3d80 	call	8112f3d8 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
81130f90:	e0bfff17 	ldw	r2,-4(fp)
81130f94:	10800003 	ldbu	r2,0(r2)
81130f98:	10803fcc 	andi	r2,r2,255
81130f9c:	10803960 	cmpeqi	r2,r2,229
81130fa0:	1000101e 	bne	r2,zero,81130fe4 <find_file_in_directory+0x394>
81130fa4:	e0bfff17 	ldw	r2,-4(fp)
81130fa8:	10800003 	ldbu	r2,0(r2)
81130fac:	10803fcc 	andi	r2,r2,255
81130fb0:	10000c26 	beq	r2,zero,81130fe4 <find_file_in_directory+0x394>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
81130fb4:	e0fffb04 	addi	r3,fp,-20
81130fb8:	e0bff904 	addi	r2,fp,-28
81130fbc:	180d883a 	mov	r6,r3
81130fc0:	100b883a 	mov	r5,r2
81130fc4:	e13fff17 	ldw	r4,-4(fp)
81130fc8:	113046c0 	call	8113046c <match_file_record_to_name_ext>
81130fcc:	e0bff615 	stw	r2,-40(fp)

                            if (match)
81130fd0:	e0bff617 	ldw	r2,-40(fp)
81130fd4:	10000326 	beq	r2,zero,81130fe4 <find_file_in_directory+0x394>
                            {                               
                                result = true;
81130fd8:	00800044 	movi	r2,1
81130fdc:	e0bfef15 	stw	r2,-68(fp)
                                break;
81130fe0:	00000606 	br	81130ffc <find_file_in_directory+0x3ac>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
81130fe4:	e0bff317 	ldw	r2,-52(fp)
81130fe8:	10800044 	addi	r2,r2,1
81130fec:	e0bff315 	stw	r2,-52(fp)
81130ff0:	e0bff317 	ldw	r2,-52(fp)
81130ff4:	10800410 	cmplti	r2,r2,16
81130ff8:	103fdc1e 	bne	r2,zero,81130f6c <__reset+0xfb110f6c>
                }
                else
                {
                    break;
                }
                if (result)
81130ffc:	e0bfef17 	ldw	r2,-68(fp)
81131000:	10000c1e 	bne	r2,zero,81131034 <find_file_in_directory+0x3e4>
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
81131004:	e0bff217 	ldw	r2,-56(fp)
81131008:	10800044 	addi	r2,r2,1
8113100c:	e0bff215 	stw	r2,-56(fp)
81131010:	00a045b4 	movhi	r2,33046
81131014:	1094e204 	addi	r2,r2,21384
81131018:	10800383 	ldbu	r2,14(r2)
8113101c:	10803fcc 	andi	r2,r2,255
81131020:	e0fff217 	ldw	r3,-56(fp)
81131024:	18bfc716 	blt	r3,r2,81130f44 <__reset+0xfb110f44>
81131028:	00000306 	br	81131038 <find_file_in_directory+0x3e8>
                        }
                    }
                }
                else
                {
                    break;
8113102c:	0001883a 	nop
81131030:	00000106 	br	81131038 <find_file_in_directory+0x3e8>
                }
                if (result)
                {
                    break;
81131034:	0001883a 	nop
                }
            }
            // If this is the end of the cluster and the file has not been found, then see if there is another cluster
            // that holds data for the current directory.
            if (result == false)
81131038:	e0bfef17 	ldw	r2,-68(fp)
8113103c:	1000141e 	bne	r2,zero,81131090 <find_file_in_directory+0x440>
            {
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster))
81131040:	e0bfed17 	ldw	r2,-76(fp)
81131044:	e0fffc04 	addi	r3,fp,-16
81131048:	180b883a 	mov	r5,r3
8113104c:	1009883a 	mov	r4,r2
81131050:	112f0880 	call	8112f088 <get_cluster_flag>
81131054:	10000c26 	beq	r2,zero,81131088 <find_file_in_directory+0x438>
				{
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8)
81131058:	e0bffc0b 	ldhu	r2,-16(fp)
8113105c:	10bfffcc 	andi	r2,r2,65535
81131060:	10fffe0c 	andi	r3,r2,65528
81131064:	00bffe14 	movui	r2,65528
81131068:	1880021e 	bne	r3,r2,81131074 <find_file_in_directory+0x424>
					{
						return false;
8113106c:	0005883a 	mov	r2,zero
81131070:	00001106 	br	811310b8 <find_file_in_directory+0x468>
					}
					cluster = (new_cluster & 0x0000fff8);
81131074:	e0bffc0b 	ldhu	r2,-16(fp)
81131078:	10bfffcc 	andi	r2,r2,65535
8113107c:	10bffe0c 	andi	r2,r2,65528
81131080:	e0bfed15 	stw	r2,-76(fp)
81131084:	00000206 	br	81131090 <find_file_in_directory+0x440>
				}
				else
                {
                    // Directory path is invalid.                 
                    return false;
81131088:	0005883a 	mov	r2,zero
8113108c:	00000a06 	br	811310b8 <find_file_in_directory+0x468>
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
81131090:	e0bfed17 	ldw	r2,-76(fp)
81131094:	00fffdd4 	movui	r3,65527
81131098:	18800616 	blt	r3,r2,811310b4 <find_file_in_directory+0x464>
8113109c:	e0bfef17 	ldw	r2,-68(fp)
811310a0:	103f9926 	beq	r2,zero,81130f08 <__reset+0xfb110f08>
811310a4:	00000306 	br	811310b4 <find_file_in_directory+0x464>
                    }
                }
            }
            else
            {
                break;
811310a8:	0001883a 	nop
811310ac:	00000106 	br	811310b4 <find_file_in_directory+0x464>
            }
            if (result)
            {
                break;
811310b0:	0001883a 	nop
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
    }
    
    return result;   
811310b4:	e0bfef17 	ldw	r2,-68(fp)
}
811310b8:	e037883a 	mov	sp,fp
811310bc:	dfc00117 	ldw	ra,4(sp)
811310c0:	df000017 	ldw	fp,0(sp)
811310c4:	dec00204 	addi	sp,sp,8
811310c8:	f800283a 	ret

811310cc <find_first_empty_cluster>:


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
811310cc:	defff504 	addi	sp,sp,-44
811310d0:	de00012e 	bgeu	sp,et,811310d8 <find_first_empty_cluster+0xc>
811310d4:	003b68fa 	trap	3
811310d8:	dfc00a15 	stw	ra,40(sp)
811310dc:	df000915 	stw	fp,36(sp)
811310e0:	df000904 	addi	fp,sp,36
811310e4:	e13fff15 	stw	r4,-4(fp)
    unsigned int sector = boot_sector_data.first_fat_sector_offset;
811310e8:	00a045b4 	movhi	r2,33046
811310ec:	1094e204 	addi	r2,r2,21384
811310f0:	10801117 	ldw	r2,68(r2)
811310f4:	e0bff715 	stw	r2,-36(fp)
    unsigned int cluster_index = 2;
811310f8:	00800084 	movi	r2,2
811310fc:	e0bff815 	stw	r2,-32(fp)
    short int cluster = -1;
81131100:	00bfffc4 	movi	r2,-1
81131104:	e0bff90d 	sth	r2,-28(fp)
    bool result = false;
81131108:	e03ffa15 	stw	zero,-24(fp)
	unsigned max_cluster_index = 0;
8113110c:	e03ffb15 	stw	zero,-20(fp)
	unsigned int non_data_sectors = boot_sector_data.data_sector_offset;
81131110:	00a045b4 	movhi	r2,33046
81131114:	1094e204 	addi	r2,r2,21384
81131118:	10801417 	ldw	r2,80(r2)
8113111c:	e0bffc15 	stw	r2,-16(fp)
	unsigned int less_than_32 = boot_sector_data.number_of_sectors_in_partition;
81131120:	00a045b4 	movhi	r2,33046
81131124:	1094e204 	addi	r2,r2,21384
81131128:	1080058b 	ldhu	r2,22(r2)
8113112c:	10bfffcc 	andi	r2,r2,65535
81131130:	e0bffd15 	stw	r2,-12(fp)
	unsigned int greater_than_32 = boot_sector_data.total_sector_count_if_above_32MB;
81131134:	00a045b4 	movhi	r2,33046
81131138:	1094e204 	addi	r2,r2,21384
8113113c:	10800917 	ldw	r2,36(r2)
81131140:	e0bffe15 	stw	r2,-8(fp)

	if (less_than_32 > greater_than_32)
81131144:	e0bffd17 	ldw	r2,-12(fp)
81131148:	e0fffe17 	ldw	r3,-8(fp)
8113114c:	18800b2e 	bgeu	r3,r2,8113117c <find_first_empty_cluster+0xb0>
	{
		max_cluster_index = ((less_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
81131150:	e0fffd17 	ldw	r3,-12(fp)
81131154:	e0bffc17 	ldw	r2,-16(fp)
81131158:	1887c83a 	sub	r3,r3,r2
8113115c:	00a045b4 	movhi	r2,33046
81131160:	1094e204 	addi	r2,r2,21384
81131164:	10800383 	ldbu	r2,14(r2)
81131168:	10803fcc 	andi	r2,r2,255
8113116c:	1885203a 	divu	r2,r3,r2
81131170:	10800044 	addi	r2,r2,1
81131174:	e0bffb15 	stw	r2,-20(fp)
81131178:	00002a06 	br	81131224 <find_first_empty_cluster+0x158>
	}
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
8113117c:	e0fffe17 	ldw	r3,-8(fp)
81131180:	e0bffc17 	ldw	r2,-16(fp)
81131184:	1887c83a 	sub	r3,r3,r2
81131188:	00a045b4 	movhi	r2,33046
8113118c:	1094e204 	addi	r2,r2,21384
81131190:	10800383 	ldbu	r2,14(r2)
81131194:	10803fcc 	andi	r2,r2,255
81131198:	1885203a 	divu	r2,r3,r2
8113119c:	10800044 	addi	r2,r2,1
811311a0:	e0bffb15 	stw	r2,-20(fp)
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
811311a4:	00001f06 	br	81131224 <find_first_empty_cluster+0x158>
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
811311a8:	e0bff717 	ldw	r2,-36(fp)
811311ac:	d0e09f17 	ldw	r3,-32132(gp)
811311b0:	180b883a 	mov	r5,r3
811311b4:	1009883a 	mov	r4,r2
811311b8:	112efa80 	call	8112efa8 <Read_Sector_Data>
811311bc:	10001426 	beq	r2,zero,81131210 <find_first_empty_cluster+0x144>
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
811311c0:	e0bff817 	ldw	r2,-32(fp)
811311c4:	10803fcc 	andi	r2,r2,255
811311c8:	1085883a 	add	r2,r2,r2
811311cc:	1007883a 	mov	r3,r2
811311d0:	d0a0a117 	ldw	r2,-32124(gp)
811311d4:	10800a17 	ldw	r2,40(r2)
811311d8:	1885883a 	add	r2,r3,r2
811311dc:	1080002b 	ldhuio	r2,0(r2)
811311e0:	10bfffcc 	andi	r2,r2,65535
811311e4:	e0bff90d 	sth	r2,-28(fp)
                if (cluster == 0)
811311e8:	e0bff90f 	ldh	r2,-28(fp)
811311ec:	10000726 	beq	r2,zero,8113120c <find_first_empty_cluster+0x140>
                    // Free cluster found.
                    break;
                }
                else
                {
                    cluster_index++;
811311f0:	e0bff817 	ldw	r2,-32(fp)
811311f4:	10800044 	addi	r2,r2,1
811311f8:	e0bff815 	stw	r2,-32(fp)
                } 
            } while ((cluster_index % 256) != 0);
811311fc:	e0bff817 	ldw	r2,-32(fp)
81131200:	10803fcc 	andi	r2,r2,255
81131204:	103fee1e 	bne	r2,zero,811311c0 <__reset+0xfb1111c0>
81131208:	00000106 	br	81131210 <find_first_empty_cluster+0x144>
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
                if (cluster == 0)
                {
                    // Free cluster found.
                    break;
8113120c:	0001883a 	nop
                {
                    cluster_index++;
                } 
            } while ((cluster_index % 256) != 0);
        }
        if (cluster == 0)
81131210:	e0bff90f 	ldh	r2,-28(fp)
81131214:	10000926 	beq	r2,zero,8113123c <find_first_empty_cluster+0x170>
        {
            break;
        }
        sector++;
81131218:	e0bff717 	ldw	r2,-36(fp)
8113121c:	10800044 	addi	r2,r2,1
81131220:	e0bff715 	stw	r2,-36(fp)
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
81131224:	00a045b4 	movhi	r2,33046
81131228:	1094e204 	addi	r2,r2,21384
8113122c:	10c01217 	ldw	r3,72(r2)
81131230:	e0bff717 	ldw	r2,-36(fp)
81131234:	18bfdc1e 	bne	r3,r2,811311a8 <__reset+0xfb1111a8>
81131238:	00000106 	br	81131240 <find_first_empty_cluster+0x174>
                } 
            } while ((cluster_index % 256) != 0);
        }
        if (cluster == 0)
        {
            break;
8113123c:	0001883a 	nop
        }
        sector++;
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
81131240:	e0bff90f 	ldh	r2,-28(fp)
81131244:	1000081e 	bne	r2,zero,81131268 <find_first_empty_cluster+0x19c>
81131248:	e0bff90f 	ldh	r2,-28(fp)
8113124c:	e0fffb17 	ldw	r3,-20(fp)
81131250:	18800536 	bltu	r3,r2,81131268 <find_first_empty_cluster+0x19c>
    {
        *cluster_number = cluster_index;
81131254:	e0bfff17 	ldw	r2,-4(fp)
81131258:	e0fff817 	ldw	r3,-32(fp)
8113125c:	10c00015 	stw	r3,0(r2)
		result = true;
81131260:	00800044 	movi	r2,1
81131264:	e0bffa15 	stw	r2,-24(fp)
    }
    return result;
81131268:	e0bffa17 	ldw	r2,-24(fp)
}
8113126c:	e037883a 	mov	sp,fp
81131270:	dfc00117 	ldw	ra,4(sp)
81131274:	df000017 	ldw	fp,0(sp)
81131278:	dec00204 	addi	sp,sp,8
8113127c:	f800283a 	ret

81131280 <find_first_empty_record_in_a_subdirectory>:


int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
81131280:	defff604 	addi	sp,sp,-40
81131284:	de00012e 	bgeu	sp,et,8113128c <find_first_empty_record_in_a_subdirectory+0xc>
81131288:	003b68fa 	trap	3
8113128c:	dfc00915 	stw	ra,36(sp)
81131290:	df000815 	stw	fp,32(sp)
81131294:	df000804 	addi	fp,sp,32
81131298:	e13fff15 	stw	r4,-4(fp)
    int result = -1;
8113129c:	00bfffc4 	movi	r2,-1
811312a0:	e0bff815 	stw	r2,-32(fp)
    int cluster = start_cluster_index;
811312a4:	e0bfff17 	ldw	r2,-4(fp)
811312a8:	e0bff915 	stw	r2,-28(fp)
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
811312ac:	e0bff917 	ldw	r2,-28(fp)
811312b0:	10ffff84 	addi	r3,r2,-2
811312b4:	00a045b4 	movhi	r2,33046
811312b8:	1094e204 	addi	r2,r2,21384
811312bc:	10800383 	ldbu	r2,14(r2)
811312c0:	10803fcc 	andi	r2,r2,255
811312c4:	1885383a 	mul	r2,r3,r2
811312c8:	1007883a 	mov	r3,r2
811312cc:	00a045b4 	movhi	r2,33046
811312d0:	1094e204 	addi	r2,r2,21384
811312d4:	10801417 	ldw	r2,80(r2)
811312d8:	1885883a 	add	r2,r3,r2
811312dc:	e0bffc15 	stw	r2,-16(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
811312e0:	e03ffa15 	stw	zero,-24(fp)
811312e4:	00002c06 	br	81131398 <find_first_empty_record_in_a_subdirectory+0x118>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
811312e8:	e0fffa17 	ldw	r3,-24(fp)
811312ec:	e0bffc17 	ldw	r2,-16(fp)
811312f0:	1885883a 	add	r2,r3,r2
811312f4:	d0e09f17 	ldw	r3,-32132(gp)
811312f8:	180b883a 	mov	r5,r3
811312fc:	1009883a 	mov	r4,r2
81131300:	112efa80 	call	8112efa8 <Read_Sector_Data>
81131304:	10002b26 	beq	r2,zero,811313b4 <find_first_empty_record_in_a_subdirectory+0x134>
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
81131308:	e03ffb15 	stw	zero,-20(fp)
8113130c:	00001c06 	br	81131380 <find_first_empty_record_in_a_subdirectory+0x100>
                {
                    unsigned short int leading_char;
                    
                    // Read file record.
                    leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
81131310:	e0bffb17 	ldw	r2,-20(fp)
81131314:	1004917a 	slli	r2,r2,5
81131318:	1007883a 	mov	r3,r2
8113131c:	d0a0a117 	ldw	r2,-32124(gp)
81131320:	10800a17 	ldw	r2,40(r2)
81131324:	1885883a 	add	r2,r3,r2
81131328:	10800023 	ldbuio	r2,0(r2)
8113132c:	10803fcc 	andi	r2,r2,255
81131330:	10803fcc 	andi	r2,r2,255
81131334:	e0bffd0d 	sth	r2,-12(fp)
                    if ((leading_char == 0x00e5) || (leading_char == 0))
81131338:	e0bffd0b 	ldhu	r2,-12(fp)
8113133c:	10803960 	cmpeqi	r2,r2,229
81131340:	1000021e 	bne	r2,zero,8113134c <find_first_empty_record_in_a_subdirectory+0xcc>
81131344:	e0bffd0b 	ldhu	r2,-12(fp)
81131348:	10000a1e 	bne	r2,zero,81131374 <find_first_empty_record_in_a_subdirectory+0xf4>
                    {
                        result = (cluster) | ((sector_index*16 + file_counter) << 16);
8113134c:	e0bffa17 	ldw	r2,-24(fp)
81131350:	1006913a 	slli	r3,r2,4
81131354:	e0bffb17 	ldw	r2,-20(fp)
81131358:	1885883a 	add	r2,r3,r2
8113135c:	1006943a 	slli	r3,r2,16
81131360:	e0bff917 	ldw	r2,-28(fp)
81131364:	1884b03a 	or	r2,r3,r2
81131368:	e0bff815 	stw	r2,-32(fp)
                        return result;
8113136c:	e0bff817 	ldw	r2,-32(fp)
81131370:	00005306 	br	811314c0 <find_first_empty_record_in_a_subdirectory+0x240>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
81131374:	e0bffb17 	ldw	r2,-20(fp)
81131378:	10800044 	addi	r2,r2,1
8113137c:	e0bffb15 	stw	r2,-20(fp)
81131380:	e0bffb17 	ldw	r2,-20(fp)
81131384:	10800410 	cmplti	r2,r2,16
81131388:	103fe11e 	bne	r2,zero,81131310 <__reset+0xfb111310>
    int cluster = start_cluster_index;
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
8113138c:	e0bffa17 	ldw	r2,-24(fp)
81131390:	10800044 	addi	r2,r2,1
81131394:	e0bffa15 	stw	r2,-24(fp)
81131398:	00a045b4 	movhi	r2,33046
8113139c:	1094e204 	addi	r2,r2,21384
811313a0:	10800383 	ldbu	r2,14(r2)
811313a4:	10803fcc 	andi	r2,r2,255
811313a8:	e0fffa17 	ldw	r3,-24(fp)
811313ac:	18bfce16 	blt	r3,r2,811312e8 <__reset+0xfb1112e8>
811313b0:	00000106 	br	811313b8 <find_first_empty_record_in_a_subdirectory+0x138>
                    }
                }
            }
            else
            {
                break;
811313b4:	0001883a 	nop
            }
        }
        // If this is the end of the cluster and the file has not been found, then see if there is another cluster
        // that holds data for the current directory.
        if (result < 0)
811313b8:	e0bff817 	ldw	r2,-32(fp)
811313bc:	1000390e 	bge	r2,zero,811314a4 <find_first_empty_record_in_a_subdirectory+0x224>
        {
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster))
811313c0:	e0bff917 	ldw	r2,-28(fp)
811313c4:	e0fffd84 	addi	r3,fp,-10
811313c8:	180b883a 	mov	r5,r3
811313cc:	1009883a 	mov	r4,r2
811313d0:	112f0880 	call	8112f088 <get_cluster_flag>
811313d4:	10003126 	beq	r2,zero,8113149c <find_first_empty_record_in_a_subdirectory+0x21c>
			{
                // The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8)
811313d8:	e0bffd8b 	ldhu	r2,-10(fp)
811313dc:	10bfffcc 	andi	r2,r2,65535
811313e0:	10fffe0c 	andi	r3,r2,65528
811313e4:	00bffe14 	movui	r2,65528
811313e8:	18802e1e 	bne	r3,r2,811314a4 <find_first_empty_record_in_a_subdirectory+0x224>
				{
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
811313ec:	e0bffe04 	addi	r2,fp,-8
811313f0:	1009883a 	mov	r4,r2
811313f4:	11310cc0 	call	811310cc <find_first_empty_cluster>
811313f8:	10002326 	beq	r2,zero,81131488 <find_first_empty_record_in_a_subdirectory+0x208>
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
811313fc:	e0bff917 	ldw	r2,-28(fp)
81131400:	e0fffe17 	ldw	r3,-8(fp)
81131404:	18ffffcc 	andi	r3,r3,65535
81131408:	18e0001c 	xori	r3,r3,32768
8113140c:	18e00004 	addi	r3,r3,-32768
81131410:	01800044 	movi	r6,1
81131414:	180b883a 	mov	r5,r3
81131418:	1009883a 	mov	r4,r2
8113141c:	112f1440 	call	8112f144 <mark_cluster>
81131420:	10001926 	beq	r2,zero,81131488 <find_first_empty_record_in_a_subdirectory+0x208>
81131424:	e0bffe17 	ldw	r2,-8(fp)
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
81131428:	01800044 	movi	r6,1
8113142c:	017fffc4 	movi	r5,-1
81131430:	1009883a 	mov	r4,r2
81131434:	112f1440 	call	8112f144 <mark_cluster>
				{
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
81131438:	10001326 	beq	r2,zero,81131488 <find_first_empty_record_in_a_subdirectory+0x208>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
8113143c:	e0bff917 	ldw	r2,-28(fp)
81131440:	e0fffe17 	ldw	r3,-8(fp)
81131444:	18ffffcc 	andi	r3,r3,65535
81131448:	18e0001c 	xori	r3,r3,32768
8113144c:	18e00004 	addi	r3,r3,-32768
81131450:	000d883a 	mov	r6,zero
81131454:	180b883a 	mov	r5,r3
81131458:	1009883a 	mov	r4,r2
8113145c:	112f1440 	call	8112f144 <mark_cluster>
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
81131460:	10000926 	beq	r2,zero,81131488 <find_first_empty_record_in_a_subdirectory+0x208>
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
81131464:	e0bffe17 	ldw	r2,-8(fp)
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
81131468:	000d883a 	mov	r6,zero
8113146c:	017fffc4 	movi	r5,-1
81131470:	1009883a 	mov	r4,r2
81131474:	112f1440 	call	8112f144 <mark_cluster>
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
81131478:	10000326 	beq	r2,zero,81131488 <find_first_empty_record_in_a_subdirectory+0x208>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
						{
							Save_Modified_Sector();
8113147c:	112ef540 	call	8112ef54 <Save_Modified_Sector>
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;                           
81131480:	e0bffe17 	ldw	r2,-8(fp)
81131484:	e0bff815 	stw	r2,-32(fp)
						}
					}
					cluster = (new_cluster & 0x0000fff8);
81131488:	e0bffd8b 	ldhu	r2,-10(fp)
8113148c:	10bfffcc 	andi	r2,r2,65535
81131490:	10bffe0c 	andi	r2,r2,65528
81131494:	e0bff915 	stw	r2,-28(fp)
81131498:	00000206 	br	811314a4 <find_first_empty_record_in_a_subdirectory+0x224>
				}
			}
			else
			{
				// Error encountered.                 
				result = -1;
8113149c:	00bfffc4 	movi	r2,-1
811314a0:	e0bff815 	stw	r2,-32(fp)
			}
        }              
    } while ((cluster < 0x0000fff8) && (result == -1)); 
811314a4:	e0bff917 	ldw	r2,-28(fp)
811314a8:	00fffdd4 	movui	r3,65527
811314ac:	18800316 	blt	r3,r2,811314bc <find_first_empty_record_in_a_subdirectory+0x23c>
811314b0:	e0bff817 	ldw	r2,-32(fp)
811314b4:	10bfffe0 	cmpeqi	r2,r2,-1
811314b8:	103f7c1e 	bne	r2,zero,811312ac <__reset+0xfb1112ac>
    return result; 
811314bc:	e0bff817 	ldw	r2,-32(fp)
}
811314c0:	e037883a 	mov	sp,fp
811314c4:	dfc00117 	ldw	ra,4(sp)
811314c8:	df000017 	ldw	fp,0(sp)
811314cc:	dec00204 	addi	sp,sp,8
811314d0:	f800283a 	ret

811314d4 <find_first_empty_record_in_root_directory>:


int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
811314d4:	defff904 	addi	sp,sp,-28
811314d8:	de00012e 	bgeu	sp,et,811314e0 <find_first_empty_record_in_root_directory+0xc>
811314dc:	003b68fa 	trap	3
811314e0:	dfc00615 	stw	ra,24(sp)
811314e4:	df000515 	stw	fp,20(sp)
811314e8:	df000504 	addi	fp,sp,20
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
811314ec:	00a045b4 	movhi	r2,33046
811314f0:	1094e204 	addi	r2,r2,21384
811314f4:	1080050b 	ldhu	r2,20(r2)
811314f8:	10bfffcc 	andi	r2,r2,65535
811314fc:	1006917a 	slli	r3,r2,5
81131500:	00a045b4 	movhi	r2,33046
81131504:	1094e204 	addi	r2,r2,21384
81131508:	1080030b 	ldhu	r2,12(r2)
8113150c:	10bfffcc 	andi	r2,r2,65535
81131510:	1885283a 	div	r2,r3,r2
81131514:	e0bffd15 	stw	r2,-12(fp)
    int sector_index;
    int result = -1;
81131518:	00bfffc4 	movi	r2,-1
8113151c:	e0bffe15 	stw	r2,-8(fp)
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
81131520:	e03ffb15 	stw	zero,-20(fp)
81131524:	00002d06 	br	811315dc <find_first_empty_record_in_root_directory+0x108>
    {
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
81131528:	00a045b4 	movhi	r2,33046
8113152c:	1094e204 	addi	r2,r2,21384
81131530:	10c01317 	ldw	r3,76(r2)
81131534:	e0bffb17 	ldw	r2,-20(fp)
81131538:	1885883a 	add	r2,r3,r2
8113153c:	1007883a 	mov	r3,r2
81131540:	d0a09f17 	ldw	r2,-32132(gp)
81131544:	100b883a 	mov	r5,r2
81131548:	1809883a 	mov	r4,r3
8113154c:	112efa80 	call	8112efa8 <Read_Sector_Data>
81131550:	10002626 	beq	r2,zero,811315ec <find_first_empty_record_in_root_directory+0x118>
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
81131554:	e03ffc15 	stw	zero,-16(fp)
81131558:	00001a06 	br	811315c4 <find_first_empty_record_in_root_directory+0xf0>
            {
                unsigned short int leading_char;
                
                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
8113155c:	e0bffc17 	ldw	r2,-16(fp)
81131560:	1004917a 	slli	r2,r2,5
81131564:	1007883a 	mov	r3,r2
81131568:	d0a0a117 	ldw	r2,-32124(gp)
8113156c:	10800a17 	ldw	r2,40(r2)
81131570:	1885883a 	add	r2,r3,r2
81131574:	10800023 	ldbuio	r2,0(r2)
81131578:	10803fcc 	andi	r2,r2,255
8113157c:	10803fcc 	andi	r2,r2,255
81131580:	e0bfff0d 	sth	r2,-4(fp)
                if ((leading_char == 0x00e5) || (leading_char == 0))
81131584:	e0bfff0b 	ldhu	r2,-4(fp)
81131588:	10803960 	cmpeqi	r2,r2,229
8113158c:	1000021e 	bne	r2,zero,81131598 <find_first_empty_record_in_root_directory+0xc4>
81131590:	e0bfff0b 	ldhu	r2,-4(fp)
81131594:	1000081e 	bne	r2,zero,811315b8 <find_first_empty_record_in_root_directory+0xe4>
                {
                    result = (sector_index*16 + file_counter) << 16;
81131598:	e0bffb17 	ldw	r2,-20(fp)
8113159c:	1006913a 	slli	r3,r2,4
811315a0:	e0bffc17 	ldw	r2,-16(fp)
811315a4:	1885883a 	add	r2,r3,r2
811315a8:	1004943a 	slli	r2,r2,16
811315ac:	e0bffe15 	stw	r2,-8(fp)
                    return result;
811315b0:	e0bffe17 	ldw	r2,-8(fp)
811315b4:	00000f06 	br	811315f4 <find_first_empty_record_in_root_directory+0x120>
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
811315b8:	e0bffc17 	ldw	r2,-16(fp)
811315bc:	10800044 	addi	r2,r2,1
811315c0:	e0bffc15 	stw	r2,-16(fp)
811315c4:	e0bffc17 	ldw	r2,-16(fp)
811315c8:	10800410 	cmplti	r2,r2,16
811315cc:	103fe31e 	bne	r2,zero,8113155c <__reset+0xfb11155c>
{
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
    int sector_index;
    int result = -1;
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
811315d0:	e0bffb17 	ldw	r2,-20(fp)
811315d4:	10800044 	addi	r2,r2,1
811315d8:	e0bffb15 	stw	r2,-20(fp)
811315dc:	e0fffb17 	ldw	r3,-20(fp)
811315e0:	e0bffd17 	ldw	r2,-12(fp)
811315e4:	18bfd016 	blt	r3,r2,81131528 <__reset+0xfb111528>
811315e8:	00000106 	br	811315f0 <find_first_empty_record_in_root_directory+0x11c>
                }
            }
        }
        else
        {
            break;
811315ec:	0001883a 	nop
        }
    }
    return result;
811315f0:	e0bffe17 	ldw	r2,-8(fp)
}
811315f4:	e037883a 	mov	sp,fp
811315f8:	dfc00117 	ldw	ra,4(sp)
811315fc:	df000017 	ldw	fp,0(sp)
81131600:	dec00204 	addi	sp,sp,8
81131604:	f800283a 	ret

81131608 <convert_filename_to_name_extension>:

void convert_filename_to_name_extension(char *filename, char *name, char *extension)
// This function converts the file name into a name . extension format.
{
81131608:	defffa04 	addi	sp,sp,-24
8113160c:	de00012e 	bgeu	sp,et,81131614 <convert_filename_to_name_extension+0xc>
81131610:	003b68fa 	trap	3
81131614:	df000515 	stw	fp,20(sp)
81131618:	df000504 	addi	fp,sp,20
8113161c:	e13ffd15 	stw	r4,-12(fp)
81131620:	e17ffe15 	stw	r5,-8(fp)
81131624:	e1bfff15 	stw	r6,-4(fp)
    int counter;
    int local = 0;
81131628:	e03ffc15 	stw	zero,-16(fp)
    
    for(counter = 0; counter < 8; counter++)
8113162c:	e03ffb15 	stw	zero,-20(fp)
81131630:	00002506 	br	811316c8 <convert_filename_to_name_extension+0xc0>
    {
        if (filename[local] != '.')
81131634:	e0bffc17 	ldw	r2,-16(fp)
81131638:	e0fffd17 	ldw	r3,-12(fp)
8113163c:	1885883a 	add	r2,r3,r2
81131640:	10800003 	ldbu	r2,0(r2)
81131644:	10803fcc 	andi	r2,r2,255
81131648:	1080201c 	xori	r2,r2,128
8113164c:	10bfe004 	addi	r2,r2,-128
81131650:	10800ba0 	cmpeqi	r2,r2,46
81131654:	1000141e 	bne	r2,zero,811316a8 <convert_filename_to_name_extension+0xa0>
        {
            name[counter] = filename[local];
81131658:	e0bffb17 	ldw	r2,-20(fp)
8113165c:	e0fffe17 	ldw	r3,-8(fp)
81131660:	1885883a 	add	r2,r3,r2
81131664:	e0fffc17 	ldw	r3,-16(fp)
81131668:	e13ffd17 	ldw	r4,-12(fp)
8113166c:	20c7883a 	add	r3,r4,r3
81131670:	18c00003 	ldbu	r3,0(r3)
81131674:	10c00005 	stb	r3,0(r2)
            if (filename[local] != 0) local++;
81131678:	e0bffc17 	ldw	r2,-16(fp)
8113167c:	e0fffd17 	ldw	r3,-12(fp)
81131680:	1885883a 	add	r2,r3,r2
81131684:	10800003 	ldbu	r2,0(r2)
81131688:	10803fcc 	andi	r2,r2,255
8113168c:	1080201c 	xori	r2,r2,128
81131690:	10bfe004 	addi	r2,r2,-128
81131694:	10000926 	beq	r2,zero,811316bc <convert_filename_to_name_extension+0xb4>
81131698:	e0bffc17 	ldw	r2,-16(fp)
8113169c:	10800044 	addi	r2,r2,1
811316a0:	e0bffc15 	stw	r2,-16(fp)
811316a4:	00000506 	br	811316bc <convert_filename_to_name_extension+0xb4>
        }
        else
        {
            name[counter] = ' ';
811316a8:	e0bffb17 	ldw	r2,-20(fp)
811316ac:	e0fffe17 	ldw	r3,-8(fp)
811316b0:	1885883a 	add	r2,r3,r2
811316b4:	00c00804 	movi	r3,32
811316b8:	10c00005 	stb	r3,0(r2)
// This function converts the file name into a name . extension format.
{
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
811316bc:	e0bffb17 	ldw	r2,-20(fp)
811316c0:	10800044 	addi	r2,r2,1
811316c4:	e0bffb15 	stw	r2,-20(fp)
811316c8:	e0bffb17 	ldw	r2,-20(fp)
811316cc:	10800210 	cmplti	r2,r2,8
811316d0:	103fd81e 	bne	r2,zero,81131634 <__reset+0xfb111634>
        else
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
811316d4:	e0bffc17 	ldw	r2,-16(fp)
811316d8:	e0fffd17 	ldw	r3,-12(fp)
811316dc:	1885883a 	add	r2,r3,r2
811316e0:	10800003 	ldbu	r2,0(r2)
811316e4:	10803fcc 	andi	r2,r2,255
811316e8:	1080201c 	xori	r2,r2,128
811316ec:	10bfe004 	addi	r2,r2,-128
811316f0:	10800b98 	cmpnei	r2,r2,46
811316f4:	1000031e 	bne	r2,zero,81131704 <convert_filename_to_name_extension+0xfc>
811316f8:	e0bffc17 	ldw	r2,-16(fp)
811316fc:	10800044 	addi	r2,r2,1
81131700:	e0bffc15 	stw	r2,-16(fp)
    for(counter = 0; counter < 3; counter++)
81131704:	e03ffb15 	stw	zero,-20(fp)
81131708:	00001c06 	br	8113177c <convert_filename_to_name_extension+0x174>
    {
        if (filename[local] != 0)
8113170c:	e0bffc17 	ldw	r2,-16(fp)
81131710:	e0fffd17 	ldw	r3,-12(fp)
81131714:	1885883a 	add	r2,r3,r2
81131718:	10800003 	ldbu	r2,0(r2)
8113171c:	10803fcc 	andi	r2,r2,255
81131720:	1080201c 	xori	r2,r2,128
81131724:	10bfe004 	addi	r2,r2,-128
81131728:	10000c26 	beq	r2,zero,8113175c <convert_filename_to_name_extension+0x154>
        {
            extension[counter] = filename[local];
8113172c:	e0bffb17 	ldw	r2,-20(fp)
81131730:	e0ffff17 	ldw	r3,-4(fp)
81131734:	1885883a 	add	r2,r3,r2
81131738:	e0fffc17 	ldw	r3,-16(fp)
8113173c:	e13ffd17 	ldw	r4,-12(fp)
81131740:	20c7883a 	add	r3,r4,r3
81131744:	18c00003 	ldbu	r3,0(r3)
81131748:	10c00005 	stb	r3,0(r2)
            local++;
8113174c:	e0bffc17 	ldw	r2,-16(fp)
81131750:	10800044 	addi	r2,r2,1
81131754:	e0bffc15 	stw	r2,-16(fp)
81131758:	00000506 	br	81131770 <convert_filename_to_name_extension+0x168>
        }
        else
        {
            extension[counter] = ' ';
8113175c:	e0bffb17 	ldw	r2,-20(fp)
81131760:	e0ffff17 	ldw	r3,-4(fp)
81131764:	1885883a 	add	r2,r3,r2
81131768:	00c00804 	movi	r3,32
8113176c:	10c00005 	stb	r3,0(r2)
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
81131770:	e0bffb17 	ldw	r2,-20(fp)
81131774:	10800044 	addi	r2,r2,1
81131778:	e0bffb15 	stw	r2,-20(fp)
8113177c:	e0bffb17 	ldw	r2,-20(fp)
81131780:	108000d0 	cmplti	r2,r2,3
81131784:	103fe11e 	bne	r2,zero,8113170c <__reset+0xfb11170c>
        {
            extension[counter] = ' ';
        }
    }

}
81131788:	0001883a 	nop
8113178c:	e037883a 	mov	sp,fp
81131790:	df000017 	ldw	fp,0(sp)
81131794:	dec00104 	addi	sp,sp,4
81131798:	f800283a 	ret

8113179c <create_file>:

bool create_file(char *name, t_file_record *file_record, t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
8113179c:	defff504 	addi	sp,sp,-44
811317a0:	de00012e 	bgeu	sp,et,811317a8 <create_file+0xc>
811317a4:	003b68fa 	trap	3
811317a8:	dfc00a15 	stw	ra,40(sp)
811317ac:	df000915 	stw	fp,36(sp)
811317b0:	df000904 	addi	fp,sp,36
811317b4:	e13ffd15 	stw	r4,-12(fp)
811317b8:	e17ffe15 	stw	r5,-8(fp)
811317bc:	e1bfff15 	stw	r6,-4(fp)
    unsigned int cluster_number;
    bool result = false;
811317c0:	e03ff715 	stw	zero,-36(fp)
    
    if (find_first_empty_cluster(&cluster_number))
811317c4:	e0bffc04 	addi	r2,fp,-16
811317c8:	1009883a 	mov	r4,r2
811317cc:	11310cc0 	call	811310cc <find_first_empty_cluster>
811317d0:	1000a026 	beq	r2,zero,81131a54 <create_file+0x2b8>
    {
        int record_index;
        
        if (home_dir->file_record_cluster == 0)
811317d4:	e0bfff17 	ldw	r2,-4(fp)
811317d8:	10800a17 	ldw	r2,40(r2)
811317dc:	1000031e 	bne	r2,zero,811317ec <create_file+0x50>
        {
            // Put a file in the root directory.
            record_index = find_first_empty_record_in_root_directory();
811317e0:	11314d40 	call	811314d4 <find_first_empty_record_in_root_directory>
811317e4:	e0bff815 	stw	r2,-32(fp)
811317e8:	00000606 	br	81131804 <create_file+0x68>
        }
        else
        {
            // Put a file in a subdirectory.
            record_index = find_first_empty_record_in_a_subdirectory(home_dir->start_cluster_index);           
811317ec:	e0bfff17 	ldw	r2,-4(fp)
811317f0:	1080058b 	ldhu	r2,22(r2)
811317f4:	10bfffcc 	andi	r2,r2,65535
811317f8:	1009883a 	mov	r4,r2
811317fc:	11312800 	call	81131280 <find_first_empty_record_in_a_subdirectory>
81131800:	e0bff815 	stw	r2,-32(fp)
        }
        if (record_index >= 0)
81131804:	e0bff817 	ldw	r2,-32(fp)
81131808:	10009216 	blt	r2,zero,81131a54 <create_file+0x2b8>
        {   
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
8113180c:	e13ffd17 	ldw	r4,-12(fp)
81131810:	11303ac0 	call	811303ac <get_dir_divider_location>
81131814:	e0bff915 	stw	r2,-28(fp)
            int last_dir_separator = 0;
81131818:	e03ffa15 	stw	zero,-24(fp)

            // Skip through all directory separators.
            while (location > 0)
8113181c:	00000b06 	br	8113184c <create_file+0xb0>
            {
                last_dir_separator = last_dir_separator+location+1;
81131820:	e0fffa17 	ldw	r3,-24(fp)
81131824:	e0bff917 	ldw	r2,-28(fp)
81131828:	1885883a 	add	r2,r3,r2
8113182c:	10800044 	addi	r2,r2,1
81131830:	e0bffa15 	stw	r2,-24(fp)
                location = get_dir_divider_location( &(name[last_dir_separator]) );
81131834:	e0bffa17 	ldw	r2,-24(fp)
81131838:	e0fffd17 	ldw	r3,-12(fp)
8113183c:	1885883a 	add	r2,r3,r2
81131840:	1009883a 	mov	r4,r2
81131844:	11303ac0 	call	811303ac <get_dir_divider_location>
81131848:	e0bff915 	stw	r2,-28(fp)
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
            int last_dir_separator = 0;

            // Skip through all directory separators.
            while (location > 0)
8113184c:	e0bff917 	ldw	r2,-28(fp)
81131850:	00bff316 	blt	zero,r2,81131820 <__reset+0xfb111820>
            {
                last_dir_separator = last_dir_separator+location+1;
                location = get_dir_divider_location( &(name[last_dir_separator]) );
            }
            
            convert_filename_to_name_extension(&(name[last_dir_separator]), (char *)file_record->name, (char *)file_record->extension);
81131854:	e0bffa17 	ldw	r2,-24(fp)
81131858:	e0fffd17 	ldw	r3,-12(fp)
8113185c:	1887883a 	add	r3,r3,r2
81131860:	e13ffe17 	ldw	r4,-8(fp)
81131864:	e0bffe17 	ldw	r2,-8(fp)
81131868:	10800204 	addi	r2,r2,8
8113186c:	100d883a 	mov	r6,r2
81131870:	200b883a 	mov	r5,r4
81131874:	1809883a 	mov	r4,r3
81131878:	11316080 	call	81131608 <convert_filename_to_name_extension>
                         
            file_record->attributes = 0;
8113187c:	e0bffe17 	ldw	r2,-8(fp)
81131880:	100002c5 	stb	zero,11(r2)
            file_record->create_time = 0;
81131884:	e0bffe17 	ldw	r2,-8(fp)
81131888:	1000030d 	sth	zero,12(r2)
            file_record->create_date = 0;
8113188c:	e0bffe17 	ldw	r2,-8(fp)
81131890:	1000038d 	sth	zero,14(r2)
            file_record->last_access_date = 0;
81131894:	e0bffe17 	ldw	r2,-8(fp)
81131898:	1000040d 	sth	zero,16(r2)
            file_record->last_modified_time = 0;
8113189c:	e0bffe17 	ldw	r2,-8(fp)
811318a0:	1000048d 	sth	zero,18(r2)
            file_record->last_modified_date = 0;
811318a4:	e0bffe17 	ldw	r2,-8(fp)
811318a8:	1000050d 	sth	zero,20(r2)
            file_record->start_cluster_index = cluster_number;
811318ac:	e0bffc17 	ldw	r2,-16(fp)
811318b0:	1007883a 	mov	r3,r2
811318b4:	e0bffe17 	ldw	r2,-8(fp)
811318b8:	10c0058d 	sth	r3,22(r2)
            file_record->file_size_in_bytes = 0;
811318bc:	e0bffe17 	ldw	r2,-8(fp)
811318c0:	10000615 	stw	zero,24(r2)
            file_record->current_cluster_index = cluster_number;
811318c4:	e0fffc17 	ldw	r3,-16(fp)
811318c8:	e0bffe17 	ldw	r2,-8(fp)
811318cc:	10c00715 	stw	r3,28(r2)
            file_record->current_sector_in_cluster = 0;
811318d0:	e0bffe17 	ldw	r2,-8(fp)
811318d4:	10000815 	stw	zero,32(r2)
            file_record->current_byte_position = 0;
811318d8:	e0bffe17 	ldw	r2,-8(fp)
811318dc:	10000915 	stw	zero,36(r2)
            file_record->file_record_cluster = record_index & 0x0000ffff;
811318e0:	e0bff817 	ldw	r2,-32(fp)
811318e4:	10ffffcc 	andi	r3,r2,65535
811318e8:	e0bffe17 	ldw	r2,-8(fp)
811318ec:	10c00a15 	stw	r3,40(r2)
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
811318f0:	e0bff817 	ldw	r2,-32(fp)
811318f4:	1004d43a 	srli	r2,r2,16
811318f8:	1000010e 	bge	r2,zero,81131900 <create_file+0x164>
811318fc:	108003c4 	addi	r2,r2,15
81131900:	1005d13a 	srai	r2,r2,4
81131904:	1007883a 	mov	r3,r2
81131908:	e0bffe17 	ldw	r2,-8(fp)
8113190c:	10c00b15 	stw	r3,44(r2)
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
81131910:	e0bff817 	ldw	r2,-32(fp)
81131914:	1004d43a 	srli	r2,r2,16
81131918:	1007883a 	mov	r3,r2
8113191c:	00a00034 	movhi	r2,32768
81131920:	108003c4 	addi	r2,r2,15
81131924:	1884703a 	and	r2,r3,r2
81131928:	1000040e 	bge	r2,zero,8113193c <create_file+0x1a0>
8113192c:	10bfffc4 	addi	r2,r2,-1
81131930:	00fffc04 	movi	r3,-16
81131934:	10c4b03a 	or	r2,r2,r3
81131938:	10800044 	addi	r2,r2,1
8113193c:	1004917a 	slli	r2,r2,5
81131940:	1007883a 	mov	r3,r2
81131944:	e0bffe17 	ldw	r2,-8(fp)
81131948:	10c00c0d 	sth	r3,48(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
8113194c:	e0bfff17 	ldw	r2,-4(fp)
81131950:	1080058b 	ldhu	r2,22(r2)
81131954:	10ffffcc 	andi	r3,r2,65535
81131958:	e0bffe17 	ldw	r2,-8(fp)
8113195c:	10c00d15 	stw	r3,52(r2)
            file_record->in_use = true;
81131960:	e0bffe17 	ldw	r2,-8(fp)
81131964:	00c00044 	movi	r3,1
81131968:	10c00f15 	stw	r3,60(r2)
            file_record->modified = true;
8113196c:	e0bffe17 	ldw	r2,-8(fp)
81131970:	00c00044 	movi	r3,1
81131974:	10c00e15 	stw	r3,56(r2)
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
81131978:	e0bffe17 	ldw	r2,-8(fp)
8113197c:	10800a17 	ldw	r2,40(r2)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
81131980:	1000071e 	bne	r2,zero,811319a0 <create_file+0x204>
81131984:	00a045b4 	movhi	r2,33046
81131988:	1094e204 	addi	r2,r2,21384
8113198c:	10c01317 	ldw	r3,76(r2)
81131990:	e0bffe17 	ldw	r2,-8(fp)
81131994:	10800b17 	ldw	r2,44(r2)
81131998:	1885883a 	add	r2,r3,r2
8113199c:	00000f06 	br	811319dc <create_file+0x240>
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
811319a0:	00a045b4 	movhi	r2,33046
811319a4:	1094e204 	addi	r2,r2,21384
811319a8:	10c01417 	ldw	r3,80(r2)
811319ac:	e0bffe17 	ldw	r2,-8(fp)
811319b0:	10800a17 	ldw	r2,40(r2)
811319b4:	113fff84 	addi	r4,r2,-2
811319b8:	00a045b4 	movhi	r2,33046
811319bc:	1094e204 	addi	r2,r2,21384
811319c0:	10800383 	ldbu	r2,14(r2)
811319c4:	10803fcc 	andi	r2,r2,255
811319c8:	2085383a 	mul	r2,r4,r2
811319cc:	1887883a 	add	r3,r3,r2
                                     file_record->file_record_sector_in_cluster);
811319d0:	e0bffe17 	ldw	r2,-8(fp)
811319d4:	10800b17 	ldw	r2,44(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
811319d8:	1885883a 	add	r2,r3,r2
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
811319dc:	e0bffb15 	stw	r2,-20(fp)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
                                     file_record->file_record_sector_in_cluster);

			if (Read_Sector_Data(file_record_sector, fat_partition_offset_in_512_byte_sectors))
811319e0:	e0bffb17 	ldw	r2,-20(fp)
811319e4:	d0e09f17 	ldw	r3,-32132(gp)
811319e8:	180b883a 	mov	r5,r3
811319ec:	1009883a 	mov	r4,r2
811319f0:	112efa80 	call	8112efa8 <Read_Sector_Data>
811319f4:	10001726 	beq	r2,zero,81131a54 <create_file+0x2b8>
            {
                if (Write_File_Record_At_Offset(file_record->file_record_offset, file_record))
811319f8:	e0bffe17 	ldw	r2,-8(fp)
811319fc:	10800c0b 	ldhu	r2,48(r2)
81131a00:	10bfffcc 	andi	r2,r2,65535
81131a04:	10a0001c 	xori	r2,r2,32768
81131a08:	10a00004 	addi	r2,r2,-32768
81131a0c:	e17ffe17 	ldw	r5,-8(fp)
81131a10:	1009883a 	mov	r4,r2
81131a14:	112f65c0 	call	8112f65c <Write_File_Record_At_Offset>
81131a18:	10000e26 	beq	r2,zero,81131a54 <create_file+0x2b8>
                {
                    Save_Modified_Sector();
81131a1c:	112ef540 	call	8112ef54 <Save_Modified_Sector>
                    // Mark the first cluster of the file as the last cluster at first.
                    mark_cluster(cluster_number, ((short int) (0xffff)), true);
81131a20:	e0bffc17 	ldw	r2,-16(fp)
81131a24:	01800044 	movi	r6,1
81131a28:	017fffc4 	movi	r5,-1
81131a2c:	1009883a 	mov	r4,r2
81131a30:	112f1440 	call	8112f144 <mark_cluster>
                    if (mark_cluster(cluster_number, ((short int) (0xffff)), false))
81131a34:	e0bffc17 	ldw	r2,-16(fp)
81131a38:	000d883a 	mov	r6,zero
81131a3c:	017fffc4 	movi	r5,-1
81131a40:	1009883a 	mov	r4,r2
81131a44:	112f1440 	call	8112f144 <mark_cluster>
81131a48:	10000226 	beq	r2,zero,81131a54 <create_file+0x2b8>
                    {
                        result = true;
81131a4c:	00800044 	movi	r2,1
81131a50:	e0bff715 	stw	r2,-36(fp)
                }
            }
        }

    }
    return result;           
81131a54:	e0bff717 	ldw	r2,-36(fp)
}
81131a58:	e037883a 	mov	sp,fp
81131a5c:	dfc00117 	ldw	ra,4(sp)
81131a60:	df000017 	ldw	fp,0(sp)
81131a64:	dec00204 	addi	sp,sp,8
81131a68:	f800283a 	ret

81131a6c <copy_file_record_name_to_string>:


void copy_file_record_name_to_string(t_file_record *file_record, char *file_name)
/* Copy a file name from the file record to a given string */
{
81131a6c:	defffb04 	addi	sp,sp,-20
81131a70:	de00012e 	bgeu	sp,et,81131a78 <copy_file_record_name_to_string+0xc>
81131a74:	003b68fa 	trap	3
81131a78:	df000415 	stw	fp,16(sp)
81131a7c:	df000404 	addi	fp,sp,16
81131a80:	e13ffe15 	stw	r4,-8(fp)
81131a84:	e17fff15 	stw	r5,-4(fp)
	int index;
	int flength = 0;
81131a88:	e03ffd15 	stw	zero,-12(fp)

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
81131a8c:	e03ffc15 	stw	zero,-16(fp)
81131a90:	00001506 	br	81131ae8 <copy_file_record_name_to_string+0x7c>
	{
		if (file_record->name[index] != ' ')
81131a94:	e0fffe17 	ldw	r3,-8(fp)
81131a98:	e0bffc17 	ldw	r2,-16(fp)
81131a9c:	1885883a 	add	r2,r3,r2
81131aa0:	10800003 	ldbu	r2,0(r2)
81131aa4:	10803fcc 	andi	r2,r2,255
81131aa8:	10800820 	cmpeqi	r2,r2,32
81131aac:	10000b1e 	bne	r2,zero,81131adc <copy_file_record_name_to_string+0x70>
		{
			file_name[flength] = file_record->name[index];
81131ab0:	e0bffd17 	ldw	r2,-12(fp)
81131ab4:	e0ffff17 	ldw	r3,-4(fp)
81131ab8:	1885883a 	add	r2,r3,r2
81131abc:	e13ffe17 	ldw	r4,-8(fp)
81131ac0:	e0fffc17 	ldw	r3,-16(fp)
81131ac4:	20c7883a 	add	r3,r4,r3
81131ac8:	18c00003 	ldbu	r3,0(r3)
81131acc:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
81131ad0:	e0bffd17 	ldw	r2,-12(fp)
81131ad4:	10800044 	addi	r2,r2,1
81131ad8:	e0bffd15 	stw	r2,-12(fp)
{
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
81131adc:	e0bffc17 	ldw	r2,-16(fp)
81131ae0:	10800044 	addi	r2,r2,1
81131ae4:	e0bffc15 	stw	r2,-16(fp)
81131ae8:	e0bffc17 	ldw	r2,-16(fp)
81131aec:	10800210 	cmplti	r2,r2,8
81131af0:	103fe81e 	bne	r2,zero,81131a94 <__reset+0xfb111a94>
		{
			file_name[flength] = file_record->name[index];
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ')
81131af4:	e0bffe17 	ldw	r2,-8(fp)
81131af8:	10800203 	ldbu	r2,8(r2)
81131afc:	10803fcc 	andi	r2,r2,255
81131b00:	10800820 	cmpeqi	r2,r2,32
81131b04:	1000241e 	bne	r2,zero,81131b98 <copy_file_record_name_to_string+0x12c>
	{
		file_name[flength] = '.';
81131b08:	e0bffd17 	ldw	r2,-12(fp)
81131b0c:	e0ffff17 	ldw	r3,-4(fp)
81131b10:	1885883a 	add	r2,r3,r2
81131b14:	00c00b84 	movi	r3,46
81131b18:	10c00005 	stb	r3,0(r2)
		flength = flength + 1;
81131b1c:	e0bffd17 	ldw	r2,-12(fp)
81131b20:	10800044 	addi	r2,r2,1
81131b24:	e0bffd15 	stw	r2,-12(fp)
		for (index = 0; index < 3; index++)
81131b28:	e03ffc15 	stw	zero,-16(fp)
81131b2c:	00001706 	br	81131b8c <copy_file_record_name_to_string+0x120>
		{
			if (file_record->extension[index] != ' ')
81131b30:	e0fffe17 	ldw	r3,-8(fp)
81131b34:	e0bffc17 	ldw	r2,-16(fp)
81131b38:	1885883a 	add	r2,r3,r2
81131b3c:	10800204 	addi	r2,r2,8
81131b40:	10800003 	ldbu	r2,0(r2)
81131b44:	10803fcc 	andi	r2,r2,255
81131b48:	10800820 	cmpeqi	r2,r2,32
81131b4c:	10000c1e 	bne	r2,zero,81131b80 <copy_file_record_name_to_string+0x114>
			{
				file_name[flength] = file_record->extension[index];
81131b50:	e0bffd17 	ldw	r2,-12(fp)
81131b54:	e0ffff17 	ldw	r3,-4(fp)
81131b58:	1885883a 	add	r2,r3,r2
81131b5c:	e13ffe17 	ldw	r4,-8(fp)
81131b60:	e0fffc17 	ldw	r3,-16(fp)
81131b64:	20c7883a 	add	r3,r4,r3
81131b68:	18c00204 	addi	r3,r3,8
81131b6c:	18c00003 	ldbu	r3,0(r3)
81131b70:	10c00005 	stb	r3,0(r2)
				flength = flength + 1;
81131b74:	e0bffd17 	ldw	r2,-12(fp)
81131b78:	10800044 	addi	r2,r2,1
81131b7c:	e0bffd15 	stw	r2,-12(fp)
	}
	if (file_record->extension[0] != ' ')
	{
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++)
81131b80:	e0bffc17 	ldw	r2,-16(fp)
81131b84:	10800044 	addi	r2,r2,1
81131b88:	e0bffc15 	stw	r2,-16(fp)
81131b8c:	e0bffc17 	ldw	r2,-16(fp)
81131b90:	108000d0 	cmplti	r2,r2,3
81131b94:	103fe61e 	bne	r2,zero,81131b30 <__reset+0xfb111b30>
				file_name[flength] = file_record->extension[index];
				flength = flength + 1;
			}
		}
	}
	file_name[flength] = 0;
81131b98:	e0bffd17 	ldw	r2,-12(fp)
81131b9c:	e0ffff17 	ldw	r3,-4(fp)
81131ba0:	1885883a 	add	r2,r3,r2
81131ba4:	10000005 	stb	zero,0(r2)
}
81131ba8:	0001883a 	nop
81131bac:	e037883a 	mov	sp,fp
81131bb0:	df000017 	ldw	fp,0(sp)
81131bb4:	dec00104 	addi	sp,sp,4
81131bb8:	f800283a 	ret

81131bbc <alt_up_sd_card_open_dev>:
// Direct functions
///////////////////////////////////////////////////////////////////////////


alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name)
{
81131bbc:	defffc04 	addi	sp,sp,-16
81131bc0:	de00012e 	bgeu	sp,et,81131bc8 <alt_up_sd_card_open_dev+0xc>
81131bc4:	003b68fa 	trap	3
81131bc8:	dfc00315 	stw	ra,12(sp)
81131bcc:	df000215 	stw	fp,8(sp)
81131bd0:	df000204 	addi	fp,sp,8
81131bd4:	e13fff15 	stw	r4,-4(fp)
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name, &alt_dev_list);
81131bd8:	d1601304 	addi	r5,gp,-32692
81131bdc:	e13fff17 	ldw	r4,-4(fp)
81131be0:	11380480 	call	81138048 <alt_find_dev>
81131be4:	e0bffe15 	stw	r2,-8(fp)

	if (dev != NULL)
81131be8:	e0bffe17 	ldw	r2,-8(fp)
81131bec:	10001e26 	beq	r2,zero,81131c68 <alt_up_sd_card_open_dev+0xac>
	{
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
81131bf0:	e0bffe17 	ldw	r2,-8(fp)
81131bf4:	10800a17 	ldw	r2,40(r2)
81131bf8:	10808d04 	addi	r2,r2,564
81131bfc:	d0a09915 	stw	r2,-32156(gp)
		status_register = ((int *) SD_CARD_STATUS(dev->base));
81131c00:	e0bffe17 	ldw	r2,-8(fp)
81131c04:	10800a17 	ldw	r2,40(r2)
81131c08:	10808904 	addi	r2,r2,548
81131c0c:	d0a09a15 	stw	r2,-32152(gp)
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
81131c10:	e0bffe17 	ldw	r2,-8(fp)
81131c14:	10800a17 	ldw	r2,40(r2)
81131c18:	10808404 	addi	r2,r2,528
81131c1c:	d0a09b15 	stw	r2,-32148(gp)
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
81131c20:	e0bffe17 	ldw	r2,-8(fp)
81131c24:	10800a17 	ldw	r2,40(r2)
81131c28:	10808c04 	addi	r2,r2,560
81131c2c:	d0a09c15 	stw	r2,-32144(gp)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
81131c30:	e0bffe17 	ldw	r2,-8(fp)
81131c34:	10800a17 	ldw	r2,40(r2)
81131c38:	10808b04 	addi	r2,r2,556
81131c3c:	d0a09d15 	stw	r2,-32140(gp)
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
81131c40:	e0bffe17 	ldw	r2,-8(fp)
81131c44:	10800a17 	ldw	r2,40(r2)
81131c48:	d0a09e15 	stw	r2,-32136(gp)
		device_pointer = dev;
81131c4c:	e0bffe17 	ldw	r2,-8(fp)
81131c50:	d0a0a115 	stw	r2,-32124(gp)
		initialized = false;
81131c54:	d0209715 	stw	zero,-32164(gp)
		is_sd_card_formated_as_FAT16 = false;
81131c58:	d0209815 	stw	zero,-32160(gp)
		search_data.valid = false;
81131c5c:	00a045b4 	movhi	r2,33046
81131c60:	1094dd04 	addi	r2,r2,21364
81131c64:	10000415 	stw	zero,16(r2)
	}
	return dev;
81131c68:	e0bffe17 	ldw	r2,-8(fp)
}
81131c6c:	e037883a 	mov	sp,fp
81131c70:	dfc00117 	ldw	ra,4(sp)
81131c74:	df000017 	ldw	fp,0(sp)
81131c78:	dec00204 	addi	sp,sp,8
81131c7c:	f800283a 	ret

81131c80 <alt_up_sd_card_is_Present>:


bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
81131c80:	defffd04 	addi	sp,sp,-12
81131c84:	de00012e 	bgeu	sp,et,81131c8c <alt_up_sd_card_is_Present+0xc>
81131c88:	003b68fa 	trap	3
81131c8c:	df000215 	stw	fp,8(sp)
81131c90:	df000204 	addi	fp,sp,8
    bool result = false;
81131c94:	e03ffe15 	stw	zero,-8(fp)

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
81131c98:	d0a0a117 	ldw	r2,-32124(gp)
81131c9c:	10000826 	beq	r2,zero,81131cc0 <alt_up_sd_card_is_Present+0x40>
81131ca0:	d0a09917 	ldw	r2,-32156(gp)
81131ca4:	1080002b 	ldhuio	r2,0(r2)
81131ca8:	10bfffcc 	andi	r2,r2,65535
81131cac:	1080008c 	andi	r2,r2,2
81131cb0:	10000326 	beq	r2,zero,81131cc0 <alt_up_sd_card_is_Present+0x40>
    {
        result = true;
81131cb4:	00800044 	movi	r2,1
81131cb8:	e0bffe15 	stw	r2,-8(fp)
81131cbc:	00001e06 	br	81131d38 <alt_up_sd_card_is_Present+0xb8>
    }
	else if (initialized == true)
81131cc0:	d0a09717 	ldw	r2,-32164(gp)
81131cc4:	10800058 	cmpnei	r2,r2,1
81131cc8:	10001b1e 	bne	r2,zero,81131d38 <alt_up_sd_card_is_Present+0xb8>
	{
		int index;

		initialized = false;
81131ccc:	d0209715 	stw	zero,-32164(gp)
		search_data.valid = false;
81131cd0:	00a045b4 	movhi	r2,33046
81131cd4:	1094dd04 	addi	r2,r2,21364
81131cd8:	10000415 	stw	zero,16(r2)
		is_sd_card_formated_as_FAT16 = false;
81131cdc:	d0209815 	stw	zero,-32160(gp)

		for(index = 0; index < MAX_FILES_OPENED; index++)
81131ce0:	e03fff15 	stw	zero,-4(fp)
81131ce4:	00001106 	br	81131d2c <alt_up_sd_card_is_Present+0xac>
		{
			active_files[index].in_use = false;
81131ce8:	00a045b4 	movhi	r2,33046
81131cec:	1094f704 	addi	r2,r2,21468
81131cf0:	e0ffff17 	ldw	r3,-4(fp)
81131cf4:	180691ba 	slli	r3,r3,6
81131cf8:	10c5883a 	add	r2,r2,r3
81131cfc:	10800f04 	addi	r2,r2,60
81131d00:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
81131d04:	00a045b4 	movhi	r2,33046
81131d08:	1094f704 	addi	r2,r2,21468
81131d0c:	e0ffff17 	ldw	r3,-4(fp)
81131d10:	180691ba 	slli	r3,r3,6
81131d14:	10c5883a 	add	r2,r2,r3
81131d18:	10800e04 	addi	r2,r2,56
81131d1c:	10000015 	stw	zero,0(r2)

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
81131d20:	e0bfff17 	ldw	r2,-4(fp)
81131d24:	10800044 	addi	r2,r2,1
81131d28:	e0bfff15 	stw	r2,-4(fp)
81131d2c:	e0bfff17 	ldw	r2,-4(fp)
81131d30:	10800510 	cmplti	r2,r2,20
81131d34:	103fec1e 	bne	r2,zero,81131ce8 <__reset+0xfb111ce8>
		{
			active_files[index].in_use = false;
			active_files[index].modified = false;
		}
	}
    return result;
81131d38:	e0bffe17 	ldw	r2,-8(fp)
}
81131d3c:	e037883a 	mov	sp,fp
81131d40:	df000017 	ldw	fp,0(sp)
81131d44:	dec00104 	addi	sp,sp,4
81131d48:	f800283a 	ret

81131d4c <alt_up_sd_card_is_FAT16>:
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
81131d4c:	defffd04 	addi	sp,sp,-12
81131d50:	de00012e 	bgeu	sp,et,81131d58 <alt_up_sd_card_is_FAT16+0xc>
81131d54:	003b68fa 	trap	3
81131d58:	dfc00215 	stw	ra,8(sp)
81131d5c:	df000115 	stw	fp,4(sp)
81131d60:	df000104 	addi	fp,sp,4
	bool result = false;
81131d64:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present())
81131d68:	1131c800 	call	81131c80 <alt_up_sd_card_is_Present>
81131d6c:	10000c26 	beq	r2,zero,81131da0 <alt_up_sd_card_is_FAT16+0x54>
	{
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false)
81131d70:	d0a09717 	ldw	r2,-32164(gp)
81131d74:	1000071e 	bne	r2,zero,81131d94 <alt_up_sd_card_is_FAT16+0x48>
		{
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
81131d78:	112ff780 	call	8112ff78 <Look_for_FAT16>
81131d7c:	d0a09815 	stw	r2,-32160(gp)
			initialized = is_sd_card_formated_as_FAT16;
81131d80:	d0a09817 	ldw	r2,-32160(gp)
81131d84:	d0a09715 	stw	r2,-32164(gp)
			search_data.valid = false;
81131d88:	00a045b4 	movhi	r2,33046
81131d8c:	1094dd04 	addi	r2,r2,21364
81131d90:	10000415 	stw	zero,16(r2)
		}
		result = is_sd_card_formated_as_FAT16;
81131d94:	d0a09817 	ldw	r2,-32160(gp)
81131d98:	e0bfff15 	stw	r2,-4(fp)
81131d9c:	00000206 	br	81131da8 <alt_up_sd_card_is_FAT16+0x5c>
	}
	else
	{
		// If not then you may as well not open the device.
		initialized = false;
81131da0:	d0209715 	stw	zero,-32164(gp)
		is_sd_card_formated_as_FAT16 = false;
81131da4:	d0209815 	stw	zero,-32160(gp)
	}

	return result;
81131da8:	e0bfff17 	ldw	r2,-4(fp)
}
81131dac:	e037883a 	mov	sp,fp
81131db0:	dfc00117 	ldw	ra,4(sp)
81131db4:	df000017 	ldw	fp,0(sp)
81131db8:	dec00204 	addi	sp,sp,8
81131dbc:	f800283a 	ret

81131dc0 <alt_up_sd_card_find_first>:
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
81131dc0:	deffea04 	addi	sp,sp,-88
81131dc4:	de00012e 	bgeu	sp,et,81131dcc <alt_up_sd_card_find_first+0xc>
81131dc8:	003b68fa 	trap	3
81131dcc:	dfc01515 	stw	ra,84(sp)
81131dd0:	df001415 	stw	fp,80(sp)
81131dd4:	df001404 	addi	fp,sp,80
81131dd8:	e13ffe15 	stw	r4,-8(fp)
81131ddc:	e17fff15 	stw	r5,-4(fp)
	short int result = 2;
81131de0:	00800084 	movi	r2,2
81131de4:	e0bfec0d 	sth	r2,-80(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
81131de8:	1131c800 	call	81131c80 <alt_up_sd_card_is_Present>
81131dec:	10002426 	beq	r2,zero,81131e80 <alt_up_sd_card_find_first+0xc0>
81131df0:	d0a09817 	ldw	r2,-32160(gp)
81131df4:	10002226 	beq	r2,zero,81131e80 <alt_up_sd_card_find_first+0xc0>
	{
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through, &home_directory_cluster, &file_record))
81131df8:	e0ffee04 	addi	r3,fp,-72
81131dfc:	e0bfed04 	addi	r2,fp,-76
81131e00:	180d883a 	mov	r6,r3
81131e04:	100b883a 	mov	r5,r2
81131e08:	e13ffe17 	ldw	r4,-8(fp)
81131e0c:	11307100 	call	81130710 <get_home_directory_cluster_for_file>
81131e10:	10001926 	beq	r2,zero,81131e78 <alt_up_sd_card_find_first+0xb8>
		{
			search_data.directory_root_cluster = home_directory_cluster;
81131e14:	e0bfed17 	ldw	r2,-76(fp)
81131e18:	1007883a 	mov	r3,r2
81131e1c:	00a045b4 	movhi	r2,33046
81131e20:	1094dd04 	addi	r2,r2,21364
81131e24:	10c00015 	stw	r3,0(r2)
			search_data.current_cluster_index = home_directory_cluster;
81131e28:	e0bfed17 	ldw	r2,-76(fp)
81131e2c:	1007883a 	mov	r3,r2
81131e30:	00a045b4 	movhi	r2,33046
81131e34:	1094dd04 	addi	r2,r2,21364
81131e38:	10c00115 	stw	r3,4(r2)
			search_data.current_sector_in_cluster = 0;
81131e3c:	00a045b4 	movhi	r2,33046
81131e40:	1094dd04 	addi	r2,r2,21364
81131e44:	10000215 	stw	zero,8(r2)
			search_data.file_index_in_sector = -1;
81131e48:	00a045b4 	movhi	r2,33046
81131e4c:	1094dd04 	addi	r2,r2,21364
81131e50:	00ffffc4 	movi	r3,-1
81131e54:	10c0030d 	sth	r3,12(r2)
			search_data.valid = true;
81131e58:	00a045b4 	movhi	r2,33046
81131e5c:	1094dd04 	addi	r2,r2,21364
81131e60:	00c00044 	movi	r3,1
81131e64:	10c00415 	stw	r3,16(r2)
			result = alt_up_sd_card_find_next(file_name);
81131e68:	e13fff17 	ldw	r4,-4(fp)
81131e6c:	1131e980 	call	81131e98 <alt_up_sd_card_find_next>
81131e70:	e0bfec0d 	sth	r2,-80(fp)
81131e74:	00000206 	br	81131e80 <alt_up_sd_card_find_first+0xc0>
		}
		else
		{
			result = 1;
81131e78:	00800044 	movi	r2,1
81131e7c:	e0bfec0d 	sth	r2,-80(fp)
		}
	}
	return result;
81131e80:	e0bfec0b 	ldhu	r2,-80(fp)
}
81131e84:	e037883a 	mov	sp,fp
81131e88:	dfc00117 	ldw	ra,4(sp)
81131e8c:	df000017 	ldw	fp,0(sp)
81131e90:	dec00204 	addi	sp,sp,8
81131e94:	f800283a 	ret

81131e98 <alt_up_sd_card_find_next>:
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
81131e98:	deffe404 	addi	sp,sp,-112
81131e9c:	de00012e 	bgeu	sp,et,81131ea4 <alt_up_sd_card_find_next+0xc>
81131ea0:	003b68fa 	trap	3
81131ea4:	dfc01b15 	stw	ra,108(sp)
81131ea8:	df001a15 	stw	fp,104(sp)
81131eac:	df001a04 	addi	fp,sp,104
81131eb0:	e13fff15 	stw	r4,-4(fp)
	short int result = 2;
81131eb4:	00800084 	movi	r2,2
81131eb8:	e0bfe60d 	sth	r2,-104(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
81131ebc:	1131c800 	call	81131c80 <alt_up_sd_card_is_Present>
81131ec0:	1000df26 	beq	r2,zero,81132240 <alt_up_sd_card_find_next+0x3a8>
81131ec4:	d0a09817 	ldw	r2,-32160(gp)
81131ec8:	1000dd26 	beq	r2,zero,81132240 <alt_up_sd_card_find_next+0x3a8>
	{
		if (search_data.valid)
81131ecc:	00a045b4 	movhi	r2,33046
81131ed0:	1094dd04 	addi	r2,r2,21364
81131ed4:	10800417 	ldw	r2,16(r2)
81131ed8:	1000d726 	beq	r2,zero,81132238 <alt_up_sd_card_find_next+0x3a0>
		{
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
81131edc:	00a045b4 	movhi	r2,33046
81131ee0:	1094dd04 	addi	r2,r2,21364
81131ee4:	10800117 	ldw	r2,4(r2)
81131ee8:	e0bfe715 	stw	r2,-100(fp)

			if (cluster == 0)
81131eec:	e0bfe717 	ldw	r2,-100(fp)
81131ef0:	1000561e 	bne	r2,zero,8113204c <alt_up_sd_card_find_next+0x1b4>
			{
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
81131ef4:	00a045b4 	movhi	r2,33046
81131ef8:	1094e204 	addi	r2,r2,21384
81131efc:	1080050b 	ldhu	r2,20(r2)
81131f00:	10bfffcc 	andi	r2,r2,65535
81131f04:	1006917a 	slli	r3,r2,5
81131f08:	00a045b4 	movhi	r2,33046
81131f0c:	1094e204 	addi	r2,r2,21384
81131f10:	1080030b 	ldhu	r2,12(r2)
81131f14:	10bfffcc 	andi	r2,r2,65535
81131f18:	1885283a 	div	r2,r3,r2
81131f1c:	e0bfec15 	stw	r2,-80(fp)
				int sector_index = search_data.current_sector_in_cluster;
81131f20:	00a045b4 	movhi	r2,33046
81131f24:	1094dd04 	addi	r2,r2,21364
81131f28:	10800217 	ldw	r2,8(r2)
81131f2c:	e0bfe815 	stw	r2,-96(fp)
				int file_counter = search_data.file_index_in_sector+1;
81131f30:	00a045b4 	movhi	r2,33046
81131f34:	1094dd04 	addi	r2,r2,21364
81131f38:	1080030b 	ldhu	r2,12(r2)
81131f3c:	10bfffcc 	andi	r2,r2,65535
81131f40:	10a0001c 	xori	r2,r2,32768
81131f44:	10a00004 	addi	r2,r2,-32768
81131f48:	10800044 	addi	r2,r2,1
81131f4c:	e0bfe915 	stw	r2,-92(fp)
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
81131f50:	00003606 	br	8113202c <alt_up_sd_card_find_next+0x194>
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
81131f54:	00a045b4 	movhi	r2,33046
81131f58:	1094e204 	addi	r2,r2,21384
81131f5c:	10c01317 	ldw	r3,76(r2)
81131f60:	e0bfe817 	ldw	r2,-96(fp)
81131f64:	1885883a 	add	r2,r3,r2
81131f68:	1007883a 	mov	r3,r2
81131f6c:	d0a09f17 	ldw	r2,-32132(gp)
81131f70:	100b883a 	mov	r5,r2
81131f74:	1809883a 	mov	r4,r3
81131f78:	112efa80 	call	8112efa8 <Read_Sector_Data>
81131f7c:	10002f26 	beq	r2,zero,8113203c <alt_up_sd_card_find_next+0x1a4>
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
81131f80:	00002306 	br	81132010 <alt_up_sd_card_find_next+0x178>
						{
							if (Read_File_Record_At_Offset(file_counter*32, &file_record, 0, sector_index))
81131f84:	e0bfe917 	ldw	r2,-92(fp)
81131f88:	1004917a 	slli	r2,r2,5
81131f8c:	e13fe817 	ldw	r4,-96(fp)
81131f90:	e0ffef04 	addi	r3,fp,-68
81131f94:	200f883a 	mov	r7,r4
81131f98:	000d883a 	mov	r6,zero
81131f9c:	180b883a 	mov	r5,r3
81131fa0:	1009883a 	mov	r4,r2
81131fa4:	112f3d80 	call	8112f3d8 <Read_File_Record_At_Offset>
81131fa8:	10001626 	beq	r2,zero,81132004 <alt_up_sd_card_find_next+0x16c>
							{
								if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
81131fac:	e0bfef03 	ldbu	r2,-68(fp)
81131fb0:	10803fcc 	andi	r2,r2,255
81131fb4:	10001326 	beq	r2,zero,81132004 <alt_up_sd_card_find_next+0x16c>
81131fb8:	e0bfef03 	ldbu	r2,-68(fp)
81131fbc:	10803fcc 	andi	r2,r2,255
81131fc0:	10803960 	cmpeqi	r2,r2,229
81131fc4:	10000f1e 	bne	r2,zero,81132004 <alt_up_sd_card_find_next+0x16c>
								{
									/* Update search structure. */
									search_data.file_index_in_sector = file_counter;
81131fc8:	e0bfe917 	ldw	r2,-92(fp)
81131fcc:	1007883a 	mov	r3,r2
81131fd0:	00a045b4 	movhi	r2,33046
81131fd4:	1094dd04 	addi	r2,r2,21364
81131fd8:	10c0030d 	sth	r3,12(r2)
									search_data.current_sector_in_cluster = sector_index;
81131fdc:	e0ffe817 	ldw	r3,-96(fp)
81131fe0:	00a045b4 	movhi	r2,33046
81131fe4:	1094dd04 	addi	r2,r2,21364
81131fe8:	10c00215 	stw	r3,8(r2)

									/* Copy file name.*/
									copy_file_record_name_to_string(&file_record, file_name);
81131fec:	e0bfef04 	addi	r2,fp,-68
81131ff0:	e17fff17 	ldw	r5,-4(fp)
81131ff4:	1009883a 	mov	r4,r2
81131ff8:	1131a6c0 	call	81131a6c <copy_file_record_name_to_string>
									return 0;
81131ffc:	0005883a 	mov	r2,zero
81132000:	00009006 	br	81132244 <alt_up_sd_card_find_next+0x3ac>
				for (; sector_index < max_root_dir_sectors; sector_index++)
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
81132004:	e0bfe917 	ldw	r2,-92(fp)
81132008:	10800044 	addi	r2,r2,1
8113200c:	e0bfe915 	stw	r2,-92(fp)
81132010:	e0bfe917 	ldw	r2,-92(fp)
81132014:	10800410 	cmplti	r2,r2,16
81132018:	103fda1e 	bne	r2,zero,81131f84 <__reset+0xfb111f84>
									copy_file_record_name_to_string(&file_record, file_name);
									return 0;
								}
							}
						}
						file_counter = 0;
8113201c:	e03fe915 	stw	zero,-92(fp)
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector+1;
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
81132020:	e0bfe817 	ldw	r2,-96(fp)
81132024:	10800044 	addi	r2,r2,1
81132028:	e0bfe815 	stw	r2,-96(fp)
8113202c:	e0ffe817 	ldw	r3,-96(fp)
81132030:	e0bfec17 	ldw	r2,-80(fp)
81132034:	18bfc716 	blt	r3,r2,81131f54 <__reset+0xfb111f54>
81132038:	00000106 	br	81132040 <alt_up_sd_card_find_next+0x1a8>
						}
						file_counter = 0;
					}
					else
					{
						break;
8113203c:	0001883a 	nop
					}
				}
				result = -1;
81132040:	00bfffc4 	movi	r2,-1
81132044:	e0bfe60d 	sth	r2,-104(fp)
81132048:	00007d06 	br	81132240 <alt_up_sd_card_find_next+0x3a8>
			}
			else
			{
				int file_counter = search_data.file_index_in_sector+1;
8113204c:	00a045b4 	movhi	r2,33046
81132050:	1094dd04 	addi	r2,r2,21364
81132054:	1080030b 	ldhu	r2,12(r2)
81132058:	10bfffcc 	andi	r2,r2,65535
8113205c:	10a0001c 	xori	r2,r2,32768
81132060:	10a00004 	addi	r2,r2,-32768
81132064:	10800044 	addi	r2,r2,1
81132068:	e0bfea15 	stw	r2,-88(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
8113206c:	e0bfe717 	ldw	r2,-100(fp)
81132070:	10ffff84 	addi	r3,r2,-2
81132074:	00a045b4 	movhi	r2,33046
81132078:	1094e204 	addi	r2,r2,21384
8113207c:	10800383 	ldbu	r2,14(r2)
81132080:	10803fcc 	andi	r2,r2,255
81132084:	1885383a 	mul	r2,r3,r2
81132088:	1007883a 	mov	r3,r2
8113208c:	00a045b4 	movhi	r2,33046
81132090:	1094e204 	addi	r2,r2,21384
81132094:	10801417 	ldw	r2,80(r2)
81132098:	1885883a 	add	r2,r3,r2
8113209c:	e0bfed15 	stw	r2,-76(fp)
					int sector_index = search_data.current_sector_in_cluster;
811320a0:	00a045b4 	movhi	r2,33046
811320a4:	1094dd04 	addi	r2,r2,21364
811320a8:	10800217 	ldw	r2,8(r2)
811320ac:	e0bfeb15 	stw	r2,-84(fp)
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
811320b0:	00003806 	br	81132194 <alt_up_sd_card_find_next+0x2fc>
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
811320b4:	e0ffeb17 	ldw	r3,-84(fp)
811320b8:	e0bfed17 	ldw	r2,-76(fp)
811320bc:	1885883a 	add	r2,r3,r2
811320c0:	d0e09f17 	ldw	r3,-32132(gp)
811320c4:	180b883a 	mov	r5,r3
811320c8:	1009883a 	mov	r4,r2
811320cc:	112efa80 	call	8112efa8 <Read_Sector_Data>
811320d0:	10003726 	beq	r2,zero,811321b0 <alt_up_sd_card_find_next+0x318>
						{        
							for (; file_counter < 16; file_counter++)
811320d4:	00002806 	br	81132178 <alt_up_sd_card_find_next+0x2e0>
							{
								if (Read_File_Record_At_Offset(file_counter*32, &file_record, cluster, sector_index))
811320d8:	e0bfea17 	ldw	r2,-88(fp)
811320dc:	1004917a 	slli	r2,r2,5
811320e0:	e13fe717 	ldw	r4,-100(fp)
811320e4:	e17feb17 	ldw	r5,-84(fp)
811320e8:	e0ffef04 	addi	r3,fp,-68
811320ec:	280f883a 	mov	r7,r5
811320f0:	200d883a 	mov	r6,r4
811320f4:	180b883a 	mov	r5,r3
811320f8:	1009883a 	mov	r4,r2
811320fc:	112f3d80 	call	8112f3d8 <Read_File_Record_At_Offset>
81132100:	10001a26 	beq	r2,zero,8113216c <alt_up_sd_card_find_next+0x2d4>
								{
									if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
81132104:	e0bfef03 	ldbu	r2,-68(fp)
81132108:	10803fcc 	andi	r2,r2,255
8113210c:	10001726 	beq	r2,zero,8113216c <alt_up_sd_card_find_next+0x2d4>
81132110:	e0bfef03 	ldbu	r2,-68(fp)
81132114:	10803fcc 	andi	r2,r2,255
81132118:	10803960 	cmpeqi	r2,r2,229
8113211c:	1000131e 	bne	r2,zero,8113216c <alt_up_sd_card_find_next+0x2d4>
									{
										/* Update search structure. */
										search_data.current_cluster_index = cluster;
81132120:	e0ffe717 	ldw	r3,-100(fp)
81132124:	00a045b4 	movhi	r2,33046
81132128:	1094dd04 	addi	r2,r2,21364
8113212c:	10c00115 	stw	r3,4(r2)
										search_data.file_index_in_sector = file_counter;
81132130:	e0bfea17 	ldw	r2,-88(fp)
81132134:	1007883a 	mov	r3,r2
81132138:	00a045b4 	movhi	r2,33046
8113213c:	1094dd04 	addi	r2,r2,21364
81132140:	10c0030d 	sth	r3,12(r2)
										search_data.current_sector_in_cluster = sector_index;
81132144:	e0ffeb17 	ldw	r3,-84(fp)
81132148:	00a045b4 	movhi	r2,33046
8113214c:	1094dd04 	addi	r2,r2,21364
81132150:	10c00215 	stw	r3,8(r2)

										/* Copy file name.*/
										copy_file_record_name_to_string(&file_record, file_name);
81132154:	e0bfef04 	addi	r2,fp,-68
81132158:	e17fff17 	ldw	r5,-4(fp)
8113215c:	1009883a 	mov	r4,r2
81132160:	1131a6c0 	call	81131a6c <copy_file_record_name_to_string>
										return 0;
81132164:	0005883a 	mov	r2,zero
81132168:	00003606 	br	81132244 <alt_up_sd_card_find_next+0x3ac>
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
						{        
							for (; file_counter < 16; file_counter++)
8113216c:	e0bfea17 	ldw	r2,-88(fp)
81132170:	10800044 	addi	r2,r2,1
81132174:	e0bfea15 	stw	r2,-88(fp)
81132178:	e0bfea17 	ldw	r2,-88(fp)
8113217c:	10800410 	cmplti	r2,r2,16
81132180:	103fd51e 	bne	r2,zero,811320d8 <__reset+0xfb1120d8>
										copy_file_record_name_to_string(&file_record, file_name);
										return 0;
									}
								}
							}
							file_counter = 0;
81132184:	e03fea15 	stw	zero,-88(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
81132188:	e0bfeb17 	ldw	r2,-84(fp)
8113218c:	10800044 	addi	r2,r2,1
81132190:	e0bfeb15 	stw	r2,-84(fp)
81132194:	00a045b4 	movhi	r2,33046
81132198:	1094e204 	addi	r2,r2,21384
8113219c:	10800383 	ldbu	r2,14(r2)
811321a0:	10803fcc 	andi	r2,r2,255
811321a4:	e0ffeb17 	ldw	r3,-84(fp)
811321a8:	18bfc216 	blt	r3,r2,811320b4 <__reset+0xfb1120b4>
811321ac:	00000106 	br	811321b4 <alt_up_sd_card_find_next+0x31c>
							}
							file_counter = 0;
						}
						else
						{
							break;
811321b0:	0001883a 	nop
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster)
811321b4:	00a045b4 	movhi	r2,33046
811321b8:	1094e204 	addi	r2,r2,21384
811321bc:	10800383 	ldbu	r2,14(r2)
811321c0:	10803fcc 	andi	r2,r2,255
811321c4:	e0ffeb17 	ldw	r3,-84(fp)
811321c8:	18801716 	blt	r3,r2,81132228 <alt_up_sd_card_find_next+0x390>
					{
						unsigned short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster))
811321cc:	e0bfe717 	ldw	r2,-100(fp)
811321d0:	e0ffee04 	addi	r3,fp,-72
811321d4:	180b883a 	mov	r5,r3
811321d8:	1009883a 	mov	r4,r2
811321dc:	112f0880 	call	8112f088 <get_cluster_flag>
811321e0:	10000f26 	beq	r2,zero,81132220 <alt_up_sd_card_find_next+0x388>
						{
							if ((new_cluster & 0x0000fff8) == 0x0000fff8)
811321e4:	e0bfee0b 	ldhu	r2,-72(fp)
811321e8:	10bfffcc 	andi	r2,r2,65535
811321ec:	10fffe0c 	andi	r3,r2,65528
811321f0:	00bffe14 	movui	r2,65528
811321f4:	1880051e 	bne	r3,r2,8113220c <alt_up_sd_card_find_next+0x374>
							{
								result = -1;
811321f8:	00bfffc4 	movi	r2,-1
811321fc:	e0bfe60d 	sth	r2,-104(fp)
								search_data.valid = false;
81132200:	00a045b4 	movhi	r2,33046
81132204:	1094dd04 	addi	r2,r2,21364
81132208:	10000415 	stw	zero,16(r2)
							}
							cluster = ((new_cluster) & 0x0000fff8);
8113220c:	e0bfee0b 	ldhu	r2,-72(fp)
81132210:	10bfffcc 	andi	r2,r2,65535
81132214:	10bffe0c 	andi	r2,r2,65528
81132218:	e0bfe715 	stw	r2,-100(fp)
8113221c:	00000206 	br	81132228 <alt_up_sd_card_find_next+0x390>
						}
						else
						{
							// Error encountered.                 
							result = -1;
81132220:	00bfffc4 	movi	r2,-1
81132224:	e0bfe60d 	sth	r2,-104(fp)
						}
					}              
				} while (cluster < 0x0000fff8);
81132228:	e0bfe717 	ldw	r2,-100(fp)
8113222c:	00fffdd4 	movui	r3,65527
81132230:	18bf8e0e 	bge	r3,r2,8113206c <__reset+0xfb11206c>
81132234:	00000206 	br	81132240 <alt_up_sd_card_find_next+0x3a8>
			}
		}
		else
		{
			// Call Find_First first.
			result = 3;
81132238:	008000c4 	movi	r2,3
8113223c:	e0bfe60d 	sth	r2,-104(fp)
		}
	}
	return result;
81132240:	e0bfe60b 	ldhu	r2,-104(fp)
}
81132244:	e037883a 	mov	sp,fp
81132248:	dfc00117 	ldw	ra,4(sp)
8113224c:	df000017 	ldw	fp,0(sp)
81132250:	dec00204 	addi	sp,sp,8
81132254:	f800283a 	ret

81132258 <alt_up_sd_card_fopen>:
 *      create - a flag set to true to create a file if it does not already exist
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
81132258:	deffe904 	addi	sp,sp,-92
8113225c:	de00012e 	bgeu	sp,et,81132264 <alt_up_sd_card_fopen+0xc>
81132260:	003b68fa 	trap	3
81132264:	dfc01615 	stw	ra,88(sp)
81132268:	df001515 	stw	fp,84(sp)
8113226c:	df001504 	addi	fp,sp,84
81132270:	e13ffe15 	stw	r4,-8(fp)
81132274:	e17fff15 	stw	r5,-4(fp)
	short int file_record_index = -1;
81132278:	00bfffc4 	movi	r2,-1
8113227c:	e0bfeb0d 	sth	r2,-84(fp)

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
81132280:	1131c800 	call	81131c80 <alt_up_sd_card_is_Present>
81132284:	1000cf26 	beq	r2,zero,811325c4 <alt_up_sd_card_fopen+0x36c>
81132288:	d0a09817 	ldw	r2,-32160(gp)
8113228c:	1000cd26 	beq	r2,zero,811325c4 <alt_up_sd_card_fopen+0x36c>
	{
        unsigned int home_directory_cluster = 0;
81132290:	e03fed15 	stw	zero,-76(fp)
         * Rules:
         *  - no spaces
         *  - at most 12 chatacters per name, with a period in 9th position.
         *  - a / or a \ every at most 12 characters.
         */
        filename_to_upper_case(name);
81132294:	e13ffe17 	ldw	r4,-8(fp)
81132298:	113006c0 	call	8113006c <filename_to_upper_case>
        if (check_file_name_for_FAT16_compliance(name))
8113229c:	e13ffe17 	ldw	r4,-8(fp)
811322a0:	11301380 	call	81130138 <check_file_name_for_FAT16_compliance>
811322a4:	1000c726 	beq	r2,zero,811325c4 <alt_up_sd_card_fopen+0x36c>
        {
			int index;

            /* Get home directory cluster location for the specified file. 0 means root directory. */
            if (!get_home_directory_cluster_for_file(name, (int *) &home_directory_cluster, &home_dir))
811322a8:	e0ffee04 	addi	r3,fp,-72
811322ac:	e0bfed04 	addi	r2,fp,-76
811322b0:	180d883a 	mov	r6,r3
811322b4:	100b883a 	mov	r5,r2
811322b8:	e13ffe17 	ldw	r4,-8(fp)
811322bc:	11307100 	call	81130710 <get_home_directory_cluster_for_file>
811322c0:	1000021e 	bne	r2,zero,811322cc <alt_up_sd_card_fopen+0x74>
            {
                return file_record_index;
811322c4:	e0bfeb0b 	ldhu	r2,-84(fp)
811322c8:	0000bf06 	br	811325c8 <alt_up_sd_card_fopen+0x370>
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
811322cc:	e03fec15 	stw	zero,-80(fp)
811322d0:	00000e06 	br	8113230c <alt_up_sd_card_fopen+0xb4>
    		{
    			if (active_files[index].in_use == false)
811322d4:	00a045b4 	movhi	r2,33046
811322d8:	1094f704 	addi	r2,r2,21468
811322dc:	e0ffec17 	ldw	r3,-80(fp)
811322e0:	180691ba 	slli	r3,r3,6
811322e4:	10c5883a 	add	r2,r2,r3
811322e8:	10800f04 	addi	r2,r2,60
811322ec:	10800017 	ldw	r2,0(r2)
811322f0:	1000031e 	bne	r2,zero,81132300 <alt_up_sd_card_fopen+0xa8>
    			{
    				file_record_index = index;
811322f4:	e0bfec17 	ldw	r2,-80(fp)
811322f8:	e0bfeb0d 	sth	r2,-84(fp)
    				break;
811322fc:	00000606 	br	81132318 <alt_up_sd_card_fopen+0xc0>
            {
                return file_record_index;
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
81132300:	e0bfec17 	ldw	r2,-80(fp)
81132304:	10800044 	addi	r2,r2,1
81132308:	e0bfec15 	stw	r2,-80(fp)
8113230c:	e0bfec17 	ldw	r2,-80(fp)
81132310:	10800510 	cmplti	r2,r2,20
81132314:	103fef1e 	bne	r2,zero,811322d4 <__reset+0xfb1122d4>
    			{
    				file_record_index = index;
    				break;
    			}
    		}
    		if (file_record_index >= 0)
81132318:	e0bfeb0f 	ldh	r2,-84(fp)
8113231c:	1000a916 	blt	r2,zero,811325c4 <alt_up_sd_card_fopen+0x36c>
    		{
    			/* If file record is found, then look for the specified file. If the create flag is set to true 
    			 * and the file is not found, then it should be created in the current directory. 
    			 */
                
                if (find_file_in_directory(home_directory_cluster, name, &(active_files[file_record_index])))
81132320:	e0bfed17 	ldw	r2,-76(fp)
81132324:	1009883a 	mov	r4,r2
81132328:	e0bfeb0f 	ldh	r2,-84(fp)
8113232c:	100691ba 	slli	r3,r2,6
81132330:	00a045b4 	movhi	r2,33046
81132334:	1094f704 	addi	r2,r2,21468
81132338:	1885883a 	add	r2,r3,r2
8113233c:	100d883a 	mov	r6,r2
81132340:	e17ffe17 	ldw	r5,-8(fp)
81132344:	1130c500 	call	81130c50 <find_file_in_directory>
81132348:	10007b26 	beq	r2,zero,81132538 <alt_up_sd_card_fopen+0x2e0>
                {
                    if (create)
8113234c:	e0bfff17 	ldw	r2,-4(fp)
81132350:	10000226 	beq	r2,zero,8113235c <alt_up_sd_card_fopen+0x104>
                    {
                        /* Do not allow overwriting existing files for now. */
                        return -1;
81132354:	00bfffc4 	movi	r2,-1
81132358:	00009b06 	br	811325c8 <alt_up_sd_card_fopen+0x370>
                    }
                    active_files[file_record_index].current_cluster_index = active_files[file_record_index].start_cluster_index;
8113235c:	e13feb0f 	ldh	r4,-84(fp)
81132360:	e0ffeb0f 	ldh	r3,-84(fp)
81132364:	00a045b4 	movhi	r2,33046
81132368:	1094f704 	addi	r2,r2,21468
8113236c:	180691ba 	slli	r3,r3,6
81132370:	10c5883a 	add	r2,r2,r3
81132374:	10800584 	addi	r2,r2,22
81132378:	1080000b 	ldhu	r2,0(r2)
8113237c:	10ffffcc 	andi	r3,r2,65535
81132380:	00a045b4 	movhi	r2,33046
81132384:	1094f704 	addi	r2,r2,21468
81132388:	200891ba 	slli	r4,r4,6
8113238c:	1105883a 	add	r2,r2,r4
81132390:	10800704 	addi	r2,r2,28
81132394:	10c00015 	stw	r3,0(r2)
                    active_files[file_record_index].current_sector_in_cluster = 0;
81132398:	e0ffeb0f 	ldh	r3,-84(fp)
8113239c:	00a045b4 	movhi	r2,33046
811323a0:	1094f704 	addi	r2,r2,21468
811323a4:	180691ba 	slli	r3,r3,6
811323a8:	10c5883a 	add	r2,r2,r3
811323ac:	10800804 	addi	r2,r2,32
811323b0:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].current_byte_position = 0;
811323b4:	e0ffeb0f 	ldh	r3,-84(fp)
811323b8:	00a045b4 	movhi	r2,33046
811323bc:	1094f704 	addi	r2,r2,21468
811323c0:	180691ba 	slli	r3,r3,6
811323c4:	10c5883a 	add	r2,r2,r3
811323c8:	10800904 	addi	r2,r2,36
811323cc:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].in_use = true;
811323d0:	e0ffeb0f 	ldh	r3,-84(fp)
811323d4:	00a045b4 	movhi	r2,33046
811323d8:	1094f704 	addi	r2,r2,21468
811323dc:	180691ba 	slli	r3,r3,6
811323e0:	10c5883a 	add	r2,r2,r3
811323e4:	10800f04 	addi	r2,r2,60
811323e8:	00c00044 	movi	r3,1
811323ec:	10c00015 	stw	r3,0(r2)
    				active_files[file_record_index].modified = false;
811323f0:	e0ffeb0f 	ldh	r3,-84(fp)
811323f4:	00a045b4 	movhi	r2,33046
811323f8:	1094f704 	addi	r2,r2,21468
811323fc:	180691ba 	slli	r3,r3,6
81132400:	10c5883a 	add	r2,r2,r3
81132404:	10800e04 	addi	r2,r2,56
81132408:	10000015 	stw	zero,0(r2)

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
8113240c:	e03fec15 	stw	zero,-80(fp)
81132410:	00004506 	br	81132528 <alt_up_sd_card_fopen+0x2d0>
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
81132414:	e0ffeb0f 	ldh	r3,-84(fp)
81132418:	e0bfec17 	ldw	r2,-80(fp)
8113241c:	18803f26 	beq	r3,r2,8113251c <alt_up_sd_card_fopen+0x2c4>
81132420:	00a045b4 	movhi	r2,33046
81132424:	1094f704 	addi	r2,r2,21468
81132428:	e0ffec17 	ldw	r3,-80(fp)
8113242c:	180691ba 	slli	r3,r3,6
81132430:	10c5883a 	add	r2,r2,r3
81132434:	10800f04 	addi	r2,r2,60
81132438:	10800017 	ldw	r2,0(r2)
8113243c:	10800058 	cmpnei	r2,r2,1
81132440:	1000361e 	bne	r2,zero,8113251c <alt_up_sd_card_fopen+0x2c4>
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
81132444:	e0ffeb0f 	ldh	r3,-84(fp)
81132448:	00a045b4 	movhi	r2,33046
8113244c:	1094f704 	addi	r2,r2,21468
81132450:	180691ba 	slli	r3,r3,6
81132454:	10c5883a 	add	r2,r2,r3
81132458:	10800a04 	addi	r2,r2,40
8113245c:	10c00017 	ldw	r3,0(r2)
81132460:	00a045b4 	movhi	r2,33046
81132464:	1094f704 	addi	r2,r2,21468
81132468:	e13fec17 	ldw	r4,-80(fp)
8113246c:	200891ba 	slli	r4,r4,6
81132470:	1105883a 	add	r2,r2,r4
81132474:	10800a04 	addi	r2,r2,40
81132478:	10800017 	ldw	r2,0(r2)
8113247c:	1880271e 	bne	r3,r2,8113251c <alt_up_sd_card_fopen+0x2c4>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
81132480:	e0ffeb0f 	ldh	r3,-84(fp)
81132484:	00a045b4 	movhi	r2,33046
81132488:	1094f704 	addi	r2,r2,21468
8113248c:	180691ba 	slli	r3,r3,6
81132490:	10c5883a 	add	r2,r2,r3
81132494:	10800b04 	addi	r2,r2,44
81132498:	10c00017 	ldw	r3,0(r2)
8113249c:	00a045b4 	movhi	r2,33046
811324a0:	1094f704 	addi	r2,r2,21468
811324a4:	e13fec17 	ldw	r4,-80(fp)
811324a8:	200891ba 	slli	r4,r4,6
811324ac:	1105883a 	add	r2,r2,r4
811324b0:	10800b04 	addi	r2,r2,44
811324b4:	10800017 	ldw	r2,0(r2)
					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
811324b8:	1880181e 	bne	r3,r2,8113251c <alt_up_sd_card_fopen+0x2c4>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
811324bc:	e0ffeb0f 	ldh	r3,-84(fp)
811324c0:	00a045b4 	movhi	r2,33046
811324c4:	1094f704 	addi	r2,r2,21468
811324c8:	180691ba 	slli	r3,r3,6
811324cc:	10c5883a 	add	r2,r2,r3
811324d0:	10800c04 	addi	r2,r2,48
811324d4:	1100000b 	ldhu	r4,0(r2)
811324d8:	00a045b4 	movhi	r2,33046
811324dc:	1094f704 	addi	r2,r2,21468
811324e0:	e0ffec17 	ldw	r3,-80(fp)
811324e4:	180691ba 	slli	r3,r3,6
811324e8:	10c5883a 	add	r2,r2,r3
811324ec:	10800c04 	addi	r2,r2,48
811324f0:	1080000b 	ldhu	r2,0(r2)
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
811324f4:	20ffffcc 	andi	r3,r4,65535
811324f8:	18e0001c 	xori	r3,r3,32768
811324fc:	18e00004 	addi	r3,r3,-32768
81132500:	10bfffcc 	andi	r2,r2,65535
81132504:	10a0001c 	xori	r2,r2,32768
81132508:	10a00004 	addi	r2,r2,-32768
8113250c:	1880031e 	bne	r3,r2,8113251c <alt_up_sd_card_fopen+0x2c4>
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
							{
								// file already in use.
								file_record_index = -2;
81132510:	00bfff84 	movi	r2,-2
81132514:	e0bfeb0d 	sth	r2,-84(fp)
								break;
81132518:	00002a06 	br	811325c4 <alt_up_sd_card_fopen+0x36c>
                    active_files[file_record_index].current_byte_position = 0;
                    active_files[file_record_index].in_use = true;
    				active_files[file_record_index].modified = false;

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
8113251c:	e0bfec17 	ldw	r2,-80(fp)
81132520:	10800044 	addi	r2,r2,1
81132524:	e0bfec15 	stw	r2,-80(fp)
81132528:	e0bfec17 	ldw	r2,-80(fp)
8113252c:	10800510 	cmplti	r2,r2,20
81132530:	103fb81e 	bne	r2,zero,81132414 <__reset+0xfb112414>
81132534:	00002306 	br	811325c4 <alt_up_sd_card_fopen+0x36c>
							}
						}
					}

                }
                else if (create)
81132538:	e0bfff17 	ldw	r2,-4(fp)
8113253c:	10001f26 	beq	r2,zero,811325bc <alt_up_sd_card_fopen+0x364>
                {
                    /* Create file if needed. */
                    if (create_file(name, &(active_files[file_record_index]), &home_dir))
81132540:	e0bfeb0f 	ldh	r2,-84(fp)
81132544:	100691ba 	slli	r3,r2,6
81132548:	00a045b4 	movhi	r2,33046
8113254c:	1094f704 	addi	r2,r2,21468
81132550:	1885883a 	add	r2,r3,r2
81132554:	e0ffee04 	addi	r3,fp,-72
81132558:	180d883a 	mov	r6,r3
8113255c:	100b883a 	mov	r5,r2
81132560:	e13ffe17 	ldw	r4,-8(fp)
81132564:	113179c0 	call	8113179c <create_file>
81132568:	10001126 	beq	r2,zero,811325b0 <alt_up_sd_card_fopen+0x358>
                    {
                        active_files[file_record_index].in_use = true;
8113256c:	e0ffeb0f 	ldh	r3,-84(fp)
81132570:	00a045b4 	movhi	r2,33046
81132574:	1094f704 	addi	r2,r2,21468
81132578:	180691ba 	slli	r3,r3,6
8113257c:	10c5883a 	add	r2,r2,r3
81132580:	10800f04 	addi	r2,r2,60
81132584:	00c00044 	movi	r3,1
81132588:	10c00015 	stw	r3,0(r2)
    					active_files[file_record_index].modified = true;
8113258c:	e0ffeb0f 	ldh	r3,-84(fp)
81132590:	00a045b4 	movhi	r2,33046
81132594:	1094f704 	addi	r2,r2,21468
81132598:	180691ba 	slli	r3,r3,6
8113259c:	10c5883a 	add	r2,r2,r3
811325a0:	10800e04 	addi	r2,r2,56
811325a4:	00c00044 	movi	r3,1
811325a8:	10c00015 	stw	r3,0(r2)
811325ac:	00000506 	br	811325c4 <alt_up_sd_card_fopen+0x36c>
                    }
                    else
                    {
                        /* If file creation fails then return an invalid file handle. */
                        file_record_index = -1;
811325b0:	00bfffc4 	movi	r2,-1
811325b4:	e0bfeb0d 	sth	r2,-84(fp)
811325b8:	00000206 	br	811325c4 <alt_up_sd_card_fopen+0x36c>
                    }                
                }
                else
                {
                    /* Otherwise the file could not be opened.*/
                    file_record_index = -1;
811325bc:	00bfffc4 	movi	r2,-1
811325c0:	e0bfeb0d 	sth	r2,-84(fp)
                }
    		}
        }
	}

	return file_record_index;
811325c4:	e0bfeb0b 	ldhu	r2,-84(fp)
}
811325c8:	e037883a 	mov	sp,fp
811325cc:	dfc00117 	ldw	ra,4(sp)
811325d0:	df000017 	ldw	fp,0(sp)
811325d4:	dec00204 	addi	sp,sp,8
811325d8:	f800283a 	ret

811325dc <alt_up_sd_card_set_attributes>:


void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
811325dc:	defffd04 	addi	sp,sp,-12
811325e0:	de00012e 	bgeu	sp,et,811325e8 <alt_up_sd_card_set_attributes+0xc>
811325e4:	003b68fa 	trap	3
811325e8:	df000215 	stw	fp,8(sp)
811325ec:	df000204 	addi	fp,sp,8
811325f0:	2007883a 	mov	r3,r4
811325f4:	2805883a 	mov	r2,r5
811325f8:	e0fffe0d 	sth	r3,-8(fp)
811325fc:	e0bfff0d 	sth	r2,-4(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
81132600:	e0bffe0f 	ldh	r2,-8(fp)
81132604:	10001416 	blt	r2,zero,81132658 <alt_up_sd_card_set_attributes+0x7c>
81132608:	e0bffe0f 	ldh	r2,-8(fp)
8113260c:	10800508 	cmpgei	r2,r2,20
81132610:	1000111e 	bne	r2,zero,81132658 <alt_up_sd_card_set_attributes+0x7c>
    {
        if (active_files[file_handle].in_use)
81132614:	e0fffe0f 	ldh	r3,-8(fp)
81132618:	00a045b4 	movhi	r2,33046
8113261c:	1094f704 	addi	r2,r2,21468
81132620:	180691ba 	slli	r3,r3,6
81132624:	10c5883a 	add	r2,r2,r3
81132628:	10800f04 	addi	r2,r2,60
8113262c:	10800017 	ldw	r2,0(r2)
81132630:	10000926 	beq	r2,zero,81132658 <alt_up_sd_card_set_attributes+0x7c>
        {
            active_files[file_handle].attributes = ((char)(attributes & 0x00ff));
81132634:	e0fffe0f 	ldh	r3,-8(fp)
81132638:	e0bfff0b 	ldhu	r2,-4(fp)
8113263c:	1009883a 	mov	r4,r2
81132640:	00a045b4 	movhi	r2,33046
81132644:	1094f704 	addi	r2,r2,21468
81132648:	180691ba 	slli	r3,r3,6
8113264c:	10c5883a 	add	r2,r2,r3
81132650:	108002c4 	addi	r2,r2,11
81132654:	11000005 	stb	r4,0(r2)
        }
    }
}
81132658:	0001883a 	nop
8113265c:	e037883a 	mov	sp,fp
81132660:	df000017 	ldw	fp,0(sp)
81132664:	dec00104 	addi	sp,sp,4
81132668:	f800283a 	ret

8113266c <alt_up_sd_card_get_attributes>:


short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
8113266c:	defffd04 	addi	sp,sp,-12
81132670:	de00012e 	bgeu	sp,et,81132678 <alt_up_sd_card_get_attributes+0xc>
81132674:	003b68fa 	trap	3
81132678:	df000215 	stw	fp,8(sp)
8113267c:	df000204 	addi	fp,sp,8
81132680:	2005883a 	mov	r2,r4
81132684:	e0bfff0d 	sth	r2,-4(fp)
	short int result = -1;
81132688:	00bfffc4 	movi	r2,-1
8113268c:	e0bffe0d 	sth	r2,-8(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
81132690:	e0bfff0f 	ldh	r2,-4(fp)
81132694:	10001416 	blt	r2,zero,811326e8 <alt_up_sd_card_get_attributes+0x7c>
81132698:	e0bfff0f 	ldh	r2,-4(fp)
8113269c:	10800508 	cmpgei	r2,r2,20
811326a0:	1000111e 	bne	r2,zero,811326e8 <alt_up_sd_card_get_attributes+0x7c>
    {
        if (active_files[file_handle].in_use)
811326a4:	e0ffff0f 	ldh	r3,-4(fp)
811326a8:	00a045b4 	movhi	r2,33046
811326ac:	1094f704 	addi	r2,r2,21468
811326b0:	180691ba 	slli	r3,r3,6
811326b4:	10c5883a 	add	r2,r2,r3
811326b8:	10800f04 	addi	r2,r2,60
811326bc:	10800017 	ldw	r2,0(r2)
811326c0:	10000926 	beq	r2,zero,811326e8 <alt_up_sd_card_get_attributes+0x7c>
		{
			result = ((active_files[file_handle].attributes) & 0x00ff);
811326c4:	e0ffff0f 	ldh	r3,-4(fp)
811326c8:	00a045b4 	movhi	r2,33046
811326cc:	1094f704 	addi	r2,r2,21468
811326d0:	180691ba 	slli	r3,r3,6
811326d4:	10c5883a 	add	r2,r2,r3
811326d8:	108002c4 	addi	r2,r2,11
811326dc:	10800003 	ldbu	r2,0(r2)
811326e0:	10803fcc 	andi	r2,r2,255
811326e4:	e0bffe0d 	sth	r2,-8(fp)
		}
	}
	return result;
811326e8:	e0bffe0b 	ldhu	r2,-8(fp)
}
811326ec:	e037883a 	mov	sp,fp
811326f0:	df000017 	ldw	fp,0(sp)
811326f4:	dec00104 	addi	sp,sp,4
811326f8:	f800283a 	ret

811326fc <alt_up_sd_card_read>:

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
811326fc:	defffa04 	addi	sp,sp,-24
81132700:	de00012e 	bgeu	sp,et,81132708 <alt_up_sd_card_read+0xc>
81132704:	003b68fa 	trap	3
81132708:	dfc00515 	stw	ra,20(sp)
8113270c:	df000415 	stw	fp,16(sp)
81132710:	df000404 	addi	fp,sp,16
81132714:	2005883a 	mov	r2,r4
81132718:	e0bfff0d 	sth	r2,-4(fp)
    short int ch = -1;
8113271c:	00bfffc4 	movi	r2,-1
81132720:	e0bffc0d 	sth	r2,-16(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
81132724:	e0bfff0f 	ldh	r2,-4(fp)
81132728:	1000ce16 	blt	r2,zero,81132a64 <alt_up_sd_card_read+0x368>
8113272c:	e0bfff0f 	ldh	r2,-4(fp)
81132730:	10800508 	cmpgei	r2,r2,20
81132734:	1000cb1e 	bne	r2,zero,81132a64 <alt_up_sd_card_read+0x368>
    {
        if (active_files[file_handle].in_use)
81132738:	e0ffff0f 	ldh	r3,-4(fp)
8113273c:	00a045b4 	movhi	r2,33046
81132740:	1094f704 	addi	r2,r2,21468
81132744:	180691ba 	slli	r3,r3,6
81132748:	10c5883a 	add	r2,r2,r3
8113274c:	10800f04 	addi	r2,r2,60
81132750:	10800017 	ldw	r2,0(r2)
81132754:	1000c326 	beq	r2,zero,81132a64 <alt_up_sd_card_read+0x368>
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
81132758:	e0ffff0f 	ldh	r3,-4(fp)
8113275c:	00a045b4 	movhi	r2,33046
81132760:	1094f704 	addi	r2,r2,21468
81132764:	180691ba 	slli	r3,r3,6
81132768:	10c5883a 	add	r2,r2,r3
8113276c:	10800904 	addi	r2,r2,36
81132770:	10c00017 	ldw	r3,0(r2)
81132774:	e13fff0f 	ldh	r4,-4(fp)
81132778:	00a045b4 	movhi	r2,33046
8113277c:	1094f704 	addi	r2,r2,21468
81132780:	200891ba 	slli	r4,r4,6
81132784:	1105883a 	add	r2,r2,r4
81132788:	10800604 	addi	r2,r2,24
8113278c:	10800017 	ldw	r2,0(r2)
81132790:	1880b42e 	bgeu	r3,r2,81132a64 <alt_up_sd_card_read+0x368>
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81132794:	00a045b4 	movhi	r2,33046
81132798:	1094e204 	addi	r2,r2,21384
8113279c:	10c01417 	ldw	r3,80(r2)
811327a0:	e13fff0f 	ldh	r4,-4(fp)
811327a4:	00a045b4 	movhi	r2,33046
811327a8:	1094f704 	addi	r2,r2,21468
811327ac:	200891ba 	slli	r4,r4,6
811327b0:	1105883a 	add	r2,r2,r4
811327b4:	10800704 	addi	r2,r2,28
811327b8:	10800017 	ldw	r2,0(r2)
811327bc:	113fff84 	addi	r4,r2,-2
811327c0:	00a045b4 	movhi	r2,33046
811327c4:	1094e204 	addi	r2,r2,21384
811327c8:	10800383 	ldbu	r2,14(r2)
811327cc:	10803fcc 	andi	r2,r2,255
811327d0:	2085383a 	mul	r2,r4,r2
811327d4:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;
811327d8:	e13fff0f 	ldh	r4,-4(fp)
811327dc:	00a045b4 	movhi	r2,33046
811327e0:	1094f704 	addi	r2,r2,21468
811327e4:	200891ba 	slli	r4,r4,6
811327e8:	1105883a 	add	r2,r2,r4
811327ec:	10800804 	addi	r2,r2,32
811327f0:	10800017 	ldw	r2,0(r2)
    {
        if (active_files[file_handle].in_use)
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
811327f4:	1885883a 	add	r2,r3,r2
811327f8:	e0bffd15 	stw	r2,-12(fp)
                                  active_files[file_handle].current_sector_in_cluster;
                
                if ((active_files[file_handle].current_byte_position > 0) && ((active_files[file_handle].current_byte_position % 512) == 0))
811327fc:	e0ffff0f 	ldh	r3,-4(fp)
81132800:	00a045b4 	movhi	r2,33046
81132804:	1094f704 	addi	r2,r2,21468
81132808:	180691ba 	slli	r3,r3,6
8113280c:	10c5883a 	add	r2,r2,r3
81132810:	10800904 	addi	r2,r2,36
81132814:	10800017 	ldw	r2,0(r2)
81132818:	10006826 	beq	r2,zero,811329bc <alt_up_sd_card_read+0x2c0>
8113281c:	e0ffff0f 	ldh	r3,-4(fp)
81132820:	00a045b4 	movhi	r2,33046
81132824:	1094f704 	addi	r2,r2,21468
81132828:	180691ba 	slli	r3,r3,6
8113282c:	10c5883a 	add	r2,r2,r3
81132830:	10800904 	addi	r2,r2,36
81132834:	10800017 	ldw	r2,0(r2)
81132838:	10807fcc 	andi	r2,r2,511
8113283c:	10005f1e 	bne	r2,zero,811329bc <alt_up_sd_card_read+0x2c0>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
81132840:	e0ffff0f 	ldh	r3,-4(fp)
81132844:	00a045b4 	movhi	r2,33046
81132848:	1094f704 	addi	r2,r2,21468
8113284c:	180691ba 	slli	r3,r3,6
81132850:	10c5883a 	add	r2,r2,r3
81132854:	10800804 	addi	r2,r2,32
81132858:	10c00017 	ldw	r3,0(r2)
8113285c:	00a045b4 	movhi	r2,33046
81132860:	1094e204 	addi	r2,r2,21384
81132864:	10800383 	ldbu	r2,14(r2)
81132868:	10803fcc 	andi	r2,r2,255
8113286c:	10bfffc4 	addi	r2,r2,-1
81132870:	1880401e 	bne	r3,r2,81132974 <alt_up_sd_card_read+0x278>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
81132874:	e0ffff0f 	ldh	r3,-4(fp)
81132878:	00a045b4 	movhi	r2,33046
8113287c:	1094f704 	addi	r2,r2,21468
81132880:	180691ba 	slli	r3,r3,6
81132884:	10c5883a 	add	r2,r2,r3
81132888:	10800704 	addi	r2,r2,28
8113288c:	10800017 	ldw	r2,0(r2)
81132890:	e0fffe04 	addi	r3,fp,-8
81132894:	180b883a 	mov	r5,r3
81132898:	1009883a 	mov	r4,r2
8113289c:	112f0880 	call	8112f088 <get_cluster_flag>
811328a0:	10003226 	beq	r2,zero,8113296c <alt_up_sd_card_read+0x270>
                        {
                            if ((next_cluster & 0x0000fff8) == 0x0000fff8)
811328a4:	e0bffe0b 	ldhu	r2,-8(fp)
811328a8:	10bfffcc 	andi	r2,r2,65535
811328ac:	10fffe0c 	andi	r3,r2,65528
811328b0:	00bffe14 	movui	r2,65528
811328b4:	1880021e 	bne	r3,r2,811328c0 <alt_up_sd_card_read+0x1c4>
                            {
                                /* End of file */
                                return -1;
811328b8:	00bfffc4 	movi	r2,-1
811328bc:	00006a06 	br	81132a68 <alt_up_sd_card_read+0x36c>
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
811328c0:	e13fff0f 	ldh	r4,-4(fp)
811328c4:	e0bffe0b 	ldhu	r2,-8(fp)
811328c8:	10ffffcc 	andi	r3,r2,65535
811328cc:	00a045b4 	movhi	r2,33046
811328d0:	1094f704 	addi	r2,r2,21468
811328d4:	200891ba 	slli	r4,r4,6
811328d8:	1105883a 	add	r2,r2,r4
811328dc:	10800704 	addi	r2,r2,28
811328e0:	10c00015 	stw	r3,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
811328e4:	e0ffff0f 	ldh	r3,-4(fp)
811328e8:	00a045b4 	movhi	r2,33046
811328ec:	1094f704 	addi	r2,r2,21468
811328f0:	180691ba 	slli	r3,r3,6
811328f4:	10c5883a 	add	r2,r2,r3
811328f8:	10800804 	addi	r2,r2,32
811328fc:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81132900:	00a045b4 	movhi	r2,33046
81132904:	1094e204 	addi	r2,r2,21384
81132908:	10c01417 	ldw	r3,80(r2)
8113290c:	e13fff0f 	ldh	r4,-4(fp)
81132910:	00a045b4 	movhi	r2,33046
81132914:	1094f704 	addi	r2,r2,21468
81132918:	200891ba 	slli	r4,r4,6
8113291c:	1105883a 	add	r2,r2,r4
81132920:	10800704 	addi	r2,r2,28
81132924:	10800017 	ldw	r2,0(r2)
81132928:	113fff84 	addi	r4,r2,-2
8113292c:	00a045b4 	movhi	r2,33046
81132930:	1094e204 	addi	r2,r2,21384
81132934:	10800383 	ldbu	r2,14(r2)
81132938:	10803fcc 	andi	r2,r2,255
8113293c:	2085383a 	mul	r2,r4,r2
81132940:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;                                
81132944:	e13fff0f 	ldh	r4,-4(fp)
81132948:	00a045b4 	movhi	r2,33046
8113294c:	1094f704 	addi	r2,r2,21468
81132950:	200891ba 	slli	r4,r4,6
81132954:	1105883a 	add	r2,r2,r4
81132958:	10800804 	addi	r2,r2,32
8113295c:	10800017 	ldw	r2,0(r2)
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81132960:	1885883a 	add	r2,r3,r2
81132964:	e0bffd15 	stw	r2,-12(fp)
81132968:	00001406 	br	811329bc <alt_up_sd_card_read+0x2c0>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return -2;
8113296c:	00bfff84 	movi	r2,-2
81132970:	00003d06 	br	81132a68 <alt_up_sd_card_read+0x36c>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
81132974:	e13fff0f 	ldh	r4,-4(fp)
81132978:	e0ffff0f 	ldh	r3,-4(fp)
8113297c:	00a045b4 	movhi	r2,33046
81132980:	1094f704 	addi	r2,r2,21468
81132984:	180691ba 	slli	r3,r3,6
81132988:	10c5883a 	add	r2,r2,r3
8113298c:	10800804 	addi	r2,r2,32
81132990:	10800017 	ldw	r2,0(r2)
81132994:	10c00044 	addi	r3,r2,1
81132998:	00a045b4 	movhi	r2,33046
8113299c:	1094f704 	addi	r2,r2,21468
811329a0:	200891ba 	slli	r4,r4,6
811329a4:	1105883a 	add	r2,r2,r4
811329a8:	10800804 	addi	r2,r2,32
811329ac:	10c00015 	stw	r3,0(r2)
                        data_sector = data_sector + 1;
811329b0:	e0bffd17 	ldw	r2,-12(fp)
811329b4:	10800044 	addi	r2,r2,1
811329b8:	e0bffd15 	stw	r2,-12(fp)
                    }
                }
                // Reading te first byte of the file.
                if (current_sector_index != (data_sector + fat_partition_offset_in_512_byte_sectors))
811329bc:	d0e09f17 	ldw	r3,-32132(gp)
811329c0:	e0bffd17 	ldw	r2,-12(fp)
811329c4:	1885883a 	add	r2,r3,r2
811329c8:	1007883a 	mov	r3,r2
811329cc:	d0a0a317 	ldw	r2,-32116(gp)
811329d0:	18800726 	beq	r3,r2,811329f0 <alt_up_sd_card_read+0x2f4>
                {
                    if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
811329d4:	d0a09f17 	ldw	r2,-32132(gp)
811329d8:	100b883a 	mov	r5,r2
811329dc:	e13ffd17 	ldw	r4,-12(fp)
811329e0:	112efa80 	call	8112efa8 <Read_Sector_Data>
811329e4:	1000021e 	bne	r2,zero,811329f0 <alt_up_sd_card_read+0x2f4>
                    {
						return -2;
811329e8:	00bfff84 	movi	r2,-2
811329ec:	00001e06 	br	81132a68 <alt_up_sd_card_read+0x36c>
                    }
                }

                ch = (unsigned char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
811329f0:	d0e09e17 	ldw	r3,-32136(gp)
811329f4:	e13fff0f 	ldh	r4,-4(fp)
811329f8:	00a045b4 	movhi	r2,33046
811329fc:	1094f704 	addi	r2,r2,21468
81132a00:	200891ba 	slli	r4,r4,6
81132a04:	1105883a 	add	r2,r2,r4
81132a08:	10800904 	addi	r2,r2,36
81132a0c:	10800017 	ldw	r2,0(r2)
81132a10:	10807fcc 	andi	r2,r2,511
81132a14:	1885883a 	add	r2,r3,r2
81132a18:	10800023 	ldbuio	r2,0(r2)
81132a1c:	10803fcc 	andi	r2,r2,255
81132a20:	10803fcc 	andi	r2,r2,255
81132a24:	e0bffc0d 	sth	r2,-16(fp)
                active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
81132a28:	e13fff0f 	ldh	r4,-4(fp)
81132a2c:	e0ffff0f 	ldh	r3,-4(fp)
81132a30:	00a045b4 	movhi	r2,33046
81132a34:	1094f704 	addi	r2,r2,21468
81132a38:	180691ba 	slli	r3,r3,6
81132a3c:	10c5883a 	add	r2,r2,r3
81132a40:	10800904 	addi	r2,r2,36
81132a44:	10800017 	ldw	r2,0(r2)
81132a48:	10c00044 	addi	r3,r2,1
81132a4c:	00a045b4 	movhi	r2,33046
81132a50:	1094f704 	addi	r2,r2,21468
81132a54:	200891ba 	slli	r4,r4,6
81132a58:	1105883a 	add	r2,r2,r4
81132a5c:	10800904 	addi	r2,r2,36
81132a60:	10c00015 	stw	r3,0(r2)
            }
        }
    }
    
    return ch;
81132a64:	e0bffc0b 	ldhu	r2,-16(fp)
}
81132a68:	e037883a 	mov	sp,fp
81132a6c:	dfc00117 	ldw	ra,4(sp)
81132a70:	df000017 	ldw	fp,0(sp)
81132a74:	dec00204 	addi	sp,sp,8
81132a78:	f800283a 	ret

81132a7c <alt_up_sd_card_write>:


bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
81132a7c:	defff804 	addi	sp,sp,-32
81132a80:	de00012e 	bgeu	sp,et,81132a88 <alt_up_sd_card_write+0xc>
81132a84:	003b68fa 	trap	3
81132a88:	dfc00715 	stw	ra,28(sp)
81132a8c:	df000615 	stw	fp,24(sp)
81132a90:	df000604 	addi	fp,sp,24
81132a94:	2007883a 	mov	r3,r4
81132a98:	2805883a 	mov	r2,r5
81132a9c:	e0fffe0d 	sth	r3,-8(fp)
81132aa0:	e0bfff05 	stb	r2,-4(fp)
    bool result = false;
81132aa4:	e03ffa15 	stw	zero,-24(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
81132aa8:	e0bffe0f 	ldh	r2,-8(fp)
81132aac:	10017716 	blt	r2,zero,8113308c <alt_up_sd_card_write+0x610>
81132ab0:	e0bffe0f 	ldh	r2,-8(fp)
81132ab4:	10800508 	cmpgei	r2,r2,20
81132ab8:	1001741e 	bne	r2,zero,8113308c <alt_up_sd_card_write+0x610>
    {
        if (active_files[file_handle].in_use)
81132abc:	e0fffe0f 	ldh	r3,-8(fp)
81132ac0:	00a045b4 	movhi	r2,33046
81132ac4:	1094f704 	addi	r2,r2,21468
81132ac8:	180691ba 	slli	r3,r3,6
81132acc:	10c5883a 	add	r2,r2,r3
81132ad0:	10800f04 	addi	r2,r2,60
81132ad4:	10800017 	ldw	r2,0(r2)
81132ad8:	10016c26 	beq	r2,zero,8113308c <alt_up_sd_card_write+0x610>
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81132adc:	00a045b4 	movhi	r2,33046
81132ae0:	1094e204 	addi	r2,r2,21384
81132ae4:	10c01417 	ldw	r3,80(r2)
81132ae8:	e13ffe0f 	ldh	r4,-8(fp)
81132aec:	00a045b4 	movhi	r2,33046
81132af0:	1094f704 	addi	r2,r2,21468
81132af4:	200891ba 	slli	r4,r4,6
81132af8:	1105883a 	add	r2,r2,r4
81132afc:	10800704 	addi	r2,r2,28
81132b00:	10800017 	ldw	r2,0(r2)
81132b04:	113fff84 	addi	r4,r2,-2
81132b08:	00a045b4 	movhi	r2,33046
81132b0c:	1094e204 	addi	r2,r2,21384
81132b10:	10800383 	ldbu	r2,14(r2)
81132b14:	10803fcc 	andi	r2,r2,255
81132b18:	2085383a 	mul	r2,r4,r2
81132b1c:	1887883a 	add	r3,r3,r2
                              active_files[file_handle].current_sector_in_cluster;
81132b20:	e13ffe0f 	ldh	r4,-8(fp)
81132b24:	00a045b4 	movhi	r2,33046
81132b28:	1094f704 	addi	r2,r2,21468
81132b2c:	200891ba 	slli	r4,r4,6
81132b30:	1105883a 	add	r2,r2,r4
81132b34:	10800804 	addi	r2,r2,32
81132b38:	10800017 	ldw	r2,0(r2)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    {
        if (active_files[file_handle].in_use)
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81132b3c:	1885883a 	add	r2,r3,r2
81132b40:	e0bffb15 	stw	r2,-20(fp)
                              active_files[file_handle].current_sector_in_cluster;
			short int buffer_offset = active_files[file_handle].current_byte_position % boot_sector_data.sector_size_in_bytes;
81132b44:	e0fffe0f 	ldh	r3,-8(fp)
81132b48:	00a045b4 	movhi	r2,33046
81132b4c:	1094f704 	addi	r2,r2,21468
81132b50:	180691ba 	slli	r3,r3,6
81132b54:	10c5883a 	add	r2,r2,r3
81132b58:	10800904 	addi	r2,r2,36
81132b5c:	10c00017 	ldw	r3,0(r2)
81132b60:	00a045b4 	movhi	r2,33046
81132b64:	1094e204 	addi	r2,r2,21384
81132b68:	1080030b 	ldhu	r2,12(r2)
81132b6c:	10bfffcc 	andi	r2,r2,65535
81132b70:	1889203a 	divu	r4,r3,r2
81132b74:	2085383a 	mul	r2,r4,r2
81132b78:	1885c83a 	sub	r2,r3,r2
81132b7c:	e0bffc0d 	sth	r2,-16(fp)

			if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
81132b80:	e0fffe0f 	ldh	r3,-8(fp)
81132b84:	00a045b4 	movhi	r2,33046
81132b88:	1094f704 	addi	r2,r2,21468
81132b8c:	180691ba 	slli	r3,r3,6
81132b90:	10c5883a 	add	r2,r2,r3
81132b94:	10800904 	addi	r2,r2,36
81132b98:	10c00017 	ldw	r3,0(r2)
81132b9c:	e13ffe0f 	ldh	r4,-8(fp)
81132ba0:	00a045b4 	movhi	r2,33046
81132ba4:	1094f704 	addi	r2,r2,21468
81132ba8:	200891ba 	slli	r4,r4,6
81132bac:	1105883a 	add	r2,r2,r4
81132bb0:	10800604 	addi	r2,r2,24
81132bb4:	10800017 	ldw	r2,0(r2)
81132bb8:	1880672e 	bgeu	r3,r2,81132d58 <alt_up_sd_card_write+0x2dc>
            {
                if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
81132bbc:	e0fffe0f 	ldh	r3,-8(fp)
81132bc0:	00a045b4 	movhi	r2,33046
81132bc4:	1094f704 	addi	r2,r2,21468
81132bc8:	180691ba 	slli	r3,r3,6
81132bcc:	10c5883a 	add	r2,r2,r3
81132bd0:	10800904 	addi	r2,r2,36
81132bd4:	10800017 	ldw	r2,0(r2)
81132bd8:	1000e126 	beq	r2,zero,81132f60 <alt_up_sd_card_write+0x4e4>
81132bdc:	e0bffc0f 	ldh	r2,-16(fp)
81132be0:	1000df1e 	bne	r2,zero,81132f60 <alt_up_sd_card_write+0x4e4>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
81132be4:	e0fffe0f 	ldh	r3,-8(fp)
81132be8:	00a045b4 	movhi	r2,33046
81132bec:	1094f704 	addi	r2,r2,21468
81132bf0:	180691ba 	slli	r3,r3,6
81132bf4:	10c5883a 	add	r2,r2,r3
81132bf8:	10800804 	addi	r2,r2,32
81132bfc:	10c00017 	ldw	r3,0(r2)
81132c00:	00a045b4 	movhi	r2,33046
81132c04:	1094e204 	addi	r2,r2,21384
81132c08:	10800383 	ldbu	r2,14(r2)
81132c0c:	10803fcc 	andi	r2,r2,255
81132c10:	10bfffc4 	addi	r2,r2,-1
81132c14:	18803d1e 	bne	r3,r2,81132d0c <alt_up_sd_card_write+0x290>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
81132c18:	e0fffe0f 	ldh	r3,-8(fp)
81132c1c:	00a045b4 	movhi	r2,33046
81132c20:	1094f704 	addi	r2,r2,21468
81132c24:	180691ba 	slli	r3,r3,6
81132c28:	10c5883a 	add	r2,r2,r3
81132c2c:	10800704 	addi	r2,r2,28
81132c30:	10800017 	ldw	r2,0(r2)
81132c34:	e0fffc84 	addi	r3,fp,-14
81132c38:	180b883a 	mov	r5,r3
81132c3c:	1009883a 	mov	r4,r2
81132c40:	112f0880 	call	8112f088 <get_cluster_flag>
81132c44:	10002f26 	beq	r2,zero,81132d04 <alt_up_sd_card_write+0x288>
                        {
                            if (next_cluster < 0x0000fff8)
81132c48:	e0bffc8b 	ldhu	r2,-14(fp)
81132c4c:	10bfffcc 	andi	r2,r2,65535
81132c50:	10bffe28 	cmpgeui	r2,r2,65528
81132c54:	1000c21e 	bne	r2,zero,81132f60 <alt_up_sd_card_write+0x4e4>
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
81132c58:	e13ffe0f 	ldh	r4,-8(fp)
81132c5c:	e0bffc8b 	ldhu	r2,-14(fp)
81132c60:	10ffffcc 	andi	r3,r2,65535
81132c64:	00a045b4 	movhi	r2,33046
81132c68:	1094f704 	addi	r2,r2,21468
81132c6c:	200891ba 	slli	r4,r4,6
81132c70:	1105883a 	add	r2,r2,r4
81132c74:	10800704 	addi	r2,r2,28
81132c78:	10c00015 	stw	r3,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
81132c7c:	e0fffe0f 	ldh	r3,-8(fp)
81132c80:	00a045b4 	movhi	r2,33046
81132c84:	1094f704 	addi	r2,r2,21468
81132c88:	180691ba 	slli	r3,r3,6
81132c8c:	10c5883a 	add	r2,r2,r3
81132c90:	10800804 	addi	r2,r2,32
81132c94:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81132c98:	00a045b4 	movhi	r2,33046
81132c9c:	1094e204 	addi	r2,r2,21384
81132ca0:	10c01417 	ldw	r3,80(r2)
81132ca4:	e13ffe0f 	ldh	r4,-8(fp)
81132ca8:	00a045b4 	movhi	r2,33046
81132cac:	1094f704 	addi	r2,r2,21468
81132cb0:	200891ba 	slli	r4,r4,6
81132cb4:	1105883a 	add	r2,r2,r4
81132cb8:	10800704 	addi	r2,r2,28
81132cbc:	10800017 	ldw	r2,0(r2)
81132cc0:	113fff84 	addi	r4,r2,-2
81132cc4:	00a045b4 	movhi	r2,33046
81132cc8:	1094e204 	addi	r2,r2,21384
81132ccc:	10800383 	ldbu	r2,14(r2)
81132cd0:	10803fcc 	andi	r2,r2,255
81132cd4:	2085383a 	mul	r2,r4,r2
81132cd8:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;                                
81132cdc:	e13ffe0f 	ldh	r4,-8(fp)
81132ce0:	00a045b4 	movhi	r2,33046
81132ce4:	1094f704 	addi	r2,r2,21468
81132ce8:	200891ba 	slli	r4,r4,6
81132cec:	1105883a 	add	r2,r2,r4
81132cf0:	10800804 	addi	r2,r2,32
81132cf4:	10800017 	ldw	r2,0(r2)
                        {
                            if (next_cluster < 0x0000fff8)
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81132cf8:	1885883a 	add	r2,r3,r2
81132cfc:	e0bffb15 	stw	r2,-20(fp)
81132d00:	00009706 	br	81132f60 <alt_up_sd_card_write+0x4e4>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return false;
81132d04:	0005883a 	mov	r2,zero
81132d08:	0000e106 	br	81133090 <alt_up_sd_card_write+0x614>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
81132d0c:	e13ffe0f 	ldh	r4,-8(fp)
81132d10:	e0fffe0f 	ldh	r3,-8(fp)
81132d14:	00a045b4 	movhi	r2,33046
81132d18:	1094f704 	addi	r2,r2,21468
81132d1c:	180691ba 	slli	r3,r3,6
81132d20:	10c5883a 	add	r2,r2,r3
81132d24:	10800804 	addi	r2,r2,32
81132d28:	10800017 	ldw	r2,0(r2)
81132d2c:	10c00044 	addi	r3,r2,1
81132d30:	00a045b4 	movhi	r2,33046
81132d34:	1094f704 	addi	r2,r2,21468
81132d38:	200891ba 	slli	r4,r4,6
81132d3c:	1105883a 	add	r2,r2,r4
81132d40:	10800804 	addi	r2,r2,32
81132d44:	10c00015 	stw	r3,0(r2)
                        data_sector = data_sector + 1;
81132d48:	e0bffb17 	ldw	r2,-20(fp)
81132d4c:	10800044 	addi	r2,r2,1
81132d50:	e0bffb15 	stw	r2,-20(fp)
81132d54:	00008206 	br	81132f60 <alt_up_sd_card_write+0x4e4>
                }
            }
			else
			{
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
81132d58:	e0fffe0f 	ldh	r3,-8(fp)
81132d5c:	00a045b4 	movhi	r2,33046
81132d60:	1094f704 	addi	r2,r2,21468
81132d64:	180691ba 	slli	r3,r3,6
81132d68:	10c5883a 	add	r2,r2,r3
81132d6c:	10800904 	addi	r2,r2,36
81132d70:	10800017 	ldw	r2,0(r2)
81132d74:	10007a26 	beq	r2,zero,81132f60 <alt_up_sd_card_write+0x4e4>
81132d78:	e0bffc0f 	ldh	r2,-16(fp)
81132d7c:	1000781e 	bne	r2,zero,81132f60 <alt_up_sd_card_write+0x4e4>
				{
					if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
81132d80:	e0fffe0f 	ldh	r3,-8(fp)
81132d84:	00a045b4 	movhi	r2,33046
81132d88:	1094f704 	addi	r2,r2,21468
81132d8c:	180691ba 	slli	r3,r3,6
81132d90:	10c5883a 	add	r2,r2,r3
81132d94:	10800804 	addi	r2,r2,32
81132d98:	10c00017 	ldw	r3,0(r2)
81132d9c:	00a045b4 	movhi	r2,33046
81132da0:	1094e204 	addi	r2,r2,21384
81132da4:	10800383 	ldbu	r2,14(r2)
81132da8:	10803fcc 	andi	r2,r2,255
81132dac:	10bfffc4 	addi	r2,r2,-1
81132db0:	18803e1e 	bne	r3,r2,81132eac <alt_up_sd_card_write+0x430>
					{
						/* Find a new cluster if possible. */
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number))
81132db4:	e0bffd04 	addi	r2,fp,-12
81132db8:	1009883a 	mov	r4,r2
81132dbc:	11310cc0 	call	811310cc <find_first_empty_cluster>
81132dc0:	10003826 	beq	r2,zero,81132ea4 <alt_up_sd_card_write+0x428>
						{
							// mark clusters in both File Allocation Tables.
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), true);
81132dc4:	e0fffe0f 	ldh	r3,-8(fp)
81132dc8:	00a045b4 	movhi	r2,33046
81132dcc:	1094f704 	addi	r2,r2,21468
81132dd0:	180691ba 	slli	r3,r3,6
81132dd4:	10c5883a 	add	r2,r2,r3
81132dd8:	10800704 	addi	r2,r2,28
81132ddc:	10800017 	ldw	r2,0(r2)
81132de0:	e0fffd17 	ldw	r3,-12(fp)
81132de4:	18ffffcc 	andi	r3,r3,65535
81132de8:	18e0001c 	xori	r3,r3,32768
81132dec:	18e00004 	addi	r3,r3,-32768
81132df0:	01800044 	movi	r6,1
81132df4:	180b883a 	mov	r5,r3
81132df8:	1009883a 	mov	r4,r2
81132dfc:	112f1440 	call	8112f144 <mark_cluster>
							mark_cluster(cluster_number, 0xffff, true);
81132e00:	e0bffd17 	ldw	r2,-12(fp)
81132e04:	01800044 	movi	r6,1
81132e08:	017fffc4 	movi	r5,-1
81132e0c:	1009883a 	mov	r4,r2
81132e10:	112f1440 	call	8112f144 <mark_cluster>
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), false);
81132e14:	e0fffe0f 	ldh	r3,-8(fp)
81132e18:	00a045b4 	movhi	r2,33046
81132e1c:	1094f704 	addi	r2,r2,21468
81132e20:	180691ba 	slli	r3,r3,6
81132e24:	10c5883a 	add	r2,r2,r3
81132e28:	10800704 	addi	r2,r2,28
81132e2c:	10800017 	ldw	r2,0(r2)
81132e30:	e0fffd17 	ldw	r3,-12(fp)
81132e34:	18ffffcc 	andi	r3,r3,65535
81132e38:	18e0001c 	xori	r3,r3,32768
81132e3c:	18e00004 	addi	r3,r3,-32768
81132e40:	000d883a 	mov	r6,zero
81132e44:	180b883a 	mov	r5,r3
81132e48:	1009883a 	mov	r4,r2
81132e4c:	112f1440 	call	8112f144 <mark_cluster>
							mark_cluster(cluster_number, 0xffff, false);
81132e50:	e0bffd17 	ldw	r2,-12(fp)
81132e54:	000d883a 	mov	r6,zero
81132e58:	017fffc4 	movi	r5,-1
81132e5c:	1009883a 	mov	r4,r2
81132e60:	112f1440 	call	8112f144 <mark_cluster>
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index = cluster_number;
81132e64:	e13ffe0f 	ldh	r4,-8(fp)
81132e68:	e0fffd17 	ldw	r3,-12(fp)
81132e6c:	00a045b4 	movhi	r2,33046
81132e70:	1094f704 	addi	r2,r2,21468
81132e74:	200891ba 	slli	r4,r4,6
81132e78:	1105883a 	add	r2,r2,r4
81132e7c:	10800704 	addi	r2,r2,28
81132e80:	10c00015 	stw	r3,0(r2)
							active_files[file_handle].current_sector_in_cluster = 0;
81132e84:	e0fffe0f 	ldh	r3,-8(fp)
81132e88:	00a045b4 	movhi	r2,33046
81132e8c:	1094f704 	addi	r2,r2,21468
81132e90:	180691ba 	slli	r3,r3,6
81132e94:	10c5883a 	add	r2,r2,r3
81132e98:	10800804 	addi	r2,r2,32
81132e9c:	10000015 	stw	zero,0(r2)
81132ea0:	00001506 	br	81132ef8 <alt_up_sd_card_write+0x47c>
						}
						else
						{
							return false;
81132ea4:	0005883a 	mov	r2,zero
81132ea8:	00007906 	br	81133090 <alt_up_sd_card_write+0x614>
						}
					}
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
81132eac:	e13ffe0f 	ldh	r4,-8(fp)
81132eb0:	e0fffe0f 	ldh	r3,-8(fp)
81132eb4:	00a045b4 	movhi	r2,33046
81132eb8:	1094f704 	addi	r2,r2,21468
81132ebc:	180691ba 	slli	r3,r3,6
81132ec0:	10c5883a 	add	r2,r2,r3
81132ec4:	10800904 	addi	r2,r2,36
81132ec8:	10c00017 	ldw	r3,0(r2)
81132ecc:	00a045b4 	movhi	r2,33046
81132ed0:	1094e204 	addi	r2,r2,21384
81132ed4:	1080030b 	ldhu	r2,12(r2)
81132ed8:	10bfffcc 	andi	r2,r2,65535
81132edc:	1887203a 	divu	r3,r3,r2
81132ee0:	00a045b4 	movhi	r2,33046
81132ee4:	1094f704 	addi	r2,r2,21468
81132ee8:	200891ba 	slli	r4,r4,6
81132eec:	1105883a 	add	r2,r2,r4
81132ef0:	10800804 	addi	r2,r2,32
81132ef4:	10c00015 	stw	r3,0(r2)
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81132ef8:	00a045b4 	movhi	r2,33046
81132efc:	1094e204 	addi	r2,r2,21384
81132f00:	10c01417 	ldw	r3,80(r2)
81132f04:	e13ffe0f 	ldh	r4,-8(fp)
81132f08:	00a045b4 	movhi	r2,33046
81132f0c:	1094f704 	addi	r2,r2,21468
81132f10:	200891ba 	slli	r4,r4,6
81132f14:	1105883a 	add	r2,r2,r4
81132f18:	10800704 	addi	r2,r2,28
81132f1c:	10800017 	ldw	r2,0(r2)
81132f20:	113fff84 	addi	r4,r2,-2
81132f24:	00a045b4 	movhi	r2,33046
81132f28:	1094e204 	addi	r2,r2,21384
81132f2c:	10800383 	ldbu	r2,14(r2)
81132f30:	10803fcc 	andi	r2,r2,255
81132f34:	2085383a 	mul	r2,r4,r2
81132f38:	1887883a 	add	r3,r3,r2
                          active_files[file_handle].current_sector_in_cluster;
81132f3c:	e13ffe0f 	ldh	r4,-8(fp)
81132f40:	00a045b4 	movhi	r2,33046
81132f44:	1094f704 	addi	r2,r2,21468
81132f48:	200891ba 	slli	r4,r4,6
81132f4c:	1105883a 	add	r2,r2,r4
81132f50:	10800804 	addi	r2,r2,32
81132f54:	10800017 	ldw	r2,0(r2)
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81132f58:	1885883a 	add	r2,r3,r2
81132f5c:	e0bffb15 	stw	r2,-20(fp)
                          active_files[file_handle].current_sector_in_cluster;
				}
			}
            // Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
            if (current_sector_index != data_sector + fat_partition_offset_in_512_byte_sectors)
81132f60:	d0e09f17 	ldw	r3,-32132(gp)
81132f64:	e0bffb17 	ldw	r2,-20(fp)
81132f68:	1885883a 	add	r2,r3,r2
81132f6c:	1007883a 	mov	r3,r2
81132f70:	d0a0a317 	ldw	r2,-32116(gp)
81132f74:	18800726 	beq	r3,r2,81132f94 <alt_up_sd_card_write+0x518>
            {
                if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
81132f78:	d0a09f17 	ldw	r2,-32132(gp)
81132f7c:	100b883a 	mov	r5,r2
81132f80:	e13ffb17 	ldw	r4,-20(fp)
81132f84:	112efa80 	call	8112efa8 <Read_Sector_Data>
81132f88:	1000021e 	bne	r2,zero,81132f94 <alt_up_sd_card_write+0x518>
                {
					return false;
81132f8c:	0005883a 	mov	r2,zero
81132f90:	00003f06 	br	81133090 <alt_up_sd_card_write+0x614>
                }
            }
            // Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
81132f94:	d0e09e17 	ldw	r3,-32136(gp)
81132f98:	e0bffc0f 	ldh	r2,-16(fp)
81132f9c:	1885883a 	add	r2,r3,r2
81132fa0:	e0ffff07 	ldb	r3,-4(fp)
81132fa4:	10c00025 	stbio	r3,0(r2)
			active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
81132fa8:	e13ffe0f 	ldh	r4,-8(fp)
81132fac:	e0fffe0f 	ldh	r3,-8(fp)
81132fb0:	00a045b4 	movhi	r2,33046
81132fb4:	1094f704 	addi	r2,r2,21468
81132fb8:	180691ba 	slli	r3,r3,6
81132fbc:	10c5883a 	add	r2,r2,r3
81132fc0:	10800904 	addi	r2,r2,36
81132fc4:	10800017 	ldw	r2,0(r2)
81132fc8:	10c00044 	addi	r3,r2,1
81132fcc:	00a045b4 	movhi	r2,33046
81132fd0:	1094f704 	addi	r2,r2,21468
81132fd4:	200891ba 	slli	r4,r4,6
81132fd8:	1105883a 	add	r2,r2,r4
81132fdc:	10800904 	addi	r2,r2,36
81132fe0:	10c00015 	stw	r3,0(r2)

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position >= active_files[file_handle].file_size_in_bytes)
81132fe4:	e0fffe0f 	ldh	r3,-8(fp)
81132fe8:	00a045b4 	movhi	r2,33046
81132fec:	1094f704 	addi	r2,r2,21468
81132ff0:	180691ba 	slli	r3,r3,6
81132ff4:	10c5883a 	add	r2,r2,r3
81132ff8:	10800904 	addi	r2,r2,36
81132ffc:	10c00017 	ldw	r3,0(r2)
81133000:	e13ffe0f 	ldh	r4,-8(fp)
81133004:	00a045b4 	movhi	r2,33046
81133008:	1094f704 	addi	r2,r2,21468
8113300c:	200891ba 	slli	r4,r4,6
81133010:	1105883a 	add	r2,r2,r4
81133014:	10800604 	addi	r2,r2,24
81133018:	10800017 	ldw	r2,0(r2)
8113301c:	18801736 	bltu	r3,r2,8113307c <alt_up_sd_card_write+0x600>
			{
				active_files[file_handle].file_size_in_bytes = active_files[file_handle].file_size_in_bytes + 1;
81133020:	e13ffe0f 	ldh	r4,-8(fp)
81133024:	e0fffe0f 	ldh	r3,-8(fp)
81133028:	00a045b4 	movhi	r2,33046
8113302c:	1094f704 	addi	r2,r2,21468
81133030:	180691ba 	slli	r3,r3,6
81133034:	10c5883a 	add	r2,r2,r3
81133038:	10800604 	addi	r2,r2,24
8113303c:	10800017 	ldw	r2,0(r2)
81133040:	10c00044 	addi	r3,r2,1
81133044:	00a045b4 	movhi	r2,33046
81133048:	1094f704 	addi	r2,r2,21468
8113304c:	200891ba 	slli	r4,r4,6
81133050:	1105883a 	add	r2,r2,r4
81133054:	10800604 	addi	r2,r2,24
81133058:	10c00015 	stw	r3,0(r2)
				active_files[file_handle].modified = true;
8113305c:	e0fffe0f 	ldh	r3,-8(fp)
81133060:	00a045b4 	movhi	r2,33046
81133064:	1094f704 	addi	r2,r2,21468
81133068:	180691ba 	slli	r3,r3,6
8113306c:	10c5883a 	add	r2,r2,r3
81133070:	10800e04 	addi	r2,r2,56
81133074:	00c00044 	movi	r3,1
81133078:	10c00015 	stw	r3,0(r2)
			}
            // Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
            current_sector_modified = true;
8113307c:	00800044 	movi	r2,1
81133080:	d0a0a215 	stw	r2,-32120(gp)
			result = true;
81133084:	00800044 	movi	r2,1
81133088:	e0bffa15 	stw	r2,-24(fp)
		}
    }
    
    return result;
8113308c:	e0bffa17 	ldw	r2,-24(fp)
}
81133090:	e037883a 	mov	sp,fp
81133094:	dfc00117 	ldw	ra,4(sp)
81133098:	df000017 	ldw	fp,0(sp)
8113309c:	dec00204 	addi	sp,sp,8
811330a0:	f800283a 	ret

811330a4 <alt_up_sd_card_fclose>:


bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
811330a4:	defffb04 	addi	sp,sp,-20
811330a8:	de00012e 	bgeu	sp,et,811330b0 <alt_up_sd_card_fclose+0xc>
811330ac:	003b68fa 	trap	3
811330b0:	dfc00415 	stw	ra,16(sp)
811330b4:	df000315 	stw	fp,12(sp)
811330b8:	df000304 	addi	fp,sp,12
811330bc:	2005883a 	mov	r2,r4
811330c0:	e0bfff0d 	sth	r2,-4(fp)
    bool result = false;
811330c4:	e03ffd15 	stw	zero,-12(fp)
    if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
811330c8:	1131c800 	call	81131c80 <alt_up_sd_card_is_Present>
811330cc:	10006026 	beq	r2,zero,81133250 <alt_up_sd_card_fclose+0x1ac>
811330d0:	d0a09817 	ldw	r2,-32160(gp)
811330d4:	10005e26 	beq	r2,zero,81133250 <alt_up_sd_card_fclose+0x1ac>
    {
        if (active_files[file_handle].in_use) 
811330d8:	e0ffff0f 	ldh	r3,-4(fp)
811330dc:	00a045b4 	movhi	r2,33046
811330e0:	1094f704 	addi	r2,r2,21468
811330e4:	180691ba 	slli	r3,r3,6
811330e8:	10c5883a 	add	r2,r2,r3
811330ec:	10800f04 	addi	r2,r2,60
811330f0:	10800017 	ldw	r2,0(r2)
811330f4:	10005626 	beq	r2,zero,81133250 <alt_up_sd_card_fclose+0x1ac>
        {
			if (active_files[file_handle].modified)
811330f8:	e0ffff0f 	ldh	r3,-4(fp)
811330fc:	00a045b4 	movhi	r2,33046
81133100:	1094f704 	addi	r2,r2,21468
81133104:	180691ba 	slli	r3,r3,6
81133108:	10c5883a 	add	r2,r2,r3
8113310c:	10800e04 	addi	r2,r2,56
81133110:	10800017 	ldw	r2,0(r2)
81133114:	10004526 	beq	r2,zero,8113322c <alt_up_sd_card_fclose+0x188>
			{
				unsigned int record_sector = active_files[file_handle].file_record_sector_in_cluster;
81133118:	e0ffff0f 	ldh	r3,-4(fp)
8113311c:	00a045b4 	movhi	r2,33046
81133120:	1094f704 	addi	r2,r2,21468
81133124:	180691ba 	slli	r3,r3,6
81133128:	10c5883a 	add	r2,r2,r3
8113312c:	10800b04 	addi	r2,r2,44
81133130:	10800017 	ldw	r2,0(r2)
81133134:	e0bffe15 	stw	r2,-8(fp)
				if (active_files[file_handle].file_record_cluster == 0)
81133138:	e0ffff0f 	ldh	r3,-4(fp)
8113313c:	00a045b4 	movhi	r2,33046
81133140:	1094f704 	addi	r2,r2,21468
81133144:	180691ba 	slli	r3,r3,6
81133148:	10c5883a 	add	r2,r2,r3
8113314c:	10800a04 	addi	r2,r2,40
81133150:	10800017 	ldw	r2,0(r2)
81133154:	1000071e 	bne	r2,zero,81133174 <alt_up_sd_card_fclose+0xd0>
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
81133158:	00a045b4 	movhi	r2,33046
8113315c:	1094e204 	addi	r2,r2,21384
81133160:	10801317 	ldw	r2,76(r2)
81133164:	e0fffe17 	ldw	r3,-8(fp)
81133168:	1885883a 	add	r2,r3,r2
8113316c:	e0bffe15 	stw	r2,-8(fp)
81133170:	00001406 	br	811331c4 <alt_up_sd_card_fclose+0x120>
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
81133174:	00a045b4 	movhi	r2,33046
81133178:	1094e204 	addi	r2,r2,21384
8113317c:	10c01417 	ldw	r3,80(r2)
81133180:	e0bffe17 	ldw	r2,-8(fp)
81133184:	1887883a 	add	r3,r3,r2
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
81133188:	e13fff0f 	ldh	r4,-4(fp)
8113318c:	00a045b4 	movhi	r2,33046
81133190:	1094f704 	addi	r2,r2,21468
81133194:	200891ba 	slli	r4,r4,6
81133198:	1105883a 	add	r2,r2,r4
8113319c:	10800a04 	addi	r2,r2,40
811331a0:	10800017 	ldw	r2,0(r2)
811331a4:	113fff84 	addi	r4,r2,-2
811331a8:	00a045b4 	movhi	r2,33046
811331ac:	1094e204 	addi	r2,r2,21384
811331b0:	10800383 	ldbu	r2,14(r2)
811331b4:	10803fcc 	andi	r2,r2,255
811331b8:	2085383a 	mul	r2,r4,r2
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
811331bc:	1885883a 	add	r2,r3,r2
811331c0:	e0bffe15 	stw	r2,-8(fp)
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
				}
				if (Read_Sector_Data(record_sector, fat_partition_offset_in_512_byte_sectors))
811331c4:	e0bffe17 	ldw	r2,-8(fp)
811331c8:	d0e09f17 	ldw	r3,-32132(gp)
811331cc:	180b883a 	mov	r5,r3
811331d0:	1009883a 	mov	r4,r2
811331d4:	112efa80 	call	8112efa8 <Read_Sector_Data>
811331d8:	10001426 	beq	r2,zero,8113322c <alt_up_sd_card_fclose+0x188>
				{
					if (Write_File_Record_At_Offset(active_files[file_handle].file_record_offset, &(active_files[file_handle])))
811331dc:	e0ffff0f 	ldh	r3,-4(fp)
811331e0:	00a045b4 	movhi	r2,33046
811331e4:	1094f704 	addi	r2,r2,21468
811331e8:	180691ba 	slli	r3,r3,6
811331ec:	10c5883a 	add	r2,r2,r3
811331f0:	10800c04 	addi	r2,r2,48
811331f4:	1080000b 	ldhu	r2,0(r2)
811331f8:	113fffcc 	andi	r4,r2,65535
811331fc:	2120001c 	xori	r4,r4,32768
81133200:	21200004 	addi	r4,r4,-32768
81133204:	e0bfff0f 	ldh	r2,-4(fp)
81133208:	100691ba 	slli	r3,r2,6
8113320c:	00a045b4 	movhi	r2,33046
81133210:	1094f704 	addi	r2,r2,21468
81133214:	1885883a 	add	r2,r3,r2
81133218:	100b883a 	mov	r5,r2
8113321c:	112f65c0 	call	8112f65c <Write_File_Record_At_Offset>
81133220:	10000226 	beq	r2,zero,8113322c <alt_up_sd_card_fclose+0x188>
					{
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
81133224:	112ef540 	call	8112ef54 <Save_Modified_Sector>
81133228:	e0bffd15 	stw	r2,-12(fp)
					}
				}
			}
			active_files[file_handle].in_use = false;
8113322c:	e0ffff0f 	ldh	r3,-4(fp)
81133230:	00a045b4 	movhi	r2,33046
81133234:	1094f704 	addi	r2,r2,21468
81133238:	180691ba 	slli	r3,r3,6
8113323c:	10c5883a 	add	r2,r2,r3
81133240:	10800f04 	addi	r2,r2,60
81133244:	10000015 	stw	zero,0(r2)
			result = true;
81133248:	00800044 	movi	r2,1
8113324c:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    return result;
81133250:	e0bffd17 	ldw	r2,-12(fp)
}
81133254:	e037883a 	mov	sp,fp
81133258:	dfc00117 	ldw	ra,4(sp)
8113325c:	df000017 	ldw	fp,0(sp)
81133260:	dec00204 	addi	sp,sp,8
81133264:	f800283a 	ret

81133268 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
81133268:	defffa04 	addi	sp,sp,-24
8113326c:	de00012e 	bgeu	sp,et,81133274 <altera_avalon_jtag_uart_read_fd+0xc>
81133270:	003b68fa 	trap	3
81133274:	dfc00515 	stw	ra,20(sp)
81133278:	df000415 	stw	fp,16(sp)
8113327c:	df000404 	addi	fp,sp,16
81133280:	e13ffd15 	stw	r4,-12(fp)
81133284:	e17ffe15 	stw	r5,-8(fp)
81133288:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
8113328c:	e0bffd17 	ldw	r2,-12(fp)
81133290:	10800017 	ldw	r2,0(r2)
81133294:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
81133298:	e0bffc17 	ldw	r2,-16(fp)
8113329c:	10c00a04 	addi	r3,r2,40
811332a0:	e0bffd17 	ldw	r2,-12(fp)
811332a4:	10800217 	ldw	r2,8(r2)
811332a8:	100f883a 	mov	r7,r2
811332ac:	e1bfff17 	ldw	r6,-4(fp)
811332b0:	e17ffe17 	ldw	r5,-8(fp)
811332b4:	1809883a 	mov	r4,r3
811332b8:	1133a5c0 	call	81133a5c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
811332bc:	e037883a 	mov	sp,fp
811332c0:	dfc00117 	ldw	ra,4(sp)
811332c4:	df000017 	ldw	fp,0(sp)
811332c8:	dec00204 	addi	sp,sp,8
811332cc:	f800283a 	ret

811332d0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
811332d0:	defffa04 	addi	sp,sp,-24
811332d4:	de00012e 	bgeu	sp,et,811332dc <altera_avalon_jtag_uart_write_fd+0xc>
811332d8:	003b68fa 	trap	3
811332dc:	dfc00515 	stw	ra,20(sp)
811332e0:	df000415 	stw	fp,16(sp)
811332e4:	df000404 	addi	fp,sp,16
811332e8:	e13ffd15 	stw	r4,-12(fp)
811332ec:	e17ffe15 	stw	r5,-8(fp)
811332f0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
811332f4:	e0bffd17 	ldw	r2,-12(fp)
811332f8:	10800017 	ldw	r2,0(r2)
811332fc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
81133300:	e0bffc17 	ldw	r2,-16(fp)
81133304:	10c00a04 	addi	r3,r2,40
81133308:	e0bffd17 	ldw	r2,-12(fp)
8113330c:	10800217 	ldw	r2,8(r2)
81133310:	100f883a 	mov	r7,r2
81133314:	e1bfff17 	ldw	r6,-4(fp)
81133318:	e17ffe17 	ldw	r5,-8(fp)
8113331c:	1809883a 	mov	r4,r3
81133320:	1133d200 	call	81133d20 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
81133324:	e037883a 	mov	sp,fp
81133328:	dfc00117 	ldw	ra,4(sp)
8113332c:	df000017 	ldw	fp,0(sp)
81133330:	dec00204 	addi	sp,sp,8
81133334:	f800283a 	ret

81133338 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
81133338:	defffc04 	addi	sp,sp,-16
8113333c:	de00012e 	bgeu	sp,et,81133344 <altera_avalon_jtag_uart_close_fd+0xc>
81133340:	003b68fa 	trap	3
81133344:	dfc00315 	stw	ra,12(sp)
81133348:	df000215 	stw	fp,8(sp)
8113334c:	df000204 	addi	fp,sp,8
81133350:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
81133354:	e0bfff17 	ldw	r2,-4(fp)
81133358:	10800017 	ldw	r2,0(r2)
8113335c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
81133360:	e0bffe17 	ldw	r2,-8(fp)
81133364:	10c00a04 	addi	r3,r2,40
81133368:	e0bfff17 	ldw	r2,-4(fp)
8113336c:	10800217 	ldw	r2,8(r2)
81133370:	100b883a 	mov	r5,r2
81133374:	1809883a 	mov	r4,r3
81133378:	11338f40 	call	811338f4 <altera_avalon_jtag_uart_close>
}
8113337c:	e037883a 	mov	sp,fp
81133380:	dfc00117 	ldw	ra,4(sp)
81133384:	df000017 	ldw	fp,0(sp)
81133388:	dec00204 	addi	sp,sp,8
8113338c:	f800283a 	ret

81133390 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
81133390:	defffa04 	addi	sp,sp,-24
81133394:	de00012e 	bgeu	sp,et,8113339c <altera_avalon_jtag_uart_ioctl_fd+0xc>
81133398:	003b68fa 	trap	3
8113339c:	dfc00515 	stw	ra,20(sp)
811333a0:	df000415 	stw	fp,16(sp)
811333a4:	df000404 	addi	fp,sp,16
811333a8:	e13ffd15 	stw	r4,-12(fp)
811333ac:	e17ffe15 	stw	r5,-8(fp)
811333b0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
811333b4:	e0bffd17 	ldw	r2,-12(fp)
811333b8:	10800017 	ldw	r2,0(r2)
811333bc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
811333c0:	e0bffc17 	ldw	r2,-16(fp)
811333c4:	10800a04 	addi	r2,r2,40
811333c8:	e1bfff17 	ldw	r6,-4(fp)
811333cc:	e17ffe17 	ldw	r5,-8(fp)
811333d0:	1009883a 	mov	r4,r2
811333d4:	11339640 	call	81133964 <altera_avalon_jtag_uart_ioctl>
}
811333d8:	e037883a 	mov	sp,fp
811333dc:	dfc00117 	ldw	ra,4(sp)
811333e0:	df000017 	ldw	fp,0(sp)
811333e4:	dec00204 	addi	sp,sp,8
811333e8:	f800283a 	ret

811333ec <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
811333ec:	defff104 	addi	sp,sp,-60
811333f0:	de00012e 	bgeu	sp,et,811333f8 <altera_avalon_jtag_uart_init+0xc>
811333f4:	003b68fa 	trap	3
811333f8:	dfc00e15 	stw	ra,56(sp)
811333fc:	df000d15 	stw	fp,52(sp)
81133400:	df000d04 	addi	fp,sp,52
81133404:	e13ff915 	stw	r4,-28(fp)
81133408:	e17ffa15 	stw	r5,-24(fp)
8113340c:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
81133410:	e0bff917 	ldw	r2,-28(fp)
81133414:	10800c04 	addi	r2,r2,48
81133418:	e0bff415 	stw	r2,-48(fp)
8113341c:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
81133420:	e0bff80b 	ldhu	r2,-32(fp)
81133424:	e0fff884 	addi	r3,fp,-30
81133428:	180b883a 	mov	r5,r3
8113342c:	1009883a 	mov	r4,r2
81133430:	11275bc0 	call	811275bc <OSFlagCreate>
81133434:	1007883a 	mov	r3,r2
81133438:	e0bff417 	ldw	r2,-48(fp)
8113343c:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
81133440:	e0bff917 	ldw	r2,-28(fp)
81133444:	10800a04 	addi	r2,r2,40
81133448:	e0bff515 	stw	r2,-44(fp)
8113344c:	00800044 	movi	r2,1
81133450:	e0bff78d 	sth	r2,-34(fp)
81133454:	e0bff78b 	ldhu	r2,-34(fp)
81133458:	1009883a 	mov	r4,r2
8113345c:	112b5180 	call	8112b518 <OSSemCreate>
81133460:	1007883a 	mov	r3,r2
81133464:	e0bff517 	ldw	r2,-44(fp)
81133468:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
8113346c:	e0bff917 	ldw	r2,-28(fp)
81133470:	10800b04 	addi	r2,r2,44
81133474:	e0bff615 	stw	r2,-40(fp)
81133478:	00800044 	movi	r2,1
8113347c:	e0bff70d 	sth	r2,-36(fp)
81133480:	e0bff70b 	ldhu	r2,-36(fp)
81133484:	1009883a 	mov	r4,r2
81133488:	112b5180 	call	8112b518 <OSSemCreate>
8113348c:	1007883a 	mov	r3,r2
81133490:	e0bff617 	ldw	r2,-40(fp)
81133494:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
81133498:	e0bff917 	ldw	r2,-28(fp)
8113349c:	00c00044 	movi	r3,1
811334a0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
811334a4:	e0bff917 	ldw	r2,-28(fp)
811334a8:	10800017 	ldw	r2,0(r2)
811334ac:	10800104 	addi	r2,r2,4
811334b0:	1007883a 	mov	r3,r2
811334b4:	e0bff917 	ldw	r2,-28(fp)
811334b8:	10800817 	ldw	r2,32(r2)
811334bc:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
811334c0:	e0bffa17 	ldw	r2,-24(fp)
811334c4:	e0fffb17 	ldw	r3,-20(fp)
811334c8:	d8000015 	stw	zero,0(sp)
811334cc:	e1fff917 	ldw	r7,-28(fp)
811334d0:	01a044f4 	movhi	r6,33043
811334d4:	318d4f04 	addi	r6,r6,13628
811334d8:	180b883a 	mov	r5,r3
811334dc:	1009883a 	mov	r4,r2
811334e0:	11382d40 	call	811382d4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
811334e4:	e0bff917 	ldw	r2,-28(fp)
811334e8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
811334ec:	e0bff917 	ldw	r2,-28(fp)
811334f0:	10800204 	addi	r2,r2,8
811334f4:	d0e07617 	ldw	r3,-32296(gp)
811334f8:	e1fff917 	ldw	r7,-28(fp)
811334fc:	01a044f4 	movhi	r6,33043
81133500:	318dfa04 	addi	r6,r6,14312
81133504:	180b883a 	mov	r5,r3
81133508:	1009883a 	mov	r4,r2
8113350c:	1137bf40 	call	81137bf4 <alt_alarm_start>
81133510:	1000040e 	bge	r2,zero,81133524 <altera_avalon_jtag_uart_init+0x138>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
81133514:	e0fff917 	ldw	r3,-28(fp)
81133518:	00a00034 	movhi	r2,32768
8113351c:	10bfffc4 	addi	r2,r2,-1
81133520:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
81133524:	0001883a 	nop
81133528:	e037883a 	mov	sp,fp
8113352c:	dfc00117 	ldw	ra,4(sp)
81133530:	df000017 	ldw	fp,0(sp)
81133534:	dec00204 	addi	sp,sp,8
81133538:	f800283a 	ret

8113353c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
8113353c:	defff204 	addi	sp,sp,-56
81133540:	de00012e 	bgeu	sp,et,81133548 <altera_avalon_jtag_uart_irq+0xc>
81133544:	003b68fa 	trap	3
81133548:	dfc00d15 	stw	ra,52(sp)
8113354c:	df000c15 	stw	fp,48(sp)
81133550:	df000c04 	addi	fp,sp,48
81133554:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
81133558:	e0bfff17 	ldw	r2,-4(fp)
8113355c:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
81133560:	e0bff617 	ldw	r2,-40(fp)
81133564:	10800017 	ldw	r2,0(r2)
81133568:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
8113356c:	e0bff717 	ldw	r2,-36(fp)
81133570:	10800104 	addi	r2,r2,4
81133574:	10800037 	ldwio	r2,0(r2)
81133578:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
8113357c:	e0bff817 	ldw	r2,-32(fp)
81133580:	1080c00c 	andi	r2,r2,768
81133584:	10009126 	beq	r2,zero,811337cc <altera_avalon_jtag_uart_irq+0x290>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
81133588:	e0bff817 	ldw	r2,-32(fp)
8113358c:	1080400c 	andi	r2,r2,256
81133590:	10004726 	beq	r2,zero,811336b0 <altera_avalon_jtag_uart_irq+0x174>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
81133594:	00800074 	movhi	r2,1
81133598:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
8113359c:	e0bff617 	ldw	r2,-40(fp)
811335a0:	10800d17 	ldw	r2,52(r2)
811335a4:	10800044 	addi	r2,r2,1
811335a8:	1081ffcc 	andi	r2,r2,2047
811335ac:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
811335b0:	e0bff617 	ldw	r2,-40(fp)
811335b4:	10c00e17 	ldw	r3,56(r2)
811335b8:	e0bff917 	ldw	r2,-28(fp)
811335bc:	18802726 	beq	r3,r2,8113365c <altera_avalon_jtag_uart_irq+0x120>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
811335c0:	e0bff717 	ldw	r2,-36(fp)
811335c4:	10800037 	ldwio	r2,0(r2)
811335c8:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
811335cc:	e0bff417 	ldw	r2,-48(fp)
811335d0:	10a0000c 	andi	r2,r2,32768
811335d4:	10002326 	beq	r2,zero,81133664 <altera_avalon_jtag_uart_irq+0x128>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
811335d8:	e0bff617 	ldw	r2,-40(fp)
811335dc:	10800d17 	ldw	r2,52(r2)
811335e0:	e0fff417 	ldw	r3,-48(fp)
811335e4:	1809883a 	mov	r4,r3
811335e8:	e0fff617 	ldw	r3,-40(fp)
811335ec:	1885883a 	add	r2,r3,r2
811335f0:	10801104 	addi	r2,r2,68
811335f4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
811335f8:	e0bff617 	ldw	r2,-40(fp)
811335fc:	10800d17 	ldw	r2,52(r2)
81133600:	10800044 	addi	r2,r2,1
81133604:	10c1ffcc 	andi	r3,r2,2047
81133608:	e0bff617 	ldw	r2,-40(fp)
8113360c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
81133610:	e0bff617 	ldw	r2,-40(fp)
81133614:	10800c17 	ldw	r2,48(r2)
81133618:	e0bffb15 	stw	r2,-20(fp)
8113361c:	00800044 	movi	r2,1
81133620:	e0bffc0d 	sth	r2,-16(fp)
81133624:	00800044 	movi	r2,1
81133628:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
8113362c:	d0a07f03 	ldbu	r2,-32260(gp)
81133630:	10803fcc 	andi	r2,r2,255
81133634:	103fd926 	beq	r2,zero,8113359c <__reset+0xfb11359c>
  {
    OSFlagPost (group, flags, opt, &err);
81133638:	e0bffc0b 	ldhu	r2,-16(fp)
8113363c:	e0fffc83 	ldbu	r3,-14(fp)
81133640:	e13ffdc4 	addi	r4,fp,-9
81133644:	200f883a 	mov	r7,r4
81133648:	180d883a 	mov	r6,r3
8113364c:	100b883a 	mov	r5,r2
81133650:	e13ffb17 	ldw	r4,-20(fp)
81133654:	11281c80 	call	811281c8 <OSFlagPost>
      }
81133658:	003fd006 	br	8113359c <__reset+0xfb11359c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
8113365c:	0001883a 	nop
81133660:	00000106 	br	81133668 <altera_avalon_jtag_uart_irq+0x12c>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
81133664:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
81133668:	e0bff417 	ldw	r2,-48(fp)
8113366c:	10bfffec 	andhi	r2,r2,65535
81133670:	10000f26 	beq	r2,zero,811336b0 <altera_avalon_jtag_uart_irq+0x174>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
81133674:	e0bff617 	ldw	r2,-40(fp)
81133678:	10c00817 	ldw	r3,32(r2)
8113367c:	00bfff84 	movi	r2,-2
81133680:	1886703a 	and	r3,r3,r2
81133684:	e0bff617 	ldw	r2,-40(fp)
81133688:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
8113368c:	e0bff717 	ldw	r2,-36(fp)
81133690:	10800104 	addi	r2,r2,4
81133694:	1007883a 	mov	r3,r2
81133698:	e0bff617 	ldw	r2,-40(fp)
8113369c:	10800817 	ldw	r2,32(r2)
811336a0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
811336a4:	e0bff717 	ldw	r2,-36(fp)
811336a8:	10800104 	addi	r2,r2,4
811336ac:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
811336b0:	e0bff817 	ldw	r2,-32(fp)
811336b4:	1080800c 	andi	r2,r2,512
811336b8:	103fac26 	beq	r2,zero,8113356c <__reset+0xfb11356c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
811336bc:	e0bff817 	ldw	r2,-32(fp)
811336c0:	1004d43a 	srli	r2,r2,16
811336c4:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
811336c8:	00002606 	br	81133764 <altera_avalon_jtag_uart_irq+0x228>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
811336cc:	e0bff717 	ldw	r2,-36(fp)
811336d0:	e0fff617 	ldw	r3,-40(fp)
811336d4:	18c01017 	ldw	r3,64(r3)
811336d8:	e13ff617 	ldw	r4,-40(fp)
811336dc:	20c7883a 	add	r3,r4,r3
811336e0:	18c21104 	addi	r3,r3,2116
811336e4:	18c00003 	ldbu	r3,0(r3)
811336e8:	18c03fcc 	andi	r3,r3,255
811336ec:	18c0201c 	xori	r3,r3,128
811336f0:	18ffe004 	addi	r3,r3,-128
811336f4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
811336f8:	e0bff617 	ldw	r2,-40(fp)
811336fc:	10801017 	ldw	r2,64(r2)
81133700:	10800044 	addi	r2,r2,1
81133704:	10c1ffcc 	andi	r3,r2,2047
81133708:	e0bff617 	ldw	r2,-40(fp)
8113370c:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
81133710:	e0bff617 	ldw	r2,-40(fp)
81133714:	10800c17 	ldw	r2,48(r2)
81133718:	e0bffa15 	stw	r2,-24(fp)
8113371c:	00800084 	movi	r2,2
81133720:	e0bffd0d 	sth	r2,-12(fp)
81133724:	00800044 	movi	r2,1
81133728:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
8113372c:	d0a07f03 	ldbu	r2,-32260(gp)
81133730:	10803fcc 	andi	r2,r2,255
81133734:	10000826 	beq	r2,zero,81133758 <altera_avalon_jtag_uart_irq+0x21c>
  {
    OSFlagPost (group, flags, opt, &err);
81133738:	e0bffd0b 	ldhu	r2,-12(fp)
8113373c:	e0fffd83 	ldbu	r3,-10(fp)
81133740:	e13ffe04 	addi	r4,fp,-8
81133744:	200f883a 	mov	r7,r4
81133748:	180d883a 	mov	r6,r3
8113374c:	100b883a 	mov	r5,r2
81133750:	e13ffa17 	ldw	r4,-24(fp)
81133754:	11281c80 	call	811281c8 <OSFlagPost>

        space--;
81133758:	e0bff517 	ldw	r2,-44(fp)
8113375c:	10bfffc4 	addi	r2,r2,-1
81133760:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
81133764:	e0bff517 	ldw	r2,-44(fp)
81133768:	10000526 	beq	r2,zero,81133780 <altera_avalon_jtag_uart_irq+0x244>
8113376c:	e0bff617 	ldw	r2,-40(fp)
81133770:	10c01017 	ldw	r3,64(r2)
81133774:	e0bff617 	ldw	r2,-40(fp)
81133778:	10800f17 	ldw	r2,60(r2)
8113377c:	18bfd31e 	bne	r3,r2,811336cc <__reset+0xfb1136cc>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
81133780:	e0bff517 	ldw	r2,-44(fp)
81133784:	103f7926 	beq	r2,zero,8113356c <__reset+0xfb11356c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
81133788:	e0bff617 	ldw	r2,-40(fp)
8113378c:	10c00817 	ldw	r3,32(r2)
81133790:	00bfff44 	movi	r2,-3
81133794:	1886703a 	and	r3,r3,r2
81133798:	e0bff617 	ldw	r2,-40(fp)
8113379c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
811337a0:	e0bff617 	ldw	r2,-40(fp)
811337a4:	10800017 	ldw	r2,0(r2)
811337a8:	10800104 	addi	r2,r2,4
811337ac:	1007883a 	mov	r3,r2
811337b0:	e0bff617 	ldw	r2,-40(fp)
811337b4:	10800817 	ldw	r2,32(r2)
811337b8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
811337bc:	e0bff717 	ldw	r2,-36(fp)
811337c0:	10800104 	addi	r2,r2,4
811337c4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
811337c8:	003f6806 	br	8113356c <__reset+0xfb11356c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
811337cc:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
811337d0:	0001883a 	nop
811337d4:	e037883a 	mov	sp,fp
811337d8:	dfc00117 	ldw	ra,4(sp)
811337dc:	df000017 	ldw	fp,0(sp)
811337e0:	dec00204 	addi	sp,sp,8
811337e4:	f800283a 	ret

811337e8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
811337e8:	defff904 	addi	sp,sp,-28
811337ec:	de00012e 	bgeu	sp,et,811337f4 <altera_avalon_jtag_uart_timeout+0xc>
811337f0:	003b68fa 	trap	3
811337f4:	dfc00615 	stw	ra,24(sp)
811337f8:	df000515 	stw	fp,20(sp)
811337fc:	df000504 	addi	fp,sp,20
81133800:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
81133804:	e0bfff17 	ldw	r2,-4(fp)
81133808:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
8113380c:	e0bffb17 	ldw	r2,-20(fp)
81133810:	10800017 	ldw	r2,0(r2)
81133814:	10800104 	addi	r2,r2,4
81133818:	10800037 	ldwio	r2,0(r2)
8113381c:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
81133820:	e0bffc17 	ldw	r2,-16(fp)
81133824:	1081000c 	andi	r2,r2,1024
81133828:	10000b26 	beq	r2,zero,81133858 <altera_avalon_jtag_uart_timeout+0x70>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
8113382c:	e0bffb17 	ldw	r2,-20(fp)
81133830:	10800017 	ldw	r2,0(r2)
81133834:	10800104 	addi	r2,r2,4
81133838:	1007883a 	mov	r3,r2
8113383c:	e0bffb17 	ldw	r2,-20(fp)
81133840:	10800817 	ldw	r2,32(r2)
81133844:	10810014 	ori	r2,r2,1024
81133848:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
8113384c:	e0bffb17 	ldw	r2,-20(fp)
81133850:	10000915 	stw	zero,36(r2)
81133854:	00002106 	br	811338dc <altera_avalon_jtag_uart_timeout+0xf4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
81133858:	e0bffb17 	ldw	r2,-20(fp)
8113385c:	10c00917 	ldw	r3,36(r2)
81133860:	00a00034 	movhi	r2,32768
81133864:	10bfff04 	addi	r2,r2,-4
81133868:	10c01c36 	bltu	r2,r3,811338dc <altera_avalon_jtag_uart_timeout+0xf4>
    sp->host_inactive++;
8113386c:	e0bffb17 	ldw	r2,-20(fp)
81133870:	10800917 	ldw	r2,36(r2)
81133874:	10c00044 	addi	r3,r2,1
81133878:	e0bffb17 	ldw	r2,-20(fp)
8113387c:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
81133880:	e0bffb17 	ldw	r2,-20(fp)
81133884:	10c00917 	ldw	r3,36(r2)
81133888:	e0bffb17 	ldw	r2,-20(fp)
8113388c:	10800117 	ldw	r2,4(r2)
81133890:	18801236 	bltu	r3,r2,811338dc <altera_avalon_jtag_uart_timeout+0xf4>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
81133894:	e0bffb17 	ldw	r2,-20(fp)
81133898:	10800c17 	ldw	r2,48(r2)
8113389c:	e0bffd15 	stw	r2,-12(fp)
811338a0:	00800104 	movi	r2,4
811338a4:	e0bffe0d 	sth	r2,-8(fp)
811338a8:	00800044 	movi	r2,1
811338ac:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
811338b0:	d0a07f03 	ldbu	r2,-32260(gp)
811338b4:	10803fcc 	andi	r2,r2,255
811338b8:	10000826 	beq	r2,zero,811338dc <altera_avalon_jtag_uart_timeout+0xf4>
  {
    OSFlagPost (group, flags, opt, &err);
811338bc:	e0bffe0b 	ldhu	r2,-8(fp)
811338c0:	e0fffe83 	ldbu	r3,-6(fp)
811338c4:	e13ffec4 	addi	r4,fp,-5
811338c8:	200f883a 	mov	r7,r4
811338cc:	180d883a 	mov	r6,r3
811338d0:	100b883a 	mov	r5,r2
811338d4:	e13ffd17 	ldw	r4,-12(fp)
811338d8:	11281c80 	call	811281c8 <OSFlagPost>
811338dc:	d0a07617 	ldw	r2,-32296(gp)
    }
  }

  return alt_ticks_per_second();
}
811338e0:	e037883a 	mov	sp,fp
811338e4:	dfc00117 	ldw	ra,4(sp)
811338e8:	df000017 	ldw	fp,0(sp)
811338ec:	dec00204 	addi	sp,sp,8
811338f0:	f800283a 	ret

811338f4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
811338f4:	defffd04 	addi	sp,sp,-12
811338f8:	de00012e 	bgeu	sp,et,81133900 <altera_avalon_jtag_uart_close+0xc>
811338fc:	003b68fa 	trap	3
81133900:	df000215 	stw	fp,8(sp)
81133904:	df000204 	addi	fp,sp,8
81133908:	e13ffe15 	stw	r4,-8(fp)
8113390c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
81133910:	00000506 	br	81133928 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
81133914:	e0bfff17 	ldw	r2,-4(fp)
81133918:	1090000c 	andi	r2,r2,16384
8113391c:	10000226 	beq	r2,zero,81133928 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
81133920:	00bffd44 	movi	r2,-11
81133924:	00000b06 	br	81133954 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
81133928:	e0bffe17 	ldw	r2,-8(fp)
8113392c:	10c01017 	ldw	r3,64(r2)
81133930:	e0bffe17 	ldw	r2,-8(fp)
81133934:	10800f17 	ldw	r2,60(r2)
81133938:	18800526 	beq	r3,r2,81133950 <altera_avalon_jtag_uart_close+0x5c>
8113393c:	e0bffe17 	ldw	r2,-8(fp)
81133940:	10c00917 	ldw	r3,36(r2)
81133944:	e0bffe17 	ldw	r2,-8(fp)
81133948:	10800117 	ldw	r2,4(r2)
8113394c:	18bff136 	bltu	r3,r2,81133914 <__reset+0xfb113914>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
81133950:	0005883a 	mov	r2,zero
}
81133954:	e037883a 	mov	sp,fp
81133958:	df000017 	ldw	fp,0(sp)
8113395c:	dec00104 	addi	sp,sp,4
81133960:	f800283a 	ret

81133964 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
81133964:	defffa04 	addi	sp,sp,-24
81133968:	de00012e 	bgeu	sp,et,81133970 <altera_avalon_jtag_uart_ioctl+0xc>
8113396c:	003b68fa 	trap	3
81133970:	df000515 	stw	fp,20(sp)
81133974:	df000504 	addi	fp,sp,20
81133978:	e13ffd15 	stw	r4,-12(fp)
8113397c:	e17ffe15 	stw	r5,-8(fp)
81133980:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
81133984:	00bff9c4 	movi	r2,-25
81133988:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
8113398c:	e0bffe17 	ldw	r2,-8(fp)
81133990:	10da8060 	cmpeqi	r3,r2,27137
81133994:	1800031e 	bne	r3,zero,811339a4 <altera_avalon_jtag_uart_ioctl+0x40>
81133998:	109a80a0 	cmpeqi	r2,r2,27138
8113399c:	1000181e 	bne	r2,zero,81133a00 <altera_avalon_jtag_uart_ioctl+0x9c>
      rc = 0;
    }
    break;

  default:
    break;
811339a0:	00002906 	br	81133a48 <altera_avalon_jtag_uart_ioctl+0xe4>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
811339a4:	e0bffd17 	ldw	r2,-12(fp)
811339a8:	10c00117 	ldw	r3,4(r2)
811339ac:	00a00034 	movhi	r2,32768
811339b0:	10bfffc4 	addi	r2,r2,-1
811339b4:	18802126 	beq	r3,r2,81133a3c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
811339b8:	e0bfff17 	ldw	r2,-4(fp)
811339bc:	10800017 	ldw	r2,0(r2)
811339c0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
811339c4:	e0bffc17 	ldw	r2,-16(fp)
811339c8:	10800090 	cmplti	r2,r2,2
811339cc:	1000061e 	bne	r2,zero,811339e8 <altera_avalon_jtag_uart_ioctl+0x84>
811339d0:	e0fffc17 	ldw	r3,-16(fp)
811339d4:	00a00034 	movhi	r2,32768
811339d8:	10bfffc4 	addi	r2,r2,-1
811339dc:	18800226 	beq	r3,r2,811339e8 <altera_avalon_jtag_uart_ioctl+0x84>
811339e0:	e0bffc17 	ldw	r2,-16(fp)
811339e4:	00000206 	br	811339f0 <altera_avalon_jtag_uart_ioctl+0x8c>
811339e8:	00a00034 	movhi	r2,32768
811339ec:	10bfff84 	addi	r2,r2,-2
811339f0:	e0fffd17 	ldw	r3,-12(fp)
811339f4:	18800115 	stw	r2,4(r3)
      rc = 0;
811339f8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
811339fc:	00000f06 	br	81133a3c <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
81133a00:	e0bffd17 	ldw	r2,-12(fp)
81133a04:	10c00117 	ldw	r3,4(r2)
81133a08:	00a00034 	movhi	r2,32768
81133a0c:	10bfffc4 	addi	r2,r2,-1
81133a10:	18800c26 	beq	r3,r2,81133a44 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
81133a14:	e0bffd17 	ldw	r2,-12(fp)
81133a18:	10c00917 	ldw	r3,36(r2)
81133a1c:	e0bffd17 	ldw	r2,-12(fp)
81133a20:	10800117 	ldw	r2,4(r2)
81133a24:	1885803a 	cmpltu	r2,r3,r2
81133a28:	10c03fcc 	andi	r3,r2,255
81133a2c:	e0bfff17 	ldw	r2,-4(fp)
81133a30:	10c00015 	stw	r3,0(r2)
      rc = 0;
81133a34:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
81133a38:	00000206 	br	81133a44 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
81133a3c:	0001883a 	nop
81133a40:	00000106 	br	81133a48 <altera_avalon_jtag_uart_ioctl+0xe4>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
81133a44:	0001883a 	nop

  default:
    break;
  }

  return rc;
81133a48:	e0bffb17 	ldw	r2,-20(fp)
}
81133a4c:	e037883a 	mov	sp,fp
81133a50:	df000017 	ldw	fp,0(sp)
81133a54:	dec00104 	addi	sp,sp,4
81133a58:	f800283a 	ret

81133a5c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
81133a5c:	deffed04 	addi	sp,sp,-76
81133a60:	de00012e 	bgeu	sp,et,81133a68 <altera_avalon_jtag_uart_read+0xc>
81133a64:	003b68fa 	trap	3
81133a68:	dfc01215 	stw	ra,72(sp)
81133a6c:	df001115 	stw	fp,68(sp)
81133a70:	df001104 	addi	fp,sp,68
81133a74:	e13ffc15 	stw	r4,-16(fp)
81133a78:	e17ffd15 	stw	r5,-12(fp)
81133a7c:	e1bffe15 	stw	r6,-8(fp)
81133a80:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
81133a84:	e0bffd17 	ldw	r2,-12(fp)
81133a88:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
81133a8c:	e0bffc17 	ldw	r2,-16(fp)
81133a90:	10800a17 	ldw	r2,40(r2)
81133a94:	e0bff815 	stw	r2,-32(fp)
81133a98:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
81133a9c:	e0bff90b 	ldhu	r2,-28(fp)
81133aa0:	e0fffb04 	addi	r3,fp,-20
81133aa4:	180d883a 	mov	r6,r3
81133aa8:	100b883a 	mov	r5,r2
81133aac:	e13ff817 	ldw	r4,-32(fp)
81133ab0:	112b8400 	call	8112b840 <OSSemPend>

  while (space > 0)
81133ab4:	00006106 	br	81133c3c <altera_avalon_jtag_uart_read+0x1e0>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
81133ab8:	e0bffc17 	ldw	r2,-16(fp)
81133abc:	10800d17 	ldw	r2,52(r2)
81133ac0:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
81133ac4:	e0bffc17 	ldw	r2,-16(fp)
81133ac8:	10800e17 	ldw	r2,56(r2)
81133acc:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
81133ad0:	e0fff317 	ldw	r3,-52(fp)
81133ad4:	e0bff417 	ldw	r2,-48(fp)
81133ad8:	18800536 	bltu	r3,r2,81133af0 <altera_avalon_jtag_uart_read+0x94>
        n = in - out;
81133adc:	e0fff317 	ldw	r3,-52(fp)
81133ae0:	e0bff417 	ldw	r2,-48(fp)
81133ae4:	1885c83a 	sub	r2,r3,r2
81133ae8:	e0bff115 	stw	r2,-60(fp)
81133aec:	00000406 	br	81133b00 <altera_avalon_jtag_uart_read+0xa4>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
81133af0:	00c20004 	movi	r3,2048
81133af4:	e0bff417 	ldw	r2,-48(fp)
81133af8:	1885c83a 	sub	r2,r3,r2
81133afc:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
81133b00:	e0bff117 	ldw	r2,-60(fp)
81133b04:	10001e26 	beq	r2,zero,81133b80 <altera_avalon_jtag_uart_read+0x124>
        break; /* No more data available */

      if (n > space)
81133b08:	e0fffe17 	ldw	r3,-8(fp)
81133b0c:	e0bff117 	ldw	r2,-60(fp)
81133b10:	1880022e 	bgeu	r3,r2,81133b1c <altera_avalon_jtag_uart_read+0xc0>
        n = space;
81133b14:	e0bffe17 	ldw	r2,-8(fp)
81133b18:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
81133b1c:	e0bffc17 	ldw	r2,-16(fp)
81133b20:	10c01104 	addi	r3,r2,68
81133b24:	e0bff417 	ldw	r2,-48(fp)
81133b28:	1885883a 	add	r2,r3,r2
81133b2c:	e1bff117 	ldw	r6,-60(fp)
81133b30:	100b883a 	mov	r5,r2
81133b34:	e13ff017 	ldw	r4,-64(fp)
81133b38:	110f61c0 	call	8110f61c <memcpy>
      ptr   += n;
81133b3c:	e0fff017 	ldw	r3,-64(fp)
81133b40:	e0bff117 	ldw	r2,-60(fp)
81133b44:	1885883a 	add	r2,r3,r2
81133b48:	e0bff015 	stw	r2,-64(fp)
      space -= n;
81133b4c:	e0fffe17 	ldw	r3,-8(fp)
81133b50:	e0bff117 	ldw	r2,-60(fp)
81133b54:	1885c83a 	sub	r2,r3,r2
81133b58:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
81133b5c:	e0fff417 	ldw	r3,-48(fp)
81133b60:	e0bff117 	ldw	r2,-60(fp)
81133b64:	1885883a 	add	r2,r3,r2
81133b68:	10c1ffcc 	andi	r3,r2,2047
81133b6c:	e0bffc17 	ldw	r2,-16(fp)
81133b70:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
81133b74:	e0bffe17 	ldw	r2,-8(fp)
81133b78:	00bfcf16 	blt	zero,r2,81133ab8 <__reset+0xfb113ab8>
81133b7c:	00000106 	br	81133b84 <altera_avalon_jtag_uart_read+0x128>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
81133b80:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
81133b84:	e0fff017 	ldw	r3,-64(fp)
81133b88:	e0bffd17 	ldw	r2,-12(fp)
81133b8c:	18802e1e 	bne	r3,r2,81133c48 <altera_avalon_jtag_uart_read+0x1ec>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
81133b90:	e0bfff17 	ldw	r2,-4(fp)
81133b94:	1090000c 	andi	r2,r2,16384
81133b98:	10002d1e 	bne	r2,zero,81133c50 <altera_avalon_jtag_uart_read+0x1f4>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
81133b9c:	d0a07f03 	ldbu	r2,-32260(gp)
81133ba0:	10803fcc 	andi	r2,r2,255
81133ba4:	10800058 	cmpnei	r2,r2,1
81133ba8:	1000161e 	bne	r2,zero,81133c04 <altera_avalon_jtag_uart_read+0x1a8>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
81133bac:	e0bffc17 	ldw	r2,-16(fp)
81133bb0:	10800c17 	ldw	r2,48(r2)
81133bb4:	e0bff215 	stw	r2,-56(fp)
81133bb8:	00800144 	movi	r2,5
81133bbc:	e0bff98d 	sth	r2,-26(fp)
81133bc0:	00bfe0c4 	movi	r2,-125
81133bc4:	e0bffa05 	stb	r2,-24(fp)
81133bc8:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
81133bcc:	d0a07f03 	ldbu	r2,-32260(gp)
81133bd0:	10803fcc 	andi	r2,r2,255
81133bd4:	10001526 	beq	r2,zero,81133c2c <altera_avalon_jtag_uart_read+0x1d0>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
81133bd8:	e0fff98b 	ldhu	r3,-26(fp)
81133bdc:	e13ffa03 	ldbu	r4,-24(fp)
81133be0:	e17ffa8b 	ldhu	r5,-22(fp)
81133be4:	e0bffb44 	addi	r2,fp,-19
81133be8:	d8800015 	stw	r2,0(sp)
81133bec:	280f883a 	mov	r7,r5
81133bf0:	200d883a 	mov	r6,r4
81133bf4:	180b883a 	mov	r5,r3
81133bf8:	e13ff217 	ldw	r4,-56(fp)
81133bfc:	1127ba00 	call	81127ba0 <OSFlagPend>
81133c00:	00000a06 	br	81133c2c <altera_avalon_jtag_uart_read+0x1d0>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
81133c04:	0001883a 	nop
81133c08:	e0bffc17 	ldw	r2,-16(fp)
81133c0c:	10c00d17 	ldw	r3,52(r2)
81133c10:	e0bff317 	ldw	r2,-52(fp)
81133c14:	1880051e 	bne	r3,r2,81133c2c <altera_avalon_jtag_uart_read+0x1d0>
81133c18:	e0bffc17 	ldw	r2,-16(fp)
81133c1c:	10c00917 	ldw	r3,36(r2)
81133c20:	e0bffc17 	ldw	r2,-16(fp)
81133c24:	10800117 	ldw	r2,4(r2)
81133c28:	18bff736 	bltu	r3,r2,81133c08 <__reset+0xfb113c08>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
81133c2c:	e0bffc17 	ldw	r2,-16(fp)
81133c30:	10c00d17 	ldw	r3,52(r2)
81133c34:	e0bff317 	ldw	r2,-52(fp)
81133c38:	18800726 	beq	r3,r2,81133c58 <altera_avalon_jtag_uart_read+0x1fc>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
81133c3c:	e0bffe17 	ldw	r2,-8(fp)
81133c40:	00bf9d16 	blt	zero,r2,81133ab8 <__reset+0xfb113ab8>
81133c44:	00000506 	br	81133c5c <altera_avalon_jtag_uart_read+0x200>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
81133c48:	0001883a 	nop
81133c4c:	00000306 	br	81133c5c <altera_avalon_jtag_uart_read+0x200>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
81133c50:	0001883a 	nop
81133c54:	00000106 	br	81133c5c <altera_avalon_jtag_uart_read+0x200>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
81133c58:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
81133c5c:	e0bffc17 	ldw	r2,-16(fp)
81133c60:	10800a17 	ldw	r2,40(r2)
81133c64:	1009883a 	mov	r4,r2
81133c68:	112bbc80 	call	8112bbc8 <OSSemPost>

  if (ptr != buffer)
81133c6c:	e0fff017 	ldw	r3,-64(fp)
81133c70:	e0bffd17 	ldw	r2,-12(fp)
81133c74:	18801826 	beq	r3,r2,81133cd8 <altera_avalon_jtag_uart_read+0x27c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81133c78:	0005303a 	rdctl	r2,status
81133c7c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81133c80:	e0fff717 	ldw	r3,-36(fp)
81133c84:	00bfff84 	movi	r2,-2
81133c88:	1884703a 	and	r2,r3,r2
81133c8c:	1001703a 	wrctl	status,r2
  
  return context;
81133c90:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
81133c94:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
81133c98:	e0bffc17 	ldw	r2,-16(fp)
81133c9c:	10800817 	ldw	r2,32(r2)
81133ca0:	10c00054 	ori	r3,r2,1
81133ca4:	e0bffc17 	ldw	r2,-16(fp)
81133ca8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
81133cac:	e0bffc17 	ldw	r2,-16(fp)
81133cb0:	10800017 	ldw	r2,0(r2)
81133cb4:	10800104 	addi	r2,r2,4
81133cb8:	1007883a 	mov	r3,r2
81133cbc:	e0bffc17 	ldw	r2,-16(fp)
81133cc0:	10800817 	ldw	r2,32(r2)
81133cc4:	18800035 	stwio	r2,0(r3)
81133cc8:	e0bff617 	ldw	r2,-40(fp)
81133ccc:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81133cd0:	e0bff517 	ldw	r2,-44(fp)
81133cd4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
81133cd8:	e0fff017 	ldw	r3,-64(fp)
81133cdc:	e0bffd17 	ldw	r2,-12(fp)
81133ce0:	18800426 	beq	r3,r2,81133cf4 <altera_avalon_jtag_uart_read+0x298>
    return ptr - buffer;
81133ce4:	e0fff017 	ldw	r3,-64(fp)
81133ce8:	e0bffd17 	ldw	r2,-12(fp)
81133cec:	1885c83a 	sub	r2,r3,r2
81133cf0:	00000606 	br	81133d0c <altera_avalon_jtag_uart_read+0x2b0>
  else if (flags & O_NONBLOCK)
81133cf4:	e0bfff17 	ldw	r2,-4(fp)
81133cf8:	1090000c 	andi	r2,r2,16384
81133cfc:	10000226 	beq	r2,zero,81133d08 <altera_avalon_jtag_uart_read+0x2ac>
    return -EWOULDBLOCK;
81133d00:	00bffd44 	movi	r2,-11
81133d04:	00000106 	br	81133d0c <altera_avalon_jtag_uart_read+0x2b0>
  else
    return -EIO;
81133d08:	00bffec4 	movi	r2,-5
}
81133d0c:	e037883a 	mov	sp,fp
81133d10:	dfc00117 	ldw	ra,4(sp)
81133d14:	df000017 	ldw	fp,0(sp)
81133d18:	dec00204 	addi	sp,sp,8
81133d1c:	f800283a 	ret

81133d20 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
81133d20:	deffed04 	addi	sp,sp,-76
81133d24:	de00012e 	bgeu	sp,et,81133d2c <altera_avalon_jtag_uart_write+0xc>
81133d28:	003b68fa 	trap	3
81133d2c:	dfc01215 	stw	ra,72(sp)
81133d30:	df001115 	stw	fp,68(sp)
81133d34:	df001104 	addi	fp,sp,68
81133d38:	e13ffc15 	stw	r4,-16(fp)
81133d3c:	e17ffd15 	stw	r5,-12(fp)
81133d40:	e1bffe15 	stw	r6,-8(fp)
81133d44:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
81133d48:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
81133d4c:	e0bffd17 	ldw	r2,-12(fp)
81133d50:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
81133d54:	e0bffc17 	ldw	r2,-16(fp)
81133d58:	10800b17 	ldw	r2,44(r2)
81133d5c:	e0bff815 	stw	r2,-32(fp)
81133d60:	e03ff90d 	sth	zero,-28(fp)
81133d64:	e0bff90b 	ldhu	r2,-28(fp)
81133d68:	e0fffb44 	addi	r3,fp,-19
81133d6c:	180d883a 	mov	r6,r3
81133d70:	100b883a 	mov	r5,r2
81133d74:	e13ff817 	ldw	r4,-32(fp)
81133d78:	112b8400 	call	8112b840 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
81133d7c:	00003706 	br	81133e5c <altera_avalon_jtag_uart_write+0x13c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
81133d80:	e0bffc17 	ldw	r2,-16(fp)
81133d84:	10800f17 	ldw	r2,60(r2)
81133d88:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
81133d8c:	e0bffc17 	ldw	r2,-16(fp)
81133d90:	10801017 	ldw	r2,64(r2)
81133d94:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
81133d98:	e0fff417 	ldw	r3,-48(fp)
81133d9c:	e0bff017 	ldw	r2,-64(fp)
81133da0:	1880062e 	bgeu	r3,r2,81133dbc <altera_avalon_jtag_uart_write+0x9c>
        n = out - 1 - in;
81133da4:	e0fff017 	ldw	r3,-64(fp)
81133da8:	e0bff417 	ldw	r2,-48(fp)
81133dac:	1885c83a 	sub	r2,r3,r2
81133db0:	10bfffc4 	addi	r2,r2,-1
81133db4:	e0bff115 	stw	r2,-60(fp)
81133db8:	00000b06 	br	81133de8 <altera_avalon_jtag_uart_write+0xc8>
      else if (out > 0)
81133dbc:	e0bff017 	ldw	r2,-64(fp)
81133dc0:	10000526 	beq	r2,zero,81133dd8 <altera_avalon_jtag_uart_write+0xb8>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
81133dc4:	00c20004 	movi	r3,2048
81133dc8:	e0bff417 	ldw	r2,-48(fp)
81133dcc:	1885c83a 	sub	r2,r3,r2
81133dd0:	e0bff115 	stw	r2,-60(fp)
81133dd4:	00000406 	br	81133de8 <altera_avalon_jtag_uart_write+0xc8>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
81133dd8:	00c1ffc4 	movi	r3,2047
81133ddc:	e0bff417 	ldw	r2,-48(fp)
81133de0:	1885c83a 	sub	r2,r3,r2
81133de4:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
81133de8:	e0bff117 	ldw	r2,-60(fp)
81133dec:	10001e26 	beq	r2,zero,81133e68 <altera_avalon_jtag_uart_write+0x148>
        break;

      if (n > count)
81133df0:	e0fffe17 	ldw	r3,-8(fp)
81133df4:	e0bff117 	ldw	r2,-60(fp)
81133df8:	1880022e 	bgeu	r3,r2,81133e04 <altera_avalon_jtag_uart_write+0xe4>
        n = count;
81133dfc:	e0bffe17 	ldw	r2,-8(fp)
81133e00:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
81133e04:	e0bffc17 	ldw	r2,-16(fp)
81133e08:	10c21104 	addi	r3,r2,2116
81133e0c:	e0bff417 	ldw	r2,-48(fp)
81133e10:	1885883a 	add	r2,r3,r2
81133e14:	e1bff117 	ldw	r6,-60(fp)
81133e18:	e17ffd17 	ldw	r5,-12(fp)
81133e1c:	1009883a 	mov	r4,r2
81133e20:	110f61c0 	call	8110f61c <memcpy>
      ptr   += n;
81133e24:	e0fffd17 	ldw	r3,-12(fp)
81133e28:	e0bff117 	ldw	r2,-60(fp)
81133e2c:	1885883a 	add	r2,r3,r2
81133e30:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
81133e34:	e0fffe17 	ldw	r3,-8(fp)
81133e38:	e0bff117 	ldw	r2,-60(fp)
81133e3c:	1885c83a 	sub	r2,r3,r2
81133e40:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
81133e44:	e0fff417 	ldw	r3,-48(fp)
81133e48:	e0bff117 	ldw	r2,-60(fp)
81133e4c:	1885883a 	add	r2,r3,r2
81133e50:	10c1ffcc 	andi	r3,r2,2047
81133e54:	e0bffc17 	ldw	r2,-16(fp)
81133e58:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
81133e5c:	e0bffe17 	ldw	r2,-8(fp)
81133e60:	00bfc716 	blt	zero,r2,81133d80 <__reset+0xfb113d80>
81133e64:	00000106 	br	81133e6c <altera_avalon_jtag_uart_write+0x14c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
81133e68:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81133e6c:	0005303a 	rdctl	r2,status
81133e70:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81133e74:	e0fff717 	ldw	r3,-36(fp)
81133e78:	00bfff84 	movi	r2,-2
81133e7c:	1884703a 	and	r2,r3,r2
81133e80:	1001703a 	wrctl	status,r2
  
  return context;
81133e84:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
81133e88:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
81133e8c:	e0bffc17 	ldw	r2,-16(fp)
81133e90:	10800817 	ldw	r2,32(r2)
81133e94:	10c00094 	ori	r3,r2,2
81133e98:	e0bffc17 	ldw	r2,-16(fp)
81133e9c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
81133ea0:	e0bffc17 	ldw	r2,-16(fp)
81133ea4:	10800017 	ldw	r2,0(r2)
81133ea8:	10800104 	addi	r2,r2,4
81133eac:	1007883a 	mov	r3,r2
81133eb0:	e0bffc17 	ldw	r2,-16(fp)
81133eb4:	10800817 	ldw	r2,32(r2)
81133eb8:	18800035 	stwio	r2,0(r3)
81133ebc:	e0bff617 	ldw	r2,-40(fp)
81133ec0:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81133ec4:	e0bff317 	ldw	r2,-52(fp)
81133ec8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
81133ecc:	e0bffe17 	ldw	r2,-8(fp)
81133ed0:	00802a0e 	bge	zero,r2,81133f7c <altera_avalon_jtag_uart_write+0x25c>
    {
      if (flags & O_NONBLOCK)
81133ed4:	e0bfff17 	ldw	r2,-4(fp)
81133ed8:	1090000c 	andi	r2,r2,16384
81133edc:	10002a1e 	bne	r2,zero,81133f88 <altera_avalon_jtag_uart_write+0x268>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
81133ee0:	d0a07f03 	ldbu	r2,-32260(gp)
81133ee4:	10803fcc 	andi	r2,r2,255
81133ee8:	10800058 	cmpnei	r2,r2,1
81133eec:	1000161e 	bne	r2,zero,81133f48 <altera_avalon_jtag_uart_write+0x228>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
81133ef0:	e0bffc17 	ldw	r2,-16(fp)
81133ef4:	10800c17 	ldw	r2,48(r2)
81133ef8:	e0bff515 	stw	r2,-44(fp)
81133efc:	00800184 	movi	r2,6
81133f00:	e0bff98d 	sth	r2,-26(fp)
81133f04:	00bfe0c4 	movi	r2,-125
81133f08:	e0bffa05 	stb	r2,-24(fp)
81133f0c:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
81133f10:	d0a07f03 	ldbu	r2,-32260(gp)
81133f14:	10803fcc 	andi	r2,r2,255
81133f18:	10001526 	beq	r2,zero,81133f70 <altera_avalon_jtag_uart_write+0x250>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
81133f1c:	e0fff98b 	ldhu	r3,-26(fp)
81133f20:	e13ffa03 	ldbu	r4,-24(fp)
81133f24:	e17ffa8b 	ldhu	r5,-22(fp)
81133f28:	e0bffb04 	addi	r2,fp,-20
81133f2c:	d8800015 	stw	r2,0(sp)
81133f30:	280f883a 	mov	r7,r5
81133f34:	200d883a 	mov	r6,r4
81133f38:	180b883a 	mov	r5,r3
81133f3c:	e13ff517 	ldw	r4,-44(fp)
81133f40:	1127ba00 	call	81127ba0 <OSFlagPend>
81133f44:	00000a06 	br	81133f70 <altera_avalon_jtag_uart_write+0x250>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
81133f48:	0001883a 	nop
81133f4c:	e0bffc17 	ldw	r2,-16(fp)
81133f50:	10c01017 	ldw	r3,64(r2)
81133f54:	e0bff017 	ldw	r2,-64(fp)
81133f58:	1880051e 	bne	r3,r2,81133f70 <altera_avalon_jtag_uart_write+0x250>
81133f5c:	e0bffc17 	ldw	r2,-16(fp)
81133f60:	10c00917 	ldw	r3,36(r2)
81133f64:	e0bffc17 	ldw	r2,-16(fp)
81133f68:	10800117 	ldw	r2,4(r2)
81133f6c:	18bff736 	bltu	r3,r2,81133f4c <__reset+0xfb113f4c>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
81133f70:	e0bffc17 	ldw	r2,-16(fp)
81133f74:	10800917 	ldw	r2,36(r2)
81133f78:	1000051e 	bne	r2,zero,81133f90 <altera_avalon_jtag_uart_write+0x270>
         break;
    }
  }
  while (count > 0);
81133f7c:	e0bffe17 	ldw	r2,-8(fp)
81133f80:	00bfb616 	blt	zero,r2,81133e5c <__reset+0xfb113e5c>
81133f84:	00000306 	br	81133f94 <altera_avalon_jtag_uart_write+0x274>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
81133f88:	0001883a 	nop
81133f8c:	00000106 	br	81133f94 <altera_avalon_jtag_uart_write+0x274>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
81133f90:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
81133f94:	e0bffc17 	ldw	r2,-16(fp)
81133f98:	10800b17 	ldw	r2,44(r2)
81133f9c:	1009883a 	mov	r4,r2
81133fa0:	112bbc80 	call	8112bbc8 <OSSemPost>

  if (ptr != start)
81133fa4:	e0fffd17 	ldw	r3,-12(fp)
81133fa8:	e0bff217 	ldw	r2,-56(fp)
81133fac:	18800426 	beq	r3,r2,81133fc0 <altera_avalon_jtag_uart_write+0x2a0>
    return ptr - start;
81133fb0:	e0fffd17 	ldw	r3,-12(fp)
81133fb4:	e0bff217 	ldw	r2,-56(fp)
81133fb8:	1885c83a 	sub	r2,r3,r2
81133fbc:	00000606 	br	81133fd8 <altera_avalon_jtag_uart_write+0x2b8>
  else if (flags & O_NONBLOCK)
81133fc0:	e0bfff17 	ldw	r2,-4(fp)
81133fc4:	1090000c 	andi	r2,r2,16384
81133fc8:	10000226 	beq	r2,zero,81133fd4 <altera_avalon_jtag_uart_write+0x2b4>
    return -EWOULDBLOCK;
81133fcc:	00bffd44 	movi	r2,-11
81133fd0:	00000106 	br	81133fd8 <altera_avalon_jtag_uart_write+0x2b8>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
81133fd4:	00bffec4 	movi	r2,-5
}
81133fd8:	e037883a 	mov	sp,fp
81133fdc:	dfc00117 	ldw	ra,4(sp)
81133fe0:	df000017 	ldw	fp,0(sp)
81133fe4:	dec00204 	addi	sp,sp,8
81133fe8:	f800283a 	ret

81133fec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81133fec:	defffe04 	addi	sp,sp,-8
81133ff0:	de00012e 	bgeu	sp,et,81133ff8 <alt_get_errno+0xc>
81133ff4:	003b68fa 	trap	3
81133ff8:	dfc00115 	stw	ra,4(sp)
81133ffc:	df000015 	stw	fp,0(sp)
81134000:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81134004:	d0a01617 	ldw	r2,-32680(gp)
81134008:	10000326 	beq	r2,zero,81134018 <alt_get_errno+0x2c>
8113400c:	d0a01617 	ldw	r2,-32680(gp)
81134010:	103ee83a 	callr	r2
81134014:	00000106 	br	8113401c <alt_get_errno+0x30>
81134018:	d0a06b04 	addi	r2,gp,-32340
}
8113401c:	e037883a 	mov	sp,fp
81134020:	dfc00117 	ldw	ra,4(sp)
81134024:	df000017 	ldw	fp,0(sp)
81134028:	dec00204 	addi	sp,sp,8
8113402c:	f800283a 	ret

81134030 <alt_avalon_sgdma_do_async_transfer>:
 * - 0 for success, or various errors defined in <errno.h>
 */
int alt_avalon_sgdma_do_async_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
81134030:	defffc04 	addi	sp,sp,-16
81134034:	de00012e 	bgeu	sp,et,8113403c <alt_avalon_sgdma_do_async_transfer+0xc>
81134038:	003b68fa 	trap	3
8113403c:	df000315 	stw	fp,12(sp)
81134040:	df000304 	addi	fp,sp,12
81134044:	e13ffe15 	stw	r4,-8(fp)
81134048:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  /* Return with error immediately if controller is busy */
  if( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
8113404c:	e0bffe17 	ldw	r2,-8(fp)
81134050:	10800317 	ldw	r2,12(r2)
81134054:	10800037 	ldwio	r2,0(r2)
81134058:	1080040c 	andi	r2,r2,16
8113405c:	10000226 	beq	r2,zero,81134068 <alt_avalon_sgdma_do_async_transfer+0x38>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    return -EBUSY;
81134060:	00bffc04 	movi	r2,-16
81134064:	00003906 	br	8113414c <alt_avalon_sgdma_do_async_transfer+0x11c>
  }

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
81134068:	e0bffe17 	ldw	r2,-8(fp)
8113406c:	10800317 	ldw	r2,12(r2)
81134070:	10800404 	addi	r2,r2,16
81134074:	e0fffe17 	ldw	r3,-8(fp)
81134078:	18c00317 	ldw	r3,12(r3)
8113407c:	18c00404 	addi	r3,r3,16
81134080:	19000037 	ldwio	r4,0(r3)
81134084:	00fff7c4 	movi	r3,-33
81134088:	20c6703a 	and	r3,r4,r3
8113408c:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
81134090:	e0bffe17 	ldw	r2,-8(fp)
81134094:	10800317 	ldw	r2,12(r2)
81134098:	00c03fc4 	movi	r3,255
8113409c:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
811340a0:	e0bffe17 	ldw	r2,-8(fp)
811340a4:	10800317 	ldw	r2,12(r2)
811340a8:	10800804 	addi	r2,r2,32
811340ac:	e0ffff17 	ldw	r3,-4(fp)
811340b0:	10c00035 	stwio	r3,0(r2)
   *  - Stop on an error with any particular descriptor
   *  - Include any control register bits registered with along with
   *    the callback routine (effectively, interrupts are controlled
   *    via the control bits set during callback-register time).
   */
  if(dev->callback) {
811340b4:	e0bffe17 	ldw	r2,-8(fp)
811340b8:	10800917 	ldw	r2,36(r2)
811340bc:	10001126 	beq	r2,zero,81134104 <alt_avalon_sgdma_do_async_transfer+0xd4>
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
811340c0:	e0bffe17 	ldw	r2,-8(fp)
811340c4:	10800317 	ldw	r2,12(r2)
811340c8:	10800404 	addi	r2,r2,16
811340cc:	10800037 	ldwio	r2,0(r2)
811340d0:	e0bffd15 	stw	r2,-12(fp)

    control |= (dev->chain_control                          |
811340d4:	e0bffe17 	ldw	r2,-8(fp)
811340d8:	10c00b17 	ldw	r3,44(r2)
811340dc:	e0bffd17 	ldw	r2,-12(fp)
811340e0:	1884b03a 	or	r2,r3,r2
811340e4:	10801814 	ori	r2,r2,96
811340e8:	e0bffd15 	stw	r2,-12(fp)
                ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK  );

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
811340ec:	e0bffe17 	ldw	r2,-8(fp)
811340f0:	10800317 	ldw	r2,12(r2)
811340f4:	10800404 	addi	r2,r2,16
811340f8:	e0fffd17 	ldw	r3,-12(fp)
811340fc:	10c00035 	stwio	r3,0(r2)
81134100:	00001106 	br	81134148 <alt_avalon_sgdma_do_async_transfer+0x118>
   *   - Run
   *   - Stop on an error with any particular descriptor
   *   - Disable interrupt generation
   */
  else {
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
81134104:	e0bffe17 	ldw	r2,-8(fp)
81134108:	10800317 	ldw	r2,12(r2)
8113410c:	10800404 	addi	r2,r2,16
81134110:	10800037 	ldwio	r2,0(r2)
81134114:	e0bffd15 	stw	r2,-12(fp)

    control |= (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
81134118:	e0bffd17 	ldw	r2,-12(fp)
8113411c:	10801814 	ori	r2,r2,96
81134120:	e0bffd15 	stw	r2,-12(fp)
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK );
    control &= ~ALTERA_AVALON_SGDMA_CONTROL_IE_GLOBAL_MSK;
81134124:	e0fffd17 	ldw	r3,-12(fp)
81134128:	00bffbc4 	movi	r2,-17
8113412c:	1884703a 	and	r2,r3,r2
81134130:	e0bffd15 	stw	r2,-12(fp)

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
81134134:	e0bffe17 	ldw	r2,-8(fp)
81134138:	10800317 	ldw	r2,12(r2)
8113413c:	10800404 	addi	r2,r2,16
81134140:	e0fffd17 	ldw	r3,-12(fp)
81134144:	10c00035 	stwio	r3,0(r2)

  /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
  return 0;
81134148:	0005883a 	mov	r2,zero
}
8113414c:	e037883a 	mov	sp,fp
81134150:	df000017 	ldw	fp,0(sp)
81134154:	dec00104 	addi	sp,sp,4
81134158:	f800283a 	ret

8113415c <alt_avalon_sgdma_do_sync_transfer>:
 * - status: Content of SGDMA status register.
 */
alt_u8 alt_avalon_sgdma_do_sync_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
8113415c:	defffc04 	addi	sp,sp,-16
81134160:	de00012e 	bgeu	sp,et,81134168 <alt_avalon_sgdma_do_sync_transfer+0xc>
81134164:	003b68fa 	trap	3
81134168:	df000315 	stw	fp,12(sp)
8113416c:	df000304 	addi	fp,sp,12
81134170:	e13ffe15 	stw	r4,-8(fp)
81134174:	e17fff15 	stw	r5,-4(fp)
  alt_u8 status;

  /* Wait for any pending transfers to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
81134178:	0001883a 	nop
8113417c:	e0bffe17 	ldw	r2,-8(fp)
81134180:	10800317 	ldw	r2,12(r2)
81134184:	10800037 	ldwio	r2,0(r2)
81134188:	1080040c 	andi	r2,r2,16
8113418c:	103ffb1e 	bne	r2,zero,8113417c <__reset+0xfb11417c>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );


  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
81134190:	e0bffe17 	ldw	r2,-8(fp)
81134194:	10800317 	ldw	r2,12(r2)
81134198:	10800404 	addi	r2,r2,16
8113419c:	e0fffe17 	ldw	r3,-8(fp)
811341a0:	18c00317 	ldw	r3,12(r3)
811341a4:	18c00404 	addi	r3,r3,16
811341a8:	19000037 	ldwio	r4,0(r3)
811341ac:	00fff7c4 	movi	r3,-33
811341b0:	20c6703a 	and	r3,r4,r3
811341b4:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
811341b8:	e0bffe17 	ldw	r2,-8(fp)
811341bc:	10800317 	ldw	r2,12(r2)
811341c0:	00c03fc4 	movi	r3,255
811341c4:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
811341c8:	e0bffe17 	ldw	r2,-8(fp)
811341cc:	10800317 	ldw	r2,12(r2)
811341d0:	10800804 	addi	r2,r2,32
811341d4:	e0ffff17 	ldw	r3,-4(fp)
811341d8:	10c00035 	stwio	r3,0(r2)
   * Set up SGDMA controller to:
   * - Disable interrupt generation
   * - Run once a valid descriptor is written to controller
   * - Stop on an error with any particular descriptor
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
811341dc:	e0bffe17 	ldw	r2,-8(fp)
811341e0:	10800317 	ldw	r2,12(r2)
811341e4:	10800404 	addi	r2,r2,16
811341e8:	e0fffe17 	ldw	r3,-8(fp)
811341ec:	18c00317 	ldw	r3,12(r3)
811341f0:	18c00404 	addi	r3,r3,16
811341f4:	18c00037 	ldwio	r3,0(r3)
811341f8:	18c01814 	ori	r3,r3,96
811341fc:	10c00035 	stwio	r3,0(r2)
    (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK |
     ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK | 
     IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base)) );

  /* Wait for the descriptor (chain) to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
81134200:	0001883a 	nop
81134204:	e0bffe17 	ldw	r2,-8(fp)
81134208:	10800317 	ldw	r2,12(r2)
8113420c:	10800037 	ldwio	r2,0(r2)
81134210:	1080040c 	andi	r2,r2,16
81134214:	103ffb1e 	bne	r2,zero,81134204 <__reset+0xfb114204>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
81134218:	e0bffe17 	ldw	r2,-8(fp)
8113421c:	10800317 	ldw	r2,12(r2)
81134220:	10800404 	addi	r2,r2,16
81134224:	e0fffe17 	ldw	r3,-8(fp)
81134228:	18c00317 	ldw	r3,12(r3)
8113422c:	18c00404 	addi	r3,r3,16
81134230:	19000037 	ldwio	r4,0(r3)
81134234:	00fff7c4 	movi	r3,-33
81134238:	20c6703a 	and	r3,r4,r3
8113423c:	10c00035 	stwio	r3,0(r2)
    (IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) &
     ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK) );

  /* Get & clear status register contents */
  status = IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base);
81134240:	e0bffe17 	ldw	r2,-8(fp)
81134244:	10800317 	ldw	r2,12(r2)
81134248:	10800037 	ldwio	r2,0(r2)
8113424c:	e0bffd05 	stb	r2,-12(fp)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
81134250:	e0bffe17 	ldw	r2,-8(fp)
81134254:	10800317 	ldw	r2,12(r2)
81134258:	00c03fc4 	movi	r3,255
8113425c:	10c00035 	stwio	r3,0(r2)

  return status;
81134260:	e0bffd03 	ldbu	r2,-12(fp)
}
81134264:	e037883a 	mov	sp,fp
81134268:	df000017 	ldw	fp,0(sp)
8113426c:	dec00104 	addi	sp,sp,4
81134270:	f800283a 	ret

81134274 <alt_avalon_sgdma_construct_mem_to_mem_desc>:
  alt_u32              *read_addr,
  alt_u32              *write_addr,
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed)
{
81134274:	defff404 	addi	sp,sp,-48
81134278:	de00012e 	bgeu	sp,et,81134280 <alt_avalon_sgdma_construct_mem_to_mem_desc+0xc>
8113427c:	003b68fa 	trap	3
81134280:	dfc00b15 	stw	ra,44(sp)
81134284:	df000a15 	stw	fp,40(sp)
81134288:	df000a04 	addi	fp,sp,40
8113428c:	e13ffb15 	stw	r4,-20(fp)
81134290:	e17ffc15 	stw	r5,-16(fp)
81134294:	e1bffd15 	stw	r6,-12(fp)
81134298:	e1fffe15 	stw	r7,-8(fp)
8113429c:	e0800217 	ldw	r2,8(fp)
811342a0:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_mem_desc_burst(desc, next, read_addr, 
811342a4:	e0bfff0b 	ldhu	r2,-4(fp)
811342a8:	d8000415 	stw	zero,16(sp)
811342ac:	d8000315 	stw	zero,12(sp)
811342b0:	e0c00417 	ldw	r3,16(fp)
811342b4:	d8c00215 	stw	r3,8(sp)
811342b8:	e0c00317 	ldw	r3,12(fp)
811342bc:	d8c00115 	stw	r3,4(sp)
811342c0:	d8800015 	stw	r2,0(sp)
811342c4:	e1fffe17 	ldw	r7,-8(fp)
811342c8:	e1bffd17 	ldw	r6,-12(fp)
811342cc:	e17ffc17 	ldw	r5,-16(fp)
811342d0:	e13ffb17 	ldw	r4,-20(fp)
811342d4:	11342f00 	call	811342f0 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>
    write_addr, length, read_fixed, write_fixed, 0, 0);
}
811342d8:	0001883a 	nop
811342dc:	e037883a 	mov	sp,fp
811342e0:	dfc00117 	ldw	ra,4(sp)
811342e4:	df000017 	ldw	fp,0(sp)
811342e8:	dec00204 	addi	sp,sp,8
811342ec:	f800283a 	ret

811342f0 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>:
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed,
  int                   read_burst,
  int                   write_burst)
{
811342f0:	defff204 	addi	sp,sp,-56
811342f4:	de00012e 	bgeu	sp,et,811342fc <alt_avalon_sgdma_construct_mem_to_mem_desc_burst+0xc>
811342f8:	003b68fa 	trap	3
811342fc:	dfc00d15 	stw	ra,52(sp)
81134300:	df000c15 	stw	fp,48(sp)
81134304:	df000c04 	addi	fp,sp,48
81134308:	e13ffb15 	stw	r4,-20(fp)
8113430c:	e17ffc15 	stw	r5,-16(fp)
81134310:	e1bffd15 	stw	r6,-12(fp)
81134314:	e1fffe15 	stw	r7,-8(fp)
81134318:	e0800217 	ldw	r2,8(fp)
8113431c:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
81134320:	e0bfff0b 	ldhu	r2,-4(fp)
81134324:	d8000615 	stw	zero,24(sp)
81134328:	e0c00617 	ldw	r3,24(fp)
8113432c:	d8c00515 	stw	r3,20(sp)
81134330:	e0c00517 	ldw	r3,20(fp)
81134334:	d8c00415 	stw	r3,16(sp)
81134338:	e0c00417 	ldw	r3,16(fp)
8113433c:	d8c00315 	stw	r3,12(sp)
81134340:	e0c00317 	ldw	r3,12(fp)
81134344:	d8c00215 	stw	r3,8(sp)
81134348:	d8000115 	stw	zero,4(sp)
8113434c:	d8800015 	stw	r2,0(sp)
81134350:	e1fffe17 	ldw	r7,-8(fp)
81134354:	e1bffd17 	ldw	r6,-12(fp)
81134358:	e17ffc17 	ldw	r5,-16(fp)
8113435c:	e13ffb17 	ldw	r4,-20(fp)
81134360:	11348ec0 	call	811348ec <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    write_fixed,
    read_burst,
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in mem-to-mem mode
}
81134364:	0001883a 	nop
81134368:	e037883a 	mov	sp,fp
8113436c:	dfc00117 	ldw	ra,4(sp)
81134370:	df000017 	ldw	fp,0(sp)
81134374:	dec00204 	addi	sp,sp,8
81134378:	f800283a 	ret

8113437c <alt_avalon_sgdma_construct_stream_to_mem_desc>:
  alt_sgdma_descriptor *desc,
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed)
{
8113437c:	defff804 	addi	sp,sp,-32
81134380:	de00012e 	bgeu	sp,et,81134388 <alt_avalon_sgdma_construct_stream_to_mem_desc+0xc>
81134384:	003b68fa 	trap	3
81134388:	dfc00715 	stw	ra,28(sp)
8113438c:	df000615 	stw	fp,24(sp)
81134390:	df000604 	addi	fp,sp,24
81134394:	e13ffc15 	stw	r4,-16(fp)
81134398:	e17ffd15 	stw	r5,-12(fp)
8113439c:	e1bffe15 	stw	r6,-8(fp)
811343a0:	3805883a 	mov	r2,r7
811343a4:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_stream_to_mem_desc_burst(desc, next, write_addr, 
811343a8:	e0ffff0b 	ldhu	r3,-4(fp)
811343ac:	d8000115 	stw	zero,4(sp)
811343b0:	e0800217 	ldw	r2,8(fp)
811343b4:	d8800015 	stw	r2,0(sp)
811343b8:	180f883a 	mov	r7,r3
811343bc:	e1bffe17 	ldw	r6,-8(fp)
811343c0:	e17ffd17 	ldw	r5,-12(fp)
811343c4:	e13ffc17 	ldw	r4,-16(fp)
811343c8:	11343e40 	call	811343e4 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>
    length_or_eop, write_fixed, 0);
}
811343cc:	0001883a 	nop
811343d0:	e037883a 	mov	sp,fp
811343d4:	dfc00117 	ldw	ra,4(sp)
811343d8:	df000017 	ldw	fp,0(sp)
811343dc:	dec00204 	addi	sp,sp,8
811343e0:	f800283a 	ret

811343e4 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>:
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed,
  int                   write_burst)
{
811343e4:	defff304 	addi	sp,sp,-52
811343e8:	de00012e 	bgeu	sp,et,811343f0 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst+0xc>
811343ec:	003b68fa 	trap	3
811343f0:	dfc00c15 	stw	ra,48(sp)
811343f4:	df000b15 	stw	fp,44(sp)
811343f8:	df000b04 	addi	fp,sp,44
811343fc:	e13ffc15 	stw	r4,-16(fp)
81134400:	e17ffd15 	stw	r5,-12(fp)
81134404:	e1bffe15 	stw	r6,-8(fp)
81134408:	3805883a 	mov	r2,r7
8113440c:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
81134410:	e0bfff0b 	ldhu	r2,-4(fp)
81134414:	d8000615 	stw	zero,24(sp)
81134418:	e0c00317 	ldw	r3,12(fp)
8113441c:	d8c00515 	stw	r3,20(sp)
81134420:	d8000415 	stw	zero,16(sp)
81134424:	e0c00217 	ldw	r3,8(fp)
81134428:	d8c00315 	stw	r3,12(sp)
8113442c:	d8000215 	stw	zero,8(sp)
81134430:	d8000115 	stw	zero,4(sp)
81134434:	d8800015 	stw	r2,0(sp)
81134438:	e1fffe17 	ldw	r7,-8(fp)
8113443c:	000d883a 	mov	r6,zero
81134440:	e17ffd17 	ldw	r5,-12(fp)
81134444:	e13ffc17 	ldw	r4,-16(fp)
81134448:	11348ec0 	call	811348ec <alt_avalon_sgdma_construct_descriptor_burst>
    0x0,            // Read fixed: N/A in stream-to-mem mode
    write_fixed,
    0,              // Read_burst : N/A in stream-to-mem mode
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in stream-to-mem mode
}
8113444c:	0001883a 	nop
81134450:	e037883a 	mov	sp,fp
81134454:	dfc00117 	ldw	ra,4(sp)
81134458:	df000017 	ldw	fp,0(sp)
8113445c:	dec00204 	addi	sp,sp,8
81134460:	f800283a 	ret

81134464 <alt_avalon_sgdma_construct_mem_to_stream_desc>:
  alt_u16               length,
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  alt_u8                atlantic_channel)
{
81134464:	defff404 	addi	sp,sp,-48
81134468:	de00012e 	bgeu	sp,et,81134470 <alt_avalon_sgdma_construct_mem_to_stream_desc+0xc>
8113446c:	003b68fa 	trap	3
81134470:	dfc00b15 	stw	ra,44(sp)
81134474:	df000a15 	stw	fp,40(sp)
81134478:	df000a04 	addi	fp,sp,40
8113447c:	e13ffb15 	stw	r4,-20(fp)
81134480:	e17ffc15 	stw	r5,-16(fp)
81134484:	e1bffd15 	stw	r6,-12(fp)
81134488:	3807883a 	mov	r3,r7
8113448c:	e0800517 	ldw	r2,20(fp)
81134490:	e0fffe0d 	sth	r3,-8(fp)
81134494:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_stream_desc_burst(desc, next, read_addr, 
81134498:	e0fffe0b 	ldhu	r3,-8(fp)
8113449c:	e0bfff03 	ldbu	r2,-4(fp)
811344a0:	d8800415 	stw	r2,16(sp)
811344a4:	d8000315 	stw	zero,12(sp)
811344a8:	e0800417 	ldw	r2,16(fp)
811344ac:	d8800215 	stw	r2,8(sp)
811344b0:	e0800317 	ldw	r2,12(fp)
811344b4:	d8800115 	stw	r2,4(sp)
811344b8:	e0800217 	ldw	r2,8(fp)
811344bc:	d8800015 	stw	r2,0(sp)
811344c0:	180f883a 	mov	r7,r3
811344c4:	e1bffd17 	ldw	r6,-12(fp)
811344c8:	e17ffc17 	ldw	r5,-16(fp)
811344cc:	e13ffb17 	ldw	r4,-20(fp)
811344d0:	11344ec0 	call	811344ec <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>
    length, read_fixed, generate_sop, generate_eop, 0, atlantic_channel);

}
811344d4:	0001883a 	nop
811344d8:	e037883a 	mov	sp,fp
811344dc:	dfc00117 	ldw	ra,4(sp)
811344e0:	df000017 	ldw	fp,0(sp)
811344e4:	dec00204 	addi	sp,sp,8
811344e8:	f800283a 	ret

811344ec <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>:
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  int                   read_burst,
  alt_u8                atlantic_channel)
{
811344ec:	defff204 	addi	sp,sp,-56
811344f0:	de00012e 	bgeu	sp,et,811344f8 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst+0xc>
811344f4:	003b68fa 	trap	3
811344f8:	dfc00d15 	stw	ra,52(sp)
811344fc:	df000c15 	stw	fp,48(sp)
81134500:	df000c04 	addi	fp,sp,48
81134504:	e13ffb15 	stw	r4,-20(fp)
81134508:	e17ffc15 	stw	r5,-16(fp)
8113450c:	e1bffd15 	stw	r6,-12(fp)
81134510:	3807883a 	mov	r3,r7
81134514:	e0800617 	ldw	r2,24(fp)
81134518:	e0fffe0d 	sth	r3,-8(fp)
8113451c:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
81134520:	e0bffe0b 	ldhu	r2,-8(fp)
81134524:	e0ffff03 	ldbu	r3,-4(fp)
81134528:	d8c00615 	stw	r3,24(sp)
8113452c:	d8000515 	stw	zero,20(sp)
81134530:	e0c00517 	ldw	r3,20(fp)
81134534:	d8c00415 	stw	r3,16(sp)
81134538:	e0c00317 	ldw	r3,12(fp)
8113453c:	d8c00315 	stw	r3,12(sp)
81134540:	e0c00217 	ldw	r3,8(fp)
81134544:	d8c00215 	stw	r3,8(sp)
81134548:	e0c00417 	ldw	r3,16(fp)
8113454c:	d8c00115 	stw	r3,4(sp)
81134550:	d8800015 	stw	r2,0(sp)
81134554:	000f883a 	mov	r7,zero
81134558:	e1bffd17 	ldw	r6,-12(fp)
8113455c:	e17ffc17 	ldw	r5,-16(fp)
81134560:	e13ffb17 	ldw	r4,-20(fp)
81134564:	11348ec0 	call	811348ec <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    generate_sop,
    read_burst,
    0,                 // Write_burst : N/A in mem-to-stream mode
    atlantic_channel);
}
81134568:	0001883a 	nop
8113456c:	e037883a 	mov	sp,fp
81134570:	dfc00117 	ldw	ra,4(sp)
81134574:	df000017 	ldw	fp,0(sp)
81134578:	dec00204 	addi	sp,sp,8
8113457c:	f800283a 	ret

81134580 <alt_avalon_sgdma_register_callback>:
void alt_avalon_sgdma_register_callback(
  alt_sgdma_dev *dev,
  alt_avalon_sgdma_callback callback,
  alt_u32 chain_control,
  void *context)
{
81134580:	defffb04 	addi	sp,sp,-20
81134584:	de00012e 	bgeu	sp,et,8113458c <alt_avalon_sgdma_register_callback+0xc>
81134588:	003b68fa 	trap	3
8113458c:	df000415 	stw	fp,16(sp)
81134590:	df000404 	addi	fp,sp,16
81134594:	e13ffc15 	stw	r4,-16(fp)
81134598:	e17ffd15 	stw	r5,-12(fp)
8113459c:	e1bffe15 	stw	r6,-8(fp)
811345a0:	e1ffff15 	stw	r7,-4(fp)
  dev->callback         = callback;
811345a4:	e0bffc17 	ldw	r2,-16(fp)
811345a8:	e0fffd17 	ldw	r3,-12(fp)
811345ac:	10c00915 	stw	r3,36(r2)
  dev->callback_context = context;
811345b0:	e0bffc17 	ldw	r2,-16(fp)
811345b4:	e0ffff17 	ldw	r3,-4(fp)
811345b8:	10c00a15 	stw	r3,40(r2)
  dev->chain_control    = chain_control;
811345bc:	e0bffc17 	ldw	r2,-16(fp)
811345c0:	e0fffe17 	ldw	r3,-8(fp)
811345c4:	10c00b15 	stw	r3,44(r2)
}
811345c8:	0001883a 	nop
811345cc:	e037883a 	mov	sp,fp
811345d0:	df000017 	ldw	fp,0(sp)
811345d4:	dec00104 	addi	sp,sp,4
811345d8:	f800283a 	ret

811345dc <alt_avalon_sgdma_start>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct.
 */
void alt_avalon_sgdma_start(alt_sgdma_dev *dev)
{
811345dc:	defffd04 	addi	sp,sp,-12
811345e0:	de00012e 	bgeu	sp,et,811345e8 <alt_avalon_sgdma_start+0xc>
811345e4:	003b68fa 	trap	3
811345e8:	df000215 	stw	fp,8(sp)
811345ec:	df000204 	addi	fp,sp,8
811345f0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
811345f4:	e0bfff17 	ldw	r2,-4(fp)
811345f8:	10800317 	ldw	r2,12(r2)
811345fc:	10800404 	addi	r2,r2,16
81134600:	10800037 	ldwio	r2,0(r2)
81134604:	e0bffe15 	stw	r2,-8(fp)
  control |= ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
81134608:	e0bffe17 	ldw	r2,-8(fp)
8113460c:	10800814 	ori	r2,r2,32
81134610:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
81134614:	e0bfff17 	ldw	r2,-4(fp)
81134618:	10800317 	ldw	r2,12(r2)
8113461c:	10800404 	addi	r2,r2,16
81134620:	e0fffe17 	ldw	r3,-8(fp)
81134624:	10c00035 	stwio	r3,0(r2)
}
81134628:	0001883a 	nop
8113462c:	e037883a 	mov	sp,fp
81134630:	df000017 	ldw	fp,0(sp)
81134634:	dec00104 	addi	sp,sp,4
81134638:	f800283a 	ret

8113463c <alt_avalon_sgdma_stop>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct
 */
void alt_avalon_sgdma_stop(alt_sgdma_dev *dev)
{
8113463c:	defffd04 	addi	sp,sp,-12
81134640:	de00012e 	bgeu	sp,et,81134648 <alt_avalon_sgdma_stop+0xc>
81134644:	003b68fa 	trap	3
81134648:	df000215 	stw	fp,8(sp)
8113464c:	df000204 	addi	fp,sp,8
81134650:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
81134654:	e0bfff17 	ldw	r2,-4(fp)
81134658:	10800317 	ldw	r2,12(r2)
8113465c:	10800404 	addi	r2,r2,16
81134660:	10800037 	ldwio	r2,0(r2)
81134664:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
81134668:	e0fffe17 	ldw	r3,-8(fp)
8113466c:	00bff7c4 	movi	r2,-33
81134670:	1884703a 	and	r2,r3,r2
81134674:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
81134678:	e0bfff17 	ldw	r2,-4(fp)
8113467c:	10800317 	ldw	r2,12(r2)
81134680:	10800404 	addi	r2,r2,16
81134684:	e0fffe17 	ldw	r3,-8(fp)
81134688:	10c00035 	stwio	r3,0(r2)
}
8113468c:	0001883a 	nop
81134690:	e037883a 	mov	sp,fp
81134694:	df000017 	ldw	fp,0(sp)
81134698:	dec00104 	addi	sp,sp,4
8113469c:	f800283a 	ret

811346a0 <alt_avalon_sgdma_check_descriptor_status>:
 * - 0 if the descriptor is error-free, not "owned by hardware", or
 *   a previously requested transfer has appeared to have completed
 *   normally. Or, various error conditions defined in <errno.h>
 */
int alt_avalon_sgdma_check_descriptor_status(alt_sgdma_descriptor *desc)
{
811346a0:	defffe04 	addi	sp,sp,-8
811346a4:	de00012e 	bgeu	sp,et,811346ac <alt_avalon_sgdma_check_descriptor_status+0xc>
811346a8:	003b68fa 	trap	3
811346ac:	df000115 	stw	fp,4(sp)
811346b0:	df000104 	addi	fp,sp,4
811346b4:	e13fff15 	stw	r4,-4(fp)
  /* Errors take precedence */
  if( IORD_8DIRECT(&desc->status, 0) &
811346b8:	e0bfff17 	ldw	r2,-4(fp)
811346bc:	10800784 	addi	r2,r2,30
811346c0:	10800023 	ldbuio	r2,0(r2)
811346c4:	10803fcc 	andi	r2,r2,255
811346c8:	10801fcc 	andi	r2,r2,127
811346cc:	10000226 	beq	r2,zero,811346d8 <alt_avalon_sgdma_check_descriptor_status+0x38>
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_OVERFLOW_MSK |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_SYNC_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_UEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) {
    return -EIO;
811346d0:	00bffec4 	movi	r2,-5
811346d4:	00000906 	br	811346fc <alt_avalon_sgdma_check_descriptor_status+0x5c>
  }

  if( IORD_8DIRECT(&desc->control, 0) &
811346d8:	e0bfff17 	ldw	r2,-4(fp)
811346dc:	108007c4 	addi	r2,r2,31
811346e0:	10800023 	ldbuio	r2,0(r2)
811346e4:	10803fcc 	andi	r2,r2,255
811346e8:	1080200c 	andi	r2,r2,128
811346ec:	10000226 	beq	r2,zero,811346f8 <alt_avalon_sgdma_check_descriptor_status+0x58>
      ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK) {
    return -EINPROGRESS;
811346f0:	00bfe244 	movi	r2,-119
811346f4:	00000106 	br	811346fc <alt_avalon_sgdma_check_descriptor_status+0x5c>
  }

    return 0;
811346f8:	0005883a 	mov	r2,zero
}
811346fc:	e037883a 	mov	sp,fp
81134700:	df000017 	ldw	fp,0(sp)
81134704:	dec00104 	addi	sp,sp,4
81134708:	f800283a 	ret

8113470c <alt_avalon_sgdma_open>:
 * Returns:
 * - Pointer to SGDMA device instance struct, or null if the device
 *   could not be opened.
 */
alt_sgdma_dev* alt_avalon_sgdma_open (const char* name)
{
8113470c:	defffc04 	addi	sp,sp,-16
81134710:	de00012e 	bgeu	sp,et,81134718 <alt_avalon_sgdma_open+0xc>
81134714:	003b68fa 	trap	3
81134718:	dfc00315 	stw	ra,12(sp)
8113471c:	df000215 	stw	fp,8(sp)
81134720:	df000204 	addi	fp,sp,8
81134724:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev* dev;

  dev = (alt_sgdma_dev*) alt_find_dev (name, &alt_sgdma_list);
81134728:	d1603904 	addi	r5,gp,-32540
8113472c:	e13fff17 	ldw	r4,-4(fp)
81134730:	11380480 	call	81138048 <alt_find_dev>
81134734:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev) {
81134738:	e0bffe17 	ldw	r2,-8(fp)
8113473c:	1000041e 	bne	r2,zero,81134750 <alt_avalon_sgdma_open+0x44>
    ALT_ERRNO = ENODEV;
81134740:	1133fec0 	call	81133fec <alt_get_errno>
81134744:	1007883a 	mov	r3,r2
81134748:	008004c4 	movi	r2,19
8113474c:	18800015 	stw	r2,0(r3)
  }

  return dev;
81134750:	e0bffe17 	ldw	r2,-8(fp)
}
81134754:	e037883a 	mov	sp,fp
81134758:	dfc00117 	ldw	ra,4(sp)
8113475c:	df000017 	ldw	fp,0(sp)
81134760:	dec00204 	addi	sp,sp,8
81134764:	f800283a 	ret

81134768 <alt_avalon_sgdma_construct_descriptor>:
  alt_u16               length_or_eop,
  int                   generate_eop,
  int                   read_fixed,
  int                   write_fixed_or_sop,
  alt_u8                atlantic_channel)
{
81134768:	defff104 	addi	sp,sp,-60
8113476c:	de00012e 	bgeu	sp,et,81134774 <alt_avalon_sgdma_construct_descriptor+0xc>
81134770:	003b68fa 	trap	3
81134774:	dfc00e15 	stw	ra,56(sp)
81134778:	df000d15 	stw	fp,52(sp)
8113477c:	df000d04 	addi	fp,sp,52
81134780:	e13ffa15 	stw	r4,-24(fp)
81134784:	e17ffb15 	stw	r5,-20(fp)
81134788:	e1bffc15 	stw	r6,-16(fp)
8113478c:	e1fffd15 	stw	r7,-12(fp)
81134790:	e0c00217 	ldw	r3,8(fp)
81134794:	e0800617 	ldw	r2,24(fp)
81134798:	e0fffe0d 	sth	r3,-8(fp)
8113479c:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(desc, next, read_addr, 
811347a0:	e0bffe0b 	ldhu	r2,-8(fp)
811347a4:	e0ffff03 	ldbu	r3,-4(fp)
811347a8:	d8c00615 	stw	r3,24(sp)
811347ac:	d8000515 	stw	zero,20(sp)
811347b0:	d8000415 	stw	zero,16(sp)
811347b4:	e0c00517 	ldw	r3,20(fp)
811347b8:	d8c00315 	stw	r3,12(sp)
811347bc:	e0c00417 	ldw	r3,16(fp)
811347c0:	d8c00215 	stw	r3,8(sp)
811347c4:	e0c00317 	ldw	r3,12(fp)
811347c8:	d8c00115 	stw	r3,4(sp)
811347cc:	d8800015 	stw	r2,0(sp)
811347d0:	e1fffd17 	ldw	r7,-12(fp)
811347d4:	e1bffc17 	ldw	r6,-16(fp)
811347d8:	e17ffb17 	ldw	r5,-20(fp)
811347dc:	e13ffa17 	ldw	r4,-24(fp)
811347e0:	11348ec0 	call	811348ec <alt_avalon_sgdma_construct_descriptor_burst>
    write_addr, length_or_eop, generate_eop, read_fixed, write_fixed_or_sop, 
    0, 0, atlantic_channel);
}
811347e4:	0001883a 	nop
811347e8:	e037883a 	mov	sp,fp
811347ec:	dfc00117 	ldw	ra,4(sp)
811347f0:	df000017 	ldw	fp,0(sp)
811347f4:	dec00204 	addi	sp,sp,8
811347f8:	f800283a 	ret

811347fc <alt_avalon_sgdma_enable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_enable_desc_poll(alt_sgdma_dev *dev, alt_u32 frequency)
{
811347fc:	defffc04 	addi	sp,sp,-16
81134800:	de00012e 	bgeu	sp,et,81134808 <alt_avalon_sgdma_enable_desc_poll+0xc>
81134804:	003b68fa 	trap	3
81134808:	df000315 	stw	fp,12(sp)
8113480c:	df000304 	addi	fp,sp,12
81134810:	e13ffe15 	stw	r4,-8(fp)
81134814:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
81134818:	e0bffe17 	ldw	r2,-8(fp)
8113481c:	10800317 	ldw	r2,12(r2)
81134820:	10800404 	addi	r2,r2,16
81134824:	10800037 	ldwio	r2,0(r2)
81134828:	e0bffd15 	stw	r2,-12(fp)
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
8113482c:	e0fffd17 	ldw	r3,-12(fp)
81134830:	00a00434 	movhi	r2,32784
81134834:	10bfffc4 	addi	r2,r2,-1
81134838:	1884703a 	and	r2,r3,r2
8113483c:	e0bffd15 	stw	r2,-12(fp)
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
81134840:	e0bfff17 	ldw	r2,-4(fp)
81134844:	1004953a 	slli	r2,r2,20
81134848:	10dffc2c 	andhi	r3,r2,32752

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
8113484c:	e0bffd17 	ldw	r2,-12(fp)
81134850:	1884b03a 	or	r2,r3,r2
81134854:	10800134 	orhi	r2,r2,4
81134858:	e0bffd15 	stw	r2,-12(fp)
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
            ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
8113485c:	e0bffe17 	ldw	r2,-8(fp)
81134860:	10800317 	ldw	r2,12(r2)
81134864:	10800404 	addi	r2,r2,16
81134868:	e0fffd17 	ldw	r3,-12(fp)
8113486c:	10c00035 	stwio	r3,0(r2)
  
  return;
81134870:	0001883a 	nop
}
81134874:	e037883a 	mov	sp,fp
81134878:	df000017 	ldw	fp,0(sp)
8113487c:	dec00104 	addi	sp,sp,4
81134880:	f800283a 	ret

81134884 <alt_avalon_sgdma_disable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_disable_desc_poll(alt_sgdma_dev *dev)
{
81134884:	defffd04 	addi	sp,sp,-12
81134888:	de00012e 	bgeu	sp,et,81134890 <alt_avalon_sgdma_disable_desc_poll+0xc>
8113488c:	003b68fa 	trap	3
81134890:	df000215 	stw	fp,8(sp)
81134894:	df000204 	addi	fp,sp,8
81134898:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
8113489c:	e0bfff17 	ldw	r2,-4(fp)
811348a0:	10800317 	ldw	r2,12(r2)
811348a4:	10800404 	addi	r2,r2,16
811348a8:	10800037 	ldwio	r2,0(r2)
811348ac:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK;
811348b0:	e0fffe17 	ldw	r3,-8(fp)
811348b4:	00bfff34 	movhi	r2,65532
811348b8:	10bfffc4 	addi	r2,r2,-1
811348bc:	1884703a 	and	r2,r3,r2
811348c0:	e0bffe15 	stw	r2,-8(fp)

  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
811348c4:	e0bfff17 	ldw	r2,-4(fp)
811348c8:	10800317 	ldw	r2,12(r2)
811348cc:	10800404 	addi	r2,r2,16
811348d0:	e0fffe17 	ldw	r3,-8(fp)
811348d4:	10c00035 	stwio	r3,0(r2)
  
  return;
811348d8:	0001883a 	nop
}
811348dc:	e037883a 	mov	sp,fp
811348e0:	df000017 	ldw	fp,0(sp)
811348e4:	dec00104 	addi	sp,sp,4
811348e8:	f800283a 	ret

811348ec <alt_avalon_sgdma_construct_descriptor_burst>:
  int                   read_fixed,
  int                   write_fixed_or_sop,
  int                   read_burst,
  int                   write_burst,
  alt_u8                atlantic_channel)
{
811348ec:	defff804 	addi	sp,sp,-32
811348f0:	de00012e 	bgeu	sp,et,811348f8 <alt_avalon_sgdma_construct_descriptor_burst+0xc>
811348f4:	003b68fa 	trap	3
811348f8:	dfc00715 	stw	ra,28(sp)
811348fc:	df000615 	stw	fp,24(sp)
81134900:	df000604 	addi	fp,sp,24
81134904:	e13ffa15 	stw	r4,-24(fp)
81134908:	e17ffb15 	stw	r5,-20(fp)
8113490c:	e1bffc15 	stw	r6,-16(fp)
81134910:	e1fffd15 	stw	r7,-12(fp)
81134914:	e0c00217 	ldw	r3,8(fp)
81134918:	e0800817 	ldw	r2,32(fp)
8113491c:	e0fffe0d 	sth	r3,-8(fp)
81134920:	e0bfff05 	stb	r2,-4(fp)
   * The SGDMA controller from continuing to process the chain. This is
   * done as a single IO write to bypass cache, without flushing
   * the entire descriptor, since only the 8-bit descriptor status must
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
81134924:	e0bffb17 	ldw	r2,-20(fp)
81134928:	108007c4 	addi	r2,r2,31
8113492c:	e0fffb17 	ldw	r3,-20(fp)
81134930:	18c007c3 	ldbu	r3,31(r3)
81134934:	19003fcc 	andi	r4,r3,255
81134938:	00ffdfc4 	movi	r3,-129
8113493c:	20c6703a 	and	r3,r4,r3
81134940:	10c00025 	stbio	r3,0(r2)
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
81134944:	e0bffa17 	ldw	r2,-24(fp)
81134948:	e0fffc17 	ldw	r3,-16(fp)
8113494c:	19403fcc 	andi	r5,r3,255
81134950:	10c00003 	ldbu	r3,0(r2)
81134954:	1806703a 	and	r3,r3,zero
81134958:	1809883a 	mov	r4,r3
8113495c:	2807883a 	mov	r3,r5
81134960:	20c6b03a 	or	r3,r4,r3
81134964:	10c00005 	stb	r3,0(r2)
81134968:	e0fffc17 	ldw	r3,-16(fp)
8113496c:	1806d23a 	srli	r3,r3,8
81134970:	19403fcc 	andi	r5,r3,255
81134974:	10c00043 	ldbu	r3,1(r2)
81134978:	1806703a 	and	r3,r3,zero
8113497c:	1809883a 	mov	r4,r3
81134980:	2807883a 	mov	r3,r5
81134984:	20c6b03a 	or	r3,r4,r3
81134988:	10c00045 	stb	r3,1(r2)
8113498c:	e0fffc17 	ldw	r3,-16(fp)
81134990:	1806d43a 	srli	r3,r3,16
81134994:	19403fcc 	andi	r5,r3,255
81134998:	10c00083 	ldbu	r3,2(r2)
8113499c:	1806703a 	and	r3,r3,zero
811349a0:	1809883a 	mov	r4,r3
811349a4:	2807883a 	mov	r3,r5
811349a8:	20c6b03a 	or	r3,r4,r3
811349ac:	10c00085 	stb	r3,2(r2)
811349b0:	e0fffc17 	ldw	r3,-16(fp)
811349b4:	180ad63a 	srli	r5,r3,24
811349b8:	10c000c3 	ldbu	r3,3(r2)
811349bc:	1806703a 	and	r3,r3,zero
811349c0:	1809883a 	mov	r4,r3
811349c4:	2807883a 	mov	r3,r5
811349c8:	20c6b03a 	or	r3,r4,r3
811349cc:	10c000c5 	stb	r3,3(r2)
  desc->write_addr               = write_addr;
811349d0:	e0bffa17 	ldw	r2,-24(fp)
811349d4:	e0fffd17 	ldw	r3,-12(fp)
811349d8:	19403fcc 	andi	r5,r3,255
811349dc:	10c00203 	ldbu	r3,8(r2)
811349e0:	1806703a 	and	r3,r3,zero
811349e4:	1809883a 	mov	r4,r3
811349e8:	2807883a 	mov	r3,r5
811349ec:	20c6b03a 	or	r3,r4,r3
811349f0:	10c00205 	stb	r3,8(r2)
811349f4:	e0fffd17 	ldw	r3,-12(fp)
811349f8:	1806d23a 	srli	r3,r3,8
811349fc:	19403fcc 	andi	r5,r3,255
81134a00:	10c00243 	ldbu	r3,9(r2)
81134a04:	1806703a 	and	r3,r3,zero
81134a08:	1809883a 	mov	r4,r3
81134a0c:	2807883a 	mov	r3,r5
81134a10:	20c6b03a 	or	r3,r4,r3
81134a14:	10c00245 	stb	r3,9(r2)
81134a18:	e0fffd17 	ldw	r3,-12(fp)
81134a1c:	1806d43a 	srli	r3,r3,16
81134a20:	19403fcc 	andi	r5,r3,255
81134a24:	10c00283 	ldbu	r3,10(r2)
81134a28:	1806703a 	and	r3,r3,zero
81134a2c:	1809883a 	mov	r4,r3
81134a30:	2807883a 	mov	r3,r5
81134a34:	20c6b03a 	or	r3,r4,r3
81134a38:	10c00285 	stb	r3,10(r2)
81134a3c:	e0fffd17 	ldw	r3,-12(fp)
81134a40:	180ad63a 	srli	r5,r3,24
81134a44:	10c002c3 	ldbu	r3,11(r2)
81134a48:	1806703a 	and	r3,r3,zero
81134a4c:	1809883a 	mov	r4,r3
81134a50:	2807883a 	mov	r3,r5
81134a54:	20c6b03a 	or	r3,r4,r3
81134a58:	10c002c5 	stb	r3,11(r2)
  desc->next                     = (alt_u32 *) next;
81134a5c:	e0bffa17 	ldw	r2,-24(fp)
81134a60:	e0fffb17 	ldw	r3,-20(fp)
81134a64:	19403fcc 	andi	r5,r3,255
81134a68:	10c00403 	ldbu	r3,16(r2)
81134a6c:	1806703a 	and	r3,r3,zero
81134a70:	1809883a 	mov	r4,r3
81134a74:	2807883a 	mov	r3,r5
81134a78:	20c6b03a 	or	r3,r4,r3
81134a7c:	10c00405 	stb	r3,16(r2)
81134a80:	e0fffb17 	ldw	r3,-20(fp)
81134a84:	1806d23a 	srli	r3,r3,8
81134a88:	19403fcc 	andi	r5,r3,255
81134a8c:	10c00443 	ldbu	r3,17(r2)
81134a90:	1806703a 	and	r3,r3,zero
81134a94:	1809883a 	mov	r4,r3
81134a98:	2807883a 	mov	r3,r5
81134a9c:	20c6b03a 	or	r3,r4,r3
81134aa0:	10c00445 	stb	r3,17(r2)
81134aa4:	e0fffb17 	ldw	r3,-20(fp)
81134aa8:	1806d43a 	srli	r3,r3,16
81134aac:	19403fcc 	andi	r5,r3,255
81134ab0:	10c00483 	ldbu	r3,18(r2)
81134ab4:	1806703a 	and	r3,r3,zero
81134ab8:	1809883a 	mov	r4,r3
81134abc:	2807883a 	mov	r3,r5
81134ac0:	20c6b03a 	or	r3,r4,r3
81134ac4:	10c00485 	stb	r3,18(r2)
81134ac8:	e0fffb17 	ldw	r3,-20(fp)
81134acc:	180ad63a 	srli	r5,r3,24
81134ad0:	10c004c3 	ldbu	r3,19(r2)
81134ad4:	1806703a 	and	r3,r3,zero
81134ad8:	1809883a 	mov	r4,r3
81134adc:	2807883a 	mov	r3,r5
81134ae0:	20c6b03a 	or	r3,r4,r3
81134ae4:	10c004c5 	stb	r3,19(r2)
  desc->read_addr_pad            = 0x0;
81134ae8:	e0bffa17 	ldw	r2,-24(fp)
81134aec:	10c00103 	ldbu	r3,4(r2)
81134af0:	1806703a 	and	r3,r3,zero
81134af4:	10c00105 	stb	r3,4(r2)
81134af8:	10c00143 	ldbu	r3,5(r2)
81134afc:	1806703a 	and	r3,r3,zero
81134b00:	10c00145 	stb	r3,5(r2)
81134b04:	10c00183 	ldbu	r3,6(r2)
81134b08:	1806703a 	and	r3,r3,zero
81134b0c:	10c00185 	stb	r3,6(r2)
81134b10:	10c001c3 	ldbu	r3,7(r2)
81134b14:	1806703a 	and	r3,r3,zero
81134b18:	10c001c5 	stb	r3,7(r2)
  desc->write_addr_pad           = 0x0;
81134b1c:	e0bffa17 	ldw	r2,-24(fp)
81134b20:	10c00303 	ldbu	r3,12(r2)
81134b24:	1806703a 	and	r3,r3,zero
81134b28:	10c00305 	stb	r3,12(r2)
81134b2c:	10c00343 	ldbu	r3,13(r2)
81134b30:	1806703a 	and	r3,r3,zero
81134b34:	10c00345 	stb	r3,13(r2)
81134b38:	10c00383 	ldbu	r3,14(r2)
81134b3c:	1806703a 	and	r3,r3,zero
81134b40:	10c00385 	stb	r3,14(r2)
81134b44:	10c003c3 	ldbu	r3,15(r2)
81134b48:	1806703a 	and	r3,r3,zero
81134b4c:	10c003c5 	stb	r3,15(r2)
  desc->next_pad                 = 0x0;
81134b50:	e0bffa17 	ldw	r2,-24(fp)
81134b54:	10c00503 	ldbu	r3,20(r2)
81134b58:	1806703a 	and	r3,r3,zero
81134b5c:	10c00505 	stb	r3,20(r2)
81134b60:	10c00543 	ldbu	r3,21(r2)
81134b64:	1806703a 	and	r3,r3,zero
81134b68:	10c00545 	stb	r3,21(r2)
81134b6c:	10c00583 	ldbu	r3,22(r2)
81134b70:	1806703a 	and	r3,r3,zero
81134b74:	10c00585 	stb	r3,22(r2)
81134b78:	10c005c3 	ldbu	r3,23(r2)
81134b7c:	1806703a 	and	r3,r3,zero
81134b80:	10c005c5 	stb	r3,23(r2)
  desc->bytes_to_transfer        = length_or_eop;
81134b84:	e0bffa17 	ldw	r2,-24(fp)
81134b88:	e0fffe17 	ldw	r3,-8(fp)
81134b8c:	19403fcc 	andi	r5,r3,255
81134b90:	10c00603 	ldbu	r3,24(r2)
81134b94:	1806703a 	and	r3,r3,zero
81134b98:	1809883a 	mov	r4,r3
81134b9c:	2807883a 	mov	r3,r5
81134ba0:	20c6b03a 	or	r3,r4,r3
81134ba4:	10c00605 	stb	r3,24(r2)
81134ba8:	e0fffe17 	ldw	r3,-8(fp)
81134bac:	1806d23a 	srli	r3,r3,8
81134bb0:	19403fcc 	andi	r5,r3,255
81134bb4:	10c00643 	ldbu	r3,25(r2)
81134bb8:	1806703a 	and	r3,r3,zero
81134bbc:	1809883a 	mov	r4,r3
81134bc0:	2807883a 	mov	r3,r5
81134bc4:	20c6b03a 	or	r3,r4,r3
81134bc8:	10c00645 	stb	r3,25(r2)
  desc->actual_bytes_transferred = 0;
81134bcc:	e0bffa17 	ldw	r2,-24(fp)
81134bd0:	10c00703 	ldbu	r3,28(r2)
81134bd4:	1806703a 	and	r3,r3,zero
81134bd8:	10c00705 	stb	r3,28(r2)
81134bdc:	10c00743 	ldbu	r3,29(r2)
81134be0:	1806703a 	and	r3,r3,zero
81134be4:	10c00745 	stb	r3,29(r2)
  desc->status                   = 0x0;
81134be8:	e0bffa17 	ldw	r2,-24(fp)
81134bec:	10000785 	stb	zero,30(r2)

  /* SGDMA burst not currently supported */
  desc->read_burst               = read_burst;
81134bf0:	e0800617 	ldw	r2,24(fp)
81134bf4:	1007883a 	mov	r3,r2
81134bf8:	e0bffa17 	ldw	r2,-24(fp)
81134bfc:	10c00685 	stb	r3,26(r2)
  desc->write_burst              = write_burst;
81134c00:	e0800717 	ldw	r2,28(fp)
81134c04:	1007883a 	mov	r3,r2
81134c08:	e0bffa17 	ldw	r2,-24(fp)
81134c0c:	10c006c5 	stb	r3,27(r2)
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
81134c10:	e0800317 	ldw	r2,12(fp)
81134c14:	10000226 	beq	r2,zero,81134c20 <alt_avalon_sgdma_construct_descriptor_burst+0x334>
81134c18:	00bfe044 	movi	r2,-127
81134c1c:	00000106 	br	81134c24 <alt_avalon_sgdma_construct_descriptor_burst+0x338>
81134c20:	00bfe004 	movi	r2,-128
81134c24:	e0c00417 	ldw	r3,16(fp)
81134c28:	18000226 	beq	r3,zero,81134c34 <alt_avalon_sgdma_construct_descriptor_burst+0x348>
81134c2c:	00c00084 	movi	r3,2
81134c30:	00000106 	br	81134c38 <alt_avalon_sgdma_construct_descriptor_burst+0x34c>
81134c34:	0007883a 	mov	r3,zero
81134c38:	10c4b03a 	or	r2,r2,r3
81134c3c:	1007883a 	mov	r3,r2
81134c40:	e0800517 	ldw	r2,20(fp)
81134c44:	10000226 	beq	r2,zero,81134c50 <alt_avalon_sgdma_construct_descriptor_burst+0x364>
81134c48:	00800104 	movi	r2,4
81134c4c:	00000106 	br	81134c54 <alt_avalon_sgdma_construct_descriptor_burst+0x368>
81134c50:	0005883a 	mov	r2,zero
81134c54:	1884b03a 	or	r2,r3,r2
81134c58:	1007883a 	mov	r3,r2
81134c5c:	e0bfff03 	ldbu	r2,-4(fp)
81134c60:	10000426 	beq	r2,zero,81134c74 <alt_avalon_sgdma_construct_descriptor_burst+0x388>
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_GENERATE_EOP_MSK : 0x0)        |
    (read_fixed ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_READ_FIXED_ADDRESS_MSK : 0x0)  |
    (write_fixed_or_sop ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_WRITE_FIXED_ADDRESS_MSK : 0x0) |
    (atlantic_channel ? ( (atlantic_channel & 0x0F) << 3) : 0)
81134c64:	e0bfff03 	ldbu	r2,-4(fp)
81134c68:	108003cc 	andi	r2,r2,15
81134c6c:	100490fa 	slli	r2,r2,3
81134c70:	00000106 	br	81134c78 <alt_avalon_sgdma_construct_descriptor_burst+0x38c>
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
81134c74:	0005883a 	mov	r2,zero
81134c78:	1884b03a 	or	r2,r3,r2
81134c7c:	1007883a 	mov	r3,r2
81134c80:	e0bffa17 	ldw	r2,-24(fp)
81134c84:	10c007c5 	stb	r3,31(r2)
  /*
   * Flush completed buffer out of cache. This is done rather than
   * individual cache-bypassed writes to take advantage of any
   * burst-capabilities in the memory we're writing to.
   */
  alt_dcache_flush(desc, sizeof(alt_sgdma_descriptor));
81134c88:	01400804 	movi	r5,32
81134c8c:	e13ffa17 	ldw	r4,-24(fp)
81134c90:	1137e580 	call	81137e58 <alt_dcache_flush>
}
81134c94:	0001883a 	nop
81134c98:	e037883a 	mov	sp,fp
81134c9c:	dfc00117 	ldw	ra,4(sp)
81134ca0:	df000017 	ldw	fp,0(sp)
81134ca4:	dec00204 	addi	sp,sp,8
81134ca8:	f800283a 	ret

81134cac <alt_avalon_sgdma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_sgdma_irq(void *context)
#else
static void alt_avalon_sgdma_irq(void *context, alt_u32 id)
#endif
{
81134cac:	defff904 	addi	sp,sp,-28
81134cb0:	de00012e 	bgeu	sp,et,81134cb8 <alt_avalon_sgdma_irq+0xc>
81134cb4:	003b68fa 	trap	3
81134cb8:	dfc00615 	stw	ra,24(sp)
81134cbc:	df000515 	stw	fp,20(sp)
81134cc0:	df000504 	addi	fp,sp,20
81134cc4:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev *dev = (alt_sgdma_dev *) context;
81134cc8:	e0bfff17 	ldw	r2,-4(fp)
81134ccc:	e0bffb15 	stw	r2,-20(fp)
   * Note: This is explicitly done before calling user interrupt-handling
   * code rather than after; if user ISR code initiates another SGDMA
   * transfer which completes quickly, reading the control register after
   * the callback routine may result in a lost interrupt.
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
81134cd0:	e0bffb17 	ldw	r2,-20(fp)
81134cd4:	10800317 	ldw	r2,12(r2)
81134cd8:	10800404 	addi	r2,r2,16
81134cdc:	e0fffb17 	ldw	r3,-20(fp)
81134ce0:	18c00317 	ldw	r3,12(r3)
81134ce4:	18c00404 	addi	r3,r3,16
81134ce8:	18c00037 	ldwio	r3,0(r3)
81134cec:	18e00034 	orhi	r3,r3,32768
81134cf0:	10c00035 	stwio	r3,0(r2)
    IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) | 0x80000000);
  
  /* Dummy read to ensure IRQ is negated before the ISR returns */
  IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
81134cf4:	e0bffb17 	ldw	r2,-20(fp)
81134cf8:	10800317 	ldw	r2,12(r2)
81134cfc:	10800404 	addi	r2,r2,16
81134d00:	10800037 	ldwio	r2,0(r2)
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the driver to support 
   * interrupt preemption.
   */
  if(dev->callback) {
81134d04:	e0bffb17 	ldw	r2,-20(fp)
81134d08:	10800917 	ldw	r2,36(r2)
81134d0c:	10001226 	beq	r2,zero,81134d58 <alt_avalon_sgdma_irq+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81134d10:	0005303a 	rdctl	r2,status
81134d14:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81134d18:	e0fffd17 	ldw	r3,-12(fp)
81134d1c:	00bfff84 	movi	r2,-2
81134d20:	1884703a 	and	r2,r3,r2
81134d24:	1001703a 	wrctl	status,r2
  
  return context;
81134d28:	e0bffd17 	ldw	r2,-12(fp)
    cpu_sr = alt_irq_disable_all();
81134d2c:	e0bffc15 	stw	r2,-16(fp)
    (dev->callback)(dev->callback_context);
81134d30:	e0bffb17 	ldw	r2,-20(fp)
81134d34:	10800917 	ldw	r2,36(r2)
81134d38:	e0fffb17 	ldw	r3,-20(fp)
81134d3c:	18c00a17 	ldw	r3,40(r3)
81134d40:	1809883a 	mov	r4,r3
81134d44:	103ee83a 	callr	r2
81134d48:	e0bffc17 	ldw	r2,-16(fp)
81134d4c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81134d50:	e0bffe17 	ldw	r2,-8(fp)
81134d54:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
  }
}
81134d58:	0001883a 	nop
81134d5c:	e037883a 	mov	sp,fp
81134d60:	dfc00117 	ldw	ra,4(sp)
81134d64:	df000017 	ldw	fp,0(sp)
81134d68:	dec00204 	addi	sp,sp,8
81134d6c:	f800283a 	ret

81134d70 <alt_avalon_sgdma_init>:
 * This routine disables interrupts, future descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_avalon_sgdma_init (alt_sgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
81134d70:	defffa04 	addi	sp,sp,-24
81134d74:	de00012e 	bgeu	sp,et,81134d7c <alt_avalon_sgdma_init+0xc>
81134d78:	003b68fa 	trap	3
81134d7c:	dfc00515 	stw	ra,20(sp)
81134d80:	df000415 	stw	fp,16(sp)
81134d84:	df000404 	addi	fp,sp,16
81134d88:	e13ffd15 	stw	r4,-12(fp)
81134d8c:	e17ffe15 	stw	r5,-8(fp)
81134d90:	e1bfff15 	stw	r6,-4(fp)

  /* 
   * Halt any current transactions (reset the device)
   * SW reset is written twice per SGDMA documentation 
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
81134d94:	e0bffd17 	ldw	r2,-12(fp)
81134d98:	10800317 	ldw	r2,12(r2)
81134d9c:	10800404 	addi	r2,r2,16
81134da0:	00c00074 	movhi	r3,1
81134da4:	10c00035 	stwio	r3,0(r2)
    ALTERA_AVALON_SGDMA_CONTROL_SOFTWARERESET_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
81134da8:	e0bffd17 	ldw	r2,-12(fp)
81134dac:	10800317 	ldw	r2,12(r2)
81134db0:	10800404 	addi	r2,r2,16
81134db4:	00c00074 	movhi	r3,1
81134db8:	10c00035 	stwio	r3,0(r2)

  /*
   * Disable interrupts, halt future descriptor processing,
   * and clear status register content
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 0x0);
81134dbc:	e0bffd17 	ldw	r2,-12(fp)
81134dc0:	10800317 	ldw	r2,12(r2)
81134dc4:	10800404 	addi	r2,r2,16
81134dc8:	0007883a 	mov	r3,zero
81134dcc:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
81134dd0:	e0bffd17 	ldw	r2,-12(fp)
81134dd4:	10800317 	ldw	r2,12(r2)
81134dd8:	00c03fc4 	movi	r3,255
81134ddc:	10c00035 	stwio	r3,0(r2)

  /* Register this instance of the SGDMA controller with HAL */
  alt_dev_llist_insert((alt_dev_llist*) dev, &alt_sgdma_list);
81134de0:	d1603904 	addi	r5,gp,-32540
81134de4:	e13ffd17 	ldw	r4,-12(fp)
81134de8:	1137ecc0 	call	81137ecc <alt_dev_llist_insert>

  /* Install IRQ handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(ic_id, irq, alt_avalon_sgdma_irq, dev, 0x0);
81134dec:	d8000015 	stw	zero,0(sp)
81134df0:	e1fffd17 	ldw	r7,-12(fp)
81134df4:	01a044f4 	movhi	r6,33043
81134df8:	31932b04 	addi	r6,r6,19628
81134dfc:	e17fff17 	ldw	r5,-4(fp)
81134e00:	e13ffe17 	ldw	r4,-8(fp)
81134e04:	11382d40 	call	811382d4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, dev, alt_avalon_sgdma_irq);
#endif  
}
81134e08:	0001883a 	nop
81134e0c:	e037883a 	mov	sp,fp
81134e10:	dfc00117 	ldw	ra,4(sp)
81134e14:	df000017 	ldw	fp,0(sp)
81134e18:	dec00204 	addi	sp,sp,8
81134e1c:	f800283a 	ret

81134e20 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
81134e20:	defffa04 	addi	sp,sp,-24
81134e24:	de00012e 	bgeu	sp,et,81134e2c <alt_avalon_timer_sc_irq+0xc>
81134e28:	003b68fa 	trap	3
81134e2c:	dfc00515 	stw	ra,20(sp)
81134e30:	df000415 	stw	fp,16(sp)
81134e34:	df000404 	addi	fp,sp,16
81134e38:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
81134e3c:	0007883a 	mov	r3,zero
81134e40:	e0bfff17 	ldw	r2,-4(fp)
81134e44:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
81134e48:	e0bfff17 	ldw	r2,-4(fp)
81134e4c:	10800104 	addi	r2,r2,4
81134e50:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81134e54:	0005303a 	rdctl	r2,status
81134e58:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81134e5c:	e0fffd17 	ldw	r3,-12(fp)
81134e60:	00bfff84 	movi	r2,-2
81134e64:	1884703a 	and	r2,r3,r2
81134e68:	1001703a 	wrctl	status,r2
  
  return context;
81134e6c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
81134e70:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
81134e74:	11248b40 	call	811248b4 <alt_tick>
81134e78:	e0bffc17 	ldw	r2,-16(fp)
81134e7c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81134e80:	e0bffe17 	ldw	r2,-8(fp)
81134e84:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
81134e88:	0001883a 	nop
81134e8c:	e037883a 	mov	sp,fp
81134e90:	dfc00117 	ldw	ra,4(sp)
81134e94:	df000017 	ldw	fp,0(sp)
81134e98:	dec00204 	addi	sp,sp,8
81134e9c:	f800283a 	ret

81134ea0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
81134ea0:	defff804 	addi	sp,sp,-32
81134ea4:	de00012e 	bgeu	sp,et,81134eac <alt_avalon_timer_sc_init+0xc>
81134ea8:	003b68fa 	trap	3
81134eac:	dfc00715 	stw	ra,28(sp)
81134eb0:	df000615 	stw	fp,24(sp)
81134eb4:	df000604 	addi	fp,sp,24
81134eb8:	e13ffc15 	stw	r4,-16(fp)
81134ebc:	e17ffd15 	stw	r5,-12(fp)
81134ec0:	e1bffe15 	stw	r6,-8(fp)
81134ec4:	e1ffff15 	stw	r7,-4(fp)
81134ec8:	e0bfff17 	ldw	r2,-4(fp)
81134ecc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
81134ed0:	d0a07617 	ldw	r2,-32296(gp)
81134ed4:	1000021e 	bne	r2,zero,81134ee0 <alt_avalon_timer_sc_init+0x40>
  {
    _alt_tick_rate = nticks;
81134ed8:	e0bffb17 	ldw	r2,-20(fp)
81134edc:	d0a07615 	stw	r2,-32296(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
81134ee0:	e0bffc17 	ldw	r2,-16(fp)
81134ee4:	10800104 	addi	r2,r2,4
81134ee8:	00c001c4 	movi	r3,7
81134eec:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
81134ef0:	d8000015 	stw	zero,0(sp)
81134ef4:	e1fffc17 	ldw	r7,-16(fp)
81134ef8:	01a044f4 	movhi	r6,33043
81134efc:	31938804 	addi	r6,r6,20000
81134f00:	e17ffe17 	ldw	r5,-8(fp)
81134f04:	e13ffd17 	ldw	r4,-12(fp)
81134f08:	11382d40 	call	811382d4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
81134f0c:	0001883a 	nop
81134f10:	e037883a 	mov	sp,fp
81134f14:	dfc00117 	ldw	ra,4(sp)
81134f18:	df000017 	ldw	fp,0(sp)
81134f1c:	dec00204 	addi	sp,sp,8
81134f20:	f800283a 	ret

81134f24 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
81134f24:	defffa04 	addi	sp,sp,-24
81134f28:	de00012e 	bgeu	sp,et,81134f30 <altera_avalon_uart_read_fd+0xc>
81134f2c:	003b68fa 	trap	3
81134f30:	dfc00515 	stw	ra,20(sp)
81134f34:	df000415 	stw	fp,16(sp)
81134f38:	df000404 	addi	fp,sp,16
81134f3c:	e13ffd15 	stw	r4,-12(fp)
81134f40:	e17ffe15 	stw	r5,-8(fp)
81134f44:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
81134f48:	e0bffd17 	ldw	r2,-12(fp)
81134f4c:	10800017 	ldw	r2,0(r2)
81134f50:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
81134f54:	e0bffc17 	ldw	r2,-16(fp)
81134f58:	10c00a04 	addi	r3,r2,40
81134f5c:	e0bffd17 	ldw	r2,-12(fp)
81134f60:	10800217 	ldw	r2,8(r2)
81134f64:	100f883a 	mov	r7,r2
81134f68:	e1bfff17 	ldw	r6,-4(fp)
81134f6c:	e17ffe17 	ldw	r5,-8(fp)
81134f70:	1809883a 	mov	r4,r3
81134f74:	11355e40 	call	811355e4 <altera_avalon_uart_read>
      fd->fd_flags);
}
81134f78:	e037883a 	mov	sp,fp
81134f7c:	dfc00117 	ldw	ra,4(sp)
81134f80:	df000017 	ldw	fp,0(sp)
81134f84:	dec00204 	addi	sp,sp,8
81134f88:	f800283a 	ret

81134f8c <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
81134f8c:	defffa04 	addi	sp,sp,-24
81134f90:	de00012e 	bgeu	sp,et,81134f98 <altera_avalon_uart_write_fd+0xc>
81134f94:	003b68fa 	trap	3
81134f98:	dfc00515 	stw	ra,20(sp)
81134f9c:	df000415 	stw	fp,16(sp)
81134fa0:	df000404 	addi	fp,sp,16
81134fa4:	e13ffd15 	stw	r4,-12(fp)
81134fa8:	e17ffe15 	stw	r5,-8(fp)
81134fac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
81134fb0:	e0bffd17 	ldw	r2,-12(fp)
81134fb4:	10800017 	ldw	r2,0(r2)
81134fb8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
81134fbc:	e0bffc17 	ldw	r2,-16(fp)
81134fc0:	10c00a04 	addi	r3,r2,40
81134fc4:	e0bffd17 	ldw	r2,-12(fp)
81134fc8:	10800217 	ldw	r2,8(r2)
81134fcc:	100f883a 	mov	r7,r2
81134fd0:	e1bfff17 	ldw	r6,-4(fp)
81134fd4:	e17ffe17 	ldw	r5,-8(fp)
81134fd8:	1809883a 	mov	r4,r3
81134fdc:	11358980 	call	81135898 <altera_avalon_uart_write>
      fd->fd_flags);
}
81134fe0:	e037883a 	mov	sp,fp
81134fe4:	dfc00117 	ldw	ra,4(sp)
81134fe8:	df000017 	ldw	fp,0(sp)
81134fec:	dec00204 	addi	sp,sp,8
81134ff0:	f800283a 	ret

81134ff4 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
81134ff4:	defffc04 	addi	sp,sp,-16
81134ff8:	de00012e 	bgeu	sp,et,81135000 <altera_avalon_uart_close_fd+0xc>
81134ffc:	003b68fa 	trap	3
81135000:	dfc00315 	stw	ra,12(sp)
81135004:	df000215 	stw	fp,8(sp)
81135008:	df000204 	addi	fp,sp,8
8113500c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
81135010:	e0bfff17 	ldw	r2,-4(fp)
81135014:	10800017 	ldw	r2,0(r2)
81135018:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
8113501c:	e0bffe17 	ldw	r2,-8(fp)
81135020:	10c00a04 	addi	r3,r2,40
81135024:	e0bfff17 	ldw	r2,-4(fp)
81135028:	10800217 	ldw	r2,8(r2)
8113502c:	100b883a 	mov	r5,r2
81135030:	1809883a 	mov	r4,r3
81135034:	11355440 	call	81135544 <altera_avalon_uart_close>
}
81135038:	e037883a 	mov	sp,fp
8113503c:	dfc00117 	ldw	ra,4(sp)
81135040:	df000017 	ldw	fp,0(sp)
81135044:	dec00204 	addi	sp,sp,8
81135048:	f800283a 	ret

8113504c <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
8113504c:	defff304 	addi	sp,sp,-52
81135050:	de00012e 	bgeu	sp,et,81135058 <altera_avalon_uart_init+0xc>
81135054:	003b68fa 	trap	3
81135058:	dfc00c15 	stw	ra,48(sp)
8113505c:	df000b15 	stw	fp,44(sp)
81135060:	df000b04 	addi	fp,sp,44
81135064:	e13ffd15 	stw	r4,-12(fp)
81135068:	e17ffe15 	stw	r5,-8(fp)
8113506c:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
81135070:	e0bffd17 	ldw	r2,-12(fp)
81135074:	10800017 	ldw	r2,0(r2)
81135078:	e0bff615 	stw	r2,-40(fp)
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
8113507c:	e0bffd17 	ldw	r2,-12(fp)
81135080:	10800704 	addi	r2,r2,28
81135084:	e0bffa15 	stw	r2,-24(fp)
81135088:	e03ffb0d 	sth	zero,-20(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
8113508c:	e0bffb0b 	ldhu	r2,-20(fp)
81135090:	e0fffc84 	addi	r3,fp,-14
81135094:	180b883a 	mov	r5,r3
81135098:	1009883a 	mov	r4,r2
8113509c:	11275bc0 	call	811275bc <OSFlagCreate>
811350a0:	1007883a 	mov	r3,r2
811350a4:	e0bffa17 	ldw	r2,-24(fp)
811350a8:	10c00015 	stw	r3,0(r2)
  return err;
811350ac:	e0bffc83 	ldbu	r2,-14(fp)
811350b0:	10803fcc 	andi	r2,r2,255
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
811350b4:	1000241e 	bne	r2,zero,81135148 <altera_avalon_uart_init+0xfc>
811350b8:	e0bffd17 	ldw	r2,-12(fp)
811350bc:	10800804 	addi	r2,r2,32
811350c0:	e0bff715 	stw	r2,-36(fp)
811350c4:	00800044 	movi	r2,1
811350c8:	e0bffb8d 	sth	r2,-18(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
811350cc:	e0bffb8b 	ldhu	r2,-18(fp)
811350d0:	1009883a 	mov	r4,r2
811350d4:	112b5180 	call	8112b518 <OSSemCreate>
811350d8:	1007883a 	mov	r3,r2
811350dc:	e0bff717 	ldw	r2,-36(fp)
811350e0:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
811350e4:	e0bff717 	ldw	r2,-36(fp)
811350e8:	10800017 	ldw	r2,0(r2)
811350ec:	10000226 	beq	r2,zero,811350f8 <altera_avalon_uart_init+0xac>
811350f0:	0005883a 	mov	r2,zero
811350f4:	00000106 	br	811350fc <altera_avalon_uart_init+0xb0>
811350f8:	00bfffc4 	movi	r2,-1
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
811350fc:	1000121e 	bne	r2,zero,81135148 <altera_avalon_uart_init+0xfc>
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);
81135100:	e0bffd17 	ldw	r2,-12(fp)
81135104:	10800904 	addi	r2,r2,36
81135108:	e0bff815 	stw	r2,-32(fp)
8113510c:	00800044 	movi	r2,1
81135110:	e0bffc0d 	sth	r2,-16(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
81135114:	e0bffc0b 	ldhu	r2,-16(fp)
81135118:	1009883a 	mov	r4,r2
8113511c:	112b5180 	call	8112b518 <OSSemCreate>
81135120:	1007883a 	mov	r3,r2
81135124:	e0bff817 	ldw	r2,-32(fp)
81135128:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
8113512c:	e0bff817 	ldw	r2,-32(fp)
81135130:	10800017 	ldw	r2,0(r2)
81135134:	10000226 	beq	r2,zero,81135140 <altera_avalon_uart_init+0xf4>
81135138:	0005883a 	mov	r2,zero
8113513c:	00000106 	br	81135144 <altera_avalon_uart_init+0xf8>
81135140:	00bfffc4 	movi	r2,-1
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
81135144:	10000226 	beq	r2,zero,81135150 <altera_avalon_uart_init+0x104>
81135148:	00800044 	movi	r2,1
8113514c:	00000106 	br	81135154 <altera_avalon_uart_init+0x108>
81135150:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
81135154:	e0bff915 	stw	r2,-28(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
81135158:	e0bff917 	ldw	r2,-28(fp)
8113515c:	10000f1e 	bne	r2,zero,8113519c <altera_avalon_uart_init+0x150>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
81135160:	e0bffd17 	ldw	r2,-12(fp)
81135164:	00c32004 	movi	r3,3200
81135168:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
8113516c:	e0bff617 	ldw	r2,-40(fp)
81135170:	10800304 	addi	r2,r2,12
81135174:	e0fffd17 	ldw	r3,-12(fp)
81135178:	18c00117 	ldw	r3,4(r3)
8113517c:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
81135180:	d8000015 	stw	zero,0(sp)
81135184:	e1fffd17 	ldw	r7,-12(fp)
81135188:	01a044f4 	movhi	r6,33043
8113518c:	31946d04 	addi	r6,r6,20916
81135190:	e17fff17 	ldw	r5,-4(fp)
81135194:	e13ffe17 	ldw	r4,-8(fp)
81135198:	11382d40 	call	811382d4 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
8113519c:	0001883a 	nop
811351a0:	e037883a 	mov	sp,fp
811351a4:	dfc00117 	ldw	ra,4(sp)
811351a8:	df000017 	ldw	fp,0(sp)
811351ac:	dec00204 	addi	sp,sp,8
811351b0:	f800283a 	ret

811351b4 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
811351b4:	defffa04 	addi	sp,sp,-24
811351b8:	de00012e 	bgeu	sp,et,811351c0 <altera_avalon_uart_irq+0xc>
811351bc:	003b68fa 	trap	3
811351c0:	dfc00515 	stw	ra,20(sp)
811351c4:	df000415 	stw	fp,16(sp)
811351c8:	df000404 	addi	fp,sp,16
811351cc:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
811351d0:	e0bfff17 	ldw	r2,-4(fp)
811351d4:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
811351d8:	e0bffc17 	ldw	r2,-16(fp)
811351dc:	10800017 	ldw	r2,0(r2)
811351e0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
811351e4:	e0bffd17 	ldw	r2,-12(fp)
811351e8:	10800204 	addi	r2,r2,8
811351ec:	10800037 	ldwio	r2,0(r2)
811351f0:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
811351f4:	e0bffd17 	ldw	r2,-12(fp)
811351f8:	10800204 	addi	r2,r2,8
811351fc:	0007883a 	mov	r3,zero
81135200:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
81135204:	e0bffd17 	ldw	r2,-12(fp)
81135208:	10800204 	addi	r2,r2,8
8113520c:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
81135210:	e0bffe17 	ldw	r2,-8(fp)
81135214:	1080200c 	andi	r2,r2,128
81135218:	10000326 	beq	r2,zero,81135228 <altera_avalon_uart_irq+0x74>
  {
    altera_avalon_uart_rxirq(sp, status);
8113521c:	e17ffe17 	ldw	r5,-8(fp)
81135220:	e13ffc17 	ldw	r4,-16(fp)
81135224:	11352580 	call	81135258 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
81135228:	e0bffe17 	ldw	r2,-8(fp)
8113522c:	1081100c 	andi	r2,r2,1088
81135230:	10000326 	beq	r2,zero,81135240 <altera_avalon_uart_irq+0x8c>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
81135234:	e17ffe17 	ldw	r5,-8(fp)
81135238:	e13ffc17 	ldw	r4,-16(fp)
8113523c:	11353980 	call	81135398 <altera_avalon_uart_txirq>
  }
  

}
81135240:	0001883a 	nop
81135244:	e037883a 	mov	sp,fp
81135248:	dfc00117 	ldw	ra,4(sp)
8113524c:	df000017 	ldw	fp,0(sp)
81135250:	dec00204 	addi	sp,sp,8
81135254:	f800283a 	ret

81135258 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
81135258:	defff904 	addi	sp,sp,-28
8113525c:	de00012e 	bgeu	sp,et,81135264 <altera_avalon_uart_rxirq+0xc>
81135260:	003b68fa 	trap	3
81135264:	dfc00615 	stw	ra,24(sp)
81135268:	df000515 	stw	fp,20(sp)
8113526c:	df000504 	addi	fp,sp,20
81135270:	e13ffe15 	stw	r4,-8(fp)
81135274:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
81135278:	e0bfff17 	ldw	r2,-4(fp)
8113527c:	108000cc 	andi	r2,r2,3
81135280:	10003f1e 	bne	r2,zero,81135380 <altera_avalon_uart_rxirq+0x128>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
81135284:	e0bffe17 	ldw	r2,-8(fp)
81135288:	10c00317 	ldw	r3,12(r2)
8113528c:	e0bffe17 	ldw	r2,-8(fp)
81135290:	10800217 	ldw	r2,8(r2)
81135294:	1880121e 	bne	r3,r2,811352e0 <altera_avalon_uart_rxirq+0x88>
  {
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
81135298:	e0bffe17 	ldw	r2,-8(fp)
8113529c:	10800717 	ldw	r2,28(r2)
811352a0:	e0bffc15 	stw	r2,-16(fp)
811352a4:	00800044 	movi	r2,1
811352a8:	e0bffd0d 	sth	r2,-12(fp)
811352ac:	00800044 	movi	r2,1
811352b0:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
811352b4:	d0a07f03 	ldbu	r2,-32260(gp)
811352b8:	10803fcc 	andi	r2,r2,255
811352bc:	10000826 	beq	r2,zero,811352e0 <altera_avalon_uart_rxirq+0x88>
  {
    OSFlagPost (group, flags, opt, &err);
811352c0:	e0bffd0b 	ldhu	r2,-12(fp)
811352c4:	e0fffd83 	ldbu	r3,-10(fp)
811352c8:	e13ffdc4 	addi	r4,fp,-9
811352cc:	200f883a 	mov	r7,r4
811352d0:	180d883a 	mov	r6,r3
811352d4:	100b883a 	mov	r5,r2
811352d8:	e13ffc17 	ldw	r4,-16(fp)
811352dc:	11281c80 	call	811281c8 <OSFlagPost>
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
811352e0:	e0bffe17 	ldw	r2,-8(fp)
811352e4:	10800317 	ldw	r2,12(r2)
811352e8:	10800044 	addi	r2,r2,1
811352ec:	10800fcc 	andi	r2,r2,63
811352f0:	e0bffb15 	stw	r2,-20(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
811352f4:	e0bffe17 	ldw	r2,-8(fp)
811352f8:	10800317 	ldw	r2,12(r2)
811352fc:	e0fffe17 	ldw	r3,-8(fp)
81135300:	18c00017 	ldw	r3,0(r3)
81135304:	18c00037 	ldwio	r3,0(r3)
81135308:	1809883a 	mov	r4,r3
8113530c:	e0fffe17 	ldw	r3,-8(fp)
81135310:	1885883a 	add	r2,r3,r2
81135314:	10800a04 	addi	r2,r2,40
81135318:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
8113531c:	e0bffe17 	ldw	r2,-8(fp)
81135320:	e0fffb17 	ldw	r3,-20(fp)
81135324:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
81135328:	e0bffe17 	ldw	r2,-8(fp)
8113532c:	10800317 	ldw	r2,12(r2)
81135330:	10800044 	addi	r2,r2,1
81135334:	10800fcc 	andi	r2,r2,63
81135338:	e0bffb15 	stw	r2,-20(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
8113533c:	e0bffe17 	ldw	r2,-8(fp)
81135340:	10c00217 	ldw	r3,8(r2)
81135344:	e0bffb17 	ldw	r2,-20(fp)
81135348:	18800e1e 	bne	r3,r2,81135384 <altera_avalon_uart_rxirq+0x12c>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
8113534c:	e0bffe17 	ldw	r2,-8(fp)
81135350:	10c00117 	ldw	r3,4(r2)
81135354:	00bfdfc4 	movi	r2,-129
81135358:	1886703a 	and	r3,r3,r2
8113535c:	e0bffe17 	ldw	r2,-8(fp)
81135360:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
81135364:	e0bffe17 	ldw	r2,-8(fp)
81135368:	10800017 	ldw	r2,0(r2)
8113536c:	10800304 	addi	r2,r2,12
81135370:	e0fffe17 	ldw	r3,-8(fp)
81135374:	18c00117 	ldw	r3,4(r3)
81135378:	10c00035 	stwio	r3,0(r2)
8113537c:	00000106 	br	81135384 <altera_avalon_uart_rxirq+0x12c>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
81135380:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
81135384:	e037883a 	mov	sp,fp
81135388:	dfc00117 	ldw	ra,4(sp)
8113538c:	df000017 	ldw	fp,0(sp)
81135390:	dec00204 	addi	sp,sp,8
81135394:	f800283a 	ret

81135398 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
81135398:	defffa04 	addi	sp,sp,-24
8113539c:	de00012e 	bgeu	sp,et,811353a4 <altera_avalon_uart_txirq+0xc>
811353a0:	003b68fa 	trap	3
811353a4:	dfc00515 	stw	ra,20(sp)
811353a8:	df000415 	stw	fp,16(sp)
811353ac:	df000404 	addi	fp,sp,16
811353b0:	e13ffe15 	stw	r4,-8(fp)
811353b4:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
811353b8:	e0bffe17 	ldw	r2,-8(fp)
811353bc:	10c00417 	ldw	r3,16(r2)
811353c0:	e0bffe17 	ldw	r2,-8(fp)
811353c4:	10800517 	ldw	r2,20(r2)
811353c8:	18804726 	beq	r3,r2,811354e8 <altera_avalon_uart_txirq+0x150>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
811353cc:	e0bffe17 	ldw	r2,-8(fp)
811353d0:	10800617 	ldw	r2,24(r2)
811353d4:	1080008c 	andi	r2,r2,2
811353d8:	10000326 	beq	r2,zero,811353e8 <altera_avalon_uart_txirq+0x50>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
811353dc:	e0bfff17 	ldw	r2,-4(fp)
811353e0:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
811353e4:	10003226 	beq	r2,zero,811354b0 <altera_avalon_uart_txirq+0x118>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
811353e8:	e0bffe17 	ldw	r2,-8(fp)
811353ec:	10c00417 	ldw	r3,16(r2)
811353f0:	e0bffe17 	ldw	r2,-8(fp)
811353f4:	10800517 	ldw	r2,20(r2)
811353f8:	10800044 	addi	r2,r2,1
811353fc:	10800fcc 	andi	r2,r2,63
81135400:	1880121e 	bne	r3,r2,8113544c <altera_avalon_uart_txirq+0xb4>
      { 
        ALT_FLAG_POST (sp->events, 
81135404:	e0bffe17 	ldw	r2,-8(fp)
81135408:	10800717 	ldw	r2,28(r2)
8113540c:	e0bffc15 	stw	r2,-16(fp)
81135410:	00800084 	movi	r2,2
81135414:	e0bffd0d 	sth	r2,-12(fp)
81135418:	00800044 	movi	r2,1
8113541c:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
81135420:	d0a07f03 	ldbu	r2,-32260(gp)
81135424:	10803fcc 	andi	r2,r2,255
81135428:	10000826 	beq	r2,zero,8113544c <altera_avalon_uart_txirq+0xb4>
  {
    OSFlagPost (group, flags, opt, &err);
8113542c:	e0bffd0b 	ldhu	r2,-12(fp)
81135430:	e0fffd83 	ldbu	r3,-10(fp)
81135434:	e13ffdc4 	addi	r4,fp,-9
81135438:	200f883a 	mov	r7,r4
8113543c:	180d883a 	mov	r6,r3
81135440:	100b883a 	mov	r5,r2
81135444:	e13ffc17 	ldw	r4,-16(fp)
81135448:	11281c80 	call	811281c8 <OSFlagPost>
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
8113544c:	e0bffe17 	ldw	r2,-8(fp)
81135450:	10800017 	ldw	r2,0(r2)
81135454:	10800104 	addi	r2,r2,4
81135458:	e0fffe17 	ldw	r3,-8(fp)
8113545c:	18c00417 	ldw	r3,16(r3)
81135460:	e13ffe17 	ldw	r4,-8(fp)
81135464:	20c7883a 	add	r3,r4,r3
81135468:	18c01a04 	addi	r3,r3,104
8113546c:	18c00003 	ldbu	r3,0(r3)
81135470:	18c03fcc 	andi	r3,r3,255
81135474:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
81135478:	e0bffe17 	ldw	r2,-8(fp)
8113547c:	10800417 	ldw	r2,16(r2)
81135480:	10800044 	addi	r2,r2,1
81135484:	e0fffe17 	ldw	r3,-8(fp)
81135488:	18800415 	stw	r2,16(r3)
8113548c:	10c00fcc 	andi	r3,r2,63
81135490:	e0bffe17 	ldw	r2,-8(fp)
81135494:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
81135498:	e0bffe17 	ldw	r2,-8(fp)
8113549c:	10800117 	ldw	r2,4(r2)
811354a0:	10c01014 	ori	r3,r2,64
811354a4:	e0bffe17 	ldw	r2,-8(fp)
811354a8:	10c00115 	stw	r3,4(r2)
811354ac:	00000e06 	br	811354e8 <altera_avalon_uart_txirq+0x150>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
811354b0:	e0bffe17 	ldw	r2,-8(fp)
811354b4:	10800017 	ldw	r2,0(r2)
811354b8:	10800204 	addi	r2,r2,8
811354bc:	10800037 	ldwio	r2,0(r2)
811354c0:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
811354c4:	e0bfff17 	ldw	r2,-4(fp)
811354c8:	1082000c 	andi	r2,r2,2048
811354cc:	1000061e 	bne	r2,zero,811354e8 <altera_avalon_uart_txirq+0x150>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
811354d0:	e0bffe17 	ldw	r2,-8(fp)
811354d4:	10c00117 	ldw	r3,4(r2)
811354d8:	00bfefc4 	movi	r2,-65
811354dc:	1886703a 	and	r3,r3,r2
811354e0:	e0bffe17 	ldw	r2,-8(fp)
811354e4:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
811354e8:	e0bffe17 	ldw	r2,-8(fp)
811354ec:	10c00417 	ldw	r3,16(r2)
811354f0:	e0bffe17 	ldw	r2,-8(fp)
811354f4:	10800517 	ldw	r2,20(r2)
811354f8:	1880061e 	bne	r3,r2,81135514 <altera_avalon_uart_txirq+0x17c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
811354fc:	e0bffe17 	ldw	r2,-8(fp)
81135500:	10c00117 	ldw	r3,4(r2)
81135504:	00beefc4 	movi	r2,-1089
81135508:	1886703a 	and	r3,r3,r2
8113550c:	e0bffe17 	ldw	r2,-8(fp)
81135510:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
81135514:	e0bffe17 	ldw	r2,-8(fp)
81135518:	10800017 	ldw	r2,0(r2)
8113551c:	10800304 	addi	r2,r2,12
81135520:	e0fffe17 	ldw	r3,-8(fp)
81135524:	18c00117 	ldw	r3,4(r3)
81135528:	10c00035 	stwio	r3,0(r2)
}
8113552c:	0001883a 	nop
81135530:	e037883a 	mov	sp,fp
81135534:	dfc00117 	ldw	ra,4(sp)
81135538:	df000017 	ldw	fp,0(sp)
8113553c:	dec00204 	addi	sp,sp,8
81135540:	f800283a 	ret

81135544 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
81135544:	defffd04 	addi	sp,sp,-12
81135548:	de00012e 	bgeu	sp,et,81135550 <altera_avalon_uart_close+0xc>
8113554c:	003b68fa 	trap	3
81135550:	df000215 	stw	fp,8(sp)
81135554:	df000204 	addi	fp,sp,8
81135558:	e13ffe15 	stw	r4,-8(fp)
8113555c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
81135560:	00000506 	br	81135578 <altera_avalon_uart_close+0x34>
    if (flags & O_NONBLOCK) {
81135564:	e0bfff17 	ldw	r2,-4(fp)
81135568:	1090000c 	andi	r2,r2,16384
8113556c:	10000226 	beq	r2,zero,81135578 <altera_avalon_uart_close+0x34>
      return -EWOULDBLOCK; 
81135570:	00bffd44 	movi	r2,-11
81135574:	00000606 	br	81135590 <altera_avalon_uart_close+0x4c>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
81135578:	e0bffe17 	ldw	r2,-8(fp)
8113557c:	10c00417 	ldw	r3,16(r2)
81135580:	e0bffe17 	ldw	r2,-8(fp)
81135584:	10800517 	ldw	r2,20(r2)
81135588:	18bff61e 	bne	r3,r2,81135564 <__reset+0xfb115564>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
8113558c:	0005883a 	mov	r2,zero
}
81135590:	e037883a 	mov	sp,fp
81135594:	df000017 	ldw	fp,0(sp)
81135598:	dec00104 	addi	sp,sp,4
8113559c:	f800283a 	ret

811355a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
811355a0:	defffe04 	addi	sp,sp,-8
811355a4:	de00012e 	bgeu	sp,et,811355ac <alt_get_errno+0xc>
811355a8:	003b68fa 	trap	3
811355ac:	dfc00115 	stw	ra,4(sp)
811355b0:	df000015 	stw	fp,0(sp)
811355b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
811355b8:	d0a01617 	ldw	r2,-32680(gp)
811355bc:	10000326 	beq	r2,zero,811355cc <alt_get_errno+0x2c>
811355c0:	d0a01617 	ldw	r2,-32680(gp)
811355c4:	103ee83a 	callr	r2
811355c8:	00000106 	br	811355d0 <alt_get_errno+0x30>
811355cc:	d0a06b04 	addi	r2,gp,-32340
}
811355d0:	e037883a 	mov	sp,fp
811355d4:	dfc00117 	ldw	ra,4(sp)
811355d8:	df000017 	ldw	fp,0(sp)
811355dc:	dec00204 	addi	sp,sp,8
811355e0:	f800283a 	ret

811355e4 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
811355e4:	deffec04 	addi	sp,sp,-80
811355e8:	de00012e 	bgeu	sp,et,811355f0 <altera_avalon_uart_read+0xc>
811355ec:	003b68fa 	trap	3
811355f0:	dfc01315 	stw	ra,76(sp)
811355f4:	df001215 	stw	fp,72(sp)
811355f8:	df001204 	addi	fp,sp,72
811355fc:	e13ffc15 	stw	r4,-16(fp)
81135600:	e17ffd15 	stw	r5,-12(fp)
81135604:	e1bffe15 	stw	r6,-8(fp)
81135608:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
8113560c:	e03fef05 	stb	zero,-68(fp)
  int             count = 0;
81135610:	e03ff015 	stw	zero,-64(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
81135614:	e0bfff17 	ldw	r2,-4(fp)
81135618:	1090000c 	andi	r2,r2,16384
8113561c:	1005003a 	cmpeq	r2,r2,zero
81135620:	10803fcc 	andi	r2,r2,255
81135624:	e0bff115 	stw	r2,-60(fp)
  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (sp->read_lock, 0);
81135628:	e0bffc17 	ldw	r2,-16(fp)
8113562c:	10800817 	ldw	r2,32(r2)
81135630:	e0bff815 	stw	r2,-32(fp)
81135634:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
81135638:	e0bff90b 	ldhu	r2,-28(fp)
8113563c:	e0fffb44 	addi	r3,fp,-19
81135640:	180d883a 	mov	r6,r3
81135644:	100b883a 	mov	r5,r2
81135648:	e13ff817 	ldw	r4,-32(fp)
8113564c:	112b8400 	call	8112b840 <OSSemPend>
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
81135650:	00001306 	br	811356a0 <altera_avalon_uart_read+0xbc>
    {
      count++;
81135654:	e0bff017 	ldw	r2,-64(fp)
81135658:	10800044 	addi	r2,r2,1
8113565c:	e0bff015 	stw	r2,-64(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
81135660:	e0bffd17 	ldw	r2,-12(fp)
81135664:	10c00044 	addi	r3,r2,1
81135668:	e0fffd15 	stw	r3,-12(fp)
8113566c:	e0fffc17 	ldw	r3,-16(fp)
81135670:	18c00217 	ldw	r3,8(r3)
81135674:	e13ffc17 	ldw	r4,-16(fp)
81135678:	20c7883a 	add	r3,r4,r3
8113567c:	18c00a04 	addi	r3,r3,40
81135680:	18c00003 	ldbu	r3,0(r3)
81135684:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
81135688:	e0bffc17 	ldw	r2,-16(fp)
8113568c:	10800217 	ldw	r2,8(r2)
81135690:	10800044 	addi	r2,r2,1
81135694:	10c00fcc 	andi	r3,r2,63
81135698:	e0bffc17 	ldw	r2,-16(fp)
8113569c:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
811356a0:	e0fff017 	ldw	r3,-64(fp)
811356a4:	e0bffe17 	ldw	r2,-8(fp)
811356a8:	1880050e 	bge	r3,r2,811356c0 <altera_avalon_uart_read+0xdc>
811356ac:	e0bffc17 	ldw	r2,-16(fp)
811356b0:	10c00217 	ldw	r3,8(r2)
811356b4:	e0bffc17 	ldw	r2,-16(fp)
811356b8:	10800317 	ldw	r2,12(r2)
811356bc:	18bfe51e 	bne	r3,r2,81135654 <__reset+0xfb115654>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
811356c0:	e0bff017 	ldw	r2,-64(fp)
811356c4:	10003a1e 	bne	r2,zero,811357b0 <altera_avalon_uart_read+0x1cc>
811356c8:	e0bffc17 	ldw	r2,-16(fp)
811356cc:	10c00217 	ldw	r3,8(r2)
811356d0:	e0bffc17 	ldw	r2,-16(fp)
811356d4:	10800317 	ldw	r2,12(r2)
811356d8:	1880351e 	bne	r3,r2,811357b0 <altera_avalon_uart_read+0x1cc>
    {
      if (!block)
811356dc:	e0bff117 	ldw	r2,-60(fp)
811356e0:	1000071e 	bne	r2,zero,81135700 <altera_avalon_uart_read+0x11c>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
811356e4:	11355a00 	call	811355a0 <alt_get_errno>
811356e8:	1007883a 	mov	r3,r2
811356ec:	008002c4 	movi	r2,11
811356f0:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
811356f4:	00800044 	movi	r2,1
811356f8:	e0bfef05 	stb	r2,-68(fp)
        break;
811356fc:	00003006 	br	811357c0 <altera_avalon_uart_read+0x1dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81135700:	0005303a 	rdctl	r2,status
81135704:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81135708:	e0fff517 	ldw	r3,-44(fp)
8113570c:	00bfff84 	movi	r2,-2
81135710:	1884703a 	and	r2,r3,r2
81135714:	1001703a 	wrctl	status,r2
  
  return context;
81135718:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
8113571c:	e0bff415 	stw	r2,-48(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
81135720:	e0bffc17 	ldw	r2,-16(fp)
81135724:	10800117 	ldw	r2,4(r2)
81135728:	10c02014 	ori	r3,r2,128
8113572c:	e0bffc17 	ldw	r2,-16(fp)
81135730:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
81135734:	e0bffc17 	ldw	r2,-16(fp)
81135738:	10800017 	ldw	r2,0(r2)
8113573c:	10800304 	addi	r2,r2,12
81135740:	e0fffc17 	ldw	r3,-16(fp)
81135744:	18c00117 	ldw	r3,4(r3)
81135748:	10c00035 	stwio	r3,0(r2)
8113574c:	e0bff417 	ldw	r2,-48(fp)
81135750:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81135754:	e0bff617 	ldw	r2,-40(fp)
81135758:	1001703a 	wrctl	status,r2
        * flag set in the interrupt service routine. This avoids wasting CPU
        * cycles waiting in this thread, when we could be doing something more 
        * profitable elsewhere.
        */

       ALT_FLAG_PEND (sp->events, 
8113575c:	e0bffc17 	ldw	r2,-16(fp)
81135760:	10800717 	ldw	r2,28(r2)
81135764:	e0bff215 	stw	r2,-56(fp)
81135768:	00800044 	movi	r2,1
8113576c:	e0bff98d 	sth	r2,-26(fp)
81135770:	00bfe0c4 	movi	r2,-125
81135774:	e0bffa05 	stb	r2,-24(fp)
81135778:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
8113577c:	d0a07f03 	ldbu	r2,-32260(gp)
81135780:	10803fcc 	andi	r2,r2,255
81135784:	10000a26 	beq	r2,zero,811357b0 <altera_avalon_uart_read+0x1cc>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
81135788:	e0fff98b 	ldhu	r3,-26(fp)
8113578c:	e13ffa03 	ldbu	r4,-24(fp)
81135790:	e17ffa8b 	ldhu	r5,-22(fp)
81135794:	e0bffb04 	addi	r2,fp,-20
81135798:	d8800015 	stw	r2,0(sp)
8113579c:	280f883a 	mov	r7,r5
811357a0:	200d883a 	mov	r6,r4
811357a4:	180b883a 	mov	r5,r3
811357a8:	e13ff217 	ldw	r4,-56(fp)
811357ac:	1127ba00 	call	81127ba0 <OSFlagPend>
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
811357b0:	e0bff017 	ldw	r2,-64(fp)
811357b4:	1000021e 	bne	r2,zero,811357c0 <altera_avalon_uart_read+0x1dc>
811357b8:	e0bffe17 	ldw	r2,-8(fp)
811357bc:	103fb81e 	bne	r2,zero,811356a0 <__reset+0xfb1156a0>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
811357c0:	e0bffc17 	ldw	r2,-16(fp)
811357c4:	10800817 	ldw	r2,32(r2)
811357c8:	1009883a 	mov	r4,r2
811357cc:	112bbc80 	call	8112bbc8 <OSSemPost>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811357d0:	0005303a 	rdctl	r2,status
811357d4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811357d8:	e0fff717 	ldw	r3,-36(fp)
811357dc:	00bfff84 	movi	r2,-2
811357e0:	1884703a 	and	r2,r3,r2
811357e4:	1001703a 	wrctl	status,r2
  
  return context;
811357e8:	e0bff717 	ldw	r2,-36(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
811357ec:	e0bff415 	stw	r2,-48(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
811357f0:	e0bffc17 	ldw	r2,-16(fp)
811357f4:	10800117 	ldw	r2,4(r2)
811357f8:	10c02014 	ori	r3,r2,128
811357fc:	e0bffc17 	ldw	r2,-16(fp)
81135800:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
81135804:	e0bffc17 	ldw	r2,-16(fp)
81135808:	10800017 	ldw	r2,0(r2)
8113580c:	10800304 	addi	r2,r2,12
81135810:	e0fffc17 	ldw	r3,-16(fp)
81135814:	18c00117 	ldw	r3,4(r3)
81135818:	10c00035 	stwio	r3,0(r2)
8113581c:	e0bff417 	ldw	r2,-48(fp)
81135820:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81135824:	e0bff317 	ldw	r2,-52(fp)
81135828:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
8113582c:	e0bfef03 	ldbu	r2,-68(fp)
81135830:	10000226 	beq	r2,zero,8113583c <altera_avalon_uart_read+0x258>
    return -EWOULDBLOCK;
81135834:	00bffd44 	movi	r2,-11
81135838:	00000106 	br	81135840 <altera_avalon_uart_read+0x25c>
  }
  else {
    return count;
8113583c:	e0bff017 	ldw	r2,-64(fp)
  }
}
81135840:	e037883a 	mov	sp,fp
81135844:	dfc00117 	ldw	ra,4(sp)
81135848:	df000017 	ldw	fp,0(sp)
8113584c:	dec00204 	addi	sp,sp,8
81135850:	f800283a 	ret

81135854 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81135854:	defffe04 	addi	sp,sp,-8
81135858:	de00012e 	bgeu	sp,et,81135860 <alt_get_errno+0xc>
8113585c:	003b68fa 	trap	3
81135860:	dfc00115 	stw	ra,4(sp)
81135864:	df000015 	stw	fp,0(sp)
81135868:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8113586c:	d0a01617 	ldw	r2,-32680(gp)
81135870:	10000326 	beq	r2,zero,81135880 <alt_get_errno+0x2c>
81135874:	d0a01617 	ldw	r2,-32680(gp)
81135878:	103ee83a 	callr	r2
8113587c:	00000106 	br	81135884 <alt_get_errno+0x30>
81135880:	d0a06b04 	addi	r2,gp,-32340
}
81135884:	e037883a 	mov	sp,fp
81135888:	dfc00117 	ldw	ra,4(sp)
8113588c:	df000017 	ldw	fp,0(sp)
81135890:	dec00204 	addi	sp,sp,8
81135894:	f800283a 	ret

81135898 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
81135898:	deffec04 	addi	sp,sp,-80
8113589c:	de00012e 	bgeu	sp,et,811358a4 <altera_avalon_uart_write+0xc>
811358a0:	003b68fa 	trap	3
811358a4:	dfc01315 	stw	ra,76(sp)
811358a8:	df001215 	stw	fp,72(sp)
811358ac:	df001204 	addi	fp,sp,72
811358b0:	e13ffc15 	stw	r4,-16(fp)
811358b4:	e17ffd15 	stw	r5,-12(fp)
811358b8:	e1bffe15 	stw	r6,-8(fp)
811358bc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
811358c0:	e0bffe17 	ldw	r2,-8(fp)
811358c4:	e0bfef15 	stw	r2,-68(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
811358c8:	e0bfff17 	ldw	r2,-4(fp)
811358cc:	1090000c 	andi	r2,r2,16384
811358d0:	e0bff015 	stw	r2,-64(fp)
  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */

  ALT_SEM_PEND (sp->write_lock, 0);
811358d4:	e0bffc17 	ldw	r2,-16(fp)
811358d8:	10800917 	ldw	r2,36(r2)
811358dc:	e0bff815 	stw	r2,-32(fp)
811358e0:	e03ff90d 	sth	zero,-28(fp)
811358e4:	e0bff90b 	ldhu	r2,-28(fp)
811358e8:	e0fffb44 	addi	r3,fp,-19
811358ec:	180d883a 	mov	r6,r3
811358f0:	100b883a 	mov	r5,r2
811358f4:	e13ff817 	ldw	r4,-32(fp)
811358f8:	112b8400 	call	8112b840 <OSSemPend>
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
811358fc:	00005106 	br	81135a44 <altera_avalon_uart_write+0x1ac>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
81135900:	e0bffc17 	ldw	r2,-16(fp)
81135904:	10800517 	ldw	r2,20(r2)
81135908:	10800044 	addi	r2,r2,1
8113590c:	10800fcc 	andi	r2,r2,63
81135910:	e0bff215 	stw	r2,-56(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
81135914:	e0bffc17 	ldw	r2,-16(fp)
81135918:	10c00417 	ldw	r3,16(r2)
8113591c:	e0bff217 	ldw	r2,-56(fp)
81135920:	1880371e 	bne	r3,r2,81135a00 <altera_avalon_uart_write+0x168>
    {
      if (no_block)
81135924:	e0bff017 	ldw	r2,-64(fp)
81135928:	10000526 	beq	r2,zero,81135940 <altera_avalon_uart_write+0xa8>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
8113592c:	11358540 	call	81135854 <alt_get_errno>
81135930:	1007883a 	mov	r3,r2
81135934:	008002c4 	movi	r2,11
81135938:	18800015 	stw	r2,0(r3)
        break;
8113593c:	00004306 	br	81135a4c <altera_avalon_uart_write+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81135940:	0005303a 	rdctl	r2,status
81135944:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81135948:	e0fff517 	ldw	r3,-44(fp)
8113594c:	00bfff84 	movi	r2,-2
81135950:	1884703a 	and	r2,r3,r2
81135954:	1001703a 	wrctl	status,r2
  
  return context;
81135958:	e0bff517 	ldw	r2,-44(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
8113595c:	e0bff415 	stw	r2,-48(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
81135960:	e0bffc17 	ldw	r2,-16(fp)
81135964:	10800117 	ldw	r2,4(r2)
81135968:	10c11014 	ori	r3,r2,1088
8113596c:	e0bffc17 	ldw	r2,-16(fp)
81135970:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
81135974:	e0bffc17 	ldw	r2,-16(fp)
81135978:	10800017 	ldw	r2,0(r2)
8113597c:	10800304 	addi	r2,r2,12
81135980:	e0fffc17 	ldw	r3,-16(fp)
81135984:	18c00117 	ldw	r3,4(r3)
81135988:	10c00035 	stwio	r3,0(r2)
8113598c:	e0bff417 	ldw	r2,-48(fp)
81135990:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81135994:	e0bff117 	ldw	r2,-60(fp)
81135998:	1001703a 	wrctl	status,r2
           * flag set in the interrupt service routine. This avoids wasting CPU
           * cycles waiting in this thread, when we could be doing something
           * more profitable elsewhere.
           */

          ALT_FLAG_PEND (sp->events, 
8113599c:	e0bffc17 	ldw	r2,-16(fp)
811359a0:	10800717 	ldw	r2,28(r2)
811359a4:	e0bff315 	stw	r2,-52(fp)
811359a8:	00800084 	movi	r2,2
811359ac:	e0bff98d 	sth	r2,-26(fp)
811359b0:	00bfe0c4 	movi	r2,-125
811359b4:	e0bffa05 	stb	r2,-24(fp)
811359b8:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
811359bc:	d0a07f03 	ldbu	r2,-32260(gp)
811359c0:	10803fcc 	andi	r2,r2,255
811359c4:	10000a26 	beq	r2,zero,811359f0 <altera_avalon_uart_write+0x158>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
811359c8:	e0fff98b 	ldhu	r3,-26(fp)
811359cc:	e13ffa03 	ldbu	r4,-24(fp)
811359d0:	e17ffa8b 	ldhu	r5,-22(fp)
811359d4:	e0bffb04 	addi	r2,fp,-20
811359d8:	d8800015 	stw	r2,0(sp)
811359dc:	280f883a 	mov	r7,r5
811359e0:	200d883a 	mov	r6,r4
811359e4:	180b883a 	mov	r5,r3
811359e8:	e13ff317 	ldw	r4,-52(fp)
811359ec:	1127ba00 	call	81127ba0 <OSFlagPend>
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
811359f0:	e0bffc17 	ldw	r2,-16(fp)
811359f4:	10c00417 	ldw	r3,16(r2)
811359f8:	e0bff217 	ldw	r2,-56(fp)
811359fc:	18bfe726 	beq	r3,r2,8113599c <__reset+0xfb11599c>
      }
    }

    count--;
81135a00:	e0bfef17 	ldw	r2,-68(fp)
81135a04:	10bfffc4 	addi	r2,r2,-1
81135a08:	e0bfef15 	stw	r2,-68(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
81135a0c:	e0bffc17 	ldw	r2,-16(fp)
81135a10:	10c00517 	ldw	r3,20(r2)
81135a14:	e0bffd17 	ldw	r2,-12(fp)
81135a18:	11000044 	addi	r4,r2,1
81135a1c:	e13ffd15 	stw	r4,-12(fp)
81135a20:	10800003 	ldbu	r2,0(r2)
81135a24:	1009883a 	mov	r4,r2
81135a28:	e0bffc17 	ldw	r2,-16(fp)
81135a2c:	10c5883a 	add	r2,r2,r3
81135a30:	10801a04 	addi	r2,r2,104
81135a34:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
81135a38:	e0bffc17 	ldw	r2,-16(fp)
81135a3c:	e0fff217 	ldw	r3,-56(fp)
81135a40:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
81135a44:	e0bfef17 	ldw	r2,-68(fp)
81135a48:	103fad1e 	bne	r2,zero,81135900 <__reset+0xfb115900>
  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);
81135a4c:	e0bffc17 	ldw	r2,-16(fp)
81135a50:	10800917 	ldw	r2,36(r2)
81135a54:	1009883a 	mov	r4,r2
81135a58:	112bbc80 	call	8112bbc8 <OSSemPost>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81135a5c:	0005303a 	rdctl	r2,status
81135a60:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81135a64:	e0fff717 	ldw	r3,-36(fp)
81135a68:	00bfff84 	movi	r2,-2
81135a6c:	1884703a 	and	r2,r3,r2
81135a70:	1001703a 	wrctl	status,r2
  
  return context;
81135a74:	e0bff717 	ldw	r2,-36(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
81135a78:	e0bff415 	stw	r2,-48(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
81135a7c:	e0bffc17 	ldw	r2,-16(fp)
81135a80:	10800117 	ldw	r2,4(r2)
81135a84:	10c11014 	ori	r3,r2,1088
81135a88:	e0bffc17 	ldw	r2,-16(fp)
81135a8c:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
81135a90:	e0bffc17 	ldw	r2,-16(fp)
81135a94:	10800017 	ldw	r2,0(r2)
81135a98:	10800304 	addi	r2,r2,12
81135a9c:	e0fffc17 	ldw	r3,-16(fp)
81135aa0:	18c00117 	ldw	r3,4(r3)
81135aa4:	10c00035 	stwio	r3,0(r2)
81135aa8:	e0bff417 	ldw	r2,-48(fp)
81135aac:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81135ab0:	e0bff617 	ldw	r2,-40(fp)
81135ab4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
81135ab8:	e0fffe17 	ldw	r3,-8(fp)
81135abc:	e0bfef17 	ldw	r2,-68(fp)
81135ac0:	1885c83a 	sub	r2,r3,r2
}
81135ac4:	e037883a 	mov	sp,fp
81135ac8:	dfc00117 	ldw	ra,4(sp)
81135acc:	df000017 	ldw	fp,0(sp)
81135ad0:	dec00204 	addi	sp,sp,8
81135ad4:	f800283a 	ret

81135ad8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81135ad8:	defffe04 	addi	sp,sp,-8
81135adc:	de00012e 	bgeu	sp,et,81135ae4 <alt_get_errno+0xc>
81135ae0:	003b68fa 	trap	3
81135ae4:	dfc00115 	stw	ra,4(sp)
81135ae8:	df000015 	stw	fp,0(sp)
81135aec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81135af0:	d0a01617 	ldw	r2,-32680(gp)
81135af4:	10000326 	beq	r2,zero,81135b04 <alt_get_errno+0x2c>
81135af8:	d0a01617 	ldw	r2,-32680(gp)
81135afc:	103ee83a 	callr	r2
81135b00:	00000106 	br	81135b08 <alt_get_errno+0x30>
81135b04:	d0a06b04 	addi	r2,gp,-32340
}
81135b08:	e037883a 	mov	sp,fp
81135b0c:	dfc00117 	ldw	ra,4(sp)
81135b10:	df000017 	ldw	fp,0(sp)
81135b14:	dec00204 	addi	sp,sp,8
81135b18:	f800283a 	ret

81135b1c <alt_msgdma_write_standard_descriptor>:
 */
static int alt_msgdma_write_standard_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_standard_descriptor *descriptor)
{
81135b1c:	defffc04 	addi	sp,sp,-16
81135b20:	de00012e 	bgeu	sp,et,81135b28 <alt_msgdma_write_standard_descriptor+0xc>
81135b24:	003b68fa 	trap	3
81135b28:	df000315 	stw	fp,12(sp)
81135b2c:	df000304 	addi	fp,sp,12
81135b30:	e13ffd15 	stw	r4,-12(fp)
81135b34:	e17ffe15 	stw	r5,-8(fp)
81135b38:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
81135b3c:	e0bffd17 	ldw	r2,-12(fp)
81135b40:	10800037 	ldwio	r2,0(r2)
81135b44:	1080010c 	andi	r2,r2,4
81135b48:	10000226 	beq	r2,zero,81135b54 <alt_msgdma_write_standard_descriptor+0x38>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
		is non-blocking*/
        return -ENOSPC;
81135b4c:	00bff904 	movi	r2,-28
81135b50:	00001506 	br	81135ba8 <alt_msgdma_write_standard_descriptor+0x8c>
    }

	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base, 
81135b54:	e0bfff17 	ldw	r2,-4(fp)
81135b58:	10800017 	ldw	r2,0(r2)
81135b5c:	1007883a 	mov	r3,r2
81135b60:	e0bffe17 	ldw	r2,-8(fp)
81135b64:	10c00035 	stwio	r3,0(r2)
		(alt_u32)descriptor->read_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base, 
81135b68:	e0bffe17 	ldw	r2,-8(fp)
81135b6c:	10800104 	addi	r2,r2,4
81135b70:	e0ffff17 	ldw	r3,-4(fp)
81135b74:	18c00117 	ldw	r3,4(r3)
81135b78:	10c00035 	stwio	r3,0(r2)
	(	alt_u32)descriptor->write_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base, 
81135b7c:	e0bffe17 	ldw	r2,-8(fp)
81135b80:	10800204 	addi	r2,r2,8
81135b84:	e0ffff17 	ldw	r3,-4(fp)
81135b88:	18c00217 	ldw	r3,8(r3)
81135b8c:	10c00035 	stwio	r3,0(r2)
		descriptor->transfer_length);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_STANDARD(descriptor_base, 
81135b90:	e0bffe17 	ldw	r2,-8(fp)
81135b94:	10800304 	addi	r2,r2,12
81135b98:	e0ffff17 	ldw	r3,-4(fp)
81135b9c:	18c00317 	ldw	r3,12(r3)
81135ba0:	10c00035 	stwio	r3,0(r2)
		descriptor->control);
        return 0;
81135ba4:	0005883a 	mov	r2,zero
}
81135ba8:	e037883a 	mov	sp,fp
81135bac:	df000017 	ldw	fp,0(sp)
81135bb0:	dec00104 	addi	sp,sp,4
81135bb4:	f800283a 	ret

81135bb8 <alt_msgdma_write_extended_descriptor>:
 */
static int alt_msgdma_write_extended_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_extended_descriptor *descriptor)
{
81135bb8:	defffc04 	addi	sp,sp,-16
81135bbc:	de00012e 	bgeu	sp,et,81135bc4 <alt_msgdma_write_extended_descriptor+0xc>
81135bc0:	003b68fa 	trap	3
81135bc4:	df000315 	stw	fp,12(sp)
81135bc8:	df000304 	addi	fp,sp,12
81135bcc:	e13ffd15 	stw	r4,-12(fp)
81135bd0:	e17ffe15 	stw	r5,-8(fp)
81135bd4:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
81135bd8:	e0bffd17 	ldw	r2,-12(fp)
81135bdc:	10800037 	ldwio	r2,0(r2)
81135be0:	1080010c 	andi	r2,r2,4
81135be4:	10000226 	beq	r2,zero,81135bf0 <alt_msgdma_write_extended_descriptor+0x38>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
	is non-blocking*/
        return -ENOSPC;
81135be8:	00bff904 	movi	r2,-28
81135bec:	00003b06 	br	81135cdc <alt_msgdma_write_extended_descriptor+0x124>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(
81135bf0:	e0bfff17 	ldw	r2,-4(fp)
81135bf4:	10800017 	ldw	r2,0(r2)
81135bf8:	1007883a 	mov	r3,r2
81135bfc:	e0bffe17 	ldw	r2,-8(fp)
81135c00:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	(alt_u32)descriptor->read_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(
81135c04:	e0bffe17 	ldw	r2,-8(fp)
81135c08:	10800104 	addi	r2,r2,4
81135c0c:	e0ffff17 	ldw	r3,-4(fp)
81135c10:	18c00117 	ldw	r3,4(r3)
81135c14:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
		(alt_u32)descriptor->write_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(
81135c18:	e0bffe17 	ldw	r2,-8(fp)
81135c1c:	10800204 	addi	r2,r2,8
81135c20:	e0ffff17 	ldw	r3,-4(fp)
81135c24:	18c00217 	ldw	r3,8(r3)
81135c28:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(
81135c2c:	e0bffe17 	ldw	r2,-8(fp)
81135c30:	10800304 	addi	r2,r2,12
81135c34:	e0ffff17 	ldw	r3,-4(fp)
81135c38:	18c0030b 	ldhu	r3,12(r3)
81135c3c:	18ffffcc 	andi	r3,r3,65535
81135c40:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->sequence_number);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(
81135c44:	e0bffe17 	ldw	r2,-8(fp)
81135c48:	10800384 	addi	r2,r2,14
81135c4c:	e0ffff17 	ldw	r3,-4(fp)
81135c50:	18c00383 	ldbu	r3,14(r3)
81135c54:	18c03fcc 	andi	r3,r3,255
81135c58:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(
81135c5c:	e0bffe17 	ldw	r2,-8(fp)
81135c60:	108003c4 	addi	r2,r2,15
81135c64:	e0ffff17 	ldw	r3,-4(fp)
81135c68:	18c003c3 	ldbu	r3,15(r3)
81135c6c:	18c03fcc 	andi	r3,r3,255
81135c70:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(
81135c74:	e0bffe17 	ldw	r2,-8(fp)
81135c78:	10800404 	addi	r2,r2,16
81135c7c:	e0ffff17 	ldw	r3,-4(fp)
81135c80:	18c0040b 	ldhu	r3,16(r3)
81135c84:	18ffffcc 	andi	r3,r3,65535
81135c88:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(
81135c8c:	e0bffe17 	ldw	r2,-8(fp)
81135c90:	10800484 	addi	r2,r2,18
81135c94:	e0ffff17 	ldw	r3,-4(fp)
81135c98:	18c0048b 	ldhu	r3,18(r3)
81135c9c:	18ffffcc 	andi	r3,r3,65535
81135ca0:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base, 0);
81135ca4:	e0bffe17 	ldw	r2,-8(fp)
81135ca8:	10800504 	addi	r2,r2,20
81135cac:	0007883a 	mov	r3,zero
81135cb0:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base, 0);
81135cb4:	e0bffe17 	ldw	r2,-8(fp)
81135cb8:	10800604 	addi	r2,r2,24
81135cbc:	0007883a 	mov	r3,zero
81135cc0:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(
81135cc4:	e0bffe17 	ldw	r2,-8(fp)
81135cc8:	10800704 	addi	r2,r2,28
81135ccc:	e0ffff17 	ldw	r3,-4(fp)
81135cd0:	18c00717 	ldw	r3,28(r3)
81135cd4:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->control);
    return 0;
81135cd8:	0005883a 	mov	r2,zero
}
81135cdc:	e037883a 	mov	sp,fp
81135ce0:	df000017 	ldw	fp,0(sp)
81135ce4:	dec00104 	addi	sp,sp,4
81135ce8:	f800283a 	ret

81135cec <alt_msgdma_irq>:
 * alt_msgdma_irq()
 *
 * Interrupt handler for the Modular Scatter-Gather DMA controller.
 */
static void alt_msgdma_irq(void *context)
{
81135cec:	defff804 	addi	sp,sp,-32
81135cf0:	de00012e 	bgeu	sp,et,81135cf8 <alt_msgdma_irq+0xc>
81135cf4:	003b68fa 	trap	3
81135cf8:	dfc00715 	stw	ra,28(sp)
81135cfc:	df000615 	stw	fp,24(sp)
81135d00:	df000604 	addi	fp,sp,24
81135d04:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev *dev = (alt_msgdma_dev *) context;
81135d08:	e0bfff17 	ldw	r2,-4(fp)
81135d0c:	e0bffa15 	stw	r2,-24(fp)
    alt_irq_context cpu_sr;
    alt_u32 temporary_control;

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
81135d10:	e0bffa17 	ldw	r2,-24(fp)
81135d14:	10801783 	ldbu	r2,94(r2)
81135d18:	10803fcc 	andi	r2,r2,255
81135d1c:	10001126 	beq	r2,zero,81135d64 <alt_msgdma_irq+0x78>
    {
        temporary_control = 
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
81135d20:	e0bffa17 	ldw	r2,-24(fp)
81135d24:	10800617 	ldw	r2,24(r2)
81135d28:	10800037 	ldwio	r2,0(r2)

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
    {
        temporary_control = 
81135d2c:	1007883a 	mov	r3,r2
81135d30:	00bffdc4 	movi	r2,-9
81135d34:	1884703a 	and	r2,r3,r2
81135d38:	e0bffb15 	stw	r2,-20(fp)
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				& ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
81135d3c:	e0bffa17 	ldw	r2,-24(fp)
81135d40:	10800617 	ldw	r2,24(r2)
81135d44:	e0fffb17 	ldw	r3,-20(fp)
81135d48:	10c00035 	stwio	r3,0(r2)
        		temporary_control);
        
        /* clear the IRQ status- W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base,
81135d4c:	e0bffa17 	ldw	r2,-24(fp)
81135d50:	10800617 	ldw	r2,24(r2)
81135d54:	10800404 	addi	r2,r2,16
81135d58:	00c00044 	movi	r3,1
81135d5c:	10c00035 	stwio	r3,0(r2)
81135d60:	00001106 	br	81135da8 <alt_msgdma_irq+0xbc>
        		ALT_MSGDMA_PREFETCHER_STATUS_IRQ_SET_MASK);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
81135d64:	e0bffa17 	ldw	r2,-24(fp)
81135d68:	10800317 	ldw	r2,12(r2)
81135d6c:	10800104 	addi	r2,r2,4
81135d70:	10800037 	ldwio	r2,0(r2)
81135d74:	1007883a 	mov	r3,r2
81135d78:	00bffbc4 	movi	r2,-17
81135d7c:	1884703a 	and	r2,r3,r2
81135d80:	e0bffb15 	stw	r2,-20(fp)
    			& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
81135d84:	e0bffa17 	ldw	r2,-24(fp)
81135d88:	10800317 	ldw	r2,12(r2)
81135d8c:	10800104 	addi	r2,r2,4
81135d90:	e0fffb17 	ldw	r3,-20(fp)
81135d94:	10c00035 	stwio	r3,0(r2)
    	/* clear the IRQ status */
    	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
81135d98:	e0bffa17 	ldw	r2,-24(fp)
81135d9c:	10800317 	ldw	r2,12(r2)
81135da0:	00c08004 	movi	r3,512
81135da4:	10c00035 	stwio	r3,0(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
81135da8:	e0bffa17 	ldw	r2,-24(fp)
81135dac:	10800b17 	ldw	r2,44(r2)
81135db0:	10001226 	beq	r2,zero,81135dfc <alt_msgdma_irq+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81135db4:	0005303a 	rdctl	r2,status
81135db8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81135dbc:	e0fffd17 	ldw	r3,-12(fp)
81135dc0:	00bfff84 	movi	r2,-2
81135dc4:	1884703a 	and	r2,r3,r2
81135dc8:	1001703a 	wrctl	status,r2
  
  return context;
81135dcc:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
81135dd0:	e0bffc15 	stw	r2,-16(fp)
        dev->callback (dev->callback_context);
81135dd4:	e0bffa17 	ldw	r2,-24(fp)
81135dd8:	10800b17 	ldw	r2,44(r2)
81135ddc:	e0fffa17 	ldw	r3,-24(fp)
81135de0:	18c00c17 	ldw	r3,48(r3)
81135de4:	1809883a 	mov	r4,r3
81135de8:	103ee83a 	callr	r2
81135dec:	e0bffc17 	ldw	r2,-16(fp)
81135df0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81135df4:	e0bffe17 	ldw	r2,-8(fp)
81135df8:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
81135dfc:	e0bffa17 	ldw	r2,-24(fp)
81135e00:	10801783 	ldbu	r2,94(r2)
81135e04:	10803fcc 	andi	r2,r2,255
81135e08:	10000a26 	beq	r2,zero,81135e34 <alt_msgdma_irq+0x148>
    {
    	temporary_control = 
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
81135e0c:	e0bffa17 	ldw	r2,-24(fp)
81135e10:	10800617 	ldw	r2,24(r2)
81135e14:	10800037 	ldwio	r2,0(r2)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
81135e18:	10800214 	ori	r2,r2,8
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
    {
    	temporary_control = 
81135e1c:	e0bffb15 	stw	r2,-20(fp)
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
    	
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
81135e20:	e0bffa17 	ldw	r2,-24(fp)
81135e24:	10800617 	ldw	r2,24(r2)
81135e28:	e0fffb17 	ldw	r3,-20(fp)
81135e2c:	10c00035 	stwio	r3,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
    }

    return;
81135e30:	00000c06 	br	81135e64 <alt_msgdma_irq+0x178>
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
81135e34:	e0bffa17 	ldw	r2,-24(fp)
81135e38:	10800317 	ldw	r2,12(r2)
81135e3c:	10800104 	addi	r2,r2,4
81135e40:	10800037 	ldwio	r2,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
81135e44:	10800414 	ori	r2,r2,16
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
81135e48:	e0bffb15 	stw	r2,-20(fp)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
81135e4c:	e0bffa17 	ldw	r2,-24(fp)
81135e50:	10800317 	ldw	r2,12(r2)
81135e54:	10800104 	addi	r2,r2,4
81135e58:	e0fffb17 	ldw	r3,-20(fp)
81135e5c:	10c00035 	stwio	r3,0(r2)
    }

    return;
81135e60:	0001883a 	nop
}
81135e64:	e037883a 	mov	sp,fp
81135e68:	dfc00117 	ldw	ra,4(sp)
81135e6c:	df000017 	ldw	fp,0(sp)
81135e70:	dec00204 	addi	sp,sp,8
81135e74:	f800283a 	ret

81135e78 <alt_msgdma_construct_standard_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
81135e78:	defffb04 	addi	sp,sp,-20
81135e7c:	de00012e 	bgeu	sp,et,81135e84 <alt_msgdma_construct_standard_descriptor+0xc>
81135e80:	003b68fa 	trap	3
81135e84:	df000415 	stw	fp,16(sp)
81135e88:	df000404 	addi	fp,sp,16
81135e8c:	e13ffc15 	stw	r4,-16(fp)
81135e90:	e17ffd15 	stw	r5,-12(fp)
81135e94:	e1bffe15 	stw	r6,-8(fp)
81135e98:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
81135e9c:	e0bffc17 	ldw	r2,-16(fp)
81135ea0:	10c01217 	ldw	r3,72(r2)
81135ea4:	e0800117 	ldw	r2,4(fp)
81135ea8:	18800436 	bltu	r3,r2,81135ebc <alt_msgdma_construct_standard_descriptor+0x44>
       dev->enhanced_features != 0
81135eac:	e0bffc17 	ldw	r2,-16(fp)
81135eb0:	10801703 	ldbu	r2,92(r2)
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
81135eb4:	10803fcc 	andi	r2,r2,255
81135eb8:	10000226 	beq	r2,zero,81135ec4 <alt_msgdma_construct_standard_descriptor+0x4c>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
81135ebc:	00bffa84 	movi	r2,-22
81135ec0:	00000e06 	br	81135efc <alt_msgdma_construct_standard_descriptor+0x84>
    }
    descriptor->read_address = read_address;
81135ec4:	e0bffd17 	ldw	r2,-12(fp)
81135ec8:	e0fffe17 	ldw	r3,-8(fp)
81135ecc:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
81135ed0:	e0bffd17 	ldw	r2,-12(fp)
81135ed4:	e0ffff17 	ldw	r3,-4(fp)
81135ed8:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
81135edc:	e0bffd17 	ldw	r2,-12(fp)
81135ee0:	e0c00117 	ldw	r3,4(fp)
81135ee4:	10c00215 	stw	r3,8(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
81135ee8:	e0800217 	ldw	r2,8(fp)
81135eec:	10e00034 	orhi	r3,r2,32768
81135ef0:	e0bffd17 	ldw	r2,-12(fp)
81135ef4:	10c00315 	stw	r3,12(r2)
    
    return 0;
81135ef8:	0005883a 	mov	r2,zero
}
81135efc:	e037883a 	mov	sp,fp
81135f00:	df000017 	ldw	fp,0(sp)
81135f04:	dec00104 	addi	sp,sp,4
81135f08:	f800283a 	ret

81135f0c <alt_msgdma_construct_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
81135f0c:	defff604 	addi	sp,sp,-40
81135f10:	de00012e 	bgeu	sp,et,81135f18 <alt_msgdma_construct_extended_descriptor+0xc>
81135f14:	003b68fa 	trap	3
81135f18:	df000915 	stw	fp,36(sp)
81135f1c:	df000904 	addi	fp,sp,36
81135f20:	e13ff715 	stw	r4,-36(fp)
81135f24:	e17ff815 	stw	r5,-32(fp)
81135f28:	e1bff915 	stw	r6,-28(fp)
81135f2c:	e1fffa15 	stw	r7,-24(fp)
81135f30:	e1800317 	ldw	r6,12(fp)
81135f34:	e1400417 	ldw	r5,16(fp)
81135f38:	e1000517 	ldw	r4,20(fp)
81135f3c:	e0c00617 	ldw	r3,24(fp)
81135f40:	e0800717 	ldw	r2,28(fp)
81135f44:	e1bffb0d 	sth	r6,-20(fp)
81135f48:	e17ffc05 	stb	r5,-16(fp)
81135f4c:	e13ffd05 	stb	r4,-12(fp)
81135f50:	e0fffe0d 	sth	r3,-8(fp)
81135f54:	e0bfff0d 	sth	r2,-4(fp)
    if(dev->max_byte < length ||
81135f58:	e0bff717 	ldw	r2,-36(fp)
81135f5c:	10c01217 	ldw	r3,72(r2)
81135f60:	e0800117 	ldw	r2,4(fp)
81135f64:	18801936 	bltu	r3,r2,81135fcc <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->max_stride < read_stride ||
81135f68:	e13ff717 	ldw	r4,-36(fp)
81135f6c:	20801317 	ldw	r2,76(r4)
81135f70:	20c01417 	ldw	r3,80(r4)
81135f74:	e13ffe0b 	ldhu	r4,-8(fp)
81135f78:	213fffcc 	andi	r4,r4,65535
81135f7c:	2015883a 	mov	r10,r4
81135f80:	0017883a 	mov	r11,zero
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
81135f84:	1ac01136 	bltu	r3,r11,81135fcc <alt_msgdma_construct_extended_descriptor+0xc0>
81135f88:	58c0011e 	bne	r11,r3,81135f90 <alt_msgdma_construct_extended_descriptor+0x84>
81135f8c:	12800f36 	bltu	r2,r10,81135fcc <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
81135f90:	e13ff717 	ldw	r4,-36(fp)
81135f94:	20801317 	ldw	r2,76(r4)
81135f98:	20c01417 	ldw	r3,80(r4)
81135f9c:	e13fff0b 	ldhu	r4,-4(fp)
81135fa0:	213fffcc 	andi	r4,r4,65535
81135fa4:	2011883a 	mov	r8,r4
81135fa8:	0013883a 	mov	r9,zero
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
81135fac:	1a400736 	bltu	r3,r9,81135fcc <alt_msgdma_construct_extended_descriptor+0xc0>
81135fb0:	48c0011e 	bne	r9,r3,81135fb8 <alt_msgdma_construct_extended_descriptor+0xac>
81135fb4:	12000536 	bltu	r2,r8,81135fcc <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
81135fb8:	e0bff717 	ldw	r2,-36(fp)
81135fbc:	10801703 	ldbu	r2,92(r2)
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
81135fc0:	10803fcc 	andi	r2,r2,255
81135fc4:	10800060 	cmpeqi	r2,r2,1
81135fc8:	1000021e 	bne	r2,zero,81135fd4 <alt_msgdma_construct_extended_descriptor+0xc8>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
81135fcc:	00bffa84 	movi	r2,-22
81135fd0:	00002106 	br	81136058 <alt_msgdma_construct_extended_descriptor+0x14c>
    }
    
    descriptor->read_address_low = read_address;
81135fd4:	e0bff817 	ldw	r2,-32(fp)
81135fd8:	e0fff917 	ldw	r3,-28(fp)
81135fdc:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_low = write_address;
81135fe0:	e0bff817 	ldw	r2,-32(fp)
81135fe4:	e0fffa17 	ldw	r3,-24(fp)
81135fe8:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
81135fec:	e0bff817 	ldw	r2,-32(fp)
81135ff0:	e0c00117 	ldw	r3,4(fp)
81135ff4:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
81135ff8:	e0bff817 	ldw	r2,-32(fp)
81135ffc:	e0fffb0b 	ldhu	r3,-20(fp)
81136000:	10c0030d 	sth	r3,12(r2)
    descriptor->read_burst_count = read_burst_count;
81136004:	e0bff817 	ldw	r2,-32(fp)
81136008:	e0fffc03 	ldbu	r3,-16(fp)
8113600c:	10c00385 	stb	r3,14(r2)
    descriptor->write_burst_count = write_burst_count;
81136010:	e0bff817 	ldw	r2,-32(fp)
81136014:	e0fffd03 	ldbu	r3,-12(fp)
81136018:	10c003c5 	stb	r3,15(r2)
    descriptor->read_stride = read_stride;
8113601c:	e0bff817 	ldw	r2,-32(fp)
81136020:	e0fffe0b 	ldhu	r3,-8(fp)
81136024:	10c0040d 	sth	r3,16(r2)
    descriptor->write_stride = write_stride;
81136028:	e0bff817 	ldw	r2,-32(fp)
8113602c:	e0ffff0b 	ldhu	r3,-4(fp)
81136030:	10c0048d 	sth	r3,18(r2)
    descriptor->read_address_high = NULL;
81136034:	e0bff817 	ldw	r2,-32(fp)
81136038:	10000515 	stw	zero,20(r2)
    descriptor->write_address_high = NULL;
8113603c:	e0bff817 	ldw	r2,-32(fp)
81136040:	10000615 	stw	zero,24(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
81136044:	e0800217 	ldw	r2,8(fp)
81136048:	10e00034 	orhi	r3,r2,32768
8113604c:	e0bff817 	ldw	r2,-32(fp)
81136050:	10c00715 	stw	r3,28(r2)

  return 0 ;
81136054:	0005883a 	mov	r2,zero

}
81136058:	e037883a 	mov	sp,fp
8113605c:	df000017 	ldw	fp,0(sp)
81136060:	dec00104 	addi	sp,sp,4
81136064:	f800283a 	ret

81136068 <alt_msgdma_descriptor_async_transfer>:
 */
static int alt_msgdma_descriptor_async_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
81136068:	deffee04 	addi	sp,sp,-72
8113606c:	de00012e 	bgeu	sp,et,81136074 <alt_msgdma_descriptor_async_transfer+0xc>
81136070:	003b68fa 	trap	3
81136074:	dfc01115 	stw	ra,68(sp)
81136078:	df001015 	stw	fp,64(sp)
8113607c:	df001004 	addi	fp,sp,64
81136080:	e13ffd15 	stw	r4,-12(fp)
81136084:	e17ffe15 	stw	r5,-8(fp)
81136088:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control = 0;
8113608c:	e03ff115 	stw	zero,-60(fp)
    alt_irq_context context = 0;
81136090:	e03ff215 	stw	zero,-56(fp)
    alt_u16 counter = 0;
81136094:	e03ff00d 	sth	zero,-64(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
81136098:	e0bffd17 	ldw	r2,-12(fp)
8113609c:	10800317 	ldw	r2,12(r2)
811360a0:	10800204 	addi	r2,r2,8
811360a4:	10800037 	ldwio	r2,0(r2)
	alt_msgdma_extended_descriptor *extended_desc)
{
    alt_u32 control = 0;
    alt_irq_context context = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
811360a8:	10bfffcc 	andi	r2,r2,65535
811360ac:	e0bff315 	stw	r2,-52(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
811360b0:	e0bffd17 	ldw	r2,-12(fp)
811360b4:	10800317 	ldw	r2,12(r2)
811360b8:	10800204 	addi	r2,r2,8
811360bc:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
811360c0:	1004d43a 	srli	r2,r2,16
811360c4:	e0bff415 	stw	r2,-48(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
811360c8:	e0bffd17 	ldw	r2,-12(fp)
811360cc:	10800917 	ldw	r2,36(r2)
811360d0:	e0fff417 	ldw	r3,-48(fp)
811360d4:	1880042e 	bgeu	r3,r2,811360e8 <alt_msgdma_descriptor_async_transfer+0x80>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
811360d8:	e0bffd17 	ldw	r2,-12(fp)
811360dc:	10800917 	ldw	r2,36(r2)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
811360e0:	e0fff317 	ldw	r3,-52(fp)
811360e4:	18800236 	bltu	r3,r2,811360f0 <alt_msgdma_descriptor_async_transfer+0x88>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
	{
		/*at least one write or read FIFO descriptor buffer is full,
		returning so that this function is non-blocking*/
		return -ENOSPC;
811360e8:	00bff904 	movi	r2,-28
811360ec:	0000a906 	br	81136394 <alt_msgdma_descriptor_async_transfer+0x32c>
	
	/*
	* When running in a multi threaded environment, obtain the "regs_lock"
	* semaphore. This ensures that accessing registers is thread-safe.
	*/
	ALT_SEM_PEND (dev->regs_lock, 0);
811360f0:	e0bffd17 	ldw	r2,-12(fp)
811360f4:	10801817 	ldw	r2,96(r2)
811360f8:	e0bff615 	stw	r2,-40(fp)
811360fc:	e03ffc0d 	sth	zero,-16(fp)
81136100:	e0bffc0b 	ldhu	r2,-16(fp)
81136104:	e0fffc84 	addi	r3,fp,-14
81136108:	180d883a 	mov	r6,r3
8113610c:	100b883a 	mov	r5,r2
81136110:	e13ff617 	ldw	r4,-40(fp)
81136114:	112b8400 	call	8112b840 <OSSemPend>
	
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	read or write masters  */
	/* stop issuing more descriptors */
	control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
81136118:	00800804 	movi	r2,32
8113611c:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81136120:	0005303a 	rdctl	r2,status
81136124:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81136128:	e0fff717 	ldw	r3,-36(fp)
8113612c:	00bfff84 	movi	r2,-2
81136130:	1884703a 	and	r2,r3,r2
81136134:	1001703a 	wrctl	status,r2
  
  return context;
81136138:	e0bff717 	ldw	r2,-36(fp)
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
8113613c:	e0bff215 	stw	r2,-56(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81136140:	e0bffd17 	ldw	r2,-12(fp)
81136144:	10800317 	ldw	r2,12(r2)
81136148:	10800104 	addi	r2,r2,4
8113614c:	e0fff117 	ldw	r3,-60(fp)
81136150:	10c00035 	stwio	r3,0(r2)
	/*
	* Clear any (previous) status register information
	* that might occlude our error checking later.
	*/
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
81136154:	e0bffd17 	ldw	r2,-12(fp)
81136158:	10800317 	ldw	r2,12(r2)
8113615c:	e0fffd17 	ldw	r3,-12(fp)
81136160:	18c00317 	ldw	r3,12(r3)
81136164:	18c00037 	ldwio	r3,0(r3)
81136168:	10c00035 	stwio	r3,0(r2)
8113616c:	e0bff217 	ldw	r2,-56(fp)
81136170:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81136174:	e0bffb17 	ldw	r2,-20(fp)
81136178:	1001703a 	wrctl	status,r2
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
8113617c:	e0bffe17 	ldw	r2,-8(fp)
81136180:	10001e26 	beq	r2,zero,811361fc <alt_msgdma_descriptor_async_transfer+0x194>
81136184:	e0bfff17 	ldw	r2,-4(fp)
81136188:	10001c1e 	bne	r2,zero,811361fc <alt_msgdma_descriptor_async_transfer+0x194>
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
8113618c:	00001106 	br	811361d4 <alt_msgdma_descriptor_async_transfer+0x16c>
		dev->csr_base, dev->descriptor_base, standard_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
81136190:	01000044 	movi	r4,1
81136194:	1137d280 	call	81137d28 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
81136198:	e0bff00b 	ldhu	r2,-64(fp)
8113619c:	1084e230 	cmpltui	r2,r2,5000
811361a0:	1000091e 	bne	r2,zero,811361c8 <alt_msgdma_descriptor_async_transfer+0x160>
            {
                alt_printf("time out after 5 msec while waiting" 
811361a4:	01204534 	movhi	r4,33044
811361a8:	212f8d04 	addi	r4,r4,-16844
811361ac:	11386ec0 	call	811386ec <alt_printf>
				/*
				* Now that access to the registers is complete, release the 
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
811361b0:	e0bffd17 	ldw	r2,-12(fp)
811361b4:	10801817 	ldw	r2,96(r2)
811361b8:	1009883a 	mov	r4,r2
811361bc:	112bbc80 	call	8112bbc8 <OSSemPost>
				
                return -ETIME;
811361c0:	00bff084 	movi	r2,-62
811361c4:	00007306 	br	81136394 <alt_msgdma_descriptor_async_transfer+0x32c>
            }
            counter++; 
811361c8:	e0bff00b 	ldhu	r2,-64(fp)
811361cc:	10800044 	addi	r2,r2,1
811361d0:	e0bff00d 	sth	r2,-64(fp)

    if (NULL != standard_desc && NULL == extended_desc)
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
811361d4:	e0bffd17 	ldw	r2,-12(fp)
811361d8:	10c00317 	ldw	r3,12(r2)
811361dc:	e0bffd17 	ldw	r2,-12(fp)
811361e0:	10800417 	ldw	r2,16(r2)
811361e4:	e1bffe17 	ldw	r6,-8(fp)
811361e8:	100b883a 	mov	r5,r2
811361ec:	1809883a 	mov	r4,r3
811361f0:	1135b1c0 	call	81135b1c <alt_msgdma_write_standard_descriptor>
811361f4:	103fe61e 	bne	r2,zero,81136190 <__reset+0xfb116190>
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
811361f8:	00002706 	br	81136298 <alt_msgdma_descriptor_async_transfer+0x230>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
811361fc:	e0bffe17 	ldw	r2,-8(fp)
81136200:	10001f1e 	bne	r2,zero,81136280 <alt_msgdma_descriptor_async_transfer+0x218>
81136204:	e0bfff17 	ldw	r2,-4(fp)
81136208:	10001d26 	beq	r2,zero,81136280 <alt_msgdma_descriptor_async_transfer+0x218>
    {
        counter = 0; /* reset counter */
8113620c:	e03ff00d 	sth	zero,-64(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
81136210:	00001106 	br	81136258 <alt_msgdma_descriptor_async_transfer+0x1f0>
		dev->csr_base, 
		dev->descriptor_base, 
		extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
81136214:	01000044 	movi	r4,1
81136218:	1137d280 	call	81137d28 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8113621c:	e0bff00b 	ldhu	r2,-64(fp)
81136220:	1084e230 	cmpltui	r2,r2,5000
81136224:	1000091e 	bne	r2,zero,8113624c <alt_msgdma_descriptor_async_transfer+0x1e4>
            {
                alt_printf("time out after 5 msec while waiting free FIFO buffer" 
81136228:	01204534 	movhi	r4,33044
8113622c:	212fa304 	addi	r4,r4,-16756
81136230:	11386ec0 	call	811386ec <alt_printf>
				/*
				* Now that access to the registers is complete, release the 
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
81136234:	e0bffd17 	ldw	r2,-12(fp)
81136238:	10801817 	ldw	r2,96(r2)
8113623c:	1009883a 	mov	r4,r2
81136240:	112bbc80 	call	8112bbc8 <OSSemPost>
				
                return -ETIME;
81136244:	00bff084 	movi	r2,-62
81136248:	00005206 	br	81136394 <alt_msgdma_descriptor_async_transfer+0x32c>
            }
            counter++; 
8113624c:	e0bff00b 	ldhu	r2,-64(fp)
81136250:	10800044 	addi	r2,r2,1
81136254:	e0bff00d 	sth	r2,-64(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
81136258:	e0bffd17 	ldw	r2,-12(fp)
8113625c:	10c00317 	ldw	r3,12(r2)
81136260:	e0bffd17 	ldw	r2,-12(fp)
81136264:	10800417 	ldw	r2,16(r2)
81136268:	e1bfff17 	ldw	r6,-4(fp)
8113626c:	100b883a 	mov	r5,r2
81136270:	1809883a 	mov	r4,r3
81136274:	1135bb80 	call	81135bb8 <alt_msgdma_write_extended_descriptor>
81136278:	103fe61e 	bne	r2,zero,81136214 <__reset+0xfb116214>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
8113627c:	00000606 	br	81136298 <alt_msgdma_descriptor_async_transfer+0x230>
    {
		/*
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
81136280:	e0bffd17 	ldw	r2,-12(fp)
81136284:	10801817 	ldw	r2,96(r2)
81136288:	1009883a 	mov	r4,r2
8113628c:	112bbc80 	call	8112bbc8 <OSSemPost>
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
81136290:	00bfffc4 	movi	r2,-1
81136294:	00003f06 	br	81136394 <alt_msgdma_descriptor_async_transfer+0x32c>
    * If a callback routine has been previously registered which will be
    * called from the msgdma ISR. Set up controller to:
    *  - Run
    *  - Stop on an error with any particular descriptor
    */
    if(dev->callback)
81136298:	e0bffd17 	ldw	r2,-12(fp)
8113629c:	10800b17 	ldw	r2,44(r2)
811362a0:	10001c26 	beq	r2,zero,81136314 <alt_msgdma_descriptor_async_transfer+0x2ac>
    {

        control |= (dev->control |
811362a4:	e0bffd17 	ldw	r2,-12(fp)
811362a8:	10c00d17 	ldw	r3,52(r2)
811362ac:	e0bff117 	ldw	r2,-60(fp)
811362b0:	1884b03a 	or	r2,r3,r2
811362b4:	10800514 	ori	r2,r2,20
811362b8:	e0bff115 	stw	r2,-60(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
                    ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
811362bc:	e0fff117 	ldw	r3,-60(fp)
811362c0:	00bff7c4 	movi	r2,-33
811362c4:	1884703a 	and	r2,r3,r2
811362c8:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811362cc:	0005303a 	rdctl	r2,status
811362d0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811362d4:	e0fff917 	ldw	r3,-28(fp)
811362d8:	00bfff84 	movi	r2,-2
811362dc:	1884703a 	and	r2,r3,r2
811362e0:	1001703a 	wrctl	status,r2
  
  return context;
811362e4:	e0bff917 	ldw	r2,-28(fp)
    /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
811362e8:	e0bff215 	stw	r2,-56(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
811362ec:	e0bffd17 	ldw	r2,-12(fp)
811362f0:	10800317 	ldw	r2,12(r2)
811362f4:	10800104 	addi	r2,r2,4
811362f8:	e0fff117 	ldw	r3,-60(fp)
811362fc:	10c00035 	stwio	r3,0(r2)
81136300:	e0bff217 	ldw	r2,-56(fp)
81136304:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81136308:	e0bff517 	ldw	r2,-44(fp)
8113630c:	1001703a 	wrctl	status,r2
81136310:	00001b06 	br	81136380 <alt_msgdma_descriptor_async_transfer+0x318>
    *   - Stop on an error with any particular descriptor
    *   - Disable interrupt generation
    */
    else
    {
        control |= (dev->control |
81136314:	e0bffd17 	ldw	r2,-12(fp)
81136318:	10c00d17 	ldw	r3,52(r2)
8113631c:	e0bff117 	ldw	r2,-60(fp)
81136320:	1884b03a 	or	r2,r3,r2
81136324:	10800114 	ori	r2,r2,4
81136328:	e0bff115 	stw	r2,-60(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK );
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
8113632c:	e0fff117 	ldw	r3,-60(fp)
81136330:	00bff3c4 	movi	r2,-49
81136334:	1884703a 	and	r2,r3,r2
81136338:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113633c:	0005303a 	rdctl	r2,status
81136340:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81136344:	e0fffa17 	ldw	r3,-24(fp)
81136348:	00bfff84 	movi	r2,-2
8113634c:	1884703a 	and	r2,r3,r2
81136350:	1001703a 	wrctl	status,r2
  
  return context;
81136354:	e0bffa17 	ldw	r2,-24(fp)
                   (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all();
81136358:	e0bff215 	stw	r2,-56(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
8113635c:	e0bffd17 	ldw	r2,-12(fp)
81136360:	10800317 	ldw	r2,12(r2)
81136364:	10800104 	addi	r2,r2,4
81136368:	e0fff117 	ldw	r3,-60(fp)
8113636c:	10c00035 	stwio	r3,0(r2)
81136370:	e0bff217 	ldw	r2,-56(fp)
81136374:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81136378:	e0bff817 	ldw	r2,-32(fp)
8113637c:	1001703a 	wrctl	status,r2

    /*
	 * Now that access to the registers is complete, release the registers
     * semaphore so that other threads can access the registers.
     */
    ALT_SEM_POST (dev->regs_lock);
81136380:	e0bffd17 	ldw	r2,-12(fp)
81136384:	10801817 	ldw	r2,96(r2)
81136388:	1009883a 	mov	r4,r2
8113638c:	112bbc80 	call	8112bbc8 <OSSemPost>
    
    return 0;
81136390:	0005883a 	mov	r2,zero
}
81136394:	e037883a 	mov	sp,fp
81136398:	dfc00117 	ldw	ra,4(sp)
8113639c:	df000017 	ldw	fp,0(sp)
811363a0:	dec00204 	addi	sp,sp,8
811363a4:	f800283a 	ret

811363a8 <alt_msgdma_descriptor_sync_transfer>:
 */
static int alt_msgdma_descriptor_sync_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
811363a8:	deffee04 	addi	sp,sp,-72
811363ac:	de00012e 	bgeu	sp,et,811363b4 <alt_msgdma_descriptor_sync_transfer+0xc>
811363b0:	003b68fa 	trap	3
811363b4:	dfc01115 	stw	ra,68(sp)
811363b8:	df001015 	stw	fp,64(sp)
811363bc:	df001004 	addi	fp,sp,64
811363c0:	e13ffd15 	stw	r4,-12(fp)
811363c4:	e17ffe15 	stw	r5,-8(fp)
811363c8:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control=0;
811363cc:	e03ff415 	stw	zero,-48(fp)
    alt_irq_context context=0;
811363d0:	e03ff515 	stw	zero,-44(fp)
    alt_u32 csr_status = 0;
811363d4:	e03ff015 	stw	zero,-64(fp)
    alt_u16 counter = 0;
811363d8:	e03ff10d 	sth	zero,-60(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
811363dc:	e0bffd17 	ldw	r2,-12(fp)
811363e0:	10800317 	ldw	r2,12(r2)
811363e4:	10800204 	addi	r2,r2,8
811363e8:	10800037 	ldwio	r2,0(r2)
{
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
811363ec:	10bfffcc 	andi	r2,r2,65535
811363f0:	e0bff215 	stw	r2,-56(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
811363f4:	e0bffd17 	ldw	r2,-12(fp)
811363f8:	10800317 	ldw	r2,12(r2)
811363fc:	10800204 	addi	r2,r2,8
81136400:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
81136404:	1004d43a 	srli	r2,r2,16
81136408:	e0bff315 	stw	r2,-52(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
    alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK | 
8113640c:	00807804 	movi	r2,480
81136410:	e0bff615 	stw	r2,-40(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
81136414:	00001906 	br	8113647c <alt_msgdma_descriptor_sync_transfer+0xd4>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
81136418:	01000044 	movi	r4,1
8113641c:	1137d280 	call	81137d28 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
81136420:	e0bff10b 	ldhu	r2,-60(fp)
81136424:	1084e230 	cmpltui	r2,r2,5000
81136428:	1000051e 	bne	r2,zero,81136440 <alt_msgdma_descriptor_sync_transfer+0x98>
        {
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
8113642c:	01204534 	movhi	r4,33044
81136430:	212fb904 	addi	r4,r4,-16668
81136434:	11386ec0 	call	811386ec <alt_printf>
				" for storing descriptor\n");
            return -ETIME;
81136438:	00bff084 	movi	r2,-62
8113643c:	0000d706 	br	8113679c <alt_msgdma_descriptor_sync_transfer+0x3f4>
        }
        counter++;  
81136440:	e0bff10b 	ldhu	r2,-60(fp)
81136444:	10800044 	addi	r2,r2,1
81136448:	e0bff10d 	sth	r2,-60(fp)
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8113644c:	e0bffd17 	ldw	r2,-12(fp)
81136450:	10800317 	ldw	r2,12(r2)
81136454:	10800204 	addi	r2,r2,8
81136458:	10800037 	ldwio	r2,0(r2)
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
				" for storing descriptor\n");
            return -ETIME;
        }
        counter++;  
        fifo_read_fill_level = (
8113645c:	10bfffcc 	andi	r2,r2,65535
81136460:	e0bff215 	stw	r2,-56(fp)
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
81136464:	e0bffd17 	ldw	r2,-12(fp)
81136468:	10800317 	ldw	r2,12(r2)
8113646c:	10800204 	addi	r2,r2,8
81136470:	10800037 	ldwio	r2,0(r2)
        counter++;  
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
81136474:	1004d43a 	srli	r2,r2,16
81136478:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8113647c:	e0bffd17 	ldw	r2,-12(fp)
81136480:	10800917 	ldw	r2,36(r2)
81136484:	e0fff317 	ldw	r3,-52(fp)
81136488:	18bfe32e 	bgeu	r3,r2,81136418 <__reset+0xfb116418>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
8113648c:	e0bffd17 	ldw	r2,-12(fp)
81136490:	10800917 	ldw	r2,36(r2)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
81136494:	e0fff217 	ldw	r3,-56(fp)
81136498:	18bfdf2e 	bgeu	r3,r2,81136418 <__reset+0xfb116418>

     /*
     * When running in a multi threaded environment, obtain the "regs_lock"
     * semaphore. This ensures that accessing registers is thread-safe.
     */
	ALT_SEM_PEND (dev->regs_lock, 0);
8113649c:	e0bffd17 	ldw	r2,-12(fp)
811364a0:	10801817 	ldw	r2,96(r2)
811364a4:	e0bff815 	stw	r2,-32(fp)
811364a8:	e03ffc0d 	sth	zero,-16(fp)
811364ac:	e0bffc0b 	ldhu	r2,-16(fp)
811364b0:	e0fffc84 	addi	r3,fp,-14
811364b4:	180d883a 	mov	r6,r3
811364b8:	100b883a 	mov	r5,r2
811364bc:	e13ff817 	ldw	r4,-32(fp)
811364c0:	112b8400 	call	8112b840 <OSSemPend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811364c4:	0005303a 	rdctl	r2,status
811364c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811364cc:	e0fffb17 	ldw	r3,-20(fp)
811364d0:	00bfff84 	movi	r2,-2
811364d4:	1884703a 	and	r2,r3,r2
811364d8:	1001703a 	wrctl	status,r2
  
  return context;
811364dc:	e0bffb17 	ldw	r2,-20(fp)
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
811364e0:	e0bff515 	stw	r2,-44(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
811364e4:	e0bffd17 	ldw	r2,-12(fp)
811364e8:	10800317 	ldw	r2,12(r2)
811364ec:	10800104 	addi	r2,r2,4
811364f0:	00c00804 	movi	r3,32
811364f4:	10c00035 	stwio	r3,0(r2)
        ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
811364f8:	e0bffd17 	ldw	r2,-12(fp)
811364fc:	10800317 	ldw	r2,12(r2)
81136500:	e0fffd17 	ldw	r3,-12(fp)
81136504:	18c00317 	ldw	r3,12(r3)
81136508:	18c00037 	ldwio	r3,0(r3)
8113650c:	10c00035 	stwio	r3,0(r2)
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
81136510:	e0bffe17 	ldw	r2,-8(fp)
81136514:	10001f26 	beq	r2,zero,81136594 <alt_msgdma_descriptor_sync_transfer+0x1ec>
81136518:	e0bfff17 	ldw	r2,-4(fp)
8113651c:	10001d1e 	bne	r2,zero,81136594 <alt_msgdma_descriptor_sync_transfer+0x1ec>
    {
        counter = 0; /* reset counter */
81136520:	e03ff10d 	sth	zero,-60(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
81136524:	00001106 	br	8113656c <alt_msgdma_descriptor_sync_transfer+0x1c4>
			dev->csr_base, dev->descriptor_base, standard_desc))
        {     
            alt_busy_sleep(1); /* delay 1us */
81136528:	01000044 	movi	r4,1
8113652c:	1137d280 	call	81137d28 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
81136530:	e0bff10b 	ldhu	r2,-60(fp)
81136534:	1084e230 	cmpltui	r2,r2,5000
81136538:	1000091e 	bne	r2,zero,81136560 <alt_msgdma_descriptor_sync_transfer+0x1b8>
            {
                alt_printf("time out after 5 msec while writing standard" 
8113653c:	01204534 	movhi	r4,33044
81136540:	212fcd04 	addi	r4,r4,-16588
81136544:	11386ec0 	call	811386ec <alt_printf>
				/*
				* Now that access to the registers is complete, release the 
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
81136548:	e0bffd17 	ldw	r2,-12(fp)
8113654c:	10801817 	ldw	r2,96(r2)
81136550:	1009883a 	mov	r4,r2
81136554:	112bbc80 	call	8112bbc8 <OSSemPost>
				
                return -ETIME;
81136558:	00bff084 	movi	r2,-62
8113655c:	00008f06 	br	8113679c <alt_msgdma_descriptor_sync_transfer+0x3f4>
            }
            counter++;    
81136560:	e0bff10b 	ldhu	r2,-60(fp)
81136564:	10800044 	addi	r2,r2,1
81136568:	e0bff10d 	sth	r2,-60(fp)
    if (NULL != standard_desc && NULL == extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
8113656c:	e0bffd17 	ldw	r2,-12(fp)
81136570:	10c00317 	ldw	r3,12(r2)
81136574:	e0bffd17 	ldw	r2,-12(fp)
81136578:	10800417 	ldw	r2,16(r2)
8113657c:	e1bffe17 	ldw	r6,-8(fp)
81136580:	100b883a 	mov	r5,r2
81136584:	1809883a 	mov	r4,r3
81136588:	1135b1c0 	call	81135b1c <alt_msgdma_write_standard_descriptor>
8113658c:	103fe61e 	bne	r2,zero,81136528 <__reset+0xfb116528>
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
81136590:	00002706 	br	81136630 <alt_msgdma_descriptor_sync_transfer+0x288>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
81136594:	e0bffe17 	ldw	r2,-8(fp)
81136598:	10001f1e 	bne	r2,zero,81136618 <alt_msgdma_descriptor_sync_transfer+0x270>
8113659c:	e0bfff17 	ldw	r2,-4(fp)
811365a0:	10001d26 	beq	r2,zero,81136618 <alt_msgdma_descriptor_sync_transfer+0x270>
    {
        counter = 0; /* reset counter */
811365a4:	e03ff10d 	sth	zero,-60(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
811365a8:	00001106 	br	811365f0 <alt_msgdma_descriptor_sync_transfer+0x248>
			dev->csr_base, dev->descriptor_base, extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
811365ac:	01000044 	movi	r4,1
811365b0:	1137d280 	call	81137d28 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
811365b4:	e0bff10b 	ldhu	r2,-60(fp)
811365b8:	1084e230 	cmpltui	r2,r2,5000
811365bc:	1000091e 	bne	r2,zero,811365e4 <alt_msgdma_descriptor_sync_transfer+0x23c>
            {
                alt_printf("time out after 5 msec while writing extended" 
811365c0:	01204534 	movhi	r4,33044
811365c4:	212fde04 	addi	r4,r4,-16520
811365c8:	11386ec0 	call	811386ec <alt_printf>
				/*
				* Now that access to the registers is complete, release the 
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
811365cc:	e0bffd17 	ldw	r2,-12(fp)
811365d0:	10801817 	ldw	r2,96(r2)
811365d4:	1009883a 	mov	r4,r2
811365d8:	112bbc80 	call	8112bbc8 <OSSemPost>
				
                return -ETIME;
811365dc:	00bff084 	movi	r2,-62
811365e0:	00006e06 	br	8113679c <alt_msgdma_descriptor_sync_transfer+0x3f4>
            }
            counter++;
811365e4:	e0bff10b 	ldhu	r2,-60(fp)
811365e8:	10800044 	addi	r2,r2,1
811365ec:	e0bff10d 	sth	r2,-60(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
811365f0:	e0bffd17 	ldw	r2,-12(fp)
811365f4:	10c00317 	ldw	r3,12(r2)
811365f8:	e0bffd17 	ldw	r2,-12(fp)
811365fc:	10800417 	ldw	r2,16(r2)
81136600:	e1bfff17 	ldw	r6,-4(fp)
81136604:	100b883a 	mov	r5,r2
81136608:	1809883a 	mov	r4,r3
8113660c:	1135bb80 	call	81135bb8 <alt_msgdma_write_extended_descriptor>
81136610:	103fe61e 	bne	r2,zero,811365ac <__reset+0xfb1165ac>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
81136614:	00000606 	br	81136630 <alt_msgdma_descriptor_sync_transfer+0x288>
    {
		/*
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
81136618:	e0bffd17 	ldw	r2,-12(fp)
8113661c:	10801817 	ldw	r2,96(r2)
81136620:	1009883a 	mov	r4,r2
81136624:	112bbc80 	call	8112bbc8 <OSSemPost>
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
81136628:	00bfffc4 	movi	r2,-1
8113662c:	00005b06 	br	8113679c <alt_msgdma_descriptor_sync_transfer+0x3f4>
    * Set up msgdma controller to:
    * - Disable interrupt generation
    * - Run once a valid descriptor is written to controller
    * - Stop on an error with any particular descriptor
    */
     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
81136630:	e0bffd17 	ldw	r2,-12(fp)
81136634:	10800317 	ldw	r2,12(r2)
81136638:	10800104 	addi	r2,r2,4
8113663c:	e0fffd17 	ldw	r3,-12(fp)
81136640:	19000d17 	ldw	r4,52(r3)
81136644:	00fff2c4 	movi	r3,-53
81136648:	20c6703a 	and	r3,r4,r3
8113664c:	18c00114 	ori	r3,r3,4
81136650:	10c00035 	stwio	r3,0(r2)
81136654:	e0bff517 	ldw	r2,-44(fp)
81136658:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113665c:	e0bff717 	ldw	r2,-36(fp)
81136660:	1001703a 	wrctl	status,r2
		(~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
		(~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK)) ;
	 
	alt_irq_enable_all(context);
     
    counter = 0; /* reset counter */ 
81136664:	e03ff10d 	sth	zero,-60(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
81136668:	e0bffd17 	ldw	r2,-12(fp)
8113666c:	10800317 	ldw	r2,12(r2)
81136670:	10800037 	ldwio	r2,0(r2)
81136674:	e0bff015 	stw	r2,-64(fp)
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
81136678:	00001506 	br	811366d0 <alt_msgdma_descriptor_sync_transfer+0x328>
    {
        alt_busy_sleep(1); /* delay 1us */
8113667c:	01000044 	movi	r4,1
81136680:	1137d280 	call	81137d28 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
81136684:	e0bff10b 	ldhu	r2,-60(fp)
81136688:	1084e230 	cmpltui	r2,r2,5000
8113668c:	1000091e 	bne	r2,zero,811366b4 <alt_msgdma_descriptor_sync_transfer+0x30c>
        {
            alt_printf("time out after 5 msec while waiting for any pending" 
81136690:	01204534 	movhi	r4,33044
81136694:	212fef04 	addi	r4,r4,-16452
81136698:	11386ec0 	call	811386ec <alt_printf>
			
			/*
			* Now that access to the registers is complete, release the registers
			* semaphore so that other threads can access the registers.
			*/
			ALT_SEM_POST (dev->regs_lock);
8113669c:	e0bffd17 	ldw	r2,-12(fp)
811366a0:	10801817 	ldw	r2,96(r2)
811366a4:	1009883a 	mov	r4,r2
811366a8:	112bbc80 	call	8112bbc8 <OSSemPost>
			
            return -ETIME;
811366ac:	00bff084 	movi	r2,-62
811366b0:	00003a06 	br	8113679c <alt_msgdma_descriptor_sync_transfer+0x3f4>
        }
        counter++;
811366b4:	e0bff10b 	ldhu	r2,-60(fp)
811366b8:	10800044 	addi	r2,r2,1
811366bc:	e0bff10d 	sth	r2,-60(fp)
        csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
811366c0:	e0bffd17 	ldw	r2,-12(fp)
811366c4:	10800317 	ldw	r2,12(r2)
811366c8:	10800037 	ldwio	r2,0(r2)
811366cc:	e0bff015 	stw	r2,-64(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
811366d0:	e0fff017 	ldw	r3,-64(fp)
811366d4:	e0bff617 	ldw	r2,-40(fp)
811366d8:	1884703a 	and	r2,r3,r2
811366dc:	1000031e 	bne	r2,zero,811366ec <alt_msgdma_descriptor_sync_transfer+0x344>
811366e0:	e0bff017 	ldw	r2,-64(fp)
811366e4:	1080004c 	andi	r2,r2,1
811366e8:	103fe41e 	bne	r2,zero,8113667c <__reset+0xfb11667c>
    }
    

    /*Errors or conditions causing the dispatcher stopping issuing read/write 
      commands to masters*/
    if(0 != (csr_status & error))
811366ec:	e0fff017 	ldw	r3,-64(fp)
811366f0:	e0bff617 	ldw	r2,-40(fp)
811366f4:	1884703a 	and	r2,r3,r2
811366f8:	10000626 	beq	r2,zero,81136714 <alt_msgdma_descriptor_sync_transfer+0x36c>
    {
		/*
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
811366fc:	e0bffd17 	ldw	r2,-12(fp)
81136700:	10801817 	ldw	r2,96(r2)
81136704:	1009883a 	mov	r4,r2
81136708:	112bbc80 	call	8112bbc8 <OSSemPost>
		
        return error;
8113670c:	e0bff617 	ldw	r2,-40(fp)
81136710:	00002206 	br	8113679c <alt_msgdma_descriptor_sync_transfer+0x3f4>
    }

    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) | 
81136714:	e0bffd17 	ldw	r2,-12(fp)
81136718:	10800317 	ldw	r2,12(r2)
8113671c:	10800104 	addi	r2,r2,4
81136720:	10800037 	ldwio	r2,0(r2)
81136724:	10800814 	ori	r2,r2,32
81136728:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113672c:	0005303a 	rdctl	r2,status
81136730:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81136734:	e0fffa17 	ldw	r3,-24(fp)
81136738:	00bfff84 	movi	r2,-2
8113673c:	1884703a 	and	r2,r3,r2
81136740:	1001703a 	wrctl	status,r2
  
  return context;
81136744:	e0bffa17 	ldw	r2,-24(fp)
	ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();  
81136748:	e0bff515 	stw	r2,-44(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
8113674c:	e0bffd17 	ldw	r2,-12(fp)
81136750:	10800317 	ldw	r2,12(r2)
81136754:	10800104 	addi	r2,r2,4
81136758:	e0fff417 	ldw	r3,-48(fp)
8113675c:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
81136760:	e0bffd17 	ldw	r2,-12(fp)
81136764:	10800317 	ldw	r2,12(r2)
81136768:	e0fffd17 	ldw	r3,-12(fp)
8113676c:	18c00317 	ldw	r3,12(r3)
81136770:	18c00037 	ldwio	r3,0(r3)
81136774:	10c00035 	stwio	r3,0(r2)
81136778:	e0bff517 	ldw	r2,-44(fp)
8113677c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81136780:	e0bff917 	ldw	r2,-28(fp)
81136784:	1001703a 	wrctl	status,r2

	/*
	* Now that access to the registers is complete, release the registers
	* semaphore so that other threads can access the registers.
	*/
    ALT_SEM_POST (dev->regs_lock);
81136788:	e0bffd17 	ldw	r2,-12(fp)
8113678c:	10801817 	ldw	r2,96(r2)
81136790:	1009883a 	mov	r4,r2
81136794:	112bbc80 	call	8112bbc8 <OSSemPost>
    
    return 0;
81136798:	0005883a 	mov	r2,zero

}
8113679c:	e037883a 	mov	sp,fp
811367a0:	dfc00117 	ldw	ra,4(sp)
811367a4:	df000017 	ldw	fp,0(sp)
811367a8:	dec00204 	addi	sp,sp,8
811367ac:	f800283a 	ret

811367b0 <alt_msgdma_construct_standard_st_to_mm_descriptor>:
 */
int alt_msgdma_construct_standard_st_to_mm_descriptor (
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *write_address, alt_u32 length, alt_u32 control)
{
811367b0:	defff804 	addi	sp,sp,-32
811367b4:	de00012e 	bgeu	sp,et,811367bc <alt_msgdma_construct_standard_st_to_mm_descriptor+0xc>
811367b8:	003b68fa 	trap	3
811367bc:	dfc00715 	stw	ra,28(sp)
811367c0:	df000615 	stw	fp,24(sp)
811367c4:	df000604 	addi	fp,sp,24
811367c8:	e13ffc15 	stw	r4,-16(fp)
811367cc:	e17ffd15 	stw	r5,-12(fp)
811367d0:	e1bffe15 	stw	r6,-8(fp)
811367d4:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, NULL, 
811367d8:	e0800217 	ldw	r2,8(fp)
811367dc:	d8800115 	stw	r2,4(sp)
811367e0:	e0bfff17 	ldw	r2,-4(fp)
811367e4:	d8800015 	stw	r2,0(sp)
811367e8:	e1fffe17 	ldw	r7,-8(fp)
811367ec:	000d883a 	mov	r6,zero
811367f0:	e17ffd17 	ldw	r5,-12(fp)
811367f4:	e13ffc17 	ldw	r4,-16(fp)
811367f8:	1135e780 	call	81135e78 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
811367fc:	e037883a 	mov	sp,fp
81136800:	dfc00117 	ldw	ra,4(sp)
81136804:	df000017 	ldw	fp,0(sp)
81136808:	dec00204 	addi	sp,sp,8
8113680c:	f800283a 	ret

81136810 <alt_msgdma_construct_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address,
	alt_u32 length,
	alt_u32 control)
{
81136810:	defff804 	addi	sp,sp,-32
81136814:	de00012e 	bgeu	sp,et,8113681c <alt_msgdma_construct_standard_mm_to_st_descriptor+0xc>
81136818:	003b68fa 	trap	3
8113681c:	dfc00715 	stw	ra,28(sp)
81136820:	df000615 	stw	fp,24(sp)
81136824:	df000604 	addi	fp,sp,24
81136828:	e13ffc15 	stw	r4,-16(fp)
8113682c:	e17ffd15 	stw	r5,-12(fp)
81136830:	e1bffe15 	stw	r6,-8(fp)
81136834:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
81136838:	e0800217 	ldw	r2,8(fp)
8113683c:	d8800115 	stw	r2,4(sp)
81136840:	e0bfff17 	ldw	r2,-4(fp)
81136844:	d8800015 	stw	r2,0(sp)
81136848:	000f883a 	mov	r7,zero
8113684c:	e1bffe17 	ldw	r6,-8(fp)
81136850:	e17ffd17 	ldw	r5,-12(fp)
81136854:	e13ffc17 	ldw	r4,-16(fp)
81136858:	1135e780 	call	81135e78 <alt_msgdma_construct_standard_descriptor>
            NULL, length, control);

}
8113685c:	e037883a 	mov	sp,fp
81136860:	dfc00117 	ldw	ra,4(sp)
81136864:	df000017 	ldw	fp,0(sp)
81136868:	dec00204 	addi	sp,sp,8
8113686c:	f800283a 	ret

81136870 <alt_msgdma_construct_standard_mm_to_mm_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
81136870:	defff804 	addi	sp,sp,-32
81136874:	de00012e 	bgeu	sp,et,8113687c <alt_msgdma_construct_standard_mm_to_mm_descriptor+0xc>
81136878:	003b68fa 	trap	3
8113687c:	dfc00715 	stw	ra,28(sp)
81136880:	df000615 	stw	fp,24(sp)
81136884:	df000604 	addi	fp,sp,24
81136888:	e13ffc15 	stw	r4,-16(fp)
8113688c:	e17ffd15 	stw	r5,-12(fp)
81136890:	e1bffe15 	stw	r6,-8(fp)
81136894:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
81136898:	e0800317 	ldw	r2,12(fp)
8113689c:	d8800115 	stw	r2,4(sp)
811368a0:	e0800217 	ldw	r2,8(fp)
811368a4:	d8800015 	stw	r2,0(sp)
811368a8:	e1ffff17 	ldw	r7,-4(fp)
811368ac:	e1bffe17 	ldw	r6,-8(fp)
811368b0:	e17ffd17 	ldw	r5,-12(fp)
811368b4:	e13ffc17 	ldw	r4,-16(fp)
811368b8:	1135e780 	call	81135e78 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
811368bc:	e037883a 	mov	sp,fp
811368c0:	dfc00117 	ldw	ra,4(sp)
811368c4:	df000017 	ldw	fp,0(sp)
811368c8:	dec00204 	addi	sp,sp,8
811368cc:	f800283a 	ret

811368d0 <alt_msgdma_construct_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 write_burst_count, 
	alt_u16 write_stride)
{
811368d0:	defff004 	addi	sp,sp,-64
811368d4:	de00012e 	bgeu	sp,et,811368dc <alt_msgdma_construct_extended_st_to_mm_descriptor+0xc>
811368d8:	003b68fa 	trap	3
811368dc:	dfc00f15 	stw	ra,60(sp)
811368e0:	df000e15 	stw	fp,56(sp)
811368e4:	df000e04 	addi	fp,sp,56
811368e8:	e13ff915 	stw	r4,-28(fp)
811368ec:	e17ffa15 	stw	r5,-24(fp)
811368f0:	e1bffb15 	stw	r6,-20(fp)
811368f4:	e1fffc15 	stw	r7,-16(fp)
811368f8:	e1000317 	ldw	r4,12(fp)
811368fc:	e0c00417 	ldw	r3,16(fp)
81136900:	e0800517 	ldw	r2,20(fp)
81136904:	e13ffd0d 	sth	r4,-12(fp)
81136908:	e0fffe05 	stb	r3,-8(fp)
8113690c:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
81136910:	e0bffd0b 	ldhu	r2,-12(fp)
81136914:	e0fffe03 	ldbu	r3,-8(fp)
81136918:	e13fff0b 	ldhu	r4,-4(fp)
8113691c:	d9000615 	stw	r4,24(sp)
81136920:	d8000515 	stw	zero,20(sp)
81136924:	d8c00415 	stw	r3,16(sp)
81136928:	d8000315 	stw	zero,12(sp)
8113692c:	d8800215 	stw	r2,8(sp)
81136930:	e0800217 	ldw	r2,8(fp)
81136934:	d8800115 	stw	r2,4(sp)
81136938:	e0bffc17 	ldw	r2,-16(fp)
8113693c:	d8800015 	stw	r2,0(sp)
81136940:	e1fffb17 	ldw	r7,-20(fp)
81136944:	000d883a 	mov	r6,zero
81136948:	e17ffa17 	ldw	r5,-24(fp)
8113694c:	e13ff917 	ldw	r4,-28(fp)
81136950:	1135f0c0 	call	81135f0c <alt_msgdma_construct_extended_descriptor>
            NULL, write_address, length, control, sequence_number, 0, 
            write_burst_count, 0, write_stride);
}
81136954:	e037883a 	mov	sp,fp
81136958:	dfc00117 	ldw	ra,4(sp)
8113695c:	df000017 	ldw	fp,0(sp)
81136960:	dec00204 	addi	sp,sp,8
81136964:	f800283a 	ret

81136968 <alt_msgdma_construct_extended_mm_to_st_descriptor>:
	alt_u32 length,
	alt_u32 control,
	alt_u16 sequence_number,
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
81136968:	defff004 	addi	sp,sp,-64
8113696c:	de00012e 	bgeu	sp,et,81136974 <alt_msgdma_construct_extended_mm_to_st_descriptor+0xc>
81136970:	003b68fa 	trap	3
81136974:	dfc00f15 	stw	ra,60(sp)
81136978:	df000e15 	stw	fp,56(sp)
8113697c:	df000e04 	addi	fp,sp,56
81136980:	e13ff915 	stw	r4,-28(fp)
81136984:	e17ffa15 	stw	r5,-24(fp)
81136988:	e1bffb15 	stw	r6,-20(fp)
8113698c:	e1fffc15 	stw	r7,-16(fp)
81136990:	e1000317 	ldw	r4,12(fp)
81136994:	e0c00417 	ldw	r3,16(fp)
81136998:	e0800517 	ldw	r2,20(fp)
8113699c:	e13ffd0d 	sth	r4,-12(fp)
811369a0:	e0fffe05 	stb	r3,-8(fp)
811369a4:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, read_address, 
811369a8:	e0bffd0b 	ldhu	r2,-12(fp)
811369ac:	e0fffe03 	ldbu	r3,-8(fp)
811369b0:	e13fff0b 	ldhu	r4,-4(fp)
811369b4:	d8000615 	stw	zero,24(sp)
811369b8:	d9000515 	stw	r4,20(sp)
811369bc:	d8000415 	stw	zero,16(sp)
811369c0:	d8c00315 	stw	r3,12(sp)
811369c4:	d8800215 	stw	r2,8(sp)
811369c8:	e0800217 	ldw	r2,8(fp)
811369cc:	d8800115 	stw	r2,4(sp)
811369d0:	e0bffc17 	ldw	r2,-16(fp)
811369d4:	d8800015 	stw	r2,0(sp)
811369d8:	000f883a 	mov	r7,zero
811369dc:	e1bffb17 	ldw	r6,-20(fp)
811369e0:	e17ffa17 	ldw	r5,-24(fp)
811369e4:	e13ff917 	ldw	r4,-28(fp)
811369e8:	1135f0c0 	call	81135f0c <alt_msgdma_construct_extended_descriptor>
            NULL, length, control, sequence_number, read_burst_count, 0, 
            read_stride, 0);

}
811369ec:	e037883a 	mov	sp,fp
811369f0:	dfc00117 	ldw	ra,4(sp)
811369f4:	df000017 	ldw	fp,0(sp)
811369f8:	dec00204 	addi	sp,sp,8
811369fc:	f800283a 	ret

81136a00 <alt_msgdma_construct_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
81136a00:	deffee04 	addi	sp,sp,-72
81136a04:	de00012e 	bgeu	sp,et,81136a0c <alt_msgdma_construct_extended_mm_to_mm_descriptor+0xc>
81136a08:	003b68fa 	trap	3
81136a0c:	dfc01115 	stw	ra,68(sp)
81136a10:	df001015 	stw	fp,64(sp)
81136a14:	df001004 	addi	fp,sp,64
81136a18:	e13ff715 	stw	r4,-36(fp)
81136a1c:	e17ff815 	stw	r5,-32(fp)
81136a20:	e1bff915 	stw	r6,-28(fp)
81136a24:	e1fffa15 	stw	r7,-24(fp)
81136a28:	e1800417 	ldw	r6,16(fp)
81136a2c:	e1400517 	ldw	r5,20(fp)
81136a30:	e1000617 	ldw	r4,24(fp)
81136a34:	e0c00717 	ldw	r3,28(fp)
81136a38:	e0800817 	ldw	r2,32(fp)
81136a3c:	e1bffb0d 	sth	r6,-20(fp)
81136a40:	e17ffc05 	stb	r5,-16(fp)
81136a44:	e13ffd05 	stb	r4,-12(fp)
81136a48:	e0fffe0d 	sth	r3,-8(fp)
81136a4c:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
81136a50:	e0bffb0b 	ldhu	r2,-20(fp)
81136a54:	e0fffc03 	ldbu	r3,-16(fp)
81136a58:	e13ffd03 	ldbu	r4,-12(fp)
81136a5c:	e17ffe0b 	ldhu	r5,-8(fp)
81136a60:	e1bfff0b 	ldhu	r6,-4(fp)
81136a64:	d9800615 	stw	r6,24(sp)
81136a68:	d9400515 	stw	r5,20(sp)
81136a6c:	d9000415 	stw	r4,16(sp)
81136a70:	d8c00315 	stw	r3,12(sp)
81136a74:	d8800215 	stw	r2,8(sp)
81136a78:	e0800317 	ldw	r2,12(fp)
81136a7c:	d8800115 	stw	r2,4(sp)
81136a80:	e0800217 	ldw	r2,8(fp)
81136a84:	d8800015 	stw	r2,0(sp)
81136a88:	e1fffa17 	ldw	r7,-24(fp)
81136a8c:	e1bff917 	ldw	r6,-28(fp)
81136a90:	e17ff817 	ldw	r5,-32(fp)
81136a94:	e13ff717 	ldw	r4,-36(fp)
81136a98:	1135f0c0 	call	81135f0c <alt_msgdma_construct_extended_descriptor>
            read_address, write_address, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
81136a9c:	e037883a 	mov	sp,fp
81136aa0:	dfc00117 	ldw	ra,4(sp)
81136aa4:	df000017 	ldw	fp,0(sp)
81136aa8:	dec00204 	addi	sp,sp,8
81136aac:	f800283a 	ret

81136ab0 <alt_msgdma_construct_prefetcher_standard_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
81136ab0:	defffb04 	addi	sp,sp,-20
81136ab4:	de00012e 	bgeu	sp,et,81136abc <alt_msgdma_construct_prefetcher_standard_descriptor+0xc>
81136ab8:	003b68fa 	trap	3
81136abc:	df000415 	stw	fp,16(sp)
81136ac0:	df000404 	addi	fp,sp,16
81136ac4:	e13ffc15 	stw	r4,-16(fp)
81136ac8:	e17ffd15 	stw	r5,-12(fp)
81136acc:	e1bffe15 	stw	r6,-8(fp)
81136ad0:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
81136ad4:	e0bffc17 	ldw	r2,-16(fp)
81136ad8:	10c01217 	ldw	r3,72(r2)
81136adc:	e0800117 	ldw	r2,4(fp)
81136ae0:	18800436 	bltu	r3,r2,81136af4 <alt_msgdma_construct_prefetcher_standard_descriptor+0x44>
       dev->enhanced_features != 0
81136ae4:	e0bffc17 	ldw	r2,-16(fp)
81136ae8:	10801703 	ldbu	r2,92(r2)
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
81136aec:	10803fcc 	andi	r2,r2,255
81136af0:	10000226 	beq	r2,zero,81136afc <alt_msgdma_construct_prefetcher_standard_descriptor+0x4c>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
81136af4:	00bffa84 	movi	r2,-22
81136af8:	00001406 	br	81136b4c <alt_msgdma_construct_prefetcher_standard_descriptor+0x9c>
    }
    descriptor->read_address = read_address;
81136afc:	e0bffd17 	ldw	r2,-12(fp)
81136b00:	e0fffe17 	ldw	r3,-8(fp)
81136b04:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
81136b08:	e0bffd17 	ldw	r2,-12(fp)
81136b0c:	e0ffff17 	ldw	r3,-4(fp)
81136b10:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
81136b14:	e0bffd17 	ldw	r2,-12(fp)
81136b18:	e0c00117 	ldw	r3,4(fp)
81136b1c:	10c00215 	stw	r3,8(r2)
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
81136b20:	e0fffd17 	ldw	r3,-12(fp)
81136b24:	e0bffd17 	ldw	r2,-12(fp)
81136b28:	10c00315 	stw	r3,12(r2)
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
81136b2c:	e0c00217 	ldw	r3,8(fp)
81136b30:	00900034 	movhi	r2,16384
81136b34:	10bfffc4 	addi	r2,r2,-1
81136b38:	1884703a 	and	r2,r3,r2
81136b3c:	10e00034 	orhi	r3,r2,32768
    descriptor->transfer_length = length;
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
81136b40:	e0bffd17 	ldw	r2,-12(fp)
81136b44:	10c00715 	stw	r3,28(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
81136b48:	0005883a 	mov	r2,zero
}
81136b4c:	e037883a 	mov	sp,fp
81136b50:	df000017 	ldw	fp,0(sp)
81136b54:	dec00104 	addi	sp,sp,4
81136b58:	f800283a 	ret

81136b5c <alt_msgdma_construct_prefetcher_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
81136b5c:	defff404 	addi	sp,sp,-48
81136b60:	de00012e 	bgeu	sp,et,81136b68 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc>
81136b64:	003b68fa 	trap	3
81136b68:	df000b15 	stw	fp,44(sp)
81136b6c:	df000b04 	addi	fp,sp,44
81136b70:	e13ff715 	stw	r4,-36(fp)
81136b74:	e17ff815 	stw	r5,-32(fp)
81136b78:	e1bff915 	stw	r6,-28(fp)
81136b7c:	e1fffa15 	stw	r7,-24(fp)
81136b80:	e1800517 	ldw	r6,20(fp)
81136b84:	e1400617 	ldw	r5,24(fp)
81136b88:	e1000717 	ldw	r4,28(fp)
81136b8c:	e0c00817 	ldw	r3,32(fp)
81136b90:	e0800917 	ldw	r2,36(fp)
81136b94:	e1bffb0d 	sth	r6,-20(fp)
81136b98:	e17ffc05 	stb	r5,-16(fp)
81136b9c:	e13ffd05 	stb	r4,-12(fp)
81136ba0:	e0fffe0d 	sth	r3,-8(fp)
81136ba4:	e0bfff0d 	sth	r2,-4(fp)
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
81136ba8:	e0bff717 	ldw	r2,-36(fp)
81136bac:	10c01217 	ldw	r3,72(r2)
81136bb0:	e0800317 	ldw	r2,12(fp)
81136bb4:	18801936 	bltu	r3,r2,81136c1c <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->max_stride < read_stride ||
81136bb8:	e13ff717 	ldw	r4,-36(fp)
81136bbc:	20801317 	ldw	r2,76(r4)
81136bc0:	20c01417 	ldw	r3,80(r4)
81136bc4:	e13ffe0b 	ldhu	r4,-8(fp)
81136bc8:	213fffcc 	andi	r4,r4,65535
81136bcc:	2015883a 	mov	r10,r4
81136bd0:	0017883a 	mov	r11,zero
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
81136bd4:	1ac01136 	bltu	r3,r11,81136c1c <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
81136bd8:	58c0011e 	bne	r11,r3,81136be0 <alt_msgdma_construct_prefetcher_extended_descriptor+0x84>
81136bdc:	12800f36 	bltu	r2,r10,81136c1c <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
81136be0:	e13ff717 	ldw	r4,-36(fp)
81136be4:	20801317 	ldw	r2,76(r4)
81136be8:	20c01417 	ldw	r3,80(r4)
81136bec:	e13fff0b 	ldhu	r4,-4(fp)
81136bf0:	213fffcc 	andi	r4,r4,65535
81136bf4:	2011883a 	mov	r8,r4
81136bf8:	0013883a 	mov	r9,zero
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
81136bfc:	1a400736 	bltu	r3,r9,81136c1c <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
81136c00:	48c0011e 	bne	r9,r3,81136c08 <alt_msgdma_construct_prefetcher_extended_descriptor+0xac>
81136c04:	12000536 	bltu	r2,r8,81136c1c <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
81136c08:	e0bff717 	ldw	r2,-36(fp)
81136c0c:	10801703 	ldbu	r2,92(r2)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
81136c10:	10803fcc 	andi	r2,r2,255
81136c14:	10800060 	cmpeqi	r2,r2,1
81136c18:	1000021e 	bne	r2,zero,81136c24 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc8>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
81136c1c:	00bffa84 	movi	r2,-22
81136c20:	00003106 	br	81136ce8 <alt_msgdma_construct_prefetcher_extended_descriptor+0x18c>
    }
    
    descriptor->read_address_high = read_address_high;
81136c24:	e0bff817 	ldw	r2,-32(fp)
81136c28:	e0fff917 	ldw	r3,-28(fp)
81136c2c:	10c00915 	stw	r3,36(r2)
    descriptor->read_address_low = read_address_low;
81136c30:	e0bff817 	ldw	r2,-32(fp)
81136c34:	e0fffa17 	ldw	r3,-24(fp)
81136c38:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_high = write_address_high;
81136c3c:	e0bff817 	ldw	r2,-32(fp)
81136c40:	e0c00117 	ldw	r3,4(fp)
81136c44:	10c00a15 	stw	r3,40(r2)
    descriptor->write_address_low = write_address_low;
81136c48:	e0bff817 	ldw	r2,-32(fp)
81136c4c:	e0c00217 	ldw	r3,8(fp)
81136c50:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
81136c54:	e0bff817 	ldw	r2,-32(fp)
81136c58:	e0c00317 	ldw	r3,12(fp)
81136c5c:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
81136c60:	e0bff817 	ldw	r2,-32(fp)
81136c64:	e0fffb0b 	ldhu	r3,-20(fp)
81136c68:	10c0070d 	sth	r3,28(r2)
    descriptor->read_burst_count = read_burst_count;
81136c6c:	e0bff817 	ldw	r2,-32(fp)
81136c70:	e0fffc03 	ldbu	r3,-16(fp)
81136c74:	10c00785 	stb	r3,30(r2)
    descriptor->write_burst_count = write_burst_count;
81136c78:	e0bff817 	ldw	r2,-32(fp)
81136c7c:	e0fffd03 	ldbu	r3,-12(fp)
81136c80:	10c007c5 	stb	r3,31(r2)
    descriptor->read_stride = read_stride;
81136c84:	e0bff817 	ldw	r2,-32(fp)
81136c88:	e0fffe0b 	ldhu	r3,-8(fp)
81136c8c:	10c0080d 	sth	r3,32(r2)
    descriptor->write_stride = write_stride;
81136c90:	e0bff817 	ldw	r2,-32(fp)
81136c94:	e0ffff0b 	ldhu	r3,-4(fp)
81136c98:	10c0088d 	sth	r3,34(r2)
    /* have descriptor point to itself */
	node_addr.u64 = (uintptr_t)descriptor;
81136c9c:	e0bff817 	ldw	r2,-32(fp)
81136ca0:	1019883a 	mov	r12,r2
81136ca4:	001b883a 	mov	r13,zero
81136ca8:	e33ff515 	stw	r12,-44(fp)
81136cac:	e37ff615 	stw	r13,-40(fp)
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
81136cb0:	e0fff517 	ldw	r3,-44(fp)
81136cb4:	e0bff817 	ldw	r2,-32(fp)
81136cb8:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
81136cbc:	e0fff617 	ldw	r3,-40(fp)
81136cc0:	e0bff817 	ldw	r2,-32(fp)
81136cc4:	10c00b15 	stw	r3,44(r2)
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
81136cc8:	e0c00417 	ldw	r3,16(fp)
81136ccc:	00900034 	movhi	r2,16384
81136cd0:	10bfffc4 	addi	r2,r2,-1
81136cd4:	1884703a 	and	r2,r3,r2
81136cd8:	10e00034 	orhi	r3,r2,32768
	node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
81136cdc:	e0bff817 	ldw	r2,-32(fp)
81136ce0:	10c00f15 	stw	r3,60(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
81136ce4:	0005883a 	mov	r2,zero
}
81136ce8:	e037883a 	mov	sp,fp
81136cec:	df000017 	ldw	fp,0(sp)
81136cf0:	dec00104 	addi	sp,sp,4
81136cf4:	f800283a 	ret

81136cf8 <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address,
	alt_u32 write_address,
	alt_u32 length,
	alt_u32 control)
{
81136cf8:	defff804 	addi	sp,sp,-32
81136cfc:	de00012e 	bgeu	sp,et,81136d04 <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor+0xc>
81136d00:	003b68fa 	trap	3
81136d04:	dfc00715 	stw	ra,28(sp)
81136d08:	df000615 	stw	fp,24(sp)
81136d0c:	df000604 	addi	fp,sp,24
81136d10:	e13ffc15 	stw	r4,-16(fp)
81136d14:	e17ffd15 	stw	r5,-12(fp)
81136d18:	e1bffe15 	stw	r6,-8(fp)
81136d1c:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
81136d20:	e0800317 	ldw	r2,12(fp)
81136d24:	d8800115 	stw	r2,4(sp)
81136d28:	e0800217 	ldw	r2,8(fp)
81136d2c:	d8800015 	stw	r2,0(sp)
81136d30:	e1ffff17 	ldw	r7,-4(fp)
81136d34:	e1bffe17 	ldw	r6,-8(fp)
81136d38:	e17ffd17 	ldw	r5,-12(fp)
81136d3c:	e13ffc17 	ldw	r4,-16(fp)
81136d40:	1136ab00 	call	81136ab0 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, write_address, length, control);
}
81136d44:	e037883a 	mov	sp,fp
81136d48:	dfc00117 	ldw	ra,4(sp)
81136d4c:	df000017 	ldw	fp,0(sp)
81136d50:	dec00204 	addi	sp,sp,8
81136d54:	f800283a 	ret

81136d58 <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
81136d58:	defff804 	addi	sp,sp,-32
81136d5c:	de00012e 	bgeu	sp,et,81136d64 <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor+0xc>
81136d60:	003b68fa 	trap	3
81136d64:	dfc00715 	stw	ra,28(sp)
81136d68:	df000615 	stw	fp,24(sp)
81136d6c:	df000604 	addi	fp,sp,24
81136d70:	e13ffc15 	stw	r4,-16(fp)
81136d74:	e17ffd15 	stw	r5,-12(fp)
81136d78:	e1bffe15 	stw	r6,-8(fp)
81136d7c:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
81136d80:	e0800217 	ldw	r2,8(fp)
81136d84:	d8800115 	stw	r2,4(sp)
81136d88:	e0bfff17 	ldw	r2,-4(fp)
81136d8c:	d8800015 	stw	r2,0(sp)
81136d90:	e1fffe17 	ldw	r7,-8(fp)
81136d94:	000d883a 	mov	r6,zero
81136d98:	e17ffd17 	ldw	r5,-12(fp)
81136d9c:	e13ffc17 	ldw	r4,-16(fp)
81136da0:	1136ab00 	call	81136ab0 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		0, write_address, length, control);
}
81136da4:	e037883a 	mov	sp,fp
81136da8:	dfc00117 	ldw	ra,4(sp)
81136dac:	df000017 	ldw	fp,0(sp)
81136db0:	dec00204 	addi	sp,sp,8
81136db4:	f800283a 	ret

81136db8 <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 read_address, 
	alt_u32 length, 
	alt_u32 control)
{
81136db8:	defff804 	addi	sp,sp,-32
81136dbc:	de00012e 	bgeu	sp,et,81136dc4 <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor+0xc>
81136dc0:	003b68fa 	trap	3
81136dc4:	dfc00715 	stw	ra,28(sp)
81136dc8:	df000615 	stw	fp,24(sp)
81136dcc:	df000604 	addi	fp,sp,24
81136dd0:	e13ffc15 	stw	r4,-16(fp)
81136dd4:	e17ffd15 	stw	r5,-12(fp)
81136dd8:	e1bffe15 	stw	r6,-8(fp)
81136ddc:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
81136de0:	e0800217 	ldw	r2,8(fp)
81136de4:	d8800115 	stw	r2,4(sp)
81136de8:	e0bfff17 	ldw	r2,-4(fp)
81136dec:	d8800015 	stw	r2,0(sp)
81136df0:	000f883a 	mov	r7,zero
81136df4:	e1bffe17 	ldw	r6,-8(fp)
81136df8:	e17ffd17 	ldw	r5,-12(fp)
81136dfc:	e13ffc17 	ldw	r4,-16(fp)
81136e00:	1136ab00 	call	81136ab0 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, 0, length, control);
}
81136e04:	e037883a 	mov	sp,fp
81136e08:	dfc00117 	ldw	ra,4(sp)
81136e0c:	df000017 	ldw	fp,0(sp)
81136e10:	dec00204 	addi	sp,sp,8
81136e14:	f800283a 	ret

81136e18 <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number,
	alt_u8 write_burst_count,
	alt_u16 write_stride)
{
81136e18:	deffee04 	addi	sp,sp,-72
81136e1c:	de00012e 	bgeu	sp,et,81136e24 <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor+0xc>
81136e20:	003b68fa 	trap	3
81136e24:	dfc01115 	stw	ra,68(sp)
81136e28:	df001015 	stw	fp,64(sp)
81136e2c:	df001004 	addi	fp,sp,64
81136e30:	e13ff915 	stw	r4,-28(fp)
81136e34:	e17ffa15 	stw	r5,-24(fp)
81136e38:	e1bffb15 	stw	r6,-20(fp)
81136e3c:	e1fffc15 	stw	r7,-16(fp)
81136e40:	e1000417 	ldw	r4,16(fp)
81136e44:	e0c00517 	ldw	r3,20(fp)
81136e48:	e0800617 	ldw	r2,24(fp)
81136e4c:	e13ffd0d 	sth	r4,-12(fp)
81136e50:	e0fffe05 	stb	r3,-8(fp)
81136e54:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor, 
81136e58:	e0bffd0b 	ldhu	r2,-12(fp)
81136e5c:	e0fffe03 	ldbu	r3,-8(fp)
81136e60:	e13fff0b 	ldhu	r4,-4(fp)
81136e64:	d9000815 	stw	r4,32(sp)
81136e68:	d8000715 	stw	zero,28(sp)
81136e6c:	d8c00615 	stw	r3,24(sp)
81136e70:	d8000515 	stw	zero,20(sp)
81136e74:	d8800415 	stw	r2,16(sp)
81136e78:	e0800317 	ldw	r2,12(fp)
81136e7c:	d8800315 	stw	r2,12(sp)
81136e80:	e0800217 	ldw	r2,8(fp)
81136e84:	d8800215 	stw	r2,8(sp)
81136e88:	e0bffc17 	ldw	r2,-16(fp)
81136e8c:	d8800115 	stw	r2,4(sp)
81136e90:	e0bffb17 	ldw	r2,-20(fp)
81136e94:	d8800015 	stw	r2,0(sp)
81136e98:	000f883a 	mov	r7,zero
81136e9c:	000d883a 	mov	r6,zero
81136ea0:	e17ffa17 	ldw	r5,-24(fp)
81136ea4:	e13ff917 	ldw	r4,-28(fp)
81136ea8:	1136b5c0 	call	81136b5c <alt_msgdma_construct_prefetcher_extended_descriptor>
            0, 0, write_address_high, write_address_low, length, control, 
			sequence_number, 0, write_burst_count, 0, write_stride);
}
81136eac:	e037883a 	mov	sp,fp
81136eb0:	dfc00117 	ldw	ra,4(sp)
81136eb4:	df000017 	ldw	fp,0(sp)
81136eb8:	dec00204 	addi	sp,sp,8
81136ebc:	f800283a 	ret

81136ec0 <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
81136ec0:	deffee04 	addi	sp,sp,-72
81136ec4:	de00012e 	bgeu	sp,et,81136ecc <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor+0xc>
81136ec8:	003b68fa 	trap	3
81136ecc:	dfc01115 	stw	ra,68(sp)
81136ed0:	df001015 	stw	fp,64(sp)
81136ed4:	df001004 	addi	fp,sp,64
81136ed8:	e13ff915 	stw	r4,-28(fp)
81136edc:	e17ffa15 	stw	r5,-24(fp)
81136ee0:	e1bffb15 	stw	r6,-20(fp)
81136ee4:	e1fffc15 	stw	r7,-16(fp)
81136ee8:	e1000417 	ldw	r4,16(fp)
81136eec:	e0c00517 	ldw	r3,20(fp)
81136ef0:	e0800617 	ldw	r2,24(fp)
81136ef4:	e13ffd0d 	sth	r4,-12(fp)
81136ef8:	e0fffe05 	stb	r3,-8(fp)
81136efc:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
81136f00:	e0bffd0b 	ldhu	r2,-12(fp)
81136f04:	e0fffe03 	ldbu	r3,-8(fp)
81136f08:	e13fff0b 	ldhu	r4,-4(fp)
81136f0c:	d8000815 	stw	zero,32(sp)
81136f10:	d9000715 	stw	r4,28(sp)
81136f14:	d8000615 	stw	zero,24(sp)
81136f18:	d8c00515 	stw	r3,20(sp)
81136f1c:	d8800415 	stw	r2,16(sp)
81136f20:	e0800317 	ldw	r2,12(fp)
81136f24:	d8800315 	stw	r2,12(sp)
81136f28:	e0800217 	ldw	r2,8(fp)
81136f2c:	d8800215 	stw	r2,8(sp)
81136f30:	d8000115 	stw	zero,4(sp)
81136f34:	d8000015 	stw	zero,0(sp)
81136f38:	e1fffc17 	ldw	r7,-16(fp)
81136f3c:	e1bffb17 	ldw	r6,-20(fp)
81136f40:	e17ffa17 	ldw	r5,-24(fp)
81136f44:	e13ff917 	ldw	r4,-28(fp)
81136f48:	1136b5c0 	call	81136b5c <alt_msgdma_construct_prefetcher_extended_descriptor>
    		read_address_high, read_address_low, 0, 0, length, control, 
			sequence_number, read_burst_count, 0, read_stride, 0);
}
81136f4c:	e037883a 	mov	sp,fp
81136f50:	dfc00117 	ldw	ra,4(sp)
81136f54:	df000017 	ldw	fp,0(sp)
81136f58:	dec00204 	addi	sp,sp,8
81136f5c:	f800283a 	ret

81136f60 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor>:
	alt_u16 sequence_number,
	alt_u8 read_burst_count,
	alt_u8 write_burst_count, 
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
81136f60:	deffec04 	addi	sp,sp,-80
81136f64:	de00012e 	bgeu	sp,et,81136f6c <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor+0xc>
81136f68:	003b68fa 	trap	3
81136f6c:	dfc01315 	stw	ra,76(sp)
81136f70:	df001215 	stw	fp,72(sp)
81136f74:	df001204 	addi	fp,sp,72
81136f78:	e13ff715 	stw	r4,-36(fp)
81136f7c:	e17ff815 	stw	r5,-32(fp)
81136f80:	e1bff915 	stw	r6,-28(fp)
81136f84:	e1fffa15 	stw	r7,-24(fp)
81136f88:	e1800617 	ldw	r6,24(fp)
81136f8c:	e1400717 	ldw	r5,28(fp)
81136f90:	e1000817 	ldw	r4,32(fp)
81136f94:	e0c00917 	ldw	r3,36(fp)
81136f98:	e0800a17 	ldw	r2,40(fp)
81136f9c:	e1bffb0d 	sth	r6,-20(fp)
81136fa0:	e17ffc05 	stb	r5,-16(fp)
81136fa4:	e13ffd05 	stb	r4,-12(fp)
81136fa8:	e0fffe0d 	sth	r3,-8(fp)
81136fac:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
81136fb0:	e0bffb0b 	ldhu	r2,-20(fp)
81136fb4:	e0fffc03 	ldbu	r3,-16(fp)
81136fb8:	e13ffd03 	ldbu	r4,-12(fp)
81136fbc:	e17ffe0b 	ldhu	r5,-8(fp)
81136fc0:	e1bfff0b 	ldhu	r6,-4(fp)
81136fc4:	d9800815 	stw	r6,32(sp)
81136fc8:	d9400715 	stw	r5,28(sp)
81136fcc:	d9000615 	stw	r4,24(sp)
81136fd0:	d8c00515 	stw	r3,20(sp)
81136fd4:	d8800415 	stw	r2,16(sp)
81136fd8:	e0800517 	ldw	r2,20(fp)
81136fdc:	d8800315 	stw	r2,12(sp)
81136fe0:	e0800417 	ldw	r2,16(fp)
81136fe4:	d8800215 	stw	r2,8(sp)
81136fe8:	e0800317 	ldw	r2,12(fp)
81136fec:	d8800115 	stw	r2,4(sp)
81136ff0:	e0800217 	ldw	r2,8(fp)
81136ff4:	d8800015 	stw	r2,0(sp)
81136ff8:	e1fffa17 	ldw	r7,-24(fp)
81136ffc:	e1bff917 	ldw	r6,-28(fp)
81137000:	e17ff817 	ldw	r5,-32(fp)
81137004:	e13ff717 	ldw	r4,-36(fp)
81137008:	1136b5c0 	call	81136b5c <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, write_address_high, 
			write_address_low, length, control, sequence_number, 
			read_burst_count, write_burst_count, read_stride, write_stride);

}
8113700c:	e037883a 	mov	sp,fp
81137010:	dfc00117 	ldw	ra,4(sp)
81137014:	df000017 	ldw	fp,0(sp)
81137018:	dec00204 	addi	sp,sp,8
8113701c:	f800283a 	ret

81137020 <alt_msgdma_prefetcher_add_standard_desc_to_list>:
 *           descriptor.next_ptr not pointing back to itslef)
 */
int alt_msgdma_prefetcher_add_standard_desc_to_list (
	alt_msgdma_prefetcher_standard_descriptor** list,
	alt_msgdma_prefetcher_standard_descriptor* descriptor)
{
81137020:	defffc04 	addi	sp,sp,-16
81137024:	de00012e 	bgeu	sp,et,8113702c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xc>
81137028:	003b68fa 	trap	3
8113702c:	df000315 	stw	fp,12(sp)
81137030:	df000304 	addi	fp,sp,12
81137034:	e13ffe15 	stw	r4,-8(fp)
81137038:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	
	if (descriptor == NULL)
8113703c:	e0bfff17 	ldw	r2,-4(fp)
81137040:	1000021e 	bne	r2,zero,8113704c <alt_msgdma_prefetcher_add_standard_desc_to_list+0x2c>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
81137044:	00bffa84 	movi	r2,-22
81137048:	00002f06 	br	81137108 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe8>
	}
	if (descriptor->next_desc_ptr != (alt_u32)descriptor)
8113704c:	e0bfff17 	ldw	r2,-4(fp)
81137050:	10c00317 	ldw	r3,12(r2)
81137054:	e0bfff17 	ldw	r2,-4(fp)
81137058:	18800226 	beq	r3,r2,81137064 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x44>
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
8113705c:	00bffa84 	movi	r2,-22
81137060:	00002906 	br	81137108 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe8>
	}
	if (*list == NULL)
81137064:	e0bffe17 	ldw	r2,-8(fp)
81137068:	10800017 	ldw	r2,0(r2)
8113706c:	1000051e 	bne	r2,zero,81137084 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x64>
	{
		*list = descriptor;  /* make this root-node if list is empty */
81137070:	e0bffe17 	ldw	r2,-8(fp)
81137074:	e0ffff17 	ldw	r3,-4(fp)
81137078:	10c00015 	stw	r3,0(r2)
		return 0;  /* successfully added */
8113707c:	0005883a 	mov	r2,zero
81137080:	00002106 	br	81137108 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe8>
	}
	if (*list == descriptor)
81137084:	e0bffe17 	ldw	r2,-8(fp)
81137088:	10c00017 	ldw	r3,0(r2)
8113708c:	e0bfff17 	ldw	r2,-4(fp)
81137090:	1880021e 	bne	r3,r2,8113709c <alt_msgdma_prefetcher_add_standard_desc_to_list+0x7c>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
81137094:	00bffa84 	movi	r2,-22
81137098:	00001b06 	br	81137108 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe8>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
8113709c:	e0bffe17 	ldw	r2,-8(fp)
811370a0:	10800017 	ldw	r2,0(r2)
811370a4:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
811370a8:	00000906 	br	811370d0 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xb0>
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
811370ac:	e0bffd17 	ldw	r2,-12(fp)
811370b0:	10c00317 	ldw	r3,12(r2)
811370b4:	e0bfff17 	ldw	r2,-4(fp)
811370b8:	1880021e 	bne	r3,r2,811370c4 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xa4>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
811370bc:	00bffa84 	movi	r2,-22
811370c0:	00001106 	br	81137108 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe8>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
811370c4:	e0bffd17 	ldw	r2,-12(fp)
811370c8:	10800317 	ldw	r2,12(r2)
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		last_descr_ptr = 
811370cc:	e0bffd15 	stw	r2,-12(fp)
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
811370d0:	e0bffd17 	ldw	r2,-12(fp)
811370d4:	10800317 	ldw	r2,12(r2)
811370d8:	e0fffe17 	ldw	r3,-8(fp)
811370dc:	18c00017 	ldw	r3,0(r3)
811370e0:	10fff21e 	bne	r2,r3,811370ac <__reset+0xfb1170ac>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* add this descriptor to end of list */
	last_descr_ptr->next_desc_ptr = (alt_u32)((uintptr_t)descriptor);
811370e4:	e0ffff17 	ldw	r3,-4(fp)
811370e8:	e0bffd17 	ldw	r2,-12(fp)
811370ec:	10c00315 	stw	r3,12(r2)
	/* ensure new last pointer points the start of the list */
	descriptor->next_desc_ptr = (alt_u32)((uintptr_t)*list);  
811370f0:	e0bffe17 	ldw	r2,-8(fp)
811370f4:	10800017 	ldw	r2,0(r2)
811370f8:	1007883a 	mov	r3,r2
811370fc:	e0bfff17 	ldw	r2,-4(fp)
81137100:	10c00315 	stw	r3,12(r2)
	return 0; /* successfully added */
81137104:	0005883a 	mov	r2,zero
}
81137108:	e037883a 	mov	sp,fp
8113710c:	df000017 	ldw	fp,0(sp)
81137110:	dec00104 	addi	sp,sp,4
81137114:	f800283a 	ret

81137118 <alt_msgdma_prefetcher_add_extended_desc_to_list>:

int alt_msgdma_prefetcher_add_extended_desc_to_list (
	alt_msgdma_prefetcher_extended_descriptor** list,
	alt_msgdma_prefetcher_extended_descriptor* descriptor)
{
81137118:	defff804 	addi	sp,sp,-32
8113711c:	de00012e 	bgeu	sp,et,81137124 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xc>
81137120:	003b68fa 	trap	3
81137124:	df000715 	stw	fp,28(sp)
81137128:	df000704 	addi	fp,sp,28
8113712c:	e13ffe15 	stw	r4,-8(fp)
81137130:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	msgdma_addr64 root_node_addr, next_node_addr;
	
	if (descriptor == NULL)
81137134:	e13fff17 	ldw	r4,-4(fp)
81137138:	2000021e 	bne	r4,zero,81137144 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x2c>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
8113713c:	00bffa84 	movi	r2,-22
81137140:	00005906 	br	811372a8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x190>
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
81137144:	e13fff17 	ldw	r4,-4(fp)
81137148:	2015883a 	mov	r10,r4
8113714c:	0017883a 	mov	r11,zero
81137150:	e2bffc15 	stw	r10,-16(fp)
81137154:	e2fffd15 	stw	r11,-12(fp)
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
81137158:	e13fff17 	ldw	r4,-4(fp)
8113715c:	21400317 	ldw	r5,12(r4)
81137160:	e13ffc17 	ldw	r4,-16(fp)
81137164:	29000626 	beq	r5,r4,81137180 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x68>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
81137168:	e13fff17 	ldw	r4,-4(fp)
8113716c:	21400b17 	ldw	r5,44(r4)
81137170:	e13ffd17 	ldw	r4,-12(fp)
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
81137174:	29000226 	beq	r5,r4,81137180 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x68>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
81137178:	00bffa84 	movi	r2,-22
8113717c:	00004a06 	br	811372a8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x190>
	}
	
	if (*list == NULL)
81137180:	e13ffe17 	ldw	r4,-8(fp)
81137184:	21000017 	ldw	r4,0(r4)
81137188:	2000051e 	bne	r4,zero,811371a0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x88>
	{
		*list = descriptor;  /* make this the root-node if list is empty */
8113718c:	e0bffe17 	ldw	r2,-8(fp)
81137190:	e0ffff17 	ldw	r3,-4(fp)
81137194:	10c00015 	stw	r3,0(r2)
		return 0;
81137198:	0005883a 	mov	r2,zero
8113719c:	00004206 	br	811372a8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x190>
	}
	if (*list == descriptor)
811371a0:	e13ffe17 	ldw	r4,-8(fp)
811371a4:	21400017 	ldw	r5,0(r4)
811371a8:	e13fff17 	ldw	r4,-4(fp)
811371ac:	2900021e 	bne	r5,r4,811371b8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xa0>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
811371b0:	00bffa84 	movi	r2,-22
811371b4:	00003c06 	br	811372a8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x190>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
811371b8:	e13ffe17 	ldw	r4,-8(fp)
811371bc:	21000017 	ldw	r4,0(r4)
811371c0:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
811371c4:	e13ffe17 	ldw	r4,-8(fp)
811371c8:	21000017 	ldw	r4,0(r4)
811371cc:	2011883a 	mov	r8,r4
811371d0:	0013883a 	mov	r9,zero
811371d4:	e23ffa15 	stw	r8,-24(fp)
811371d8:	e27ffb15 	stw	r9,-20(fp)
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
811371dc:	00001806 	br	81137240 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x128>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* first check if descriptor already in the list */
		next_node_addr.u64 = (uintptr_t)descriptor;
811371e0:	e13fff17 	ldw	r4,-4(fp)
811371e4:	200d883a 	mov	r6,r4
811371e8:	000f883a 	mov	r7,zero
811371ec:	e1bffc15 	stw	r6,-16(fp)
811371f0:	e1fffd15 	stw	r7,-12(fp)
		if ((last_descr_ptr->next_desc_ptr_low == next_node_addr.u32[0])
811371f4:	e13ff917 	ldw	r4,-28(fp)
811371f8:	21400317 	ldw	r5,12(r4)
811371fc:	e13ffc17 	ldw	r4,-16(fp)
81137200:	2900061e 	bne	r5,r4,8113721c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x104>
			&& (last_descr_ptr->next_desc_ptr_high == next_node_addr.u32[1]))
81137204:	e13ff917 	ldw	r4,-28(fp)
81137208:	21400b17 	ldw	r5,44(r4)
8113720c:	e13ffd17 	ldw	r4,-12(fp)
81137210:	2900021e 	bne	r5,r4,8113721c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x104>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
81137214:	00bffa84 	movi	r2,-22
81137218:	00002306 	br	811372a8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x190>
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
8113721c:	e13ff917 	ldw	r4,-28(fp)
81137220:	21000317 	ldw	r4,12(r4)
81137224:	e13ffc15 	stw	r4,-16(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
81137228:	e13ff917 	ldw	r4,-28(fp)
8113722c:	21000b17 	ldw	r4,44(r4)
81137230:	e13ffd15 	stw	r4,-12(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
81137234:	e13ffc17 	ldw	r4,-16(fp)
81137238:	e17ffd17 	ldw	r5,-12(fp)
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
8113723c:	e13ff915 	stw	r4,-28(fp)
	last_descr_ptr = *list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
81137240:	e13ff917 	ldw	r4,-28(fp)
81137244:	21400317 	ldw	r5,12(r4)
81137248:	e13ffa17 	ldw	r4,-24(fp)
8113724c:	29000426 	beq	r5,r4,81137260 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x148>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
81137250:	e13ff917 	ldw	r4,-28(fp)
81137254:	21400b17 	ldw	r5,44(r4)
81137258:	e13ffb17 	ldw	r4,-20(fp)
8113725c:	293fe01e 	bne	r5,r4,811371e0 <__reset+0xfb1171e0>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* add this descriptor to end of list */
	next_node_addr.u64 = (uintptr_t)descriptor;
81137260:	e13fff17 	ldw	r4,-4(fp)
81137264:	2005883a 	mov	r2,r4
81137268:	0007883a 	mov	r3,zero
8113726c:	e0bffc15 	stw	r2,-16(fp)
81137270:	e0fffd15 	stw	r3,-12(fp)
	last_descr_ptr->next_desc_ptr_low = next_node_addr.u32[0];
81137274:	e0fffc17 	ldw	r3,-16(fp)
81137278:	e0bff917 	ldw	r2,-28(fp)
8113727c:	10c00315 	stw	r3,12(r2)
	last_descr_ptr->next_desc_ptr_high = next_node_addr.u32[1];
81137280:	e0fffd17 	ldw	r3,-12(fp)
81137284:	e0bff917 	ldw	r2,-28(fp)
81137288:	10c00b15 	stw	r3,44(r2)
	/* ensure new last pointer points the beginning of the list */
	descriptor->next_desc_ptr_low = root_node_addr.u32[0];
8113728c:	e0fffa17 	ldw	r3,-24(fp)
81137290:	e0bfff17 	ldw	r2,-4(fp)
81137294:	10c00315 	stw	r3,12(r2)
	descriptor->next_desc_ptr_high = root_node_addr.u32[1];
81137298:	e0fffb17 	ldw	r3,-20(fp)
8113729c:	e0bfff17 	ldw	r2,-4(fp)
811372a0:	10c00b15 	stw	r3,44(r2)
	return 0;
811372a4:	0005883a 	mov	r2,zero
}
811372a8:	e037883a 	mov	sp,fp
811372ac:	df000017 	ldw	fp,0(sp)
811372b0:	dec00104 	addi	sp,sp,4
811372b4:	f800283a 	ret

811372b8 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_std_list_own_by_hw_bits (
	alt_msgdma_prefetcher_standard_descriptor *list)
{
811372b8:	defffc04 	addi	sp,sp,-16
811372bc:	de00012e 	bgeu	sp,et,811372c4 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xc>
811372c0:	003b68fa 	trap	3
811372c4:	df000315 	stw	fp,12(sp)
811372c8:	df000304 	addi	fp,sp,12
811372cc:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
811372d0:	e03ffe15 	stw	zero,-8(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	if (list == NULL)
811372d4:	e0bfff17 	ldw	r2,-4(fp)
811372d8:	1000021e 	bne	r2,zero,811372e4 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x2c>
	{
		return -EINVAL;  /* this list cannot be empty */
811372dc:	00bffa84 	movi	r2,-22
811372e0:	00001906 	br	81137348 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x90>
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
811372e4:	e0bfff17 	ldw	r2,-4(fp)
811372e8:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
811372ec:	00000a06 	br	81137318 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x60>
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
811372f0:	e0bffd17 	ldw	r2,-12(fp)
811372f4:	10800717 	ldw	r2,28(r2)
811372f8:	e0bffe15 	stw	r2,-8(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
811372fc:	e0bffe17 	ldw	r2,-8(fp)
81137300:	10d00034 	orhi	r3,r2,16384
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
81137304:	e0bffd17 	ldw	r2,-12(fp)
81137308:	10c00715 	stw	r3,28(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
8113730c:	e0bffd17 	ldw	r2,-12(fp)
81137310:	10800317 	ldw	r2,12(r2)
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
81137314:	e0bffd15 	stw	r2,-12(fp)
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
81137318:	e0bffd17 	ldw	r2,-12(fp)
8113731c:	10c00317 	ldw	r3,12(r2)
81137320:	e0bfff17 	ldw	r2,-4(fp)
81137324:	18bff21e 	bne	r3,r2,811372f0 <__reset+0xfb1172f0>
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
81137328:	e0bffd17 	ldw	r2,-12(fp)
8113732c:	10800717 	ldw	r2,28(r2)
81137330:	e0bffe15 	stw	r2,-8(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
81137334:	e0bffe17 	ldw	r2,-8(fp)
81137338:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
8113733c:	e0bffd17 	ldw	r2,-12(fp)
81137340:	10c00715 	stw	r3,28(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	
	return 0;
81137344:	0005883a 	mov	r2,zero
}
81137348:	e037883a 	mov	sp,fp
8113734c:	df000017 	ldw	fp,0(sp)
81137350:	dec00104 	addi	sp,sp,4
81137354:	f800283a 	ret

81137358 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits (
	alt_msgdma_prefetcher_extended_descriptor *list)
{
81137358:	defff804 	addi	sp,sp,-32
8113735c:	de00012e 	bgeu	sp,et,81137364 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xc>
81137360:	003b68fa 	trap	3
81137364:	df000715 	stw	fp,28(sp)
81137368:	df000704 	addi	fp,sp,28
8113736c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
81137370:	e03ffa15 	stw	zero,-24(fp)
	msgdma_addr64 root_node_addr, next_node_addr;
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	
	if (list == NULL)
81137374:	e13fff17 	ldw	r4,-4(fp)
81137378:	2000021e 	bne	r4,zero,81137384 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x2c>
	{
		return -EINVAL;  /* this list cannot be empty */
8113737c:	00bffa84 	movi	r2,-22
81137380:	00002806 	br	81137424 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xcc>
	}
	
	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
81137384:	e13fff17 	ldw	r4,-4(fp)
81137388:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;
8113738c:	e13fff17 	ldw	r4,-4(fp)
81137390:	2005883a 	mov	r2,r4
81137394:	0007883a 	mov	r3,zero
81137398:	e0bffb15 	stw	r2,-20(fp)
8113739c:	e0fffc15 	stw	r3,-16(fp)

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
811373a0:	00001006 	br	811373e4 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x8c>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
811373a4:	e0bff917 	ldw	r2,-28(fp)
811373a8:	10800f17 	ldw	r2,60(r2)
811373ac:	e0bffa15 	stw	r2,-24(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
811373b0:	e0bffa17 	ldw	r2,-24(fp)
811373b4:	10d00034 	orhi	r3,r2,16384
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
811373b8:	e0bff917 	ldw	r2,-28(fp)
811373bc:	10c00f15 	stw	r3,60(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
811373c0:	e0bff917 	ldw	r2,-28(fp)
811373c4:	10800317 	ldw	r2,12(r2)
811373c8:	e0bffd15 	stw	r2,-12(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
811373cc:	e0bff917 	ldw	r2,-28(fp)
811373d0:	10800b17 	ldw	r2,44(r2)
811373d4:	e0bffe15 	stw	r2,-8(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
811373d8:	e0bffd17 	ldw	r2,-12(fp)
811373dc:	e0fffe17 	ldw	r3,-8(fp)
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
811373e0:	e0bff915 	stw	r2,-28(fp)
	last_descr_ptr = list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
811373e4:	e0bff917 	ldw	r2,-28(fp)
811373e8:	10c00317 	ldw	r3,12(r2)
811373ec:	e0bffb17 	ldw	r2,-20(fp)
811373f0:	18800426 	beq	r3,r2,81137404 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xac>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
811373f4:	e0bff917 	ldw	r2,-28(fp)
811373f8:	10c00b17 	ldw	r3,44(r2)
811373fc:	e0bffc17 	ldw	r2,-16(fp)
81137400:	18bfe81e 	bne	r3,r2,811373a4 <__reset+0xfb1173a4>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
81137404:	e0bff917 	ldw	r2,-28(fp)
81137408:	10800f17 	ldw	r2,60(r2)
8113740c:	e0bffa15 	stw	r2,-24(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
81137410:	e0bffa17 	ldw	r2,-24(fp)
81137414:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
81137418:	e0bff917 	ldw	r2,-28(fp)
8113741c:	10c00f15 	stw	r3,60(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	return 0;
81137420:	0005883a 	mov	r2,zero
}
81137424:	e037883a 	mov	sp,fp
81137428:	df000017 	ldw	fp,0(sp)
8113742c:	dec00104 	addi	sp,sp,4
81137430:	f800283a 	ret

81137434 <alt_msgdma_start_prefetcher_with_list_addr>:
int alt_msgdma_start_prefetcher_with_list_addr (
	alt_msgdma_dev *dev,
	alt_u64  list_addr,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
81137434:	deffeb04 	addi	sp,sp,-84
81137438:	de00012e 	bgeu	sp,et,81137440 <alt_msgdma_start_prefetcher_with_list_addr+0xc>
8113743c:	003b68fa 	trap	3
81137440:	dfc01415 	stw	ra,80(sp)
81137444:	df001315 	stw	fp,76(sp)
81137448:	df001304 	addi	fp,sp,76
8113744c:	e13ffb15 	stw	r4,-20(fp)
81137450:	e17ffc15 	stw	r5,-16(fp)
81137454:	e1bffd15 	stw	r6,-12(fp)
81137458:	3807883a 	mov	r3,r7
8113745c:	e0800217 	ldw	r2,8(fp)
81137460:	e0fffe05 	stb	r3,-8(fp)
81137464:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 prefetcher_ctl = 0;
81137468:	e03fed15 	stw	zero,-76(fp)
	alt_u32 dispatcher_ctl = 0;
8113746c:	e03fee15 	stw	zero,-72(fp)
	alt_irq_context context = 0;
81137470:	e03fef15 	stw	zero,-68(fp)
	
	/* use helper struct to get easy access to hi/low address */
	msgdma_addr64 root_node_addr;
	root_node_addr.u64 = list_addr;  
81137474:	e0bffc17 	ldw	r2,-16(fp)
81137478:	e0bff815 	stw	r2,-32(fp)
8113747c:	e0bffd17 	ldw	r2,-12(fp)
81137480:	e0bff915 	stw	r2,-28(fp)
	
	/*
	 * When running in a multi threaded environment, obtain the "regs_lock"
	 * semaphore. This ensures that accessing registers is thread-safe.
	 */
	ALT_SEM_PEND (dev->regs_lock, 0);
81137484:	e0bffb17 	ldw	r2,-20(fp)
81137488:	10801817 	ldw	r2,96(r2)
8113748c:	e0bff615 	stw	r2,-40(fp)
81137490:	e03ff70d 	sth	zero,-36(fp)
81137494:	e0bff70b 	ldhu	r2,-36(fp)
81137498:	e0fffa04 	addi	r3,fp,-24
8113749c:	180d883a 	mov	r6,r3
811374a0:	100b883a 	mov	r5,r2
811374a4:	e13ff617 	ldw	r4,-40(fp)
811374a8:	112b8400 	call	8112b840 <OSSemPend>
	
	/* case where prefetcher already started, return busy error */ 
	prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
811374ac:	e0bffb17 	ldw	r2,-20(fp)
811374b0:	10800617 	ldw	r2,24(r2)
811374b4:	10800037 	ldwio	r2,0(r2)
811374b8:	e0bfed15 	stw	r2,-76(fp)
	if(ALT_MSGDMA_PREFETCHER_CTRL_RUN_GET(prefetcher_ctl)){
811374bc:	e0bfed17 	ldw	r2,-76(fp)
811374c0:	1080004c 	andi	r2,r2,1
811374c4:	10000626 	beq	r2,zero,811374e0 <alt_msgdma_start_prefetcher_with_list_addr+0xac>
		/* release the registers semaphore */
		ALT_SEM_POST (dev->regs_lock);
811374c8:	e0bffb17 	ldw	r2,-20(fp)
811374cc:	10801817 	ldw	r2,96(r2)
811374d0:	1009883a 	mov	r4,r2
811374d4:	112bbc80 	call	8112bbc8 <OSSemPost>
		return -EBUSY;
811374d8:	00bffc04 	movi	r2,-16
811374dc:	00009606 	br	81137738 <alt_msgdma_start_prefetcher_with_list_addr+0x304>
	}
		
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	   read or write masters  */
	/* stop issuing more descriptors */
	dispatcher_ctl = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
811374e0:	00800804 	movi	r2,32
811374e4:	e0bfee15 	stw	r2,-72(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811374e8:	0005303a 	rdctl	r2,status
811374ec:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811374f0:	e0fff217 	ldw	r3,-56(fp)
811374f4:	00bfff84 	movi	r2,-2
811374f8:	1884703a 	and	r2,r3,r2
811374fc:	1001703a 	wrctl	status,r2
  
  return context;
81137500:	e0bff217 	ldw	r2,-56(fp)
	
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
81137504:	e0bfef15 	stw	r2,-68(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
81137508:	e0bffb17 	ldw	r2,-20(fp)
8113750c:	10800317 	ldw	r2,12(r2)
81137510:	10800104 	addi	r2,r2,4
81137514:	e0ffee17 	ldw	r3,-72(fp)
81137518:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS( dev->csr_base, 
8113751c:	e0bffb17 	ldw	r2,-20(fp)
81137520:	10800317 	ldw	r2,12(r2)
81137524:	e0fffb17 	ldw	r3,-20(fp)
81137528:	18c00317 	ldw	r3,12(r3)
8113752c:	18c00037 	ldwio	r3,0(r3)
81137530:	10c00035 	stwio	r3,0(r2)
81137534:	e0bfef17 	ldw	r2,-68(fp)
81137538:	e0bff015 	stw	r2,-64(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113753c:	e0bff017 	ldw	r2,-64(fp)
81137540:	1001703a 	wrctl	status,r2
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up dispatcher to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if(dev->callback)
81137544:	e0bffb17 	ldw	r2,-20(fp)
81137548:	10800b17 	ldw	r2,44(r2)
8113754c:	10002326 	beq	r2,zero,811375dc <alt_msgdma_start_prefetcher_with_list_addr+0x1a8>
	{
		dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
81137550:	e0bffb17 	ldw	r2,-20(fp)
81137554:	10c00d17 	ldw	r3,52(r2)
81137558:	e0bfee17 	ldw	r2,-72(fp)
8113755c:	1884b03a 	or	r2,r3,r2
81137560:	10800514 	ori	r2,r2,20
81137564:	e0bfee15 	stw	r2,-72(fp)
				| ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
		dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
81137568:	e0ffee17 	ldw	r3,-72(fp)
8113756c:	00bff7c4 	movi	r2,-33
81137570:	1884703a 	and	r2,r3,r2
81137574:	e0bfee15 	stw	r2,-72(fp)
		
		prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
81137578:	e0bfed17 	ldw	r2,-76(fp)
8113757c:	10800214 	ori	r2,r2,8
81137580:	e0bfed15 	stw	r2,-76(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81137584:	0005303a 	rdctl	r2,status
81137588:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113758c:	e0fff417 	ldw	r3,-48(fp)
81137590:	00bfff84 	movi	r2,-2
81137594:	1884703a 	and	r2,r3,r2
81137598:	1001703a 	wrctl	status,r2
  
  return context;
8113759c:	e0bff417 	ldw	r2,-48(fp)
	    /* making sure the read-modify-write below can't be pre-empted */
	    context = alt_irq_disable_all(); 
811375a0:	e0bfef15 	stw	r2,-68(fp)
	    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
811375a4:	e0bffb17 	ldw	r2,-20(fp)
811375a8:	10800317 	ldw	r2,12(r2)
811375ac:	10800104 	addi	r2,r2,4
811375b0:	e0ffee17 	ldw	r3,-72(fp)
811375b4:	10c00035 	stwio	r3,0(r2)
		IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
811375b8:	e0bffb17 	ldw	r2,-20(fp)
811375bc:	10800617 	ldw	r2,24(r2)
811375c0:	e0ffed17 	ldw	r3,-76(fp)
811375c4:	10c00035 	stwio	r3,0(r2)
811375c8:	e0bfef17 	ldw	r2,-68(fp)
811375cc:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811375d0:	e0bff117 	ldw	r2,-60(fp)
811375d4:	1001703a 	wrctl	status,r2
811375d8:	00002306 	br	81137668 <alt_msgdma_start_prefetcher_with_list_addr+0x234>
	  *   - Stop on an error with any particular descriptor
	  *   - Disable interrupt generation
	  */
	 else
	 {
		 dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
811375dc:	e0bffb17 	ldw	r2,-20(fp)
811375e0:	10c00d17 	ldw	r3,52(r2)
811375e4:	e0bfee17 	ldw	r2,-72(fp)
811375e8:	1884b03a 	or	r2,r3,r2
811375ec:	10800114 	ori	r2,r2,4
811375f0:	e0bfee15 	stw	r2,-72(fp)
		 dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
811375f4:	e0ffee17 	ldw	r3,-72(fp)
811375f8:	00bff3c4 	movi	r2,-49
811375fc:	1884703a 	and	r2,r3,r2
81137600:	e0bfee15 	stw	r2,-72(fp)
				 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
81137604:	e0ffed17 	ldw	r3,-76(fp)
81137608:	00bffdc4 	movi	r2,-9
8113760c:	1884703a 	and	r2,r3,r2
81137610:	e0bfed15 	stw	r2,-76(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81137614:	0005303a 	rdctl	r2,status
81137618:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113761c:	e0fff517 	ldw	r3,-44(fp)
81137620:	00bfff84 	movi	r2,-2
81137624:	1884703a 	and	r2,r3,r2
81137628:	1001703a 	wrctl	status,r2
  
  return context;
8113762c:	e0bff517 	ldw	r2,-44(fp)
	     /* making sure the read-modify-write below can't be pre-empted */
	     context = alt_irq_disable_all();
81137630:	e0bfef15 	stw	r2,-68(fp)
	     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
81137634:	e0bffb17 	ldw	r2,-20(fp)
81137638:	10800317 	ldw	r2,12(r2)
8113763c:	10800104 	addi	r2,r2,4
81137640:	e0ffee17 	ldw	r3,-72(fp)
81137644:	10c00035 	stwio	r3,0(r2)
	     IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
81137648:	e0bffb17 	ldw	r2,-20(fp)
8113764c:	10800617 	ldw	r2,24(r2)
81137650:	e0ffed17 	ldw	r3,-76(fp)
81137654:	10c00035 	stwio	r3,0(r2)
81137658:	e0bfef17 	ldw	r2,-68(fp)
8113765c:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81137660:	e0bff317 	ldw	r2,-52(fp)
81137664:	1001703a 	wrctl	status,r2
	     alt_irq_enable_all(context);
	 }   
	
	 /* set next descriptor registers to point to the list root-node */
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_LOW(dev->prefetcher_base,
81137668:	e0bffb17 	ldw	r2,-20(fp)
8113766c:	10800617 	ldw	r2,24(r2)
81137670:	10800104 	addi	r2,r2,4
81137674:	e0fff817 	ldw	r3,-32(fp)
81137678:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[0]);
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_HIGH(dev->prefetcher_base,
8113767c:	e0bffb17 	ldw	r2,-20(fp)
81137680:	10800617 	ldw	r2,24(r2)
81137684:	10800204 	addi	r2,r2,8
81137688:	e0fff917 	ldw	r3,-28(fp)
8113768c:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[1]);
		
	 /* set park-mode */
	 if (park_mode_en){
81137690:	e0bffe03 	ldbu	r2,-8(fp)
81137694:	10000426 	beq	r2,zero,811376a8 <alt_msgdma_start_prefetcher_with_list_addr+0x274>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
81137698:	e0bfed17 	ldw	r2,-76(fp)
8113769c:	10800414 	ori	r2,r2,16
811376a0:	e0bfed15 	stw	r2,-76(fp)
811376a4:	00000406 	br	811376b8 <alt_msgdma_start_prefetcher_with_list_addr+0x284>
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
811376a8:	e0ffed17 	ldw	r3,-76(fp)
811376ac:	00bffbc4 	movi	r2,-17
811376b0:	1884703a 	and	r2,r3,r2
811376b4:	e0bfed15 	stw	r2,-76(fp)
	 }
	 
	 /* set poll-en */
	 if (poll_en){
811376b8:	e0bfff03 	ldbu	r2,-4(fp)
811376bc:	10000e26 	beq	r2,zero,811376f8 <alt_msgdma_start_prefetcher_with_list_addr+0x2c4>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
811376c0:	e0bfed17 	ldw	r2,-76(fp)
811376c4:	10800094 	ori	r2,r2,2
811376c8:	e0bfed15 	stw	r2,-76(fp)
		 if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
811376cc:	e0bffb17 	ldw	r2,-20(fp)
811376d0:	10800617 	ldw	r2,24(r2)
811376d4:	10800304 	addi	r2,r2,12
811376d8:	10800037 	ldwio	r2,0(r2)
811376dc:	10000a1e 	bne	r2,zero,81137708 <alt_msgdma_start_prefetcher_with_list_addr+0x2d4>
				 dev->prefetcher_base) == 0){
			 /* set poll frequency to some non-zero default value */
			 IOWR_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
811376e0:	e0bffb17 	ldw	r2,-20(fp)
811376e4:	10800617 	ldw	r2,24(r2)
811376e8:	10800304 	addi	r2,r2,12
811376ec:	00c03fc4 	movi	r3,255
811376f0:	10c00035 	stwio	r3,0(r2)
811376f4:	00000406 	br	81137708 <alt_msgdma_start_prefetcher_with_list_addr+0x2d4>
					 dev->prefetcher_base, 0xFF);
		 }
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_CLR_MASK; 
811376f8:	e0ffed17 	ldw	r3,-76(fp)
811376fc:	00bfff44 	movi	r2,-3
81137700:	1884703a 	and	r2,r3,r2
81137704:	e0bfed15 	stw	r2,-76(fp)
	 }
	 
	 /* set the prefetcher run bit */
	 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_RUN_SET_MASK;
81137708:	e0bfed17 	ldw	r2,-76(fp)
8113770c:	10800054 	ori	r2,r2,1
81137710:	e0bfed15 	stw	r2,-76(fp)
	 /* start the dma since run bit is set */
	 IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
81137714:	e0bffb17 	ldw	r2,-20(fp)
81137718:	10800617 	ldw	r2,24(r2)
8113771c:	e0ffed17 	ldw	r3,-76(fp)
81137720:	10c00035 	stwio	r3,0(r2)
	 
	 /*
	  * Now that access to the registers is complete, release the registers
	  * semaphore so that other threads can access the registers.
	  */
	 ALT_SEM_POST (dev->regs_lock);
81137724:	e0bffb17 	ldw	r2,-20(fp)
81137728:	10801817 	ldw	r2,96(r2)
8113772c:	1009883a 	mov	r4,r2
81137730:	112bbc80 	call	8112bbc8 <OSSemPost>
	 
	 return 0;
81137734:	0005883a 	mov	r2,zero
}
81137738:	e037883a 	mov	sp,fp
8113773c:	dfc00117 	ldw	ra,4(sp)
81137740:	df000017 	ldw	fp,0(sp)
81137744:	dec00204 	addi	sp,sp,8
81137748:	f800283a 	ret

8113774c <alt_msgdma_start_prefetcher_with_std_desc_list>:
int alt_msgdma_start_prefetcher_with_std_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{	
8113774c:	defff704 	addi	sp,sp,-36
81137750:	de00012e 	bgeu	sp,et,81137758 <alt_msgdma_start_prefetcher_with_std_desc_list+0xc>
81137754:	003b68fa 	trap	3
81137758:	dfc00815 	stw	ra,32(sp)
8113775c:	df000715 	stw	fp,28(sp)
81137760:	dc400615 	stw	r17,24(sp)
81137764:	dc000515 	stw	r16,20(sp)
81137768:	df000704 	addi	fp,sp,28
8113776c:	e13ffa15 	stw	r4,-24(fp)
81137770:	e17ffb15 	stw	r5,-20(fp)
81137774:	3007883a 	mov	r3,r6
81137778:	3805883a 	mov	r2,r7
8113777c:	e0fffc05 	stb	r3,-16(fp)
81137780:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_std_list_own_by_hw_bits(list) != 0){
81137784:	e13ffb17 	ldw	r4,-20(fp)
81137788:	11372b80 	call	811372b8 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>
8113778c:	10000226 	beq	r2,zero,81137798 <alt_msgdma_start_prefetcher_with_std_desc_list+0x4c>
		return -EINVAL;
81137790:	00bffa84 	movi	r2,-22
81137794:	00000b06 	br	811377c4 <alt_msgdma_start_prefetcher_with_std_desc_list+0x78>
	}
	
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list,
81137798:	e0bffb17 	ldw	r2,-20(fp)
8113779c:	1021883a 	mov	r16,r2
811377a0:	0023883a 	mov	r17,zero
811377a4:	e0fffc03 	ldbu	r3,-16(fp)
811377a8:	e0bffd03 	ldbu	r2,-12(fp)
811377ac:	d8800015 	stw	r2,0(sp)
811377b0:	180f883a 	mov	r7,r3
811377b4:	800b883a 	mov	r5,r16
811377b8:	880d883a 	mov	r6,r17
811377bc:	e13ffa17 	ldw	r4,-24(fp)
811377c0:	11374340 	call	81137434 <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
811377c4:	e6fffe04 	addi	sp,fp,-8
811377c8:	dfc00317 	ldw	ra,12(sp)
811377cc:	df000217 	ldw	fp,8(sp)
811377d0:	dc400117 	ldw	r17,4(sp)
811377d4:	dc000017 	ldw	r16,0(sp)
811377d8:	dec00404 	addi	sp,sp,16
811377dc:	f800283a 	ret

811377e0 <alt_msgdma_start_prefetcher_with_extd_desc_list>:
int alt_msgdma_start_prefetcher_with_extd_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_extended_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
811377e0:	defff704 	addi	sp,sp,-36
811377e4:	de00012e 	bgeu	sp,et,811377ec <alt_msgdma_start_prefetcher_with_extd_desc_list+0xc>
811377e8:	003b68fa 	trap	3
811377ec:	dfc00815 	stw	ra,32(sp)
811377f0:	df000715 	stw	fp,28(sp)
811377f4:	dc400615 	stw	r17,24(sp)
811377f8:	dc000515 	stw	r16,20(sp)
811377fc:	df000704 	addi	fp,sp,28
81137800:	e13ffa15 	stw	r4,-24(fp)
81137804:	e17ffb15 	stw	r5,-20(fp)
81137808:	3007883a 	mov	r3,r6
8113780c:	3805883a 	mov	r2,r7
81137810:	e0fffc05 	stb	r3,-16(fp)
81137814:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits(list) != 0){
81137818:	e13ffb17 	ldw	r4,-20(fp)
8113781c:	11373580 	call	81137358 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>
81137820:	10000226 	beq	r2,zero,8113782c <alt_msgdma_start_prefetcher_with_extd_desc_list+0x4c>
		return -EINVAL;
81137824:	00bffa84 	movi	r2,-22
81137828:	00000b06 	br	81137858 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x78>
	}
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list, 
8113782c:	e0bffb17 	ldw	r2,-20(fp)
81137830:	1021883a 	mov	r16,r2
81137834:	0023883a 	mov	r17,zero
81137838:	e0fffc03 	ldbu	r3,-16(fp)
8113783c:	e0bffd03 	ldbu	r2,-12(fp)
81137840:	d8800015 	stw	r2,0(sp)
81137844:	180f883a 	mov	r7,r3
81137848:	800b883a 	mov	r5,r16
8113784c:	880d883a 	mov	r6,r17
81137850:	e13ffa17 	ldw	r4,-24(fp)
81137854:	11374340 	call	81137434 <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
81137858:	e6fffe04 	addi	sp,fp,-8
8113785c:	dfc00317 	ldw	ra,12(sp)
81137860:	df000217 	ldw	fp,8(sp)
81137864:	dc400117 	ldw	r17,4(sp)
81137868:	dc000017 	ldw	r16,0(sp)
8113786c:	dec00404 	addi	sp,sp,16
81137870:	f800283a 	ret

81137874 <alt_msgdma_open>:
 * Returns:
 * - Pointer to msgdma device instance structure, or null if the device
 *   could not be opened.
 */
alt_msgdma_dev* alt_msgdma_open (const char* name)
{
81137874:	defffc04 	addi	sp,sp,-16
81137878:	de00012e 	bgeu	sp,et,81137880 <alt_msgdma_open+0xc>
8113787c:	003b68fa 	trap	3
81137880:	dfc00315 	stw	ra,12(sp)
81137884:	df000215 	stw	fp,8(sp)
81137888:	df000204 	addi	fp,sp,8
8113788c:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev* dev = NULL;
81137890:	e03ffe15 	stw	zero,-8(fp)

    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);
81137894:	d1603b04 	addi	r5,gp,-32532
81137898:	e13fff17 	ldw	r4,-4(fp)
8113789c:	11380480 	call	81138048 <alt_find_dev>
811378a0:	e0bffe15 	stw	r2,-8(fp)

    if (NULL == dev)
811378a4:	e0bffe17 	ldw	r2,-8(fp)
811378a8:	1000041e 	bne	r2,zero,811378bc <alt_msgdma_open+0x48>
    {
        ALT_ERRNO = ENODEV;
811378ac:	1135ad80 	call	81135ad8 <alt_get_errno>
811378b0:	1007883a 	mov	r3,r2
811378b4:	008004c4 	movi	r2,19
811378b8:	18800015 	stw	r2,0(r3)
    }

    return dev;
811378bc:	e0bffe17 	ldw	r2,-8(fp)
}
811378c0:	e037883a 	mov	sp,fp
811378c4:	dfc00117 	ldw	ra,4(sp)
811378c8:	df000017 	ldw	fp,0(sp)
811378cc:	dec00204 	addi	sp,sp,8
811378d0:	f800283a 	ret

811378d4 <alt_msgdma_init>:
 * This routine disables interrupts, descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_msgdma_init (alt_msgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
811378d4:	defff604 	addi	sp,sp,-40
811378d8:	de00012e 	bgeu	sp,et,811378e0 <alt_msgdma_init+0xc>
811378dc:	003b68fa 	trap	3
811378e0:	dfc00915 	stw	ra,36(sp)
811378e4:	df000815 	stw	fp,32(sp)
811378e8:	df000804 	addi	fp,sp,32
811378ec:	e13ffd15 	stw	r4,-12(fp)
811378f0:	e17ffe15 	stw	r5,-8(fp)
811378f4:	e1bfff15 	stw	r6,-4(fp)
    extern alt_llist alt_msgdma_list;
    alt_u32 temporary_control;
    int error;

    if (dev->prefetcher_enable)
811378f8:	e0bffd17 	ldw	r2,-12(fp)
811378fc:	10801783 	ldbu	r2,94(r2)
81137900:	10803fcc 	andi	r2,r2,255
81137904:	10000b26 	beq	r2,zero,81137934 <alt_msgdma_init+0x60>
    {
    	/* start prefetcher reset sequence */
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, 
81137908:	e0bffd17 	ldw	r2,-12(fp)
8113790c:	10800617 	ldw	r2,24(r2)
81137910:	00c00104 	movi	r3,4
81137914:	10c00035 	stwio	r3,0(r2)
    			ALT_MSGDMA_PREFETCHER_CTRL_RESET_SET_MASK);
    	/* wait until hw clears the bit */
    	while(ALT_MSGDMA_PREFETCHER_CTRL_RESET_GET(
81137918:	0001883a 	nop
8113791c:	e0bffd17 	ldw	r2,-12(fp)
81137920:	10800617 	ldw	r2,24(r2)
81137924:	10800037 	ldwio	r2,0(r2)
81137928:	1080010c 	andi	r2,r2,4
8113792c:	1005d0ba 	srai	r2,r2,2
81137930:	103ffa1e 	bne	r2,zero,8113791c <__reset+0xfb11791c>
    }    
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
81137934:	e0bffd17 	ldw	r2,-12(fp)
81137938:	10800317 	ldw	r2,12(r2)
8113793c:	10800104 	addi	r2,r2,4
81137940:	00c00084 	movi	r3,2
81137944:	10c00035 	stwio	r3,0(r2)
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
81137948:	0001883a 	nop
8113794c:	e0bffd17 	ldw	r2,-12(fp)
81137950:	10800317 	ldw	r2,12(r2)
81137954:	10800037 	ldwio	r2,0(r2)
    		& ALTERA_MSGDMA_CSR_RESET_STATE_MASK));
81137958:	1080100c 	andi	r2,r2,64
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
8113795c:	103ffb1e 	bne	r2,zero,8113794c <__reset+0xfb11794c>
    * Disable interrupts, halt descriptor processing,
    * and clear status register content
    */

    /* disable global interrupt */
    temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
81137960:	e0bffd17 	ldw	r2,-12(fp)
81137964:	10800317 	ldw	r2,12(r2)
81137968:	10800104 	addi	r2,r2,4
8113796c:	10800037 	ldwio	r2,0(r2)
81137970:	1007883a 	mov	r3,r2
81137974:	00bffbc4 	movi	r2,-17
81137978:	1884703a 	and	r2,r3,r2
8113797c:	e0bff915 	stw	r2,-28(fp)
    		& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    /* stopping descriptor */
    temporary_control |= ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
81137980:	e0bff917 	ldw	r2,-28(fp)
81137984:	10800814 	ori	r2,r2,32
81137988:	e0bff915 	stw	r2,-28(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
8113798c:	e0bffd17 	ldw	r2,-12(fp)
81137990:	10800317 	ldw	r2,12(r2)
81137994:	10800104 	addi	r2,r2,4
81137998:	e0fff917 	ldw	r3,-28(fp)
8113799c:	10c00035 	stwio	r3,0(r2)

    /* clear the CSR status register */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base, 
811379a0:	e0bffd17 	ldw	r2,-12(fp)
811379a4:	10800317 	ldw	r2,12(r2)
811379a8:	e0fffd17 	ldw	r3,-12(fp)
811379ac:	18c00317 	ldw	r3,12(r3)
811379b0:	18c00037 	ldwio	r3,0(r3)
811379b4:	10c00035 	stwio	r3,0(r2)
    		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    
    if (dev->prefetcher_enable)
811379b8:	e0bffd17 	ldw	r2,-12(fp)
811379bc:	10801783 	ldbu	r2,94(r2)
811379c0:	10803fcc 	andi	r2,r2,255
811379c4:	10000826 	beq	r2,zero,811379e8 <alt_msgdma_init+0x114>
    {
    	/* clear all status bits that are set, since theyre W1C */
    	IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base, 
811379c8:	e0bffd17 	ldw	r2,-12(fp)
811379cc:	10800617 	ldw	r2,24(r2)
811379d0:	10800404 	addi	r2,r2,16
811379d4:	e0fffd17 	ldw	r3,-12(fp)
811379d8:	18c00617 	ldw	r3,24(r3)
811379dc:	18c00404 	addi	r3,r3,16
811379e0:	18c00037 	ldwio	r3,0(r3)
811379e4:	10c00035 	stwio	r3,0(r2)
    			IORD_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base));
    }

    /* Register this instance of the msgdma controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_msgdma_list);
811379e8:	d1603b04 	addi	r5,gp,-32532
811379ec:	e13ffd17 	ldw	r4,-12(fp)
811379f0:	1137ecc0 	call	81137ecc <alt_dev_llist_insert>

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
811379f4:	e0bffd17 	ldw	r2,-12(fp)
811379f8:	10801804 	addi	r2,r2,96
811379fc:	e0bffb15 	stw	r2,-20(fp)
81137a00:	00800044 	movi	r2,1
81137a04:	e0bffc0d 	sth	r2,-16(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
81137a08:	e0bffc0b 	ldhu	r2,-16(fp)
81137a0c:	1009883a 	mov	r4,r2
81137a10:	112b5180 	call	8112b518 <OSSemCreate>
81137a14:	1007883a 	mov	r3,r2
81137a18:	e0bffb17 	ldw	r2,-20(fp)
81137a1c:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
81137a20:	e0bffb17 	ldw	r2,-20(fp)
81137a24:	10800017 	ldw	r2,0(r2)
81137a28:	10000226 	beq	r2,zero,81137a34 <alt_msgdma_init+0x160>
81137a2c:	0005883a 	mov	r2,zero
81137a30:	00000106 	br	81137a38 <alt_msgdma_init+0x164>
81137a34:	00bfffc4 	movi	r2,-1
81137a38:	e0bffa15 	stw	r2,-24(fp)
            
    if (!error)
81137a3c:	e0bffa17 	ldw	r2,-24(fp)
81137a40:	1000081e 	bne	r2,zero,81137a64 <alt_msgdma_init+0x190>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
81137a44:	d8000015 	stw	zero,0(sp)
81137a48:	e1fffd17 	ldw	r7,-12(fp)
81137a4c:	01a044f4 	movhi	r6,33043
81137a50:	31973b04 	addi	r6,r6,23788
81137a54:	e17fff17 	ldw	r5,-4(fp)
81137a58:	e13ffe17 	ldw	r4,-8(fp)
81137a5c:	11382d40 	call	811382d4 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }
    
    return;
81137a60:	00000406 	br	81137a74 <alt_msgdma_init+0x1a0>
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
81137a64:	01204534 	movhi	r4,33044
81137a68:	21300104 	addi	r4,r4,-16380
81137a6c:	11386ec0 	call	811386ec <alt_printf>
    }
    
    return;
81137a70:	0001883a 	nop

}
81137a74:	e037883a 	mov	sp,fp
81137a78:	dfc00117 	ldw	ra,4(sp)
81137a7c:	df000017 	ldw	fp,0(sp)
81137a80:	dec00204 	addi	sp,sp,8
81137a84:	f800283a 	ret

81137a88 <alt_msgdma_register_callback>:
void alt_msgdma_register_callback(
	alt_msgdma_dev *dev,
	alt_msgdma_callback callback,
	alt_u32 control,
	void *context)
{
81137a88:	defffb04 	addi	sp,sp,-20
81137a8c:	de00012e 	bgeu	sp,et,81137a94 <alt_msgdma_register_callback+0xc>
81137a90:	003b68fa 	trap	3
81137a94:	df000415 	stw	fp,16(sp)
81137a98:	df000404 	addi	fp,sp,16
81137a9c:	e13ffc15 	stw	r4,-16(fp)
81137aa0:	e17ffd15 	stw	r5,-12(fp)
81137aa4:	e1bffe15 	stw	r6,-8(fp)
81137aa8:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
81137aac:	e0bffc17 	ldw	r2,-16(fp)
81137ab0:	e0fffd17 	ldw	r3,-12(fp)
81137ab4:	10c00b15 	stw	r3,44(r2)
    dev->callback_context = context;
81137ab8:	e0bffc17 	ldw	r2,-16(fp)
81137abc:	e0ffff17 	ldw	r3,-4(fp)
81137ac0:	10c00c15 	stw	r3,48(r2)
    dev->control          = control;
81137ac4:	e0bffc17 	ldw	r2,-16(fp)
81137ac8:	e0fffe17 	ldw	r3,-8(fp)
81137acc:	10c00d15 	stw	r3,52(r2)

    return ;
81137ad0:	0001883a 	nop
}
81137ad4:	e037883a 	mov	sp,fp
81137ad8:	df000017 	ldw	fp,0(sp)
81137adc:	dec00104 	addi	sp,sp,4
81137ae0:	f800283a 	ret

81137ae4 <alt_msgdma_standard_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_standard_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
81137ae4:	defffc04 	addi	sp,sp,-16
81137ae8:	de00012e 	bgeu	sp,et,81137af0 <alt_msgdma_standard_descriptor_async_transfer+0xc>
81137aec:	003b68fa 	trap	3
81137af0:	dfc00315 	stw	ra,12(sp)
81137af4:	df000215 	stw	fp,8(sp)
81137af8:	df000204 	addi	fp,sp,8
81137afc:	e13ffe15 	stw	r4,-8(fp)
81137b00:	e17fff15 	stw	r5,-4(fp)
   /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
    return alt_msgdma_descriptor_async_transfer(dev, desc, NULL);
81137b04:	000d883a 	mov	r6,zero
81137b08:	e17fff17 	ldw	r5,-4(fp)
81137b0c:	e13ffe17 	ldw	r4,-8(fp)
81137b10:	11360680 	call	81136068 <alt_msgdma_descriptor_async_transfer>

}
81137b14:	e037883a 	mov	sp,fp
81137b18:	dfc00117 	ldw	ra,4(sp)
81137b1c:	df000017 	ldw	fp,0(sp)
81137b20:	dec00204 	addi	sp,sp,8
81137b24:	f800283a 	ret

81137b28 <alt_msgdma_extended_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_extended_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
81137b28:	defffc04 	addi	sp,sp,-16
81137b2c:	de00012e 	bgeu	sp,et,81137b34 <alt_msgdma_extended_descriptor_async_transfer+0xc>
81137b30:	003b68fa 	trap	3
81137b34:	dfc00315 	stw	ra,12(sp)
81137b38:	df000215 	stw	fp,8(sp)
81137b3c:	df000204 	addi	fp,sp,8
81137b40:	e13ffe15 	stw	r4,-8(fp)
81137b44:	e17fff15 	stw	r5,-4(fp)
    /*
    * Error detection/handling should be performed at the application
    * or callback level as appropriate.
    */
    return alt_msgdma_descriptor_async_transfer(dev, NULL, desc);
81137b48:	e1bfff17 	ldw	r6,-4(fp)
81137b4c:	000b883a 	mov	r5,zero
81137b50:	e13ffe17 	ldw	r4,-8(fp)
81137b54:	11360680 	call	81136068 <alt_msgdma_descriptor_async_transfer>
}
81137b58:	e037883a 	mov	sp,fp
81137b5c:	dfc00117 	ldw	ra,4(sp)
81137b60:	df000017 	ldw	fp,0(sp)
81137b64:	dec00204 	addi	sp,sp,8
81137b68:	f800283a 	ret

81137b6c <alt_msgdma_standard_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_standard_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
81137b6c:	defffc04 	addi	sp,sp,-16
81137b70:	de00012e 	bgeu	sp,et,81137b78 <alt_msgdma_standard_descriptor_sync_transfer+0xc>
81137b74:	003b68fa 	trap	3
81137b78:	dfc00315 	stw	ra,12(sp)
81137b7c:	df000215 	stw	fp,8(sp)
81137b80:	df000204 	addi	fp,sp,8
81137b84:	e13ffe15 	stw	r4,-8(fp)
81137b88:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, desc, NULL);
81137b8c:	000d883a 	mov	r6,zero
81137b90:	e17fff17 	ldw	r5,-4(fp)
81137b94:	e13ffe17 	ldw	r4,-8(fp)
81137b98:	11363a80 	call	811363a8 <alt_msgdma_descriptor_sync_transfer>
}
81137b9c:	e037883a 	mov	sp,fp
81137ba0:	dfc00117 	ldw	ra,4(sp)
81137ba4:	df000017 	ldw	fp,0(sp)
81137ba8:	dec00204 	addi	sp,sp,8
81137bac:	f800283a 	ret

81137bb0 <alt_msgdma_extended_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_extended_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
81137bb0:	defffc04 	addi	sp,sp,-16
81137bb4:	de00012e 	bgeu	sp,et,81137bbc <alt_msgdma_extended_descriptor_sync_transfer+0xc>
81137bb8:	003b68fa 	trap	3
81137bbc:	dfc00315 	stw	ra,12(sp)
81137bc0:	df000215 	stw	fp,8(sp)
81137bc4:	df000204 	addi	fp,sp,8
81137bc8:	e13ffe15 	stw	r4,-8(fp)
81137bcc:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, NULL, desc);
81137bd0:	e1bfff17 	ldw	r6,-4(fp)
81137bd4:	000b883a 	mov	r5,zero
81137bd8:	e13ffe17 	ldw	r4,-8(fp)
81137bdc:	11363a80 	call	811363a8 <alt_msgdma_descriptor_sync_transfer>
}
81137be0:	e037883a 	mov	sp,fp
81137be4:	dfc00117 	ldw	ra,4(sp)
81137be8:	df000017 	ldw	fp,0(sp)
81137bec:	dec00204 	addi	sp,sp,8
81137bf0:	f800283a 	ret

81137bf4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
81137bf4:	defff504 	addi	sp,sp,-44
81137bf8:	de00012e 	bgeu	sp,et,81137c00 <alt_alarm_start+0xc>
81137bfc:	003b68fa 	trap	3
81137c00:	df000a15 	stw	fp,40(sp)
81137c04:	df000a04 	addi	fp,sp,40
81137c08:	e13ffc15 	stw	r4,-16(fp)
81137c0c:	e17ffd15 	stw	r5,-12(fp)
81137c10:	e1bffe15 	stw	r6,-8(fp)
81137c14:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
81137c18:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81137c1c:	d0a07617 	ldw	r2,-32296(gp)
  
  if (alt_ticks_per_second ())
81137c20:	10003c26 	beq	r2,zero,81137d14 <alt_alarm_start+0x120>
  {
    if (alarm)
81137c24:	e0bffc17 	ldw	r2,-16(fp)
81137c28:	10003826 	beq	r2,zero,81137d0c <alt_alarm_start+0x118>
    {
      alarm->callback = callback;
81137c2c:	e0bffc17 	ldw	r2,-16(fp)
81137c30:	e0fffe17 	ldw	r3,-8(fp)
81137c34:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
81137c38:	e0bffc17 	ldw	r2,-16(fp)
81137c3c:	e0ffff17 	ldw	r3,-4(fp)
81137c40:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81137c44:	0005303a 	rdctl	r2,status
81137c48:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81137c4c:	e0fff917 	ldw	r3,-28(fp)
81137c50:	00bfff84 	movi	r2,-2
81137c54:	1884703a 	and	r2,r3,r2
81137c58:	1001703a 	wrctl	status,r2
  
  return context;
81137c5c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
81137c60:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81137c64:	d0a07717 	ldw	r2,-32292(gp)
      
      current_nticks = alt_nticks();
81137c68:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
81137c6c:	e0fffd17 	ldw	r3,-12(fp)
81137c70:	e0bff617 	ldw	r2,-40(fp)
81137c74:	1885883a 	add	r2,r3,r2
81137c78:	10c00044 	addi	r3,r2,1
81137c7c:	e0bffc17 	ldw	r2,-16(fp)
81137c80:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
81137c84:	e0bffc17 	ldw	r2,-16(fp)
81137c88:	10c00217 	ldw	r3,8(r2)
81137c8c:	e0bff617 	ldw	r2,-40(fp)
81137c90:	1880042e 	bgeu	r3,r2,81137ca4 <alt_alarm_start+0xb0>
      {
        alarm->rollover = 1;
81137c94:	e0bffc17 	ldw	r2,-16(fp)
81137c98:	00c00044 	movi	r3,1
81137c9c:	10c00405 	stb	r3,16(r2)
81137ca0:	00000206 	br	81137cac <alt_alarm_start+0xb8>
      }
      else
      {
        alarm->rollover = 0;
81137ca4:	e0bffc17 	ldw	r2,-16(fp)
81137ca8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
81137cac:	e0bffc17 	ldw	r2,-16(fp)
81137cb0:	d0e01804 	addi	r3,gp,-32672
81137cb4:	e0fffa15 	stw	r3,-24(fp)
81137cb8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
81137cbc:	e0bffb17 	ldw	r2,-20(fp)
81137cc0:	e0fffa17 	ldw	r3,-24(fp)
81137cc4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
81137cc8:	e0bffa17 	ldw	r2,-24(fp)
81137ccc:	10c00017 	ldw	r3,0(r2)
81137cd0:	e0bffb17 	ldw	r2,-20(fp)
81137cd4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
81137cd8:	e0bffa17 	ldw	r2,-24(fp)
81137cdc:	10800017 	ldw	r2,0(r2)
81137ce0:	e0fffb17 	ldw	r3,-20(fp)
81137ce4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
81137ce8:	e0bffa17 	ldw	r2,-24(fp)
81137cec:	e0fffb17 	ldw	r3,-20(fp)
81137cf0:	10c00015 	stw	r3,0(r2)
81137cf4:	e0bff817 	ldw	r2,-32(fp)
81137cf8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81137cfc:	e0bff717 	ldw	r2,-36(fp)
81137d00:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
81137d04:	0005883a 	mov	r2,zero
81137d08:	00000306 	br	81137d18 <alt_alarm_start+0x124>
    }
    else
    {
      return -EINVAL;
81137d0c:	00bffa84 	movi	r2,-22
81137d10:	00000106 	br	81137d18 <alt_alarm_start+0x124>
    }
  }
  else
  {
    return -ENOTSUP;
81137d14:	00bfde84 	movi	r2,-134
  }
}
81137d18:	e037883a 	mov	sp,fp
81137d1c:	df000017 	ldw	fp,0(sp)
81137d20:	dec00104 	addi	sp,sp,4
81137d24:	f800283a 	ret

81137d28 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
81137d28:	defffb04 	addi	sp,sp,-20
81137d2c:	de00012e 	bgeu	sp,et,81137d34 <alt_busy_sleep+0xc>
81137d30:	003b68fa 	trap	3
81137d34:	df000415 	stw	fp,16(sp)
81137d38:	df000404 	addi	fp,sp,16
81137d3c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
81137d40:	008000c4 	movi	r2,3
81137d44:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
81137d48:	e0fffd17 	ldw	r3,-12(fp)
81137d4c:	008003f4 	movhi	r2,15
81137d50:	10909004 	addi	r2,r2,16960
81137d54:	1887383a 	mul	r3,r3,r2
81137d58:	00817db4 	movhi	r2,1526
81137d5c:	10b84004 	addi	r2,r2,-7936
81137d60:	10c7203a 	divu	r3,r2,r3
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
81137d64:	00a00034 	movhi	r2,32768
81137d68:	10bfffc4 	addi	r2,r2,-1
81137d6c:	10c5203a 	divu	r2,r2,r3
81137d70:	e0ffff17 	ldw	r3,-4(fp)
81137d74:	1885203a 	divu	r2,r3,r2
81137d78:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
81137d7c:	e0bffe17 	ldw	r2,-8(fp)
81137d80:	10002526 	beq	r2,zero,81137e18 <alt_busy_sleep+0xf0>
  {
    for(i=0;i<big_loops;i++)
81137d84:	e03ffc15 	stw	zero,-16(fp)
81137d88:	00001406 	br	81137ddc <alt_busy_sleep+0xb4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
81137d8c:	00a00034 	movhi	r2,32768
81137d90:	10bfffc4 	addi	r2,r2,-1
81137d94:	10bfffc4 	addi	r2,r2,-1
81137d98:	103ffe1e 	bne	r2,zero,81137d94 <__reset+0xfb117d94>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
81137d9c:	e0fffd17 	ldw	r3,-12(fp)
81137da0:	008003f4 	movhi	r2,15
81137da4:	10909004 	addi	r2,r2,16960
81137da8:	1887383a 	mul	r3,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
81137dac:	00817db4 	movhi	r2,1526
81137db0:	10b84004 	addi	r2,r2,-7936
81137db4:	10c7203a 	divu	r3,r2,r3
81137db8:	00a00034 	movhi	r2,32768
81137dbc:	10bfffc4 	addi	r2,r2,-1
81137dc0:	10c5203a 	divu	r2,r2,r3
81137dc4:	e0ffff17 	ldw	r3,-4(fp)
81137dc8:	1885c83a 	sub	r2,r3,r2
81137dcc:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
81137dd0:	e0bffc17 	ldw	r2,-16(fp)
81137dd4:	10800044 	addi	r2,r2,1
81137dd8:	e0bffc15 	stw	r2,-16(fp)
81137ddc:	e0fffc17 	ldw	r3,-16(fp)
81137de0:	e0bffe17 	ldw	r2,-8(fp)
81137de4:	18bfe916 	blt	r3,r2,81137d8c <__reset+0xfb117d8c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
81137de8:	e0fffd17 	ldw	r3,-12(fp)
81137dec:	008003f4 	movhi	r2,15
81137df0:	10909004 	addi	r2,r2,16960
81137df4:	1887383a 	mul	r3,r3,r2
81137df8:	00817db4 	movhi	r2,1526
81137dfc:	10b84004 	addi	r2,r2,-7936
81137e00:	10c7203a 	divu	r3,r2,r3
81137e04:	e0bfff17 	ldw	r2,-4(fp)
81137e08:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
81137e0c:	10bfffc4 	addi	r2,r2,-1
81137e10:	103ffe1e 	bne	r2,zero,81137e0c <__reset+0xfb117e0c>
81137e14:	00000b06 	br	81137e44 <alt_busy_sleep+0x11c>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
81137e18:	e0fffd17 	ldw	r3,-12(fp)
81137e1c:	008003f4 	movhi	r2,15
81137e20:	10909004 	addi	r2,r2,16960
81137e24:	1887383a 	mul	r3,r3,r2
81137e28:	00817db4 	movhi	r2,1526
81137e2c:	10b84004 	addi	r2,r2,-7936
81137e30:	10c7203a 	divu	r3,r2,r3
81137e34:	e0bfff17 	ldw	r2,-4(fp)
81137e38:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
81137e3c:	10bfffc4 	addi	r2,r2,-1
81137e40:	00bffe16 	blt	zero,r2,81137e3c <__reset+0xfb117e3c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
81137e44:	0005883a 	mov	r2,zero
}
81137e48:	e037883a 	mov	sp,fp
81137e4c:	df000017 	ldw	fp,0(sp)
81137e50:	dec00104 	addi	sp,sp,4
81137e54:	f800283a 	ret

81137e58 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
81137e58:	defffd04 	addi	sp,sp,-12
81137e5c:	de00012e 	bgeu	sp,et,81137e64 <alt_dcache_flush+0xc>
81137e60:	003b68fa 	trap	3
81137e64:	df000215 	stw	fp,8(sp)
81137e68:	df000204 	addi	fp,sp,8
81137e6c:	e13ffe15 	stw	r4,-8(fp)
81137e70:	e17fff15 	stw	r5,-4(fp)
  {
    ALT_FLUSH_DATA(i);
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
81137e74:	0001883a 	nop
81137e78:	e037883a 	mov	sp,fp
81137e7c:	df000017 	ldw	fp,0(sp)
81137e80:	dec00104 	addi	sp,sp,4
81137e84:	f800283a 	ret

81137e88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81137e88:	defffe04 	addi	sp,sp,-8
81137e8c:	de00012e 	bgeu	sp,et,81137e94 <alt_get_errno+0xc>
81137e90:	003b68fa 	trap	3
81137e94:	dfc00115 	stw	ra,4(sp)
81137e98:	df000015 	stw	fp,0(sp)
81137e9c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81137ea0:	d0a01617 	ldw	r2,-32680(gp)
81137ea4:	10000326 	beq	r2,zero,81137eb4 <alt_get_errno+0x2c>
81137ea8:	d0a01617 	ldw	r2,-32680(gp)
81137eac:	103ee83a 	callr	r2
81137eb0:	00000106 	br	81137eb8 <alt_get_errno+0x30>
81137eb4:	d0a06b04 	addi	r2,gp,-32340
}
81137eb8:	e037883a 	mov	sp,fp
81137ebc:	dfc00117 	ldw	ra,4(sp)
81137ec0:	df000017 	ldw	fp,0(sp)
81137ec4:	dec00204 	addi	sp,sp,8
81137ec8:	f800283a 	ret

81137ecc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
81137ecc:	defffa04 	addi	sp,sp,-24
81137ed0:	de00012e 	bgeu	sp,et,81137ed8 <alt_dev_llist_insert+0xc>
81137ed4:	003b68fa 	trap	3
81137ed8:	dfc00515 	stw	ra,20(sp)
81137edc:	df000415 	stw	fp,16(sp)
81137ee0:	df000404 	addi	fp,sp,16
81137ee4:	e13ffe15 	stw	r4,-8(fp)
81137ee8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
81137eec:	e0bffe17 	ldw	r2,-8(fp)
81137ef0:	10000326 	beq	r2,zero,81137f00 <alt_dev_llist_insert+0x34>
81137ef4:	e0bffe17 	ldw	r2,-8(fp)
81137ef8:	10800217 	ldw	r2,8(r2)
81137efc:	1000061e 	bne	r2,zero,81137f18 <alt_dev_llist_insert+0x4c>
  {
    ALT_ERRNO = EINVAL;
81137f00:	1137e880 	call	81137e88 <alt_get_errno>
81137f04:	1007883a 	mov	r3,r2
81137f08:	00800584 	movi	r2,22
81137f0c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
81137f10:	00bffa84 	movi	r2,-22
81137f14:	00001306 	br	81137f64 <alt_dev_llist_insert+0x98>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
81137f18:	e0bffe17 	ldw	r2,-8(fp)
81137f1c:	e0ffff17 	ldw	r3,-4(fp)
81137f20:	e0fffc15 	stw	r3,-16(fp)
81137f24:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
81137f28:	e0bffd17 	ldw	r2,-12(fp)
81137f2c:	e0fffc17 	ldw	r3,-16(fp)
81137f30:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
81137f34:	e0bffc17 	ldw	r2,-16(fp)
81137f38:	10c00017 	ldw	r3,0(r2)
81137f3c:	e0bffd17 	ldw	r2,-12(fp)
81137f40:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
81137f44:	e0bffc17 	ldw	r2,-16(fp)
81137f48:	10800017 	ldw	r2,0(r2)
81137f4c:	e0fffd17 	ldw	r3,-12(fp)
81137f50:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
81137f54:	e0bffc17 	ldw	r2,-16(fp)
81137f58:	e0fffd17 	ldw	r3,-12(fp)
81137f5c:	10c00015 	stw	r3,0(r2)

  return 0;  
81137f60:	0005883a 	mov	r2,zero
}
81137f64:	e037883a 	mov	sp,fp
81137f68:	dfc00117 	ldw	ra,4(sp)
81137f6c:	df000017 	ldw	fp,0(sp)
81137f70:	dec00204 	addi	sp,sp,8
81137f74:	f800283a 	ret

81137f78 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
81137f78:	defffd04 	addi	sp,sp,-12
81137f7c:	de00012e 	bgeu	sp,et,81137f84 <_do_ctors+0xc>
81137f80:	003b68fa 	trap	3
81137f84:	dfc00215 	stw	ra,8(sp)
81137f88:	df000115 	stw	fp,4(sp)
81137f8c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
81137f90:	00a04534 	movhi	r2,33044
81137f94:	10a47304 	addi	r2,r2,-28212
81137f98:	e0bfff15 	stw	r2,-4(fp)
81137f9c:	00000606 	br	81137fb8 <_do_ctors+0x40>
        (*ctor) (); 
81137fa0:	e0bfff17 	ldw	r2,-4(fp)
81137fa4:	10800017 	ldw	r2,0(r2)
81137fa8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
81137fac:	e0bfff17 	ldw	r2,-4(fp)
81137fb0:	10bfff04 	addi	r2,r2,-4
81137fb4:	e0bfff15 	stw	r2,-4(fp)
81137fb8:	e0ffff17 	ldw	r3,-4(fp)
81137fbc:	00a04534 	movhi	r2,33044
81137fc0:	10a47404 	addi	r2,r2,-28208
81137fc4:	18bff62e 	bgeu	r3,r2,81137fa0 <__reset+0xfb117fa0>
        (*ctor) (); 
}
81137fc8:	0001883a 	nop
81137fcc:	e037883a 	mov	sp,fp
81137fd0:	dfc00117 	ldw	ra,4(sp)
81137fd4:	df000017 	ldw	fp,0(sp)
81137fd8:	dec00204 	addi	sp,sp,8
81137fdc:	f800283a 	ret

81137fe0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
81137fe0:	defffd04 	addi	sp,sp,-12
81137fe4:	de00012e 	bgeu	sp,et,81137fec <_do_dtors+0xc>
81137fe8:	003b68fa 	trap	3
81137fec:	dfc00215 	stw	ra,8(sp)
81137ff0:	df000115 	stw	fp,4(sp)
81137ff4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
81137ff8:	00a04534 	movhi	r2,33044
81137ffc:	10a47304 	addi	r2,r2,-28212
81138000:	e0bfff15 	stw	r2,-4(fp)
81138004:	00000606 	br	81138020 <_do_dtors+0x40>
        (*dtor) (); 
81138008:	e0bfff17 	ldw	r2,-4(fp)
8113800c:	10800017 	ldw	r2,0(r2)
81138010:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
81138014:	e0bfff17 	ldw	r2,-4(fp)
81138018:	10bfff04 	addi	r2,r2,-4
8113801c:	e0bfff15 	stw	r2,-4(fp)
81138020:	e0ffff17 	ldw	r3,-4(fp)
81138024:	00a04534 	movhi	r2,33044
81138028:	10a47404 	addi	r2,r2,-28208
8113802c:	18bff62e 	bgeu	r3,r2,81138008 <__reset+0xfb118008>
        (*dtor) (); 
}
81138030:	0001883a 	nop
81138034:	e037883a 	mov	sp,fp
81138038:	dfc00117 	ldw	ra,4(sp)
8113803c:	df000017 	ldw	fp,0(sp)
81138040:	dec00204 	addi	sp,sp,8
81138044:	f800283a 	ret

81138048 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
81138048:	defffa04 	addi	sp,sp,-24
8113804c:	de00012e 	bgeu	sp,et,81138054 <alt_find_dev+0xc>
81138050:	003b68fa 	trap	3
81138054:	dfc00515 	stw	ra,20(sp)
81138058:	df000415 	stw	fp,16(sp)
8113805c:	df000404 	addi	fp,sp,16
81138060:	e13ffe15 	stw	r4,-8(fp)
81138064:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
81138068:	e0bfff17 	ldw	r2,-4(fp)
8113806c:	10800017 	ldw	r2,0(r2)
81138070:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
81138074:	e13ffe17 	ldw	r4,-8(fp)
81138078:	110ffb80 	call	8110ffb8 <strlen>
8113807c:	10800044 	addi	r2,r2,1
81138080:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
81138084:	00000d06 	br	811380bc <alt_find_dev+0x74>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
81138088:	e0bffc17 	ldw	r2,-16(fp)
8113808c:	10800217 	ldw	r2,8(r2)
81138090:	e0fffd17 	ldw	r3,-12(fp)
81138094:	180d883a 	mov	r6,r3
81138098:	e17ffe17 	ldw	r5,-8(fp)
8113809c:	1009883a 	mov	r4,r2
811380a0:	1138e700 	call	81138e70 <memcmp>
811380a4:	1000021e 	bne	r2,zero,811380b0 <alt_find_dev+0x68>
    {
      /* match found */

      return next;
811380a8:	e0bffc17 	ldw	r2,-16(fp)
811380ac:	00000706 	br	811380cc <alt_find_dev+0x84>
    }
    next = (alt_dev*) next->llist.next;
811380b0:	e0bffc17 	ldw	r2,-16(fp)
811380b4:	10800017 	ldw	r2,0(r2)
811380b8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
811380bc:	e0fffc17 	ldw	r3,-16(fp)
811380c0:	e0bfff17 	ldw	r2,-4(fp)
811380c4:	18bff01e 	bne	r3,r2,81138088 <__reset+0xfb118088>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
811380c8:	0005883a 	mov	r2,zero
}
811380cc:	e037883a 	mov	sp,fp
811380d0:	dfc00117 	ldw	ra,4(sp)
811380d4:	df000017 	ldw	fp,0(sp)
811380d8:	dec00204 	addi	sp,sp,8
811380dc:	f800283a 	ret

811380e0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
811380e0:	defffb04 	addi	sp,sp,-20
811380e4:	de00012e 	bgeu	sp,et,811380ec <alt_find_file+0xc>
811380e8:	003b68fa 	trap	3
811380ec:	dfc00415 	stw	ra,16(sp)
811380f0:	df000315 	stw	fp,12(sp)
811380f4:	df000304 	addi	fp,sp,12
811380f8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
811380fc:	d0a01117 	ldw	r2,-32700(gp)
81138100:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
81138104:	00003106 	br	811381cc <alt_find_file+0xec>
  {
    len = strlen(next->name);
81138108:	e0bffd17 	ldw	r2,-12(fp)
8113810c:	10800217 	ldw	r2,8(r2)
81138110:	1009883a 	mov	r4,r2
81138114:	110ffb80 	call	8110ffb8 <strlen>
81138118:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
8113811c:	e0bffd17 	ldw	r2,-12(fp)
81138120:	10c00217 	ldw	r3,8(r2)
81138124:	e0bffe17 	ldw	r2,-8(fp)
81138128:	10bfffc4 	addi	r2,r2,-1
8113812c:	1885883a 	add	r2,r3,r2
81138130:	10800003 	ldbu	r2,0(r2)
81138134:	10803fcc 	andi	r2,r2,255
81138138:	1080201c 	xori	r2,r2,128
8113813c:	10bfe004 	addi	r2,r2,-128
81138140:	10800bd8 	cmpnei	r2,r2,47
81138144:	1000031e 	bne	r2,zero,81138154 <alt_find_file+0x74>
    {
      len -= 1;
81138148:	e0bffe17 	ldw	r2,-8(fp)
8113814c:	10bfffc4 	addi	r2,r2,-1
81138150:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
81138154:	e0bffe17 	ldw	r2,-8(fp)
81138158:	e0ffff17 	ldw	r3,-4(fp)
8113815c:	1885883a 	add	r2,r3,r2
81138160:	10800003 	ldbu	r2,0(r2)
81138164:	10803fcc 	andi	r2,r2,255
81138168:	1080201c 	xori	r2,r2,128
8113816c:	10bfe004 	addi	r2,r2,-128
81138170:	10800be0 	cmpeqi	r2,r2,47
81138174:	1000081e 	bne	r2,zero,81138198 <alt_find_file+0xb8>
81138178:	e0bffe17 	ldw	r2,-8(fp)
8113817c:	e0ffff17 	ldw	r3,-4(fp)
81138180:	1885883a 	add	r2,r3,r2
81138184:	10800003 	ldbu	r2,0(r2)
81138188:	10803fcc 	andi	r2,r2,255
8113818c:	1080201c 	xori	r2,r2,128
81138190:	10bfe004 	addi	r2,r2,-128
81138194:	10000a1e 	bne	r2,zero,811381c0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
81138198:	e0bffd17 	ldw	r2,-12(fp)
8113819c:	10800217 	ldw	r2,8(r2)
811381a0:	e0fffe17 	ldw	r3,-8(fp)
811381a4:	180d883a 	mov	r6,r3
811381a8:	e17fff17 	ldw	r5,-4(fp)
811381ac:	1009883a 	mov	r4,r2
811381b0:	1138e700 	call	81138e70 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
811381b4:	1000021e 	bne	r2,zero,811381c0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
811381b8:	e0bffd17 	ldw	r2,-12(fp)
811381bc:	00000706 	br	811381dc <alt_find_file+0xfc>
    }
    next = (alt_dev*) next->llist.next;
811381c0:	e0bffd17 	ldw	r2,-12(fp)
811381c4:	10800017 	ldw	r2,0(r2)
811381c8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
811381cc:	e0fffd17 	ldw	r3,-12(fp)
811381d0:	d0a01104 	addi	r2,gp,-32700
811381d4:	18bfcc1e 	bne	r3,r2,81138108 <__reset+0xfb118108>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
811381d8:	0005883a 	mov	r2,zero
}
811381dc:	e037883a 	mov	sp,fp
811381e0:	dfc00117 	ldw	ra,4(sp)
811381e4:	df000017 	ldw	fp,0(sp)
811381e8:	dec00204 	addi	sp,sp,8
811381ec:	f800283a 	ret

811381f0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
811381f0:	defff904 	addi	sp,sp,-28
811381f4:	de00012e 	bgeu	sp,et,811381fc <alt_get_fd+0xc>
811381f8:	003b68fa 	trap	3
811381fc:	dfc00615 	stw	ra,24(sp)
81138200:	df000515 	stw	fp,20(sp)
81138204:	df000504 	addi	fp,sp,20
81138208:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
8113820c:	00bffa04 	movi	r2,-24
81138210:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
81138214:	d0a07217 	ldw	r2,-32312(gp)
81138218:	e0bffd15 	stw	r2,-12(fp)
8113821c:	e03ffe0d 	sth	zero,-8(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
81138220:	e0bffe0b 	ldhu	r2,-8(fp)
81138224:	e0fffe84 	addi	r3,fp,-6
81138228:	180d883a 	mov	r6,r3
8113822c:	100b883a 	mov	r5,r2
81138230:	e13ffd17 	ldw	r4,-12(fp)
81138234:	112b8400 	call	8112b840 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
81138238:	e03ffb15 	stw	zero,-20(fp)
8113823c:	00001906 	br	811382a4 <alt_get_fd+0xb4>
  {
    if (!alt_fd_list[i].dev)
81138240:	00a04534 	movhi	r2,33044
81138244:	10b23d04 	addi	r2,r2,-14092
81138248:	e0fffb17 	ldw	r3,-20(fp)
8113824c:	18c00324 	muli	r3,r3,12
81138250:	10c5883a 	add	r2,r2,r3
81138254:	10800017 	ldw	r2,0(r2)
81138258:	10000f1e 	bne	r2,zero,81138298 <alt_get_fd+0xa8>
    {
      alt_fd_list[i].dev = dev;
8113825c:	00a04534 	movhi	r2,33044
81138260:	10b23d04 	addi	r2,r2,-14092
81138264:	e0fffb17 	ldw	r3,-20(fp)
81138268:	18c00324 	muli	r3,r3,12
8113826c:	10c5883a 	add	r2,r2,r3
81138270:	e0ffff17 	ldw	r3,-4(fp)
81138274:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
81138278:	d0e01517 	ldw	r3,-32684(gp)
8113827c:	e0bffb17 	ldw	r2,-20(fp)
81138280:	1880020e 	bge	r3,r2,8113828c <alt_get_fd+0x9c>
      {
        alt_max_fd = i;
81138284:	e0bffb17 	ldw	r2,-20(fp)
81138288:	d0a01515 	stw	r2,-32684(gp)
      }
      rc = i;
8113828c:	e0bffb17 	ldw	r2,-20(fp)
81138290:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
81138294:	00000606 	br	811382b0 <alt_get_fd+0xc0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
81138298:	e0bffb17 	ldw	r2,-20(fp)
8113829c:	10800044 	addi	r2,r2,1
811382a0:	e0bffb15 	stw	r2,-20(fp)
811382a4:	e0bffb17 	ldw	r2,-20(fp)
811382a8:	10800810 	cmplti	r2,r2,32
811382ac:	103fe41e 	bne	r2,zero,81138240 <__reset+0xfb118240>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
811382b0:	d0a07217 	ldw	r2,-32312(gp)
811382b4:	1009883a 	mov	r4,r2
811382b8:	112bbc80 	call	8112bbc8 <OSSemPost>

  return rc;
811382bc:	e0bffc17 	ldw	r2,-16(fp)
}
811382c0:	e037883a 	mov	sp,fp
811382c4:	dfc00117 	ldw	ra,4(sp)
811382c8:	df000017 	ldw	fp,0(sp)
811382cc:	dec00204 	addi	sp,sp,8
811382d0:	f800283a 	ret

811382d4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
811382d4:	defff904 	addi	sp,sp,-28
811382d8:	de00012e 	bgeu	sp,et,811382e0 <alt_ic_isr_register+0xc>
811382dc:	003b68fa 	trap	3
811382e0:	dfc00615 	stw	ra,24(sp)
811382e4:	df000515 	stw	fp,20(sp)
811382e8:	df000504 	addi	fp,sp,20
811382ec:	e13ffc15 	stw	r4,-16(fp)
811382f0:	e17ffd15 	stw	r5,-12(fp)
811382f4:	e1bffe15 	stw	r6,-8(fp)
811382f8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
811382fc:	e0800217 	ldw	r2,8(fp)
81138300:	d8800015 	stw	r2,0(sp)
81138304:	e1ffff17 	ldw	r7,-4(fp)
81138308:	e1bffe17 	ldw	r6,-8(fp)
8113830c:	e17ffd17 	ldw	r5,-12(fp)
81138310:	e13ffc17 	ldw	r4,-16(fp)
81138314:	11384a40 	call	811384a4 <alt_iic_isr_register>
}  
81138318:	e037883a 	mov	sp,fp
8113831c:	dfc00117 	ldw	ra,4(sp)
81138320:	df000017 	ldw	fp,0(sp)
81138324:	dec00204 	addi	sp,sp,8
81138328:	f800283a 	ret

8113832c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
8113832c:	defff904 	addi	sp,sp,-28
81138330:	de00012e 	bgeu	sp,et,81138338 <alt_ic_irq_enable+0xc>
81138334:	003b68fa 	trap	3
81138338:	df000615 	stw	fp,24(sp)
8113833c:	df000604 	addi	fp,sp,24
81138340:	e13ffe15 	stw	r4,-8(fp)
81138344:	e17fff15 	stw	r5,-4(fp)
81138348:	e0bfff17 	ldw	r2,-4(fp)
8113834c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81138350:	0005303a 	rdctl	r2,status
81138354:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81138358:	e0fffb17 	ldw	r3,-20(fp)
8113835c:	00bfff84 	movi	r2,-2
81138360:	1884703a 	and	r2,r3,r2
81138364:	1001703a 	wrctl	status,r2
  
  return context;
81138368:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
8113836c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
81138370:	00c00044 	movi	r3,1
81138374:	e0bffa17 	ldw	r2,-24(fp)
81138378:	1884983a 	sll	r2,r3,r2
8113837c:	1007883a 	mov	r3,r2
81138380:	d0a0a417 	ldw	r2,-32112(gp)
81138384:	1884b03a 	or	r2,r3,r2
81138388:	d0a0a415 	stw	r2,-32112(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
8113838c:	d0a0a417 	ldw	r2,-32112(gp)
81138390:	100170fa 	wrctl	ienable,r2
81138394:	e0bffc17 	ldw	r2,-16(fp)
81138398:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113839c:	e0bffd17 	ldw	r2,-12(fp)
811383a0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
811383a4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
811383a8:	0001883a 	nop
}
811383ac:	e037883a 	mov	sp,fp
811383b0:	df000017 	ldw	fp,0(sp)
811383b4:	dec00104 	addi	sp,sp,4
811383b8:	f800283a 	ret

811383bc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
811383bc:	defff904 	addi	sp,sp,-28
811383c0:	de00012e 	bgeu	sp,et,811383c8 <alt_ic_irq_disable+0xc>
811383c4:	003b68fa 	trap	3
811383c8:	df000615 	stw	fp,24(sp)
811383cc:	df000604 	addi	fp,sp,24
811383d0:	e13ffe15 	stw	r4,-8(fp)
811383d4:	e17fff15 	stw	r5,-4(fp)
811383d8:	e0bfff17 	ldw	r2,-4(fp)
811383dc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811383e0:	0005303a 	rdctl	r2,status
811383e4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811383e8:	e0fffb17 	ldw	r3,-20(fp)
811383ec:	00bfff84 	movi	r2,-2
811383f0:	1884703a 	and	r2,r3,r2
811383f4:	1001703a 	wrctl	status,r2
  
  return context;
811383f8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
811383fc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
81138400:	00c00044 	movi	r3,1
81138404:	e0bffa17 	ldw	r2,-24(fp)
81138408:	1884983a 	sll	r2,r3,r2
8113840c:	0084303a 	nor	r2,zero,r2
81138410:	1007883a 	mov	r3,r2
81138414:	d0a0a417 	ldw	r2,-32112(gp)
81138418:	1884703a 	and	r2,r3,r2
8113841c:	d0a0a415 	stw	r2,-32112(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
81138420:	d0a0a417 	ldw	r2,-32112(gp)
81138424:	100170fa 	wrctl	ienable,r2
81138428:	e0bffc17 	ldw	r2,-16(fp)
8113842c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81138430:	e0bffd17 	ldw	r2,-12(fp)
81138434:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
81138438:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
8113843c:	0001883a 	nop
}
81138440:	e037883a 	mov	sp,fp
81138444:	df000017 	ldw	fp,0(sp)
81138448:	dec00104 	addi	sp,sp,4
8113844c:	f800283a 	ret

81138450 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
81138450:	defffc04 	addi	sp,sp,-16
81138454:	de00012e 	bgeu	sp,et,8113845c <alt_ic_irq_enabled+0xc>
81138458:	003b68fa 	trap	3
8113845c:	df000315 	stw	fp,12(sp)
81138460:	df000304 	addi	fp,sp,12
81138464:	e13ffe15 	stw	r4,-8(fp)
81138468:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
8113846c:	000530fa 	rdctl	r2,ienable
81138470:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
81138474:	00c00044 	movi	r3,1
81138478:	e0bfff17 	ldw	r2,-4(fp)
8113847c:	1884983a 	sll	r2,r3,r2
81138480:	1007883a 	mov	r3,r2
81138484:	e0bffd17 	ldw	r2,-12(fp)
81138488:	1884703a 	and	r2,r3,r2
8113848c:	1004c03a 	cmpne	r2,r2,zero
81138490:	10803fcc 	andi	r2,r2,255
}
81138494:	e037883a 	mov	sp,fp
81138498:	df000017 	ldw	fp,0(sp)
8113849c:	dec00104 	addi	sp,sp,4
811384a0:	f800283a 	ret

811384a4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
811384a4:	defff504 	addi	sp,sp,-44
811384a8:	de00012e 	bgeu	sp,et,811384b0 <alt_iic_isr_register+0xc>
811384ac:	003b68fa 	trap	3
811384b0:	dfc00a15 	stw	ra,40(sp)
811384b4:	df000915 	stw	fp,36(sp)
811384b8:	df000904 	addi	fp,sp,36
811384bc:	e13ffc15 	stw	r4,-16(fp)
811384c0:	e17ffd15 	stw	r5,-12(fp)
811384c4:	e1bffe15 	stw	r6,-8(fp)
811384c8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
811384cc:	00bffa84 	movi	r2,-22
811384d0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
811384d4:	e0bffd17 	ldw	r2,-12(fp)
811384d8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
811384dc:	e0bff817 	ldw	r2,-32(fp)
811384e0:	10800808 	cmpgei	r2,r2,32
811384e4:	1000271e 	bne	r2,zero,81138584 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811384e8:	0005303a 	rdctl	r2,status
811384ec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811384f0:	e0fffb17 	ldw	r3,-20(fp)
811384f4:	00bfff84 	movi	r2,-2
811384f8:	1884703a 	and	r2,r3,r2
811384fc:	1001703a 	wrctl	status,r2
  
  return context;
81138500:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
81138504:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
81138508:	00a045b4 	movhi	r2,33046
8113850c:	10963704 	addi	r2,r2,22748
81138510:	e0fff817 	ldw	r3,-32(fp)
81138514:	180690fa 	slli	r3,r3,3
81138518:	10c5883a 	add	r2,r2,r3
8113851c:	e0fffe17 	ldw	r3,-8(fp)
81138520:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
81138524:	00a045b4 	movhi	r2,33046
81138528:	10963704 	addi	r2,r2,22748
8113852c:	e0fff817 	ldw	r3,-32(fp)
81138530:	180690fa 	slli	r3,r3,3
81138534:	10c5883a 	add	r2,r2,r3
81138538:	10800104 	addi	r2,r2,4
8113853c:	e0ffff17 	ldw	r3,-4(fp)
81138540:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
81138544:	e0bffe17 	ldw	r2,-8(fp)
81138548:	10000526 	beq	r2,zero,81138560 <alt_iic_isr_register+0xbc>
8113854c:	e0bff817 	ldw	r2,-32(fp)
81138550:	100b883a 	mov	r5,r2
81138554:	e13ffc17 	ldw	r4,-16(fp)
81138558:	113832c0 	call	8113832c <alt_ic_irq_enable>
8113855c:	00000406 	br	81138570 <alt_iic_isr_register+0xcc>
81138560:	e0bff817 	ldw	r2,-32(fp)
81138564:	100b883a 	mov	r5,r2
81138568:	e13ffc17 	ldw	r4,-16(fp)
8113856c:	11383bc0 	call	811383bc <alt_ic_irq_disable>
81138570:	e0bff715 	stw	r2,-36(fp)
81138574:	e0bffa17 	ldw	r2,-24(fp)
81138578:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113857c:	e0bff917 	ldw	r2,-28(fp)
81138580:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
81138584:	e0bff717 	ldw	r2,-36(fp)
}
81138588:	e037883a 	mov	sp,fp
8113858c:	dfc00117 	ldw	ra,4(sp)
81138590:	df000017 	ldw	fp,0(sp)
81138594:	dec00204 	addi	sp,sp,8
81138598:	f800283a 	ret

8113859c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
8113859c:	defff904 	addi	sp,sp,-28
811385a0:	de00012e 	bgeu	sp,et,811385a8 <alt_open_fd+0xc>
811385a4:	003b68fa 	trap	3
811385a8:	dfc00615 	stw	ra,24(sp)
811385ac:	df000515 	stw	fp,20(sp)
811385b0:	df000504 	addi	fp,sp,20
811385b4:	e13ffc15 	stw	r4,-16(fp)
811385b8:	e17ffd15 	stw	r5,-12(fp)
811385bc:	e1bffe15 	stw	r6,-8(fp)
811385c0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
811385c4:	e1bfff17 	ldw	r6,-4(fp)
811385c8:	e17ffe17 	ldw	r5,-8(fp)
811385cc:	e13ffd17 	ldw	r4,-12(fp)
811385d0:	11244040 	call	81124404 <open>
811385d4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
811385d8:	e0bffb17 	ldw	r2,-20(fp)
811385dc:	10001c16 	blt	r2,zero,81138650 <alt_open_fd+0xb4>
  {
    fd->dev      = alt_fd_list[old].dev;
811385e0:	00a04534 	movhi	r2,33044
811385e4:	10b23d04 	addi	r2,r2,-14092
811385e8:	e0fffb17 	ldw	r3,-20(fp)
811385ec:	18c00324 	muli	r3,r3,12
811385f0:	10c5883a 	add	r2,r2,r3
811385f4:	10c00017 	ldw	r3,0(r2)
811385f8:	e0bffc17 	ldw	r2,-16(fp)
811385fc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
81138600:	00a04534 	movhi	r2,33044
81138604:	10b23d04 	addi	r2,r2,-14092
81138608:	e0fffb17 	ldw	r3,-20(fp)
8113860c:	18c00324 	muli	r3,r3,12
81138610:	10c5883a 	add	r2,r2,r3
81138614:	10800104 	addi	r2,r2,4
81138618:	10c00017 	ldw	r3,0(r2)
8113861c:	e0bffc17 	ldw	r2,-16(fp)
81138620:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
81138624:	00a04534 	movhi	r2,33044
81138628:	10b23d04 	addi	r2,r2,-14092
8113862c:	e0fffb17 	ldw	r3,-20(fp)
81138630:	18c00324 	muli	r3,r3,12
81138634:	10c5883a 	add	r2,r2,r3
81138638:	10800204 	addi	r2,r2,8
8113863c:	10c00017 	ldw	r3,0(r2)
81138640:	e0bffc17 	ldw	r2,-16(fp)
81138644:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
81138648:	e13ffb17 	ldw	r4,-20(fp)
8113864c:	11246a80 	call	811246a8 <alt_release_fd>
  }
} 
81138650:	0001883a 	nop
81138654:	e037883a 	mov	sp,fp
81138658:	dfc00117 	ldw	ra,4(sp)
8113865c:	df000017 	ldw	fp,0(sp)
81138660:	dec00204 	addi	sp,sp,8
81138664:	f800283a 	ret

81138668 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
81138668:	defffb04 	addi	sp,sp,-20
8113866c:	de00012e 	bgeu	sp,et,81138674 <alt_io_redirect+0xc>
81138670:	003b68fa 	trap	3
81138674:	dfc00415 	stw	ra,16(sp)
81138678:	df000315 	stw	fp,12(sp)
8113867c:	df000304 	addi	fp,sp,12
81138680:	e13ffd15 	stw	r4,-12(fp)
81138684:	e17ffe15 	stw	r5,-8(fp)
81138688:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
8113868c:	01c07fc4 	movi	r7,511
81138690:	01800044 	movi	r6,1
81138694:	e17ffd17 	ldw	r5,-12(fp)
81138698:	01204534 	movhi	r4,33044
8113869c:	21324004 	addi	r4,r4,-14080
811386a0:	113859c0 	call	8113859c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
811386a4:	01c07fc4 	movi	r7,511
811386a8:	000d883a 	mov	r6,zero
811386ac:	e17ffe17 	ldw	r5,-8(fp)
811386b0:	01204534 	movhi	r4,33044
811386b4:	21323d04 	addi	r4,r4,-14092
811386b8:	113859c0 	call	8113859c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
811386bc:	01c07fc4 	movi	r7,511
811386c0:	01800044 	movi	r6,1
811386c4:	e17fff17 	ldw	r5,-4(fp)
811386c8:	01204534 	movhi	r4,33044
811386cc:	21324304 	addi	r4,r4,-14068
811386d0:	113859c0 	call	8113859c <alt_open_fd>
}  
811386d4:	0001883a 	nop
811386d8:	e037883a 	mov	sp,fp
811386dc:	dfc00117 	ldw	ra,4(sp)
811386e0:	df000017 	ldw	fp,0(sp)
811386e4:	dec00204 	addi	sp,sp,8
811386e8:	f800283a 	ret

811386ec <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
811386ec:	defff204 	addi	sp,sp,-56
811386f0:	de00012e 	bgeu	sp,et,811386f8 <alt_printf+0xc>
811386f4:	003b68fa 	trap	3
811386f8:	dfc00a15 	stw	ra,40(sp)
811386fc:	df000915 	stw	fp,36(sp)
81138700:	df000904 	addi	fp,sp,36
81138704:	e13fff15 	stw	r4,-4(fp)
81138708:	e1400215 	stw	r5,8(fp)
8113870c:	e1800315 	stw	r6,12(fp)
81138710:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
81138714:	e0800204 	addi	r2,fp,8
81138718:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
8113871c:	e0bfff17 	ldw	r2,-4(fp)
81138720:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
81138724:	00006f06 	br	811388e4 <alt_printf+0x1f8>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
81138728:	e0bff807 	ldb	r2,-32(fp)
8113872c:	10800960 	cmpeqi	r2,r2,37
81138730:	1000041e 	bne	r2,zero,81138744 <alt_printf+0x58>
        {
            alt_putchar(c);
81138734:	e0bff807 	ldb	r2,-32(fp)
81138738:	1009883a 	mov	r4,r2
8113873c:	11389200 	call	81138920 <alt_putchar>
81138740:	00006806 	br	811388e4 <alt_printf+0x1f8>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
81138744:	e0bff717 	ldw	r2,-36(fp)
81138748:	10c00044 	addi	r3,r2,1
8113874c:	e0fff715 	stw	r3,-36(fp)
81138750:	10800003 	ldbu	r2,0(r2)
81138754:	e0bff805 	stb	r2,-32(fp)
81138758:	e0bff807 	ldb	r2,-32(fp)
8113875c:	10006926 	beq	r2,zero,81138904 <alt_printf+0x218>
            {
                if (c == '%')
81138760:	e0bff807 	ldb	r2,-32(fp)
81138764:	10800958 	cmpnei	r2,r2,37
81138768:	1000041e 	bne	r2,zero,8113877c <alt_printf+0x90>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
8113876c:	e0bff807 	ldb	r2,-32(fp)
81138770:	1009883a 	mov	r4,r2
81138774:	11389200 	call	81138920 <alt_putchar>
81138778:	00005a06 	br	811388e4 <alt_printf+0x1f8>
                } 
                else if (c == 'c')
8113877c:	e0bff807 	ldb	r2,-32(fp)
81138780:	108018d8 	cmpnei	r2,r2,99
81138784:	1000081e 	bne	r2,zero,811387a8 <alt_printf+0xbc>
                {
                    int v = va_arg(args, int);
81138788:	e0bffe17 	ldw	r2,-8(fp)
8113878c:	10c00104 	addi	r3,r2,4
81138790:	e0fffe15 	stw	r3,-8(fp)
81138794:	10800017 	ldw	r2,0(r2)
81138798:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
8113879c:	e13ffd17 	ldw	r4,-12(fp)
811387a0:	11389200 	call	81138920 <alt_putchar>
811387a4:	00004f06 	br	811388e4 <alt_printf+0x1f8>
                }
                else if (c == 'x')
811387a8:	e0bff807 	ldb	r2,-32(fp)
811387ac:	10801e18 	cmpnei	r2,r2,120
811387b0:	1000341e 	bne	r2,zero,81138884 <alt_printf+0x198>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
811387b4:	e0bffe17 	ldw	r2,-8(fp)
811387b8:	10c00104 	addi	r3,r2,4
811387bc:	e0fffe15 	stw	r3,-8(fp)
811387c0:	10800017 	ldw	r2,0(r2)
811387c4:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
811387c8:	e0bffb17 	ldw	r2,-20(fp)
811387cc:	1000031e 	bne	r2,zero,811387dc <alt_printf+0xf0>
                    {
                        alt_putchar('0');
811387d0:	01000c04 	movi	r4,48
811387d4:	11389200 	call	81138920 <alt_putchar>
                        continue;
811387d8:	00004206 	br	811388e4 <alt_printf+0x1f8>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
811387dc:	00800704 	movi	r2,28
811387e0:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
811387e4:	00000306 	br	811387f4 <alt_printf+0x108>
                        digit_shift -= 4;
811387e8:	e0bff917 	ldw	r2,-28(fp)
811387ec:	10bfff04 	addi	r2,r2,-4
811387f0:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
811387f4:	00c003c4 	movi	r3,15
811387f8:	e0bff917 	ldw	r2,-28(fp)
811387fc:	1884983a 	sll	r2,r3,r2
81138800:	1007883a 	mov	r3,r2
81138804:	e0bffb17 	ldw	r2,-20(fp)
81138808:	1884703a 	and	r2,r3,r2
8113880c:	103ff626 	beq	r2,zero,811387e8 <__reset+0xfb1187e8>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
81138810:	00001906 	br	81138878 <alt_printf+0x18c>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
81138814:	00c003c4 	movi	r3,15
81138818:	e0bff917 	ldw	r2,-28(fp)
8113881c:	1884983a 	sll	r2,r3,r2
81138820:	1007883a 	mov	r3,r2
81138824:	e0bffb17 	ldw	r2,-20(fp)
81138828:	1886703a 	and	r3,r3,r2
8113882c:	e0bff917 	ldw	r2,-28(fp)
81138830:	1884d83a 	srl	r2,r3,r2
81138834:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
81138838:	e0bffc17 	ldw	r2,-16(fp)
8113883c:	108002a8 	cmpgeui	r2,r2,10
81138840:	1000041e 	bne	r2,zero,81138854 <alt_printf+0x168>
                            c = '0' + digit;
81138844:	e0bffc17 	ldw	r2,-16(fp)
81138848:	10800c04 	addi	r2,r2,48
8113884c:	e0bff805 	stb	r2,-32(fp)
81138850:	00000306 	br	81138860 <alt_printf+0x174>
                        else
                            c = 'a' + digit - 10;
81138854:	e0bffc17 	ldw	r2,-16(fp)
81138858:	108015c4 	addi	r2,r2,87
8113885c:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
81138860:	e0bff807 	ldb	r2,-32(fp)
81138864:	1009883a 	mov	r4,r2
81138868:	11389200 	call	81138920 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
8113886c:	e0bff917 	ldw	r2,-28(fp)
81138870:	10bfff04 	addi	r2,r2,-4
81138874:	e0bff915 	stw	r2,-28(fp)
81138878:	e0bff917 	ldw	r2,-28(fp)
8113887c:	103fe50e 	bge	r2,zero,81138814 <__reset+0xfb118814>
81138880:	00001806 	br	811388e4 <alt_printf+0x1f8>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
81138884:	e0bff807 	ldb	r2,-32(fp)
81138888:	10801cd8 	cmpnei	r2,r2,115
8113888c:	1000151e 	bne	r2,zero,811388e4 <alt_printf+0x1f8>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
81138890:	e0bffe17 	ldw	r2,-8(fp)
81138894:	10c00104 	addi	r3,r2,4
81138898:	e0fffe15 	stw	r3,-8(fp)
8113889c:	10800017 	ldw	r2,0(r2)
811388a0:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
811388a4:	00000906 	br	811388cc <alt_printf+0x1e0>
                      alt_putchar(*s++);
811388a8:	e0bffa17 	ldw	r2,-24(fp)
811388ac:	10c00044 	addi	r3,r2,1
811388b0:	e0fffa15 	stw	r3,-24(fp)
811388b4:	10800003 	ldbu	r2,0(r2)
811388b8:	10803fcc 	andi	r2,r2,255
811388bc:	1080201c 	xori	r2,r2,128
811388c0:	10bfe004 	addi	r2,r2,-128
811388c4:	1009883a 	mov	r4,r2
811388c8:	11389200 	call	81138920 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
811388cc:	e0bffa17 	ldw	r2,-24(fp)
811388d0:	10800003 	ldbu	r2,0(r2)
811388d4:	10803fcc 	andi	r2,r2,255
811388d8:	1080201c 	xori	r2,r2,128
811388dc:	10bfe004 	addi	r2,r2,-128
811388e0:	103ff11e 	bne	r2,zero,811388a8 <__reset+0xfb1188a8>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
811388e4:	e0bff717 	ldw	r2,-36(fp)
811388e8:	10c00044 	addi	r3,r2,1
811388ec:	e0fff715 	stw	r3,-36(fp)
811388f0:	10800003 	ldbu	r2,0(r2)
811388f4:	e0bff805 	stb	r2,-32(fp)
811388f8:	e0bff807 	ldb	r2,-32(fp)
811388fc:	103f8a1e 	bne	r2,zero,81138728 <__reset+0xfb118728>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
81138900:	00000106 	br	81138908 <alt_printf+0x21c>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
81138904:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
81138908:	0001883a 	nop
8113890c:	e037883a 	mov	sp,fp
81138910:	dfc00117 	ldw	ra,4(sp)
81138914:	df000017 	ldw	fp,0(sp)
81138918:	dec00504 	addi	sp,sp,20
8113891c:	f800283a 	ret

81138920 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
81138920:	defffd04 	addi	sp,sp,-12
81138924:	de00012e 	bgeu	sp,et,8113892c <alt_putchar+0xc>
81138928:	003b68fa 	trap	3
8113892c:	dfc00215 	stw	ra,8(sp)
81138930:	df000115 	stw	fp,4(sp)
81138934:	df000104 	addi	fp,sp,4
81138938:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
8113893c:	d0a00b17 	ldw	r2,-32724(gp)
81138940:	10800217 	ldw	r2,8(r2)
81138944:	100b883a 	mov	r5,r2
81138948:	e13fff17 	ldw	r4,-4(fp)
8113894c:	111a6540 	call	8111a654 <putc>
#endif
#endif
}
81138950:	e037883a 	mov	sp,fp
81138954:	dfc00117 	ldw	ra,4(sp)
81138958:	df000017 	ldw	fp,0(sp)
8113895c:	dec00204 	addi	sp,sp,8
81138960:	f800283a 	ret

81138964 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
81138964:	deffff04 	addi	sp,sp,-4
81138968:	de00012e 	bgeu	sp,et,81138970 <altera_nios2_gen2_irq_init+0xc>
8113896c:	003b68fa 	trap	3
81138970:	df000015 	stw	fp,0(sp)
81138974:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
81138978:	000170fa 	wrctl	ienable,zero
}
8113897c:	0001883a 	nop
81138980:	e037883a 	mov	sp,fp
81138984:	df000017 	ldw	fp,0(sp)
81138988:	dec00104 	addi	sp,sp,4
8113898c:	f800283a 	ret

81138990 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
81138990:	defff504 	addi	sp,sp,-44

#ifdef ALT_STACK_CHECK

      bltu  sp, et, .Lstack_overflow
81138994:	de002436 	bltu	sp,et,81138a28 <OSCtxSw+0x98>

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
81138998:	d0e00b17 	ldw	r3,-32724(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
8113899c:	d1209017 	ldw	r4,-32192(gp)

      stw ra,  0(sp)
811389a0:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
811389a4:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
811389a8:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
811389ac:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
811389b0:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
811389b4:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
811389b8:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
811389bc:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
811389c0:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
811389c4:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
811389c8:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
811389cc:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
811389d0:	1138c2c0 	call	81138c2c <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
811389d4:	d1208a17 	ldw	r4,-32216(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
811389d8:	d1608187 	ldb	r5,-32250(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
811389dc:	d1209015 	stw	r4,-32192(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
811389e0:	d16081c5 	stb	r5,-32249(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
811389e4:	26c00017 	ldw	sp,0(r4)
      
#if defined(ALT_STACK_CHECK) && (OS_TASK_CREATE_EXT_EN > 0)

      ldw et, 8(r4)                  /* load the new stack limit */
811389e8:	26000217 	ldw	et,8(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
811389ec:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
811389f0:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
811389f4:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
811389f8:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
811389fc:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
81138a00:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
81138a04:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
81138a08:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
81138a0c:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
81138a10:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
81138a14:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
81138a18:	d0e00b15 	stw	r3,-32724(gp)

#endif /* OS_THREAD_SAFE_NEWLIB */

#if defined(ALT_STACK_CHECK) && (OS_TASK_CREATE_EXT_EN > 0)

      stw et, %gprel(alt_stack_limit_value)(gp)
81138a1c:	d6200015 	stw	et,-32768(gp)

#endif

      addi sp, sp, 44
81138a20:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
81138a24:	f800283a 	ret

#ifdef ALT_STACK_CHECK

.Lstack_overflow:
        break 3
81138a28:	003da0fa 	break	3

81138a2c <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
81138a2c:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
81138a30:	047fff84 	movi	r17,-2
      and   r18, r18, r17
81138a34:	9464703a 	and	r18,r18,r17
      wrctl status, r18
81138a38:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
81138a3c:	1138c2c0 	call	81138c2c <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
81138a40:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
81138a44:	d4a07f05 	stb	r18,-32260(gp)

      /*
       * start execution of the new task.
       */

      br 9b
81138a48:	003fe206 	br	811389d4 <__reset+0xfb1189d4>

81138a4c <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
81138a4c:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
81138a50:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
81138a54:	10800054 	ori	r2,r2,1
      wrctl status, r2
81138a58:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
81138a5c:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
81138a60:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
81138a64:	dec00204 	addi	sp,sp,8

      callr r2
81138a68:	103ee83a 	callr	r2

      nop
81138a6c:	0001883a 	nop

81138a70 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
81138a70:	defff704 	addi	sp,sp,-36
81138a74:	de00012e 	bgeu	sp,et,81138a7c <OSTaskStkInit+0xc>
81138a78:	003b68fa 	trap	3
81138a7c:	dfc00815 	stw	ra,32(sp)
81138a80:	df000715 	stw	fp,28(sp)
81138a84:	df000704 	addi	fp,sp,28
81138a88:	e13ffc15 	stw	r4,-16(fp)
81138a8c:	e17ffd15 	stw	r5,-12(fp)
81138a90:	e1bffe15 	stw	r6,-8(fp)
81138a94:	3805883a 	mov	r2,r7
81138a98:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
81138a9c:	e0fffe17 	ldw	r3,-8(fp)
81138aa0:	00bfff04 	movi	r2,-4
81138aa4:	1884703a 	and	r2,r3,r2
81138aa8:	10bef704 	addi	r2,r2,-1060
81138aac:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
81138ab0:	01810904 	movi	r6,1060
81138ab4:	000b883a 	mov	r5,zero
81138ab8:	e13ff917 	ldw	r4,-28(fp)
81138abc:	110f76c0 	call	8110f76c <memset>
81138ac0:	e0bff917 	ldw	r2,-28(fp)
81138ac4:	10c0bb04 	addi	r3,r2,748
81138ac8:	e0bff917 	ldw	r2,-28(fp)
81138acc:	10c00115 	stw	r3,4(r2)
81138ad0:	e0bff917 	ldw	r2,-28(fp)
81138ad4:	10c0d504 	addi	r3,r2,852
81138ad8:	e0bff917 	ldw	r2,-28(fp)
81138adc:	10c00215 	stw	r3,8(r2)
81138ae0:	e0bff917 	ldw	r2,-28(fp)
81138ae4:	10c0ef04 	addi	r3,r2,956
81138ae8:	e0bff917 	ldw	r2,-28(fp)
81138aec:	10c00315 	stw	r3,12(r2)
81138af0:	e0fff917 	ldw	r3,-28(fp)
81138af4:	00a04534 	movhi	r2,33044
81138af8:	10b00904 	addi	r2,r2,-16348
81138afc:	18800d15 	stw	r2,52(r3)
81138b00:	e0bff917 	ldw	r2,-28(fp)
81138b04:	00c00044 	movi	r3,1
81138b08:	10c02915 	stw	r3,164(r2)
81138b0c:	10002a15 	stw	zero,168(r2)
81138b10:	e0bff917 	ldw	r2,-28(fp)
81138b14:	00ccc384 	movi	r3,13070
81138b18:	10c02b0d 	sth	r3,172(r2)
81138b1c:	e0bff917 	ldw	r2,-28(fp)
81138b20:	00eaf344 	movi	r3,-21555
81138b24:	10c02b8d 	sth	r3,174(r2)
81138b28:	e0bff917 	ldw	r2,-28(fp)
81138b2c:	00c48d04 	movi	r3,4660
81138b30:	10c02c0d 	sth	r3,176(r2)
81138b34:	e0bff917 	ldw	r2,-28(fp)
81138b38:	00f99b44 	movi	r3,-6547
81138b3c:	10c02c8d 	sth	r3,178(r2)
81138b40:	e0bff917 	ldw	r2,-28(fp)
81138b44:	00f7bb04 	movi	r3,-8468
81138b48:	10c02d0d 	sth	r3,180(r2)
81138b4c:	e0bff917 	ldw	r2,-28(fp)
81138b50:	00c00144 	movi	r3,5
81138b54:	10c02d8d 	sth	r3,182(r2)
81138b58:	e0bff917 	ldw	r2,-28(fp)
81138b5c:	00c002c4 	movi	r3,11
81138b60:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
81138b64:	e0bff917 	ldw	r2,-28(fp)
81138b68:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
81138b6c:	e0bffa17 	ldw	r2,-24(fp)
81138b70:	10bff304 	addi	r2,r2,-52
81138b74:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
81138b78:	e0bffb17 	ldw	r2,-20(fp)
81138b7c:	10800c04 	addi	r2,r2,48
81138b80:	e0fffc17 	ldw	r3,-16(fp)
81138b84:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
81138b88:	e0bffb17 	ldw	r2,-20(fp)
81138b8c:	10800b04 	addi	r2,r2,44
81138b90:	e0fffd17 	ldw	r3,-12(fp)
81138b94:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
81138b98:	e0bffb17 	ldw	r2,-20(fp)
81138b9c:	10800a04 	addi	r2,r2,40
81138ba0:	e0fff917 	ldw	r3,-28(fp)
81138ba4:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
81138ba8:	00a04534 	movhi	r2,33044
81138bac:	10a29304 	addi	r2,r2,-30132
81138bb0:	10c00104 	addi	r3,r2,4
81138bb4:	e0bffb17 	ldw	r2,-20(fp)
81138bb8:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
81138bbc:	e0bffb17 	ldw	r2,-20(fp)
}
81138bc0:	e037883a 	mov	sp,fp
81138bc4:	dfc00117 	ldw	ra,4(sp)
81138bc8:	df000017 	ldw	fp,0(sp)
81138bcc:	dec00204 	addi	sp,sp,8
81138bd0:	f800283a 	ret

81138bd4 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
81138bd4:	defffe04 	addi	sp,sp,-8
81138bd8:	de00012e 	bgeu	sp,et,81138be0 <OSTaskCreateHook+0xc>
81138bdc:	003b68fa 	trap	3
81138be0:	df000115 	stw	fp,4(sp)
81138be4:	df000104 	addi	fp,sp,4
81138be8:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
81138bec:	0001883a 	nop
81138bf0:	e037883a 	mov	sp,fp
81138bf4:	df000017 	ldw	fp,0(sp)
81138bf8:	dec00104 	addi	sp,sp,4
81138bfc:	f800283a 	ret

81138c00 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
81138c00:	defffe04 	addi	sp,sp,-8
81138c04:	de00012e 	bgeu	sp,et,81138c0c <OSTaskDelHook+0xc>
81138c08:	003b68fa 	trap	3
81138c0c:	df000115 	stw	fp,4(sp)
81138c10:	df000104 	addi	fp,sp,4
81138c14:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
81138c18:	0001883a 	nop
81138c1c:	e037883a 	mov	sp,fp
81138c20:	df000017 	ldw	fp,0(sp)
81138c24:	dec00104 	addi	sp,sp,4
81138c28:	f800283a 	ret

81138c2c <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
81138c2c:	deffff04 	addi	sp,sp,-4
81138c30:	de00012e 	bgeu	sp,et,81138c38 <OSTaskSwHook+0xc>
81138c34:	003b68fa 	trap	3
81138c38:	df000015 	stw	fp,0(sp)
81138c3c:	d839883a 	mov	fp,sp
}
81138c40:	0001883a 	nop
81138c44:	e037883a 	mov	sp,fp
81138c48:	df000017 	ldw	fp,0(sp)
81138c4c:	dec00104 	addi	sp,sp,4
81138c50:	f800283a 	ret

81138c54 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
81138c54:	deffff04 	addi	sp,sp,-4
81138c58:	de00012e 	bgeu	sp,et,81138c60 <OSTaskStatHook+0xc>
81138c5c:	003b68fa 	trap	3
81138c60:	df000015 	stw	fp,0(sp)
81138c64:	d839883a 	mov	fp,sp
}
81138c68:	0001883a 	nop
81138c6c:	e037883a 	mov	sp,fp
81138c70:	df000017 	ldw	fp,0(sp)
81138c74:	dec00104 	addi	sp,sp,4
81138c78:	f800283a 	ret

81138c7c <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
81138c7c:	defffe04 	addi	sp,sp,-8
81138c80:	de00012e 	bgeu	sp,et,81138c88 <OSTimeTickHook+0xc>
81138c84:	003b68fa 	trap	3
81138c88:	dfc00115 	stw	ra,4(sp)
81138c8c:	df000015 	stw	fp,0(sp)
81138c90:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr++;
81138c94:	d0a0a50b 	ldhu	r2,-32108(gp)
81138c98:	10800044 	addi	r2,r2,1
81138c9c:	d0a0a50d 	sth	r2,-32108(gp)
    if (OSTmrCtr >= (OS_TICKS_PER_SEC / OS_TMR_CFG_TICKS_PER_SEC)) {
81138ca0:	d0a0a50b 	ldhu	r2,-32108(gp)
81138ca4:	10bfffcc 	andi	r2,r2,65535
81138ca8:	10803230 	cmpltui	r2,r2,200
81138cac:	1000021e 	bne	r2,zero,81138cb8 <OSTimeTickHook+0x3c>
        OSTmrCtr = 0;
81138cb0:	d020a50d 	sth	zero,-32108(gp)
        OSTmrSignal();
81138cb4:	112e5fc0 	call	8112e5fc <OSTmrSignal>
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
81138cb8:	0001883a 	nop
81138cbc:	e037883a 	mov	sp,fp
81138cc0:	dfc00117 	ldw	ra,4(sp)
81138cc4:	df000017 	ldw	fp,0(sp)
81138cc8:	dec00204 	addi	sp,sp,8
81138ccc:	f800283a 	ret

81138cd0 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
81138cd0:	deffff04 	addi	sp,sp,-4
81138cd4:	de00012e 	bgeu	sp,et,81138cdc <OSInitHookBegin+0xc>
81138cd8:	003b68fa 	trap	3
81138cdc:	df000015 	stw	fp,0(sp)
81138ce0:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
81138ce4:	d020a50d 	sth	zero,-32108(gp)
#endif
}
81138ce8:	0001883a 	nop
81138cec:	e037883a 	mov	sp,fp
81138cf0:	df000017 	ldw	fp,0(sp)
81138cf4:	dec00104 	addi	sp,sp,4
81138cf8:	f800283a 	ret

81138cfc <OSInitHookEnd>:

void OSInitHookEnd(void)
{
81138cfc:	deffff04 	addi	sp,sp,-4
81138d00:	de00012e 	bgeu	sp,et,81138d08 <OSInitHookEnd+0xc>
81138d04:	003b68fa 	trap	3
81138d08:	df000015 	stw	fp,0(sp)
81138d0c:	d839883a 	mov	fp,sp
}
81138d10:	0001883a 	nop
81138d14:	e037883a 	mov	sp,fp
81138d18:	df000017 	ldw	fp,0(sp)
81138d1c:	dec00104 	addi	sp,sp,4
81138d20:	f800283a 	ret

81138d24 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
81138d24:	deffff04 	addi	sp,sp,-4
81138d28:	de00012e 	bgeu	sp,et,81138d30 <OSTaskIdleHook+0xc>
81138d2c:	003b68fa 	trap	3
81138d30:	df000015 	stw	fp,0(sp)
81138d34:	d839883a 	mov	fp,sp
}
81138d38:	0001883a 	nop
81138d3c:	e037883a 	mov	sp,fp
81138d40:	df000017 	ldw	fp,0(sp)
81138d44:	dec00104 	addi	sp,sp,4
81138d48:	f800283a 	ret

81138d4c <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
81138d4c:	defffe04 	addi	sp,sp,-8
81138d50:	de00012e 	bgeu	sp,et,81138d58 <OSTCBInitHook+0xc>
81138d54:	003b68fa 	trap	3
81138d58:	df000115 	stw	fp,4(sp)
81138d5c:	df000104 	addi	fp,sp,4
81138d60:	e13fff15 	stw	r4,-4(fp)
}
81138d64:	0001883a 	nop
81138d68:	e037883a 	mov	sp,fp
81138d6c:	df000017 	ldw	fp,0(sp)
81138d70:	dec00104 	addi	sp,sp,4
81138d74:	f800283a 	ret

81138d78 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
81138d78:	defffe04 	addi	sp,sp,-8
81138d7c:	de00012e 	bgeu	sp,et,81138d84 <alt_exception_cause_generated_bad_addr+0xc>
81138d80:	003b68fa 	trap	3
81138d84:	df000115 	stw	fp,4(sp)
81138d88:	df000104 	addi	fp,sp,4
81138d8c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
81138d90:	e0bfff17 	ldw	r2,-4(fp)
81138d94:	10bffe84 	addi	r2,r2,-6
81138d98:	10c00428 	cmpgeui	r3,r2,16
81138d9c:	18001a1e 	bne	r3,zero,81138e08 <alt_exception_cause_generated_bad_addr+0x90>
81138da0:	100690ba 	slli	r3,r2,2
81138da4:	00a04534 	movhi	r2,33044
81138da8:	10a36e04 	addi	r2,r2,-29256
81138dac:	1885883a 	add	r2,r3,r2
81138db0:	10800017 	ldw	r2,0(r2)
81138db4:	1000683a 	jmp	r2
81138db8:	81138df8 	rdprs	r4,r16,20023
81138dbc:	81138df8 	rdprs	r4,r16,20023
81138dc0:	81138e08 	cmpgei	r4,r16,20024
81138dc4:	81138e08 	cmpgei	r4,r16,20024
81138dc8:	81138e08 	cmpgei	r4,r16,20024
81138dcc:	81138df8 	rdprs	r4,r16,20023
81138dd0:	81138e00 	call	881138e0 <__reset+0x20f38e0>
81138dd4:	81138e08 	cmpgei	r4,r16,20024
81138dd8:	81138df8 	rdprs	r4,r16,20023
81138ddc:	81138df8 	rdprs	r4,r16,20023
81138de0:	81138e08 	cmpgei	r4,r16,20024
81138de4:	81138df8 	rdprs	r4,r16,20023
81138de8:	81138e00 	call	881138e0 <__reset+0x20f38e0>
81138dec:	81138e08 	cmpgei	r4,r16,20024
81138df0:	81138e08 	cmpgei	r4,r16,20024
81138df4:	81138df8 	rdprs	r4,r16,20023
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
81138df8:	00800044 	movi	r2,1
81138dfc:	00000306 	br	81138e0c <alt_exception_cause_generated_bad_addr+0x94>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
81138e00:	0005883a 	mov	r2,zero
81138e04:	00000106 	br	81138e0c <alt_exception_cause_generated_bad_addr+0x94>

  default:
    return 0;
81138e08:	0005883a 	mov	r2,zero
  }
}
81138e0c:	e037883a 	mov	sp,fp
81138e10:	df000017 	ldw	fp,0(sp)
81138e14:	dec00104 	addi	sp,sp,4
81138e18:	f800283a 	ret

81138e1c <atexit>:
81138e1c:	200b883a 	mov	r5,r4
81138e20:	000f883a 	mov	r7,zero
81138e24:	000d883a 	mov	r6,zero
81138e28:	0009883a 	mov	r4,zero
81138e2c:	1138eec1 	jmpi	81138eec <__register_exitproc>

81138e30 <exit>:
81138e30:	defffe04 	addi	sp,sp,-8
81138e34:	000b883a 	mov	r5,zero
81138e38:	de00012e 	bgeu	sp,et,81138e40 <exit+0x10>
81138e3c:	003b68fa 	trap	3
81138e40:	dc000015 	stw	r16,0(sp)
81138e44:	dfc00115 	stw	ra,4(sp)
81138e48:	2021883a 	mov	r16,r4
81138e4c:	113900c0 	call	8113900c <__call_exitprocs>
81138e50:	00a04534 	movhi	r2,33044
81138e54:	10b73204 	addi	r2,r2,-9016
81138e58:	11000017 	ldw	r4,0(r2)
81138e5c:	20800f17 	ldw	r2,60(r4)
81138e60:	10000126 	beq	r2,zero,81138e68 <exit+0x38>
81138e64:	103ee83a 	callr	r2
81138e68:	8009883a 	mov	r4,r16
81138e6c:	11391940 	call	81139194 <_exit>

81138e70 <memcmp>:
81138e70:	01c000c4 	movi	r7,3
81138e74:	3980192e 	bgeu	r7,r6,81138edc <memcmp+0x6c>
81138e78:	2144b03a 	or	r2,r4,r5
81138e7c:	11c4703a 	and	r2,r2,r7
81138e80:	10000f26 	beq	r2,zero,81138ec0 <memcmp+0x50>
81138e84:	20800003 	ldbu	r2,0(r4)
81138e88:	28c00003 	ldbu	r3,0(r5)
81138e8c:	10c0151e 	bne	r2,r3,81138ee4 <memcmp+0x74>
81138e90:	31bfff84 	addi	r6,r6,-2
81138e94:	01ffffc4 	movi	r7,-1
81138e98:	00000406 	br	81138eac <memcmp+0x3c>
81138e9c:	20800003 	ldbu	r2,0(r4)
81138ea0:	28c00003 	ldbu	r3,0(r5)
81138ea4:	31bfffc4 	addi	r6,r6,-1
81138ea8:	10c00e1e 	bne	r2,r3,81138ee4 <memcmp+0x74>
81138eac:	21000044 	addi	r4,r4,1
81138eb0:	29400044 	addi	r5,r5,1
81138eb4:	31fff91e 	bne	r6,r7,81138e9c <__reset+0xfb118e9c>
81138eb8:	0005883a 	mov	r2,zero
81138ebc:	f800283a 	ret
81138ec0:	20c00017 	ldw	r3,0(r4)
81138ec4:	28800017 	ldw	r2,0(r5)
81138ec8:	18bfee1e 	bne	r3,r2,81138e84 <__reset+0xfb118e84>
81138ecc:	31bfff04 	addi	r6,r6,-4
81138ed0:	21000104 	addi	r4,r4,4
81138ed4:	29400104 	addi	r5,r5,4
81138ed8:	39bff936 	bltu	r7,r6,81138ec0 <__reset+0xfb118ec0>
81138edc:	303fe91e 	bne	r6,zero,81138e84 <__reset+0xfb118e84>
81138ee0:	003ff506 	br	81138eb8 <__reset+0xfb118eb8>
81138ee4:	10c5c83a 	sub	r2,r2,r3
81138ee8:	f800283a 	ret

81138eec <__register_exitproc>:
81138eec:	defffa04 	addi	sp,sp,-24
81138ef0:	de00012e 	bgeu	sp,et,81138ef8 <__register_exitproc+0xc>
81138ef4:	003b68fa 	trap	3
81138ef8:	dc000315 	stw	r16,12(sp)
81138efc:	04204534 	movhi	r16,33044
81138f00:	84373204 	addi	r16,r16,-9016
81138f04:	80c00017 	ldw	r3,0(r16)
81138f08:	dc400415 	stw	r17,16(sp)
81138f0c:	dfc00515 	stw	ra,20(sp)
81138f10:	18805217 	ldw	r2,328(r3)
81138f14:	2023883a 	mov	r17,r4
81138f18:	10003726 	beq	r2,zero,81138ff8 <__register_exitproc+0x10c>
81138f1c:	10c00117 	ldw	r3,4(r2)
81138f20:	010007c4 	movi	r4,31
81138f24:	20c00e16 	blt	r4,r3,81138f60 <__register_exitproc+0x74>
81138f28:	1a000044 	addi	r8,r3,1
81138f2c:	8800221e 	bne	r17,zero,81138fb8 <__register_exitproc+0xcc>
81138f30:	18c00084 	addi	r3,r3,2
81138f34:	18c7883a 	add	r3,r3,r3
81138f38:	18c7883a 	add	r3,r3,r3
81138f3c:	12000115 	stw	r8,4(r2)
81138f40:	10c7883a 	add	r3,r2,r3
81138f44:	19400015 	stw	r5,0(r3)
81138f48:	0005883a 	mov	r2,zero
81138f4c:	dfc00517 	ldw	ra,20(sp)
81138f50:	dc400417 	ldw	r17,16(sp)
81138f54:	dc000317 	ldw	r16,12(sp)
81138f58:	dec00604 	addi	sp,sp,24
81138f5c:	f800283a 	ret
81138f60:	00800034 	movhi	r2,0
81138f64:	10800004 	addi	r2,r2,0
81138f68:	10002626 	beq	r2,zero,81139004 <__register_exitproc+0x118>
81138f6c:	01006404 	movi	r4,400
81138f70:	d9400015 	stw	r5,0(sp)
81138f74:	d9800115 	stw	r6,4(sp)
81138f78:	d9c00215 	stw	r7,8(sp)
81138f7c:	00000000 	call	80000000 <OSCtxSw_SWITCH_PC+0x7fffffbc>
81138f80:	d9400017 	ldw	r5,0(sp)
81138f84:	d9800117 	ldw	r6,4(sp)
81138f88:	d9c00217 	ldw	r7,8(sp)
81138f8c:	10001d26 	beq	r2,zero,81139004 <__register_exitproc+0x118>
81138f90:	81000017 	ldw	r4,0(r16)
81138f94:	10000115 	stw	zero,4(r2)
81138f98:	02000044 	movi	r8,1
81138f9c:	22405217 	ldw	r9,328(r4)
81138fa0:	0007883a 	mov	r3,zero
81138fa4:	12400015 	stw	r9,0(r2)
81138fa8:	20805215 	stw	r2,328(r4)
81138fac:	10006215 	stw	zero,392(r2)
81138fb0:	10006315 	stw	zero,396(r2)
81138fb4:	883fde26 	beq	r17,zero,81138f30 <__reset+0xfb118f30>
81138fb8:	18c9883a 	add	r4,r3,r3
81138fbc:	2109883a 	add	r4,r4,r4
81138fc0:	1109883a 	add	r4,r2,r4
81138fc4:	21802215 	stw	r6,136(r4)
81138fc8:	01800044 	movi	r6,1
81138fcc:	12406217 	ldw	r9,392(r2)
81138fd0:	30cc983a 	sll	r6,r6,r3
81138fd4:	4992b03a 	or	r9,r9,r6
81138fd8:	12406215 	stw	r9,392(r2)
81138fdc:	21c04215 	stw	r7,264(r4)
81138fe0:	01000084 	movi	r4,2
81138fe4:	893fd21e 	bne	r17,r4,81138f30 <__reset+0xfb118f30>
81138fe8:	11006317 	ldw	r4,396(r2)
81138fec:	218cb03a 	or	r6,r4,r6
81138ff0:	11806315 	stw	r6,396(r2)
81138ff4:	003fce06 	br	81138f30 <__reset+0xfb118f30>
81138ff8:	18805304 	addi	r2,r3,332
81138ffc:	18805215 	stw	r2,328(r3)
81139000:	003fc606 	br	81138f1c <__reset+0xfb118f1c>
81139004:	00bfffc4 	movi	r2,-1
81139008:	003fd006 	br	81138f4c <__reset+0xfb118f4c>

8113900c <__call_exitprocs>:
8113900c:	defff504 	addi	sp,sp,-44
81139010:	de00012e 	bgeu	sp,et,81139018 <__call_exitprocs+0xc>
81139014:	003b68fa 	trap	3
81139018:	df000915 	stw	fp,36(sp)
8113901c:	dd400615 	stw	r21,24(sp)
81139020:	dc800315 	stw	r18,12(sp)
81139024:	dfc00a15 	stw	ra,40(sp)
81139028:	ddc00815 	stw	r23,32(sp)
8113902c:	dd800715 	stw	r22,28(sp)
81139030:	dd000515 	stw	r20,20(sp)
81139034:	dcc00415 	stw	r19,16(sp)
81139038:	dc400215 	stw	r17,8(sp)
8113903c:	dc000115 	stw	r16,4(sp)
81139040:	d9000015 	stw	r4,0(sp)
81139044:	2839883a 	mov	fp,r5
81139048:	04800044 	movi	r18,1
8113904c:	057fffc4 	movi	r21,-1
81139050:	00a04534 	movhi	r2,33044
81139054:	10b73204 	addi	r2,r2,-9016
81139058:	12000017 	ldw	r8,0(r2)
8113905c:	45005217 	ldw	r20,328(r8)
81139060:	44c05204 	addi	r19,r8,328
81139064:	a0001c26 	beq	r20,zero,811390d8 <__call_exitprocs+0xcc>
81139068:	a0800117 	ldw	r2,4(r20)
8113906c:	15ffffc4 	addi	r23,r2,-1
81139070:	b8000d16 	blt	r23,zero,811390a8 <__call_exitprocs+0x9c>
81139074:	14000044 	addi	r16,r2,1
81139078:	8421883a 	add	r16,r16,r16
8113907c:	8421883a 	add	r16,r16,r16
81139080:	84402004 	addi	r17,r16,128
81139084:	a463883a 	add	r17,r20,r17
81139088:	a421883a 	add	r16,r20,r16
8113908c:	e0001e26 	beq	fp,zero,81139108 <__call_exitprocs+0xfc>
81139090:	80804017 	ldw	r2,256(r16)
81139094:	e0801c26 	beq	fp,r2,81139108 <__call_exitprocs+0xfc>
81139098:	bdffffc4 	addi	r23,r23,-1
8113909c:	843fff04 	addi	r16,r16,-4
811390a0:	8c7fff04 	addi	r17,r17,-4
811390a4:	bd7ff91e 	bne	r23,r21,8113908c <__reset+0xfb11908c>
811390a8:	00800034 	movhi	r2,0
811390ac:	10800004 	addi	r2,r2,0
811390b0:	10000926 	beq	r2,zero,811390d8 <__call_exitprocs+0xcc>
811390b4:	a0800117 	ldw	r2,4(r20)
811390b8:	1000301e 	bne	r2,zero,8113917c <__call_exitprocs+0x170>
811390bc:	a0800017 	ldw	r2,0(r20)
811390c0:	10003226 	beq	r2,zero,8113918c <__call_exitprocs+0x180>
811390c4:	a009883a 	mov	r4,r20
811390c8:	98800015 	stw	r2,0(r19)
811390cc:	00000000 	call	80000000 <OSCtxSw_SWITCH_PC+0x7fffffbc>
811390d0:	9d000017 	ldw	r20,0(r19)
811390d4:	a03fe41e 	bne	r20,zero,81139068 <__reset+0xfb119068>
811390d8:	dfc00a17 	ldw	ra,40(sp)
811390dc:	df000917 	ldw	fp,36(sp)
811390e0:	ddc00817 	ldw	r23,32(sp)
811390e4:	dd800717 	ldw	r22,28(sp)
811390e8:	dd400617 	ldw	r21,24(sp)
811390ec:	dd000517 	ldw	r20,20(sp)
811390f0:	dcc00417 	ldw	r19,16(sp)
811390f4:	dc800317 	ldw	r18,12(sp)
811390f8:	dc400217 	ldw	r17,8(sp)
811390fc:	dc000117 	ldw	r16,4(sp)
81139100:	dec00b04 	addi	sp,sp,44
81139104:	f800283a 	ret
81139108:	a0800117 	ldw	r2,4(r20)
8113910c:	80c00017 	ldw	r3,0(r16)
81139110:	10bfffc4 	addi	r2,r2,-1
81139114:	15c01426 	beq	r2,r23,81139168 <__call_exitprocs+0x15c>
81139118:	80000015 	stw	zero,0(r16)
8113911c:	183fde26 	beq	r3,zero,81139098 <__reset+0xfb119098>
81139120:	95c8983a 	sll	r4,r18,r23
81139124:	a0806217 	ldw	r2,392(r20)
81139128:	a5800117 	ldw	r22,4(r20)
8113912c:	2084703a 	and	r2,r4,r2
81139130:	10000b26 	beq	r2,zero,81139160 <__call_exitprocs+0x154>
81139134:	a0806317 	ldw	r2,396(r20)
81139138:	2088703a 	and	r4,r4,r2
8113913c:	20000c1e 	bne	r4,zero,81139170 <__call_exitprocs+0x164>
81139140:	89400017 	ldw	r5,0(r17)
81139144:	d9000017 	ldw	r4,0(sp)
81139148:	183ee83a 	callr	r3
8113914c:	a0800117 	ldw	r2,4(r20)
81139150:	15bfbf1e 	bne	r2,r22,81139050 <__reset+0xfb119050>
81139154:	98800017 	ldw	r2,0(r19)
81139158:	153fcf26 	beq	r2,r20,81139098 <__reset+0xfb119098>
8113915c:	003fbc06 	br	81139050 <__reset+0xfb119050>
81139160:	183ee83a 	callr	r3
81139164:	003ff906 	br	8113914c <__reset+0xfb11914c>
81139168:	a5c00115 	stw	r23,4(r20)
8113916c:	003feb06 	br	8113911c <__reset+0xfb11911c>
81139170:	89000017 	ldw	r4,0(r17)
81139174:	183ee83a 	callr	r3
81139178:	003ff406 	br	8113914c <__reset+0xfb11914c>
8113917c:	a0800017 	ldw	r2,0(r20)
81139180:	a027883a 	mov	r19,r20
81139184:	1029883a 	mov	r20,r2
81139188:	003fb606 	br	81139064 <__reset+0xfb119064>
8113918c:	0005883a 	mov	r2,zero
81139190:	003ffb06 	br	81139180 <__reset+0xfb119180>

81139194 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
81139194:	defffd04 	addi	sp,sp,-12
81139198:	de00012e 	bgeu	sp,et,811391a0 <_exit+0xc>
8113919c:	003b68fa 	trap	3
811391a0:	df000215 	stw	fp,8(sp)
811391a4:	df000204 	addi	fp,sp,8
811391a8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
811391ac:	d0207f05 	stb	zero,-32260(gp)
811391b0:	e0bfff17 	ldw	r2,-4(fp)
811391b4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
811391b8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
811391bc:	10000226 	beq	r2,zero,811391c8 <_exit+0x34>
    ALT_SIM_FAIL();
811391c0:	002af070 	cmpltui	zero,zero,43969
811391c4:	00000106 	br	811391cc <_exit+0x38>
  } else {
    ALT_SIM_PASS();
811391c8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
811391cc:	003fff06 	br	811391cc <__reset+0xfb1191cc>
